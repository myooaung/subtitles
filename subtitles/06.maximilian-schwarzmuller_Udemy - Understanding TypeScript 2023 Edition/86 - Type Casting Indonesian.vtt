WEBVTT

00:02.260 --> 00:03.920
Instruktur: Jadi, serikat pekerja yang didiskriminasi.

00:03.920 --> 00:05.750
Sungguh, sangat berguna.

00:05.750 --> 00:09.060
Fitur lain yang sangat berguna adalah type casting.

00:09.060 --> 00:12.640
Type casting membantu Anda memberi tahu TypeScript bahwa

00:12.640 --> 00:15.350
beberapa nilai adalah tipe tertentu di mana TypeScript

00:15.350 --> 00:19.240
tidak dapat mendeteksinya sendiri, tetapi Anda sebagai pengembang

00:19.240 --> 00:22.660
tahu bahwa itu akan menjadi kasusnya.

00:22.660 --> 00:25.030
Contoh yang bagus untuk ini adalah jika kita

00:25.030 --> 00:27.120
mendapatkan X untuk sesuatu di dom.

00:27.120 --> 00:29.560
Katakanlah di sini kita memiliki paragraf di dom hanya

00:29.560 --> 00:32.180
sebuah paragraf, tidak ada yang lain di sana, dan itu adalah

00:32.180 --> 00:33.390
paragraf kosong.

00:33.390 --> 00:35.190
Jadi jelas jika kita menyimpannya, kita

00:35.190 --> 00:37.150
tidak melihat apa pun di sini, di layar.

00:37.150 --> 00:38.950
Sekarang kita bisa mendapatkan akses ke paragraf

00:38.950 --> 00:40.543
itu dari dalam skrip kita di sini.

00:43.160 --> 00:48.160
Const paragraf dengan selektor kueri dokumen P, misalnya.

00:49.180 --> 00:51.890
Sekarang ketika kita menggunakan selektor kueri dan kita

00:51.890 --> 00:54.500
mengoper P sebagai selektor sehingga dipilih oleh tag

00:54.500 --> 00:57.070
P, maka TypeScript sebenarnya dapat mengetahui, seperti

00:57.070 --> 00:59.510
yang Anda lihat jika saya mengarahkan kursor ke atasnya,

00:59.510 --> 01:02.480
bahwa ini akan menjadi elemen paragraf tipe atau null karena mungkin

01:02.480 --> 01:07.050
elemen seperti itu tidak ada di halaman, tetapi itu adalah hal yang berbeda.

01:07.050 --> 01:09.920
Mari kita abaikan kasus or null untuk saat ini.

01:09.920 --> 01:12.400
Hal yang penting adalah TypeScript benar-benar mengetahui

01:12.400 --> 01:14.600
bahwa ini adalah elemen paragraf.

01:14.600 --> 01:16.800
Sekarang, ini berubah jika kita memilih berdasarkan

01:16.800 --> 01:18.460
sesuatu yang lain, katakanlah ID.

01:18.460 --> 01:22.020
Kita namakan di sini pesan-output, jadi paragraf ini

01:22.020 --> 01:23.920
memiliki ID pesan-output.

01:23.920 --> 01:25.890
Sekarang kita sebagai pengembang tentu saja tahu

01:25.890 --> 01:28.360
bahwa kita menugaskan ID ini ke paragraf ini, tetapi TypeScript

01:28.360 --> 01:29.780
tidak mengetahuinya.

01:29.780 --> 01:33.020
TypeScript tidak menyelam ke dalam file HTML kita

01:33.020 --> 01:34.590
dan menganalisisnya.

01:34.590 --> 01:37.360
Jadi jika sekarang kita pilih berdasarkan

01:37.360 --> 01:41.720
ID itu di sini, misalnya, dengan getElementById, maka kita melihat

01:41.720 --> 01:45.130
apa yang TypeScript simpulkan adalah bahwa ini hanyalah

01:45.130 --> 01:49.830
elemen HTML atau null, tidak tahu elemen HTML spesifik mana itu.

01:49.830 --> 01:52.720
Sekarang, untuk sebuah paragraf, itu mungkin tidak terlalu

01:52.720 --> 01:54.830
penting, mungkin kita hanya ingin melakukan

01:54.830 --> 01:57.290
hal-hal yang bisa kita lakukan dengan elemen

01:57.290 --> 02:01.470
HTML, misalnya, mengakses konten teksnya atau semacamnya.

02:01.470 --> 02:03.220
Tetapi, bagaimana kalau kita punya masukan di sini?

02:03.220 --> 02:07.750
Bagaimana jika kita sebenarnya memiliki teks tipe input, dan kita ingin mendapatkan

02:07.750 --> 02:10.430
nilai yang dimasukkan pengguna, jadi saya akan

02:10.430 --> 02:12.760
memberinya ID user-input dan sekarang saya

02:12.760 --> 02:15.500
memilih ini dalam kode TypeScript saya.

02:15.500 --> 02:17.730
Jadi di sini saya pilih berdasarkan ID user-input,

02:17.730 --> 02:21.530
dan itu bukan lagi paragraf, tetapi userInputElement.

02:21.530 --> 02:24.023
Sekarang kita sebagai pengembang, kita tahu bahwa di sini, kita

02:24.909 --> 02:26.700
menjangkau elemen input ini, tetapi seperti yang

02:26.700 --> 02:28.530
saya katakan, TypeScript tidak tahu itu.

02:28.530 --> 02:31.140
TypeScript tidak membaca kode HTML kita, jadi TypeScript

02:31.140 --> 02:34.435
hanya tahu bahwa itu adalah beberapa elemen HTML.

02:34.435 --> 02:37.860
Sekarang, jika saya ingin mengatur properti nilai

02:37.860 --> 02:40.902
dari ini karena itu, dan itu akan mencoba melakukan

02:40.902 --> 02:45.000
userInputElement. nilai sama dengan hai di sana, Anda lihat bahwa

02:45.000 --> 02:47.050
saya benar-benar mendapatkan kesalahan.

02:47.050 --> 02:48.960
Saya mendapatkan error karena salah

02:48.960 --> 02:50.780
satunya, objek ini mungkin null.

02:50.780 --> 02:54.220
Kita dapat memperbaikinya dengan menambahkan tanda

02:54.220 --> 02:56.210
seru setelah ini, dan saya akan

02:56.210 --> 02:58.390
kembali ke ini sebentar lagi, tetapi

02:58.390 --> 03:01.640
bahkan kemudian saya masih mendapatkan kesalahan

03:01.640 --> 03:03.890
bahwa nilai tidak ada pada tipe HTML

03:03.890 --> 03:08.343
Element karena tipe generik ini, yang pada dasarnya elemen HTML apa pun

03:08.343 --> 03:11.630
memiliki tipe, tidak mendukung properti yang khusus

03:11.630 --> 03:14.510
untuk, yah, elemen HTML tertentu.

03:14.510 --> 03:17.540
Jadi, kita perlu memberi tahu TypeScript bahwa

03:17.540 --> 03:20.860
sebenarnya yang kita pilih di sini bukan hanya

03:20.860 --> 03:25.080
bukan null, tetapi juga bertipe HTMLInputElement.

03:25.080 --> 03:28.240
Dan itulah yang bisa kita lakukan dengan type casting.

03:28.240 --> 03:31.153
Sekarang, ada dua cara pengecoran tipe, dua sintaks

03:31.153 --> 03:34.170
yang bisa kita gunakan, dan keduanya setara.

03:34.170 --> 03:36.971
Salah satunya adalah kita menambahkan sesuatu di depan

03:36.971 --> 03:41.920
hal yang ingin kita ubah, atau di mana kita ingin memberi tahu TypeScript untuk mengetik.

03:41.920 --> 03:44.170
Kami menambahkan tanda kurung siku membuka

03:44.170 --> 03:45.810
dan menutup dan kemudian di antara

03:45.810 --> 03:49.480
tanda kurung ini, jenis benda setelah tanda kurung siku.

03:49.480 --> 03:51.223
Dalam hal ini, HTMLInputElement.

03:53.110 --> 03:54.970
Dan tipe ini tersedia secara global karena

03:54.970 --> 03:57.963
dalam file tsconfig saya, saya menyertakan dom lib.

03:59.180 --> 04:00.810
Dengan itu, TypeScript tahu

04:00.810 --> 04:03.830
bahwa apa pun yang kita pilih di sini setelah tanda kurung

04:03.830 --> 04:06.530
siku akan bertipe HTMLInputElement, dan oleh

04:06.530 --> 04:08.950
karena itu tidak mengeluh lagi.

04:08.950 --> 04:10.330
Jadi, ini adalah versi satu.

04:10.330 --> 04:12.830
Izinkan saya menyalinnya dan mengomentarinya serta menunjukkan

04:12.830 --> 04:14.750
alternatifnya kepada Anda.

04:14.750 --> 04:18.000
Ini berfungsi dengan sangat baik dan Anda bisa menggunakan ini.

04:18.000 --> 04:21.210
Sekarang, jika Anda tahu React, bagaimanapun, Anda tahu

04:21.210 --> 04:24.400
bahwa di sana, Anda juga memiliki sintaksis braket bersudut

04:24.400 --> 04:26.970
di dalam JavaScript atau TypeScript jika Anda

04:26.970 --> 04:29.200
menggunakannya untuk file React, di

04:29.200 --> 04:33.550
mana Anda menulis kode JSX dalam komponen React Anda.

04:33.550 --> 04:36.060
Sekarang, jika Anda tidak tahu React, itu mungkin tidak banyak memberi tahu Anda.

04:36.060 --> 04:40.800
Perlu diketahui bahwa sintaks serupa ada di proyek React dan di sana tanda kurung siku

04:40.800 --> 04:43.320
tidak digunakan untuk menyampaikan informasi

04:43.320 --> 04:47.480
apa pun mengenai jenis yang Anda gunakan, tetapi sebaliknya mereka diurai

04:47.480 --> 04:50.390
oleh beberapa alat build dan oleh React, pada akhirnya,

04:50.390 --> 04:54.390
untuk mengetahui apa yang ingin Anda render di layar.

04:54.390 --> 04:56.750
Jadi, benar-benar terlepas dari TypeScript.

04:56.750 --> 04:59.880
Agar tidak berbenturan dengan sintaks JSX tersebut, tim

04:59.880 --> 05:01.900
TypeScript menyediakan alternatif

05:01.900 --> 05:04.350
untuk pengecoran tipe braket miring ini.

05:04.350 --> 05:06.450
Anda juga dapat menambahkan sesuatu setelah

05:06.450 --> 05:07.920
hal yang ingin Anda ketik cast,

05:07.920 --> 05:09.960
jadi setelah pilihan ini dalam kasus ini,

05:09.960 --> 05:12.600
dan hal itu adalah kata kunci as.

05:12.600 --> 05:14.740
Dan kemudian di sini Anda kembali menambahkan

05:14.740 --> 05:16.750
tipe yang ingin Anda cast ini.

05:16.750 --> 05:19.970
Jadi, ini sekarang memberitahu TypeScript bahwa

05:19.970 --> 05:23.730
ekspresi di depannya, dalam hal ini, ekspresi ini di sini,

05:23.730 --> 05:27.405
akan menghasilkan nilai tipe HTMLInputElement.

05:27.405 --> 05:30.067
Oleh karena itu, sekali lagi, kita tidak mendapatkan kesalahan.

05:30.067 --> 05:31.650
Jadi, ini adalah alternatif, dan

05:31.650 --> 05:33.940
Anda dapat menggunakan salah satu dari dua sintaksis,

05:33.940 --> 05:36.350
apa pun yang Anda sukai, Anda hanya harus mencoba

05:36.350 --> 05:38.990
untuk konsisten di seluruh proyek Anda sehingga Anda

05:38.990 --> 05:42.377
tidak bergantian di antara kedua sintaksis ini.

05:42.377 --> 05:45.220
Dan dengan itu, Anda dapat meneruskan informasi tambahan

05:45.220 --> 05:47.480
yang berharga ini ke TypeScript dan membuat

05:47.480 --> 05:50.400
kode seperti ini berfungsi, meskipun TypeScript sendiri

05:50.400 --> 05:52.760
tidak akan dapat mengetahui bahwa ini di sini

05:52.760 --> 05:56.000
menghasilkan HTMLInputElement.

05:56.000 --> 05:57.940
Tentu saja, karena Anda memaksa TypeScript

05:57.940 --> 06:00.420
untuk menggunakan tipe ini, Anda bertanggung jawab

06:00.420 --> 06:02.200
sebagai pengembang untuk memastikan

06:02.200 --> 06:05.620
bahwa apa pun yang dihasilkan ekspresi ini akan bertipe tersebut.

06:05.620 --> 06:07.700
Jika tidak, Anda mungkin mendapatkan run time error

06:07.700 --> 06:09.920
atau perilaku yang tidak diharapkan pada saat run time

06:09.920 --> 06:12.780
jika Anda mencoba berinteraksi dengan elemen tersebut dengan cara

06:12.780 --> 06:14.423
yang sebenarnya tidak didukung.

06:15.610 --> 06:18.060
Jadi, type casting adalah fitur yang dahsyat.

06:18.060 --> 06:20.490
Begitu juga tanda seru di sini.

06:20.490 --> 06:22.590
Saya sebenarnya sudah menjelajahi ini

06:22.590 --> 06:24.820
sedikit lebih awal dalam kursus ini.

06:24.820 --> 06:27.470
Tanda seru ini memungkinkan kita untuk memberitahu TypeScript

06:27.470 --> 06:31.090
bahwa ekspresi di depannya tidak akan pernah menghasilkan null.

06:31.090 --> 06:33.170
Dan ini diperlukan untuk beberapa ekspresi,

06:33.170 --> 06:35.070
seperti ini di sini, ketika Anda memilih

06:35.070 --> 06:38.010
sesuatu dari dom yang mungkin mengembalikan null.

06:38.010 --> 06:40.980
Jika kita tahu sebagai pengembang bahwa ini tidak akan pernah mengembalikan

06:40.980 --> 06:43.690
null, maka kita dapat menggunakan tanda seru ini.

06:43.690 --> 06:45.470
Jika tidak, dan Anda sudah mempelajarinya,

06:45.470 --> 06:48.248
saya hanya ingin menegaskannya kembali.

06:48.248 --> 06:49.380
Jika tidak, jika Anda tidak yakin

06:49.380 --> 06:52.600
bahwa ini tidak akan mengembalikan null, Anda dapat menggunakan pemeriksaan if.

06:52.600 --> 06:56.070
Jadi, Anda bisa memeriksa apakah userInputElement benar, dan oleh

06:56.070 --> 06:57.510
karena itu tidak null, dan kemudian

06:57.510 --> 06:59.440
menggunakannya di sana.

06:59.440 --> 07:02.720
Sekarang, saya harus menghapus type casting dalam kasus ini karena jika kita

07:02.720 --> 07:04.670
melakukan type cast di sini, kita juga memberi

07:04.670 --> 07:07.170
tahu TypeScript bahwa ini tidak akan null, dan karena saya

07:07.170 --> 07:10.470
tidak yakin tentang itu, saya tidak bisa melakukan cast di sini.

07:10.470 --> 07:13.120
Sebaliknya, saya harus melakukannya di sini ketika saya menggunakan

07:13.120 --> 07:14.290
nilai, dan oleh karena itu saya

07:14.290 --> 07:16.600
ingin melakukannya sebelum saya mengakses properti nilai,

07:16.600 --> 07:19.820
dengan menambahkan sebagai HTMLInputElement seperti ini.

07:19.820 --> 07:21.530
Tentu saja itu, bagaimanapun juga, akan gagal.

07:21.530 --> 07:24.060
Ini adalah sintaks yang tidak valid, Anda

07:24.060 --> 07:28.030
akan mencoba mengakses properti nilai pada HTMLInputElement,

07:28.030 --> 07:30.280
dan ini bahkan tidak masuk akal.

07:30.280 --> 07:33.010
Kita hanya perlu membungkus ekspresi ini ke dalam tanda

07:33.010 --> 07:35.670
kurung, lalu memastikan bahwa ini dievaluasi terlebih

07:35.670 --> 07:37.590
dahulu, dan kemudian kita mencoba mengakses

07:37.590 --> 07:39.480
nilai pada hasil ekspresi ini.

07:39.480 --> 07:41.650
Dan sekarang kita memiliki alternatif untuk

07:41.650 --> 07:42.893
menggunakan tanda seru.
