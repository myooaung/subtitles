WEBVTT

00:02.170 --> 00:04.760
ผู้สอน: ตอนนี้เรามีโปรเจ็กต์ที่กำหนดค่าอย่างถูกต้องแล้ว

00:04.760 --> 00:10.500
เรามาเจาะลึกกันสักหน่อยว่าคุณสามารถดีบักโปรเจ็กต์ของคุณอย่างไร หรือวิธีที่คุณจะมีโฟลว์การพัฒนาที่ยอดเยี่ยมได้อย่างไร

00:10.500 --> 00:14.575
ฉันแสดงให้คุณเห็นการตั้งค่า IDE พื้นฐานเมื่อเริ่มต้นหลักสูตรนี้

00:14.575 --> 00:17.750
ตรวจสอบให้แน่ใจว่าคุณได้ติดตั้งส่วนขยายที่ถูกต้องแล้ว

00:17.750 --> 00:22.750
สำหรับ TypeScript นั้นจะลงมาที่ ESLint ซึ่งสามารถช่วยคุณในการลบรหัส

00:22.980 --> 00:26.410
TypeScript ของคุณ

00:26.410 --> 00:31.620
ดังนั้น ด้วยการปรับปรุงคุณภาพรหัส แม้ว่าคุณอาจต้องการการกำหนดค่าเพิ่มเติมเพื่อให้

00:31.620 --> 00:33.900
ESLint มีผล

00:33.900 --> 00:38.570
มันสามารถช่วยคุณในโครงการขั้นสูงที่ยังน่าสนใจกว่านั้น

00:38.570 --> 00:45.770
คุณต้องการใช้ Prettier เพื่อจัดรูปแบบรหัสของคุณโดยอัตโนมัติและมีรหัสที่จัดรูปแบบอย่างสวยงาม

00:45.770 --> 00:53.140
และคุณอาจต้องการลองใช้ Debugger สำหรับ Chrome เพราะนั่นทำให้คุณสามารถดีบักไฟล์ TypeScript

00:53.140 --> 00:55.810
ของคุณได้ จากภายใน VS Code ผ่าน Chrome

00:55.810 --> 00:59.440
แต่ไม่ต้องใช้ Chrome Dev Tools

00:59.440 --> 01:02.653
แน่นอนคุณสามารถใช้สิ่งเหล่านั้นได้เช่นเดียวกับที่คุณได้เรียนรู้

01:02.653 --> 01:07.160
หากคุณเปิดใช้งาน sourceMaps ที่นี่ ซึ่งแน่นอนว่าคุณสามารถทำได้เสมอ

01:07.160 --> 01:09.240
คุณจะได้รับไฟล์ที่แปลแล้วที่นั่นด้วย

01:09.240 --> 01:10.429
ซึ่งดีมาก

01:10.429 --> 01:14.170
แต่คุณสามารถใช้ VS Code ได้เช่นกัน

01:14.170 --> 01:15.960
คุณสามารถวางเบรกพอยต์ที่นี่

01:15.960 --> 01:17.340
สมมติว่าใน clickHandler

01:17.340 --> 01:19.842
และตอนนี้ในการเปิดไฟล์ของคุณที่นี่ผ่าน

01:19.842 --> 01:24.842
VS Code คุณต้องเปิดใช้งาน sourceMaps ด้วย แต่เรายังคงสามารถใช้

01:26.100 --> 01:30.950
VS Code แทนเบราว์เซอร์ Dev Tools ได้

01:30.950 --> 01:34.570
ดังนั้น เปิดใช้งาน sourceMaps วางเบรกพอยต์ของคุณ

01:34.570 --> 01:38.930
จากนั้นไปที่ Debug, Start Debugging

01:38.930 --> 01:40.320
ตอนนี้ ครั้งแรกที่คุณเรียกใช้สิ่งนี้

01:40.320 --> 01:42.170
ควรถามถึงสภาพแวดล้อมและเมื่อติดตั้งส่วนขยายดีบักเกอร์สำหรับ

01:42.170 --> 01:47.850
Chrome แล้ว คุณควรจะสามารถเลือก Chrome ได้

01:47.850 --> 01:49.960
ตอนนี้จะไปเปิดตัวแล้ว json ที่คุณกำหนดค่าว่าควรเปิดใช้งานอย่างไร

01:49.960 --> 01:59.330
และคุณควรชี้ไปที่ localhost:3000 เพราะนั่นคือจุดที่เซิร์ฟเวอร์การพัฒนาของเรากำลังทำงานอยู่ และแน่นอนว่าเป็นกระบวนการนั้น ดังนั้นกระบวนการเริ่มต้น

01:59.330 --> 02:04.220
npm ควรเริ่มต้นและทำงาน

02:04.220 --> 02:06.910
หากต้องการชี้ไปที่ localhost:3000 ที่นั่นและในฐานะ

02:06.910 --> 02:09.740
webRoot คุณสามารถปล่อยตัวยึดตำแหน่งนั้นไว้ที่นี่

02:09.740 --> 02:13.780
ซึ่งหมายความว่าโฟลเดอร์โปรเจ็กต์นี้จะถือว่าเป็นโฮสต์ของไฟล์ของคุณซึ่งเป็นกรณีนี้

02:13.780 --> 02:19.780
และตอนนี้คอมไพล์โค้ดของคุณเพื่อให้ซอร์สแมปถูกสร้างขึ้นหลังจากการตั้งค่า การกำหนดค่า sourceMaps

02:19.780 --> 02:25.290
เป็นจริง เพื่อให้เรามีสิ่งเหล่านี้ในโค้ด JavaScript

02:25.290 --> 02:28.400
จากนั้นเพิ่มเบรกพอยต์ของคุณที่นี่และการเปิดตัวของคุณ

02:28.400 --> 02:28.400
กำหนดค่า

02:28.400 --> 02:30.400
json แล้ว เรียกใช้การดีบักที่นี่

02:30.400 --> 02:34.830
เริ่มแก้ไขจุดบกพร่องทันทีและจะเปิดแท็บใหม่ทันทีโดยอัตโนมัติ

02:34.830 --> 02:38.730
แท็บนี้จะปิดเมื่อใดก็ตามที่คุณออกจากกระบวนการแก้ไขข้อบกพร่อง

02:38.730 --> 02:41.940
หรือหากคุณปิดแท็บ กระบวนการแก้ไขข้อบกพร่องจะปิดลง

02:41.940 --> 02:44.590
จากจุดนี้ ให้คุณป้อนมุมมองการดีบักที่นี่ใน

02:44.590 --> 02:46.790
VS Code ซึ่งคุณสามารถติดตามตัวแปร

02:46.790 --> 02:48.230
ดูนิพจน์บางอย่าง และดู

02:48.230 --> 02:50.120
call stack ปัจจุบัน และถ้าคุณคลิกที่

02:50.120 --> 02:54.120
Click Me คุณควรจะกลับเข้าไปในตัวแก้ไขและหยุดการทำงานของโค้ดชั่วคราว

02:54.120 --> 02:56.590
ที่เบรกพอยต์ของคุณในไฟล์ TypeScript

02:56.590 --> 03:04.540
และตอนนี้คุณสามารถดำเนินการผ่านไฟล์ของเธอ ตรวจสอบค่าในเครื่องสำหรับคำหลักนี้หรือสำหรับตัวแปรข้อความ ตัวอย่างเช่น

03:04.540 --> 03:13.320
ตัวแปรทั้งสคริปต์ที่คุณอาจมีและตัวแปรส่วนกลางที่คุณมีสิทธิ์เข้าถึงวัตถุส่วนกลาง

03:13.320 --> 03:15.560
คุณสามารถดูนิพจน์บางอย่าง

03:15.560 --> 03:19.290
เช่น ข้อความ + เครื่องหมายอัศเจรีย์หลายตัว และจากนั้น

03:19.290 --> 03:27.483
คุณสามารถติดตามค่าที่อยู่ในหน้าต่างนี้ได้ทุกเมื่อหากต้องการเพื่อให้ใช้งานได้

03:27.483 --> 03:30.480
และคุณสามารถดูสแต็กการเรียกฟังก์ชันปัจจุบันได้

03:30.480 --> 03:37.590
เช่น ที่จะเกิดขึ้นใน clickHandler และตอนนี้คุณสามารถก้าวผ่านโค้ดของคุณด้วยการควบคุมเหล่านี้เพื่อไปยังขั้นตอนถัดไป

03:37.590 --> 03:41.500
ข้ามการเรียกฟังก์ชันถัดไป ก้าวเข้าสู่การเรียกฟังก์ชัน หรือ

03:41.500 --> 03:43.827
การก้าวออกจากการเรียกฟังก์ชันปัจจุบันและ

03:43.827 --> 03:46.710
call stack แน่นอนว่าที่นี่จะปรับตามนั้น และด้วยสิ่งนั้น

03:46.710 --> 04:00.290
คุณสามารถละเว้นสิ่งนี้ของเบราว์เซอร์ได้ที่นี่ โดยที่คุณจะสามารถดำเนินการโค้ดต่อได้เสมอโดยคลิกปุ่มเล่นและหยุดชั่วคราวเมื่อใดก็ตาม คุณถึงจุดพักของคุณในครั้งต่อไป

04:00.290 --> 04:02.080
นี่คือวิธีที่คุณสามารถดีบักโค้ด

04:02.080 --> 04:04.050
คุณสามารถลบเบรกพอยต์ได้โดยคลิกที่เบรกพอยต์นั้น

04:04.050 --> 04:05.910
นี่คือวิธีที่คุณสามารถดีบักโค้ดจากภายใน

04:05.910 --> 04:09.728
VS Code ด้วยความช่วยเหลือของเครื่องมือดีบั๊กในตัว ส่วนขยาย

04:09.728 --> 04:12.450
Chrome Debugger การกำหนดค่าที่ได้รับ และ

04:12.450 --> 04:15.470
soureMaps ซึ่งตั้งค่าไว้ในการกำหนดค่า TypeScript

04:15.470 --> 04:17.743
ของคุณ
