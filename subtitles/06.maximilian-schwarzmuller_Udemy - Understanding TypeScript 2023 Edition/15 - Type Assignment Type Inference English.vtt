WEBVTT

1
00:00:02.270 --> 00:00:03.850
<v Instructor>So we're using the core types</v>

2
00:00:03.850 --> 00:00:07.450
of number, boolean, and string.

3
00:00:07.450 --> 00:00:10.840
And here in the list of parameters of this function,

4
00:00:10.840 --> 00:00:13.970
we're always explicitly assigning the types

5
00:00:13.970 --> 00:00:16.540
with a colon after the parameter name,

6
00:00:16.540 --> 00:00:18.410
and then the name of the type.

7
00:00:18.410 --> 00:00:21.350
So here, the names are number, boolean, string.

8
00:00:21.350 --> 00:00:23.100
And in case you were wondering,

9
00:00:23.100 --> 00:00:25.420
these are now special identifiers.

10
00:00:25.420 --> 00:00:28.530
This overall, here, is a special syntax

11
00:00:28.530 --> 00:00:30.170
which is added by TypeScript.

12
00:00:30.170 --> 00:00:32.900
It's not part of the compiled JavaScript code.

13
00:00:32.900 --> 00:00:35.040
If we check that code here,

14
00:00:35.040 --> 00:00:37.280
these type assignments are gone,

15
00:00:37.280 --> 00:00:39.530
because JavaScript does not support them.

16
00:00:39.530 --> 00:00:42.390
This colon thing after a variable,

17
00:00:42.390 --> 00:00:43.920
or after a parameter.

18
00:00:43.920 --> 00:00:46.320
And then number and boolean and string.

19
00:00:46.320 --> 00:00:48.290
These special key words.

20
00:00:48.290 --> 00:00:50.840
This is introduced by TypeScript.

21
00:00:50.840 --> 00:00:53.500
The TypeScript compiler understands it.

22
00:00:53.500 --> 00:00:55.480
The IDE here supports TypeScript,

23
00:00:55.480 --> 00:00:58.580
and therefore doesn't complain about these special keywords.

24
00:00:58.580 --> 00:01:01.760
JavaScript does not understand this syntax.

25
00:01:01.760 --> 00:01:04.590
It doesn't understand a colon after a parameter,

26
00:01:04.590 --> 00:01:06.560
or a colon after a variable,

27
00:01:06.560 --> 00:01:09.190
and then the special number or string keyword.

28
00:01:09.190 --> 00:01:11.540
JavaScript doesn't understand this and therefore

29
00:01:11.540 --> 00:01:13.560
this is not part of the JavaScript output.

30
00:01:13.560 --> 00:01:15.920
It's really just used by the TypeScript compiler.

31
00:01:15.920 --> 00:01:18.130
And then, well, it is a compiler

32
00:01:18.130 --> 00:01:21.820
because it converts this code to JavaScript code.

33
00:01:21.820 --> 00:01:24.880
Side note, you also see it switches const for var

34
00:01:24.880 --> 00:01:27.700
but that's something I'll come back to later.

35
00:01:27.700 --> 00:01:30.590
So, we have our explicit type assignments here

36
00:01:30.590 --> 00:01:33.060
and it's only understood by TypeScript.

37
00:01:33.060 --> 00:01:35.763
Great, why don't we have them down there?

38
00:01:36.880 --> 00:01:39.890
I don't have explicit type assignments here.

39
00:01:39.890 --> 00:01:41.180
And, by the way, also not here

40
00:01:41.180 --> 00:01:43.450
when we calculate the result, for example,

41
00:01:43.450 --> 00:01:45.530
because TypeScript has a built-in feature

42
00:01:45.530 --> 00:01:48.400
which is called type inference.

43
00:01:48.400 --> 00:01:51.000
This means that TypeScript does its best,

44
00:01:51.000 --> 00:01:53.010
and it does a pretty good job there,

45
00:01:53.010 --> 00:01:56.400
to understand which type you have

46
00:01:56.400 --> 00:01:58.860
in a certain variable or constant.

47
00:01:58.860 --> 00:02:02.300
And here, for example, it understands that number1

48
00:02:02.300 --> 00:02:05.780
will always be of type number in the end,

49
00:02:05.780 --> 00:02:08.020
because you initialize it with a number.

50
00:02:08.020 --> 00:02:09.950
Now, this actually is a constant,

51
00:02:09.950 --> 00:02:11.740
so it's even more specific than that.

52
00:02:11.740 --> 00:02:15.350
And the type it identifies here is not just any number,

53
00:02:15.350 --> 00:02:17.490
it's the number five.

54
00:02:17.490 --> 00:02:20.110
Because you'll not be able to assign a new number,

55
00:02:20.110 --> 00:02:23.870
or a new value to a const value anyways.

56
00:02:23.870 --> 00:02:25.840
If you were to change this to a variable,

57
00:02:25.840 --> 00:02:28.460
so if you would use let instead,

58
00:02:28.460 --> 00:02:30.180
then of course this would not break anything.

59
00:02:30.180 --> 00:02:32.940
We can use a variable there, it might not be best practice

60
00:02:32.940 --> 00:02:34.540
because this value never changes

61
00:02:34.540 --> 00:02:36.210
but it's also not horrible.

62
00:02:36.210 --> 00:02:38.260
But now if hover over this we see

63
00:02:38.260 --> 00:02:41.210
TypeScript doesn't say, okay, this has to be a five.

64
00:02:41.210 --> 00:02:45.510
But still it detects that the type here is a number.

65
00:02:45.510 --> 00:02:49.260
Now, we absolutely could write this code here on our own.

66
00:02:49.260 --> 00:02:51.970
We can add a colon after the variable name

67
00:02:51.970 --> 00:02:53.870
on the left side of the equal sign,

68
00:02:53.870 --> 00:02:55.590
and then the name of the type.

69
00:02:55.590 --> 00:02:56.880
So, basically the same we did

70
00:02:56.880 --> 00:02:59.470
in the parameters of this function.

71
00:02:59.470 --> 00:03:01.860
But, this is redundant and it actually

72
00:03:01.860 --> 00:03:04.620
is also not considered to be a good practice.

73
00:03:04.620 --> 00:03:06.790
Because TypeScript is able

74
00:03:06.790 --> 00:03:09.990
to perfectly infer this type from there.

75
00:03:09.990 --> 00:03:13.690
So, assigning this is not a good idea.

76
00:03:13.690 --> 00:03:16.420
This only changes if you would create this variable

77
00:03:16.420 --> 00:03:18.053
in a unassigned way.

78
00:03:19.000 --> 00:03:22.130
Like this, if you don't initialize it immediately.

79
00:03:22.130 --> 00:03:25.700
Then, it's a good practice to tell TypeScript

80
00:03:25.700 --> 00:03:29.070
which value will eventually be stored in there.

81
00:03:29.070 --> 00:03:32.590
So that when you later assign a value to it,

82
00:03:32.590 --> 00:03:34.080
and of course it's a bit redundant here

83
00:03:34.080 --> 00:03:35.320
to split this in two lines.

84
00:03:35.320 --> 00:03:37.800
I'm just doing this for demo purposes.

85
00:03:37.800 --> 00:03:39.480
But now if I assign this here,

86
00:03:39.480 --> 00:03:42.460
this breaks because I told TypeScript in advance

87
00:03:42.460 --> 00:03:44.630
that this will be of type number.

88
00:03:44.630 --> 00:03:45.610
You don't have to do that.

89
00:03:45.610 --> 00:03:47.420
It also works if you don't do that.

90
00:03:47.420 --> 00:03:50.330
But now you could also add this five

91
00:03:50.330 --> 00:03:51.630
and you wouldn't get an error

92
00:03:51.630 --> 00:03:53.470
because you're not telling TypeScript

93
00:03:53.470 --> 00:03:55.350
anything about the type

94
00:03:55.350 --> 00:03:56.975
which will be stored in this variable

95
00:03:56.975 --> 00:03:59.630
and therefore TypeScript allows any type.

96
00:03:59.630 --> 00:04:02.600
If you instead add colon number here,

97
00:04:02.600 --> 00:04:05.417
you're telling TypeScript, "Hey, eventually,

98
00:04:05.417 --> 00:04:07.370
"a number will be stored in there."

99
00:04:07.370 --> 00:04:10.060
And hence if you later store something else in there,

100
00:04:10.060 --> 00:04:12.470
like in this case where we stored a string,

101
00:04:12.470 --> 00:04:15.170
you'll get an error here in the IDE,

102
00:04:15.170 --> 00:04:17.570
and of course also if you compiled your code.

103
00:04:17.570 --> 00:04:20.253
We'll get the error we already saw before.

104
00:04:22.300 --> 00:04:24.920
So this is how you can assign types.

105
00:04:24.920 --> 00:04:27.830
Now, even if TypeScript just inferred a type,

106
00:04:27.830 --> 00:04:29.310
and let me fix this,

107
00:04:29.310 --> 00:04:32.720
it will yell at you if you break that inferred type.

108
00:04:32.720 --> 00:04:35.670
Actually, it's wrong to say even because of course it does,

109
00:04:35.670 --> 00:04:37.000
why would it not do that?

110
00:04:37.000 --> 00:04:39.750
Type inference is there for you to save you code,

111
00:04:39.750 --> 00:04:42.730
to avoid that you manually have to assign a type.

112
00:04:42.730 --> 00:04:44.520
Of course TypeScript yells at you

113
00:04:44.520 --> 00:04:46.510
if you then use a wrong type,

114
00:04:46.510 --> 00:04:48.640
a type that it did not infer.

115
00:04:48.640 --> 00:04:52.460
For example, here if resultPhrase is created with let

116
00:04:52.460 --> 00:04:54.000
so that it's variable,

117
00:04:54.000 --> 00:04:57.670
then TypeScript here infers that this will be of type string

118
00:04:57.670 --> 00:04:59.850
because we initialize it with a string.

119
00:04:59.850 --> 00:05:03.060
So this is basically the equivalent to not initializing it,

120
00:05:03.060 --> 00:05:04.970
and setting the type on our own,

121
00:05:04.970 --> 00:05:07.410
and then assigning a value later.

122
00:05:07.410 --> 00:05:12.310
Now, if we change resultPhrase to, let's say,

123
00:05:12.310 --> 00:05:15.660
zero here, for whatever reason we might wanna do that,

124
00:05:15.660 --> 00:05:17.330
well then we get an error here

125
00:05:17.330 --> 00:05:21.210
that type zero is not assignable of type string.

126
00:05:21.210 --> 00:05:22.690
And that makes sense, right?

127
00:05:22.690 --> 00:05:25.430
TypeScript inferred that we wanna store a string,

128
00:05:25.430 --> 00:05:27.290
we're now trying to store a number,

129
00:05:27.290 --> 00:05:28.530
we get an error.

130
00:05:28.530 --> 00:05:33.000
That's the job, the core task of TypeScript.

131
00:05:33.000 --> 00:05:35.280
Checking types and yelling at us

132
00:05:35.280 --> 00:05:36.963
if we're using them incorrectly.

