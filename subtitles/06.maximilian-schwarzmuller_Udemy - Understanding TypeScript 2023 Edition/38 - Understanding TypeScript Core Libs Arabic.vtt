WEBVTT

00:02.190 --> 00:03.570
-: لقد حصلنا أيضًا على وحدة هنا.

00:03.570 --> 00:06.050
الآن ، الوحدة النمطية هي خيار سأتخطاه

00:06.050 --> 00:07.540
الآن ، لأنه يكون منطقيًا

00:07.540 --> 00:10.830
فقط بمجرد أن نتعرف على الوحدات في TypeScript وكيف

00:10.830 --> 00:13.400
يمكننا توصيل ملفات متعددة.

00:13.400 --> 00:15.350
لذلك دعونا نتجاهل ذلك الآن.

00:15.350 --> 00:17.250
ليب شيء مثير للاهتمام بالرغم من ذلك.

00:17.250 --> 00:20.890
Lib هو خيار يسمح لك بتحديد الكائنات والميزات

00:20.890 --> 00:25.650
الافتراضية التي يعرفها TypeScript.

00:25.650 --> 00:28.580
مع ذلك أعني أشياء مثل العمل مع دوم.

00:28.580 --> 00:31.930
دعنا نقول في الفهرس. html لدينا زر وعلى هذا

00:31.930 --> 00:33.700
الزر نقول ، "انقر فوقي. الآن ، عندما نضغط على هذا الزر ، نريد

00:33.700 --> 00:35.100
فقط طباعة الرسالة.

00:35.100 --> 00:36.610
الآن ، في التطبيق. يمكننا تحديد هذا الزر.

00:36.610 --> 00:39.820
يمكننا الوصول إلى هذا

00:39.820 --> 00:41.420
الزر مع المستند. الاستعلام

00:43.808 --> 00:44.641
على سبيل المثال ، اختيار الزر الأول الذي نجده.

00:44.641 --> 00:48.130
الآن إذا فعلنا ذلك فإن هذا يعمل.

00:48.130 --> 00:51.580
لا نحصل على أنواع الخطأ هنا.

00:51.580 --> 00:53.000
لذلك إذا انتقلت إلى الزر

00:53.000 --> 00:58.000
الخاص بي وأضفت EventListener هنا ، فسأحصل على خطأ هنا في الواقع لأن TypeScript لا يعرف

00:58.390 --> 01:00.990
على وجه اليقين ما إذا كنا سنجد زرًا هنا.

01:00.990 --> 01:04.010
في الوقت الحالي يمكننا التغلب على ذلك بعلامة

01:04.010 --> 01:07.310
تعجب ، بعد هذا السطر وسأعود إلى ما سيفعله هذا بالضبط

01:07.310 --> 01:08.860
في المستقبل.

01:08.860 --> 01:11.320
يخبر TypeScript أساسًا ، "لا تقلق

01:11.320 --> 01:13.667
،" مثل هذا الزر سيكون موجودًا.

01:13.667 --> 01:15.097
"سنحصل على قيمة هنا. حتى الآن يمكننا إضافة حدث انقر هنا.

01:15.097 --> 01:17.360
ثم تجد بعض الوظائف المجهولة ربما

01:17.360 --> 01:19.470
حيث تكون وحدة التحكم. تم النقر فوق السجل.

01:19.470 --> 01:21.670
الآن ، الشيء المثير للاهتمام هنا ليس كثيرًا

01:21.670 --> 01:24.920
أنني اضطررت إلى إضافة علامة التعجب

01:24.920 --> 01:26.450
، كما قلت ، سأعود إلى ذلك ، ولكن

01:26.450 --> 01:29.310
إذا قمت بتشغيل tsc ، فإن هذا يجمع فقط.

01:29.310 --> 01:31.150
الآن ، ألا يجب أن يشكو

01:31.150 --> 01:34.840
TypeScript من أن المستند غير معروف هنا؟

01:34.840 --> 01:38.370
كيف تعرف أن لدينا مثل هذا المستند ، ثابتًا أو متغيرًا

01:38.370 --> 01:39.690
متاحًا؟

01:39.690 --> 01:43.290
كيف يعرف أنه حتى لو كان لدينا ذلك متاحًا ،

01:43.290 --> 01:45.610
فإنه يحتوي على كائن له طريقة

01:45.610 --> 01:48.350
querySelector الخاصة بنا؟

01:48.350 --> 01:50.010
كيف تعرف أن هذا الزر هو الشيء الذي يحتوي

01:50.010 --> 01:51.690
على طريقة addEventListener؟

01:51.690 --> 01:55.932
كيف يعرف TypeScript كل ذلك؟

01:55.932 --> 01:57.120
الآن يمكنك أن تقول ، "بالطبع تعرف. لأنه في Vanilla JavaScript

01:57.120 --> 01:59.290
سيكون هذا رمزًا صالحًا ولكن ضع في اعتبارك

01:59.290 --> 02:01.430
أنه عندما تكتب رمز TypeScript ، فأنت لا

02:01.430 --> 02:03.290
تكتبه بالضرورة للمتصفح.

02:03.290 --> 02:05.580
هل يمكن أن تكتب العقدة الخاصة بك. js مع TypeScript

02:05.580 --> 02:08.080
وهناك بالفعل لن

02:08.080 --> 02:11.310
يعمل هذا كله.

02:11.310 --> 02:13.200
لذلك ، السبب وراء نجاح

02:13.200 --> 02:14.630
هذا الخيار هو خيار lib هذا وكما ترى

02:14.630 --> 02:18.280
لم يتم تعيينه هنا ، ولكن إذا لم يتم تعيينه ، فسيتم افتراض بعض الإعدادات الافتراضية.

02:18.280 --> 02:21.940
إذا لم يتم تعيين الإعدادات الافتراضية ، فستعتمد

02:21.940 --> 02:24.420
على هدف JavaScript هنا ، وبالنسبة

02:24.420 --> 02:28.180
لـ es6 ، فإنه يتضمن افتراضيًا جميع الميزات المتوفرة

02:28.180 --> 02:31.536
عالميًا في es6.

02:31.536 --> 02:33.270
على سبيل المثال ، كائن الخريطة المتاح في es6.

02:33.270 --> 02:35.940
لذلك لن يشتكي إذا كنت تستخدم Map.

02:35.940 --> 02:40.120
لذلك يفترض أن جميع ميزات es6 التي يتم

02:40.120 --> 02:45.120
توفيرها عالميًا في JavaScript ، متوفرة في TypeScript

02:46.400 --> 02:48.700
أيضًا.

02:50.677 --> 02:51.780
وبالإضافة إلى ذلك ، فإنه

02:51.780 --> 02:54.530
يفترض أن جميع واجهات برمجة تطبيقات DOM متاحة.

02:54.530 --> 02:57.070
بالمناسبة ، ستجد الأوصاف التفصيلية لكل هذه

02:57.070 --> 03:00.670
الخيارات في المربع الرسمي والتي تم ربطها في المحاضرة في نهاية

03:00.670 --> 03:01.740
هذه الوحدة.

03:01.740 --> 03:04.550
لذا ، باختصار القصة الطويلة ، إذا لم يتم تعيين خيار

03:04.550 --> 03:07.300
lib ، فسيتم افتراض بعض الإعدادات الافتراضية وهذه

03:07.300 --> 03:09.490
هي الإعدادات الافتراضية التي تحتاجها

03:09.490 --> 03:11.520
لتشغيل TypeScript في المتصفح.

03:11.520 --> 03:13.760
لذلك ، اختفت كل واجهات برمجة تطبيقات DOM.

03:13.760 --> 03:16.030
إذا علقنا على هذا وقمت الآن بتجميع

03:16.030 --> 03:19.014
كل شيء ، فأنا بالتأكيد أتلقى خطأ ، لأنهم

03:19.014 --> 03:20.670
الآن يعلقون عليه ، ولم

03:20.670 --> 03:24.780
يعد لدينا الإعدادات الافتراضية بعد الآن.

03:24.780 --> 03:26.010
بدلاً من ذلك ، نقول الآن ، "مرحبًا ، يرجى

03:26.010 --> 03:28.050
تضمين" بعض المكتبات الافتراضية "، بعض تعريفات الأنواع الافتراضية

03:28.050 --> 03:30.370
التي يمكنك قولها ، والتي سأقدمها لك في هذه المصفوفة.

03:30.370 --> 03:32.437
وكما ترى ، أنا لا أمرر

03:32.437 --> 03:36.330
أي وصف ، أي مسارات ، أي قيم هنا.

03:36.330 --> 03:39.470
وبالتالي ، ما أقوله الآن لـ TypeScript هو ، "مرحبًا

03:39.470 --> 03:45.050
، فيما يتعلق بجميع الإعدادات الافتراضية ، كما تعلم ،" يرجى أخذ ذلك في الاعتبار.

03:45.050 --> 03:45.050
وأنت تعلم ، لا شيء.

03:45.050 --> 03:46.920
لذلك ، فقط إذا تم التعليق على ذلك ، فإنه يعمل

03:46.920 --> 03:50.037
، لأنه عندئذٍ سيفترض TypeScript بعض الإعدادات الافتراضية.

03:50.037 --> 03:51.770
إذا قمت بتعيين الافتراضي صراحة

03:51.770 --> 03:53.580
، حسنًا ، فإن TypeScript ، بالطبع

03:53.580 --> 03:55.300
، تلتزم بما أقوم بتعيينه هنا.

03:55.300 --> 03:57.410
وهنا على سبيل المثال ، لا يعرف المستند

03:57.410 --> 03:59.740
، ولا يعرف حتى وحدة التحكم هنا.

03:59.740 --> 04:01.600
لذلك ، نريد تعيين قيمتين أكثر

04:01.600 --> 04:02.680
منطقية ، ومرة أخرى

04:02.680 --> 04:05.410
، إذا ضغطت على مساحة التحكم ، وهنا تحصل على

04:05.410 --> 04:07.343
الإكمال التلقائي.

04:08.900 --> 04:10.930
على سبيل المثال ، يمكننا إضافة dom.

04:10.930 --> 04:12.360
هذا معرف وهناك بعض المعرفات المحددة

04:12.360 --> 04:13.800
مسبقًا ، والتي تفهمها TypeScript ، مرة

04:13.800 --> 04:15.800
أخرى ، ستجد قائمة كاملة في المستندات الرسمية.

04:15.800 --> 04:18.280
المستندات الخاصة بهذا الخيار

04:18.280 --> 04:21.070
مرفقة بهذه المحاضرة أيضًا.

04:21.070 --> 04:22.840
لذلك ، هذا هو المعرف الذي تفهمه TypeScript

04:22.840 --> 04:26.070
وهو معرف يقوم أساسًا بإلغاء تأمين جميع واجهات برمجة تطبيقات

04:26.070 --> 04:27.750
DOM في TypeScript ، بحيث يفهم TypeScript

04:27.750 --> 04:30.100
ما تفعله هنا.

04:30.100 --> 04:32.680
الآن ، ترى بالفعل أنه يعرف وحدة التحكم

04:32.680 --> 04:35.150
، ويعرف المستند ، وما إلى ذلك.

04:35.150 --> 04:37.040
الآن بما أننا نعمل مع Next-Gen

04:37.040 --> 04:40.100
JavaScript ، يجب علينا أيضًا إضافة خيار es6

04:40.100 --> 04:42.550
، بحيث يفهم TypeScript أيضًا جميع

04:42.550 --> 04:45.400
خيارات es6 المتاحة عالميًا.

04:45.400 --> 04:50.830
ومن الجيد أيضًا إضافة دوم. متكرر و Scripthost.

04:50.830 --> 04:54.130
من خلال ذلك هنا ، سنقوم بإلغاء تأمين جميع ميزات JavaScript الأساسية

04:54.130 --> 04:56.540
التي ترغب في العمل ، وهذا ، بالمناسبة ، هو الإعداد

04:56.540 --> 05:00.620
الافتراضي الدقيق الذي تحصل عليه عند تعيين

05:00.620 --> 05:02.530
الهدف على es6 ، على أي حال.

05:02.530 --> 05:05.250
لذلك ، إذا قمت بالتعليق على هذا وقمت بإعداده

05:05.250 --> 05:07.360
على هذا النحو ، فسيكون لديك نفس السلوك

05:07.360 --> 05:09.980
تمامًا كما لو لم تحدد lib على الإطلاق.

05:09.980 --> 05:13.550
الآن ، سأعلق هنا على الرغم من أن

05:13.550 --> 05:15.860
هذا سوف يتراكم.

05:15.860 --> 05:17.959
مرة أخرى ، يعد تعيين هذا زائداً عن الحاجة

05:17.959 --> 05:20.920
إلى حد ما ، ولكن فقط أريد أن أشرح ما يفعله.
