WEBVTT

00:02.100 --> 00:04.870
Instruktur: Mari kita tetap berpegang pada array dan objek.

00:04.870 --> 00:06.750
Sintaks penting lainnya, yang akan

00:06.750 --> 00:09.160
banyak Anda lihat dalam JavaScript modern dan

00:09.160 --> 00:10.440
juga proyek Typescript,

00:10.440 --> 00:13.133
adalah destrukturisasi array dan objek.

00:14.180 --> 00:15.013
Bagaimana cara kerjanya?

00:15.013 --> 00:17.220
Baiklah, mari kita mulai dengan array yang kita

00:17.220 --> 00:20.220
dapatkan, array hobbies yang mendapatkan dua hobbies.

00:20.220 --> 00:22.200
Katakanlah Anda ingin mengekstrak

00:22.200 --> 00:26.340
kedua hobi ini dan menyimpannya dalam variabel atau konstanta.

00:26.340 --> 00:28.891
Tentu saja, kita bisa melakukan itu dengan

00:28.891 --> 00:32.340
hobi satu sama dengan hobi untuk indeks nol, yang

00:32.340 --> 00:33.470
merupakan elemen

00:33.470 --> 00:34.820
pertama.

00:34.820 --> 00:38.720
Dan hal yang sama mungkin dengan hobi dua untuk hobi di indeks satu.

00:38.720 --> 00:40.500
Ini akan menarik keluar kedua

00:40.500 --> 00:43.330
elemen ini dan menyimpannya dalam konstanta.

00:43.330 --> 00:44.720
Kami membutuhkan dua baris kode, dan

00:44.720 --> 00:46.710
semakin banyak elemen yang ingin Anda ambil, semakin

00:46.710 --> 00:48.493
banyak baris kode yang dibutuhkan.

00:49.340 --> 00:51.690
Destrukturisasi larik memungkinkan kita untuk mempersingkatnya.

00:51.690 --> 00:53.090
Dengan destrukturisasi larik,

00:53.090 --> 00:56.250
yang juga bekerja dengan let, bukan hanya dengan const, Anda menambahkan

00:56.250 --> 00:59.760
tanda kurung siku di sisi kiri tanda sama dengan, yang merupakan tempat

00:59.760 --> 01:01.400
yang tidak biasa.

01:01.400 --> 01:02.900
Belum pernah melihat itu sebelumnya.

01:02.900 --> 01:04.780
Dan di sisi kanan Anda memiliki larik, yang

01:04.780 --> 01:06.480
ingin Anda destrukturisasi.

01:06.480 --> 01:08.430
Sekarang destructure benar-benar berarti

01:08.430 --> 01:10.470
Anda menarik elemen dari larik.

01:10.470 --> 01:13.570
Dan di sini di sisi kiri di antara tanda kurung siku ini, Anda menyimpannya

01:13.570 --> 01:15.040
dalam konstanta, atau jika Anda

01:15.040 --> 01:17.250
menggunakan let, dalam variabel.

01:17.250 --> 01:21.170
Jadi di sini, kita bisa memiliki hobi satu dan hobi dua.

01:21.170 --> 01:23.000
Dan apa yang dilakukan sintaks ini adalah,

01:23.000 --> 01:25.640
ia melewati larik hobi, mengambil elemen pertama dan

01:25.640 --> 01:26.920
menyimpannya dalam konstanta

01:26.920 --> 01:29.050
dengan nama ini, mengambil elemen kedua,

01:29.050 --> 01:30.290
menyimpannya dalam konstanta

01:30.290 --> 01:32.320
dengan nama ini.

01:32.320 --> 01:35.490
Anda bahkan dapat menambahkan parameter sisa di

01:35.490 --> 01:38.720
sini dan memiliki sisa hobi di sini jika larik hobi

01:38.720 --> 01:42.130
memiliki lebih banyak elemen daripada hanya dua.

01:42.130 --> 01:46.260
Kemudian semua elemen yang tersisa yang tidak Anda tarik ke dalam hobi

01:46.260 --> 01:48.070
satu atau hobi dua akan disimpan

01:48.070 --> 01:51.290
dalam larik baru yang disebut remaining hobbies.

01:51.290 --> 01:54.090
Jadi, mereka akan digabungkan bersama ke dalam larik baru.

01:54.090 --> 01:57.940
Ngomong-ngomong, destrukturisasi tidak mengubah larik asli.

01:57.940 --> 02:02.940
Jadi jika kita menghibur. log hobbies, hobby one, dan hobby two di sini, Anda akan

02:04.260 --> 02:06.840
melihat bahwa hobbies masih merupakan array yang lama.

02:06.840 --> 02:08.840
Tidak kosong atau semacamnya.

02:08.840 --> 02:11.780
Jadi nilai-nilai yang kita tarik keluar dalam tanda kutip

02:11.780 --> 02:14.870
sebenarnya hanya disalin ke dalam konstanta atau variabel

02:14.870 --> 02:17.720
baru, tidak benar-benar dihapus dari larik.

02:17.720 --> 02:18.980
Sekarang itulah destrukturisasi larik.

02:18.980 --> 02:20.600
Kami punya hal yang sama untuk objek.

02:20.600 --> 02:21.690
Kami punya orang kami di sini.

02:21.690 --> 02:23.440
Sekarang katakanlah kita ingin menyimpan

02:23.440 --> 02:26.630
nama dan usia dalam konstanta mandiri, atau variabel.

02:26.630 --> 02:28.480
Sama seperti destrukturisasi larik,

02:28.480 --> 02:31.840
destrukturisasi objek bekerja dengan const dan let.

02:31.840 --> 02:33.010
Di sini saya akan pergi dengan const.

02:33.010 --> 02:34.930
Dan sekarang kita bisa menggunakan kurung

02:34.930 --> 02:37.090
kurawal di sisi kiri tanda sama dengan.

02:37.090 --> 02:38.883
Meskipun sintaksis baru, saya kira.

02:39.920 --> 02:43.750
Dan memiliki objek kita, atau variabel yang menunjuk pada objek

02:43.750 --> 02:44.890
di sisi kanan.

02:44.890 --> 02:46.110
Sekarang omong-omong, harap

02:46.110 --> 02:48.770
dicatat, ini bukan tipe objek yang saya tetapkan di sini.

02:48.770 --> 02:51.200
Saya tidak memiliki usus besar di sini.

02:51.200 --> 02:54.080
Ini benar-benar hanya kurung kurawal keriting seperti

02:54.080 --> 02:58.210
ini di sisi kiri tanpa titik dua setelah beberapa nama konstanta.

02:58.210 --> 03:01.000
Jadi saya tidak menetapkan jenis nilai yang bisa

03:01.000 --> 03:02.720
disimpan sebagai konstanta.

03:02.720 --> 03:05.470
Saya benar-benar hanya menggunakan sintaksis khusus.

03:05.470 --> 03:08.450
Karena di sini, kita sekarang juga dapat merujuk

03:08.450 --> 03:11.340
ke nama properti yang kita miliki dalam sebuah

03:11.340 --> 03:13.920
objek, misalnya, nama dan usia, untuk menarik

03:13.920 --> 03:18.030
nilai-nilai untuk kunci-kunci ini keluar dari person dan menyimpannya

03:18.030 --> 03:21.283
dalam konstanta dengan nama yang sama.

03:23.290 --> 03:24.390
Sekarang di sini saya mendapatkan

03:24.390 --> 03:27.820
error karena di bagian paling atas saya sudah memiliki variabel usia.

03:27.820 --> 03:30.890
Dan nama ternyata merupakan variabel yang tersedia secara

03:30.890 --> 03:32.173
global yang ada.

03:33.240 --> 03:34.940
Jadi di sana, solusinya adalah

03:34.940 --> 03:38.313
benar-benar hanya menggunakan nama kunci yang berbeda di sini,

03:40.240 --> 03:41.920
firstName, misalnya.

03:41.920 --> 03:45.020
Dan sekarang kita bisa menarik keluar nilai dengan kunci itu di sini.

03:45.020 --> 03:46.900
Jadi, beginilah cara kerja destrukturisasi objek.

03:46.900 --> 03:50.110
Hal yang penting di sini adalah untuk destrukturisasi larik, elemen-elemen

03:50.110 --> 03:52.260
ditarik keluar secara berurutan karena larik

03:52.260 --> 03:55.110
adalah sebuah daftar yang terurut.

03:55.110 --> 03:58.110
Dalam objek, urutan tidak selalu terjamin, dan oleh karena itu, kita

03:58.110 --> 04:00.720
tidak menarik elemen-elemen keluar berdasarkan posisi, tetapi

04:00.720 --> 04:02.070
berdasarkan nama kunci.

04:02.070 --> 04:04.790
Jadi, nilai, atau nama-nama yang Anda tentukan di sini

04:04.790 --> 04:05.930
di antara tanda kurung

04:05.930 --> 04:07.630
kurawal, tidak sembarangan.

04:07.630 --> 04:09.700
Anda tidak bisa memberikan nama di sini.

04:09.700 --> 04:13.860
Ini harus berupa nama properti yang Anda temukan di objek, sehingga nilai-nilai

04:13.860 --> 04:16.010
untuk kunci ini dapat ditarik keluar

04:16.010 --> 04:18.160
dari objek Dan kemudian disimpan dalam

04:18.160 --> 04:20.600
konstanta atau variabel dengan nama yang

04:20.600 --> 04:21.880
sama.

04:21.880 --> 04:24.120
Jika Anda ingin mengesampingkan nama itu, Anda bisa

04:24.120 --> 04:25.970
melakukannya dengan titik dua di sini.

04:25.970 --> 04:28.050
Sekali lagi, ini bukan jenis tugas di sini.

04:28.050 --> 04:29.680
Ini hanya menetapkan nama baru.

04:29.680 --> 04:31.970
Jadi ini semua adalah sintaks JavaScript, tidak

04:31.970 --> 04:33.820
ada hubungannya dengan Typescript.

04:33.820 --> 04:35.370
Jadi di sini kita bisa menyimpan

04:35.370 --> 04:38.750
ini dalam konstanta userName misalnya.

04:38.750 --> 04:39.840
Dan karena itu, setelah

04:39.840 --> 04:44.040
itu, kita bisa menghibur. log userName dan age, tetapi bukan firstName,

04:44.040 --> 04:45.290
karena pada dasarnya

04:45.290 --> 04:47.870
menimpa firstName untuk diberi nama userName

04:47.870 --> 04:50.900
dalam konstanta yang kita buat ketika kita menarik

04:50.900 --> 04:52.790
nilai di sini.

04:52.790 --> 04:55.880
Age tidak ditimpa, jadi kita bisa menggunakannya seperti itu.

04:55.880 --> 04:58.183
Sekali lagi, ini bukan jenis tugas di sini.

04:58.183 --> 05:00.210
Ini adalah sintaksis JavaScript,

05:00.210 --> 05:03.680
di mana kita alias mengganti nama properti yang kita tarik

05:03.680 --> 05:05.500
keluar dari person.

05:05.500 --> 05:07.430
Juga, sama seperti sebelumnya dengan larik,

05:07.430 --> 05:09.840
objek person itu sendiri tidak berubah.

05:09.840 --> 05:13.380
Kita benar-benar hanya menyalin nilai-nilai ini dari objek.

05:13.380 --> 05:15.643
Dan oleh karena itu, kita mendapatkan output ini di sini.
