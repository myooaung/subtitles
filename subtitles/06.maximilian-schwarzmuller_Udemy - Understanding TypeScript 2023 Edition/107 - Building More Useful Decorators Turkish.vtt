WEBVTT

00:02.480 --> 00:06.780
Man: Şimdi, fabrika fonksiyonları veya fabrika dekoratörleri hakkındaki

00:06.780 --> 00:10.523
bilgilerle oldukça ilginç şeyler yapabiliriz.

00:11.570 --> 00:16.240
Örneğin, yeni bir dekoratör fabrikasını şablonla takas

00:16.240 --> 00:17.693
edebiliriz.

00:19.400 --> 00:21.590
Ve burada, bir dize olması gereken

00:21.590 --> 00:23.780
bir şablon almayı bekliyorum.

00:23.780 --> 00:28.780
Ve aynı zamanda bir dize olması gereken bir hookId.

00:28.870 --> 00:32.050
Sonra burada, öğrendiğiniz gibi asıl dekoratör

00:32.050 --> 00:34.800
olan anonim fonksiyonumu döndürüyorum.

00:34.800 --> 00:37.440
Çünkü yine bir dekoratör fabrikam var.

00:37.440 --> 00:40.570
Ve orada, bazı HTML kodu olması gereken

00:40.570 --> 00:42.530
bazı şablonları dom'da bu

00:42.530 --> 00:46.590
hookId'yi bulduğum bir yere işlemek istiyorum.

00:46.590 --> 00:49.160
Şimdi dizine gidebiliriz. html'ye ekleyin ve böyle bir yer

00:49.160 --> 00:51.250
ekleyin, böylece bunun çalıştığını görebiliriz.

00:51.250 --> 00:54.483
Buraya, kimliği app olan bir div ekleyebiliriz.

00:55.430 --> 00:59.560
Ve sonra uygulamada. ts, logger yerine WithTemplate

00:59.560 --> 01:01.357
ekliyorum.

01:02.570 --> 01:05.130
Şimdilik ilk bağımsız değişken olarak boş bir dize ve ikinci bağımsız

01:05.130 --> 01:06.810
değişken olarak da app iletelim.

01:06.810 --> 01:09.313
Buradaki div'e atadığım bu kimlik.

01:10.170 --> 01:12.400
Ve şimdi bu iç fonksiyonun içinde asıl dekoratörümüz

01:12.400 --> 01:13.830
yer alıyor.

01:13.830 --> 01:16.540
Bu dekoratör işlevinin içinde,

01:16.540 --> 01:19.500
öğeye ulaşmak istiyorum.

01:19.500 --> 01:24.500
Belge ile kanca elemanına. getElementById.

01:25.662 --> 01:29.390
Kanca kimliği için burada bir argüman olarak alıyoruz.

01:29.390 --> 01:33.480
Ve eğer HookEl var olan bir şeyse, o zaman onun innerHTML'sine

01:34.330 --> 01:37.960
erişmek ve bunu diyelim ki şablona eşit olarak ayarlamak

01:37.960 --> 01:39.920
istiyorum.

01:39.920 --> 01:41.440
Elbette çok basit bir kurulum,

01:41.440 --> 01:43.640
ancak bu işinizi görecektir.

01:43.640 --> 01:45.460
Şimdi, kurucu ile ilgilenmiyorum.

01:45.460 --> 01:48.110
Ve typescript'e burada ilgilenmediğimi söylemek için,

01:48.110 --> 01:50.370
isim olarak bir alt çizgi ekleyebilirim, bu temelde

01:50.370 --> 01:52.007
typescript'e "Evet, bu argümanı aldığımı

01:52.007 --> 01:54.580
biliyorum, ancak buna ihtiyacım yok.

01:54.580 --> 01:56.170
Yine de belirtmek zorundayım.

01:56.170 --> 01:58.920
Dolayısıyla, bu alt çizgi ile size bunun farkında olduğumu,

01:58.920 --> 02:00.850
ancak kullanmayacağımı söylüyorum. Çünkü şimdilik yapmak istediğim tek

02:00.850 --> 02:02.300
şey, bu yılı tamamlamak.

02:02.300 --> 02:04.033
Şimdi buraya WithTemplate eklediğimizde,

02:05.580 --> 02:07.750
buraya bir h1 etiketi ekleyebiliriz,

02:07.750 --> 02:10.400
My Person Object bu şekilde.

02:10.400 --> 02:14.570
Ayrıca, kapat.

02:14.570 --> 02:15.653
Ve şimdi bunu kaydedersek, hatasız derlenir.

02:19.130 --> 02:22.380
Ve gerçekten de, burada bunun ekranda işlendiğini görüyorsunuz.

02:22.380 --> 02:26.350
Bu da umarım size dekoratörlerle sahip

02:26.350 --> 02:29.720
olduğunuz gücü gösterir.

02:29.720 --> 02:31.720
Bunun gibi gerçekten gelişmiş dekoratörler oluşturabilirsiniz,

02:31.720 --> 02:34.780
bu da birdenbire perde arkasında bazı sihirler yapar.

02:34.780 --> 02:38.500
Metaprogramlama ile kastettiğim de budur.

02:38.500 --> 02:41.260
Buraya, diğer kullanıcılarla paylaştığımız üçüncü

02:41.260 --> 02:43.930
taraf bir kütüphane olması durumunda ortaya çıkarabileceğimiz

02:43.930 --> 02:46.190
bazı mantıklar ekliyoruz.

02:46.190 --> 02:47.890
Bunu kütüphanenin bir parçası olarak

02:47.890 --> 02:50.350
gösterebiliriz ve kütüphanemizi kullanan herkes

02:50.350 --> 02:52.630
bu dekoratör işlevini içe aktarıp bir sınıfa

02:52.630 --> 02:54.910
ekleyerek sihirli bir şekilde aniden bazı

02:54.910 --> 02:57.408
içerikleri oluşturabilir.

02:57.408 --> 03:00.500
Ve elbette, bunu yapmakla sınırlı bile değilsiniz.

03:00.500 --> 03:02.980
Sınıf örneklendiğinde sınıfın bir parçası

03:02.980 --> 03:05.340
olan adın çıktısını almak isterseniz,

03:05.340 --> 03:07.850
bunu da yapabilirsiniz.

03:07.850 --> 03:09.570
Sonuçta kurucumuz: Fonksiyonunu burada alıyoruz.

03:09.570 --> 03:12.427
Şimdi bununla yapabileceğimiz şey, yapıcımızı

03:14.190 --> 03:16.010
çağırarak burada yeni bir kişi

03:16.010 --> 03:18.660
yaratabiliriz, çünkü sonuçta bu bizim yapıcımızdır:

03:18.660 --> 03:20.380
Fonksiyon burada.

03:20.380 --> 03:23.820
Bunu herhangi birine dönüştürmeme izin verin, böylece dizgi metni buna

03:23.820 --> 03:26.570
izin verir ve bunun normal bir işlev olduğunu düşünmez.

03:26.570 --> 03:29.240
Ve sonra kanca öğemize gidebilir ve bir h1 etiketi

03:29.240 --> 03:31.880
için sorgulama yapabiliriz, tabii ki pratikte

03:31.880 --> 03:35.160
her zaman buna sahip olmayacaksınız.

03:35.160 --> 03:36.070
Ancak demo amaçlı olarak, burada

03:36.070 --> 03:37.330
her zaman bir tane olacağını varsayıyorum.

03:37.330 --> 03:39.820
Hay aksi, şimdi gördüğüme göre aşağıdaki

03:39.820 --> 03:42.330
h1 etiketini her zaman kapatmalıyım.

03:42.330 --> 03:43.850
Ve sonra burada, bir ünlem işaretiyle,

03:43.850 --> 03:46.750
yine her zaman bir h1 öğesi bulduğumuzu varsayarak, p'ye

03:46.750 --> 03:49.900
eşit bir textContent ayarlayabiliriz. İsim.

03:49.900 --> 03:53.660
Bunu yapar ve kaydedersem,

03:53.660 --> 03:56.010
şimdi şablondaki nesnenin bir

03:56.010 --> 03:59.400
parçası olan adın çıktısını alırım.

03:59.400 --> 04:01.540
Yani bu sizin de yapabileceğiniz bir şey ve

04:01.540 --> 04:03.420
elbette benim burada yaptığımdan çok

04:03.420 --> 04:06.010
daha ayrıntılı dekoratörler yazabilirsiniz.

04:06.010 --> 04:07.840
Typescript kullanan çok popüler bir framework

04:07.840 --> 04:09.550
olan Angular'ı düşünün.

04:09.550 --> 04:12.270
Bu bileşen dekoratörü gibi dekoratörleri

04:12.270 --> 04:15.740
kullanarak, discomponent şablonu gibi şeyleri

04:15.740 --> 04:18.420
belirttiğiniz bir nesneyi aktarmanıza

04:18.420 --> 04:21.020
olanak tanırlar.

04:21.020 --> 04:21.930
Ve dom'da bu şablonun

04:21.930 --> 04:23.950
işlenmesi gereken seçici.

04:23.950 --> 04:25.760
Bu, burada tanımladığımıza nispeten yakındır.

04:25.760 --> 04:28.170
Bir şablon ve ardından işlenmesi gereken bir yer.

04:28.170 --> 04:31.230
Söylemeye gerek yok, Angular dekoratörleri

04:31.230 --> 04:33.760
elbette buradaki temel dekoratörümüzden

04:33.760 --> 04:36.550
çok daha gelişmiş ve ayrıntılıdır.

04:36.550 --> 04:38.740
Bununla birlikte, ana fikir aynıdır.

04:38.740 --> 04:41.660
Angular size burada dekoratörler sunar,

04:41.660 --> 04:43.900
böylece bileşen sınıfınıza bağlanabilecek

04:43.900 --> 04:46.700
ve bu bileşen render edildiğinde dom'a render

04:46.700 --> 04:51.760
edilecek bazı HTML kodlarını belirtebilirsiniz.

04:51.760 --> 04:53.830
Angular'ın nasıl çalıştığını bilmiyorsanız,

04:53.830 --> 04:55.850
bu bir sorun değil.

04:55.850 --> 04:57.060
Burada sadece sınıflar ve dekoratörlerle

04:57.060 --> 04:58.700
çalıştığını anlamalısınız ve sonra

04:58.700 --> 05:01.300
temelde burada yaptığımız şeyi yapar.

05:01.300 --> 05:03.600
Dekoratörlerle ya da burada özellikle belirtildiği gibi

05:03.600 --> 05:06.400
dekoratör fabrikalarıyla yapabileceğiniz bir diğer şey de budur.

05:06.400 --> 05:09.220
Çünkü bu, burada ihtiyacımız olan ekstra

05:09.220 --> 05:12.210
çatışmayı geçirmemizi sağlar.

05:12.210 --> 05:13.610
Metaprogramlama ile kastettiğim de buydu.

05:13.610 --> 05:16.590
Son kullanıcı üzerinde bazı etkileri olduğunu söyleyebileceğiniz

05:16.590 --> 05:21.130
şeyler yaratıyoruz, dekoratör fonksiyonları yaratıyoruz.

05:21.130 --> 05:24.840
NP dual render'da ya da ekrandaki bir şeyde.

05:24.840 --> 05:27.510
Ancak bunu diğer geliştiricilere sunduğumuz

05:27.510 --> 05:29.090
bir araçla yapıyoruz.

05:29.090 --> 05:31.370
Çünkü bu dekoratör, diğer geliştiricilerin

05:31.370 --> 05:33.970
bu örnekte bir sınıfa ekleyerek kullanması

05:33.970 --> 05:36.000
gereken bir araçtır.

05:36.000 --> 05:38.580
Aksi takdirde, bu hiçbir işe yaramaz.

05:38.580 --> 05:40.300
Bu nedenle, geliştiricilere, diğer

05:40.300 --> 05:43.490
geliştiricilerin, örneğin, veren bir sınıf için ekranda uygun

05:43.490 --> 05:46.590
bir şekilde bir şeyler oluşturmak için kullanabilecekleri

05:46.590 --> 05:49.050
ekstra yardımcı programlar sağlıyoruz.

05:49.050 --> 05:50.590
Angular'ın burada daha gelişmiş bir şekilde

05:50.590 --> 05:52.940
yaptığı da aynı şeydir ve bu, greyderlerin mükemmel bir şekilde

05:52.940 --> 05:54.220
yapabileceği bir şeydir.
