WEBVTT

00:02.510 --> 00:04.490
Instructeur : Avec notre classe de base, si nous allons maintenant dans

00:04.490 --> 00:07.570
le dossier dist et que nous inspectons l'application. js, nous voyons ce qui est

00:07.570 --> 00:10.110
généré en JavaScript, et là vous voyez

00:10.110 --> 00:13.560
que nous avons essentiellement le même code.

00:13.560 --> 00:17.870
Deux différences importantes sont que le champ de nom que

00:17.870 --> 00:20.870
nous avons ici n'existe pas comme ceci dans

00:20.870 --> 00:22.230
la classe.

00:22.230 --> 00:25.460
Cela serait en fait pris en charge par le JavaScript moderne, mais

00:25.460 --> 00:27.910
cela dépend de la version du JavaScript pour laquelle

00:27.910 --> 00:29.130
vous construisez.

00:29.130 --> 00:33.450
Donc, rien que dans ES6, ce n'est pas supporté.

00:33.450 --> 00:35.430
Et bien sûr, ce qui est génial, c'est

00:35.430 --> 00:37.360
de voir le type d'affectation.

00:37.360 --> 00:39.760
Nous avons cependant notre logique de construction,

00:39.760 --> 00:43.870
et c'est en effet de cette manière que vous ajoutez des propriétés aux

00:43.870 --> 00:48.150
objets à créer dans Vanilla JavaScript si vous n'utilisez pas la dernière

00:48.150 --> 00:51.570
version de JavaScript où cette syntaxe de champ est également

00:51.570 --> 00:54.470
prise en charge.

00:54.470 --> 00:56.480
Voici donc ce que j'ai en JavaScript.

00:56.480 --> 00:58.710
Maintenant, cela devient intéressant si nous

00:58.710 --> 01:02.080
allons dans le fichier tsconfig. json et nous changeons

01:02.080 --> 01:05.970
la cible de ES5 à ES6 et commentons la librairie ici.

01:05.970 --> 01:08.190
Pour que les bibliothèques correctes et recommandées

01:08.190 --> 01:10.870
soient ajoutées automatiquement par TypeScript.

01:10.870 --> 01:14.090
Si vous sauvegardez maintenant ce fichier de configuration, et que vous revenez à l'app. js vous voyez quelque chose

01:14.090 --> 01:16.350
de totalement différent.

01:16.350 --> 01:18.810
Et c'est assez intéressant ce que nous voyons ici.

01:18.810 --> 01:20.960
Qu'avons-nous là ?

01:20.960 --> 01:23.290
En fin de compte, nous avons ici

01:23.290 --> 01:26.453
une fonction dite de constructeur.

01:27.299 --> 01:31.600
La fonction Constructor est une fonction intégrée

01:31.600 --> 01:33.770
à JavaScript, qui existe depuis

01:33.770 --> 01:35.520
toujours, pourrait-on

01:35.520 --> 01:40.230
dire. Il s'agit de la façon dont Vanilla, le JavaScript non

01:40.230 --> 01:44.480
moderne, crée des modèles d'objets.

01:44.480 --> 01:47.100
C'est une fonction qui est appelée à l'aide du

01:47.100 --> 01:50.890
mot-clé new et tout à coup, comme par magie, cette fonction, même

01:50.890 --> 01:53.640
si elle n'a pas d'instruction de retour, renvoie

01:53.640 --> 01:55.850
quelque chose comme vous le voyez lorsque

01:55.850 --> 01:57.540
nous l'appelons ici.

01:57.540 --> 01:59.730
Elle renvoie un objet.

01:59.730 --> 02:03.110
Un nouvel objet qui aura une propriété nom.

02:03.110 --> 02:04.940
Ce concept n'est donc pas nouveau,

02:04.940 --> 02:08.680
il n'a pas été introduit par le JavaScript moderne ou par TypeScript.

02:08.680 --> 02:12.500
L'idée d'avoir des plans pour les objets existe depuis

02:12.500 --> 02:15.180
très longtemps en JavaScript.

02:15.180 --> 02:19.070
Dans le passé, cependant, nous devions utiliser des fonctions de construction,

02:19.070 --> 02:21.870
ce qui pouvait s'avérer peu intuitif, notamment pour

02:21.870 --> 02:24.520
les développeurs ayant travaillé avec différents

02:24.520 --> 02:26.600
langages de programmation.

02:26.600 --> 02:30.510
Le JavaScript moderne a introduit l'idée de classes pour cette

02:30.510 --> 02:34.950
syntaxe plus propre, et TypeScript la prend également en charge.

02:34.950 --> 02:38.180
Et grâce à la puissante compilation de TypeScript, vous pouvez

02:38.180 --> 02:40.830
choisir le style dans lequel vous voulez le compiler,

02:40.830 --> 02:44.130
l'ancien style qui fonctionne bien sûr dans plus de navigateurs

02:44.130 --> 02:48.280
ou le style ES6 plus moderne que nous avons vu précédemment.

02:48.280 --> 02:51.700
Ce qui ressemble beaucoup à ça ici.

02:51.700 --> 02:54.500
Ce qu'il faut retenir, c'est que nous disposons de cette fonctionnalité

02:54.500 --> 02:57.300
intégrée à JavaScript et prise en charge par TypeScript, qui

02:57.300 --> 03:00.163
nous permet de définir des modèles d'objets.
