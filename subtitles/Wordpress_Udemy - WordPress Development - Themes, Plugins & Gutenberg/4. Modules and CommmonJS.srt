1
00:00:07,450 --> 00:00:11,410
In this lecture we'll be exploring what modules are and how to use them.

2
00:00:11,440 --> 00:00:13,980
Right now I'm on the J query Web site.

3
00:00:14,020 --> 00:00:15,530
You know what J query is.

4
00:00:15,550 --> 00:00:19,840
You've used it before and it's fairly easy to use in order to use J.

5
00:00:19,840 --> 00:00:26,250
Query on your site you have to create some script tags and pass in the path to the J query file.

6
00:00:26,410 --> 00:00:31,300
The browser will automatically load this file for you and then you can use J query anywhere on your

7
00:00:31,300 --> 00:00:32,160
site.

8
00:00:32,170 --> 00:00:34,320
The process is pretty straightforward.

9
00:00:34,330 --> 00:00:39,380
Unfortunately this process only applies to the browser for node.

10
00:00:39,400 --> 00:00:43,470
You can't use script tags to include external javascript code.

11
00:00:43,480 --> 00:00:48,700
The process is slightly different and requires a little bit of work in the resource section of this

12
00:00:48,700 --> 00:00:49,340
lecture.

13
00:00:49,420 --> 00:00:52,920
I provide a link to the common J.S. site common J.

14
00:00:52,920 --> 00:00:56,200
Yes it's a javascript module loader as it states here.

15
00:00:56,260 --> 00:01:00,880
In other words it's a way for you to load javascript code from external files.

16
00:01:01,000 --> 00:01:04,990
You'll hear the word modules a lot throughout this course.

17
00:01:04,990 --> 00:01:09,990
A module is just a fancy word for a javascript file that you include into your code.

18
00:01:10,000 --> 00:01:13,700
I'm oversimplifying it but that's basically what it is.

19
00:01:13,960 --> 00:01:19,690
Common J yes is a library that allows you to load javascript code with more javascript code you can

20
00:01:19,690 --> 00:01:24,580
think of it like loading a page you file with the include or require functions.

21
00:01:24,580 --> 00:01:28,460
This means you don't have to use H2 UML to load your files.

22
00:01:28,510 --> 00:01:32,200
You can download this library and then load it in your browser to get started.

23
00:01:32,200 --> 00:01:33,550
We won't be doing this.

24
00:01:33,550 --> 00:01:37,920
This is because node already uses the common J.S. format already.

25
00:01:37,930 --> 00:01:43,200
Let's take a deeper look on the sidebar you'll find the link used with note here.

26
00:01:43,330 --> 00:01:45,850
You'll find information on how to use common.

27
00:01:45,850 --> 00:01:48,240
Yes with node on this page.

28
00:01:48,280 --> 00:01:55,240
The developer tells you that node isn't using the common G S loader specifically instead node is using

29
00:01:55,300 --> 00:02:00,240
its own implementation of Common J.S. with the same format and consent.

30
00:02:00,250 --> 00:02:06,010
The node module loader is very similar to the common J.S. module loader but you need to understand that

31
00:02:06,010 --> 00:02:08,480
they aren't 100 percent the same.

32
00:02:08,770 --> 00:02:12,880
With that being said let's take a look at how to use the module loader.

33
00:02:12,880 --> 00:02:16,580
Open the index dot J.S. file we created earlier.

34
00:02:16,600 --> 00:02:19,630
I'm going to Coleman out the code we had previously.

35
00:02:19,750 --> 00:02:25,510
As I stated earlier node already prepares the module loader library for you so you don't have to do

36
00:02:25,570 --> 00:02:27,000
anything to set it up.

37
00:02:27,130 --> 00:02:29,930
You can get started with using modules right away.

38
00:02:29,980 --> 00:02:33,940
There are usually three kinds of modules you'll be dealing with.

39
00:02:33,940 --> 00:02:40,680
There are modules you create modules that node creates and modules that other users create.

40
00:02:40,720 --> 00:02:44,020
Let's get started with creating our own modules.

41
00:02:44,020 --> 00:02:51,340
I'm going to create a file named functions dot J S inside this file.

42
00:02:51,420 --> 00:03:00,270
I'm going to create a symbol function named my func and all it will do is output a helo world message.

43
00:03:00,350 --> 00:03:00,740
All right.

44
00:03:00,980 --> 00:03:04,700
Now I have two files which aren't connected to node.

45
00:03:04,700 --> 00:03:07,790
Both of these files are considered modules.

46
00:03:07,820 --> 00:03:12,430
You heard that correctly all JavaScript files are considered modules.

47
00:03:12,440 --> 00:03:19,250
As far as note is concerned the main module is what's called the entry point the entry point file is

48
00:03:19,250 --> 00:03:25,880
the very first file that should be executed by node the index file will be the entry file so we'll have

49
00:03:25,880 --> 00:03:29,720
to load the functions module into this file to do that.

50
00:03:29,720 --> 00:03:31,840
We have to first create a variable.

51
00:03:32,030 --> 00:03:39,200
I'm going to name my variable f u n c we will set this value to the value returned by the function required

52
00:03:41,380 --> 00:03:46,470
this function has one parameter which is the name of the module you'd like to load.

53
00:03:46,480 --> 00:03:54,830
I'm going to pass in the name of the file which is functions you do not need to append the DOT JSA extension

54
00:03:54,890 --> 00:03:58,310
as node will always assume you want to load a javascript file.

55
00:03:58,340 --> 00:04:02,660
However we do have to prepare as a dot forward slash.

56
00:04:02,660 --> 00:04:08,600
This will tell no J.S. that the module is located in the same directory as the file.

57
00:04:08,600 --> 00:04:12,650
Keep in mind that the variable name can be named anything you want.

58
00:04:12,650 --> 00:04:18,610
In most examples and tutorials most developers tend to name their variables after the name of the module

59
00:04:18,620 --> 00:04:20,440
in lowercase letters.

60
00:04:20,450 --> 00:04:26,070
This single line of code will load a module and we can reference the module using this variable.

61
00:04:26,090 --> 00:04:30,560
The question is what exactly gets loaded and how is it loaded.

62
00:04:30,560 --> 00:04:33,270
This line of code won't technically work yet.

63
00:04:33,440 --> 00:04:36,530
We have to now export our module before we can use it.

64
00:04:37,100 --> 00:04:42,710
Exporting a module simply means that you're telling node what parts of your code can be used outside

65
00:04:42,710 --> 00:04:43,840
of the file.

66
00:04:43,850 --> 00:04:48,140
Let's explore how that works inside the functions file.

67
00:04:48,170 --> 00:04:55,810
I'm going to use an object called module this object is defined for you by node.

68
00:04:55,840 --> 00:04:59,160
This object contains properties related to the current module.

69
00:04:59,170 --> 00:05:01,480
It's being used in in our case.

70
00:05:01,480 --> 00:05:08,650
This would be the functions file every single file is provided a module object with properties specific

71
00:05:08,650 --> 00:05:10,030
to that file.

72
00:05:10,150 --> 00:05:13,770
As I stated earlier every single file is considered a module.

73
00:05:13,780 --> 00:05:20,770
As far as node is concerned this module object has a property called exports which you can assign any

74
00:05:20,770 --> 00:05:28,540
value you want the value of this property determines what values other models can access from this module.

75
00:05:28,540 --> 00:05:37,080
I'm going to set this to my func which is the function above now I can use the function inside the index

76
00:05:37,080 --> 00:05:37,730
file.

77
00:05:37,800 --> 00:05:42,970
I'm going to call it.

78
00:05:43,110 --> 00:05:47,850
I'll go over what's going on in just a moment but first let's check if this works.

79
00:05:47,850 --> 00:05:56,650
I'm going to run the node index command again as you can see the message was output it without any error.

80
00:05:56,700 --> 00:05:59,020
Let me recap what's going on here.

81
00:05:59,070 --> 00:06:06,240
The very first thing we do is create a variable named f u n c creating a variable is required if you

82
00:06:06,240 --> 00:06:12,570
want to use a module as this variable will act as a way to reference the code inside the module to load

83
00:06:12,570 --> 00:06:13,320
a module.

84
00:06:13,320 --> 00:06:15,920
You have to use the function required.

85
00:06:15,930 --> 00:06:18,740
This function will load the module you pass in.

86
00:06:19,020 --> 00:06:23,820
In our case this would be the functions file inside the functions file.

87
00:06:23,820 --> 00:06:27,630
We have a variable named my func that is assigned to a function.

88
00:06:27,630 --> 00:06:34,350
This function will output a message onto the console node will load this module into the index file.

89
00:06:34,350 --> 00:06:39,420
However it will not load the variables functions or objects from this file.

90
00:06:39,480 --> 00:06:45,780
Instead it'll look inside the module with DOT exports property and just return the data inside that

91
00:06:45,780 --> 00:06:46,830
property.

92
00:06:46,830 --> 00:06:52,170
So in order to pass in our data we have to assign our data to this property.

93
00:06:52,170 --> 00:06:58,290
Once the module is loaded we can then just use the data from the module dot exports property freely

94
00:06:58,770 --> 00:06:59,550
in our case.

95
00:06:59,580 --> 00:07:02,130
This would be the function that outputs a message.

96
00:07:02,130 --> 00:07:07,360
Lastly we just call the function and the message will be output it onto the console.

97
00:07:07,560 --> 00:07:08,940
Let me prove this further.

98
00:07:09,090 --> 00:07:17,750
I'm going to define a variable named foo inside the functions file and assign its value to five then

99
00:07:17,870 --> 00:07:21,530
I'm going to go back to my index file and try to log this variable

100
00:07:24,870 --> 00:07:26,980
if I were to run my command again.

101
00:07:27,000 --> 00:07:32,850
I'll get this error stating that the variable foo is undefined even though this variable is defined

102
00:07:32,880 --> 00:07:38,970
inside the function's file and I'm loading the module this variable is not made available globally to

103
00:07:38,970 --> 00:07:43,020
every file that uses it in order to use this variable.

104
00:07:43,020 --> 00:07:47,500
We have to assign the module dot exports property to this variable.

105
00:07:47,760 --> 00:07:51,660
Let's say I wanted to pass in multiple values to do this.

106
00:07:51,720 --> 00:07:55,410
We can simply create an object and then assign the data like so

107
00:08:01,010 --> 00:08:07,850
since we're returning an object we have to update the index file to access those properties change func

108
00:08:07,970 --> 00:08:17,620
to func dot my func and to access the foo property we have to call it as func doubtful let's run the

109
00:08:17,620 --> 00:08:23,670
command one more time and we should see the message being output it along with the value of food.

110
00:08:23,700 --> 00:08:24,070
All right.

111
00:08:24,280 --> 00:08:28,580
So that's how you load code from one file into another.

112
00:08:28,600 --> 00:08:30,110
I want to dig deeper though.

113
00:08:30,190 --> 00:08:31,890
Here's what I'm going to do.

114
00:08:31,930 --> 00:08:40,430
I'm going to comin up the food variable from being logged inside the index file then I'm going to clear

115
00:08:40,430 --> 00:08:41,760
up my console.

116
00:08:41,900 --> 00:08:46,640
I'm going to console to log the module object in both files

117
00:08:50,400 --> 00:08:56,160
then I'm going to update my function to output a long list of equal signs so we can see the difference

118
00:08:56,160 --> 00:09:01,040
between these two outputs after doing this.

119
00:09:01,070 --> 00:09:10,260
I want you to run the command node index and the output you'll see two objects being output it as you

120
00:09:10,260 --> 00:09:16,800
can see node takes care of setting the values for both these modules each object will have a property

121
00:09:16,860 --> 00:09:23,730
named file name which will let you know which module object belongs to which file both modules have

122
00:09:23,730 --> 00:09:25,590
an exports property.

123
00:09:25,590 --> 00:09:31,410
If you take a look at the functions module then you'll notice the export property is filled with both

124
00:09:31,410 --> 00:09:34,170
the function and the Foo variable.

125
00:09:34,170 --> 00:09:40,800
These are the values that the index dot J.S. file will get when loading this module the index module

126
00:09:40,830 --> 00:09:45,960
has no exports so the exports for that file will be an empty object.

127
00:09:45,960 --> 00:09:51,630
Another thing I want you to notice is the parents property the parents property will tell you if the

128
00:09:51,630 --> 00:09:58,530
module is being loaded from another module as you can see the functions module has the index module

129
00:09:58,560 --> 00:10:04,080
as its parent the index module has no parents because it is the entry point file.

130
00:10:04,890 --> 00:10:11,190
However the index module will have the children property which will tell you what modules this module

131
00:10:11,190 --> 00:10:17,130
is loading something you should keep in mind is that children modules can and are allowed to load more

132
00:10:17,130 --> 00:10:18,030
modules.

133
00:10:18,030 --> 00:10:24,060
This creates a module tree structure for the most part you never have to worry about these properties

134
00:10:24,090 --> 00:10:26,940
as node takes care of filling them out for you.

135
00:10:26,940 --> 00:10:33,580
It's uncommon and not recommended that you modify any of these properties except for the exports property.

136
00:10:33,840 --> 00:10:34,340
All right.

137
00:10:34,440 --> 00:10:39,720
Now that we understand the basics of modules let's explore some modules that node provides.

138
00:10:39,720 --> 00:10:42,180
And third party modules in the next lecture.
