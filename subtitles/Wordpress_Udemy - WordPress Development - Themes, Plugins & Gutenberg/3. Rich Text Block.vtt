WEBVTT
1
00:00:07.520 --> 00:00:13.550
In this lecture we're going to explore how to create a rich text block a rich text block is a block

2
00:00:13.550 --> 00:00:16.180
that allows you to write content with formatting.

3
00:00:16.250 --> 00:00:19.710
It's the equivalent of adding a tiny MCP editor.

4
00:00:19.760 --> 00:00:22.430
You can make text bold and italicized.

5
00:00:22.460 --> 00:00:29.240
This shouldn't be confused with a text area field as text area doesn't allow for formatting to get started.

6
00:00:29.240 --> 00:00:33.470
I've provided some starter files in the resource section of this lecture.

7
00:00:33.620 --> 00:00:39.640
Download it and unzip the contents inside the blocks slash after victory of our plugin.

8
00:00:39.710 --> 00:00:44.310
There should be a folder called Rich Text blocks with a single J.S. file.

9
00:00:44.600 --> 00:00:50.000
If you open this you'll find that I'm just importing some components and registering a new block.

10
00:00:50.060 --> 00:00:52.970
This code won't work because we aren't importing it.

11
00:00:53.000 --> 00:00:54.430
Why don't you give that a try.

12
00:00:54.500 --> 00:01:00.710
Pause the video and try importing this so that web page can process it.

13
00:01:00.720 --> 00:01:01.740
Welcome back.

14
00:01:01.740 --> 00:01:04.270
If you were able to do this then that's great.

15
00:01:04.290 --> 00:01:06.360
If not that's fine as well.

16
00:01:06.360 --> 00:01:07.750
Let's do it together.

17
00:01:07.800 --> 00:01:11.280
Open the app slash index stat J.S. file.

18
00:01:11.340 --> 00:01:15.330
This is where we import our blocks right below the recipe block.

19
00:01:15.360 --> 00:01:16.530
Add the following.

20
00:01:16.530 --> 00:01:24.280
Import rich text block that's all we have to do now the block will be loaded properly.

21
00:01:24.380 --> 00:01:26.800
Let's switch back to the rich text block.

22
00:01:26.900 --> 00:01:28.920
A lot of this should be familiar to you.

23
00:01:28.940 --> 00:01:31.650
I'm naming my block you to me rich text.

24
00:01:31.790 --> 00:01:33.770
The settings have been simplified.

25
00:01:33.770 --> 00:01:37.640
I didn't bother adding the keywords since this is a simple example.

26
00:01:37.820 --> 00:01:39.970
The attributes are currently empty.

27
00:01:40.070 --> 00:01:42.350
We'll be adding an attribute soon enough.

28
00:01:42.590 --> 00:01:48.860
The edit function is returning a simple div tag with a title the save function isn't returning anything

29
00:01:48.860 --> 00:01:49.620
at all.

30
00:01:49.640 --> 00:01:54.800
This should be enough to get us started the process for all of this should be straightforward.

31
00:01:54.830 --> 00:01:59.740
First we'll import any necessary components then we'll define the attributes.

32
00:01:59.780 --> 00:02:03.430
Next we'll load the component inside the edit function.

33
00:02:03.440 --> 00:02:11.750
Lastly will render the block the component we're going to need will come from the DWP dot Ed object

34
00:02:12.080 --> 00:02:15.290
will D structure it and grab the rich text component

35
00:02:18.390 --> 00:02:23.820
the rich text component will allow the user to edit the contents inside of it while also allowing them

36
00:02:23.820 --> 00:02:25.590
to form out their content.

37
00:02:25.620 --> 00:02:28.200
The next step is to create the attribute.

38
00:02:28.200 --> 00:02:35.280
I'm going to create an attribute called message the type for this will be array

39
00:02:37.740 --> 00:02:39.900
previously we used stream.

40
00:02:39.900 --> 00:02:45.820
However this time we're not just storing text we're storing elements and attributes as well.

41
00:02:45.840 --> 00:02:51.600
The rich text component will generate a lot of content and so an array is ideal for multiple pieces

42
00:02:51.600 --> 00:02:52.610
of content.

43
00:02:52.860 --> 00:03:00.560
The source will be children once again the content generated will be complex.

44
00:03:00.560 --> 00:03:05.320
When WordPress is extracting the data from the content it will need to grab everything.

45
00:03:05.330 --> 00:03:11.930
This includes text elements attributes and anything that is nested that children value will instruct

46
00:03:11.930 --> 00:03:13.580
it to do so.

47
00:03:13.580 --> 00:03:22.040
The selector will be dot message container this element doesn't exist but we'll be creating it soon

48
00:03:22.040 --> 00:03:22.850
enough.

49
00:03:22.850 --> 00:03:24.530
The attribute is now ready.

50
00:03:24.620 --> 00:03:34.470
Let's move onto the edit function right below the H3 element and the rich text component the rich text

51
00:03:34.470 --> 00:03:40.200
component requires quite a few attributes in the resource section of this lecture I provide a link to

52
00:03:40.200 --> 00:03:42.980
the rich text component documentation.

53
00:03:43.020 --> 00:03:48.130
Here you'll find information on the various attributes you can set and even some examples.

54
00:03:48.210 --> 00:03:50.110
There should be an easy five example.

55
00:03:50.130 --> 00:03:55.730
If you're using iOS 5 feel free to read up on this page to learn more about this component.

56
00:03:55.740 --> 00:03:57.330
Let's go back to our script.

57
00:03:57.420 --> 00:04:00.960
The first property we'll set is the tag name property.

58
00:04:00.960 --> 00:04:04.210
Set this to div.

59
00:04:04.290 --> 00:04:07.280
This will be the element that's wrapped around the content input.

60
00:04:07.590 --> 00:04:11.900
You can set this to an age 3 tag if you want the content to be a title.

61
00:04:11.970 --> 00:04:19.040
It's a very flexible component a div tag will do for our purposes the next property is multi line.

62
00:04:19.050 --> 00:04:27.750
Set this to P. the rich text component will allow your users to create multiple line content whenever

63
00:04:27.750 --> 00:04:33.430
a user presses the enter key on their keyboard then this will determine how that content is broken down

64
00:04:33.940 --> 00:04:34.720
by default.

65
00:04:34.720 --> 00:04:39.910
This will use a line break but I prefer to use paragraph tags for better formatting.

66
00:04:40.090 --> 00:04:42.300
The next property is place holder.

67
00:04:42.340 --> 00:04:45.670
Make this translatable and set it to add your content here

68
00:04:49.230 --> 00:04:51.810
the next property will be on change.

69
00:04:51.810 --> 00:04:53.300
Just like the other components.

70
00:04:53.310 --> 00:04:56.460
This will be triggered when the user changes the content.

71
00:04:56.460 --> 00:05:01.830
Set this to an arrow function that will call the prompts dot set attributes function and update the

72
00:05:01.830 --> 00:05:03.960
message attribute with the new value.

73
00:05:08.560 --> 00:05:11.980
The last property will set is the value property.

74
00:05:11.980 --> 00:05:19.100
Set this to prompts Don attributes dot message this one should be straightforward.

75
00:05:19.100 --> 00:05:23.880
It's the value or content inside the component that should finish things up.

76
00:05:23.930 --> 00:05:26.270
Let's move on to the save function.

77
00:05:26.270 --> 00:05:28.660
We won't have to do much to get this to work.

78
00:05:28.670 --> 00:05:31.220
It's as simple as displaying the attribute.

79
00:05:31.220 --> 00:05:32.720
Why don't you give this a try.

80
00:05:32.720 --> 00:05:38.680
Pause the video and try displaying the content from the rich text component.

81
00:05:38.730 --> 00:05:39.720
Welcome back.

82
00:05:39.720 --> 00:05:42.060
If you were able to do it then congrats.

83
00:05:42.060 --> 00:05:43.910
If not that's fine as well.

84
00:05:43.920 --> 00:05:46.460
Let's do it together inside the function.

85
00:05:46.470 --> 00:05:51.520
I'm going to return a pair of div tags.

86
00:05:51.760 --> 00:05:57.180
I won't be applying the class as Gutenberg will do it for us inside this div tag.

87
00:05:57.340 --> 00:06:03.890
I'm going to add the H3 tags with the message we had in the edit function.

88
00:06:03.920 --> 00:06:07.820
This is not necessary but I like to add it for consistency.

89
00:06:07.820 --> 00:06:13.930
Lastly I'll add another pair of div tags with the prompts dot attributes dot message inside.

90
00:06:16.360 --> 00:06:22.240
Make sure to apply the message container class since that's what we specified inside the selector property

91
00:06:22.240 --> 00:06:23.080
for the attribute.

92
00:06:25.380 --> 00:06:26.390
That should do it.

93
00:06:26.530 --> 00:06:35.130
S.D. into the blocks directory and run the NPM run Dev command.

94
00:06:35.260 --> 00:06:37.480
You shouldn't see any error so far.

95
00:06:37.480 --> 00:06:41.860
Once you have that compiled go ahead and create a new recipe post.

96
00:06:41.860 --> 00:06:47.140
If you were to search for the rich text component you should see it appear with the title an icon.

97
00:06:47.140 --> 00:06:50.290
Select the component to add it onto the editor.

98
00:06:50.290 --> 00:06:51.820
It should appear without a problem.

99
00:06:52.120 --> 00:06:55.510
If you check the console then you shouldn't see any errors.

100
00:06:55.510 --> 00:07:01.780
Now try editing the content area you can input anything you want and even add multi line content.

101
00:07:02.230 --> 00:07:06.280
I can press control B on my keyboard to make the content bold.

102
00:07:06.310 --> 00:07:08.050
This is fantastic.

103
00:07:08.080 --> 00:07:10.240
Let's see if things work on the front end.

104
00:07:10.270 --> 00:07:12.340
Publish the post and then view the post

105
00:07:17.260 --> 00:07:19.330
the content should be rendered on the front end.

106
00:07:19.570 --> 00:07:23.380
Congrats you've created your first rich text block.

107
00:07:23.470 --> 00:07:25.370
You can use this in several ways.

108
00:07:25.390 --> 00:07:30.790
It's not practical to use this by itself since Gutenberg already has a block that does something similar

109
00:07:30.970 --> 00:07:33.330
but I'm sure you'll find a use case for this.
