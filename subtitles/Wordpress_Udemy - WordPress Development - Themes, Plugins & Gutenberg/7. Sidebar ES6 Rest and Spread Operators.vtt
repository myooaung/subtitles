WEBVTT
1
00:00:07.650 --> 00:00:10.320
Welcome to another sidebar in this sidebar.

2
00:00:10.380 --> 00:00:14.690
I want to take the time to talk about the rest and Sprint operators.

3
00:00:14.760 --> 00:00:17.410
These are two new features in E6.

4
00:00:17.430 --> 00:00:20.220
You'll see them used often in Gutenberg.

5
00:00:20.220 --> 00:00:24.920
We're going to step away from our project for a moment to focus solely on these concepts.

6
00:00:24.930 --> 00:00:30.710
I'm in a different rectory with a file called index dot J.S. in the resource section of this lecture.

7
00:00:30.720 --> 00:00:32.930
I provide a zip file with this code.

8
00:00:33.120 --> 00:00:38.270
Download it and unzip the contents the index file is pretty straightforward.

9
00:00:38.370 --> 00:00:45.900
I'm creating a function called ad where it will console dot log any numbers past in the ad function

10
00:00:45.930 --> 00:00:48.380
doesn't accept in any parameters.

11
00:00:48.390 --> 00:00:55.290
Instead it'll use the arguments object the arguments object will contain all the values passed in including

12
00:00:55.290 --> 00:00:58.380
the ones that weren't specified in the parameters.

13
00:00:58.620 --> 00:01:03.440
We're using this by looping through all the values passed in and adding them all together.

14
00:01:03.450 --> 00:01:05.520
This makes our function flexible.

15
00:01:05.520 --> 00:01:10.490
If you look below we can choose not to provide any parameters or up to three.

16
00:01:10.560 --> 00:01:12.000
It's limitless.

17
00:01:12.000 --> 00:01:14.330
The first call should result in zero.

18
00:01:14.340 --> 00:01:19.140
The second call should result in 1 and the last call should result in 6.

19
00:01:19.140 --> 00:01:26.010
Let's test the sound inside your command line C.D. into the directory and run the command node index

20
00:01:28.320 --> 00:01:29.270
as expected.

21
00:01:29.310 --> 00:01:32.890
We get the numbers 0 1 and 6 output.

22
00:01:32.970 --> 00:01:35.590
We can clean this function up even further.

23
00:01:35.610 --> 00:01:39.450
At first glance the arguments object can be used like an array.

24
00:01:39.750 --> 00:01:42.600
However that's not completely the case.

25
00:01:42.600 --> 00:01:46.770
I'm going to remove a lot of this code except for the console statement.

26
00:01:46.770 --> 00:01:51.750
Then I'll paste in some code really quickly.

27
00:01:51.790 --> 00:01:57.340
All right this time I'm using the reduced function to loop through the array of values.

28
00:01:57.400 --> 00:02:03.160
This will accept an anonymous function which we passed in the values that are being looped through the

29
00:02:03.160 --> 00:02:08.270
purpose of this function is to loop through all the values and then return one single value.

30
00:02:08.380 --> 00:02:10.530
The function has two parameters.

31
00:02:10.540 --> 00:02:12.210
The first is the total.

32
00:02:12.220 --> 00:02:15.170
The second is the current number in the iteration.

33
00:02:15.190 --> 00:02:21.340
In this example we're simply adding number to the total after every number has been looped through the

34
00:02:21.400 --> 00:02:23.640
total will be returned.

35
00:02:23.650 --> 00:02:24.970
Let's try this out.

36
00:02:24.970 --> 00:02:27.160
Input the command node index.

37
00:02:29.440 --> 00:02:31.380
This time will receive an error.

38
00:02:31.390 --> 00:02:35.580
We get this error because the reduced function doesn't exist.

39
00:02:35.650 --> 00:02:42.960
The reduced function is only available for arrays the arguments value we have here is not a true array.

40
00:02:43.090 --> 00:02:48.970
We can access the values like arrays but a lot of the functions that come with arrays are unavailable.

41
00:02:48.970 --> 00:02:53.740
It's not the end of the world because there are different ways to loop through values but it would be

42
00:02:53.740 --> 00:02:56.260
nice if we could use the array functions.

43
00:02:56.260 --> 00:02:59.810
This is where the rest operator comes in to play.

44
00:02:59.950 --> 00:03:00.980
What is the rest.

45
00:03:00.980 --> 00:03:07.030
Operator The rest operator allows you to create a variable that will be an array inside your function

46
00:03:07.450 --> 00:03:12.250
inside the functions parameters create a parameter called numbers.

47
00:03:12.250 --> 00:03:17.940
We want this variable to contain all the values a user passes onto the function to do that.

48
00:03:17.980 --> 00:03:24.490
We'll need to add three dots right before the variable name like so now we can replace the arguments

49
00:03:24.490 --> 00:03:30.470
keyword with the numbers variable like some this function will work.

50
00:03:30.510 --> 00:03:33.330
But there is one change we'll have to make below.

51
00:03:33.390 --> 00:03:36.860
We can't call this function with no values like we're doing here.

52
00:03:36.930 --> 00:03:40.850
We'll have to remove this first call as it'll throw an error.

53
00:03:40.920 --> 00:03:42.240
Once you have it removed.

54
00:03:42.240 --> 00:03:47.310
Go ahead and run the node index command.

55
00:03:47.340 --> 00:03:49.710
You should see the numbers appear like before.

56
00:03:49.710 --> 00:03:50.650
This is great.

57
00:03:50.670 --> 00:03:53.690
Our function is now cleaner and easier to read.

58
00:03:53.700 --> 00:03:59.140
Now let's say you wanted to have some fixed parameters while also allowing this to be limitless.

59
00:03:59.160 --> 00:04:02.230
That's totally possible inside the parameters.

60
00:04:02.250 --> 00:04:08.340
I'm going to create a parameter called message when using the rest.

61
00:04:08.340 --> 00:04:14.770
OPERATOR It must be the last one in the set of parameters all your fixed parameters must come first.

62
00:04:14.820 --> 00:04:20.760
In this example I'm saying that the first value passed in should be set to message while all other values

63
00:04:20.760 --> 00:04:23.190
will be for the numbers parameters.

64
00:04:23.250 --> 00:04:30.980
I'm going to long the message variable before the numbers we're going to need to update our first call

65
00:04:30.980 --> 00:04:32.260
again this time.

66
00:04:32.300 --> 00:04:36.050
I'm going to pass in Hello.

67
00:04:36.100 --> 00:04:37.920
What do you think the result will be.

68
00:04:37.930 --> 00:04:39.900
Take a moment to think about this.

69
00:04:39.940 --> 00:04:40.570
All right.

70
00:04:40.570 --> 00:04:41.350
Let's see.

71
00:04:41.500 --> 00:04:48.310
Input the command node index what we'll end up seeing is hello.

72
00:04:48.310 --> 00:04:52.010
1 1 5 for the first call it used Hello.

73
00:04:52.020 --> 00:04:55.900
As the message and one as the number two at the second call.

74
00:04:55.900 --> 00:04:59.580
Use one as the message and added two and three together.

75
00:04:59.580 --> 00:05:01.300
So that's the rest operator.

76
00:05:01.320 --> 00:05:06.360
It allows you to create a parameter in your function that will take in an unlimited number of values

77
00:05:06.360 --> 00:05:09.010
in your function and assign it as an array.

78
00:05:09.030 --> 00:05:11.440
Let's look at the spread operator now.

79
00:05:11.550 --> 00:05:17.730
I'm going to comment about this code we have as we no longer need it next.

80
00:05:17.760 --> 00:05:22.280
I'm going to paste in some code just to save some time.

81
00:05:22.400 --> 00:05:23.020
All right.

82
00:05:23.030 --> 00:05:26.360
All I'm doing here is creating two arrays in the first rate.

83
00:05:26.360 --> 00:05:28.850
I have two numbers which are two and three.

84
00:05:29.030 --> 00:05:32.690
The second array contains the numbers 1 4 and 5.

85
00:05:33.140 --> 00:05:40.010
I want to put the numbers in array 1 into array to this way we'll only have to deal with one array.

86
00:05:40.130 --> 00:05:44.240
You may come across these situations where you'll want to merge arrays together.

87
00:05:44.330 --> 00:05:49.730
Traditionally you would loop through the array and then push the values into the array with the Sprint

88
00:05:49.760 --> 00:05:54.010
operator you no longer have to do that inside the second to Ray.

89
00:05:54.020 --> 00:05:59.660
I'm adding the first array with the spread operator just like last time I'm using three dots.

90
00:05:59.660 --> 00:06:05.810
The spread operator merges two arrays together the array that has the spread operator applied to it

91
00:06:05.810 --> 00:06:08.720
will be the one that gets merged into the other array.

92
00:06:08.840 --> 00:06:16.440
And this example array one is merged with array to array two will be the array with all the values combined.

93
00:06:16.460 --> 00:06:25.620
Let's see if this is true inside the command line run the command node index both the RAZR longed array

94
00:06:25.620 --> 00:06:32.100
one contains the numbers 2 and 3 array 2 contains the numbers it originally had while also containing

95
00:06:32.100 --> 00:06:33.940
the numbers 2 and 3.

96
00:06:34.020 --> 00:06:39.320
The great thing about the spread operator is that you can specify where you want to place your numbers.

97
00:06:39.450 --> 00:06:43.860
You could place the numbers in the beginning end or anywhere in between.

98
00:06:43.980 --> 00:06:49.270
At this point you may be thinking aren't the spread and rest operators the same thing.

99
00:06:49.290 --> 00:06:52.940
Well they're definitely written the same but they're completely different.

100
00:06:53.100 --> 00:06:58.050
If you use the three dots inside a function's parameter then it's called a rest.

101
00:06:58.080 --> 00:07:03.670
Operator The rest operator will combine all values together into an array.

102
00:07:03.780 --> 00:07:09.780
The spread operator does the opposite which is spread the values out any time you use the three dots

103
00:07:09.840 --> 00:07:11.560
outside of a functions parameters.

104
00:07:11.580 --> 00:07:14.090
It will be considered the spread operator.

105
00:07:14.250 --> 00:07:18.450
Now that we understand that the next question is how does this apply to our code.

106
00:07:19.320 --> 00:07:22.320
Well let's look at Gutenberg code for a moment.

107
00:07:22.380 --> 00:07:27.290
I want you to go into the text control component directory for a moment.

108
00:07:27.390 --> 00:07:31.530
Open the index dot J.S. file.

109
00:07:31.640 --> 00:07:37.870
There are two places where the rest and spread operators are used inside the parameter of the function.

110
00:07:37.880 --> 00:07:44.900
You'll see the prompts variable uses a rest operator that prompts variable will contain all the attributes

111
00:07:44.900 --> 00:07:48.950
that are passed onto the component that aren't already defined.

112
00:07:48.950 --> 00:07:53.640
This would basically be any custom attributes we set we are allowed to do that.

113
00:07:53.840 --> 00:07:57.790
We're not forced into just using the attributes this component uses.

114
00:07:57.920 --> 00:08:04.490
If we want to add any extra attributes then we can then if you look inside the input element you'll

115
00:08:04.490 --> 00:08:08.670
see that the spread operator is used to spread all the attributes.

116
00:08:08.690 --> 00:08:11.630
This is how WordPress handles custom attributes.

117
00:08:11.630 --> 00:08:12.940
Let's try this one out.

118
00:08:12.980 --> 00:08:20.240
If you have two positive videos you can switch back to the main project right now I'm looking at the

119
00:08:20.240 --> 00:08:24.190
first text control component which is used for our ingredients.

120
00:08:24.200 --> 00:08:32.970
I'm going to add an attribute called foo set to Hello I'll add another attribute called Hello set to

121
00:08:32.970 --> 00:08:41.120
foo lastly C.D. into the blocks directory and run the NPM run def command

122
00:08:45.820 --> 00:08:51.070
if we did everything right then we should be able to see these two attributes appear inside our input

123
00:08:51.070 --> 00:09:00.430
field go ahead and refresh the recipe post select the recipe block and inspect the ingredients input

124
00:09:00.430 --> 00:09:04.050
field just like that.

125
00:09:04.130 --> 00:09:09.410
Our custom attributes are appearing without a problem they don't really do anything but it's nice to

126
00:09:09.410 --> 00:09:11.750
know we can add them if we ever need to.

127
00:09:11.780 --> 00:09:17.920
I'm going to undo these changes as they aren't practical components in Gutenberg are flexible.

128
00:09:17.960 --> 00:09:21.170
Most components allow you to create custom attributes.

129
00:09:21.200 --> 00:09:24.280
If you ever need that kind of power just to be sure.

130
00:09:24.290 --> 00:09:26.770
I encourage you to check out the code yourself.

131
00:09:26.900 --> 00:09:29.550
You'll see a formatted in the same way I showed you.

132
00:09:29.600 --> 00:09:32.720
Don't ever be afraid to mess around with your code either.

133
00:09:32.780 --> 00:09:36.080
It's how you'll learn and become comfortable with the tools provided.
