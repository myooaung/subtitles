1
00:00:07,410 --> 00:00:11,380
Now that we have Webb pack installed let's begin configuring it.

2
00:00:11,400 --> 00:00:12,480
It's pretty simple.

3
00:00:12,510 --> 00:00:22,210
You need to create a file named Webb pack dock config dock J.S. when we run Webb PAC Webb pack will

4
00:00:22,220 --> 00:00:24,050
look for this file and use it.

5
00:00:24,050 --> 00:00:29,450
This file will contain the settings for Webb pack and you can modify how it behaves through it.

6
00:00:29,450 --> 00:00:34,550
I'm going to create a variable named config which will be set to an empty object.

7
00:00:34,610 --> 00:00:38,400
Then I'm going to export it.

8
00:00:38,420 --> 00:00:44,390
There are two properties required if we don't define anything then Westpac will throw an error.

9
00:00:44,480 --> 00:00:46,550
The first property is entry.

10
00:00:46,640 --> 00:00:56,330
I'm going to set this to dot slash app slash index dot J.S. This folder and file doesn't exist.

11
00:00:56,350 --> 00:00:58,210
So will create those two now

12
00:01:00,900 --> 00:01:02,670
inside the index file.

13
00:01:02,670 --> 00:01:09,910
I'm going to log a message it's important to note that you can name this file whatever you want.

14
00:01:09,910 --> 00:01:13,390
All right let's go back to the Web pack config file.

15
00:01:13,390 --> 00:01:19,150
The next property we have to set is the output property which contains the settings to where the final

16
00:01:19,150 --> 00:01:20,830
file will be saved.

17
00:01:20,830 --> 00:01:26,440
This will be an object and there are two properties we have to set which are the path and file name

18
00:01:26,440 --> 00:01:32,700
properties the file name property can be set to whatever you want.

19
00:01:32,870 --> 00:01:36,080
If you view the documentation or read any tutorials.

20
00:01:36,080 --> 00:01:38,290
Most developers name this bundle.

21
00:01:38,290 --> 00:01:46,100
J.S. will follow this naming convention the path property is a bit tricky.

22
00:01:46,120 --> 00:01:51,190
This will be the name of the directory where the bundle dot J.S. file will be saved.

23
00:01:51,190 --> 00:01:54,950
However you must input a full system path.

24
00:01:54,970 --> 00:01:58,760
You can't just put a relative path as you'll receive an error.

25
00:01:58,780 --> 00:02:04,270
Luckily node provides some functions for helping us generate a full system path.

26
00:02:04,270 --> 00:02:08,020
We don't have to guess and input some random directory.

27
00:02:08,020 --> 00:02:13,930
I'm going to create a new variable at the top called path and set its value to the module path.

28
00:02:16,150 --> 00:02:22,750
The path module is a default node module that helps you with generating path senior system.

29
00:02:22,810 --> 00:02:26,840
This module will return an object with a couple of methods we can use.

30
00:02:26,860 --> 00:02:30,210
I'm going to use this object and call the resolve method.

31
00:02:32,470 --> 00:02:36,240
This method will return a string of an absolute directory.

32
00:02:36,280 --> 00:02:39,640
The great thing about this module is that it's cross compatible.

33
00:02:39,640 --> 00:02:45,400
This code will work on any operating system such as Windows OSX and Linux.

34
00:02:45,400 --> 00:02:48,620
This method has an unlimited number of parameters.

35
00:02:48,700 --> 00:02:52,730
You just pass in the name of the directories you'd like to have.

36
00:02:52,750 --> 00:03:00,010
I'm going to pass in the constant underscore underscored journey this is a constant.

37
00:03:00,010 --> 00:03:06,140
Created by node for you automatically it contains the path to the current file it's being used.

38
00:03:06,520 --> 00:03:09,020
I'm going to then pass in dist.

39
00:03:09,190 --> 00:03:11,690
This can be named whatever you want.

40
00:03:11,710 --> 00:03:17,260
This will return a path to our current directory and point to a folder called dist which is short for

41
00:03:17,260 --> 00:03:20,350
distribution in a lot of tutorials and examples.

42
00:03:20,350 --> 00:03:25,930
You'll find that most developers will name at this some developers will also name it build which is

43
00:03:25,930 --> 00:03:26,880
perfectly fine.

44
00:03:27,130 --> 00:03:30,280
It's all preference in the end web path.

45
00:03:30,280 --> 00:03:36,280
We'll look at this and create a file named bundle dot J.S. that contains all our javascript code and

46
00:03:36,280 --> 00:03:37,690
save it in our current directory.

47
00:03:37,720 --> 00:03:40,300
Inside a folder named dist.

48
00:03:40,300 --> 00:03:43,710
This is the minimum requirements for configuring web pack.

49
00:03:43,720 --> 00:03:47,020
There are more settings we can set but we'll get to those later.

50
00:03:47,230 --> 00:03:50,660
In order for this to work we need to install another module.

51
00:03:50,860 --> 00:03:57,520
The Web pack module is what takes care of processing everything in order for web pack to process everything

52
00:03:57,550 --> 00:03:59,310
we need to write the code for it.

53
00:03:59,350 --> 00:04:00,640
We've only configured it.

54
00:04:01,030 --> 00:04:06,700
Fortunately there is a tool that takes care of that for us in the resource section of this lecture.

55
00:04:06,700 --> 00:04:14,080
I provide a link to the official web Pax CLIA node allows you to create your own custom commands and

56
00:04:14,080 --> 00:04:18,630
there are modules that take advantage of that feature web pack being one of them.

57
00:04:18,760 --> 00:04:25,140
With this tool we can allow Web pack to take care of making it process the code itself back inside the

58
00:04:25,140 --> 00:04:36,640
command line input the commands NPM ie web pack dash CLIA dash dash save dash Dev I'm introducing a

59
00:04:36,640 --> 00:04:42,640
new sub command here called I which is short for installing there's no difference between the two.

60
00:04:42,670 --> 00:04:46,570
The AI is just the shorthand version run this command.

61
00:04:46,600 --> 00:04:48,040
It may take a while to install.

62
00:04:48,040 --> 00:04:58,240
So be patient the last step is to have NPM run the commands open the package dot Jason File Under the

63
00:04:58,240 --> 00:04:59,560
scripts property.

64
00:04:59,560 --> 00:05:04,150
We can have NPM run the commands for us rather than typing it ourselves.

65
00:05:04,150 --> 00:05:10,300
Create a new property called start you can name this whatever you want but I recommend keeping it short

66
00:05:10,360 --> 00:05:11,500
and concise.

67
00:05:11,530 --> 00:05:14,350
The value for this will be the command you want to run.

68
00:05:14,380 --> 00:05:24,360
I'm going to input the following web pack dash dash config web pack dot config dot J.S. the web pack

69
00:05:24,360 --> 00:05:30,180
command was provided to us when we installed web packs see a lie module this command requires us to

70
00:05:30,180 --> 00:05:37,230
set the option config this option will tell web pack what file contains our configuration settings then

71
00:05:37,380 --> 00:05:44,100
you simply pass in the file name in our case this would be web pack dot config dot yes that's all we

72
00:05:44,100 --> 00:05:50,430
need to do now we can run this commands inside the command line input NPM run start.

73
00:05:50,430 --> 00:05:58,200
This will tell NPM to run the command inside the scripts properly called start after running this command

74
00:05:58,230 --> 00:06:03,270
you'll see a couple of stuff being output it you'll be provided with the amount of time it took to run

75
00:06:03,270 --> 00:06:07,540
this command it's fairly fast for me it took under a second.

76
00:06:07,800 --> 00:06:12,450
You'll also be provided with the name of the file that contains all your code and the files that are

77
00:06:12,450 --> 00:06:19,020
saved inside this file we only have one file and that's the index dot J.S. file.

78
00:06:19,380 --> 00:06:22,710
One thing I want you to notice is the size of both files.

79
00:06:22,830 --> 00:06:25,500
The index file is only a few bytes.

80
00:06:25,500 --> 00:06:30,120
However the bundle dot J.S. file is way larger than the index file.

81
00:06:30,180 --> 00:06:32,760
The jump in size is massive.

82
00:06:32,760 --> 00:06:34,530
So why is this.

83
00:06:34,530 --> 00:06:40,980
Well let's check out the bundle dot J.S. file for more answers after running this command web pack should

84
00:06:40,980 --> 00:06:46,400
create a directory called disks with the bundle dot genius file saved inside.

85
00:06:46,440 --> 00:06:47,790
Let's open this file.

86
00:06:47,790 --> 00:06:49,370
It's safe to do so.

87
00:06:49,770 --> 00:06:52,070
Web pack generates a lot of code.

88
00:06:52,170 --> 00:06:53,700
There's a lot going on here.

89
00:06:53,730 --> 00:06:57,490
It can be very intimidating but it's nothing you have to worry about.

90
00:06:57,630 --> 00:07:01,680
Web pack is just making sure the code works without a problem.

91
00:07:01,770 --> 00:07:05,820
In future lectures will definitely benefit from this optimization.

92
00:07:05,880 --> 00:07:10,650
If you scroll around you'll eventually find the message that we logged in our file.

93
00:07:10,710 --> 00:07:16,030
At first glance this seems excessive just for one line of code and you're completely right.

94
00:07:16,170 --> 00:07:20,190
If you're using web pack for small projects then you really don't need it.

95
00:07:20,430 --> 00:07:24,270
When pack is for larger projects like single page apps.

96
00:07:24,330 --> 00:07:30,040
I promise we'll use Web pack in a larger project but for now we'll keep it to this simple example.

97
00:07:30,180 --> 00:07:31,880
Let's check if this works.

98
00:07:32,130 --> 00:07:36,150
The file that web pack generates is meant to be used on the front end.

99
00:07:36,210 --> 00:07:42,360
I'm going to create a file called index dot H2 UML and inside this HD email file.

100
00:07:42,360 --> 00:07:50,510
I'm just going to load the bundle dot J.S. file then I'm going to simply open up the index dot HCM l

101
00:07:50,520 --> 00:07:53,250
file.

102
00:07:53,370 --> 00:08:00,180
This is just a simple HDMI file so we don't need any servers or back and logic to help us open up the

103
00:08:00,180 --> 00:08:02,060
console and you'll see the message.

104
00:08:02,070 --> 00:08:08,430
How low being output it the real power of web pack comes into play when we start using multiple modules

105
00:08:08,730 --> 00:08:10,400
before I am this lecture.

106
00:08:10,410 --> 00:08:12,010
Let's go back to the terminal.

107
00:08:12,120 --> 00:08:18,280
If you were to look at the message output it you'll see that web pack tells us we should set the mode.

108
00:08:18,330 --> 00:08:26,850
Let's add this to the config file and set it to development.

109
00:08:26,870 --> 00:08:31,250
There are two possible values for this which are production and development.

110
00:08:31,700 --> 00:08:34,540
I believe it's obvious which setting you should use.

111
00:08:34,670 --> 00:08:38,970
Since we're on our local machines then this should be set to development.

112
00:08:39,020 --> 00:08:44,310
Once you upload your code to a life server be sure to set this to production.

113
00:08:44,420 --> 00:08:49,220
Westpac uses this to optimize the code depending on where the code will be used.

114
00:08:49,310 --> 00:08:53,800
The development mode will output more messages to help you debug your script.

115
00:08:53,810 --> 00:08:56,840
Now that we've set that let's move on to the next lecture.
