1
00:00:07,770 --> 00:00:09,530
Our plugin is almost complete.

2
00:00:09,540 --> 00:00:12,060
There are just a few more things that need to be done.

3
00:00:12,060 --> 00:00:17,320
The next thing on our list is to make a widget this widget will display a recipe of the day.

4
00:00:17,340 --> 00:00:22,080
If you open the static template you'll find a widget that displays the recipe of the day.

5
00:00:22,200 --> 00:00:24,150
We'll be creating this.

6
00:00:24,150 --> 00:00:27,530
We'll be using a few WordPress API to make this work.

7
00:00:27,690 --> 00:00:33,810
The first API is the widgets API in the resource section of this lecture I provide a link to the widgets

8
00:00:33,810 --> 00:00:39,240
API WordPress provides some really good examples on how to implement your own widget.

9
00:00:39,240 --> 00:00:43,560
We will have to use some object oriented programming to create a widget.

10
00:00:43,590 --> 00:00:45,160
Don't worry it's easy.

11
00:00:45,420 --> 00:00:47,130
Inside the main plugin file.

12
00:00:47,130 --> 00:00:55,010
Let's use the action hook called widgets in it this hook is called When widgets are initialized we will

13
00:00:55,010 --> 00:00:57,860
be able to register our widget with this hook.

14
00:00:57,920 --> 00:01:01,200
The function will want to call is our widgets in it.

15
00:01:01,460 --> 00:01:07,640
We're going to define this function inside a file called widget stop BHP create this file inside the

16
00:01:07,700 --> 00:01:10,490
includes folder and include it from the main plugin file.

17
00:01:17,620 --> 00:01:22,370
This hook is called very early on so to make sure our file is included properly.

18
00:01:22,390 --> 00:01:28,780
We have to pre pen the plugin directory to the inclusion we can accomplish this by using the dir name

19
00:01:28,780 --> 00:01:31,420
function and passing in the plug and you are all constant.

20
00:01:31,420 --> 00:01:37,250
Like so this file will now be loaded properly.

21
00:01:37,250 --> 00:01:45,660
Next let's register the widget to register a widget we have to call the register widget function this

22
00:01:45,660 --> 00:01:50,580
function has 1 required parameter and that's the name of the class that contains our widget.

23
00:01:51,000 --> 00:01:54,090
I'm going to pass in our daily recipe widget

24
00:01:58,340 --> 00:02:00,020
this class doesn't exist.

25
00:02:00,020 --> 00:02:01,620
Let's create it now.

26
00:02:01,790 --> 00:02:10,260
I'm going to create a folder called widgets inside the includes folder next create a file called daily

27
00:02:10,290 --> 00:02:15,500
dash recipe dot P HP and create a class called our daily recipe widget.

28
00:02:15,510 --> 00:02:18,240
Lastly include this file from the main plugin file

29
00:02:25,460 --> 00:02:27,770
the code for loading the widget is finished.

30
00:02:27,770 --> 00:02:29,540
Let's focus on creating the widget.

31
00:02:29,540 --> 00:02:38,810
Now this class has to extend that WP Widget class this class will help integrate our widget with Wordpress

32
00:02:38,810 --> 00:02:39,780
a system.

33
00:02:39,890 --> 00:02:44,630
It will leave us to take care of the rest by displaying the widget and setting up the fields.

34
00:02:44,820 --> 00:02:50,820
Go back to the widgets API documentation page you'll find a default usage section.

35
00:02:50,820 --> 00:02:59,600
Let's copy the code inside the class and paste it into R's.

36
00:02:59,650 --> 00:03:01,650
Let's go through this one by one.

37
00:03:01,930 --> 00:03:05,320
The construct function is where we'll be setting up the widget.

38
00:03:05,320 --> 00:03:10,150
There's only one thing we need to do and that is called the parent constructor method.

39
00:03:10,150 --> 00:03:12,230
This method has three parameters.

40
00:03:12,310 --> 00:03:14,690
The first parameter is an idea for the widget.

41
00:03:14,770 --> 00:03:19,370
Set this to our daily recipe widget.

42
00:03:19,420 --> 00:03:22,140
The second parameter is the title of the widget.

43
00:03:22,150 --> 00:03:26,970
This will be displayed on the widgets admin page and will help users identify your widget.

44
00:03:27,310 --> 00:03:29,560
Let's call this widget recipe of the day.

45
00:03:31,800 --> 00:03:35,450
The last parameter is an array of additional options we can set.

46
00:03:35,760 --> 00:03:38,880
For now we only want to set the description.

47
00:03:38,880 --> 00:03:42,290
The description will be displayed on the widgets admin page.

48
00:03:42,330 --> 00:03:45,300
The description should be short and concise.

49
00:03:45,300 --> 00:03:48,780
Let's set this to displays a random recipe each day

50
00:03:53,970 --> 00:03:57,180
WordPress will now officially recognize the widget.

51
00:03:57,180 --> 00:03:59,370
The next method is called widget.

52
00:03:59,370 --> 00:04:02,750
This method takes care of displaying the widget on the front end.

53
00:04:02,820 --> 00:04:04,570
I'm going to skip this for now.

54
00:04:04,620 --> 00:04:06,690
I promise we'll get back to it later.

55
00:04:06,810 --> 00:04:15,100
Before I move on I'm going to move this method to the very bottom.

56
00:04:15,110 --> 00:04:17,930
The reason I do this is because of my workflow.

57
00:04:18,020 --> 00:04:21,680
I usually like to set up the widget method last.

58
00:04:21,680 --> 00:04:26,000
Now the second method formerly the third is form WordPress.

59
00:04:26,000 --> 00:04:31,310
We'll call this method to render reform that will allow the user to customize this widget your past

60
00:04:31,340 --> 00:04:33,530
in a variable named instance.

61
00:04:33,560 --> 00:04:39,880
This contains the form values of the current instance of the widget our widget won't be super complex.

62
00:04:39,950 --> 00:04:44,020
We're only going to have one field and that's the title of the widget.

63
00:04:44,030 --> 00:04:50,990
First let's create some default values since there's only a title will set the default title to recipe

64
00:04:50,990 --> 00:04:57,390
of the day.

65
00:04:57,400 --> 00:05:06,250
Next we're going to set the instance variable to the value returned by the function WP pass args This

66
00:05:06,250 --> 00:05:09,260
is a utility function provided by WordPress.

67
00:05:09,280 --> 00:05:13,730
This method will merge two arrays together and return the merged array.

68
00:05:13,750 --> 00:05:19,450
If the instance already has a title then the default won't override that title.

69
00:05:19,450 --> 00:05:23,350
Otherwise the title will be set from the default array.

70
00:05:23,350 --> 00:05:26,110
This will guarantee that will have a title set.

71
00:05:26,110 --> 00:05:31,570
Whether this is a new instance or not the widget would be considered a new instance if the user has

72
00:05:31,570 --> 00:05:36,970
dragged and dropped the widget onto a sidebar for the first time the widget would be considered an old

73
00:05:37,030 --> 00:05:37,590
instance.

74
00:05:37,600 --> 00:05:42,330
If the widget is already on the sidebar let's begin displaying the fields.

75
00:05:42,370 --> 00:05:49,120
I'm going to paste in this bit of code paused the video if you need to and copy what I have.

76
00:05:49,420 --> 00:05:51,780
Let's go over what this code does.

77
00:05:51,790 --> 00:05:59,040
We have a label element will set the four attribute for the value returned by the get field idea method.

78
00:05:59,050 --> 00:06:02,020
This method will generate an idea for our field.

79
00:06:02,020 --> 00:06:04,410
You simply pass in the name of the field.

80
00:06:04,540 --> 00:06:07,720
We actually use this method twice the second time.

81
00:06:07,750 --> 00:06:14,860
As for the I.D. attribute in the input field the next method is the get field name just like the get

82
00:06:14,860 --> 00:06:16,300
field I.D. method.

83
00:06:16,300 --> 00:06:19,420
This method will generate a name for our input.

84
00:06:19,420 --> 00:06:21,740
You may be thinking why is this important.

85
00:06:21,760 --> 00:06:28,450
Can't we just generate our own names and I.D. the WordPress widget form is submitted with Ajax.

86
00:06:28,450 --> 00:06:34,120
WordPress takes care of submitting the data and updating the corresponding fields since WordPress is

87
00:06:34,120 --> 00:06:40,060
handling the submission and updates but it's required to give these field special names rather than

88
00:06:40,150 --> 00:06:45,040
us having to worry about those names we can use these methods to do it for us.

89
00:06:45,070 --> 00:06:50,440
It's recommended to let WordPress take care of generating these attributes for you which is what these

90
00:06:50,440 --> 00:06:51,700
functions do.

91
00:06:51,700 --> 00:06:57,040
You'll also notice we don't create form tags because WordPress takes care of that too.

92
00:06:57,370 --> 00:07:04,570
The last attribute we're seeing is the value we output the instances title we sanitize the value with

93
00:07:04,570 --> 00:07:06,910
the EFC attribute function.

94
00:07:06,940 --> 00:07:12,310
This function will make sure that the value can be inserted into an attribute without breaking the code.

95
00:07:12,340 --> 00:07:19,750
To recap the 4 method is for displaying the form it's passed in an instance variable that contains information

96
00:07:19,810 --> 00:07:22,490
about the same data for the current widget.

97
00:07:22,600 --> 00:07:27,520
By default the instance is empty for new widgets since that's the case.

98
00:07:27,520 --> 00:07:31,200
We create some default values and merge it with the instance.

99
00:07:31,210 --> 00:07:34,300
That way we always have the minimum data we need.

100
00:07:34,300 --> 00:07:37,520
Lastly we simply output the fields like so.

101
00:07:37,870 --> 00:07:40,840
The third method we have is the update method.

102
00:07:40,840 --> 00:07:43,780
This method is called when a user submits the form.

103
00:07:43,780 --> 00:07:46,860
This allows us to filter the input in our own way.

104
00:07:46,870 --> 00:07:49,750
This method is passed in two variables.

105
00:07:49,750 --> 00:07:54,800
The first is the new submitted data and the second is the previous instance data.

106
00:07:54,850 --> 00:07:59,890
I'm going to create a new variable called instance.

107
00:08:00,020 --> 00:08:02,730
This will contain all our widget settings.

108
00:08:02,750 --> 00:08:05,410
We only have one setting which is the title.

109
00:08:05,540 --> 00:08:13,870
We'll set the title to the new instance sidle we're going to just sanitize the title by stripping any

110
00:08:13,870 --> 00:08:17,030
tags from the input using the strip tags function.

111
00:08:17,050 --> 00:08:22,480
Then you have to return this instance so that WordPress can then save our widget settings

112
00:08:25,040 --> 00:08:26,110
before we finish.

113
00:08:26,120 --> 00:08:30,980
Let's go back to the widget method and echo out a simple recipe of the day message.

114
00:08:30,980 --> 00:08:34,610
We'll be changing this later.

115
00:08:34,660 --> 00:08:42,560
Let's go to the widget admin page.

116
00:08:42,760 --> 00:08:45,110
You should find the widget ready to use.

117
00:08:45,190 --> 00:08:48,680
Add this widget to your sidebar and place it at the very top.

118
00:08:48,760 --> 00:08:53,160
WordPress takes care of setting up the UI for us and displaying the form.

119
00:08:53,290 --> 00:08:56,300
We can change the title and it will be updated properly.

120
00:08:56,650 --> 00:09:01,150
Let's view our site you should see the widget being output it onto the sidebar.

121
00:09:01,150 --> 00:09:04,630
The widget method is called to display the widget.

122
00:09:04,630 --> 00:09:08,470
Now the question is how do we display a recipe of the day.

123
00:09:08,470 --> 00:09:12,900
We have to take care of picking a random recipe and make it last for a day.

124
00:09:13,000 --> 00:09:16,530
Then our widget should refresh the recipe of the day.

125
00:09:16,540 --> 00:09:20,080
We can do this a number of ways like using the options API.

126
00:09:20,110 --> 00:09:25,910
However there is an API meant for this kind of task which is called the transience API.

127
00:09:26,020 --> 00:09:32,350
Before we use that we have to set up a cron job we'll tackle how to do most of these tasks in the next

128
00:09:32,350 --> 00:09:32,830
lecture.
