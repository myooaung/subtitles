1
00:00:07,560 --> 00:00:10,930
IOS 6 comes with a lot of features we'd like to use.

2
00:00:10,930 --> 00:00:14,290
I'm only going to show you what you'll need right at the start.

3
00:00:14,290 --> 00:00:20,000
There are more features than the ones I'm about to introduce but also use those as the course progresses.

4
00:00:20,020 --> 00:00:24,190
And this lecture we're going to start talking about the changes to variables.

5
00:00:24,280 --> 00:00:27,120
I'm going to be working inside the index file.

6
00:00:27,310 --> 00:00:34,000
Make sure any code inside this file is commented out as you may know variables are created using the

7
00:00:34,000 --> 00:00:35,470
VAR keyword.

8
00:00:35,470 --> 00:00:43,880
I'm going to create a variable named foo and assign it to the string hello then I'm going to log this

9
00:00:43,880 --> 00:00:46,660
variable.

10
00:00:46,690 --> 00:00:50,250
This is pretty basic but it's very difficult to control.

11
00:00:50,260 --> 00:00:52,300
This is a problem with JavaScript.

12
00:00:52,420 --> 00:00:55,700
It's a very relaxed language and it's not strict at all.

13
00:00:55,720 --> 00:00:59,470
You could just turn on strict mode but that only does so much.

14
00:00:59,470 --> 00:01:06,850
Right after we define this variable we can change the value of it to something like the number 5 in

15
00:01:06,850 --> 00:01:07,680
this example.

16
00:01:07,680 --> 00:01:13,110
That's fine and all but it becomes a problem when you're working with larger applications throughout

17
00:01:13,110 --> 00:01:18,000
this course we'll be loaning hundreds of JavaScript variables and you'll find yourself needing more

18
00:01:18,000 --> 00:01:19,770
control than usual.

19
00:01:19,770 --> 00:01:28,600
I'm going to run the command node app slash index you'll see that the number 5 is being outputting.

20
00:01:28,620 --> 00:01:30,970
This is the expected behavior so far.

21
00:01:31,290 --> 00:01:36,600
Even though there are different ways to define variables it's not like those methods are completely

22
00:01:36,600 --> 00:01:38,410
replacing the VAR keyword.

23
00:01:38,550 --> 00:01:41,870
Using the VAR keyword is still completely valid.

24
00:01:41,880 --> 00:01:45,800
Javascript code and it will continue to be supported for many years.

25
00:01:45,810 --> 00:01:48,290
I just wanted you to be aware of that.

26
00:01:48,300 --> 00:01:52,590
All right let's start things off by learning about the concept keyword.

27
00:01:52,590 --> 00:01:58,800
The keyword concept is short for constant constants in JavaScript work the same exact way constants

28
00:01:58,800 --> 00:02:00,270
work in P P.

29
00:02:00,270 --> 00:02:06,960
I assume for the most part you understand what constants are constants allow you to create variables

30
00:02:06,960 --> 00:02:11,250
that never change they can never be changed after being defined.

31
00:02:11,250 --> 00:02:16,290
If you try to change the value of a constant then you'll be given an error and the value would still

32
00:02:16,290 --> 00:02:17,670
stay the same.

33
00:02:17,790 --> 00:02:20,050
Using a constant is fairly easy.

34
00:02:20,130 --> 00:02:28,310
All you have to do is change the keyword from a var to contest that's all you have to do everything

35
00:02:28,310 --> 00:02:29,860
else is still the same.

36
00:02:29,900 --> 00:02:33,370
You can set the constant to any kind of value you want.

37
00:02:33,530 --> 00:02:37,520
It can be a string number array and even an object.

38
00:02:37,580 --> 00:02:46,010
Let's test this out by running node app slash index after running this will get an error.

39
00:02:46,130 --> 00:02:50,840
The error is telling us that you can't change the value of a constant which is what we're doing in our

40
00:02:50,840 --> 00:02:51,740
code.

41
00:02:51,740 --> 00:02:55,130
I'm going to comment out this code and then run the command again

42
00:03:01,110 --> 00:03:03,410
after running it will see no errors.

43
00:03:03,420 --> 00:03:09,810
And the concept is working as expected throughout this course you'll see me using constants a lot actually

44
00:03:09,870 --> 00:03:15,450
if you were to view any tutorials or look at other people's code then you'll notice that constants are

45
00:03:15,450 --> 00:03:17,080
widely adopted.

46
00:03:17,220 --> 00:03:22,830
You'll definitely get a lot of practice using constants and you'll be fairly confident using them by

47
00:03:22,830 --> 00:03:28,940
using constants we assure ourselves that we have more control over how our variables are set.

48
00:03:28,950 --> 00:03:34,680
So far we've only tested this with note using constants on browsers is a different story.

49
00:03:35,070 --> 00:03:37,270
I'm going to run my code through web pack.

50
00:03:39,540 --> 00:03:41,140
You should see a success message.

51
00:03:41,430 --> 00:03:42,840
Let's check out the page.

52
00:03:42,870 --> 00:03:47,580
If you look at the console and you'll see the number of being output add on to the console.

53
00:03:47,580 --> 00:03:48,570
Here's the thing.

54
00:03:48,690 --> 00:03:55,740
Constants on e 6 feature Westpac and Babel help make sure your code is compatible with all browsers

55
00:03:55,770 --> 00:03:57,370
including older ones.

56
00:03:57,420 --> 00:04:02,350
Most modern browsers already support iOS 6 but older browsers don't.

57
00:04:02,790 --> 00:04:09,960
Unfortunately web pack doesn't have a way to force or simulate this behaviour for you so it has no choice

58
00:04:10,020 --> 00:04:17,190
but to convert the console keyword to var so you may be thinking What is the point of using iOS 6 if

59
00:04:17,190 --> 00:04:20,260
it's going to be converted for backwards compatibility.

60
00:04:20,280 --> 00:04:22,060
Well there are two reasons.

61
00:04:22,110 --> 00:04:25,290
The first reason is to be able to write code for the future.

62
00:04:25,440 --> 00:04:31,710
That may seem weird but eventually iOS 6 will be compatible with all browsers 100 percent.

63
00:04:31,740 --> 00:04:33,470
You'll want to prepare for this.

64
00:04:33,600 --> 00:04:38,620
So when the time comes you'll have to make very little changes to your code base.

65
00:04:38,670 --> 00:04:43,680
If you were to continue writing code with early versions of JavaScript you'll find yourself behind the

66
00:04:43,680 --> 00:04:46,700
pack and spent a lot of time updating your code base.

67
00:04:46,710 --> 00:04:48,250
You don't want that.

68
00:04:48,270 --> 00:04:53,700
The second reason is that iOS 6 provides a lot of security and control over your code.

69
00:04:53,730 --> 00:04:59,300
A lot of the tools and libraries you'll be using are written in iOS 6 whether you like it or not.

70
00:04:59,490 --> 00:05:03,380
This kind of forces you to write your code to be iOS 6 ready.

71
00:05:03,540 --> 00:05:07,670
Since you're loading so much code you should take extra precautions.

72
00:05:07,800 --> 00:05:13,300
You only want to allow code that should be able to modify your data if you keep using var.

73
00:05:13,320 --> 00:05:18,420
You'll eventually find yourself in this situation where your code may not behave the way you expect

74
00:05:18,420 --> 00:05:19,530
it to.

75
00:05:19,530 --> 00:05:22,280
There's a lot to be said but I'll leave it at that.

76
00:05:22,290 --> 00:05:26,910
Let's move on to the next way of creating variables along with constants.

77
00:05:26,910 --> 00:05:30,720
You can also create block scope level variables.

78
00:05:30,780 --> 00:05:32,070
That's a big phrase.

79
00:05:32,070 --> 00:05:33,900
Let me break down what that means.

80
00:05:34,170 --> 00:05:40,560
Yes 6 introduces the key words let's let is another way of creating variables.

81
00:05:40,620 --> 00:05:49,540
I'm going to create a variable name to bar and assign its value to 10 using let is as simple as changing

82
00:05:49,540 --> 00:05:52,830
the keyword var to let just like last time.

83
00:05:52,870 --> 00:05:55,990
You can create any kind of variable you want.

84
00:05:55,990 --> 00:06:01,790
You can use left for strings numbers arrays objects etc..

85
00:06:01,810 --> 00:06:09,640
I'm going to Long Beach Bar a variable and then I'm going to run this script through node as expected

86
00:06:09,710 --> 00:06:12,130
will see the number 10 outputting.

87
00:06:12,370 --> 00:06:19,000
I'm going to create a conditional statement this conditional statement will always be true inside this

88
00:06:19,000 --> 00:06:20,050
conditional statement.

89
00:06:20,050 --> 00:06:26,430
I'm going to reassign the bar variable to 5 run the command again.

90
00:06:28,940 --> 00:06:34,410
We should get no errors and as expected we'll see the number 5 instead of 10.

91
00:06:34,430 --> 00:06:36,790
What exactly does Lett do.

92
00:06:36,800 --> 00:06:38,680
Here's where it can come in handy.

93
00:06:38,720 --> 00:06:46,790
I'm going to move my bar variable definition inside my conditional statement like so let's try running

94
00:06:46,790 --> 00:06:49,040
the command one more time and see what we get.

95
00:06:51,570 --> 00:06:55,610
You'll receive an error stating that bar is undefined.

96
00:06:55,650 --> 00:06:58,440
This can seem strange at first but it's not.

97
00:06:58,440 --> 00:07:04,920
Once you understand what's going on let makes it so only code that is on the same level as where it's

98
00:07:04,920 --> 00:07:06,810
defined can change it.

99
00:07:06,870 --> 00:07:13,710
And this example we defined the bar variable inside this block statement only code inside this block

100
00:07:13,710 --> 00:07:19,920
statement can access and change the variable bar once this block statement is finished running then

101
00:07:19,920 --> 00:07:22,770
the bar variable is destroyed.

102
00:07:22,770 --> 00:07:28,130
This means we can't access it outside the block statement like we do in this log function.

103
00:07:28,230 --> 00:07:34,010
Previously everything was working fine when the variable was defined outside the block statement.

104
00:07:34,020 --> 00:07:37,230
That's because the variable was available globally.

105
00:07:37,260 --> 00:07:44,370
This is the power of let variables you can control how far a variable can be controlled in a way.

106
00:07:44,370 --> 00:07:47,270
It adds an extra layer of security.

107
00:07:47,370 --> 00:07:52,500
I'm going to move the bar variable back to the global scope and get rid of this conditional statement.

108
00:07:54,780 --> 00:07:57,350
Lastly I'm going to run it through Westpac.

109
00:07:59,590 --> 00:08:06,220
Let's view the code on the browser again as you can see both variables where output it with no errors.

110
00:08:06,220 --> 00:08:08,350
That's basically it for variables.

111
00:08:08,350 --> 00:08:11,440
This is just the basics of these two keywords.

112
00:08:11,440 --> 00:08:16,150
You'll find that both keywords are used in a lot of design patterns for their benefits.

113
00:08:16,150 --> 00:08:19,340
This course is not really a javascript course.

114
00:08:19,420 --> 00:08:25,090
I know that may seem weird because for the past few lectures we've done nothing but use javascript.

115
00:08:25,120 --> 00:08:31,510
However I'm only introducing you to the fundamentals and basics of JavaScript javascript definitely

116
00:08:31,510 --> 00:08:37,360
has a lot to offer and I encourage you to learn more about it after you finish this course in the next

117
00:08:37,360 --> 00:08:40,870
few lectures will finish things up with Arrow functions and modules.
