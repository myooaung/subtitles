WEBVTT
1
00:00:07.640 --> 00:00:11.540
Right now I'm on a Web site for the WordPress plugin Bebe press.

2
00:00:11.540 --> 00:00:14.710
This plug in is one of the most advanced plugins out there.

3
00:00:14.720 --> 00:00:18.170
It allows you to turn your WordPress site into a forum.

4
00:00:18.170 --> 00:00:23.120
One of the most prominent features of Bebe press is that developers can write plugins to extend this

5
00:00:23.120 --> 00:00:23.550
plugin.

6
00:00:23.990 --> 00:00:30.590
Here's the thing though Bebe press doesn't implement its own plugin API BD press takes advantage of

7
00:00:30.590 --> 00:00:34.940
WordPress as plugin API and just as its own action filter hooks.

8
00:00:35.090 --> 00:00:39.350
Writing a plugin for Bebe press is the same as writing a plugin for wordpress.

9
00:00:39.350 --> 00:00:46.580
As we discussed previously Bebe press just uses the do action and apply filters functions for creating

10
00:00:46.580 --> 00:00:48.590
its own custom hooks.

11
00:00:48.590 --> 00:00:54.410
Lets say that we publish our plugin and it has now become insanely popular it's become so popular that

12
00:00:54.410 --> 00:00:56.690
we're getting requests for new features daily.

13
00:00:57.170 --> 00:01:02.100
Unfortunately some of these requests deviate from the main purpose of the plugin.

14
00:01:02.180 --> 00:01:07.620
We don't want to deviate from the main purpose nor do we want to limit the functionality of the plugin.

15
00:01:07.730 --> 00:01:09.490
So how do we solve this.

16
00:01:09.500 --> 00:01:16.190
We can use the plugin API to allow developers to further extend our plugin with more plugins in the

17
00:01:16.190 --> 00:01:18.150
resource section of this lecture.

18
00:01:18.230 --> 00:01:20.710
I provide a link to the plugin API.

19
00:01:20.900 --> 00:01:25.270
WordPress provides a handful of functions to use the plugin API.

20
00:01:25.280 --> 00:01:28.980
Actually we've already been using them from the very beginning.

21
00:01:29.030 --> 00:01:35.750
The ad action and ad filter are functions we've used plenty of times you already know how to use these

22
00:01:35.750 --> 00:01:36.430
functions.

23
00:01:36.500 --> 00:01:40.670
But let's take a look at how you would go about using them in a different way.

24
00:01:40.700 --> 00:01:47.210
I want to let developers extend the rating function so let's open up the rating function file now right

25
00:01:47.210 --> 00:01:55.240
before it that Jason is output it let's call a function called do action this function takes in the

26
00:01:55.240 --> 00:01:57.400
name of the action we want to trigger.

27
00:01:57.430 --> 00:02:01.360
This can be a custom defined one or one available in WordPress.

28
00:02:01.360 --> 00:02:03.420
Let's enter a custom one and name it.

29
00:02:03.460 --> 00:02:04.660
Recipe rated.

30
00:02:04.900 --> 00:02:07.150
The second parameter is optional.

31
00:02:07.180 --> 00:02:11.950
It's a list of parameters that will be sent to any function that hooks into this hook.

32
00:02:12.010 --> 00:02:23.150
I'm going to pass in an array with the Post I.D. rating and the IP of the user.

33
00:02:23.310 --> 00:02:24.060
That's it.

34
00:02:24.060 --> 00:02:26.420
We don't have to do anything else now.

35
00:02:26.430 --> 00:02:31.810
Any plugin developer can use the add action function and hook into this action hook.

36
00:02:31.920 --> 00:02:37.590
Even if this hook isn't used by functions WordPress will not throw errors and will run as usual.

37
00:02:37.590 --> 00:02:41.500
Just be sure to let other developers know that this action is available.

38
00:02:41.970 --> 00:02:44.760
Let's test this out by developing another plugin.

39
00:02:44.880 --> 00:02:48.690
This plugin will email us whenever a user writes a recipe.

40
00:02:48.690 --> 00:02:54.810
We're going to take advantage of the hook we created earlier to do this inside the plugin folder create

41
00:02:54.840 --> 00:03:02.940
a file called email dash recipe dot BHP this will contain our new plugin.

42
00:03:02.970 --> 00:03:08.220
I'm not going to bother creating a folder or try and organize this plugin because this plugin will be

43
00:03:08.220 --> 00:03:09.270
very simple.

44
00:03:09.270 --> 00:03:11.560
It'll only be a few lines of code.

45
00:03:11.730 --> 00:03:17.920
I'm going to set the name of this plugin to recipe email rating and set the description to this plugin

46
00:03:17.970 --> 00:03:19.440
extends the recipe plugin

47
00:03:23.630 --> 00:03:31.330
let's call the add action function and use the custom recipe rated hook previously.

48
00:03:31.380 --> 00:03:35.520
We've always passed in a string name of the function we wanted to call.

49
00:03:35.550 --> 00:03:42.570
This time we'll pass an anonymous function anonymous functions are special to HP and not WordPress.

50
00:03:42.690 --> 00:03:46.340
They're only available in HP five point three or above.

51
00:03:46.500 --> 00:03:50.780
So I can't recommend that you use anonymous functions in production plugins.

52
00:03:50.790 --> 00:03:54.370
If you plan on supporting versions earlier then five point three.

53
00:03:54.630 --> 00:04:00.360
Our anonymous function will accept in an array with the details about the rating we want our new plug

54
00:04:00.360 --> 00:04:03.800
into email the author of this recipe about the new rating.

55
00:04:03.870 --> 00:04:11.110
Let's get the info about the post by using the get post function you pass this function.

56
00:04:11.120 --> 00:04:15.860
The ideas of the post the function will return data about the post.

57
00:04:15.860 --> 00:04:19.200
I'm going to create a variable named user email.

58
00:04:19.250 --> 00:04:21.980
We can now grab the author email by using the.

59
00:04:22.040 --> 00:04:23.690
Get the author meta function

60
00:04:28.030 --> 00:04:30.060
this function has two parameters.

61
00:04:30.070 --> 00:04:32.670
The first is the field we want to grab.

62
00:04:32.680 --> 00:04:34.510
This would be the user email.

63
00:04:34.510 --> 00:04:42.110
The second parameter is the idea of the author our post data will contain a field named Post author

64
00:04:42.110 --> 00:04:44.240
which contains the author Aidid.

65
00:04:44.240 --> 00:04:47.510
Now we can compose the subject and message.

66
00:04:47.660 --> 00:04:51.120
The subject will be your recipe has received a new rating.

67
00:04:51.170 --> 00:04:57.180
The message will be your recipe followed by the title of The Post has received a new rating of.

68
00:04:57.320 --> 00:05:07.010
And then we pass in the rating.

69
00:05:07.060 --> 00:05:09.890
The last thing we need to do is send this as an email.

70
00:05:09.910 --> 00:05:13.310
WordPress provides a function called WP mail.

71
00:05:13.390 --> 00:05:17.010
Why use this function instead of peace mail function.

72
00:05:17.050 --> 00:05:22.690
Well this function is plausible meaning other plugins can take advantage of modifying the email and

73
00:05:22.690 --> 00:05:23.500
its info.

74
00:05:23.590 --> 00:05:26.950
The parameters are the same as p ps mail function.

75
00:05:26.950 --> 00:05:29.530
The first parameter is the recipient's email.

76
00:05:29.560 --> 00:05:37.790
The second and third parameters are the subject and message respectively our plugin is now ready.

77
00:05:37.820 --> 00:05:41.150
You should keep in mind that this won't work on most local servers.

78
00:05:41.150 --> 00:05:46.610
Sending emails require S.M. T.P. so you will need to test this on a live site.
