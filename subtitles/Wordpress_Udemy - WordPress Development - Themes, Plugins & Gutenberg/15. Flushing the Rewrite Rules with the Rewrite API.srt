1
00:00:07,470 --> 00:00:12,530
The rewrite API is probably the most dangerous API where press has to offer.

2
00:00:12,540 --> 00:00:18,200
And that's because even during the development phase of your plug in or theme it can destroy your site.

3
00:00:18,210 --> 00:00:23,970
So to kind of keep things from getting too hectic this lecture will only be a light introduction to

4
00:00:23,970 --> 00:00:25,460
this API.

5
00:00:25,590 --> 00:00:32,090
The rewrite API allows you to modify the you real structure of WordPress the FCO friendly you or else

6
00:00:32,100 --> 00:00:37,950
you see being generated are all thanks to the H T access file and WordPress free write rules.

7
00:00:37,950 --> 00:00:44,910
The ability to add more rules or customize existing ones are all possible with the rewrite API in the

8
00:00:44,910 --> 00:00:46,940
resource section of this lecture.

9
00:00:47,040 --> 00:00:49,370
I provide a link to this API.

10
00:00:49,410 --> 00:00:52,170
Here's what WordPress has to say about it.

11
00:00:52,170 --> 00:00:58,770
WordPress allows theme and plugin developers to programmatically specify new custom rewrite rules.

12
00:00:58,830 --> 00:01:05,880
The following functions which are mostly aliases for WP rewrite methods can be used to achieve this.

13
00:01:05,880 --> 00:01:11,690
Let's explore how you URLs are stored and what makes the rewrite Api work the way it does.

14
00:01:11,760 --> 00:01:14,800
First let's open the H2 access file.

15
00:01:14,940 --> 00:01:18,710
You can find this file in the root installation of your WordPress site.

16
00:01:18,780 --> 00:01:22,370
Open this file and let's check out what's so important about it.

17
00:01:22,380 --> 00:01:28,170
This file allows you to control how a site works by directly editing some of the server settings.

18
00:01:28,170 --> 00:01:32,970
It's important to understand that Apache not PJ P reads this file.

19
00:01:32,970 --> 00:01:37,410
If you have an error in this file then you'll end up destroying your whole site.

20
00:01:37,620 --> 00:01:43,590
So editing This file should be taken with extra care the commands you'll find inside this file aren't

21
00:01:43,590 --> 00:01:47,490
really newbie friendly but let's go through it one by one.

22
00:01:47,490 --> 00:01:51,320
First you'll find these hash tags with some text after it.

23
00:01:51,360 --> 00:01:56,610
These are considered comments so you're free to type whatever you want after these tags without breaking

24
00:01:56,610 --> 00:01:58,130
the site.

25
00:01:58,130 --> 00:02:00,270
Next up is this conditional statement.

26
00:02:00,350 --> 00:02:07,040
It's written in an odd fashion but keep in mind that this isn't BHP what this line does is check if

27
00:02:07,040 --> 00:02:09,800
a module called mod rewrite is enabled.

28
00:02:10,130 --> 00:02:16,340
If it is then the rest of this code will execute the mod rewrite module makes it possible for you or

29
00:02:16,340 --> 00:02:22,370
else to have user friendly you or else rather than having a lot of question marks Ampersand signs etc

30
00:02:23,300 --> 00:02:29,480
inside this statement is code that will intercept all Euro requests and make the index stop page for

31
00:02:29,480 --> 00:02:36,030
you file control the requests first we're instructing Apache to turn on the rewrite engine.

32
00:02:36,050 --> 00:02:40,910
This will allow us to begin controlling how you are real should be displayed.

33
00:02:40,910 --> 00:02:48,150
Then we're specifying a rewrite base the rewrite base is the list of folders relative to the root domain.

34
00:02:48,140 --> 00:02:53,720
I'm currently inside my Udemy folder so that's what we'll be in put it here next.

35
00:02:53,870 --> 00:02:59,720
All requests made to our site and any directories will be handled by the index dot P HP file.

36
00:02:59,720 --> 00:03:02,350
There are some flags in place before this though.

37
00:03:02,570 --> 00:03:06,770
These flags will make sure to display files that exist like image files.

38
00:03:06,770 --> 00:03:13,730
If the files or directories don't exist then everything will be passed onto the index not page v file.

39
00:03:13,730 --> 00:03:20,540
The way the image displays and WordPress doesn't have to use any CPE or bandwidth to handle the request.

40
00:03:20,540 --> 00:03:24,910
This bit of code is what makes WordPress have a clean U.R.L. structure.

41
00:03:24,920 --> 00:03:29,840
Keep in mind that this is only part of it but a very important part nonetheless.

42
00:03:30,050 --> 00:03:36,350
As an extra precaution WordPress provides this page which stores the original contents of the HTC access

43
00:03:36,350 --> 00:03:37,230
file.

44
00:03:37,280 --> 00:03:40,640
I'll provide a link in the resource section of this lecture.

45
00:03:40,820 --> 00:03:46,730
If you ever break the h t axis file then just copy and paste this into the file and you should be good

46
00:03:46,730 --> 00:03:48,790
to go open Heidi.

47
00:03:48,800 --> 00:03:51,260
Yes you will interview the options table.

48
00:03:51,260 --> 00:03:59,450
Look for an option named rewrite underscore rules if you were to open this options value you'll find

49
00:03:59,450 --> 00:04:04,770
that the word press corps plugins and themes all take the time to modify this option.

50
00:04:04,820 --> 00:04:06,190
It's pretty extensive.

51
00:04:06,260 --> 00:04:09,110
This is where all the rewrite rules are stored.

52
00:04:09,110 --> 00:04:14,690
We are more than allowed to use the options API to modify this option but that's too risky.

53
00:04:15,410 --> 00:04:16,850
All right enough talk.

54
00:04:16,850 --> 00:04:18,650
Let's use this API.

55
00:04:18,680 --> 00:04:22,980
Like I said before this will be a light introduction to this API.

56
00:04:23,030 --> 00:04:27,760
Right now I have the activation function to opened up for our plugin.

57
00:04:27,770 --> 00:04:33,800
I run into a problem where when I create a custom post type it won't work because the you or else aren't

58
00:04:33,800 --> 00:04:34,790
flushed.

59
00:04:34,790 --> 00:04:38,870
This varies from site to site but the problem is all the same.

60
00:04:38,870 --> 00:04:44,630
To fix this you can go into the settings perma links page and just click update for the rules to be

61
00:04:44,630 --> 00:04:45,630
rewritten.

62
00:04:45,650 --> 00:04:50,760
However this is a pain and we always just want our plugin to work out of the box.

63
00:04:50,930 --> 00:04:53,900
We can flush the rules ourselves with code.

64
00:04:53,930 --> 00:04:56,560
There are only two steps we need to do.

65
00:04:56,660 --> 00:05:00,620
The first step is to first register the custom post type.

66
00:05:00,620 --> 00:05:06,200
Despite this being done in the init function WordPress won't run the init function when the plug in

67
00:05:06,200 --> 00:05:07,370
is activated.

68
00:05:07,370 --> 00:05:09,930
We have to call this function manually.

69
00:05:10,040 --> 00:05:15,950
We previously named this recipe in it which contains the registration app for our post type.

70
00:05:15,950 --> 00:05:19,970
We have to register it as it contains the url rewrite.

71
00:05:19,970 --> 00:05:27,950
We can now flush the rules by calling the function called Flush rewrite rules this function will update

72
00:05:27,980 --> 00:05:31,990
the rewrite rules since we registered our post type WordPress.

73
00:05:32,060 --> 00:05:37,250
We'll be able to find out that there is a new you or real structure to account for it will update the

74
00:05:37,250 --> 00:05:44,780
rewrite rules appropriately trying deactivating and reactivating your plugin.

75
00:05:44,950 --> 00:05:46,960
You should receive no errors.

76
00:05:46,960 --> 00:05:52,840
Just like that you were able to flush the rewrite rules and have our plugin compatible with most WordPress

77
00:05:52,840 --> 00:05:53,760
sites.

78
00:05:53,770 --> 00:05:55,560
This step is super important.

79
00:05:55,570 --> 00:06:01,500
If you plan on creating custom post types let me go over what's going on in detail.

80
00:06:01,690 --> 00:06:08,140
When a user makes a request to our site WordPress will check the rewrite rules option inside the database

81
00:06:08,170 --> 00:06:09,850
and determine what page to load.

82
00:06:09,850 --> 00:06:15,210
Based on the rules WordPress will grab the URL and then go through each rule.

83
00:06:15,370 --> 00:06:20,080
It will try and match the URL to each rule once it finds a match.

84
00:06:20,080 --> 00:06:25,960
WordPress will then make the correct queries and load the template for that page if it doesn't find

85
00:06:25,960 --> 00:06:30,160
a rule that matches then WordPress war return a for all for error.

86
00:06:30,160 --> 00:06:36,550
The rewrite rules are highly sensitive WordPress does not check for changes on every page request.

87
00:06:36,790 --> 00:06:41,800
When we created our post type we created a brand new york URL structure.

88
00:06:41,800 --> 00:06:48,520
However WordPress does not save the changes so in our activation function we told WordPress about the

89
00:06:48,520 --> 00:06:50,200
new U.R.L. structure.

90
00:06:50,260 --> 00:06:56,410
Then we told WordPress to add this new rule by calling the flush we write rules function.

91
00:06:56,410 --> 00:07:01,840
The reason we do not call this function inside the init function is because it's not recommended by

92
00:07:01,840 --> 00:07:02,970
WordPress.

93
00:07:02,980 --> 00:07:09,190
If you think about it constantly telling WordPress to update its rules on every page load is inefficient.

94
00:07:09,310 --> 00:07:12,700
It can also open yourself up to security vulnerabilities.
