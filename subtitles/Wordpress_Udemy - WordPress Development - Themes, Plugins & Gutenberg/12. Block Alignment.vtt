WEBVTT
1
00:00:08.290 --> 00:00:11.150
Let's keep adding onto the block controls component.

2
00:00:11.280 --> 00:00:16.390
There's another component word press provides called The Block alignment component.

3
00:00:16.390 --> 00:00:21.700
This is different from the text alignment the text alignment will align the text while the block alignment

4
00:00:21.700 --> 00:00:23.590
will move the block itself.

5
00:00:23.590 --> 00:00:29.230
You can have multiple pieces of content inside a block the block alignment will move everything to the

6
00:00:29.230 --> 00:00:31.120
left center or right.

7
00:00:31.300 --> 00:00:34.900
It can even allow four columns in your design to get started.

8
00:00:34.990 --> 00:00:41.950
Let's open the index file for the recipe block these structure the WP dot editor and grab the block

9
00:00:42.010 --> 00:00:46.510
alignment toolbar component next.

10
00:00:46.540 --> 00:00:53.320
Let's add the attribute the name will be block alignment with a type of string and default of wide

11
00:00:58.380 --> 00:00:59.370
unlike text.

12
00:00:59.370 --> 00:01:02.930
Moving an entire block will require some CSF properties.

13
00:01:03.210 --> 00:01:07.690
Luckily WordPress will generate some classes for you to handle moving the block.

14
00:01:07.800 --> 00:01:10.340
You'll see what those looked like in just a moment.

15
00:01:10.390 --> 00:01:14.220
The wide class is the default class for most blocks.

16
00:01:14.220 --> 00:01:17.330
We have the component and we have the attribute ready.

17
00:01:17.340 --> 00:01:20.010
Now it's time to add the toolbar to the block.

18
00:01:20.130 --> 00:01:25.860
Scroll down to the block controls component you have the freedom to order your toolbars in any order

19
00:01:25.860 --> 00:01:26.650
you like.

20
00:01:26.730 --> 00:01:32.070
You can place the block alignment toolbar before or after the text alignment toolbar.

21
00:01:32.220 --> 00:01:40.620
I'm going to place it before the text alignment toolbar add the component block alignment toolbar just

22
00:01:40.620 --> 00:01:45.030
like the previous toolbar will need to add the value ends on change.

23
00:01:45.030 --> 00:01:48.220
Attributes.

24
00:01:48.350 --> 00:01:51.560
Let me show you how to find the values for these attributes.

25
00:01:51.560 --> 00:01:53.610
Go to the Gutenberg repository.

26
00:01:53.750 --> 00:01:57.160
Navigate to the packages slash editors directory.

27
00:01:57.170 --> 00:02:03.870
This is where code strictly related to the editor is placed inside the source slash components directory.

28
00:02:03.890 --> 00:02:07.000
You will find all the components used within the editor.

29
00:02:07.010 --> 00:02:10.690
You'll find the block alignment toolbar component here.

30
00:02:10.760 --> 00:02:16.610
There may or may not be a read me file not everything in Gutenberg is documented in these cases.

31
00:02:16.610 --> 00:02:19.120
You should dig into the index code.

32
00:02:19.220 --> 00:02:24.110
There are a couple of things going on here but the first place you want to look into is the function

33
00:02:24.110 --> 00:02:25.040
itself.

34
00:02:25.070 --> 00:02:30.830
Remember components are just JavaScript functions even though they're written like each team out there

35
00:02:30.830 --> 00:02:33.370
are some parameters with default values.

36
00:02:33.410 --> 00:02:39.920
You can safely ignore those the ones we're required to set are the value end on change parameters.

37
00:02:39.920 --> 00:02:49.060
Back inside the script set the value to props dot attribute stop block alignment the on change attribute

38
00:02:49.060 --> 00:02:52.030
will be set to an arrow function that accepts in the new value

39
00:02:56.040 --> 00:03:05.090
use the props object and called the set attributes function Update The Block alignment attribute we've

40
00:03:05.090 --> 00:03:09.770
created the toolbar the last step to all of this is to apply it to the block.

41
00:03:09.860 --> 00:03:16.190
Here's where things change the lock alignment changes the block itself the block in the editor is more

42
00:03:16.190 --> 00:03:21.860
complex than the block that appears on the front end it's a bit more difficult to apply changes to the

43
00:03:21.860 --> 00:03:28.280
block when we add controls most of it in these cases we'll have to use a special function right above

44
00:03:28.280 --> 00:03:37.760
the edit function add the property get edit wrapper props.

45
00:03:37.980 --> 00:03:43.530
This will be set to an arrow function that will accept in the props object two things worth noting here.

46
00:03:43.620 --> 00:03:48.270
This function will automatically be triggered whenever a change to the block is made.

47
00:03:48.270 --> 00:03:52.490
This includes the additional settings and features WordPress adds to your block.

48
00:03:52.560 --> 00:03:54.810
It's not just our attributes.

49
00:03:54.840 --> 00:03:59.450
The second thing is that the props object is slightly different than before.

50
00:03:59.490 --> 00:04:04.800
Previously you would access your attributes through the prompt start attributes object.

51
00:04:04.800 --> 00:04:09.940
This time you can directly access the attributes through the props object alone.

52
00:04:10.020 --> 00:04:13.870
With that being said we only need the block alignment attribute.

53
00:04:14.100 --> 00:04:22.730
Let's D structure this and grab the block alignment property like so this function expects us to return

54
00:04:22.770 --> 00:04:24.760
any changes to its properties.

55
00:04:24.780 --> 00:04:27.380
We can change any of the block properties.

56
00:04:27.390 --> 00:04:28.800
It's not just our own.

57
00:04:28.830 --> 00:04:32.270
With that being said we only want to change the alignment.

58
00:04:32.310 --> 00:04:38.440
I'm going to create a conditional statement that will check if the block alignment is set to left right.

59
00:04:38.440 --> 00:04:38.910
Werfel

60
00:04:44.500 --> 00:04:50.800
these are all the alignments available if the alignment is set to any of these values then will return

61
00:04:50.890 --> 00:04:53.140
data dash a line block alignment

62
00:04:56.180 --> 00:04:59.810
previously we would call a function to update a national view.

63
00:04:59.880 --> 00:05:06.080
However since WordPress controls the block we can just return what we want to change and WordPress will

64
00:05:06.080 --> 00:05:07.640
process everything.

65
00:05:07.640 --> 00:05:10.340
You may be wondering how I found this value.

66
00:05:10.370 --> 00:05:14.160
I'll show you soon enough but just keep following along.

67
00:05:14.240 --> 00:05:19.390
Now that the attribute is properly updated we can begin to apply it to the block.

68
00:05:19.430 --> 00:05:24.500
The great thing about Gutenberg is that the block will be updated visually automatically.

69
00:05:24.530 --> 00:05:28.420
We don't need to make any further changes to the edit function.

70
00:05:28.610 --> 00:05:35.450
Scroll down to the save function in the root div element Abdi class name attribute and set it to the

71
00:05:35.450 --> 00:05:40.070
following a line prompts dot attribute stop block alignment

72
00:05:43.120 --> 00:05:49.210
the class a line is provided by the theme we're using it starts with the phrase a line followed by the

73
00:05:49.210 --> 00:05:53.250
position of the block there are four possible positions at the moment.

74
00:05:53.440 --> 00:06:00.220
Wide left center and right wide is the default position which will make the block take up the full width

75
00:06:00.220 --> 00:06:01.540
of the container.

76
00:06:01.570 --> 00:06:08.980
Let's test this out save your changes in C D into the blocks directory then run the commands NPM run

77
00:06:08.980 --> 00:06:13.550
Dev go ahead and refresh the page.

78
00:06:13.620 --> 00:06:21.980
The block may be broken just added in again if you have to.

79
00:06:22.200 --> 00:06:24.990
You should see the block alignment toolbar up here.

80
00:06:25.080 --> 00:06:29.920
You should be able to select any of the alignments and see the block move accordingly.

81
00:06:29.940 --> 00:06:34.440
Like I said before the blocks position is taken care of by WordPress.

82
00:06:34.440 --> 00:06:40.590
All we have to do is notify WordPress of the change save your changes and try viewing the post on the

83
00:06:40.590 --> 00:06:41.500
front end.

84
00:06:41.550 --> 00:06:47.160
The block should appear correctly position if you were to view the element in the developer tools then

85
00:06:47.160 --> 00:06:51.900
you should see the class a line applied to the div tag to the right.

86
00:06:51.900 --> 00:06:57.510
The style should appear as you can see you don't have to do much to make it appear aligned to the left

87
00:06:57.540 --> 00:06:58.420
or right.

88
00:06:58.470 --> 00:07:02.680
Feel free to use the bootstrap C assess for your own themes.

89
00:07:02.700 --> 00:07:08.370
All right before I finish this lecture I want to explain how I found out that you had to change the

90
00:07:08.370 --> 00:07:14.640
data align property go back to the Gutenberg editor if you were to inspect the recipe block then you

91
00:07:14.640 --> 00:07:15.770
won't see the data.

92
00:07:15.770 --> 00:07:19.870
Align property you'll have to scroll up quite a bit to find it.

93
00:07:19.950 --> 00:07:25.890
As you can see the data a line of property appears here and it has the position you selected to find

94
00:07:25.890 --> 00:07:27.510
what values you can change.

95
00:07:27.510 --> 00:07:33.330
You can search in one of two places you can search through the javascript code itself or look at the

96
00:07:33.330 --> 00:07:35.970
elements generated by Gutenberg.

97
00:07:35.970 --> 00:07:37.890
All right that does it for now.

98
00:07:37.890 --> 00:07:42.810
In the next couple of lectures we'll continue exploring more features of Gutenberg.

99
00:07:42.810 --> 00:07:44.000
I'll see you there.
