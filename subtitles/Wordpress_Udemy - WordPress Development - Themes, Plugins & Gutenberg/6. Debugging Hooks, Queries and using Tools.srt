1
00:00:07,470 --> 00:00:11,910
Throughout this whole course we've talked about some debugging techniques that you can use when developing

2
00:00:11,910 --> 00:00:17,790
plugins and themes for example using the developer tools or dumping out data or just searching through

3
00:00:17,790 --> 00:00:20,100
the code to understand how it works.

4
00:00:20,100 --> 00:00:24,510
We've also turned on debug mode inside the WordPress config file.

5
00:00:24,510 --> 00:00:29,090
There are hundreds of debugging tools available and a lot of it tends to be preference.

6
00:00:29,100 --> 00:00:33,780
Some tools require that you make some modifications and others are just plug and play.

7
00:00:33,930 --> 00:00:38,750
In this lecture we're going to explore certain techniques and tools that can be useful for plugging

8
00:00:38,750 --> 00:00:40,460
in theme development.

9
00:00:40,470 --> 00:00:44,640
One thing you may have noticed is that WordPress heavily relies on hooks.

10
00:00:44,640 --> 00:00:48,930
It's how you get anything done in WordPress the hook system is extremely old.

11
00:00:49,230 --> 00:00:52,770
It's been around for over a decade now since its inception.

12
00:00:52,770 --> 00:00:56,620
It has grown to contain more information than most people would assume.

13
00:00:56,820 --> 00:01:01,380
Open the index template add some p p tags anywhere in the template.

14
00:01:01,380 --> 00:01:02,790
It doesn't matter.

15
00:01:02,790 --> 00:01:09,000
All action and filter hooks that have been registered are stored in a global variable called WP filter.

16
00:01:09,000 --> 00:01:12,650
I'm going to dump out the contents of this array and form out the results a bit

17
00:01:20,990 --> 00:01:22,420
refresh the home page.

18
00:01:22,490 --> 00:01:26,090
You'll notice the page may take a little longer than usual to load.

19
00:01:26,090 --> 00:01:32,080
There's a good reason for this once your page is finished loading you'll have this big array being loaded

20
00:01:32,080 --> 00:01:34,190
with nested objects and arrays.

21
00:01:34,210 --> 00:01:36,040
Some of these hooks belong to you.

22
00:01:36,100 --> 00:01:40,200
Others to other plugins and the rest belonging to the word press corps itself.

23
00:01:40,360 --> 00:01:43,590
As you can see a lot takes place behind the scenes.

24
00:01:43,630 --> 00:01:47,950
There is a lot of information here so let's just take a look at one hook.

25
00:01:48,010 --> 00:01:49,810
Go back to the index template.

26
00:01:49,930 --> 00:01:57,420
We're going to modify this dump by checking out a certain hook called WP underscore footer.

27
00:01:57,570 --> 00:02:02,820
We haven't used this action hook before but it's called when the footer of our site is loaded.

28
00:02:02,820 --> 00:02:07,970
Refresh the page and you should see all the functions and data related to this hook.

29
00:02:07,980 --> 00:02:10,460
This is a great way to debug your code.

30
00:02:10,500 --> 00:02:16,720
I find myself doing this for one of two reasons I like to check if my register to hooks are being registered.

31
00:02:16,770 --> 00:02:22,740
I can even check the priority and determine a good priority without having to guess another use is to

32
00:02:22,740 --> 00:02:28,200
check what functions are running from other plugins are really good example would be when we were discussing

33
00:02:28,200 --> 00:02:29,770
how well commerce works.

34
00:02:29,820 --> 00:02:35,490
If you can recall we would go through the template files and read any do action functions and read the

35
00:02:35,490 --> 00:02:36,930
comments above.

36
00:02:37,050 --> 00:02:41,680
Even though Wu commerce provided that useful information not all plugins do that.

37
00:02:41,730 --> 00:02:47,240
Luckily if you have an editor like Visual Studio code you can find functions pretty fast.

38
00:02:47,250 --> 00:02:52,860
However if you don't have visual studio code then the next best thing to do would be to echo out the

39
00:02:52,860 --> 00:02:59,400
contents of the WP filter variable and check out what functions are being called along with their priority.

40
00:02:59,430 --> 00:03:02,610
You could then remove it and even replace them afterwards.

41
00:03:02,790 --> 00:03:07,980
Before we move further you should know that you can dump out the contents of an object or an array by

42
00:03:08,040 --> 00:03:13,650
also using the function print are the difference between prints are and var dump functions.

43
00:03:13,650 --> 00:03:18,020
Is that the VAR dump function will usually output a little more information.

44
00:03:18,030 --> 00:03:22,090
However this can be hard to read especially if you're a beginner.

45
00:03:22,170 --> 00:03:27,660
The prince our function will output a decent amount of information and it's more readable in the end

46
00:03:27,780 --> 00:03:28,900
its preference.

47
00:03:28,920 --> 00:03:32,740
I'm going to use the print R function for the rest of this lecture.

48
00:03:33,030 --> 00:03:39,480
All right the next set of data we can examine is the database queries executed to view all the queries

49
00:03:39,510 --> 00:03:40,170
executed.

50
00:03:40,170 --> 00:03:43,680
We have to modify the WP dash config file.

51
00:03:43,680 --> 00:03:48,420
Open this file and add a new constant called Save queries and set it to true

52
00:03:53,520 --> 00:03:55,080
by defining this constant.

53
00:03:55,110 --> 00:04:00,540
You're telling WordPress that you would like to save all sequel queries made by plugins themes and the

54
00:04:00,540 --> 00:04:07,830
core itself to view the queries go back to the index template and add the global variable WP DV.

55
00:04:07,830 --> 00:04:11,540
This time we're going to dump out the property queries from this object

56
00:04:15,050 --> 00:04:18,810
this property will store an array of all the queries made this far.

57
00:04:18,950 --> 00:04:26,720
Save your changes and then refresh the page if you examine the array of queries you'll notice a pattern.

58
00:04:26,850 --> 00:04:31,440
Each item in the array has the query itself the time it took to execute the query.

59
00:04:31,440 --> 00:04:35,460
And lastly the files that led up to this query being executed.

60
00:04:35,460 --> 00:04:40,440
You should keep in mind that this will only store the queries that have been executed thus far.

61
00:04:40,440 --> 00:04:46,470
We added this bit of code at the top of the file so if any queries are executed after dumping up the

62
00:04:46,470 --> 00:04:51,030
contents then those queries will be added at those times to prove this.

63
00:04:51,030 --> 00:04:53,570
Take a look at the number of queries executed.

64
00:04:53,610 --> 00:04:58,530
It's around 50 then I want you to move this bit of code to the very bottom of the template

65
00:05:02,880 --> 00:05:07,530
if you refresh the page you'll notice the number of queries executed has risen.

66
00:05:07,530 --> 00:05:12,840
One of the things I love about this array is that you really get to understand how queries are structured

67
00:05:13,320 --> 00:05:14,670
throughout most of this course.

68
00:05:14,670 --> 00:05:19,490
You use functions to take care of updating and retrieving data from the database.

69
00:05:19,680 --> 00:05:22,100
You can take these queries and learn from them.

70
00:05:22,140 --> 00:05:23,940
You can even use them in your own code.

71
00:05:24,300 --> 00:05:27,000
I want to test out one of these queries.

72
00:05:27,090 --> 00:05:31,320
I'm going to copy one of these queries and then I'm going to open up Heidi Eskew El

73
00:05:37,550 --> 00:05:43,310
with your database selected you can select this tab called query and paste in the query inside the text

74
00:05:43,310 --> 00:05:43,990
box.

75
00:05:44,150 --> 00:05:49,130
Then you can click the run button which is this blue arrow and you'll find the results from the query

76
00:05:49,130 --> 00:05:50,730
output below.

77
00:05:50,750 --> 00:05:52,770
This is so useful for debugging.

78
00:05:52,910 --> 00:05:57,730
However it's kind of messy to constantly make these changes throughout your files.

79
00:05:57,740 --> 00:06:02,090
Luckily there's a tool that will help us examine and debug WordPress.

80
00:06:02,120 --> 00:06:03,950
I'm going to remove the code we added

81
00:06:06,910 --> 00:06:12,910
go to the admin dashboard and navigate to plugins add new I want you to search for the plugin query

82
00:06:12,910 --> 00:06:15,200
monitor install and activate it

83
00:06:21,550 --> 00:06:22,590
after installing it.

84
00:06:22,600 --> 00:06:26,010
You'll find a new menu item on top by clicking on this.

85
00:06:26,020 --> 00:06:31,030
You'll be taken to the part of the page where you can view everything executed so far.

86
00:06:31,030 --> 00:06:34,890
This plugin will log and display everything executed on any page.

87
00:06:34,900 --> 00:06:41,530
If I go to the front end and check this again you'll see a list of all hooks queries scripts styles

88
00:06:41,740 --> 00:06:44,350
a GDP requests and so much more.

89
00:06:44,530 --> 00:06:49,990
Everything that WordPress does is logged by this plugin and is neatly formatted for you to read for

90
00:06:49,990 --> 00:06:51,080
obvious reasons.

91
00:06:51,130 --> 00:06:57,010
You should only use this plugin for development only this plugin is incredibly useful and I'm sure you

92
00:06:57,010 --> 00:07:00,040
would benefit from using it before going on this lecture.

93
00:07:00,070 --> 00:07:03,640
I want you to check out this link in the resource section of this lecture.

94
00:07:03,670 --> 00:07:07,160
The page goes over some tips and tricks for debugging WordPress.

95
00:07:07,180 --> 00:07:11,380
Scroll down to the bottom to view some more examples as you can see.

96
00:07:11,440 --> 00:07:16,630
You have the ability to enable logging which will create a file that you can read to view any errors

97
00:07:16,660 --> 00:07:19,140
or warnings that may run behind the scenes.

98
00:07:19,150 --> 00:07:23,890
You're also allowed to load the debug versions of certain WordPress core scripts.

99
00:07:23,890 --> 00:07:28,390
Lastly you'll find information about useful debugging WordPress plugins.

100
00:07:28,390 --> 00:07:31,880
We won't be going over them but you're more than free to check them out.

101
00:07:32,020 --> 00:07:38,320
The debug bar and logging plugins are incredibly useful and are just as easy to use as the query monitor

102
00:07:38,320 --> 00:07:38,740
plugin.
