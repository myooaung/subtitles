WEBVTT
1
00:00:07.440 --> 00:00:10.090
I'm now logged back in as the admin user.

2
00:00:10.140 --> 00:00:16.410
If you haven't already do the same in this lecture we're going to talk about taxonomy as taxonomy is

3
00:00:16.440 --> 00:00:18.780
is a very simple concept to understand.

4
00:00:18.870 --> 00:00:25.380
But under the hood it's very complex a taxonomy is just a word or phrase that is associated with the

5
00:00:25.380 --> 00:00:26.280
post.

6
00:00:26.280 --> 00:00:31.210
WordPress provides two built in taxonomy is called tags and categories.

7
00:00:31.290 --> 00:00:36.300
If you think about it those two taxonomy is make it easier to group posts together.

8
00:00:36.300 --> 00:00:41.640
For example if you owned a music site and you wanted to assign a post to the genre rock then you would

9
00:00:41.640 --> 00:00:43.000
use the category.

10
00:00:43.080 --> 00:00:48.930
By doing this you could filter posts associated with certain genres in the resource section of this

11
00:00:48.930 --> 00:00:55.140
lecture I provide a link to learn more about taxonomy is taxonomy as can make it easier to manage and

12
00:00:55.140 --> 00:00:56.400
filter posts.

13
00:00:56.430 --> 00:01:03.090
The concept behind taxonomy is is very simple but WordPress does a lot of work behind the scenes to

14
00:01:03.090 --> 00:01:05.490
better understand how much WordPress is doing.

15
00:01:05.490 --> 00:01:08.550
Let's take a look at a database diagram.

16
00:01:08.550 --> 00:01:16.140
WordPress creates three tables just for managing taxonomy is let's break down each table WP underscore

17
00:01:16.140 --> 00:01:24.360
terms stores all of your taxonomy terms WP underscore term underscore taxonomy defines what taxonomy

18
00:01:24.390 --> 00:01:31.590
each term belongs to WP underscore term underscore relationships a cross reference table that joins

19
00:01:31.590 --> 00:01:34.440
taxonomy terms with your content.

20
00:01:34.440 --> 00:01:40.410
Each of these tables play a significant role when it comes to taxonomy is to show you how complex things

21
00:01:40.410 --> 00:01:41.100
can get.

22
00:01:41.100 --> 00:01:46.470
Here is what a sequel query might look like when you want to grab all the posts and their taxonomy is

23
00:01:46.800 --> 00:01:47.690
as you can see.

24
00:01:47.760 --> 00:01:51.920
You have to make a lot of joints just to grab something so simple.

25
00:01:51.990 --> 00:01:57.120
Luckily you don't have to deal with this kind of stuff as WordPress has a lot of built in functions

26
00:01:57.120 --> 00:01:59.610
that will handle all this workload for you.

27
00:01:59.610 --> 00:02:02.670
An example would be the WP query class.

28
00:02:02.670 --> 00:02:08.820
This class has quite a few options for grabbing posts with taxonomy as if you can recall we grabbed

29
00:02:08.820 --> 00:02:14.550
posts related to a single post based on a category and displayed them right below the content.

30
00:02:14.550 --> 00:02:17.880
This is an example of us using a taxonomy.

31
00:02:17.880 --> 00:02:20.830
It's even easy to create our own taxonomy.

32
00:02:20.850 --> 00:02:23.370
Let's do that now for our recipes.

33
00:02:23.400 --> 00:02:27.330
I want to create a taxonomy for the origin of a recipe.

34
00:02:27.360 --> 00:02:32.290
Many recipes can come from Italy or France or any other country you can think of.

35
00:02:32.430 --> 00:02:39.780
So it would be a good idea to use a taxonomy to group recipes together based on their origin to register

36
00:02:39.810 --> 00:02:40.860
a taxonomy.

37
00:02:40.860 --> 00:02:43.920
You have to use the function register taxonomy.

38
00:02:43.920 --> 00:02:48.770
This function must be called Inside the init hook but we already have something like that.

39
00:02:48.990 --> 00:02:54.620
So let's open the init up BHP file now right after creating the post type.

40
00:02:54.630 --> 00:03:00.410
Let's call this function this function has three parameters.

41
00:03:00.410 --> 00:03:05.410
The first parameter is the name of this taxonomy in the resource section of this lecture.

42
00:03:05.420 --> 00:03:07.430
I provide a link to this function.

43
00:03:07.550 --> 00:03:12.920
If you scroll down to the list of parameters you'll find that WordPress provides some information about

44
00:03:12.920 --> 00:03:14.180
this parameter.

45
00:03:14.390 --> 00:03:20.330
The name of the taxonomy names should only contain lowercase letters and the underscore character and

46
00:03:20.330 --> 00:03:23.240
not be more than thirty two characters long.

47
00:03:23.270 --> 00:03:26.150
Let's keep it simple and name this taxonomy origin.

48
00:03:28.570 --> 00:03:33.430
The second parameter is what post type will this taxonomy be associated with.

49
00:03:33.430 --> 00:03:37.400
I want this taxonomy to only belong to the recipe post type.

50
00:03:37.540 --> 00:03:41.800
So pass that in like so the last parameter is an array of arguments.

51
00:03:41.800 --> 00:03:43.270
We can set.

52
00:03:43.270 --> 00:03:47.530
If you look at the documentation you'll notice we can set a number of things.

53
00:03:47.620 --> 00:03:49.370
Let's pass in an array.

54
00:03:49.390 --> 00:03:55.090
There are only three things I'm going to set a lot of the default settings are fine the way they are.

55
00:03:55.270 --> 00:03:58.210
I want to set the label to Origin.

56
00:03:58.270 --> 00:04:02.140
I'll make this string translatable.

57
00:04:02.270 --> 00:04:05.060
The next thing I want to set is the rewrite rule.

58
00:04:05.060 --> 00:04:07.310
I want the slug to be origin

59
00:04:12.840 --> 00:04:16.320
the last thing I want to set is the show in rest option.

60
00:04:16.320 --> 00:04:19.580
This should be true.

61
00:04:19.620 --> 00:04:20.970
This is important to set.

62
00:04:20.970 --> 00:04:26.700
If you're using Gutenberg the Gutenberg editor uses an API called the rest api.

63
00:04:26.700 --> 00:04:27.710
This is an API.

64
00:04:27.720 --> 00:04:30.210
We haven't been able to go over in depth.

65
00:04:30.210 --> 00:04:34.320
It basically allows WordPress to update the database through requests.

66
00:04:34.380 --> 00:04:37.420
We'll explore the rest api in a later lecture.

67
00:04:37.440 --> 00:04:43.110
Just know for now that it's necessary for custom taxonomy to work in the Gutenberg editor.

68
00:04:43.110 --> 00:04:49.110
These are the only things I want to set save your changes and navigate to the admin dashboard.

69
00:04:49.100 --> 00:04:55.380
Right under the recipes manual you'll find a new sub menu called origin click on this and you'll find

70
00:04:55.380 --> 00:05:01.710
that WordPress generates a UI for you to manage these taxonomy as if you were to create a new recipe

71
00:05:01.710 --> 00:05:03.270
or edit an existing one.

72
00:05:03.270 --> 00:05:09.160
You'll find a panel on the sidebar that lets you manage the origin taxonomy for this particular post.

73
00:05:09.300 --> 00:05:14.940
As you can see WordPress does a lot under the hood for you already when it comes to taxonomy is.
