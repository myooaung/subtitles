WEBVTT
1
00:00:08.290 --> 00:00:13.030
In this lecture we're going to explore some more templates to get a better feel on how Woo commerce

2
00:00:13.030 --> 00:00:14.240
manages things.

3
00:00:14.290 --> 00:00:17.060
Right now I'm looking at the cart page.

4
00:00:17.110 --> 00:00:19.040
I've added one item to the cart.

5
00:00:19.060 --> 00:00:20.950
There is one noticeable problem.

6
00:00:20.950 --> 00:00:23.630
The checkout button is being spaced improperly.

7
00:00:24.010 --> 00:00:30.790
Unlike last time we can't really change this through P2P code but it's more of a CSX and HCM mail problem.

8
00:00:30.790 --> 00:00:33.370
So we'll have to adjust the templates themselves.

9
00:00:33.730 --> 00:00:34.930
It's rather simple.

10
00:00:34.930 --> 00:00:40.750
Unlike the product page the cart is just made up of template parts so we don't have to worry about every

11
00:00:40.750 --> 00:00:42.880
single little thing like last time.

12
00:00:43.060 --> 00:00:46.970
All cart related simpler parts are placed inside the cart folder.

13
00:00:47.080 --> 00:00:51.760
I'm going to copy this folder from the plug in into our themes Woo commerce folder like so

14
00:00:58.980 --> 00:01:01.600
I'm going to delete all the files except for the.

15
00:01:01.620 --> 00:01:07.400
Proceed to checkout buttoned button P HP template file.

16
00:01:07.470 --> 00:01:12.130
This is the file that will require some modifications to come to this conclusion.

17
00:01:12.150 --> 00:01:13.390
I just did the usual.

18
00:01:13.500 --> 00:01:18.840
I studied the female code and searched through every file until I was able to determine which files

19
00:01:18.840 --> 00:01:19.530
to modify.

20
00:01:20.130 --> 00:01:22.370
It's pretty simple if you open up the template.

21
00:01:22.410 --> 00:01:24.900
It's just this button by itself.

22
00:01:24.900 --> 00:01:31.650
I'm going to modify the class and replace it with the following values Beatty in Beattie and dash block

23
00:01:31.710 --> 00:01:37.370
Beatty and dash L.D. Beatty and dash primary.

24
00:01:37.400 --> 00:01:39.860
This will make the button spaced out evenly.

25
00:01:39.860 --> 00:01:43.300
The button won't be purple anymore but that's fine with me.

26
00:01:43.370 --> 00:01:45.110
That's it for the card template.

27
00:01:45.110 --> 00:01:49.680
Even though the card template has so much more it's basically repeating the same thing.

28
00:01:49.760 --> 00:01:51.960
I'll talk more about that in just a moment.

29
00:01:51.980 --> 00:01:54.070
Let's explore some more templates.

30
00:01:54.200 --> 00:01:59.570
There's a possibility you may want to change the email templates well commerce will send out an email

31
00:01:59.570 --> 00:02:04.740
whenever an action occurs such as a password reset or a new order has been placed.

32
00:02:04.760 --> 00:02:10.970
If you were to go to the admin dashboard and navigate to woo commerce settings emails you'll find all

33
00:02:10.970 --> 00:02:12.290
the templates that are sent out

34
00:02:15.490 --> 00:02:17.210
below you'll see some settings.

35
00:02:17.260 --> 00:02:22.030
If you were to click on a certain email you'll be taken to a page where you can configure the settings

36
00:02:22.030 --> 00:02:22.930
even more.

37
00:02:22.990 --> 00:02:28.270
What you can't do is modify the HDMI all if you want to modify the H2 UML.

38
00:02:28.330 --> 00:02:30.840
Then you'll have to override the email templates.

39
00:02:30.940 --> 00:02:33.280
You can find those inside the email folder

40
00:02:36.050 --> 00:02:37.060
just like last time.

41
00:02:37.070 --> 00:02:41.840
You would simply copy and paste it from the plugin folder to your themes folder in their respective

42
00:02:41.840 --> 00:02:43.040
location.

43
00:02:43.040 --> 00:02:46.490
I'm not going to do this as I'm fine with the e-mail templates.

44
00:02:46.490 --> 00:02:51.870
However testing out email templates is a problem especially with our development environment.

45
00:02:52.070 --> 00:02:57.350
In order to view an email template you will have to receive an email which usually isn't possible on

46
00:02:57.350 --> 00:02:58.590
a local environment.

47
00:02:58.760 --> 00:03:03.940
Of course you can set up an S.M. T.P. server but that's beyond the scope of this course.

48
00:03:03.950 --> 00:03:05.730
It's also a bit complicated.

49
00:03:05.750 --> 00:03:11.540
The next best thing is to test it out on a live host but that can cost money and it takes too long.

50
00:03:11.540 --> 00:03:14.480
Luckily someone made a very simple solution.

51
00:03:14.600 --> 00:03:21.110
Go to the admin dashboard and navigate to plugins add new search for the plugin Woo commerce email test

52
00:03:21.110 --> 00:03:24.020
by Razer web install and activate this plugin

53
00:03:30.500 --> 00:03:32.180
before we can test this plugin.

54
00:03:32.210 --> 00:03:34.130
You may need to create an order.

55
00:03:34.280 --> 00:03:39.280
Simply go to do commerce orders add new and just fill in some dummy data.

56
00:03:39.320 --> 00:03:42.360
I'm going to pause the video and add an order really quick.

57
00:03:42.500 --> 00:03:45.530
Once you filled in some data submitted.

58
00:03:45.740 --> 00:03:49.670
Now we can test the email templates under the commerce menu.

59
00:03:49.670 --> 00:03:54.330
The plugin and we just installed will generate a new sub menu called email test.

60
00:03:54.350 --> 00:03:56.290
Let's check this menu item out.

61
00:03:56.360 --> 00:03:59.090
You'll be taken to a very simple interface.

62
00:03:59.120 --> 00:04:02.390
I'm going to select the order we just created and save it.

63
00:04:02.390 --> 00:04:05.690
Then I'm going to click on the completed order button below

64
00:04:08.430 --> 00:04:12.730
here is what one of the templates would look like if a user opens it in their inbox.

65
00:04:12.730 --> 00:04:17.800
This is a great way to test your templates on a local server without the need for a life server.

66
00:04:17.800 --> 00:04:20.570
I'm going to do something you should never do.

67
00:04:20.650 --> 00:04:24.280
I'm going to open this template from the Wu commerce plugin folder.

68
00:04:24.280 --> 00:04:31.500
The completed order template is the customer completed order dot page 3 file.

69
00:04:31.640 --> 00:04:36.560
I'm going to make a simple modification I'm going to output the text test.

70
00:04:36.710 --> 00:04:42.110
You never want to modify a template inside the Wu commerce plug in as any changes you can make can be

71
00:04:42.110 --> 00:04:43.520
overwritten after an update.

72
00:04:44.120 --> 00:04:46.490
However this is just for an example.

73
00:04:46.490 --> 00:04:49.680
After making this change I'm going to refresh the page.

74
00:04:49.730 --> 00:04:51.850
The text should now be output.

75
00:04:52.310 --> 00:04:59.840
I'm going to remove my changes so that's how you would go about making changes to the email templates

76
00:04:59.870 --> 00:05:01.670
and how to test them.

77
00:05:01.670 --> 00:05:03.980
All right let's move on to something else.

78
00:05:03.980 --> 00:05:09.230
In some situations you won't be able to make changes to the Template themselves even if it may seem

79
00:05:09.230 --> 00:05:09.990
like it.

80
00:05:10.010 --> 00:05:15.530
For example if I were to go to my cart and press checkout I'll be taken to this form to fill out my

81
00:05:15.530 --> 00:05:17.510
billing and shipping details.

82
00:05:17.510 --> 00:05:21.020
A lot of the T email here is broken in addition to this.

83
00:05:21.080 --> 00:05:26.810
You may want to have extra fields or remove some fields you will not be able to modify these fields

84
00:05:26.840 --> 00:05:27.920
through a template.

85
00:05:27.920 --> 00:05:34.660
You'll have to use hooks will tackle both problems first let's fix the formatting issue we have here.

86
00:05:34.850 --> 00:05:38.320
I'm going to inspect the form inside this form.

87
00:05:38.330 --> 00:05:43.790
There is one div tag with the class called to set inside this div tag.

88
00:05:43.790 --> 00:05:47.530
We have two more additional tags with the classes call 1.

89
00:05:47.600 --> 00:05:53.960
The reason the fields are getting squished together is because these two div tags have the call 1 class.

90
00:05:53.960 --> 00:05:58.970
The call 1 class is a bootstrap class that will make an element have a certain width.

91
00:05:59.120 --> 00:06:04.580
If we were to look to the right you'll see that both bootstrap and Wu commerce tried to apply stylings

92
00:06:04.580 --> 00:06:06.100
that conflict with each other.

93
00:06:06.350 --> 00:06:12.230
What commerce is attempting to do is make two columns that are about 50 percent in width.

94
00:06:12.230 --> 00:06:15.290
Now the question is how do we go about attempting this.

95
00:06:15.290 --> 00:06:19.700
Well instead of letting Wu commerce set the whip we'll let bootstrap do that.

96
00:06:19.760 --> 00:06:23.150
We'll have to change the classes used in order to do that.

97
00:06:23.210 --> 00:06:25.770
We'll need to modify the template ourselves.

98
00:06:25.790 --> 00:06:31.040
We already know what classes and a team out to look for the next step is to find the template with the

99
00:06:31.040 --> 00:06:32.800
same HDMI out.

100
00:06:32.840 --> 00:06:38.360
I've already gone ahead and found the template we'll need to make changes to open the checkout slash

101
00:06:38.360 --> 00:06:46.960
form checkout dot P HP template you'll find the div tags with the call 1 classes and the form wrapped

102
00:06:46.960 --> 00:06:47.850
around it.

103
00:06:47.860 --> 00:06:49.900
This is the template we want to modify.

104
00:06:50.350 --> 00:06:55.930
I'm going to copy this file and paste it over to our theme make sure it's placed inside the checkout

105
00:06:55.930 --> 00:07:03.050
directory.

106
00:07:03.140 --> 00:07:05.650
Now we'll just have to make a few adjustments.

107
00:07:05.660 --> 00:07:11.510
First we're going to end the row class to the div tag with the I.D. of customer details

108
00:07:14.160 --> 00:07:20.040
then we're going to change the to enter div tag classes from a call 1 to call 6

109
00:07:22.770 --> 00:07:23.830
the row class.

110
00:07:23.850 --> 00:07:30.180
I'm adding here we'll help bootstrap make sure the two columns fit nicely side by side on multiple resolutions.

111
00:07:30.180 --> 00:07:32.100
Go ahead and refresh the page.

112
00:07:32.100 --> 00:07:33.780
Everything should look nicer now.

113
00:07:33.840 --> 00:07:37.640
The next step is to fix the stylings for the input fields.

114
00:07:37.650 --> 00:07:43.290
Unfortunately if you look at the template you'll notice the individual fields aren't directly generated

115
00:07:43.290 --> 00:07:44.030
here.

116
00:07:44.040 --> 00:07:47.960
Instead they're created dynamically through functions and hooks.

117
00:07:48.060 --> 00:07:52.800
Therefore we'll need to dive into some HP code to accomplish this.

118
00:07:52.830 --> 00:07:57.420
There's already a plugin that does this already but it's always good to understand how these things

119
00:07:57.420 --> 00:08:01.080
work under the hood before you can fully appreciate a plugin.

120
00:08:01.080 --> 00:08:05.880
First we'll need to study the H email to find the correct template to modify.

121
00:08:05.880 --> 00:08:07.580
I've already done this for you.

122
00:08:07.650 --> 00:08:14.340
That template can be found inside the checkout slash form billing copy HP file all the billing form

123
00:08:14.340 --> 00:08:17.470
fields can be found inside the div tag with the class.

124
00:08:17.520 --> 00:08:20.220
Commerce billing fields field wrapper.

125
00:08:20.220 --> 00:08:23.230
Inside this element we have a loop being performed.

126
00:08:23.280 --> 00:08:29.240
Let's break this down line by line the first line here is creating a variable called fields.

127
00:08:29.280 --> 00:08:31.830
Its value is the value returned by the function.

128
00:08:31.830 --> 00:08:33.760
Get check out fields.

129
00:08:33.810 --> 00:08:38.220
This function will return all the fields required for the user to check out.

130
00:08:38.220 --> 00:08:43.070
This will allow for third party plugins to add additional fields if need be.

131
00:08:43.170 --> 00:08:44.280
Right after this.

132
00:08:44.280 --> 00:08:47.720
Each field is loop through using a for each loop.

133
00:08:47.850 --> 00:08:50.810
What we want to focus on is the call to the function.

134
00:08:50.910 --> 00:08:52.590
Commerce form fields.

135
00:08:52.590 --> 00:08:56.660
This function is what we'll take care of generating the input field itself.

136
00:08:56.700 --> 00:09:01.630
We can even check the documentation for this function in the resource section of this lecture.

137
00:09:01.650 --> 00:09:03.210
I provide a link to this function.

138
00:09:03.780 --> 00:09:10.970
Here's what it says outputs a checkout address form field a simple to understand function but not much

139
00:09:10.980 --> 00:09:12.870
documentation is provided.

140
00:09:12.900 --> 00:09:13.710
That's fine.

141
00:09:13.710 --> 00:09:19.080
We can just inspect the code on this page you can click this link to where the function is located at.

142
00:09:19.410 --> 00:09:20.850
Let's go there.

143
00:09:20.900 --> 00:09:25.710
There is quite a bit of code going on here but we don't need to examine much of it to understand what's

144
00:09:25.710 --> 00:09:27.390
going on right away.

145
00:09:27.390 --> 00:09:30.690
You'll notice a variable called defaults is being created.

146
00:09:30.860 --> 00:09:33.030
You don't contain default values for the field.

147
00:09:33.030 --> 00:09:38.280
If they weren't created three of these default settings have the keyword class in them.

148
00:09:38.280 --> 00:09:42.440
We can assume that these have to do with where the classes will be applied.

149
00:09:42.450 --> 00:09:47.550
I've already dug into the code and can't confirm they do indeed get applied as classes two elements

150
00:09:47.820 --> 00:09:53.700
the class key gets applied to the element that is wrapped around each input field the label class key

151
00:09:53.700 --> 00:09:59.460
is the class applied to the label the input class key is the class that gets applied to the input field

152
00:09:59.460 --> 00:10:00.690
itself.

153
00:10:00.810 --> 00:10:03.210
These are the keys that will want to modify.

154
00:10:03.240 --> 00:10:06.100
Now we have to figure out how to pass in the values.

155
00:10:06.210 --> 00:10:12.390
Taking a closer look we can see that the default array gets merged with another variable called args

156
00:10:12.720 --> 00:10:17.080
args is the variable that's passed into the function as the second parameter.

157
00:10:17.100 --> 00:10:22.350
We just need to modify the second parameter of this function back inside the template.

158
00:10:22.350 --> 00:10:26.660
The field variable is what's passed as the second argument to the function.

159
00:10:26.790 --> 00:10:30.160
We'll just need to modify this variable before we do that.

160
00:10:30.210 --> 00:10:34.340
We should copy this template over to our theme since we'll be making changes.

161
00:10:34.380 --> 00:10:37.590
Copy this file over to our theme in the respective directory

162
00:10:40.350 --> 00:10:44.560
next let's modifying the class key and set it to an array.

163
00:10:44.580 --> 00:10:47.010
The value should be an array of classes.

164
00:10:47.010 --> 00:10:50.100
We only need to add one class which is form group

165
00:10:56.740 --> 00:10:59.470
the next key to set is the input class.

166
00:10:59.470 --> 00:11:01.700
This will also be an array of classes.

167
00:11:01.720 --> 00:11:07.390
The only class we'll pass in is form control.

168
00:11:07.410 --> 00:11:10.240
You may be curious as to how I got these classes.

169
00:11:10.260 --> 00:11:16.830
These are bootstrap classes bootstrap structures its form in a similar way to commerce you create a

170
00:11:16.830 --> 00:11:22.140
tag that wraps around the input field the element that gets wrapped around the input field needs to

171
00:11:22.140 --> 00:11:28.530
have the class form group apply to it the input field itself should have the form control class applied

172
00:11:28.530 --> 00:11:29.110
to it.

173
00:11:29.220 --> 00:11:33.950
You can read up on the bootstrap documentation for more info on these classes.

174
00:11:33.990 --> 00:11:35.970
That's all the changes will need to make.

175
00:11:36.060 --> 00:11:38.520
Let's refresh the page and see what we get.

176
00:11:38.730 --> 00:11:41.220
The input field should now look better than before

177
00:11:45.590 --> 00:11:49.580
so we've basically gone over the many ways to modify a template.

178
00:11:49.580 --> 00:11:55.130
You could use either hooks or modify the template itself by copying it over from the plug into your

179
00:11:55.130 --> 00:12:00.170
theme folder before we end this lecture I want to provide one extra tip.

180
00:12:00.230 --> 00:12:03.290
Sometimes you want to display products your own way.

181
00:12:03.290 --> 00:12:09.620
In most cases you'll want to add more options to the way products or sorted and filtered in cases like

182
00:12:09.620 --> 00:12:10.170
these.

183
00:12:10.220 --> 00:12:14.900
You'll most likely want to remove the default sorting option provided by Wu commerce.

184
00:12:14.990 --> 00:12:18.470
Go to the shop page to see what that looks like.

185
00:12:18.490 --> 00:12:24.310
There are dozens of plugins that will remove this dropdown for you but let's do it manually removing

186
00:12:24.310 --> 00:12:26.790
this isn't anything we haven't done before.

187
00:12:26.920 --> 00:12:32.680
We already know that this page is generated using the archive dash product dot page template.

188
00:12:32.680 --> 00:12:40.680
I'm going to open up this template inside this template you'll eventually find a call to the do action

189
00:12:40.680 --> 00:12:43.170
function called Woo Commerce before shop.

190
00:12:43.170 --> 00:12:49.530
Loop right above you'll find this comment for the functions will Commerce calls we already went over

191
00:12:49.530 --> 00:12:52.050
how you would go about verifying all of this.

192
00:12:52.170 --> 00:12:56.400
So we'll just take the comments word for it inside the function's file.

193
00:12:56.460 --> 00:13:01.260
I'm going to call the remove action function and just pass in the info accordingly.

194
00:13:01.260 --> 00:13:04.320
Using the info from the world commerce comment like some

195
00:13:13.350 --> 00:13:15.210
refresh the page to check.

196
00:13:15.210 --> 00:13:17.340
Just like that the sorting is gone.

197
00:13:17.340 --> 00:13:23.120
Nothing really new here but I just wanted to show you this as it's something I find myself doing often.
