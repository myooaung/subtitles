1
00:00:07,530 --> 00:00:12,720
In the last three lectures we took a look at how to register and authenticate users manually.

2
00:00:12,720 --> 00:00:15,960
We took care of submitting and processing the request.

3
00:00:15,960 --> 00:00:21,570
We also took care of error handling and redirecting the user if the authentication was a success.

4
00:00:21,600 --> 00:00:26,720
In this lecture we're going to take a look at an alternative method for authenticating the user.

5
00:00:26,940 --> 00:00:31,440
Previously we only use the functions WordPress provides to handle the logging.

6
00:00:31,530 --> 00:00:35,980
However WordPress provides a couple of files for handling the logic for us.

7
00:00:36,000 --> 00:00:41,430
This process is a bit more limited and harder but we get the advantage of letting WordPress handle the

8
00:00:41,430 --> 00:00:43,030
logic for us.

9
00:00:43,080 --> 00:00:47,380
The original WordPress logon page can be used to authenticate the users.

10
00:00:47,490 --> 00:00:50,430
We can hook into this system and use it to our advantage.

11
00:00:50,940 --> 00:00:52,460
So let's get started.

12
00:00:52,530 --> 00:00:58,260
The very first thing we need to do is create the short code inside the main plugin file under the short

13
00:00:58,260 --> 00:00:59,400
code section.

14
00:00:59,400 --> 00:01:06,120
Add a new short code and call it recipe off all to form the function to call will be our recipe off

15
00:01:06,210 --> 00:01:07,380
alt form short code

16
00:01:10,130 --> 00:01:11,720
after defining the short code.

17
00:01:11,750 --> 00:01:17,780
Let's define the function that will contain our short code logic inside the includes slash short codes

18
00:01:17,780 --> 00:01:23,140
folder create a file names off dash form dash all dot P HP.

19
00:01:23,150 --> 00:01:26,230
Define the function here and include it from the main plugin file

20
00:01:31,340 --> 00:01:34,760
let's add this short code to the My Account page.

21
00:01:34,760 --> 00:01:41,900
We previously named it recipe off art form so input that into the short code block and update your changes.

22
00:01:47,240 --> 00:01:51,600
Once that's been input ID log out and then navigate to the My Account page.

23
00:01:54,040 --> 00:01:58,430
I'm going to place the short code right below the forum so we can do some comparisons.

24
00:01:58,540 --> 00:02:03,850
Back inside my editor I'm going to copy the code from the original authentication short code into the

25
00:02:03,850 --> 00:02:04,270
new one

26
00:02:09,290 --> 00:02:15,050
then I'm going to get rid of most of this code except the conditional statement at top and the return

27
00:02:15,050 --> 00:02:16,080
statement.

28
00:02:16,320 --> 00:02:21,800
WordPress provides a function for generating a log in form it integrates really well with Wordpress

29
00:02:21,800 --> 00:02:23,150
as log in system.

30
00:02:23,150 --> 00:02:26,950
However it is not formatted so we'll have to take care of that quickly.

31
00:02:27,740 --> 00:02:34,880
I'm going to set the form HCM email variable to div class equals call one third no bottom margin

32
00:02:39,380 --> 00:02:43,010
then I'm going to close the div tag right before the return statement.

33
00:02:47,990 --> 00:02:51,270
We'll be placing most of our code between these two tags.

34
00:02:51,350 --> 00:02:56,840
The function that WordPress provides for generating a log in form is WP log in form.

35
00:02:56,840 --> 00:03:00,770
I'm going to append this function onto the form H2 email variable

36
00:03:03,590 --> 00:03:07,600
in the resource section of this lecture I provide a link to this function.

37
00:03:07,610 --> 00:03:12,980
This function only has one parameter and that's an array of settings we can pass in to change the output

38
00:03:13,010 --> 00:03:14,230
of the form.

39
00:03:14,240 --> 00:03:19,400
One thing I do want to highlight is that while there are quite a few parameters here the log in form

40
00:03:19,400 --> 00:03:21,040
is not that flexible.

41
00:03:21,170 --> 00:03:27,380
WordPress doesn't really provide a way to add classes or change the HCM l will just work with what we

42
00:03:27,380 --> 00:03:29,480
have back inside the editor.

43
00:03:29,480 --> 00:03:31,400
I'm going to pass in an array.

44
00:03:31,490 --> 00:03:36,090
There are only two keys I want to set the first key is the echo key.

45
00:03:36,410 --> 00:03:42,980
Since this is a short code we have to return the HDMI out the WP log in form function will output the

46
00:03:42,980 --> 00:03:47,150
form by default in order to make it return the GMO.

47
00:03:47,180 --> 00:03:53,600
We have to set this key to false the next key I want to set is the redirect key by default.

48
00:03:53,600 --> 00:03:58,520
WordPress will automatically redirect the user to the page where the form was submitted.

49
00:03:58,520 --> 00:04:02,310
It doesn't really make much sense to redirect the user back to the log page.

50
00:04:02,330 --> 00:04:08,120
If they've successfully logged in I'm going to set this to the home your URL function and I'll simply

51
00:04:08,120 --> 00:04:15,640
pass in a forward slash to indicate I want the user to land on the root you URL with all that said let's

52
00:04:15,650 --> 00:04:17,850
refresh the page and see what we get.

53
00:04:17,870 --> 00:04:21,810
WordPress generates this form for us which doesn't really look appealing.

54
00:04:21,920 --> 00:04:26,970
Like I said before the function we are using doesn't allow us to customize the HCM.

55
00:04:27,000 --> 00:04:28,880
And class is being used.

56
00:04:28,940 --> 00:04:34,070
The reason we use it is because it'll generate all the input fields required for this form to work with

57
00:04:34,070 --> 00:04:35,930
the WordPress log and flow.

58
00:04:35,930 --> 00:04:41,660
Alternatively you could just copy and paste the h t email into your short code and just modify it from

59
00:04:41,660 --> 00:04:42,340
there.

60
00:04:42,560 --> 00:04:49,550
For this course I'm just going to apply some styles to the HCM l generated inside these slash assets

61
00:04:49,580 --> 00:04:51,350
slash C Ss folder.

62
00:04:51,410 --> 00:04:58,040
You'll find a file called off dot c SS I want you to register and in Q this style sheet from the front

63
00:04:58,100 --> 00:04:59,480
and Q function.

64
00:04:59,480 --> 00:05:03,090
I'm going to do this really quickly all right.

65
00:05:03,220 --> 00:05:04,980
I just registered and in queue.

66
00:05:04,990 --> 00:05:05,890
This file.

67
00:05:06,040 --> 00:05:10,550
All I'm really doing is stretching the width so that it doesn't look so out of place.

68
00:05:10,570 --> 00:05:15,540
Refresh the page and you should see form look more formatted and improved.

69
00:05:15,580 --> 00:05:19,580
You can leave it like this as we don't really need to do anything else.

70
00:05:19,600 --> 00:05:24,100
WordPress will now handle authenticating the user and providing errors.

71
00:05:24,100 --> 00:05:27,940
There is one problem I have with this form no besides the styling.

72
00:05:27,940 --> 00:05:32,970
I'm going to empty out these fields and then submit the form after submitting the form.

73
00:05:32,980 --> 00:05:34,450
You should see an error message.

74
00:05:34,630 --> 00:05:38,350
However I'm not redirected to the My Account page.

75
00:05:38,350 --> 00:05:41,780
Instead we end up on the default WordPress log in page.

76
00:05:41,830 --> 00:05:46,440
The point of having a front end form is so that the user doesn't have to see this.

77
00:05:46,570 --> 00:05:51,490
We'll have to slightly modified the way of the authentication behaves in order to make the submission

78
00:05:51,490 --> 00:05:53,590
redirect back to the My Account page.

79
00:05:53,590 --> 00:06:01,230
If it was a failure just to save some time I'm going to paste the code inside the main plugin file I'm

80
00:06:01,270 --> 00:06:05,520
inside the main plugin file and I added in end to hooks here which are both the same.

81
00:06:06,100 --> 00:06:09,620
These hooks are actual hooks WordPress registers.

82
00:06:09,640 --> 00:06:13,400
The reason I'm adding them here is just for example purposes.

83
00:06:13,450 --> 00:06:18,970
So the name of the hook is authenticate you use this hook to check the user data.

84
00:06:18,970 --> 00:06:22,210
WordPress will register two different functions here.

85
00:06:22,300 --> 00:06:24,930
What's most important here is the priority.

86
00:06:25,000 --> 00:06:30,070
What we want to do is change the way the authentication behaves while still letting WordPress do the

87
00:06:30,070 --> 00:06:31,490
heavy lifting.

88
00:06:31,510 --> 00:06:36,970
I want my function to run after WordPress has finished processing everything and is about to redirect

89
00:06:36,970 --> 00:06:37,890
the user.

90
00:06:38,080 --> 00:06:41,320
I want my priority to be a higher number than these two.

91
00:06:41,320 --> 00:06:43,960
So my function gets executed last.

92
00:06:44,020 --> 00:06:47,230
I'm pacing in these two hooks to show you their priority.

93
00:06:47,590 --> 00:06:53,430
After these two hooks WordPress will have already executed everything and we can then take over.

94
00:06:53,500 --> 00:06:59,500
I'm going to comment these two out since WordPress already registers these two hooks doing it ourselves

95
00:06:59,500 --> 00:07:01,480
would be redundant below this.

96
00:07:01,480 --> 00:07:07,440
I'm going to add a filter hook using these same authenticate hook as above the function I want to call

97
00:07:07,440 --> 00:07:09,910
it will be called are all to authenticate

98
00:07:12,650 --> 00:07:15,170
then we must set the priority by default.

99
00:07:15,170 --> 00:07:19,750
This will be 10 but I want this to be higher than the ones WordPress registers.

100
00:07:19,790 --> 00:07:23,030
Therefore I'm going to set this to 100.

101
00:07:23,030 --> 00:07:26,840
You will also be provided with 3 values to use in the function.

102
00:07:26,840 --> 00:07:33,350
I'm going to set the fourth parameter to 3 so we can accept all three values in our function just to

103
00:07:33,350 --> 00:07:34,360
save some time.

104
00:07:34,370 --> 00:07:40,190
I'm going to define this function inside the short code file at the bottom like so the three parameters

105
00:07:40,190 --> 00:07:43,870
that are accepted are the user username and password.

106
00:07:46,660 --> 00:07:52,090
Inside this function I'm going to create a conditional statement that will check if the request method

107
00:07:52,180 --> 00:07:55,180
of the server variable is not set to post.

108
00:07:59,510 --> 00:08:03,590
If this condition passes I'm just going to return the user.

109
00:08:03,590 --> 00:08:07,030
I don't want to redirect the user if the method is not post.

110
00:08:07,160 --> 00:08:11,750
Post is usually the method that's used when processing log in data.

111
00:08:11,750 --> 00:08:18,140
Next I'm going to create another conditional statement to check if the user object has errors by passing

112
00:08:18,140 --> 00:08:20,480
it into the function is WP error

113
00:08:24,080 --> 00:08:25,460
if this returns false.

114
00:08:25,460 --> 00:08:28,740
I'm going to once again return the user object.

115
00:08:29,150 --> 00:08:34,660
If this ends up happening then that usually means the user was successfully authenticated and so there's

116
00:08:34,670 --> 00:08:37,840
no need to redirect them back to the logon page.

117
00:08:37,970 --> 00:08:42,830
If the function has made it this far then that means the log in submission has failed.

118
00:08:42,830 --> 00:08:47,340
I'm going to create a variable named error codes and set its value to the function.

119
00:08:47,360 --> 00:08:49,970
Get error codes from the user object.

120
00:08:52,390 --> 00:08:55,120
This function will return an array of error codes.

121
00:08:55,720 --> 00:09:01,180
I want to pass the error codes back to my form so that we can display the errors to the user.

122
00:09:01,180 --> 00:09:07,020
However we can't really pass an array back to the user so we'll need to convert this to a string.

123
00:09:07,090 --> 00:09:14,200
I'm going to wrap this with a function called join which will convert an array to a string.

124
00:09:14,360 --> 00:09:18,780
The first parameter to this function is the separator which will just be a comma.

125
00:09:18,830 --> 00:09:21,770
The second parameter is the array itself.

126
00:09:21,860 --> 00:09:27,020
Now that we have the error codes in string form we'll have to append it to the your bill itself that

127
00:09:27,020 --> 00:09:29,190
we want to redirect the user to.

128
00:09:29,270 --> 00:09:35,270
I'm going to create a variable named log in you are well and set its value to the home your URL function

129
00:09:35,330 --> 00:09:36,470
and passing the string.

130
00:09:36,470 --> 00:09:40,070
My dash account.

131
00:09:40,270 --> 00:09:42,470
We are manually setting the page here.

132
00:09:42,490 --> 00:09:47,110
Usually you want this to be dynamic but we'll keep things simple here for now.

133
00:09:47,110 --> 00:09:52,490
This is just an alternative example to the original authentication method we did anyway.

134
00:09:52,660 --> 00:09:59,330
I'm then going to reassign this variable to the function add query arg.

135
00:09:59,340 --> 00:10:05,250
This is a function provided by WordPress that basically accepts a U RL and will add a query to the URL

136
00:10:05,250 --> 00:10:06,270
for you.

137
00:10:06,450 --> 00:10:11,090
It will take care of making sure the euro is safe and ready to be used.

138
00:10:11,100 --> 00:10:13,640
There's three parameters for this function.

139
00:10:13,650 --> 00:10:17,420
The first parameter is the name of the query which will be log in.

140
00:10:17,580 --> 00:10:22,870
You can name this whatever you want but log in tends to be a common naming convention.

141
00:10:22,890 --> 00:10:27,150
The second parameter is the value for this query which will be the error codes.

142
00:10:27,150 --> 00:10:31,630
Lastly you just pass in the URL which would be logged in you are.

143
00:10:31,710 --> 00:10:37,260
Now we have a full you URL with the error codes you'll see what the error codes look like in just a

144
00:10:37,260 --> 00:10:38,270
moment.

145
00:10:38,280 --> 00:10:46,950
The last step is to call the WP redirect function and pass in the U or L this function will redirect

146
00:10:46,950 --> 00:10:50,850
the user to the My Account page just as an extra measure.

147
00:10:50,850 --> 00:10:56,130
I'm going to kill the script with the exit statement that should finish up our function.

148
00:10:56,130 --> 00:11:03,770
Let's refresh the page and try submitting the form with no input whatsoever.

149
00:11:03,810 --> 00:11:07,110
You should be redirected back to the page like I have.

150
00:11:07,110 --> 00:11:12,780
If you look at the URL bar you'll see the error codes appearing each error code is separated with a

151
00:11:12,780 --> 00:11:14,400
comma which is great.

152
00:11:14,400 --> 00:11:20,070
Back inside the shortcut function we can grab the error codes by creating a variable named errors and

153
00:11:20,070 --> 00:11:21,750
set it to the get variable

154
00:11:26,990 --> 00:11:27,760
by default.

155
00:11:27,770 --> 00:11:32,300
The error codes will not appear so we'll use a ternary operator here.

156
00:11:32,300 --> 00:11:35,180
I'm going to check if the get variable is set.

157
00:11:35,330 --> 00:11:38,240
If it is I'm going to set it to this variable.

158
00:11:38,240 --> 00:11:40,460
If not I'm going to set it to an array.

159
00:11:42,940 --> 00:11:48,610
Of course the get variable is a string so we'll need to convert it into an array.

160
00:11:48,640 --> 00:11:52,800
I'm going to use the function explode to convert it from a string to an array.

161
00:11:55,370 --> 00:12:01,250
The first parameter is the separator which is a comma and the second parameter is the string itself.

162
00:12:01,250 --> 00:12:03,840
Just like that we now have our error codes.

163
00:12:03,860 --> 00:12:08,210
I'm going to paste in some code here which I'll go over.

164
00:12:08,410 --> 00:12:13,050
All right so all I have here is a loop going through each error in the array.

165
00:12:13,120 --> 00:12:16,810
There are four possible error codes which are empty user name.

166
00:12:16,810 --> 00:12:21,010
Empty password invalid user name and incorrect password.

167
00:12:21,010 --> 00:12:26,740
I'm adding some messages to the form element and displaying a user friendly message to the user.

168
00:12:26,770 --> 00:12:28,380
Nothing too crazy here.

169
00:12:28,390 --> 00:12:33,090
All right let's refresh the page and you should see the 2 errors appearing here.

170
00:12:33,100 --> 00:12:37,480
I'm going to submit the form again but this time with correct credentials

171
00:12:40,030 --> 00:12:44,140
you should be logged in and redirected to the home page if it was successful.

172
00:12:44,140 --> 00:12:45,900
This is exactly what we wanted.

173
00:12:46,240 --> 00:12:49,490
So that concludes how you would authenticate a user.

174
00:12:49,540 --> 00:12:54,670
I've shown you two ways on how to do this and either one is a valid solution.

175
00:12:54,670 --> 00:13:00,380
Some developers tend to think that they have to extend everything but that's simply not true.

176
00:13:00,400 --> 00:13:06,430
You can take advantage of WordPress as core behavior and just tweak some things internally using hooks

177
00:13:06,670 --> 00:13:07,680
at the end of the day.

178
00:13:07,690 --> 00:13:09,190
It's all preference.

179
00:13:09,250 --> 00:13:11,920
I'm going to comment out the second solution.

180
00:13:11,920 --> 00:13:17,050
I usually don't recommend it because at any point WordPress could change this behavior.

181
00:13:17,050 --> 00:13:23,230
There's also a lot of plugins that alter the way wordpress logs users in it tends to be a pain to deal

182
00:13:23,230 --> 00:13:24,110
with.

183
00:13:24,130 --> 00:13:27,500
Now you may be wondering but what about user registration.

184
00:13:27,520 --> 00:13:32,710
Unfortunately WordPress doesn't provide any functions for creating a register form.

185
00:13:32,740 --> 00:13:38,640
This means you'll have to create it manually and hook it into the regular WordPress registration system.

186
00:13:38,680 --> 00:13:44,020
We won't be doing that in this course as it tends to be a long and hard process making it not worth

187
00:13:44,020 --> 00:13:44,730
it.

188
00:13:44,770 --> 00:13:47,510
However you're free to check it out yourself.

189
00:13:47,530 --> 00:13:53,440
All log in and registration is handled inside the WP dash log in copy HP file.

190
00:13:53,440 --> 00:13:57,550
Anyway I'll see you in the next lecture.
