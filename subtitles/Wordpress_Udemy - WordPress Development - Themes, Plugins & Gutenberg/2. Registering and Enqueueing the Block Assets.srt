1
00:00:07,410 --> 00:00:10,690
The next step is to register and in cue the assets.

2
00:00:10,710 --> 00:00:14,520
This will most likely be the last time you write code for a while.

3
00:00:14,760 --> 00:00:21,600
Unlike the other WordPress API is Gutenberg is mostly written in Javascript custom blocks are also written

4
00:00:21,600 --> 00:00:23,030
in Javascript.

5
00:00:23,070 --> 00:00:28,940
There are some exceptions but we'll get to those later registering and queuing the files are still a

6
00:00:28,940 --> 00:00:30,540
p p process.

7
00:00:30,540 --> 00:00:37,080
Just like anything else we'll be using hooks inside the main plugin file create an action hook called

8
00:00:37,140 --> 00:00:39,420
in queue block Ed assets

9
00:00:44,690 --> 00:00:53,520
the name of the function will be are in queue block Ed assets this function doesn't exist so we'll need

10
00:00:53,520 --> 00:01:00,160
to create that next create a file inside the blocks directory called and cued up HP.

11
00:01:00,390 --> 00:01:06,970
Once again any files related to the Gutenberg editor will be placed here after creating the file defined

12
00:01:07,050 --> 00:01:09,600
the function and include it from the main plugin file

13
00:01:17,310 --> 00:01:24,660
the hook that we're using is specifically for the Gutenberg Ed the Q block Ed assets hook is triggered

14
00:01:24,660 --> 00:01:29,010
when the Gutenberg it's initialized for any post type on the admin end.

15
00:01:29,160 --> 00:01:35,610
This is perfect as this will make sure only files meant for the editor will be loaded inside the function

16
00:01:35,790 --> 00:01:43,500
called the WP register a script function and set the name to our blocks bundle.

17
00:01:43,680 --> 00:01:49,320
The second parameter will be the you are out will use the plugins you are El function for this.

18
00:01:49,350 --> 00:01:59,960
The path should be slash blocks slash dist slash bundle dot J.S..

19
00:02:00,030 --> 00:02:05,610
Keep in mind that we're loading the bundle file and not the files inside the after rectory.

20
00:02:05,610 --> 00:02:09,810
The bundle file will contain the finished result of everything.

21
00:02:09,810 --> 00:02:12,360
Next up is an array of dependencies.

22
00:02:12,360 --> 00:02:15,730
Before we load this script we're going to need a few things.

23
00:02:15,780 --> 00:02:21,810
The special thing about the Gutenberg editor is that it's modular the Gutenberg editor is split up into

24
00:02:21,810 --> 00:02:26,150
various modules that are bundled together to make it function correctly.

25
00:02:26,190 --> 00:02:31,320
We need to make sure that certain modules are loaded first before our scripts so that it can function

26
00:02:31,320 --> 00:02:32,310
correctly.

27
00:02:32,370 --> 00:02:36,530
The scripts we're about to require are all registered by WordPress.

28
00:02:36,660 --> 00:02:45,530
The first one is WP dash ie 18 in this script will provide us functions that we can use to translate

29
00:02:45,590 --> 00:02:46,660
our script.

30
00:02:46,670 --> 00:02:51,810
Next is the WP dash element script.

31
00:02:51,850 --> 00:02:57,820
This will provide us with the function for converting our J.S. X code into JavaScript functions in the

32
00:02:57,820 --> 00:02:58,920
previous section.

33
00:02:58,990 --> 00:03:04,290
We would use react but WordPress takes the time to wrap some of reacts functions.

34
00:03:04,300 --> 00:03:06,400
I'll discuss this more in depth later.

35
00:03:06,520 --> 00:03:12,010
For now just include it afterwards we'll need the WP dash blocks.

36
00:03:12,010 --> 00:03:21,020
Script this script will allow us to register our block and interact with Gutenberg then we'll need the

37
00:03:21,020 --> 00:03:30,560
WP dash component scripts Gutenberg comes with some components that we can reuse in our own script.

38
00:03:30,560 --> 00:03:33,920
This script will allow us to access these features.

39
00:03:33,950 --> 00:03:37,660
It's great because then we won't have to reinvent the wheel.

40
00:03:37,670 --> 00:03:40,690
Up next is the WP dash Ed script.

41
00:03:42,860 --> 00:03:47,840
This script comes with tools and functions related specifically for the editor.

42
00:03:47,900 --> 00:03:53,240
These will help us create a more consistent user experience when building our blocks.

43
00:03:53,240 --> 00:03:57,220
Lastly we'll need the WP dash API scripts.

44
00:03:57,230 --> 00:04:01,160
This will allow us to interact with the WordPress rest api.

45
00:04:01,220 --> 00:04:05,310
We haven't discussed the rest api in depth but we will soon.

46
00:04:05,600 --> 00:04:10,110
Something I want to note is that you won't be using all of these scripts right from the start.

47
00:04:10,130 --> 00:04:13,850
We'll gradually introduce each one as the course progresses.

48
00:04:13,880 --> 00:04:18,770
I'm just including them now so that we can focus more on the javascript code and not have to switch

49
00:04:18,770 --> 00:04:21,110
back and forth between files.

50
00:04:21,200 --> 00:04:27,530
The last parameter I want to set is the version as you may know some browsers will cache our files.

51
00:04:27,530 --> 00:04:28,740
We don't want this.

52
00:04:28,760 --> 00:04:30,840
We always want the latest version.

53
00:04:30,920 --> 00:04:36,980
I've already shown you how to do this in a previous lecture but I want to show an alternative solution.

54
00:04:36,980 --> 00:04:40,210
I'm going to call the file M time function.

55
00:04:40,250 --> 00:04:42,870
This function requires the path to the file.

56
00:04:42,980 --> 00:04:44,300
I'll pass that in as well

57
00:04:50,090 --> 00:04:54,420
the function I'm introducing here will get a files last modification time.

58
00:04:54,440 --> 00:04:57,260
This function requires the full system path.

59
00:04:57,260 --> 00:05:03,480
I'm using the plug in dirt path function which will return the full system path to a plug and file.

60
00:05:03,680 --> 00:05:07,500
Then I'm spending the rest of the path to the file.

61
00:05:07,520 --> 00:05:11,560
This is a really quick and easy way to get the latest version of a file.

62
00:05:11,580 --> 00:05:19,250
All right let's in queue the file now right below this call the WP NQ script function and pass in the

63
00:05:19,250 --> 00:05:21,750
name.

64
00:05:21,860 --> 00:05:25,070
That should do it before we confirm everything works.

65
00:05:25,070 --> 00:05:29,280
Open the index dot J S file inside the after rectory.

66
00:05:29,420 --> 00:05:30,570
It should be empty.

67
00:05:30,590 --> 00:05:39,800
I'm going to console Doc log a simple message then will need to compile this file inside the command

68
00:05:39,800 --> 00:05:40,290
line.

69
00:05:40,310 --> 00:05:43,760
You may have to see deep into the blocks directory.

70
00:05:43,760 --> 00:05:50,570
Once you're there run the commands NPM run Dev.

71
00:05:50,700 --> 00:05:56,190
You should receive a success message and web patch should now be watching the files for any changes.

72
00:05:56,220 --> 00:06:02,350
Then go to the admin dashboard and try viewing the Gutenberg Ed.

73
00:06:02,370 --> 00:06:06,090
This can be for any post type for the rest of the section.

74
00:06:06,090 --> 00:06:09,150
I'll be focusing on the recipe post type.

75
00:06:09,150 --> 00:06:14,790
The code should work for any post type though open the developer tools and view the console.

76
00:06:14,940 --> 00:06:17,650
You should see the message appearing in the log.

77
00:06:17,670 --> 00:06:19,800
That should confirm everything works

78
00:06:22,580 --> 00:06:28,100
we've taken care of the first two steps which was prepare the environment and in cue the files.

79
00:06:28,100 --> 00:06:30,740
The next step is to register our block.

80
00:06:30,740 --> 00:06:33,840
We'll take a look at how to do that in the next lecture.

81
00:06:33,860 --> 00:06:34,640
I'll see you there.
