1
00:00:07,440 --> 00:00:09,970
Let's start working on submitting the recipe.

2
00:00:10,050 --> 00:00:17,030
Let's give the recipe form an idea of recipe dash form above this form.

3
00:00:17,070 --> 00:00:21,540
Let's add a status div with the idea of recipe dash status

4
00:00:24,840 --> 00:00:30,510
we'll use this div to display a message to the user whether or not the recipe was submitted successfully

5
00:00:31,200 --> 00:00:35,210
open the main dot J S file.

6
00:00:35,380 --> 00:00:38,710
This is the same file that should contain the ratings submission.

7
00:00:38,710 --> 00:00:46,540
Let's listen for the form submission using the on method.

8
00:00:46,730 --> 00:00:49,100
We'll be given an event object.

9
00:00:49,100 --> 00:00:55,330
We're going to call the prevent default method so that the form isn't submitted.

10
00:00:55,370 --> 00:01:01,000
We want to use ajax force admitting the form we're going to hide the form during submission.

11
00:01:01,010 --> 00:01:06,020
This will make sure the user doesn't submit the form twice.

12
00:01:06,030 --> 00:01:12,480
Next we're going to select the Stannis div and add some AGM l add a simple weighting message.

13
00:01:12,600 --> 00:01:16,110
I'm going to wrap this around some bootstrap markup to make it look good.

14
00:01:22,340 --> 00:01:23,510
Just like last time.

15
00:01:23,570 --> 00:01:29,840
Create an object that will contain the form values to grab the values you simply select the input fields

16
00:01:29,840 --> 00:01:33,140
by their ideas and use the Val method to get the value.

17
00:01:36,520 --> 00:01:40,390
For the action we'll set this to our submit user recipe.

18
00:01:45,610 --> 00:01:50,740
Grabbing the content from the editor is pretty simple when we included the editor WordPress.

19
00:01:50,770 --> 00:01:57,310
Also loaded the tiny MCP object we can grab the content by using this object and grabbing the current

20
00:01:57,400 --> 00:02:05,170
active editor and call the get content method which will return on sanitize each GM El.

21
00:02:05,180 --> 00:02:13,430
Lastly we submit this data using J queries post method.

22
00:02:13,510 --> 00:02:20,360
Remember that the recipe object is available to us and we can reuse it to provide the Ajax you URL inside.

23
00:02:20,380 --> 00:02:26,710
The response function will be doing either one of two things we're going to check the data object for

24
00:02:26,710 --> 00:02:33,160
a status property and check if its value is equal to 2 if it is then we know that the form submission

25
00:02:33,160 --> 00:02:34,510
was a success.

26
00:02:34,510 --> 00:02:36,850
Otherwise an error occurred.

27
00:02:36,910 --> 00:02:40,180
I'm going to update the status HCM l appropriately.

28
00:02:40,330 --> 00:02:43,510
If the submission was a failure I'm going to show the form again.

29
00:02:45,270 --> 00:02:49,320
Let's handle the form submission now inside the main plugin file.

30
00:02:49,320 --> 00:02:58,690
Let's add the action hook WP Ajax we have to append our action to this hook like so the function we

31
00:02:58,690 --> 00:03:01,510
want to call will be the same name as the action.

32
00:03:01,540 --> 00:03:09,740
I'm also going to make this hook available for guests as I'm going to allow for get submissions to inside

33
00:03:09,740 --> 00:03:16,250
the process folder create the file called submit dash user dash recipe dot BHP and define the function

34
00:03:16,250 --> 00:03:16,980
here.

35
00:03:17,090 --> 00:03:20,000
We'll need to include this file from the main plugin as well.

36
00:03:25,730 --> 00:03:34,330
Create a variable named output this will be an array that will contain the status set the status to

37
00:03:34,330 --> 00:03:40,860
1 I'm going to perform a very simple check on the title input.

38
00:03:40,860 --> 00:03:42,480
I want to know if it's empty.

39
00:03:42,480 --> 00:03:47,910
If it is I'm going to send back the output with the WP send Jason function.

40
00:03:47,940 --> 00:03:49,710
This will also kill the scripts

41
00:03:55,000 --> 00:03:55,800
after this.

42
00:03:55,840 --> 00:04:00,760
I'm going to paste in some code pause the video if you need to.

43
00:04:00,760 --> 00:04:03,370
All I'm doing here is sanitizing the input.

44
00:04:03,430 --> 00:04:09,260
I'm also creating the metadata we create the recipe data array just like last time.

45
00:04:09,520 --> 00:04:15,670
I've set the rating and rating count to zero something you'll notice is that for the title I'm using

46
00:04:15,670 --> 00:04:20,850
these sanitized text field function but I'm not applying this to the content itself.

47
00:04:20,950 --> 00:04:24,270
We can't use this function for sanitizing the content.

48
00:04:24,340 --> 00:04:31,420
Instead I'm using a function called WP KSC as Post and the resource section I provide a link to a function

49
00:04:31,420 --> 00:04:33,840
called WP KSC s.

50
00:04:34,090 --> 00:04:36,610
Let's take a look at this function in more detail.

51
00:04:36,610 --> 00:04:43,330
There are a few libraries out there in P P that help with sanitizing HCM l WordPress provides its own

52
00:04:43,330 --> 00:04:47,310
solution which is the preferred method for sanitizing each team out.

53
00:04:47,320 --> 00:04:55,060
The WP KSC s function is a pretty flexible function as it allows us to define what H2 email Tang's attributes

54
00:04:55,180 --> 00:04:57,170
and protocols are allowed.

55
00:04:57,190 --> 00:05:02,710
It would be pretty time consuming to have to re-enter what h email is allowed every time we use this

56
00:05:02,710 --> 00:05:03,910
function.

57
00:05:03,910 --> 00:05:08,840
If we scroll down there's a link to the WP KSC EZ post function.

58
00:05:08,890 --> 00:05:15,610
This function does the exact same thing as the WP K S E S function but instead uses the same filter

59
00:05:15,610 --> 00:05:16,660
for posts.

60
00:05:16,720 --> 00:05:23,410
This saves us some time since our recipe post is basically just a post it makes sense to just use this

61
00:05:23,410 --> 00:05:29,680
shorter function if you prefer to define your own set of HCM email and attributes than I suggest using

62
00:05:29,680 --> 00:05:32,710
the WP K S S function.

63
00:05:32,710 --> 00:05:38,770
All our data is now sanitized and ready to be inserted into the database inserting a post is actually

64
00:05:38,770 --> 00:05:39,790
really easy.

65
00:05:39,790 --> 00:05:45,190
We don't even have to use the global w PDB object to perform this task.

66
00:05:45,190 --> 00:05:51,910
WordPress provides a handy function called WP insert post I'll provide a link to this function inside

67
00:05:51,910 --> 00:05:53,810
the resources section.

68
00:05:53,830 --> 00:05:59,260
This function will insert a post for us and even take care of sanitization just in case we forgot to

69
00:05:59,260 --> 00:06:00,640
do it ourselves.

70
00:06:00,640 --> 00:06:03,940
There's only one parameter which is an array of arguments.

71
00:06:03,940 --> 00:06:07,920
There are numerous things we can set but we won't be using all of them.

72
00:06:07,960 --> 00:06:11,640
The only required arguments are the content and the title.

73
00:06:11,740 --> 00:06:15,480
If we skip anything WordPress will fill in the rest by default.

74
00:06:15,490 --> 00:06:20,770
This function will end up returning the idea of the post created which we will need for adding the post

75
00:06:20,770 --> 00:06:28,060
metadata creating a variable named post I.D. and its value will be the value returned by the WP insert

76
00:06:28,060 --> 00:06:32,630
post function pass in an array.

77
00:06:32,710 --> 00:06:41,410
We're going to define the following arguments post content will be set to the content variable post

78
00:06:41,410 --> 00:06:50,830
name and post title we'll both be set to the title.

79
00:06:50,850 --> 00:06:56,040
The difference between these two is the name will be used for the slug and the title is used for the

80
00:06:56,040 --> 00:07:03,380
human readable title post status will be set too pending by default.

81
00:07:03,380 --> 00:07:09,350
This is set to draft we'll consider the post complete but we don't want to publish the recipe either

82
00:07:09,740 --> 00:07:15,140
pending we'll let administrators know that the Post needs to be reviewed before being published post

83
00:07:15,140 --> 00:07:15,660
type.

84
00:07:15,770 --> 00:07:21,700
We'll be set to recipes since that is our post type that's it.

85
00:07:21,720 --> 00:07:26,610
Feel free to read over the Codex and set the rest of the arguments if you would like to customize this

86
00:07:26,610 --> 00:07:27,590
further.

87
00:07:27,590 --> 00:07:32,550
Next let's call the update post a function to set the recipe data metadata

88
00:07:36,750 --> 00:07:38,640
our function is almost finished.

89
00:07:38,640 --> 00:07:45,370
All we need to do now is update the status in the output array to 2 and then output it using the WP

90
00:07:45,370 --> 00:07:52,950
send Jason function refresh the recipe form page and try submitting the form with no input.

91
00:07:52,990 --> 00:08:02,700
You should get an error now and try filling in all the fields and we should see a success message.

92
00:08:02,710 --> 00:08:06,100
You should also have your console open to check for any errors.

93
00:08:06,220 --> 00:08:12,150
If you've received no errors and received a success message then there's one last thing we need to check.

94
00:08:12,160 --> 00:08:19,770
Go to the recipe admin page and see if the Post has been added after confirming that it's available.

95
00:08:19,780 --> 00:08:25,120
Let's view the contents in the editor as you can see everything was inputted correctly.

96
00:08:25,120 --> 00:08:27,150
This is exactly what we wanted.

97
00:08:27,160 --> 00:08:30,830
We now have a forum where users can submit their own recipes.

98
00:08:30,880 --> 00:08:36,160
What I like about this is that even though we're not using the Gutenberg Ed on the front end this will

99
00:08:36,160 --> 00:08:37,090
still work.

100
00:08:37,210 --> 00:08:41,350
The content has been converted into a blog called The classic blog.

101
00:08:41,350 --> 00:08:43,600
This makes Gutenberg backwards compatible.
