WEBVTT
1
00:00:07.370 --> 00:00:11.330
In the previous lecture we set up the form and prepped the javascript code.

2
00:00:11.330 --> 00:00:15.350
Now we'll begin processing the data inside the main plugin file.

3
00:00:15.350 --> 00:00:21.090
I'm going to use the WP Ajax no print hook.

4
00:00:21.160 --> 00:00:22.400
This is important.

5
00:00:22.480 --> 00:00:27.070
Users who are not logged in should be the only ones to be able to create accounts.

6
00:00:27.130 --> 00:00:34.000
The function will use the same name as the dynamic cook inside the process folder create a file named

7
00:00:34.060 --> 00:00:38.220
create dash account dot P. HP and define the function here.

8
00:00:38.290 --> 00:00:41.190
Make sure to include it from the main plugin file as well.

9
00:00:44.140 --> 00:00:53.640
Inside this function I'm going to create the output array with a status key and its value being 1 immediately

10
00:00:53.640 --> 00:00:54.440
afterwards.

11
00:00:54.510 --> 00:01:00.420
I'm going to grab the underscore WP nonce field and store it in a variable called knots.

12
00:01:00.420 --> 00:01:05.030
I'm going to check if it's available by using AP HP ternary operator.

13
00:01:05.160 --> 00:01:07.840
If it's set I'll set this variable to the field.

14
00:01:08.100 --> 00:01:10.650
Otherwise I'll just set it to an empty string

15
00:01:17.100 --> 00:01:19.480
next inside a conditional statement.

16
00:01:19.620 --> 00:01:27.470
I'm going to use a function called WP verify knots this function will take in the nonce.

17
00:01:27.470 --> 00:01:29.840
We were given and then the name of the action.

18
00:01:29.990 --> 00:01:36.020
If we go back to the shortcut function you'll see we named it recipe off pass that in as a string to

19
00:01:36.020 --> 00:01:43.410
the function if the function returns false then it will want to kill the script with the output like

20
00:01:43.410 --> 00:01:44.180
we always do.

21
00:01:46.770 --> 00:01:52.050
I'm going to create an additional conditional statement to check if the rest of the post variables were

22
00:01:52.050 --> 00:01:52.920
set.

23
00:01:52.920 --> 00:01:58.660
If any of them warrant then I'll just kill the scripts after performing these simple checks.

24
00:01:58.670 --> 00:02:02.570
Let's create variables for each of these post values.

25
00:02:02.690 --> 00:02:07.490
I'm going to sanitize each value with these sanitized text field function.

26
00:02:07.490 --> 00:02:11.460
The email will be sanitized with these sanitize email function.

27
00:02:11.510 --> 00:02:17.320
It works like the sanitized text field function except for emails with the data being set.

28
00:02:17.330 --> 00:02:21.350
I'm going to use another conditional statement and perform quite a few checks.

29
00:02:23.950 --> 00:02:30.250
I'll be using the user name exists and email exists functions to check if the user name or email is

30
00:02:30.250 --> 00:02:31.180
already in use.

31
00:02:33.700 --> 00:02:38.770
These functions are provided by Wordpress and will make the necessary sequel queries to check if these

32
00:02:38.770 --> 00:02:42.380
two values are taken while I'm performing these checks.

33
00:02:42.430 --> 00:02:47.860
I'll check if the two passwords match and I'll check if the email being submitted is a valid email using

34
00:02:47.860 --> 00:02:56.310
the is email function the is email is another WordPress function that helps with verifying and email

35
00:02:56.310 --> 00:02:57.480
and its format.

36
00:02:57.480 --> 00:03:00.720
Be sure to check this conditional statement twice.

37
00:03:00.720 --> 00:03:02.750
Make sure your code matches mine.

38
00:03:02.820 --> 00:03:04.730
Pause the video if you need to.

39
00:03:04.770 --> 00:03:08.070
If any of these checks pass I'm going to kill the script again.

40
00:03:09.940 --> 00:03:13.750
If a user has made it this far then we'll begin creating the user.

41
00:03:13.750 --> 00:03:16.370
There are two functions available for doing this.

42
00:03:16.480 --> 00:03:25.600
The WP create user and WP insert user functions both do the exact same thing the WP create user as a

43
00:03:25.600 --> 00:03:30.100
wrapper and a more simplified version of the WP insert user function.

44
00:03:30.100 --> 00:03:33.640
This may seem appealing but it won't do for our purposes.

45
00:03:33.700 --> 00:03:36.480
I want to set more values than this function will allow.

46
00:03:36.490 --> 00:03:43.600
So we'll be using the WP insert user function instead in the resource section of this lecture I provide

47
00:03:43.600 --> 00:03:45.100
a link to this function.

48
00:03:45.430 --> 00:03:51.490
As you can see this function accepts an array of fields we can set we won't be sending all of these.

49
00:03:51.490 --> 00:03:53.810
Only the ones the user has submitted.

50
00:03:53.860 --> 00:03:55.660
Let's use this function now.

51
00:03:55.810 --> 00:03:57.560
This function will return an I.D..

52
00:03:57.580 --> 00:04:04.300
If successful I want to save this I.D. for future use so create a variable named user I.D. and assign

53
00:04:04.330 --> 00:04:11.550
its value to this function pass an array and set the following fields.

54
00:04:11.550 --> 00:04:17.380
User log in and we'll be set to the user name user pass.

55
00:04:17.380 --> 00:04:24.950
We'll be set to pass we're passing this in as plain text but you don't have to worry about it being

56
00:04:24.950 --> 00:04:26.330
saved as is.

57
00:04:26.330 --> 00:04:33.140
WordPress will take the time to salt and hash this password for you before inserting it into the database.

58
00:04:33.140 --> 00:04:35.360
User email will be sent to the email

59
00:04:38.020 --> 00:04:46.100
user nice name we'll be set to the name the nice name is used to display a friendly your name to users

60
00:04:46.100 --> 00:04:48.470
rather than displaying the user name.

61
00:04:48.470 --> 00:04:51.210
That's all you need to do to create a user.

62
00:04:51.260 --> 00:04:55.870
If we look at the documentation you'll see a list of possible return values.

63
00:04:55.880 --> 00:04:59.510
Here is what WordPress says about the possible returns.

64
00:04:59.690 --> 00:05:04.740
If successful returns the newly created users user underscore I.D..

65
00:05:04.970 --> 00:05:09.000
If query fails returns a WP underscore error object.

66
00:05:09.350 --> 00:05:14.620
So if this fails we can definitely expect a WP air object.

67
00:05:14.720 --> 00:05:21.200
I'm going to create a conditional statement and use the is WP era function to help us identify if the

68
00:05:21.200 --> 00:05:23.150
value returned is an error object

69
00:05:25.920 --> 00:05:31.650
if this returns true that I want to kill the script and let the user know the registration was a failure

70
00:05:34.630 --> 00:05:35.370
at this point.

71
00:05:35.380 --> 00:05:41.860
The user is completely registered something WordPress does is send an email to the admin and user about

72
00:05:41.860 --> 00:05:43.210
their registration.

73
00:05:43.240 --> 00:05:50.800
Let's also mimic this behavior for the user only WordPress provides a function called WP new user registration

74
00:05:53.250 --> 00:05:57.390
this function will send an email to the user with their credential info.

75
00:05:57.390 --> 00:06:03.720
The first parameter is the user I.D. the second parameter is deprecated so you'll have to pass and know

76
00:06:04.170 --> 00:06:08.240
the last parameter allows you to specify who should be sent an email.

77
00:06:08.250 --> 00:06:10.720
There are three possible values for this.

78
00:06:10.740 --> 00:06:14.340
You can set this to admin for the admin to get an email.

79
00:06:14.370 --> 00:06:18.510
There's also user if you want only the user to get the email.

80
00:06:18.510 --> 00:06:24.010
Lastly you can set this to both for both admin and user to get the emails.

81
00:06:24.090 --> 00:06:28.460
I'm going to set this to users since I want the user to get the email.

82
00:06:28.740 --> 00:06:33.230
Now that the user has been created we only have a few more things to do.

83
00:06:33.360 --> 00:06:38.940
This next step is completely optional but I like to automatically log in the user after creating their

84
00:06:38.940 --> 00:06:41.150
account to Long of the user in.

85
00:06:41.190 --> 00:06:43.680
We need to grab the user object.

86
00:06:43.770 --> 00:06:49.860
I'm going to create a new variable named user and assign its value for the value returned by the function.

87
00:06:49.860 --> 00:06:56.280
Get user by this function will return a user object.

88
00:06:56.280 --> 00:07:00.000
It allows you to grab a user with numerous fields and values.

89
00:07:00.150 --> 00:07:06.660
Since we have the user righty we'll just use that the first parameter will be the string I.D. to specify

90
00:07:06.690 --> 00:07:09.300
that we want to grab the user by their I.D..

91
00:07:09.300 --> 00:07:11.780
The second parameter will be the idea itself.

92
00:07:14.140 --> 00:07:18.610
This should return the user and all their properties to log in a user.

93
00:07:18.670 --> 00:07:21.330
There are a couple of things we need to do.

94
00:07:21.400 --> 00:07:24.990
First we need to let WordPress know about the current user.

95
00:07:25.000 --> 00:07:31.380
This will not authenticate the user but simply tell WordPress that a user is now active within the system.

96
00:07:31.540 --> 00:07:37.630
Call the WP set current user function and pass him the user I.D. along with the user log in

97
00:07:40.380 --> 00:07:40.930
next.

98
00:07:40.950 --> 00:07:45.760
I want to set up a cookie so that WordPress will remember this user for future use.

99
00:07:45.780 --> 00:07:54.660
Call the function WP set off cookie and passing the user I.D. this function has a second parameter which

100
00:07:54.660 --> 00:07:59.040
will remember the user even if they exit out of their browser by default.

101
00:07:59.040 --> 00:08:01.380
This is false which is what we want.

102
00:08:01.380 --> 00:08:06.690
The reason I want this is because the user may be registering on an insecure location.

103
00:08:06.690 --> 00:08:11.250
This cookie will only be active until the user exits out their browser.

104
00:08:11.310 --> 00:08:15.630
Next I want to set off a hook using the do action function.

105
00:08:15.630 --> 00:08:21.450
The hook I want to run is called WP log in and I'm going to pass in two extra arguments.

106
00:08:21.450 --> 00:08:30.390
I'm going to pass him the user log in and the user object this hook will allow WordPress itself to run

107
00:08:30.450 --> 00:08:34.950
any authentication settings and will allow for any other plugins to perform any setups.

108
00:08:34.950 --> 00:08:41.520
When a user is logged in after doing all of this the user is now logged in before I move on.

109
00:08:41.610 --> 00:08:47.550
I want to inform you about a function called WP sign on that does all this for us but the reason we

110
00:08:47.550 --> 00:08:50.220
didn't use it is because it brings back mixed results.

111
00:08:50.220 --> 00:08:56.160
Upon first logging when a user logs in for the first time there is additional setup that WordPress and

112
00:08:56.190 --> 00:08:59.570
additional plugins want to perform by doing it this way.

113
00:08:59.640 --> 00:09:02.780
We make it easier to let those plugins do so.

114
00:09:02.850 --> 00:09:08.990
What I just showed you is a more definite way to log in a user for the first time to end this function.

115
00:09:09.000 --> 00:09:14.060
I'm going to update the output status key to 2 then I will kill the script

116
00:09:18.280 --> 00:09:22.720
this will let the script know the user has successfully created an account.

117
00:09:22.930 --> 00:09:28.060
We're almost done with the registration since the user is logged in after registering then we should

118
00:09:28.060 --> 00:09:34.090
redirect them to the home page so that they don't have to stare at this page inside the front slash

119
00:09:34.210 --> 00:09:35.370
NQ function.

120
00:09:35.380 --> 00:09:41.710
I'm going to create another local variable named home your URL and set its value returned by the function.

121
00:09:41.710 --> 00:09:42.730
Home you are.

122
00:09:45.260 --> 00:09:51.080
Passing a symbol forward slash to let this function know you want the U.R.L. to the root page itself.

123
00:09:51.080 --> 00:09:58.130
We can now use this variable inside our script right after the status message set the H for property

124
00:09:58.130 --> 00:10:01.760
of the location object to the new localized property like so

125
00:10:04.540 --> 00:10:06.530
you can now test this form.

126
00:10:06.580 --> 00:10:07.950
Make sure you are logged out.

127
00:10:07.990 --> 00:10:10.280
Or this form will not work.

128
00:10:10.330 --> 00:10:12.820
Try testing this form with invalid info.

129
00:10:15.550 --> 00:10:23.210
Then try testing it with valid info.

130
00:10:23.330 --> 00:10:28.550
You should see a success message for a brief moment and then be redirected to the home page.

131
00:10:28.550 --> 00:10:32.480
You should also notice that you are now logged back in by WordPress.

132
00:10:32.480 --> 00:10:34.840
This is exactly what we wanted.

133
00:10:34.850 --> 00:10:39.290
I'm going to log out again and navigate back to this page in the next lecture.

134
00:10:39.290 --> 00:10:42.160
We'll work on making the logon form work.

135
00:10:42.230 --> 00:10:45.260
It's very similar to what we did with the registration form.
