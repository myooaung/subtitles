WEBVTT
1
00:00:07.560 --> 00:00:10.630
We're going to begin creating the UI for our block.

2
00:00:10.710 --> 00:00:15.760
WordPress provides two different places for your UI which are both important right now.

3
00:00:15.780 --> 00:00:20.360
The setting that displays our content is the same function right above it.

4
00:00:20.370 --> 00:00:27.990
I'm going to create an arrow function called edit these two functions will display our content but in

5
00:00:27.990 --> 00:00:29.260
different locations.

6
00:00:29.400 --> 00:00:33.270
The edit function will display the content on the Gutenberg editor.

7
00:00:33.300 --> 00:00:36.740
The same function will display the content on the front end.

8
00:00:36.840 --> 00:00:39.480
You can consider this the final result.

9
00:00:39.480 --> 00:00:43.690
The edit function is where you'll be placing the UI for editing the block.

10
00:00:43.740 --> 00:00:46.350
This includes buttons or input fields.

11
00:00:46.380 --> 00:00:50.160
You can also use this function to add content on the sidebar.

12
00:00:50.190 --> 00:00:56.880
Basically anything related to the editor should be placed here just like the save function you're required

13
00:00:56.880 --> 00:00:58.900
to return J.S. x.

14
00:00:58.950 --> 00:01:06.130
I'm going to copy the return statement from the save function and pasted into the edit function.

15
00:01:06.140 --> 00:01:07.790
This is only temporary.

16
00:01:07.790 --> 00:01:11.790
Soon enough you'll be able to see the difference between these two functions.

17
00:01:11.900 --> 00:01:14.810
Before we get into coding the content for our block.

18
00:01:14.840 --> 00:01:22.300
Let's accept in the prompts object both functions except in the props object.

19
00:01:22.300 --> 00:01:28.660
So be sure you're accepting that in in the previous section we went to overreact and the props object

20
00:01:28.990 --> 00:01:30.070
as a refresher.

21
00:01:30.070 --> 00:01:37.190
The props object contains the properties and attributes passed down to your component.

22
00:01:37.210 --> 00:01:42.370
The great thing about Gutenberg is that most of the technical details are taken care of for us.

23
00:01:42.370 --> 00:01:48.040
We don't have to worry about the code that makes Gutenberg function a general high level overview will

24
00:01:48.040 --> 00:01:49.000
suffice.

25
00:01:49.030 --> 00:01:51.820
Gutenberg is a react application.

26
00:01:51.820 --> 00:01:55.180
Most react applications are structured as components.

27
00:01:55.180 --> 00:01:58.470
When we went over components we only made one component.

28
00:01:58.480 --> 00:02:02.150
However you can have as many as you like in an application.

29
00:02:02.260 --> 00:02:07.480
The way most developers go about it is by building one component and that component will load in more

30
00:02:07.480 --> 00:02:08.560
components.

31
00:02:08.800 --> 00:02:14.290
The component at the top level is considered the parent component any components loaded below it are

32
00:02:14.290 --> 00:02:15.760
child components.

33
00:02:15.760 --> 00:02:21.700
The data for the whole application is usually stored at the parent component level the parent component

34
00:02:21.730 --> 00:02:27.610
will then pass down the data to the children components children components can then pass that data

35
00:02:27.610 --> 00:02:29.650
down to their children components.

36
00:02:29.650 --> 00:02:32.370
There's no limit to how far data can be passed down.

37
00:02:32.770 --> 00:02:38.710
Let's say that the data was updated in a child component the parent component will not be automatically

38
00:02:38.710 --> 00:02:40.780
notified about the update.

39
00:02:40.810 --> 00:02:46.620
Instead it's the job of the child component to tell the parent component about the data change.

40
00:02:46.900 --> 00:02:50.080
You have to do this manually but it's not hard at all.

41
00:02:50.110 --> 00:02:51.700
As you'll see soon enough.

42
00:02:51.850 --> 00:02:58.090
Now you may be thinking what if the data that's used on Level 2 is also used on Level 1.

43
00:02:58.150 --> 00:03:04.450
Well once the parents component is updated it'll send the data back down through all its child components.

44
00:03:04.450 --> 00:03:09.300
This process repeats until all components are up to date with the latest changes.

45
00:03:09.340 --> 00:03:12.660
This way you don't have to send the data to all components.

46
00:03:12.790 --> 00:03:17.060
You just have to send it to the parent component and everything else will follow suit.

47
00:03:19.400 --> 00:03:22.970
The props object will contain the data for our block.

48
00:03:22.970 --> 00:03:28.130
Not only does it contain the data but it contains functions that you can use to send the data back to

49
00:03:28.130 --> 00:03:29.560
the parent component.

50
00:03:29.600 --> 00:03:32.070
Let's check out the value of this object.

51
00:03:32.090 --> 00:03:42.030
I'm going to console dot log the prompts object then inside the command line S.D. into the block's directory

52
00:03:42.060 --> 00:03:44.760
and run the NPM run Dev command.

53
00:03:44.760 --> 00:03:45.540
Afterwards

54
00:03:50.050 --> 00:03:52.550
you shouldn't receive any errors at this point.

55
00:03:52.600 --> 00:03:56.890
Once the file has been compiled let's create a new recipe post.

56
00:03:56.890 --> 00:04:00.880
Be sure you have the developer tools open before you input anything.

57
00:04:00.880 --> 00:04:05.130
I'm going to add my recipe block.

58
00:04:05.290 --> 00:04:08.380
All right the block should be displaying without a problem.

59
00:04:08.410 --> 00:04:11.760
If you look at the log you'll see an object being output it.

60
00:04:11.770 --> 00:04:13.530
This is the props object.

61
00:04:13.690 --> 00:04:18.500
If you look inside you'll find things like attributes and the class name.

62
00:04:18.520 --> 00:04:25.540
There is one property I want you to pay attention to the IS SELECTED property is used to determine whether

63
00:04:25.540 --> 00:04:27.810
the user is focused on the block or not.

64
00:04:27.880 --> 00:04:31.720
If they are then the block tab will be in focus on the sidebar.

65
00:04:32.140 --> 00:04:38.140
I'm going to click outside of my block which will make the editor lose focus off the block immediately

66
00:04:38.140 --> 00:04:40.660
after clicking away a new object is logged.

67
00:04:41.050 --> 00:04:43.570
If you look inside it's mostly the same.

68
00:04:43.570 --> 00:04:49.600
However the is selected property is now set to false after it was set to false.

69
00:04:49.600 --> 00:04:52.570
Everything in the application changed as well.

70
00:04:52.570 --> 00:04:56.150
The block tab on the sidebar is no longer focused.

71
00:04:56.170 --> 00:05:00.250
The great thing about Gutenberg is that a lot of this is taken care of for you.

72
00:05:00.250 --> 00:05:04.520
The WordPress development team have already taken care of the difficult parts.

73
00:05:04.540 --> 00:05:07.410
This allows us to focus more on our block.

74
00:05:07.720 --> 00:05:13.300
Now that we understand what the props object is let's begin creating the content.

75
00:05:13.300 --> 00:05:16.940
We'll be learning more about the props object throughout this course.

76
00:05:17.020 --> 00:05:22.970
Inside the edit function I'm going to remove the logging of the props object.

77
00:05:23.020 --> 00:05:28.870
I'm also going to remove the J ASX code for the return statement and said I'm going to add a pair of

78
00:05:28.870 --> 00:05:31.720
parentheses if you're writing one line of code.

79
00:05:31.720 --> 00:05:37.960
Then you can omit these but if you want to have multi line JSA X then you're required to add these in

80
00:05:38.830 --> 00:05:44.420
as a reminder the block we're going to create will display more information about a recipe.

81
00:05:44.440 --> 00:05:49.480
This includes things like ingredients cooking time etc. to start things off.

82
00:05:49.510 --> 00:05:55.560
I'm going to create a div tag with the attribute class name.

83
00:05:55.620 --> 00:05:58.230
Remember that we're writing javascript code.

84
00:05:58.260 --> 00:06:05.850
The keyword class is taken so JSA X uses the class name attribute to assign an element a C Ss class

85
00:06:06.360 --> 00:06:09.330
the value for this will be a pair of curly brackets.

86
00:06:09.330 --> 00:06:13.150
This is how you inject javascript code inside ASX.

87
00:06:13.260 --> 00:06:15.610
We're going to make this value dynamic.

88
00:06:15.810 --> 00:06:21.180
If the value for an attribute is dynamic then you don't have to worry about wrapping this in quotes.

89
00:06:21.240 --> 00:06:29.520
It will be done for you once it's processed the value will be prompts dot class name the class name

90
00:06:29.520 --> 00:06:32.770
property will automatically be generated for your block.

91
00:06:32.880 --> 00:06:34.260
You will see the value for this.

92
00:06:34.260 --> 00:06:40.440
Once we're finished I've already gone ahead and prepared the email for this block inside the assets

93
00:06:40.440 --> 00:06:41.030
folder.

94
00:06:41.040 --> 00:06:43.340
You'll find a folder called extras.

95
00:06:43.690 --> 00:06:47.790
Open the recipe dash block dash template Dottie.

96
00:06:48.060 --> 00:06:54.980
Copy everything and paste it into the div tag.

97
00:06:55.060 --> 00:06:57.430
There's nothing super special going on here.

98
00:06:57.430 --> 00:07:02.000
We have an unordered list with the class list on styled applied to it.

99
00:07:02.230 --> 00:07:08.220
Something I want to note is that the list unstable class is only available within our theme styles.

100
00:07:08.290 --> 00:07:14.620
We haven't include any styles for the Gutenberg editor I want you to keep this in mind as what we see

101
00:07:14.620 --> 00:07:19.020
on the Gutenberg editor it will be slightly different than what we'll see on the front end.

102
00:07:19.030 --> 00:07:22.850
In reality you will always want both style to look the same.

103
00:07:22.960 --> 00:07:26.830
This way the user won't get surprised when they view their posts.

104
00:07:26.950 --> 00:07:31.600
Usually what they see on the admin is what they expect to see on the front end.

105
00:07:31.630 --> 00:07:37.110
Inside this list we have a general overview of the recipe inside the strong tags.

106
00:07:37.120 --> 00:07:40.570
I'm going to wrap the text with the double underscore function.

107
00:07:40.570 --> 00:07:41.770
I want you to do the same

108
00:08:03.740 --> 00:08:07.670
this text will never change so we'll want to make it translatable.

109
00:08:07.670 --> 00:08:14.260
We also have this text with uppercase letters that end with P H P H is short for placeholder.

110
00:08:14.390 --> 00:08:16.770
We'll be replacing this with dynamic values.

111
00:08:16.820 --> 00:08:19.220
But for now we'll leave this as is.

112
00:08:19.430 --> 00:08:25.030
Save your changes web patch should be able to process the changes without any error.

113
00:08:25.040 --> 00:08:26.980
Let's view what we have so far.

114
00:08:27.020 --> 00:08:32.390
I want you to create a new recipe post make sure your developer tools are opened.

115
00:08:32.390 --> 00:08:38.010
I'm going to give my post a title and add the recipe blog.

116
00:08:38.100 --> 00:08:43.860
You shouldn't receive any errors related to our block the block should output the unordered list with

117
00:08:43.860 --> 00:08:50.880
our text translated I want you to publish this post before we preview this.

118
00:08:50.890 --> 00:08:58.620
I want you to check out something I'm going to inspect this element in my developer tools you'll see

119
00:08:58.620 --> 00:09:01.800
our block is being displayed the same way we've written it.

120
00:09:01.800 --> 00:09:06.990
One thing I want you to focus on is the class apply to the div tag for this tag.

121
00:09:06.990 --> 00:09:10.910
We've used the class name property from the prompts object.

122
00:09:11.040 --> 00:09:14.490
WordPress will provide you with a class for the block generated.

123
00:09:14.490 --> 00:09:19.620
You're free to use your own classes but it's better to use the one provided for consistency reasons

124
00:09:20.220 --> 00:09:24.250
all class names start with WP dash block dash.

125
00:09:24.600 --> 00:09:27.690
It's followed up with the name of the block in our case.

126
00:09:27.690 --> 00:09:33.990
This would be you to me dash recipe the forward slash in the name was converted into a dash.

127
00:09:34.080 --> 00:09:41.560
All right let's view what we get on the front in what will be rendered on the front end is the hello

128
00:09:41.560 --> 00:09:42.670
world message.

129
00:09:42.670 --> 00:09:44.340
This is to be expected.

130
00:09:44.470 --> 00:09:49.900
As I stated previously the edit function is for content that gets rendered on the editor.

131
00:09:50.020 --> 00:09:56.020
The save function is for content that gets rendered on the front end as the final result providing the

132
00:09:56.110 --> 00:09:58.390
edit function is optional.

133
00:09:58.390 --> 00:10:04.000
If you don't have an edit function available then WordPress will just use the same function for both

134
00:10:04.000 --> 00:10:04.960
sides.

135
00:10:04.960 --> 00:10:07.420
Let's inspect the element for this.

136
00:10:07.420 --> 00:10:11.880
We'll see the paragraph tag being output it with the class applied.

137
00:10:11.890 --> 00:10:13.780
This is a pleasant surprise.

138
00:10:13.780 --> 00:10:18.990
WordPress has taken the time to apply the class even though we didn't apply it in our code.

139
00:10:19.000 --> 00:10:23.820
You don't have to apply the class name property as WordPress will do it for you.

140
00:10:23.830 --> 00:10:26.790
This only applies to the same function.

141
00:10:26.950 --> 00:10:30.870
The edit function will not have the class applied to it automatically.

142
00:10:30.890 --> 00:10:34.810
There's a reason for this but we'll cover that soon enough for now.

143
00:10:34.810 --> 00:10:40.570
Just know that if you want to use the class on the editor then you'll need to apply it manually while

144
00:10:40.570 --> 00:10:43.720
the front and we'll have it applied automatically.

145
00:10:43.720 --> 00:10:46.750
All right that should do it for now in the next lecture.

146
00:10:46.750 --> 00:10:50.790
We'll take a look at how to allow the user to modify these values.
