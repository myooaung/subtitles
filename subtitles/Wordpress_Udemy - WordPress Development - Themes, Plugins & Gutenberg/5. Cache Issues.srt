1
00:00:07,840 --> 00:00:14,260
One of the most common annoyances web developers face is caching caching is a pretty basic concept.

2
00:00:14,260 --> 00:00:17,370
Whenever you visit a site you're downloading files.

3
00:00:17,380 --> 00:00:20,200
These range from C assess to image files.

4
00:00:20,200 --> 00:00:25,570
The web would be quite slow if you had to download those same files over and over again.

5
00:00:25,900 --> 00:00:31,690
To solve this your browser will store copies of those files and then load those copies rather than downloading

6
00:00:31,690 --> 00:00:33,240
the same files again.

7
00:00:33,280 --> 00:00:37,540
This provides a better user experience overall as developers.

8
00:00:37,570 --> 00:00:41,730
We want this but not during the development phase of a plug in or theme.

9
00:00:41,800 --> 00:00:47,980
If I made a change to a C Ss file then I won't be able to see those changes as the browser will load

10
00:00:47,980 --> 00:00:50,550
the cached version rather than the updated version.

11
00:00:53,180 --> 00:00:56,420
Right now I have my browser opened up to the home page.

12
00:00:56,420 --> 00:01:00,900
I'm going to press F twelve on my keyboard to open up the developer tools.

13
00:01:01,010 --> 00:01:05,030
One of the most helpful tabs is the Network tab select that tab.

14
00:01:05,030 --> 00:01:11,150
Now this tab will display a list of files that have been downloaded and how long it took to download

15
00:01:11,150 --> 00:01:11,930
them.

16
00:01:11,930 --> 00:01:18,140
It also keep track of the order downloaded and size so you may be thinking how does this relate to cash.

17
00:01:18,800 --> 00:01:24,050
Well this time provides some really helpful information to determine whether a file was cached or not

18
00:01:24,530 --> 00:01:26,270
before we view what's cached.

19
00:01:26,270 --> 00:01:27,980
Let's filter the results.

20
00:01:27,980 --> 00:01:34,670
Right now the Network tab will display every single file downloaded I'm going to filter this to only

21
00:01:34,670 --> 00:01:38,300
display C Ss files so that this doesn't get cluttered.

22
00:01:38,330 --> 00:01:39,990
I want you to do the same.

23
00:01:40,010 --> 00:01:47,120
Once you have the CSL filter on refresh the page the page shouldn't load normally but let's focus on

24
00:01:47,120 --> 00:01:48,290
the Network tab.

25
00:01:48,350 --> 00:01:54,080
Taking a closer look at the science column you'll see that the browser only loaded cached versions of

26
00:01:54,080 --> 00:01:55,170
the files.

27
00:01:55,220 --> 00:02:00,530
It doesn't matter how many times you refresh the page it will always load these files from the cache

28
00:02:01,220 --> 00:02:04,440
any changes we make will not be reflected on the page.

29
00:02:04,460 --> 00:02:06,850
There are a couple of ways to get around this.

30
00:02:06,860 --> 00:02:11,780
The first immediate option is to check this box that says disable cache.

31
00:02:11,780 --> 00:02:14,120
I don't recommend you check this box.

32
00:02:14,120 --> 00:02:19,550
While this does allow the latest version to load this option will affect all sites we visit.

33
00:02:19,550 --> 00:02:26,390
This includes Facebook Youtube etc. If I hover my mouse over this option then you'll also see that the

34
00:02:26,390 --> 00:02:30,450
developer tools have to be opened up in order for this option to work.

35
00:02:30,470 --> 00:02:32,750
I'm going to uncheck this box.

36
00:02:32,750 --> 00:02:37,420
The second solution would be to press control F5 on our keyboards.

37
00:02:37,430 --> 00:02:42,080
This will force the browser to clear the cache for the current site and refresh the page.

38
00:02:42,260 --> 00:02:46,900
After a while you'll see that the true size of each file is displayed.

39
00:02:46,940 --> 00:02:51,780
This indicates that the file was downloaded from the server and not the browsers cache.

40
00:02:51,890 --> 00:02:54,150
This works but it isn't ideal.

41
00:02:54,170 --> 00:02:59,940
I hate having to refresh the page twice because I forgot to clear the cache on the first refresh.

42
00:03:00,020 --> 00:03:04,420
The ideal solution would be to trick the browser into downloading the file.

43
00:03:04,550 --> 00:03:05,870
Let me show you what I mean.

44
00:03:05,960 --> 00:03:11,660
If you look at the file names you'll notice that WordPress adds a query parameter called br which is

45
00:03:11,660 --> 00:03:13,060
short for version.

46
00:03:13,400 --> 00:03:16,860
The value for this will be the actual version of WordPress.

47
00:03:16,880 --> 00:03:22,190
This simple trick forces the browser to download the latest version of the file if work presses update

48
00:03:22,180 --> 00:03:22,720
it.

49
00:03:22,850 --> 00:03:24,220
It works rather well.

50
00:03:24,290 --> 00:03:29,300
However if I refresh the page again then you'll see that the version never changes.

51
00:03:29,300 --> 00:03:33,870
This works perfectly for upgrades but not so much for development.

52
00:03:33,890 --> 00:03:36,650
Luckily we can modify this behavior easily.

53
00:03:37,010 --> 00:03:39,850
Let's open our editors and view the NQ file.

54
00:03:39,860 --> 00:03:41,890
We worked on in the previous election.

55
00:03:42,080 --> 00:03:48,080
We're going to start with the style sheets first the WP register style function we're using here has

56
00:03:48,110 --> 00:03:50,870
a fourth parameter called version.

57
00:03:50,870 --> 00:03:57,320
Right now we're only taking advantage of the first to the third parameter it would be an array of dependencies

58
00:03:57,470 --> 00:04:00,150
but none of our files required that kind of power.

59
00:04:00,170 --> 00:04:03,110
So I'm going to pass in an empty array.

60
00:04:03,170 --> 00:04:08,840
The fourth parameter allows us to pass in a custom version number if we don't want to use the word press

61
00:04:08,840 --> 00:04:10,790
version number by default.

62
00:04:10,790 --> 00:04:16,930
This will be set to false which will let WordPress pick the version instead of hard coding a version.

63
00:04:17,000 --> 00:04:23,430
I'm going to pass in the time function now I'll refresh the page and view the network tab.

64
00:04:23,510 --> 00:04:28,600
I applied this to the Google font so we should see the file size appearing for that file.

65
00:04:28,760 --> 00:04:32,240
As expected the file is now loading from the server.

66
00:04:32,360 --> 00:04:38,090
If I were to hover my mouse over the file name you'll see that the full year URL includes the version

67
00:04:38,090 --> 00:04:43,310
query parameter the value for this will be the value of the time function.

68
00:04:43,310 --> 00:04:46,030
This is great but it can definitely be improved.

69
00:04:46,430 --> 00:04:48,470
Let's switch back to the editor.

70
00:04:48,590 --> 00:04:51,660
The next logical step would be to update its function.

71
00:04:51,740 --> 00:04:53,640
But there's a problem with that.

72
00:04:53,660 --> 00:04:56,040
Let's say we were finished with our theme.

73
00:04:56,210 --> 00:04:59,800
We would have to come back to this file and update the values again.

74
00:04:59,960 --> 00:05:06,590
Then if we wanted to make changes we would have to update the values once more before moving forward.

75
00:05:06,590 --> 00:05:09,540
That can be a bit annoying but this can be solved easily.

76
00:05:10,010 --> 00:05:13,630
I'm going to open the functions file inside this file.

77
00:05:13,640 --> 00:05:15,800
We have a section called setup.

78
00:05:15,800 --> 00:05:21,620
Personally I like to create a constant that determines whether we're in development mode or not.

79
00:05:21,620 --> 00:05:26,680
You don't have to do this but I recommend you do as it'll make your life easier.

80
00:05:26,690 --> 00:05:35,690
I'm going to create a constant named J U Dev mode with a value of true.

81
00:05:35,920 --> 00:05:41,740
Then let's go back to the queue file and create a variable named version right below the you arrive

82
00:05:41,740 --> 00:05:42,560
variable.

83
00:05:42,700 --> 00:05:47,230
The value for this will be J you Dev mode time false

84
00:05:49,940 --> 00:05:50,680
basically.

85
00:05:50,720 --> 00:05:53,010
I'm checking if development mode is on.

86
00:05:53,240 --> 00:05:58,120
If it is all set the version to the value returned by the time function.

87
00:05:58,280 --> 00:06:04,100
If development is off then all set the value to false below in the register function.

88
00:06:04,100 --> 00:06:12,170
I'm going to replace the tying function with the version variable like so now I'm going to do the same

89
00:06:12,170 --> 00:06:14,030
for the rest of the register functions

90
00:06:23,110 --> 00:06:24,580
for the script functions.

91
00:06:24,610 --> 00:06:30,630
I'm going to update these from false to the version variable.

92
00:06:30,700 --> 00:06:31,600
That's it.

93
00:06:31,600 --> 00:06:34,460
Now we don't have to update all of this in the future.

94
00:06:34,600 --> 00:06:39,630
Switching between development and production mode it's as simple as modifying one value.

95
00:06:39,760 --> 00:06:45,510
Let's refresh the page and see the changes the page should load normally without any errors.

96
00:06:45,520 --> 00:06:51,070
If we were to view the network tab then you'll see the version for our files are completely dependent

97
00:06:51,130 --> 00:06:52,340
on the current time.

98
00:06:52,540 --> 00:06:54,640
We no longer have to worry about caching.
