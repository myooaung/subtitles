1
00:00:07,540 --> 00:00:11,140
Let's begin exploring some of the built in modules from node.

2
00:00:11,290 --> 00:00:15,360
Right now I'm on the official no documentation page here.

3
00:00:15,370 --> 00:00:19,670
You'll find information about using Node to its fullest on the sidebar.

4
00:00:19,690 --> 00:00:23,600
You'll find a list of modules that come with node by default.

5
00:00:23,650 --> 00:00:28,940
I want you to click on utilities the utilities module is a pretty simple one.

6
00:00:29,020 --> 00:00:33,730
It provides you with methods that can help you with string manipulation and so much more.

7
00:00:33,970 --> 00:00:36,820
If you scroll down you'll see a basic example.

8
00:00:36,880 --> 00:00:41,430
You'll notice that node recommends you use const instead of VaR.

9
00:00:41,530 --> 00:00:47,220
This is a brand new javascript feature that I don't expect you to know in the next couple of lectures.

10
00:00:47,260 --> 00:00:51,370
We'll definitely explore some of the new features available in JavaScript.

11
00:00:51,370 --> 00:00:53,960
For now we're going to keep things simple.

12
00:00:54,040 --> 00:00:57,960
We are going to continue using var instead of const.

13
00:00:57,970 --> 00:01:03,170
Don't worry you won't experience any problems by using var instead of cost.

14
00:01:03,190 --> 00:01:03,550
All right.

15
00:01:03,760 --> 00:01:05,250
Let's use this module.

16
00:01:05,290 --> 00:01:14,160
I'm going to comment out the code inside the index file create a variable named you till and require

17
00:01:14,190 --> 00:01:17,500
the module you till.

18
00:01:17,710 --> 00:01:24,250
This is the same code on the documentation as you can see it's recommended you name your variable after

19
00:01:24,250 --> 00:01:25,510
the module name.

20
00:01:25,510 --> 00:01:31,360
You are allowed to change the variable name to whatever you want but I don't recommend it doing it like

21
00:01:31,360 --> 00:01:31,690
this.

22
00:01:31,690 --> 00:01:34,900
Just makes your code easier to read and manage.

23
00:01:35,050 --> 00:01:41,020
One thing you'll notice is that I'm just requiring the module without having to specify a path node

24
00:01:41,020 --> 00:01:43,240
modules are global modules.

25
00:01:43,300 --> 00:01:49,900
There are usually two kinds of modules ordeals that exist inside your directory and modules that exist

26
00:01:49,900 --> 00:01:54,060
globally node will search for modules in three locations.

27
00:01:54,220 --> 00:02:00,700
A will search for the module inside your directory then it'll search for the module in a directory called

28
00:02:00,760 --> 00:02:02,950
Node underscore modules.

29
00:02:02,950 --> 00:02:09,370
Lastly it'll search for the module in the global modules directory global modules can be used anywhere

30
00:02:09,370 --> 00:02:10,540
on your system.

31
00:02:10,750 --> 00:02:16,060
You can use global modules inside your documents desktop and even your windows folder.

32
00:02:16,080 --> 00:02:22,660
The you till module is a global module so we do not need to worry about inputting a full path node is

33
00:02:22,660 --> 00:02:25,400
smart enough to find this module for you.

34
00:02:25,450 --> 00:02:26,940
Let's use this module.

35
00:02:26,980 --> 00:02:32,200
It can be used the same way we used our own custom module in the previous lecture.

36
00:02:32,290 --> 00:02:37,930
This module returns an object with properties and methods that can help us with formatting I'm going

37
00:02:37,930 --> 00:02:44,100
to log a message and inside this log I'm going to use the you'd still object and call the method format.

38
00:02:46,390 --> 00:02:51,690
This is a method that will take in a string and replace certain parts of a string with other values.

39
00:02:51,730 --> 00:02:56,610
I'm going to input the following Hello percent sign s exclamation point.

40
00:02:59,170 --> 00:03:02,320
The percent sign S is a placeholder.

41
00:03:02,320 --> 00:03:04,420
You shouldn't be familiar with this concept.

42
00:03:04,450 --> 00:03:08,380
It works similar to this string replace p p function.

43
00:03:08,380 --> 00:03:12,190
The percent s can be replaced with any value you want.

44
00:03:12,190 --> 00:03:15,880
The second parameter to this method is the word world.

45
00:03:15,970 --> 00:03:24,100
I'm going to run this now using the node index command just like that we should see the message.

46
00:03:24,100 --> 00:03:25,180
Hello world.

47
00:03:25,210 --> 00:03:28,600
It's a very simple function and it's provided to you by note.

48
00:03:28,750 --> 00:03:32,410
All you have to do is include the utilities module.

49
00:03:32,410 --> 00:03:34,890
You can go to the documentation and click on this.

50
00:03:34,900 --> 00:03:38,460
You still dot format link to learn more about this method.

51
00:03:38,500 --> 00:03:43,370
You can do a lot with this method and there are plenty of examples on how to use it.

52
00:03:43,390 --> 00:03:46,790
This is just one of the modules provided to you by note.

53
00:03:46,840 --> 00:03:51,480
There are dozens of them available and you're free to check them out for the most part.

54
00:03:51,520 --> 00:03:55,120
We won't be using these modules ourselves as we don't really need them.

55
00:03:55,540 --> 00:04:02,290
However the library we do plan on using we'll use these modules along with third party modules.

56
00:04:02,290 --> 00:04:04,920
Let's explore how to use third party modules.

57
00:04:04,930 --> 00:04:12,640
Now in the resource section of this lecture I provide a link to a site called NPM NPM is short for node

58
00:04:12,670 --> 00:04:14,200
package manager.

59
00:04:14,200 --> 00:04:16,930
This is the official site for node modules.

60
00:04:17,110 --> 00:04:22,600
Here you'll find modules where users can upload their own modules and make it available for others to

61
00:04:22,600 --> 00:04:23,780
use and download.

62
00:04:23,770 --> 00:04:28,950
Let's search for a module called H API.

63
00:04:28,970 --> 00:04:34,140
This is a module that provides a framework for building websites and single page apps.

64
00:04:34,160 --> 00:04:40,280
It's one of my favorite frameworks along with admonish J.S. for building Web sites using Node installing

65
00:04:40,280 --> 00:04:46,430
a module is pretty easy on the right sidebar you'll see NPM provides this command that you can input

66
00:04:46,430 --> 00:04:47,380
to install it.

67
00:04:47,540 --> 00:04:58,930
Let's use this command now type in npm install H API the NPM command is created for you by node when

68
00:04:58,930 --> 00:05:05,150
you installed it actually let's use the NPM command by itself and see what we get.

69
00:05:05,440 --> 00:05:11,020
As you can see we get a list of sub commands you can use with this command and some additional information

70
00:05:11,020 --> 00:05:12,200
about this command.

71
00:05:12,400 --> 00:05:15,310
Commands are allowed to have sub commands.

72
00:05:15,310 --> 00:05:20,890
The reason for this is is because it makes it easier to manage so many commands.

73
00:05:20,890 --> 00:05:25,840
The NPM command is a way for you to communicate with the NPM site.

74
00:05:25,840 --> 00:05:31,690
One of the sub commands you can use is the install command which will download any module you want from

75
00:05:31,690 --> 00:05:33,090
the NPM site.

76
00:05:33,160 --> 00:05:44,310
The module I want to install is called a GPI so we pass him the NPM install H API command run this command.

77
00:05:44,310 --> 00:05:46,390
This may take a while for some of you.

78
00:05:46,650 --> 00:05:52,710
You'll see that node output in some messages about the installation for the most part you don't have

79
00:05:52,710 --> 00:05:53,980
to worry about this.

80
00:05:54,090 --> 00:05:58,260
You may see some errors but we can safely ignore those for now.

81
00:05:58,260 --> 00:06:04,800
Once the installation is a success you'll find that node creates this folder called Node underscore

82
00:06:04,800 --> 00:06:06,780
modules by default.

83
00:06:06,870 --> 00:06:12,010
All modules that are created by a third party vendor will be stored inside this folder.

84
00:06:12,090 --> 00:06:16,550
You can open this folder and you'll find another folder called HP.

85
00:06:16,650 --> 00:06:23,490
Just like that we've installed another module so you may be wondering why use the NPM command instead

86
00:06:23,490 --> 00:06:25,980
of just downloading the module ourselves.

87
00:06:25,990 --> 00:06:31,230
Well the NPM does a lot behind the scenes that takes care of setting all this up for you.

88
00:06:31,230 --> 00:06:37,110
At first glance it's not really visible until you start using modules that are more complex than HP.

89
00:06:37,830 --> 00:06:41,690
Let me show you what I mean in the resource section of this lecture.

90
00:06:41,730 --> 00:06:47,990
I provide a link to a framework called Express Express is a framework that makes it easy to create Web

91
00:06:47,990 --> 00:06:50,810
sites and single page apps just like happy.

92
00:06:50,910 --> 00:06:56,920
It is currently the most popular framework available used by many developers around the world.

93
00:06:56,910 --> 00:06:59,310
It's considered an industry standard.

94
00:06:59,310 --> 00:07:03,660
If you take a closer look you'll find this command that installs Express.

95
00:07:03,690 --> 00:07:08,490
You'll also see that there's this additional text dash dash save.

96
00:07:08,670 --> 00:07:10,260
We won't be using this.

97
00:07:10,260 --> 00:07:13,710
I promise in a future lecture we will go over what this does.

98
00:07:13,740 --> 00:07:18,060
But for now I'm going to keep things simple inside the command line.

99
00:07:18,060 --> 00:07:22,310
I want you to input the commands npm install Express.

100
00:07:22,500 --> 00:07:24,830
This will install express for you.

101
00:07:24,870 --> 00:07:25,760
It may take a while

102
00:07:29,670 --> 00:07:31,280
after installing express.

103
00:07:31,350 --> 00:07:36,640
I want you to take a look at the node underscore modules folder again right away.

104
00:07:36,660 --> 00:07:40,800
You'll notice a whole lot of other modules were installed besides Express.

105
00:07:40,800 --> 00:07:41,340
But why.

106
00:07:41,970 --> 00:07:46,550
Well let's open the Express folder for a moment inside this folder.

107
00:07:46,620 --> 00:07:49,470
You'll find a file called package dot Jason.

108
00:07:49,860 --> 00:07:53,850
We haven't gone over what this file is yet but we can ignore a lot of it.

109
00:07:54,240 --> 00:07:58,420
This is just a file that contains settings related to a module.

110
00:07:58,500 --> 00:08:02,940
I want you to scroll down until you find a property called dependencies.

111
00:08:02,940 --> 00:08:09,270
This property allows the developer to specify if the module requires other modules to work just like

112
00:08:09,270 --> 00:08:10,770
in our previous examples.

113
00:08:10,800 --> 00:08:15,180
We required certain modules to make our code work the way we wanted it to.

114
00:08:15,180 --> 00:08:20,330
This same concept can also apply to other third party modules as you can see.

115
00:08:20,370 --> 00:08:24,420
EXPRESS relies on other modules in order for it to work.

116
00:08:24,600 --> 00:08:31,230
Node will look at this and begin installing all these modules next to each module name is the version

117
00:08:31,230 --> 00:08:32,100
it should download.

118
00:08:32,490 --> 00:08:36,060
Let's go down the rabbit hole and see how far we can go.

119
00:08:36,060 --> 00:08:40,500
The very first module express requires is the accept module.

120
00:08:40,650 --> 00:08:47,170
Let's look for this folder and sure enough we find this folder inside the node underscore modules folder.

121
00:08:47,190 --> 00:08:49,870
Open this folder and open the package Dot.

122
00:08:49,920 --> 00:08:58,530
Jason File once again I want you to scroll down to beat dependencies list and you'll see this module

123
00:08:58,560 --> 00:09:01,050
requires a set of more modules.

124
00:09:01,110 --> 00:09:02,250
Let's keep going.

125
00:09:02,250 --> 00:09:06,270
One of the models required is the mime dash types module.

126
00:09:06,270 --> 00:09:09,680
I want you to open this module and view its package.

127
00:09:09,720 --> 00:09:15,040
Jason File you'll end up seeing more dependencies.

128
00:09:15,060 --> 00:09:20,880
This will go on and on until every module required has been installed with the correct version.

129
00:09:20,880 --> 00:09:26,160
You can already imagine the amount of work that has to be done just to make one module work.

130
00:09:26,160 --> 00:09:32,380
It's always best to just use this command as NPM will take care of managing all of this for you.

131
00:09:32,400 --> 00:09:38,670
Now that we have express and happy installed we can use it just like any other module inside the index

132
00:09:38,670 --> 00:09:45,260
file create a variable named Happy and require the happy module.

133
00:09:45,410 --> 00:09:48,600
You can now use the happy module however you like.

134
00:09:48,650 --> 00:09:49,940
It's that simple.

135
00:09:49,940 --> 00:09:54,360
I won't be going over how to use this module at it's not required to learn it.

136
00:09:54,410 --> 00:09:58,020
I just wanted to show you how to install third party modules.

137
00:09:58,040 --> 00:10:03,920
I'm going to delete the node underscore modules folder as we don't need to use any of this code for

138
00:10:03,920 --> 00:10:06,890
our project that does it for modules.

139
00:10:06,890 --> 00:10:10,400
There's a lot more we can talk about but we don't need to go that far.

140
00:10:10,460 --> 00:10:14,750
We don't need to create our own servers or worry about processing data.

141
00:10:14,750 --> 00:10:19,050
We have p p Apache and WordPress to do that for us.

142
00:10:19,070 --> 00:10:25,010
The reason we had to learn node is that so we can use some of the tools that will help us with creating

143
00:10:25,010 --> 00:10:27,540
dude Berg blocks in the next lecture.

144
00:10:27,620 --> 00:10:30,680
We'll explore one of these tools which is called Web pack.
