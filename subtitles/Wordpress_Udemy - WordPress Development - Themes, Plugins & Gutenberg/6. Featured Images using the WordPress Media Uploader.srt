1
00:00:07,250 --> 00:00:10,130
In this lecture we're going to tackle two things.

2
00:00:10,130 --> 00:00:14,930
First we're going to make the options we created in this section work as intended.

3
00:00:14,930 --> 00:00:20,350
The second task is to use the media uploader to set the featured image for a recipe.

4
00:00:20,390 --> 00:00:26,930
The first option we have is whether it's required for users to log in to rate a recipe in the rate recipe

5
00:00:26,930 --> 00:00:27,650
function.

6
00:00:27,650 --> 00:00:30,080
I'm going to grab the R ops option

7
00:00:34,200 --> 00:00:36,360
then I'm going to check for two things.

8
00:00:36,360 --> 00:00:42,240
I'm going to check if the user is not logged in using the is user log in function and then I'm going

9
00:00:42,240 --> 00:00:45,460
to compare the rating long required Option 2 to

10
00:00:49,910 --> 00:00:51,800
if both statements return true.

11
00:00:51,890 --> 00:00:57,430
Then we will want to kill the script because the user is indeed required to log in to rate a recipe.

12
00:00:57,470 --> 00:01:01,090
I'll have to move the output variable above so that this will work.

13
00:01:02,630 --> 00:01:05,770
Next I'm going to update the short code function.

14
00:01:06,230 --> 00:01:12,080
If the user is not logged in and we require the user to be logged in to create a recipe then we'll display

15
00:01:12,080 --> 00:01:12,920
a message to them.

16
00:01:13,460 --> 00:01:18,470
Once again grab the ah opt option and make the same conditional statement.

17
00:01:18,470 --> 00:01:19,100
Check again

18
00:01:25,420 --> 00:01:31,360
make sure to update the conditional to use the recipe submission log and required instead.

19
00:01:31,360 --> 00:01:34,940
If both statements return true I'm going to output the message.

20
00:01:34,990 --> 00:01:37,600
You must be logged in to submit a recipe

21
00:01:40,380 --> 00:01:45,470
let's test this out really quick log out and then visit the submit recipe page.

22
00:01:45,570 --> 00:01:51,040
Previously I saved my option to require users to log in to submit a recipe.

23
00:01:51,090 --> 00:01:55,340
Therefore I should see this message telling me I need to be logged in.

24
00:01:55,620 --> 00:01:59,490
Now I want you to log in and try seeing if you can view the form again.

25
00:02:01,240 --> 00:02:03,180
If you can then that's great.

26
00:02:03,190 --> 00:02:07,480
Now that we've made the two options work let's move on to the next problem.

27
00:02:07,480 --> 00:02:11,930
I want users to be able to upload an image and set a featured image.

28
00:02:11,950 --> 00:02:15,000
There are two ways we can go about accomplishing this.

29
00:02:15,010 --> 00:02:20,700
We can create an upload button and then process that upload or we can just use the uploader WordPress

30
00:02:20,800 --> 00:02:22,750
provides for us already.

31
00:02:22,870 --> 00:02:25,960
Try creating a new recipe on the sidebar.

32
00:02:25,960 --> 00:02:29,090
We have the option of setting a featured image.

33
00:02:29,110 --> 00:02:30,280
Click the button.

34
00:02:30,340 --> 00:02:34,910
This model will pop up displaying all the images you previously uploaded.

35
00:02:34,930 --> 00:02:37,640
You even have the option of uploading a new one.

36
00:02:37,690 --> 00:02:40,210
This is what's called the media uploader.

37
00:02:40,240 --> 00:02:42,680
We can use this in our plugins and themes.

38
00:02:42,700 --> 00:02:44,970
Let's learn how to do so.

39
00:02:45,010 --> 00:02:50,830
First we need to include the files that will take care of styling and managing the model inside the

40
00:02:50,860 --> 00:02:52,470
front and cue file.

41
00:02:52,480 --> 00:02:58,710
We're going to use a special function called WP and Q media.

42
00:02:58,780 --> 00:03:02,560
This will in Q all files related to the media uploader.

43
00:03:02,560 --> 00:03:09,970
Now we can use the media uploader in our page open the recipe create or short code template right before

44
00:03:09,970 --> 00:03:10,870
the submit button.

45
00:03:10,870 --> 00:03:19,130
I'm going to paste in some HDMI out nothing too special about this team out l pause the video if you

46
00:03:19,130 --> 00:03:21,260
need to have what I have.

47
00:03:21,260 --> 00:03:23,400
Here's what's going on in the HCM l.

48
00:03:23,540 --> 00:03:29,600
First we have this label with a link we will make it so that if the user clicks this link then the media

49
00:03:29,630 --> 00:03:31,090
uploader will pop up.

50
00:03:31,250 --> 00:03:36,170
Then we have an image tag which will allow the user to preview their selection.

51
00:03:36,170 --> 00:03:39,560
The most important tag is the hidden input field.

52
00:03:39,560 --> 00:03:44,720
This will be sent to the process function and it's what WordPress needs in order to know what image

53
00:03:44,720 --> 00:03:45,790
the user selected.

54
00:03:46,280 --> 00:03:49,490
All you need to send is the idea of the image.

55
00:03:49,550 --> 00:03:54,340
Let's make this part of the form functional open the main dot J.S. file.

56
00:03:54,410 --> 00:04:00,530
This is the same file with the log in and authentication J.S. code right above the submit code will

57
00:04:00,560 --> 00:04:03,310
add the code to make the media upload a work.

58
00:04:03,410 --> 00:04:10,700
Create a variable named featured frame this variable we assign to the value returned by the WP dot media

59
00:04:10,700 --> 00:04:19,210
method this method was loaded by WordPress when you include the required files to learn more about this

60
00:04:19,210 --> 00:04:19,810
method.

61
00:04:19,840 --> 00:04:23,110
I provide a link in the resource section of this lecture.

62
00:04:23,200 --> 00:04:26,220
Here you'll find a long example on how to use this.

63
00:04:26,260 --> 00:04:30,460
You can click this link for more information about the WP object.

64
00:04:30,460 --> 00:04:35,070
Here you'll find information about the javascript utilities WordPress has to offer.

65
00:04:35,080 --> 00:04:37,280
Let's go back to our file.

66
00:04:37,300 --> 00:04:43,060
This method will return a media object which you can use later to open the media uploader.

67
00:04:43,060 --> 00:04:47,550
This method has one parameter which is an object of properties you can set.

68
00:04:47,560 --> 00:04:49,330
The first is the title.

69
00:04:49,330 --> 00:04:54,830
I'm going to set this to select or upload media.

70
00:04:55,060 --> 00:04:57,870
The second property is the button property.

71
00:04:57,910 --> 00:05:03,340
This property expects another object of properties which you can set inside this object.

72
00:05:03,340 --> 00:05:12,380
I'm going to set the tax property to use this media the last property I want to set is the multiple

73
00:05:12,380 --> 00:05:16,800
property which will be set to false.

74
00:05:16,900 --> 00:05:22,050
This will make it so that users can only select one image instead of multiple images.

75
00:05:22,120 --> 00:05:26,910
We only have one feature to image so we will only want one selected image.

76
00:05:26,920 --> 00:05:31,400
This code will initialize the media uploader but it will not display it.

77
00:05:31,480 --> 00:05:36,360
We only want the media uploader to display if the user clicks on the upload link.

78
00:05:36,460 --> 00:05:39,340
To do this we'll listen for a click using the J.

79
00:05:39,340 --> 00:05:43,240
Query on method the idea of the button is recipe Dash.

80
00:05:43,330 --> 00:05:46,050
I am G dash upload dash BBM

81
00:05:49,470 --> 00:05:50,220
as usual.

82
00:05:50,310 --> 00:05:54,930
We will prevent the normal behavior from happening to open the media uploader.

83
00:05:54,930 --> 00:05:57,410
You simply need to call the open method.

84
00:05:57,420 --> 00:06:02,850
This method only becomes available after you initialize the media uploader which is what we did above

85
00:06:03,540 --> 00:06:09,960
the very last thing we want to do is update the preview an input field when the user selects an image.

86
00:06:09,960 --> 00:06:13,240
The featured frame object provides a few events.

87
00:06:13,290 --> 00:06:18,310
One of these events is these select event that will be triggered when a user selects an image.

88
00:06:18,330 --> 00:06:21,150
We'll use the on method and listen for this event

89
00:06:23,890 --> 00:06:25,090
inside the function.

90
00:06:25,090 --> 00:06:28,560
We're going to create a variable called attachment.

91
00:06:28,600 --> 00:06:33,440
This variables value will be set to an object returned by a chain of methods.

92
00:06:33,460 --> 00:06:39,010
Hopefully you'll be able to follow along because we have to use a number of methods to accomplish this.

93
00:06:39,040 --> 00:06:42,310
So first up is the featured frame object.

94
00:06:42,310 --> 00:06:46,710
We're going to get the current state of the media uploader by calling the state method.

95
00:06:46,810 --> 00:06:51,440
Then we have to use the getting method to retrieve a value from the current state.

96
00:06:51,560 --> 00:06:56,960
The value we want to get is the selection property.

97
00:06:56,970 --> 00:07:00,940
This will return the currently selected item in the media uploader.

98
00:07:01,110 --> 00:07:06,360
Then we're going to call it the first method which will return the first item in the array returned

99
00:07:06,780 --> 00:07:09,580
even though we have multiple set to false.

100
00:07:09,630 --> 00:07:13,710
The media uploader will still return an array of selected objects.

101
00:07:13,710 --> 00:07:16,830
Finally the value return will be a stream.

102
00:07:16,830 --> 00:07:19,860
Therefore we need to convert it into an object.

103
00:07:19,890 --> 00:07:25,250
We'll use the method to Jason to accomplish this.

104
00:07:25,290 --> 00:07:28,020
That was a lot but hopefully you get the gist of it.

105
00:07:28,320 --> 00:07:32,690
The attachment will now be an object with properties about the image selected.

106
00:07:32,820 --> 00:07:35,340
We only care about two properties.

107
00:07:35,340 --> 00:07:42,320
I'm going to set the source attribute of the recipe dash AMG dash preview tag to the attachment.

108
00:07:42,460 --> 00:07:43,810
Your real property.

109
00:07:43,860 --> 00:07:47,430
This is the full eight CTP you are well to the full sized image

110
00:07:50,020 --> 00:07:57,310
next I want to set the value of the ah input image I.D. input to the attachment ideas property.

111
00:07:57,340 --> 00:08:02,530
This is the idea in the database and it's the idea that we'll need to assign the image to this post

112
00:08:05,250 --> 00:08:08,680
the very last step is to send it when the form is submitted.

113
00:08:08,700 --> 00:08:14,550
I'm going to create a new property called attachment ideas and said its value to the input field like

114
00:08:14,550 --> 00:08:14,940
so

115
00:08:18,980 --> 00:08:21,390
our JavaScript file is now complete.

116
00:08:21,440 --> 00:08:31,240
The next step is to process it through p p open the submit dash user dash recipe dot P HP file.

117
00:08:31,330 --> 00:08:36,850
This is the file we made to process new recipes on the front end right before we kill the script.

118
00:08:36,940 --> 00:08:42,880
Create a new conditional statement that will check if the attachment ideas post he is set and if it

119
00:08:42,880 --> 00:08:43,600
is an empty

120
00:08:51,520 --> 00:08:59,980
then we need to include the WP dash admin slash includes slash image stop BHP file processing images

121
00:08:59,980 --> 00:09:06,310
is not done on every request so it's unnecessary for wordpress to automatically load this file since

122
00:09:06,310 --> 00:09:12,640
that is the case we need to load it ourselves by loading this file we now have access to a function

123
00:09:12,640 --> 00:09:19,420
called set post thumbnail this function will assign the image to the post all it requires is the post

124
00:09:19,480 --> 00:09:25,890
I.D. and then the attachment idea itself I'm going to wrap the idea of the attachment with the ABS into

125
00:09:25,890 --> 00:09:27,940
function just for good security measure

126
00:09:30,680 --> 00:09:36,260
this would be a good time to talk about data validation we've been using many functions to sanitize

127
00:09:36,260 --> 00:09:42,200
our data but we haven't explored all of them yet in the resources section of this lecture I provide

128
00:09:42,200 --> 00:09:48,710
a link to the data validation Codex page this page contains a list of all the functions provided by

129
00:09:48,710 --> 00:09:54,830
WordPress that you can use to sanitize data feel free to book market as it's quite useful to have would

130
00:09:54,830 --> 00:10:01,730
you want to sanitize data that's about it let's test this out and see if it works I want you to create

131
00:10:01,790 --> 00:10:04,060
a new recipe and fill in all these fields

132
00:10:09,760 --> 00:10:14,380
when you select an image you should be able to see the preview right under the label.

133
00:10:14,380 --> 00:10:17,320
Submit your recipe and you should see a success message

134
00:10:19,960 --> 00:10:22,080
just to confirm if everything worked.

135
00:10:22,240 --> 00:10:28,270
Let's go to the advent dashboard and view the list of recipe posts you should be able to see our brand

136
00:10:28,270 --> 00:10:31,470
new recipe created along with the featured image assigned to it.
