1
00:00:07,780 --> 00:00:10,710
The recipe block is starting to come along really great.

2
00:00:10,720 --> 00:00:15,720
The next step is to save the values every block comes with something called attributes.

3
00:00:15,880 --> 00:00:19,490
Attributes are the custom values associated with your block.

4
00:00:19,570 --> 00:00:23,750
A few lectures ago I showed you the is selected property.

5
00:00:23,800 --> 00:00:29,370
This property will be set to True or false depending on if the user is editing our block.

6
00:00:29,380 --> 00:00:33,000
This is a property that was provided and handled by WordPress.

7
00:00:33,040 --> 00:00:38,950
We didn't have to worry about updating it or managing it values provided by WordPress are automatically

8
00:00:38,950 --> 00:00:39,750
handled.

9
00:00:39,790 --> 00:00:44,290
However any values we create ourselves have to be managed by us.

10
00:00:44,320 --> 00:00:50,070
These custom values are what WordPress calls attributes.

11
00:00:50,150 --> 00:00:55,150
Right now I'm looking at the handbook page for actual use when defining an attribute.

12
00:00:55,160 --> 00:00:57,270
You need to specify the source.

13
00:00:57,470 --> 00:01:04,850
If you look through the examples you'll see there are sources for HCM l text boolean etc. Each of these

14
00:01:04,850 --> 00:01:08,690
have a purpose but the one we'll be using is text.

15
00:01:08,690 --> 00:01:14,730
Here is what WordPress says about text use text to extract the inner text from markup.

16
00:01:15,260 --> 00:01:16,670
That's some strange wording.

17
00:01:16,700 --> 00:01:19,580
What does WordPress mean by extract.

18
00:01:19,580 --> 00:01:23,510
Well it's a bit difficult to explain right now without a proper example.

19
00:01:23,570 --> 00:01:29,270
I promise I'll break down what this means soon enough but for now just know that when creating an attribute

20
00:01:29,450 --> 00:01:32,250
you need to set what kind of value it'll store.

21
00:01:32,330 --> 00:01:39,360
You need to define the source property if you want to store HCM L then you'll need to pass an HD email

22
00:01:39,620 --> 00:01:40,670
for our example.

23
00:01:40,670 --> 00:01:44,200
Text will work just fine before we move ahead with this.

24
00:01:44,210 --> 00:01:46,420
I want you to take note of one thing.

25
00:01:46,610 --> 00:01:53,350
If you scroll down long enough you'll see that WordPress provides examples in iOS 5 and iOS next.

26
00:01:53,420 --> 00:01:57,440
It's completely possible to write this stuff without web pack and Babel.

27
00:01:57,440 --> 00:02:01,970
We will take a look at how to do these kinds of things without web pack but that will be in a future

28
00:02:01,970 --> 00:02:03,170
lecture.

29
00:02:03,170 --> 00:02:04,910
Let's go back to our script.

30
00:02:04,910 --> 00:02:08,670
I'm going to minimize the edit function so that it doesn't get in our way.

31
00:02:10,960 --> 00:02:16,760
Right above it I'm going to create a new property called attributes.

32
00:02:16,890 --> 00:02:19,890
This will be set to an object within this object.

33
00:02:19,890 --> 00:02:22,160
You need to create your custom data.

34
00:02:22,200 --> 00:02:29,160
I'm going to create five properties called ingredients cooking time utensils cooking experience and

35
00:02:29,160 --> 00:02:29,790
meal type

36
00:02:38,210 --> 00:02:40,760
each property must be set to an object.

37
00:02:40,850 --> 00:02:43,660
The object will contain the settings for your data.

38
00:02:43,760 --> 00:02:45,840
We'll start with the ingredients.

39
00:02:45,920 --> 00:02:49,100
We're going to keep it simple and justifying the source.

40
00:02:49,100 --> 00:02:52,960
Set this to text.

41
00:02:53,020 --> 00:03:00,560
Now do the same for the rest of the properties.

42
00:03:00,630 --> 00:03:05,820
We're not doing anything that would warrant any other types of data so text will work for all of our

43
00:03:05,820 --> 00:03:06,660
data.

44
00:03:06,690 --> 00:03:11,550
Now that we're press is aware of our data the next step is to display them.

45
00:03:11,550 --> 00:03:17,520
The data will be exposed in both the edit and save functions but will only concern ourselves with the

46
00:03:17,550 --> 00:03:19,020
edit function for now.

47
00:03:19,140 --> 00:03:23,620
Open the edit function and minimize the inspector controls component.

48
00:03:23,640 --> 00:03:28,410
Each list item in the block component should have a place holder for our data.

49
00:03:28,440 --> 00:03:31,530
I'm going to format this a bit so that we can see it better.

50
00:03:36,280 --> 00:03:38,140
We'll start with the ingredients.

51
00:03:38,170 --> 00:03:43,510
I'm going to replace the place holder with a pair of curly brackets inside the curly brackets.

52
00:03:43,510 --> 00:03:52,960
Input prompts dot attributes dot ingredients all your attributes are stored inside the prop start attributes

53
00:03:52,960 --> 00:03:57,230
object the data you want to access can be accessed by its name.

54
00:03:57,250 --> 00:03:58,810
It's pretty straightforward.

55
00:03:58,810 --> 00:04:01,190
I'm going to now do the same for the rest.

56
00:04:01,240 --> 00:04:03,010
I want you to do the same.

57
00:04:03,010 --> 00:04:05,890
Be sure to format the H2 UML for readability

58
00:04:14,500 --> 00:04:20,770
let's give things a test see into the block's directory and run the commands NPM run Dev

59
00:04:26,180 --> 00:04:29,500
next view your recipe posts on the admin dashboard.

60
00:04:29,570 --> 00:04:34,040
You may end up seeing a message saying that the block has been modified externally.

61
00:04:34,070 --> 00:04:38,490
This is to be expected since we've made changes to the way the block works.

62
00:04:38,570 --> 00:04:44,230
You may end up having to rebrand the block to see the changes pause the video and do so now.

63
00:04:44,240 --> 00:04:49,770
If you have to the block should be appearing without any errors.

64
00:04:49,870 --> 00:04:52,680
The place holders have been replaced with the data.

65
00:04:52,750 --> 00:04:56,440
However you won't really see anything since the data is empty.

66
00:04:56,440 --> 00:05:01,560
We also can't update it since the form fields are not connected to our attributes.

67
00:05:01,600 --> 00:05:07,630
First let's verify that the data is being displayed on the block itself back inside the editor at a

68
00:05:07,630 --> 00:05:10,990
property to the ingredients attribute called default

69
00:05:18,120 --> 00:05:22,580
the default property is used to assign a default value to an attribute.

70
00:05:22,590 --> 00:05:29,700
I'm going to set this to test go ahead and refresh the page if you refresh.

71
00:05:29,760 --> 00:05:32,160
You may see the message Hello appear.

72
00:05:32,340 --> 00:05:37,290
I'll explain while this is happening in a future lecture but you will need to delete this block and

73
00:05:37,290 --> 00:05:39,120
add the recipe back again

74
00:05:43,410 --> 00:05:47,110
every list items should be empty except for the ingredients items.

75
00:05:47,160 --> 00:05:49,950
It shouldn't be displaying the text test.

76
00:05:49,950 --> 00:05:54,170
This confirms the edit function is displaying the data dynamically.

77
00:05:54,170 --> 00:05:56,210
All right let's keep moving forward.

78
00:05:56,280 --> 00:06:01,760
The next step is to tie the input fields to our block back inside the scripts.

79
00:06:01,800 --> 00:06:09,850
I'm going to remove the default value as we won't be needing it then let's scroll down to the inspector

80
00:06:09,850 --> 00:06:12,720
controls component just by looking at this.

81
00:06:12,730 --> 00:06:16,750
What do you think we'll have to change to tie the data to these fields.

82
00:06:16,750 --> 00:06:21,990
If you guessed the on change events and value actually view then you'd be correct.

83
00:06:22,000 --> 00:06:27,120
Right now we're logging the new value however we want to update the attribute.

84
00:06:27,130 --> 00:06:30,330
This isn't handled for us inside this function.

85
00:06:30,340 --> 00:06:38,670
I'm going to use the prompts dot set attribute function the set attributes function will update any

86
00:06:38,670 --> 00:06:44,640
data in our attributes whenever the attributes are updated then any components that use the attributes

87
00:06:44,640 --> 00:06:46,180
will be updated as well.

88
00:06:46,200 --> 00:06:47,850
This includes our block.

89
00:06:47,850 --> 00:06:53,340
This function will accept it in an object the object must contain the properties you want to change

90
00:06:53,370 --> 00:06:55,230
and their new values.

91
00:06:55,230 --> 00:07:02,260
I'm going to pass in one property called ingredients and set it to new value.

92
00:07:02,280 --> 00:07:03,530
We're not finished yet.

93
00:07:03,540 --> 00:07:08,150
We'll also want to update the value attribute instead of a string.

94
00:07:08,160 --> 00:07:16,240
We're going to replace this with the prompts dot attributes dot ingredients property the text control

95
00:07:16,240 --> 00:07:21,940
component will now display the value of ingredients and update it whenever a change has occurred.

96
00:07:21,940 --> 00:07:25,410
I'm now going to do the same for the rest of the text components.

97
00:07:25,450 --> 00:07:28,200
Be sure to set each one to their respect value.

98
00:07:47,420 --> 00:07:49,640
The process is pretty straightforward.

99
00:07:49,640 --> 00:07:54,590
You should have also updated the select components as the attributes behave the same way.

100
00:07:55,130 --> 00:07:59,180
There are two more things we'll need to do before we declare this complete.

101
00:07:59,180 --> 00:08:03,410
First the select components kind of need a default value.

102
00:08:03,410 --> 00:08:09,200
WordPress won't give you much heat if you don't set a default value but I recommend it as a good practice.

103
00:08:09,200 --> 00:08:15,500
I'm going to give the cooking experience attribute a default value of beginner and the meal type attribute

104
00:08:15,540 --> 00:08:17,390
a default value of breakfast

105
00:08:23,500 --> 00:08:29,160
the second thing we'll need to do is actually optional right now we're hard coding the functions into

106
00:08:29,160 --> 00:08:30,250
the attributes.

107
00:08:30,250 --> 00:08:35,070
However you can define the functions outside of the component to make things cleaner.

108
00:08:35,410 --> 00:08:37,390
Right above the return statement.

109
00:08:37,390 --> 00:08:45,780
I'm going to create a constant named update ingredients then I'm going to copy the function and set

110
00:08:45,780 --> 00:08:47,400
it as the value for the constant

111
00:08:55,270 --> 00:08:59,680
the last step is to replace the on change event with the function itself.

112
00:08:59,920 --> 00:09:04,240
Something I want to note is that you should not add the parentheses after the name.

113
00:09:04,390 --> 00:09:08,020
If you were to add the parentheses then you would be calling the function.

114
00:09:08,110 --> 00:09:11,380
We only want to show you this function when the event is triggered.

115
00:09:11,500 --> 00:09:13,700
Just passing in the name is fine.

116
00:09:13,870 --> 00:09:17,030
I'm only going to do this for the ingredients input.

117
00:09:17,080 --> 00:09:21,580
I prefer to define the function inside the attribute unless I'm doing filtering.

118
00:09:21,580 --> 00:09:25,120
Feel free to do the same if it makes things readable for you.

119
00:09:25,240 --> 00:09:29,650
All right save your changes and let's test this out refresh the page.

120
00:09:29,650 --> 00:09:32,020
You may have to remove and add the blocking in

121
00:09:38,520 --> 00:09:39,890
once you have that settled.

122
00:09:39,960 --> 00:09:44,970
You should see both meal type and cooking experience such of their default values.

123
00:09:45,090 --> 00:09:49,680
If you were to update any of the input fields then everything should follow suit.

124
00:09:49,680 --> 00:09:51,080
This is fantastic.

125
00:09:51,090 --> 00:09:54,150
I'm going to fill in all the fields and save my changes.

126
00:09:54,210 --> 00:09:55,410
I want you to do the same

127
00:09:58,080 --> 00:10:02,700
refresh the editor you will see that the values didn't get saved properly.

128
00:10:02,700 --> 00:10:05,790
Instead they all have Hello as the value.

129
00:10:05,910 --> 00:10:13,150
This is happening because we need to update the same function and render the block.

130
00:10:13,210 --> 00:10:15,740
It's been a while since we've taken a look at this chart.

131
00:10:15,850 --> 00:10:18,550
So far we've covered the first four steps.

132
00:10:18,550 --> 00:10:24,160
We've prepared the environment include the files registered the block and created the settings.

133
00:10:24,160 --> 00:10:26,400
The last step is to render the block.

134
00:10:26,410 --> 00:10:30,110
We'll cover that in the next lecture.
