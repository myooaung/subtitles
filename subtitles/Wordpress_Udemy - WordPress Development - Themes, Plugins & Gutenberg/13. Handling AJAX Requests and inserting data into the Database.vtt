WEBVTT
1
00:00:07.590 --> 00:00:13.190
I forgot to mention previously that WordPress will output zero if you don't kill the script.

2
00:00:13.200 --> 00:00:21.170
If I were to open the WP dash admin slash admin dash Ajax stop P2P file and scroll down to the bottom.

3
00:00:21.210 --> 00:00:25.350
There will be this conditional statement that checks if the user is logged in.

4
00:00:25.440 --> 00:00:31.680
If the user is logged in it'll use the normal ajax function otherwise it will perform the non privileged

5
00:00:31.710 --> 00:00:33.390
ajax function.

6
00:00:33.390 --> 00:00:37.000
The very last line here kills the script with the output 0.

7
00:00:37.260 --> 00:00:41.970
So keep in mind that you're more than save to kill the script in your function and most of the time

8
00:00:41.970 --> 00:00:43.310
you want to do so.

9
00:00:43.590 --> 00:00:47.640
We'll be working inside the ajax function throughout most of this lecture.

10
00:00:47.730 --> 00:00:56.390
I'm going to include the global WP DV objects so we can insert the rating into the database next.

11
00:00:56.430 --> 00:01:03.030
I'm going to process the post array and create two separate variables named post Aidid and rating which

12
00:01:03.030 --> 00:01:14.600
will be set to the corresponding post values.

13
00:01:14.710 --> 00:01:20.540
I'm going to process the idea through the function abs and which will return an absolute integer.

14
00:01:20.650 --> 00:01:28.170
The rating will be processed through the round function this function will round the rating set the

15
00:01:28.170 --> 00:01:29.400
precision to 1.

16
00:01:29.400 --> 00:01:35.610
Since we don't want anything deeper than a tenth of a value we'll also need the user's IP.

17
00:01:35.610 --> 00:01:40.940
There are a lot of ways we can do this and it's up to the developers to decide how to get the IP.

18
00:01:40.950 --> 00:01:45.540
WordPress does not provide any functions for getting the IP for this lecture.

19
00:01:45.540 --> 00:01:53.260
I'm going to grab the IP from the remote HDD Aki of PS server variable.

20
00:01:53.360 --> 00:01:58.820
It's not the best way because there are other keys in this array that contain IP addresses but it'll

21
00:01:58.820 --> 00:02:00.330
do for our purposes.

22
00:02:00.380 --> 00:02:04.210
The last variable I want to create is one for the response.

23
00:02:04.220 --> 00:02:12.400
This will be an array with a key of status and its value will be 1 you'll see what this value is for

24
00:02:12.410 --> 00:02:13.670
in a moment.

25
00:02:13.670 --> 00:02:17.790
This step is optional but I want to show you how to handle responses.

26
00:02:17.840 --> 00:02:21.430
The next step is to insert the data into the database.

27
00:02:21.470 --> 00:02:25.160
Let's take a look at the WP DB documentation.

28
00:02:25.190 --> 00:02:27.630
This object has a method called insert.

29
00:02:27.770 --> 00:02:29.920
Let's take a look at that as you can see.

30
00:02:29.930 --> 00:02:35.140
WordPress provides all the information on how to use this method along with an example.

31
00:02:35.240 --> 00:02:36.370
Let's use this method.

32
00:02:36.370 --> 00:02:44.840
Now I'm going to call this function right after our variables.

33
00:02:45.010 --> 00:02:50.200
The first parameter of this method is the name of the table we want to insert data into.

34
00:02:50.200 --> 00:02:56.930
Just like last time we'll be using the prefix property to get the prefix of the current wordpress installation.

35
00:02:57.190 --> 00:03:02.010
The name of the table is recipe ratings.

36
00:03:02.130 --> 00:03:09.280
The second parameter is an array with the keys as the column names and the value as the value to insert.

37
00:03:09.390 --> 00:03:11.280
Our table has three columns.

38
00:03:11.280 --> 00:03:15.870
We should set the recipe i.e. rating and user IP

39
00:03:23.530 --> 00:03:26.140
your array should look something like mine.

40
00:03:26.140 --> 00:03:31.080
The third parameter is optional but you should always use it for security purposes.

41
00:03:31.090 --> 00:03:35.350
The third parameter allows you to filter each value by data type.

42
00:03:35.410 --> 00:03:38.590
For example the I.D. will always be an integer.

43
00:03:38.680 --> 00:03:40.510
We don't want a string or a boolean.

44
00:03:40.510 --> 00:03:43.870
We want an integer pass and an array.

45
00:03:43.870 --> 00:03:46.120
You will have to pass in a certain format.

46
00:03:46.150 --> 00:03:54.790
There are three formats we can use string integer and float the format for string is percent s the format

47
00:03:54.790 --> 00:03:56.840
for integer is percent deep.

48
00:03:56.950 --> 00:03:59.520
The format for float is % f.

49
00:03:59.800 --> 00:04:04.830
Float by the way is just a fancy word for numbers with decimal values.

50
00:04:04.930 --> 00:04:07.810
We'll be using all three of these for our query.

51
00:04:07.930 --> 00:04:13.420
Since the first value we insert is an integer we're going to use % D for that value.

52
00:04:13.450 --> 00:04:18.360
The second value should be percent f and the third value should be percent s.

53
00:04:18.760 --> 00:04:20.860
We're almost done after the insert.

54
00:04:20.860 --> 00:04:24.820
I want to update the status key of the output variable to 2

55
00:04:27.430 --> 00:04:32.670
1 will be if the insert was a failure 2 will mean it was a success.

56
00:04:32.740 --> 00:04:38.770
I want to send this variable back as the response WordPress provides a function specifically for this

57
00:04:38.770 --> 00:04:39.600
task.

58
00:04:39.700 --> 00:04:49.070
Call the WP send Jason function and pass it in the output variable this function will Jason encode the

59
00:04:49.070 --> 00:04:51.000
array and then kill the script.

60
00:04:51.050 --> 00:04:53.280
You can think of it as a sugar function.

61
00:04:53.330 --> 00:04:55.810
This is perfect for Ajax requests.

62
00:04:55.830 --> 00:05:01.640
It'll also take the time to send the response as a Jason type so J.Crew knows to process the body and

63
00:05:01.640 --> 00:05:04.030
let you use the data as an object.

64
00:05:04.130 --> 00:05:12.240
Try reading the recipe now if you check the developer tools then you should see the response begin object

65
00:05:12.240 --> 00:05:15.220
with the status properties set as to.

66
00:05:15.240 --> 00:05:19.590
You should also check the table in the database to make sure the data was inserted correctly.

67
00:05:21.890 --> 00:05:26.820
If you refresh the page and try reading the recipe again you'll find another insert.

68
00:05:26.930 --> 00:05:28.100
We don't want this.

69
00:05:28.160 --> 00:05:31.070
Let's delete that second insert.

70
00:05:31.070 --> 00:05:34.850
Let's fix this by checking if the user already rated the recipe.

71
00:05:34.850 --> 00:05:39.230
Or this will be using a custom sequel query rather than a method.

72
00:05:39.230 --> 00:05:45.170
We could have inserted our data without the Insert method but the Insert method provides extra security

73
00:05:45.170 --> 00:05:46.730
and sanitation.

74
00:05:46.730 --> 00:05:52.940
Create a variable called rating count and the value will be set to the value returned by the get var

75
00:05:52.940 --> 00:05:55.490
method of a WP DV object.

76
00:06:00.410 --> 00:06:06.830
The documentation tells us that this method will return a single value from a sequel query the sequel

77
00:06:06.830 --> 00:06:11.900
query we're about to make will count the number of rows from the recipe ratings table.

78
00:06:11.900 --> 00:06:13.610
Here is the query.

79
00:06:13.610 --> 00:06:24.260
Select count star from WP DV prefix recipe ratings where recipe ideas equals post I.D. and user IP equals

80
00:06:24.260 --> 00:06:34.720
user IP.

81
00:06:34.740 --> 00:06:39.230
We also need to specify the recipe I.D. and the IP of the user.

82
00:06:39.240 --> 00:06:41.630
So we don't get any generic results.

83
00:06:41.820 --> 00:06:48.230
If we do end up finding some rows this variable will be set to the amount of rows found next.

84
00:06:48.270 --> 00:06:52.040
I'm just going to check if ro count is greater than zero.

85
00:06:52.140 --> 00:06:58.340
If it is I'm going to call the WP send Jason function and passing the output variable again

86
00:07:03.330 --> 00:07:05.510
let's try reading the recipe again.

87
00:07:05.640 --> 00:07:09.660
You should see the response object with the status of 1.

88
00:07:09.870 --> 00:07:13.780
Check your database as well to make sure no rows were inserted.

89
00:07:13.830 --> 00:07:19.230
To recap what's going on when the user clicks on the rating for the first time the function will check

90
00:07:19.260 --> 00:07:21.810
if the user has read in this recipe before.

91
00:07:21.940 --> 00:07:24.460
If they haven't it will insert the rating.

92
00:07:24.600 --> 00:07:29.880
If the user is able to rate the recipe a second time then the function will make the same check and

93
00:07:29.880 --> 00:07:33.150
if there already is a rating it'll end immediately.

94
00:07:33.150 --> 00:07:37.710
There are two possible results which is the status being 1 or 2.

95
00:07:37.920 --> 00:07:40.820
Looks like we're finished with processing the results.

96
00:07:40.860 --> 00:07:46.900
The next thing we'll need to do is check for the rating on a page refresh and average out all the ratings.

97
00:07:46.950 --> 00:07:49.990
The Post metadata needs to be updated as well.

98
00:07:50.220 --> 00:07:55.500
Before you get started empty the recipe rating table we're going to start fresh.

99
00:07:57.400 --> 00:08:00.940
Let's get started with averaging the rating first in sign.

100
00:08:01.060 --> 00:08:03.220
The R rate recipe function.

101
00:08:03.220 --> 00:08:06.370
I'm going to add the code right after the database insert.

102
00:08:06.520 --> 00:08:17.950
Let's grab the metadata first by calling the get post a function.

103
00:08:18.000 --> 00:08:20.670
There are two properties we want to update.

104
00:08:20.730 --> 00:08:25.060
The first property is the rating count.

105
00:08:25.140 --> 00:08:29.060
This will contain the number of ratings this recipe has had so far.

106
00:08:29.220 --> 00:08:33.190
All we need to do is increment this with the double plus sign.

107
00:08:33.300 --> 00:08:35.490
Next we need to average the rating.

108
00:08:35.580 --> 00:08:38.270
We can use the get var method for this.

109
00:08:38.310 --> 00:08:41.010
Let's use the same query we used last time.

110
00:08:41.130 --> 00:08:43.650
This time we don't need to check for the IP

111
00:08:51.410 --> 00:08:52.600
instead of Count.

112
00:08:52.610 --> 00:08:56.460
Change this to a e.g..

113
00:08:56.530 --> 00:09:01.330
This is a my secret function that will calculate the average of a specific column.

114
00:09:01.420 --> 00:09:04.330
The column we want to average out is rating.

115
00:09:04.600 --> 00:09:06.760
This query will return the average.

116
00:09:06.760 --> 00:09:13.520
I'm going to wrap this query with the round function and set its precision to 1.

117
00:09:13.550 --> 00:09:15.960
I don't want a long decimal number.

118
00:09:16.160 --> 00:09:17.510
That's basically it.

119
00:09:17.510 --> 00:09:23.300
All we have to do now is update this post metadata using the update post meta function like so

120
00:09:30.030 --> 00:09:40.440
I'm going to add some comments so that it's easier to read our code.

121
00:09:40.520 --> 00:09:45.560
The next step is to display the average rating to the user and prevent them from running again if they

122
00:09:45.560 --> 00:09:52.970
already rated the recipe inside the template add the attribute data dash rate it Dash value and set

123
00:09:52.970 --> 00:09:55.390
its value to a string placeholder.

124
00:09:55.400 --> 00:09:58.780
I'm also going to add a place holder for the read only property

125
00:10:05.770 --> 00:10:11.340
open the filter function file and replace the rating place holder with the actual rating.

126
00:10:19.410 --> 00:10:24.030
For the read only property we're going to borrow the code from the rating function.

127
00:10:24.030 --> 00:10:26.940
Specifically the rating count variables

128
00:10:36.120 --> 00:10:42.300
we need to add the WP D.B. global variable so that we can use the get var method.

129
00:10:42.300 --> 00:10:51.030
We also need to replace the idea in the query with the Post object and access the ideas property.

130
00:10:51.040 --> 00:10:54.950
Now we can simply use a conditional statement and act accordingly.

131
00:10:55.030 --> 00:11:01.570
If the user already rated the recipe then it will change the read only place holder to that data dash

132
00:11:01.570 --> 00:11:05.280
rate it Dash read only attribute and set it to true.

133
00:11:05.380 --> 00:11:11.830
Otherwise we'll just replace the place holder with an empty shrink the read only property is set to

134
00:11:11.830 --> 00:11:13.090
false by default.

135
00:11:13.120 --> 00:11:15.470
So we don't need to set it ourselves.

136
00:11:29.710 --> 00:11:35.330
Rate your recipe to 5 stars refresh the page and you should see your rating still there.

137
00:11:35.350 --> 00:11:39.110
You also shouldn't be able to rate this recipe again.

138
00:11:39.190 --> 00:11:42.260
I'm going to do something you usually shouldn't do.

139
00:11:42.280 --> 00:11:50.150
I'm going to go back to the ratings table and I'm going to change the IP of our rating to a random number.

140
00:11:50.320 --> 00:11:52.790
I want to test out the average out.

141
00:11:52.930 --> 00:11:58.440
I will now be able to rate the recipe again this time I'm going to rate it a 3.

142
00:11:58.450 --> 00:12:03.390
I'll refresh the page one last time and we should have an average rating of 4.

143
00:12:03.430 --> 00:12:04.370
We're finished.

144
00:12:04.390 --> 00:12:05.410
Congrats.

145
00:12:05.410 --> 00:12:11.390
At this point we're done with the rating system and the single post I'm going to give you a challenge.

146
00:12:11.440 --> 00:12:17.380
Try and figure out a way so that our plugin allows for users to change their reading for a recipe and

147
00:12:17.470 --> 00:12:19.450
update their reading accordingly.

148
00:12:19.450 --> 00:12:22.620
You will also need to update the average as well.

149
00:12:22.810 --> 00:12:25.330
You have the knowledge to handle this challenge.

150
00:12:25.330 --> 00:12:25.930
Good luck.
