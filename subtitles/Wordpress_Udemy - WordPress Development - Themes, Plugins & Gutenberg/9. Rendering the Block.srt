1
00:00:07,410 --> 00:00:13,610
The last step to completing our block is to render it right now I'm looking at the block we just created.

2
00:00:13,740 --> 00:00:16,900
I filled in all the fields and updated the post.

3
00:00:17,010 --> 00:00:22,860
If I were to view the post on the front end then you'll see it displays just fine something you'll notice

4
00:00:22,920 --> 00:00:26,920
is that the styles are completely different from the styles used in the editor.

5
00:00:26,970 --> 00:00:29,930
In most cases you want this to be consistent.

6
00:00:30,000 --> 00:00:35,490
I'll show you how to load styles for Gutenberg but for now you can ignore this right now.

7
00:00:35,490 --> 00:00:41,180
The problem we face is Gutenberg is unable to render the block again after a page refresh.

8
00:00:41,310 --> 00:00:42,550
What does that mean.

9
00:00:42,570 --> 00:00:46,150
First we'll have to understand how Gutenberg handles our content.

10
00:00:47,960 --> 00:00:52,340
The Gutenberg lifestyle is straightforward but there's a lot that goes into it.

11
00:00:52,340 --> 00:00:55,350
This diagram is grossly oversimplified.

12
00:00:55,430 --> 00:01:00,950
Whenever you're writing content on the Gutenberg editor the edit function is constantly called to update

13
00:01:00,950 --> 00:01:08,550
everything the edit function will always return processed HCM which will then be rendered onto the editor.

14
00:01:08,570 --> 00:01:14,900
Things change when the user clicks on publish or update the save function is called which does something

15
00:01:14,900 --> 00:01:18,730
similar to the edit function it will run any code inside.

16
00:01:18,730 --> 00:01:27,640
In return the process states seem out this time the process H team L is sent to the database I currently

17
00:01:27,640 --> 00:01:30,550
have Heidi opens all posts are saved.

18
00:01:30,550 --> 00:01:37,240
Any WP posts table if you scroll down to the bottom you should find the recipe posts you created just

19
00:01:37,240 --> 00:01:38,580
in case you can't find it.

20
00:01:38,620 --> 00:01:44,410
You can go back to the browser and look at the You of all the post I.D. is set under the post query

21
00:01:44,410 --> 00:01:53,140
here once you have the post I.D. you can switch back to Heidi and look for it under the post content

22
00:01:53,140 --> 00:01:53,740
column.

23
00:01:53,740 --> 00:01:59,030
You will find the content saved as you can see there is no JavaScript or JSA ex.

24
00:01:59,080 --> 00:02:00,920
This is pure HCM.

25
00:02:01,090 --> 00:02:03,570
Right now we only have one block.

26
00:02:03,580 --> 00:02:09,070
These comments prove that fact WordPress will take the time to surround your blocks with comments that

27
00:02:09,070 --> 00:02:10,650
contain the name.

28
00:02:10,750 --> 00:02:12,700
These comments serve a purpose.

29
00:02:12,730 --> 00:02:14,110
I'll explain in just a moment.

30
00:02:14,170 --> 00:02:16,360
But let's look at the front end again.

31
00:02:16,420 --> 00:02:24,290
If you were to view the H team L for the post you'll see the comments no longer appear before content

32
00:02:24,350 --> 00:02:25,340
is displayed.

33
00:02:25,340 --> 00:02:28,610
The Gutenberg comments are removed as they're not necessary.

34
00:02:29,330 --> 00:02:33,310
All right so what is the purpose of these comments later down the road.

35
00:02:33,320 --> 00:02:35,980
You may want to edit a post when you do so.

36
00:02:36,020 --> 00:02:39,180
Gutenberg will load the content from the database.

37
00:02:39,180 --> 00:02:41,240
However here's the problem.

38
00:02:41,240 --> 00:02:47,960
The content is pure HCM l Gutenberg has to take the time to break down your content into blocks again

39
00:02:48,440 --> 00:02:53,870
the comments assist with that by telling Gutenberg which pieces of each team l belong to which block

40
00:02:54,490 --> 00:03:00,290
and this example Gutenberg will be able to understand that this H.G. email here belongs to the recipe

41
00:03:00,290 --> 00:03:01,070
block.

42
00:03:01,070 --> 00:03:02,190
Simple enough so far.

43
00:03:02,510 --> 00:03:04,580
Here's where the complication begins.

44
00:03:04,700 --> 00:03:08,940
Gutenberg doesn't know which piece of text belongs to which attribute.

45
00:03:09,140 --> 00:03:15,080
It's obvious to us that this piece of text is for ingredients and this other piece of text is for cooking

46
00:03:15,080 --> 00:03:16,020
time.

47
00:03:16,040 --> 00:03:18,050
However Gutenberg doesn't know that

48
00:03:20,880 --> 00:03:24,930
for the most part Gutenberg doesn't care what the HDL looks like.

49
00:03:25,050 --> 00:03:27,030
It's looking for the attribute data.

50
00:03:27,090 --> 00:03:33,990
To recap it loads the H2 CML from the database it will then convert the h t amount in two blocks it

51
00:03:33,990 --> 00:03:37,770
will then look for the attributes once a Grams the attributes.

52
00:03:37,770 --> 00:03:40,980
It will then use those values in store for the block.

53
00:03:40,980 --> 00:03:46,440
The edit function will then be triggered so that it can render the H2 UML on the Ed itself.

54
00:03:46,590 --> 00:03:53,060
If it's unable to find certain attributes then it'll assume the content was changed outside of its scope.

55
00:03:53,070 --> 00:03:59,130
The question now is how do we get Gutenberg to identify which piece of text belongs to which attribute

56
00:04:01,810 --> 00:04:07,420
before I answer that I want to note that I commented out the update ingredients function and place the

57
00:04:07,420 --> 00:04:10,250
function back inside the text component.

58
00:04:10,270 --> 00:04:11,530
All right let's move on.

59
00:04:11,830 --> 00:04:16,030
I'm going to minimize the edit function so that it doesn't get in our way.

60
00:04:16,150 --> 00:04:21,720
Then I'm going to scroll up to the attributes object each attribute can have a type.

61
00:04:22,210 --> 00:04:30,120
Add this property to the ingredients attribute that type determines the data type of the content if

62
00:04:30,120 --> 00:04:31,710
the attribute stores a number.

63
00:04:31,800 --> 00:04:38,310
Then you can set this to integer a string is used for text and you can even use array for multiple pieces

64
00:04:38,310 --> 00:04:39,140
of content.

65
00:04:39,390 --> 00:04:41,400
We'll be using string.

66
00:04:41,400 --> 00:04:45,240
The question is what's the difference between type and source.

67
00:04:45,360 --> 00:04:50,340
The type is for setting the data type the source is used to instruct Gutenberg.

68
00:04:50,340 --> 00:04:54,650
What exactly it should extract from the GM mail that comes from the database.

69
00:04:54,690 --> 00:04:56,920
More on this in just a moment.

70
00:04:56,940 --> 00:05:02,630
The next property will need to set is the selector property.

71
00:05:02,640 --> 00:05:06,930
This will instruct Gutenberg where the data can be found inside the GM L..

72
00:05:06,990 --> 00:05:15,570
I'm going to set this to dot ingredients dash p h here's how Gutenberg will interpret this.

73
00:05:15,670 --> 00:05:16,890
We're channeling Gutenberg.

74
00:05:16,900 --> 00:05:19,750
Hey I have an attribute called ingredients.

75
00:05:19,750 --> 00:05:25,090
If you're loading the data from the H GM L. then you will be able to find the data inside a tag with

76
00:05:25,090 --> 00:05:32,760
the class ingredients stash P H I want you to extract the text inside and store the value as a string.

77
00:05:32,860 --> 00:05:38,350
It will do this for each attribute once all the attributes have been accounted for it will then run

78
00:05:38,350 --> 00:05:42,390
the edit function and render the content onto the editor itself.

79
00:05:42,550 --> 00:05:46,710
Something I want to know is that the type property is optional here.

80
00:05:46,870 --> 00:05:52,060
It's only required if you're working with metadata but we're not using metadata so it doesn't really

81
00:05:52,060 --> 00:05:53,340
matter here.

82
00:05:53,350 --> 00:05:55,430
I like to set it just in case.

83
00:05:55,660 --> 00:06:01,270
I recommend you set it to another thing I want to note is that the value we passed in for the selector

84
00:06:01,270 --> 00:06:02,410
doesn't exist.

85
00:06:02,470 --> 00:06:04,110
We'll be adding it soon enough.

86
00:06:04,210 --> 00:06:07,480
For now I want you should do this for the rest of the attributes

87
00:06:22,470 --> 00:06:30,060
all of them will have a type of string the selector will be their names followed by Dash P H P H being

88
00:06:30,060 --> 00:06:36,720
short for placeholder WordPress now knows where to look for the data however it can't look for the attributes

89
00:06:36,720 --> 00:06:40,440
since we're not rendering the CML as we're specifying here.

90
00:06:40,560 --> 00:06:45,210
We'll need to update both the edit and save functions for this.

91
00:06:45,210 --> 00:06:47,400
We'll start with the edit function.

92
00:06:47,400 --> 00:06:52,590
All you need to do is surround the attributes with some span tags with their respective class names

93
00:06:52,590 --> 00:06:53,190
like so

94
00:07:06,910 --> 00:07:08,120
to save some time.

95
00:07:08,200 --> 00:07:11,570
You can just copy this and paste it into the save function.

96
00:07:11,590 --> 00:07:16,930
Be sure to remove the class name attribute from the root element as WordPress takes care of adding it

97
00:07:16,930 --> 00:07:17,670
for you.

98
00:07:25,130 --> 00:07:32,130
That should do it open your command line and C D into the blocks directory then run the command NPM

99
00:07:32,210 --> 00:07:37,170
run Dev.

100
00:07:37,240 --> 00:07:39,730
You shouldn't receive any errors thus far.

101
00:07:39,730 --> 00:07:43,570
Go back to the Gutenberg editor remove the block we have and save it.

102
00:07:46,750 --> 00:07:52,420
We have to do this since we want to remove the copy stored in the database then refresh the page so

103
00:07:52,420 --> 00:07:55,450
that we can load it in the latest code for our block.

104
00:07:55,450 --> 00:07:59,070
Lastly add the block in again and add some settings.

105
00:07:59,110 --> 00:08:01,180
Once you have that set save your post

106
00:08:08,080 --> 00:08:12,430
if we did everything right then we should be able to view the post without a problem.

107
00:08:12,430 --> 00:08:14,000
You should see what I see.

108
00:08:14,050 --> 00:08:19,540
If I were to inspect the element then you'll see it has all the correct classes and formatting just

109
00:08:19,540 --> 00:08:25,370
to double check open Heidi and view the contents of the post.

110
00:08:25,550 --> 00:08:29,060
It should be the exact same HCM L with the comments added in.

111
00:08:29,510 --> 00:08:32,780
Lastly go ahead and refresh the editor itself.

112
00:08:32,780 --> 00:08:35,840
The block should be displaying just fine with the data saved.

113
00:08:36,440 --> 00:08:39,870
Congratulations you just created your first blog.

114
00:08:39,890 --> 00:08:43,060
It took a long time to get to this point but it was well worth it.

115
00:08:45,770 --> 00:08:47,830
Here is our trusty process chart.

116
00:08:47,870 --> 00:08:53,580
We've prepared the environment include the files registered the block created the settings and render

117
00:08:53,600 --> 00:08:54,470
the block.

118
00:08:54,470 --> 00:08:59,630
You will want to make sure that the block renders perfectly on both the front and back end.

119
00:08:59,670 --> 00:09:05,450
I've added an extra step here which is optimize and enhance in the next few lectures we'll take a look

120
00:09:05,450 --> 00:09:11,060
at how we can improve the user experience by styling the block and adding additional settings when you're

121
00:09:11,060 --> 00:09:11,660
ready.

122
00:09:11,660 --> 00:09:13,340
I'll see you in the next lecture.
