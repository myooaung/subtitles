WEBVTT
1
00:00:08.310 --> 00:00:12.440
As this course progresses we'll be creating multiple templates.

2
00:00:12.450 --> 00:00:16.140
Keep in mind that the index template is just the default template.

3
00:00:16.150 --> 00:00:20.040
WordPress uses when there isn't a suitable template to be found.

4
00:00:20.160 --> 00:00:26.470
Our theme should be consistent and so therefore the header footer and sidebar should look the same.

5
00:00:26.580 --> 00:00:30.920
Our templates can get pretty big if we just copy and paste our header and footers.

6
00:00:30.960 --> 00:00:36.300
It would also be a pain to have to edit each template every time you made a change to the header.

7
00:00:36.300 --> 00:00:42.330
Luckily WordPress provides a solution by providing a couple of functions for including different sections

8
00:00:42.330 --> 00:00:43.750
of our template.

9
00:00:43.860 --> 00:00:46.490
Let's create the required files first.

10
00:00:46.500 --> 00:00:53.530
First we have to create a file called header not P P in our themes folder.

11
00:00:53.640 --> 00:00:59.100
It's very important that you give the file this name as this is the name WordPress will search for when

12
00:00:59.100 --> 00:01:02.940
trying to include your header from the index template.

13
00:01:02.940 --> 00:01:08.330
Let's cut everything from the dog tag to the closing header tags and then paste it into the header file.

14
00:01:10.790 --> 00:01:18.860
Next let's create a photocopy HP file just like before we are forced to name it.

15
00:01:18.860 --> 00:01:21.700
This by WordPress from the index template.

16
00:01:21.740 --> 00:01:26.510
Cut everything from the bottom of the file to the opening tag of the footer comment.

17
00:01:26.540 --> 00:01:35.180
Then paste it into the footer file like so this will leave us with the section tag with the ideas of

18
00:01:35.180 --> 00:01:36.280
content.

19
00:01:36.350 --> 00:01:42.410
All right now all we have to do is include our files at the very top of the index template.

20
00:01:42.410 --> 00:01:50.700
Call the function get header this function will look for a file called headed up HP and include it at

21
00:01:50.700 --> 00:01:51.990
the very bottom of the file.

22
00:01:51.990 --> 00:01:57.160
Call the function get footer just like the header function.

23
00:01:57.170 --> 00:02:00.910
This function will look for a file called footer dot HP.

24
00:02:00.980 --> 00:02:09.110
I'm going to format template so it's easier to read once that's done refresh the page and see if everything

25
00:02:09.110 --> 00:02:10.130
is working properly.

26
00:02:10.550 --> 00:02:14.510
If you see no errors then that means you did everything right.

27
00:02:14.540 --> 00:02:17.000
Let's go over how these functions work.

28
00:02:17.180 --> 00:02:23.870
These two functions will look for files named header not P P and footer dot P HP within the themes directory

29
00:02:23.870 --> 00:02:25.110
respectively.

30
00:02:25.160 --> 00:02:32.070
I want you to be aware we're not completely forced to name our files headed up P2P and footed up.

31
00:02:32.780 --> 00:02:39.230
Let's say we had a header called header dash V to 2.0 HP and we wanted to use this header for a post

32
00:02:39.230 --> 00:02:40.940
template specifically.

33
00:02:40.970 --> 00:02:47.660
Well all you have to do is pass in the name V2 and WordPress will then search for a file called header

34
00:02:47.660 --> 00:02:50.150
dash v chewed up HP.

35
00:02:50.150 --> 00:02:56.510
Don't worry about free pending the word header or appending the extension dot the HP WordPress takes

36
00:02:56.510 --> 00:02:58.280
care of this for you.

37
00:02:58.280 --> 00:03:04.760
This way you can have various headers these same rules apply to the get footer function for this course

38
00:03:04.840 --> 00:03:11.360
will only have one header and footer so we don't need to pass in anything to these functions.

39
00:03:11.390 --> 00:03:13.200
All right we're almost done here.

40
00:03:13.220 --> 00:03:19.190
I want to do one thing which is to allow any plugins or WordPress itself to add classes to the body

41
00:03:19.190 --> 00:03:19.860
tag.

42
00:03:20.030 --> 00:03:25.990
By doing this you can take advantage knowing which features are active on the site with your CSX.

43
00:03:26.090 --> 00:03:28.370
Let's explore how this is done.

44
00:03:28.400 --> 00:03:32.840
The first step is to open the header template and inside the body tag.

45
00:03:32.840 --> 00:03:34.940
Call the function body class

46
00:03:39.170 --> 00:03:43.880
this function will add an attribute called class and then output some classes.

47
00:03:43.880 --> 00:03:52.730
I have some classes I'd like added which are the no dash transition and stretched classes let's refresh

48
00:03:52.730 --> 00:03:56.450
the page and then let's use the developer tool to see what's going on.

49
00:03:57.400 --> 00:04:00.980
Right click and select Inspect anywhere on the page.

50
00:04:01.090 --> 00:04:03.840
What you should be viewing is the elements tab.

51
00:04:03.970 --> 00:04:10.270
This tab allows you to view the HDMI all of the current page in real time meaning if any changes were

52
00:04:10.270 --> 00:04:16.000
made inside this template while the user is browsing than the HD PML will update accordingly and vice

53
00:04:16.000 --> 00:04:16.990
versa.

54
00:04:17.170 --> 00:04:22.450
If you take a look at the body class then you'll notice that a few classes have been added that weren't

55
00:04:22.450 --> 00:04:29.230
there before WordPress automatically loads these classes for you so you can apply appropriate CSX.

56
00:04:29.590 --> 00:04:34.860
For example the admin dashboard class should appear if you are logged in.

57
00:04:34.870 --> 00:04:41.510
However if I log out then this class will disappear after logging out.

58
00:04:41.520 --> 00:04:44.910
You will see the admin dash bar class disappear.

59
00:04:44.910 --> 00:04:45.900
This is really great.

60
00:04:45.960 --> 00:04:51.420
As you can apply certain stylings to the page depending on the classes added to the body.

61
00:04:51.600 --> 00:04:55.670
I'm going to log back in as I stated from the beginning.

62
00:04:55.760 --> 00:04:59.770
I did not make any changes to my template to prepare it for wordpress.

63
00:04:59.960 --> 00:05:05.960
So even though these classes are loaded there aren't any styles in my files that takes advantage of

64
00:05:05.960 --> 00:05:12.360
these classes using these classes is completely optional even though we aren't using these functions.

65
00:05:12.380 --> 00:05:14.120
There are plugins that do.

66
00:05:14.360 --> 00:05:20.210
This is an important point I want to make some features you add aren't just for wordpress or yourself

67
00:05:20.570 --> 00:05:26.400
sometimes you'll want to add features so plugins can extend how WordPress functions.

68
00:05:26.570 --> 00:05:34.210
I'm going to remove the body class function for a moment refresh the page and you'll notice our site

69
00:05:34.270 --> 00:05:36.120
is a little different from before.

70
00:05:36.130 --> 00:05:40.940
If you take a look at the body tag then you'll notice some classes still appear.

71
00:05:41.110 --> 00:05:47.650
WordPress has a fallback it will use some Javascript code to add some classes but most of the original

72
00:05:47.650 --> 00:05:50.170
classes are gone to prove this further.

73
00:05:50.200 --> 00:05:57.250
You can right click and select view page source and you'll notice the body tag has no classes applied.

74
00:05:57.250 --> 00:06:01.170
I'm going to revamp the body class function because of its usefulness.

75
00:06:03.320 --> 00:06:09.040
Let's refresh the page one more time and all the CSF classes we had before should reappear.

76
00:06:09.110 --> 00:06:10.840
Just to recap what's going on.

77
00:06:10.850 --> 00:06:17.300
All we did was split up the index template we put the header and footer into their own respective templates.

78
00:06:17.480 --> 00:06:22.530
Then we modified the body tag so WordPress can generate some classes.

79
00:06:22.670 --> 00:06:26.990
I'm going to add a link to this function in the resource section of this lecture.

80
00:06:26.990 --> 00:07:00.810
We can now begin working on the sidebar.
