1
00:00:07,450 --> 00:00:12,440
It's time to create a page for editing the plug options to perform this task.

2
00:00:12,460 --> 00:00:18,310
We need to use a function called Ad menu page and the resource section of this lecture.

3
00:00:18,310 --> 00:00:21,010
I provide a link to learn more about this function.

4
00:00:21,040 --> 00:00:23,810
We have quite a few options for this function.

5
00:00:23,890 --> 00:00:30,010
Scroll down to the user contributors section you'll see the user contributor note suggests that we should

6
00:00:30,010 --> 00:00:34,940
use a hook called admin menu and then use this function from within that hook.

7
00:00:35,050 --> 00:00:38,490
So let's do that inside the main plugin file.

8
00:00:38,500 --> 00:00:47,280
Add this action and the function we want to call is our admin menus.

9
00:00:47,380 --> 00:00:53,530
I want you to take note that we're not running this hook inside the admin and IT function in the resource

10
00:00:53,530 --> 00:00:56,840
section of this lecture I provide a link to this hook.

11
00:00:57,010 --> 00:01:00,520
If you read the notes WordPress will state the following.

12
00:01:00,520 --> 00:01:07,300
This action mustn't be placed in an admin in an action function because the admin in an action is called

13
00:01:07,330 --> 00:01:09,280
after admin menu.

14
00:01:09,280 --> 00:01:14,710
It's always good practice to read the notes for any hook or function before using it for clarification

15
00:01:14,710 --> 00:01:15,810
on usage.

16
00:01:15,820 --> 00:01:19,680
Moving on inside the include slash admin folder.

17
00:01:19,750 --> 00:01:23,220
Let's create a file called menus dot P. HP.

18
00:01:23,260 --> 00:01:25,030
Lastly include this file

19
00:01:30,890 --> 00:01:36,960
inside this file create the R admin menus function.

20
00:01:37,000 --> 00:01:40,580
Now we can call the ad menu page function.

21
00:01:40,600 --> 00:01:43,090
This function has quite a few parameters.

22
00:01:43,150 --> 00:01:46,190
The first parameter is the title of this page.

23
00:01:46,240 --> 00:01:49,560
This will appear on the top of the browser in tabs.

24
00:01:49,600 --> 00:01:54,730
I'm going to pass in the text recipe options.

25
00:01:54,770 --> 00:01:58,100
The second parameter is the name that will appear in the sidebar.

26
00:01:58,490 --> 00:02:04,460
I'm going to keep this simple and pass in recipe options.

27
00:02:04,480 --> 00:02:07,270
The third parameter is the capability.

28
00:02:07,270 --> 00:02:11,110
We haven't talked about capabilities yet in the resource section.

29
00:02:11,110 --> 00:02:14,590
I provided a link to the capabilities Codex page.

30
00:02:14,590 --> 00:02:19,930
A capability is basically what a user can or cannot do by default.

31
00:02:19,930 --> 00:02:27,490
WordPress provides 60 fault rolls which are super admin administrator editor author contributor and

32
00:02:27,490 --> 00:02:28,960
subscriber.

33
00:02:28,960 --> 00:02:31,580
Each of these roles have certain capabilities.

34
00:02:31,600 --> 00:02:36,690
Let's scroll down to the capability versus roll tables section of this page.

35
00:02:36,790 --> 00:02:44,740
As you can see a super ad man can do everything whereas a subscriber can only read posts and pages you

36
00:02:44,740 --> 00:02:50,590
can think of roles as a way to group capabilities when you are checking if a user can perform a certain

37
00:02:50,590 --> 00:02:51,100
action.

38
00:02:51,100 --> 00:02:53,780
Then you'll want to check their capability.

39
00:02:53,830 --> 00:02:58,310
It's important that you check their capabilities rather than checking their role.

40
00:02:58,360 --> 00:03:03,940
There are plugins out there that allow you to create new roles and assign custom capabilities.

41
00:03:03,940 --> 00:03:10,570
Those same plugins can also modify existing capabilities for roles so it's always important to check

42
00:03:10,600 --> 00:03:13,360
a capability rather than a role.

43
00:03:13,360 --> 00:03:18,070
This function would like to know who can view this page by passing into a capability.

44
00:03:18,100 --> 00:03:23,080
Currently I only want super admin and administrators to view this page.

45
00:03:23,080 --> 00:03:29,380
If we look at the table we can use any of these capabilities that only a super admin or administrator

46
00:03:29,380 --> 00:03:30,460
can do.

47
00:03:30,490 --> 00:03:32,560
I'm going to use the capability.

48
00:03:32,560 --> 00:03:41,020
Edit dim options you don't have to use this specific capability you can use any of the other ones just

49
00:03:41,020 --> 00:03:45,780
as long as they apply to both super admins and administrators.

50
00:03:45,880 --> 00:03:48,470
The fourth parameter is the menu slug.

51
00:03:48,490 --> 00:03:50,500
This is basically the U.R.L..

52
00:03:50,770 --> 00:03:53,410
I'll show you what this looks like in just a moment.

53
00:03:53,410 --> 00:03:55,660
This should be a unique you are out.

54
00:03:55,660 --> 00:03:59,500
Do you know what we do when you want something to be unique in WordPress.

55
00:03:59,560 --> 00:04:02,200
We prefix it with our underscore.

56
00:04:02,200 --> 00:04:08,770
I'm going to pass an R plugin arts the 5th parameter is the name of the function that will be calls.

57
00:04:08,770 --> 00:04:16,930
We're going to call this function r plug in on this page this function doesn't exist so let's create

58
00:04:16,930 --> 00:04:23,830
that now inside the admin folder create a file called Options dash page dot P HP

59
00:04:26,460 --> 00:04:27,030
next.

60
00:04:27,060 --> 00:04:29,310
Include this file from the main plugin file

61
00:04:35,350 --> 00:04:37,390
Lastly let's define the function

62
00:04:40,110 --> 00:04:44,150
whatever you output from this function will be output it onto the page.

63
00:04:44,220 --> 00:04:49,840
We can if we want to use WordPress as stylings and classes style this page.

64
00:04:49,920 --> 00:04:51,390
However we won't.

65
00:04:51,390 --> 00:04:53,640
Instead we'll be using Bootstrap.

66
00:04:53,640 --> 00:04:57,680
First things first let's try outputting something onto our page.

67
00:04:57,690 --> 00:05:02,070
There is one special class that we will use and that's called the wrap class

68
00:05:04,730 --> 00:05:07,360
this class is created by WordPress.

69
00:05:07,370 --> 00:05:12,370
This is just one of the very few classes that WordPress provides that we can use.

70
00:05:12,380 --> 00:05:17,930
This class will take care of placing our page to the right of the menu and make it responsive.

71
00:05:17,930 --> 00:05:19,730
Let's output a simple message

72
00:05:22,480 --> 00:05:27,190
now go to your WordPress admin dashboard and you'll notice our menu pop up.

73
00:05:27,190 --> 00:05:31,810
Click on it you'll see the message output it and position correctly.

74
00:05:31,840 --> 00:05:36,950
One less thing earlier I told you about the slug inside the URL bar.

75
00:05:36,980 --> 00:05:41,320
You'll see the slug we passed in in order to access this page.

76
00:05:41,320 --> 00:05:47,920
All we have to do is use the page query and use the value R plugin ops that should bring us to this

77
00:05:47,920 --> 00:05:48,770
page.

78
00:05:48,790 --> 00:05:54,940
That's how our slug works now that the page is being displayed let's start creating the forms and adding

79
00:05:54,940 --> 00:05:58,960
some styles we'll be using Bootstrap styling for this.

80
00:05:58,960 --> 00:06:02,070
It's not required but I prefer it to begin.

81
00:06:02,080 --> 00:06:05,030
We'll need to load the bootstrap CSX.

82
00:06:05,140 --> 00:06:11,930
WordPress has a specific hook for loading styles and scripts on the ataman side inside the ad men in

83
00:06:11,930 --> 00:06:12,290
it.

84
00:06:12,290 --> 00:06:16,120
Function add the action hook called admin and queue scripts

85
00:06:20,320 --> 00:06:26,890
the function will want to call is r admin and queue WordPress has quite a few hooks for in queuing files

86
00:06:26,890 --> 00:06:28,420
in different locations.

87
00:06:28,420 --> 00:06:33,190
We have one for the front end one for the admin and N2 for Gutenberg.

88
00:06:33,190 --> 00:06:40,270
Anyway let's create a file inside the admin folder called and queued up HP and define the function there.

89
00:06:43,060 --> 00:06:49,240
Before we in queue any files I want to make sure we only load bootstrap in our custom page.

90
00:06:49,240 --> 00:06:55,360
It's irresponsible to load bootstrap for every admin page will want to make sure the files only get

91
00:06:55,360 --> 00:06:58,460
loaded for the admin options page we created.

92
00:06:58,510 --> 00:07:00,400
Luckily that's easy to do.

93
00:07:00,400 --> 00:07:05,330
Using the page query we saw earlier inside a conditional statement.

94
00:07:05,410 --> 00:07:11,290
I'm going to check if that query argument is not set and its value is not our plugin ops.

95
00:07:15,420 --> 00:07:20,500
If either of these conditions return true then we'll want to return nothing.

96
00:07:20,520 --> 00:07:26,310
This will mean that the page the user is currently on is not our plugins page and so we shouldn't do

97
00:07:26,310 --> 00:07:27,600
anything else.

98
00:07:27,750 --> 00:07:32,580
If the user makes it this far then we'll in queue the bootstrap style sheet.

99
00:07:32,610 --> 00:07:41,160
We don't need the j as the CSO style is inside the assets slash C Ss slash bootstrap dot CSX that is

100
00:07:41,160 --> 00:07:41,690
relative.

101
00:07:41,700 --> 00:07:43,200
The recipe plugin file

102
00:07:53,910 --> 00:08:00,200
let's refresh the admin page if we get no errors in our console related to the files we queued.

103
00:08:00,300 --> 00:08:01,570
Then we're good to go.

104
00:08:01,710 --> 00:08:05,600
It's time to create a form inside the options page.

105
00:08:05,610 --> 00:08:12,610
I'm going to paste in some markup this form has nothing unique to WordPress.

106
00:08:12,610 --> 00:08:15,450
This is all bootstrap markup to make it look pretty.

107
00:08:15,610 --> 00:08:23,440
You can find this markup inside these slash assets slash extras slash options dash page dot t t file

108
00:08:24,370 --> 00:08:26,380
let's go over what's going on.

109
00:08:26,410 --> 00:08:32,560
As you can see I have created a form input for the two options we created earlier in the activation

110
00:08:32,560 --> 00:08:33,510
function.

111
00:08:33,520 --> 00:08:38,740
I've also made all text translatable using the underscore e function.

112
00:08:38,740 --> 00:08:44,460
One important thing I want you to know is the name attribute for each input as you can see.

113
00:08:44,530 --> 00:08:50,550
I prefix everything with our underscore this is to prevent any collisions with any other data WordPress

114
00:08:50,560 --> 00:08:53,050
sends out when we submit this form.

115
00:08:53,080 --> 00:08:56,200
So how do we get the form to submit correctly.

116
00:08:56,200 --> 00:08:59,260
Well it's pretty simple in the form tag.

117
00:08:59,260 --> 00:09:09,420
I'm going to set the method to post the action will be sent to add Min dash post stop BHP.

118
00:09:09,480 --> 00:09:10,980
This is very important.

119
00:09:10,990 --> 00:09:17,160
Whenever you create forms this is the you are well you should submit your info to to be more specific

120
00:09:17,220 --> 00:09:20,260
forms on the admin side of WordPress.

121
00:09:20,370 --> 00:09:29,400
Actually you can find this file inside the WP dash admin folder open this file if you take a look at

122
00:09:29,400 --> 00:09:35,880
this comment you'll notice it says intended for form submission handling themes and plugins it's safe

123
00:09:35,880 --> 00:09:39,420
to assume that we can send our data to this file.

124
00:09:39,420 --> 00:09:43,800
There are a couple of things we need to do before this form is fully functional.

125
00:09:43,800 --> 00:09:45,430
We face two problems.

126
00:09:45,480 --> 00:09:51,080
We're not the only ones who will be posting data to the ad men dash post dot PHC file.

127
00:09:51,180 --> 00:09:56,580
We need to make WordPress aware that we're the ones submitting the form and execute the appropriate

128
00:09:56,580 --> 00:09:57,720
functions.

129
00:09:57,720 --> 00:10:01,260
The second problem is X SS injections.

130
00:10:01,260 --> 00:10:05,870
This form can be easily recreated and submitted without our permission.

131
00:10:05,880 --> 00:10:10,420
The answer to both these problems are simple and taken care of by WordPress.

132
00:10:10,500 --> 00:10:14,100
First create an input field that should be hidden.

133
00:10:14,100 --> 00:10:15,960
Its name should be action

134
00:10:20,680 --> 00:10:21,280
WordPress.

135
00:10:21,280 --> 00:10:23,840
We'll search for this field and check its value.

136
00:10:23,950 --> 00:10:28,850
The value of this field will determine what function will be used to save this data.

137
00:10:28,870 --> 00:10:37,600
I'm going to set the value attribute to our save options you'll see what this does in a moment.

138
00:10:37,610 --> 00:10:42,260
Next we need to make our form secure from X SS attacks.

139
00:10:42,260 --> 00:10:48,590
WordPress recommends we create a field with a unique key that is generated when we visit this page.

140
00:10:48,590 --> 00:10:52,040
We can then validate this key during submission.

141
00:10:52,040 --> 00:10:54,880
We already know how to handle something like this.

142
00:10:54,890 --> 00:10:59,290
We can use the WP nonce field function like before.

143
00:10:59,300 --> 00:11:08,530
Call this function and pass in our options verify.

144
00:11:08,620 --> 00:11:13,300
I'm not going to deal with the other parameters because we're out putting this all to the screen rather

145
00:11:13,300 --> 00:11:14,370
than returning it.

146
00:11:14,440 --> 00:11:17,580
So I'm not so concerned with the other values.

147
00:11:17,710 --> 00:11:19,900
Let's refresh the admin page.

148
00:11:19,900 --> 00:11:26,250
You should see this field being generated by WordPress after confirming this.

149
00:11:26,270 --> 00:11:28,910
We can now submit and update our settings.
