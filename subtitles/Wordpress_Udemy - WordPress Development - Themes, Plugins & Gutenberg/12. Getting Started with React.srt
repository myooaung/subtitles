1
00:00:07,340 --> 00:00:13,700
We are now going to talk about react react is a javascript library that allows you to build complex

2
00:00:13,700 --> 00:00:15,210
user interfaces.

3
00:00:15,260 --> 00:00:20,900
It's mostly used to build single page applications which is something we'll cover later in this course.

4
00:00:20,900 --> 00:00:25,150
Truthfully we ask is a massive library with various features.

5
00:00:25,250 --> 00:00:27,950
It's something that deserves a course of its own.

6
00:00:28,010 --> 00:00:30,350
I won't be able to cover every little thing.

7
00:00:30,890 --> 00:00:34,190
I highly recommend checking out a course dedicated to react on you.

8
00:00:34,200 --> 00:00:39,660
To me the purpose of these next few lectures is to give you a light introduction to this library.

9
00:00:40,430 --> 00:00:45,330
Luckily you don't need to know every little feature to develop plugins for Gutenberg.

10
00:00:45,440 --> 00:00:50,810
The team behind Gutenberg have already taken care of the heavy lifting just like everything else in

11
00:00:50,810 --> 00:00:51,480
WordPress.

12
00:00:51,500 --> 00:00:54,400
You just call a few functions and you're set.

13
00:00:54,440 --> 00:00:59,090
You don't even need to know react to get started with Gutenberg development.

14
00:00:59,090 --> 00:01:03,680
However I believe having an overview of things will make you a better developer.

15
00:01:03,710 --> 00:01:10,060
Everything I show you here will be enough to make you comfortable with Gutenberg development.

16
00:01:10,150 --> 00:01:12,940
Right now I'm on the official react site.

17
00:01:12,970 --> 00:01:17,800
Everything you want to know about react can be found here right on the home page you'll find a link

18
00:01:17,800 --> 00:01:24,460
to a tutorial I recommend checking out this tutorial once you finish this section in the resource section

19
00:01:24,460 --> 00:01:30,200
of this lecture I provide a zip file with some starter files download it and unzip the contents.

20
00:01:30,280 --> 00:01:31,870
Let's review the files.

21
00:01:31,870 --> 00:01:35,860
First up is the Web pack dot config dot J.S. file.

22
00:01:35,860 --> 00:01:38,860
This is pretty much the same thing we had before.

23
00:01:38,860 --> 00:01:45,610
We will be working inside the app directory and the final results will be saved inside the disk directory.

24
00:01:45,610 --> 00:01:48,220
Lastly I'm loading the Babel module.

25
00:01:48,280 --> 00:01:51,050
Next let's open the package file.

26
00:01:51,160 --> 00:01:56,060
Everything is the same except for three things inside B dependencies object.

27
00:01:56,050 --> 00:01:58,960
I'm loading three modules called react react.

28
00:01:58,960 --> 00:02:08,000
Dom Babel preset react the react module is the core of React itself react is split into multiple modules.

29
00:02:08,080 --> 00:02:11,480
This way we're not forced to use everything at once.

30
00:02:11,560 --> 00:02:14,110
This is basically the only required module.

31
00:02:14,140 --> 00:02:21,280
If you ever use react the react da module is responsible for displaying your HDL and working with the

32
00:02:21,290 --> 00:02:22,900
H2 e-mail document.

33
00:02:22,900 --> 00:02:29,920
This used to be a part of the core but since reacts inception the library has grown to accommodate various

34
00:02:29,920 --> 00:02:31,090
scenarios.

35
00:02:31,090 --> 00:02:36,820
You can use react for creating mobile and desktop applications in these cases.

36
00:02:36,820 --> 00:02:42,940
It may not be necessary to use the react Dom module for this course we will be interacting with the

37
00:02:43,030 --> 00:02:44,070
HDMI document.

38
00:02:44,140 --> 00:02:46,060
So will need this module.

39
00:02:46,060 --> 00:02:53,200
The Babel preset react module will make sure any react related code also gets processed will need to

40
00:02:53,200 --> 00:02:55,710
add this to the DOT Babel RC file.

41
00:02:56,050 --> 00:03:02,700
Open this file and add the react preset.

42
00:03:02,740 --> 00:03:07,670
You can also set Babel dash preset dash Eon V to Eon DVD.

43
00:03:07,690 --> 00:03:10,530
This is the shorthand version of that module.

44
00:03:10,570 --> 00:03:11,750
That's basically it.

45
00:03:11,800 --> 00:03:17,170
We don't have to worry about configuring Westpac since Babel will take care of loading the modules required

46
00:03:17,170 --> 00:03:18,240
for react.

47
00:03:18,280 --> 00:03:22,500
We don't need to install any special modules for those libraries.

48
00:03:22,570 --> 00:03:27,020
All right let's open the command line and run the commands npm install.

49
00:03:27,190 --> 00:03:30,760
This will install the modules inside the package file.

50
00:03:30,760 --> 00:03:34,780
Make sure your command line is pointed to your directory before running the command.

51
00:03:38,980 --> 00:03:39,590
Hopefully.

52
00:03:39,610 --> 00:03:42,590
Everything was installed successfully for you next.

53
00:03:42,610 --> 00:03:45,760
Let's open the index dot HDMI file.

54
00:03:45,760 --> 00:03:47,460
This file is pretty basic.

55
00:03:47,560 --> 00:03:52,870
I'm loading a script file named bundle dot J.S. which currently doesn't exist.

56
00:03:52,870 --> 00:03:54,130
That's perfectly fine.

57
00:03:54,130 --> 00:03:55,750
We'll be adding it later.

58
00:03:55,750 --> 00:03:59,680
Right now I want to focus on one thing for this example.

59
00:03:59,680 --> 00:04:03,720
I want to display a list of people inside the body tag.

60
00:04:03,760 --> 00:04:12,830
I'm going to create a div tag with the I.D. people then I'm going to create a list of people.

61
00:04:12,900 --> 00:04:13,800
I'll do this quickly

62
00:04:22,230 --> 00:04:26,450
so I have a couple of div tags with the class person.

63
00:04:26,490 --> 00:04:28,750
Each person has a name and age.

64
00:04:28,770 --> 00:04:30,330
It's pretty straightforward.

65
00:04:30,330 --> 00:04:34,770
The problem with this is that we're constantly rewriting the same thing.

66
00:04:34,920 --> 00:04:41,190
Right now we have two people but can you imagine how much code this would be with 50 or 100 people.

67
00:04:41,190 --> 00:04:42,990
It would be disastrous.

68
00:04:42,990 --> 00:04:47,910
Since the HDMI L is all the same we can use something react calls components

69
00:04:50,120 --> 00:04:53,250
components are reusable HDMI elements.

70
00:04:53,300 --> 00:04:57,570
That's an oversimplification but just keep going with me here.

71
00:04:57,590 --> 00:05:04,250
If you were to look at any web page then you can break it down into components the header content sidebar

72
00:05:04,310 --> 00:05:07,240
and footer can be broken down into components.

73
00:05:07,400 --> 00:05:10,330
The advantages of using components are pretty clear.

74
00:05:10,430 --> 00:05:16,660
You can reuse them which can make your code look a whole lot cleaner to get started.

75
00:05:16,660 --> 00:05:24,940
Open the app directory you'll find a file called index dot J.S. currently attempting to create a component.

76
00:05:24,970 --> 00:05:32,760
The first thing we need to do is import react we can name this import whatever we want.

77
00:05:32,820 --> 00:05:38,940
But once again it's common practice to name and after the module name the module is available inside

78
00:05:38,970 --> 00:05:41,880
the node underscore modules directory.

79
00:05:41,880 --> 00:05:48,570
This is why we don't have to pass in a dot forward slash web pack and Node are more than capable of

80
00:05:48,570 --> 00:05:50,720
finding the package for you.

81
00:05:50,760 --> 00:05:57,220
We're going to create a function called person when it comes to components.

82
00:05:57,310 --> 00:06:00,420
You must name your components with uppercase letters.

83
00:06:00,430 --> 00:06:04,120
I'll explain why in just a moment but let's keep moving forward.

84
00:06:04,240 --> 00:06:11,110
Inside this function I'm going to return some HDMI out I'll grab the H2 UML from the document.

85
00:06:11,110 --> 00:06:25,210
Like so.

86
00:06:25,370 --> 00:06:27,600
All right let's stop here for a moment.

87
00:06:27,620 --> 00:06:31,520
You'll notice that I'm not surrounding the h t email with quotes.

88
00:06:31,520 --> 00:06:33,900
This is what's called J.S. X..

89
00:06:33,920 --> 00:06:37,280
J Yes X stands for JavaScript x amount.

90
00:06:37,340 --> 00:06:43,760
It's a way to allow you to write H.G. AML in JavaScript files you have to surround your HDL UML with

91
00:06:43,760 --> 00:06:50,540
a pair of parentheses though if you put your hcm email all on one line then the parentheses are optional.

92
00:06:50,540 --> 00:06:54,590
Since we have multi line HCM L then it's required.

93
00:06:54,590 --> 00:06:59,210
Another thing I want to note is that I've completely emptied out the did element since we'll be loading

94
00:06:59,210 --> 00:07:00,820
this through react.

95
00:07:00,830 --> 00:07:07,790
This function is pretty straightforward if it's called then it overturned the JSC X the J NSX isn't

96
00:07:07,790 --> 00:07:08,550
ready though.

97
00:07:08,720 --> 00:07:14,010
One of the drawbacks of using JSA X is that some attributes may not work as expected.

98
00:07:14,030 --> 00:07:22,160
For example the class keyword can't be used in HCM l the class attribute is used to assign classes to

99
00:07:22,160 --> 00:07:23,000
an element.

100
00:07:23,000 --> 00:07:28,240
However in JavaScript the class keyword is used to create objects.

101
00:07:28,250 --> 00:07:34,990
This is a conflicting problem to get around this react provides an alternative instead of class.

102
00:07:35,000 --> 00:07:38,890
Change this to class name.

103
00:07:38,940 --> 00:07:41,710
This will do what the class attribute does.

104
00:07:41,760 --> 00:07:44,100
This doesn't apply to all attributes.

105
00:07:44,220 --> 00:07:48,510
I'll be sure to let you know which attributes work differently throughout this course.

106
00:07:48,510 --> 00:07:54,710
This is also why be upper case the functioning lower case letters indicate that the element is a regular

107
00:07:54,710 --> 00:07:59,890
H2 email element while an uppercase letter indicates that the element is a component.

108
00:07:59,910 --> 00:08:02,370
This is common practice among developers.

109
00:08:02,370 --> 00:08:07,450
Moving on I now want to call this function so I can display the J.S. sex inside it.

110
00:08:07,680 --> 00:08:16,910
To do that we'll need to import the react Dom module.

111
00:08:17,090 --> 00:08:22,220
Remember the react Dom module will take care of working with the H2 email document.

112
00:08:22,250 --> 00:08:25,800
So we'll need an order for this to work below the function.

113
00:08:25,820 --> 00:08:33,810
I'm going to call the render function from the react Dom object this function will take care of displaying

114
00:08:33,810 --> 00:08:35,680
your J.S. sex on the browser.

115
00:08:35,790 --> 00:08:37,800
It requires two parameters.

116
00:08:37,980 --> 00:08:42,010
The first parameter is the component that will display the J.S. sex.

117
00:08:42,060 --> 00:08:47,750
You may be tempted to call this function like so but that's the incorrect way of using it.

118
00:08:47,760 --> 00:08:53,790
This function wants to render an element so we'll have to pass in the component like an element.

119
00:08:53,790 --> 00:09:01,470
I'm going to create a self closing tag with the person component as the element name.

120
00:09:01,560 --> 00:09:06,860
The second parameter requires the name of the element on the page that will contain the rendered J.S.

121
00:09:06,860 --> 00:09:07,710
X..

122
00:09:07,710 --> 00:09:11,370
I'm going to use the div tag with the I.D. people.

123
00:09:11,490 --> 00:09:18,030
I'll just use some old fashioned javascript to select this element that should do it.

124
00:09:18,270 --> 00:09:20,310
Let's run the commands NPM start

125
00:09:24,410 --> 00:09:25,740
after running this command.

126
00:09:25,760 --> 00:09:27,980
Open your browser to view the page.

127
00:09:27,980 --> 00:09:34,560
You should see the person being displayed without a problem check the console for any errors as well.

128
00:09:34,580 --> 00:09:36,020
There shouldn't be any.

129
00:09:36,110 --> 00:09:40,680
Just like that we've created our very first react application.

130
00:09:40,700 --> 00:09:41,630
It wasn't too hard.

131
00:09:42,080 --> 00:09:44,750
Let's review what we did inside the file.

132
00:09:44,750 --> 00:09:47,630
The very first thing we did was import some modules.

133
00:09:47,720 --> 00:09:51,410
Something you'll notice is that we didn't bother using the react module.

134
00:09:51,650 --> 00:09:53,710
However that's entirely not true.

135
00:09:54,380 --> 00:09:57,780
Even though it's not written anywhere it does get used in our code.

136
00:09:58,130 --> 00:10:04,250
I'm going to paste in some code really quick inside the person of function.

137
00:10:04,300 --> 00:10:10,010
I've commented out the ASX instead I'm using react to create the elements.

138
00:10:10,060 --> 00:10:11,310
You don't have to do this.

139
00:10:11,320 --> 00:10:12,390
Just watch.

140
00:10:12,460 --> 00:10:18,670
I'll explain more in just a moment but let's see if this works inside the command line input the commands

141
00:10:18,790 --> 00:10:25,830
NPM start then I'll refresh the page and I'll see the name output.

142
00:10:25,850 --> 00:10:32,910
Once again it may seem like there are two ways to generate HDL but it's actually all the same thing.

143
00:10:32,990 --> 00:10:40,190
J.S. sex is first and foremost javascript even though it looks like h t AML this code will be interpreted

144
00:10:40,190 --> 00:10:47,870
as javascript Babel will convert this into the code below react has a function called Create element

145
00:10:48,260 --> 00:10:49,650
as the name suggests.

146
00:10:49,700 --> 00:10:51,740
This will create an element.

147
00:10:51,740 --> 00:10:54,090
There are three required parameters.

148
00:10:54,110 --> 00:10:58,130
The first is the name of the element I passed him the div tag.

149
00:10:58,130 --> 00:11:04,280
Then you need to pass on the attributes if your element doesn't have any attributes then you can set

150
00:11:04,280 --> 00:11:05,510
this to know.

151
00:11:05,510 --> 00:11:10,040
And this example I'm setting the class name property to person.

152
00:11:10,040 --> 00:11:12,870
Lastly you need to pass in the content.

153
00:11:13,070 --> 00:11:16,750
I'm actually passing in another create element function.

154
00:11:16,970 --> 00:11:20,030
You have to do this if you want to have nested elements.

155
00:11:20,030 --> 00:11:25,070
This time I'm creating an H one tag with the text Jack.

156
00:11:25,070 --> 00:11:29,930
Other than that the rest of our code is the same J.S. X as javascript.

157
00:11:29,960 --> 00:11:35,060
It looks like h t l but it will eventually be converted to the code I have here.

158
00:11:35,060 --> 00:11:41,090
You can already see the benefits of using JSA X it makes our code look readable and manageable.

159
00:11:41,090 --> 00:11:45,020
This is why I am teaching you react when we start working with Gutenberg.

160
00:11:45,050 --> 00:11:49,400
You have the option of using JSA X or these functions right now.

161
00:11:49,400 --> 00:11:55,300
Our example is pretty simple but can you imagine the code we'd have to write for 10 elements.

162
00:11:55,550 --> 00:11:59,860
Writing it like this is not wrong but you do make it harder for yourself.

163
00:11:59,870 --> 00:12:05,060
I highly encourage you to use CSX when creating plugins for Gutenberg.

164
00:12:05,060 --> 00:12:07,590
I'm going to comment this out and then uncommon.

165
00:12:07,610 --> 00:12:15,150
My JSA ex moving on this function will only create the person element.

166
00:12:15,360 --> 00:12:18,510
The next step is to render it on the page to do that.

167
00:12:18,510 --> 00:12:25,440
We use the render function we pass this in as J.S. X and then we tell it where to display that element.

168
00:12:25,440 --> 00:12:26,460
That's all there is to it.

169
00:12:26,940 --> 00:12:30,390
I recommend you play around with this a little bit in the next lecture.

170
00:12:30,390 --> 00:12:34,580
I'll go over a couple more things before we move onto Gutenberg development.
