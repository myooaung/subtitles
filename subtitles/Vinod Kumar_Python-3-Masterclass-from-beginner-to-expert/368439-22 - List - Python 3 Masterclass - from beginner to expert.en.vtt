WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.950
a collection is an object that can contain multiple other objects.

00:00:04.950 --> 00:00:06.070
In Britain,

00:00:06.070 --> 00:00:07.730
there are four types of collections.

00:00:07.730 --> 00:00:08.750
List.

00:00:08.750 --> 00:00:09.490
Doable,

00:00:09.490 --> 00:00:11.350
set and picked.

00:00:11.350 --> 00:00:13.190
Short form for dictionary.

00:00:13.190 --> 00:00:14.460
In this listen,

00:00:14.460 --> 00:00:18.890
we're gonna look in tow lists in detail to understand the scene.

00:00:18.890 --> 00:00:22.690
Let's get into a fight attention by getting into a command front on,

00:00:22.690 --> 00:00:24.450
then typing by three,

00:00:24.450 --> 00:00:31.470
you can create a list object by typing your one p equals toe a pair of square records.

00:00:31.470 --> 00:00:33.800
So now I can say type off L one.

00:00:33.800 --> 00:00:35.290
It is list,

00:00:35.290 --> 00:00:39.840
or I can say everyone equals toe list constructor.

00:00:39.840 --> 00:00:41.410
And then I said,

00:00:41.410 --> 00:00:42.430
Type of L one.

00:00:42.430 --> 00:00:47.760
It's the same thing in case the 1st 1 We can also assign a bunch of values like,

00:00:47.760 --> 00:00:48.510
for example,

00:00:48.510 --> 00:00:50.910
names equals toe in square brackets.

00:00:50.910 --> 00:00:53.450
I can take in a few names like this,

00:00:53.450 --> 00:00:59.640
whereas if you're using a constructor,

00:00:59.640 --> 00:01:00.630
you men are people.

00:01:00.630 --> 00:01:03.150
Toe send values like that.

00:01:03.150 --> 00:01:04.030
Of course,

00:01:04.030 --> 00:01:09.520
you can always say cities equals to list on entered the list constructor.

00:01:09.520 --> 00:01:12.160
You can supply some cities like this.

00:01:12.160 --> 00:01:20.100
Notice that we are supplying a list inside the constructor off the list.

00:01:20.100 --> 00:01:24.480
Obviously we could artifically other square bracket to cities.

00:01:24.480 --> 00:01:25.770
In both the cases,

00:01:25.770 --> 00:01:28.500
names and cities are list objects.

00:01:28.500 --> 00:01:35.410
So here are our two lifts names on and cities to find the number off elements that is

00:01:35.410 --> 00:01:37.330
contained within the list really,

00:01:37.330 --> 00:01:38.670
really concerned with them.

00:01:38.670 --> 00:01:46.460
Off names are let off cities and to access an unusual element off a list.

00:01:46.460 --> 00:01:49.050
Eager always the names off.

00:01:49.050 --> 00:01:55.800
So we set off here but school bracket and then say give a number that indicates the index

00:01:55.800 --> 00:01:57.250
off the particular element.

00:01:57.250 --> 00:01:59.330
Now the index start from zero,

00:01:59.330 --> 00:02:01.030
so the 1st 1 is zero.

00:02:01.030 --> 00:02:06.600
Then you have the index one index to index three so I can see here names off,

00:02:06.600 --> 00:02:08.510
zero the names off,

00:02:08.510 --> 00:02:12.550
one names off to and names off.

00:02:12.550 --> 00:02:13.300
Three.

00:02:13.300 --> 00:02:14.350
Of course,

00:02:14.350 --> 00:02:15.250
if you tried toe,

00:02:15.250 --> 00:02:17.770
go beyond the maximum index.

00:02:17.770 --> 00:02:19.170
You're gonna get an error.

00:02:19.170 --> 00:02:22.810
So the four index corresponds to the fifth Element,

00:02:22.810 --> 00:02:24.250
which doesnt existing names,

00:02:24.250 --> 00:02:27.150
and that'll give an error called index error.

00:02:27.150 --> 00:02:28.300
Similarly,

00:02:28.300 --> 00:02:33.650
if you think that zero is the lawyer limit and you cannot go beyond the lower limit,

00:02:33.650 --> 00:02:36.260
destroying many other languages like,

00:02:36.260 --> 00:02:36.870
for example,

00:02:36.870 --> 00:02:43.870
minus one is an invalid index in languages like Java sea seizure or c++.

00:02:43.870 --> 00:02:44.680
However,

00:02:44.680 --> 00:02:52.280
in bygone minus one corresponds to the index off the last element as your so like names off

00:02:52.280 --> 00:02:52.280
.

00:02:52.280 --> 00:02:52.750
Three.

00:02:52.750 --> 00:02:55.240
If I say names off minus one,

00:02:55.240 --> 00:02:56.500
we're gonna get the same thing.

00:02:56.500 --> 00:02:57.390
Similarly,

00:02:57.390 --> 00:03:04.890
I can also say names off minus two names off minus three and then names off minus four,

00:03:04.890 --> 00:03:07.860
which is corresponding to the first element Now,

00:03:07.860 --> 00:03:10.990
now off modified their names off my neck spine.

00:03:10.990 --> 00:03:14.330
This will cause the same error as the earlier one,

00:03:14.330 --> 00:03:18.370
which is the index center because you don't have a minus five year.

00:03:18.370 --> 00:03:23.450
Although the minus two minus three minus four are generally not in yours,

00:03:23.450 --> 00:03:30.110
you can quickly get the element in the last position by the stepping names off minus one

00:03:30.110 --> 00:03:33.950
without having to know the length off the names list.

00:03:33.950 --> 00:03:35.160
Similarly,

00:03:35.160 --> 00:03:37.350
if you want toe are more values.

00:03:37.350 --> 00:03:39.430
Toe the end off this.

00:03:39.430 --> 00:03:45.540
You can simply say here names plus equals toe and didn't supply another list off some

00:03:45.540 --> 00:03:46.090
values,

00:03:46.090 --> 00:03:46.950
for example,

00:03:46.950 --> 00:03:50.850
like a job June in another list.

00:03:50.850 --> 00:03:52.920
So if you do this,

00:03:52.920 --> 00:03:57.950
you will be able to see that two more names are added at the end off this particular list.

00:03:57.950 --> 00:03:59.120
Now here,

00:03:59.120 --> 00:04:00.470
one North 40.

00:04:00.470 --> 00:04:05.230
Mentioning is names plus two equals two and a string.

00:04:05.230 --> 00:04:05.970
If I queue,

00:04:05.970 --> 00:04:06.930
for example,

00:04:06.930 --> 00:04:07.980
I say Robert,

00:04:07.980 --> 00:04:12.980
now there's gonna be a little funny because if you take enter and then check names,

00:04:12.980 --> 00:04:16.770
you'll see that instead of rather being the last name,

00:04:16.770 --> 00:04:19.170
you'll see each character off.

00:04:19.170 --> 00:04:23.860
The name that rendered have been added as separate string over here.

00:04:23.860 --> 00:04:29.980
The reason for that is a string is considered as a collection off characters,

00:04:29.980 --> 00:04:33.410
so each character is taken and then appended,

00:04:33.410 --> 00:04:35.430
just like how we operated over here.

00:04:35.430 --> 00:04:36.010
So you know,

00:04:36.010 --> 00:04:40.230
the words here is a collection is worth expected within supply collection.

00:04:40.230 --> 00:04:46.140
Here we supply the string and string is a collection off characters and each character is

00:04:46.140 --> 00:04:46.700
appended.

00:04:46.700 --> 00:04:48.540
At the end of this No off course.

00:04:48.540 --> 00:04:54.330
If I want to remove these elements so you will not be able to use any of the minus

00:04:54.330 --> 00:04:55.210
operators.

00:04:55.210 --> 00:04:58.270
We have toe depend on some functions.

00:04:58.270 --> 00:04:59.200
So to know,

00:04:59.200 --> 00:05:01.550
what are the functions in a list?

00:05:01.550 --> 00:05:06.540
Simply type DEA and then either take the name of the class,

00:05:06.540 --> 00:05:10.950
which is list are name off a variable off lister type,

00:05:10.950 --> 00:05:13.800
which is names Cyprus ender,

00:05:13.800 --> 00:05:17.350
and you'll see that there are many functions as usual,

00:05:17.350 --> 00:05:21.100
we are only disturbed in the non dunder functions,

00:05:21.100 --> 00:05:21.980
which are these.

00:05:21.980 --> 00:05:29.010
So here is a function called opened that can be used for adding more names to this

00:05:29.010 --> 00:05:30.510
particular existing names.

00:05:30.510 --> 00:05:33.100
So I can say your name.

00:05:33.100 --> 00:05:34.190
Start opened.

00:05:34.190 --> 00:05:34.880
Say,

00:05:34.880 --> 00:05:36.090
for example,

00:05:36.090 --> 00:05:36.950
Jacob.

00:05:36.950 --> 00:05:39.050
No,

00:05:39.050 --> 00:05:42.690
See that Jacob is the last element again.

00:05:42.690 --> 00:05:46.480
You can only are one element at a time using append.

00:05:46.480 --> 00:05:47.980
If you say name,

00:05:47.980 --> 00:05:49.900
start upend off.

00:05:49.900 --> 00:05:53.160
Let the two names using a list like this say,

00:05:53.160 --> 00:05:54.150
for example,

00:05:54.150 --> 00:06:01.060
Rahul Onda and then press enter.

00:06:01.060 --> 00:06:07.350
This list is now considered as one element that you want to open over here.

00:06:07.350 --> 00:06:12.870
So while we have a lot of strings over here after this particular command,

00:06:12.870 --> 00:06:18.530
you will see that the last element happens to be a new list by itself.

00:06:18.530 --> 00:06:23.750
That this is because lists in Beit on our heterogeneous in nature,

00:06:23.750 --> 00:06:26.900
you can have a list of elements which are off different types.

00:06:26.900 --> 00:06:27.760
Similarly,

00:06:27.760 --> 00:06:28.700
if you want toe,

00:06:28.700 --> 00:06:30.990
remove all the values from here,

00:06:30.990 --> 00:06:35.170
you can simply call the name start clear so named,

00:06:35.170 --> 00:06:38.420
start clear will now remove all the values.

00:06:38.420 --> 00:06:40.200
And if you say here names,

00:06:40.200 --> 00:06:43.270
it's going to be an empty collection that three initialized.

00:06:43.270 --> 00:06:46.850
This names toe a collection off you names,

00:06:46.850 --> 00:06:49.350
so I'm gonna take these names.

00:06:49.350 --> 00:06:50.330
Copy,

00:06:50.330 --> 00:06:50.990
Paste.

00:06:50.990 --> 00:06:52.050
Close the bracket.

00:06:52.050 --> 00:06:52.800
No,

00:06:52.800 --> 00:06:54.050
I have these names here.

00:06:54.050 --> 00:06:59.340
Now I can get a shallow copy off this names into a new variable.

00:06:59.340 --> 00:07:00.120
For example,

00:07:00.120 --> 00:07:05.650
I can say another names because toe name start copy.

00:07:05.650 --> 00:07:10.650
This will give me a shallow copy off this particular list,

00:07:10.650 --> 00:07:18.180
which means this is pointing to a new object all together so I can say here no names.

00:07:18.180 --> 00:07:21.950
This is one names on another names given new variable,

00:07:21.950 --> 00:07:24.210
which contains a similar set of values.

00:07:24.210 --> 00:07:24.990
However,

00:07:24.990 --> 00:07:36.410
if I say names plus equals toe and then type your say toe upend toe names will see the

00:07:36.410 --> 00:07:41.190
names have a one additional name compared toa another names.

00:07:41.190 --> 00:07:45.500
These two are independent objects and not related with each other.

00:07:45.500 --> 00:07:50.040
The function extend is similar to that of upend,

00:07:50.040 --> 00:07:56.010
but upend takes a single object extent can take different objects.

00:07:56.010 --> 00:08:00.770
So I'm gonna clear the screen so names contain these values.

00:08:00.770 --> 00:08:07.350
But I can say here names or extend and then supply a list off more names here.

00:08:07.350 --> 00:08:08.860
That's a key.

00:08:08.860 --> 00:08:09.250
Sure.

00:08:09.250 --> 00:08:12.200
Onda se,

00:08:12.200 --> 00:08:13.370
for example,

00:08:13.370 --> 00:08:18.720
one so when we used to the same thing with upend,

00:08:18.720 --> 00:08:22.650
you remember that the entire list was added as one element.

00:08:22.650 --> 00:08:23.630
With this.

00:08:23.630 --> 00:08:28.770
Now you'll see names I've been added with two more names here.

00:08:28.770 --> 00:08:30.720
Instead of a single A list,

00:08:30.720 --> 00:08:32.130
it has added anything,

00:08:32.130 --> 00:08:34.300
so the extent is a better choice when you want to.

00:08:34.300 --> 00:08:38.140
Our multiple elements toe on existing list already.

00:08:38.140 --> 00:08:41.290
Let's have a look at one of the other functions we have here.

00:08:41.290 --> 00:08:44.360
So apart from extend,

00:08:44.360 --> 00:08:50.000
you have a index index is a function that gives the index off a given element.

00:08:50.000 --> 00:08:50.610
For example,

00:08:50.610 --> 00:08:56.900
if I want to know what is the index off this particular text in the names so I can say here

00:08:56.900 --> 00:08:56.900
,

00:08:56.900 --> 00:08:57.280
Name,

00:08:57.280 --> 00:08:57.660
start,

00:08:57.660 --> 00:09:00.290
index and then supply that value,

00:09:00.290 --> 00:09:05.670
and that's gonna give you three because it's index start from zero here one,

00:09:05.670 --> 00:09:06.690
two,

00:09:06.690 --> 00:09:12.280
and then this is the 3rd 1 in case if you want to find the index off text and the text

00:09:12.280 --> 00:09:13.830
doesn't exist there,

00:09:13.830 --> 00:09:14.530
for example,

00:09:14.530 --> 00:09:20.500
if I just type your courage and press enter because the world parish is not there in this

00:09:20.500 --> 00:09:22.070
enter list,

00:09:22.070 --> 00:09:27.540
it's going to give you an editor called us Value Better like the index.

00:09:27.540 --> 00:09:27.840
Aaron,

00:09:27.840 --> 00:09:34.390
the other your case so insert can be used for inserting an element at a given location.

00:09:34.390 --> 00:09:38.330
So if you want to get additional help on any off these,

00:09:38.330 --> 00:09:40.340
you can simply type your help,

00:09:40.340 --> 00:09:42.890
followed by either a list.

00:09:42.890 --> 00:09:43.400
Start.

00:09:43.400 --> 00:09:45.470
Insert our names,

00:09:45.470 --> 00:09:46.550
start insert,

00:09:46.550 --> 00:09:47.860
and if you press enter,

00:09:47.860 --> 00:09:49.720
it's going to give the help on this.

00:09:49.720 --> 00:09:54.810
So we wanted to know what are the parameters that you can supply to the insert function.

00:09:54.810 --> 00:09:55.860
So if I pressed,

00:09:55.860 --> 00:10:00.080
enter here now you can see that it is insert self.

00:10:00.080 --> 00:10:03.140
The self here is the list object itself.

00:10:03.140 --> 00:10:04.270
So in other words,

00:10:04.270 --> 00:10:07.050
you can ignore this as the first argument.

00:10:07.050 --> 00:10:09.550
So you can say that this is the first argument.

00:10:09.550 --> 00:10:12.860
Where do you want to insert and what do you want to insert?

00:10:12.860 --> 00:10:14.680
So to come back here,

00:10:14.680 --> 00:10:17.710
we just rescue and then type your name.

00:10:17.710 --> 00:10:18.960
Start insert.

00:10:18.960 --> 00:10:24.700
Let's say own insert at index Fall on a new name called Say,

00:10:24.700 --> 00:10:25.560
for example,

00:10:25.560 --> 00:10:25.940
C.

00:10:25.940 --> 00:10:28.990
D and press enter.

00:10:28.990 --> 00:10:30.260
If you see now,

00:10:30.260 --> 00:10:34.230
names consist off Prada deep at the fourth Index,

00:10:34.230 --> 00:10:38.850
pushing John Jane on other names onto the right side,

00:10:38.850 --> 00:10:41.900
so it has inserted it did not overrate.

00:10:41.900 --> 00:10:48.130
The element of index for pop is another function that can be used for removing the last

00:10:48.130 --> 00:10:48.870
element.

00:10:48.870 --> 00:10:51.580
So the element is over here again.

00:10:51.580 --> 00:10:53.100
If you want to get help on this,

00:10:53.100 --> 00:10:58.740
you can save help and then say names start pop notice when I'm getting the help.

00:10:58.740 --> 00:11:00.900
I'm just giving the name of the function,

00:11:00.900 --> 00:11:02.570
and I'm not calling the function.

00:11:02.570 --> 00:11:04.050
So if you press enter,

00:11:04.050 --> 00:11:05.770
it says your pop,

00:11:05.770 --> 00:11:08.730
you can say If you don't given index,

00:11:08.730 --> 00:11:13.220
then you take minus one and we know that the index minus one corresponds to the last

00:11:13.220 --> 00:11:13.850
element.

00:11:13.850 --> 00:11:16.680
That means you don't have to supply any value at all.

00:11:16.680 --> 00:11:17.730
But if you supply,

00:11:17.730 --> 00:11:18.880
it has to be a number,

00:11:18.880 --> 00:11:21.820
and the number will represent the index once again.

00:11:21.820 --> 00:11:23.630
If you give a wrong index.

00:11:23.630 --> 00:11:24.440
For example,

00:11:24.440 --> 00:11:28.780
I know that there are these many names like So.

00:11:28.780 --> 00:11:30.410
Since there are 10 names,

00:11:30.410 --> 00:11:33.010
the valid index will be from 0 to 9,

00:11:33.010 --> 00:11:34.020
so you can say names.

00:11:34.020 --> 00:11:37.170
Dark pop zero tau nine are.

00:11:37.170 --> 00:11:38.750
If I simply say pop,

00:11:38.750 --> 00:11:41.490
one will be removed from there so I can say,

00:11:41.490 --> 00:11:42.210
for example,

00:11:42.210 --> 00:11:49.960
name Start Bob and then you'll see that one is returned as well as has been removed from

00:11:49.960 --> 00:11:50.530
the collection.

00:11:50.530 --> 00:11:53.550
You can see names will now have no one here.

00:11:53.550 --> 00:11:56.020
But let's say for want toe remote this John.

00:11:56.020 --> 00:12:03.900
So we know that it is 01234 and five against a names dark pop and then say five that is

00:12:03.900 --> 00:12:09.720
going to be removing John on It doesn't exist anymore in the list here the other two

00:12:09.720 --> 00:12:10.240
functions.

00:12:10.240 --> 00:12:10.880
As you can see,

00:12:10.880 --> 00:12:13.840
rewards and start are self explanatory.

00:12:13.840 --> 00:12:16.630
So this is names right now.

00:12:16.630 --> 00:12:17.690
If you say name,

00:12:17.690 --> 00:12:18.900
start reverse.

00:12:18.900 --> 00:12:23.450
It's gonna reverse the content off this particular names on board.

00:12:23.450 --> 00:12:26.450
The content gets changed within itself.

00:12:26.450 --> 00:12:28.950
So if you want to get original values again,

00:12:28.950 --> 00:12:34.250
you might have to say names dot reverse again to get the names back.

00:12:34.250 --> 00:12:38.530
And salt also does the similar jobs.

00:12:38.530 --> 00:12:41.830
So I can say your names don't start on.

00:12:41.830 --> 00:12:46.160
The data gets salted based on the alphabetical arrangement.

00:12:46.160 --> 00:12:48.760
So if I pressed enter now I see there is no return.

00:12:48.760 --> 00:12:51.650
Remember the names that have been changed internally?

00:12:51.650 --> 00:12:52.660
I thin names.

00:12:52.660 --> 00:12:55.410
Now you can see a no Jane Karishma Kushi,

00:12:55.410 --> 00:12:55.970
etcetera.

00:12:55.970 --> 00:12:58.290
Once you have sorted out,

00:12:58.290 --> 00:13:02.370
you will not be able to get the original values back many occasions.

00:13:02.370 --> 00:13:05.110
We don't want to start the original list,

00:13:05.110 --> 00:13:08.680
so if I bring this back again,

00:13:08.680 --> 00:13:10.600
I'll type your names equals two.

00:13:10.600 --> 00:13:14.690
And at this I have names in a random order.

00:13:14.690 --> 00:13:19.370
So if you don't want to start the content within the names themselves,

00:13:19.370 --> 00:13:20.670
but you want a copy of that,

00:13:20.670 --> 00:13:24.900
you can see it sauntered names and then press enter.

00:13:24.900 --> 00:13:26.040
This is going toe,

00:13:26.040 --> 00:13:27.470
give you a copy off that.

00:13:27.470 --> 00:13:29.150
So that's what is gonna be printed.

00:13:29.150 --> 00:13:31.440
You'll see that it's printing the started names,

00:13:31.440 --> 00:13:36.050
but the names themselves do not have the starting gun within itself.

00:13:36.050 --> 00:13:39.660
So these are the member functions in the list of class.

00:13:39.660 --> 00:13:45.010
In order to access the content off the collection one by one sequence early,

00:13:45.010 --> 00:13:47.170
you can always use a farm loop.

00:13:47.170 --> 00:13:50.590
Four loops are meant to be used with collections,

00:13:50.590 --> 00:13:54.410
so I can say here for some variable that I'm defining.

00:13:54.410 --> 00:13:59.200
Let's say yen in the names and then I can use a colon.

00:13:59.200 --> 00:13:59.690
And then,

00:13:59.690 --> 00:14:00.000
of course,

00:14:00.000 --> 00:14:01.010
if it's only one line,

00:14:01.010 --> 00:14:04.860
I can just print it out here itself that they print Ian.

00:14:04.860 --> 00:14:05.520
And then,

00:14:05.520 --> 00:14:05.820
of course,

00:14:05.820 --> 00:14:07.840
I have to press enter on,

00:14:07.840 --> 00:14:12.100
you'll see that I'm able to access each of the names from the list,

00:14:12.100 --> 00:14:16.230
at least also offer something called slice operator.

00:14:16.230 --> 00:14:18.210
So it's very powerful.

00:14:18.210 --> 00:14:19.770
Let's go and have a look at that.

00:14:19.770 --> 00:14:22.350
So here is my name's Andi.

00:14:22.350 --> 00:14:24.900
If I want to access the particular element,

00:14:24.900 --> 00:14:29.000
we know that we can say names off on given Index,

00:14:29.000 --> 00:14:31.950
which is from zero toe length minus one.

00:14:31.950 --> 00:14:32.590
And so,

00:14:32.590 --> 00:14:33.340
for example,

00:14:33.340 --> 00:14:34.650
names off four,

00:14:34.650 --> 00:14:36.780
which happens to be a big problem.

00:14:36.780 --> 00:14:39.140
So table.

00:14:39.140 --> 00:14:40.320
So I'm gonna go here,

00:14:40.320 --> 00:14:43.390
change this to a square record like this and press tender,

00:14:43.390 --> 00:14:45.060
and that's going to give me pretty,

00:14:45.060 --> 00:14:50.370
but I can supply here names on then in square bracket,

00:14:50.370 --> 00:14:53.640
I can give a starting and ending position,

00:14:53.640 --> 00:14:54.650
for example,

00:14:54.650 --> 00:14:58.190
I can say here to Colon and then say,

00:14:58.190 --> 00:15:00.300
Here I went upto Jane.

00:15:00.300 --> 00:15:02.760
So you have to give the index off Rahul,

00:15:02.760 --> 00:15:12.380
which happens to be 0123456 So I have to give six year so it includes the element at index

00:15:12.380 --> 00:15:12.840
to,

00:15:12.840 --> 00:15:15.950
but it excludes the element at Index six,

00:15:15.950 --> 00:15:18.460
but in between all the elements it would return.

00:15:18.460 --> 00:15:21.130
You can see that we got cushy Karishma,

00:15:21.130 --> 00:15:22.220
probably Jane,

00:15:22.220 --> 00:15:23.990
regarding elements.

00:15:23.990 --> 00:15:29.070
If you omit anyone off these two parameters but included colon there,

00:15:29.070 --> 00:15:31.280
so the behavior will be a little bit different.

00:15:31.280 --> 00:15:31.770
For example,

00:15:31.770 --> 00:15:37.820
let's say your names off four colon and then not give the upper limit.

00:15:37.820 --> 00:15:41.910
It will assume that you want from the fourth till the last one.

00:15:41.910 --> 00:15:43.420
So if a press enter here,

00:15:43.420 --> 00:15:44.530
you can see a problem.

00:15:44.530 --> 00:15:50.370
Jane Raul Kisho Because starting from the index for you're actually getting the values till

00:15:50.370 --> 00:15:50.950
the end.

00:15:50.950 --> 00:15:55.770
But as if I see your names off Colon five.

00:15:55.770 --> 00:15:58.610
I see that I missed the starting index.

00:15:58.610 --> 00:16:04.160
It will assume that the starting Index zero and it will go till the index four because it

00:16:04.160 --> 00:16:06.440
doesn't include the element that index five.

00:16:06.440 --> 00:16:12.980
So obviously we know unokichi Karishma deep our values that I'm supposed to get.

00:16:12.980 --> 00:16:19.430
The slates operator can also take a told element so we can type your names off.

00:16:19.430 --> 00:16:19.700
Let's say,

00:16:19.700 --> 00:16:20.440
for example,

00:16:20.440 --> 00:16:25.890
I want from the 1st 1 Do let their up to Jane,

00:16:25.890 --> 00:16:28.100
So the index of Jane is five.

00:16:28.100 --> 00:16:30.830
So I had to give six years of zero colon six,

00:16:30.830 --> 00:16:34.220
but I want the alternate name so I want we know Chris.

00:16:34.220 --> 00:16:35.120
She probably.

00:16:35.120 --> 00:16:36.460
So to do that,

00:16:36.460 --> 00:16:38.050
you can simply say you're too,

00:16:38.050 --> 00:16:39.800
which is called step value.

00:16:39.800 --> 00:16:43.260
That mean it's gonna skip this element and cause over here.

00:16:43.260 --> 00:16:45.470
But before the step value is one.

00:16:45.470 --> 00:16:50.780
So you can see that now we got we know who she and Philip so even had given one.

00:16:50.780 --> 00:16:54.260
Then there is no change because one is the deformed step.

00:16:54.260 --> 00:16:56.220
Like increments are skipped,

00:16:56.220 --> 00:16:57.340
the index by one.

00:16:57.340 --> 00:16:59.900
So that is going to give me all the values.

00:16:59.900 --> 00:17:00.720
However,

00:17:00.720 --> 00:17:04.550
I can also simply say here that I don't want to mention the upper limit.

00:17:04.550 --> 00:17:06.550
I don't want to mention that starting limit.

00:17:06.550 --> 00:17:12.260
So this is going to give you every on Internet names from the collection starting from the

00:17:12.260 --> 00:17:17.670
1st 1 But it goes till the end because I didn't mention the upper limit here.

00:17:17.670 --> 00:17:19.090
Oppressed ender.

00:17:19.090 --> 00:17:19.690
Off course.

00:17:19.690 --> 00:17:22.580
I should argue in here a to win stuff one.

00:17:22.580 --> 00:17:27.180
So let's go and make this a stew and press enter and you will see that every alternate name

00:17:27.180 --> 00:17:31.090
is given starting from the 1st 1 so you can give either three.

00:17:31.090 --> 00:17:31.750
Also here.

00:17:31.750 --> 00:17:33.860
That means that every two names air skipped,

00:17:33.860 --> 00:17:35.150
so I should get winnowed.

00:17:35.150 --> 00:17:36.680
Karishma Onda.

00:17:36.680 --> 00:17:37.320
Rachael.

00:17:37.320 --> 00:17:39.400
So that's what we're gonna get here.

00:17:39.400 --> 00:17:46.300
So this is what we have names right now and assume that we want toe Replace a particular

00:17:46.300 --> 00:17:50.590
name by another name so I can say your names off.

00:17:50.590 --> 00:17:52.720
The index of product is four.

00:17:52.720 --> 00:17:55.070
So I can see her equals two,

00:17:55.070 --> 00:17:56.010
for example.

00:17:56.010 --> 00:17:58.240
Broke it on a less tender.

00:17:58.240 --> 00:17:59.430
No vacancy.

00:17:59.430 --> 00:18:01.960
Body is replacement road.

00:18:01.960 --> 00:18:03.990
It has not been inserted.

00:18:03.990 --> 00:18:05.160
It's been overturned.

00:18:05.160 --> 00:18:06.640
Likewise,

00:18:06.640 --> 00:18:10.280
I can overrate a multiple values with a single value.

00:18:10.280 --> 00:18:14.170
If I want to remove religion and travel and in its place,

00:18:14.170 --> 00:18:15.360
I won't predict back.

00:18:15.360 --> 00:18:17.890
I can always say here names off,

00:18:17.890 --> 00:18:18.540
Andi,

00:18:18.540 --> 00:18:21.330
I can say four colon minus one,

00:18:21.330 --> 00:18:22.120
minus one.

00:18:22.120 --> 00:18:24.070
Because I know that this is the last one.

00:18:24.070 --> 00:18:25.450
I don't want to include that.

00:18:25.450 --> 00:18:26.180
I want him to it.

00:18:26.180 --> 00:18:27.020
Only these three.

00:18:27.020 --> 00:18:28.650
So this is what I'm gonna get now.

00:18:28.650 --> 00:18:33.500
But I can also say a sign here in new ab you on the new one.

00:18:33.500 --> 00:18:35.280
You should be a list.

00:18:35.280 --> 00:18:37.340
One of the new names that I want to give here.

00:18:37.340 --> 00:18:38.850
Let's put it back.

00:18:38.850 --> 00:18:39.830
Andi.

00:18:39.830 --> 00:18:41.900
So close the bracket.

00:18:41.900 --> 00:18:42.610
A nosy.

00:18:42.610 --> 00:18:46.890
This will be replacing value for thes three.

00:18:46.890 --> 00:18:53.350
Press enter and then I have your names and you can see now a road Jean Raul have been

00:18:53.350 --> 00:18:57.300
replaced with prevail here No one strange behavior.

00:18:57.300 --> 00:18:58.550
You may also see that,

00:18:58.550 --> 00:18:59.230
for example,

00:18:59.230 --> 00:19:01.850
if I want to replace these two names with,

00:19:01.850 --> 00:19:02.090
say,

00:19:02.090 --> 00:19:02.880
for example,

00:19:02.880 --> 00:19:09.680
the night at their names off four Colon and not mention the ending part,

00:19:09.680 --> 00:19:11.630
So that means these two should be included.

00:19:11.630 --> 00:19:13.150
Now it calls toe.

00:19:13.150 --> 00:19:14.450
If I simply type here,

00:19:14.450 --> 00:19:17.010
the world will be name and Chris entered.

00:19:17.010 --> 00:19:19.380
I remember I didn't use a bracket here.

00:19:19.380 --> 00:19:20.820
When I don't use a bracket,

00:19:20.820 --> 00:19:24.190
it's a string string is a collection off characters on.

00:19:24.190 --> 00:19:25.200
But this is the behavior.

00:19:25.200 --> 00:19:31.190
We will see that all the characters have been placed over here instead of Pradip and Keisha

00:19:31.190 --> 00:19:31.190
.

00:19:31.190 --> 00:19:37.400
So this is how lists can be used and different types of operatives on the list can be

00:19:37.400 --> 00:19:38.240
applied on

