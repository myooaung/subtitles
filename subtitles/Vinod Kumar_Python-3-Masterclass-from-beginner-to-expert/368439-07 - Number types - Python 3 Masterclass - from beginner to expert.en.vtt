WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.970
in this video,

00:00:00.970 --> 00:00:03.800
let's have a look at the new medical data types.

00:00:03.800 --> 00:00:07.850
Let's say I assign in one equals to 100.

00:00:07.850 --> 00:00:11.280
We know that anyone is an each,

00:00:11.280 --> 00:00:15.450
so you can take type and one and it is int.

00:00:15.450 --> 00:00:17.930
However it is not.

00:00:17.930 --> 00:00:20.430
The only new medical director is available.

00:00:20.430 --> 00:00:23.680
I can also take your in one equals 200.

00:00:23.680 --> 00:00:28.060
Don't the president of a Dark makes it afloat.

00:00:28.060 --> 00:00:29.790
If I said died in one,

00:00:29.790 --> 00:00:35.890
it is flute in the older Russian of fightin that has a fight on tour eggs.

00:00:35.890 --> 00:00:38.550
There was a dedicated called Long,

00:00:38.550 --> 00:00:44.880
which represented a bigger indigent value invite on three into Onda.

00:00:44.880 --> 00:00:47.610
Long are combined toe the same in today.

00:00:47.610 --> 00:00:48.000
Today,

00:00:48.000 --> 00:00:52.610
which means I can assign a huge value on Still,

00:00:52.610 --> 00:00:53.550
get away with that.

00:00:53.550 --> 00:00:55.020
For example.

00:00:55.020 --> 00:00:57.480
I'm giving a very big number over here,

00:00:57.480 --> 00:00:59.850
and that's still a value number,

00:00:59.850 --> 00:01:04.350
which means I can still work with this in arithmetic operations,

00:01:04.350 --> 00:01:05.620
for example,

00:01:05.620 --> 00:01:08.370
I can say anyone in tow 10.

00:01:08.370 --> 00:01:11.100
I'll get a bigger number.

00:01:11.100 --> 00:01:14.270
I can also type in one square,

00:01:14.270 --> 00:01:20.630
and that's a bigger number two on the limit off How big this number can go.

00:01:20.630 --> 00:01:24.730
You can only test by diving and one star star.

00:01:24.730 --> 00:01:28.290
Let's a 1234 And this is gonna be a very,

00:01:28.290 --> 00:01:31.060
very huge numbers over under that reduced misto.

00:01:31.060 --> 00:01:31.770
12.

00:01:31.770 --> 00:01:39.030
It is like this whole number raised to the power off 12 which itself happens to be a big

00:01:39.030 --> 00:01:39.610
number.

00:01:39.610 --> 00:01:42.980
I can go on and on and then check for a bigger number,

00:01:42.980 --> 00:01:44.650
and you can see that it still works.

00:01:44.650 --> 00:01:46.100
However,

00:01:46.100 --> 00:01:49.860
if you're working with a float data type like,

00:01:49.860 --> 00:01:50.600
for example,

00:01:50.600 --> 00:01:57.990
in one equals toe 12.34 this is automatically considered us float on against a T A R.

00:01:57.990 --> 00:02:01.590
Anyone has a different set off functionalities.

00:02:01.590 --> 00:02:07.550
Are attributes compared that off integers When you're working with numbers,

00:02:07.550 --> 00:02:09.060
especially in toujours,

00:02:09.060 --> 00:02:11.810
the division operator is little bacteria.

00:02:11.810 --> 00:02:12.530
For example,

00:02:12.530 --> 00:02:19.330
if I say no articles to 12 I can say anyone divide by 10 it says 1.2.

00:02:19.330 --> 00:02:23.630
But if I wanted only the individual part of this,

00:02:23.630 --> 00:02:24.050
such as,

00:02:24.050 --> 00:02:24.640
for example,

00:02:24.640 --> 00:02:26.260
the caution off division,

00:02:26.260 --> 00:02:28.600
not the actual floating point number,

00:02:28.600 --> 00:02:32.320
you may have to use double slash and then you get this one.

00:02:32.320 --> 00:02:33.440
For example,

00:02:33.440 --> 00:02:37.040
20 do by seven would show you something like this.

00:02:37.040 --> 00:02:41.140
What If I said 20 do by seven with a double slash,

00:02:41.140 --> 00:02:44.550
we will get t because that's the cautioned.

00:02:44.550 --> 00:02:52.550
You can also get the reminder so by using the percentage symbol which happens to be one.

00:02:52.550 --> 00:02:55.250
And as we have already seen,

00:02:55.250 --> 00:02:58.660
the double star represents power operator.

00:02:58.660 --> 00:02:59.480
For example,

00:02:59.480 --> 00:03:01.850
this is equal in tow for 10.

00:03:01.850 --> 00:03:04.730
I don't have to give space is over there.

00:03:04.730 --> 00:03:06.510
I can as well give like this.

00:03:06.510 --> 00:03:10.880
That's perfectly all right and we have the other common operators,

00:03:10.880 --> 00:03:17.370
like plus miners star slash for our subtract multiplication and division.

00:03:17.370 --> 00:03:22.540
One very important point you may have to keep in mind when you're working with the new

00:03:22.540 --> 00:03:29.950
miracles is that you cannot accept using the input something like Ender a number.

00:03:29.950 --> 00:03:34.420
The user may enter a number like toe to in this case,

00:03:34.420 --> 00:03:37.330
but if I say it died off anyone,

00:03:37.330 --> 00:03:44.670
it is nothing but str So if you're trying to say anyone plus say for example,

00:03:44.670 --> 00:03:51.680
of 100 assuming that it the result is supposed to be 322 you will be wrong and you can see

00:03:51.680 --> 00:03:58.600
that it gives me an editor saying that you can only Concorde innate str not int the world

00:03:58.600 --> 00:04:04.350
can coordinate correspond stove adding up off two strings like we know plus Kumar So which

00:04:04.350 --> 00:04:06.050
becomes we know command eventually,

00:04:06.050 --> 00:04:06.850
right?

00:04:06.850 --> 00:04:08.050
So in this case,

00:04:08.050 --> 00:04:17.070
this returns and str so and one is an str str plus can only be another str it cannot be an

00:04:17.070 --> 00:04:20.920
end but I wanted an end in the first place here.

00:04:20.920 --> 00:04:27.520
Now this cannot be done with the help off import But what we can do is we can convert the

00:04:27.520 --> 00:04:33.090
return value off the input function which happens to be an str into an end before story.

00:04:33.090 --> 00:04:38.720
And that is done by using the inter constructor so I can see her.

00:04:38.720 --> 00:04:42.960
Anyone equals toe end and then I can take your input,

00:04:42.960 --> 00:04:48.480
ender a number and close the bracket twice.

00:04:48.480 --> 00:04:54.610
So So first you will see that the input is being executed which is going toe present The

00:04:54.610 --> 00:04:58.600
message to the user Enter number The user will have to enter a number.

00:04:58.600 --> 00:05:02.040
The user is free to enter whatever here she wants toe enter.

00:05:02.040 --> 00:05:09.020
But let's assume that the user wants to endure a number and that number is a string our str

00:05:09.020 --> 00:05:12.930
that is past as an argument to the into constructor,

00:05:12.930 --> 00:05:16.280
meaning it is going to construct an object off into type.

00:05:16.280 --> 00:05:18.150
Hence the result.

00:05:18.150 --> 00:05:21.250
Whatever the big here is going to be an end.

00:05:21.250 --> 00:05:24.420
So now anyone plus 100 we'll have no problem.

00:05:24.420 --> 00:05:26.780
Because by the time we have a cento,

00:05:26.780 --> 00:05:29.250
anyone it has been converted into an end,

00:05:29.250 --> 00:05:33.250
so into plus end is absolutely no problem.

00:05:33.250 --> 00:05:37.980
So we may have to keep this in mind that every time we accept a numerical value,

00:05:37.980 --> 00:05:41.060
we better pass it on to the into constructor.

00:05:41.060 --> 00:05:43.940
And then we ascended to a variable.

00:05:43.940 --> 00:05:45.080
Ultimately,

00:05:45.080 --> 00:05:55.760
we can also accept first like this and then we can say anyone equals toe get off anyone

00:05:55.760 --> 00:06:00.040
because we know at this point in time enormous and astir,

00:06:00.040 --> 00:06:01.960
we convert that in the end,

00:06:01.960 --> 00:06:04.600
re as in the same thing back toe anyone.

00:06:04.600 --> 00:06:11.550
This is all possible because Piketon has a dynamic data types for variables

