WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.820
and set is a collection off unique values.

00:00:03.820 --> 00:00:04.640
So we thought,

00:00:04.640 --> 00:00:05.840
Any repetition?

00:00:05.840 --> 00:00:07.090
Andi,

00:00:07.090 --> 00:00:07.750
In this video,

00:00:07.750 --> 00:00:12.560
we're going to see how to you sex and what are the different operation that allowed within

00:00:12.560 --> 00:00:13.190
a set.

00:00:13.190 --> 00:00:15.070
So to create a set,

00:00:15.070 --> 00:00:17.310
you have to use curly bracket off course.

00:00:17.310 --> 00:00:22.420
If I type your that names equals to an empty curly bracket,

00:00:22.420 --> 00:00:25.230
this will no be considered as a picked,

00:00:25.230 --> 00:00:26.120
not a set,

00:00:26.120 --> 00:00:29.360
because they're only limited number of brackets in your keyboard.

00:00:29.360 --> 00:00:35.310
So the curly brackets are reserved for dicked by default addicted there Sharks Lampard

00:00:35.310 --> 00:00:35.990
Dictionary.

00:00:35.990 --> 00:00:38.870
But we will see that in the next video.

00:00:38.870 --> 00:00:43.660
But if a type your type names will see that it is dicked not upset,

00:00:43.660 --> 00:00:49.150
So one of the way you can do is you can see your names equals still set on now off course.

00:00:49.150 --> 00:00:50.560
If you see tape off names,

00:00:50.560 --> 00:00:51.190
it's a set.

00:00:51.190 --> 00:00:54.470
But if you have some initial values,

00:00:54.470 --> 00:00:56.280
you can always use the curly bracket.

00:00:56.280 --> 00:00:58.860
Then it is going to be considered as a set.

00:00:58.860 --> 00:00:59.810
For example,

00:00:59.810 --> 00:01:01.530
if it's a year in calibrated,

00:01:01.530 --> 00:01:03.640
if I say we note on,

00:01:03.640 --> 00:01:09.640
let's say a no on press enter now we're gonna say the type off names is a set,

00:01:09.640 --> 00:01:11.050
not a dict,

00:01:11.050 --> 00:01:15.110
So we will see dictionaries in details in the next video.

00:01:15.110 --> 00:01:16.550
But for this video,

00:01:16.550 --> 00:01:17.590
we're gonna look in tow,

00:01:17.590 --> 00:01:18.790
only the set.

00:01:18.790 --> 00:01:21.790
So if you type names and press enders,

00:01:21.790 --> 00:01:24.730
it's going to show you the values in college bracket.

00:01:24.730 --> 00:01:26.510
But unlike the list,

00:01:26.510 --> 00:01:29.730
if you try to access names off zero,

00:01:29.730 --> 00:01:32.800
you'll see that it gives me an error set.

00:01:32.800 --> 00:01:35.190
Object is not subscript herbal.

00:01:35.190 --> 00:01:38.220
That means you can access the elements using an index.

00:01:38.220 --> 00:01:45.300
Another strange behavior you may also see is if I have your names equals toe a bunch off

00:01:45.300 --> 00:01:46.590
more names here,

00:01:46.590 --> 00:01:49.250
let's start with the no no,

00:01:49.250 --> 00:01:51.050
that's a couple of more.

00:01:51.050 --> 00:01:59.490
That's John on Jean Andi.

00:01:59.490 --> 00:02:04.230
That's a Robert I see well here on,

00:02:04.230 --> 00:02:09.000
So I have multiple names over here.

00:02:09.000 --> 00:02:11.410
If I typed names and pressed enter,

00:02:11.410 --> 00:02:17.230
you can see straightaway that the order in which I entered the values is not the same as

00:02:17.230 --> 00:02:19.450
the order in which it has been store.

00:02:19.450 --> 00:02:20.430
Now,

00:02:20.430 --> 00:02:26.570
this is primarily because of some internal structure were in orderto ensure that there is

00:02:26.570 --> 00:02:27.500
no duplicates.

00:02:27.500 --> 00:02:29.990
It uses some concept of hashing,

00:02:29.990 --> 00:02:33.530
so let's not go too deep in the concepts of hashing.

00:02:33.530 --> 00:02:34.670
But again,

00:02:34.670 --> 00:02:39.790
you can see that the order in which we have added is not the same in which it has been

00:02:39.790 --> 00:02:40.350
store.

00:02:40.350 --> 00:02:41.750
So because of it,

00:02:41.750 --> 00:02:42.890
I cannot say Hey,

00:02:42.890 --> 00:02:47.000
I added the 1st 1 as we not give me the 1st 1 we would have got cushy.

00:02:47.000 --> 00:02:54.130
So this is why it says that the subscript on index is not meant for set over here.

00:02:54.130 --> 00:02:59.800
So the only way you can access these elements would be using a loop like a farm groups.

00:02:59.800 --> 00:03:06.980
I can see you're far yen in names on then probably you say you're crimped name or end.

00:03:06.980 --> 00:03:09.670
Now this is the way you can access a set.

00:03:09.670 --> 00:03:13.290
Unlike that do pull set is not immutable.

00:03:13.290 --> 00:03:14.920
You can add values.

00:03:14.920 --> 00:03:16.170
You may be able tow,

00:03:16.170 --> 00:03:18.250
believe the values and so on and so forth.

00:03:18.250 --> 00:03:19.030
For example,

00:03:19.030 --> 00:03:24.300
let me clear this and on tech names to see what is the accountant off this If I want toe,

00:03:24.300 --> 00:03:25.960
add more names to that.

00:03:25.960 --> 00:03:27.560
There is a function called ad.

00:03:27.560 --> 00:03:29.070
There are other functions also,

00:03:29.070 --> 00:03:29.920
let's have a quick look.

00:03:29.920 --> 00:03:36.140
Unwto the functions are the members off this particular names and said Dia set RTR names.

00:03:36.140 --> 00:03:39.890
You would see that there are many functions like this now.

00:03:39.890 --> 00:03:44.150
The our function is equal enough upend in case of the list.

00:03:44.150 --> 00:03:47.670
But upend gives a notion that you're adding to the end.

00:03:47.670 --> 00:03:50.920
Add does not guarantee that it will be added to the end.

00:03:50.920 --> 00:03:52.400
So if I take your name,

00:03:52.400 --> 00:03:56.090
start are and that's if Mark and press enter,

00:03:56.090 --> 00:03:59.350
no mark is added somewhere in between,

00:03:59.350 --> 00:04:00.460
not at the end.

00:04:00.460 --> 00:04:01.180
Similarly,

00:04:01.180 --> 00:04:05.320
you can use a clear function where you would lose out all these values and it becomes an

00:04:05.320 --> 00:04:06.350
empty set.

00:04:06.350 --> 00:04:09.350
Copy will give you a shallow copy off course.

00:04:09.350 --> 00:04:10.260
If you want toe,

00:04:10.260 --> 00:04:11.410
make some changes.

00:04:11.410 --> 00:04:12.120
Toe this,

00:04:12.120 --> 00:04:12.760
for example,

00:04:12.760 --> 00:04:14.630
with our earlier names.

00:04:14.630 --> 00:04:16.410
One equals two names.

00:04:16.410 --> 00:04:17.380
Start copy.

00:04:17.380 --> 00:04:20.490
Now you have to sex names and names one.

00:04:20.490 --> 00:04:25.840
But if I go and say names one dot let's for example,

00:04:25.840 --> 00:04:30.630
See roger and press enter names does not contain Roger,

00:04:30.630 --> 00:04:33.520
but names one contain Roger here now,

00:04:33.520 --> 00:04:35.640
so it's a shallow copy here.

00:04:35.640 --> 00:04:36.470
Similarly,

00:04:36.470 --> 00:04:40.650
you have a couple of other functions these we're gonna see in a couple of minutes.

00:04:40.650 --> 00:04:46.380
There is a part function similar to that of a list But if you go and take the help on name

00:04:46.380 --> 00:04:47.470
Start Bob,

00:04:47.470 --> 00:04:50.670
the pop function takes no argument.

00:04:50.670 --> 00:04:54.250
It is that remove underdone and arbitrary set element,

00:04:54.250 --> 00:04:57.880
so that means there is no guarantee off which element got remote,

00:04:57.880 --> 00:05:00.210
but it gives you the element that is being remotes.

00:05:00.210 --> 00:05:00.960
Obviously,

00:05:00.960 --> 00:05:06.390
you don't want to call this the daughter Dot indicates here that there is no arguments to

00:05:06.390 --> 00:05:07.030
be supplied.

00:05:07.030 --> 00:05:11.570
So if a type your names that these names exist names dark pop,

00:05:11.570 --> 00:05:14.860
we'll give you an arbitrary element again.

00:05:14.860 --> 00:05:17.740
You say names that pop another pop.

00:05:17.740 --> 00:05:22.700
But now you see that those names have been removed and you're left with the remaining names

00:05:22.700 --> 00:05:22.700
,

00:05:22.700 --> 00:05:27.590
which value being removed is totally controlled by the set itself.

00:05:27.590 --> 00:05:31.180
Now Internally Set maintains an array off values.

00:05:31.180 --> 00:05:32.930
Real cushy waas,

00:05:32.930 --> 00:05:38.950
the last 12 in the Array and Mark was the previous to last and Rohit Waas previous to mark

00:05:38.950 --> 00:05:38.950
.

00:05:38.950 --> 00:05:42.740
And that's how it got remote so we don't have much control on this,

00:05:42.740 --> 00:05:45.120
so I suggest not to use this at off,

00:05:45.120 --> 00:05:46.440
so let's go have a look.

00:05:46.440 --> 00:05:50.520
A couple of other functions or be area names are set,

00:05:50.520 --> 00:05:55.680
so remove is the one that you might want to use if you want to remove an element.

00:05:55.680 --> 00:05:56.340
For example,

00:05:56.340 --> 00:05:59.100
if you take the help on set daughter removed,

00:05:59.100 --> 00:06:00.430
just enter.

00:06:00.430 --> 00:06:02.740
You can see removing element from a set.

00:06:02.740 --> 00:06:04.640
It must be a member,

00:06:04.640 --> 00:06:08.230
so you should supply the value that you want to remove.

00:06:08.230 --> 00:06:08.950
The tape,

00:06:08.950 --> 00:06:10.930
your names that I want to remove.

00:06:10.930 --> 00:06:13.420
John I can say name start removed on.

00:06:13.420 --> 00:06:16.480
Then you supply John as the perimeter,

00:06:16.480 --> 00:06:18.370
and you can see it has been removed.

00:06:18.370 --> 00:06:19.440
If I say names,

00:06:19.440 --> 00:06:19.940
etc.

00:06:19.940 --> 00:06:23.410
That John doesn't exist in the collection now.

00:06:23.410 --> 00:06:24.390
No,

00:06:24.390 --> 00:06:32.080
the other functions difference Difference update in the section Intersection update is

00:06:32.080 --> 00:06:32.910
disjointed.

00:06:32.910 --> 00:06:35.210
A subset is a super set.

00:06:35.210 --> 00:06:37.050
Then you have few other functions,

00:06:37.050 --> 00:06:38.500
like Union Update.

00:06:38.500 --> 00:06:42.010
All these things are mathematical set operations,

00:06:42.010 --> 00:06:42.390
probably,

00:06:42.390 --> 00:06:45.670
but the set object here toe understand the same.

00:06:45.670 --> 00:06:47.990
Let's take two different sets.

00:06:47.990 --> 00:06:51.510
That's a anyone is a set off some numbers.

00:06:51.510 --> 00:06:57.670
Let's take 12345 and then I want to take and do equals toe.

00:06:57.670 --> 00:07:02.870
Let's take 4567 So there are two sex over here.

00:07:02.870 --> 00:07:04.680
The function difference,

00:07:04.680 --> 00:07:05.410
for example.

00:07:05.410 --> 00:07:12.970
I can say anyone difference off and to I will now give me an equal and off anyone miners

00:07:12.970 --> 00:07:13.330
enter.

00:07:13.330 --> 00:07:14.320
So basically,

00:07:14.320 --> 00:07:21.780
we say the elements in N one which are not there in he end to which happens to be 123 that

00:07:21.780 --> 00:07:24.750
this is what is going to be output similarly for,

00:07:24.750 --> 00:07:25.050
say,

00:07:25.050 --> 00:07:28.180
into dark difference off and one,

00:07:28.180 --> 00:07:30.070
you will see the same result.

00:07:30.070 --> 00:07:36.110
So this time we're gonna get the elements in n toe which do not exist in anyone now the

00:07:36.110 --> 00:07:36.610
same thing.

00:07:36.610 --> 00:07:41.970
You can also dough using a simple anyone minus in tow and you'll see that you get the same

00:07:41.970 --> 00:07:43.660
end toe minus anyone.

00:07:43.660 --> 00:07:45.750
Will uda previous result.

00:07:45.750 --> 00:07:50.450
So the difference is nothing but the minus operator in the secretary.

00:07:50.450 --> 00:07:51.490
Similarly,

00:07:51.490 --> 00:07:57.800
if you say anyone dot union off into this is going to give you the collection off all the

00:07:57.800 --> 00:08:00.870
values in anyone and in tow without repetition,

00:08:00.870 --> 00:08:07.200
you'll see that you get 1234567 And the same thing happens with entered art Union off

00:08:07.200 --> 00:08:07.950
anyone.

00:08:07.950 --> 00:08:09.390
This is same thing.

00:08:09.390 --> 00:08:11.350
You're gonna get the same result as well.

00:08:11.350 --> 00:08:14.790
Now you can do the same thing by typing end one pipe,

00:08:14.790 --> 00:08:19.500
and to this is to give the unions so and to pipe,

00:08:19.500 --> 00:08:21.710
and one give the same result as well.

00:08:21.710 --> 00:08:23.670
So instead of calling the function,

00:08:23.670 --> 00:08:25.770
you can use the operator over here.

00:08:25.770 --> 00:08:28.340
But if you want to give the intersection,

00:08:28.340 --> 00:08:33.150
that means what are the common elements between anyone and into So you can say in one in

00:08:33.150 --> 00:08:35.180
the section off and two,

00:08:35.180 --> 00:08:42.080
you'll see that you got 45 which is exactly same as into dot intersection off,

00:08:42.080 --> 00:08:42.730
and one,

00:08:42.730 --> 00:08:50.170
you can perform the intersection operation using an operator on so second end 1% and do,

00:08:50.170 --> 00:08:55.950
which is 45 and endo intersection and one which is the exact same thing.

00:08:55.950 --> 00:08:59.090
So your original values are still the same.

00:08:59.090 --> 00:09:01.250
There is no change in the original values,

00:09:01.250 --> 00:09:02.650
however,

00:09:02.650 --> 00:09:05.110
if you're doing a difference update.

00:09:05.110 --> 00:09:06.620
So if I take here,

00:09:06.620 --> 00:09:07.400
for example,

00:09:07.400 --> 00:09:12.080
anyone minus end to So this is the difference,

00:09:12.080 --> 00:09:12.800
actually.

00:09:12.800 --> 00:09:14.750
So if I say you're anyone,

00:09:14.750 --> 00:09:21.380
dart difference update and then say in two now what is going to do it?

00:09:21.380 --> 00:09:22.580
It's gonna find the end.

00:09:22.580 --> 00:09:24.350
One difference in tow,

00:09:24.350 --> 00:09:31.090
which is 123 and will be updated toe anyone So the right or the values of N one is this.

00:09:31.090 --> 00:09:32.500
But after this,

00:09:32.500 --> 00:09:35.960
the 123 becomes the new values off anyone.

00:09:35.960 --> 00:09:37.290
So if you take your anyone,

00:09:37.290 --> 00:09:40.420
you'll see that original values have been updated.

00:09:40.420 --> 00:09:44.250
So it has removed the duplicate values which existed him young one.

00:09:44.250 --> 00:09:48.330
The same thing would have been done using into but no.

00:09:48.330 --> 00:09:51.880
Since anyone is this and into his test,

00:09:51.880 --> 00:09:55.150
there is no duplicate values are there is no common values.

00:09:55.150 --> 00:09:57.010
That intersection will not be there.

00:09:57.010 --> 00:10:02.030
So the difference update off anyone or do they don't matter anymore?

00:10:02.030 --> 00:10:02.810
For example,

00:10:02.810 --> 00:10:05.830
if you do end one dark difference update and toe,

00:10:05.830 --> 00:10:08.830
there is no change and do the difference update and one,

00:10:08.830 --> 00:10:10.240
there will be no change.

00:10:10.240 --> 00:10:11.260
As of now,

00:10:11.260 --> 00:10:13.500
the same thing I've got done using,

00:10:13.500 --> 00:10:14.580
for example,

00:10:14.580 --> 00:10:16.140
minus equals two.

00:10:16.140 --> 00:10:16.720
Operator,

00:10:16.720 --> 00:10:20.800
let me reas Ain't this value toe end one toe check the same thing.

00:10:20.800 --> 00:10:26.230
So anyone is this and into is this 45 is the common factor.

00:10:26.230 --> 00:10:27.410
So I can honestly,

00:10:27.410 --> 00:10:33.070
anyone minus equals toe into and this is the same as difference update.

00:10:33.070 --> 00:10:38.260
It's going to say anyone minus end to and then realizing that toe anyone they can see

00:10:38.260 --> 00:10:44.710
anyone now contains only 123 the same thing is applicable for other operators.

00:10:44.710 --> 00:10:45.200
Also,

00:10:45.200 --> 00:10:45.940
for example,

00:10:45.940 --> 00:10:50.450
let me clear the screen here Andrea Zain n one With this weather.

00:10:50.450 --> 00:10:56.250
So we have anyone and into now it's something like if I want an intersection update,

00:10:56.250 --> 00:11:02.460
that means the common factor between anyone and in tow is 45 So I can always see here the

00:11:02.460 --> 00:11:08.300
end one person equals toe end to so what it does it is gonna find the intersection between

00:11:08.300 --> 00:11:12.960
animal and into which is four and five and will be really sent toe end one.

00:11:12.960 --> 00:11:18.540
So Prestes and anyone you'll see that the four fire has been a Cento yen one.

00:11:18.540 --> 00:11:21.940
That same thing also can happen for a union.

00:11:21.940 --> 00:11:23.690
So union update,

00:11:23.690 --> 00:11:29.820
for example Right now anyone is this And to is this I can also say anyone quite equals toe

00:11:29.820 --> 00:11:35.830
end to They should actually create a new set that contains both the values of animal and do

00:11:35.830 --> 00:11:41.900
without repetition which happens to be 4567 And that should be ascent to end one and you

00:11:41.900 --> 00:11:43.900
can see it has been updated or big.

00:11:43.900 --> 00:11:48.200
So one thing that set always ensures is that there is no duplicate.

00:11:48.200 --> 00:11:52.190
For example Let's go back to our names set here,

00:11:52.190 --> 00:11:53.600
which contains these values.

00:11:53.600 --> 00:11:55.150
If I say your name,

00:11:55.150 --> 00:12:00.450
start on and then die pure save you note on Duh Enter.

00:12:00.450 --> 00:12:03.200
You can see that Len off names,

00:12:03.200 --> 00:12:05.160
which is exactly six.

00:12:05.160 --> 00:12:05.750
Um,

00:12:05.750 --> 00:12:09.030
probably also the rest people 36 wells weapons.

00:12:09.030 --> 00:12:13.330
So even if you use a loop here for I in range off,

00:12:13.330 --> 00:12:13.640
say,

00:12:13.640 --> 00:12:18.860
zero toe 100 names dot ad and let's start to be not.

00:12:18.860 --> 00:12:20.350
And then that's ender.

00:12:20.350 --> 00:12:22.850
And if you take your land off names,

00:12:22.850 --> 00:12:24.720
you'll see that it still is six.

00:12:24.720 --> 00:12:25.490
However,

00:12:25.490 --> 00:12:27.880
if names were to be a list,

00:12:27.880 --> 00:12:28.710
for example,

00:12:28.710 --> 00:12:30.450
let me copy these names.

00:12:30.450 --> 00:12:37.000
Onda type your names equals Toe Square record and then enters our names in the list.

00:12:37.000 --> 00:12:37.450
Here.

00:12:37.450 --> 00:12:40.890
Names type of names is list,

00:12:40.890 --> 00:12:44.000
and if I use the same for look now here.

00:12:44.000 --> 00:12:46.050
But of course I don't have an ad function.

00:12:46.050 --> 00:12:49.310
It is supposed to be an append function press ender.

00:12:49.310 --> 00:12:56.160
You'll see that Len off names is not going to be 106 because I added 100 names to an

00:12:56.160 --> 00:13:02.510
existing six names such gonna be 106 so list will alone duplicate values,

00:13:02.510 --> 00:13:06.850
whereas a set ensures that there is no duplicate values at all.

