WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.090
in this video,

00:00:01.090 --> 00:00:05.200
Let's go and have a look at what's called Constructor to do that first,

00:00:05.200 --> 00:00:07.990
let's go and check what we have in person glance.

00:00:07.990 --> 00:00:09.170
So I'm gonna go type here.

00:00:09.170 --> 00:00:10.580
Dear your person.

00:00:10.580 --> 00:00:12.490
If you have a look at this,

00:00:12.490 --> 00:00:14.060
there are a lot of double underscore.

00:00:14.060 --> 00:00:14.960
Attribute.

00:00:14.960 --> 00:00:18.550
Our so called under methods are tender attributes.

00:00:18.550 --> 00:00:24.710
One off them you can see is called double underscore in it and double in school are tender

00:00:24.710 --> 00:00:29.150
in it that this is a very special function because this is the one that is actually

00:00:29.150 --> 00:00:32.950
executed whenever you cleared an object toe.

00:00:32.950 --> 00:00:34.160
Understand this clearly,

00:00:34.160 --> 00:00:40.190
let's really find our person plus in a little bit different way as a class person press

00:00:40.190 --> 00:00:41.920
enter to get into the class.

00:00:41.920 --> 00:00:47.300
Let's add some invitation and then write a function here called Double Underscore.

00:00:47.300 --> 00:00:48.960
In it double underscore.

00:00:48.960 --> 00:00:55.560
And if you simply write a bracket without any variables like this Onda,

00:00:55.560 --> 00:01:02.380
let's put some cream statement saying that person in Stan she hated and then come out off

00:01:02.380 --> 00:01:03.610
this class definition.

00:01:03.610 --> 00:01:07.650
If you type your B one equals toe person like this,

00:01:07.650 --> 00:01:09.350
you may run into a problem.

00:01:09.350 --> 00:01:12.400
It says that it takes zero positional arguments,

00:01:12.400 --> 00:01:19.310
but one Waas given what we did Waas by writing here a function Call it We're actually

00:01:19.310 --> 00:01:25.200
relating the image function which this person has by de force It is the default from gender

00:01:25.200 --> 00:01:30.930
person class has we are related in the earlier examples When I type B when he pulls to

00:01:30.930 --> 00:01:31.510
person,

00:01:31.510 --> 00:01:37.420
this is the one that was called so in the definition of that had one argument So we don't

00:01:37.420 --> 00:01:39.450
have any arguments or parameters here.

00:01:39.450 --> 00:01:43.800
So zero elevators on it is your You don't have any parameters,

00:01:43.800 --> 00:01:45.360
but you have supplied here one.

00:01:45.360 --> 00:01:46.920
The question is,

00:01:46.920 --> 00:01:49.130
where is that one object?

00:01:49.130 --> 00:01:50.880
We never past the perimeter,

00:01:50.880 --> 00:01:53.010
so we did not pass a perimeter over here.

00:01:53.010 --> 00:01:54.590
So first,

00:01:54.590 --> 00:01:59.910
the person class is stupid of the function and is being called only if there is successful

00:01:59.910 --> 00:01:59.910
,

00:01:59.910 --> 00:02:01.670
then something is ascent to p one.

00:02:01.670 --> 00:02:04.600
So let's not worry about people at this point in time.

00:02:04.600 --> 00:02:05.360
For example,

00:02:05.360 --> 00:02:07.730
if I simply type your person like this,

00:02:07.730 --> 00:02:08.080
still,

00:02:08.080 --> 00:02:12.930
I get the theme area because when I call a class like a function,

00:02:12.930 --> 00:02:18.350
fightin locates a memory required for an object and then it takes the reference of the

00:02:18.350 --> 00:02:22.170
object and passes to the village function automatically.

00:02:22.170 --> 00:02:24.070
So the in it is not called by me.

00:02:24.070 --> 00:02:29.070
I'm only treating a class as a function and I'm calling it right on a look.

00:02:29.070 --> 00:02:30.650
It's a memory for a new object.

00:02:30.650 --> 00:02:36.320
Gets their first of the newly created object and passes toe the indeed function implicitly

00:02:36.320 --> 00:02:36.320
.

00:02:36.320 --> 00:02:38.470
Hence we're getting another saying that Hey,

00:02:38.470 --> 00:02:39.950
there are zero position perimeter,

00:02:39.950 --> 00:02:41.800
so we define a position of perimeter,

00:02:41.800 --> 00:02:43.530
but bite on its tryingto pass.

00:02:43.530 --> 00:02:45.010
That shit is not called by me.

00:02:45.010 --> 00:02:48.080
This card by Peyton so by planets passing that argument.

00:02:48.080 --> 00:02:50.650
So if you want to know what exactly is there in that?

00:02:50.650 --> 00:02:57.600
Let's really for this class Corbett differently as a class person give a couple of space

00:02:57.600 --> 00:03:00.060
and said death Dunder innit,

00:03:00.060 --> 00:03:01.060
Dunder.

00:03:01.060 --> 00:03:02.950
But in the argument,

00:03:02.950 --> 00:03:05.020
I'm gonna destroy pure some variable.

00:03:05.020 --> 00:03:07.660
It doesn't matter what it is but general practices,

00:03:07.660 --> 00:03:07.970
right?

00:03:07.970 --> 00:03:14.140
Variable call self so that we know that this is a reference to the newly created object or

00:03:14.140 --> 00:03:14.850
itself.

00:03:14.850 --> 00:03:17.010
And then I come here food.

00:03:17.010 --> 00:03:23.100
Sell these and then I type yourself self will be an object off person.

00:03:23.100 --> 00:03:29.300
We can also try printing the I d off that so print I d off self piece,

00:03:29.300 --> 00:03:31.310
and then I'll type your idea off self.

00:03:31.310 --> 00:03:32.080
Let's go on,

00:03:32.080 --> 00:03:33.100
give it a try this time.

00:03:33.100 --> 00:03:38.930
So when I take your person not that I'm tryingto use the class slim as a function,

00:03:38.930 --> 00:03:41.020
and I'm calling it when I do that,

00:03:41.020 --> 00:03:43.310
like a mentioned earlier by the ah,

00:03:43.310 --> 00:03:43.510
look,

00:03:43.510 --> 00:03:44.920
it's a memory for an object.

00:03:44.920 --> 00:03:45.060
Or,

00:03:45.060 --> 00:03:45.350
rather,

00:03:45.350 --> 00:03:51.190
it creates a new object takes the reference off the object bosses as an argument over here

00:03:51.190 --> 00:03:51.190
.

00:03:51.190 --> 00:03:52.750
And then we're going to print.

00:03:52.750 --> 00:03:53.790
What is that argument,

00:03:53.790 --> 00:03:54.070
Olive.

00:03:54.070 --> 00:03:54.450
Good.

00:03:54.450 --> 00:03:56.170
So you'll see that now.

00:03:56.170 --> 00:04:03.800
It itself is an object off mean dark person at this particular address.

00:04:03.800 --> 00:04:08.960
So you're not very interested in There are just but it's a So I didn't says Idea of self is

00:04:08.960 --> 00:04:10.950
this particular reference number.

00:04:10.950 --> 00:04:11.720
And then,

00:04:11.720 --> 00:04:12.300
of course,

00:04:12.300 --> 00:04:15.620
the call itself returns the object.

00:04:15.620 --> 00:04:16.160
As you can see,

00:04:16.160 --> 00:04:18.390
that whatever the object we had,

00:04:18.390 --> 00:04:24.850
yourself has been returned when we called the person class as a function so which then can

00:04:24.850 --> 00:04:26.060
be assigned to say,

00:04:26.060 --> 00:04:26.700
for example,

00:04:26.700 --> 00:04:27.170
people.

00:04:27.170 --> 00:04:30.930
So if I type you're p one equals toe person,

00:04:30.930 --> 00:04:33.920
you see that we got these two lines.

00:04:33.920 --> 00:04:36.880
But since we're collecting the return value off this statement,

00:04:36.880 --> 00:04:39.680
it's gonna be assigned to be when I'm not being printed.

00:04:39.680 --> 00:04:47.120
But if you see what s P one p one is an object at the same address where you see your on

00:04:47.120 --> 00:04:47.830
idea off,

00:04:47.830 --> 00:04:52.270
The one is nothing but the I d would be received in the self here.

00:04:52.270 --> 00:04:56.380
So which means a self is automatically returned from this in it,

00:04:56.380 --> 00:05:01.460
which has also been given back to you at the end of this particular function.

00:05:01.460 --> 00:05:04.370
Like call When you define a constructor,

00:05:04.370 --> 00:05:07.950
you can also write your own additional perimeters.

00:05:07.950 --> 00:05:11.250
But those parameters you have to supply from here.

00:05:11.250 --> 00:05:15.800
So which means when you pass parameters to person constructor,

00:05:15.800 --> 00:05:21.010
call like this Here you're passing letter for example four parameters.

00:05:21.010 --> 00:05:25.850
Those parameters are collected by Piketon by then creates a new object.

00:05:25.850 --> 00:05:27.640
It now has the reference.

00:05:27.640 --> 00:05:29.620
And the four parliament is your supply.

00:05:29.620 --> 00:05:32.020
So pipe down will supply five parameters.

00:05:32.020 --> 00:05:36.970
Today's the 1st 1 being always the reference to the object itself.

00:05:36.970 --> 00:05:37.900
For example,

00:05:37.900 --> 00:05:40.210
let's clear the screen and try one more.

00:05:40.210 --> 00:05:41.060
I'm gonna say here,

00:05:41.060 --> 00:05:43.580
class person Andi,

00:05:43.580 --> 00:05:46.370
Then I hope you're a couple of space for indentation.

00:05:46.370 --> 00:05:47.100
Death,

00:05:47.100 --> 00:05:49.650
double underscore in its Dublin to score,

00:05:49.650 --> 00:05:52.880
I read a perimeter typically named itself Soto,

00:05:52.880 --> 00:05:53.180
a work,

00:05:53.180 --> 00:05:55.980
confusion and then additional parameters.

00:05:55.980 --> 00:05:56.570
For example,

00:05:56.570 --> 00:05:59.220
I can say name equals toe none.

00:05:59.220 --> 00:06:00.800
City equals two,

00:06:00.800 --> 00:06:01.600
for example,

00:06:01.600 --> 00:06:02.170
bangle.

00:06:02.170 --> 00:06:05.090
So I have declared here three variables.

00:06:05.090 --> 00:06:11.800
Self is always going to receive the reference of the newly created object name is having a

00:06:11.800 --> 00:06:12.850
default off None.

00:06:12.850 --> 00:06:15.080
That means it doesn't have to supply this name.

00:06:15.080 --> 00:06:17.460
And City also has a default of Bangla.

00:06:17.460 --> 00:06:20.300
So City also does not to be passed by the user.

00:06:20.300 --> 00:06:27.450
Let's really what is the value off each of those variables are type your print self equals

00:06:27.450 --> 00:06:29.720
toe self again.

00:06:29.720 --> 00:06:33.940
Another print statement to say name is nothing but name.

00:06:33.940 --> 00:06:37.950
Whatever that you there has supplied and then one last years,

00:06:37.950 --> 00:06:41.870
City is equals to city.

00:06:41.870 --> 00:06:45.820
Never say person just like that.

00:06:45.820 --> 00:06:50.920
You'll see that it is going toe print these three plus the return value from the person

00:06:50.920 --> 00:06:52.650
which that are friends of the object itself.

00:06:52.650 --> 00:06:54.710
So I did not supply anything,

00:06:54.710 --> 00:06:57.480
but I also can supply a perimeter like,

00:06:57.480 --> 00:06:58.210
for example,

00:06:58.210 --> 00:06:58.790
we not,

00:06:58.790 --> 00:07:00.570
and then when I pressed enter,

00:07:00.570 --> 00:07:03.730
you can see the name that I supplied here.

00:07:03.730 --> 00:07:09.540
The first perimeter is received into the second perimeter and in gratified supply two

00:07:09.540 --> 00:07:11.200
parameters that so for example,

00:07:11.200 --> 00:07:14.190
I can go on now.

00:07:14.190 --> 00:07:14.630
I pressed.

00:07:14.630 --> 00:07:15.060
Enter.

00:07:15.060 --> 00:07:19.760
You can see that the second perimeter is received in tow City,

00:07:19.760 --> 00:07:20.970
which is 1/3 perimeter.

00:07:20.970 --> 00:07:26.290
So whatever the number of parliament is your supply here Now there has to be one additional

00:07:26.290 --> 00:07:28.950
perimeter because it is not called by me,

00:07:28.950 --> 00:07:33.730
but in it is called by python and fight and always supplies reference off the newly

00:07:33.730 --> 00:07:36.030
constructed object as the first perimeter.

00:07:36.030 --> 00:07:40.010
Now let's explore What is the purpose off using this,

00:07:40.010 --> 00:07:40.760
innit?

00:07:40.760 --> 00:07:46.000
General practice is the constructor are the image function in python is used for

00:07:46.000 --> 00:07:49.250
initializing the member variables often object.

00:07:49.250 --> 00:07:50.260
For example,

00:07:50.260 --> 00:07:55.730
if I have people and Pito as toe objects off person while people got created,

00:07:55.730 --> 00:07:58.800
we could have initially somebody is that it's part of people.

00:07:58.800 --> 00:08:00.230
On Gwen,

00:08:00.230 --> 00:08:01.430
we created Pito.

00:08:01.430 --> 00:08:06.570
We put past some initialization or initial values off B two to understand the same.

00:08:06.570 --> 00:08:07.900
Let's take another example.

00:08:07.900 --> 00:08:09.970
Let's really find that class person.

00:08:09.970 --> 00:08:14.250
We're gonna write a function which is called in it,

00:08:14.250 --> 00:08:17.560
and that takes itself as a perimeter.

00:08:17.560 --> 00:08:24.750
Let's create name equals toe None on city equals toe Let him none as to perimeters.

00:08:24.750 --> 00:08:29.300
But in case if the user supplies those two parameters,

00:08:29.300 --> 00:08:30.890
we don't want to just print them.

00:08:30.890 --> 00:08:36.010
But instead we want toe preserve them in the memory and notice self.

00:08:36.010 --> 00:08:39.390
Here is a reference of the newly constructed object.

00:08:39.390 --> 00:08:42.670
So in the memory of this place and this self refers to that,

00:08:42.670 --> 00:08:46.520
we can store these two variables inside that.

00:08:46.520 --> 00:08:52.340
And the way you do is simply that self dart and then give what of the attributes you want.

00:08:52.340 --> 00:08:53.090
Now,

00:08:53.090 --> 00:08:53.700
for example,

00:08:53.700 --> 00:09:01.540
I can say name equals toe name meaning we're clearing a new property or attribute inside

00:09:01.540 --> 00:09:03.420
this object corny.

00:09:03.420 --> 00:09:08.170
And we're assigning the perimeter that is received over here to that.

00:09:08.170 --> 00:09:12.050
So the right hand side here is the local variable of the perimeter.

00:09:12.050 --> 00:09:17.660
The left hand side is a new property called name in the variable called Self.

00:09:17.660 --> 00:09:18.350
If you wanted,

00:09:18.350 --> 00:09:19.640
you could give different names.

00:09:19.640 --> 00:09:20.920
We will see them later.

00:09:20.920 --> 00:09:25.470
This is how you create new member variables in the person object.

00:09:25.470 --> 00:09:26.830
So I'm gonna die pr again.

00:09:26.830 --> 00:09:32.930
Self dot City equals two city and then I can come off this knife type.

00:09:32.930 --> 00:09:35.590
You're P one equals toe person.

00:09:35.590 --> 00:09:39.710
You'll see that everyone has a couple of other variables.

00:09:39.710 --> 00:09:42.110
Apart from the default under attribute,

00:09:42.110 --> 00:09:45.580
you also have city and name for P one.

00:09:45.580 --> 00:09:49.960
Now we can also see what it's p one dot named by typing t one dark need.

00:09:49.960 --> 00:09:55.890
It's giving none because we did not supply anything here so automatically bothered them toe

00:09:55.890 --> 00:09:57.500
none as the default value.

00:09:57.500 --> 00:09:58.980
But if I wanted,

00:09:58.980 --> 00:09:59.700
Iger said,

00:09:59.700 --> 00:10:01.850
even equals toe person off,

00:10:01.850 --> 00:10:02.160
say,

00:10:02.160 --> 00:10:03.030
for example,

00:10:03.030 --> 00:10:05.970
we know bangle on now.

00:10:05.970 --> 00:10:11.370
If it that people don't need it is we know the one that city equals toe spangler.

00:10:11.370 --> 00:10:13.690
You can also reassigned people,

00:10:13.690 --> 00:10:15.230
not name equals two,

00:10:15.230 --> 00:10:16.030
for example.

00:10:16.030 --> 00:10:17.190
Come on on then.

00:10:17.190 --> 00:10:17.530
Of course,

00:10:17.530 --> 00:10:19.320
if you say what it's people not need,

00:10:19.320 --> 00:10:23.110
you see that the name we know is lost and you have here.

00:10:23.110 --> 00:10:23.600
Come on.

00:10:23.600 --> 00:10:24.950
Generally,

00:10:24.950 --> 00:10:27.070
we don't want to do this kind of directors.

00:10:27.070 --> 00:10:31.820
Inmates toe member variables on this concept is called encapsulation.

00:10:31.820 --> 00:10:37.940
We want toe shell the member variables by not allowing the user to modify the same thing.

00:10:37.940 --> 00:10:39.660
Now invite on.

00:10:39.660 --> 00:10:41.680
You don't have any keywords card,

00:10:41.680 --> 00:10:46.420
private or protected or public like in other languages.

00:10:46.420 --> 00:10:47.220
for example,

00:10:47.220 --> 00:10:49.380
in Java and C Plus plus C shop,

00:10:49.380 --> 00:10:52.890
you have a key work or play it public protected,

00:10:52.890 --> 00:10:53.570
etcetera.

00:10:53.570 --> 00:10:55.780
For the sake of encapsulation,

00:10:55.780 --> 00:10:57.720
we don't have any off doors.

00:10:57.720 --> 00:11:00.940
Not this is really a convention off underscores.

00:11:00.940 --> 00:11:01.810
Come into picture,

00:11:01.810 --> 00:11:05.670
you could probably rename this angel off name.

00:11:05.670 --> 00:11:07.410
You could give Underscore name.

00:11:07.410 --> 00:11:09.650
It's equal int of what's going protected.

00:11:09.650 --> 00:11:11.810
We will discuss that when we go to inheritance,

00:11:11.810 --> 00:11:16.670
but you can also give a double underscore name to make sure that it's a private member

00:11:16.670 --> 00:11:17.230
variable,

00:11:17.230 --> 00:11:21.150
which means you will not be ableto access them or make changes.

00:11:21.150 --> 00:11:24.700
Let's give it a try on Redefined the class person.

00:11:24.700 --> 00:11:28.550
We'll have a death in it.

00:11:28.550 --> 00:11:34.330
We take self name equals toe None on city equals to none.

00:11:34.330 --> 00:11:35.740
But this time,

00:11:35.740 --> 00:11:36.770
while storing,

00:11:36.770 --> 00:11:39.760
we're gonna say self dot underscore,

00:11:39.760 --> 00:11:42.480
underscore name equals to name.

00:11:42.480 --> 00:11:46.550
So this is a new attribute on creating or adding to the object,

00:11:46.550 --> 00:11:48.800
but its value come from this perimeter.

00:11:48.800 --> 00:11:50.210
Whatever is supplied by the user,

00:11:50.210 --> 00:11:56.300
then I'm gonna give your self dark double underscore city equals toe city.

00:11:56.300 --> 00:11:59.680
I have type your de ir off person.

00:11:59.680 --> 00:12:05.280
You'll see that double underscore name and double monstrosity may not be available here,

00:12:05.280 --> 00:12:09.540
but if I type your B one equals two person and then I die pure,

00:12:09.540 --> 00:12:14.050
we know on Bangla Ender.

00:12:14.050 --> 00:12:18.390
If I d area off the one the person class themselves torn.

00:12:18.390 --> 00:12:19.210
How those variables.

00:12:19.210 --> 00:12:21.390
But the P one will have those two variables,

00:12:21.390 --> 00:12:24.490
but you can see that it is not over here,

00:12:24.490 --> 00:12:28.860
but it's been given some other prefix underscore person underscore.

00:12:28.860 --> 00:12:29.920
Underscore City.

00:12:29.920 --> 00:12:31.000
So obviously,

00:12:31.000 --> 00:12:31.910
if I type here,

00:12:31.910 --> 00:12:35.340
what is the people dot underscoring the score need?

00:12:35.340 --> 00:12:36.750
It would simply say,

00:12:36.750 --> 00:12:37.880
What's an object?

00:12:37.880 --> 00:12:40.650
Doesn't have an attribute called Underscore Underscore name.

00:12:40.650 --> 00:12:45.470
We do have but were not able to access that it got stored.

00:12:45.470 --> 00:12:45.820
Also,

00:12:45.820 --> 00:12:47.630
when we created the object here,

00:12:47.630 --> 00:12:48.950
p one equals two person.

00:12:48.950 --> 00:12:51.660
It got created but were not able to see them.

00:12:51.660 --> 00:12:54.420
So the only way you can see them is now.

00:12:54.420 --> 00:12:57.080
By adding additional functions.

00:12:57.080 --> 00:12:58.110
For example,

00:12:58.110 --> 00:13:01.190
let's really find this toe access the details of the same.

00:13:01.190 --> 00:13:10.920
So I'm gonna take your class person alongside the lottery.

00:13:10.920 --> 00:13:13.820
One more function this time called Anything you want.

00:13:13.820 --> 00:13:20.620
We'll call it a sprint underscored beatings where we have to right itself will come to this

00:13:20.620 --> 00:13:21.620
in a minute on.

00:13:21.620 --> 00:13:28.080
Then we can not go on type your print name equals toe and then probably recondite name,

00:13:28.080 --> 00:13:35.300
which is nothing but self dot Dublin this corny and then as a print city.

00:13:35.300 --> 00:13:40.420
Closed toe self dot Double underscore city and I come out off this.

00:13:40.420 --> 00:13:47.040
Let's see your p one equals toe person by supplying a couple of details like we know on

00:13:47.040 --> 00:13:47.580
bangle.

00:13:47.580 --> 00:13:50.620
And then I type your be one.

00:13:50.620 --> 00:13:57.090
You simply said it's an object d a r off the one you can see that it doesn't have the name

00:13:57.090 --> 00:13:59.840
and city with double underscores anywhere.

00:13:59.840 --> 00:14:04.350
But if a type your B one dot print underscore details,

00:14:04.350 --> 00:14:08.690
you'll see that it shows that name is we know City is Bangla.

00:14:08.690 --> 00:14:13.300
Even if I do b one dot double underscore name equals Toe command,

00:14:13.300 --> 00:14:14.180
for example.

00:14:14.180 --> 00:14:17.500
What it does it it's gonna add a new member called us.

00:14:17.500 --> 00:14:18.750
Double underscore need.

00:14:18.750 --> 00:14:22.060
So if I go here and type D I R P one,

00:14:22.060 --> 00:14:27.030
you will see that there is going to be a new member valuable called double underscore name

00:14:27.030 --> 00:14:27.030
.

00:14:27.030 --> 00:14:32.430
But that doesn't conflict with the internal variable underscore person underscore,

00:14:32.430 --> 00:14:38.120
Underscore name So when you call the print details function here self.

00:14:38.120 --> 00:14:43.450
Their double in this code name always would refer to this not tow this newly constructed

00:14:43.450 --> 00:14:43.770
one.

00:14:43.770 --> 00:14:48.360
So if I type p one dot double underscore knee and I want to know what is that,

00:14:48.360 --> 00:14:49.000
it's still says,

00:14:49.000 --> 00:14:49.470
Come on.

00:14:49.470 --> 00:14:53.080
So if I tried calling people about bringing the details,

00:14:53.080 --> 00:14:55.470
you'll still see that name Nichols.

00:14:55.470 --> 00:14:57.840
Do we know city equals toe bangle?

00:14:57.840 --> 00:15:03.360
Which means you will not be able to access that double underscore name directly.

00:15:03.360 --> 00:15:03.940
Of course,

00:15:03.940 --> 00:15:04.940
if I would still want,

00:15:04.940 --> 00:15:09.690
I can say people dot underscore foursome underscoring the score name equals two.

00:15:09.690 --> 00:15:10.550
For example,

00:15:10.550 --> 00:15:13.980
say a sham and press Enter knife ASAP.

00:15:13.980 --> 00:15:16.290
One dot print underscored details.

00:15:16.290 --> 00:15:18.620
They're the type of year.

00:15:18.620 --> 00:15:22.750
So I think people dot print underscore Beaton's.

00:15:22.750 --> 00:15:26.600
You'll see that the name has been changed.

00:15:26.600 --> 00:15:31.370
So while there is no concept off private public protected in Brighton,

00:15:31.370 --> 00:15:37.190
you could still hide the visibility off certain member variables by for fixing The member

00:15:37.190 --> 00:15:40.160
variables are member functions using double underscore,

00:15:40.160 --> 00:15:45.590
but it is still not completely hidden because I can always go and make the changes over

00:15:45.590 --> 00:15:45.980
here.

00:15:45.980 --> 00:15:52.260
So the fight on philosophy is developers are more mature and say that if there is not meant

00:15:52.260 --> 00:15:53.590
for public access,

00:15:53.590 --> 00:15:55.330
developers won't access.

00:15:55.330 --> 00:15:56.270
For example,

00:15:56.270 --> 00:16:01.640
the purpose of having double underscore name as a member reliable is to say that this is

00:16:01.640 --> 00:16:05.010
meant for an internal use and not for public toe access.

00:16:05.010 --> 00:16:08.300
Eso we shouldn't be accessing that as simple as that.

00:16:08.300 --> 00:16:11.950
So we don't have to restrict the developers not to access that.

00:16:11.950 --> 00:16:14.010
Developers themselves feel that okay.

00:16:14.010 --> 00:16:16.400
Member variables which are private,

00:16:16.400 --> 00:16:21.770
all of which are perfectly underscore underscore are not supposed to be used in their court

00:16:21.770 --> 00:16:24.700
on this is purely for internal purposes.

00:16:24.700 --> 00:16:30.050
So there's the philosophy behind why there is no private public are protected in Petah.

00:16:30.050 --> 00:16:31.240
In the next video,

00:16:31.240 --> 00:16:34.490
we will discuss more about the member functions that we saw here,

00:16:34.490 --> 00:16:35.950
like print DJs.

