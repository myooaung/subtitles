WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.300
invite on it is possible to define functions with variable number of arguments.

00:00:05.300 --> 00:00:10.330
So there are three forms and all of them can be independent off each other or you can use

00:00:10.330 --> 00:00:11.340
them together as well.

00:00:11.340 --> 00:00:16.310
So the number one type of argument is called default arguments.

00:00:16.310 --> 00:00:17.970
Then there is something called orbit.

00:00:17.970 --> 00:00:18.780
Three arguments,

00:00:18.780 --> 00:00:19.390
Andi.

00:00:19.390 --> 00:00:21.150
Then keyword arguments.

00:00:21.150 --> 00:00:26.810
Let's take examples off each one off them with some script.

00:00:26.810 --> 00:00:33.210
So this time I have opened my text editor here So which contains the previously accorded by

00:00:33.210 --> 00:00:33.970
Dan script.

00:00:33.970 --> 00:00:37.960
I'm gonna create a new one called E X 15 Doctor,

00:00:37.960 --> 00:00:44.200
The way here I conveyed different functions which take different types of arguments.

00:00:44.200 --> 00:00:45.250
First,

00:00:45.250 --> 00:00:52.160
let's start with a simple function called hello which takes a couple off perimeters at the

00:00:52.160 --> 00:00:55.900
name on then city as to perimeters.

00:00:55.900 --> 00:00:59.470
And it is supposed to print Hello name?

00:00:59.470 --> 00:01:01.150
How is the weather in your city?

00:01:01.150 --> 00:01:05.060
So I'm gonna dip your print on see?

00:01:05.060 --> 00:01:15.940
Hello person Preach test home is whether in percentage s on the 1st 1 is name on 2nd 1 East

00:01:15.940 --> 00:01:16.500
city.

00:01:16.500 --> 00:01:21.740
So it's going to say whatever the name entered by the user here will be printed here and

00:01:21.740 --> 00:01:24.510
then Whatever the city supplied is going to be printed over here.

00:01:24.510 --> 00:01:28.050
Let's put a question mark because we're asking a question.

00:01:28.050 --> 00:01:30.130
So do call this.

00:01:30.130 --> 00:01:32.040
I'm gonna use a main function.

00:01:32.040 --> 00:01:34.220
I'll call it us Death Main.

00:01:34.220 --> 00:01:42.090
We simply cause hello Onda supplies and stuff like my name and then my city on.

00:01:42.090 --> 00:01:44.550
Then in order to call the main al type,

00:01:44.550 --> 00:01:52.970
your gift under name equals toe under mean if that is the name off your module.

00:01:52.970 --> 00:01:55.210
So we're gonna call the main function,

00:01:55.210 --> 00:01:57.410
so I'll save this.

00:01:57.410 --> 00:02:03.390
Go back to a command prompt on I opened a command prompt or terminal where I'm already in

00:02:03.390 --> 00:02:04.390
my work folder.

00:02:04.390 --> 00:02:07.570
I can simply type here part on three years.

00:02:07.570 --> 00:02:08.540
15 people.

00:02:08.540 --> 00:02:09.810
I I press ender.

00:02:09.810 --> 00:02:10.740
It is Hello.

00:02:10.740 --> 00:02:17.330
You know how it's whether in Spangler suppose if I go here and comment this line and then

00:02:17.330 --> 00:02:20.120
simply type hello on say,

00:02:20.120 --> 00:02:22.980
we know if I run this court right now,

00:02:22.980 --> 00:02:30.120
you will get an error because the hollow function expects to arguments and it's missing a

00:02:30.120 --> 00:02:31.790
value for city.

00:02:31.790 --> 00:02:34.620
So we are defining two variables,

00:02:34.620 --> 00:02:36.860
but we're supplying only one value here.

00:02:36.860 --> 00:02:37.220
Now,

00:02:37.220 --> 00:02:38.070
this is an error,

00:02:38.070 --> 00:02:43.900
but what you can do is you can say that if the city is not being supplied when it is called

00:02:43.900 --> 00:02:43.900
,

00:02:43.900 --> 00:02:46.680
we can take it us a default value safe,

00:02:46.680 --> 00:02:47.710
for example,

00:02:47.710 --> 00:02:49.580
your city.

00:02:49.580 --> 00:02:52.790
So now I have given a default value.

00:02:52.790 --> 00:02:54.290
Here it is.

00:02:54.290 --> 00:02:54.910
Okay,

00:02:54.910 --> 00:02:56.200
if the user doesn't parse,

00:02:56.200 --> 00:03:02.280
so let me uncommon the 1st 1 They can see that I can pass it with two wearables Are reckon

00:03:02.280 --> 00:03:02.830
possible?

00:03:02.830 --> 00:03:06.690
A single value here so I can go back and try this.

00:03:06.690 --> 00:03:12.510
Now let me clear the screen and then used fight on three x 15 people I I pressed enter and

00:03:12.510 --> 00:03:15.200
you can see both of them are being output.

00:03:15.200 --> 00:03:18.900
So hello we don't have is whether they're that type of here,

00:03:18.900 --> 00:03:20.680
So it's gonna fix that.

00:03:20.680 --> 00:03:24.960
So now both of these are supposed to be executed,

00:03:24.960 --> 00:03:25.650
so I'm gonna,

00:03:25.650 --> 00:03:26.040
you know,

00:03:26.040 --> 00:03:30.010
go back on type here quite on three years.

00:03:30.010 --> 00:03:31.280
15 the people.

00:03:31.280 --> 00:03:32.670
And if you see here,

00:03:32.670 --> 00:03:33.480
it is hollow.

00:03:33.480 --> 00:03:35.840
We know how is with in Bangor for the first time.

00:03:35.840 --> 00:03:36.560
Then it says,

00:03:36.560 --> 00:03:36.820
Hello.

00:03:36.820 --> 00:03:37.540
Peanut harvests,

00:03:37.540 --> 00:03:38.950
whether in your city.

00:03:38.950 --> 00:03:41.480
So it's taking this as the default value.

00:03:41.480 --> 00:03:45.710
So I can also supply here a D for value.

00:03:45.710 --> 00:03:45.940
Say,

00:03:45.940 --> 00:03:46.710
for example,

00:03:46.710 --> 00:03:48.370
say friend Andi.

00:03:48.370 --> 00:03:51.810
Now I can even say here Hello without passing a perimeter.

00:03:51.810 --> 00:03:53.380
So if I go back to the command,

00:03:53.380 --> 00:03:55.560
prompt and run the same thing you'll see now.

00:03:55.560 --> 00:03:56.090
Hello,

00:03:56.090 --> 00:03:56.550
friend.

00:03:56.550 --> 00:03:58.540
How is whether in your city?

00:03:58.540 --> 00:04:04.000
So this is called deformed perimeter were if it under the default perimeter you don't have

00:04:04.000 --> 00:04:09.750
to supply are you can overrate that by supplying explicit values.

00:04:09.750 --> 00:04:16.110
The second type of arguments to a function is called arbitrary arguments on that.

00:04:16.110 --> 00:04:20.060
This is when if I don't know how many parameters I can supply,

00:04:20.060 --> 00:04:22.550
I can declare an arbitrage argument.

00:04:22.550 --> 00:04:25.870
Let's define a function called average,

00:04:25.870 --> 00:04:29.020
which is supposed to take a bunch off numbers on.

00:04:29.020 --> 00:04:32.850
Then I should be able tow calculate the average of all those numbers.

00:04:32.850 --> 00:04:34.000
So for the timing,

00:04:34.000 --> 00:04:37.290
I'm going to say pass because I will implement a logic in a minute.

00:04:37.290 --> 00:04:41.070
But I should be able to supply multiple arguments.

00:04:41.070 --> 00:04:49.580
So let me commend or these things on then say here every GE equals toe average off 2030 12

00:04:49.580 --> 00:04:50.640
45.

00:04:50.640 --> 00:04:55.830
In order to find the average off this I supplied four on.

00:04:55.830 --> 00:05:00.100
Then let me print that So print every G equals two.

00:05:00.100 --> 00:05:01.620
Plus I can't do it.

00:05:01.620 --> 00:05:08.600
So I have to say here percent age D or percentage f and then it's the percentage reached,

00:05:08.600 --> 00:05:10.150
some printing the average.

00:05:10.150 --> 00:05:16.450
Now let's say I want to supply more values this time by giving two more riders.

00:05:16.450 --> 00:05:17.290
Now,

00:05:17.290 --> 00:05:18.650
this is possible.

00:05:18.650 --> 00:05:21.680
If you define here an arbitrary argument,

00:05:21.680 --> 00:05:23.230
something like a list.

00:05:23.230 --> 00:05:24.780
So to do that,

00:05:24.780 --> 00:05:26.860
you just have to declare one variable,

00:05:26.860 --> 00:05:27.750
not multiple,

00:05:27.750 --> 00:05:29.190
because particular multiple,

00:05:29.190 --> 00:05:31.160
then harmony.

00:05:31.160 --> 00:05:31.910
You'll dickler,

00:05:31.910 --> 00:05:32.410
for example.

00:05:32.410 --> 00:05:32.790
For this,

00:05:32.790 --> 00:05:34.350
you might articulate four variables.

00:05:34.350 --> 00:05:36.750
For this you might have to kill six variables.

00:05:36.750 --> 00:05:38.850
Or what if I supply 100 numbers?

00:05:38.850 --> 00:05:43.040
So obviously you can't declare your 100 variables are 100 soft variables.

00:05:43.040 --> 00:05:46.780
So this is where we simply say your star arcs.

00:05:46.780 --> 00:05:48.680
You can use any name you want here,

00:05:48.680 --> 00:05:51.380
but gentle practices views star arks.

00:05:51.380 --> 00:05:53.000
Now that we got start arcs,

00:05:53.000 --> 00:05:54.190
there is no problem.

00:05:54.190 --> 00:05:56.200
But I'm not returning any value from here,

00:05:56.200 --> 00:05:58.450
So hence I will not be getting the average.

00:05:58.450 --> 00:06:02.570
But all these things will now be received as it do people here.

00:06:02.570 --> 00:06:05.840
So if I come down here and print the data type of alls,

00:06:05.840 --> 00:06:10.000
say print type off parts is on,

00:06:10.000 --> 00:06:12.840
then I'll type here live arts,

00:06:12.840 --> 00:06:15.430
so you should actually see that it's a to put.

00:06:15.430 --> 00:06:17.080
So let's go and try this once.

00:06:17.080 --> 00:06:19.140
Fight on three x 15 people.

00:06:19.140 --> 00:06:25.670
So the error is because I'm tryingto print using percentage f and EVD is not returning

00:06:25.670 --> 00:06:26.110
anything.

00:06:26.110 --> 00:06:27.140
It's it's returning.

00:06:27.140 --> 00:06:27.420
None,

00:06:27.420 --> 00:06:31.700
actually speaking seven of coming this one on this one temporarily,

00:06:31.700 --> 00:06:33.520
I come back and then tried again.

00:06:33.520 --> 00:06:36.430
You can see that the arts here is a to pull.

00:06:36.430 --> 00:06:38.930
So we got a pupil here on day.

00:06:38.930 --> 00:06:42.020
Now I have to calculate the average and then return.

00:06:42.020 --> 00:06:43.740
So I'm gonna come in this line,

00:06:43.740 --> 00:06:45.150
remove response.

00:06:45.150 --> 00:06:48.510
I have to calculate the average to counter the average.

00:06:48.510 --> 00:06:51.050
I will stick some on the count.

00:06:51.050 --> 00:06:53.190
So first thing I want to do is tow.

00:06:53.190 --> 00:06:56.900
Get only the numerical value from this particular collection.

00:06:56.900 --> 00:06:57.950
For example,

00:06:57.950 --> 00:07:00.840
if I type your ASD in a string,

00:07:00.840 --> 00:07:04.620
maybe I have returned your phones to say some bullion.

00:07:04.620 --> 00:07:10.650
So I want to take only the numerical values from here and then calculate the average.

00:07:10.650 --> 00:07:11.850
So to do that,

00:07:11.850 --> 00:07:15.460
we have seen what's going list comprehension in the previous lesson.

00:07:15.460 --> 00:07:16.930
So we can you the same thing.

00:07:16.930 --> 00:07:19.360
So I will take your number equals two.

00:07:19.360 --> 00:07:22.200
Art is a tupelo,

00:07:22.200 --> 00:07:23.380
so I can see here,

00:07:23.380 --> 00:07:27.850
Give me a list off again for n in arms.

00:07:27.850 --> 00:07:28.740
Yeah,

00:07:28.740 --> 00:07:34.850
type off in Is one off the end our float.

00:07:34.850 --> 00:07:38.260
So only if that is the case Give me the numbers.

00:07:38.260 --> 00:07:44.180
Now that I got there numbs I can say here some off comes because that is the building

00:07:44.180 --> 00:07:45.910
function that can help with the sun.

00:07:45.910 --> 00:07:49.140
And then I can say divided by Len off months,

00:07:49.140 --> 00:07:51.750
which is another building function which gives you the count.

00:07:51.750 --> 00:07:55.000
And this is gonna be my return value from this function.

00:07:55.000 --> 00:07:56.310
So obviously,

00:07:56.310 --> 00:07:59.550
now I can collected into average and then print it back.

00:07:59.550 --> 00:08:00.140
So,

00:08:00.140 --> 00:08:00.540
you know,

00:08:00.540 --> 00:08:02.800
uncommon these to save it,

00:08:02.800 --> 00:08:03.800
go back to the command,

00:08:03.800 --> 00:08:04.270
prompt,

00:08:04.270 --> 00:08:06.140
and then run this on.

00:08:06.140 --> 00:08:09.950
You should see that we have to average is being printed.

00:08:09.950 --> 00:08:14.860
So even if I supplied some non numerical values because of the list,

00:08:14.860 --> 00:08:18.630
comprehension is only going to take up numerical values on.

00:08:18.630 --> 00:08:20.080
Then it is going to help it.

00:08:20.080 --> 00:08:23.940
The some on the land do whites one by another,

00:08:23.940 --> 00:08:25.440
and then I get the return value here.

00:08:25.440 --> 00:08:29.050
Let's come in about all this and then try one more.

00:08:29.050 --> 00:08:30.000
No.

00:08:30.000 --> 00:08:36.320
Sometimes you may declare a function with the multiple key value pairs off arguments.

00:08:36.320 --> 00:08:36.460
Now.

00:08:36.460 --> 00:08:40.450
This can be done by creating a perimeter with Double Star,

00:08:40.450 --> 00:08:44.530
and we call it as kw arcs for keyword arguments.

00:08:44.530 --> 00:08:45.280
That's right,

00:08:45.280 --> 00:08:48.100
a function called print in four,

00:08:48.100 --> 00:08:50.210
Which states two stars.

00:08:50.210 --> 00:08:51.540
Kid of Your Odds.

00:08:51.540 --> 00:08:53.870
This'd a convention again.

00:08:53.870 --> 00:08:57.160
You can use a different name if you feel like on this.

00:08:57.160 --> 00:09:02.450
Everybody's a cream day off kw Arms is.

00:09:02.450 --> 00:09:05.180
And then that here by Kate of your arms.

00:09:05.180 --> 00:09:08.900
You should see now that it's going to say it's addict.

00:09:08.900 --> 00:09:11.510
But how do I call this in order to call,

00:09:11.510 --> 00:09:15.130
I can simply say there print understood in full on,

00:09:15.130 --> 00:09:15.420
say,

00:09:15.420 --> 00:09:16.890
name equals toe.

00:09:16.890 --> 00:09:20.420
We note city equals toe triangular.

00:09:20.420 --> 00:09:23.400
Ondo State equals toa que.

00:09:23.400 --> 00:09:26.010
None of these variables have been defined over here,

00:09:26.010 --> 00:09:29.500
like in the first example we had declared as name and city,

00:09:29.500 --> 00:09:32.950
so whatever that we supplied in the first cases,

00:09:32.950 --> 00:09:35.290
they were all going to these two variables.

00:09:35.290 --> 00:09:36.660
But this time the name,

00:09:36.660 --> 00:09:40.590
city and state are totally arbitrary variable names,

00:09:40.590 --> 00:09:45.230
which are created as keys off this particular dictionary Onda.

00:09:45.230 --> 00:09:47.460
Then these will be the values of the dictionary,

00:09:47.460 --> 00:09:52.700
so you can also print What is the value in that kid of your pants on?

00:09:52.700 --> 00:09:53.460
Do check it out.

00:09:53.460 --> 00:10:00.350
So let's go and try this and you'll see that the type of kw arc sees a class dicked on.

00:10:00.350 --> 00:10:03.690
What are the values that supplied is in that particular dictionary?

00:10:03.690 --> 00:10:04.330
In this case,

00:10:04.330 --> 00:10:05.910
I gave a name on the city.

00:10:05.910 --> 00:10:06.270
Let's say,

00:10:06.270 --> 00:10:06.850
for example,

00:10:06.850 --> 00:10:11.200
I'm gonna view your print in for Onda supplies something.

00:10:11.200 --> 00:10:14.350
Let's have type equals two PC on.

00:10:14.350 --> 00:10:18.500
Then I can say make equals two little apple on then.

00:10:18.500 --> 00:10:19.710
Around this on,

00:10:19.710 --> 00:10:24.110
you can see that I can supply totally a different set off perimeters.

00:10:24.110 --> 00:10:25.380
It doesn't matter what it is.

00:10:25.380 --> 00:10:26.950
It's all user defined,

00:10:26.950 --> 00:10:33.130
so this can be used for dynamically receiving named parameters.

00:10:33.130 --> 00:10:38.150
We will see some practical use cases off this in the mini project that we're gonna work on

