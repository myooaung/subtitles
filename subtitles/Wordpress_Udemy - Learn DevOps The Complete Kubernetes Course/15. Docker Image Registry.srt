1
00:00:00,470 --> 00:00:04,230
In this lecture, I'm going to talk about the Docker Registry.

2
00:00:04,230 --> 00:00:12,020
I'm going to show you how to push containers to Docker Hub. You can run the docker app by executing "docker run" locally

3
00:00:12,030 --> 00:00:13,160
That's what I just showed you in the previous demo.

4
00:00:13,160 --> 00:00:20,420
Docker can be run locally for development purposes.

5
00:00:20,750 --> 00:00:25,560
If you just want to do some local development you can run your containers locally.

6
00:00:25,610 --> 00:00:31,200
You don't need Kubernetes for that. To make an image available to Kubernetes,

7
00:00:31,430 --> 00:00:36,290
you need to push the image to a Docker Registry, like Docker Hub.

8
00:00:36,460 --> 00:00:41,130
The first step will be to make an account on Docker Hub.

9
00:00:41,260 --> 00:00:47,860
Then you can push any locally build images to the Docker Registry, where the docker images can be stored in.

10
00:00:49,360 --> 00:00:55,930
To push an image to Docker Hub you first need to use a "docker login", to log in with your user ID and your password.

11
00:00:57,400 --> 00:01:05,140
You then tag your image ID the one was added when you ran "docker.build". You need to tag it with

12
00:01:05,140 --> 00:01:10,910
your login/docker-demo or any name that you want to give to your image.

13
00:01:11,110 --> 00:01:18,580
Then you can Docker push this image and then the image will be uploaded to the Docker Hub or to immediately tag an image 

14
00:01:18,590 --> 00:01:20,080
during the build process.

15
00:01:20,080 --> 00:01:22,040
So you don't have to do it in two steps.

16
00:01:22,090 --> 00:01:30,100
You can go to docker-demo, do the docker build again again and then use "-t" to immediately tag your build

17
00:01:30,940 --> 00:01:38,200
and then you can also login and push your docker image to Docker Hub or to any other Registry that you want to use.

18
00:01:38,200 --> 00:01:41,030
If you are not using anything yet, 

19
00:01:41,040 --> 00:01:42,610
Docker Hub is the easiest.

20
00:01:42,790 --> 00:01:47,820
If you're using AWS, then AWS has an alternative docker ECR.

21
00:01:48,460 --> 00:01:53,250
I will be using Docker Hub, but feel free to use your own one.

22
00:01:53,390 --> 00:01:54,910
Just a few remarks.

23
00:01:55,010 --> 00:01:59,770
You can build and deploy any application you want using docker and kubernetes.

24
00:02:00,230 --> 00:02:07,010
if you just take into account a few limitations. You should only run one process in one container.

25
00:02:07,010 --> 00:02:13,010
Don't try to create one giant docker image for your app, but split it up if necessary.

26
00:02:13,010 --> 00:02:18,600
All the data in a container is not preserved, when a container stops all the changes within a container are lost.

27
00:02:18,660 --> 00:02:25,830
You can still preserve data using volumes, which is covered later in this course.

28
00:02:26,020 --> 00:02:28,870
For more tips, check out the 12-factor app methodology at 12factor.net.

29
00:02:28,890 --> 00:02:35,710
So, that's a methodology on how to write stateless applications which is a very interesting read.

30
00:02:36,160 --> 00:02:39,890
Have a look at this website if you're interested in that.

31
00:02:39,950 --> 00:02:42,430
Here are also a few official images

32
00:02:42,470 --> 00:02:44,640
You might want to use for your app.

33
00:02:44,930 --> 00:02:51,560
There is "nginx", which is a web server. You can use a PHP image, you can use a Node image. That's the

34
00:02:51,560 --> 00:02:53,360
one I used in the demo.

35
00:02:53,750 --> 00:02:59,750
You can use a Ruby image, you can use a Python image, or you can use a Java image, and there are many more

36
00:02:59,750 --> 00:03:03,400
that you can use to build your containers on the Hub to Docker.com.
