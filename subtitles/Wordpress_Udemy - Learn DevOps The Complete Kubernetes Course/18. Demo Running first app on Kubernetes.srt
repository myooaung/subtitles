1
00:00:01,010 --> 00:00:08,740
In this demo, I'm going to show you how to run your first app on Kubernetes using pods.

2
00:00:08,780 --> 00:00:12,630
First of all you will need to clone my git repository.

3
00:00:12,860 --> 00:00:19,370
So, again you can usually git clone commands or you can go to this website and you can download a zip file.

4
00:00:21,130 --> 00:00:24,770
So, this repository is called "kubernetes-course"

5
00:00:28,400 --> 00:00:29,200
On this machine I have my mini kube-cluster running

6
00:00:29,300 --> 00:00:36,560
Just as I explained in one of the previous demos, so I can immediately use kubectl

7
00:00:37,550 --> 00:00:44,420
So, "kubectl get node" is showing me that's my mini kube is running. 

8
00:00:44,480 --> 00:00:48,890
Though, I have here under "fist-app", I have the "helloworld.yml" file

9
00:00:48,890 --> 00:00:59,160
And this file I am going to use to create the pod. 

10
00:00:59,210 --> 00:00:59,690
So, I am going to use "kubectl create -f fist-app/helloworld.yml"

11
00:01:02,520 --> 00:01:03,660
Kubernetes came back to me

12
00:01:03,670 --> 00:01:07,810
"pod 'nodehelloworld.example.com' created"

13
00:01:07,810 --> 00:01:18,370
So, then now use "kubectl get pod", then you can see the pod that was previously running

14
00:01:18,370 --> 00:01:24,060
which is the pod that I started when I installed this cluster, which is already running

15
00:01:24,580 --> 00:01:28,980
And then, I have another pod "nodehelloworld.example.com"

16
00:01:29,000 --> 00:01:34,480
So, let's have a look at this one using "describe pod" and then the name.

17
00:01:34,540 --> 00:01:41,640
At the bottom you see the events and you see one of the evens is that it's now pulling

18
00:01:41,640 --> 00:01:44,550
the image, so it is pulling this image

19
00:01:44,550 --> 00:01:54,220
it's downloading the image and then [it] will start the pod. So here I see some info about container, my labels, 

20
00:01:54,220 --> 00:01:56,280
State is "Pending"

21
00:01:56,890 --> 00:02:02,430
If you don't have a very fast internet connection it can take some time to pull this image.

22
00:02:04,170 --> 00:02:11,030
So, now it's started the container with the Docker ID and then the ID. Our pod is now running.

23
00:02:11,030 --> 00:02:14,580
There are now multiple ways to get to this pod.

24
00:02:14,840 --> 00:02:18,610
The first way is to use port-forwarding

25
00:02:19,160 --> 00:02:28,420
We can use kubectl to port-forward and then we just use the name. We can port-forward the pod, which is 3000

26
00:02:28,690 --> 00:02:33,870
And we can listen locally on port 8081.

27
00:02:33,880 --> 00:02:41,800
So then, again locally, on this machine connect to 8081 and then kubectl is going to make sure that

28
00:02:41,890 --> 00:02:44,610
all this traffic is redirected to port 3000.

29
00:02:44,950 --> 00:02:46,170
So this stays open,

30
00:02:46,210 --> 00:02:57,280
I just have to open a new shell and I can just do, "curl localhost:8081", and then I get the "Hello World".

31
00:02:57,440 --> 00:03:02,360
This is one way to quickly test whether it is working.

32
00:03:02,550 --> 00:03:09,030
The second way is to create a service.

33
00:03:09,270 --> 00:03:10,070
In the next lecture hour, I will explain how to create a service for AWS.

34
00:03:10,450 --> 00:03:14,610
If you are running a class on AWS that's going to be interesting for you, if you are using

35
00:03:14,720 --> 00:03:19,050
minikube you can just expose the port and then connect directly.

36
00:03:19,050 --> 00:03:25,650
You can do the same on your AWS cluster, but on AWS you have the possibility to use Load Balancer.

37
00:03:25,950 --> 00:03:29,540
So, Load Balancer is always going to be better for you.

38
00:03:29,550 --> 00:03:33,070
Let me first show you how to expose this port.

39
00:03:33,310 --> 00:03:35,110
Go to "kubectl expose", we are going to expose "pod", and our pod name is "nodehelloworld.example.com" and

40
00:03:35,370 --> 00:03:46,530
and our pod name is "nodehelloworld.example.com" and we are going to use type "NodePort"

41
00:03:46,620 --> 00:03:52,980
which means that we can directly access Port 3000 on the Kubernetes 

42
00:03:52,980 --> 00:03:54,520
and it will redirect to this pod

43
00:03:54,690 --> 00:03:58,540
And actually in this case we also need to provide a name for this service.

44
00:03:58,800 --> 00:04:01,000
So we will just say "nodehelloworld-service"

45
00:04:01,020 --> 00:04:11,100
because you cannot use this as a name for a service. So, "service 'nodehelloworld-service' exposed

46
00:04:12,690 --> 00:04:18,020
Now, we just need to know the IP address of the Kubernetes cluster to connect to.

47
00:04:18,560 --> 00:04:21,590
If you're an AWS you can just use your Master Node.

48
00:04:21,720 --> 00:04:23,830
You will have to change your security groups though.

49
00:04:24,150 --> 00:04:31,450
If you're a minikube, "minikube service nodehelloworld-service --url" 

50
00:04:31,740 --> 00:04:34,030
and this gives us the correct mapping.

51
00:04:34,140 --> 00:04:37,060
So this port-forwards to Port 3000

52
00:04:37,240 --> 00:04:47,490
So if you do "kubectl get service", we see the newly created service that exposes Port 3000. With minikube

53
00:04:47,520 --> 00:04:55,140
we can use this port to connect to the service, because this is an IP address that I can use for my whole

54
00:04:55,140 --> 00:05:01,920
system, for my Mac. These IP addresses here are IP addresses within our cluster.

55
00:05:01,920 --> 00:05:03,980
So, those are two different things.

56
00:05:04,200 --> 00:05:08,220
So, I'm going to use my browser and "Hello World"

57
00:05:08,280 --> 00:05:09,470
It is working.
