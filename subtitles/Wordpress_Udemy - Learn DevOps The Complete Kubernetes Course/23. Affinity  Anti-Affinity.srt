1
1

00:00:00,240  -->  00:00:02,540
<v Edward>In this lecture, I'll be talking about affinity</v>
2

2

00:00:02,540  -->  00:00:04,833
and anti-affinity in Kubernetes.
3

3

00:00:06,510  -->  00:00:08,516
In a previous demo I showed you how to use
4

4

00:00:08,516  -->  00:00:11,710
the node selector to make sure pods get scheduled
5

5

00:00:11,710  -->  00:00:12,893
on specific nodes.
6

6

00:00:14,620  -->  00:00:16,640
This was the example that I was using.
7

7

00:00:16,640  -->  00:00:18,760
It's a deployment, and in the specifications
8

8

00:00:18,760  -->  00:00:23,330
I used a nodeSelector to only scheduled the three
9

9

00:00:23,330  -->  00:00:26,010
pods that the deployment is going to start,
10

10

00:00:26,010  -->  00:00:31,010
only on nodes that have the label hardware equals high-spec.
11

11

00:00:32,206  -->  00:00:35,750
So, if the node doesn't have this label, the pod will not
12

12

00:00:35,750  -->  00:00:37,340
be scheduled on that node.
13

13

00:00:37,340  -->  00:00:40,500
So you need a node with exactly this label
14

14

00:00:40,500  -->  00:00:42,623
to have this pod scheduled.
15

15

00:00:44,000  -->  00:00:46,320
Affinity and anti-affinity that I'm going to show you
16

16

00:00:46,320  -->  00:00:50,793
in this lecture are similar to what the nodeSelector does.
17

17

00:00:52,540  -->  00:00:55,130
The affinity/anti-affinity feature allows you
18

18

00:00:55,130  -->  00:00:58,182
to do more complex scheduling than the nodeSelector
19

19

00:00:58,182  -->  00:00:59,813
and also works on pods.
20

20

00:01:01,091  -->  00:01:03,041
It's not only for nodes, also for pods.
21

21

00:01:04,650  -->  00:01:07,313
The language that you can use is more expressive.
22

22

00:01:08,210  -->  00:01:10,880
You can create rules that are not hard requirements,
23

23

00:01:10,880  -->  00:01:14,350
but rather a preferred rule, meaning that the scheduler
24

24

00:01:14,350  -->  00:01:16,260
will still be able to schedule your pod,
25

25

00:01:16,260  -->  00:01:18,480
even if the rules can't be met.
26

26

00:01:18,480  -->  00:01:22,550
So if a nodeSelector, if a node doesn't have your label,
27

27

00:01:22,550  -->  00:01:24,640
it'll never get scheduled.
28

28

00:01:24,640  -->  00:01:27,300
Whereas, with affinity and anti-affinity,
29

29

00:01:27,300  -->  00:01:29,760
you can create a different type of rule,
30

30

00:01:29,760  -->  00:01:31,110
or you set a preference.
31

31

00:01:31,110  -->  00:01:35,020
So, you will prefer nodes with a specific label,
32

32

00:01:35,020  -->  00:01:37,560
but if there is no node with that label schedule-able,
33

33

00:01:37,560  -->  00:01:40,520
it will still get scheduled on another node.
34

34

00:01:40,520  -->  00:01:43,500
You can create rules that take other pod labels
35

35

00:01:43,500  -->  00:01:44,950
into account.
36

36

00:01:44,950  -->  00:01:48,810
So, affinity also exists, not only for node affinity
37

37

00:01:48,810  -->  00:01:50,493
but also for pod affinity.
38

38

00:01:52,020  -->  00:01:54,680
For example, you can create a rule that makes sure
39

39

00:01:54,680  -->  00:01:57,230
two different pods will never be on the same nodes.
40

40

00:01:58,430  -->  00:02:00,419
Kubernetes can do node affinity
41

41

00:02:00,419  -->  00:02:01,969
and pod affinity/anti-affinity.
42

42

00:02:02,989  -->  00:02:05,887
Node affinity is similar to the nodeSelector
43

43

00:02:05,887  -->  00:02:09,490
and pod affinity/anti-affinity allows you to create rules,
44

44

00:02:09,490  -->  00:02:12,700
how pods should be scheduled, taking into account
45

45

00:02:12,700  -->  00:02:14,053
other running pods.
46

46

00:02:15,320  -->  00:02:18,390
Affinity/anti-affinity is a mechanism only relevant
47

47

00:02:18,390  -->  00:02:19,780
during scheduling.
48

48

00:02:19,780  -->  00:02:22,340
Once the pod is running, it will need to be re-created
49

49

00:02:22,340  -->  00:02:24,500
to apply the rules again.
50

50

00:02:24,500  -->  00:02:27,690
Don't expect that if there is a new node with a label,
51

51

00:02:27,690  -->  00:02:30,280
and it's a better match, that Kubernetes will automatically
52

52

00:02:30,280  -->  00:02:31,840
reschedule your pods.
53

53

00:02:31,840  -->  00:02:34,920
You will have to terminate your pod first,
54

54

00:02:34,920  -->  00:02:37,690
and it needs to be re-created, to make sure if you want
55

55

00:02:37,690  -->  00:02:40,420
to have your pod scheduled on another node.
56

56

00:02:40,420  -->  00:02:42,190
I will first cover node affinity,
57

57

00:02:42,190  -->  00:02:44,893
and will then cover pod affinity/anti-affinity.
58

58

00:02:45,890  -->  00:02:49,283
There are currently two types you can use for node affinity.
59

59

00:02:50,180  -->  00:02:53,940
The requiredDuringSchedulingIgnoredDuringExecution,
60

60

00:02:53,940  -->  00:02:58,026
and the preferredDuringSchedulingIgnoredDuringExecution.
61

61

00:02:58,026  -->  00:03:00,240
The the first one sets a hard requirement
62

62

00:03:00,240  -->  00:03:02,160
like the nodeSelector.
63

63

00:03:02,160  -->  00:03:05,320
The rules must be met before the pod can be scheduled.
64

64

00:03:05,320  -->  00:03:07,900
The second type will try to enforce the rule,
65

65

00:03:07,900  -->  00:03:09,573
but it will not guarantee it.
66

66

00:03:10,490  -->  00:03:13,820
Even if the rule is not met, the pod can still be scheduled.
67

67

00:03:13,820  -->  00:03:15,020
It's a soft requirement.
68

68

00:03:15,020  -->  00:03:16,863
It's a preference, in this case.
69

69

00:03:17,710  -->  00:03:20,770
So here's an example, that I will use in the next demo.
70

70

00:03:20,770  -->  00:03:23,160
So, in your deployment specification,
71

71

00:03:23,160  -->  00:03:27,220
you can define affinity, the note affinity and here you can
72

72

00:03:27,220  -->  00:03:30,680
define the requiredDuringSchedulingIgnoreddDuringExecution
73

73

00:03:30,680  -->  00:03:31,522
and also the,
74

74

00:03:31,522  -->  00:03:33,680
preferredDuringSchedulingIgnoredDuringExecution.
75

75

00:03:33,680  -->  00:03:35,740
So, it can combine both.
76

76

00:03:35,740  -->  00:03:38,090
In this example, we're going to look for nodes
77

77

00:03:38,090  -->  00:03:40,280
that match the expression env and dev.
78

78

00:03:40,280  -->  00:03:44,820
So the environment, env, needs to be dev before this pod
79

79

00:03:44,820  -->  00:03:46,940
can be scheduled on that node, because we have
80

80

00:03:46,940  -->  00:03:50,040
the requiredDuringSchedulingIgnoredDuringExecution
81

81

00:03:50,040  -->  00:03:51,423
and not the preferred.
82

82

00:03:52,862  -->  00:03:55,310
If the label env, is dev on whatever nodes
83

83

00:03:55,310  -->  00:03:57,810
then we can be sure it will be scheduled,
84

84

00:03:57,810  -->  00:04:00,823
because we have a preferred rule, a second rule
85

85

00:04:00,823  -->  00:04:03,600
and the preferred rule is a preference.
86

86

00:04:03,600  -->  00:04:05,580
So, it'll look for nodes that match.
87

87

00:04:05,580  -->  00:04:08,570
But, if it doesn't match it will still get scheduled.
88

88

00:04:08,570  -->  00:04:09,510
We're gonna give it a weight,
89

89

00:04:09,510  -->  00:04:12,340
and I will explain the weight in the next slide.
90

90

00:04:12,340  -->  00:04:13,707
And then we have the preference.
91

91

00:04:13,707  -->  00:04:17,050
And the preference is matchExpressions, team, In,
92

92

00:04:17,050  -->  00:04:18,100
engineering-project1.
93

93

00:04:18,950  -->  00:04:20,330
So, we're looking for the label
94

94

00:04:20,330  -->  00:04:22,530
team equals engineering-project1.
95

95

00:04:22,530  -->  00:04:24,800
But, if there are no nodes with engineering-project1
96

96

00:04:24,800  -->  00:04:29,540
as a label, then we'll still schedule it on a node
97

97

00:04:29,540  -->  00:04:32,750
that has env equals dev, but is missing this label.
98

98

00:04:32,750  -->  00:04:34,993
So, I'll show you how it works in the next demo.
99

99

00:04:36,260  -->  00:04:38,290
Now, in the previous slide I also supplied
100

100

00:04:38,290  -->  00:04:39,631
a weighting to the,
101

101

00:04:39,631  -->  00:04:42,830
preferredDuringSchedulingIgnoredDuringExecution statement.
102

102

00:04:42,830  -->  00:04:43,900
So, here it is again.
103

103

00:04:43,900  -->  00:04:44,943
Weight is one.
104

104

00:04:46,540  -->  00:04:49,020
The higher this weighting, the more weight is given
105

105

00:04:49,020  -->  00:04:50,500
to that rule.
106

106

00:04:50,500  -->  00:04:52,990
When scheduling, Kubernetes will score every node
107

107

00:04:52,990  -->  00:04:56,060
by summarizing the weightings per node.
108

108

00:04:56,060  -->  00:04:59,260
For example, if you have two different rules,
109

109

00:04:59,260  -->  00:05:02,563
preferred rules is, with weights, one and five.
110

110

00:05:03,420  -->  00:05:07,650
If both rules match, the node will have a score of six.
111

111

00:05:07,650  -->  00:05:11,840
So, in this case we have one node, where both rules match.
112

112

00:05:11,840  -->  00:05:13,770
But, you're probably going to have other notes.
113

113

00:05:13,770  -->  00:05:14,603
So that's it.
114

114

00:05:14,603  -->  00:05:18,000
We have another node, and on this other node
115

115

00:05:18,000  -->  00:05:20,818
if only the rule with weight one matches,
116

116

00:05:20,818  -->  00:05:23,470
then the score will only be one.
117

117

00:05:23,470  -->  00:05:25,680
So then, we have one node with score six
118

118

00:05:25,680  -->  00:05:28,040
and one node with score one.
119

119

00:05:28,040  -->  00:05:30,350
The node that has the highest total score,
120

120

00:05:30,350  -->  00:05:32,430
that's where the pod will be scheduled on.
121

121

00:05:32,430  -->  00:05:35,110
So in this example, our pod would be scheduled
122

122

00:05:35,110  -->  00:05:37,163
on the node that has a score of six.
123

123

00:05:39,180  -->  00:05:41,610
In addition to the labels that you can add yourself,
124

124

00:05:41,610  -->  00:05:43,890
to the nodes, there are repopulated labels
125

125

00:05:43,890  -->  00:05:45,520
that you can use as well.
126

126

00:05:45,520  -->  00:05:47,400
For example, if you want to know the hostname,
127

127

00:05:47,400  -->  00:05:48,830
you can use the label with the key
128

128

00:05:48,830  -->  00:05:51,150
Kubernetes.io/hostname.
129

129

00:05:51,150  -->  00:05:54,290
So this will reply the hostname,
130

130

00:05:54,290  -->  00:05:56,543
and you can use that in your affinity rules.
131

131

00:05:58,030  -->  00:06:01,500
You also have the zone, and this can actually change
132

132

00:06:01,500  -->  00:06:02,740
once this becomes a stable.
133

133

00:06:02,740  -->  00:06:05,490
So, you will have to double check your node labels
134

134

00:06:05,490  -->  00:06:07,380
to see what labels that you have.
135

135

00:06:07,380  -->  00:06:09,610
I will also show you that in the demo.
136

136

00:06:09,610  -->  00:06:11,480
The zone is cloud dependent.
137

137

00:06:11,480  -->  00:06:14,946
If you're an alias, then the zone can be EU West
138

138

00:06:14,946  -->  00:06:16,453
1A for example.
139

139

00:06:17,840  -->  00:06:20,410
The region, also cloud dependent;
140

140

00:06:20,410  -->  00:06:24,033
can be US1, can be US East, US West and so on.
141

141

00:06:25,370  -->  00:06:27,653
The instance type, for example t2.micro.
142

142

00:06:28,550  -->  00:06:31,790
The operating system and the architecture.
143

143

00:06:31,790  -->  00:06:33,480
So, depending where you deploy,
144

144

00:06:33,480  -->  00:06:35,280
these can all have different values.
145

145

00:06:36,260  -->  00:06:38,240
But nevertheless, these are labels that you might
146

146

00:06:38,240  -->  00:06:40,153
want to use for your decision making.
