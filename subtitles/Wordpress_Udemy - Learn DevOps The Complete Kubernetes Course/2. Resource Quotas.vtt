WEBVTT
1
00:00:00.300 --> 00:00:03.830
This lecture will be about Resource Quotas.

2
00:00:04.060 --> 00:00:10.400
When a Kubernetes cluster is used by multiple people or teams, resource management becomes more important.

3
00:00:11.480 --> 00:00:16.740
You want to be able to manage the resources you give to a person or a team.

4
00:00:16.910 --> 00:00:20.900
You don't want one person or one team taking up all the resources.

5
00:00:20.900 --> 00:00:28.450
For instance, CPU and memory of the whole cluster, you can divide your cluster in namespaces,

6
00:00:28.450 --> 00:00:34.700
which is explained in the next lecture and enable resource quotas on it, which I will explain now.

7
00:00:35.970 --> 00:00:45.340
You can do this using the "ResourceQuota" and the "ObjectQuota" objects. 

8
00:00:45.340 --> 00:00:47.710
Each container can specify request capacity and capacity limits.

9
00:00:47.800 --> 00:00:55.800
Two different things that you can specify. Request capacity is an explicit request for resources.

10
00:00:55.820 --> 00:01:02.610
This scheduler can use this request capacity to make decisions on where to put the pods on.

11
00:01:02.690 --> 00:01:10.490
You can see it as a minimum amount of resources the pod needs. Resource limits is a limit imposed to the container.

12
00:01:10.490 --> 00:01:17.010
The container will not be able to utilize more resources than specified.

13
00:01:17.010 --> 00:01:23.390
So there's really a limit where capacity is some kind of minimum amount that you put that Kubernetes

14
00:01:23.420 --> 00:01:27.510
can then use to to schedule your pods accordingly.

15
00:01:27.630 --> 00:01:34.350
Also, requires capacity is used by mechanisms like the pod autoscaler, which I explained earlier.

16
00:01:36.170 --> 00:01:45.140
Example of Resource Quotas, you run a deployment with a pod with CPU resource request of 200m.

17
00:01:45.200 --> 00:01:48.870
200m means, 200 millicpu, or also 200 millicores.

18
00:01:48.980 --> 00:01:51.940
I explained this earlier, I just want to refresh this.

19
00:01:51.950 --> 00:01:56.050
It's exactly the same thing as I explained in the auto scaling, the same principles.

20
00:01:56.070 --> 00:02:03.320
So 200m is "Point 2", which is 20% of the CPU core of the running node.

21
00:02:03.390 --> 00:02:10.030
If the node has to cores, it's still 200% of a single core 

22
00:02:10.030 --> 00:02:16.330
and you can also put a limit. For instance, you can put a limit on 400 millicpu, you can say I want to have the

23
00:02:16.330 --> 00:02:22.420
capacity of 200 millicpu, maybe you are going to do some scaling based on that, but the container within

24
00:02:22.420 --> 00:02:30.760
this pod can only use a maximum for instance of 400 millicpu. Memory quotas are defined by megabytes or gigabytes.

25
00:02:35.110 --> 00:02:42.120
If a capacity quota, for instance, memory or CPU has been specified by the administrator then each

26
00:02:42.130 --> 00:02:46.180
Pod need to specify capacity quota during creation.

27
00:02:46.390 --> 00:02:53.020
If you as administrator is going to say, "I want what I want capacity quota on my cluster, then every

28
00:02:53.020 --> 00:02:58.170
pod that needs to be scheduled, needs to have this capacity a defined when the pod is created.

29
00:02:59.290 --> 00:03:06.120
The administrator can specify default request values for pods that don't specify any values for capacity.

30
00:03:06.220 --> 00:03:11.470
You probably want to specify those defaults, because otherwise people might just get an error when they

31
00:03:11.470 --> 00:03:14.640
don't specify the capacity quota.

32
00:03:14.680 --> 00:03:16.690
The same is valid for limit quotas.

33
00:03:16.720 --> 00:03:21.890
So like I explained, it is for capacity quotas, but also for limit quotas.

34
00:03:22.090 --> 00:03:28.740
If you set a limit quotas, as an administrator then you better also set the default limits.

35
00:03:28.940 --> 00:03:36.410
If a resource is requested more than the allowed capacity, the server API, Kubernetes is API server will

36
00:03:36.410 --> 00:03:43.780
give an error "403 Forbidden", and "kubectl" will show a error.

37
00:03:43.810 --> 00:03:46.140
The administrator can set the following resource limits within a namespace.

38
00:03:46.300 --> 00:03:48.200
You can set the request CPU.

39
00:03:48.220 --> 00:03:53.320
This means that the sum of CPU requests of our pods cannot exceed this value.

40
00:03:53.590 --> 00:04:02.250
So, if you say if your CPU request is "1 core", then all pods together that are submitted cannot exceed this value.

41
00:04:03.520 --> 00:04:04.260
Same with memory.

42
00:04:04.300 --> 00:04:11.020
If you say "1 gigabyte max", then the sum of these memory requests cannot exceed this value.

43
00:04:11.020 --> 00:04:12.220
Same with the storage.

44
00:04:12.220 --> 00:04:16.510
This is about the volume claims, the volume claims cannot exceed its value.

45
00:04:16.750 --> 00:04:23.290
And then you have the CPU limits and the memory limits. Same the sum of the CPU limits of all the pods cannot exceed this value.

46
00:04:25.210 --> 00:04:30.730
So, people want to start pods on the cluster will have to specify these limits CPU, limit memory,

47
00:04:30.730 --> 00:04:35.320
and the total of these values need to be lower than the total that the administrator is going to set.

48
00:04:36.690 --> 00:04:40.750
The administrator can also set the following object limits.

49
00:04:40.800 --> 00:04:46.460
You can have limits on configmaps, persistent volume claims, pods, replication controllers, resource quotas,

50
00:04:46.470 --> 00:04:53.280
services, the load balancers, the nodeports, and the secrets.

51
00:04:53.280 --> 00:04:53.700
Any limit on those objects you can say for instance,

52
00:04:53.720 --> 00:04:57.190
"I want to have a maximum of 10 pods on a namespace".

53
00:04:57.300 --> 00:05:00.900
"I want to have a maximum of 10 pods within this namespace".

54
00:05:00.900 --> 00:05:07.650
So, if someone tried to submit a 11Â° one then that person will get an error.

55
00:05:07.650 --> 00:05:09.890
What exactly the namespaces are and how do they work?

56
00:05:09.900 --> 00:05:15.150
I will explain in the next lecture. And then, in the next demo after the lecture, I will show you how to put those limits on a namespace.
