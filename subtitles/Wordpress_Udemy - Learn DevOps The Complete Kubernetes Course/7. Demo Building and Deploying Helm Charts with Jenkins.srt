1
1

00:00:00,300  -->  00:00:02,450
<v Instructor>In this demo, I will show you how to build</v>
2

2

00:00:02,450  -->  00:00:05,113
and deploy a chart using Jenkins.
3

3

00:00:06,420  -->  00:00:08,630
First, we have to deploy Jenkins,
4

4

00:00:08,630  -->  00:00:10,170
if you want to use Jenkins.
5

5

00:00:10,170  -->  00:00:12,770
Luckily, there's a chart for Jenkins
6

6

00:00:12,770  -->  00:00:14,283
so we can deploy it easily.
7

7

00:00:16,180  -->  00:00:18,140
I have here Jenkins folder,
8

8

00:00:18,140  -->  00:00:20,430
and in this Jenkins folder I have a ReadMe.
9

9

00:00:21,370  -->  00:00:23,340
Let's first create a service account
10

10

00:00:23,340  -->  00:00:25,710
that we are going to use later on
11

11

00:00:25,710  -->  00:00:27,573
to deploy our application.
12

12

00:00:29,420  -->  00:00:31,670
Service account is called jenkins-helm,
13

13

00:00:31,670  -->  00:00:33,993
and I will use it to deploy our application.
14

14

00:00:35,770  -->  00:00:37,280
I'm going to do helm install,
15

15

00:00:37,280  -->  00:00:38,900
I'm going to give the name Jenkins,
16

16

00:00:38,900  -->  00:00:42,190
I'm going to say rbac.install=true
17

17

00:00:42,190  -->  00:00:44,430
and I'm going to run it as user 1000.
18

18

00:00:44,430  -->  00:00:47,270
Instead of user root, I'm just going to run it immediately
19

19

00:00:47,270  -->  00:00:48,863
as a normal user.
20

20

00:00:49,840  -->  00:00:51,913
And the chart is called stable/jenkins.
21

21

00:00:53,470  -->  00:00:56,250
So I'm going to install Jenkins
22

22

00:00:56,250  -->  00:00:59,250
and it is going to bring up a LoadBalancer.
23

23

00:00:59,250  -->  00:01:01,340
To know the password for the user admin,
24

24

00:01:01,340  -->  00:01:02,773
I can execute this command.
25

25

00:01:04,660  -->  00:01:06,770
This gives me this password,
26

26

00:01:06,770  -->  00:01:10,250
so this is the password I can log in with.
27

27

00:01:10,250  -->  00:01:13,380
And then this is to get the service.
28

28

00:01:13,380  -->  00:01:15,160
I have to wait a couple of minutes,
29

29

00:01:15,160  -->  00:01:17,110
and then I should be able to execute it
30

30

00:01:18,730  -->  00:01:21,423
and then I can log in to Jenkins right here.
31

31

00:01:22,600  -->  00:01:26,320
So this will spin up a Jenkins on our Kubernetes.
32

32

00:01:26,320  -->  00:01:27,870
This Jenkins comes pre-installed
33

33

00:01:27,870  -->  00:01:29,610
with the Kubernetes plugin,
34

34

00:01:29,610  -->  00:01:34,033
and using that plugin we can launch jobs as pods in Jenkins.
35

35

00:01:34,911  -->  00:01:36,111
So let's go to this URL.
36

36

00:01:38,010  -->  00:01:39,773
This brings us to the login page,
37

37

00:01:40,800  -->  00:01:43,153
user admin, the password.
38

38

00:01:44,167  -->  00:01:45,000
I'm going to use a password
39

39

00:01:45,000  -->  00:01:47,660
that was operated by one of the commands.
40

40

00:01:47,660  -->  00:01:50,470
Login, and the the first thing I'm going to do
41

41

00:01:50,470  -->  00:01:51,970
is I'm going to update the plugins
42

42

00:01:51,970  -->  00:01:54,970
because they can actually be a bit old.
43

43

00:01:54,970  -->  00:01:58,283
So I'm gonna go to Manage Plugins,
44

44

00:01:59,270  -->  00:02:01,950
select all, download now,
45

45

00:02:01,950  -->  00:02:05,010
and then we're going to install the update.
46

46

00:02:05,010  -->  00:02:07,300
Restart Jenkins when installation is complete
47

47

00:02:07,300  -->  00:02:08,500
and no jobs are running.
48

48

00:02:09,440  -->  00:02:11,210
So the first job that we are going to create
49

49

00:02:11,210  -->  00:02:12,470
is the build job,
50

50

00:02:12,470  -->  00:02:15,640
and I'm going to build our package, our helm package.
51

51

00:02:15,640  -->  00:02:18,820
We're going to push it to our S3 repository.
52

52

00:02:18,820  -->  00:02:20,550
So while this install is running,
53

53

00:02:20,550  -->  00:02:23,220
I'm going to create the necessary permissions
54

54

00:02:23,220  -->  00:02:27,640
for our S3 bucket so that Jenkins can access,
55

55

00:02:27,640  -->  00:02:31,180
so that Jenkins can access our S3 bucket
56

56

00:02:31,180  -->  00:02:32,893
where our charts are stored.
57

57

00:02:34,410  -->  00:02:36,690
So I have another script in helm
58

58

00:02:37,630  -->  00:02:40,763
that's called put-bucket-policy.sh.
59

59

00:02:42,720  -->  00:02:43,993
I'm going to open this.
60

60

00:02:45,350  -->  00:02:47,670
This is a script that is going to add
61

61

00:02:47,670  -->  00:02:49,800
the necessary permissions to S3
62

62

00:02:49,800  -->  00:02:52,140
so that our node, our Kubernetes node,
63

63

00:02:52,140  -->  00:02:56,323
can retrieve and put new objects in our S3 bucket.
64

64

00:02:57,790  -->  00:02:59,540
Make sure that you change the region
65

65

00:02:59,540  -->  00:03:01,240
if you're in a different region.
66

66

00:03:01,240  -->  00:03:04,180
This is the bucket you will have to change as well,
67

67

00:03:04,180  -->  00:03:07,360
helm dash and then your random string.
68

68

00:03:07,360  -->  00:03:10,420
And then NODE_ROLE_ARN, you will have to look
69

69

00:03:10,420  -->  00:03:14,170
for the NODE_ROLE_ARN of your Kubernetes cluster
70

70

00:03:14,170  -->  00:03:17,480
and of the nodes of your Kubernetes cluster.
71

71

00:03:17,480  -->  00:03:18,530
So let's have a look.
72

72

00:03:19,420  -->  00:03:23,803
I'm going to use aws iam list-roles,
73

73

00:03:25,520  -->  00:03:28,550
and I'm going to filter on my cluster name,
74

74

00:03:28,550  -->  00:03:31,133
kubernetes.newtech.academy.
75

75

00:03:33,470  -->  00:03:36,030
And this is gonna give me the master roles
76

76

00:03:37,050  -->  00:03:39,140
and the role of the normal nodes,
77

77

00:03:39,140  -->  00:03:41,110
and it's this one that I need.
78

78

00:03:41,110  -->  00:03:45,173
I need ARN of this nodes.kubernetes.newtech.academy.
79

79

00:03:46,730  -->  00:03:50,363
I'm going to edit this NODE_ROLE_ARN here,
80

80

00:03:52,370  -->  00:03:56,253
and also make sure that you use the correct bucket name.
81

81

00:03:57,550  -->  00:04:01,400
This is then going to do aws s3api put-bucket-policy
82

82

00:04:02,380  -->  00:04:05,350
on our bucket and it's going to allow
83

83

00:04:05,350  -->  00:04:08,610
GetObject and PutObject on our bucket
84

84

00:04:08,610  -->  00:04:10,730
for our NODE_ROLE_ARN.
85

85

00:04:10,730  -->  00:04:12,780
It's also going to allow ListBucket.
86

86

00:04:14,260  -->  00:04:15,610
We'll need to execute this,
87

87

00:04:17,240  -->  00:04:21,000
and if you don't get any output then everything went fine.
88

88

00:04:21,000  -->  00:04:23,610
So at this point in time, our nodes will be able to
89

89

00:04:23,610  -->  00:04:26,623
read and write from and to our S3 bucket.
90

90

00:04:27,720  -->  00:04:29,533
Let's have another look at Jenkins.
91

91

00:04:31,050  -->  00:04:32,793
Admin and our password.
92

92

00:04:35,360  -->  00:04:38,130
And now we can start creating new jobs.
93

93

00:04:38,130  -->  00:04:40,290
I already created the jobs that you need,
94

94

00:04:40,290  -->  00:04:42,173
so you can just do Create New Job,
95

95

00:04:43,290  -->  00:04:44,640
and you can use a pipeline.
96

96

00:04:46,910  -->  00:04:50,880
First one will be demo chart deploy, type is pipeline.
97

97

00:04:50,880  -->  00:04:51,943
I'm gonna press Ok,
98

98

00:04:56,210  -->  00:04:58,623
and then you can copy-paste a pipeline script.
99

99

00:04:59,930  -->  00:05:04,013
You can either do a pipeline script from SCM, from git,
100

100

00:05:06,305  -->  00:05:08,355
and then you can put my repository there,
101

101

00:05:09,730  -->  00:05:11,273
but you'll have to fork my repository first
102

102

00:05:11,273  -->  00:05:13,420
because you will have to make some changes.
103

103

00:05:13,420  -->  00:05:14,993
So I will just copy-paste it,
104

104

00:05:16,400  -->  00:05:18,700
just in case that you didn't fork it.
105

105

00:05:18,700  -->  00:05:21,273
So let me copy-paste it from my git up repository.
106

106

00:05:22,940  -->  00:05:26,113
So I'm going to go to Helm, Jenkins,
107

107

00:05:27,984  -->  00:05:29,710
Jenkinsfile.build.
108

108

00:05:29,710  -->  00:05:31,173
So let me go over this file.
109

109

00:05:32,630  -->  00:05:33,950
What's going to happen,
110

110

00:05:33,950  -->  00:05:35,900
I'm going to use the Kubernetes plugin.
111

111

00:05:36,810  -->  00:05:38,980
I'm going to use the label helm-pod,
112

112

00:05:38,980  -->  00:05:42,460
and I'm going to use the container helm.
113

113

00:05:42,460  -->  00:05:43,960
And this is a container that I created
114

114

00:05:43,960  -->  00:05:48,003
that only contains the helm client with the S3 plugin.
115

115

00:05:49,470  -->  00:05:51,490
ttyEnabled true and command cat.
116

116

00:05:51,490  -->  00:05:55,190
So this container will run in the background,
117

117

00:05:55,190  -->  00:05:57,903
and then here I can start using this container.
118

118

00:05:59,128  -->  00:06:00,660
What will I do in this container?
119

119

00:06:00,660  -->  00:06:05,660
I will get my Kubernetes course and I will start executing
120

120

00:06:05,690  -->  00:06:06,560
a shell script.
121

121

00:06:06,560  -->  00:06:07,810
So here's a shell script.
122

122

00:06:08,690  -->  00:06:10,400
I need to define my helm bucket,
123

123

00:06:10,400  -->  00:06:12,890
so that's why we need to make changes.
124

124

00:06:12,890  -->  00:06:15,020
This line you will have to change.
125

125

00:06:15,020  -->  00:06:17,960
Same with AWS_REGION, you will have to change.
126

126

00:06:17,960  -->  00:06:19,493
The package is demo-chart.
127

127

00:06:20,590  -->  00:06:24,860
First I have to copy my settings from home/helm.helm.
128

128

00:06:24,860  -->  00:06:26,990
These are packaged with the container
129

129

00:06:26,990  -->  00:06:29,490
and I just have to copy them to my home directory.
130

130

00:06:30,360  -->  00:06:34,090
I'm then going to add the repository
131

131

00:06:34,090  -->  00:06:36,590
helm repo add my-charts,
132

132

00:06:36,590  -->  00:06:39,073
so then I can start using this repository.
133

133

00:06:39,073  -->  00:06:41,430
I will cd into the package I create.
134

134

00:06:41,430  -->  00:06:44,060
I will run the same what we did earlier,
135

135

00:06:44,060  -->  00:06:49,000
helm package update, helm package, and helm s3 push.
136

136

00:06:49,000  -->  00:06:52,940
I use force just in case that the package already exists,
137

137

00:06:52,940  -->  00:06:55,090
then it doesn't go and throw an error,
138

138

00:06:55,090  -->  00:06:57,820
and then the package dot tar gzip
139

139

00:06:59,170  -->  00:07:01,600
and I'm going to push this to my-charts
140

140

00:07:01,600  -->  00:07:03,300
which is the helm repository here.
141

141

00:07:05,020  -->  00:07:06,760
So this looks all pretty good.
142

142

00:07:06,760  -->  00:07:07,853
Let's copy this.
143

143

00:07:12,810  -->  00:07:17,483
Make sure that you change the region and the helm bucket.
144

144

00:07:18,480  -->  00:07:19,570
And if you forked it,
145

145

00:07:19,570  -->  00:07:22,700
you can use the pipeline script from SCM,
146

146

00:07:22,700  -->  00:07:26,040
and you will have to put this path,
147

147

00:07:26,040  -->  00:07:28,240
helm/jenkins/Jenkinsfile.build
148

148

00:07:28,240  -->  00:07:30,387
if you want to do it like that.
149

149

00:07:31,770  -->  00:07:33,320
Because this is a Jenkins file.
150

150

00:07:34,170  -->  00:07:35,333
I'm going to save this.
151

151

00:07:37,150  -->  00:07:38,053
Build now.
152

152

00:07:41,450  -->  00:07:42,563
It's going to build.
153

153

00:07:45,580  -->  00:07:48,493
So this will launch a pod on one of my nodes,
154

154

00:07:49,760  -->  00:07:53,963
and then it will connect to S3 to then push the helm chart.
155

155

00:07:55,020  -->  00:07:58,250
It takes some time to wait for an available executor,
156

156

00:07:58,250  -->  00:08:01,193
spinning of the pod, pulling the correct images.
157

157

00:08:02,310  -->  00:08:04,993
So it's running helm-pod and then this name.
158

158

00:08:07,470  -->  00:08:10,203
It's checking out git, the git repository.
159

159

00:08:12,927  -->  00:08:15,483
HELM_BUCKET, PACKAGE, REGION.
160

160

00:08:17,040  -->  00:08:19,360
It's updating the helm charts,
161

161

00:08:19,360  -->  00:08:22,783
it's packaging it and does a helm s3 push.
162

162

00:08:24,160  -->  00:08:29,160
And that worked, so now we have demo-chart-0.0.1
163

163

00:08:29,310  -->  00:08:33,050
on our repository, on our helm repository,
164

164

00:08:33,050  -->  00:08:35,000
and now we should be able to deploy it.
165

165

00:08:37,470  -->  00:08:39,120
So we're gonna create a new item,
166

166

00:08:39,980  -->  00:08:43,630
demo-chart deploy.
167

167

00:08:43,630  -->  00:08:48,630
Pipeline, and then again we're going to copy-paste a script.
168

168

00:08:48,810  -->  00:08:52,760
This script comes again from my git repository.
169

169

00:08:52,760  -->  00:08:54,343
It is a Jenkinsfile.deploy.
170

170

00:08:55,610  -->  00:08:59,400
What's happening here, it's almost the same.
171

171

00:08:59,400  -->  00:09:01,450
This part is almost the same
172

172

00:09:01,450  -->  00:09:04,470
except that we use the service account jenkins-helm,
173

173

00:09:04,470  -->  00:09:06,100
the one that we created,
174

174

00:09:06,100  -->  00:09:08,850
because here we're going to deploy the app
175

175

00:09:08,850  -->  00:09:11,420
which means that helm needs permissions
176

176

00:09:11,420  -->  00:09:13,973
to be able to deploy apps on our cluster.
177

177

00:09:14,820  -->  00:09:16,380
It will also connect to our cluster,
178

178

00:09:16,380  -->  00:09:18,160
but we don't really have to configure anything for this
179

179

00:09:18,160  -->  00:09:20,060
because it's already running in a pod.
180

180

00:09:21,320  -->  00:09:23,800
So here again, container template, helm-pod,
181

181

00:09:23,800  -->  00:09:27,890
my helm S3 package and this runs the command cat,
182

182

00:09:27,890  -->  00:09:29,840
so I have this running in the background.
183

183

00:09:29,840  -->  00:09:33,191
And then here we will start executing commands on it.
184

184

00:09:33,191  -->  00:09:35,830
We are again going to clone our git repository.
185

185

00:09:35,830  -->  00:09:37,700
Here you have to change these lines again
186

186

00:09:37,700  -->  00:09:40,420
if you want to run this demo yourself.
187

187

00:09:40,420  -->  00:09:43,533
We're going to copy the .helm again to our home directory.
188

188

00:09:44,600  -->  00:09:46,450
We're going to add to the repository,
189

189

00:09:47,940  -->  00:09:50,860
and now we're going to run a command, helm list.
190

190

00:09:50,860  -->  00:09:54,450
Going to filter on our PACKAGE, going to filter on DEPLOYED
191

191

00:09:54,450  -->  00:09:56,280
and we're going to count the lines.
192

192

00:09:56,280  -->  00:09:58,490
This is to check whether the package
193

193

00:09:58,490  -->  00:10:00,560
is already installed or not.
194

194

00:10:00,560  -->  00:10:02,126
Because if it's not installed,
195

195

00:10:02,126  -->  00:10:03,690
we're going to do helm install.
196

196

00:10:03,690  -->  00:10:07,100
If it is already installed, we're going to do helm upgrade.
197

197

00:10:07,100  -->  00:10:09,250
Let's say the first run is not going to be installed,
198

198

00:10:09,250  -->  00:10:14,250
we do helm install --name ${PACKAGE} my-charts/${PACKAGE}.
199

199

00:10:14,748  -->  00:10:15,990
If this is already installed, we do
200

200

00:10:15,990  -->  00:10:18,400
helm upgrade ${PACKAGE} my-charts/${PACKAGE}.
201

201

00:10:18,400  -->  00:10:21,004
This will either install it or upgrade it,
202

202

00:10:21,004  -->  00:10:23,010
and then it will echo deployed.
203

203

00:10:23,010  -->  00:10:24,760
So none of those commands are really new.
204

204

00:10:24,760  -->  00:10:26,570
I just put them in a script
205

205

00:10:26,570  -->  00:10:28,570
so that they can be executed in Jenkins.
206

206

00:10:29,540  -->  00:10:30,860
Going to the crowd.
207

207

00:10:30,860  -->  00:10:32,700
Going to copy-paste these again
208

208

00:10:34,440  -->  00:10:36,770
in these pipeline scripts.
209

209

00:10:36,770  -->  00:10:37,603
Going to save.
210

210

00:10:39,513  -->  00:10:40,923
Going to do Build Now.
211

211

00:10:41,880  -->  00:10:42,853
It's going to run.
212

212

00:10:46,640  -->  00:10:49,010
It was never deployed yet,
213

213

00:10:49,010  -->  00:10:50,393
so we did a helm install.
214

214

00:10:51,230  -->  00:10:53,053
So now our chart is installed.
215

215

00:10:54,380  -->  00:10:57,780
It will take some time before this chart is running,
216

216

00:10:57,780  -->  00:11:00,200
and then once it's running, we can actually
217

217

00:11:00,200  -->  00:11:02,310
make some changes to the chart.
218

218

00:11:02,310  -->  00:11:05,040
You might change a version, you might change a YML file.
219

219

00:11:05,040  -->  00:11:06,540
And then the typical workflow is that
220

220

00:11:06,540  -->  00:11:09,320
whenever you increment your version,
221

221

00:11:09,320  -->  00:11:13,940
you're going to re-run the demo-chart build
222

222

00:11:13,940  -->  00:11:15,800
which you can link to our git repository
223

223

00:11:15,800  -->  00:11:17,730
so every time you update your chart,
224

224

00:11:17,730  -->  00:11:20,170
then the demo-chart build will re-run again.
225

225

00:11:20,170  -->  00:11:22,890
It is something that you can do in Jenkins.
226

226

00:11:22,890  -->  00:11:25,400
And then you can choose to re-deploy your app.
227

227

00:11:25,400  -->  00:11:28,003
You can upgrade your app to a new version.
228

228

00:11:28,860  -->  00:11:31,323
So let's have a look whether our app is already running.
229

229

00:11:32,620  -->  00:11:36,150
Let's have a look at the service that has been created now.
230

230

00:11:36,150  -->  00:11:37,770
O wide.
231

231

00:11:37,770  -->  00:11:39,263
So here we the demo-chart,
232

232

00:11:40,160  -->  00:11:41,850
here we have the LoadBalancer.
233

233

00:11:41,850  -->  00:11:42,943
Let's curl this one.
234

234

00:11:44,020  -->  00:11:45,020
This one is working.
235

235

00:11:47,620  -->  00:11:49,363
So let's do an upgrade.
236

236

00:11:51,270  -->  00:11:52,920
Back to Jenkins.
237

237

00:11:52,920  -->  00:11:55,350
If you forked the repository, you could make a change
238

238

00:11:55,350  -->  00:11:57,930
in the demo-chart build.
239

239

00:11:57,930  -->  00:12:01,570
And then if you configure Jenkins here,
240

240

00:12:01,570  -->  00:12:04,820
you can also poll SCM, for example,
241

241

00:12:04,820  -->  00:12:06,833
to rebuild when you make changes.
242

242

00:12:08,340  -->  00:12:10,290
Let's assume that you make some changes
243

243

00:12:11,140  -->  00:12:14,210
and then you can re-deploy your application
244

244

00:12:14,210  -->  00:12:16,090
by doing Build Now,
245

245

00:12:16,090  -->  00:12:19,270
and the script will now see that you already have
246

246

00:12:19,270  -->  00:12:21,150
an installation running,
247

247

00:12:21,150  -->  00:12:24,260
so it will do an upgrade instead of an install.
248

248

00:12:24,260  -->  00:12:26,300
So, again, this Kubernetes plugin will make sure
249

249

00:12:26,300  -->  00:12:28,200
that this runs in a pod.
250

250

00:12:28,200  -->  00:12:31,340
In the pod it can communicate with Kubernetes.
251

251

00:12:31,340  -->  00:12:34,620
We are using a service account to get us admin privileges
252

252

00:12:34,620  -->  00:12:37,870
to deploy or upgrade on our cluster.
253

253

00:12:37,870  -->  00:12:40,070
And then here, let's have a look.
254

254

00:12:40,070  -->  00:12:43,700
DEPLOYED=1, helm upgrade demo-chart.
255

255

00:12:43,700  -->  00:12:46,510
So now we are upgrading our release
256

256

00:12:46,510  -->  00:12:48,830
based on my-charts demo-chart.
257

257

00:12:48,830  -->  00:12:52,390
So now there will be an upgrade that will run
258

258

00:12:52,390  -->  00:12:54,270
to upgrade our charts.
259

259

00:12:54,270  -->  00:12:58,780
So these two scripts you can use with Jenkins
260

260

00:12:58,780  -->  00:13:03,370
to build and deploy your application using helm
261

261

00:13:03,370  -->  00:13:04,930
on the Kubernetes.
262

262

00:13:04,930  -->  00:13:07,040
So now we have a full workflow,
263

263

00:13:07,040  -->  00:13:09,030
how you can write your own app,
264

264

00:13:09,030  -->  00:13:11,860
package it using dependencies,
265

265

00:13:11,860  -->  00:13:13,560
build it in Jenkins
266

266

00:13:13,560  -->  00:13:17,200
and then deploy to install or upgrade it
267

267

00:13:17,200  -->  00:13:19,033
on your Kubernetes cluster.
