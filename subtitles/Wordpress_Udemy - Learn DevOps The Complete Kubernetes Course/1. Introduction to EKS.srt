1
1

00:00:00,000  -->  00:00:02,000
<v Instructor>Let's talk about AWS EKS.</v>
2

2

00:00:04,531  -->  00:00:08,180
AWS EKS, the Amazon Elastic Kubernetes Service,
3

3

00:00:08,180  -->  00:00:11,083
is a fully managed Kubernetes service on Amazon.
4

4

00:00:12,220  -->  00:00:16,910
Unlike Kops, EKS will fully manage your master nodes,
5

5

00:00:16,910  -->  00:00:20,270
which includes that Kubernetes apiserver and etcd.
6

6

00:00:20,270  -->  00:00:22,680
So, it also manages the state of your cluster,
7

7

00:00:22,680  -->  00:00:24,503
by managing etcd for you.
8

8

00:00:25,620  -->  00:00:28,640
You pay a fee for every cluster that you spin up,
9

9

00:00:28,640  -->  00:00:31,350
to pay for the master nodes and then you pay
10

10

00:00:31,350  -->  00:00:34,343
per EC2 worker that you attach to you cluster.
11

11

00:00:35,660  -->  00:00:37,490
It is a great alternative for kops
12

12

00:00:37,490  -->  00:00:39,990
if you want to have a fully managed cluster
13

13

00:00:39,990  -->  00:00:42,403
and not deal with the master nodes yourself.
14

14

00:00:43,940  -->  00:00:46,000
Depending on your cluster setup,
15

15

00:00:46,000  -->  00:00:49,530
EKS might be more expensive than running a kops cluster,
16

16

00:00:49,530  -->  00:00:52,853
so you might still opt to use Kops for cost reasons.
17

17

00:00:54,710  -->  00:00:56,760
EKS is a popular AWS service
18

18

00:00:56,760  -->  00:00:59,777
and supports lots of handy features.
19

19

00:00:59,777  -->  00:01:03,380
AWS created its own VPC CNI,
20

20

00:01:03,380  -->  00:01:06,850
Container networking interface, for EKS, which means
21

21

00:01:06,850  -->  00:01:10,903
that you get VPC-writable addresses within your cluster.
22

22

00:01:12,302  -->  00:01:15,390
AWS can even manage you workers to ensure
23

23

00:01:15,390  -->  00:01:17,423
updates are applied to your workers.
24

24

00:01:19,050  -->  00:01:22,740
So, if you don't want to manage the AMIs, yourself,
25

25

00:01:22,740  -->  00:01:27,740
of your workers, then you can use managed node groups in AWS
26

26

00:01:28,060  -->  00:01:30,460
and that AWS will role out the updates
27

27

00:01:30,460  -->  00:01:31,993
on your workers for you.
28

28

00:01:33,450  -->  00:01:36,840
Cluster authentication is using IAM, so you don't need
29

29

00:01:36,840  -->  00:01:39,680
to setup your own users within the cluster,
30

30

00:01:39,680  -->  00:01:43,540
this can be done using IAM users and roles.
31

31

00:01:43,540  -->  00:01:46,360
So, there's an major benefit that you don't have to work
32

32

00:01:46,360  -->  00:01:50,320
with the certificates and the API server, yourself.
33

33

00:01:50,320  -->  00:01:53,640
It is completely integrated with IAM.
34

34

00:01:53,640  -->  00:01:56,440
So, you can create IAM users or roles
35

35

00:01:56,440  -->  00:01:59,513
and the use those to log into your cluster.
36

36

00:02:01,320  -->  00:02:04,960
Kubernetes Service Accounts can be tied to IAM roles,
37

37

00:02:04,960  -->  00:02:07,500
to use IAM roles on an pod-level.
38

38

00:02:07,500  -->  00:02:10,870
So, you can have permissions on a pod-level
39

39

00:02:10,870  -->  00:02:14,793
by using IAM roles on the Service Accounts,
40

40

00:02:15,920  -->  00:02:18,850
and it also integrates with many other AWS services,
41

41

00:02:18,850  -->  00:02:21,403
like CloudWatch for logging and other ones.
42

42

00:02:22,950  -->  00:02:26,160
There is a command line tool, eksctl, available
43

43

00:02:26,160  -->  00:02:30,750
to manage eks clusters, which I'll use in the demos.
44

44

00:02:30,750  -->  00:02:34,370
You can find the documentation at eksctl.io,
45

45

00:02:34,370  -->  00:02:36,973
where you will also find the download instructions.
46

46

00:02:38,090  -->  00:02:39,360
You can use command line arguments
47

47

00:02:39,360  -->  00:02:42,340
to quickly setup a cluster and you can also
48

48

00:02:42,340  -->  00:02:44,460
pass a yaml based configuration file,
49

49

00:02:44,460  -->  00:02:48,440
if you want to set your own configuration, like VPC subnets,
50

50

00:02:48,440  -->  00:02:51,913
otherwise it'll create the VPC and subnets for you.
51

51

00:02:53,090  -->  00:02:55,620
So, easiest way to get started, is,
52

52

00:02:55,620  -->  00:02:58,600
that it creates the VPC subnets for you, but then, later on,
53

53

00:02:58,600  -->  00:03:00,710
when you want to use your eks cluster
54

54

00:03:00,710  -->  00:03:02,350
within an existing setup,
55

55

00:03:02,350  -->  00:03:05,720
then you probably have to use this yaml configuration
56

56

00:03:05,720  -->  00:03:09,140
to specify the VPC subnets to have this cluster
57

57

00:03:09,140  -->  00:03:11,603
running in your existing infrastructure.
58

58

00:03:12,700  -->  00:03:15,030
So, in the next demo, I'm going to use this tool
59

59

00:03:15,030  -->  00:03:18,443
to set up a Kubernetes cluster, using EKS.
