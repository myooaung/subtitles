WEBVTT
1
1

00:00:00.170  -->  00:00:01.630
<v Edward>In this demo, I will show you</v>
2

2

00:00:01.630  -->  00:00:04.103
how to work with pod presets.
3

3

00:00:05.590  -->  00:00:07.660
First, I need to launch my cluster
4

4

00:00:07.660  -->  00:00:10.009
with some extra arguments, because these
5

5

00:00:10.009  -->  00:00:12.103
pod presets are still the alpha.
6

6

00:00:14.450  -->  00:00:17.093
I'm running 1.10.0-beta.1.
7

7

00:00:18.000  -->  00:00:19.760
It's the latest version available,
8

8

00:00:19.760  -->  00:00:22.850
not even the stale version and pod presets
9

9

00:00:22.850  -->  00:00:24.850
are still alpha in this one.
10

10

00:00:24.850  -->  00:00:26.470
It might take a few more versions
11

11

00:00:26.470  -->  00:00:29.633
before they will come out of alpha status.
12

12

00:00:30.800  -->  00:00:34.050
So, I have directory here, pod-presets
13

13

00:00:35.160  -->  00:00:37.653
and first I'm going to create the cluster again.
14

14

00:00:38.490  -->  00:00:40.590
I'm gonna create cluster with node contour
15

15

00:00:43.600  -->  00:00:46.570
and then the cluster configuration has been created
16

16

00:00:46.570  -->  00:00:50.040
and to edit this cluster we can use kops edit cluster.
17

17

00:00:50.040  -->  00:00:52.050
That's what we need, because if we have look
18

18

00:00:52.050  -->  00:00:54.670
at the README in the PodPresets,
19

19

00:00:54.670  -->  00:00:57.470
we need to add this specification for the kubeAPIServer,
20

20

00:00:58.480  -->  00:01:03.410
to enable the pod preset in the enableAdmissionPlugins,
21

21

00:01:03.410  -->  00:01:06.360
and to enable the alpha feature.
22

22

00:01:06.360  -->  00:01:11.200
So, let's do kops edit cluster
23

23

00:01:12.180  -->  00:01:17.150
is at the state and then we need to add this specifications.
24

24

00:01:17.150  -->  00:01:18.273
So let's copy this.
25

25

00:01:19.994  -->  00:01:22.480
Let's have a look if it already exists.
26

26

00:01:22.480  -->  00:01:25.690
This kubeAPI, it doesn't exist yet,
27

27

00:01:25.690  -->  00:01:27.440
so we'll just add it at the bottom.
28

28

00:01:29.120  -->  00:01:32.360
This spec, I don't need, because this comes from,
29

29

00:01:32.360  -->  00:01:34.400
because this is already set here.
30

30

00:01:34.400  -->  00:01:38.070
Then make sure that the indentation is correct,
31

31

00:01:38.070  -->  00:01:42.380
so it's here two spaces and it's here two spaces.
32

32

00:01:42.380  -->  00:01:45.940
kubeAPIServer, enableAdmissionPlugins,
33

33

00:01:45.940  -->  00:01:50.420
we have the PodPreset here, and we have the runtimeConfig.
34

34

00:01:50.420  -->  00:01:55.100
Settings, settings for this API
35

35

00:01:55.100  -->  00:01:57.773
v1alpha1 is going to be enabled.
36

36

00:01:58.930  -->  00:02:02.620
Going to save this and then we can start a cluster,
37

37

00:02:02.620  -->  00:02:07.070
using kops update cluster --yes
38

38

00:02:07.070  -->  00:02:08.703
and, again, the state.
39

39

00:02:10.600  -->  00:02:12.680
After it's set up, we have to wait five
40

40

00:02:12.680  -->  00:02:15.033
to 10 minutes before the DNS updates.
41

41

00:02:17.690  -->  00:02:19.853
Let's check whether the cluster is up now.
42

42

00:02:22.270  -->  00:02:24.153
And, okay, the cluster isn't running.
43

43

00:02:26.710  -->  00:02:29.460
Let's have a look at this pod-presets.ymal
44

44

00:02:29.460  -->  00:02:30.883
and the deployments.yaml.
45

45

00:02:32.420  -->  00:02:35.820
Pod-presets.yaml, so this is off.
46

46

00:02:35.820  -->  00:02:38.813
kind: PodPreset, using this apiVersion.
47

47

00:02:39.830  -->  00:02:43.350
So, it's very similar as what I showed you in the theory.
48

48

00:02:43.350  -->  00:02:45.780
I have a selector, I'm going to match app
49

49

00:02:45.780  -->  00:02:48.980
equals myapp in the labels and I'm going to make sure
50

50

00:02:48.980  -->  00:02:52.750
that the pods that match will get an environment variable
51

51

00:02:52.750  -->  00:02:55.803
of volumeMounts and a volume defined in the pod.
52

52

00:02:57.860  -->  00:03:01.440
I then have deployments, I have two deployments
53

53

00:03:01.440  -->  00:03:03.760
and they are just regular deployments
54

54

00:03:03.760  -->  00:03:06.680
with the label app: myapp, but they don't
55

55

00:03:06.680  -->  00:03:10.670
have any environment, they don't have any volume defined.
56

56

00:03:10.670  -->  00:03:13.230
That will be the pod preset that's going to inject
57

57

00:03:13.230  -->  00:03:15.923
that into these two deployments.
58

58

00:03:17.620  -->  00:03:20.453
Let's create this pod-preset.
59

59

00:03:22.220  -->  00:03:24.407
If we do kubectl get podpresets
60

60

00:03:25.920  -->  00:03:28.440
then we see now we have our pod-preset
61

61

00:03:28.440  -->  00:03:30.110
created in kubernetes.
62

62

00:03:30.110  -->  00:03:35.110
Now, whenever we create a deployment using label app: myapp,
63

63

00:03:37.660  -->  00:03:40.493
then you will see these resources injected in the pods.
64

64

00:03:41.705  -->  00:03:43.205
Let's have a look at the pods.
65

65

00:03:44.100  -->  00:03:47.203
Three pods per deployment, let's have a look.
66

66

00:03:48.280  -->  00:03:53.280
kubectl describe pod and name of the pod,
67

67

00:03:55.220  -->  00:03:56.853
our pipe is true less.
68

68

00:03:59.530  -->  00:04:01.593
And let's have a look at this.
69

69

00:04:03.057  -->  00:04:06.730
ContainerCreating still, but as you can see
70

70

00:04:06.730  -->  00:04:11.730
we have the Environment: MY_SECRET: 123456,
71

71

00:04:11.790  -->  00:04:15.910
so it injected our secret and it also
72

72

00:04:15.910  -->  00:04:20.430
created our Mount /share from share-volume
73

73

00:04:20.430  -->  00:04:24.270
and share-volume is defined in the pod.
74

74

00:04:24.270  -->  00:04:27.050
We have a share-volume of Type: EmptyDir.
75

75

00:04:27.050  -->  00:04:30.436
So, this injection worked and if you were to check
76

76

00:04:30.436  -->  00:04:34.660
other pods, then you should all see the same.
77

77

00:04:34.660  -->  00:04:36.710
Let's have a look at one of deployment 2.
78

78

00:04:38.440  -->  00:04:41.677
And here, as well, Environment: MY_SECRET,
79

79

00:04:41.677  -->  00:04:44.860
the Mount, and the share-volume.
80

80

00:04:44.860  -->  00:04:49.860
So, this is an easy way to inject resources
81

81

00:04:50.000  -->  00:04:52.710
to multiple pods that share the same
82

82

00:04:52.710  -->  00:04:56.140
set of config, or the same volumes,
83

83

00:04:56.140  -->  00:04:58.328
or the same environment variables.
84

84

00:04:58.328  -->  00:05:01.823
As long as no conflict, your presets will be injected.
85

85

00:05:02.740  -->  00:05:03.940
That's it for this demo.
86

86

00:05:03.940  -->  00:05:05.760
You can try it out yourself.
87

87

00:05:05.760  -->  00:05:08.860
Just keep in mind that this is still an alpha feature,
88

88

00:05:08.860  -->  00:05:12.580
so it's best to wait until this goes to beta or stable,
89

89

00:05:12.580  -->  00:05:14.990
until it uses the production cluster.
90

90

00:05:14.990  -->  00:05:16.370
I would say you can always test it,
91

91

00:05:16.370  -->  00:05:17.750
but then make sure that you have a much more
92

92

00:05:17.750  -->  00:05:20.690
recent version of the cluster, as I have.
93

93

00:05:20.690  -->  00:05:22.880
Right now, this is the latest version,
94

94

00:05:22.880  -->  00:05:25.130
but in a couple of months there will be new versions.
95

95

00:05:25.130  -->  00:05:27.280
At some point it will definitely be stable.
