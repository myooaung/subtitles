1
00:00:00,620 --> 00:00:06,600
In this lecture, I'll be talking about Volume Provisioning. The Kubernetes plugins have the capability

2
00:00:06,750 --> 00:00:14,140
to provision storage for you. The AWS plugin can for instance provision storage for you by creating

3
00:00:14,140 --> 00:00:21,080
the volumes in AWS before attaching them to a node, instead of you entering the command to create a

4
00:00:21,080 --> 00:00:25,310
new volume, Kubernetes will make the API calls to do that for you.

5
00:00:26,460 --> 00:00:30,030
This is done using the StorageClass object.

6
00:00:30,120 --> 00:00:35,140
This was still beta, when writing this course, but it will be stable soon.

7
00:00:35,170 --> 00:00:38,460
It's best to double check the correct definitions in the documentation.

8
00:00:38,460 --> 00:00:40,970
Every time you see beta you might want to check that.

9
00:00:40,970 --> 00:00:45,940
So, here's a link that goes to the definitions of the persistent volumes.

10
00:00:46,050 --> 00:00:52,910
I'll also keep my GitHub repository up to date with the latest definitions.

11
00:00:53,000 --> 00:00:53,690
To use the auto provisioned volumes,

12
00:00:53,690 --> 00:00:56,320
you can create the following YAML file.

13
00:00:56,840 --> 00:00:58,130
It's very simple,

14
00:00:58,190 --> 00:01:00,170
The kind is storage class.

15
00:01:00,170 --> 00:01:05,530
The API version refers to a beta, the name that I gave to my storage class "standard",

16
00:01:05,550 --> 00:01:07,920
but you can use any name.

17
00:01:07,920 --> 00:01:14,160
The provision is going to be "aws-ebs", so we're going to provision ebs volumes for us.

18
00:01:14,270 --> 00:01:18,770
Then we have EBS specific parameters like type and zone.

19
00:01:18,780 --> 00:01:19,710
Type is "gp2".

20
00:01:19,800 --> 00:01:22,510
The zone is "us-east-1".

21
00:01:22,650 --> 00:01:29,980
This will allow you to create a volume claims using the "aws-ebs" provisioner.

22
00:01:29,990 --> 00:01:34,170
Kubernetes will provide volumes of the "gp2" type for you, 

23
00:01:34,300 --> 00:01:35,260
which means general purpose, it is SSD.

24
00:01:35,280 --> 00:01:44,020
You also have provisioned SSD and magnetic. Next you can create a volume claim and specify the size of the

25
00:01:44,020 --> 00:01:45,680
volume that you want.

26
00:01:45,680 --> 00:01:51,900
So, here's my volume claim ".yml", it is of "kind: PersistentVolumeClaim".

27
00:01:51,900 --> 00:01:56,850
API version here is "v1", because volume claims are part of the stable API.

28
00:01:57,250 --> 00:01:58,770
I give the name.

29
00:01:58,860 --> 00:02:06,240
The annotation, this is refers to the standard storage class that I created earlier.

30
00:02:06,330 --> 00:02:07,460
And, in the specifications it is "ReadWriteOnce"

31
00:02:07,530 --> 00:02:12,410
I can only have one EBS volume that I can read and write to at the same time.

32
00:02:13,290 --> 00:02:18,420
The request is going to be for 8 gigabytes.

33
00:02:18,550 --> 00:02:22,720
Finally, you can then launch a pod using this volume.

34
00:02:22,760 --> 00:02:30,690
So, here we have again the "volumeMounts", "mountPath", a "name". 

35
00:02:30,860 --> 00:02:35,600
This example is a nginx example, if you wanted to run nginx  with some static data, 

36
00:02:35,830 --> 00:02:42,880
then you use the nginx image, then you are going to use a "mountPath",

37
00:02:42,880 --> 00:02:50,120
that is going to provide the volume for "/var/www/html"

38
00:02:50,120 --> 00:02:58,040
The name of the volume is "mypd". Volumes, here is the name also "mypd" and then this persistent volume claim refers to my claim,

39
00:02:58,490 --> 00:03:02,250
which is the name of the persistent volume claim from the previous slide.

40
00:03:02,330 --> 00:03:08,150
You can then put some static data in this volume and 

41
00:03:08,150 --> 00:03:09,240
then when you browse this URL, you will see your data.

42
00:03:09,440 --> 00:03:11,290
It's very simple.

43
00:03:11,370 --> 00:03:15,420
The next lecture will be a demo where I will demonstrate this auto provisioning.
