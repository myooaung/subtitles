WEBVTT
1
1

00:00:00.463  -->  00:00:02.037
<v ->In this demo, I will activate</v>
2

2

00:00:02.037  -->  00:00:05.120
Mutual TLS on our Kubernetes Cluster.
3

3

00:00:06.495  -->  00:00:08.988
These are all the proxies I am going to run.
4

4

00:00:08.988  -->  00:00:11.784
Namespace 1 and Namespace 2 will be ESTL enabled
5

5

00:00:11.784  -->  00:00:15.943
and the legacy namespace will not be ESTL enabled.
6

6

00:00:15.943  -->  00:00:17.777
So, lets get started.
7

7

00:00:17.777  -->  00:00:20.405
I am in my ESTL directory.
8

8

00:00:20.405  -->  00:00:23.922
And the first hello world that I have created
9

9

00:00:23.922  -->  00:00:26.172
is the helloworld-tls.yaml,
10

10

00:00:27.107  -->  00:00:30.250
and this is going to be the ESTL enabled deployments.
11

11

00:00:30.250  -->  00:00:32.574
So, I'm going to create two namespaces,
12

12

00:00:32.574  -->  00:00:35.413
namespace NS1 and namespace NS2.
13

13

00:00:35.413  -->  00:00:37.821
I will have deployments.
14

14

00:00:37.821  -->  00:00:41.134
I will have a hello deployment
15

15

00:00:41.134  -->  00:00:43.039
that shows you the text 'hello'
16

16

00:00:43.039  -->  00:00:47.182
and it will then go to world Namespace 2
17

17

00:00:47.182  -->  00:00:48.599
to get the world.
18

18

00:00:50.444  -->  00:00:52.715
All the other deployments are very similar.
19

19

00:00:52.715  -->  00:00:55.437
You can have a look at it yourself,
20

20

00:00:55.437  -->  00:00:59.143
but they match exactly the diagram I just showed you.
21

21

00:00:59.143  -->  00:01:00.675
We also have the services,
22

22

00:01:00.675  -->  00:01:03.368
the services for the hello and world,
23

23

00:01:03.368  -->  00:01:06.957
and for the world and the end-reverse.
24

24

00:01:06.957  -->  00:01:10.174
So if I go back to the diagram,
25

25

00:01:10.174  -->  00:01:11.947
I'm gonna talk about the first row,
26

26

00:01:11.947  -->  00:01:13.532
it's a hello-world.
27

27

00:01:13.532  -->  00:01:14.880
I'm gonna talk about the second row,
28

28

00:01:14.880  -->  00:01:16.810
I'll be talking about the reverse.
29

29

00:01:16.810  -->  00:01:18.033
So we have a hello-reverse,
30

30

00:01:18.033  -->  00:01:20.810
world-reverse and end-reverse
31

31

00:01:20.810  -->  00:01:23.412
for the three exclamation marks.
32

32

00:01:23.412  -->  00:01:24.720
So these are the services for
33

33

00:01:24.720  -->  00:01:28.381
the world-reverse and end-reverse.
34

34

00:01:28.381  -->  00:01:30.120
And here we have then the services
35

35

00:01:30.120  -->  00:01:31.598
for the hello and then the world.
36

36

00:01:31.598  -->  00:01:35.467
So those are four services for the four deployments
37

37

00:01:35.467  -->  00:01:37.594
in Namespace one and two.
38

38

00:01:37.594  -->  00:01:42.422
And then I have the other two in a separate file.
39

39

00:01:42.422  -->  00:01:44.669
I'm going to create a gateway
40

40

00:01:44.669  -->  00:01:46.919
so we need to helloworld-gateway,
41

41

00:01:46.919  -->  00:01:50.002
this is the same as the previous one.
42

42

00:01:50.893  -->  00:01:53.215
Then we have two destination rules,
43

43

00:01:53.215  -->  00:01:54.632
one for hello NS1
44

44

00:01:56.132  -->  00:01:57.788
service cluster local
45

45

00:01:57.788  -->  00:02:00.974
and one for hello-reverse legacy
46

46

00:02:00.974  -->  00:02:02.571
service cluster local.
47

47

00:02:02.571  -->  00:02:04.246
So this is the hello-reverse
48

48

00:02:04.246  -->  00:02:06.371
for the legacy cluster.
49

49

00:02:06.371  -->  00:02:10.092
I currently have mutual TLS disabled,
50

50

00:02:10.092  -->  00:02:12.009
I'll enable this later.
51

51

00:02:13.394  -->  00:02:16.803
We are basically going to define a V1 TLS subset
52

52

00:02:16.803  -->  00:02:20.273
that we then going to use in the virtual service.
53

53

00:02:20.273  -->  00:02:21.924
So we're going to have again,
54

54

00:02:21.924  -->  00:02:23.183
two virtual services,
55

55

00:02:23.183  -->  00:02:24.962
one for the hello TLS
56

56

00:02:24.962  -->  00:02:27.615
and one for the hello TLS reverse.
57

57

00:02:27.615  -->  00:02:31.448
And these will go to the correct destinations.
58

58

00:02:34.505  -->  00:02:36.509
So this one will go to the hello host,
59

59

00:02:36.509  -->  00:02:38.515
and this to the hello reverse.
60

60

00:02:38.515  -->  00:02:40.301
So this one is in NS1
61

61

00:02:40.301  -->  00:02:42.615
and this one is in the legacy one.
62

62

00:02:42.615  -->  00:02:44.263
So the hello in this case
63

63

00:02:44.263  -->  00:02:45.491
is ESTL enabled
64

64

00:02:45.491  -->  00:02:47.982
and the hello reverse is not ESTL enabled,
65

65

00:02:47.982  -->  00:02:51.627
but will contact ESTL enabled hosts
66

66

00:02:51.627  -->  00:02:54.178
in the other two namespaces.
67

67

00:02:54.178  -->  00:02:58.153
Now we're gonna have hello-world TLS legacy
68

68

00:02:58.153  -->  00:03:02.016
and here I define the legacy deployments.
69

69

00:03:02.016  -->  00:03:03.857
So this is the end TLS
70

70

00:03:03.857  -->  00:03:06.119
and the hello-reverse TLS,
71

71

00:03:06.119  -->  00:03:07.514
those are the two deployments
72

72

00:03:07.514  -->  00:03:10.344
in the legacy namespace here on the right.
73

73

00:03:10.344  -->  00:03:13.677
And both of them, again, have a service.
74

74

00:03:15.179  -->  00:03:17.012
So let me apply those.
75

75

00:03:18.320  -->  00:03:20.497
You can find these commands in the ReadMe,
76

76

00:03:20.497  -->  00:03:22.260
kubectl apply,
77

77

00:03:22.260  -->  00:03:24.236
and then we go to use Istio ESTL
78

78

00:03:24.236  -->  00:03:28.069
under a kube-inject of the helloworld tls.yaml
79

79

00:03:30.659  -->  00:03:35.230
You'll do the same for helloworld TLS legacy,
80

80

00:03:35.230  -->  00:03:38.288
but we're not going to use Istio ESTL
81

81

00:03:38.288  -->  00:03:39.991
because this is a legacy application,
82

82

00:03:39.991  -->  00:03:41.824
it is not using Istio.
83

83

00:03:43.572  -->  00:03:46.218
I also removed all the other pods,
84

84

00:03:46.218  -->  00:03:49.026
so I don't have any other demos running anymore.
85

85

00:03:49.026  -->  00:03:50.606
Just for simplicity,
86

86

00:03:50.606  -->  00:03:53.092
otherwise they might conflict with each other.
87

87

00:03:53.092  -->  00:03:55.168
So you might want to use kubectl delete
88

88

00:03:55.168  -->  00:03:57.335
to remove any older demos.
89

89

00:03:59.264  -->  00:04:00.797
Once this is created,
90

90

00:04:00.797  -->  00:04:03.502
you should be able to contact our service.
91

91

00:04:03.502  -->  00:04:05.752
Use kubectl get svc -o wide
92

92

00:04:07.541  -->  00:04:09.458
namespace Istio system.
93

93

00:04:11.095  -->  00:04:14.095
This will give us the load balancer.
94

94

00:04:16.707  -->  00:04:19.178
And I'm going to use curl
95

95

00:04:19.178  -->  00:04:21.413
to access our load balancer,
96

96

00:04:21.413  -->  00:04:26.413
and the host name I'm going to use is hello TLS example.
97

97

00:04:26.541  -->  00:04:30.332
So this gives hello world three exclamation marks,
98

98

00:04:30.332  -->  00:04:31.847
so the hello comes from namespace one,
99

99

00:04:31.847  -->  00:04:33.362
the world from namespace two
100

100

00:04:33.362  -->  00:04:36.621
and the three exclamation marks from the legacy namespace.
101

101

00:04:36.621  -->  00:04:41.341
So these two services are ESTL enabled and this one not.
102

102

00:04:41.341  -->  00:04:45.070
Then we also have the hello TLS reverse example,
103

103

00:04:45.070  -->  00:04:47.956
and this is the reverse example.
104

104

00:04:47.956  -->  00:04:49.479
Hello comes from the legacy,
105

105

00:04:49.479  -->  00:04:51.609
world from namespace two,
106

106

00:04:51.609  -->  00:04:54.508
and the three exclamation marks from namespace one.
107

107

00:04:54.508  -->  00:04:56.841
Let's now enable mutual TLS.
108

108

00:04:57.973  -->  00:04:59.890
Hello world TLS enable.
109

109

00:05:01.635  -->  00:05:04.416
I'm going to enable authentication,
110

110

00:05:04.416  -->  00:05:05.991
kind MeshPolicy,
111

111

00:05:05.991  -->  00:05:08.074
I'm going to enable MTLS.
112

112

00:05:09.348  -->  00:05:11.701
When I enable MTLS, I also need
113

113

00:05:11.701  -->  00:05:14.479
to create a destination rule
114

114

00:05:14.479  -->  00:05:17.071
with the name enable MTLS,
115

115

00:05:17.071  -->  00:05:18.583
namespace: default,
116

116

00:05:18.583  -->  00:05:20.117
even though we specify a namespace,
117

117

00:05:20.117  -->  00:05:22.433
this rule applies to all namespaces.
118

118

00:05:22.433  -->  00:05:26.023
This destination rule is going to apply to all namespaces.
119

119

00:05:26.023  -->  00:05:28.658
If the host is *.local
120

120

00:05:28.658  -->  00:05:31.519
then it's going to activate mutual TLS.
121

121

00:05:31.519  -->  00:05:32.928
So, this is a policy,
122

122

00:05:32.928  -->  00:05:36.995
it enforces that communication is using mutual TLS.
123

123

00:05:36.995  -->  00:05:40.121
So, if something is not using mutual TLS,
124

124

00:05:40.121  -->  00:05:42.071
then it will not work.
125

125

00:05:42.071  -->  00:05:44.477
This destination rule ensures
126

126

00:05:44.477  -->  00:05:47.526
that the mutual TLS configuration is pushed to the sidecars.
127

127

00:05:47.526  -->  00:05:49.618
So we need both.
128

128

00:05:49.618  -->  00:05:53.552
The kube API server is not using Istio,
129

129

00:05:53.552  -->  00:05:55.653
it's not using mutual TLS,
130

130

00:05:55.653  -->  00:05:59.023
so here we say that we disable TLS.
131

131

00:05:59.023  -->  00:06:00.631
We're also going to create a destination rule
132

132

00:06:00.631  -->  00:06:02.214
for our legacy app.
133

133

00:06:03.292  -->  00:06:04.867
So we're going to say, if the host
134

134

00:06:04.867  -->  00:06:07.622
is end legacy svc cluster.local,
135

135

00:06:07.622  -->  00:06:09.728
which is our three exclamation marks,
136

136

00:06:09.728  -->  00:06:12.771
then we're also going to disable TLS.
137

137

00:06:12.771  -->  00:06:14.455
So from within an Istio cluster,
138

138

00:06:14.455  -->  00:06:18.687
we can still access non usable TLS services,
139

139

00:06:18.687  -->  00:06:21.056
but it will not be possible the other way around.
140

140

00:06:21.056  -->  00:06:23.183
And I will show you that in a minute.
141

141

00:06:23.183  -->  00:06:24.016
So, let's
142

142

00:06:24.016  -->  00:06:25.397
(keyboard typing)
143

143

00:06:25.397  -->  00:06:26.230
kubectl,
144

144

00:06:27.251  -->  00:06:30.418
apply this hello world TLS enable.yaml
145

145

00:06:33.724  -->  00:06:36.119
So now we enabled the policy,
146

146

00:06:36.119  -->  00:06:40.294
we also said that if we are contacting start up local,
147

147

00:06:40.294  -->  00:06:43.544
then it should have mutual TLS enabled.
148

148

00:06:44.552  -->  00:06:46.269
What I didn't do yet,
149

149

00:06:46.269  -->  00:06:48.686
is I didn't enable mutual TLS
150

150

00:06:49.841  -->  00:06:53.222
right here in our destination rules,
151

151

00:06:53.222  -->  00:06:58.055
that are responsible to respond to the Ingress controller.
152

152

00:06:59.378  -->  00:07:01.615
So this is our Ingress configuration.
153

153

00:07:01.615  -->  00:07:06.045
So if you don't specify traffic policy Istio mutual here,
154

154

00:07:06.045  -->  00:07:08.857
then the communication between the services
155

155

00:07:08.857  -->  00:07:11.802
will still work, but not if you come from the Ingress.
156

156

00:07:11.802  -->  00:07:13.355
So to show you that,
157

157

00:07:13.355  -->  00:07:14.855
I will first go to
158

158

00:07:17.003  -->  00:07:18.920
our Ingress controller.
159

159

00:07:19.776  -->  00:07:21.976
So this is the curl,
160

160

00:07:21.976  -->  00:07:25.263
and we get an upstream connect error.
161

161

00:07:25.263  -->  00:07:28.728
So we were not able to reach our hello service
162

162

00:07:28.728  -->  00:07:31.311
and if I use hello TLS reverse,
163

163

00:07:32.569  -->  00:07:36.650
then we were able to reach our first one,
164

164

00:07:36.650  -->  00:07:38.998
but not the next one.
165

165

00:07:38.998  -->  00:07:42.172
So it couldn't connect to world reverse NS2,
166

166

00:07:42.172  -->  00:07:44.430
because we haven't enabled TLS yet
167

167

00:07:44.430  -->  00:07:46.071
on those destination rules,
168

168

00:07:46.071  -->  00:07:47.691
so let's try that now.
169

169

00:07:47.691  -->  00:07:49.695
So I'm going to edit this file,
170

170

00:07:49.695  -->  00:07:51.291
hello world tls.yaml
171

171

00:07:51.291  -->  00:07:54.393
(typing on keyboard)
172

172

00:07:54.393  -->  00:07:56.113
I'm going to uncomment this
173

173

00:07:56.113  -->  00:07:59.768
(keyboard typing)
174

174

00:07:59.768  -->  00:08:01.987
and what's gonna happen now is that
175

175

00:08:01.987  -->  00:08:04.683
this will work, because
176

176

00:08:04.683  -->  00:08:06.399
this is Istio enabled,
177

177

00:08:06.399  -->  00:08:09.177
but unfortunately, this destination rule
178

178

00:08:09.177  -->  00:08:11.742
if you go into enable Istio mutual
179

179

00:08:11.742  -->  00:08:13.671
on our legacy namespace,
180

180

00:08:13.671  -->  00:08:17.257
that has ports that are not deployed with sidecars,
181

181

00:08:17.257  -->  00:08:19.161
this will not work.
182

182

00:08:19.161  -->  00:08:21.553
Because obviously those don't support mutual TLS
183

183

00:08:21.553  -->  00:08:23.515
because they don't deploy with Istio.
184

184

00:08:23.515  -->  00:08:26.305
So, that's one of the downsides if you enable mutual TLS
185

185

00:08:26.305  -->  00:08:28.577
and you still have legacy deployments,
186

186

00:08:28.577  -->  00:08:30.533
that will not work anymore.
187

187

00:08:30.533  -->  00:08:32.989
Unless you disable TLS, of course.
188

188

00:08:32.989  -->  00:08:33.989
So, let's do
189

189

00:08:35.670  -->  00:08:36.920
an apply again,
190

190

00:08:39.767  -->  00:08:43.054
and this will then have this new destination rule.
191

191

00:08:43.054  -->  00:08:45.764
And then we should be able to
192

192

00:08:45.764  -->  00:08:48.431
use curl on our hello TLS again.
193

193

00:08:50.473  -->  00:08:52.859
And now we have hello world again.
194

194

00:08:52.859  -->  00:08:54.530
But now, if you do
195

195

00:08:54.530  -->  00:08:58.530
hello TLS reverse, then we cannot connect to it,
196

196

00:08:59.394  -->  00:09:02.061
because if you enable mutual TLS
197

197

00:09:03.508  -->  00:09:05.236
on all our endpoints,
198

198

00:09:05.236  -->  00:09:08.913
then the legacy namespace will not work.
199

199

00:09:08.913  -->  00:09:10.229
Although, that the other way works
200

200

00:09:10.229  -->  00:09:11.915
because we have hello world
201

201

00:09:11.915  -->  00:09:14.861
then this comes from legacy port.
202

202

00:09:14.861  -->  00:09:17.065
So, if you enable TLS everywhere,
203

203

00:09:17.065  -->  00:09:19.993
and we include an exception
204

204

00:09:19.993  -->  00:09:22.094
on one service that is running the legacy,
205

205

00:09:22.094  -->  00:09:23.344
that will work.
206

206

00:09:25.305  -->  00:09:26.555
So let's remove
207

207

00:09:27.512  -->  00:09:30.921
(keyboard typing)
208

208

00:09:30.921  -->  00:09:32.814
this mutual TLS
209

209

00:09:32.814  -->  00:09:36.003
(keyboard typing)
210

210

00:09:36.003  -->  00:09:38.420
so we can contact this again.
211

211

00:09:42.757  -->  00:09:45.507
So we have hello TLS, this works,
212

212

00:09:46.872  -->  00:09:48.748
didn't change anything,
213

213

00:09:48.748  -->  00:09:49.748
and reverse,
214

214

00:09:51.245  -->  00:09:54.986
we can now contact our hello on our legacy namespace.
215

215

00:09:54.986  -->  00:09:56.938
But yet, once we are in our legacy namespace,
216

216

00:09:56.938  -->  00:10:00.180
we can still not contact anything that is
217

217

00:10:00.180  -->  00:10:04.112
in a namespace where we have mutual TLS enabled.
218

218

00:10:04.112  -->  00:10:06.486
So this is the first port,
219

219

00:10:06.486  -->  00:10:07.733
the hello port,
220

220

00:10:07.733  -->  00:10:09.362
in our legacy namespace replying that it couldn't
221

221

00:10:09.362  -->  00:10:12.445
connect to world reverse NS2 on 8080.
222

222

00:10:13.623  -->  00:10:17.825
So whereas you can say that we don't want TLS
223

223

00:10:17.825  -->  00:10:18.960
for this one service,
224

224

00:10:18.960  -->  00:10:22.388
if it still communicates with mutual TLS enabled services,
225

225

00:10:22.388  -->  00:10:23.977
it will not work.
226

226

00:10:23.977  -->  00:10:26.766
Whereas communication outside still works
227

227

00:10:26.766  -->  00:10:29.266
with our hello TLS example.com
228

228

00:10:30.595  -->  00:10:33.215
So this is how you enable mutual TLS,
229

229

00:10:33.215  -->  00:10:35.545
we now have mutual TLS enabled
230

230

00:10:35.545  -->  00:10:37.212
on our namespace one
231

231

00:10:38.539  -->  00:10:40.112
and namespace two ports,
232

232

00:10:40.112  -->  00:10:41.964
not in our legacy ports.
233

233

00:10:41.964  -->  00:10:44.807
We can still communicate from namespace one
234

234

00:10:44.807  -->  00:10:45.926
to namespace two
235

235

00:10:45.926  -->  00:10:47.669
and from namespace two to legacy,
236

236

00:10:47.669  -->  00:10:49.628
but we cannot communicate from legacy
237

237

00:10:49.628  -->  00:10:51.957
into our namespace one and two.
238

238

00:10:51.957  -->  00:10:53.029
And this makes sense,
239

239

00:10:53.029  -->  00:10:56.424
because we cannot identify this hello app
240

240

00:10:56.424  -->  00:10:58.065
because it's not using Istio,
241

241

00:10:58.065  -->  00:11:00.277
this doesn't have a certificate, so we cannot trust it,
242

242

00:11:00.277  -->  00:11:04.342
and we're not letting it into our secured service mesh.
243

243

00:11:04.342  -->  00:11:05.933
So, this is a lot of information
244

244

00:11:05.933  -->  00:11:09.073
so I suggest that you try this out yourself
245

245

00:11:09.073  -->  00:11:11.494
to see how this exactly works.
