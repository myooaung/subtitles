WEBVTT
1
1

00:00:00.180  -->  00:00:02.040
<v Edward>Next I will show you how to deal with</v>
2

2

00:00:02.040  -->  00:00:03.803
egress traffic in Istio.
3

3

00:00:05.000  -->  00:00:07.340
Here is an example of our hello pod
4

4

00:00:07.340  -->  00:00:10.240
that wants to reach an external service.
5

5

00:00:10.240  -->  00:00:14.030
Once the hello container contacts an external service,
6

6

00:00:14.030  -->  00:00:16.990
then it's going to be rerouted to the Envoy proxy.
7

7

00:00:16.990  -->  00:00:19.100
The Envoy proxy will then, by default,
8

8

00:00:19.100  -->  00:00:22.895
not route any traffic to external services.
9

9

00:00:22.895  -->  00:00:27.090
You have to enable it on a per service basis.
10

10

00:00:27.090  -->  00:00:29.900
In this demo I will show you how to enable egress traffic
11

11

00:00:29.900  -->  00:00:31.800
for what services you want to contact.
12

12

00:00:32.770  -->  00:00:35.810
We have again an empty cluster.
13

13

00:00:35.810  -->  00:00:37.280
There's no pods here.
14

14

00:00:37.280  -->  00:00:39.870
And I'm going to relaunch the helloworld.
15

15

00:00:39.870  -->  00:00:41.993
The first helloworld applications.
16

16

00:00:43.620  -->  00:00:45.870
So we'll do a kubectl apply and do
17

17

00:00:45.870  -->  00:00:48.043
an istio kube inject command.
18

18

00:00:49.900  -->  00:00:53.010
This will create our three pods,
19

19

00:00:53.010  -->  00:00:55.780
hello world and world-2.
20

20

00:00:55.780  -->  00:00:58.380
First I will contact an external service
21

21

00:00:58.380  -->  00:01:00.320
without specifying anything
22

22

00:01:00.320  -->  00:01:03.470
to show you that Istio will block this.
23

23

00:01:03.470  -->  00:01:08.240
Then I will enable the rules for this particular service.
24

24

00:01:08.240  -->  00:01:11.170
And then we should be able to access our external service.
25

25

00:01:11.170  -->  00:01:13.510
So our pods are now up.
26

26

00:01:13.510  -->  00:01:14.853
I just log into one.
27

27

00:01:15.847  -->  00:01:17.853
Log into this hello pod.
28

28

00:01:19.470  -->  00:01:21.283
I'll open a shell.
29

29

00:01:23.240  -->  00:01:26.553
Let's first try world-2 8080.
30

30

00:01:29.220  -->  00:01:30.411
That works.
31

31

00:01:30.411  -->  00:01:32.170
Central app.
32

32

00:01:32.170  -->  00:01:36.160
Now on the contact, for example,
33

33

00:01:36.160  -->  00:01:38.969
ifconfig.co, which is a website
34

34

00:01:38.969  -->  00:01:40.643
that just returns your IP address.
35

35

00:01:41.820  -->  00:01:43.430
And that doesn't work,
36

36

00:01:43.430  -->  00:01:45.380
so we get an error back.
37

37

00:01:45.380  -->  00:01:48.660
Even if you do other websites, google.com, for example,
38

38

00:01:48.660  -->  00:01:50.710
we always get an error.
39

39

00:01:50.710  -->  00:01:54.640
We have to enable egress traffic for,
40

40

00:01:54.640  -->  00:01:55.840
for example ifconfig.co,
41

41

00:01:56.840  -->  00:02:00.163
if you want to access this service.
42

42

00:02:01.120  -->  00:02:03.210
So here is the yaml definition for this.
43

43

00:02:03.210  -->  00:02:05.753
So we have a ServiceEntry object.
44

44

00:02:06.630  -->  00:02:09.690
I have one for http and one for https.
45

45

00:02:09.690  -->  00:02:13.350
So we say, for example, host ifconfig.co,
46

46

00:02:13.350  -->  00:02:18.320
port 80 for http, and the location is MESH_EXTERNAL.
47

47

00:02:18.320  -->  00:02:21.720
So this will then allow this host name to be contacted
48

48

00:02:21.720  -->  00:02:23.563
from within our service mesh.
49

49

00:02:24.500  -->  00:02:29.100
If you want to use https then we need two objects,
50

50

00:02:29.100  -->  00:02:32.553
the ServiceEntry object and the VirtualService object.
51

51

00:02:34.980  -->  00:02:38.160
This is the same for the same host, ifconfig.co.
52

52

00:02:38.160  -->  00:02:41.473
This time port number is 443, which is https.
53

53

00:02:42.330  -->  00:02:45.330
And then we define VirtualService for the host
54

54

00:02:45.330  -->  00:02:50.070
ifconfig.co, use tls, and then here we have matching rule
55

55

00:02:50.070  -->  00:02:54.600
for port 443, the sni_hosts ifconfig.co,
56

56

00:02:54.600  -->  00:02:57.660
and then the destination is ifconfig.co.
57

57

00:02:57.660  -->  00:03:00.070
So it's https we need those two rules,
58

58

00:03:00.070  -->  00:03:03.200
if it's http we just need one rule.
59

59

00:03:03.200  -->  00:03:04.363
So I'll exit this.
60

60

00:03:05.250  -->  00:03:07.993
Let's kubectl apply this.
61

61

00:03:10.610  -->  00:03:13.217
And let's log in again into the same pod.
62

62

00:03:15.310  -->  00:03:17.963
And let's try to access now ifconfig.co.
63

63

00:03:19.704  -->  00:03:22.150
Now it seemed to have worked.
64

64

00:03:22.150  -->  00:03:27.060
And yes, here is the IP address of my kubernetes cluster
65

65

00:03:27.060  -->  00:03:30.240
of one of the nodes that is contacting this
66

66

00:03:30.240  -->  00:03:32.370
ifconfig.co website.
67

67

00:03:32.370  -->  00:03:33.720
This works for http.
68

68

00:03:33.720  -->  00:03:34.643
Let's try https.
69

69

00:03:38.680  -->  00:03:41.910
Https also works.
70

70

00:03:41.910  -->  00:03:43.900
Let's now try something else.
71

71

00:03:43.900  -->  00:03:45.460
Google.com.
72

72

00:03:45.460  -->  00:03:49.290
Google.com still doesn't work because we haven't defined
73

73

00:03:49.290  -->  00:03:51.790
any rules for google.com.
74

74

00:03:51.790  -->  00:03:54.960
So if your services, if your service mesh is using
75

75

00:03:54.960  -->  00:03:58.740
an external host this is then how you have to configure it
76

76

00:03:58.740  -->  00:04:01.893
so that it is reachable from within your containers.
