1
1

00:00:00,160  -->  00:00:01,700
<v Narrator>In this demo, I will show you</v>
2

2

00:00:01,700  -->  00:00:03,883
how to install Kubeless on your Kubernetes cluster
3

3

00:00:03,883  -->  00:00:06,823
and I will show you how to create your first function.
4

4

00:00:08,670  -->  00:00:13,170
If you go to Github dot com to Kubeless slash Kubeless
5

5

00:00:13,170  -->  00:00:14,940
then you will end up at this page
6

6

00:00:14,940  -->  00:00:18,500
and this is the Github product page for Kubeless
7

7

00:00:18,500  -->  00:00:20,810
and here you can find the releases.
8

8

00:00:20,810  -->  00:00:22,970
They have 36 releases.
9

9

00:00:22,970  -->  00:00:26,980
Still in alpha, this is version one, alpha eight,
10

10

00:00:26,980  -->  00:00:30,970
released nine days ago, so it will be very likely
11

11

00:00:30,970  -->  00:00:34,169
that there will be a new version when try this out
12

12

00:00:34,169  -->  00:00:36,919
and because they keep on releasing versions very often.
13

13

00:00:38,100  -->  00:00:42,295
You can download your verion for MacOS.
14

14

00:00:42,295  -->  00:00:46,460
There is a Darwin version, or for Linux or for Windows.
15

15

00:00:46,460  -->  00:00:48,730
I'll run this on my Vagrant Box so I'm going
16

16

00:00:48,730  -->  00:00:50,123
to use a Linux version.
17

17

00:00:51,120  -->  00:00:52,653
So let's open the terminal.
18

18

00:00:54,340  -->  00:00:57,340
In my Kubernetes course, I have a directory Kubeless
19

19

00:00:58,340  -->  00:01:00,023
and in Kubeless I have readme.
20

20

00:01:02,860  -->  00:01:04,840
All the commands that you will need in this demo
21

21

00:01:04,840  -->  00:01:07,491
and in the next demo are listed in this readme
22

22

00:01:07,491  -->  00:01:10,241
so you can just easily copy paste them from the readme.
23

23

00:01:11,963  -->  00:01:15,660
This is the commands to download the Linux version,
24

24

00:01:15,660  -->  00:01:19,270
version eight, and then we go to unzip it
25

25

00:01:19,270  -->  00:01:22,760
and then we go to move the Kubeless binary to
26

26

00:01:22,760  -->  00:01:24,580
user local bin so that we can execute a
27

27

00:01:24,580  -->  00:01:27,470
Kubeless binary anywhere in our Linux system
28

28

00:01:27,470  -->  00:01:29,480
and then we're just going to remove
29

29

00:01:29,480  -->  00:01:30,900
bundles which was the directory
30

30

00:01:30,900  -->  00:01:33,203
that was created by unzipping Kubeless.
31

31

00:01:34,250  -->  00:01:37,360
So I'm going execute this first.
32

32

00:01:37,360  -->  00:01:40,560 line:15% 
This will then download Kubeless, unzip it
33

33

00:01:42,240  -->  00:01:45,670 line:15% 
and then put it in the correct place.
34

34

00:01:45,670  -->  00:01:49,580 line:15% 
So I have now Kubeless, command works now,
35

35

00:01:49,580  -->  00:01:52,620
Kubeless Serverless Framework for Kubernetes.
36

36

00:01:52,620  -->  00:01:54,160
This is the command line utility.
37

37

00:01:54,160  -->  00:01:56,250
Now we need to install Kubeless
38

38

00:01:56,250  -->  00:01:57,703 line:15% 
on Kubernetes cluster.
39

39

00:01:58,570  -->  00:02:01,170
Let's have a look again at the readme.
40

40

00:02:01,170  -->  00:02:03,860
First, we create a new namespace
41

41

00:02:03,860  -->  00:02:06,860
and then we can create using the YAML file
42

42

00:02:06,860  -->  00:02:09,570
from the release we can us kubectl create
43

43

00:02:09,570  -->  00:02:12,020
and this will create all the resources necessary.
44

44

00:02:16,190  -->  00:02:17,530 line:15% 
So we have a config map.
45

45

00:02:17,530  -->  00:02:18,880 line:15% 
We have deployments.
46

46

00:02:18,880  -->  00:02:21,690 line:15% 
These will be created in the Kubeless namespace,
47

47

00:02:21,690  -->  00:02:24,540 line:15% 
a service account, RBAC roles and then we have
48

48

00:02:24,540  -->  00:02:27,390 line:15% 
the custom resource definitions, functions,
49

49

00:02:27,390  -->  00:02:29,733 line:15% 
HTTP triggers and chronjobs triggers.
50

50

00:02:30,610  -->  00:02:32,670 line:15% 
So these will give us this extra functionality
51

51

00:02:32,670  -->  00:02:34,253
within the Kubernetes cluster.
52

52

00:02:36,350  -->  00:02:38,450
To see whether it's spun up correctly,
53

53

00:02:38,450  -->  00:02:43,157 line:15% 
we can do kubectl get pods of the kubeless namespace.
54

54

00:02:44,140  -->  00:02:44,973 line:15% 
We have three containers in this
55

55

00:02:44,973  -->  00:02:46,853 line:15% 
kubeless controller manager.
56

56

00:02:47,700  -->  00:02:49,083 line:15% 
So they all look fine.
57

57

00:02:51,560  -->  00:02:55,710
Let's have a look at the first function
58

58

00:02:55,710  -->  00:02:57,780
that we're going to deploy.
59

59

00:02:57,780  -->  00:03:01,500
I have a Python example here and NodeJS example.
60

60

00:03:01,500  -->  00:03:03,423
So these should both work.
61

61

00:03:05,460  -->  00:03:06,983 line:15% 
Let's just deploy those.
62

62

00:03:08,290  -->  00:03:09,770 line:15% 
This is the Python function
63

63

00:03:10,850  -->  00:03:13,833 line:15% 
and then you have a NodeJS function.
64

64

00:03:15,260  -->  00:03:16,910
So what is the difference here?
65

65

00:03:16,910  -->  00:03:19,270
You do a Kubeless function deploy,
66

66

00:03:19,270  -->  00:03:21,000
the name of the function.
67

67

00:03:21,000  -->  00:03:22,120
You specify the runtime.
68

68

00:03:22,120  -->  00:03:23,877
So this runtime is python two point seven,
69

69

00:03:23,877  -->  00:03:26,783 line:15% 
and here we use the runtime node js six.
70

70

00:03:27,640  -->  00:03:30,100
From file python example example py.
71

71

00:03:30,100  -->  00:03:33,300
This is a file that exists here on my file system
72

72

00:03:33,300  -->  00:03:36,370
and then the handler is test dot hello.
73

73

00:03:36,370  -->  00:03:39,030
This is the function that will be used.
74

74

00:03:39,030  -->  00:03:41,720 line:15% 
With the node js example we also have dependencies.
75

75

00:03:41,720  -->  00:03:44,720 line:15% 
We can use package dot json which is part of NodeJS
76

76

00:03:44,720  -->  00:03:47,850 line:15% 
or we can find dependencies when they are necessary.
77

77

00:03:47,850  -->  00:03:50,610 line:15% 
You also have a handler and a from file.
78

78

00:03:50,610  -->  00:03:53,910
So you see, it's very similar whether you deploy
79

79

00:03:53,910  -->  00:03:57,340
a Python function or a NodeJS function.
80

80

00:03:57,340  -->  00:04:00,130 line:15% 
Let's have a look at both those functions.
81

81

00:04:00,130  -->  00:04:03,543 line:15% 
Let's have a look at the Python example, example dot py.
82

82

00:04:04,730  -->  00:04:08,110 line:15% 
We just defined a hello function, event context,
83

83

00:04:08,110  -->  00:04:10,363 line:15% 
print event, return event data.
84

84

00:04:11,520  -->  00:04:16,520 line:15% 
Then we have NodeJS example, example js, very similar.
85

85

00:04:19,990  -->  00:04:22,343 line:15% 
This means that we are going to a export function.
86

86

00:04:22,343  -->  00:04:24,500 line:15% 
This is the my function
87

87

00:04:24,500  -->  00:04:26,340 line:15% 
which is a function with the arguments
88

88

00:04:26,340  -->  00:04:29,325 line:15% 
event and context just like here.
89

89

00:04:29,325  -->  00:04:31,000
You're also going to log the event
90

90

00:04:31,000  -->  00:04:33,150 line:15% 
and we're going to return here hello world.
91

91

00:04:34,820  -->  00:04:36,360
Those examples are very simple
92

92

00:04:36,360  -->  00:04:39,093 line:15% 
and we can deploy them with a simple command.
93

93

00:04:40,210  -->  00:04:42,950 line:15% 
The node example also has a package dot json
94

94

00:04:42,950  -->  00:04:44,820
where we can define dependencies.
95

95

00:04:44,820  -->  00:04:46,310
We don't have any defined here
96

96

00:04:46,310  -->  00:04:48,500
but we could define some dependencies
97

97

00:04:48,500  -->  00:04:50,460
if we would need some Excel libraries
98

98

00:04:50,460  -->  00:04:52,813
within our NodeJS program.
99

99

00:04:57,410  -->  00:05:00,940
Let's have a look, Kubeless function ls for example.
100

100

00:05:00,940  -->  00:05:04,513 line:15% 
Will show us the functions that are available.
101

101

00:05:05,608  -->  00:05:09,790 line:15% 
Kubeless, not kubectl, Kubeless.
102

102

00:05:09,790  -->  00:05:13,070 line:15% 
So we have hello and my function in the default namespace,
103

103

00:05:13,070  -->  00:05:15,224 line:15% 
handler is test dot hello, test dot my function
104

104

00:05:15,224  -->  00:05:18,110 line:15% 
runtime Python, runtime NodeJS,
105

105

00:05:18,110  -->  00:05:21,433 line:15% 
no dependencies and they are both ready.
106

106

00:05:21,433  -->  00:05:23,620 line:15% 
So do kubectl get pods.
107

107

00:05:23,620  -->  00:05:27,350 line:15% 
We then see that for every function it has spun up a pods.
108

108

00:05:29,870  -->  00:05:31,170 line:15% 
We can call this function,
109

109

00:05:33,730  -->  00:05:37,810 line:15% 
for example using Kubeless function call my function
110

110

00:05:37,810  -->  00:05:39,950 line:15% 
which is the NodeJS function
111

111

00:05:39,950  -->  00:05:41,690 line:15% 
and we can pass data to it.
112

112

00:05:41,690  -->  00:05:45,160 line:15% 
This is some data and then
113

113

00:05:45,160  -->  00:05:47,150
if you pass some data you can use
114

114

00:05:47,150  -->  00:05:48,700
this data within your function.
115

115

00:05:50,160  -->  00:05:51,530
In our NodeJS function we are not really
116

116

00:05:51,530  -->  00:05:55,200
using this data so it will always just reply hello world.
117

117

00:05:55,200  -->  00:05:59,403
So you can see here return hello world.
118

118

00:06:00,400  -->  00:06:02,260
It also logged the event
119

119

00:06:02,260  -->  00:06:07,260 line:15% 
so we can do kubectl logs of this pods's my function.
120

120

00:06:10,625  -->  00:06:12,190 line:15% 
There's a pod name here and
121

121

00:06:12,190  -->  00:06:14,300
then we'll be able to see the output here
122

122

00:06:14,300  -->  00:06:17,300 line:15% 
of this console log of the event variable
123

123

00:06:21,654  -->  00:06:25,140
and then we see here the health checks that have been done
124

124

00:06:25,140  -->  00:06:28,400
and this is the start of the output of our event
125

125

00:06:28,400  -->  00:06:31,370
and we see event type, time, ID, time,
126

126

00:06:31,370  -->  00:06:33,980
namespace and here's our data.
127

127

00:06:33,980  -->  00:06:35,780
This is some data.
128

128

00:06:35,780  -->  00:06:39,370
This data in the event variable,
129

129

00:06:39,370  -->  00:06:42,250
If you have a look again at the node example.
130

130

00:06:42,250  -->  00:06:45,570
So we have here event is an object.
131

131

00:06:45,570  -->  00:06:47,230
In this object we have data.
132

132

00:06:47,230  -->  00:06:51,050
We could use this object data to then
133

133

00:06:51,050  -->  00:06:54,830
do something with the data and then return something.
134

134

00:06:54,830  -->  00:06:57,410
In the next demo I will show you how to use
135

135

00:06:57,410  -->  00:07:00,420
some of this data with Kafka.
136

136

00:07:00,420  -->  00:07:03,950
In this example is just going to show you hello world.
137

137

00:07:03,950  -->  00:07:06,530
I will now just show you how to connect this
138

138

00:07:06,530  -->  00:07:10,772
to a HTTP endpoint that will then show hello world
139

139

00:07:10,772  -->  00:07:14,280
that will then show the output of this my function
140

140

00:07:14,280  -->  00:07:16,670
which is in this case hello world.
141

141

00:07:16,670  -->  00:07:19,083 line:15% 
So let's have another look at our readme.
142

142

00:07:20,480  -->  00:07:21,883 line:15% 
We started the functions.
143

143

00:07:23,820  -->  00:07:25,520
We listed the functions.
144

144

00:07:25,520  -->  00:07:27,800
We called one function manually,
145

145

00:07:27,800  -->  00:07:30,010
but now we are going to expose a function
146

146

00:07:30,010  -->  00:07:32,340
and if you expose a function then
147

147

00:07:32,340  -->  00:07:34,173
we can trigger it from external.
148

148

00:07:35,230  -->  00:07:37,690
Kubeless uses the ingress functionality
149

149

00:07:37,690  -->  00:07:39,540
in Kubernetes so we first need to launch
150

150

00:07:39,540  -->  00:07:40,710
an ingress controller.
151

151

00:07:40,710  -->  00:07:44,220
So if you use this ingress controller with ELB
152

152

00:07:44,220  -->  00:07:45,890
it will launch ingress controller with
153

153

00:07:45,890  -->  00:07:47,720
a load balancer in front of it,
154

154

00:07:47,720  -->  00:07:50,203
so they can just go to this load balancer.
155

155

00:07:51,060  -->  00:07:52,910
Then secondly, we need to make sure that there
156

156

00:07:52,910  -->  00:07:55,281
is an ingress rule that is created
157

157

00:07:55,281  -->  00:07:57,560
that will point to this function
158

158

00:07:57,560  -->  00:07:59,420
and you can use Kubeless for that.
159

159

00:07:59,420  -->  00:08:03,340
So Kubeless trigger HTTP create my function
160

160

00:08:03,340  -->  00:08:06,282
the function name is my function and the host name
161

161

00:08:06,282  -->  00:08:07,920
that we are going to use is my function dot
162

162

00:08:07,920  -->  00:08:09,453
kubernetes new tech academy.
163

163

00:08:10,510  -->  00:08:11,663
So let's execute this.
164

164

00:08:15,998  -->  00:08:19,990 line:15% 
So here I have the nginx ingress controller with ELB.
165

165

00:08:19,990  -->  00:08:22,620
You can have a look at the ingress lecture
166

166

00:08:22,620  -->  00:08:24,650 line:15% 
if you need some more information on ingress.
167

167

00:08:24,650  -->  00:08:27,953 line:15% 
I'm just going to create this nginx ingress controller.
168

168

00:08:30,152  -->  00:08:34,453 line:15% 
This will then create an ingress and a service
169

169

00:08:37,820  -->  00:08:41,543 line:15% 
in the ingress nginx namespace.
170

170

00:08:43,618  -->  00:08:45,870 line:15% 
So we are going to do minus O wide.
171

171

00:08:45,870  -->  00:08:46,785 line:15% 
This is the URL of the
172

172

00:08:46,785  -->  00:08:51,785 line:15% 
load balancer so they can use,
173

173

00:08:52,430  -->  00:08:55,230 line:15% 
it will then point to the ingress controller.
174

174

00:08:55,230  -->  00:08:57,340 line:15% 
Let's have a look at the ingress rules.
175

175

00:08:57,340  -->  00:09:00,830
Currently, there are no ingress rules present
176

176

00:09:00,830  -->  00:09:05,230 line:15% 
because I need to first enter this Kubeless trigger command
177

177

00:09:05,230  -->  00:09:07,000
which will create an ingress rule
178

178

00:09:07,000  -->  00:09:10,410 line:15% 
that will use this my function as a backend if the
179

179

00:09:10,410  -->  00:09:13,510 line:15% 
host name my function kubernetes new tech academy matches.
180

180

00:09:13,510  -->  00:09:15,170
So I'll do that.
181

181

00:09:15,170  -->  00:09:16,003 line:15% 
It's created.
182

182

00:09:17,741  -->  00:09:20,030 line:15% 
You do a new kubectl get ingress
183

183

00:09:20,030  -->  00:09:22,190 line:15% 
then my function will be triggered
184

184

00:09:22,190  -->  00:09:25,263 line:15% 
if the host is my function kubernetes new tech academy.
185

185

00:09:26,930  -->  00:09:31,660 line:15% 
I can now go to Route 53 and add this load balancer
186

186

00:09:31,660  -->  00:09:35,890 line:15% 
for this host name my function kubernetes new tech academy.
187

187

00:09:35,890  -->  00:09:36,853
So let's try that.
188

188

00:09:39,560  -->  00:09:43,250
So I'm now logged in to my AWS account.
189

189

00:09:43,250  -->  00:09:44,923
I'll go to Route 53.
190

190

00:09:46,370  -->  00:09:48,884
I have one host that's on,
191

191

00:09:48,884  -->  00:09:51,110
kubernetes new tech academy is the host that's on
192

192

00:09:51,110  -->  00:09:53,313
and I'll create a new record set.
193

193

00:09:54,300  -->  00:09:57,810
I will create a new record for my function
194

194

00:09:57,810  -->  00:10:00,580
which will be of type Alias
195

195

00:10:00,580  -->  00:10:03,900
and I can point to this ELB Classic load balancer,
196

196

00:10:03,900  -->  00:10:06,210
which the only load balancer in my account.
197

197

00:10:07,520  -->  00:10:12,490
I can click create and now I have
198

198

00:10:12,490  -->  00:10:14,380
my function kubernetes new tech academy
199

199

00:10:14,380  -->  00:10:16,060
which points to the load balancer.
200

200

00:10:16,060  -->  00:10:18,680
My load balancer points to the ingress,
201

201

00:10:18,680  -->  00:10:20,820
to the nginx ingress controller
202

202

00:10:20,820  -->  00:10:25,030
and I have a ingress rule that if this host matches
203

203

00:10:25,030  -->  00:10:27,163
then it will point to my function.
204

204

00:10:29,350  -->  00:10:30,860
It's best to wait a couple of minutes because
205

205

00:10:30,860  -->  00:10:33,620
it will take some time before these changes are made
206

206

00:10:34,800  -->  00:10:36,990
and if you do it too early it might be cached
207

207

00:10:36,990  -->  00:10:38,560
and then it's not gonna work again.
208

208

00:10:38,560  -->  00:10:41,473
So it's better to just wait a few minutes before using it.
209

209

00:10:42,730  -->  00:10:45,620 line:15% 
What happens if you go straight to the load balancer
210

210

00:10:45,620  -->  00:10:48,580 line:15% 
and you don't use this host name,
211

211

00:10:48,580  -->  00:10:52,150 line:15% 
then you will hit the default backend.
212

212

00:10:52,150  -->  00:10:53,290 line:15% 
This is the default backend.
213

213

00:10:53,290  -->  00:10:55,350 line:15% 
It's a 404 error.
214

214

00:10:55,350  -->  00:10:57,240 line:15% 
So the default backend is defined
215

215

00:10:57,240  -->  00:10:59,793 line:15% 
in this nginx ingress controller here.
216

216

00:11:00,910  -->  00:11:04,500 line:15% 
Let's check whether the host name resolves.
217

217

00:11:04,500  -->  00:11:06,380 line:15% 
This resolves to two IP addresses
218

218

00:11:06,380  -->  00:11:08,630 line:15% 
and those two IP addresses should be the same
219

219

00:11:09,520  -->  00:11:12,970 line:15% 
as this load balancer which is correct.
220

220

00:11:12,970  -->  00:11:16,163 line:15% 
I only see one IP address here, but these IP matches.
221

221

00:11:17,420  -->  00:11:20,370 line:15% 
These are two IP addresses, one for each availability zone.
222

222

00:11:21,950  -->  00:11:24,270 line:15% 
So if I then curl this
223

223

00:11:24,270  -->  00:11:26,800 line:15% 
my function kubernetes new tech academy
224

224

00:11:26,800  -->  00:11:28,770 line:15% 
I will get hello world and
225

225

00:11:28,770  -->  00:11:31,210
I can do the same in a browser.
226

226

00:11:31,210  -->  00:11:34,790 line:15% 
So if I do curl my function kubernetes new tech academy
227

227

00:11:34,790  -->  00:11:38,040 line:15% 
it will resolve to one of these IP addresses.
228

228

00:11:38,040  -->  00:11:41,383
It will go to this load balancer here.
229

229

00:11:42,410  -->  00:11:44,690
This load balancer will send it
230

230

00:11:44,690  -->  00:11:46,730
to the nginx ingress controller,
231

231

00:11:46,730  -->  00:11:49,150
nginx ingress controller has its rule.
232

232

00:11:49,150  -->  00:11:51,500 line:15% 
Its rule matches and then it will go
233

233

00:11:51,500  -->  00:11:55,070 line:15% 
to the backend, the my function pod
234

234

00:11:56,100  -->  00:11:59,060 line:15% 
and this pod will return hello world,
235

235

00:11:59,060  -->  00:12:01,890 line:15% 
it executes this function and
236

236

00:12:01,890  -->  00:12:03,660 line:15% 
it will be returned to the client
237

237

00:12:03,660  -->  00:12:05,750
which is this case was curl.
238

238

00:12:05,750  -->  00:12:09,520
So this is how you can create a function,
239

239

00:12:09,520  -->  00:12:12,270
a Serverless function in Kubernetes
240

240

00:12:12,270  -->  00:12:14,260
and then create an HTTP rule for it
241

241

00:12:14,260  -->  00:12:16,653
so that an ingress rule is created.
242

242

00:12:18,620  -->  00:12:21,200 line:15% 
If you then have another look at
243

243

00:12:21,200  -->  00:12:23,893 line:15% 
logs of this my function,
244

244

00:12:25,790  -->  00:12:28,530
we will then also see that now the event is different.
245

245

00:12:28,530  -->  00:12:31,870
It is a request and then here we have an incoming message
246

246

00:12:31,870  -->  00:12:34,737
and from this incoming message you can get
247

247

00:12:34,737  -->  00:12:37,740
some more information like the URL that was requested,
248

248

00:12:37,740  -->  00:12:40,660
the method that was used because now
249

249

00:12:40,660  -->  00:12:43,746
we are using HTTP, rather than calling
250

250

00:12:43,746  -->  00:12:48,380
the object directly using the Kubeless commands.
251

251

00:12:48,380  -->  00:12:52,260
So depending on how you trigger the Serverless function,
252

252

00:12:52,260  -->  00:12:54,803 line:15% 
your event object will look different.
253

253

00:12:56,820  -->  00:12:58,993 line:15% 
So this was here our request.
254

254

00:13:00,720  -->  00:13:02,240
In the next demo I will show you then
255

255

00:13:02,240  -->  00:13:04,453
how to use PubSub with Kafka.
