1
1

00:00:00,290  -->  00:00:02,700
<v Edward>In this next section I'll be talking</v>
2

2

00:00:02,700  -->  00:00:06,083
about Serverless, Functions in Kubernetes.
3

3

00:00:07,480  -->  00:00:09,923
First of all, what is Serverless?
4

4

00:00:11,070  -->  00:00:13,550
Public Cloud providers often provide Serverless
5

5

00:00:13,550  -->  00:00:16,510
capabilities in which you can deploy functions,
6

6

00:00:16,510  -->  00:00:18,883
rather than instances or containers.
7

7

00:00:20,100  -->  00:00:23,200
Microsoft has Azure Functions,
8

8

00:00:23,200  -->  00:00:25,383
Amazon has AWS Lambda,
9

9

00:00:26,230  -->  00:00:29,530
and Google has Cloud Functions.
10

10

00:00:29,530  -->  00:00:32,390
Those are the main public cloud providers
11

11

00:00:32,390  -->  00:00:36,603
and they provide all ways to deploy functions.
12

12

00:00:37,450  -->  00:00:39,740
With these products, you don't need to manage
13

13

00:00:39,740  -->  00:00:43,600
the underlying infrastructure, you just only deploy
14

14

00:00:43,600  -->  00:00:46,693
the code, the function that you want to execute.
15

15

00:00:46,693  -->  00:00:49,200
The functions are also not always
16

16

00:00:49,200  -->  00:00:52,020
on unlike containers and instances,
17

17

00:00:52,020  -->  00:00:54,770
which can greatly reduce the cost of serverless
18

18

00:00:54,770  -->  00:00:57,660
if the function doesn't need to be executed a lot.
19

19

00:00:57,660  -->  00:01:01,000
So you also pay by invocation rather
20

20

00:01:01,000  -->  00:01:05,195
than by minute or by hour, so it makes a big
21

21

00:01:05,195  -->  00:01:07,093
difference in the pricing.
22

22

00:01:08,036  -->  00:01:10,410
Serverless in public cloud can reduce
23

23

00:01:10,410  -->  00:01:12,650
the complexity, the operational costs,
24

24

00:01:12,650  -->  00:01:14,993
and engineering time to get code running.
25

25

00:01:16,184  -->  00:01:19,140
You don't need to manage a Windows or Linux distribution.
26

26

00:01:19,140  -->  00:01:21,320
You don't need to build containers,
27

27

00:01:21,320  -->  00:01:24,270
you only pay for time your function is running.
28

28

00:01:24,270  -->  00:01:26,670
So if your function only runs for five seconds,
29

29

00:01:26,670  -->  00:01:28,853
you will only pay for those five seconds.
30

30

00:01:29,800  -->  00:01:32,720
A developer can just push the code and does not
31

31

00:01:32,720  -->  00:01:35,363
have to worry about many operational aspects.
32

32

00:01:36,540  -->  00:01:39,380
Although cold starts, the time for a function
33

33

00:01:39,380  -->  00:01:41,980
to start after it has not been invoked
34

34

00:01:41,980  -->  00:01:44,430
for some time, can be an operational issue
35

35

00:01:44,430  -->  00:01:46,770
that needs to be taken care of.
36

36

00:01:46,770  -->  00:01:49,840
While it reduces the operational work load
37

37

00:01:49,840  -->  00:01:53,185
for the engineering team, it also brings
38

38

00:01:53,185  -->  00:01:56,240
some new problems that you have to take care of,
39

39

00:01:56,240  -->  00:01:58,399
and those cold starts are one of the main
40

40

00:01:58,399  -->  00:02:02,320
issues that you have to keep an eye on.
41

41

00:02:02,320  -->  00:02:04,320
So serverless reduces the complexity
42

42

00:02:05,280  -->  00:02:06,893
because it can just deploy code
43

43

00:02:06,893  -->  00:02:10,020
instead of containers or instances
44

44

00:02:10,020  -->  00:02:12,520
with linearis/binaries as one,
45

45

00:02:12,520  -->  00:02:14,290
it can give you lower operational costs
46

46

00:02:14,290  -->  00:02:16,140
because you build differently
47

47

00:02:16,140  -->  00:02:18,190
and the engineering time to get the code running
48

48

00:02:18,190  -->  00:02:21,080
can be lower because you only needed to code
49

49

00:02:21,080  -->  00:02:23,903
and the run time is provided by the cloud provider.
50

50

00:02:25,940  -->  00:02:28,810
This is an example of a AWS Lambda Function.
51

51

00:02:28,810  -->  00:02:31,640
So this just contains three lines of code
52

52

00:02:31,640  -->  00:02:34,360
you'd use to find a function that takes the event
53

53

00:02:34,360  -->  00:02:37,060
and the context which can contain information
54

54

00:02:37,060  -->  00:02:39,380
about how the function is invoked,
55

55

00:02:39,380  -->  00:02:40,770
and then you pause, Hello, World,
56

56

00:02:40,770  -->  00:02:43,363
this is the result of this function.
57

57

00:02:44,630  -->  00:02:48,060
You'd still need to setup when the code is being executed.
58

58

00:02:48,060  -->  00:02:49,770
So now you have a function, but you still need
59

59

00:02:49,770  -->  00:02:53,250
to setup when it is going to be executed.
60

60

00:02:53,250  -->  00:02:55,597
For example, in AWS you would use an API Gateway,
61

61

00:02:55,597  -->  00:03:00,163
to setup a URL that will invoke this function when visited.
62

62

00:03:01,650  -->  00:03:03,610
So what I showed you here, those three lines,
63

63

00:03:03,610  -->  00:03:06,030
it's just a function, it doesn't tell you
64

64

00:03:06,030  -->  00:03:07,570
when it should run.
65

65

00:03:07,570  -->  00:03:10,720
You need to connect it to another AWS service,
66

66

00:03:10,720  -->  00:03:13,210
for example, the API Gateway, it will give you
67

67

00:03:13,210  -->  00:03:17,300
a host name, a URL that you can then invoke just by browsing
68

68

00:03:17,300  -->  00:03:20,400
the URL and then you can link this function to it,
69

69

00:03:20,400  -->  00:03:22,640
so this function executes and then it will return
70

70

00:03:22,640  -->  00:03:24,990
Hello, World and that's what even
71

71

00:03:24,990  -->  00:03:26,940
you would see in your browser.
72

72

00:03:26,940  -->  00:03:29,010
So there's still some operational
73

73

00:03:29,010  -->  00:03:31,083
work to get this running.
74

74

00:03:32,880  -->  00:03:35,760
Now Serverless in Kubernetes rather
75

75

00:03:35,760  -->  00:03:38,150
than using containers to start applications
76

76

00:03:38,150  -->  00:03:39,660
on Kubernetes you can also use
77

77

00:03:39,660  -->  00:03:42,243
functions like the AWS Lambda.
78

78

00:03:43,350  -->  00:03:45,330
Currently, the most popular projects
79

79

00:03:45,330  -->  00:03:49,090
enabling functions are OpenFaas,
80

80

00:03:49,090  -->  00:03:53,100
Kubeless, Fission, and OpenWhisk.
81

81

00:03:53,100  -->  00:03:55,550
So all those projects are providing
82

82

00:03:55,550  -->  00:03:58,540
ways to run the functions on Kubernetes.
83

83

00:03:58,540  -->  00:04:01,050
You can install and use any other projects
84

84

00:04:01,050  -->  00:04:02,830
to let developers launch functions
85

85

00:04:02,830  -->  00:04:04,233
on your Kubernetes cluster.
86

86

00:04:05,390  -->  00:04:07,720
As an administrator of Kubernetes cluster,
87

87

00:04:07,720  -->  00:04:09,610
you'll still need to manage the underlying
88

88

00:04:09,610  -->  00:04:12,730
infrastructure, but from a developer standpoint,
89

89

00:04:12,730  -->  00:04:16,200
he or she will be able to quickly and easily
90

90

00:04:16,200  -->  00:04:18,673
deploy functions on Kubernetes.
91

91

00:04:19,630  -->  00:04:22,281
This is the major difference with public cloud.
92

92

00:04:22,281  -->  00:04:24,780
Within public cloud you don't have to manage
93

93

00:04:24,780  -->  00:04:26,900
infrastructure, it is done for you,
94

94

00:04:26,900  -->  00:04:28,460
but because you are running Kubernetes
95

95

00:04:28,460  -->  00:04:32,280
because you are installing one of these projects
96

96

00:04:32,280  -->  00:04:36,550
you still need to manage this serverless infrastructure,
97

97

00:04:36,550  -->  00:04:40,510
but the new developers can use it just in the same
98

98

00:04:40,510  -->  00:04:42,503
way as they would use on the clouds.
99

99

00:04:43,850  -->  00:04:48,060
All these projects are pretty new as of September, 2018.
100

100

00:04:48,060  -->  00:04:50,600
When I created this lecture, so there are features
101

101

00:04:50,600  -->  00:04:53,800
that will still drastically change.
102

102

00:04:53,800  -->  00:04:56,490
Most of the projects are also still in office stages,
103

103

00:04:56,490  -->  00:04:58,620
so some of the existing functionality
104

104

00:04:58,620  -->  00:05:00,360
can still change as well.
105

105

00:05:00,360  -->  00:05:02,810
If you are looking in adopting a serverless technology
106

106

00:05:02,810  -->  00:05:05,360
for your Kubernetes cluster, it's best to compare
107

107

00:05:05,360  -->  00:05:07,830
the features and the maturity of multiple
108

108

00:05:07,830  -->  00:05:11,280
software products, and make your own decision.
109

109

00:05:11,280  -->  00:05:13,258
So all of these projects have a get up page,
110

110

00:05:13,258  -->  00:05:16,189
and go to the get up page, read about them,
111

111

00:05:16,189  -->  00:05:19,780
and compare their features with what you need
112

112

00:05:19,780  -->  00:05:21,603
in a serverless technology.
113

113

00:05:22,600  -->  00:05:25,080
In this course, I will demo Kubeless,
114

114

00:05:25,080  -->  00:05:27,720
which is easy to setup and use.
115

115

00:05:27,720  -->  00:05:30,080
It's also one of the technologies specifically
116

116

00:05:30,080  -->  00:05:33,210
written for Kubernetes and it leverages
117

117

00:05:33,210  -->  00:05:36,650
a lot of the Kubernetes components to integrate
118

118

00:05:36,650  -->  00:05:40,123
this functions capability within Kubernetes.
119

119

00:05:41,230  -->  00:05:44,153
I will talk about Kubeless in the next lecture.
