1
1

00:00:00,210  -->  00:00:01,043
<v Edward>In this lecture,</v>
2

2

00:00:01,043  -->  00:00:03,683
I want to show you the pod lifecycle.
3

3

00:00:05,880  -->  00:00:07,870
This is a diagram that I created
4

4

00:00:08,760  -->  00:00:12,410
to give you a better idea of what really happens
5

5

00:00:12,410  -->  00:00:14,083
when you launch a pod.
6

6

00:00:15,010  -->  00:00:18,060
This diagram also shows you the init container
7

7

00:00:18,060  -->  00:00:19,460
that you can use,
8

8

00:00:19,460  -->  00:00:23,220
the post start hook and the pre stop hook.
9

9

00:00:23,220  -->  00:00:25,930
Those you can define in your yaml file,
10

10

00:00:25,930  -->  00:00:29,260
in your pod specification, to execute commands
11

11

00:00:29,260  -->  00:00:31,583
on certain points in the lifecycle of the pod.
12

12

00:00:32,950  -->  00:00:35,750
Let's start with the init container.
13

13

00:00:35,750  -->  00:00:39,610
When you define an init container in your pod specification
14

14

00:00:39,610  -->  00:00:42,730
you can launch a new container that is separate
15

15

00:00:42,730  -->  00:00:47,150
from the main container that will execute some commands.
16

16

00:00:47,150  -->  00:00:49,110
This can be interesting if you have volumes,
17

17

00:00:49,110  -->  00:00:52,480
for example, to do some work on those volumes,
18

18

00:00:52,480  -->  00:00:54,590
set some permissions create on directories
19

19

00:00:54,590  -->  00:00:57,610
before the main container starts.
20

20

00:00:57,610  -->  00:01:00,590
So this is a completely separate container
21

21

00:01:00,590  -->  00:01:02,760
and the main container will only start
22

22

00:01:02,760  -->  00:01:05,103
after the init container is completed.
23

23

00:01:06,080  -->  00:01:08,090
Then we have the post start hook,
24

24

00:01:08,090  -->  00:01:11,030
and the post start hook starts at the same time
25

25

00:01:11,030  -->  00:01:12,970
as the main container if you define it
26

26

00:01:12,970  -->  00:01:15,090
in your container definition,
27

27

00:01:15,090  -->  00:01:17,300
and it starts within the main container,
28

28

00:01:17,300  -->  00:01:19,210
so you can just execute
29

29

00:01:19,210  -->  00:01:21,990
some commands within the main container.
30

30

00:01:21,990  -->  00:01:24,540
Again, if you need to do some work
31

31

00:01:24,540  -->  00:01:26,880
just when the container starts.
32

32

00:01:26,880  -->  00:01:28,670
Then we have the pre stop hook,
33

33

00:01:28,670  -->  00:01:32,120
and that one is going to be executed
34

34

00:01:32,120  -->  00:01:34,290
when the container stops.
35

35

00:01:34,290  -->  00:01:36,710
So here, again, if you have to do some work
36

36

00:01:36,710  -->  00:01:41,073
when the container stops then you can use a pre stop hook.
37

37

00:01:42,230  -->  00:01:43,900
We have the main container,
38

38

00:01:43,900  -->  00:01:46,300
and within the main container we can also define
39

39

00:01:46,300  -->  00:01:49,080
the readiness probe and the liveness probe.
40

40

00:01:49,080  -->  00:01:51,110
These readiness probes and liveness probes
41

41

00:01:51,110  -->  00:01:53,360
will only start after the initialDelaySeconds
42

42

00:01:54,210  -->  00:01:57,070
that you define as well in your probes.
43

43

00:01:57,070  -->  00:01:59,570
So the moment that your main container starts,
44

44

00:01:59,570  -->  00:02:03,130
this initialDelaySeconds will delay the readiness probe
45

45

00:02:03,130  -->  00:02:04,090
and the liveness probe,
46

46

00:02:04,090  -->  00:02:07,480
because often you're app needs some time to start
47

47

00:02:07,480  -->  00:02:10,210
to connect with database and it doesn't make sense
48

48

00:02:10,210  -->  00:02:13,230
to immediately start a probe,
49

49

00:02:13,230  -->  00:02:15,930
but often it only makes sense after a couple of seconds,
50

50

00:02:15,930  -->  00:02:19,073
to then start checking whether the app is working.
51

51

00:02:20,260  -->  00:02:21,650
So this is the pod lifecycle.
52

52

00:02:21,650  -->  00:02:23,613
Now let's go over the different states.
53

53

00:02:24,600  -->  00:02:27,110
When the container is running the init container
54

54

00:02:27,110  -->  00:02:28,570
then you will see in the describe,
55

55

00:02:28,570  -->  00:02:31,520
if you go and take a look at the conditions
56

56

00:02:31,520  -->  00:02:33,540
that initialized is still false,
57

57

00:02:33,540  -->  00:02:36,930
ready is still false, but the pod is scheduled.
58

58

00:02:36,930  -->  00:02:39,480
So the pod is scheduled, the init container is running,
59

59

00:02:39,480  -->  00:02:41,603
it means that initialize is false.
60

60

00:02:42,960  -->  00:02:46,600
Then after the post start hook is executed,
61

61

00:02:46,600  -->  00:02:48,140
initialized will be true,
62

62

00:02:48,140  -->  00:02:50,200
it will still not be ready,
63

63

00:02:50,200  -->  00:02:52,200
and the PodScheduled is still true.
64

64

00:02:52,200  -->  00:02:54,600
The reason why it's not ready is because the readiness probe
65

65

00:02:54,600  -->  00:02:56,080
hasn't executed.
66

66

00:02:56,080  -->  00:02:58,100
So if you have a readiness probe,
67

67

00:02:58,100  -->  00:03:00,830
only after the readiness probe returns success,
68

68

00:03:00,830  -->  00:03:03,640
then we have initialized true, ready true,
69

69

00:03:03,640  -->  00:03:05,040
and then the pod is scheduled.
70

70

00:03:05,040  -->  00:03:06,480
And then the pod is live.
71

71

00:03:06,480  -->  00:03:09,350
It will be added to the service
72

72

00:03:09,350  -->  00:03:11,693
and traffic will be routed to this pod.
73

73

00:03:12,950  -->  00:03:15,600
In the next demo I will launch a container
74

74

00:03:15,600  -->  00:03:18,800
that has all these elements in it
75

75

00:03:18,800  -->  00:03:21,023
so that you can see them being executed.
