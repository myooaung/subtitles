1
00:00:00,570 --> 00:00:07,770
In this demo, I am going to show you how to set up a WordPress using the secrets. It's not a fully working Wordpress yet.

2
00:00:09,020 --> 00:00:15,330
The more features of Kubernetes you will see, the more and will changes set up a little bit, and at the

3
00:00:15,330 --> 00:00:19,710
end of the course you will actually have a Wordpress that is working.

4
00:00:19,790 --> 00:00:25,730
We don't know how to use stateful containers yet, that's why whenever you can to put data in this WordPress,

5
00:00:26,090 --> 00:00:30,650
it's not going to be persistent, whatever your pod shuts down that it is gone.

6
00:00:30,770 --> 00:00:35,930
But that doesn't stop me of showing you already what we can do now using those secrets.

7
00:00:38,710 --> 00:00:41,310
WordPress files are in a directory called WordPress.

8
00:00:41,350 --> 00:00:48,660
In my git repository of the "Kubernetes-course". The first file I want to show you 

9
00:00:49,240 --> 00:00:51,890
is the "wordpress-secrets".

10
00:00:51,950 --> 00:00:55,860
This "wordpress-secrets" has a one secret, the database password.

11
00:00:55,880 --> 00:00:58,480
You can change the database password into something more secure, 

12
00:00:58,500 --> 00:01:00,020
but this is just the passwords.

13
00:01:01,680 --> 00:01:07,660
Then we are going to need a deployment.

14
00:01:07,880 --> 00:01:13,460
So, I have a file called, "single-deployment-no-volumes", 

15
00:01:13,470 --> 00:01:14,070
because we're not using any volumes to persist data yet.

16
00:01:14,120 --> 00:01:16,860
That's why I called it that way.

17
00:01:16,970 --> 00:01:18,650
It only has one replica.

18
00:01:18,830 --> 00:01:23,410
It's just one deployment of our app WordPress.

19
00:01:23,500 --> 00:01:25,550
This deployment has two containers.

20
00:01:25,620 --> 00:01:27,110
Wordpress is a blog software.

21
00:01:27,110 --> 00:01:34,040
In case you didn't know yet, this has a container that is referring to an image, 

22
00:01:34,130 --> 00:01:36,270
"Wordpress:4-php7.0"

23
00:01:36,290 --> 00:01:43,150
This container is one of the official Wordpress images and it comes with PHP and Apache which is the webserver.

24
00:01:43,140 --> 00:01:49,420
So, its websites is blog software, all bundled within one image,

25
00:01:49,510 --> 00:01:55,670
and that's why they're going to pull from a repository. It's going to expose Port 80,

26
00:01:55,860 --> 00:02:02,750
and we need to provide some of the environment variables, we need to provide a password of the database.

27
00:02:02,830 --> 00:02:07,390
And that's why we're going to use this "WORDPRESS_DB_PASSWORDS",

28
00:02:07,390 --> 00:02:10,570
and if you're wondering how do I know the name of this environment variable.

29
00:02:10,630 --> 00:02:17,470
This is all explained on the website a "http://help.docker.com" of Wordpress, and I will show you that,

30
00:02:18,580 --> 00:02:21,970
this is the official repository for wordpress.

31
00:02:22,180 --> 00:02:27,490
It's rich content management system and can utilize plug in switches and teams and then here you have

32
00:02:28,120 --> 00:02:37,350
how to use this image and you can see we have a "WORDPRESS_DB_HOST", "WORDPRESS_DB_USER", 

33
00:02:37,740 --> 00:02:40,370
default "root", that we are not going to change, because it's fine for us,

34
00:02:40,500 --> 00:02:46,680
and "WORDPRESS_DB_PASSWORDS", which we are going to set. You can also change the database name with table prefix.

35
00:02:46,680 --> 00:02:53,850
You can set some other settings like an authentication key and so on, but if you dont set those then

36
00:02:53,850 --> 00:02:56,440
it will be generated, which is fine for us for now.

37
00:02:57,590 --> 00:02:59,340
We also have different images.

38
00:02:59,630 --> 00:03:06,030
We are going to use the one with PHP7 and Apache, but you can also use the one without Apache.

39
00:03:06,110 --> 00:03:10,850
You can put an nginx in front of it if you want, but that would make it a little more complicated.

40
00:03:10,880 --> 00:03:13,560
So we're just going to keep it relatively simple for now.

41
00:03:14,560 --> 00:03:22,050
So, that's how I found out about these wordPress database passwords and the value for these key, 

42
00:03:22,100 --> 00:03:22,840
for the environment variables

43
00:03:22,900 --> 00:03:28,480
it is going to come from the "wordpress-secrets", and I am going to use the database password for this.

44
00:03:30,000 --> 00:03:34,130
The next environment variable that I am going to try is the "WORDPRESS_DATABASE_HOSTS".

45
00:03:34,510 --> 00:03:42,100
And I'm going to use 127.0.0.1, which is basically localhost, 

46
00:03:42,100 --> 00:03:42,900
because this is going to refer to another container.

47
00:03:43,150 --> 00:03:48,940
The second container that I have in this pod. I have mysql container which is a database.

48
00:03:48,940 --> 00:03:50,980
Mysql version is 5.7.

49
00:03:50,980 --> 00:03:54,320
This is also an official image from docker help.

50
00:03:54,400 --> 00:03:59,190
So you can also take a look at docker help how to read instructions.

51
00:04:00,760 --> 00:04:02,820
It exposes the standard.

52
00:04:02,860 --> 00:04:05,070
My secret Port 3306.

53
00:04:05,320 --> 00:04:11,310
And we are also going to define an environment variable with the mysql "root" password and this magic

54
00:04:11,350 --> 00:04:18,820
root password is going to have the same value as this one which is the password that comes from our

55
00:04:19,330 --> 00:04:20,530
"Wordpress-secrets".

56
00:04:20,560 --> 00:04:27,820
So, the password needs to be the same, because our database will be set up with this password to login

57
00:04:27,820 --> 00:04:29,120
and all need to be "root".

58
00:04:29,530 --> 00:04:35,910
And, we also want to let our application know that it can login using the same password.

59
00:04:36,000 --> 00:04:39,220
You can set some more environment variables but this will do.

60
00:04:39,480 --> 00:04:47,930
We have one pod, two containers, and only one replica because if you would increase it to two, it's going to run two databases

61
00:04:48,040 --> 00:04:49,750
and it isn't going to make sense.

62
00:04:50,060 --> 00:04:53,070
You only want one database and one wordpress in front of it.

63
00:04:54,560 --> 00:05:10,460
So, that's a long one, "kubecontrol create -f wordpress/" secrets first, "wordpress-secrets". "Secrets 'wordpress-secrets' created", 

64
00:05:10,490 --> 00:05:15,010
and now we can create that deployment.

65
00:05:16,090 --> 00:05:18,460
"'Wordpress-deployment' created"

66
00:05:19,340 --> 00:05:21,500
So, let's have a look at the pods, 

67
00:05:21,550 --> 00:05:27,780
I still have my "helloworld" from the previous demo and then here I have the wordpress deployments running,

68
00:05:28,470 --> 00:05:31,150
Two containers this time.

69
00:05:33,690 --> 00:05:38,610
"Kubectl gets" or "describe pod"

70
00:05:39,900 --> 00:05:41,640
And here we have two containers running

71
00:05:44,190 --> 00:05:50,690
using our secret. To reach this WordPress,

72
00:05:50,690 --> 00:05:53,260
I need to make a service.

73
00:05:53,350 --> 00:06:00,870
So, I also have a "wordpress-service" that is going to target my HTTP port for my pod.

74
00:06:01,140 --> 00:06:12,300
It's the service for the app Wordpress and is going to expose this port as a "NodePort", "type: NodePort"

75
00:06:13,080 --> 00:06:27,280
"Kubecontrol creates -f", and then, "minikube service wordpress-service", and then the URL.

76
00:06:27,280 --> 00:06:31,060
And then, I should be able to access our wordpress.

77
00:06:31,060 --> 00:06:39,770
I'm going to do this in a web browser and then here we have our WordPress. 

78
00:06:39,770 --> 00:06:41,190
So we just need to do some set up.

79
00:06:41,360 --> 00:06:44,890
Is going to be my blog, my username.

80
00:06:45,590 --> 00:06:47,140
I can use this password.

81
00:06:51,630 --> 00:06:57,780
My email address can discourage, "Discourage search engines indexing this website".

82
00:06:57,790 --> 00:07:00,430
It's not online, it's just on my PC.

83
00:07:01,330 --> 00:07:05,070
And then you can say install and then it is installed.

84
00:07:05,090 --> 00:07:08,670
Goes very quick and you can log in.

85
00:07:08,750 --> 00:07:14,020
I can now log in and then welcome to WordPress, so I have my dashboard.

86
00:07:14,220 --> 00:07:21,430
It's all working and if I click on "Visit Website" I can actually visit my blog website.

87
00:07:21,500 --> 00:07:31,310
So it was that simple to set up a blog, but it's not fully working yet, because this container is still

88
00:07:31,310 --> 00:07:35,720
going to write some data to the local image.

89
00:07:36,000 --> 00:07:43,070
If I'm going to upload media like images then those images will be written on the container,

90
00:07:43,190 --> 00:07:46,180
if that container restarts all my images will be gone.

91
00:07:46,520 --> 00:07:51,300
So, we will have to find a solution for that and I will show you what happens when the pod gets killed.

92
00:07:51,770 --> 00:07:53,900
"Kubectl get pods"

93
00:07:53,960 --> 00:08:00,050
So let's say that our pod gets killed, "kubectl"--

94
00:08:00,660 --> 00:08:07,350
I'm just going to delete my photos, which will be launched again by the deployment.

95
00:08:08,160 --> 00:08:13,560
So my book is deleted and your pod is launched.

96
00:08:13,890 --> 00:08:21,710
But what's going to happen now, because we launched and mysql that contains all the data.

97
00:08:21,870 --> 00:08:23,790
The installation that we have done now.

98
00:08:24,450 --> 00:08:27,100
The main login and password that I filled out,

99
00:08:27,120 --> 00:08:31,590
but like I said earlier those images they boot up.

100
00:08:31,590 --> 00:08:37,200
You can find some data to that image, but when you restart a pod it's nowhere saved because there are

101
00:08:37,200 --> 00:08:45,910
no data mounted and no volumes that we are using yet to keep the data saved somewhere.

102
00:08:46,130 --> 00:08:48,750
It's just, if a container restarts the data will be gone.

103
00:08:48,780 --> 00:08:52,950
So, what happens if our vault gets rescheduled or it is killed.

104
00:08:53,160 --> 00:09:03,240
Well, I will just refresh this page and all the data is gone, and I can just reinstall WordPress, because my

105
00:09:03,240 --> 00:09:08,590
database is completely wiped, it is reinstalled, because the data was not saved.

106
00:09:08,640 --> 00:09:14,540
This is still something that we have to find a solution for and I will explain the solution in the volumes

107
00:09:14,550 --> 00:09:16,130
lecture later on.

108
00:09:16,620 --> 00:09:21,660
But for now it's already a very interesting elab, because this already touches a lot of things,

109
00:09:21,660 --> 00:09:29,430
we had a deployment of service, secrets, and environment variables, and multiple images in our pod.
