1
1

00:00:00,130  -->  00:00:01,430
<v Instructor>At this point,</v>
2

2

00:00:01,430  -->  00:00:04,430
you should've set up your Vagrant box,
3

3

00:00:04,430  -->  00:00:05,767
you should've set up AWS,
4

4

00:00:07,304  -->  00:00:09,810
so now we can set up our Kubernetes cluster
5

5

00:00:09,810  -->  00:00:10,833
using kops.
6

6

00:00:11,730  -->  00:00:14,210
Here, I'm logged in to
7

7

00:00:14,210  -->  00:00:16,333
my Ubuntu xenia logs.
8

8

00:00:17,510  -->  00:00:19,060
Before submitting the cluster
9

9

00:00:20,290  -->  00:00:21,760
you need to make sure that you have
10

10

00:00:21,760  -->  00:00:24,330 line:15% 
kubectl installed as well.
11

11

00:00:24,330  -->  00:00:27,543 line:15% 
This URL you can find in the procedure document.
12

12

00:00:28,980  -->  00:00:30,230
You can just download it.
13

13

00:00:32,710  -->  00:00:33,543
You move it
14

14

00:00:35,440  -->  00:00:38,340
to /usr/local/bin/
15

15

00:00:38,340  -->  00:00:39,840
exactly where kops is, as well
16

16

00:00:41,000  -->  00:00:41,833
and you give it
17

17

00:00:42,750  -->  00:00:44,223
execution permissions.
18

18

00:00:45,577  -->  00:00:47,850
Then you start kubectl.
19

19

00:00:47,850  -->  00:00:49,320
You have kubectl
20

20

00:00:49,320  -->  00:00:50,153
available.
21

21

00:00:52,310  -->  00:00:54,670
Before creating the cluster you will also have to
22

22

00:00:54,670  -->  00:00:56,750
create new SSH keys.
23

23

00:00:56,750  -->  00:00:58,730
Those SSH keys will be used
24

24

00:00:58,730  -->  00:01:00,453
to login to the cluster.
25

25

00:01:03,400  -->  00:01:06,410
SSH keygen can create new keys.
26

26

00:01:06,410  -->  00:01:07,610
So, what I'm going to do is
27

27

00:01:07,610  -->  00:01:08,910
I'm going to create a new key
28

28

00:01:08,910  -->  00:01:11,733
in .ssh/id_rsa.
29

29

00:01:14,240  -->  00:01:15,810
This public key,
30

30

00:01:15,810  -->  00:01:17,460
id_rsa.pub
31

31

00:01:17,460  -->  00:01:20,690
will be uploaded to our instances.
32

32

00:01:20,690  -->  00:01:23,640
That way, we will be able to login to our instances
33

33

00:01:23,640  -->  00:01:24,920
using our private key.
34

34

00:01:24,920  -->  00:01:26,700
So, id_rsa is our private key
35

35

00:01:26,700  -->  00:01:28,357
and this is our public key.
36

36

00:01:28,357  -->  00:01:30,260
The public key goes in the instance
37

37

00:01:30,260  -->  00:01:33,223
and we login with the private key.
38

38

00:01:35,545  -->  00:01:36,750
Just one thing I want to do
39

39

00:01:36,750  -->  00:01:39,283
before I'm going to enter the kops command is,
40

40

00:01:41,780  -->  00:01:45,383
I'm just going to rename the kops binary.
41

41

00:01:46,458  -->  00:01:48,300
I'm going to rename it to just kops,
42

42

00:01:48,300  -->  00:01:50,833
rather than having kops-linux-amd64.
43

43

00:01:51,770  -->  00:01:55,010
This is the kops command I'm going to execute
44

44

00:01:55,010  -->  00:01:58,690
and this kops command is not going to do anything yet,
45

45

00:01:58,690  -->  00:02:00,950
because it needs another step before
46

46

00:02:00,950  -->  00:02:02,410
it's really going to execute
47

47

00:02:02,410  -->  00:02:04,040
the commands on the AWS.
48

48

00:02:05,130  -->  00:02:07,440
But this one is going to create one master,
49

49

00:02:07,440  -->  00:02:10,530
a t2.micro and two nodes.
50

50

00:02:10,530  -->  00:02:11,483
Also, t2.micro.
51

51

00:02:12,360  -->  00:02:14,440
So we have kops create cluster,
52

52

00:02:14,440  -->  00:02:15,410
give the name,
53

53

00:02:15,410  -->  00:02:18,260
this needs to be the full DNS name of the cluster.
54

54

00:02:18,260  -->  00:02:20,650
I have kubernetes.newtech.academy,
55

55

00:02:20,650  -->  00:02:23,670
the one that I setup in the root of the tree.
56

56

00:02:23,670  -->  00:02:26,750
I'm going to save the state in s3,
57

57

00:02:26,750  -->  00:02:28,320
it's my s3 bucket
58

58

00:02:29,370  -->  00:02:33,050
and I'm going to launch it in the eu-west-1a zone.
59

59

00:02:33,050  -->  00:02:34,860
You're probably going to use another zone
60

60

00:02:34,860  -->  00:02:38,373
us-east-1a, us-west-1a and so on.
61

61

00:02:39,330  -->  00:02:40,720
Node-count is two
62

62

00:02:40,720  -->  00:02:43,090
and the node size t2.micro.
63

63

00:02:43,090  -->  00:02:45,500
The master size is also t2.micro
64

64

00:02:45,500  -->  00:02:49,340
and the DNS zone is is kubernetes.newtech.academy.
65

65

00:02:49,340  -->  00:02:50,600
I'm going to execute this
66

66

00:02:51,500  -->  00:02:54,270
and then you'll be able to preview the changes
67

67

00:02:54,270  -->  00:02:55,997
that will be made to AWS.
68

68

00:02:57,520  -->  00:02:58,720
So, it's going to make
69

69

00:02:58,720  -->  00:03:01,270
Auto Scaling Groups for our nodes.
70

70

00:03:01,270  -->  00:03:03,860
It's going to launch a master,
71

71

00:03:03,860  -->  00:03:07,130
it's going to provision also SSD drives.
72

72

00:03:07,130  -->  00:03:09,630
Then, if you want to really launch this cluster
73

73

00:03:09,630  -->  00:03:12,710 line:15% 
then we can just do this with kops update cluster
74

74

00:03:12,710  -->  00:03:15,210
and then the name with --yes
75

75

00:03:15,210  -->  00:03:16,740
and then it's going to launch.
76

76

00:03:16,740  -->  00:03:19,200
If you want to make changes first,
77

77

00:03:19,200  -->  00:03:22,170 line:15% 
you can edit the cluster, using kops edit cluster
78

78

00:03:22,170  -->  00:03:23,640
and then the name.
79

79

00:03:23,640  -->  00:03:26,090
But because the state is on s3,
80

80

00:03:26,090  -->  00:03:28,760
you also have to specify the state.
81

81

00:03:28,760  -->  00:03:30,410
Then the command will work
82

82

00:03:30,410  -->  00:03:33,470
and then you can still make some changes.
83

83

00:03:33,470  -->  00:03:35,540
I'm not going to make any changes at this point,
84

84

00:03:35,540  -->  00:03:39,080
I'm just going to launch the cluster.
85

85

00:03:39,080  -->  00:03:41,000 line:15% 
I'm going to use kops update cluster
86

86

00:03:41,000  -->  00:03:42,880 line:15% 
and then specify yes
87

87

00:03:42,880  -->  00:03:45,333
and again I will specify the state.
88

88

00:03:46,630  -->  00:03:48,260
This will then launch the cluster,
89

89

00:03:48,260  -->  00:03:49,960
it will take a couple of minutes
90

90

00:03:49,960  -->  00:03:52,920
and then I can try to run one of the examples.
91

91

00:03:52,920  -->  00:03:55,710
So, now the cluster has been created.
92

92

00:03:55,710  -->  00:03:58,170
Let's have a look what this means.
93

93

00:03:58,170  -->  00:04:02,450
Wrote config for kubernetes.newtech.academy
94

94

00:04:02,450  -->  00:04:04,493
in this file.
95

95

00:04:05,550  -->  00:04:07,300
I'm just going to get to this file.
96

96

00:04:10,020  -->  00:04:13,380
This is actually the certificates that we need
97

97

00:04:13,380  -->  00:04:17,860 line:15% 
and the password to login to our new cluster.
98

98

00:04:17,860  -->  00:04:21,250
That's what kops configured already for us.
99

99

00:04:21,250  -->  00:04:22,570
So, for instance,
100

100

00:04:22,570  -->  00:04:24,040
we have here the server:
101

101

00:04:24,040  -->  00:04:27,570
https://api.kubernetes.newtech.academy
102

102

00:04:27,570  -->  00:04:29,813
and that's what you'll be able to use.
103

103

00:04:31,100  -->  00:04:33,160
Let's see if the nodes are up.
104

104

00:04:33,160  -->  00:04:36,393
So, kubectl get node.
105

105

00:04:37,840  -->  00:04:39,660 line:15% 
Three nodes here on Ready status.
106

106

00:04:39,660  -->  00:04:41,110 line:15% 
One master.
107

107

00:04:41,110  -->  00:04:42,070 line:15% 
This is going to be the master,
108

108

00:04:42,070  -->  00:04:43,950 line:15% 
it's in a different IP range
109

109

00:04:43,950  -->  00:04:46,783
and then two nodes.
110

110

00:04:49,990  -->  00:04:52,510
Let's try to run the same deployment
111

111

00:04:52,510  -->  00:04:54,360
as we did on the minikube cluster.
112

112

00:04:54,360  -->  00:04:57,150
To test whether our Kubernetes cluster using kops
113

113

00:04:57,150  -->  00:04:58,660
is working.
114

114

00:04:58,660  -->  00:05:02,360 line:15% 
So, I'm going to do kubectl run hello-minikube,
115

115

00:05:02,360  -->  00:05:04,270 line:15% 
which is the name of the deployment
116

116

00:05:04,270  -->  00:05:05,740 line:15% 
and it's going to use this image.
117

117

00:05:05,740  -->  00:05:07,783 line:15% 
The echoserver version 1.4.
118

118

00:05:09,192  -->  00:05:11,610 line:15% 
An echoserver in this docker container
119

119

00:05:11,610  -->  00:05:13,370 line:15% 
listens on port=8080.
120

120

00:05:13,370  -->  00:05:16,193 line:15% 
So, specify port 8080 as argument.
121

121

00:05:17,520  -->  00:05:20,900 line:15% 
This is going to create the deployment "hello-minikube"
122

122

00:05:20,900  -->  00:05:22,940 line:15% 
and now we can also expose the service
123

123

00:05:22,940  -->  00:05:25,453 line:15% 
so that we can access it externally.
124

124

00:05:25,453  -->  00:05:29,620 line:15% 
You can do it using kubectl expose deployment,
125

125

00:05:29,620  -->  00:05:32,350 line:15% 
the name of the deployment which is hello-minikube
126

126

00:05:32,350  -->  00:05:33,700 line:15% 
and we give it a type.
127

127

00:05:33,700  -->  00:05:35,520 line:15% 
This is the type of the service.
128

128

00:05:35,520  -->  00:05:36,560 line:15% 
For example,
129

129

00:05:36,560  -->  00:05:38,870 line:15% 
if you want a loadbalancer in front of this service,
130

130

00:05:38,870  -->  00:05:40,950 line:15% 
then we can say type=loadbalancer,
131

131

00:05:40,950  -->  00:05:43,100 line:15% 
which I'll cover in the next lecture.
132

132

00:05:43,100  -->  00:05:44,120 line:15% 
I'll do now
133

133

00:05:44,120  -->  00:05:45,660 line:15% 
a more simple version,
134

134

00:05:45,660  -->  00:05:47,450 line:15% 
just NodePort,
135

135

00:05:47,450  -->  00:05:49,790 line:15% 
which will expose a port
136

136

00:05:49,790  -->  00:05:53,460 line:15% 
on every node of this Kubernetes cluster,
137

137

00:05:53,460  -->  00:05:55,323 line:15% 
that we can contact the service on.
138

138

00:05:56,200  -->  00:05:59,070 line:15% 
It is on every node except the master.
139

139

00:05:59,070  -->  00:06:01,380 line:15% 
You can connect to every node
140

140

00:06:01,380  -->  00:06:02,370 line:15% 
on a specific port,
141

141

00:06:02,370  -->  00:06:03,653 line:15% 
but not on the master.
142

142

00:06:05,460  -->  00:06:08,170
So, service hello-minikube exposed.
143

143

00:06:08,170  -->  00:06:10,553
So, for now I'll do a kubectl get services.
144

144

00:06:11,400  -->  00:06:13,820
We see now our hello-minikube service,
145

145

00:06:13,820  -->  00:06:15,370
type NodePort
146

146

00:06:15,370  -->  00:06:18,440
and this is the port that we can contact
147

147

00:06:18,440  -->  00:06:19,273
our service on.
148

148

00:06:20,650  -->  00:06:21,910
This port is now open
149

149

00:06:21,910  -->  00:06:24,770
on every single node in our Kubernetes cluster,
150

150

00:06:24,770  -->  00:06:25,763
except the master.
151

151

00:06:26,690  -->  00:06:29,013
Let's have a look at the AWS console.
152

152

00:06:31,160  -->  00:06:32,597
Let's first go to EC2.
153

153

00:06:34,180  -->  00:06:36,110
Make sure that you are in the correct region.
154

154

00:06:36,110  -->  00:06:37,320
I launched in Ireland,
155

155

00:06:37,320  -->  00:06:38,970
so I am in the Ireland region.
156

156

00:06:38,970  -->  00:06:41,680
Then you should see three running instances.
157

157

00:06:41,680  -->  00:06:43,380
So, I have here
158

158

00:06:43,380  -->  00:06:45,850
two nodes and one master node.
159

159

00:06:45,850  -->  00:06:46,770
This one is terminated,
160

160

00:06:46,770  -->  00:06:48,800
so you can ignore this one.
161

161

00:06:48,800  -->  00:06:50,230
If you don't see your nodes,
162

162

00:06:50,230  -->  00:06:51,690
you can also have a look
163

163

00:06:51,690  -->  00:06:53,250
at the Auto Scaling Group,
164

164

00:06:53,250  -->  00:06:54,643
which is here on the left.
165

165

00:06:55,640  -->  00:06:57,690
Auto Scaling Groups.
166

166

00:06:57,690  -->  00:06:59,450
You should have two Auto Scaling groups.
167

167

00:06:59,450  -->  00:07:00,880
One for the master
168

168

00:07:00,880  -->  00:07:02,360
and one for the nodes.
169

169

00:07:02,360  -->  00:07:05,080
This Auto Scaling group that will launch instances.
170

170

00:07:05,080  -->  00:07:06,737 line:15% 
So, if something is wrong,
171

171

00:07:06,737  -->  00:07:09,640 line:15% 
for example, if you're reaching AWS limits,
172

172

00:07:09,640  -->  00:07:11,830 line:15% 
then it should be displayed here,
173

173

00:07:11,830  -->  00:07:15,256 line:15% 
than for some reason it couldn't launch an instance.
174

174

00:07:15,256  -->  00:07:17,280
But, for us, everything runs fine.
175

175

00:07:17,280  -->  00:07:19,190
We have two instances running.
176

176

00:07:19,190  -->  00:07:20,700
We exposed the node port,
177

177

00:07:20,700  -->  00:07:21,780
which means that
178

178

00:07:21,780  -->  00:07:24,300
those two nodes will reply
179

179

00:07:24,300  -->  00:07:25,680
on this port
180

180

00:07:25,680  -->  00:07:28,400
and redirect my traffic to this service.
181

181

00:07:28,400  -->  00:07:30,000
Before we can access it, you need to make sure
182

182

00:07:30,000  -->  00:07:31,730
that a firewall is not blocking us.
183

183

00:07:31,730  -->  00:07:33,983
Well, these nodes have also firewall.
184

184

00:07:35,090  -->  00:07:36,853 line:15% 
They have a security group.
185

185

00:07:37,810  -->  00:07:39,170 line:15% 
To see the security group,
186

186

00:07:39,170  -->  00:07:41,130 line:15% 
you can just click on the instance
187

187

00:07:41,130  -->  00:07:44,760 line:15% 
and then you can see the inbound and outbound rules.
188

188

00:07:44,760  -->  00:07:47,070 line:15% 
So, here, port 22 is open,
189

189

00:07:47,070  -->  00:07:49,260 line:15% 
but not the node port that we just
190

190

00:07:49,260  -->  00:07:50,910 line:15% 
created using this service.
191

191

00:07:50,910  -->  00:07:52,960 line:15% 
So, we will need to make changes to this.
192

192

00:07:54,095  -->  00:07:55,800 line:15% 
You will click on the security group
193

193

00:07:55,800  -->  00:07:57,290 line:15% 
and go to inbound,
194

194

00:07:57,290  -->  00:07:58,123 line:15% 
click edit
195

195

00:07:58,123  -->  00:08:00,420 line:15% 
and you can add a new rule.
196

196

00:08:00,420  -->  00:08:01,530 line:15% 
You can say
197

197

00:08:01,530  -->  00:08:03,490 line:15% 
Custom TCP.
198

198

00:08:03,490  -->  00:08:05,510 line:15% 
I can copy and paste the port
199

199

00:08:05,510  -->  00:08:07,000 line:15% 
that's exposed.
200

200

00:08:07,000  -->  00:08:07,833
This was 30032.
201

201

00:08:10,490  -->  00:08:12,020
I can paste this here
202

202

00:08:12,020  -->  00:08:15,070
and you can either open it for everyone
203

203

00:08:15,070  -->  00:08:17,140
0.0.0.0/0
204

204

00:08:17,140  -->  00:08:19,483
or only for my IP address.
205

205

00:08:20,380  -->  00:08:22,340
I'll go choose only my IP address.
206

206

00:08:22,340  -->  00:08:25,220
So, only me will be able to access this service.
207

207

00:08:25,220  -->  00:08:27,060
I click save.
208

208

00:08:27,060  -->  00:08:28,960
I can go back to my node
209

209

00:08:30,110  -->  00:08:32,290
and I can take either--
210

210

00:08:32,290  -->  00:08:35,440
I can take the external IP address of this node
211

211

00:08:35,440  -->  00:08:37,320
or of this node.
212

212

00:08:37,320  -->  00:08:39,340 line:15% 
The IPv4 Public IP address
213

213

00:08:39,340  -->  00:08:40,760 line:15% 
this is here.
214

214

00:08:40,760  -->  00:08:41,840 line:15% 
I can copy this
215

215

00:08:42,830  -->  00:08:46,910
and if I got to this IP address port 30032
216

216

00:08:46,910  -->  00:08:49,700
I get the response from my service
217

217

00:08:49,700  -->  00:08:51,750
that I launched on my Kubernetes cluster.
218

218

00:08:52,890  -->  00:08:53,870
So, this works.
219

219

00:08:53,870  -->  00:08:55,670
I have a running Kubernetes cluster.
220

220

00:08:56,780  -->  00:08:59,600
I have two normal nodes and one master node.
221

221

00:08:59,600  -->  00:09:00,950
I created our first deployment,
222

222

00:09:00,950  -->  00:09:02,290
our fist service
223

223

00:09:02,290  -->  00:09:04,720
and I exposed a node port that I now
224

224

00:09:04,720  -->  00:09:06,940
can connect to
225

225

00:09:06,940  -->  00:09:09,490
using the IP address of
226

226

00:09:09,490  -->  00:09:10,793
any of those two nodes.
227

227

00:09:11,870  -->  00:09:13,340
In the next lecture I will explain to you
228

228

00:09:13,340  -->  00:09:15,640
a better approach using a loadbalancer,
229

229

00:09:15,640  -->  00:09:17,230
that also gives you a host name.
230

230

00:09:17,230  -->  00:09:20,290
Then you can also use a DNS to
231

231

00:09:20,290  -->  00:09:22,880
give your service a real DNS name.
232

232

00:09:22,880  -->  00:09:23,903
A real domain name.
233

233

00:09:25,330  -->  00:09:26,480
Once you did this demo
234

234

00:09:26,480  -->  00:09:28,270
and you're not using the cluster anymore.
235

235

00:09:28,270  -->  00:09:30,720
I would recommend you to remove the cluster.
236

236

00:09:30,720  -->  00:09:32,270
I will show you how to do that.
237

237

00:09:34,650  -->  00:09:35,870
To delete our cluster
238

238

00:09:35,870  -->  00:09:39,010
we can do kops delete cluster.
239

239

00:09:39,010  -->  00:09:40,710
Then the name of the cluster
240

240

00:09:40,710  -->  00:09:44,820
kuberenetes.newtech.academy in my case.
241

241

00:09:44,820  -->  00:09:47,650
We can also add the state.
242

242

00:09:47,650  -->  00:09:49,563
The state is an s3.
243

243

00:09:51,260  -->  00:09:53,050
Then it's going to show us
244

244

00:09:53,050  -->  00:09:54,533
what will be removed.
245

245

00:09:55,410  -->  00:09:56,660
You must specify
246

246

00:09:56,660  -->  00:09:57,817
yes to delete cluster.
247

247

00:09:57,817  -->  00:10:00,520
You're going to execute the same command
248

248

00:10:00,520  -->  00:10:01,720
using --yes
249

249

00:10:01,720  -->  00:10:04,940
and it will then bring the cluster down again.
250

250

00:10:04,940  -->  00:10:08,040
Then, the next time you want to use it again
251

251

00:10:08,040  -->  00:10:09,350
you can just execute
252

252

00:10:10,290  -->  00:10:11,820
kops create again,
253

253

00:10:11,820  -->  00:10:14,023
like you did in the beginning of this lecture.
254

254

00:10:15,030  -->  00:10:16,410
If you have any issues
255

255

00:10:16,410  -->  00:10:18,290
with bringing up this cluster,
256

256

00:10:18,290  -->  00:10:19,860
there's a trouble shooting lecture
257

257

00:10:19,860  -->  00:10:21,990
if you have DNS issues
258

258

00:10:21,990  -->  00:10:25,200
or you can use the Q &amp; A to ask me questions
259

259

00:10:25,200  -->  00:10:28,150
if you run into any problems.
260

260

00:10:28,150  -->  00:10:29,280
If everything went fine,
261

261

00:10:29,280  -->  00:10:31,783
just continue with the next lectures.
262

262

00:10:32,840  -->  00:10:34,480
This deleting of the cluster will take
263

263

00:10:34,480  -->  00:10:35,650
a couple of minutes.
264

264

00:10:35,650  -->  00:10:37,863
Then your cluster is removed.
