WEBVTT
1
1

00:00:00.600  -->  00:00:04.110
<v ->So here I am logged in into my Digital Ocean account.</v>
2

2

00:00:04.110  -->  00:00:06.543
In networking I can go to firewalls.
3

3

00:00:07.510  -->  00:00:09.613
I have the Kubernetes-cluster file.
4

4

00:00:11.060  -->  00:00:14.623
And here I already did it, I added two rules.
5

5

00:00:15.840  -->  00:00:18.820
Two new ones, http and hps.
6

6

00:00:18.820  -->  00:00:21.403
So here you can just pick hp and hps.
7

7

00:00:22.615  -->  00:00:25.570
And then it's always TCP, port AT for HTP
8

8

00:00:25.570  -->  00:00:30.140
port 443 for HTTPS and then you going to allow all IPv4,
9

9

00:00:30.140  -->  00:00:33.930
all IPv6 and this will allow all traffic.
10

10

00:00:33.930  -->  00:00:35.451
If you forget to do this
11

11

00:00:35.451  -->  00:00:38.160
and you're gonna create the SL certificate is going to fail,
12

12

00:00:38.160  -->  00:00:40.433
because what lets encrypt is going to do,
13

13

00:00:40.433  -->  00:00:44.350
it's going to try to connect to your IP address.
14

14

00:00:44.350  -->  00:00:46.860
And if it cannot connect, then the verification mechanism
15

15

00:00:46.860  -->  00:00:47.883
is going to fail.
16

16

00:00:48.930  -->  00:00:50.853
Let's try to run an application now.
17

17

00:00:52.080  -->  00:00:53.853
So let's open this README again.
18

18

00:00:54.890  -->  00:00:57.153
We did the nginx ingress.
19

19

00:00:58.006  -->  00:00:59.420
And we're going to start an application.
20

20

00:00:59.420  -->  00:01:01.710
This is just an example application
21

21

00:01:01.710  -->  00:01:02.860
and I'm going to start.
22

22

00:01:04.780  -->  00:01:08.030
I'll create them and I'll show you what's in them.
23

23

00:01:08.030  -->  00:01:10.320
These are just the deployments.
24

24

00:01:10.320  -->  00:01:11.330
Kubernetes demo.
25

25

00:01:11.330  -->  00:01:13.770
It will just show us, hello world.
26

26

00:01:13.770  -->  00:01:15.270
If you have a service for this
27

27

00:01:16.120  -->  00:01:17.410
and then we're going to connect this
28

28

00:01:17.410  -->  00:01:21.233
with the ingress controller, my app ingress.
29

29

00:01:23.030  -->  00:01:26.063
Here we have the ingress controller, kind ingress.
30

30

00:01:27.650  -->  00:01:30.680
The name is myapp, this ingress controller,
31

31

00:01:30.680  -->  00:01:31.780
and then we have rule.
32

32

00:01:33.220  -->  00:01:37.600
The rules says that if the host is myapp.newtech.academy,
33

33

00:01:37.600  -->  00:01:40.967
then this backend here, myapp,
34

34

00:01:42.790  -->  00:01:46.793
the service in Kubernetes on port 80 on http.
35

35

00:01:48.757  -->  00:01:52.900
So whenever I'm going to type this in my browser,
36

36

00:01:52.900  -->  00:01:54.800
I should be able to connect to my app.
37

37

00:01:55.740  -->  00:01:58.020
To be able to make this work,
38

38

00:01:58.020  -->  00:02:00.274
you need a domain name.
39

39

00:02:00.274  -->  00:02:01.860
You need to be able to edit your DNS.
40

40

00:02:01.860  -->  00:02:04.893
If you're using (mumbles), that is in route 53.
41

41

00:02:05.800  -->  00:02:08.320
If you just register the domain name anywhere,
42

42

00:02:08.320  -->  00:02:11.370
you should most importantly have the DNS control panel,
43

43

00:02:11.370  -->  00:02:13.020
and that's what I'm going to use.
44

44

00:02:14.090  -->  00:02:15.320
In this DNS control panel,
45

45

00:02:15.320  -->  00:02:18.692
you will then say myapp.newtech.academy,
46

46

00:02:18.692  -->  00:02:20.490
goes to an IP address.
47

47

00:02:20.490  -->  00:02:23.138
So what IP addresses can go to.
48

48

00:02:23.138  -->  00:02:26.330
Let's go back to our Digital Ocean control center.
49

49

00:02:26.330  -->  00:02:29.883
Here we have the monster and one, two, three notes.
50

50

00:02:30.720  -->  00:02:32.080
What I'm going to do is I'm just going
51

51

00:02:32.080  -->  00:02:34.180
to take one node, node one
52

52

00:02:35.130  -->  00:02:39.580
and put a DNS records from myapp.newtech.academy
53

53

00:02:39.580  -->  00:02:40.893
to this IP address.
54

54

00:02:41.900  -->  00:02:43.340
Now with Digital Ocean,
55

55

00:02:43.340  -->  00:02:46.793
the downside is that these IP addresses can change.
56

56

00:02:47.660  -->  00:02:50.713
This node can go down and then you will use this one.
57

57

00:02:51.570  -->  00:02:53.000
So the solution for Digital Ocean
58

58

00:02:53.000  -->  00:02:56.140
is that you can also use floating IP addresses.
59

59

00:02:56.140  -->  00:02:58.320
So you can click here
60

60

00:02:58.320  -->  00:03:00.460
and then you can enable a floating IP address.
61

61

00:03:00.460  -->  00:03:05.250
And this IP address, you can then manually or automatically
62

62

00:03:05.250  -->  00:03:07.023
move from one node to another node.
63

63

00:03:08.660  -->  00:03:12.040
Now, we are using Digital Ocean just as an example.
64

64

00:03:12.040  -->  00:03:14.463
You're going to maybe run something on Prime.
65

65

00:03:15.300  -->  00:03:17.100
Maybe use another cloud divider.
66

66

00:03:17.100  -->  00:03:19.796
So how exactly you going to conquer this,
67

67

00:03:19.796  -->  00:03:22.600
it's a bit out of scope of this course.
68

68

00:03:22.600  -->  00:03:25.510
You just have to make sure that the IP address
69

69

00:03:25.510  -->  00:03:28.170
that you're going to pick now is either static.
70

70

00:03:28.170  -->  00:03:29.930
It can also be a static IP address
71

71

00:03:29.930  -->  00:03:32.053
or can move from one node to another node.
72

72

00:03:33.090  -->  00:03:35.440
As long as this node is running, there's no issue.
73

73

00:03:35.440  -->  00:03:38.580
So for the demo, I will just use only one IP address.
74

74

00:03:38.580  -->  00:03:42.683
Only this IP address to confer as a DNS record.
75

75

00:03:45.500  -->  00:03:48.346
This is the Namecheap dashboard.
76

76

00:03:48.346  -->  00:03:52.460
My domain name is registered at Namecheap.
77

77

00:03:52.460  -->  00:03:54.680
So I just logged in here.
78

78

00:03:54.680  -->  00:03:57.640
I bought this domain name years ago.
79

79

00:03:57.640  -->  00:03:59.810
You can then click on the domain name,
80

80

00:03:59.810  -->  00:04:01.360
and then there's advanced DNS
81

81

00:04:01.360  -->  00:04:03.093
where you can then add records.
82

82

00:04:07.200  -->  00:04:09.170
So we can add a new record here.
83

83

00:04:09.170  -->  00:04:12.963
It's of type a, host is gonna be myapp
84

84

00:04:12.963  -->  00:04:15.870
and then the IP address is then going to
85

85

00:04:15.870  -->  00:04:19.323
be the IP address of the first node.
86

86

00:04:20.390  -->  00:04:22.823
And then you click on save the changes.
87

87

00:04:24.890  -->  00:04:28.900
And then it'll be added here, myapp, this IP.
88

88

00:04:28.900  -->  00:04:32.600
I also has www.myapp with the same IP address.
89

89

00:04:32.600  -->  00:04:33.843
But you don't have to.
90

90

00:04:35.171  -->  00:04:37.240
You can use one or more records.
91

91

00:04:37.240  -->  00:04:39.820
So this point to this IP address and DNS
92

92

00:04:39.820  -->  00:04:42.600
is sketched so it's not easy to change this.
93

93

00:04:42.600  -->  00:04:44.600
So this should be a static IP address
94

94

00:04:45.630  -->  00:04:47.410
in case you are using Digital Ocean.
95

95

00:04:47.410  -->  00:04:50.320
You can use a floating IP address like I explained,
96

96

00:04:50.320  -->  00:04:53.140
otherwise, on Prime, what other people also do
97

97

00:04:53.140  -->  00:04:56.440
is to put a (mumbles) in front of your Kubernetes cluster
98

98

00:04:56.440  -->  00:04:59.163
and use that IP address as a static IP address.
99

99

00:05:00.180  -->  00:05:04.350
So then if I now try to go to this URL
100

100

00:05:04.350  -->  00:05:05.753
that should actually work.
101

101

00:05:08.450  -->  00:05:10.010
Let me try this with curl.
102

102

00:05:10.010  -->  00:05:14.414
So if I go to this IP address with the node
103

103

00:05:14.414  -->  00:05:18.237
I get a default backend 404.
104

104

00:05:20.080  -->  00:05:22.903
This is the default backend of the engine x controller.
105

105

00:05:23.930  -->  00:05:28.883
Now I should also be able to go to myapp.newtech.academy
106

106

00:05:31.464  -->  00:05:33.770
and I get the return with the 503 error.
107

107

00:05:33.770  -->  00:05:35.883
So let's have a look at our pots.
108

108

00:05:38.167  -->  00:05:40.473
Myapp is running now for eight minutes.
109

109

00:05:43.300  -->  00:05:44.950
Let's have a look at the service.
110

110

00:05:46.504  -->  00:05:48.033
Myapp is running for 3,000.
111

111

00:05:49.520  -->  00:05:51.170
Let's have a look at our ingress.
112

112

00:05:54.550  -->  00:05:57.830
And it seems that I made a small mistake here
113

113

00:05:57.830  -->  00:05:58.813
in my app ingress.
114

114

00:05:59.790  -->  00:06:02.830
This pot is running on port 3000,
115

115

00:06:02.830  -->  00:06:05.360
but the search port was set up 80.
116

116

00:06:05.360  -->  00:06:09.263
So let's apply this.
117

117

00:06:14.110  -->  00:06:15.693
And then now it should work.
118

118

00:06:18.480  -->  00:06:19.963
It says hello world.
119

119

00:06:21.970  -->  00:06:25.700
So myapp.newtech.academy, the ingress controller is working.
120

120

00:06:25.700  -->  00:06:27.360
I set the firewall.
121

121

00:06:27.360  -->  00:06:29.350
Let's encrypt should also be able to access it
122

122

00:06:29.350  -->  00:06:30.883
once I do the verification.
123

123

00:06:31.860  -->  00:06:32.953
So what's next?
124

124

00:06:34.100  -->  00:06:37.370
I can create the certification manager.
125

125

00:06:37.370  -->  00:06:38.870
I can do helm install,
126

126

00:06:38.870  -->  00:06:41.760
or the certification manager in the kube system.
127

127

00:06:41.760  -->  00:06:44.483
It's gonna be stable slash/cert-manager.
128

128

00:06:45.950  -->  00:06:48.170
Cert-manager has been deployed successfully.
129

129

00:06:48.170  -->  00:06:50.470
In order to begin issuing certificates,
130

130

00:06:50.470  -->  00:06:53.340
we need a clusterissuer or issuer
131

131

00:06:53.340  -->  00:06:55.360
and then we need a certificate.
132

132

00:06:55.360  -->  00:06:57.143
So I already prepared as a front,
133

133

00:06:58.500  -->  00:07:01.840
we have an issuer for staging and for pots.
134

134

00:07:01.840  -->  00:07:06.080
You can only do 20 requests per week too lets encrypt
135

135

00:07:06.080  -->  00:07:09.540
so it's best to do staging first
136

136

00:07:09.540  -->  00:07:10.920
to make sure everything works
137

137

00:07:10.920  -->  00:07:14.163
and only then to use the production.
138

138

00:07:15.480  -->  00:07:16.630
I'm using the issuer.
139

139

00:07:16.630  -->  00:07:17.920
You can also use cluster issuer.
140

140

00:07:17.920  -->  00:07:20.707
So this is only for the default landspace,
141

141

00:07:20.707  -->  00:07:22.857
plus the issuer is for all the name spaces.
142

142

00:07:24.791  -->  00:07:26.540
You need to enter your email address here
143

143

00:07:26.540  -->  00:07:28.820
so I will leave it like that
144

144

00:07:28.820  -->  00:07:31.140
and I am going to enter my email address here,
145

145

00:07:31.140  -->  00:07:33.540
but when you do this demo,
146

146

00:07:33.540  -->  00:07:36.853
you will have to replace this line as well.
147

147

00:07:37.990  -->  00:07:40.333
I'll do the same in the production one.
148

148

00:07:45.880  -->  00:07:50.880
And then I'm going to kubectl create the issuer for staging
149

149

00:07:52.220  -->  00:07:54.610
and the issuer for production.
150

150

00:07:54.610  -->  00:07:55.650
So those are the issuers.
151

151

00:07:55.650  -->  00:07:56.680
They just describe
152

152

00:07:56.680  -->  00:08:01.006
that less encryptable issuer a certificate for us.
153

153

00:08:01.006  -->  00:08:01.863
(mumbles) again.
154

154

00:08:03.660  -->  00:08:08.330
It is going to use this staging API for lets encrypt.
155

155

00:08:08.330  -->  00:08:11.270
And this email address will notify me if anything goes wrong
156

156

00:08:11.270  -->  00:08:13.526
with your renewal of certificate.
157

157

00:08:13.526  -->  00:08:15.170
If it's going to expire for instance.
158

158

00:08:15.170  -->  00:08:19.483
Then we're going to have a certificate for staging.
159

159

00:08:20.610  -->  00:08:22.073
This is of kind certificates.
160

160

00:08:22.930  -->  00:08:24.083
The name is myapp.
161

161

00:08:25.860  -->  00:08:28.360
I'm going to store my certificate in the secrets
162

162

00:08:28.360  -->  00:08:30.850
called myapp-tls-staging.
163

163

00:08:30.850  -->  00:08:33.930
And then the issuer is going to be myapp-letsncrypt-staging,
164

164

00:08:33.930  -->  00:08:35.693
which is the issuer I just created.
165

165

00:08:37.168  -->  00:08:38.968
Commonname is myapp.newtech.academy.
166

166

00:08:39.884  -->  00:08:43.270
You can also add multiple host names.
167

167

00:08:43.270  -->  00:08:47.210
So for instance, if you have the domain name itself,
168

168

00:08:47.210  -->  00:08:48.560
the apex and the (mumbles),
169

169

00:08:50.249  -->  00:08:51.082
they can uncommon these lines
170

170

00:08:51.082  -->  00:08:52.533
and change this into your domain.
171

171

00:08:53.940  -->  00:08:57.270
This is done for the verification process.
172

172

00:08:57.270  -->  00:08:59.820
You're going to use hp as a verification process.
173

173

00:08:59.820  -->  00:09:02.370
Ingress controller is going to be myapp.
174

174

00:09:02.370  -->  00:09:03.203
What's going to happen
175

175

00:09:03.203  -->  00:09:06.280
is it's going to edit our ingress controller,
176

176

00:09:06.280  -->  00:09:08.070
because our ingress controller is responsible
177

177

00:09:08.070  -->  00:09:09.690
for this domain.
178

178

00:09:09.690  -->  00:09:11.400
Let's encrypt all issues the same
179

179

00:09:11.400  -->  00:09:12.850
for the verification process.
180

180

00:09:12.850  -->  00:09:15.210
So what's going to happen here is there
181

181

00:09:15.210  -->  00:09:17.690
is gonna be an extra rule that says if you
182

182

00:09:17.690  -->  00:09:21.783
hit slash in any specific URL, then to go a separate app,
183

183

00:09:21.783  -->  00:09:26.130
which will then respond with the correct data
184

184

00:09:26.130  -->  00:09:28.830
that is necessary for verification process.
185

185

00:09:28.830  -->  00:09:31.340
So you normally wouldn't see much of this
186

186

00:09:31.340  -->  00:09:33.543
because this all happens automatically.
187

187

00:09:34.460  -->  00:09:37.510
You're going to create this certificate staging
188

188

00:09:39.330  -->  00:09:42.280
and then we can check what is happening
189

189

00:09:43.275  -->  00:09:45.833
using kubectl get certificate.
190

190

00:09:48.700  -->  00:09:52.170
We have a myapp certificate of nine seconds old.
191

191

00:09:52.170  -->  00:09:55.410
I will describe this and then it says
192

192

00:09:55.410  -->  00:09:57.320
I don't have a TLS certificate,
193

193

00:09:57.320  -->  00:09:59.550
so I'm going to prepare one with esure,
194

194

00:09:59.550  -->  00:10:01.608
which is letsencrypt.
195

195

00:10:01.608  -->  00:10:03.340
It's going to present the challenge.
196

196

00:10:03.340  -->  00:10:05.090
It's going to perform a self-check.
197

197

00:10:06.390  -->  00:10:08.760
So you can have a little bit ingress,
198

198

00:10:08.760  -->  00:10:09.743
describe ingress.
199

199

00:10:13.380  -->  00:10:16.070
So now you see that there were updates 17 seconds ago
200

200

00:10:16.070  -->  00:10:19.290
and what happens is that they will rule injected
201

201

00:10:19.290  -->  00:10:21.193
to make this verification work.
202

202

00:10:23.310  -->  00:10:26.160
So the certificate was issued successfully
203

203

00:10:26.160  -->  00:10:29.220
and then there's also a renewal scheduled.
204

204

00:10:29.220  -->  00:10:31.620
This is a stating certificate so it's not going
205

205

00:10:31.620  -->  00:10:34.050
to be recognized by the browsers.
206

206

00:10:34.050  -->  00:10:36.360
You need a production certificate
207

207

00:10:36.360  -->  00:10:38.870
and that one will be then recognized.
208

208

00:10:38.870  -->  00:10:40.740
How do we configure certificates?
209

209

00:10:40.740  -->  00:10:45.163
So edit the myapp-ingress.
210

210

00:10:46.334  -->  00:10:49.033
And here we can just enable DLS.
211

211

00:10:49.990  -->  00:10:52.090
The secret name is myapp-tls-staging.
212

212

00:10:52.090  -->  00:10:54.860
The host is myapp.newtech.academy.
213

213

00:10:54.860  -->  00:10:59.450
I can do a kubectl apply -f myapp-ingress.
214

214

00:11:02.370  -->  00:11:06.820
And then this will use the newly created certificate.
215

215

00:11:06.820  -->  00:11:09.453
So now I will just show it in the browser.
216

216

00:11:12.800  -->  00:11:14.740
It says your connection is not private
217

217

00:11:14.740  -->  00:11:16.193
for myapp.newtech.academy.
218

218

00:11:17.570  -->  00:11:19.520
Authority invalid.
219

219

00:11:19.520  -->  00:11:21.980
So we have the new certificate
220

220

00:11:21.980  -->  00:11:24.020
but it's a staging certificate.
221

221

00:11:24.020  -->  00:11:25.323
It's not recognized.
222

222

00:11:26.160  -->  00:11:27.800
If you want to have a recognized one,
223

223

00:11:27.800  -->  00:11:30.893
then we have to use the production certificates.
224

224

00:11:32.700  -->  00:11:34.800
So that's what I'm going to come here now.
225

225

00:11:36.650  -->  00:11:40.710
So I already kubectl added the issuer.
226

226

00:11:40.710  -->  00:11:43.960
Let's have a look at the production certificates.
227

227

00:11:43.960  -->  00:11:45.090
Looks exactly the same
228

228

00:11:46.214  -->  00:11:47.560
but you're going to use different secrets.
229

229

00:11:47.560  -->  00:11:49.660
And we're going to use a different issuer.
230

230

00:11:50.850  -->  00:11:54.913
Kubeclt create certificate-prod.yml.
231

231

00:11:57.045  -->  00:11:59.303
Let me just delete first the old one.
232

232

00:12:01.961  -->  00:12:04.390
You'll need a stage one to works.
233

233

00:12:04.390  -->  00:12:06.523
I'm just going to create the production one now.
234

234

00:12:09.940  -->  00:12:12.423
And I can describe certificate.
235

235

00:12:15.870  -->  00:12:18.230
It says the myapp-tls-prod is not found
236

236

00:12:18.230  -->  00:12:22.560
so it's going to create the certificate
237

237

00:12:22.560  -->  00:12:25.520
and now it's going to use the production API
238

238

00:12:26.400  -->  00:12:27.933
instead of the staging API.
239

239

00:12:29.718  -->  00:12:31.718
And so if we describe our ingress again.
240

240

00:12:33.820  -->  00:12:35.893
Now we see we are on time.
241

241

00:12:36.860  -->  00:12:38.834
The rule has been edited.
242

242

00:12:38.834  -->  00:12:39.667
The path has been injected
243

243

00:12:39.667  -->  00:12:41.570
and this is actually the verification process
244

244

00:12:41.570  -->  00:12:42.403
that's going on.
245

245

00:12:43.745  -->  00:12:45.090
So everything that hits slash.well-known
246

246

00:12:45.090  -->  00:12:46.670
and then all the rest,
247

247

00:12:46.670  -->  00:12:50.140
it goes to an app that has been spun up
248

248

00:12:50.140  -->  00:12:54.233
for the purpose of the verification for less encrypt.
249

249

00:12:55.380  -->  00:12:57.100
This will disappear again.
250

250

00:12:57.100  -->  00:12:58.540
Now it's already disappeared
251

251

00:12:58.540  -->  00:13:00.580
so you have to be lucky to see it.
252

252

00:13:00.580  -->  00:13:04.670
And then if you describe their certificate,
253

253

00:13:04.670  -->  00:13:06.170
the certificate is now issued.
254

254

00:13:08.203  -->  00:13:09.113
We still need to change our ingress.
255

255

00:13:10.530  -->  00:13:11.697
Myapp ingress.
256

256

00:13:13.540  -->  00:13:14.890
I will change this in prod.
257

257

00:13:18.870  -->  00:13:20.153
I will apply this.
258

258

00:13:23.080  -->  00:13:24.377
This is come here.
259

259

00:13:26.780  -->  00:13:31.780
I see my hello world and it is secure.
260

260

00:13:32.600  -->  00:13:35.210
The certificate is valid.
261

261

00:13:35.210  -->  00:13:37.330
So I have myapp.newtech.academy.
262

262

00:13:37.330  -->  00:13:38.980
The certificate is valid.
263

263

00:13:38.980  -->  00:13:41.623
It has issued my let's encrypt authority.
264

264

00:13:43.060  -->  00:13:48.060
So this is how you then can create for your website
265

265

00:13:48.740  -->  00:13:51.180
so that it is encrypted.
266

266

00:13:51.180  -->  00:13:52.930
It has been ingress controller and then for,
267

267

00:13:52.930  -->  00:13:55.900
and then use this DNS name, myapp.newtech.academy
268

268

00:13:55.900  -->  00:13:58.340
to forward it to the IP address of one of the nodes.
269

269

00:13:58.340  -->  00:14:01.140
But as I explained, there's also different ways
270

270

00:14:01.140  -->  00:14:02.747
to make this work.
271

271

00:14:02.747  -->  00:14:05.317
You can use a floating IP, static IP, a (mumbles).
272

272

00:14:07.260  -->  00:14:09.330
You just have to make sure high availability,
273

273

00:14:09.330  -->  00:14:11.860
when the node disappears, when the node crashes,
274

274

00:14:11.860  -->  00:14:14.290
that the IP is still available.
275

275

00:14:14.290  -->  00:14:17.040
Easier by moving this IP around to another nodes,
276

276

00:14:17.040  -->  00:14:19.710
'cause every node exposes port 80 and 443
277

277

00:14:19.710  -->  00:14:24.060
with this ingress confirmation or by other mechanisms.
278

278

00:14:24.060  -->  00:14:25.830
So this is it for this demo.
279

279

00:14:25.830  -->  00:14:29.843
We now have a valid SLR certificate
280

280

00:14:29.843  -->  00:14:31.810
that we then can use for our applications.
281

281

00:14:31.810  -->  00:14:33.160
There's a lot of configuration involved
282

282

00:14:33.160  -->  00:14:36.040
and there's a lot of things that can go wrong.
283

283

00:14:36.040  -->  00:14:37.730
To debug it, first of all,
284

284

00:14:37.730  -->  00:14:41.340
make sure that your firewall is open for let's encrypt.
285

285

00:14:41.340  -->  00:14:46.340
And second, there are some processes in the,
286

286

00:14:46.635  -->  00:14:50.010
there are some pots in the kube-system name space
287

287

00:14:50.010  -->  00:14:52.050
that you can take the locks off
288

288

00:14:52.050  -->  00:14:53.780
so if something goes wrong,
289

289

00:14:53.780  -->  00:14:57.370
you can do logs off the cert manager
290

290

00:14:58.668  -->  00:15:00.530
of the namespace kube system.
291

291

00:15:00.530  -->  00:15:02.610
And they have two containers
292

292

00:15:02.610  -->  00:15:07.610
so then you specify minus c ingression or cert manager.
293

293

00:15:07.730  -->  00:15:10.070
And here you can see what happened
294

294

00:15:10.070  -->  00:15:12.473
when we asked for a certificate.
295

295

00:15:13.370  -->  00:15:14.615
If anything goes wrong,
296

296

00:15:14.615  -->  00:15:16.830
then you will see your errors here.
297

297

00:15:16.830  -->  00:15:19.110
You can type in the error in the get up of cert manager
298

298

00:15:19.110  -->  00:15:21.340
or in Google or at the (mumbles) Q and A,
299

299

00:15:21.340  -->  00:15:22.270
you can ask questions
300

300

00:15:22.270  -->  00:15:23.850
and you can also post your errors
301

301

00:15:23.850  -->  00:15:25.250
if you don't get it working.
