1
1

00:00:00,520  -->  00:00:03,350
<v Edward>I will now be talking about StatefulSets.</v>
2

2

00:00:03,350  -->  00:00:05,850
Stateful distributed apps on a Kubernetes cluster.
3

3

00:00:07,450  -->  00:00:10,960
Pet Sets was a new feature starting from Kubernetes 1.3,
4

4

00:00:10,960  -->  00:00:13,030
and got renamed to StatefulSets which is now
5

5

00:00:13,030  -->  00:00:14,580
a stable since Kurbernetes 1.9.
6

6

00:00:17,040  -->  00:00:20,353
It is introduced to be able to run stateful applications,
7

7

00:00:21,230  -->  00:00:23,640
that need a stable pod hostname
8

8

00:00:23,640  -->  00:00:26,510
instead of a podname-randomstring,
9

9

00:00:26,510  -->  00:00:29,120
as you see when you run, for instance, deployments.
10

10

00:00:29,120  -->  00:00:32,270
They have a randomstring after the podname
11

11

00:00:32,270  -->  00:00:34,047
so they don't really have a stable hostname
12

12

00:00:34,047  -->  00:00:36,990
you always need to go over the service
13

13

00:00:36,990  -->  00:00:40,380
to then get access to one of the pods you are running.
14

14

00:00:40,380  -->  00:00:44,290
Your podname, in StatefulSets, will have a sticky identity
15

15

00:00:44,290  -->  00:00:48,540
using an index, for example, podname-0,
16

16

00:00:48,540  -->  00:00:53,210
podname-1, and podname-2, and when a pod gets rescheduled
17

17

00:00:53,210  -->  00:00:54,860
it'll keep that identity.
18

18

00:00:54,860  -->  00:00:58,063
So if podname-1 gets rescheduled it will still be podname-1.
19

19

00:00:59,370  -->  00:01:03,580
StatefulSets allow stateful apps stable storage
20

20

00:01:03,580  -->  00:01:06,470
with volumes based on their ordinal number.
21

21

00:01:06,470  -->  00:01:09,300
So if our podname-1 gets rescheduled,
22

22

00:01:09,300  -->  00:01:12,650
it will keep the storage because it's stable storage.
23

23

00:01:12,650  -->  00:01:14,713
It will not have to be reinitialized.
24

24

00:01:15,840  -->  00:01:19,010
And then deleting and/or scaling a StatefulSet down
25

25

00:01:19,010  -->  00:01:21,000
will not delete the volumes associated
26

26

00:01:21,000  -->  00:01:23,880
with the StatefulSets, preserving the data.
27

27

00:01:23,880  -->  00:01:26,610
So if you go from three to two,
28

28

00:01:26,610  -->  00:01:29,090
then it will not delete the volume
29

29

00:01:29,090  -->  00:01:30,890
you will have to clean it up yourself.
30

30

00:01:30,890  -->  00:01:32,593
This is to preserve the data.
31

31

00:01:34,480  -->  00:01:36,870
A StatefulSet will allow your stateful app
32

32

00:01:36,870  -->  00:01:39,293
to use DNS to find other peers.
33

33

00:01:40,560  -->  00:01:42,540
Cassandra clusters, ElasticSearch clusters,
34

34

00:01:42,540  -->  00:01:46,000
use DNS to find other members of the cluster.
35

35

00:01:46,000  -->  00:01:47,930
For example, you can use the DNS name
36

36

00:01:47,930  -->  00:01:51,230
cassandra-0.cassandra for all the pods to reach
37

37

00:01:51,230  -->  00:01:53,870
the first node in the Cassandra cluster.
38

38

00:01:53,870  -->  00:01:56,410
So if you have, let's say, five nodes,
39

39

00:01:56,410  -->  00:01:58,710
all those five nodes can use the same DNS name
40

40

00:01:58,710  -->  00:02:02,990
to reach the first pod which is cassandra-0.
41

41

00:02:02,990  -->  00:02:05,510
So they will then contact, in Cassandra it's called
42

42

00:02:05,510  -->  00:02:08,463
the seed node, this is the way they find each other.
43

43

00:02:09,330  -->  00:02:11,990
So in this case you need a stable hostname
44

44

00:02:11,990  -->  00:02:14,620
for all the pods, for all the nodes, that are running
45

45

00:02:14,620  -->  00:02:15,783
to find each other.
46

46

00:02:17,060  -->  00:02:19,700
Using StatefulSets you can run, for instance,
47

47

00:02:19,700  -->  00:02:21,670
three Cassandra nodes on Kubernetes
48

48

00:02:21,670  -->  00:02:23,640
named cassandra-0 until cassandra-2.
49

49

00:02:23,640  -->  00:02:25,140
So then you will have cassandra-0,
50

50

00:02:25,140  -->  00:02:26,540
cassandra-1 and cassandra-2.
51

51

00:02:27,770  -->  00:02:29,490
If you wouldn't use StatefulSet
52

52

00:02:29,490  -->  00:02:31,240
you would get a dynamic hostname,
53

53

00:02:31,240  -->  00:02:33,460
which you wouldn't be able to use
54

54

00:02:33,460  -->  00:02:36,360
in your configuration files as the name can always change.
55

55

00:02:37,450  -->  00:02:40,580
A StatefulSet will also allow your stateful app
56

56

00:02:40,580  -->  00:02:43,460
to order the startup and teardown.
57

57

00:02:43,460  -->  00:02:45,760
Instead of randomly terminating one pod,
58

58

00:02:45,760  -->  00:02:47,790
one instance of your app, you will know
59

59

00:02:47,790  -->  00:02:49,520
which one that will go.
60

60

00:02:49,520  -->  00:02:52,960
When scaling up it goes from zero to n minus one,
61

61

00:02:52,960  -->  00:02:54,940
where n is replication factor.
62

62

00:02:54,940  -->  00:02:57,500
If you have three nodes you have zero, one, and two,
63

63

00:02:57,500  -->  00:03:01,160
if you create another node then your n will be four.
64

64

00:03:01,160  -->  00:03:02,680
When scaling down it starts
65

65

00:03:02,680  -->  00:03:05,100
with the highest number, so n minus one.
66

66

00:03:05,100  -->  00:03:07,550
So replicate if you have four nodes,
67

67

00:03:07,550  -->  00:03:09,030
it will tear down number three,
68

68

00:03:09,030  -->  00:03:11,003
then two, then one, then zero.
69

69

00:03:12,580  -->  00:03:15,580
This is useful if you first need to drain the data
70

70

00:03:15,580  -->  00:03:18,540
from a node before it can be shut down,
71

71

00:03:18,540  -->  00:03:20,960
because then you know that the highest number
72

72

00:03:20,960  -->  00:03:23,670
will be scaled down first so you can drain
73

73

00:03:23,670  -->  00:03:25,123
that node if necessary.
