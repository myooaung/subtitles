WEBVTT
1
1

00:00:00.300  -->  00:00:01.133
<v Edward>In this demo,</v>
2

2

00:00:01.133  -->  00:00:04.440
I'm going to show you how to use the cert-manager
3

3

00:00:04.440  -->  00:00:08.013
to issue certificates from Let's Encrypt.
4

4

00:00:09.920  -->  00:00:13.670
I'm logged in here again to the Kubernetes master nodes
5

5

00:00:13.670  -->  00:00:15.113
using the Ubuntu user.
6

6

00:00:15.970  -->  00:00:19.710
And I have the Git repository here.
7

7

00:00:19.710  -->  00:00:22.360
And in this Git repository you have a directory Helm.
8

8

00:00:23.280  -->  00:00:24.720
And the first thing we are going to do is
9

9

00:00:24.720  -->  00:00:26.120
we're going to install Helm.
10

10

00:00:28.170  -->  00:00:32.160
Helm is the packet manager for Kubernetes.
11

11

00:00:32.160  -->  00:00:35.190
So lots of software has been packaged using Helm,
12

12

00:00:35.190  -->  00:00:37.100
so if you want to install software,
13

13

00:00:37.100  -->  00:00:40.073
you probably going to need Helm.
14

14

00:00:41.160  -->  00:00:44.760
You can download the latest release from this website here.
15

15

00:00:44.760  -->  00:00:46.460
Kubernetes Helm releases,
16

16

00:00:46.460  -->  00:00:49.010
or you can just, if you're using Linux,
17

17

00:00:49.010  -->  00:00:50.580
enter this command right here
18

18

00:00:50.580  -->  00:00:52.810
and this will install the clients.
19

19

00:00:52.810  -->  00:00:53.957
I'm going to use my master node here,
20

20

00:00:53.957  -->  00:00:56.980
I'm going to use this Ubuntu user
21

21

00:00:56.980  -->  00:00:59.560
to then install the clients,
22

22

00:00:59.560  -->  00:01:01.260
and then I can use the Helm clients
23

23

00:01:01.260  -->  00:01:03.170
on this node.
24

24

00:01:03.170  -->  00:01:04.370
But if you have Windows,
25

25

00:01:04.370  -->  00:01:06.150
you can also download this
26

26

00:01:06.150  -->  00:01:07.830
Helm client on your Windows
27

27

00:01:07.830  -->  00:01:10.210
but then you just have to make sure they configure
28

28

00:01:10.210  -->  00:01:12.680
kubectl on your machine as well
29

29

00:01:12.680  -->  00:01:15.140
if you want to communicate with the cluster.
30

30

00:01:15.140  -->  00:01:18.120
And I'm going to install Helm here then.
31

31

00:01:18.120  -->  00:01:20.963
Helm installed into user local bin Helm.
32

32

00:01:22.140  -->  00:01:23.743
Helm init to configure Helm.
33

33

00:01:25.230  -->  00:01:27.770
We have an rbac enabled cluster
34

34

00:01:27.770  -->  00:01:29.170
so we're going to have to make sure
35

35

00:01:29.170  -->  00:01:32.373
that we create a service account for Helm.
36

36

00:01:33.480  -->  00:01:36.620
The Helm init is going to install Tiller
37

37

00:01:36.620  -->  00:01:38.550
on our Kubernetes cluster,
38

38

00:01:38.550  -->  00:01:40.920
so we're going to have to create the service account for
39

39

00:01:40.920  -->  00:01:43.203
this Tiller process.
40

40

00:01:44.040  -->  00:01:46.290
I have rbac config.
41

41

00:01:46.290  -->  00:01:49.460
I have a service account in a namespace kube system
42

42

00:01:49.460  -->  00:01:50.363
called Tiller.
43

43

00:01:51.430  -->  00:01:54.463
And this one has cluster admin privileges.
44

44

00:01:55.440  -->  00:01:58.530
This allows Tiller, basically Helm,
45

45

00:01:58.530  -->  00:02:02.750
to install any package that you want in your cluster
46

46

00:02:02.750  -->  00:02:04.170
in any namespace.
47

47

00:02:04.170  -->  00:02:05.060
But if you want,
48

48

00:02:05.060  -->  00:02:07.600
you can also create different access rights
49

49

00:02:08.670  -->  00:02:12.283
that only allow access to Francis one namespace.
50

50

00:02:15.839  -->  00:02:19.183
Kubectl creates all this rbac config.
51

51

00:02:21.030  -->  00:02:23.070
And then I'm going to initialize Helm
52

52

00:02:23.070  -->  00:02:25.073
using this service account Tiller.
53

53

00:02:27.410  -->  00:02:30.130
Tiller, the Helm server side component,
54

54

00:02:30.130  -->  00:02:33.040
has been installed into the Kubernetes cluster.
55

55

00:02:33.040  -->  00:02:34.863
So now we can start using Helm.
56

56

00:02:36.195  -->  00:02:38.045
So I'm gonna go to another directory,
57

57

00:02:40.500  -->  00:02:42.393
to the cert-managers directory.
58

58

00:02:43.340  -->  00:02:45.370
This directory also has a ReadMe
59

59

00:02:45.370  -->  00:02:48.083
so I can easily copy/paste on commands.
60

60

00:02:49.320  -->  00:02:51.970
Before we can use the cert-manager,
61

61

00:02:51.970  -->  00:02:53.713
we need an ingress controller,
62

62

00:02:54.680  -->  00:02:58.860
because we need to be able to access our cluster
63

63

00:02:58.860  -->  00:03:01.800
on port 80 or four four three,
64

64

00:03:01.800  -->  00:03:03.223
HTP or HBS.
65

65

00:03:04.410  -->  00:03:06.983
And therefore we need an ingress controller.
66

66

00:03:08.170  -->  00:03:09.930
We cannot use a load balancer,
67

67

00:03:09.930  -->  00:03:13.090
so this ingress controller will be auto balancer,
68

68

00:03:13.090  -->  00:03:15.963
it will make sure that whenever we hit this port ID,
69

69

00:03:15.963  -->  00:03:19.540
that it gets rooted to the service that you want.
70

70

00:03:19.540  -->  00:03:20.900
So I'm going to do Helm install,
71

71

00:03:20.900  -->  00:03:22.700
I'm going to call it My Ingress,
72

72

00:03:22.700  -->  00:03:25.330
it's going to be the nginx-ingress controller.
73

73

00:03:25.330  -->  00:03:28.053
I'm going to specify controller DaemonSet,
74

74

00:03:29.000  -->  00:03:32.180
which means that every node
75

75

00:03:32.180  -->  00:03:34.420
will have an ingress controller running.
76

76

00:03:34.420  -->  00:03:36.120
If you were to have really big cluster,
77

77

00:03:36.120  -->  00:03:38.410
then you probably don't want to specify this.
78

78

00:03:38.410  -->  00:03:39.890
You only want the deployment
79

79

00:03:39.890  -->  00:03:42.110
that then runs a couple of instances
80

80

00:03:42.110  -->  00:03:43.480
of this ingress controller.
81

81

00:03:43.480  -->  00:03:45.160
Here I only have three nodes,
82

82

00:03:45.160  -->  00:03:47.300
if I do DaemonSet I will have three instances
83

83

00:03:47.300  -->  00:03:48.650
of this ingress controller.
84

84

00:03:49.590  -->  00:03:52.370
If I don't specify this, controller service type,
85

85

00:03:52.370  -->  00:03:54.770
then it will be a load balancer by default.
86

86

00:03:54.770  -->  00:03:57.970
I don't have a load balancer on this cluster,
87

87

00:03:57.970  -->  00:04:00.950
I cannot use load balancers in this case.
88

88

00:04:00.950  -->  00:04:03.180
I want to create a cloud agnostic cluster
89

89

00:04:03.180  -->  00:04:05.050
or if you are doing this on PRAM,
90

90

00:04:05.050  -->  00:04:06.550
you also want to have load balancer,
91

91

00:04:06.550  -->  00:04:08.490
so specify node port.
92

92

00:04:08.490  -->  00:04:10.360
You're not going to use this node port,
93

93

00:04:10.360  -->  00:04:12.424
we are going to say host network true,
94

94

00:04:12.424  -->  00:04:14.124
which means it's going to bind
95

95

00:04:14.124  -->  00:04:18.490
on port 80 and four four three, HB and HBS,
96

96

00:04:18.490  -->  00:04:19.920
on the host itself.
97

97

00:04:19.920  -->  00:04:23.700
So we will be able to just go to the appearance of any node
98

98

00:04:23.700  -->  00:04:25.830
on port 80, on port four four three,
99

99

00:04:25.830  -->  00:04:29.173
and this will then expose this ingress controller.
100

100

00:04:30.620  -->  00:04:34.150
Seems that I already have one intalled previously,
101

101

00:04:34.150  -->  00:04:35.453
I'll just delete this one.
102

102

00:04:36.690  -->  00:04:39.660
Let's also purge the cert-manager
103

103

00:04:39.660  -->  00:04:41.910
in case I already have this earlier.
104

104

00:04:41.910  -->  00:04:43.710
And then I'm going to do this again.
105

105

00:04:44.630  -->  00:04:45.960
If you do this for the first time
106

106

00:04:45.960  -->  00:04:48.043
you definitely don't going to have this yet.
107

107

00:04:49.160  -->  00:04:50.653
This is installed,
108

108

00:04:51.530  -->  00:04:52.700
so if you do
109

109

00:04:52.700  -->  00:04:55.873
kubectl get pod,
110

110

00:04:56.830  -->  00:04:59.660
we see we have now three ingress controllers.
111

111

00:04:59.660  -->  00:05:01.340
And those ingress controllers,
112

112

00:05:01.340  -->  00:05:04.333
if you do kubectl edit pod,
113

113

00:05:06.170  -->  00:05:08.960
then we can see that we gonna have a host port
114

114

00:05:08.960  -->  00:05:11.343
on port 80 and four four three.
115

115

00:05:12.200  -->  00:05:15.870
Which means that if you want to access our cluster
116

116

00:05:15.870  -->  00:05:19.150
externally on theses ports we also need to open the firewall
117

117

00:05:19.150  -->  00:05:21.210
in case you have a firewall.
118

118

00:05:21.210  -->  00:05:24.480
Remember if you use DigitalOcean,
119

119

00:05:24.480  -->  00:05:26.900
then all the external ports are blocked
120

120

00:05:26.900  -->  00:05:28.350
in the firewall we configured
121

121

00:05:28.350  -->  00:05:29.770
so we have to change this.
