1
00:00:00,330 --> 00:00:06,720
Let's talk about Ingress and Ingress Controller. Ingress is a solution available

2
00:00:06,730 --> 00:00:13,910
since Kubernetes 1.1, that allows in inbound connections to the cluster. It's an alternative to the external

3
00:00:13,910 --> 00:00:16,090
Load Balancer and the nodePorts.

4
00:00:16,090 --> 00:00:22,430
So it's a very interesting alternative for cloud providers that don't have a Load Balancer.

5
00:00:22,430 --> 00:00:29,970
Ingress allows you to easily expose services that need to be accessible from the outside to the cluster.

6
00:00:29,980 --> 00:00:35,920
With Ingress you can run your own Ingress Controller or basically a Load Balancer within the Kubernetes cluster.

7
00:00:36,100 --> 00:00:42,310
There are default Ingress Controllers available from Kubernetes or you can write your own Ingress Controller.

8
00:00:42,790 --> 00:00:47,620
Basically, you can even write your own Load Balancer.

9
00:00:47,670 --> 00:00:49,840
This is how it works.

10
00:00:49,980 --> 00:00:57,150
If you connect from the internet on port 80 or 443, which is HTTP and HTTPs,

11
00:00:57,150 --> 00:01:03,330
You're going to be hitting this Ingress Controller, you configure what ports need to be handling the connections from the Ingress Controller.

12
00:01:03,330 --> 00:01:10,640
You can use a nginx Ingress Controller that comes with Kubernetes.

13
00:01:10,650 --> 00:01:18,150
That nginx Ingress Controller is going to distribute the traffic to your services. So, we can have "application1"

14
00:01:18,510 --> 00:01:24,770
that can receive traffic from Ingress Controller and "application2", which one is going to receive traffic is

15
00:01:24,780 --> 00:01:29,500
going to be based on rules that you define in this Ingress object.

16
00:01:29,600 --> 00:01:35,900
So, the Ingress rules can be that if you connect to "host-x.example.com" go to "pod 1",

17
00:01:36,020 --> 00:01:39,120
if you connect to "host-y.example.com" go to "pod 2",

18
00:01:39,230 --> 00:01:42,480
"application2" in our case.

19
00:01:42,500 --> 00:01:46,400
It comes from rules based on the path.

20
00:01:46,430 --> 00:01:49,180
So, the first two rules were based on the host.

21
00:01:49,180 --> 00:01:54,060
You can also make a rule, for instance, "/API/v2" needs to go to "pod n".

22
00:01:54,130 --> 00:01:57,340
Another pod, a third application for instance.

23
00:02:00,760 --> 00:02:04,810
You can create those Ingress rules using the Ingress object.

24
00:02:05,230 --> 00:02:11,200
You can see the API version here is still in beta at some point it's going to come out of beta 

25
00:02:11,200 --> 00:02:12,010
and you will have to change this.

26
00:02:12,010 --> 00:02:18,120
But for now it is an extension that is in beta. The object is of "kind: Ingress", that gives the name "helloworld-rules".

27
00:02:18,140 --> 00:02:21,500
And then you are going to specify those rules.

28
00:02:21,500 --> 00:02:29,330
You can see, if it matches the host "helloworld-v1.example.com", 

29
00:02:29,390 --> 00:02:31,260
then do HTTP forward to this backend that is described here.

30
00:02:32,220 --> 00:02:33,640
Then, you can specify a path, "/".

31
00:02:33,750 --> 00:02:35,660
The backend in our case is going to be "helloworld-v1"

32
00:02:35,730 --> 00:02:37,240
Which is a service we are going to launch,

33
00:02:37,260 --> 00:02:40,510
And this service runs on port 80.

34
00:02:40,770 --> 00:02:43,120
Then we're going to have a second host

35
00:02:43,380 --> 00:02:45,550
"Helloworld-v2.example.com"

36
00:02:45,580 --> 00:02:51,740
Also HTTP forward, path is also a "/", and we have a not a backend.

37
00:02:51,780 --> 00:02:57,990
So, depending on which host you're going to hit, you are going to get to a different application basically.

38
00:02:57,990 --> 00:03:04,770
These examples come back as "host is non-existent", but you can configure your own domain name,

39
00:03:04,830 --> 00:03:11,410
your own hostname, or you can just work with balance, and say "/v1" goes to my v1 application,

40
00:03:11,460 --> 00:03:13,860
and "/v2" goes to v2 application, that's also possible.

41
00:03:13,860 --> 00:03:18,620
In the next demo, I will show you how this works.
