WEBVTT
1
1

00:00:00.200  -->  00:00:04.443
<v ->I will now show you a demo of the pod security policies.</v>
2

2

00:00:06.900  -->  00:00:09.210
In the kubernetes course, get to the post tree.
3

3

00:00:09.210  -->  00:00:11.733
There is a doc tree pod security policies.
4

4

00:00:12.660  -->  00:00:16.830
In here, there is a ReadMe, Pod Security Setup,
5

5

00:00:16.830  -->  00:00:21.673
that you can follow to use for either Minikube or Kops.
6

6

00:00:23.370  -->  00:00:26.407
In case of Minikube, we need to create this
7

7

00:00:26.407  -->  00:00:29.260
.minikube/files/etc/kubernetes/addons directory
8

8

00:00:30.120  -->  00:00:33.570
and then copy this initial-psp.yaml as an addon
9

9

00:00:33.570  -->  00:00:35.603
so that it will be launched at boot.
10

10

00:00:36.790  -->  00:00:39.720
And then we can start minikube with extra-config
11

11

00:00:39.720  -->  00:00:43.740
and here we say apiserver.enable-admission-plugins
12

12

00:00:43.740  -->  00:00:47.030
and all these plugins that are enabled by default
13

13

00:00:47.030  -->  00:00:49.183
plus the PodSecurityPolicy.
14

14

00:00:50.410  -->  00:00:53.730
This is for Minikube, I will be using Kops.
15

15

00:00:53.730  -->  00:00:56.570
For Kops, we do a very similar thing.
16

16

00:00:56.570  -->  00:00:58.810
We do the kubeAPIServer appendAdmissionPlugins
17

17

00:01:00.860  -->  00:01:04.220
PodSecurityPolicy so it will just append this
18

18

00:01:04.220  -->  00:01:06.600
to the default list, and the default list is
19

19

00:01:06.600  -->  00:01:09.620
actually all these admission plugins.
20

20

00:01:09.620  -->  00:01:12.050
So in Kops it's a bit easier.
21

21

00:01:12.050  -->  00:01:14.700
But you also don't need to copy this initial-psp.yaml
22

22

00:01:14.700  -->  00:01:18.333
because Kops will create itself an initial
23

23

00:01:18.333  -->  00:01:20.440
PodSecurityPolicy.
24

24

00:01:20.440  -->  00:01:22.630
Because you need the PodSecurityPolicy
25

25

00:01:22.630  -->  00:01:25.330
by default for the system processes.
26

26

00:01:25.330  -->  00:01:28.280
So in the case of Minikube, we need to create this ourselves
27

27

00:01:28.280  -->  00:01:31.690
and in case of Kops, it will do that for us.
28

28

00:01:31.690  -->  00:01:33.620
So let's start with Kops.
29

29

00:01:33.620  -->  00:01:35.880
So I'm gonna create a new cluster,
30

30

00:01:35.880  -->  00:01:38.040
same command as you've been using earlier
31

31

00:01:41.160  -->  00:01:43.060
and then I'm going to edit my cluster.
32

32

00:01:43.930  -->  00:01:47.853
Kops edit cluster, the cluster name and then the state.
33

33

00:01:49.717  -->  00:01:52.440
And then I have a specification here
34

34

00:01:52.440  -->  00:01:55.980
and, from the ReadMe, I'm just going to paste this.
35

35

00:01:55.980  -->  00:01:57.720
So make sure that the kubeAPIServer
36

36

00:01:57.720  -->  00:02:00.300
has the same indentation as api,
37

37

00:02:00.300  -->  00:02:02.979
and then is going to do appendAdmissionPlugins
38

38

00:02:02.979  -->  00:02:04.479
PodSecurityPolicy.
39

39

00:02:05.699  -->  00:02:08.770
I'm going to save this, and then I'll be able to do
40

40

00:02:08.770  -->  00:02:13.770
kops update cluster, minus minus yes, and my state,
41

41

00:02:15.800  -->  00:02:18.200
and this will then launch the cluster.
42

42

00:02:18.200  -->  00:02:21.070
We'll take five to 10 minutes which gives us time
43

43

00:02:21.070  -->  00:02:22.773
to go over these yaml files.
44

44

00:02:24.210  -->  00:02:27.060
So now the cluster is launched, wait a couple of minutes,
45

45

00:02:28.270  -->  00:02:30.923
and then lets have a look what's in this directory.
46

46

00:02:31.950  -->  00:02:33.960
I already went over the ReadMe, we have
47

47

00:02:33.960  -->  00:02:37.650
the initial-psp.yaml, we had the restricted-psp.yaml.
48

48

00:02:37.650  -->  00:02:40.000
So these have the PodSecurityPolicies,
49

49

00:02:40.000  -->  00:02:41.900
let's have a look at the initial-psp.
50

50

00:02:41.900  -->  00:02:44.056
We don't need it for Kops but if you are using Minikube
51

51

00:02:44.056  -->  00:02:46.072
it's interesting to know and
52

52

00:02:46.072  -->  00:02:48.400
it's also something that Kops will do for you.
53

53

00:02:48.400  -->  00:02:51.763
So, it's also interesting to know what Kops will do for you.
54

54

00:02:53.890  -->  00:02:57.300
Here we have an object of kind: PodSecurityPolicy
55

55

00:02:57.300  -->  00:02:59.610
and this one is privileged so this one will be
56

56

00:02:59.610  -->  00:03:03.550
actually the one that will be used for our system processes.
57

57

00:03:03.550  -->  00:03:05.990
In the specification, we'll then specify
58

58

00:03:05.990  -->  00:03:07.640
what pods are allowed.
59

59

00:03:07.640  -->  00:03:09.490
So for the privileged PodSecurityPolicy,
60

60

00:03:09.490  -->  00:03:11.343
we want to have privileged: true.
61

61

00:03:12.230  -->  00:03:15.234
Pods can be privileged and also not privileged.
62

62

00:03:15.234  -->  00:03:17.340
allowPrivilegeEscalation: true,
63

63

00:03:17.340  -->  00:03:21.490
allow all capabilities, you can run as any userID,
64

64

00:03:21.490  -->  00:03:23.173
so there is no restriction.
65

65

00:03:24.330  -->  00:03:26.080
And then we will have a new policy.
66

66

00:03:28.150  -->  00:03:32.720
The PodSecurityPolicy restricted, and here it will say
67

67

00:03:32.720  -->  00:03:35.010
that we cannot use privileged pods.
68

68

00:03:35.010  -->  00:03:37.440
It will not allowPrivilegeEscalation,
69

69

00:03:37.440  -->  00:03:40.793
it will also define what volumes can be used.
70

70

00:03:42.240  -->  00:03:44.620
And it also cannot use certain capabilities
71

71

00:03:45.610  -->  00:03:47.830
like using IP tables and networking and stuff.
72

72

00:03:47.830  -->  00:03:51.063
We don't want our normal using to be using that.
73

73

00:03:52.508  -->  00:03:56.250
We also require that the container must run as non-root.
74

74

00:03:56.250  -->  00:03:59.120
And that's interesting because, I will show you,
75

75

00:03:59.120  -->  00:04:03.220
if you try to scale a pod as root it will not work.
76

76

00:04:03.220  -->  00:04:08.130
So also here, supplementalGroups ranges between
77

77

00:04:08.130  -->  00:04:13.130
one and 65,535 to make sure that we cannot use root.
78

78

00:04:15.270  -->  00:04:17.930
So basically we also not say when you mount something
79

79

00:04:17.930  -->  00:04:20.703
use this UID root because it will also be denied.
80

80

00:04:22.250  -->  00:04:25.480
To make this all work, we are going to use a ClusterRole.
81

81

00:04:25.480  -->  00:04:28.690
Here we see that the psp:privileged will then have
82

82

00:04:28.690  -->  00:04:32.350
access to the policy, PodSecurityPolicies, use.
83

83

00:04:32.350  -->  00:04:35.720
So it will be able to use the privilege group,
84

84

00:04:35.720  -->  00:04:37.850
the one we just created higher.
85

85

00:04:37.850  -->  00:04:40.740
So let's make sure that we have in the ClusterRole
86

86

00:04:40.740  -->  00:04:42.830
that can use this PodSecurityPolicy,
87

87

00:04:42.830  -->  00:04:45.185
the privileged PodSecurityPolicy.
88

88

00:04:45.185  -->  00:04:47.060
And then we create a second ClusterRole
89

89

00:04:47.060  -->  00:04:49.733
and this will be for the restricted PodSecurityPolicy.
90

90

00:04:52.346  -->  00:04:54.640
And then we combine the ClusterRole
91

91

00:04:54.640  -->  00:04:57.220
to groups, service accounts, and users.
92

92

00:04:57.220  -->  00:05:00.960
So here we see then we have two RoleBindings.
93

93

00:05:00.960  -->  00:05:04.043
A ClusterRoleBinding here and a RoleBinding here.
94

94

00:05:05.630  -->  00:05:09.030
This one is for the restricted one, so if you are
95

95

00:05:09.030  -->  00:05:10.760
authenticated, you automatically get
96

96

00:05:10.760  -->  00:05:12.693
the restricted ClusterRole.
97

97

00:05:14.100  -->  00:05:16.680
That means that you are authenticated,
98

98

00:05:16.680  -->  00:05:18.710
it's a default role from now on,
99

99

00:05:18.710  -->  00:05:20.180
it will only be the restricted one,
100

100

00:05:20.180  -->  00:05:22.330
you will not be able to use pivileged pods.
101

101

00:05:23.170  -->  00:05:27.030
But then there's a RoleBinding for the namespace kube-system
102

102

00:05:27.030  -->  00:05:29.740
if you are in the kube system and you are in the group
103

103

00:05:29.740  -->  00:05:33.440
system:masters, system:nodes, or you are in
104

104

00:05:33.440  -->  00:05:36.110
the group system:serviceaccounts:kube-system
105

105

00:05:36.110  -->  00:05:41.110
then you will get the ClusterRole psp:privileged.
106

106

00:05:42.170  -->  00:05:47.170
So that's how then the kube system gets more privileges
107

107

00:05:47.220  -->  00:05:48.793
to then run the privilege pods.
108

108

00:05:49.760  -->  00:05:52.810
And when we log in as a normal user, we will have
109

109

00:05:52.810  -->  00:05:55.690
this ClusterRoleBinding which lets us only use
110

110

00:05:55.690  -->  00:05:58.240
this ClusterRole here which only lets us use
111

111

00:05:58.240  -->  00:06:00.163
the restricted resource.
112

112

00:06:01.850  -->  00:06:04.636
And the restricted resource is then defined here,
113

113

00:06:04.636  -->  00:06:06.533
PodSecurityPolicy restricted.
114

114

00:06:07.920  -->  00:06:11.690
If you then go to the top, this here, this privileged one,
115

115

00:06:11.690  -->  00:06:13.900
is defined by kops itself.
116

116

00:06:13.900  -->  00:06:16.860
So kops will define this privileged one
117

117

00:06:16.860  -->  00:06:18.430
so we don't really need to define this,
118

118

00:06:18.430  -->  00:06:20.340
it's only when you are using Minikube.
119

119

00:06:20.340  -->  00:06:23.370
Minikube currently doesn't do it by itself
120

120

00:06:23.370  -->  00:06:25.173
so then you need this initial-psp.
121

121

00:06:26.110  -->  00:06:29.058
So I also split them out, so these restricted
122

122

00:06:29.058  -->  00:06:32.120
PodSecurityPolicy ClusterRole and ClusterRoleBinding
123

123

00:06:32.120  -->  00:06:35.540
are in this file, restricted-psp.
124

124

00:06:35.540  -->  00:06:37.700
So then if you are using kops we can apply
125

125

00:06:37.700  -->  00:06:39.760
this restricted-psp.yaml.
126

126

00:06:40.670  -->  00:06:43.050
And also something else that I forgot to mention,
127

127

00:06:43.050  -->  00:06:45.680
make sure that you are using 1.16.
128

128

00:06:45.680  -->  00:06:47.630
It's still in alpha right now, but I'm sure it will be
129

129

00:06:47.630  -->  00:06:49.560
stable when you see this lecture
130

130

00:06:49.560  -->  00:06:52.470
because a stable version will come out soon.
131

131

00:06:52.470  -->  00:06:56.010
Only from 1.16, this admission controller is
132

132

00:06:56.010  -->  00:06:57.730
available by default.
133

133

00:06:57.730  -->  00:06:59.963
Not enabled by default, but available.
134

134

00:07:01.590  -->  00:07:04.040
Let's have a look at the PodSecurityPolicies.
135

135

00:07:04.040  -->  00:07:06.223
Let's first see if I know it is running.
136

136

00:07:07.170  -->  00:07:08.060
Not yet.
137

137

00:07:08.060  -->  00:07:10.110
It will have to wait a little bit longer.
138

138

00:07:12.240  -->  00:07:13.633
Now it is available.
139

139

00:07:14.500  -->  00:07:19.010
So I'm running version 1.16.2 because I'm using
140

140

00:07:19.010  -->  00:07:20.223
kops 1.16.
141

141

00:07:21.950  -->  00:07:25.880
Let's have a look at the PodSecurityPolicies.
142

142

00:07:25.880  -->  00:07:28.593
Kubectl get PodSecurityPolicy.
143

143

00:07:31.270  -->  00:07:35.390
So like I said, we have this default one, the kube-system,
144

144

00:07:35.390  -->  00:07:38.623
which is privileged and is used by kube-system process.
145

145

00:07:39.480  -->  00:07:44.480
So let's add the restricted-psp,
146

146

00:07:44.760  -->  00:07:47.500
otherwise we will not even be able to scale anything
147

147

00:07:47.500  -->  00:07:50.610
because we haven't assigned a PodSecurityPolicy
148

148

00:07:50.610  -->  00:07:52.230
for the default user.
149

149

00:07:52.230  -->  00:07:54.063
So we need this restricted-psp.
150

150

00:07:55.470  -->  00:07:59.010
And then we have two pods, a bad-pod and a good-pod.
151

151

00:07:59.010  -->  00:08:01.060
Let's have a look at the good-pod.
152

152

00:08:01.060  -->  00:08:04.960
This is Deployment, simple deployment of an http-echo
153

153

00:08:04.960  -->  00:08:07.670
surveys that I have, and it will respond with the
154

154

00:08:07.670  -->  00:08:10.750
hello world text when you go to Port 880.
155

155

00:08:10.750  -->  00:08:12.520
But that's irrelevant, we are just going to check
156

156

00:08:12.520  -->  00:08:14.550
whether we can run it or not.
157

157

00:08:14.550  -->  00:08:18.970
We add securityContext runAsUser and is UID 100.
158

158

00:08:19.950  -->  00:08:22.440
So it needs to run as this UID.
159

159

00:08:22.440  -->  00:08:25.093
It's non-root, so this should work.
160

160

00:08:26.100  -->  00:08:27.700
And if you have look up bad-pod,
161

161

00:08:29.120  -->  00:08:30.677
then we see here, securityContext
162

162

00:08:30.677  -->  00:08:34.830
runAsUser 0, and this one should not run because
163

163

00:08:34.830  -->  00:08:37.900
this one tries to run as root.
164

164

00:08:37.900  -->  00:08:39.000
So let's try that out.
165

165

00:08:39.930  -->  00:08:44.313
Kubectl create, let's try first that pods.
166

166

00:08:46.110  -->  00:08:47.140
Let's have a look.
167

167

00:08:47.140  -->  00:08:47.973
Get pods.
168

168

00:08:48.950  -->  00:08:50.130
No pods found.
169

169

00:08:50.130  -->  00:08:52.210
Let's have a look where it went wrong.
170

170

00:08:52.210  -->  00:08:56.943
Deployment runs, but the replica set,
171

171

00:08:58.390  -->  00:09:00.930
well the deployment you can see it is also not ready
172

172

00:09:00.930  -->  00:09:02.610
but it has been created.
173

173

00:09:02.610  -->  00:09:05.360
The replica set says there is one desired
174

174

00:09:05.360  -->  00:09:07.520
but there is nothing running and here we will
175

175

00:09:07.520  -->  00:09:08.960
actually find the logging.
176

176

00:09:08.960  -->  00:09:11.510
So if you do kubectl describe replica set,
177

177

00:09:11.510  -->  00:09:12.760
all of these replica set,
178

178

00:09:15.560  -->  00:09:17.920
Error creating pods
179

179

00:09:17.920  -->  00:09:20.070
this pod is forbidden, unable to validate
180

180

00:09:20.070  -->  00:09:24.820
against any pod security policy, invalid value zero,
181

181

00:09:24.820  -->  00:09:27.423
running with a UID root is forbidden.
182

182

00:09:28.290  -->  00:09:32.300
So it actually works, we can not run with the UID root,
183

183

00:09:32.300  -->  00:09:34.433
let's now try to run with another UID.
184

184

00:09:35.470  -->  00:09:38.693
Let's try to run the good-pod.
185

185

00:09:43.070  -->  00:09:45.650
And let's have a look with kubectel get pods.
186

186

00:09:45.650  -->  00:09:49.763
And then we see container creating, running, so that works.
187

187

00:09:50.730  -->  00:09:53.150
So the good-pod works, the bad-pod doesn't work,
188

188

00:09:53.150  -->  00:09:54.853
so we achieved what we wanted.
189

189

00:09:55.800  -->  00:09:58.860
There's just one little thing I will have to note here,
190

190

00:09:58.860  -->  00:10:01.890
that is that we had to say here
191

191

00:10:01.890  -->  00:10:04.333
securityContext runAsUser 100.
192

192

00:10:05.540  -->  00:10:08.500
If you remove this, it will also not work
193

193

00:10:08.500  -->  00:10:11.340
even though that in this container we specify
194

194

00:10:11.340  -->  00:10:12.900
that we are not running as root.
195

195

00:10:12.900  -->  00:10:14.210
And why is that?
196

196

00:10:14.210  -->  00:10:16.210
If you run it, it will actually tell it.
197

197

00:10:17.270  -->  00:10:21.773
kubectl delete good-pod, and then create it again.
198

198

00:10:26.010  -->  00:10:28.100
I made a mistake here.
199

199

00:10:28.100  -->  00:10:31.440
I just removed this, ah, I see it already.
200

200

00:10:31.440  -->  00:10:36.363
This needs to be an arrow right here.
201

201

00:10:37.830  -->  00:10:39.093
So now it should work.
202

202

00:10:40.430  -->  00:10:41.803
But is it also created?
203

203

00:10:44.120  -->  00:10:47.590
No, it says CreateContainerConfigError.
204

204

00:10:47.590  -->  00:10:48.490
Let's have a look.
205

205

00:10:50.030  -->  00:10:51.073
Describe pod.
206

206

00:10:54.070  -->  00:10:57.323
So now it pulls the image, and then when it pulls image,
207

207

00:10:57.323  -->  00:11:00.270
it's going to check whether it runs as root.
208

208

00:11:00.270  -->  00:11:01.673
But what do we get here?
209

209

00:11:02.840  -->  00:11:07.620
Error: the Container has runAsNonRoot and image has
210

210

00:11:07.620  -->  00:11:12.620
non-numeric user app cannot verify user is non-root.
211

211

00:11:12.920  -->  00:11:15.553
So I think there is limitation, unfortunately,
212

212

00:11:17.349  -->  00:11:20.643
that if in the Dockerfile you say user app,
213

213

00:11:20.643  -->  00:11:24.160
because we are using user app, here in Dockerfile.
214

214

00:11:24.160  -->  00:11:25.760
I can actually show this to you.
215

215

00:11:26.690  -->  00:11:27.890
So this is a Dockerfile.
216

216

00:11:29.310  -->  00:11:33.090
This is the Dockerfile of the http-echo repository.
217

217

00:11:33.090  -->  00:11:37.270
So then you see at bottom, it will run as user app,
218

218

00:11:37.270  -->  00:11:41.380
but user app is not a UID, it's actually the name.
219

219

00:11:41.380  -->  00:11:46.380
And kubernetes cannot see whether app has not a UID zero
220

220

00:11:46.940  -->  00:11:51.090
because we could easily create the user app with UID zero,
221

221

00:11:51.090  -->  00:11:54.160
then it would still be an admin user, the root user,
222

222

00:11:54.160  -->  00:11:55.890
it would just not be called root.
223

223

00:11:55.890  -->  00:11:58.620
So it's actually wrong that you say user 100
224

224

00:11:58.620  -->  00:12:02.660
or use the security context to make sure that
225

225

00:12:02.660  -->  00:12:05.800
kubernetes can see that it is really a non-zero
226

226

00:12:05.800  -->  00:12:07.240
numeric value.
227

227

00:12:07.240  -->  00:12:11.740
Just having user app will not work for the security context.
228

228

00:12:11.740  -->  00:12:15.137
So what I did is, I pulled this container,
229

229

00:12:15.137  -->  00:12:19.540
logged in, typed ID, to see what is the real ID
230

230

00:12:19.540  -->  00:12:23.270
of this user app, it has hundreds, and it can use
231

231

00:12:23.270  -->  00:12:25.560
in the pod security context 100 to
232

232

00:12:25.560  -->  00:12:27.853
make sure that you can run this pod.
233

233

00:12:29.340  -->  00:12:33.330
Because otherwise you will then get this kind of error.
234

234

00:12:33.330  -->  00:12:35.630
It cannot verify user is nonRoot.
235

235

00:12:35.630  -->  00:12:38.320
So that's also something that you want to take into account
236

236

00:12:38.320  -->  00:12:41.670
when using this admissionController
237

237

00:12:41.670  -->  00:12:43.120
and this PodSecurityPolicies.
238

238

00:12:44.790  -->  00:12:46.180
So that's it for this lecture.
239

239

00:12:46.180  -->  00:12:47.750
This is quite new as we speak,
240

240

00:12:47.750  -->  00:12:50.390
but it will definitely become the default in kubernetes
241

241

00:12:50.390  -->  00:12:52.610
and then when you want to securely run pods,
242

242

00:12:52.610  -->  00:12:54.260
you'll have to make sure they run as
243

243

00:12:54.260  -->  00:12:58.430
non-root, non-privileged, and so on so that your
244

244

00:12:58.430  -->  00:13:01.523
containers are more secure running on your cluster.
