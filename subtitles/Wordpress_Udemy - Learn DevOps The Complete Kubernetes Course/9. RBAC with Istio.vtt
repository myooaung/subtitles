WEBVTT
1
1

00:00:00.320  -->  00:00:02.370
<v Edward>In this lecture, I'm going to talk about</v>
2

2

00:00:02.370  -->  00:00:05.220
RBAC with mutual TLS.
3

3

00:00:05.220  -->  00:00:08.160
It's covering the authorization aspect of
4

4

00:00:08.160  -->  00:00:10.453
security with Istio.
5

5

00:00:11.760  -->  00:00:13.900
Now that we are using Mutual TLS,
6

6

00:00:13.900  -->  00:00:16.340
we have strong identities.
7

7

00:00:16.340  -->  00:00:19.130
Based on those identities, we can start doing
8

8

00:00:19.130  -->  00:00:22.433
Role Based Access Control, or called RBAC.
9

9

00:00:23.630  -->  00:00:27.370
RBAC allows us to limit access between our services,
10

10

00:00:27.370  -->  00:00:29.403
and from end-user to services.
11

11

00:00:30.550  -->  00:00:33.940
Istio is able to verify the identity of a service
12

12

00:00:33.940  -->  00:00:38.380
by checking the identity of the x.509 certificate,
13

13

00:00:38.380  -->  00:00:41.020
which comes with enabling mutual TLS.
14

14

00:00:41.020  -->  00:00:43.360
So now that we have mutual TLS on,
15

15

00:00:43.360  -->  00:00:47.110
we have certificates and then services communicate
16

16

00:00:47.110  -->  00:00:51.450
with each other via RBAC changing these certificates,
17

17

00:00:51.450  -->  00:00:54.200
and this identity, this name,
18

18

00:00:54.200  -->  00:00:57.530
is embedded in the certificate, so it cannot be faked,
19

19

00:00:57.530  -->  00:00:59.350
or cannot be changed.
20

20

00:00:59.350  -->  00:01:01.750
Then that way we have this strong identity.
21

21

00:01:01.750  -->  00:01:04.300
So when one service contacts another service,
22

22

00:01:04.300  -->  00:01:06.433
they know whom they're communicating with.
23

23

00:01:07.360  -->  00:01:09.300
For example, if you're going to use RBAC,
24

24

00:01:09.300  -->  00:01:13.490
service A can be contacted by B, but not by C.
25

25

00:01:13.490  -->  00:01:17.120
So by default, every service can contact each other.
26

26

00:01:17.120  -->  00:01:21.320
Now that we enabled RBAC, we can say that
27

27

00:01:21.320  -->  00:01:24.943
service C cannot contact service A, but service B can.
28

28

00:01:26.610  -->  00:01:29.900
Also good to know, the identities capability in Istio
29

29

00:01:29.900  -->  00:01:32.320
is built using the SPIFFE standard,
30

30

00:01:32.320  -->  00:01:35.900
Secure Production Identity Framework for Everyone.
31

31

00:01:35.900  -->  00:01:38.333
That's another CNCF project.
32

32

00:01:40.060  -->  00:01:43.350
So RBAC in Istio can provide service-to-service
33

33

00:01:43.350  -->  00:01:45.653
and end-user-to-service authorization.
34

34

00:01:47.260  -->  00:01:50.490
It supports conditions and role-binding.
35

35

00:01:50.490  -->  00:01:53.250
It can bind two ServiceAccounts,
36

36

00:01:53.250  -->  00:01:54.630
which can be linked to pods.
37

37

00:01:54.630  -->  00:01:57.753
So you have a pod, in your pod you have a ServiceAccount,
38

38

00:01:58.770  -->  00:02:01.432
and in Istio you can use RoleBinding
39

39

00:02:01.432  -->  00:02:04.370
to bind a role to the ServiceAccount.
40

40

00:02:04.370  -->  00:02:06.800
So it will be this ServiceAccount that you need
41

41

00:02:06.800  -->  00:02:08.893
to access another service, for example.
42

42

00:02:10.600  -->  00:02:12.650
End-user-to-service can for example,
43

43

00:02:12.650  -->  00:02:14.890
let you create conditions.
44

44

00:02:14.890  -->  00:02:19.480
One, for example, being authenticated using JWT.
45

45

00:02:19.480  -->  00:02:22.790
So you can put certain conditions to be able
46

46

00:02:22.790  -->  00:02:25.560
to access a service and one of those conditions can be
47

47

00:02:25.560  -->  00:02:27.800
that the user contacting the service
48

48

00:02:27.800  -->  00:02:29.440
needs to be authenticated
49

49

00:02:29.440  -->  00:02:32.720
and you can do this check based on JWT.
50

50

00:02:32.720  -->  00:02:34.600
So this would be something that
51

51

00:02:34.600  -->  00:02:36.780
often would be written in the application.
52

52

00:02:36.780  -->  00:02:39.663
Now this can be uploaded to Istio.
53

53

00:02:41.110  -->  00:02:42.990
It also has high performance,
54

54

00:02:42.990  -->  00:02:45.850
as it's natively enforced on Envoy.
55

55

00:02:45.850  -->  00:02:47.723
Envoy is the sidecar proxy.
56

56

00:02:49.728  -->  00:02:53.200
RBAC is not enabled by default, so we have to enable it
57

57

00:02:53.200  -->  00:02:56.770
We can enable it globally, or on a namespace basis.
58

58

00:02:56.770  -->  00:02:59.160
For example, in the demo, we'll only enable it
59

59

00:02:59.160  -->  00:03:00.980
for the default namespace.
60

60

00:03:00.980  -->  00:03:03.110
So this is what we will do.
61

61

00:03:03.110  -->  00:03:05.570
So this is demo file that we will use.
62

62

00:03:05.570  -->  00:03:09.270
We'll use an object of kind: RbacConfig
63

63

00:03:10.230  -->  00:03:12.783
and we'll only include the default namespace.
64

64

00:03:15.497  -->  00:03:19.780
We can then create a ServiceRole that specifies the rules
65

65

00:03:19.780  -->  00:03:23.040
and the ServiceRoleBinding to link a ServiceRole
66

66

00:03:23.040  -->  00:03:26.070
to a subject and a subject can be for example,
67

67

00:03:26.070  -->  00:03:27.953
a Kubernetes ServiceAccount.
68

68

00:03:28.950  -->  00:03:31.393
So let me explain you this example.
69

69

00:03:32.480  -->  00:03:36.803
Here is again our hello world example, the first version.
70

70

00:03:37.660  -->  00:03:42.420
In this example, you could just log in to the world pod
71

71

00:03:42.420  -->  00:03:45.630
and the world pod can also access the hello pod.
72

72

00:03:45.630  -->  00:03:47.420
But that is not really necessary.
73

73

00:03:47.420  -->  00:03:50.760
The world pod only needs access the world-2 pod,
74

74

00:03:50.760  -->  00:03:53.490
which is going to return as benchmarks.
75

75

00:03:53.490  -->  00:03:56.090
So we can limit this access
76

76

00:03:56.090  -->  00:03:58.870
using RBAC roles to make sure
77

77

00:03:58.870  -->  00:04:02.360
that the ingress controller can only access hello,
78

78

00:04:02.360  -->  00:04:03.810
hello can only access world
79

79

00:04:03.810  -->  00:04:05.890
and world can only access world-2
80

80

00:04:06.900  -->  00:04:09.630
and to do that we need to use conditions.
81

81

00:04:09.630  -->  00:04:11.843
So we go to create a ServiceRole
82

82

00:04:11.843  -->  00:04:13.990
and you go in to add rules.
83

83

00:04:13.990  -->  00:04:18.360
For example we can say that everything that comes from Istio
84

84

00:04:18.360  -->  00:04:23.010
can only contact the service hello default svc cluster local
85

85

00:04:23.010  -->  00:04:25.820
and you can only use the methods get and head
86

86

00:04:25.820  -->  00:04:28.593
so it can only use these http methods.
87

87

00:04:29.810  -->  00:04:33.590
Then we can assign a ServiceRole to the hello pod
88

88

00:04:33.590  -->  00:04:38.260
and we can then write another ServieRole for this hello pod
89

89

00:04:38.260  -->  00:04:39.420
and then we will bind these ServiceRoles
90

90

00:04:39.420  -->  00:04:42.990
to this ServiceAccount that is linked with this hello pod
91

91

00:04:44.130  -->  00:04:46.300
and this ServieRole then says that we can only access
92

92

00:04:46.300  -->  00:04:50.130
the world service because the hello pod
93

93

00:04:50.130  -->  00:04:52.310
only needs access the world service.
94

94

00:04:52.310  -->  00:04:54.760
and again we're going to us a get and head method
95

95

00:04:56.090  -->  00:04:59.420
and then we can also write a ServiceRole for the world pod
96

96

00:04:59.420  -->  00:05:02.210
so we need another ServiceAccount
97

97

00:05:02.210  -->  00:05:04.310
that you going to link with that world pod
98

98

00:05:05.200  -->  00:05:06.960
and then you're going to use a ServiceRole
99

99

00:05:06.960  -->  00:05:09.060
that says you can only access world-2
100

100

00:05:10.060  -->  00:05:12.650
and then we link this ServiceRole with this ServiceAccount
101

101

00:05:12.650  -->  00:05:13.703
using the binding.
102

102

00:05:14.620  -->  00:05:16.943
So this I will then show you in the next demo.
