1
00:00:00,580 --> 00:00:04,590
I am going to show you two demos using "Secrets".

2
00:00:04,680 --> 00:00:08,590
One demo will  just be my very simple example app, 

3
00:00:08,950 --> 00:00:16,150
and on another demo I am going to show you, how to set up a WordPress using the secrets as environment variables.

4
00:00:16,710 --> 00:00:21,070
Let's first start with the first one, secrets as volumes.

5
00:00:22,260 --> 00:00:31,620
I first need to set up the secrets in my deployment I have "helloworld-secrets.yml"

6
00:00:31,620 --> 00:00:42,510
"helloworld-secrets" has the user name and the password "kubecontrol create" 

7
00:00:42,600 --> 00:00:45,470
of this file deployment "helloworld-secrets.yml"

8
00:00:46,470 --> 00:00:48,610
And then I have another deployment.

9
00:00:48,660 --> 00:00:58,470
I have a "helloworld" with secrets as volumes, 3 replicas of this one.

10
00:00:58,870 --> 00:01:02,680
One container of "volumeMount"

11
00:01:02,720 --> 00:01:10,920
And this is the volume with the secret name "db-secrets", the one I just created in Kubernetes

12
00:01:10,920 --> 00:01:11,700
and this will be monitored under

13
00:01:11,720 --> 00:01:15,780
"/etc/creds/", "kubectl create" again

14
00:01:18,760 --> 00:01:23,670
and then, let me just get the pods.

15
00:01:26,670 --> 00:01:28,410
All of them are running.

16
00:01:29,030 --> 00:01:34,290
Let me describe one of them.

17
00:01:34,940 --> 00:01:45,080
Describe vault and what I want to show you first is what I mentioned in the beginning that 

18
00:01:45,100 --> 00:01:52,710
Kubernetes itself also uses the Secrets in the volumes to share the Kubernetes credentials,

19
00:01:52,730 --> 00:02:00,920
and if you can see here volumeMounts, we already have a volume, "/var/run/secrets/kubernetes.io/serviceaccount from default-token-hctrk"

20
00:02:00,980 --> 00:02:08,230
This is a volume that is already mounted and is done by Kubernetes itself to share

21
00:02:08,230 --> 00:02:10,160
the secrets within the pod.

22
00:02:10,220 --> 00:02:18,580
So, the pod can access the API and then we have "/etc/creds", the one that we created from the "cred-volume".

23
00:02:18,710 --> 00:02:31,450
So, let's start a shell, "kubecontrol execute", the pod name, we are going to execute something on the pod, as our flags 

24
00:02:31,940 --> 00:02:37,050
to the standard input that we can actually type in some commands,

25
00:02:37,050 --> 00:02:41,100
and then we are going to execute "/bin/bash", which is a shell.

26
00:02:41,340 --> 00:02:45,270
And this just gives us a shell on one of the pods.

27
00:02:45,690 --> 00:02:58,320
If we didn't take a look at what's in "/etc/secrets/username", then you see root, which is in username and password--

28
00:02:58,610 --> 00:03:00,520
It's in "password".

29
00:03:00,840 --> 00:03:09,390
So, our credentials are available in this "/etc/creds", your application just has to read those files.

30
00:03:09,390 --> 00:03:15,680
And then, those values-- the data in those files can be used, for instance, to connect to a database.

31
00:03:15,810 --> 00:03:18,560
And that's exactly what I'm going to show you in the next demo.

32
00:03:18,750 --> 00:03:22,680
I'm going to show you how to use credentials to spin up a database and WordPress

33
00:03:25,850 --> 00:03:27,470
if you enter "mount".

34
00:03:27,590 --> 00:03:29,810
Then you also see all the main points,

35
00:03:29,900 --> 00:03:33,570
and here are two volumes that are mounted.

36
00:03:34,150 --> 00:03:36,340
So, this one is the default one,

37
00:03:36,450 --> 00:03:38,230
you can have a look at it.

38
00:03:38,230 --> 00:03:43,590
It has a token and a certificate that can be used to access the API.

39
00:03:44,090 --> 00:03:45,990
"exit" exits from the shell.

40
00:03:46,640 --> 00:03:48,590
And then you're ready for the next demo.
