WEBVTT
1
1

00:00:00.150  -->  00:00:02.993
<v Edward>This lecture will be about pod presets.</v>
2

2

00:00:04.150  -->  00:00:08.203
Pod presets can inject information into pods at runtime.
3

3

00:00:09.310  -->  00:00:12.940
Pod presets are used to inject Kubernetes resources
4

4

00:00:12.940  -->  00:00:16.090
like Secrets, ConfigMaps, Volumes
5

5

00:00:16.090  -->  00:00:17.513
and Environmental variables.
6

6

00:00:19.130  -->  00:00:22.081
Imagine you have 20 applications you want to deploy
7

7

00:00:22.081  -->  00:00:25.910
and they all need to get a specific credential.
8

8

00:00:25.910  -->  00:00:29.960
You can edit those 20 specifications and add the credential
9

9

00:00:29.960  -->  00:00:34.960
or you can use presets to create one preset object
10

10

00:00:35.440  -->  00:00:37.420
which will inject an environment variable
11

11

00:00:37.420  -->  00:00:39.613
or config file to all the matching pods.
12

12

00:00:40.900  -->  00:00:44.280
This is just an easier way to get certain information
13

13

00:00:44.280  -->  00:00:47.655
in multiple pods rather than editing
14

14

00:00:47.655  -->  00:00:51.523
all the separate pod definitions or deployment definitions.
15

15

00:00:52.820  -->  00:00:55.820
When injecting environment variables and VolumeMounts,
16

16

00:00:55.820  -->  00:00:59.300
the pod preset will apply the changes to all containers
17

17

00:00:59.300  -->  00:01:00.460
within the pod.
18

18

00:01:00.460  -->  00:01:03.070
So if the pod has more than one container,
19

19

00:01:03.070  -->  00:01:06.070
the pod presets will be applied to all containers
20

20

00:01:06.070  -->  00:01:06.903
within that pod.
21

21

00:01:09.070  -->  00:01:11.383
This is an example of a pod preset.
22

22

00:01:12.400  -->  00:01:16.400
Here is the api version, currently still alpha.
23

23

00:01:16.400  -->  00:01:18.760
You might have the change this after the pod presets
24

24

00:01:18.760  -->  00:01:21.320
become beta or become stable.
25

25

00:01:21.320  -->  00:01:24.120
In the version that I use in the demo,
26

26

00:01:24.120  -->  00:01:27.570
it is still alpha but in one of the next versions,
27

27

00:01:27.570  -->  00:01:29.790
it can become beta or stable.
28

28

00:01:29.790  -->  00:01:34.710
So then I will update this api version in GitHub.
29

29

00:01:34.710  -->  00:01:36.990
Variant is a pod preset.
30

30

00:01:36.990  -->  00:01:40.310
You can give the name and then you have the specification.
31

31

00:01:40.310  -->  00:01:43.770
You need a selector to match for instance the labels.
32

32

00:01:43.770  -->  00:01:47.210
So every pod that has the label F equals myapp
33

33

00:01:47.210  -->  00:01:50.320
will match and whatever is defined below
34

34

00:01:50.320  -->  00:01:53.513
will then be applied to these pods.
35

35

00:01:54.870  -->  00:01:56.880
In this case, I have an environment variable,
36

36

00:01:56.880  -->  00:01:59.843
a volume mount and specified volumes.
37

37

00:02:01.110  -->  00:02:02.883
This would then be applied and then you have
38

38

00:02:02.883  -->  00:02:07.150
a variable my secret, a volume mount /share
39

39

00:02:07.150  -->  00:02:09.150
that is just an empty directory that is
40

40

00:02:09.150  -->  00:02:10.603
then defined in the volumes.
41

41

00:02:12.310  -->  00:02:14.660
You can more than one pod preset.
42

42

00:02:14.660  -->  00:02:17.263
They'll all be applied to matching pods.
43

43

00:02:18.150  -->  00:02:20.420
If there is a conflict, the pod preset will not
44

44

00:02:20.420  -->  00:02:21.633
be applied to the pod.
45

45

00:02:23.160  -->  00:02:26.530
Pod presets can match zero or more pods.
46

46

00:02:26.530  -->  00:02:28.800
It's possible that no pods are currently matching
47

47

00:02:28.800  -->  00:02:31.260
but that matching pods will be launched
48

48

00:02:31.260  -->  00:02:33.000
at a later time.
49

49

00:02:33.000  -->  00:02:35.260
So they don't necessarily need to match.
50

50

00:02:35.260  -->  00:02:37.840
They will just be there and whenever a new pod
51

51

00:02:37.840  -->  00:02:40.070
is launched that matches, then the presets
52

52

00:02:40.070  -->  00:02:41.833
will be injected in that pod.
53

53

00:02:43.180  -->  00:02:45.680
In the next example, I will show you how it works.
