1
1

00:00:00,240  -->  00:00:01,930
<v ->Now that my Droplets are up,</v>
2

2

00:00:01,930  -->  00:00:04,730
I'm going to install Kubernetes using kubeadm.
3

3

00:00:04,730  -->  00:00:06,983
I need those two IP addresses to ssh.
4

4

00:00:07,990  -->  00:00:12,853
One ends with 170, I'll copy this one and one ends with 75.
5

5

00:00:15,230  -->  00:00:19,130
I just opened a Micros terminal.
6

6

00:00:19,130  -->  00:00:21,520
If you are using Linux, you can just open terminal.
7

7

00:00:21,520  -->  00:00:24,123
If you're using Windows, you can use PuTTY.
8

8

00:00:25,260  -->  00:00:30,210
You can download PuTTY and then ssh to this IP address.
9

9

00:00:30,210  -->  00:00:32,410
ssh to the Droplets
10

10

00:00:33,350  -->  00:00:36,250
using the login root
11

11

00:00:36,250  -->  00:00:39,775
and using the private key that I specified.
12

12

00:00:39,775  -->  00:00:42,010
If you didn't specify a private key,
13

13

00:00:42,010  -->  00:00:44,470
you just don't specify this file
14

14

00:00:44,470  -->  00:00:46,020
and it will ask for a password.
15

15

00:00:47,520  -->  00:00:48,353
Press Yes
16

16

00:00:50,340  -->  00:00:52,260
and then we are logged in.
17

17

00:00:52,260  -->  00:00:55,160
So we are going to do exactly the same for the other node.
18

18

00:00:57,250  -->  00:00:58,363
I open a new tab,
19

19

00:00:59,824  -->  00:01:01,580
(mumbles) .75
20

20

00:01:03,640  -->  00:01:06,140
And here we are, logging into the Kubernetes node.
21

21

00:01:07,730  -->  00:01:10,660
First, I'm going to start with the master.
22

22

00:01:10,660  -->  00:01:11,493
I'm going to
23

23

00:01:14,030  -->  00:01:18,780
git clone my repository.
24

24

00:01:18,780  -->  00:01:21,380
This repository contains all the scripts,
25

25

00:01:21,380  -->  00:01:24,150
so that you don't have to type everything over
26

26

00:01:24,150  -->  00:01:27,113
and I will do exactly the same on the node.
27

27

00:01:30,770  -->  00:01:33,000
On-prem-or-cloud-agnostic-kubernetes
28

28

00:01:33,910  -->  00:01:37,060
and then I will show you the Kubernetes scripts
29

29

00:01:38,460  -->  00:01:40,053
to install the master.
30

30

00:01:41,720  -->  00:01:44,130
So this is the script to install Docker,
31

31

00:01:44,130  -->  00:01:47,033
install Kubernetes and then deploy Kubernetes.
32

32

00:01:47,960  -->  00:01:50,260
These instructions, I got them from
33

33

00:01:50,260  -->  00:01:51,970
the documentation from kubeadm,
34

34

00:01:51,970  -->  00:01:53,720
so if you want to know more details about it,
35

35

00:01:53,720  -->  00:01:56,130
you can always take documentation.
36

36

00:01:56,130  -->  00:01:57,600
First, we're going to install Docker,
37

37

00:01:57,600  -->  00:02:00,570
we're going to do an apt-get update
38

38

00:02:00,570  -->  00:02:03,400
and then install some dependencies.
39

39

00:02:03,400  -->  00:02:07,741
We're going to get the gpg key for the repository,
40

40

00:02:07,741  -->  00:02:10,520
so that we know that when we add this repository
41

41

00:02:10,520  -->  00:02:15,520
in this line here, that this is, for sure, the correct one.
42

42

00:02:16,120  -->  00:02:20,560
It'll be verified using this gpg key that we download first.
43

43

00:02:20,560  -->  00:02:22,840
Then we're going to do an apt-git update again
44

44

00:02:22,840  -->  00:02:24,343
and then install Docker.
45

45

00:02:25,270  -->  00:02:28,720
Then we're going to install Kubernetes, it'll be the same.
46

46

00:02:28,720  -->  00:02:31,690
We have a dependency here that we need to install first.
47

47

00:02:31,690  -->  00:02:34,170
We're going to download the gpg key
48

48

00:02:34,170  -->  00:02:36,960
and add to the sources for Kubernetes,
49

49

00:02:36,960  -->  00:02:40,310
the apt.kubernetes.io repository.
50

50

00:02:40,310  -->  00:02:41,430
We do an update again
51

51

00:02:41,430  -->  00:02:44,723
and then we install the kubelet, kubeadm, and kubectl
52

52

00:02:46,319  -->  00:02:50,232
and then we can deploy Kubernetes using kubeadm.
53

53

00:02:50,232  -->  00:02:51,951
So, we use kubeadm init,
54

54

00:02:51,951  -->  00:02:54,330
we're going to specify pod-network-cidr,
55

55

00:02:54,330  -->  00:02:56,640
so that IP range for pod networks
56

56

00:02:56,640  -->  00:03:01,000
is going to be 192.168.0.0/16, so this range.
57

57

00:03:01,000  -->  00:03:03,730
So this is a range of IP addresses
58

58

00:03:03,730  -->  00:03:06,053
and IP space that the pods can use.
59

59

00:03:07,240  -->  00:03:10,460
You can add multiple flags to this kubeadm init.
60

60

00:03:10,460  -->  00:03:13,060
If you want to use a different IP address
61

61

00:03:13,060  -->  00:03:15,060
for your API server, you can also use
62

62

00:03:15,060  -->  00:03:18,010
apiserver-advertise-address="ip".
63

63

00:03:18,010  -->  00:03:20,730
We only have one IP address assigned to this server,
64

64

00:03:20,730  -->  00:03:23,360
so it's automatically going to be that one.
65

65

00:03:23,360  -->  00:03:26,620
This is the default gateway address that will be used,
66

66

00:03:26,620  -->  00:03:29,150
this is the IP address to get to the internet.
67

67

00:03:29,150  -->  00:03:31,840
If we'd have another internal IP address,
68

68

00:03:31,840  -->  00:03:33,210
then you need this flag
69

69

00:03:33,210  -->  00:03:35,930
if you want to use internal IP addresses.
70

70

00:03:35,930  -->  00:03:37,890
If you're doing an on-prem deployment
71

71

00:03:37,890  -->  00:03:39,880
and you only have an internal IP address,
72

72

00:03:39,880  -->  00:03:41,600
you also don't have to specify this,
73

73

00:03:41,600  -->  00:03:44,540
it's only when you have multiple IP addresses.
74

74

00:03:44,540  -->  00:03:47,830
This is going to be our config that we then can use
75

75

00:03:47,830  -->  00:03:50,110
and then we are going to do kubectl apply
76

76

00:03:51,520  -->  00:03:55,543
of this calico.yaml to get our CNI.
77

77

00:03:57,823  -->  00:03:59,360
We can execute this;
78

78

00:03:59,360  -->  00:04:04,360
scripts/install-kubernetes.sh on the master.
79

79

00:04:05,490  -->  00:04:07,680
It's first going to install Docker
80

80

00:04:07,680  -->  00:04:10,090
and then it will install and deploy Kubernetes.
81

81

00:04:10,090  -->  00:04:15,090
While this is taking its time, I'm going to do the node.
82

82

00:04:15,250  -->  00:04:17,630
So here we have a script,
83

83

00:04:17,630  -->  00:04:21,483
I'll vim it, so we have colors for the install node.
84

84

00:04:22,490  -->  00:04:25,290
Very similar, we also need Docker.
85

85

00:04:25,290  -->  00:04:27,230
This for Docker, same lines.
86

86

00:04:27,230  -->  00:04:30,743
We also need kubeadm and kubectl,
87

87

00:04:31,690  -->  00:04:35,600
so we're going to install kubelet, kubeadm, and kubectl.
88

88

00:04:35,600  -->  00:04:37,973
We're just not going to do the kubeadm init,
89

89

00:04:37,973  -->  00:04:40,830
we're going to use a joint command,
90

90

00:04:40,830  -->  00:04:45,530
So I'm going to install this on the node.
91

91

00:04:45,530  -->  00:04:46,930
If you're going to use multiple nodes,
92

92

00:04:46,930  -->  00:04:51,413
then you can execute this script on your multiple nodes.
93

93

00:04:52,390  -->  00:04:54,190
I only have one node here,
94

94

00:04:54,190  -->  00:04:55,963
so I only have to execute it once.
95

95

00:04:57,370  -->  00:05:00,523
Back to our master, what is happening here?
96

96

00:05:01,600  -->  00:05:04,430
It is now going to install Kubernetes.
97

97

00:05:04,430  -->  00:05:08,090
It installed kubeadm, kubectl, and the kubelet,
98

98

00:05:08,090  -->  00:05:09,790
so now it is going to unpack it
99

99

00:05:09,790  -->  00:05:13,083
and then it will do the deployment of Kubernetes master.
100

100

00:05:15,510  -->  00:05:18,593
Our Kubernetes master has initialized successfully.
101

101

00:05:19,430  -->  00:05:20,800
To start using your cluster,
102

102

00:05:20,800  -->  00:05:24,993
we need to run the following as a regular user,
103

103

00:05:26,100  -->  00:05:30,140
but we don't have a user yet, so we'll have to add a user.
104

104

00:05:30,140  -->  00:05:31,900
I have a separate script for that,
105

105

00:05:31,900  -->  00:05:36,220
but first, lets join our auto-machine.
106

106

00:05:36,220  -->  00:05:38,240
So, this is the token I talked about
107

107

00:05:38,240  -->  00:05:40,970
in the previous lecture, that we then use
108

108

00:05:40,970  -->  00:05:44,480
to make sure that not every single server can join,
109

109

00:05:44,480  -->  00:05:47,392
only servers with a token can join.
110

110

00:05:47,392  -->  00:05:48,540
So we copy paste this
111

111

00:05:50,350  -->  00:05:55,350
on our node one and then here we have joined the cluster.
112

112

00:05:57,310  -->  00:05:58,803
Let's create a user now.
113

113

00:05:59,860  -->  00:06:04,860
So I have another script that I prepared, create-user.sh.
114

114

00:06:05,610  -->  00:06:08,230
It adds a Ubuntu user...
115

115

00:06:08,230  -->  00:06:12,310
Well, it's first going to create a group ubuntu@ubuntu-user,
116

116

00:06:12,310  -->  00:06:14,140
it's going to be in the group; admin.
117

117

00:06:14,140  -->  00:06:16,080
We're going to create a home directory for it,
118

118

00:06:16,080  -->  00:06:18,100
going to copy the ssh keys.
119

119

00:06:18,100  -->  00:06:19,310
If you don't use ssh keys,
120

120

00:06:19,310  -->  00:06:21,790
then you still need to set a password for user ubuntu,
121

121

00:06:21,790  -->  00:06:26,310
which you can do with using p-a-s-s-w-d ubuntu.
122

122

00:06:26,310  -->  00:06:28,613
If use ssh keys, then this is not necessary.
123

123

00:06:30,030  -->  00:06:33,720
You're going to do a chown to set the ownership rights
124

124

00:06:33,720  -->  00:06:35,993
and then we going to add the unbuntu user to sudoers,
125

125

00:06:35,993  -->  00:06:39,143
so that we can still do sudo to become root.
126

126

00:06:40,030  -->  00:06:43,030
We're going to create this ubuntu kube directory
127

127

00:06:43,030  -->  00:06:45,760
and you're gonna copy this kubernetes/admin.conf
128

128

00:06:45,760  -->  00:06:49,800
from /etc/kubernetes.conf to .kube/config
129

129

00:06:49,800  -->  00:06:51,910
and then we're going to chown this,
130

130

00:06:51,910  -->  00:06:55,220
we're going to change ownership of this file as well.
131

131

00:06:55,220  -->  00:06:57,743
So we're going to execute this, create-user,
132

132

00:06:59,970  -->  00:07:03,730
and then we can actually go to the ubuntu user.
133

133

00:07:03,730  -->  00:07:05,013
So I'm going to logout
134

134

00:07:05,980  -->  00:07:09,090
and then I'm going to set our login as the ubuntu user
135

135

00:07:10,500  -->  00:07:13,920
and now I am logged in as the ubuntu user.
136

136

00:07:13,920  -->  00:07:15,480
I will do the same on the node,
137

137

00:07:15,480  -->  00:07:17,960
so I'm just going to copy/paste this on the other node
138

138

00:07:17,960  -->  00:07:19,810
'cause I wanna create the user,
139

139

00:07:19,810  -->  00:07:22,708
but I don't want to copy this,
140

140

00:07:22,708  -->  00:07:26,780
because I don't have his admin.conf on my node,
141

141

00:07:27,650  -->  00:07:30,090
but I will still just create a user here,
142

142

00:07:30,090  -->  00:07:32,673
so that I can also work with this user.
143

143

00:07:33,588  -->  00:07:36,950
So I'm going to logout and login again
144

144

00:07:40,270  -->  00:07:44,720
and here, I am also logged in as the ubuntu user,
145

145

00:07:44,720  -->  00:07:46,980
rather than the root user.
146

146

00:07:46,980  -->  00:07:48,380
If you want to disable the root user,
147

147

00:07:48,380  -->  00:07:52,460
you still have to delete the ssh key
148

148

00:07:52,460  -->  00:07:56,033
or reset the password or remove the password.
149

149

00:07:57,360  -->  00:08:01,170
If you wanna use on the node the kubectl commands,
150

150

00:08:01,170  -->  00:08:04,760
you also need to copy this admin.conf using a cp
151

151

00:08:04,760  -->  00:08:07,920
or just copy/paste to this node.
152

152

00:08:07,920  -->  00:08:09,810
For now I will not do that,
153

153

00:08:09,810  -->  00:08:12,240
maybe I will do it later when I need it.
154

154

00:08:12,240  -->  00:08:16,570
What I now want to do is kubectl get nodes,
155

155

00:08:16,570  -->  00:08:18,840
to see where my cluster is up
156

156

00:08:18,840  -->  00:08:23,680
and I have a master node and a Kubernetes node,
157

157

00:08:23,680  -->  00:08:25,940
both are ready.
158

158

00:08:25,940  -->  00:08:28,330
I just want to test what I can skip of both,
159

159

00:08:28,330  -->  00:08:31,340
so I'm just going to run kubectl run helloworld
160

160

00:08:31,340  -->  00:08:33,700
and I'm going to run the echoserver,
161

161

00:08:33,700  -->  00:08:35,120
which just returns some information
162

162

00:08:35,120  -->  00:08:37,690
so that we know that the pod is working.
163

163

00:08:37,690  -->  00:08:38,870
You will use port 8080.
164

164

00:08:43,060  -->  00:08:46,383
Pod has been created, container is still being creating.
165

165

00:08:48,000  -->  00:08:49,940
It takes some time to fetch this image
166

166

00:08:51,270  -->  00:08:52,240
and then I'm going to
167

167

00:08:52,240  -->  00:08:56,666
kubectl expose deployment helloworld --type=NodePort.
168

168

00:08:56,666  -->  00:08:58,216
It will create a service for us
169

169

00:09:01,290  -->  00:09:04,780
and this is the service that has been created for us.
170

170

00:09:04,780  -->  00:09:06,170
This is the port.
171

171

00:09:06,170  -->  00:09:08,770
Let's have a look at the pod, whether it's available
172

172

00:09:10,690  -->  00:09:14,150
and then to test, I just open a new terminal
173

173

00:09:14,150  -->  00:09:15,923
to be on my local PC.
174

174

00:09:16,860  -->  00:09:20,370
I use the IP address of the node, not of the master,
175

175

00:09:20,370  -->  00:09:22,630
because even though I scaled the pod
176

176

00:09:22,630  -->  00:09:24,870
using kubectl on the master,
177

177

00:09:24,870  -->  00:09:27,420
all the pods are scaled on the nodes and not on the master,
178

178

00:09:27,420  -->  00:09:30,830
so I need to contact one of the nodes, not the master,
179

179

00:09:30,830  -->  00:09:33,410
on this port that is the node port
180

180

00:09:34,400  -->  00:09:38,220
and then you see, I get back the result from the echoserver,
181

181

00:09:38,220  -->  00:09:41,580
so it just says these are headers received.
182

182

00:09:41,580  -->  00:09:42,883
It was a GET command,
183

183

00:09:43,890  -->  00:09:46,030
this is the IP address of the node
184

184

00:09:47,230  -->  00:09:48,470
and this is the URL that I asked,
185

185

00:09:48,470  -->  00:09:53,433
so if I say, I ask for directory,
186

186

00:09:54,890  -->  00:09:58,840
then you will see the request_url is actually directory.
187

187

00:09:58,840  -->  00:10:00,250
So, this works.
188

188

00:10:00,250  -->  00:10:03,330
So we successfully deployed our Kubernetes cluster,
189

189

00:10:03,330  -->  00:10:07,690
launched the pod, the pod is now running on the node
190

190

00:10:07,690  -->  00:10:10,500
and then I can curl to this node on this node port
191

191

00:10:10,500  -->  00:10:12,000
and then the pod will respond.
