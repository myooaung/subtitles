1
1

00:00:00,320  -->  00:00:01,710
<v Edward Viaene>In this demo, I will show you</v>
2

2

00:00:01,710  -->  00:00:04,053
how to do traffic routing with Istio.
3

3

00:00:06,650  -->  00:00:09,610
I'm going to create a v2, version two,
4

4

00:00:09,610  -->  00:00:10,933
of my hello world app.
5

5

00:00:12,480  -->  00:00:15,740
So we still have the Istio-ingress controller,
6

6

00:00:15,740  -->  00:00:18,270
and the Istio-ingress controller will redirect
7

7

00:00:18,270  -->  00:00:22,050
to the version one of my hello pod,
8

8

00:00:22,050  -->  00:00:25,453
and this hello pod will connect to world and world-2.
9

9

00:00:26,670  -->  00:00:29,547
I'm going to add a new pod, hello (v2).
10

10

00:00:31,140  -->  00:00:33,160
It will be a new deployment,
11

11

00:00:33,160  -->  00:00:35,200
but the app label will be the same,
12

12

00:00:35,200  -->  00:00:38,847
so the service for hello will route to hello and hello (v2).
13

13

00:00:40,380  -->  00:00:41,700
The distinction between the apps
14

14

00:00:41,700  -->  00:00:44,430
is going to be in the label version.
15

15

00:00:44,430  -->  00:00:46,610
The first pod has version v1,
16

16

00:00:46,610  -->  00:00:48,853
and the new pod will have version v2.
17

17

00:00:50,060  -->  00:00:52,690
In the Istio rules, I will then have to define
18

18

00:00:52,690  -->  00:00:56,430
some new rules to route to traffic not to both pods,
19

19

00:00:56,430  -->  00:00:58,840
but depending on the version number,
20

20

00:00:58,840  -->  00:01:02,050
I want to route all the traffic to the first one,
21

21

00:01:02,050  -->  00:01:04,170
and only when it matters some specific rule,
22

22

00:01:04,170  -->  00:01:05,947
I want to send it to hello (v2).
23

23

00:01:07,680  -->  00:01:11,570
So in this demo, I will change the virtual service rules,
24

24

00:01:11,570  -->  00:01:15,470
and I will say that if the host is hello.example.com,
25

25

00:01:15,470  -->  00:01:16,963
then route it to version one.
26

26

00:01:17,980  -->  00:01:20,840
If the host is hello.example.com
27

27

00:01:20,840  -->  00:01:24,130
and the header end-user is equal to john,
28

28

00:01:24,130  -->  00:01:25,920
then send it to v2.
29

29

00:01:25,920  -->  00:01:27,690
And this is actually quite powerful
30

30

00:01:27,690  -->  00:01:30,370
that Istio can do these advanced routing rules
31

31

00:01:31,220  -->  00:01:33,980
because you could make your app in a way that,
32

32

00:01:33,980  -->  00:01:38,140
if users logged in, that you pass a header or a cookie,
33

33

00:01:38,140  -->  00:01:39,560
or something that identifies
34

34

00:01:39,560  -->  00:01:41,430
that a specific user is logged in,
35

35

00:01:41,430  -->  00:01:43,190
and only when this user is logged in,
36

36

00:01:43,190  -->  00:01:45,650
then you will show the new version of the app.
37

37

00:01:45,650  -->  00:01:49,193
That way, you can test your app on the cluster with Istio,
38

38

00:01:50,180  -->  00:01:51,770
but no users will see it,
39

39

00:01:51,770  -->  00:01:55,370
only this specific user is end-user john
40

40

00:01:55,370  -->  00:01:57,980
will be able to see the new version.
41

41

00:01:57,980  -->  00:01:59,953
So that's what I'm going to show you now.
42

42

00:02:00,960  -->  00:02:02,673
So I have a helloworld-v2.yaml.
43

43

00:02:05,030  -->  00:02:06,947
This is deployment.
44

44

00:02:06,947  -->  00:02:11,210
This deployment is called hello-v2, still three replicas.
45

45

00:02:11,210  -->  00:02:13,550
The label is still app hello,
46

46

00:02:13,550  -->  00:02:14,993
but here, the version is v2.
47

47

00:02:17,730  -->  00:02:21,410
This app will output hello, this is v2,
48

48

00:02:21,410  -->  00:02:25,050
and it will add the content from world-2,
49

49

00:02:25,050  -->  00:02:27,913
so these are the three exclamation marks.
50

50

00:02:29,990  -->  00:02:31,890
So let's have a look at our first deployment
51

51

00:02:31,890  -->  00:02:32,723
to see the difference.
52

52

00:02:32,723  -->  00:02:34,617
So we have helloworld.yaml,
53

53

00:02:36,920  -->  00:02:40,680
and here we have metadata name hello.
54

54

00:02:40,680  -->  00:02:42,730
This is different because now we have v2,
55

55

00:02:43,600  -->  00:02:45,760
but here we have the same app label.
56

56

00:02:45,760  -->  00:02:50,260
The label app is hello and is version one.
57

57

00:02:50,260  -->  00:02:51,510
So what will happen is that,
58

58

00:02:51,510  -->  00:02:52,973
if you wouldn't use Istio,
59

59

00:02:54,100  -->  00:02:57,940
then you would have a service that selects app hello,
60

60

00:02:57,940  -->  00:03:01,310
so it would route it to both the earlier hello deployment
61

61

00:03:01,310  -->  00:03:04,630
and both the new v2 deployment.
62

62

00:03:04,630  -->  00:03:05,463
So that's not what we want.
63

63

00:03:05,463  -->  00:03:08,923
We want to create some rules to distinguish between those,
64

64

00:03:10,920  -->  00:03:15,683
and those rules I have in helloworld-v2-routing.yaml.
65

65

00:03:17,280  -->  00:03:21,040
This is a kind of destination rule of the Istio API.
66

66

00:03:21,040  -->  00:03:22,803
I will call this hello.
67

67

00:03:23,710  -->  00:03:26,640
And I say if the destination host is
68

68

00:03:26,640  -->  00:03:28,950
hello.default.svc.cluster.local,
69

69

00:03:28,950  -->  00:03:33,800
so this is our hello service within our cluster,
70

70

00:03:33,800  -->  00:03:35,460
then we're gonna have two subsets.
71

71

00:03:35,460  -->  00:03:37,640
We're gonna have subset name v1,
72

72

00:03:37,640  -->  00:03:40,050
and that will be routed to the pods
73

73

00:03:40,050  -->  00:03:42,440
with the labels version v1,
74

74

00:03:42,440  -->  00:03:43,687
and then we will have a v2,
75

75

00:03:43,687  -->  00:03:47,183
and these will be routed to the pods with the labels v2.
76

76

00:03:48,660  -->  00:03:51,620
I just have to update my virtual service now.
77

77

00:03:51,620  -->  00:03:54,100
So this is the same virtual service I created earlier.
78

78

00:03:54,100  -->  00:03:55,723
I will now overwrite it.
79

79

00:03:57,670  -->  00:04:00,370
I'm going to specify a host, hello.example.com,
80

80

00:04:00,370  -->  00:04:01,683
so I'll have to pass this.
81

81

00:04:03,470  -->  00:04:05,073
Still my helloworld-gateway,
82

82

00:04:06,010  -->  00:04:09,120
and then I will have default route here at the bottom,
83

83

00:04:09,120  -->  00:04:12,590
so if nothing matches, then this route will be used.
84

84

00:04:12,590  -->  00:04:17,590
So this will be the host hello.default.svc.cluster.local,
85

85

00:04:18,440  -->  00:04:19,740
but it will use subset v1.
86

86

00:04:21,200  -->  00:04:24,080
Then I have a matching rule here.
87

87

00:04:24,080  -->  00:04:27,630
With this matching rule, I have headers right here, headers.
88

88

00:04:27,630  -->  00:04:32,123
End-user, exact: john, so this header end-user is a key.
89

89

00:04:33,210  -->  00:04:35,730
john is the value this needs to match.
90

90

00:04:35,730  -->  00:04:38,280
If this matches, then I'll route this
91

91

00:04:38,280  -->  00:04:41,993
to the destination hello, but subset v2.
92

92

00:04:44,160  -->  00:04:45,160
Let's test this out.
93

93

00:04:47,380  -->  00:04:52,380
I'll have to add my v2.yaml,
94

94

00:04:55,290  -->  00:05:00,290
and I'll apply my helloworld-v2-routing.yaml.
95

95

00:05:04,600  -->  00:05:07,380
I destroyed and spun up my cluster again between the demo,
96

96

00:05:07,380  -->  00:05:11,853
so let's have another look at the service of,
97

97

00:05:14,160  -->  00:05:16,783
at the service of Istio-system.
98

98

00:05:20,800  -->  00:05:22,050
This is my load balancer.
99

99

00:05:23,610  -->  00:05:28,610
So if I do curl /hello, it's not gonna work anymore.
100

100

00:05:28,650  -->  00:05:30,090
Because I applied different routing rules,
101

101

00:05:30,090  -->  00:05:34,090
I still have only one virtual service.
102

102

00:05:34,090  -->  00:05:37,693
I just have overwritten it with my v2 yaml file.
103

103

00:05:39,470  -->  00:05:44,220
So this actually gives a 404 Not Found.
104

104

00:05:44,220  -->  00:05:49,090
If I want to reach my hello world app,
105

105

00:05:49,090  -->  00:05:50,630
I need to pass a host name now,
106

106

00:05:50,630  -->  00:05:53,623
so host: hello.example.com,
107

107

00:05:54,980  -->  00:05:56,480
and then I get my hello world.
108

108

00:05:59,100  -->  00:06:01,863
So this is the URL that normal users use.
109

109

00:06:02,750  -->  00:06:06,770
People will get the hello world URL.
110

110

00:06:06,770  -->  00:06:09,030
Now I want to reach v2,
111

111

00:06:09,030  -->  00:06:14,030
and the header that I can use is end-user: john,
112

112

00:06:14,070  -->  00:06:17,600
and if this header is set, by example,
113

113

00:06:17,600  -->  00:06:21,940
this can be set by your login code on your website,
114

114

00:06:21,940  -->  00:06:25,570
then I'm going to get hello, this is v2.
115

115

00:06:25,570  -->  00:06:27,800
So this is hello, this is v2,
116

116

00:06:27,800  -->  00:06:29,410
comes from the hello app,
117

117

00:06:29,410  -->  00:06:30,820
and these three exclamation marks
118

118

00:06:30,820  -->  00:06:34,193
come from still the world two app.
119

119

00:06:35,980  -->  00:06:38,600
So this is how you can direct traffic
120

120

00:06:38,600  -->  00:06:42,730
and put advanced routing rules within Istio
121

121

00:06:42,730  -->  00:06:46,103
to redirect traffic to one app or the other app.
