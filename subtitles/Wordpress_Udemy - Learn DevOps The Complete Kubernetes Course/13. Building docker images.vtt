WEBVTT
1
00:00:00.980 --> 00:00:08.650
Now that you have your own cluster running locally using minikube or on AWS using kops,

2
00:00:08.720 --> 00:00:17.100
now I can show you how building containers works, so you can run your own containers, own kubernetes.

3
00:00:17.100 --> 00:00:19.480
So, this section will be about building your own app in Docker.

4
00:00:19.520 --> 00:00:31.060
To build containers, you can use Docker engine, you can download Docker engine for Windows, Mac, and Linux.

5
00:00:31.160 --> 00:00:36.930
They are three different URLs, they are also different ways to set up Docker on your whole system.

6
00:00:37.130 --> 00:00:39.490
All installations are pretty easy.

7
00:00:39.490 --> 00:00:45.900
You just download the software, you install it, and can use Docker. You can use that or you can use my Vagrant "devops-box", which comes with Docker installed.

8
00:00:50.570 --> 00:00:51.530
On my GitHub, I have a "devops-box", which is a Vagrant box, which you can use, which will automatically install Docker for you.

9
00:00:59.510 --> 00:01:04.420
In the demos, I will always use an "ubuntu-xenial" box, setup with vagrant.

10
00:01:04.610 --> 00:01:08.150
I showed you how to do this in the AWS operation demos.

11
00:01:08.180 --> 00:01:15.320
If you haven't followed those, but you would like to run an "ubuntu-xenial" box, then have a look at those demos.

12
00:01:15.530 --> 00:01:21.690
The "devops-box" is also going to be "ubuntu-xenial", and you can find the URL for the "devops-box" in the procedure document.

13
00:01:22.590 --> 00:01:27.710
So, whether you use a plane ubuntu or "devops-box", it is almost the same.

14
00:01:27.720 --> 00:01:33.120
Also, you don't have to use Vagrant, Docker is available for Windows, Mac, and for Linux.

15
00:01:33.120 --> 00:01:35.440
So, you can use it with whatever operating system you want.

16
00:01:36.240 --> 00:01:38.300
Let's talk about Dockerizing a simple apps.

17
00:01:38.310 --> 00:01:45.180
I'm going to show you how to dockerize a simple nodeJS app, but you can write any application you want.

18
00:01:47.780 --> 00:01:52.040
So, dockerizing a simple nodeJS app only needs a few files: 

19
00:01:52.210 --> 00:01:59.480
You need a Docker file, every container you want to build needs a Docker for let's just go over the few lines that are in this Docker file.

20
00:01:59.480 --> 00:02:07.370
First line, "FROM node: 4.6", we are saying our image is going to be based on the node image. 

21
00:02:07.370 --> 00:02:12.030
This image is publicly available. 

22
00:02:12.050 --> 00:02:19.890
Docker will download version 4.6 from this official node image. Our work directory is going to be "/app".

23
00:02:20.540 --> 00:02:26.360
In this Linux environment that comes from nodes, we are going to create that directory "/app".

24
00:02:26.360 --> 00:02:31.260
And the current files, in this current directory are going to be copied to "/app".

25
00:02:31.370 --> 00:02:34.300
I will show you the auto files in just a moment.

26
00:02:34.310 --> 00:02:39.690
It is going to be the javascript files for nodeJS, are going to be copies to this "/app" directory.

27
00:02:40.050 --> 00:02:43.520
To prepare this darker image. We are going to execute some commands.

28
00:02:45.800 --> 00:02:48.440
You can do that using the run command.

29
00:02:48.440 --> 00:02:55.130
So this is going to run "npm install". "npm install" is a command that is going to install all the dependencies,

30
00:02:55.130 --> 00:03:02.930
so that we bundle the dependencies together with this node image. So we will have the node image 

31
00:03:02.930 --> 00:03:08.120
with the Linux operating system and all the dependencies, and then we are going to add all dependencies that this app needs.

32
00:03:09.360 --> 00:03:13.650
It is going to expose a port in this case port 3000.

33
00:03:13.890 --> 00:03:19.700
And when the container itself starts, then it is going to run "npm start".

34
00:03:19.930 --> 00:03:27.050
Let's have a look at the other files in the directory, that will then be copied to this "/app" folder.

35
00:03:27.130 --> 00:03:35.050
The first one is, "index.js" very simple nodeJS app, only a few lines.

36
00:03:35.050 --> 00:03:43.150
It is going to load all the dependencies that it needs to start a server, and then when it gets a hit on "/",

37
00:03:43.270 --> 00:03:45.970
the main page is just going to say, "Hello World!".

38
00:03:45.970 --> 00:03:52.130
This app is going to listen on port 3000 and when it starts, it is going to print to the console.

39
00:03:52.150 --> 00:03:53.740
The example app is listening that host and port.

40
00:03:53.780 --> 00:04:02.690
Then, a nodeJS typically has a "package.json" file and in this "package.json" file, 

41
00:04:02.690 --> 00:04:08.680
we are going to define the dependencies, it is basically the metadata of this app.

42
00:04:09.020 --> 00:04:10.050
So, our app has a name, "myapp", it has a version, you can choose whatever version you want,

43
00:04:14.570 --> 00:04:15.640
it is a private app, you are not going to put it in a public repository, 

44
00:04:18.710 --> 00:04:23.370
it has scripts, this is just going to define what happens if you do "npm start".

45
00:04:23.420 --> 00:04:30.300
So, if you take a look at the docker file, we see "npm start", then "node.index.js" is going to be executed.

46
00:04:30.470 --> 00:04:38.150
It depends on the engine, "node: '^4.6.1" and it has one dependency, the dependency is "express".

47
00:04:38.210 --> 00:04:43.560
So, when we do, "npm install", then it is going to install express "/app" add directory.

48
00:04:43.580 --> 00:04:50.510
So, we have a "/app" directory with "index.js", "package.json". And "npm install" is going to run,

49
00:04:50.750 --> 00:04:56.310
when we are going to build this docker container is going to install the dependencies in "/app".

50
00:04:58.110 --> 00:05:01.590
You will see this working, when I do this in a shell.

51
00:05:01.940 --> 00:05:08.330
You just need to understand what these three files mean. The flow itself of building the image,

52
00:05:08.480 --> 00:05:15.330
you will clearly see, when we run the Docker build command. So, to this project, Docker build can be used. 

53
00:05:15.330 --> 00:05:23.340
Docker build can be executed manually or "CI/CD" software like "jenkins" 

54
00:05:23.340 --> 00:05:28.040
to listen for any changes for your project and automatically exclude build.

55
00:05:28.190 --> 00:05:30.260
We are going to do it manually for now.

56
00:05:30.330 --> 00:05:36.010
Later on you can automate this easily. To build the Docker image from the previous line,

57
00:05:36.270 --> 00:05:43.290
this is what we are going to do, you are going to "CD" to the "docker-demo". This "docker-demo" is also in the git repository on my GitHub,

58
00:05:43.290 --> 00:05:49.350
so you can clone this repository or you can download it as a zip file, again procedure document.

59
00:05:50.830 --> 00:05:53.840
You will see the URL as well, in the next demo.

60
00:05:54.970 --> 00:06:00.880
Here, we have a Dockerfile, "index.js" and "package.json", if you want to build then this image using the definition in this Dockerfile,

61
00:06:00.910 --> 00:06:07.270
and there's "docker build" that is going to start the process.

62
00:06:08.680 --> 00:06:13.640
After the docker build process, you have built an image that can run NodeJS app.

63
00:06:14.260 --> 00:06:19.480
And that build process that I just explained, that's what I'm going to show you in the next demo.
