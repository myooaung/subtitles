1
1

00:00:00,320  -->  00:00:02,140
<v Speaker>In this demo I am going to show you</v>
2

2

00:00:02,140  -->  00:00:05,483
how to use IAM Roles for Service Accounts.
3

3

00:00:08,430  -->  00:00:11,933
In my kubernetes course I have deltree eks
4

4

00:00:13,470  -->  00:00:15,070
and in eks I have readme
5

5

00:00:17,800  -->  00:00:21,643
with the commands that I need for these IAM roles.
6

6

00:00:22,640  -->  00:00:24,820
I already executed this create cluster earlier
7

7

00:00:24,820  -->  00:00:26,270
because it takes some time,
8

8

00:00:26,270  -->  00:00:29,440
so I create now a cluster two with two nodes.
9

9

00:00:29,440  -->  00:00:31,640
And now I am going to enable
10

10

00:00:31,640  -->  00:00:35,190
the IAM oidc provider on my cluster,
11

11

00:00:35,190  -->  00:00:39,323
which I need to use those IAM roles for service accounts.
12

12

00:00:40,850  -->  00:00:43,160
So if you execute the commands
13

13

00:00:43,160  -->  00:00:45,443
it will just show you what it's going to do,
14

14

00:00:46,470  -->  00:00:48,800
and then if you add a proof to it
15

15

00:00:50,950  -->  00:00:53,773
then it will actually apply those changes.
16

16

00:00:54,704  -->  00:00:57,390
So now it has applied those changes
17

17

00:00:57,390  -->  00:00:59,990
for my cluster two in eu west one.
18

18

00:00:59,990  -->  00:01:02,210
So eu west one is my default region.
19

19

00:01:02,210  -->  00:01:03,610
If you're not using your default region
20

20

00:01:03,610  -->  00:01:05,710
you will have to add that (murmurs) region
21

21

00:01:06,640  -->  00:01:07,993
to your arguments.
22

22

00:01:09,180  -->  00:01:11,240
And then I want to create a new IAM role
23

23

00:01:12,230  -->  00:01:13,550
using a service account,
24

24

00:01:13,550  -->  00:01:15,904
so I have my service account as a service account
25

25

00:01:15,904  -->  00:01:16,737
(mumbles) default,
26

26

00:01:16,737  -->  00:01:19,330
and I want to attach the amazon s three read only access
27

27

00:01:19,330  -->  00:01:20,163
to test.
28

28

00:01:21,430  -->  00:01:23,720
If I execute it, it will show you
29

29

00:01:23,720  -->  00:01:24,870
what it's going to add.
30

30

00:01:25,710  -->  00:01:29,390
So, it's going to add one IAM service account
31

31

00:01:30,940  -->  00:01:33,492
which has two subtasks.
32

32

00:01:33,492  -->  00:01:34,820
It's going to create and IAM role
33

33

00:01:34,820  -->  00:01:38,400
and then it's going to create this service account
34

34

00:01:38,400  -->  00:01:39,703
in my default name space.
35

35

00:01:42,070  -->  00:01:43,373
Going to approve this,
36

36

00:01:44,800  -->  00:01:48,200
so this deploys a new stack in cloud formation
37

37

00:01:48,200  -->  00:01:50,530
to add this new role
38

38

00:01:50,530  -->  00:01:52,320
and then it will create in my default name space
39

39

00:01:52,320  -->  00:01:54,790
that my service account.
40

40

00:01:54,790  -->  00:01:56,190
This can take a few minutes.
41

41

00:01:57,120  -->  00:01:58,400
Now it's done.
42

42

00:01:58,400  -->  00:02:00,320
I have my service account.
43

43

00:02:00,320  -->  00:02:02,653
So if I have look kubectl,
44

44

00:02:05,940  -->  00:02:07,193
get service account,
45

45

00:02:09,207  -->  00:02:10,680
in my default name space,
46

46

00:02:10,680  -->  00:02:12,390
I have my service account,
47

47

00:02:12,390  -->  00:02:13,690
let's see what's in there.
48

48

00:02:16,040  -->  00:02:17,930
Using the yaml.
49

49

00:02:17,930  -->  00:02:19,533
So here I have this annotation,
50

50

00:02:20,400  -->  00:02:23,983
eks amazon aws dot come role arm and this is the arm
51

51

00:02:23,983  -->  00:02:26,663
that has been created for me, that I can now use.
52

52

00:02:28,320  -->  00:02:31,140
In my eks folder I have a file here
53

53

00:02:31,140  -->  00:02:33,053
called amazon linux dot yaml.
54

54

00:02:34,060  -->  00:02:38,180
This contains the deployment of amazon linux
55

55

00:02:38,180  -->  00:02:41,300
using the service account, my service account.
56

56

00:02:41,300  -->  00:02:44,010
So this deployment will then have access
57

57

00:02:44,010  -->  00:02:47,143
to assume this role.
58

58

00:02:48,690  -->  00:02:49,700
It's not going to do anything.
59

59

00:02:49,700  -->  00:02:50,830
It's just gonna keep running,
60

60

00:02:50,830  -->  00:02:52,480
so I have to sleep infinity here.
61

61

00:02:54,220  -->  00:02:56,210
I'm going to apply this using kubectl apply
62

62

00:03:00,250  -->  00:03:02,393
and then I'm going to exec it into this pod.
63

63

00:03:20,260  -->  00:03:22,260
I'm going to open a bash cell basically.
64

64

00:03:23,250  -->  00:03:25,400
So now I am in my pod.
65

65

00:03:25,400  -->  00:03:27,300
Let me clean my screen
66

66

00:03:27,300  -->  00:03:29,923
and then I'm going to install python three.
67

67

00:03:36,620  -->  00:03:38,670
The reason why I'm installing python three,
68

68

00:03:38,670  -->  00:03:41,370
is that if I would just install
69

69

00:03:41,370  -->  00:03:43,121
AWS command line utility
70

70

00:03:43,121  -->  00:03:44,580
it's not going to be the latest
71

71

00:03:44,580  -->  00:03:46,442
AWS command line utility.
72

72

00:03:46,442  -->  00:03:49,310
It's going to be too old to use this implementation,
73

73

00:03:49,310  -->  00:03:52,170
so I need to use pip to get the latest
74

74

00:03:52,170  -->  00:03:53,443
AWS command line utility.
75

75

00:03:56,560  -->  00:03:57,490
So I'm going to use pip three install
76

76

00:03:57,490  -->  00:03:58,880
AWS command line utility
77

77

00:04:00,803  -->  00:04:03,693
and this is gonna download and install the latest version.
78

78

00:04:06,570  -->  00:04:09,120
So let's now first check the environment variables.
79

79

00:04:11,210  -->  00:04:15,214
So if you do set grep AWS it is going to show us
80

80

00:04:15,214  -->  00:04:18,580
the environment variables that have AWS in it's name.
81

81

00:04:18,580  -->  00:04:20,760
So here we have the AWS role, ARN
82

82

00:04:20,760  -->  00:04:24,750
so this is the ARN role and the AWS identity token file.
83

83

00:04:24,750  -->  00:04:27,400
So these two environment variables were injected
84

84

00:04:27,400  -->  00:04:31,070
by the webhook so that we can now use them in this pod.
85

85

00:04:31,070  -->  00:04:33,690
If you wouldn't use the service account
86

86

00:04:33,690  -->  00:04:35,650
then we wouldn't have these two variables.
87

87

00:04:35,650  -->  00:04:38,613
It wouldn't be able to read this token.
88

88

00:04:40,030  -->  00:04:41,183
So what is this token?
89

89

00:04:42,780  -->  00:04:44,380
Let me show you what's in there.
90

90

00:04:45,690  -->  00:04:47,073
This is a jwt,
91

91

00:04:48,267  -->  00:04:51,723
and this jwt we can then use to assume this role.
92

92

00:04:52,770  -->  00:04:55,860
After the course is finished I'll remove this role
93

93

00:04:55,860  -->  00:04:59,820
and this jwt and access token will not be usable anymore.
94

94

00:04:59,820  -->  00:05:01,510
So I'm not going to blur any of this.
95

95

00:05:01,510  -->  00:05:04,163
It will become unusable after I do this demo.
96

96

00:05:05,748  -->  00:05:07,348
We need to have all the content.
97

97

00:05:08,396  -->  00:05:11,580
I'm going to copy this and then I can go to a website
98

98

00:05:11,580  -->  00:05:16,580
like jwt.io to paste this token.
99

99

00:05:16,600  -->  00:05:18,920
Be careful where you paste jwts.
100

100

00:05:18,920  -->  00:05:20,570
This website doesn't record any tokens
101

101

00:05:20,570  -->  00:05:22,770
but others might.
102

102

00:05:22,770  -->  00:05:26,660
So this is jwt algorithm rs256.
103

103

00:05:26,660  -->  00:05:31,230
And here we can see that we have sts amazon.com
104

104

00:05:31,230  -->  00:05:32,720
which is the audience.
105

105

00:05:32,720  -->  00:05:35,710
We going to basically use ordc capabilities
106

106

00:05:35,710  -->  00:05:40,710
to get a real access key from sts amazon aws dot com.
107

107

00:05:40,920  -->  00:05:43,830
So what sdk's gonna go to sts
108

108

00:05:43,830  -->  00:05:48,173
and give this jwt to sts to obtain our access credential.
109

109

00:05:49,600  -->  00:05:52,460
This basically says that we have a service account
110

110

00:05:52,460  -->  00:05:55,980
and that we should be able to retrieve the role linked
111

111

00:05:55,980  -->  00:05:57,323
to this service account.
112

112

00:05:58,520  -->  00:06:02,470
This jwt is signed using a private key that we don't have
113

113

00:06:02,470  -->  00:06:04,693
so we cannot recreate this jwt.
114

114

00:06:06,010  -->  00:06:11,010
This jwt will expire so it was issued the ninth of 12:58
115

115

00:06:12,650  -->  00:06:15,750
and it will expire the tenth at 12:58
116

116

00:06:15,750  -->  00:06:17,730
so it's now valid for one day,
117

117

00:06:17,730  -->  00:06:19,140
but this could change.
118

118

00:06:19,140  -->  00:06:23,640
And using this jwt we can then assume our role.
119

119

00:06:23,640  -->  00:06:24,690
So, let's try it out.
120

120

00:06:26,290  -->  00:06:29,140
This is of course all handled transparently
121

121

00:06:29,140  -->  00:06:32,860
but let me show you how this works with sdk.
122

122

00:06:32,860  -->  00:06:37,280
So right now I'm going to use AWS s three ls
123

123

00:06:37,280  -->  00:06:39,713
and let me just grep for mybucket.
124

124

00:06:42,300  -->  00:06:45,260
I have multiple buckets in my ls tree.
125

125

00:06:45,260  -->  00:06:48,573
And if I ls the contents of this first bucket,
126

126

00:06:51,070  -->  00:06:53,310
I can list this object test dot txt.
127

127

00:06:53,310  -->  00:06:55,670
So I have access to list the buckets
128

128

00:06:55,670  -->  00:06:58,490
and I have access to list and read data
129

129

00:06:58,490  -->  00:06:59,990
from my bucket.
130

130

00:06:59,990  -->  00:07:02,033
The role, the IAM role works.
131

131

00:07:02,970  -->  00:07:04,700
What happened under the hood?
132

132

00:07:04,700  -->  00:07:05,733
If you have a look,
133

133

00:07:06,690  -->  00:07:11,690
in dot aws you'll see we have a cache
134

134

00:07:12,260  -->  00:07:14,080
and here we have a json file,
135

135

00:07:14,080  -->  00:07:19,080
where the aws sdk will have saved our access key
136

136

00:07:20,110  -->  00:07:21,873
that is retrieved from sts.
137

137

00:07:23,950  -->  00:07:26,570
So here is our access key
138

138

00:07:27,690  -->  00:07:31,890
that we got from sts after sending this jwt.
139

139

00:07:31,890  -->  00:07:34,762
And only using this access key, secret access key
140

140

00:07:34,762  -->  00:07:38,003
and extension token we are able to contact s three.
141

141

00:07:38,850  -->  00:07:41,250
You actually can see that the first request takes longer
142

142

00:07:41,250  -->  00:07:45,750
to execute and other requests go faster.
143

143

00:07:45,750  -->  00:07:49,610
So if I do time aws s three ls
144

144

00:07:52,110  -->  00:07:54,200
this only took half a second.
145

145

00:07:54,200  -->  00:07:56,263
Let me now remove this cache.
146

146

00:08:00,400  -->  00:08:03,423
And then do time aws s three ls bucket.
147

147

00:08:04,540  -->  00:08:07,930
You'll see it will take a second and a half
148

148

00:08:07,930  -->  00:08:10,173
because it needs to go first to sts,
149

149

00:08:11,280  -->  00:08:15,610
use this jwt, retrieve the access key, secret key
150

150

00:08:15,610  -->  00:08:19,890
session token, cache this and then go to s three
151

151

00:08:19,890  -->  00:08:21,390
with the s credentials.
152

152

00:08:21,390  -->  00:08:26,060
Once it's cached it can just use the cache credential
153

153

00:08:26,060  -->  00:08:29,480
and then it will be much quicker to go to s three.
154

154

00:08:29,480  -->  00:08:32,420
This is how the implementation is done today.
155

155

00:08:32,420  -->  00:08:35,650
There might be improvements in the future of course.
156

156

00:08:35,650  -->  00:08:37,900
One last thing to say about this
157

157

00:08:37,900  -->  00:08:42,000
is that currently the token is all only readable by root.
158

158

00:08:42,000  -->  00:08:45,947
So if you have a look at var run secrets,
159

159

00:08:50,150  -->  00:08:52,690
here we have eks amazon dot com,
160

160

00:08:52,690  -->  00:08:53,703
the service account,
161

161

00:08:55,340  -->  00:09:00,240
the data slash token and currently this is only
162

162

00:09:00,240  -->  00:09:02,003
readable and writable by root.
163

163

00:09:07,930  -->  00:09:09,720
So that's it for this demo.
164

164

00:09:09,720  -->  00:09:11,230
It's pretty straight forward.
165

165

00:09:11,230  -->  00:09:12,820
There are a few caveats that you have
166

166

00:09:12,820  -->  00:09:14,642
to take into account when using this
167

167

00:09:14,642  -->  00:09:16,680
but the major benefit is
168

168

00:09:16,680  -->  00:09:18,380
that you can use service accounts.
169

169

00:09:19,380  -->  00:09:22,200
Use those service accounts with your pods
170

170

00:09:22,200  -->  00:09:25,440
and then have IAM policies on the pod level
171

171

00:09:25,440  -->  00:09:27,680
instead of on the worker level.
172

172

00:09:27,680  -->  00:09:30,870
This is a major feature of eks
173

173

00:09:30,870  -->  00:09:33,130
that a lot of people use to make sure
174

174

00:09:33,130  -->  00:09:35,940
that their pods have only the access that they need
175

175

00:09:35,940  -->  00:09:37,883
to aws services.
176

176

00:09:38,780  -->  00:09:43,780
You can exit from this show entering exit or using control d
177

177

00:09:43,850  -->  00:09:45,830
and then you can delete the pod
178

178

00:09:45,830  -->  00:09:48,120
and delete the cluster after wards
179

179

00:09:48,120  -->  00:09:49,570
if you don't need it anymore.
