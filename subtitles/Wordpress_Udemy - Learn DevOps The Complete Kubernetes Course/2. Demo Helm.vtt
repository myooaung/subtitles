WEBVTT
1
1

00:00:00.170  -->  00:00:01.003
<v Instructor>In this demo,</v>
2

2

00:00:01.003  -->  00:00:02.930
I'll show you how to install Helm
3

3

00:00:02.930  -->  00:00:05.040
and to install a Helm chart.
4

4

00:00:05.040  -->  00:00:07.233
For this example, I'll use Redis.
5

5

00:00:08.410  -->  00:00:10.400
In my Kubernetes course,
6

6

00:00:10.400  -->  00:00:12.290
I have a folder helm
7

7

00:00:13.250  -->  00:00:14.923
and in helm, I have a README.
8

8

00:00:16.530  -->  00:00:18.080
First, we need to install helm,
9

9

00:00:19.980  -->  00:00:22.913
so I'll just do a wget to install Helm.
10

10

00:00:24.298  -->  00:00:25.198
And to extract it,
11

11

00:00:27.340  -->  00:00:29.860
and this will extract the helm executable
12

12

00:00:29.860  -->  00:00:32.120
and I can just move the helm executable
13

13

00:00:33.140  -->  00:00:35.420
to usr/local/bin/helm
14

14

00:00:35.420  -->  00:00:38.190
and then I'll be able to execute helm.
15

15

00:00:38.190  -->  00:00:42.483
So I'll do helm -h, I will get the help.
16

16

00:00:45.080  -->  00:00:47.340
Let's have a look again at README.
17

17

00:00:47.340  -->  00:00:49.123
Next up is to initialize helm.
18

18

00:00:50.090  -->  00:00:51.660
And to initialize helm,
19

19

00:00:51.660  -->  00:00:56.570
we need to first create these RBAC roles.
20

20

00:00:57.630  -->  00:00:59.000
We need a ServiceAccount.
21

21

00:00:59.000  -->  00:01:00.200
We're gonna call it tiller
22

22

00:01:00.200  -->  00:01:03.890
and this tiller we're going to give admin privileges.
23

23

00:01:03.890  -->  00:01:07.090
You can give tiller less privileges
24

24

00:01:07.090  -->  00:01:11.250
but depending on what namespace you're going to deploy,
25

25

00:01:11.250  -->  00:01:13.740
but for our use case, we will just allow tiller
26

26

00:01:13.740  -->  00:01:15.940
to deploy everywhere on our cluster
27

27

00:01:15.940  -->  00:01:17.633
so we can give it the admin role.
28

28

00:01:19.030  -->  00:01:23.223
I'll do kubectl create helm-rbac.
29

29

00:01:27.063  -->  00:01:28.580
This will end the ServiceAccount
30

30

00:01:28.580  -->  00:01:30.350
and the cluster role binding
31

31

00:01:30.350  -->  00:01:34.100
and then I can do helm init --service-account tiller
32

32

00:01:35.027  -->  00:01:36.753
and this will install helm on the cluster.
33

33

00:01:38.090  -->  00:01:41.053
Tiller has been installed into our Kubernetes cluster.
34

34

00:01:41.960  -->  00:01:45.710
Let's have a look where it is deployed or installed.
35

35

00:01:45.710  -->  00:01:49.663
Kubectl get pods namespace kube-system.
36

36

00:01:52.500  -->  00:01:57.410
We have one new pod in kube-system, tiller-deploy,
37

37

00:01:57.410  -->  00:01:59.493
so now tiller has been deployed.
38

38

00:02:01.870  -->  00:02:04.510
Now let's search for redis,
39

39

00:02:04.510  -->  00:02:05.553
helm search redis.
40

40

00:02:07.860  -->  00:02:10.000
So there is a repository available
41

41

00:02:10.000  -->  00:02:13.060
that already has lots of charts.
42

42

00:02:13.060  -->  00:02:14.650
So here, if you look for redis,
43

43

00:02:14.650  -->  00:02:16.660
we find sensu and redis
44

44

00:02:16.660  -->  00:02:18.410
but this is the chart that we need.
45

45

00:02:19.730  -->  00:02:24.533
We can deploy helm using helm install stable/redis.
46

46

00:02:26.650  -->  00:02:29.683
And then it will deploy a redis for us.
47

47

00:02:31.420  -->  00:02:33.920
And it gives it a release name,
48

48

00:02:33.920  -->  00:02:34.960
a random name.
49

49

00:02:34.960  -->  00:02:36.730
In this case, funny-snail.
50

50

00:02:36.730  -->  00:02:38.830
You can also choose your own name
51

51

00:02:39.860  -->  00:02:44.860
if you add an argument like --name myredis
52

52

00:02:45.610  -->  00:02:49.473
will deploy a second redis with myredis, for example.
53

53

00:02:50.350  -->  00:02:52.010
You can deploy multiple redises
54

54

00:02:52.010  -->  00:02:53.950
just by giving them another name.
55

55

00:02:53.950  -->  00:02:57.410
So here, I just deployed a second one,
56

56

00:02:57.410  -->  00:02:59.833
using the name myredis in default namespace.
57

57

00:03:02.020  -->  00:03:03.180
Let's have a look at what happened here.
58

58

00:03:03.180  -->  00:03:05.850
So now I have two redises deployed.
59

59

00:03:05.850  -->  00:03:08.667
They both have a PersistentVolume,
60

60

00:03:09.620  -->  00:03:11.840
which will be created a Service,
61

61

00:03:11.840  -->  00:03:13.063
there's a Deployment.
62

62

00:03:14.460  -->  00:03:16.410
It has a Pod related to this deployment
63

63

00:03:16.410  -->  00:03:17.493
and it has a Secret.
64

64

00:03:19.070  -->  00:03:20.690
Let's read the notes.
65

65

00:03:20.690  -->  00:03:23.355
Redis can be accessed on port 6373
66

66

00:03:23.355  -->  00:03:25.100
on the following DNS name,
67

67

00:03:25.100  -->  00:03:27.030
which is the name of my service,
68

68

00:03:27.030  -->  00:03:30.313
so it's using the service discovery built in in Kubernetes.
69

69

00:03:31.161  -->  00:03:34.200
Myredis-redis.default cluster.
70

70

00:03:34.200  -->  00:03:35.320
To get a password, we can use
71

71

00:03:35.320  -->  00:03:40.200
kubectl get secret --namespace default myredis-redis.
72

72

00:03:40.200  -->  00:03:41.033
And the jsonpath
73

73

00:03:41.890  -->  00:03:45.020
data.redis-password will just give us the password.
74

74

00:03:45.020  -->  00:03:47.290
We need to base64 --decode that
75

75

00:03:47.290  -->  00:03:49.263
because password is in base64.
76

76

00:03:50.620  -->  00:03:52.030
And then we can connect to our redis.
77

77

00:03:52.030  -->  00:03:54.630
So let's first get our password.
78

78

00:03:54.630  -->  00:03:56.880
Let's just have a look what's in this secret.
79

79

00:03:58.720  -->  00:04:00.050
It's not showing,
80

80

00:04:00.050  -->  00:04:01.963
so we need this -o jsonpath.
81

81

00:04:04.080  -->  00:04:05.830
Or you can do -o yaml
82

82

00:04:06.800  -->  00:04:09.100
and then you will actually get everything.
83

83

00:04:09.100  -->  00:04:13.320
Let's do yaml and then we see everything.
84

84

00:04:13.320  -->  00:04:16.750
So here we see data, there's the redis-password
85

85

00:04:16.750  -->  00:04:18.603
and this is Base64 encoded.
86

86

00:04:20.740  -->  00:04:25.740
So if you do echo this string, base64 --decode,
87

87

00:04:25.770  -->  00:04:29.283
so now I just did manually what this command would do.
88

88

00:04:30.410  -->  00:04:32.953
So now this is our password.
89

89

00:04:35.512  -->  00:04:38.800
And we can connect using kubectl run.
90

90

00:04:38.800  -->  00:04:40.600
We can run a client.
91

91

00:04:40.600  -->  00:04:43.294
We remove the client afterwards.
92

92

00:04:43.294  -->  00:04:45.423
We need a tty, like a terminal.
93

93

00:04:46.830  -->  00:04:51.173
The environment is REDIS-PASSWORD.
94

94

00:04:52.500  -->  00:04:53.950
I'll just copy, paste it now.
95

95

00:04:55.870  -->  00:04:58.580
We use an image, a redis image
96

96

00:04:58.580  -->  00:05:00.350
that contains a client.
97

97

00:05:00.350  -->  00:05:04.783
And then we can use --bash to give us a terminal.
98

98

00:05:06.538  -->  00:05:07.371
Now we have a terminal.
99

99

00:05:07.371  -->  00:05:09.721
If I now do echo REDIS_PASSWORD,
100

100

00:05:09.721  -->  00:05:12.670
it will give us a password we can us
101

101

00:05:12.670  -->  00:05:14.883
to connect to redis,
102

102

00:05:15.810  -->  00:05:18.973
so now we are connected to redis.
103

103

00:05:22.380  -->  00:05:25.340
Let's try something out.
104

104

00:05:25.340  -->  00:05:27.550
SET key value.
105

105

00:05:27.550  -->  00:05:29.130
SET mykey myvalue.
106

106

00:05:30.770  -->  00:05:33.390
We inputted some data
107

107

00:05:33.390  -->  00:05:35.900
and if you now do GET mykey,
108

108

00:05:35.900  -->  00:05:38.553
we'll get myvalue, so this is all working.
109

109

00:05:39.960  -->  00:05:41.410
If you would stop this pod,
110

110

00:05:41.410  -->  00:05:43.200
then our data is preserved
111

111

00:05:45.380  -->  00:05:49.750
because this chart spun up some storage for us.
112

112

00:05:49.750  -->  00:05:52.363
We have a PersistentVolume claim.
113

113

00:05:53.950  -->  00:05:55.800
Two volume claims actually,
114

114

00:05:55.800  -->  00:05:58.200
one of the first redis, one of the second redis.
115

115

00:06:00.190  -->  00:06:01.693
So they are bound to my pods.
116

116

00:06:03.054  -->  00:06:04.100
So again I have a look at my pods.
117

117

00:06:04.100  -->  00:06:07.140
I have two pods 'cause I have two deployments
118

118

00:06:08.770  -->  00:06:10.720
that both spun up a pod.
119

119

00:06:10.720  -->  00:06:11.900
One or myredis
120

120

00:06:12.760  -->  00:06:14.940
and one for the funny-snail-redis.
121

121

00:06:14.940  -->  00:06:16.313
I also have services.
122

122

00:06:19.020  -->  00:06:20.380
I have the funny-snail-service
123

123

00:06:20.380  -->  00:06:23.160
and the myredis service
124

124

00:06:23.160  -->  00:06:27.810
and that makes sure that we can then use this host name here
125

125

00:06:27.810  -->  00:06:28.853
within our cluster.
126

126

00:06:29.700  -->  00:06:32.703
So this is an easy way to quickly get something installed.
127

127

00:06:33.830  -->  00:06:35.810
How do we delete something?
128

128

00:06:35.810  -->  00:06:40.313
Helm delete myredis, for example.
129

129

00:06:41.960  -->  00:06:44.963
And helm delete funny-snail.
130

130

00:06:48.347  -->  00:06:49.553
And now they will be deleted.
131

131

00:06:51.580  -->  00:06:52.503
No pods left.
132

132

00:06:54.620  -->  00:06:56.680
No volume claims left anymore
133

133

00:06:57.530  -->  00:06:59.573
and the volumes will be deleted as well.
134

134

00:07:01.000  -->  00:07:02.640
If a new release comes out,
135

135

00:07:02.640  -->  00:07:04.143
we can use helm upgrade.
136

136

00:07:08.930  -->  00:07:10.630
We can use helm upgrade
137

137

00:07:10.630  -->  00:07:13.920
and use an example to upgrade redis.
138

138

00:07:13.920  -->  00:07:14.950
So helm upgrade.
139

139

00:07:14.950  -->  00:07:18.680
We can pass values if you would have a yaml file
140

140

00:07:18.680  -->  00:07:20.180
with custom settings
141

141

00:07:21.370  -->  00:07:22.853
and we can upgrade redis.
142

142

00:07:24.000  -->  00:07:25.580
This is the release name
143

143

00:07:25.580  -->  00:07:27.263
and then this is the chart name.
144

144

00:07:28.560  -->  00:07:29.980
So what can we find?
145

145

00:07:29.980  -->  00:07:32.040
We can find lots of things here.
146

146

00:07:32.040  -->  00:07:33.447
We have, for example, mysql,
147

147

00:07:35.093  -->  00:07:37.980
we have mysql, mariadb, percona.
148

148

00:07:37.980  -->  00:07:40.020
We have a postgres as well.
149

149

00:07:40.020  -->  00:07:43.270
We have things like spinnaker,
150

150

00:07:43.270  -->  00:07:45.520
which I covered in my advanced course.
151

151

00:07:45.520  -->  00:07:46.520
Same with prometheus
152

152

00:07:48.070  -->  00:07:49.860
which I covered in my advanced course.
153

153

00:07:49.860  -->  00:07:53.400
So there's lots of charts available.
154

154

00:07:53.400  -->  00:07:55.913
There's also a chart for an ingress controller.
155

155

00:07:56.920  -->  00:07:59.350
There's the nginx-ingress that you can use.
156

156

00:07:59.350  -->  00:08:01.880
So rather than using my ingress controller,
157

157

00:08:01.880  -->  00:08:05.290
you can use this ingress controller as a chart as well,
158

158

00:08:05.290  -->  00:08:07.860
which might be easier to then upgrade it.
159

159

00:08:07.860  -->  00:08:09.560
Helm is pretty new still
160

160

00:08:09.560  -->  00:08:11.240
but it's definitely the way to package
161

161

00:08:11.240  -->  00:08:14.650
and deploy your applications on your Kubernetes cluster
162

162

00:08:14.650  -->  00:08:18.200
and it will only gain in importance in the future.
163

163

00:08:18.200  -->  00:08:20.440
So that's it for this lecture.
164

164

00:08:20.440  -->  00:08:23.303
This was a short introduction to Helm.
