WEBVTT
1
1

00:00:00.390  -->  00:00:01.223
<v Instructor>In this demo,</v>
2

2

00:00:01.223  -->  00:00:03.580
I will add a user on our cluster
3

3

00:00:03.580  -->  00:00:05.820
that we spun up with kops,
4

4

00:00:05.820  -->  00:00:07.973
and I will show you how RBAC works.
5

5

00:00:09.330  -->  00:00:13.690
I have here in my git repository a folder, users,
6

6

00:00:13.690  -->  00:00:15.007
and this one has a README,
7

7

00:00:15.910  -->  00:00:18.320
and we are going to do the same as we did
8

8

00:00:18.320  -->  00:00:22.450
in the Minikube lecture about authentication.
9

9

00:00:22.450  -->  00:00:24.820
You're going to create a new user.
10

10

00:00:24.820  -->  00:00:26.960
To be able to create a new user,
11

11

00:00:26.960  -->  00:00:29.200
I need to create a new certificate.
12

12

00:00:29.200  -->  00:00:30.780
And to create a new certificate,
13

13

00:00:30.780  -->  00:00:35.150
I need to copy my CA key and my CA certificate
14

14

00:00:35.150  -->  00:00:38.553
from the kops state S3 directory.
15

15

00:00:39.510  -->  00:00:42.253
So I can do that using aws s3 sync,
16

16

00:00:43.270  -->  00:00:46.133
and this will sync those two directories.
17

17

00:00:47.730  -->  00:00:48.880
In each of these directories,
18

18

00:00:48.880  -->  00:00:50.440
you have a key and certificate.
19

19

00:00:50.440  -->  00:00:52.000
So I'm just going to move these
20

20

00:00:52.000  -->  00:00:55.410
so they have the file ca-key and ca.crt.
21

21

00:00:55.410  -->  00:00:58.930
To create a new SSO certificate I need to open SSO
22

22

00:00:58.930  -->  00:01:01.410
and just make sure it is installed.
23

23

00:01:01.410  -->  00:01:04.023
I first create a new key for myself.
24

24

00:01:05.720  -->  00:01:10.340
I'm going to create a new certificate request
25

25

00:01:10.340  -->  00:01:12.823
using CN Edward, which is going to be my login.
26

26

00:01:14.450  -->  00:01:18.453
Then I assign this using the CA cert and a CA key.
27

27

00:01:20.140  -->  00:01:21.850
Now I have a key and a certificate,
28

28

00:01:21.850  -->  00:01:26.003
and I should be able to login to the Kubernetes cluster.
29

29

00:01:27.770  -->  00:01:29.720
To do that, I am going to create a new context,
30

30

00:01:29.720  -->  00:01:32.060
which means I am going to create entries
31

31

00:01:32.060  -->  00:01:35.630
in my Kube config file so that I have a new context
32

32

00:01:35.630  -->  00:01:38.530
that I can use, that then will use this new certificate.
33

33

00:01:38.530  -->  00:01:43.530
So I'm going to execute these commands,
34

34

00:01:46.300  -->  00:01:48.750
creating a new user using kubectl config,
35

35

00:01:48.750  -->  00:01:49.770
set the credentials.
36

36

00:01:49.770  -->  00:01:52.160
I am setting the credentials for user Edward
37

37

00:01:52.160  -->  00:01:56.033
using my Edward certificate and Edward key file.
38

38

00:01:57.600  -->  00:01:59.800
Then I will create a new context
39

39

00:02:01.880  -->  00:02:03.990
using the cluster that I already have.
40

40

00:02:03.990  -->  00:02:07.303
So maybe it makes sense to show you config view,
41

41

00:02:08.950  -->  00:02:13.500
which shows that I have a cluster here
42

42

00:02:13.500  -->  00:02:15.540
with the name kubernetes.newtech.academy
43

43

00:02:15.540  -->  00:02:17.940
with the server api.kibernetes.newtech.academy.
44

44

00:02:17.940  -->  00:02:19.793
This is the server I am referring to.
45

45

00:02:21.660  -->  00:02:23.160
So I'm going to create a new context,
46

46

00:02:23.160  -->  00:02:25.780
context called Edward,
47

47

00:02:25.780  -->  00:02:28.560
using this cluster, using this user.
48

48

00:02:28.560  -->  00:02:31.773
So I will now do config get-contexts.
49

49

00:02:33.140  -->  00:02:36.900
Get-contexts, I will see I have now two contexts.
50

50

00:02:36.900  -->  00:02:39.900
One is my current context that I'm using,
51

51

00:02:39.900  -->  00:02:43.090
if I use kubectl, this is the context, and the cluster,
52

52

00:02:43.090  -->  00:02:47.610
and the user that will be used to execute commands.
53

53

00:02:47.610  -->  00:02:49.540
It's kubernetes.newtech.academy,
54

54

00:02:49.540  -->  00:02:52.010
the cluster kubernetes.newtech.academy
55

55

00:02:52.010  -->  00:02:54.293
and the user is also that one.
56

56

00:02:55.200  -->  00:02:57.377
Now, my other context has the name Edward
57

57

00:02:57.377  -->  00:03:00.620
and will use the user Edward, still the same cluster.
58

58

00:03:00.620  -->  00:03:03.220
So if I do kubectl get nodes,
59

59

00:03:03.220  -->  00:03:05.730
I will now use still my admin user,
60

60

00:03:05.730  -->  00:03:06.630
which is this one.
61

61

00:03:08.110  -->  00:03:13.110
If I do kubectl config use-context Edward,
62

62

00:03:13.690  -->  00:03:15.243
I will use this context.
63

63

00:03:16.180  -->  00:03:20.050
If I do get-context, now the star is here,
64

64

00:03:20.050  -->  00:03:22.270
so this is the current context.
65

65

00:03:22.270  -->  00:03:25.260
If I do kubectl get nodes,
66

66

00:03:25.260  -->  00:03:26.640
I get nodes is forbidden.
67

67

00:03:26.640  -->  00:03:28.310
User Edward cannot list nodes
68

68

00:03:28.310  -->  00:03:29.730
at the current cluster scope,
69

69

00:03:29.730  -->  00:03:32.070
because I don't have permissions yet.
70

70

00:03:32.070  -->  00:03:34.460
So now I can authenticate,
71

71

00:03:34.460  -->  00:03:37.600
but I haven't set any roles using RBAC,
72

72

00:03:37.600  -->  00:03:40.660
so I have no permissions.
73

73

00:03:40.660  -->  00:03:42.760
Here were are talking about authorization.
74

74

00:03:43.750  -->  00:03:45.800
So I'm going to switch, again, my context
75

75

00:03:47.130  -->  00:03:49.170
to kubernetes.newtech.academy,
76

76

00:03:49.170  -->  00:03:54.080
and then I am going to add admin-user.yaml.
77

77

00:03:54.080  -->  00:03:56.660
So here I have a cluster role binding.
78

78

00:03:56.660  -->  00:04:01.660
I am binding my user Edward to the role cluster-admin.
79

79

00:04:03.190  -->  00:04:06.100
The role cluster-admin is a role that already exists,
80

80

00:04:06.100  -->  00:04:07.110
it's just an admin role.
81

81

00:04:07.110  -->  00:04:10.150
So if you wanted to give someone an admin role,
82

82

00:04:10.150  -->  00:04:13.453
you just do create admin-user.yaml,
83

83

00:04:15.056  -->  00:04:16.656
going to switch the context now,
84

84

00:04:18.650  -->  00:04:23.650
kubectl get nodes, and here now I can execute
85

85

00:04:25.190  -->  00:04:27.123
the same commands as the admin user.
86

86

00:04:28.380  -->  00:04:31.530
I'm going to switch again, kuberctl config use-context,
87

87

00:04:33.143  -->  00:04:34.493
kubernetes.newtech.academy.
88

88

00:04:35.370  -->  00:04:38.693
I'm going to delete this admin role,
89

89

00:04:40.270  -->  00:04:45.270
and I'm going to add just user.yaml.
90

90

00:04:46.946  -->  00:04:48.670
Then I already added those earlier,
91

91

00:04:48.670  -->  00:04:50.290
so I can just delete those.
92

92

00:04:50.290  -->  00:04:52.600
So I'm going to create them again.
93

93

00:04:52.600  -->  00:04:54.123
So now they have been created,
94

94

00:04:55.630  -->  00:04:57.963
user.yaml, let me show you what's in there.
95

95

00:04:59.170  -->  00:05:00.830
This is of kind role,
96

96

00:05:00.830  -->  00:05:03.888
which means it's specific to one namespace,
97

97

00:05:03.888  -->  00:05:06.160
and the namespace is default.
98

98

00:05:06.160  -->  00:05:08.410
On the default namespace I will be able
99

99

00:05:08.410  -->  00:05:11.230
for resources pods, I will be able to do
100

100

00:05:11.230  -->  00:05:14.260
get, watch, list, create, update, patch, and delete.
101

101

00:05:14.260  -->  00:05:15.700
So here it says pod-reader,
102

102

00:05:15.700  -->  00:05:17.150
but actually it should be pod-writer
103

103

00:05:17.150  -->  00:05:19.670
because it can also update and create.
104

104

00:05:19.670  -->  00:05:21.630
For extensions, apps, and deployments
105

105

00:05:21.630  -->  00:05:23.230
I will also be able to do get, list,
106

106

00:05:23.230  -->  00:05:25.280
watch, create, update, patch, and delete.
107

107

00:05:27.030  -->  00:05:32.030
Then I bind this role to the user Edward.
108

108

00:05:32.600  -->  00:05:34.850
So here is the role reference.
109

109

00:05:34.850  -->  00:05:38.880
So pod-reader, and here pod-reader.
110

110

00:05:38.880  -->  00:05:39.720
So it's a bad name.
111

111

00:05:39.720  -->  00:05:41.680
I will actually change its name after the demo
112

112

00:05:41.680  -->  00:05:43.600
in my GitHub repository.
113

113

00:05:43.600  -->  00:05:45.713
It's actually pod-writer, not reader.
114

114

00:05:46.570  -->  00:05:48.370
I mean, you can choose the name yourself,
115

115

00:05:48.370  -->  00:05:51.780
it's just that I didn't pick a great name for this one.
116

116

00:05:51.780  -->  00:05:53.420
So I apply this,
117

117

00:05:53.420  -->  00:05:55.633
now I'm going to switch my context again,
118

118

00:05:57.500  -->  00:06:00.783
and let's do get nodes, forbidden.
119

119

00:06:02.020  -->  00:06:04.690
Let's try to do get pods.
120

120

00:06:04.690  -->  00:06:08.100
No resources found, which means I can even run a pod.
121

121

00:06:08.100  -->  00:06:09.780
I'm not getting forbidden,
122

122

00:06:09.780  -->  00:06:11.150
it just says that it works.
123

123

00:06:11.150  -->  00:06:13.050
There's just no pods on this cluster.
124

124

00:06:13.050  -->  00:06:16.300
Even I'll try gt pods kube-system.
125

125

00:06:16.300  -->  00:06:19.040
Now forbidden, user Edward cannot list pods
126

126

00:06:19.040  -->  00:06:21.000
in the namespace kube-system.
127

127

00:06:21.000  -->  00:06:24.440
So now I am contained to this namespace,
128

128

00:06:24.440  -->  00:06:26.950
the default namespace, but it could also be a namespace
129

129

00:06:26.950  -->  00:06:28.910
that you added, like a custom namespace
130

130

00:06:28.910  -->  00:06:31.570
that you have given a custom name.
131

131

00:06:31.570  -->  00:06:33.680
So that's where you can contain users
132

132

00:06:33.680  -->  00:06:35.020
to specific namespaces.
133

133

00:06:35.020  -->  00:06:38.080
Give them their roles, only those roles that they need
134

134

00:06:38.080  -->  00:06:39.580
or that you want to give them.
135

135

00:06:41.060  -->  00:06:42.630
So this is how RBAC works.
136

136

00:06:42.630  -->  00:06:44.690
Nowadays RBAC people are not using
137

137

00:06:44.690  -->  00:06:47.020
any of the old ones anymore.
138

138

00:06:47.020  -->  00:06:49.520
This is also something that you should have on by default,
139

139

00:06:49.520  -->  00:06:52.600
kops enables it by default, Minikube not yet.
140

140

00:06:52.600  -->  00:06:54.450
But at some point it will also do it.
