WEBVTT
1
1

00:00:00.120  -->  00:00:01.640
<v Edward>In the next lecture I'll be talking</v>
2

2

00:00:01.640  -->  00:00:06.200
about installing a Kubernetes cluster using kubeadm.
3

3

00:00:06.200  -->  00:00:07.810
You only have to follow these lectures if you're
4

4

00:00:07.810  -->  00:00:10.440
not using Kops or any other solution,
5

5

00:00:10.440  -->  00:00:12.510
so these are just an alternative
6

6

00:00:12.510  -->  00:00:16.160
of spinning up a Kubernetes cluster on bare metal
7

7

00:00:16.160  -->  00:00:18.370
or on another cloud than AWS
8

8

00:00:18.370  -->  00:00:21.867
that doesn't have a specific tool to build Kubernetes.
9

9

00:00:21.867  -->  00:00:24.160
So, you are free to skip those lectures
10

10

00:00:24.160  -->  00:00:26.403
if you already have a Kubernetes running.
11

11

00:00:28.340  -->  00:00:32.163
Kubeadm is a toolkit by Kubernetes to create a cluster.
12

12

00:00:33.040  -->  00:00:37.070
It works on any deb or rpm compatible Linux OS.
13

13

00:00:37.070  -->  00:00:41.320
For example, Ubuntu, Debian, which use debian packages,
14

14

00:00:41.320  -->  00:00:45.487
and Red Hat or CentOS, which use rpm packages.
15

15

00:00:45.487  -->  00:00:48.150
This is the main advantage of kubeadm
16

16

00:00:48.150  -->  00:00:49.900
because a lot of other tools
17

17

00:00:49.900  -->  00:00:53.290
are operating system or cloud specific,
18

18

00:00:53.290  -->  00:00:57.230
and kubeadm works on a lot of different environments.
19

19

00:00:57.230  -->  00:00:59.560
You just need to have a compatible Linux OS
20

20

00:00:59.560  -->  00:01:02.951
that has deb or rpm packages.
21

21

00:01:02.951  -->  00:01:07.951
The tool itself is still in beta, we are now Q1 2018,
22

22

00:01:08.090  -->  00:01:11.650
but it is expected to become stable somewhere this year.
23

23

00:01:11.650  -->  00:01:14.580
It is very easy to use and lets you spin up
24

24

00:01:14.580  -->  00:01:17.683
your Kubernetes cluster in just a couple of minutes.
25

25

00:01:19.500  -->  00:01:22.109
Kubeadm supports bootstrap tokens.
26

26

00:01:22.109  -->  00:01:24.780
Those are simple tokens that can be used
27

27

00:01:24.780  -->  00:01:28.278
to create a cluster or to join nodes later on.
28

28

00:01:28.278  -->  00:01:31.690
The tokens are of the format that is displayed here,
29

29

00:01:31.690  -->  00:01:33.870
and we will use those tokens in the demos.
30

30

00:01:33.870  -->  00:01:36.055
It will all become clear.
31

31

00:01:36.055  -->  00:01:37.520
When we join a node to our cluster,
32

32

00:01:37.520  -->  00:01:39.810
we'll be using those tokens to make sure
33

33

00:01:39.810  -->  00:01:42.523
that the joining of the nodes is secure.
34

34

00:01:43.750  -->  00:01:45.740
Kubeadm supports also upgrading
35

35

00:01:45.740  -->  00:01:47.986
and downgrading of the clusters.
36

36

00:01:47.986  -->  00:01:52.040
It does not install a networking solution.
37

37

00:01:52.040  -->  00:01:53.710
You will have to install
38

38

00:01:53.710  -->  00:01:56.930
a Container Network Interface-compliant network solution
39

39

00:01:56.930  -->  00:02:01.930
yourself using kubectl apply as I will show you in the demo.
40

40

00:02:01.940  -->  00:02:04.580
So, kubeadm doesn't come with a network solution,
41

41

00:02:04.580  -->  00:02:07.010
but there are many network solutions available.
42

42

00:02:07.010  -->  00:02:08.980
So, you can just plug those in.
43

43

00:02:08.980  -->  00:02:12.053
It's called a CNI, Container Network Interface.
44

44

00:02:13.760  -->  00:02:15.100
Prerequisites.
45

45

00:02:15.100  -->  00:02:16.730
You need to have a debian package
46

46

00:02:16.730  -->  00:02:19.140
or rpm package compatible system.
47

47

00:02:19.140  -->  00:02:21.156
Two gigabyte of memory you should have.
48

48

00:02:21.156  -->  00:02:25.090
Two CPUs for the master nodes are recommended.
49

49

00:02:25.090  -->  00:02:26.800
Network connectivity between the nodes.
50

50

00:02:26.800  -->  00:02:28.420
Otherwise it will not work.
51

51

00:02:28.420  -->  00:02:32.130
It can be a private network using internal IP addresses
52

52

00:02:32.130  -->  00:02:35.770
or even public routable internet IP addresses.
53

53

00:02:35.770  -->  00:02:37.950
In this case, it's best to use a firewall
54

54

00:02:37.950  -->  00:02:41.410
to only allow access within the cluster and to the users.
55

55

00:02:41.410  -->  00:02:44.460
So, sometimes depending where you deploy the cluster on,
56

56

00:02:44.460  -->  00:02:47.185
you might even only have a public IP address,
57

57

00:02:47.185  -->  00:02:50.480
and you just have to make sure that you shield the access
58

58

00:02:50.480  -->  00:02:52.443
away from other users on the internet.
59

59

00:02:53.320  -->  00:02:55.350
If you deploy on Prime, it's probably going to be
60

60

00:02:55.350  -->  00:02:58.563
a private network using internal IP addresses.
61

61

00:02:59.820  -->  00:03:03.110
And typically, you need minimal two nodes,
62

62

00:03:03.110  -->  00:03:06.520
one master node and one node to schedule pods on.
63

63

00:03:06.520  -->  00:03:08.330
By default, you shouldn't be running your pods
64

64

00:03:08.330  -->  00:03:10.160
on the master, but if you only have one node,
65

65

00:03:10.160  -->  00:03:13.055
you can still configure Kubernetes
66

66

00:03:13.055  -->  00:03:15.620
in a way that you accept launching pods on the master node
67

67

00:03:15.620  -->  00:03:16.880
so that you only need one node.
68

68

00:03:16.880  -->  00:03:19.430
But typically, we're going to use a minimum of two.
69

69

00:03:20.620  -->  00:03:22.010
Next, there will be a demo,
70

70

00:03:22.010  -->  00:03:24.600
and in the demo I will use DigitalOcean
71

71

00:03:24.600  -->  00:03:27.424
to spin up droplets, which are VMs.
72

72

00:03:27.424  -->  00:03:29.960
DigitalOcean is a good choice I think
73

73

00:03:29.960  -->  00:03:33.224
because it's not as expensive as the other cloud providers.
74

74

00:03:33.224  -->  00:03:37.110
And I'm also not going to use any cloud specific features
75

75

00:03:37.110  -->  00:03:38.570
so that it doesn't really matter
76

76

00:03:38.570  -->  00:03:40.510
whether you run it on DigitalOcean,
77

77

00:03:40.510  -->  00:03:43.650
or on Prime, or on another provider
78

78

00:03:43.650  -->  00:03:48.130
that provides you with VMs or bare metal boxes.
79

79

00:03:48.130  -->  00:03:50.530
You can get $10 worth of credits
80

80

00:03:50.530  -->  00:03:53.840
if you use the following link to sign up with DigitalOcean.
81

81

00:03:53.840  -->  00:03:57.370
So, here is the link, and if you sign up using this link,
82

82

00:03:57.370  -->  00:04:00.853
then you will have $10 that you can use to do this course.
83

83

00:04:01.820  -->  00:04:03.650
A two gigabyte memory droplet currently
84

84

00:04:03.650  -->  00:04:06.150
costs $10 a month on DigitalOcean,
85

85

00:04:06.150  -->  00:04:08.130
but it is billed per hour.
86

86

00:04:08.130  -->  00:04:09.710
So, you can run, for instance,
87

87

00:04:09.710  -->  00:04:13.710
two times two gigabyte RAM droplets for half a month
88

88

00:04:13.710  -->  00:04:17.519
or even four droplets that have two gigabytes of memory
89

89

00:04:17.519  -->  00:04:20.390
for a bit more than a week.
90

90

00:04:20.390  -->  00:04:22.570
So, depending on how long you're gonna run it,
91

91

00:04:22.570  -->  00:04:25.000
you can then run more of them or less of them
92

92

00:04:25.000  -->  00:04:26.330
until you reach $10.
93

93

00:04:26.330  -->  00:04:27.650
And then, after this $10,
94

94

00:04:27.650  -->  00:04:30.280
you'll have to pay for your compute.
95

95

00:04:30.280  -->  00:04:31.743
So, will be the demo.
