WEBVTT
1
00:00:00.560 --> 00:00:04.970
In this lecture, I'm going to talk about User Management.

2
00:00:05.020 --> 00:00:06.600
There are two types of users you can create,

3
00:00:06.640 --> 00:00:14.560
a normal user, which is used to access the cluster externally, using the API. For instance,

4
00:00:14.650 --> 00:00:24.170
through "kubeclt", this user is not managed using objects. And then you have a second type, a service user,

5
00:00:24.290 --> 00:00:27.260
which is managed by an object in Kubernetes.

6
00:00:27.680 --> 00:00:34.250
This type of user is used to authenticate within the cluster. For instance, from inside a pod or from

7
00:00:34.270 --> 00:00:39.560
A kubelet, these credentials are managed by "Secrets".

8
00:00:39.620 --> 00:00:45.280
So, if you just want to add more users to your cluster, then you're going to use normal users.

9
00:00:45.710 --> 00:00:50.180
There are multiple authentication strategies for normal users.

10
00:00:50.290 --> 00:00:51.870
You can use client certificates,

11
00:00:51.880 --> 00:00:53.070
that's what we use now.

12
00:00:53.980 --> 00:01:02.870
Bearer Tokens, which is just a token, an authentication proxy, a proxy in between the API,

13
00:01:03.010 --> 00:01:06.570
so you can choose yourself how authentication will work,

14
00:01:06.760 --> 00:01:15.070
HTTP basic authentication, just login and password, open ID, which is used by Google and Azure for instance

15
00:01:15.160 --> 00:01:20.530
on the cloud, it's to use a third party authentication protocol, and Webhooks.

16
00:01:20.560 --> 00:01:28.730
And here, you also can specify your own authentication mechanism. Service users are using service accounts

17
00:01:28.770 --> 00:01:36.780
tokens, they are stored as credentials using secrets. Those secrets are also mounted in pods to allow

18
00:01:36.780 --> 00:01:39.030
communication between the services.

19
00:01:39.120 --> 00:01:41.480
So, that's the volume that you often see,

20
00:01:41.610 --> 00:01:48.690
that is just a "Secret", for instance, to allow the pod  to connect to the API server.

21
00:01:48.690 --> 00:01:56.790
Service users are specific to a namespace, they are created automatically by the API, or manually using objects.

22
00:01:56.800 --> 00:02:01.310
Any API call that is not authenticated is considered as an anonymous user.

23
00:02:01.560 --> 00:02:08.380
That's why any service in the Kubernet cluster needs to authenticate themselves and it uses service accounts tokens

24
00:02:08.400 --> 00:02:15.800
to do that. Independently from the authentication mechanism normal users have the following attributes:

25
00:02:17.090 --> 00:02:25.280
They have a username, which can be just a string or an e-mail, or UID, user ID, groups, and extra fields to store extra information.

26
00:02:28.180 --> 00:02:34.730
After a normal user authenticates, they will have access to everything.

27
00:02:34.730 --> 00:02:37.340
To limit access if you need to confine authorization.

28
00:02:37.370 --> 00:02:40.660
There are again multiple offerings to choose from.

29
00:02:40.790 --> 00:02:48.860
You can choose "AlwaysAllow", just allows everything, "AlwaysDeny", used for testing,

30
00:02:48.950 --> 00:02:55.910
ABAC, Attribute-Based Access Control, RBAC, Rule Based Access Control, 

31
00:02:56.360 --> 00:03:03.200
Webhooks so that you can configure your own remote service, that is going to do the authorization. Authorization is still a work in progress.

32
00:03:03.220 --> 00:03:06.470
The ABAC needs to be configured manually. 

33
00:03:06.700 --> 00:03:14.260
So RBAC is definitely more promising, and uses the "rbac.authorization.k8s.io" API group.

34
00:03:15.130 --> 00:03:19.500
This allows admins to dynamically configure permissions through the API.

35
00:03:20.350 --> 00:03:25.500
In Kubernetes 1.3 RBAC is still alpha and even considered experimental.

36
00:03:25.960 --> 00:03:28.070
It is promising and it will become stable.

37
00:03:28.120 --> 00:03:34.330
If you want to know the current state about the authorization methods you can check out this URL.

38
00:03:34.720 --> 00:03:38.100
The next demo, I'm going to show how to use certificates.

39
00:03:38.320 --> 00:03:40.640
The authorization part will do a demo about,

40
00:03:40.640 --> 00:03:42.950
when it becomes more stable.
