WEBVTT
1
1

00:00:00.130  -->  00:00:02.240
<v Edward>In this lecture I will explain you</v>
2

2

00:00:02.240  -->  00:00:07.233
how to use TLS on an AWS elastic load balancer.
3

3

00:00:09.030  -->  00:00:11.870
You can set up cloud specific features,
4

4

00:00:11.870  -->  00:00:13.340
like TLS termination,
5

5

00:00:13.340  -->  00:00:16.040
on AWS load balancers that you create in Kubernetes
6

6

00:00:16.040  -->  00:00:19.040
using services of type load balancer.
7

7

00:00:19.040  -->  00:00:21.600
So let's say that you create a service
8

8

00:00:21.600  -->  00:00:23.530
using a YAML file.
9

9

00:00:23.530  -->  00:00:26.690
This is of type load balancer then you can specify
10

10

00:00:26.690  -->  00:00:29.840
some cloud specific features if you are on AWS
11

11

00:00:29.840  -->  00:00:33.990
to, for example, terminate TLS on the load balancer
12

12

00:00:33.990  -->  00:00:38.303
so that you can use HPS instead of HP for your application.
13

13

00:00:39.360  -->  00:00:41.623
You can do this using annotations.
14

14

00:00:42.650  -->  00:00:45.210
This is an example YAML file of a service
15

15

00:00:45.210  -->  00:00:49.390
and you can see here in bold that you can add annotations
16

16

00:00:49.390  -->  00:00:53.230
and you can add specific annotations to turn on some flacks
17

17

00:00:53.230  -->  00:00:57.233
to enable TLS and to do some other configuration.
18

18

00:00:58.490  -->  00:01:00.980
In this lecture I will go over the possible annotations
19

19

00:01:00.980  -->  00:01:03.573
for the AWS elastic load balancer, the ELB.
20

20

00:01:04.440  -->  00:01:06.650
In the next lecture I will show you in a demo
21

21

00:01:06.650  -->  00:01:09.430
how to configure a certificate
22

22

00:01:09.430  -->  00:01:11.250
and how to enable then that certificate
23

23

00:01:11.250  -->  00:01:12.533
using the annotations.
24

24

00:01:14.320  -->  00:01:17.080
The first four annotations that I want to show you
25

25

00:01:17.080  -->  00:01:21.130
are all used to enable access logs on the load balancer.
26

26

00:01:21.130  -->  00:01:23.140
So when you have a load balancer
27

27

00:01:23.140  -->  00:01:24.700
you can have access logs on them
28

28

00:01:24.700  -->  00:01:27.260
so every time someone visits your app,
29

29

00:01:27.260  -->  00:01:30.680
every time there's a hit on the load balancer
30

30

00:01:30.680  -->  00:01:33.470
then a line will be written to a log
31

31

00:01:33.470  -->  00:01:36.760
and this log can be pushed to a stream.
32

32

00:01:36.760  -->  00:01:39.570
You can configure this in the AWS ELB line
33

33

00:01:39.570  -->  00:01:41.680
but here when you launch it as a service
34

34

00:01:41.680  -->  00:01:44.240
you should consider it as an annotation.
35

35

00:01:44.240  -->  00:01:48.360
And these four you can use to specify the interval
36

36

00:01:48.360  -->  00:01:51.310
which is the first one to enable it or disable it
37

37

00:01:51.310  -->  00:01:52.940
just to enable the logs,
38

38

00:01:52.940  -->  00:01:54.690
which would be then true.
39

39

00:01:54.690  -->  00:01:57.090
You can specify the bucket name and the bucket prefix
40

40

00:01:57.090  -->  00:01:58.543
to where you want to log to.
41

41

00:01:59.910  -->  00:02:02.300
You also have to configure some specific permissions
42

42

00:02:02.300  -->  00:02:04.490
on your bucket if you want to make this work.
43

43

00:02:04.490  -->  00:02:07.530
So make sure to also have a look at the documentation
44

44

00:02:07.530  -->  00:02:09.990
in AWS if you want to configure something like this
45

45

00:02:09.990  -->  00:02:11.540
and you haven't done it before.
46

46

00:02:13.120  -->  00:02:16.440
You can simply add resource tags, key value pairs,
47

47

00:02:16.440  -->  00:02:19.870
to your load balancer to then identify them later.
48

48

00:02:19.870  -->  00:02:22.180
You can use this annotation to
49

49

00:02:22.180  -->  00:02:24.403
add text to your load balancer.
50

50

00:02:25.460  -->  00:02:28.820
This annotation specifies the backend protocol to use.
51

51

00:02:28.820  -->  00:02:30.260
So the backend protocol
52

52

00:02:30.260  -->  00:02:32.823
is the protocol that your port is using.
53

53

00:02:34.010  -->  00:02:36.250
Most often this will be HTP,
54

54

00:02:36.250  -->  00:02:39.330
so the backend protocol will be HTP, which is default.
55

55

00:02:39.330  -->  00:02:42.170
If you want to encrypt everything
56

56

00:02:42.170  -->  00:02:43.630
within your cluster overall
57

57

00:02:43.630  -->  00:02:47.870
it's possible that you enable HPS within your application
58

58

00:02:47.870  -->  00:02:49.340
and then you would have to change this
59

59

00:02:49.340  -->  00:02:50.983
from HP to HPS.
60

60

00:02:51.930  -->  00:02:55.200
For most use cases this will be HTP
61

61

00:02:55.200  -->  00:02:58.370
because you are already within your cluster.
62

62

00:02:58.370  -->  00:02:59.990
Traffic is already private,
63

63

00:02:59.990  -->  00:03:04.450
you often just need to enable HPS on your load balancer.
64

64

00:03:04.450  -->  00:03:07.000
And that will be the point where you terminate TLS.
65

65

00:03:08.463  -->  00:03:10.280
AWS load balancer SSL certificate,
66

66

00:03:10.280  -->  00:03:12.120
this is the certificate ARN.
67

67

00:03:12.120  -->  00:03:13.600
So this is a string,
68

68

00:03:13.600  -->  00:03:16.150
a unique string that you have to put there
69

69

00:03:16.150  -->  00:03:17.950
and that string is a unique identifier
70

70

00:03:17.950  -->  00:03:20.130
for your SSL certificate.
71

71

00:03:20.130  -->  00:03:23.056
That's what I'm going to show you in the demo.
72

72

00:03:23.056  -->  00:03:25.650
AWS load balancer connection draining enabled
73

73

00:03:25.650  -->  00:03:29.250
and AWS load balancer connection draining timeout.
74

74

00:03:29.250  -->  00:03:30.570
That this is connection draining,
75

75

00:03:30.570  -->  00:03:33.030
it's a timeout when the backend node stops
76

76

00:03:33.030  -->  00:03:35.260
during for example scaling.
77

77

00:03:35.260  -->  00:03:38.040
And then how long are you going to keep this connection open
78

78

00:03:38.040  -->  00:03:41.000
so that's clients who still have a connection to that node
79

79

00:03:41.000  -->  00:03:43.430
can terminate their connection.
80

80

00:03:43.430  -->  00:03:45.420
They can receive the contact from the app
81

81

00:03:45.420  -->  00:03:49.830
and then the next request they will just go another node.
82

82

00:03:49.830  -->  00:03:52.470
So this is important when you have scaling
83

83

00:03:52.470  -->  00:03:54.740
so that people don't get an error message
84

84

00:03:54.740  -->  00:03:56.740
and suddenly a node becomes unavailable.
85

85

00:03:57.790  -->  00:04:00.060
Then the connection timeout is the timeout between
86

86

00:04:00.060  -->  00:04:01.833
the load balancer and the backend.
87

87

00:04:03.040  -->  00:04:04.440
Cross zone load balancing,
88

88

00:04:04.440  -->  00:04:06.390
let's say you have a Kubernetes cluster
89

89

00:04:06.390  -->  00:04:09.030
that is deployed over multiple zones.
90

90

00:04:09.030  -->  00:04:10.980
And then you have load balancer in front of that,
91

91

00:04:10.980  -->  00:04:14.210
then you can also enable cross AZ load balancing.
92

92

00:04:14.210  -->  00:04:16.230
So one load balancer can then have
93

93

00:04:16.230  -->  00:04:19.270
an increment client from one zone.
94

94

00:04:19.270  -->  00:04:23.670
It can still route your request to another zone.
95

95

00:04:23.670  -->  00:04:25.290
This can be interesting, for example,
96

96

00:04:25.290  -->  00:04:28.410
if you only have one node in one zone
97

97

00:04:28.410  -->  00:04:30.000
and five nodes in the other one.
98

98

00:04:30.000  -->  00:04:32.160
So that's the load balancer would still load balance
99

99

00:04:32.160  -->  00:04:35.653
over all the six nodes over multiple zones.
100

100

00:04:37.620  -->  00:04:40.000
And then the AWS load balancer extra security groups
101

101

00:04:40.000  -->  00:04:42.440
in case you want to add extra security groups
102

102

00:04:42.440  -->  00:04:43.943
to your load balancer.
103

103

00:04:44.920  -->  00:04:46.440
If you want to make your load balancer
104

104

00:04:46.440  -->  00:04:48.050
an internal load balancer
105

105

00:04:48.050  -->  00:04:50.130
you can set the ELB to internal load balancer
106

106

00:04:50.130  -->  00:04:51.540
using this annotation.
107

107

00:04:51.540  -->  00:04:53.370
So you can set the value to true
108

108

00:04:53.370  -->  00:04:56.520
and then the AWS load balancer will become an internal one.
109

109

00:04:56.520  -->  00:04:58.770
It will not have a public IP address anymore.
110

110

00:04:59.980  -->  00:05:01.810
You can enable the proxy protocol,
111

111

00:05:01.810  -->  00:05:03.800
so if you want to enable the proxy protocol
112

112

00:05:03.800  -->  00:05:07.170
for this load balancer you can use this annotation.
113

113

00:05:07.170  -->  00:05:09.980
And you have the AWS load balancer SSL ports
114

114

00:05:09.980  -->  00:05:12.040
if you want the listener to enable HTTPS
115

115

00:05:13.206  -->  00:05:14.220
on default or all.
116

116

00:05:14.220  -->  00:05:17.270
But typically if you only want to enable HTTPS
117

117

00:05:17.270  -->  00:05:21.180
on your HPS port you would only say 4-4-3
118

118

00:05:21.180  -->  00:05:22.860
and that is the HPS port.
119

119

00:05:22.860  -->  00:05:25.490
So then the load balancer will enable HPS
120

120

00:05:25.490  -->  00:05:28.043
on the SSL port which is 4-4-3.
121

121

00:05:29.250  -->  00:05:31.320
In the next demo I will use this annotation
122

122

00:05:31.320  -->  00:05:32.860
and some other annotations to show you
123

123

00:05:32.860  -->  00:05:35.353
how to terminate TLS on the load balancer.
