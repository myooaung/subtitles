WEBVTT
1
1

00:00:05.340  -->  00:00:07.260
In the previous video we installed
2

2

00:00:07.260  -->  00:00:11.130
Python 3.6 onto this computer. Now it's
3

3

00:00:11.130  -->  00:00:13.710
time to have a quick look at idle.
4

4

00:00:13.710  -->  00:00:15.390
Now when developing software in any
5

5

00:00:15.390  -->  00:00:17.370
programming language, integrated
6

6

00:00:17.370  -->  00:00:19.800
development environment or IDE makes
7

7

00:00:19.800  -->  00:00:22.170
life a lot easier for developers, so that
8

8

00:00:22.170  -->  00:00:23.850
allows you to enter compile and run your
9

9

00:00:23.850  -->  00:00:25.320
programs from within that program
10

10

00:00:25.320  -->  00:00:27.300
without having to leave that program or
11

11

00:00:27.300  -->  00:00:29.940
editor to actually run and execute your
12

12

00:00:29.940  -->  00:00:31.620
program so you can avoid using the
13

13

00:00:31.620  -->  00:00:33.330
command line for a lot of programming.
14

14

00:00:33.330  -->  00:00:36.170
Now Python provides a very simple IDE
15

15

00:00:36.170  -->  00:00:38.330
called idle which we installed with
16

16

00:00:38.330  -->  00:00:39.900
Python in the previous video.
17

17

00:00:39.900  -->  00:00:42.600
Now the name idle is a homage to Eric
18

18

00:00:42.600  -->  00:00:44.580
Idle one of the members of the comedy
19

19

00:00:44.580  -->  00:00:47.180
group Monty Python, the idle interfaces
20

20

00:00:47.180  -->  00:00:50.580
directly with the Python interpreter.
21

21

00:00:50.580  -->  00:00:52.040
Now for a number of reasons, that will become
22

22

00:00:52.040  -->  00:00:53.490
apparent as we progress through the
23

23

00:00:53.490  -->  00:00:56.840
course, we just using IntelliJ IDEA or
24

24

00:00:56.840  -->  00:00:59.990
pycharm instead of idle and in fact in
25

25

00:00:59.990  -->  00:01:01.010
the next video, we're going to show you
26

26

00:01:01.010  -->  00:01:03.350
how to go about installing it but if you
27

27

00:01:03.350  -->  00:01:05.160
prefer to stick with idle for any reason
28

28

00:01:05.160  -->  00:01:07.770
or if you have to access idle we just
29

29

00:01:07.770  -->  00:01:08.790
really want to find out a little bit
30

30

00:01:08.790  -->  00:01:11.070
about it, it can sometimes be very useful.
31

31

00:01:11.070  -->  00:01:12.990
So in this video I'm going to show you how
32

32

00:01:12.990  -->  00:01:15.120
to use the basics of idle. Now we're
33

33

00:01:15.120  -->  00:01:16.620
going to assume that you installed it as
34

34

00:01:16.620  -->  00:01:18.960
shown in the last video, so we're going
35

35

00:01:18.960  -->  00:01:20.490
to start in this case because we're on
36

36

00:01:20.490  -->  00:01:22.440
Windows, we want to start idle from the
37

37

00:01:22.440  -->  00:01:24.180
Windows Start menu, I'm going to come
38

38

00:01:24.180  -->  00:01:26.490
down here and I'm going to type in idle.
39

39

00:01:26.490  -->  00:01:28.800
So you may need to navigate to the
40

40

00:01:28.800  -->  00:01:30.780
programs file and select data which will
41

41

00:01:30.780  -->  00:01:33.540
be in the Python area that where Python
42

42

00:01:33.540  -->  00:01:35.070
was installed but in my case you saw it
43

43

00:01:35.070  -->  00:01:37.470
pop up there automatically, so idle is
44

44

00:01:37.470  -->  00:01:39.870
what we want python 3.16 and press enter
45

45

00:01:39.870  -->  00:01:42.090
and that it'll loads up this is we share
46

46

00:01:42.090  -->  00:01:43.080
which was going to put in the middle of
47

47

00:01:43.080  -->  00:01:44.730
the screen, what I'm going to do is
48

48

00:01:44.730  -->  00:01:46.290
size that up so it's a little bit easier
49

49

00:01:46.290  -->  00:01:48.060
to see and you can check that it's the
50

50

00:01:48.060  -->  00:01:50.220
right version by checking the message
51

51

00:01:50.220  -->  00:01:51.630
that appears, you can see here python
52

52

00:01:51.630  -->  00:01:53.760
three point six point two and that of
53

53

00:01:53.760  -->  00:01:55.320
course was the version of python that we
54

54

00:01:55.320  -->  00:01:57.420
installed in the previous video.
55

55

00:01:57.420  -->  00:01:59.130
Alright so once idle is running anything
56

56

00:01:59.130  -->  00:02:01.590
you type will be passed to the Python
57

57

00:02:01.590  -->  00:02:03.900
interpreter and the results displayed on
58

58

00:02:03.900  -->  00:02:06.540
the screen. Now ordinarily in a program,
59

59

00:02:06.540  -->  00:02:08.760
you need to use the print statement to
60

60

00:02:08.760  -->  00:02:10.460
display result and you'll learn a lot
61

61

00:02:10.460  -->  00:02:12.990
more about that in later videos but you
62

62

00:02:12.990  -->  00:02:14.610
don't actually need to do that in the
63

63

00:02:14.610  -->  00:02:16.950
idle shell and to demonstrate that I'm
64

64

00:02:16.950  -->  00:02:18.580
going to type two plus four
65

65

00:02:18.580  -->  00:02:22.720
two plus four press enter and you can see
66

66

00:02:22.720  -->  00:02:24.550
I immediately got the answer six showing
67

67

00:02:24.550  -->  00:02:26.890
on the screen there, so what happened
68

68

00:02:26.890  -->  00:02:28.990
here was I typed that code in
69

69

00:02:28.990  -->  00:02:31.120
the expression two plus four was passed on
70

70

00:02:31.120  -->  00:02:33.580
to Python and Python evaluated that
71

71

00:02:33.580  -->  00:02:35.440
and come back with the answer in this
72

72

00:02:35.440  -->  00:02:37.510
case six. Well so what we're going to do
73

73

00:02:37.510  -->  00:02:39.340
is just type in some code here.
74

74

00:02:39.340  -->  00:02:42.250
Now don't worry too much about exactly
75

75

00:02:42.250  -->  00:02:44.530
what this code means, you don't need to
76

76

00:02:44.530  -->  00:02:45.970
understand it at this stage of the
77

77

00:02:45.970  -->  00:02:48.070
course. The purpose of this video is just
78

78

00:02:48.070  -->  00:02:50.320
to show you how idle works, in later
79

79

00:02:50.320  -->  00:02:51.610
videos you're going to learn in detail
80

80

00:02:51.610  -->  00:02:53.470
the syntax of Python.
81

81

00:02:53.470  -->  00:02:55.420
So basically we're demonstrating Python
82

82

00:02:55.420  -->  00:02:57.160
not explaining the Python language at
83

83

00:02:57.160  -->  00:03:00.310
this stage. Now in the course examples
84

84

00:03:00.310  -->  00:03:01.810
you'll often have to enter code blocks
85

85

00:03:01.810  -->  00:03:03.880
which would blocks of code spanning
86

86

00:03:03.880  -->  00:03:06.340
several lines. Now idle knows when
87

87

00:03:06.340  -->  00:03:07.690
you're typing such a block and won't
88

88

00:03:07.690  -->  00:03:09.970
immediately execute anything until
89

89

00:03:09.970  -->  00:03:11.740
you've finished the block, you'll know
90

90

00:03:11.740  -->  00:03:13.060
it's expecting more text because the
91

91

00:03:13.060  -->  00:03:14.770
chevrons the three greater than signs
92

92

00:03:14.770  -->  00:03:16.570
which you'll see shortly well they won't
93

93

00:03:16.570  -->  00:03:19.690
reappear until you've finished but let's
94

94

00:03:19.690  -->  00:03:21.100
actually type in the code and you'll see
95

95

00:03:21.100  -->  00:03:21.880
what I mean here.
96

96

00:03:21.880  -->  00:03:25.000
So I'm going to start typing for space i
97

97

00:03:25.000  -->  00:03:28.360
in range noting the spaces I'm putting
98

98

00:03:28.360  -->  00:03:29.590
there and I'm typing everything in lower
99

99

00:03:29.590  -->  00:03:31.720
case and they want a set of parentheses
100

100

00:03:31.720  -->  00:03:33.790
then within the parentheses I want to
101

101

00:03:33.790  -->  00:03:36.370
type a number 10 and then at the end of
102

102

00:03:36.370  -->  00:03:37.420
that I want to type a colon.
103

103

00:03:37.420  -->  00:03:39.250
Now the colon at the end of the
104

104

00:03:39.250  -->  00:03:41.830
first line is very important and so is
105

105

00:03:41.830  -->  00:03:43.630
the indentation of the second line which
106

106

00:03:43.630  -->  00:03:45.100
you'll see when I press enter here,
107

107

00:03:45.100  -->  00:03:45.910
and press enter.
108

108

00:03:45.910  -->  00:03:49.570
And again notice as I mentioned I think
109

109

00:03:49.570  -->  00:03:51.130
something's changed there in the past
110

110

00:03:51.130  -->  00:03:52.960
when I typed in two plus four I got nine
111

111

00:03:52.960  -->  00:03:54.940
for six but here we haven't seen those
112

112

00:03:54.940  -->  00:03:56.650
little chevron's 3 greater than some
113

113

00:03:56.650  -->  00:03:58.510
ones appear and that's because pythons
114

114

00:03:58.510  -->  00:04:00.430
expecting something else. Now notice
115

115

00:04:00.430  -->  00:04:03.250
how it indented automatically for us,
116

116

00:04:03.250  -->  00:04:04.950
so we're going to type in now print
117

117

00:04:04.950  -->  00:04:08.980
parentheses i, I didn't do anything else
118

118

00:04:08.980  -->  00:04:10.240
and I'm going to press enter one more
119

119

00:04:10.240  -->  00:04:13.510
time. So we've now finished our simple
120

120

00:04:13.510  -->  00:04:15.070
little program, I'm going to press
121

121

00:04:15.070  -->  00:04:20.020
backspace to delete the indent. Now this
122

122

00:04:20.020  -->  00:04:21.760
tells all that we've finished the block
123

123

00:04:21.760  -->  00:04:23.800
and want to go ahead and press enter now
124

124

00:04:23.800  -->  00:04:26.770
it's going to execute the code and you
125

125

00:04:26.770  -->  00:04:28.450
can see that we've got the results of
126

126

00:04:28.450  -->  00:04:30.730
0 1 2 3 4 5 6 7 8 9.
127

127

00:04:30.730  -->  00:04:32.170
Now again don't worry too
128

128

00:04:32.170  -->  00:04:33.700
much about understanding the code,
129

129

00:04:33.700  -->  00:04:35.260
you don't need to understand the code at
130

130

00:04:35.260  -->  00:04:37.420
this stage, the point is you can see that
131

131

00:04:37.420  -->  00:04:39.850
idle has some basic capabilities to run
132

132

00:04:39.850  -->  00:04:42.850
Python code. Now this is all very useful
133

133

00:04:42.850  -->  00:04:44.680
for checking simple instructions but
134

134

00:04:44.680  -->  00:04:46.390
editing what you've typed isn't very
135

135

00:04:46.390  -->  00:04:48.430
intuitive. So let's just say we wanted to
136

136

00:04:48.430  -->  00:04:50.350
change the number 10 that you can see up
137

137

00:04:50.350  -->  00:04:53.890
here, we wanted to change that to the
138

138

00:04:53.890  -->  00:04:56.200
number 11. What we can do is move the
139

139

00:04:56.200  -->  00:04:58.240
cursor up to the previous line and press enter
140

140

00:04:58.240  -->  00:04:59.950
and idle will bring a copy of it down
141

141

00:04:59.950  -->  00:05:01.450
again running for modification and
142

142

00:05:01.450  -->  00:05:03.310
execution. So I'm going to move my cursor
143

143

00:05:03.310  -->  00:05:07.120
and go up to that line we're going to
144

144

00:05:07.120  -->  00:05:09.430
press enter and you can see it
145

145

00:05:09.430  -->  00:05:11.530
automatically copied that code down to
146

146

00:05:11.530  -->  00:05:13.330
the bottom and then I can move the
147

147

00:05:13.330  -->  00:05:15.610
cursor up one more lines change that to 11.
148

148

00:05:15.610  -->  00:05:17.230
I can delete out the zero and make it
149

149

00:05:17.230  -->  00:05:19.270
a 1, move the cursor down to the print
150

150

00:05:19.270  -->  00:05:23.080
line press enter and press backspace and
151

151

00:05:23.080  -->  00:05:24.180
then press enter,
152

152

00:05:24.180  -->  00:05:26.710
this time I'll execute it and you can see
153

153

00:05:26.710  -->  00:05:28.030
that we've got one additional number
154

154

00:05:28.030  -->  00:05:30.460
showing down the bottom. All right so
155

155

00:05:30.460  -->  00:05:32.020
that's one way of executing code and it
156

156

00:05:32.020  -->  00:05:33.430
can be useful we just want to check out
157

157

00:05:33.430  -->  00:05:35.890
a bit of code and see if it works.
158

158

00:05:35.890  -->  00:05:37.510
Now you often want to save programs
159

159

00:05:37.510  -->  00:05:39.850
in a separate file and run them from
160

160

00:05:39.850  -->  00:05:41.650
there. So what we're going to do now
161

161

00:05:41.650  -->  00:05:44.500
let's go to the file menu click on
162

162

00:05:44.500  -->  00:05:47.110
choose new file and you can see when we
163

163

00:05:47.110  -->  00:05:48.610
do that I get a little editor here
164

164

00:05:48.610  -->  00:05:50.830
little simple little text editor we're
165

165

00:05:50.830  -->  00:05:52.780
going to type in a program here and then
166

166

00:05:52.780  -->  00:05:54.610
we going to try running it, let me type
167

167

00:05:54.610  -->  00:05:59.620
in print and parentheses in double quotes
168

168

00:05:59.620  -->  00:06:05.050
hello world, so I can run that I can
169

169

00:06:05.050  -->  00:06:07.090
either come over here and select the run
170

170

00:06:07.090  -->  00:06:09.640
menu and run it that way, alternately I
171

171

00:06:09.640  -->  00:06:11.650
can press f5 which will do the same
172

172

00:06:11.650  -->  00:06:15.040
thing. So press f5 it comes up and says
173

173

00:06:15.040  -->  00:06:16.720
here that do you want to save the
174

174

00:06:16.720  -->  00:06:18.700
program before we run it? So let's go
175

175

00:06:18.700  -->  00:06:21.210
ahead and do that we'll click on save
176

176

00:06:21.210  -->  00:06:23.910
we're going to save it on my desktop
177

177

00:06:23.910  -->  00:06:28.200
we'll call it hello world press enter
178

178

00:06:28.200  -->  00:06:30.310
and you can see what happened was after
179

179

00:06:30.310  -->  00:06:32.590
I saved it, it went back to the other
180

180

00:06:32.590  -->  00:06:34.960
Python shell window and executed the
181

181

00:06:34.960  -->  00:06:37.360
code and it now gives us the name of the
182

182

00:06:37.360  -->  00:06:40.570
file that you used when the Python file
183

183

00:06:40.570  -->  00:06:42.820
was running. Now again would recommend that
184

184

00:06:42.820  -->  00:06:45.730
you use IntelliJ idea instead
185

185

00:06:45.730  -->  00:06:47.680
that's because idles fairly basic,
186

186

00:06:47.680  -->  00:06:49.810
it doesn't really provide any hints, code checking
187

187

00:06:49.810  -->  00:06:51.760
or all the other features of a full only
188

188

00:06:51.760  -->  00:06:54.070
like IntelliJ does, if you want to stick
189

189

00:06:54.070  -->  00:06:55.870
with idle though for some reason this
190

190

00:06:55.870  -->  00:06:57.700
brief introduction we'll have got to
191

191

00:06:57.700  -->  00:07:00.670
started. Now in installing IntelliJ IDEA
192

192

00:07:00.670  -->  00:07:02.110
when configuring will be covered in the
193

193

00:07:02.110  -->  00:07:04.930
next video, so here's a few reasons why
194

194

00:07:04.930  -->  00:07:06.430
you should consider using it rather than
195

195

00:07:06.430  -->  00:07:09.280
idle firstly IntelliJ IDEA has got code
196

196

00:07:09.280  -->  00:07:12.220
checking as you type, so IntelliJ
197

197

00:07:12.220  -->  00:07:13.780
checks your code as you type it in and
198

198

00:07:13.780  -->  00:07:15.880
flags errors with a marker in the right
199

199

00:07:15.880  -->  00:07:18.610
margin and it also suggests improvements
200

200

00:07:18.610  -->  00:07:20.260
in both of style of your code and the
201

201

00:07:20.260  -->  00:07:22.470
content and this is incredibly useful
202

202

00:07:22.470  -->  00:07:24.910
especially when starting out with a new language.
203

203

00:07:24.910  -->  00:07:27.760
Now auto-completion works across the
204

204

00:07:27.760  -->  00:07:30.100
various Python libraries to provide
205

205

00:07:30.100  -->  00:07:32.230
rapid selection of the methods and
206

206

00:07:32.230  -->  00:07:34.630
functions and hints on the syntax
207

207

00:07:34.630  -->  00:07:36.520
whereas autoloading copes with core
208

208

00:07:36.520  -->  00:07:39.010
functionality it's called auto indenting
209

209

00:07:39.010  -->  00:07:41.440
and also allows editing of XML and text
210

210

00:07:41.440  -->  00:07:43.750
files, so that the same tool can be used
211

211

00:07:43.750  -->  00:07:45.790
to examine data for excellent
212

212

00:07:45.790  -->  00:07:47.920
refactoring tools it's got a Python
213

213

00:07:47.920  -->  00:07:50.940
debugger, it's got support for DJango and
214

214

00:07:50.940  -->  00:07:54.040
also Google App Engine projects and the
215

215

00:07:54.040  -->  00:07:56.140
other is core thing is it also supports many
216

216

00:07:56.140  -->  00:07:58.300
languages in addition to Python Java
217

217

00:07:58.300  -->  00:08:00.790
scala, perl, groovy and many frameworks.
218

218

00:08:00.790  -->  00:08:02.770
so important is you really only need to
219

219

00:08:02.770  -->  00:08:05.080
learn one IDE for all development and
220

220

00:08:05.080  -->  00:08:06.910
also keep in mind that Google's Android
221

221

00:08:06.910  -->  00:08:08.890
studio for Android development,
222

222

00:08:08.890  -->  00:08:10.810
well that's basically IntelliJ IDEA under the
223

223

00:08:10.810  -->  00:08:12.940
hood. Now although we're going to be
224

224

00:08:12.940  -->  00:08:15.130
using IntelliJ IDEA in this course,
225

225

00:08:15.130  -->  00:08:16.870
you can use your favorite IDE instead if
226

226

00:08:16.870  -->  00:08:18.880
you prefer so if you're using something
227

227

00:08:18.880  -->  00:08:21.490
like eclipse or pycharm or one of the
228

228

00:08:21.490  -->  00:08:23.230
many other python IDEs then by all
229

229

00:08:23.230  -->  00:08:25.140
means go ahead and carry on using them.
230

230

00:08:25.140  -->  00:08:27.670
What I want to do now is finish by
231

231

00:08:27.670  -->  00:08:29.290
running a short program that we've
232

232

00:08:29.290  -->  00:08:31.480
created just to demonstrate some of the
233

233

00:08:31.480  -->  00:08:33.940
power on the Python language, now this
234

234

00:08:33.940  -->  00:08:35.410
program is going to collect exchange
235

235

00:08:35.410  -->  00:08:38.050
rate data from the internet then produce
236

236

00:08:38.050  -->  00:08:40.450
a graph showing three currencies for the
237

237

00:08:40.450  -->  00:08:43.420
last 12 months. Now this complete program
238

238

00:08:43.420  -->  00:08:45.640
is less than 100 lines of code and I
239

239

00:08:45.640  -->  00:08:46.990
think that's pretty impressive.
240

240

00:08:46.990  -->  00:08:49.090
Now generally what we strongly recommend
241

241

00:08:49.090  -->  00:08:51.040
is that you type in the code while
242

242

00:08:51.040  -->  00:08:52.510
watching the videos in this course,
243

243

00:08:52.510  -->  00:08:54.190
I really cannot stress that enough
244

244

00:08:54.190  -->  00:08:56.140
typing in code rather than just
245

245

00:08:56.140  -->  00:08:58.390
watching me type it really does help you
246

246

00:08:58.390  -->  00:09:01.430
learn faster and consolidate your learning to make
247

247

00:09:01.430  -->  00:09:02.870
to help you understand
248

248

00:09:02.870  -->  00:09:04.490
what you're doing. So that really is
249

249

00:09:04.490  -->  00:09:06.500
important and without going into a lot
250

250

00:09:06.500  -->  00:09:08.510
of Education of theory, you retain about
251

251

00:09:08.510  -->  00:09:11.030
80% of the things you do compared to
252

252

00:09:11.030  -->  00:09:14.240
that 30% of things that you see. Now if that
253

253

00:09:14.240  -->  00:09:16.130
doesn't persuade you, I'll add what we
254

254

00:09:16.130  -->  00:09:18.260
learned by typing in code, we didn't
255

255

00:09:18.260  -->  00:09:19.670
have the internet back then so back when
256

256

00:09:19.670  -->  00:09:21.710
myself and Jean Paul were starting out
257

257

00:09:21.710  -->  00:09:23.000
as programmers, we didn't actually have
258

258

00:09:23.000  -->  00:09:24.740
the internet back then so we actually
259

259

00:09:24.740  -->  00:09:26.570
copied the code from magazines and books
260

260

00:09:26.570  -->  00:09:29.240
there the act of typing it in makes you
261

261

00:09:29.240  -->  00:09:30.980
focus on each word that you're typing
262

262

00:09:30.980  -->  00:09:32.870
and correcting the typing errors
263

263

00:09:32.870  -->  00:09:34.790
afterwards really does help you to learn
264

264

00:09:34.790  -->  00:09:37.040
what's going on. And I'd also recommend
265

265

00:09:37.040  -->  00:09:38.840
that you watch each video again after
266

266

00:09:38.840  -->  00:09:40.670
you've typed the code, so you can focus
267

267

00:09:40.670  -->  00:09:42.740
on the explanation of what it's doing
268

268

00:09:42.740  -->  00:09:44.930
but with that said this next bits an
269

269

00:09:44.930  -->  00:09:46.760
exception to that and that's because
270

270

00:09:46.760  -->  00:09:48.170
this code that I'm about to show you is
271

271

00:09:48.170  -->  00:09:50.270
quite comple, so we've produced is
272

272

00:09:50.270  -->  00:09:51.950
program to show you the power of Python
273

273

00:09:51.950  -->  00:09:53.720
and there's a lot of things in the code
274

274

00:09:53.720  -->  00:09:55.310
that just won't make sense to you at the
275

275

00:09:55.310  -->  00:09:56.840
moment at this point in the course.
276

276

00:09:56.840  -->  00:09:58.850
And that's because this program that I'm
277

277

00:09:58.850  -->  00:10:00.680
going to show you uses functions
278

278

00:10:00.680  -->  00:10:03.110
generated as external modules and things
279

279

00:10:03.110  -->  00:10:05.480
like lists and tuples and probably all
280

280

00:10:05.480  -->  00:10:06.890
of that doesn't make sense but by the
281

281

00:10:06.890  -->  00:10:08.750
time you finish this course, you'll
282

282

00:10:08.750  -->  00:10:10.400
understand what all those things are and
283

283

00:10:10.400  -->  00:10:12.410
more importantly how to use them in your
284

284

00:10:12.410  -->  00:10:14.090
own programs, in fact you'll actually
285

285

00:10:14.090  -->  00:10:16.370
understand a lot more than that, for now
286

286

00:10:16.370  -->  00:10:17.900
though relax so let's just run this
287

287

00:10:17.900  -->  00:10:20.000
program to get a feel for what you can
288

288

00:10:20.000  -->  00:10:22.610
do with Python. So what we've done is
289

289

00:10:22.610  -->  00:10:24.980
we've made this program that we're going
290

290

00:10:24.980  -->  00:10:26.360
to be using freely available for
291

291

00:10:26.360  -->  00:10:27.650
download on the internet because it's
292

292

00:10:27.650  -->  00:10:29.840
such a small program, so you need to open
293

293

00:10:29.840  -->  00:10:33.870
a browser let's go ahead and do that,
294

294

00:10:33.870  -->  00:10:36.090
you need to go to the website learn
295

295

00:10:36.090  -->  00:10:38.880
programming academy as a learning
296

296

00:10:38.880  -->  00:10:41.100
programming dor academy forward slash and then
297

297

00:10:41.100  -->  00:10:45.930
we want to type in py download dot html and
298

298

00:10:45.930  -->  00:10:47.040
you can see the link there on the screen
299

299

00:10:47.040  -->  00:10:50.760
and press enter, it give you a simple
300

300

00:10:50.760  -->  00:10:53.040
little file pop-up and it's got an
301

301

00:10:53.040  -->  00:10:54.600
option here right click and save this
302

302

00:10:54.600  -->  00:10:55.560
file to your computer.
303

303

00:10:55.560  -->  00:10:58.020
So what we've done is we put this Python
304

304

00:10:58.020  -->  00:11:00.030
code on our website and we're now going
305

305

00:11:00.030  -->  00:11:01.650
to download that, so I'm going to come
306

306

00:11:01.650  -->  00:11:03.030
over here to this link I'm going to
307

307

00:11:03.030  -->  00:11:05.130
right click that link, click on save
308

308

00:11:05.130  -->  00:11:06.900
target s and it's going to save this
309

309

00:11:06.900  -->  00:11:08.310
onto my desktop, so I'm just going to
310

310

00:11:08.310  -->  00:11:10.350
click on desktop, you can see the name of
311

311

00:11:10.350  -->  00:11:11.970
the file in exchange underscore score chart
312

312

00:11:11.970  -->  00:11:14.070
and you can also notice it says save as
313

313

00:11:14.070  -->  00:11:15.780
type python file, so I will click on save
314

314

00:11:15.780  -->  00:11:19.080
and it was a very small file you can see
315

315

00:11:19.080  -->  00:11:20.130
that it's already finished down the
316

316

00:11:20.130  -->  00:11:21.540
bottom I'm going to close down the
317

317

00:11:21.540  -->  00:11:24.810
browser now and I'm back at idle now,
318

318

00:11:24.810  -->  00:11:26.640
so from the file menu what we can do now is
319

319

00:11:26.640  -->  00:11:29.610
click on file select open you want to go
320

320

00:11:29.610  -->  00:11:32.760
to our desktop and we want to click on
321

321

00:11:32.760  -->  00:11:34.890
exchange chart you can also see the
322

322

00:11:34.890  -->  00:11:36.300
other hollow world program that we
323

323

00:11:36.300  -->  00:11:38.730
created earlier in this videos and now
324

324

00:11:38.730  -->  00:11:45.150
we're going to select open. Now you can
325

325

00:11:45.150  -->  00:11:47.490
see that's the code that has been
326

326

00:11:47.490  -->  00:11:49.620
downloaded and that we've now opened in
327

327

00:11:49.620  -->  00:11:51.930
idle and if you're not familiar with
328

328

00:11:51.930  -->  00:11:53.340
Python, I'm sure that probably looks very
329

329

00:11:53.340  -->  00:11:55.110
complicated but as I said you're going
330

330

00:11:55.110  -->  00:11:56.700
to understand all of this and what it's
331

331

00:11:56.700  -->  00:11:58.980
doing is you work through the course.
332

332

00:11:58.980  -->  00:12:00.990
Alright, at this point let's actually run
333

333

00:12:00.990  -->  00:12:02.490
this program to see what it does so
334

334

00:12:02.490  -->  00:12:04.620
I'm going to press the f5 key remembering
335

335

00:12:04.620  -->  00:12:06.060
that I could also come up here to the
336

336

00:12:06.060  -->  00:12:08.160
run menu and click on run module
337

337

00:12:08.160  -->  00:12:09.450
chose to instead, so I'm going to click
338

338

00:12:09.450  -->  00:12:13.770
on f5 or press f5 so what's
339

339

00:12:13.770  -->  00:12:16.230
actually happening now is that in real
340

340

00:12:16.230  -->  00:12:18.000
time the Python program is actually
341

341

00:12:18.000  -->  00:12:20.070
downloading the current exchange rates
342

342

00:12:20.070  -->  00:12:22.770
for three currencies and it's been
343

343

00:12:22.770  -->  00:12:24.750
produced a chart as you can see there
344

344

00:12:24.750  -->  00:12:27.030
for the last 12 months for those
345

345

00:12:27.030  -->  00:12:28.620
countries so depending on when you run
346

346

00:12:28.620  -->  00:12:30.840
this, you'll find that the dates will be
347

347

00:12:30.840  -->  00:12:32.550
the last 12 months you can see right up
348

348

00:12:32.550  -->  00:12:35.310
here - August 2017 and that's the
349

349

00:12:35.310  -->  00:12:37.170
current month, there's basically showing
350

350

00:12:37.170  -->  00:12:39.030
the Australian dollars to Great Britain
351

351

00:12:39.030  -->  00:12:42.170
pound and the Euro against the US dollar
352

352

00:12:42.170  -->  00:12:44.700
and again the program displays the data
353

353

00:12:44.700  -->  00:12:47.610
for the last twelve months, so you get different
354

354

00:12:47.610  -->  00:12:50.790
follows along the x-axis. Now I don't
355

355

00:12:50.790  -->  00:12:51.780
know about you but I think that's pretty
356

356

00:12:51.780  -->  00:12:54.600
impressive for any 95 lines of code when
357

357

00:12:54.600  -->  00:12:56.970
you consider include it includes the
358

358

00:12:56.970  -->  00:13:00.090
code to download the relevant rates it
359

359

00:13:00.090  -->  00:13:01.920
actually charts the results for us
360

360

00:13:01.920  -->  00:13:04.530
automatically and you saw that it was
361

361

00:13:04.530  -->  00:13:05.640
pretty fast to boot.
362

362

00:13:05.640  -->  00:13:08.940
So I'll just close that down again,
363

363

00:13:08.940  -->  00:13:10.070
so again I'm not going to explain how it
364

364

00:13:10.070  -->  00:13:11.370
works at the moment because it uses a
365

365

00:13:11.370  -->  00:13:13.500
lot of Python features everything it
366

366

00:13:13.500  -->  00:13:15.000
does will be explained in the course
367

367

00:13:15.000  -->  00:13:16.470
so it all makes sense as you work
368

368

00:13:16.470  -->  00:13:19.050
through these videos. Alright, so that's
369

369

00:13:19.050  -->  00:13:21.570
the brief of idle. In the next video
370

370

00:13:21.570  -->  00:13:22.760
what we're going to do is install and
371

371

00:13:22.760  -->  00:13:26.280
configure another IDE IntelliJ IDEA,
372

372

00:13:26.280  -->  00:13:28.260
and we'll also talk about pycharm instead
373

373

00:13:28.260  -->  00:13:31.010
which looks exactly the same as IDEA but
374

374

00:13:31.010  -->  00:13:32.970
only supports python programming, as I
375

375

00:13:32.970  -->  00:13:34.350
said though if you're already using an
376

376

00:13:34.350  -->  00:13:36.320
IDE in it supports Python and you can
377

377

00:13:36.320  -->  00:13:37.920
continue to use that instead for this
378

378

00:13:37.920  -->  00:13:39.810
course, your screens will obviously look
379

379

00:13:39.810  -->  00:13:41.570
different to the videos but the code
380

380

00:13:41.570  -->  00:13:43.890
itself will be exactly the same.
381

381

00:13:43.890  -->  00:13:45.390
Alright, we'll finish the video here and
382

382

00:13:45.390  -->  00:13:48.590
I'll see you in the next one.
