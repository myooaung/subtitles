WEBVTT
1
00:00:05.390 --> 00:00:05.660
Alright.

2
00:00:05.660 --> 00:00:10.700
So at the end of the last video we ran this test, and we got our first results. I'm just going to run

3
00:00:10.700 --> 00:00:14.120
this again on my computer.

4
00:00:14.190 --> 00:00:20.440
Now we've done that approach using this globals() function. We called our globals() function there.

5
00:00:20.780 --> 00:00:26.040
Now that's one way to fix the error that we had in that last video, and we can use that if we're using Python

6
00:00:26.050 --> 00:00:32.040
3.5 and above. Generally though, I prefer to use the set up argument, because that works with earlier versions

7
00:00:32.220 --> 00:00:36.080
and it also allows you to be more specific about the environment the code will run in.

8
00:00:36.390 --> 00:00:40.440
And that's because there's often no need to pass in your module's complete namespace.

9
00:00:40.710 --> 00:00:42.180
So bearing in mind those results,

10
00:00:42.180 --> 00:00:45.690
what we're going to do is use, now, the setup argument instead.

11
00:00:45.690 --> 00:00:51.120
And the only thing we need to provide here is our two dictionaries. Of course we've got those defined up here,

12
00:00:51.220 --> 00:00:52.770
at the start of the program.

13
00:00:52.770 --> 00:00:57.630
So to do that, to provide our two dictionaries, we just need to set them up and put them into a string,

14
00:00:57.960 --> 00:00:59.470
and pass that string to timeit.

15
00:00:59.610 --> 00:01:03.180
Let's go ahead and do that. And I'll start on line three here, and type setup

16
00:01:03.220 --> 00:01:10.560
equals three double quotes backslash. And you can see in this case IntelliJ's giving us the three backslashes

17
00:01:10.680 --> 00:01:15.670
so I'm just going to cut those, and come down and paste those on line 17.

18
00:01:15.900 --> 00:01:19.680
But if you didn't see those double quotes like that, you just put them at the bottom and as I have done

19
00:01:19.700 --> 00:01:25.500
there. Right, and now that we've done that, we can actually pass that string as the setup

20
00:01:25.500 --> 00:01:30.250
argument to the timeit function, instead of globals. And we go down to our code again.

21
00:01:31.250 --> 00:01:37.990
We'll remove globals, cos we're not going to be using that anymore now, and replace that with setup. So make a note of

22
00:01:37.990 --> 00:01:41.890
this nested loop number here, 0.0517.

23
00:01:41.910 --> 00:01:43.180
We're going to run this again.

24
00:01:43.530 --> 00:01:45.150
We should see a similar time printed out.

25
00:01:48.780 --> 00:01:50.850
0.0517 last time.

26
00:01:50.850 --> 00:01:55.600
This is actually slightly slower, 0.05509

27
00:01:55.760 --> 00:01:59.300
So you can see that it still works with his second approach using setup.

28
00:01:59.300 --> 00:02:01.000
And we've got a similar time printed out.

29
00:02:01.070 --> 00:02:03.780
Not exactly the same, and that's not guaranteed though,

30
00:02:03.870 --> 00:02:06.840
and I'll talk about how to interpret these values in a moment.

31
00:02:07.000 --> 00:02:10.080
But for now, though, we've got the timing, our first code block.

32
00:02:10.260 --> 00:02:14.270
So now we can do exactly the same thing to time all three of the blocks that print the lists.

33
00:02:14.670 --> 00:02:18.050
So what we're going to do is, we're just going to duplicate each line a couple of times.

34
00:02:18.240 --> 00:02:18.800
Let's do that,

35
00:02:22.270 --> 00:02:26.440
and we'll change these so that we're executing the other tests, so

36
00:02:26.670 --> 00:02:31.880
result_2, instead of the nested_loop we're going to change that to the loop_comp,

37
00:02:36.600 --> 00:02:39.450
comp, and for the third one, that's our

38
00:02:40.170 --> 00:02:40.980
nested_comp.

39
00:02:44.590 --> 00:02:49.100
So nested_loop, loop_comp and nested_comp. And all the other arguments are all the same.

40
00:02:49.110 --> 00:02:53.370
And we'll just print the results, so Loop and comp for the next one,

41
00:02:56.970 --> 00:02:58.900
and it's going to print out result_2

42
00:02:59.240 --> 00:03:04.870
and then result_3. We're going to change that up here,

43
00:03:05.340 --> 00:03:14.860
result_3, and our third output is going to be nested_comp. Ok, so it's results one, two and three.

44
00:03:15.330 --> 00:03:17.730
OK let's just run this and see what we get.

45
00:03:18.940 --> 00:03:25.380
You can see we've got roughly, in order, of least amount of time to most, with the output as you can see there on the screen;

46
00:03:25.650 --> 00:03:33.500
0.052, 0,053, 0.060. We'll run it again, different results this time. The Nested comp.

47
00:03:39.680 --> 00:03:46.280
Basically, you should be finding that the loops are consistently larger than the comprehensions. This comprehension

48
00:03:46.280 --> 00:03:47.800
on the last line is clearly quicker.

49
00:03:47.800 --> 00:03:48.950
So I'll just run that again.

50
00:03:51.580 --> 00:03:52.420
Same result.

51
00:03:57.150 --> 00:04:00.110
And pretty much in every case, we're getting the nested comprehension.

52
00:04:00.400 --> 00:04:02.300
The value's smaller than the other two there.

53
00:04:02.470 --> 00:04:06.780
We had a weird little result the first time we ran it, but ultimately, you can see that's fairly consistent.

54
00:04:07.030 --> 00:04:12.250
So our program's timing all three snippets of code. All we have to do now is try to make sense of the values we're

55
00:04:12.250 --> 00:04:13.290
getting.

56
00:04:13.340 --> 00:04:15.860
Now that's not as straightforward as it seems.

57
00:04:16.000 --> 00:04:20.140
If it was there wouldn't be such a great variation in the results that we're getting.

58
00:04:20.140 --> 00:04:24.940
So if you do run the program quite a few times, you may find that nested_comp value is ocassionally higher

59
00:04:24.940 --> 00:04:25.700
than the others.

60
00:04:25.910 --> 00:04:27.940
I think that may have been the case the first time we ran it,

61
00:04:27.970 --> 00:04:29.480
if I recall correctly.

62
00:04:29.740 --> 00:04:33.360
But in any event, that will probably happen if you do run it a number of times.

63
00:04:33.430 --> 00:04:38.860
So these values do need to be interpreted carefully, and the documentation does state that you can't

64
00:04:38.980 --> 00:04:41.810
perform statistical analysis on the timings.

65
00:04:42.130 --> 00:04:44.250
And if we just quickly go back to the documentation,

66
00:04:47.440 --> 00:04:52.480
and see this note there. It's attempting to calculate mean and standard deviation from the result vector

67
00:04:52.480 --> 00:04:54.630
and report these.

68
00:04:54.640 --> 00:04:57.820
However this is not very useful. In the typical case,

69
00:04:57.910 --> 00:05:02.860
the lowest value gives a lower bound to how fast your machine can run the given code snippet.

70
00:05:03.310 --> 00:05:09.140
High values in the result vector are not typically, or typically are not, caused by variability in Python's

71
00:05:09.190 --> 00:05:13.130
speed, but by other processes interfering with your timing accuracy.

72
00:05:13.390 --> 00:05:16.740
So the min of the result is probably the only number you should be interested in.

73
00:05:16.900 --> 00:05:22.090
After that you should look at the entire vector, and apply common sense rather than statistics.

74
00:05:22.090 --> 00:05:24.850
So basically the lowest timing for the snippet's valid.

75
00:05:25.120 --> 00:05:32.620
That's the fastest time that your computer has executed the snippet in. Alright, go back to our code, and high values have to

76
00:05:32.620 --> 00:05:36.620
be treated carefully - they don't reflect just the execution of your code.

77
00:05:36.820 --> 00:05:41.990
So as I've said previously, all sorts of things are going on in a modern, multitasking operating system.

78
00:05:42.060 --> 00:05:44.290
The timings on Linux may be more consistent.

79
00:05:44.320 --> 00:05:47.550
The Windows operating system has all sorts of services running by default.

80
00:05:47.620 --> 00:05:51.270
Basically, anything could be going on while you're timing your code.

81
00:05:51.340 --> 00:05:54.370
Now that's bad enough, and we can make it far worse.

82
00:05:54.370 --> 00:05:56.140
Like we're doing here. Now,

83
00:05:56.200 --> 00:05:58.120
this may not work very well on the video.

84
00:05:58.220 --> 00:06:00.320
But I'm going to try and demonstrate it anyway.

85
00:06:00.670 --> 00:06:05.770
Now the reason it might not work here, is that I have a high end Mac computer with 32 gigs of RAM,

86
00:06:05.920 --> 00:06:09.590
in order to record high definition video, as we're doing here.

87
00:06:09.880 --> 00:06:15.150
If you're running something similar, then you also may not see the problem very clearly.

88
00:06:15.400 --> 00:06:17.680
But let's have a go anyway, and see what we can do.

89
00:06:17.720 --> 00:06:21.550
Close down the Run Window. We're going to increase the number of runs for each snippet.

90
00:06:21.700 --> 00:06:27.070
So basically, we're going from one thousand to ten thousand, for each.

91
00:06:27.070 --> 00:06:30.850
Now when I run the program again, watch the output window carefully.

92
00:06:30.950 --> 00:06:32.260
Now don't worry about reading it.

93
00:06:32.350 --> 00:06:36.600
What we're interested in, is how smoothly the output appears.

94
00:06:36.840 --> 00:06:42.140
So when I run it again, I'm going to click on the run button.

95
00:06:42.150 --> 00:06:45.290
Now you may have noticed that the output didn't appear smoothly.

96
00:06:45.480 --> 00:06:48.550
It sort of shuddered a few times, a block of output, rather, appeared.

97
00:06:48.690 --> 00:06:52.230
Then there was a brief pause, then the next block printed out.

98
00:06:52.230 --> 00:06:58.250
Now I said that printing is a relatively slow operation, and the terminal also has to manage output that

99
00:06:58.260 --> 00:07:00.260
runs off the top of the screen.

100
00:07:00.420 --> 00:07:07.810
So obviously, I can scroll back. If I go right up to the top, you can see significant amounts of input there, right up to the

101
00:07:07.810 --> 00:07:13.870
top here. We can't actually get back to the first line of output. We don't see the program starting and

102
00:07:13.870 --> 00:07:14.350
so forth.

103
00:07:14.360 --> 00:07:19.920
Some of the output's clearly been lost at this point. Now either IntelliJ's console or your operating system's

104
00:07:19.930 --> 00:07:21.460
terminal has to manage that.

105
00:07:21.500 --> 00:07:26.860
Now it's keeping track of the lines of output, and removing output from the buffer while we're timing.

106
00:07:27.010 --> 00:07:31.300
And that's going to have an impact on the smooth execution of the code we're timing.

107
00:07:31.330 --> 00:07:36.630
So as a general rule, I'd suggest not including screen output in the code you're trying to time.

108
00:07:36.770 --> 00:07:39.990
If you do that to the, then the last sentence to that note previously

109
00:07:40.030 --> 00:07:42.440
is particularly relevant.

110
00:07:42.460 --> 00:07:45.960
Apply common sense rather than statistics.

111
00:07:46.000 --> 00:07:48.070
That's a very important comment in any case.

112
00:07:48.380 --> 00:07:53.830
OK, so I left our code unchanged, so that we could focus on using the timeit function, and also so that

113
00:07:53.830 --> 00:07:59.290
I could show you this issue with timing code that sends data to external devices; screens, printers, disk

114
00:07:59.290 --> 00:08:00.350
drives, et cetera.

115
00:08:00.640 --> 00:08:04.070
So as I said, we're not really comparing like with like.

116
00:08:04.410 --> 00:08:09.460
I'm just going to close down our Run Window now. So basically, the first two snippets of code create a list,

117
00:08:09.490 --> 00:08:11.090
print it, and then throw it away.

118
00:08:11.290 --> 00:08:13.880
And that's these first two snippets of code here.

119
00:08:13.880 --> 00:08:17.210
The "Nested for loops" and "List comprehensions".

120
00:08:17.430 --> 00:08:22.900
And the third snippet is creating a nested list, then iterating over it to print it out.

121
00:08:23.070 --> 00:08:25.190
You can that there, starting on line 45.

122
00:08:25.470 --> 00:08:32.400
So leaving aside the issue with print, our timings are a valid way to help decide which is the more efficient

123
00:08:32.400 --> 00:08:34.140
approach for displaying the data.

124
00:08:34.350 --> 00:08:35.160
Or is it?

125
00:08:35.460 --> 00:08:38.370
So let's actually have another quick look at the documentation again.

126
00:08:38.470 --> 00:08:40.640
We get back.

127
00:08:40.670 --> 00:08:44.660
So just above this, this note here that we just looked at previously,

128
00:08:45.060 --> 00:08:49.650
there's actually another note. This one's in the discussion about the timeit function,

129
00:08:49.650 --> 00:08:56.430
as you can see there, on the screen. So by default, timeit temporarily turns off garbage collection during the timing.

130
00:08:56.850 --> 00:09:01.440
The advantage of this approach is that it makes independent timings more comparable.

131
00:09:01.440 --> 00:09:06.870
The disadvantage is that the garbage collection might be an important component of the performance of

132
00:09:06.870 --> 00:09:08.650
the function being measured.

133
00:09:08.820 --> 00:09:13.400
If so, garbage collection can be re-enabled as the first statement in the setup string.

134
00:09:13.440 --> 00:09:19.500
So timeit turns off garbage collection, so that it doesn't interrupt the execution of our code, and alter

135
00:09:19.500 --> 00:09:20.470
the timings.

136
00:09:20.580 --> 00:09:25.080
Now the note mentions a disadvantage, which is that the garbage collection may be an important component

137
00:09:25.080 --> 00:09:26.910
of the performance being measured.

138
00:09:26.910 --> 00:09:32.430
Now here we're comparing two code snippets that create and destroy objects, with another snippet that

139
00:09:32.430 --> 00:09:33.560
doesn't.

140
00:09:33.590 --> 00:09:37.760
Garbage collection is an important aspect of their relative performance, in this case.

141
00:09:38.040 --> 00:09:40.400
So the note talked about, well shows, 

142
00:09:40.500 --> 00:09:46.300
you can actually see there, how to enable garbage collection by including this call up here, to gc.enable()

143
00:09:46.360 --> 00:09:48.200
in the setup code.

144
00:09:48.310 --> 00:09:49.940
Now we've already got a setup string.

145
00:09:49.950 --> 00:09:52.940
So let's go back and try adding that and see what happens.

146
00:09:52.940 --> 00:09:55.760
So back to IntelliJ, and up to our setup string.

147
00:09:55.810 --> 00:09:59.200
We'll put that in as the first line,

148
00:09:59.280 --> 00:10:05.500
gc.enable().  Now

149
00:10:05.580 --> 00:10:07.440
garbage collection takes time.

150
00:10:07.440 --> 00:10:12.540
So before I run the program again, have a think about what you'd expect the results to be.

151
00:10:12.540 --> 00:10:17.130
Now remember to consider your own computer, as well as my Mac that's got loads of RAM.

152
00:10:17.340 --> 00:10:20.920
So let's run the program now and see if we get the results that we're expecting here.

153
00:10:24.320 --> 00:10:29.490
Now strangely, allowing garbage collection can improve the performance of code that creates and deletes

154
00:10:29.490 --> 00:10:30.990
a lot of objects.

155
00:10:30.990 --> 00:10:35.640
Now there may be a smaller difference in the results, although you may need to run the program several

156
00:10:35.640 --> 00:10:38.660
times to get a better feel for how the times are changing.

157
00:10:38.680 --> 00:10:42.260
You can see here, in this example, the loop and comp was actually quicker,

158
00:10:42.480 --> 00:10:45.030
and the nested comp was second. But let's just run it a few more times.

159
00:10:48.410 --> 00:10:51.380
This time you can see Nested comp is the fastest.

160
00:10:53.660 --> 00:10:56.870
We're now getting a more consistent approach here, by the looks.

161
00:10:56.960 --> 00:10:58.620
Nested comp was actually slower.

162
00:11:03.790 --> 00:11:11.500
Around a few more times. Nested comp was fastest, fastest and round about the same.

163
00:11:11.690 --> 00:11:16.800
You can see we've got varying results there, but in general what you should find, is that the Nested comp still

164
00:11:16.800 --> 00:11:20.300
seems to be the fastest, as a rule, with the nested loop coming second.

165
00:11:20.310 --> 00:11:22.870
But that's not always the case, as you saw when I was testing this.

166
00:11:22.920 --> 00:11:28.950
One thing that is clear here, is that there doesn't seem to be a huge difference. At best, we're saving a few milliseconds

167
00:11:29.160 --> 00:11:31.950
over 10,000 executions of the code.

168
00:11:32.110 --> 00:11:37.350
But again I want to make the point that this really isn't the best example.  We've seen how to use the

169
00:11:37.360 --> 00:11:41.990
timeit module, and we've seen some of the pitfalls you'll encounter when timing code.

170
00:11:42.300 --> 00:11:47.230
So it's important to use common sense when interpreting the results and to make sure that you're comparing

171
00:11:47.230 --> 00:11:48.980
code that really does do the same thing.

172
00:11:49.200 --> 00:11:54.630
And we've also seen that attempting to profile code that communicates with any external device can

173
00:11:54.630 --> 00:11:55.490
be tricky.

174
00:11:55.860 --> 00:12:00.450
Now the operation of the external device, whether it's a screen, a disk drive, or anything else external

175
00:12:00.450 --> 00:12:05.440
to your computer's processor, can have an unpredictable impact on the results.

176
00:12:05.750 --> 00:12:10.530
Now in the next video, we're going to modify this code so that all three snippets are doing the

177
00:12:10.530 --> 00:12:11.610
same thing.

178
00:12:11.680 --> 00:12:17.230
We'll also use the timeit function to look at another few examples, to get a better feel for how

179
00:12:17.250 --> 00:12:20.540
timeit can help to choose the most efficient algorithm.

180
00:12:20.700 --> 00:12:22.030
So I'll see you in the next video.
