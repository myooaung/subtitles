WEBVTT
1

00:00:04.700  -->  00:00:08.860
So the last bit of code that we wrote at
the end of the previous video

2

00:00:08.860  -->  00:00:13.380
may well horrify Java and C programmers. So let's just go down look at that code again.

3

00:00:13.380  -->  00:00:18.600
I'll start by reviewing it, so make sure you've opened Hello World project in your IDE if you haven't got it open,

4

00:00:18.600  -->  00:00:20.600
and you've got the strings.py open.

5

00:00:20.600  -->  00:00:26.020
So firstly, on line 14, we've attached the
variable age to an int value 24.

6

00:00:26.020  -->  00:00:31.720
Further on, down on line 20, we've reattached that same label to a string value, "2 years".

7

00:00:31.720  -->  00:00:34.760
Age, at that point, is now bound to the string "2 years".

8

00:00:34.760  -->  00:00:40.440
So Java and C programmers might jump to the conclusion that Python is a weakly typed language,

9

00:00:40.440  -->  00:00:42.520
and doesn't care what type things are.

10

00:00:42.520  -->  00:00:47.340
And that's a natural assumption, if you think in terms of assigning a value to a variable.

11

00:00:47.340  -->  00:00:52.300
Looking at it that way, it looks like we've assigned a string value to an int variable.

12

00:00:52.300  -->  00:00:57.340
Age represents an int on line 14, but is given a string on line 20.

13

00:00:57.340  -->  00:01:02.100
If we think in terms of binding a variable to a value, things make more sense

14

00:01:02.100  -->  00:01:08.300
On line 14, age is attached to an int value, 24 is an int and will always be an int.

15

00:01:08.300  -->  00:01:15.540
When we rebind the label age to a string value on line 20, we're saying that we no longer want that label to refer to an int.

16

00:01:15.540  -->  00:01:19.340
We now want to use it to refer to the string value, 2 years.

17

00:01:19.340  -->  00:01:23.160
Now re-using a variable name like that probably isn't a good idea.

18

00:01:23.160  -->  00:01:25.340
You can make your code confusing to read.

19

00:01:25.340  -->  00:01:29.740
What we probably should have done, is
bind a more meaningful label to the string.

20

00:01:29.740  -->  00:01:35.960
So something like, we come back to line 20, age underscore in underscore words.

21

00:01:35.960  -->  00:01:38.920
That would now be more obvious as to what we're trying to do here.

22

00:01:38.920  -->  00:01:43.440
But just because Python allows you to re-use a variable name for a different purpose,

23

00:01:43.440  -->  00:01:45.940
that doesn't mean it's not strongly typed.

24

00:01:45.940  -->  00:01:50.500
As an example, let's see what happens if we try to add an int to the string.

25

00:01:50.500  -->  00:01:54.860
So I'm going to modify line 21 here, instead of just printing age, we're going to print,

26

00:01:55.440  -->  00:02:05.440
delete that and we'll put name + double quotes space is space and double quote, closing double quote + age

27

00:02:05.440  -->  00:02:10.600
+ and double quotes again, space then years old.

28

00:02:10.600  -->  00:02:13.780
So we saw string concatenation on line 11.

29

00:02:13.780  -->  00:02:18.100
Python knows that greeting and name are bound to strings, and can happily concatenate

30

00:02:18.100  -->  00:02:20.340
the string values, to print out the full greeting.

31

00:02:20.340  -->  00:02:24.820
So I've just modified line 21 and now we're mixing string and int values.

32

00:02:24.820  -->  00:02:30.020
Will it work? Well let's run it to see.

33

00:02:30.020  -->  00:02:33.700
So you can see when we ran - I'll scroll up so we can see the errors -

34

00:02:33.700  -->  00:02:38.020
it prints two greetings and the value of age but then displays an error

35

00:02:38.020  -->  00:02:44.100
So the error you can see there is type error, and that's all happening on our code on line 21.

36

00:02:44.100  -->  00:02:47.540
Python helpfully shows the line number.

37

00:02:47.540  -->  00:02:51.600
You can scroll over and see there, line 21 in module.

38

00:02:51.600  -->  00:02:57.160
It also shows the bit of code that displays the error, as well as a description for what the actual error was.

39

00:02:57.160  -->  00:03:01.900
So a type error means that we've provided a value of one type, int in this case,

40

00:03:01.900  -->  00:03:04.980
when it's expected another type, a string.

41

00:03:04.980  -->  00:03:10.460
So different versions of Python produce slightly different descriptions for that error, by the way.

42

00:03:10.460  -->  00:03:15.500
I got the message: can only concatenate string, not int to string, as you can see on the screen there,

43

00:03:15.740  -->  00:03:20.600
but your version of Python may have said, can't convert int object to string implicitly.

44

00:03:20.600  -->  00:03:24.820
Python knows what to do if you use + with two strings. It concatenates them,

45

00:03:24.820  -->  00:03:27.340
or with two numbers, it calculates their sum.

46

00:03:27.340  -->  00:03:32.000
However, it's got no idea what you intend if you try to add a string and a number.

47

00:03:32.000  -->  00:03:36.680
Some languages, such as Java, will automatically convert the number to a string and concatenate,

48

00:03:36.680  -->  00:03:40.120
but Python doesn't do this, hence the type error.

49

00:03:40.120  -->  00:03:44.820
Automatic type conversion can be useful but it can also be a source of hard to find bugs

50

00:03:44.820  -->  00:03:48.840
and Python tries to prevent you from introducing errors in this way.

51

00:03:48.840  -->  00:03:53.120
Now later in the course, we'll look at handling errors but for now, think of errors as your friend.

52

00:03:53.120  -->  00:03:55.740
When python displays an error like the one above,

53

00:03:55.740  -->  00:03:58.040
it's telling you that your code won't work.

54

00:03:58.040  -->  00:04:02.560
It provides as much information as possible to help you work out why as well.

55

00:04:02.560  -->  00:04:06.300
Errors may be frustrating but you'll learn a lot from getting errors like this,

56

00:04:06.300  -->  00:04:08.756
and more importantly,  working at how to fix them.

57

00:04:08.760  -->  00:04:15.200
An advantage of using an IDE like IntelliJ IDEA or PyCharm, rather than the IDLE IDE that ships with Python,

58

00:04:15.300  -->  00:04:17.980
are the hints that IntelliJ provides.

59

00:04:17.980  -->  00:04:22.580
So at the far right to line 21, and I'll just close this run window down,

60

00:04:22.580  -->  00:04:25.340
I hover over that. You see that little yellow dash that I hovered over,

61

00:04:25.340  -->  00:04:31.580
IntelliJ is now showing a tooltip saying, expected type string str but got int instead.

62

00:04:31.580  -->  00:04:35.160
This is a good indication that something is wrong, before you even run your program.

63

00:04:35.160  -->  00:04:37.800
So if your IDE provides warnings and errors like this,

64

00:04:37.800  -->  00:04:42.580
they're extremely useful if you check them out, when you make simple typing errors in long programs.

65

00:04:42.580  -->  00:04:48.100
Alright, so I'll stop the video here and in the next one, we'll look at Python's numeric data types.

66

00:04:48.100  -->  00:04:50.860
See you in the next video.
