1
1

00:00:05,320  -->  00:00:07,400
So we're not gonna start
talking about reading and
2

2

00:00:07,400  -->  00:00:09,330
writing binary files in Python.
3

3

00:00:09,330  -->  00:00:12,060
Now, there's two main reasons why
we would wanna deal with that,
4

4

00:00:12,060  -->  00:00:15,170
why we would wanna deal with binary files.
5

5

00:00:15,170  -->  00:00:19,300
So either we're processing binary data
Such as for an example, an image file.
6

6

00:00:19,300  -->  00:00:22,930
And all we might want to store
the variables in our program so
7

7

00:00:22,930  -->  00:00:24,620
that we can load them back in later.
8

8

00:00:24,620  -->  00:00:26,920
Now the good thing is that
the basic principles of reading and
9

9

00:00:26,920  -->  00:00:31,800
writing text files can be applied
here in principle in both cases.
10

10

00:00:31,800  -->  00:00:34,170
So what we'll do is we'll start
writing some binary data,
11

11

00:00:34,170  -->  00:00:36,230
and then we'll read it back in again.
12

12

00:00:36,230  -->  00:00:40,340
Now creating a binary file is just
as easy as writing a text file
13

13

00:00:40,340  -->  00:00:42,980
What we do is we just specify
the mode as b for binary.
14

14

00:00:42,980  -->  00:00:44,650
Thing to keep in mind is that strings and
15

15

00:00:44,650  -->  00:00:47,720
integers cannot be directly
written to a binary file.
16

16

00:00:47,720  -->  00:00:51,080
They need to be converted to
a format called Bytes first.
17

17

00:00:51,080  -->  00:00:54,800
And Python provides a number of ways to do
this and the most obvious being the method
18

18

00:00:54,800  -->  00:00:58,560
I'm about to show you which is
using the Bytes build-in function.
19

19

00:00:58,560  -->  00:01:03,270
And then the two underscore Bytes method
integer objects which does just that.
20

20

00:01:03,270  -->  00:01:06,500
So, lets start out now by writing the
numbers from zero to sixteen to a binary
21

21

00:01:06,500  -->  00:01:08,330
fall and then ringing them back in again.
22

22

00:01:08,330  -->  00:01:10,910
So, you're going to start talking with,
23

23

00:01:10,910  -->  00:01:13,580
we're going to be using with
like we did with text bowls.
24

24

00:01:13,580  -->  00:01:16,360
Open and we'll call the fall binary.
25

25

00:01:16,360  -->  00:01:19,990
And we're going to put B for
binary and W for wright.
26

26

00:01:21,570  -->  00:01:24,980
Notice that if we don't put the b there
it's going to assume to be a text file.
27

27

00:01:24,980  -->  00:01:29,410
So we need to put the b as well as
the w for write mode and binary files.
28

28

00:01:29,410  -->  00:01:31,260
We'll call that sb number score file.
29

29

00:01:31,260  -->  00:01:33,440
Then we'll put
30

30

00:01:34,610  -->  00:01:39,660
firing range 17 because you want
the numbers from 0 to 16 to be processed.
31

31

00:01:39,660  -->  00:01:44,000
Be put [INAUDIBLE]
and
32

32

00:01:44,000  -->  00:01:48,570
then we wanna put bin_file.right bytes.
33

33

00:01:48,570  -->  00:01:52,920
And bytes is the in built
function that comes with Python.
34

34

00:01:52,920  -->  00:01:57,900
Then we'll just put I, so what we're
doing is we're converting the number I
35

35

00:01:57,900  -->  00:02:00,510
to a byte format, and
then writing that to our binary file.
36

36

00:02:02,170  -->  00:02:03,990
And that should be like so.
37

37

00:02:06,000  -->  00:02:11,070
And then to read it, we come back here and
38

38

00:02:11,070  -->  00:02:18,730
we type with open("binary",
39

39

00:02:18,730  -->  00:02:24,520
'br') as bin_file.
40

40

00:02:24,520  -->  00:02:27,240
Actually we should make that
dip into the first one.
41

41

00:02:30,270  -->  00:02:33,660
Binfile we'll call it on this time.
42

42

00:02:33,660  -->  00:02:35,940
Binfile print b.
43

43

00:02:35,940  -->  00:02:39,420
So there's our basic code, so
44

44

00:02:39,420  -->  00:02:44,890
if we now run that And you can see
the output on the screen there.
45

45

00:02:44,890  -->  00:02:47,050
So opening a binary file
in order to write it,
46

46

00:02:47,050  -->  00:02:51,250
it's very similar in the examples we used
for writing to a text file as I mentioned.
47

47

00:02:51,250  -->  00:02:54,150
We just specify b, which you
can't see on the screen here now.
48

48

00:02:55,460  -->  00:02:56,640
Oh, actually you could see that.
49

49

00:02:56,640  -->  00:02:59,430
So that is b in front of the mode.
50

50

00:02:59,430  -->  00:03:03,620
So it's gonna be bw for
writing binary, br for reading.
51

51

00:03:03,620  -->  00:03:05,330
And you didn't see this before previously,
but
52

52

00:03:05,330  -->  00:03:09,230
when we're writing,
we now use the bin_file identifier.
53

53

00:03:09,230  -->  00:03:14,260
And we use a .write method that's part of
that to write our bytes out in that order.
54

54

00:03:14,260  -->  00:03:17,210
So that's a little bit different
to what you've seen before.
55

55

00:03:17,210  -->  00:03:21,260
And of course, the other clear thing there
is the bytes method there on line three,
56

56

00:03:21,260  -->  00:03:26,520
we have to use that built in bytes
method data in this case an integer to
57

57

00:03:26,520  -->  00:03:31,770
a bytes object which can be written
to the binary file effectively.
58

58

00:03:31,770  -->  00:03:35,580
So that method on line three,
the bytes method returns a bytes object.
59

59

00:03:35,580  -->  00:03:38,780
And that's an immutable version of a byte
array, which we'll be looking at later.
60

60

00:03:38,780  -->  00:03:42,560
And essentially it's just a sequence
of integers in the range 0 to 255,
61

61

00:03:42,560  -->  00:03:44,430
in other words, a sequence of bytes.
62

62

00:03:44,430  -->  00:03:48,190
And you can see that in the example that
I've actually shown when we actually were
63

63

00:03:48,190  -->  00:03:50,930
in the airport,
right when we'd written the program.
64

64

00:03:50,930  -->  00:03:55,050
Now the bites function itself doesn't
quite behave as we might have expected.
65

65

00:03:55,050  -->  00:03:57,520
And we'll discuss line
three in a bit more detail
66

66

00:03:57,520  -->  00:04:00,780
after we talk a bit more about the file
that was created here to the right.
67

67

00:04:00,780  -->  00:04:04,690
So your binary file should be saved in
the same directory as your Python program.
68

68

00:04:04,690  -->  00:04:09,400
In my case, now it's going to be there
in my python program slash binary.
69

69

00:04:09,400  -->  00:04:12,990
So what I should be able to do is I
should be able right click my file,
70

70

00:04:12,990  -->  00:04:15,890
click on reveal and
find to go to that folder directly.
71

71

00:04:15,890  -->  00:04:18,940
And you can see there is
the binary file at the top here,
72

72

00:04:18,940  -->  00:04:23,370
and we can also come back here, and
the binary file should be there now.
73

73

00:04:23,370  -->  00:04:26,050
We can double click that
IntelliJ will come up and say,
74

74

00:04:26,050  -->  00:04:29,970
do you wanna register a new file type, cuz
it doesn't recognize this type of file.
75

75

00:04:29,970  -->  00:04:32,450
Clearly we're getting different results,
I'm not gonna actually open that now.
76

76

00:04:32,450  -->  00:04:36,900
But clearly the point is that it's not
a text file anymore, and it can't be read
77

77

00:04:36,900  -->  00:04:41,200
read a normal text file, because we're
using a different process to write these.
78

78

00:04:41,200  -->  00:04:46,260
The very nature of binary files is often
they're using non-text characters So
79

79

00:04:46,260  -->  00:04:49,250
again we can go back and have a look,
and try to open this file.
80

80

00:04:51,220  -->  00:04:54,780
And you see the mechas number that is
not displaying anything there at all.
81

81

00:04:54,780  -->  00:04:56,830
As far as its concerned it doesn't exist,
so that's not good.
82

82

00:04:56,830  -->  00:04:59,640
So let's go back to IntelliJ and
we'll double click it again.
83

83

00:04:59,640  -->  00:05:04,360
And this time we'll just get it to use
the text file just to see what happens,
84

84

00:05:04,360  -->  00:05:05,660
see what will come back.
85

85

00:05:05,660  -->  00:05:08,130
In this case you can see,
again, it wasn't very helpful.
86

86

00:05:08,130  -->  00:05:10,880
Basically displays a non-text
character as a square.
87

87

00:05:10,880  -->  00:05:13,250
And we can't really do much,
we can't go over.
88

88

00:05:13,250  -->  00:05:17,730
But essentially that's because the format
of the file isn't at all that you can
89

89

00:05:17,730  -->  00:05:20,930
normally read from in the tradition
sense that as a text file is.
90

90

00:05:20,930  -->  00:05:24,050
And just to confirm this is the actual
output on the right hand side here.
91

91

00:05:24,050  -->  00:05:27,180
This is the data that got written so
you can see it's in a weird format,
92

92

00:05:27,180  -->  00:05:28,480
the slash means it's a.
93

93

00:05:28,480  -->  00:05:33,370
Character code so if you look carefully
you can see that we're fusing slash x for
94

94

00:05:33,370  -->  00:05:35,610
number zero, number one, number two,
number three, 4-5-6-7-8.
95

95

00:05:35,610  -->  00:05:39,610
And then we're getting into
hex as you can see there.
96

96

00:05:39,610  -->  00:05:43,980
We count through eventually to ten
which is hex for the number 16.
97

97

00:05:43,980  -->  00:05:47,770
Other thing to point in mind is
the slash t there for tap And
98

98

00:05:47,770  -->  00:05:52,590
that's because the number code for
a byte 09 or
99

99

00:05:52,590  -->  00:05:56,140
character 09 is actually known as a 10.
100

100

00:05:56,140  -->  00:05:59,900
And for
10 that's also known as a recoratoon.
101

101

00:05:59,900  -->  00:06:02,090
When you want character
to be more precise,
102

102

00:06:02,090  -->  00:06:05,300
in case you are wondering what
they are and d is also missing.
103

103

00:06:05,300  -->  00:06:08,230
It's in fact replaced by \r And
104

104

00:06:08,230  -->  00:06:11,930
that's because a return character,
which has got the value thrown in.
105

105

00:06:11,930  -->  00:06:16,300
So, what's happening is there's
been some sort of conversion here.
106

106

00:06:16,300  -->  00:06:19,090
Intelligent knows that some of these
are common codes that are used and
107

107

00:06:19,090  -->  00:06:22,780
its actually showing what
the representation of those are when
108

108

00:06:22,780  -->  00:06:24,430
we're outputting this set list.
109

109

00:06:24,430  -->  00:06:28,460
Now, if we actually did this, if we
actually output this on a Linux console
110

110

00:06:28,460  -->  00:06:32,860
X07 is a bell character, so,
not sure whether that will work on a Mac.
111

111

00:06:32,860  -->  00:06:36,050
But we can go to the folder,
I'm just going to my terminal.
112

112

00:06:37,330  -->  00:06:43,560
And if I go cd
~/Documents/Programs/PythonPrograms/Bin-
113

113

00:06:43,560  -->  00:06:47,290
ary, I'm going to go into that folder,
and if I try and
114

114

00:06:47,290  -->  00:06:51,800
do a cat which is the equivalent of
Of typing the file contents out.
115

115

00:06:51,800  -->  00:06:53,780
[SOUND] Did it again.
116

116

00:06:53,780  -->  00:06:56,000
[SOUND] Did you hear that beep?
117

117

00:06:56,000  -->  00:07:01,110
That's the beep for the character 7,
XI7, which is a beep character.
118

118

00:07:01,110  -->  00:07:03,690
So you'll find that you'll get a beep
if you run this under Linux as well, or
119

119

00:07:03,690  -->  00:07:05,210
if you try and type this.
120

120

00:07:05,210  -->  00:07:07,160
And I think you may get
that on Windows as well.
121

121

00:07:07,160  -->  00:07:11,710
So if you go to that folder and
type in the commands type and
122

122

00:07:11,710  -->  00:07:15,370
then space and then name in this case
binary you'll probably get the same thing.
123

123

00:07:15,370  -->  00:07:16,970
You'll get some sort of beep for
124

124

00:07:16,970  -->  00:07:22,700
the character because it's the character
would actually beep in Windows as well.
125

125

00:07:22,700  -->  00:07:24,400
So getting back to line three in our code.
126

126

00:07:24,400  -->  00:07:26,100
I'll close down the binary fold out now.
127

127

00:07:26,100  -->  00:07:27,200
And closing the run window now.
128

128

00:07:27,200  -->  00:07:29,330
Now getting back to line three,
129

129

00:07:29,330  -->  00:07:33,300
did you notice that we actually passed
the list to the bytes function?
130

130

00:07:33,300  -->  00:07:37,500
And the reason that we passed the list,
that we didn't just pass i without a list
131

131

00:07:37,500  -->  00:07:42,100
or not in a list It's because
bite works a little strangely.
132

132

00:07:42,100  -->  00:07:43,480
So if you pass an integer to it,
133

133

00:07:43,480  -->  00:07:46,920
it creates a bite sequence with
that many bites all set to zero.
134

134

00:07:46,920  -->  00:07:47,900
Which is not what we wanted here.
135

135

00:07:47,900  -->  00:07:50,060
So by enclosing I in square brackets,
136

136

00:07:50,060  -->  00:07:52,650
we're parsing a list with
the single item I, which
137

137

00:07:52,650  -->  00:07:56,530
the bite function then correctly converted
to a single binary file in the airport.
138

138

00:07:56,530  -->  00:07:59,170
If we fail to convert the single
number to a bite we'll get an error.
139

139

00:07:59,170  -->  00:08:03,140
I can see that by changing line three And
140

140

00:08:03,140  -->  00:08:07,230
temporarily removing that code to
convert it to a byte and also the list.
141

141

00:08:07,230  -->  00:08:10,490
And we try and
create it like that and run it.
142

142

00:08:10,490  -->  00:08:13,570
We get an error,
bytes-like object is required, not 'int'.
143

143

00:08:13,570  -->  00:08:16,260
So we do need to do that
conversion before we try and
144

144

00:08:16,260  -->  00:08:19,990
save it as a byte in binary
format to a binary file.
145

145

00:08:19,990  -->  00:08:24,590
Now we'll have a quick look now on how we
can write numerical values greater than
146

146

00:08:24,590  -->  00:08:25,960
255 to a binary file.
147

147

00:08:25,960  -->  00:08:30,540
But first one question you might be asking
now is if we have to pass a sequence type
148

148

00:08:30,540  -->  00:08:35,180
like list to the bytes method, and I'll
just un do that so we can see it again.
149

149

00:08:35,180  -->  00:08:38,040
So if you need to pass
a list as you saw there and
150

150

00:08:38,040  -->  00:08:40,390
we generated the sequence
from the range function.
151

151

00:08:40,390  -->  00:08:41,870
The previous line.
152

152

00:08:41,870  -->  00:08:45,110
Whether we bother iterating through it
to create a single item for each value.
153

153

00:08:45,110  -->  00:08:48,910
Now the answer is that we
shouldn't have done that but
154

154

00:08:48,910  -->  00:08:52,580
really what we wanted to do was just
to demonstrate what was happening.
155

155

00:08:52,580  -->  00:08:56,450
In practice you wouldn't create some
code exactly like we've done here.
156

156

00:08:56,450  -->  00:08:59,810
You'd actually write the program in one
less line by just adding the range to
157

157

00:08:59,810  -->  00:09:00,790
the bytes function.
158

158

00:09:00,790  -->  00:09:03,090
So in other words you
do something like this.
159

159

00:09:03,090  -->  00:09:07,500
You get rid of the for
link altogether, and
160

160

00:09:07,500  -->  00:09:12,890
instead of putting bytes and
putting a list there,
161

161

00:09:12,890  -->  00:09:18,030
we put (bytes(range(17))), Like so,
162

162

00:09:18,030  -->  00:09:23,200
and if we run that You can see
we've got exactly the same result
163

163

00:09:23,200  -->  00:09:25,770
in terms of output with this line of code.
164

164

00:09:25,770  -->  00:09:30,300
Now it'd be more useful with binary
files to store the of our own numerical
165

165

00:09:30,300  -->  00:09:32,340
in a binary file, and we can do that.
166

166

00:09:32,340  -->  00:09:37,650
And it turns the itself's got a 2_bytes
method that it allows it to do that.
167

167

00:09:37,650  -->  00:09:40,360
So this next example,
what I'm going to do is
168

168

00:09:40,360  -->  00:09:44,620
Write the value out of four variables and
allows to read those values back in again.
169

169

00:09:44,620  -->  00:09:46,800
Going to close this and
I'm just going to that code out.
170

170

00:09:46,800  -->  00:09:52,380
And I'm going to we're going
to set the values first.
171

171

00:09:52,380  -->  00:10:00,710
A equals 65534 and
that's equivalent to FFFE and A equals 65.
172

172

00:10:00,710  -->  00:10:01,240
535.
173

173

00:10:01,240  -->  00:10:06,150
That's equivalent to FF FF.
174

174

00:10:06,150  -->  00:10:07,750
C equals 65536.
175

175

00:10:07,750  -->  00:10:15,450
That's equivalent to 00010000 And
176

176

00:10:15,450  -->  00:10:21,190
finally D equals 2998302,
that's equivalent to O2, so
177

177

00:10:21,190  -->  00:10:26,580
2DCO1E, so that's our four variables,
178

178

00:10:26,580  -->  00:10:30,210
and I'm just giving you the hex
equivalence there to the right hand side,
179

179

00:10:30,210  -->  00:10:37,130
And this the code so we can put right,
so I can put width, open two.
180

180

00:10:37,130  -->  00:10:42,060
And b w because we want to
write a binary file format.
181

181

00:10:42,060  -->  00:10:42,720
S bin file.
182

182

00:10:44,830  -->  00:10:47,100
I'm going to put bin
underscore file dot right.
183

183

00:10:48,380  -->  00:10:53,320
A dot two underscore bye method
we converted the integer
184

184

00:10:53,320  -->  00:10:56,350
Automatically two bytes and then we're
gonna pass an extra parameter here,
185

185

00:10:56,350  -->  00:10:59,660
we're gonna put the length, and
we're gonna put the bar [INAUDIBLE] and
186

186

00:10:59,660  -->  00:11:00,740
we'll talk about that shortly.
187

187

00:11:00,740  -->  00:11:01,990
I'm gonna set that to big.
188

188

00:11:04,080  -->  00:11:06,730
List D we'll set that to X to just be
a little bit different because there's
189

189

00:11:06,730  -->  00:11:07,570
a reason for that shortly.
190

190

00:11:07,570  -->  00:11:09,350
We'll just do the same for the other two.
191

191

00:11:10,600  -->  00:11:11,760
In fact on three variables.
192

192

00:11:11,760  -->  00:11:15,950
The next one is going to be two bytes
again, so that's going to be B.
193

193

00:11:15,950  -->  00:11:19,920
We're basing that on the fact that
this representation over here,
194

194

00:11:19,920  -->  00:11:22,830
so for A and B we only needed
two bytes to store the value.
195

195

00:11:22,830  -->  00:11:25,500
But the next one, because we've
clocked over the 65 power 53 mark,
196

196

00:11:25,500  -->  00:11:27,360
we need to use four bytes.
197

197

00:11:27,360  -->  00:11:28,880
So I'm going to set that to four.
198

198

00:11:32,720  -->  00:11:38,300
Four and the last one which will be X that
also needs four bytes as you can see,
199

199

00:11:38,300  -->  00:11:39,780
so I'm going to change that to four.
200

200

00:11:39,780  -->  00:11:43,810
And I'm going to do something extra,
and then we'll discuss it.
201

201

00:11:43,810  -->  00:11:48,710
So I'm going to set that to write another
variable out, X again, this time I'm going
202

202

00:11:48,710  -->  00:11:53,910
to leave it on four, but I'm going
to change this to little like so.
203

203

00:11:53,910  -->  00:11:54,840
So first of all, run it.
204

204

00:11:56,840  -->  00:11:59,940
And whoops, I made a typo there,
so that should've been a, b, c.
205

205

00:11:59,940  -->  00:12:02,630
And I'll run it again.
206

206

00:12:02,630  -->  00:12:05,850
[LAUGH] I having a hard
time typing at the moment.
207

207

00:12:05,850  -->  00:12:08,270
little, that's meant to be,
so I will try that again.
208

208

00:12:08,270  -->  00:12:10,350
Third time lucky, run it.
209

209

00:12:10,350  -->  00:12:14,130
And we've got no output, which means that,
well no errors, which is a good start,
210

210

00:12:14,130  -->  00:12:16,430
and we haven't got any
output in our program.
211

211

00:12:16,430  -->  00:12:19,750
So it's surprising that we have
anything showing on the screen.
212

212

00:12:19,750  -->  00:12:22,280
So for these two parameters and
213

213

00:12:22,280  -->  00:12:24,740
it's called bye method the first one
is the number of bytes we want and
214

214

00:12:24,740  -->  00:12:28,150
the second is whether to return the result
as big indian or little indian.
215

215

00:12:28,150  -->  00:12:30,600
Now the number of bytes
is straight forward.
216

216

00:12:30,600  -->  00:12:33,830
Cuz if you remember from the earlier
lecture on binary the largest number
217

217

00:12:33,830  -->  00:12:37,410
we can store in two bytes or
16 bits in other words was 65535.
218

218

00:12:37,410  -->  00:12:41,010
As soon as we get to a higher number
we need to go to more bytes to store
219

219

00:12:41,010  -->  00:12:41,990
those numbers.
220

220

00:12:41,990  -->  00:12:43,220
And it's in this case.
221

221

00:12:43,220  -->  00:12:47,490
Case for c, we need at least 3
bytes to represent that variable.
222

222

00:12:47,490  -->  00:12:51,170
But it's usual when you're writing binary
to use an even number of bytes, and so
223

223

00:12:51,170  -->  00:12:54,320
that's why we've converted
it up to 4 in that case.
224

224

00:12:54,320  -->  00:12:59,200
Now ending this are rows, this is that And
here the second parameter so
225

225

00:12:59,200  -->  00:13:03,100
this indian row where computer
manufacturers had to make a decision
226

226

00:13:03,100  -->  00:13:05,540
about how to store numbers
in their computers memory.
227

227

00:13:05,540  -->  00:13:10,120
So what happens is stores
the most significant byte first
228

228

00:13:10,120  -->  00:13:12,770
with the remaining bytes of
the number following in order,
229

229

00:13:12,770  -->  00:13:15,220
the same way you'd write
it in other words.
230

230

00:13:15,220  -->  00:13:18,070
But little indian is the reverse
of this in other words it shows
231

231

00:13:18,070  -->  00:13:20,950
the least significant
byte being stored first.
232

232

00:13:20,950  -->  00:13:23,560
Now the initial choice
was largely arbitrary.
233

233

00:13:23,560  -->  00:13:27,190
Whilst for example, IBM choosing
big endian for their mainframes.
234

234

00:13:27,190  -->  00:13:28,220
This is years ago.
235

235

00:13:28,220  -->  00:13:32,720
And Intel, Intel CPUs and Intel the
manufacturer are using little endian for
236

236

00:13:32,720  -->  00:13:34,480
their early microprocessors.
237

237

00:13:34,480  -->  00:13:37,040
So once the choice has been made,
it continues to be used and
238

238

00:13:37,040  -->  00:13:38,970
maintain backwards compatibility.
239

239

00:13:38,970  -->  00:13:42,700
Now we've chosen in this example
Beaconed in for all but the last right.
240

240

00:13:42,700  -->  00:13:47,000
And as you can see there by passing
big for the first four calls
241

241

00:13:47,000  -->  00:13:50,580
we used big [INAUDIBLE] and the landing
difference is the fifth one, but
242

242

00:13:50,580  -->  00:13:53,860
we've written a value of x again, and
we've actually used little indian form.
243

243

00:13:53,860  -->  00:13:54,540
Comment for that time.
244

244

00:13:54,540  -->  00:13:57,180
What we're gonna do is have a quick look
at reading the numbers back into our
245

245

00:13:57,180  -->  00:14:01,470
program, before we move on to more
pythonic ways of storing number variable
246

246

00:14:01,470  -->  00:14:02,520
to a binary file.
247

247

00:14:02,520  -->  00:14:03,210
So that's the write.
248

248

00:14:03,210  -->  00:14:06,330
Let's write some code now that's
going to read those values back.
249

249

00:14:06,330  -->  00:14:11,030
So I'm gonna put with open, binary2.
250

250

00:14:11,030  -->  00:14:16,370
We're gonna do a br mode
to read at this time.
251

251

00:14:16,370  -->  00:14:17,890
And we're gonna call it binFile.
252

252

00:14:17,890  -->  00:14:18,730
Let's use a different name.
253

253

00:14:18,730  -->  00:14:19,820
We don't really have to, but I will.
254

254

00:14:19,820  -->  00:14:25,110
And what we'll do is, we'll assign
some new variables, e, f, g, h, i.
255

255

00:14:25,110  -->  00:14:28,280
Five variables for
the five that are now in that file.
256

256

00:14:28,280  -->  00:14:33,710
So we can put e = int dot
from underscore bots and
257

257

00:14:33,710  -->  00:14:36,890
it's the opposite to two underscore bots
from is converting it from the file.
258

258

00:14:36,890  -->  00:14:40,770
We are going to put bin underscore file,
or bin file.
259

259

00:14:40,770  -->  00:14:42,810
Just to show you that we
can't do it that way,
260

260

00:14:42,810  -->  00:14:47,050
we are going to use Use the same
identifier so we'll call that file.
261

261

00:14:47,050  -->  00:14:50,150
Because there isn't a reason now
that we're finished with the first
262

262

00:14:51,500  -->  00:14:52,810
that we can't reuse that.
263

263

00:14:52,810  -->  00:14:56,020
So equals it dot front byte bin file and
264

264

00:14:56,020  -->  00:14:59,970
then you need to pass the number of bytes,
in this case two.
265

265

00:14:59,970  -->  00:15:03,450
Two and then the format whether it's big
or little, we're going to put b like so.
266

266

00:15:03,450  -->  00:15:09,000
So that's creating a variable called and
we'll do the same for F, g, h, i.
267

267

00:15:09,000  -->  00:15:13,980
So it's f, g, h, i.
268

268

00:15:13,980  -->  00:15:19,990
And of course, that represents,
or relates to e is variable a,
269

269

00:15:19,990  -->  00:15:25,910
f is b, g is c, h is x but
with big-endian format,
270

270

00:15:25,910  -->  00:15:30,500
and i is that same variable x
again in little-endian format.
271

271

00:15:30,500  -->  00:15:33,350
So for the last one,
we've purposely left it as big again.
272

272

00:15:33,350  -->  00:15:36,310
So we're reading them all
back in big format again.
273

273

00:15:36,310  -->  00:15:39,070
The other thing I need to do is
change the last three there to make
274

274

00:15:39,070  -->  00:15:43,410
sure we're storing the correct number of,
or reading the correct number of bytes.
275

275

00:15:43,410  -->  00:15:48,050
And relates completely to the number that
we used when we created the binary, So
276

276

00:15:48,050  -->  00:15:51,100
if we run that again now, actually
what I'll obviously need to do first,
277

277

00:15:51,100  -->  00:15:52,980
is preprint it.
278

278

00:15:52,980  -->  00:15:57,070
Print a, you can sort of see the result
and confirm they're actually the same,
279

279

00:15:57,070  -->  00:16:01,230
and we'll just change all those now.
280

280

00:16:01,230  -->  00:16:05,850
So F G H I.
281

281

00:16:05,850  -->  00:16:10,880
So now if we run that And
I missed a method didn't I?
282

282

00:16:10,880  -->  00:16:15,400
I should have put .read because
I specified the name of
283

283

00:16:15,400  -->  00:16:19,290
the file identifier but
I didn't put .read so
284

284

00:16:19,290  -->  00:16:24,920
we need to actually call the method
.read To do the opposite of .write and
285

285

00:16:24,920  -->  00:16:28,300
to read the data from, of course,
the binary file that we've created.
286

286

00:16:31,620  -->  00:16:33,240
Okay, so we have a .read for all of those.
287

287

00:16:34,750  -->  00:16:37,240
Now, try again, run it again.
288

288

00:16:37,240  -->  00:16:38,620
And this time we've got some results.
289

289

00:16:38,620  -->  00:16:42,690
And you can see that the first
four examples that have come back.
290

290

00:16:42,690  -->  00:16:44,090
This is E, F, G and H.
291

291

00:16:44,090  -->  00:16:46,190
You can see they should represent,
292

292

00:16:46,190  -->  00:16:49,310
well they do represent the exact numbers
that we originally saved them in.
293

293

00:16:49,310  -->  00:16:53,390
But the fifth one is what we
want you to have a look at.
294

294

00:16:53,390  -->  00:16:58,960
Notice how that number is now
completely different to the X value or
295

295

00:16:58,960  -->  00:17:00,930
2998302 that's on line 11.
296

296

00:17:00,930  -->  00:17:03,660
And what's happened there is,
I'll just close this down so
297

297

00:17:03,660  -->  00:17:05,030
you can see it a bit easier.
298

298

00:17:05,030  -->  00:17:09,240
We used big format again here, so
we saved it in little Indian format and
299

299

00:17:09,240  -->  00:17:12,050
we tried to read it back
again in big Indian format.
300

300

00:17:12,050  -->  00:17:15,760
So in other words the bytes are in the
reverse order because they were written
301

301

00:17:15,760  -->  00:17:18,690
Initially in little indian
format on line 18 and
302

302

00:17:18,690  -->  00:17:22,280
we're trying to read them back
in big indian format in line 29.
303

303

00:17:22,280  -->  00:17:26,410
This demonstrates that's very
important to understand the structure
304

304

00:17:26,410  -->  00:17:30,710
of the binary data in a file if you're
going to attempt to read it successfully.
305

305

00:17:30,710  -->  00:17:34,400
Now, again it's one making point here
that this is pretty low level stuff
306

306

00:17:34,400  -->  00:17:37,410
They can come out of this knowing that it
is possible, but it's a bit fiddly if all
307

307

00:17:37,410  -->  00:17:40,830
you want to do is store your programs
data and read it back in again.
308

308

00:17:40,830  -->  00:17:41,410
But luckily,
309

309

00:17:41,410  -->  00:17:46,460
with that said Python provides a couple of
other methods with dealing with this data.
310

310

00:17:46,460  -->  00:17:49,830
And to make things easier for
you to do something along these lines.
311

311

00:17:49,830  -->  00:17:51,810
So we'll move on now and
look at pickle and
312

312

00:17:51,810  -->  00:17:55,560
shelf, which are two ways of working
with binary data in the next video
