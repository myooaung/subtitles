WEBVTT
1
1

00:00:05.340  -->  00:00:07.170
In this video, we're going to look at
2

2

00:00:07.170  -->  00:00:09.270
python generators and generator
3

3

00:00:09.270  -->  00:00:11.300
functions. Now because one of the
4

4

00:00:11.300  -->  00:00:13.320
advantages of generators is that they
5

5

00:00:13.320  -->  00:00:15.540
save memory - and actually a lot of memory
6

6

00:00:15.540  -->  00:00:17.250
in many cases - I'm going to start by
7

7

00:00:17.250  -->  00:00:18.750
showing how we can check how much memory
8

8

00:00:18.750  -->  00:00:21.570
things use in Python. So go ahead and
9

9

00:00:21.570  -->  00:00:23.820
create a new project, and I'm going to
10

10

00:00:23.820  -->  00:00:26.970
call mine, after I select the relevant
11

11

00:00:26.970  -->  00:00:30.450
things, I'm going to call it gen
12

12

00:00:30.450  -->  00:00:34.820
example. Let's make sure, in my case, is in
13

13

00:00:34.820  -->  00:00:45.830
the right place, and then I'm going to
14

14

00:00:45.830  -->  00:00:47.690
open a new file, or rather create a new
15

15

00:00:47.690  -->  00:00:57.940
file, and then I'm gonna call this one sizes.py.
16

16

00:00:57.940  -->  00:01:00.320
So let's go ahead and type in some code.
17

17

00:01:00.320  -->  00:01:06.510
We'll start by typing import sys, and on
18

18

00:01:06.510  -->  00:01:09.840
line three big_range is equal
19

19

00:01:09.840  -->  00:01:12.960
to range and a thousand in parentheses.
20

20

00:01:12.960  -->  00:01:16.610
Then line five I'm gonna do a print
21

21

00:01:16.610  -->  00:01:20.940
parentheses double quotes and big
22

22

00:01:20.940  -->  00:01:25.020
underscore range is, left and right curly
23

23

00:01:25.020  -->  00:01:30.780
braces, space, bytes then a dot format. Then
24

24

00:01:30.780  -->  00:01:33.390
within parentheses sys.getsize
25

25

00:01:33.390  -->  00:01:35.910
of, and then we type in big underscore
26

26

00:01:35.910  -->  00:01:37.770
range, cos that's what we want to get the
27

27

00:01:37.770  -->  00:01:41.970
size from. Alright and that's the size
28

28

00:01:41.970  -->  00:01:44.040
before we've actually got some data in
29

29

00:01:44.040  -->  00:01:45.900
it. Now what we're going to do is, on line
30

30

00:01:45.900  -->  00:01:47.730
seven, we're going to create a list
31

31

00:01:47.730  -->  00:01:52.260
containing all the values. So create a
32

32

00:01:52.260  -->  00:01:56.430
list containing all the values and we're
33

33

00:01:56.430  -->  00:01:59.280
going to put in big_range. So
34

34

00:01:59.280  -->  00:02:01.170
I'll start off by initializing, so big 
35

35

00:02:01.170  -->  00:02:03.150
underscore range equals, then left and right
36

36

00:02:03.150  -->  00:02:06.690
square brackets, and I'm going to type in
37

37

00:02:06.690  -->  00:02:10.170
for space val space in big underscore
38

38

00:02:10.170  -->  00:02:13.530
range : and there's going to be big
39

39

00:02:13.530  -->  00:02:17.760
underscore list dot append val, and
40

40

00:02:17.760  -->  00:02:19.020
actually that should have been big
41

41

00:02:19.020  -->  00:02:21.440
underscore list because we're using the
42

42

00:02:21.440  -->  00:02:23.100
range that we've defined on line three,
43

43

00:02:23.100  -->  00:02:25.430
and we're creating this list which is
44

44

00:02:25.430  -->  00:02:27.600
containing all those values in that
45

45

00:02:27.600  -->  00:02:32.660
range, like so. And the last thing we'll
46

46

00:02:32.660  -->  00:02:35.130
do is, let's just print out the size of
47

47

00:02:35.130  -->  00:02:38.070
the list. So we'll do a print parentheses
48

48

00:02:38.070  -->  00:02:40.320
double quote, double quotes rather,
49

49

00:02:40.320  -->  00:02:43.590
big_list is, then left and right
50

50

00:02:43.590  -->  00:02:48.770
curly braces, then bytes then dot format.
51

51

00:02:48.770  -->  00:02:52.040
And this time we're going to sys dot getsizeof,
52

52

00:02:52.040  -->  00:02:54.290
and unsurprisingly big underscore
53

53

00:02:54.290  -->  00:02:58.460
list this time. So there's our program. So
54

54

00:02:58.460  -->  00:03:00.570
the code itself creates two
55

55

00:03:00.570  -->  00:03:02.460
objects. We've got big underscore
56

56

00:03:02.460  -->  00:03:04.650
range, and that's a range that returns the
57

57

00:03:04.650  -->  00:03:07.190
numbers from 0 to 999, and it's not
58

58

00:03:07.190  -->  00:03:09.020
really that big a range but it'll do for
59

59

00:03:09.020  -->  00:03:10.550
our purposes here, to demonstrate the
60

60

00:03:10.550  -->  00:03:12.570
memory usage. You can make it bigger if
61

61

00:03:12.570  -->  00:03:14.240
you want, but wait until we run this
62

62

00:03:14.240  -->  00:03:15.930
program before using a larger number.
63

63

00:03:15.930  -->  00:03:17.900
Now big_list, on the other
64

64

00:03:17.900  -->  00:03:19.820
hand, that object that is created by
65

65

00:03:19.820  -->  00:03:21.990
pending all the values from the big
66

66

00:03:21.990  -->  00:03:24.240
underscore range into a list, and you can
67

67

00:03:24.240  -->  00:03:25.940
see the list being initialized on line 8.
68

68

00:03:25.940  -->  00:03:28.160
Then we're then using the get sizeof
69

69

00:03:28.160  -->  00:03:30.710
function, in both cases from the
70

70

00:03:30.710  -->  00:03:32.930
sys module, to see how much memory each
71

71

00:03:32.930  -->  00:03:36.070
object uses. So if we actually run this,
72

72

00:03:36.070  -->  00:03:39.930
we should find that they occupy 48
73

73

00:03:39.930  -->  00:03:42.680
bytes. The range itself, as you
74

74

00:03:42.680  -->  00:03:46.350
can see, occupies 48 bytes and the big
75

75

00:03:46.350  -->  00:03:47.630
underscore list, though, you can see
76

76

00:03:47.630  -->  00:03:50.310
that's taking up nearly 9 kilobytes,
77

77

00:03:50.310  -->  00:03:53.180
9k to store exactly the same values.
78

78

00:03:53.180  -->  00:03:58.590
So I'll just move this down so I can get
79

79

00:03:58.590  -->  00:04:00.710
a better view down the bottom there. If
80

80

00:04:00.710  -->  00:04:02.660
we go ahead and change and add an extra
81

81

00:04:02.660  -->  00:04:05.780
0 to the range, up here on line 3, and
82

82

00:04:05.780  -->  00:04:10.880
then run it again, you can see in this
83

83

00:04:10.880  -->  00:04:14.030
case, the range itself is still only 48
84

84

00:04:14.030  -->  00:04:17.150
bytes but the list now is around 87K.
85

85

00:04:17.150  -->  00:04:18.930
Hopefully there, you can see why I
86

86

00:04:18.930  -->  00:04:20.840
suggested you wait before changing the
87

87

00:04:20.840  -->  00:04:23.580
actual numbers and values in the range. If
88

88

00:04:23.580  -->  00:04:25.020
you make it too big you could eat up all
89

89

00:04:25.020  -->  00:04:27.600
your computer's memory. Now I should
90

90

00:04:27.600  -->  00:04:28.950
mention, at this point, that this isn't a
91

91

00:04:28.950  -->  00:04:32.290
very pythonic way of doing this, and you'd
92

92

00:04:32.290  -->  00:04:34.870
probably use the list function itself to
93

93

00:04:34.870  -->  00:04:37.360
convert the range to a list, but I wanted
94

94

00:04:37.360  -->  00:04:39.340
it to be obvious what we're doing, which
95

95

00:04:39.340  -->  00:04:40.780
is why this code loops through the
96

96

00:04:40.780  -->  00:04:42.640
values in the range and appends each one
97

97

00:04:42.640  -->  00:04:44.830
to the list. So what's actually going on
98

98

00:04:44.830  -->  00:04:46.750
here and how is there such a big difference
99

99

00:04:46.750  -->  00:04:49.360
in the memory that the two objects are
100

100

00:04:49.360  -->  00:04:51.280
usingm which actually store exactly
101

101

00:04:51.280  -->  00:04:54.070
the same set of numbers. Well both big
102

102

00:04:54.070  -->  00:04:56.020
underscore range and big underscore list
103

103

00:04:56.020  -->  00:04:58.210
are actually iterators, so we can use
104

104

00:04:58.210  -->  00:05:00.100
either in a for loop to iterate over all
105

105

00:05:00.100  -->  00:05:03.040
the values. Now big_range is a
106

106

00:05:03.040  -->  00:05:05.260
special case of an iterator called a
107

107

00:05:05.260  -->  00:05:07.570
generator, and in fact, we can run our own
108

108

00:05:07.570  -->  00:05:09.760
version of big_range. So
109

109

00:05:09.760  -->  00:05:10.750
I'm going to go ahead and do that
110

110

00:05:10.750  -->  00:05:12.580
and I'm going to call it my underscore
111

111

00:05:12.580  -->  00:05:15.100
range. I'm going to go ahead up here
112

112

00:05:15.100  -->  00:05:18.090
and start typing this code on line four.
113

113

00:05:18.090  -->  00:05:22.210
So I'm going to define a function, so def
114

114

00:05:22.210  -->  00:05:25.240
my underscore range, and in parentheses n
115

115

00:05:25.240  -->  00:05:30.820
colon and then int, colon on the end. Then we
116

116

00:05:30.820  -->  00:05:35.500
can have start equals zero while start
117

117

00:05:35.500  -->  00:05:39.520
is less than n colon, then we're going
118

118

00:05:39.520  -->  00:05:41.590
to do yield - type in the word yield - space
119

119

00:05:41.590  -->  00:05:47.790
start, then start space plus equals 1.
120

120

00:05:47.790  -->  00:05:49.810
Then what we're going to do then is, we're
121

121

00:05:49.810  -->  00:05:51.280
going to comment out this next line, this
122

122

00:05:51.280  -->  00:05:54.460
big_range that was hard coded,
123

123

00:05:54.460  -->  00:05:55.990
and we're going to change that to big
124

124

00:05:55.990  -->  00:05:58.420
underscore range is equal to my
125

125

00:05:58.420  -->  00:06:01.720
underscore range, and we're going to use
126

126

00:06:01.720  -->  00:06:03.430
the same number ten thousand. So we're
127

127

00:06:03.430  -->  00:06:04.840
going to call the function that we've
128

128

00:06:04.840  -->  00:06:10.720
created. So let's go ahead now and run
129

129

00:06:10.720  -->  00:06:12.600
the program again, noting the previous
130

130

00:06:12.600  -->  00:06:18.490
values that we had down here, and you can
131

131

00:06:18.490  -->  00:06:20.080
see in this case big underscore range
132

132

00:06:20.080  -->  00:06:23.080
is now 88 bytes, and it may be 72
133

133

00:06:23.080  -->  00:06:25.330
bytes - or it's actually between 72
134

134

00:06:25.330  -->  00:06:27.160
to 88 bytes, depending on the
135

135

00:06:27.160  -->  00:06:29.530
Python implementation. Point is, though,
136

136

00:06:29.530  -->  00:06:31.480
it's different to 48 but it's still a
137

137

00:06:31.480  -->  00:06:34.660
vast improvement over 8k, and that's
138

138

00:06:34.660  -->  00:06:35.860
because, in this case of course, we've
139

139

00:06:35.860  -->  00:06:37.420
written our own range instead of using
140

140

00:06:37.420  -->  00:06:39.370
the built-in one. Alright, so I think I've
141

141

00:06:39.370  -->  00:06:40.600
made the point about the memory
142

142

00:06:40.600  -->  00:06:42.520
requirements, so I'm going to reduce the
143

143

00:06:42.520  -->  00:06:44.620
range to just 5, otherwise I'm going to
144

144

00:06:44.620  -->  00:06:45.850
spend most of the time scrolling
145

145

00:06:45.850  -->  00:06:47.380
through thousands of lines of output
146

146

00:06:47.380  -->  00:06:48.820
that we're going to add. So I'm going to
147

147

00:06:48.820  -->  00:06:50.080
go back here and just change the range
148

148

00:06:50.080  -->  00:06:54.160
to 5 for now, and let's also now go
149

149

00:06:54.160  -->  00:06:56.830
ahead and actually print out the two
150

150

00:06:56.830  -->  00:06:59.020
objects at the end of the program. So
151

151

00:06:59.020  -->  00:07:01.060
we've got the get sizeof function call,
152

152

00:07:01.060  -->  00:07:01.990
which we're going to leave in there.
153

153

00:07:01.990  -->  00:07:03.700
We're going to print this out as well, so
154

154

00:07:03.700  -->  00:07:07.830
we'll do a print big_range
155

155

00:07:07.830  -->  00:07:14.080
and print big_list, and just to be
156

156

00:07:14.080  -->  00:07:15.760
consistent let's also change this commented
157

157

00:07:15.760  -->  00:07:18.700
out range to five as well. Alright,
158

158

00:07:18.700  -->  00:07:22.480
run it again. So big_range,
159

159

00:07:22.480  -->  00:07:24.280
in this case, is 88 bytes,
160

160

00:07:24.280  -->  00:07:26.020
bearing in mind it may be different on
161

161

00:07:26.020  -->  00:07:28.000
your operating system - you might get a
162

162

00:07:28.000  -->  00:07:30.640
number between 72 and 88. The point is,
163

163

00:07:30.640  -->  00:07:32.470
it's the same as it was when I ran it last
164

164

00:07:32.470  -->  00:07:34.690
time, and unsurprisingly, big 
165

165

00:07:34.690  -->  00:07:36.400
underscore list is a lot smaller now because
166

166

00:07:36.400  -->  00:07:39.010
it's storing fewer values. And looking at the
167

167

00:07:39.010  -->  00:07:41.650
two lines of output that we've generated
168

168

00:07:41.650  -->  00:07:44.380
here, down the bottom, big underscore
169

169

00:07:44.380  -->  00:07:46.540
range is a generator object based on the
170

170

00:07:46.540  -->  00:07:48.250
my underscore range function that we
171

171

00:07:48.250  -->  00:07:50.320
wrote. A big underscore list though, as
172

172

00:07:50.320  -->  00:07:53.200
you can see, is just a list and contains
173

173

00:07:53.200  -->  00:07:54.820
the values we'd expect from a range of
174

174

00:07:54.820  -->  00:07:58.140
five. So what's the my_range
175

175

00:07:58.140  -->  00:08:01.210
function doing and what's this yield
176

176

00:08:01.210  -->  00:08:02.920
statement that we worked on on line
177

177

00:08:02.920  -->  00:08:04.330
seven? What's that actually doing? What's
178

178

00:08:04.330  -->  00:08:05.140
that all about?
179

179

00:08:05.140  -->  00:08:07.930
Well when you write a normal function,
180

180

00:08:07.930  -->  00:08:10.360
the function finishes after returning
181

181

00:08:10.360  -->  00:08:12.880
a result. You can see that if we change
182

182

00:08:12.880  -->  00:08:17.290
this yield and change that keyword to
183

183

00:08:17.290  -->  00:08:19.930
return, and we get this warning here
184

184

00:08:19.930  -->  00:08:20.970
that the code is unreachable,
185

185

00:08:20.970  -->  00:08:22.870
unsurprisingly, because return is
186

186

00:08:22.870  -->  00:08:25.600
actually returning the execution back
187

187

00:08:25.600  -->  00:08:28.810
to the calling code. Now if we go ahead
188

188

00:08:28.810  -->  00:08:30.310
and actually run that because that was
189

189

00:08:30.310  -->  00:08:33.100
just a warning, we end up with an error -
190

190

00:08:33.100  -->  00:08:35.710
the type error down the bottom there - int
191

191

00:08:35.710  -->  00:08:38.410
object is not iterable. That's because we
192

192

00:08:38.410  -->  00:08:40.900
can't iterate over an int. The point is
193

193

00:08:40.900  -->  00:08:43.600
that the my_range now returns a
194

194

00:08:43.600  -->  00:08:46.570
single value then stops, as opposed to
195

195

00:08:46.570  -->  00:08:48.430
what it was returning before. The other
196

196

00:08:48.430  -->  00:08:49.780
thing to note though down here, you can
197

197

00:08:49.780  -->  00:08:50.950
see in the output, the big underscore
198

198

00:08:50.950  -->  00:08:53.440
range now is only 24 bytes, noting
199

199

00:08:53.440  -->  00:08:54.940
that the last few times I ran it it was
200

200

00:08:54.940  -->  00:08:57.220
88, and might have been a number between
201

201

00:08:57.220  -->  00:08:59.220
72 and 88 in your operating system.
202

202

00:08:59.220  -->  00:09:01.530
The point is it's a different value to
203

203

00:09:01.530  -->  00:09:03.070
what it was when it was previously ran.
204

204

00:09:03.070  -->  00:09:06.010
So as well as that change in behavior to just
205

205

00:09:06.010  -->  00:09:07.860
return one value then stop, there's
206

206

00:09:07.860  -->  00:09:09.900
something going on with the structure of
207

207

00:09:09.900  -->  00:09:12.780
the my_range object as well. now
208

208

00:09:12.780  -->  00:09:15.030
when it's a generator and uses yield, it
209

209

00:09:15.030  -->  00:09:17.500
actually takes up a bit more memory. So if
210

210

00:09:17.500  -->  00:09:19.980
we change line 7 again, back to what it
211

211

00:09:19.980  -->  00:09:23.560
was, to yield, of course that warning goes
212

212

00:09:23.560  -->  00:09:26.100
away. The difference is that when we
213

213

00:09:26.100  -->  00:09:28.410
use yield, the function actually returns
214

214

00:09:28.410  -->  00:09:31.230
the yielded value, then goes into a sort
215

215

00:09:31.230  -->  00:09:34.140
of suspended state. So it doesn't just
216

216

00:09:34.140  -->  00:09:37.200
return the value - it keeps track of all
217

217

00:09:37.200  -->  00:09:39.130
its variables and whereabouts in its
218

218

00:09:39.130  -->  00:09:41.950
code, it is. So the next time it's called,
219

219

00:09:41.950  -->  00:09:44.560
it wakes up and continues from where it
220

220

00:09:44.560  -->  00:09:47.580
left off. So looking at this code on line
221

221

00:09:47.580  -->  00:09:50.200
12, the function call,
222

222

00:09:50.200  -->  00:09:51.700
you might be thinking it only gets
223

223

00:09:51.700  -->  00:09:54.510
called once, but in fact it's called each
224

224

00:09:54.510  -->  00:09:57.330
time it's iterated over in the loop on
225

225

00:09:57.330  -->  00:10:00.360
line 18, down here. And we can see that
226

226

00:10:00.360  -->  00:10:02.280
better by adding some diagnostic print
227

227

00:10:02.280  -->  00:10:03.710
statements, so let's go ahead and do that.
228

228

00:10:03.710  -->  00:10:06.250
So come up here to the my_range
229

229

00:10:06.250  -->  00:10:10.260
function. Let's add some code to print
230

230

00:10:10.260  -->  00:10:13.080
out. So print parentheses double quote
231

231

00:10:13.080  -->  00:10:18.700
my_range starts, and we'll
232

232

00:10:18.700  -->  00:10:21.030
also put one in the while statement, after
233

233

00:10:21.030  -->  00:10:22.830
the while start less than n
234

234

00:10:22.830  -->  00:10:24.270
statement, or line.
235

235

00:10:24.270  -->  00:10:26.440
Then we'll do print parentheses double
236

236

00:10:26.440  -->  00:10:30.000
quotes my_range is returning,
237

237

00:10:30.000  -->  00:10:33.940
then left and right curly braces, dot
238

238

00:10:33.940  -->  00:10:38.460
format then start. And if we actually
239

239

00:10:38.460  -->  00:10:41.250
run this and have a look at the output,
240

240

00:10:41.250  -->  00:10:43.770
you can actually see that, in that case,
241

241

00:10:43.770  -->  00:10:45.600
my_range starts then we're
242

242

00:10:45.600  -->  00:10:48.070
getting a value 0 1 2 3 4. So clearly, it's
243

243

00:10:48.070  -->  00:10:51.600
been called five times. Now it doesn't
244

244

00:10:51.600  -->  00:10:53.700
quite show the full story, though. Now I
245

245

00:10:53.700  -->  00:10:56.040
said you might think that my underscore
246

246

00:10:56.040  -->  00:10:58.320
range is only called once, on what was
247

247

00:10:58.320  -->  00:11:00.450
line 12, but is now line 14,
248

248

00:11:00.450  -->  00:11:02.640
but it's not actually called on that
249

249

00:11:02.640  -->  00:11:05.400
line. So to see what's really going on a
250

250

00:11:05.400  -->  00:11:08.220
bit better, we can pause the program by
251

251

00:11:08.220  -->  00:11:09.900
getting it to wait for input at various
252

252

00:11:09.900  -->  00:11:11.950
points. So let's go ahead and do that and
253

253

00:11:11.950  -->  00:11:12.940
that should
254

254

00:11:12.940  -->  00:11:14.860
make things a little bit clearer. So I'm going
255

255

00:11:14.860  -->  00:11:17.440
to go back up here onto line 12, and I'm
256

256

00:11:17.440  -->  00:11:23.700
going to put underscore equals input and
257

257

00:11:23.700  -->  00:11:25.810
parentheses and then double quotes, line
258

258

00:11:25.810  -->  00:11:29.520
12. Then I'm going to come down to line 15.
259

259

00:11:29.520  -->  00:11:32.680
Let's take a copy of that line 12, paste
260

260

00:11:32.680  -->  00:11:34.420
it in to line 15 but then we'll change
261

261

00:11:34.420  -->  00:11:38.770
the reference to line 15, and make sure
262

262

00:11:38.770  -->  00:11:40.800
that we've deleted the extra line there.
263

263

00:11:40.800  -->  00:11:43.840
Let's also add a third one. We'll come
264

264

00:11:43.840  -->  00:11:46.020
down here after the big_list.
265

265

00:11:46.020  -->  00:11:51.160
Let's go ahead and do that for line 22 - so
266

266

00:11:51.160  -->  00:11:54.610
line 22. Then lastly, within the for loop
267

267

00:11:54.610  -->  00:11:56.470
itself, let's actually put one in there.
268

268

00:11:56.470  -->  00:11:59.470
So that's going to be line 24. So I'm
269

269

00:11:59.470  -->  00:12:04.300
going to make that line 24 and just
270

270

00:12:04.300  -->  00:12:05.080
to be clear,
271

271

00:12:05.080  -->  00:12:08.880
we'll add some extra text inside loop.
272

272

00:12:08.880  -->  00:12:12.010
Okay. So we're using an underscore, by the
273

273

00:12:12.010  -->  00:12:16.750
way, on lines 12, 15, 22 and 24. That's our
274

274

00:12:16.750  -->  00:12:18.880
using that as a variable name in here
275

275

00:12:18.880  -->  00:12:20.770
because that's a Python convention, and
276

276

00:12:20.770  -->  00:12:22.390
indicates that we're not interested in
277

277

00:12:22.390  -->  00:12:24.760
the value of the variable. What we're
278

278

00:12:24.760  -->  00:12:26.020
doing is, we're just using those input
279

279

00:12:26.020  -->  00:12:27.610
statements to get the program to wait
280

280

00:12:27.610  -->  00:12:30.040
until we press ENTER. Now if you're also
281

281

00:12:30.040  -->  00:12:32.410
programming in Java, don't use a single
282

282

00:12:32.410  -->  00:12:34.600
underscore as a variable name in Java,
283

283

00:12:34.600  -->  00:12:36.730
and stop doing it if you currently are.
284

284

00:12:36.730  -->  00:12:39.070
Now it's valid in Java 8, but it's
285

285

00:12:39.070  -->  00:12:41.530
being removed in Java 9. Now it's
286

286

00:12:41.530  -->  00:12:43.420
an accepted convention in Python but
287

287

00:12:43.420  -->  00:12:44.950
doesn't translate well to 
288

288

00:12:44.950  -->  00:12:47.140
practically all other languages. Alright,
289

289

00:12:47.140  -->  00:12:49.120
so now that we've added those input
290

290

00:12:49.120  -->  00:12:51.130
lines, let's actually run the program to
291

291

00:12:51.130  -->  00:12:56.020
see how it behaves now. Okay, so 
292

292

00:12:56.020  -->  00:12:58.330
down here we've got, waiting on
293

293

00:12:58.330  -->  00:13:00.100
line 12, and you can see there's no
294

294

00:13:00.100  -->  00:13:02.380
output at this point - just waiting until
295

295

00:13:02.380  -->  00:13:03.790
enter is pressed. So when I press
296

296

00:13:03.790  -->  00:13:06.790
ENTER, it's come back and said it's
297

297

00:13:06.790  -->  00:13:08.290
stopped, or it's actually stopped again on
298

298

00:13:08.290  -->  00:13:11.410
line 15. So the big range equals my
299

299

00:13:11.410  -->  00:13:13.930
underscore range, here on line 14. Well
300

300

00:13:13.930  -->  00:13:16.270
that's already been executed, but notice
301

301

00:13:16.270  -->  00:13:18.100
that nothing else is printed at this
302

302

00:13:18.100  -->  00:13:20.530
stage - just the input prompt. So in other
303

303

00:13:20.530  -->  00:13:23.110
words, my_range, the function, hasn't
304

304

00:13:23.110  -->  00:13:25.060
been executed at this point. Now you
305

305

00:13:25.060  -->  00:13:26.440
wouldn't normally include this line in
306

306

00:13:26.440  -->  00:13:28.840
code - you'd just use my_range
307

307

00:13:28.840  -->  00:13:31.450
five in the four loop. In other words,
308

308

00:13:31.450  -->  00:13:32.790
this is sort of an extra line there - you
309

309

00:13:32.790  -->  00:13:34.410
just go straight down to here, and you
310

310

00:13:34.410  -->  00:13:36.820
put my_range there on line 23
311

311

00:13:36.820  -->  00:13:40.110
direct in the for loop itself. We've got
312

312

00:13:40.110  -->  00:13:41.850
it here so you can check the size of the
313

313

00:13:41.850  -->  00:13:43.960
object but it's really not necessary, and,
314

314

00:13:43.960  -->  00:13:46.810
in fact, it can even be a bad idea and
315

315

00:13:46.810  -->  00:13:49.090
I'm going to show you why shortly. Now if
316

316

00:13:49.090  -->  00:13:50.910
I just continue on though, back in the
317

317

00:13:50.910  -->  00:13:54.460
run window. If I press ENTER again, you
318

318

00:13:54.460  -->  00:13:56.650
can see it stopped on line 22 just
319

319

00:13:56.650  -->  00:13:58.590
before the for loop starts. But now it
320

320

00:13:58.590  -->  00:14:00.580
gets interesting. We press ENTER again
321

321

00:14:00.580  -->  00:14:04.590
and we've entered the for loop. Now you
322

322

00:14:04.590  -->  00:14:06.010
can see that this was the first time,
323

323

00:14:06.010  -->  00:14:08.770
looking at the output, that my underscore
324

324

00:14:08.770  -->  00:14:11.220
range gets called, when the first value
325

325

00:14:11.220  -->  00:14:13.450
is actually needed. So we get the message,
326

326

00:14:13.450  -->  00:14:15.780
my underscore range starts, which of
327

327

00:14:15.780  -->  00:14:17.280
course we put up at the start of the function,
328

328

00:14:17.280  -->  00:14:19.630
and the first value, in this case zero,
329

329

00:14:19.630  -->  00:14:22.260
is returned. Now pressing enter again, and
330

330

00:14:22.260  -->  00:14:24.970
the next value is returned and notice
331

331

00:14:24.970  -->  00:14:26.340
that my underscore range doesn't start
332

332

00:14:26.340  -->  00:14:28.720
again at the beginning. It's continuing
333

333

00:14:28.720  -->  00:14:31.570
from line eight, and you can see line 8 on
334

334

00:14:31.570  -->  00:14:33.190
the screen there. So we don't get the
335

335

00:14:33.190  -->  00:14:35.320
start message printed again. Now each
336

336

00:14:35.320  -->  00:14:37.230
time I press ENTER, the next value is
337

337

00:14:37.230  -->  00:14:39.600
returned until the generator runs out of
338

338

00:14:39.600  -->  00:14:41.610
values to return and the loop exits. And
339

339

00:14:41.610  -->  00:14:44.950
I'll just go ahead and do that, and you
340

340

00:14:44.950  -->  00:14:47.260
can see our program is now all closed. So
341

341

00:14:47.260  -->  00:14:49.000
the loop went around five times, so the
342

342

00:14:49.000  -->  00:14:52.210
line 24 inside loop prompt was displayed
343

343

00:14:52.210  -->  00:14:54.760
five times. Alright, so let's end the
344

344

00:14:54.760  -->  00:14:56.910
video here. In the next video, we'll go
345

345

00:14:56.910  -->  00:14:58.650
ahead and start talking more about this
346

346

00:14:58.650  -->  00:15:01.590
generator, and add some extra code to
347

347

00:15:01.590  -->  00:15:03.270
this method to clear things up. So I'll
348

348

00:15:03.270  -->  00:15:06.590
see you in the next video.
