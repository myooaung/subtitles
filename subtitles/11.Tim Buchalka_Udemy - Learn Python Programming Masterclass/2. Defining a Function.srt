1
00:00:05,410 --> 00:00:10,220
Así que he creado un nuevo proyecto en inteligencia para esta sección, como lo he estado haciendo para cada sección

2
00:00:10,220 --> 00:00:10,820
del curso.

3
00:00:11,150 --> 00:00:13,250
Por supuesto, este, como se puede decir, funciona.

4
00:00:13,310 --> 00:00:15,530
Y como decía tu introducción, comienza.

5
00:00:15,590 --> 00:00:17,480
Necesitamos hacer parte y presentar nuestro código.

6
00:00:18,050 --> 00:00:19,490
Van a combinar funciones.

7
00:00:27,760 --> 00:00:31,120
Bien, ya hemos usado algunas funciones en el curso en este video.

8
00:00:31,140 --> 00:00:32,340
Comenzaremos a escribir el nuestro.

9
00:00:33,270 --> 00:00:39,180
Una vez que haya visto un par de ejemplos, he discutido la definición formal de una función, una definición de función

10
00:00:39,180 --> 00:00:41,540
de Python comienza con una palabra clave death.

11
00:00:41,990 --> 00:00:43,470
Voy a llamar a este multiplicar.

12
00:00:43,720 --> 00:00:46,740
Así que voy a hablar sobre el espacio de la muerte, multiplicar.

13
00:00:48,580 --> 00:00:51,800
Así que vamos a levantar sus paréntesis y agregar una columna.

14
00:00:52,890 --> 00:00:58,350
Los nombres de funciones siguen las mismas reglas que los nombres de variables, están escritos en minúsculas y deben comenzar con

15
00:00:58,410 --> 00:00:59,100
un dígito.

16
00:00:59,550 --> 00:01:05,220
Puede usar un guión bajo para separar las palabras en el nombre, tal como lo hicimos para nuestras variables después del nombre de

17
00:01:05,220 --> 00:01:05,940
la función.

18
00:01:06,060 --> 00:01:08,160
Tenemos paréntesis de apertura y cierre.

19
00:01:08,940 --> 00:01:10,170
Finalmente, terminamos con una columna.

20
00:01:10,890 --> 00:01:12,630
Una función inicia un nuevo bloque de código.

21
00:01:13,040 --> 00:01:16,470
En una declaración, el nuevo bloque inicial siempre termina con dos puntos.

22
00:01:17,280 --> 00:01:20,580
Dentro de la función, escribimos el código que queremos que se ejecute.

23
00:01:20,850 --> 00:01:24,180
Cuando se llama a la función, mantendré esta simple para empezar.

24
00:01:24,240 --> 00:01:26,460
Simplemente multiplicamos dos números.

25
00:01:27,980 --> 00:01:33,920
El resultado es igual a diez punto cinco, multiplicado por cuatro por ciento.

26
00:01:34,030 --> 00:01:36,710
Y luego voy a volver al resultado superior.

27
00:01:38,160 --> 00:01:39,390
Entonces la línea dos es simple.

28
00:01:39,690 --> 00:01:44,310
Simplemente vincula el resultado variable al resultado de multiplicar los dos números.

29
00:01:44,770 --> 00:01:47,910
Ahora multiplica la función multiplicado diez punto cinco por cuatro.

30
00:01:48,360 --> 00:01:52,140
No, eso no es muy útil si la función no nos permite saber cuál es la respuesta.

31
00:01:52,500 --> 00:01:55,300
Para que podamos averiguar qué valor calculó nuestra función.

32
00:01:55,620 --> 00:01:57,840
Le decimos a la función que devuelva el resultado.

33
00:01:58,110 --> 00:02:00,840
Esa es la declaración de devolución en la línea tres.

34
00:02:01,920 --> 00:02:05,910
Probablemente tenga algunas preguntas en este momento, pero no se preocupe, recién estamos comenzando y cubriremos más

35
00:02:05,920 --> 00:02:07,410
sobre funciones en un momento.

36
00:02:08,010 --> 00:02:10,320
Primero, sin embargo, digamos cómo usar la función.

37
00:02:10,940 --> 00:02:14,730
Ya sabes cómo hacerlo porque ya hemos usado bastantes funciones en el curso.

38
00:02:15,360 --> 00:02:18,780
La única diferencia es que esta vez escribimos la función nosotros mismos.

39
00:02:19,440 --> 00:02:23,010
Entonces voy a presionar, entro varias veces, bajo a la línea seis, voy a escribir.

40
00:02:23,070 --> 00:02:26,190
La respuesta es igual a multiplicar.

41
00:02:27,400 --> 00:02:30,590
Esa inteligencia nos ayuda automáticamente al darnos ese presentador allí.

42
00:02:31,690 --> 00:02:34,860
La siguiente línea se imprimirá y en paréntesis contestará.

43
00:02:36,710 --> 00:02:39,210
Entonces nueve, seis, estoy llamando a la función de multiplicación.

44
00:02:39,600 --> 00:02:44,700
No tiene ningún argumento, pero aún necesitamos incluir los paréntesis, como lo he hecho porque

45
00:02:44,700 --> 00:02:46,080
nuestra función devuelve valor.

46
00:02:46,370 --> 00:02:49,620
Podemos señalar una respuesta variable al valor de retorno.

47
00:02:50,280 --> 00:02:53,430
Y al hacer eso, eso nos permite imprimir en la línea siete.

48
00:02:54,430 --> 00:02:55,350
Estás en el programa ahora.

49
00:02:58,600 --> 00:03:00,340
Y podemos ver que la respuesta es 42.

50
00:03:00,670 --> 00:03:02,800
Bueno, en realidad cuarenta y dos puntos cero, para ser precisos.

51
00:03:03,130 --> 00:03:04,750
Lo multiplicamos por flotador.

52
00:03:05,110 --> 00:03:06,520
Entonces el resultado es un flotador.

53
00:03:07,460 --> 00:03:13,130
Entonces, esa es una función muy simple y realmente no está haciendo nada útil, la cambiará pronto para que lo

54
00:03:13,130 --> 00:03:13,610
haga.

55
00:03:13,610 --> 00:03:15,080
De hecho, hay algo más útil.

56
00:03:15,500 --> 00:03:19,430
Sin embargo, antes de hacer eso, examinemos la estructura de nuestra función.

57
00:03:20,330 --> 00:03:22,420
Comienza con la palabra clave python muerte.

58
00:03:22,770 --> 00:03:24,260
Def es la abreviatura de definir.

59
00:03:24,950 --> 00:03:27,480
Eso es seguido por el nombre de la función multiplicar.

60
00:03:27,560 --> 00:03:32,330
En este caso, todas las definiciones de función tienen paréntesis después del nombre de la función.

61
00:03:32,890 --> 00:03:35,660
También puede definir parámetros en forma de paréntesis.

62
00:03:35,900 --> 00:03:39,770
Pero en este momento nuestra función no tiene ningún parámetro de función.

63
00:03:39,770 --> 00:03:44,270
La definición comienza un nuevo bloque, lo que significa que tenemos que sangrar el cuerpo de la función.

64
00:03:45,260 --> 00:03:49,070
Las líneas dos y tres tienen la intención de un nivel, lo que las hace parte de la función.

65
00:03:49,620 --> 00:03:53,800
Ningún senador en la definición de función termina con dos puntos al final de la línea uno.

66
00:03:54,880 --> 00:03:57,860
Ahora, la función de multiplicación está realizando un cálculo.

67
00:03:58,490 --> 00:04:02,430
Devolvemos la respuesta al código de llamada usando la palabra clave return.

68
00:04:02,810 --> 00:04:03,860
Eso está en la línea de tres.

69
00:04:04,400 --> 00:04:07,520
La convención es tener que colocar líneas después de una función.

70
00:04:08,230 --> 00:04:11,450
Eso también se menciona en la guía de estilo de Python.

71
00:04:11,900 --> 00:04:14,450
Y es por eso que nuestro código principal comienza en la línea seis.

72
00:04:14,750 --> 00:04:17,810
Para que dos líneas de tablones lo separen de la función.

73
00:04:19,000 --> 00:04:23,290
Hace que su código sea mucho más fácil de leer, especialmente cuando comienza a tener varias funciones.

74
00:04:23,710 --> 00:04:27,700
Asegúrese de salir a jugar líneas antes y después de sus funciones.

75
00:04:28,810 --> 00:04:32,740
Nuestro código principal llama a funcionar en la línea seis para llamar a una función.

76
00:04:33,050 --> 00:04:36,100
Simplemente usa su nombre con cualquier argumento entre paréntesis.

77
00:04:36,310 --> 00:04:38,200
Dijiste que muchas funciones se llaman hasta ahora

78
00:04:38,230 --> 00:04:41,620
Entonces eso no es nada nuevo porque nuestra función devuelve un valor.

79
00:04:41,980 --> 00:04:46,780
Vinculamos una respuesta variable al valor que devuelve la función.

80
00:04:47,970 --> 00:04:53,940
Si se pregunta por qué no podemos usar el resultado variable de la línea para hablar de eso

81
00:04:53,940 --> 00:04:54,300
mismo.

82
00:04:54,360 --> 00:04:58,230
Sigue observando porque todavía hay algunas cosas más que necesitamos saber sobre las funciones.

83
00:04:59,050 --> 00:04:59,260
Todo bien.

84
00:04:59,290 --> 00:05:02,040
Esa es la estructura básica de una función de Python.

85
00:05:02,760 --> 00:05:05,200
Digamos algo de eso en las diapositivas antes de que termine el video.

86
00:05:07,130 --> 00:05:10,290
Entonces podría decir que la definición de la función comienza con una palabra clave def.

87
00:05:11,580 --> 00:05:13,230
A continuación, tenemos el nombre de la función.

88
00:05:14,590 --> 00:05:17,830
Si la función tomará parámetros, se declaran entre paréntesis.

89
00:05:18,340 --> 00:05:22,750
Y tenga en cuenta que los paréntesis son obligatorios incluso cuando no hay parámetros.

90
00:05:23,390 --> 00:05:23,640
Todo bien.

91
00:05:23,650 --> 00:05:28,450
Entonces, en el siguiente video, veremos qué sucede cuando nuestro código llama a una función que pasará por el código

92
00:05:28,450 --> 00:05:32,650
en el depurador para ver cómo una llamada a la función altera el flujo de ejecución.

93
00:05:33,160 --> 00:05:34,270
Nos vemos en el próximo video.
