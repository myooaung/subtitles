1

00:00:04,160  -->  00:00:07,550
In this video I'm going to show you how
to perform case-insensitive

2

00:00:07,550  -->  00:00:12,740
sorting. There's only one extra argument
we need to add to the sort method, or the

3

00:00:12,740  -->  00:00:17,119
sorted function. It involves using a
keyword argument and I won't be

4

00:00:17,119  -->  00:00:21,529
explaining how they work until later, but
it's a useful thing to know about now.

5

00:00:21,529  -->  00:00:24,710
So I don't want you to worry about
understanding how this works - just

6

00:00:24,710  -->  00:00:29,640
use it if you need to sort some text,
without worrying about capitalisation.

7

00:00:29,640  -->  00:00:32,980
So let's start by seeing the problem. So I'm
going to continue with sorting.py

8

00:00:32,989  -->  00:00:36,410
from the previous video, and I
better start by fixing the error that I

9

00:00:36,410  -->  00:00:40,970
caused in the last video. And by the way,
if we hover over the variable that I

10

00:00:40,970  -->  00:00:45,050
renamed, it actually helpfully tells you
that Shadows built in named sorted. So if

11

00:00:45,050  -->  00:00:48,440
you see something like that, that's
probably an indication that you've

12

00:00:48,440  -->  00:00:53,260
renamed something that you didn't want
to do. Alright, so what I can't do here,

13

00:00:53,270  -->  00:00:57,800
is use refactor this time, and that's
because we'd also change sorted on lines

14

00:00:57,800  -->  00:01:03,800
3 and 14, and the second sorted on line 7.
So what I'm going to do is just change

15

00:01:03,800  -->  00:01:08,210
lines 7 &amp; 8 manually. So I'll change them
back to sorted_numbers, as it

16

00:01:08,210  -->  00:01:14,680
was in the previous video before I made
the change.

17

00:01:14,680  -->  00:01:18,900
And if you run this, no errors anymore,

18

00:01:18,900  -->  00:01:21,640
and at the end of the output
we've got a capital T appearing before

19

00:01:21,649  -->  00:01:25,880
the other letters. Now we can use a
keyword argument, as I mentioned, to

20

00:01:25,880  -->  00:01:30,710
specify how the items should be compared.
If we don't want capitalization to

21

00:01:30,710  -->  00:01:36,280
matter, we can use the case fold method
of the string class, and we've used that earlier.

22

00:01:36,280  -->  00:01:41,450
So I'll add the keyword argument
on line 14, and down here on line 14

23

00:01:41,450  -->  00:01:45,760
I'm going to put a comma, because I'm running
out of screen real estate here.

24

00:01:45,760  -->  00:01:55,920
On the next line, I'm going to type key=str.casefold
without parentheses.

25

00:01:55,920  -->  00:02:00,280
So I'm going to delete those parentheses.
So I mentioned not including the

26

00:02:00,280  -->  00:02:03,850
parentheses. It's very important that we
don't include those parentheses after

27

00:02:03,850  -->  00:02:08,229
the function name. That would call the
function, which isn't what we want here.

28

00:02:08,229  -->  00:02:12,459
What we're doing is telling the sorted
function the name of another function it

29

00:02:12,459  -->  00:02:17,530
should use, when comparing the values. As
I said, don't worry too much about that

30

00:02:17,530  -->  00:02:22,420
just yet. Whenever you want to perform a
case insensitive sort, just add

31

00:02:22,420  -->  00:02:28,020
key=str.casefold as an argument to sort or sorted, as I've done here on

32

00:02:28,020  -->  00:02:34,680
line 14 - well I've actually added it
to line 15. So if we run the program now,

33

00:02:35,400  -->  00:02:40,960
noting that T no longer appears at the
start of the list, and if we scroll over,

34

00:02:40,960  -->  00:02:44,560
you can now see the capital letter T appears
where we want it to appear, in amongst

35

00:02:44,560  -->  00:02:48,849
the other letters. So you'll learn all
about keyword arguments later, but this

36

00:02:48,849  -->  00:02:53,060
one is useful when sorting things and
that's why I wanted to mention it now.

37

00:02:53,060  -->  00:02:56,440
Alright, so I'm going to finish the
video with another example. This time

38

00:02:56,440  -->  00:03:02,010
what we're going to do, we're going to use
the .sort method to sort a list of names.

39

00:03:02,680  -->  00:03:08,980
Let's start on line 18 by creating a
list. So I'm going to type names is equal to

40

00:03:08,980  -->  00:03:12,400
left square bracket and right square
bracket, which of course, denotes setting

41

00:03:12,410  -->  00:03:16,790
up a list. We're going to type Graham in
double quotes, with a capital G comma, then

42

00:03:16,790  -->  00:03:21,340
on the next line, John, with a capital J,
in double quotes with a comma,

43

00:03:21,340  -->  00:03:25,850
terry in double quotes this time, all in
lowercase, comma, outside of the double

44

00:03:25,850  -->  00:03:32,090
quotes, eric in double quotes, all
in lowercase, comma. On the next line, Terry

45

00:03:32,090  -->  00:03:35,960
with a capital T in double quotes with a
comma, and on the last line, michael in

46

00:03:35,960  -->  00:03:40,940
lowercase in double quotes. Then I'm
going to press ENTER on the last line.

47

00:03:40,940  -->  00:03:43,700
We'll go back one character there, just
so the left and right square

48

00:03:43,700  -->  00:03:49,480
brackets line up. Alright, so on line 25
I'm going to type names.sort

49

00:03:49,480  -->  00:03:55,060
parentheses, then I'll print out names. Now I
mentioned when I was typing,

50

00:03:55,070  -->  00:03:57,830
some of these names are all in lowercase,
which is something that you might find

51

00:03:57,830  -->  00:04:04,310
in data that you're processing. So if we
run this, we can see that eric, michael

52

00:04:04,310  -->  00:04:07,940
and one of the Terry's are at the end of
the list. So to put them back where you'd

53

00:04:07,940  -->  00:04:13,840
probably look for them, we can use case
fold again. So we can go back to the code there,

54

00:04:13,840  -->  00:04:20,080
names.sort, and in parentheses
I can type key=str.casefold,

55

00:04:20,080  -->  00:04:27,900
remembering not to use, or not to add the
parentheses, like so. Run the program again.

56

00:04:27,900  -->  00:04:31,580
This time we get the names in an
order that humans would look for them.

57

00:04:31,580  -->  00:04:34,790
Alright, so we've seen quite a few things
that we can do with lists but we're not

58

00:04:34,790  -->  00:04:38,580
done yet. In the next video, we'll look at
other ways to create them.

59

00:04:38,580  -->  00:04:41,640
See you in the next video.
