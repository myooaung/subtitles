1

00:00:04,950  -->  00:00:08,253
At the end of the last video, we'd got our
nospam program to

2

00:00:08,260  -->  00:00:10,340
print out the items in each meal.

3

00:00:10,920  -->  00:00:15,719
Each one was printed out on a separate line, though,
which may not be what you want.

4

00:00:15,720  -->  00:00:21,260
That's easy to fix - the print function has
some extra arguments that we can use.

5

00:00:21,260  -->  00:00:23,560
Let's see what the documentation has to say.

6

00:00:23,560  -->  00:00:28,140
I'm going to go to the built-in functions page, for Python

7

00:00:28,640  -->  00:00:32,660
Now we've seen this table of built-in functions
before, and it's something you'll want to

8

00:00:32,660  -->  00:00:34,410
come back to often.

9

00:00:34,410  -->  00:00:39,290
We're interested in print at the moment, so
click print to see what else it can do.

10

00:00:39,290  -->  00:00:45,720
That takes us to the function signature for
the print function.

11

00:02:47,620  -->  00:02:53,720
The first parameter explains that print will
print objects to the file text stream.

12

00:02:53,730  -->  00:02:58,940
That strange default for file - sys.stdout
- just means the console.

13

00:02:58,940  -->  00:03:00,920
So that's where our output's been appearing.

14

00:03:00,920  -->  00:03:05,620
stdout is short for Standard Output.

15

00:03:05,620  -->  00:03:10,880
Each of the objects that we provide will be
printed, separated by whatever character we

16

00:03:10,880  -->  00:03:13,260
provide for the sep keyword argument.

17

00:03:13,260  -->  00:03:16,860
Remembering that the default for sep is a space.

18

00:03:16,860  -->  00:03:20,560
After all the objects have been printed, end
is printed.

19

00:03:20,560  -->  00:03:24,599
end defaults to a newline, and you've seen
that we got a new line, after each call to

20

00:03:24,600  -->  00:03:27,040
print in our code, previously.

21

00:03:27,480  -->  00:03:33,060
Alright, in the next video we'll swing back to IntelliJ, back to our code, and see some of this in action.

22

00:03:33,240  -->  00:03:34,980
See you in the next video.
