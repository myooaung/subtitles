WEBVTT
1
1

00:00:05.440  -->  00:00:09.420
In this video, we're going to continue our discussion of generators.
2

2

00:00:09.500  -->  00:00:14.360
There's also another way to use generators, using something called a generator expression,
3

3

00:00:14.360  -->  00:00:19.520
but we can to come back to that after seeing what list comprehensions are. Now in the database section
4

4

00:00:19.520  -->  00:00:20.220
of this course,
5

5

00:00:20.240  -->  00:00:22.050
we used a music database.
6

6

00:00:22.220  -->  00:00:30.020
Now that database contained 440 albums by 203 artists, with a total of over 5000 songs.
7

7

00:00:30.050  -->  00:00:33.950
Now Australia is the land of sun and surf and if I spend all the time
8

8

00:00:33.950  -->  00:00:38.780
typing that data into the database, well then I won't have any time left to play with the crocodiles on
9

9

00:00:38.780  -->  00:00:39.920
the beach.
10

10

00:00:39.920  -->  00:00:45.690
I'm joking but, of course, I didn't type all that information in - I got Python to do it for me.
11

11

00:00:45.710  -->  00:00:49.700
So let's have a look at how. So create a new Python project.
12

12

00:00:49.700  -->  00:00:52.570
Now I've called mine musicfiles, as you can see on screen,
13

13

00:00:52.820  -->  00:00:56.730
and the next thing I'm going to do is create a file called filegen.py.
14

14

00:01:00.630  -->  00:01:04.810
Okay, so the source of that data was the mp3 file stored on disk -
15

15

00:01:04.830  -->  00:01:07.050
that's the music database I'm talking about.
16

16

00:01:07.050  -->  00:01:11.810
So in this video, we're going to look at working with the computer's file system.
17

17

00:01:11.850  -->  00:01:16.800
Now you may not have any music files on your computer, which could make this video difficult to follow
18

18

00:01:16.800  -->  00:01:19.410
along with. With services like Spotify,
19

19

00:01:19.410  -->  00:01:21.240
that's definitely a possibility.
20

20

00:01:21.290  -->  00:01:22.860
Now you might not even like music.
21

21

00:01:23.030  -->  00:01:25.720
You might just listen to Justin Bieber instead.
22

22

00:01:25.800  -->  00:01:31.290
So we've included a zip file, containing files for older songs in the music database, that we used in
23

23

00:01:31.290  -->  00:01:32.400
section 13.
24

24

00:01:32.770  -->  00:01:38.160
You can download that file - music.zip - from the resources section for this video.
25

25

00:01:38.170  -->  00:01:42.250
Now, just to be clear, these aren't real mp3 files in that zip file.
26

26

00:01:42.390  -->  00:01:44.090
Obviously the real files are copyright,
27

27

00:01:44.100  -->  00:01:49.440
so we can't go distributing them, and the other thing would be that it wouldn't be realistic anyway because
28

28

00:01:50.030  -->  00:01:56.280
there'd be over 64 gigabyte of downloads to accurately download all those songs, which would be obviously, way
29

29

00:01:56.330  -->  00:01:57.400
over the top.
30

30

00:01:57.400  -->  00:02:01.880
Now the other thing we've done, is we've used the extension emp3 with each file -
31

31

00:02:01.890  -->  00:02:07.110
that's because an e at the start - so that if your music player automatically picks up new mp3 files
32

32

00:02:07.110  -->  00:02:11.750
from your hard disk, extracting the files from the zip won't mess that up at all.
33

33

00:02:11.960  -->  00:02:17.730
Alright, so you want to download that file - zip file - and extract that file into the music directory from
34

34

00:02:17.730  -->  00:02:23.790
the zip file that you've downloaded into the project directory, and it should it up with a subdirectory
35

35

00:02:23.790  -->  00:02:25.160
similar to what you can see here.
36

36

00:02:25.320  -->  00:02:33.140
There's the music.zip, and if I open it up and have a look you can see we've got folders there, and we've also got the actual artist,
37

37

00:02:33.210  -->  00:02:39.280
the album name and then all the individual songs. So you should end up with something similar.
38

38

00:02:39.420  -->  00:02:41.930
And obviously, you can see they're showing up in the project pane.
39

39

00:02:42.460  -->  00:02:46.170
There are a lot of files in there but the whole thing expands to under 3 megabytes, so it's quite
40

40

00:02:46.170  -->  00:02:49.040
a small, relatively speaking, download. Alright,
41

41

00:02:49.080  -->  00:02:54.480
so let's start by having a look at how we can access files on the computer's hard disk.
42

42

00:02:54.480  -->  00:02:56.510
Now we touched on this in an earlier section.
43

43

00:02:56.570  -->  00:03:02.810
The os.walk function can be used to recursively retrieve the contents of a directory, as well as all
44

44

00:03:02.810  -->  00:03:04.510
its subdirectories.
45

45

00:03:04.590  -->  00:03:10.250
Now we used it back then as a way to explain about recursion, but I didn't mention that os.walk
46

46

00:03:10.310  -->  00:03:11.460
is a generator.
47

47

00:03:11.790  -->  00:03:16.230
So in other words, it doesn't build up a huge list of all the files and directories on the hard drive.
48

48

00:03:16.320  -->  00:03:18.260
It just returns them as needed.
49

49

00:03:18.450  -->  00:03:26.810
So let's actually see how that works in practice. So, we're going to start by, line 1, import os. Then we're going to do root
50

50

00:03:26.930  -->  00:03:30.420
equals music. That's going to be the root level folder.
51

51

00:03:30.570  -->  00:03:36.030
And we use specifying a relative path so that it's going to use the music subfolder that you can see in the
52

52

00:03:36.120  -->  00:03:37.650
project pane.
53

53

00:03:37.680  -->  00:03:42.110
If you put these files somewhere else, obviously you'll need to put the path to wherever you've
54

54

00:03:42.120  -->  00:03:44.830
actually unzipped your files - those files.
55

55

00:03:45.390  -->  00:03:54.630
Next we want to type in for space path comma space directories comma space files space in
56

56

00:03:54.720  -->  00:04:04.220
os.walk. Then we want parentheses root comma, then topdown is equal to True in parentheses and
57

57

00:04:04.220  -->  00:04:05.890
a colon.
58

58

00:04:06.040  -->  00:04:11.100
And then we want to type print path so we can see the path, and then we wanna go through, iterate through the
59

59

00:04:11.100  -->  00:04:11.550
files.
60

60

00:04:11.570  -->  00:04:20.460
It's going to be for f in files colon, and we'll do a print parentheses double quotes slash t, the tab
61

61

00:04:20.460  -->  00:04:21.260
character.
62

62

00:04:21.560  -->  00:04:30.850
Then we want to do left and right curly brace, and then end the double quotes dot format and f.
63

63

00:04:32.640  -->  00:04:36.770
OK, so that's our program, and as you saw again on line 3,
64

64

00:04:37.080  -->  00:04:41.220
that's the path, so that's going to be found in our current directory because I've specified a relative
65

65

00:04:41.220  -->  00:04:42.300
path.
66

66

00:04:42.360  -->  00:04:43.230
If we run the program,
67

67

00:04:46.460  -->  00:04:49.900
we can see there's quite a bit of content showing there down at the bottom of the screen.
68

68

00:04:50.230  -->  00:04:58.220
I'm just going to stop it - go back and have a look. There's stacks of content there. I can scroll back right up to the top,
69

69

00:04:58.220  -->  00:04:59.930
to see what we're dealing with.
70

70

00:05:01.060  -->  00:05:05.330
What I'll do there, just to make things a little bit easier, I'll move the run pane to the right,
71

71

00:05:05.380  -->  00:05:10.990
so we can see a bit more. That's a bit better. Now on a Windows or a Mac machine,
72

72

00:05:10.990  -->  00:05:15.460
you should see the directories and files in alphabetical order. And that's more or less working here,
73

73

00:05:15.480  -->  00:05:21.310
but noting that the numbers, because of the way of the track numbers, 1 and 10 11 12 and 13 - it's sorting
74

74

00:05:21.310  -->  00:05:25.620
it in that order, which is a little bit weird but that's how computers work.
75

75

00:05:25.700  -->  00:05:29.610
And obviously, if we had a zero there, we'd pad out those levels with a zero - it would have sorted correctly.
76

76

00:05:29.830  -->  00:05:33.560
But in general, you'll see the directories and files in alphabetical order.
77

77

00:05:33.910  -->  00:05:39.520
That's on a Windows or Mac machine, but Linux doesn't present sorted directory listings by default.
78

78

00:05:39.520  -->  00:05:44.130
So you may well end up having your directories appear in a different order if you're running on Linux. But
79

79

00:05:44.200  -->  00:05:51.000
on my Mac, as a rule, you can see you've got 1000 Maniac's, 10cc, ACDC and so on. Now within each
80

80

00:05:51.010  -->  00:05:53.790
directory, we're getting the files printed.
81

81

00:05:54.310  -->  00:05:56.130
I think you'd agree that's pretty powerful.
82

82

00:05:56.230  -->  00:06:02.570
os.walk recursively visits every directory from the root, and for every one it returns a tuple.
83

83

00:06:02.830  -->  00:06:08.440
Now the first item in the tuple, on line 5, is a string containing the name of the current directory,
84

84

00:06:08.800  -->  00:06:11.550
which are unpacking into path in our code.
85

85

00:06:11.590  -->  00:06:14.560
Next is a list of all the directories in the current directory,
86

86

00:06:14.560  -->  00:06:18.340
and then finally, there's a list containing the names of all the files.
87

87

00:06:18.340  -->  00:06:23.050
Now what we can do, is see this a little bit better by using that trick that we've worked on this section,
88

88

00:06:23.050  -->  00:06:25.650
of pausing for input each time round the loop.
89

89

00:06:25.660  -->  00:06:28.400
So let's make some changes to the code to do that.
90

90

00:06:28.440  -->  00:06:35.380
So what I'm going to do is, just comment out these two lines - the for loop - and instead, what we'll do is we'll leave
91

91

00:06:35.380  -->  00:06:36.750
the print path in there.
92

92

00:06:36.980  -->  00:06:44.100
Then we'll do a print parentheses directories, print parentheses files,
93

93

00:06:44.950  -->  00:06:50.200
and then we'll do an input, left and right parentheses. So if we actually run this program
94

94

00:06:50.660  -->  00:06:54.800
now - let's expand this as a little bit so we can see a bit more of it.
95

95

00:06:55.480  -->  00:06:58.060
So we get the root path printed at the top there - music.
96

96

00:06:58.180  -->  00:07:04.360
That's obviously where we're starting, where the os.walk process or function is starting, and below that is a list
97

97

00:07:04.360  -->  00:07:09.580
of all the directories within music, and you can see if I scroll over, there's quite a few there as
98

98

00:07:09.610  -->  00:07:13.490
I scroll right over. Then at the end, the last list,
99

99

00:07:13.750  -->  00:07:18.040
well that's an empty list because there aren't any files at this level. And we can check that by
100

100

00:07:18.040  -->  00:07:20.380
expanding the music directory of the project pane.
101

101

00:07:20.950  -->  00:07:25.490
So we've obviously got all these subdirectories, but there aren't actually any files -
102

102

00:07:25.520  -->  00:07:31.940
if we scroll right down to the end - that are actually in the music directory itself. It's only subfolders.
103

103

00:07:32.830  -->  00:07:38.310
And by the way, on Linux you may need to do a bit of scrolling around, because the order of the project
104

104

00:07:38.330  -->  00:07:38.850
pane
105

105

00:07:38.920  -->  00:07:42.730
won't match the output. Intellij sorts the directories alphabetically.
106

106

00:07:43.170  -->  00:07:47.550
Now in fact, we will have to scroll slightly on Windows and Mac in a moment, too.
107

107

00:07:47.660  -->  00:07:49.090
And that's because intelligence sorts
108

108

00:07:49.090  -->  00:07:51.380
lower case letters before numbers,
109

109

00:07:51.580  -->  00:07:55.240
so 1000 Maniacs appears after 10cc in the project pane.
110

110

00:07:55.560  -->  00:08:00.970
You can see here at the top, and you can see that's happening there with 10cc and 1000 Maniacs.
111

111

00:08:01.450  -->  00:08:03.680
Alright, so back to my run pane, 
112

112

00:08:03.700  -->  00:08:10.800
and if I press Enter again, the loop goes round. This time the os.walk function yields the next tuple.
113

113

00:08:10.820  -->  00:08:13.750
Now it's gone into the 1000 Maniac's directory,
114

114

00:08:13.810  -->  00:08:16.240
so that's the value that's printed.
115

115

00:08:16.330  -->  00:08:21.330
Now, there's only one directory in here and if we can go back and have a look - Our Time in Eden, as you
116

116

00:08:21.330  -->  00:08:25.280
can see. And again, there's no files rather, at that level,
117

117

00:08:25.350  -->  00:08:27.150
so again an empty list.
118

118

00:08:27.300  -->  00:08:28.940
That's because that's the name of the album.
119

119

00:08:29.010  -->  00:08:32.960
But if we go back again, pressing enter, this time
120

120

00:08:32.970  -->  00:08:39.130
it's actually moved into the Our Time in Eden directory. And this time because there's no subdirectories,
121

121

00:08:39.140  -->  00:08:44.490
the second entry, the lists, is actually empty but we can see all the files there. And track number 1, you can
122

122

00:08:44.490  -->  00:08:53.080
see there right across, to and including track number 9 and you can see that matches with the list
123

123

00:08:53.080  -->  00:08:53.670
here,
124

124

00:08:53.740  -->  00:09:00.560
bearing in mind that some of the earlier ones, because of the way that they've been actually numbered, are actually
125

125

00:09:00.560  -->  00:09:07.130
appearing at the start of the list, due to the sorting. And basically so on. So every time we press ENTER, 
126

126

00:09:07.130  -->  00:09:09.390
os.walk yields the next tuple.
127

127

00:09:09.620  -->  00:09:14.810
And once it's exhausted the contents of one directory, it backtracks and continues with the next directory
128

128

00:09:14.810  -->  00:09:15.730
of the parent.
129

129

00:09:16.040  -->  00:09:18.410
So we get the contents of 10cc appearing if I press enter
130

130

00:09:18.410  -->  00:09:21.620
now. You can see 10cc showing up there.
131

131

00:09:21.990  -->  00:09:28.790
Now looking at the contents of the 10cc directory, the path contains the artist 10cc, and the name
132

132

00:09:29.210  -->  00:09:31.720
of the album, The Best Of The Early Years.
133

133

00:09:31.770  -->  00:09:34.980
Now the list contains all the songs on the album.
134

134

00:09:35.180  -->  00:09:42.320
We can expand that out, The Best Of The Early Years, as you can see, and I can press enter there, and there's all the songs once we actually
135

135

00:09:42.320  -->  00:09:45.170
go into that subfolder.
136

136

00:09:45.350  -->  00:09:50.840
So whenever we get a file list that isn't empty, we can extract all the details we need to populate a
137

137

00:09:50.840  -->  00:09:54.680
database. And it turns out, the code for doing that's pretty simple.
138

138

00:09:55.010  -->  00:10:00.410
But when dealing with file paths, don't be tempted to just split the string at the slashes, and that's
139

139

00:10:00.410  -->  00:10:06.430
because the os module has a path module that knows about file names and can correctly pass them for us.
140

140

00:10:06.760  -->  00:10:08.480
So to see what I mean there, let's just close 
141

141

00:10:08.480  -->  00:10:16.360
that run window, and we're just going to change a bit of code. So what I'm going to do, is come up here, and I'm
142

142

00:10:16.360  -->  00:10:19.850
going to put if files,
143

143

00:10:21.150  -->  00:10:29.290
and then what I'm going to do is leave the print in there. What I'll do is, I'll just comment that out.
144

144

00:10:30.280  -->  00:10:41.580
So print path and I'm going to do first underscore split is equal to os.path.split path. Then
145

145

00:10:41.590  -->  00:10:49.910
we're going to do print and print first_split in parentheses, and then we do a print parentheses. I'm going to do
146

146

00:10:50.140  -->  00:10:53.770
double quotes and put a star in there,
147

147

00:10:53.830  -->  00:10:58.900
times 40, so we've got a nice little separator. Actually, what I'll do is delete the rest of that code because we really don't
148

148

00:10:58.900  -->  00:10:59.850
need that anymore.
149

149

00:11:00.340  -->  00:11:08.000
So if we actually run this, and scroll back up to the top,
150

150

00:11:08.030  -->  00:11:13.810
notice how os.path.split has separated our last directory, or the last directory - Our Time in
151

151

00:11:13.810  -->  00:11:14.600
Eden -
152

152

00:11:14.770  -->  00:11:16.360
from the path it's on.
153

153

00:11:16.360  -->  00:11:18.710
So that's separated out the album name for us.
154

154

00:11:18.830  -->  00:11:23.050
Now if we repeat the operation on the first element of the tuple, we can actually get access to the
155

155

00:11:23.050  -->  00:11:23.960
artist name.
156

156

00:11:24.060  -->  00:11:31.840
So I'll close that down again, and what we're going to do is, after the first_split print out, we're gonna do second
157

157

00:11:32.110  -->  00:11:38.680
underscore split is equal to os.path.split parentheses,
158

158

00:11:38.800  -->  00:11:45.790
first underscore split. Then in square brackets, 0, then in parentheses. Then let's then print
159

159

00:11:45.790  -->  00:11:53.630
out the second_split, and to get the list of songs, we can iterate over the files list.
160

160

00:11:53.680  -->  00:11:55.410
Now we've already checked that it's not empty,
161

161

00:11:55.660  -->  00:11:58.810
as you can see on line 6, with the if files statement.
162

162

00:11:58.810  -->  00:12:03.270
So consequently, we could just use the normal string splitting to split the name from the song number.
163

163

00:12:03.580  -->  00:12:04.840
So let's do that.
164

164

00:12:04.860  -->  00:12:11.600
So after the second split printout, we're going to put for f in files colon.
165

165

00:12:11.830  -->  00:12:18.820
We're going to put song_details is equal to if.split, then in parentheses, single quote
166

166

00:12:18.820  -->  00:12:25.480
space dash space, and then we're going to print song_details.
167

167

00:12:26.260  -->  00:12:30.580
And actually, I guess what we should really be doing there with the split, is we should be stripping off the
168

168

00:12:30.580  -->  00:12:32.350
file extension as well.
169

169

00:12:32.350  -->  00:12:35.690
So let's actually do that, so we've got at the moment, song_details here.
170

170

00:12:36.020  -->  00:12:36.910
We're going to do that split,
171

171

00:12:36.910  -->  00:12:44.630
but let's start off by putting, at the head of that, f.split parentheses single quote dot emp3,
172

172

00:12:44.960  -->  00:12:50.330
remembering that we've referred to these files or called them, or have added a file extension of dot
173

173

00:12:50.330  -->  00:12:56.400
emp3, parentheses, and then off the result of that we do another if.split with the single quotes and a
174

174

00:12:56.520  -->  00:12:58.390
space and a dash.
175

175

00:12:58.390  -->  00:13:00.230
So let's actually run this and see what happens.
176

176

00:13:02.070  -->  00:13:07.710
And whoops, it didn't quite work, and we've got a typo there. Let's just get back and fix that up. What I should've
177

177

00:13:07.710  -->  00:13:13.560
done, I put dot f there - of course, it's not dot f. Dot f is at the start, or f dot is at the start because we're referring
178

178

00:13:13.560  -->  00:13:14.810
to an individual file.
179

179

00:13:14.970  -->  00:13:20.180
But the second split, we're spitting it based on the output that comes back after the first one.
180

180

00:13:20.190  -->  00:13:28.170
So if we run that now, and what that should actually be is, we're trying to actually remove the file extension.
181

181

00:13:28.200  -->  00:13:33.080
Well that's not going to be a split, of course, that's going to be a strip. So we want to strip out.
182

182

00:13:33.360  -->  00:13:35.790
So that should be s t r i p.
183

183

00:13:35.960  -->  00:13:42.680
So f dot strip parentheses single quotes dot emp3. Then results of that - we want to do a dot split,
184

184

00:13:42.940  -->  00:13:51.960
and in parentheses and single quote space dash space. So third time lucky, let's run that. Well this time we got some
185

185

00:13:52.140  -->  00:13:53.220
output. That's good.
186

186

00:13:53.350  -->  00:13:55.030
Let's just scroll back up to the top and have a look.
187

187

00:13:57.480  -->  00:13:59.910
So you can see it's still not quite working correctly.
188

188

00:13:59.910  -->  00:14:05.550
It almost worked, but strip actually works with a sequence and not a string. So it doesn't actually remove
189

189

00:14:05.570  -->  00:14:11.400
the string dot emp3. It checks the beginning and end of the file name for any of the characters in dot
190

190

00:14:11.430  -->  00:14:17.050
emp3, and keeps removing them, regardless of order, until it can't remove any more.
191

191

00:14:17.310  -->  00:14:22.410
So all our third songs, as you can see here, have a blank song number, for example, and you can see these other
192

192

00:14:22.410  -->  00:14:28.620
examples of characters - like that would obviously be an e there. The word face has been removed
193

193

00:14:28.620  -->  00:14:29.680
as well.
194

194

00:14:29.680  -->  00:14:33.830
Alright so to deal with that, we can slice the string before splitting it.
195

195

00:14:34.030  -->  00:14:34.560
And we want
196

196

00:14:34.620  -->  00:14:36.880
everything except the last four characters.
197

197

00:14:37.080  -->  00:14:39.370
Well it would be four characters for mp3 files
198

198

00:14:39.390  -->  00:14:42.260
but our extension's dot emp3,
199

199

00:14:42.300  -->  00:14:45.000
so we went all but the last five characters.
200

200

00:14:45.000  -->  00:14:46.810
So let's actually have a go at doing that.
201

201

00:14:47.190  -->  00:14:50.310
I'll close this down again and I'll fix this strip,
202

202

00:14:50.310  -->  00:14:52.830
and what we'll do instead is replace that code.
203

203

00:14:52.860  -->  00:14:59.230
We're going to put f left and right square brackets, then within there we're going to put colon minus 5.
204

204

00:14:59.280  -->  00:15:06.210
Now by not specifying a start for the splice, Python defaults to the start of the string. For
205

205

00:15:06.210  -->  00:15:12.020
the stop value, we go up to but not including, five characters in from the end of the string.
206

206

00:15:12.120  -->  00:15:16.840
And we no longer need that, of course. So let's just delete that.
207

207

00:15:16.920  -->  00:15:21.920
Alright, so we've now removed the extension and we're still adding the split on the end
208

208

00:15:22.080  -->  00:15:28.670
to remove that from the song details. So let's actually have a look at running that and see what that does. Alright, I'm going
209

209

00:15:28.780  -->  00:15:30.250
back up to the top to have a look.
210

210

00:15:30.680  -->  00:15:32.310
And I think it's now looking a lot better,
211

211

00:15:32.310  -->  00:15:37.370
as you can see. Alright, so at this point we've now finally got all the data we need, and we can use
212

212

00:15:37.370  -->  00:15:43.460
it in sequel insert statements to write the data to a database. And that's pretty much how the music database
213

213

00:15:43.460  -->  00:15:45.260
for Section 13 was created.
214

214

00:15:45.320  -->  00:15:48.100
Well pretty much. I'll come back to that later.
215

215

00:15:48.530  -->  00:15:53.880
So as I said, os.walk is a generator, so it doesn't try to read every single file and
216

216

00:15:53.880  -->  00:15:56.410
directory at once into a huge list.
217

217

00:15:56.480  -->  00:16:00.090
It's only yielding the details for a single directory at a time.
218

218

00:16:00.320  -->  00:16:04.880
So ultimately, we could have millions of albums, and we can process them in this way without running out of
219

219

00:16:04.880  -->  00:16:07.890
memory. So generators can get even more useful
220

220

00:16:08.060  -->  00:16:12.740
when you use them to create other generators, and we'll start working on that in the next video.
