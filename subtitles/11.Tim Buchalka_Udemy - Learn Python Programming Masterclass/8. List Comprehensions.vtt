WEBVTT
1
00:00:05.450 --> 00:00:11.930
Alright, so I've mentioned list comprehensions a couple of times now. The time's now come to see what they are.

2
00:00:12.730 --> 00:00:19.450
Now Python has comprehensions for lists, sets and dicts - dictionaries in other words.

3
00:00:19.450 --> 00:00:24.700
And it also has generator expressions which are very similar to write.

4
00:00:24.700 --> 00:00:31.310
Now we're going to start with list comprehensions and then show how set and dict comprehensions work in the

5
00:00:31.310 --> 00:00:32.600
same way.

6
00:00:32.600 --> 00:00:38.860
So we're going to create a new python file.

7
00:00:39.080 --> 00:00:45.020
Now I'm going to call mine listfor.

8
00:00:45.160 --> 00:00:52.030
Alright, so let's review some basics of iterating over a list. So if we start with print parenthesis under

9
00:00:52.030 --> 00:01:00.460
score underscore file underscore underscore, then skip to line three, numbers equals square

10
00:01:00.460 --> 00:01:10.090
brackets one comma, space, two comma space, three comma space, four, five and six, enclosing right square bracket.

11
00:01:10.480 --> 00:01:24.190
Then line five, squares equals left and right square brackets. Next line, for number in numbers colon.

12
00:01:25.390 --> 00:01:28.940
Then next line, squares dot append.

13
00:01:29.380 --> 00:01:32.340
That's going to be parenthesis number space

14
00:01:32.740 --> 00:01:37.400
star star space two and on line nine,

15
00:01:37.410 --> 00:01:42.810
we're going to close that off with a print parentheses squares.

16
00:01:43.110 --> 00:01:45.550
Now don't worry about that first line just yet.

17
00:01:45.550 --> 00:01:49.980
It just prints out the full name of the python file we're executing,

18
00:01:49.990 --> 00:01:53.340
and you're going to see why we want to do that in a moment. And it should be fairly obvious

19
00:01:53.350 --> 00:01:55.390
to you now what the rest of the code will do,

20
00:01:55.510 --> 00:01:56.840
even without running it.

21
00:01:57.070 --> 00:02:03.700
So it's creating a new list called squares, containing the squares of the values in numbers.

22
00:02:03.700 --> 00:02:07.980
Now we can convert that to a list comprehension very easily.

23
00:02:08.170 --> 00:02:12.380
But let's just check that this does work first.

24
00:02:12.400 --> 00:02:16.640
You can see we've got the output there, and what I might do is just move the run window

25
00:02:16.740 --> 00:02:23.990
output down to the bottom, so you can see things a little bit clearer, and move this down a little bit. I'll close that

26
00:02:24.030 --> 00:02:24.990
for now.

27
00:02:25.530 --> 00:02:29.220
Alright so I mentioned that we can convert that quite easily to a list comprehension.

28
00:02:29.430 --> 00:02:35.580
But before we write that code, it will be useful to compare the comprehensions with the corresponding

29
00:02:35.580 --> 00:02:36.800
for loops.

30
00:02:37.010 --> 00:02:43.260
Now IntelliJ IDEA allows two files to be displayed side by side and that's going to be a good way

31
00:02:43.260 --> 00:02:45.500
to compare the two different methods.

32
00:02:45.990 --> 00:02:47.540
Alright, so to see those two files

33
00:02:47.530 --> 00:02:55.440
we can Right-Click up here in listfor, and we can choose split vertically.

34
00:02:55.670 --> 00:03:00.420
Now that's showing the same file at the moment in two different panes, but I can open another file in one

35
00:03:00.420 --> 00:03:01.310
of the panes.

36
00:03:01.470 --> 00:03:04.440
So first though, we need to create a new python file.

37
00:03:04.470 --> 00:03:07.370
I'm going to call that listcomp.

38
00:03:07.470 --> 00:03:13.770
We want to make sure that we've selected this left pane over here first, so that listcomp opens to the left of list

39
00:03:13.770 --> 00:03:15.220
for, which we've got on the right.

40
00:03:15.220 --> 00:03:17.170
So let's go ahead and do that. Create a new file,

41
00:03:20.440 --> 00:03:28.760
and again it's listcomp. Now what I'll do is I'll just close the project pane for now just to give us a bit more space here.

42
00:03:29.180 --> 00:03:31.830
Alright, so we've got these two files next to each other.

43
00:03:31.830 --> 00:03:36.750
Now the code to the right but using a comprehension, looks something like this.

44
00:03:36.820 --> 00:03:43.470
So I'm going to start with print parentheses underscore underscore file underscore underscore again, closing parentheses, then

45
00:03:43.470 --> 00:03:50.990
line three, numbers equals square brackets 1 comma space 2 3 4 5 6,

46
00:03:53.960 --> 00:04:02.430
line five, squares, this is where it gets a little bit different, squares equals left square bracket number star star

47
00:04:02.850 --> 00:04:07.290
two, space two, for number in numbers.

48
00:04:09.520 --> 00:04:14.050
Then on line seven we're going to still print squares.

49
00:04:14.050 --> 00:04:16.600
Now that does almost exactly the same thing

50
00:04:16.610 --> 00:04:19.180
and I think you'd agree it's a lot more concise.

51
00:04:19.220 --> 00:04:24.620
Basically, one line of code instead of three - I'm talking about this line here, on line five, compared

52
00:04:24.620 --> 00:04:28.700
to what we're doing on lines 5 3 7 in listfor.py.

53
00:04:29.160 --> 00:04:35.090
And again, we'll just run the right hand side first, listfor - there's the output for listfor -

54
00:04:35.300 --> 00:04:42.180
and come over here to this side and run that for listcomp, and you can see we've got the same output for both.

55
00:04:42.860 --> 00:04:47.440
And you can probably see now why I've actually chosen to output the first,

56
00:04:47.480 --> 00:04:52.610
or to have the first line of the output showing with the complete path, because you can now see for sure which program

57
00:04:52.610 --> 00:04:57.190
is executed. We've got listcomp.py here on the left hand side and if I run this again by right clicking

58
00:04:57.210 --> 00:05:00.810
the right hand side, you can see we're running listfor.py

59
00:05:00.810 --> 00:05:03.950
It just makes it a bit easier when you've got two windows open.

60
00:05:04.410 --> 00:05:07.690
Well, just in general, having two sets of code doing pretty much the same thing,

61
00:05:07.700 --> 00:05:11.170
so you're sure you're running one version compared to another.

62
00:05:11.490 --> 00:05:14.640
It is actually very easy to run the wrong program in that scenario,

63
00:05:14.810 --> 00:05:19.490
so this really just lets us check that we're running the program we expect we're running.

64
00:05:19.730 --> 00:05:24.680
Now I know technically, IntelliJ displays it anyway, right up here at the top of the output, at the

65
00:05:24.680 --> 00:05:25.920
top of the window.

66
00:05:26.690 --> 00:05:30.680
But not everyone taking this course is using the IntelliJ IDEAs which is why I've done that.

67
00:05:30.760 --> 00:05:31.030
Right

68
00:05:31.040 --> 00:05:35.050
so let's have a look at that list comprehension, in listcomp.py over here.

69
00:05:36.720 --> 00:05:43.430
Now the comprehension's the part after the equals, and we can tell it's a list comprehension because of the

70
00:05:43.430 --> 00:05:43.800
square, the square brackets.

71
00:05:43.820 --> 00:05:51.010
So it's basically this part here. And just to confirm that, if I change these square brackets

72
00:05:51.780 --> 00:05:53.410
to curly braces instead,

73
00:05:57.510 --> 00:05:58.910
and if I run that again,

74
00:06:04.560 --> 00:06:06.250
you can see down the bottom in the output

75
00:06:06.250 --> 00:06:08.480
now, we get a set instead.

76
00:06:08.520 --> 00:06:10.900
So it's now a set comprehension.

77
00:06:10.950 --> 00:06:17.090
So everything I say about list comprehensions will also apply to set comprehensions.

78
00:06:17.250 --> 00:06:22.270
They're the same except one produces a list and the other produces a set.

79
00:06:22.330 --> 00:06:24.880
Right, so lets undo that change and go back to our list comprehension,

80
00:06:31.100 --> 00:06:32.400
making sure that it still works.

81
00:06:33.420 --> 00:06:38.020
Alright, so as you can see on screen, this list comprehension's in two parts.

82
00:06:38.030 --> 00:06:41.800
So the first part is the expression that we want to return -

83
00:06:41.910 --> 00:06:44.320
number to the power two in this case.

84
00:06:44.390 --> 00:06:49.030
Now the second part, the second part's an iteration over a sequence.

85
00:06:49.250 --> 00:06:57.110
So it's identical to the for part of our for loop in listfor - the for numbers in numbers colon - except

86
00:06:57.110 --> 00:06:59.400
we don't need the colon at the end.

87
00:06:59.420 --> 00:07:03.690
Now there's more to comprehensions and we'll extend that definition shortly.

88
00:07:03.700 --> 00:07:10.520
Alright so back to the code. A list comprehension produces a list. Now it does that by evaluating the

89
00:07:10.520 --> 00:07:14.280
expression for each item in the iterable.

90
00:07:14.280 --> 00:07:21.080
Now in this case it evaluates the expression number, star star two, or number to the power of two, for each

91
00:07:21.080 --> 00:07:24.290
number in the numbers sequence.

92
00:07:24.290 --> 00:07:31.790
Now we can use anything that can be iterated over - a string for example, or a generator such as a range

93
00:07:31.790 --> 00:07:33.100
for argument's sake.

94
00:07:33.170 --> 00:07:37.760
So if we change this over here to instead of putting in numbers - well actually what I'll do is I'll comment this

95
00:07:37.760 --> 00:07:40.470
first line out to make it a bit easier.

96
00:07:40.850 --> 00:07:47.150
We change squares now to be squares equals, left and right square brackets,

97
00:07:47.480 --> 00:07:59.380
number star star two again, then for number in range, parentheses one comma space seven.

98
00:07:59.560 --> 00:08:01.600
And we've got the closing right square bracket there.

99
00:08:01.600 --> 00:08:02.300
Now if we run that,

100
00:08:06.940 --> 00:08:10.270
you can see we've got the same output as we had previously.

101
00:08:10.310 --> 00:08:13.770
Now at this point if you're thinking, so what, we can do the same with a for loop,

102
00:08:14.020 --> 00:08:18.430
bear with me and stick with me here. Now we're going to be looking at why comprehensions are such a really

103
00:08:18.430 --> 00:08:20.500
cool feature in a few minutes.

104
00:08:20.540 --> 00:08:25.920
But first let's see some more examples before we look at the list comprehension in more detail.

105
00:08:25.920 --> 00:08:31.780
Now I want to come back to this code, so I'm going to create another file for this code. Now rather than

106
00:08:31.780 --> 00:08:33.490
expanding the project pane,

107
00:08:33.520 --> 00:08:37.540
if you've got that closed you can actually, you can create a new python file by just coming up to the file

108
00:08:37.540 --> 00:08:42.180
menu, selecting New and selecting Python File - doing it that way.

109
00:08:42.410 --> 00:08:43.530
And the file we want here

110
00:08:43.550 --> 00:08:45.620
we're going to call it examples.

111
00:08:48.090 --> 00:08:48.280
Alright,

112
00:08:48.510 --> 00:08:52.000
so lets start with, on line one, text equals and double quotes

113
00:08:52.000 --> 00:08:58.650
What have the Romans ever done for us.

114
00:08:58.720 --> 00:09:00.260
Line three, capitals

115
00:09:00.530 --> 00:09:11.630
equals left and right square brackets, char dot upper parentheses for char in text, then on line 5 we're going to

116
00:09:11.620 --> 00:09:14.100
print parentheses capitals.

117
00:09:14.800 --> 00:09:15.690
So if we run this program,

118
00:09:18.680 --> 00:09:20.040
you can see down the bottom there,

119
00:09:20.180 --> 00:09:23.030
we get a list of all the letters in the text,

120
00:09:23.030 --> 00:09:25.570
each one converted to uppercase.

121
00:09:25.640 --> 00:09:32.360
Now here the list we're getting is made up of the uppercase version of each character in the text.

122
00:09:32.360 --> 00:09:37.340
So as long as you can produce something that can be iterated over, you can use it to provide the

123
00:09:37.340 --> 00:09:38.940
input to a comprehension.

124
00:09:39.200 --> 00:09:43.350
For example, we can split that text up into individual words if we wanted to do that.

125
00:09:43.400 --> 00:09:49.280
Now we've actually used the split function before, and it actually returns a list.

126
00:09:49.380 --> 00:09:50.950
Now a list can be iterated over,

127
00:09:51.080 --> 00:09:54.630
so therefore we can produce a list of all the words in the text.

128
00:09:54.660 --> 00:10:00.860
So let's go ahead and do that and we'll add that below the existing code starting on line seven; words equals

129
00:10:01.360 --> 00:10:13.200
left and right square brackets, word dot upper, and left and right parentheses, for word in text

130
00:10:13.210 --> 00:10:19.980
dot split, then another parentheses, two single quotes and a space between those two single quotes.

131
00:10:19.990 --> 00:10:22.420
And obviously, we've got our closing right square bracket there.

132
00:10:22.640 --> 00:10:29.650
Then the next line, it's just print words, and if we do that we should find that we've got all the words

133
00:10:29.670 --> 00:10:33.700
capitalized when we run the program, and you can see 'what have the Romans ever done for us'

134
00:10:33.700 --> 00:10:36.280
now in uppercase - capitalized in other words.

135
00:10:36.290 --> 00:10:41.170
Now if we didn't want to process the words in some way, such as converting them to uppercase, then there's

136
00:10:41.170 --> 00:10:43.180
no need to use a list comprehension.

137
00:10:43.280 --> 00:10:48.760
So this code I'm about to type in, we can just print out or produce a list of the words purely

138
00:10:48.760 --> 00:11:02.370
by splitting the string. So I can start with lc underscore words is equal to text dot split parentheses,

139
00:11:02.600 --> 00:11:07.570
then we've got our two single quotes again with the space between them, and we can just print lc words.

140
00:11:11.850 --> 00:11:13.220
So we can run that

141
00:11:13.290 --> 00:11:15.350
and obviously, we get the same result there.

142
00:11:15.870 --> 00:11:20.040
But in this case we're just outputting them without actually processing the words in any way.

143
00:11:20.040 --> 00:11:24.690
So comprehensions are great, as we're about to see, but don't throw them in

144
00:11:24.690 --> 00:11:29.820
just because you can. Make sure they really are solving a problem. In that last example there's no need

145
00:11:29.820 --> 00:11:33.960
to use a comprehension unless you really wanted to convert the words to uppercase.

146
00:11:34.020 --> 00:11:39.280
Using one just to produce a list of words will work, but it just adds more complexity to your application.

147
00:11:39.690 --> 00:11:44.210
So what I mean is don't do something like this;

148
00:11:44.310 --> 00:11:52.710
so something along the lines of lc underscore words equals left and right square brackets word for word

149
00:11:52.770 --> 00:12:02.700
in text dot split parentheses single quote and a space between it, and print parentheses

150
00:12:02.720 --> 00:12:03.880
lc underscore words.

151
00:12:07.330 --> 00:12:07.490
Now

152
00:12:07.840 --> 00:12:14.430
we can run that, and obviously, we get the same result but it's more complex unecessarily, than the code

153
00:12:14.430 --> 00:12:18.110
which works identically on line ten - this is the code on line thirteen

154
00:12:18.120 --> 00:12:21.110
I'm talking about, and it's also inefficient.

155
00:12:21.420 --> 00:12:28.390
The code on line 13 iterates over the list that split returns, then appends each item to the new list.

156
00:12:28.390 --> 00:12:33.120
OK so time to start looking at why a comprehension can be preferable to a for loop,

157
00:12:33.120 --> 00:12:35.450
apart from just saving a couple of lines of code.

158
00:12:35.610 --> 00:12:42.350
So way back in Section 11, we created a function to centre text on an 80 column display.

159
00:12:42.750 --> 00:12:44.130
Let's go ahead and create a new file

160
00:12:44.140 --> 00:12:56.940
here, File, New, Python File and we're going to call this one centre_text.py

161
00:12:58.030 --> 00:13:03.280
OK what I'm going to do then before I start going through with the code is just close down this file over here. We don't need it anymore.

162
00:13:03.300 --> 00:13:10.420
So you'll get back to a full screen again, and if you remember way back in Section 11, we created

163
00:13:10.420 --> 00:13:13.520
a function to centre text on an 80 column display.

164
00:13:13.810 --> 00:13:18.150
So I'm going to paste in the code from that section and just to save you a bit of time,

165
00:13:18.170 --> 00:13:22.940
I've also got that code in the resources section of this video.

166
00:13:23.950 --> 00:13:25.260
Right, so we're going to paste it in there now,

167
00:13:25.270 --> 00:13:27.090
centre_text.py

168
00:13:27.640 --> 00:13:28.720
That's the code there,

169
00:13:29.320 --> 00:13:30.760
and if we run the program,

170
00:13:34.690 --> 00:13:40.440
we can see that it seems to work pretty well there as you can see in the example. We're concatenating strings

171
00:13:40.520 --> 00:13:42.670
inside a for loop up here, on line, the for

172
00:13:42.820 --> 00:13:46.070
loop's on line 3, basically lines 3 and 4.

173
00:13:46.370 --> 00:13:52.210
And that's not a good idea if it can be avoided, and also has an effect that we don't want. Now to see

174
00:13:52.210 --> 00:13:53.640
what that effect is,

175
00:13:53.650 --> 00:14:02.430
I'm going to use a minus character instead of a space on line four. Here I'm going to change that to a minus

176
00:14:02.430 --> 00:14:04.000
instead of a space.

177
00:14:04.000 --> 00:14:09.690
Now if we actually run this program again we should be able to see the undesirable result, or the undesirable

178
00:14:09.690 --> 00:14:10.060
effect.

179
00:14:10.060 --> 00:14:17.370
You can see that there. The minus has added to the end of the strings, not just between the items in the list.

180
00:14:17.430 --> 00:14:22.500
Now that didn't really matter when we were just displaying the result because you couldn't see the spaces,

181
00:14:22.860 --> 00:14:25.790
but it could be important in other applications, though.

182
00:14:26.280 --> 00:14:29.010
Now to give a rather contrived example,

183
00:14:29.010 --> 00:14:36.630
if you were searching for strings ending in spam, you wouldn't find any. The strings ended in spam space, which

184
00:14:36.630 --> 00:14:41.450
means that they wouldn't be found in a search for spam without a trailing space.

185
00:14:41.790 --> 00:14:44.280
Now fortunately, though, that's easily fixed.

186
00:14:44.280 --> 00:14:47.230
We can use join rather than a for loop.

187
00:14:47.610 --> 00:14:52.020
So let's go ahead and modify the function, and I'm also going to comment out a couple of lines in the

188
00:14:52.020 --> 00:14:59.750
main block and you'll see why shortly. So back up here on lines two, three and four, I'm going to comment out those three lines.

189
00:15:02.730 --> 00:15:10.550
Basically, I'm going to add just the one line there - text equals double quotes and then a minus character in the

190
00:15:10.550 --> 00:15:14.600
double quotes dot join parentheses

191
00:15:14.820 --> 00:15:16.290
args.

192
00:15:17.240 --> 00:15:25.410
I'm also going to go ahead and comment out this one here on line 13, as well as this one here on line 16.

193
00:15:26.780 --> 00:15:32.210
Alright, so go ahead and run this again, or run it, and you can see we've now got a good result and we haven't

194
00:15:32.210 --> 00:15:38.120
got the minus character showing anymore, which is good, but what about these two lines down here that I commented

195
00:15:38.120 --> 00:15:38.530
out.

196
00:15:38.720 --> 00:15:39.700
Let's put them back in,

197
00:15:44.150 --> 00:15:48.270
and when we run our app again, we actually get an error.

198
00:15:48.430 --> 00:15:53.290
And the problem here is that you can't join ints to strings.

199
00:15:53.460 --> 00:15:58.510
So obviously, in that scenario there on line 13 we're using an int, and on line 16 we're also using ints

200
00:15:58.540 --> 00:15:59.950
in addition to strings.

201
00:15:59.970 --> 00:16:03.080
And again you can't join ints to strings.

202
00:16:03.460 --> 00:16:08.420
So this is a scenario where a list comprehension can be useful.

203
00:16:08.450 --> 00:16:14.830
So instead of passing the args list to the join function, we can instead parse a list comprehension

204
00:16:15.280 --> 00:16:18.370
and convert all the arguments to strings.

205
00:16:18.370 --> 00:16:19.340
So let's go back and do that.

206
00:16:19.340 --> 00:16:26.220
So we're going to modify line five. At the moment we've got text equals double quotes minus sign in between

207
00:16:26.250 --> 00:16:27.500
dot join.

208
00:16:27.700 --> 00:16:30.990
So we're going to change this a little bit now, so we're going to leave the parentheses there

209
00:16:31.000 --> 00:16:32.040
in join.

210
00:16:32.670 --> 00:16:41.060
But then we are going to add left to right square brackets str parentheses arg closing parentheses,

211
00:16:41.340 --> 00:16:44.950
for arg in args.

212
00:16:45.440 --> 00:16:47.900
So basically, using a list comprehension there.

213
00:16:48.570 --> 00:16:55.320
So that's pretty cool - we've avoided concatenating strings in a loop and allowed the join function to

214
00:16:55.320 --> 00:16:58.050
be used with a list that would otherwise have caused errors.

215
00:16:58.290 --> 00:17:04.560
And just to confirm that, if we run that again, you can see we no longer get errors and we're getting the correct output with

216
00:17:04.920 --> 00:17:08.190
the integers showing as well.

217
00:17:08.240 --> 00:17:10.960
Now there's a lot more we can do with comprehensions.

218
00:17:11.000 --> 00:17:13.400
We've really only just started with them.

219
00:17:13.460 --> 00:17:16.340
We're going to carry on with list comprehensions in the next video,

220
00:17:16.670 --> 00:17:21.840
but before I stop this one, there's one thing I want to say about that code -

221
00:17:21.890 --> 00:17:28.940
this is the code on line 5 again. You'll often see that line, code like that, written without the

222
00:17:28.940 --> 00:17:32.420
square brackets. So in other words if I remove the square brackets

223
00:17:36.080 --> 00:17:36.680
and run it,

224
00:17:39.560 --> 00:17:42.010
we do get the same result, as you can see.

225
00:17:42.400 --> 00:17:45.410
But what we've got here isn't a list comprehension.

226
00:17:45.910 --> 00:17:48.710
This is what's called a generator expression.

227
00:17:48.730 --> 00:17:50.080
Now I said that they were similar

228
00:17:50.320 --> 00:17:52.320
and we'll come back to this in a later video.

229
00:17:52.630 --> 00:17:58.030
But for now what I'll do is I'll undo those changes, so we've got our list comprehension code back, the

230
00:17:58.210 --> 00:18:02.020
left and right square brackets, and I'm going to close all these files

231
00:18:02.020 --> 00:18:08.170
other than centre.text.py. I'll leave the project pane opened.

232
00:18:08.420 --> 00:18:11.560
We're going to use that again later, and I'll see you in the next video.
