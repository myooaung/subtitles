0
1
00:00:05,350 --> 00:00:07,550
So it's now time to talk about ranges.
1

2
00:00:07,550 --> 00:00:10,690
Now we've actually used ranges
a few times in for loops, and
2

3
00:00:10,690 --> 00:00:13,490
we use that to loop
a specified number of times.
3

4
00:00:13,490 --> 00:00:16,920
So it's time we take a more detailed
look at what they actually are.
4

5
00:00:16,920 --> 00:00:21,030
So in Python 3 range is
actually a built in type.
5

6
00:00:21,030 --> 00:00:23,900
But in Python 2,
it was implemented as a function.
6

7
00:00:23,900 --> 00:00:27,760
So in a simplest form, we can create
a range just by specifying an n value.
7

8
00:00:27,760 --> 00:00:33,140
So we could do something
like print(range(100)).
8

9
00:00:33,140 --> 00:00:38,310
And if we actually run that, And
9

10
00:00:38,310 --> 00:00:41,260
return a range,
which is a range from 0, 130.
10

11
00:00:41,260 --> 00:00:45,320
It's not really terribly exciting,
but what it does do is show you to get
11

12
00:00:45,320 --> 00:00:48,830
back a range object with a start of 0 and
a stop of 100.
12

13
00:00:48,830 --> 00:00:51,530
Printing a range object
like that isn't useful.
13

14
00:00:51,530 --> 00:00:52,490
And when they come into their own,
14

15
00:00:52,490 --> 00:00:57,040
you get the most ever, you start iterating
over, for example, to cause the for
15

16
00:00:57,040 --> 00:01:00,130
loop to repeat a block of code
many times as we've actually seen.
16

17
00:01:00,130 --> 00:01:03,520
We can also use them to use them to
create another object such as the list.
17

18
00:01:03,520 --> 00:01:09,380
So, as an example we can come back here
and actually type my under score list,
18

19
00:01:09,380 --> 00:01:16,110
= listrange(10),
19

20
00:01:16,110 --> 00:01:19,080
and now if we actually print my list.
20

21
00:01:20,100 --> 00:01:20,710
Actually run that.
21

22
00:01:22,020 --> 00:01:24,760
You notice how we've automatically
got these 10 elements through from
22

23
00:01:24,760 --> 00:01:29,990
zero to nine just by actually
using the range and passing
23

24
00:01:29,990 --> 00:01:34,330
the end range of 10 and automatically
created those elements for us.
24

25
00:01:34,330 --> 00:01:38,050
So again, if you're passing a single value
to range the value's taken to be the end
25

26
00:01:38,050 --> 00:01:41,030
value and the start value defaults
to zero in that scenario,
26

27
00:01:41,030 --> 00:01:43,690
as you can see that with the first
element being zero right here at the top.
27

28
00:01:43,690 --> 00:01:45,010
But you can also specify start range,
28

29
00:01:45,010 --> 00:01:46,710
there's nothing stopping
you from doing that.
29

30
00:01:46,710 --> 00:01:50,590
So you could do something like,
30

31
00:01:50,590 --> 00:01:55,630
even = list(range (0, 10, 2).
31

32
00:01:55,630 --> 00:02:01,080
Or we can try odd = list(range (1, 10, 2).
32

33
00:02:01,080 --> 00:02:06,870
Print (even), print (odd).
33

34
00:02:06,870 --> 00:02:09,040
That's just another more
extended use of the range.
34

35
00:02:10,580 --> 00:02:12,450
And for some reason we've
some extra brackets here,
35

36
00:02:12,450 --> 00:02:14,210
we'll get rid of those
brackets to make it valid.
36

37
00:02:14,210 --> 00:02:15,590
We'll try running that.
37

38
00:02:15,590 --> 00:02:19,710
And we can see now we've got 0,
2, 4, 6, 8, and 1, 3, 5, 7, 9.
38

39
00:02:19,710 --> 00:02:23,610
So we're creating the list called even,
the first one from a range.
39

40
00:02:23,610 --> 00:02:26,840
And we put the range of 0 as
the start ten as the end, but
40

41
00:02:26,840 --> 00:02:31,160
you also use the steps,
that third number there to skip by two.
41

42
00:02:31,160 --> 00:02:33,240
So we've actually got only even numbers.
42

43
00:02:33,240 --> 00:02:36,830
By starting on zero and
skipping two with two, four, six, eight.
43

44
00:02:36,830 --> 00:02:37,870
And likewise with the odd.
44

45
00:02:37,870 --> 00:02:38,980
We did the opposite there.
45

46
00:02:38,980 --> 00:02:40,110
We started on one.
46

47
00:02:40,110 --> 00:02:42,500
Still went to the end range of ten,
but skip by two, and
47

48
00:02:42,500 --> 00:02:44,820
then went to skip only the odd numbers.
48

49
00:02:44,820 --> 00:02:47,950
So one, three, five, seven,
nine in this example.
49

50
00:02:47,950 --> 00:02:51,230
Now Python 3 ranges are very
efficient in terms of memory.
50

51
00:02:51,230 --> 00:02:57,990
In other words,
if you did something like this,
51

52
00:02:57,990 --> 00:03:03,770
range[0,10] or range[0, say.
52

53
00:03:03,770 --> 00:03:07,380
They're actually both gonna use the same
amount of memory, believe it or not.
53

54
00:03:07,380 --> 00:03:08,010
So that's fine.
But
54

55
00:03:08,010 --> 00:03:11,490
if we actually change the code up here,
and actually start using large numbers,
55

56
00:03:11,490 --> 00:03:13,890
like instead of 10, putting 1,000, and
56

57
00:03:13,890 --> 00:03:17,900
1,000 for both of those, that will
still actually work, as you can see.
57

58
00:03:17,900 --> 00:03:20,990
Notice there was a slight pause there, and
58

59
00:03:20,990 --> 00:03:22,760
now we've actually got
a huge set of numbers.
59

60
00:03:22,760 --> 00:03:26,250
And It's literally going to be
1,000 elements, as you can see,
60

61
00:03:26,250 --> 00:03:28,100
right through to 1,000 there.
61

62
00:03:28,100 --> 00:03:30,490
998, 999 were the last elements,
62

63
00:03:30,490 --> 00:03:33,520
bearing in the mind the last
one's always not used.
63

64
00:03:33,520 --> 00:03:36,750
So you do need to go steady with
the zeroes though, because if you made
64

65
00:03:36,750 --> 00:03:41,550
the value say 10,000, it can actually take
quite a while for the lists to be created.
65

66
00:03:41,550 --> 00:03:44,020
And each list will occupy
a fair amount of memory.
66

67
00:03:44,020 --> 00:03:47,380
So the range itself is always
gonna return the same amount.
67

68
00:03:47,380 --> 00:03:52,630
I will use the same amount of space, but
when you're creating a list of that range
68

69
00:03:52,630 --> 00:03:55,830
then of course the list has to actually
expand out to use all the elements within
69

70
00:03:55,830 --> 00:03:58,960
that range and it can actually
start taking up a lot of memory.
70

71
00:03:58,960 --> 00:04:02,900
Kind of interesting in python2 ranges
didn't behave like that at all.
71

72
00:04:02,900 --> 00:04:06,190
Old bellies were calculated and
returned as a sequence,
72

73
00:04:06,190 --> 00:04:09,820
remember we talked about sequences
to a degree in this course,
73

74
00:04:09,820 --> 00:04:14,640
Python 2 also had an x range that behaved
much like the Python 3 range object does.
74

75
00:04:14,640 --> 00:04:20,220
And Python 3 diversion 2x range has become
range and there's no longer an x range.
75

76
00:04:20,220 --> 00:04:25,030
So if you're converting path from
two code and you actually see the x
76

77
00:04:25,030 --> 00:04:29,560
range being used, you can just change
x range to range for pathway three and
77

78
00:04:29,560 --> 00:04:30,900
it's going to work just fine.
78

79
00:04:30,900 --> 00:04:33,560
Now ranges don't support
all the operations
79

80
00:04:33,560 --> 00:04:35,670
that you can perform on sequences.
80

81
00:04:35,670 --> 00:04:39,020
The reason for that is largely
because they represent sequences
81

82
00:04:39,020 --> 00:04:41,090
that follow a defined pattern.
82

83
00:04:41,090 --> 00:04:45,360
And so for example the multiplication
operator to repeat a range is not allowed,
83

84
00:04:45,360 --> 00:04:47,850
nor is concatenation,
pending in other words.
84

85
00:04:47,850 --> 00:04:51,280
Other than that you can perform all
the usual sequence operations on ranges.
85

86
00:04:51,280 --> 00:04:54,660
Now we didn't actually cover the index
method when dealing with two sequences,
86

87
00:04:55,740 --> 00:04:57,810
when we actually discussed strings and
lists.
87

88
00:04:57,810 --> 00:04:59,660
But I'm gonna show you
how to do that now and
88

89
00:04:59,660 --> 00:05:02,900
how you can access individual element
index over sequence using it.
89

90
00:05:02,900 --> 00:05:04,220
So it's gonna come in handy for our code.
90

91
00:05:04,220 --> 00:05:08,530
So I'm just gonna select that and
comment that code out.
91

92
00:05:08,530 --> 00:05:13,650
And let's just top something like
my underscore string equals,
92

93
00:05:13,650 --> 00:05:14,970
and we'll do all the letters
of the alphabet.
93

94
00:05:14,970 --> 00:05:19,090
A, B, C, D, E, F, G, H,
I, J, K, L, M, N, O, P,
94

95
00:05:19,090 --> 00:05:23,180
Q, R, S, T, U, V, W, X, Y, Z, or Zed.
95

96
00:05:23,180 --> 00:05:24,370
As we say in Australia.
96

97
00:05:24,370 --> 00:05:33,520
If I do a print(my_string.Index e).
97

98
00:05:33,520 --> 00:05:37,740
And if I do a print my
underscore string for,
98

99
00:05:37,740 --> 00:05:44,590
eventually run that So
99

100
00:05:44,590 --> 00:05:49,980
the index of the character e is actually
the character position four in the string.
100

101
00:05:49,980 --> 00:05:51,100
Remember, we count from zero.
101

102
00:05:51,100 --> 00:05:56,650
So zero was A, one is B,
two is C, three is D, four is E.
102

103
00:05:56,650 --> 00:05:59,970
So the index, dot index is
actually returning the number.
103

104
00:05:59,970 --> 00:06:02,460
Pointing to the character position
104

105
00:06:02,460 --> 00:06:04,960
of whatever you've actually
pass here as the parameter.
105

106
00:06:04,960 --> 00:06:07,450
So we can also apply indexes.
106

107
00:06:07,450 --> 00:06:10,560
Though the index function
to ranges as well.
107

108
00:06:10,560 --> 00:06:11,500
So we can so
108

109
00:06:11,500 --> 00:06:17,580
something like small underscore
decimals equals range zero, ten.
109

110
00:06:17,580 --> 00:06:22,010
Then we're gonna do print small decimals.
110

111
00:06:22,010 --> 00:06:27,610
We can also do print
small decimals.index3.
111

112
00:06:27,610 --> 00:06:31,980
If we actually run that,
we actually get the value three there,
112

113
00:06:31,980 --> 00:06:35,240
being the third,
being effectively the fourth position.
113

114
00:06:35,240 --> 00:06:39,660
Cuz, of course, the counting again started
from ten, so zero, one, two, three.
114

115
00:06:39,660 --> 00:06:42,820
And you can interestingly enough
also index into the range.
115

116
00:06:42,820 --> 00:06:48,140
So for example,
if you created a large range,
116

117
00:06:48,140 --> 00:06:53,600
like if we did something
like odd = range(1,
117

118
00:06:53,600 --> 00:06:57,920
10000, 2) Print odd.
118

119
00:06:59,080 --> 00:07:00,510
Bearing in mind this is just a range,
119

120
00:07:00,510 --> 00:07:03,170
not a list of ranges as we
did earlier in the video.
120

121
00:07:03,170 --> 00:07:07,030
We can actually do print, Odd, 985.
121

122
00:07:07,030 --> 00:07:07,770
Run it five.
122

123
00:07:10,810 --> 00:07:16,030
And you can see that actually gives us
the value from the 985th odd number,
123

124
00:07:16,030 --> 00:07:19,220
which is pretty handy and
also pretty fast to process as well.
124

125
00:07:19,220 --> 00:07:23,860
And it's also possible to check if a value
that you pass is actually in a range and
125

126
00:07:23,860 --> 00:07:25,700
you can use that using the in operator.
126

127
00:07:25,700 --> 00:07:31,960
So we can do something
like sevens equals range.
127

128
00:07:31,960 --> 00:07:35,690
We'll start from seven.
128

129
00:07:35,690 --> 00:07:37,250
Seven.
129

130
00:07:37,250 --> 00:07:41,420
We can put x equal int, input.
130

131
00:07:43,540 --> 00:07:48,710
Please enter a positive
number less than one million.
131

132
00:07:52,010 --> 00:07:56,510
And we can put if x in sevens,
132

133
00:07:56,510 --> 00:08:03,080
print is divisible using the replacement
133

134
00:08:03,080 --> 00:08:07,770
field, divisible by seven.
134

135
00:08:08,850 --> 00:08:11,480
Format x.
135

136
00:08:11,480 --> 00:08:12,790
So we can actually run that.
136

137
00:08:14,870 --> 00:08:16,550
Please enter a positive
number less than 1 million.
137

138
00:08:16,550 --> 00:08:21,380
So you could do something like say, 987.
138

139
00:08:21,380 --> 00:08:22,650
987 is divisible by seven.
139

140
00:08:22,650 --> 00:08:26,830
And let's do a number that we
know isn't divisible by seven.
140

141
00:08:26,830 --> 00:08:28,230
50.
141

142
00:08:28,230 --> 00:08:30,850
We don't get any error,
don't get any messages,
142

143
00:08:30,850 --> 00:08:34,270
I should say, because the number
50 isn't divisible by seven.
143

144
00:08:34,270 --> 00:08:38,060
Because, again, just to confirm, we
started a range starting at number seven,
144

145
00:08:38,060 --> 00:08:39,490
and went through to a million,
145

146
00:08:39,490 --> 00:08:43,310
and only actually showing numbers that
were incremented by seven each time.
146

147
00:08:43,310 --> 00:08:45,760
You can see that ranges can
actually be very powerful.
147

148
00:08:45,760 --> 00:08:50,560
In addition to that you can also
apply slice ranges as well.
148

149
00:08:50,560 --> 00:08:52,940
So we can print our small decimals
that we defined above again so
149

150
00:08:52,940 --> 00:08:56,340
small decimals just to confirm
we're on that same page.
150

151
00:08:56,340 --> 00:09:04,140
Then we can also do my_range
= small decimals 2, ::2.
151

152
00:09:04,140 --> 00:09:06,480
Print my range just to see what it does.
152

153
00:09:06,480 --> 00:09:07,400
Print my range.
153

154
00:09:07,400 --> 00:09:11,550
And print(my_range.index(4), and
154

155
00:09:11,550 --> 00:09:16,010
then actually run that after you
just actually answered a question.
155

156
00:09:16,010 --> 00:09:17,290
So it was 50 there.
156

157
00:09:17,290 --> 00:09:18,840
There's the two other ranges.
157

158
00:09:18,840 --> 00:09:22,310
So you can see that my_range has become
the range from zero to ten in steps of
158

159
00:09:22,310 --> 00:09:24,740
two, by just actually entering ::2 there.
159

160
00:09:24,740 --> 00:09:28,800
And the index of the value
4 in the range is 2.
160

161
00:09:28,800 --> 00:09:31,990
And of course the range is 0,
2, 4, 6, and 8.
161

162
00:09:31,990 --> 00:09:34,890
Things to remember,
is that by not specifying the start and or
162

163
00:09:34,890 --> 00:09:38,740
stop, it'll actually default to
the start and it'll end on the sequence.
163

164
00:09:38,740 --> 00:09:42,260
So in other words specifying colon,
colon two as we did here.
164

165
00:09:42,260 --> 00:09:46,380
What that means is to slice all
of the small decimal elements but
165

166
00:09:46,380 --> 00:09:47,700
stepping every other value.
166

167
00:09:47,700 --> 00:09:50,330
So ::2 was skipping one each time.
167

168
00:09:50,330 --> 00:09:52,590
So just to clarify that
with another example.
168

169
00:09:52,590 --> 00:09:54,480
Now we'll just comment
some of this code out now.
169

170
00:09:57,930 --> 00:10:05,240
So if we do something like decimals
equals range, 0, 100 print decimals.
170

171
00:10:05,240 --> 00:10:09,990
My_range = decimals.
171

172
00:10:09,990 --> 00:10:17,750
It would be something like
three 43 print my range.
172

173
00:10:19,700 --> 00:10:22,180
For I in my underscore range.
173

174
00:10:23,720 --> 00:10:28,600
print(i) and
we can do just to separate it a little bit
174

175
00:10:28,600 --> 00:10:32,990
put = times 40 so
put a bit of a separator there.
175

176
00:10:34,870 --> 00:10:38,320
And just add a bit of space here.
176

177
00:10:38,320 --> 00:10:41,930
And then we'll finish off with a for
177

178
00:10:41,930 --> 00:10:46,760
i in range(3, 40, 3):, print(i).
178

179
00:10:46,760 --> 00:10:48,140
Let's get rid of some of those lines now.
179

180
00:10:50,020 --> 00:10:51,170
Okay, so if we actually run that.
180

181
00:10:53,110 --> 00:10:54,780
You can actually see what's happened here.
181

182
00:10:54,780 --> 00:10:58,110
So, the my_range has been created
by taking a slice from decimals
182

183
00:10:58,110 --> 00:10:59,500
to return a new range.
183

184
00:10:59,500 --> 00:11:03,310
So as a result of that it shouldn't come
as any surprise that the last two ranges
184

185
00:11:03,310 --> 00:11:05,660
can actually be tested for
equality and return true.
185

186
00:11:05,660 --> 00:11:09,360
So in other words we can
actually come back here and
186

187
00:11:09,360 --> 00:11:11,930
actually do something like this.
187

188
00:11:11,930 --> 00:11:19,010
print(my_range) Is equal to range (3,
40, 3).
188

189
00:11:19,010 --> 00:11:21,430
Actually run that.
189

190
00:11:21,430 --> 00:11:24,240
We actually get the answer true,
because they're actually considered,
190

191
00:11:24,240 --> 00:11:26,270
well they actually are, technically equal.
191

192
00:11:26,270 --> 00:11:27,580
So I'm actually gonna
finish the video here.
192

193
00:11:27,580 --> 00:11:31,390
In the next video we're going to continue
on and go through a few more examples of
193

194
00:11:31,390 --> 00:11:33,620
range, and then I'm gonna
come up with a challenge for
194

195
00:11:33,620 --> 00:11:35,160
you to help your understanding of range.
195

196
00:11:35,160 --> 00:11:36,500
So I'll see you in the next video.
