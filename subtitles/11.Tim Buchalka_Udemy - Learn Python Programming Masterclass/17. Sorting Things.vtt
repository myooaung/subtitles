WEBVTT
1

00:00:05.130  -->  00:00:10.320
Alright, so let's have a discussion now about
sorting things. So we've seen that lists

2

00:00:10.320  -->  00:00:14.250
have their own sort method which sorts
the list in place, but you may want to

3

00:00:14.250  -->  00:00:19.240
sort other things besides lists. To do
that, you can use the sorted function.

4

00:00:19.240  -->  00:00:22.560
So let's see some examples of how to use
that. So I'm gonna start off by creating a

5

00:00:22.560  -->  00:00:26.600
new file - let's call it sorting.py.

6

00:00:34.540  -->  00:00:39.460
Alright so the sorted function can be
used to sort any iterable object.

7

00:00:39.460  -->  00:00:43.920
Now we've only seen two iterable objects so
far; strings and lists. So I'm going to

8

00:00:43.920  -->  00:00:50.460
start with a string here. So we're going
to type pangram is equal to, in double

9

00:00:50.460  -->  00:01:02.609
quotes, The quick brown fox jumps over
the lazy dog. A pangram is a phrase that

10

00:01:02.609  -->  00:01:06.720
contains all the letters of an alphabet,
at least once. So an easy way to check

11

00:01:06.720  -->  00:01:12.120
one is to sort it, so let's do that. So on
line three, I'm going to type letter

12

00:01:12.120  -->  00:01:19.420
equals sorted, and in parentheses, pangram. Let's then print that out on line four

13

00:01:19.420  -->  00:01:24.360
with print parentheses letter. Well
actually to be more consistent we should

14

00:01:24.360  -->  00:01:27.540
have made that letters, because it's
actually more than one isn't it.

15

00:01:27.540  -->  00:01:32.189
Alright.
Alright so let's run the program, and

16

00:01:32.189  -->  00:01:36.479
notice that it produced a list. Python
sorted function will take any iterable

17

00:01:36.479  -->  00:01:41.130
but will always return a list, and the
list is in alphabetical order. So you can

18

00:01:41.130  -->  00:01:48.320
see that it started there with eight spaces, and then the letters, as I scroll over,

19

00:01:48.320  -->  00:01:53.260
a right through and including z on
the end.

20

00:01:53.260  -->  00:01:57.060
Now uppercase letters sort before
lowercase, and that's why we've got the

21

00:01:57.060  -->  00:02:01.770
capital T before any of the other
letters - if I go back, we can see that

22

00:02:01.770  -->  00:02:06.160
back there, to the left hand side. And
I'll come back to that point shortly.

23

00:02:06.160  -->  00:02:10.580
Also you probably noticed that some
letters are duplicated. It's not possible

24

00:02:10.590  -->  00:02:15.120
to produce an English pangram where each
letter only appears once, not without

25

00:02:15.120  -->  00:02:18.510
using abbreviations or loan words from
other languages.

26

00:02:18.510  -->  00:02:24.870
So in this case, e is repeated three
times, h is repeated twice, and also o is

27

00:02:24.870  -->  00:02:33.960
repeated four times. It has also two
letter r's, and two u's as well.

28

00:02:33.960  -->  00:02:37.319
Each letter does appear at least once,
though, and that's much easier to check

29

00:02:37.320  -->  00:02:42.400
when the list is sorted. So that's the
sorted function - you give it an interable

30

00:02:42.400  -->  00:02:47.340
and it returns a list containing all the
items in order. Now we can also sort

31

00:02:47.340  -->  00:02:52.900
numbers. Let's have a go at doing that. So
on line six I'm going to type numbers

32

00:02:52.900  -->  00:03:03.540
equals, left and right square brackets, 2.3,
4.5, 8.7, 3.1, 9.2,

33

00:03:03.540  -->  00:03:05.340
and finish with 1.6,

34

00:03:05.340  -->  00:03:08.240
and obviously we've got our
right square bracket. Then on the

35

00:03:08.240  -->  00:03:15.180
next line, we'll type sorted underscore 
numbers is equal to sorted parentheses

36

00:03:15.180  -->  00:03:20.879
numbers. Then we'll print out the value,
print parentheses, oops,

37

00:03:20.879  -->  00:03:29.010
sorted underscore numbers, like so. So if
we run the program now, we can see that the

38

00:03:29.010  -->  00:03:32.500
list that's been outputted contains the
values in numerical order.

39

00:03:32.500  -->  00:03:36.359
Once again, notice that we get a list
returned here, and the difference here

40

00:03:36.359  -->  00:03:40.650
was this time we passed a list to the
sorted function, but got a different list

41

00:03:40.650  -->  00:03:45.900
back. And that's an important point - we
get a different list back. And to confirm

42

00:03:45.900  -->  00:03:50.489
that, if I go and add some code on
line nine to print numbers - the original

43

00:03:50.489  -->  00:03:56.340
list. We run that - you can see that
numbers are still in the random order or,

44

00:03:56.340  -->  00:04:00.359
in fact, the order that we typed it in
on line six. Now we're dealing with a

45

00:04:00.359  -->  00:04:04.169
list here. That means we could have used
the sort method that lists have, and that

46

00:04:04.169  -->  00:04:07.769
we've used previously. I'm mentioning
this because it's something that

47

00:04:07.769  -->  00:04:11.700
students have found confusing. When
dealing with a list, what's the

48

00:04:11.700  -->  00:04:16.919
difference between sort and sorted? Well
let's use the sort method to see. So I'm

49

00:04:16.919  -->  00:04:21.060
going to just close the run window down
there, and we'll type on line eleven:

50

00:04:21.060  -->  00:04:29.380
numbers dot sort parentheses, and on the
next line we'll print numbers,

51

00:04:29.380  -->  00:04:33.560
in parentheses, so print parentheses
numbers

52

00:04:33.560  -->  00:04:38.760
Alright so let's run that, and you can
see with that next line of output, the

53

00:04:38.760  -->  00:04:43.160
sort method has sorted the list. We no
longer have the list in random order

54

00:04:43.160  -->  00:04:47.610
because the sort method changes the list
that we call it on. In this case, because

55

00:04:47.610  -->  00:04:52.710
we called numbers dot sort, the numbers
list is now sorted. Now when we pass

56

00:04:52.710  -->  00:04:58.920
numbers to the sorted method, back up
here on line 7, the list wasn't altered.

57

00:04:58.920  -->  00:05:03.720
Sorted, in fact, created a new list and
left the original one unchanged. So that

58

00:05:03.720  -->  00:05:08.010
explains the difference in the way that
we call the two functions, on lines 7 and

59

00:05:08.010  -->  00:05:13.530
11. On line 7, because sorted returns a
new list, we assigned its return value to

60

00:05:13.530  -->  00:05:18.630
another variable: sorted underscore
numbers. On line 11, on the other hand, the

61

00:05:18.630  -->  00:05:22.860
sort method sorts the list in place. That
means we don't assign the return value

62

00:05:22.860  -->  00:05:27.020
to another variable. In fact, this is
something else that can be confusing -

63

00:05:27.020  -->  00:05:31.460
assigning it to a variable doesn't give
it the result you might expect. So let's

64

00:05:31.460  -->  00:05:37.320
do that to see. So on line 11, what I'm going
to do is type, at the start of that line,

65

00:05:37.320  -->  00:05:47.700
another underscore sorted underscore
numbers is equal to numbers dot sort.

66

00:05:47.700  -->  00:05:50.720
We're going to leave the print for print
numbers there on line 12 but on line

67

00:05:50.730  -->  00:05:54.270
13 we're going to add print
parentheses another underscore sorted

68

00:05:54.270  -->  00:05:59.580
underscore numbers. Now if you're using
IntelliJ, which I am, or PyCharm, you

69

00:05:59.580  -->  00:06:03.660
may get a warning on line 11: function
sort doesn't return anything. If I hover

70

00:06:03.660  -->  00:06:08.010
over that, you can see that, in fact,
we're getting that warning. And if we run

71

00:06:08.010  -->  00:06:14.320
this now, you can see we get None printed
out as the last line of the output.

72

00:06:14.320  -->  00:06:18.900
So you'll find that most of the methods
that modify an object in place, like sort

73

00:06:18.900  -->  00:06:23.730
does, return None. If you expected another
underscore sorted underscore

74

00:06:23.730  -->  00:06:32.100
numbers to contain a list, you'd be disappointed. More importantly, your code wouldn't work.

75

00:06:32.100  -->  00:06:36.780
So there's very rarely, if ever, a need to
assign the result of a sort method to a

76

00:06:36.780  -->  00:06:40.840
variable. Because you shouldn't do it and
I don't want to leave you with bad code,

77

00:06:40.840  -->  00:06:45.759
I'm gonna put line 11 back to how it was
and delete line 13. I'm just going to

78

00:06:45.759  -->  00:06:54.339
undo that, like so. Alright, so you can
also pass a literal to sorted. Remember

79

00:06:54.339  -->  00:06:58.449
that you can use a literal value
wherever a variable can be used. Now if that

80

00:06:58.449  -->  00:07:02.949
doesn't make sense, review the video on
expressions in section 3. So let's have a go

81

00:07:02.949  -->  00:07:09.480
at doing that. On line 14 I'm going to
type missing underscore letter equals

82

00:07:09.480  -->  00:07:17.439
sorted parenthesis, and in double quotes,
The quick brown fox jumped over the lazy

83

00:07:17.440  -->  00:07:25.900
dog. We've got our double quote and right
parenthesis, and then on the next line,

84

00:07:25.900  -->  00:07:35.880
print parenthesis and missing underscore
letter. Now if you run the program,

85

00:07:35.880  -->  00:07:39.309
we get a list that contains all the
letters sorted alphabetically, and if we

86

00:07:39.309  -->  00:07:47.960
scroll over, it's easy to see there, that
s is missing. The phrase isn't a pangram.

87

00:07:47.960  -->  00:07:53.960
So on line three we passed a variable to
sorted. On line 14, on the other hand,

88

00:07:53.960  -->  00:07:58.839
we passed a string literal. So you probably
already knew you could do that. I wanted

89

00:07:58.839  -->  00:08:02.139
to review it in case it wasn't obvious.
We've covered a lot of stuff since

90

00:08:02.139  -->  00:08:06.369
section three, after all. There's another
reason I want to add that code: it's very

91

00:08:06.369  -->  00:08:10.539
easy to cause an error that can take
hours to figure out. Once you've done it

92

00:08:10.539  -->  00:08:14.469
a couple of times, you tend to spot it
very quickly, thereafter. But that first

93

00:08:14.469  -->  00:08:19.300
time it can have you tearing your hair
out, so I wanted to try and save your hair.

94

00:08:19.300  -->  00:08:25.120
So looking at line seven, I call the
variable sorted underscore numbers. Now

95

00:08:25.120  -->  00:08:30.060
that's a slightly long name and you may
have been tempted to call it sorted, so

96

00:08:30.060  -->  00:08:34.940
let's see how that breaks things. So I'm
going to right click on sorted numbers

97

00:08:34.940  -->  00:08:42.500
and use Refactor, Rename to rename it to sorted.

98

00:08:45.460  -->  00:08:50.120
I click on refactor and that
changes it in both places, where it was

99

00:08:50.130  -->  00:08:54.480
used previously on line seven and also
on line eight. Now if we run the program

100

00:08:54.480  -->  00:09:00.930
at this point, suddenly we've got an
error. Now your IDE might be highlighting

101

00:09:00.930  -->  00:09:06.000
a problem on line 14.
You can see in my case it says line 14,

102

00:09:06.000  -->  00:09:11.100
and basically the error there, as you can
see, it says list object is not callable.

103

00:09:11.100  -->  00:09:16.440
So the problem's actually caused on line
7, because we've rebound the name sorted

104

00:09:16.440  -->  00:09:22.240
to a list. So it no longer refers to a built
in function - it now refers to our list.

105

00:09:22.240  -->  00:09:27.660
When we tried to call the sorted
function on line 14, we're now trying to

106

00:09:27.660  -->  00:09:33.360
treat a list like a function. So be aware
that Python lets you rebind, or reattach

107

00:09:33.360  -->  00:09:37.260
names to new values, and that even
applies to the names of built-in

108

00:09:37.260  -->  00:09:41.640
functions and classes. So now that you're
aware of it, you'll hopefully be spared

109

00:09:41.640  -->  00:09:45.640
hours of frustration with code that
looks like it should work but doesn't.

110

00:09:45.640  -->  00:09:49.920
So be very careful with your variable names.
Alright, so let's end the video here

111

00:09:49.920  -->  00:09:53.880
and in the next one, we'll see how to
sort texts without worrying about upper

112

00:09:53.880  -->  00:09:58.160
and lower case. See you in the next video.
