WEBVTT
1

00:00:04.220  -->  00:00:09.020
We've used strings, in earlier examples, to print messages on the screen.

2

00:00:09.020  -->  00:00:12.540
Now we're going to look at some of the other cool things you can do with them.

3

00:00:12.540  -->  00:00:15.760
So open the Hello World project and create a new Python file.

4

00:00:15.760  -->  00:00:21.560
So I'm gonna do that, and I'm going to call this one strings2.

5

00:00:27.560  -->  00:00:32.080
It's alright to use digits in your file names, by the way, but avoid starting the name with a digit.

6

00:00:32.080  -->  00:00:35.600
We'll be seeing how one program can import code from another program,

7

00:00:35.600  -->  00:00:38.820
but some file names can cause problems with that.

8

00:00:38.820  -->  00:00:44.100
So use the same rules that apply to Python variable names, and you won't get any problems.

9

00:00:44.100  -->  00:00:48.220
Alright, so strings are one of the Python sequence data types,

10

00:00:48.220  -->  00:00:52.040
which makes sense because they are a sequence of characters.

11

00:00:52.040  -->  00:00:55.000
We've seen how to print them out and concatenate strings together,

12

00:00:55.000  -->  00:00:59.500
but we can also pick out individual characters or sub strings.

13

00:00:59.500  -->  00:01:01.180
So let's type some code here.

14

00:01:01.180  -->  00:01:12.140
So I'm gonna start by typing parrot is equal to, and in double quotes, "Norwegian Blue".

15

00:01:12.140  -->  00:01:16.140
Then on line 3 I'm going to print, print parentheses parrot,

16

00:01:16.140  -->  00:01:23.460
then on line 5 I'm going to do print parentheses parrot left square bracket 3 right square bracket,

17

00:01:23.460  -->  00:01:26.520
and that should be parrot.

18

00:01:26.520  -->  00:01:30.060
So run the program to check what it does.

19

00:01:30.060  -->  00:01:34.560
So here we're binding the variable called parrot to the string "Norwegian Blue",

20

00:01:34.560  -->  00:01:36.320
and then printing parrot.

21

00:01:36.320  -->  00:01:39.660
We can also print individual characters from the string,

22

00:01:39.660  -->  00:01:42.660
and the last statement prints the letter w.

23

00:01:42.660  -->  00:01:48.000
Now that might seem odd because w is the fourth letter of Norwegian,

24

00:01:48.000  -->  00:01:52.740
but its usual for programming languages to start counting at zero and not one.

25

00:01:52.740  -->  00:01:56.680
So that's parrot, zero in square
brackets is a capital N.

26

00:01:56.680  -->  00:02:01.880
There are 14 characters in Norwegian Blue, numbered from 0 to 13.

27

00:02:01.880  -->  00:02:07.240
So what I'm going to do is add a comment to the code, to show the index positions.

28

00:02:07.240  -->  00:02:09.320
Right so I'm going to come up here to line 1,

29

00:02:09.320  -->  00:02:13.480
and I'm just gonna make a bit of space and paste it in, like so.

30

00:02:13.480  -->  00:02:20.820
So the character N is at position zero,
and we've already seen that w is at index position 3.

31

00:02:20.820  -->  00:02:26.160
The last character in the string, the e in Blue, is at position 13,

32

00:02:26.160  -->  00:02:29.880
so that gives 14 characters, numbered from 0 to 13.

33

00:02:29.880  -->  00:02:35.560
If we try to print parrot 14 in square brackets, we'll get an error: index out of range.

34

00:02:35.560  -->  00:02:43.800
So the number inside the square brackets on line 7 is called an index, and it's used to index into the string.

35

00:02:43.800  -->  00:02:46.773
So notice that I've used square brackets on line 7.

36

00:02:46.780  -->  00:02:49.320
There are 4 uses of square brackets in Python,

37

00:02:49.320  -->  00:02:53.320
and they all involve accessing individual items in something.

38

00:02:53.320  -->  00:02:56.760
We'll see them used again when we look at dictionaries and sets.

39

00:02:56.760  -->  00:03:00.820
For now though, it's time for a mini-challenge.

40

00:03:00.820  -->  00:03:03.260
Throughout the course we'll have some challenges.

41

00:03:03.260  -->  00:03:06.440
These give you a chance to practice what we've done so far,

42

00:03:06.440  -->  00:03:10.680
because doing is more effective to learn than just watching.

43

00:03:10.680  -->  00:03:14.060
So don't think of these challenges as tests because they're not that.

44

00:03:14.060  -->  00:03:17.580
You can't fail the challenges as such, because that's not what they're for.

45

00:03:17.580  -->  00:03:23.420
They're there as part of the learning experience to help you understand the Python programming language better.

46

00:03:23.520  -->  00:03:29.340
So if you spend time trying a challenge, but have to look at my solution, that's fine.

47

00:03:29.340  -->  00:03:31.200
If you go straight to my solution,

48

00:03:31.200  -->  00:03:36.800
you won't get as much out of them, as if you will if you spend some time trying to solve the challenge first.

49

00:03:36.860  -->  00:03:38.840
So your challenge is as follows:

50

00:04:03.740  -->  00:04:10.160
So pause the video now and have a go at this, and come back when you're ready to see my solution.

51

00:04:10.160  -->  00:04:13.100
Alrighty so welcome back. How did you go? Did you manage to solve it?

52

00:04:13.100  -->  00:04:15.460
Did you get the correct output?

53

00:04:15.460  -->  00:04:20.120
Well, to get the correct output, we need to use indexing which we've discussed,

54

00:04:20.120  -->  00:04:23.880
and we need to print the correct characters out of the string Norwegian Blue.

55

00:04:23.880  -->  00:04:28.980
The program is already printing the w as we saw, so the next character we want is an e.

56

00:04:28.980  -->  00:04:32.520
Now there are two that we could use, at positions 4 and 13.

57

00:04:32.520  -->  00:04:37.680
I'm going to use the one at index position 4, so I'm going to go ahead and do that.

58

00:04:37.680  -->  00:04:47.360
print parenthesis parrot square bracket 4 and the closing right square bracket, and we've got our normal right parenthesis.

59

00:04:47.360  -->  00:04:51.180
So next we need a space and that's set at position 9 in our string.

60

00:04:51.180  -->  00:04:58.680
So I'm going to type print parenthesis parrot, left square bracket, and 9,

61

00:04:58.680  -->  00:05:04.180
and we get the word w i n by printing the characters at positions 3, 6 and 8.

62

00:05:04.180  -->  00:05:09.480
So I'm going to quickly do a copy and and paste here to save a bit of time.

63

00:05:09.480  -->  00:05:16.920
So it's positions 3, 6 and 8.

64

00:05:16.920  -->  00:05:20.480
Alright so I'm gonna run the program to check that it works,

65

00:05:20.480  -->  00:05:25.100
and you can see we've got Norwegian Blue output at the top, and then we've got we space win

66

00:05:25.100  -->  00:05:29.960
showing as output, one character at a time, and obviously, that was reading downwards.

67

00:05:29.960  -->  00:05:34.200
Alright, so when I run the program, as you saw, it prints we win reading downwards.

68

00:05:34.200  -->  00:05:37.780
Now if you got the same output and you used indexing to do it, then well done.

69

00:05:37.780  -->  00:05:39.900
Now if you struggled with this concept,

70

00:05:39.900  -->  00:05:44.900
watch the video again and experiment until you're comfortable indexing a sequence,

71

00:05:44.900  -->  00:05:46.485
and try it with different strings as well.

72

00:05:46.485  -->  00:05:50.280
Alright so I'll stop the video here, and in the next one we're going to look at another way

73

00:05:50.280  -->  00:05:52.360
you can index a sequence type.

74

00:05:52.360  -->  00:05:55.420
See you in the next video.
