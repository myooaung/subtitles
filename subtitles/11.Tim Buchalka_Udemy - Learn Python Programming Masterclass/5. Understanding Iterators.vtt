WEBVTT
0
1
00:00:05.320 --> 00:00:08.030
So now's actually a good time in
the course to actually discuss a very
1

2
00:00:08.030 --> 00:00:09.390
important feature of Python.
2

3
00:00:09.390 --> 00:00:13.100
And that's actually iterators and
iterable objects.
3

4
00:00:13.100 --> 00:00:17.460
Now an iterator is an object that
represents a stream of a data.
4

5
00:00:17.460 --> 00:00:18.950
So it actually returns the stream,
5

6
00:00:18.950 --> 00:00:22.180
or the actual data in the stream,
one element at a time.
6

7
00:00:22.180 --> 00:00:27.560
Now, any object that supports iteration is
called iterable, and we've actually seen
7

8
00:00:27.560 --> 00:00:31.590
two iterable objects already so far in
the course, and that's strings and lists.
8

9
00:00:31.590 --> 00:00:33.460
So, as we've seen I'm
gonna type in some code.
9

10
00:00:33.460 --> 00:00:37.410
We can actually use a for loop to iterate
over each of the characters in a string.
10

11
00:00:37.410 --> 00:00:38.710
So let's actually type that out.
11

12
00:00:41.150 --> 00:00:44.300
We're gonna use string 1234567890, and
12

13
00:00:44.300 --> 00:00:48.330
you see this a few times now in
the course, something similar.
13

14
00:00:48.330 --> 00:00:49.670
For char in the string.
14

15
00:00:49.670 --> 00:00:52.910
Print char.
15

16
00:00:52.910 --> 00:00:58.960
And if we actually run that, we actually
get the results we can see on the screen.
16

17
00:00:58.960 --> 00:01:03.490
But what's actually happening behind the
scenes is that there's an iterator that's
17

18
00:01:03.490 --> 00:01:04.860
created from the string.
18

19
00:01:04.860 --> 00:01:08.390
And the for loop actually uses
that iterator to return each item
19

20
00:01:08.390 --> 00:01:10.930
of the string, or
each element in this case.
20

21
00:01:10.930 --> 00:01:13.910
1,2, 3, 4, 5, 6, 7, 8, 9, and 0.
21

22
00:01:13.910 --> 00:01:17.760
And when there are no more items
the iterator returns an error and the for
22

23
00:01:17.760 --> 00:01:19.670
loop actually terminates.
23

24
00:01:19.670 --> 00:01:22.910
So, note in this case that the for
loop handles the error, and that's why you
24

25
00:01:22.910 --> 00:01:25.660
haven't actually seen an error when
you're actually running the code.
25

26
00:01:25.660 --> 00:01:29.280
What we'll do is we'll actually
create an iterator from the string
26

27
00:01:29.280 --> 00:01:31.920
rather than letting the for
loop create one implicitly,
27

28
00:01:31.920 --> 00:01:34.690
and that's gonna be easier to see
what's going on when we do that.
28

29
00:01:34.690 --> 00:01:36.470
So use the iter function to do that, so
29

30
00:01:36.470 --> 00:01:38.240
what I'm gonna do is just
comment out the for loop.
30

31
00:01:39.980 --> 00:01:41.540
And what we're going to do is put my and
31

32
00:01:41.540 --> 00:01:46.410
the school interrator, equals hitter,
and that's the function.
32

33
00:01:46.410 --> 00:01:50.260
And then we pass the name, in this case,
the string variable that we want, and
33

34
00:01:50.260 --> 00:01:54.230
if we can actually do a print, my
interrator, so if we actually do that and
34

35
00:01:54.230 --> 00:01:54.900
we actually run that.
35

36
00:01:56.060 --> 00:01:58.690
We actually get a string iterator
object showing on the screen.
36

37
00:01:58.690 --> 00:02:02.490
Now this is actually just showing
the object representation,
37

38
00:02:02.490 --> 00:02:04.840
supposedly a memory
allocation of where that is,
38

39
00:02:04.840 --> 00:02:09.030
but to actually see it in use,
we can do something like this.
39

40
00:02:09.030 --> 00:02:13.890
Print next my iterator and then print next
40

41
00:02:13.890 --> 00:02:18.910
my iterator the rest you do that and
run it.
41

42
00:02:20.630 --> 00:02:23.620
We get the values one and
two as you can see on the screen there so
42

43
00:02:23.620 --> 00:02:26.880
it's actually going through one element
at a time and that's what the next did,
43

44
00:02:26.880 --> 00:02:28.710
it actually returned the first element.
44

45
00:02:28.710 --> 00:02:31.530
Next again and then return the second
element, and so on and so forth.
45

46
00:02:31.530 --> 00:02:35.280
So basically each time that we use next,
in my iterator,
46

47
00:02:35.280 --> 00:02:38.970
we're passing the iterator
that we created in line 5.
47

48
00:02:38.970 --> 00:02:41.140
That's what it's doing,
it's actually going through the list.
48

49
00:02:41.140 --> 00:02:44.570
And obviously again getting back to
the for loop, that was doing that for
49

50
00:02:44.570 --> 00:02:45.790
us essentially behind the scenes.
50

51
00:02:45.790 --> 00:02:49.100
So what we're doing its actually created
the code that more less is happening
51

52
00:02:49.100 --> 00:02:49.980
behind the scenes.
52

53
00:02:49.980 --> 00:02:52.930
So if we wanted to go right through to the
end we could actually create some more.
53

54
00:02:52.930 --> 00:02:57.760
So we've got ten entries, so
if we have another 8, 1, 2, 3, 4, 5, 6,
54

55
00:02:57.760 --> 00:03:02.740
7, 8, so that should actually be ten now,
if we actually run that we actually get
55

56
00:03:02.740 --> 00:03:07.350
all the elements, 1 through to 0
essentially, so you can see there.
56

57
00:03:07.350 --> 00:03:09.880
So that's the exact number of
elements that are in the string.
57

58
00:03:09.880 --> 00:03:11.860
But if we actually now,
add actually one more.
58

59
00:03:11.860 --> 00:03:15.470
So in other words, we know now that
we're already at the end of the string,
59

60
00:03:15.470 --> 00:03:18.080
let's actually see what happens
when we try to go beyond that.
60

61
00:03:18.080 --> 00:03:20.000
So we actually run that.
61

62
00:03:20.000 --> 00:03:21.900
And you can see, we actually get an error.
62

63
00:03:21.900 --> 00:03:24.320
And if we just expand it out so
we can see it.
63

64
00:03:24.320 --> 00:03:28.210
You can it manage to go through and count
through to zero successfully and than it
64

65
00:03:28.210 --> 00:03:33.650
comes off and basically say, a trace
back call last and stop it's duration.
65

66
00:03:33.650 --> 00:03:36.050
And that's basically line 18.
66

67
00:03:36.050 --> 00:03:39.580
Which has, as expected, crashed because
there weren't any more elements.
67

68
00:03:39.580 --> 00:03:42.150
So, once we've covered error
handling in the future,
68

69
00:03:42.150 --> 00:03:45.170
if you have nothing better to do, then you
could actually write all your four loops
69

70
00:03:45.170 --> 00:03:48.380
by explicitly requesting an iterator
using the iter function.
70

71
00:03:48.380 --> 00:03:50.380
And calling next until you get an error,
and this is,
71

72
00:03:50.380 --> 00:03:54.090
again, exactly what the for loop does for
us, it actually does it automatically.
72

73
00:03:54.090 --> 00:03:58.240
It keeps using next until it
sees the stop iteration i error
73

74
00:03:58.240 --> 00:04:00.010
which is this area here on the screen.
74

75
00:04:00.010 --> 00:04:02.940
When it sees that it actually
terminates for us automatically.
75

76
00:04:02.940 --> 00:04:07.210
So the for loop implicitly creates
an iterator from the iterable object
76

77
00:04:07.210 --> 00:04:08.290
that we want to iterate over.
77

78
00:04:08.290 --> 00:04:10.010
Now of course we don't
have to do all that.
78

79
00:04:10.010 --> 00:04:13.900
But it's useful to actually understand how
iterators work, and it'll also become even
79

80
00:04:13.900 --> 00:04:18.500
more useful when we come to creating our
own iterable classes later in the course.
80

81
00:04:18.500 --> 00:04:21.310
Just to help consort like that,
let's just close down the run we're doing.
81

82
00:04:22.640 --> 00:04:23.470
And comment out this code.
82

83
00:04:25.520 --> 00:04:26.490
Now paste that code in again.
83

84
00:04:27.850 --> 00:04:30.150
I just want you to consider
these two loops here.
84

85
00:04:30.150 --> 00:04:32.870
Now let me just get the right
indent levels going.
85

86
00:04:34.920 --> 00:04:36.940
Again, very important to get
your indent levels correct.
86

87
00:04:36.940 --> 00:04:37.830
So consider these two.
87

88
00:04:37.830 --> 00:04:40.060
So the first one's just a standard for
loop.
88

89
00:04:40.060 --> 00:04:42.860
The second one, for_char in iter String.
89

90
00:04:46.120 --> 00:04:48.480
So I consider both of these scenarios,
90

91
00:04:48.480 --> 00:04:51.630
they actually both do
exactly the same thing.
91

92
00:04:51.630 --> 00:04:55.640
But this second example here, is what's
actually happening in the first case.
92

93
00:04:55.640 --> 00:04:57.340
The for up here,
93

94
00:04:57.340 --> 00:05:02.610
it's implicitly creating an iterator
from the iteratable string object.
94

95
00:05:02.610 --> 00:05:06.420
So basically if you're just putting for
char in string, then essentially what's
95

96
00:05:06.420 --> 00:05:11.010
happening behind the scenes is Python is
actually adding this iter to that string.
96

97
00:05:11.010 --> 00:05:13.890
So it was actually creating
that iterator for us.
97

98
00:05:13.890 --> 00:05:15.670
So, it can be very useful
again to know that and
98

99
00:05:15.670 --> 00:05:18.600
you'll be finding out more about
iterators as we move through the course.
99

100
00:05:18.600 --> 00:05:21.110
So, let's just come up
now with a mini challenge
100

101
00:05:21.110 --> 00:05:24.030
to help you understand
iterators a bit more.
101

102
00:05:24.030 --> 00:05:26.150
I'm gonna top that out now.
102

103
00:05:39.290 --> 00:05:43.210
So here is the mini challenge
we've got for iterators.
103

104
00:05:43.210 --> 00:05:46.620
So create a list of items and
you can use either strings or
104

105
00:05:46.620 --> 00:05:49.310
numbers in the list, it doesn't
really matter, and then from that
105

106
00:05:49.310 --> 00:05:53.080
create an iterater u'sing the iter
function that we actually went through.
106

107
00:05:53.080 --> 00:05:55.990
Now, next use a for loop to loop n times.
107

108
00:05:55.990 --> 00:05:58.610
Now, n is the number of
items in your list and
108

109
00:05:58.610 --> 00:06:02.730
each time around the loop use next on
your list to print the next item.
109

110
00:06:02.730 --> 00:06:04.760
And just as a hint there,
use the len function,
110

111
00:06:04.760 --> 00:06:09.070
we've talked about previously, rather than
counting the number of items in the list.
111

112
00:06:09.070 --> 00:06:13.060
So, go away and see if you can figure
that out, and type up some code and
112

113
00:06:13.060 --> 00:06:14.850
get that working, and
when you're ready to come back and
113

114
00:06:14.850 --> 00:06:17.180
compare your code to mine,
I'll be here waiting.
114

115
00:06:17.180 --> 00:06:19.220
So pause the video now, and
I'll see you when you get back.
115

116
00:06:22.500 --> 00:06:23.480
So how did you get on?
116

117
00:06:23.480 --> 00:06:25.700
Did you come up with a good solution for
that?
117

118
00:06:25.700 --> 00:06:28.090
So let's go through with
my implementation, and
118

119
00:06:28.090 --> 00:06:30.500
bearing in mind this is
just a implementation.
119

120
00:06:30.500 --> 00:06:32.570
There's lot's of different
ways to do these things.
120

121
00:06:32.570 --> 00:06:36.860
Let's come up and start by typing
the lists or creating the lists.
121

122
00:06:36.860 --> 00:06:40.380
Which will be my_list =, and
I'm gonna use just the days of the week.
122

123
00:06:40.380 --> 00:06:43.760
So Monday, Tuesday,
123

124
00:06:46.780 --> 00:06:50.460
Wednesday Thursday,
124

125
00:06:50.460 --> 00:06:55.510
Friday, Saturday,
125

126
00:06:55.510 --> 00:06:59.850
Sunday, like so.
126

127
00:06:59.850 --> 00:07:01.440
Next I'm gonna create the iterator.
127

128
00:07:01.440 --> 00:07:05.830
That's my iterator equals iter my_list
128

129
00:07:05.830 --> 00:07:09.760
the iter function creates that iterator,
as we talked about.
129

130
00:07:09.760 --> 00:07:11.890
And then we're gonna go
through using the four loop.
130

131
00:07:11.890 --> 00:07:17.610
So I'm gonna do four i in range zero,
131

132
00:07:17.610 --> 00:07:22.980
I'm using lan to get the number
of elements from the list.
132

133
00:07:22.980 --> 00:07:23.870
Mine is called list.
133

134
00:07:26.210 --> 00:07:30.150
Remembering that the lead in this case
on a list actually returns the number of
134

135
00:07:30.150 --> 00:07:32.680
elements that are actually
existing in the list itself.
135

136
00:07:32.680 --> 00:07:34.220
So, that's the for loop.
136

137
00:07:34.220 --> 00:07:40.270
And then we're gonna use next underscore
item equals equals next my iterator so
137

138
00:07:40.270 --> 00:07:44.150
we're iterating through one element at
a time, so that's giving us the next
138

139
00:07:44.150 --> 00:07:47.690
element, or the next item,
in this case a string from the list.
139

140
00:07:47.690 --> 00:07:49.830
And we're going to print
that out print next item.
140

141
00:07:49.830 --> 00:07:53.480
So that's the solution, so
141

142
00:07:53.480 --> 00:07:57.760
if we actually run that to make sure that
it's working we can see we get Monday,
142

143
00:07:57.760 --> 00:08:00.410
Tuesday, Wednesday, Thursday,
Friday, Saturday, Sunday.
143

144
00:08:00.410 --> 00:08:02.370
And we can see that it's
actually working fine.
144

145
00:08:02.370 --> 00:08:05.190
So the idea of this challenge was
to help you understand iteratives.
145

146
00:08:05.190 --> 00:08:08.260
Now of course you wouldn't want
to access the items in the list
146

147
00:08:08.260 --> 00:08:09.390
in that way normally.
147

148
00:08:09.390 --> 00:08:14.270
You'd probably want to do something a lot
simpler like you've learned earlier
148

149
00:08:14.270 --> 00:08:18.780
that in the course, like four i in
my_list called a list Print(i), and
149

150
00:08:18.780 --> 00:08:21.720
obviously that would
return the same results.
150

151
00:08:24.680 --> 00:08:25.720
Oops, I forgot a call in there.
151

152
00:08:26.910 --> 00:08:30.810
And then again,
that obviously returns the same result.
152

153
00:08:30.810 --> 00:08:35.710
But the point again here was to teach you
what iterators are and how to use them.
153

154
00:08:35.710 --> 00:08:40.460
And as mentioned, later in the course
we'll actually be creating our own classes
154

155
00:08:40.460 --> 00:08:42.160
that use iterable objects.
155

156
00:08:42.160 --> 00:08:44.350
And you'll be understanding a little
bit more about iterators then.
156

157
00:08:44.350 --> 00:08:45.240
So I hope you enjoyed that.
157

158
00:08:45.240 --> 00:08:49.570
And then, next video, we're gonna actually
start looking in more detail at ranges,
158

159
00:08:49.570 --> 00:08:51.460
which I've used a few times
already in the course.
159

160
00:08:51.460 --> 00:08:52.800
So, I'll see you in that next video.
