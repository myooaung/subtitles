WEBVTT
1

00:00:04.799  -->  00:00:08.400
You'll often want to test more
complicated conditions than the simple

2

00:00:08.400  -->  00:00:12.090
ones we've used so far in the course, and
the good news is that Python lets us

3

00:00:12.090  -->  00:00:16.230
produce quite complex expressions. So
what I'm going to do is create a new

4

00:00:16.230  -->  00:00:29.440
file in our project. We're going to call
it conditions.py.

5

00:00:29.440  -->  00:00:36.360
If we wanted to check if someone was of working age, we can test for their age being between 16 and 65, for example.

6

00:00:36.360  -->  00:00:38.850
Now that would get a bit
messy if we tested for their age being

7

00:00:38.850  -->  00:00:44.280
greater than equal to 16 and then used
another test to see if it was less than equal to 65,

8

00:00:44.280  -->  00:00:47.900
but we can perform both
tests in one conditional expression.

9

00:00:47.900  -->  00:00:52.820
So let's have a look at that, so I'm going
to type age equals int input, and obviously

10

00:00:52.830  -->  00:01:00.030
using the parentheses as well, and How
old are you? and a space

11

00:01:00.030  -->  00:01:04.589
and then two right parentheses to close
the line. Then on line 3, we're going

12

00:01:04.589  -->  00:01:09.689
to combine those conditions, as I
mentioned: if age is greater than equal

13

00:01:09.689  -->  00:01:20.420
to 16 and age less than equal to 65 colon.
Then we've going to print Have a good date work,

14

00:01:20.420  -->  00:01:25.240
in double quotes and with parentheses, as you can see. So here, if age is greater than

15

00:01:25.259  -->  00:01:31.229
equal to 16 and is also less than equal
to 65, then the message on line 4

16

00:01:31.229  -->  00:01:36.080
is going to be outputted. So notice that we
had to repeat age in the expressions.

17

00:01:36.080  -->  00:01:40.920
What we have here is a complex
expression made up of two simpler expressions.

18

00:01:40.920  -->  00:01:44.120
Firstly we've got the
expression, age greater than equal to 16.

19

00:01:44.120  -->  00:01:49.920
That's one expression, then we've got
another expression, age less than equal to 65.

20

00:01:49.920  -->  00:01:53.280
So either one of those expressions
can evaluate to true.

21

00:01:53.280  -->  00:01:57.540
The complete expression will only be true with both
parts true.

22

00:01:57.540  -->  00:02:01.340
That's because we use the word and.

23

00:02:02.360  -->  00:02:06.740
Alright, so let's talk about using and.
So let's say that you're asked this question:

24

00:02:06.740  -->  00:02:10.220
Would you like an uncomfortable
seat and an ice-cream?

25

00:02:10.220  -->  00:02:15.220
If you answer yes to that question you may enjoy the ice-cream but you won't be very comfortable.

26

00:02:15.220  -->  00:02:19.820
You've agreed to both parts of the condition.

27

00:02:19.820  -->  00:02:23.600
Now on the other hand, the question may
been phrased as: Would you like an uncomfortable

28

00:02:23.600  -->  00:02:27.560
seat or an ice-cream? Now
that allows you to choose either one of

29

00:02:27.560  -->  00:02:31.370
the options. This analogy falls down
slightly because in English, there's an

30

00:02:31.370  -->  00:02:36.170
implication that you can only have one
or the other. In programming languages,

31

00:02:36.170  -->  00:02:40.910
both conditions could be true. So let's
see the possible results of evaluating

32

00:02:40.910  -->  00:02:45.860
expressions using and, compared to using or.

33

00:02:45.860  -->  00:02:49.780
Alright, so here's the and Truth Table.
So to find out the result of using

34

00:02:49.780  -->  00:02:53.920
and with two conditions, read the value at
the intersection of the two values

35

00:02:53.920  -->  00:02:58.060
that are being ANDed together. So the next
four slides will show the results

36

00:02:58.060  -->  00:03:04.400
for each of the combinations of True and
False. So True and True, as you can see here,

37

00:03:04.400  -->  00:03:07.900
no surprises, is True. True and False, well

38

00:03:07.900  -->  00:03:12.430
that's going to give us a False. False
and True is going to give us a False,

39

00:03:12.430  -->  00:03:17.080
and lastly, False and False gives us a False.

40

00:03:17.080  -->  00:03:21.360
So that was the and truth table. Now let's look at the or Truth Table.

41

00:03:21.360  -->  00:03:25.580
So the or Truth Table works in the same way but the results will be different, of course.

42

00:03:25.580  -->  00:03:29.320
So to find the result of using or with
two conditions, read the value at the

43

00:03:29.320  -->  00:03:34.100
intersection of the two values that are
being ORed together.

44

00:03:34.100  -->  00:03:41.180
So the first one, True or True, well that gives us True.
True or False, that also gives us True.

45

00:03:41.180  -->  00:03:48.800
False or True equals True, and lastly,
False or False, well that'll give us False.

46

00:03:48.800  -->  00:03:52.520
Alright, so that's how AND works,
and also we'd had a brief discussion of

47

00:03:52.520  -->  00:03:55.940
OR, which will be coming up in more
detail. Both parts of the condition for

48

00:03:55.940  -->  00:04:00.940
and, though, have to be true for the overall
condition to evaluate to true.

49

00:04:00.940  -->  00:04:04.960
So I'm gonna run the program now and we'll test that with various inputs, just to make sure

50

00:04:04.960  -->  00:04:10.740
it works as we think it should. So How old
are you? I'm going to enter 34, initially.

51

00:04:10.740  -->  00:04:14.380
We get the message printed out, so that's
working. To test it fully, we should

52

00:04:14.380  -->  00:04:18.120
really enter four more values. We need to
test the value less than 16

53

00:04:18.120  -->  00:04:23.260
and a value greater than 65. So let's start by doing that.

54

00:04:23.260  -->  00:04:25.800
So I'm going to enter 12 for the first test.

55

00:04:25.800  -->  00:04:29.300
We've got no output there. Run it again.

56

00:04:29.300  -->  00:04:35.600
I'm gonna enter 78 this time. No output
again. The final two tests are to make

57

00:04:35.600  -->  00:04:40.780
sure the code works when we enter 16 or 65, so let's try that.

58

00:04:40.780  -->  00:04:44.360
16, we get the message there.

59

00:04:44.360  -->  00:04:51.280
One more time, 65 this time, Have a good day at work, we get the message as well.

60

00:04:51.280  -->  00:04:55.010
So our program, at this point, is doing
what we wanted, but always make sure you

61

00:04:55.010  -->  00:04:59.570
test all paths through your code. Alright,
so in the next video we're going to have

62

00:04:59.570  -->  00:05:03.470
a look at the suggestion that I've got
from IntelliJ on line 3. You can see it

63

00:05:03.470  -->  00:05:09.580
says Simplify chained comparison. We'll
talk about that in the next video.
