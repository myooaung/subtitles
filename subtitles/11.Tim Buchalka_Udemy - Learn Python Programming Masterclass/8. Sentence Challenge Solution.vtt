WEBVTT
1
00:00:05.350 --> 00:00:08.650
Então, como você saiu com um desafio de sentença que estava no último vídeo?

2
00:00:09.100 --> 00:00:10.000
Você conseguiu terminar?

3
00:00:11.080 --> 00:00:16.060
Bem, o primeiro passo é criar uma nova string contendo apenas os caracteres que são letras

4
00:00:16.090 --> 00:00:16.750
ou números.

5
00:00:17.500 --> 00:00:20.800
O que vou fazer é chamar os métodos Python Street na documentação.

6
00:00:24.980 --> 00:00:28.760
Vimos essa documentação de volta ao programa, controle de vôo na seção Python.

7
00:00:29.270 --> 00:00:32.510
É o suficiente para listas de todos os métodos que a classe string fornece.

8
00:00:33.390 --> 00:00:38.650
Então, rolando para baixo, os dois métodos que estamos vendo é o nosso nome é Alpha.

9
00:00:40.520 --> 00:00:47.060
Estes dois aqui, se você deseja permitir números em seus palíndromos, geralmente é o método Elna, pois o Alpha funcionará

10
00:00:47.060 --> 00:00:49.670
apenas com frases que não incluem dígitos.

11
00:00:50.300 --> 00:00:51.460
Vou usar é o nosso nome.

12
00:00:52.310 --> 00:00:55.280
Retorna true se nossos caracteres são alfanuméricos.

13
00:00:56.120 --> 00:01:00.200
Vamos chamar esse método em um único caractere enquanto iteramos sobre a string.

14
00:01:00.560 --> 00:01:05.450
O documento menciona todos os caracteres, mas a sequência que verificaremos conterá apenas um caractere.

15
00:01:06.350 --> 00:01:07.490
Mas volto ao código.

16
00:01:08.820 --> 00:01:12.160
Na função após a função é o palíndromo Alesco.

17
00:01:12.670 --> 00:01:15.220
Lembre-se de que devemos colocar duas linhas de freio após cada função.

18
00:01:15.610 --> 00:01:17.310
Portanto, vou começar na linha doze.

19
00:01:18.130 --> 00:01:20.740
Então, eu vou digitar def palindrome.

20
00:01:22.070 --> 00:01:23.180
Sublinhado.

21
00:01:24.540 --> 00:01:26.250
Entre parênteses sentença.

22
00:01:28.000 --> 00:01:34.360
Nos tipos de parênteses I da coluna, existem algumas linhas, que precisamos ter entre o final do método

23
00:01:34.360 --> 00:01:36.640
e o início do outro código.

24
00:01:37.500 --> 00:01:41.440
Eu poderia começar digitando string igual a duas aspas duplas.

25
00:01:41.500 --> 00:01:42.400
Então é uma string vazia.

26
00:01:43.420 --> 00:01:47.790
Próximo slide para char na frase.

27
00:01:48.550 --> 00:01:48.970
Ligar.

28
00:01:50.420 --> 00:01:59.830
Metade convertida se cha dot estiver entre parênteses, chamar string mais ECLSS cha.

29
00:02:01.260 --> 00:02:05.460
O que chamamos de função iteramos sobre a sentença que é passada como argumento.

30
00:02:06.240 --> 00:02:08.310
Se um caractere é um caractere alfanumérico.

31
00:02:08.610 --> 00:02:10.740
Quando nosso número retorna verdadeiro, em outras palavras?

32
00:02:11.040 --> 00:02:12.810
Em seguida, adicionaremos esse caractere à string.

33
00:02:13.380 --> 00:02:15.480
Caso contrário, nós a ignoramos e passamos para a próxima.

34
00:02:16.140 --> 00:02:20.640
Quando o loop terminar, teremos uma string contendo apenas as letras e dígitos da frase

35
00:02:20.640 --> 00:02:21.270
original.

36
00:02:21.960 --> 00:02:22.180
Certo.

37
00:02:22.200 --> 00:02:23.580
Então esse é o primeiro passo concluído.

38
00:02:23.910 --> 00:02:26.790
Produzimos uma string que conterá apenas letras e dígitos.

39
00:02:27.270 --> 00:02:30.720
Se você usou alfa, em vez disso, uma string não conterá números.

40
00:02:31.380 --> 00:02:33.560
O próximo trecho de código é fácil porque já o escrevemos.

41
00:02:34.170 --> 00:02:36.420
Queremos verificar se essa nova string é um palíndromo.

42
00:02:36.810 --> 00:02:38.250
E já temos coragem de fazer isso.

43
00:02:38.850 --> 00:02:41.190
A função palíndromo está na linha seis?

44
00:02:42.080 --> 00:02:44.780
Agora, o que devemos fazer é chamá-lo de palíndromo.

45
00:02:45.380 --> 00:02:49.940
Mas ainda não expliquei sobre chamar uma função de outra, portanto, faremos um longo caminho

46
00:02:49.940 --> 00:02:50.690
para começar.

47
00:02:51.160 --> 00:02:55.970
Portanto, copiar o código de é palíndromo e colado em uma função de sentença palíndromo.

48
00:02:56.410 --> 00:02:57.960
Mas copie esta linha aqui.

49
00:02:59.310 --> 00:03:04.220
Vamos postar aqui no Laurant 18 recuado no mesmo nível que os quatro.

50
00:03:05.960 --> 00:03:08.590
Para alinhar nossa quebra, digamos, duas linhas em branco.

51
00:03:08.630 --> 00:03:13.310
E também vou subir uma linha porque precisamos apenas de duas linhas em branco após o final

52
00:03:13.310 --> 00:03:15.560
da função antes do início do outro código.

53
00:03:16.410 --> 00:03:18.470
E eu vou falar mais sobre isso no próximo vídeo.

54
00:03:19.250 --> 00:03:23.690
Um dos motivos pelos quais definimos esse desafio é levar a funções que chamam outras funções.

55
00:03:24.270 --> 00:03:25.640
Foi o que cobrimos até agora.

56
00:03:25.670 --> 00:03:27.980
Provavelmente é assim que você teria vendido o desafio.

57
00:03:28.760 --> 00:03:31.970
Lembre-se de ter duas linhas em branco após a função, o que eu já fiz.

58
00:03:32.700 --> 00:03:32.900
Tudo certo.

59
00:03:32.900 --> 00:03:34.010
Então, vamos ver se isso funciona.

60
00:03:34.360 --> 00:03:38.020
Temos que mudar nosso código principal agora para chamar essa nova função, Tomomi.

61
00:03:38.150 --> 00:03:40.810
Você pode ver aqui na linha vinte e dois.

62
00:03:41.380 --> 00:03:42.940
Então, vamos fazer é alterado em 22.

63
00:03:43.070 --> 00:03:44.830
Então, ligar é chamado palíndromo.

64
00:03:46.270 --> 00:03:49.190
Vamos chamar nossa função de sentença palíndromo.

65
00:03:51.830 --> 00:03:52.370
Blog do site.

66
00:03:53.390 --> 00:03:54.750
Então, neste ponto, agora fizemos isso.

67
00:03:54.810 --> 00:03:55.240
Vamos correr.

68
00:03:57.450 --> 00:03:58.970
Em um post, em uma frase.

69
00:03:59.060 --> 00:04:01.560
Era uma vaca ou um Kennesaw EXI?

70
00:04:02.550 --> 00:04:06.090
Apresentador Era um gato ou uma serra de carroceria é um palíndromo?

71
00:04:07.260 --> 00:04:09.030
Não, ainda deve funcionar com palavras únicas.

72
00:04:09.300 --> 00:04:10.050
Vamos executá-lo novamente.

73
00:04:10.050 --> 00:04:12.960
E desta vez eu vou entrar em Ryder com uma maiúscula R.

74
00:04:15.590 --> 00:04:16.610
São dois trabalhos também.

75
00:04:17.000 --> 00:04:18.080
E apenas um teste rápido.

76
00:04:22.440 --> 00:04:23.250
Não é um palíndromo.

77
00:04:25.310 --> 00:04:30.040
Mais uma vez, lembre-se de testar seu cartão com palavras e frases que não são palíndromos

78
00:04:30.040 --> 00:04:36.370
para garantir que você obtenha os resultados corretos ou, em vez disso, fazer testes adicionais com vários palíndromos, frases não palíndricas, para

79
00:04:36.640 --> 00:04:37.570
garantir que funcione.

80
00:04:38.360 --> 00:04:39.580
Não é útil imprimir dinheiro.

81
00:04:39.580 --> 00:04:41.990
Um código mais complexo é imprimir as coisas.

82
00:04:42.580 --> 00:04:48.070
Isso geralmente é mais rápido do que usar o depurador para encontrar problemas em uma função de sentença palíndromo.

83
00:04:48.430 --> 00:04:52.240
Você pode verificar se a primeira etapa está funcionando para impressão no valor de sequência.

84
00:04:52.990 --> 00:04:53.860
Vamos fazer isso.

85
00:04:54.300 --> 00:04:56.860
E Rob, colocaremos o código logo antes da declaração de retorno.

86
00:04:57.010 --> 00:05:03.370
Então, eu vou adicionar um código aqui por cima para imprimir a string entre parênteses.

87
00:05:04.300 --> 00:05:05.100
Então esse é um dos jogos.

88
00:05:08.860 --> 00:05:10.440
Desta vez, para fazer caso.

89
00:05:12.060 --> 00:05:13.750
Veja, Deus, ponto de interrogação.

90
00:05:15.460 --> 00:05:20.040
É ei, chegamos aos gays, vemos Deus, imprimimos, o que é uma maneira rápida de verificar se a primeira parte

91
00:05:20.430 --> 00:05:21.870
da função está funcionando corretamente.

92
00:05:22.560 --> 00:05:27.420
Esse é um teste completo da função e faremos algumas melhorias no próximo vídeo.
