1
1

00:00:05,360  -->  00:00:08,830
So, in the previous video we started
with an introduction to lists, and
2

2

00:00:08,830  -->  00:00:12,300
we went through various scenarios to
sort of see how we could manipulate some
3

3

00:00:12,300  -->  00:00:15,510
basic lists and indeed actually
talked about what lists were.
4

4

00:00:15,510  -->  00:00:19,080
So, as it turned out we went through
three ways to create a list,
5

5

00:00:19,080  -->  00:00:23,620
the first was enclosing the item in square
brackets by concatenating existing lists,
6

6

00:00:23,620  -->  00:00:26,840
adding two together, and also by
using a function that returns a list,
7

7

00:00:26,840  -->  00:00:29,560
which I used in this example, sorted.
8

8

00:00:29,560  -->  00:00:33,910
We can also use the list type constructor,
which is like a list in brackets,
9

9

00:00:33,910  -->  00:00:34,780
with brackets.
10

10

00:00:34,780  -->  00:00:37,670
And constructors will make more
sense when I've introduced classes,
11

11

00:00:37,670  -->  00:00:39,790
which will be in a later
section of this course.
12

12

00:00:39,790  -->  00:00:43,400
But for now, just think of the list
constructor as just another function that
13

13

00:00:43,400  -->  00:00:44,390
you can actually call.
14

14

00:00:44,390  -->  00:00:47,920
So, if you use list with no parameters
it just creates an empty list.
15

15

00:00:47,920  -->  00:00:49,040
So, I'm going to delete this code and
16

16

00:00:49,040  -->  00:00:51,070
we're going to start
with a clear slate here.
17

17

00:00:53,500  -->  00:00:54,310
Like so.
18

18

00:00:54,310  -->  00:00:58,130
So, using a list as I said with no
parameters, it just creates an empty list.
19

19

00:00:58,130  -->  00:01:02,410
So we can type, and that ends up being
exactly the same as the first option here.
20

20

00:01:02,410  -->  00:01:07,800
So, I've got list_1 = [],
which is an empty list,
21

21

00:01:07,800  -->  00:01:12,570
but I can also do this, list_2 = list[].
22

22

00:01:12,570  -->  00:01:15,850
And in both cases,
what they do is they create an empty list.
23

23

00:01:15,850  -->  00:01:17,610
So basically,
they're both identical as you can see.
24

24

00:01:17,610  -->  00:01:20,390
And just to confirm that,
we can actually print this out.
25

25

00:01:20,390  -->  00:01:27,240
I can type print, list1.format.
26

26

00:01:27,240  -->  00:01:30,410
This data's called 1, and
27

27

00:01:30,410  -->  00:01:35,590
print list 2.format, this data's got 2.
28

28

00:01:35,590  -->  00:01:43,320
And I can put if list_1 =,
this data's called 2.
29

29

00:01:45,410  -->  00:01:50,740
Print the list are equal,
we can actually run this.
30

30

00:01:53,250  -->  00:01:56,190
We can see that both are empty lists,
list 1 and list 2 are both empty.
31

31

00:01:56,190  -->  00:01:59,790
So, you can see there and we get
confirmation by doing the comparison
32

32

00:01:59,790  -->  00:02:02,450
the double equals sign to compare them,
and
33

33

00:02:02,450  -->  00:02:04,630
they are both considered equal by Python.
34

34

00:02:04,630  -->  00:02:07,490
Now ,I don't think we've actually
mentioned this before, but
35

35

00:02:07,490  -->  00:02:10,530
actual, when you call a function
such as print or sorted.
36

36

00:02:10,530  -->  00:02:12,870
So, function in this example being print.
37

37

00:02:12,870  -->  00:02:14,980
You can see this stuff in the middle here.
38

38

00:02:14,980  -->  00:02:17,760
They're actually called parameters or
arguments.
39

39

00:02:17,760  -->  00:02:20,310
So, the parameter in our last
print function code was the string
40

40

00:02:20,310  -->  00:02:21,110
the lists are equal.
41

41

00:02:21,110  -->  00:02:23,120
So, this is actually a parameter.
42

42

00:02:23,120  -->  00:02:25,970
That's a parameter that we're passing
to the function called print.
43

43

00:02:25,970  -->  00:02:29,590
But later in the course, we'll start
actually creating our own functions, and
44

44

00:02:29,590  -->  00:02:32,730
we'll actually cover parameters and
arguments then in more detail.
45

45

00:02:32,730  -->  00:02:35,800
But strictly speaking,
the lists are not equal is an argument.
46

46

00:02:35,800  -->  00:02:40,120
But the two terms, argument and
parameters are often used interchangeably.
47

47

00:02:40,120  -->  00:02:43,690
So, the list constructor, and
again the constructor is using the list
48

48

00:02:43,690  -->  00:02:47,290
with the brackets, can be called
with no parameters as we've done.
49

49

00:02:47,290  -->  00:02:50,550
We can also call it with
a single iterable parameter.
50

50

00:02:50,550  -->  00:02:54,140
So, in Python an iterable is just
an object that is capable of
51

51

00:02:54,140  -->  00:02:56,770
returning its members one at a time.
52

52

00:02:56,770  -->  00:03:00,240
So, all the sequence types built into
Python are actually iterable, and
53

53

00:03:00,240  -->  00:03:04,300
we can actually pass a string to the list,
so we could do something like this.
54

54

00:03:04,300  -->  00:03:12,460
print(list("The lists are equal."))
like so, we can run that.
55

55

00:03:12,460  -->  00:03:16,250
And you can see what's happened
there is automatically,
56

56

00:03:16,250  -->  00:03:20,300
Python has actually created a list from
what we sent to one character at a time.
57

57

00:03:20,300  -->  00:03:24,440
So each item, each letter, of this string,
58

58

00:03:24,440  -->  00:03:28,080
has been added individually,
as a separate option in that actual list.
59

59

00:03:28,080  -->  00:03:29,720
And that's what the constructor's
actually doing.
60

60

00:03:29,720  -->  00:03:32,610
It's actually doing that for us, and
I'm recalling that list function.
61

61

00:03:32,610  -->  00:03:36,390
So, creating a list whose members
are each of the characters in the string
62

62

00:03:36,390  -->  00:03:37,350
that we passed to the list.
63

63

00:03:37,350  -->  00:03:40,410
And this was the lists are equal,
is what we actually passed to it.
64

64

00:03:40,410  -->  00:03:43,190
So it can actually be very useful to
do that, if you wanna assign a list to
65

65

00:03:43,190  -->  00:03:46,600
another variable, and
have them then reference different lists.
66

66

00:03:46,600  -->  00:03:50,880
So, a normal assortment works as in other
languages, and it can actually confuse
67

67

00:03:50,880  -->  00:03:54,970
newcomers to programmers, as I'm gonna
show in the following example, so,
68

68

00:03:54,970  -->  00:03:57,780
I'm gonna type in some code here,
comment this out.
69

69

00:03:57,780  -->  00:04:03,670
We can put even = [2, 4, 6, 8].
70

70

00:04:03,670  -->  00:04:07,290
Then, we type another, even = even.
71

71

00:04:07,290  -->  00:04:12,610
Then we can type another,
even.sort(reverse=True),
72

72

00:04:12,610  -->  00:04:15,720
note the capital T for True.
73

73

00:04:15,720  -->  00:04:18,760
We can do print(even), so
if we actually run this,
74

74

00:04:18,760  -->  00:04:24,170
you can see what's
actually happened there.
75

75

00:04:24,170  -->  00:04:27,190
We've actually got it printing out even,
even though,
76

76

00:04:27,190  -->  00:04:29,760
we're actually updating another variable.
77

77

00:04:29,760  -->  00:04:34,350
So, we've created another_even
variable and assigned it to even.
78

78

00:04:34,350  -->  00:04:37,940
Then, we actually updated
the values of even using sort.
79

79

00:04:37,940  -->  00:04:42,390
And we actually used the reverse
equal true parameter to actually
80

80

00:04:42,390  -->  00:04:46,150
return the results sort of last to first,
instead of first to last.
81

81

00:04:46,150  -->  00:04:50,270
But the important thing here was that,
even though we haven't actually updated
82

82

00:04:50,270  -->  00:04:53,620
even directly we've used
another variable called even.
83

83

00:04:53,620  -->  00:04:57,450
Because we've updated that variable
it actually updated the variable
84

84

00:04:57,450  -->  00:04:59,050
even as well.
85

85

00:04:59,050  -->  00:05:01,940
So, in other words both variables even and
another even
86

86

00:05:01,940  -->  00:05:06,950
refer actually to the exact same list so
that and that's why when we used the sort,
87

87

00:05:06,950  -->  00:05:10,130
both [INAUDIBLE] were actually sorted
as you can see, because we're actually
88

88

00:05:10,130  -->  00:05:14,640
printing out the first list, which we
didn't actually directly use the .sort on.
89

89

00:05:14,640  -->  00:05:18,020
And just to confirm that what we can
actually do, after the assignment we can
90

90

00:05:18,020  -->  00:05:23,450
confirm that they're the same by
typing print, another_even is even.
91

91

00:05:24,970  -->  00:05:27,020
And that should actually return true.
92

92

00:05:27,020  -->  00:05:29,900
So if we actually run that,
it actually returns true,
93

93

00:05:29,900  -->  00:05:33,880
which actually says from Python's
perspective these two are the same thing.
94

94

00:05:33,880  -->  00:05:35,920
They're actually pointing
to the same list.
95

95

00:05:35,920  -->  00:05:41,230
But if we actually create a new list for
another even variable,
96

96

00:05:41,230  -->  00:05:44,710
and pass in the parameter of even,
we can get that not to be the case.
97

97

00:05:44,710  -->  00:05:47,250
So we can actually type list here,
the function list,
98

98

00:05:47,250  -->  00:05:52,020
well the constructor list, we're passing
even, that current list to that, and
99

99

00:05:52,020  -->  00:05:54,010
list is going to return,
in fact, a new list.
100

100

00:05:54,010  -->  00:05:57,570
So, when we do this print down here,
we should find that that comes up and
101

101

00:05:57,570  -->  00:05:58,840
says false.
102

102

00:05:58,840  -->  00:06:01,020
But we still will end up
getting the same results,
103

103

00:06:01,020  -->  00:06:03,410
because we're still ultimately
sending the same information.
104

104

00:06:03,410  -->  00:06:07,120
So, if we actually run this,
you can see that's now false.
105

105

00:06:07,120  -->  00:06:08,950
And that's because they're
no longer the same list.
106

106

00:06:08,950  -->  00:06:10,950
We had a list that was created for even.
107

107

00:06:10,950  -->  00:06:15,980
And then we used the list constructor,
passing the even list.
108

108

00:06:15,980  -->  00:06:19,110
And the list constructor
actually returns us a new list.
109

109

00:06:19,110  -->  00:06:21,430
So, consequently,
there's two separate lists now.
110

110

00:06:21,430  -->  00:06:23,310
The even variable has got its own list.
111

111

00:06:23,310  -->  00:06:27,340
And the other _even variable has
also got its own list, as well.
112

112

00:06:27,340  -->  00:06:30,730
Just to confirm, we can actually do
another test there and print another.
113

113

00:06:30,730  -->  00:06:33,480
Instead of putting is we can put
equals equals then actually run that.
114

114

00:06:34,730  -->  00:06:37,390
That's gonna tell us to say
at this point now it's true,
115

115

00:06:37,390  -->  00:06:41,220
because that's saying whether the contents
are equal, not whether they're
116

116

00:06:41,220  -->  00:06:44,450
actually pointing to different variables
in memory if that makes sense,
117

117

00:06:44,450  -->  00:06:45,620
in different lists essentially.
118

118

00:06:45,620  -->  00:06:49,310
So, it's important to know, The difference
there between the double equal.
119

119

00:06:49,310  -->  00:06:53,190
So, we're actually comparing it to see
whether what's in the lists are the same
120

120

00:06:53,190  -->  00:06:54,240
as supposed is.
121

121

00:06:54,240  -->  00:06:57,900
We're saying is this the same list
that's actually in memory somewhere.
122

122

00:06:57,900  -->  00:06:59,570
So, that's gonna return false,
cause it's separate now.
123

123

00:06:59,570  -->  00:07:03,390
And again, equals is the contents
of the lists the same.
124

124

00:07:03,390  -->  00:07:04,230
That's gonna return true.
125

125

00:07:04,230  -->  00:07:07,480
Now, if you really wanted a new
version of even, the first variable,
126

126

00:07:07,480  -->  00:07:10,850
we could have actually done something
like this, where instead of putting list,
127

127

00:07:10,850  -->  00:07:14,090
we could have actually done
something like sorted, even,
128

128

00:07:15,290  -->  00:07:20,030
reverse equals true,
true, we could run that.
129

129

00:07:20,030  -->  00:07:23,950
And that's now false, because we
sorted it into a different order.
130

130

00:07:23,950  -->  00:07:27,950
So, sorter does return a new list, but
now it's sorting it in a different order.
131

131

00:07:27,950  -->  00:07:31,970
And just to confirm,
I set that to be is and run it.
132

132

00:07:31,970  -->  00:07:34,090
It's still set to false,
133

133

00:07:34,090  -->  00:07:36,890
because they're actually pointing
to different lists still.
134

134

00:07:38,290  -->  00:07:41,990
And setting that to equals we
correctly get false as well,
135

135

00:07:41,990  -->  00:07:45,380
and that's because the sorted
function returns a separate list.
136

136

00:07:45,380  -->  00:07:45,970
So moving on.
137

137

00:07:45,970  -->  00:07:49,400
So earlier, we concatenated or
appended our even and odd list.
138

138

00:07:49,400  -->  00:07:50,560
That's actually in a previous video.
139

139

00:07:50,560  -->  00:07:53,000
And we actually produced
a new list called numbers,
140

140

00:07:53,000  -->  00:07:54,830
that included all
the items from both lists.
141

141

00:07:54,830  -->  00:07:56,210
I'm gonna put some more
code on the screen.
142

142

00:07:56,210  -->  00:07:57,600
And see, if you can actually
guess what this will do.
143

143

00:07:57,600  -->  00:07:59,830
So, I'm gonna comment that out and
put the even in there.
144

144

00:08:01,580  -->  00:08:05,140
And we're gonna put an odd equals 1,
3, 5, 7, 9 and
145

145

00:08:05,140  -->  00:08:10,260
this is from the previous video when we're
dealing with adding these things together.
146

146

00:08:10,260  -->  00:08:17,900
What do you think is gonna happen if I put
numbers equals even, odd and print it out?
147

147

00:08:19,570  -->  00:08:22,340
So, can you guess what's
that gonna actually produce?
148

148

00:08:22,340  -->  00:08:23,060
Let's run that and see.
149

149

00:08:24,080  -->  00:08:26,830
Now, it actually returns
a list containing two lists.
150

150

00:08:26,830  -->  00:08:29,090
So, you can see,
sort of lists within a list.
151

151

00:08:29,090  -->  00:08:33,230
That's the list number one, which is
based on the contents of even, and
152

152

00:08:33,230  -->  00:08:38,000
the second one is based on the contents
of odd, and now are both appended into in
153

153

00:08:38,000  -->  00:08:40,970
one master list, and just to confirm that,
instead of actually printing that out,
154

154

00:08:40,970  -->  00:08:44,190
let's actually change that and actually
add some code here and put a for loop.
155

155

00:08:44,190  -->  00:08:48,350
So, for numbers_set in numbers.
156

156

00:08:50,380  -->  00:08:51,340
Print.
157

157

00:08:54,170  -->  00:08:54,980
Number set.
158

158

00:08:54,980  -->  00:08:57,440
And it actually should have been number
set just to be technically correct.
159

159

00:08:58,470  -->  00:09:01,970
Like so.
And then, we'll put for,
160

160

00:09:01,970  -->  00:09:09,200
noting the indent level for
value in number_set.print(value).
161

161

00:09:09,200  -->  00:09:15,180
So, in the outer loop number_set
iterates through the members of numbers,
162

162

00:09:15,180  -->  00:09:17,650
so it's assigned each of
the two lists in turn.
163

163

00:09:17,650  -->  00:09:21,330
And within the inner loop itself the value
iterates through the members of those
164

164

00:09:21,330  -->  00:09:24,900
sets, so it's assigned each of
the even numbers first time around
165

165

00:09:24,900  -->  00:09:27,420
then each of the odd ones
in the second time around.
166

166

00:09:27,420  -->  00:09:28,230
So if we actually run that,
167

167

00:09:28,230  -->  00:09:31,040
we can actually see we can
go right through the list.
168

168

00:09:31,040  -->  00:09:34,190
We can go through and
print out the number set first.
169

169

00:09:34,190  -->  00:09:35,210
This is the initial print.
170

170

00:09:35,210  -->  00:09:38,330
And then, the second follow-up is
going through each of those numbers
171

171

00:09:38,330  -->  00:09:40,120
within that list and printing them out.
172

172

00:09:40,120  -->  00:09:42,880
It does that for both lists
because we've got an initial for
173

173

00:09:42,880  -->  00:09:46,260
loop, the outside one, which actually
goes through all the contents.
174

174

00:09:46,260  -->  00:09:47,580
So, we're actually gonna
end this video here.
175

175

00:09:47,580  -->  00:09:48,720
In the next video I'm gonna go through and
176

176

00:09:48,720  -->  00:09:54,190
just show you a few more examples of using
lists the way we've been using them.
177

177

00:09:54,190  -->  00:09:56,820
And we'll actually then introduce you
to a mini challenge to finish that off.
178

178

00:09:56,820  -->  00:09:58,040
So, I'll see you in the next video.
