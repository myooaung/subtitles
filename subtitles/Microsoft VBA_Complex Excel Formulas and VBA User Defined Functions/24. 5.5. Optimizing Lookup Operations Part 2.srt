1
00:00:00,000 --> 00:00:16,180
Let's now move across the outcomes and look at the second major tech me or improving the

2
00:00:16,180 --> 00:00:18,350
speed of your look up operations.

3
00:00:18,350 --> 00:00:25,900
Everything we've discussed so far applies both to be look up and to the index and match

4
00:00:25,900 --> 00:00:26,850
combination.

5
00:00:26,850 --> 00:00:31,050
Both of them have the option to send the match type to truth.

6
00:00:31,050 --> 00:00:33,550
The second technique,

7
00:00:33,550 --> 00:00:34,230
however,

8
00:00:34,230 --> 00:00:38,750
applies specifically to the match and index combination,

9
00:00:38,750 --> 00:00:46,570
and you'll use this technique where you're use in one match operation to pull back several

10
00:00:46,570 --> 00:00:49,950
different pieces of information from your data set.

11
00:00:49,950 --> 00:00:51,770
And the trick,

12
00:00:51,770 --> 00:00:52,590
basically,

13
00:00:52,590 --> 00:00:55,270
is that you separate the two functions.

14
00:00:55,270 --> 00:00:58,750
So instead of using them repeatedly in combination,

15
00:00:58,750 --> 00:01:07,660
you use the match function once in a helper column and then all your index functions refer

16
00:01:07,660 --> 00:01:09,950
to that one match function.

17
00:01:09,950 --> 00:01:14,280
So it's not untypical that you'll be pulling back,

18
00:01:14,280 --> 00:01:14,800
say,

19
00:01:14,800 --> 00:01:20,010
10 or 20 bits of information on the same I d.

20
00:01:20,010 --> 00:01:22,160
Number the same stuff I D.

21
00:01:22,160 --> 00:01:22,800
Number,

22
00:01:22,800 --> 00:01:24,880
same national insurance number,

23
00:01:24,880 --> 00:01:29,510
and you're just pulling back lots of columns using that one piece of information.

24
00:01:29,510 --> 00:01:31,050
So whenever that's the case,

25
00:01:31,050 --> 00:01:32,810
if you use this technique,

26
00:01:32,810 --> 00:01:35,330
you split in the two functions,

27
00:01:35,330 --> 00:01:38,190
so you've got matched only once and then,

28
00:01:38,190 --> 00:01:39,300
using Index,

29
00:01:39,300 --> 00:01:42,150
you'll see great improvements in speed.

30
00:01:42,150 --> 00:01:45,770
So let's have a look at how it works here.

31
00:01:45,770 --> 00:01:47,650
We've got our candidates summary.

32
00:01:47,650 --> 00:01:49,990
So in this work feet,

33
00:01:49,990 --> 00:01:52,050
each name will occur just once.

34
00:01:52,050 --> 00:01:55,880
And we want to move across to the applications.

35
00:01:55,880 --> 00:01:59,720
Work feeds by the well,

36
00:01:59,720 --> 00:02:00,550
just put that back.

37
00:02:00,550 --> 00:02:01,320
So one.

38
00:02:01,320 --> 00:02:07,420
And we want to move across to the applications worksheet and find out three bits of

39
00:02:07,420 --> 00:02:08,360
information.

40
00:02:08,360 --> 00:02:10,090
Firstly,

41
00:02:10,090 --> 00:02:12,050
how far did each candidate get?

42
00:02:12,050 --> 00:02:18,150
What stage off the possible six did they reach?

43
00:02:18,150 --> 00:02:19,950
Secondly,

44
00:02:19,950 --> 00:02:22,550
what was the first contact date?

45
00:02:22,550 --> 00:02:24,300
And thirdly,

46
00:02:24,300 --> 00:02:30,680
what was the last contact date on the key to get in a long This information is to sort the

47
00:02:30,680 --> 00:02:33,050
data using the candidate I d.

48
00:02:33,050 --> 00:02:38,190
On the stage date the men using the approximate match with the match function.

49
00:02:38,190 --> 00:02:41,150
So let's begin by sort in,

50
00:02:41,150 --> 00:02:44,650
they will need a custom of salt.

51
00:02:44,650 --> 00:02:46,470
First of all,

52
00:02:46,470 --> 00:02:47,200
by candidates,

53
00:02:47,200 --> 00:02:47,950
I d.

54
00:02:47,950 --> 00:02:49,550
That level.

55
00:02:49,550 --> 00:02:51,010
And secondly,

56
00:02:51,010 --> 00:02:57,860
by stage dates on the candidate ideas,

57
00:02:57,860 --> 00:03:00,850
you can see it's a number stored is text.

58
00:03:00,850 --> 00:03:02,950
So all sorted numerically.

59
00:03:02,950 --> 00:03:12,070
So now we have all the roads related to each candidate's sorted next to each other,

60
00:03:12,070 --> 00:03:17,940
and I think I must have accidentally placed a nine in here protesting purposes earlier.

61
00:03:17,940 --> 00:03:22,050
That should be a two soldiers Revert wanted to.

62
00:03:22,050 --> 00:03:29,240
So the first thing we want to do it's to pick up the last entry for each individual.

63
00:03:29,240 --> 00:03:32,750
So this person got as far as ST to own screen,

64
00:03:32,750 --> 00:03:39,170
and we scroll down to see if someone who got a bit further we've got to Sarah.

65
00:03:39,170 --> 00:03:39,970
Hansel,

66
00:03:39,970 --> 00:03:43,100
we've got as far as stage.

67
00:03:43,100 --> 00:03:44,570
Fine the reference check.

68
00:03:44,570 --> 00:03:47,050
So let me do I look up.

69
00:03:47,050 --> 00:03:49,650
We're interested in three things.

70
00:03:49,650 --> 00:03:52,550
The final stage,

71
00:03:52,550 --> 00:03:59,050
the first dates and the last eight.

72
00:03:59,050 --> 00:04:02,650
And for all of them,

73
00:04:02,650 --> 00:04:08,850
we're going to start by using the match function to match the candidates.

74
00:04:08,850 --> 00:04:11,850
So we perform in three operations,

75
00:04:11,850 --> 00:04:13,870
all using the same match.

76
00:04:13,870 --> 00:04:19,600
So this is an example where we can use this technique of split in the match in the index.

77
00:04:19,600 --> 00:04:22,650
So the match is only evaluated once,

78
00:04:22,650 --> 00:04:26,420
and then the index operations or we use the same match.

79
00:04:26,420 --> 00:04:28,440
So let's begin with the MASH.

80
00:04:28,440 --> 00:04:36,570
I'll insert a column which typically you would then hide once you got your formulas in

81
00:04:36,570 --> 00:04:47,280
place and let's just call it match row and of course we'll need the same error handling

82
00:04:47,280 --> 00:04:49,350
that we put in place for the B Look up.

83
00:04:49,350 --> 00:04:52,330
Let's do the basic function first,

84
00:04:52,330 --> 00:04:54,450
and then we'll put in the air handling afterwards.

85
00:04:54,450 --> 00:04:57,750
Everyone equals match.

86
00:04:57,750 --> 00:04:59,510
Look at values.

87
00:04:59,510 --> 00:05:06,620
The candidate I d in a to coma on the look up array is in applications,

88
00:05:06,620 --> 00:05:13,920
and it's calling a comma and then important and then importantly,

89
00:05:13,920 --> 00:05:15,250
the match type.

90
00:05:15,250 --> 00:05:16,910
True or false?

91
00:05:16,910 --> 00:05:18,050
One or zero,

92
00:05:18,050 --> 00:05:19,590
we want one.

93
00:05:19,590 --> 00:05:20,250
True,

94
00:05:20,250 --> 00:05:24,010
you'll also notice that we have minus one as an option,

95
00:05:24,010 --> 00:05:25,060
which we don't have would be.

96
00:05:25,060 --> 00:05:25,650
Look up,

97
00:05:25,650 --> 00:05:31,650
and this applies if it's more convenient for you to sort your data in descending order.

98
00:05:31,650 --> 00:05:35,010
And then if you have repetitions of the look of value,

99
00:05:35,010 --> 00:05:39,180
Excel will take the first entry rather than the last.

100
00:05:39,180 --> 00:05:40,180
So in our case,

101
00:05:40,180 --> 00:05:41,840
we want Excel to take the last.

102
00:05:41,840 --> 00:05:46,150
So you true one on when we enter?

103
00:05:46,150 --> 00:05:48,960
I've got this format.

104
00:05:48,960 --> 00:05:50,310
It is a dates on things.

105
00:05:50,310 --> 00:05:50,740
A format.

106
00:05:50,740 --> 00:06:03,650
It's a number on remained the decimals safer James Woody within the specified range.

107
00:06:03,650 --> 00:06:06,700
The last row is Road three,

108
00:06:06,700 --> 00:06:09,050
so no one road to run three.

109
00:06:09,050 --> 00:06:19,620
So we still have this potential problem that we can put erroneous values in here which

110
00:06:19,620 --> 00:06:23,650
aren't picked up his errors and simply give us wrong results.

111
00:06:23,650 --> 00:06:27,650
We'll need to add some era Handley,

112
00:06:27,650 --> 00:06:36,330
since the match function simply gives us of row rather than retrieving a value to do our

113
00:06:36,330 --> 00:06:37,140
test in,

114
00:06:37,140 --> 00:06:39,450
we'll need to use the index function.

115
00:06:39,450 --> 00:06:43,850
So again we've got an if statement and for a logical test,

116
00:06:43,850 --> 00:06:45,450
we use index.

117
00:06:45,450 --> 00:06:50,350
The array is the first column of the applications work treat,

118
00:06:50,350 --> 00:06:57,450
and then for row number we use match the same match function that we intend to use.

119
00:06:57,450 --> 00:07:06,250
So the look up valuing too Array Applications column A and match type one approximate.

120
00:07:06,250 --> 00:07:14,970
And then we convert that whole index match combination into a logical test by put in equals

121
00:07:14,970 --> 00:07:21,350
to a to So we're testing to see whether the value looking for does actually exist.

122
00:07:21,350 --> 00:07:22,850
If it does,

123
00:07:22,850 --> 00:07:27,950
value attributed statement becomes the mass function.

124
00:07:27,950 --> 00:07:31,740
And if it doesn't as we saw in the last example,

125
00:07:31,740 --> 00:07:36,650
we used the n A function to generate the A era body.

126
00:07:36,650 --> 00:07:42,250
So let's put that in place.

127
00:07:42,250 --> 00:07:43,910
Bolt,

128
00:07:43,910 --> 00:07:45,960
enter Hey,

129
00:07:45,960 --> 00:08:04,720
we need if Old Santa and we invest in index now a raise applications call him a comma in a

130
00:08:04,720 --> 00:08:04,920
row.

131
00:08:04,920 --> 00:08:17,600
Number is supplied by match The Chargers copy all hands,

132
00:08:17,600 --> 00:08:18,050
sir.

133
00:08:18,050 --> 00:08:28,550
Closing next and then make it into a logical test by saying equal to hey soon,

134
00:08:28,550 --> 00:08:30,570
comma.

135
00:08:30,570 --> 00:08:34,610
So all of that is the logical test from,

136
00:08:34,610 --> 00:08:37,660
if statement or cancer.

137
00:08:37,660 --> 00:08:39,850
True,

138
00:08:39,850 --> 00:08:47,300
is our manager coma on value?

139
00:08:47,300 --> 00:08:49,710
It false is the n a function,

140
00:08:49,710 --> 00:08:53,050
and that completes our formula,

141
00:08:53,050 --> 00:09:05,950
so that now makes it a bit more robust and ensures it's gonna pick up all those candidate

142
00:09:05,950 --> 00:09:07,850
ideas that don't actually exist.

143
00:09:07,850 --> 00:09:15,100
So now we can copy this more robust formula down.

144
00:09:15,100 --> 00:09:21,040
Are we ready to use the index function to pick up the three bits of information that we

145
00:09:21,040 --> 00:09:21,550
need?

146
00:09:21,550 --> 00:09:23,770
So first of all,

147
00:09:23,770 --> 00:09:25,550
we want the outcome,

148
00:09:25,550 --> 00:09:34,540
which is in column G because we've got our data sorted and we'll be using approximate mash

149
00:09:34,540 --> 00:09:37,670
for each tender that i d.

150
00:09:37,670 --> 00:09:49,670
It goes through all the repetitions and always picks up the last one so we can collapse the

151
00:09:49,670 --> 00:09:57,750
formula bar because we're now gonna do a single function with no nesting equals index.

152
00:09:57,750 --> 00:10:01,210
The array is Colin G.

153
00:10:01,210 --> 00:10:09,420
Coma And then I wrote Number is supplied by the match function,

154
00:10:09,420 --> 00:10:10,850
which we've got in C two.

155
00:10:10,850 --> 00:10:20,700
And because our formulas and outcomes we don't need to specify outcomes as the lane of the

156
00:10:20,700 --> 00:10:27,580
work it that's our outcome on it.

157
00:10:27,580 --> 00:10:30,990
We coming down and just tested.

158
00:10:30,990 --> 00:10:35,050
Remember Sarah Hutzell got us faras reference check.

159
00:10:35,050 --> 00:10:39,860
Let's leave first day till last.

160
00:10:39,860 --> 00:10:43,750
That's the most complex Let's now do last state.

161
00:10:43,750 --> 00:10:47,550
So last state is in column h.

162
00:10:47,550 --> 00:10:50,680
We want exactly the same formula,

163
00:10:50,680 --> 00:10:59,750
but we want to use H instead of G.

164
00:10:59,750 --> 00:11:03,850
Everything else is the same.

165
00:11:03,850 --> 00:11:11,560
The First States is slightly more tricky.

166
00:11:11,560 --> 00:11:16,050
We can start by using what we've got here for the last eight.

167
00:11:16,050 --> 00:11:23,950
So that takes us here and then we need to move up.

168
00:11:23,950 --> 00:11:27,050
But how many rows do we need to live up?

169
00:11:27,050 --> 00:11:31,650
And the answer is basically we can use the stage number.

170
00:11:31,650 --> 00:11:36,170
So we've move up by this number of rows.

171
00:11:36,170 --> 00:11:37,340
So in this case,

172
00:11:37,340 --> 00:11:38,150
too,

173
00:11:38,150 --> 00:11:43,150
we went on the cell above the first road.

174
00:11:43,150 --> 00:11:46,250
So we then just need to down one.

175
00:11:46,250 --> 00:11:53,050
Let's try that with Sarah Hustles Road five stages.

176
00:11:53,050 --> 00:11:54,060
Move up.

177
00:11:54,060 --> 00:11:58,790
512345 and we're on the cell above her first road.

178
00:11:58,790 --> 00:12:01,000
We then lived down one,

179
00:12:01,000 --> 00:12:04,880
So let's build out logic into our formula.

180
00:12:04,880 --> 00:12:09,150
We'll start with this one,

181
00:12:09,150 --> 00:12:19,570
but we're now gonna be nest in an index inside an index.

182
00:12:19,570 --> 00:12:31,150
So all kinds of and I'll just lose the closing parenthesis for a moment.

183
00:12:31,150 --> 00:12:44,650
We now want to subtract from sea to all hands up index on our array is column F.

184
00:12:44,650 --> 00:12:47,350
That's where the stage number is.

185
00:12:47,350 --> 00:12:54,890
Coma on our row number is the value supplied by sea to and the closing parenthesis for

186
00:12:54,890 --> 00:12:55,750
index.

187
00:12:55,750 --> 00:13:01,860
And then we have to remember to add on one so that we moved down one road to put us on the

188
00:13:01,860 --> 00:13:03,050
first row.

189
00:13:03,050 --> 00:13:11,890
That matches that candidate I be and Walt enter on the closing around consists for the

190
00:13:11,890 --> 00:13:12,950
index function.

191
00:13:12,950 --> 00:13:19,250
Let's test it that we coming down.

192
00:13:19,250 --> 00:13:22,010
So for James Woody,

193
00:13:22,010 --> 00:13:31,950
we have a society faster The AIDS um em for Maduro.

194
00:13:31,950 --> 00:13:32,620
Yeah,

195
00:13:32,620 --> 00:13:34,650
the 29th of this six.

196
00:13:34,650 --> 00:13:42,250
Let's just do one more So Hansel 30 that the eighth.

197
00:13:42,250 --> 00:13:44,840
No,

198
00:13:44,840 --> 00:13:53,450
she is the But those are the two key techniques to take into account.

199
00:13:53,450 --> 00:13:55,050
Firstly,

200
00:13:55,050 --> 00:13:56,950
when used in either natural,

201
00:13:56,950 --> 00:13:57,650
look up.

202
00:13:57,650 --> 00:14:01,650
Always said your match time to approximate by using one.

203
00:14:01,650 --> 00:14:02,450
What true?

204
00:14:02,450 --> 00:14:06,130
And secondly,

205
00:14:06,130 --> 00:14:10,470
if you're retrieve in several pieces of information using the same match.

206
00:14:10,470 --> 00:14:14,090
Always use the index and match combination.

207
00:14:14,090 --> 00:14:19,090
But the match in one Kahlan and then for all the other columns,

208
00:14:19,090 --> 00:14:23,990
you can simply use index on its own and refer back to that one match,

209
00:14:23,990 --> 00:14:24,460
Colin.

210
00:14:24,460 --> 00:14:30,630
So those are the two things to bear in mind if you want to make your lookups as fast as

211
00:14:30,630 --> 00:14:31,250
possible.

