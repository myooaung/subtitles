1
00:00:00,000 --> 00:00:11,950
Let's now move on to look at two types of VB,

2
00:00:11,950 --> 00:00:17,650
a statement which are essential in order to land more complexity to your VB a functions

3
00:00:17,650 --> 00:00:18,930
condition.

4
00:00:18,930 --> 00:00:23,500
ALS Looping folder 11.

5
00:00:23,500 --> 00:00:25,620
Using conditional czar Looping,

6
00:00:25,620 --> 00:00:35,270
let's open the first example using if statements adding conditional logic to your excel.

7
00:00:35,270 --> 00:00:38,980
Formless can often seem quite complex because,

8
00:00:38,980 --> 00:00:39,460
of course,

9
00:00:39,460 --> 00:00:40,580
in a formula,

10
00:00:40,580 --> 00:00:42,550
everything has to be a function.

11
00:00:42,550 --> 00:00:44,360
But in BB eight,

12
00:00:44,360 --> 00:00:46,260
we don't have this restriction,

13
00:00:46,260 --> 00:00:51,630
so you'll often find that right in logical structures is much easier in V A.

14
00:00:51,630 --> 00:00:53,850
Than it is in Excel or analysts.

15
00:00:53,850 --> 00:00:56,310
In this example,

16
00:00:56,310 --> 00:01:01,760
we want to create a V be a function which will display the version of Excel that's being

17
00:01:01,760 --> 00:01:02,250
used.

18
00:01:02,250 --> 00:01:03,850
Let's say,

19
00:01:03,850 --> 00:01:04,750
for example,

20
00:01:04,750 --> 00:01:10,690
we're tracking printing problems and finding out whether certain versions of Excel are less

21
00:01:10,690 --> 00:01:12,250
compatible without princes.

22
00:01:12,250 --> 00:01:14,200
So this message,

23
00:01:14,200 --> 00:01:20,880
which is currently static we want to make dynamic and instead of heart code in the version

24
00:01:20,880 --> 00:01:20,880
,

25
00:01:20,880 --> 00:01:26,050
we want the version automatically picked up and displayed at the end of this message.

26
00:01:26,050 --> 00:01:29,850
So let's rise our function,

27
00:01:29,850 --> 00:01:33,950
go to developer like visual basic,

28
00:01:33,950 --> 00:01:38,260
and then let's insert a module in this workbook,

29
00:01:38,260 --> 00:01:40,450
as opposed to the personal macro workbook.

30
00:01:40,450 --> 00:01:46,220
Let's go straight into our function.

31
00:01:46,220 --> 00:01:53,350
So insert procedure procedure time function on Let's call it Excel version.

32
00:01:53,350 --> 00:02:01,560
Since the information being used by the function will come from the system,

33
00:02:01,560 --> 00:02:04,110
we don't need any arguments specified.

34
00:02:04,110 --> 00:02:05,450
It's with parentheses.

35
00:02:05,450 --> 00:02:07,020
However,

36
00:02:07,020 --> 00:02:11,150
we do need to specify the type of data reviews by the ocean itself.

37
00:02:11,150 --> 00:02:12,430
And this,

38
00:02:12,430 --> 00:02:12,800
of course,

39
00:02:12,800 --> 00:02:16,550
will be a string confirming the version of Excel being used.

40
00:02:16,550 --> 00:02:25,300
So after the closing parenthesis we put as string the two pieces of information that were

41
00:02:25,300 --> 00:02:31,690
interested in are the platform Windows or Mac and the Excel version,

42
00:02:31,690 --> 00:02:37,650
and we can find out both of those by looking at the properties of the application object.

43
00:02:37,650 --> 00:02:40,810
So we dip into the object,

44
00:02:40,810 --> 00:02:46,350
browse a few object browser on look inside the application object.

45
00:02:46,350 --> 00:02:52,750
Here we have operating system,

46
00:02:52,750 --> 00:02:55,150
which is you can see is a string,

47
00:02:55,150 --> 00:03:02,650
and then we have version,

48
00:03:02,650 --> 00:03:03,640
which,

49
00:03:03,640 --> 00:03:05,840
although it appears to be a number,

50
00:03:05,840 --> 00:03:07,450
is actually a string.

51
00:03:07,450 --> 00:03:14,950
So let's create a couple of variables to keep track of this information.

52
00:03:14,950 --> 00:03:19,300
You First of all,

53
00:03:19,300 --> 00:03:23,050
let's create str version as string,

54
00:03:23,050 --> 00:03:29,390
and that will hold the actual text that we intend to display to the user confirming the

55
00:03:29,390 --> 00:03:36,350
version of Excel because the version returned by application dot version is inherently

56
00:03:36,350 --> 00:03:41,150
numeric will be useful to convert it into a proper number.

57
00:03:41,150 --> 00:03:46,980
So let's all said them l m G version as long,

58
00:03:46,980 --> 00:03:48,840
I just remind you,

59
00:03:48,840 --> 00:03:49,290
long,

60
00:03:49,290 --> 00:03:51,120
short or long integer.

61
00:03:51,120 --> 00:03:54,750
And then finally,

62
00:03:54,750 --> 00:04:01,260
let's create our 1st 1,000,000,000 variable on will use this to keep track of whether the

63
00:04:01,260 --> 00:04:03,550
user is on a Windows machine,

64
00:04:03,550 --> 00:04:10,710
So call it him bln win as Julian.

65
00:04:10,710 --> 00:04:14,650
And now let's construct our if statement.

66
00:04:14,650 --> 00:04:21,050
Let's begin by looking at the generic structure oven.

67
00:04:21,050 --> 00:04:22,060
Xlv a.

68
00:04:22,060 --> 00:04:24,260
If statement we have the key would.

69
00:04:24,260 --> 00:04:27,420
If we have a logical test,

70
00:04:27,420 --> 00:04:30,310
let's call it test one and then we have the key.

71
00:04:30,310 --> 00:04:39,340
But then then we have the statements if test one is true and then we contest for

72
00:04:39,340 --> 00:04:41,150
alternative possibilities.

73
00:04:41,150 --> 00:04:53,080
But this time we use else if and then we have statements which will kick in if test to is

74
00:04:53,080 --> 00:04:58,730
true on.

75
00:04:58,730 --> 00:05:04,300
We continue in this way with us many tests as we need when we finished all the test.

76
00:05:04,300 --> 00:05:06,490
We can then have a cattle statement,

77
00:05:06,490 --> 00:05:19,600
which will only apply if all the tests have been false and to do that we use else and then

78
00:05:19,600 --> 00:05:22,530
to terminate the if statement we used end.

79
00:05:22,530 --> 00:05:25,060
If so,

80
00:05:25,060 --> 00:05:28,850
let's begin our testing by checking for all the Windows versions of Excel.

81
00:05:28,850 --> 00:05:34,950
So it would be a good idea to populate our bln wind variable before we do the testing.

82
00:05:34,950 --> 00:05:40,980
So we can say let bln win bqool.

83
00:05:40,980 --> 00:05:42,420
And then,

84
00:05:42,420 --> 00:05:48,690
rather than testing to see whether application operating system is equal to a certain

85
00:05:48,690 --> 00:05:49,350
string,

86
00:05:49,350 --> 00:05:53,850
it's more useful to test whether it contains the word windows.

87
00:05:53,850 --> 00:05:57,450
And we can do that by using the in string function,

88
00:05:57,450 --> 00:05:59,270
which is supplied by the V B.

89
00:05:59,270 --> 00:06:00,350
A object model.

90
00:06:00,350 --> 00:06:08,370
So we start with B B A and then we drill down into the strings close on.

91
00:06:08,370 --> 00:06:10,150
We find in string.

92
00:06:10,150 --> 00:06:12,320
When we talked,

93
00:06:12,320 --> 00:06:13,510
you have in parenthesis.

94
00:06:13,510 --> 00:06:21,370
Excel reminds us of all the arguments that we need and best practice is to supply the name

95
00:06:21,370 --> 00:06:25,770
of the argument followed by colon equals bullet by the value.

96
00:06:25,770 --> 00:06:32,900
So start specifies the character from which you want to start searching,

97
00:06:32,900 --> 00:06:33,680
which in our case,

98
00:06:33,680 --> 00:06:39,880
is one the first character coma space underscore so we can end the line.

99
00:06:39,880 --> 00:06:41,700
I mean,

100
00:06:41,700 --> 00:06:42,370
let's just align.

101
00:06:42,370 --> 00:06:49,430
The second argument under the first on the second argument we need is String one Colon

102
00:06:49,430 --> 00:06:54,800
equals on This is the text string that you're evaluated.

103
00:06:54,800 --> 00:06:56,080
And of course,

104
00:06:56,080 --> 00:07:07,940
in our case it's application got operating system comma under school on the final argument

105
00:07:07,940 --> 00:07:09,450
that we need extreme to,

106
00:07:09,450 --> 00:07:13,370
which is the string that we're certain for within String one.

107
00:07:13,370 --> 00:07:14,410
And that,

108
00:07:14,410 --> 00:07:14,930
of course,

109
00:07:14,930 --> 00:07:25,550
is the word windows and then the closing to emphasise to end the in string function.

110
00:07:25,550 --> 00:07:26,890
Um,

111
00:07:26,890 --> 00:07:29,710
in the second thing we need to evaluate is the version.

112
00:07:29,710 --> 00:07:33,250
So let's use LNG version for that.

113
00:07:33,250 --> 00:07:41,250
Let LNG version equal,

114
00:07:41,250 --> 00:07:50,500
and what we need to do here is to convert a string value into a long indigent and again,

115
00:07:50,500 --> 00:07:53,150
v B A has a function that does that forest.

116
00:07:53,150 --> 00:08:04,540
So this time it's vb a got conversion and then we won't see l injury as in converted alone

117
00:08:04,540 --> 00:08:04,540
,

118
00:08:04,540 --> 00:08:07,040
and we need a single argument,

119
00:08:07,040 --> 00:08:08,580
which is called expression.

120
00:08:08,580 --> 00:08:15,150
The expression come on equals and then we simply use application.

121
00:08:15,150 --> 00:08:16,750
No version.

122
00:08:16,750 --> 00:08:22,050
So now we have the two bits of information that we need to evaluate.

123
00:08:22,050 --> 00:08:24,750
We can specify out tests,

124
00:08:24,750 --> 00:08:32,250
so let's go back as far as 2010 Excel 2010 was version 14.

125
00:08:32,250 --> 00:08:46,010
So test will be if LNG version equals 14 and the Ln win People's Truth on our statement is

126
00:08:46,010 --> 00:09:01,850
true will be let str version Equal Excel for Windows 2010 and then we can copy this test,

127
00:09:01,850 --> 00:09:09,550
just paste it here and make the necessary changes.

128
00:09:09,550 --> 00:09:11,410
So let's meet up.

129
00:09:11,410 --> 00:09:19,410
Version 1015 was Excel for Windows 2013 on.

130
00:09:19,410 --> 00:09:28,010
Then let's just do one more version 16.

131
00:09:28,010 --> 00:09:30,970
If Yellen,

132
00:09:30,970 --> 00:09:31,800
when it's true,

133
00:09:31,800 --> 00:09:38,450
is Excel for Windows 2016 then let's move on to the Mac versions.

134
00:09:38,450 --> 00:09:47,350
So if the version is 14 but bln win is false,

135
00:09:47,350 --> 00:09:56,520
then the user is on Mac 2011 on,

136
00:09:56,520 --> 00:09:58,350
then let's copy that.

137
00:09:58,350 --> 00:10:01,610
And finally,

138
00:10:01,610 --> 00:10:12,350
if the version is 15 on bln Winnie's Falls,

139
00:10:12,350 --> 00:10:13,810
for some reason,

140
00:10:13,810 --> 00:10:17,040
the user is on Excel for Mac.

141
00:10:17,040 --> 00:10:18,200
2016

142
00:10:18,200 --> 00:10:19,790
If you're on a Mac,

143
00:10:19,790 --> 00:10:22,260
use in 2016 the version comes up,

144
00:10:22,260 --> 00:10:23,160
it's 15.

145
00:10:23,160 --> 00:10:24,560
If you're on Windows,

146
00:10:24,560 --> 00:10:25,850
it comes up a 60.

147
00:10:25,850 --> 00:10:27,970
So that's the technique.

148
00:10:27,970 --> 00:10:28,420
And obviously,

149
00:10:28,420 --> 00:10:29,710
if you need to do this,

150
00:10:29,710 --> 00:10:34,570
you may need to sort of a test for some of the earlier versions that this is just to

151
00:10:34,570 --> 00:10:35,770
illustrate how,

152
00:10:35,770 --> 00:10:41,990
if else if it works So these are all the tests we want to do and then the else becomes our

153
00:10:41,990 --> 00:10:44,790
cattle Is none of the other truth.

154
00:10:44,790 --> 00:10:47,400
What value do we want to place inside?

155
00:10:47,400 --> 00:10:59,080
Str version So let's simply say Let's str version cool and then we'll put a fixed piece of

156
00:10:59,080 --> 00:11:01,350
text for example,

157
00:11:01,350 --> 00:11:05,750
a pre 2010 version.

158
00:11:05,750 --> 00:11:07,350
I think so.

159
00:11:07,350 --> 00:11:14,680
So having the else clause within your structure allows you to cater for pretty much every

160
00:11:14,680 --> 00:11:21,320
eventuality chest or all the things you're interested in testing ball and then the Els will

161
00:11:21,320 --> 00:11:23,790
apply to all other possibilities.

162
00:11:23,790 --> 00:11:30,730
So what we've achieved with the if statement is to have the variable str version contain

163
00:11:30,730 --> 00:11:35,880
the version that excel and now we simply need a function to return.

164
00:11:35,880 --> 00:11:36,960
Str version.

165
00:11:36,960 --> 00:11:39,010
So after the statement,

166
00:11:39,010 --> 00:11:45,300
we simply need to say Let's excel version equal.

167
00:11:45,300 --> 00:11:51,450
Str on Then let's just coated,

168
00:11:51,450 --> 00:11:54,650
debunk and compiled to make sure there are no errors.

169
00:11:54,650 --> 00:11:58,660
And now let's give XXL and use on function.

170
00:11:58,660 --> 00:12:03,350
So this static message we can now convert into a dynamic one.

171
00:12:03,350 --> 00:12:05,000
So make the whole thing.

172
00:12:05,000 --> 00:12:11,940
Is your formula equal sign at the beginning and converting out text into a string by

173
00:12:11,940 --> 00:12:14,150
enclosing it in quotation marks.

174
00:12:14,150 --> 00:12:18,080
And then instead of this static 20 tainment,

175
00:12:18,080 --> 00:12:21,350
we now can Katyn eight using ampersand.

176
00:12:21,350 --> 00:12:22,990
How do you function?

177
00:12:22,990 --> 00:12:32,730
Excel version Closing Apprentices on memory Presenter I'm using Excel for Windows 2016.

178
00:12:32,730 --> 00:12:34,850
Onda function just picks that up.

