1
00:00:00,000 --> 00:00:11,000
in this video,

2
00:00:11,000 --> 00:00:15,940
we'll look at two techniques which you can use to optimize and speed up your look up

3
00:00:15,940 --> 00:00:16,910
operations.

4
00:00:16,910 --> 00:00:20,050
05 Look up in reference.

5
00:00:20,050 --> 00:00:23,230
Let's open 05 optimizing.

6
00:00:23,230 --> 00:00:24,700
Look up operations.

7
00:00:24,700 --> 00:00:29,250
Now there are lots of minor changes that you can make,

8
00:00:29,250 --> 00:00:33,550
which will moderately speed up your look up operations.

9
00:00:33,550 --> 00:00:38,970
What we're gonna discuss in this video that the two techniques that you can use to make

10
00:00:38,970 --> 00:00:45,840
dramatic speed improvements in any look up operations that you're doing on the first

11
00:00:45,840 --> 00:00:51,820
technique will look at his use of the approximate match type as opposed to the exact match

12
00:00:51,820 --> 00:00:52,250
time.

13
00:00:52,250 --> 00:00:55,750
Let me begin by reminding you the difference.

14
00:00:55,750 --> 00:00:58,050
First of all,

15
00:00:58,050 --> 00:01:04,110
we've got a serious of job candidates and we're looking to complete these three columns

16
00:01:04,110 --> 00:01:11,700
based on information in the applications worksheets on the application work seat as an

17
00:01:11,700 --> 00:01:18,000
entry of road for every stage reached by each of the candidates.

18
00:01:18,000 --> 00:01:24,650
And then the stages work feats as details of what those stages are.

19
00:01:24,650 --> 00:01:25,900
So as you can see,

20
00:01:25,900 --> 00:01:27,050
there are six of them,

21
00:01:27,050 --> 00:01:32,650
starting with having an interest in C V all the way to being hired.

22
00:01:32,650 --> 00:01:41,270
So if in our applications work seeds we want to display not just the stage number that the

23
00:01:41,270 --> 00:01:42,560
stage description,

24
00:01:42,560 --> 00:01:44,330
we can use it be,

25
00:01:44,330 --> 00:01:48,550
look up or we could use a combination of index and match.

26
00:01:48,550 --> 00:01:50,950
Let's go ahead and do that.

27
00:01:50,950 --> 00:01:59,750
We'll call the new column stage description.

28
00:01:59,750 --> 00:02:07,350
And since the data were looking up is so insignificant,

29
00:02:07,350 --> 00:02:11,980
it doesn't matter whether we use we look up all index and match.

30
00:02:11,980 --> 00:02:17,650
But what we really interested in discussing is the use of approximate match.

31
00:02:17,650 --> 00:02:20,060
So let's use V look,

32
00:02:20,060 --> 00:02:20,440
huh?

33
00:02:20,440 --> 00:02:23,150
Equals we look up.

34
00:02:23,150 --> 00:02:25,860
The lookout value is the stage number,

35
00:02:25,860 --> 00:02:29,050
which isn't too coma.

36
00:02:29,050 --> 00:02:30,500
Look up.

37
00:02:30,500 --> 00:02:36,450
A raise in the state is worksheets and its columns A and B coma.

38
00:02:36,450 --> 00:02:42,690
The result were looking boys in column two of that look up table comma.

39
00:02:42,690 --> 00:02:46,530
And it's this final optional argument,

40
00:02:46,530 --> 00:02:52,350
which specifies whether we have an approximate match or an exact match.

41
00:02:52,350 --> 00:02:54,580
And the first technique,

42
00:02:54,580 --> 00:02:57,290
which has a big impact on the performance.

43
00:02:57,290 --> 00:03:01,630
The speed of your look up operations is that wherever possible,

44
00:03:01,630 --> 00:03:03,940
you should use approximate mash.

45
00:03:03,940 --> 00:03:10,450
Let's just insert true one is the alternative both mean the same thing,

46
00:03:10,450 --> 00:03:13,180
and then when we end to that,

47
00:03:13,180 --> 00:03:20,850
you can see that stage to correspondence to phone screen on we human copy that down.

48
00:03:20,850 --> 00:03:29,450
So what makes the approximate match type so much faster than the exact match die?

49
00:03:29,450 --> 00:03:32,050
Basically,

50
00:03:32,050 --> 00:03:33,850
with an exact match,

51
00:03:33,850 --> 00:03:38,470
Excel has to search every single road of the look up table.

52
00:03:38,470 --> 00:03:39,670
So,

53
00:03:39,670 --> 00:03:40,750
in this example,

54
00:03:40,750 --> 00:03:42,090
will again for F two,

55
00:03:42,090 --> 00:03:45,650
which contains one with the exact match.

56
00:03:45,650 --> 00:03:53,310
Excel goes to the first row of the specified range to look up range and compares it to to

57
00:03:53,310 --> 00:03:54,800
the value in that cell,

58
00:03:54,800 --> 00:04:03,750
in this case with the element numbers so text evaluates to zero does that to equal zero.

59
00:04:03,750 --> 00:04:04,440
No,

60
00:04:04,440 --> 00:04:06,750
it doesn't say it moves on to the next cell.

61
00:04:06,750 --> 00:04:09,190
Does that to equal one?

62
00:04:09,190 --> 00:04:10,090
Yes,

63
00:04:10,090 --> 00:04:10,830
it does.

64
00:04:10,830 --> 00:04:14,760
So Excel stops and then pulls back the value from Colin,

65
00:04:14,760 --> 00:04:15,290
too.

66
00:04:15,290 --> 00:04:16,880
So that's no problem.

67
00:04:16,880 --> 00:04:18,650
It's all in such a small table.

68
00:04:18,650 --> 00:04:21,600
But what if we had half a 1,000,000 entries?

69
00:04:21,600 --> 00:04:28,720
Excel would basically have to evaluate all of these rows until it finds something that's

70
00:04:28,720 --> 00:04:30,880
equal to what it's looking for.

71
00:04:30,880 --> 00:04:38,300
And it's this repeated testing for equality that makes the exact match so slow Excel is

72
00:04:38,300 --> 00:04:44,890
forced to perform what's called a linear search going from row to row testing for equality

73
00:04:44,890 --> 00:04:44,890
.

74
00:04:44,890 --> 00:04:47,450
By contrast,

75
00:04:47,450 --> 00:04:50,560
when you specify an approximate match time,

76
00:04:50,560 --> 00:04:53,850
Excel perform what's called a binary search.

77
00:04:53,850 --> 00:04:55,950
This is far more efficient.

78
00:04:55,950 --> 00:05:02,450
The way it works is that Excel goes to the middle value halfway down the date of range and

79
00:05:02,450 --> 00:05:04,370
compares that to the look of value.

80
00:05:04,370 --> 00:05:05,770
Listen,

81
00:05:05,770 --> 00:05:06,070
Ari,

82
00:05:06,070 --> 00:05:13,950
we have seven rows Excel goes to road for and compares F two to the value on road full.

83
00:05:13,950 --> 00:05:15,600
If that,

84
00:05:15,600 --> 00:05:16,240
too,

85
00:05:16,240 --> 00:05:18,990
is equal to that value job done,

86
00:05:18,990 --> 00:05:20,780
it's found what it's looking for.

87
00:05:20,780 --> 00:05:23,750
If it's greater than that value,

88
00:05:23,750 --> 00:05:29,850
then itself simply ignores all the roads a bubble and focuses on the roads below.

89
00:05:29,850 --> 00:05:32,600
In this case,

90
00:05:32,600 --> 00:05:35,950
F two is less than the road that we've evaluated.

91
00:05:35,950 --> 00:05:41,150
So excel this guns the bottom half and focuses on the top half.

92
00:05:41,150 --> 00:05:44,000
It goes to the middle row of what's remaining.

93
00:05:44,000 --> 00:05:44,660
So in this case,

94
00:05:44,660 --> 00:05:46,300
we've got three road meaning.

95
00:05:46,300 --> 00:05:51,050
It goes to the middle road and compares F two to the value in macro,

96
00:05:51,050 --> 00:05:53,900
which happens to be what it's looking for.

97
00:05:53,900 --> 00:05:55,450
So at this stage it would stop.

98
00:05:55,450 --> 00:06:00,050
So if we had half a 1,000,000 roasted process,

99
00:06:00,050 --> 00:06:07,060
you can see how using a binary search is gonna be so much more efficient because with each

100
00:06:07,060 --> 00:06:07,860
pass,

101
00:06:07,860 --> 00:06:14,800
the number of rows being process is hard and it doesn't take very long for Excel to start

102
00:06:14,800 --> 00:06:16,710
whittling down the number of rows,

103
00:06:16,710 --> 00:06:20,300
starting with half a 1,000,000 within 20 passes.

104
00:06:20,300 --> 00:06:21,490
We're down to one road,

105
00:06:21,490 --> 00:06:28,350
and this is what makes approximate match so dramatically faster than exact match.

106
00:06:28,350 --> 00:06:32,820
So when you work in with large data sets,

107
00:06:32,820 --> 00:06:36,000
you should always try and use the proximate match on.

108
00:06:36,000 --> 00:06:36,350
Obviously,

109
00:06:36,350 --> 00:06:42,050
you've got to make sure that the data is sorted on the look up Colin sorted in ascending

110
00:06:42,050 --> 00:06:42,550
order.

111
00:06:42,550 --> 00:06:45,100
However,

112
00:06:45,100 --> 00:06:48,470
there is one problem with using approximate match,

113
00:06:48,470 --> 00:06:51,500
and that is that it doesn't give you errors.

114
00:06:51,500 --> 00:06:56,550
So if I put a stage number that doesn't exist like nine,

115
00:06:56,550 --> 00:07:00,960
I really want this to say not available.

116
00:07:00,960 --> 00:07:06,350
But instead it simply gives me the highest value.

117
00:07:06,350 --> 00:07:11,950
It's where I have an invalid member in stage number.

118
00:07:11,950 --> 00:07:16,680
I'm simply going to get any erroneous results instead of getting an error,

119
00:07:16,680 --> 00:07:18,390
which I can then pick up on.

120
00:07:18,390 --> 00:07:23,260
So whenever you're using approximate match,

121
00:07:23,260 --> 00:07:25,450
you need to do a bit of error handling.

122
00:07:25,450 --> 00:07:33,050
So the solution is to use an if statement and then for the logical test,

123
00:07:33,050 --> 00:07:38,240
we use the look up set in the column in next to No.

124
00:07:38,240 --> 00:07:45,160
One and then converting the V look up into a logical test I put in equals.

125
00:07:45,160 --> 00:07:47,150
Whatever the look of value is,

126
00:07:47,150 --> 00:07:52,550
so we're looking for F two in column one.

127
00:07:52,550 --> 00:07:53,230
So,

128
00:07:53,230 --> 00:07:53,850
in other words,

129
00:07:53,850 --> 00:08:00,830
we're testing to see whether somewhere within that first column the value that we're using

130
00:08:00,830 --> 00:08:04,600
to pull back the state description does actually exist.

131
00:08:04,600 --> 00:08:06,390
As long as it does.

132
00:08:06,390 --> 00:08:07,550
Our family,

133
00:08:07,550 --> 00:08:08,310
true,

134
00:08:08,310 --> 00:08:09,850
becomes to be look up.

135
00:08:09,850 --> 00:08:12,290
But if it doesn't exist,

136
00:08:12,290 --> 00:08:18,840
our value of false becomes the function in a on the end,

137
00:08:18,840 --> 00:08:22,320
a function is a special era handle in function,

138
00:08:22,320 --> 00:08:23,480
which Excel has,

139
00:08:23,480 --> 00:08:27,170
which simply generates the n a error value.

140
00:08:27,170 --> 00:08:41,130
So let's update our be look up statement algo centre.

141
00:08:41,130 --> 00:08:50,550
Now Delta function now becomes if Ben Theological Test.

142
00:08:50,550 --> 00:08:53,050
We want Help me look up,

143
00:08:53,050 --> 00:08:58,050
John Copy using column one.

144
00:08:58,050 --> 00:09:05,270
And then we test whether it's equal to two comma.

145
00:09:05,270 --> 00:09:07,350
That's a logical test,

146
00:09:07,350 --> 00:09:10,780
all center and for value.

147
00:09:10,780 --> 00:09:12,790
True Wilder's paste in When I copied.

148
00:09:12,790 --> 00:09:13,710
And this,

149
00:09:13,710 --> 00:09:14,090
of course,

150
00:09:14,090 --> 00:09:17,700
is column to which is a column we're pulling back from the look up table,

151
00:09:17,700 --> 00:09:26,880
comma old enter and then the special function in a And,

152
00:09:26,880 --> 00:09:29,170
of course it's a function that takes no arguments.

153
00:09:29,170 --> 00:09:32,280
Its sole purpose in life is to generate the end.

154
00:09:32,280 --> 00:09:36,060
A caravan on the closing parenthesis,

155
00:09:36,060 --> 00:09:40,320
determinate the if so,

156
00:09:40,320 --> 00:09:41,360
let's into them.

157
00:09:41,360 --> 00:09:43,250
It was fine,

158
00:09:43,250 --> 00:09:49,630
but what we've now put in place it's a way of picking up values that don't exist.

159
00:09:49,630 --> 00:09:51,430
So if I put that mine back in,

160
00:09:51,430 --> 00:09:52,610
there is no nine,

161
00:09:52,610 --> 00:09:54,400
so it generates the end.

162
00:09:54,400 --> 00:09:55,780
A era value.

163
00:09:55,780 --> 00:10:00,550
That's how you use approximate match with the look up.

164
00:10:00,550 --> 00:10:01,940
And as I've said,

165
00:10:01,940 --> 00:10:07,110
the only provider is you've got to make sure we put some error handling to pick up illegal

166
00:10:07,110 --> 00:10:07,950
entries.

167
00:10:07,950 --> 00:10:15,140
Let's now move across the outcomes and look at the second major tech me or improving the

168
00:10:15,140 --> 00:10:17,370
speed of your look up operations.

