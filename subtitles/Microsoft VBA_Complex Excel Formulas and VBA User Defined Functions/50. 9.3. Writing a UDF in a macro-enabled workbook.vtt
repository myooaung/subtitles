WEBVTT
ï»¿1
00:00:00.000 --> 00:00:12.850
having had a look at the environment in which will be working.

2
00:00:12.850 --> 00:00:16.690
Let's now move on to write our first user defined function.

3
00:00:16.690 --> 00:00:20.550
709 Getting started with the V A.

4
00:00:20.550 --> 00:00:29.040
Let's open up number three and we want the Excel version right in the UDF in the macro

5
00:00:29.040 --> 00:00:31.350
enabled workbook the next Senate Sex.

6
00:00:31.350 --> 00:00:38.620
As we've seen to write a user defined function in the developer tab,

7
00:00:38.620 --> 00:00:40.050
we click on visual Basic,

8
00:00:40.050 --> 00:00:44.650
and this takes us into what's told Visual basic editor.

9
00:00:44.650 --> 00:00:46.060
We have,

10
00:00:46.060 --> 00:00:46.280
ah,

11
00:00:46.280 --> 00:00:49.430
Project Explorer Window open on.

12
00:00:49.430 --> 00:00:55.250
The first thing that we need to do is to create a container or our user defined function,

13
00:00:55.250 --> 00:01:01.940
and the appropriate container is referred to as a model models.

14
00:01:01.940 --> 00:01:09.110
They used a store of Mac Rose and user defined functions you can inside a module in two

15
00:01:09.110 --> 00:01:09.750
ways.

16
00:01:09.750 --> 00:01:13.800
In the menus get to insert singers module,

17
00:01:13.800 --> 00:01:15.850
and I think probably guess,

18
00:01:15.850 --> 00:01:18.350
if you right click on the projects,

19
00:01:18.350 --> 00:01:24.790
you'll see that insert is available in the context menu and even the interest use module.

20
00:01:24.790 --> 00:01:28.650
Since the module is a container for code,

21
00:01:28.650 --> 00:01:35.760
naturally it has associated with it a code window inside of which you write your code When

22
00:01:35.760 --> 00:01:36.880
you create the module,

23
00:01:36.880 --> 00:01:39.190
the code window opens automatically,

24
00:01:39.190 --> 00:01:42.750
and you can close it and reopen it at any time.

25
00:01:42.750 --> 00:01:46.990
Close the code when they use the small X The large axes,

26
00:01:46.990 --> 00:01:47.590
obviously,

27
00:01:47.590 --> 00:01:50.250
for closing the visual basic editor completely.

28
00:01:50.250 --> 00:01:56.230
So when I click here that closes the code window.

29
00:01:56.230 --> 00:01:57.460
The module one.

30
00:01:57.460 --> 00:02:03.320
The model I have just created anybody double click on Module one again that reopens the

31
00:02:03.320 --> 00:02:04.190
code window.

32
00:02:04.190 --> 00:02:07.750
When you start writing user defined functions,

33
00:02:07.750 --> 00:02:11.850
you may decide to store them in several different modules.

34
00:02:11.850 --> 00:02:18.410
So it's a good idea to come up with a name in system so that you know which module contains

35
00:02:18.410 --> 00:02:19.350
which function.

36
00:02:19.350 --> 00:02:22.950
To change the name of a model that you can probably guess.

37
00:02:22.950 --> 00:02:25.450
We use our properties window.

38
00:02:25.450 --> 00:02:27.900
Close the properties.

39
00:02:27.900 --> 00:02:28.350
When those.

40
00:02:28.350 --> 00:02:31.210
I could just remind you that to make it visible,

41
00:02:31.210 --> 00:02:34.350
we went to view properties window.

42
00:02:34.350 --> 00:02:38.130
So with Model One selected,

43
00:02:38.130 --> 00:02:41.240
you'll notice that there is only a single property available,

44
00:02:41.240 --> 00:02:43.150
and that's the name of the module.

45
00:02:43.150 --> 00:02:47.750
Let's just call it M basics.

46
00:02:47.750 --> 00:02:52.130
As with named Ranges,

47
00:02:52.130 --> 00:02:58.320
spaces are not allowed in the name of a model and the convention of starting the name with

48
00:02:58.320 --> 00:03:04.550
a capital M purely distinguishes it from other objects that you may encounter while you're

49
00:03:04.550 --> 00:03:06.250
right in your BB a code.

50
00:03:06.250 --> 00:03:12.440
So we now have a module which will act as a container for any user defined functions that

51
00:03:12.440 --> 00:03:13.050
we right.

52
00:03:13.050 --> 00:03:16.950
Let's now move on to writing the user defined function.

53
00:03:16.950 --> 00:03:26.060
The simplest way is to go to inserts and shoes procedure because a function is a type of

54
00:03:26.060 --> 00:03:26.850
procedure.

55
00:03:26.850 --> 00:03:34.550
Then in the type section we click on function and we leave the scope set to public.

56
00:03:34.550 --> 00:03:39.250
And finally we come up with a name for the function.

57
00:03:39.250 --> 00:03:43.950
The function that we're going to write in this example is really basic.

58
00:03:43.950 --> 00:03:47.750
It simply returns a piece of text.

59
00:03:47.750 --> 00:03:56.150
Let's go back into the training folder and you'll see that as well as the Excel file.

60
00:03:56.150 --> 00:03:59.450
We haven't identically named text file.

61
00:03:59.450 --> 00:04:01.450
If you open that,

62
00:04:01.450 --> 00:04:07.280
you'll see the text that we want our user defined function to inset on.

63
00:04:07.280 --> 00:04:12.670
The reason for taking this approach might be where you have a standard piece of text that

64
00:04:12.670 --> 00:04:18.850
needs to be worded in a specific fashion on which may occasionally need to be updated.

65
00:04:18.850 --> 00:04:23.150
So if you insert it by using a user defined function.

66
00:04:23.150 --> 00:04:26.450
When you redefine the user defined function,

67
00:04:26.450 --> 00:04:28.550
when you have in the workbook,

68
00:04:28.550 --> 00:04:31.650
you'll find the new version of that text.

69
00:04:31.650 --> 00:04:33.440
So while we're here,

70
00:04:33.440 --> 00:04:34.970
that's places on the clipboard.

71
00:04:34.970 --> 00:04:40.610
And then let's get back to Excel.

72
00:04:40.610 --> 00:04:44.180
And now we can enter a suitable vein,

73
00:04:44.180 --> 00:04:57.950
so I'm just going to call it confidential and click OK and that causes Excel to insert the

74
00:04:57.950 --> 00:04:58.980
function code.

75
00:04:58.980 --> 00:05:00.780
And of course,

76
00:05:00.780 --> 00:05:06.550
there's nothing to stop us simply right in that code rather than use in inset function.

77
00:05:06.550 --> 00:05:11.850
So the key words are public function and end function.

78
00:05:11.850 --> 00:05:16.530
And then we've got the name that we've chosen and parentheses.

79
00:05:16.530 --> 00:05:22.950
The parentheses have exactly the same purpose as they do with excels built in functions,

80
00:05:22.950 --> 00:05:25.850
their containers for arguments.

81
00:05:25.850 --> 00:05:27.400
However,

82
00:05:27.400 --> 00:05:31.550
as with some Excel functions such as today and now,

83
00:05:31.550 --> 00:05:35.250
notable functions require arguments.

84
00:05:35.250 --> 00:05:38.310
Let's go to be the case in our first function.

85
00:05:38.310 --> 00:05:39.950
We don't need any arguments,

86
00:05:39.950 --> 00:05:42.910
But as with Excel functions,

87
00:05:42.910 --> 00:05:44.820
even if you don't need arguments,

88
00:05:44.820 --> 00:05:51.570
you still need the parentheses on the final piece of infrastructure that we need to put in

89
00:05:51.570 --> 00:05:56.370
place is to define the type of data which are function,

90
00:05:56.370 --> 00:06:00.110
will return or produce and In this case,

91
00:06:00.110 --> 00:06:04.550
it's clearly a piece of text to specify the data type.

92
00:06:04.550 --> 00:06:09.410
You simply type the keywords as when you hit the space bar.

93
00:06:09.410 --> 00:06:16.470
Excel gives you a long list of all the different types of data that your function they

94
00:06:16.470 --> 00:06:20.050
return on in B B A.

95
00:06:20.050 --> 00:06:23.450
The word for text is string.

96
00:06:23.450 --> 00:06:32.390
They find type S T or rather str We'll see that string is highlighted in the list and then

97
00:06:32.390 --> 00:06:34.750
they can just press the tab key to insert it.

98
00:06:34.750 --> 00:06:39.760
So that's the mechanism.

99
00:06:39.760 --> 00:06:44.650
But he fine in a function and specifying the type of data it returns.

100
00:06:44.650 --> 00:06:51.300
Now we need to specifically say what that data actually consists off.

101
00:06:51.300 --> 00:06:54.750
So that's the code that I've currently got on my clipboard.

102
00:06:54.750 --> 00:07:02.110
I'm just gonna press the tab key to in dense the line of code and I'm gonna write that is

103
00:07:02.110 --> 00:07:03.750
purely for readability.

104
00:07:03.750 --> 00:07:07.450
Specify what the function produces.

105
00:07:07.450 --> 00:07:09.980
The results of the function used.

106
00:07:09.980 --> 00:07:18.980
The key word let in the name of the function and you'll notice that I typed it with lower

107
00:07:18.980 --> 00:07:19.650
case.

108
00:07:19.650 --> 00:07:22.800
Since I've defined it with another case,

109
00:07:22.800 --> 00:07:25.650
C even if I type it with lower case,

110
00:07:25.650 --> 00:07:27.810
Excel will always capitalize.

111
00:07:27.810 --> 00:07:29.520
It it will follow,

112
00:07:29.520 --> 00:07:32.350
the case indicated in the definition.

113
00:07:32.350 --> 00:07:39.640
So let the name of my function confidential equal the result of my function.

114
00:07:39.640 --> 00:07:41.780
What I want my function to produce.

115
00:07:41.780 --> 00:07:42.920
And in this case,

116
00:07:42.920 --> 00:07:44.170
because it's text,

117
00:07:44.170 --> 00:07:45.800
we put quotation marks,

118
00:07:45.800 --> 00:07:54.150
and then we can just copy that long stream because it is a long string.

119
00:07:54.150 --> 00:07:58.250
It's a good idea to split it onto several lines for readability,

120
00:07:58.250 --> 00:08:00.370
so that when you look at your code,

121
00:08:00.370 --> 00:08:06.850
you don't have to constantly scroll left and right to split this line of text.

122
00:08:06.850 --> 00:08:09.050
We simply end the string,

123
00:08:09.050 --> 00:08:10.850
so I'll end it here.

124
00:08:10.850 --> 00:08:12.360
And in fact,

125
00:08:12.360 --> 00:08:15.150
that has noticed that the word Andi is missing.

126
00:08:15.150 --> 00:08:19.510
This report is confidential and should only be viewed.

127
00:08:19.510 --> 00:08:25.170
So that's just a little bit and in spirit here suspect it.

128
00:08:25.170 --> 00:08:26.950
We put closing quotes.

129
00:08:26.950 --> 00:08:34.250
I m percent what we've encountered many times in our functions and formulas.

130
00:08:34.250 --> 00:08:36.860
And then you put an underscore.

131
00:08:36.860 --> 00:08:38.040
So space,

132
00:08:38.040 --> 00:08:39.330
followed by an underscore,

133
00:08:39.330 --> 00:08:43.580
is the signal a split in a line in B B A,

134
00:08:43.580 --> 00:08:47.450
and you do that whenever a line is going right off the screen.

135
00:08:47.450 --> 00:08:56.810
So now I can just press return but open quotation marks on these two lines are now going to

136
00:08:56.810 --> 00:08:58.470
be treated as a single one,

137
00:08:58.470 --> 00:09:05.750
So that's an example of the simplest type of user defined function that you can create.

138
00:09:05.750 --> 00:09:08.000
It has a name,

139
00:09:08.000 --> 00:09:10.150
and whenever it's used,

140
00:09:10.150 --> 00:09:13.880
it simply returns a literal value in this case,

141
00:09:13.880 --> 00:09:15.680
a string which I,

142
00:09:15.680 --> 00:09:16.450
incidentally,

143
00:09:16.450 --> 00:09:19.350
have to terminates with a closing quotation mark.

144
00:09:19.350 --> 00:09:23.080
Whatever you finished writing code.

145
00:09:23.080 --> 00:09:24.290
If all test in it,

146
00:09:24.290 --> 00:09:27.200
you can go to the debug menu and truce,

147
00:09:27.200 --> 00:09:29.850
compile and acceptable.

148
00:09:29.850 --> 00:09:32.410
Then I like the first error that you made,

149
00:09:32.410 --> 00:09:34.480
which will prevent the code from running,

150
00:09:34.480 --> 00:09:37.350
and you repeat that process until you've got no errors.

151
00:09:37.350 --> 00:09:38.320
Obviously,

152
00:09:38.320 --> 00:09:39.180
in this example,

153
00:09:39.180 --> 00:09:40.240
there's not much room.

154
00:09:40.240 --> 00:09:40.670
Ferreira,

155
00:09:40.670 --> 00:09:46.720
so we haven't made any errors were now ready to test our function so close of E.

156
00:09:46.720 --> 00:09:46.890
B.

157
00:09:46.890 --> 00:09:47.350
A.

158
00:09:47.350 --> 00:09:51.550
And to find out function,

159
00:09:51.550 --> 00:09:54.110
we can simply start to type it.

160
00:09:54.110 --> 00:09:56.750
So if I type equals c o N f,

161
00:09:56.750 --> 00:09:59.560
you'll see it comes up in the list.

162
00:09:59.560 --> 00:10:02.350
And as usual,

163
00:10:02.350 --> 00:10:04.520
I don't even have to put the clothes in parenthesis.

164
00:10:04.520 --> 00:10:07.950
When I present up comes my text.

165
00:10:07.950 --> 00:10:10.820
So in this example,

166
00:10:10.820 --> 00:10:15.650
were actually storing the user defined function within the workbook itself.

167
00:10:15.650 --> 00:10:19.340
It's not being stored in an external resource.

168
00:10:19.340 --> 00:10:21.810
Whenever that's the case,

169
00:10:21.810 --> 00:10:28.910
the workbook has to be saved Is a macro enabled workbook So any VB a code that you put

170
00:10:28.910 --> 00:10:34.350
inside a workbook requires that the workbook be saved as macro enable.

171
00:10:34.350 --> 00:10:35.760
So to do that,

172
00:10:35.760 --> 00:10:43.590
we simply go to file save as a man in the savers type section,

173
00:10:43.590 --> 00:10:51.250
we choose Excel macro enabled workbook from the drop down and then save.

