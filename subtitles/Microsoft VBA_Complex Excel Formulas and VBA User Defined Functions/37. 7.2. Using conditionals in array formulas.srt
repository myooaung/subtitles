1
00:00:00,000 --> 00:00:15,310
in this video will extend the basic array formula that we created in the last video by

2
00:00:15,310 --> 00:00:23,930
making it conditional 07 right formulas that's open zero to using condition ALS in array

3
00:00:23,930 --> 00:00:24,750
formulas.

4
00:00:24,750 --> 00:00:29,300
So this is a far as we called in the last video.

5
00:00:29,300 --> 00:00:36,770
We have an array formula which multiplies quantity by unit price and then returns the total

6
00:00:36,770 --> 00:00:37,850
rural rose.

7
00:00:37,850 --> 00:00:45,250
What we now want to do is to split this by both branch and product range.

8
00:00:45,250 --> 00:00:52,550
So we want a matrix of conditional co tal's and each time we want to conditions satisfied,

9
00:00:52,550 --> 00:01:03,150
the branch name and the product range name be to the branch name has to be Aberdeen on the

10
00:01:03,150 --> 00:01:10,300
entry in product range has to be Jamia and so forth on the normal circumstances,

11
00:01:10,300 --> 00:01:11,850
we would use some ifs,

12
00:01:11,850 --> 00:01:20,740
but the problem here is that some ifs requires a reference to two ranges.

13
00:01:20,740 --> 00:01:23,650
But some range on the criteria range,

14
00:01:23,650 --> 00:01:27,190
and what we need to do is not to supply.

15
00:01:27,190 --> 00:01:33,050
Arrange to supply a calculation which multiplies one array by another.

16
00:01:33,050 --> 00:01:38,970
And that calculation is not an acceptable argument for the summits function.

17
00:01:38,970 --> 00:01:49,390
So what we have to do instead is to find a way of using the calculation that we've

18
00:01:49,390 --> 00:01:50,350
currently got,

19
00:01:50,350 --> 00:02:00,400
but making it conditional so that as we go from row to row quantity,

20
00:02:00,400 --> 00:02:06,250
times unit price will only apply when the two conditions are met.

21
00:02:06,250 --> 00:02:15,910
When the bronze is what it should be on the product range is what it simply before we move

22
00:02:15,910 --> 00:02:17,250
on to look at our formula,

23
00:02:17,250 --> 00:02:20,750
let's create two more named Ranges.

24
00:02:20,750 --> 00:02:24,650
We go across the formulas and click on name manager.

25
00:02:24,650 --> 00:02:30,350
We can see the two names that we created in the last video quantity in unit price.

26
00:02:30,350 --> 00:02:33,000
Let's go across the item sales,

27
00:02:33,000 --> 00:02:40,050
and it's now adding the two criteria ranges that were interested in branch and range.

28
00:02:40,050 --> 00:02:46,840
Now you remember we can't reference the entire column when we working with the Wraith

29
00:02:46,840 --> 00:02:47,540
formulas,

30
00:02:47,540 --> 00:02:50,550
we have to reference the individual cells.

31
00:02:50,550 --> 00:02:54,450
So click on the one press control shit down,

32
00:02:54,450 --> 00:02:59,940
and then we can use this convenient create from selection and use top row.

33
00:02:59,940 --> 00:03:03,050
Then let's do the same range.

34
00:03:03,050 --> 00:03:04,050
Cleveland.

35
00:03:04,050 --> 00:03:06,460
I won control ship down,

36
00:03:06,460 --> 00:03:07,750
create from selection,

37
00:03:07,750 --> 00:03:15,090
so we now have four names that we can reference in our regular.

38
00:03:15,090 --> 00:03:23,120
So we look into creative formula in Selby,

39
00:03:23,120 --> 00:03:23,750
too,

40
00:03:23,750 --> 00:03:29,630
which we can then copy to the right or all the other product ranges and copy down for all

41
00:03:29,630 --> 00:03:37,130
the other branches on the bronze that applies to Selby to Is Aberdeen on the product range

42
00:03:37,130 --> 00:03:38,450
is called Jamia,

43
00:03:38,450 --> 00:03:44,850
so we want to have a formula which performs a logical test,

44
00:03:44,850 --> 00:03:48,550
and we can do this by nest in an if statement,

45
00:03:48,550 --> 00:03:51,500
the first parameter if is a course,

46
00:03:51,500 --> 00:03:52,650
a logical test,

47
00:03:52,650 --> 00:03:55,540
and we need to combine two tests.

48
00:03:55,540 --> 00:04:01,790
We want to test every row in the brown Colin the branch array to see whether it matters the

49
00:04:01,790 --> 00:04:03,950
value in cell eight to,

50
00:04:03,950 --> 00:04:11,030
and we then want to perform a similar test on every road in the Range column to see whether

51
00:04:11,030 --> 00:04:14,050
it matches the value and sell be one.

52
00:04:14,050 --> 00:04:19,450
The normal way of combining two logical tests is to use the and function,

53
00:04:19,450 --> 00:04:22,840
and then we have a logical test one a logical test,

54
00:04:22,840 --> 00:04:23,250
too.

55
00:04:23,250 --> 00:04:25,250
But unfortunately,

56
00:04:25,250 --> 00:04:26,950
with our array formula,

57
00:04:26,950 --> 00:04:28,550
this one work,

58
00:04:28,550 --> 00:04:34,550
the problem is that the and function only returns true or holes,

59
00:04:34,550 --> 00:04:40,950
and what we need to have is a logical test but returns an array of true or false values.

60
00:04:40,950 --> 00:04:43,650
Se ro one is true.

61
00:04:43,650 --> 00:04:47,850
We go ahead and multiply the quantity by the unit price.

62
00:04:47,850 --> 00:04:49,860
Otherwise,

63
00:04:49,860 --> 00:04:50,870
we put a zero.

64
00:04:50,870 --> 00:04:52,280
And of course,

65
00:04:52,280 --> 00:04:54,450
we know that the cell B two,

66
00:04:54,450 --> 00:04:57,650
if we compare the branch and the range,

67
00:04:57,650 --> 00:05:00,940
none of the 1st 4 items will return.

68
00:05:00,940 --> 00:05:06,260
True because we don't have Aberdeen and Jamia as the combination.

69
00:05:06,260 --> 00:05:12,610
And it's only when both of these are in play that we get a true So the formula in Selby,

70
00:05:12,610 --> 00:05:13,250
too,

71
00:05:13,250 --> 00:05:18,850
will return zero for the 1st 4 rows of the virtual array.

72
00:05:18,850 --> 00:05:26,890
So the solution is to use exactly the same approach for the logical test that we used in

73
00:05:26,890 --> 00:05:28,190
the last example,

74
00:05:28,190 --> 00:05:32,060
multiplying one matrix by another.

75
00:05:32,060 --> 00:05:36,350
The first Matrix is created by using the statement.

76
00:05:36,350 --> 00:05:39,050
Brown equals a two.

77
00:05:39,050 --> 00:05:42,450
Ron's applies to the entire Bronze column,

78
00:05:42,450 --> 00:05:44,020
which is an array.

79
00:05:44,020 --> 00:05:51,390
So if we compare an array to a single value and Excel will simply go through the array and

80
00:05:51,390 --> 00:05:54,950
compare every row to that single value,

81
00:05:54,950 --> 00:06:01,450
it will then create a virtual array in which every road contains either true or holes.

82
00:06:01,450 --> 00:06:02,800
True,

83
00:06:02,800 --> 00:06:03,400
of course,

84
00:06:03,400 --> 00:06:06,480
equates to one and false equates to zero.

85
00:06:06,480 --> 00:06:13,190
So we have one array with exactly the same size as the branch array the quantity array unit

86
00:06:13,190 --> 00:06:17,880
price containing either true or false on every single run.

87
00:06:17,880 --> 00:06:22,710
And then we do the same for the other evaluation we have.

88
00:06:22,710 --> 00:06:31,450
The statement range equals B one on Excel will then compare value and be one to the value

89
00:06:31,450 --> 00:06:33,610
in every row of the range column.

90
00:06:33,610 --> 00:06:35,900
Wherever it finds a match,

91
00:06:35,900 --> 00:06:39,170
it puts one wherever it doesn't put zero.

92
00:06:39,170 --> 00:06:42,050
So we end up with two virtual tables,

93
00:06:42,050 --> 00:06:45,850
all containing true or holes on every road,

94
00:06:45,850 --> 00:06:50,850
and we simply multiply boasts to virtual arrays.

95
00:06:50,850 --> 00:06:54,250
That gives us the final virtual array,

96
00:06:54,250 --> 00:06:58,780
which itself would likely contain one or zero on every road.

97
00:06:58,780 --> 00:06:59,670
Because,

98
00:06:59,670 --> 00:07:00,200
of course,

99
00:07:00,200 --> 00:07:07,950
only one multiplied by one true multiplied by true will give us the output one or true.

100
00:07:07,950 --> 00:07:11,410
Any other combination will give us false.

101
00:07:11,410 --> 00:07:13,020
So by taking this approach,

102
00:07:13,020 --> 00:07:15,520
we end up with exactly what we need,

103
00:07:15,520 --> 00:07:19,550
which is an array of true or false values.

104
00:07:19,550 --> 00:07:25,550
And then Excel evaluates every road that array wherever it finds a one.

105
00:07:25,550 --> 00:07:31,650
It goes ahead on that road to multiply the quantity by the unit price.

106
00:07:31,650 --> 00:07:33,850
Wherever it finds a zero,

107
00:07:33,850 --> 00:07:39,450
it simply puts zero in the result in a rain does he said.

108
00:07:39,450 --> 00:07:42,070
The formula in Selby,

109
00:07:42,070 --> 00:07:42,670
too,

110
00:07:42,670 --> 00:07:50,650
will produce all zeros as the 1st 4 items in the result in virtual array.

111
00:07:50,650 --> 00:07:52,850
And of course,

112
00:07:52,850 --> 00:07:59,720
the final part of the puzzle is that the sum function returns the total of all the items in

113
00:07:59,720 --> 00:08:01,150
our virtual array.

114
00:08:01,150 --> 00:08:04,050
So that's the approach.

115
00:08:04,050 --> 00:08:06,350
Let's now Bryant out formula.

116
00:08:06,350 --> 00:08:11,160
So we want to write a formula,

117
00:08:11,160 --> 00:08:11,740
and Selby,

118
00:08:11,740 --> 00:08:12,250
too,

119
00:08:12,250 --> 00:08:16,000
which we can then copy across and copy down.

120
00:08:16,000 --> 00:08:19,450
So we'll need to think about the placement of dollar signs.

121
00:08:19,450 --> 00:08:22,550
Let's begin by expanding on a formula bar.

122
00:08:22,550 --> 00:08:36,220
So we doing equal some all kinds of and then we missed in the bunker.

123
00:08:36,220 --> 00:08:40,550
And even though there's no further nesting,

124
00:08:40,550 --> 00:08:44,250
I split the parameters on two separate lines for readability.

125
00:08:44,250 --> 00:08:50,150
So old enter first argument is our logical test.

126
00:08:50,150 --> 00:08:56,230
I say we want brunch equals Have a dean,

127
00:08:56,230 --> 00:09:01,350
which is in a to on when we copy the formula across.

128
00:09:01,350 --> 00:09:05,500
We don't want the A to change to a B to A C etcetera.

129
00:09:05,500 --> 00:09:08,890
We wanted to stay as a but when we copy down,

130
00:09:08,890 --> 00:09:12,250
we do want the to to change to a 34 etcetera.

131
00:09:12,250 --> 00:09:19,080
So we just press at all until we have a dollar in front of the A and then we'll multiply in

132
00:09:19,080 --> 00:09:30,050
that test by the test range equals 31 And this time it's the reverse.

133
00:09:30,050 --> 00:09:32,070
When we copy across,

134
00:09:32,070 --> 00:09:35,260
we do want the letters that change when we copy down.

135
00:09:35,260 --> 00:09:37,250
We don't want the road number to change,

136
00:09:37,250 --> 00:09:40,290
so we need B dollar one.

137
00:09:40,290 --> 00:09:44,750
Then we've got to think about operator precedence.

138
00:09:44,750 --> 00:09:51,250
So what Excel will do is to evaluate this multiplication first.

139
00:09:51,250 --> 00:09:52,190
And of course,

140
00:09:52,190 --> 00:09:59,400
what we wanted to do is to evaluate branch equals a two evaluates range,

141
00:09:59,400 --> 00:10:04,880
equals B one and then multiply the to result in the rays.

142
00:10:04,880 --> 00:10:09,450
So we'll need parentheses around both of these tests.

143
00:10:09,450 --> 00:10:23,960
Comma to end The first argument value it true will be the calculation that we saw in the

144
00:10:23,960 --> 00:10:26,260
previous video Bold enter,

145
00:10:26,260 --> 00:10:28,670
which was,

146
00:10:28,670 --> 00:10:29,320
of course,

147
00:10:29,320 --> 00:10:33,350
quantity multiplied by unit price,

148
00:10:33,350 --> 00:10:44,630
coma or pencil on the value false is simply zero or cancer.

149
00:10:44,630 --> 00:10:54,630
The closing parenthesis to the if old answer on the closing parenthesis for some and then

150
00:10:54,630 --> 00:10:55,720
very importantly,

151
00:10:55,720 --> 00:10:56,990
we don't presenter.

152
00:10:56,990 --> 00:11:00,750
We press CSE control shift enter.

153
00:11:00,750 --> 00:11:03,740
So now,

154
00:11:03,740 --> 00:11:06,550
because of our strategic placement of dollar signs,

155
00:11:06,550 --> 00:11:13,150
we can go ahead and call me to the right and then double click to Kobe down

