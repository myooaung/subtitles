1
00:00:00,000 --> 00:00:13,750
Let's get some more practice on writing user defined functions.

2
00:00:13,750 --> 00:00:16,800
So we're working in number 10.

3
00:00:16,800 --> 00:00:26,250
Unless in open up number four displaying the user name in this example,

4
00:00:26,250 --> 00:00:28,850
we want to create a kind of welcome page,

5
00:00:28,850 --> 00:00:32,750
similar to what you see when you're logged in on a particular website.

6
00:00:32,750 --> 00:00:37,350
We want to display and sell a one a message to the effect.

7
00:00:37,350 --> 00:00:42,080
Use the name logged in as log in name,

8
00:00:42,080 --> 00:00:43,500
for example.

9
00:00:43,500 --> 00:00:48,600
John Smith logged in as Jay Don't Smith on For this.

10
00:00:48,600 --> 00:00:51,250
We're going to use two pieces of information.

11
00:00:51,250 --> 00:00:54,810
The Excel Log in name on the windows,

12
00:00:54,810 --> 00:00:59,750
looking they to get the Excel log in name manually.

13
00:00:59,750 --> 00:01:07,200
We can goes a file options and in the general category,

14
00:01:07,200 --> 00:01:08,400
the first category.

15
00:01:08,400 --> 00:01:10,380
Whatever entry is in,

16
00:01:10,380 --> 00:01:18,250
user name becomes your Excel user name in terms of syntax.

17
00:01:18,250 --> 00:01:24,590
Anything Excel related is part of the Excel Object model and anything that refers to excel

18
00:01:24,590 --> 00:01:25,350
itself.

19
00:01:25,350 --> 00:01:28,450
It's part of the application object,

20
00:01:28,450 --> 00:01:33,310
so we know it's going to be application docked something on.

21
00:01:33,310 --> 00:01:36,750
There are no prizes for guessing that it's actually application.

22
00:01:36,750 --> 00:01:42,850
Don't use the name to pick up the windows log in name.

23
00:01:42,850 --> 00:01:44,730
We use the V B,

24
00:01:44,730 --> 00:01:50,460
a object model and in the interaction class we can use in Vyron,

25
00:01:50,460 --> 00:01:53,350
which obviously sure for environment.

26
00:01:53,350 --> 00:01:59,610
This provides a number of different insights into the user system and environment.

27
00:01:59,610 --> 00:02:03,120
User name will give us the windows Look on me.

28
00:02:03,120 --> 00:02:06,750
That's right.

29
00:02:06,750 --> 00:02:10,330
Our function in developer.

30
00:02:10,330 --> 00:02:13,990
We've taken visual basic to bring up the visual basic editor.

31
00:02:13,990 --> 00:02:15,220
And if,

32
00:02:15,220 --> 00:02:15,680
like me,

33
00:02:15,680 --> 00:02:17,870
your personal workbook is visible,

34
00:02:17,870 --> 00:02:23,310
just ignore it because we'll be right in this function in the workbook itself.

35
00:02:23,310 --> 00:02:24,200
So it was right.

36
00:02:24,200 --> 00:02:27,350
Click on the workbook and choose insert module.

37
00:02:27,350 --> 00:02:35,650
And then let's bring up the properties window View Properties Window and renamed the new

38
00:02:35,650 --> 00:02:47,510
model and then call it and use that interaction bends right.

39
00:02:47,510 --> 00:02:48,450
The function.

40
00:02:48,450 --> 00:02:51,050
Obviously we've got a click in the code window.

41
00:02:51,050 --> 00:02:53,950
Man inserts procedure,

42
00:02:53,950 --> 00:03:00,340
time function name that's called it.

43
00:03:00,340 --> 00:03:01,350
Use a greeting,

44
00:03:01,350 --> 00:03:04,750
but we see no space is allowed.

45
00:03:04,750 --> 00:03:08,450
That's the Selivanov function.

46
00:03:08,450 --> 00:03:10,950
It doesn't need any parameters,

47
00:03:10,950 --> 00:03:16,650
but we do need to specify the type of data that the function will produce,

48
00:03:16,650 --> 00:03:19,160
and this is going to be string,

49
00:03:19,160 --> 00:03:23,250
so we put as string after the parentheses.

50
00:03:23,250 --> 00:03:29,830
Now let's look at another feature of V B a and a programming in general,

51
00:03:29,830 --> 00:03:32,050
which is the use of variables.

52
00:03:32,050 --> 00:03:37,950
Use variables wherever you want to capture and track a piece of data,

53
00:03:37,950 --> 00:03:41,630
or create a reference to an Excel object,

54
00:03:41,630 --> 00:03:43,850
which you can then manipulated in your will.

55
00:03:43,850 --> 00:03:51,400
So in this function we want to capture the person's Excel user name and their log on name

56
00:03:51,400 --> 00:03:53,650
into separate variables.

57
00:03:53,650 --> 00:03:58,650
The variables are simply named areas of memory,

58
00:03:58,650 --> 00:04:04,250
which store either data well references to excel objects.

59
00:04:04,250 --> 00:04:08,150
So in terms of syntax,

60
00:04:08,150 --> 00:04:17,810
we're now going to discuss variable declaration to declare a variable used the key word dim

61
00:04:17,810 --> 00:04:17,810
,

62
00:04:17,810 --> 00:04:19,390
which is short that I mentioned.

63
00:04:19,390 --> 00:04:23,550
You then create a name for the variable,

64
00:04:23,550 --> 00:04:25,350
which describes its use.

65
00:04:25,350 --> 00:04:27,470
Additionally,

66
00:04:27,470 --> 00:04:30,870
it's a good idea to use a prefix to the variable name,

67
00:04:30,870 --> 00:04:34,150
which indicates the type of data that it will contain.

68
00:04:34,150 --> 00:04:40,550
If we go back into excel by closing the visual basic editor,

69
00:04:40,550 --> 00:04:41,550
we'll see.

70
00:04:41,550 --> 00:04:44,050
How about another work seat here called prefixes?

71
00:04:44,050 --> 00:04:49,740
This gives examples of prefixes that you can use whenever you're crazy,

72
00:04:49,740 --> 00:04:53,850
variable to indicate the type of data that it contains,

73
00:04:53,850 --> 00:04:58,950
and this applies both to data and to excel objects.

74
00:04:58,950 --> 00:05:03,690
So if you're creating a reference to an Excel object you can.

75
00:05:03,690 --> 00:05:05,360
All that references are variable,

76
00:05:05,360 --> 00:05:08,250
and again it's useful just to use the prefix.

77
00:05:08,250 --> 00:05:11,830
So these prefixes that I will be using,

78
00:05:11,830 --> 00:05:14,220
but the main thing is to be consistent,

79
00:05:14,220 --> 00:05:18,350
and that's particularly useful if you're working this part of the team.

80
00:05:18,350 --> 00:05:26,240
So we're gonna create to string variables because we've got two pieces of text the Excel

81
00:05:26,240 --> 00:05:28,980
user name on the windows local name.

82
00:05:28,980 --> 00:05:38,930
So both of these will be str variables so dim as in dimension and let's have str excel name

83
00:05:38,930 --> 00:05:38,930
.

84
00:05:38,930 --> 00:05:40,550
Obviously,

85
00:05:40,550 --> 00:05:42,420
as you can anticipate,

86
00:05:42,420 --> 00:05:48,750
those spaces are allowed in a variable name and then we used as to specify the data type.

87
00:05:48,750 --> 00:05:57,850
So this is obviously as string a man dim str loving name also a string.

88
00:05:57,850 --> 00:06:01,450
So that's variable declaration.

89
00:06:01,450 --> 00:06:05,850
The next thing is to populate the variables to put something inside them,

90
00:06:05,850 --> 00:06:09,550
and this is where we can see why they call variables.

91
00:06:09,550 --> 00:06:10,630
We,

92
00:06:10,630 --> 00:06:13,780
as programmers don't know what they will contain.

93
00:06:13,780 --> 00:06:17,550
We simply know where the data is going to be captured from,

94
00:06:17,550 --> 00:06:22,580
and if this function is used in 10 different locations on 10 different machines,

95
00:06:22,580 --> 00:06:25,250
it could produce 10 different results.

96
00:06:25,250 --> 00:06:30,310
So in terms of syntax.

97
00:06:30,310 --> 00:06:37,350
Populating the data variable comes under the classification off assignment of data value.

98
00:06:37,350 --> 00:06:45,450
Your place in a piece of data be is a string a date or number into a data container

99
00:06:45,450 --> 00:06:47,820
whenever that's the case,

100
00:06:47,820 --> 00:06:48,770
As we've said,

101
00:06:48,770 --> 00:06:50,180
you used the key word.

102
00:06:50,180 --> 00:06:54,550
Let let my container equals my data.

103
00:06:54,550 --> 00:07:00,350
So let's my variable,

104
00:07:00,350 --> 00:07:08,880
which is str excel name bqool my string value and we're grabbing the string value from

105
00:07:08,880 --> 00:07:09,600
Excel.

106
00:07:09,600 --> 00:07:20,240
The key word Frank's cell as an object is application knows on.

107
00:07:20,240 --> 00:07:21,930
Then we make our best guess,

108
00:07:21,930 --> 00:07:24,950
and obviously the best guess we use the name is user name.

109
00:07:24,950 --> 00:07:31,500
Then we do the same for the windows.

110
00:07:31,500 --> 00:07:38,720
Log on Let's str log in name equal and this time we're digging insight.

111
00:07:38,720 --> 00:07:40,750
BB A so b b A.

112
00:07:40,750 --> 00:07:48,970
Don't interaction don't environment on the syntax that you need to use is to put

113
00:07:48,970 --> 00:07:54,950
parentheses and then a quoted reference so again use the name.

114
00:07:54,950 --> 00:07:57,750
But this time it has to go in as a string.

115
00:07:57,750 --> 00:08:04,050
Having populated those two variables we can now compose are simple message,

116
00:08:04,050 --> 00:08:07,750
and that message will be the output of the function itself.

117
00:08:07,750 --> 00:08:11,750
So again we're signing a data value,

118
00:08:11,750 --> 00:08:14,950
but this time we're doing it to the function itself.

119
00:08:14,950 --> 00:08:23,000
So let because its data user greets in equal STL.

120
00:08:23,000 --> 00:08:24,050
Excel name.

121
00:08:24,050 --> 00:08:34,570
Empress End Colon space loved in as a space close close.

122
00:08:34,570 --> 00:08:38,150
And then we can Katyn ate the str long in name.

123
00:08:38,150 --> 00:08:44,850
And if you want a full stop after that and percent full stop,

124
00:08:44,850 --> 00:08:47,400
and that's our function.

125
00:08:47,400 --> 00:08:52,250
Since we broach the topic off variables,

126
00:08:52,250 --> 00:08:54,550
this is a good point to explain.

127
00:08:54,550 --> 00:08:56,150
Option explicit.

128
00:08:56,150 --> 00:09:06,050
You probably noticed that every time we create a module when the code window opens,

129
00:09:06,050 --> 00:09:11,470
it has the words option explicit and what this means.

130
00:09:11,470 --> 00:09:12,250
Basically,

131
00:09:12,250 --> 00:09:19,520
let's just get rid of this unwanted in audio way.

132
00:09:19,520 --> 00:09:20,630
Need to expose it.

133
00:09:20,630 --> 00:09:21,050
No,

134
00:09:21,050 --> 00:09:28,250
we don't know what the option explicit does basically is.

135
00:09:28,250 --> 00:09:31,450
It requires you to declare your variables.

136
00:09:31,450 --> 00:09:35,400
This is how he declared variables that this,

137
00:09:35,400 --> 00:09:36,320
strictly speaking,

138
00:09:36,320 --> 00:09:37,250
is optional.

139
00:09:37,250 --> 00:09:42,850
If you use option explicit at the top of your model instead of being optional,

140
00:09:42,850 --> 00:09:46,490
variable declaration becomes obligatory.

141
00:09:46,490 --> 00:09:51,100
So if I were to take out option explicit if you remember,

142
00:09:51,100 --> 00:09:54,280
you can take a line out simply by comments in the line out.

143
00:09:54,280 --> 00:09:55,470
So click on comment.

144
00:09:55,470 --> 00:09:55,850
Look,

145
00:09:55,850 --> 00:09:59,190
that puts an apostrophe at the start of the line,

146
00:09:59,190 --> 00:10:01,260
turning it into a comment,

147
00:10:01,260 --> 00:10:02,950
so it's no longer functional.

148
00:10:02,950 --> 00:10:09,250
And now let's say that in type in the let's statements,

149
00:10:09,250 --> 00:10:11,360
I made an error,

150
00:10:11,360 --> 00:10:13,150
so I just did a typo,

151
00:10:13,150 --> 00:10:15,430
I m A instead of a M,

152
00:10:15,430 --> 00:10:16,750
and I didn't notice.

153
00:10:16,750 --> 00:10:19,430
If I now go to debug in twos,

154
00:10:19,430 --> 00:10:20,250
compile,

155
00:10:20,250 --> 00:10:24,150
you'll see that the code compiles with no problems.

156
00:10:24,150 --> 00:10:26,630
But of course it's going to be wrong,

157
00:10:26,630 --> 00:10:30,810
because Excel name hasn't been populated.

158
00:10:30,810 --> 00:10:33,650
Another non existent variable.

159
00:10:33,650 --> 00:10:35,510
An accidental variable,

160
00:10:35,510 --> 00:10:35,990
if you like,

161
00:10:35,990 --> 00:10:37,210
has been populated.

162
00:10:37,210 --> 00:10:38,860
When I don't put my greeting,

163
00:10:38,860 --> 00:10:40,650
I'll get nothing at that point.

164
00:10:40,650 --> 00:10:45,650
That's now reactivate option explicit by Uncommon Tin it.

165
00:10:45,650 --> 00:10:49,080
Now let's try debug,

166
00:10:49,080 --> 00:10:52,950
compile and you'll see very usefully.

167
00:10:52,950 --> 00:10:56,890
It picks something the error or me so I can immediately see.

168
00:10:56,890 --> 00:10:57,060
Oh,

169
00:10:57,060 --> 00:10:58,540
that's a typo on,

170
00:10:58,540 --> 00:10:59,850
then I can just correct it.

171
00:10:59,850 --> 00:11:11,110
The automatic inclusion of Option Express it is controlled by going to tools options and

172
00:11:11,110 --> 00:11:16,190
ensuring that this check box is activated require variable declaration,

173
00:11:16,190 --> 00:11:18,450
so if this is not activated,

174
00:11:18,450 --> 00:11:23,090
often explicit will not automatically be inserted when you do a new module.

175
00:11:23,090 --> 00:11:26,050
But there's nothing to stop you from type in the words anyway.

176
00:11:26,050 --> 00:11:28,690
OK,

177
00:11:28,690 --> 00:11:30,710
so that's our function completed.

178
00:11:30,710 --> 00:11:32,450
Let's now check that it works.

179
00:11:32,450 --> 00:11:38,950
So we wanted in this cell.

180
00:11:38,950 --> 00:11:42,630
So they called it.

181
00:11:42,630 --> 00:11:45,050
Use a greeting equals use a greet in.

182
00:11:45,050 --> 00:11:57,180
No arguments required and let me enter Excel named Gamble Log in name Train in seven.

