1
00:00:00,210 --> 00:00:04,130
In the previous lecture, we have seen how to create a record using dpa.

2
00:00:04,460 --> 00:00:08,870
Now in this lecture, we will see how to update the record using spinning data.

3
00:00:09,960 --> 00:00:16,050
Say, for example, we want to update this record, OK, that's one equal to three so that we will do

4
00:00:16,080 --> 00:00:17,370
using the spring data.

5
00:00:18,240 --> 00:00:20,880
And for this purpose, it will create WDBJ.

6
00:00:21,360 --> 00:00:26,010
So let's jump to his ideas and inside of us one controller, let's say one.

7
00:00:27,060 --> 00:00:33,540
OK, so to say all the time, I'm copying this OK from the create that is basically our post mapping

8
00:00:33,540 --> 00:00:34,050
or steps.

9
00:00:34,920 --> 00:00:37,410
So use the app put mapping.

10
00:00:38,350 --> 00:00:38,740
OK.

11
00:00:39,460 --> 00:00:40,990
This is, I'm going to say, all the time.

12
00:00:42,300 --> 00:00:43,590
This is abridgement.

13
00:00:45,270 --> 00:00:49,840
Here we will get the request mail order in the apartment of Jason, and we're using the same glass.

14
00:00:49,870 --> 00:00:53,990
OK, what entity glass bit, activist body and recent see?

15
00:00:54,240 --> 00:00:56,600
The only difference in the payload will be the I.D..

16
00:00:56,760 --> 00:00:57,060
OK.

17
00:00:58,250 --> 00:01:01,100
This is the dissent that we have used in the previous lecture.

18
00:01:01,460 --> 00:01:07,730
So at that time, we haven't passed the the its value now in this lecture to update us, and it is obviously

19
00:01:07,730 --> 00:01:09,260
we need it right?

20
00:01:10,210 --> 00:01:15,460
So it would appear the only difference in our request payload is that we will pass it up its value as

21
00:01:15,460 --> 00:01:15,670
of it.

22
00:01:16,070 --> 00:01:19,360
OK, now from here, we will call the service later.

23
00:01:21,110 --> 00:01:21,620
Let's run.

24
00:01:21,860 --> 00:01:22,190
OK.

25
00:01:22,220 --> 00:01:25,100
Let's clear this matter, investments, the reason for that.

26
00:01:25,910 --> 00:01:27,380
I will use this one only, OK.

27
00:01:27,860 --> 00:01:30,170
This is now update rent.

28
00:01:31,490 --> 00:01:32,060
That's it.

29
00:01:32,600 --> 00:01:36,890
We need to use the same method provided by GP to update the record.

30
00:01:37,100 --> 00:01:37,490
Yes.

31
00:01:38,060 --> 00:01:43,130
To create the record of yet using this new method to update the record, we are using the same method.

32
00:01:43,700 --> 00:01:49,520
So now you may be thinking that how you will identify that now it needs to create the record and the

33
00:01:49,520 --> 00:01:51,290
other time it needs to update the record.

34
00:01:51,800 --> 00:01:54,500
So that all depends on this entity class.

35
00:01:54,500 --> 00:02:01,700
OK, whatever you are passing this object, if this object is containing the value of it, then it will

36
00:02:01,700 --> 00:02:02,600
update the record.

37
00:02:03,020 --> 00:02:06,470
If this field value is null, then it will create the record.

38
00:02:06,830 --> 00:02:12,440
Basically, it all depends on this bill's value on which you have at ID annotation.

39
00:02:13,410 --> 00:02:20,580
What is your unique identifier on which you have at identity sent, if this value is null, will create

40
00:02:20,580 --> 00:02:22,530
the record when you call doesn't matter.

41
00:02:22,860 --> 00:02:26,850
If this fellow is having some value, then it will update the record.

42
00:02:27,180 --> 00:02:28,740
OK, so here what we will do.

43
00:02:28,740 --> 00:02:32,430
We will pass ID equal to three OK in the apartment of and what he ate.

44
00:02:32,460 --> 00:02:33,120
Like this one?

45
00:02:33,990 --> 00:02:36,060
This is it equal to three.

46
00:02:36,600 --> 00:02:38,540
OK, so Peter is one.

47
00:02:38,550 --> 00:02:39,120
Peter one.

48
00:02:39,450 --> 00:02:39,720
OK.

49
00:02:40,200 --> 00:02:43,710
This is what we want to update the first name of this student.

50
00:02:44,220 --> 00:02:50,760
So this will come to our controller here using the appropriate body that we are passing a service layer

51
00:02:51,210 --> 00:02:54,060
and this object we are passing by calling the Scimitar.

52
00:02:54,360 --> 00:03:00,540
So now this time, OK, this idea of its value is not not so I will update the record.

53
00:03:00,750 --> 00:03:03,930
OK, so now let's run our spring wood application.

54
00:03:12,010 --> 00:03:15,970
So Typekit got started, OK, clear, the logs led some to his ideas.

55
00:03:16,990 --> 00:03:17,860
This to put.

56
00:03:18,250 --> 00:03:18,730
That's it.

57
00:03:18,940 --> 00:03:20,880
OK, call this a.

58
00:03:22,320 --> 00:03:23,040
OK, my bed.

59
00:03:23,580 --> 00:03:24,750
You are right, we forget.

60
00:03:28,000 --> 00:03:29,670
We got the sexist response to that.

61
00:03:29,720 --> 00:03:36,460
OK, let's verify in the database, see the first name got ginger from Peter to Peter one.

62
00:03:37,510 --> 00:03:43,390
So using Jibia to create the record all to update the record, you need to use the same metric that

63
00:03:43,390 --> 00:03:50,950
is provided by Jibia and it all depends, OK, create an update on the field on which you add it annotation.

64
00:03:51,250 --> 00:03:53,680
If this is null, then you will create the record.

65
00:03:54,010 --> 00:03:57,610
If this field has some value, then you will update the record.

66
00:03:58,990 --> 00:04:02,500
So this is how you can update the record using GP.

67
00:04:03,070 --> 00:04:07,270
So that's all for now, and we'll proceed further in the next lecture.

68
00:04:07,810 --> 00:04:08,680
Thank you very much.
