WEBVTT
0
1
00:00:00.210 --> 00:00:01.040
So let's continue.
1

2
00:00:01.050 --> 00:00:05.400
So this is my cluster demo and the type is fargate.
2

3
00:00:05.430 --> 00:00:12.540
It means this cluster is being managed by the Amazon and one service is running and this service is
3

4
00:00:12.540 --> 00:00:13.830
managing this task.
4

5
00:00:13.830 --> 00:00:16.290
And this task is nothing at the back end.
5

6
00:00:16.290 --> 00:00:22.830
This task is running a container, your container of nginx application and this is your EC2.
6

7
00:00:23.220 --> 00:00:28.710
And as of now you can see there is no EC2 instance because at the back end where it is running,
7

8
00:00:28.710 --> 00:00:31.380
nobody knows that, only Amazon knows that.
8

9
00:00:31.530 --> 00:00:39.120
Now I want to go to the service, just click on this cluster demo and this is my nginx service and
9

10
00:00:39.120 --> 00:00:41.460
here you can see I'm able to access my application.
10

11
00:00:41.460 --> 00:00:43.320
Now let me click on this task.
11

12
00:00:43.890 --> 00:00:49.080
So I told you that this task is managed by the service.
12

13
00:00:49.080 --> 00:00:50.070
The service is running.
13

14
00:00:50.070 --> 00:00:52.850
Who is always monitoring this task?
14

15
00:00:53.010 --> 00:00:59.250
Suppose let me select this task and let me stop this task.
15

16
00:00:59.250 --> 00:01:01.740
So what will happen now?
16

17
00:01:01.740 --> 00:01:08.370
You can see it has been stopped state or you can say it has removed from here, but the service is
17

18
00:01:08.370 --> 00:01:09.240
still running here.
18

19
00:01:09.240 --> 00:01:11.370
You can see this nginx service is still running.
19

20
00:01:11.580 --> 00:01:15.150
So what it will do, it is keep on monitoring the task.
20

21
00:01:15.150 --> 00:01:21.000
Now it has found that this particular task is in stopped state or you can say it is not running.
21

22
00:01:21.000 --> 00:01:25.260
So what it will do, it will create another container for this task.
22

23
00:01:25.260 --> 00:01:27.000
So just wait for a few seconds.
23

24
00:01:27.000 --> 00:01:31.470
After that you will see a new task will be created here.
24

25
00:01:33.090 --> 00:01:34.620
Let me refresh this one.
25

26
00:01:43.080 --> 00:01:43.230
Here.
26

27
00:01:43.230 --> 00:01:47.280
You can see a new task has been created or we can say a new container.
27

28
00:01:47.460 --> 00:01:49.770
And as of now, you can see it is in pending state.
28

29
00:01:49.980 --> 00:01:56.610
So I believe with this exercise you can easily co-relate what is task and what is service.
29

30
00:01:56.670 --> 00:02:04.860
A cluster is basically where you are going to launch your service or your tasks and task is nothing
30

31
00:02:04.890 --> 00:02:12.990
your container is running or we can say a definition of your container will be defined in the task and
31

32
00:02:12.990 --> 00:02:13.710
service.
32

33
00:02:13.710 --> 00:02:16.070
Who is monitoring your task all the time?
33

34
00:02:16.080 --> 00:02:18.450
If your task is having any issue?
34

35
00:02:18.750 --> 00:02:19.580
What will happen?
35

36
00:02:19.590 --> 00:02:22.050
A service will recreate the task.
36

37
00:02:22.200 --> 00:02:26.880
So here you can see it has immediately recreated a new task.
37

38
00:02:27.300 --> 00:02:31.310
So that's the benefit of the AWS ECS cluster.
38

39
00:02:31.320 --> 00:02:33.180
So that's all we'll see you in the next lecture.
