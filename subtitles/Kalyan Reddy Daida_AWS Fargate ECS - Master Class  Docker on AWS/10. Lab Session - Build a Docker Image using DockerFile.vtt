WEBVTT
0
1
00:00:00.180 --> 00:00:06.750
In this lab session, I'm going to create a nginx application or we can say nginx web page.
1

2
00:00:06.900 --> 00:00:13.440
So I'm going to create a very simple web page and then I'm going to create a Docker image using the
2

3
00:00:13.440 --> 00:00:14.450
Docker file.
3

4
00:00:14.460 --> 00:00:21.210
And finally, once we have the Docker image, I'm going to execute that image as a container and we'll
4

5
00:00:21.210 --> 00:00:24.600
show you how to access that web page from the Web browser.
5

6
00:00:25.020 --> 00:00:25.920
So let's start.
6

7
00:00:26.100 --> 00:00:30.960
So let me go inside this root and here, let me create one directory.
7

8
00:00:35.210 --> 00:00:36.710
Let me go inside this one.
8

9
00:00:38.060 --> 00:00:40.910
And here I'm going to create a Docker file.
9

10
00:00:44.780 --> 00:00:50.000
And from and what image you want I want.
10

11
00:00:50.000 --> 00:00:53.810
nginx image and the copy.
11

12
00:00:54.260 --> 00:00:58.580
So here I'm going to create one directory.
12

13
00:00:58.910 --> 00:01:03.560
And in that directory, I'm going to create my index.htm.
13

14
00:01:03.830 --> 00:01:04.910
So copy.
14

15
00:01:05.360 --> 00:01:08.410
And the directory name is app1.
15

16
00:01:08.420 --> 00:01:09.560
You can give any name.
16

17
00:01:09.980 --> 00:01:12.920
And I want it should be copied into this location.
17

18
00:01:12.920 --> 00:01:16.560
Usr share nginx.
18

19
00:01:18.530 --> 00:01:24.390
And html and app2 app1 okay.
19

20
00:01:25.700 --> 00:01:32.930
So very simple docker file I have created and this is the content here we have now.
20

21
00:01:32.930 --> 00:01:38.420
I'm going to create a directory which we have mentioned in my this docker file.
21

22
00:01:38.570 --> 00:01:43.010
So the command is mkdir app1.
22

23
00:01:43.010 --> 00:01:44.510
So this directory has been created.
23

24
00:01:44.510 --> 00:01:50.090
Let me go inside this one and here I'm going to create a very simple html file.
24

25
00:01:50.090 --> 00:01:53.270
So index.html.
25

26
00:01:55.830 --> 00:01:59.550
And let's start html.
26

27
00:02:00.900 --> 00:02:04.020
And here we have to put in the body.
27

28
00:02:07.310 --> 00:02:11.900
Body and style =.
28

29
00:02:12.350 --> 00:02:16.460
And let me give some background colour.
29

30
00:02:19.270 --> 00:02:21.750
So what background colour I want.
30

31
00:02:22.750 --> 00:02:29.390
So I'm giving blue okay ;
31

32
00:02:29.410 --> 00:02:32.050
Let me close this one.
32

33
00:02:32.830 --> 00:02:34.030
And this one.
33

34
00:02:36.950 --> 00:02:38.450
And h1.
34

35
00:02:40.250 --> 00:02:43.330
And here I'm going to put some message.
35

36
00:02:43.340 --> 00:02:44.270
Welcome to.
36

37
00:02:47.120 --> 00:02:51.200
ECS learning classes.
37

38
00:03:09.620 --> 00:03:11.480
And p.
38

39
00:03:16.880 --> 00:03:18.040
I'm just giving my name Shikhar Verma.
39

40
00:03:21.920 --> 00:03:22.460
Very simple page.
40

41
00:03:22.670 --> 00:03:23.690
I'm creating.
41

42
00:03:23.930 --> 00:03:27.170
And I'm not very expertise on creating these things.
42

43
00:03:27.860 --> 00:03:32.210
So if you are good in creating the HTML, you can create according to your requirement.
43

44
00:03:34.810 --> 00:03:36.160
So I've just closed this one.
44

45
00:03:37.510 --> 00:03:38.320
Okay, fine.
45

46
00:03:39.190 --> 00:03:42.430
Now I'm going to create the Docker image.
46

47
00:03:42.430 --> 00:03:46.890
So Docker image ls we have only single image?
47

48
00:03:46.900 --> 00:03:52.420
So the command is docker build -t.
48

49
00:03:52.600 --> 00:03:54.610
So here you can give any tag.
49

50
00:03:54.610 --> 00:03:59.810
So I'm giving Shikhar docker and.
50

51
00:04:03.690 --> 00:04:04.680
Nginx.
51

52
00:04:08.570 --> 00:04:13.550
And at the last give ., . means where we have the docker file.
52

53
00:04:13.550 --> 00:04:15.810
So in the same location we have the Docker file.
53

54
00:04:15.830 --> 00:04:17.390
That's why I've given dot.
54

55
00:04:18.320 --> 00:04:19.180
I'm getting this error.
55

56
00:04:19.190 --> 00:04:21.770
Let's see what is the error, no such file?
56

57
00:04:21.770 --> 00:04:27.620
And directory okay I'm in this location so we have to go to the location where we have the docker file.
57

58
00:04:27.620 --> 00:04:29.420
So Docker file is in this location.
58

59
00:04:29.750 --> 00:04:36.740
Again, I'm going to fire this command now we can see that it is started downloading the nginx image
59

60
00:04:36.740 --> 00:04:41.540
from the Docker hub and in this nginx it is going to copy my this file.
60

61
00:04:41.660 --> 00:04:48.380
So here you can see first it has downloaded the nginx, the latest nginx docker image and then
61

62
00:04:48.380 --> 00:04:52.490
it has copied this app1 into my this location.
62

63
00:04:52.610 --> 00:04:57.710
So let's see docker image ls.
63

64
00:04:59.970 --> 00:05:02.250
So this is the Docker image.
64

65
00:05:02.280 --> 00:05:09.420
Now, if you want to execute this Docker image as a container, you can use the VM machine, this machine
65

66
00:05:09.540 --> 00:05:17.070
for executing this image, or you can also use the Amazon ECS to execute this image.
66

67
00:05:18.000 --> 00:05:24.420
But very first step, you have to copy this image to the repository.
67

68
00:05:24.510 --> 00:05:29.640
Your repository could be your Docker hub or Amazon ECR as well.
68

69
00:05:29.940 --> 00:05:32.060
So you can use the Amazon ECR as well.
69

70
00:05:32.070 --> 00:05:37.020
Amazon ECR is a repository where you can put your image.
70

71
00:05:37.320 --> 00:05:41.630
So in this lab session, I'm going to run a container on the VM machine only.
71

72
00:05:41.640 --> 00:05:46.800
So the command is Docker run and the  --name.
72

73
00:05:46.800 --> 00:05:47.760
I can give any name.
73

74
00:05:47.760 --> 00:05:53.250
I'm giving nginx App1 and port.
74

75
00:05:53.370 --> 00:05:56.420
I'm defining the 81 : 80.
75

76
00:05:56.430 --> 00:06:05.280
So 81 is the host port and 80 is your Docker port and -d is for detachable.
76

77
00:06:05.760 --> 00:06:07.400
You can use also use rm.
77

78
00:06:07.410 --> 00:06:10.620
So once you stop this docker image, what will happen?
78

79
00:06:10.620 --> 00:06:13.560
It will delete the docker container.
79

80
00:06:13.560 --> 00:06:14.480
So it is up to you.
80

81
00:06:14.490 --> 00:06:17.790
Let me fire this command only so I'm getting some error.
81

82
00:06:17.790 --> 00:06:26.670
Let's see Docker run --name nginx app -p and this one.
82

83
00:06:26.910 --> 00:06:29.160
We have not provided the Docker image.
83

84
00:06:29.160 --> 00:06:39.210
So again, I'm going to copy this command and at the last I'm just putting the this name, my image,
84

85
00:06:41.030 --> 00:06:45.150
Now you can see that my container has been created.
85

86
00:06:45.150 --> 00:06:49.260
Let's see docker container ls and here we have this one.
86

87
00:06:49.710 --> 00:06:52.290
Now I want to access my nginx web page.
87

88
00:06:52.320 --> 00:07:00.750
So coming back here, so this is my IP and just copy this IP and go to the browser and just put the
88

89
00:07:00.750 --> 00:07:08.520
IP and 81 it is not working because I have to enable this 81 port from the security group.
89

90
00:07:08.610 --> 00:07:18.120
So click on this security and then click on this one and edit inbound rules add.
90

91
00:07:19.020 --> 00:07:28.170
And here I have to add all the ports required ports custom and 80.
91

92
00:07:30.820 --> 00:07:31.360
This one.
92

93
00:07:40.690 --> 00:07:42.070
This one and this is the custom.
93

94
00:07:42.070 --> 00:07:43.810
So I want to add 81.
94

95
00:07:45.640 --> 00:07:47.530
So these 2 ports, you have to added.
95

96
00:07:47.530 --> 00:07:54.850
So you have to edit this inbound rules and allow these ports coming back here.
96

97
00:07:55.300 --> 00:08:04.270
And again, I'm going to fire this command and here you can see I'm able to access my Web page and I've
97

98
00:08:04.270 --> 00:08:14.440
also created my this app 1 inside this my index.html now you  can see that I'm getting the web
98

99
00:08:14.440 --> 00:08:15.850
page which I have created.
99

100
00:08:15.850 --> 00:08:22.330
So here you can see I have customized the Docker image as per my requirement.
100

101
00:08:22.330 --> 00:08:30.430
And finally I have executed my Docker image as a container on my VM machine and I'm getting this output
101

102
00:08:30.430 --> 00:08:33.730
or I can access my this page from the web browser.
102

103
00:08:34.030 --> 00:08:42.550
So when I'm doing the lab session on Amazon ECS, I will be needing one Docker image like this image and
103

104
00:08:43.000 --> 00:08:52.060
that image I'm going to execute as a container using the Amazon ECS instead of running on the VM machine.
104

105
00:08:52.060 --> 00:08:53.950
So that's all we'll see you in the next lecture.
