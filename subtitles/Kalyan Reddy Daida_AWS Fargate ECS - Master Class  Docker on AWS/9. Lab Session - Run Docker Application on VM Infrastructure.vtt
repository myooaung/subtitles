WEBVTT
0
1
00:00:00.780 --> 00:00:01.500
Hi.
1

2
00:00:01.530 --> 00:00:07.770
This is a practice session in which I will try to explain you the concept of Amazon Elastic Container
2

3
00:00:07.770 --> 00:00:08.640
Service.
3

4
00:00:08.670 --> 00:00:16.890
ECS is a fully managed container orchestration service that makes it easy for you to deploy, manage
4

5
00:00:16.890 --> 00:00:20.130
and scale containerised applications.
5

6
00:00:20.490 --> 00:00:28.590
So in this lab session, I'm going to download the Docker image from the Docker hub, and then I'm going
6

7
00:00:28.590 --> 00:00:31.500
to modify the image as per the requirement.
7

8
00:00:31.680 --> 00:00:34.080
And then I'm going to create a container.
8

9
00:00:34.110 --> 00:00:41.580
Or in simple words, we can say I'm going to execute that Docker image as a container, but everything
9

10
00:00:41.580 --> 00:00:44.670
I'm going to perform on the VM virtual machine.
10

11
00:00:45.030 --> 00:00:51.870
Once you will understand the concept, then I'm going to perform the same thing on my Amazon Elastic Container
11

12
00:00:51.870 --> 00:00:52.500
Service.
12

13
00:00:52.500 --> 00:00:53.460
So let's start.
13

14
00:00:53.820 --> 00:00:55.620
So first of all, I need one VM.
14

15
00:00:58.800 --> 00:01:00.360
I'm taking Amazon Linux.
15

16
00:01:09.070 --> 00:01:10.150
Review and launch.
16

17
00:01:15.850 --> 00:01:20.080
I'm already having Key pair, so that's why I've chosen the existing key pair.
17

18
00:01:37.450 --> 00:01:39.490
So this is my server.
18

19
00:01:44.750 --> 00:01:46.010
It will take some time.
19

20
00:01:47.460 --> 00:01:48.890
Now you can see it is running state.
20

21
00:01:48.890 --> 00:01:50.330
Let me search with running.
21

22
00:01:51.860 --> 00:01:57.850
Now this is my one VM and this is the public IP.
22

23
00:01:57.860 --> 00:02:01.160
So let me log into this system using Mobaxterm software.
23

24
00:02:20.970 --> 00:02:22.470
So I've logged into my system.
24

25
00:02:22.470 --> 00:02:24.810
Let me elevate my privilege to root user.
25

26
00:02:25.410 --> 00:02:26.100
Okay, fine.
26

27
00:02:26.400 --> 00:02:28.020
So this is the fresh machine.
27

28
00:02:28.020 --> 00:02:32.220
And here I'm going to download the Docker image from the Docker hub.
28

29
00:02:32.610 --> 00:02:37.770
So first of all, I need to install the Docker package.
29

30
00:02:38.030 --> 00:02:42.450
Yum install docker.
30

31
00:03:02.160 --> 00:03:03.900
Docker has been installed successfully.
31

32
00:03:03.990 --> 00:03:06.100
I need to start docker service as well.
32

33
00:03:06.120 --> 00:03:08.190
For that, I'm going to use system ctl.
33

34
00:03:10.290 --> 00:03:11.160
Start.
34

35
00:03:11.550 --> 00:03:12.300
Docker.
35

36
00:03:13.500 --> 00:03:14.910
Docker has been started.
36

37
00:03:14.940 --> 00:03:16.470
You can check the status.
37

38
00:03:17.190 --> 00:03:21.720
It is started and let me enable the Docker service as well.
38

39
00:03:28.300 --> 00:03:28.420
Now.
39

40
00:03:28.820 --> 00:03:31.390
Everything seems fine now.
40

41
00:03:31.410 --> 00:03:34.320
Let's see what all the Docker images we have on this system.
41

42
00:03:34.320 --> 00:03:35.850
So this is a fresh system.
42

43
00:03:35.850 --> 00:03:37.970
We have this command docker image ls.
43

44
00:03:38.370 --> 00:03:44.590
So as of now, you can see there is no Docker images on my system and Docker network ls.
44

45
00:03:44.910 --> 00:03:49.470
So this is the command which will tell you how many network ID you have on your system.
45

46
00:03:49.740 --> 00:03:51.800
So this is not required at all.
46

47
00:03:51.810 --> 00:03:58.800
So I'm going to fire this command, very simple command, docker container and run.
47

48
00:03:58.800 --> 00:04:05.400
I'm going to run a container and the image I want, it should be Ubuntu image.
48

49
00:04:05.730 --> 00:04:10.610
And with this image I just want to know the OS release version.
49

50
00:04:10.620 --> 00:04:16.950
So simply just fire this command, cat etc/os release.
50

51
00:04:17.490 --> 00:04:24.690
So what this command will do basically first it will download the ubuntu image from the Docker hub and
51

52
00:04:24.690 --> 00:04:28.500
then it is going to run the container using that image.
52

53
00:04:28.800 --> 00:04:32.790
And once the image would be executed as a container it will fire.
53

54
00:04:32.790 --> 00:04:39.570
This command cat /etc/os-release and you will get some output and after that
54

55
00:04:39.600 --> 00:04:44.820
you container which is in standard state, it will be in the exited state, it will be stopped.
55

56
00:04:45.180 --> 00:04:46.590
So let me file this command.
56

57
00:04:46.770 --> 00:04:50.700
So here you can see it has given me one error, unable to find this image.
57

58
00:04:50.700 --> 00:04:55.560
So first it will try to download the image or it will search the image locally.
58

59
00:04:55.560 --> 00:04:58.920
But this image is not available on my local system.
59

60
00:04:59.100 --> 00:05:06.600
So first it downloaded the image from the Docker hub and then it has created one container using that
60

61
00:05:06.600 --> 00:05:07.140
image.
61

62
00:05:07.140 --> 00:05:12.960
And finally it has executed this command, the last command, and here we have got this output.
62

63
00:05:14.040 --> 00:05:19.050
So here you can see this is the Ubuntu and everything it has provided you, right?
63

64
00:05:19.260 --> 00:05:28.440
So if I'll fire docker container ls will not get any output because the container which was executed,
64

65
00:05:28.440 --> 00:05:33.120
it was executed only for a few seconds and then it has provided you the output.
65

66
00:05:33.120 --> 00:05:38.040
But if you want to see what all the container was running in the past, simply use -a option.
66

67
00:05:38.040 --> 00:05:44.040
So here you can see this was the container which was executed and you got this output, the output of
67

68
00:05:44.040 --> 00:05:48.030
this command and now it is an excited state.
68

69
00:05:48.030 --> 00:05:54.330
So here to execute the container I'm using this VM machine, but we have few disadvantage.
69

70
00:05:54.330 --> 00:06:02.730
Like suppose I have a running container and I want to increase the size of the container.
70

71
00:06:02.760 --> 00:06:07.590
I want to increase its attributes, I want to scale my container.
71

72
00:06:07.620 --> 00:06:12.450
So these features, you will get it in the Amazon Elastic Container Service.
72

73
00:06:12.870 --> 00:06:15.060
And one more thing, let me show you.
73

74
00:06:15.090 --> 00:06:18.150
Suppose you want to execute the container in background.
74

75
00:06:18.150 --> 00:06:30.480
So the command is docker container run -d Ubuntu and here I'm just giving sleep 30.
75

76
00:06:31.620 --> 00:06:35.670
So container is running at the background if you want to see simply fire this command.
76

77
00:06:36.390 --> 00:06:42.900
So here you can see the container is running and this container will be running for 30 seconds.
77

78
00:06:42.900 --> 00:06:54.330
So here you can see a status up for 7 seconds and after 30 seconds this container will be in exited
78

79
00:06:54.330 --> 00:06:54.840
state.
79

80
00:06:55.050 --> 00:06:57.090
Or we can say stopped state.
80

81
00:07:02.330 --> 00:07:03.950
Now we do not have any output.
81

82
00:07:05.090 --> 00:07:08.090
And the docker container.
82

83
00:07:08.480 --> 00:07:11.990
ls and Docker image.
83

84
00:07:12.000 --> 00:07:12.620
ls.
84

85
00:07:16.800 --> 00:07:18.150
We have one image.
85

86
00:07:18.540 --> 00:07:19.430
So this is one thing.
86

87
00:07:19.440 --> 00:07:26.160
Suppose you want to execute the container in background and also you want to go inside that container.
87

88
00:07:26.190 --> 00:07:34.110
Suppose you have created a container of ubuntu machine and your container is in running state.
88

89
00:07:34.140 --> 00:07:36.090
Now you want to go inside that container.
89

90
00:07:36.090 --> 00:07:37.500
So what is the command for that?
90

91
00:07:37.530 --> 00:07:44.010
So docker container and run for that.
91

92
00:07:44.010 --> 00:07:45.690
You have to use few option -i.
92

93
00:07:45.690 --> 00:07:49.470
i, is for the interactive and I'm going to use t.
93

94
00:07:49.500 --> 00:07:55.170
t, is basically for the pseudo terminal and what container you want to execute.
94

95
00:07:55.440 --> 00:07:59.100
For that you have to give the image name docker image.
95

96
00:07:59.490 --> 00:08:07.050
So I want to execute this ubuntu and after that you want to go inside this machine, simply give bin
96

97
00:08:07.050 --> 00:08:07.590
bash.
97

98
00:08:09.480 --> 00:08:12.780
Now you can see that you are inside the ubuntu machine.
98

99
00:08:13.110 --> 00:08:18.930
You can see its hostname has been changed and simply if will fire this.
99

100
00:08:22.820 --> 00:08:23.810
We will get this output.
100

101
00:08:23.840 --> 00:08:28.970
Here you can see now you are in ubuntu machine so if will simply fire this exit command.
101

102
00:08:28.970 --> 00:08:29.990
What will happen?
102

103
00:08:29.990 --> 00:08:35.030
Your container in which you are currently in it will be in excited state.
103

104
00:08:35.240 --> 00:08:41.330
But suppose if you want to come out from this container without stopping or exited this container for
104

105
00:08:41.330 --> 00:08:48.740
that, simply you have to give ctrl p and q, Now I have come out from that to container, my ubuntu
105

106
00:08:48.740 --> 00:08:52.970
container but still it is running docker container.
106

107
00:08:52.970 --> 00:08:56.480
ls here you can see my container is still running.
107

108
00:08:58.040 --> 00:09:03.110
So in the next lecture I will explain a few more things about the Docker and then we'll move towards
108

109
00:09:03.110 --> 00:09:05.360
the Amazon Elastic Container Service.
109

110
00:09:05.360 --> 00:09:07.010
So that's all we'll see you in the next lecture.
