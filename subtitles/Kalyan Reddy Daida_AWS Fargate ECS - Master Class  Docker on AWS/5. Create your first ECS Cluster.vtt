WEBVTT
0
1
00:00:00.330 --> 00:00:03.120
So let's continue in this lecture.
1

2
00:00:03.150 --> 00:00:12.660
I will show you how to create the ECS cluster and if you are going to log into the Amazon console.
2

3
00:00:12.960 --> 00:00:14.760
So we will get this service.
3

4
00:00:14.760 --> 00:00:18.180
So let me log into my this Amazon console.
4

5
00:00:27.710 --> 00:00:37.520
Now you can see that I'm able to access my AWS management console and I'm on this Asia Pacific region and
5

6
00:00:37.910 --> 00:00:38.960
this is my account.
6

7
00:00:38.990 --> 00:00:40.190
Everything is fine.
7

8
00:00:40.460 --> 00:00:47.690
So if you are aware that this particular service belongs to which section, you can go to that section
8

9
00:00:47.690 --> 00:00:50.230
and from there you can select the service.
9

10
00:00:50.240 --> 00:01:00.590
Suppose if you are not aware where we have this elastic container service, simply type here ECS and just
10

11
00:01:00.590 --> 00:01:02.660
click on this elastic container service.
11

12
00:01:05.710 --> 00:01:07.120
So this is the dashboard.
12

13
00:01:07.570 --> 00:01:09.460
And here we have all the options.
13

14
00:01:09.460 --> 00:01:15.310
Amazon ECS Cluster, Task Definition, Account Settings, Amazon ECR.
14

15
00:01:15.670 --> 00:01:19.630
And basically it provides a repository.
15

16
00:01:19.690 --> 00:01:26.380
So repository is a location where the different teams like your application team developer, team system
16

17
00:01:26.380 --> 00:01:29.110
team, they will create the Docker image Right.
17

18
00:01:30.130 --> 00:01:33.490
And here we have this AWS marketplace.
18

19
00:01:34.030 --> 00:01:38.710
And if I'll scroll down, it will tell you what is Amazon ECS?
19

20
00:01:38.710 --> 00:01:45.370
So Amazon ECS makes it easy to deploy, manage and scale Docker containers, running application services
20

21
00:01:45.370 --> 00:01:47.260
and batch processes.
21

22
00:01:47.530 --> 00:01:53.220
It also provides you the load balancing the EC2 security EBS and IAM roles.
22

23
00:01:53.260 --> 00:02:00.730
So if will click here, get started, it will tell you the creation of ECS cluster step by step.
23

24
00:02:01.210 --> 00:02:08.230
And at the bottom here, you can see we have run containers at scale, flexible container placement
24

25
00:02:08.230 --> 00:02:10.540
and integrated and extensible.
25

26
00:02:11.020 --> 00:02:15.220
And here we have the documentation support forums and contact us.
26

27
00:02:15.700 --> 00:02:17.320
So let me start from here.
27

28
00:02:18.610 --> 00:02:19.480
Get started.
28

29
00:02:20.720 --> 00:02:26.860
Now, these are the steps which you have to keep in mind when you are going to create the ECS cluster.
29

30
00:02:26.870 --> 00:02:33.890
So very first step, the container definition, and then you have to create the task definition and
30

31
00:02:33.890 --> 00:02:34.700
service.
31

32
00:02:34.700 --> 00:02:37.190
And finally you are going to create the cluster.
32

33
00:02:37.460 --> 00:02:40.190
So let's understand what is container definition.
33

34
00:02:40.370 --> 00:02:45.020
So in the container definition you are going to choose the image, your Docker image.
34

35
00:02:45.680 --> 00:02:52.550
So here you can see choose an image for your container below to get started quickly or define the container
35

36
00:02:52.550 --> 00:02:53.780
image to use.
36

37
00:02:53.930 --> 00:02:55.820
So you can use this sample.
37

38
00:02:55.970 --> 00:03:02.600
You can also use nginx, tomcat web server or you can also use the customize.
38

39
00:03:02.600 --> 00:03:06.680
And here you have to define the attributes like image, memory and CPU.
39

40
00:03:06.680 --> 00:03:12.920
So this is one thing or in simple words we can say in the container definition, you are going to define
40

41
00:03:12.920 --> 00:03:14.870
the Docker image.
41

42
00:03:14.900 --> 00:03:21.140
Now the question is who is going to create the Docker image, your application team, your developer
42

43
00:03:21.140 --> 00:03:24.980
team, your system admin team who is working on the application?
43

44
00:03:24.980 --> 00:03:26.630
They will create the image.
44

45
00:03:27.560 --> 00:03:34.010
I will show you practically as well how to create the image and how to upload the image into the ECR.
45

46
00:03:34.190 --> 00:03:40.670
Or you can also upload the image into the Docker hub and from there you can pull the image to your Amazon
46

47
00:03:40.670 --> 00:03:41.450
ECS.
47

48
00:03:41.630 --> 00:03:44.420
Now second step is your task definition.
48

49
00:03:44.420 --> 00:03:47.630
So what usually you will do in the task definition?
49

50
00:03:47.630 --> 00:03:55.610
So in simple words, a task definition is required to run docker container in Amazon ECS.
50

51
00:03:56.000 --> 00:04:01.820
Now you have the Docker image which you have already defined in the container definition.
51

52
00:04:01.940 --> 00:04:04.820
Now you want to execute your Docker image.
52

53
00:04:04.820 --> 00:04:07.220
For that you need the container.
53

54
00:04:07.220 --> 00:04:12.050
So in task definition you are going to define the container.
54

55
00:04:12.530 --> 00:04:20.870
A task definition is a blueprint for your application and describes one or more containers through attributes.
55

56
00:04:20.870 --> 00:04:28.190
So how many containers is required to execute your Docker image so that you will define in the task
56

57
00:04:28.190 --> 00:04:29.060
definition?
57

58
00:04:29.240 --> 00:04:32.990
Some attributes are configured at the task level.
58

59
00:04:33.020 --> 00:04:38.120
Task level means here, but the majority of attributes are configured per container.
59

60
00:04:39.410 --> 00:04:41.900
So here you can define this one.
60

61
00:04:42.200 --> 00:04:51.170
So by default here you can see it has taken the name first run task definition and it has already taken
61

62
00:04:51.470 --> 00:04:54.050
The AWS VPC network by default.
62

63
00:04:54.050 --> 00:05:03.200
It has taken this one and it will create one role as well, because this task definition is going to
63

64
00:05:03.230 --> 00:05:08.990
create a Docker and that Docker is going to run on your ECS cluster.
64

65
00:05:08.990 --> 00:05:13.940
For that, it requires a role, so you need not to worry how to create this role.
65

66
00:05:13.940 --> 00:05:20.570
Your Amazon ECS is going to create that role and here I'm going to use Fargate.
66

67
00:05:20.810 --> 00:05:28.220
Fargate means whatever the resources or whatever the EC2 instance is going to be created at the
67

68
00:05:28.220 --> 00:05:31.310
back end, your Amazon is going to manage.
68

69
00:05:31.700 --> 00:05:34.370
You are not able to access those machines.
69

70
00:05:34.640 --> 00:05:38.150
Suppose you need 2 machines.
70

71
00:05:38.420 --> 00:05:40.990
You have defined 2 task definition or.
71

72
00:05:41.030 --> 00:05:46.040
We can say you require to deploy this image as a 2 task definition.
72

73
00:05:46.040 --> 00:05:51.230
It means 2 container is running or you need 2 EC2 instances at the back end.
73

74
00:05:51.440 --> 00:05:55.010
So your Amazon is going to manage those machines.
74

75
00:05:55.010 --> 00:06:02.120
If you have defined Fargate as a system admin who is going to create this Amazon ECS, they will
75

76
00:06:02.120 --> 00:06:04.550
not have access to that machine.
76

77
00:06:04.550 --> 00:06:06.380
So that is a meaning of Fargate.
77

78
00:06:06.950 --> 00:06:14.060
And here you can see it has taken .5 GB of memory and this is the task CPU.
78

79
00:06:14.060 --> 00:06:16.760
So this is my first task.
79

80
00:06:16.760 --> 00:06:24.350
So I've taken a very minimum or you can say this is the default attributes it has taken and here you
80

81
00:06:24.350 --> 00:06:26.060
can see it will provide you the detail as well.
81

82
00:06:26.060 --> 00:06:31.790
Docker networking mode to use for the container and you will get all the details from here as well.
82

83
00:06:32.630 --> 00:06:34.940
So we understood 2 points.
83

84
00:06:34.940 --> 00:06:37.940
This is the container definition and task definition.
84

85
00:06:37.940 --> 00:06:39.530
So that's all for this lecture.
85

86
00:06:39.680 --> 00:06:42.710
In the next lecture, we'll discuss about service and cluster.
