WEBVTT
0
1
00:00:00.480 --> 00:00:07.230
So in the previous lecture we were trying to create a task and while creating the task, at some point
1

2
00:00:07.260 --> 00:00:11.520
we have to define the container, image and container name.
2

3
00:00:11.730 --> 00:00:14.880
But as of now, we do not have any image.
3

4
00:00:15.060 --> 00:00:22.680
Suppose there is an application team and they have developed some image and then with the help of Docker,
4

5
00:00:22.710 --> 00:00:27.750
they have created its application image as a Docker image.
5

6
00:00:28.230 --> 00:00:34.290
And then finally they have pushed the image to the AWS ECR or Docker hub, any repository.
6

7
00:00:35.100 --> 00:00:42.270
And once it is on repository, you will have some URL so that URL you have to put it here in
7

8
00:00:42.270 --> 00:00:44.660
the container entries.
8

9
00:00:44.670 --> 00:00:48.980
And once you click next, it is going to execute your task.
9

10
00:00:48.990 --> 00:00:54.390
So at the back end it is going to execute one container and that container is nothing.
10

11
00:00:54.390 --> 00:00:57.690
It is going to execute your Docker image.
11

12
00:00:58.170 --> 00:01:04.530
So what I'm going to do here with the help of VM, I'm going to create one Docker image.
12

13
00:01:04.530 --> 00:01:12.990
So first of all, I'm going to create one nginx web page and or we can say nginx application,
13

14
00:01:12.990 --> 00:01:15.080
we'll create a very simple web page.
14

15
00:01:15.090 --> 00:01:19.050
And then with the help of Docker, I'm going to create it's Docker image.
15

16
00:01:19.050 --> 00:01:19.860
So let's start.
16

17
00:01:20.190 --> 00:01:23.370
So I have one VM and it is in running state.
17

18
00:01:23.370 --> 00:01:25.500
I've already taken its access.
18

19
00:01:25.770 --> 00:01:33.030
And what is first step I have to install docker yum install docker.
19

20
00:01:43.960 --> 00:01:47.920
That's done and I need to start the Docker services as well.
20

21
00:01:47.950 --> 00:01:49.330
System CTL.
21

22
00:01:50.950 --> 00:01:52.480
Status Docker.
22

23
00:01:54.520 --> 00:01:58.450
So it is in disable.
23

24
00:01:58.510 --> 00:02:00.760
So let me start as well one more time.
24

25
00:02:09.720 --> 00:02:10.470
Perfect.
25

26
00:02:12.330 --> 00:02:15.630
So my docker service has been started on this VM machine.
26

27
00:02:16.020 --> 00:02:18.690
Now I'm in this location here.
27

28
00:02:18.690 --> 00:02:20.070
I'm going to create a directory.
28

29
00:02:21.810 --> 00:02:23.730
You can create any directory name.
29

30
00:02:24.120 --> 00:02:30.930
I'm giving application 1, and then I'm going to create one more directory.
30

31
00:02:30.930 --> 00:02:35.670
mkdir app 1, I'm in this location.
31

32
00:02:36.210 --> 00:02:38.310
Let me go first inside this one.
32

33
00:02:38.880 --> 00:02:42.090
And here we have one more directory.
33

34
00:02:42.340 --> 00:02:42.640
Okay.
34

35
00:02:42.720 --> 00:02:46.560
I have created both the directory on the same location, but I want this app.
35

36
00:02:46.560 --> 00:02:48.360
1 should inside this directory.
36

37
00:02:48.690 --> 00:02:51.000
So let me create this app 1 here.
37

38
00:02:51.660 --> 00:02:55.230
I'm in this location and here I have created one more directory.
38

39
00:02:55.230 --> 00:02:56.880
So let me go inside this one.
39

40
00:02:57.210 --> 00:03:02.280
And here I'm going to create a very simple HTML file.
40

41
00:03:02.730 --> 00:03:07.710
So the file name would be index.html.
41

42
00:03:09.000 --> 00:03:11.910
So I have already having the entry.
42

43
00:03:12.360 --> 00:03:13.860
It's very simple here.
43

44
00:03:13.860 --> 00:03:16.080
I have chosen one color.
44

45
00:03:16.470 --> 00:03:24.240
So this is my blue colour and the message it is going to publish that is welcome to ECS learning classes
45

46
00:03:24.690 --> 00:03:25.980
and happy learning Shikhar Verma.
46

47
00:03:27.990 --> 00:03:32.010
Okay, so that's a very simple index . html.
47

48
00:03:32.010 --> 00:03:34.980
Let me come a step back now.
48

49
00:03:34.980 --> 00:03:36.270
I'm in this location.
49

50
00:03:37.580 --> 00:03:38.880
Okay, let's clear this one.
50

51
00:03:41.030 --> 00:03:41.540
Okay.
51

52
00:03:41.690 --> 00:03:45.440
So in this location, I'm going to create a Docker file.
52

53
00:03:45.440 --> 00:03:53.620
So vi Docker file, make sure the name of the Docker file should be same.
53

54
00:03:53.630 --> 00:03:57.590
D should be cap insert coming back here.
54

55
00:03:58.220 --> 00:04:02.330
And this is the entry you have to put in your Docker file.
55

56
00:04:03.870 --> 00:04:12.750
So here I'm going to use the nginx image and then you can see I have used copy command and in the
56

57
00:04:12.750 --> 00:04:19.320
same location we have one more directory app 1 and inside this directory we have index.html.
57

58
00:04:19.500 --> 00:04:22.980
I want to copy this entire directory into this location.
58

59
00:04:26.530 --> 00:04:33.490
Save and come out now in this location here we have the Docker file and also we have the directory f1.
59

60
00:04:33.490 --> 00:04:35.830
Inside this we have the index. html.
60

61
00:04:35.830 --> 00:04:37.780
Now I'm going to create the Docker image.
61

62
00:04:38.020 --> 00:04:40.300
So let's see what all the Docker images you have.
62

63
00:04:40.300 --> 00:04:42.250
So as of now, we do not have any image.
63

64
00:04:42.640 --> 00:04:45.040
Now I'm going to create the Docker image.
64

65
00:04:45.040 --> 00:04:57.310
So the command is Docker and build -t and I'm giving this shikhar Docker/nginx and then you
65

66
00:04:57.310 --> 00:05:00.670
have to give the complete path of your Docker file.
66

67
00:05:00.890 --> 00:05:03.670
Else if you are in the same location, just give dot.
67

68
00:05:05.590 --> 00:05:15.160
Now in the step one it is just to you can see downloading the nginx image from the Docker hub and
68

69
00:05:15.160 --> 00:05:17.800
then it is copied this directory into this location.
69

70
00:05:18.040 --> 00:05:23.610
That's done, let me cross-check docker image ls.
70

71
00:05:24.010 --> 00:05:28.120
So here you can see my image is running fine on this system.
71

72
00:05:29.060 --> 00:05:34.370
So I want to push this image to the AWS ECR.
72

73
00:05:35.030 --> 00:05:42.800
And once I will push the image to the AWS ECR, I can have the URL and same URL I have to put here.
73

74
00:05:43.310 --> 00:05:50.630
So before to proceed, let me execute this Docker image and create one container for that and let's
74

75
00:05:50.630 --> 00:05:52.130
see whether it is working or not.
75

76
00:05:52.400 --> 00:05:57.050
So the command is Docker run --name.
76

77
00:05:57.410 --> 00:06:08.090
Here I am giving the name of my application nginx app 1 and I already given this name.
77

78
00:06:08.090 --> 00:06:14.450
So let me give some different name 5 and -p first.
78

79
00:06:14.690 --> 00:06:15.830
-p first.
79

80
00:06:15.830 --> 00:06:17.530
You have to give the host port.
80

81
00:06:17.540 --> 00:06:28.010
So suppose I'm giving 81 and my Docker port is 80 and then you have to give the option hyphen.
81

82
00:06:28.010 --> 00:06:33.770
d, That is for the detach and at the last you have to give the image.
82

83
00:06:35.090 --> 00:06:44.780
Now you can see this container is started running and docker container ls you can see this now coming back
83

84
00:06:44.780 --> 00:06:45.290
here.
84

85
00:06:45.890 --> 00:06:55.850
Now coming back to this and this is the IP and go to the security and click on this security group.
85

86
00:06:56.090 --> 00:07:04.190
And here you have to just click on edit inbound rules and here you have to add both the port 80 and
86

87
00:07:04.190 --> 00:07:04.980
81.
87

88
00:07:05.000 --> 00:07:11.660
Like this way, okay just copy the IP paste here and give 81 here.
88

89
00:07:12.350 --> 00:07:20.390
Now you can see that my nginx started working and also let me give app1/index.html.
89

90
00:07:21.950 --> 00:07:25.010
Now you can see that this page is also running.
90

91
00:07:25.580 --> 00:07:27.890
Now let me come back here.
91

92
00:07:28.370 --> 00:07:30.140
I'm going to stop this container.
92

93
00:07:30.140 --> 00:07:36.260
Docker container stop and this is the container ID.
93

94
00:07:39.630 --> 00:07:41.060
Now this has been stopped okay.
94

95
00:07:42.770 --> 00:07:44.120
So that's all for this lecture.
95

96
00:07:44.120 --> 00:07:47.720
In the next lecture, I'm going to push this image to the AWS ECR.
