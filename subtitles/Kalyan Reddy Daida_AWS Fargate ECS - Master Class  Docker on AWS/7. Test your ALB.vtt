WEBVTT
0
1
00:00:00.240 --> 00:00:04.560
So in this lecture, I'm going to access my application load balancer.
1

2
00:00:04.590 --> 00:00:10.500
And once the request will reach to the application load balancer, it is going to distribute the traffic
2

3
00:00:10.500 --> 00:00:12.090
among all the containers.
3

4
00:00:12.540 --> 00:00:15.720
So this is the DNS name of my application load balancer.
4

5
00:00:15.720 --> 00:00:18.690
Let me copy and put it in the browser.
5

6
00:00:23.650 --> 00:00:26.890
Now you can see that my this web page is started opening.
6

7
00:00:27.100 --> 00:00:28.660
And let me refresh it.
7

8
00:00:28.990 --> 00:00:32.430
So here the request is coming to first container.
8

9
00:00:32.440 --> 00:00:36.240
And if will refresh it, then it will come to the next container.
9

10
00:00:36.250 --> 00:00:38.050
Next container, next container.
10

11
00:00:38.170 --> 00:00:46.240
But for our learning purpose, how would I ensure that the request is going to all my containers?
11

12
00:00:46.240 --> 00:00:48.160
So let me do one thing.
12

13
00:00:48.430 --> 00:00:52.300
Let me access my this instance.
13

14
00:00:52.900 --> 00:00:57.040
And from there, I'm going to do some changes in my this nginx web application.
14

15
00:00:57.040 --> 00:01:01.780
So first I have to log into my this public instance.
15

16
00:01:14.060 --> 00:01:15.470
This is my private key.
16

17
00:01:19.520 --> 00:01:25.850
Now here you can see I'm able to access my this public subnet instance and I want to access my private
17

18
00:01:25.850 --> 00:01:26.630
subnet instance.
18

19
00:01:26.630 --> 00:01:27.710
So what is the IP?
19

20
00:01:28.280 --> 00:01:35.960
So this is the IP and I also need to copy the private key.
20

21
00:01:36.560 --> 00:01:38.930
So this is my private key.
21

22
00:01:38.960 --> 00:01:43.130
Copy and create a file with any name okay.
22

23
00:01:45.890 --> 00:01:56.480
I have created my private key and ssh -i the name of the key and make sure the permission
23

24
00:01:56.480 --> 00:01:59.830
it should be 400.
24

25
00:01:59.840 --> 00:02:10.010
Otherwise you will start getting the error ssh -i and EC2-user and the IP of
25

26
00:02:10.010 --> 00:02:12.680
my this private instance.
26

27
00:02:15.090 --> 00:02:21.750
Now you can see that I am able to access my instance, my first instance, which is running in the private
27

28
00:02:21.750 --> 00:02:22.440
subnet.
28

29
00:02:24.270 --> 00:02:28.440
So docker container ls.
29

30
00:02:28.890 --> 00:02:32.490
So here you can see 2 containers are running.
30

31
00:02:32.490 --> 00:02:36.600
So this is my first container and this is my second container of my nginx.
31

32
00:02:36.600 --> 00:02:38.160
latest here you can see.
32

33
00:02:38.460 --> 00:02:41.700
So this is what we have defined in our task.
33

34
00:02:42.420 --> 00:02:46.980
Now, let me go inside this instance.
34

35
00:02:46.980 --> 00:02:56.520
So how we can go inside this one, so docker and execute -it and then you have to give the container
35

36
00:02:56.520 --> 00:02:59.580
ID and bin bash.
36

37
00:03:01.110 --> 00:03:10.440
Now I'm inside this container and go to this usr and here we have this share.
37

38
00:03:12.550 --> 00:03:13.530
nginx.
38

39
00:03:14.900 --> 00:03:15.490
html.
39

40
00:03:16.640 --> 00:03:20.800
And this is my index.html.
40

41
00:03:22.100 --> 00:03:23.600
I'm getting some error here.
41

42
00:03:23.870 --> 00:03:25.460
So vi command is not working.
42

43
00:03:25.460 --> 00:03:26.630
Just cat this one.
43

44
00:03:27.410 --> 00:03:33.890
So when we open this web page, so we are getting this one so same it is defined here.
44

45
00:03:33.890 --> 00:03:35.240
So what I'm going to do here.
45

46
00:03:35.690 --> 00:03:43.040
I'm going to remove this index.html and I'm going to create a new file index.html.
46

47
00:03:44.300 --> 00:03:46.520
And let me put some content here.
47

48
00:03:47.240 --> 00:03:48.460
And this is my suppose.
48

49
00:03:48.470 --> 00:03:51.680
This is my container.
49

50
00:03:52.220 --> 00:03:53.420
001.
50

51
00:03:54.320 --> 00:03:58.520
For instance 1.
51

52
00:04:00.110 --> 00:04:00.830
Control.
52

53
00:04:02.770 --> 00:04:04.900
d index.
53

54
00:04:05.970 --> 00:04:06.480
Okay.
54

55
00:04:07.050 --> 00:04:10.560
So this is for my first container.
55

56
00:04:10.560 --> 00:04:11.940
Let me come out from here.
56

57
00:04:14.320 --> 00:04:16.780
And Docker container.
57

58
00:04:18.430 --> 00:04:19.090
ls.
58

59
00:04:19.810 --> 00:04:21.850
Let me go inside to the second one.
59

60
00:04:22.660 --> 00:04:24.850
So, Docker.
60

61
00:04:26.780 --> 00:04:33.530
Container Docker exec -it, the container ID and bin bash.
61

62
00:04:37.060 --> 00:04:39.010
Let me go inside this location.
62

63
00:04:39.010 --> 00:04:44.590
USR share nginx and html.
63

64
00:04:45.370 --> 00:04:48.140
And here we have this index.html.
64

65
00:04:48.730 --> 00:04:50.120
So this is the default entry.
65

66
00:04:50.140 --> 00:04:51.580
Let me remove this file.
66

67
00:04:53.390 --> 00:04:55.040
And Cat.
67

68
00:05:00.410 --> 00:05:02.080
Index.html.
68

69
00:05:04.820 --> 00:05:07.160
Container 002.
69

70
00:05:09.530 --> 00:05:12.560
For instance 1.
70

71
00:05:16.790 --> 00:05:17.260
Okay.
71

72
00:05:17.870 --> 00:05:19.010
Let me come out from here.
72

73
00:05:19.010 --> 00:05:24.860
So for 2 containers which is running on 1 instance, I have done the changes coming back here.
73

74
00:05:25.340 --> 00:05:29.330
Now I'm going to refresh it and now you can see that the request.
74

75
00:05:29.330 --> 00:05:31.160
First, let me come to this PPT.
75

76
00:05:31.670 --> 00:05:33.980
Now, this user has.
76

77
00:05:34.160 --> 00:05:37.550
Now this user is trying to access the web application.
77

78
00:05:37.550 --> 00:05:40.420
So first, the request will go to the application load balancer.
78

79
00:05:40.430 --> 00:05:43.460
Then it is going to distribute equally to all the containers.
79

80
00:05:43.460 --> 00:05:46.520
So here you can see if I'm refreshing it.
80

81
00:05:46.520 --> 00:05:55.520
First it is going to container 001 and then you can see it has gone to the second instance of the container
81

82
00:05:55.910 --> 00:05:59.210
and you can see that I'm getting this container 02.
82

83
00:06:00.380 --> 00:06:07.490
So here you can see it is distributing the traffic to both of the instances equally to their respective
83

84
00:06:07.490 --> 00:06:08.510
containers.
84

85
00:06:08.510 --> 00:06:10.460
So that's all we'll see you in the next lecture.
