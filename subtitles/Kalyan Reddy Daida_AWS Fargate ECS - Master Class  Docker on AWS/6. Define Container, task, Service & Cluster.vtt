WEBVTT
0
1
00:00:00.240 --> 00:00:06.480
So in the previous lecture we understood what is container definition and what is task definition.
1

2
00:00:06.780 --> 00:00:07.800
So let's continue.
2

3
00:00:08.040 --> 00:00:15.780
So in container definition, let me choose this one nginx and you can see it has taken the latest
3

4
00:00:15.780 --> 00:00:21.660
image of nginx and also you can see few attributes like your memory as well as your CPU.
4

5
00:00:21.780 --> 00:00:26.100
If you want to customize this container definition here, we have an option edit.
5

6
00:00:26.370 --> 00:00:32.370
If we'll click here, it will provide you all the details or we can say you will have more options.
6

7
00:00:32.400 --> 00:00:36.660
Here we have this soft limit and hard limit and port mapping.
7

8
00:00:36.660 --> 00:00:37.530
Is 80.
8

9
00:00:37.560 --> 00:00:43.650
So let me go with the default option and this is the task definition.
9

10
00:00:43.650 --> 00:00:46.050
So how many task you want to execute?
10

11
00:00:46.050 --> 00:00:53.880
So by default it is going to create one task to execute this docker image means it is going to create
11

12
00:00:53.880 --> 00:00:54.930
one container.
12

13
00:00:54.990 --> 00:00:56.880
Here we have all the details.
13

14
00:00:57.660 --> 00:01:00.120
Now the next is service.
14

15
00:01:00.330 --> 00:01:07.710
A service allows you to run and maintain a specified number that desired count of simultaneously instances
15

16
00:01:07.710 --> 00:01:10.560
of a task service in an ECS cluster.
16

17
00:01:10.830 --> 00:01:15.960
So how many tasks is going to be executed for this container definition?
17

18
00:01:15.960 --> 00:01:18.390
Now we have the Docker image for that.
18

19
00:01:18.390 --> 00:01:25.590
We have created the task and the task we have just defined the container and now we have the service.
19

20
00:01:25.590 --> 00:01:29.180
So basically service is going to manage your task.
20

21
00:01:29.190 --> 00:01:34.860
Suppose your container is running, it means your task is running.
21

22
00:01:35.130 --> 00:01:38.880
So we need some service or we can say some resources.
22

23
00:01:38.880 --> 00:01:41.130
Who is going to manage your task?
23

24
00:01:41.400 --> 00:01:48.180
Suppose if in case your task has been stop, your service is always checking the task.
24

25
00:01:48.360 --> 00:01:50.490
The task is down immediately.
25

26
00:01:50.490 --> 00:01:55.320
Create a new container or we can see a new task which has been stopped.
26

27
00:01:55.650 --> 00:02:04.380
So in simple words, a service is going to manage your tasks and you can also define how many desired
27

28
00:02:04.410 --> 00:02:06.180
tasks required.
28

29
00:02:06.480 --> 00:02:08.640
Suppose if you have mentioned 2.
29

30
00:02:08.910 --> 00:02:15.090
So when you create the cluster, it is going to create 2 tasks for the Docker image.
30

31
00:02:15.090 --> 00:02:18.000
And also you can define the load balancing here.
31

32
00:02:18.180 --> 00:02:24.090
So if you want to create application load balancer, you can choose here as well so that I will discuss
32

33
00:02:24.090 --> 00:02:25.260
in the latter lectures.
33

34
00:02:25.260 --> 00:02:27.660
So as of now I'm going to choose none.
34

35
00:02:27.960 --> 00:02:32.750
And next and next is to configure your cluster.
35

36
00:02:33.270 --> 00:02:38.220
The infrastructure in a Fargate cluster is fully managed by AWS.
36

37
00:02:38.430 --> 00:02:41.580
So you have created suppose 2 tasks.
37

38
00:02:41.580 --> 00:02:46.950
So at the back end the two containers will be executed and obviously there would be 2 EC2 instances
38

39
00:02:46.950 --> 00:02:48.930
who is going to manage your container?
39

40
00:02:49.230 --> 00:02:56.970
But as a system admin or as the application user or developer user, you are not supposed to manage
40

41
00:02:56.970 --> 00:03:00.420
the EC2 instances even you do not have the access to those machines.
41

42
00:03:00.420 --> 00:03:03.090
You are not supposed to see those machines as well.
42

43
00:03:03.570 --> 00:03:06.660
That is completely managed by the AWS.
43

44
00:03:06.690 --> 00:03:13.980
Your containers run without you managing and configuring individual Amazon EC2 service.
44

45
00:03:14.310 --> 00:03:23.190
Now here you need to give the cluster name and giving cluster-demo and by default it is going
45

46
00:03:23.190 --> 00:03:28.770
to create a new VPC and also it will provide few subnets in that.
46

47
00:03:29.340 --> 00:03:34.230
But the ideal condition is that you need to create your own VPC.
47

48
00:03:34.380 --> 00:03:37.020
And in that VPC you can define the subnets.
48

49
00:03:37.170 --> 00:03:43.770
So in the latter lectures I will show you how to create the VPC and then when I'm going to create this
49

50
00:03:43.770 --> 00:03:48.690
cluster, I will show you how we can assign the VPC to your cluster.
50

51
00:03:48.780 --> 00:03:51.630
So here I'm just click on next.
51

52
00:03:51.630 --> 00:03:58.230
So here it will give you a review to the settings which you have given for this cluster like container
52

53
00:03:58.230 --> 00:04:01.170
definition, task definition, service and cluster.
53

54
00:04:01.440 --> 00:04:05.010
So you can review before creating the cluster.
54

55
00:04:05.250 --> 00:04:06.720
So everything seems fine.
55

56
00:04:06.720 --> 00:04:10.650
It is going to create a cluster with the new VPC ID.
56

57
00:04:13.910 --> 00:04:17.520
And create so there are 9 tasks.
57

58
00:04:17.540 --> 00:04:22.970
And here you can see it is creating your cluster and it is doing a step by step.
58

59
00:04:34.810 --> 00:04:40.900
So here you can see few resources have been created immediately because those resources are not dependent
59

60
00:04:40.900 --> 00:04:41.800
with others.
60

61
00:04:42.190 --> 00:04:45.460
And you can see it is taking some time.
61

62
00:04:45.460 --> 00:04:47.860
We are creating resources for your service.
62

63
00:04:47.860 --> 00:04:50.500
This may take up to 10 minutes.
63

64
00:04:50.650 --> 00:04:53.680
When we are complete, you can view your service.
64

65
00:04:53.860 --> 00:04:55.520
So that's all for this lecture.
65

66
00:04:55.540 --> 00:04:59.110
In the next lecture, we'll see how this cluster looks.
