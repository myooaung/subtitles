WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.860
I hope you remember the challenge Number one in our current state of the public ledger with

00:00:04.860 --> 00:00:04.860
,

00:00:04.860 --> 00:00:05.330
say,

00:00:05.330 --> 00:00:08.200
anyone can add a transaction on others behalf,

00:00:08.200 --> 00:00:09.470
and how do we prevent it?

00:00:09.470 --> 00:00:12.040
Cryptography can come to our rescue.

00:00:12.040 --> 00:00:12.680
In the scenario.

00:00:12.680 --> 00:00:17.550
Topography is a method of securing the communication with window bodies.

00:00:17.550 --> 00:00:20.350
Imagine there is a war between two countries,

00:00:20.350 --> 00:00:23.580
and soldiers want to exchange confidential information between them.

00:00:23.580 --> 00:00:28.190
They have to be extra cautious as any data leak could be fatal for them.

00:00:28.190 --> 00:00:33.540
Hence they can encrypt the message at the center side and decrypt the same at that issue

00:00:33.540 --> 00:00:33.860
aside,

00:00:33.860 --> 00:00:35.520
once encrypted,

00:00:35.520 --> 00:00:39.200
the message cannot be deacon without the key used for encryption.

00:00:39.200 --> 00:00:41.710
That's communication is made secure.

00:00:41.710 --> 00:00:47.730
Using there are three types of cryptography as a similar turkey.

00:00:47.730 --> 00:00:50.910
Asymmetric key cryptography on one way hash.

00:00:50.910 --> 00:00:56.930
Let's look at each one of these in symmetric key cryptography.

00:00:56.930 --> 00:01:00.550
The same key is used for both the encryption and decryption.

00:01:00.550 --> 00:01:03.760
There are two metres in symmetric key cryptography,

00:01:03.760 --> 00:01:06.760
namely substitution and transposition.

00:01:06.760 --> 00:01:08.200
Substation,

00:01:08.200 --> 00:01:09.100
as you can see,

00:01:09.100 --> 00:01:14.170
replaces the indulgent characters with some other character based on the key here.

00:01:14.170 --> 00:01:15.320
In the first example,

00:01:15.320 --> 00:01:18.650
I've taken each character and implement it by two,

00:01:18.650 --> 00:01:19.800
which is the key.

00:01:19.800 --> 00:01:22.070
Hence Hetch got replaced by J.

00:01:22.070 --> 00:01:22.650
And so on.

00:01:22.650 --> 00:01:29.340
Decryption can be done by decommitted characters using the same key transposition as you

00:01:29.340 --> 00:01:32.290
can see in the second example movie characters,

00:01:32.290 --> 00:01:34.180
so that takes becomes unreadable.

00:01:34.180 --> 00:01:34.810
Hence,

00:01:34.810 --> 00:01:39.250
I have used Key s three and move each character three points to the right,

00:01:39.250 --> 00:01:42.730
moving on to asymmetric e T.

00:01:42.730 --> 00:01:44.530
As the name suggest,

00:01:44.530 --> 00:01:47.800
two different keys are used to encrypt and decode the message.

00:01:47.800 --> 00:01:51.290
The two different keys are mathematically link,

00:01:51.290 --> 00:01:53.680
so encryption and encryption is possible.

00:01:53.680 --> 00:01:59.140
The diagram shows public key cryptography where the sender encrypts the message.

00:01:59.140 --> 00:02:03.550
Using the receivers public key on the receiver can decrypt Using his private.

00:02:03.550 --> 00:02:06.630
You might in public e like your bank account,

00:02:06.630 --> 00:02:08.340
which can be public,

00:02:08.340 --> 00:02:10.260
and your private key like your password,

00:02:10.260 --> 00:02:11.360
which only you should know.

00:02:11.360 --> 00:02:17.370
No distress Signature is another form of a symmetric key cryptography,

00:02:17.370 --> 00:02:21.150
where the sender encrypts the message with this private key.

00:02:21.150 --> 00:02:25.760
And since both the message and the digital signature took the receiver here.

00:02:25.760 --> 00:02:27.880
Since the messages also sent separately,

00:02:27.880 --> 00:02:32.210
distress signature are only used for verification off this endless identity.

00:02:32.210 --> 00:02:36.530
Now let's see how destroyed signatures can solve the problem.

00:02:36.530 --> 00:02:38.600
Number one in our currently just eight.

00:02:38.600 --> 00:02:41.460
Let's say we are a condition in the network,

00:02:41.460 --> 00:02:45.380
which is everyone should add their research signature in any transaction descent.

00:02:45.380 --> 00:02:51.940
When you raise to make a valid transaction like a gives B $30 anyone in the network can

00:02:51.940 --> 00:02:52.570
very fight.

00:02:52.570 --> 00:02:55.750
It is valid by the very thing that is still signature off here.

00:02:55.750 --> 00:02:59.620
When did they used to hide a malicious transaction?

00:02:59.620 --> 00:03:03.170
The signature cannot be verified and hands and it broke the register construction.

00:03:03.170 --> 00:03:07.120
This happens because he does not know Ace Private Key.

00:03:07.120 --> 00:03:11.570
This is our deserting nature helps verify the source of transactions.

00:03:11.570 --> 00:03:14.480
We look at the one bear hash maker in the next video.

