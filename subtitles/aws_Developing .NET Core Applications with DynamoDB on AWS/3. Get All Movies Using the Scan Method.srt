1
00:00:02,350 --> 00:00:07,967
We will now start adding the code needed to get all items from our database.

2
00:00:07,967 --> 00:00:10,273
This will be an HttpGet method,

3
00:00:10,273 --> 00:00:14,212
so we'll add the HttpGet decorator to the top of our method.

4
00:00:14,212 --> 00:00:19,386
Then we want to create a method, so we will say public async,

5
00:00:19,386 --> 00:00:22,160
we will set our return type as a Task IEnumerableMovieResponse,

6
00:00:22,160 --> 00:00:28,733
and name our method GetAllItemsFromDatabase.

7
00:00:28,733 --> 00:00:30,436
We need to add a reference to our MovieResponse class

8
00:00:30,436 --> 00:00:32,930
that lives in our Contracts project.

9
00:00:32,930 --> 00:00:37,834
We want to make a call off to our MovieRankService class,

10
00:00:37,834 --> 00:00:41,661
install the response that we get back inside a variable called results.

11
00:00:41,661 --> 00:00:45,849
Because we're using async, we want to add the await keyword.

12
00:00:45,849 --> 00:00:51,774
This awaits the completion of the task, in our case GetAllItemsFromDatabase call.

13
00:00:51,774 --> 00:00:55,157
And we'll call off to our MovieRankService class to a method that we'll

14
00:00:55,157 --> 00:00:59,227
be creating shortly called GetAllItemsFromDatabase.

15
00:00:59,227 --> 00:01:02,340
We'll also return the results that we get back to the user.

16
00:01:02,340 --> 00:01:07,159
And we'll remove the unused using statements at the top of our class.

17
00:01:07,159 --> 00:01:09,964
Heading over to our MovieRankService class,

18
00:01:09,964 --> 00:01:14,501
we want to dependency inject our MovieRankRepository interface.

19
00:01:14,501 --> 00:01:16,115
We'll create a field at the top of our class,

20
00:01:16,115 --> 00:01:20,207
and we'll also want to add a constructor and declare

21
00:01:20,207 --> 00:01:24,365
our IMovieRankRepository dependency.

22
00:01:24,365 --> 00:01:26,677
We need to add a reference to our MovieRank.Libs project,

23
00:01:26,677 --> 00:01:31,953
and we also want to register our IMovieRankRepository

24
00:01:31,953 --> 00:01:34,415
interface in our Startup class.

25
00:01:34,415 --> 00:01:39,869
We'll register this as a Singleton, and bind it to our MovieRankRepository class.

26
00:01:39,869 --> 00:01:44,545
And we'll also need to add a using statement to our

27
00:01:44,545 --> 00:01:47,170
IMovieRankRepository inside our Startup class.

28
00:01:47,170 --> 00:01:50,637
Heading back to our MovieRankService class,

29
00:01:50,637 --> 00:01:55,702
we will now create a method with a return type of IEnumerableMovieResponse,

30
00:01:55,702 --> 00:02:00,096
and call our method GetAllItemsFromDatabase.

31
00:02:00,096 --> 00:02:03,265
We'll be adding a using statement for our MovieResponse contract,

32
00:02:03,265 --> 00:02:07,215
and inside our method we will call off to our

33
00:02:07,215 --> 00:02:10,505
MovieRankRepository class to a method named GetAllItems.

34
00:02:10,505 --> 00:02:14,732
I'm going to add a return null to our method.

35
00:02:14,732 --> 00:02:18,084
This is temporary code that we will change once we know

36
00:02:18,084 --> 00:02:22,280
what we are being returned by DynamoDB.

37
00:02:22,280 --> 00:02:25,115
We're going to have to map our results that we get back from

38
00:02:25,115 --> 00:02:28,954
DynamoDB into our MovieResponse contract.

39
00:02:28,954 --> 00:02:32,145
I've added a return null so our solution will build.

40
00:02:32,145 --> 00:02:38,348
Let's add our GetAllItemsFromDatabase method to the IMovieRankService interface,

41
00:02:38,348 --> 00:02:43,103
and we'll also add the MovieResponse using statement.

42
00:02:43,103 --> 00:02:46,202
I like to clean up the unused using statements as I go,

43
00:02:46,202 --> 00:02:51,383
so let's remove the unnecessary using statements at the top of both the

44
00:02:51,383 --> 00:02:55,036
IMovieRankService interface and our MovieRankService class.

45
00:02:55,036 --> 00:02:58,263
Heading over to our MovieRankRepository class,

46
00:02:58,263 --> 00:03:02,686
this class is where we'll use the methods inside the AWS SDK to

47
00:03:02,686 --> 00:03:06,873
call off to our MovieRank DynamoDB table.

48
00:03:06,873 --> 00:03:10,537
AWS requires us to add the DynamoDB context class.

49
00:03:10,537 --> 00:03:14,888
This is the entry point to the DynamoDB database.

50
00:03:14,888 --> 00:03:18,184
We will create a field at the top of our class private

51
00:03:18,184 --> 00:03:23,256
readonly DynamoDBContext_context.

52
00:03:23,256 --> 00:03:26,153
Inside our constructor, we will new up our DynamoDBContext.

53
00:03:26,153 --> 00:03:31,471
We also need to pass in the Amazon DynamoDB client that we set

54
00:03:31,471 --> 00:03:34,852
up in our Startup class in the last module.

55
00:03:34,852 --> 00:03:40,581
In the constructors parameters, we will add IAmazonDynamoDB dynamoDbClient,

56
00:03:40,581 --> 00:03:45,807
and pass dynamoDbClient into our DynamoDB context.

57
00:03:45,807 --> 00:03:47,897
We will add two using statements.

58
00:03:47,897 --> 00:03:53,835
First the Amazon.DynamoDBv2 .DataModel and also the

59
00:03:53,835 --> 00:03:57,247
Amazon.DynamoDBv2 using statement.

60
00:03:57,247 --> 00:04:01,349
Let's create a method with a return type of IEnumerable MovieDb,

61
00:04:01,349 --> 00:04:04,988
and call our method GetAllItems.

62
00:04:04,988 --> 00:04:10,892
We haven't created the MovieDb model yet, so let's create that now.

63
00:04:10,892 --> 00:04:17,177
We'll add a folder named Models, and Add a MovieDb class to that folder.

64
00:04:17,177 --> 00:04:17,783
Inside this class,

65
00:04:17,783 --> 00:04:21,908
we want to add the properties that our MovieRank table contains.

66
00:04:21,908 --> 00:04:35,228
So we'll add UserId, MovieName, Description, Actors, Ranking, and RankDateTime.

67
00:04:35,228 --> 00:04:40,322
We also need to add a couple of decorators, the first being DynamoDBTable.

68
00:04:40,322 --> 00:04:44,721
The DynamoDbContext will read this model and use the

69
00:04:44,721 --> 00:04:46,481
attribute to get our DynamoDBTable name.

70
00:04:46,481 --> 00:04:50,182
We also want to state what our partition key is,

71
00:04:50,182 --> 00:04:54,848
so we'll add DynamoDBHashKey above UserId.

72
00:04:54,848 --> 00:05:00,261
We'll also add the DynamoDBv2 using statement.

73
00:05:00,261 --> 00:05:02,182
Back in our MovieRankRepository class,

74
00:05:02,182 --> 00:05:05,164
we can now add a using statement to the MovieDb model.

75
00:05:05,164 --> 00:05:08,622
We also want to add a using statement for

76
00:05:08,622 --> 00:05:11,991
System.Threading to allow us to use async.

77
00:05:11,991 --> 00:05:15,299
Inside our method, we can say return await,

78
00:05:15,299 --> 00:05:19,753
and using the DynamoDbContext that we initialized above,

79
00:05:19,753 --> 00:05:22,004
we'll be using the ScanAsync function,

80
00:05:22,004 --> 00:05:26,959
and passing in our MovieDb as the type argument.

81
00:05:26,959 --> 00:05:31,560
Remember, the scan function will scan all items in our database.

82
00:05:31,560 --> 00:05:34,535
This is an expensive process in terms of speed and cost.

83
00:05:34,535 --> 00:05:40,930
We want to try and avoid using scan on queries that we would run often.

84
00:05:40,930 --> 00:05:43,687
The scan async method requires a scan's condition,

85
00:05:43,687 --> 00:05:47,091
even if it's an empty ScanCondition.

86
00:05:47,091 --> 00:05:52,001
So here we'll new up a list of type ScanCondition.

87
00:05:52,001 --> 00:05:55,403
We will also chain the GetRemainingAsync method that will get us

88
00:05:55,403 --> 00:06:00,294
all items from our MovieRank DynamoDB table.

89
00:06:00,294 --> 00:06:04,402
We also want to add the GetAllItems method to our

90
00:06:04,402 --> 00:06:06,129
IMovieRankRepository interface,

91
00:06:06,129 --> 00:06:10,003
and we want to add the appropriate using statements.

92
00:06:10,003 --> 00:06:13,320
Let's also remove the unused using statements from

93
00:06:13,320 --> 00:06:16,512
both the interface and our class.

94
00:06:16,512 --> 00:06:19,228
Navigating back to the MovieRankService class,

95
00:06:19,228 --> 00:06:22,395
we want to map the object that is being returned by

96
00:06:22,395 --> 00:06:26,424
DynamoDB to our MovieResponse contract.

97
00:06:26,424 --> 00:06:30,303
Let's add a field of type IMapper to the top of our MovieRankServices class,

98
00:06:30,303 --> 00:06:34,309
and declare our IMapper dependency.

99
00:06:34,309 --> 00:06:36,258
We'll add the appropriate using statement.

100
00:06:36,258 --> 00:06:42,561
We also want to register our IMapper interface inside our startup class,

101
00:06:42,561 --> 00:06:47,668
and add the appropriate using statement.

102
00:06:47,668 --> 00:06:50,476
Inside our GetAllItemsFromDatabase method,

103
00:06:50,476 --> 00:06:53,375
we want to call off to a method named ToMovieContract.

104
00:06:53,375 --> 00:06:56,163
This doesn't currently exist.

105
00:06:56,163 --> 00:06:58,807
We'll create this shortly.

106
00:06:58,807 --> 00:07:02,448
We'll pass in the response variable as well.

107
00:07:02,448 --> 00:07:04,516
If we head along to our Mapper class,

108
00:07:04,516 --> 00:07:08,035
the object that we get back from DynamoDB is a collection.

109
00:07:08,035 --> 00:07:11,530
We need to run through each item in this collection and

110
00:07:11,530 --> 00:07:15,202
map it to our MovieResponse contract.

111
00:07:15,202 --> 00:07:16,380
We'll add two methods,

112
00:07:16,380 --> 00:07:21,206
the first will have a return type of IEnumerable MovieResponse,

113
00:07:21,206 --> 00:07:25,252
which is the contract that we want to return back to our users.

114
00:07:25,252 --> 00:07:29,169
We'll be taking in a parameter, the IEnumerable MovieDb.

115
00:07:29,169 --> 00:07:33,655
Using the link Select method, we will call off to another method,

116
00:07:33,655 --> 00:07:37,654
each item will then pass through the second method that we're about to create.

117
00:07:37,654 --> 00:07:45,203
And we'll want to also add the appropriate references and using statements.

118
00:07:45,203 --> 00:07:47,069
The second method will be an overload method,

119
00:07:47,069 --> 00:07:51,213
meaning that it will have the same name as our first method,

120
00:07:51,213 --> 00:07:53,598
but the parameters and the return type will be different.

121
00:07:53,598 --> 00:07:56,067
We'll have a return type of MovieResponse,

122
00:07:56,067 --> 00:07:59,779
and we'll pass in MovieDb as the parameter.

123
00:07:59,779 --> 00:08:01,852
Before we go any further,

124
00:08:01,852 --> 00:08:06,473
we want to first create some properties inside our MovieResponse contract.

125
00:08:06,473 --> 00:08:11,073
If we head to our MovieResponse class, and add five properties.

126
00:08:11,073 --> 00:08:14,426
Using the keyword prop and hitting Tab will save me

127
00:08:14,426 --> 00:08:17,196
having to write these out in full.

128
00:08:17,196 --> 00:08:19,536
We will add a string property and call it MovieName,

129
00:08:19,536 --> 00:08:22,957
the second string with the name Description,

130
00:08:22,957 --> 00:08:26,885
third a string, which will be a list of Actors,

131
00:08:26,885 --> 00:08:30,589
the fourth will be an int named Ranking,

132
00:08:30,589 --> 00:08:35,098
and the fifth a string named TimeRanked.

133
00:08:35,098 --> 00:08:40,775
Heading back to our Mapper class, we can now add a return new MovieResponse.

134
00:08:40,775 --> 00:08:45,848
And each item that we are given back from DynamoDB's results will map to a

135
00:08:45,848 --> 00:08:48,979
corresponding property on our MovieResponse contract.

136
00:08:48,979 --> 00:08:52,361
MovieName that is in our MovieResponse contract will be populated

137
00:08:52,361 --> 00:08:56,537
with the results we get back from DynamoDB.

138
00:08:56,537 --> 00:09:01,983
So we can use the parameter argument that our method is using, movie.MovieName.

139
00:09:01,983 --> 00:09:08,109
We will map the rest of the items to our contract properties.

140
00:09:08,109 --> 00:09:11,496
If we head along to our IMapper interface,

141
00:09:11,496 --> 00:09:15,397
we now want to add both methods that we've just created in our Mapper class.

142
00:09:15,397 --> 00:09:20,579
So we're going to add the ToMovieContract, including the overload as well.

143
00:09:20,579 --> 00:09:23,689
We also want to add the appropriate using statements,

144
00:09:23,689 --> 00:09:26,547
and we're going to do a little bit of clean up,

145
00:09:26,547 --> 00:09:29,399
so we're also going to remove the unused using statements

146
00:09:29,399 --> 00:09:34,002
from both the interface and the class.

147
00:09:34,002 --> 00:09:41,451
Let's now save our project, and we'll build it.

148
00:09:41,451 --> 00:09:46,239
Now we want to check that our GetAllItemsFromDatabase is working correctly.

149
00:09:46,239 --> 00:09:49,855
So let's run our application.

150
00:09:49,855 --> 00:09:54,845
I'm going to grab the localhost and the port number, and I'll copy that.

151
00:09:54,845 --> 00:09:57,930
To test each endpoint, I'm going to use the tool Postman.

152
00:09:57,930 --> 00:10:02,348
You can use any HTTP client that you're comfortable with.

153
00:10:02,348 --> 00:10:05,389
I'll grab the localhost and the port that we've just copied earlier,

154
00:10:05,389 --> 00:10:07,188
and paste this into Postman.

155
00:10:07,188 --> 00:10:11,650
Remember we added the route Movies to the top of our Controller class,

156
00:10:11,650 --> 00:10:14,279
so we need to add this to our endpoint.

157
00:10:14,279 --> 00:10:16,968
The method we are trying to hit is a Get,

158
00:10:16,968 --> 00:10:20,691
so we don't need to change anything in there for Postman.

159
00:10:20,691 --> 00:10:23,896
Hit Send, and we're returned back all movies.

160
00:10:23,896 --> 00:10:24,450
Excellent.

161
00:10:24,450 --> 00:10:29,414
I'm going to save each of our queries as we go.

162
00:10:29,414 --> 00:10:34,487
So I'm going over to this Save drop-down arrow, I'm going to select Save As.

163
00:10:34,487 --> 00:10:35,901
In our Request name,

164
00:10:35,901 --> 00:10:39,879
I'm just going to name the same as what our methods are inside our controllers,

165
00:10:39,879 --> 00:10:43,631
GetAllItemsFromDatabase.

166
00:10:43,631 --> 00:10:45,204
We also want to Create a Collection folder,

167
00:10:45,204 --> 00:10:55,000
so we'll select Create Collection, and we'll name it MovieRank. Select the tick, and we'll Save our request into this folder.

