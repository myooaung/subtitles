WEBVTT
1
00:00:02.318 --> 00:00:05.126
To retrieve data from our DynamoDB table,

2
00:00:05.126 --> 00:00:08.861
we can use two options, the scan and query function.

3
00:00:08.861 --> 00:00:12.668
It's important to understand how both of these work and what

4
00:00:12.668 --> 00:00:14.696
the performance costs are for both of these.

5
00:00:14.696 --> 00:00:20.848
When using the scan function, DynamoDB reads all items in your table.

6
00:00:20.848 --> 00:00:23.889
You can optionally add a filter to match items

7
00:00:23.889 --> 00:00:26.581
based on what you're searching for,

8
00:00:26.581 --> 00:00:29.977
but all items need to be read before the filter is applied.

9
00:00:29.977 --> 00:00:34.217
You can imagine that if you have a lot of items in your table,

10
00:00:34.217 --> 00:00:37.774
then this operation is going to have pretty poor performance.

11
00:00:37.774 --> 00:00:42.408
The cost associated to run the scan could be significant

12
00:00:42.408 --> 00:00:45.030
depending on the amount of items your table has to scan and

13
00:00:45.030 --> 00:00:48.615
how often you need to run the query.

14
00:00:48.615 --> 00:00:52.633
The query function allows you to query items more efficiently.

15
00:00:52.633 --> 00:00:55.141
To be able to use the query function to get items you want,

16
00:00:55.141 --> 00:00:58.421
you need to make sure that you have set the partition and

17
00:00:58.421 --> 00:01:02.208
sort key on the correct attributes.

18
00:01:02.208 --> 00:01:02.632
Remember,

19
00:01:02.632 --> 00:01:06.299
secondary indexes are available to allow you to create second

20
00:01:06.299 --> 00:01:09.023
indexes that allow you to query with different attributes than

21
00:01:09.023 --> 00:01:13.861
what was set when creating your table.

22
00:01:13.861 --> 00:01:15.888
If we head back into the AWS Management Console,

23
00:01:15.888 --> 00:01:19.947
we're going to add some demo data to allow me to show you how we can

24
00:01:19.947 --> 00:01:25.373
scan and query from inside the AWS Management Console.

25
00:01:25.373 --> 00:01:30.656
If we head over to the Items tab, and we select the Create item button,

26
00:01:30.656 --> 00:01:31.573
the two attributes,

27
00:01:31.573 --> 00:01:35.563
UserId and MovieName are the partition and sort key that we set earlier.

28
00:01:35.563 --> 00:01:38.448
I'm going to add a UserId of 1,

29
00:01:38.448 --> 00:01:42.536
and I'm going to make up a MovieName here called Fallen Names.

30
00:01:42.536 --> 00:01:46.107
For the other attributes that we identified as needing for movie rank,

31
00:01:46.107 --> 00:01:48.947
we will need to add the attributes before adding

32
00:01:48.947 --> 00:01:51.868
the associated values for these.

33
00:01:51.868 --> 00:01:54.612
So I'll add a Description for the movie,

34
00:01:54.612 --> 00:01:58.677
and for Actors, we will add this as a type StringSet.

35
00:01:58.677 --> 00:02:03.050
Setting this as a StringSet will store the Actors as a JSON.

36
00:02:03.050 --> 00:02:06.552
Our MovieRank data model also included ranking.

37
00:02:06.552 --> 00:02:10.308
This is the rating that the user thought the movie deserves.

38
00:02:10.308 --> 00:02:13.594
And finally, we'll add RankedDateTime,

39
00:02:13.594 --> 00:02:16.562
so we can track when the movie was ranked by the user.

40
00:02:16.562 --> 00:02:22.811
I've gone ahead and added a few more movies to our database.

41
00:02:22.811 --> 00:02:29.110
UserId 1 has ranked 3 movies, Fallen Names, The Blue Snow, and Triple Prejudice.

42
00:02:29.110 --> 00:02:34.983
UserId 2 has ranked 2 movies, The Blue Snow and The Secret at Purple Hill.

43
00:02:34.983 --> 00:02:40.184
And UserId 3 has ranked 1 movie, The Secret at Purple Hill.

44
00:02:40.184 --> 00:02:42.762
Let's use the Scan function first.

45
00:02:42.762 --> 00:02:43.831
Using the scan function,

46
00:02:43.831 --> 00:02:46.456
we can search our database using any of the

47
00:02:46.456 --> 00:02:50.143
attributes that we have set on our table.

48
00:02:50.143 --> 00:02:52.411
Remember, the scan function is expensive,

49
00:02:52.411 --> 00:02:55.864
and depending on how many items you have in your database,

50
00:02:55.864 --> 00:02:58.612
the scan function could take a long time to complete.

51
00:02:58.612 --> 00:03:02.193
If we add a Filter, and in our filter we're going to say UserId,

52
00:03:02.193 --> 00:03:06.743
we're going to set the type as Number, and we're going to say equals 1.

53
00:03:06.743 --> 00:03:12.365
We select Start search, and we're returned items based on our UserId of 1.

54
00:03:12.365 --> 00:03:18.581
If we now set our Filter to Actors, and we set the type to String,

55
00:03:18.581 --> 00:03:23.223
and we also say Contains Chris West, we hit Start search,

56
00:03:23.223 --> 00:03:29.536
and we're returned actors based on the name Chris West.

57
00:03:29.536 --> 00:03:31.918
Now if we switch to using the Query function,

58
00:03:31.918 --> 00:03:36.260
we are able to query our database on the partition key,

59
00:03:36.260 --> 00:03:38.962
which in our case is UserId.

60
00:03:38.962 --> 00:03:44.032
So we can say UserId 1, and when we click Start search,

61
00:03:44.032 --> 00:03:48.937
we are returned UserId 1's items.

62
00:03:48.937 --> 00:03:51.873
We can optionally add a Sort key as well.

63
00:03:51.873 --> 00:03:55.522
So we can enter Fallen Names, and when we click Start search again,

64
00:03:55.522 --> 00:04:00.740
we are returned UserId 1's items that match the MovieName Fallen Names.

65
00:04:00.740 --> 00:04:06.975
We also set up a secondary index, so we can query on the secondary index as well.

66
00:04:06.975 --> 00:04:12.408
If we enter The Secret at Purple Hill, we are returned 2 items,

67
00:04:12.408 --> 00:04:18.369
1 for UserId 2 and the second for UserId 3.

68
00:04:18.369 --> 00:04:18.705
Remember,

69
00:04:18.705 --> 00:04:22.240
the query function allows you to search your database more

70
00:04:22.240 --> 00:04:25.000
efficiently than if you were to use the scan function.

71
00:04:25.000 --> 00:04:28.438
This is because items are stored and grouped together

72
00:04:28.438 --> 00:04:31.500
based on the partition and sort key.

73
00:04:31.500 --> 00:04:40.000
So your aim is to make sure that any queries that will be done often on your table uses the query function rather than the scan function.

