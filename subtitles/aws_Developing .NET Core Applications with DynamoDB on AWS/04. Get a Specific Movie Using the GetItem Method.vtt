WEBVTT
1
00:00:02.383 --> 00:00:06.452
We now want to add our GetMovie based on the partition key,

2
00:00:06.452 --> 00:00:09.661
userId, and sort key, movieName.

3
00:00:09.661 --> 00:00:13.032
Inside our Controller class, we can leave the existing code as is,

4
00:00:13.032 --> 00:00:17.366
and head over to the MovieRankService class.

5
00:00:17.366 --> 00:00:19.839
Inside our MovieRankService class,

6
00:00:19.839 --> 00:00:23.453
we call off to our Repository class where we store the results we get

7
00:00:23.453 --> 00:00:27.742
back from DynamoDB inside our response variable.

8
00:00:27.742 --> 00:00:32.010
We then map this response into our MovieContract class.

9
00:00:32.010 --> 00:00:36.082
We need to create a new overload method inside our Mapper class.

10
00:00:36.082 --> 00:00:39.845
If we head over to our Mapper class,

11
00:00:39.845 --> 00:00:46.043
we want to create an overload method with a return type of MovieResponse.

12
00:00:46.043 --> 00:00:49.001
For the method's parameters, we want to add GetItemResponse.

13
00:00:49.001 --> 00:00:54.744
Inside this method, we will new up a new MovieResponse class,

14
00:00:54.744 --> 00:00:59.662
and map the objects the same way that we mapped them in the above method.

15
00:00:59.662 --> 00:01:06.280
We added this method to our interface and head over to our Repository class.

16
00:01:06.280 --> 00:01:08.571
Inside our MovieRankRepository class,

17
00:01:08.571 --> 00:01:13.487
we will create a method with a return type of Task GetItemResponse.

18
00:01:13.487 --> 00:01:18.473
This type is from the DynamoDB SDK and is used when we get

19
00:01:18.473 --> 00:01:22.630
items from DynamoDB using the GetItem method.

20
00:01:22.630 --> 00:01:27.576
We will call our method GetMovie, and we'll add two parameters,

21
00:01:27.576 --> 00:01:29.290
userId and movieName.

22
00:01:29.290 --> 00:01:32.268
Inside our method, we want to create a new GetItemRequest.

23
00:01:32.268 --> 00:01:36.010
As mentioned earlier, when using the low-level model,

24
00:01:36.010 --> 00:01:40.400
we need to add a bit more code than we did when using the

25
00:01:40.400 --> 00:01:42.902
Object Persistence and document model wrappers.

26
00:01:42.902 --> 00:01:45.728
Inside our GetItemRequest, we set the TableName,

27
00:01:45.728 --> 00:01:50.489
and we also need to set the Key property.

28
00:01:50.489 --> 00:01:51.786
Inside the Key property,

29
00:01:51.786 --> 00:01:55.082
we new up a Dictionary of type string and AttributeValue.

30
00:01:55.082 --> 00:02:00.120
We need to add to this Dictionary the partition and sort key,

31
00:02:00.120 --> 00:02:03.086
and assign each of these to the parameter arguments that

32
00:02:03.086 --> 00:02:05.691
are being passed into this method.

33
00:02:05.691 --> 00:02:10.695
We'll say squiggly brackets, UserId, new AttributeValue.

34
00:02:10.695 --> 00:02:15.908
Then we'll say N as userId is stored as a number in

35
00:02:15.908 --> 00:02:19.917
our DynamoDB table equals userId.

36
00:02:19.917 --> 00:02:23.628
I mentioned in the previous module that to maximize

37
00:02:23.628 --> 00:02:25.764
compatibility across different languages and libraries,

38
00:02:25.764 --> 00:02:30.036
numbers are sent across the network to DynamoDB as strings,

39
00:02:30.036 --> 00:02:34.226
so we need to add the ToString method.

40
00:02:34.226 --> 00:02:37.925
We will then set our sort key, which is MovieName with a new AttributeValue,

41
00:02:37.925 --> 00:02:43.502
and use S to signify our MovieName as being of type string,

42
00:02:43.502 --> 00:02:46.207
and add our MovieName parameter argument.

43
00:02:46.207 --> 00:02:49.364
Now we've created our GetItemRequest,

44
00:02:49.364 --> 00:02:52.405
we can use the DynamoDB GetItemAsync method,

45
00:02:52.405 --> 00:03:03.000
and pass in the GetItemRequest that we created above. And we'll add this method to our IMovieRankRepository interface.

