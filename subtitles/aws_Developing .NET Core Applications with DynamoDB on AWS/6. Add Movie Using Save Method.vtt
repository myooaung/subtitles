WEBVTT
1
00:00:01.879 --> 00:00:05.192
One of the requirements was to allow a user to add a

2
00:00:05.192 --> 00:00:08.635
movie with their ranking of that movie.

3
00:00:08.635 --> 00:00:10.665
Let's start in our MovieController class.

4
00:00:10.665 --> 00:00:17.107
We'll add an HttpPost attribute with the route that will take in a userId.

5
00:00:17.107 --> 00:00:20.938
We will create a method with a return type of IActionResult,

6
00:00:20.938 --> 00:00:24.427
and call our method, AddMovie.

7
00:00:24.427 --> 00:00:26.560
For the method parameters, we will add our userId,

8
00:00:26.560 --> 00:00:29.864
but we'll also add a FromBody attribute,

9
00:00:29.864 --> 00:00:32.972
along with our MovieRequest contract.

10
00:00:32.972 --> 00:00:36.339
Adding the FromBody attribute will allow us to accept

11
00:00:36.339 --> 00:00:38.858
values from the request a user is making,

12
00:00:38.858 --> 00:00:44.896
and match these to the properties that are in our MovieRankRequest contract.

13
00:00:44.896 --> 00:00:49.324
Let's add some properties to our MovieRankRequest class.

14
00:00:49.324 --> 00:00:57.934
We'll add the following, MovieName, Description, Actors, and Ranking.

15
00:00:57.934 --> 00:01:02.345
These are all properties that will accept as part of our AddMovieRequest.

16
00:01:02.345 --> 00:01:04.909
Heading back to our MovieController class,

17
00:01:04.909 --> 00:01:10.962
we want to call off to our MovieRankService class to a method named AddMovie.

18
00:01:10.962 --> 00:01:13.862
We'll pass in the UserId and the MovieRankRequest.

19
00:01:13.862 --> 00:01:22.731
When that has completed successfully, we will return OK.

20
00:01:22.731 --> 00:01:24.802
Inside our MovieRankService class,

21
00:01:24.802 --> 00:01:29.521
we'll create a method AddMovie that has two parameters,

22
00:01:29.521 --> 00:01:32.409
userId and MovieRankRequest.

23
00:01:32.409 --> 00:01:32.810
Previously,

24
00:01:32.810 --> 00:01:37.370
we we're mapping our response that we were getting back from

25
00:01:37.370 --> 00:01:39.802
DynamoDB into our MovieResponse contract.

26
00:01:39.802 --> 00:01:46.256
Here we want to map our userId and the MovieRankRequest into the MovieDb model,

27
00:01:46.256 --> 00:01:49.932
ready to pass into DynamoDB.

28
00:01:49.932 --> 00:01:50.788
Inside our method,

29
00:01:50.788 --> 00:01:54.154
we will call off to our mapper to a method inside

30
00:01:54.154 --> 00:01:55.745
our mapper called ToMovieDbModel,

31
00:01:55.745 --> 00:02:02.271
and pass in the userId and the MovieRankRequest.

32
00:02:02.271 --> 00:02:03.536
We haven't yet got this method inside our mapper,

33
00:02:03.536 --> 00:02:08.073
so let's head over to our Mapper class and add it.

34
00:02:08.073 --> 00:02:15.074
We will create a method with a return type of MovieDb named ToMovieDbModel,

35
00:02:15.074 --> 00:02:21.332
with the userId and MovieRankRequest as parameters.

36
00:02:21.332 --> 00:02:24.726
Inside our method, we will return a new MovieDb,

37
00:02:24.726 --> 00:02:28.153
and we'll add in the code that will take in the

38
00:02:28.153 --> 00:02:33.473
parameter arguments from our method, and map them into our MovieDb model.

39
00:02:33.473 --> 00:02:38.826
You'll notice that for RankedDateTime, I'm using DateTime.UtcNow.

40
00:02:38.826 --> 00:02:44.012
This will take the time that the request was made and add it to our

41
00:02:44.012 --> 00:02:47.640
RankedDateTime property inside our MovieDb model.

42
00:02:47.640 --> 00:02:53.895
We need to add the system using statement to allow us to use DateTime.

43
00:02:53.895 --> 00:02:56.331
And we'll also add our method to the IMapper interface.

44
00:02:56.331 --> 00:03:01.714
Now that we have met our request into our MovieDb model,

45
00:03:01.714 --> 00:03:06.337
we will call off to our MovieRankRepository class to a method named AddMovie,

46
00:03:06.337 --> 00:03:10.518
and pass in the movieDb model.

47
00:03:10.518 --> 00:03:15.377
And we'll also add our method to our interface.

48
00:03:15.377 --> 00:03:18.203
Heading over to our MovieRankRepository class,

49
00:03:18.203 --> 00:03:22.105
we need to create a method named AddMovie that

50
00:03:22.105 --> 00:03:25.832
accepts our MovieDb as a parameter.

51
00:03:25.832 --> 00:03:30.421
Using our DynamoDB context, we'll be using the SaveAsync function,

52
00:03:30.421 --> 00:03:33.462
and we'll pass in movieDb.

53
00:03:33.462 --> 00:03:37.804
And we'll also add this method to our interface.

54
00:03:37.804 --> 00:03:45.617
If we save our application and then build it, we can now run our application.

55
00:03:45.617 --> 00:03:47.925
Inside Postman, we will add our localhost,

56
00:03:47.925 --> 00:03:54.971
along with our route of movies, and pass in the userId that is adding the movie.

57
00:03:54.971 --> 00:03:57.964
We want to set this request to be a POST,

58
00:03:57.964 --> 00:04:02.080
and we also want to add values into the body of our request.

59
00:04:02.080 --> 00:04:05.750
This matches the properties that we added to our

60
00:04:05.750 --> 00:04:09.164
MovieRankRequest class inside our application.

61
00:04:09.164 --> 00:04:12.069
So we'll add movieName Fast Draw, a description,

62
00:04:12.069 --> 00:04:16.824
the actors in the movie, and the ranking.

63
00:04:16.824 --> 00:04:22.849
We'll hit Send, and we get an OK 200 status back.

64
00:04:22.849 --> 00:04:29.402
We'll ensure that we've saved our request into our MovieRank collection.

65
00:04:29.402 --> 00:04:31.775
Let's use our GetMovieRequest that we created earlier to

66
00:04:31.775 --> 00:04:39.297
make sure that this movie has been added.

67
00:04:39.297 --> 00:04:39.534
Awesome.

68
00:04:39.534 --> 00:04:46.000
We've added our movie, and we can see we're returned the movie that we just added.

