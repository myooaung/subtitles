WEBVTT
1
00:00:01.968 --> 00:00:07.208
We will add all endpoints this time before testing each of them in Postman.

2
00:00:07.208 --> 00:00:09.777
Let's start off with the first endpoint that we created when

3
00:00:09.777 --> 00:00:12.450
implementing the Object Persistence model,

4
00:00:12.450 --> 00:00:15.089
the GetAllItemsFromDatabase.

5
00:00:15.089 --> 00:00:19.215
Starting off in the Controller, this code remains the same.

6
00:00:19.215 --> 00:00:21.885
Heading through to our MovieService class,

7
00:00:21.885 --> 00:00:25.516
the only thing that we have to add is the code to map our response that

8
00:00:25.516 --> 00:00:30.598
we get back from DynamoDB into our MovieContract.

9
00:00:30.598 --> 00:00:32.636
Let's head into our Mapper class,

10
00:00:32.636 --> 00:00:39.074
and we'll add a method that has a return type of IEnumerableMovieResponse.

11
00:00:39.074 --> 00:00:40.913
We'll call this method ToMovieContract,

12
00:00:40.913 --> 00:00:44.549
and pass in the IEnumerable of type Document.

13
00:00:44.549 --> 00:00:48.348
The Document type is from the DynamoDB's SDK.

14
00:00:48.348 --> 00:00:50.089
When using the document model,

15
00:00:50.089 --> 00:00:55.787
this is what is returned back to us when we call off to our DynamoDB table,

16
00:00:55.787 --> 00:00:56.658
MovieRank.

17
00:00:56.658 --> 00:01:00.121
We need to ensure that we add the Document model using statement.

18
00:01:00.121 --> 00:01:06.394
Using link, we will say items.Select, and we'll call off to a separate method.

19
00:01:06.394 --> 00:01:10.546
We do this as the document model as it stands is an IEnumerable,

20
00:01:10.546 --> 00:01:13.798
so we'll get back a document collection.

21
00:01:13.798 --> 00:01:20.377
We want to go through each item and map each item to a single movie response.

22
00:01:20.377 --> 00:01:24.563
Our second method that we'll be calling off to will have a return type

23
00:01:24.563 --> 00:01:27.347
of MovieResponse and have the same name as above.

24
00:01:27.347 --> 00:01:32.350
This is called an overload method, where we have the same method name,

25
00:01:32.350 --> 00:01:33.648
but pass in different parameters.

26
00:01:33.648 --> 00:01:36.288
Inside our method, we'll return a new MovieResponse,

27
00:01:36.288 --> 00:01:41.411
and map each of the items that are in our MovieResponseContract.

28
00:01:41.411 --> 00:01:45.587
For MovieName, to get our items back from DynamoDB's document model,

29
00:01:45.587 --> 00:01:49.808
we say item, open square brackets, MovieName.

30
00:01:49.808 --> 00:01:53.335
The names in the square brackets correspond to the property

31
00:01:53.335 --> 00:01:57.170
names we have set in our DynamoDB table,

32
00:01:57.170 --> 00:01:58.522
MovieRank.

33
00:01:58.522 --> 00:02:00.348
We'll map the rest of our objects, Description,

34
00:02:00.348 --> 00:02:04.326
for Actors, because this is a complex type,

35
00:02:04.326 --> 00:02:10.441
we want to use .AsListOfString to allow us to map the list of actors

36
00:02:10.441 --> 00:02:15.902
we get back from DynamoDB into our Actors property.

37
00:02:15.902 --> 00:02:18.743
Ranking, we'll convert this to an int.

38
00:02:18.743 --> 00:02:23.251
You might be wondering why we need to convert our Ranking to an int when

39
00:02:23.251 --> 00:02:26.578
Ranking was set as a number when creating our DynamoDB table.

40
00:02:26.578 --> 00:02:27.150
Well,

41
00:02:27.150 --> 00:02:30.548
that's because to maximize compatibility across

42
00:02:30.548 --> 00:02:32.456
different languages and libraries,

43
00:02:32.456 --> 00:02:38.119
numbers are sent across the network to DynamoDB as strings.

44
00:02:38.119 --> 00:02:42.103
The reason for setting a number in DynamoDB over just setting a string

45
00:02:42.103 --> 00:02:46.621
is to allow us to perform mathematical operations.

46
00:02:46.621 --> 00:02:47.696
And finally TimeRanked,

47
00:02:47.696 --> 00:02:53.569
we want to add these two methods to our IMapper interface,

48
00:02:53.569 --> 00:02:58.995
and add the DynamoDBv2.DocumentModel using statement.

49
00:02:58.995 --> 00:03:02.279
Inside our MovieRankRepository class,

50
00:03:02.279 --> 00:03:05.476
we will create a constant at the top of our class that

51
00:03:05.476 --> 00:03:09.065
will store our table name MovieRank.

52
00:03:09.065 --> 00:03:11.599
When working with DynamoDB's Object Persistence model,

53
00:03:11.599 --> 00:03:15.948
we were using the DynamoDBContext to scan,

54
00:03:15.948 --> 00:03:18.851
query, get, and add items.

55
00:03:18.851 --> 00:03:26.343
When using the document model, we'll be using DynamoDB's Table class.

56
00:03:26.343 --> 00:03:32.192
We will create a field at the top of our class of type Table named table.

57
00:03:32.192 --> 00:03:39.370
We need to ensure we have the DynamoDBv2.DocumentModel using statement.

58
00:03:39.370 --> 00:03:43.237
We will create a constructor and pass in our IAmazonDynamoDB

59
00:03:43.237 --> 00:03:48.537
client that we set up in our Startup class when creating our

60
00:03:48.537 --> 00:03:51.746
MovieRankApplication template.

61
00:03:51.746 --> 00:03:57.317
We'll also ensure that we've added the DynamoDBv2 using statement.

62
00:03:57.317 --> 00:04:03.742
Inside our constructor, we will say table equals Table.LoadTable.

63
00:04:03.742 --> 00:04:05.852
The LoadTable method takes in two parameters,

64
00:04:05.852 --> 00:04:09.469
the dynamoDbClient and the Table name.

65
00:04:09.469 --> 00:04:12.570
Now that we have our table loaded up,

66
00:04:12.570 --> 00:04:17.871
we can create our method to get all items from our database.

67
00:04:17.871 --> 00:04:25.309
We will create a method with the return type of Task IEnumerable Document,

68
00:04:25.309 --> 00:04:27.562
and name our method GetAllItems.

69
00:04:27.562 --> 00:04:32.033
Inside our method, we need to create a scan operation config object,

70
00:04:32.033 --> 00:04:37.754
we'll be using the scan method, so we'll say table.Scan,

71
00:04:37.754 --> 00:04:40.987
and pass in the config that we created above.

72
00:04:40.987 --> 00:04:43.770
Like with the Object Persistence model,

73
00:04:43.770 --> 00:04:47.289
we will add the GetRemainingAsync method to tell

74
00:04:47.289 --> 00:04:50.966
DynamoDB to give us all items back.

75
00:04:50.966 --> 00:05:00.000
We will ensure that this method has been added to our interface, and we'll ensure we've added the document model using statement.

