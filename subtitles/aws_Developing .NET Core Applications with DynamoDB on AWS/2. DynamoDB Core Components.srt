1
00:00:01,330 --> 00:00:03,833
Let's have a look at some of the core components of DynamoDB,

2
00:00:03,833 --> 00:00:09,344
so we understand DynamoDB's terminology and how it's all pieced together.

3
00:00:09,344 --> 00:00:14,158
DynamoDB stores data in tables similar to other databases.

4
00:00:14,158 --> 00:00:17,762
A table stores a collection of data.

5
00:00:17,762 --> 00:00:21,143
Each item is then composed of one or many attributes,

6
00:00:21,143 --> 00:00:24,886
in our case we have UserId, MovieName, Description,

7
00:00:24,886 --> 00:00:29,211
Actors, RankedDateTime, and Ranking.

8
00:00:29,211 --> 00:00:32,225
Each table can contain 0 or many items.

9
00:00:32,225 --> 00:00:35,210
Items are similar to rows in a SQL database.

10
00:00:35,210 --> 00:00:40,401
In our case, we have one item, UserId 1 and MovieName,

11
00:00:40,401 --> 00:00:43,757
The Secret at Purple Hill.

12
00:00:43,757 --> 00:00:49,223
The partition key, which is sometimes referred to as the hash key is mandatory.

13
00:00:49,223 --> 00:00:52,901
In our case here, we could set the UserId as our partition key.

14
00:00:52,901 --> 00:00:56,147
All items that have the same partition key are

15
00:00:56,147 --> 00:00:58,402
stored together behind the scenes.

16
00:00:58,402 --> 00:01:02,328
The sort key can be used in conjunction with the partition key.

17
00:01:02,328 --> 00:01:06,215
In our case, we are setting MovieName as the sort key.

18
00:01:06,215 --> 00:01:11,295
We could set any of our other attributes as the sort or partition key.

19
00:01:11,295 --> 00:01:12,414
When creating the sort key,

20
00:01:12,414 --> 00:01:17,021
this allows us to query data that is related to the partition key.

21
00:01:17,021 --> 00:01:24,080
We can use such filters as begins with, between, greater than, etc.

22
00:01:24,080 --> 00:01:26,960
Each table that is created must have a primary key.

23
00:01:26,960 --> 00:01:30,890
The primary key is set by either having a partition key by itself,

24
00:01:30,890 --> 00:01:34,544
and in this case we have set the UserId as the primary key.

25
00:01:34,544 --> 00:01:38,304
Or we can create a primary key using a combination of

26
00:01:38,304 --> 00:01:41,664
the partition key and sort key.

27
00:01:41,664 --> 00:01:46,434
When using the partition and sort key, this is called a composite primary key.

28
00:01:46,434 --> 00:01:49,978
If you're only using the partition key as the primary key,

29
00:01:49,978 --> 00:01:52,499
then this must be unique.

30
00:01:52,499 --> 00:01:55,178
If you are using a combination of the partition and

31
00:01:55,178 --> 00:01:57,012
sort key as your primary key,

32
00:01:57,012 --> 00:02:02,284
then both of these values must make up a unique value.

33
00:02:02,284 --> 00:02:05,564
To efficiently find your data in DynamoDB,

34
00:02:05,564 --> 00:02:08,530
sometimes you need to query data using an attribute that is

35
00:02:08,530 --> 00:02:12,342
not your primary or composite primary key.

36
00:02:12,342 --> 00:02:17,187
DynamoDB offers a way to achieve this by offering secondary indexes.

37
00:02:17,187 --> 00:02:21,705
You are able to create a secondary index with either a different sort key based

38
00:02:21,705 --> 00:02:25,257
on the partition key that you set when creating your table,

39
00:02:25,257 --> 00:02:31,127
or you can create a different partition and optional sort key.

40
00:02:31,127 --> 00:02:34,664
There are two types of secondary indexes that we can create.

41
00:02:34,664 --> 00:02:39,314
A local secondary index is where you use the partition key that

42
00:02:39,314 --> 00:02:41,403
you have specified when creating your table.

43
00:02:41,403 --> 00:02:43,762
You can then choose any of the other attributes in

44
00:02:43,762 --> 00:02:46,730
your table to be the sort key.

45
00:02:46,730 --> 00:02:51,518
A global second index is where you specify a different partition key and

46
00:02:51,518 --> 00:02:55,508
optional sort key from the attributes in your table.

47
00:02:55,508 --> 00:02:58,428
You are able to create up to five global secondary indexes and

48
00:02:58,428 --> 00:03:03,186
up to five local secondary indexes per table.

49
00:03:03,186 --> 00:03:04,831
You should be careful when creating the secondary indexes.

50
00:03:04,831 --> 00:03:06,745
They come at a cost,

51
00:03:06,745 --> 00:03:11,679
so don't create secondary indexes on attributes that you don't query often.

52
00:03:11,679 --> 00:03:15,869
They will contribute to increased storage and input/output costs that

53
00:03:15,869 --> 00:03:20,783
will not improve your application's performance.

54
00:03:20,783 --> 00:03:23,951
There is one last concept that I think is important to understand and that

55
00:03:23,951 --> 00:03:27,920
is eventually consistent and strongly consistent reads.

56
00:03:27,920 --> 00:03:32,801
AWS is available in many different regions around the world.

57
00:03:32,801 --> 00:03:34,352
We spoke about regions earlier.

58
00:03:34,352 --> 00:03:38,002
We'll be creating our DynamoDB table in the region Oregon.

59
00:03:38,002 --> 00:03:42,839
Inside of each region is what is called availability zones.

60
00:03:42,839 --> 00:03:48,195
These are distinct locations that help isolate us from failures.

61
00:03:48,195 --> 00:03:49,979
If one availability zone went down,

62
00:03:49,979 --> 00:03:56,340
we can still access our services and data from the other availability zones.

63
00:03:56,340 --> 00:04:01,374
When we write data to DynamoDB, it is copied across multiple availability zones.

64
00:04:01,374 --> 00:04:06,859
If we were to write data to DynamoDB, then immediately read the data,

65
00:04:06,859 --> 00:04:09,124
there is the potential to get the response back that doesn't

66
00:04:09,124 --> 00:04:12,843
reflect the recently-completed write operation.

67
00:04:12,843 --> 00:04:16,177
The response might include some stale data.

68
00:04:16,177 --> 00:04:18,784
If we were to repeat the call shortly after,

69
00:04:18,784 --> 00:04:21,214
you should get the latest results back.

70
00:04:21,214 --> 00:04:24,510
This is called eventual consistency.

71
00:04:24,510 --> 00:04:26,830
Normally this copy happens pretty fast,

72
00:04:26,830 --> 00:04:29,384
so you don't need to worry about eventual consistency; however,

73
00:04:29,384 --> 00:04:34,643
if you have an application writing and another reading the data,

74
00:04:34,643 --> 00:04:36,983
and you must get the latest data back,

75
00:04:36,983 --> 00:04:47,000
then there are options that we can set to ensure strong consistency when reading the data back from DynamoDB.

