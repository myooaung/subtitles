WEBVTT
1
00:00:01.140 --> 00:00:04.190
Creating a test client is quite easy now that we're

2
00:00:04.190 --> 00:00:06.170
using the WebApplicationFactory.

3
00:00:06.170 --> 00:00:12.540
Let's first create a folder named Scenarios and a class

4
00:00:12.540 --> 00:00:16.600
inside this folder named MovieTests.

5
00:00:16.600 --> 00:00:20.610
This is the class where we'll be adding our tests to.

6
00:00:20.610 --> 00:00:21.830
Inside this class,

7
00:00:21.830 --> 00:00:25.870
we want to add our Collection attribute with the name that we

8
00:00:25.870 --> 00:00:28.420
gave inside our CollectionFixture class,

9
00:00:28.420 --> 00:00:30.540
api.

10
00:00:30.540 --> 00:00:33.060
We want to inherit our CustomWebApplicationFactory,

11
00:00:33.060 --> 00:00:40.340
so we can say IClassFixture CustomWebApplicationFactory,

12
00:00:40.340 --> 00:00:46.240
and also pass through our Solution Startup class.

13
00:00:46.240 --> 00:00:51.020
If we create a constructor, we need to add the CustomWebApplicationFactory,

14
00:00:51.020 --> 00:00:54.560
and then we want to register our client.

15
00:00:54.560 --> 00:00:58.290
We can register our client by creating a field at the

16
00:00:58.290 --> 00:01:02.240
top of our class called _client.

17
00:01:02.240 --> 00:01:09.440
And in our constructor, we can say _client = factory.CreateClient.

18
00:01:09.440 --> 00:01:14.470
Our HTTP setup is ready to use.

19
00:01:14.470 --> 00:01:21.140
For our first test, we will add TestData to our local DynamoDB table.

20
00:01:21.140 --> 00:01:22.820
We will add the fact attribute.

21
00:01:22.820 --> 00:01:27.240
This is what XUnit requires above each test method.

22
00:01:27.240 --> 00:01:32.640
We will name this test AddMovieRankDataReturnsOkStatus.

23
00:01:32.640 --> 00:01:37.040
We will have a few using statements to add while writing out the code.

24
00:01:37.040 --> 00:01:39.540
I'm just going to add them as we go.

25
00:01:39.540 --> 00:01:41.360
If you have been following the course,

26
00:01:41.360 --> 00:01:44.140
I've been adding and explaining them as we go,

27
00:01:44.140 --> 00:01:48.540
so you should have a good understanding on adding using statements.

28
00:01:48.540 --> 00:01:51.640
We will create a new movieDB.

29
00:01:51.640 --> 00:01:56.540
This is the model that we want to pass into our AddMovies post request.

30
00:01:56.540 --> 00:02:01.140
We will set TestData against our movieDB properties.

31
00:02:01.140 --> 00:02:08.140
The HttpClient PostAsync method expects an HTTP content to be passed in.

32
00:02:08.140 --> 00:02:12.540
First we need to convert our movieDB into JSON.

33
00:02:12.540 --> 00:02:16.380
We do this using JsonConvert and passing in our test

34
00:02:16.380 --> 00:02:19.340
movieDB model that we have just created.

35
00:02:19.340 --> 00:02:19.840
Then,

36
00:02:19.840 --> 00:02:23.370
we want to create a stringContent that will be used

37
00:02:23.370 --> 00:02:26.340
to add into our PostAsync method.

38
00:02:26.340 --> 00:02:29.140
We will new up a new StringContent,

39
00:02:29.140 --> 00:02:34.540
and inside this method's parentheses we will pass in our json object.

40
00:02:34.540 --> 00:02:39.320
We will set the Encoding of our StringContent to be UTF8 and

41
00:02:39.320 --> 00:02:42.760
the media type to be application/json.

42
00:02:42.760 --> 00:02:48.740
Using our TestContext that we have just injected into our class,

43
00:02:48.740 --> 00:02:53.740
we will say _____ .client.PostAsync.

44
00:02:53.740 --> 00:02:58.170
We are already given a base address that we set when creating our client,

45
00:02:58.170 --> 00:03:03.020
so we now just need to add our route that is movies/{userId},

46
00:03:03.020 --> 00:03:07.640
and pass in the stringContent.

47
00:03:07.640 --> 00:03:09.930
We want to assert on the response.

48
00:03:09.930 --> 00:03:15.360
For now, we will create one assert that asserts that we get an OK status back.

49
00:03:15.360 --> 00:03:19.080
We can say Assert.Equal(HttpStatusCode.Ok.

50
00:03:19.080 --> 00:03:23.180
This is our expected response,

51
00:03:23.180 --> 00:03:29.340
and then add the actual response that we get back from the response.StatusCode.

52
00:03:29.340 --> 00:03:32.500
Let's run our test to make sure it passes.

53
00:03:32.500 --> 00:03:34.970
If we head over to Visual Studio's menu,

54
00:03:34.970 --> 00:03:38.140
test Windows Test Explorer,

55
00:03:38.140 --> 00:03:41.940
This opens up the Test Explorer window with all of our tests.

56
00:03:41.940 --> 00:03:47.640
At the moment, we only have one, the AddMovieRankDataReturnsOkStatus.

57
00:03:47.640 --> 00:03:50.940
Let's run that.

58
00:03:50.940 --> 00:03:52.940
Great, our first test has passed.

59
00:03:52.940 --> 00:03:58.340
When running this test, it is downloaded and run the local DynamoDB instance.

60
00:03:58.340 --> 00:04:05.000
We've spun up a test server, and then called out to our application's AddMovie endpoint.

