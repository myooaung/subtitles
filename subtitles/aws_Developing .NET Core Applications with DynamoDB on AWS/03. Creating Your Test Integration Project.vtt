WEBVTT
1
00:00:01.940 --> 00:00:02.960
In our demo,

2
00:00:02.960 --> 00:00:06.770
we'll be starting off by creating an integration test project

3
00:00:06.770 --> 00:00:10.030
inside our movie ranks solution that we created when

4
00:00:10.030 --> 00:00:12.790
implementing the object persistence model.

5
00:00:12.790 --> 00:00:16.590
We'll be installing the necessary NuGet packages that we

6
00:00:16.590 --> 00:00:19.830
need in order to run our integration tests.

7
00:00:19.830 --> 00:00:22.970
We create a collection fixture class.

8
00:00:22.970 --> 00:00:26.310
This is an xUnit‑specific class that allows us to

9
00:00:26.310 --> 00:00:28.780
run code before running our tests.

10
00:00:28.780 --> 00:00:33.240
Here we'll download and run a local version of DynamoDB

11
00:00:33.240 --> 00:00:36.640
using the library called Docker.DotNet.

12
00:00:36.640 --> 00:00:40.440
We also create a custom web application factory.

13
00:00:40.440 --> 00:00:45.240
This will allow us to override and face implementations with test versions.

14
00:00:45.240 --> 00:00:46.130
For example,

15
00:00:46.130 --> 00:00:51.200
the IAmazonDynamoDB interface will register this against the local

16
00:00:51.200 --> 00:00:56.340
version of DynamoDB when running our integration tests.

17
00:00:56.340 --> 00:00:57.980
Once we have everything set up,

18
00:00:57.980 --> 00:01:01.420
we then create a bunch of tests that will test each of our

19
00:01:01.420 --> 00:01:05.990
endpoints that we created in the working with items in DynamoDB

20
00:01:05.990 --> 00:01:08.930
using the object persistence model module.

21
00:01:08.930 --> 00:01:14.050
We'll be adding the test to our solution that we created in the working with

22
00:01:14.050 --> 00:01:19.240
items in Dynamodb using the object persistence model module.

23
00:01:19.240 --> 00:01:23.850
We'll start off by creating a folder inside our Solution named Tests.

24
00:01:23.850 --> 00:01:27.450
Inside this folder, we'll right‑click and select Add,

25
00:01:27.450 --> 00:01:32.340
New Project, and we want to add the xUnit Test Project.

26
00:01:32.340 --> 00:01:37.240
We will call our project MovieRank.Integration.Tests.

27
00:01:37.240 --> 00:01:39.770
By default, we're given a class named UnitTest1.

28
00:01:39.770 --> 00:01:42.570
For now, we'll delete this.

29
00:01:42.570 --> 00:01:48.040
In order to test our MovieRank application, we'll be spinning this up in memory.

30
00:01:48.040 --> 00:01:52.410
We want to install a couple of NuGet packages that will allow us to do this.

31
00:01:52.410 --> 00:01:55.740
If we head along to Package Manager Console,

32
00:01:55.740 --> 00:01:58.590
we select the project that we want to install these packages

33
00:01:58.590 --> 00:02:04.080
into as MovieRank.Integration.Tests and say install‑package

34
00:02:04.080 --> 00:02:10.340
microsoft.aspnetcore.mvc.testing.

35
00:02:10.340 --> 00:02:14.030
We also want to install the Docker.DotNet.

36
00:02:14.030 --> 00:02:21.000
This is going to allow us to spin up our local instance of DynamoDB when running our tests.

