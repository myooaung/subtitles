WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.020 --> 00:00:04.545
Let's try and understand
what is a good snapshot.

00:00:04.545 --> 00:00:07.590
Earlier we had created
a project where we had

00:00:07.590 --> 00:00:10.170
couple of files in the root
directory of the project.

00:00:10.170 --> 00:00:12.435
And then we also
have sub directory

00:00:12.435 --> 00:00:15.465
inside which we have
couple of more files.

00:00:15.465 --> 00:00:18.270
If you could recollect from
our previous lectures.

00:00:18.270 --> 00:00:20.160
This was the object structure we

00:00:20.160 --> 00:00:22.740
had when we made
our first commit.

00:00:22.740 --> 00:00:24.960
Let me simplify this diagram

00:00:24.960 --> 00:00:27.030
so that it looks more compact.

00:00:27.030 --> 00:00:30.015
Now let us assume that I have
introduced another file,

00:00:30.015 --> 00:00:34.305
c3 dot dxdy with the following
text hello from getting.

00:00:34.305 --> 00:00:36.150
And I kept this inside

00:00:36.150 --> 00:00:40.005
the root project directory,
stays this file.

00:00:40.005 --> 00:00:42.295
And then I committed
the changes.

00:00:42.295 --> 00:00:46.670
Now can you visualize how the
objects structure would be?

00:00:46.670 --> 00:00:49.800
For the second commit we make?

00:00:49.810 --> 00:00:53.135
Do you imagine
something like this?

00:00:53.135 --> 00:00:54.725
So we have a new blob

00:00:54.725 --> 00:00:56.690
created for the newly
introduced file.

00:00:56.690 --> 00:00:58.145
In addition to that,

00:00:58.145 --> 00:01:00.020
do you expect get to create

00:01:00.020 --> 00:01:03.275
Blobs for each and every
file in the project?

00:01:03.275 --> 00:01:06.780
The answer is, of course no.

00:01:06.850 --> 00:01:10.760
Instead, git will create
a blog for the new file.

00:01:10.760 --> 00:01:13.160
And the root tree object of

00:01:13.160 --> 00:01:16.325
the new commit will hold
the hash of that new blob.

00:01:16.325 --> 00:01:18.095
And for all the other files,

00:01:18.095 --> 00:01:21.485
since they remained as
is and are not modified,

00:01:21.485 --> 00:01:23.330
git will just simply refer to

00:01:23.330 --> 00:01:26.990
their existing blobs
and three objects.

00:01:26.990 --> 00:01:29.090
In essence, the contents of

00:01:29.090 --> 00:01:30.590
the tree object
and second column,

00:01:30.590 --> 00:01:33.065
it would be exactly same as

00:01:33.065 --> 00:01:35.975
the condenser of the tree
object in our first commit,

00:01:35.975 --> 00:01:38.900
except there'll be
one additional entry

00:01:38.900 --> 00:01:40.910
for the newly introduced file.

00:01:40.910 --> 00:01:42.845
In addition to that,

00:01:42.845 --> 00:01:45.920
they commit object will
also hold the difference or

00:01:45.920 --> 00:01:47.990
the hashCode of the
previous commit

00:01:47.990 --> 00:01:50.495
or its parent come at.

00:01:50.495 --> 00:01:54.380
You will know the significance
of this in later chapters.

00:01:54.380 --> 00:01:56.960
So what is this snapshot here?

00:01:56.960 --> 00:01:59.570
Well, essentially every
time you make a commit,

00:01:59.570 --> 00:02:02.570
you're taking a snapshot of
the state of the index or

00:02:02.570 --> 00:02:05.930
the staging area at the
time you make the commit.

00:02:05.930 --> 00:02:08.300
It essentially captures what

00:02:08.300 --> 00:02:11.705
every file looked like at the
time you make the commit.

00:02:11.705 --> 00:02:13.550
If you were to go back in

00:02:13.550 --> 00:02:15.860
time to one of the
previous commit,

00:02:15.860 --> 00:02:19.430
git will have the ability
to restore all the files in

00:02:19.430 --> 00:02:21.140
your working directory to

00:02:21.140 --> 00:02:23.495
what they were when
you made the comment.

00:02:23.495 --> 00:02:25.189
How is that possible?

00:02:25.189 --> 00:02:27.590
It's because of the snapshot.

00:02:27.590 --> 00:02:31.560
Now let's see all
this in practice.

00:02:31.990 --> 00:02:36.635
I'm inside our good
old my app folder.

00:02:36.635 --> 00:02:40.260
Let me go ahead and
create a new file.

00:02:49.300 --> 00:02:51.770
So we have three dot dx,

00:02:51.770 --> 00:02:53.525
dy with some text in it.

00:02:53.525 --> 00:03:01.140
Git add git commit.

00:03:03.880 --> 00:03:09.750
Second commit. Finally, we're
making a second comment.

00:03:09.790 --> 00:03:12.020
Now let us go ahead and explore

00:03:12.020 --> 00:03:14.240
the commit and three objects.

00:03:14.240 --> 00:03:16.490
I'll do git log to take

00:03:16.490 --> 00:03:18.980
a look at all the
list of commits.

00:03:18.980 --> 00:03:21.980
And by the way, talking
about the parent combat,

00:03:21.980 --> 00:03:24.230
when we run this
command git log,

00:03:24.230 --> 00:03:28.490
it has displayed the details
about our recent commit.

00:03:28.490 --> 00:03:31.490
And then this comment object is

00:03:31.490 --> 00:03:34.835
having the details of its
parent commit, which is this.

00:03:34.835 --> 00:03:40.460
And so git will proceed and
display its details as well.

00:03:40.460 --> 00:03:42.440
For this commit though,

00:03:42.440 --> 00:03:44.840
since this is the very
first commit we made,

00:03:44.840 --> 00:03:47.970
it doesn't have any
parent commits.

00:03:48.250 --> 00:03:52.639
And so this command
will stop executing.

00:03:52.639 --> 00:03:55.910
Anyway, you'll understand
more about parent commits

00:03:55.910 --> 00:03:57.875
and coming chapters.

00:03:57.875 --> 00:04:02.600
So let's go ahead and
explore what's inside out.

00:04:02.600 --> 00:04:04.620
Recent commit.

00:04:04.900 --> 00:04:09.300
Get kept file, hyphen P.

00:04:10.600 --> 00:04:13.700
And as you can see,

00:04:13.700 --> 00:04:17.660
we have the hashCode of
the root tree object.

00:04:17.660 --> 00:04:20.075
In addition to
that, we also have

00:04:20.075 --> 00:04:24.230
the hashCode of the parent
commit, which is this.

00:04:24.230 --> 00:04:27.335
And then author
information, et cetera.

00:04:27.335 --> 00:04:31.140
Let's see what's
inside this file.

00:04:35.620 --> 00:04:40.380
So here are the contents
of the tree object.

00:04:42.520 --> 00:04:44.750
Let's compare it with

00:04:44.750 --> 00:04:49.590
the tree object of
our first connect.

00:05:06.010 --> 00:05:10.400
If you notice, the hashCode

00:05:10.400 --> 00:05:13.890
of the sub tree object
is exactly same.

00:05:14.290 --> 00:05:19.400
Hashcode of one dot dx
dy and dx dy are exactly

00:05:19.400 --> 00:05:21.830
same except for the

00:05:21.830 --> 00:05:24.920
newly introduced to
file three dot dx dy.

00:05:24.920 --> 00:05:27.600
So that explains.
