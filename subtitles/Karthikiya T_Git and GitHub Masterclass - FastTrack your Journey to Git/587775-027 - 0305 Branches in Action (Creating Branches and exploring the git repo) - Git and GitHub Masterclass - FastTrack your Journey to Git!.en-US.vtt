WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.215
Okay, Let us see branches in
action with a quick example.

00:00:04.215 --> 00:00:07.320
Once again, I'll create
a new folder, my app,

00:00:07.320 --> 00:00:08.400
and this is where we're going to

00:00:08.400 --> 00:00:11.800
experiment everything
about branches.

00:00:11.990 --> 00:00:15.345
I'm going to launch
Git Bash here.

00:00:15.345 --> 00:00:19.095
Let me create one file
committed on the master branch.

00:00:19.095 --> 00:00:22.125
And we're going to
start from there.

00:00:22.125 --> 00:00:25.590
I'm going to get
initialized the project.

00:00:25.590 --> 00:00:30.750
And then touch one dot
TXT to create that file.

00:00:30.750 --> 00:00:35.190
Git add one dot TXT
to stay as that file.

00:00:35.190 --> 00:00:37.754
And before I commit the changes,

00:00:37.754 --> 00:00:44.260
let me take you to get
refs, heads directory.

00:00:44.260 --> 00:00:48.680
This is where it would
create list often branches.

00:00:49.290 --> 00:00:52.015
Let me go back to Git Bash

00:00:52.015 --> 00:00:54.385
and let me comment this change.

00:00:54.385 --> 00:00:57.290
Git commit hyphen m.

00:00:59.160 --> 00:01:06.370
First commit in
the master branch.

00:01:06.370 --> 00:01:08.649
The moment I commit
these changes,

00:01:08.649 --> 00:01:13.225
you're going to see a new
file being created by gaped.

00:01:13.225 --> 00:01:16.765
Let's take a look at
what's inside this file.

00:01:16.765 --> 00:01:18.310
To take note of the name of

00:01:18.310 --> 00:01:20.095
the file is the
name of the branch,

00:01:20.095 --> 00:01:23.230
the default branch that
God has created for us.

00:01:23.230 --> 00:01:27.155
It's master. And the hashCode

00:01:27.155 --> 00:01:31.460
is the hashCode of the
commit that we've just done.

00:01:31.460 --> 00:01:38.345
If I go back to Git
Bash and do git log,

00:01:38.345 --> 00:01:41.570
the hashCode that
you see here is

00:01:41.570 --> 00:01:45.875
exactly the hashCode that you
see inside the master file.

00:01:45.875 --> 00:01:48.680
So essentially the branch master

00:01:48.680 --> 00:01:52.130
is pointing to this particular
comet at the moment.

00:01:52.130 --> 00:01:54.245
Let's make one more comment

00:01:54.245 --> 00:01:56.315
and see what's going to happen.

00:01:56.315 --> 00:02:00.000
Touch two dot TXT file,

00:02:00.190 --> 00:02:03.560
git, add two dot TXT.

00:02:03.560 --> 00:02:05.900
And then once again,

00:02:05.900 --> 00:02:09.090
let us commit the change.

00:02:09.910 --> 00:02:14.370
Let's call it second
commit and master branch.

00:02:14.680 --> 00:02:16.910
And let's take a
look at the content

00:02:16.910 --> 00:02:18.995
inside the master file.

00:02:18.995 --> 00:02:27.724
So cat dot get refs heads
and then the file master.

00:02:27.724 --> 00:02:29.645
And as you can see,

00:02:29.645 --> 00:02:31.850
Master is now pointing to

00:02:31.850 --> 00:02:35.540
the last commit in
this current branch.

00:02:35.540 --> 00:02:38.960
So if I do git log,

00:02:38.960 --> 00:02:42.770
you're going to see that
the master branch is

00:02:42.770 --> 00:02:44.240
actually pointing to the very

00:02:44.240 --> 00:02:46.745
recent commit that we've done.

00:02:46.745 --> 00:02:49.910
Now let's try to
create a new branch.

00:02:49.910 --> 00:02:53.900
And the command for
that is git branch.

00:02:53.900 --> 00:02:55.790
And then you're going
to specify the name

00:02:55.790 --> 00:02:58.160
of the branch that
you want to create.

00:02:58.160 --> 00:03:00.755
Let's call it feature one.

00:03:00.755 --> 00:03:04.250
So this has created
feature one branch,

00:03:04.250 --> 00:03:05.975
but we're still
on master branch.

00:03:05.975 --> 00:03:09.545
And you can tell it
by looking here,

00:03:09.545 --> 00:03:13.055
it says Master, so we're
currently in master branch.

00:03:13.055 --> 00:03:15.260
If I make a commit right now,

00:03:15.260 --> 00:03:17.255
that come it will
not be available.

00:03:17.255 --> 00:03:18.905
Feature one branch.

00:03:18.905 --> 00:03:20.360
But if you notice,

00:03:20.360 --> 00:03:23.555
it has also created another
file inside the heads

00:03:23.555 --> 00:03:25.340
directory with the name feature

00:03:25.340 --> 00:03:28.775
one and gets the
content inside it.

00:03:28.775 --> 00:03:31.850
Well, it will be the hashCode
of the last commit off

00:03:31.850 --> 00:03:35.600
branch from where we
created feature one branch.

00:03:35.600 --> 00:03:38.645
So essentially if you take
a look at the content

00:03:38.645 --> 00:03:41.780
of feature one file,

00:03:41.780 --> 00:03:43.550
it's going to point to

00:03:43.550 --> 00:03:46.550
the last commit of
the master branch.

00:03:46.550 --> 00:03:50.150
As expected. Now if I

00:03:50.150 --> 00:03:51.680
make a new commit where you

00:03:51.680 --> 00:03:53.690
think the changes would go into,

00:03:53.690 --> 00:03:56.315
it would be inside
the master branch

00:03:56.315 --> 00:03:59.225
because that's the
current act to branch.

00:03:59.225 --> 00:04:01.580
So let me make a commit.

00:04:01.580 --> 00:04:04.685
Dutch three dot dxdy,

00:04:04.685 --> 00:04:07.475
git add three dot dxdy.

00:04:07.475 --> 00:04:09.050
And we're going to make

00:04:09.050 --> 00:04:13.500
a third commit inside
master branch.

00:04:16.180 --> 00:04:20.960
If I do ls, you're going to
see all those three files.

00:04:20.960 --> 00:04:23.660
But if I switch to
feature one branch,

00:04:23.660 --> 00:04:26.600
so I do get switch

00:04:26.600 --> 00:04:29.910
and the name of the branch
I want to switch to.

00:04:30.250 --> 00:04:32.030
Feature one.

00:04:32.030 --> 00:04:34.220
You can also use the
command git checkout and

00:04:34.220 --> 00:04:37.670
the name of the
branch head away.

00:04:37.670 --> 00:04:41.780
As you can see, we have
switched to feature one branch.

00:04:41.780 --> 00:04:45.830
You can also tell
it by looking here.

00:04:45.830 --> 00:04:47.210
Now, can you guess what are

00:04:47.210 --> 00:04:50.480
all the files will be
seeing if I do ls?

00:04:50.480 --> 00:04:52.460
Well, we should
only be able to see

00:04:52.460 --> 00:04:54.500
one dot dx dy and dx dy.

00:04:54.500 --> 00:04:55.940
And not freed up

00:04:55.940 --> 00:04:59.960
dxdy because three dot text
is created and master branch,

00:04:59.960 --> 00:05:03.899
after we created
this feature branch.

00:05:04.270 --> 00:05:07.490
As you can see, we're only
seeing one dot d x into

00:05:07.490 --> 00:05:11.015
rho TXT files,
which is expected.

00:05:11.015 --> 00:05:13.745
Now since we're inside
the feature one branch,

00:05:13.745 --> 00:05:16.310
all the comments I'm going
to make now would be trapped

00:05:16.310 --> 00:05:19.805
inside feature one branch.
Let's do one comment.

00:05:19.805 --> 00:05:22.610
I want to create
one file, touch.

00:05:22.610 --> 00:05:24.830
Let's call it, which are

00:05:24.830 --> 00:05:29.675
13 dot TXT file
naming like this,

00:05:29.675 --> 00:05:31.820
just so that we know that
this belongs to feature

00:05:31.820 --> 00:05:35.180
one branch. For the time being.

00:05:35.180 --> 00:05:37.925
Git add.

00:05:37.925 --> 00:05:44.490
We're going to stay as
that file, git commit m,

00:05:44.530 --> 00:05:50.435
adding feature 13 file

00:05:50.435 --> 00:05:57.320
in which a one branch, whatever.

00:05:57.320 --> 00:06:00.950
So we made the comment
if I do ls now,

00:06:00.950 --> 00:06:04.265
you want to see all these files.

00:06:04.265 --> 00:06:06.540
Let me go back.

00:06:07.120 --> 00:06:09.289
The working directory.

00:06:09.289 --> 00:06:11.075
You're going to see
all these files.

00:06:11.075 --> 00:06:13.400
Well, let's take a look
at what would happen if

00:06:13.400 --> 00:06:17.010
I were to switch
to master branch.

00:06:17.800 --> 00:06:21.600
So I use gets which command.

00:06:22.240 --> 00:06:25.385
Or I could also use git checkout

00:06:25.385 --> 00:06:28.919
and then the name of the branch.

00:06:29.260 --> 00:06:34.175
The moment I do that you
can see it has updated

00:06:34.175 --> 00:06:39.080
the working directory
that suits master branch.

00:06:39.080 --> 00:06:41.330
So get is aware of the snapshot

00:06:41.330 --> 00:06:43.940
of the latest commit
diamond master branch.

00:06:43.940 --> 00:06:45.950
And it's going to make
the working directory

00:06:45.950 --> 00:06:47.660
looked like how it looked

00:06:47.660 --> 00:06:52.620
like when we made the last
commit in master branch.

00:06:55.060 --> 00:06:58.100
And if I were to switch
back to feature branch,

00:06:58.100 --> 00:07:00.560
once again, you're going to

00:07:00.560 --> 00:07:03.920
see the working directory
getting updated accordingly.

00:07:03.920 --> 00:07:06.305
We don't see three dot, dxdy.

00:07:06.305 --> 00:07:08.510
And feature branch
would now point to

00:07:08.510 --> 00:07:11.585
the last commit done
in that branch.

00:07:11.585 --> 00:07:15.380
So if you do take

00:07:15.380 --> 00:07:18.515
a look at the content
of feature one branch,

00:07:18.515 --> 00:07:20.690
the hashCode is now updated,

00:07:20.690 --> 00:07:23.975
pointing to the latest
commit in future one branch.

00:07:23.975 --> 00:07:25.685
If you do git log,

00:07:25.685 --> 00:07:29.195
you would see that

00:07:29.195 --> 00:07:33.930
that is the latest commit
done in that branch.

00:07:34.030 --> 00:07:36.470
Now it's really
crucial for you to

00:07:36.470 --> 00:07:39.020
understand how exactly
is this working.

00:07:39.020 --> 00:07:41.405
I want you to
experiment with this.

00:07:41.405 --> 00:07:43.820
Create files on
multiple branches,

00:07:43.820 --> 00:07:46.760
switch between multiple
branches and try to

00:07:46.760 --> 00:07:50.165
understand how good
behaves with branches.

00:07:50.165 --> 00:07:52.250
If you do not practice,

00:07:52.250 --> 00:07:54.080
it's almost certain
that you will

00:07:54.080 --> 00:07:56.000
confuse yourself pretty soon.

00:07:56.000 --> 00:07:58.385
So do not hesitate to practice.

00:07:58.385 --> 00:08:00.215
You feel like you're
knowing everything,

00:08:00.215 --> 00:08:01.955
but when you actually practice,

00:08:01.955 --> 00:08:04.220
you might have surprises.

00:08:04.220 --> 00:08:06.830
So don't hesitate to
experiment with this.

00:08:06.830 --> 00:08:09.230
Take some time and
practice what I've just

00:08:09.230 --> 00:08:10.790
taught and make sure

00:08:10.790 --> 00:08:13.680
that you're comfortable
with branches.
