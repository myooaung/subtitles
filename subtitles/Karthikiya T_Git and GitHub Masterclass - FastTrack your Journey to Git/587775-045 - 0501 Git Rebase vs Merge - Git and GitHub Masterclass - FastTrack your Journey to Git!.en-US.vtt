WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.590 --> 00:00:03.405
Let's talk about git rebase.

00:00:03.405 --> 00:00:06.495
Git rebase is sort of like
an alternative to merge.

00:00:06.495 --> 00:00:08.280
It serves pretty much
the same purpose

00:00:08.280 --> 00:00:09.855
as with merge operation.

00:00:09.855 --> 00:00:11.190
But that being said, you

00:00:11.190 --> 00:00:13.095
cannot replace one
with the other.

00:00:13.095 --> 00:00:15.855
We cannot replace
VBS with the merge,

00:00:15.855 --> 00:00:19.570
and vice versa, we cannot
replace merge with the rebase.

00:00:19.570 --> 00:00:20.960
It has its own pros and

00:00:20.960 --> 00:00:23.360
cons and each has
its own purpose.

00:00:23.360 --> 00:00:25.370
And that's what we're
going to talk about in

00:00:25.370 --> 00:00:27.770
this lecture and the
next couple of lectures.

00:00:27.770 --> 00:00:29.450
First of all, let us
try and understand

00:00:29.450 --> 00:00:31.325
what exactly is rebase.

00:00:31.325 --> 00:00:33.185
In case of three-way merge,

00:00:33.185 --> 00:00:35.360
GET request to create
a merge commit

00:00:35.360 --> 00:00:36.980
whose snapshot would constitute

00:00:36.980 --> 00:00:39.034
the changes of
both the branches.

00:00:39.034 --> 00:00:41.585
While this doesn't
sound like a problem,

00:00:41.585 --> 00:00:44.225
we do start to see
some problems with it,

00:00:44.225 --> 00:00:47.225
especially when our project
gets bigger and bigger.

00:00:47.225 --> 00:00:48.950
First of all,
merging would create

00:00:48.950 --> 00:00:51.005
this additional merge commit,

00:00:51.005 --> 00:00:53.060
which might be unnecessary.

00:00:53.060 --> 00:00:55.820
Secondly, it creates
the problem of

00:00:55.820 --> 00:00:58.865
so-called spaghetti
commit history.

00:00:58.865 --> 00:01:02.165
If you perform too many merge
operations in your project.

00:01:02.165 --> 00:01:05.435
This is how our project
history might look like.

00:01:05.435 --> 00:01:07.145
Now, if you were
to take a look at

00:01:07.145 --> 00:01:08.870
all the historical commits made,

00:01:08.870 --> 00:01:10.415
maybe let's say
that you have run

00:01:10.415 --> 00:01:12.440
git log command in
the master branch.

00:01:12.440 --> 00:01:15.065
All you're going to see us
bunch of merge commits.

00:01:15.065 --> 00:01:16.850
You do not get to
see the changes

00:01:16.850 --> 00:01:18.829
introduced an
individual branches.

00:01:18.829 --> 00:01:20.150
You have to navigate through

00:01:20.150 --> 00:01:22.070
the parent hierarchy to be able

00:01:22.070 --> 00:01:25.580
to look at all the branch
related changes or comments.

00:01:25.580 --> 00:01:28.520
This is going to create
a lot of confusion.

00:01:28.520 --> 00:01:30.290
Rebus put sort of address

00:01:30.290 --> 00:01:34.110
these problems that we
see with merge commits.

00:01:34.150 --> 00:01:37.790
In order to understand how
rebates exactly works,

00:01:37.790 --> 00:01:39.290
let us assume that we haven't

00:01:39.290 --> 00:01:41.705
performed the merge of
these two branches.

00:01:41.705 --> 00:01:44.210
And this is the current
state of our project.

00:01:44.210 --> 00:01:46.865
Now let us assume that
I'm in feature one branch

00:01:46.865 --> 00:01:49.820
and I've run the
command git rebase.

00:01:49.820 --> 00:01:52.520
What good would now
do is first of all,

00:01:52.520 --> 00:01:54.350
it will try to find
the common ancestor

00:01:54.350 --> 00:01:55.745
of both the branches,

00:01:55.745 --> 00:01:58.010
which in this case is N3 commit.

00:01:58.010 --> 00:01:59.765
And then it will
temporarily store

00:01:59.765 --> 00:02:02.135
all these changes
introduced in feature one.

00:02:02.135 --> 00:02:04.055
Somewhere in the repository.

00:02:04.055 --> 00:02:05.540
It would then point the feature

00:02:05.540 --> 00:02:08.165
one branch to the tip
of the master branch,

00:02:08.165 --> 00:02:10.970
which in this case
is m phi commit.

00:02:10.970 --> 00:02:14.840
Git will reapply all those
stored commits one-by-one.

00:02:14.840 --> 00:02:17.810
This is as that we have
created the branch AT MY

00:02:17.810 --> 00:02:19.700
commit and introduced all

00:02:19.700 --> 00:02:22.160
those feature lead to
changes in feature branch.

00:02:22.160 --> 00:02:25.295
Earlier our feature branches
based out of M3 commit.

00:02:25.295 --> 00:02:27.545
Now after running
the rebase command,

00:02:27.545 --> 00:02:30.230
it is now rebased to m phi.

00:02:30.230 --> 00:02:32.780
Now, while doing this operation,

00:02:32.780 --> 00:02:34.880
you might as well see conflicts.

00:02:34.880 --> 00:02:36.980
We can resolve them
just as we had

00:02:36.980 --> 00:02:39.620
resolved conflicts in
case of merge operation.

00:02:39.620 --> 00:02:42.785
We went to see an example of
that in upcoming lectures.

00:02:42.785 --> 00:02:45.140
Now if you take a
look at this diagram,

00:02:45.140 --> 00:02:47.000
you notice that we
can actually perform

00:02:47.000 --> 00:02:49.595
fast forward merge like so.

00:02:49.595 --> 00:02:52.940
Now guess what? No additional
comments were introduced.

00:02:52.940 --> 00:02:57.350
An allo commits are linear
with merge operation.

00:02:57.350 --> 00:02:59.480
If you had that
problem of spaghetti

00:02:59.480 --> 00:03:02.030
commit history with rebase,

00:03:02.030 --> 00:03:05.675
we have linear development
like you're seeing here,

00:03:05.675 --> 00:03:07.250
which makes it easier for us to

00:03:07.250 --> 00:03:08.990
take a look at commit history.

00:03:08.990 --> 00:03:11.675
And if you were to run
git log command now,

00:03:11.675 --> 00:03:13.145
you will not only see

00:03:13.145 --> 00:03:15.590
how the changes introduced
in master branch,

00:03:15.590 --> 00:03:17.810
but also all the feature
related comments as

00:03:17.810 --> 00:03:20.510
well in linear fashion.

00:03:20.510 --> 00:03:23.210
Now you might be thinking
that we can start using

00:03:23.210 --> 00:03:27.080
rebase and we would never
have to use merge ever again.

00:03:27.080 --> 00:03:28.400
You could be wrong.

00:03:28.400 --> 00:03:30.020
There are certain
scenarios where

00:03:30.020 --> 00:03:31.715
rebase is ideal thing to do,

00:03:31.715 --> 00:03:33.620
and there are other
set of scenarios

00:03:33.620 --> 00:03:35.990
where much is a better option.

00:03:35.990 --> 00:03:39.750
You'll understand more
about it Up next.
