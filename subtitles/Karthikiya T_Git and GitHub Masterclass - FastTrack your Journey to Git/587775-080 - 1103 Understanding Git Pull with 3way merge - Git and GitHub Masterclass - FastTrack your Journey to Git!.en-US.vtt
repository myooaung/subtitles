WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.000
Now let us see what would
happen if we have commits

00:00:03.000 --> 00:00:06.435
made in both remote as
well as local depository.

00:00:06.435 --> 00:00:09.090
This is to simulate
a scenario where you

00:00:09.090 --> 00:00:11.835
might have commits made
in your local repository,

00:00:11.835 --> 00:00:13.980
as well as few comments made in

00:00:13.980 --> 00:00:15.840
the remote repository might

00:00:15.840 --> 00:00:17.760
be from other
developers as well.

00:00:17.760 --> 00:00:20.144
So in order to simulate
this behavior,

00:00:20.144 --> 00:00:21.510
let us first try to make

00:00:21.510 --> 00:00:23.985
a commit in our
local repository.

00:00:23.985 --> 00:00:26.490
If I run git pull, you see

00:00:26.490 --> 00:00:29.505
that our repository is
already up to date.

00:00:29.505 --> 00:00:32.770
Let me quickly, I did
one of the files here.

00:00:33.200 --> 00:00:37.210
Let's edit this
file, for instance.

00:00:43.870 --> 00:00:48.470
Saved the file, stays the file.

00:00:48.470 --> 00:00:51.860
You can actually do all this
from Visual Studio Code,

00:00:51.860 --> 00:00:53.810
but it's just my
personal preference

00:00:53.810 --> 00:00:55.910
to do it from Git Bash.

00:00:55.910 --> 00:00:58.580
I feel more like a
programmer when I do it

00:00:58.580 --> 00:01:01.745
from Git Bash versus
using Visual Studio Code.

00:01:01.745 --> 00:01:06.485
So git add apple dot TXT.

00:01:06.485 --> 00:01:17.600
Good commit message.

00:01:17.600 --> 00:01:20.400
And we made our commit.

00:01:21.190 --> 00:01:25.940
Let us go to our
remote repository

00:01:25.940 --> 00:01:29.520
and let us make some
edits and input.txt file.

00:01:29.890 --> 00:01:35.585
Maybe I'd like to add one
more line of text like so.

00:01:35.585 --> 00:01:38.730
And commit those changes.

00:01:38.950 --> 00:01:41.870
Now can you expect the behavior

00:01:41.870 --> 00:01:43.910
when we tried to do git pull?

00:01:43.910 --> 00:01:47.645
Now, imagine we perform

00:01:47.645 --> 00:01:50.839
git-fetch and then
performed git merge.

00:01:50.839 --> 00:01:53.240
What is that you
expect to happen is

00:01:53.240 --> 00:01:57.180
exactly what would happen if
you run git pull command.

00:01:59.080 --> 00:02:02.790
Actually, we don't have
to specify the mode.

00:02:05.590 --> 00:02:09.515
As you can see, it has prompted
us to choose the message.

00:02:09.515 --> 00:02:12.095
Can you guess what
this is all about?

00:02:12.095 --> 00:02:16.820
Well, this is the message
get is asking us to

00:02:16.820 --> 00:02:18.785
go for the new merge

00:02:18.785 --> 00:02:21.845
commit object that it
is going to create.

00:02:21.845 --> 00:02:25.415
This has essentially
performed three-way merge.

00:02:25.415 --> 00:02:29.495
And get is now going to create
the merge commit as well.

00:02:29.495 --> 00:02:31.999
Let's say I'm happy
with this message.

00:02:31.999 --> 00:02:34.265
I'm just simply
going to close that.

00:02:34.265 --> 00:02:38.840
And command would continue
executing. This time.

00:02:38.840 --> 00:02:40.550
If I do git log,

00:02:40.550 --> 00:02:42.680
you can see that
the local branch

00:02:42.680 --> 00:02:45.575
is pointing to the
new merge commit.

00:02:45.575 --> 00:02:48.470
But the tracking
branch, as expected,

00:02:48.470 --> 00:02:50.855
is still pointing to the commit

00:02:50.855 --> 00:02:54.875
that its corresponding remote
branch is pointing to.

00:02:54.875 --> 00:02:57.410
This is the commit
that we've just

00:02:57.410 --> 00:03:00.270
downloaded from the
remote repository.

00:03:00.460 --> 00:03:03.110
Now, what if I do
not want to have

00:03:03.110 --> 00:03:06.290
this additional merge
commit created by git,

00:03:06.290 --> 00:03:08.720
rebase is the answer.

00:03:08.720 --> 00:03:10.370
And that's what we're
going to talk about in

00:03:10.370 --> 00:03:13.260
our next video.
I'll see you next.
