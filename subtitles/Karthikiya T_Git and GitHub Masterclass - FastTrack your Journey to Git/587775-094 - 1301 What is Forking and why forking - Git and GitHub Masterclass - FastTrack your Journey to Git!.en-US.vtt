WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.620
Let's talk about for king in
GitHub and its significance.

00:00:04.620 --> 00:00:07.200
Imagine that we have an
open-source project with

00:00:07.200 --> 00:00:09.810
the name open app in
GitHub repository.

00:00:09.810 --> 00:00:13.065
And say that this is
owned by Mr. Sunda.

00:00:13.065 --> 00:00:16.035
Now when I say this is
the open source project,

00:00:16.035 --> 00:00:18.810
you can expect hundreds or
even thousands of developers

00:00:18.810 --> 00:00:20.130
across the globe who are

00:00:20.130 --> 00:00:22.245
willing to contribute
to this project.

00:00:22.245 --> 00:00:25.050
Now imagine the amount
of work that's been done

00:00:25.050 --> 00:00:27.900
needs to do to manage
the collaborators.

00:00:27.900 --> 00:00:29.445
If cylinder what to manage

00:00:29.445 --> 00:00:31.695
hundreds or thousands
of collaborators,

00:00:31.695 --> 00:00:33.870
it becomes a job on its own.

00:00:33.870 --> 00:00:36.270
For example, every time
somebody wants to contribute,

00:00:36.270 --> 00:00:37.740
whether it is a
small contribution

00:00:37.740 --> 00:00:39.300
or a large contribution,

00:00:39.300 --> 00:00:42.295
there still needs to add
them as collaborator.

00:00:42.295 --> 00:00:46.115
Secondly, if sundries using
the free version of GitHub,

00:00:46.115 --> 00:00:47.930
then essentially
every collaborator,

00:00:47.930 --> 00:00:49.610
we'll have the privilege to

00:00:49.610 --> 00:00:51.965
merge their code onto
the main branch.

00:00:51.965 --> 00:00:53.960
Now imagine some beginner
dollar per who's

00:00:53.960 --> 00:00:55.925
just getting started
with programming.

00:00:55.925 --> 00:00:58.580
Deliver some code and
modulus those changes

00:00:58.580 --> 00:01:01.670
on the main branch without
doing adequate testing.

00:01:01.670 --> 00:01:04.655
Obviously, that's going
to create a lot of mess.

00:01:04.655 --> 00:01:07.205
So we need a solution
to this problem.

00:01:07.205 --> 00:01:10.340
Well, the solution is forking.

00:01:10.340 --> 00:01:12.950
So what exactly is forking?

00:01:12.950 --> 00:01:16.430
Imagine that we have Mr.
Luke wants to contribute to

00:01:16.430 --> 00:01:18.200
this project and he's not

00:01:18.200 --> 00:01:20.735
added as a collaborator
on this project.

00:01:20.735 --> 00:01:22.790
So what Luke is going to do

00:01:22.790 --> 00:01:25.235
is with just a
click of a button,

00:01:25.235 --> 00:01:26.870
has gone to folk this repository

00:01:26.870 --> 00:01:28.445
on his own GitHub account.

00:01:28.445 --> 00:01:30.680
You can think of
working as clone.

00:01:30.680 --> 00:01:33.185
But instead of cloning
it on the local machine,

00:01:33.185 --> 00:01:34.760
it's going to happen
on the GitHub

00:01:34.760 --> 00:01:36.350
salvo on Luke's account.

00:01:36.350 --> 00:01:38.360
In this case, Luke and

00:01:38.360 --> 00:01:41.105
rename this project to whatever
the name of his choice,

00:01:41.105 --> 00:01:42.800
or he can also keep
the same name.

00:01:42.800 --> 00:01:44.705
It doesn't really matter.

00:01:44.705 --> 00:01:47.360
As a standard naming convention.

00:01:47.360 --> 00:01:50.225
Default repository is
referred as origin

00:01:50.225 --> 00:01:54.545
and the original repository
is referred as upstream.

00:01:54.545 --> 00:01:57.875
You can of course call them
with any name of your choice.

00:01:57.875 --> 00:01:59.780
But these are the typical
naming conventions

00:01:59.780 --> 00:02:01.610
we follow as developers.

00:02:01.610 --> 00:02:03.485
So whenever I say origin,

00:02:03.485 --> 00:02:05.660
I'm referring to the
forked repository.

00:02:05.660 --> 00:02:07.430
Whenever I say upstream,

00:02:07.430 --> 00:02:09.590
I'm referring to the
original repository

00:02:09.590 --> 00:02:11.645
from where we have four.

00:02:11.645 --> 00:02:15.215
Now look, we'll make a clone
office forked repository,

00:02:15.215 --> 00:02:17.135
even in his local machine.

00:02:17.135 --> 00:02:19.640
He will then introduce all
the changes that it needs to

00:02:19.640 --> 00:02:21.440
introduce and it's going to push

00:02:21.440 --> 00:02:23.810
all these changes on
the forked repository.

00:02:23.810 --> 00:02:25.670
Meanwhile, if there
are any new updates

00:02:25.670 --> 00:02:27.320
on the original depository,

00:02:27.320 --> 00:02:29.510
look and actually
pulling all this changes

00:02:29.510 --> 00:02:31.550
onto his local depository and

00:02:31.550 --> 00:02:33.350
push all those changes or

00:02:33.350 --> 00:02:36.440
new commits to his
forked repository.

00:02:36.440 --> 00:02:39.920
That way, default repository
will stay up to date,

00:02:39.920 --> 00:02:41.600
but the newly
introduced changes in

00:02:41.600 --> 00:02:44.150
the original
depository ones after

00:02:44.150 --> 00:02:45.260
Luca is done with what are

00:02:45.260 --> 00:02:47.180
the changes he
wants to introduce.

00:02:47.180 --> 00:02:49.595
And of course, after
adequate testing

00:02:49.595 --> 00:02:51.724
is going to raise
a pull request,

00:02:51.724 --> 00:02:55.070
asking some there to accept
all these changes and merge

00:02:55.070 --> 00:02:56.690
those changes in the main branch

00:02:56.690 --> 00:02:58.580
of the original repository.

00:02:58.580 --> 00:03:00.830
So this vessel in there
doesn't need to write

00:03:00.830 --> 00:03:03.800
access to look to
start contributing.

00:03:03.800 --> 00:03:07.250
This approach of contributing
to a project by forking

00:03:07.250 --> 00:03:08.960
the repository is not

00:03:08.960 --> 00:03:11.165
only good to the owner
of the repository,

00:03:11.165 --> 00:03:12.485
but also the dollar plus

00:03:12.485 --> 00:03:14.900
one to contribute
to the project.

00:03:14.900 --> 00:03:17.270
Here are some of
the vantage is for

00:03:17.270 --> 00:03:19.130
developers for using forking.

00:03:19.130 --> 00:03:20.630
Instead of directly contributing

00:03:20.630 --> 00:03:22.610
to the original repository.

00:03:22.610 --> 00:03:24.980
Walking allows anyone
to contribute to

00:03:24.980 --> 00:03:27.889
a project without having
the right access.

00:03:27.889 --> 00:03:30.725
Because they can just
create a fork of a project,

00:03:30.725 --> 00:03:32.510
introduce all the changes,

00:03:32.510 --> 00:03:35.525
test them, and then
raise pull request.

00:03:35.525 --> 00:03:37.370
They can freely experiment with

00:03:37.370 --> 00:03:40.325
changes without affecting
the original project.

00:03:40.325 --> 00:03:42.200
In some instances,
there could be

00:03:42.200 --> 00:03:44.030
multiple people who collectively

00:03:44.030 --> 00:03:46.115
want to contribute to
a particular project.

00:03:46.115 --> 00:03:48.140
In which case, it's always

00:03:48.140 --> 00:03:50.705
better to fork the
original depository,

00:03:50.705 --> 00:03:53.810
deleted all the changes,
do integration testing.

00:03:53.810 --> 00:03:56.690
And once they are done, they
can raise pull request,

00:03:56.690 --> 00:03:59.270
asking the original deposit
to the owner to pull in

00:03:59.270 --> 00:04:00.590
all the changes and

00:04:00.590 --> 00:04:03.450
merge those changes
on the main branch.

00:04:03.580 --> 00:04:06.740
Walking allows you to
use someone else project

00:04:06.740 --> 00:04:09.500
as a starting point
for your own idea.

00:04:09.500 --> 00:04:11.390
A lot of commercial software or

00:04:11.390 --> 00:04:14.090
applications were
originally initiated

00:04:14.090 --> 00:04:15.845
with an open-source project.

00:04:15.845 --> 00:04:17.990
They just work on all
the existing open

00:04:17.990 --> 00:04:20.210
source projects and introduce

00:04:20.210 --> 00:04:22.340
changes on top of that and sell

00:04:22.340 --> 00:04:25.355
it to their customers with
the commercial license.

00:04:25.355 --> 00:04:29.645
And lastly, you don't have
to wait for right access.

00:04:29.645 --> 00:04:31.370
Imagine you're
writing an email to

00:04:31.370 --> 00:04:34.130
the posterior owner
asking for right axis,

00:04:34.130 --> 00:04:36.650
and then you wait
forever for response.

00:04:36.650 --> 00:04:38.524
Well, with forking,

00:04:38.524 --> 00:04:40.910
you can straight up to
contribute to the project

00:04:40.910 --> 00:04:43.880
and race pull requests
without having to have

00:04:43.880 --> 00:04:46.910
the right access to the
original depository.

00:04:46.910 --> 00:04:49.310
We're going to see
all this inaction and

00:04:49.310 --> 00:04:52.830
more in upcoming lectures.
I'll see you next.
