WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.250
Okay, let's see how we can time

00:00:02.250 --> 00:00:04.559
travel and get with
a quick example.

00:00:04.559 --> 00:00:07.695
And once again, in order
to avoid confusion,

00:00:07.695 --> 00:00:09.750
I've just cleaned up
everything inside

00:00:09.750 --> 00:00:11.640
the desktop folder and

00:00:11.640 --> 00:00:13.935
we're going to do
everything from scratch.

00:00:13.935 --> 00:00:16.680
Let me launch and Git Bash.

00:00:16.680 --> 00:00:20.069
My plan is to make
three commits.

00:00:20.069 --> 00:00:21.690
And we assume that
each comment would

00:00:21.690 --> 00:00:24.810
correspond to
individual features.

00:00:24.810 --> 00:00:28.240
Get initialized the project.

00:00:28.250 --> 00:00:34.685
Touch one dot TXT, git add.

00:00:34.685 --> 00:00:40.580
We're going to stay as
that file, git commit.

00:00:40.580 --> 00:00:45.995
And let's call it whichever one.

00:00:45.995 --> 00:00:48.230
We're going to
repeat the process

00:00:48.230 --> 00:00:52.565
for feature to add as well.

00:00:52.565 --> 00:00:55.590
Let's call it two dot TXT.

00:00:55.720 --> 00:01:02.480
Git add two dot TXT
and git commit.

00:01:02.480 --> 00:01:04.865
Feature two.

00:01:04.865 --> 00:01:10.290
Let's do one last commit
representing feature three.

00:01:19.000 --> 00:01:23.910
And git commit featured three.

00:01:24.160 --> 00:01:28.654
Now let's do git log

00:01:28.654 --> 00:01:31.760
to take a look at all
the list of objects.

00:01:31.760 --> 00:01:34.610
Let me enlarge this folder

00:01:34.610 --> 00:01:36.470
so that we can
simultaneously take

00:01:36.470 --> 00:01:38.390
a look at what's

00:01:38.390 --> 00:01:41.975
happening here while
we run the commands.

00:01:41.975 --> 00:01:45.935
So currently we have
these three files.

00:01:45.935 --> 00:01:48.950
Now, let us assume that I
wanted to reward and go

00:01:48.950 --> 00:01:53.059
back to one of the previous
versions of the project.

00:01:53.059 --> 00:01:55.025
Let's say that I
wanted to go back

00:01:55.025 --> 00:01:56.915
how my project looked like.

00:01:56.915 --> 00:01:59.660
I made feature to come at.

00:01:59.660 --> 00:02:04.820
The command I need to
use is actually switch.

00:02:04.820 --> 00:02:07.790
Now, do take a note that
this command may not be

00:02:07.790 --> 00:02:09.155
working for you if you have

00:02:09.155 --> 00:02:11.180
older versions of Git installed.

00:02:11.180 --> 00:02:13.490
So download and install
the latest version

00:02:13.490 --> 00:02:16.265
of Git only then will
this command walk.

00:02:16.265 --> 00:02:20.300
If you're still insist to use
earlier versions of gaped,

00:02:20.300 --> 00:02:25.820
then there's another command
called git checkout.

00:02:25.820 --> 00:02:27.200
You need to type this.

00:02:27.200 --> 00:02:29.690
And if you have the
latest version installed,

00:02:29.690 --> 00:02:30.965
like in my case,

00:02:30.965 --> 00:02:35.450
then both these commands would
work without any problem.

00:02:35.450 --> 00:02:40.569
However, I prefer to use switch.

00:02:40.569 --> 00:02:42.745
And then we're going to provide

00:02:42.745 --> 00:02:50.510
the hashCode of the combat
where we want to devote to.

00:02:50.760 --> 00:02:52.795
Let me paste the code.

00:02:52.795 --> 00:02:55.285
You don't have to
paste the entire code.

00:02:55.285 --> 00:02:58.585
The first few characters
would actually suffice.

00:02:58.585 --> 00:03:01.555
Now, if I hit Enter,

00:03:01.555 --> 00:03:04.750
we're going to get a
hint from get's saying,

00:03:04.750 --> 00:03:06.085
if you want to detach,

00:03:06.085 --> 00:03:08.245
head at the commit,

00:03:08.245 --> 00:03:12.055
try again with detach option.

00:03:12.055 --> 00:03:15.010
Well, whatever we're
doing right now is

00:03:15.010 --> 00:03:18.145
actually called
detached head state.

00:03:18.145 --> 00:03:21.980
You're going to understand
about it in next chapter and

00:03:21.980 --> 00:03:25.970
get this also saying
a branch is expected.

00:03:25.970 --> 00:03:28.580
But it got commit.

00:03:28.580 --> 00:03:30.530
Like I said before,

00:03:30.530 --> 00:03:32.240
whatever we're doing
right now is not

00:03:32.240 --> 00:03:34.280
actually the
recommended approach.

00:03:34.280 --> 00:03:38.165
The recommended approach is
actually to use branches.

00:03:38.165 --> 00:03:41.000
Once again, we'll talk
about it in next chapter.

00:03:41.000 --> 00:03:43.625
That's what Git is
even recommending.

00:03:43.625 --> 00:03:47.720
It is expecting us to use
branch and not a comet.

00:03:47.720 --> 00:03:52.595
Let's proceed by including

00:03:52.595 --> 00:03:56.790
the hyphen hyphen detach option.

00:03:59.020 --> 00:04:03.680
And if you notice the
moment we run that command,

00:04:03.680 --> 00:04:07.115
you don't see three
dot TXT file anymore.

00:04:07.115 --> 00:04:08.990
And even if you
were to take a look

00:04:08.990 --> 00:04:10.879
at all the list of commits,

00:04:10.879 --> 00:04:13.040
by doing git log.

00:04:13.040 --> 00:04:16.010
It's going to print
only two commits.

00:04:16.010 --> 00:04:17.465
Essentially.

00:04:17.465 --> 00:04:21.080
We just went back in time
to bring back the project

00:04:21.080 --> 00:04:24.875
what it was when they
made feature to commit.

00:04:24.875 --> 00:04:27.020
It's equivalent to, I have done

00:04:27.020 --> 00:04:30.275
no changes after I made
feature to come at.

00:04:30.275 --> 00:04:33.140
How cool is that? You can

00:04:33.140 --> 00:04:35.105
actually go to the
future as well.

00:04:35.105 --> 00:04:37.490
And I'm not wrong
in saying that.

00:04:37.490 --> 00:04:40.370
Let me come up with
the hashCode of

00:04:40.370 --> 00:04:45.720
feature three. This time.

00:04:45.730 --> 00:04:49.010
Let me run git
checkout and Strauss,

00:04:49.010 --> 00:04:51.890
which then I'm going to

00:04:51.890 --> 00:04:56.435
specify the hash of
the third commit,

00:04:56.435 --> 00:04:58.650
our feature tree commit.

00:05:00.070 --> 00:05:02.600
And take a look at what would

00:05:02.600 --> 00:05:05.700
happen inside our
working directory.

00:05:05.950 --> 00:05:08.690
Well, you see three dx,

00:05:08.690 --> 00:05:13.265
dy again, we're back to the
future. How cool is that?

00:05:13.265 --> 00:05:16.475
I wish there is something
like this in our lives.

00:05:16.475 --> 00:05:19.115
I mean, I could just
go back in time,

00:05:19.115 --> 00:05:21.830
fix things up, maybe
invest in Bitcoin,

00:05:21.830 --> 00:05:23.480
and come back to the future.

00:05:23.480 --> 00:05:25.115
How cool would it be?

00:05:25.115 --> 00:05:28.715
It's only possible and
get, at the moment.

00:05:28.715 --> 00:05:30.500
It's crazy, but
at the same time,

00:05:30.500 --> 00:05:32.045
kind of spooky to be honest,

00:05:32.045 --> 00:05:35.280
but that's the power of good.

00:05:35.530 --> 00:05:39.590
But anyway, do try and
experiment with this feature.

00:05:39.590 --> 00:05:41.750
Just play around with it.

00:05:41.750 --> 00:05:44.450
And don't bother about
terminologies like

00:05:44.450 --> 00:05:46.940
head, branch, et cetera.

00:05:46.940 --> 00:05:49.970
We're going to talk about
all that in next chapter.

00:05:49.970 --> 00:05:52.535
One more thing I
should mention is that

00:05:52.535 --> 00:05:56.180
whenever we are switching or
checking out another commit,

00:05:56.180 --> 00:05:58.010
Get was able to bring back

00:05:58.010 --> 00:05:59.990
the working directory back

00:05:59.990 --> 00:06:02.300
to what it was when
we made that comment.

00:06:02.300 --> 00:06:04.400
And it has happened
very quickly.

00:06:04.400 --> 00:06:07.925
The reason why it happens
so quickly is because of

00:06:07.925 --> 00:06:10.010
the concept of snapshot we had

00:06:10.010 --> 00:06:12.575
discussed in one of
our previous lectures.

00:06:12.575 --> 00:06:14.900
In other version
control systems.

00:06:14.900 --> 00:06:16.970
What the story is actually
the difference of

00:06:16.970 --> 00:06:19.925
files compared to their
previous commits.

00:06:19.925 --> 00:06:21.860
And when we add the
tool to bring back

00:06:21.860 --> 00:06:23.900
the project to a certain state,

00:06:23.900 --> 00:06:27.260
it's actually going to sum
up all the differences to

00:06:27.260 --> 00:06:29.090
recreate the files to what

00:06:29.090 --> 00:06:31.325
they were when we
made the commit.

00:06:31.325 --> 00:06:33.500
However, in case of get,

00:06:33.500 --> 00:06:35.405
it's all about Snapshot.

00:06:35.405 --> 00:06:38.810
Basically, each and every
commit object points to

00:06:38.810 --> 00:06:42.394
a snapshot or the
root tree object,

00:06:42.394 --> 00:06:44.315
which has all the information

00:06:44.315 --> 00:06:45.770
of all the files residing in

00:06:45.770 --> 00:06:47.480
our working directory and

00:06:47.480 --> 00:06:50.390
all its corresponding
blob objects.

00:06:50.390 --> 00:06:52.520
So it's relatively faster.

00:06:52.520 --> 00:06:56.645
Forget to retrieve the
content from Blob objects and

00:06:56.645 --> 00:06:58.819
almost instantly or quickly

00:06:58.819 --> 00:07:01.595
load all the files onto
the working directory.

00:07:01.595 --> 00:07:03.260
That's the power of storing

00:07:03.260 --> 00:07:05.240
a snapshot compared to storing

00:07:05.240 --> 00:07:07.850
the differences are pad sets

00:07:07.850 --> 00:07:10.880
like we discussed in one
of our previous lectures.

00:07:10.880 --> 00:07:13.025
It's like when you're
playing a game,

00:07:13.025 --> 00:07:16.355
you're going back and forth
between multiple sale points.

00:07:16.355 --> 00:07:18.215
Somewhat similar to that.

00:07:18.215 --> 00:07:20.940
Hope it makes sense.
