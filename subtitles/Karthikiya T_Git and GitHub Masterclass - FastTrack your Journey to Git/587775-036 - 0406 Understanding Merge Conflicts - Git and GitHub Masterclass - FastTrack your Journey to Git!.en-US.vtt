WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.010
Let's talk about merge conflicts

00:00:02.010 --> 00:00:04.920
and assume that I've

00:00:04.920 --> 00:00:07.965
made one commit in master
branch, Let's call it M1.

00:00:07.965 --> 00:00:09.480
And as part of this comment,

00:00:09.480 --> 00:00:12.315
I have introduced the
file product dot TXT

00:00:12.315 --> 00:00:14.340
with couple of lines of code.

00:00:14.340 --> 00:00:16.440
Now, obviously it
doesn't make sense to

00:00:16.440 --> 00:00:18.540
write code and dot TXT file.

00:00:18.540 --> 00:00:20.340
You need to make an
assumption that this

00:00:20.340 --> 00:00:21.975
is some kind of a source file,

00:00:21.975 --> 00:00:24.420
like Java file
Python or whatever.

00:00:24.420 --> 00:00:27.120
Now I also should
mention that we

00:00:27.120 --> 00:00:30.285
typically never tend to make
commits in master branch.

00:00:30.285 --> 00:00:32.820
What we usually have
in master branch,

00:00:32.820 --> 00:00:34.875
or so-called the merge commits,

00:00:34.875 --> 00:00:36.840
which we've discussed earlier.

00:00:36.840 --> 00:00:39.449
When we talk about
centralized repository

00:00:39.449 --> 00:00:40.915
and team collaboration.

00:00:40.915 --> 00:00:42.860
You will understand
how everybody would

00:00:42.860 --> 00:00:44.600
create their own
branches to walk on

00:00:44.600 --> 00:00:46.835
their own features
and then merge

00:00:46.835 --> 00:00:48.770
all those changes into

00:00:48.770 --> 00:00:51.455
the master branch in the
centralized repository.

00:00:51.455 --> 00:00:54.140
And then when we locally
update the project,

00:00:54.140 --> 00:00:56.360
we're going to get all
those merge commits

00:00:56.360 --> 00:00:59.555
done by other team members
into our master branch.

00:00:59.555 --> 00:01:01.355
If this sounds confusing,

00:01:01.355 --> 00:01:03.785
then you will have to hold
on until we talk about

00:01:03.785 --> 00:01:07.205
centralized repository
and team collaboration.

00:01:07.205 --> 00:01:09.815
For now, for the sake
of this example,

00:01:09.815 --> 00:01:13.415
assume that we're making
commits in the master branch.

00:01:13.415 --> 00:01:15.350
I made M1 commit,

00:01:15.350 --> 00:01:17.150
introducing this file product

00:01:17.150 --> 00:01:20.045
dot TXT with couple
of lines of code.

00:01:20.045 --> 00:01:23.060
And then I made another
commit, let's call it m2.

00:01:23.060 --> 00:01:25.460
This time I have
updated the product

00:01:25.460 --> 00:01:29.015
dot TXT file with a couple
of more lines of code.

00:01:29.015 --> 00:01:31.130
Let us assume now I have

00:01:31.130 --> 00:01:34.250
decided to work on
another feature.

00:01:34.250 --> 00:01:37.220
Guess what? I'm going to
create a feature branch,

00:01:37.220 --> 00:01:39.875
work on it, introduce
all those changes.

00:01:39.875 --> 00:01:42.245
And then let's
have made a commit

00:01:42.245 --> 00:01:45.050
wherein I have modified
the product dot

00:01:45.050 --> 00:01:47.270
TXT file by writing couple of

00:01:47.270 --> 00:01:48.650
additional lines of code

00:01:48.650 --> 00:01:51.005
that are relevant
to feature one.

00:01:51.005 --> 00:01:53.870
Meanwhile, I switched
back to master branch.

00:01:53.870 --> 00:01:56.180
So our project file would
look something like this

00:01:56.180 --> 00:02:00.290
because master branch is
pointing to m to commit.

00:02:00.290 --> 00:02:02.780
And then let us
assume that I made

00:02:02.780 --> 00:02:04.835
one more committed master branch

00:02:04.835 --> 00:02:07.310
updating the product
dot TXT file,

00:02:07.310 --> 00:02:09.080
like you're seeing here.

00:02:09.080 --> 00:02:10.670
Now a question to you.

00:02:10.670 --> 00:02:12.350
Let us say I have
decided to merge

00:02:12.350 --> 00:02:14.525
feature branch into
the master branch.

00:02:14.525 --> 00:02:18.725
And I run the command and
get to merge the branch.

00:02:18.725 --> 00:02:21.799
Would you expect get
to perform the merge?

00:02:21.799 --> 00:02:25.880
The answer is no. Why?

00:02:25.880 --> 00:02:27.830
Because we have a couple of

00:02:27.830 --> 00:02:30.020
versions of product
dot TXT file.

00:02:30.020 --> 00:02:31.460
In master branch we have

00:02:31.460 --> 00:02:33.815
product dot TXT that
you're seeing on the left.

00:02:33.815 --> 00:02:35.060
And in the feature branch we

00:02:35.060 --> 00:02:37.925
have the file that you're
seeing on the right.

00:02:37.925 --> 00:02:40.040
When we ask good to merge,

00:02:40.040 --> 00:02:42.290
it cannot keep both the files.

00:02:42.290 --> 00:02:45.620
Get this confused as to
which of these changes

00:02:45.620 --> 00:02:49.445
it needs to keep or it needs
to keep any changes at all.

00:02:49.445 --> 00:02:51.230
Obviously, it's not smart enough

00:02:51.230 --> 00:02:53.630
to make edits according
to our needs.

00:02:53.630 --> 00:02:56.225
So it will leave it up to us to

00:02:56.225 --> 00:02:59.525
make all the changes,
resolve the conflicts.

00:02:59.525 --> 00:03:01.910
Only then will get
actually go ahead

00:03:01.910 --> 00:03:05.070
and perform the merge and
create a merge commit.

00:03:05.070 --> 00:03:08.425
Essentially when you run
the command to merge,

00:03:08.425 --> 00:03:10.780
it will throw an
error saying that it

00:03:10.780 --> 00:03:13.030
has found complex in
some of the files.

00:03:13.030 --> 00:03:15.670
And only after
resolving them will it

00:03:15.670 --> 00:03:18.820
go ahead and merge the changes
and create merge commit?

00:03:18.820 --> 00:03:22.405
Now why is this merge
called a three-way merge?

00:03:22.405 --> 00:03:24.400
You might be wondering, well,

00:03:24.400 --> 00:03:25.960
it's basically
because this merge

00:03:25.960 --> 00:03:28.615
involves three snapshots,

00:03:28.615 --> 00:03:31.720
the last two comments
and the convect that

00:03:31.720 --> 00:03:34.824
is an immediate ancestor
of both these comments.

00:03:34.824 --> 00:03:37.090
This colleague, it will
compare the file in

00:03:37.090 --> 00:03:39.520
the immediate ancestor
snapshot with

00:03:39.520 --> 00:03:42.835
the files in the latest snapshots
in both these branches.

00:03:42.835 --> 00:03:46.210
Now if you didn't understand
it, It's completely okay.

00:03:46.210 --> 00:03:48.060
It's not really
worth knowing it.

00:03:48.060 --> 00:03:49.010
To explain it.

00:03:49.010 --> 00:03:51.500
Well, I have to actually
go deep and again,

00:03:51.500 --> 00:03:53.375
get into those hashCode and all,

00:03:53.375 --> 00:03:56.420
which I don't want to because
it's not at all what that

00:03:56.420 --> 00:03:58.190
just remember that this kind of

00:03:58.190 --> 00:04:00.230
model is called a
three-way merge.

00:04:00.230 --> 00:04:02.075
And that should suffice.

00:04:02.075 --> 00:04:04.580
And fast-forward mode
is also called as to

00:04:04.580 --> 00:04:08.585
emerge because it only
involves couple of snapshots.

00:04:08.585 --> 00:04:10.640
Next, we're going to take
a look at all this in

00:04:10.640 --> 00:04:14.880
action and see how we can
resolve the conflicts.
