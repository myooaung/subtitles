WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.440 --> 00:00:04.410
Let us talk about
three-way merge and get.

00:00:04.410 --> 00:00:08.099
Let's say that this is the
current state of our project.

00:00:08.099 --> 00:00:10.320
We have the master branch
with three commits,

00:00:10.320 --> 00:00:11.850
m1, m2, and m3.

00:00:11.850 --> 00:00:13.920
And then we also have
the feature branch

00:00:13.920 --> 00:00:17.025
with the commits F1, F2, and F3.

00:00:17.025 --> 00:00:19.935
And imagine that in each
one of these commits,

00:00:19.935 --> 00:00:22.095
we delivered one single file.

00:00:22.095 --> 00:00:24.300
For example, in M1 commit,

00:00:24.300 --> 00:00:26.220
we deliver m1 dot TXT.

00:00:26.220 --> 00:00:28.980
In M2 commit, we
deliver m2 dot TXT,

00:00:28.980 --> 00:00:32.040
so on and so forth for all
the rest of the comments.

00:00:32.040 --> 00:00:34.140
Now I'm not going to
keep the file names

00:00:34.140 --> 00:00:36.660
in this diagram just
to keep it clean.

00:00:36.660 --> 00:00:39.210
Now let us assume that while

00:00:39.210 --> 00:00:41.620
I'm working on
feature one changes,

00:00:41.620 --> 00:00:45.155
I have two additional
comments and master branch.

00:00:45.155 --> 00:00:47.045
Now a question to you,

00:00:47.045 --> 00:00:50.555
if I decide to merge feature
one into master now,

00:00:50.555 --> 00:00:55.830
can we expect to perform fast
forward merge in this case?

00:00:56.350 --> 00:01:00.545
The answer is no, it will
not be able to do that.

00:01:00.545 --> 00:01:02.900
Okay, let us
hypothetically assume that

00:01:02.900 --> 00:01:05.045
good has done fast
forward merge.

00:01:05.045 --> 00:01:07.130
So we now have the master branch

00:01:07.130 --> 00:01:10.010
pointing to the latest commit
off feature one branch.

00:01:10.010 --> 00:01:12.515
Can you guess what's
going to happen?

00:01:12.515 --> 00:01:15.020
Well, we wanted to lose changes

00:01:15.020 --> 00:01:17.629
introduced and m four
and m phi combatants

00:01:17.629 --> 00:01:20.210
because they don't fall under
the parent hierarchy of

00:01:20.210 --> 00:01:23.270
the commit that the master
branch is pointing to.

00:01:23.270 --> 00:01:26.060
This is not an ideal
thing to do and the good

00:01:26.060 --> 00:01:29.435
doesn't perform fast
forward merge in this case.

00:01:29.435 --> 00:01:31.610
What IT performance though is

00:01:31.610 --> 00:01:33.710
so-called a three-way merge.

00:01:33.710 --> 00:01:36.200
So what essentially does is

00:01:36.200 --> 00:01:39.035
when we decide to merge feature
one into master branch,

00:01:39.035 --> 00:01:41.330
we went to go inside
the master branch and

00:01:41.330 --> 00:01:44.015
ask get to perform the merge.

00:01:44.015 --> 00:01:46.550
And when we tell it so get will

00:01:46.550 --> 00:01:50.030
artificially create a commit
with what we initiating it.

00:01:50.030 --> 00:01:53.075
This commit will
have two parents.

00:01:53.075 --> 00:01:55.820
In other words, this commit
object would point to

00:01:55.820 --> 00:01:58.460
two other common objects and

00:01:58.460 --> 00:02:00.350
those comments out
the last comments

00:02:00.350 --> 00:02:02.435
of both these branches,

00:02:02.435 --> 00:02:05.615
this commit is
called merge commit.

00:02:05.615 --> 00:02:08.495
And the resulting
snapshot of this commit,

00:02:08.495 --> 00:02:10.130
the combination of changes

00:02:10.130 --> 00:02:12.034
introduced in both the branches.

00:02:12.034 --> 00:02:14.900
Essentially, if you want to
view the working directory

00:02:14.900 --> 00:02:17.915
of master branch after
performing the merge,

00:02:17.915 --> 00:02:19.550
you're going to see
all the changes

00:02:19.550 --> 00:02:22.115
introduced in both the branches.

00:02:22.115 --> 00:02:24.155
Once we're done
with the merging,

00:02:24.155 --> 00:02:27.665
we can go ahead and delete
the feature one branch.

00:02:27.665 --> 00:02:30.080
Do take a note deleting feature

00:02:30.080 --> 00:02:32.600
one branch would only
delete that branch,

00:02:32.600 --> 00:02:35.540
but not the commits that
are in the feature branch.

00:02:35.540 --> 00:02:38.750
Because merge commit is
referencing to commit.

00:02:38.750 --> 00:02:40.490
So feature branch, so

00:02:40.490 --> 00:02:42.275
get will not be able
to delete that,

00:02:42.275 --> 00:02:45.200
are qualified them for
garbage collection.

00:02:45.200 --> 00:02:47.000
Now what we are talking right

00:02:47.000 --> 00:02:49.159
now is the best-case scenario.

00:02:49.159 --> 00:02:52.790
Most often we have
so-called merge conflicts.

00:02:52.790 --> 00:02:54.875
For example, if I
added the same file

00:02:54.875 --> 00:02:56.404
in both the branches.

00:02:56.404 --> 00:02:59.254
And then when we tried
to merge these branches,

00:02:59.254 --> 00:03:02.824
get is going to tell us that
there is conflict of changes

00:03:02.824 --> 00:03:04.369
in both the branches

00:03:04.369 --> 00:03:06.830
only after we resolve
that merge conflict.

00:03:06.830 --> 00:03:09.140
Well, the git merge
all branches.

00:03:09.140 --> 00:03:13.295
Going to talk about merge
conflicts in coming lectures.

00:03:13.295 --> 00:03:15.230
And you might be
wondering why this is

00:03:15.230 --> 00:03:17.105
called a three-way merge.

00:03:17.105 --> 00:03:18.830
Well, you're going
to find answer to

00:03:18.830 --> 00:03:20.840
that as well in
upcoming lectures.

00:03:20.840 --> 00:03:23.975
Once after we talk about
the merge conflicts.

00:03:23.975 --> 00:03:25.370
Next, we're going
to take a look at

00:03:25.370 --> 00:03:27.575
an example of three-way merge,

00:03:27.575 --> 00:03:30.770
assuming that we do not
have any kind of conflicts.

00:03:30.770 --> 00:03:33.180
I'll see you in the next one.
