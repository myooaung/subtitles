WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.650 --> 00:00:02.850
Let us say I would
like to delete

00:00:02.850 --> 00:00:04.980
a branch on the
remote repository.

00:00:04.980 --> 00:00:08.490
Now what would be its
implications? Let's take a look.

00:00:08.490 --> 00:00:10.785
First of all, before
you delete the branch,

00:00:10.785 --> 00:00:12.420
needed to make sure
that all those changes

00:00:12.420 --> 00:00:14.340
are merged into another branch.

00:00:14.340 --> 00:00:15.720
You also need to discuss with

00:00:15.720 --> 00:00:17.070
all the people who are actively

00:00:17.070 --> 00:00:20.580
involved in contributing
to that particular branch.

00:00:20.580 --> 00:00:22.620
Before you delete it.

00:00:22.620 --> 00:00:28.000
Let us go ahead and delete
one of the branches.

00:00:28.670 --> 00:00:31.560
And I'm going to
delete the feature to

00:00:31.560 --> 00:00:34.680
branch by clicking on this icon.

00:00:34.680 --> 00:00:36.690
You can also delete
a remote branch

00:00:36.690 --> 00:00:38.235
from your local machine,

00:00:38.235 --> 00:00:41.620
will explode that in
upcoming lectures.

00:00:41.620 --> 00:00:46.790
Let's say this is one of the
developers computer maybe

00:00:46.790 --> 00:00:54.450
looks here if I run the command
git remote show origin,

00:00:54.760 --> 00:00:58.700
you would notice
that Git has shown

00:00:58.700 --> 00:01:02.240
this feature to branch as stale.

00:01:02.240 --> 00:01:04.580
And it has also indicated us to

00:01:04.580 --> 00:01:06.350
use this command git remote

00:01:06.350 --> 00:01:10.955
prone to remove this branch,
promote local system.

00:01:10.955 --> 00:01:13.280
Alternatively, you can also run

00:01:13.280 --> 00:01:17.510
the command git fetch broom.

00:01:17.510 --> 00:01:18.800
With this command, git will

00:01:18.800 --> 00:01:20.495
connect to the
remote repository.

00:01:20.495 --> 00:01:23.645
In this case, it would
default to the origin remote.

00:01:23.645 --> 00:01:26.420
And then it will delete
all the differences in

00:01:26.420 --> 00:01:28.340
your local enrollment
that are no

00:01:28.340 --> 00:01:30.875
longer in use in the
remote repository.

00:01:30.875 --> 00:01:33.200
Now, do take note that
this command will only

00:01:33.200 --> 00:01:36.380
delete the tracking branches,

00:01:36.380 --> 00:01:38.165
but not your local branches.

00:01:38.165 --> 00:01:41.645
Your local branch would
still stay intact.

00:01:41.645 --> 00:01:44.760
So let's run this command.

00:01:46.390 --> 00:01:50.615
So this has deleted
the tracking branch.

00:01:50.615 --> 00:01:56.165
If you want to do the same
from Visual Studio Code,

00:01:56.165 --> 00:01:58.800
just click on this icon.

00:01:58.930 --> 00:02:01.460
Go to pull, push section.

00:02:01.460 --> 00:02:05.345
And then you will find this
option that says Fetch prune.

00:02:05.345 --> 00:02:08.870
That would do the same
job as with this command.

00:02:08.870 --> 00:02:12.484
Now since you have a local
pizza to branch still intact.

00:02:12.484 --> 00:02:15.110
And you might as well be
having your own set of changes

00:02:15.110 --> 00:02:18.094
or commits in feature to branch.

00:02:18.094 --> 00:02:19.685
Well, you can push

00:02:19.685 --> 00:02:22.055
all those commits to
the remote repository.

00:02:22.055 --> 00:02:24.770
And that way this branch
would be recreated.

00:02:24.770 --> 00:02:26.420
Or you can also
make those comments

00:02:26.420 --> 00:02:28.204
part of some other branch.

00:02:28.204 --> 00:02:31.760
We're going to talk about git
push in upcoming lectures.

00:02:31.760 --> 00:02:34.640
But let's try to run
this command again.

00:02:34.640 --> 00:02:36.890
And it would no longer see

00:02:36.890 --> 00:02:40.920
feature to branch under
remote branches section.

00:02:41.320 --> 00:02:46.205
Let me go back to GitHub
and restored this branch.

00:02:46.205 --> 00:02:51.755
Once again. Run the command Now.

00:02:51.755 --> 00:02:56.630
Then it says that when
we do the next fetch,

00:02:56.630 --> 00:02:59.390
it would create a
new tracking branch

00:02:59.390 --> 00:03:01.650
for the feature to branch.

00:03:01.720 --> 00:03:05.190
Let's do that real quick.

00:03:07.480 --> 00:03:09.950
And you can see
that the feature to

00:03:09.950 --> 00:03:12.380
branch is now being tracked

00:03:12.380 --> 00:03:14.630
where essentially
in the same state

00:03:14.630 --> 00:03:17.195
as with the start of this video.

00:03:17.195 --> 00:03:19.530
I'll see you next.
