WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.870
Let's now talk about
verified commits.

00:00:03.870 --> 00:00:06.960
The concept of verified
comments is no different

00:00:06.960 --> 00:00:08.280
from the concept of

00:00:08.280 --> 00:00:10.530
digital signatures
we've talked earlier,

00:00:10.530 --> 00:00:13.050
except in place of Bob Dylan to

00:00:13.050 --> 00:00:15.645
have get in place of Alice.

00:00:15.645 --> 00:00:17.190
We're going to have GitHub.

00:00:17.190 --> 00:00:19.035
And in place of this file,

00:00:19.035 --> 00:00:21.690
we're going to have the comma.

00:00:21.690 --> 00:00:24.810
Let us assume that Luke
wants to distal assign

00:00:24.810 --> 00:00:27.975
a commit and push it to
the GitHub repository.

00:00:27.975 --> 00:00:30.395
On GitHub, we want to verify if

00:00:30.395 --> 00:00:33.305
that commit has actually
come from Mr. loop.

00:00:33.305 --> 00:00:35.420
So initially, Luke is going

00:00:35.420 --> 00:00:37.460
to generate public
and private keys,

00:00:37.460 --> 00:00:40.730
is going to upload his public
key on his GitHub account.

00:00:40.730 --> 00:00:41.990
And he's going to use the

00:00:41.990 --> 00:00:44.075
private key to
sign the comments.

00:00:44.075 --> 00:00:47.915
Once again, it's not exactly
Luke who would do all that.

00:00:47.915 --> 00:00:50.090
It would all be
taken care by get,

00:00:50.090 --> 00:00:52.190
by just running a
simple command.

00:00:52.190 --> 00:00:54.005
When it runs that command,

00:00:54.005 --> 00:00:56.795
git is essentially going to
distal assign the commit.

00:00:56.795 --> 00:00:59.120
And once after loop
pushes the commit to

00:00:59.120 --> 00:01:01.625
GitHub on the GitHub site.

00:01:01.625 --> 00:01:04.040
Github will verify
if it has come

00:01:04.040 --> 00:01:07.100
from Luke by using
his public key.

00:01:07.100 --> 00:01:09.260
Let us take a look
at details steps

00:01:09.260 --> 00:01:12.140
involved in this entire process.

00:01:12.140 --> 00:01:14.585
So initially local, gender,

00:01:14.585 --> 00:01:17.645
public and private
key using some tool,

00:01:17.645 --> 00:01:20.270
it would then upload
the public key on

00:01:20.270 --> 00:01:22.340
his GitHub account so that

00:01:22.340 --> 00:01:25.489
GitHub can use it to
verify the commits.

00:01:25.489 --> 00:01:29.300
Local distal assign the
commit using his private key.

00:01:29.300 --> 00:01:31.355
By just simply
running a command.

00:01:31.355 --> 00:01:34.175
Luke will then push
the changes to GitHub.

00:01:34.175 --> 00:01:38.210
Github will verify the commit
by using Luke's public key.

00:01:38.210 --> 00:01:40.010
If GitHub cannot decrypt the

00:01:40.010 --> 00:01:41.825
Comanches and looks public key.

00:01:41.825 --> 00:01:44.765
It means that the comedian
come from Mr. Luke.

00:01:44.765 --> 00:01:46.100
Somebody else might have made

00:01:46.100 --> 00:01:48.755
that commit isn't
their private key.

00:01:48.755 --> 00:01:52.770
We're going to see all
this inaction up next.
