WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.640
You've probably
heard of git commit,

00:00:02.640 --> 00:00:05.805
but what exactly is
it? Let's take a look.

00:00:05.805 --> 00:00:08.700
Imagine that you are
playing a video game.

00:00:08.700 --> 00:00:11.220
And assume that you have
made enough progress

00:00:11.220 --> 00:00:13.905
in the game that you don't
want to risk losing.

00:00:13.905 --> 00:00:15.750
You save the game
at that point in

00:00:15.750 --> 00:00:18.655
time by giving a
meaningful message,

00:00:18.655 --> 00:00:21.560
you continue playing the
game and make some progress.

00:00:21.560 --> 00:00:23.840
And once again, you feel
like saving the game.

00:00:23.840 --> 00:00:27.725
And you do just start by
giving a meaningful message.

00:00:27.725 --> 00:00:30.470
And if something were to
go wrong with your game,

00:00:30.470 --> 00:00:33.380
you just take a look at all
the list off saves you are

00:00:33.380 --> 00:00:37.730
made and load the game
at a particular point.

00:00:37.730 --> 00:00:40.220
Now, you need to note that

00:00:40.220 --> 00:00:42.845
the save here is not
actually a backup.

00:00:42.845 --> 00:00:45.170
It is kind of like a snapshot.

00:00:45.170 --> 00:00:47.270
For example, you
cannot just copy

00:00:47.270 --> 00:00:49.850
the save file and take
it to another system

00:00:49.850 --> 00:00:52.100
where the same game is
installed and be able

00:00:52.100 --> 00:00:54.560
to load the game from
that saved point.

00:00:54.560 --> 00:00:57.875
It's not possible. However,
if this is a backup,

00:00:57.875 --> 00:01:00.800
you take backup of the
entire game altogether.

00:01:00.800 --> 00:01:04.025
For example, if game
is inside a folder,

00:01:04.025 --> 00:01:06.425
you would just copy
the entire folder,

00:01:06.425 --> 00:01:08.075
take it to another system,

00:01:08.075 --> 00:01:11.215
and start the game where
you want to start.

00:01:11.215 --> 00:01:14.090
Saved here is essentially
like a snapshot,

00:01:14.090 --> 00:01:16.685
but not exactly a backup.

00:01:16.685 --> 00:01:18.980
Similar analogy can be explained

00:01:18.980 --> 00:01:21.740
with Windows restore points.

00:01:21.740 --> 00:01:24.110
You might be creating
multiple restore points

00:01:24.110 --> 00:01:25.954
by giving a meaningful message.

00:01:25.954 --> 00:01:28.190
And if something goes
wrong with your system,

00:01:28.190 --> 00:01:30.125
maybe a virus or something,

00:01:30.125 --> 00:01:31.940
I really wish that
doesn't happen.

00:01:31.940 --> 00:01:33.814
But if something
like that happens,

00:01:33.814 --> 00:01:35.960
you just take a look
at all the list

00:01:35.960 --> 00:01:37.865
off restored once
you have created,

00:01:37.865 --> 00:01:39.830
choose one of them and restore

00:01:39.830 --> 00:01:42.500
the system back to
its earlier state.

00:01:42.500 --> 00:01:45.080
Just as you have
restored points for

00:01:45.080 --> 00:01:49.235
Microsoft or save
option for a game,

00:01:49.235 --> 00:01:51.440
you have git commit.

00:01:51.440 --> 00:01:53.490
For your project.

00:01:53.590 --> 00:01:56.480
You're going to make some
progress in your project.

00:01:56.480 --> 00:01:57.710
For example, let's assume you

00:01:57.710 --> 00:01:59.720
have blogged on feature one.

00:01:59.720 --> 00:02:02.840
And then you feel like
you've done enough to

00:02:02.840 --> 00:02:06.244
save the project or
commit the project.

00:02:06.244 --> 00:02:10.160
You do just that by using
the command git commit.

00:02:10.160 --> 00:02:12.410
And then you continue
with the project.

00:02:12.410 --> 00:02:14.810
You work on another feature and

00:02:14.810 --> 00:02:18.860
then commit the project
with a meaningful message.

00:02:18.860 --> 00:02:21.425
And if something goes
wrong with your project,

00:02:21.425 --> 00:02:23.390
then get will allow you to go

00:02:23.390 --> 00:02:25.445
back to earlier
state of the project

00:02:25.445 --> 00:02:30.820
or revert a particular file
to its earlier versions, etc.

00:02:30.820 --> 00:02:33.920
Just like saved is not
a backup in a game.

00:02:33.920 --> 00:02:35.750
Git commit is not
actually taking

00:02:35.750 --> 00:02:37.865
a backup of your entire project,

00:02:37.865 --> 00:02:40.040
but rather taking a snapshot of

00:02:40.040 --> 00:02:43.655
your project at that
particular instance of time.

00:02:43.655 --> 00:02:45.590
As in that you have created

00:02:45.590 --> 00:02:47.450
a project with all these files.

00:02:47.450 --> 00:02:50.090
And now you feel like
you've done enough to save

00:02:50.090 --> 00:02:54.455
the project or commit all the
changes to the repository.

00:02:54.455 --> 00:02:57.080
Now you can't just go
and run the command git

00:02:57.080 --> 00:02:58.270
commit and mentioned

00:02:58.270 --> 00:02:59.870
all the files that
you want to come at.

00:02:59.870 --> 00:03:01.040
It doesn't work that way.

00:03:01.040 --> 00:03:04.010
Unfortunately, there's
an additional step

00:03:04.010 --> 00:03:06.005
involved before you come in.

00:03:06.005 --> 00:03:07.760
And there's a reason for that.

00:03:07.760 --> 00:03:10.070
For example, you could
be having other files in

00:03:10.070 --> 00:03:13.040
the project which are not
meant to be committed.

00:03:13.040 --> 00:03:14.690
You don't want other
team members to

00:03:14.690 --> 00:03:16.655
be able to access these files.

00:03:16.655 --> 00:03:20.000
For example, it could be having
some auto-generated files

00:03:20.000 --> 00:03:22.520
or you could be
having certain files

00:03:22.520 --> 00:03:25.369
which are intended only
to be used locally,

00:03:25.369 --> 00:03:28.310
but shouldn't be available
to outside world.

00:03:28.310 --> 00:03:30.200
And that's where we
have an additional

00:03:30.200 --> 00:03:31.925
step where you need to let

00:03:31.925 --> 00:03:36.440
get no motor all the files
you wanted to track.

00:03:36.440 --> 00:03:38.120
Currently, all these files in

00:03:38.120 --> 00:03:41.795
your working directory are
not actually tracked by Git.

00:03:41.795 --> 00:03:43.970
You need to explicitly
tell it what

00:03:43.970 --> 00:03:46.040
are all the files
you wanted to track.

00:03:46.040 --> 00:03:49.400
You can do that with
the command git add.

00:03:49.400 --> 00:03:51.440
You want to use this
command git add.

00:03:51.440 --> 00:03:53.270
And you'd mentioned all
the files in this case,

00:03:53.270 --> 00:03:55.625
we're going to mention
by layer file,

00:03:55.625 --> 00:03:59.450
file C and D and run
the command that would

00:03:59.450 --> 00:04:04.175
essentially copy all those
files into staging area.

00:04:04.175 --> 00:04:08.209
And this is when get will
start tracking these files.

00:04:08.209 --> 00:04:10.040
Once you do that,
you're going to use git

00:04:10.040 --> 00:04:11.870
commit command to sort

00:04:11.870 --> 00:04:15.950
of commit all the changes
to a local repository,

00:04:15.950 --> 00:04:19.415
or sometimes termed
as object database.

00:04:19.415 --> 00:04:22.040
And this is not the only
case where you might

00:04:22.040 --> 00:04:24.875
be needing git add git commit.

00:04:24.875 --> 00:04:27.785
Let's take a look at
one more use case.

00:04:27.785 --> 00:04:31.070
Imagine that you have couple
of features to walk on.

00:04:31.070 --> 00:04:34.670
And you simultaneously worked
on both the features and

00:04:34.670 --> 00:04:36.185
assume that feature one

00:04:36.185 --> 00:04:38.960
changes went inside
file a and file B.

00:04:38.960 --> 00:04:42.665
And feature two changes
went in file C and D. Now

00:04:42.665 --> 00:04:44.150
we want these two features to be

00:04:44.150 --> 00:04:46.325
going on to different commits,

00:04:46.325 --> 00:04:47.810
not in a single comment.

00:04:47.810 --> 00:04:49.175
How do we do that?

00:04:49.175 --> 00:04:51.394
If there is no
concept of staging?

00:04:51.394 --> 00:04:54.020
And if we were to use
the command git commit,

00:04:54.020 --> 00:04:57.320
that would commit all these
changes, we don't want that.

00:04:57.320 --> 00:04:59.435
So with git add command,

00:04:59.435 --> 00:05:02.735
we'll first add all the files
related to feature one.

00:05:02.735 --> 00:05:04.160
And then we'll commit

00:05:04.160 --> 00:05:06.500
the changes with a
meaningful message,

00:05:06.500 --> 00:05:07.685
just as we are given

00:05:07.685 --> 00:05:09.920
a meaningful message
while saving a game.

00:05:09.920 --> 00:05:12.890
We're also going to do the
same in gets off comet.

00:05:12.890 --> 00:05:15.215
Now, once you're done with that,

00:05:15.215 --> 00:05:20.795
we're going to add file C and
D and commit as feature to.

00:05:20.795 --> 00:05:22.670
Over a period of time.

00:05:22.670 --> 00:05:25.205
We're going to maintain
all such comments

00:05:25.205 --> 00:05:27.170
in our local repository.

00:05:27.170 --> 00:05:29.195
And that way we'll
be able to take

00:05:29.195 --> 00:05:31.250
a look at all the
historical data,

00:05:31.250 --> 00:05:32.930
would be able to
reward our project

00:05:32.930 --> 00:05:34.565
back to its earlier state.

00:05:34.565 --> 00:05:36.980
Or we can do what the
particular file to

00:05:36.980 --> 00:05:40.339
a particular version
from its past history.

00:05:40.339 --> 00:05:43.250
Or we might want to take a
look at the difference between

00:05:43.250 --> 00:05:46.760
the current version of the
file and its earlier versions,

00:05:46.760 --> 00:05:48.230
so on and so forth.

00:05:48.230 --> 00:05:49.580
We're going to
explore all that in

00:05:49.580 --> 00:05:51.125
coming lectures for sure.

00:05:51.125 --> 00:05:53.720
And eventually we're
going to push all this

00:05:53.720 --> 00:05:56.675
changes to a centralized
repository like GitHub.

00:05:56.675 --> 00:05:59.360
And that's all other team
members would be able to access

00:05:59.360 --> 00:06:01.430
your changes and also all your

00:06:01.430 --> 00:06:03.755
comments and historical data.

00:06:03.755 --> 00:06:06.830
However, that's the topic
of another chapter.

00:06:06.830 --> 00:06:10.190
I also should mention that
when I started using Git,

00:06:10.190 --> 00:06:12.605
I joined a local
GitHub community.

00:06:12.605 --> 00:06:14.330
Now asked them this question.

00:06:14.330 --> 00:06:16.340
Why do we need to
have a couple of

00:06:16.340 --> 00:06:18.964
steps to commit the changes?

00:06:18.964 --> 00:06:20.795
Why can't we just have a command

00:06:20.795 --> 00:06:22.535
that looks something like this.

00:06:22.535 --> 00:06:24.560
We're going to mention
git commit hyphen

00:06:24.560 --> 00:06:27.725
m. And then you're going
to give a message.

00:06:27.725 --> 00:06:29.030
And then you're
going to list down

00:06:29.030 --> 00:06:30.110
all the files that you want to

00:06:30.110 --> 00:06:31.490
commit that might be

00:06:31.490 --> 00:06:34.385
corresponding to feature
two, for instance.

00:06:34.385 --> 00:06:37.745
Well, I didn't get any
satisfactory answer from them.

00:06:37.745 --> 00:06:39.140
In fact, if you talk about

00:06:39.140 --> 00:06:40.505
other version control systems

00:06:40.505 --> 00:06:42.890
like Mercurial or subversive,

00:06:42.890 --> 00:06:44.945
they don't have this
additional step of

00:06:44.945 --> 00:06:47.880
adding the files
before committing.
