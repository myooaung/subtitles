WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.320 --> 00:00:04.470
Let's talk about distributed
version control system.

00:00:04.470 --> 00:00:07.020
Linda is quite happy
with the work done by

00:00:07.020 --> 00:00:08.970
Sunday and she started to

00:00:08.970 --> 00:00:11.430
notice increase in
our business revenue

00:00:11.430 --> 00:00:13.710
ever since she
launched a website.

00:00:13.710 --> 00:00:15.990
And due to increase
in customer demands,

00:00:15.990 --> 00:00:17.835
she now has decided to have

00:00:17.835 --> 00:00:20.790
even more features
in her website.

00:00:20.790 --> 00:00:25.005
She wants second approach
is to do the job for her.

00:00:25.005 --> 00:00:26.340
But this time, due to

00:00:26.340 --> 00:00:28.395
increasing demands
from our customers,

00:00:28.395 --> 00:00:31.305
she has a very short
deadline to watch.

00:00:31.305 --> 00:00:33.495
Sender has accepted the deal,

00:00:33.495 --> 00:00:35.580
but somebody is quite
aware of the fact

00:00:35.580 --> 00:00:37.440
that he cannot do this all

00:00:37.440 --> 00:00:39.180
alone and that he needed to

00:00:39.180 --> 00:00:41.320
hire a couple of
folks in his team,

00:00:41.320 --> 00:00:44.150
help him deliver the
project on time.

00:00:44.150 --> 00:00:47.855
So sunder hired a couple of
folks meet Asia and Luke,

00:00:47.855 --> 00:00:49.610
who are the new
members in the team.

00:00:49.610 --> 00:00:50.960
Sender has also provided

00:00:50.960 --> 00:00:53.180
them with a brand
new MacBook Pro,

00:00:53.180 --> 00:00:56.645
shared them the project
files or the code.

00:00:56.645 --> 00:00:59.435
Or maybe he has hosted
return an FTP server,

00:00:59.435 --> 00:01:01.985
shared the link and
ask them to download.

00:01:01.985 --> 00:01:04.130
And he has also instructed
them to install

00:01:04.130 --> 00:01:06.650
the software on the
local computer,

00:01:06.650 --> 00:01:08.225
given all its benefits.

00:01:08.225 --> 00:01:10.040
Of course, under has his own

00:01:10.040 --> 00:01:12.020
local enrollment and its own set

00:01:12.020 --> 00:01:15.695
of problems as they're making
progress in the project.

00:01:15.695 --> 00:01:17.810
Since I started to
notice few problems

00:01:17.810 --> 00:01:20.240
with using a local
version control system.

00:01:20.240 --> 00:01:22.490
Some of the problems
that they're facing are

00:01:22.490 --> 00:01:26.150
these no historical
changes of other members.

00:01:26.150 --> 00:01:28.610
For example, if he shall
wants to take a look

00:01:28.610 --> 00:01:31.415
at historical changes
done on file a,

00:01:31.415 --> 00:01:32.720
she can only take a look at

00:01:32.720 --> 00:01:35.015
historical changes
that she has done,

00:01:35.015 --> 00:01:36.380
but she doesn't have access to

00:01:36.380 --> 00:01:38.870
historical data of somebody
else, for example,

00:01:38.870 --> 00:01:40.910
cylinder, because he only

00:01:40.910 --> 00:01:42.935
has access to her
own data store,

00:01:42.935 --> 00:01:44.795
but not so in this data store.

00:01:44.795 --> 00:01:46.850
Now this is clearly a problem.

00:01:46.850 --> 00:01:50.105
Unless she gets access to the
entire history of changes,

00:01:50.105 --> 00:01:52.595
she cannot effectively
work on a task.

00:01:52.595 --> 00:01:54.710
Another problem is it's

00:01:54.710 --> 00:01:57.140
difficult to maintain
the latest code base.

00:01:57.140 --> 00:01:59.225
Whenever somebody
makes a change,

00:01:59.225 --> 00:02:02.150
they need to let other
developers know they've done

00:02:02.150 --> 00:02:04.130
that change and the need to

00:02:04.130 --> 00:02:06.605
copy that code into their
local machine as well.

00:02:06.605 --> 00:02:08.420
So to have latest version of

00:02:08.420 --> 00:02:10.205
the code in all the computers,

00:02:10.205 --> 00:02:12.545
this is of course
practically impossible,

00:02:12.545 --> 00:02:15.050
especially when you have
multiple team members

00:02:15.050 --> 00:02:17.750
working on a single code base.

00:02:17.750 --> 00:02:20.345
And things would become
even more complicated

00:02:20.345 --> 00:02:23.795
if two people happen to work
on the same exact file.

00:02:23.795 --> 00:02:26.990
Another problem is no
centralized management

00:02:26.990 --> 00:02:29.015
of roles or access control.

00:02:29.015 --> 00:02:30.680
For example, assume that

00:02:30.680 --> 00:02:32.420
someone wants to
put restriction on

00:02:32.420 --> 00:02:33.980
Luke that he can only access

00:02:33.980 --> 00:02:36.230
particular set of
folders in the project,

00:02:36.230 --> 00:02:37.939
but not the other folders.

00:02:37.939 --> 00:02:40.700
Well, with local
Washington control system,

00:02:40.700 --> 00:02:42.835
he doesn't have control on that.

00:02:42.835 --> 00:02:45.950
Sender has thought about all
these issues that they're

00:02:45.950 --> 00:02:49.430
facing and has done a
research on Google.

00:02:49.430 --> 00:02:51.620
And finally came up
with so-called a

00:02:51.620 --> 00:02:53.945
centralized version
control system.

00:02:53.945 --> 00:02:56.375
Would just simply
means that this time,

00:02:56.375 --> 00:02:58.145
instead of having
the data store,

00:02:58.145 --> 00:03:00.425
as well as the code in
the local enrollments

00:03:00.425 --> 00:03:02.150
are on the local machines.

00:03:02.150 --> 00:03:04.805
It's going to be on a
centralized server.

00:03:04.805 --> 00:03:06.470
And everybody would
pick the code from

00:03:06.470 --> 00:03:08.930
the centralized
server, work on it,

00:03:08.930 --> 00:03:10.700
and then send it back to

00:03:10.700 --> 00:03:14.270
the server so that others
can use their code.

00:03:14.270 --> 00:03:16.370
And with this, we can get rid of

00:03:16.370 --> 00:03:17.630
all the problems we had with

00:03:17.630 --> 00:03:19.385
local version control system.

00:03:19.385 --> 00:03:21.485
Once again, if esa
wants to take a look at

00:03:21.485 --> 00:03:24.035
all the historical data
of particular file,

00:03:24.035 --> 00:03:26.180
she will easily
get access to it.

00:03:26.180 --> 00:03:29.150
Because this time, all the
paths sets are maintained in

00:03:29.150 --> 00:03:30.740
a centralized server and

00:03:30.740 --> 00:03:33.200
all the developers would
have access to it.

00:03:33.200 --> 00:03:35.390
And with just a simple command,

00:03:35.390 --> 00:03:37.730
everybody would be able to
get the brand new latest

00:03:37.730 --> 00:03:40.475
code and they can start
working on top of it.

00:03:40.475 --> 00:03:42.830
So to avoid conflicts.

00:03:42.830 --> 00:03:44.360
And Cinder can also have

00:03:44.360 --> 00:03:46.745
better control as to
who can access what.

00:03:46.745 --> 00:03:49.715
Since everything is hosted
on a centralized server,

00:03:49.715 --> 00:03:53.030
he can now start to use
role-based access control.

00:03:53.030 --> 00:03:55.550
And he will have control
as to who can access

00:03:55.550 --> 00:03:58.475
which folders of the
project, et cetera.

00:03:58.475 --> 00:04:01.625
However, centralized
version control systems

00:04:01.625 --> 00:04:03.575
come with their own
set of problems.

00:04:03.575 --> 00:04:06.260
For example, what if
several goes for a toss?

00:04:06.260 --> 00:04:09.005
Or what if somebody
hacks the server?

00:04:09.005 --> 00:04:11.840
What if he shows having
connection issues?

00:04:11.840 --> 00:04:13.865
Maybe her Wi-Fi is not working.

00:04:13.865 --> 00:04:15.440
In all these cases,

00:04:15.440 --> 00:04:18.145
developers cannot
work on the project.

00:04:18.145 --> 00:04:19.970
They might as well risk losing

00:04:19.970 --> 00:04:23.480
the entire code if they're
unable to record the server.

00:04:23.480 --> 00:04:25.900
Considering all these
drawbacks offers

00:04:25.900 --> 00:04:28.020
centralized version
control system,

00:04:28.020 --> 00:04:30.320
had to find out an alternative.

00:04:30.320 --> 00:04:32.345
And that's how he
came across with

00:04:32.345 --> 00:04:34.895
a distributed version
control system.

00:04:34.895 --> 00:04:37.265
It's basically the best
of both the worlds

00:04:37.265 --> 00:04:40.175
of local VCS as well
as centralized VCS,

00:04:40.175 --> 00:04:42.485
eliminating all their drawbacks.

00:04:42.485 --> 00:04:45.695
This time with centralized
version control system.

00:04:45.695 --> 00:04:48.245
Instead of having one
single depository

00:04:48.245 --> 00:04:49.910
as the centralized server.

00:04:49.910 --> 00:04:51.920
Here, every single
durable will have

00:04:51.920 --> 00:04:54.980
their own server and each
one of the developer

00:04:54.980 --> 00:04:57.650
will have a copy of the
entire history or versions

00:04:57.650 --> 00:05:00.589
of the code in their
own local machine.

00:05:00.589 --> 00:05:02.180
What that means is even if

00:05:02.180 --> 00:05:04.175
the server what
to go for a task,

00:05:04.175 --> 00:05:06.320
everybody have their
own local copy of

00:05:06.320 --> 00:05:09.560
the entire code as well
as the historical data.

00:05:09.560 --> 00:05:11.600
And if someone like Asia,

00:05:11.600 --> 00:05:13.325
what to lose connectivity,

00:05:13.325 --> 00:05:15.724
maybe because of a
Wi-Fi connection,

00:05:15.724 --> 00:05:17.780
she can still make
progress because

00:05:17.780 --> 00:05:20.000
she's having everything
in her local computer.

00:05:20.000 --> 00:05:21.574
She can make changes.

00:05:21.574 --> 00:05:24.110
And whenever how connection
comes back to normal,

00:05:24.110 --> 00:05:25.670
she can deliver the code to

00:05:25.670 --> 00:05:27.680
the centralized server so that

00:05:27.680 --> 00:05:30.575
other developers can get them
and do something with it.

00:05:30.575 --> 00:05:32.540
Or in case of a data loss,

00:05:32.540 --> 00:05:33.740
every dollar plus having

00:05:33.740 --> 00:05:35.780
a backup of the
entire code base.

00:05:35.780 --> 00:05:39.320
So they can recall from
some of the examples of

00:05:39.320 --> 00:05:41.810
centralized version
control systems or

00:05:41.810 --> 00:05:45.845
CVS subversion or
simply SVN Perforce,

00:05:45.845 --> 00:05:47.150
or some of the examples of

00:05:47.150 --> 00:05:49.370
centralized version
control systems.

00:05:49.370 --> 00:05:51.230
Some of the examples
of distributed

00:05:51.230 --> 00:05:53.060
version control systems are

00:05:53.060 --> 00:05:56.870
Mercurial, Bazaar and Git.

00:05:56.870 --> 00:05:59.795
Git is a distributed
version control system.

00:05:59.795 --> 00:06:01.190
All the developers would have to

00:06:01.190 --> 00:06:03.260
install Git on the
local machine.

00:06:03.260 --> 00:06:05.765
In addition to that,
we also have GitHub,

00:06:05.765 --> 00:06:08.300
which acts like a
centralized server.

00:06:08.300 --> 00:06:10.595
I think we've gained
enough knowledge

00:06:10.595 --> 00:06:12.990
to start working with Git.
