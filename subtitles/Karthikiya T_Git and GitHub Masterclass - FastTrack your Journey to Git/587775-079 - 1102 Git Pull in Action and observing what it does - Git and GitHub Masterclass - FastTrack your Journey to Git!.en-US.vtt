WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.090 --> 00:00:03.130
Okay, Let us say
git pull in action.

00:00:03.130 --> 00:00:05.140
I'm currently a new
feature branch.

00:00:05.140 --> 00:00:08.290
Let me first try it on
in the command git pull.

00:00:08.290 --> 00:00:11.815
And it says already up to date.

00:00:11.815 --> 00:00:14.050
That means there are no
additional comments and

00:00:14.050 --> 00:00:15.910
remote repository that are not

00:00:15.910 --> 00:00:18.310
already present in
our local repository.

00:00:18.310 --> 00:00:21.850
So that is first go back
to remote repository

00:00:21.850 --> 00:00:23.230
and make a new commit in

00:00:23.230 --> 00:00:26.480
the feature branch or
the new feature branch.

00:00:27.330 --> 00:00:30.670
I'm actually going to
edit one of the files.

00:00:30.670 --> 00:00:32.170
It doesn't matter
whether you add

00:00:32.170 --> 00:00:34.255
a new file or edit
existing file.

00:00:34.255 --> 00:00:36.430
The point is to make a commit.

00:00:36.430 --> 00:00:38.200
So let me go ahead and click on

00:00:38.200 --> 00:00:40.345
this icon to edit this file.

00:00:40.345 --> 00:00:43.110
I'm not sure if you're
able to see this.

00:00:43.110 --> 00:00:45.740
Let me zoom in a little bit.

00:00:45.740 --> 00:00:49.395
So let me just add
one line of text,

00:00:49.395 --> 00:00:51.815
something of that sort.

00:00:51.815 --> 00:00:54.800
It doesn't really
matter what you add.

00:00:54.800 --> 00:00:56.435
Click on Commit Changes.

00:00:56.435 --> 00:00:58.400
If you wish to
attain the message,

00:00:58.400 --> 00:01:01.860
you can change it
and click Commit.

00:01:02.140 --> 00:01:06.560
So we now have additional
commit and remote repository,

00:01:06.560 --> 00:01:09.815
but that is not available
in our local machine.

00:01:09.815 --> 00:01:12.920
Now before I run the git
pull command once again,

00:01:12.920 --> 00:01:16.955
let me do git log and see
what it has to display.

00:01:16.955 --> 00:01:18.560
As you can see, new feature as

00:01:18.560 --> 00:01:20.345
well as origin new feature,

00:01:20.345 --> 00:01:22.025
which is the tracking branch,

00:01:22.025 --> 00:01:25.349
are pointing to the
exact same commit.

00:01:25.470 --> 00:01:30.410
Let me clear the screen
and run git pull command.

00:01:32.250 --> 00:01:36.100
As you can see initially it
has performed the git fetch

00:01:36.100 --> 00:01:40.135
operation and has
unpacked the new objects.

00:01:40.135 --> 00:01:41.890
So these are the
objects that got

00:01:41.890 --> 00:01:44.620
downloaded from the
remote repository.

00:01:44.620 --> 00:01:46.885
There are total
of three objects,

00:01:46.885 --> 00:01:48.580
which also includes
commit objects,

00:01:48.580 --> 00:01:52.045
three objects, blob
objects, et cetera.

00:01:52.045 --> 00:01:54.445
And then it went
ahead and performed

00:01:54.445 --> 00:01:56.800
fast forward merge in this case.

00:01:56.800 --> 00:02:00.055
Because fast forward
merge works in this case,

00:02:00.055 --> 00:02:02.784
we don't have any commits
in a local branch.

00:02:02.784 --> 00:02:06.610
And so git has performed
fast forward merge for us.

00:02:06.610 --> 00:02:09.350
Now if I do git log,

00:02:09.570 --> 00:02:12.955
you can see that the
local new feature branch,

00:02:12.955 --> 00:02:15.190
as well as the tracking branch,

00:02:15.190 --> 00:02:17.470
are pointing to this new commit,

00:02:17.470 --> 00:02:20.170
which is exactly the
commit which were

00:02:20.170 --> 00:02:24.200
made just a moment ago.

00:02:25.920 --> 00:02:29.455
It's f phi double d, whatever.

00:02:29.455 --> 00:02:32.230
And it's the same
hashCode you see here.

00:02:32.230 --> 00:02:36.190
Earlier with git-fetch, our
local branch was not updated.

00:02:36.190 --> 00:02:38.680
But with git pull,
not only have we

00:02:38.680 --> 00:02:41.650
fetched all the objects
and references,

00:02:41.650 --> 00:02:45.415
but also updated the
currently checked dot branch.

00:02:45.415 --> 00:02:47.020
One thing I should mention is

00:02:47.020 --> 00:02:49.420
that all the good pull
command would download

00:02:49.420 --> 00:02:51.015
the objects and references

00:02:51.015 --> 00:02:53.870
belonging to multiple
branches or even remotes.

00:02:53.870 --> 00:02:55.775
It is going to perform much

00:02:55.775 --> 00:02:58.679
on the currently
checked out branch.

00:02:58.870 --> 00:03:01.820
So when we did git pull,

00:03:01.820 --> 00:03:06.080
this is equivalent to
git pull origin because

00:03:06.080 --> 00:03:07.700
this is only the mode
which is currently

00:03:07.700 --> 00:03:10.955
configured and it
is the default one.

00:03:10.955 --> 00:03:13.805
But if you wish, you
can also specify

00:03:13.805 --> 00:03:16.580
the remote from where you'd
like to fetch objects from.

00:03:16.580 --> 00:03:18.320
And then perform the merge

00:03:18.320 --> 00:03:20.405
on the currently
checked dot branch,

00:03:20.405 --> 00:03:23.090
which in this case is
new feature branch.

00:03:23.090 --> 00:03:25.290
I'll see you next.
