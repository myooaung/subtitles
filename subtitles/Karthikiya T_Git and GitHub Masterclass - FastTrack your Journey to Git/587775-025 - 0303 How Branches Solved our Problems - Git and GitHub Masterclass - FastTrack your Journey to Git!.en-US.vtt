WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.599
Okay, so far we have some
idea about branches.

00:00:03.599 --> 00:00:05.850
Now let's take a
look at how branches

00:00:05.850 --> 00:00:08.430
solve the problems that
we had talked earlier.

00:00:08.430 --> 00:00:10.860
Let's talk about
them one-by-one.

00:00:10.860 --> 00:00:12.870
Imagine that you
are asked to work

00:00:12.870 --> 00:00:15.405
on multiple features
simultaneously.

00:00:15.405 --> 00:00:18.405
This time, you're going to
have multiple branches,

00:00:18.405 --> 00:00:20.985
each corresponding to
individual feature.

00:00:20.985 --> 00:00:23.010
It's very easy for
you to multitask

00:00:23.010 --> 00:00:25.935
because let's say that you
wanted to work on feature one.

00:00:25.935 --> 00:00:27.540
You just simply
going to switch to

00:00:27.540 --> 00:00:30.870
that branch and continue
working on feature one.

00:00:30.870 --> 00:00:33.090
Somewhere in the
middle of your work,

00:00:33.090 --> 00:00:35.610
you might have decided to
work on another feature,

00:00:35.610 --> 00:00:38.040
say feature to maybe
because you're waiting

00:00:38.040 --> 00:00:40.770
for an email reply
or whatsoever.

00:00:40.770 --> 00:00:41.920
So guess what?

00:00:41.920 --> 00:00:43.250
He went to switch
to a feature to

00:00:43.250 --> 00:00:46.250
branch and continue
working on feature two.

00:00:46.250 --> 00:00:48.230
And since coat
changes introduced in

00:00:48.230 --> 00:00:49.670
one branch will not have

00:00:49.670 --> 00:00:51.680
any impact on the
other branches.

00:00:51.680 --> 00:00:54.350
There's no chance that you
would confuse yourself

00:00:54.350 --> 00:00:57.515
with code changes introduced
for multiple features.

00:00:57.515 --> 00:01:00.845
We have a separate contexts
for each and every feature.

00:01:00.845 --> 00:01:03.425
And they evolve
independent to each other.

00:01:03.425 --> 00:01:06.500
So branches has sort of
solve the problem of

00:01:06.500 --> 00:01:10.700
not being able to multitask
between multiple features.

00:01:10.700 --> 00:01:12.920
Now assume that
some inexperienced

00:01:12.920 --> 00:01:15.215
programmer joined the team.

00:01:15.215 --> 00:01:16.355
Guess what?

00:01:16.355 --> 00:01:18.995
They can just create
a branch, experiment.

00:01:18.995 --> 00:01:21.005
Everything that they
wanted to experiment,

00:01:21.005 --> 00:01:23.180
make mistakes, learn from

00:01:23.180 --> 00:01:26.435
those mistakes,
and bring updates.

00:01:26.435 --> 00:01:28.895
Finally, when they're
ready with the changes.

00:01:28.895 --> 00:01:31.385
And once after the test
all those changes,

00:01:31.385 --> 00:01:32.900
senior members in the team can

00:01:32.900 --> 00:01:34.999
actually review all
the code changes.

00:01:34.999 --> 00:01:37.460
And only then will they accept

00:01:37.460 --> 00:01:38.810
all those changes to be

00:01:38.810 --> 00:01:42.050
merged with the mainstream
of development.

00:01:42.050 --> 00:01:45.440
So there's no scope of one
member in the team messing

00:01:45.440 --> 00:01:49.190
with the code and costing
other's work as well.

00:01:49.190 --> 00:01:51.230
Now let's say that
you wanted to get

00:01:51.230 --> 00:01:52.880
rid of one of the features,

00:01:52.880 --> 00:01:55.670
then you don't have to take
their forte of undoing

00:01:55.670 --> 00:02:00.050
all the changes and
risk creating problems.

00:02:00.050 --> 00:02:01.970
Or you don't have to
go back to one of

00:02:01.970 --> 00:02:03.680
the previous commits and

00:02:03.680 --> 00:02:07.460
risk losing all the team's
effort that came after it.

00:02:07.460 --> 00:02:09.560
Instead, you can
just simply delete

00:02:09.560 --> 00:02:11.450
the branch and you get it up.

00:02:11.450 --> 00:02:13.490
The feature that you don't want.

00:02:13.490 --> 00:02:15.770
It will not have
any kind of impact

00:02:15.770 --> 00:02:18.455
or influence on others work.

00:02:18.455 --> 00:02:20.270
One another advantage with

00:02:20.270 --> 00:02:23.884
branches is that you can
make partial commits.

00:02:23.884 --> 00:02:26.690
Without branches that we
made partial commits,

00:02:26.690 --> 00:02:28.700
you might risk
introducing new bugs in

00:02:28.700 --> 00:02:31.040
your application are breaking

00:02:31.040 --> 00:02:32.780
some of the working features.

00:02:32.780 --> 00:02:34.370
However, with branches, you can

00:02:34.370 --> 00:02:36.245
make multiple partial commits,

00:02:36.245 --> 00:02:38.855
especially if your
feature is very big.

00:02:38.855 --> 00:02:40.310
And once you're done,

00:02:40.310 --> 00:02:41.915
you're just simply
going to merge

00:02:41.915 --> 00:02:44.375
all those changes onto
the master branch.

00:02:44.375 --> 00:02:47.010
Hope it makes sense.
