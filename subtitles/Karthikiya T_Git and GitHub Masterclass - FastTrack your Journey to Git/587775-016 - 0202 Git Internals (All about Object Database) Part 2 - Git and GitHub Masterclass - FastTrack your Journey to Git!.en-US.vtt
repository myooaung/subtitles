WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.970
Let's talk about how
good it actually stores

00:00:02.970 --> 00:00:05.385
the data inside the
object database.

00:00:05.385 --> 00:00:06.960
In our previous lecture,

00:00:06.960 --> 00:00:09.030
we had created a
project with bunch of

00:00:09.030 --> 00:00:11.745
files and we committed
those changes.

00:00:11.745 --> 00:00:14.700
And here is the project
structure we had.

00:00:14.700 --> 00:00:16.230
We have the my app folder,

00:00:16.230 --> 00:00:18.119
which is the root
project directory.

00:00:18.119 --> 00:00:20.550
Inside of which we have
one dot takes you to dot

00:00:20.550 --> 00:00:23.985
TXT and also a subdirectory
called assets.

00:00:23.985 --> 00:00:25.935
Inside the assets directory,

00:00:25.935 --> 00:00:29.385
we have one sub dot
dx dy and dx dy.

00:00:29.385 --> 00:00:31.380
Now let's take a look at how

00:00:31.380 --> 00:00:33.060
these files are
actually stored inside

00:00:33.060 --> 00:00:35.840
the database for
which we need to

00:00:35.840 --> 00:00:40.370
understand various types
of objects that get has.

00:00:40.370 --> 00:00:43.204
First we have the Blob object

00:00:43.204 --> 00:00:45.740
for each and every unique
file that you come at.

00:00:45.740 --> 00:00:49.790
There's one blob object
created inside the database.

00:00:49.790 --> 00:00:51.710
Each of the blob
object would store

00:00:51.710 --> 00:00:53.960
the content of their
corresponding file.

00:00:53.960 --> 00:00:56.990
For example, we might have
a Blob object created for

00:00:56.990 --> 00:01:00.680
one dot dxdy with
all its content.

00:01:00.680 --> 00:01:04.715
Each of the blob object will
also have a unique hash.

00:01:04.715 --> 00:01:06.470
And as you might have guessed,

00:01:06.470 --> 00:01:08.030
this hash would be generated

00:01:08.030 --> 00:01:10.595
using Siobhan hashing algorithm.

00:01:10.595 --> 00:01:12.590
And the input of
that algorithm would

00:01:12.590 --> 00:01:14.570
be the content of the file.

00:01:14.570 --> 00:01:16.175
It is not really using

00:01:16.175 --> 00:01:19.925
Siobhan algorithm to secure
the application or something.

00:01:19.925 --> 00:01:21.380
It is using it to create

00:01:21.380 --> 00:01:24.320
a unique identifier
for its objects.

00:01:24.320 --> 00:01:26.360
And the content that
gets stored inside

00:01:26.360 --> 00:01:29.480
the blob won't be in
human-readable format.

00:01:29.480 --> 00:01:31.849
It will be stored in
compressed format.

00:01:31.849 --> 00:01:33.890
So I'd get can
efficiently store,

00:01:33.890 --> 00:01:35.630
manage, and retrieve it.

00:01:35.630 --> 00:01:39.125
However, get also
offer certain commands

00:01:39.125 --> 00:01:40.850
using which would be able to

00:01:40.850 --> 00:01:42.770
read the content
inside the blob.

00:01:42.770 --> 00:01:45.515
We're going to explore
that in coming lectures.

00:01:45.515 --> 00:01:47.480
Now, since there are four files

00:01:47.480 --> 00:01:49.490
which we had committed earlier,

00:01:49.490 --> 00:01:52.640
there are going to be
for blobs created inside

00:01:52.640 --> 00:01:54.320
the database along with

00:01:54.320 --> 00:01:57.455
their corresponding
contents of those files.

00:01:57.455 --> 00:02:00.545
Next we have three object.

00:02:00.545 --> 00:02:02.390
Tree object would correspond to

00:02:02.390 --> 00:02:04.355
each and every director
in the project,

00:02:04.355 --> 00:02:06.800
including the project
root directory.

00:02:06.800 --> 00:02:09.005
And just as with Blob object,

00:02:09.005 --> 00:02:10.850
tree object is
also going to have

00:02:10.850 --> 00:02:12.740
a unique cache to uniquely

00:02:12.740 --> 00:02:14.885
identify a particular
tree object.

00:02:14.885 --> 00:02:16.700
In addition to
that, it will have

00:02:16.700 --> 00:02:19.280
references are
essentially it will

00:02:19.280 --> 00:02:21.200
maintain the hash codes of

00:02:21.200 --> 00:02:22.580
other blob objects or

00:02:22.580 --> 00:02:24.815
three objects or
combination of both.

00:02:24.815 --> 00:02:26.750
For example, we have

00:02:26.750 --> 00:02:28.925
a couple of folders
inside our project.

00:02:28.925 --> 00:02:31.340
And so they're all going to
be couple of three objects

00:02:31.340 --> 00:02:34.460
created for each one
of these directories.

00:02:34.460 --> 00:02:36.530
So we will have a tree object

00:02:36.530 --> 00:02:39.020
created for the
assets directory.

00:02:39.020 --> 00:02:41.300
And inside that
object it will hold

00:02:41.300 --> 00:02:45.260
the references are
hashCode of its files.

00:02:45.260 --> 00:02:47.840
In this case, this
tree object would hold

00:02:47.840 --> 00:02:51.694
the hashCode OPT sub one
dot TXT and subdued or TXT.

00:02:51.694 --> 00:02:53.945
Essentially these
are the hashes of

00:02:53.945 --> 00:02:56.180
the blobs that corresponds to

00:02:56.180 --> 00:02:59.150
sub one dot T extends
up to dot TXT.

00:02:59.150 --> 00:03:01.580
And then we're going to
have another tree object

00:03:01.580 --> 00:03:04.865
created for the parent
project directory.

00:03:04.865 --> 00:03:07.955
And it's going to have
hashCode off its own files.

00:03:07.955 --> 00:03:09.920
In addition to that,
it will also hold

00:03:09.920 --> 00:03:12.530
the hashCode of the sub tree,

00:03:12.530 --> 00:03:15.185
which corresponds to
the assets directory.

00:03:15.185 --> 00:03:18.050
And of course, each one of
these three objects would have

00:03:18.050 --> 00:03:20.960
their unique hash code
to uniquely identify

00:03:20.960 --> 00:03:25.220
them so they can be referred
from some other objects.

00:03:25.220 --> 00:03:28.490
Next, we have the commit object.

00:03:28.490 --> 00:03:31.295
Once again, this will
have its own unique hash.

00:03:31.295 --> 00:03:33.140
And this hash will be generated

00:03:33.140 --> 00:03:35.120
based on the commit information,

00:03:35.120 --> 00:03:36.455
like the author name,

00:03:36.455 --> 00:03:39.245
email address, the
message that was entered,

00:03:39.245 --> 00:03:42.544
the time at which commit
has happened, etc.

00:03:42.544 --> 00:03:44.240
And commit object would hold

00:03:44.240 --> 00:03:47.390
the reference or hashCode
of the parent tree.

00:03:47.390 --> 00:03:49.340
In addition to that,
it will also have

00:03:49.340 --> 00:03:51.770
information about
the author name,

00:03:51.770 --> 00:03:53.630
email address, the message

00:03:53.630 --> 00:03:56.090
that was typed while
committing, etc.

00:03:56.090 --> 00:03:58.370
And except for the
very first combat,

00:03:58.370 --> 00:03:59.990
the commit object will also hold

00:03:59.990 --> 00:04:02.915
a reference or hashCode
of the previous comment.

00:04:02.915 --> 00:04:06.815
You'll know the significance
of it in coming lectures.

00:04:06.815 --> 00:04:09.979
For the changes that
we had just committed.

00:04:09.979 --> 00:04:11.870
This is how it would store

00:04:11.870 --> 00:04:14.030
the information in the database.

00:04:14.030 --> 00:04:16.070
So we have three objects that

00:04:16.070 --> 00:04:18.740
corresponds to each and every
director in the project.

00:04:18.740 --> 00:04:20.120
And then we also have

00:04:20.120 --> 00:04:22.340
Blob objects that corresponds

00:04:22.340 --> 00:04:24.605
to each and every file
inside the project.

00:04:24.605 --> 00:04:26.765
Now it's not necessarily
that if you have

00:04:26.765 --> 00:04:29.029
ten files created
inside your project,

00:04:29.029 --> 00:04:30.800
we would have ten blobs created

00:04:30.800 --> 00:04:33.050
inside the object database.

00:04:33.050 --> 00:04:35.615
It doesn't necessarily
have to be that way.

00:04:35.615 --> 00:04:36.710
For example, if you have

00:04:36.710 --> 00:04:39.380
two files having the
exact same content,

00:04:39.380 --> 00:04:40.790
and they both would generate

00:04:40.790 --> 00:04:42.935
exact same hashCode,
for instance.

00:04:42.935 --> 00:04:44.360
Then get will not

00:04:44.360 --> 00:04:47.180
create two different
blob objects for that,

00:04:47.180 --> 00:04:49.445
it will just create
one blob object

00:04:49.445 --> 00:04:51.410
and refer to it instead.

00:04:51.410 --> 00:04:54.960
Anyway, more on it
in coming lectures.
