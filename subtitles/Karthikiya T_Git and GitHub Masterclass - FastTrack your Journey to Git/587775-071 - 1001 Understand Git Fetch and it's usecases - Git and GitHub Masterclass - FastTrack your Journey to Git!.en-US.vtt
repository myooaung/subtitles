WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.030
Let us talk about git-fetch.

00:00:03.030 --> 00:00:05.790
Imagine that this is the
current state of our project

00:00:05.790 --> 00:00:08.445
in both remote as well
as local depository.

00:00:08.445 --> 00:00:10.230
Now pause the video,
take a minute

00:00:10.230 --> 00:00:12.210
and try to understand
this diagram.

00:00:12.210 --> 00:00:14.280
You all renew this.

00:00:14.280 --> 00:00:15.900
Well, we just have a couple of

00:00:15.900 --> 00:00:17.130
comments in the main branch

00:00:17.130 --> 00:00:19.815
in both local as well
as remote repository.

00:00:19.815 --> 00:00:21.690
And then we have
single commit in

00:00:21.690 --> 00:00:24.990
the feature branch in both
local and remote repository,

00:00:24.990 --> 00:00:26.550
except in local depository,

00:00:26.550 --> 00:00:29.459
we also have additional
tracking branches

00:00:29.459 --> 00:00:32.355
that represent the branches
in the remote repository.

00:00:32.355 --> 00:00:35.220
And currently they are pointing
to the exact same comets

00:00:35.220 --> 00:00:36.510
that the corresponding remote

00:00:36.510 --> 00:00:38.770
repository branches
are pointing to.

00:00:38.770 --> 00:00:41.345
Let's talk about git-fetch.

00:00:41.345 --> 00:00:42.710
Imagine that there
are a couple of

00:00:42.710 --> 00:00:43.910
additional comments made in

00:00:43.910 --> 00:00:46.910
feature branch in
remote repository.

00:00:46.910 --> 00:00:49.745
Now what if I would like
to download the objects

00:00:49.745 --> 00:00:52.790
that correspond to these
comets at the same time.

00:00:52.790 --> 00:00:54.440
I don't want to see
all those changes

00:00:54.440 --> 00:00:56.060
in my working directory.

00:00:56.060 --> 00:00:58.490
Now, you might be having
a question popping up in

00:00:58.490 --> 00:01:02.405
your mind as to why do we want
to download these objects?

00:01:02.405 --> 00:01:04.100
But don't want to
have those changes

00:01:04.100 --> 00:01:06.395
shown up in a working directory.

00:01:06.395 --> 00:01:08.390
Well, there are
multiple use cases

00:01:08.390 --> 00:01:10.295
when it might be useful.

00:01:10.295 --> 00:01:12.650
For example, let's say that
I would like to compare

00:01:12.650 --> 00:01:16.010
my local repository with
the remote repository to

00:01:16.010 --> 00:01:17.930
check to see how
many comments is

00:01:17.930 --> 00:01:20.120
the remote repository
is ahead of

00:01:20.120 --> 00:01:21.650
my local repository in

00:01:21.650 --> 00:01:24.335
a particular branch,
or vice versa.

00:01:24.335 --> 00:01:26.300
I would like to check to
see how many comments is

00:01:26.300 --> 00:01:28.430
my local repository ahead of

00:01:28.430 --> 00:01:31.355
the remote repository
in a particular branch?

00:01:31.355 --> 00:01:33.860
Or what if I would like
to get the exact state of

00:01:33.860 --> 00:01:38.060
the remote repository as
is in my local enrollment,

00:01:38.060 --> 00:01:40.880
to start working on
it. At the same time.

00:01:40.880 --> 00:01:43.610
I don't want it to have
any kind of implications

00:01:43.610 --> 00:01:46.879
on the work that I've
already done locally.

00:01:46.879 --> 00:01:49.490
Or it could be the case that
I just wanted to take a look

00:01:49.490 --> 00:01:52.490
at if there are any
additional branches or tags,

00:01:52.490 --> 00:01:54.200
references that are present in

00:01:54.200 --> 00:01:56.180
the remote repository but

00:01:56.180 --> 00:01:58.430
are not present in
the local depository.

00:01:58.430 --> 00:02:01.595
Well, git-fetch is
the answer for that.

00:02:01.595 --> 00:02:04.490
When you run the git
fetch command locally,

00:02:04.490 --> 00:02:05.735
it's going to download

00:02:05.735 --> 00:02:08.000
all those additional
objects that

00:02:08.000 --> 00:02:10.610
are not already present
in your local repository.

00:02:10.610 --> 00:02:14.030
And also update these
tracking branches to point to

00:02:14.030 --> 00:02:15.140
this new commits or

00:02:15.140 --> 00:02:19.625
the new objects that just got
downloaded with git-fetch.

00:02:19.625 --> 00:02:22.279
Now in this example,
we're only assuming

00:02:22.279 --> 00:02:24.800
that we have additional
comments and feature branch.

00:02:24.800 --> 00:02:26.660
And so only the
tracking branch of

00:02:26.660 --> 00:02:28.550
feature branch is updated

00:02:28.550 --> 00:02:30.425
to point to the
exact same commit

00:02:30.425 --> 00:02:32.600
that the remote
branches pointing to.

00:02:32.600 --> 00:02:33.950
However, if there are

00:02:33.950 --> 00:02:36.245
additional comments
made in other branches,

00:02:36.245 --> 00:02:38.120
their corresponding
tracking branches in

00:02:38.120 --> 00:02:40.955
your local machine would
be updated as well.

00:02:40.955 --> 00:02:43.535
Now the fact that
the local branches,

00:02:43.535 --> 00:02:45.695
like the main and
the feature branch

00:02:45.695 --> 00:02:47.945
are still pointing
to the old commits.

00:02:47.945 --> 00:02:49.640
You'll walk in that
room, will not have

00:02:49.640 --> 00:02:51.890
all those newly
introduced changes.

00:02:51.890 --> 00:02:54.965
Now all this might sound
very confusing to you,

00:02:54.965 --> 00:02:56.675
but in next few lectures,

00:02:56.675 --> 00:02:59.120
you'll have complete
clarity as to why we need

00:02:59.120 --> 00:03:02.300
git-fetch and you'll
understand its significance.

00:03:02.300 --> 00:03:05.015
I cannot fit everything
under single video.

00:03:05.015 --> 00:03:07.080
I'll see you next.
