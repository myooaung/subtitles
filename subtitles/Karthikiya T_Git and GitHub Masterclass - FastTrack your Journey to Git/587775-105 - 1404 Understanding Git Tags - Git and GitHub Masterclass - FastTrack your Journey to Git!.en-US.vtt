WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.030
Let's talk about tags and get.

00:00:03.030 --> 00:00:05.820
Etag is simply a
difference that points

00:00:05.820 --> 00:00:08.715
to a specific point
in the good history.

00:00:08.715 --> 00:00:11.130
In other words,
attack would just

00:00:11.130 --> 00:00:13.800
simply point to a
specific commit.

00:00:13.800 --> 00:00:15.990
Now this might sound
like a branch.

00:00:15.990 --> 00:00:18.795
Even branch does point
to a specific commit,

00:00:18.795 --> 00:00:22.080
and even tag does point
to a specific combat.

00:00:22.080 --> 00:00:25.185
But the difference between
the two is branch would get

00:00:25.185 --> 00:00:28.695
updated every time we make
a new commit in the branch.

00:00:28.695 --> 00:00:31.230
And branch would point
to that latest commit,

00:00:31.230 --> 00:00:34.140
whereas tag would
remain constant.

00:00:34.140 --> 00:00:37.360
If we create a tag pointing
to a particular commit,

00:00:37.360 --> 00:00:40.220
it will remain like
that forever unless we

00:00:40.220 --> 00:00:43.220
do something with
that tag explicitly.

00:00:43.220 --> 00:00:45.800
Now, what's the advantage
of creating a tag?

00:00:45.800 --> 00:00:47.510
Why do we want to
create a reference to

00:00:47.510 --> 00:00:50.345
a particular commit
and keep it constant?

00:00:50.345 --> 00:00:51.770
Let's take a look.

00:00:51.770 --> 00:00:54.650
So this is from our
previous example, 1 second,

00:00:54.650 --> 00:00:56.450
assume that we have launched

00:00:56.450 --> 00:00:58.190
a new software and

00:00:58.190 --> 00:01:01.100
eventually we have are
changes in the master branch.

00:01:01.100 --> 00:01:04.265
It is at this point in time
we're going to create a tag,

00:01:04.265 --> 00:01:05.660
giving it the version number of

00:01:05.660 --> 00:01:08.375
the software has its name.

00:01:08.375 --> 00:01:09.920
Since we assume that this is

00:01:09.920 --> 00:01:12.080
a very first release
off or software,

00:01:12.080 --> 00:01:15.710
we're going to worsen
it as one dot o dot o.

00:01:15.710 --> 00:01:19.895
And this tag points to
this particular commit,

00:01:19.895 --> 00:01:22.400
the master or the main branch.

00:01:22.400 --> 00:01:25.985
Now assume that we have
provided a hot fix.

00:01:25.985 --> 00:01:27.710
And once again, we have

00:01:27.710 --> 00:01:29.990
delivered that fixed
in the master branch.

00:01:29.990 --> 00:01:32.375
We're going to create
yet another tag,

00:01:32.375 --> 00:01:34.475
giving it some motion number.

00:01:34.475 --> 00:01:37.625
So since this is a
bug fix or a hot fix,

00:01:37.625 --> 00:01:41.840
we just incremented the
patch number by one.

00:01:41.840 --> 00:01:44.330
So essentially we are
following semantic versioning

00:01:44.330 --> 00:01:46.910
here and this tag points or

00:01:46.910 --> 00:01:48.500
have the reference of

00:01:48.500 --> 00:01:52.385
the commit in the master
branch with that fix.

00:01:52.385 --> 00:01:55.565
But what's the point of
having all these tags?

00:01:55.565 --> 00:01:57.560
Well, one other use cases is,

00:01:57.560 --> 00:01:58.970
let's say that I
wanted to create

00:01:58.970 --> 00:02:02.355
an artifact based off
a specific version.

00:02:02.355 --> 00:02:06.070
So maybe I can run a command
saying that I want to

00:02:06.070 --> 00:02:09.955
create an artifact for
version one dot o dot o.

00:02:09.955 --> 00:02:10.630
Guess what?

00:02:10.630 --> 00:02:13.285
I can run the command
specifying this tag.

00:02:13.285 --> 00:02:16.375
And the tool would create
the artifact for me,

00:02:16.375 --> 00:02:17.980
which can then be deployed onto

00:02:17.980 --> 00:02:20.410
the production enrollment, etc.

00:02:20.410 --> 00:02:22.240
Or maybe I can put
it in the release

00:02:22.240 --> 00:02:25.270
notes for customers
to download and use.

00:02:25.270 --> 00:02:27.820
We cannot use branch
in this case because

00:02:27.820 --> 00:02:30.535
branch would get updated
every once a while.

00:02:30.535 --> 00:02:33.355
The moment we make a new
commit in the branch,

00:02:33.355 --> 00:02:37.015
tags would come in handy
in such situation.

00:02:37.015 --> 00:02:39.550
Next, we're going to
take a look at all this

00:02:39.550 --> 00:02:41.860
in action so that you will have

00:02:41.860 --> 00:02:43.870
complete picture as
to what exactly is

00:02:43.870 --> 00:02:47.510
happening and how's
it going to work.

00:02:47.510 --> 00:02:49.800
I'll see you next.
