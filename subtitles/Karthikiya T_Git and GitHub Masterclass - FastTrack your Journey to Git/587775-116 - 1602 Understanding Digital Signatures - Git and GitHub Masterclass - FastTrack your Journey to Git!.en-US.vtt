WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.000
Before we understand
what our sign commit,

00:00:03.000 --> 00:00:04.380
let us try to understand what

00:00:04.380 --> 00:00:06.720
exactly is a distorted nature.

00:00:06.720 --> 00:00:10.980
Not in the context of Git
and GitHub. But in general.

00:00:10.980 --> 00:00:14.010
Assume that we have
Bob and Alice.

00:00:14.010 --> 00:00:17.445
And Bob wants to send
a file to Alice.

00:00:17.445 --> 00:00:20.385
If he sends the file
as it is to Alice,

00:00:20.385 --> 00:00:21.660
then it might happen that

00:00:21.660 --> 00:00:23.370
somebody interfere
in the network,

00:00:23.370 --> 00:00:26.595
manipulate the file before
it reaches to Alice.

00:00:26.595 --> 00:00:29.850
And Alice doesn't have any
way to verify if the file

00:00:29.850 --> 00:00:33.705
has been manipulated or if
Bob is actually the sender.

00:00:33.705 --> 00:00:35.595
So keeping that in mind,

00:00:35.595 --> 00:00:37.800
bob is going to do
something about it.

00:00:37.800 --> 00:00:40.575
What is going to do is he's
going to use some kind of

00:00:40.575 --> 00:00:43.910
a tool to create
so-called public key.

00:00:43.910 --> 00:00:45.410
And a private key.

00:00:45.410 --> 00:00:47.375
Private key, as
the name suggests,

00:00:47.375 --> 00:00:50.315
is not supposed to be
shared with anybody else.

00:00:50.315 --> 00:00:52.010
It is going to be with Bob.

00:00:52.010 --> 00:00:53.630
And it's going to
securely keep it

00:00:53.630 --> 00:00:56.135
somewhere in his
local file system.

00:00:56.135 --> 00:00:57.920
On the other hand, public key

00:00:57.920 --> 00:00:59.795
can be shared with anybody else.

00:00:59.795 --> 00:01:02.150
Anybody who want to
receive Bob's message or

00:01:02.150 --> 00:01:05.315
file can actually have a
copy of the public key.

00:01:05.315 --> 00:01:07.310
In this case, Bob is going to

00:01:07.310 --> 00:01:09.770
share the public key with Alice.

00:01:09.770 --> 00:01:13.055
Alice gives would come in
handy in just a while.

00:01:13.055 --> 00:01:16.670
So this time, before Bob
sends the file to Alice,

00:01:16.670 --> 00:01:18.800
is going to use his private key

00:01:18.800 --> 00:01:20.960
to digitally sign the document.

00:01:20.960 --> 00:01:23.030
But what is the
distance that nature?

00:01:23.030 --> 00:01:25.880
Well, digital signature
is essentially

00:01:25.880 --> 00:01:28.880
a hash of the data
that is encrypted,

00:01:28.880 --> 00:01:31.040
but signer's private key.

00:01:31.040 --> 00:01:32.825
We already talked about hash

00:01:32.825 --> 00:01:34.595
in one of the previous lectures.

00:01:34.595 --> 00:01:36.254
But just to summarize,

00:01:36.254 --> 00:01:38.210
hash value is a numeric value of

00:01:38.210 --> 00:01:41.345
a fixed length that
uniquely identifies a data.

00:01:41.345 --> 00:01:43.250
Or in this case this file.

00:01:43.250 --> 00:01:45.020
If you do the same data or

00:01:45.020 --> 00:01:47.420
the file as an input
to hash function,

00:01:47.420 --> 00:01:50.045
it would do the exact
same unique hash value

00:01:50.045 --> 00:01:51.905
no matter how many
times you do it.

00:01:51.905 --> 00:01:53.840
But if you change the
data or the contents

00:01:53.840 --> 00:01:55.820
of the file even a little bit,

00:01:55.820 --> 00:01:57.605
the hash function would return

00:01:57.605 --> 00:01:59.825
an entirely different
hash value.

00:01:59.825 --> 00:02:02.120
So essentially,
hash value uniquely

00:02:02.120 --> 00:02:05.210
identifies a given
data or a file.

00:02:05.210 --> 00:02:08.075
When I say data
file or a message,

00:02:08.075 --> 00:02:10.310
they all mean the same thing.

00:02:10.310 --> 00:02:12.230
So Bob would then send

00:02:12.230 --> 00:02:14.840
the file to Alice
over the network.

00:02:14.840 --> 00:02:17.660
Now Alice has to verify
if the message has been

00:02:17.660 --> 00:02:21.125
manipulated out of the
sender is actually bombed.

00:02:21.125 --> 00:02:22.895
I wish you're going to do that.

00:02:22.895 --> 00:02:26.840
Well, she's going to use
Bob's public key to decrypt

00:02:26.840 --> 00:02:28.550
the digital signature to

00:02:28.550 --> 00:02:31.190
extract the hash
value out of it.

00:02:31.190 --> 00:02:33.605
Well, when I say she's
going to do that,

00:02:33.605 --> 00:02:36.065
It's not exactly her
who will do that.

00:02:36.065 --> 00:02:39.395
She's going to use some kind
of a tool that does that.

00:02:39.395 --> 00:02:42.320
She would then use
some kind of a tool to

00:02:42.320 --> 00:02:45.560
find out the hash value
of the file sent as well.

00:02:45.560 --> 00:02:48.500
These two hash values
are exactly same,

00:02:48.500 --> 00:02:51.995
then we can be sure that data
has not been manipulated.

00:02:51.995 --> 00:02:55.115
And if she is unable to
decrypt the digital signature,

00:02:55.115 --> 00:02:58.040
that means somebody else
has send the file using

00:02:58.040 --> 00:03:01.100
their private key and
not Bob's private key.

00:03:01.100 --> 00:03:02.540
If the digital signature is

00:03:02.540 --> 00:03:04.505
signed with somebody
else private key,

00:03:04.505 --> 00:03:06.320
Alice wouldn't be
able to decrypt

00:03:06.320 --> 00:03:09.845
the discursive nature
using Bob's public key.

00:03:09.845 --> 00:03:13.250
So that way she can be sure
that the file has not been

00:03:13.250 --> 00:03:15.470
manipulated and that the file

00:03:15.470 --> 00:03:17.255
is actually coming from Bob.

00:03:17.255 --> 00:03:19.010
If you've understood this,

00:03:19.010 --> 00:03:20.750
then understanding
verified signature

00:03:20.750 --> 00:03:21.920
shouldn't be a big deal.

00:03:21.920 --> 00:03:25.830
We're going to talk about
verified signatures up next.
