WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.640
So rebase or merge.

00:00:02.640 --> 00:00:04.690
Let's talk about it.

00:00:05.300 --> 00:00:08.894
Imagine that this is the
current state of your project.

00:00:08.894 --> 00:00:10.860
You have created a
feature branch out or

00:00:10.860 --> 00:00:13.170
the very first commit
on master branch.

00:00:13.170 --> 00:00:15.360
And then you've got a
bunch of commits made in

00:00:15.360 --> 00:00:18.555
master branch after creation
of the feature branch.

00:00:18.555 --> 00:00:21.510
Now let us say that
for some reason you

00:00:21.510 --> 00:00:24.450
realize that you're too
early to create that branch.

00:00:24.450 --> 00:00:26.940
Maybe you needed some of
the changes introduced in

00:00:26.940 --> 00:00:28.710
master branch that came

00:00:28.710 --> 00:00:30.855
after you created
the feature branch.

00:00:30.855 --> 00:00:31.980
Guess what?

00:00:31.980 --> 00:00:34.610
You can just rebase
the feature branch to

00:00:34.610 --> 00:00:37.595
a specific commit
that came afterwards,

00:00:37.595 --> 00:00:40.790
so that you will have all those
changes in master branch,

00:00:40.790 --> 00:00:43.310
which would be available
in feature branch.

00:00:43.310 --> 00:00:45.740
This is one use case
where you might want to

00:00:45.740 --> 00:00:48.890
use rebase over a merge.

00:00:48.890 --> 00:00:51.469
Another use case off rebase.

00:00:51.469 --> 00:00:53.360
Let's say that you
have created couple

00:00:53.360 --> 00:00:55.565
of branches like
you're seeing here.

00:00:55.565 --> 00:00:57.725
Now, let's say that
you have realized that

00:00:57.725 --> 00:00:59.210
these two branches aren't

00:00:59.210 --> 00:01:01.414
supposed to be in two
different branches.

00:01:01.414 --> 00:01:03.635
They might be addressing
the same issue

00:01:03.635 --> 00:01:06.020
or they might belong
to the same feature.

00:01:06.020 --> 00:01:08.240
So maybe you'd like
to have them as part

00:01:08.240 --> 00:01:10.325
of a single branch. Guess what?

00:01:10.325 --> 00:01:11.780
You can just rebase one of

00:01:11.780 --> 00:01:13.655
the branches with the other one,

00:01:13.655 --> 00:01:15.635
like so, and you're good to go.

00:01:15.635 --> 00:01:17.480
However, there are
certain scenarios

00:01:17.480 --> 00:01:19.985
where rebus is not
the best option.

00:01:19.985 --> 00:01:24.139
Rebase you're altering and
rewriting the good history.

00:01:24.139 --> 00:01:25.925
Every time you rebase,

00:01:25.925 --> 00:01:27.290
you're rewriting the Comment

00:01:27.290 --> 00:01:30.545
objects pointing to
a different parent.

00:01:30.545 --> 00:01:32.585
That's not the case with much.

00:01:32.585 --> 00:01:34.340
You're going to retain
the commit history

00:01:34.340 --> 00:01:35.660
and gets off merge.

00:01:35.660 --> 00:01:38.749
And that is a reason why you
should avoid using rebase.

00:01:38.749 --> 00:01:40.160
If there are multiple developers

00:01:40.160 --> 00:01:42.125
working on a single branch.

00:01:42.125 --> 00:01:46.850
For example, imagine that we
have duller and duller B2,

00:01:46.850 --> 00:01:49.370
and then we also have the
centralized repository.

00:01:49.370 --> 00:01:51.755
And this is the current
project structure.

00:01:51.755 --> 00:01:53.180
In all these places,

00:01:53.180 --> 00:01:54.950
we have the master
branch with couple of

00:01:54.950 --> 00:01:58.175
comments and feature branch
with a single commit.

00:01:58.175 --> 00:02:00.500
Now, let's say that
dollar per one has

00:02:00.500 --> 00:02:03.215
rebased to a different commit.

00:02:03.215 --> 00:02:06.830
It won't be reflected across
all the other system.

00:02:06.830 --> 00:02:09.034
For example, all the
other developers,

00:02:09.034 --> 00:02:11.420
and even in the
centralized repository.

00:02:11.420 --> 00:02:13.325
Now, long story short,

00:02:13.325 --> 00:02:16.730
this is going to create lots
of inconsistencies and might

00:02:16.730 --> 00:02:20.195
as will destroy the very
purpose of why we have rebase,

00:02:20.195 --> 00:02:22.850
which is to have a
clean commit history.

00:02:22.850 --> 00:02:25.040
As a rule of thumb,
just remember,

00:02:25.040 --> 00:02:26.780
if you're the only
one who is working on

00:02:26.780 --> 00:02:28.730
a particular branch,
a feature branch,

00:02:28.730 --> 00:02:31.414
Let's say we can then use rebase

00:02:31.414 --> 00:02:33.080
before actually
pushing that code

00:02:33.080 --> 00:02:34.910
into the centralized repository.

00:02:34.910 --> 00:02:36.935
If there are multiple
developers involved

00:02:36.935 --> 00:02:39.500
and they're all are contributing
to the same branch.

00:02:39.500 --> 00:02:42.965
Then merges option
for you In that case.

00:02:42.965 --> 00:02:45.330
I'll see you next.
