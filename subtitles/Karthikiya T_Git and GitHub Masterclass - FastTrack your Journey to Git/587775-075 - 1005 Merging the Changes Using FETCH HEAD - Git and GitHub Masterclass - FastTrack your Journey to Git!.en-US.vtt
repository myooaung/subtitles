WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.380 --> 00:00:02.520
Let us assume that I would like

00:00:02.520 --> 00:00:03.870
to have all the changes of

00:00:03.870 --> 00:00:06.960
remote repository in
my working directory.

00:00:06.960 --> 00:00:09.270
Maybe because I would
like to work on them,

00:00:09.270 --> 00:00:11.520
or maybe it's just that
I would like to have

00:00:11.520 --> 00:00:13.440
all the remote updates
and then I would

00:00:13.440 --> 00:00:15.720
like to continue working
on my own stuff.

00:00:15.720 --> 00:00:17.325
Now a question to you.

00:00:17.325 --> 00:00:19.590
What can I do right now so that

00:00:19.590 --> 00:00:22.530
I'll have all those changes
in my working directory.

00:00:22.530 --> 00:00:24.825
With git-fetch. We have

00:00:24.825 --> 00:00:26.940
already downloaded
all the objects.

00:00:26.940 --> 00:00:30.920
We don't have to do that
again. What else can we do?

00:00:30.920 --> 00:00:33.815
Well, we can perform merge.

00:00:33.815 --> 00:00:35.570
We have the tracking branch for

00:00:35.570 --> 00:00:38.495
new feature which points
to the remote commit.

00:00:38.495 --> 00:00:41.554
And we also have the
local new feature branch,

00:00:41.554 --> 00:00:43.970
which points to the old commit.

00:00:43.970 --> 00:00:46.040
If we merge these two branches,

00:00:46.040 --> 00:00:47.600
we should ideally be having

00:00:47.600 --> 00:00:50.795
all the changes in our
working directory, isn't it?

00:00:50.795 --> 00:00:55.160
First, let's run the
command git status.

00:00:55.160 --> 00:00:58.790
It says your branches
behind origin

00:00:58.790 --> 00:01:02.540
new feature by one
commit and can be

00:01:02.540 --> 00:01:04.880
fast-forward it so
good has given us

00:01:04.880 --> 00:01:06.860
a suggestion that
we can actually

00:01:06.860 --> 00:01:10.230
perform fast forward merge.

00:01:10.870 --> 00:01:13.670
Which also means
that there is also

00:01:13.670 --> 00:01:15.620
possibility that we might

00:01:15.620 --> 00:01:17.930
need to perform a
three-way merge.

00:01:17.930 --> 00:01:20.375
And we might as
well get conflicts,

00:01:20.375 --> 00:01:22.175
which we have to deal with.

00:01:22.175 --> 00:01:24.904
We've already seen how
we deal with conflicts

00:01:24.904 --> 00:01:27.845
when you're trying to
merge couple of branches.

00:01:27.845 --> 00:01:29.735
Same applies here too.

00:01:29.735 --> 00:01:31.280
Now can you try to make

00:01:31.280 --> 00:01:33.440
a guess as to what
command me to type

00:01:33.440 --> 00:01:36.065
here to have all
those new changes

00:01:36.065 --> 00:01:37.489
in our working directory.

00:01:37.489 --> 00:01:41.250
Well, it's a standard
git merge command.

00:01:41.380 --> 00:01:44.360
We need to first
push to a branch

00:01:44.360 --> 00:01:46.295
where we want to merge into,

00:01:46.295 --> 00:01:48.680
in this case, we want
to merge changes from

00:01:48.680 --> 00:01:51.395
another branch to the
local new feature branch.

00:01:51.395 --> 00:01:53.360
And that's where I'm at. Let me

00:01:53.360 --> 00:01:55.805
type in the command git merge.

00:01:55.805 --> 00:02:00.485
And I'm going to specify
the tracking branch,

00:02:00.485 --> 00:02:04.909
which is origin
slash new feature.

00:02:04.909 --> 00:02:07.040
Essentially we're
just performing a

00:02:07.040 --> 00:02:09.215
fast forward merge in this case,

00:02:09.215 --> 00:02:11.555
wherein our new feature branch,

00:02:11.555 --> 00:02:12.845
which is a local branch,

00:02:12.845 --> 00:02:14.120
would now point to

00:02:14.120 --> 00:02:15.800
the exact same commit that

00:02:15.800 --> 00:02:17.990
the remote tracking
branches pointing to.

00:02:17.990 --> 00:02:19.940
But let's say that you
have a commit made

00:02:19.940 --> 00:02:22.025
in your local
repository as well.

00:02:22.025 --> 00:02:23.810
Well, then in that case you

00:02:23.810 --> 00:02:25.685
have to perform three-way merge.

00:02:25.685 --> 00:02:28.850
And that might create
additional merge

00:02:28.850 --> 00:02:30.890
commit unless you rebase

00:02:30.890 --> 00:02:33.665
and then perform a
fast forward merge.

00:02:33.665 --> 00:02:35.985
Let's hit Enter.

00:02:35.985 --> 00:02:39.055
Here's a summary of
what just happened.

00:02:39.055 --> 00:02:41.320
Our local new feature
branch is not

00:02:41.320 --> 00:02:43.810
pointing to this new commit.

00:02:43.810 --> 00:02:48.505
The same commit that the
tracking branch was pointing to.

00:02:48.505 --> 00:02:51.520
What just happened is
fast-forward merge.

00:02:51.520 --> 00:02:54.430
And this is a new file
we're going to see in

00:02:54.430 --> 00:02:58.610
our working directory.
Here it is.

00:02:58.890 --> 00:03:01.645
I also quickly want to mention

00:03:01.645 --> 00:03:04.465
that the alternate
to command for this

00:03:04.465 --> 00:03:10.060
is git merge, fetch
underscore head.

00:03:10.060 --> 00:03:12.145
This will do the same job.

00:03:12.145 --> 00:03:14.005
And this is one of the commands

00:03:14.005 --> 00:03:16.255
where good might use
the fetch add file.

00:03:16.255 --> 00:03:19.490
We had talked about earlier.

00:03:20.590 --> 00:03:23.930
Run that command. It
says already up to date

00:03:23.930 --> 00:03:26.955
because we had already
merged the changes.

00:03:26.955 --> 00:03:29.970
Hope it makes sense.
I'll see you next.
