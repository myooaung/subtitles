WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.200 --> 00:00:02.565
Let us see how we can deal with

00:00:02.565 --> 00:00:04.485
conflicts when we're
trying to merge

00:00:04.485 --> 00:00:06.330
feature one into the mainstream

00:00:06.330 --> 00:00:08.610
of evolution, the main branch.

00:00:08.610 --> 00:00:11.850
Currently I'm in feature one
branch and as you can see,

00:00:11.850 --> 00:00:14.205
we have all those four commits

00:00:14.205 --> 00:00:16.350
from our previous lectures.

00:00:16.350 --> 00:00:20.515
What I'm going to do now
is I'm going to raise

00:00:20.515 --> 00:00:23.730
a pull request for

00:00:23.730 --> 00:00:25.650
all the changes we've
introduced in vitro,

00:00:25.650 --> 00:00:27.520
one branch

00:00:34.700 --> 00:00:38.070
raised pull request.

00:00:38.070 --> 00:00:40.510
Now I'm actually good to go

00:00:40.510 --> 00:00:43.115
and perform any of
these operations.

00:00:43.115 --> 00:00:46.370
I can also perform
repairs and much because

00:00:46.370 --> 00:00:48.575
no new comments were
made in main branch

00:00:48.575 --> 00:00:51.200
and there's no way that
it can cause conflicts.

00:00:51.200 --> 00:00:53.990
But what if after raising
the pull request,

00:00:53.990 --> 00:00:56.795
somebody introduces new
changes in main branch,

00:00:56.795 --> 00:00:58.370
which might be causing conflicts

00:00:58.370 --> 00:01:00.140
without feature one changes.

00:01:00.140 --> 00:01:02.584
To simulate that behavior.

00:01:02.584 --> 00:01:08.640
Let me go back to the main
branch and edit this file.

00:01:09.190 --> 00:01:11.600
If you remember, in one of

00:01:11.600 --> 00:01:13.340
the comments in
vitro and branch,

00:01:13.340 --> 00:01:16.550
we did update the ReadMe file.

00:01:16.550 --> 00:01:20.180
So if I update this file
once again in main branch,

00:01:20.180 --> 00:01:22.395
this should give us a conflict.

00:01:22.395 --> 00:01:28.060
So let me click on
this file and add

00:01:28.060 --> 00:01:36.520
some text like so,

00:01:36.520 --> 00:01:39.890
and commit the changes.

00:01:40.470 --> 00:01:44.980
Now let's go back to the
pull request and see if we

00:01:44.980 --> 00:01:50.110
can now perform Freebase.

00:01:50.110 --> 00:01:53.320
And now you see a warning
that says the branch has

00:01:53.320 --> 00:01:56.545
complex and those
must be resolved.

00:01:56.545 --> 00:01:58.930
We can resolve conflicts here,

00:01:58.930 --> 00:02:00.909
but it's not a
recommended approach.

00:02:00.909 --> 00:02:02.800
Long story short, this is

00:02:02.800 --> 00:02:04.995
going to complicate
things a little bit.

00:02:04.995 --> 00:02:07.550
Basically, if you look at
the history of chametz,

00:02:07.550 --> 00:02:09.065
it's going to confuse you.

00:02:09.065 --> 00:02:11.075
There's a better
way to handle this.

00:02:11.075 --> 00:02:13.865
And that's what I'm
going to show you now

00:02:13.865 --> 00:02:18.800
in our local machine as him
that this is looks computer.

00:02:18.800 --> 00:02:20.645
First of all, we're
going to bring in

00:02:20.645 --> 00:02:23.705
all the changes in
the main branch.

00:02:23.705 --> 00:02:33.420
So let me switch to main branch
and pulled up new commit.

00:02:37.150 --> 00:02:39.710
Now let's try to
rebase our feature

00:02:39.710 --> 00:02:42.560
one branch on top
of this new commit.

00:02:42.560 --> 00:02:45.020
This is a standard
procedure we had

00:02:45.020 --> 00:02:47.610
followed in one of our
previous lectures.

00:02:47.610 --> 00:02:50.200
What are you basing someone

00:02:50.200 --> 00:02:52.580
to switch back to feature one?

00:02:53.610 --> 00:02:57.370
Right-click on this commit
and choose this option that

00:02:57.370 --> 00:03:00.760
says rebase current
branch on this committee.

00:03:00.760 --> 00:03:04.040
This should give us conflicts.

00:03:04.260 --> 00:03:08.095
And as expected, we
do have conflicts.

00:03:08.095 --> 00:03:17.995
That mean dismiss it. So let
us resolve those conflicts.

00:03:17.995 --> 00:03:23.499
Maybe this time I would like
to accept both the changes.

00:03:23.499 --> 00:03:29.440
Save the file, and let me

00:03:29.440 --> 00:03:35.840
state it and click on Commit.

00:03:36.960 --> 00:03:39.850
This is going to
essentially create

00:03:39.850 --> 00:03:43.315
a new commit with all
the result conflicts.

00:03:43.315 --> 00:03:45.715
Let us enter some message.

00:03:45.715 --> 00:03:48.130
I'd like to keep it as it is.

00:03:48.130 --> 00:03:52.210
Once you close it. This should

00:03:52.210 --> 00:03:55.855
rebase which one branch on
top of that new commit.

00:03:55.855 --> 00:04:00.070
Like so. So now all the commits

00:04:00.070 --> 00:04:04.525
off which on branch or seen
on top of this commit.

00:04:04.525 --> 00:04:07.750
Now let us try to push

00:04:07.750 --> 00:04:09.760
all this changes to

00:04:09.760 --> 00:04:12.970
the remote repository and
see what's going to happen.

00:04:12.970 --> 00:04:15.150
Let me clear the screen.

00:04:15.150 --> 00:04:18.485
We could also do the same
from Visual Studio Code.

00:04:18.485 --> 00:04:21.545
Let me type in the
command git push

00:04:21.545 --> 00:04:24.300
and see what's going to happen.

00:04:25.600 --> 00:04:28.400
1 second we got
this hetero saying,

00:04:28.400 --> 00:04:31.580
fail to push some references
to the remote repository.

00:04:31.580 --> 00:04:33.110
That's because with rebase,

00:04:33.110 --> 00:04:35.840
enter commit history got
rewritten and it doesn't

00:04:35.840 --> 00:04:37.220
match with the commit history we

00:04:37.220 --> 00:04:38.960
have in the remote repository.

00:04:38.960 --> 00:04:40.370
Now get good thing that

00:04:40.370 --> 00:04:42.740
our local feature one branch
and its corresponding

00:04:42.740 --> 00:04:44.900
feature one branch in
the remote repository,

00:04:44.900 --> 00:04:46.415
or both diverged.

00:04:46.415 --> 00:04:49.370
And so it's not allowing
us to push our changes.

00:04:49.370 --> 00:04:51.080
So how do we push our changes

00:04:51.080 --> 00:04:53.255
now to the remote repository?

00:04:53.255 --> 00:04:57.305
Well, we can use
the option force.

00:04:57.305 --> 00:04:59.750
So this time with

00:04:59.750 --> 00:05:03.800
git push and when to
provide the option force.

00:05:03.800 --> 00:05:05.960
Now what is this going to do?

00:05:05.960 --> 00:05:07.460
The force flag will make

00:05:07.460 --> 00:05:09.800
the remote repositories
branch match

00:05:09.800 --> 00:05:11.315
with your local branch.

00:05:11.315 --> 00:05:13.850
And it will delete all
the upstream changes

00:05:13.850 --> 00:05:16.430
that might have come
since you last bullet.

00:05:16.430 --> 00:05:17.930
Which also means that if

00:05:17.930 --> 00:05:19.190
there are multiple
people working on

00:05:19.190 --> 00:05:21.230
the same branch and
if somebody had

00:05:21.230 --> 00:05:23.930
contributed their changes
to the same branch,

00:05:23.930 --> 00:05:25.805
all the work would be lost,

00:05:25.805 --> 00:05:28.100
which is sometimes
not desirable.

00:05:28.100 --> 00:05:29.735
So there are instances where you

00:05:29.735 --> 00:05:31.730
shouldn't be using
the force option.

00:05:31.730 --> 00:05:33.530
We're going to talk
about all that and

00:05:33.530 --> 00:05:35.840
best practices in
upcoming lectures.

00:05:35.840 --> 00:05:40.110
But for now, this is going
to do the job for us.

00:05:40.570 --> 00:05:44.930
And if you go back to
the remote repository,

00:05:44.930 --> 00:05:48.425
you notice that we
can now perform

00:05:48.425 --> 00:05:53.250
rebase and merge or
even other two options.

00:05:54.130 --> 00:05:58.500
Let's take a look at the
commit history real quick.

00:06:02.080 --> 00:06:05.670
To go to feature one branch.

00:06:07.720 --> 00:06:11.309
Take a look at list of commits.

00:06:11.320 --> 00:06:15.020
So we have all these comments
made on feature one branch

00:06:15.020 --> 00:06:19.680
stacked on top of the
comments of main branch.

00:06:22.780 --> 00:06:31.055
We can now go ahead and
perform rebates and merge.

00:06:31.055 --> 00:06:34.475
We can also dissolve
the complex and GitHub,

00:06:34.475 --> 00:06:38.090
but it's going to do weird
things like Robeson,

00:06:38.090 --> 00:06:39.740
the main branch on top of

00:06:39.740 --> 00:06:41.795
which one branch to
get things done.

00:06:41.795 --> 00:06:44.450
And that might create
a lot of confusion.

00:06:44.450 --> 00:06:46.310
But this is often
the common practice

00:06:46.310 --> 00:06:49.500
followed to resolve
the conflict.

00:06:51.970 --> 00:06:55.010
Now it doesn't
make sense to have

00:06:55.010 --> 00:06:58.830
the branch around.
So I can delete it.

00:06:59.320 --> 00:07:01.175
Hope it makes sense.

00:07:01.175 --> 00:07:03.090
I'll see you next.
