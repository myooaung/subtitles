WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.030
Okay, let us see how
git fetch works.

00:00:04.030 --> 00:00:07.135
I've currently logged in as
the owner of the repository.

00:00:07.135 --> 00:00:08.935
And just for your information,

00:00:08.935 --> 00:00:11.170
currently both local
as well as the remote

00:00:11.170 --> 00:00:13.630
repository are exactly same.

00:00:13.630 --> 00:00:17.515
No additional comments were
made in either of the places.

00:00:17.515 --> 00:00:20.665
Let me now go to the
public repository

00:00:20.665 --> 00:00:23.275
and make a new commit.

00:00:23.275 --> 00:00:25.165
We could actually do
it in the main branch,

00:00:25.165 --> 00:00:30.100
or let's do it in
the feature branch.

00:00:30.100 --> 00:00:33.620
I'm just simply going
to add a new file.

00:00:35.160 --> 00:00:39.355
I would like to name it as
maybe Apple dot dx, dy.

00:00:39.355 --> 00:00:41.890
It doesn't matter if
you'd like to include

00:00:41.890 --> 00:00:44.915
a folder and just do
the name of the folder.

00:00:44.915 --> 00:00:46.745
Maybe.

00:00:46.745 --> 00:00:50.840
Like send a new provider slash.

00:00:50.840 --> 00:00:54.875
This would create a folder
with the name My Folder

00:00:54.875 --> 00:00:56.060
inside which will have

00:00:56.060 --> 00:01:00.300
this file with the
name apple dot TXT.

00:01:04.300 --> 00:01:11.915
I just would like to comment
the file. Click Commit.

00:01:11.915 --> 00:01:14.390
We have just created a comment.

00:01:14.390 --> 00:01:17.780
Let me now go ahead and
create a branch as well.

00:01:17.780 --> 00:01:20.840
First let me switch
to main branch.

00:01:20.840 --> 00:01:22.925
Because that's from there.

00:01:22.925 --> 00:01:24.875
I'd like to create a new branch.

00:01:24.875 --> 00:01:28.340
This type in the name of
the branch that I'd like to

00:01:28.340 --> 00:01:31.925
do, maybe feature two.

00:01:31.925 --> 00:01:34.940
And then here we get
an option to create

00:01:34.940 --> 00:01:39.005
a branch feature to,
let's click on it.

00:01:39.005 --> 00:01:42.290
And this should create
feature to branch.

00:01:42.290 --> 00:01:45.695
Let me switch back to
new feature branch

00:01:45.695 --> 00:01:50.345
and click on list of comments.

00:01:50.345 --> 00:01:53.465
Here's the commit
that we've just made,

00:01:53.465 --> 00:01:58.265
whose hash starts with
E8, AF, whatever.

00:01:58.265 --> 00:02:02.015
Now let's go to the
local enrollment.

00:02:02.015 --> 00:02:03.680
Now, you need to
imagine that this

00:02:03.680 --> 00:02:06.334
is one of the
employee's computer,

00:02:06.334 --> 00:02:09.230
maybe Mr. Luke's, whatever.

00:02:09.230 --> 00:02:11.720
Now before I do git fetch,

00:02:11.720 --> 00:02:14.270
Let me run the command git log.

00:02:14.270 --> 00:02:17.790
And notice that I'm currently
in the new feature branch.

00:02:17.830 --> 00:02:19.040
Here.

00:02:19.040 --> 00:02:22.505
As you can see, that
the new feature branch,

00:02:22.505 --> 00:02:23.645
which is the local branch,

00:02:23.645 --> 00:02:26.870
is pointing to this
particular commit.

00:02:26.870 --> 00:02:31.280
And even the tracking branch
is pointing to this commit.

00:02:31.280 --> 00:02:33.515
Now once after I do git fetch,

00:02:33.515 --> 00:02:34.640
it should download all those

00:02:34.640 --> 00:02:36.920
additional objects present in

00:02:36.920 --> 00:02:39.860
the remote repository
and also update

00:02:39.860 --> 00:02:43.910
this tracking branch to
point to that commit object.

00:02:43.910 --> 00:02:46.040
Let's see if that happens.

00:02:46.040 --> 00:02:47.450
But before that, let me down

00:02:47.450 --> 00:02:49.610
one more command to check

00:02:49.610 --> 00:02:53.280
the details of the
origin remote.

00:02:53.290 --> 00:02:57.680
Git, remote, show origin.

00:02:57.680 --> 00:03:02.045
This will show the information
about the origin remote.

00:03:02.045 --> 00:03:05.435
Let me walk you through what
is being displayed here.

00:03:05.435 --> 00:03:07.759
We have the fetchone,

00:03:07.759 --> 00:03:11.255
which is being picked up
from the config file,

00:03:11.255 --> 00:03:13.790
pushes something we
haven't yet talked.

00:03:13.790 --> 00:03:15.485
But when we use
the push command,

00:03:15.485 --> 00:03:17.540
this is a URL which should be

00:03:17.540 --> 00:03:20.060
used to push our local changes.

00:03:20.060 --> 00:03:23.645
Head branches pointing
to the main branch,

00:03:23.645 --> 00:03:25.055
which has a default branch,

00:03:25.055 --> 00:03:26.795
as we've discussed before.

00:03:26.795 --> 00:03:30.200
Here are the list off branches.

00:03:30.200 --> 00:03:32.060
These are the branches that are

00:03:32.060 --> 00:03:34.190
available in the
remote repository.

00:03:34.190 --> 00:03:36.860
If you notice, for the
new branch which were

00:03:36.860 --> 00:03:40.280
created in the GitHub,
Twitter to branch.

00:03:40.280 --> 00:03:45.260
It says next fetch will store
in remote slash origin.

00:03:45.260 --> 00:03:47.525
What this means is
when we do fetch,

00:03:47.525 --> 00:03:51.080
git will create tracking
branch for the feature

00:03:51.080 --> 00:03:52.760
to branch which is present

00:03:52.760 --> 00:03:54.860
in the remote GitHub repository.

00:03:54.860 --> 00:03:58.055
However, the main branch
and the new feature branch,

00:03:58.055 --> 00:04:00.215
what already been tracked.

00:04:00.215 --> 00:04:02.765
Here are the list
of local branches

00:04:02.765 --> 00:04:04.850
configured for git pull.

00:04:04.850 --> 00:04:07.680
We're going to talk about
good Pull pretty soon.

00:04:08.580 --> 00:04:12.010
These are the branches
for git push.

00:04:12.010 --> 00:04:15.580
We don't have this branch
here because we haven't yet

00:04:15.580 --> 00:04:19.360
fetch debt and we haven't
checked out to that branch.

00:04:19.360 --> 00:04:21.100
Now let us take a
look at what would

00:04:21.100 --> 00:04:24.500
happen if I do git fetch.

00:04:26.070 --> 00:04:29.170
Well, ideally I have to
specify the name of the

00:04:29.170 --> 00:04:32.590
remote from where I would like
to fetch the objects from.

00:04:32.590 --> 00:04:34.825
But if I do not
specify anything,

00:04:34.825 --> 00:04:37.495
it would default to
the origin remote,

00:04:37.495 --> 00:04:39.370
which we already have.

00:04:39.370 --> 00:04:42.160
If you'd like to fetch
objects corresponding to

00:04:42.160 --> 00:04:45.190
a specific branch on
a particular remote.

00:04:45.190 --> 00:04:48.340
Then the syntax for that
is you're going to specify

00:04:48.340 --> 00:04:51.525
the remote origin in this case.

00:04:51.525 --> 00:04:54.770
And then you just specify
the name of the branch,

00:04:54.770 --> 00:04:58.460
for example, new
feature or whatever.

00:04:58.460 --> 00:05:01.370
If you'd like to download
objects for all the

00:05:01.370 --> 00:05:03.920
remote and all the branches,

00:05:03.920 --> 00:05:06.395
then you just use the option.

00:05:06.395 --> 00:05:07.190
All.

00:05:07.190 --> 00:05:10.460
Currently we only have one
remote villages origin.

00:05:10.460 --> 00:05:12.980
So I can just run
this command as is

00:05:12.980 --> 00:05:16.200
without having to
specify anything.

00:05:17.140 --> 00:05:20.060
So all those additional
objects were being

00:05:20.060 --> 00:05:23.360
downloaded and are
unpacked locally.

00:05:23.360 --> 00:05:26.375
And if you notice, we
have this new branch,

00:05:26.375 --> 00:05:28.790
which is feature to branch for

00:05:28.790 --> 00:05:32.375
which at tracking
branch is created.

00:05:32.375 --> 00:05:35.375
And then this is important line.

00:05:35.375 --> 00:05:37.865
The new feature branch.

00:05:37.865 --> 00:05:42.035
Earlier it was pointing to
this particular commit.

00:05:42.035 --> 00:05:45.830
But now the new feature
tracking branch,

00:05:45.830 --> 00:05:47.585
or the local tracking branch,

00:05:47.585 --> 00:05:50.870
is pointing to this new commit.

00:05:50.870 --> 00:05:53.420
This is the exact commit that

00:05:53.420 --> 00:05:55.940
we've made in the
remote repository a

00:05:55.940 --> 00:06:01.085
moment ago. So here it is.

00:06:01.085 --> 00:06:04.835
It is E8 a F E to E.

00:06:04.835 --> 00:06:08.855
And this is exactly the same.

00:06:08.855 --> 00:06:11.180
Now let me rerun

00:06:11.180 --> 00:06:15.350
the remote show origin
command and see what it

00:06:15.350 --> 00:06:19.789
has to show compared to
what it has shown earlier.

00:06:19.789 --> 00:06:22.670
Well now if you
observe the feature to

00:06:22.670 --> 00:06:25.550
branch is being tracked,

00:06:25.550 --> 00:06:29.540
but this branch is still
not available in this list.

00:06:29.540 --> 00:06:33.619
That's because we haven't yet
checked out to that branch.

00:06:33.619 --> 00:06:39.080
If I do get Switch feature two,

00:06:39.080 --> 00:06:42.630
or you could also say Git
checkout feature too.

00:06:43.110 --> 00:06:46.345
We would switch to that branch.

00:06:46.345 --> 00:06:48.805
And now if you run this command,

00:06:48.805 --> 00:06:53.170
you would see that branch
in that list as well.

00:06:53.170 --> 00:06:57.839
Let me switch back to
new feature branch.

00:06:57.839 --> 00:07:00.190
Whenever I switch
to that branch,

00:07:00.190 --> 00:07:02.620
you see this message that says

00:07:02.620 --> 00:07:06.445
your branches behind
origin new feature,

00:07:06.445 --> 00:07:09.685
which is the tracking
branch by one commit,

00:07:09.685 --> 00:07:12.880
which means remote
repository is one commit

00:07:12.880 --> 00:07:16.465
ahead of our local
depository branch.

00:07:16.465 --> 00:07:19.390
It is also saying
that we can actually

00:07:19.390 --> 00:07:22.225
perform fast forward merge,

00:07:22.225 --> 00:07:25.185
which we're going to talk
about in upcoming lectures.

00:07:25.185 --> 00:07:28.460
And it is also suggesting
to us that we can

00:07:28.460 --> 00:07:31.835
use git pull to update
your local branch.

00:07:31.835 --> 00:07:33.650
Once we update the
local branch with

00:07:33.650 --> 00:07:36.440
good poll or with
the merge operation,

00:07:36.440 --> 00:07:39.125
you're going to see all
these new changes being

00:07:39.125 --> 00:07:41.869
available inside the
working directory.

00:07:41.869 --> 00:07:43.490
Countries, since
the local branches

00:07:43.490 --> 00:07:45.365
still pointing to all commit,

00:07:45.365 --> 00:07:48.860
your working directory is
currently not impacted at all.

00:07:48.860 --> 00:07:51.710
If I do git log now,

00:07:51.710 --> 00:07:54.065
you only see that

00:07:54.065 --> 00:07:55.610
our local new feature branch is

00:07:55.610 --> 00:07:58.220
pointing to this old commit.

00:07:58.220 --> 00:08:00.650
Earlier, if you remember,

00:08:00.650 --> 00:08:03.680
we have also seen
the tracking branch

00:08:03.680 --> 00:08:05.630
pointing to this commit.

00:08:05.630 --> 00:08:09.020
But after fetch tracking
branches now pointing to

00:08:09.020 --> 00:08:10.685
that new commit object

00:08:10.685 --> 00:08:13.175
that was downloaded
with git-fetch.

00:08:13.175 --> 00:08:15.750
I'll let, I'll see you next.
