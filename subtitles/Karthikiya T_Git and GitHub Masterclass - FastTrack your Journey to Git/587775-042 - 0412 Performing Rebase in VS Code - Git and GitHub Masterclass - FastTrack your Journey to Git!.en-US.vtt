WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.590
Alright, let us take a look
at an example of git rebase.

00:00:04.590 --> 00:00:06.510
But before that, let
me walk you through

00:00:06.510 --> 00:00:08.400
the current state
of our project.

00:00:08.400 --> 00:00:10.890
I have actually created
a brand new project for

00:00:10.890 --> 00:00:14.070
this purpose and I've
made a bunch of commits.

00:00:14.070 --> 00:00:17.205
Let me just walk you through
what exactly I have done.

00:00:17.205 --> 00:00:20.820
Since the master branch as
part of the very first commit,

00:00:20.820 --> 00:00:24.150
I have just introduced
these TXT files,

00:00:24.150 --> 00:00:27.450
admin inventory and
product dot TXT files.

00:00:27.450 --> 00:00:29.610
And in each one of those files,

00:00:29.610 --> 00:00:31.665
I've just added
couple of lines of

00:00:31.665 --> 00:00:35.955
text as if we have
written some code.

00:00:35.955 --> 00:00:39.835
The next commit went
inside the master as well.

00:00:39.835 --> 00:00:42.440
And before that, I
have of course created

00:00:42.440 --> 00:00:45.605
a branch that is based off
of the very first commit.

00:00:45.605 --> 00:00:47.720
As part of the second commit,

00:00:47.720 --> 00:00:49.565
as the message suggests us,

00:00:49.565 --> 00:00:51.425
admin Edits and master.

00:00:51.425 --> 00:00:53.480
I've just added one
line of text inside

00:00:53.480 --> 00:00:58.200
the admin dot TXT file, like so.

00:01:01.480 --> 00:01:03.980
And then I made my
first commit in

00:01:03.980 --> 00:01:05.570
the feature branch and does

00:01:05.570 --> 00:01:07.280
the message suggests inventory

00:01:07.280 --> 00:01:09.470
edits from feature one branch.

00:01:09.470 --> 00:01:11.390
I just added one line of text

00:01:11.390 --> 00:01:13.715
inside the invented or TXT file.

00:01:13.715 --> 00:01:17.315
Next time made commit
in master branch.

00:01:17.315 --> 00:01:19.160
And this time I
have added one line

00:01:19.160 --> 00:01:21.710
of text in the
product dot TXT file.

00:01:21.710 --> 00:01:24.170
And then I made one
more comment in

00:01:24.170 --> 00:01:26.015
the feature branch where I have

00:01:26.015 --> 00:01:30.110
edited the product dot
TXT file. Down the line.

00:01:30.110 --> 00:01:31.864
When we perform the rebase,

00:01:31.864 --> 00:01:33.860
we're going to have conflicts in

00:01:33.860 --> 00:01:35.780
product dot TXT file because we

00:01:35.780 --> 00:01:37.550
have one commit done in master

00:01:37.550 --> 00:01:39.800
where we have edited
product dot TXT file,

00:01:39.800 --> 00:01:43.040
and same is done in the
feature branch as well.

00:01:43.040 --> 00:01:45.830
Next time made one more
committed master branch.

00:01:45.830 --> 00:01:48.950
Well, this is not really
needed for me to explain this,

00:01:48.950 --> 00:01:51.020
but I've done this
comment just so

00:01:51.020 --> 00:01:53.705
that the graph would
look the way we want.

00:01:53.705 --> 00:01:56.015
Basically currently
this blue line

00:01:56.015 --> 00:01:57.965
is representing
the master branch,

00:01:57.965 --> 00:02:01.085
whereas the red line is
representing the feature branch.

00:02:01.085 --> 00:02:04.280
However, this may not
be the case always.

00:02:04.280 --> 00:02:05.810
Whichever branch we make

00:02:05.810 --> 00:02:08.780
the latest commit that
would be shown first.

00:02:08.780 --> 00:02:10.370
For example, if I were to make

00:02:10.370 --> 00:02:12.200
one more comment feature branch,

00:02:12.200 --> 00:02:14.420
feature branch would be turning

00:02:14.420 --> 00:02:17.330
blue and master branch
would be turning red.

00:02:17.330 --> 00:02:18.800
It might look confusing.

00:02:18.800 --> 00:02:22.820
And that's why I have added
this additional commit so

00:02:22.820 --> 00:02:24.710
that the master
branch would show up

00:02:24.710 --> 00:02:27.260
first and then the
feature branch.

00:02:27.260 --> 00:02:29.495
Now before we
proceed any further,

00:02:29.495 --> 00:02:30.800
It's really important for you to

00:02:30.800 --> 00:02:32.930
understand what
exactly is going on

00:02:32.930 --> 00:02:35.240
and what are all
the changes we have

00:02:35.240 --> 00:02:37.595
introduced in each
one of these commits.

00:02:37.595 --> 00:02:39.200
So I'm going to
make this project

00:02:39.200 --> 00:02:40.820
available for you to download.

00:02:40.820 --> 00:02:42.380
You can just import it into

00:02:42.380 --> 00:02:43.820
Visual Studio code and

00:02:43.820 --> 00:02:45.500
take a look at all
the list of changes,

00:02:45.500 --> 00:02:48.980
understand it, and
only then do proceed.

00:02:48.980 --> 00:02:51.560
Otherwise, you will start
to confuse yourself.

00:02:51.560 --> 00:02:54.155
If you're able to follow
along, that's great.

00:02:54.155 --> 00:02:56.480
If you're not,
then take a pause,

00:02:56.480 --> 00:02:58.310
understand what's going on here,

00:02:58.310 --> 00:03:00.320
and then continue watching.

00:03:00.320 --> 00:03:03.110
So as you can see, feature
one branch is currently based

00:03:03.110 --> 00:03:06.035
out of the very first
commit on master branch.

00:03:06.035 --> 00:03:08.150
We now want to rebase feature

00:03:08.150 --> 00:03:12.274
one branch to the latest
commit off master branch.

00:03:12.274 --> 00:03:15.530
How do we do that?
Well, let's right-click

00:03:15.530 --> 00:03:19.610
on the very latest commit,
the master branch.

00:03:19.610 --> 00:03:22.430
And then we have
this option called

00:03:22.430 --> 00:03:25.235
rebase current branch
on this commit.

00:03:25.235 --> 00:03:28.460
The current branch
is master branch.

00:03:28.460 --> 00:03:31.440
When to switch to
feature branch.

00:03:31.750 --> 00:03:34.250
And we know that
we have pushed to

00:03:34.250 --> 00:03:36.725
feature one branch because

00:03:36.725 --> 00:03:38.840
this circle right here
is pointing to feature

00:03:38.840 --> 00:03:41.780
one branch earlier it was
pointing to master branch.

00:03:41.780 --> 00:03:44.090
Now let's right-click
on latest commit off

00:03:44.090 --> 00:03:46.190
master branch and choose

00:03:46.190 --> 00:03:48.575
this option that says
rebase current branch.

00:03:48.575 --> 00:03:52.850
On this, the current
branches feature one branch.

00:03:52.850 --> 00:03:58.610
And this should ideally rebase
unless we have conflicts.

00:03:58.610 --> 00:04:00.560
Of course, we're going
to see conflicts

00:04:00.560 --> 00:04:02.930
because as I've
mentioned before,

00:04:02.930 --> 00:04:06.920
we have edited product dot TXT
file in both the branches.

00:04:06.920 --> 00:04:10.860
So let's click on rebase.

00:04:11.160 --> 00:04:14.080
As you can see, we
have conflicts.

00:04:14.080 --> 00:04:16.180
Let's dismiss this.

00:04:16.180 --> 00:04:18.430
Well, we should
ideally be seeing

00:04:18.430 --> 00:04:21.789
those files with
complex let me refresh.

00:04:21.789 --> 00:04:24.500
And there you have it.

00:04:25.560 --> 00:04:28.810
You can resolve the conflicts
and the way you want.

00:04:28.810 --> 00:04:32.019
In my case, I just want to
accept both the changes.

00:04:32.019 --> 00:04:34.810
Save the file. And then
I'm going to press

00:04:34.810 --> 00:04:39.175
this plus icon to
stage this file.

00:04:39.175 --> 00:04:41.290
And then I can click on

00:04:41.290 --> 00:04:43.120
this check icon to

00:04:43.120 --> 00:04:45.625
actually proceed with
the rebase operation.

00:04:45.625 --> 00:04:48.250
And the message that gets
populated by default

00:04:48.250 --> 00:04:50.920
here is the message of
the commenting feature,

00:04:50.920 --> 00:04:54.680
one branch that is actually
creating the conflict.

00:04:55.120 --> 00:04:58.475
We get this editor opened.

00:04:58.475 --> 00:05:00.650
But I'm just going to leave

00:05:00.650 --> 00:05:04.560
the message as is,
close the file.

00:05:05.110 --> 00:05:12.500
And this should finish
the rebase operation.

00:05:12.500 --> 00:05:15.860
As you can see, the first
four commits are off

00:05:15.860 --> 00:05:18.350
master branch and the
other two comments

00:05:18.350 --> 00:05:20.540
belong to the feature branch.

00:05:20.540 --> 00:05:24.540
Now we can go ahead and perform
the Fast Forward March.

00:05:28.420 --> 00:05:33.210
So I'm going to switch
back to master branch.

00:05:35.170 --> 00:05:37.925
Right-click on this commit.

00:05:37.925 --> 00:05:41.090
And then I can choose
merge into current branch.

00:05:41.090 --> 00:05:42.230
So I want to merge feature

00:05:42.230 --> 00:05:45.680
one branch into
the master branch.

00:05:45.680 --> 00:05:49.055
I don't want to
create a new commit

00:05:49.055 --> 00:05:52.050
for fast forward merge.

00:05:54.250 --> 00:05:57.485
So that's how you
perform rebase.

00:05:57.485 --> 00:06:01.520
And if you notice, we have
this linear development,

00:06:01.520 --> 00:06:03.710
which is what we're
expecting with

00:06:03.710 --> 00:06:07.440
rebase. I'll see you next.
