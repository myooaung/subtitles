WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.450
Let's talk about
significance of stashing.

00:00:03.450 --> 00:00:05.310
Let's say that we have
a new committee and

00:00:05.310 --> 00:00:07.470
remote repository. For that.

00:00:07.470 --> 00:00:11.110
Let me edit the
input dot TXT file

00:00:11.120 --> 00:00:17.115
and add one line
of text. Like so.

00:00:17.115 --> 00:00:19.605
Commit the changes.

00:00:19.605 --> 00:00:22.500
And let's say that in
my local enrollment,

00:00:22.500 --> 00:00:25.120
I'm going to edit the same file

00:00:25.160 --> 00:00:29.640
and add a line of text like so,

00:00:29.640 --> 00:00:32.370
save the file and close it.

00:00:32.370 --> 00:00:34.740
Now if I go to Git Bash

00:00:34.740 --> 00:00:37.395
and if I were to run
the command git pull,

00:00:37.395 --> 00:00:41.530
notice that I haven't staged
or committed those changes.

00:00:41.530 --> 00:00:43.130
I don't want to commit them

00:00:43.130 --> 00:00:45.335
because I'm still working on it.

00:00:45.335 --> 00:00:46.610
At the same time,
I would like to

00:00:46.610 --> 00:00:47.630
pull all the changes from

00:00:47.630 --> 00:00:49.160
the remote repository to

00:00:49.160 --> 00:00:51.840
have my working
directory updated.

00:00:52.420 --> 00:00:54.755
When I run this command,

00:00:54.755 --> 00:00:58.010
you'll see that Fetch has
happened successfully,

00:00:58.010 --> 00:01:00.350
but merge didn't happen.

00:01:00.350 --> 00:01:02.630
It says your local changes to

00:01:02.630 --> 00:01:06.485
the following files would
be overridden by merge.

00:01:06.485 --> 00:01:08.495
In for R dxdy,

00:01:08.495 --> 00:01:10.670
please commit your changes are

00:01:10.670 --> 00:01:13.325
stash them before you merge,

00:01:13.325 --> 00:01:17.225
and hence it has aborted
the mod operation.

00:01:17.225 --> 00:01:20.210
Essentially get this
confused as to what to

00:01:20.210 --> 00:01:23.225
do with those
uncommitted changes.

00:01:23.225 --> 00:01:26.270
One solution to this is,

00:01:26.270 --> 00:01:28.805
and this is something
that is not recommended.

00:01:28.805 --> 00:01:31.940
The command that I'm
about to run can actually

00:01:31.940 --> 00:01:34.040
delete all the work you

00:01:34.040 --> 00:01:36.830
have done so far in
your local machine.

00:01:36.830 --> 00:01:39.140
And that also includes the
changes that we've just

00:01:39.140 --> 00:01:41.840
introduced in for art file.

00:01:41.840 --> 00:01:45.154
Obviously, this is not
a recommended approach.

00:01:45.154 --> 00:01:48.875
But let me show you
the command git reset.

00:01:48.875 --> 00:01:51.665
We've already used this
command in the past.

00:01:51.665 --> 00:01:55.280
And then you're going to
provide the option hard.

00:01:55.280 --> 00:01:58.530
And you would
specify the remote.

00:01:59.020 --> 00:02:02.270
Let's see what this
is going to do.

00:02:02.270 --> 00:02:05.165
If I type git log,

00:02:05.165 --> 00:02:08.330
you're going to see all
the comments we have made

00:02:08.330 --> 00:02:11.015
locally or now gone for good.

00:02:11.015 --> 00:02:13.940
And that's what this
command is very dangerous.

00:02:13.940 --> 00:02:17.330
But it served the
purpose of being

00:02:17.330 --> 00:02:21.660
able to pull the changes
from the remote repository.

00:02:22.150 --> 00:02:25.250
If you go here, you

00:02:25.250 --> 00:02:28.679
see that we only have
these two files.

00:02:28.900 --> 00:02:32.010
Let us do git pull

00:02:32.890 --> 00:02:37.520
to pull in all the changes
from the remote repository.

00:02:37.520 --> 00:02:40.550
And now our working
directory is up-to-date.

00:02:40.550 --> 00:02:42.890
Basically our local depository

00:02:42.890 --> 00:02:44.645
as well as remote repository,

00:02:44.645 --> 00:02:46.790
or exactly in the same state.

00:02:46.790 --> 00:02:50.390
But this is not the recommended
approach obviously.

00:02:50.390 --> 00:02:54.230
So let us try to recreate the
same scenario once again.

00:02:54.230 --> 00:03:00.030
And let me walk you through
how we need to deal with it.

00:03:00.520 --> 00:03:03.875
I don't want to
commit these changes.

00:03:03.875 --> 00:03:05.900
But at the same time
I'd like to get

00:03:05.900 --> 00:03:08.820
the updates from the
remote repository.

00:03:08.830 --> 00:03:11.570
Let me go back to GitHub

00:03:11.570 --> 00:03:14.670
and edit this file
one more time.

00:03:18.190 --> 00:03:25.865
Whatever. Let's try
to do git pull now.

00:03:25.865 --> 00:03:28.440
And obviously,

00:03:30.730 --> 00:03:38.010
again, you're going to see
much getting aborted. Like so.

00:03:38.010 --> 00:03:40.655
So what is the
solution right now?

00:03:40.655 --> 00:03:44.330
The solution is
git stash command.

00:03:44.330 --> 00:03:45.725
Basically, this command will

00:03:45.725 --> 00:03:47.705
temporarily store
our local changes

00:03:47.705 --> 00:03:52.265
somewhere and we can retrieve
them whenever we want.

00:03:52.265 --> 00:03:55.640
For now, since our local
changes are causing trouble.

00:03:55.640 --> 00:03:58.040
To pull the changes from
the remote repository,

00:03:58.040 --> 00:04:00.750
let me go ahead and stash them.

00:04:01.060 --> 00:04:05.750
As you can see, saved walking
down a tree and index date,

00:04:05.750 --> 00:04:08.570
working progress on new feature.

00:04:08.570 --> 00:04:11.915
It is pointing to
input.txt file.

00:04:11.915 --> 00:04:14.600
If you open up in full
dot TXT file now,

00:04:14.600 --> 00:04:16.459
you're not going
to see the changes

00:04:16.459 --> 00:04:18.960
that I've just introduced.

00:04:19.810 --> 00:04:27.300
Now we can go ahead
and do git rebase.

00:04:27.970 --> 00:04:31.055
Go back to the
working directory.

00:04:31.055 --> 00:04:34.830
You should be seeing
all the remote changes.

00:04:35.470 --> 00:04:37.760
Now we can bring back all of

00:04:37.760 --> 00:04:40.010
the changes that I was
previously working

00:04:40.010 --> 00:04:45.260
on with the command
git stash, pop.

00:04:45.260 --> 00:04:47.405
Now obviously we'll have

00:04:47.405 --> 00:04:53.570
the complex can go back and
open up input.txt file.

00:04:53.570 --> 00:04:55.730
You'll see that these
are the changes that

00:04:55.730 --> 00:04:58.295
are coming from upstream.

00:04:58.295 --> 00:05:01.115
Upstream as in the
remote repository.

00:05:01.115 --> 00:05:04.280
We can decide as
to what changes we

00:05:04.280 --> 00:05:07.250
want to keep editing this file,

00:05:07.250 --> 00:05:14.310
like cell, close the
file, stays the file.

00:05:14.590 --> 00:05:17.850
Git status.

00:05:18.700 --> 00:05:24.150
Now if I decide to commit
my changes, I can do that.

00:05:29.230 --> 00:05:31.670
But able to pull
the changes from

00:05:31.670 --> 00:05:33.680
remote repository without having

00:05:33.680 --> 00:05:36.420
to commit our existing changes.
