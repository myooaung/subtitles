WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.800
Okay, let us try to get

00:00:01.800 --> 00:00:04.440
some idea as to what
our git branches.

00:00:04.440 --> 00:00:07.770
Now I do have to mention
that with this video alone,

00:00:07.770 --> 00:00:09.540
you may not be able
to understand or get

00:00:09.540 --> 00:00:12.060
complete picture as to
what git branches are.

00:00:12.060 --> 00:00:14.550
You need to watch all the
rest of the lectures in

00:00:14.550 --> 00:00:16.515
this chapter in order to have

00:00:16.515 --> 00:00:18.795
a complete picture of
what our git branches,

00:00:18.795 --> 00:00:21.120
what is the purpose,
why they existed,

00:00:21.120 --> 00:00:23.100
and how they solve
all the problems

00:00:23.100 --> 00:00:24.720
we had talked earlier.

00:00:24.720 --> 00:00:27.375
So let's move on and try
to get as the staff,

00:00:27.375 --> 00:00:29.670
what I'll get branches.

00:00:29.670 --> 00:00:33.405
Git branches is such an
important feature in git that

00:00:33.405 --> 00:00:35.100
even the logo itself is having

00:00:35.100 --> 00:00:38.055
a symbol representing
get branches.

00:00:38.055 --> 00:00:39.900
So you can understand
the significance

00:00:39.900 --> 00:00:42.095
of this feature in git.

00:00:42.095 --> 00:00:44.425
Now I want to ask
you a question.

00:00:44.425 --> 00:00:46.750
What is the first thing
that comes to your mind

00:00:46.750 --> 00:00:49.990
when you hear the word branch?

00:00:49.990 --> 00:00:52.795
Would you imagine
something like this?

00:00:52.795 --> 00:00:54.625
Well, you're not wrong.

00:00:54.625 --> 00:00:55.180
Here.

00:00:55.180 --> 00:00:58.450
If you observe we have a
main branch and then we also

00:00:58.450 --> 00:01:02.425
have sub branches which
come from the main branch.

00:01:02.425 --> 00:01:04.180
And each one of
these branches are

00:01:04.180 --> 00:01:06.550
having their own set of leaves.

00:01:06.550 --> 00:01:08.530
Well, this is synonymous to

00:01:08.530 --> 00:01:11.200
what branches are n get as well.

00:01:11.200 --> 00:01:14.590
So n get, you might have a
master branch created by

00:01:14.590 --> 00:01:16.330
get when you initialize

00:01:16.330 --> 00:01:18.250
the project and make
your first commit.

00:01:18.250 --> 00:01:20.650
We don't have to manually
create this gate,

00:01:20.650 --> 00:01:22.090
has done that for us.

00:01:22.090 --> 00:01:24.190
And all the comments
that we've done so

00:01:24.190 --> 00:01:26.705
far went inside this
default branch,

00:01:26.705 --> 00:01:29.915
master branch, even though
we're not aware of it.

00:01:29.915 --> 00:01:31.805
And then we could also have

00:01:31.805 --> 00:01:35.390
feature branches that come
from the master branch.

00:01:35.390 --> 00:01:37.580
Just as we have main branch and

00:01:37.580 --> 00:01:40.550
sub-branches in a
real-world branch,

00:01:40.550 --> 00:01:44.870
we also have master branch
and feature branches in good.

00:01:44.870 --> 00:01:46.370
And just as each of

00:01:46.370 --> 00:01:49.460
the branches would have
their own set of leaves,

00:01:49.460 --> 00:01:52.085
even in Git, we have convects

00:01:52.085 --> 00:01:54.815
residing in each one
of these branches.

00:01:54.815 --> 00:01:58.580
And all these branches
would evolve independently.

00:01:58.580 --> 00:02:02.180
For example, if you make a
commit and feature one branch,

00:02:02.180 --> 00:02:03.830
those changes will not be

00:02:03.830 --> 00:02:06.350
available in any of
the other branches.

00:02:06.350 --> 00:02:08.150
Same as the case
with other branches.

00:02:08.150 --> 00:02:10.205
If you make a comment
and master branch,

00:02:10.205 --> 00:02:11.720
then those changes will not be

00:02:11.720 --> 00:02:14.360
available in other branches.

00:02:14.360 --> 00:02:17.975
If you want to make a
commit in a certain branch,

00:02:17.975 --> 00:02:19.370
you need to switch to

00:02:19.370 --> 00:02:22.115
that branch and make a
commit in that branch.

00:02:22.115 --> 00:02:23.960
And those committed changes will

00:02:23.960 --> 00:02:26.225
not be available
in other branches.

00:02:26.225 --> 00:02:28.445
And when you switch to a branch,

00:02:28.445 --> 00:02:32.030
git will make the working
directory look like what it

00:02:32.030 --> 00:02:33.380
looked like when you made

00:02:33.380 --> 00:02:36.049
the last commit in that
particular branch.

00:02:36.049 --> 00:02:40.010
Eventually, the goal of all
this feature branches in

00:02:40.010 --> 00:02:44.825
most cases would be to get
merged in the master branch.

00:02:44.825 --> 00:02:48.350
Which means we will now have
all the changes introduced

00:02:48.350 --> 00:02:52.055
in this feature branches
inside the master branch.

00:02:52.055 --> 00:02:54.470
Now, obviously, this
may not be making

00:02:54.470 --> 00:02:56.990
complete sense to you
at this point in time.

00:02:56.990 --> 00:02:59.060
So let's break it
down and see how

00:02:59.060 --> 00:03:02.120
this project might have
evolved from the beginning.

00:03:02.120 --> 00:03:03.890
So when initially as the project

00:03:03.890 --> 00:03:05.225
and make your first commit,

00:03:05.225 --> 00:03:08.195
you have a master
branch created by good.

00:03:08.195 --> 00:03:12.020
And let's say that you have
made a couple of comments.

00:03:12.020 --> 00:03:15.530
These comments would go
inside the master branch.

00:03:15.530 --> 00:03:17.465
So we have the first commit

00:03:17.465 --> 00:03:19.565
which does not have any parent.

00:03:19.565 --> 00:03:21.125
And then you have
the second commit,

00:03:21.125 --> 00:03:24.425
which has the first commit
as its parent commit.

00:03:24.425 --> 00:03:26.090
And now let's say that you are

00:03:26.090 --> 00:03:28.145
assigned to work on feature one.

00:03:28.145 --> 00:03:30.080
Instead of committing
all those feature

00:03:30.080 --> 00:03:32.195
one changes inside
the master branch.

00:03:32.195 --> 00:03:34.040
What you're going to do
is you're going to run

00:03:34.040 --> 00:03:36.740
a command to create
a feature branch.

00:03:36.740 --> 00:03:39.800
And this would just create
the feature branch.

00:03:39.800 --> 00:03:42.170
And once you do that,
you need to switch to

00:03:42.170 --> 00:03:43.820
that branch to be able to

00:03:43.820 --> 00:03:46.580
make commits in that
feature branch.

00:03:46.580 --> 00:03:49.850
So you would run a command
to switch to that branch.

00:03:49.850 --> 00:03:51.095
And once you do that,

00:03:51.095 --> 00:03:52.505
you're going to
start introducing

00:03:52.505 --> 00:03:54.365
all the feature one changes.

00:03:54.365 --> 00:03:56.540
When you make the first comment.

00:03:56.540 --> 00:04:00.245
We have a comment object
whose parents would be

00:04:00.245 --> 00:04:01.910
the last commit of the branch

00:04:01.910 --> 00:04:04.160
from where you
created this branch.

00:04:04.160 --> 00:04:06.815
In this case, it's
the master branch.

00:04:06.815 --> 00:04:08.540
So the first comment
that you made

00:04:08.540 --> 00:04:10.130
inside the feature
one branch would

00:04:10.130 --> 00:04:13.370
now point to the last commit
of the master branch.

00:04:13.370 --> 00:04:15.620
And then let's say that
you have made couple

00:04:15.620 --> 00:04:17.960
of comments inside
the feature branch.

00:04:17.960 --> 00:04:20.240
None of the changes that
we've introduced in feature

00:04:20.240 --> 00:04:23.270
one branch would be
available in master branch.

00:04:23.270 --> 00:04:25.250
Because as I've
mentioned before,

00:04:25.250 --> 00:04:26.765
all these branches would evolve

00:04:26.765 --> 00:04:28.760
independent to each other.

00:04:28.760 --> 00:04:30.470
Now let's say that
you have decided to

00:04:30.470 --> 00:04:32.240
work on something else and you

00:04:32.240 --> 00:04:34.190
wanted to contribute
all those changes

00:04:34.190 --> 00:04:35.765
inside the master branch.

00:04:35.765 --> 00:04:37.160
So you would again switch to

00:04:37.160 --> 00:04:39.905
master branch and
make a comment.

00:04:39.905 --> 00:04:43.250
Do take a note that
these two commits

00:04:43.250 --> 00:04:46.490
or having the exact same
parent and whatever

00:04:46.490 --> 00:04:48.080
the changes that
you've introduced

00:04:48.080 --> 00:04:49.370
with this new commit inside

00:04:49.370 --> 00:04:51.230
the master branch will not be

00:04:51.230 --> 00:04:53.810
available inside
the feature branch.

00:04:53.810 --> 00:04:55.835
Feature one branch
would only have

00:04:55.835 --> 00:04:57.620
all the changes introduced in

00:04:57.620 --> 00:04:59.630
master branch till the time you

00:04:59.630 --> 00:05:02.300
created feature on branch
and made the first commit.

00:05:02.300 --> 00:05:03.950
Plus all the changes that

00:05:03.950 --> 00:05:05.735
you've introduced
in feature one.

00:05:05.735 --> 00:05:07.670
Okay, Let's say
that you have made

00:05:07.670 --> 00:05:10.325
one more comment inside
the master branch.

00:05:10.325 --> 00:05:12.470
And it is at this point in time,

00:05:12.470 --> 00:05:14.630
let's say that you are
asked to work on feature

00:05:14.630 --> 00:05:18.080
to guess what you're going to
create yet another branch,

00:05:18.080 --> 00:05:20.030
let's call it feature to branch.

00:05:20.030 --> 00:05:22.580
And then you have to switch
to that branch to be able

00:05:22.580 --> 00:05:25.340
to make commits inside
the feature to branch,

00:05:25.340 --> 00:05:27.125
you're going to make a commit.

00:05:27.125 --> 00:05:28.670
And this time it
would be trapped

00:05:28.670 --> 00:05:30.335
inside feature to branch.

00:05:30.335 --> 00:05:32.690
And this commit object would be

00:05:32.690 --> 00:05:35.915
pointing to the last commit
up the master branch,

00:05:35.915 --> 00:05:37.955
because it is the master branch

00:05:37.955 --> 00:05:41.030
from where we have created
this feature to branch.

00:05:41.030 --> 00:05:43.610
And all the subsequent
commits you're going to make

00:05:43.610 --> 00:05:46.520
would be tracked inside
feature to branch.

00:05:46.520 --> 00:05:48.080
Now once again,
you might want to

00:05:48.080 --> 00:05:49.415
go back to master branch

00:05:49.415 --> 00:05:52.580
and make bunch of comments and

00:05:52.580 --> 00:05:54.560
not dimension feature to branch

00:05:54.560 --> 00:05:56.630
will have changes that
you've introduced in

00:05:56.630 --> 00:05:58.790
master branch till the time you

00:05:58.790 --> 00:06:01.685
created feature to branch
and made the first commit.

00:06:01.685 --> 00:06:03.560
And all the comments that you've

00:06:03.560 --> 00:06:05.375
introduced in feature to branch,

00:06:05.375 --> 00:06:07.460
but does not have any of
the changes that you've

00:06:07.460 --> 00:06:10.010
introduced in any of
the other branches.

00:06:10.010 --> 00:06:12.605
Like for example,
feature one branch.

00:06:12.605 --> 00:06:14.840
Eventually you want to

00:06:14.840 --> 00:06:17.330
merge all the changes
that you've introduced in

00:06:17.330 --> 00:06:19.550
this feature branches into

00:06:19.550 --> 00:06:21.845
the master branch
so that you have

00:06:21.845 --> 00:06:25.295
all the changes inside
the master branch.

00:06:25.295 --> 00:06:29.180
Now, obviously, you might be
having a lot of questions as

00:06:29.180 --> 00:06:30.410
to how this would solve

00:06:30.410 --> 00:06:32.795
all the problems we
had talked earlier.

00:06:32.795 --> 00:06:34.655
And what exactly is branch?

00:06:34.655 --> 00:06:36.500
How does it work internally?

00:06:36.500 --> 00:06:39.140
And how is it managed
to what it means

00:06:39.140 --> 00:06:41.915
to when you switch to
a different branch,

00:06:41.915 --> 00:06:43.520
you, and to find answers to

00:06:43.520 --> 00:06:47.105
all such questions in
next few lectures.

00:06:47.105 --> 00:06:49.280
And by the way, I've
mentioned that we make

00:06:49.280 --> 00:06:51.860
commits inside the
master branch.

00:06:51.860 --> 00:06:54.125
Typically we do not tend to make

00:06:54.125 --> 00:06:56.690
commits directly inside
the master branch.

00:06:56.690 --> 00:06:58.685
We always create a new branch,

00:06:58.685 --> 00:07:01.205
beta feature or a bug fix.

00:07:01.205 --> 00:07:03.845
And then once we are
sure of all the changes,

00:07:03.845 --> 00:07:04.925
once we test them,

00:07:04.925 --> 00:07:07.520
get them reviewed,
only then will we

00:07:07.520 --> 00:07:10.535
merge all those changes
inside the master branch.

00:07:10.535 --> 00:07:12.560
So essentially what
master branch would

00:07:12.560 --> 00:07:14.825
have is so-called
a merge commit.

00:07:14.825 --> 00:07:18.260
Will talk about merge commits
in upcoming lectures.

00:07:18.260 --> 00:07:19.760
I don't want to
talk about it right

00:07:19.760 --> 00:07:22.370
now and confuse you further.

00:07:22.370 --> 00:07:25.200
I'll see you in the next one.
