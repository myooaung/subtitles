WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.775
Now let's assume that
you've changed your mind.

00:00:02.775 --> 00:00:05.985
You feel like you have
accidentally undone

00:00:05.985 --> 00:00:07.590
the comeback and you'd like

00:00:07.590 --> 00:00:09.375
to retrieve all those changes.

00:00:09.375 --> 00:00:11.475
Well, there's a way for that.

00:00:11.475 --> 00:00:14.670
Fortunately, get, we'll keep
this commit objects and

00:00:14.670 --> 00:00:16.920
its repository for a
good period of time

00:00:16.920 --> 00:00:19.500
before it decides
to delete them.

00:00:19.500 --> 00:00:22.020
When it does the garbage
collection and all.

00:00:22.020 --> 00:00:23.670
So let's take a
look at if we can

00:00:23.670 --> 00:00:25.590
retrieve all those changes.

00:00:25.590 --> 00:00:27.360
First of all, we need to get

00:00:27.360 --> 00:00:29.310
hold of the hashCode
of the commit.

00:00:29.310 --> 00:00:31.905
Those changes would
like to retrieve.

00:00:31.905 --> 00:00:33.940
So how do we know the commit ID?

00:00:33.940 --> 00:00:38.975
Right now we can just scroll
up and get the commit ID.

00:00:38.975 --> 00:00:41.705
But you may not be able
to scroll up every time.

00:00:41.705 --> 00:00:43.280
For example, if I
close this window

00:00:43.280 --> 00:00:45.590
and reopen, it's gone.

00:00:45.590 --> 00:00:48.215
So how do we get hauled
off the commit ID?

00:00:48.215 --> 00:00:51.830
Well, get offers a command
that will help us out for just

00:00:51.830 --> 00:00:58.865
that command is log,
our reference log.

00:00:58.865 --> 00:01:02.345
Whenever we updated our friends
in the local repository.

00:01:02.345 --> 00:01:03.830
But running a command,

00:01:03.830 --> 00:01:06.215
reference logs have
a record of that.

00:01:06.215 --> 00:01:08.314
And you can see
all those records

00:01:08.314 --> 00:01:10.325
by running this command.

00:01:10.325 --> 00:01:16.470
Here, you can get hold of
the hashCode of that commit.

00:01:16.540 --> 00:01:18.800
Well now I could just add

00:01:18.800 --> 00:01:21.365
git checkout and
go to that commit.

00:01:21.365 --> 00:01:24.485
And that would bring us
to a detached head state.

00:01:24.485 --> 00:01:27.604
However, you can just
copy all those changes,

00:01:27.604 --> 00:01:29.075
bring all those changes,

00:01:29.075 --> 00:01:30.905
and make a new commit.

00:01:30.905 --> 00:01:34.070
But we have a better
way to deal with that.

00:01:34.070 --> 00:01:37.895
So instead of doing git checkout

00:01:37.895 --> 00:01:42.755
and then specifying the
hashCode of that commit.

00:01:42.755 --> 00:01:45.035
What we're going to do is

00:01:45.035 --> 00:01:48.155
I'm going to specify
the option hyphen b,

00:01:48.155 --> 00:01:50.150
and I'm going to specify a name.

00:01:50.150 --> 00:01:52.550
And this name is
essentially going to be

00:01:52.550 --> 00:01:56.195
name of the branch that
we're about to create.

00:01:56.195 --> 00:02:00.050
For example, let's
say new branch.

00:02:00.050 --> 00:02:02.195
By the way, for branch names,

00:02:02.195 --> 00:02:04.565
we would never use whitespaces.

00:02:04.565 --> 00:02:07.280
We would want to
use hyphen instead.

00:02:07.280 --> 00:02:09.620
So what this command does

00:02:09.620 --> 00:02:12.230
is when we have this
option hyphen b,

00:02:12.230 --> 00:02:15.965
this will not only create
this particular branch,

00:02:15.965 --> 00:02:18.785
but we'll also switch
to that branch.

00:02:18.785 --> 00:02:21.980
And it's going to
point to this comment.

00:02:21.980 --> 00:02:23.900
Let's run this command.

00:02:23.900 --> 00:02:25.250
And as you can see,

00:02:25.250 --> 00:02:26.780
we have switched to

00:02:26.780 --> 00:02:29.195
that new branch that
we've just created.

00:02:29.195 --> 00:02:32.030
And if I do git log now,

00:02:32.030 --> 00:02:37.340
you can see that we
have the third and

00:02:37.340 --> 00:02:39.020
the other two comments
are actually from

00:02:39.020 --> 00:02:41.270
the master branch and escalate

00:02:41.270 --> 00:02:44.165
the branch from where
we created this branch.

00:02:44.165 --> 00:02:45.890
But how do we get the commit

00:02:45.890 --> 00:02:48.080
three changes into
our master branch?

00:02:48.080 --> 00:02:50.480
Well, we can do
that with emerge.

00:02:50.480 --> 00:02:52.610
We haven't talked about mergers.

00:02:52.610 --> 00:02:55.430
We will talk about it
in upcoming lectures.

00:02:55.430 --> 00:02:58.370
But maybe I'll just quickly
demonstrate to you,

00:02:58.370 --> 00:03:01.370
just to give you a sense
of what is a merge.

00:03:01.370 --> 00:03:07.655
So for that, I'd like to
switch back to master branch.

00:03:07.655 --> 00:03:09.680
I'm going to use
the command git,

00:03:09.680 --> 00:03:11.570
merge out,

00:03:11.570 --> 00:03:13.280
specify the branch
I would like to

00:03:13.280 --> 00:03:15.290
merge into master branch.

00:03:15.290 --> 00:03:18.259
In this case it's new branch.

00:03:18.259 --> 00:03:21.830
Now if I do git log
inside the master branch,

00:03:21.830 --> 00:03:25.445
you're going to see we
have those new changes.

00:03:25.445 --> 00:03:27.380
What we've done just now is

00:03:27.380 --> 00:03:29.690
so-called a fast forward merge.

00:03:29.690 --> 00:03:31.010
Again, we're going to talk about

00:03:31.010 --> 00:03:32.690
more just in coming lectures.

00:03:32.690 --> 00:03:34.925
Don't think about it too much.

00:03:34.925 --> 00:03:37.415
One last thing I'd like
to mention is that

00:03:37.415 --> 00:03:39.980
when you reverse the changes
or reverse a commit.

00:03:39.980 --> 00:03:41.390
But if you've already pushed

00:03:41.390 --> 00:03:43.625
those changes onto the
remote repository,

00:03:43.625 --> 00:03:45.905
then it's going to
create a problem.

00:03:45.905 --> 00:03:47.600
Now since we haven't
talked about

00:03:47.600 --> 00:03:50.195
centralized repository
and team collaboration,

00:03:50.195 --> 00:03:51.560
I'm not going to talk about

00:03:51.560 --> 00:03:53.540
the Seder, but as
a rule of thumb,

00:03:53.540 --> 00:03:56.735
just remember, if you'd
like to undo the Commit,

00:03:56.735 --> 00:03:58.745
do it before you actually push

00:03:58.745 --> 00:04:01.980
all those changes on to
the remote repository.
