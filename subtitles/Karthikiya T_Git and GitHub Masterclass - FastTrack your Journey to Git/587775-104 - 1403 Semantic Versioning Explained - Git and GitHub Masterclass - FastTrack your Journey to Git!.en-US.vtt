WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.195
Let's talk about
semantic versioning.

00:00:03.195 --> 00:00:05.760
Semantic versioning is
a standard practice

00:00:05.760 --> 00:00:07.410
followed to worship in

00:00:07.410 --> 00:00:11.985
a particular software release
or a library or an API.

00:00:11.985 --> 00:00:14.685
And here is the format
of semantic versioning.

00:00:14.685 --> 00:00:17.085
The first part is
the major version.

00:00:17.085 --> 00:00:20.160
The second part is
the minor version,

00:00:20.160 --> 00:00:23.275
and the third part
is called a patch.

00:00:23.275 --> 00:00:25.820
The way the semantic versioning
works in K, software.

00:00:25.820 --> 00:00:28.325
Software is slightly different

00:00:28.325 --> 00:00:31.535
compared to the way it
works in case of an API.

00:00:31.535 --> 00:00:34.670
Let's first talk about
in case of a software,

00:00:34.670 --> 00:00:36.290
something like a video editor

00:00:36.290 --> 00:00:38.945
or an operating
system, et cetera.

00:00:38.945 --> 00:00:41.480
So whenever you have
any significant changes

00:00:41.480 --> 00:00:43.400
are a huge chunk of features.

00:00:43.400 --> 00:00:45.530
Or maybe you have
deleted some of

00:00:45.530 --> 00:00:48.109
the existing features are
significantly modified,

00:00:48.109 --> 00:00:50.840
existing features,
then you might want to

00:00:50.840 --> 00:00:54.155
consider incrementing
the major version.

00:00:54.155 --> 00:00:57.185
When you do that, you're
going to reset the values of

00:00:57.185 --> 00:01:00.695
both minor as well
as patch back to 0.

00:01:00.695 --> 00:01:02.900
Or if you have just
a couple of features

00:01:02.900 --> 00:01:05.735
delivered and they're
not very significant,

00:01:05.735 --> 00:01:07.490
then you can consider
incrementing

00:01:07.490 --> 00:01:09.170
the minor version number.

00:01:09.170 --> 00:01:11.180
And if you have any bug fixes or

00:01:11.180 --> 00:01:13.670
hotfixes on top of this version,

00:01:13.670 --> 00:01:16.370
then you can consider
incrementing

00:01:16.370 --> 00:01:20.450
the patch version as and when
you introduce new hotfixes,

00:01:20.450 --> 00:01:22.085
you're going to
keep incrementing

00:01:22.085 --> 00:01:24.605
the patch number like so.

00:01:24.605 --> 00:01:27.140
Now let us say that you
have worked on couple of

00:01:27.140 --> 00:01:29.825
more features and they
are just minor changes.

00:01:29.825 --> 00:01:33.950
You can once again increment
the minor version number,

00:01:33.950 --> 00:01:38.135
but then you have to reset
the value of patch back to 0.

00:01:38.135 --> 00:01:41.255
This is how the semantic
versioning works.

00:01:41.255 --> 00:01:43.115
And as I mentioned before,

00:01:43.115 --> 00:01:45.604
the way this works
in case of an API,

00:01:45.604 --> 00:01:48.290
is slightly different of

00:01:48.290 --> 00:01:50.360
an API whenever you
increment the value of

00:01:50.360 --> 00:01:53.480
the major version would mean
that you have introduced

00:01:53.480 --> 00:01:55.460
significant changes that would

00:01:55.460 --> 00:01:57.605
no longer be
backward compatible.

00:01:57.605 --> 00:02:00.484
For example, maybe you have
removed certain features

00:02:00.484 --> 00:02:03.964
or modified significantly some
of the existing features.

00:02:03.964 --> 00:02:06.560
What that means is all the
projects that we're using

00:02:06.560 --> 00:02:08.930
previous version of
your library would have

00:02:08.930 --> 00:02:10.835
to consider changing their code

00:02:10.835 --> 00:02:14.029
before they can take the latest
version of your library.

00:02:14.029 --> 00:02:15.590
That's what it means when you

00:02:15.590 --> 00:02:17.255
increment the major version.

00:02:17.255 --> 00:02:20.315
However, incrementing
the minor version

00:02:20.315 --> 00:02:23.045
would signify that the new
features or functionality has

00:02:23.045 --> 00:02:26.210
been added and doesn't
require anybody to modify

00:02:26.210 --> 00:02:30.259
the code to make their code
compatible with your library.

00:02:30.259 --> 00:02:34.310
The patches similar to the
patch we had talked earlier.

00:02:34.310 --> 00:02:35.915
If we're incrementing it,

00:02:35.915 --> 00:02:39.185
that means you have provided
a bug fix or a hot fix.

00:02:39.185 --> 00:02:41.915
So that's how semantic
versioning works.

00:02:41.915 --> 00:02:44.220
I'll see you next.
