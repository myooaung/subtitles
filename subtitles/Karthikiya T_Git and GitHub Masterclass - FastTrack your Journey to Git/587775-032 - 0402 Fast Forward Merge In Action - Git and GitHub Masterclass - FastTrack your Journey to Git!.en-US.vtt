WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.440 --> 00:00:03.435
In order to explain
fast-forward Merge,

00:00:03.435 --> 00:00:05.460
I've brought the project
into this state.

00:00:05.460 --> 00:00:07.950
We have the master branch
with these three files,

00:00:07.950 --> 00:00:11.625
ABC, and there are delivered
in three different commits.

00:00:11.625 --> 00:00:12.990
Similarly, we have feature

00:00:12.990 --> 00:00:15.000
one branch with the files D, E,

00:00:15.000 --> 00:00:16.260
F, and they're all

00:00:16.260 --> 00:00:18.625
delivered in three
different comments as well.

00:00:18.625 --> 00:00:22.145
Now let's take a look at
fast-forward much inaction.

00:00:22.145 --> 00:00:24.380
On the left we
have the Git Bash.

00:00:24.380 --> 00:00:26.540
On the right, we have
the working directory.

00:00:26.540 --> 00:00:29.600
You can simultaneously
observe what is happening in

00:00:29.600 --> 00:00:32.660
working directory while we
run commands on the Git Bash.

00:00:32.660 --> 00:00:34.460
So currently I'm in
master branch and

00:00:34.460 --> 00:00:36.320
so you're seeing ABC files.

00:00:36.320 --> 00:00:41.045
If I were to switch
to feature branch,

00:00:41.045 --> 00:00:43.804
then you're going to see
the working directory

00:00:43.804 --> 00:00:46.115
would get populated
with all the files,

00:00:46.115 --> 00:00:47.540
which includes changes of

00:00:47.540 --> 00:00:50.000
master branch as well
as the feature branch.

00:00:50.000 --> 00:00:51.680
Now let's take a look at which

00:00:51.680 --> 00:00:54.755
commits out this brand
just pointing to.

00:00:54.755 --> 00:01:03.875
I'm going to do git
refs, heads master.

00:01:03.875 --> 00:01:06.170
And similarly, let's take a look

00:01:06.170 --> 00:01:10.160
at what the feature
branches wanting to.

00:01:10.160 --> 00:01:12.920
And if I do git log,

00:01:12.920 --> 00:01:16.040
you can see that

00:01:16.040 --> 00:01:19.505
the feature branch is pointing
to the very latest commit,

00:01:19.505 --> 00:01:22.955
but master branch is pointing to

00:01:22.955 --> 00:01:24.980
its latest commit in

00:01:24.980 --> 00:01:30.140
the master branch,
which would be this.

00:01:30.140 --> 00:01:32.990
Now I cannot merge
master branch into

00:01:32.990 --> 00:01:34.700
the feature branch because

00:01:34.700 --> 00:01:35.960
feature branches already having

00:01:35.960 --> 00:01:37.460
all the changes
of master branch,

00:01:37.460 --> 00:01:38.975
it doesn't make sense.

00:01:38.975 --> 00:01:43.230
So we need to switch
back to master branch.

00:01:45.540 --> 00:01:47.890
And then they'll get that

00:01:47.890 --> 00:01:49.240
we want to bring
in all the changes

00:01:49.240 --> 00:01:52.300
of feature branch into
the master branch.

00:01:52.300 --> 00:01:55.040
And once I run that command,

00:01:55.470 --> 00:01:58.210
we should be able to
see the master branch

00:01:58.210 --> 00:02:00.775
pointing to this commit.

00:02:00.775 --> 00:02:06.610
So it gets the command
git merge name

00:02:06.610 --> 00:02:08.755
of the branch that
you want to merge.

00:02:08.755 --> 00:02:12.080
In this case it's
feature one branch.

00:02:12.210 --> 00:02:14.755
And as you can see,

00:02:14.755 --> 00:02:16.630
the summary shows that these are

00:02:16.630 --> 00:02:21.415
all the files which are now
part of the master branch.

00:02:21.415 --> 00:02:23.290
And even the working
directory is

00:02:23.290 --> 00:02:26.360
updated with all of those files.

00:02:26.500 --> 00:02:30.980
If you take a look at what
master branch is pointing to,

00:02:30.980 --> 00:02:33.680
then it points to
the exact commit.

00:02:33.680 --> 00:02:36.015
That feature branch is pointing.

00:02:36.015 --> 00:02:39.170
That's fast-forward
much for you.

00:02:39.170 --> 00:02:41.930
Now we can go ahead and
delete the feature branch,

00:02:41.930 --> 00:02:44.690
but we're going to talk
about it in next lecture.

00:02:44.690 --> 00:02:47.570
One thing I would like to
mention is that you may not

00:02:47.570 --> 00:02:48.620
want to always delete the

00:02:48.620 --> 00:02:50.315
branch once you're done with it.

00:02:50.315 --> 00:02:52.310
Sometimes you might
want to keep it for

00:02:52.310 --> 00:02:54.140
a while because there might be

00:02:54.140 --> 00:02:55.940
instances where you might need

00:02:55.940 --> 00:02:58.054
to make those last
minute changes.

00:02:58.054 --> 00:03:00.755
Or there might be certain fixes

00:03:00.755 --> 00:03:03.635
that you want to deliver as
part of the same branch.

00:03:03.635 --> 00:03:05.900
So you're going to use
the same feature branch

00:03:05.900 --> 00:03:08.435
again to make all those changes,

00:03:08.435 --> 00:03:10.595
test them, get them reviewed,

00:03:10.595 --> 00:03:11.990
and then eventually merge

00:03:11.990 --> 00:03:14.150
all those changes in
the master branch.

00:03:14.150 --> 00:03:17.255
And yes, you can
reuse the same branch

00:03:17.255 --> 00:03:20.615
and you can merge the same
branch again and again.

00:03:20.615 --> 00:03:23.000
However, most often we

00:03:23.000 --> 00:03:25.460
create another
branch for bug fixes

00:03:25.460 --> 00:03:27.695
or any of those
last minute changes

00:03:27.695 --> 00:03:31.370
and then merge those changes
in the master branch.

00:03:31.370 --> 00:03:34.475
One another thing I would
like to mention is that

00:03:34.475 --> 00:03:38.990
typically happens on GitHub
in a centralized upholstery.

00:03:38.990 --> 00:03:41.300
Since we haven't
explored GitHub,

00:03:41.300 --> 00:03:44.180
it doesn't make sense for me
to talk about it right now.

00:03:44.180 --> 00:03:46.520
But nonetheless, merging is also

00:03:46.520 --> 00:03:50.060
the London local depository
in certain instances.

00:03:50.060 --> 00:03:52.350
I'll see you next one.
