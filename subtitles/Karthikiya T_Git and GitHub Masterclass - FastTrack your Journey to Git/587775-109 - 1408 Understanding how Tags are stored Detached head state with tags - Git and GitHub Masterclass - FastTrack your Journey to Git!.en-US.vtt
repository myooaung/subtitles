WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.775
Earlier we had created
couple of tags.

00:00:02.775 --> 00:00:04.035
One is annotated tag,

00:00:04.035 --> 00:00:06.180
the other one is
lightweight tank.

00:00:06.180 --> 00:00:09.990
Let us see how they are
actually stored in.

00:00:09.990 --> 00:00:12.715
If you go to refs folder,

00:00:12.715 --> 00:00:16.295
you will now see this
folder with the name tags.

00:00:16.295 --> 00:00:18.995
And that's where you're
going to see these two tags.

00:00:18.995 --> 00:00:23.630
But they annotate tag is
actually stored as an object.

00:00:23.630 --> 00:00:25.700
Whereas the lightweight tank is

00:00:25.700 --> 00:00:28.265
similar to a branch,
it's not an object.

00:00:28.265 --> 00:00:32.730
So let's open Washington 101.

00:00:33.340 --> 00:00:38.700
And it is pointing to
a specific comment.

00:00:38.710 --> 00:00:41.135
Let us try to pretty print

00:00:41.135 --> 00:00:43.925
this object with that hashCode.

00:00:43.925 --> 00:00:49.560
Git cat file.

00:00:49.630 --> 00:00:51.905
First of all, let's
take a look at

00:00:51.905 --> 00:00:53.495
the type of this object.

00:00:53.495 --> 00:00:57.874
As you can see, it is
pointing to the comet object.

00:00:57.874 --> 00:01:00.740
If you're pretty
print this object,

00:01:00.740 --> 00:01:03.740
you're going to see the
details about that commit.

00:01:03.740 --> 00:01:08.610
But now let's open up the file,

00:01:08.710 --> 00:01:15.840
which was an annotated tag
and see what it points to.

00:01:16.360 --> 00:01:19.085
Let me copy this hash code,

00:01:19.085 --> 00:01:22.700
go back to Git Bash

00:01:22.700 --> 00:01:26.165
and try to print the
type of the object.

00:01:26.165 --> 00:01:31.490
This time, this is going
to be of type tag.

00:01:31.490 --> 00:01:36.360
And if you take a look at the
content of this tag object,

00:01:38.020 --> 00:01:41.660
you're going to see the
commit that it points to.

00:01:41.660 --> 00:01:44.270
And there's also some
metadata along with it.

00:01:44.270 --> 00:01:46.910
Like the identifier of the tag,

00:01:46.910 --> 00:01:49.430
who has created it,

00:01:49.430 --> 00:01:53.280
and some description
about the tag as well.

00:01:54.340 --> 00:01:58.010
We can also view the state
of the repository at

00:01:58.010 --> 00:02:02.465
a particular tag by using
the git checkout command.

00:02:02.465 --> 00:02:05.855
So let me do git tag

00:02:05.855 --> 00:02:09.209
to take a look at list
of tags available.

00:02:09.370 --> 00:02:13.715
And I'm going to use the
command git checkout,

00:02:13.715 --> 00:02:16.145
specifying the name of the tag.

00:02:16.145 --> 00:02:22.440
Maybe I'd like to get my
repository to this date.

00:02:22.840 --> 00:02:25.205
And as you can see,

00:02:25.205 --> 00:02:27.950
we are in detached head state.

00:02:27.950 --> 00:02:29.600
We've already talked about it

00:02:29.600 --> 00:02:32.375
in one of our previous chapters.

00:02:32.375 --> 00:02:37.229
But if you go back to
the working directory,

00:02:37.600 --> 00:02:40.610
you're not going to
see that hot fix.

00:02:40.610 --> 00:02:44.090
Because at the time of
the creation of this tag,

00:02:44.090 --> 00:02:46.175
we don't have that fix.

00:02:46.175 --> 00:02:47.735
Hope it makes sense.

00:02:47.735 --> 00:02:49.830
I'll see you next.
