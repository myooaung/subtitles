WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.290 --> 00:00:02.700
In order to explain driven

00:00:02.700 --> 00:00:05.430
much abroad the project
into this state.

00:00:05.430 --> 00:00:07.740
I initially committed M1, M2,

00:00:07.740 --> 00:00:09.915
M3 in master branch,

00:00:09.915 --> 00:00:12.450
and then I've created the
feature branch switch to

00:00:12.450 --> 00:00:15.540
it and made three comments
over there as well.

00:00:15.540 --> 00:00:17.895
F1, F2, and F3.

00:00:17.895 --> 00:00:20.550
Once again switched
back to master and

00:00:20.550 --> 00:00:23.265
I made additional
commits, M4, M5.

00:00:23.265 --> 00:00:26.365
And that is the current
state of our project.

00:00:26.365 --> 00:00:29.285
And not to mention, for
each and every commit,

00:00:29.285 --> 00:00:32.045
I've committed their
specific files.

00:00:32.045 --> 00:00:36.000
Now let's see how much is done.

00:00:36.340 --> 00:00:39.005
Currently I'm inside master.

00:00:39.005 --> 00:00:41.390
And so you're able to
see all those five files

00:00:41.390 --> 00:00:44.075
corresponding to all
those five commits.

00:00:44.075 --> 00:00:47.790
If I were to switch to
feature one branch,

00:00:49.420 --> 00:00:52.010
you're going to see M1, M2,

00:00:52.010 --> 00:00:55.250
M3, and F1, F2 and F3,

00:00:55.250 --> 00:00:57.740
but not m four and m phi,

00:00:57.740 --> 00:00:59.390
which came in master branch

00:00:59.390 --> 00:01:01.625
after we created
feature one branch.

00:01:01.625 --> 00:01:03.755
And this is the
reason why we cannot

00:01:03.755 --> 00:01:06.305
perform fast forward merge.

00:01:06.305 --> 00:01:08.615
Now let's switch back

00:01:08.615 --> 00:01:11.630
master branch and perform

00:01:11.630 --> 00:01:14.610
the merge and see
what's going to happen.

00:01:14.890 --> 00:01:18.140
Git merge feature one.

00:01:18.140 --> 00:01:20.030
And we have to do it from

00:01:20.030 --> 00:01:21.980
inside the master branch
because we want to

00:01:21.980 --> 00:01:23.690
bring in all the feature one

00:01:23.690 --> 00:01:26.640
changes into the master branch.

00:01:27.490 --> 00:01:29.600
And when I run this command,

00:01:29.600 --> 00:01:30.965
it has actually opened

00:01:30.965 --> 00:01:33.065
the default text editor

00:01:33.065 --> 00:01:35.075
that I've chosen while
installing the good.

00:01:35.075 --> 00:01:37.025
In my case, it's
Notepad Plus, Plus.

00:01:37.025 --> 00:01:38.510
In your case, it might
be something else

00:01:38.510 --> 00:01:41.525
depending on what you've
chosen while installing Git.

00:01:41.525 --> 00:01:43.940
And what it is asking us is

00:01:43.940 --> 00:01:46.295
to enter some kind of a message.

00:01:46.295 --> 00:01:48.110
This is the message that would

00:01:48.110 --> 00:01:51.240
be associated with
the merge commit.

00:01:51.240 --> 00:01:57.580
I can change the text to
something else into master,

00:01:57.580 --> 00:01:59.335
something of that sort.

00:01:59.335 --> 00:02:03.350
Save the file and
close the window.

00:02:03.690 --> 00:02:07.750
And this has created
the merge commit.

00:02:07.750 --> 00:02:10.180
Alternatively, while
running this command,

00:02:10.180 --> 00:02:12.505
I can also provide
the option hyphen m

00:02:12.505 --> 00:02:14.275
and provide the message.

00:02:14.275 --> 00:02:18.140
That way get will not
open the text editor.

00:02:20.340 --> 00:02:24.400
Okay, now let's take a
look at get log n z.

00:02:24.400 --> 00:02:27.130
If God has created
a merge commit.

00:02:27.130 --> 00:02:31.045
And sure enough, it did
create the merge commit.

00:02:31.045 --> 00:02:34.360
And it has also mentioned that

00:02:34.360 --> 00:02:38.485
this committee is based
on these two commits.

00:02:38.485 --> 00:02:40.300
These are nothing but

00:02:40.300 --> 00:02:43.690
the last comets of
both the branches.

00:02:43.690 --> 00:02:47.965
So we have this hashCode
from the master branch,

00:02:47.965 --> 00:02:51.355
and this belongs to
the feature branch.

00:02:51.355 --> 00:02:54.430
Let's take a look
at what's inside

00:02:54.430 --> 00:02:57.055
this merge commit object.

00:02:57.055 --> 00:02:58.525
So I'm going to copy it.

00:02:58.525 --> 00:03:01.180
I'm going to press
Q to revert to

00:03:01.180 --> 00:03:04.434
the command line so that I
can type in some commands.

00:03:04.434 --> 00:03:08.575
Git cat file, hyphen b,

00:03:08.575 --> 00:03:12.100
and hashCode of
the merge commit.

00:03:12.100 --> 00:03:16.650
And if you notice it is
pointing to these two commits.

00:03:16.650 --> 00:03:19.250
One is the last commit,

00:03:19.250 --> 00:03:24.150
the master branch,
which would be this.

00:03:25.420 --> 00:03:30.170
And this is the last
of the feature branch.

00:03:30.170 --> 00:03:34.770
Let's take a look at what's
inside this tree object.

00:03:37.870 --> 00:03:41.520
I'm going to use the
exact same command.

00:03:41.620 --> 00:03:44.210
And let's see what's inside

00:03:44.210 --> 00:03:48.140
that tree object.
And let me expand.

00:03:48.140 --> 00:03:51.260
This tree object is
actually combination

00:03:51.260 --> 00:03:54.380
of all the changes done
in both the branches.

00:03:54.380 --> 00:03:58.370
So you see all these
files, F1 dot TXT,

00:03:58.370 --> 00:04:01.415
after dxdy, F three,

00:04:01.415 --> 00:04:05.100
M1, M2, M3, M4, and M5.

00:04:07.060 --> 00:04:09.919
And even in working directory,

00:04:09.919 --> 00:04:11.690
you're going to now
see all the changes

00:04:11.690 --> 00:04:13.640
of feature branch.

00:04:13.640 --> 00:04:15.590
If you switch back
to feature branch,

00:04:15.590 --> 00:04:20.180
however, you would notice

00:04:20.180 --> 00:04:22.745
that there are no
changes done in here.

00:04:22.745 --> 00:04:25.160
It's the exact same
working directory

00:04:25.160 --> 00:04:27.364
as before, the mortgage.

00:04:27.364 --> 00:04:29.540
Now we can actually go ahead and

00:04:29.540 --> 00:04:32.060
delete the feature one branch.

00:04:32.060 --> 00:04:35.450
But first of all, let
us switch back to

00:04:35.450 --> 00:04:41.780
master branch because we

00:04:41.780 --> 00:04:44.255
cannot delete the branch
that we're currently on.

00:04:44.255 --> 00:04:46.519
So I'm going to use
the get command.

00:04:46.519 --> 00:04:53.075
I'm going to say git branch
hyphen D, feature one.

00:04:53.075 --> 00:04:57.540
And this has deleted the branch.
