WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.270 --> 00:00:03.310
Now that the review is
done and changes are

00:00:03.310 --> 00:00:06.100
approved by one
of the reviewers,

00:00:06.100 --> 00:00:08.830
Luke is good to go ahead
and merge all these changes

00:00:08.830 --> 00:00:11.755
of feature one onto
the main branch.

00:00:11.755 --> 00:00:14.635
If you take Organization
license of GitHub,

00:00:14.635 --> 00:00:16.370
you'd get more
fine-grained control.

00:00:16.370 --> 00:00:17.710
Last two can actually merge

00:00:17.710 --> 00:00:20.800
the pull requests
at the moment with

00:00:20.800 --> 00:00:23.020
free version of the
collaborators of

00:00:23.020 --> 00:00:25.795
your project would be able
to merge the pull requests,

00:00:25.795 --> 00:00:29.275
including the individual who
raise the pull requests.

00:00:29.275 --> 00:00:31.480
So all the in this case,

00:00:31.480 --> 00:00:35.004
Luke is actually trying to
merge his own pull request.

00:00:35.004 --> 00:00:36.685
In real-time projects.

00:00:36.685 --> 00:00:39.430
This would be one of
the team leads or

00:00:39.430 --> 00:00:43.610
some person who is
authorized to do this job.

00:00:43.980 --> 00:00:47.800
Let's take a look at all
the options we have here.

00:00:47.800 --> 00:00:50.230
We can create a merge commit.

00:00:50.230 --> 00:00:51.865
And as the name suggests,

00:00:51.865 --> 00:00:53.500
this is essentially
going to create

00:00:53.500 --> 00:00:55.810
a new merge commit
in the main branch.

00:00:55.810 --> 00:00:58.540
And it points to a couple
of parent commits.

00:00:58.540 --> 00:01:01.990
One parent would be the last
commit off main branch,

00:01:01.990 --> 00:01:03.835
the other parent KM, it would be

00:01:03.835 --> 00:01:06.790
the last commit off
the feature branch.

00:01:06.790 --> 00:01:09.430
We've already discussed
about merge commits.

00:01:09.430 --> 00:01:11.665
I don't have to
reiterate once again.

00:01:11.665 --> 00:01:13.270
And not to mention

00:01:13.270 --> 00:01:15.460
enter commit history
would be retained,

00:01:15.460 --> 00:01:17.110
which means you might as well be

00:01:17.110 --> 00:01:19.780
having all the spaghetti
comet histories.

00:01:19.780 --> 00:01:21.850
If you do not want
to have spaghetti

00:01:21.850 --> 00:01:23.380
commit history and don't

00:01:23.380 --> 00:01:25.630
want to create
additional merge commit.

00:01:25.630 --> 00:01:27.400
Then you can go with

00:01:27.400 --> 00:01:30.655
the third option which
says rebates and merge.

00:01:30.655 --> 00:01:33.250
So all the four commits
from this branch,

00:01:33.250 --> 00:01:34.810
which is a feature branch,

00:01:34.810 --> 00:01:39.520
will be rebased and then add
it to the base branch so

00:01:39.520 --> 00:01:41.290
that the commit history in

00:01:41.290 --> 00:01:44.574
the main branch would
look more linear.

00:01:44.574 --> 00:01:48.115
We also have a third option
which is squash and merge.

00:01:48.115 --> 00:01:50.785
And as the description
of it says,

00:01:50.785 --> 00:01:53.440
the four commits from
this branch will be

00:01:53.440 --> 00:01:56.740
combined into one commit
in the base branch.

00:01:56.740 --> 00:01:59.380
This is as good as you're
making a new commit in

00:01:59.380 --> 00:02:02.200
main branch with all
the combined changes

00:02:02.200 --> 00:02:03.970
of feature one branch.

00:02:03.970 --> 00:02:06.265
This might be ideal solution

00:02:06.265 --> 00:02:08.175
if you have bunch of commits.

00:02:08.175 --> 00:02:10.955
And it makes sense to
combine them together.

00:02:10.955 --> 00:02:13.130
In our case, we barely made

00:02:13.130 --> 00:02:15.455
any changes in each
one of our commits,

00:02:15.455 --> 00:02:18.290
has just change of one
single line of text.

00:02:18.290 --> 00:02:22.025
So maybe this option is
ideal thing to do for us.

00:02:22.025 --> 00:02:23.780
Essentially, if you have

00:02:23.780 --> 00:02:26.825
multiple commits where
you made minor changes,

00:02:26.825 --> 00:02:28.160
and if you think those can be

00:02:28.160 --> 00:02:29.810
combined as a single commit,

00:02:29.810 --> 00:02:32.315
we can go with this option.

00:02:32.315 --> 00:02:34.789
Not sure if you're
able to recollect,

00:02:34.789 --> 00:02:37.355
but when we talked about
interactive rebase,

00:02:37.355 --> 00:02:40.340
we had the option to squash
some of the commits.

00:02:40.340 --> 00:02:43.234
Basically, when you're
performing interactive rebase,

00:02:43.234 --> 00:02:45.740
you can list down
all the commits that

00:02:45.740 --> 00:02:48.320
you want to squash or
combine them together.

00:02:48.320 --> 00:02:52.040
So let's say you have ten
commits in your feature branch.

00:02:52.040 --> 00:02:55.310
You can squash four of
them or three of them or

00:02:55.310 --> 00:02:56.540
whatever that makes sense to

00:02:56.540 --> 00:02:59.045
you using interactive rebase.

00:02:59.045 --> 00:03:00.605
If you couldn't recollect,

00:03:00.605 --> 00:03:02.390
I would recommend you to
watch the interaction with

00:03:02.390 --> 00:03:05.285
the best lecture on
the same ones again.

00:03:05.285 --> 00:03:09.320
For now, let us go with this
option, rebase and merge.

00:03:09.320 --> 00:03:12.170
In most cases it
would either be merge

00:03:12.170 --> 00:03:17.150
commit or Rebus and merge
depending on your requirements.

00:03:17.150 --> 00:03:19.370
I also should mention that

00:03:19.370 --> 00:03:21.290
since we had already rebased of

00:03:21.290 --> 00:03:23.750
feature branch to
latest commit off

00:03:23.750 --> 00:03:26.675
main branch before we actually
raise the pull request,

00:03:26.675 --> 00:03:29.705
we had resolved all the
potential conflicts

00:03:29.705 --> 00:03:32.450
before actually raising
the pull requests.

00:03:32.450 --> 00:03:34.985
And that's why at this point,

00:03:34.985 --> 00:03:37.265
you're not seeing any conflicts.

00:03:37.265 --> 00:03:39.410
But there might be
those rare cases

00:03:39.410 --> 00:03:41.645
where somebody else in your team

00:03:41.645 --> 00:03:42.980
might have introduced changes in

00:03:42.980 --> 00:03:46.325
your main branch while you
pull request is still active,

00:03:46.325 --> 00:03:48.679
which might actually
create conflict.

00:03:48.679 --> 00:03:50.450
How you deal with
those conflicts

00:03:50.450 --> 00:03:52.980
is something we'll
talk about later.

00:03:53.140 --> 00:03:57.410
For now, let's go ahead
and Rebus and merge.

00:03:57.410 --> 00:03:59.270
And as an assignment,
you can also try

00:03:59.270 --> 00:04:01.875
out these two options.

00:04:01.875 --> 00:04:04.820
Pretty straightforward.

00:04:05.400 --> 00:04:10.009
Let's click on
rebates and merge.

00:04:10.890 --> 00:04:17.110
Let's confirm. So pull

00:04:17.110 --> 00:04:19.840
request successfully
merged and closed.

00:04:19.840 --> 00:04:22.015
And we're good to go ahead and

00:04:22.015 --> 00:04:24.595
delete this particular branch.

00:04:24.595 --> 00:04:26.875
We can delete it from GitHub,

00:04:26.875 --> 00:04:31.870
or we can also do the same
from our local machine.

00:04:31.870 --> 00:04:34.790
Let me show you what I mean.

00:04:38.910 --> 00:04:42.560
Let me open Git Bash here.

00:04:43.510 --> 00:04:47.000
I'm currently
inside the project.

00:04:47.000 --> 00:04:52.865
Let me now go ahead and
delete the remote branch.

00:04:52.865 --> 00:04:54.890
And the command for that is git,

00:04:54.890 --> 00:04:59.435
push origin, name of the remote.

00:04:59.435 --> 00:05:02.990
And then you're going
to use a colon followed

00:05:02.990 --> 00:05:05.240
by the name of the
branch that you

00:05:05.240 --> 00:05:08.525
want to delete on
the remote server.

00:05:08.525 --> 00:05:13.260
Feature one, in our case,
I'm going to hit Enter.

00:05:14.170 --> 00:05:16.970
And this should delete

00:05:16.970 --> 00:05:20.840
the feature on branch in
the remote repository.

00:05:20.840 --> 00:05:26.420
Let's go back. And
as you can see,

00:05:26.420 --> 00:05:30.239
we now only have
the main branch.

00:05:33.730 --> 00:05:37.205
And here are the list
of commits in it,

00:05:37.205 --> 00:05:38.900
which now also includes

00:05:38.900 --> 00:05:41.940
all the comments were
made in feature one.

00:05:43.090 --> 00:05:45.515
If I do git branch,

00:05:45.515 --> 00:05:48.660
you're still going to
see the local branch.

00:05:49.240 --> 00:05:53.195
Let me get the name correct.

00:05:53.195 --> 00:05:56.180
We still have the local branch.

00:05:56.180 --> 00:06:00.410
Let's go ahead and
delete it as well.

00:06:00.410 --> 00:06:07.860
Git branch, hyphen
D, feature one.

00:06:13.300 --> 00:06:17.729
Okay, to switch to
a different branch.

00:06:21.610 --> 00:06:24.605
And let's rerun the command.

00:06:24.605 --> 00:06:27.540
And the branch got deleted.

00:06:30.700 --> 00:06:34.190
Since the remote feature
on branches deleted,

00:06:34.190 --> 00:06:36.455
even its corresponding
tracking branch

00:06:36.455 --> 00:06:38.225
is no longer available.

00:06:38.225 --> 00:06:40.740
I'll see you next.
