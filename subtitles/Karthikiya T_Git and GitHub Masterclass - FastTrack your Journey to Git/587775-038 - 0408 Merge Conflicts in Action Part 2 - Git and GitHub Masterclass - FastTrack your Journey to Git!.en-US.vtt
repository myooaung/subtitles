WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.170
All that.

00:00:01.170 --> 00:00:02.190
Let us try to perform

00:00:02.190 --> 00:00:04.170
the merge and see
what would happen.

00:00:04.170 --> 00:00:07.650
I'm currently inside the
master branch and when to run

00:00:07.650 --> 00:00:12.040
the command git
merge feature one.

00:00:12.530 --> 00:00:16.050
Good says that it has spawned

00:00:16.050 --> 00:00:19.605
conflicts in product
dot TXT file.

00:00:19.605 --> 00:00:22.215
And it says automatic
merge failed,

00:00:22.215 --> 00:00:26.040
fix the conflicts, and
then commit the result.

00:00:26.040 --> 00:00:28.350
That is pretty self-explanatory.

00:00:28.350 --> 00:00:29.895
In addition to that,

00:00:29.895 --> 00:00:32.040
gateway is also saying
that our project is in

00:00:32.040 --> 00:00:34.740
merging state. In
managing state.

00:00:34.740 --> 00:00:36.030
Git will format all those

00:00:36.030 --> 00:00:38.250
conflicting files
in a manner that

00:00:38.250 --> 00:00:39.765
it becomes easier for us to

00:00:39.765 --> 00:00:41.995
understand the complex
and resolve them.

00:00:41.995 --> 00:00:44.345
You will know what I
mean in just a bit.

00:00:44.345 --> 00:00:47.000
But let's try to run
the command git status

00:00:47.000 --> 00:00:48.740
and see what it has to say.

00:00:48.740 --> 00:00:53.090
It says that we have
unmerged paths.

00:00:53.090 --> 00:00:56.000
And it is asking us to fix

00:00:56.000 --> 00:01:00.440
the complex and then
run git commit command.

00:01:00.440 --> 00:01:04.385
What if we decide to get
out of this merging state?

00:01:04.385 --> 00:01:07.820
We can run this
command with dash,

00:01:07.820 --> 00:01:09.620
dash, I bought option,

00:01:09.620 --> 00:01:12.620
this will I bought the
emerging state and bring back

00:01:12.620 --> 00:01:16.655
the project how it was before
running the merge command.

00:01:16.655 --> 00:01:19.340
It has stage the
inventory dot TXT

00:01:19.340 --> 00:01:22.430
file because it doesn't
have any conflicts.

00:01:22.430 --> 00:01:24.260
It is ready to be merged.

00:01:24.260 --> 00:01:26.975
But whereas for
product dot TXT file,

00:01:26.975 --> 00:01:30.605
it is categorized
under unmerged paths.

00:01:30.605 --> 00:01:33.485
So all the files that are
listed in this section,

00:01:33.485 --> 00:01:36.440
we'll need to resolve the
conflicts and ask get to commit

00:01:36.440 --> 00:01:38.210
all those changes to complete

00:01:38.210 --> 00:01:41.720
the merge operation and
create the merge commit.

00:01:41.720 --> 00:01:43.790
Now let's take a
look at the contents

00:01:43.790 --> 00:01:45.935
of product dot TXT file.

00:01:45.935 --> 00:01:49.320
While our project is
in merging state.

00:01:49.990 --> 00:01:54.065
I wanted to say cat
product dot TXT file.

00:01:54.065 --> 00:01:56.450
And you can see that it
is little bit different

00:01:56.450 --> 00:01:58.715
from how you might
have expected.

00:01:58.715 --> 00:02:01.160
You would see the same
even if you were to open

00:02:01.160 --> 00:02:04.325
the file in an external editor.

00:02:04.325 --> 00:02:06.515
What this essentially means is

00:02:06.515 --> 00:02:09.995
this section of code
belongs to head,

00:02:09.995 --> 00:02:12.260
which means this call belongs to

00:02:12.260 --> 00:02:15.815
the branch where they
had this pointing to.

00:02:15.815 --> 00:02:17.570
This is the changes

00:02:17.570 --> 00:02:20.239
introduced in the master
branch essentially.

00:02:20.239 --> 00:02:23.270
Then we have these set of

00:02:23.270 --> 00:02:27.330
changes which were introduced
in feature one branch.

00:02:28.420 --> 00:02:32.900
If you have bought the
emerging state by saying

00:02:32.900 --> 00:02:38.435
git merge hyphen, hyphen bought.

00:02:38.435 --> 00:02:44.030
You would see that all
that formatting is gone.

00:02:44.030 --> 00:02:46.355
And our project is
essential in estate

00:02:46.355 --> 00:02:50.190
as if we had never run
the merge command at all.

00:02:55.210 --> 00:02:58.730
Let us try to merge
again and see how

00:02:58.730 --> 00:03:01.970
we can resolve these conflicts.

00:03:01.970 --> 00:03:04.595
Now as the programmer,
you have to decide

00:03:04.595 --> 00:03:07.505
which one of these changes
you'd like to keep.

00:03:07.505 --> 00:03:09.785
Or if you want to keep
both these changes,

00:03:09.785 --> 00:03:12.110
you can go ahead and
do that as well.

00:03:12.110 --> 00:03:15.005
You can literally do
water we want to do.

00:03:15.005 --> 00:03:17.390
And once you're
done, just ask get

00:03:17.390 --> 00:03:19.940
to commit those changes and
create the Merge Objects.

00:03:19.940 --> 00:03:23.490
How to finish the merging
of both the branches.

00:03:23.860 --> 00:03:25.880
So I need to get rid of

00:03:25.880 --> 00:03:30.780
this weird characters
that has introduced.

00:03:31.720 --> 00:03:36.740
And then maybe I'd like to
remove this line of code,

00:03:36.740 --> 00:03:39.065
but keep all these three.

00:03:39.065 --> 00:03:41.150
Just an example.

00:03:41.150 --> 00:03:43.010
What, oh, that makes sense.

00:03:43.010 --> 00:03:45.480
You'd like to keep that code.

00:03:45.550 --> 00:03:48.110
Save and close it.

00:03:48.110 --> 00:03:52.115
And once you resolve all
those complex manually,

00:03:52.115 --> 00:03:56.315
you can go ahead
and say git commit.

00:03:56.315 --> 00:04:00.350
Before we come in, we need
to actually stage this file,

00:04:00.350 --> 00:04:03.530
product dot TXT file.

00:04:03.530 --> 00:04:06.050
And then we can
go ahead and with

00:04:06.050 --> 00:04:09.665
the changes is asking us
to enter a commit message.

00:04:09.665 --> 00:04:11.735
I'm happy with the default one.

00:04:11.735 --> 00:04:15.155
I wanted to save
this file, close it.

00:04:15.155 --> 00:04:20.210
And this has successfully
created a merge commit,

00:04:20.210 --> 00:04:23.555
which means our
margin is now done.

00:04:23.555 --> 00:04:28.260
And so you would no longer
see the status more gene.

00:04:28.870 --> 00:04:31.370
Let's now take a
look at the content

00:04:31.370 --> 00:04:33.290
inside all these files.

00:04:33.290 --> 00:04:36.440
The admin dot TXT file
would remain as is

00:04:36.440 --> 00:04:38.164
because it's never modified

00:04:38.164 --> 00:04:40.460
in either of the
branches. Anyway.

00:04:40.460 --> 00:04:42.680
In inventory file,
you're going to see

00:04:42.680 --> 00:04:45.080
all those feature changes added.

00:04:45.080 --> 00:04:48.810
And these were merged
from the feature branch.

00:04:49.660 --> 00:04:52.430
Put in product dot txt file.

00:04:52.430 --> 00:04:54.290
It would have the
code that we've

00:04:54.290 --> 00:04:57.900
updated while resolving
the conflicts.

00:04:58.240 --> 00:05:00.380
Also, I hope that you're getting

00:05:00.380 --> 00:05:01.955
a sense of the need to have

00:05:01.955 --> 00:05:05.990
a more robust tool to manage
your project and its files.

00:05:05.990 --> 00:05:07.865
And also be able to visualize

00:05:07.865 --> 00:05:10.235
all the historical
changes, et cetera.

00:05:10.235 --> 00:05:13.190
And that's where tools like
Visual Studio, Code, GitHub,

00:05:13.190 --> 00:05:15.290
Desktop, source tree, et cetera,

00:05:15.290 --> 00:05:16.670
would come into picture.

00:05:16.670 --> 00:05:20.549
We're going to explore
them in coming lectures.
