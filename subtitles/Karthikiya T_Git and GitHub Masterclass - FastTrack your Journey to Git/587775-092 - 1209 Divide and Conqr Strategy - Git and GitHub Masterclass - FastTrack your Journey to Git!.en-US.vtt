WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.130
Let us see how we can handle

00:00:02.130 --> 00:00:04.965
the negative consequences
of using force option.

00:00:04.965 --> 00:00:07.200
When you use the push command.

00:00:07.200 --> 00:00:10.050
I mentioned that when you
use the force option,

00:00:10.050 --> 00:00:12.810
the commit history on the
remote server will be

00:00:12.810 --> 00:00:16.185
forcefully overwritten with
your own local history.

00:00:16.185 --> 00:00:18.390
Now there are a couple of
consequences with that.

00:00:18.390 --> 00:00:20.460
Number one, we might be having

00:00:20.460 --> 00:00:22.920
multiple developers
working on the same branch

00:00:22.920 --> 00:00:25.290
and we might risk losing
all the commits done by

00:00:25.290 --> 00:00:27.885
them that came after
your last poll.

00:00:27.885 --> 00:00:30.015
And secondly, most importantly,

00:00:30.015 --> 00:00:32.940
when you do Rebus and then
force, push your changes,

00:00:32.940 --> 00:00:34.725
it might actually create a mess

00:00:34.725 --> 00:00:36.510
because everybody
else in the team

00:00:36.510 --> 00:00:38.220
might have downloaded
the project

00:00:38.220 --> 00:00:40.320
and might've checked
out to that branch.

00:00:40.320 --> 00:00:42.890
Essentially, when you
rebase and pause push

00:00:42.890 --> 00:00:44.360
your changes will not

00:00:44.360 --> 00:00:46.220
only were reading
the commit history,

00:00:46.220 --> 00:00:48.215
but also their hash codes.

00:00:48.215 --> 00:00:50.030
And all the team
members who might have

00:00:50.030 --> 00:00:52.040
downloaded the
project and Chet dot

00:00:52.040 --> 00:00:54.170
to that branch might
have a different set of

00:00:54.170 --> 00:00:55.640
common history compared to

00:00:55.640 --> 00:00:57.665
what's there in the
remote repository.

00:00:57.665 --> 00:01:00.320
That's going to
create a lot of mess.

00:01:00.320 --> 00:01:02.615
So in order to prevent this,

00:01:02.615 --> 00:01:05.795
we have a strategy called
divide and conquer.

00:01:05.795 --> 00:01:07.910
Let me explain what I mean.

00:01:07.910 --> 00:01:10.550
Let's say that this is
the main branch and this

00:01:10.550 --> 00:01:13.025
is the feature branch in
the remote repository.

00:01:13.025 --> 00:01:15.110
Now let us assume that
couple of developers

00:01:15.110 --> 00:01:17.840
are willing to contribute
to this branch.

00:01:17.840 --> 00:01:20.825
Instead of they're both
contributing to this branch.

00:01:20.825 --> 00:01:23.660
We're going to now have
couple of sub-branches

00:01:23.660 --> 00:01:27.049
and each would be owned
by individual developer.

00:01:27.049 --> 00:01:29.630
Both this dollar per would
contribute their own set

00:01:29.630 --> 00:01:32.600
of changes on their
own sub-branches.

00:01:32.600 --> 00:01:35.810
And since they're walking
on their own branch,

00:01:35.810 --> 00:01:37.880
changes done on one
branch will not

00:01:37.880 --> 00:01:40.280
have any impact on
the other branch.

00:01:40.280 --> 00:01:42.350
For example, one of the
developers may want to

00:01:42.350 --> 00:01:44.450
rebase and force commit

00:01:44.450 --> 00:01:46.280
all those changes to
their own branch.

00:01:46.280 --> 00:01:48.200
And it will not have
any kind of impact on

00:01:48.200 --> 00:01:50.719
the other branch owned
by the developer.

00:01:50.719 --> 00:01:52.565
And once after one
of the developers

00:01:52.565 --> 00:01:54.710
is done with whatever
they have to do,

00:01:54.710 --> 00:01:56.600
they can then merge
all the changes

00:01:56.600 --> 00:01:58.250
onto the feature one branch.

00:01:58.250 --> 00:02:00.290
And then the other
dollar par would

00:02:00.290 --> 00:02:02.420
rebase their branch on top

00:02:02.420 --> 00:02:04.070
of feature one branch and then

00:02:04.070 --> 00:02:06.860
eventually merge their
changes as well.

00:02:06.860 --> 00:02:08.780
And if there are
any changes that

00:02:08.780 --> 00:02:11.075
either of the dollar plus
might've missed out,

00:02:11.075 --> 00:02:13.025
they can create another branch

00:02:13.025 --> 00:02:15.380
and bringing all those changes.

00:02:15.380 --> 00:02:17.120
And then of course, merge

00:02:17.120 --> 00:02:19.865
those changes in
feature one branch.

00:02:19.865 --> 00:02:22.580
This is called divide
and conquer strategy.

00:02:22.580 --> 00:02:24.950
And this might prevent
the side effects that

00:02:24.950 --> 00:02:27.860
might come when you
force push your changes.

00:02:27.860 --> 00:02:29.840
However, there might
be instances where

00:02:29.840 --> 00:02:32.225
this approach may
not be feasible.

00:02:32.225 --> 00:02:34.850
In which case we have
an alternate to,

00:02:34.850 --> 00:02:37.010
and that's what we're
going to talk about next.

00:02:37.010 --> 00:02:39.695
But maybe you can take
this as an assignment.

00:02:39.695 --> 00:02:41.540
Try to create couple
of sub-branches

00:02:41.540 --> 00:02:43.040
from the feature one branch,

00:02:43.040 --> 00:02:46.770
and try to follow divide
and conquer approach.
