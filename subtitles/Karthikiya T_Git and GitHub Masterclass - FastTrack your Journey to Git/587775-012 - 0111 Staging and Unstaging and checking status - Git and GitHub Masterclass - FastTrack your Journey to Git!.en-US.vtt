WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.470 --> 00:00:02.610
Let us see how we can stage

00:00:02.610 --> 00:00:05.445
an unsteady files
inside Git repository.

00:00:05.445 --> 00:00:07.350
And as I've mentioned before,

00:00:07.350 --> 00:00:10.575
we need to stage files before
we plan to commit them.

00:00:10.575 --> 00:00:12.340
So currently we have

00:00:12.340 --> 00:00:14.689
three files inside our
working directory.

00:00:14.689 --> 00:00:17.030
Let us plan to commit them.

00:00:17.030 --> 00:00:20.930
Let me expand the window so
that you get a better view.

00:00:20.930 --> 00:00:23.690
Also, let me type in the
command clear to clear out

00:00:23.690 --> 00:00:27.080
the screen so that
we get a fresh view.

00:00:27.080 --> 00:00:29.855
I'm going to do an ls
to list all the files.

00:00:29.855 --> 00:00:32.405
And we currently
have three files.

00:00:32.405 --> 00:00:34.940
If I tried to do
git commit, now,

00:00:34.940 --> 00:00:37.580
it's going to
complain us saying we

00:00:37.580 --> 00:00:40.055
have untracked files
inside of our project.

00:00:40.055 --> 00:00:42.545
We need to have at
least one file.

00:00:42.545 --> 00:00:44.930
Tract are going to have

00:00:44.930 --> 00:00:49.115
at least one file in staging
area to be able to commit.

00:00:49.115 --> 00:00:51.155
And that's what it
is complaining.

00:00:51.155 --> 00:00:53.375
Now how do we save these files?

00:00:53.375 --> 00:00:55.660
Gets the command, Well,

00:00:55.660 --> 00:00:57.625
good has already
given us a clue.

00:00:57.625 --> 00:01:00.025
It's good at.

00:01:00.025 --> 00:01:02.800
So let's do git add.

00:01:02.800 --> 00:01:04.180
And I could just list down

00:01:04.180 --> 00:01:06.025
all the files I
wanted to commit.

00:01:06.025 --> 00:01:09.130
For example, one dot TXT space

00:01:09.130 --> 00:01:11.905
to dot TXT, so on and so forth.

00:01:11.905 --> 00:01:13.870
This would be useful if you

00:01:13.870 --> 00:01:15.520
want to be select
two as to which

00:01:15.520 --> 00:01:17.140
files you want it to come

00:01:17.140 --> 00:01:19.645
in as part of a
particular feature.

00:01:19.645 --> 00:01:21.895
However, in this case,

00:01:21.895 --> 00:01:23.994
I'd like to commit everything.

00:01:23.994 --> 00:01:27.490
So I could just use a
wildcard character style.

00:01:27.490 --> 00:01:29.110
I can also use a pattern.

00:01:29.110 --> 00:01:31.479
For example, I can
say star dot TXT,

00:01:31.479 --> 00:01:33.910
and this would stage
all the files with

00:01:33.910 --> 00:01:37.690
any name that has
dot TXT extension.

00:01:37.690 --> 00:01:39.445
So let's run this command.

00:01:39.445 --> 00:01:41.305
This is what we need.

00:01:41.305 --> 00:01:45.445
So this has now staged all
our files in staging area.

00:01:45.445 --> 00:01:48.355
How do we make sure it
has staged all our files?

00:01:48.355 --> 00:01:50.170
Well, there's a command
to check to see

00:01:50.170 --> 00:01:54.400
the status that git status.

00:01:54.400 --> 00:01:56.650
Git status command will show

00:01:56.650 --> 00:01:58.585
us a list of untracked files,

00:01:58.585 --> 00:02:00.790
list of files that
are being tracked,

00:02:00.790 --> 00:02:03.070
files that are
modified, et cetera.

00:02:03.070 --> 00:02:05.920
This command will come in
handy to check the status of

00:02:05.920 --> 00:02:09.085
our project as we
progress in this course,

00:02:09.085 --> 00:02:11.410
you'll understand more
about this command.

00:02:11.410 --> 00:02:13.405
So after running this command,

00:02:13.405 --> 00:02:16.990
our files are listed under
changes to be committed.

00:02:16.990 --> 00:02:20.675
And it has also turn the color
of these files to green,

00:02:20.675 --> 00:02:23.045
representing that these
files are now being

00:02:23.045 --> 00:02:26.855
tracked or these files are
in staging area right now.

00:02:26.855 --> 00:02:29.720
What it says in earlier case
where all these files are

00:02:29.720 --> 00:02:33.680
listed under untracked
files and are marked red.

00:02:33.680 --> 00:02:36.170
Now, assume that I
wanted to remove one of

00:02:36.170 --> 00:02:38.330
these files from staging area,

00:02:38.330 --> 00:02:40.550
maybe because I've
accidentally added it

00:02:40.550 --> 00:02:42.845
in here. How do we do that?

00:02:42.845 --> 00:02:44.870
Well, God has already
given us a clue

00:02:44.870 --> 00:02:47.120
as to the command
we need to run to

00:02:47.120 --> 00:02:49.850
on-stage a file that's get

00:02:49.850 --> 00:02:53.660
RM with hyphen,
hyphen cached option.

00:02:53.660 --> 00:02:58.625
Whenever I say cached
are indexed or staged,

00:02:58.625 --> 00:03:00.350
we all mean the same thing.

00:03:00.350 --> 00:03:02.300
Keep that in mind.

00:03:02.300 --> 00:03:08.240
So get RM hyphen, hyphen cached.

00:03:08.240 --> 00:03:09.650
And I'm going to list on

00:03:09.650 --> 00:03:11.540
the files that I
wanted to onstage.

00:03:11.540 --> 00:03:13.610
If I want onstage all the files,

00:03:13.610 --> 00:03:16.655
I could use a wildcard
character like so.

00:03:16.655 --> 00:03:20.494
And this would onstage
all the files.

00:03:20.494 --> 00:03:23.795
Let me do that. So
this has unstated

00:03:23.795 --> 00:03:26.210
all our files to make

00:03:26.210 --> 00:03:29.510
sure that it has
onstage all our files.

00:03:29.510 --> 00:03:32.510
Let's use the git
status command.

00:03:32.510 --> 00:03:35.360
And as you can see there back to

00:03:35.360 --> 00:03:39.770
untracked files section and
there once again marked red.

00:03:39.770 --> 00:03:43.020
Let's add them back again.

00:03:46.320 --> 00:03:49.615
Let me this time create
onstage a single file,

00:03:49.615 --> 00:03:52.130
maybe two dot TXT.

00:03:53.040 --> 00:03:56.800
You need to make sure that
you use this option cached.

00:03:56.800 --> 00:03:58.375
If you don't use this option,

00:03:58.375 --> 00:04:01.180
then this command will
have a different meaning,

00:04:01.180 --> 00:04:04.735
which we'll talk about
in coming lectures.

00:04:04.735 --> 00:04:09.205
This has on staged two dot TXT.

00:04:09.205 --> 00:04:12.385
Let us know, check to see
the status of our project.

00:04:12.385 --> 00:04:13.705
And as you can see,

00:04:13.705 --> 00:04:16.570
two dot TXT is now listed
under untracked files.

00:04:16.570 --> 00:04:18.340
But as the other two
files are listed

00:04:18.340 --> 00:04:20.695
under changes to become at it.

00:04:20.695 --> 00:04:23.440
So take a moment and
try and experiment with

00:04:23.440 --> 00:04:25.240
these commands to stage

00:04:25.240 --> 00:04:28.440
an unsteady files and check
this data simultaneously.

00:04:28.440 --> 00:04:30.410
Don't commit the
changes just yet.

00:04:30.410 --> 00:04:32.780
We're going to talk about
it in next lecture.

00:04:32.780 --> 00:04:35.960
But don't hesitate or be
afraid to experiment with

00:04:35.960 --> 00:04:38.540
all these commands
you might be feeling

00:04:38.540 --> 00:04:40.040
these comments are
pretty simple and

00:04:40.040 --> 00:04:42.050
straightforward at
this point in time.

00:04:42.050 --> 00:04:44.120
But as we progress
in this course and

00:04:44.120 --> 00:04:46.445
as I introduce more
and more git commands,

00:04:46.445 --> 00:04:49.295
you will start to feel that
they're very confusing.

00:04:49.295 --> 00:04:51.320
So the only weapon you have to

00:04:51.320 --> 00:04:53.405
avoid that confused
state of mind.

00:04:53.405 --> 00:04:56.240
His practice, I
cannot emphasize how

00:04:56.240 --> 00:04:59.180
important it is to practice
all these commands,

00:04:59.180 --> 00:05:01.340
otherwise, you will
soon confuse yourself.

00:05:01.340 --> 00:05:03.780
See you in next one.
