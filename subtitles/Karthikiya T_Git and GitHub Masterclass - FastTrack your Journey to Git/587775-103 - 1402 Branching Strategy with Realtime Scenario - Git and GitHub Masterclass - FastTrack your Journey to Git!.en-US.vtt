WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.320 --> 00:00:02.700
Okay, Let us understand all this

00:00:02.700 --> 00:00:04.814
with a quick real-time example.

00:00:04.814 --> 00:00:06.780
So imagine that we have bunch of

00:00:06.780 --> 00:00:09.030
developers who
contributed their code,

00:00:09.030 --> 00:00:11.850
whole bunch of features to
the development branch.

00:00:11.850 --> 00:00:14.055
Or it might be the case that

00:00:14.055 --> 00:00:17.520
your project has been
forked by bunch of people.

00:00:17.520 --> 00:00:20.070
And they raised pull
requests which eventually

00:00:20.070 --> 00:00:23.040
got merged into the
development branch.

00:00:23.040 --> 00:00:24.720
But ultimately we have bunch of

00:00:24.720 --> 00:00:26.415
features in a
development branch.

00:00:26.415 --> 00:00:27.930
And it is at this point in

00:00:27.930 --> 00:00:29.610
time we have
realized that we can

00:00:29.610 --> 00:00:34.035
actually deliver this to the
customer as a new release.

00:00:34.035 --> 00:00:35.580
Now we could just merge

00:00:35.580 --> 00:00:38.145
all these changes sound
to the release branch.

00:00:38.145 --> 00:00:39.960
But before that, we're actually

00:00:39.960 --> 00:00:42.105
going to create one more branch,

00:00:42.105 --> 00:00:44.660
the version one dot or at all,

00:00:44.660 --> 00:00:46.310
with an assumption that this is

00:00:46.310 --> 00:00:49.565
the very first version of the
software we're releasing.

00:00:49.565 --> 00:00:52.430
The kind of format we're
following for worsening

00:00:52.430 --> 00:00:55.175
the software is so-called
the semantic versioning.

00:00:55.175 --> 00:00:58.519
We're going to talk about
it in upcoming lectures.

00:00:58.519 --> 00:01:00.740
But for now this is the version.

00:01:00.740 --> 00:01:02.675
And we're going to
name our branch

00:01:02.675 --> 00:01:04.640
with that version number.

00:01:04.640 --> 00:01:06.440
You know, the
purpose of creating

00:01:06.440 --> 00:01:08.240
this branch in just a bit.

00:01:08.240 --> 00:01:10.655
So once we create
a branch called

00:01:10.655 --> 00:01:14.720
portion one dot o dot o from
the development branch.

00:01:14.720 --> 00:01:16.760
We will then merge
all those changes

00:01:16.760 --> 00:01:18.260
on the release branch.

00:01:18.260 --> 00:01:19.850
And this is where
all the testing

00:01:19.850 --> 00:01:23.150
happens and any additional
things that you want to do,

00:01:23.150 --> 00:01:24.890
you can do it over
here before actually

00:01:24.890 --> 00:01:27.245
merging those changes
into the master branch,

00:01:27.245 --> 00:01:29.360
which should be
production ready code.

00:01:29.360 --> 00:01:31.220
So eventually it ends up in

00:01:31.220 --> 00:01:34.175
the master or the
main branch as well.

00:01:34.175 --> 00:01:37.580
The good thing about this
strategy is that while you're

00:01:37.580 --> 00:01:39.110
busy releasing the software and

00:01:39.110 --> 00:01:40.850
testing the software thoroughly,

00:01:40.850 --> 00:01:42.800
before actually
getting them onto

00:01:42.800 --> 00:01:45.560
the production and Rome
and other developers can

00:01:45.560 --> 00:01:47.990
actually continue
working on that task and

00:01:47.990 --> 00:01:51.695
dilute the features in
the development branch.

00:01:51.695 --> 00:01:55.775
Now imagine that the
customer has reported a bug.

00:01:55.775 --> 00:01:58.415
Maybe a software would
allow the customer

00:01:58.415 --> 00:02:01.475
to report a bug the
moment defined it.

00:02:01.475 --> 00:02:03.620
So assume that
worldview costumer

00:02:03.620 --> 00:02:06.080
found the bug, he reported it.

00:02:06.080 --> 00:02:08.060
And you realize
that it is actually

00:02:08.060 --> 00:02:11.645
very serious bug which needs
to be fixed on priority.

00:02:11.645 --> 00:02:13.850
So what you need to do is
you're going to create

00:02:13.850 --> 00:02:16.520
a branch from this
version branch.

00:02:16.520 --> 00:02:18.800
And you're going to
increment the value by one.

00:02:18.800 --> 00:02:21.620
Again, this is called
semantic versioning.

00:02:21.620 --> 00:02:23.075
We're going to talk about it.

00:02:23.075 --> 00:02:25.190
But essentially you're
going to create

00:02:25.190 --> 00:02:27.455
a branch out of the
previous version.

00:02:27.455 --> 00:02:29.960
And this is where you're
going to fix the bug.

00:02:29.960 --> 00:02:31.400
Once you fix the bug,

00:02:31.400 --> 00:02:33.275
you're going to test
all the changes.

00:02:33.275 --> 00:02:35.420
And then you're going to
merge all those changes in

00:02:35.420 --> 00:02:37.700
the development branch as well

00:02:37.700 --> 00:02:40.040
as on the release branch and

00:02:40.040 --> 00:02:43.130
eventually on the master or
the main branch as well.

00:02:43.130 --> 00:02:45.800
So you'll customer will
have the fixed for

00:02:45.800 --> 00:02:48.380
the bug report that
I'm actually going

00:02:48.380 --> 00:02:51.380
to demonstrate all this on
GitHub pretty soon so that

00:02:51.380 --> 00:02:52.820
you'll have a better
clarity as to

00:02:52.820 --> 00:02:54.605
what exactly is happening here.

00:02:54.605 --> 00:02:56.790
I'll see you next.
