WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.110 --> 00:00:02.820
Let's talk about precedents.

00:00:02.820 --> 00:00:06.030
Let us say that we have one
more dot gitignore file

00:00:06.030 --> 00:00:08.010
in one of the subdirectories.

00:00:08.010 --> 00:00:09.600
Let me actually copy this file

00:00:09.600 --> 00:00:12.915
into info directory like so.

00:00:12.915 --> 00:00:14.865
But instead of this pattern,

00:00:14.865 --> 00:00:17.370
I want to have this pattern.

00:00:17.370 --> 00:00:20.550
Or this pattern means
is we want to ignore

00:00:20.550 --> 00:00:26.055
all the files that does not
have dot log extension.

00:00:26.055 --> 00:00:29.890
Now if you notice we have
a conflict in patterns.

00:00:29.890 --> 00:00:31.955
In the root directory.

00:00:31.955 --> 00:00:33.350
We have a pattern that

00:00:33.350 --> 00:00:37.250
says we want to ignore
all the dot log files.

00:00:37.250 --> 00:00:40.910
But whereas here
with this pattern,

00:00:40.910 --> 00:00:43.910
we're saying we want to
ignore all the files.

00:00:43.910 --> 00:00:46.145
That is not a dot log file.

00:00:46.145 --> 00:00:48.680
Which pattern should get follow.

00:00:48.680 --> 00:00:51.485
That's where the precedents
will come into picture.

00:00:51.485 --> 00:00:53.600
In this case, this
pattern would be

00:00:53.600 --> 00:00:56.795
preferred over the one
in the parent directory.

00:00:56.795 --> 00:00:59.000
The way it works
is when you have

00:00:59.000 --> 00:01:01.970
a file like info dot log in,

00:01:01.970 --> 00:01:04.700
it will check to see if there
are any dot gitignore files

00:01:04.700 --> 00:01:07.910
in the same directory where
that file is residing.

00:01:07.910 --> 00:01:11.990
If there is, then it will
try to find patterns,

00:01:11.990 --> 00:01:14.090
a matching with that file.

00:01:14.090 --> 00:01:16.940
If there are no patterns
that match with that file,

00:01:16.940 --> 00:01:21.980
then it will look for patterns
in the parent directory.

00:01:21.980 --> 00:01:24.410
If it still doesn't find there,

00:01:24.410 --> 00:01:26.360
then it will try to
find the patterns

00:01:26.360 --> 00:01:29.180
inside the exclude file.

00:01:29.180 --> 00:01:31.970
If it doesn't find
patterns over there as

00:01:31.970 --> 00:01:34.700
well that matches with
the particular file.

00:01:34.700 --> 00:01:38.465
Then it will go inside and
check the global ignore file.

00:01:38.465 --> 00:01:40.400
If we had configured it.

00:01:40.400 --> 00:01:42.485
If it doesn't find anywhere,

00:01:42.485 --> 00:01:45.440
then it will allow us
to stage that file.

00:01:45.440 --> 00:01:48.650
That's how precedent would walk.

00:01:48.650 --> 00:01:51.750
Now if I go to Git Bash,

00:01:53.760 --> 00:01:58.580
Let's see if we can
stage the info dot log.

00:02:04.920 --> 00:02:09.200
We can, as you can see,

00:02:11.040 --> 00:02:13.630
we are indeed able to stage

00:02:13.630 --> 00:02:20.260
info dot log because the
pattern in that folder,

00:02:20.260 --> 00:02:21.880
sales that we want to include

00:02:21.880 --> 00:02:25.465
this file and don't
want to ignore it.

00:02:25.465 --> 00:02:27.835
In most cases though,

00:02:27.835 --> 00:02:30.609
typically in almost
all the projects,

00:02:30.609 --> 00:02:34.300
you would only have
one dot gitignore file

00:02:34.300 --> 00:02:36.985
and that goes inside
the root directory.

00:02:36.985 --> 00:02:40.855
But I'm sharing this just
for your information.

00:02:40.855 --> 00:02:43.630
I should also mention
that we're not

00:02:43.630 --> 00:02:46.600
restricted to a
couple of patterns.

00:02:46.600 --> 00:02:49.045
We have bunch of patterns
which we can use

00:02:49.045 --> 00:02:50.650
depending on what
are all the files

00:02:50.650 --> 00:02:51.925
that you want to ignore.

00:02:51.925 --> 00:02:55.675
In most cases, it would
typically be this.

00:02:55.675 --> 00:03:01.570
Or you might end up
specifying a folder like so.

00:03:01.570 --> 00:03:03.400
All of the patterns
you can refer

00:03:03.400 --> 00:03:05.125
to the official documentation.

00:03:05.125 --> 00:03:06.220
There aren't many.

00:03:06.220 --> 00:03:08.050
Can just have a
quick look and get

00:03:08.050 --> 00:03:10.495
a sense of weight as
patterns that are supported.

00:03:10.495 --> 00:03:11.980
It doesn't make sense for me

00:03:11.980 --> 00:03:13.180
to walk you through
each and every

00:03:13.180 --> 00:03:15.685
pattern and take
up all your time.

00:03:15.685 --> 00:03:17.320
Just refer to the documentation

00:03:17.320 --> 00:03:19.850
and it has all the
things you need.

00:03:21.720 --> 00:03:25.525
Sometimes you might have
so many ignore files.

00:03:25.525 --> 00:03:27.370
That makes it hard
to understand why

00:03:27.370 --> 00:03:29.515
a particular file
is being ignored.

00:03:29.515 --> 00:03:32.575
In which case we have
one command handy.

00:03:32.575 --> 00:03:36.250
You said Get, check.

00:03:36.250 --> 00:03:42.235
Ignore with hyphen v
option stands for verbose.

00:03:42.235 --> 00:03:46.045
And then you're going to
specify the name of the file.

00:03:46.045 --> 00:03:48.565
For example, Error dot loc.

00:03:48.565 --> 00:03:50.275
And this is going to print

00:03:50.275 --> 00:03:52.210
why this file is being ignored.

00:03:52.210 --> 00:03:54.190
As you can see, we have

00:03:54.190 --> 00:03:56.845
dot ignore file in
the root directory.

00:03:56.845 --> 00:04:00.430
And this pattern is
matching with this file.

00:04:00.430 --> 00:04:03.104
And that's why it's
being ignored.

00:04:03.104 --> 00:04:04.700
This might come in handy,

00:04:04.700 --> 00:04:07.040
especially if you
have multiple ignore

00:04:07.040 --> 00:04:08.930
files or you're not

00:04:08.930 --> 00:04:12.389
sure of why a particular
file is being ignored.
