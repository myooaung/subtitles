WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.335
Let us see how his life
before git branches existed.

00:00:04.335 --> 00:00:06.570
And you can tell by
this image that it

00:00:06.570 --> 00:00:09.390
must be a very
frustrating experience.

00:00:09.390 --> 00:00:11.700
Imagine that we have Bob who is

00:00:11.700 --> 00:00:14.280
an investment
advisor and sender,

00:00:14.280 --> 00:00:15.645
who is a freelancer.

00:00:15.645 --> 00:00:18.750
Bob asunder to create
an application for him.

00:00:18.750 --> 00:00:21.840
And sender has created one
application and Bob is

00:00:21.840 --> 00:00:25.245
quite happy with how the
application functions.

00:00:25.245 --> 00:00:27.180
And now Bob has decided to add

00:00:27.180 --> 00:00:29.985
a few more features
into his application.

00:00:29.985 --> 00:00:35.520
And sender has accepted to
work on those features.

00:00:35.520 --> 00:00:39.285
Now assume that sender has
started walking on feature one

00:00:39.285 --> 00:00:43.550
and committed all those changes
and has shown it to Bob.

00:00:43.550 --> 00:00:45.155
Bob is quite happy with

00:00:45.155 --> 00:00:47.105
how the feature one
is functioning.

00:00:47.105 --> 00:00:49.040
And he has given green signal

00:00:49.040 --> 00:00:51.470
to continue working
on other features.

00:00:51.470 --> 00:00:55.595
So sender has continued
working on feature to as well.

00:00:55.595 --> 00:00:57.545
And sent an email to Bob

00:00:57.545 --> 00:00:59.870
asking him to
verify the feature.

00:00:59.870 --> 00:01:02.855
But this time Bob is quite
busy with this clients.

00:01:02.855 --> 00:01:06.890
And so he hadn't got any
time to check this feature.

00:01:06.890 --> 00:01:09.680
However, some there has
decided to continue working on

00:01:09.680 --> 00:01:11.510
other features because if he

00:01:11.510 --> 00:01:13.610
keeps waiting for Bob's reply,

00:01:13.610 --> 00:01:16.685
he might not be able to
meet the project deadline.

00:01:16.685 --> 00:01:19.925
So he delivered feature three
and feature for as well,

00:01:19.925 --> 00:01:21.620
and has sent an email to Bob

00:01:21.620 --> 00:01:24.005
asking him to verify
all these features.

00:01:24.005 --> 00:01:26.540
Bob verified all the features.

00:01:26.540 --> 00:01:28.640
And for some reason
Bob is not happy

00:01:28.640 --> 00:01:30.620
with feature to end that he

00:01:30.620 --> 00:01:32.330
has decided to
eliminate that feature

00:01:32.330 --> 00:01:35.075
altogether from his application.

00:01:35.075 --> 00:01:37.790
So cinder thought
about it a bit and he

00:01:37.790 --> 00:01:39.530
realized that it's really

00:01:39.530 --> 00:01:41.960
difficult to undo
all those changes.

00:01:41.960 --> 00:01:44.720
Because if he tries to
undo all these changes,

00:01:44.720 --> 00:01:46.340
he might end up breaking

00:01:46.340 --> 00:01:48.545
some of the features
which were walking.

00:01:48.545 --> 00:01:50.930
Another thing that's on
the thought of doing is

00:01:50.930 --> 00:01:52.910
to go back to one of
the previous versions

00:01:52.910 --> 00:01:54.740
of the project by running

00:01:54.740 --> 00:01:57.335
the command gets which
are git checkout.

00:01:57.335 --> 00:01:59.750
But the problem with
that is Cinder will

00:01:59.750 --> 00:02:02.270
not only get rid off
feature to changes,

00:02:02.270 --> 00:02:04.790
but he will also get rid
of feature three and

00:02:04.790 --> 00:02:07.700
feature for changes
which are working fine.

00:02:07.700 --> 00:02:10.655
And Bob is quite happy
with these features.

00:02:10.655 --> 00:02:13.610
This is just the tip of the
iceberg as to the kind of

00:02:13.610 --> 00:02:17.465
problems we might face when
we don't use branches.

00:02:17.465 --> 00:02:20.345
For example, in
real-world applications,

00:02:20.345 --> 00:02:22.040
you might not be
the only person who

00:02:22.040 --> 00:02:24.275
will be working on
the application.

00:02:24.275 --> 00:02:26.330
You might have the code base and

00:02:26.330 --> 00:02:27.995
the list of commit histories,

00:02:27.995 --> 00:02:30.860
deciding on a centralized
repository and

00:02:30.860 --> 00:02:34.610
multiple team members and
could be from multiple teams,

00:02:34.610 --> 00:02:36.755
would be contributing
to that project.

00:02:36.755 --> 00:02:38.705
Everybody would make
their own commits,

00:02:38.705 --> 00:02:40.775
introducing their own features.

00:02:40.775 --> 00:02:43.010
Now we cannot risk
going back to one of

00:02:43.010 --> 00:02:44.870
the previous versions and

00:02:44.870 --> 00:02:47.720
risk losing all
the team's effort.

00:02:47.720 --> 00:02:50.975
Another problem you might
face without branches

00:02:50.975 --> 00:02:52.160
is when you want to work

00:02:52.160 --> 00:02:54.365
on multiple features
simultaneously.

00:02:54.365 --> 00:02:56.420
Let me explain you what I mean.

00:02:56.420 --> 00:02:59.150
Assume that you are assigned
with all these features

00:02:59.150 --> 00:03:02.105
and you have to finish
them before a deadline.

00:03:02.105 --> 00:03:03.800
Let's call them feature F1,

00:03:03.800 --> 00:03:05.630
F2, F3, and F4.

00:03:05.630 --> 00:03:08.660
While it's not recommended
that you multitask,

00:03:08.660 --> 00:03:10.850
sometimes use situation
might demand you to

00:03:10.850 --> 00:03:13.280
work on multiple
things simultaneously.

00:03:13.280 --> 00:03:14.750
For example, assume that you

00:03:14.750 --> 00:03:16.805
started working on feature F and

00:03:16.805 --> 00:03:18.440
made some changes related to

00:03:18.440 --> 00:03:20.885
F1 inside your
working directory.

00:03:20.885 --> 00:03:23.390
And then you have to write
an email to somebody.

00:03:23.390 --> 00:03:25.115
And based on what the reply,

00:03:25.115 --> 00:03:27.335
you'd want to continue
with feature one.

00:03:27.335 --> 00:03:29.270
While you wait for the reply.

00:03:29.270 --> 00:03:31.865
You're not expected to
watch YouTube or something.

00:03:31.865 --> 00:03:34.520
Your boss would expect you
to take up another task.

00:03:34.520 --> 00:03:36.170
Maybe start working
on feature to,

00:03:36.170 --> 00:03:38.120
for instance, you pick

00:03:38.120 --> 00:03:40.340
up feature two and
start working on it.

00:03:40.340 --> 00:03:42.980
Introduce code related
to feature two.

00:03:42.980 --> 00:03:45.005
And then let's say
that you're dependent

00:03:45.005 --> 00:03:47.330
on somebody else for
feature to as well.

00:03:47.330 --> 00:03:49.595
And you have to
wait for the reply.

00:03:49.595 --> 00:03:52.220
So you take up feature
three as well.

00:03:52.220 --> 00:03:54.230
While you're managing
all these features,

00:03:54.230 --> 00:03:57.815
waiting for replies, and
updating the code accordingly.

00:03:57.815 --> 00:03:59.390
Your boss would ask you to send

00:03:59.390 --> 00:04:01.730
an update on feature for you.

00:04:01.730 --> 00:04:02.900
We'll tell you about it is

00:04:02.900 --> 00:04:04.190
in progress even
though you haven't

00:04:04.190 --> 00:04:06.980
started on feature for
just to keep them happy,

00:04:06.980 --> 00:04:09.155
you might tell him
it is in progress.

00:04:09.155 --> 00:04:10.700
So you're kind of
forced to start

00:04:10.700 --> 00:04:12.455
working on feature for now.

00:04:12.455 --> 00:04:15.290
And then suddenly you get
to reply for feature one.

00:04:15.290 --> 00:04:17.420
Or someone in your team
ask you to deliver

00:04:17.420 --> 00:04:19.760
feature three because they
are dependent on them.

00:04:19.760 --> 00:04:22.325
I hope you're getting
where this is leading to.

00:04:22.325 --> 00:04:24.530
When you have all
these partial changes

00:04:24.530 --> 00:04:26.855
of all the features
inside your project.

00:04:26.855 --> 00:04:28.970
This would lead to a lot

00:04:28.970 --> 00:04:31.640
of mess and a lot
of frustration.

00:04:31.640 --> 00:04:34.535
Let's talk about one
more realistic problem

00:04:34.535 --> 00:04:38.400
that you might face if
you don't use branches.

00:04:38.610 --> 00:04:42.250
Imagine that you have
centralized repository where

00:04:42.250 --> 00:04:43.510
all the team members would be

00:04:43.510 --> 00:04:45.835
contributing to the code base.

00:04:45.835 --> 00:04:49.210
And there comes this new lady
who just joined the team.

00:04:49.210 --> 00:04:51.790
She didn't have any
experience in programming.

00:04:51.790 --> 00:04:53.665
She just graduated
out of college

00:04:53.665 --> 00:04:55.690
and join the organization.

00:04:55.690 --> 00:04:59.155
And she was assigned with
a feature to work on.

00:04:59.155 --> 00:05:00.790
While she's working
on the feature,

00:05:00.790 --> 00:05:03.805
she felt like there are too
many changes to come back.

00:05:03.805 --> 00:05:05.320
So she thought of making

00:05:05.320 --> 00:05:07.855
a partial commit
onto the code base.

00:05:07.855 --> 00:05:10.225
So she commits those changes.

00:05:10.225 --> 00:05:12.204
And obviously, as
you can expect,

00:05:12.204 --> 00:05:14.275
this is not an
ideal thing to do.

00:05:14.275 --> 00:05:15.940
But she is new to the team.

00:05:15.940 --> 00:05:17.440
She doesn't know
a lot of things.

00:05:17.440 --> 00:05:20.535
She's still learning and
she made a partial commit.

00:05:20.535 --> 00:05:22.820
And rest of the team
members would start

00:05:22.820 --> 00:05:25.640
taking those new changes
because they need to

00:05:25.640 --> 00:05:27.920
get the latest code
to start working

00:05:27.920 --> 00:05:30.680
on their own features on
top of the existing code.

00:05:30.680 --> 00:05:32.675
And they contribute
to the project,

00:05:32.675 --> 00:05:34.910
introducing their
own set of changes

00:05:34.910 --> 00:05:37.805
and introducing new
features or bug fixes.

00:05:37.805 --> 00:05:39.830
Now because of that
partial commit

00:05:39.830 --> 00:05:41.570
done by this young lady,

00:05:41.570 --> 00:05:45.530
all the future commits might
actually break as well.

00:05:45.530 --> 00:05:47.870
Or even worse, it
might actually break

00:05:47.870 --> 00:05:50.510
things mature,
working fine earlier.

00:05:50.510 --> 00:05:52.760
Now it's understandable
that she is new to

00:05:52.760 --> 00:05:55.909
the team and she's
bound to make mistakes,

00:05:55.909 --> 00:05:57.950
but harbored all the
senior members in

00:05:57.950 --> 00:06:00.140
the team who did a fair job.

00:06:00.140 --> 00:06:01.670
But yet they have to take

00:06:01.670 --> 00:06:03.740
the blame because
their code is not

00:06:03.740 --> 00:06:05.660
working as expected due to

00:06:05.660 --> 00:06:08.180
the changes introduced
by this young lady.

00:06:08.180 --> 00:06:10.580
Now this is just
a consequence of

00:06:10.580 --> 00:06:12.830
mistake done by one team member.

00:06:12.830 --> 00:06:15.140
How about multiple team
members introducing

00:06:15.140 --> 00:06:18.755
all those half cooked ideas
onto the main code base.

00:06:18.755 --> 00:06:21.200
It will soon become a nightmare.

00:06:21.200 --> 00:06:23.375
It will soon become
hard to manage,

00:06:23.375 --> 00:06:25.895
not being able to meet
the project deadlines,

00:06:25.895 --> 00:06:29.240
too many issues to
fix, et cetera.

00:06:29.240 --> 00:06:33.845
So I guess I now need to
learn about git branches.

00:06:33.845 --> 00:06:35.255
Absolutely.

00:06:35.255 --> 00:06:37.760
Then what are you waiting for?

00:06:37.760 --> 00:06:40.310
Each meet those stuff damaged.

00:06:40.310 --> 00:06:40.805
Okay.

00:06:40.805 --> 00:06:42.650
Easy cylinder. That's the plan.

00:06:42.650 --> 00:06:46.280
That's why I'm here. I'm
here to teach you. Thanks.

00:06:46.280 --> 00:06:47.660
Thanks.

00:06:47.660 --> 00:06:49.980
You're welcome.
