WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.570 --> 00:00:03.550
Now you might be
having a question.

00:00:03.550 --> 00:00:05.950
Every time we add
a file or modify

00:00:05.950 --> 00:00:09.115
a file and bring them
to staging area,

00:00:09.115 --> 00:00:11.590
we're going to see the
blob object's getting

00:00:11.590 --> 00:00:14.260
created inside the
object database.

00:00:14.260 --> 00:00:16.345
And get won't even delete them.

00:00:16.345 --> 00:00:17.845
Even if you were to unstable

00:00:17.845 --> 00:00:20.110
the files from the staging area.

00:00:20.110 --> 00:00:22.360
Is it efficient to do so or

00:00:22.360 --> 00:00:24.790
is it taking up
too much of space?

00:00:24.790 --> 00:00:28.375
The answer is, it's not
completely efficient of course.

00:00:28.375 --> 00:00:31.645
But good has this concept
of garbage collection,

00:00:31.645 --> 00:00:33.190
which happens periodically or

00:00:33.190 --> 00:00:34.495
when you run certain commands,

00:00:34.495 --> 00:00:36.445
like get pulled for instance,

00:00:36.445 --> 00:00:38.140
we're going to talk
about git pull,

00:00:38.140 --> 00:00:41.035
git push commands, incoming
chapters for sure.

00:00:41.035 --> 00:00:42.850
But there are certain
commands which will

00:00:42.850 --> 00:00:45.305
also trigger garbage collection.

00:00:45.305 --> 00:00:47.810
The concept of garbage
collection is somewhat similar

00:00:47.810 --> 00:00:50.660
to garbage collection in
other programming languages.

00:00:50.660 --> 00:00:52.745
For example, we have
garbage collection in

00:00:52.745 --> 00:00:54.965
Java programming
language wherein

00:00:54.965 --> 00:00:57.695
all the unreferenced
objects would be destroyed.

00:00:57.695 --> 00:00:59.585
And same as the case with Git.

00:00:59.585 --> 00:01:01.850
It's not a 100%
efficient for sure,

00:01:01.850 --> 00:01:04.010
but it also has mechanism to

00:01:04.010 --> 00:01:06.350
efficiently manage the objects.

00:01:06.350 --> 00:01:09.830
In fact, we can run the
garbage collection manually.

00:01:09.830 --> 00:01:12.845
Let's do get GC.

00:01:12.845 --> 00:01:17.810
And if you notice

00:01:17.810 --> 00:01:19.940
how the objects
which were existing

00:01:19.940 --> 00:01:22.385
before are no longer existing.

00:01:22.385 --> 00:01:25.700
Now, does this mean that
everything has gone for good?

00:01:25.700 --> 00:01:29.285
The answer is no. We
still have all of that.

00:01:29.285 --> 00:01:32.105
For example, if you
run this command,

00:01:32.105 --> 00:01:33.980
we're still going
to see how that

00:01:33.980 --> 00:01:36.350
object information and you

00:01:36.350 --> 00:01:41.460
can even read the content
inside this blob objects.

00:01:43.750 --> 00:01:46.295
Now how is this possible?

00:01:46.295 --> 00:01:48.980
We don't have those
object folders,

00:01:48.980 --> 00:01:51.200
but still were able to
read those objects.

00:01:51.200 --> 00:01:54.920
Well, it's inside
this back Directory.

00:01:54.920 --> 00:01:58.790
Essentially that garbage
collection operation has further

00:01:58.790 --> 00:02:03.320
compressed all of those
objects into single pack file.

00:02:03.320 --> 00:02:06.965
We also have idx,
our index file.

00:02:06.965 --> 00:02:09.110
And this will tell
which object is

00:02:09.110 --> 00:02:11.600
located in which back file.

00:02:11.600 --> 00:02:13.895
Currently, since all
project is very small,

00:02:13.895 --> 00:02:16.655
we just have one
single pack file.

00:02:16.655 --> 00:02:18.755
But as we have

00:02:18.755 --> 00:02:21.230
more and more files
introduced into a project,

00:02:21.230 --> 00:02:24.350
you're going to see new pack
files being introduced.

00:02:24.350 --> 00:02:28.310
An index would come into
picture at that point in time.

00:02:28.310 --> 00:02:30.290
But anyway, this
is not something

00:02:30.290 --> 00:02:32.705
that we really need
to worry about.

00:02:32.705 --> 00:02:36.840
You can also verify Watson
inside the PAC file.

00:02:37.270 --> 00:02:41.090
Let me launch Git
Bash in this folder.

00:02:41.090 --> 00:02:44.225
And the command to use is get,

00:02:44.225 --> 00:02:49.290
verify back, hyphen v.

00:02:49.620 --> 00:02:52.150
And then I'm going to specify

00:02:52.150 --> 00:02:53.950
the name of the packed file,

00:02:53.950 --> 00:02:59.180
and this would print
all the objects in it.

00:03:02.280 --> 00:03:04.990
One thing I should
also mention is

00:03:04.990 --> 00:03:07.750
that technology is addictive.

00:03:07.750 --> 00:03:09.670
If we want to learn everything.

00:03:09.670 --> 00:03:12.220
Sky is the limit
as to how deep we

00:03:12.220 --> 00:03:14.875
can go and understand
each and every concept.

00:03:14.875 --> 00:03:16.495
But is it worth it?

00:03:16.495 --> 00:03:17.980
That's the question.

00:03:17.980 --> 00:03:21.070
You don't really want to
learn everything out there.

00:03:21.070 --> 00:03:23.305
That's just simply not worth it.

00:03:23.305 --> 00:03:26.455
Because we already got a lot
of things to cover and get

00:03:26.455 --> 00:03:29.905
is only the starting point
and your DevOps journey.

00:03:29.905 --> 00:03:31.890
For me as an instructor,

00:03:31.890 --> 00:03:34.430
I need to know and
research about everything.

00:03:34.430 --> 00:03:36.890
What good has to
offer so that I can

00:03:36.890 --> 00:03:39.845
filter out what is needed and
what is not needed for you.

00:03:39.845 --> 00:03:43.474
In fact, I'm hesitant to even
talk about these concepts,

00:03:43.474 --> 00:03:45.439
but I felt that understanding

00:03:45.439 --> 00:03:47.240
of this is very important to

00:03:47.240 --> 00:03:49.040
understand all the
future concepts we're

00:03:49.040 --> 00:03:51.335
going to talk about
incoming chapters.

00:03:51.335 --> 00:03:54.290
But otherwise, I'm
hesitant to talk about

00:03:54.290 --> 00:03:55.670
all these concepts which

00:03:55.670 --> 00:03:57.950
doesn't play any role
in your Gettier.

00:03:57.950 --> 00:03:59.765
I can do that if I want to.

00:03:59.765 --> 00:04:01.370
I can just teach you things

00:04:01.370 --> 00:04:03.755
just to prove that I
have knowledge on that.

00:04:03.755 --> 00:04:06.875
But that doesn't make
sense to you or to me.

00:04:06.875 --> 00:04:09.485
My job is to make your job easy,

00:04:09.485 --> 00:04:11.345
not complicate your job.

00:04:11.345 --> 00:04:15.050
And I would rather prefer
and try my best to teach

00:04:15.050 --> 00:04:16.670
you only the stuff that are

00:04:16.670 --> 00:04:19.145
absolutely needed for your job.

00:04:19.145 --> 00:04:20.915
You need to keep that in mind

00:04:20.915 --> 00:04:23.090
and don't try to
learn everything.

00:04:23.090 --> 00:04:26.030
That's one of the biggest
learnings I had in my career.

00:04:26.030 --> 00:04:27.740
I just tried to
learn everything.

00:04:27.740 --> 00:04:29.854
In fact, technology
is very addictive.

00:04:29.854 --> 00:04:31.730
The more you explore,
the more you want

00:04:31.730 --> 00:04:33.860
to know more and
it's not worth it.

00:04:33.860 --> 00:04:36.935
It's sort of like an
entertainment in itself,

00:04:36.935 --> 00:04:39.500
in an odd way maybe,
but it's for me.

00:04:39.500 --> 00:04:42.570
I have to take that
pain not to you.
