WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.080 --> 00:00:02.670
Okay, let us see how we can undo

00:00:02.670 --> 00:00:06.330
our changes are reverse the
comments that we've done.

00:00:06.330 --> 00:00:08.295
In order to save you time.

00:00:08.295 --> 00:00:10.695
I've actually created
a brand new folder

00:00:10.695 --> 00:00:12.240
or brand new project.

00:00:12.240 --> 00:00:14.685
And we basically have
these three files.

00:00:14.685 --> 00:00:16.080
Each one of these files were

00:00:16.080 --> 00:00:18.465
committed in their own comments.

00:00:18.465 --> 00:00:21.555
For example, if I do git log,

00:00:21.555 --> 00:00:23.505
you see that we
have three commits.

00:00:23.505 --> 00:00:26.610
In the first comment, I have
committed one dot TXT file.

00:00:26.610 --> 00:00:28.950
In the second comment
I committed to dot

00:00:28.950 --> 00:00:31.200
TXT file and enter commit.

00:00:31.200 --> 00:00:33.630
We have committed
three dot TXT file.

00:00:33.630 --> 00:00:35.460
This is just to save your time.

00:00:35.460 --> 00:00:37.740
We've been creating
projects and creating

00:00:37.740 --> 00:00:39.600
files and adding them to

00:00:39.600 --> 00:00:42.070
staging area and committing
those changes for awhile.

00:00:42.070 --> 00:00:43.700
I hope that I don't have to

00:00:43.700 --> 00:00:45.590
walk you through this
again and again.

00:00:45.590 --> 00:00:48.080
We don't have any other
branches at the moment.

00:00:48.080 --> 00:00:50.600
We have the default
master branch.

00:00:50.600 --> 00:00:53.285
Let's take a look at how
we can do also changes

00:00:53.285 --> 00:00:55.985
our undo bunch of commits.

00:00:55.985 --> 00:00:57.500
And also we're
going to talk about

00:00:57.500 --> 00:00:58.985
couple of more comments

00:00:58.985 --> 00:01:02.435
which I find relevant to
talk about right now.

00:01:02.435 --> 00:01:04.760
So let's say that I've
accidentally committed

00:01:04.760 --> 00:01:08.705
these changes and I wanted
to undo those changes.

00:01:08.705 --> 00:01:10.685
Now there are three
options for me.

00:01:10.685 --> 00:01:12.560
I can just undo this commit,

00:01:12.560 --> 00:01:13.970
but keep the files in

00:01:13.970 --> 00:01:16.745
the working directory.
That's option one.

00:01:16.745 --> 00:01:19.880
Option two is I can
undo this commit,

00:01:19.880 --> 00:01:21.949
keep the changes in
working directory,

00:01:21.949 --> 00:01:24.665
and also have those
files staged.

00:01:24.665 --> 00:01:26.315
And then the third option,

00:01:26.315 --> 00:01:29.330
I undo this commit as well as I

00:01:29.330 --> 00:01:33.200
delete all the changes that
were done in this comment.

00:01:33.200 --> 00:01:37.385
So let me demonstrate
all such scenarios.

00:01:37.385 --> 00:01:41.150
And the command for
that is git reset.

00:01:41.150 --> 00:01:44.435
And I'm going to say head.

00:01:44.435 --> 00:01:47.270
What are the symbol is? I
don't know what the symbol is.

00:01:47.270 --> 00:01:49.145
I guess it's called Tilda.

00:01:49.145 --> 00:01:52.070
If I'm not wrong,
I hope I'm right.

00:01:52.070 --> 00:01:54.320
And then I'm going to
give a number here.

00:01:54.320 --> 00:01:56.360
If I specify two here,

00:01:56.360 --> 00:01:58.594
I would like to
undo to comments.

00:01:58.594 --> 00:02:02.690
Let's try with one
commit. I hit Enter.

00:02:02.690 --> 00:02:07.775
So what this has done is this
has undone the last commit.

00:02:07.775 --> 00:02:11.105
But we still have the files
inside the working directory,

00:02:11.105 --> 00:02:13.175
but not in staging area.

00:02:13.175 --> 00:02:15.560
So if I do git log now,

00:02:15.560 --> 00:02:19.355
you're only going to see
first, second commit.

00:02:19.355 --> 00:02:23.195
But if I do ls, you're going
to see three dot TXT file.

00:02:23.195 --> 00:02:24.950
Because as I've
mentioned before,

00:02:24.950 --> 00:02:27.770
we still have the changes
in the working directory.

00:02:27.770 --> 00:02:29.990
If I do git status now,

00:02:29.990 --> 00:02:32.720
you see that this
file is not staged.

00:02:32.720 --> 00:02:34.250
So we can introduce

00:02:34.250 --> 00:02:36.800
all the changes we
wanted to introduce.

00:02:36.800 --> 00:02:38.315
Make all the updates.

00:02:38.315 --> 00:02:41.555
As soon that I've done some
changes in three dot TXT file

00:02:41.555 --> 00:02:44.420
that I now wanted to commit.

00:02:44.420 --> 00:02:46.100
So I may call

00:02:46.100 --> 00:02:48.290
those changes as soon that
I've done those changes,

00:02:48.290 --> 00:02:52.470
I'll git add dot txt file again.

00:02:52.750 --> 00:02:54.530
And then I'll redo

00:02:54.530 --> 00:02:54.650
the

00:02:54.650 --> 00:02:56.130
commit

00:03:03.220 --> 00:03:04.790
git log.

00:03:04.790 --> 00:03:09.155
Now, you see that we have
all those three comments.

00:03:09.155 --> 00:03:12.920
Now let's see what
would happen if I run

00:03:12.920 --> 00:03:16.954
this command with soft option,

00:03:16.954 --> 00:03:19.055
this for Lambda, this combat.

00:03:19.055 --> 00:03:21.380
But we still have
the files inside

00:03:21.380 --> 00:03:25.640
the working directory as
well as on the staging area.

00:03:25.640 --> 00:03:28.635
I run this command.

00:03:28.635 --> 00:03:30.610
Git log.

00:03:30.610 --> 00:03:32.440
You see only two commits.

00:03:32.440 --> 00:03:35.185
And if you do ls,

00:03:35.185 --> 00:03:37.390
you're going to see
all three files.

00:03:37.390 --> 00:03:39.655
If you do git status,

00:03:39.655 --> 00:03:43.075
you'll also see that
those changes are staged.

00:03:43.075 --> 00:03:46.659
So I can just commit
those changes.

00:03:46.659 --> 00:03:50.095
I'm going to make that comment.

00:03:50.095 --> 00:03:54.340
And life is back to normal.

00:03:54.340 --> 00:03:57.760
Now let's say that I've
committed a terrible blunder.

00:03:57.760 --> 00:04:00.250
And I just would like
to not only undo

00:04:00.250 --> 00:04:03.235
those changes are
under the commit,

00:04:03.235 --> 00:04:05.035
but I also would
like to get rid of

00:04:05.035 --> 00:04:07.675
all the changes I've
done in that comment.

00:04:07.675 --> 00:04:11.210
Well, the option for that is you

00:04:11.210 --> 00:04:14.675
need to use git
reset head tilda,

00:04:14.675 --> 00:04:17.450
number of comments that
you'd like to go back to.

00:04:17.450 --> 00:04:20.990
And then you're going
to use the option hard.

00:04:20.990 --> 00:04:24.065
Now if you do git log,

00:04:24.065 --> 00:04:26.915
you would obviously
see two commits.

00:04:26.915 --> 00:04:28.610
But if you do ls now,

00:04:28.610 --> 00:04:31.775
you're only going
to see two files.

00:04:31.775 --> 00:04:33.620
It is as though I have never

00:04:33.620 --> 00:04:36.240
done the third comment at all.
