WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.290 --> 00:00:03.240
Let us see how we can
take a look at list off

00:00:03.240 --> 00:00:07.320
stashes and be able to
retrieve a specific stash?

00:00:07.320 --> 00:00:08.640
Yes, it is possible.

00:00:08.640 --> 00:00:10.755
Let me show you what I mean.

00:00:10.755 --> 00:00:13.290
In order to explain this better,

00:00:13.290 --> 00:00:15.450
I have once again brought
back the project to

00:00:15.450 --> 00:00:17.880
what it was at the
start of this chapter.

00:00:17.880 --> 00:00:22.095
So we basically have
no stashes whatsoever.

00:00:22.095 --> 00:00:23.715
I'm in feature one branch.

00:00:23.715 --> 00:00:26.460
Let me go ahead and
edit one of the files.

00:00:26.460 --> 00:00:29.145
Let me just simply
add one line of text,

00:00:29.145 --> 00:00:32.110
like so, save the
file, close it,

00:00:32.110 --> 00:00:39.510
go back to Git Bash and let
us stash those changes.

00:00:40.930 --> 00:00:43.820
Go back and open up the file.

00:00:43.820 --> 00:00:45.920
Would no longer see
all those changes

00:00:45.920 --> 00:00:47.795
because those were just stashed.

00:00:47.795 --> 00:00:50.690
Let me add one
more line of text,

00:00:50.690 --> 00:00:54.380
like so, saved the
file, close it.

00:00:54.380 --> 00:00:57.965
Let me stash these
changes as well.

00:00:57.965 --> 00:01:01.940
Now, we have done
stashing couple of times,

00:01:01.940 --> 00:01:03.500
and this must have been

00:01:03.500 --> 00:01:05.930
maintained somewhere
in the repository.

00:01:05.930 --> 00:01:07.610
How do we take a look at it?

00:01:07.610 --> 00:01:11.030
The command for that
is git stash list.

00:01:11.030 --> 00:01:14.165
This would list on all
the list of stashes.

00:01:14.165 --> 00:01:19.760
We can retrieve a specific
stash by using its ID.

00:01:19.760 --> 00:01:21.590
But if you notice,

00:01:21.590 --> 00:01:25.475
the message is in here
are not very descriptive.

00:01:25.475 --> 00:01:29.030
This is just the latest
commit on feature

00:01:29.030 --> 00:01:33.950
one branch and same as
used for all the stashes.

00:01:33.950 --> 00:01:37.219
Now, over time, as your
stashes gets increased,

00:01:37.219 --> 00:01:39.260
it might be difficult
to identify would

00:01:39.260 --> 00:01:41.780
stash has which changes?

00:01:41.780 --> 00:01:43.670
Fortunately, git
allows us to give

00:01:43.670 --> 00:01:47.210
a descriptive message
while we're stashing.

00:01:47.210 --> 00:01:51.780
So let me edit another file.

00:01:52.750 --> 00:01:56.750
Maybe invented or TXT like so.

00:01:56.750 --> 00:02:01.140
And I'm going to do the same
for product file as well.

00:02:01.630 --> 00:02:04.235
Save it and close it.

00:02:04.235 --> 00:02:07.610
So I have just made edits
and couple of files.

00:02:07.610 --> 00:02:09.290
Let me stash those changes,

00:02:09.290 --> 00:02:12.785
but this time I'm going to
give a descriptive message.

00:02:12.785 --> 00:02:14.630
Save is the option we need to

00:02:14.630 --> 00:02:16.040
use and you're going to provide

00:02:16.040 --> 00:02:26.090
some message,
something like that.

00:02:26.090 --> 00:02:29.360
Our changes are stashed.

00:02:29.360 --> 00:02:31.610
To take a look at
the list of stashes.

00:02:31.610 --> 00:02:36.380
Now, you're going to see
a descriptive message.

00:02:36.380 --> 00:02:41.720
Now let me try to retrieve
this particular stash.

00:02:41.720 --> 00:02:44.330
Once again, we can either pop

00:02:44.330 --> 00:02:47.270
the changes are
applied, the changes.

00:02:47.270 --> 00:02:50.285
Let me apply the changes.

00:02:50.285 --> 00:02:55.200
I wanted to specify the idea
of the stash like cell.

00:02:56.680 --> 00:03:03.420
You can see the changes were
retrieved and are applied.

00:03:04.420 --> 00:03:10.970
Similarly, we can also retrieve
this particular stash.

00:03:10.970 --> 00:03:13.130
And we're going to
see those changes

00:03:13.130 --> 00:03:14.885
in admin dot TXT file.

00:03:14.885 --> 00:03:18.245
But let us see what would
happen if I were to retrieve

00:03:18.245 --> 00:03:20.660
this particular stash where

00:03:20.660 --> 00:03:23.520
we have edited the
exact same file.

00:03:25.390 --> 00:03:28.790
This operation, I
really should fail.

00:03:28.790 --> 00:03:32.255
And sure enough, we
have an arrow that says

00:03:32.255 --> 00:03:33.680
your local changes to

00:03:33.680 --> 00:03:36.950
the following files would
be overwritten by merge.

00:03:36.950 --> 00:03:38.840
Please commit your changes are

00:03:38.840 --> 00:03:41.645
stashed them before you merge.

00:03:41.645 --> 00:03:45.230
So basically this Stash
is going to react to

00:03:45.230 --> 00:03:47.600
the changes which
might conflict with

00:03:47.600 --> 00:03:50.840
our existing
uncommitted changes.

00:03:50.840 --> 00:03:52.730
So what is the solution for?

00:03:52.730 --> 00:03:55.475
The solution is
already provided here.

00:03:55.475 --> 00:03:58.550
We can commit all these
changes or stash them once

00:03:58.550 --> 00:04:03.200
again and then retrieve
this particular stash.

00:04:03.200 --> 00:04:06.620
Or alternatively, we can
just use the command

00:04:06.620 --> 00:04:10.010
git restore dot to

00:04:10.010 --> 00:04:12.830
just wipe out all the
uncommitted changes.

00:04:12.830 --> 00:04:15.230
And that way we
should be able to

00:04:15.230 --> 00:04:20.450
retrieve a specific stash
without any problem.

00:04:20.450 --> 00:04:25.440
But then we have also
lost all the changes.

00:04:25.900 --> 00:04:28.550
We're actually going to
talk about how we can

00:04:28.550 --> 00:04:31.114
handle conflicts while stashing.

00:04:31.114 --> 00:04:33.140
When we talk about git pull in

00:04:33.140 --> 00:04:36.990
later chapters.
I'll see you next.
