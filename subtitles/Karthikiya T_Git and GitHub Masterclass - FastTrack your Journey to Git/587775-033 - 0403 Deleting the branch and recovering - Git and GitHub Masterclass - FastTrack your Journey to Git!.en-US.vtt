WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.340
Let us see how we can delete

00:00:02.340 --> 00:00:04.920
a branch in order
to explain this.

00:00:04.920 --> 00:00:08.320
Once again, brought the
project back to this state.

00:00:08.510 --> 00:00:11.565
I'm currently inside
the picture one branch.

00:00:11.565 --> 00:00:14.655
If I tried to delete the branch
when I'm actually in it,

00:00:14.655 --> 00:00:16.980
then it will throw
an error saying that

00:00:16.980 --> 00:00:19.470
you cannot delete
a jet dot branch.

00:00:19.470 --> 00:00:21.090
Let me try doing that.

00:00:21.090 --> 00:00:23.160
So the command that I
need to use to delete

00:00:23.160 --> 00:00:26.865
the branches, git branch.

00:00:26.865 --> 00:00:29.640
And then I'm going to
use the option hyphen D,

00:00:29.640 --> 00:00:31.800
make sure that it is lowercase

00:00:31.800 --> 00:00:35.895
d. And then I'm going to
specify the name of the branch.

00:00:35.895 --> 00:00:38.730
We're going to see an error
and it says cannot delete

00:00:38.730 --> 00:00:42.590
branch feature one checked
out at so-and-so folder.

00:00:42.590 --> 00:00:45.760
I'm going to switch back to

00:00:45.760 --> 00:00:50.035
master branch to be able to
delete feature one branch.

00:00:50.035 --> 00:00:52.300
If I try to delete now,

00:00:52.300 --> 00:00:54.250
get to is actually
going to give us

00:00:54.250 --> 00:00:58.030
a warning that none of the
changes in feature one branch,

00:00:58.030 --> 00:01:01.435
what actually most in
any other branches.

00:01:01.435 --> 00:01:03.580
And as you can see it as saying,

00:01:03.580 --> 00:01:06.370
the branch feature one
is not fully merged.

00:01:06.370 --> 00:01:10.075
But how does it know that
this branch is not merged?

00:01:10.075 --> 00:01:11.810
It will take a look
at the last commit

00:01:11.810 --> 00:01:13.510
of feature one branch.

00:01:13.510 --> 00:01:15.220
And it notices that there is

00:01:15.220 --> 00:01:18.010
no other branch pointing
to that commit.

00:01:18.010 --> 00:01:20.095
Get gives us a warning.

00:01:20.095 --> 00:01:21.235
In addition to that,

00:01:21.235 --> 00:01:23.140
it is also suggesting us if

00:01:23.140 --> 00:01:25.365
we still want to
delete that branch,

00:01:25.365 --> 00:01:29.540
then we can go ahead and do
that with hyphen d option.

00:01:29.540 --> 00:01:32.750
This is uppercase D
compared to lowercase D,

00:01:32.750 --> 00:01:34.760
which we had used earlier.

00:01:34.760 --> 00:01:38.960
And get has actually
provided us default command.

00:01:38.960 --> 00:01:41.270
I can just paste it over here.

00:01:41.270 --> 00:01:43.445
And this would
delete the branch.

00:01:43.445 --> 00:01:44.645
And of course we'll lose

00:01:44.645 --> 00:01:47.735
all the changes introduced
in feature one branch.

00:01:47.735 --> 00:01:49.790
When we deleted this branch,

00:01:49.790 --> 00:01:52.850
git has actually provided
us the hashCode of

00:01:52.850 --> 00:01:54.650
the last commit just

00:01:54.650 --> 00:01:57.365
in case if we want to
do something with it.

00:01:57.365 --> 00:02:00.830
Now let us assume that I have
done a mistake in deleting

00:02:00.830 --> 00:02:03.905
this branch and I wanted
to retrieve it back.

00:02:03.905 --> 00:02:07.400
What is a command that will
help me retrieve this branch?

00:02:07.400 --> 00:02:10.505
Once again, you're already
familiar with that.

00:02:10.505 --> 00:02:13.445
We had used it in one of
our previous lectures.

00:02:13.445 --> 00:02:18.470
Well, it's git,
checkout hyphen b.

00:02:18.470 --> 00:02:21.035
And then you're going to
specify a branch name.

00:02:21.035 --> 00:02:23.225
We can give any
name of our choice.

00:02:23.225 --> 00:02:27.540
But I'm going to do the
same name, pizza one.

00:02:27.830 --> 00:02:31.370
Then we're going to
specify the hashCode of

00:02:31.370 --> 00:02:35.360
the combat that you want this
branch to be pointing to.

00:02:35.360 --> 00:02:38.030
Essentially what this
command is doing is it

00:02:38.030 --> 00:02:40.580
is not only creating
the branch feature one,

00:02:40.580 --> 00:02:43.790
but we'll also switch
to that branch with

00:02:43.790 --> 00:02:45.755
the last commit being

00:02:45.755 --> 00:02:48.950
this commit with this
hashCode feature,

00:02:48.950 --> 00:02:51.020
one branch would be created,

00:02:51.020 --> 00:02:52.970
and that branch
would be pointing to

00:02:52.970 --> 00:02:55.939
this commit that
we've just deleted.

00:02:55.939 --> 00:02:59.135
If you run this command
after a very long time,

00:02:59.135 --> 00:03:01.025
after deleting the branch,

00:03:01.025 --> 00:03:03.020
you may not be able
to see this commit

00:03:03.020 --> 00:03:06.140
anymore and you would
actually lose the data.

00:03:06.140 --> 00:03:09.410
So let's retrieve that
branch once again.

00:03:09.410 --> 00:03:13.550
And as you can see, we have
switched to that new branch.

00:03:13.550 --> 00:03:16.265
And if you do git log,

00:03:16.265 --> 00:03:20.495
you can see that

00:03:20.495 --> 00:03:24.630
the branch is pointing to
the exact same commit.

00:03:25.630 --> 00:03:27.920
Actually the right
way to look at

00:03:27.920 --> 00:03:30.200
it has taken a look at what's

00:03:30.200 --> 00:03:37.380
inside feature one branch file.

00:03:38.920 --> 00:03:43.430
And as expected, it is
pointing to this commit.

00:03:43.430 --> 00:03:46.070
Now we can go ahead and
merge all the changes

00:03:46.070 --> 00:03:48.440
by switching back
to master branch.

00:03:48.440 --> 00:03:49.940
And that is something
we've already

00:03:49.940 --> 00:03:53.010
seen in our previous lecture.

00:03:57.130 --> 00:04:02.855
Git, merge feature one.

00:04:02.855 --> 00:04:05.030
And this walks.

00:04:05.030 --> 00:04:08.164
You can now go ahead and delete

00:04:08.164 --> 00:04:11.945
this branch with
lowercase d option

00:04:11.945 --> 00:04:15.170
and there's no
problem whatsoever.

00:04:15.170 --> 00:04:19.140
Let's take a look at
list off branches.

00:04:19.240 --> 00:04:24.600
And you'll see the only
branch we have is now Master.
