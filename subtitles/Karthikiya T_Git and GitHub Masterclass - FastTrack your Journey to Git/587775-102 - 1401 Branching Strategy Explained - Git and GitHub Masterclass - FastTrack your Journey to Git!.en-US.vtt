WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.290 --> 00:00:04.335
Let's talk about the
strategy for branching.

00:00:04.335 --> 00:00:06.930
We have the master
or the main branch.

00:00:06.930 --> 00:00:09.570
And generally speaking,
whatever goes inside the master

00:00:09.570 --> 00:00:12.420
or the main branch should
be production ready.

00:00:12.420 --> 00:00:14.040
In other words,
you need to assume

00:00:14.040 --> 00:00:15.900
that water gets
inside the master or

00:00:15.900 --> 00:00:17.880
the main branch
is something that

00:00:17.880 --> 00:00:20.205
your customer will start using.

00:00:20.205 --> 00:00:21.870
In fact, you might as well be

00:00:21.870 --> 00:00:23.730
having some sort of
an automation in

00:00:23.730 --> 00:00:26.010
place where it will constantly

00:00:26.010 --> 00:00:28.485
pick the code from the
master or the main branch,

00:00:28.485 --> 00:00:31.440
create an artifact,
and deploy them on

00:00:31.440 --> 00:00:34.320
the production enrollment
so that your customers

00:00:34.320 --> 00:00:37.845
will now receive all those
new updates or features.

00:00:37.845 --> 00:00:39.720
As an example,
imagine that you're

00:00:39.720 --> 00:00:42.204
developing an operating
system like Windows.

00:00:42.204 --> 00:00:43.790
The moment to
deliver something on

00:00:43.790 --> 00:00:45.545
the master or the main branch,

00:00:45.545 --> 00:00:48.200
your customers might see a
pop-up saying that there

00:00:48.200 --> 00:00:50.915
is a new service pack
available to install.

00:00:50.915 --> 00:00:53.270
They will then install
that service pack to

00:00:53.270 --> 00:00:56.135
get all the latest
features or bug fixes.

00:00:56.135 --> 00:00:58.190
The fact that this is production

00:00:58.190 --> 00:01:00.170
ready code means
that you should be

00:01:00.170 --> 00:01:01.790
careful as to what goes inside

00:01:01.790 --> 00:01:04.235
the master or the main branch.

00:01:04.235 --> 00:01:05.870
What goes inside the master or

00:01:05.870 --> 00:01:08.870
main branch should be
absolutely tested.

00:01:08.870 --> 00:01:10.910
Quality assured code that you

00:01:10.910 --> 00:01:13.819
really cannot risk
having any kind of bugs.

00:01:13.819 --> 00:01:16.369
So obviously for that reasons,

00:01:16.369 --> 00:01:19.340
he cannot make the master
or the main branch to

00:01:19.340 --> 00:01:22.730
be available for developers
to contribute their code.

00:01:22.730 --> 00:01:25.370
If you do so, then every
time somebody merges

00:01:25.370 --> 00:01:28.055
the code in the main branch
for each and every feature,

00:01:28.055 --> 00:01:31.505
your customers are going to
get those updates as well,

00:01:31.505 --> 00:01:34.549
which are of course
not So tested.

00:01:34.549 --> 00:01:37.850
And obviously it's
not a good practice.

00:01:37.850 --> 00:01:40.430
So what we're going to have
is we're going to have

00:01:40.430 --> 00:01:43.505
another branch called
the development branch.

00:01:43.505 --> 00:01:44.780
And this is going to be

00:01:44.780 --> 00:01:46.340
the most active branch where

00:01:46.340 --> 00:01:48.635
all the developers
would contribute to.

00:01:48.635 --> 00:01:51.710
In fact, the moment we
create a GitHub repository,

00:01:51.710 --> 00:01:53.720
we're going to make
development branch as

00:01:53.720 --> 00:01:55.940
the default branch
so that whenever

00:01:55.940 --> 00:01:58.640
somebody clones the code
into their local machine,

00:01:58.640 --> 00:02:00.440
we're going to see the
development branch

00:02:00.440 --> 00:02:02.210
as a default branch.

00:02:02.210 --> 00:02:04.835
In fact, we're not
going to let anybody

00:02:04.835 --> 00:02:07.205
contribute to the master
or the main branch.

00:02:07.205 --> 00:02:08.780
Instead, we would only open

00:02:08.780 --> 00:02:11.705
the development branch
or contribution.

00:02:11.705 --> 00:02:13.235
Only particular set of

00:02:13.235 --> 00:02:15.860
people will have the
permissions on the master or

00:02:15.860 --> 00:02:17.810
the main branch to actually

00:02:17.810 --> 00:02:20.885
merge the quality tested code.

00:02:20.885 --> 00:02:22.490
And even in development,

00:02:22.490 --> 00:02:24.170
every time somebody delivers

00:02:24.170 --> 00:02:26.734
a code are raises
a pull request.

00:02:26.734 --> 00:02:29.480
We might as well be having
some sort of automation here

00:02:29.480 --> 00:02:32.510
as well to sort of check
the quality of the code.

00:02:32.510 --> 00:02:34.430
For example, checking
to see if there

00:02:34.430 --> 00:02:36.290
are any security
vulnerabilities,

00:02:36.290 --> 00:02:38.675
are trying to perform some scan,

00:02:38.675 --> 00:02:41.569
check for any
programmatic errors, etc.

00:02:41.569 --> 00:02:43.505
to make sure that the code still

00:02:43.505 --> 00:02:45.620
adheres to the
quality standards of

00:02:45.620 --> 00:02:47.330
the organization every time

00:02:47.330 --> 00:02:50.299
somebody contributes
to this branch.

00:02:50.299 --> 00:02:52.550
Now imagine that
there are bunch of

00:02:52.550 --> 00:02:54.860
features delivered on
the development branch.

00:02:54.860 --> 00:02:57.005
And it is at this point in time,

00:02:57.005 --> 00:02:58.730
we realized that we can actually

00:02:58.730 --> 00:03:01.385
release all this fetus
to the end-user.

00:03:01.385 --> 00:03:04.159
Now we could actually
merge all those changes

00:03:04.159 --> 00:03:06.845
with all the latest features
on the master branch.

00:03:06.845 --> 00:03:09.260
So do your customers
will start using.

00:03:09.260 --> 00:03:11.870
But we have one more
step to take care.

00:03:11.870 --> 00:03:13.430
We're actually going to have

00:03:13.430 --> 00:03:16.040
yet another branch called
the release branch.

00:03:16.040 --> 00:03:17.705
And that's what
we're going to merge

00:03:17.705 --> 00:03:20.810
all the latest development
from the development branch.

00:03:20.810 --> 00:03:23.600
The release branch
sits in-between

00:03:23.600 --> 00:03:26.735
the master main branch and
the development branch.

00:03:26.735 --> 00:03:29.794
It sort of like a
pre-production enrollment

00:03:29.794 --> 00:03:31.490
where we might actually do

00:03:31.490 --> 00:03:34.160
some automation testing
to make sure that

00:03:34.160 --> 00:03:37.405
all the features are
functioning as expected.

00:03:37.405 --> 00:03:39.725
Once after testing is done,

00:03:39.725 --> 00:03:41.855
everything is
called the assured.

00:03:41.855 --> 00:03:44.210
We will then merge
all the changes from

00:03:44.210 --> 00:03:48.574
Release branch to the
actual master branch.

00:03:48.574 --> 00:03:50.660
And the code would now become

00:03:50.660 --> 00:03:51.920
the official version of

00:03:51.920 --> 00:03:55.115
software that the
customers will use.

00:03:55.115 --> 00:03:58.280
Well, I'm sure that all
this might sound confusing.

00:03:58.280 --> 00:04:00.665
So let me take a
real-time example

00:04:00.665 --> 00:04:03.395
and walk you through
this diagram once again.

00:04:03.395 --> 00:04:07.650
So I do understand better
and we'll do that next.
