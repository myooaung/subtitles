WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.120
In this video, we're going
to take a look at how we can

00:00:03.120 --> 00:00:05.910
rebase to a
particular commit us.

00:00:05.910 --> 00:00:07.080
We don't have to necessarily

00:00:07.080 --> 00:00:09.495
rebase to the tip off a branch.

00:00:09.495 --> 00:00:12.420
We can also do base to
a particular commit.

00:00:12.420 --> 00:00:15.000
Currently or feature
one branch is based out

00:00:15.000 --> 00:00:17.775
of the very first commit
of the master branch,

00:00:17.775 --> 00:00:19.830
but I can rebase it to

00:00:19.830 --> 00:00:22.530
the second commit
off master branch.

00:00:22.530 --> 00:00:24.525
In Visual Studio Code,

00:00:24.525 --> 00:00:26.565
I need to switch to that branch,

00:00:26.565 --> 00:00:28.384
which I want to rebase.

00:00:28.384 --> 00:00:31.390
I choose feature one branch.

00:00:32.290 --> 00:00:35.180
Once I do that, I'm
going to right-click on

00:00:35.180 --> 00:00:37.400
the commit where I would like

00:00:37.400 --> 00:00:40.385
to rebuild the feature
one branch two.

00:00:40.385 --> 00:00:42.980
And then I can choose
this option that says

00:00:42.980 --> 00:00:45.470
rebase current branch
on this commit.

00:00:45.470 --> 00:00:48.050
If you were to do the same from

00:00:48.050 --> 00:00:55.710
the Git Bash here to fast-twitch
to feature one branch.

00:00:57.520 --> 00:01:01.340
And then you're going
to say git rebase.

00:01:01.340 --> 00:01:02.780
And then the hashCode of

00:01:02.780 --> 00:01:05.840
the commit that you'd
like to rebase to.

00:01:05.840 --> 00:01:07.820
In this case, it's going to be

00:01:07.820 --> 00:01:10.625
the second commit
of master branch.

00:01:10.625 --> 00:01:12.440
I'm going to copy the first few

00:01:12.440 --> 00:01:15.335
characters of this
commit, like so.

00:01:15.335 --> 00:01:19.805
Go back to Git Bash,
paste it here.

00:01:19.805 --> 00:01:22.310
And this should
now rebase feature

00:01:22.310 --> 00:01:25.260
one branch to this comment.

00:01:25.300 --> 00:01:28.759
Well, this diagram may
not look so obvious.

00:01:28.759 --> 00:01:30.155
But if you notice,

00:01:30.155 --> 00:01:31.895
we have the feature one branch,

00:01:31.895 --> 00:01:33.650
which is based out
of the second commit

00:01:33.650 --> 00:01:35.090
off master branch.

00:01:35.090 --> 00:01:37.370
These two commits
that belonged to

00:01:37.370 --> 00:01:40.595
the master branch are not part
of the feature one branch.

00:01:40.595 --> 00:01:43.415
As expected, the
graph would look more

00:01:43.415 --> 00:01:46.760
obvious if we make another
comment in master branch.

00:01:46.760 --> 00:01:48.845
So let's do that real quick.

00:01:48.845 --> 00:01:51.930
I'm going to switch
back to master branch.

00:01:55.030 --> 00:01:57.620
I'll just add a line of code,

00:01:57.620 --> 00:02:08.070
product file, saved the file.

00:02:09.370 --> 00:02:13.340
Let's go back here and

00:02:13.340 --> 00:02:17.370
commit these changes in master
branch with the message.

00:02:21.910 --> 00:02:25.205
Now if you go back to the graph,

00:02:25.205 --> 00:02:31.775
we have master branch in blue
and feature branch in red.

00:02:31.775 --> 00:02:34.430
But if you notice
feature branches

00:02:34.430 --> 00:02:36.965
now based off of the second
comment on the master branch,

00:02:36.965 --> 00:02:39.575
because we have
rebased it to that.

00:02:39.575 --> 00:02:41.780
And we do not necessarily
always have to

00:02:41.780 --> 00:02:44.000
rebase to the master branch.

00:02:44.000 --> 00:02:46.430
We can also the best
a particular branch

00:02:46.430 --> 00:02:49.295
to another branch which
is not a master branch.

00:02:49.295 --> 00:02:51.035
Let me show you what I mean.

00:02:51.035 --> 00:02:53.345
First of all, let us
create a new branch.

00:02:53.345 --> 00:02:55.010
But this time, instead of

00:02:55.010 --> 00:02:57.470
creating a branch at the
tip of the master branch,

00:02:57.470 --> 00:03:00.230
I'm going to do that at
this particular commit.

00:03:00.230 --> 00:03:01.895
And yes, we can also create

00:03:01.895 --> 00:03:06.350
new branches that are based
off of a particular commit.

00:03:06.350 --> 00:03:09.110
I can just right-click on

00:03:09.110 --> 00:03:12.665
the commit where I would
like to create branch from.

00:03:12.665 --> 00:03:14.870
And then click on Create Branch,

00:03:14.870 --> 00:03:17.660
enter the name of the
branch, and we're good.

00:03:17.660 --> 00:03:22.800
But let's see how we can
do the same from Git Bash.

00:03:24.790 --> 00:03:26.930
Let me switch to master,

00:03:26.930 --> 00:03:32.465
for instance, git branch,

00:03:32.465 --> 00:03:34.745
and then the name of the branch

00:03:34.745 --> 00:03:36.830
that would like to create.

00:03:36.830 --> 00:03:39.245
Let's call it feature two.

00:03:39.245 --> 00:03:41.150
And then you're going
to specify that come

00:03:41.150 --> 00:03:45.810
up based on what you'd like
to create this branch.

00:03:47.560 --> 00:03:51.140
I'm going to copy the
first few characters off

00:03:51.140 --> 00:03:53.495
this commit object.

00:03:53.495 --> 00:03:56.510
Go back to Git Bash,
paste it in here.

00:03:56.510 --> 00:03:58.535
We'll actually, if
you run this command,

00:03:58.535 --> 00:04:00.410
you don't really have to
switch to master brands.

00:04:00.410 --> 00:04:03.930
You can run it from
any other branch.

00:04:03.930 --> 00:04:06.370
So we now have a branch

00:04:06.370 --> 00:04:10.450
created that is based out
of this particular combat.

00:04:10.450 --> 00:04:12.670
And you can see
that branch here.

00:04:12.670 --> 00:04:15.430
Let's make a commit
in this branch.

00:04:15.430 --> 00:04:19.070
For that, let me switch
to feature two branch.

00:04:21.210 --> 00:04:24.650
Go to maybe a product file.

00:04:25.620 --> 00:04:35.095
Product changes from feature
to whatever. Save the file.

00:04:35.095 --> 00:04:40.340
And let's commit these
changes in feature to branch.

00:04:46.180 --> 00:04:48.800
If you notice, the first line is

00:04:48.800 --> 00:04:51.230
representing the
feature to branch,

00:04:51.230 --> 00:04:56.045
and it is based out of the
third commit of master branch.

00:04:56.045 --> 00:05:02.525
So that's FY21 be hash,

00:05:02.525 --> 00:05:05.810
which we've entered previously.

00:05:05.810 --> 00:05:09.560
And then this red line
represents the master branch,

00:05:09.560 --> 00:05:12.095
green represents the
feature one branch.

00:05:12.095 --> 00:05:14.945
If you want this graph
to look more obvious,

00:05:14.945 --> 00:05:19.650
let us make a commit in
master branch. Once again.

00:05:33.000 --> 00:05:37.730
Let's commit these
changes with the message.

00:05:42.450 --> 00:05:45.190
If you go back to the graph,

00:05:45.190 --> 00:05:48.760
you would see that we
have the master branch,

00:05:48.760 --> 00:05:52.150
feature branch of feature one
branch that is based out of

00:05:52.150 --> 00:05:53.920
second commit and feature two

00:05:53.920 --> 00:05:56.860
branch that is based out
of the third comment.

00:05:56.860 --> 00:05:58.990
Now let's go ahead
and read best feature

00:05:58.990 --> 00:06:02.560
one branch to the tip of
the feature to branch.

00:06:02.560 --> 00:06:06.770
Let's first switch to
feature one branch.

00:06:09.120 --> 00:06:12.690
And then I'm going to
right-click on this commit.

00:06:12.690 --> 00:06:17.010
Rebase current branch
on this committee.

00:06:17.710 --> 00:06:19.895
We have conflict.

00:06:19.895 --> 00:06:22.175
Let us quickly resolve them.

00:06:22.175 --> 00:06:26.100
Accept both the changes
saved the file,

00:06:26.380 --> 00:06:29.550
stays the file.

00:06:30.850 --> 00:06:33.500
And then committed.

00:06:33.500 --> 00:06:36.425
This should open up an editor.

00:06:36.425 --> 00:06:41.570
Just close it. And this

00:06:41.570 --> 00:06:44.420
would finish the
rebase operation.

00:06:44.420 --> 00:06:46.850
Once again, the
graph may not look

00:06:46.850 --> 00:06:49.205
so obviously does make
one more comment.

00:06:49.205 --> 00:06:51.454
In master branch.

00:06:51.454 --> 00:06:55.140
I'm going to switch
back to master branch,

00:06:56.740 --> 00:07:04.860
go-to product dot TXT and just
add one more line of code.

00:07:05.290 --> 00:07:10.770
I'm going to use the same
text as the commit message.

00:07:13.600 --> 00:07:22.130
And let's commit at this time,

00:07:22.130 --> 00:07:24.320
if you notice, the first line

00:07:24.320 --> 00:07:26.615
is representing
the master branch.

00:07:26.615 --> 00:07:29.750
But the point here is we
were able to rebase feature

00:07:29.750 --> 00:07:32.810
one branch at the tip of
the feature to branch.

00:07:32.810 --> 00:07:34.460
So these two commits belonged to

00:07:34.460 --> 00:07:36.035
pitcher one branch which will

00:07:36.035 --> 00:07:40.070
just rebased to
feature two branch.

00:07:40.070 --> 00:07:43.505
Now if you wish, you can
just go ahead and merge

00:07:43.505 --> 00:07:45.470
both these two branches and

00:07:45.470 --> 00:07:48.900
delete one of them
or do whatever.

00:07:49.600 --> 00:07:52.070
If you want to do the same from

00:07:52.070 --> 00:07:54.410
Git Bash than you'd

00:07:54.410 --> 00:07:57.540
just switch back to
feature one branch,

00:07:59.980 --> 00:08:06.305
git rebase, feature two.

00:08:06.305 --> 00:08:08.090
And this should rebase
your feature on

00:08:08.090 --> 00:08:11.509
branch at the tip of
the feature to branch.

00:08:11.509 --> 00:08:13.670
Since we've already done that,

00:08:13.670 --> 00:08:16.260
I don't have to
run this command.

00:08:16.870 --> 00:08:19.715
But I hope you got the point.

00:08:19.715 --> 00:08:22.370
So do go ahead and
experiment with this,

00:08:22.370 --> 00:08:24.485
play with everything
I've just discussed.

00:08:24.485 --> 00:08:26.209
If you do not practice,

00:08:26.209 --> 00:08:28.190
everything would look
countries and ensuing,

00:08:28.190 --> 00:08:33.390
you would start to get
frustrated. See you next.
