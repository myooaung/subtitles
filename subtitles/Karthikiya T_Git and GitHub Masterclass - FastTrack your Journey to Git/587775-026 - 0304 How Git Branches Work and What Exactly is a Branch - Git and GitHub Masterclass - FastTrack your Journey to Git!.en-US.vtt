WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.825
Okay, Let us try and understand
how branches would work.

00:00:03.825 --> 00:00:05.520
But before that, let us

00:00:05.520 --> 00:00:07.905
understand what
exactly is a branch.

00:00:07.905 --> 00:00:10.095
If I were to define a branch,

00:00:10.095 --> 00:00:13.860
a branch would simply be
a reference to a commit,

00:00:13.860 --> 00:00:15.540
or in other words, is

00:00:15.540 --> 00:00:18.345
just a pointer to
a specific commit.

00:00:18.345 --> 00:00:21.150
Now you might be wondering
how come something as

00:00:21.150 --> 00:00:23.850
simple as this can
do so much for us?

00:00:23.850 --> 00:00:24.660
It does.

00:00:24.660 --> 00:00:26.460
Let me explain you what I mean.

00:00:26.460 --> 00:00:27.660
Let's set that up.

00:00:27.660 --> 00:00:31.635
Just initialize the project
using git init command.

00:00:31.635 --> 00:00:35.160
And since branch is a reference
to a particular commit,

00:00:35.160 --> 00:00:38.355
we need at least one
commit to have a branch.

00:00:38.355 --> 00:00:40.930
And that's why you're not
seeing anything right now.

00:00:40.930 --> 00:00:42.739
A branch would be created

00:00:42.739 --> 00:00:45.065
the first time we make a commit.

00:00:45.065 --> 00:00:47.840
And that branch is
the master branch,

00:00:47.840 --> 00:00:50.164
which would be created
by Git itself.

00:00:50.164 --> 00:00:52.085
We don't have to
do that manually.

00:00:52.085 --> 00:00:53.570
You can think of it as

00:00:53.570 --> 00:00:56.585
simply a file with
the name Master,

00:00:56.585 --> 00:00:58.040
whose content is going to be

00:00:58.040 --> 00:01:00.410
the hashCode of a
specific commit.

00:01:00.410 --> 00:01:02.210
And a branch always points to

00:01:02.210 --> 00:01:04.370
the last commit on that branch.

00:01:04.370 --> 00:01:06.650
Currently we just have
one single commit.

00:01:06.650 --> 00:01:10.955
This master branch would
point to that commit.

00:01:10.955 --> 00:01:13.535
Now let's say I
made a new commit,

00:01:13.535 --> 00:01:17.855
then the branch would now
point to that new commit,

00:01:17.855 --> 00:01:19.265
so on and so forth.

00:01:19.265 --> 00:01:21.080
And make a new commit and

00:01:21.080 --> 00:01:23.585
branch would point
to that new commit.

00:01:23.585 --> 00:01:26.525
Now let's say that I have
to walk on feature one.

00:01:26.525 --> 00:01:29.705
We're going to run a command
to create another branch.

00:01:29.705 --> 00:01:31.730
Let's call it
feature one branch.

00:01:31.730 --> 00:01:33.530
The moment you run that command,

00:01:33.530 --> 00:01:35.645
git will create a new branch,

00:01:35.645 --> 00:01:38.510
essentially a new file
with the name feature one,

00:01:38.510 --> 00:01:42.410
whose content would be the
hashCode of a specific commit.

00:01:42.410 --> 00:01:44.240
What would it be?

00:01:44.240 --> 00:01:46.040
Can you make a guess?

00:01:46.040 --> 00:01:49.250
Well, it would be last
commit off the branch

00:01:49.250 --> 00:01:52.190
from where we have created
feature one branch.

00:01:52.190 --> 00:01:54.995
So it would point
to this commit.

00:01:54.995 --> 00:01:58.220
Now let's say that I've made
couple of more commits.

00:01:58.220 --> 00:02:01.925
Where do you think those
comments would go into Mel?

00:02:01.925 --> 00:02:03.755
It would go into master

00:02:03.755 --> 00:02:06.980
because this is the
current active branch.

00:02:06.980 --> 00:02:10.205
So those two comments would
go inside the master branch.

00:02:10.205 --> 00:02:11.885
And as you can guess,

00:02:11.885 --> 00:02:13.670
master would now point to that

00:02:13.670 --> 00:02:16.790
very recent commit in
that particular branch.

00:02:16.790 --> 00:02:18.620
Now let's say that
you wanted to make

00:02:18.620 --> 00:02:21.125
some comments inside
feature branch.

00:02:21.125 --> 00:02:24.875
Well, you have to run a command
to switch to that branch.

00:02:24.875 --> 00:02:27.260
And once you do that, all
the commits you're going to

00:02:27.260 --> 00:02:30.890
make will be tracked inside
the feature one branch.

00:02:30.890 --> 00:02:32.750
If I make a commit now,

00:02:32.750 --> 00:02:35.420
how do you think the
diagram would look like?

00:02:35.420 --> 00:02:37.880
Well, a branch
would always point

00:02:37.880 --> 00:02:40.370
to the last comment
on that branch.

00:02:40.370 --> 00:02:41.210
Feature.

00:02:41.210 --> 00:02:44.210
One branch would now
point to this new commit.

00:02:44.210 --> 00:02:46.520
And this new commit will have

00:02:46.520 --> 00:02:49.100
the master branch
commit as its parent.

00:02:49.100 --> 00:02:51.950
So it is at this
time we will have

00:02:51.950 --> 00:02:55.025
two commits having the
exact same parent.

00:02:55.025 --> 00:02:57.740
Now let's say that I made
a couple of more comments.

00:02:57.740 --> 00:03:01.080
Where do you think those
comments would be tracked?

00:03:01.390 --> 00:03:03.800
Well, since feature one branch

00:03:03.800 --> 00:03:05.585
is the current actor Branch,

00:03:05.585 --> 00:03:07.070
those comments would be going

00:03:07.070 --> 00:03:08.900
inside the feature one branch.

00:03:08.900 --> 00:03:11.300
And of course, feature
one branch would now

00:03:11.300 --> 00:03:15.304
point to the last
commit on that branch.

00:03:15.304 --> 00:03:17.645
Now, my question to you,

00:03:17.645 --> 00:03:19.250
imagine that I've added

00:03:19.250 --> 00:03:22.145
one file in each one
of these comments.

00:03:22.145 --> 00:03:25.550
Now, if I were to look at
the working directory,

00:03:25.550 --> 00:03:27.605
what are all the files
you're going to see?

00:03:27.605 --> 00:03:29.585
Can you guess?

00:03:29.585 --> 00:03:33.470
Well, every time you
switch to a branch,

00:03:33.470 --> 00:03:35.825
git will rewrite the
working directory

00:03:35.825 --> 00:03:37.700
to look like what it looked

00:03:37.700 --> 00:03:39.770
like when you made
the most recent

00:03:39.770 --> 00:03:42.890
commit on that branch that
you've just switched to.

00:03:42.890 --> 00:03:45.290
So in this case, the
current actor branches

00:03:45.290 --> 00:03:46.640
feature one batch.

00:03:46.640 --> 00:03:49.310
So you're going to see
all these files a,

00:03:49.310 --> 00:03:50.960
B, C, and F, G,

00:03:50.960 --> 00:03:54.215
H. You're not going
to see files D and

00:03:54.215 --> 00:03:58.580
E. And now if you were to
switch to master branch,

00:03:58.580 --> 00:04:00.515
you're going to see a, B, C, D,

00:04:00.515 --> 00:04:04.085
E files, but not F, G, H Files.

00:04:04.085 --> 00:04:05.360
Hope it makes sense.

00:04:05.360 --> 00:04:07.410
I'll see you in next one.
