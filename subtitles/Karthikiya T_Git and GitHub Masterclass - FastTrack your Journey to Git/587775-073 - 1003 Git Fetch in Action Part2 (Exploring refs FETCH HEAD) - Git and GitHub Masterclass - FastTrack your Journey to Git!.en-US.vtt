WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.250
Okay, I mentioned that
git-fetch would download

00:00:02.250 --> 00:00:05.009
the objects and even upgrade
the tracking branches.

00:00:05.009 --> 00:00:08.520
Let us say if I'm indeed
correct for that,

00:00:08.520 --> 00:00:10.290
let me go to GitHub and copy

00:00:10.290 --> 00:00:12.000
the hashCode of
the latest commit

00:00:12.000 --> 00:00:14.130
by clicking on this icon.

00:00:14.130 --> 00:00:18.810
And I'm currently in the new
feature branch and GitHub.

00:00:18.810 --> 00:00:21.360
Let me go to Git Bash and let

00:00:21.360 --> 00:00:23.550
me try to pretty
print this object,

00:00:23.550 --> 00:00:27.510
get kept file hyphen

00:00:27.510 --> 00:00:28.950
P. And then I'm going to

00:00:28.950 --> 00:00:32.630
paste hashCode that
I've just copied.

00:00:32.630 --> 00:00:36.575
So we're able to see the
contents of the commit object,

00:00:36.575 --> 00:00:41.660
which means git-fetch has
indeed downloaded this object.

00:00:41.660 --> 00:00:45.470
If you navigate through
this parent tree

00:00:45.470 --> 00:00:47.195
of this comet object,

00:00:47.195 --> 00:00:48.620
you should be able to locate

00:00:48.620 --> 00:00:52.260
the blob objects and its
corresponding content as well.

00:00:52.660 --> 00:00:56.000
Now let us see if cracking
branches are updated.

00:00:56.000 --> 00:00:59.840
I mentioned that the tracking
branches are actually

00:00:59.840 --> 00:01:05.520
preserved in the backdrops
file. Let's open it up.

00:01:06.430 --> 00:01:08.585
Here. If you notice,

00:01:08.585 --> 00:01:13.760
the new feature branch is
still pointing the old commit.

00:01:13.760 --> 00:01:15.410
Now am I wrong in saying that

00:01:15.410 --> 00:01:17.465
tracking branches
would be updated?

00:01:17.465 --> 00:01:20.390
The answer is no.
Let us see what's

00:01:20.390 --> 00:01:23.510
there in this
particular directory.

00:01:23.510 --> 00:01:32.659
Remote origin and new
feature refs, remote origin.

00:01:32.659 --> 00:01:36.320
And let me open up the file
with the name new feature.

00:01:36.320 --> 00:01:40.640
And here you see the hashCode
of the latest commit.

00:01:40.640 --> 00:01:42.860
Now why is this
hash code available

00:01:42.860 --> 00:01:44.540
here but not available in

00:01:44.540 --> 00:01:47.450
the refs file will typically get

00:01:47.450 --> 00:01:50.975
tend to store references
in directory structure.

00:01:50.975 --> 00:01:54.110
It doesn't necessarily
always store in packed file.

00:01:54.110 --> 00:01:57.440
Get to use this packed file
for efficiency's sake.

00:01:57.440 --> 00:02:00.110
But it doesn't guarantee
how he cannot even

00:02:00.110 --> 00:02:03.095
predict where it will
store the references.

00:02:03.095 --> 00:02:04.850
It could be in the packed file,

00:02:04.850 --> 00:02:08.240
or it could also be in the
form of a data structure.

00:02:08.240 --> 00:02:10.925
If it stores the differences
in a packed file,

00:02:10.925 --> 00:02:12.170
it doesn't have to create

00:02:12.170 --> 00:02:15.725
the directory structure just
to store the reference.

00:02:15.725 --> 00:02:17.585
It's all internal to get up.

00:02:17.585 --> 00:02:18.890
And this is one of the examples

00:02:18.890 --> 00:02:20.210
as to why we shouldn't be too

00:02:20.210 --> 00:02:23.345
much worried about how
good does things for us.

00:02:23.345 --> 00:02:27.630
We just have to run the commands
and trust and get on it.

00:02:33.550 --> 00:02:36.725
You might have also
noticed this file,

00:02:36.725 --> 00:02:38.810
fetch head, which gets

00:02:38.810 --> 00:02:41.030
created when you do
the fetch operation.

00:02:41.030 --> 00:02:43.310
Let us see the contents of it.

00:02:43.310 --> 00:02:45.470
Now this is again
that you shouldn't be

00:02:45.470 --> 00:02:48.185
too much worried about.

00:02:48.185 --> 00:02:50.885
But if you notice we
have three lines,

00:02:50.885 --> 00:02:54.810
each corresponding to
individual branch,

00:02:56.080 --> 00:02:58.820
except the branch from

00:02:58.820 --> 00:03:01.310
where we had drawn the
git-fetch command.

00:03:01.310 --> 00:03:05.895
All of the branches per
marked as not for much.

00:03:05.895 --> 00:03:08.080
But again, let us not try to

00:03:08.080 --> 00:03:10.210
learn everything because
you might end up

00:03:10.210 --> 00:03:12.940
confusing yourself and might
end up not being able to

00:03:12.940 --> 00:03:16.405
understand the real concepts
which are necessary.

00:03:16.405 --> 00:03:19.525
But this file typically
be used by Gibbs.

00:03:19.525 --> 00:03:23.920
When we run certain commands
like git pull for instance,

00:03:23.920 --> 00:03:27.230
which we're going to talk
about in upcoming lectures.

00:03:28.440 --> 00:03:33.205
For example. If you do git log,

00:03:33.205 --> 00:03:36.520
you're not able to see the
tracking branch or two

00:03:36.520 --> 00:03:39.730
which come at the tracking
branches pointing to.

00:03:39.730 --> 00:03:41.740
But if you say git log and

00:03:41.740 --> 00:03:45.805
then fetch underscore
head for instance.

00:03:45.805 --> 00:03:50.930
Then it will also
list the comet object

00:03:50.930 --> 00:03:56.585
where the tracking branches
pointing to like so.

00:03:56.585 --> 00:03:59.600
So similarly, we have
certain commands which would

00:03:59.600 --> 00:04:02.960
internally use the
fetch head file.

00:04:02.960 --> 00:04:05.310
I'll see you next.
