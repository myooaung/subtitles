WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.680 --> 00:00:03.750
Let us say git ignore an action.

00:00:03.750 --> 00:00:05.430
What we have here is our good

00:00:05.430 --> 00:00:07.080
old my app application
with bunch

00:00:07.080 --> 00:00:10.515
of files and maybe with
bunch of commits as well.

00:00:10.515 --> 00:00:11.910
Forget about all the commits we

00:00:11.910 --> 00:00:14.730
made and just don't care
about the files in it.

00:00:14.730 --> 00:00:17.340
Let's just stay
focused on gitignore.

00:00:17.340 --> 00:00:19.830
Now imagine that I have
downloaded this project from

00:00:19.830 --> 00:00:21.600
the centralized repository and

00:00:21.600 --> 00:00:23.505
even launch the application.

00:00:23.505 --> 00:00:26.820
When I do that, I might end
up seeing that in log files

00:00:26.820 --> 00:00:30.420
getting generated automatically
by the application.

00:00:30.420 --> 00:00:33.060
Now since we do not have
it running application,

00:00:33.060 --> 00:00:34.889
let us simulate the behavior

00:00:34.889 --> 00:00:38.235
by manually creating
the log files.

00:00:38.235 --> 00:00:47.850
Let me create maybe
either dot log file.

00:00:48.310 --> 00:00:50.660
Here it has deemed
that this file is

00:00:50.660 --> 00:00:54.275
actually how to create
it by the application.

00:00:54.275 --> 00:00:56.150
May also create a folder with

00:00:56.150 --> 00:01:00.950
the name info where we
might have in for logs.

00:01:00.950 --> 00:01:03.750
So let me create a
file with the name

00:01:03.940 --> 00:01:10.010
in for dot log. Like so.

00:01:10.010 --> 00:01:13.220
Now if I launch Git Bash,

00:01:13.220 --> 00:01:16.760
I can actually
stage these files.

00:01:16.760 --> 00:01:20.615
Git add dot log.

00:01:20.615 --> 00:01:25.715
As you can see, I'm able
to stage this file,

00:01:25.715 --> 00:01:29.435
which is not something
that I want to do.

00:01:29.435 --> 00:01:32.690
So let me quickly
onstage this file.

00:01:32.690 --> 00:01:35.060
Now how do I prevent myself from

00:01:35.060 --> 00:01:38.820
accidentally staging
these log files?

00:01:39.220 --> 00:01:42.230
Well, one solution is you go

00:01:42.230 --> 00:01:45.095
inside the dot git folder info.

00:01:45.095 --> 00:01:48.155
And then we have
this exclude file

00:01:48.155 --> 00:01:50.884
where you can
specify the patterns

00:01:50.884 --> 00:01:53.315
that you want it to ignore.

00:01:53.315 --> 00:01:57.050
So we could specify a
pattern star dot log,

00:01:57.050 --> 00:02:01.490
and that way we cannot
stage them or commit them.

00:02:01.490 --> 00:02:05.585
But this time we don't
want to use this file.

00:02:05.585 --> 00:02:11.390
Can you guess why?
Because these log files

00:02:11.390 --> 00:02:14.000
is not something that is
local to my enrollment.

00:02:14.000 --> 00:02:16.865
It is applicable for all the
team members in the team.

00:02:16.865 --> 00:02:18.560
Anybody in my team who

00:02:18.560 --> 00:02:20.990
downloads this projects
and runs the application,

00:02:20.990 --> 00:02:23.360
there'll be able to
see these log files.

00:02:23.360 --> 00:02:25.790
I don't want them
either to be able to

00:02:25.790 --> 00:02:28.610
commit these files and
centralized repository.

00:02:28.610 --> 00:02:32.820
Well, that's where gitignore
comes into picture.

00:02:34.240 --> 00:02:42.395
So let me create dot
gitignore file, dot git.

00:02:42.395 --> 00:02:47.240
Ignore. Make sure that
you get the name correct.

00:02:47.240 --> 00:02:53.735
Let's open that file and add
this pattern star dot log.

00:02:53.735 --> 00:02:58.460
So this should ignore all the
log files in our project.

00:02:58.460 --> 00:03:04.770
Now if I go back to Git Bash
and try to stage this file,

00:03:05.020 --> 00:03:07.490
it actually going
to see an error

00:03:07.490 --> 00:03:08.900
that says the
following parts are

00:03:08.900 --> 00:03:12.335
ignored by one of your
dot ignore files.

00:03:12.335 --> 00:03:14.960
If I still want to
add this file anyway,

00:03:14.960 --> 00:03:16.640
then I can use
this option hyphen

00:03:16.640 --> 00:03:20.060
F to four-stage this file,

00:03:20.060 --> 00:03:22.985
which was meant to be ignored.

00:03:22.985 --> 00:03:24.800
But you do not want to do this

00:03:24.800 --> 00:03:27.180
unless you know
what you're doing.

00:03:27.280 --> 00:03:30.110
We cannot even stage for

00:03:30.110 --> 00:03:34.410
dot log that's inside
the info folder.

00:03:36.460 --> 00:03:39.290
We get the same error.

00:03:39.290 --> 00:03:41.360
And if you have any
files that you want to

00:03:41.360 --> 00:03:43.025
ignore and you want

00:03:43.025 --> 00:03:45.050
all those patterns
to be applicable

00:03:45.050 --> 00:03:47.975
across all the repositories
in your local machine.

00:03:47.975 --> 00:03:51.890
Then you want to
specify global exclude

00:03:51.890 --> 00:03:57.305
file with the command
git config global.

00:03:57.305 --> 00:04:02.525
And then you're going to
say core exclude file.

00:04:02.525 --> 00:04:05.675
And here you would
provide the path,

00:04:05.675 --> 00:04:08.375
the dot ignore file.

00:04:08.375 --> 00:04:10.865
Once you run this command,

00:04:10.865 --> 00:04:13.955
global Git config file
would be updated.

00:04:13.955 --> 00:04:18.169
That is inside your
user's directory.

00:04:18.169 --> 00:04:21.540
I'm actually take you there.

00:04:25.480 --> 00:04:29.210
So currently just has
the global credentials

00:04:29.210 --> 00:04:30.590
that I want to use for

00:04:30.590 --> 00:04:33.064
all the repositories in
my local enrollment.

00:04:33.064 --> 00:04:35.614
But once after you
run this command,

00:04:35.614 --> 00:04:39.350
you're going to see this
particular property

00:04:39.350 --> 00:04:41.850
getting populated in this file.

00:04:42.610 --> 00:04:46.400
Whichever they ignore file
it that it is pointing to,

00:04:46.400 --> 00:04:48.860
its patterns would be applicable

00:04:48.860 --> 00:04:52.650
for all the repositories
in your local machine.

00:04:53.110 --> 00:04:56.914
Generally speaking, you want
to specify the patterns

00:04:56.914 --> 00:05:00.440
that are relevant to the
operating system files like dot,

00:05:00.440 --> 00:05:04.535
DS, store, et, and not
project-related files.

00:05:04.535 --> 00:05:06.155
Since we don't have anything,

00:05:06.155 --> 00:05:09.240
I just want to not run it.

00:05:10.840 --> 00:05:15.215
Once after you create or update
the dot Git ignore file,

00:05:15.215 --> 00:05:17.705
you want to commit those changes

00:05:17.705 --> 00:05:19.850
and even push your changes to

00:05:19.850 --> 00:05:22.325
the centralized
repository so that

00:05:22.325 --> 00:05:23.960
all those patterns
would be applicable

00:05:23.960 --> 00:05:26.465
for all the people in your team.

00:05:26.465 --> 00:05:28.130
We're going to
talk about how you

00:05:28.130 --> 00:05:29.420
can push your local commits to

00:05:29.420 --> 00:05:32.930
the remote repository
in later chapters.

00:05:32.930 --> 00:05:34.880
But for now I can go ahead

00:05:34.880 --> 00:05:38.420
and come in the gitignore file.

00:05:38.420 --> 00:05:43.490
Git add, git,

00:05:43.490 --> 00:05:50.340
ignore status,

00:05:51.910 --> 00:06:02.480
git commit, hyphen
them, whatever.

00:06:02.480 --> 00:06:10.410
And we're able to commit this
change. I'll see you next.
