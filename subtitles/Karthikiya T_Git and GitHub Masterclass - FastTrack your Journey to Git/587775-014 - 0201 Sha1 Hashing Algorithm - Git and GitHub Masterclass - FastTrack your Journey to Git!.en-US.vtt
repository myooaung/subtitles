WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.390
Let's forget about it
for a second and let us

00:00:03.390 --> 00:00:06.509
try to understand what is
Chavan hashing algorithm.

00:00:06.509 --> 00:00:08.760
The siobhan hashing algorithm,

00:00:08.760 --> 00:00:11.190
or sometimes referred
as hash function,

00:00:11.190 --> 00:00:14.310
would take any arbitrary
amount of data as input.

00:00:14.310 --> 00:00:15.630
And it's going to give us a

00:00:15.630 --> 00:00:18.780
40 character hashCode
has an output.

00:00:18.780 --> 00:00:21.255
The size of the input
doesn't matter.

00:00:21.255 --> 00:00:23.445
It could be as
small as one byte,

00:00:23.445 --> 00:00:26.895
or it could be as large
as one GB or even one TB.

00:00:26.895 --> 00:00:29.070
But the resulting output
is always going to

00:00:29.070 --> 00:00:31.515
be a 40 character hash code.

00:00:31.515 --> 00:00:34.845
Even if the input is just
one single alphabet,

00:00:34.845 --> 00:00:36.300
you're still going to see a 40

00:00:36.300 --> 00:00:38.445
character hashCode as output.

00:00:38.445 --> 00:00:42.700
Here are some of the
characteristics of hash function.

00:00:42.700 --> 00:00:46.055
Same input would result
in same hashCode,

00:00:46.055 --> 00:00:48.005
no matter how many
times you execute,

00:00:48.005 --> 00:00:50.630
it may provide the same
input that's going to

00:00:50.630 --> 00:00:53.855
result in the exact
same hashCode.

00:00:53.855 --> 00:00:57.410
You cannot generate data
from a given hash code.

00:00:57.410 --> 00:01:01.010
Although it is possible to
convert data to a hash code,

00:01:01.010 --> 00:01:02.930
it's not possible the other way.

00:01:02.930 --> 00:01:04.940
I mean, if I give
you a hashCode,

00:01:04.940 --> 00:01:07.610
it cannot generate
data out of it.

00:01:07.610 --> 00:01:10.235
It's really difficult to find

00:01:10.235 --> 00:01:13.054
another input which
results in same hashCode,

00:01:13.054 --> 00:01:15.004
but it's not impossible.

00:01:15.004 --> 00:01:17.360
You could have
another input that

00:01:17.360 --> 00:01:19.534
might result in
exact same hashCode.

00:01:19.534 --> 00:01:21.335
But the probability
of finding it

00:01:21.335 --> 00:01:24.575
so that you don't even
have to worry about it.

00:01:24.575 --> 00:01:27.950
Here's one other use case
where hashCode might be

00:01:27.950 --> 00:01:29.660
used whenever we use

00:01:29.660 --> 00:01:32.210
the registers for your website
by entering the username,

00:01:32.210 --> 00:01:33.995
password, and other details.

00:01:33.995 --> 00:01:36.230
Instead of storing
the password and

00:01:36.230 --> 00:01:38.659
draw text format
inside the database,

00:01:38.659 --> 00:01:41.360
we're going to store
the hash code of

00:01:41.360 --> 00:01:45.290
that password so that the next
term user tries to login.

00:01:45.290 --> 00:01:47.990
We're going to again run
the hashing algorithm

00:01:47.990 --> 00:01:49.955
on the password
that they enters.

00:01:49.955 --> 00:01:52.310
And then we're going to see
if the resulting output

00:01:52.310 --> 00:01:54.919
would match with the
one in the database.

00:01:54.919 --> 00:01:56.390
If they both match,

00:01:56.390 --> 00:01:58.175
the user would be authenticated

00:01:58.175 --> 00:02:00.380
and would be granted access.

00:02:00.380 --> 00:02:01.850
The benefit of storing

00:02:01.850 --> 00:02:04.490
hash code instead of
storing the raw password in

00:02:04.490 --> 00:02:08.900
textual format is that if a
hacker hacks your system,

00:02:08.900 --> 00:02:11.165
they get access to hash codes,

00:02:11.165 --> 00:02:13.265
but not the actual passwords.

00:02:13.265 --> 00:02:15.830
They cannot do anything
using the hashCode.

00:02:15.830 --> 00:02:17.540
For example, they
cannot login using

00:02:17.540 --> 00:02:20.555
the hashCode on
behalf of a user.

00:02:20.555 --> 00:02:24.410
All the hashing algorithm is
used as a security measure.

00:02:24.410 --> 00:02:27.125
You get to use a set for
a different purpose.

00:02:27.125 --> 00:02:31.010
And it is to uniquely identify
various objects and get.

00:02:31.010 --> 00:02:33.770
And we're going to talk
about it in next lecture.

00:02:33.770 --> 00:02:36.410
Now let's try to
generate hash code

00:02:36.410 --> 00:02:39.875
from Git Bash using
the git commands.

00:02:39.875 --> 00:02:43.595
The command to run
is good hash object,

00:02:43.595 --> 00:02:45.710
but before that, let us use

00:02:45.710 --> 00:02:49.290
the echo command with some text.

00:02:49.710 --> 00:02:53.830
I'm going to use pipe
character and then say get

00:02:53.830 --> 00:03:00.490
hash object standard input.

00:03:00.490 --> 00:03:02.530
By using the pipe
character we're

00:03:02.530 --> 00:03:04.630
telling whatever
is the output of

00:03:04.630 --> 00:03:09.429
this command would be the
input of this command.

00:03:09.429 --> 00:03:11.140
Essentially, we
are trying to get

00:03:11.140 --> 00:03:14.245
the hashCode of this
particular text.

00:03:14.245 --> 00:03:16.690
Let's hit Enter.

00:03:16.690 --> 00:03:19.885
We got a hashCode for that text.

00:03:19.885 --> 00:03:24.170
And no matter how many times
I execute the same command,

00:03:24.960 --> 00:03:29.605
we're going to see the
exact same hashCode.

00:03:29.605 --> 00:03:32.580
But if I make even a
small little change,

00:03:32.580 --> 00:03:34.325
the resulting hash code would be

00:03:34.325 --> 00:03:37.550
entirely different from
what we've just seen.

00:03:37.550 --> 00:03:39.590
For example, let's
say I just added

00:03:39.590 --> 00:03:42.545
one character and hit Enter.

00:03:42.545 --> 00:03:45.260
You'll see that
these two hash codes

00:03:45.260 --> 00:03:47.870
differ significantly.

00:03:47.870 --> 00:03:49.790
You're going to understand more

00:03:49.790 --> 00:03:53.010
about hashCode,
incoming lectures.
