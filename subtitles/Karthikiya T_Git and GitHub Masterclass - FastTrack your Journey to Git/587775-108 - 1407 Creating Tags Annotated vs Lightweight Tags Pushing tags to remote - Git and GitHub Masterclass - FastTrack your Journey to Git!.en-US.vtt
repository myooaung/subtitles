WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.060
Okay, let us see how
we can create tags.

00:00:03.060 --> 00:00:05.220
We can add the create
tags on GitHub,

00:00:05.220 --> 00:00:06.420
or we can do it from

00:00:06.420 --> 00:00:09.645
command line from our
local Git as well.

00:00:09.645 --> 00:00:11.520
We're going to see
both the ways.

00:00:11.520 --> 00:00:13.350
First, let us explore
how we can do

00:00:13.350 --> 00:00:16.800
that locally from Git Bash.

00:00:16.800 --> 00:00:19.640
By the way, in
order to save time,

00:00:19.640 --> 00:00:21.350
I've already added Mr. Luke as

00:00:21.350 --> 00:00:23.420
one of the collaborators
of this project.

00:00:23.420 --> 00:00:25.880
And here is Luke's account.

00:00:25.880 --> 00:00:28.220
The first thing that
Luke is going to

00:00:28.220 --> 00:00:30.140
do is that he's
actually going to

00:00:30.140 --> 00:00:34.325
clone this project in
his local machine.

00:00:34.325 --> 00:00:37.324
So assume that this
is Luke's computer.

00:00:37.324 --> 00:00:40.250
I'm going to launch
Git Bash here.

00:00:40.250 --> 00:00:43.370
And let us quickly
clone the project.

00:00:43.370 --> 00:00:49.589
Git clone. I'm going
to paste the URI.

00:00:51.910 --> 00:00:56.375
So let's go inside that project.

00:00:56.375 --> 00:01:01.535
Clear the screen. So
let us now create tags.

00:01:01.535 --> 00:01:03.845
We can add the create
a lightweight tag

00:01:03.845 --> 00:01:05.450
or an annotated tag.

00:01:05.450 --> 00:01:08.555
So basically there are two
types of tags we can create.

00:01:08.555 --> 00:01:12.005
When it comes to lightweight
tag is just a name

00:01:12.005 --> 00:01:15.905
or an identifier and appointed
to a particular commit.

00:01:15.905 --> 00:01:18.500
Whereas when it comes
to annotated tag,

00:01:18.500 --> 00:01:21.770
in addition to a name and
a pointed to accommodate.

00:01:21.770 --> 00:01:24.065
It will also have some metadata,

00:01:24.065 --> 00:01:26.255
like the name of the tagger,

00:01:26.255 --> 00:01:29.000
email address, date, et cetera.

00:01:29.000 --> 00:01:30.590
If you'd like to store all the

00:01:30.590 --> 00:01:32.990
metadata along with the tag,

00:01:32.990 --> 00:01:34.430
we would better off create

00:01:34.430 --> 00:01:37.565
an annotated tag and
not a lightweight tank.

00:01:37.565 --> 00:01:39.125
And in most cases,

00:01:39.125 --> 00:01:41.120
it's always relevant to create

00:01:41.120 --> 00:01:43.880
an annotated tag or
a lightweight tank.

00:01:43.880 --> 00:01:45.320
For obvious reasons.

00:01:45.320 --> 00:01:46.790
We will know who has created

00:01:46.790 --> 00:01:48.740
it when they have created it.

00:01:48.740 --> 00:01:51.185
And we would even know
the email address

00:01:51.185 --> 00:01:54.275
of the person who have
created that tank.

00:01:54.275 --> 00:01:58.130
So let us first see how we
can create annotated tag.

00:01:58.130 --> 00:02:00.335
Basically, we haven't created

00:02:00.335 --> 00:02:03.410
tag for the first version
of our application.

00:02:03.410 --> 00:02:06.470
So let us first which
to master branch.

00:02:06.470 --> 00:02:13.610
If I do git branch, iPhone, nay.

00:02:13.610 --> 00:02:16.685
You see that we have
all these branches

00:02:16.685 --> 00:02:19.084
are remote tracking branches,

00:02:19.084 --> 00:02:22.910
but we do not have a local
branch for the master branch.

00:02:22.910 --> 00:02:24.905
So in order to get that,

00:02:24.905 --> 00:02:32.549
let us do git checkout or
good switch to master branch.

00:02:34.930 --> 00:02:38.990
Now let's take a look at list of

00:02:38.990 --> 00:02:44.180
commits that are in
the master branch.

00:02:44.180 --> 00:02:45.980
So essentially this is

00:02:45.980 --> 00:02:48.619
where we should
ideally be creating

00:02:48.619 --> 00:02:51.515
a tag which represents

00:02:51.515 --> 00:02:54.470
the very first version
of our application.

00:02:54.470 --> 00:02:59.120
So this is right before
the hot fix we had given.

00:02:59.120 --> 00:03:02.840
So how are we going to
create a tag for one of

00:03:02.840 --> 00:03:07.050
the previous comments?
Let's take a look.

00:03:07.120 --> 00:03:11.750
So the command to create
the tag is git tag,

00:03:11.750 --> 00:03:15.020
hyphen a four annotated tag.

00:03:15.020 --> 00:03:16.775
And we're going to specify

00:03:16.775 --> 00:03:20.030
a unique identifier or
a name for this tag.

00:03:20.030 --> 00:03:22.114
And at the standard practice,

00:03:22.114 --> 00:03:25.625
we want to give the semantic
version of our released.

00:03:25.625 --> 00:03:26.930
So this is going to be

00:03:26.930 --> 00:03:30.920
all very first version
of our application.

00:03:30.920 --> 00:03:36.380
And we would now specify
the hashCode of the torch.

00:03:36.380 --> 00:03:39.125
We want this tag to point to.

00:03:39.125 --> 00:03:41.390
This is as though
we had gone back in

00:03:41.390 --> 00:03:44.150
time and created a tag.

00:03:44.150 --> 00:03:47.030
At this particular commit.

00:03:47.030 --> 00:03:50.045
I'm going to paste
this hash code.

00:03:50.045 --> 00:03:53.240
In addition to that, we're
also going to provide

00:03:53.240 --> 00:03:57.920
a meaningful message describing
what this tag is about.

00:03:57.920 --> 00:04:04.820
Some description about it
seemed to have messed it up.

00:04:04.820 --> 00:04:08.525
Let's retype the
command. Git tag.

00:04:08.525 --> 00:04:14.060
Hyphen a. Wee one.org.au

00:04:14.060 --> 00:04:20.340
specified the hashCode hyphen m.

00:04:21.790 --> 00:04:25.625
Sum description.

00:04:25.625 --> 00:04:29.135
If you don't provide the
message with hyphen m option,

00:04:29.135 --> 00:04:31.520
you're going to see a
default text editor getting

00:04:31.520 --> 00:04:34.340
opened up for you to
enter some message.

00:04:34.340 --> 00:04:36.185
If you provide this
option though,

00:04:36.185 --> 00:04:38.495
note etc, would be opened.

00:04:38.495 --> 00:04:42.800
So this should
create a tag for us.

00:04:42.800 --> 00:04:44.870
If you run the command git tag,

00:04:44.870 --> 00:04:46.190
you're going to see
all the list of

00:04:46.190 --> 00:04:48.649
tags that are available.

00:04:48.649 --> 00:04:51.080
So if somebody were
to clone the project,

00:04:51.080 --> 00:04:53.540
they're going to see
all these tags as well.

00:04:53.540 --> 00:04:56.330
Now let's go ahead and
create a lightweight tag.

00:04:56.330 --> 00:04:59.180
And the command for that is
pretty straight forward.

00:04:59.180 --> 00:05:06.695
Get tag and an identifier
or a name for this tag.

00:05:06.695 --> 00:05:12.395
So this time I'm going to
say we one dot, dot one.

00:05:12.395 --> 00:05:15.785
Because by default, when
you try to create a tag,

00:05:15.785 --> 00:05:17.300
it would point to

00:05:17.300 --> 00:05:20.735
the same commit that the
head is pointing to.

00:05:20.735 --> 00:05:22.550
So currently had
this pointing to

00:05:22.550 --> 00:05:24.665
the latest commit
off master branch.

00:05:24.665 --> 00:05:26.450
And so this tag,

00:05:26.450 --> 00:05:28.160
which is lightweight tag,

00:05:28.160 --> 00:05:30.905
because we haven't provided
the hyphenate option,

00:05:30.905 --> 00:05:32.810
is also going to point to

00:05:32.810 --> 00:05:35.330
the desk commit
off master branch,

00:05:35.330 --> 00:05:37.910
which includes the bug fix.

00:05:37.910 --> 00:05:40.955
And if you remember as
per semantic versioning,

00:05:40.955 --> 00:05:43.490
we had incremented the value of

00:05:43.490 --> 00:05:47.795
the patch version by
one. Let's hit Enter.

00:05:47.795 --> 00:05:52.595
And we have just created
yet another tag.

00:05:52.595 --> 00:05:54.380
One is annotated tag,

00:05:54.380 --> 00:05:56.585
and the other is
lightweight tag,

00:05:56.585 --> 00:05:59.825
which doesn't have any kind
of metadata whatsoever.

00:05:59.825 --> 00:06:02.465
Now how do we publish
all these tags

00:06:02.465 --> 00:06:04.625
to the remote repository?

00:06:04.625 --> 00:06:06.680
Well, we're just simply

00:06:06.680 --> 00:06:08.840
going to use standard
push command.

00:06:08.840 --> 00:06:10.400
But we have to specify

00:06:10.400 --> 00:06:13.940
explicitly that we also
want to push tags.

00:06:13.940 --> 00:06:16.865
By default, push command
will not push the tags.

00:06:16.865 --> 00:06:20.570
So I'm going to let
it know explicitly.

00:06:20.570 --> 00:06:24.590
So we're going to
say git push origin

00:06:24.590 --> 00:06:28.025
is the remote where we want
to push all this tax too.

00:06:28.025 --> 00:06:31.910
We can specify what
tag we want to

00:06:31.910 --> 00:06:37.670
push by specifying its name,

00:06:37.670 --> 00:06:42.030
the identifier, like so are.

00:06:42.700 --> 00:06:45.650
We can also say

00:06:45.650 --> 00:06:53.645
tags to push all the tags
to the remote repository.

00:06:53.645 --> 00:06:58.429
Since Luke has permission
for that repository already,

00:06:58.429 --> 00:07:03.650
were able to push all those
tags onto this depository.

00:07:03.650 --> 00:07:05.045
And you can see them here.

00:07:05.045 --> 00:07:06.905
If you click on these tags,

00:07:06.905 --> 00:07:09.320
you're going to see that we have

00:07:09.320 --> 00:07:13.140
these two tanks
will continue next.
