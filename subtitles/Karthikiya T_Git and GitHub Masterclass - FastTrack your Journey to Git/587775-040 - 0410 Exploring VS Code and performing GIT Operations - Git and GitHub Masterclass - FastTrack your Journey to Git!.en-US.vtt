WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.120
Okay, Before we actually
take a look at how to create

00:00:03.120 --> 00:00:06.330
merge conflicts and resolve
them in Visual Studio code.

00:00:06.330 --> 00:00:07.710
Let me just walk you through the

00:00:07.710 --> 00:00:09.510
current state of our project.

00:00:09.510 --> 00:00:11.430
If you remember, we had merged

00:00:11.430 --> 00:00:14.610
our changes from feature
one to master branch.

00:00:14.610 --> 00:00:17.265
These are all the list
of files in our project.

00:00:17.265 --> 00:00:20.280
Can just click on them to
take a look at their content.

00:00:20.280 --> 00:00:23.220
And if you go to this
section source control,

00:00:23.220 --> 00:00:26.790
you can also go there by
pressing Control Shift G.

00:00:26.790 --> 00:00:30.555
And since we had installed
this extension good graph,

00:00:30.555 --> 00:00:33.940
you should be able to
look at this icon.

00:00:36.220 --> 00:00:38.780
Here you can see
all the historical

00:00:38.780 --> 00:00:40.909
changes we had introduced.

00:00:40.909 --> 00:00:43.489
You can also see the
graphical representation

00:00:43.489 --> 00:00:45.800
of all the list of
commits we had done,

00:00:45.800 --> 00:00:47.765
the branches we had created,

00:00:47.765 --> 00:00:51.155
and even the merging that
we had performed earlier.

00:00:51.155 --> 00:00:53.945
This is the first commit
we made in master branch,

00:00:53.945 --> 00:00:55.595
and then we create
a feature branch.

00:00:55.595 --> 00:00:56.990
We made a comment there.

00:00:56.990 --> 00:00:58.460
And then we made a comment and

00:00:58.460 --> 00:01:00.350
master branch and eventually

00:01:00.350 --> 00:01:04.010
feature branches merged
inside the master branch.

00:01:04.010 --> 00:01:06.780
To create the merge command.

00:01:06.940 --> 00:01:09.650
He didn't click one of
these commits and take

00:01:09.650 --> 00:01:11.870
a look at the changes

00:01:11.870 --> 00:01:14.240
introduced in that
particular commit by

00:01:14.240 --> 00:01:17.390
clicking on a particular file.

00:01:17.390 --> 00:01:20.759
And you can see the changes.

00:01:20.830 --> 00:01:24.560
Now let's go ahead and
create conflicts which we,

00:01:24.560 --> 00:01:26.970
humans are naturally good at.

00:01:27.640 --> 00:01:30.455
Let's go back to Explorer.

00:01:30.455 --> 00:01:32.150
But before that,
let's see how we

00:01:32.150 --> 00:01:34.220
can create a new branch.

00:01:34.220 --> 00:01:37.130
I'm going to create a
new branch right here.

00:01:37.130 --> 00:01:38.630
So I'm going to right-click on

00:01:38.630 --> 00:01:42.890
this particular commit
and say Create Branch.

00:01:42.890 --> 00:01:47.120
Let's call it feature
to branch, whatever.

00:01:47.120 --> 00:01:49.910
And I also would like to
switch to that branch.

00:01:49.910 --> 00:01:55.924
So I check this check
box create branch.

00:01:55.924 --> 00:01:58.220
So we switched to
that feature to

00:01:58.220 --> 00:02:00.185
branch that we've just created.

00:02:00.185 --> 00:02:02.960
You can tell it by
taking a look here.

00:02:02.960 --> 00:02:05.735
Here you can see all
the list of branches.

00:02:05.735 --> 00:02:07.640
Once you click on it, you

00:02:07.640 --> 00:02:09.050
can see all the
list of branches.

00:02:09.050 --> 00:02:10.250
If you'd like to
switch to one of

00:02:10.250 --> 00:02:12.540
the branches, just click on it.

00:02:13.660 --> 00:02:17.090
So we just wish
to master branch.

00:02:17.090 --> 00:02:19.340
And so that's what
you're seeing in here.

00:02:19.340 --> 00:02:20.840
Let me switch back to feature

00:02:20.840 --> 00:02:23.885
two branch and make a commit.

00:02:23.885 --> 00:02:26.520
I'll go to the Explorer.

00:02:28.840 --> 00:02:36.200
Let me just make some edits
and inventory file feature

00:02:36.200 --> 00:02:44.990
to changes in inventory
file or whatever.

00:02:44.990 --> 00:02:48.755
I'm going to go back to this
section source control.

00:02:48.755 --> 00:02:53.930
I'm going to click on this
check icon. By doing that.

00:02:53.930 --> 00:02:56.450
It is showing me
a message saying

00:02:56.450 --> 00:02:58.550
there are no staged
changes to come.

00:02:58.550 --> 00:03:00.290
It would you like to stage

00:03:00.290 --> 00:03:02.600
all the changes and
commit them directly?

00:03:02.600 --> 00:03:04.505
If I hit yes, right now,

00:03:04.505 --> 00:03:06.890
it's going to stage
the changes before

00:03:06.890 --> 00:03:09.905
committing without me
having to do that.

00:03:09.905 --> 00:03:11.630
Or if you'd like to
do it on your own,

00:03:11.630 --> 00:03:13.055
you can do that as well.

00:03:13.055 --> 00:03:14.900
Just right-click on
this file which is

00:03:14.900 --> 00:03:17.510
currently under
changes category.

00:03:17.510 --> 00:03:20.525
And then click on stage changes.

00:03:20.525 --> 00:03:25.759
This would move that file
into staged changes category.

00:03:25.759 --> 00:03:27.500
And now if you come
at, you shouldn't

00:03:27.500 --> 00:03:30.455
have any problem or whatsoever.

00:03:30.455 --> 00:03:35.070
But let us enter some
kind of a commit message.

00:03:37.990 --> 00:03:42.630
Whatever. Click on this icon

00:03:43.240 --> 00:03:48.870
and just made a new commit
and feature two branch.

00:03:50.890 --> 00:03:54.905
Let's take a look at the graph.

00:03:54.905 --> 00:03:56.390
And as you can see, we now have

00:03:56.390 --> 00:03:59.250
a new commit added in the graph.

00:03:59.470 --> 00:04:05.430
And here it is. Let's now
switch back to master branch.

00:04:06.730 --> 00:04:11.225
Let us make edits in this
same inventory file.

00:04:11.225 --> 00:04:20.240
So to create conflicts,
save the file.

00:04:20.240 --> 00:04:29.225
Go back here. This time.

00:04:29.225 --> 00:04:31.520
Let's hit the S. If

00:04:31.520 --> 00:04:33.650
you don't like to see
this prompt again,

00:04:33.650 --> 00:04:36.420
then you can just press never.

00:04:38.860 --> 00:04:42.320
Lets go back to get
graph once again.

00:04:42.320 --> 00:04:43.880
And as you can see,

00:04:43.880 --> 00:04:46.895
we now have a new commit
and master branch.

00:04:46.895 --> 00:04:49.489
Now let us try to
perform the merge.

00:04:49.489 --> 00:04:52.760
How do we perform much
in Visual Studio Code?

00:04:52.760 --> 00:04:56.375
But this extension,
well, it's pretty easy.

00:04:56.375 --> 00:04:59.705
Just right-click on
one of the branches.

00:04:59.705 --> 00:05:02.195
I'm going to click on
feature to branch.

00:05:02.195 --> 00:05:04.520
And you can choose
this option that says

00:05:04.520 --> 00:05:07.340
merge into current branch.

00:05:07.340 --> 00:05:09.785
What is the current
branch ie mask?

00:05:09.785 --> 00:05:12.740
Well, it's simply the branch
that had this pointing to.

00:05:12.740 --> 00:05:15.590
In other words, it's
the master branch.

00:05:15.590 --> 00:05:18.515
Let's click on it and
see what happens.

00:05:18.515 --> 00:05:21.875
It is asking us if we want
to create a new commit,

00:05:21.875 --> 00:05:25.025
even if fast-forward
merge is possible?

00:05:25.025 --> 00:05:27.445
I don't like to answer.

00:05:27.445 --> 00:05:29.640
Yes, merge.

00:05:30.760 --> 00:05:32.945
As expected, we have

00:05:32.945 --> 00:05:36.440
a conflict auto merging
inventor or dxdy.

00:05:36.440 --> 00:05:39.630
And then it says
we got a conflict.

00:05:40.360 --> 00:05:46.865
Dismiss it, go to
Explorer, go to that file.

00:05:46.865 --> 00:05:49.430
And this time it has format at

00:05:49.430 --> 00:05:52.805
us in this manner,
just as before.

00:05:52.805 --> 00:05:55.864
But we use today God
gave us few options.

00:05:55.864 --> 00:05:58.430
If you notice, accept

00:05:58.430 --> 00:06:00.860
current changes, accept
incoming changes,

00:06:00.860 --> 00:06:02.300
or the changes
that are coming in

00:06:02.300 --> 00:06:04.580
from the feature to branch,

00:06:04.580 --> 00:06:06.455
to the master branch.

00:06:06.455 --> 00:06:09.169
Or accept both the changes.

00:06:09.169 --> 00:06:12.820
Or you can also compare the
changes. You can choose.

00:06:12.820 --> 00:06:14.169
Any of these options

00:06:14.169 --> 00:06:15.850
are if you'd like to
make your own edit,

00:06:15.850 --> 00:06:17.290
so you can do that as well.

00:06:17.290 --> 00:06:20.320
Simply just delete
everything and bringing

00:06:20.320 --> 00:06:24.145
your own changes or edit
the existing one. Whatever.

00:06:24.145 --> 00:06:27.250
Let's add like to keep
both the changes or

00:06:27.250 --> 00:06:30.715
click on this that says
accept what changes.

00:06:30.715 --> 00:06:33.320
Now save the file.

00:06:34.080 --> 00:06:37.540
Go back to source control.

00:06:37.540 --> 00:06:39.550
Before we commit it.

00:06:39.550 --> 00:06:46.015
Let us stage these changes
are fairly staged.

00:06:46.015 --> 00:06:48.640
Let's click on this checkbox.

00:06:48.640 --> 00:06:51.499
I'm happy with the
existing message.

00:06:53.500 --> 00:06:56.120
And guess what?

00:06:56.120 --> 00:06:59.765
This has just created
the merge commit.

00:06:59.765 --> 00:07:02.120
Now, if you're using
a different tool,

00:07:02.120 --> 00:07:03.845
not the Visual Studio Code,

00:07:03.845 --> 00:07:05.390
then you should be
able to look at

00:07:05.390 --> 00:07:08.075
all these operations in
some way or the other.

00:07:08.075 --> 00:07:11.000
Only the graphical user
interface might change.

00:07:11.000 --> 00:07:12.830
But in all those tools,

00:07:12.830 --> 00:07:16.445
you can perform pretty much
the same set of operations.

00:07:16.445 --> 00:07:17.870
For example, if you go to

00:07:17.870 --> 00:07:21.170
the official website
of source tree,

00:07:21.170 --> 00:07:25.385
just by taking a look at this
image, you can tell a lot.

00:07:25.385 --> 00:07:29.480
So we have history which
shows the historical changes.

00:07:29.480 --> 00:07:31.145
You also have this graph,

00:07:31.145 --> 00:07:34.265
just as the one we have in
the Visual Studio Code.

00:07:34.265 --> 00:07:36.900
You can also go to
this branches section

00:07:36.900 --> 00:07:38.560
to take a look at

00:07:38.560 --> 00:07:40.285
the branches and do
something with that,

00:07:40.285 --> 00:07:42.595
like create them,
delete them, et cetera.

00:07:42.595 --> 00:07:44.650
You can also perform commits.

00:07:44.650 --> 00:07:47.815
And some of the other
operations we haven't explored.

00:07:47.815 --> 00:07:50.815
We will explore in coming
lectures for sure.

00:07:50.815 --> 00:07:53.065
But I hope you got the point.

00:07:53.065 --> 00:07:54.940
It doesn't matter
which tool you use.

00:07:54.940 --> 00:07:58.105
Ultimately, every tool
has the same purpose,

00:07:58.105 --> 00:08:01.160
which is to simplify your job.

00:08:05.670 --> 00:08:08.575
Now I guess we can
delete this branch.

00:08:08.575 --> 00:08:10.270
We would no longer need it.

00:08:10.270 --> 00:08:11.980
So I'm going to right-click on

00:08:11.980 --> 00:08:16.220
this branch and
say Delete branch.

00:08:17.220 --> 00:08:19.850
Can do the same feature,

00:08:19.850 --> 00:08:21.960
one branch as well.

00:08:25.240 --> 00:08:28.130
And of course, the leading brand

00:08:28.130 --> 00:08:30.720
doesn't delete it's commits.

00:08:30.730 --> 00:08:33.875
As we had discussed before.

00:08:33.875 --> 00:08:36.200
Hope it makes sense, right?

00:08:36.200 --> 00:08:38.255
To do what I've just done in

00:08:38.255 --> 00:08:40.040
Visual Studio Code and get

00:08:40.040 --> 00:08:42.304
a sense of how everything
is functioning.

00:08:42.304 --> 00:08:43.970
And don't be intimidated

00:08:43.970 --> 00:08:46.220
by looking at this tool.
It's pretty simple.

00:08:46.220 --> 00:08:47.885
Tool is just simply like

00:08:47.885 --> 00:08:51.545
a text editor with some
really cool features.

00:08:51.545 --> 00:08:54.545
It's there to make our
life easier, not harder.

00:08:54.545 --> 00:08:56.970
I'll see you next one.
