WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.870
Okay, let us see how we can
use rebase with git pull.

00:00:03.870 --> 00:00:06.075
If I run git pull command,

00:00:06.075 --> 00:00:09.000
you can see that it's
already up to date.

00:00:09.000 --> 00:00:10.950
There are no additional
objects to be

00:00:10.950 --> 00:00:13.860
downloaded from
remote repository.

00:00:13.860 --> 00:00:19.260
But let me try to make a commit
in the remote repository.

00:00:19.260 --> 00:00:21.975
And 1 second, I'm just simply
going to edit this file

00:00:21.975 --> 00:00:26.650
and make a commit. Like so.

00:00:29.990 --> 00:00:34.960
Let me make a commit in our
local depository as well.

00:00:35.830 --> 00:00:40.430
I'm going to edit this
file using VI editor.

00:00:40.430 --> 00:00:41.870
You can use Notepad or

00:00:41.870 --> 00:00:44.730
Visual Studio Code.
It's up to you.

00:00:53.770 --> 00:01:01.920
Get to stage this
file, git commit.

00:01:14.710 --> 00:01:17.150
Now let's try to do git

00:01:17.150 --> 00:01:21.150
pull rebase option and see
what's going to happen.

00:01:22.630 --> 00:01:26.480
Since trough performing
the merge, get word.

00:01:26.480 --> 00:01:29.225
Now try to perform rebase.

00:01:29.225 --> 00:01:31.340
What this command
does is it will

00:01:31.340 --> 00:01:33.650
download all the
objects and commit.

00:01:33.650 --> 00:01:35.780
Essentially our local
branch would be in

00:01:35.780 --> 00:01:37.580
the same state as with

00:01:37.580 --> 00:01:39.650
this branch in the
remote repository.

00:01:39.650 --> 00:01:41.195
And then get will reapply

00:01:41.195 --> 00:01:44.180
all the local limit
commits one by one.

00:01:44.180 --> 00:01:45.425
After it.

00:01:45.425 --> 00:01:48.000
I've me show you what I mean.

00:01:49.810 --> 00:01:54.755
So this has downloaded
the objects

00:01:54.755 --> 00:02:00.255
and also performed rebase.

00:02:00.255 --> 00:02:05.275
But if you run the
command git log now,

00:02:05.275 --> 00:02:09.110
you would notice that
all these comments

00:02:10.170 --> 00:02:13.840
until this point
are essentially the

00:02:13.840 --> 00:02:15.370
same as the commerce that we

00:02:15.370 --> 00:02:17.230
have in the remote repository.

00:02:17.230 --> 00:02:18.895
And on top of it,

00:02:18.895 --> 00:02:24.160
get has reapplied the
locally made comments.

00:02:24.160 --> 00:02:26.380
This is same as you've cloned

00:02:26.380 --> 00:02:28.345
the project from
remote repository.

00:02:28.345 --> 00:02:31.120
And then you made your
local commits one by one.

00:02:31.120 --> 00:02:33.250
This can be better seen in

00:02:33.250 --> 00:02:39.130
Visual Studio Code with Git
plug-in. So here we are.

00:02:39.130 --> 00:02:41.770
As you can see, how
these comments at

00:02:41.770 --> 00:02:45.455
the bottom belong to
the remote repository.

00:02:45.455 --> 00:02:49.370
You can tell it by looking
at the auto section.

00:02:49.370 --> 00:02:54.364
So all these comments
were made by Centre Corp.

00:02:54.364 --> 00:02:56.045
And on top of it,

00:02:56.045 --> 00:02:59.045
it has rebased our local commits

00:02:59.045 --> 00:03:01.790
on top of the remote commits.

00:03:01.790 --> 00:03:04.745
And that's why they
came after them.

00:03:04.745 --> 00:03:07.670
But if you notice, we
do not have that merge

00:03:07.670 --> 00:03:10.130
commit that we had earlier.

00:03:10.130 --> 00:03:12.365
But that's the
purpose of rebase,

00:03:12.365 --> 00:03:15.829
which is essentially to not
have those merge commits.

00:03:15.829 --> 00:03:18.590
Rebase essentially
rewrites your commits

00:03:18.590 --> 00:03:20.750
and even hashCode
wouldn't be same.

00:03:20.750 --> 00:03:23.210
For example, if you
take a look at the

00:03:23.210 --> 00:03:26.465
latest commit you've
made local depository,

00:03:26.465 --> 00:03:29.720
the current hashCode
is phi to be whatever.

00:03:29.720 --> 00:03:31.190
If you were to take
a look at this

00:03:31.190 --> 00:03:33.785
exact commit before rebase,

00:03:33.785 --> 00:03:36.185
the hashCode would
have been different.

00:03:36.185 --> 00:03:38.750
Now this is the
reason why all the

00:03:38.750 --> 00:03:41.480
rebased makes our commit
history look more linear.

00:03:41.480 --> 00:03:44.000
It shouldn't rebase if
you have all your changes

00:03:44.000 --> 00:03:46.985
already published in
the remote repository.

00:03:46.985 --> 00:03:49.820
We're going to talk about
git push and how we can push

00:03:49.820 --> 00:03:51.965
your local commits to
the remote repository

00:03:51.965 --> 00:03:53.750
in upcoming lectures.

00:03:53.750 --> 00:03:56.030
And then you'll have better
clarity as to what I'm

00:03:56.030 --> 00:03:59.280
talking about.
I'll see you next.
