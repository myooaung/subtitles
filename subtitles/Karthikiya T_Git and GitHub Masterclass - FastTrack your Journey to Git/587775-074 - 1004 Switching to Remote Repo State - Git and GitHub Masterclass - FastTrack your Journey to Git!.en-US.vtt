WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.200 --> 00:00:02.790
Now with git-fetch, since we

00:00:02.790 --> 00:00:04.740
have downloaded all
of those objects,

00:00:04.740 --> 00:00:07.350
we can actually check out
the particular commit

00:00:07.350 --> 00:00:11.055
and going to detach
that stayed. That way.

00:00:11.055 --> 00:00:12.420
We can have the same state of

00:00:12.420 --> 00:00:14.280
the remote repository without

00:00:14.280 --> 00:00:16.380
having to impact
our existing work.

00:00:16.380 --> 00:00:18.225
Let me show you what I mean.

00:00:18.225 --> 00:00:22.905
Let me go back to GitHub
and let me switch to

00:00:22.905 --> 00:00:27.465
new feature branch and

00:00:27.465 --> 00:00:30.640
get the hash code off
the latest commit.

00:00:30.830 --> 00:00:34.900
Actually first few
characters would suffice.

00:00:35.800 --> 00:00:38.340
Inside Git Bash.

00:00:38.340 --> 00:00:41.885
I'm going to say git checkout.

00:00:41.885 --> 00:00:44.259
There's the hashCode.

00:00:44.259 --> 00:00:47.755
So this should bring our
project to detach that state.

00:00:47.755 --> 00:00:50.860
And essentially,

00:00:50.860 --> 00:00:53.125
our project isn't
exact same state

00:00:53.125 --> 00:00:55.180
as with the remote repository.

00:00:55.180 --> 00:00:57.310
If you notice, we
have this file,

00:00:57.310 --> 00:00:58.840
apple dot TXT file,

00:00:58.840 --> 00:01:01.280
which is what we need.

00:01:03.060 --> 00:01:05.725
If you read this message,

00:01:05.725 --> 00:01:08.980
you can see that it says
you're in detach at state.

00:01:08.980 --> 00:01:10.480
You can look around, make

00:01:10.480 --> 00:01:13.105
experimental changes
and commit them.

00:01:13.105 --> 00:01:15.490
And you can discard all
those comments once

00:01:15.490 --> 00:01:18.145
you switch back to
another branch.

00:01:18.145 --> 00:01:20.410
So I can go ahead and
make some comments.

00:01:20.410 --> 00:01:21.610
Does the application or

00:01:21.610 --> 00:01:24.884
whatever vesicle experiment
with my changes.

00:01:24.884 --> 00:01:27.410
And once I'm done, I
can just switch back to

00:01:27.410 --> 00:01:30.650
a branch so that all those
comments would be lost.

00:01:30.650 --> 00:01:32.825
In case if I want to
keep those comments,

00:01:32.825 --> 00:01:36.020
then I can use this command
gets which hyphen Z.

00:01:36.020 --> 00:01:39.050
And then I'm going to specify
a name of the new branch.

00:01:39.050 --> 00:01:40.370
So this command would create

00:01:40.370 --> 00:01:43.640
this branch and have
all those comments in

00:01:43.640 --> 00:01:49.280
their head is not pointing
to this particular commit,

00:01:49.280 --> 00:01:51.035
not to a particular branch.

00:01:51.035 --> 00:01:53.630
And that's why it's
detached head state.

00:01:53.630 --> 00:02:01.175
Let me switch back to new
feature branch. New feature.

00:02:01.175 --> 00:02:04.705
And we exit from the
detached head state.

00:02:04.705 --> 00:02:09.410
You would of course no longer
CD apple dot TXT file.

00:02:09.410 --> 00:02:12.350
Now maybe you can take
this as an assignment.

00:02:12.350 --> 00:02:14.165
Go to detach set state,

00:02:14.165 --> 00:02:18.080
make some comments before
you switch back to a branch.

00:02:18.080 --> 00:02:19.490
Make sure those changes are,

00:02:19.490 --> 00:02:22.145
the comments are preserved
in another branch.

00:02:22.145 --> 00:02:25.740
I wish you good luck with
that. I'll see you next.
