WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.320 --> 00:00:02.730
What if we had already committed

00:00:02.730 --> 00:00:05.475
the changes would
supposed to be ignored?

00:00:05.475 --> 00:00:08.250
Let me show you what I
mean. For this purpose.

00:00:08.250 --> 00:00:10.335
Once again, I have
brought back the project

00:00:10.335 --> 00:00:12.960
to what it was at the
beginning of this chapter.

00:00:12.960 --> 00:00:14.415
We once again have

00:00:14.415 --> 00:00:17.520
these three files and
we'll start from there.

00:00:17.520 --> 00:00:21.130
Let me go ahead and
create one log file.

00:00:21.710 --> 00:00:25.750
Let's call it error dot log.

00:00:26.300 --> 00:00:31.350
Let me actually go ahead
and commit this log file.

00:00:31.350 --> 00:00:34.245
As if I'm committing
this file accidentally,

00:00:34.245 --> 00:00:36.720
along with bunch
of other changes.

00:00:36.720 --> 00:00:40.485
Git add error dot log, git,

00:00:40.485 --> 00:00:45.560
commit Typhon, some message,

00:00:45.560 --> 00:00:48.350
and we have committed
the log file.

00:00:48.350 --> 00:00:51.080
Now imagine that our
project is very new,

00:00:51.080 --> 00:00:52.700
Our team is very new.

00:00:52.700 --> 00:00:55.265
Nobody is familiar
with dot ignore file.

00:00:55.265 --> 00:00:56.990
And so let's say we have a bunch

00:00:56.990 --> 00:00:59.045
of files in the repository,

00:00:59.045 --> 00:01:01.760
are in the centralized
repository committed by

00:01:01.760 --> 00:01:05.509
bunch of folks would
supposed to be ignored.

00:01:05.509 --> 00:01:09.530
Now it is at this point in
time I have realized that I

00:01:09.530 --> 00:01:13.610
needed to have dot gitignore
file in my root directory.

00:01:13.610 --> 00:01:22.115
So I'm going to include
it dot Git, ignore.

00:01:22.115 --> 00:01:26.000
I'm going to specify
a bunch of patterns,

00:01:26.000 --> 00:01:29.940
which I wanted to ignore.

00:01:33.490 --> 00:01:36.320
In my case, I'm just
simply going to say star

00:01:36.320 --> 00:01:42.090
dot along. Like so.

00:01:42.400 --> 00:01:47.015
Let me rename this
file correctly.

00:01:47.015 --> 00:01:49.070
It's supposed to be good.

00:01:49.070 --> 00:01:51.840
Ignore like so.

00:01:52.180 --> 00:01:56.660
Now it's already too late
because we have already

00:01:56.660 --> 00:01:58.520
committed all the files

00:01:58.520 --> 00:02:00.650
that are not supposed
to become at it.

00:02:00.650 --> 00:02:03.800
Let me actually come
at this file as well.

00:02:03.800 --> 00:02:10.410
Git add, git,

00:02:12.040 --> 00:02:21.600
commit Typhon am
introducing ignore file.

00:02:24.160 --> 00:02:28.160
Now I have introduced this
file, which is great.

00:02:28.160 --> 00:02:29.885
And this will now ignore

00:02:29.885 --> 00:02:32.330
all the files that are
supposed to be ignored.

00:02:32.330 --> 00:02:35.495
But how about all the files
that were already committed?

00:02:35.495 --> 00:02:38.120
How do we get rid of them?

00:02:38.120 --> 00:02:40.820
Well, one simple solution is to

00:02:40.820 --> 00:02:43.160
just simply pinpoint
all those files,

00:02:43.160 --> 00:02:46.010
delete them, and
then make a commit.

00:02:46.010 --> 00:02:48.140
All those files will be deleted.

00:02:48.140 --> 00:02:51.350
And from now on we have
the dot gitignore file,

00:02:51.350 --> 00:02:54.365
any way to prevent
that happening.

00:02:54.365 --> 00:02:57.965
But practically speaking, if
you've got lots of files,

00:02:57.965 --> 00:03:00.080
it becomes really
impractical to pinpoint

00:03:00.080 --> 00:03:03.020
all the files that you
wanted to get rid off.

00:03:03.020 --> 00:03:05.240
Do we have a better solution?

00:03:05.240 --> 00:03:06.995
The answer is yes.

00:03:06.995 --> 00:03:09.290
We have a sneaky work around to

00:03:09.290 --> 00:03:11.990
solve this problem
more effectively.

00:03:11.990 --> 00:03:13.955
Let me show you what I mean.

00:03:13.955 --> 00:03:17.090
I'm going to go
back to Git Bash.

00:03:17.090 --> 00:03:19.010
Let me clear the screen.

00:03:19.010 --> 00:03:24.515
Let me do git status to make
sure everything is clean.

00:03:24.515 --> 00:03:26.899
Now let me run the command.

00:03:26.899 --> 00:03:32.154
Git RM, hyphen r
stands for recursive.

00:03:32.154 --> 00:03:37.015
And then I'm going to
use the option cached,

00:03:37.015 --> 00:03:39.550
followed by a period.

00:03:39.550 --> 00:03:41.770
What am I trying to do here?

00:03:41.770 --> 00:03:45.310
I'm actually trying to
delete all the cached files.

00:03:45.310 --> 00:03:46.780
Now, water cached files,

00:03:46.780 --> 00:03:48.640
you might ask me, well,

00:03:48.640 --> 00:03:49.870
cached files are essentially

00:03:49.870 --> 00:03:52.825
the files that are
being tracked by Git.

00:03:52.825 --> 00:03:56.905
Git stores all the files it
wants to track in a cache.

00:03:56.905 --> 00:03:58.225
And with this command,

00:03:58.225 --> 00:03:59.830
we're cleaning them up.

00:03:59.830 --> 00:04:01.390
This gives an impression to

00:04:01.390 --> 00:04:03.310
get that we have
actually deleted

00:04:03.310 --> 00:04:05.260
all the files without actually

00:04:05.260 --> 00:04:08.139
having to delete from
the working directory.

00:04:08.139 --> 00:04:11.810
Let's run this command
and see what happens.

00:04:11.810 --> 00:04:13.130
And as you can see,

00:04:13.130 --> 00:04:17.510
it has removed all these
files from the cache.

00:04:17.510 --> 00:04:20.450
So this includes
literally all the files

00:04:20.450 --> 00:04:21.725
in our working directory.

00:04:21.725 --> 00:04:24.200
As you can see, we
have five files here.

00:04:24.200 --> 00:04:27.275
And we have five files here.

00:04:27.275 --> 00:04:30.380
Next, what we're going
to do is we're going to

00:04:30.380 --> 00:04:31.940
actually stage all the files

00:04:31.940 --> 00:04:33.725
sensing what's going to happen.

00:04:33.725 --> 00:04:35.990
But before that, let me run git

00:04:35.990 --> 00:04:39.950
status command once again.

00:04:39.950 --> 00:04:42.215
And this time if you notice

00:04:42.215 --> 00:04:45.545
under changes to be
committed section,

00:04:45.545 --> 00:04:48.215
it has listed all of
those five files.

00:04:48.215 --> 00:04:50.420
That's because get us

00:04:50.420 --> 00:04:53.375
thinking that we have actually
deleted all those files.

00:04:53.375 --> 00:04:54.830
Although we haven't deleted

00:04:54.830 --> 00:04:56.735
them from the working directory.

00:04:56.735 --> 00:05:00.470
We just clear the cache
and made good belief that

00:05:00.470 --> 00:05:04.805
we've actually deleted those
files at the same time.

00:05:04.805 --> 00:05:09.200
Under untracked files
section has listed

00:05:09.200 --> 00:05:13.385
all the files that are
currently not being tracked.

00:05:13.385 --> 00:05:15.020
Now, do take a note.

00:05:15.020 --> 00:05:18.695
This list doesn't
include error dot log

00:05:18.695 --> 00:05:20.900
because it is now part of

00:05:20.900 --> 00:05:24.785
the pattern inside the
dot gitignore file.

00:05:24.785 --> 00:05:28.050
Git doesn't want to track it.

00:05:28.050 --> 00:05:30.640
Now let us go ahead and add

00:05:30.640 --> 00:05:36.770
all these untracked files and
make them tracked by Git.

00:05:36.900 --> 00:05:39.760
Git add this term.

00:05:39.760 --> 00:05:41.560
I'm going to use
period character

00:05:41.560 --> 00:05:43.330
so that even the
files that start

00:05:43.330 --> 00:05:47.635
with dot would be added
and are tracked by Git.

00:05:47.635 --> 00:05:50.660
Now if I do git status,

00:05:50.670 --> 00:05:55.105
you'll see that error dot log

00:05:55.105 --> 00:05:58.960
is the only file which
we need to come in.

00:05:58.960 --> 00:06:01.480
This is as if we have deleted

00:06:01.480 --> 00:06:05.605
this file and making a comment.

00:06:05.605 --> 00:06:08.410
Essentially with
this, we're able

00:06:08.410 --> 00:06:10.880
to delete all the files that are

00:06:10.880 --> 00:06:13.310
not supposed to be committed are

00:06:13.310 --> 00:06:16.415
the files that are
supposed to be ignored.

00:06:16.415 --> 00:06:21.480
Now since we have this
pile staged to be deleted,

00:06:21.910 --> 00:06:24.050
There's one last
thing we need to

00:06:24.050 --> 00:06:28.860
do is to commit the changes.

00:06:29.110 --> 00:06:37.200
Cleaning up ignored
five, It's like cell.

00:06:38.560 --> 00:06:44.430
And get has deleted
at a dot log.

00:06:44.710 --> 00:06:46.910
Would just simply means that

00:06:46.910 --> 00:06:52.369
the new snapshot does not
have this file anymore.

00:06:52.369 --> 00:06:56.644
But of course we still have
it in the working directory.

00:06:56.644 --> 00:07:00.140
So this is just a sneaky
work around to get rid of

00:07:00.140 --> 00:07:01.820
all the files that
we had previously

00:07:01.820 --> 00:07:04.940
commented which are
supposed to be ignored.

00:07:04.940 --> 00:07:07.054
Now if you're still unclear,

00:07:07.054 --> 00:07:08.630
take your time and
experiment with

00:07:08.630 --> 00:07:11.675
these commands and
you'll understand them.

00:07:11.675 --> 00:07:14.040
I'll see you next.
