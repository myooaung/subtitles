WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.615
Let us understand what
is ahead and get.

00:00:03.615 --> 00:00:06.360
My branch is a
reference to a commit,

00:00:06.360 --> 00:00:07.860
head-related the point to

00:00:07.860 --> 00:00:10.170
a branch or to a
specific commit.

00:00:10.170 --> 00:00:12.795
When the head points
to a specific commit,

00:00:12.795 --> 00:00:15.225
it's called detached head state.

00:00:15.225 --> 00:00:17.175
Let me explain you what I mean.

00:00:17.175 --> 00:00:19.230
When you have a project with

00:00:19.230 --> 00:00:21.960
no other branches except
the master branch,

00:00:21.960 --> 00:00:25.635
by default, head would
point to the master branch.

00:00:25.635 --> 00:00:28.800
Now assume that you
have two branches,

00:00:28.800 --> 00:00:30.775
master and feature one branch.

00:00:30.775 --> 00:00:34.145
Let's say that you have
switched to feature one branch.

00:00:34.145 --> 00:00:37.565
The head would now point
to feature one branch.

00:00:37.565 --> 00:00:39.410
And based on the head,

00:00:39.410 --> 00:00:41.930
get will know which branch

00:00:41.930 --> 00:00:43.985
it needs to commit
the changes to.

00:00:43.985 --> 00:00:46.430
If the head is pointing
to master branch,

00:00:46.430 --> 00:00:49.460
git will make the comments
inside the master branch,

00:00:49.460 --> 00:00:51.080
or the head is pointing to

00:00:51.080 --> 00:00:53.450
some other branch like
feature one branch.

00:00:53.450 --> 00:00:56.855
Git will make commits inside
the feature one branch.

00:00:56.855 --> 00:01:00.470
You can also have the head
pointing to a specific commit.

00:01:00.470 --> 00:01:03.020
And we had already taken a
look at an example of the

00:01:03.020 --> 00:01:05.720
same in one of our
previous lectures.

00:01:05.720 --> 00:01:08.915
For example, you could say
git checkout or good switch.

00:01:08.915 --> 00:01:10.130
And then you're going to specify

00:01:10.130 --> 00:01:12.815
the hashCode of a particular
commit to objects.

00:01:12.815 --> 00:01:15.140
The head would
then point to that

00:01:15.140 --> 00:01:17.750
particular commit
and get will update

00:01:17.750 --> 00:01:20.405
the project working
directory to look like

00:01:20.405 --> 00:01:23.510
how it looked like when you
made that particular commit.

00:01:23.510 --> 00:01:25.310
And what are the
comments that you make

00:01:25.310 --> 00:01:27.455
during the detached head state?

00:01:27.455 --> 00:01:30.020
All those comments
would be lost once

00:01:30.020 --> 00:01:32.825
you switch back to
one of the branches.

00:01:32.825 --> 00:01:35.420
So you might be wondering
why is allowing us

00:01:35.420 --> 00:01:38.555
to checkout or switched
to a particular commit.

00:01:38.555 --> 00:01:41.330
Well, there might be use
cases where you might want

00:01:41.330 --> 00:01:44.135
to go back to previous
state of the project.

00:01:44.135 --> 00:01:46.010
For example, let's say

00:01:46.010 --> 00:01:47.930
that you'd like to
take a look at how

00:01:47.930 --> 00:01:49.760
our project look
like when you made

00:01:49.760 --> 00:01:51.890
a particular commit on,

00:01:51.890 --> 00:01:54.454
Let's say that you'd like to
retrieve some of the changes

00:01:54.454 --> 00:01:56.090
that were deleted earlier in

00:01:56.090 --> 00:01:57.620
one of the previous comments.

00:01:57.620 --> 00:02:00.230
Well, you can check out
the particular commit.

00:02:00.230 --> 00:02:02.240
You take a look at
all the changes,

00:02:02.240 --> 00:02:04.700
maybe copy the code
that was deleted,

00:02:04.700 --> 00:02:07.925
and use that code in
your current project.

00:02:07.925 --> 00:02:11.150
Once after you switch
back to the branch or

00:02:11.150 --> 00:02:14.420
another use case of detached
head state would be,

00:02:14.420 --> 00:02:16.130
let's say you want to go back in

00:02:16.130 --> 00:02:19.550
time and make few
experimental commits.

00:02:19.550 --> 00:02:21.530
But you don't want all
those commits to be

00:02:21.530 --> 00:02:23.690
available in your code base.

00:02:23.690 --> 00:02:25.430
And once after you're done,

00:02:25.430 --> 00:02:27.290
you would just switch
back to one of

00:02:27.290 --> 00:02:28.790
the branches and

00:02:28.790 --> 00:02:31.895
all those experimental
commits would be lost.

00:02:31.895 --> 00:02:35.610
Now let's take a look
at all this in action.

00:02:36.120 --> 00:02:39.970
Okay, We are currently inside
the feature one branch.

00:02:39.970 --> 00:02:42.010
First of all, let us
try to locate where

00:02:42.010 --> 00:02:45.309
the head is actually residing.

00:02:45.309 --> 00:02:47.665
Inside the git folder.

00:02:47.665 --> 00:02:51.590
You're going to find this
file with the name head.

00:02:52.620 --> 00:02:56.185
Since we are now in
feature one branch,

00:02:56.185 --> 00:03:00.650
head is pointing to
feature one branch.

00:03:01.440 --> 00:03:05.035
Let's see what's
going to happen.

00:03:05.035 --> 00:03:08.510
If we switch to master branch.

00:03:11.370 --> 00:03:14.065
Let's take a look
at the content of

00:03:14.065 --> 00:03:17.120
the head file dot get.

00:03:18.400 --> 00:03:20.480
And as you can see,

00:03:20.480 --> 00:03:23.870
head is now pointing
to master branch.

00:03:23.870 --> 00:03:26.605
Now let's take a look
at list of commits in

00:03:26.605 --> 00:03:30.455
this master branch, git log.

00:03:30.455 --> 00:03:31.715
And as you can see,

00:03:31.715 --> 00:03:33.575
we currently have three commits.

00:03:33.575 --> 00:03:35.930
And you can also see here

00:03:35.930 --> 00:03:38.690
that the head is pointing
to the master branch.

00:03:38.690 --> 00:03:45.000
If you were to switch to
feature one branch, let's say.

00:03:48.640 --> 00:03:51.500
And do git log for instance.

00:03:51.500 --> 00:03:53.420
You're going to
see that the head

00:03:53.420 --> 00:03:55.985
is pointing to
feature one branch.

00:03:55.985 --> 00:03:57.725
If you'd like to take a look at

00:03:57.725 --> 00:03:59.750
all the list of
branches available,

00:03:59.750 --> 00:04:04.180
it is going to say git branch.

00:04:04.180 --> 00:04:07.510
And then you're going to see
all the list of branches.

00:04:07.510 --> 00:04:11.065
And since the current branch
or the ACT to branch or

00:04:11.065 --> 00:04:14.800
so-called the head branch
is a feature one branch,

00:04:14.800 --> 00:04:17.185
it is highlighted in green.

00:04:17.185 --> 00:04:20.650
We also see a star
mark giving us

00:04:20.650 --> 00:04:22.900
a clue that this is
the actual branch

00:04:22.900 --> 00:04:24.400
or the current branch.

00:04:24.400 --> 00:04:27.140
So if I do git log,

00:04:27.990 --> 00:04:31.585
you can see that we currently
have three commits.

00:04:31.585 --> 00:04:33.430
We've already taken
a look at how we

00:04:33.430 --> 00:04:35.020
can check out or
switch to one of

00:04:35.020 --> 00:04:38.500
the previous comments in one
of our previous lectures.

00:04:38.500 --> 00:04:40.015
So I'm not going to do that.

00:04:40.015 --> 00:04:41.395
I would instead use

00:04:41.395 --> 00:04:45.485
a different command
called Git checkout.

00:04:45.485 --> 00:04:48.185
Or you could also
use good switch.

00:04:48.185 --> 00:04:51.845
Let's use that because
it is the latest one.

00:04:51.845 --> 00:04:55.685
And then you're going
to say head all caps.

00:04:55.685 --> 00:04:58.535
And then you're going to use
this symbol, whatever it is.

00:04:58.535 --> 00:05:00.500
And then you're going to
specify the number of

00:05:00.500 --> 00:05:03.305
commits that you'd
like to go back to.

00:05:03.305 --> 00:05:05.450
Say if I say one here,

00:05:05.450 --> 00:05:09.859
then we can see the depository
or the working directory,

00:05:09.859 --> 00:05:13.085
how it looked like
one commit ago.

00:05:13.085 --> 00:05:14.945
Let me run this command.

00:05:14.945 --> 00:05:18.090
And this time if I do git log,

00:05:19.240 --> 00:05:22.790
okay, this command
basically didn't work.

00:05:22.790 --> 00:05:26.475
It is asking us to add
this option detach.

00:05:26.475 --> 00:05:29.210
So let's quickly do that.

00:05:33.330 --> 00:05:36.715
Now let's do git log.

00:05:36.715 --> 00:05:40.615
And you're only going to
see a couple of comments.

00:05:40.615 --> 00:05:43.675
Now currently we are in
detached head state.

00:05:43.675 --> 00:05:46.855
So let me try and
make a comment here.

00:05:46.855 --> 00:05:50.545
Touch maybe Apple dot dx, dy.

00:05:50.545 --> 00:05:56.035
And then git, add apple dot TXT.

00:05:56.035 --> 00:05:59.150
Get come at, hyphen them.

00:06:00.540 --> 00:06:04.045
Some message. It doesn't matter.

00:06:04.045 --> 00:06:06.460
If I do git log.

00:06:06.460 --> 00:06:09.060
You would certainly
see that commit.

00:06:09.060 --> 00:06:12.440
But once I switch back
to one of the branches,

00:06:12.440 --> 00:06:14.630
you would no longer
see this commit.

00:06:14.630 --> 00:06:16.745
This commit would be lost.

00:06:16.745 --> 00:06:19.670
So I'll do git checkout.

00:06:19.670 --> 00:06:28.445
Or you could also say, Good
Switch feature one, git log.

00:06:28.445 --> 00:06:30.140
And you would no
longer see the comment

00:06:30.140 --> 00:06:32.280
that we've just made.
