WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.620
Let us see how we can commit

00:00:01.620 --> 00:00:03.870
our changes to Git repository.

00:00:03.870 --> 00:00:06.705
By the way, when I
say Git repository,

00:00:06.705 --> 00:00:11.580
I could mean our project
folder with dot git folder.

00:00:11.580 --> 00:00:13.080
Or I could also mean

00:00:13.080 --> 00:00:16.590
the object data store that
we've talked earlier.

00:00:16.590 --> 00:00:18.825
It depends on the context.

00:00:18.825 --> 00:00:20.370
To avoid the confusion,

00:00:20.370 --> 00:00:22.455
I'm going to call our
working directory

00:00:22.455 --> 00:00:25.365
are our project folder
as Git repository.

00:00:25.365 --> 00:00:29.190
I'm going to refer to
the object database as

00:00:29.190 --> 00:00:34.545
the object database just
to avoid confusion.

00:00:34.545 --> 00:00:37.845
So currently we have all
these files in place.

00:00:37.845 --> 00:00:41.470
Let us make sure all
these files are staged.

00:00:41.470 --> 00:00:44.510
I'm going to do git status.

00:00:44.510 --> 00:00:47.330
We have one file
which is not staged.

00:00:47.330 --> 00:00:48.725
So let's do git,

00:00:48.725 --> 00:00:52.775
add two dot TXT to stage it.

00:00:52.775 --> 00:00:55.250
Let's do git status once again.

00:00:55.250 --> 00:00:58.295
And we have all
our files staged.

00:00:58.295 --> 00:01:02.630
I'm going to say git commit

00:01:02.630 --> 00:01:04.385
hyphen m. And then

00:01:04.385 --> 00:01:06.485
we're going to provide
a meaningful message.

00:01:06.485 --> 00:01:08.615
Why do we need to
provide this message?

00:01:08.615 --> 00:01:11.450
Well, basically describes
the changes that you're

00:01:11.450 --> 00:01:14.195
committing to it
later point in time,

00:01:14.195 --> 00:01:16.385
if you or somebody
else in your team,

00:01:16.385 --> 00:01:19.025
what to take a look at all
the historical changes

00:01:19.025 --> 00:01:20.750
or historical commit.

00:01:20.750 --> 00:01:22.430
They get to know
which committee as

00:01:22.430 --> 00:01:25.145
well by looking at its message.

00:01:25.145 --> 00:01:27.950
For example, you could
be committing changes to

00:01:27.950 --> 00:01:30.545
fix a bug or add a feature.

00:01:30.545 --> 00:01:32.420
As a good practice.

00:01:32.420 --> 00:01:34.370
In real-time
applications, we follow

00:01:34.370 --> 00:01:36.905
a specific format
for this message.

00:01:36.905 --> 00:01:38.210
The first is going to be

00:01:38.210 --> 00:01:40.940
combination of
alphanumeric characters,

00:01:40.940 --> 00:01:42.920
which is essentially a defect or

00:01:42.920 --> 00:01:44.330
a feature ID that you

00:01:44.330 --> 00:01:46.250
pick from your defect
tracking tool.

00:01:46.250 --> 00:01:48.335
If you're working
for an organization,

00:01:48.335 --> 00:01:49.910
then you might be
having a defect

00:01:49.910 --> 00:01:51.440
or feature tracking tool.

00:01:51.440 --> 00:01:54.275
You pick that ID and
enter it over here.

00:01:54.275 --> 00:01:56.075
For example, it could
be something like

00:01:56.075 --> 00:01:59.825
WI, some numeric codes.

00:01:59.825 --> 00:02:01.760
W stands for work item.

00:02:01.760 --> 00:02:03.665
It could be something
else for you.

00:02:03.665 --> 00:02:05.900
And then you're going to
produce descriptive message.

00:02:05.900 --> 00:02:07.175
And even this message,

00:02:07.175 --> 00:02:08.870
would we pick from the title of

00:02:08.870 --> 00:02:12.065
the defect from the
defect tracking tool?

00:02:12.065 --> 00:02:16.130
I'm going to say my
working app or whatever.

00:02:16.130 --> 00:02:18.410
Let's hit Enter.

00:02:18.410 --> 00:02:21.110
And all the changes that

00:02:21.110 --> 00:02:23.855
were staged would
now be committed.

00:02:23.855 --> 00:02:25.745
And in order to make sure

00:02:25.745 --> 00:02:27.770
that we have all the
files committed,

00:02:27.770 --> 00:02:30.230
let's do git status.

00:02:30.230 --> 00:02:32.465
And it doesn't show anything,

00:02:32.465 --> 00:02:35.675
which means we don't have any
files to become addicted.

00:02:35.675 --> 00:02:37.820
Now let us go ahead and make

00:02:37.820 --> 00:02:39.410
a modification in one of

00:02:39.410 --> 00:02:42.035
the existing files in
our working directory.

00:02:42.035 --> 00:02:44.990
For that, I'm going to
use the command echo

00:02:44.990 --> 00:02:48.570
just to fill one out
the files with a text.

00:02:48.570 --> 00:02:53.034
My text in file
one for instance.

00:02:53.034 --> 00:02:54.610
And I'm going to
dump this message

00:02:54.610 --> 00:02:57.115
inside one dot txt file.

00:02:57.115 --> 00:03:00.340
This command is
equivalent to opening

00:03:00.340 --> 00:03:03.535
the one dot TXT file
and entering the text,

00:03:03.535 --> 00:03:06.985
my text in file one.
Let me hit Enter.

00:03:06.985 --> 00:03:10.990
Now I'm going to use the cat
command to see what's inside

00:03:10.990 --> 00:03:14.890
the one dot TXT gesture I
showed you that we have

00:03:14.890 --> 00:03:16.750
this message over there and it

00:03:16.750 --> 00:03:19.165
prints out the text
inside OneNote dxdy.

00:03:19.165 --> 00:03:20.725
All good.

00:03:20.725 --> 00:03:23.935
Now this is a change
that we've introduced,

00:03:23.935 --> 00:03:25.360
which means we need to

00:03:25.360 --> 00:03:27.745
stage this in order
to commit this.

00:03:27.745 --> 00:03:30.495
So let's do git
status once again.

00:03:30.495 --> 00:03:32.660
This time it's going
to say we have

00:03:32.660 --> 00:03:34.955
one file which is modified.

00:03:34.955 --> 00:03:38.180
So we need to do git add to add

00:03:38.180 --> 00:03:42.600
this file and bring
it to staging area.

00:03:43.180 --> 00:03:47.270
Git status. It turn green,

00:03:47.270 --> 00:03:50.029
which means it is
ready to be committed.

00:03:50.029 --> 00:03:54.680
I'm going to once again
use the commit command.

00:03:54.680 --> 00:03:57.840
Commit the changes.

00:03:59.440 --> 00:04:03.890
Let's remove the defect
ID for the time being.

00:04:03.890 --> 00:04:08.520
Let me just give a
meaningful message.

00:04:08.530 --> 00:04:13.305
Modified file,
one, for instance,

00:04:13.305 --> 00:04:19.450
hit Enter, get status.

00:04:19.450 --> 00:04:23.245
And sure enough, we have
our changes committed.

00:04:23.245 --> 00:04:26.920
Now let's consider a
case of deleting a file.

00:04:26.920 --> 00:04:28.900
So for that I'm going
to use the command

00:04:28.900 --> 00:04:30.940
RPM stands for remove.

00:04:30.940 --> 00:04:33.775
And then I'm going to
specify the file name.

00:04:33.775 --> 00:04:37.705
Let us get it off to dot
txt, different stance.

00:04:37.705 --> 00:04:40.135
Now this command is
not specific to get,

00:04:40.135 --> 00:04:42.490
this is a typical Unix command.

00:04:42.490 --> 00:04:44.780
Hit Enter.

00:04:45.000 --> 00:04:48.700
I'll do ls to see if it got

00:04:48.700 --> 00:04:52.150
deleted and indeed
it got deleted.

00:04:52.150 --> 00:04:53.935
Now this is a new change

00:04:53.935 --> 00:04:55.755
which is introduced
in the project.

00:04:55.755 --> 00:04:58.280
Guess what? We need
to stage it and then

00:04:58.280 --> 00:05:00.860
let them know that we
have deleted the file.

00:05:00.860 --> 00:05:04.265
And so it gets reflected in
the object database as well.

00:05:04.265 --> 00:05:06.935
So git status is going to

00:05:06.935 --> 00:05:10.040
show that file has been deleted,

00:05:10.040 --> 00:05:12.755
but this change is not staged.

00:05:12.755 --> 00:05:18.960
So git add dot dxdy.

00:05:19.390 --> 00:05:22.010
Good status.

00:05:22.010 --> 00:05:26.105
And we have changes which
are ready to become edited.

00:05:26.105 --> 00:05:31.984
Once again, git commit
with a meaningful message.

00:05:31.984 --> 00:05:34.040
This time, let me not enter

00:05:34.040 --> 00:05:37.385
any message and hit Enter
and see what happens.

00:05:37.385 --> 00:05:40.190
Well, it would open
up text editor

00:05:40.190 --> 00:05:42.935
that we had chosen
while installing Git.

00:05:42.935 --> 00:05:45.200
In my case, it has
Notepad Plus Plus

00:05:45.200 --> 00:05:47.465
for you it might
be something else.

00:05:47.465 --> 00:05:49.295
Here, we need to enter

00:05:49.295 --> 00:05:52.340
the message which we would
otherwise enter with

00:05:52.340 --> 00:05:57.650
hyphen m option when to
say it deleted file.

00:05:57.650 --> 00:06:04.190
To save the file and
simply close it.

00:06:04.190 --> 00:06:07.760
And it has committed
our changes.

00:06:07.760 --> 00:06:11.225
We use the RM command
with the mood, the file.

00:06:11.225 --> 00:06:12.920
And then we had done git add

00:06:12.920 --> 00:06:15.590
command to stage those changes.

00:06:15.590 --> 00:06:17.120
However, we can do

00:06:17.120 --> 00:06:19.520
these two steps in
one goal is by using

00:06:19.520 --> 00:06:22.070
the command get out from

00:06:22.070 --> 00:06:25.715
this time instead of just
RM, I'm saying get RM.

00:06:25.715 --> 00:06:27.650
This will not only
remove the file,

00:06:27.650 --> 00:06:31.760
but we'll also stage those
changes to staging area.

00:06:31.760 --> 00:06:35.030
Let's delete three dot dx,

00:06:35.030 --> 00:06:40.010
dy for instance. I'll do ls.

00:06:40.010 --> 00:06:42.650
And as you can see,
file got deleted.

00:06:42.650 --> 00:06:44.720
But if I do git status,

00:06:44.720 --> 00:06:47.045
unlike in case of RM command,

00:06:47.045 --> 00:06:49.400
this time the
changes are already

00:06:49.400 --> 00:06:52.790
staged and you can directly
commit the changes.

00:06:52.790 --> 00:06:55.440
Git commit, hyphen them.

00:06:55.570 --> 00:07:02.150
Deleted three file.

00:07:02.150 --> 00:07:04.670
Now let's take a
look at all the list

00:07:04.670 --> 00:07:06.650
of commits we have made

00:07:06.650 --> 00:07:11.030
by running the command
git log master.

00:07:11.030 --> 00:07:12.950
Master is the name of the branch

00:07:12.950 --> 00:07:15.590
and is also the default branch.

00:07:15.590 --> 00:07:17.329
We're going to talk
about branches

00:07:17.329 --> 00:07:18.500
at later point in time.

00:07:18.500 --> 00:07:19.850
But for now, just blindly run

00:07:19.850 --> 00:07:24.785
this command to see all the
list of commits you've made.

00:07:24.785 --> 00:07:28.310
The most recent one
would be shown on top.

00:07:28.310 --> 00:07:30.200
As you can see.

00:07:30.200 --> 00:07:32.405
We have our first commit,

00:07:32.405 --> 00:07:34.820
but my working app message.

00:07:34.820 --> 00:07:37.145
And then we modified file one,

00:07:37.145 --> 00:07:39.575
we deleted files to be deleted.

00:07:39.575 --> 00:07:40.955
Three file.

00:07:40.955 --> 00:07:45.260
I also can see the author
who has done that.

00:07:45.260 --> 00:07:47.840
It is mean in this case for you.

00:07:47.840 --> 00:07:49.595
It would be whatever
you've entered

00:07:49.595 --> 00:07:51.695
while configuring
the credentials.

00:07:51.695 --> 00:07:54.320
When we have centralized
repository and

00:07:54.320 --> 00:07:57.035
when we have a team
working on a project,

00:07:57.035 --> 00:07:59.300
you'd be able to see
all the list of commits

00:07:59.300 --> 00:08:01.760
done by multiple team members.

00:08:01.760 --> 00:08:04.280
And if you were to
spot a commit which is

00:08:04.280 --> 00:08:07.385
causing trouble or which
might be breaking a feature.

00:08:07.385 --> 00:08:09.455
You can get hold of the author

00:08:09.455 --> 00:08:11.820
by writing an email to them.
