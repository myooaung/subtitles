WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.760
Let's talk about Blob
objects and how they're

00:00:02.760 --> 00:00:05.655
managed inside Git repository.

00:00:05.655 --> 00:00:07.380
Imagine that I've created

00:00:07.380 --> 00:00:09.465
a brand new project with
the following file,

00:00:09.465 --> 00:00:11.370
one dot TXT, and it

00:00:11.370 --> 00:00:14.610
has the following text in
it. Hello from getting.

00:00:14.610 --> 00:00:18.225
Now the moment I add this
file onto this staging area,

00:00:18.225 --> 00:00:20.925
get will actually
try to generate

00:00:20.925 --> 00:00:24.825
a hash code out of the
content of one dot TXT file.

00:00:24.825 --> 00:00:26.580
And get will then check to

00:00:26.580 --> 00:00:29.174
see if we already
have any objects

00:00:29.174 --> 00:00:33.570
in object database that
corresponds to this hash code.

00:00:33.570 --> 00:00:37.410
If there are none, then it
would go ahead and create

00:00:37.410 --> 00:00:41.740
a Blob object with all the
contents of one dot txt file,

00:00:41.740 --> 00:00:44.720
of course, n compressed format.

00:00:44.720 --> 00:00:47.660
Now assume that I've
created one more file,

00:00:47.660 --> 00:00:49.535
say two dot TXT,

00:00:49.535 --> 00:00:51.710
with the exact same text as to

00:00:51.710 --> 00:00:54.560
the rough one dot TXT
hello from getting,

00:00:54.560 --> 00:00:56.390
once again, assume
that I've added

00:00:56.390 --> 00:00:58.475
this file onto the staging area.

00:00:58.475 --> 00:01:01.070
Getwidth. Once again,
try to generate

00:01:01.070 --> 00:01:04.505
hashCode out of the contents
of two dot TXT file.

00:01:04.505 --> 00:01:06.410
And this time get,

00:01:06.410 --> 00:01:08.420
we'll notice that
we already have

00:01:08.420 --> 00:01:12.305
an object that corresponds
to this hashCode.

00:01:12.305 --> 00:01:15.664
So get won't create
another blob object.

00:01:15.664 --> 00:01:18.425
The reason for this
is quite obvious.

00:01:18.425 --> 00:01:20.270
Why would we want to create

00:01:20.270 --> 00:01:23.630
the exact same blob object
when we already have one.

00:01:23.630 --> 00:01:26.300
Why don't we just use
the existing one?

00:01:26.300 --> 00:01:28.115
It makes sense right?

00:01:28.115 --> 00:01:32.045
Now let's take a look at
all this in practice.

00:01:32.045 --> 00:01:34.100
For the sake of this example and

00:01:34.100 --> 00:01:36.110
avoid any kind of conclusion.

00:01:36.110 --> 00:01:39.155
I've created a new folder
with the name Tests tab.

00:01:39.155 --> 00:01:41.210
And here's where we're
going to experiment and

00:01:41.210 --> 00:01:44.675
see what get blobs
can do for us.

00:01:44.675 --> 00:01:48.395
So let me launch and get
bashed in this folder.

00:01:48.395 --> 00:01:53.610
First things first, let's
get initializes the project.

00:01:55.570 --> 00:01:58.310
And let me go ahead and

00:01:58.310 --> 00:02:01.445
create a file with
some content in it.

00:02:01.445 --> 00:02:04.799
I use the echo command.

00:02:08.400 --> 00:02:12.580
I'm going to dump this message
inside one dot txt file.

00:02:12.580 --> 00:02:14.650
This command will
not only create

00:02:14.650 --> 00:02:16.960
one dot TXT file module also

00:02:16.960 --> 00:02:20.630
populate it with this
content Hello from getting.

00:02:22.230 --> 00:02:24.370
Now let's get inside

00:02:24.370 --> 00:02:29.390
the objects directory
and see how it behaves.

00:02:29.400 --> 00:02:31.510
Let me state this file,

00:02:31.510 --> 00:02:35.980
one dot txt, git
add one dot dx dy.

00:02:35.980 --> 00:02:37.795
And the moment I do that,

00:02:37.795 --> 00:02:39.340
we see a new folder getting

00:02:39.340 --> 00:02:42.160
created inside objects directly.

00:02:42.160 --> 00:02:44.185
Guess what this file is?

00:02:44.185 --> 00:02:46.330
Well, this is the Blob object

00:02:46.330 --> 00:02:49.770
for one dot TXT file
that we've just created.

00:02:49.770 --> 00:02:52.310
So yes, blobs are
created when new stage

00:02:52.310 --> 00:02:55.370
the file is not necessarily
when you commit the changes.

00:02:55.370 --> 00:02:57.080
When you commit the changes it

00:02:57.080 --> 00:02:59.090
will create the comet object

00:02:59.090 --> 00:03:00.679
as well as the three objects

00:03:00.679 --> 00:03:02.855
that corresponds
to bunch of blobs.

00:03:02.855 --> 00:03:05.615
In fact, that's the purpose
of commit operation.

00:03:05.615 --> 00:03:07.790
It is to create a snapshot,

00:03:07.790 --> 00:03:11.150
saved the project at that
particular instance of time.

00:03:11.150 --> 00:03:14.585
We're going to talk about
snapshot in next lecture.

00:03:14.585 --> 00:03:17.000
Let's go back.

00:03:17.000 --> 00:03:20.000
Now let us see what would
happen if I were to

00:03:20.000 --> 00:03:22.895
create another file with
the exact same content.

00:03:22.895 --> 00:03:25.159
As to that often dot TXT,

00:03:25.159 --> 00:03:27.215
I'm going to use
the same command.

00:03:27.215 --> 00:03:29.270
But this time I'm
going to populate

00:03:29.270 --> 00:03:33.110
the same message
into dot TXT file.

00:03:33.110 --> 00:03:36.270
Let us stage that file.

00:03:36.400 --> 00:03:39.830
I'll do git status.

00:03:39.830 --> 00:03:43.745
And we have these
two files staged.

00:03:43.745 --> 00:03:45.800
But if you notice, there is

00:03:45.800 --> 00:03:49.745
no new object created
for two dot TXT.

00:03:49.745 --> 00:03:52.700
And I've already explained
you the reason for that.

00:03:52.700 --> 00:03:55.055
Since we already
have a Blob object

00:03:55.055 --> 00:03:56.975
with the exact same content,

00:03:56.975 --> 00:04:00.215
get does not go into
create another object.

00:04:00.215 --> 00:04:02.629
In other words,

00:04:02.629 --> 00:04:06.560
the moment we added the extra
under the staging area,

00:04:06.560 --> 00:04:11.000
get tried to generate the
hashCode of this content.

00:04:11.000 --> 00:04:13.550
And it has check
to see if we have

00:04:13.550 --> 00:04:14.870
any existing objects in

00:04:14.870 --> 00:04:18.155
the database that corresponds
to that hashCode.

00:04:18.155 --> 00:04:20.780
For two dot TXT, we do have

00:04:20.780 --> 00:04:24.725
existing blob and so it
didn't create another block.

00:04:24.725 --> 00:04:27.050
Same principle is
applicable even

00:04:27.050 --> 00:04:29.075
if you were to modify a file.

00:04:29.075 --> 00:04:31.760
For example, let's say that

00:04:31.760 --> 00:04:35.030
I wanted to modify
the text inside to

00:04:35.030 --> 00:04:42.544
rock dxdy from file
to for instance,

00:04:42.544 --> 00:04:47.070
we're going to replace the
text inside to dot TXT file.

00:04:47.230 --> 00:04:50.900
Let us stage this file.

00:04:50.900 --> 00:04:53.510
Now, can you make a guess
if we're going to see

00:04:53.510 --> 00:04:56.990
a new folder getting created
inside objects folder,

00:04:56.990 --> 00:05:00.575
the answer is yes, of course.

00:05:00.575 --> 00:05:03.140
We have a new blob object

00:05:03.140 --> 00:05:05.840
created because
this content right

00:05:05.840 --> 00:05:08.960
here is unique and

00:05:08.960 --> 00:05:12.630
there is no existing
blob object for this.

00:05:15.580 --> 00:05:18.230
Let us also create
one more file,

00:05:18.230 --> 00:05:20.615
three dot TXT file

00:05:20.615 --> 00:05:24.479
with the same content as
to that often dot TXT.

00:05:25.060 --> 00:05:32.120
And let's stairs that
file git status.

00:05:32.120 --> 00:05:35.599
And we have these three
files to be committed.

00:05:35.599 --> 00:05:38.255
One dot dx dy and dx dy,

00:05:38.255 --> 00:05:40.760
or having the exact
same content while

00:05:40.760 --> 00:05:43.250
do route dxdy is having
a different texture.

00:05:43.250 --> 00:05:51.330
Now, let's commit the changes.

00:05:52.000 --> 00:05:54.530
Well, this is not offers,

00:05:54.530 --> 00:05:56.705
but whatever.

00:05:56.705 --> 00:05:59.000
Let's hit Enter.

00:05:59.000 --> 00:06:00.920
And as you can see,

00:06:00.920 --> 00:06:03.200
we have both commit as well as

00:06:03.200 --> 00:06:05.480
the tree object created as well,

00:06:05.480 --> 00:06:08.555
right after we come
into the changes.

00:06:08.555 --> 00:06:12.630
Let's now take a look at
what's inside the tree object.

00:06:12.630 --> 00:06:15.250
I will get log to get hold

00:06:15.250 --> 00:06:18.620
of the hashCode of
the commit object.

00:06:18.750 --> 00:06:24.440
Git cat file item B.

00:06:29.580 --> 00:06:33.800
Let's check what's
inside this tree object.

00:06:33.870 --> 00:06:36.445
So both one dot dx, dy,

00:06:36.445 --> 00:06:38.605
as well as three dot TXT,

00:06:38.605 --> 00:06:43.030
should be pointing to the
exact same blob object.

00:06:43.030 --> 00:06:46.870
If you notice both
one dot TXT entry or

00:06:46.870 --> 00:06:50.515
dxdy are pointing to the
exact same blob object.

00:06:50.515 --> 00:06:52.629
Whereas for two dot TXT,

00:06:52.629 --> 00:06:55.760
it's a different Blob object.
