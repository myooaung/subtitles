WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.380 --> 00:00:04.020
Okay, let us see how we
can deal with conflicts by

00:00:04.020 --> 00:00:05.670
merging the branches without

00:00:05.670 --> 00:00:07.575
having to use the force option,

00:00:07.575 --> 00:00:10.695
or by following the divide
and conquer approach.

00:00:10.695 --> 00:00:14.760
For that, let us first try
to create another conflict.

00:00:14.760 --> 00:00:18.045
Since we have already
deleted feature one branch,

00:00:18.045 --> 00:00:21.885
let us create a new branch
to introduce new conflicts.

00:00:21.885 --> 00:00:25.365
Let's call it new feature.

00:00:25.365 --> 00:00:30.645
Whatever. I'm going to
create this branch.

00:00:30.645 --> 00:00:33.315
And let me edit one
of these files.

00:00:33.315 --> 00:00:36.640
Let's say I would like to
edit one dot TXT file.

00:00:37.070 --> 00:00:39.120
And I'm simply going to

00:00:39.120 --> 00:00:44.105
add the name of the
branch like cell.

00:00:44.105 --> 00:00:46.880
Commit the changes.

00:00:46.880 --> 00:00:50.105
Let me switch back
to main branch.

00:00:50.105 --> 00:00:53.075
And let's try to edit the
same file once again,

00:00:53.075 --> 00:00:56.165
so that we'll have conflict.

00:00:56.165 --> 00:01:01.830
Let's just say main and
commit the changes.

00:01:02.830 --> 00:01:06.350
Now let's go to
pull requests and

00:01:06.350 --> 00:01:09.899
try to raise a new pull request.

00:01:10.690 --> 00:01:13.205
So we're comparing main branch

00:01:13.205 --> 00:01:15.410
with the new feature branch.

00:01:15.410 --> 00:01:20.090
And here are the changes.

00:01:20.090 --> 00:01:24.240
Let me go ahead and
create the pull request.

00:01:25.020 --> 00:01:28.375
As you can see, we're
getting a message that says

00:01:28.375 --> 00:01:32.245
this branch has complex
that must be resolved.

00:01:32.245 --> 00:01:35.815
And we also have the option
to resolve conflicts.

00:01:35.815 --> 00:01:37.690
How good that would allow us to

00:01:37.690 --> 00:01:39.805
resolve the conflicts is by

00:01:39.805 --> 00:01:43.960
actually merging the main
branch into the feature branch.

00:01:43.960 --> 00:01:46.180
Now this might
actually surprise you,

00:01:46.180 --> 00:01:48.220
but it actually works.

00:01:48.220 --> 00:01:49.990
Let me show you what I mean.

00:01:49.990 --> 00:01:53.360
Let me click on
resolve conflicts.

00:01:54.180 --> 00:01:56.890
This is as though
we were in merging

00:01:56.890 --> 00:02:00.280
state where conflicts
needs to be resolved.

00:02:00.280 --> 00:02:02.320
And we can resolve the conflicts

00:02:02.320 --> 00:02:04.045
just as we had dissolved them

00:02:04.045 --> 00:02:08.215
in our local machine when we're
trying to merge branches.

00:02:08.215 --> 00:02:09.790
So essentially in this case,

00:02:09.790 --> 00:02:11.260
GitHub is trying to merge

00:02:11.260 --> 00:02:14.230
main branch onto the
new feature branch.

00:02:14.230 --> 00:02:16.810
And that would essentially
bringing all the changes of

00:02:16.810 --> 00:02:18.940
main branch or all
the comments of

00:02:18.940 --> 00:02:22.370
main branch onto
the feature branch.

00:02:28.050 --> 00:02:30.940
Like to keep both the changes.

00:02:30.940 --> 00:02:34.000
And I'm going to click on
this button that says Mark.

00:02:34.000 --> 00:02:38.905
As result. We're going
to come at the merge.

00:02:38.905 --> 00:02:41.005
This is going to
create a merge commit,

00:02:41.005 --> 00:02:44.005
and that will point to a
couple of parent commits.

00:02:44.005 --> 00:02:46.300
The last comment of
the main branch and

00:02:46.300 --> 00:02:49.610
the last commit off the
new feature branch.

00:02:52.920 --> 00:02:55.630
Pretty similar to
what we've done in

00:02:55.630 --> 00:02:57.100
our local machine when

00:02:57.100 --> 00:02:58.735
we're trying to
resolve the conflicts.

00:02:58.735 --> 00:03:04.150
While margin. Here you

00:03:04.150 --> 00:03:06.490
can see that we have just

00:03:06.490 --> 00:03:10.270
merged main into the
new feature branch.

00:03:10.270 --> 00:03:14.245
And this has solved the problem.

00:03:14.245 --> 00:03:17.330
To go back to the repository,

00:03:19.260 --> 00:03:23.935
commits in main branch
would remain as this.

00:03:23.935 --> 00:03:29.470
Let me show you. But whereas

00:03:29.470 --> 00:03:33.050
if you go to the
new feature branch,

00:03:35.220 --> 00:03:37.630
it has all the commits

00:03:37.630 --> 00:03:39.070
into it in the comments
that were made and

00:03:39.070 --> 00:03:42.355
new feature branch and
also the merge commit.

00:03:42.355 --> 00:03:45.910
If you go inside
that, you're going to

00:03:45.910 --> 00:03:49.735
see that it has
couple of parents.

00:03:49.735 --> 00:03:53.635
One parent is the last
commit of the main branch,

00:03:53.635 --> 00:03:55.690
and the other is the
new comment that we've

00:03:55.690 --> 00:03:58.820
just made in the feature branch.

00:04:02.820 --> 00:04:06.370
So this merge commit snapshot

00:04:06.370 --> 00:04:10.359
would have changes introduced
in both these branches.

00:04:10.359 --> 00:04:13.075
And that's why we're able to see

00:04:13.075 --> 00:04:17.335
all the commits belonging
to both the branches.

00:04:17.335 --> 00:04:20.770
Now I'm not sure if this
is actually confusing you,

00:04:20.770 --> 00:04:23.095
but this is actually
pretty straight forward.

00:04:23.095 --> 00:04:25.225
If you do not understand this,

00:04:25.225 --> 00:04:27.610
then that's perfectly all right.

00:04:27.610 --> 00:04:29.110
We've already
discussed couple of

00:04:29.110 --> 00:04:30.775
ways to resolve the conflicts.

00:04:30.775 --> 00:04:32.665
In last couple of lectures.

00:04:32.665 --> 00:04:34.450
You can go with that approach

00:04:34.450 --> 00:04:37.000
or you can also
follow this approach.

00:04:37.000 --> 00:04:40.825
You can also do the same even
in your local depository.

00:04:40.825 --> 00:04:43.120
Just check out the
project and try to

00:04:43.120 --> 00:04:46.270
merge main branch on
your feature one branch,

00:04:46.270 --> 00:04:49.210
resolve the conflicts
so that you'll

00:04:49.210 --> 00:04:52.990
have similar commit history
in your local machine.

00:04:52.990 --> 00:04:55.720
And then you're going to
push all these commits to

00:04:55.720 --> 00:04:59.750
the remote repository with
the standard push command.

00:05:03.160 --> 00:05:07.650
Let's go back to
the pull request.

00:05:08.080 --> 00:05:11.315
Now we no longer
have the conflicts.

00:05:11.315 --> 00:05:14.705
This branch has no conflicts
with the base branch.

00:05:14.705 --> 00:05:19.205
And we're good to go
ahead and perform merge.

00:05:19.205 --> 00:05:22.260
You cannot perform
rebase though.

00:05:22.900 --> 00:05:27.335
You cannot perform rebase
because as you already know,

00:05:27.335 --> 00:05:28.700
rebase is going to rewrite

00:05:28.700 --> 00:05:30.200
the commit history and

00:05:30.200 --> 00:05:32.255
even get rid off
the merge commits.

00:05:32.255 --> 00:05:35.270
In this case, it doesn't
make sense to do that.

00:05:35.270 --> 00:05:37.100
That sounds confusing.

00:05:37.100 --> 00:05:38.900
Then just remember that it

00:05:38.900 --> 00:05:41.880
cannot perform
rebase. In this case.

00:05:44.230 --> 00:05:47.970
If you try to perform rebase,

00:05:48.130 --> 00:05:52.775
it says this branch cannot
be rebased due to complex.

00:05:52.775 --> 00:05:55.070
The message is not
very clear actually,

00:05:55.070 --> 00:05:58.205
but I hope you got the point.

00:05:58.205 --> 00:06:03.695
But we can merge the changes
and commit them merge.

00:06:03.695 --> 00:06:07.800
We can now get rid off
the new feature branch.

00:06:11.080 --> 00:06:14.240
And that's the alternative
way to resolve

00:06:14.240 --> 00:06:17.610
the complex. I'll see you next.
