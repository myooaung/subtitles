WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.080 --> 00:00:02.790
Let us talk about stashing.

00:00:02.790 --> 00:00:04.230
Let us I'm currently working on

00:00:04.230 --> 00:00:05.865
feature one related changes.

00:00:05.865 --> 00:00:08.010
And so I'm currently
in feature one branch.

00:00:08.010 --> 00:00:10.200
Now, while I'm still
working on this,

00:00:10.200 --> 00:00:12.030
my boss comes to my desk

00:00:12.030 --> 00:00:14.100
and asked me to
continue working on

00:00:14.100 --> 00:00:15.945
feature two and deliver it first

00:00:15.945 --> 00:00:18.465
before working on feature one,

00:00:18.465 --> 00:00:21.520
maybe that customer is eagerly
waiting for feature too.

00:00:21.520 --> 00:00:23.480
Now, in hope for an appraisal,

00:00:23.480 --> 00:00:25.730
I might say yes to my boss and I

00:00:25.730 --> 00:00:28.430
would not want to start
working on feature too.

00:00:28.430 --> 00:00:29.960
But what if I have some

00:00:29.960 --> 00:00:31.940
uncommitted changes
in feature one?

00:00:31.940 --> 00:00:33.410
Let me actually
go ahead and make

00:00:33.410 --> 00:00:36.050
some changes in one
of these files.

00:00:36.050 --> 00:00:38.210
As if I'm introducing

00:00:38.210 --> 00:00:40.370
some changes related
to feature one.

00:00:40.370 --> 00:00:42.785
I'm just simply going to
add one line of text,

00:00:42.785 --> 00:00:46.055
like so, save the
file and close it.

00:00:46.055 --> 00:00:48.350
Let me go back to Git Bash.

00:00:48.350 --> 00:00:51.680
So we have some changes
introduced for feature one.

00:00:51.680 --> 00:00:54.140
And then now wanted
to work on feature

00:00:54.140 --> 00:00:58.140
to let me switch to
feature to branch.

00:01:00.700 --> 00:01:04.145
So I'm currently in
feature to branch.

00:01:04.145 --> 00:01:07.759
Now, if I open up this
file admin dot TXT,

00:01:07.759 --> 00:01:09.770
would you be seeing the changes

00:01:09.770 --> 00:01:11.210
that I've just introduced?

00:01:11.210 --> 00:01:13.055
Let us take a look.

00:01:13.055 --> 00:01:15.484
You still see these changes.

00:01:15.484 --> 00:01:17.570
That's because between
branches carries

00:01:17.570 --> 00:01:20.045
all those uncommitted
changes with you.

00:01:20.045 --> 00:01:23.405
These are the changes that
are related to feature one.

00:01:23.405 --> 00:01:25.070
And I'm able to see it

00:01:25.070 --> 00:01:27.350
even after switching
to feature two.

00:01:27.350 --> 00:01:29.225
Now why is this a problem?

00:01:29.225 --> 00:01:32.105
Well, when you're working on
feature to related changes,

00:01:32.105 --> 00:01:34.520
this might actually create
a lot of confusion,

00:01:34.520 --> 00:01:36.110
especially when you're
trying to stage

00:01:36.110 --> 00:01:38.270
all those files related
to feature two.

00:01:38.270 --> 00:01:40.520
You might come across with
changes related to feature

00:01:40.520 --> 00:01:43.865
one and might end up
confusing yourself.

00:01:43.865 --> 00:01:46.205
So what is the solution here?

00:01:46.205 --> 00:01:50.390
One solution is obviously to

00:01:50.390 --> 00:01:52.654
commit feature one
related changes

00:01:52.654 --> 00:01:55.024
before you switch to
feature two branch.

00:01:55.024 --> 00:01:57.140
But that's not a
solution because we're

00:01:57.140 --> 00:01:59.915
not done with feature
one changes either.

00:01:59.915 --> 00:02:04.730
Well, how about we have
the feature which allows

00:02:04.730 --> 00:02:06.620
us to store all our
uncommitted changes

00:02:06.620 --> 00:02:09.035
temporarily somewhere
in the repository.

00:02:09.035 --> 00:02:12.485
And then we'd be able to
retrieve them whenever we want.

00:02:12.485 --> 00:02:16.490
That's exactly what
is stashing in Git.

00:02:16.490 --> 00:02:19.355
I'm currently in
future one branch.

00:02:19.355 --> 00:02:20.780
So before I switch to

00:02:20.780 --> 00:02:22.850
feature two and
start working on it,

00:02:22.850 --> 00:02:26.345
I would like to stash all
our uncommitted changes.

00:02:26.345 --> 00:02:28.295
The command for that is good.

00:02:28.295 --> 00:02:30.155
Stash.

00:02:30.155 --> 00:02:33.890
Now, this command will only

00:02:33.890 --> 00:02:38.060
stash the tracked
files by default.

00:02:38.060 --> 00:02:40.820
To make a file tracked by Git.

00:02:40.820 --> 00:02:42.500
As you might have already know,

00:02:42.500 --> 00:02:45.290
we need to stage
it at least once.

00:02:45.290 --> 00:02:47.135
So if we have a brand new file

00:02:47.135 --> 00:02:49.055
which was never staged before,

00:02:49.055 --> 00:02:51.320
then we cannot stash it.

00:02:51.320 --> 00:02:55.085
If you want to stash all those
untracked files as well,

00:02:55.085 --> 00:02:57.900
then Inuit include an option.

00:02:58.330 --> 00:03:04.475
Include hyphen untracked.

00:03:04.475 --> 00:03:06.980
Need to run this command
with this option so

00:03:06.980 --> 00:03:10.624
that both staged as well
as I'm staged changes,

00:03:10.624 --> 00:03:12.650
even the new files
which are never tract

00:03:12.650 --> 00:03:14.959
before, would be stashed.

00:03:14.959 --> 00:03:17.690
Alternatively, the shorthand for

00:03:17.690 --> 00:03:21.650
this option is just
simply to use hyphen new.

00:03:21.650 --> 00:03:23.480
Currently we do
not have any files

00:03:23.480 --> 00:03:25.205
that are untracked anyway.

00:03:25.205 --> 00:03:27.320
So we see a message
that says Saved

00:03:27.320 --> 00:03:29.765
working directory
and index date.

00:03:29.765 --> 00:03:34.115
Wip stands for working progress
on feature one branch.

00:03:34.115 --> 00:03:35.765
And it is pointing to

00:03:35.765 --> 00:03:38.735
the latest commit of
feature one branch,

00:03:38.735 --> 00:03:43.100
which means this command
has stashed changes that

00:03:43.100 --> 00:03:47.990
came after the latest
commit, that branch.

00:03:47.990 --> 00:03:50.825
Now if you open up
admin dot TXT file,

00:03:50.825 --> 00:03:52.760
you would no longer
see all those changes

00:03:52.760 --> 00:03:55.595
because those were just stashed.

00:03:55.595 --> 00:03:59.795
Now we're free to switch
to feature two branch.

00:03:59.795 --> 00:04:01.370
And here I work on feature to

00:04:01.370 --> 00:04:04.235
related changes or
make bunch of commits.

00:04:04.235 --> 00:04:05.840
And once I'm done with it,

00:04:05.840 --> 00:04:08.795
I can again go back
to feature one.

00:04:08.795 --> 00:04:12.470
And I can retrieve all
those stashed changes with

00:04:12.470 --> 00:04:16.745
the command git stash, pop.

00:04:16.745 --> 00:04:19.325
Let's run this command.

00:04:19.325 --> 00:04:21.275
The good pop command.

00:04:21.275 --> 00:04:22.400
After retrieving

00:04:22.400 --> 00:04:24.860
all those uncommitted
changes back again,

00:04:24.860 --> 00:04:28.625
it will delete those changes
from the temporary store.

00:04:28.625 --> 00:04:30.185
But behind the scenes,

00:04:30.185 --> 00:04:32.660
essentially it has
created a commit object,

00:04:32.660 --> 00:04:34.565
and this is the hashCode off it.

00:04:34.565 --> 00:04:37.925
And this commit object will
not be part of any branch.

00:04:37.925 --> 00:04:41.330
History, is just a
temporary commit object

00:04:41.330 --> 00:04:42.770
created along with it

00:04:42.770 --> 00:04:46.085
snapshot just for the
purpose of stashing.

00:04:46.085 --> 00:04:48.515
And as you can see by this line,

00:04:48.515 --> 00:04:52.085
this commit object
has been dropped.

00:04:52.085 --> 00:04:54.950
If you open up
admin dot TXT now,

00:04:54.950 --> 00:04:56.585
you can again see

00:04:56.585 --> 00:05:00.170
all those changes that
were previously stashed.

00:05:00.170 --> 00:05:02.960
There are other bunch
of use cases where

00:05:02.960 --> 00:05:05.180
it gets stashed
might come in handy.

00:05:05.180 --> 00:05:06.860
We will export them in

00:05:06.860 --> 00:05:11.010
our coming lectures.
I'll see you next.
