WEBVTT
1
00:00:02.240 --> 00:00:05.940
What does it take to be able to read text from a file?

2
00:00:05.940 --> 00:00:10.660
Well, it's, in fact, a very simple process, very simple pattern indeed.

3
00:00:10.660 --> 00:00:13.050
First, you create a BufferedReader.

4
00:00:13.050 --> 00:00:15.190
A BufferedReader is a reader.

5
00:00:15.190 --> 00:00:17.940
It's an extension of the Reader class.

6
00:00:17.940 --> 00:00:20.670
And then, through this BufferedReader,

7
00:00:20.670 --> 00:00:24.000
you are going to read your file line by line.

8
00:00:24.000 --> 00:00:29.340
Let us see the pattern. First, you need a path, so let us create one.

9
00:00:29.340 --> 00:00:34.180
Then, you need to get BufferedReader from this corresponding file. And then,

10
00:00:34.180 --> 00:00:38.100
you are going to read the content of that file line by life.

11
00:00:38.100 --> 00:00:39.830
And that's basically it.

12
00:00:39.830 --> 00:00:42.760
It suggested two lines of code pattern.

13
00:00:42.760 --> 00:00:45.640
The life of Java developers would be wonderful if we

14
00:00:45.640 --> 00:00:48.550
did not have to deal with errors, right?

15
00:00:48.550 --> 00:00:52.040
So what could possibly go wrong in the previous code?

16
00:00:52.040 --> 00:00:54.620
Well, in fact, there are many things that could go wrong,

17
00:00:54.620 --> 00:00:59.640
unfortunately. So let us see one of the weirdest things that could happen.

18
00:00:59.640 --> 00:01:04.360
It has to do with the charset you are using. By default, this pattern

19
00:01:04.360 --> 00:01:09.840
assumes that the file you're reading is encoded in UTFâ€‘8.

20
00:01:09.840 --> 00:01:14.150
If that's not the case, you are going to have this kind of exception.

21
00:01:14.150 --> 00:01:16.080
So if you see that exception,

22
00:01:16.080 --> 00:01:21.310
it means that the charset you need is not the default charset. You

23
00:01:21.310 --> 00:01:24.540
need to pass an explicit charset as a parameter.

24
00:01:24.540 --> 00:01:28.060
Thankfully, the JDK got you covered on this one.

25
00:01:28.060 --> 00:01:31.950
The JDK knows a lot of charsets that you can invoke

26
00:01:31.950 --> 00:01:33.560
through the use of constants.

27
00:01:33.560 --> 00:01:40.430
Here in this example, it's the ISO_8859 that is going to solve our problem.

28
00:01:40.430 --> 00:01:42.840
So if you see this weird exception,

29
00:01:42.840 --> 00:01:51.000
it means that the charset is not the right one. You need to find the right one to fix your exception.

