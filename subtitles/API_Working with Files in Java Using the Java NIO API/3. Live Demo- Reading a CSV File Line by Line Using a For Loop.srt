1
00:00:02,090 --> 00:00:07,170
Let us try to analyze a CSV file using the pattern we saw.

2
00:00:07,170 --> 00:00:11,200
So we have here very basic CSV file that we just saw in

3
00:00:11,200 --> 00:00:14,560
the slides with several people in it, a name,

4
00:00:14,560 --> 00:00:16,600
an age, and a city.

5
00:00:16,600 --> 00:00:19,990
And we have a person being with three fields a name,

6
00:00:19,990 --> 00:00:23,510
age, and city, and at the end of it,

7
00:00:23,510 --> 00:00:27,120
a tostring method to display an instance of person,

8
00:00:27,120 --> 00:00:29,180
and we're going to analyze this file.

9
00:00:29,180 --> 00:00:33,800
So I've just returned this code here, opening of a path,

10
00:00:33,800 --> 00:00:38,470
a try with resource to open a BufferedReader on this file,

11
00:00:38,470 --> 00:00:41,830
and then we're going to look through all the lines of this file and

12
00:00:41,830 --> 00:00:48,350
if a line does not start with this character,

13
00:00:48,350 --> 00:00:51,440
it means that it should contain a person,

14
00:00:51,440 --> 00:00:54,140
let me put this note here.

15
00:00:54,140 --> 00:01:02,210
I'm going to split this line on this character, put the result in an array.

16
00:01:02,210 --> 00:01:08,440
I'm going to put element, the name is the first element of this array,

17
00:01:08,440 --> 00:01:12,800
the age is the second element of this array,

18
00:01:12,800 --> 00:01:17,040
and the city is the last element of this array.

19
00:01:17,040 --> 00:01:19,260
Now, if I want this code to compile,

20
00:01:19,260 --> 00:01:24,810
I need to tell that this string of characters should be passed to an integer.

21
00:01:24,810 --> 00:01:32,750
And now I can create an instance of Person, new Person, of name, age, and city.

22
00:01:32,750 --> 00:01:38,420
And for the moment, I'm just going to display this person p = + person,

23
00:01:38,420 --> 00:01:40,030
run this code, and indeed,

24
00:01:40,030 --> 00:01:44,800
I have all my people that have been properly read from my file.

25
00:01:44,800 --> 00:01:46,350
Now, this is not very nice.

26
00:01:46,350 --> 00:01:48,880
And if I check this code, I can see that,

27
00:01:48,880 --> 00:01:49,410
in fact,

28
00:01:49,410 --> 00:01:54,540
I am looping through the elements of this file through the lines of this file.

29
00:01:54,540 --> 00:01:57,940
I am just selecting a certain amount of lines,

30
00:01:57,940 --> 00:02:00,480
I'm not taking all the lines into account.

31
00:02:00,480 --> 00:02:03,850
The line that I'm starting with a sharp I'm not taking into account.

32
00:02:03,850 --> 00:02:08,290
And then I am transforming each line to a person.

33
00:02:08,290 --> 00:02:13,480
What I'm going to do is put this in the method and

34
00:02:13,480 --> 00:02:18,240
call that method LineToPerson.

35
00:02:18,240 --> 00:02:19,130
And in fact,

36
00:02:19,130 --> 00:02:23,260
this is going to be a function because I'm just transforming a line to a

37
00:02:23,260 --> 00:02:29,290
person so let me call that function Function from Java.util,

38
00:02:29,290 --> 00:02:35,680
takes a line, returns a Person, I'm going to call it lineToPerson,

39
00:02:35,680 --> 00:02:39,070
and I'm going to say that it takes a line and apply the

40
00:02:39,070 --> 00:02:42,780
line to person method to it in that way.

41
00:02:42,780 --> 00:02:47,860
So now I can just take this and say that this linetoPerson,

42
00:02:47,860 --> 00:02:52,580
apply that to a line is going to return that person.

43
00:02:52,580 --> 00:02:59,560
Let me get rid of this code and say that this person is the person here.

44
00:02:59,560 --> 00:03:04,100
And here, what I can see is that I'm looping through the lines of this file.

45
00:03:04,100 --> 00:03:10,440
I am filtering some of the lines, and I am mapping the rest to a line of person.

46
00:03:10,440 --> 00:03:15,490
So this is exactly a job for the stream API introduced in Java 8.

47
00:03:15,490 --> 00:03:21,740
The stream API is just about that implementing a map filter reduce approach.

48
00:03:21,740 --> 00:03:25,660
And it turns out that on this reader object,

49
00:03:25,660 --> 00:03:29,430
I have another method put lines that is just going to return

50
00:03:29,430 --> 00:03:33,440
exactly what I need which is a Stream of String.

51
00:03:33,440 --> 00:03:36,850
So this Stream of String here, I'm going to filter it,

52
00:03:36,850 --> 00:03:41,410
just keeping the line, do not start with this, arrow this, and then

53
00:03:41,410 --> 00:03:45,050
I'm going to map it with this lineToPerson function,

54
00:03:45,050 --> 00:03:55,710
and for each of those elements, I'm just going to call System.out:: println.

55
00:03:55,710 --> 00:04:02,050
Now I can just get rid of all this code, I don't need it anymore.

56
00:04:02,050 --> 00:04:06,270
And if I run this code, I have roughly the same result as previously.

57
00:04:06,270 --> 00:04:09,240
I can go one step further because, in fact,

58
00:04:09,240 --> 00:04:12,140
on this Files factory class,

59
00:04:12,140 --> 00:04:17,650
I directly have a lines factory method that takes a path as a

60
00:04:17,650 --> 00:04:22,340
parameter and that is going to return the stream I need.

61
00:04:22,340 --> 00:04:25,660
So in fact, this line of code is not needed.

62
00:04:25,660 --> 00:04:28,210
All I need to do is this one.

63
00:04:28,210 --> 00:04:33,600
So the problem is how is this BufferedReader going to be properly closed?

64
00:04:33,600 --> 00:04:38,270
Well, to be able to open a resource in a try with resource pattern,

65
00:04:38,270 --> 00:04:43,340
your resource needs to implement a special interface called AutoCloseable.

66
00:04:43,340 --> 00:04:45,470
If we check BufferedReader,

67
00:04:45,470 --> 00:04:50,710
it extends reader and we can see that indeed it does implement AutoCloseable.

68
00:04:50,710 --> 00:04:55,240
It turns out that the stream interface that is an extension of

69
00:04:55,240 --> 00:04:59,480
base stream also implements AutoCloseable.

70
00:04:59,480 --> 00:05:00,120
So, in fact,

71
00:05:00,120 --> 00:05:05,180
we can put this stream here directly in this try with resource pattern.

72
00:05:05,180 --> 00:05:15,000
We do not need this reader anymore, and thus our reader created by the stream will be properly closed.

