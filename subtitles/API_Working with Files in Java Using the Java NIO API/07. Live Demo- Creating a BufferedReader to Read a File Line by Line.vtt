WEBVTT
1
00:00:02.150 --> 00:00:08.610
Let us begin by seeing how we can read the content of a text file with this API.

2
00:00:08.610 --> 00:00:09.490
For this example,

3
00:00:09.490 --> 00:00:12.430
we have a text file here, which is sonnet 1 by William

4
00:00:12.430 --> 00:00:15.970
Shakespeare, a very nice text, and a class called

5
00:00:15.970 --> 00:00:19.090
ReadingFiles with a main method in it.

6
00:00:19.090 --> 00:00:24.490
The first thing, of course, we need to do is to create a path variable.

7
00:00:24.490 --> 00:00:31.290
And I'm going to use this of factory method, passing the path to this

8
00:00:31.290 --> 00:00:42.490
file in a relative way, files/sonnet‑UTF8.txt. The first thing that we

9
00:00:42.490 --> 00:00:46.350
might do is to check in this path exists.

10
00:00:46.350 --> 00:00:49.960
And for that, we have these Files factory class with a bunch of

11
00:00:49.960 --> 00:00:54.550
methods in it, and we're going to use this exists method. Let us

12
00:00:54.550 --> 00:01:03.890
put the result in a variable and just print it out. Run this code.

13
00:01:03.890 --> 00:01:06.380
And indeed, this file is found.

14
00:01:06.380 --> 00:01:09.240
This path does exist on the disk.

15
00:01:09.240 --> 00:01:12.200
You can check that if I mess up with the name here,

16
00:01:12.200 --> 00:01:17.300
we should have Exists = false, which is expected.

17
00:01:17.300 --> 00:01:23.670
So let us now open this file. For that we have this factory method on

18
00:01:23.670 --> 00:01:29.060
the Files factory class called newBufferedReader. Pass a path as a

19
00:01:29.060 --> 00:01:32.440
parameter. We're just going to say that,

20
00:01:32.440 --> 00:01:32.910
yes,

21
00:01:32.910 --> 00:01:38.780
I want for the moment to throw the exception. Put the results in a

22
00:01:38.780 --> 00:01:42.940
variable. Let me call it reader. And at the end of the day,

23
00:01:42.940 --> 00:01:46.390
we absolutely need to call the close method on that reader

24
00:01:46.390 --> 00:01:49.880
because it is a resource given by the system.

25
00:01:49.880 --> 00:01:54.510
Now this pattern calling close by hand is not the right pattern to use.

26
00:01:54.510 --> 00:01:58.480
In fact, starting with Java 7, we have a try with resource pattern,

27
00:01:58.480 --> 00:01:59.940
which is the following.

28
00:01:59.940 --> 00:02:05.530
We just write this try‑catch manually, pass the opening of the reader as

29
00:02:05.530 --> 00:02:09.460
a parameter to the try block. Here we are going to write our business

30
00:02:09.460 --> 00:02:15.770
code and just catch the exception because throwing the exception from

31
00:02:15.770 --> 00:02:18.000
the main method should not be done.

32
00:02:18.000 --> 00:02:23.610
And here we can just print the stack trace of this exception.

33
00:02:23.610 --> 00:02:28.860
Thanks to the use of this try with resource pattern, we have the guarantee

34
00:02:28.860 --> 00:02:34.540
that the reader will be closed when we exit this try block.

35
00:02:34.540 --> 00:02:39.170
And now from here, we can just call the readLine method,

36
00:02:39.170 --> 00:02:41.990
which is going to read a single line.

37
00:02:41.990 --> 00:02:45.980
Let me print out this line. I'll run this code, and, indeed,

38
00:02:45.980 --> 00:02:49.570
we have the first line of the sonnet, which is printed.

39
00:02:49.570 --> 00:02:53.420
Now if we want to read all the sonnet, we can do that.

40
00:02:53.420 --> 00:02:57.040
Let us check the documentation of this readLine method.

41
00:02:57.040 --> 00:03:00.050
And it says that if it returns null, it means that the

42
00:03:00.050 --> 00:03:02.090
file has been completely reached.

43
00:03:02.090 --> 00:03:06.150
So we just need to add a while loop here.

44
00:03:06.150 --> 00:03:09.270
And while this line is not null,

45
00:03:09.270 --> 00:03:14.410
we can just print it out and then read the next line, and that's it.

46
00:03:14.410 --> 00:03:22.000
With this pattern, we are going to read the whole content of the file, which is what we wanted to do.

