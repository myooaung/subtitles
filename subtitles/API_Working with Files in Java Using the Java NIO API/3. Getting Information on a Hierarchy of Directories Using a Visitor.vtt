WEBVTT
1
00:00:02.290 --> 00:00:07.250
Now, suppose that you're looking for a specific file, or a specific

2
00:00:07.250 --> 00:00:11.620
set of files, a category of files in a given hierarchy of

3
00:00:11.620 --> 00:00:16.320
directories. You have thousands of files on the directory and you

4
00:00:16.320 --> 00:00:19.740
want to find special files among them.

5
00:00:19.740 --> 00:00:20.230
Well,

6
00:00:20.230 --> 00:00:25.950
you have one pattern for that, again a static method, a factory method, from

7
00:00:25.950 --> 00:00:30.690
this Files factory class which is called the find method.

8
00:00:30.690 --> 00:00:35.690
This find method is going to take a path, which is the root of the

9
00:00:35.690 --> 00:00:39.840
directory under which you want to look for information.

10
00:00:39.840 --> 00:00:41.380
It takes an integer.

11
00:00:41.380 --> 00:00:46.160
This integer is the depth of exploration under this root, and it

12
00:00:46.160 --> 00:00:50.160
takes a second element which is a BiPredicate.

13
00:00:50.160 --> 00:00:54.920
This BiPredicate takes a path and a set of attributes.

14
00:00:54.920 --> 00:00:59.690
This path represents every element the API is going to

15
00:00:59.690 --> 00:01:03.300
visit under this hierarchy of directory.

16
00:01:03.300 --> 00:01:07.360
So this path can represent a file or it can represent a

17
00:01:07.360 --> 00:01:10.770
directory and this set of attributes will give you

18
00:01:10.770 --> 00:01:14.080
information on the attributes of this path.

19
00:01:14.080 --> 00:01:16.240
Is it a file, a directory?

20
00:01:16.240 --> 00:01:22.220
Can you read it? Write it, etc.? But you can also get the creation date,

21
00:01:22.220 --> 00:01:26.490
the last modification date, the owner of this file,

22
00:01:26.490 --> 00:01:28.720
the last person who modified it.

23
00:01:28.720 --> 00:01:31.150
This kind of information. In fact,

24
00:01:31.150 --> 00:01:35.060
this attributes object also depends on the file system you

25
00:01:35.060 --> 00:01:39.210
are on. So this BiPredicate is called with all the

26
00:01:39.210 --> 00:01:43.190
information available on this path element,

27
00:01:43.190 --> 00:01:45.660
whether it is a file or a directory.

28
00:01:45.660 --> 00:01:49.990
So let us begin with a very basic and simple example.

29
00:01:49.990 --> 00:01:54.870
You're looking for a special jpeg image in your set or directory.

30
00:01:54.870 --> 00:01:59.740
This is the kind of BiPredicate you are going to create. Just called

31
00:01:59.740 --> 00:02:03.840
path.endsWith('filename'), and you're good to go.

32
00:02:03.840 --> 00:02:06.850
But you can do much more sophisticated stuff.

33
00:02:06.850 --> 00:02:09.830
Suppose you want all the files that have been modified

34
00:02:09.830 --> 00:02:12.640
or touched in the past two hours.

35
00:02:12.640 --> 00:02:16.880
You can do that by writing this kind of code. From this attribute

36
00:02:16.880 --> 00:02:22.220
object, you can get the creation time leveraging this Java 8 date and

37
00:02:22.220 --> 00:02:31.000
time API, compare it to the current date to know if this file is the one you're looking for or not.

