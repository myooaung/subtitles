1
00:00:02,240 --> 00:00:06,900
Being able to find a specific file in a set of directories is nice,

2
00:00:06,900 --> 00:00:09,780
but it is not necessarily what you want to do.

3
00:00:09,780 --> 00:00:15,010
Sometimes you want to visit a set of directories gathering some information,

4
00:00:15,010 --> 00:00:19,740
something like counting all the JPEG files you have under those directories,

5
00:00:19,740 --> 00:00:23,190
for instance. This could be a use case. And for that, you

6
00:00:23,190 --> 00:00:25,780
need to visit a set of directories.

7
00:00:25,780 --> 00:00:30,690
And in that case, what you probably need is some kind of visitor pattern.

8
00:00:30,690 --> 00:00:34,170
Just providing a B predicate is not enough.

9
00:00:34,170 --> 00:00:36,410
It is not going to solve your problem.

10
00:00:36,410 --> 00:00:37,770
To address this problem,

11
00:00:37,770 --> 00:00:41,760
we have two patterns called the walk pattern that allows

12
00:00:41,760 --> 00:00:44,440
you to walk through a set of directories.

13
00:00:44,440 --> 00:00:51,100
The first one has been made available in Java 7 and is called walkFileTree.

14
00:00:51,100 --> 00:00:55,530
It takes a root directory as a parameter and a FileVisitor,

15
00:00:55,530 --> 00:00:59,200
which is a callback, that is going to be called for any

16
00:00:59,200 --> 00:01:02,720
element found in this hierarchy of directories.

17
00:01:02,720 --> 00:01:08,430
And then we have a second pattern, more recent, that leverages the Stream API.

18
00:01:08,430 --> 00:01:12,040
Instead of visiting every element using a callback,

19
00:01:12,040 --> 00:01:17,670
it will provide all the elements in a stream, lazily computed so that you

20
00:01:17,670 --> 00:01:22,290
don't lose any kind of performance. And you're going to process the content of

21
00:01:22,290 --> 00:01:26,490
this directory with a map/filter/reduce approach.

22
00:01:26,490 --> 00:01:31,150
So, let us see those two last patterns, walk patterns, in action

23
00:01:31,150 --> 00:01:36,280
in this live coding part of this module. You will see how to

24
00:01:36,280 --> 00:01:46,000
visit a hierarchy of directories first using the FileVisitor and second using the Stream API.

