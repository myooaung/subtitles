WEBVTT
1
00:00:02.540 --> 00:00:07.350
Before we move on, let us just copy this function here.

2
00:00:07.350 --> 00:00:11.540
I do not need that function there anymore.

3
00:00:11.540 --> 00:00:13.610
And this is a method reference,

4
00:00:13.610 --> 00:00:18.780
so I'm going to convert it to a method reference just to improve my code.

5
00:00:18.780 --> 00:00:21.660
Now, suppose that things are not that nice.

6
00:00:21.660 --> 00:00:24.160
And in my data.csv.

7
00:00:24.160 --> 00:00:27.450
I have in fact a line that is not correct.

8
00:00:27.450 --> 00:00:33.380
I'm going to just add this kind of thing, a bug in a file.

9
00:00:33.380 --> 00:00:34.990
This kind of thing may happen.

10
00:00:34.990 --> 00:00:40.090
Your data.csv file may be some kind of export and you may have stuff

11
00:00:40.090 --> 00:00:43.400
in it that is just garbage to your application.

12
00:00:43.400 --> 00:00:47.540
If I run this code here I'd probably have a big trouble.

13
00:00:47.540 --> 00:00:51.740
You can see that, yes, something very wrong happened.

14
00:00:51.740 --> 00:00:55.610
I do not have the separation character in it so all the process of

15
00:00:55.610 --> 00:01:00.180
converting my line to a proper person has failed.

16
00:01:00.180 --> 00:01:02.300
How can we handle that property?

17
00:01:02.300 --> 00:01:07.640
Well, this lineToPerson code threw an exception that broke all my process.

18
00:01:07.640 --> 00:01:12.090
What I can do is just add a try here.

19
00:01:12.090 --> 00:01:16.100
And since I don't really know which exception I'm going to catch,

20
00:01:16.100 --> 00:01:18.000
I'm going to catch them all.

21
00:01:18.000 --> 00:01:23.900
And then here I need to understand what kind of thing I need to return.

22
00:01:23.900 --> 00:01:27.090
I could be tempted to return null and try to deal

23
00:01:27.090 --> 00:01:32.130
with null in my stream pattern, but I can do much better than that.

24
00:01:32.130 --> 00:01:35.070
Instead of saying I'm going to return null,

25
00:01:35.070 --> 00:01:41.300
I'm going to say that this method returns the Stream(Person).

26
00:01:41.300 --> 00:01:45.710
And here, instead of returning p I'm going to return Stream.of(p).

27
00:01:45.710 --> 00:01:51.250
And if I catch an exception, meaning that I do not have anything to return,

28
00:01:51.250 --> 00:01:55.230
I am going to return an empty stream.

29
00:01:55.230 --> 00:01:58.560
So, in that way, my process will carry on.

30
00:01:58.560 --> 00:02:03.050
If I find a line that is buggy I do not have anything to worry about.

31
00:02:03.050 --> 00:02:05.060
I will just return nothing.

32
00:02:05.060 --> 00:02:10.790
In fact, this method is able to return nothing in the form of an empty stream.

33
00:02:10.790 --> 00:02:14.880
Now, how can I call this method from here?

34
00:02:14.880 --> 00:02:17.790
This map called here is not the right one.

35
00:02:17.790 --> 00:02:21.460
What I need to call is this flatMap operation.

36
00:02:21.460 --> 00:02:26.720
The flatMap operation will open all the streams that contain

37
00:02:26.720 --> 00:02:30.680
either one instance of person either nothing.

38
00:02:30.680 --> 00:02:36.780
So, if it contains one person, that person will be added to the stream.

39
00:02:36.780 --> 00:02:40.370
If the stream is empty, well nothing will be added to the stream.

40
00:02:40.370 --> 00:02:45.110
And if I run my code I can see that my file has been read properly.

41
00:02:45.110 --> 00:02:53.000
No more error, no more buggy stuff despite the fact that I have a buggy line in my file.

