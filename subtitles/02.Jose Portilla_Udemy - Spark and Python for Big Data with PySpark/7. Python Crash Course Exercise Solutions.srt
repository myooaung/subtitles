1
00:00:05,020 --> 00:00:06,410
Welcome back everybody.

2
00:00:06,420 --> 00:00:11,070
And and this lecture will be going through the solutions to the Python crash course exercises.

3
00:00:11,320 --> 00:00:13,870
Let's hop over to the exercise notebook.

4
00:00:13,870 --> 00:00:18,030
All right let's get started with the crash course exercise questions solutions.

5
00:00:18,070 --> 00:00:20,700
So the very first one was hopefully pretty simple for you.

6
00:00:20,770 --> 00:00:23,050
It's what is seven to the power four to do that.

7
00:00:23,050 --> 00:00:30,640
We just need to set seven asterisks Asterix to the power of four and then we get that split the string.

8
00:00:30,640 --> 00:00:35,040
So we have a sequel to hi there Samms I can actually just copy and paste this.

9
00:00:35,050 --> 00:00:36,130
Run that.

10
00:00:36,130 --> 00:00:43,510
And then the new cell we can say split close print sees shift enter and then we see Hi there Sam.

11
00:00:43,510 --> 00:00:49,170
Next it was given the variables planet and diameter use that format to print this following.

12
00:00:49,210 --> 00:00:54,460
So I'm going to run the cells to make sure those parameters are those variable names are saved and then

13
00:00:54,460 --> 00:01:04,540
the first one you want to do is say print and then I will say the the ammeter of Earth is and it's 12

14
00:01:04,540 --> 00:01:14,990
7 4 2 and you say can and then are called up format and then I want to replace planets and diameter

15
00:01:15,030 --> 00:01:15,640
here.

16
00:01:15,870 --> 00:01:20,810
So we'll say Earth and put curly braces there and then diameter.

17
00:01:20,830 --> 00:01:29,840
I'm going to put curly braces there and delete those and then say that format planets and then the emitter.

18
00:01:29,860 --> 00:01:35,200
So that's just kind of to show you the logic that I am using for actually inserting these variables

19
00:01:35,200 --> 00:01:41,210
into a string and if I run this I can see here the diameter is however many kilometers.

20
00:01:41,260 --> 00:01:46,240
So hopefully that made sense we're just kind of interpolating these variables into the strings here

21
00:01:46,870 --> 00:01:48,400
using curly braces.

22
00:01:48,790 --> 00:01:52,720
Next it was given this nested list use indexing to grab the word Hello.

23
00:01:52,990 --> 00:01:56,150
So this is a little complicated but let's break it down into steps.

24
00:01:57,260 --> 00:02:02,750
First thing I want to do is grab that third or fourth item in the list to index three.

25
00:02:02,780 --> 00:02:04,720
So remember I'm looking for hello here.

26
00:02:04,910 --> 00:02:10,650
So we'll go 0 1 2 and then here's three so let's see what that looks like.

27
00:02:11,770 --> 00:02:13,650
So first thing to run this.

28
00:02:13,690 --> 00:02:14,470
There we go.

29
00:02:14,800 --> 00:02:21,050
And then the next thing I want to do is actually grab index one from that list so it keep just breaking

30
00:02:21,050 --> 00:02:21,910
this down.

31
00:02:22,370 --> 00:02:24,490
And then from here it starts getting more obvious.

32
00:02:24,530 --> 00:02:27,400
So I'll say in next to that brings back.

33
00:02:27,530 --> 00:02:29,170
And sometimes people stop here.

34
00:02:29,190 --> 00:02:35,720
But you actually just want to string up the list itself you know grab one more 0 and this returns the

35
00:02:35,720 --> 00:02:36,870
string itself.

36
00:02:37,260 --> 00:02:37,840
OK.

37
00:02:38,330 --> 00:02:42,160
Then the next one up was given this dictionary grabbed the word Hello.

38
00:02:42,350 --> 00:02:46,940
I said prepared this is annoying slash tricky and I'm a little zoomed in here so he can't see the whole

39
00:02:46,940 --> 00:02:49,350
thing but I'm going to walk through it.

40
00:02:49,370 --> 00:02:52,020
So first thing let's actually run this so we have it in memory.

41
00:02:53,170 --> 00:02:59,080
Then I'm going to grab for the first key so dk one that I can see here kind of print out this list.

42
00:02:59,080 --> 00:03:04,150
So the next thing I want to do is grab a 0 1 2 and then this dictionary.

43
00:03:04,170 --> 00:03:11,620
So I will say let's index three and I get this kind of tricky dictionary and I want this value key tricky

44
00:03:12,010 --> 00:03:14,530
to begin trying to grab Hello here.

45
00:03:14,530 --> 00:03:16,750
So let's put that in.

46
00:03:17,410 --> 00:03:17,860
Tricky.

47
00:03:17,860 --> 00:03:21,340
Run this and then it says oh man and ception target etc..

48
00:03:21,340 --> 00:03:24,520
So I actually want this target.

49
00:03:24,600 --> 00:03:28,190
So what I'm going to do is say 0 1 2 3.

50
00:03:28,480 --> 00:03:34,300
So pass and 3 again and then get Target and then I just want.

51
00:03:34,310 --> 00:03:34,730
Hello.

52
00:03:34,730 --> 00:03:39,770
So that's the fourth item in the list index three and there's Hello.

53
00:03:39,770 --> 00:03:41,030
So again pretty tricky.

54
00:03:41,030 --> 00:03:44,470
Don't worry about this kind of just the practice indexing and key calls.

55
00:03:44,480 --> 00:03:49,670
But if this was really tricky for you we're not going to do anything nearly this crazy as far as that

56
00:03:50,090 --> 00:03:52,860
fact will never have really the dictionary throughout the course.

57
00:03:52,880 --> 00:03:56,590
This is kind of more just fun for you to practice.

58
00:03:56,600 --> 00:03:58,910
Now what is the main difference between a tuple and a list.

59
00:03:58,910 --> 00:04:02,750
Well a tuple is immutable doing.

60
00:04:02,920 --> 00:04:07,450
If you want to create a function that grabs the email Web site domain from a string in the form some

61
00:04:07,450 --> 00:04:09,880
user domain name dot com.

62
00:04:09,880 --> 00:04:17,830
So let's go ahead and create a function that can do this all say the f domain gets takes in an email

63
00:04:18,730 --> 00:04:26,200
and then it's going to return that e-mail and I'm going to call splits the at symbol and then just like

64
00:04:26,200 --> 00:04:27,370
we did for that tweet.

65
00:04:28,050 --> 00:04:31,090
I want to say negative one and then I'm going to run this.

66
00:04:31,120 --> 00:04:34,020
And let me fix that casing in there.

67
00:04:34,570 --> 00:04:35,100
And there it is.

68
00:04:35,110 --> 00:04:38,950
I mean that comes so what are we doing here we're just splitting on the at symbol and then grabbing

69
00:04:38,950 --> 00:04:40,290
the last word.

70
00:04:40,540 --> 00:04:50,910
So if I actually want to see what this looks like so I go say let's say this that splits on at I can

71
00:04:50,910 --> 00:04:55,980
see that I get this list so by saying negative what I'm describing that last item in the list.

72
00:04:55,980 --> 00:05:01,710
Next you wanted to create a basic function that returns true if the word dog is contained in the input

73
00:05:01,710 --> 00:05:02,430
string.

74
00:05:02,550 --> 00:05:09,090
And don't worry about edge cases like punctuation being attached to dog but do account for capitalization.

75
00:05:09,120 --> 00:05:12,900
So this one was a little tricky because we're going to do something that we didn't exactly show you

76
00:05:12,900 --> 00:05:15,960
their rectally but hopefully you're able to figure it out.

77
00:05:15,990 --> 00:05:25,170
So I'll say fine dog takes in some string and then it's going to return dog in I'm going to take that

78
00:05:25,170 --> 00:05:35,850
string lower case it and then I can split it to get a list out and then if I call find dog here so let's

79
00:05:35,850 --> 00:05:38,740
fix that casing it returns true.

80
00:05:38,760 --> 00:05:40,740
Now something I don't actually have to do.

81
00:05:40,980 --> 00:05:43,740
I don't actually need to split this in function.

82
00:05:43,740 --> 00:05:46,290
Also works for strings directly.

83
00:05:46,290 --> 00:05:56,130
So for example I can say something like as in super and that also works now in the lecture I only showed

84
00:05:56,130 --> 00:05:56,590
you this.

85
00:05:56,600 --> 00:06:01,770
An operator for a list which is why you may have wanted to do this split and why I have that in solution

86
00:06:02,040 --> 00:06:03,900
but it's not actually necessary.

87
00:06:05,490 --> 00:06:10,120
Up next you want to create a function that counts the number of times the word dog occurs in a string.

88
00:06:10,230 --> 00:06:12,690
And again ignore some edge cases.

89
00:06:13,510 --> 00:06:16,450
So I will say the F count.

90
00:06:16,510 --> 00:06:27,730
Doug as t takes in some string I want to set count equal to zero and I'll say for word in s t lower.

91
00:06:27,890 --> 00:06:36,500
Now we can go ahead and split this if the word is equal to dog then I'm going to do is add 1 to the

92
00:06:36,500 --> 00:06:40,670
counts say counts plus equal to 1.

93
00:06:40,730 --> 00:06:45,350
And in this case you really do need to split this otherwise we would be iterating for every single letter

94
00:06:45,350 --> 00:06:46,390
in the string.

95
00:06:46,410 --> 00:06:50,950
We didn't actually split and then after that's all done I'm just going to return the count.

96
00:06:50,960 --> 00:06:56,100
So let's run that and let's confirm that this works by saying count dog.

97
00:06:56,390 --> 00:06:59,000
And there it is two counts of dog in this string.

98
00:07:00,280 --> 00:07:00,810
OK.

99
00:07:01,050 --> 00:07:04,440
Finally this final problem hopefully you read it.

100
00:07:04,450 --> 00:07:06,560
If not you can just take the time to read it.

101
00:07:06,640 --> 00:07:11,990
But essentially we need to check if we've been caught speeding or not using some logic.

102
00:07:12,040 --> 00:07:14,880
Let's go around with this function.

103
00:07:14,890 --> 00:07:21,880
So I'm going to say if it is my birthday then I will take the speeding value.

104
00:07:21,890 --> 00:07:30,290
So I'm going to create speeding is equal to speed minus five else.

105
00:07:31,320 --> 00:07:34,250
Speeding is equal to speed.

106
00:07:34,260 --> 00:07:38,340
So essentially what I'm doing is if you read this I'm going to be adjusting for the birthday

107
00:07:41,190 --> 00:07:46,100
and then I'm going to say if speeding is greater than 80 mph.

108
00:07:46,170 --> 00:07:49,500
So now I'm using speeding not just speed.

109
00:07:49,530 --> 00:07:52,700
So I already accounted for whether it was not my birthday.

110
00:07:52,830 --> 00:08:03,610
I'm going to return big ticket and then whoops I make sure I line up correctly and then if so if speeding

111
00:08:04,570 --> 00:08:14,600
or else if I should say was greater than 60 then I got a small ticket.

112
00:08:14,700 --> 00:08:17,130
And then finally else I didn't get a ticket at all.

113
00:08:17,140 --> 00:08:23,850
So it went speeding and I said what I end up doing here was adjusting for that birthday right here and

114
00:08:23,850 --> 00:08:29,610
then having the additional statements to check whether I'm going above 80 or above 60 so as to shift

115
00:08:29,710 --> 00:08:32,640
and run this and make sure that I actually get the same results here.

116
00:08:32,640 --> 00:08:34,710
So 81 in true should be a small ticket.

117
00:08:34,710 --> 00:08:38,960
Let's run it let's see if we got small ticket 81 and falsely big ticket.

118
00:08:38,970 --> 00:08:40,470
Run it and I got big ticket.

119
00:08:40,860 --> 00:08:41,380
OK.

120
00:08:41,610 --> 00:08:42,560
That's it for the solutions.

121
00:08:42,570 --> 00:08:44,830
Hopefully most of these were pretty straightforward.

122
00:08:45,150 --> 00:08:50,730
If this was extremely challenging to you then I would suggest actually taking another course in the

123
00:08:50,740 --> 00:08:56,820
meantime to maybe review and try to beef up on some of these more basic Python commands.

124
00:08:57,090 --> 00:09:02,510
If this was just kind of OK then that should be fine to continue on with the rest of the course.

125
00:09:02,520 --> 00:09:07,210
A lot of the stuff we're kind of going to see behind the scenes will be dealing mainly of the data frame

126
00:09:07,210 --> 00:09:13,680
syntax and spark in which case you won't be doing crazy things like doing so many false statements or

127
00:09:14,250 --> 00:09:15,440
creating your own functions.

128
00:09:15,450 --> 00:09:20,070
Those kind of things will actually do them that much because a lot of the data from syntax has taken

129
00:09:20,070 --> 00:09:21,870
care of that for us already.

130
00:09:21,870 --> 00:09:25,490
All right thanks everybody and I'll see you at the next section of the course.
