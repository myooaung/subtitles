WEBVTT
1
00:00:05.730 --> 00:00:10.010
Welcome back to this lecture on basic operations of Sparke data frames.

2
00:00:10.290 --> 00:00:14.070
In this lecture we're mainly going to be discussing how you can filter out data.

3
00:00:14.070 --> 00:00:17.700
Once you grab it let's jump to the Jupiter note book and get started.

4
00:00:18.950 --> 00:00:23.840
I've started a new notebook at Spark data from basic operations and the first thing you need to do is

5
00:00:23.840 --> 00:00:29.600
within in your notebook is import a spark session from PI spark thought sequel and let's create a new

6
00:00:29.600 --> 00:00:30.490
spark session.

7
00:00:30.500 --> 00:00:32.110
We'll get lots of practice with this.

8
00:00:32.270 --> 00:00:35.920
But what's nice is you can use tab to quickly autocomplete a lot of this stuff.

9
00:00:36.170 --> 00:00:45.520
So we say build that app name and then we'll just call this ops and then say get or create and then

10
00:00:45.520 --> 00:00:49.510
what I will say is the physical to spark thought.

11
00:00:49.510 --> 00:00:56.110
Read that cxxviii and I will be reading is the Apple stock that V which comes with the notes.

12
00:00:56.320 --> 00:01:00.240
And when we're reading that C S V files we have the option to infer schema.

13
00:01:00.340 --> 00:01:04.530
You don't actually have that option with some files but you do have it here with CSP.

14
00:01:04.570 --> 00:01:10.540
So I want to say in first Kema is true and I also want to say header's true header just means that that

15
00:01:10.540 --> 00:01:15.090
very first row in the C S V file are actually the column names.

16
00:01:15.130 --> 00:01:22.210
So when I run this may take a little bit of time and then we'll say print schema and here I can see

17
00:01:22.210 --> 00:01:26.870
I have a date column in open high low close volume and adjust it close.

18
00:01:26.910 --> 00:01:32.610
So this all stock information and if we want to see what the actual data frame looks like I'm a little

19
00:01:32.610 --> 00:01:36.660
zoomed in here so it's going to look a little weird as far as the formatting but basically we have some

20
00:01:36.660 --> 00:01:38.130
sort of date value.

21
00:01:38.160 --> 00:01:44.780
The open price for this Apple stock the high price the low price the closing price the volume traded.

22
00:01:44.790 --> 00:01:50.400
Meaning how many units of stock were traded and the adjusted close price adjusted close price just takes

23
00:01:50.400 --> 00:01:52.820
into account things like stock splits.

24
00:01:52.830 --> 00:01:58.140
So if I want to get kind of a better view of this I can just ask for like the first three rows and then

25
00:01:58.190 --> 00:01:59.310
have these row objects.

26
00:01:59.310 --> 00:02:04.920
Maybe I just grabbed the first one and I can see I have a date time object some opening price high price

27
00:02:04.920 --> 00:02:05.600
low.

28
00:02:05.670 --> 00:02:10.030
I can see that volume is some integer which makes sense and then adjust it close.

29
00:02:10.050 --> 00:02:10.820
All right.

30
00:02:10.860 --> 00:02:13.130
Now discuss how to actually filter data.

31
00:02:13.200 --> 00:02:18.510
A large part of working of data frames is the ability to quickly filter out data based on conditions

32
00:02:18.790 --> 00:02:24.930
Sparke data frames are built on top of that SPARC sequel platform which means as we previously discussed

33
00:02:24.960 --> 00:02:29.770
if you already know sequel you could quickly and easily grab that data using sequel commands.

34
00:02:29.910 --> 00:02:32.340
However we're really going to be using that data frame methods.

35
00:02:32.340 --> 00:02:33.650
Our focus for the course.

36
00:02:33.750 --> 00:02:37.080
But let me show you quickly what it looks like using sequel.

37
00:02:37.220 --> 00:02:44.270
Imagine that I have my data frame and I want to grab all the data had a closing price less than $500.

38
00:02:44.320 --> 00:02:52.020
I say philtre and then I can actually passen direct sequel syntax meaning I can pass in the column name

39
00:02:52.020 --> 00:03:01.380
which is close less than 500 and then say that show and this will actually return everything has a closing

40
00:03:01.380 --> 00:03:03.440
price of less than 500.

41
00:03:03.600 --> 00:03:10.530
Now that's how we can use the actual DFT filter with sequel syntax and we can combine this with something

42
00:03:10.530 --> 00:03:18.030
like selects to select just some columns off of this so I want to select Open and then show the results

43
00:03:18.030 --> 00:03:18.650
here.

44
00:03:18.900 --> 00:03:25.960
So now this is showing the opening price for every single row with the closing price less than $500.

45
00:03:26.120 --> 00:03:32.640
And if I wanted to show multiple columns that I again just pass and a list of columns s.c open and close

46
00:03:33.180 --> 00:03:36.620
pass and a list run that and I see open and close.

47
00:03:36.630 --> 00:03:41.100
Now this is a lot of what we're going to be doing but really we're going to be using normal Python comparison

48
00:03:41.160 --> 00:03:42.360
operators.

49
00:03:42.360 --> 00:03:46.220
Again this looks really similar to Seacole operators except that you need to make sure you're calling

50
00:03:46.230 --> 00:03:52.230
the entire column within the data frame using that format of the bracket notation and then the column

51
00:03:52.230 --> 00:03:55.280
name inside of that let's show you some examples of this.

52
00:03:55.770 --> 00:04:02.390
So I'm going to hash tag this out as a comment and then so we can directly compare this.

53
00:04:02.430 --> 00:04:06.110
This is the way we're really going to be doing stuff in this course will say DFT filter.

54
00:04:06.210 --> 00:04:12.930
Same sort of command except I'm going to pass in the entire column of close using bracket notation and

55
00:04:12.930 --> 00:04:15.240
then use Python's own comparison operator.

56
00:04:15.240 --> 00:04:16.780
Note that syntax highlighting.

57
00:04:16.950 --> 00:04:21.630
And then let's put in some number like 500 and then I'll say that show.

58
00:04:22.740 --> 00:04:26.970
And then here we can see the various columns and I can do everything that I did previously.

59
00:04:26.970 --> 00:04:28.930
So I could just select certain columns for this.

60
00:04:28.950 --> 00:04:31.380
Maybe I want to select the volume column.

61
00:04:31.380 --> 00:04:34.130
So I do that and then I show the results there.

62
00:04:34.960 --> 00:04:36.260
And there we see the volume.

63
00:04:36.280 --> 00:04:38.860
So we're doing a lot of stuff all in one line.

64
00:04:38.860 --> 00:04:45.280
The key things to keep in mind here is that I am using dot filter and then passing in the column some

65
00:04:45.280 --> 00:04:49.140
comparison operator and then the value.

66
00:04:49.220 --> 00:04:53.810
Let's walk through an example of filtering based on multiple conditions.

67
00:04:53.810 --> 00:04:59.870
Imagine that I want to grab all the rows that have a closing price less than hundred dollars and an

68
00:04:59.930 --> 00:05:02.450
open price greater than $200.

69
00:05:02.720 --> 00:05:06.870
I'm going to walk you through to really common mistakes and then show you how to fix them.

70
00:05:07.100 --> 00:05:11.390
So you might be doing this and thinking well I'll just use the and operator.

71
00:05:11.470 --> 00:05:23.950
So I'll say DSF close and say less than two hundred and you might think I'll just use and the open greater

72
00:05:23.950 --> 00:05:28.200
than 200 and show the results Unfortunately this won't work.

73
00:05:28.210 --> 00:05:32.980
So if we run this we get a value error and we can scroll down here and it says cannot convert column

74
00:05:33.010 --> 00:05:34.120
into boolean.

75
00:05:34.180 --> 00:05:40.260
Please use this ampersand for and a pipe operator for or and the tilde symbol for it.

76
00:05:40.290 --> 00:05:42.280
So let's go ahead and change that.

77
00:05:42.280 --> 00:05:48.400
So when we're doing multiple conditions we have to use either a pipe operator for or or this sort of

78
00:05:48.400 --> 00:05:49.570
single ampersand.

79
00:05:49.570 --> 00:05:52.560
Now if I run this by itself I'll still get an error.

80
00:05:52.570 --> 00:05:54.100
Now this is a little harder to fix.

81
00:05:54.100 --> 00:05:56.700
Usually it's a really long pipe for Jey error.

82
00:05:56.750 --> 00:06:00.490
It's kind of Python for Java and you scroll down here it says some sort of error exception occurred

83
00:06:00.880 --> 00:06:03.750
and you know it doesn't really tell you what actually happened here.

84
00:06:03.760 --> 00:06:05.820
This one is a little harder to work back.

85
00:06:05.830 --> 00:06:10.170
Now the reason this is happening is because we need a distinctly separate the two conditions.

86
00:06:10.180 --> 00:06:15.170
All you have to do to fix this is make sure to pass these two conditions within parentheses themselves.

87
00:06:15.460 --> 00:06:17.020
So he passed these in parentheses.

88
00:06:17.080 --> 00:06:19.440
Make sure your print sees actually balance out here.

89
00:06:19.570 --> 00:06:21.850
You can see the syntax highlighting kind of helping us there.

90
00:06:21.970 --> 00:06:25.520
And I want to run this I actually see the results I was looking for.

91
00:06:25.720 --> 00:06:31.000
Again remember that we you're using ampersand or pipe operators you have both conditions separated in

92
00:06:31.000 --> 00:06:33.320
their own little spaces with parentheses.

93
00:06:33.610 --> 00:06:38.660
And to build on top of this example maybe a wanted everywhere where the close was less than two hundred

94
00:06:39.070 --> 00:06:42.000
and not open greater than two hundred.

95
00:06:42.070 --> 00:06:46.130
I could just add a little tildes symbol there and that creates the not operator.

96
00:06:46.270 --> 00:06:49.240
In other languages this is sometimes an exclamation point.

97
00:06:49.270 --> 00:06:54.640
So I run this and then I get essentially where the dbf close was less than two hundred and the open

98
00:06:54.640 --> 00:06:56.110
was not greater than 200.

99
00:06:56.130 --> 00:06:57.580
Using that little tilt symbol.

100
00:06:57.640 --> 00:06:59.820
So just another example they're free to check out.

101
00:06:59.950 --> 00:07:02.330
Whoops let's comment that one out.

102
00:07:02.440 --> 00:07:04.330
And now let's work on to another example.

103
00:07:04.330 --> 00:07:07.470
So just kind of walking through some typical use cases here.

104
00:07:07.600 --> 00:07:10.700
Let's say I wanted to grab a very specific row instance.

105
00:07:10.780 --> 00:07:17.250
So one of my colleagues says hey what date was the low price $197 and 16 cents.

106
00:07:17.260 --> 00:07:20.610
I say No problem I'll pass in my low column.

107
00:07:20.860 --> 00:07:23.050
I'll check for equality with whatever number.

108
00:07:23.110 --> 00:07:27.340
My colleagues said in this case let's say they said one in seven point one six.

109
00:07:27.370 --> 00:07:28.710
Obviously I already know the data.

110
00:07:28.720 --> 00:07:32.550
So I know there's an entry here so I'll say that show.

111
00:07:32.720 --> 00:07:33.670
And there it is.

112
00:07:33.830 --> 00:07:35.570
So now I can check out some day.

113
00:07:35.600 --> 00:07:37.470
Open High Low close etc..

114
00:07:37.700 --> 00:07:42.830
Now it's not so great about this particular result since I said that show it just kind of prints out

115
00:07:42.830 --> 00:07:43.990
this weird output.

116
00:07:44.120 --> 00:07:47.730
And right now since I'm a little zoom then it doesn't really look well aligned.

117
00:07:47.900 --> 00:07:51.180
So I could zoom out a little more run this again.

118
00:07:51.200 --> 00:07:52.840
And now I see kind of a nicer result.

119
00:07:52.840 --> 00:07:56.000
But that still doesn't really help me because it's just printing out the result.

120
00:07:56.030 --> 00:07:59.740
I don't actually have the data to play around with or mess with.

121
00:07:59.760 --> 00:08:02.900
So zoom back in and show you what we can do here to fix that.

122
00:08:02.930 --> 00:08:09.920
So coming back here instead of saying that show I'm going to use duck collect and if I say not collect

123
00:08:10.280 --> 00:08:17.180
then I get back a list with an actual row object which means I can then save this as a result.

124
00:08:17.570 --> 00:08:21.050
And when you're working in the real world of data a lot of times you're going to want to collect stuff

125
00:08:21.320 --> 00:08:23.730
so you can actually work with that variable later on.

126
00:08:23.810 --> 00:08:27.260
Often in this course we'll just be using We'll just be using that show.

127
00:08:27.380 --> 00:08:30.470
So you can actually see stuff but we don't really need to collect it.

128
00:08:30.620 --> 00:08:34.640
But in real life you'll probably be collecting more often than showing.

129
00:08:34.760 --> 00:08:36.270
So here's not my result.

130
00:08:36.350 --> 00:08:38.970
It's that list of a single row item.

131
00:08:39.080 --> 00:08:41.090
And then I can actually do stuff with this result.

132
00:08:41.090 --> 00:08:47.510
So maybe I want to grab for instance I say 0 here and that's the first item in that list row.

133
00:08:47.510 --> 00:08:51.800
So note the difference here between results zero and result without it.

134
00:08:51.800 --> 00:08:53.600
Let me just type result down here.

135
00:08:53.780 --> 00:08:57.850
So here with just results I have a list of a singular item.

136
00:08:58.010 --> 00:08:59.990
Result zero is that first item there.

137
00:08:59.990 --> 00:09:05.360
So just a little heads up they have to do this where it's index call and then after this I can then

138
00:09:05.480 --> 00:09:06.290
do whatever I want.

139
00:09:06.300 --> 00:09:10.570
So Rose let's actually assign this rose equal to result 2 zero.

140
00:09:10.730 --> 00:09:12.590
They can actually be turned into dictionaries.

141
00:09:12.590 --> 00:09:14.520
They actually have a lot of methods available to them.

142
00:09:14.630 --> 00:09:18.670
So you can say count an index as dictionary is actually really useful.

143
00:09:18.680 --> 00:09:24.110
So if I say as dictionary Well then I can just say OK give me the address that close or the date etc..

144
00:09:24.140 --> 00:09:28.970
So for example I can say OK get me that volume traded out that day.

145
00:09:28.970 --> 00:09:31.550
So volume and there it is.

146
00:09:31.570 --> 00:09:32.200
That's the volume.

147
00:09:32.200 --> 00:09:33.960
So that's kind of your work process.

148
00:09:34.090 --> 00:09:39.550
More realistically shown you'll have some sort of collection or some sort of filter command where your

149
00:09:39.550 --> 00:09:45.130
filter commands are just using Python comparison operators and then these ampersands or pipe operators

150
00:09:45.130 --> 00:09:49.280
for logical comparisons or adding in multiple conditions statements.

151
00:09:49.390 --> 00:09:52.450
Remember your results it returns a list of row objects.

152
00:09:52.450 --> 00:09:57.560
So you have to actually index to grab a particular object and then offer that if you want it to.

153
00:09:57.580 --> 00:10:02.980
You can just say as dictionary and very easily grab the keys from the dictionary.

154
00:10:03.440 --> 00:10:05.260
OK that was pretty useful.

155
00:10:05.260 --> 00:10:08.800
This is kind of a more realistic application of what you would be doing with SPARC.

156
00:10:08.890 --> 00:10:12.740
And we're going to be seeing this sort of thing later on throughout the course.

157
00:10:12.760 --> 00:10:14.740
Thanks and I'll see you at the next lecture.
