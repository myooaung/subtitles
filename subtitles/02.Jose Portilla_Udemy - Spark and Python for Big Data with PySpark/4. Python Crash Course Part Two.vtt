WEBVTT
1
00:00:05.130 --> 00:00:08.250
Welcome back to part two of the Python crash course.

2
00:00:08.490 --> 00:00:11.290
Let's jump back to the Jupiter note book and get started.

3
00:00:11.370 --> 00:00:15.750
In part one we discussed all the basic data structures that Python has to offer.

4
00:00:15.750 --> 00:00:20.730
Now let's discuss some of the basic operators such as comparison operators and logic operators as well

5
00:00:20.730 --> 00:00:21.970
as discussing for loops.

6
00:00:21.990 --> 00:00:27.840
And while ops Let's start comparison operators comparison operators just the lights compare to different

7
00:00:27.840 --> 00:00:33.360
variables or two different numbers to different strings etc. and then get back some sort of boolean

8
00:00:33.360 --> 00:00:35.100
value either true or false.

9
00:00:35.100 --> 00:00:39.830
For example if I want to check if someone greater than two.

10
00:00:40.110 --> 00:00:44.360
Well that returns false is one less than five that returns true.

11
00:00:44.370 --> 00:00:46.420
So let's walk through a couple more of these.

12
00:00:46.470 --> 00:00:51.560
I can do greater than or equal to I can do less than or equal to.

13
00:00:51.930 --> 00:00:56.590
And then I can check for equality using two equal science as one equal to one.

14
00:00:56.790 --> 00:01:02.450
Well that's true and I can do the same thing for strings is a equal to a.

15
00:01:02.610 --> 00:01:03.770
Well that's true.

16
00:01:03.870 --> 00:01:05.450
And no this is case sensitive.

17
00:01:05.460 --> 00:01:07.540
So capital A.

18
00:01:08.070 --> 00:01:09.870
Equal to a that's going to return false.

19
00:01:09.870 --> 00:01:12.210
Those are not exactly the same.

20
00:01:12.210 --> 00:01:15.900
And if you want to do inequality it's just an exclamation point.

21
00:01:15.900 --> 00:01:19.190
So is one not equal to two.

22
00:01:19.380 --> 00:01:20.330
Well that returns true.

23
00:01:20.340 --> 00:01:22.050
They are not equal to each other.

24
00:01:23.010 --> 00:01:29.690
Now let's discuss logic operators logic operators this alliance combine multiple comparison operations.

25
00:01:29.790 --> 00:01:38.050
For example if I want to check is one equal to 1 well that returns true.

26
00:01:38.500 --> 00:01:41.200
And if I want check two conditions and I just use and.

27
00:01:41.600 --> 00:01:43.760
And then in parentheses I can put in the new condition.

28
00:01:43.780 --> 00:01:50.300
So I want to check is one equal to 1 and is lower case a lower case a less true.

29
00:01:50.350 --> 00:01:54.580
For example I may change just one of these and that returns false.

30
00:01:54.640 --> 00:02:00.430
So I always recommend using parentheses whenever you use logic operators but you don't actually need

31
00:02:00.430 --> 00:02:02.220
them in a lot of cases.

32
00:02:02.230 --> 00:02:05.080
So if I just run this it will run fine.

33
00:02:05.080 --> 00:02:12.070
But I always recommend having parentheses makes it a little more readable in my opinion and also make

34
00:02:12.070 --> 00:02:14.320
sure that you don't get any errors.

35
00:02:14.640 --> 00:02:15.120
OK.

36
00:02:16.100 --> 00:02:20.340
So that's the and comparison and the logic operator excuse me.

37
00:02:20.600 --> 00:02:23.140
And then there's the OR logic operator.

38
00:02:23.180 --> 00:02:29.110
So a lot of times in other languages these are either ampersands or pipe operators.

39
00:02:29.300 --> 00:02:32.830
Luckily for us it's just simple English are for or.

40
00:02:32.930 --> 00:02:38.260
And then and for ends and you can do more than just two you can kind of stack these on.

41
00:02:38.330 --> 00:02:40.330
So say and maybe on.

42
00:02:40.370 --> 00:02:43.040
Three equals three that returns false again.

43
00:02:43.040 --> 00:02:48.880
So let's change one of these to be 1 run this and then that's true.

44
00:02:48.900 --> 00:02:52.140
So that's really all we need to know about logic in comparison operators.

45
00:02:52.260 --> 00:02:58.380
Now discuss if elif and L statements so these are essentially just if else if and L statements.

46
00:02:58.380 --> 00:02:59.750
This is quite simple in Python.

47
00:02:59.820 --> 00:03:02.940
All you have say is if and then whatever condition you want to track.

48
00:03:02.940 --> 00:03:10.520
So for example if one is equal to one colon and you notice when I hit enter I get an indentation there.

49
00:03:10.650 --> 00:03:16.950
So I found the pencil on whitespace so unlike other languages that will separate the sort of code blocks

50
00:03:16.950 --> 00:03:21.110
with curly braces Python just uses whitespace and indentation.

51
00:03:21.180 --> 00:03:25.440
That's why a lot of times is recommended for beginners or a lot of people really like programming in

52
00:03:25.440 --> 00:03:30.450
it because the sort of whitespace makes things readable and makes things very simplistic.

53
00:03:30.450 --> 00:03:34.640
So if one is equal to one I want to print I don't know.

54
00:03:34.800 --> 00:03:35.280
Yeah.

55
00:03:36.380 --> 00:03:37.070
And then we get out.

56
00:03:37.100 --> 00:03:37.590
Yeah.

57
00:03:37.610 --> 00:03:41.100
So let's say if one is equal to to print.

58
00:03:41.110 --> 00:03:46.690
Yeah if I run the cell I don't get anything back which makes sense because one is like two.

59
00:03:46.830 --> 00:03:49.160
So that's a simple if statement.

60
00:03:49.170 --> 00:03:58.780
Now I'll show you an if else statement so I can say if one is equal to two Prince work out if I want

61
00:03:58.780 --> 00:04:04.780
to add an else to this then all I have to do is line up the else with that if and else doesn't have

62
00:04:04.780 --> 00:04:07.240
any condition because it's kind of a last case thing.

63
00:04:07.450 --> 00:04:12.970
And then we'll say nope and let's make sure that's all in a string.

64
00:04:14.160 --> 00:04:16.010
And then shift enter and you get back.

65
00:04:16.050 --> 00:04:16.440
Nope.

66
00:04:16.440 --> 00:04:17.960
So if one is equal to two.

67
00:04:17.970 --> 00:04:19.270
Well that never executed.

68
00:04:19.440 --> 00:04:20.580
So then we get else.

69
00:04:20.650 --> 00:04:27.000
Prince Nope if you want to check for more conditions you just add an email if so that's Ilive right

70
00:04:27.060 --> 00:04:27.810
there.

71
00:04:27.930 --> 00:04:31.320
And then you can add in the condition and this condition doesn't need to be in print.

72
00:04:31.340 --> 00:04:36.770
So a lot of times in other languages you would see a princess here and then some sort of condition check.

73
00:04:37.170 --> 00:04:38.550
In Python you don't actually need it.

74
00:04:38.550 --> 00:04:40.780
Everything just works off that colon.

75
00:04:40.800 --> 00:04:46.250
So here I'll say if three to three colon and note want to hit enter.

76
00:04:46.270 --> 00:04:53.460
There's automatic indentation there will Prince second condition this true.

77
00:04:53.890 --> 00:04:55.860
So I run this second condition.

78
00:04:55.870 --> 00:04:56.590
True.

79
00:04:56.800 --> 00:04:57.460
Great.

80
00:04:57.460 --> 00:05:04.360
So that's really the basics of it if you or else statement so moving along let's talk about four loops.

81
00:05:04.440 --> 00:05:07.610
So for loops in Python are actually quite simple.

82
00:05:07.680 --> 00:05:13.200
You can for a loop through a lot of different sort of sequences or objects including lists dictionaries

83
00:05:13.260 --> 00:05:14.170
and tuples.

84
00:05:14.310 --> 00:05:18.420
We'll just focus on lists and that's basically what we're going to be using throughout the course as

85
00:05:18.420 --> 00:05:25.610
far as for loops I will say a sequence 1 two 3 let's add a couple more numbers four or five.

86
00:05:25.920 --> 00:05:28.130
So there's a C Q And just a list.

87
00:05:28.350 --> 00:05:33.720
And I'm going to say for item in that list which is sequence colon.

88
00:05:33.780 --> 00:05:38.970
Note the and then Station and then we can do something such as print every item in that sequence.

89
00:05:39.160 --> 00:05:41.940
And now that gives you back one two three four five.

90
00:05:41.970 --> 00:05:47.740
Now a common point of confusion for newcomers to Python is does it have to be this keyword item.

91
00:05:47.910 --> 00:05:48.780
Well actually no.

92
00:05:48.810 --> 00:05:52.820
This can just be any temporary real variable name that you want.

93
00:05:52.830 --> 00:05:55.320
So let's make it really obvious by calling it jelly.

94
00:05:55.700 --> 00:05:58.150
And if I run this I get back to the exact same result.

95
00:05:58.320 --> 00:05:59.130
Perfect.

96
00:05:59.160 --> 00:06:02.520
So I also don't actually need to use this variable.

97
00:06:02.760 --> 00:06:09.460
So for example I can say four elements in sequence Prince high.

98
00:06:09.900 --> 00:06:11.250
And then if I run this I get.

99
00:06:11.320 --> 00:06:12.050
Hi hi hi.

100
00:06:12.060 --> 00:06:13.180
Hi etc..

101
00:06:13.460 --> 00:06:20.640
And then I can also use something like elements plus elements and then I get two four six eight 10 so

102
00:06:20.640 --> 00:06:25.890
basically doubling each element in that sequence so that's all you have to do for a for loop is just

103
00:06:25.950 --> 00:06:31.680
for then whatever temporary element variable name you want there in and then whatever sequence you're

104
00:06:31.800 --> 00:06:32.870
using for that for loop.

105
00:06:33.000 --> 00:06:34.290
Quite simple.

106
00:06:34.290 --> 00:06:37.130
Now let's discuss while loops.

107
00:06:37.330 --> 00:06:41.030
So while loops keep running while the condition is true.

108
00:06:41.230 --> 00:06:49.150
So I will say icicle to one and then while some condition for example while I is less than 5 and currently

109
00:06:49.150 --> 00:06:55.590
it's to 1 so that makes sense I will Prince is curly brackets.

110
00:06:55.630 --> 00:07:01.620
And then I will say that format's in her I there and then I don't want this to run forever.

111
00:07:01.660 --> 00:07:10.860
So let's say I is equal to I plus 1 then I do shift center and I get 1 2 3 4.

112
00:07:10.870 --> 00:07:12.320
So it's actually happening here.

113
00:07:12.550 --> 00:07:14.620
Well is equal to 1.

114
00:07:14.650 --> 00:07:17.510
And while this condition is true I less than five.

115
00:07:17.650 --> 00:07:20.760
I'm just going to print out eyes currently I cetera.

116
00:07:21.010 --> 00:07:23.450
So it goes one two three four.

117
00:07:23.620 --> 00:07:27.530
And on that very last one it says OK well now four plus one is five.

118
00:07:27.640 --> 00:07:31.050
So I'm no longer less than five it's actually equal to it.

119
00:07:31.060 --> 00:07:32.780
So this loop ends.

120
00:07:32.860 --> 00:07:34.760
And that's the basics of a while loop.

121
00:07:35.140 --> 00:07:36.940
Let's discuss two more things.

122
00:07:36.940 --> 00:07:44.050
A range function and list comprehension often you'll want to quickly create a list of integers.

123
00:07:44.050 --> 00:07:50.980
So for example a lot of operations really common to do something like 1 2 3 4 etc and then loop through

124
00:07:50.980 --> 00:07:52.340
a certain number of items.

125
00:07:52.480 --> 00:07:56.990
But you can actually really quickly create a list that looks like this using range.

126
00:07:57.010 --> 00:08:04.870
So for Python 3 if I just say range of 5 it just gives back this sort of range generator but I can cast

127
00:08:04.870 --> 00:08:11.320
it into a list and it gets me back a list of integers and I can actually specify the starting point

128
00:08:11.380 --> 00:08:12.410
and the end point.

129
00:08:12.700 --> 00:08:17.280
So if you're ever confused on what the function actually does you can just again use shift tab and it

130
00:08:17.290 --> 00:08:18.610
will tell you the docstring.

131
00:08:18.610 --> 00:08:23.560
So it's quite easy so range you can say stop and it gives you back that range object.

132
00:08:23.560 --> 00:08:27.820
Or we could say the start and stop and you can even indicate a step size.

133
00:08:27.850 --> 00:08:29.380
So let's see them in action.

134
00:08:29.380 --> 00:08:33.450
I want to start at two and let's go five.

135
00:08:33.530 --> 00:08:38.840
So something that's kind of confusing for beginners is why is 5 not included here.

136
00:08:38.840 --> 00:08:42.660
Well you can think of it as basically up to but not including five.

137
00:08:42.710 --> 00:08:45.050
So it only goes to four.

138
00:08:45.170 --> 00:08:49.170
So we say the stop is up to but not including that integer.

139
00:08:49.190 --> 00:08:49.990
That last integer.

140
00:08:50.000 --> 00:08:53.070
And the reason for that is because indexing starts at zero.

141
00:08:53.090 --> 00:08:56.490
So you can almost think of it as kind of taking away one.

142
00:08:56.500 --> 00:08:56.980
All right.

143
00:08:57.130 --> 00:08:58.960
So that's the basis of range.

144
00:08:59.080 --> 00:09:03.510
And you'll commonly see ranged use in a for loop without this sort of list.

145
00:09:03.550 --> 00:09:07.960
All she can say for x in range 5.

146
00:09:08.320 --> 00:09:12.640
And then we'll say something like Prince PI and there we see high.

147
00:09:12.650 --> 00:09:14.010
One two three four or five.

148
00:09:14.170 --> 00:09:14.850
OK.

149
00:09:14.870 --> 00:09:17.490
So this is 0 1 2 3 4.

150
00:09:17.690 --> 00:09:20.470
So four is up to nine including five there.

151
00:09:20.660 --> 00:09:21.980
And that's the basics of range.

152
00:09:21.980 --> 00:09:26.180
And we'll see that every once in a while not too often throughout the course but it's common enough

153
00:09:26.180 --> 00:09:27.590
that you should know it.

154
00:09:27.680 --> 00:09:30.380
Finally let's discuss list comprehension.

155
00:09:30.530 --> 00:09:34.080
So list comprehension is a really useful feature of Python.

156
00:09:34.310 --> 00:09:37.220
Often you'll find yourself trying to build out a list.

157
00:09:37.220 --> 00:09:38.830
So let me show you an example of that.

158
00:09:39.780 --> 00:09:49.360
Point create a list one two three four five and then I will say out is equal to an empty list so just

159
00:09:49.460 --> 00:09:50.590
square brackets.

160
00:09:50.900 --> 00:10:01.590
And I'm going to say for now an X take out and append that number.

161
00:10:02.520 --> 00:10:05.020
Squared.

162
00:10:05.180 --> 00:10:10.270
And then outside of this for loop note my indentation how it's lining up at the fore.

163
00:10:10.340 --> 00:10:14.050
So once that for loop is done I'm going to print that out list.

164
00:10:14.040 --> 00:10:16.790
So let's run this and we get what we expect.

165
00:10:16.790 --> 00:10:19.340
1 4 9 16 25.

166
00:10:19.400 --> 00:10:20.490
So what am I doing here.

167
00:10:20.540 --> 00:10:26.810
Well I have out as mantillas and I'm saying for OK for every number in that X append the squared number

168
00:10:26.810 --> 00:10:30.560
of it and then at the end print out that entire list.

169
00:10:30.560 --> 00:10:32.670
So 1 4 9 16 25.

170
00:10:32.930 --> 00:10:41.090
This sort of action is so common in Python to build out a list this way that they've created essentially

171
00:10:41.090 --> 00:10:45.980
a shortcut a way to flatten this out into what's known as a list comprehension.

172
00:10:46.040 --> 00:10:50.520
So I'm going to convert this sort of for loop into a list comprehension.

173
00:10:50.720 --> 00:10:58.960
And the way we do that is we say put everything inside the square brackets and then we start by saying

174
00:10:59.050 --> 00:10:59.640
no.

175
00:11:01.780 --> 00:11:10.080
To the power of two or whatever you're trying to append and then we say for now I'm in.

176
00:11:10.100 --> 00:11:18.200
And then the iterable was X and if I run this this gives him back the exact same thing that this for

177
00:11:18.200 --> 00:11:18.870
loop.

178
00:11:18.940 --> 00:11:26.230
So you can think of it as just another way of writing out a for loop that particularly creates lists.

179
00:11:26.300 --> 00:11:32.090
So if you ever find yourself constantly appending to a new list inside of a for loop you may want to

180
00:11:32.090 --> 00:11:38.210
consider list comprehension as a possible solution just to flatten this out as far as readability is

181
00:11:38.210 --> 00:11:39.110
concerned.

182
00:11:39.140 --> 00:11:45.440
For newcomers this is not as readable as a for loop but once you end up working with Python a lot you'll

183
00:11:45.440 --> 00:11:47.390
end up preferring list comprehension.

184
00:11:47.570 --> 00:11:49.370
It's slightly faster.

185
00:11:49.370 --> 00:11:51.980
There's a very tiny performance boost there.

186
00:11:52.130 --> 00:11:55.230
But for certain situations it's negligible.

187
00:11:55.720 --> 00:11:56.230
OK.

188
00:11:56.540 --> 00:11:57.980
So that's really all we want to discuss.

189
00:11:57.980 --> 00:12:04.210
For Part two coming up next we'll discuss functions lambda expressions and then methods as well.

190
00:12:04.510 --> 00:12:05.110
OK.

191
00:12:05.420 --> 00:12:06.920
Thanks and I'll see you at the next lecture.
