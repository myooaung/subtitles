1
00:00:05,110 --> 00:00:08,650
Welcome back to three of the Python crash course.

2
00:00:08,650 --> 00:00:12,850
We're going to end things here by talking about functions and some special methods you can use off of

3
00:00:12,850 --> 00:00:14,220
Python objects.

4
00:00:14,440 --> 00:00:18,200
Let's jump back to that Jupiter notebook and finish up.

5
00:00:18,200 --> 00:00:23,090
All right let's start off by talking about functions and how you can create your own custom functions.

6
00:00:23,090 --> 00:00:27,630
The key word in creating a function is DPF and then whatever you want to call the function.

7
00:00:27,630 --> 00:00:34,160
So I'll say my underscore for you and see for func and it's going to be a really simple function it's

8
00:00:34,160 --> 00:00:35,380
not going to take any parameters.

9
00:00:35,380 --> 00:00:39,740
We have a colon there and then whatever you want to have happen when you call the functions of for example

10
00:00:39,750 --> 00:00:44,360
Prince hello and then make sure to run this.

11
00:00:44,360 --> 00:00:49,160
So now the function has been defined I can see here the cells been run and then I can actually call

12
00:00:49,160 --> 00:00:53,150
my phunk and I see hello back.

13
00:00:53,150 --> 00:00:59,360
Now a common point of confusion sometimes is you'll just type my phunk run this in a Will report back

14
00:00:59,420 --> 00:01:03,900
what the function actually is so they'll say oh my funk that well that's a function.

15
00:01:03,940 --> 00:01:06,370
So then the main file thought my phunk.

16
00:01:06,480 --> 00:01:10,730
Do you actually want to do it if you want to execute the function how does open and close parentheses

17
00:01:10,730 --> 00:01:11,410
there.

18
00:01:11,750 --> 00:01:14,100
If you would like to add parameters to a function.

19
00:01:14,270 --> 00:01:22,310
For example let's give a parameter a name then it will take for example Hello and a simple way can pass

20
00:01:22,310 --> 00:01:24,920
that in is plus name.

21
00:01:24,960 --> 00:01:32,400
So now I'm going to run this redefine it and then say my func and passen Jose Ferrer and this says Hello

22
00:01:32,430 --> 00:01:32,860
Jose.

23
00:01:32,880 --> 00:01:38,580
So it's stewing is concatenating strings together so that's a little special method you can use for

24
00:01:38,580 --> 00:01:42,380
strings and I can add a space in there run these two again.

25
00:01:42,380 --> 00:01:42,920
Now I see.

26
00:01:42,920 --> 00:01:43,890
Hello Jose.

27
00:01:44,070 --> 00:01:47,170
If I don't actually provide one here I will get an error.

28
00:01:47,530 --> 00:01:54,060
They'll say type error intellectually say hey I'm missing one required positional argument called name.

29
00:01:54,060 --> 00:02:00,210
If you want to have a default parameter or argument value you can just say names equal to and we'll

30
00:02:00,210 --> 00:02:07,740
say for example No-Name and then I'm going to run this.

31
00:02:07,790 --> 00:02:12,060
And now if I just pass this in a Jose it will still work.

32
00:02:12,080 --> 00:02:13,380
Say Hello Jose.

33
00:02:13,580 --> 00:02:19,220
But if I for some reason forget it's going to go to the default value so I can run this and I'll say

34
00:02:19,250 --> 00:02:21,250
hello No-Name.

35
00:02:21,250 --> 00:02:26,990
And that's the basics of functions and a real quickly if you want to have a docstring in your function

36
00:02:27,650 --> 00:02:30,510
you can do it with a set of triple quotes.

37
00:02:30,510 --> 00:02:32,410
These can be either double or single.

38
00:02:32,660 --> 00:02:37,360
And this is where you can describe what the function does so I can say something like this.

39
00:02:37,370 --> 00:02:45,910
Print outs the username and then I'm going to shift enter to run that.

40
00:02:45,910 --> 00:02:50,920
And now with my own function I can do shift tab and they'll say the signature of the function and then

41
00:02:50,980 --> 00:02:51,930
the docstring.

42
00:02:52,090 --> 00:02:58,090
This prints out the username so I can see here that it actually looks for the documentation for this

43
00:02:58,090 --> 00:02:58,770
function.

44
00:02:58,870 --> 00:03:02,370
Whenever I call shift tab which is kind of a nice feature.

45
00:03:02,380 --> 00:03:10,160
All right so let's actually show you one last function that will kind of show a more realistic example

46
00:03:10,160 --> 00:03:17,980
so I'll say the square and it takes in some value X and then it's going to return x.

47
00:03:17,980 --> 00:03:20,520
So what's the difference between Prince and return.

48
00:03:20,560 --> 00:03:27,520
So print just displays the actual value return allows you to save the actual object or whatever the

49
00:03:27,520 --> 00:03:30,180
function happens to do and save it to a variable.

50
00:03:30,430 --> 00:03:35,860
So my little function here Square is going to take some sort of number x and then it's going to return

51
00:03:36,550 --> 00:03:38,610
the square of it.

52
00:03:38,680 --> 00:03:46,220
So I'm going to say result is equal to square of two.

53
00:03:46,360 --> 00:03:49,690
And then if I check on my results I notice that it's four.

54
00:03:49,720 --> 00:03:55,450
So if the return keyword I can actually save this as a variable if I just printed this.

55
00:03:55,450 --> 00:04:02,940
So if I just said Prince and put that there then what would have happened was I would get none back

56
00:04:02,950 --> 00:04:06,180
so if I rerun these I get back nothing.

57
00:04:06,220 --> 00:04:07,370
As a result.

58
00:04:07,680 --> 00:04:10,380
So no says result is equal to square 2.

59
00:04:10,570 --> 00:04:12,310
And when I run this it prints it out.

60
00:04:12,310 --> 00:04:15,830
But then when I ask for what result was it's actually none.

61
00:04:15,880 --> 00:04:19,690
And if it's check the type of result they'll say it's a non type.

62
00:04:19,690 --> 00:04:26,140
The reason for that being is that they only printed out the value for it didn't actually return it.

63
00:04:26,140 --> 00:04:28,970
And the only way I can save is if I return it.

64
00:04:28,990 --> 00:04:35,710
So the only way I can do the assignment to a new variable is by using that keyword return then rerunning

65
00:04:35,710 --> 00:04:36,400
all this.

66
00:04:36,400 --> 00:04:37,950
Notice how I run this again.

67
00:04:38,020 --> 00:04:42,370
I don't actually see the printout result because I was returning it in order to save it to this variable

68
00:04:42,370 --> 00:04:44,410
result which means I have four.

69
00:04:44,440 --> 00:04:49,960
And if I check the type of result now I get this integer type OK.

70
00:04:50,280 --> 00:04:53,550
Now let's discuss lambda expressions lambda expressions.

71
00:04:53,540 --> 00:04:57,840
It's just the way you can quickly type an anonymous function.

72
00:04:57,870 --> 00:04:59,660
That's also another name for it.

73
00:04:59,700 --> 00:05:04,440
Essentially if you only plan on using a function one time maybe you don't want to rewrite the entire

74
00:05:04,440 --> 00:05:04,940
function.

75
00:05:04,950 --> 00:05:09,230
Give it a formal name if you want something kind of quick and easy.

76
00:05:09,330 --> 00:05:17,520
So the way you can do that is for example if I had the ref will call this times 2 it takes in some variable.

77
00:05:17,520 --> 00:05:18,500
They are.

78
00:05:18,760 --> 00:05:22,920
And then it's going to return the r times to.

79
00:05:22,930 --> 00:05:28,570
So for example I can say times 2 and notice I use tabbed out of complete that so it's a little faster.

80
00:05:28,570 --> 00:05:31,690
So it says times 2 and it returns 20 for me.

81
00:05:31,690 --> 00:05:33,570
Notice that it's returning it not printing it out.

82
00:05:33,640 --> 00:05:36,910
So I have that a little out next that cell.

83
00:05:36,970 --> 00:05:41,140
The way I can use the land expression to rewrite this is the following.

84
00:05:41,260 --> 00:05:47,320
Use the land the key word the input colon and then you want what you want the output to be.

85
00:05:47,320 --> 00:05:49,840
So for example V-A are times two.

86
00:05:50,200 --> 00:05:54,040
And now this will behave really similar to the function.

87
00:05:54,040 --> 00:05:59,980
For now it's not really clear how to use these when they use these along another outside function.

88
00:06:00,190 --> 00:06:05,230
So we'll talk about this later on the course when it shows up but I just want you to be aware of what

89
00:06:05,230 --> 00:06:07,850
the land expression is essentially an anonymous function.

90
00:06:08,020 --> 00:06:12,290
So it's a different way of rewriting this whole thing in just one go.

91
00:06:12,370 --> 00:06:17,580
But the issue here is I can only call this one time I don't have a name assigned to it.

92
00:06:17,650 --> 00:06:21,530
So what's the actual relationship between this and this.

93
00:06:21,550 --> 00:06:28,030
Well I can of convert this function to show you first thing I need to do is take away the name take

94
00:06:28,030 --> 00:06:36,470
away this the key word replace it with lambda take away these print seize take away the return keyword

95
00:06:37,070 --> 00:06:42,230
and then put it all in one line and that's never a function to the lambda expression.

96
00:06:42,320 --> 00:06:47,390
And later on throughout the course if we ever use the land expression I'll touch a little more detail

97
00:06:47,540 --> 00:06:48,930
and how we actually use this.

98
00:06:48,950 --> 00:06:51,130
I just want you to see it for now.

99
00:06:51,140 --> 00:06:51,950
All right.

100
00:06:51,950 --> 00:06:56,080
Moving along I want to talk about a few methods that are going to be useful to you throughout the course.

101
00:06:56,830 --> 00:07:04,300
So methods on strings when you create a string called Esty and it's going to say hello my name is Sam

102
00:07:04,300 --> 00:07:05,900
with a capital S..

103
00:07:05,920 --> 00:07:07,110
Do you ever want a lower case.

104
00:07:07,120 --> 00:07:12,710
Everything in a string and just say estopped lower close parentheses here and it returns back everything

105
00:07:12,710 --> 00:07:14,140
lower cased in that string.

106
00:07:14,140 --> 00:07:20,100
So notice here s on Sam has been lower case we've seen upper before it's exact same thing.

107
00:07:20,140 --> 00:07:21,760
The upper case is everything.

108
00:07:22,030 --> 00:07:28,540
A really useful method is split which is going to splits by default on whitespace and return a list.

109
00:07:28,540 --> 00:07:33,760
So it splits that string into a list based off the whitespace.

110
00:07:33,760 --> 00:07:38,870
If you actually want to split on a particular string value you can clarify that as well.

111
00:07:38,890 --> 00:07:42,460
For example I'm going to create a tweet here.

112
00:07:42,940 --> 00:07:47,390
And later I will see how we can do Sparke streaming for tweets but I'm going to say hello.

113
00:07:47,680 --> 00:07:57,250
Hash tag sports run that and then I'm going to if I just say splits by default it splits on whitespace

114
00:07:57,250 --> 00:07:57,910
so it splits.

115
00:07:57,910 --> 00:07:58,500
Hello.

116
00:07:58,630 --> 00:08:03,190
And the hash tag sports but maybe I actually want to split on hash tags so I want to analyze Twitter

117
00:08:03,190 --> 00:08:03,890
somehow.

118
00:08:04,180 --> 00:08:09,430
Well I can just pasan hash tag there and then it's going to split on the hash tag.

119
00:08:09,430 --> 00:08:14,350
And notice how the hash tag is no longer in this list because that is what was split on and then if

120
00:08:14,350 --> 00:08:18,500
I want to grab the actual item from this that was in the hash tag.

121
00:08:18,790 --> 00:08:25,020
Assuming that the hash tag is all the way at the end I could just say something like negative one and

122
00:08:25,020 --> 00:08:26,840
then that returns a string sports.

123
00:08:26,850 --> 00:08:30,580
Obviously not every case will have a hash tag although at the end of the string.

124
00:08:30,690 --> 00:08:37,100
But this kind of just show you a little more realistic example of how you can actually use split OK.

125
00:08:37,340 --> 00:08:42,640
A couple of more things I want to show you is how you can grab the keys and items of a dictionary.

126
00:08:43,580 --> 00:08:52,770
So just quickly now if I create a dictionary with K-1 the one so key one value one and then maybe K

127
00:08:52,790 --> 00:08:55,790
to the two.

128
00:08:55,810 --> 00:09:01,390
If I don't grab all the keys in the dictionary I can just say that keys and I get this dictionary keys

129
00:09:01,900 --> 00:09:09,790
where I see K-1 K-2 followed to grab all the items I can just grab these kind of tuple item pairs so

130
00:09:10,030 --> 00:09:14,410
K-2 V-2 K-1 of one note that the order here is not retained.

131
00:09:14,410 --> 00:09:16,600
Again dictionaries not retain any order.

132
00:09:16,600 --> 00:09:18,170
We won't actually see these.

133
00:09:18,300 --> 00:09:23,290
Basically all throughout the course but just something to be aware of in case why are you using a stack

134
00:09:23,290 --> 00:09:27,030
overflow or something you kind of run into these on your own.

135
00:09:27,040 --> 00:09:32,500
Finally I want to show how you can pop something off of the list or check if something is inside of

136
00:09:32,500 --> 00:09:33,130
a list.

137
00:09:33,930 --> 00:09:43,950
I'll say my list is to 1 2 3 if I want to grab and remove the last item in a list I can say a new variable

138
00:09:43,950 --> 00:09:52,980
last is equal to my list and then say Pop close princes and if I check my list it's missing that last

139
00:09:52,980 --> 00:10:00,050
item that number three and I've saved it to this variable last so that you can remove an item from a

140
00:10:00,050 --> 00:10:00,640
list.

141
00:10:00,680 --> 00:10:06,320
At least the last item if you want to remove an item at a specific index you can just pass that into

142
00:10:06,350 --> 00:10:07,220
pop.

143
00:10:07,220 --> 00:10:12,170
So for example it's redefined my list again as 1 to 3.

144
00:10:12,200 --> 00:10:14,720
So if I check my list I have all three numbers there.

145
00:10:14,720 --> 00:10:20,720
And then I want to pop off the first element a pop and then pass in the index zero to indicate that

146
00:10:20,720 --> 00:10:27,780
I want to pop off the first element and I'm going to save that as now first run this I can check my

147
00:10:27,780 --> 00:10:33,840
list just have two and three and then I can check first and it's one if I don't I check if an item is

148
00:10:33,900 --> 00:10:34,810
inside of a list.

149
00:10:34,830 --> 00:10:42,430
I can just use the in operator so I can say X in 1 to 3 that returns false.

150
00:10:42,490 --> 00:10:48,070
If I ask for one in the list one to three that returns true.

151
00:10:48,070 --> 00:10:53,620
So I could also say something like two in my list that I defined earlier and that also returns true

152
00:10:53,650 --> 00:10:56,320
because my list is now 2 and 3.

153
00:10:56,440 --> 00:11:01,540
Coming up next we have a really quick review exercise notebook that's optional in case you just want

154
00:11:01,540 --> 00:11:05,980
to clarify and make sure that you really understood everything we're talking about here are totally

155
00:11:05,980 --> 00:11:11,230
optional you have to do it but it would be a quick review just to confirm that you understood everything

156
00:11:11,230 --> 00:11:12,790
and you're ready to go to.

157
00:11:12,790 --> 00:11:16,390
Talking about Sparc and Python and data frames and all that cool stuff.

158
00:11:16,420 --> 00:11:18,220
Thanks everybody and I'll see you at the next lecture.
