1
00:00:05,610 --> 00:00:11,270
Hello everyone and welcome to part two of the Twitter project for Sparke streaming our next task is

2
00:00:11,270 --> 00:00:15,950
to write a script that will connect to Twitter for streaming and this will be a lifestyle that we're

3
00:00:15,950 --> 00:00:18,100
going to call later on in the Jupiter notebook.

4
00:00:18,100 --> 00:00:19,360
So let's get started.

5
00:00:19,400 --> 00:00:24,000
I'm going to write this all a Jupiter note book but then I will save as a thought PI file.

6
00:00:24,330 --> 00:00:27,620
Ok I can open up a Jupiter note book now.

7
00:00:27,620 --> 00:00:32,030
All right so here I am at a Jupiter note book that's running inside Ubuntu running on a virtual box

8
00:00:32,450 --> 00:00:37,070
and I'm going to write everything into a Jupiter note book but I will download this as a PI file script

9
00:00:37,290 --> 00:00:39,500
that we're going to run later on.

10
00:00:39,500 --> 00:00:47,510
So start off I'm going to import tweet pire tweet pee and then say from tweet prior to the import and

11
00:00:47,510 --> 00:00:55,070
the first one is off händler and I'm choosing tabbed autocomplete and then the next one is just stream.

12
00:00:55,400 --> 00:01:05,610
So we will run that and then actually I also want to import from twe pie streaming in poor stream listener.

13
00:01:05,800 --> 00:01:10,490
And then I also want to import our socket and import Jason.

14
00:01:10,600 --> 00:01:12,190
So those will be imports.

15
00:01:12,250 --> 00:01:15,280
And then I want to also set up my credentials.

16
00:01:15,550 --> 00:01:20,200
So we'll set up some variables consumer key is equal to.

17
00:01:20,500 --> 00:01:22,390
And then we'll leave that as an empty string.

18
00:01:22,630 --> 00:01:32,320
And then consumer underscore secret and that's an empty string and then access underscore token equal

19
00:01:32,320 --> 00:01:33,490
to an empty string.

20
00:01:33,550 --> 00:01:39,310
And then finally access secret to an empty string.

21
00:01:39,340 --> 00:01:39,580
All right.

22
00:01:39,580 --> 00:01:44,020
Now keep in mind you are actually going to have to fill in those strings with your own credential values.

23
00:01:44,020 --> 00:01:49,000
Right now I'm leaving them blank but later on past the video lecture I will actually fill in those.

24
00:01:49,020 --> 00:01:54,130
And so make sure you fill in your consumer key or consumer secret the X token and the access secret

25
00:01:54,130 --> 00:01:55,880
key from the previous lecture.

26
00:01:55,900 --> 00:01:56,650
So I will run that.

27
00:01:56,650 --> 00:01:57,910
Leave them playing for now.

28
00:01:58,030 --> 00:02:03,730
So let's continue on the next thing we're going to do is create a class that will listen to the tweets

29
00:02:03,730 --> 00:02:09,610
themselves and then we'll create one function that actually sends the data through a socket school say

30
00:02:09,610 --> 00:02:18,740
class and we're going to call this class tweet listener and it's going to inherit from streamlets inner

31
00:02:20,600 --> 00:02:30,100
and then we're going to say the F created in it's and say self and it's going to take an A C socket

32
00:02:33,310 --> 00:02:42,830
and then we're saying self taught it will say the client's socket sequel to socket.

33
00:02:42,860 --> 00:02:45,430
Let's make sure I spell that right.

34
00:02:45,450 --> 00:02:46,980
C socket.

35
00:02:47,010 --> 00:02:48,650
There we go.

36
00:02:48,770 --> 00:02:54,800
And the next cigarillos you say the F and create a method called on data that takes in self and data

37
00:02:54,860 --> 00:02:58,270
as a parameter and then we're going to do a bit of a try.

38
00:02:58,280 --> 00:03:03,940
Commands let me scroll down a little bit we see more room and then I'm going to try to do the following.

39
00:03:05,250 --> 00:03:13,950
I'm going to try to create a message that's going to come from Jason load's data so I'm going to load

40
00:03:13,950 --> 00:03:18,090
in the Jaisalmer file and then I'm actually going to print out the message itself.

41
00:03:18,360 --> 00:03:25,400
So the message is under the text and then I'm also going to encode this with UTF 8.

42
00:03:25,440 --> 00:03:31,230
That way if I get emojis and stuff they'll at least show up as blanks instead of causing an error and

43
00:03:31,230 --> 00:03:34,970
then I'm going to say self clients.

44
00:03:36,310 --> 00:03:42,940
Sockets we can just have autocomplete that I'm going to call send and I'm going to send that message

45
00:03:42,940 --> 00:03:52,720
over animals so again going to uncoated with UTF 8 so we could also just make that a variable.

46
00:03:52,770 --> 00:03:53,980
So I wanted to try to do that.

47
00:03:54,030 --> 00:03:57,950
And then if that all worked I'm going to return true if for some reason it didn't work.

48
00:03:57,960 --> 00:04:06,940
I'm going to have some accept call sort of say except that I'm going to say base exception and I'll

49
00:04:06,940 --> 00:04:14,750
call that as E and then I'll print air comma e.

50
00:04:14,770 --> 00:04:20,080
So I was going to print whatever that base exception was in filing to return true here.

51
00:04:20,110 --> 00:04:20,900
OK.

52
00:04:21,070 --> 00:04:22,760
And then that's on data.

53
00:04:22,870 --> 00:04:31,450
If there actually isn't Aircel say on an air and it takes self and status in it's just going to print

54
00:04:31,450 --> 00:04:35,680
the current status and then it's going to return true.

55
00:04:38,240 --> 00:04:43,600
OK so now we're going to let me just run that cell since that's all we need in it.

56
00:04:45,310 --> 00:04:49,240
So now we're going to create one last function and then finally we'll create some code that will actually

57
00:04:49,240 --> 00:04:53,740
run the entire script so we'll create a function called send data.

58
00:04:55,200 --> 00:04:56,660
That takes in a client socket.

59
00:04:56,700 --> 00:05:02,040
So I'll say C underscore socket and we'll set up.

60
00:05:02,070 --> 00:05:09,560
This is basically when I set up our connection so I'll say oh off handler takes in our consumer key.

61
00:05:09,580 --> 00:05:14,870
Whoops takes in our consumer key and takes in our consumer secret

62
00:05:17,620 --> 00:05:23,520
and then we're going to call a method called Access tokens.

63
00:05:25,090 --> 00:05:35,150
X-ists underscore token and that takes in our access token and also takes in our access secret and the

64
00:05:35,150 --> 00:05:46,860
next thing you're going to set up Twitter underscore stream is equal to a stream object with her authorization

65
00:05:47,610 --> 00:05:52,370
and then we'll call an instance of Thweatt listener and Whoops looks like I have a D in there.

66
00:05:52,370 --> 00:05:55,380
So let me fix that up here.

67
00:05:55,470 --> 00:05:57,080
Tweet listener.

68
00:05:57,130 --> 00:05:58,430
I'm going to run that again.

69
00:05:58,720 --> 00:05:59,410
OK.

70
00:05:59,430 --> 00:06:00,530
So tweet listener.

71
00:06:00,600 --> 00:06:06,830
And then we're going to pass in that client socket inside this.

72
00:06:06,970 --> 00:06:08,490
Make sure that princes are balanced.

73
00:06:08,530 --> 00:06:16,710
And then finally we'll call Twitter stream again and I'm going to filter based off a track and you're

74
00:06:16,710 --> 00:06:21,270
going past this is a list of a single string and this is basically the topic.

75
00:06:21,310 --> 00:06:22,240
You can pick.

76
00:06:22,240 --> 00:06:27,310
So essentially we're doing is send data we are connected to Twitter and this Twitter stream we're going

77
00:06:27,310 --> 00:06:33,670
to filter everything by a certain string so whatever string we put in here has to be in the tweet in

78
00:06:33,670 --> 00:06:35,100
order for us to get it.

79
00:06:35,110 --> 00:06:40,450
So you should probably try to pick something that's going to be relatively popular that we are not waiting

80
00:06:40,450 --> 00:06:42,450
forever for the tweets to come in.

81
00:06:42,620 --> 00:06:49,520
Now relatively popular can be super wide said since for so many users on Twitter.

82
00:06:49,540 --> 00:06:55,450
So I will say something like soccer or guitar that's relatively popular.

83
00:06:55,450 --> 00:07:00,270
Try to avoid really hot topics Otherwise you'll get a flood of stuff.

84
00:07:00,370 --> 00:07:10,960
So we have Deif send data and then finally and on to say if name is equal to underscore Maine is essentially

85
00:07:10,960 --> 00:07:22,080
a way you can make files run on say s is equal to SACA socket close Prince he's going to set my host

86
00:07:22,090 --> 00:07:26,960
to be the local host so 6:59 point zero point zero point one.

87
00:07:27,010 --> 00:07:33,670
So it's my local machine learning to open up a port will open up port 5 5 5 5 basically just reserving

88
00:07:33,670 --> 00:07:35,730
a port for a connection service.

89
00:07:35,810 --> 00:07:42,150
I'm going to say estop bind and I'm going to pass on a tuple of the host and the ports and the princes

90
00:07:42,160 --> 00:07:43,530
there how there's two of them.

91
00:07:43,840 --> 00:07:47,110
Then I'm going to print a statement letting it know that it's running.

92
00:07:47,200 --> 00:07:55,120
So I'll say listening on port and I already know my ports $555 person by 5:5 they're.

93
00:07:55,340 --> 00:07:57,570
And then let's put a G in there.

94
00:07:57,710 --> 00:08:05,670
Just when I was running so listening on port 5:55 and then we'll say s listen and we're going to wait

95
00:08:06,000 --> 00:08:09,810
a couple seconds so in this argument you can pass and how many seconds you want to listen.

96
00:08:09,870 --> 00:08:14,400
So say five and then we'll say a little tuple unpacking.

97
00:08:14,430 --> 00:08:20,600
See a DDR at our is equal to estop accepts.

98
00:08:20,790 --> 00:08:29,380
So that will establish connection with the client and then we will finally say send data and then person

99
00:08:29,400 --> 00:08:33,510
C and then run that and we are good to go.

100
00:08:33,540 --> 00:08:34,050
OK.

101
00:08:35,530 --> 00:08:39,670
So upon running this your connection will actually try to attempt to do our thing.

102
00:08:39,670 --> 00:08:44,680
So what we're gonna do is sit kernel interrupts and then going to keyboard interrupt that's that's not

103
00:08:44,680 --> 00:08:45,660
a big issue.

104
00:08:45,700 --> 00:08:52,200
And then I'm also going to clear that up or say cell all output clear.

105
00:08:52,310 --> 00:08:52,750
All right.

106
00:08:52,970 --> 00:08:56,150
So we have everything cleared and they're in Jupiter note book format.

107
00:08:56,150 --> 00:09:00,950
So let's save this into a PI file and then we'll kind of do a quick review through that dot PI file

108
00:09:00,950 --> 00:09:01,890
itself.

109
00:09:01,890 --> 00:09:05,860
I will say file download as pie.

110
00:09:05,970 --> 00:09:09,710
Select it then it's going ask me how do I want to do it to open.

111
00:09:09,740 --> 00:09:11,000
And I say save.

112
00:09:11,330 --> 00:09:13,600
And right now it's called Untitled 9.

113
00:09:13,610 --> 00:09:16,160
Let me actually change that cells at cancell.

114
00:09:16,340 --> 00:09:27,060
Let me view my header and I'm going to call this something like tweet read so I'll a tweet read it.

115
00:09:27,080 --> 00:09:27,620
OK.

116
00:09:27,620 --> 00:09:28,780
Now let me down with this.

117
00:09:28,800 --> 00:09:35,620
The file download as the pie to read that pie that looks good to me I'll select Save file.

118
00:09:35,690 --> 00:09:36,790
OK.

119
00:09:36,820 --> 00:09:38,750
Now it's going to save that file.

120
00:09:38,840 --> 00:09:41,490
So if I head over here now I have this python file.

121
00:09:41,630 --> 00:09:44,020
So let me put that somewhere I can find it.

122
00:09:44,030 --> 00:09:46,650
Actually it fits in the Downloads folder it should be fine.

123
00:09:47,120 --> 00:09:48,410
So Downloads folder.

124
00:09:48,440 --> 00:09:51,950
I'll just remember that it's there is totally fine print desktop wherever.

125
00:09:51,950 --> 00:09:55,360
Just make sure you are able to find that once you're at your terminal.

126
00:09:55,580 --> 00:10:02,090
So you'll see that their tweet read that pie an organ to do is double click this and open it.

127
00:10:02,090 --> 00:10:04,280
And now I can see what it actually looks like.

128
00:10:05,190 --> 00:10:09,480
So notice here because I was using the Juber notebook I have some commented in and out cells but that's

129
00:10:09,480 --> 00:10:10,490
totally OK.

130
00:10:10,500 --> 00:10:12,750
Everything that's here is what we want.

131
00:10:12,990 --> 00:10:17,150
So let's zoom in and explain line by line what's actually happening here.

132
00:10:17,370 --> 00:10:19,450
And I'm going to go back to the Juber notebook to do that.

133
00:10:21,160 --> 00:10:21,590
OK.

134
00:10:21,770 --> 00:10:25,010
So the very first couple of cells we're just importing stuff that we need.

135
00:10:25,160 --> 00:10:30,080
Then when you're ready to go you're going to need to fill out your consumer key consumer secret access

136
00:10:30,080 --> 00:10:31,420
token and access secret key.

137
00:10:31,430 --> 00:10:33,010
So this technically isn't ready yet.

138
00:10:33,040 --> 00:10:34,930
You have to fill it in with your information.

139
00:10:35,000 --> 00:10:37,930
Then we have the tweet Lisner which is essentially going to listen.

140
00:10:38,210 --> 00:10:43,820
So once we actually get a connection with our client data we're going to do is use the Jaison library

141
00:10:43,820 --> 00:10:47,800
to load in that data and we're going to grab that text message and then send it through the socket.

142
00:10:47,960 --> 00:10:52,100
And if there's an exception or some sort of error we're going to print it out and on air you know we're

143
00:10:52,100 --> 00:10:56,000
going to print that particular status of the error then with this send data.

144
00:10:56,000 --> 00:11:00,830
What this is doing is it's using our actual consumer secret keys or access tokens.

145
00:11:00,830 --> 00:11:06,110
It's connecting everything and actually launching the Twitter stream and filtering out those tweets

146
00:11:06,110 --> 00:11:08,770
for whatever keep track you're looking for in this case.

147
00:11:08,780 --> 00:11:12,330
I'm going to look for tweets that have guitars.

148
00:11:12,520 --> 00:11:17,100
Then what I'm going to do is actually run everything with this so we set up the socket.

149
00:11:17,100 --> 00:11:18,090
The host is ready to go.

150
00:11:18,090 --> 00:11:20,170
We have our power locally.

151
00:11:20,190 --> 00:11:25,650
So in my you Pernod pick that I'm going to run later on I can connect to this port 555 and do everything

152
00:11:25,680 --> 00:11:29,280
locally and then is going to send the data to the client socket.

153
00:11:29,280 --> 00:11:29,880
All right.

154
00:11:29,880 --> 00:11:35,850
So I know this kind of a bit overwhelming especially given that this course wasn't technically on Python

155
00:11:35,850 --> 00:11:40,580
in general so a lot of this stuff may be new to you if this was your first Python course ever.

156
00:11:40,590 --> 00:11:44,960
What I would suggest you do is check out the different examples in streaming documentation.

157
00:11:45,150 --> 00:11:49,760
If you want a little more background on this they also have some more documentation on the tweet PI

158
00:11:49,800 --> 00:11:52,560
site for how to actually connect with Twitter.

159
00:11:52,560 --> 00:11:55,460
So if this is something you find yourself are going to be doing a lot.

160
00:11:55,460 --> 00:12:00,870
You can check out a tweet by in fact tweet pi as you can see has a lot of streaming functionality built

161
00:12:00,960 --> 00:12:01,790
into it.

162
00:12:01,800 --> 00:12:06,380
So honestly if you're really interested in streaming from Twitter I would suggest you check out tweet

163
00:12:06,400 --> 00:12:12,170
pie's documentation Web site if you are not doing a whole lot of data from Twitter.

164
00:12:12,180 --> 00:12:17,430
You may be able to kind of skip Sparke completely and just use twe PI and streamlets an hour by itself

165
00:12:17,460 --> 00:12:21,970
and I have to connect that spark in the next lecture or going to do a set up but you brought a notebook

166
00:12:22,140 --> 00:12:27,540
that will be able to connect to tweet live streaming capabilities but it's going to be using SPARC in

167
00:12:27,540 --> 00:12:31,560
order to actually do all the final connection and data evaluation.

168
00:12:31,560 --> 00:12:33,150
All right thanks everyone.

169
00:12:33,150 --> 00:12:37,320
If you have any questions feel free to post the Q&amp;A forums but I will see you at the next lecture we're

170
00:12:37,320 --> 00:12:42,800
going to set up a we really want the actual chip or notebook that has all the sparks stuff in it.

171
00:12:42,870 --> 00:12:45,870
If you don't really want to type all this out and make sure you got the right one.

172
00:12:45,870 --> 00:12:46,980
Check out the notes.

173
00:12:46,980 --> 00:12:48,960
This is all save this tweet read that pi.

174
00:12:48,990 --> 00:12:50,990
Just as we've done here a tweet read out pi.

175
00:12:51,060 --> 00:12:56,130
I would actually suggest that you kind of follow along here of the video but use the downloaded version

176
00:12:56,130 --> 00:12:59,560
of the dot PI file just to make sure that it accidently make any mistakes.

177
00:12:59,560 --> 00:13:02,820
Remember you have to fill out your own consumer and access keys.

178
00:13:03,000 --> 00:13:07,050
All right thanks everyone and I will see you at the next lecture where we finally create our little

179
00:13:07,050 --> 00:13:08,150
mini dashboard.
