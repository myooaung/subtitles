WEBVTT
1
00:00:02.550 --> 00:00:06.840
CodeCommit offers a rich set of API and provides programmatic

2
00:00:06.840 --> 00:00:12.190
access to your repository. In this demo, we're going to see how

3
00:00:12.190 --> 00:00:16.370
an audit trail is maintained for every action that is being

4
00:00:16.370 --> 00:00:19.180
performed on the repository.

5
00:00:19.180 --> 00:00:24.590
I just logged into CloudTrail service, and the dashboard lists all the

6
00:00:24.590 --> 00:00:31.540
latest events. Let me open the event named DeleteBranch.

7
00:00:31.540 --> 00:00:35.590
This is the event that got triggered after we merged our

8
00:00:35.590 --> 00:00:42.480
DevelopBranch to Master. Let me expand this event, and you can

9
00:00:42.480 --> 00:00:48.020
see the event source is CodeCommit, and the user that was

10
00:00:48.020 --> 00:00:52.740
responsible for the event is admin.

11
00:00:52.740 --> 00:00:59.660
Click on View Event. You can see the event name is DeleteBranch and the

12
00:00:59.660 --> 00:01:06.320
request parameters are repositoryName and branchName. .The response

13
00:01:06.320 --> 00:01:15.870
elements are branchName and commitId. The one right below that log is an

14
00:01:15.870 --> 00:01:23.385
event named MergePullRequestByFastForward. And again, this is triggered by

15
00:01:23.385 --> 00:01:31.210
CodeCommit, and the user that initiated this action is admin. You can see

16
00:01:31.210 --> 00:01:34.260
the pullRequestId,

17
00:01:34.260 --> 00:01:41.360
repositoryName, and throwIfClosed are the request parameters. And right

18
00:01:41.360 --> 00:01:46.290
below, you can see the corresponding response elements.

19
00:01:46.290 --> 00:01:52.110
Let's go to JavaScript version of CodeCommit API reference,

20
00:01:52.110 --> 00:01:56.710
and you can see the request parameters syntax.

21
00:01:56.710 --> 00:02:02.340
Let's find the MergePullRequestByFastorward API, and you can see the

22
00:02:02.340 --> 00:02:07.640
syntax of request and the response parameters.

23
00:02:07.640 --> 00:02:08.700
In the last clip,

24
00:02:08.700 --> 00:02:11.180
I mentioned that the lambda function that we

25
00:02:11.180 --> 00:02:17.140
developed leveraged this CodeCommit API.

26
00:02:17.140 --> 00:02:24.240
Let's go back to Lambda console, click on TestFunction.

27
00:02:24.240 --> 00:02:31.540
You can see that we are using two CodeCommit APIs. One is getRepository,

28
00:02:31.540 --> 00:02:37.860
for which we are passing the Repository name as a parameter. And the other API

29
00:02:37.860 --> 00:02:44.710
call is getBranch where we are passing repositoryName under branchName as the

30
00:02:44.710 --> 00:02:49.730
parameters. Before we jump to our next module,

31
00:02:49.730 --> 00:02:55.440
let's quickly recap what we learned so far. We saw how to create a

32
00:02:55.440 --> 00:03:01.960
notification rule in AWS CodeCommit and communicate repository changes as

33
00:03:01.960 --> 00:03:08.200
an email to other developers using SNS topic. We developed a lambda

34
00:03:08.200 --> 00:03:13.310
function and created a trigger so that for every action, we can stream

35
00:03:13.310 --> 00:03:16.740
the activity to CloudWatch logs.

36
00:03:16.740 --> 00:03:19.340
This is just the tip of the iceberg.

37
00:03:19.340 --> 00:03:24.770
We can be as creative and customize this lambda function to invoke other

38
00:03:24.770 --> 00:03:31.510
AWS services that our project may dictate. We later saw the rich set of

39
00:03:31.510 --> 00:03:36.410
API that's provided by CodeCommit and how to interpret the CodeCommit

40
00:03:36.410 --> 00:03:42.330
events that are maintained by CloudTrail and how to use the request and

41
00:03:42.330 --> 00:03:47.740
the response parameters offered by the API in creating a lambda function

42
00:03:47.740 --> 00:03:55.070
and interact with other AWS services. In the next module, we are going to

43
00:03:55.070 --> 00:04:06.000
see how to combine AWS Cloud9 and AWS CodeCommit and use it with AWS CodeStar.

