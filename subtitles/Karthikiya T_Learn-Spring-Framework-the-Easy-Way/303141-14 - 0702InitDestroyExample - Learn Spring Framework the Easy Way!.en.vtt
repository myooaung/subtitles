WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.800
Okay,

00:00:00.800 --> 00:00:05.790
let us take a look at a quick example that demonstrates the life cycle off of being here.

00:00:05.790 --> 00:00:07.640
We have a very simple example.

00:00:07.640 --> 00:00:10.550
Where and we have a silver conflict file.

00:00:10.550 --> 00:00:15.670
It says that I wanted to connect to a silver and so I need to provide all the following

00:00:15.670 --> 00:00:21.150
properties to the civil conflict object so that I'll be able to connect to a server.

00:00:21.150 --> 00:00:21.870
Well,

00:00:21.870 --> 00:00:23.830
we're not really going to connect to a server,

00:00:23.830 --> 00:00:26.590
but let's just assume so here,

00:00:26.590 --> 00:00:31.490
I'm trying to use mics off constructor and settle injection to be able to set all these

00:00:31.490 --> 00:00:32.250
properties.

00:00:32.250 --> 00:00:38.530
And so we have a constructor that accept all these four properties as para meters.

00:00:38.530 --> 00:00:47.620
And then we also have s center mattered that will accept the conflict Param map and from

00:00:47.620 --> 00:00:48.740
our come pick file.

00:00:48.740 --> 00:00:49.950
As you would expect,

00:00:49.950 --> 00:00:52.750
we have this being defined civil conflict,

00:00:52.750 --> 00:00:59.930
and I'm trying to send mix off constructor and center arguments and in addition to that,

00:00:59.930 --> 00:01:02.550
I've also set a few messages.

00:01:02.550 --> 00:01:03.300
Basically,

00:01:03.300 --> 00:01:06.000
I'm just simply using assault statement.

00:01:06.000 --> 00:01:08.670
Since we don't have any logging mechanism,

00:01:08.670 --> 00:01:14.450
come figure at the moment so that we can take a look at how the life cycle is taking place

00:01:14.450 --> 00:01:15.930
and stuff like that.

00:01:15.930 --> 00:01:16.680
Ideally,

00:01:16.680 --> 00:01:20.540
it's not a good idea to include all these instructions in the centre method.

00:01:20.540 --> 00:01:22.650
But just for the sake off this example,

00:01:22.650 --> 00:01:24.370
we're going to let it go.

00:01:24.370 --> 00:01:27.700
It's on the program and see the result.

00:01:27.700 --> 00:01:34.610
What has just happened So initially,

00:01:34.610 --> 00:01:36.060
after the beans are created,

00:01:36.060 --> 00:01:41.370
the call has gone to the constructor while the object is being constructed.

00:01:41.370 --> 00:01:46.150
And then after that setter injection has happened,

00:01:46.150 --> 00:01:52.850
as you would expect and then finally were able to display the object itself.

00:01:52.850 --> 00:01:59.240
Now do taken note that we're tryingto also close on the application context.

00:01:59.240 --> 00:02:02.700
This is when the spring will take care off garbage,

00:02:02.700 --> 00:02:05.950
collecting the objects or destroying the objects.

00:02:05.950 --> 00:02:09.300
But we don't have any message to display.

00:02:09.300 --> 00:02:11.860
We will be able to display it in a while.

00:02:11.860 --> 00:02:18.830
No letter that I wanted to perform something right after the dependency injection happens

00:02:18.830 --> 00:02:24.850
and before the object is made available for us to use in our application.

00:02:24.850 --> 00:02:25.790
Also,

00:02:25.790 --> 00:02:26.990
in addition to that,

00:02:26.990 --> 00:02:33.570
I also wanted to perform something before objects get destroyed by spring.

00:02:33.570 --> 00:02:40.960
So for this purpose would actually going to introduce a couple of interfaces and those are

00:02:40.960 --> 00:02:42.010
these two,

00:02:42.010 --> 00:02:44.270
and by doing so,

00:02:44.270 --> 00:02:48.150
we also need to provide the implementation for these interfaces.

00:02:48.150 --> 00:02:53.790
And these are the methods for which went to provide the implementation.

00:02:53.790 --> 00:02:56.000
So this method in here,

00:02:56.000 --> 00:02:57.550
after properties set,

00:02:57.550 --> 00:03:02.050
belong to initializing being interface.

00:03:02.050 --> 00:03:10.340
And whatever you performing here will take place right after the dependency injection

00:03:10.340 --> 00:03:11.190
happens.

00:03:11.190 --> 00:03:11.790
Well,

00:03:11.790 --> 00:03:12.200
actually,

00:03:12.200 --> 00:03:17.280
in between the dependence injection and calling this matter after property set,

00:03:17.280 --> 00:03:19.600
there's another thing that will come in the picture,

00:03:19.600 --> 00:03:22.010
which are ever interface methods,

00:03:22.010 --> 00:03:23.450
but we're going to talk about it.

00:03:23.450 --> 00:03:25.590
Incoming videos for now,

00:03:25.590 --> 00:03:31.090
whatever you want to do before the object is made available for application to use,

00:03:31.090 --> 00:03:34.280
you can do it in here and in our example.

00:03:34.280 --> 00:03:41.680
Let's say that I have a logic in here that will make sure that the silver is started before

00:03:41.680 --> 00:03:43.250
we're trying to connect to it.

00:03:43.250 --> 00:03:45.020
For simplicity's sake.

00:03:45.020 --> 00:03:50.650
I just have a simple message that just is starting and connecting to the silver.

00:03:50.650 --> 00:03:55.230
And once after we make sure that the server is available,

00:03:55.230 --> 00:03:56.500
it is up and running.

00:03:56.500 --> 00:04:02.720
We're going to go ahead and connect to the server so that at later point of time in our

00:04:02.720 --> 00:04:03.610
application,

00:04:03.610 --> 00:04:06.950
we can do a variety off things isn't that object?

00:04:06.950 --> 00:04:14.850
And after we do whatever we have to do and then we call context got close.

00:04:14.850 --> 00:04:21.010
Do they can know that we need to typecast this application context two configurable

00:04:21.010 --> 00:04:25.260
application context to be able to close it alternatively,

00:04:25.260 --> 00:04:27.840
can also introduce a shutdown hook,

00:04:27.840 --> 00:04:34.370
which is basically a piece off court that you want execute before JV M is shut down and

00:04:34.370 --> 00:04:36.790
when either of these events will occur.

00:04:36.790 --> 00:04:45.130
The destroy method that we have just implemented will be called before the objects will get

00:04:45.130 --> 00:04:46.550
destroyed by spring.

00:04:46.550 --> 00:04:50.960
Framework the knowledge on the program and see the result.

00:04:50.960 --> 00:04:55.880
And sure enough,

00:04:55.880 --> 00:04:58.560
after the center injection are in,

00:04:58.560 --> 00:04:59.800
it mattered is called.

00:04:59.800 --> 00:05:01.850
And so we're able to see this message.

00:05:01.850 --> 00:05:06.140
We have done certain task with that object.

00:05:06.140 --> 00:05:06.590
In this case,

00:05:06.590 --> 00:05:11.560
we're just simply trying to display it and then before the object gets destroyed,

00:05:11.560 --> 00:05:14.920
we're trying to shut down this silver's.

00:05:14.920 --> 00:05:16.580
It's as simple as that.

00:05:16.580 --> 00:05:18.450
No.

00:05:18.450 --> 00:05:19.550
Alternatively,

00:05:19.550 --> 00:05:24.060
if you're used to developing J two ee applications,

00:05:24.060 --> 00:05:26.650
you're probably ever off these annotations.

00:05:26.650 --> 00:05:30.250
They belong to jail Sarto 50 specifications.

00:05:30.250 --> 00:05:32.440
So what this means is,

00:05:32.440 --> 00:05:34.750
instead of using these interfaces in here.

00:05:34.750 --> 00:05:43.350
You can now use those annotations instead and things will work as before.

00:05:43.350 --> 00:05:51.680
But then these annotations belong to the job extension library job I X.

00:05:51.680 --> 00:05:53.800
We don't have it at the moment,

00:05:53.800 --> 00:05:55.210
and so we're not able to use it.

00:05:55.210 --> 00:05:55.800
But,

00:05:55.800 --> 00:05:56.100
Justin,

00:05:56.100 --> 00:05:58.250
because if you'd like to go with this approach,

00:05:58.250 --> 00:06:01.150
then spring doesn't stop you to do that.

00:06:01.150 --> 00:06:04.150
Let me just quickly undo those changes.

00:06:04.150 --> 00:06:12.000
So so far we have seen are being go through all the faces that are highlighted in white as

00:06:12.000 --> 00:06:19.210
well as initializing and the destroy phases we're going to explore on the other face,

00:06:19.210 --> 00:06:20.480
the ever interfaces,

00:06:20.480 --> 00:06:21.270
etcetera,

00:06:21.270 --> 00:06:22.750
incoming videos for sure.

00:06:22.750 --> 00:06:29.580
Now you may be having question as to why don't we do whatever the stuff that we're doing in

00:06:29.580 --> 00:06:33.150
here in the constructor itself?

00:06:33.150 --> 00:06:35.240
Well,

00:06:35.240 --> 00:06:38.090
there are two good reasons why you don't want to do it.

00:06:38.090 --> 00:06:43.390
Constructor will come into picture when this object is being constructed.

00:06:43.390 --> 00:06:47.850
That means the object is not fully constructed for you to use it.

00:06:47.850 --> 00:06:53.550
Also do taken note that the constructor injection will come into picture before the center

00:06:53.550 --> 00:06:54.260
injection.

00:06:54.260 --> 00:06:59.410
That means we may have certain dependence is that we may be injecting using settle

00:06:59.410 --> 00:07:05.250
injection and those dependence is may not be available in the logic that you perform in the

00:07:05.250 --> 00:07:06.100
constructor.

00:07:06.100 --> 00:07:06.960
Also,

00:07:06.960 --> 00:07:08.130
one another thing,

00:07:08.130 --> 00:07:13.530
which is what noting is that if you're continuous creating multiple instances off silver

00:07:13.530 --> 00:07:14.310
conflict,

00:07:14.310 --> 00:07:18.110
then constructor would be called each and every time.

00:07:18.110 --> 00:07:26.470
But whereas the post construct method will be called only once the godless off number off

00:07:26.470 --> 00:07:29.080
instances that the container will create.

00:07:29.080 --> 00:07:35.440
Now we have a chapter dedicated to talk about the scope off all the beans and there will

00:07:35.440 --> 00:07:38.740
explore how maney in stencils off these beans will be created,

00:07:38.740 --> 00:07:39.550
etcetera.

00:07:39.550 --> 00:07:41.730
You have to hold until that point.

00:07:41.730 --> 00:07:42.930
But for now,

00:07:42.930 --> 00:07:45.880
if you're using a post construct method like this,

00:07:45.880 --> 00:07:51.550
no matter how many instances does he continue create this method would be called only once

00:07:51.550 --> 00:07:51.550
.

00:07:51.550 --> 00:07:59.310
Unlike the case for the constructor and only after this method is called and the court and

00:07:59.310 --> 00:08:01.360
it will get executed well,

00:08:01.360 --> 00:08:07.360
the object would be qualified for dependents injection letter that we have another class

00:08:07.360 --> 00:08:09.950
that is dependent on this class,

00:08:09.950 --> 00:08:11.700
then springs to take care off,

00:08:11.700 --> 00:08:17.850
creating the object off this over conflict before it injects this object into another class

00:08:17.850 --> 00:08:23.130
and spring will not inject this object until this method is executed.

00:08:23.130 --> 00:08:25.770
All right.

00:08:25.770 --> 00:08:27.150
I hope it makes sense.

00:08:27.150 --> 00:08:29.250
I'll see you in my next video.

