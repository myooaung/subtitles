WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.620
In some cases,

00:00:05.620 --> 00:00:09.500
you might want to have a common handling code for a bunch off events.

00:00:09.500 --> 00:00:10.580
In that case,

00:00:10.580 --> 00:00:17.050
you can actually add an array off events as part of the even listener annotation.

00:00:17.050 --> 00:00:19.260
That way,

00:00:19.260 --> 00:00:21.390
whenever one off these even soccer,

00:00:21.390 --> 00:00:24.810
the handling cord would be executed.

00:00:24.810 --> 00:00:30.530
One destruction with this approach is that he can't actually get hold off the vent object

00:00:30.530 --> 00:00:32.350
and access its members,

00:00:32.350 --> 00:00:34.150
like we did in here,

00:00:34.150 --> 00:00:39.750
were able to get the even the object and we could access the method.

00:00:39.750 --> 00:00:42.250
He can't do the same in here.

00:00:42.250 --> 00:00:46.350
He can also for their narrow down the even such a wandell is,

00:00:46.350 --> 00:00:46.700
um,

00:00:46.700 --> 00:00:48.450
using a condition.

00:00:48.450 --> 00:00:54.150
This condition is written using so called spring expression language.

00:00:54.150 --> 00:00:56.740
If you're ever or regular expressions in Java,

00:00:56.740 --> 00:00:58.580
this is somewhat similar to that.

00:00:58.580 --> 00:01:01.340
This is nothing new that you need to learn.

00:01:01.340 --> 00:01:05.930
You can defer to the documentation and figure out the regular expression that you want to

00:01:05.930 --> 00:01:07.750
use based on your requirements.

00:01:07.750 --> 00:01:14.340
And the condition that I have put in here is just trying to see if the matter returned by

00:01:14.340 --> 00:01:18.550
the get user is equals to the following string.

00:01:18.550 --> 00:01:20.030
If that is the case,

00:01:20.030 --> 00:01:24.250
then the following even handling code would be executed.

00:01:24.250 --> 00:01:26.350
Let me quickly run the program.

00:01:26.350 --> 00:01:30.870
And since this method is going to accept a couple of events,

00:01:30.870 --> 00:01:36.290
and I'm sure that both these events are getting generated from our program,

00:01:36.290 --> 00:01:39.250
we should be able to see this message twice.

00:01:39.250 --> 00:01:45.010
And here it is,

00:01:45.010 --> 00:01:47.240
and similarly,

00:01:47.240 --> 00:01:50.050
even this message is seen.

00:01:50.050 --> 00:01:54.450
That explains everything.

00:01:54.450 --> 00:01:55.630
Well,

00:01:55.630 --> 00:02:00.370
you could actually have this condition inside the court itself after you accept the event,

00:02:00.370 --> 00:02:04.950
and it may be better to do so because you don't get any syntax highlighting.

00:02:04.950 --> 00:02:06.180
For example,

00:02:06.180 --> 00:02:08.050
if you change the name of this mattered,

00:02:08.050 --> 00:02:11.200
then you don't get any compiled a mirror.

00:02:11.200 --> 00:02:14.390
You'll see an exception after you run the program,

00:02:14.390 --> 00:02:15.510
and,

00:02:15.510 --> 00:02:15.850
ah,

00:02:15.850 --> 00:02:17.330
that maybe a little annoying.

00:02:17.330 --> 00:02:20.240
Also,

00:02:20.240 --> 00:02:24.840
it's worth noting that whenever you're trying to accept an event,

00:02:24.840 --> 00:02:27.750
Spring will not only accept this particular event,

00:02:27.750 --> 00:02:30.350
but also the evens that are sub classes off.

00:02:30.350 --> 00:02:31.050
This event,

00:02:31.050 --> 00:02:32.510
for example,

00:02:32.510 --> 00:02:34.150
have created another class,

00:02:34.150 --> 00:02:39.450
and there's just simply going to extend Howard transaction failed custom event.

00:02:39.450 --> 00:02:42.350
So if I published this event,

00:02:42.350 --> 00:02:46.380
that man coming this piece off code,

00:02:46.380 --> 00:02:52.850
so I'm trying to publish board the super class as well as a subclass event.

00:02:52.850 --> 00:02:55.940
Wherever I'm accepting,

00:02:55.940 --> 00:03:01.050
the parent class event will now also accept the subclass event.

00:03:01.050 --> 00:03:03.880
So in our output,

00:03:03.880 --> 00:03:10.320
we should be seeing double the results off what we have seen earlier.

00:03:10.320 --> 00:03:19.860
That's because those listener matters are now accepting the newly published event off this

00:03:19.860 --> 00:03:20.610
up class.

00:03:20.610 --> 00:03:22.600
Hope it makes sense.

00:03:22.600 --> 00:03:23.600
I'll see you soon.

