WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.250
in this chapter,

00:00:05.250 --> 00:00:08.390
we're going to talk about aspect oriented programming,

00:00:08.390 --> 00:00:12.920
which is one of the key offerings offspring framework for developing Enterprise Java

00:00:12.920 --> 00:00:13.850
applications.

00:00:13.850 --> 00:00:19.980
But before we try to understand what is an aspect wanted programming and its benefit went

00:00:19.980 --> 00:00:23.150
to be ever off the term crosscutting concerns.

00:00:23.150 --> 00:00:24.490
In this video,

00:00:24.490 --> 00:00:29.300
we're going to understand what it is and the problem it creates in the application

00:00:29.300 --> 00:00:30.580
development process.

00:00:30.580 --> 00:00:33.600
Imagine that you're working on a banking application,

00:00:33.600 --> 00:00:35.940
and when I say banking application,

00:00:35.940 --> 00:00:42.550
it's going to be quite complex because it would typically constitute a host off features

00:00:42.550 --> 00:00:46.750
and all of the operations needs to be performed insecure manner.

00:00:46.750 --> 00:00:53.360
Now what I'm trying to do here is I'm trying to simulate a banking application so typical

00:00:53.360 --> 00:00:57.570
of we may have a file like Great Guard Service,

00:00:57.570 --> 00:01:01.920
and it would have set off methods that deal with credit card.

00:01:01.920 --> 00:01:05.550
Maybe we wanted to issue a credit card to a customer,

00:01:05.550 --> 00:01:12.020
so we will call this method and we'll have some kind of a business logic that will issue a

00:01:12.020 --> 00:01:13.750
credit card to a customer.

00:01:13.750 --> 00:01:14.760
Similarly,

00:01:14.760 --> 00:01:19.900
we may want to block a credit card if the customer had reported some kind of suspicious

00:01:19.900 --> 00:01:21.750
activity with his account,

00:01:21.750 --> 00:01:28.190
and we may also have a matter like paid you to let the customer pay the due amount.

00:01:28.190 --> 00:01:29.810
And similarly,

00:01:29.810 --> 00:01:33.040
we can have many other services like,

00:01:33.040 --> 00:01:34.030
for example,

00:01:34.030 --> 00:01:35.750
we may have a loan service,

00:01:35.750 --> 00:01:40.300
and it will have set off methods that deal with the loan.

00:01:40.300 --> 00:01:44.770
We mail tohave an administration service,

00:01:44.770 --> 00:01:47.400
and this is not meant for the end user,

00:01:47.400 --> 00:01:49.350
but rather for the system admin.

00:01:49.350 --> 00:01:53.790
And he will have certain privileges that a normal user doesn't.

00:01:53.790 --> 00:01:55.100
For example,

00:01:55.100 --> 00:02:01.810
he can actually add the users or delayed the customer in case the customer is no longer

00:02:01.810 --> 00:02:05.360
associated with the bank and all such kind of stuff.

00:02:05.360 --> 00:02:05.840
Now,

00:02:05.840 --> 00:02:08.620
since the application in here is pretty simple,

00:02:08.620 --> 00:02:14.680
we can actually get away with just a business logic like we're having in every method in

00:02:14.680 --> 00:02:15.150
here.

00:02:15.150 --> 00:02:18.210
I'm not bothered about anything else.

00:02:18.210 --> 00:02:19.360
For example,

00:02:19.360 --> 00:02:24.160
I'm not having any kind often exception handling in here because our applications,

00:02:24.160 --> 00:02:28.610
but a simple But if you're talking about the real world banking application,

00:02:28.610 --> 00:02:30.950
you would likely have thousands off files.

00:02:30.950 --> 00:02:32.250
In that case,

00:02:32.250 --> 00:02:38.330
there lot of other things that you to consider not just the business logic in other words.

00:02:38.330 --> 00:02:39.620
As a developer,

00:02:39.620 --> 00:02:44.610
you should not only focus on the core functionality are the business logic,

00:02:44.610 --> 00:02:48.650
but also you need to be worried about other concerns.

00:02:48.650 --> 00:02:50.830
Let's talk about this method in here,

00:02:50.830 --> 00:02:51.620
for instance,

00:02:51.620 --> 00:02:53.440
paid you here.

00:02:53.440 --> 00:03:00.860
We need to perform such an operation as part off a transaction to ensure the consistency

00:03:00.860 --> 00:03:02.150
off the data.

00:03:02.150 --> 00:03:05.930
So wait to basically begin the transaction,

00:03:05.930 --> 00:03:10.550
perform whatever we're doing and then come in the transaction.

00:03:10.550 --> 00:03:14.380
But what if there is some kind off an exception in our code?

00:03:14.380 --> 00:03:16.380
We need to handle that.

00:03:16.380 --> 00:03:16.950
And,

00:03:16.950 --> 00:03:17.910
in which case,

00:03:17.910 --> 00:03:24.050
we want to roll back the transaction and put back the database into its earlier state.

00:03:24.050 --> 00:03:30.120
And we don't want to perform this action off paid do unless the user is authenticated.

00:03:30.120 --> 00:03:36.230
That means only when the user logs into his account can he perform this operation.

00:03:36.230 --> 00:03:41.730
So we need to have some kind of chicken here to check to see if the user has indeed logged

00:03:41.730 --> 00:03:42.010
in.

00:03:42.010 --> 00:03:42.660
Similarly,

00:03:42.660 --> 00:03:49.000
we need to have another check to check to see if the user has sufficient privileges to

00:03:49.000 --> 00:03:51.550
perform the following action.

00:03:51.550 --> 00:03:53.460
For example,

00:03:53.460 --> 00:03:57.050
not everyone can perform the administration tasks.

00:03:57.050 --> 00:04:03.250
Only admin will have the privileges to perform whatever is in here.

00:04:03.250 --> 00:04:11.230
So we need to have a check for authorization to see if the user is authorized to perform

00:04:11.230 --> 00:04:12.740
the capacity in dental.

00:04:12.740 --> 00:04:14.290
And in addition to that,

00:04:14.290 --> 00:04:15.870
for each and every mattered,

00:04:15.870 --> 00:04:19.310
we need to incorporate some kind of a logging mechanism.

00:04:19.310 --> 00:04:25.050
So I went to put a log message at the start off every method and at the end,

00:04:25.050 --> 00:04:26.200
off every mattered,

00:04:26.200 --> 00:04:31.310
and not to mention the significance off putting a log message that would help debunk the

00:04:31.310 --> 00:04:32.050
issues.

00:04:32.050 --> 00:04:33.030
For example,

00:04:33.030 --> 00:04:36.770
if you have some kind of an exception in here as a developer,

00:04:36.770 --> 00:04:37.290
are,

00:04:37.290 --> 00:04:38.820
as a support execute you,

00:04:38.820 --> 00:04:45.450
you would go to your lock file and you would try to see a log message that came before that

00:04:45.450 --> 00:04:46.320
exception.

00:04:46.320 --> 00:04:48.400
And if the exception is in this method,

00:04:48.400 --> 00:04:52.750
then you'll be able to locate the following log message,

00:04:52.750 --> 00:04:53.920
thereby.

00:04:53.920 --> 00:05:00.300
You will get to know that the exception is in the page you method and in the credit cards

00:05:00.300 --> 00:05:01.350
of this class.

00:05:01.350 --> 00:05:04.310
Like all these,

00:05:04.310 --> 00:05:07.480
we may need to introduce code that is not bad,

00:05:07.480 --> 00:05:10.900
likely related to the core functionality off our business.

00:05:10.900 --> 00:05:11.730
Now,

00:05:11.730 --> 00:05:17.060
if you notice all this extra piece off court is not directly related to the core

00:05:17.060 --> 00:05:19.400
functionality that we wanted to deal.

00:05:19.400 --> 00:05:28.450
Our core functionality is mixed with all these other concerns that has nothing to do with

00:05:28.450 --> 00:05:29.890
the core functionality.

00:05:29.890 --> 00:05:36.150
Now imagine that you have to write similar code across all the methods in your application

00:05:36.150 --> 00:05:36.150
.

00:05:36.150 --> 00:05:39.620
I hope you're getting the problem.

00:05:39.620 --> 00:05:46.300
The problem is it is going to dilute the original purpose off the services when you have a

00:05:46.300 --> 00:05:47.750
credit card service class,

00:05:47.750 --> 00:05:50.900
it must only have called that deal with great count.

00:05:50.900 --> 00:05:52.460
But that's not the case here.

00:05:52.460 --> 00:05:54.860
We're also introducing some of the concerns,

00:05:54.860 --> 00:05:59.250
so definitely this is a problem that we need to address.

00:05:59.250 --> 00:06:05.000
If I want to draw a diagram to represent the current scenario,

00:06:05.000 --> 00:06:07.280
then would have all these services.

00:06:07.280 --> 00:06:12.480
The credit card services comes on with great God loan services concerned with loan.

00:06:12.480 --> 00:06:14.140
But unfortunately,

00:06:14.140 --> 00:06:15.390
as a developer,

00:06:15.390 --> 00:06:21.910
we also need to be worried about other concerns concerns that are sort off common in all

00:06:21.910 --> 00:06:22.840
the components.

00:06:22.840 --> 00:06:26.340
This is exactly what our crosscutting concerns.

00:06:26.340 --> 00:06:30.310
All the lines that you're seeing in red are crosscutting concerns,

00:06:30.310 --> 00:06:34.990
and with a puppy or aspecto in the programming will try to get it off all these

00:06:34.990 --> 00:06:41.090
crosscutting concerns from our code and let the dollar per focus only on the core business

00:06:41.090 --> 00:06:44.180
logic and not worried about all these concerts.

00:06:44.180 --> 00:06:48.100
By that I don't mean to say that will get rid off all these concerns.

00:06:48.100 --> 00:06:53.260
The idea is to keep all the concerns separate from each other and we will be able to

00:06:53.260 --> 00:06:55.350
achieve it with a will be,

00:06:55.350 --> 00:06:56.290
well,

00:06:56.290 --> 00:06:57.750
come to new from next video.

00:06:57.750 --> 00:06:59.350
I'll see you soon.

