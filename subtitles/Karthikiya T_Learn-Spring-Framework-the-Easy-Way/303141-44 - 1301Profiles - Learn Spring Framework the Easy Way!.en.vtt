WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.250
in this video.

00:00:01.250 --> 00:00:02.430
In the next couple of videos,

00:00:02.430 --> 00:00:05.100
we're going to talk about profiles and spring.

00:00:05.100 --> 00:00:08.530
We're going to take a look at a simple example off profiles,

00:00:08.530 --> 00:00:10.620
and then we'll talk about its benefits.

00:00:10.620 --> 00:00:12.330
But before we do so,

00:00:12.330 --> 00:00:14.550
think about the following scenario.

00:00:14.550 --> 00:00:19.530
Let's say that you wanted to test your spring application locally in your development and

00:00:19.530 --> 00:00:24.600
Roman and see that you're using a database software like my skill.

00:00:24.600 --> 00:00:28.970
But it may not be the case in case of production enrollment.

00:00:28.970 --> 00:00:30.650
I mean your customer,

00:00:30.650 --> 00:00:33.310
maybe running a different database altogether.

00:00:33.310 --> 00:00:38.580
Maybe your customer is using something like post their skill database software.

00:00:38.580 --> 00:00:39.040
Oh,

00:00:39.040 --> 00:00:41.540
he may be using Oracle DB.

00:00:41.540 --> 00:00:43.850
So depending on the enrollment,

00:00:43.850 --> 00:00:47.590
you need to switch to a different database.

00:00:47.590 --> 00:00:52.850
If your indelible mint and Roman then you want to be able to use my skill,

00:00:52.850 --> 00:00:57.150
or if your application is running on the production enrollment,

00:00:57.150 --> 00:01:02.750
then your application must switch to possibly ask your how can we accomplish that?

00:01:02.750 --> 00:01:03.670
Well,

00:01:03.670 --> 00:01:05.650
profiles is the answer for that.

00:01:05.650 --> 00:01:10.250
So let's take a look at the sample code and understand it better.

00:01:10.250 --> 00:01:14.290
For the sake of simplicity,

00:01:14.290 --> 00:01:17.250
we're not actually going to use any database software,

00:01:17.250 --> 00:01:25.700
but rather I'm trying to simulate the same behavior by using the interface data source.

00:01:25.700 --> 00:01:31.730
Data sources interface are settle specifications off J two ee.

00:01:31.730 --> 00:01:33.170
And this is the interface.

00:01:33.170 --> 00:01:39.400
All the database vendors were deals to provide the implementation so that everybody can use

00:01:39.400 --> 00:01:41.750
their court to connect to the database.

00:01:41.750 --> 00:01:43.110
For example,

00:01:43.110 --> 00:01:49.530
the providers off my skull database provide the implementation class off data source so

00:01:49.530 --> 00:01:53.940
that we can use their classes to be able to connect to my school database.

00:01:53.940 --> 00:01:56.850
Same is the case with all the vendors out there.

00:01:56.850 --> 00:01:57.960
So in here,

00:01:57.960 --> 00:02:01.950
what I've done is as Hume that I have implementation in here.

00:02:01.950 --> 00:02:07.260
That sort of letters connect to the my skill database.

00:02:07.260 --> 00:02:08.550
And similarly,

00:02:08.550 --> 00:02:14.270
we have another class that implements the data source and the implementation off.

00:02:14.270 --> 00:02:19.710
It would help us connect to the post great SQL database and from our application.

00:02:19.710 --> 00:02:21.370
Depending on the environment,

00:02:21.370 --> 00:02:24.410
we're going to connect to a drop this data basis.

00:02:24.410 --> 00:02:25.700
And when we do,

00:02:25.700 --> 00:02:27.400
we have to call this method,

00:02:27.400 --> 00:02:31.160
get connection to acquire the connection to that database.

00:02:31.160 --> 00:02:37.940
But in here we're just trying to simply display a message that we have indeed connected to

00:02:37.940 --> 00:02:38.910
that database.

00:02:38.910 --> 00:02:42.200
Same is the case in here as well.

00:02:42.200 --> 00:02:45.950
I've also created a couple off conflict files,

00:02:45.950 --> 00:02:53.650
and the key thing to note here is I have no introduced this attribute profile.

00:02:53.650 --> 00:02:59.550
So all the conflicts that I had mentioned in here would correspond to the development

00:02:59.550 --> 00:03:00.190
profile.

00:03:00.190 --> 00:03:02.480
So I want to act to it.

00:03:02.480 --> 00:03:08.500
All these conflicts if I'm working on the development and Roman or if I'm testing my

00:03:08.500 --> 00:03:14.800
application on the development and Roman and do take a note that here and I'm trying to

00:03:14.800 --> 00:03:16.190
inject the data source,

00:03:16.190 --> 00:03:22.970
I'm using the implementation off my skill database because that's what I want In my local

00:03:22.970 --> 00:03:23.740
enrollment,

00:03:23.740 --> 00:03:27.200
I want to be able to connect to the my skill database.

00:03:27.200 --> 00:03:28.770
Similarly,

00:03:28.770 --> 00:03:31.560
we have another conflict file for production,

00:03:31.560 --> 00:03:36.550
and so I have created the production profile just as you see in here,

00:03:36.550 --> 00:03:41.680
and all the conflict in here would be applicable for production and Roman.

00:03:41.680 --> 00:03:44.950
I also added one additional profile,

00:03:44.950 --> 00:03:47.290
which is default.

00:03:47.290 --> 00:03:52.600
That means if I don't explicitly set any enrollment than by default,

00:03:52.600 --> 00:03:55.240
this configuration will be considered.

00:03:55.240 --> 00:03:58.140
In order to make a profile as default,

00:03:58.140 --> 00:04:01.650
you have to use the exact same word or lower case.

00:04:01.650 --> 00:04:03.580
And in addition to that,

00:04:03.580 --> 00:04:05.730
when you have multiple convict files,

00:04:05.730 --> 00:04:14.020
it's better that you introduce an interface with set off standard methods so that but it's

00:04:14.020 --> 00:04:17.570
better that we have this as well.

00:04:17.570 --> 00:04:26.330
So that across all the Java convict files we would follow the same signatures without any

00:04:26.330 --> 00:04:27.050
problem.

00:04:27.050 --> 00:04:31.190
There won't be any kind off naming conflicts.

00:04:31.190 --> 00:04:32.570
For example,

00:04:32.570 --> 00:04:36.340
here I could name this ass data source X,

00:04:36.340 --> 00:04:42.320
y z And here I can say data source ABC that's going to mess up things in our actual

00:04:42.320 --> 00:04:43.500
application logic.

00:04:43.500 --> 00:04:45.790
So in order to keep things consistent,

00:04:45.790 --> 00:04:51.290
have actually created this interface so that methods will be consistent across this

00:04:51.290 --> 00:04:52.190
conflict files.

00:04:52.190 --> 00:05:00.220
I also have a DB manager class that is specific to my application and using the constructor

00:05:00.220 --> 00:05:01.020
injection,

00:05:01.020 --> 00:05:02.610
I'm asking spring toe,

00:05:02.610 --> 00:05:04.450
inject the data source.

00:05:04.450 --> 00:05:05.890
So depending on then,

00:05:05.890 --> 00:05:12.260
Roman time in spring will inject its corresponding data source and we'll see how it works

00:05:12.260 --> 00:05:14.100
in a in a minute.

00:05:14.100 --> 00:05:16.160
And from our main logic,

00:05:16.160 --> 00:05:19.390
since we now have multiple Java convict files,

00:05:19.390 --> 00:05:25.430
I cannot explicitly said the name in the constructor off this off this class.

00:05:25.430 --> 00:05:26.670
But what I have done,

00:05:26.670 --> 00:05:29.150
rather is I've used this method.

00:05:29.150 --> 00:05:32.990
Context stopped scan and they provide the package,

00:05:32.990 --> 00:05:39.460
and spring will scan all the convict files that are annotated with conflagration.

00:05:39.460 --> 00:05:40.950
After that,

00:05:40.950 --> 00:05:47.430
we have to make sure that we call this method refresh so that the context will have all

00:05:47.430 --> 00:05:49.710
this conflicts ready to be used.

00:05:49.710 --> 00:05:55.070
And right after that I'm trying to simply access this method connector DB,

00:05:55.070 --> 00:06:01.860
which will just simply call to get connection method off whatever the data source that is

00:06:01.860 --> 00:06:02.550
injected.

00:06:02.550 --> 00:06:04.950
And finally,

00:06:04.950 --> 00:06:06.750
I'm just closing on the context.

00:06:06.750 --> 00:06:11.350
But one thing that is not very usual is this particular statement,

00:06:11.350 --> 00:06:15.180
and here I'm trying to choose the profile on my own.

00:06:15.180 --> 00:06:21.610
So this time I said the profile to development so spring will take care off,

00:06:21.610 --> 00:06:28.250
activating the Doman profile so all these beans would come into picture.

00:06:28.250 --> 00:06:30.950
Are all these conflicts will come into picture?

00:06:30.950 --> 00:06:31.630
No,

00:06:31.630 --> 00:06:32.820
that's on the program.

00:06:32.820 --> 00:06:36.890
And make sure we should be able to connect to the my skill server,

00:06:36.890 --> 00:06:40.150
and it worked.

00:06:40.150 --> 00:06:46.450
And if a switch to the production and Roman this time,

00:06:46.450 --> 00:06:49.150
it's going to be posed serious skill,

00:06:49.150 --> 00:06:52.490
and if I don't provide any enrollment,

00:06:52.490 --> 00:06:56.120
then that's going to be the default one,

00:06:56.120 --> 00:06:59.180
which is the production in Roman settings,

00:06:59.180 --> 00:07:01.800
and there it is.

00:07:01.800 --> 00:07:05.660
But right now we have one serious problem.

00:07:05.660 --> 00:07:07.150
Can you guess what it is?

00:07:07.150 --> 00:07:08.400
Pause the video,

00:07:08.400 --> 00:07:10.750
try to find the issue and then get back.

00:07:10.750 --> 00:07:19.200
So the problem we have here is we're tryingto heart called the name of the profile as part

00:07:19.200 --> 00:07:20.250
of the source code.

00:07:20.250 --> 00:07:22.250
So what is a problem with it?

00:07:22.250 --> 00:07:23.080
Okay,

00:07:23.080 --> 00:07:24.690
let's say that I change us too.

00:07:24.690 --> 00:07:27.140
Development,

00:07:27.140 --> 00:07:28.060
for instance,

00:07:28.060 --> 00:07:29.650
from a local testing.

00:07:29.650 --> 00:07:32.040
Now accidentally,

00:07:32.040 --> 00:07:34.850
I have committed this code into the base.

00:07:34.850 --> 00:07:42.780
So in production are application is going to crash because spring will try to choose the

00:07:42.780 --> 00:07:43.900
development profile.

00:07:43.900 --> 00:07:47.950
And things won't work there because there is no my skill database installed.

00:07:47.950 --> 00:07:51.860
So in our next week,

00:07:51.860 --> 00:07:54.350
we're going to see how we can solve this problem.

00:07:54.350 --> 00:07:55.300
All right,

00:07:55.300 --> 00:07:55.600
I'll see.

00:07:55.600 --> 00:07:56.080
Assume

