WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.960
Okay,

00:00:04.960 --> 00:00:07.950
here are a couple of noteworthy points on productive beans,

00:00:07.950 --> 00:00:08.990
but before that,

00:00:08.990 --> 00:00:10.380
I want to ask you a question.

00:00:10.380 --> 00:00:16.180
Would the product I beans be eagerly loading or lazy lowering by default?

00:00:16.180 --> 00:00:18.950
Think about it and tell me the answer.

00:00:18.950 --> 00:00:21.570
Well,

00:00:21.570 --> 00:00:21.880
actually,

00:00:21.880 --> 00:00:24.350
the first point in here answers it.

00:00:24.350 --> 00:00:29.560
A product I've Bean cannot be loaded eagerly for two good reasons.

00:00:29.560 --> 00:00:30.880
First of all,

00:00:30.880 --> 00:00:37.280
the whole idea of product I beans is to create an instance when you ask for it and

00:00:37.280 --> 00:00:39.420
container does not know ahead of time.

00:00:39.420 --> 00:00:42.150
How many times you're going to ask in your code.

00:00:42.150 --> 00:00:44.050
It's as simple as that,

00:00:44.050 --> 00:00:45.520
and for that reason,

00:00:45.520 --> 00:00:49.140
it doesn't matter if you said the lazy load flag toe.

00:00:49.140 --> 00:00:50.290
True or false,

00:00:50.290 --> 00:00:52.350
it will not take any effect at all.

00:00:52.350 --> 00:00:53.050
Or,

00:00:53.050 --> 00:00:54.020
in other words,

00:00:54.020 --> 00:00:59.510
it doesn't make sense to us the spring container to load the prototype beans in lazy manner

00:00:59.510 --> 00:00:59.510
.

00:00:59.510 --> 00:01:00.020
Also,

00:01:00.020 --> 00:01:04.940
it's important to note when you ask for an instance off a product I've bean from the

00:01:04.940 --> 00:01:05.830
container.

00:01:05.830 --> 00:01:09.820
It's as good as creating a new instance using the new keyword.

00:01:09.820 --> 00:01:12.620
But instead of using the New Key world,

00:01:12.620 --> 00:01:14.810
you would simply do it dependency.

00:01:14.810 --> 00:01:18.090
Look up And in order to do the look up,

00:01:18.090 --> 00:01:19.960
you would need the application context.

00:01:19.960 --> 00:01:20.450
Object.

00:01:20.450 --> 00:01:22.300
And for that,

00:01:22.300 --> 00:01:27.960
you just make use off the application context ever interface and a Sprinkle taker off,

00:01:27.960 --> 00:01:29.750
injecting that object.

00:01:29.750 --> 00:01:32.100
And so you can reckless for that bean.

00:01:32.100 --> 00:01:33.320
All right,

00:01:33.320 --> 00:01:34.350
I'll see you soon.

