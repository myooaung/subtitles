WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.390
in this video,

00:00:01.390 --> 00:00:03.930
we're going to talk about cycling dependency,

00:00:03.930 --> 00:00:06.660
and then we're going to take a look at a couple of examples off.

00:00:06.660 --> 00:00:08.580
Same first of all,

00:00:08.580 --> 00:00:10.190
what is cycling dependency?

00:00:10.190 --> 00:00:10.530
Well,

00:00:10.530 --> 00:00:15.430
you might have guessed it already is just simply means a couple of beans dependent on each

00:00:15.430 --> 00:00:15.870
other.

00:00:15.870 --> 00:00:23.940
Let's say that we have bean A and being be then a is dependent on B and B is dependent on a

00:00:23.940 --> 00:00:25.950
that's called cycling dependency.

00:00:25.950 --> 00:00:28.180
Now let us take a look at an example.

00:00:28.180 --> 00:00:28.400
Ofs.

00:00:28.400 --> 00:00:31.470
I click dependency in case off center injection.

00:00:31.470 --> 00:00:37.970
So what I have here is couple of beans and the boat or dependent on each other,

00:00:37.970 --> 00:00:42.090
and I have introduced the settle methods accordingly.

00:00:42.090 --> 00:00:46.850
And since I'm using the auto wide annotation,

00:00:46.850 --> 00:00:50.750
I don't have to do much in our conflict file.

00:00:50.750 --> 00:00:51.630
But of course,

00:00:51.630 --> 00:00:53.550
we need to define the beans.

00:00:53.550 --> 00:00:54.290
Now.

00:00:54.290 --> 00:00:55.550
If I run the program,

00:00:55.550 --> 00:00:58.430
are we going to see an exception?

00:00:58.430 --> 00:01:00.650
Or will the program run successfully?

00:01:00.650 --> 00:01:02.100
What's your guess?

00:01:02.100 --> 00:01:04.060
Well,

00:01:04.060 --> 00:01:10.590
there won't be any kind of a problem because the beans are constructed without any problem

00:01:10.590 --> 00:01:10.590
,

00:01:10.590 --> 00:01:12.840
and after that,

00:01:12.840 --> 00:01:18.490
once all the beans already there ready to be injected and spring will not have any problem

00:01:18.490 --> 00:01:19.830
injecting the beans,

00:01:19.830 --> 00:01:22.050
even though they're dependent on each other.

00:01:22.050 --> 00:01:24.090
Let's on the program,

00:01:24.090 --> 00:01:26.990
and you would see the result.

00:01:26.990 --> 00:01:30.550
It worked,

00:01:30.550 --> 00:01:38.650
so we were able to call the sample methods off each bean.

00:01:38.650 --> 00:01:41.450
It's as simple as that,

00:01:41.450 --> 00:01:46.210
and these methods are just calling the method off the dependent bean.

00:01:46.210 --> 00:01:50.440
Now,

00:01:50.440 --> 00:01:54.100
if I try to accomplish the same using constructor injection,

00:01:54.100 --> 00:01:55.890
let's see what's going to happen.

00:01:55.890 --> 00:01:59.040
I'm going to change this.

00:01:59.040 --> 00:02:02.610
Do constructor injection quickly,

00:02:02.610 --> 00:02:13.490
so we now will have the constructor with Para meter.

00:02:13.490 --> 00:02:24.050
Same stuff should go in here as well.

00:02:24.050 --> 00:02:29.100
Annotate the constructor with hardwired,

00:02:29.100 --> 00:02:31.610
make it caromed,

00:02:31.610 --> 00:02:41.550
rised and then said the property value that's on the program and see the result.

00:02:41.550 --> 00:02:46.180
And we'll see an exception hopes.

00:02:46.180 --> 00:02:48.250
Let me fix the Java conflict first,

00:02:48.250 --> 00:02:50.750
we'll fix it later.

00:02:50.750 --> 00:02:51.360
For now,

00:02:51.360 --> 00:03:00.510
let's just commended out and sure enough,

00:03:00.510 --> 00:03:02.750
we have an exception.

00:03:02.750 --> 00:03:08.650
So what has caused the problem?

00:03:08.650 --> 00:03:11.950
Can you make a guess?

00:03:11.950 --> 00:03:13.590
Well,

00:03:13.590 --> 00:03:14.690
if you think a bit,

00:03:14.690 --> 00:03:21.180
it's quite obvious that spring cannot inject the dependencies because Spring will try to

00:03:21.180 --> 00:03:25.220
construct this object when it is inside the constructor.

00:03:25.220 --> 00:03:29.850
And there it sees that this being is dependent on another bean.

00:03:29.850 --> 00:03:34.700
So in order to inject another being into sample being,

00:03:34.700 --> 00:03:38.370
it must first create the instance off another bean.

00:03:38.370 --> 00:03:42.070
So it will try to call the constructor off another bean.

00:03:42.070 --> 00:03:49.000
And here it comes across the statement and notices that this another being is dependent on

00:03:49.000 --> 00:03:51.100
sample being again.

00:03:51.100 --> 00:03:54.730
It will try to call the constructor off the sample being,

00:03:54.730 --> 00:03:57.550
and it goes on and on forever.

00:03:57.550 --> 00:03:59.150
It will never end.

00:03:59.150 --> 00:04:03.400
So it's not possible to even create the instances,

00:04:03.400 --> 00:04:05.940
let alone injecting the dependencies.

00:04:05.940 --> 00:04:07.460
So in the scarce,

00:04:07.460 --> 00:04:12.780
you must go with center injection and not prefer the constructor injection.

00:04:12.780 --> 00:04:16.080
Let me just don't do those changes.

00:04:16.080 --> 00:04:27.250
All right?

00:04:27.250 --> 00:04:28.450
I'll see you soon.

