WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.720
okay.

00:00:05.720 --> 00:00:08.590
We have seen that spring manages the lifecycle off a bean,

00:00:08.590 --> 00:00:12.870
but it may not be able to manage the complete lifecycle off a product I've bean.

00:00:12.870 --> 00:00:18.390
Here is a statement from the official spring documentation and here's what it states.

00:00:18.390 --> 00:00:23.240
Spring does not manage the complete lifecycle off a product I bean the continuance.

00:00:23.240 --> 00:00:29.540
10 she ate come figures decorates in otherwise a symbol separate type object hands it to

00:00:29.540 --> 00:00:34.450
the client and then has no for the knowledge off the prototype instance,

00:00:34.450 --> 00:00:40.620
this means that while initialization callback methods will be called on all objects

00:00:40.620 --> 00:00:44.290
regardless off scope in the case off prototypes,

00:00:44.290 --> 00:00:48.700
any conficker destruction lifecycle callbacks will not be called.

00:00:48.700 --> 00:00:55.030
It is a responsibility off the client code to clean up the prototype scope objects and

00:00:55.030 --> 00:01:00.060
release any expensive resources that the prototype beans are holding on to.

00:01:00.060 --> 00:01:03.270
What this means is Sprinkle taker off.

00:01:03.270 --> 00:01:08.910
Calling the lifecycle callback matters before the object is made available for you to use,

00:01:08.910 --> 00:01:12.900
and after that it just does not have any hold off that object.

00:01:12.900 --> 00:01:18.080
And so all the life cycle callback methods that come after it like,

00:01:18.080 --> 00:01:18.650
for example,

00:01:18.650 --> 00:01:22.520
that destroy mattered cannot be called by the spring container.

00:01:22.520 --> 00:01:24.250
But that being said,

00:01:24.250 --> 00:01:28.030
we can work around it and create our own implementation.

00:01:28.030 --> 00:01:29.320
We will talk about it.

00:01:29.320 --> 00:01:30.360
Incoming video.

00:01:30.360 --> 00:01:33.550
But let us take a look at an example off this scenario.

00:01:33.550 --> 00:01:37.080
Okay,

00:01:37.080 --> 00:01:38.020
here we are again.

00:01:38.020 --> 00:01:43.110
What we have here is pretty much the same example as the one that were looked at in being

00:01:43.110 --> 00:01:44.410
lifecycle chapter.

00:01:44.410 --> 00:01:46.890
So inside over several conflict class.

00:01:46.890 --> 00:01:54.780
I just have the unit and destroy mattered and have declared those two methods in here as

00:01:54.780 --> 00:01:55.990
part of the being tag.

00:01:55.990 --> 00:02:00.250
And we also have the being post Prosser class.

00:02:00.250 --> 00:02:02.590
It's as simple as that.

00:02:02.590 --> 00:02:06.260
Let's run the program and see the result.

00:02:06.260 --> 00:02:11.070
But do take a note that we didn't defining the scope of this being.

00:02:11.070 --> 00:02:19.620
So it has defaulted two single down and here is the result.

00:02:19.620 --> 00:02:20.650
As expected,

00:02:20.650 --> 00:02:25.460
all the life cycle called back methods were called,

00:02:25.460 --> 00:02:29.110
including the destroy call back method.

00:02:29.110 --> 00:02:31.960
I'm talking about this,

00:02:31.960 --> 00:02:42.820
but now if I make this being a prototype scope being then everything I mean all the life.

00:02:42.820 --> 00:02:48.080
Second callback methods will be called until the point object is made available for the

00:02:48.080 --> 00:02:48.950
application.

00:02:48.950 --> 00:02:50.970
But after that,

00:02:50.970 --> 00:02:53.350
since spring does not have control off it.

00:02:53.350 --> 00:02:57.050
Spring cannot take care off calling the destroy method.

00:02:57.050 --> 00:03:03.050
So I'm going to change the scope off this being to prototype.

00:03:03.050 --> 00:03:06.650
And now if you run the program,

00:03:06.650 --> 00:03:08.960
you'll see it missing.

00:03:08.960 --> 00:03:11.650
This matter is no longer called.

00:03:11.650 --> 00:03:16.250
So now the real question.

00:03:16.250 --> 00:03:21.480
Why does spring does not handle or cannot handle the complete lifecycle off a product I've

00:03:21.480 --> 00:03:21.960
bean?

00:03:21.960 --> 00:03:23.350
Let's take a look.

00:03:23.350 --> 00:03:26.110
All right.

00:03:26.110 --> 00:03:30.240
Here are a couple of reasons which I can think off as the White Spring cannot handle the

00:03:30.240 --> 00:03:32.360
complete lifecycle off a product I've bean.

00:03:32.360 --> 00:03:37.900
The first off word is when the client called request for a Singleton instance Spring does

00:03:37.900 --> 00:03:38.270
not.

00:03:38.270 --> 00:03:40.510
Our spring does not give the instance itself,

00:03:40.510 --> 00:03:42.380
but a reference to it.

00:03:42.380 --> 00:03:47.190
The reason why Spring had to do it because there might be other threats,

00:03:47.190 --> 00:03:50.350
which may be requiring the reference off their object as well.

00:03:50.350 --> 00:03:51.370
So hands,

00:03:51.370 --> 00:03:57.670
in case off singleton scope Beans Spring have to keep the stance with it so that it can

00:03:57.670 --> 00:03:59.880
manage giving the references,

00:03:59.880 --> 00:04:02.050
and since the object is with spring,

00:04:02.050 --> 00:04:03.520
it can take it off,

00:04:03.520 --> 00:04:05.400
managing the complete lifecycle.

00:04:05.400 --> 00:04:11.580
But when you request where a prototype bean spring will create the bean and gives it to you

00:04:11.580 --> 00:04:11.580
.

00:04:11.580 --> 00:04:15.340
It does not keep the instance with itself and sew.

00:04:15.340 --> 00:04:19.300
It does not have any hold off it to manage the rest off its life cycle.

00:04:19.300 --> 00:04:21.360
It's as simple as that.

00:04:21.360 --> 00:04:27.270
But Spring will try its best by calling all the callback methods before the object is

00:04:27.270 --> 00:04:29.450
handed over to the trying code.

00:04:29.450 --> 00:04:31.120
And after that,

00:04:31.120 --> 00:04:35.850
it is you as a programmer who have to take her off all the destroying formalities,

00:04:35.850 --> 00:04:36.990
if there are any.

00:04:36.990 --> 00:04:38.740
And as I've already mentioned,

00:04:38.740 --> 00:04:42.400
going to take a look at such example in next video,

00:04:42.400 --> 00:04:46.350
we're going to use the being post Prosser to accomplish the task.

00:04:46.350 --> 00:04:51.450
So we indeed will be able to call the destroy method off a product I bean.

00:04:51.450 --> 00:04:53.610
And here is another reason.

00:04:53.610 --> 00:04:59.170
Even if you somehow June the spring framework to handle the complete lifecycle off a

00:04:59.170 --> 00:05:00.200
prototype bean,

00:05:00.200 --> 00:05:04.210
then it may simply make the container very inefficient.

00:05:04.210 --> 00:05:09.610
The reason is a singleton being is guaranteed to have only one single in stance.

00:05:09.610 --> 00:05:11.730
But whereas for a prototype bean,

00:05:11.730 --> 00:05:14.220
it can have hundreds,

00:05:14.220 --> 00:05:16.690
thousands or even millions off instances,

00:05:16.690 --> 00:05:21.540
and we can't expect spring container toe handle the complete lifecycle off each and every

00:05:21.540 --> 00:05:26.910
bean that ever exist in your application is just simply not practical at all.

00:05:26.910 --> 00:05:28.220
So that's about it.

00:05:28.220 --> 00:05:29.970
I'll see you in my next video.

