WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.900
Okay,

00:00:04.900 --> 00:00:09.250
Here are some of the examples off event that can take place on the server side.

00:00:09.250 --> 00:00:10.360
For example,

00:00:10.360 --> 00:00:16.850
we can have transaction failed event in case of the transaction Failed as an example.

00:00:16.850 --> 00:00:22.590
Say that you have a banking application and your log in as a user to send funds to your

00:00:22.590 --> 00:00:23.110
friend.

00:00:23.110 --> 00:00:25.710
And if the transaction fails,

00:00:25.710 --> 00:00:30.830
that should trigger this transaction fail event and we should be having some kind of a

00:00:30.830 --> 00:00:34.610
handling code we're in will do something meaningful.

00:00:34.610 --> 00:00:39.980
Maybe you wanted to send out an email or an SMS to the user stating that the transaction

00:00:39.980 --> 00:00:40.850
has failed,

00:00:40.850 --> 00:00:42.150
etcetera.

00:00:42.150 --> 00:00:43.090
Similarly,

00:00:43.090 --> 00:00:46.640
we can have or we can create many such events.

00:00:46.640 --> 00:00:54.190
We can have transaction success event or user and rolled event once the user and Rose.

00:00:54.190 --> 00:00:59.200
Then maybe you wanted to send a welcome message as part of the handling code,

00:00:59.200 --> 00:01:02.890
and we can have user unsubscribed event,

00:01:02.890 --> 00:01:08.580
in which cases you want to send out an email asking for feedback or whatever.

00:01:08.580 --> 00:01:12.270
So there can be 100 different cases where we can have event.

00:01:12.270 --> 00:01:18.380
But the one that we're going to consider in our example is this transaction failed event.

00:01:18.380 --> 00:01:22.670
So if I want to write cord at the very top level.

00:01:22.670 --> 00:01:24.380
Roughly.

00:01:24.380 --> 00:01:25.780
This is how it would look.

00:01:25.780 --> 00:01:27.500
We'll have a bean,

00:01:27.500 --> 00:01:35.300
something like managed funds within which will have a method like San funds and then gives

00:01:35.300 --> 00:01:36.070
the transaction,

00:01:36.070 --> 00:01:36.950
is failed.

00:01:36.950 --> 00:01:40.480
Then we wanted to send an email.

00:01:40.480 --> 00:01:43.310
But how are we sending the email?

00:01:43.310 --> 00:01:44.280
It's like this.

00:01:44.280 --> 00:01:48.690
We're trying to create an instance of the email service object,

00:01:48.690 --> 00:01:51.800
and then we're calling its method send message.

00:01:51.800 --> 00:01:52.970
Well,

00:01:52.970 --> 00:01:56.350
this is bad practice because off one good reason.

00:01:56.350 --> 00:01:59.090
Both the beans are tightly coupled.

00:01:59.090 --> 00:02:02.740
But the real problem arises when you want to add even more.

00:02:02.740 --> 00:02:03.420
Listeners,

00:02:03.420 --> 00:02:04.470
for example,

00:02:04.470 --> 00:02:06.810
say that you also wanted to send an SMS.

00:02:06.810 --> 00:02:12.680
Then you'd have to create an instance off SMS service and then call its method.

00:02:12.680 --> 00:02:13.690
Similarly,

00:02:13.690 --> 00:02:15.950
say that you also wanted to send notification.

00:02:15.950 --> 00:02:19.950
You have to create an instance and call its method.

00:02:19.950 --> 00:02:23.710
So every time you need to incorporate a new listener,

00:02:23.710 --> 00:02:28.120
you have to make changes in this manage funds being well.

00:02:28.120 --> 00:02:34.170
This brings me to talk about the observer designed Patton and what observers and Baton

00:02:34.170 --> 00:02:38.410
states is that when you have such scenario with observer design,

00:02:38.410 --> 00:02:39.080
Patton,

00:02:39.080 --> 00:02:43.120
you don't actually create instances off the listeners and then call their methods.

00:02:43.120 --> 00:02:43.910
Instead,

00:02:43.910 --> 00:02:49.670
he would create a provision through which all the listeners can actually add themselves or

00:02:49.670 --> 00:02:51.970
subscribe to a particular event.

00:02:51.970 --> 00:02:53.950
Let me show you what I mean.

00:02:53.950 --> 00:02:57.160
Instead of calling methods by creating instances,

00:02:57.160 --> 00:03:02.980
I'm actually going to create a list off observers along with couple off methods.

00:03:02.980 --> 00:03:06.450
One method is to add elements to this list,

00:03:06.450 --> 00:03:12.650
and this method would be called by the listeners who want to listen to a particular event

00:03:12.650 --> 00:03:17.150
and this sort off add themselves to this list.

00:03:17.150 --> 00:03:23.030
And then we have this method publish wherein we'll just look through all the listeners and

00:03:23.030 --> 00:03:25.490
then call their method send message.

00:03:25.490 --> 00:03:27.300
So this time,

00:03:27.300 --> 00:03:29.050
but never transaction fails.

00:03:29.050 --> 00:03:31.470
We're simply going to call this mattered,

00:03:31.470 --> 00:03:37.550
which in turn we looked through all the observers that were part of this list,

00:03:37.550 --> 00:03:46.750
and Sarnoff called the handling method send message My beauty off this approach is that the

00:03:46.750 --> 00:03:53.040
managed funds being doesn't have to know about the listeners and all it is going to care is

00:03:53.040 --> 00:03:58.240
is just going to look through all the elements in the list and call their methods in pewter

00:03:58.240 --> 00:03:58.240
.

00:03:58.240 --> 00:04:02.750
If you'd like to add one more observer or even handling code,

00:04:02.750 --> 00:04:13.440
Then you can just simply create a class like this and then subscribe to the event by

00:04:13.440 --> 00:04:17.230
calling this method the reason why this is called observer design.

00:04:17.230 --> 00:04:24.370
Patton is because all these beans are observers who are ready to listen to an event

00:04:24.370 --> 00:04:34.550
published by the managed funds being and in here the managed funds being is observable,

00:04:34.550 --> 00:04:42.620
so we have an observable being and observers list of observers.

00:04:42.620 --> 00:04:45.920
This is somewhat synonymous to how the Twitter walks.

00:04:45.920 --> 00:04:48.150
If you're following a celebrity,

00:04:48.150 --> 00:04:50.600
you'll get a notification whenever the tweet.

00:04:50.600 --> 00:04:54.960
But the celebrity does not need to know who are all listening to them.

00:04:54.960 --> 00:04:56.690
Under similar lines,

00:04:56.690 --> 00:05:00.250
the managed funds been doesn't need to know who are listening.

00:05:00.250 --> 00:05:01.940
I hope it makes sense,

00:05:01.940 --> 00:05:06.370
and this is how eventing would work in spring framework as well.

00:05:06.370 --> 00:05:09.670
We're going to take a look at an example pretty soon.

