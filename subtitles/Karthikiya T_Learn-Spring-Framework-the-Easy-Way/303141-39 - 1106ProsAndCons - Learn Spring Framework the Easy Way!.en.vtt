WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.830
Okay,

00:00:05.830 --> 00:00:08.180
let us conclude on the chapter off water wiring.

00:00:08.180 --> 00:00:09.190
And in this video,

00:00:09.190 --> 00:00:13.320
we're going to take a look at some of the pros and cons off using auto wiring.

00:00:13.320 --> 00:00:13.970
First,

00:00:13.970 --> 00:00:18.180
let's talk about some of the reasons why you might want to use Auto Whiting.

00:00:18.180 --> 00:00:24.470
The first advantage is pretty evident is that you're going to save a lot of typing.

00:00:24.470 --> 00:00:31.140
And so the development efforts in our conflict file we're not taking any time to add any

00:00:31.140 --> 00:00:32.160
extra constructor.

00:00:32.160 --> 00:00:33.950
Arguments are properties.

00:00:33.950 --> 00:00:36.520
It would all be taken care by spring itself,

00:00:36.520 --> 00:00:39.190
and that would save some development effort.

00:00:39.190 --> 00:00:42.230
And the second point in here is somewhat call.

00:00:42.230 --> 00:00:47.600
Relatable with the same is that you don't have to add a new property when you're using the

00:00:47.600 --> 00:00:49.040
auto wide annotation.

00:00:49.040 --> 00:00:50.690
So in future,

00:00:50.690 --> 00:00:55.400
if you're going to add additional dependencies in your being or additional feels,

00:00:55.400 --> 00:00:57.320
that should bean depends on.

00:00:57.320 --> 00:01:02.760
You don't have to explicitly mention them as constructor arguments our properties in your

00:01:02.760 --> 00:01:03.660
conflict file.

00:01:03.660 --> 00:01:07.850
It would all be taken care by spring framework.

00:01:07.850 --> 00:01:13.830
Now let us take a look at some of the reasons why you don't want to use auto wiring,

00:01:13.830 --> 00:01:16.490
and here are day First of all,

00:01:16.490 --> 00:01:22.000
if you want to inject a the primitive types or string type then you cannot use are

00:01:22.000 --> 00:01:22.740
providing.

00:01:22.740 --> 00:01:27.120
You have to explicitly perform the dependence injection in this case,

00:01:27.120 --> 00:01:30.120
and sometimes this might be a problem,

00:01:30.120 --> 00:01:32.270
because when you have a large project,

00:01:32.270 --> 00:01:36.310
you should ever go without providing or explicit configuration.

00:01:36.310 --> 00:01:37.990
But if you use mix of both,

00:01:37.990 --> 00:01:44.150
that's going to create some confusion and thereby Emma Hasam complications down the line.

00:01:44.150 --> 00:01:47.780
And another reason is explicit.

00:01:47.780 --> 00:01:48.740
Dependence is will.

00:01:48.740 --> 00:01:49.540
All right,

00:01:49.540 --> 00:01:50.570
auto wiring.

00:01:50.570 --> 00:01:54.170
Let's that you have a new developer who just joined your team,

00:01:54.170 --> 00:01:56.690
and he's not quite ever offspring framework.

00:01:56.690 --> 00:01:58.850
So based on his past experience,

00:01:58.850 --> 00:02:03.750
he used the new key word to declare the dependency that the being depends on.

00:02:03.750 --> 00:02:04.420
Well,

00:02:04.420 --> 00:02:05.410
this might be a problem,

00:02:05.410 --> 00:02:08.520
especially when you're trying to debunk for an issue.

00:02:08.520 --> 00:02:10.610
Because when you look at the conflict file,

00:02:10.610 --> 00:02:14.210
you notice that the dependency is performed pretty well.

00:02:14.210 --> 00:02:18.120
But you don't realize the fact that somebody else has messed up with your code by

00:02:18.120 --> 00:02:20.120
introducing a new key word,

00:02:20.120 --> 00:02:23.610
and not to mention that when you're using a spring framework,

00:02:23.610 --> 00:02:29.380
the last thing that you want to do is to use a new keyword in your code on top off it.

00:02:29.380 --> 00:02:30.930
If you're using or providing,

00:02:30.930 --> 00:02:36.620
it might be even harder for you to debunk the issue and that this might be a problem in

00:02:36.620 --> 00:02:37.550
some cases.

00:02:37.550 --> 00:02:40.480
And on the last point in here,

00:02:40.480 --> 00:02:46.350
there are tools out there which would generate the documentation By scanning your project.

00:02:46.350 --> 00:02:52.400
Those tools would be able to look at the conflict files and create documentation as toe,

00:02:52.400 --> 00:02:54.650
which being is dependent on which being.

00:02:54.650 --> 00:02:56.840
But if you're using or providing,

00:02:56.840 --> 00:02:57.880
these tools,

00:02:57.880 --> 00:03:01.670
cannot actually know what each being is dependent on,

00:03:01.670 --> 00:03:04.340
and so there won't be any documentation,

00:03:04.340 --> 00:03:09.610
so there would be a need for manual intervention to edit the documentation.

00:03:09.610 --> 00:03:12.210
And when you have manual intervention,

00:03:12.210 --> 00:03:16.110
that's going to result in some inaccurate documentation.

00:03:16.110 --> 00:03:17.950
And that's clearly a problem.

00:03:17.950 --> 00:03:20.960
So this is essence off what a wiring.

00:03:20.960 --> 00:03:25.980
But like I had all the dimension before the real power off water wiring will come into

00:03:25.980 --> 00:03:28.620
picture when you're developing Web applications.

00:03:28.620 --> 00:03:34.010
Justin Spring framework there you don't even have to define the beans in the conflict file

00:03:34.010 --> 00:03:34.010
.

00:03:34.010 --> 00:03:38.100
All the beans can be scanned by spring itself,

00:03:38.100 --> 00:03:42.250
but for now it's clearly out of the scope of what we want to discuss,

00:03:42.250 --> 00:03:44.150
so I will see you soon

