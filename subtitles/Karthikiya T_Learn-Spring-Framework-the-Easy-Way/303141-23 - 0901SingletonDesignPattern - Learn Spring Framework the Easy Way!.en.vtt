WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.900
okay,

00:00:00.900 --> 00:00:03.490
Before we talk about being scopes in spring,

00:00:03.490 --> 00:00:07.250
let us try to understand what is a single turned isn't baton in general.

00:00:07.250 --> 00:00:12.750
Thereby will have some solid foundation toe understand scope off beans in spring.

00:00:12.750 --> 00:00:16.820
So what is the singleton designed Patton single Done designed?

00:00:16.820 --> 00:00:21.760
Baton ensures that you would be able to create only one instance off a class,

00:00:21.760 --> 00:00:25.550
and you would use the same instance across your application.

00:00:25.550 --> 00:00:28.750
So no matter how many times he would be needing that object,

00:00:28.750 --> 00:00:33.700
he would use the same object again and again everywhere in your application.

00:00:33.700 --> 00:00:37.260
We're going to talk about some of the scenarios where this might be useful,

00:00:37.260 --> 00:00:42.630
But let us try to understand how we can bring up a very simple example off single time

00:00:42.630 --> 00:00:43.530
descent baton.

00:00:43.530 --> 00:00:48.670
So what you're seeing right here is a simplest example that I can think off the

00:00:48.670 --> 00:00:49.660
Demonstrates,

00:00:49.660 --> 00:00:51.560
the Singleton's and Patton.

00:00:51.560 --> 00:00:56.510
So now my goal is actually to restrict the creation.

00:00:56.510 --> 00:00:57.200
Often instance,

00:00:57.200 --> 00:00:58.730
off this class toe,

00:00:58.730 --> 00:00:59.650
only one.

00:00:59.650 --> 00:01:03.550
Nobody can create more than one instance off this class,

00:01:03.550 --> 00:01:05.750
so let's see how we can accomplish that.

00:01:05.750 --> 00:01:13.930
So the first thing that I did is a made the constructor private What this means is when the

00:01:13.930 --> 00:01:16.350
constructor is a the public or default.

00:01:16.350 --> 00:01:22.570
We can actually create an instance off this class from elsewhere outside this class.

00:01:22.570 --> 00:01:25.050
But if I make it a private constructor,

00:01:25.050 --> 00:01:30.570
then I can only create instances off this class from Britain the same class itself,

00:01:30.570 --> 00:01:32.030
not anywhere else.

00:01:32.030 --> 00:01:34.180
And that's what I'm trying to do in here.

00:01:34.180 --> 00:01:38.920
I'm trying to create an instance and assign it to this variable.

00:01:38.920 --> 00:01:40.620
But before I do that,

00:01:40.620 --> 00:01:45.600
I'm also checking to see if the instance is now.

00:01:45.600 --> 00:01:51.450
If it is not only then I'm trying to assign that instance in here.

00:01:51.450 --> 00:01:52.590
And then finally,

00:01:52.590 --> 00:01:56.750
I'm just returning this variable when this matter is called,

00:01:56.750 --> 00:02:00.340
and that's all there is to it Now.

00:02:00.340 --> 00:02:04.330
We thought off accomplished a single turn designed Patton because the first time that a

00:02:04.330 --> 00:02:09.650
request for an object this is going to be no and the condition would be satisfied.

00:02:09.650 --> 00:02:13.190
And so there's going to be a new instance assigned,

00:02:13.190 --> 00:02:15.800
and I'm returning that in stance.

00:02:15.800 --> 00:02:17.140
The second time,

00:02:17.140 --> 00:02:23.420
a request for in stance the condition would no longer be valid because we already had an

00:02:23.420 --> 00:02:23.950
instance,

00:02:23.950 --> 00:02:26.050
created prayer to ask him for it.

00:02:26.050 --> 00:02:27.330
So Likewise,

00:02:27.330 --> 00:02:30.660
for all the subsequent requests to get the instance,

00:02:30.660 --> 00:02:32.790
we would keep getting the same in stance.

00:02:32.790 --> 00:02:36.450
But there won't be any new creation off Dane stands.

00:02:36.450 --> 00:02:41.180
So let's go to our example Main method and try to demonstrate the same.

00:02:41.180 --> 00:02:49.950
I'm just simply going to put a since our statement and then I would say single Thanh

00:02:49.950 --> 00:02:51.750
example.

00:02:51.750 --> 00:02:55.020
Dark getting stance and then,

00:02:55.020 --> 00:02:55.570
if I wish,

00:02:55.570 --> 00:02:57.950
I can call the business logic method.

00:02:57.950 --> 00:03:03.650
But here I just simply want to print the hash court off the object,

00:03:03.650 --> 00:03:10.250
and I'm going to do this several times.

00:03:10.250 --> 00:03:18.490
So no matter how many times I'm going to request for in stance only for the first time,

00:03:18.490 --> 00:03:22.850
the instance would be created and forest off the instructions.

00:03:22.850 --> 00:03:27.660
This condition will not be satisfied,

00:03:27.660 --> 00:03:30.050
and so I keep getting the same instance.

00:03:30.050 --> 00:03:31.590
It's as simple as that.

00:03:31.590 --> 00:03:32.950
It's on the program,

00:03:32.950 --> 00:03:35.100
and sure enough,

00:03:35.100 --> 00:03:38.350
the hash code is displayed all same.

00:03:38.350 --> 00:03:42.450
That means we're trying to get the same instance again and again,

00:03:42.450 --> 00:03:46.560
but unfortunately wouldn't quite accomplish our goal off.

00:03:46.560 --> 00:03:54.330
Singleton designed Patton because was still left a loophole where there is a possibility to

00:03:54.330 --> 00:03:56.580
create multiple instances off this class.

00:03:56.580 --> 00:04:03.700
The possibility is there when you have a multi traded enrollment where multiple threats are

00:04:03.700 --> 00:04:07.950
trying to access this piece off logic at the same time,

00:04:07.950 --> 00:04:15.910
then there could be a possibility that multiple threads well satisfy this condition and

00:04:15.910 --> 00:04:17.010
enter the section off,

00:04:17.010 --> 00:04:19.550
cored and create multiple instances.

00:04:19.550 --> 00:04:21.750
Let me just try to demonstrate the same.

00:04:21.750 --> 00:04:28.950
I'm a gated off this from here and let me create a new thread.

00:04:28.950 --> 00:04:37.900
And I'm going to use the Lambda Expression and Justin goods if you're not aware off Lambda

00:04:37.900 --> 00:04:38.850
Expressions.

00:04:38.850 --> 00:04:44.740
This is a feature introduced in Java abortion aid and my course on Java programming

00:04:44.740 --> 00:04:46.550
explains this beautifully,

00:04:46.550 --> 00:04:51.650
and what I'm going to do is the exact thing that I'm trying to do in here.

00:04:51.650 --> 00:04:59.830
I just want to get the hash cut off that instance and print it.

00:04:59.830 --> 00:05:02.250
I'm going to say trade dot start,

00:05:02.250 --> 00:05:15.290
and I'm going to do it multiple times that's on the program.

00:05:15.290 --> 00:05:17.900
Okay,

00:05:17.900 --> 00:05:18.650
This time,

00:05:18.650 --> 00:05:20.100
coincidentally,

00:05:20.100 --> 00:05:22.350
all the threads went in sequence.

00:05:22.350 --> 00:05:26.680
But if you keep running so there we have it.

00:05:26.680 --> 00:05:31.570
We have a hash code that is different from others.

00:05:31.570 --> 00:05:36.070
That means we now have two instances off this class,

00:05:36.070 --> 00:05:39.150
So this object is not a singleton object.

00:05:39.150 --> 00:05:45.400
And this would be more evident if I try to keep a timer in here.

00:05:45.400 --> 00:05:55.720
Are are just simply use thread dot sleep and I would wait for 1000 seconds off course when

00:05:55.720 --> 00:05:56.830
it dropped the court with try,

00:05:56.830 --> 00:05:57.750
catch block.

00:05:57.750 --> 00:06:01.450
And now let's run the program.

00:06:01.450 --> 00:06:06.290
And you would notice that all the objects are different.

00:06:06.290 --> 00:06:08.350
That means we have.

00:06:08.350 --> 00:06:11.130
If you have 10 different threats,

00:06:11.130 --> 00:06:14.450
you're going to have 10 different instances off that class.

00:06:14.450 --> 00:06:21.190
Definitely not a good thing if you're planning to accomplish the single to understand baton

00:06:21.190 --> 00:06:21.190
.

00:06:21.190 --> 00:06:23.410
So what would be the solution?

00:06:23.410 --> 00:06:24.030
Well,

00:06:24.030 --> 00:06:25.570
the solution is quite simple.

00:06:25.570 --> 00:06:32.150
All we have to do is to wrap this piece off coat within the synchronized block,

00:06:32.150 --> 00:06:35.550
and I'm going to do just that.

00:06:35.550 --> 00:06:45.450
And I'm going to let this class objects acquired the lock.

00:06:45.450 --> 00:06:46.950
Now,

00:06:46.950 --> 00:06:48.690
this is all core java.

00:06:48.690 --> 00:06:54.360
I'm assuming that you older in all this stuff if not again,

00:06:54.360 --> 00:06:56.050
you can check my course on the same.

00:06:56.050 --> 00:07:00.170
It's a beautiful course rated very good.

00:07:00.170 --> 00:07:04.300
I'm gonna have this check here as well.

00:07:04.300 --> 00:07:07.070
Hopes.

00:07:07.070 --> 00:07:12.050
Why is it not getting copied?

00:07:12.050 --> 00:07:14.980
Okay,

00:07:14.980 --> 00:07:18.250
It's to control sea and control the perfect.

00:07:18.250 --> 00:07:23.660
So Now what I'm trying to do here.

00:07:23.660 --> 00:07:28.390
Let's say that there are a couple of treads which are trying to get inside the section off

00:07:28.390 --> 00:07:28.850
code,

00:07:28.850 --> 00:07:34.750
and let's say they both have this condition met center here,

00:07:34.750 --> 00:07:40.450
and one of the thread would be ableto acquire the lock and entered the section off court

00:07:40.450 --> 00:07:41.940
and then created.

00:07:41.940 --> 00:07:42.650
Instance.

00:07:42.650 --> 00:07:46.070
When second threat tries to enter the synchronous section,

00:07:46.070 --> 00:07:53.250
this condition will not be met anymore and hands it would grab the existing instance.

00:07:53.250 --> 00:07:57.640
It's as simple as that now the striker on the program.

00:07:57.640 --> 00:08:00.750
And sure enough,

00:08:00.750 --> 00:08:05.350
this time we have the same object everywhere.

00:08:05.350 --> 00:08:08.320
So now the real question.

00:08:08.320 --> 00:08:10.500
Why would you ever want to use a single Tenders?

00:08:10.500 --> 00:08:11.240
And Patton?

00:08:11.240 --> 00:08:11.760
Well,

00:08:11.760 --> 00:08:13.250
the answer is quite simple.

00:08:13.250 --> 00:08:18.560
Why would you want to create so many instances when it doesn't make sense just to let you

00:08:18.560 --> 00:08:19.090
know?

00:08:19.090 --> 00:08:22.810
Creating an instance demands bit off a performance,

00:08:22.810 --> 00:08:24.880
and if you go ahead and create instance,

00:08:24.880 --> 00:08:28.820
everyone's a vial that's going to cost some performance.

00:08:28.820 --> 00:08:30.280
Moreover,

00:08:30.280 --> 00:08:33.920
creating an instance would also take bit off memory,

00:08:33.920 --> 00:08:39.390
and there is a possibility to come across with someone foreseen exceptions like part off

00:08:39.390 --> 00:08:40.180
memory exception,

00:08:40.180 --> 00:08:41.030
etcetera.

00:08:41.030 --> 00:08:42.230
So hence,

00:08:42.230 --> 00:08:47.650
we always should try to create the instance creation toe minimal and more ore.

00:08:47.650 --> 00:08:51.280
This class in here does not have any properties.

00:08:51.280 --> 00:08:56.560
That means the instances that we create from this class will not hold any state.

00:08:56.560 --> 00:08:58.550
If you're ever offi JB's,

00:08:58.550 --> 00:09:00.800
this is equal into a stateless being.

00:09:00.800 --> 00:09:03.150
The object doesn't hold any state.

00:09:03.150 --> 00:09:06.230
All it has is set off methods,

00:09:06.230 --> 00:09:08.100
and they perform a certain task.

00:09:08.100 --> 00:09:13.060
One good example of this is when you're trying to create a database connection.

00:09:13.060 --> 00:09:18.320
You don't want to create a database connection every time you contract with the database.

00:09:18.320 --> 00:09:20.500
That's going to cost a lot of performance.

00:09:20.500 --> 00:09:21.800
Rather,

00:09:21.800 --> 00:09:23.490
you would just create only once.

00:09:23.490 --> 00:09:24.750
In other words,

00:09:24.750 --> 00:09:29.430
you would implement a Singleton descent Patton to create the database connection object,

00:09:29.430 --> 00:09:34.920
and you would use the same object everywhere in your application and save the performance.

00:09:34.920 --> 00:09:35.810
Like was.

00:09:35.810 --> 00:09:38.010
If you're aware off logging mechanism,

00:09:38.010 --> 00:09:40.650
you just create one instance off a logger,

00:09:40.650 --> 00:09:45.040
and then you would use it across your application to print the logging messages on the

00:09:45.040 --> 00:09:46.200
standard output.

00:09:46.200 --> 00:09:49.450
But Singleton patent may not be ideal choice.

00:09:49.450 --> 00:09:52.180
If your object is going to hold some state,

00:09:52.180 --> 00:09:55.110
we're going to talk about it in coming video.

00:09:55.110 --> 00:09:56.150
I'll see you soon

