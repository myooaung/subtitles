WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.780
Okay.

00:00:00.780 --> 00:00:04.420
We have seen how to inject dependencies using constructor injection.

00:00:04.420 --> 00:00:05.350
In this video,

00:00:05.350 --> 00:00:10.940
we're going to talk about settle injection using settle injection over constructor

00:00:10.940 --> 00:00:13.310
injection will have a lot of benefits.

00:00:13.310 --> 00:00:15.780
But before we talk about the benefits,

00:00:15.780 --> 00:00:21.720
let us try to understand the settler injection in order to incorporate center injection

00:00:21.720 --> 00:00:22.540
mechanism.

00:00:22.540 --> 00:00:30.610
All you have to do is to get rid off this constructor from here and do they can know that

00:00:30.610 --> 00:00:35.450
we're in that implementation class And instead of using a constructor,

00:00:35.450 --> 00:00:42.790
all we're going to do is to use a bunch off center and get her methods to set all these

00:00:42.790 --> 00:00:45.730
fields Assassin Plaza.

00:00:45.730 --> 00:00:51.550
Now I don't have to type in all the methods I can make yourself the eclipse feature.

00:00:51.550 --> 00:00:54.060
Right click on gender getter.

00:00:54.060 --> 00:00:57.780
Since errors select auto and generate,

00:00:57.780 --> 00:00:59.250
that will do the trick.

00:00:59.250 --> 00:01:01.310
I want to do that,

00:01:01.310 --> 00:01:07.750
said the file exported as a jar archive and then imported into a spring project.

00:01:07.750 --> 00:01:13.910
And once you do that went to make changes in our project accordingly and the changes that

00:01:13.910 --> 00:01:17.560
are made doesn't go inside our application,

00:01:17.560 --> 00:01:20.150
but rather on the conflict files.

00:01:20.150 --> 00:01:23.590
So inside our conflict,

00:01:23.590 --> 00:01:27.250
XML instead off saying constructor arc.

00:01:27.250 --> 00:01:34.380
I'm going to use this tag property with this to attribute name would correspond to the

00:01:34.380 --> 00:01:37.110
field name and its corresponding value.

00:01:37.110 --> 00:01:38.750
Likewise,

00:01:38.750 --> 00:01:45.920
everything else is self explanatory and coming to Java come pick.

00:01:45.920 --> 00:01:47.190
It's nothing different.

00:01:47.190 --> 00:01:54.050
All have done here is I'm trying to create an instance off secular store implementation,

00:01:54.050 --> 00:01:59.450
which is this line and then I'm just simply trying to set the properties.

00:01:59.450 --> 00:02:02.950
It's as simple as that.

00:02:02.950 --> 00:02:05.870
Let's run the program,

00:02:05.870 --> 00:02:11.230
see the result and then we'll talk about the differences between the constructor injection

00:02:11.230 --> 00:02:12.370
and the centre injection.

00:02:12.370 --> 00:02:17.580
So this has worked well,

00:02:17.580 --> 00:02:25.180
same would be the case with Java Kontic I had already tested.

00:02:25.180 --> 00:02:31.100
So what are some of the good differences between the two?

00:02:31.100 --> 00:02:33.780
If you use that are injection,

00:02:33.780 --> 00:02:38.910
you have the flexibility to inject specific fields while ignoring others.

00:02:38.910 --> 00:02:43.960
Whereas if you're using constructor injection while the creation off the object itself,

00:02:43.960 --> 00:02:47.550
you're forced to provide all the para meters.

00:02:47.550 --> 00:02:49.840
Otherwise things won't work.

00:02:49.840 --> 00:02:51.670
But at the same time,

00:02:51.670 --> 00:02:53.720
this may be a drawback as well,

00:02:53.720 --> 00:02:58.120
because sometimes you may be required to inject all the fields.

00:02:58.120 --> 00:03:00.850
You can't ignore even one off them.

00:03:00.850 --> 00:03:01.890
In that case,

00:03:01.890 --> 00:03:05.560
constructor injection may be useful in our example.

00:03:05.560 --> 00:03:06.530
For instance,

00:03:06.530 --> 00:03:09.230
we can't risk missing any off this para meters.

00:03:09.230 --> 00:03:14.060
So it's better that we use constructor injection or settle injection in our case.

00:03:14.060 --> 00:03:21.230
And another don't age with settle injection is that you can change the values off these

00:03:21.230 --> 00:03:23.610
properties at later point off time,

00:03:23.610 --> 00:03:27.380
but it's not possible with constructor injection.

00:03:27.380 --> 00:03:29.360
Every time you want to change,

00:03:29.360 --> 00:03:32.750
you have to create a brand new object altogether,

00:03:32.750 --> 00:03:37.710
and you can't change just one field but combination off all the fields.

00:03:37.710 --> 00:03:40.140
That may be a drawback at times,

00:03:40.140 --> 00:03:41.450
or better yet,

00:03:41.450 --> 00:03:43.250
you can use combination of both.

00:03:43.250 --> 00:03:44.470
For example,

00:03:44.470 --> 00:03:54.080
we can still keep that constructor alive in here so that you have the flexibility way to go

00:03:54.080 --> 00:03:56.860
with constructor injection or settle injection.

00:03:56.860 --> 00:03:58.200
In that case,

00:03:58.200 --> 00:04:03.350
the values that you inject using settle injection will overwrite the values that you had

00:04:03.350 --> 00:04:05.910
injected using constructor injection.

00:04:05.910 --> 00:04:09.280
Also,

00:04:09.280 --> 00:04:14.530
I want to bring up one important point in here is that even after introducing so many

00:04:14.530 --> 00:04:17.200
changes in the implementation class,

00:04:17.200 --> 00:04:21.200
no no for double files were affected,

00:04:21.200 --> 00:04:22.740
the code remained,

00:04:22.740 --> 00:04:25.960
as is just as our previous example,

00:04:25.960 --> 00:04:30.260
there is no single line off code that has changed all the changes.

00:04:30.260 --> 00:04:31.050
However,

00:04:31.050 --> 00:04:35.120
who are inside our conflict files now?

00:04:35.120 --> 00:04:37.360
That's the beauty off dependents injection.

00:04:37.360 --> 00:04:43.030
If we were using the secular store implementation directly in our class,

00:04:43.030 --> 00:04:45.270
we had to make changes in our code.

00:04:45.270 --> 00:04:47.550
We have to remove that constructor.

00:04:47.550 --> 00:04:49.230
Make it a default,

00:04:49.230 --> 00:04:51.150
constructor Unparalled Metris,

00:04:51.150 --> 00:04:52.030
constructor!

00:04:52.030 --> 00:04:56.050
And then we have to set all the values inside our code.

00:04:56.050 --> 00:04:58.370
Just a very good point note.

00:04:58.370 --> 00:04:59.610
All right.

00:04:59.610 --> 00:05:01.070
I hope it makes sense.

00:05:01.070 --> 00:05:02.050
C ism.

