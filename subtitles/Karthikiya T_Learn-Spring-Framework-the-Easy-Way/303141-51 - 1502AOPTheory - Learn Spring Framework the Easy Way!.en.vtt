WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.000
Okay,

00:00:05.000 --> 00:00:08.100
let us take a look at a simple example off Able P.

00:00:08.100 --> 00:00:10.080
And for this purpose,

00:00:10.080 --> 00:00:15.250
I'm actually going to be using the coping mechanism provided by Spring Framework.

00:00:15.250 --> 00:00:16.880
But down the line,

00:00:16.880 --> 00:00:19.500
we may actually be required to use some external,

00:00:19.500 --> 00:00:23.550
ever be projects like Aspect J to address our needs.

00:00:23.550 --> 00:00:24.910
But for now,

00:00:24.910 --> 00:00:27.450
this also fines for our example.

00:00:27.450 --> 00:00:30.750
So clearly we have a problem in the scored.

00:00:30.750 --> 00:00:32.780
Along with the business logic,

00:00:32.780 --> 00:00:38.350
we're also dealing with one another aspect which is logging so in each and every mattered.

00:00:38.350 --> 00:00:42.950
We have a log message at the start and the end of the method.

00:00:42.950 --> 00:00:48.220
And with every Opie,

00:00:48.220 --> 00:00:53.510
we're going to get it off this from this file and let the developer focus only on the court

00:00:53.510 --> 00:00:55.850
functionality or the business logic.

00:00:55.850 --> 00:00:59.490
And in order to keep things simple in our example,

00:00:59.490 --> 00:01:05.150
we're going to focus only on the loan service will get it off the other services for now.

00:01:05.150 --> 00:01:10.130
And before we dive in with the practical example,

00:01:10.130 --> 00:01:13.950
let us have a theoretical walk through as to what we're going to do.

00:01:13.950 --> 00:01:17.540
So currently we have the loan service,

00:01:17.540 --> 00:01:20.830
and it is also dealing with other aspects like logging,

00:01:20.830 --> 00:01:23.500
and that's what these red boxes would represent.

00:01:23.500 --> 00:01:29.140
But now we're actually going to create another class that I specifically meant for the

00:01:29.140 --> 00:01:30.290
logging aspect,

00:01:30.290 --> 00:01:34.510
and we're going to move out the court off logging from the loan service.

00:01:34.510 --> 00:01:36.050
So this new class,

00:01:36.050 --> 00:01:39.450
so far we're able to separate these two concerns.

00:01:39.450 --> 00:01:41.370
But it is certainly not enough.

00:01:41.370 --> 00:01:46.770
We need to find a way to combine these two on the fly so that it would have.

00:01:46.770 --> 00:01:48.110
The similar behaviour,

00:01:48.110 --> 00:01:50.320
as our current application is having,

00:01:50.320 --> 00:01:55.250
is to print the long messages before and after the matter execution.

00:01:55.250 --> 00:01:57.310
And in order to do that,

00:01:57.310 --> 00:02:02.450
we're going to take help from spring to create so called a proxy object.

00:02:02.450 --> 00:02:08.460
A proxy object is essentially the combination of these two objects that get created on the

00:02:08.460 --> 00:02:10.620
fly when the container loads.

00:02:10.620 --> 00:02:16.000
What this essentially means is spring is actually going to use the Java's dynamic proxy

00:02:16.000 --> 00:02:19.410
mechanism to create a class file on the fly,

00:02:19.410 --> 00:02:22.960
and that class file extends the target class,

00:02:22.960 --> 00:02:24.910
which in this case is the loan service,

00:02:24.910 --> 00:02:30.490
and that class would have implementation in such way that it combines both the business

00:02:30.490 --> 00:02:37.460
logic and the aspect so whenever you make a call to one of the matters in the loan service

00:02:37.460 --> 00:02:37.460
,

00:02:37.460 --> 00:02:41.170
the call won't directly land on the loan service object itself,

00:02:41.170 --> 00:02:43.650
but rather on the proxy object.

00:02:43.650 --> 00:02:49.190
The proxy object will have the internal logic to call the methods off the loan service.

00:02:49.190 --> 00:02:50.210
Well,

00:02:50.210 --> 00:02:54.410
I understand the fact that this might sound confusing a bit once we take a look at a

00:02:54.410 --> 00:02:55.630
practical example off.

00:02:55.630 --> 00:02:56.250
Same,

00:02:56.250 --> 00:02:58.390
you will understand better.

00:02:58.390 --> 00:03:00.850
I'll see you in my next video.

