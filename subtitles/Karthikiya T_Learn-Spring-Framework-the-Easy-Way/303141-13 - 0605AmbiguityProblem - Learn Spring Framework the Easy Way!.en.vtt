WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.110
in one off my previous videos,

00:00:02.110 --> 00:00:07.600
I was mentioning that it's important that you provide the type attribute for each and every

00:00:07.600 --> 00:00:14.880
constructor argument that you send so that spring will be aware as to what type of literal

00:00:14.880 --> 00:00:16.010
is this.

00:00:16.010 --> 00:00:17.010
Otherwise,

00:00:17.010 --> 00:00:21.680
if you don't provide the type that may lead to ambiguity,

00:00:21.680 --> 00:00:28.150
So let us explore what is ambiguity in here We have a very simple class and it has couple

00:00:28.150 --> 00:00:32.080
of constructors and the both or accepting same number of para meters.

00:00:32.080 --> 00:00:38.100
But in one constructor we have string as the first argument in the other constructor.

00:00:38.100 --> 00:00:43.060
We have indigenous as the first argument from my convict file.

00:00:43.060 --> 00:00:46.660
I didn't tell spring what type off literal is this?

00:00:46.660 --> 00:00:51.890
So should the call go to this constructor or to this constructor?

00:00:51.890 --> 00:00:53.050
Well,

00:00:53.050 --> 00:00:54.650
spring would be confused.

00:00:54.650 --> 00:00:56.440
Spring cannot deter mine.

00:00:56.440 --> 00:01:03.120
Whether this literal should be treated as a string are as integer if it has to treat it as

00:01:03.120 --> 00:01:06.540
a string call would go here.

00:01:06.540 --> 00:01:08.950
Otherwise hair,

00:01:08.950 --> 00:01:13.870
we wouldn't have this am bigoted problem if there was only one constructor.

00:01:13.870 --> 00:01:20.650
Spring is smart enough to understand that there are three para meters in here and so the

00:01:20.650 --> 00:01:24.450
call has to go to the only constructor that is present in here.

00:01:24.450 --> 00:01:27.490
But when you have two constructors,

00:01:27.490 --> 00:01:29.500
that may cause ambiguity.

00:01:29.500 --> 00:01:32.750
So let me try to run the program and see the result.

00:01:32.750 --> 00:01:39.750
So here you notice that the account I d is set to zero,

00:01:39.750 --> 00:01:41.210
which is a default value.

00:01:41.210 --> 00:01:46.450
That means the call has gone to this constructor.

00:01:46.450 --> 00:01:49.350
But maybe I want the call to go here.

00:01:49.350 --> 00:01:51.640
How can it solve this problem?

00:01:51.640 --> 00:01:53.100
It's pretty straightforward.

00:01:53.100 --> 00:01:56.140
All you have to do is tow.

00:01:56.140 --> 00:01:59.250
Introduce that type,

00:01:59.250 --> 00:02:02.210
attribute and say,

00:02:02.210 --> 00:02:04.170
What type of literal is this?

00:02:04.170 --> 00:02:06.750
I'm going to say it in danger.

00:02:06.750 --> 00:02:12.800
Same goes with other tags as well.

00:02:12.800 --> 00:02:21.690
But this is going to be string and this will solve our problem.

00:02:21.690 --> 00:02:24.740
And sure enough,

00:02:24.740 --> 00:02:26.950
we have it populated.

00:02:26.950 --> 00:02:33.600
And this is one of the reasons why I prefer to use Java conflicts over an XML conflict is

00:02:33.600 --> 00:02:39.370
because you're pretty well ever asked what type of data that you're passing as an argument

00:02:39.370 --> 00:02:39.370
.

00:02:39.370 --> 00:02:41.210
So by looking at this court,

00:02:41.210 --> 00:02:47.690
I can tell for sure that this is off type integer and the call is going to go to this

00:02:47.690 --> 00:02:48.550
constructor.

00:02:48.550 --> 00:02:50.100
All right,

00:02:50.100 --> 00:02:51.050
that's about it.

00:02:51.050 --> 00:02:52.170
See you soon.

