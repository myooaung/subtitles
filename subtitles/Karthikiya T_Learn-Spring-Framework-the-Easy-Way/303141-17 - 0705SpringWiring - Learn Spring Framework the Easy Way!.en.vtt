WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.320
in a typical spring application,

00:00:02.320 --> 00:00:06.950
there could be a lot of beans or components that are dependent on each other.

00:00:06.950 --> 00:00:12.470
And in one of my videos I was mentioning that regardless off the order in which the beans

00:00:12.470 --> 00:00:14.850
are defined in the contract files,

00:00:14.850 --> 00:00:21.300
Spring is modern of to understand which being is dependent on which being and performed

00:00:21.300 --> 00:00:22.650
dividing operation.

00:00:22.650 --> 00:00:24.020
In this video,

00:00:24.020 --> 00:00:25.600
I'm going to prove my point.

00:00:25.600 --> 00:00:29.700
So what we have here is the exact same example as previous.

00:00:29.700 --> 00:00:31.490
Let me run the program,

00:00:31.490 --> 00:00:36.200
and if you notice the silver conflict,

00:00:36.200 --> 00:00:43.770
bean is created first and then the another sample bean.

00:00:43.770 --> 00:00:49.800
But let's say that the silver conflict is dependent on another sample being,

00:00:49.800 --> 00:00:55.690
which means we are not expecting spring to create the another sample being first so that it

00:00:55.690 --> 00:00:58.260
can be injected into the server conflict.

00:00:58.260 --> 00:00:59.750
In order to do that,

00:00:59.750 --> 00:01:03.350
let me just quickly introduce a constructor in the server conflict.

00:01:03.350 --> 00:01:11.310
Let me get it off this and let me introduce a new property off type,

00:01:11.310 --> 00:01:15.350
another sample being so this is going to be private.

00:01:15.350 --> 00:01:22.010
Let's do it some name and now using eclipse,

00:01:22.010 --> 00:01:27.440
where does create the constructor with para meters and Of course,

00:01:27.440 --> 00:01:29.450
we're going to get it off this conflict parents,

00:01:29.450 --> 00:01:34.410
because that is being injected the Zen center injection and from,

00:01:34.410 --> 00:01:35.550
or XML file.

00:01:35.550 --> 00:01:38.050
We're not going to have another perimeter,

00:01:38.050 --> 00:01:45.920
her constructor argument and this is going to be off reference to this being.

00:01:45.920 --> 00:01:48.450
How simple as that.

00:01:48.450 --> 00:01:49.780
And of course,

00:01:49.780 --> 00:01:51.830
we're going to get an arrow in here.

00:01:51.830 --> 00:01:54.000
So that's the beauty of Java conflict file.

00:01:54.000 --> 00:01:56.650
You would instantly get the compilation ever.

00:01:56.650 --> 00:02:02.950
So let's pass this mattered or this object as an argument,

00:02:02.950 --> 00:02:06.150
and this trip fixed the issue.

00:02:06.150 --> 00:02:08.390
All right,

00:02:08.390 --> 00:02:11.400
let's on the program now and see the result.

00:02:11.400 --> 00:02:15.670
We seem to be having an error.

00:02:15.670 --> 00:02:17.410
Let's take a look at what it is.

00:02:17.410 --> 00:02:21.500
Okay,

00:02:21.500 --> 00:02:33.210
it's saying unsatisfied dependency expressed through Constructor,

00:02:33.210 --> 00:02:34.550
Pyramid of four.

00:02:34.550 --> 00:02:39.110
The Parliament of For is the one which we've just defined.

00:02:39.110 --> 00:02:43.250
Am biggest argument values for perimeter type.

00:02:43.250 --> 00:02:44.150
Okay,

00:02:44.150 --> 00:02:45.350
I got the problem.

00:02:45.350 --> 00:02:48.700
We missed something in here,

00:02:48.700 --> 00:02:50.350
and that is with the type.

00:02:50.350 --> 00:02:51.300
Obviously,

00:02:51.300 --> 00:02:52.850
this is not off type string.

00:02:52.850 --> 00:02:55.190
We can either get it off.

00:02:55.190 --> 00:02:59.750
This all together are define the type.

00:02:59.750 --> 00:03:02.300
Now everything should work.

00:03:02.300 --> 00:03:05.000
This is a very reason again.

00:03:05.000 --> 00:03:06.390
Java conflict is better.

00:03:06.390 --> 00:03:11.460
I hope you're now convinced that Java conflict is better.

00:03:11.460 --> 00:03:12.890
It's on the program.

00:03:12.890 --> 00:03:15.050
And this time,

00:03:15.050 --> 00:03:16.650
as expected,

00:03:16.650 --> 00:03:24.310
Spring has called all these methods and then the end of the sample being is qualified to be

00:03:24.310 --> 00:03:26.520
injected tau another being in our case,

00:03:26.520 --> 00:03:29.980
we're trying to inject it into this of a conflict.

00:03:29.980 --> 00:03:33.580
And so you're seeing the following result.

00:03:33.580 --> 00:03:35.240
And after everything is done,

00:03:35.240 --> 00:03:41.990
the beans are made available for us to use in the application and finally destroy those

00:03:41.990 --> 00:03:42.630
objects.

00:03:42.630 --> 00:03:44.030
It's as simple as that.

00:03:44.030 --> 00:03:47.310
But the point that I want to make here is spring framework,

00:03:47.310 --> 00:03:53.340
its modern of to understand the dependencies and perform dividing off all these components

00:03:53.340 --> 00:03:57.130
etcetera and our job.

00:03:57.130 --> 00:03:59.350
A contact file would work as well.

00:03:59.350 --> 00:04:07.550
Let's quickly run the program and off course it will work.

00:04:07.550 --> 00:04:10.940
And sure enough,

00:04:10.940 --> 00:04:14.280
don't bother about this message.

00:04:14.280 --> 00:04:16.330
This just an info message,

00:04:16.330 --> 00:04:17.150
not netter.

00:04:17.150 --> 00:04:19.060
All right,

00:04:19.060 --> 00:04:20.120
that's about it.

00:04:20.120 --> 00:04:21.250
I'll see you soon

