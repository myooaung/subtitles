WEBVTT
1
00:00:00.005 --> 00:00:01.008
- [Instructor] There's a lot of excitement

2
00:00:01.008 --> 00:00:04.009
about the benefits GitOps can deliver.

3
00:00:04.009 --> 00:00:08.005
At its core, GitOps is a pattern that has three parts.

4
00:00:08.005 --> 00:00:12.005
First, store the desired state declaratively in Git,

5
00:00:12.005 --> 00:00:15.002
then pull the state and apply it into the system

6
00:00:15.002 --> 00:00:16.008
with an operator.

7
00:00:16.008 --> 00:00:20.007
And finally, use a control loop to keep it all synced.

8
00:00:20.007 --> 00:00:22.003
The excitement surrounding GitOps

9
00:00:22.003 --> 00:00:25.004
has created many new ideas about where and how

10
00:00:25.004 --> 00:00:30.004
this pattern can be applied in all sorts of situations.

11
00:00:30.004 --> 00:00:31.006
If you're new to GitOps,

12
00:00:31.006 --> 00:00:34.001
it can be confusing to navigate the hype

13
00:00:34.001 --> 00:00:36.006
to figure out where GitOps is well-supported

14
00:00:36.006 --> 00:00:38.007
and ready for immediate use.

15
00:00:38.007 --> 00:00:42.002
So here, I've broken down some major system concerns

16
00:00:42.002 --> 00:00:45.002
and we'll highlight where GitOps is most commonly applied

17
00:00:45.002 --> 00:00:47.009
and has the most momentum.

18
00:00:47.009 --> 00:00:50.009
The first area we'll look at is using a declarative

19
00:00:50.009 --> 00:00:52.004
and automated approach

20
00:00:52.004 --> 00:00:54.009
to manage your system's infrastructure.

21
00:00:54.009 --> 00:00:57.000
Let's dive deeper there.

22
00:00:57.000 --> 00:01:00.004
GitOps expects that you can rapidly provision infrastructure

23
00:01:00.004 --> 00:01:02.001
and other resources.

24
00:01:02.001 --> 00:01:04.005
Many organizations will turn to the cloud

25
00:01:04.005 --> 00:01:06.001
for this capability,

26
00:01:06.001 --> 00:01:08.003
using it to scale out and network

27
00:01:08.003 --> 00:01:10.000
traditional compute resources

28
00:01:10.000 --> 00:01:13.008
like virtual machines on-demand.

29
00:01:13.008 --> 00:01:17.003
GitOps is more frequently used with a cloud native approach.

30
00:01:17.003 --> 00:01:21.006
So typically, applications are packaged as container images

31
00:01:21.006 --> 00:01:24.000
and the containers are run on a cluster

32
00:01:24.000 --> 00:01:27.006
provided by an orchestrator like Kubernetes.

33
00:01:27.006 --> 00:01:31.002
Teams use tools like Terraform to declaratively describe

34
00:01:31.002 --> 00:01:33.008
and build their underlying cluster infrastructure

35
00:01:33.008 --> 00:01:35.004
on the cloud.

36
00:01:35.004 --> 00:01:37.008
The declarative description captures details

37
00:01:37.008 --> 00:01:40.000
like the region to build the cluster,

38
00:01:40.000 --> 00:01:41.005
how many nodes it should have,

39
00:01:41.005 --> 00:01:44.001
and what class of node they should be.

40
00:01:44.001 --> 00:01:46.002
Managing clusters is one area

41
00:01:46.002 --> 00:01:48.009
that GitOps continues to advance.

42
00:01:48.009 --> 00:01:50.008
There's some exciting new tools out there

43
00:01:50.008 --> 00:01:55.001
that allow you to create and manage clusters at scale.

44
00:01:55.001 --> 00:01:57.008
The workload or resources like our pods

45
00:01:57.008 --> 00:02:02.005
that run on the cluster fall under our next GitOps use case.

46
00:02:02.005 --> 00:02:04.006
It focuses on how we deploy

47
00:02:04.006 --> 00:02:06.009
and manage containerized applications

48
00:02:06.009 --> 00:02:09.009
on an orchestrator like Kubernetes.

49
00:02:09.009 --> 00:02:14.005
Popular tools like Flux and ArgoCD fall into this area

50
00:02:14.005 --> 00:02:18.007
and it's where GitOps currently has the most momentum.

51
00:02:18.007 --> 00:02:21.001
That takes us to our final use case,

52
00:02:21.001 --> 00:02:25.007
which covers how we handle releases or progressive delivery.

53
00:02:25.007 --> 00:02:28.008
GitOps practices can be used to declaratively define

54
00:02:28.008 --> 00:02:30.008
complex release strategies

55
00:02:30.008 --> 00:02:34.003
like canaries or blue-green deployments.

56
00:02:34.003 --> 00:02:37.005
These deployment techniques intelligently roll out

57
00:02:37.005 --> 00:02:40.003
new versions of an application.

58
00:02:40.003 --> 00:02:44.006
Tools like Flagger and Argo Rollouts fall into this space.

59
00:02:44.006 --> 00:02:48.000
Here, you can see an example of a declarative configuration

60
00:02:48.000 --> 00:02:51.003
that establishes a canary deployment for Flagger.

61
00:02:51.003 --> 00:02:54.007
The canary is used to roll out a new version of the software

62
00:02:54.007 --> 00:02:56.005
to a small subset of users

63
00:02:56.005 --> 00:03:00.009
before it's made gradually more available on a wider scale

64
00:03:00.009 --> 00:03:04.007
after it demonstrates that it's functioning properly.

65
00:03:04.007 --> 00:03:08.000
Don't be surprised if you see the GitOps pattern pop up

66
00:03:08.000 --> 00:03:10.000
in a tool or as a workflow

67
00:03:10.000 --> 00:03:12.007
in part of a large enterprise platform.

68
00:03:12.007 --> 00:03:15.007
It might look a little bit different everywhere you go,

69
00:03:15.007 --> 00:03:20.008
but if you see operations driven through Git, that's GitOps.

70
00:03:20.008 --> 00:03:23.006
Learn to recognize the pattern and you'll be fine

71
00:03:23.006 --> 00:03:27.000
because at the end of the day, you're just working with Git.

