WEBVTT
1
00:00:00.005 --> 00:00:02.003
- [Presenter] The most proven application

2
00:00:02.003 --> 00:00:06.007
of GitOps is to layer it on top of a Cloud Native approach.

3
00:00:06.007 --> 00:00:09.000
The techniques and technologies championed

4
00:00:09.000 --> 00:00:11.006
by the Cloud Native approach work well with GitOps.

5
00:00:11.006 --> 00:00:13.007
When we apply them to manage the operations

6
00:00:13.007 --> 00:00:16.009
of containerized applications.

7
00:00:16.009 --> 00:00:18.008
This pairing is the defacto standard

8
00:00:18.008 --> 00:00:21.002
within the GitOps space.

9
00:00:21.002 --> 00:00:24.001
So we'll focus on this scenario for the remainder

10
00:00:24.001 --> 00:00:25.006
of the course.

11
00:00:25.006 --> 00:00:28.003
To start, let's dive deeper into the concepts

12
00:00:28.003 --> 00:00:30.009
behind Cloud Native.

13
00:00:30.009 --> 00:00:32.007
A key tenant with Cloud Native

14
00:00:32.007 --> 00:00:35.004
is that you've adopted GitOps principles.

15
00:00:35.004 --> 00:00:38.007
So it assumes you've embraced agile ways of working

16
00:00:38.007 --> 00:00:40.004
and have broken down silos

17
00:00:40.004 --> 00:00:43.008
in your organization that allow teams to work in harmony

18
00:00:43.008 --> 00:00:45.004
to deliver software.

19
00:00:45.004 --> 00:00:47.008
From a practice perspective,

20
00:00:47.008 --> 00:00:50.007
you've abandoned waterfall work in short cycles

21
00:00:50.007 --> 00:00:54.007
and are hyper-focused on delivering software quickly.

22
00:00:54.007 --> 00:00:57.002
Now let's talk about what gets developed.

23
00:00:57.002 --> 00:00:59.001
Cloud Native approaches advocate

24
00:00:59.001 --> 00:01:03.000
for building applications with a microservice architecture.

25
00:01:03.000 --> 00:01:05.004
This can be a little subjective but in general,

26
00:01:05.004 --> 00:01:08.000
you aim to build systems that are modular,

27
00:01:08.000 --> 00:01:11.001
service-based and loosely coupled.

28
00:01:11.001 --> 00:01:13.006
This can be achieved by directing integration

29
00:01:13.006 --> 00:01:18.001
through API interfaces and by applying design principles,

30
00:01:18.001 --> 00:01:22.008
similar to those defined by Heroku's 12-factor app model.

31
00:01:22.008 --> 00:01:25.000
In general, Cloud Native applications

32
00:01:25.000 --> 00:01:27.008
are made of small services that can be developed

33
00:01:27.008 --> 00:01:31.002
and released independently.

34
00:01:31.002 --> 00:01:32.009
This leads into our next point

35
00:01:32.009 --> 00:01:34.008
about Cloud Native applications.

36
00:01:34.008 --> 00:01:37.009
They rely heavily upon automation.

37
00:01:37.009 --> 00:01:40.004
The switch to building more modular systems

38
00:01:40.004 --> 00:01:43.008
with many services makes automated pipelines critical

39
00:01:43.008 --> 00:01:48.006
for building and packaging software into an artifact.

40
00:01:48.006 --> 00:01:52.002
After automated tests and quality assurance gates pass,

41
00:01:52.002 --> 00:01:55.003
the artifacts are stored in a repository

42
00:01:55.003 --> 00:01:58.000
where they wait for an automated agent to deploy

43
00:01:58.000 --> 00:02:01.001
and release them to an environment.

44
00:02:01.001 --> 00:02:02.009
What is released into the system

45
00:02:02.009 --> 00:02:04.006
and the systems configuration

46
00:02:04.006 --> 00:02:07.009
is determined by code that describes immutable versions

47
00:02:07.009 --> 00:02:10.001
of the infrastructure.

48
00:02:10.001 --> 00:02:13.007
This takes us to the core driver behind Cloud Native.

49
00:02:13.007 --> 00:02:16.000
Cloud Native centers around the idea

50
00:02:16.000 --> 00:02:18.009
that you'll run applications using containers

51
00:02:18.009 --> 00:02:21.006
on scalable infrastructure.

52
00:02:21.006 --> 00:02:24.002
Container run times like Docker allow us

53
00:02:24.002 --> 00:02:28.002
to run software based on images and image packages,

54
00:02:28.002 --> 00:02:31.001
the application and its environment together

55
00:02:31.001 --> 00:02:32.009
which makes the software portable

56
00:02:32.009 --> 00:02:37.000
and much easier to run in any environment.

57
00:02:37.000 --> 00:02:38.009
To manage how we scale structure

58
00:02:38.009 --> 00:02:41.004
and deploy containerized applications,

59
00:02:41.004 --> 00:02:45.000
the Cloud Native approach uses a container orchestrator.

60
00:02:45.000 --> 00:02:48.005
And for that, Kubernetes is the most popular.

61
00:02:48.005 --> 00:02:50.000
Taking it a step further,

62
00:02:50.000 --> 00:02:53.001
a service mesh can be used if advanced management

63
00:02:53.001 --> 00:02:54.009
of our distributed applications,

64
00:02:54.009 --> 00:02:59.003
security policies and traffic is required.

65
00:02:59.003 --> 00:03:01.002
Okay, that's a lot to take in.

66
00:03:01.002 --> 00:03:05.007
So let me tie it together and bring this back to GitOps.

67
00:03:05.007 --> 00:03:07.009
When we look at how get ops principles

68
00:03:07.009 --> 00:03:11.006
changed the operations for Cloud Native applications.

69
00:03:11.006 --> 00:03:16.000
They influence how we use automation to deliver, deploy

70
00:03:16.000 --> 00:03:20.002
and orchestrate our running containers the most.

71
00:03:20.002 --> 00:03:22.007
Coming up, we're going to explore this area more

72
00:03:22.007 --> 00:03:25.007
to see how GitOps applies to the practices used

73
00:03:25.007 --> 00:03:30.000
to manage the operations of Cloud Native applications.

