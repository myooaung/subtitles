WEBVTT
1
00:00:00.005 --> 00:00:01.009
- [Instructor] So let's take a look

2
00:00:01.009 --> 00:00:03.006
at our first GitOps principle

3
00:00:03.006 --> 00:00:05.007
and start to break it down.

4
00:00:05.007 --> 00:00:07.004
The principle states that we should have

5
00:00:07.004 --> 00:00:11.000
a declarative description of the entire system.

6
00:00:11.000 --> 00:00:13.004
Let's start with the system description.

7
00:00:13.004 --> 00:00:17.003
This is what is committed inside your Git repository.

8
00:00:17.003 --> 00:00:20.002
The system description will include one or more files

9
00:00:20.002 --> 00:00:24.007
that will define each system components and its state.

10
00:00:24.007 --> 00:00:28.005
GitOps says how we store those definitions is important

11
00:00:28.005 --> 00:00:31.003
and we need to do it declaratively.

12
00:00:31.003 --> 00:00:33.004
That means our system description

13
00:00:33.004 --> 00:00:36.003
is going to be stored as data.

14
00:00:36.003 --> 00:00:37.006
That's a little abstract

15
00:00:37.006 --> 00:00:40.002
but it's really the key to all this.

16
00:00:40.002 --> 00:00:41.009
When managing infrastructure,

17
00:00:41.009 --> 00:00:46.008
the two major approaches are imperative and declarative.

18
00:00:46.008 --> 00:00:48.009
Let's start with imperative.

19
00:00:48.009 --> 00:00:52.004
It focuses on how we reach a desired state.

20
00:00:52.004 --> 00:00:55.009
To do this, it assumes we execute a sequence of commands

21
00:00:55.009 --> 00:00:57.009
that change our system.

22
00:00:57.009 --> 00:01:00.001
The imperative approach typically involves

23
00:01:00.001 --> 00:01:03.005
a CLI or a GUI console.

24
00:01:03.005 --> 00:01:06.004
The declarative approach taken by GitOps,

25
00:01:06.004 --> 00:01:08.000
flips this model.

26
00:01:08.000 --> 00:01:10.001
Instead of specifying how,

27
00:01:10.001 --> 00:01:13.002
we just specify what we want the system to look like

28
00:01:13.002 --> 00:01:15.002
using a number of declarations

29
00:01:15.002 --> 00:01:18.000
that make up its description.

30
00:01:18.000 --> 00:01:19.005
In the declarative approach,

31
00:01:19.005 --> 00:01:21.004
If we want to change the system,

32
00:01:21.004 --> 00:01:23.002
we update the description.

33
00:01:23.002 --> 00:01:27.001
We do not execute a series of commands.

34
00:01:27.001 --> 00:01:29.004
Here's a trick to keep the two straight.

35
00:01:29.004 --> 00:01:32.005
Think of the imperative approach as a set of instructions

36
00:01:32.005 --> 00:01:34.001
that come with the piece of furniture

37
00:01:34.001 --> 00:01:35.009
that you assemble at home.

38
00:01:35.009 --> 00:01:39.004
It says step-by-step how to put it together.

39
00:01:39.004 --> 00:01:40.008
The declarative approach,

40
00:01:40.008 --> 00:01:43.000
is more like blueprints for a house.

41
00:01:43.000 --> 00:01:44.004
It describes the rooms,

42
00:01:44.004 --> 00:01:45.002
their dimensions,

43
00:01:45.002 --> 00:01:46.005
and features.

44
00:01:46.005 --> 00:01:50.008
It describes what to build not how to build it.

45
00:01:50.008 --> 00:01:53.007
Let's look at both approaches using Kubernetes.

46
00:01:53.007 --> 00:01:57.002
It makes it really easy to highlight the differences.

47
00:01:57.002 --> 00:02:00.007
So here I have a Kubernetes cluster running

48
00:02:00.007 --> 00:02:04.006
and on this cluster, we're going to create a deployment.

49
00:02:04.006 --> 00:02:07.004
We'll first do that imperatively.

50
00:02:07.004 --> 00:02:10.000
So we're going to use kubectl,

51
00:02:10.000 --> 00:02:14.009
we'll create a deployment named imperative deploy.

52
00:02:14.009 --> 00:02:16.007
And this deployment is going

53
00:02:16.007 --> 00:02:22.002
to launch an NGINX container on the cluster.

54
00:02:22.002 --> 00:02:23.007
Okay, so, let's go ahead.

55
00:02:23.007 --> 00:02:26.000
We'll issue that command

56
00:02:26.000 --> 00:02:28.009
and then we can see it running on the cluster.

57
00:02:28.009 --> 00:02:31.003
Now, let's talk about this.

58
00:02:31.003 --> 00:02:33.007
There's no visibility of my work

59
00:02:33.007 --> 00:02:38.004
and we cannot reproduce those commands that I just issued.

60
00:02:38.004 --> 00:02:43.004
Now let's contrast that with the declarative approach.

61
00:02:43.004 --> 00:02:44.005
For this approach,

62
00:02:44.005 --> 00:02:47.009
we have described the Kubernetes objects

63
00:02:47.009 --> 00:02:53.005
in a declarative YAML file named deployment.yaml.

64
00:02:53.005 --> 00:02:55.001
Notice how the file describes

65
00:02:55.001 --> 00:02:57.003
what the system should look like.

66
00:02:57.003 --> 00:03:00.000
You can read this and know the state

67
00:03:00.000 --> 00:03:02.001
of what the system should be.

68
00:03:02.001 --> 00:03:03.008
If I wanted to make a change,

69
00:03:03.008 --> 00:03:07.006
let's say there's a new NGINX image available.

70
00:03:07.006 --> 00:03:09.004
I can go ahead and do that

71
00:03:09.004 --> 00:03:12.006
within the declarative configuration

72
00:03:12.006 --> 00:03:15.006
not by executing a command.

73
00:03:15.006 --> 00:03:18.002
Now, of course the change would need to be applied

74
00:03:18.002 --> 00:03:19.003
on the cluster

75
00:03:19.003 --> 00:03:22.001
and in GitOps, that's done through an agent,

76
00:03:22.001 --> 00:03:24.003
not kubectl.

77
00:03:24.003 --> 00:03:27.003
But the point is, this would be stored in Git

78
00:03:27.003 --> 00:03:29.008
and all my teammates could see the change

79
00:03:29.008 --> 00:03:32.008
that I made to the system.

80
00:03:32.008 --> 00:03:36.000
Declarative configuration is important for GitOps

81
00:03:36.000 --> 00:03:38.000
because it describes the system

82
00:03:38.000 --> 00:03:42.006
in a way that an automated agent can read and act upon.

83
00:03:42.006 --> 00:03:45.000
The declarative description of our system

84
00:03:45.000 --> 00:03:46.009
becomes its desired state,

85
00:03:46.009 --> 00:03:49.000
which leads us to our next principle.

