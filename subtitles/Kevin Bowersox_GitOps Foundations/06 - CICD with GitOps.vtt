WEBVTT
1
00:00:00.005 --> 00:00:01.007
- [Instructor] Continuous integration

2
00:00:01.007 --> 00:00:03.001
and continuous deployment,

3
00:00:03.001 --> 00:00:05.009
are important practices related to GitOps.

4
00:00:05.009 --> 00:00:07.003
However, with GitOps,

5
00:00:07.003 --> 00:00:08.006
they may look a little bit different

6
00:00:08.006 --> 00:00:10.006
than you accustom to.

7
00:00:10.006 --> 00:00:12.008
A common pattern used by organizations,

8
00:00:12.008 --> 00:00:14.008
as part of their DevOps practices,

9
00:00:14.008 --> 00:00:17.007
is referred to as CIOps.

10
00:00:17.007 --> 00:00:19.006
Let's take a closer look at this pattern.

11
00:00:19.006 --> 00:00:23.008
Then we'll compare how GitOps changes the approach.

12
00:00:23.008 --> 00:00:25.004
It starts when a change is made

13
00:00:25.004 --> 00:00:28.005
to the application source code in the repository.

14
00:00:28.005 --> 00:00:30.009
This triggers the build system.

15
00:00:30.009 --> 00:00:34.002
Next, the CI pipeline builds the software,

16
00:00:34.002 --> 00:00:36.001
executes test against it,

17
00:00:36.001 --> 00:00:38.007
and then packages it into a container image

18
00:00:38.007 --> 00:00:42.001
that's stored within a container registry.

19
00:00:42.001 --> 00:00:44.009
Once the CI pipeline finishes its work,

20
00:00:44.009 --> 00:00:46.008
it triggers the CD pipeline,

21
00:00:46.008 --> 00:00:48.007
which has permissions to make calls

22
00:00:48.007 --> 00:00:51.006
directly against the Kubernetes API.

23
00:00:51.006 --> 00:00:53.002
This is where the security concern

24
00:00:53.002 --> 00:00:55.003
comes into play with this approach.

25
00:00:55.003 --> 00:00:57.005
We'll talk about that in a second.

26
00:00:57.005 --> 00:01:00.006
Once the cluster state is updated in SCD,

27
00:01:00.006 --> 00:01:03.005
the cluster begins to materialize the desired state

28
00:01:03.005 --> 00:01:07.001
by pulling the image and deploying it across the nodes.

29
00:01:07.001 --> 00:01:08.005
Here's where you cross your fingers

30
00:01:08.005 --> 00:01:10.004
and hope everything goes well

31
00:01:10.004 --> 00:01:13.002
because it's difficult to recover from a bad deployment

32
00:01:13.002 --> 00:01:15.006
when using this pattern.

33
00:01:15.006 --> 00:01:17.003
Okay, let's take a look back

34
00:01:17.003 --> 00:01:19.008
and see the downsides of this approach.

35
00:01:19.008 --> 00:01:23.004
First there's little separation between CI and CD.

36
00:01:23.004 --> 00:01:25.006
They might even be the same tool.

37
00:01:25.006 --> 00:01:27.004
It's like you're forcing your CI tool

38
00:01:27.004 --> 00:01:29.001
to handle continuous delivery.

39
00:01:29.001 --> 00:01:31.002
Something it wasn't meant to do.

40
00:01:31.002 --> 00:01:33.007
And that's where the problems start to creep in.

41
00:01:33.007 --> 00:01:36.008
The CI tool needs privileges to make calls

42
00:01:36.008 --> 00:01:39.007
directly against the Kubernetes management API

43
00:01:39.007 --> 00:01:42.004
to perform the deployments.

44
00:01:42.004 --> 00:01:44.007
This approach is not secure.

45
00:01:44.007 --> 00:01:46.003
It violates a trust boundary,

46
00:01:46.003 --> 00:01:47.006
and it allows an attacker

47
00:01:47.006 --> 00:01:49.004
to use a compromised pipeline

48
00:01:49.004 --> 00:01:51.009
to execute malicious code.

49
00:01:51.009 --> 00:01:54.004
It's also not very stable.

50
00:01:54.004 --> 00:01:56.001
If a deployment thrashes,

51
00:01:56.001 --> 00:01:58.009
this approach can lead the cluster in a bad state

52
00:01:58.009 --> 00:02:01.002
that we're not even aware of.

53
00:02:01.002 --> 00:02:03.004
These issues make CIOps

54
00:02:03.004 --> 00:02:06.003
a poor choice for managing multiple clusters

55
00:02:06.003 --> 00:02:08.008
or large clusters.

56
00:02:08.008 --> 00:02:10.008
So, let's shift back to GitOps

57
00:02:10.008 --> 00:02:14.003
and talk about how it approaches automated pipelines

58
00:02:14.003 --> 00:02:16.006
In the GitOps model, continuous integration

59
00:02:16.006 --> 00:02:18.000
and continuous delivery

60
00:02:18.000 --> 00:02:20.007
are decoupled into separate concerns.

61
00:02:20.007 --> 00:02:23.003
The CI pipeline is left intact.

62
00:02:23.003 --> 00:02:27.002
However, the CD pipeline is shifted inside the cluster

63
00:02:27.002 --> 00:02:29.002
where an operator is responsible

64
00:02:29.002 --> 00:02:32.007
for automating deployment of changes into the cluster

65
00:02:32.007 --> 00:02:36.008
to ensure it matches the desired state found in Git.

66
00:02:36.008 --> 00:02:39.003
This alleviates the security concerns

67
00:02:39.003 --> 00:02:42.001
associated with the traditional push model

68
00:02:42.001 --> 00:02:44.006
that's used by CIC/CD.

69
00:02:44.006 --> 00:02:46.007
It also provides recoverability

70
00:02:46.007 --> 00:02:50.009
because the cluster can easily be rebuilt.

71
00:02:50.009 --> 00:02:53.008
Let's dive back into an architecture diagram

72
00:02:53.008 --> 00:02:55.005
to get a visual of what's going on.

73
00:02:55.005 --> 00:03:00.000
GitOps largely leaves the CI pipeline intact

74
00:03:00.000 --> 00:03:03.007
except for removing the trigger to the CD pipeline.

75
00:03:03.007 --> 00:03:06.008
Under GitOps, the sole responsibility of CI

76
00:03:06.008 --> 00:03:08.009
is to produce an artifact.

77
00:03:08.009 --> 00:03:11.000
In this case, it's a container image

78
00:03:11.000 --> 00:03:14.006
that's placed within our artifact repository.

79
00:03:14.006 --> 00:03:18.004
Here's where the operator in the cluster takes over.

80
00:03:18.004 --> 00:03:22.001
It monitors the desired state in Git for any changes

81
00:03:22.001 --> 00:03:23.001
which are typically made

82
00:03:23.001 --> 00:03:26.007
to a separate environment repo using a poll request.

83
00:03:26.007 --> 00:03:28.007
So, this could be something like an update

84
00:03:28.007 --> 00:03:30.004
to a Kubernetes deployment

85
00:03:30.004 --> 00:03:32.001
where we point to the new image

86
00:03:32.001 --> 00:03:35.001
created by the CI pipeline.

87
00:03:35.001 --> 00:03:36.009
Once a change is detected,

88
00:03:36.009 --> 00:03:39.008
it reads the specs for the Kubernetes objects

89
00:03:39.008 --> 00:03:41.006
and then uses the control plane

90
00:03:41.006 --> 00:03:44.006
to provide the new state of the cluster.

91
00:03:44.006 --> 00:03:47.006
This causes the cluster to pull the new image

92
00:03:47.006 --> 00:03:50.008
and it deploys it across the worker nodes.

93
00:03:50.008 --> 00:03:52.004
So within this diagram,

94
00:03:52.004 --> 00:03:56.009
you see not only how GitOps adapts traditional CI/CD,

95
00:03:56.009 --> 00:03:59.008
but you get an entire overview of using GitOps

96
00:03:59.008 --> 00:04:01.003
as an operational model

97
00:04:01.003 --> 00:04:03.004
for a cloud native application

98
00:04:03.004 --> 00:04:06.000
deployed on Kubernetes.

