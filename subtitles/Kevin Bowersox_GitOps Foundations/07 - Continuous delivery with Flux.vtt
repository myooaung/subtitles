WEBVTT
1
00:00:00.005 --> 00:00:03.000
- [Instructor] Let's get hands on with flux controllers

2
00:00:03.000 --> 00:00:06.007
and CRDs to deploy a containerized application

3
00:00:06.007 --> 00:00:09.000
onto our Kubernetes cluster.

4
00:00:09.000 --> 00:00:11.007
The first thing that we'll need is a source.

5
00:00:11.007 --> 00:00:14.006
A source is a custom resource definition

6
00:00:14.006 --> 00:00:19.000
that points to the location of our systems desired state.

7
00:00:19.000 --> 00:00:22.003
In this case, that's our environment repository

8
00:00:22.003 --> 00:00:26.002
within GitHub that stores our infrastructure code.

9
00:00:26.002 --> 00:00:28.002
Let's navigate over to the terminal

10
00:00:28.002 --> 00:00:30.004
to begin creating our source.

11
00:00:30.004 --> 00:00:33.008
The first thing I want to point out is that all of our work

12
00:00:33.008 --> 00:00:37.009
is going to be performed within the flux configuration

13
00:00:37.009 --> 00:00:39.009
repository.

14
00:00:39.009 --> 00:00:42.006
We're going to use the flux CLI

15
00:00:42.006 --> 00:00:46.003
and it's create source command to build out

16
00:00:46.003 --> 00:00:49.000
the definition of our source.

17
00:00:49.000 --> 00:00:50.009
So here you can see that command

18
00:00:50.009 --> 00:00:54.002
and we're naming our source GitOps Foundations,

19
00:00:54.002 --> 00:00:58.002
and then we're pointing it at the environment repository

20
00:00:58.002 --> 00:01:01.009
over in GitHub by specifying its URL.

21
00:01:01.009 --> 00:01:05.007
We're also instructing the source to look at the main branch

22
00:01:05.007 --> 00:01:08.004
and to pull every 30 seconds.

23
00:01:08.004 --> 00:01:10.003
So, when we issue this command,

24
00:01:10.003 --> 00:01:13.009
it's not going to create the source on the cluster.

25
00:01:13.009 --> 00:01:17.004
It's just going to put the sources definition

26
00:01:17.004 --> 00:01:19.003
into a YAML file.

27
00:01:19.003 --> 00:01:21.005
Let's go ahead and take a peek at that.

28
00:01:21.005 --> 00:01:26.002
And there you can see the definition of our new source.

29
00:01:26.002 --> 00:01:29.003
It's pointing over to that environment repository.

30
00:01:29.003 --> 00:01:33.002
Now, the next thing that we'll need is a customization.

31
00:01:33.002 --> 00:01:36.001
A customization is another custom resource

32
00:01:36.001 --> 00:01:38.001
that's used by flux.

33
00:01:38.001 --> 00:01:41.003
You can think of it as defining what should be sinked

34
00:01:41.003 --> 00:01:43.006
onto our cluster.

35
00:01:43.006 --> 00:01:45.001
Just like a source,

36
00:01:45.001 --> 00:01:49.008
we can use the flux CLI to create a customization.

37
00:01:49.008 --> 00:01:53.002
So here you see the create customization command.

38
00:01:53.002 --> 00:01:56.007
It's naming the customization, GitOps Foundations.

39
00:01:56.007 --> 00:01:59.006
And then it's pointing the customization

40
00:01:59.006 --> 00:02:05.005
to the new GitOps Foundations source that we just created.

41
00:02:05.005 --> 00:02:08.008
So, that's pointing to the environment repository.

42
00:02:08.008 --> 00:02:11.000
And within that repository,

43
00:02:11.000 --> 00:02:15.004
it's looking in the flux directory for our Kubernetes

44
00:02:15.004 --> 00:02:18.008
manifests that it'll deploy onto the cluster.

45
00:02:18.008 --> 00:02:22.008
We've configured the customization to sync every minute.

46
00:02:22.008 --> 00:02:25.006
You'll also notice the prune option.

47
00:02:25.006 --> 00:02:29.001
This is saying that if something is running in our cluster,

48
00:02:29.001 --> 00:02:32.008
but it doesn't exist in our desired state in git,

49
00:02:32.008 --> 00:02:35.007
it should be removed from the cluster.

50
00:02:35.007 --> 00:02:38.008
You'll notice that we're also storing the definition

51
00:02:38.008 --> 00:02:41.004
of our customization in a YAML file.

52
00:02:41.004 --> 00:02:43.009
So let's go ahead, we'll issue the command.

53
00:02:43.009 --> 00:02:50.000
And then we can take a look at that customization.

54
00:02:50.000 --> 00:02:53.007
All right, so there you can see it's YAML definition

55
00:02:53.007 --> 00:02:55.002
and you'll notice it's pointing

56
00:02:55.002 --> 00:02:58.000
to our GitOps Foundations source.

57
00:02:58.000 --> 00:03:01.008
And specifically that flux directory.

58
00:03:01.008 --> 00:03:05.009
All right, so at this point nothing is happening in flux

59
00:03:05.009 --> 00:03:10.001
and that's because flux uses GitOps to manage itself.

60
00:03:10.001 --> 00:03:14.008
So until we commit these YAML definitions

61
00:03:14.008 --> 00:03:20.006
into our GitHub repository, flux will not take any action.

62
00:03:20.006 --> 00:03:29.009
So let's go ahead and start to commit these.

63
00:03:29.009 --> 00:03:33.002
And then once we push them up to GitHub,

64
00:03:33.002 --> 00:03:36.004
they're going to start to take effect.

65
00:03:36.004 --> 00:03:39.007
So I'll just push them up to the origin.

66
00:03:39.007 --> 00:03:41.009
There we can see the changes are there.

67
00:03:41.009 --> 00:03:45.005
And then I'm going to create a watch and we're going to use

68
00:03:45.005 --> 00:03:49.001
the flux git customizations command.

69
00:03:49.001 --> 00:03:53.006
And this is going to look for the operator attempting

70
00:03:53.006 --> 00:03:59.000
to reconcile any customizations that we've created.

71
00:03:59.000 --> 00:04:02.008
So, there you can see that currently it's attempting

72
00:04:02.008 --> 00:04:07.007
to put the GitOps Foundations customization in place.

73
00:04:07.007 --> 00:04:10.000
Okay, it just found our commit.

74
00:04:10.000 --> 00:04:13.004
And it looks like it's reconciled on the cluster.

75
00:04:13.004 --> 00:04:17.004
Let's go ahead and at this point we're going to navigate

76
00:04:17.004 --> 00:04:21.000
to our cluster within Azure and we can take a peak

77
00:04:21.000 --> 00:04:23.007
at the workloads running on the cluster.

78
00:04:23.007 --> 00:04:27.000
Here you can see our GitOps Foundations pods

79
00:04:27.000 --> 00:04:28.005
were put in place.

80
00:04:28.005 --> 00:04:31.001
And then if we take a look at the services,

81
00:04:31.001 --> 00:04:35.000
you'll see that the GitOps Foundations service is there.

82
00:04:35.000 --> 00:04:38.003
So, it appears that our containerized application

83
00:04:38.003 --> 00:04:41.001
is up and running on the cluster in Azure.

84
00:04:41.001 --> 00:04:44.004
Let's go ahead, we'll run one more test here.

85
00:04:44.004 --> 00:04:46.001
I have a new tab.

86
00:04:46.001 --> 00:04:50.005
And within this tab, we're going to use a DNS entry

87
00:04:50.005 --> 00:04:54.004
that we've created in the definition of our service.

88
00:04:54.004 --> 00:04:57.003
Essentially, we're able to assign a DNS label

89
00:04:57.003 --> 00:05:00.005
to the service and it's going to look like this.

90
00:05:00.005 --> 00:05:05.006
It's going to be your Docker Hub ID followed by the region

91
00:05:05.006 --> 00:05:07.004
you're running in, in Azure

92
00:05:07.004 --> 00:05:10.005
and then cloud app.azure.com.

93
00:05:10.005 --> 00:05:13.004
All right, so we should be able to hit our application

94
00:05:13.004 --> 00:05:15.003
through this URL.

95
00:05:15.003 --> 00:05:18.005
All right, and there you can see it's up and running

96
00:05:18.005 --> 00:05:20.004
on Azure.

97
00:05:20.004 --> 00:05:23.007
So using our source and customization,

98
00:05:23.007 --> 00:05:28.002
we were able to provide flux with the resources it needed

99
00:05:28.002 --> 00:05:31.005
to deploy our containerized application.

100
00:05:31.005 --> 00:05:35.003
And from here, it's going to continue to monitor

101
00:05:35.003 --> 00:05:38.002
the desired state and the state of the cluster

102
00:05:38.002 --> 00:05:41.005
and reconcile any drift that might occur.

103
00:05:41.005 --> 00:05:43.000
That's GitOps.

