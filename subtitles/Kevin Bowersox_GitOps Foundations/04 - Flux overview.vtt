WEBVTT
1
00:00:00.005 --> 00:00:03.000
- [Instructor] Flux is an operator for Kubernetes

2
00:00:03.000 --> 00:00:06.001
that focuses on continuous deployment.

3
00:00:06.001 --> 00:00:08.004
It's typically one of the first GitOps tools

4
00:00:08.004 --> 00:00:11.002
that a developer encounters.

5
00:00:11.002 --> 00:00:13.009
The toll started out as a Weaveworks project

6
00:00:13.009 --> 00:00:15.004
before it was donated to the

7
00:00:15.004 --> 00:00:17.006
Cloud Native Computing Foundation,

8
00:00:17.006 --> 00:00:20.009
where it's reached incubation status.

9
00:00:20.009 --> 00:00:24.002
The current iteration of Flux, known as Flux v2,

10
00:00:24.002 --> 00:00:26.001
should reach general availability

11
00:00:26.001 --> 00:00:29.000
by the time that you view this course.

12
00:00:29.000 --> 00:00:31.004
When deployed to a Kubernetes cluster,

13
00:00:31.004 --> 00:00:34.003
Flux uses custom resource definitions

14
00:00:34.003 --> 00:00:37.003
to determine how to keep the resources deployed

15
00:00:37.003 --> 00:00:42.001
on the cluster in sync with the source of configuration.

16
00:00:42.001 --> 00:00:45.007
A typical workflow is to store Kubernetes manifests

17
00:00:45.007 --> 00:00:48.000
in a Git repository.

18
00:00:48.000 --> 00:00:51.003
Those manifests will describe the containerized workload

19
00:00:51.003 --> 00:00:53.002
for your system.

20
00:00:53.002 --> 00:00:57.002
Flux is then used to apply the resources in the manifests

21
00:00:57.002 --> 00:01:00.004
on the cluster and to keep the cluster in sync

22
00:01:00.004 --> 00:01:04.000
with the desired state stored in Git.

23
00:01:04.000 --> 00:01:06.006
If you package manifests into a Helm chart,

24
00:01:06.006 --> 00:01:08.005
Flux also has a Helm controller

25
00:01:08.005 --> 00:01:12.000
that can sync the chart with the cluster.

26
00:01:12.000 --> 00:01:15.002
We've seen Flux before when we worked with Azure Arc.

27
00:01:15.002 --> 00:01:18.004
In that scenario, Azure Arc did all of the heavy lifting

28
00:01:18.004 --> 00:01:21.004
to bootstrap Flux on the cluster.

29
00:01:21.004 --> 00:01:25.001
Let's look at how to bootstrap Flux on a Kubernetes cluster

30
00:01:25.001 --> 00:01:28.004
without that assistance from Azure Arc.

31
00:01:28.004 --> 00:01:32.003
To start out, we need kubectl installed on our workstation

32
00:01:32.003 --> 00:01:34.008
and configured with our cluster.

33
00:01:34.008 --> 00:01:38.004
This allows us to use Flux's command line interface

34
00:01:38.004 --> 00:01:41.004
for interacting with the cluster.

35
00:01:41.004 --> 00:01:45.004
The Flux command line interface exposes a bootstrap command

36
00:01:45.004 --> 00:01:47.002
that does two things.

37
00:01:47.002 --> 00:01:50.004
First, it deploys Flux into the cluster

38
00:01:50.004 --> 00:01:53.000
and it establishes a number of controllers

39
00:01:53.000 --> 00:01:56.002
used by Flux to manage the cluster.

40
00:01:56.002 --> 00:01:59.009
Then, it creates a repository inside of GitHub

41
00:01:59.009 --> 00:02:03.000
that it will use to manage itself.

42
00:02:03.000 --> 00:02:05.008
Within the repository, we place definitions

43
00:02:05.008 --> 00:02:09.003
for custom resources used by the Flux controllers

44
00:02:09.003 --> 00:02:12.006
to oversee operations on the cluster.

45
00:02:12.006 --> 00:02:15.008
Flux monitors the repositories to determine

46
00:02:15.008 --> 00:02:19.006
what custom resources should be applied.

47
00:02:19.006 --> 00:02:20.008
Notice the pattern?

48
00:02:20.008 --> 00:02:24.004
That's right, Flux uses GitOps to manage itself

49
00:02:24.004 --> 00:02:26.008
and to establish the GitOps workflows

50
00:02:26.008 --> 00:02:29.009
that deploy our applications.

51
00:02:29.009 --> 00:02:33.003
Okay, so that's enough about how to bootstrap Flux.

52
00:02:33.003 --> 00:02:36.007
Let's shift over to some hands-on flux installation

53
00:02:36.007 --> 00:02:39.000
to get a feel for how it works.

