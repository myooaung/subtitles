WEBVTT
1
00:00:00.005 --> 00:00:03.009
- Our final tool, Flagger is a progressive delivery tool

2
00:00:03.009 --> 00:00:06.002
that uses GitOps.

3
00:00:06.002 --> 00:00:08.003
Flagger was developed by Weaveworks

4
00:00:08.003 --> 00:00:10.004
with the goal of automating releases

5
00:00:10.004 --> 00:00:13.005
that use progressive delivery techniques.

6
00:00:13.005 --> 00:00:15.008
In 2020, the project was donated

7
00:00:15.008 --> 00:00:18.007
to the cloud native computing foundation.

8
00:00:18.007 --> 00:00:20.005
Flaggers supports three types

9
00:00:20.005 --> 00:00:22.004
of advanced deployment strategies

10
00:00:22.004 --> 00:00:26.005
that we can use to release a new version of our application.

11
00:00:26.005 --> 00:00:28.007
The first is a canary deployment.

12
00:00:28.007 --> 00:00:31.004
This deployment gradually shifts more traffic

13
00:00:31.004 --> 00:00:33.005
to a new application version

14
00:00:33.005 --> 00:00:38.005
as long as the new release's vital signs remain positive.

15
00:00:38.005 --> 00:00:42.007
A/B testing is another deployment type supported by Flagger.

16
00:00:42.007 --> 00:00:43.008
In this strategy,

17
00:00:43.008 --> 00:00:46.006
we release the new version of an application

18
00:00:46.006 --> 00:00:49.001
and then selectively route a small segment

19
00:00:49.001 --> 00:00:51.004
of traffic to it for testing.

20
00:00:51.004 --> 00:00:54.000
If the metrics for the new version are positive,

21
00:00:54.000 --> 00:00:57.008
we replaced the old version with the new version.

22
00:00:57.008 --> 00:01:00.005
The final deployment strategy Flagger supports

23
00:01:00.005 --> 00:01:02.005
is blue/green deployments.

24
00:01:02.005 --> 00:01:04.007
This approach deploys the new version

25
00:01:04.007 --> 00:01:07.006
and then transitions live traffic to it

26
00:01:07.006 --> 00:01:10.007
only after it passes a series of tests.

27
00:01:10.007 --> 00:01:12.006
At that point, our new version

28
00:01:12.006 --> 00:01:16.002
becomes the active production version.

29
00:01:16.002 --> 00:01:19.004
Flagger can be used with a wide array of technologies.

30
00:01:19.004 --> 00:01:21.008
So I'm only going to touch on the architecture

31
00:01:21.008 --> 00:01:23.002
at a high level.

32
00:01:23.002 --> 00:01:26.002
Like Flux, Flagger runs in your cluster

33
00:01:26.002 --> 00:01:29.002
and it can be deployed there using helm.

34
00:01:29.002 --> 00:01:32.008
When we define a deployment strategy like a canary,

35
00:01:32.008 --> 00:01:35.003
we use a custom resource definition

36
00:01:35.003 --> 00:01:37.008
that stores the declarative definition

37
00:01:37.008 --> 00:01:40.007
of that deployment YAML.

38
00:01:40.007 --> 00:01:43.007
To route traffic for the deployment strategy,

39
00:01:43.007 --> 00:01:45.007
Flagger can use it either a service mesh

40
00:01:45.007 --> 00:01:47.005
or an ingress controller.

41
00:01:47.005 --> 00:01:49.005
Istio Linkerd and App Mesh,

42
00:01:49.005 --> 00:01:52.009
or some popular meshes that are supported by Flagger.

43
00:01:52.009 --> 00:01:55.005
There's also broad support for ingress controllers

44
00:01:55.005 --> 00:01:56.004
like NGINX,

45
00:01:56.004 --> 00:01:57.004
Contour glue,

46
00:01:57.004 --> 00:01:59.002
and many others.

47
00:01:59.002 --> 00:02:01.007
In our setup, we'll be using the NGINX controller

48
00:02:01.007 --> 00:02:04.003
to route a small amount of test traffic

49
00:02:04.003 --> 00:02:06.003
to a new version of our application

50
00:02:06.003 --> 00:02:08.004
through a canary deployment.

51
00:02:08.004 --> 00:02:11.001
We'll see how to install Flagger in the controller

52
00:02:11.001 --> 00:02:13.000
in upcoming lessons.

