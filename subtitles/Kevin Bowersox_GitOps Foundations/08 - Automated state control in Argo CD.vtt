WEBVTT
1
00:00:00.005 --> 00:00:03.000
- [Instructor] To demonstrate the final GitOps principle,

2
00:00:03.000 --> 00:00:05.008
automated state control, we're going to violate

3
00:00:05.008 --> 00:00:08.001
one of the golden rules of GitOps,

4
00:00:08.001 --> 00:00:11.005
yup, I'm going to use kubectl to directly modify

5
00:00:11.005 --> 00:00:14.001
the Kubernetes cluster.

6
00:00:14.001 --> 00:00:15.001
Don't try this in prod.

7
00:00:15.001 --> 00:00:18.004
All right, so let's take a look at what's running

8
00:00:18.004 --> 00:00:19.004
on the cluster.

9
00:00:19.004 --> 00:00:22.003
To do that, just click on a pod and you'll see

10
00:00:22.003 --> 00:00:25.008
that we're running version 2.0 of the container image.

11
00:00:25.008 --> 00:00:29.003
that's the desired state, that's what's in Git.

12
00:00:29.003 --> 00:00:31.006
Now let's create some drift.

13
00:00:31.006 --> 00:00:35.003
To do that, I'm going to navigate to a terminal

14
00:00:35.003 --> 00:00:38.007
and inside of this terminal, we're going to issue

15
00:00:38.007 --> 00:00:41.008
a patch command using kubectl.

16
00:00:41.008 --> 00:00:45.008
So this command is going to roll back the image

17
00:00:45.008 --> 00:00:48.002
in the deployment to the first version

18
00:00:48.002 --> 00:00:50.001
of our container image.

19
00:00:50.001 --> 00:00:53.000
So we're purposely creating some drift so

20
00:00:53.000 --> 00:00:56.000
that our cluster's runtime state doesn't match

21
00:00:56.000 --> 00:00:58.004
the desired state in Git.

22
00:00:58.004 --> 00:01:00.008
All right, let's go ahead, let's issue that command

23
00:01:00.008 --> 00:01:03.005
and then take a look at Argo CD.

24
00:01:03.005 --> 00:01:06.008
You'll notice it automatically picks up that the cluster

25
00:01:06.008 --> 00:01:10.008
is out of sync with the desired state in Git.

26
00:01:10.008 --> 00:01:13.006
And if we want to learn more about the drift,

27
00:01:13.006 --> 00:01:16.006
we can click on the app diff button,

28
00:01:16.006 --> 00:01:20.000
and then here we can select Compact Diff

29
00:01:20.000 --> 00:01:25.002
and it's going to point out the exact cause of the drift.

30
00:01:25.002 --> 00:01:29.005
So it shows us the difference between our desired state

31
00:01:29.005 --> 00:01:31.007
and our cluster's runtime state,

32
00:01:31.007 --> 00:01:35.009
and you can see it's pinpointing that container image.

33
00:01:35.009 --> 00:01:40.002
Now, if we navigate into the app details,

34
00:01:40.002 --> 00:01:42.004
here if we scroll down,

35
00:01:42.004 --> 00:01:47.001
you'll notice that the self-heal policy hasn't been enabled

36
00:01:47.001 --> 00:01:50.004
and I did that purposefully so that we could pause and take

37
00:01:50.004 --> 00:01:54.003
a look at that drift that gets created when we run an

38
00:01:54.003 --> 00:01:57.008
imperative command via kubectl.

39
00:01:57.008 --> 00:02:01.009
If we go ahead and enable this option for self healing,

40
00:02:01.009 --> 00:02:03.005
take a look at what the cluster does,

41
00:02:03.005 --> 00:02:04.005
it automatically begins to reconcile

42
00:02:04.005 --> 00:02:11.000
the cluster's runtime state with the desired state in Git.

43
00:02:11.000 --> 00:02:14.001
So if we take a look here when it finishes,

44
00:02:14.001 --> 00:02:17.006
you'll notice we're back to version 2.0

45
00:02:17.006 --> 00:02:19.004
of that container image.

46
00:02:19.004 --> 00:02:22.007
And let's see what happens if I issue

47
00:02:22.007 --> 00:02:25.004
the patch command again.

48
00:02:25.004 --> 00:02:28.004
So here, if we take a look, the cluster stayed reconciled,

49
00:02:28.004 --> 00:02:31.000
it corrected the drift rather quickly.

50
00:02:31.000 --> 00:02:33.004
We didn't even see it,

51
00:02:33.004 --> 00:02:35.000
but if we take a look at one of the pods,

52
00:02:35.000 --> 00:02:37.000
you can see that we're running version 2.0

53
00:02:37.000 --> 00:02:39.007
of the container image.

54
00:02:39.007 --> 00:02:43.008
So that's the control loop in action,

55
00:02:43.008 --> 00:02:46.008
it reconciled the system's runtime state

56
00:02:46.008 --> 00:02:50.001
with the desired state to get things restored.

57
00:02:50.001 --> 00:02:51.009
That's automated state control,

58
00:02:51.009 --> 00:02:55.000
our final GitOps principle in action.

