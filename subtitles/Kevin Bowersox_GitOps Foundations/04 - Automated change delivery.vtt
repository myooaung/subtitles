WEBVTT
1
00:00:00.005 --> 00:00:02.008
- [Instructor] Let's cover the next GitOps principle,

2
00:00:02.008 --> 00:00:05.000
which requires changes to the system

3
00:00:05.000 --> 00:00:07.005
to be delivered with automation.

4
00:00:07.005 --> 00:00:09.007
Okay, let's unpack that some.

5
00:00:09.007 --> 00:00:11.009
We know git commits are the only way

6
00:00:11.009 --> 00:00:15.005
to change the system's blueprints or desired state.

7
00:00:15.005 --> 00:00:17.008
In GitOps, once the commit occurs,

8
00:00:17.008 --> 00:00:21.007
deployment of the actual change is automated.

9
00:00:21.007 --> 00:00:24.000
We've touched on this before.

10
00:00:24.000 --> 00:00:26.003
A commit is made against Git,

11
00:00:26.003 --> 00:00:28.006
the desired state is updated,

12
00:00:28.006 --> 00:00:32.004
then it's pulled into the system by an operator that applies

13
00:00:32.004 --> 00:00:34.009
the changes to the running system.

14
00:00:34.009 --> 00:00:38.000
Once the blueprints are updated by the commit,

15
00:00:38.000 --> 00:00:40.008
all the work in GitOps to deploy the change

16
00:00:40.008 --> 00:00:43.003
is done with automation.

17
00:00:43.003 --> 00:00:46.003
Now let's talk a little bit about what this principle

18
00:00:46.003 --> 00:00:47.009
doesn't allow for.

19
00:00:47.009 --> 00:00:50.006
If we get a new idea for the system and directly

20
00:00:50.006 --> 00:00:52.004
make the change against it,

21
00:00:52.004 --> 00:00:56.004
we violate this principle because GitOps doesn't allow us

22
00:00:56.004 --> 00:01:00.004
to apply changes outside of the automated procedures.

23
00:01:00.004 --> 00:01:03.005
So if you're familiar with SSHing into a box

24
00:01:03.005 --> 00:01:07.006
or running kubctl apply, you'll need to adjust and allow

25
00:01:07.006 --> 00:01:12.004
the automated agents to handle shipping your changes.

26
00:01:12.004 --> 00:01:15.004
Giving up that access to adhere to this principle

27
00:01:15.004 --> 00:01:17.003
comes with benefits.

28
00:01:17.003 --> 00:01:19.009
Automation allows changes to be delivered

29
00:01:19.009 --> 00:01:23.002
through standard workflows that are easier for developers

30
00:01:23.002 --> 00:01:26.006
to use because they only require Git

31
00:01:26.006 --> 00:01:29.005
and Git is such a well-known tool.

32
00:01:29.005 --> 00:01:33.003
Automation also standardizes your delivery procedures,

33
00:01:33.003 --> 00:01:37.006
making system operations more consistent and predictable.

34
00:01:37.006 --> 00:01:41.004
This principle also delivers huge security advantages

35
00:01:41.004 --> 00:01:45.006
because the automated agents run inside the system.

36
00:01:45.006 --> 00:01:49.003
This allows you to restrict access and limit the exposure

37
00:01:49.003 --> 00:01:53.000
of sensitive details of the system like management APIs,

38
00:01:53.000 --> 00:01:55.000
or credentials.

39
00:01:55.000 --> 00:01:57.007
There's some finer points to automating how you deliver

40
00:01:57.007 --> 00:02:00.007
system changes that we'll dive into deeper,

41
00:02:00.007 --> 00:02:04.000
when we take a closer look at GitOps practices,

42
00:02:04.000 --> 00:02:06.001
but let's move on to close things out

43
00:02:06.001 --> 00:02:08.000
with our final principle.

