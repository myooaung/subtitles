WEBVTT
1
00:00:00.005 --> 00:00:02.002
- [Instructor] The final GitOps principle

2
00:00:02.002 --> 00:00:05.000
focuses on how we control the running system

3
00:00:05.000 --> 00:00:08.007
to ensure it remains in its desired state.

4
00:00:08.007 --> 00:00:11.007
There are some threads between the GitOps principles.

5
00:00:11.007 --> 00:00:13.007
For example, the first two principles

6
00:00:13.007 --> 00:00:16.001
primarily deal with creating and managing

7
00:00:16.001 --> 00:00:18.008
a desired state for the system.

8
00:00:18.008 --> 00:00:21.007
They relate to how we build the system blueprints

9
00:00:21.007 --> 00:00:24.005
that describe what it looks like.

10
00:00:24.005 --> 00:00:26.006
The last two principles focus more

11
00:00:26.006 --> 00:00:29.004
on the runtime state of the system.

12
00:00:29.004 --> 00:00:31.007
They describe concepts that help ensure

13
00:00:31.007 --> 00:00:36.000
the running system matches the desired state.

14
00:00:36.000 --> 00:00:38.003
We've seen how automated change delivery

15
00:00:38.003 --> 00:00:41.007
can apply updates to the system's runtime state,

16
00:00:41.007 --> 00:00:44.000
but once those changes are applied,

17
00:00:44.000 --> 00:00:47.004
how do we ensure the system stays that way?

18
00:00:47.004 --> 00:00:49.001
When our system's runtime state

19
00:00:49.001 --> 00:00:53.006
deviates from its desired state, this is known as drift.

20
00:00:53.006 --> 00:00:56.006
There's a mismatch between the system's blueprints

21
00:00:56.006 --> 00:00:59.009
and what is actually running in the system.

22
00:00:59.009 --> 00:01:02.003
This is where the fourth GitOps principle

23
00:01:02.003 --> 00:01:05.005
automated state control comes into play.

24
00:01:05.005 --> 00:01:09.000
Operators observe the desired system state,

25
00:01:09.000 --> 00:01:12.007
and they observe the running state of the system.

26
00:01:12.007 --> 00:01:14.007
After comparing the two,

27
00:01:14.007 --> 00:01:17.004
the operator begins to apply changes

28
00:01:17.004 --> 00:01:19.001
that reconcile the drift

29
00:01:19.001 --> 00:01:21.008
and converge the running state of the system

30
00:01:21.008 --> 00:01:24.005
back to its desired state.

31
00:01:24.005 --> 00:01:27.006
So the operator controls the runtime state

32
00:01:27.006 --> 00:01:30.006
by enforcing against changes that take the system

33
00:01:30.006 --> 00:01:34.000
away from its desired state.

34
00:01:34.000 --> 00:01:36.003
It's easy to see the benefits here.

35
00:01:36.003 --> 00:01:39.004
We establish a feedback loop to observe our system

36
00:01:39.004 --> 00:01:41.009
and automatically correct any deviations

37
00:01:41.009 --> 00:01:43.009
from the desired state.

38
00:01:43.009 --> 00:01:45.005
It's as if a system admin

39
00:01:45.005 --> 00:01:48.000
were watching the system constantly.

40
00:01:48.000 --> 00:01:50.004
So you can go ahead and sleep through the night

41
00:01:50.004 --> 00:01:52.006
when things go awry.

42
00:01:52.006 --> 00:01:55.006
So that covers the principles behind GitOps.

43
00:01:55.006 --> 00:01:58.007
You'll find these principles underlying the workflows,

44
00:01:58.007 --> 00:02:02.004
practices, and tools that use the GitOps pattern,

45
00:02:02.004 --> 00:02:04.000
which we'll see next.

