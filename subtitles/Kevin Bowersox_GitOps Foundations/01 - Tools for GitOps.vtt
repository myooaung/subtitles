WEBVTT
1
00:00:00.005 --> 00:00:01.004
- [Presenter] Using GitOps

2
00:00:01.004 --> 00:00:04.002
to deliver Cloud Native applications requires

3
00:00:04.002 --> 00:00:06.004
a tool set that supports a high degree

4
00:00:06.004 --> 00:00:10.000
of automation and interoperability.

5
00:00:10.000 --> 00:00:12.002
Within that tool set, some tools

6
00:00:12.002 --> 00:00:15.007
have emerged specifically with GitOps in mind.

7
00:00:15.007 --> 00:00:18.002
Others were around prior to GitOps

8
00:00:18.002 --> 00:00:21.005
and just happened to fit well with the new approach.

9
00:00:21.005 --> 00:00:24.004
Let's start by looking at some of the preexisting tools

10
00:00:24.004 --> 00:00:27.000
that compliment GitOps.

11
00:00:27.000 --> 00:00:31.001
As the name implies GitOps is centered around using Git.

12
00:00:31.001 --> 00:00:32.003
So it's no surprise,

13
00:00:32.003 --> 00:00:36.002
you'll need a source control management system like GitHub.

14
00:00:36.002 --> 00:00:38.008
GitHub is used to store your repositories

15
00:00:38.008 --> 00:00:41.006
and it provides management features like security

16
00:00:41.006 --> 00:00:46.002
and pull requests that are not found in vanilla Git.

17
00:00:46.002 --> 00:00:49.007
A build server is another tool you'll need forget GitOps.

18
00:00:49.007 --> 00:00:52.001
It handles the continuous integration piece

19
00:00:52.001 --> 00:00:54.008
of the workflow by assembling testing

20
00:00:54.008 --> 00:00:58.004
and then packaging software into a container image.

21
00:00:58.004 --> 00:01:01.006
In a GitOps workflow, a build servers main purpose

22
00:01:01.006 --> 00:01:04.002
is to create quality software artifacts

23
00:01:04.002 --> 00:01:08.004
and to place them inside the artifact repository.

24
00:01:08.004 --> 00:01:11.007
The artifact repository serves as the official source

25
00:01:11.007 --> 00:01:15.002
for different versions of our packaged software.

26
00:01:15.002 --> 00:01:18.003
It makes artifacts like container images available

27
00:01:18.003 --> 00:01:21.002
to be run as workloads on Kubernetes

28
00:01:21.002 --> 00:01:24.003
which is our container orchestration platform.

29
00:01:24.003 --> 00:01:27.007
These tools can be used independently of GitOps

30
00:01:27.007 --> 00:01:29.009
even if you haven't heard of GitOps,

31
00:01:29.009 --> 00:01:32.006
you've probably recognize some of the names of the tools

32
00:01:32.006 --> 00:01:34.006
that I've listed.

33
00:01:34.006 --> 00:01:38.000
Now let's shift our focus and explore a new breed of tools

34
00:01:38.000 --> 00:01:39.005
that are more targeted towards

35
00:01:39.005 --> 00:01:41.009
enabling different GitOps use cases

36
00:01:41.009 --> 00:01:44.007
for Cloud Native applications.

37
00:01:44.007 --> 00:01:47.006
The first group is used to declaratively describe

38
00:01:47.006 --> 00:01:50.000
and repeatedly provision infrastructure

39
00:01:50.000 --> 00:01:53.007
like Kubernetes clusters and virtual machines.

40
00:01:53.007 --> 00:01:55.007
You'll find tools like Terraform

41
00:01:55.007 --> 00:02:00.000
and AWS CloudFormation within this group.

42
00:02:00.000 --> 00:02:02.009
In most GitOps workflows, these tools establish

43
00:02:02.009 --> 00:02:05.008
the base layer Kubernetes cluster

44
00:02:05.008 --> 00:02:09.005
that application workloads are deployed upon.

45
00:02:09.005 --> 00:02:11.005
Once the cluster is established,

46
00:02:11.005 --> 00:02:14.007
our next group of tools deployment operators

47
00:02:14.007 --> 00:02:18.002
are used for continuous deployment of changes to resources

48
00:02:18.002 --> 00:02:22.002
like services and pods running on the Kubernetes cluster.

49
00:02:22.002 --> 00:02:25.004
This includes tools like Flux and Argo CD

50
00:02:25.004 --> 00:02:29.002
that run as controllers inside of Kubernetes.

51
00:02:29.002 --> 00:02:32.005
Within the cluster these tools constantly monitor

52
00:02:32.005 --> 00:02:35.002
and observe its state to automatically reconcile

53
00:02:35.002 --> 00:02:38.008
any differences between Git and the running workload.

54
00:02:38.008 --> 00:02:40.005
This is what allows developers

55
00:02:40.005 --> 00:02:43.003
to solely interface with Git.

56
00:02:43.003 --> 00:02:46.006
In some GitOps workflows, containerized applications

57
00:02:46.006 --> 00:02:49.002
may leveraged advanced release strategies

58
00:02:49.002 --> 00:02:52.007
that are conducted by progressive delivery tools,

59
00:02:52.007 --> 00:02:56.003
tools like Flagger and Argo Rollouts use techniques

60
00:02:56.003 --> 00:02:58.005
that control traffic to different versions

61
00:02:58.005 --> 00:03:00.005
of an application.

62
00:03:00.005 --> 00:03:03.007
These release strategies can be defined declaratively

63
00:03:03.007 --> 00:03:07.006
and stored as part of the systems desired state.

64
00:03:07.006 --> 00:03:09.007
This allows new versions of an app

65
00:03:09.007 --> 00:03:12.002
to be gradually introduced using techniques

66
00:03:12.002 --> 00:03:14.009
like Canary deployments and AB testing

67
00:03:14.009 --> 00:03:19.007
that verify the new software before fully releasing it.

68
00:03:19.007 --> 00:03:22.000
The GitOps tools you'll encounter will vary

69
00:03:22.000 --> 00:03:25.005
because not everybody does GitOps the same way.

70
00:03:25.005 --> 00:03:28.002
However, the tool should have one common characteristic

71
00:03:28.002 --> 00:03:33.000
which is that they store configuration declaratively in Git

72
00:03:33.000 --> 00:03:35.007
and that's their interface for the developer,

73
00:03:35.007 --> 00:03:39.000
that's the pattern, that's GitOps.

74
00:03:39.000 --> 00:03:43.000
Next, we're going to dive in and sample a few of these tools.

