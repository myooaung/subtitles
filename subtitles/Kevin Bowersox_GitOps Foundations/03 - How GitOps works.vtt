WEBVTT
1
00:00:00.005 --> 00:00:02.004
- [Instructor] We're going to take a look at the big picture

2
00:00:02.004 --> 00:00:05.001
to see how GitOps is used to manage changes,

3
00:00:05.001 --> 00:00:08.005
deployments and operations of a system.

4
00:00:08.005 --> 00:00:11.005
So let's start at the top and break it down from there.

5
00:00:11.005 --> 00:00:14.003
We have Git and we have our System.

6
00:00:14.003 --> 00:00:17.006
Inside a Git, we store the desired state of our system.

7
00:00:17.006 --> 00:00:21.003
So let's pause there because state is an important term

8
00:00:21.003 --> 00:00:22.009
and we should define it.

9
00:00:22.009 --> 00:00:26.000
State is defined as the condition of something

10
00:00:26.000 --> 00:00:27.003
at a specific time.

11
00:00:27.003 --> 00:00:30.005
So right now, if you're happy and you're energetic,

12
00:00:30.005 --> 00:00:33.007
that's your current state, but with the system,

13
00:00:33.007 --> 00:00:36.007
state is more like how many nodes are in the cluster?

14
00:00:36.007 --> 00:00:38.004
What docker image am I running,

15
00:00:38.004 --> 00:00:41.007
or how many containers is it running it?

16
00:00:41.007 --> 00:00:44.007
Okay, so that state in GitOps,

17
00:00:44.007 --> 00:00:47.005
we described system state using code,

18
00:00:47.005 --> 00:00:51.000
and it's always stored in Git through commits.

19
00:00:51.000 --> 00:00:53.009
The code in Git is the single source of truth

20
00:00:53.009 --> 00:00:57.005
for the condition we want our system to be in.

21
00:00:57.005 --> 00:00:58.009
So here you can see,

22
00:00:58.009 --> 00:01:01.004
I committed an initial configuration file

23
00:01:01.004 --> 00:01:06.001
to my Git repository named system-state.yaml.

24
00:01:06.001 --> 00:01:10.004
That file says the system should run one purple star.

25
00:01:10.004 --> 00:01:12.006
I'm just using shapes to keep it simple

26
00:01:12.006 --> 00:01:15.001
and to give you a visual.

27
00:01:15.001 --> 00:01:18.006
So the desired state says we need a purple star,

28
00:01:18.006 --> 00:01:20.003
but the current state of the system,

29
00:01:20.003 --> 00:01:23.006
its runtime state, doesn't match.

30
00:01:23.006 --> 00:01:27.005
We have some drift between Git and the System

31
00:01:27.005 --> 00:01:30.007
because we haven't deployed our changes.

32
00:01:30.007 --> 00:01:34.003
in GitOps, deployments are performed by an operator

33
00:01:34.003 --> 00:01:37.002
that runs inside the system.

34
00:01:37.002 --> 00:01:40.002
This operator will pull the code describing

35
00:01:40.002 --> 00:01:43.003
the desired system state from Git

36
00:01:43.003 --> 00:01:46.002
and then apply changes to the systems runtime

37
00:01:46.002 --> 00:01:49.002
to match the desired state.

38
00:01:49.002 --> 00:01:52.004
That's exactly what we want, the desired state described

39
00:01:52.004 --> 00:01:57.001
in Git matches the runtime state of the system.

40
00:01:57.001 --> 00:02:00.003
But let's say something happens in our system runtime

41
00:02:00.003 --> 00:02:01.009
drifts again.

42
00:02:01.009 --> 00:02:06.003
Instead of the purple star, we now have a red circle.

43
00:02:06.003 --> 00:02:09.005
in GitOps, we continually observe the system

44
00:02:09.005 --> 00:02:11.002
using the operator.

45
00:02:11.002 --> 00:02:13.008
So the operator notices the difference

46
00:02:13.008 --> 00:02:17.000
between the runtime state and the desired state,

47
00:02:17.000 --> 00:02:21.004
then it automatically corrects the drift between them.

48
00:02:21.004 --> 00:02:23.006
This monitoring and correction process

49
00:02:23.006 --> 00:02:26.008
that is continually running by the operator

50
00:02:26.008 --> 00:02:31.005
is known as the Control Loop or Reconciliation Loop.

51
00:02:31.005 --> 00:02:35.001
Those are the general mechanics of how GitOps works.

52
00:02:35.001 --> 00:02:38.008
We store our systems desired state in Git,

53
00:02:38.008 --> 00:02:42.006
when that state changes we automate deployment

54
00:02:42.006 --> 00:02:46.002
of those changes so that our systems runtime state

55
00:02:46.002 --> 00:02:49.004
changes to match the desired state.

56
00:02:49.004 --> 00:02:53.003
If the runtime state ever deviates from the desired state,

57
00:02:53.003 --> 00:02:56.004
the control loop will align the runtime state

58
00:02:56.004 --> 00:02:59.000
back to the desired state.

59
00:02:59.000 --> 00:03:00.003
There's more to explore,

60
00:03:00.003 --> 00:03:04.001
but you can start to see the big picture forming for GitOps.

61
00:03:04.001 --> 00:03:06.006
In the next lesson, we'll talk about why it's used

62
00:03:06.006 --> 00:03:09.000
and the benefits it delivers.

