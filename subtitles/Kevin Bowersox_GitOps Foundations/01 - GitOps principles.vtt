WEBVTT
1
00:00:00.005 --> 00:00:02.007
- [Instructor] If we think of GitOps as a pattern,

2
00:00:02.007 --> 00:00:06.002
there are four principles that make up that pattern.

3
00:00:06.002 --> 00:00:08.002
Let's take a look at them as a group,

4
00:00:08.002 --> 00:00:10.000
and then we'll dive into each one

5
00:00:10.000 --> 00:00:12.009
to see what they're all about.

6
00:00:12.009 --> 00:00:14.006
The first principle requires us

7
00:00:14.006 --> 00:00:17.003
to describe our system declaratively.

8
00:00:17.003 --> 00:00:20.005
So we store data that describes the desired state

9
00:00:20.005 --> 00:00:23.008
of the system, sort of like a blueprint.

10
00:00:23.008 --> 00:00:26.000
The second principle requires that we store

11
00:00:26.000 --> 00:00:29.002
that description of our system within Git.

12
00:00:29.002 --> 00:00:32.000
So we agree to keep the official blueprints,

13
00:00:32.000 --> 00:00:36.002
describing the desired system state version within Git.

14
00:00:36.002 --> 00:00:38.000
If we want to change the blueprint,

15
00:00:38.000 --> 00:00:41.005
it has to be done via a git commit.

16
00:00:41.005 --> 00:00:43.001
When we change the blueprint,

17
00:00:43.001 --> 00:00:45.001
the changes can only be applied

18
00:00:45.001 --> 00:00:47.009
to the running system through automation.

19
00:00:47.009 --> 00:00:51.005
Changed delivery is 100% automated.

20
00:00:51.005 --> 00:00:55.004
There are no manual changes in GitOps.

21
00:00:55.004 --> 00:00:56.009
The final principle ensures

22
00:00:56.009 --> 00:00:59.000
that our running system stays aligned

23
00:00:59.000 --> 00:01:02.000
to the desired state through automation.

24
00:01:02.000 --> 00:01:04.002
So if the running system drifts away

25
00:01:04.002 --> 00:01:06.004
from what we have described in Git,

26
00:01:06.004 --> 00:01:09.004
an operator within the system will heal it

27
00:01:09.004 --> 00:01:12.009
by returning it back to the desired state.

28
00:01:12.009 --> 00:01:15.000
So that's great from a high level,

29
00:01:15.000 --> 00:01:18.000
but you have to be asking, how does it really work?

30
00:01:18.000 --> 00:01:19.007
So let's invest some time

31
00:01:19.007 --> 00:01:22.002
in exploring each of these principles,

32
00:01:22.002 --> 00:01:23.000
then you'll know

33
00:01:23.000 --> 00:01:26.001
how to recognize the pattern when it appears in a workflow

34
00:01:26.001 --> 00:01:29.000
or toll that you use in your day to day work.

