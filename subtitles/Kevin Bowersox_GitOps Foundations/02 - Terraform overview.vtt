WEBVTT
1
00:00:00.005 --> 00:00:02.003
- [Instructor] Terraform is a tool that uses

2
00:00:02.003 --> 00:00:06.002
a GitOps approach to provision infrastructure.

3
00:00:06.002 --> 00:00:09.002
Using Terraform, we can provision infrastructure

4
00:00:09.002 --> 00:00:12.006
like managed Kubernetes clusters and virtual machines

5
00:00:12.006 --> 00:00:15.005
within major cloud platforms.

6
00:00:15.005 --> 00:00:18.002
The tool fits well with GitOps because it uses

7
00:00:18.002 --> 00:00:21.000
a declarative language known as HashiCorp

8
00:00:21.000 --> 00:00:23.005
configuration language.

9
00:00:23.005 --> 00:00:26.007
We can use this language to describe the desired state

10
00:00:26.007 --> 00:00:29.007
of our systems infrastructure.

11
00:00:29.007 --> 00:00:33.006
Let's take a peek at how Terraform works at a high level.

12
00:00:33.006 --> 00:00:36.008
When using Terraform, the systems infrastructure

13
00:00:36.008 --> 00:00:40.000
is described with Terraform configuration files

14
00:00:40.000 --> 00:00:43.009
that are placed inside of a Terraform workspace.

15
00:00:43.009 --> 00:00:47.000
Within the files, declarative infrastructure code

16
00:00:47.000 --> 00:00:51.002
defines the resources that represent infrastructure objects

17
00:00:51.002 --> 00:00:54.008
to provision inside of the cloud platform.

18
00:00:54.008 --> 00:00:56.006
Following GitOps principles,

19
00:00:56.006 --> 00:01:00.004
these files should be stored in Git because they represent

20
00:01:00.004 --> 00:01:04.003
the desired state of the systems infrastructure.

21
00:01:04.003 --> 00:01:06.001
To achieve the desired state,

22
00:01:06.001 --> 00:01:08.003
these configuration files are applied

23
00:01:08.003 --> 00:01:12.003
using the Terraform command line interface.

24
00:01:12.003 --> 00:01:15.005
The CLI uses Terraform plugins made available

25
00:01:15.005 --> 00:01:18.008
by major cloud providers to provision infrastructure

26
00:01:18.008 --> 00:01:22.006
through the cloud platforms public API.

27
00:01:22.006 --> 00:01:25.003
Terraform has providers that allow you to provision

28
00:01:25.003 --> 00:01:31.004
resources in AWS, Azure, GCP, and even private clouds.

29
00:01:31.004 --> 00:01:35.001
Once the resources are provisioned on the cloud platform,

30
00:01:35.001 --> 00:01:39.003
Terraform outputs, a TF state file that contains details

31
00:01:39.003 --> 00:01:42.008
about the newly created resources.

32
00:01:42.008 --> 00:01:45.007
Let's take a closer look at the Terraform files

33
00:01:45.007 --> 00:01:49.004
that contain the declarative infrastructure configuration.

34
00:01:49.004 --> 00:01:51.007
These files have a TF extension

35
00:01:51.007 --> 00:01:54.002
and they use adjacent like syntax

36
00:01:54.002 --> 00:01:59.009
that contains two major constructs, blocks and arguments.

37
00:01:59.009 --> 00:02:03.002
Blocks are containers that represent the configuration

38
00:02:03.002 --> 00:02:06.003
of an object like a resource.

39
00:02:06.003 --> 00:02:09.009
Each block must have a type and they can optionally define

40
00:02:09.009 --> 00:02:12.004
one or more labels.

41
00:02:12.004 --> 00:02:15.007
Here, it's important to note that a provider like Azure

42
00:02:15.007 --> 00:02:19.004
can override some of the default behavior for a block.

43
00:02:19.004 --> 00:02:22.006
So in this instance, the Azure provider

44
00:02:22.006 --> 00:02:25.008
causes the blocks labels to have special meaning

45
00:02:25.008 --> 00:02:30.005
for provisioning infrastructure into that cloud platform.

46
00:02:30.005 --> 00:02:32.008
Okay. So moving on, within a block,

47
00:02:32.008 --> 00:02:36.001
we'll find one or more arguments.

48
00:02:36.001 --> 00:02:39.009
Arguments are used to assign a value to an identifier

49
00:02:39.009 --> 00:02:45.005
which manages some aspect of the resources configuration.

50
00:02:45.005 --> 00:02:49.004
We can also create variables inside of our HCL.

51
00:02:49.004 --> 00:02:53.002
A variable is defined within a TF file.

52
00:02:53.002 --> 00:02:56.008
Then it's assigned a value using either the command line

53
00:02:56.008 --> 00:03:00.000
or an environment variable or a TF vars file,

54
00:03:00.000 --> 00:03:03.002
which you can see in our example.

55
00:03:03.002 --> 00:03:06.007
To use a variable, just use the prefix vars

56
00:03:06.007 --> 00:03:09.003
within the declarative configuration

57
00:03:09.003 --> 00:03:13.009
and then use dot notation to reference the variable name.

58
00:03:13.009 --> 00:03:16.006
So that's a quick look at Terraform.

59
00:03:16.006 --> 00:03:20.001
It can be used in many ways to support GitOps workflows,

60
00:03:20.001 --> 00:03:21.007
such as account provisioning

61
00:03:21.007 --> 00:03:24.005
and Git repository provisioning.

62
00:03:24.005 --> 00:03:26.007
We'll use it in the more traditional sense

63
00:03:26.007 --> 00:03:28.006
to provision infrastructure,

64
00:03:28.006 --> 00:03:31.003
when we bootstrap the Kubernetes cluster

65
00:03:31.003 --> 00:03:34.000
for our GitOps operations.

