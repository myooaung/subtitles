WEBVTT
1
00:00:00.005 --> 00:00:02.007
- [Instructor] Once you've set up a container platform

2
00:00:02.007 --> 00:00:04.007
and your infrastructure code is deployed

3
00:00:04.007 --> 00:00:08.002
through an operator, you're ready to begin deploying changes

4
00:00:08.002 --> 00:00:11.006
through your GitOps workflow from end-to-end.

5
00:00:11.006 --> 00:00:14.006
Let's make a small change to our application code,

6
00:00:14.006 --> 00:00:16.009
so you can see the workflow in action

7
00:00:16.009 --> 00:00:20.009
for a cloud native application.

8
00:00:20.009 --> 00:00:22.008
The first thing that I want to point out

9
00:00:22.008 --> 00:00:25.009
is that we're currently running version 2.0

10
00:00:25.009 --> 00:00:30.000
of our container image on the local Kubernetes cluster.

11
00:00:30.000 --> 00:00:33.004
We're going to build a third container image.

12
00:00:33.004 --> 00:00:35.004
And to do that, we're going to work

13
00:00:35.004 --> 00:00:40.001
within our application repository inside of GitHub.

14
00:00:40.001 --> 00:00:42.006
So I'll navigate into that repository,

15
00:00:42.006 --> 00:00:46.004
and here we can find the source code for our application,

16
00:00:46.004 --> 00:00:48.005
as well as the Docker file

17
00:00:48.005 --> 00:00:51.003
that will be used to build the container image.

18
00:00:51.003 --> 00:00:53.006
Now you'll notice we have a pull request

19
00:00:53.006 --> 00:00:56.000
sitting in this repository.

20
00:00:56.000 --> 00:00:59.009
Let's take a look at what was changed.

21
00:00:59.009 --> 00:01:03.000
If we navigate to the files changed tab,

22
00:01:03.000 --> 00:01:06.000
we can see the exact lines of code.

23
00:01:06.000 --> 00:01:10.002
So the mavepalm.xml file had the artifact version

24
00:01:10.002 --> 00:01:12.009
bumped up by one to 3.0.

25
00:01:12.009 --> 00:01:14.007
And then on the webpage,

26
00:01:14.007 --> 00:01:17.006
we're no longer displaying version 2.0.

27
00:01:17.006 --> 00:01:20.004
We've incremented that to version 3.0.

28
00:01:20.004 --> 00:01:23.001
So that's what we'll see in the browser.

29
00:01:23.001 --> 00:01:24.007
These are pretty simple changes,

30
00:01:24.007 --> 00:01:28.008
but let's keep inspecting this pull request.

31
00:01:28.008 --> 00:01:33.004
Pull requests are extremely important in GitOps.

32
00:01:33.004 --> 00:01:36.002
By using pull requests and approvals,

33
00:01:36.002 --> 00:01:40.005
we can govern what changes find their way into the system.

34
00:01:40.005 --> 00:01:43.003
It also helps us build an audit trail

35
00:01:43.003 --> 00:01:45.005
for the changes that are in the system.

36
00:01:45.005 --> 00:01:50.001
We can always look in Git to see who changed what and when.

37
00:01:50.001 --> 00:01:53.006
You'll notice that we've also built in quality gates

38
00:01:53.006 --> 00:01:55.009
into our development process.

39
00:01:55.009 --> 00:01:58.009
This allows us to ensure that we don't break the build

40
00:01:58.009 --> 00:02:03.003
or introduce a security vulnerability into our system.

41
00:02:03.003 --> 00:02:05.003
Now, everything looks good here,

42
00:02:05.003 --> 00:02:08.006
so I'm going to go ahead and merge the pull request.

43
00:02:08.006 --> 00:02:11.009
But before I do, let's talk about this a little bit.

44
00:02:11.009 --> 00:02:14.006
You should restrict who has permissions

45
00:02:14.006 --> 00:02:17.007
to merge and approve a pull request.

46
00:02:17.007 --> 00:02:19.009
This shouldn't be a broad privilege

47
00:02:19.009 --> 00:02:22.007
that's held by everybody on the team.

48
00:02:22.007 --> 00:02:25.000
You want to make sure that all changes

49
00:02:25.000 --> 00:02:26.008
are thoroughly reviewed

50
00:02:26.008 --> 00:02:29.001
and that there's an approval on them

51
00:02:29.001 --> 00:02:31.005
before they get released.

52
00:02:31.005 --> 00:02:33.000
Okay, so let's go ahead,

53
00:02:33.000 --> 00:02:35.006
we'll merge this pull request,

54
00:02:35.006 --> 00:02:39.006
and then I'm going to navigate into CircleCI.

55
00:02:39.006 --> 00:02:42.005
That's our continuous integration platform.

56
00:02:42.005 --> 00:02:45.000
You'll notice that it's picked up the change

57
00:02:45.000 --> 00:02:46.009
within the repository

58
00:02:46.009 --> 00:02:50.002
and it's starting to build the application source code

59
00:02:50.002 --> 00:02:53.007
and package it into a software artifact.

60
00:02:53.007 --> 00:02:57.002
That software artifact is then going to be packaged

61
00:02:57.002 --> 00:02:59.002
into a container image

62
00:02:59.002 --> 00:03:01.003
and the container image will be built

63
00:03:01.003 --> 00:03:07.000
and pushed into Docker Hub, which is our container registry.

64
00:03:07.000 --> 00:03:08.002
Okay, it looks like

65
00:03:08.002 --> 00:03:11.006
our continuous integration process has finished.

66
00:03:11.006 --> 00:03:14.000
Let's go take a peak in Docker Hub

67
00:03:14.000 --> 00:03:16.006
and we'll look at the new container image.

68
00:03:16.006 --> 00:03:18.002
So here, I'll navigate

69
00:03:18.002 --> 00:03:21.008
into the GitOps foundations repository.

70
00:03:21.008 --> 00:03:23.009
And then if I scroll down,

71
00:03:23.009 --> 00:03:28.001
I can find version 3.0 of our container image.

72
00:03:28.001 --> 00:03:30.009
And if I click on that, I can see all the instructions

73
00:03:30.009 --> 00:03:34.002
that were used to build that image.

74
00:03:34.002 --> 00:03:36.008
Okay, so now we want to deploy

75
00:03:36.008 --> 00:03:39.008
the third version of our container image

76
00:03:39.008 --> 00:03:44.000
on our local Kubernetes cluster using the Flux operator.

77
00:03:44.000 --> 00:03:45.004
Now, this is GitOps

78
00:03:45.004 --> 00:03:48.004
and we drive all of our operations through Git,

79
00:03:48.004 --> 00:03:52.000
so that means we're heading back to GitHub

80
00:03:52.000 --> 00:03:57.001
and we need to navigate into the environment repository

81
00:03:57.001 --> 00:03:58.007
that we forked.

82
00:03:58.007 --> 00:04:02.005
Within this repository, we find our infrastructure code

83
00:04:02.005 --> 00:04:05.007
and we're going to drop into the arc folder.

84
00:04:05.007 --> 00:04:09.000
In this folder, we'll find the Kubernetes manifest

85
00:04:09.000 --> 00:04:11.000
for our deployment.

86
00:04:11.000 --> 00:04:15.005
That manifest contains the container image version.

87
00:04:15.005 --> 00:04:18.007
Here, you can see it's set to version 2.0.

88
00:04:18.007 --> 00:04:21.001
We need to bump that up to 3.0.

89
00:04:21.001 --> 00:04:25.005
Now, I'm going to do that in line here in GitHub,

90
00:04:25.005 --> 00:04:28.001
but I want to emphasize once again,

91
00:04:28.001 --> 00:04:31.001
this should be done via a pull request.

92
00:04:31.001 --> 00:04:35.004
You should protect your config repository in the same way.

93
00:04:35.004 --> 00:04:38.007
You want to use pull requests and approvals.

94
00:04:38.007 --> 00:04:41.009
You don't want any one to have a direct way

95
00:04:41.009 --> 00:04:45.000
to push a change into the system

96
00:04:45.000 --> 00:04:47.005
without somebody else reviewing it

97
00:04:47.005 --> 00:04:50.009
to make sure that it passes all of the gates

98
00:04:50.009 --> 00:04:53.007
and that the change is sound.

99
00:04:53.007 --> 00:04:55.009
All right, so with that in place,

100
00:04:55.009 --> 00:04:57.006
I'm just going to go ahead and commit this

101
00:04:57.006 --> 00:05:02.002
to save us some time.

102
00:05:02.002 --> 00:05:05.001
All right, and then we're going to head over to a terminal

103
00:05:05.001 --> 00:05:10.000
where I am watching our cluster state with kubectl.

104
00:05:10.000 --> 00:05:13.003
So shortly, we should see the Flux operator

105
00:05:13.003 --> 00:05:17.000
begin to reconcile the cluster's runtime state

106
00:05:17.000 --> 00:05:23.006
with the change we just made in the desired state in Git.

107
00:05:23.006 --> 00:05:26.003
There, we see the cluster starting to sync.

108
00:05:26.003 --> 00:05:28.006
It's spinning down the old pods

109
00:05:28.006 --> 00:05:32.002
and spinning up the new pods.

110
00:05:32.002 --> 00:05:34.003
All right, it looks like it's finished its work

111
00:05:34.003 --> 00:05:37.000
and the cluster appears to be reconciled.

112
00:05:37.000 --> 00:05:40.004
Let's go test that out by heading to a browser

113
00:05:40.004 --> 00:05:44.000
and we can go back to our original webpage

114
00:05:44.000 --> 00:05:47.000
and here I'm just going to refresh the page

115
00:05:47.000 --> 00:05:50.007
and you'll notice that version 3.0 of our container image

116
00:05:50.007 --> 00:05:53.007
is now deployed on the cluster.

117
00:05:53.007 --> 00:05:55.000
So with that applied,

118
00:05:55.000 --> 00:05:57.006
we've seen a change flow from end-to-end

119
00:05:57.006 --> 00:05:59.003
through our GitOps workflow

120
00:05:59.003 --> 00:06:02.000
for updating a cloud native application.

