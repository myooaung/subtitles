WEBVTT
1
00:00:00.004 --> 00:00:02.007
- [Instructor] GitOps provides a number of benefits

2
00:00:02.007 --> 00:00:06.003
that improve how we manage and operate our systems.

3
00:00:06.003 --> 00:00:08.008
Let's take a closer look at them.

4
00:00:08.008 --> 00:00:11.004
When you adopt a GitOps workflow,

5
00:00:11.004 --> 00:00:13.007
deploying a change starts with Git

6
00:00:13.007 --> 00:00:16.006
for every change every time.

7
00:00:16.006 --> 00:00:18.008
Git becomes the only way for developers

8
00:00:18.008 --> 00:00:21.002
to make a change to the system.

9
00:00:21.002 --> 00:00:23.001
Once developers make a commit,

10
00:00:23.001 --> 00:00:25.005
automation takes over to deploy the change

11
00:00:25.005 --> 00:00:27.001
to the running system.

12
00:00:27.001 --> 00:00:28.009
So what's so great about that?

13
00:00:28.009 --> 00:00:31.005
Well, to deploy or release a change,

14
00:00:31.005 --> 00:00:35.006
a developer only needs to know a few Git commands.

15
00:00:35.006 --> 00:00:37.006
Let me put it another way.

16
00:00:37.006 --> 00:00:40.003
If your delivery process looks like this,

17
00:00:40.003 --> 00:00:42.007
and it's understood only by about two people

18
00:00:42.007 --> 00:00:44.001
in your entire company,

19
00:00:44.001 --> 00:00:47.000
and somewhere in there is a secret handshake,

20
00:00:47.000 --> 00:00:49.000
GitOps can help.

21
00:00:49.000 --> 00:00:51.005
It's automated and repeatable approach

22
00:00:51.005 --> 00:00:55.001
to continuous delivery allows anyone on the team

23
00:00:55.001 --> 00:00:57.001
to release changes.

24
00:00:57.001 --> 00:01:00.002
So releases start to occur more frequently,

25
00:01:00.002 --> 00:01:02.002
and the team delivers faster

26
00:01:02.002 --> 00:01:05.009
without compromising systems stability.

27
00:01:05.009 --> 00:01:09.000
Because the GitOps pattern uses automation

28
00:01:09.000 --> 00:01:10.004
to deploy changes,

29
00:01:10.004 --> 00:01:14.000
the workflow is repeatable and consistent.

30
00:01:14.000 --> 00:01:17.000
This makes system operations more predictable

31
00:01:17.000 --> 00:01:18.007
and less prone to human error,

32
00:01:18.007 --> 00:01:21.002
which causes your rate of successful deployments

33
00:01:21.002 --> 00:01:23.001
to increase.

34
00:01:23.001 --> 00:01:25.006
If your system does experience an issue,

35
00:01:25.006 --> 00:01:29.004
all it takes is another Git commit that undoes the change

36
00:01:29.004 --> 00:01:33.000
to roll back the system to its last working state.

37
00:01:33.000 --> 00:01:36.002
In the event of a complete meltdown,

38
00:01:36.002 --> 00:01:39.008
GitOps allows you to quickly rebuild the entire system

39
00:01:39.008 --> 00:01:42.007
using the declarative infrastructure code

40
00:01:42.007 --> 00:01:47.006
that is stored in Git that describes the entire system.

41
00:01:47.006 --> 00:01:52.000
The bottom line is GitOps standardizes operational processes

42
00:01:52.000 --> 00:01:55.009
to remove risk and to avoid surprises.

43
00:01:55.009 --> 00:01:58.007
Now, if you've ever experienced a surprise,

44
00:01:58.007 --> 00:02:01.002
you know I'm not talking about a birthday party

45
00:02:01.002 --> 00:02:03.000
or breakfast in bed.

46
00:02:03.000 --> 00:02:05.006
The story typically goes like this.

47
00:02:05.006 --> 00:02:07.007
We release some changes to our system.

48
00:02:07.007 --> 00:02:09.006
It was probably on a Friday.

49
00:02:09.006 --> 00:02:12.008
And all of a sudden it started to thrash.

50
00:02:12.008 --> 00:02:15.002
So we (indistinct) into the box

51
00:02:15.002 --> 00:02:16.009
and discovered that four years ago,

52
00:02:16.009 --> 00:02:20.001
somebody made this change that nobody knew about.

53
00:02:20.001 --> 00:02:23.006
And that's what caused me to work all weekend.

54
00:02:23.006 --> 00:02:24.004
Yes.

55
00:02:24.004 --> 00:02:28.002
So, if you're tired of hearing or telling that story,

56
00:02:28.002 --> 00:02:31.002
GitOps can help prevent that.

57
00:02:31.002 --> 00:02:34.003
With GitOps, operations become transparent,

58
00:02:34.003 --> 00:02:37.003
because Git is the only way to make a change

59
00:02:37.003 --> 00:02:38.003
to the system.

60
00:02:38.003 --> 00:02:41.005
And it's where the entire system is described.

61
00:02:41.005 --> 00:02:45.007
Silos between DevSecOps can be broken down

62
00:02:45.007 --> 00:02:49.000
using Git as a collaboration tool.

63
00:02:49.000 --> 00:02:52.003
With Git, team members can review, discuss,

64
00:02:52.003 --> 00:02:54.009
and approve the changes to the system

65
00:02:54.009 --> 00:02:58.004
that are being made using a pull request.

66
00:02:58.004 --> 00:03:02.009
Anyone or anything with access can inspect the code.

67
00:03:02.009 --> 00:03:05.001
This includes automated tools

68
00:03:05.001 --> 00:03:08.003
that enforce security practices.

69
00:03:08.003 --> 00:03:12.005
GitOps provides a balance between strong security controls

70
00:03:12.005 --> 00:03:16.005
and the transparency that developers need to do their job.

71
00:03:16.005 --> 00:03:19.002
Because the work and discussion around changes

72
00:03:19.002 --> 00:03:21.004
is centralized in Git,

73
00:03:21.004 --> 00:03:24.009
the workflow naturally builds an audit log.

74
00:03:24.009 --> 00:03:29.004
You get traceability of who made or approved each change,

75
00:03:29.004 --> 00:03:31.000
which can be really important

76
00:03:31.000 --> 00:03:34.008
if you're working in a highly regulated environment.

77
00:03:34.008 --> 00:03:39.004
Arguably, the most important security benefit of GitOps

78
00:03:39.004 --> 00:03:42.006
is that changes to the runtime state of the system

79
00:03:42.006 --> 00:03:46.008
are only applied by agents running in the system.

80
00:03:46.008 --> 00:03:49.007
The need for external access to the system

81
00:03:49.007 --> 00:03:52.008
through tolls like SSH is eliminated.

82
00:03:52.008 --> 00:03:56.007
And it restricts how we make changes to a single method.

83
00:03:56.007 --> 00:04:01.003
And that's what allows us to get rid of those surprises.

84
00:04:01.003 --> 00:04:03.006
So, those are some of the high level benefits

85
00:04:03.006 --> 00:04:07.004
that draw organizations to a GitOps approach.

86
00:04:07.004 --> 00:04:09.003
Next, we'll start to unpack

87
00:04:09.003 --> 00:04:11.005
the underlying GitOps principles.

88
00:04:11.005 --> 00:04:16.000
So you are rock solid on the core GitOps concepts.

