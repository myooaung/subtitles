WEBVTT
1
00:00:00.004 --> 00:00:02.003
- [Presenter] When using GitOps in tandem

2
00:00:02.003 --> 00:00:04.001
with the Cloud Native approach,

3
00:00:04.001 --> 00:00:08.003
we rely upon container technologies to run our system.

4
00:00:08.003 --> 00:00:10.008
Containers are Linux-based technology

5
00:00:10.008 --> 00:00:13.000
that allows applications to be packaged

6
00:00:13.000 --> 00:00:17.003
with their dependencies so they can run in any environment.

7
00:00:17.003 --> 00:00:20.000
So let's take a step back and take a high level look

8
00:00:20.000 --> 00:00:23.005
at how software was traditionally operated.

9
00:00:23.005 --> 00:00:26.005
It was common to provision a server with an underlying OS

10
00:00:26.005 --> 00:00:29.001
where we would install the prerequisite software

11
00:00:29.001 --> 00:00:31.009
dependencies required to run our system.

12
00:00:31.009 --> 00:00:33.009
So this could be something like a JDK

13
00:00:33.009 --> 00:00:38.001
for a Java application or maybe an application server.

14
00:00:38.001 --> 00:00:41.003
We might also have configuration files on the server

15
00:00:41.003 --> 00:00:44.001
that our software needs to run.

16
00:00:44.001 --> 00:00:47.003
At first, we might build this on a local workstation

17
00:00:47.003 --> 00:00:49.002
and then we'd promote it to upper environments

18
00:00:49.002 --> 00:00:51.008
like development or production.

19
00:00:51.008 --> 00:00:54.008
That's where the problems can start to arise.

20
00:00:54.008 --> 00:00:56.005
For the software to run correctly,

21
00:00:56.005 --> 00:00:58.004
we need the environments to match.

22
00:00:58.004 --> 00:01:01.003
So all dependencies and configuration

23
00:01:01.003 --> 00:01:05.000
must be in place where the softwares ran.

24
00:01:05.000 --> 00:01:08.004
This problem can be solved using containers.

25
00:01:08.004 --> 00:01:12.000
Containers allow us to virtualize the operating system

26
00:01:12.000 --> 00:01:15.006
and supply key dependencies in a single packaging unit

27
00:01:15.006 --> 00:01:18.005
the application runs within.

28
00:01:18.005 --> 00:01:19.008
I'd like to say it this way.

29
00:01:19.008 --> 00:01:22.007
You package the software with its environment

30
00:01:22.007 --> 00:01:25.006
and that's what gets deployed.

31
00:01:25.006 --> 00:01:27.002
When working with containers,

32
00:01:27.002 --> 00:01:30.008
docker is the one technology that stands above the rest.

33
00:01:30.008 --> 00:01:33.005
It's a full platform focused on helping us build

34
00:01:33.005 --> 00:01:35.002
and run containers.

35
00:01:35.002 --> 00:01:38.000
Let's talk a little bit about how it works.

36
00:01:38.000 --> 00:01:39.009
It starts by building a docker file

37
00:01:39.009 --> 00:01:41.006
where we specify the instructions

38
00:01:41.006 --> 00:01:44.003
for how to build a container image.

39
00:01:44.003 --> 00:01:48.003
A container image is a template for building a container.

40
00:01:48.003 --> 00:01:49.006
When we build an image,

41
00:01:49.006 --> 00:01:52.008
it gets stored in an image registry.

42
00:01:52.008 --> 00:01:54.004
From the image registry,

43
00:01:54.004 --> 00:01:58.003
we pull images to run on the container runtime

44
00:01:58.003 --> 00:02:01.003
where the containers are executing our software

45
00:02:01.003 --> 00:02:04.006
in an isolated process space.

46
00:02:04.006 --> 00:02:06.008
Here's a helpful analogy if you're familiar

47
00:02:06.008 --> 00:02:09.002
with object-oriented development.

48
00:02:09.002 --> 00:02:10.006
You can think of the Docker file

49
00:02:10.006 --> 00:02:13.001
as the source code for a container.

50
00:02:13.001 --> 00:02:16.009
The container image as a class and the running container

51
00:02:16.009 --> 00:02:20.002
has an instance of the class.

52
00:02:20.002 --> 00:02:21.009
When we build a container image,

53
00:02:21.009 --> 00:02:24.008
it includes everything the software needs to run.

54
00:02:24.008 --> 00:02:28.004
So it can be run as a container on any host

55
00:02:28.004 --> 00:02:31.002
where a container runtime is installed

56
00:02:31.002 --> 00:02:34.002
that's the beauty of containerized applications.

57
00:02:34.002 --> 00:02:36.009
They're extremely portable and they transfer nicely

58
00:02:36.009 --> 00:02:40.008
between different environments and data centers.

59
00:02:40.008 --> 00:02:43.002
For the GitOps model operating software

60
00:02:43.002 --> 00:02:45.009
in containers provides many benefits.

61
00:02:45.009 --> 00:02:47.007
Because containers are lighter weight

62
00:02:47.007 --> 00:02:50.001
and abstracting from the host environment,

63
00:02:50.001 --> 00:02:53.004
it's easier for an automated agent to quickly spin them up

64
00:02:53.004 --> 00:02:55.007
or stop them, whatever it needs to do

65
00:02:55.007 --> 00:02:59.001
to match the desired state in Git.

66
00:02:59.001 --> 00:03:01.001
That's why containers are important

67
00:03:01.001 --> 00:03:03.001
for GitOps implementations.

68
00:03:03.001 --> 00:03:06.003
But we'll need to explore another related practice named

69
00:03:06.003 --> 00:03:10.000
orchestration in our next lesson to get the full picture.

