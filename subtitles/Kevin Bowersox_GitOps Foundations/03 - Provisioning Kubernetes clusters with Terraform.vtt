WEBVTT
1
00:00:00.005 --> 00:00:02.005
- [Instructor] In this lesson, we'll use Terraform

2
00:00:02.005 --> 00:00:06.005
to provision a managed Kubernetes cluster on Azure.

3
00:00:06.005 --> 00:00:08.004
To provision the AKS cluster,

4
00:00:08.004 --> 00:00:11.002
we'll need the Terraform and Azure Sealife

5
00:00:11.002 --> 00:00:13.002
installed on our workstation.

6
00:00:13.002 --> 00:00:15.008
Now I've already installed the Azure CLI,

7
00:00:15.008 --> 00:00:19.006
so let's just go ahead and install Terraforms.

8
00:00:19.006 --> 00:00:22.004
To do that, we can click on the getting started path

9
00:00:22.004 --> 00:00:27.000
on the Terraform homepage and then select Microsoft Azure.

10
00:00:27.000 --> 00:00:31.000
Here you'll find the instructions to install Terraform.

11
00:00:31.000 --> 00:00:32.009
If we scroll down on this page,

12
00:00:32.009 --> 00:00:36.006
you'll see the instructions for various operating systems.

13
00:00:36.006 --> 00:00:40.004
Now I'm currently using Linux, so I'll click on that option,

14
00:00:40.004 --> 00:00:42.005
and here you can see the commands

15
00:00:42.005 --> 00:00:46.000
to install Terraform on Linux.

16
00:00:46.000 --> 00:00:48.000
Now I've already taken these commands

17
00:00:48.000 --> 00:00:50.003
and placed them into a script

18
00:00:50.003 --> 00:00:53.002
that's within my Terraform directory

19
00:00:53.002 --> 00:00:55.009
inside the environment repository.

20
00:00:55.009 --> 00:00:57.003
You can see it there.

21
00:00:57.003 --> 00:01:01.000
Let me go ahead and I'll run the installation script

22
00:01:01.000 --> 00:01:04.004
and that will install Terraform on my machine.

23
00:01:04.004 --> 00:01:06.004
Now there's instructions for both

24
00:01:06.004 --> 00:01:09.005
Azure CLI and Terraform installations

25
00:01:09.005 --> 00:01:11.005
within the working files for the course.

26
00:01:11.005 --> 00:01:15.006
So just head out there and follow those.

27
00:01:15.006 --> 00:01:17.006
It looks like Terraform is installed,

28
00:01:17.006 --> 00:01:20.007
let's go ahead, just confirm that.

29
00:01:20.007 --> 00:01:22.007
And now let's just take a look

30
00:01:22.007 --> 00:01:25.001
at what we're going to do with Terraform.

31
00:01:25.001 --> 00:01:30.004
So we can look at the aks k8 cluster.tf file,

32
00:01:30.004 --> 00:01:35.003
and this is going to contain the declarative description

33
00:01:35.003 --> 00:01:38.001
of the resources we would like to provision

34
00:01:38.001 --> 00:01:40.008
on Azure with Terraform.

35
00:01:40.008 --> 00:01:43.000
So a couple things to note here,

36
00:01:43.000 --> 00:01:47.001
you'll notice that it installs the Terraform provider,

37
00:01:47.001 --> 00:01:50.003
and then it's going to create a resource group

38
00:01:50.003 --> 00:01:53.005
and the resource group is going to get a random pet name.

39
00:01:53.005 --> 00:01:56.009
So it might be a little bit comical what we get here.

40
00:01:56.009 --> 00:01:58.003
Now, the important part

41
00:01:58.003 --> 00:02:01.009
is the provisioning of the Kubernetes cluster.

42
00:02:01.009 --> 00:02:04.004
The cluster is going to have two nodes

43
00:02:04.004 --> 00:02:07.005
and here you can see some information about it sizing

44
00:02:07.005 --> 00:02:09.005
and the type of nodes.

45
00:02:09.005 --> 00:02:11.005
Now, another thing that we have to do

46
00:02:11.005 --> 00:02:16.009
is provide credentials for the Terraform Azure provider

47
00:02:16.009 --> 00:02:20.006
to connect to the Azure cloud securely.

48
00:02:20.006 --> 00:02:25.006
So we'll have to grab those credentials using the Azure CLI

49
00:02:25.006 --> 00:02:29.003
and put them into some configuration.

50
00:02:29.003 --> 00:02:31.005
All right, let's get to work on all this.

51
00:02:31.005 --> 00:02:34.006
It starts first by logging into Azure.

52
00:02:34.006 --> 00:02:46.008
So I'll go ahead and use the Azure CLI to log in.

53
00:02:46.008 --> 00:02:49.006
That should be done.

54
00:02:49.006 --> 00:02:51.006
Now we're going to create

55
00:02:51.006 --> 00:02:54.005
an active directory service account

56
00:02:54.005 --> 00:02:57.008
in order for the Azure provider

57
00:02:57.008 --> 00:03:01.006
to connect to the Azure cloud platform.

58
00:03:01.006 --> 00:03:04.004
So here we can just use Azure CLI for that,

59
00:03:04.004 --> 00:03:05.005
and it's going to give us

60
00:03:05.005 --> 00:03:08.006
two pieces of important information.

61
00:03:08.006 --> 00:03:12.008
First is the appid, go ahead and copy that.

62
00:03:12.008 --> 00:03:15.007
And then we need to paste that into

63
00:03:15.007 --> 00:03:18.004
our Terraform.tfVARs file,

64
00:03:18.004 --> 00:03:21.007
you'll remember how the variables work in Terraform.

65
00:03:21.007 --> 00:03:27.001
So just paste the appid here and now let's return

66
00:03:27.001 --> 00:03:34.002
back to the terminal and we'll grab the password.

67
00:03:34.002 --> 00:03:39.002
Paste that right here and then hit save.

68
00:03:39.002 --> 00:03:42.009
So we have our credentials,

69
00:03:42.009 --> 00:03:45.005
the next thing that we're going to do is initiate

70
00:03:45.005 --> 00:03:47.004
our Terraform workspace,

71
00:03:47.004 --> 00:03:50.002
so use the Terraform init command,

72
00:03:50.002 --> 00:03:52.006
and that's going to pull down

73
00:03:52.006 --> 00:03:55.009
the Azure provider for Terraform.

74
00:03:55.009 --> 00:03:59.001
And then from here, we just run a Terraform apply,

75
00:03:59.001 --> 00:04:01.004
and this is going to cause Terraform

76
00:04:01.004 --> 00:04:03.006
to take that desired state

77
00:04:03.006 --> 00:04:07.001
and make it come to life on the Azure cloud,

78
00:04:07.001 --> 00:04:10.009
through the Azure provider for Terraform.

79
00:04:10.009 --> 00:04:14.004
So it builds out a plan and then we have to agree to it.

80
00:04:14.004 --> 00:04:18.004
So just type yes, and then it's going to get to work.

81
00:04:18.004 --> 00:04:21.005
You can see it's selected picked mosquito

82
00:04:21.005 --> 00:04:26.002
for our cluster name, so that should be interesting.

83
00:04:26.002 --> 00:04:27.009
Looking at the console output,

84
00:04:27.009 --> 00:04:31.000
I can see that it already created the resource group.

85
00:04:31.000 --> 00:04:34.002
So let's head over to Azure

86
00:04:34.002 --> 00:04:37.007
and just take a look at that resource.

87
00:04:37.007 --> 00:04:41.008
Yep, there it is.

88
00:04:41.008 --> 00:04:44.002
It looks like Terraform has finished provisioning

89
00:04:44.002 --> 00:04:46.002
the resources out in Azure.

90
00:04:46.002 --> 00:04:49.004
Let's go take a peak one more time,

91
00:04:49.004 --> 00:04:53.005
and let me go ahead and refresh here.

92
00:04:53.005 --> 00:04:55.008
There, we can see our resource group,

93
00:04:55.008 --> 00:04:59.003
we can see another resource group for some networking

94
00:04:59.003 --> 00:05:03.007
and there's our new Kubernetes cluster, excellent.

95
00:05:03.007 --> 00:05:05.001
Let's do one more thing.

96
00:05:05.001 --> 00:05:07.003
We're going to return to the terminal

97
00:05:07.003 --> 00:05:11.001
and we're going to use Azure CLI to connect kube CTL

98
00:05:11.001 --> 00:05:13.003
to our newly created cluster.

99
00:05:13.003 --> 00:05:16.001
To do that, it uses some of the Terraform output

100
00:05:16.001 --> 00:05:18.007
about the provisioned resources.

101
00:05:18.007 --> 00:05:21.003
All right, now, kube CTL should be connected,

102
00:05:21.003 --> 00:05:26.008
let's just test that out, and it looks like it's good.

103
00:05:26.008 --> 00:05:28.001
The reason we need to do that

104
00:05:28.001 --> 00:05:31.009
is because some of our other tools like flux and flagger

105
00:05:31.009 --> 00:05:35.001
may need that connection to Azure.

106
00:05:35.001 --> 00:05:36.003
So for example,

107
00:05:36.003 --> 00:05:39.006
when we provision out an operator on the cluster,

108
00:05:39.006 --> 00:05:42.002
we need that connection.

109
00:05:42.002 --> 00:05:45.004
It's kind of a chicken and an egg scenario sometimes

110
00:05:45.004 --> 00:05:48.008
when standing up your GitHubs tools.

111
00:05:48.008 --> 00:05:51.002
So that was a glimpse at how we can use

112
00:05:51.002 --> 00:05:53.005
a GitHubs tool like Terraform

113
00:05:53.005 --> 00:05:56.006
to handle the provisioning of a new Kubernetes cluster

114
00:05:56.006 --> 00:06:00.007
using declarative configuration stored in git.

115
00:06:00.007 --> 00:06:04.001
Now we're going to move on to provisioning outflux

116
00:06:04.001 --> 00:06:08.000
on this cluster so we can continue our GitHubs approach.

