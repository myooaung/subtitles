WEBVTT
1
00:00:00.005 --> 00:00:02.001
- [Instructor] It's helpful to see the GitOps

2
00:00:02.001 --> 00:00:03.007
principles in action.

3
00:00:03.007 --> 00:00:07.002
So I'm going to demonstrate the first two principles using a

4
00:00:07.002 --> 00:00:09.008
tool named Argo CD.

5
00:00:09.008 --> 00:00:14.002
Argo CD is a continuous delivery tool in the GitOps space.

6
00:00:14.002 --> 00:00:17.008
It's used for operations of your containerized application

7
00:00:17.008 --> 00:00:19.003
on Kubernetes.

8
00:00:19.003 --> 00:00:21.005
Let's log in and take a look around.

9
00:00:21.005 --> 00:00:26.000
So I'm going to enter my credentials and upon logging in

10
00:00:26.000 --> 00:00:29.008
you'll notice one of the best features of Argo CD.

11
00:00:29.008 --> 00:00:33.004
It has an intuitive user interface that makes it easy

12
00:00:33.004 --> 00:00:37.000
to observe GitOps workflows as they unfold.

13
00:00:37.000 --> 00:00:40.000
Now, currently we're not managing any applications

14
00:00:40.000 --> 00:00:44.009
on Argo CD, but we can use our first two GitOps principles,

15
00:00:44.009 --> 00:00:49.008
to get Argo CD connected to the systems desired state stored

16
00:00:49.008 --> 00:00:52.003
declaratively within Git.

17
00:00:52.003 --> 00:00:55.002
To do that, we click on the gear icon

18
00:00:55.002 --> 00:00:59.000
within the sidebar to enter Argo settings.

19
00:00:59.000 --> 00:01:02.006
Here we can configure a connection to a Git repository,

20
00:01:02.006 --> 00:01:06.000
our single source of truth that holds our systems

21
00:01:06.000 --> 00:01:08.001
declarative configuration.

22
00:01:08.001 --> 00:01:11.006
That configuration is going to determine what resources

23
00:01:11.006 --> 00:01:15.002
are deployed on the Kubernetes cluster.

24
00:01:15.002 --> 00:01:17.008
So click on the repositories option.

25
00:01:17.008 --> 00:01:21.006
And then within the repository section,

26
00:01:21.006 --> 00:01:26.002
we're going to use the HTTPS option and you'll notice that

27
00:01:26.002 --> 00:01:31.006
it expects us to provide the URL of a Git Repository

28
00:01:31.006 --> 00:01:34.004
that holds those Kubernetes manifests.

29
00:01:34.004 --> 00:01:36.007
Now, this should sound familiar.

30
00:01:36.007 --> 00:01:39.008
If we navigate back to GitHub,

31
00:01:39.008 --> 00:01:43.007
you'll remember that our environment repository holds

32
00:01:43.007 --> 00:01:46.004
the infrastructure code that we forked

33
00:01:46.004 --> 00:01:48.002
earlier in the course.

34
00:01:48.002 --> 00:01:51.001
Now to spotlight the first GitOps principle,

35
00:01:51.001 --> 00:01:55.000
let's take a peek at one of the Kubernetes manifests stored

36
00:01:55.000 --> 00:01:57.002
inside the Argo directory.

37
00:01:57.002 --> 00:02:01.004
So here you can see three manifests and if we inspect the

38
00:02:01.004 --> 00:02:07.003
deployment.yaml file, you'll notice that it declaratively

39
00:02:07.003 --> 00:02:10.006
stores the description of our system.

40
00:02:10.006 --> 00:02:14.007
It describes what image we'd like to run in the pods

41
00:02:14.007 --> 00:02:19.000
and how many instances of that image.

42
00:02:19.000 --> 00:02:21.008
Now, if we navigate back a directory,

43
00:02:21.008 --> 00:02:24.006
we'll see the three other manifests and together

44
00:02:24.006 --> 00:02:29.003
those manifests make up the desired state of our system.

45
00:02:29.003 --> 00:02:34.002
Let's hop up one more directory and grab the URL

46
00:02:34.002 --> 00:02:39.004
to this repository because we'll need this URL

47
00:02:39.004 --> 00:02:43.009
to connect Argo CD to the GitHub Repo

48
00:02:43.009 --> 00:02:48.002
and Argo CD is going to treat this repository

49
00:02:48.002 --> 00:02:52.007
as the single source of truth for our application.

50
00:02:52.007 --> 00:02:55.002
All right, so back in Argo CD,

51
00:02:55.002 --> 00:02:59.001
we can go ahead and paste the URL of the repository.

52
00:02:59.001 --> 00:03:01.004
Now, since that repository is public,

53
00:03:01.004 --> 00:03:04.006
we do not need to enter any credentials,

54
00:03:04.006 --> 00:03:08.000
but if this were a private GitHub Repository,

55
00:03:08.000 --> 00:03:10.002
you would need to enter your GitHub ID

56
00:03:10.002 --> 00:03:12.007
and a personal access token.

57
00:03:12.007 --> 00:03:15.005
Don't get tripped up here by using your GitHub password,

58
00:03:15.005 --> 00:03:17.002
that's a common mistake.

59
00:03:17.002 --> 00:03:20.000
All right, so go ahead and click on Connect

60
00:03:20.000 --> 00:03:23.001
to create the connection to the repository.

61
00:03:23.001 --> 00:03:26.007
And that illustrates our second principle, because that

62
00:03:26.007 --> 00:03:30.002
Git Repository serves as the desired state.

63
00:03:30.002 --> 00:03:33.000
It's the single source of truth for what we want

64
00:03:33.000 --> 00:03:35.002
to run on this cluster.

65
00:03:35.002 --> 00:03:39.003
We'll only build out the system based on the desired state

66
00:03:39.003 --> 00:03:42.001
stored in this repository.

67
00:03:42.001 --> 00:03:45.005
Okay, so that covers the first two principles of declarative

68
00:03:45.005 --> 00:03:49.002
configuration and Git as the single source of truth.

69
00:03:49.002 --> 00:03:50.002
In the next lesson,

70
00:03:50.002 --> 00:03:52.008
we'll pick up from here and see how the remaining

71
00:03:52.008 --> 00:03:57.000
GitOps principles play into the runtime state of the system.

