WEBVTT
1
00:00:00.005 --> 00:00:02.000
- [Instructor] Our third GitOps principle

2
00:00:02.000 --> 00:00:04.008
focuses on automating deployment of changes

3
00:00:04.008 --> 00:00:07.006
to the runtime state of the system.

4
00:00:07.006 --> 00:00:08.009
To see it in action,

5
00:00:08.009 --> 00:00:13.000
let's deploy the systems desired state into the cluster,

6
00:00:13.000 --> 00:00:17.003
using the Argo CD operator that runs inside of it.

7
00:00:17.003 --> 00:00:20.008
To start out, just click on the settings on the sidebar

8
00:00:20.008 --> 00:00:24.007
and then navigate into the repository section.

9
00:00:24.007 --> 00:00:26.009
From here, you can click on the ellipsis

10
00:00:26.009 --> 00:00:29.002
next to the Git repository

11
00:00:29.002 --> 00:00:32.002
and select create application.

12
00:00:32.002 --> 00:00:35.004
This brings up a form where we can provide more information

13
00:00:35.004 --> 00:00:39.003
about our application we'd like to deploy into the cluster,

14
00:00:39.003 --> 00:00:42.001
the repository holding our desired state

15
00:00:42.001 --> 00:00:44.001
and the cluster itself.

16
00:00:44.001 --> 00:00:47.002
So let's start out by naming our application.

17
00:00:47.002 --> 00:00:50.009
I'm going to call it, GitOps foundations.

18
00:00:50.009 --> 00:00:53.000
You can place the application

19
00:00:53.000 --> 00:00:56.008
within the default project inside of Argo.

20
00:00:56.008 --> 00:01:00.002
Our next option sync policy is important.

21
00:01:00.002 --> 00:01:04.005
It determines whether Argo CD will automatically sync

22
00:01:04.005 --> 00:01:07.001
the runtime state, the cluster,

23
00:01:07.001 --> 00:01:10.002
with the desired state in Git.

24
00:01:10.002 --> 00:01:12.005
We would like that to happen automatically

25
00:01:12.005 --> 00:01:15.004
so go ahead and select that option.

26
00:01:15.004 --> 00:01:18.005
From there, you can scroll down to the source panel.

27
00:01:18.005 --> 00:01:22.008
You'll notice that the URL for our environment repository

28
00:01:22.008 --> 00:01:26.003
within GitHub is automatically populated

29
00:01:26.003 --> 00:01:28.005
for the repository URL.

30
00:01:28.005 --> 00:01:31.009
So that's where our infrastructure code lives.

31
00:01:31.009 --> 00:01:35.007
And you'll recall that we were interested in the Kubernetes

32
00:01:35.007 --> 00:01:39.007
manifest inside of the Argo directory.

33
00:01:39.007 --> 00:01:41.001
So I'm going to go ahead

34
00:01:41.001 --> 00:01:43.006
and specify that as the path,

35
00:01:43.006 --> 00:01:48.007
and that will tell Argo CD what directory to look inside of,

36
00:01:48.007 --> 00:01:53.005
within the repository for our Kubernetes manifests.

37
00:01:53.005 --> 00:01:57.000
Moving on, we can configure our cluster URL

38
00:01:57.000 --> 00:01:59.006
by just selecting the default option

39
00:01:59.006 --> 00:02:02.002
and then we need to provide a namespace

40
00:02:02.002 --> 00:02:05.003
that our application will run within.

41
00:02:05.003 --> 00:02:09.007
The namespace we're going to use is Argo_exercise.

42
00:02:09.007 --> 00:02:11.009
So once you've typed that in,

43
00:02:11.009 --> 00:02:15.006
Argo CD has all the information it needs

44
00:02:15.006 --> 00:02:20.002
to deploy our Kubernetes resources onto the cluster.

45
00:02:20.002 --> 00:02:21.006
To start that process,

46
00:02:21.006 --> 00:02:23.006
just click on the create button

47
00:02:23.006 --> 00:02:27.001
and Argo CD will get to work.

48
00:02:27.001 --> 00:02:29.000
You can see it's pretty fast

49
00:02:29.000 --> 00:02:31.005
and it's already taken the desired state

50
00:02:31.005 --> 00:02:34.002
and applied it onto the cluster.

51
00:02:34.002 --> 00:02:35.004
Now let's take a peek

52
00:02:35.004 --> 00:02:39.005
at one of the Kubernetes resources that was deployed.

53
00:02:39.005 --> 00:02:40.008
Click on this service,

54
00:02:40.008 --> 00:02:44.007
and we can get some more information about that object.

55
00:02:44.007 --> 00:02:48.003
You'll notice inside of this panel that Argo CD

56
00:02:48.003 --> 00:02:51.004
has provided the desired manifest.

57
00:02:51.004 --> 00:02:53.005
This is what was in Git,

58
00:02:53.005 --> 00:02:55.006
and then it has the live manifest.

59
00:02:55.006 --> 00:02:57.009
And this is what's running in the cluster

60
00:02:57.009 --> 00:03:00.006
and what's stored in at CD.

61
00:03:00.006 --> 00:03:04.004
Now I want to call your attention to the desired manifest.

62
00:03:04.004 --> 00:03:08.002
This is specifying how we expose this application.

63
00:03:08.002 --> 00:03:12.008
It's via a service that has a node port of 30,000.

64
00:03:12.008 --> 00:03:15.004
So that's how we'll access the app

65
00:03:15.004 --> 00:03:16.006
and to do that,

66
00:03:16.006 --> 00:03:21.002
we need the IP address of a node in the cluster.

67
00:03:21.002 --> 00:03:25.001
So let's head over to the terminal

68
00:03:25.001 --> 00:03:28.004
and here we're going to use cube CTL

69
00:03:28.004 --> 00:03:30.007
to get a node in the cluster.

70
00:03:30.007 --> 00:03:32.008
I'll specify the dash O flag,

71
00:03:32.008 --> 00:03:34.008
and then I'll say wide.

72
00:03:34.008 --> 00:03:37.001
And once we execute that command,

73
00:03:37.001 --> 00:03:41.004
we can get the IP of the single node inside of our cluster.

74
00:03:41.004 --> 00:03:43.000
So go ahead and copy that

75
00:03:43.000 --> 00:03:46.007
and then inside of a new tab within our browser,

76
00:03:46.007 --> 00:03:51.002
we're going to paste the IP address of the node,

77
00:03:51.002 --> 00:03:53.006
and then we're going to place a colon

78
00:03:53.006 --> 00:03:56.001
and then port 30,000.

79
00:03:56.001 --> 00:03:58.002
And when we hit that URL,

80
00:03:58.002 --> 00:04:01.001
this is going to bring up our application.

81
00:04:01.001 --> 00:04:04.007
So you'll notice that we're running the first version

82
00:04:04.007 --> 00:04:06.006
of our container image,

83
00:04:06.006 --> 00:04:09.005
and you'll recall there's a second version

84
00:04:09.005 --> 00:04:11.005
of that container image.

85
00:04:11.005 --> 00:04:12.005
Let's go ahead

86
00:04:12.005 --> 00:04:16.003
and deploy that second version using a GitOps approach.

87
00:04:16.003 --> 00:04:19.003
Now, remember, according to GitOps principles,

88
00:04:19.003 --> 00:04:21.007
Git is the single source of truth

89
00:04:21.007 --> 00:04:24.009
and we need to drive operations through Git,

90
00:04:24.009 --> 00:04:27.002
and let the automation deploy it.

91
00:04:27.002 --> 00:04:30.008
So that means we're heading over to GitHub.

92
00:04:30.008 --> 00:04:34.005
Within GitHub, we can access the infrastructure code

93
00:04:34.005 --> 00:04:37.003
inside of the environment repository.

94
00:04:37.003 --> 00:04:38.008
So go ahead and click on that

95
00:04:38.008 --> 00:04:42.004
and then navigate into the Argo directory

96
00:04:42.004 --> 00:04:45.008
and here's where we find our Kubernetes manifests.

97
00:04:45.008 --> 00:04:49.007
Click on the manifest for the deployment

98
00:04:49.007 --> 00:04:53.000
and inside of here, you'll notice that the declarative

99
00:04:53.000 --> 00:04:57.002
configuration is pointing to version one dot O

100
00:04:57.002 --> 00:04:59.006
of the container image.

101
00:04:59.006 --> 00:05:03.005
So here's where the change starts with the GitOps workflow.

102
00:05:03.005 --> 00:05:05.001
Now to make this change,

103
00:05:05.001 --> 00:05:10.002
I'm going to directly edit this file within GitHub.

104
00:05:10.002 --> 00:05:12.004
Now in a real world GitOps workflow,

105
00:05:12.004 --> 00:05:15.004
this would always be done through a pull request.

106
00:05:15.004 --> 00:05:17.001
I'm just using a direct commit

107
00:05:17.001 --> 00:05:19.004
to keep up the pace of the course.

108
00:05:19.004 --> 00:05:20.005
So I'll go ahead

109
00:05:20.005 --> 00:05:23.000
and change this over to the second version

110
00:05:23.000 --> 00:05:24.007
of the container image

111
00:05:24.007 --> 00:05:27.002
and then I'm going to commit the changes

112
00:05:27.002 --> 00:05:31.001
and then we'll navigate back to Argo

113
00:05:31.001 --> 00:05:34.007
and wait for those changes to be deployed

114
00:05:34.007 --> 00:05:39.000
across the cluster by the operator.

115
00:05:39.000 --> 00:05:41.009
There we can see the operator begins the sync

116
00:05:41.009 --> 00:05:44.009
and it making what's running in the cluster

117
00:05:44.009 --> 00:05:46.008
match what's in Git.

118
00:05:46.008 --> 00:05:48.009
So it's applying our changes.

119
00:05:48.009 --> 00:05:51.006
There you can see it completed the sync

120
00:05:51.006 --> 00:05:53.000
and if we take a look,

121
00:05:53.000 --> 00:05:56.003
the second version of the container images running,

122
00:05:56.003 --> 00:06:01.002
we head over to the browser to verify that.

123
00:06:01.002 --> 00:06:04.002
So let's navigate to our application

124
00:06:04.002 --> 00:06:07.005
and here I'm going to clear the cache first,

125
00:06:07.005 --> 00:06:11.000
that way we get a good hit on the app.

126
00:06:11.000 --> 00:06:13.002
And then we'll go ahead, hit the URL.

127
00:06:13.002 --> 00:06:17.008
And you'll notice that version 2.0 is up and running,

128
00:06:17.008 --> 00:06:20.006
and that's going to wrap up our demonstration

129
00:06:20.006 --> 00:06:22.007
of automated change deployment,

130
00:06:22.007 --> 00:06:25.000
which is our third GitOps principle.

