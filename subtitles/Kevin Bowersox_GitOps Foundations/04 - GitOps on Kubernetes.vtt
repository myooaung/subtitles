WEBVTT
1
00:00:00.005 --> 00:00:03.000
- [Instructor] Using a container orchestration platform

2
00:00:03.000 --> 00:00:04.003
is another best practice

3
00:00:04.003 --> 00:00:07.003
commonly paired with the GitOps approach.

4
00:00:07.003 --> 00:00:09.006
When organizations embrace containers,

5
00:00:09.006 --> 00:00:14.001
they quickly realize that things get complicated real quick.

6
00:00:14.001 --> 00:00:16.009
This is because the disposable nature of containers

7
00:00:16.009 --> 00:00:21.000
makes them more challenging to operate at any sort of scale.

8
00:00:21.000 --> 00:00:22.005
They're meant to spin up and down

9
00:00:22.005 --> 00:00:24.007
whenever the situation calls for it.

10
00:00:24.007 --> 00:00:26.006
And with microservice architectures,

11
00:00:26.006 --> 00:00:30.006
systems are composed of many services running in containers.

12
00:00:30.006 --> 00:00:33.006
So there's typically a lot of them to manage.

13
00:00:33.006 --> 00:00:36.009
It gets messy and the complexity increases rapidly

14
00:00:36.009 --> 00:00:38.002
as the workload grows

15
00:00:38.002 --> 00:00:41.002
and the underlying footprint of host machines

16
00:00:41.002 --> 00:00:44.006
expands to handle the number of containers.

17
00:00:44.006 --> 00:00:46.007
Traditional practices that we might have used

18
00:00:46.007 --> 00:00:49.002
to administer systems running on virtual machines

19
00:00:49.002 --> 00:00:52.006
just don't work well for containers.

20
00:00:52.006 --> 00:00:54.007
Luckily, this problem was recognized

21
00:00:54.007 --> 00:00:57.007
by early adopters of containers, such as Google,

22
00:00:57.007 --> 00:00:59.001
who built an open source,

23
00:00:59.001 --> 00:01:03.008
their own container orchestration platform named Kubernetes.

24
00:01:03.008 --> 00:01:05.005
Orchestrators like Kubernetes

25
00:01:05.005 --> 00:01:08.001
are used to manage container operations

26
00:01:08.001 --> 00:01:11.006
over a series of worker nodes that run containers

27
00:01:11.006 --> 00:01:15.006
in another packaging format known as a pod.

28
00:01:15.006 --> 00:01:18.007
Let's go a level or two deeper with Kubernetes.

29
00:01:18.007 --> 00:01:20.004
It with the control plane

30
00:01:20.004 --> 00:01:24.000
that controls the operations of the cluster.

31
00:01:24.000 --> 00:01:27.006
Within the control plane, there's four major components.

32
00:01:27.006 --> 00:01:31.008
An API that accepts commands to change the cluster state.

33
00:01:31.008 --> 00:01:33.009
A data store named etcd

34
00:01:33.009 --> 00:01:36.003
that stores the state of the cluster.

35
00:01:36.003 --> 00:01:39.003
A scheduler that determines where to place pods.

36
00:01:39.003 --> 00:01:42.003
And a controller that monitors cluster state,

37
00:01:42.003 --> 00:01:45.003
and adjusts it for any deviations.

38
00:01:45.003 --> 00:01:46.009
To manage the worker nodes,

39
00:01:46.009 --> 00:01:50.003
the control plane interacts with an agent known as a kubelet

40
00:01:50.003 --> 00:01:53.002
that runs on each worker node in the cluster.

41
00:01:53.002 --> 00:01:55.006
The kubelet is responsible for getting pods

42
00:01:55.006 --> 00:02:00.001
running on the cluster as instructed by the control plane.

43
00:02:00.001 --> 00:02:03.009
Pods are just a basic building block for Kubernetes.

44
00:02:03.009 --> 00:02:06.003
There are other objects within Kubernetes

45
00:02:06.003 --> 00:02:09.008
that are used to represent the desired state of the cluster.

46
00:02:09.008 --> 00:02:11.008
Each of these objects can be described

47
00:02:11.008 --> 00:02:16.001
using a piece of configuration known as a spec.

48
00:02:16.001 --> 00:02:17.006
Here's an example of a spec

49
00:02:17.006 --> 00:02:21.001
you'll find within the working files stored on GitHub.

50
00:02:21.001 --> 00:02:23.006
This spec describes a deployment object

51
00:02:23.006 --> 00:02:26.002
that indicates three replicas of a pod

52
00:02:26.002 --> 00:02:29.001
containing the GitOps foundation's container

53
00:02:29.001 --> 00:02:32.003
should be made available within the cluster.

54
00:02:32.003 --> 00:02:34.008
Object specs for Kubernetes can be stored

55
00:02:34.008 --> 00:02:37.003
in files known as manifests.

56
00:02:37.003 --> 00:02:40.003
Manifests can use either a YAML or JSON format

57
00:02:40.003 --> 00:02:42.002
to describe the object.

58
00:02:42.002 --> 00:02:45.006
You'll mostly see these written in YAML.

59
00:02:45.006 --> 00:02:48.008
Cloud native applications deployed on top of Kubernetes

60
00:02:48.008 --> 00:02:51.001
are a perfect fit for GitOps.

61
00:02:51.001 --> 00:02:53.000
As you saw, Kubernetes objects

62
00:02:53.000 --> 00:02:56.006
can be managed almost entirely from declarative manifests.

63
00:02:56.006 --> 00:02:57.008
So, we can use them

64
00:02:57.008 --> 00:03:01.006
to store the desired state of our cluster within Git.

65
00:03:01.006 --> 00:03:02.006
Within Kubernetes,

66
00:03:02.006 --> 00:03:05.002
there's also native support for convergence.

67
00:03:05.002 --> 00:03:08.000
So it stores these specs and has a mechanism

68
00:03:08.000 --> 00:03:11.009
to make sure the resources are deployed on the cluster.

69
00:03:11.009 --> 00:03:15.000
By introducing an operator into the Kubernetes cluster

70
00:03:15.000 --> 00:03:16.008
for continuous delivery,

71
00:03:16.008 --> 00:03:19.002
developers only need to interact with Git

72
00:03:19.002 --> 00:03:21.007
to manage deployment of these resources,

73
00:03:21.007 --> 00:03:24.008
making Git the single source of truth.

74
00:03:24.008 --> 00:03:27.000
Since changes are automatically applied

75
00:03:27.000 --> 00:03:29.000
in the cluster by the operator,

76
00:03:29.000 --> 00:03:31.007
the workflow becomes simplified for developers.

77
00:03:31.007 --> 00:03:34.005
And it allows them to deliver changes faster

78
00:03:34.005 --> 00:03:38.003
without sacrificing the stability of their system.

79
00:03:38.003 --> 00:03:41.007
GitOps is much harder without a platform like Kubernetes

80
00:03:41.007 --> 00:03:43.008
that can quickly spin up these workloads

81
00:03:43.008 --> 00:03:47.000
based upon a declarative configuration.

82
00:03:47.000 --> 00:03:51.003
And that's why popular GitOps tools target the platform.

83
00:03:51.003 --> 00:03:53.001
So that's the big takeaway.

84
00:03:53.001 --> 00:03:54.008
The question is frequently asked

85
00:03:54.008 --> 00:03:57.005
if Kubernetes is necessary for GitOps.

86
00:03:57.005 --> 00:03:59.001
Technically, no.

87
00:03:59.001 --> 00:04:01.009
Kubernetes isn't requirement for GitOps.

88
00:04:01.009 --> 00:04:04.009
But it fits so well within the operational model

89
00:04:04.009 --> 00:04:07.005
that most of today's GitOps implementations

90
00:04:07.005 --> 00:04:09.000
are centered around it.

