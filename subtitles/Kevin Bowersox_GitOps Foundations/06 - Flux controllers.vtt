WEBVTT
1
00:00:00.005 --> 00:00:02.006
- [Presenter] The controllers inside a Flux handle

2
00:00:02.006 --> 00:00:04.009
all of it's GitOps operations.

3
00:00:04.009 --> 00:00:06.009
So it's important to understand them.

4
00:00:06.009 --> 00:00:10.006
Let's talk a little bit more about what they do.

5
00:00:10.006 --> 00:00:12.007
At their core, control work together

6
00:00:12.007 --> 00:00:16.000
within Flux to reconcile a cluster's runtime state

7
00:00:16.000 --> 00:00:19.005
with the desired state.

8
00:00:19.005 --> 00:00:22.001
The Flux controllers are an implementation

9
00:00:22.001 --> 00:00:25.001
of a Kubernetes controller pattern.

10
00:00:25.001 --> 00:00:28.002
This pattern uses a control loop along

11
00:00:28.002 --> 00:00:29.009
with custom resource definitions

12
00:00:29.009 --> 00:00:33.009
to manage an aspect of cluster state.

13
00:00:33.009 --> 00:00:37.002
This allows us to build Yammel manifest specifically

14
00:00:37.002 --> 00:00:39.007
for Flux custom resource definitions

15
00:00:39.007 --> 00:00:43.000
to have them applied inside the cluster.

16
00:00:43.000 --> 00:00:44.009
The controllers used by Flux

17
00:00:44.009 --> 00:00:47.000
are part of a closely related project

18
00:00:47.000 --> 00:00:49.007
known as the GitOps toolkit.

19
00:00:49.007 --> 00:00:52.004
This project contains loosely coupled tools

20
00:00:52.004 --> 00:00:56.003
for building continuous delivery platforms.

21
00:00:56.003 --> 00:00:59.000
Inside of the toolkit, you'll find these controllers

22
00:00:59.000 --> 00:01:01.006
that can be used with Flux.

23
00:01:01.006 --> 00:01:04.008
The source customize in-home controllers

24
00:01:04.008 --> 00:01:06.008
are the core controllers that focus

25
00:01:06.008 --> 00:01:11.009
on reconciling declarative manifests inside of the cluster.

26
00:01:11.009 --> 00:01:15.002
The notification and image automation controllers

27
00:01:15.002 --> 00:01:17.002
provide some auxiliary tools

28
00:01:17.002 --> 00:01:20.006
that can notify you when something changes in Flux

29
00:01:20.006 --> 00:01:23.007
or that can automatically update your manifests

30
00:01:23.007 --> 00:01:28.002
based upon the availability of a freshly built image.

31
00:01:28.002 --> 00:01:30.005
Let's take a look at how controllers work

32
00:01:30.005 --> 00:01:33.006
within in flux to enable GitOps workflows.

33
00:01:33.006 --> 00:01:36.006
To do this, we'll take a deeper look at two controllers,

34
00:01:36.006 --> 00:01:39.004
the source and customized controllers.

35
00:01:39.004 --> 00:01:42.004
These controllers can be used to sync resources

36
00:01:42.004 --> 00:01:45.001
on our cluster with Kubernetes manifests

37
00:01:45.001 --> 00:01:48.000
stored in our get repository.

38
00:01:48.000 --> 00:01:50.002
To start working with Flux and GitOps,

39
00:01:50.002 --> 00:01:52.003
we start by creating a definition

40
00:01:52.003 --> 00:01:54.009
for a source custom resource

41
00:01:54.009 --> 00:01:56.004
and committing that definition

42
00:01:56.004 --> 00:02:00.000
into our Flux configuration repository.

43
00:02:00.000 --> 00:02:03.006
From here, Flux will sync with its configuration repository

44
00:02:03.006 --> 00:02:06.008
and apply the new resource into its namespace

45
00:02:06.008 --> 00:02:09.003
within the cluster.

46
00:02:09.003 --> 00:02:11.007
The source will define the repository

47
00:02:11.007 --> 00:02:14.006
where the source controller can find the manifest

48
00:02:14.006 --> 00:02:19.008
with our desired state that we want running in the cluster.

49
00:02:19.008 --> 00:02:21.005
At this point, the source controller

50
00:02:21.005 --> 00:02:24.000
will pull the manifests and begin monitoring

51
00:02:24.000 --> 00:02:30.000
the repository defined in the source for any changes.

52
00:02:30.000 --> 00:02:33.006
Then another custom resource known as a customization

53
00:02:33.006 --> 00:02:35.002
enters the picture.

54
00:02:35.002 --> 00:02:38.009
The customization is used to reconcile a source

55
00:02:38.009 --> 00:02:41.008
with the running state in the cluster.

56
00:02:41.008 --> 00:02:44.002
We can generate it with the Flux CLI

57
00:02:44.002 --> 00:02:48.008
and commit it to the Flux configuration repository as well.

58
00:02:48.008 --> 00:02:52.004
Flux will then sync with its configuration repository

59
00:02:52.004 --> 00:02:54.007
and the new customization will be applied

60
00:02:54.007 --> 00:02:57.001
within the cluster.

61
00:02:57.001 --> 00:02:59.006
Once supplied, the customization begins

62
00:02:59.006 --> 00:03:02.000
to observe the running state of the cluster

63
00:03:02.000 --> 00:03:05.001
and it compares it with its associated source

64
00:03:05.001 --> 00:03:08.004
that is provided by the source controller.

65
00:03:08.004 --> 00:03:11.003
If the customized controller notices a difference

66
00:03:11.003 --> 00:03:13.008
between the clusters containerized workloads

67
00:03:13.008 --> 00:03:17.006
and the desired state expressed in the manifest

68
00:03:17.006 --> 00:03:20.006
located inside the environment repository,

69
00:03:20.006 --> 00:03:24.001
it begins the reconciliation process.

70
00:03:24.001 --> 00:03:26.009
This process occurs by applying changes

71
00:03:26.009 --> 00:03:29.006
through the Kubernetes management API

72
00:03:29.006 --> 00:03:32.000
which will trigger the control plane to pull

73
00:03:32.000 --> 00:03:34.003
and deploy the right containerized workload

74
00:03:34.003 --> 00:03:37.002
to match the desired state.

75
00:03:37.002 --> 00:03:39.006
So that is a basic GitOps workflow

76
00:03:39.006 --> 00:03:42.006
established with Flux and its controllers.

77
00:03:42.006 --> 00:03:44.009
Luckily it's GitOps and we only need to know

78
00:03:44.009 --> 00:03:47.001
how to interact with Git.

79
00:03:47.001 --> 00:03:48.009
You'll see this in our next lesson

80
00:03:48.009 --> 00:03:52.000
as we get hands-on with this concept.

