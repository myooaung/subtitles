WEBVTT
1
00:00:01.000 --> 00:00:05.010
- In a client server architecture there is always a risk

2
00:00:05.010 --> 00:00:07.070
of a security vulnerability existing

3
00:00:07.070 --> 00:00:12.020
in the communication channel between the two systems.

4
00:00:12.020 --> 00:00:15.040
Because of the way TCPIP works,

5
00:00:15.040 --> 00:00:18.070
these communication channels are potential hotspots

6
00:00:18.070 --> 00:00:21.020
for attackers to exploit.

7
00:00:21.020 --> 00:00:25.010
The most common communication channel attack

8
00:00:25.010 --> 00:00:29.070
is the theft of sensitive information on the wire.

9
00:00:29.070 --> 00:00:33.010
An attacker who can gain access to the network

10
00:00:33.010 --> 00:00:36.040
of either the client or the server

11
00:00:36.040 --> 00:00:41.030
can potentially steal the information on that channel.

12
00:00:41.030 --> 00:00:45.000
Many businesses, for instance, provide free wifi,

13
00:00:45.000 --> 00:00:49.020
which is left open and unencrypted.

14
00:00:49.020 --> 00:00:51.070
This can become a hot bed of theft

15
00:00:51.070 --> 00:00:53.060
and your development team

16
00:00:53.060 --> 00:00:58.030
needs to proactively protect your customer.

17
00:00:58.030 --> 00:01:02.060
Unfortunately some users may set their devices

18
00:01:02.060 --> 00:01:07.040
to always trust and connect to public wifi systems,

19
00:01:07.040 --> 00:01:13.050
making the ability to spoof these SSIDs an attack vector.

20
00:01:13.050 --> 00:01:17.050
A spoofing attack is actually simple to prevent

21
00:01:17.050 --> 00:01:23.000
through the use of proper transport layer security, or TLS,

22
00:01:23.000 --> 00:01:26.080
because the attacker has to man in the middle

23
00:01:26.080 --> 00:01:29.050
TLS connections to steal the data,

24
00:01:29.050 --> 00:01:35.020
and your user will see browser warnings in this case.

25
00:01:35.020 --> 00:01:39.060
TLS is sometimes mistakenly referred to as SSL,

26
00:01:39.060 --> 00:01:42.010
or secure sockets layer.

27
00:01:42.010 --> 00:01:45.080
While they both serve as a cryptographic protocol

28
00:01:45.080 --> 00:01:50.050
that provides authentication and encryption between systems,

29
00:01:50.050 --> 00:01:53.070
the fact is that SSL has been deprecated

30
00:01:53.070 --> 00:01:56.090
and replaced by TLS.

31
00:01:56.090 --> 00:02:01.050
To set up TLS connections a valid certificate is signed

32
00:02:01.050 --> 00:02:04.080
by a trusted certificate authority.

33
00:02:04.080 --> 00:02:09.040
The certificate must be installed on the server side.

34
00:02:09.040 --> 00:02:14.010
The communication channel itself must be a secure one.

35
00:02:14.010 --> 00:02:16.070
Therefore, it's always a good practice

36
00:02:16.070 --> 00:02:22.080
to redirect all traffic from HTTP to HTTPS.

37
00:02:22.080 --> 00:02:27.000
If you choose to only accept HTTPS connections,

38
00:02:27.000 --> 00:02:29.080
you may frustrate your users.

39
00:02:29.080 --> 00:02:32.040
Always remember that if your security

40
00:02:32.040 --> 00:02:37.060
makes your site unusable it becomes ineffective.

41
00:02:37.060 --> 00:02:41.050
It is also important that your certificates are valid,

42
00:02:41.050 --> 00:02:44.090
trusted, and not expired.

43
00:02:44.090 --> 00:02:48.010
Tools like open SSL make this validation easy.

44
00:02:48.010 --> 00:02:51.070
In addition, you can build up processes

45
00:02:51.070 --> 00:02:55.090
to manage your certificates on a regular basis.

46
00:02:55.090 --> 00:02:59.020
Now when you control the actual code on the client side

47
00:02:59.020 --> 00:03:00.070
of the connection,

48
00:03:00.070 --> 00:03:04.010
you should always validate the certificate.

49
00:03:04.010 --> 00:03:05.090
This includes not only checking

50
00:03:05.090 --> 00:03:08.010
that it is a valid certificate

51
00:03:08.010 --> 00:03:12.030
but that it has not expired or been revoked.

52
00:03:12.030 --> 00:03:14.070
Each language and framework has tools

53
00:03:14.070 --> 00:03:17.090
around not only making TLS connections

54
00:03:17.090 --> 00:03:20.030
but doing the validation.

55
00:03:20.030 --> 00:03:24.000
Often developers skip that validation part.

56
00:03:24.000 --> 00:03:26.050
So make sure that you don't.

57
00:03:26.050 --> 00:03:29.000
This extra overhead is worth it,

58
00:03:29.000 --> 00:03:32.060
because if a certificate becomes compromised

59
00:03:32.060 --> 00:03:35.050
you have a way of protecting the client system

60
00:03:35.050 --> 00:03:38.030
from accepting a bad connection.

61
00:03:38.030 --> 00:03:43.010
Which again can cause a leak of sensitive data.

62
00:03:43.010 --> 00:03:47.030
Using secure communication channels wherever possible

63
00:03:47.030 --> 00:03:48.090
will dramatically increase

64
00:03:48.090 --> 00:03:52.070
the overall security on your systems,

65
00:03:52.070 --> 00:03:55.030
as well as improve your SEO results,

66
00:03:55.030 --> 00:03:59.000
since most of them weigh TLS connections heavier.

