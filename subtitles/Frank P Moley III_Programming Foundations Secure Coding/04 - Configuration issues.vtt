WEBVTT
1
00:00:01.000 --> 00:00:04.000
- A somewhat common theme should be identified

2
00:00:04.000 --> 00:00:05.070
by this point.

3
00:00:05.070 --> 00:00:10.000
We find that in many cases the process that make running,

4
00:00:10.000 --> 00:00:14.040
deploying and troubleshooting an application much easier

5
00:00:14.040 --> 00:00:18.050
can also be used to exploit an application.

6
00:00:18.050 --> 00:00:22.040
Configuration of our application is another such case.

7
00:00:22.040 --> 00:00:25.020
So what is configuration?

8
00:00:25.020 --> 00:00:29.060
To SANS for instance, secure configurations apply

9
00:00:29.060 --> 00:00:32.030
to the systems and servers.

10
00:00:32.030 --> 00:00:35.010
It's the software and operating systems

11
00:00:35.010 --> 00:00:37.090
the machines are running on.

12
00:00:37.090 --> 00:00:41.050
It's definitely critical to keep systems patched.

13
00:00:41.050 --> 00:00:43.090
But from a development perspective,

14
00:00:43.090 --> 00:00:45.080
this isn't configuration.

15
00:00:45.080 --> 00:00:49.040
When I talk about securing your configuration,

16
00:00:49.040 --> 00:00:52.090
I'm referring to the feature flags, options,

17
00:00:52.090 --> 00:00:57.070
and other data elements that your application needs to run,

18
00:00:57.070 --> 00:00:59.090
but they can be optionally configured

19
00:00:59.090 --> 00:01:02.080
at startup or runtime.

20
00:01:02.080 --> 00:01:05.020
Many times as developers,

21
00:01:05.020 --> 00:01:07.070
we want to soft rollout of features

22
00:01:07.070 --> 00:01:09.080
through the use of feature flags,

23
00:01:09.080 --> 00:01:12.030
or provide ways to put the application

24
00:01:12.030 --> 00:01:15.020
into a higher state of logging.

25
00:01:15.020 --> 00:01:19.090
Inherently, these features are not bad on their own,

26
00:01:19.090 --> 00:01:24.010
however they can expose the system.

27
00:01:24.010 --> 00:01:27.040
For instance, if you're developing a feature

28
00:01:27.040 --> 00:01:31.040
and want to roll it out to beta testers that you trust,

29
00:01:31.040 --> 00:01:34.040
you may put a feature flag in place.

30
00:01:34.040 --> 00:01:37.050
Your beta testers have the documentation

31
00:01:37.050 --> 00:01:39.080
to turn that feature on.

32
00:01:39.080 --> 00:01:44.040
But you acknowledge that it may still have bugs.

33
00:01:44.040 --> 00:01:48.010
If those bugs expose the system to attack,

34
00:01:48.010 --> 00:01:51.060
compromise, or some other vulnerability,

35
00:01:51.060 --> 00:01:55.000
you have now exposed that application.

36
00:01:55.000 --> 00:01:58.050
Likewise, if you expose backing service URLs

37
00:01:58.050 --> 00:02:01.050
through configuration that can be modified

38
00:02:01.050 --> 00:02:05.000
by the user, or worse an attacker,

39
00:02:05.000 --> 00:02:09.070
you can trick the application into exposing information

40
00:02:09.070 --> 00:02:13.010
by simply changing the URL.

41
00:02:13.010 --> 00:02:17.070
Mitigating these attacks is actually relatively easy.

42
00:02:17.070 --> 00:02:21.010
First off, consider packaging beta versions

43
00:02:21.010 --> 00:02:24.030
of your software separately and deliver them

44
00:02:24.030 --> 00:02:28.000
to your trusted beta testers directly.

45
00:02:28.000 --> 00:02:30.050
This will reduce the risk of feature flags

46
00:02:30.050 --> 00:02:35.060
exposing software that isn't ready for primetime.

47
00:02:35.060 --> 00:02:38.090
Also be careful of what functionality you expose

48
00:02:38.090 --> 00:02:41.000
through configuration.

49
00:02:41.000 --> 00:02:45.010
If the configuration exposes where sensitive information

50
00:02:45.010 --> 00:02:49.080
or application information goes, or how it is exposed,

51
00:02:49.080 --> 00:02:53.090
reconsider how that configuration is set.

52
00:02:53.090 --> 00:02:57.080
If an attacker can identify how to modify the level,

53
00:02:57.080 --> 00:03:01.030
type, or location of this information,

54
00:03:01.030 --> 00:03:04.070
they can use it to expose details of your system,

55
00:03:04.070 --> 00:03:07.030
or your users.

56
00:03:07.030 --> 00:03:12.040
Consider data in the database, such as preferences as well.

57
00:03:12.040 --> 00:03:16.010
In a thick application where the database is embedded

58
00:03:16.010 --> 00:03:18.040
or on the local file system,

59
00:03:18.040 --> 00:03:22.070
preferences act as raw configuration flags.

60
00:03:22.070 --> 00:03:25.070
Attackers can manipulate this data

61
00:03:25.070 --> 00:03:30.030
to expose an attack vector into your application stack.

62
00:03:30.030 --> 00:03:33.080
One final place to consider configuration

63
00:03:33.080 --> 00:03:36.070
is in your runtime itself.

64
00:03:36.070 --> 00:03:40.000
For instance, if you are using an application server

65
00:03:40.000 --> 00:03:42.000
to run your application,

66
00:03:42.000 --> 00:03:45.070
it's default configuration will most likely expose

67
00:03:45.070 --> 00:03:49.080
too much information about your application.

68
00:03:49.080 --> 00:03:51.070
You should apply best practices

69
00:03:51.070 --> 00:03:56.040
from organizations like OWASP when configuring your runtime

70
00:03:56.040 --> 00:03:58.070
to prevent information disclosure

71
00:03:58.070 --> 00:04:02.070
that could be used to attack your application.

72
00:04:02.070 --> 00:04:06.050
Once again, it comes down to common sense.

73
00:04:06.050 --> 00:04:11.000
Only expose options you need to expose.

74
00:04:11.000 --> 00:04:13.070
Don't rely on configuration

75
00:04:13.070 --> 00:04:17.060
for handling sensitive flows and processes.

76
00:04:17.060 --> 00:04:20.050
Protect your internal processes,

77
00:04:20.050 --> 00:04:22.050
especially sensitive ones.

78
00:04:22.050 --> 00:04:25.050
And don't flex their behavior based

79
00:04:25.050 --> 00:04:29.000
on configuration or preferences.

