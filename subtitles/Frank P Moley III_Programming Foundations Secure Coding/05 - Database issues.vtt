WEBVTT
1
00:00:01.000 --> 00:00:03.070
- We talked about a couple of the potential issues

2
00:00:03.070 --> 00:00:06.060
with databases from other perspectives,

3
00:00:06.060 --> 00:00:10.040
but databases and other backing services are used

4
00:00:10.040 --> 00:00:13.090
in multiple ways in targeted attacks.

5
00:00:13.090 --> 00:00:16.000
Let's start our discussion once again

6
00:00:16.000 --> 00:00:18.090
with SQL injection attacks.

7
00:00:18.090 --> 00:00:20.090
I mentioned these attacks when we discussed

8
00:00:20.090 --> 00:00:24.080
user input validation and indeed that is a good

9
00:00:24.080 --> 00:00:27.050
mitigation for these attacks.

10
00:00:27.050 --> 00:00:30.010
Another good mitigation is the frameworks

11
00:00:30.010 --> 00:00:34.070
and strategies that we use to connect to databases.

12
00:00:34.070 --> 00:00:39.080
SQL statements should include bind variables and parameters.

13
00:00:39.080 --> 00:00:44.080
Now, you can write full statements or use bind variables.

14
00:00:44.080 --> 00:00:46.030
Creating full statements

15
00:00:46.030 --> 00:00:49.010
is susceptible to injection attacks

16
00:00:49.010 --> 00:00:52.030
because those statements are often concatenated

17
00:00:52.030 --> 00:00:56.070
with user input strings like in our previous example.

18
00:00:56.070 --> 00:01:01.010
But, when you use bind variables and parameters,

19
00:01:01.010 --> 00:01:04.050
you remove that risk because of how the drivers

20
00:01:04.050 --> 00:01:06.040
will create the statement for you

21
00:01:06.040 --> 00:01:09.090
and escape the dangerous behavior.

22
00:01:09.090 --> 00:01:13.040
Using a bind variable allows you to place a variable

23
00:01:13.040 --> 00:01:15.070
in the statement where you expect

24
00:01:15.070 --> 00:01:18.010
the user input to be added.

25
00:01:18.010 --> 00:01:21.000
For instance, select star from user,

26
00:01:21.000 --> 00:01:24.050
where username equals some bind variable.

27
00:01:24.050 --> 00:01:29.010
Then, we will execute the statement by passing a parameter

28
00:01:29.010 --> 00:01:34.000
for a bind variable from the validated user input.

29
00:01:34.000 --> 00:01:37.050
This strategy dramatically reduces any risk

30
00:01:37.050 --> 00:01:40.040
of injection attacks.

31
00:01:40.040 --> 00:01:43.060
Databases have other issues and one goes back

32
00:01:43.060 --> 00:01:46.090
to Secure communication channels.

33
00:01:46.090 --> 00:01:49.090
Often, database connection strings are performed

34
00:01:49.090 --> 00:01:53.040
using plain text communication channels.

35
00:01:53.040 --> 00:01:57.030
If you own the database client code, its runtime,

36
00:01:57.030 --> 00:02:00.050
the network, and the database system,

37
00:02:00.050 --> 00:02:04.030
and all of the hardware involved, you may be tempted

38
00:02:04.030 --> 00:02:07.030
to think you aren't at risk.

39
00:02:07.030 --> 00:02:11.060
We must, however, consider that all too often the internal

40
00:02:11.060 --> 00:02:16.040
user is the most dangerous attacker in a company.

41
00:02:16.040 --> 00:02:19.060
The proper way to connect to database systems

42
00:02:19.060 --> 00:02:22.030
is through secured channels.

43
00:02:22.030 --> 00:02:26.060
Most, if not all databases, allow for encrypted

44
00:02:26.060 --> 00:02:31.000
communication between the client and the server.

45
00:02:31.000 --> 00:02:34.090
Yes, there is more configuration for both the DBA

46
00:02:34.090 --> 00:02:39.040
and the developer, but not having a way for someone

47
00:02:39.040 --> 00:02:43.040
to sniff the traffic on the line is worth it.

48
00:02:43.040 --> 00:02:46.030
If an attacker comes from the inside,

49
00:02:46.030 --> 00:02:49.000
they can simply sniff the line instead

50
00:02:49.000 --> 00:02:52.040
of attacking the application itself.

51
00:02:52.040 --> 00:02:56.000
As a developer, you must ensure you are only using

52
00:02:56.000 --> 00:02:59.070
secured connections to databases.

53
00:02:59.070 --> 00:03:04.050
Databases also often contain sensitive information.

54
00:03:04.050 --> 00:03:08.030
Now, disk level, or table level encryption of the database

55
00:03:08.030 --> 00:03:10.060
does offer some value.

56
00:03:10.060 --> 00:03:14.040
But, they really don't protect the data in the database.

57
00:03:14.040 --> 00:03:18.030
The only way to truly protect the data from an attacker

58
00:03:18.030 --> 00:03:22.040
is through the use of application level encryption.

59
00:03:22.040 --> 00:03:26.040
If the application itself is handling the encryption,

60
00:03:26.040 --> 00:03:30.000
assuming cryptal operations are being done correctly,

61
00:03:30.000 --> 00:03:33.000
then you know that you're providing the best protection

62
00:03:33.000 --> 00:03:37.000
to the underlying data from a potential attacker.

63
00:03:37.000 --> 00:03:41.020
Databases are valuable to developers for many clear reasons.

64
00:03:41.020 --> 00:03:45.080
And as such they are great targets for attackers.

65
00:03:45.080 --> 00:03:48.090
Consider this when you interact with databases

66
00:03:48.090 --> 00:03:51.000
and apply some good practices.

