WEBVTT
1
00:00:01.000 --> 00:00:03.030
- Session management vulnerabilities

2
00:00:03.030 --> 00:00:06.020
are associated with web application based

3
00:00:06.020 --> 00:00:08.080
client server systems.

4
00:00:08.080 --> 00:00:11.010
Let's take a look at the vulnerabilities

5
00:00:11.010 --> 00:00:14.050
and mitigations in this context.

6
00:00:14.050 --> 00:00:17.050
To understand session management issues,

7
00:00:17.050 --> 00:00:21.080
first let's look at how HTTP works.

8
00:00:21.080 --> 00:00:24.090
HTTP is a stateless protocol

9
00:00:24.090 --> 00:00:27.070
which means there is no user data

10
00:00:27.070 --> 00:00:31.000
or other information stored between requests

11
00:00:31.000 --> 00:00:32.090
in the web server.

12
00:00:32.090 --> 00:00:36.060
In a pure stateless HTTP system,

13
00:00:36.060 --> 00:00:39.050
each and every request is independent

14
00:00:39.050 --> 00:00:44.020
of every other request, even if it's the same user

15
00:00:44.020 --> 00:00:48.060
with the same browser in the same browsing session.

16
00:00:48.060 --> 00:00:51.050
Some developers feel the need to maintain

17
00:00:51.050 --> 00:00:54.010
some sort of state for the user

18
00:00:54.010 --> 00:00:57.020
leading to the creation of the session.

19
00:00:57.020 --> 00:00:59.040
The session is usually initiated

20
00:00:59.040 --> 00:01:02.020
by some event on the website.

21
00:01:02.020 --> 00:01:05.040
Authentication is usually that event

22
00:01:05.040 --> 00:01:09.080
that starts the session and generates the unique token.

23
00:01:09.080 --> 00:01:13.000
The server shares that token with the client

24
00:01:13.000 --> 00:01:14.080
through a cookie.

25
00:01:14.080 --> 00:01:18.080
Now every subsequent request from the client

26
00:01:18.080 --> 00:01:21.090
to the server will send that cookie

27
00:01:21.090 --> 00:01:24.040
and the token it contains.

28
00:01:24.040 --> 00:01:28.010
The server can then use the token in that cookie

29
00:01:28.010 --> 00:01:31.080
to look up the session state data.

30
00:01:31.080 --> 00:01:34.080
The vulnerability that can exploit this process

31
00:01:34.080 --> 00:01:37.070
is called session hijacking.

32
00:01:37.070 --> 00:01:42.030
Session hijacking works by using the session's tokens

33
00:01:42.030 --> 00:01:46.030
which are often created using random numbers.

34
00:01:46.030 --> 00:01:49.070
If the random number generator isn't secure,

35
00:01:49.070 --> 00:01:52.090
a bad actor can simply predict the value

36
00:01:52.090 --> 00:01:56.050
of the session identifier for a user.

37
00:01:56.050 --> 00:01:59.060
Once they can predict the pattern through an algorithm,

38
00:01:59.060 --> 00:02:01.070
they can generate a seed session

39
00:02:01.070 --> 00:02:06.000
and use it to grab the next user's session.

40
00:02:06.000 --> 00:02:09.080
If you find yourself creating tokens for sessions,

41
00:02:09.080 --> 00:02:12.060
you must verify that you are using

42
00:02:12.060 --> 00:02:16.000
a secure random number generator.

43
00:02:16.000 --> 00:02:18.050
Most languages have a general random

44
00:02:18.050 --> 00:02:22.080
or pseudo random number generator and a secure one.

45
00:02:22.080 --> 00:02:26.020
Always use the secure generator.

46
00:02:26.020 --> 00:02:28.080
Lack of communication channel protection

47
00:02:28.080 --> 00:02:32.050
can increase session management risks.

48
00:02:32.050 --> 00:02:35.070
If you don't mark the session token cookie

49
00:02:35.070 --> 00:02:40.020
to be secure, it may be passed over HTTP

50
00:02:40.020 --> 00:02:43.020
instead of HTTPS.

51
00:02:43.020 --> 00:02:46.030
Another issue is when you create the session

52
00:02:46.030 --> 00:02:50.050
on first visit but don't create a new session

53
00:02:50.050 --> 00:02:53.000
when the user logs in.

54
00:02:53.000 --> 00:02:56.030
A session fixation attack can occur

55
00:02:56.030 --> 00:02:59.000
as the pre authentication session token

56
00:02:59.000 --> 00:03:03.010
would now point to an authenticated session.

57
00:03:03.010 --> 00:03:07.030
Anyone who grabbed the session on plain HTTP traffic

58
00:03:07.030 --> 00:03:10.030
could use it once you log in

59
00:03:10.030 --> 00:03:14.030
even though that communication is now over HTTPS

60
00:03:14.030 --> 00:03:17.020
with the secure flag now on the cookie

61
00:03:17.020 --> 00:03:20.080
between the real user and the server.

62
00:03:20.080 --> 00:03:24.020
Session creation isn't the only weak point.

63
00:03:24.020 --> 00:03:29.080
Session termination also exposes potential risks.

64
00:03:29.080 --> 00:03:33.060
A developer must ensure that when the use logs out

65
00:03:33.060 --> 00:03:36.030
the session is invalidated.

66
00:03:36.030 --> 00:03:40.000
If not, the session token can still be stolen

67
00:03:40.000 --> 00:03:44.000
and used by a bad actor even if the user

68
00:03:44.000 --> 00:03:47.060
is no longer interacting with the system.

69
00:03:47.060 --> 00:03:50.090
Likewise, sessions should expire after

70
00:03:50.090 --> 00:03:53.090
some period of inactivity.

71
00:03:53.090 --> 00:03:56.070
If the user leaves the browser open

72
00:03:56.070 --> 00:03:59.000
but is no longer using the site,

73
00:03:59.000 --> 00:04:01.070
there's a risk of the token being stolen

74
00:04:01.070 --> 00:04:04.030
and used by someone else.

75
00:04:04.030 --> 00:04:08.030
In such cases, developers should provide timeouts

76
00:04:08.030 --> 00:04:12.010
for inactive sessions to protect the user.

77
00:04:12.010 --> 00:04:15.030
While this may frustrate a user to see the timeout,

78
00:04:15.030 --> 00:04:18.090
they are more secure when we destroy the session.

79
00:04:18.090 --> 00:04:22.010
Just be open to iterating on the timeout value

80
00:04:22.010 --> 00:04:24.090
to keep your users as happy as possible

81
00:04:24.090 --> 00:04:27.040
while still being secure.

82
00:04:27.040 --> 00:04:31.050
Very rarely do users actually log out of sites.

83
00:04:31.050 --> 00:04:34.090
Instead, they just close their browsers

84
00:04:34.090 --> 00:04:37.080
therefore their sessions remain active

85
00:04:37.080 --> 00:04:39.010
and can be stolen.

86
00:04:39.010 --> 00:04:41.050
A developer should invalidate the session

87
00:04:41.050 --> 00:04:43.040
when the browser closes

88
00:04:43.040 --> 00:04:46.070
to ensure the session cannot be stolen.

89
00:04:46.070 --> 00:04:49.050
Now we don't always use sessions in web development

90
00:04:49.050 --> 00:04:53.020
but when we do, we need to be aware of the risks.

91
00:04:53.020 --> 00:04:56.090
Protecting users in these situations isn't hard

92
00:04:56.090 --> 00:04:59.070
but you have to think about the risks

93
00:04:59.070 --> 00:05:02.000
and make a global plan.

