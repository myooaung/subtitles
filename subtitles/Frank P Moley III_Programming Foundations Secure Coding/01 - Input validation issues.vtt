WEBVTT
1
00:00:00.090 --> 00:00:03.040
- One of the most repetitive security issues

2
00:00:03.040 --> 00:00:06.000
we find in software development today

3
00:00:06.000 --> 00:00:08.080
is input validation bugs.

4
00:00:08.080 --> 00:00:11.010
With input validation issues

5
00:00:11.010 --> 00:00:14.010
exist in many different contexts.

6
00:00:14.010 --> 00:00:16.080
We are going to focus on the client server

7
00:00:16.080 --> 00:00:21.050
input validation issues and how to possibly address them.

8
00:00:21.050 --> 00:00:23.020
Let's get started by talking

9
00:00:23.020 --> 00:00:26.020
about the attack vectors at play.

10
00:00:26.020 --> 00:00:28.060
Injection attacks are one of the most common

11
00:00:28.060 --> 00:00:31.080
and most publicized exploits,

12
00:00:31.080 --> 00:00:36.040
not just in the input validation arena but globally.

13
00:00:36.040 --> 00:00:39.040
Often when we think about injection attacks

14
00:00:39.040 --> 00:00:41.080
we are talking about SQL injection.

15
00:00:41.080 --> 00:00:45.020
But there are several other types.

16
00:00:45.020 --> 00:00:49.020
In fact, anything that is interpreted

17
00:00:49.020 --> 00:00:53.010
can be subject to an injection attack.

18
00:00:53.010 --> 00:00:55.080
The concept is rather simple.

19
00:00:55.080 --> 00:00:58.030
A structured statement is created,

20
00:00:58.030 --> 00:01:02.050
then anticipates user input to complete that statement

21
00:01:02.050 --> 00:01:05.020
before it is run through an interpreter.

22
00:01:05.020 --> 00:01:09.010
For example, in SQL we could write a statement

23
00:01:09.010 --> 00:01:12.060
that is something like SELECT star from users

24
00:01:12.060 --> 00:01:16.000
WHERE username equals some value.

25
00:01:16.000 --> 00:01:19.040
Now at run time we take user input

26
00:01:19.040 --> 00:01:24.070
and simply concatenate the statement before execution.

27
00:01:24.070 --> 00:01:27.090
If an attacker can find this scenario,

28
00:01:27.090 --> 00:01:30.010
they can provide input that not only

29
00:01:30.010 --> 00:01:32.000
completes this statement,

30
00:01:32.000 --> 00:01:34.060
but also executes a new statement

31
00:01:34.060 --> 00:01:37.070
by simply adding a semicolon.

32
00:01:37.070 --> 00:01:41.010
This provides the attacker more information

33
00:01:41.010 --> 00:01:45.070
about the system than the developer ever intended.

34
00:01:45.070 --> 00:01:49.050
Scripting attacks are another very common attack

35
00:01:49.050 --> 00:01:53.030
based on lack of proper input validation.

36
00:01:53.030 --> 00:01:58.000
The most common, and continually on the OWASP Top Ten,

37
00:01:58.000 --> 00:02:02.090
is cross-site scripting, or XSS attacks.

38
00:02:02.090 --> 00:02:06.030
The concept again is rather simple.

39
00:02:06.030 --> 00:02:10.070
The attacker injects a script through a user input field

40
00:02:10.070 --> 00:02:13.090
or some other post or put method.

41
00:02:13.090 --> 00:02:16.070
That script is then served to a victim

42
00:02:16.070 --> 00:02:19.020
through his or her browser.

43
00:02:19.020 --> 00:02:21.090
The script is then rendered in the client browser

44
00:02:21.090 --> 00:02:26.030
of the victim and the exploit is executed.

45
00:02:26.030 --> 00:02:30.010
Often these scripts send data of some kind

46
00:02:30.010 --> 00:02:32.080
back to the attacker's server.

47
00:02:32.080 --> 00:02:34.010
So what I just described

48
00:02:34.010 --> 00:02:37.060
is called a persistent cross-site scripting attack.

49
00:02:37.060 --> 00:02:41.060
However, there are a couple other types.

50
00:02:41.060 --> 00:02:44.000
Reflected cross-site scripting

51
00:02:44.000 --> 00:02:46.070
is often used in phishing attacks,

52
00:02:46.070 --> 00:02:48.060
where the malicious script actually

53
00:02:48.060 --> 00:02:51.080
originates in the request.

54
00:02:51.080 --> 00:02:56.020
There are also exploits in the dom that can be attacked.

55
00:02:56.020 --> 00:03:01.020
All of these exploits are based on lack of input validation.

56
00:03:01.020 --> 00:03:04.010
While these attacks can be nasty,

57
00:03:04.010 --> 00:03:08.020
the fixes for them are relatively straightforward.

58
00:03:08.020 --> 00:03:14.000
One approach is to require validation of all user input.

59
00:03:14.000 --> 00:03:18.040
One such validation technique is called blacklisting.

60
00:03:18.040 --> 00:03:22.000
Blacklists look for key patterns like script tags

61
00:03:22.000 --> 00:03:25.030
and filter the input out.

62
00:03:25.030 --> 00:03:28.050
Blacklisting is often one of the first attempts,

63
00:03:28.050 --> 00:03:31.080
but they tend to be easy to circumvent

64
00:03:31.080 --> 00:03:35.010
and should not be used alone.

65
00:03:35.010 --> 00:03:38.010
Another validation technique is whitelisting.

66
00:03:38.010 --> 00:03:41.060
And it's much more effective than blacklisting.

67
00:03:41.060 --> 00:03:45.040
Whitelisting looks at the pattern that the data should have,

68
00:03:45.040 --> 00:03:49.020
such as length or symbols, and requires that the data

69
00:03:49.020 --> 00:03:53.030
matches that pattern before it's ever accepted.

70
00:03:53.030 --> 00:03:57.070
For instance, an email address must contain the at symbol

71
00:03:57.070 --> 00:04:02.020
and end with a dot and a valid top-level domain.

72
00:04:02.020 --> 00:04:05.010
In either case, the validation should always

73
00:04:05.010 --> 00:04:10.050
be applied server side and be the first thing executed.

74
00:04:10.050 --> 00:04:13.070
Now you can apply validations client side

75
00:04:13.070 --> 00:04:15.060
to save the server call,

76
00:04:15.060 --> 00:04:19.080
but it still must be executed server side.

77
00:04:19.080 --> 00:04:23.040
The reason is that you could always post back to the server

78
00:04:23.040 --> 00:04:25.080
without the actual webpage.

79
00:04:25.080 --> 00:04:30.000
So never rely only on client side input validation.

