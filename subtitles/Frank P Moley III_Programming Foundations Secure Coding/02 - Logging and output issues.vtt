WEBVTT
1
00:00:01.000 --> 00:00:03.020
- We discussed issues with disclosure

2
00:00:03.020 --> 00:00:07.000
through error handling and in a similar vein,

3
00:00:07.000 --> 00:00:10.040
it's possible to expose too much information

4
00:00:10.040 --> 00:00:14.000
in our log messages and system output.

5
00:00:14.000 --> 00:00:16.020
We will start with log information

6
00:00:16.020 --> 00:00:18.070
because it is much easier to inadvertently

7
00:00:18.070 --> 00:00:22.060
cause issues in how you write log messages.

8
00:00:22.060 --> 00:00:26.000
There are two classes of vulnerability in log messages.

9
00:00:26.000 --> 00:00:30.070
The first is exposure of too much of your internal workings

10
00:00:30.070 --> 00:00:35.080
and the second is too much information about your user.

11
00:00:35.080 --> 00:00:38.000
When you write log messages

12
00:00:38.000 --> 00:00:41.000
often you are providing detailed information

13
00:00:41.000 --> 00:00:45.000
about what is actually happening in your system.

14
00:00:45.000 --> 00:00:48.070
This data can be critical when issues arise

15
00:00:48.070 --> 00:00:53.090
whether they're security focused or operational in nature.

16
00:00:53.090 --> 00:00:58.040
But log messages can also provide too much information,

17
00:00:58.040 --> 00:01:02.050
making your log aggregations an attack point.

18
00:01:02.050 --> 00:01:06.070
Events are one of the things you should always log

19
00:01:06.070 --> 00:01:10.010
whether they are user events of system events

20
00:01:10.010 --> 00:01:14.010
such as authentication or task completions.

21
00:01:14.010 --> 00:01:17.010
You should also always log errors,

22
00:01:17.010 --> 00:01:19.070
especially in controls that are designed

23
00:01:19.070 --> 00:01:22.020
to prevent attacks against your system

24
00:01:22.020 --> 00:01:26.020
such as input and output validation errors.

25
00:01:26.020 --> 00:01:29.070
Session events are also a great place

26
00:01:29.070 --> 00:01:31.080
to provide detailed logging specifically on

27
00:01:31.080 --> 00:01:35.090
creation, reanimation, or destruction.

28
00:01:35.090 --> 00:01:39.050
In addition, you need general application flow

29
00:01:39.050 --> 00:01:43.080
and connection details in your logs for operations.

30
00:01:43.080 --> 00:01:47.000
While these things should appear in your log messages,

31
00:01:47.000 --> 00:01:50.060
there are several things that should never appear.

32
00:01:50.060 --> 00:01:54.010
Credentials and connection strings for backing services

33
00:01:54.010 --> 00:01:57.090
like databases should never be logged.

34
00:01:57.090 --> 00:02:01.090
Tokens for sessions or specific events likewise

35
00:02:01.090 --> 00:02:04.080
have no place in your logs.

36
00:02:04.080 --> 00:02:09.070
Encryption operations and keys as well as user passwords

37
00:02:09.070 --> 00:02:12.050
also fall into this category.

38
00:02:12.050 --> 00:02:16.010
Sensitive personal information like email addresses

39
00:02:16.010 --> 00:02:18.090
shouldn't be in logs in plain text.

40
00:02:18.090 --> 00:02:22.080
If this information can be useful in troubleshooting,

41
00:02:22.080 --> 00:02:24.040
it belongs in the logs.

42
00:02:24.040 --> 00:02:28.030
However, it should be hashed using a secure

43
00:02:28.030 --> 00:02:31.060
cryptographic hash and then the hash is what

44
00:02:31.060 --> 00:02:34.050
should be logged.

45
00:02:34.050 --> 00:02:37.070
That way you could recreate the hash for troubleshooting

46
00:02:37.070 --> 00:02:39.090
but not the reverse.

47
00:02:39.090 --> 00:02:43.020
If the information has no value in troubleshooting,

48
00:02:43.020 --> 00:02:45.090
it shouldn't be in the logs.

49
00:02:45.090 --> 00:02:48.040
One useful strategy for logging

50
00:02:48.040 --> 00:02:52.020
is to provide a set of methods that write to the logs

51
00:02:52.020 --> 00:02:56.050
instead of directly calling the logging APIs.

52
00:02:56.050 --> 00:02:59.090
This allows you to provide uniformity

53
00:02:59.090 --> 00:03:02.080
and proper sanitization of the log data

54
00:03:02.080 --> 00:03:06.020
to protect the system and the users

55
00:03:06.020 --> 00:03:11.080
all while promoting good security and operational behavior.

56
00:03:11.080 --> 00:03:15.090
Application output also needs to be inspected.

57
00:03:15.090 --> 00:03:21.000
System output should be validated just like user input

58
00:03:21.000 --> 00:03:24.050
to ensure that you are not creating risk

59
00:03:24.050 --> 00:03:27.080
to other systems that may be downstream.

60
00:03:27.080 --> 00:03:31.000
Data should be filtered and sanitized

61
00:03:31.000 --> 00:03:34.000
so that the user sees what they need to

62
00:03:34.000 --> 00:03:38.090
but not so much that an attacker could use it as an exploit.

63
00:03:38.090 --> 00:03:42.000
Since many systems are used by both users

64
00:03:42.000 --> 00:03:46.030
and other systems, the output can expose

65
00:03:46.030 --> 00:03:49.060
other vulnerabilities and should be treated

66
00:03:49.060 --> 00:03:52.030
as something to be protected.

67
00:03:52.030 --> 00:03:55.040
These vulnerabilities really come down to

68
00:03:55.040 --> 00:04:00.000
disclosing enough information to help you do your job

69
00:04:00.000 --> 00:04:03.090
but not so much that you become the attack point.

70
00:04:03.090 --> 00:04:06.030
It's a fine line but one

71
00:04:06.030 --> 00:04:10.000
that a collaborating team can solve.

