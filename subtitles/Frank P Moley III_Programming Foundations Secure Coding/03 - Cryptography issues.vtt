WEBVTT
1
00:00:00.060 --> 00:00:06.030
- Cryptography is a very hard subject for most developers.

2
00:00:06.030 --> 00:00:09.080
Thankfully, those that do understand cryptography

3
00:00:09.080 --> 00:00:11.020
are very good at it

4
00:00:11.020 --> 00:00:14.060
and make things easier for the rest of us,

5
00:00:14.060 --> 00:00:18.040
assuming we follow the rules correctly.

6
00:00:18.040 --> 00:00:21.050
So let's start by talking about the security risks

7
00:00:21.050 --> 00:00:25.030
associated with broken cryptography.

8
00:00:25.030 --> 00:00:29.030
First and most common is the use

9
00:00:29.030 --> 00:00:33.000
of broken cryptographic routines.

10
00:00:33.000 --> 00:00:36.070
Now the term broken is a little overloaded here.

11
00:00:36.070 --> 00:00:40.020
When I say broken, most often it means

12
00:00:40.020 --> 00:00:43.030
that the algorithm has been cracked,

13
00:00:43.030 --> 00:00:45.070
theoretically can be cracked,

14
00:00:45.070 --> 00:00:49.040
or has a flaw that has been identified.

15
00:00:49.040 --> 00:00:53.020
Many developers implement an algorithm for encryption,

16
00:00:53.020 --> 00:00:58.010
hashing, or digital signatures that they have used before

17
00:00:58.010 --> 00:01:02.030
but it may no longer be considered safe.

18
00:01:02.030 --> 00:01:04.070
The mitigation for these flaws

19
00:01:04.070 --> 00:01:08.070
is quite simply to use the latest and greatest algorithms

20
00:01:08.070 --> 00:01:13.060
that serve the current and possibly future purposes.

21
00:01:13.060 --> 00:01:17.000
Now you don't need to be bleeding edge

22
00:01:17.000 --> 00:01:19.050
but you do need to use algorithms

23
00:01:19.050 --> 00:01:24.080
that are not yet cracked and I do mean not yet.

24
00:01:24.080 --> 00:01:26.090
There is a risk that cracking

25
00:01:26.090 --> 00:01:30.090
will be possible in the future for any algorithm.

26
00:01:30.090 --> 00:01:36.010
So you also need to keep tabs on the algorithms that you use

27
00:01:36.010 --> 00:01:39.000
and their acceptance by the industry.

28
00:01:39.000 --> 00:01:42.030
Ultimately, upgrading is needed.

29
00:01:42.030 --> 00:01:46.040
One thing to note, closely associated here

30
00:01:46.040 --> 00:01:49.090
is choosing the wrong algorithm.

31
00:01:49.090 --> 00:01:52.080
Say you need to hash passwords,

32
00:01:52.080 --> 00:01:57.030
you could use SHA-2 from a pure crypto perspective.

33
00:01:57.030 --> 00:02:01.030
However, it is too fast of an algorithm

34
00:02:01.030 --> 00:02:04.080
and opens you up for brute force attacks.

35
00:02:04.080 --> 00:02:08.070
Instead, consider something like bcrypt.

36
00:02:08.070 --> 00:02:12.020
That being said, ensure you are also using

37
00:02:12.020 --> 00:02:16.010
the right algorithm for the use case.

38
00:02:16.010 --> 00:02:20.050
Second, there is a case where developers misuse

39
00:02:20.050 --> 00:02:25.010
or misunderstand the algorithms that they are using.

40
00:02:25.010 --> 00:02:29.000
Things like initialization vectors, salt, nonce,

41
00:02:29.000 --> 00:02:32.030
and other parameters have valid places

42
00:02:32.030 --> 00:02:37.020
in certain crypto algorithms and should not be ignored.

43
00:02:37.020 --> 00:02:42.070
In addition, often key sizes can fall into this arena

44
00:02:42.070 --> 00:02:48.010
because insufficient key size can ruin a great algorithm.

45
00:02:48.010 --> 00:02:51.010
This can lead to cases where the algorithms

46
00:02:51.010 --> 00:02:54.020
are no longer as safe as they should be

47
00:02:54.020 --> 00:02:57.090
because the implementation was not correct.

48
00:02:57.090 --> 00:03:00.030
The mitigation for these flaws

49
00:03:00.030 --> 00:03:04.080
is to ensure you are using the algorithms correctly.

50
00:03:04.080 --> 00:03:08.060
If you don't know, ask.

51
00:03:08.060 --> 00:03:13.010
I have yet to meet a developer who knows everything.

52
00:03:13.010 --> 00:03:18.020
As such, it's perfectly okay and honestly advisable

53
00:03:18.020 --> 00:03:22.030
to be a little humble and ask questions.

54
00:03:22.030 --> 00:03:25.090
Misusing algorithms can be as dangerous

55
00:03:25.090 --> 00:03:29.030
relatively as not using them at all.

56
00:03:29.030 --> 00:03:32.050
Of course, there's a little exaggeration there.

57
00:03:32.050 --> 00:03:35.070
But opening yourself up to rainbow attacks

58
00:03:35.070 --> 00:03:40.030
because you don't understand salt is a pretty bad flaw

59
00:03:40.030 --> 00:03:43.050
that could be solved with a simple question.

60
00:03:43.050 --> 00:03:45.070
One that honestly bothers me

61
00:03:45.070 --> 00:03:50.030
is inappropriately implemented crypto algorithms.

62
00:03:50.030 --> 00:03:52.060
There are some developers that feel

63
00:03:52.060 --> 00:03:54.090
that they know crypto well enough

64
00:03:54.090 --> 00:03:58.080
to implement the algorithm's more efficiently.

65
00:03:58.080 --> 00:04:02.020
I won't say that they fail more often than not,

66
00:04:02.020 --> 00:04:05.000
but leading crypo and security researchers

67
00:04:05.000 --> 00:04:07.090
usually argue that they do.

68
00:04:07.090 --> 00:04:12.040
The possibility of a closed homegrown implementation

69
00:04:12.040 --> 00:04:17.020
having a flaw is too great for most companies to accept.

70
00:04:17.020 --> 00:04:20.000
The mitigation for this is quite simply

71
00:04:20.000 --> 00:04:23.010
never roll your own crypto.

72
00:04:23.010 --> 00:04:25.090
I call this the first rule of crypo club

73
00:04:25.090 --> 00:04:29.000
because in my mind, it's a no-brainer.

74
00:04:29.000 --> 00:04:31.090
I feel like I have a good grasp on crypto

75
00:04:31.090 --> 00:04:34.040
and I would never in a million years

76
00:04:34.040 --> 00:04:39.010
roll my own crypto for a customer or an employer.

77
00:04:39.010 --> 00:04:43.000
There are good libraries out there that you can use.

78
00:04:43.000 --> 00:04:47.030
The moral of this whole story is ask questions.

79
00:04:47.030 --> 00:04:51.000
If you wonder if an algorithm is cracked, ask.

80
00:04:51.000 --> 00:04:54.080
If you wonder if an algorithm is poor, ask.

81
00:04:54.080 --> 00:04:58.070
If you need to understand an API, ask.

82
00:04:58.070 --> 00:05:00.000
You get the rest of the picture.

