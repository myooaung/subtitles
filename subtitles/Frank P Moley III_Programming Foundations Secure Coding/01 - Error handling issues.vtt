WEBVTT
1
00:00:00.070 --> 00:00:03.020
- Error handling is an important part

2
00:00:03.020 --> 00:00:05.010
of application development.

3
00:00:05.010 --> 00:00:08.040
It allows the developer to prevent the application

4
00:00:08.040 --> 00:00:10.040
from abnormal termination

5
00:00:10.040 --> 00:00:12.080
while also providing a great place

6
00:00:12.080 --> 00:00:14.080
for troubleshooting break points

7
00:00:14.080 --> 00:00:17.020
when issues do arise.

8
00:00:17.020 --> 00:00:19.060
What makes it powerful for developers

9
00:00:19.060 --> 00:00:23.070
also makes it attractive for bad actors.

10
00:00:23.070 --> 00:00:26.010
One of the most frequent vulnerabilities

11
00:00:26.010 --> 00:00:28.060
comes from information disclosure

12
00:00:28.060 --> 00:00:31.010
through error messaging.

13
00:00:31.010 --> 00:00:34.090
In these vulnerabilities the application raises

14
00:00:34.090 --> 00:00:38.060
an error that produces an error status.

15
00:00:38.060 --> 00:00:40.070
This error status usually results

16
00:00:40.070 --> 00:00:44.010
in a message or a redirect in the web world.

17
00:00:44.010 --> 00:00:47.080
The vulnerability arises when that error message

18
00:00:47.080 --> 00:00:51.060
discloses information such as a stack trace

19
00:00:51.060 --> 00:00:53.060
or a database dump.

20
00:00:53.060 --> 00:00:56.070
This information can be very valuable

21
00:00:56.070 --> 00:00:59.030
for an attacker trying to gain entry

22
00:00:59.030 --> 00:01:01.030
to your system.

23
00:01:01.030 --> 00:01:04.050
Even the disclosure of your internal error codes

24
00:01:04.050 --> 00:01:07.050
can be used to attack your system.

25
00:01:07.050 --> 00:01:09.060
Even how you raise an error

26
00:01:09.060 --> 00:01:12.020
can provide an attack point.

27
00:01:12.020 --> 00:01:14.030
One of the most common issues

28
00:01:14.030 --> 00:01:16.090
that I have seen in applications

29
00:01:16.090 --> 00:01:21.080
of every type is in user authentication flows.

30
00:01:21.080 --> 00:01:25.040
Often, developers provide different error messages

31
00:01:25.040 --> 00:01:27.060
if the user doesn't exist

32
00:01:27.060 --> 00:01:30.090
versus the wrong password was entered.

33
00:01:30.090 --> 00:01:33.050
This level of disclosure can provide

34
00:01:33.050 --> 00:01:38.050
a bad actor a brute force vector into your system.

35
00:01:38.050 --> 00:01:42.020
All of these situations are easy to prevent.

36
00:01:42.020 --> 00:01:43.080
We must first accept

37
00:01:43.080 --> 00:01:47.030
that error conditions will always exist.

38
00:01:47.030 --> 00:01:49.060
We need them to exist on our applications

39
00:01:49.060 --> 00:01:53.060
for flow control and to protect us from crashing.

40
00:01:53.060 --> 00:01:56.080
The fix isn't to prevent the errors,

41
00:01:56.080 --> 00:02:00.000
it's to accept them and make conscious decisions

42
00:02:00.000 --> 00:02:03.030
about what information we display.

43
00:02:03.030 --> 00:02:06.060
In either error case from our previous example,

44
00:02:06.060 --> 00:02:08.080
the developer should only disclose

45
00:02:08.080 --> 00:02:10.070
that the situation exists,

46
00:02:10.070 --> 00:02:13.070
not which case we're in.

47
00:02:13.070 --> 00:02:15.060
The language should be consistent

48
00:02:15.060 --> 00:02:19.020
so a valid user can take appropriate action,

49
00:02:19.020 --> 00:02:24.030
but a bad actor won't be given too much information.

50
00:02:24.030 --> 00:02:26.040
It takes some time to get good

51
00:02:26.040 --> 00:02:28.070
at using consistent language,

52
00:02:28.070 --> 00:02:31.030
but often it is just a matter

53
00:02:31.030 --> 00:02:35.050
of taking the time to document the messages.

54
00:02:35.050 --> 00:02:37.060
Review the textual display

55
00:02:37.060 --> 00:02:40.030
and make sure that errors don't disclose

56
00:02:40.030 --> 00:02:42.090
internal system information.

57
00:02:42.090 --> 00:02:46.080
Also, ensure that they don't display information

58
00:02:46.080 --> 00:02:50.090
about your users to attackers.

59
00:02:50.090 --> 00:02:52.080
Code reviews and documentation

60
00:02:52.080 --> 00:02:55.010
can help a bunch in these cases,

61
00:02:55.010 --> 00:02:57.070
but an even better model

62
00:02:57.070 --> 00:03:01.000
is to actually test your error states.

63
00:03:01.000 --> 00:03:04.010
When you do so, you can provide guidance

64
00:03:04.010 --> 00:03:05.030
through the test

65
00:03:05.030 --> 00:03:08.010
about what text should be displayed

66
00:03:08.010 --> 00:03:10.020
and what shouldn't be.

67
00:03:10.020 --> 00:03:13.000
This can also be a great exercise

68
00:03:13.000 --> 00:03:15.030
to ensure your error messages

69
00:03:15.030 --> 00:03:17.090
are consistent, valuable,

70
00:03:17.090 --> 00:03:21.000
and don't disclose sensitive information.

