WEBVTT
1
00:00:01.000 --> 00:00:03.080
- The file system can be a dangerous place

2
00:00:03.080 --> 00:00:06.050
for applications, and bad actors

3
00:00:06.050 --> 00:00:10.030
love to leverage it to find exploits.

4
00:00:10.030 --> 00:00:13.080
Attacks of the file system can be relatively easy

5
00:00:13.080 --> 00:00:16.010
to exploit, because it's a great

6
00:00:16.010 --> 00:00:19.040
learning arena for new attackers.

7
00:00:19.040 --> 00:00:24.070
Furthermore, the results can be devastating to the systems.

8
00:00:24.070 --> 00:00:27.030
As we look at the risk management flow,

9
00:00:27.030 --> 00:00:29.030
the ease of attack in conjunction

10
00:00:29.030 --> 00:00:32.030
with the damage potential, should yield

11
00:00:32.030 --> 00:00:36.060
a clear need to take these seriously.

12
00:00:36.060 --> 00:00:39.020
There are several areas we need to focus on

13
00:00:39.020 --> 00:00:43.040
with file systems and file input and output.

14
00:00:43.040 --> 00:00:46.090
The first we will discuss is often more infrastructure

15
00:00:46.090 --> 00:00:52.090
focused, but in a devops world, the line is very blurred.

16
00:00:52.090 --> 00:00:55.060
You need to ensure your application is run

17
00:00:55.060 --> 00:00:59.090
in a user process that is controlled.

18
00:00:59.090 --> 00:01:02.070
You should only provide access to the file system

19
00:01:02.070 --> 00:01:08.000
for that user that the application needs in order to run.

20
00:01:08.000 --> 00:01:11.050
This is often considered in server side application,

21
00:01:11.050 --> 00:01:15.050
especially in the Linux world, but the same cannot be said

22
00:01:15.050 --> 00:01:18.080
for desktop or mobile applications.

23
00:01:18.080 --> 00:01:21.050
While sandboxing environments help,

24
00:01:21.050 --> 00:01:23.030
the fact is that the developer

25
00:01:23.030 --> 00:01:25.090
still needs to only allow the application

26
00:01:25.090 --> 00:01:29.070
to read and write from a finite location

27
00:01:29.070 --> 00:01:32.030
on the file system, and the process

28
00:01:32.030 --> 00:01:36.020
needs to only have that same access.

29
00:01:36.020 --> 00:01:38.020
When an application needs to read

30
00:01:38.020 --> 00:01:41.050
from the file system, for its behavior,

31
00:01:41.050 --> 00:01:46.010
consider using read-only files in these cases.

32
00:01:46.010 --> 00:01:49.040
Attackers love to modify files that applications need

33
00:01:49.040 --> 00:01:54.090
to operate, in an attempt to exploit the application.

34
00:01:54.090 --> 00:01:58.040
By leveraging read-only files or media,

35
00:01:58.040 --> 00:02:02.060
the attacker has less opportunity for attack.

36
00:02:02.060 --> 00:02:07.050
Another important attack vector is a run file upload.

37
00:02:07.050 --> 00:02:09.080
When systems allow file uploads,

38
00:02:09.080 --> 00:02:14.010
it becomes an easy way to impact the system as a whole.

39
00:02:14.010 --> 00:02:16.050
The first scenario is a system that

40
00:02:16.050 --> 00:02:20.000
parses a file that a user uploads.

41
00:02:20.000 --> 00:02:22.080
An attacker can inject malicious data

42
00:02:22.080 --> 00:02:27.010
that forces data leakage, unexpected operations,

43
00:02:27.010 --> 00:02:31.080
or simply cause crashes, making the system unavailable.

44
00:02:31.080 --> 00:02:34.010
The situation is worse if the contents

45
00:02:34.010 --> 00:02:38.030
are stored on a remote system or database.

46
00:02:38.030 --> 00:02:40.060
The mitigation for this attack is one

47
00:02:40.060 --> 00:02:44.090
that we have discussed, and that is input validation.

48
00:02:44.090 --> 00:02:47.040
The system should not trust the data

49
00:02:47.040 --> 00:02:50.020
in the file without first inspecting it

50
00:02:50.020 --> 00:02:55.080
for malicious behavior, based on how the data is consumed.

51
00:02:55.080 --> 00:02:59.070
Another scenario is infected file upload.

52
00:02:59.070 --> 00:03:03.010
While this generally is an infrastructure concern,

53
00:03:03.010 --> 00:03:05.080
developers need to be aware of the scenario

54
00:03:05.080 --> 00:03:09.070
in order to engage the infrastructure teams.

55
00:03:09.070 --> 00:03:13.010
The attack is again easy to exploit.

56
00:03:13.010 --> 00:03:16.020
The system allows file upload, so the attacker

57
00:03:16.020 --> 00:03:20.060
embeds some form of malware into that upload.

58
00:03:20.060 --> 00:03:23.060
The fix for this is as simple as providing

59
00:03:23.060 --> 00:03:27.080
a sandboxed area for intermediate uploads.

60
00:03:27.080 --> 00:03:30.060
The upload process should write the file,

61
00:03:30.060 --> 00:03:33.060
and then trigger a malware scan.

62
00:03:33.060 --> 00:03:36.030
Once the file is determined clean,

63
00:03:36.030 --> 00:03:40.060
another process can move it to its final location,

64
00:03:40.060 --> 00:03:43.040
and so our theme continues.

65
00:03:43.040 --> 00:03:46.020
Never trust what your users provide you.

66
00:03:46.020 --> 00:03:49.020
Provide as much isolation as you can,

67
00:03:49.020 --> 00:03:54.000
and never provide more trust than is absolutely necessary.

