WEBVTT
1
00:00:01.010 --> 00:00:04.010
- Deployment of code is one of those areas

2
00:00:04.010 --> 00:00:06.050
that all too often gets ignored

3
00:00:06.050 --> 00:00:10.030
when it comes to developing a secure coding plan.

4
00:00:10.030 --> 00:00:12.040
This is an unfortunate oversight,

5
00:00:12.040 --> 00:00:14.010
as there are many ways to improve

6
00:00:14.010 --> 00:00:18.050
the security of your system at this point.

7
00:00:18.050 --> 00:00:21.050
One of the weakest points of secure deployments

8
00:00:21.050 --> 00:00:24.080
is how you manage the sensitive configuration

9
00:00:24.080 --> 00:00:27.090
of the systems being deployed.

10
00:00:27.090 --> 00:00:30.040
The use of files on a file system

11
00:00:30.040 --> 00:00:32.020
or in a startup script

12
00:00:32.020 --> 00:00:35.060
all too often count as secure enough,

13
00:00:35.060 --> 00:00:38.070
when in reality, they fail.

14
00:00:38.070 --> 00:00:42.050
They expose significant attack vectors into your systems

15
00:00:42.050 --> 00:00:46.010
or the systems you depend on.

16
00:00:46.010 --> 00:00:49.000
There are, however, very powerful tools

17
00:00:49.000 --> 00:00:52.010
and patterns that can be leveraged

18
00:00:52.010 --> 00:00:55.040
to improve the secrecy and security

19
00:00:55.040 --> 00:00:58.030
of these sensitive data points.

20
00:00:58.030 --> 00:01:01.040
Some of the tooling have sophisticated APIs

21
00:01:01.040 --> 00:01:03.020
and startup routines

22
00:01:03.020 --> 00:01:07.000
that ensure your system will get its config,

23
00:01:07.000 --> 00:01:09.010
and no one else can.

24
00:01:09.010 --> 00:01:12.040
If you're deploying to a containerized framework,

25
00:01:12.040 --> 00:01:16.030
you also likely have built-in support for secrets,

26
00:01:16.030 --> 00:01:19.030
so at least consider using those.

27
00:01:19.030 --> 00:01:20.060
Another step that seems

28
00:01:20.060 --> 00:01:24.050
to increase the security is automation.

29
00:01:24.050 --> 00:01:28.060
Any time a human has to be involved in deployments,

30
00:01:28.060 --> 00:01:32.020
you increase the risks of compromise.

31
00:01:32.020 --> 00:01:35.060
The operator may make a mistake with permissions

32
00:01:35.060 --> 00:01:38.070
or leave something open that shouldn't be.

33
00:01:38.070 --> 00:01:40.050
Worst-case scenario,

34
00:01:40.050 --> 00:01:43.000
the operator may get disgruntled

35
00:01:43.000 --> 00:01:45.090
and become the bad actor.

36
00:01:45.090 --> 00:01:50.000
While automation is by no means a complete stopgap,

37
00:01:50.000 --> 00:01:55.000
it can be a great opportunity to prevent internal attacks.

38
00:01:55.000 --> 00:01:58.010
By forcing code through a peer review cycle,

39
00:01:58.010 --> 00:01:59.060
and then only deploying

40
00:01:59.060 --> 00:02:02.020
through an automated gating process,

41
00:02:02.020 --> 00:02:05.000
you can ensure that the code running in production

42
00:02:05.000 --> 00:02:07.060
has been fully vetted.

43
00:02:07.060 --> 00:02:09.070
As long as the boxes doing the deployments

44
00:02:09.070 --> 00:02:11.060
themselves are secured,

45
00:02:11.060 --> 00:02:16.070
you have set yourself up to be more secure than not.

46
00:02:16.070 --> 00:02:18.060
There are several other aspects

47
00:02:18.060 --> 00:02:20.080
of secure deployment strategies,

48
00:02:20.080 --> 00:02:23.050
but that could be a course on its own.

49
00:02:23.050 --> 00:02:26.010
My purpose here is to get you thinking

50
00:02:26.010 --> 00:02:29.000
of ways to improve your culture of security

51
00:02:29.000 --> 00:02:31.000
around deployments.

52
00:02:31.000 --> 00:02:34.070
As always, try and think like a bad actor

53
00:02:34.070 --> 00:02:37.020
and see how you can prevent attacks,

54
00:02:37.020 --> 00:02:40.000
and focus your efforts there first.

