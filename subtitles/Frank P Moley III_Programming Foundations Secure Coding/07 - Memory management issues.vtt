WEBVTT
1
00:00:01.000 --> 00:00:03.000
- Memory management vulnerabilities

2
00:00:03.000 --> 00:00:05.010
are a very special class

3
00:00:05.010 --> 00:00:07.060
in that they're only exposed in certain languages

4
00:00:07.060 --> 00:00:10.030
and certain situations.

5
00:00:10.030 --> 00:00:13.070
The most common and the one that I will focus on

6
00:00:13.070 --> 00:00:16.060
is the buffer overflow attack.

7
00:00:16.060 --> 00:00:19.030
I want to start by providing a clear indication

8
00:00:19.030 --> 00:00:24.000
of how bad buffer overflow vulnerabilities are.

9
00:00:24.000 --> 00:00:26.010
There are several yearly contests

10
00:00:26.010 --> 00:00:28.060
that result in large sums of prize money

11
00:00:28.060 --> 00:00:32.010
for security researchers that compromise systems,

12
00:00:32.010 --> 00:00:34.060
often called rooting.

13
00:00:34.060 --> 00:00:37.080
Some of the most profitable vulnerabilities

14
00:00:37.080 --> 00:00:39.050
are called Zero Days

15
00:00:39.050 --> 00:00:43.030
are a result of buffer overflow attacks.

16
00:00:43.030 --> 00:00:45.060
These attacks are catastrophic

17
00:00:45.060 --> 00:00:48.040
and can be expensive to say the least

18
00:00:48.040 --> 00:00:51.070
and unfortunately are hard for those developers

19
00:00:51.070 --> 00:00:54.000
who deal with higher level languages

20
00:00:54.000 --> 00:00:56.020
to see or understand.

21
00:00:56.020 --> 00:00:58.090
In higher level languages, for instance,

22
00:00:58.090 --> 00:01:02.080
we seldom deal with raw memory allocations.

23
00:01:02.080 --> 00:01:07.030
Even in languages like Go, Java and C#,

24
00:01:07.030 --> 00:01:08.080
where we have pointers,

25
00:01:08.080 --> 00:01:12.040
we're not usually able to manipulate raw memory

26
00:01:12.040 --> 00:01:15.040
without dipping into unsafe code.

27
00:01:15.040 --> 00:01:21.030
As such, these languages are usually safe from these errors.

28
00:01:21.030 --> 00:01:23.080
There are lessons to be learned, however,

29
00:01:23.080 --> 00:01:27.080
from those of us that use these higher level languages.

30
00:01:27.080 --> 00:01:29.090
So, I encourage you to to listen

31
00:01:29.090 --> 00:01:33.080
and find parallels in how you deal with data structures

32
00:01:33.080 --> 00:01:36.070
in your code.

33
00:01:36.070 --> 00:01:40.020
In lower level languages like C for instance,

34
00:01:40.020 --> 00:01:43.080
you are dealing with arrays and pointers to them.

35
00:01:43.080 --> 00:01:48.040
And ultimately the memory allocated to them.

36
00:01:48.040 --> 00:01:51.050
As such, you are now fully responsible

37
00:01:51.050 --> 00:01:53.070
for checking the bounds of the array

38
00:01:53.070 --> 00:01:57.030
and here enters the problem.

39
00:01:57.030 --> 00:02:00.060
Let's say, for instance, you declare two variables.

40
00:02:00.060 --> 00:02:03.000
The first is a character array

41
00:02:03.000 --> 00:02:04.070
of say 10 bytes

42
00:02:04.070 --> 00:02:09.080
and the second is an unsigned integer of say four bytes.

43
00:02:09.080 --> 00:02:13.040
They happen to be next to each other in memory.

44
00:02:13.040 --> 00:02:15.030
Now, you have a program

45
00:02:15.030 --> 00:02:18.040
that asks for input and stores that value

46
00:02:18.040 --> 00:02:20.090
into the first array.

47
00:02:20.090 --> 00:02:23.020
You expect no more than nine characters

48
00:02:23.020 --> 00:02:27.040
in your response, however, you don't check the length

49
00:02:27.040 --> 00:02:31.030
of the input, you just write it to the variable.

50
00:02:31.030 --> 00:02:33.080
If an attacker writes a value

51
00:02:33.080 --> 00:02:36.070
that is say 13 characters in size,

52
00:02:36.070 --> 00:02:40.010
it will overwrite the four bytes of the integer

53
00:02:40.010 --> 00:02:43.030
with the last one being a stop byte.

54
00:02:43.030 --> 00:02:48.010
Now, if your program then accesses the unsigned integer,

55
00:02:48.010 --> 00:02:51.010
and the attacker has done his or her homework,

56
00:02:51.010 --> 00:02:55.000
the program may execute other instruction sets

57
00:02:55.000 --> 00:02:57.060
often at the command of the attacker

58
00:02:57.060 --> 00:03:01.060
through user input or exception flows.

59
00:03:01.060 --> 00:03:04.060
Now, some exploitations can impact the stack,

60
00:03:04.060 --> 00:03:06.090
others can impact the heap

61
00:03:06.090 --> 00:03:10.060
but both can be leveraged in specific cases

62
00:03:10.060 --> 00:03:12.090
and neither is pretty.

63
00:03:12.090 --> 00:03:14.070
There are a couple of mitigations

64
00:03:14.070 --> 00:03:16.030
that you can put in place

65
00:03:16.030 --> 00:03:19.010
but really there's only one fix.

66
00:03:19.010 --> 00:03:20.070
One of the mitigations

67
00:03:20.070 --> 00:03:23.060
is to randomize your memory allocations

68
00:03:23.060 --> 00:03:26.030
so that the likelihood of memory spaces touching

69
00:03:26.030 --> 00:03:30.090
is decreased but this is nowhere near perfect.

70
00:03:30.090 --> 00:03:33.040
The same can be said for various protections

71
00:03:33.040 --> 00:03:38.040
for pointers, executable space or stack alteration.

72
00:03:38.040 --> 00:03:42.060
Again, while this protection strategy can be good mitigation

73
00:03:42.060 --> 00:03:47.030
for legacy code, it is not foolproof.

74
00:03:47.030 --> 00:03:50.040
The best way to protect against these attacks

75
00:03:50.040 --> 00:03:53.040
is actually a three-fold approach.

76
00:03:53.040 --> 00:03:58.020
The first is to use when available native protections

77
00:03:58.020 --> 00:04:00.070
in your development language.

78
00:04:00.070 --> 00:04:03.050
In addition, you should validate your inputs

79
00:04:03.050 --> 00:04:06.090
to ensure they're within the acceptable bounds

80
00:04:06.090 --> 00:04:09.060
and they cannot overflow the buffer.

81
00:04:09.060 --> 00:04:14.020
Finally, leveraging a good testing strategy.

82
00:04:14.020 --> 00:04:16.030
One thing you should note

83
00:04:16.030 --> 00:04:18.040
is that even if you aren't writing code

84
00:04:18.040 --> 00:04:23.010
in assembly, C, C++ or Fortran,

85
00:04:23.010 --> 00:04:26.070
you may be leveraging components that are.

86
00:04:26.070 --> 00:04:29.080
You need to consider this whenever you write code

87
00:04:29.080 --> 00:04:34.000
that input and boundary checks are always important.

