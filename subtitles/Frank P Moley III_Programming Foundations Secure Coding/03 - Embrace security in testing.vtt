WEBVTT
1
00:00:01.000 --> 00:00:04.010
- In my mind, no single aspect

2
00:00:04.010 --> 00:00:09.020
of the SDLC can have as much impact as testing.

3
00:00:09.020 --> 00:00:13.060
Unfortunately no single aspect of the SDLC

4
00:00:13.060 --> 00:00:17.000
is ignored as much as testing.

5
00:00:17.000 --> 00:00:19.040
Testing for security is no exception,

6
00:00:19.040 --> 00:00:23.000
in fact it may be even worse.

7
00:00:23.000 --> 00:00:27.050
There are three key strategies to testing for security.

8
00:00:27.050 --> 00:00:32.010
The first strategy is to leverage attack trees.

9
00:00:32.010 --> 00:00:35.050
As a team, you will design user personas

10
00:00:35.050 --> 00:00:40.030
and attack trees that give you step by step attack vectors

11
00:00:40.030 --> 00:00:42.090
against your application.

12
00:00:42.090 --> 00:00:46.030
You can then weigh the likelihood of these attacks

13
00:00:46.030 --> 00:00:49.060
and the risks presented by them.

14
00:00:49.060 --> 00:00:51.080
Once you have this information,

15
00:00:51.080 --> 00:00:54.080
you are given an ordered list of scenarios

16
00:00:54.080 --> 00:00:56.090
that should be mitigated.

17
00:00:56.090 --> 00:01:02.020
You then write test to confirm the mitigations are in place.

18
00:01:02.020 --> 00:01:05.080
This testing is highly effective in assuring

19
00:01:05.080 --> 00:01:08.070
that your controls are in place correctly

20
00:01:08.070 --> 00:01:11.070
to help protect your system.

21
00:01:11.070 --> 00:01:15.010
These tests if properly automated,

22
00:01:15.010 --> 00:01:19.020
can then be run on every build and every release.

23
00:01:19.020 --> 00:01:23.070
Now, keep in mind these trees do change over time,

24
00:01:23.070 --> 00:01:28.020
so your scenarios and tests will also have to change.

25
00:01:28.020 --> 00:01:32.060
The next strategy is to leverage the risk register.

26
00:01:32.060 --> 00:01:36.010
As a team, you should maintain a list of risks

27
00:01:36.010 --> 00:01:38.010
within your system.

28
00:01:38.010 --> 00:01:42.070
These risks will have controls and mitigations in place.

29
00:01:42.070 --> 00:01:46.010
Some of these risks should be security focused.

30
00:01:46.010 --> 00:01:49.040
And this is where testing comes into play.

31
00:01:49.040 --> 00:01:52.090
Your risk register should be leveraged in testing

32
00:01:52.090 --> 00:01:57.040
to ensure that your risks are handled appropriately.

33
00:01:57.040 --> 00:02:01.040
As such, your security risks should also be tested

34
00:02:01.040 --> 00:02:04.020
on each and every release.

35
00:02:04.020 --> 00:02:07.010
Once again, risks change,

36
00:02:07.010 --> 00:02:09.050
and you have to address these changes

37
00:02:09.050 --> 00:02:13.040
in your existing tests as well as new tests.

38
00:02:13.040 --> 00:02:16.010
Another area that testing comes into play

39
00:02:16.010 --> 00:02:19.010
is with penetration testing tools.

40
00:02:19.010 --> 00:02:21.050
You may not have a security focused person

41
00:02:21.050 --> 00:02:24.030
on your team who can do this.

42
00:02:24.030 --> 00:02:27.080
As such, you may have to take the lead.

43
00:02:27.080 --> 00:02:30.010
Penetration tools often require

44
00:02:30.010 --> 00:02:32.050
an initial learning curve to use.

45
00:02:32.050 --> 00:02:37.000
And then, often another sometimes steeper learning curve

46
00:02:37.000 --> 00:02:40.080
to understand and interpret the results.

47
00:02:40.080 --> 00:02:44.030
This testing however can become essential

48
00:02:44.030 --> 00:02:47.030
to making your software more secure

49
00:02:47.030 --> 00:02:50.030
by identifying results.

50
00:02:50.030 --> 00:02:54.040
Some tools can even plug into your CI/CD pipeline,

51
00:02:54.040 --> 00:02:58.060
and self-discover your system based on your other tests

52
00:02:58.060 --> 00:03:01.050
or service documentation.

53
00:03:01.050 --> 00:03:04.000
These tools can be expensive,

54
00:03:04.000 --> 00:03:07.010
but are very powerful.

55
00:03:07.010 --> 00:03:09.060
You should not try to tackle all

56
00:03:09.060 --> 00:03:12.040
of theses tests at once however.

57
00:03:12.040 --> 00:03:16.010
Make a testing plan that works on one area,

58
00:03:16.010 --> 00:03:19.020
and try to make significant headway in that area

59
00:03:19.020 --> 00:03:22.000
before moving on to others.

60
00:03:22.000 --> 00:03:25.000
A word of caution here, while you may be tempted

61
00:03:25.000 --> 00:03:27.070
to start with penetration testing,

62
00:03:27.070 --> 00:03:32.050
keep in mind the security mindset of the whole team.

63
00:03:32.050 --> 00:03:36.040
If you dump a list of vulnerabilities on them day one,

64
00:03:36.040 --> 00:03:38.090
they may never catch up.

65
00:03:38.090 --> 00:03:43.000
Work together and focus on your plan.

