WEBVTT
1
00:00:01.010 --> 00:00:04.090
- There are often many data points an application needs

2
00:00:04.090 --> 00:00:08.010
in order to operate successfully.

3
00:00:08.010 --> 00:00:11.030
These data points can be as simple as URLs

4
00:00:11.030 --> 00:00:16.040
and other resources and as complex as encryption keys.

5
00:00:16.040 --> 00:00:20.020
While this data is needed for applications to operate,

6
00:00:20.020 --> 00:00:25.010
in the wrong hands, they can be treacherous to a system.

7
00:00:25.010 --> 00:00:28.020
Let's start our discussion with a common use case

8
00:00:28.020 --> 00:00:31.060
and that is connecting to a remote service.

9
00:00:31.060 --> 00:00:34.070
Usually, to connect to a remote service,

10
00:00:34.070 --> 00:00:36.000
you need to store the URL

11
00:00:36.000 --> 00:00:38.050
of that service along with the credentials

12
00:00:38.050 --> 00:00:42.000
or tokens needed to consume that service.

13
00:00:42.000 --> 00:00:45.090
That information is needed by your application at runtime.

14
00:00:45.090 --> 00:00:50.020
Serving that data at runtime can be the challenge.

15
00:00:50.020 --> 00:00:52.070
The attack vector associated

16
00:00:52.070 --> 00:00:55.090
with this should be relatively straightforward.

17
00:00:55.090 --> 00:01:00.070
If you expose the data you need for your system to operate,

18
00:01:00.070 --> 00:01:02.070
the attacker can then use

19
00:01:02.070 --> 00:01:07.090
that same data to mimic you to your backend service.

20
00:01:07.090 --> 00:01:11.000
The attacker can then use the mimic behavior

21
00:01:11.000 --> 00:01:13.010
to manipulate the backend service

22
00:01:13.010 --> 00:01:17.000
and either exploit it or cause it

23
00:01:17.000 --> 00:01:20.020
to make your system exploitable.

24
00:01:20.020 --> 00:01:24.000
Solving these problems are actually very straightforward.

25
00:01:24.000 --> 00:01:25.090
One way to help solve these

26
00:01:25.090 --> 00:01:29.080
issues is through a secret storage service.

27
00:01:29.080 --> 00:01:32.070
Your system needs a way to securely authenticate

28
00:01:32.070 --> 00:01:35.030
to the service, so you still need

29
00:01:35.030 --> 00:01:38.000
to protect that data point.

30
00:01:38.000 --> 00:01:43.030
Then, it can get the data it needs to operate at runtime.

31
00:01:43.030 --> 00:01:46.030
These tools are powerful for your application,

32
00:01:46.030 --> 00:01:48.080
because many of them also provide ways

33
00:01:48.080 --> 00:01:51.090
to rotate your credentials.

34
00:01:51.090 --> 00:01:55.020
Another key takeaway to prevent vulnerabilities

35
00:01:55.020 --> 00:01:57.020
related to data management

36
00:01:57.020 --> 00:02:00.020
is to ensure developers never commit sensitive

37
00:02:00.020 --> 00:02:03.020
information to source control.

38
00:02:03.020 --> 00:02:05.090
Even non-prod systems can provide an

39
00:02:05.090 --> 00:02:08.090
attack vector into your application

40
00:02:08.090 --> 00:02:11.000
or your system as a whole,

41
00:02:11.000 --> 00:02:14.090
so no sensitive information should ever be checked into the

42
00:02:14.090 --> 00:02:18.070
software configuration management or SCM.

43
00:02:18.070 --> 00:02:22.030
Finally, you should consider using certificates

44
00:02:22.030 --> 00:02:26.080
for your systems where there is a client/server component.

45
00:02:26.080 --> 00:02:29.090
Two-way certificate pinning allows your client

46
00:02:29.090 --> 00:02:32.090
to both authenticate with the server side

47
00:02:32.090 --> 00:02:37.010
but also to ensure the validity of the server side.

48
00:02:37.010 --> 00:02:40.080
This protects the internal data of both systems.

49
00:02:40.080 --> 00:02:44.040
This, coupled with secure client-side storage

50
00:02:44.040 --> 00:02:48.010
and digitally signed software updates will allow you

51
00:02:48.010 --> 00:02:51.050
to protect the data your application needs,

52
00:02:51.050 --> 00:02:54.020
its connections to the source systems,

53
00:02:54.020 --> 00:02:57.050
and help ensure valid traffic flows.

54
00:02:57.050 --> 00:03:01.050
Again, we find that much like other vulnerabilities,

55
00:03:01.050 --> 00:03:05.020
these can be mitigated with a little common sense,

56
00:03:05.020 --> 00:03:09.000
but we have to understand that the issues exist.

