WEBVTT
1
00:00:01.000 --> 00:00:04.000
- Providing authentication for an application

2
00:00:04.000 --> 00:00:06.010
is only half the battle.

3
00:00:06.010 --> 00:00:08.000
You also need to provide the rules

4
00:00:08.000 --> 00:00:11.020
around what that person can access.

5
00:00:11.020 --> 00:00:15.040
This is called authorization, and faulty authorization

6
00:00:15.040 --> 00:00:18.050
can lead to security defects that often

7
00:00:18.050 --> 00:00:21.000
are hard to track down.

8
00:00:21.000 --> 00:00:24.050
So let's start with the basics of what issues exist

9
00:00:24.050 --> 00:00:26.080
around authorization.

10
00:00:26.080 --> 00:00:29.070
Often, defects arise in this arena

11
00:00:29.070 --> 00:00:33.050
because we either have access control lists in place,

12
00:00:33.050 --> 00:00:35.070
but they aren't applied correctly,

13
00:00:35.070 --> 00:00:39.010
or they simply haven't been applied.

14
00:00:39.010 --> 00:00:43.060
In either case, a user could get access to resources

15
00:00:43.060 --> 00:00:48.000
or data that he or she shouldn't have access to.

16
00:00:48.000 --> 00:00:52.010
Consider the use case where your site has a user portion

17
00:00:52.010 --> 00:00:55.030
and an administrator portion.

18
00:00:55.030 --> 00:00:58.090
If you don't have solid access control lists,

19
00:00:58.090 --> 00:01:03.030
your users could access your admin section of your site.

20
00:01:03.030 --> 00:01:06.050
This obviously give them more control

21
00:01:06.050 --> 00:01:09.000
that they should ever have access to.

22
00:01:09.000 --> 00:01:11.090
Now consider that in your admin site,

23
00:01:11.090 --> 00:01:15.020
you can see all the demographic and personal details

24
00:01:15.020 --> 00:01:17.040
of your customers.

25
00:01:17.040 --> 00:01:19.070
Imagine not only the negative publicity

26
00:01:19.070 --> 00:01:23.040
your application would receive, but even more importantly,

27
00:01:23.040 --> 00:01:25.030
your customers could potentially

28
00:01:25.030 --> 00:01:27.020
have their identities stolen.

29
00:01:27.020 --> 00:01:30.070
And your site would be responsible.

30
00:01:30.070 --> 00:01:34.030
A couple of rules to consider when doing authorization.

31
00:01:34.030 --> 00:01:38.020
First off, you should always do authorization checks

32
00:01:38.020 --> 00:01:41.070
server-side in a client-server program,

33
00:01:41.070 --> 00:01:44.080
and never client-side only.

34
00:01:44.080 --> 00:01:48.000
If a user impersonates the client side,

35
00:01:48.000 --> 00:01:51.020
and you don't check rules server-side,

36
00:01:51.020 --> 00:01:55.060
you will potentially expose protected transactions.

37
00:01:55.060 --> 00:01:59.010
In addition, all permission state changes

38
00:01:59.010 --> 00:02:03.070
should require logging out, and logging back in.

39
00:02:03.070 --> 00:02:08.030
Even your privileged users should have ACLs in place,

40
00:02:08.030 --> 00:02:12.040
and not be able to change them in a single session.

41
00:02:12.040 --> 00:02:15.020
Often for troubleshooting and support,

42
00:02:15.020 --> 00:02:18.030
we put impersonation models in place.

43
00:02:18.030 --> 00:02:21.050
But they should only be part of authentication,

44
00:02:21.050 --> 00:02:24.040
and the session should be static when it comes

45
00:02:24.040 --> 00:02:29.000
to permission models, to help protect from internal threats.

46
00:02:29.000 --> 00:02:32.070
Furthermore, each transaction should check

47
00:02:32.070 --> 00:02:35.010
the authorization of the user.

48
00:02:35.010 --> 00:02:38.090
It should not simply be checked once.

49
00:02:38.090 --> 00:02:42.060
This becomes even more critical in microservices

50
00:02:42.060 --> 00:02:46.030
architectures where the systems are distributed.

51
00:02:46.030 --> 00:02:50.050
You should only serve data, or execute transactions,

52
00:02:50.050 --> 00:02:54.040
if the principle has the authority to do so.

53
00:02:54.040 --> 00:02:58.050
So mitigations for these risks are twofold.

54
00:02:58.050 --> 00:03:02.090
First and foremost, you need good controls in place

55
00:03:02.090 --> 00:03:06.020
around how you review, and control access

56
00:03:06.020 --> 00:03:08.080
within your application.

57
00:03:08.080 --> 00:03:11.080
Using code reviews, design reviews,

58
00:03:11.080 --> 00:03:15.030
and even acceptance criteria can help you

59
00:03:15.030 --> 00:03:19.030
evaluate authorization during development.

60
00:03:19.030 --> 00:03:22.030
This will not only help you prevent issues,

61
00:03:22.030 --> 00:03:25.050
but it will also help you understand

62
00:03:25.050 --> 00:03:28.090
the authorization flows that exist.

63
00:03:28.090 --> 00:03:31.040
In addition to reviewing code,

64
00:03:31.040 --> 00:03:34.010
you should focus on documenting and discussing

65
00:03:34.010 --> 00:03:39.030
changes to access control lists on a regular basis.

66
00:03:39.030 --> 00:03:43.050
The second mitigation, and maybe even more effective,

67
00:03:43.050 --> 00:03:48.060
is good testing of your ACLs on every build.

68
00:03:48.060 --> 00:03:52.080
You should leverage role-based users in your test suites,

69
00:03:52.080 --> 00:03:56.040
and look at every transaction from both the positive

70
00:03:56.040 --> 00:04:00.060
and the negative perspective for every role.

71
00:04:00.060 --> 00:04:03.050
Essentially, you're building a matrix

72
00:04:03.050 --> 00:04:07.020
to check all of your access controls.

73
00:04:07.020 --> 00:04:10.090
Spend some time in processes and testing,

74
00:04:10.090 --> 00:04:13.050
to help prevent these security risks

75
00:04:13.050 --> 00:04:16.000
from becoming an issue for you.

