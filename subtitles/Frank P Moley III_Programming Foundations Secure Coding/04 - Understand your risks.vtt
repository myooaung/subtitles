WEBVTT
1
00:00:00.070 --> 00:00:03.090
- One of the core tenets of security

2
00:00:03.090 --> 00:00:06.070
especially in a software development shop

3
00:00:06.070 --> 00:00:10.050
is understanding and mitigating your risks.

4
00:00:10.050 --> 00:00:13.090
An entire course could be devoted to risk management

5
00:00:13.090 --> 00:00:15.080
for software teams.

6
00:00:15.080 --> 00:00:17.050
But for this course,

7
00:00:17.050 --> 00:00:20.040
let's take a quick look at the basics.

8
00:00:20.040 --> 00:00:22.070
While I would like to convince you

9
00:00:22.070 --> 00:00:25.090
that you should test every possible scenario

10
00:00:25.090 --> 00:00:27.070
on every release,

11
00:00:27.070 --> 00:00:32.090
the reality is that this isn't possible in most businesses.

12
00:00:32.090 --> 00:00:35.010
There just isn't enough time in the day

13
00:00:35.010 --> 00:00:38.090
to write or execute every test.

14
00:00:38.090 --> 00:00:41.010
If you could write them all,

15
00:00:41.010 --> 00:00:44.060
execution then becomes an issue for most teams

16
00:00:44.060 --> 00:00:47.040
as long build and development cycles

17
00:00:47.040 --> 00:00:52.020
are really an anti-pattern in today's processes.

18
00:00:52.020 --> 00:00:54.040
To address this problem,

19
00:00:54.040 --> 00:00:57.000
focus on the high-risk areas

20
00:00:57.000 --> 00:01:01.010
and determine where to get the most reward.

21
00:01:01.010 --> 00:01:02.080
You'll see an immediate value

22
00:01:02.080 --> 00:01:06.030
from automating the mitigations and testing

23
00:01:06.030 --> 00:01:10.040
for these high-risk areas on each release.

24
00:01:10.040 --> 00:01:12.010
You will have immediate feedback

25
00:01:12.010 --> 00:01:14.080
to your team and stakeholders

26
00:01:14.080 --> 00:01:17.000
that the software you are delivering

27
00:01:17.000 --> 00:01:20.040
is not exposing you to these risks

28
00:01:20.040 --> 00:01:25.090
or at the very least not increasing your exposure.

29
00:01:25.090 --> 00:01:30.000
Understanding risk isn't only about testing them.

30
00:01:30.000 --> 00:01:33.080
If a software development team can identify the risks

31
00:01:33.080 --> 00:01:36.010
earlier in the process,

32
00:01:36.010 --> 00:01:37.090
more emphasis can be applied

33
00:01:37.090 --> 00:01:42.030
to requirements, design, and development.

34
00:01:42.030 --> 00:01:43.080
In software development,

35
00:01:43.080 --> 00:01:48.030
we've repeatedly learned that cost savings of fixing issues

36
00:01:48.030 --> 00:01:51.050
earlier in the process is significant.

37
00:01:51.050 --> 00:01:55.070
While the team engages in understanding risks together,

38
00:01:55.070 --> 00:02:01.020
the awareness of these risks penetrates every job function.

39
00:02:01.020 --> 00:02:05.000
When you truly incorporate this model of identifying risks

40
00:02:05.000 --> 00:02:07.040
early in your development process,

41
00:02:07.040 --> 00:02:13.030
your entire team, your project, and your budget benefit.

42
00:02:13.030 --> 00:02:15.060
Imagine for a moment you're a developer

43
00:02:15.060 --> 00:02:20.060
who understands the risk exposure of your application.

44
00:02:20.060 --> 00:02:22.090
You can then question requirements

45
00:02:22.090 --> 00:02:27.090
and evaluate design decisions that include these risks.

46
00:02:27.090 --> 00:02:29.060
More importantly,

47
00:02:29.060 --> 00:02:33.060
armed with knowledge of secure coding and risks,

48
00:02:33.060 --> 00:02:38.070
you can provide more tangible feedback on code reviews.

49
00:02:38.070 --> 00:02:42.070
Understanding your risk is not static however.

50
00:02:42.070 --> 00:02:46.090
Risk must constantly be evaluated and updated

51
00:02:46.090 --> 00:02:51.000
to match not only the changes in your functionality,

52
00:02:51.000 --> 00:02:55.030
but also the changes in the environment around you.

53
00:02:55.030 --> 00:02:58.060
Everyday, new attacks are discovered,

54
00:02:58.060 --> 00:03:01.030
new reasons for being attacked develop,

55
00:03:01.030 --> 00:03:04.020
and new information is obtained.

56
00:03:04.020 --> 00:03:06.040
My suggestion is to leverage

57
00:03:06.040 --> 00:03:09.050
a portion of your regular planning sessions

58
00:03:09.050 --> 00:03:13.070
to discuss these new risks and do it as a team

59
00:03:13.070 --> 00:03:17.080
and apply these changes to your risk register.

60
00:03:17.080 --> 00:03:21.030
Always keep in mind that the goal of secure coding

61
00:03:21.030 --> 00:03:23.080
is not just about the bytes.

62
00:03:23.080 --> 00:03:28.030
It's an overall culture that you're trying to create.

63
00:03:28.030 --> 00:03:31.020
Understanding risks moves you closer

64
00:03:31.020 --> 00:03:35.000
to improving the security culture in your organization.

