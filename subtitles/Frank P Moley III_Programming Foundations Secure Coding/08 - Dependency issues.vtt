WEBVTT
1
00:00:01.000 --> 00:00:03.080
- Dependency Management is often the bane

2
00:00:03.080 --> 00:00:06.000
of software engineering.

3
00:00:06.000 --> 00:00:09.010
When it comes to security-related topics,

4
00:00:09.010 --> 00:00:12.010
it's even more so of a problem.

5
00:00:12.010 --> 00:00:14.090
Many times when we write software,

6
00:00:14.090 --> 00:00:18.000
we can write the most secure code ever

7
00:00:18.000 --> 00:00:22.020
and still be susceptible to security vulnerabilities

8
00:00:22.020 --> 00:00:24.080
because of a dependency.

9
00:00:24.080 --> 00:00:29.000
We all know the stories of the old and vulnerable component

10
00:00:29.000 --> 00:00:32.090
that caused a system, its data, or worse,

11
00:00:32.090 --> 00:00:36.010
all the customer data to become exposed.

12
00:00:36.010 --> 00:00:39.000
Some of these leaks have been so bad

13
00:00:39.000 --> 00:00:42.010
that they put a large portion of the population at risk

14
00:00:42.010 --> 00:00:45.020
for credit fraud or identity theft.

15
00:00:45.020 --> 00:00:47.040
This is something we must always remember

16
00:00:47.040 --> 00:00:51.020
when writing software and trying to secure it.

17
00:00:51.020 --> 00:00:54.080
So obviously, the exploit is out of our control

18
00:00:54.080 --> 00:00:57.010
since we don't own the code.

19
00:00:57.010 --> 00:00:59.090
Now, if it's an unpatched defect,

20
00:00:59.090 --> 00:01:02.030
we could of course fix it ourselves

21
00:01:02.030 --> 00:01:04.020
assuming it is open source code.

22
00:01:04.020 --> 00:01:07.090
However, that still is a process.

23
00:01:07.090 --> 00:01:10.030
The reality is however, that many

24
00:01:10.030 --> 00:01:13.080
of the vulnerabilities have already been discovered.

25
00:01:13.080 --> 00:01:15.080
These discoveries are documented

26
00:01:15.080 --> 00:01:20.020
and often, they indicate the dependency inversion number

27
00:01:20.020 --> 00:01:23.060
that is impacted by the security issue.

28
00:01:23.060 --> 00:01:28.050
They also often document when the issue was fixed.

29
00:01:28.050 --> 00:01:31.070
As such, the simplest path then,

30
00:01:31.070 --> 00:01:35.040
is to upgrade your components to a fixed version.

31
00:01:35.040 --> 00:01:37.060
Now I don't want to pretend that this is easy

32
00:01:37.060 --> 00:01:39.050
from a system level.

33
00:01:39.050 --> 00:01:42.050
But as for fixing issues with dependencies,

34
00:01:42.050 --> 00:01:45.000
it often resolves the issue.

35
00:01:45.000 --> 00:01:48.010
We will assume for the sake of this discussion

36
00:01:48.010 --> 00:01:50.020
that nothing new is introduced,

37
00:01:50.020 --> 00:01:53.050
which of course, is not always the case.

38
00:01:53.050 --> 00:01:57.030
The real question however, is not how to fix these,

39
00:01:57.030 --> 00:02:01.020
but instead, how to identify them.

40
00:02:01.020 --> 00:02:04.000
There are actually several tools,

41
00:02:04.000 --> 00:02:07.070
some free like from OWASP, that run scans

42
00:02:07.070 --> 00:02:10.090
on your bill of materials, or dependency graph,

43
00:02:10.090 --> 00:02:13.070
and identify which of your dependencies

44
00:02:13.070 --> 00:02:17.040
are actually vulnerable to an attack.

45
00:02:17.040 --> 00:02:21.030
Some paid tools even have detailed analysis

46
00:02:21.030 --> 00:02:22.070
that provides more information

47
00:02:22.070 --> 00:02:25.000
about the attack possibilities.

48
00:02:25.000 --> 00:02:29.000
But ultimately, they all point to similar,

49
00:02:29.000 --> 00:02:34.050
if not identical databases of CWEs and CVEs.

50
00:02:34.050 --> 00:02:38.040
So your strategy needs to simply be this,

51
00:02:38.040 --> 00:02:42.040
stay on top of dependencies, look for problem spots,

52
00:02:42.040 --> 00:02:46.000
and address those problems as needed.

