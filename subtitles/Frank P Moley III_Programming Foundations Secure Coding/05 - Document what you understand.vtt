WEBVTT
1
00:00:01.000 --> 00:00:04.090
- Documenting your designs, documenting your APIs,

2
00:00:04.090 --> 00:00:07.040
and documenting your code are all

3
00:00:07.040 --> 00:00:10.040
built into a team's development process.

4
00:00:10.040 --> 00:00:13.020
What usually isn't part of the process

5
00:00:13.020 --> 00:00:16.020
is documenting all of the security decisions

6
00:00:16.020 --> 00:00:17.090
you have made.

7
00:00:17.090 --> 00:00:20.070
Now, I know, I know, I've heard all the excuses

8
00:00:20.070 --> 00:00:23.050
in the book about documentation.

9
00:00:23.050 --> 00:00:26.040
Heck, I've used many of them myself.

10
00:00:26.040 --> 00:00:28.010
I've heard documentation is dead

11
00:00:28.010 --> 00:00:31.080
the minute it's written, or documentation is never read,

12
00:00:31.080 --> 00:00:35.070
or that it's too hard to find the answers you really need.

13
00:00:35.070 --> 00:00:39.010
The point is, though, that regardless of the excuses,

14
00:00:39.010 --> 00:00:42.030
there is value in documentation

15
00:00:42.030 --> 00:00:46.000
especially in the security realm, as you will see.

16
00:00:46.000 --> 00:00:48.090
One of the first things that you should document

17
00:00:48.090 --> 00:00:52.090
even if only on Post-it Notes is how are going to deal

18
00:00:52.090 --> 00:00:57.040
with security-related bugs found in production.

19
00:00:57.040 --> 00:01:00.000
Now, I won't argue that you need a full-blown

20
00:01:00.000 --> 00:01:03.040
vulnerability management plan, you do,

21
00:01:03.040 --> 00:01:05.060
but that's for another course.

22
00:01:05.060 --> 00:01:08.070
You do, however, at least need to have a plan

23
00:01:08.070 --> 00:01:13.020
to prioritize and fix production security bugs

24
00:01:13.020 --> 00:01:17.000
and route them through your development process.

25
00:01:17.000 --> 00:01:22.050
This document can be very useful when a really bad bug

26
00:01:22.050 --> 00:01:27.020
or an industry scare shows its ugly head.

27
00:01:27.020 --> 00:01:29.060
You will be better prepared to move the fix

28
00:01:29.060 --> 00:01:33.040
quickly to production and protect your company

29
00:01:33.040 --> 00:01:36.020
and your customers.

30
00:01:36.020 --> 00:01:41.010
You should also document your risks in a risk register.

31
00:01:41.010 --> 00:01:44.020
The purpose of this is to not only document

32
00:01:44.020 --> 00:01:47.010
the risks that are in the application,

33
00:01:47.010 --> 00:01:51.020
but the ways you plan to mitigate those risks.

34
00:01:51.020 --> 00:01:54.020
This can be very valuable to a team

35
00:01:54.020 --> 00:01:57.040
when trying to determine where the risks are

36
00:01:57.040 --> 00:02:00.070
in your application during a planning session

37
00:02:00.070 --> 00:02:03.010
or design review.

38
00:02:03.010 --> 00:02:06.060
Having risks documented gives you the foundation

39
00:02:06.060 --> 00:02:10.060
when it's time to reevaluate your risks.

40
00:02:10.060 --> 00:02:13.060
I also believe in documenting your risk mitigation

41
00:02:13.060 --> 00:02:16.000
and testing strategy.

42
00:02:16.000 --> 00:02:18.000
This can be easily incorporated

43
00:02:18.000 --> 00:02:21.020
into your definition-of-done statement,

44
00:02:21.020 --> 00:02:24.060
assuming, of course, that you want security testing

45
00:02:24.060 --> 00:02:27.060
to be part of that definition.

46
00:02:27.060 --> 00:02:30.020
There are a couple of other areas of documentation

47
00:02:30.020 --> 00:02:33.010
that I feel are so important

48
00:02:33.010 --> 00:02:35.040
that they're worth mentioning here.

49
00:02:35.040 --> 00:02:39.050
One is documenting your security bugs.

50
00:02:39.050 --> 00:02:42.010
Now, this is beyond just production bugs

51
00:02:42.010 --> 00:02:45.070
that are usually tracked in your issue tracking system.

52
00:02:45.070 --> 00:02:49.070
This document should be in the form of a bug book.

53
00:02:49.070 --> 00:02:53.010
As you're either fixing or identifying an issue,

54
00:02:53.010 --> 00:02:56.050
no matter the phase, you should document it

55
00:02:56.050 --> 00:02:58.050
in your bug book.

56
00:02:58.050 --> 00:03:01.050
This bug book can be reviewed at team meetings

57
00:03:01.050 --> 00:03:04.000
as training tools.

58
00:03:04.000 --> 00:03:07.090
Now, be careful not to make this a blame game.

59
00:03:07.090 --> 00:03:12.020
Instead, make it an educational tool.

60
00:03:12.020 --> 00:03:15.010
You may find that your developers can learn

61
00:03:15.010 --> 00:03:17.060
from each other's mistakes.

62
00:03:17.060 --> 00:03:20.020
The other is documenting traceability

63
00:03:20.020 --> 00:03:24.090
between your automated tests and the risk that they address.

64
00:03:24.090 --> 00:03:27.080
Now, this documentation should be in the form

65
00:03:27.080 --> 00:03:32.060
of a common naming pattern for your tests themselves.

66
00:03:32.060 --> 00:03:36.060
On reason to do this is that as you evaluate your risks

67
00:03:36.060 --> 00:03:39.080
and make changes, you know immediately

68
00:03:39.080 --> 00:03:42.000
which tests you need to address,

69
00:03:42.000 --> 00:03:46.010
whether it's an update, a rewrite, or a flat out removal

70
00:03:46.010 --> 00:03:48.060
from the test suite.

71
00:03:48.060 --> 00:03:52.000
Another reason is that this will prevent regression

72
00:03:52.000 --> 00:03:54.020
of security bugs.

73
00:03:54.020 --> 00:03:58.020
These can be especially nasty from a publicity perspective

74
00:03:58.020 --> 00:04:03.030
to have that same bug identified multiple times.

75
00:04:03.030 --> 00:04:06.020
Now, this is just a glance at documentation,

76
00:04:06.020 --> 00:04:09.030
but I do hope it gives you a solid perspective

77
00:04:09.030 --> 00:04:12.070
into the needs of documenting your security stance

78
00:04:12.070 --> 00:04:15.000
and the value around it.

