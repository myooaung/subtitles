WEBVTT
1
00:00:05.360 --> 00:00:08.700
Welcome back everyone to part two with the data framed series of lectures.

2
00:00:08.750 --> 00:00:10.690
We're going to head right where we left off last time.

3
00:00:10.790 --> 00:00:12.440
Let's jump back to the Jupiter notebook.

4
00:00:12.470 --> 00:00:14.880
All right here we are back at the Jupiter notebook.

5
00:00:14.900 --> 00:00:17.270
I'm going to be using the same data frame as last time.

6
00:00:17.420 --> 00:00:24.560
STURMER we just had to say plays and the pins PD import ranchmen set the seed to 101 and then say the

7
00:00:24.560 --> 00:00:31.790
data frame was wrapped then 5 4 and then here we have our data frame OK.

8
00:00:31.990 --> 00:00:34.190
Let's go in and talk about conditional selection.

9
00:00:34.330 --> 00:00:39.600
A very important feature of PANDAS is the ability to perform conditional selection using bracket notation.

10
00:00:39.670 --> 00:00:46.600
And this is going to be very similar to PI for instance phase comparison operator against the data frame

11
00:00:46.900 --> 00:00:49.970
such as asking where is the data frame greater than zero.

12
00:00:50.020 --> 00:00:56.230
I will get a data from back of boolean values where it returns true data from value at that point was

13
00:00:56.230 --> 00:00:59.380
greater than zero and false if it was not greater than zero.

14
00:00:59.710 --> 00:01:05.170
And this is very similar to the same conditional selection applied to an entire empire except in this

15
00:01:05.170 --> 00:01:07.320
case we're doing of pand the state of frames.

16
00:01:07.450 --> 00:01:17.200
And just like this we can go ahead and say bullwhips Boudia if is equal to DFA greater than zero and

17
00:01:17.290 --> 00:01:18.540
say Bulteel.

18
00:01:18.580 --> 00:01:19.920
Go ahead and check that out.

19
00:01:21.650 --> 00:01:28.070
And here we have our boolean data frame and if we pass that in to our original data frame with bracket

20
00:01:28.070 --> 00:01:37.700
notation then we will get out as a result values where it was true and Knoll's or any n where it happened

21
00:01:37.700 --> 00:01:38.770
to be false.

22
00:01:38.930 --> 00:01:44.180
And that's the way you can use conditional selection along with a data frame.

23
00:01:44.180 --> 00:01:47.810
Now usually you probably wouldn't be separating this out into two steps.

24
00:01:47.870 --> 00:01:49.190
You would just say.

25
00:01:49.220 --> 00:01:54.800
And then in brackets something like ZF greater than zero then you would get this result.

26
00:01:54.980 --> 00:02:01.370
This sort of operation with a data frame against a comparison operator isn't that common.

27
00:02:01.490 --> 00:02:06.770
Most likely you'll end up doing is instead of just passing in the entire data frame you'll pass in a

28
00:02:06.830 --> 00:02:13.130
row or a column value and instead of returning Noll's with that's going to do is return only the rows

29
00:02:13.160 --> 00:02:17.930
or columns of the subset of that data frame where your conditions are true.

30
00:02:17.930 --> 00:02:20.640
Now let me go to show an example of what I mean by that.

31
00:02:20.760 --> 00:02:27.800
Go in and take a look at our original data from here we have Rose A-3 and columns w through Z.

32
00:02:28.030 --> 00:02:35.540
What I'm going to go ahead and do is specify D F of W greater than zero.

33
00:02:35.570 --> 00:02:38.420
And notice I get a series back.

34
00:02:38.420 --> 00:02:40.990
True true false true true.

35
00:02:41.210 --> 00:02:43.760
And this is linked to the actual index.

36
00:02:43.760 --> 00:02:50.350
And if I take a look at the W column I see that this corresponds with the W column values and the value

37
00:02:50.400 --> 00:02:52.930
index C was actually less than zero.

38
00:02:53.060 --> 00:02:55.580
So returns False for being greater than zero.

39
00:02:55.700 --> 00:03:02.330
I can now use this series of boolean values corresponding to rows to filter out rows based off of a

40
00:03:02.330 --> 00:03:08.420
column's value and that means if I pass and the series into a data frame using bracket notation to say

41
00:03:08.420 --> 00:03:15.020
something like Deia if DFW greater than zero I will only get back the rows where this happens to be

42
00:03:15.020 --> 00:03:21.670
true meaning I only get back the rows a b d and e it won't return row C since it was false here.

43
00:03:21.690 --> 00:03:24.230
Go ahead and run that and see what this looks like.

44
00:03:24.290 --> 00:03:25.100
Great.

45
00:03:25.100 --> 00:03:28.870
And now since I'm passing in a series I don't get those no values anymore.

46
00:03:29.000 --> 00:03:33.860
You only get those no values when you're doing this sort of condition on an entire data frame when you're

47
00:03:33.860 --> 00:03:36.430
actually passing in conditions based off of columns.

48
00:03:36.500 --> 00:03:41.530
You'll just get series values meaning you'll get only the rows were happens to be true.

49
00:03:41.600 --> 00:03:47.130
And this is the sort of conditional selection we're going to be using most often throughout this course.

50
00:03:47.140 --> 00:03:50.680
Let's go ahead and show just a few more examples to really drive this point home.

51
00:03:50.950 --> 00:03:57.830
Let's say I want to grab all the rows in my data frame where z is less than zero.

52
00:03:58.120 --> 00:04:05.450
So I say Deia if we're DNF of column Z is less than zero.

53
00:04:05.450 --> 00:04:08.410
Now let's take a look before we actually run this what should happen.

54
00:04:08.420 --> 00:04:10.470
Ohlund notice column Z.

55
00:04:10.700 --> 00:04:11.270
Where is it.

56
00:04:11.270 --> 00:04:12.150
Less than zero.

57
00:04:12.160 --> 00:04:20.250
Well that's only occurring in row C so column Z as in Zelda and then Rosia as in cat.

58
00:04:20.300 --> 00:04:22.210
This is the only row that should be returned.

59
00:04:22.220 --> 00:04:24.680
But remember asking for the entire data frame back.

60
00:04:24.800 --> 00:04:30.260
So it should return just this row C for us and there it is.

61
00:04:30.300 --> 00:04:31.550
OK great.

62
00:04:31.560 --> 00:04:36.480
Now something else to note here is that when you're doing these sort of commands go ahead and go back

63
00:04:36.480 --> 00:04:42.510
to R W greater than zero you get a data frame in response.

64
00:04:42.690 --> 00:04:46.810
And that means you can go ahead and call commands off of this data frame.

65
00:04:47.010 --> 00:04:50.210
Then you can do this either in one step or two steps.

66
00:04:50.280 --> 00:04:57.060
I'm going to go in and say result DSF is equal to this and then take a look at result DSF which is a

67
00:04:57.060 --> 00:04:58.350
subset of the data frame.

68
00:04:58.360 --> 00:05:00.240
Without that row see it.

69
00:05:00.480 --> 00:05:05.710
And that means I can go ahead and grab results off of this such as X.

70
00:05:06.120 --> 00:05:12.720
And here I have four values of x a b d and e based off of this resulting data frame that didn't have

71
00:05:12.720 --> 00:05:14.920
that row seen it as Charlie.

72
00:05:15.360 --> 00:05:21.150
But instead of actually separating this out into two stepsisters grabbing the X column I can do this

73
00:05:21.150 --> 00:05:29.350
all in one step and let me show you what I mean by that I can go out and say return the data frame where

74
00:05:29.350 --> 00:05:34.580
the column value of W happens to be greater than zero so returned those rows to me.

75
00:05:34.580 --> 00:05:37.300
And that means all the rows minus the C row.

76
00:05:37.300 --> 00:05:42.130
And since this is a data frame I can actually go ahead and stack commands such as bracket notation on

77
00:05:42.130 --> 00:05:45.700
top of that such as return the X column where that's true.

78
00:05:46.560 --> 00:05:53.310
And now I get the same results as I did up here except it's all done in one step and this is something

79
00:05:53.310 --> 00:05:55.630
that can be intimidating to beginners at first.

80
00:05:55.650 --> 00:06:00.150
So there's a lot of brackets and a lot of stuff going on here that essentially this is just instead

81
00:06:00.150 --> 00:06:06.150
of splitting everything up into multiple steps and putting it all into one step.

82
00:06:06.570 --> 00:06:13.080
And likewise since this is a data frame I can rack it for multiple columns by passing and a list such

83
00:06:13.080 --> 00:06:18.870
as y comma X and we can see if we get a result here.

84
00:06:18.870 --> 00:06:25.050
Let me go ahead and break this line down one more time to show the steps that we're taking.

85
00:06:25.050 --> 00:06:32.320
First off we're going to go in and say Boudia is equal to what it's going to say bhool series.

86
00:06:32.380 --> 00:06:34.160
It's that's a little more accurate.

87
00:06:35.790 --> 00:06:37.920
It's worth DFW is greater than zero.

88
00:06:38.120 --> 00:06:45.530
So if I say bull series I get this brilliant series back then what I'm going to go ahead and do is say

89
00:06:45.530 --> 00:06:52.620
result is equal to dif of that ball series.

90
00:06:53.460 --> 00:06:55.180
Let's go ahead and check out the results.

91
00:06:56.570 --> 00:07:04.680
And it should just be wherever that series was true which is a b d and e and there is my result.

92
00:07:04.800 --> 00:07:11.140
That scene data frame without the rose see in it and then I can go ahead and offer that results.

93
00:07:12.040 --> 00:07:20.320
Call a list of columns so we can go ahead and say why comma X and if we wanted to we could actually

94
00:07:20.320 --> 00:07:28.510
even separate the separate this out into one more step by saying Mike calls for a columns passing that

95
00:07:28.510 --> 00:07:35.630
list and then say a result of my calls and we get the exact same thing we have here that in one line

96
00:07:35.930 --> 00:07:41.780
as in multiple lines that means if you're ever confused on something that looks like this of a ton of

97
00:07:41.780 --> 00:07:46.400
brackets and panderers see if you can break it down into multiple steps if that makes more sense to

98
00:07:46.400 --> 00:07:49.740
you throughout the course we are going to be doing this type of notation.

99
00:07:49.880 --> 00:07:51.170
Kind of one liners.

100
00:07:51.170 --> 00:07:55.070
And as you get more and more comfortable of pandas you'll find yourself using these one liners more

101
00:07:55.070 --> 00:07:55.970
and more often.

102
00:07:56.030 --> 00:08:00.020
But if you're ever confused always feel free to break it down into multiple steps.

103
00:08:00.020 --> 00:08:05.330
The only disadvantage as far as breaking it down multiple steps is they are taking up memory which with

104
00:08:05.330 --> 00:08:07.080
each variable that you define.

105
00:08:07.190 --> 00:08:12.230
So as you get better and better of pandas you want to move towards a simple one line abstraction of

106
00:08:12.230 --> 00:08:13.690
all these commands.

107
00:08:13.700 --> 00:08:19.340
All right go ahead and pause the video now and really make sure you understand how line in 58.

108
00:08:19.340 --> 00:08:24.020
Here is the exact same thing as separate out into multiple lines.

109
00:08:25.270 --> 00:08:25.640
All right.

110
00:08:25.660 --> 00:08:27.190
Let's go ahead and explore real quick.

111
00:08:27.190 --> 00:08:31.460
The concept of using multiple conditions such as two or more conditions.

112
00:08:31.540 --> 00:08:37.890
Right now we feel comfortable with doing something like this which is returning a subset of the data

113
00:08:37.890 --> 00:08:39.520
frame based off of one condition.

114
00:08:39.720 --> 00:08:45.120
But what if you wanted multiple conditions such as where it w is greater than zero and Y was greater

115
00:08:45.120 --> 00:08:46.140
than one.

116
00:08:46.500 --> 00:08:56.550
Well what you could do is try something like this is in parentheses in one condition and then say EON's

117
00:08:57.860 --> 00:08:59.140
pass and another condition.

118
00:08:59.140 --> 00:09:03.670
And this is going to return an error and I'm going to do this on purpose to explain why there is an

119
00:09:03.700 --> 00:09:04.910
error happening here.

120
00:09:05.830 --> 00:09:11.620
And this is a common mistake for beginners to put this and here and you'll get a mistake that says something

121
00:09:11.620 --> 00:09:13.270
about the series being ambiguous.

122
00:09:13.270 --> 00:09:19.480
If we scroll down here we see this the truth value of a series is ambiguous.

123
00:09:19.480 --> 00:09:26.350
And what that is trying to say is that Python's normal and operator can't actually take into account

124
00:09:26.710 --> 00:09:32.680
a series of boolean values compared to another series of boolean values in and operator can only take

125
00:09:32.680 --> 00:09:36.630
into account single booleans at a time.

126
00:09:36.630 --> 00:09:43.900
So true and false returns false true and true returns true etc..

127
00:09:44.040 --> 00:09:52.140
That means when you Pessin an entire series of boolean values such as this the and operator begins to

128
00:09:52.140 --> 00:09:53.250
get confused.

129
00:09:53.340 --> 00:09:57.280
It's can only deal if these single instances of boolean values.

130
00:09:57.480 --> 00:10:02.040
Which is why when you're working with pandas and you want multiple conditions you actually have to use

131
00:10:02.130 --> 00:10:04.210
in ampersands which is this.

132
00:10:04.230 --> 00:10:09.490
And so that's going to be shift 7 on your keyboard for most standard keyboards.

133
00:10:09.570 --> 00:10:14.610
And notice here that I'm passing these conditions in parentheses to show clear separation between each

134
00:10:14.610 --> 00:10:15.690
of these conditions.

135
00:10:15.870 --> 00:10:20.000
And then if I run this I get the row E where this happens to be true.

136
00:10:20.460 --> 00:10:21.790
OK it's good to break that down.

137
00:10:21.810 --> 00:10:28.380
One quick last time when you're trying to use multiple conditions you can't use Python's normal and

138
00:10:28.440 --> 00:10:29.460
operator.

139
00:10:29.910 --> 00:10:36.420
You have to use the ampersand and then you pass in the multiple conditions in parentheses and then finally

140
00:10:36.420 --> 00:10:39.030
put it inside of brackets for your data frame.

141
00:10:39.030 --> 00:10:46.110
If you want to do and or operation you can just replace this with the pipe operator which is right above

142
00:10:46.190 --> 00:10:48.780
your usually for most keyboards on your Enter key.

143
00:10:48.810 --> 00:10:54.840
Go it go right above it and then do shift on that backslash and this should give you the pipe operator

144
00:10:56.070 --> 00:11:01.070
and that's going to be a replacement for or because if you try using or you'll get the same error.

145
00:11:01.200 --> 00:11:07.110
So that's with or if I try it with Python's normal or Again I'll get the truth value of a series is

146
00:11:07.110 --> 00:11:07.880
ambiguous.

147
00:11:07.950 --> 00:11:13.140
And that's because you get a series of those values instead of just one or two boolean values.

148
00:11:13.390 --> 00:11:16.790
OK you can go ahead and reference a notes if you want more examples of this.

149
00:11:16.890 --> 00:11:22.170
But basically if you want multiple conditions pass and each condition in parentheses and then use an

150
00:11:22.170 --> 00:11:30.600
ampersand or pipe operator for the end or let's go ahead now and shift gears to talk about index and

151
00:11:30.600 --> 00:11:36.090
a little more details about it we're going to discuss now is resetting the index or setting it to something

152
00:11:36.150 --> 00:11:37.090
else.

153
00:11:37.110 --> 00:11:39.710
Let me go ahead and take a look at our original data frame.

154
00:11:39.720 --> 00:11:43.590
I'm going to go in and clear these cells here by just running them.

155
00:11:43.710 --> 00:11:45.800
And let's take a look at our data frame.

156
00:11:45.810 --> 00:11:52.920
Again we have Rose aither e in columns w through Z in order to reset the index back to the default which

157
00:11:52.920 --> 00:11:54.070
is just a range index.

158
00:11:54.220 --> 00:11:57.900
0 1 2 3 4 all the way up to the nth row.

159
00:11:58.050 --> 00:12:05.370
What you can do is call the method reset underscore index and remember to close parentheses that we

160
00:12:05.370 --> 00:12:06.900
actually run that method.

161
00:12:07.850 --> 00:12:15.900
And if you call that notice you will get the index reset to a column and you'll get the actual index

162
00:12:15.960 --> 00:12:17.640
then to be numerical.

163
00:12:17.640 --> 00:12:25.030
And that's how you can reset the index something to note here is just like a lot of other hand those

164
00:12:25.070 --> 00:12:26.510
data from operations.

165
00:12:26.510 --> 00:12:30.950
This does occur in place unless you specify it for it to occur in place.

166
00:12:30.980 --> 00:12:37.010
So if I call back if I still have that original index of labels if you want this to actually occur in

167
00:12:37.010 --> 00:12:43.410
place you would just do is say in place equals true and pass into the reset underscore index.

168
00:12:43.460 --> 00:12:45.590
For now we'll go ahead and not do that.

169
00:12:45.590 --> 00:12:48.560
That way we still retain our original data frame.

170
00:12:48.620 --> 00:12:51.360
We go ahead and clear this out.

171
00:12:52.210 --> 00:12:57.580
Again if you just want to reset the index to a numerical value you can just use that reset index and

172
00:12:57.580 --> 00:13:02.120
your old index will become a column of your data frame OK.

173
00:13:02.230 --> 00:13:07.990
Let's go ahead and show one more new index example such as setting the index and in order to do this

174
00:13:08.110 --> 00:13:12.980
I'm going to go ahead and create a new index called new I the

175
00:13:16.080 --> 00:13:20.740
and I'm going to use a little trick here that I'll explain in just a second.

176
00:13:22.020 --> 00:13:27.240
This is going to be a bunch of state abbreviations and I'm going to say that split on this string and

177
00:13:27.240 --> 00:13:32.930
remember that split off a string is just a common method for splitting off a blank space.

178
00:13:33.210 --> 00:13:37.980
But this is a nice quick way to create a list instead of having to type out every comma.

179
00:13:38.220 --> 00:13:43.700
So I want to go ahead and set that list equal to new I indeed.

180
00:13:43.800 --> 00:13:52.110
So I have my new index values here and what I'm going to do is put this as a column in my data frame.

181
00:13:52.110 --> 00:13:58.550
So I'm going to go ahead and say DSF States is equal to new i n d.

182
00:13:58.590 --> 00:14:01.560
And since they mentions match so there's five items here.

183
00:14:01.650 --> 00:14:04.980
It will match from 0 to 4 here on the state of frame.

184
00:14:05.010 --> 00:14:12.890
So if I check my data frame I have this new column called states c a n y w y o RCO.

185
00:14:13.050 --> 00:14:17.930
Now we know how to reset the index which is just doing a reset underscore index method.

186
00:14:18.120 --> 00:14:23.100
But if you have a column in your data frame that you want to be the index which you can go ahead and

187
00:14:23.100 --> 00:14:26.990
do is say set index set of reset index.

188
00:14:27.060 --> 00:14:35.060
For example I can say DFI dot set underscore index and then pass in the column name you want to be the

189
00:14:35.060 --> 00:14:43.060
new index chest States here and if I shift enter now the state's column has become the index.

190
00:14:43.060 --> 00:14:49.280
Keep in mind unless you retain this information of the index so overwrite your old index and you won't

191
00:14:49.320 --> 00:14:52.470
actually be able to retain this information as a new column.

192
00:14:52.620 --> 00:15:00.300
And like resets index that allowed you to have that new column so that's set index versus reset index.

193
00:15:00.320 --> 00:15:05.300
Again if I check out my data frame here this wasn't in place I would need to add the arguments if I

194
00:15:05.300 --> 00:15:12.440
do shift enter here in place equals true let me go ahead and just do a quick review of what we just

195
00:15:12.440 --> 00:15:15.230
covered before we head up to part 3.

196
00:15:17.720 --> 00:15:18.310
Okay.

197
00:15:18.580 --> 00:15:23.130
We learned about conditional selection which is very similar to spy operations.

198
00:15:23.130 --> 00:15:28.510
You basically get a data frame of boolean values and if you pass in a whole data frame of boolean values

199
00:15:28.840 --> 00:15:33.740
you'll get the values where it's true and you'll get any n or no values for it was false.

200
00:15:33.790 --> 00:15:41.020
If you pass in a series of boolean values such as a column with a comparison operator you'll end up

201
00:15:41.050 --> 00:15:45.330
only getting the rows of the data frame where the serious happened to be true.

202
00:15:45.790 --> 00:15:49.280
And you could break this down into multiple steps if you wanted to.

203
00:15:49.320 --> 00:15:54.010
Again these two cells are probably the most important to understand out of this lecture if you understand

204
00:15:54.010 --> 00:15:57.770
this then you understand how to do conditional selection in pantless.

205
00:15:58.150 --> 00:16:04.540
Then scrolling down if we wanted to do multiple conditional selection you could do an ampersand or a

206
00:16:04.540 --> 00:16:12.160
pipe operator cannot use Python's builtin and or or operators because of the ambiguous values in a Truth

207
00:16:12.250 --> 00:16:13.050
series.

208
00:16:13.150 --> 00:16:18.930
And then remember to use parentheses to separate each conditional selection statement.

209
00:16:18.990 --> 00:16:25.980
Then finally we have Reesa index reset index is just going to reset your index to a numerical index

210
00:16:26.220 --> 00:16:30.500
and take your old index and set it as a new column called index.

211
00:16:30.720 --> 00:16:37.350
And then you can set a new index instead of resetting any index based off a current column just by saying

212
00:16:37.350 --> 00:16:38.980
Set underscore in x.

213
00:16:39.120 --> 00:16:42.040
And both these methods are not in place by default.

214
00:16:42.090 --> 00:16:46.970
So make sure to specify in place ECOs true if you want the change to be permanent.

215
00:16:46.980 --> 00:16:47.640
All right.

216
00:16:47.880 --> 00:16:49.530
That's it for this lecture.

217
00:16:49.530 --> 00:16:50.340
Thanks everyone.

218
00:16:50.340 --> 00:16:54.250
I'll see at the next lecture or we will discuss index higher again.

219
00:16:54.270 --> 00:16:57.530
All these notes are just in a notebook called Data frames.

220
00:16:57.600 --> 00:16:59.160
Thanks and I'll see you at the next lecture.
