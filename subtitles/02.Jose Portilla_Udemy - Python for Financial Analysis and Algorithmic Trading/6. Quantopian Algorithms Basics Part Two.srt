
1
00:11:53,110 --> 00:11:57,910
Again you should always be caution narry with shorting stock but just to show you how we can do that

2
00:11:58,000 --> 00:12:02,320
you just add a negative sign here and All-State that half your portfolio should be attempting to short

3
00:12:02,610 --> 00:12:03,540
IBM.

4
00:12:03,610 --> 00:12:05,860
So there's some complexities that happen when you're trying to short stock.

5
00:12:05,860 --> 00:12:12,340
But for now it's kind of the simplest way to do it and then go create another function called Record

6
00:12:13,000 --> 00:12:20,630
underscore the A R S A record of variables and a passing context and data here an I'm going to do the

7
00:12:20,630 --> 00:12:21,510
following.

8
00:12:21,620 --> 00:12:28,330
So I'm going to call record and record as a built in function here and what it does it just is going

9
00:12:28,330 --> 00:12:33,640
to record some information for you so you can see it in a plot and the way it works is you essentially

10
00:12:33,670 --> 00:12:38,160
give a name to the series that you're trying to record.

11
00:12:38,440 --> 00:12:43,600
So for example M.Z. AZN underscore clothes that's the name I'm going to assign this when I'm actually

12
00:12:43,600 --> 00:12:44,540
recording here.

13
00:12:44,710 --> 00:12:49,530
And then when I actually do is Passons some sort of data object to be recording.

14
00:12:49,750 --> 00:13:00,950
So I'll say to that current context AMCON close and balance off the princes and then we're going to

15
00:13:00,950 --> 00:13:02,410
do the same for the following.

16
00:13:02,540 --> 00:13:09,080
We'll say record and then I'm going to say IBM underscore close and just to make sure that it's clear

17
00:13:09,080 --> 00:13:12,350
that I can call this first parameter whatever I want to say.

18
00:13:12,350 --> 00:13:17,110
IBM closed jelly just to make it very clear to you guys what is actually happening here.

19
00:13:17,120 --> 00:13:20,060
This is not some pre-determined parameter argument.

20
00:13:20,060 --> 00:13:24,370
It's just whatever you want to call it it'll show up here on the plot and then you pass in the data.

21
00:13:24,560 --> 00:13:33,150
So we're going to be recording the current price of IBM and will say close their current close price.

22
00:13:33,240 --> 00:13:37,460
OK so we have this rebalance function and this record variable's function.

23
00:13:37,530 --> 00:13:39,120
Now it's actually schedule these.

24
00:13:39,120 --> 00:13:46,240
So inside our initialize function we're going to call schedule the underscore function and let's first

25
00:13:46,340 --> 00:13:54,220
off risk scheduling rebalance so pass and the date rules and we're going to have this run every day

26
00:13:54,550 --> 00:13:55,970
you get rid of that help there.

27
00:13:57,070 --> 00:14:02,180
So every day this is going to look say a data rules not the rules.

28
00:14:02,200 --> 00:14:03,760
There are no rules.

29
00:14:03,880 --> 00:14:05,210
Every day this is going to happen.

30
00:14:05,260 --> 00:14:10,800
And let's have it be at market open OK.

31
00:14:10,850 --> 00:14:13,450
So I've scheduled that function going to schedule another one.

32
00:14:17,100 --> 00:14:26,960
And then what I'm going to do here is I'm going to say record underscore verus the rules have this record

33
00:14:26,990 --> 00:14:30,140
every day and then time rules.

34
00:14:30,290 --> 00:14:34,460
Let's just say market close.

35
00:14:34,470 --> 00:14:36,870
OK so that's balanced out now.

36
00:14:36,960 --> 00:14:40,900
I'm going to make sure that say it and then I'm going to build the algorithm.

37
00:14:40,920 --> 00:14:42,730
So let's go ahead and try it out.

38
00:14:46,420 --> 00:14:48,560
All right so let's take a look at the results here.

39
00:14:48,580 --> 00:14:53,590
We can see how our algorithm actually performed against the benchmark that was this rebalancing ordered

40
00:14:53,590 --> 00:14:56,800
Targa percent so long on Amazon shorting IBM.

41
00:14:56,890 --> 00:15:01,810
But notice here now we have an extra plot and this is the record variable's plot that we just created.

42
00:15:01,810 --> 00:15:06,760
So this record function is actually going to record some data and then plot it up for you and you can

43
00:15:06,760 --> 00:15:11,740
then click on these buttons to see it or toggle it on or off.

44
00:15:11,740 --> 00:15:16,870
Now I wanted to show you here is that this argument here of IBM underscore closed jelly that's essentially

45
00:15:16,870 --> 00:15:20,560
just the name of whatever you decided you want to call whatever you're recording.

46
00:15:20,560 --> 00:15:25,510
Typically you'll try to call it as close as you can to whatever you're recording like Amazon close price

47
00:15:25,510 --> 00:15:26,860
or even close price.

48
00:15:26,950 --> 00:15:31,000
But I just wanted you to be clear that not to get confused on these parameters.

49
00:15:31,000 --> 00:15:35,080
This first parameter like IBM close Chelly is whatever we decide to call this here.

50
00:15:35,080 --> 00:15:38,330
So you have total control over what you want to actually call that.

51
00:15:38,440 --> 00:15:40,750
It's not some default parameter.

52
00:15:40,780 --> 00:15:46,480
So again it's just the record function whatever you wanted this side of what you're going to call this

53
00:15:46,840 --> 00:15:48,040
recorded data.

54
00:15:48,040 --> 00:15:52,180
And then the actual data points that you're recording and then we'll plot them up for you automatically

55
00:15:52,270 --> 00:15:53,430
over the time period.

56
00:15:53,440 --> 00:15:57,370
So that's how the record function works and that's how schedule function works.

57
00:15:57,370 --> 00:16:01,280
Now in your note book there's some more information about slippage and commission.

58
00:16:01,280 --> 00:16:04,720
There's a set slippage function as well as a set commission function.

59
00:16:04,780 --> 00:16:12,160
Those allow you to edit the simulations abilities to do slippages which is basically estimating the

60
00:16:12,160 --> 00:16:14,920
impact of orders on the fill rate and the execution price.

61
00:16:14,920 --> 00:16:21,820
So for example if you were to ask for $200 million worth of Apple stock you would expect the price to

62
00:16:21,820 --> 00:16:22,810
immediately jump up.

63
00:16:22,820 --> 00:16:28,990
So Quanto Appian trying to take that into account with a slippage model and the default values pretty

64
00:16:28,990 --> 00:16:30,390
much are what you should use.

65
00:16:30,520 --> 00:16:35,590
But if you want to set your own slippage if you're a extremely advanced user you could set slippage

66
00:16:35,590 --> 00:16:36,120
yourself.

67
00:16:36,130 --> 00:16:40,430
You could check out the note book provided for this lecture to Sless slippage yourself.

68
00:16:40,450 --> 00:16:42,070
Now there's also a sec commission.

69
00:16:42,220 --> 00:16:46,990
So to actually execute a trade usually you have to pay some sort of commission value.

70
00:16:46,990 --> 00:16:53,260
Typically the default commission model charges about point 007 five cents per share with a minimum trade

71
00:16:53,260 --> 00:16:55,120
cost of at least one dollar.

72
00:16:55,130 --> 00:17:00,720
Now if you wanted to you could set commissions to be higher than that or lower than that Quanto been

73
00:17:00,730 --> 00:17:02,410
really recommends you just keep the defaults.

74
00:17:02,410 --> 00:17:06,010
So we won't actually Masseron of slippage or set commission.

75
00:17:06,010 --> 00:17:08,800
Keep in mind they are available to you if you're a more advanced users.

76
00:17:08,950 --> 00:17:13,750
But I really just recommend that you always use the defaults because they're are fairly realistic.

77
00:17:13,750 --> 00:17:16,230
All right thanks everyone and I'll see you at the next lecture.                                                                            
78
00:00:05,330 --> 00:00:10,910
Welcome back everyone to part 2 of open basic algorithm methods and this lecture we're going to discuss

79
00:00:10,910 --> 00:00:15,010
checking historical data as well as scheduling functions in the ID.

80
00:00:15,230 --> 00:00:18,050
Let's hop over back to where we were last time and continue.

81
00:00:18,360 --> 00:00:19,450
OK so here we are back.

82
00:00:19,460 --> 00:00:24,940
The idea we previously discussed the data can trade a method that you can call off of it.

83
00:00:25,040 --> 00:00:27,200
And we also discussed that at current.

84
00:00:27,200 --> 00:00:32,420
Now we're going to talk about data that history data that history allows you to call historical information

85
00:00:32,420 --> 00:00:38,210
on the equities and the return data is adjusted for splits mergers dividends at the current simulation

86
00:00:38,210 --> 00:00:38,510
date.

87
00:00:38,510 --> 00:00:42,830
So whenever you're calling that history off the data object you don't have to worry about those things.

88
00:00:42,830 --> 00:00:44,770
Everything's already been adjusted for you.

89
00:00:44,810 --> 00:00:46,520
So let's show you how we can actually use it.

90
00:00:48,410 --> 00:00:50,640
So I'm going to say context that tekkies.

91
00:00:50,810 --> 00:00:57,620
Keep those three technical companies there and I'm going to ask for price history and I'm going to set

92
00:00:57,620 --> 00:01:01,540
the sequel to data dot and then I'm going to use history and what it does.

93
00:01:01,550 --> 00:01:04,820
It just gets a window of values for the given fields and given assets.

94
00:01:04,940 --> 00:01:09,900
So you in either a list or a single asset and then the fields either list a field or a single field

95
00:01:10,190 --> 00:01:14,150
and then there's bar counts in frequency which will learn about in just a little second.

96
00:01:14,150 --> 00:01:16,080
So let's kind of expand this here.

97
00:01:16,220 --> 00:01:22,490
So the first thing to do is say context and let's go ahead and just passen tekkies which is the list

98
00:01:22,550 --> 00:01:24,420
of those security IDs.

99
00:01:24,710 --> 00:01:29,660
And then the fields we want we can either pass in a list of fields or a single string for fields and

100
00:01:29,660 --> 00:01:31,250
I'm just going to ask for a price.

101
00:01:31,280 --> 00:01:35,360
And if you ever want to know what fields are available you can click here and learn more and I'll give

102
00:01:35,360 --> 00:01:37,820
you the list of fields that you can passen.

103
00:01:37,820 --> 00:01:44,740
Then the next thing you ask for is a bar count and we're going to set the bar count equal to 5.

104
00:01:44,800 --> 00:01:49,700
Now what the bar count does it just specifies the number of days or minutes to include in the Panthers

105
00:01:49,720 --> 00:01:51,890
data frame that's returned by the history function.

106
00:01:52,030 --> 00:01:57,820
And it only accepts integer values so we'll say bar count is equal to 5 comma here.

107
00:01:57,820 --> 00:02:01,610
And then we're going to determine the frequency of the data and get rid of this right here.

108
00:02:02,560 --> 00:02:06,850
The frequency is going typical too.

109
00:02:06,870 --> 00:02:08,440
And this is a string code.

110
00:02:08,790 --> 00:02:10,950
So I'll say one day for one day.

111
00:02:11,070 --> 00:02:16,110
And again you can check out that learn more link to get the various frequencies that are allowed but

112
00:02:16,290 --> 00:02:20,100
typically you're going to either see it either daily or minute data.

113
00:02:20,100 --> 00:02:26,130
So it's going to be usually either 1 D or 1 m whether you want daily data or minute by minute data and

114
00:02:26,130 --> 00:02:30,120
then for other frequencies where you can do is you can actually use the pandas sample function.

115
00:02:30,360 --> 00:02:33,450
So let's actually just show you what this example actually looks like.

116
00:02:33,450 --> 00:02:36,910
I'm going to then printouts price history

117
00:02:39,970 --> 00:02:43,510
and keep in mind this is going to print out price history for every single minute since it's still under

118
00:02:43,510 --> 00:02:44,370
handle data.

119
00:02:44,410 --> 00:02:46,930
We'll talk about putting this in another function later on.

120
00:02:46,930 --> 00:02:48,770
But let's go ahead and run this.

121
00:02:48,790 --> 00:02:54,350
So say build the algorithm once it's been saved and we should see a bunch of logs printout and just

122
00:02:54,350 --> 00:02:56,320
the second.

123
00:02:56,340 --> 00:02:56,610
All right.

124
00:02:56,610 --> 00:03:01,470
So if you take a look at what's going on here we can see that we got returned a data frame with for

125
00:03:01,470 --> 00:03:05,400
equity's information kind of expand this and let's show more here.

126
00:03:05,400 --> 00:03:10,320
And we have a data frame and the formatting is a little strange just because it does have enough space

127
00:03:10,320 --> 00:03:13,040
to print everything but all the information is there.

128
00:03:13,170 --> 00:03:19,170
So it's equity of Apple equity and Cisco and then equity Amazon So these are the historical prices for

129
00:03:19,170 --> 00:03:25,050
the last five days so I can see I have indexed our days the 19th 20th 21st 24th and 25th and then the

130
00:03:25,050 --> 00:03:30,930
prices for Apple Cisco and Amazon in repeating this information every single minute because it's under

131
00:03:30,930 --> 00:03:31,840
the handle data.

132
00:03:31,920 --> 00:03:35,510
Typically you won't be asking for data that history in the handle data.

133
00:03:35,520 --> 00:03:37,460
Otherwise you'll get it back every single minute.

134
00:03:37,650 --> 00:03:40,200
So instead what you're probably going to want to do is schedule this.

135
00:03:40,200 --> 00:03:44,640
So let's discuss how his schedule functions because putting everything and handle data probably isn't

136
00:03:44,640 --> 00:03:47,370
a wise decision because you're executing it every minute.

137
00:03:47,370 --> 00:03:49,640
So we're going to collapse this again.

138
00:03:49,690 --> 00:03:54,870
Let's show you how to schedule a function so you can use a schedule underscore or function and then

139
00:03:54,870 --> 00:03:56,640
pass in the functions you want to schedule.

140
00:03:56,820 --> 00:04:00,330
First let's actually create some functions here.

141
00:04:00,360 --> 00:04:02,460
Let's delete all of this.

142
00:04:02,490 --> 00:04:09,220
So in deleting my handle data function and then going to say create new function called open positions

143
00:04:09,610 --> 00:04:16,380
and any function that you want to have scheduled needs to take in both context and data and then what

144
00:04:16,380 --> 00:04:25,130
this is going to do it's going to let's say Order target percent's so say Order target percents and

145
00:04:25,130 --> 00:04:28,130
we're going to say context Apple.

146
00:04:28,410 --> 00:04:32,430
In fact licious instead of having all these techies who just have a single idea here.

147
00:04:32,450 --> 00:04:34,340
So we're just really dealing with one Apple stock.

148
00:04:34,610 --> 00:04:42,650
So order target percents and with say Order Apple and make it 10 percent of my entire portfolio.

149
00:04:44,070 --> 00:04:47,530
And then will have another function called close positions.

150
00:04:49,750 --> 00:04:54,480
Passing context pasand data.

151
00:04:54,680 --> 00:04:59,930
And then what this is going to do it's going to say Order target percent.

152
00:04:59,960 --> 00:05:05,240
And if I want to close everything out on apples so basically just get rid or liquid They all my apple

153
00:05:05,240 --> 00:05:09,160
positions all set this as zero.

154
00:05:09,270 --> 00:05:14,040
So I have a function here open positions and it's just basically open positions on Apple and it says

155
00:05:14,160 --> 00:05:18,940
Hey add of all the money I have mixture 10 percent of my portfolio is allocated to Apple stock since

156
00:05:18,960 --> 00:05:19,870
that's a security ID.

157
00:05:19,870 --> 00:05:24,840
Here they have a function called close positions which says okay close all my positions on Apple set

158
00:05:24,840 --> 00:05:27,580
my entire portfolio to have zero percent for Apple.

159
00:05:27,690 --> 00:05:29,380
So essentially just look with all that.

160
00:05:29,490 --> 00:05:31,830
As soon as it can.

161
00:05:32,020 --> 00:05:36,200
Now we can actually schedule these functions and we can schedule them inside initialize.

162
00:05:36,820 --> 00:05:40,740
So we'll call schedule underscore function.

163
00:05:41,470 --> 00:05:47,770
And here we can see the arguments it takes it takes my phunk a date rule or time rule and then half

164
00:05:47,770 --> 00:05:50,370
days whether true or false we don't really worry about that.

165
00:05:50,430 --> 00:05:55,900
Is going to take in these three main arguments the function you're going to schedule the date rule and

166
00:05:55,900 --> 00:06:01,090
then the time rule and you can click here and learn more for more information about it particular documentation

167
00:06:01,450 --> 00:06:04,620
that essentially is just going to say how often do you want to run this function.

168
00:06:04,810 --> 00:06:07,580
So the very first thing you need to pass on is the actual function of the fine.

169
00:06:07,630 --> 00:06:08,800
So I have open positions.

170
00:06:08,800 --> 00:06:12,220
So let's go ahead and pass that in open positions.

171
00:06:12,640 --> 00:06:16,670
And keep in mind I'm not calling the function to execute here so I won't have these parentheses.

172
00:06:16,770 --> 00:06:19,100
I'm just passing in the function itself.

173
00:06:19,120 --> 00:06:22,900
So once you've passed in the function what you're going to have is date rules.

174
00:06:22,900 --> 00:06:29,890
So we're going to say dates underscore rules dots and you can see here there's a list of rules that

175
00:06:29,890 --> 00:06:36,160
can passen I can either say have this happen every day happen every week at the start of the week at

176
00:06:36,160 --> 00:06:39,280
the end of the week at the month start or at the end of the month.

177
00:06:39,310 --> 00:06:46,670
So let's go ahead and have this every single week so say a week start and then I can actually offset

178
00:06:46,670 --> 00:06:47,450
it by a certain day.

179
00:06:47,450 --> 00:06:52,250
So if it wants happened on Tuesdays or Wednesdays instead of just Mondays I can put it day off set as

180
00:06:52,250 --> 00:06:55,340
well but we'll just have thoughts or week underscore starts.

181
00:06:55,340 --> 00:07:00,550
Remember you called date rules dot and you see your various options and then the third one was the time

182
00:07:00,550 --> 00:07:01,090
rules.

183
00:07:02,320 --> 00:07:06,340
So I'll say time rules dot and then we have marked open market close.

184
00:07:06,340 --> 00:07:09,840
So if I choose market open I can say hours and minutes.

185
00:07:09,850 --> 00:07:13,980
So this is going to schedule a function to run relative to the market open time.

186
00:07:13,990 --> 00:07:19,360
So if I don't pass in anything it just has hours the for zero minutes once a basically one minute after

187
00:07:19,360 --> 00:07:23,280
market opens it begins executing this function.

188
00:07:23,300 --> 00:07:23,540
All right.

189
00:07:23,540 --> 00:07:28,100
Now let's go ahead and schedule the close positions function so we'll do the same thing here will say

190
00:07:28,100 --> 00:07:34,190
schedule underscore function then we pass in the function I want to schedule in this case it's close

191
00:07:34,190 --> 00:07:35,170
positions.

192
00:07:35,330 --> 00:07:38,080
So say close positions is a function we want to schedule.

193
00:07:38,240 --> 00:07:40,520
And the next thing you do is specify the date rules.

194
00:07:40,520 --> 00:07:44,370
So let's do it at the end of the week where we close out our positions on Apple.

195
00:07:44,780 --> 00:07:50,040
So I'll say rules and then we'll see week end.

196
00:07:50,060 --> 00:07:51,320
So this is at the end of the week.

197
00:07:51,350 --> 00:07:56,180
And then I can also offset that in case I want to go backwards.

198
00:07:56,380 --> 00:08:03,240
And then the final thing I want to do is time rules say time rules and sort of market open.

199
00:08:03,240 --> 00:08:08,850
I'm going to say market close and this is going to schedule to run the function relative to the market

200
00:08:08,850 --> 00:08:09,860
close time.

201
00:08:09,870 --> 00:08:15,300
So if I have market close here and I add in minutes equal to 30 that means 30 minutes before the market

202
00:08:15,300 --> 00:08:19,800
closes execute the close positions which generally just dump all Apple stock.

203
00:08:19,830 --> 00:08:29,150
So I'll say here minutes is equal to 30 and it could've all specify to do it like in two hours before

204
00:08:29,150 --> 00:08:29,750
etc..

205
00:08:29,960 --> 00:08:35,450
But essentially what this is doing is it says OK initialize this context here I'm setting context the

206
00:08:35,450 --> 00:08:38,520
apple to be the security ID of Apple Inc.

207
00:08:38,570 --> 00:08:42,780
And then of scheduling these two functions I'm saying open positions at the start of the week.

208
00:08:42,800 --> 00:08:48,350
The rules go ahead and execute it at the market open with no extra parameters in there.

209
00:08:48,350 --> 00:08:52,700
What I could do is say wait an hour after the market opens etc. but it's really up to you the penny

210
00:08:52,710 --> 00:08:57,140
what your trading algorithm is we are going to put in for your time rules and executes positions which

211
00:08:57,140 --> 00:09:02,890
then says order target percent apple 10 percent rate per Foleo and then schedule a function close positions.

212
00:09:02,890 --> 00:09:07,620
At the end of the week 30 minutes for the market closes go and execute close positions which century.

213
00:09:07,760 --> 00:09:10,630
So your portfolio have zero percent now Apple stock.

214
00:09:10,790 --> 00:09:16,340
So we could do is come back to us this just a week or so let's see what happens we can build the algorithm

215
00:09:16,850 --> 00:09:18,540
and we'll have an invalid syntax.

216
00:09:18,560 --> 00:09:19,870
Let's make sure that's all right.

217
00:09:22,150 --> 00:09:26,590
Looks like my princes are our belts let's make sure those are balanced out so I can see green highlighted

218
00:09:26,590 --> 00:09:26,960
there.

219
00:09:26,960 --> 00:09:31,180
Let's save this build the algorithm again and I can get less here.

220
00:09:31,270 --> 00:09:36,060
So I don't see that many logs and I can see over the week how my actual algorithm did.

221
00:09:36,190 --> 00:09:40,530
Now this is essentially not doing much because it only executes once during this entire back.

222
00:09:40,550 --> 00:09:43,740
So we shouldn't really see anything during the back test results.

223
00:09:45,220 --> 00:09:48,240
It looks like we've got a quick air accidentally wrote a piece.

224
00:09:48,310 --> 00:09:51,600
So let's make sure that's AAPL down here.

225
00:09:51,640 --> 00:09:53,990
Let's save that build the algorithm again.

226
00:09:54,490 --> 00:09:59,710
And now it's Click here less so we don't see all the logs and there I can see my algorithm actually

227
00:09:59,710 --> 00:10:02,140
initializing the back test.

228
00:10:02,150 --> 00:10:02,420
All right.

229
00:10:02,420 --> 00:10:05,160
So essentially we can see almost nothing happened there is the benchmark.

230
00:10:05,210 --> 00:10:06,570
And there's my algorithm.

231
00:10:06,620 --> 00:10:11,780
It buys some stock at the beginning of the week holds it then sells it and they can see I got 0.2 percent

232
00:10:11,840 --> 00:10:13,070
returns off that.

233
00:10:13,440 --> 00:10:13,980
OK.

234
00:10:14,150 --> 00:10:17,420
Let's show you how we can get portfolio information and record it.

235
00:10:17,430 --> 00:10:21,120
Record is a really nice function we can use to see other plots here.

236
00:10:21,260 --> 00:10:26,000
Let's say I wanted to not just record my algorithm versus the benchmark but actually wanted to record

237
00:10:26,330 --> 00:10:31,430
the price of Apple stock or any other historical information we can record basically any data we want

238
00:10:31,520 --> 00:10:34,540
and it will automatically build a plot for us.

239
00:10:34,550 --> 00:10:35,990
Let's show you how we can do that.

240
00:10:36,000 --> 00:10:40,070
We're going to clear all of this so we can get a little more practice billing this out.

241
00:10:40,460 --> 00:10:50,620
First thing I need to do as I always say in my initialize function and then passing context to it and

242
00:10:50,700 --> 00:10:59,240
off of this will say context of Amazon check the ID pass and Amazon here enter.

243
00:10:59,450 --> 00:11:07,610
And then let's also do IBM will say Id pass an IBM let it Search for International Business Machine

244
00:11:07,620 --> 00:11:09,410
corporation that looks good.

245
00:11:09,690 --> 00:11:12,120
And then we're going to schedule two functions later on.

246
00:11:12,120 --> 00:11:21,490
But for now we'll create another function and it will be rebalance in passing context and data and what

247
00:11:21,480 --> 00:11:25,630
we're going to do is we're going to the following we're going to have half her portfolio go long on

248
00:11:25,630 --> 00:11:26,350
Amazon.

249
00:11:26,530 --> 00:11:30,170
So we'll have half of our own money just by Amazon stock.

250
00:11:30,460 --> 00:11:39,280
So say Order target percent and we'll pass and contex Amazon and we'll say 0.5.

251
00:11:39,280 --> 00:11:46,210
So half my for Hoyle's going to be going long on Amazon and then we'll say Order target percent and

252
00:11:46,210 --> 00:11:48,250
we're actually going to short IBM.

253
00:11:48,250 --> 00:11:53,100
So the way that is you pass an
