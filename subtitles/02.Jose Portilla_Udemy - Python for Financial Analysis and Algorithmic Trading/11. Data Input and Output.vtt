WEBVTT
1
00:00:05.730 --> 00:00:10.730
Welcome everyone to this lecture on data input and output with pandas in this lecture we're going to

2
00:00:10.730 --> 00:00:16.940
be discussing how to input data into your pandas data frame and then also output pandas data typically

3
00:00:16.940 --> 00:00:20.100
for this course we're really just going to be working out of CSB files.

4
00:00:20.120 --> 00:00:24.080
So that's really the only format that you need to be aware of later on we're going to show you how you

5
00:00:24.080 --> 00:00:29.150
can use pandas to directly read and data from the internet for financial sources using pantless data

6
00:00:29.150 --> 00:00:30.270
reader and Quando.

7
00:00:30.380 --> 00:00:35.360
So those are the three formats that are going to be using panels data reader quando and CSP files.

8
00:00:35.460 --> 00:00:39.830
In this lecture we're going to discuss CSP files but we'll also show you how to work with Excel files

9
00:00:40.070 --> 00:00:43.650
and even sequel tables even though we won't really be using those for this course.

10
00:00:43.670 --> 00:00:47.830
I do want you to have this lecture in case you ever want to reference those methods.

11
00:00:47.840 --> 00:00:48.200
All right.

12
00:00:48.200 --> 00:00:50.450
Here we are at the Jupiter notebook.

13
00:00:50.510 --> 00:00:56.030
Keep in mind that as we reference the files such as the example see Espey file and the example Excel

14
00:00:56.030 --> 00:01:01.610
file you'll need to make sure they're in the same location as your Jupiter notebook is in order to check

15
00:01:01.610 --> 00:01:03.440
the location of your Jupiter notebook.

16
00:01:03.440 --> 00:01:10.450
You can just go to sell and type P WD do shift enter and will report back the location.

17
00:01:10.490 --> 00:01:12.330
This is the same file location.

18
00:01:12.350 --> 00:01:16.250
The examples see every file in the example Excel file should be in.

19
00:01:16.340 --> 00:01:21.260
If you've downloaded the entire repository of notebooks and are working in the data input and output

20
00:01:21.260 --> 00:01:27.060
section or notebook you should be fine by just referencing the files as if they're already there.

21
00:01:27.840 --> 00:01:33.460
OK let's go ahead and show how to open and read see as V files in order to do this.

22
00:01:33.480 --> 00:01:42.060
You can just say PD read underscore CXXVI and then begin typing out the name of your CC file.

23
00:01:42.070 --> 00:01:44.100
In this case I know it's called the example.

24
00:01:44.250 --> 00:01:50.640
So as I start typing this out a nice trick it's a click tab and it will auto complete the file name

25
00:01:51.800 --> 00:01:52.420
in your case.

26
00:01:52.430 --> 00:01:55.910
You may just have example not example that CXXVIII.

27
00:01:55.970 --> 00:02:02.560
Let's go ahead and read that in I did shift enter and now I can see the C as we file as a data frame

28
00:02:02.780 --> 00:02:14.060
of the columns A B C and D and 0 1 to 3 as the rows know that if I want to read any files I just use

29
00:02:14.060 --> 00:02:20.390
the read underscore command line click tab here and I get the dropdown menu of the variety of formats

30
00:02:20.390 --> 00:02:22.490
that Pancho's can read from.

31
00:02:22.670 --> 00:02:30.290
So Panthers can read from even your clipboard see as we excel files HDR files Jaison Pickle's see sequel

32
00:02:30.290 --> 00:02:32.270
files tables etc..

33
00:02:32.270 --> 00:02:34.520
Just keep that in mind that you have a lot of options here.

34
00:02:34.520 --> 00:02:37.250
Right now we're just going over the most common ones.

35
00:02:37.420 --> 00:02:44.300
OK in order to write to a CSP file you need a data frame so I'm going to go ahead and just say F is

36
00:02:44.300 --> 00:02:44.650
equal to.

37
00:02:44.660 --> 00:02:45.220
PD.

38
00:02:45.290 --> 00:02:47.720
Read underscore C as V.

39
00:02:48.110 --> 00:02:55.590
And again just do can do example tab autocomplete here and now I have DMF as that same example DFS have

40
00:02:55.640 --> 00:02:59.890
actually saved it to a variable off of a data frame.

41
00:02:59.900 --> 00:03:03.540
You can say to underscore if you clicked tab here.

42
00:03:03.800 --> 00:03:05.820
You'll notice that you have a variety of forms.

43
00:03:05.830 --> 00:03:06.930
You can write to.

44
00:03:07.240 --> 00:03:10.780
Basically almost all the same formats so you could read from.

45
00:03:10.860 --> 00:03:15.670
So I'm going to go in and say F underscore to C S V.

46
00:03:15.690 --> 00:03:26.550
I'm going to label this my underscore output and the other thing I do is say Index equals false and

47
00:03:26.550 --> 00:03:31.800
the reason for that is because I don't actually want to save this index as a column.

48
00:03:31.800 --> 00:03:37.110
Let me go ahead and show you what happens if I don't put indexical to false and I just put the F to

49
00:03:37.110 --> 00:03:43.880
see as we I'm going to go ahead and say PD that read underscore CSFB and I'm going to read the file

50
00:03:43.880 --> 00:03:49.790
I just saved my output know I get this column here called unnamed zero.

51
00:03:49.950 --> 00:03:52.760
And that was the old index.

52
00:03:52.770 --> 00:03:59.070
Now if I say Ze'ev to see is the index false and run that sell.

53
00:03:59.340 --> 00:04:04.950
And then if I read my output again that I will actually say that index and I will automatically assign

54
00:04:04.950 --> 00:04:07.080
a range index to the data frame.

55
00:04:07.080 --> 00:04:12.060
Keep that in mind as you're saving your CACP files whether or not it's appropriate for you to say Index

56
00:04:12.150 --> 00:04:14.120
equals false.

57
00:04:14.120 --> 00:04:14.450
All right.

58
00:04:14.450 --> 00:04:18.440
Now let's go ahead and move on to reading and writing from Excel files.

59
00:04:18.470 --> 00:04:20.840
Pandas can read and write excel files.

60
00:04:20.870 --> 00:04:23.900
Keep in mind that Panas can only import the data.

61
00:04:23.960 --> 00:04:30.860
It can't import formulas or images or things like macros using the read other score Excel method may

62
00:04:30.860 --> 00:04:32.930
cause panderers to crash.

63
00:04:32.930 --> 00:04:39.470
Another thing to note is that you may get an error asking you to install the x l r d library that should

64
00:04:39.470 --> 00:04:40.940
have been automatically installed.

65
00:04:41.000 --> 00:04:46.270
If you use the Anaconda distribution but if you did not you'll go ahead and go to your terminal and

66
00:04:46.670 --> 00:04:53.630
in your terminal or command line you'll type the install X L R D or you'll do the same thing with a

67
00:04:53.630 --> 00:04:54.710
Pipp install.

68
00:04:54.740 --> 00:04:56.380
Again you're not going to do this in a cell.

69
00:04:56.420 --> 00:04:58.980
You will actually do this at the command line or terminal.

70
00:04:59.030 --> 00:05:04.610
Hopefully if he did the Anaconda distribution should have automatically installed along with pantless.

71
00:05:04.670 --> 00:05:06.420
Let's go ahead and see how this works.

72
00:05:06.680 --> 00:05:08.180
I'm going to go ahead and share the Excel file.

73
00:05:08.180 --> 00:05:12.310
I'll be working with your a have a very simple Excel sample.

74
00:05:12.310 --> 00:05:15.810
In fact it looks almost the same as the CSP file we are working with.

75
00:05:15.970 --> 00:05:22.370
Except here it's been noted that it's in sheet 1 and basically what Pandurs think thinks a workbook

76
00:05:22.370 --> 00:05:22.960
is.

77
00:05:23.000 --> 00:05:24.210
Is that a workbook.

78
00:05:24.230 --> 00:05:31.520
It's just a bunch of sheets and each sheet is a data frame meaning I can say PD that read Excel.

79
00:05:31.970 --> 00:05:36.470
I pass in the Excel file name the X LS X-File.

80
00:05:36.620 --> 00:05:42.380
A good trick for this is to begin typing the file name press tab and select it.

81
00:05:42.620 --> 00:05:46.820
Again this only works if the excel files in the same location as this notebook.

82
00:05:46.850 --> 00:05:54.860
If it's not only to pass and the whole file path and then you can say sheet name and then Passons sheets

83
00:05:55.160 --> 00:06:00.520
one go ahead and read this and we get the output we expected.

84
00:06:00.760 --> 00:06:03.370
And that's basically it for reading from an excel file.

85
00:06:03.370 --> 00:06:06.320
You pass in the file and then you pass in the sheet name you want.

86
00:06:06.380 --> 00:06:09.990
Impend this tries its best to read it in as a data frame.

87
00:06:10.090 --> 00:06:13.970
Writing a data frame to an Excel output is also a very simple process.

88
00:06:13.990 --> 00:06:16.830
You just take the data frame you want to write to excel.

89
00:06:17.080 --> 00:06:24.070
Say to underscore excel in the name of the Excel file you want to save it to go in and make a new one

90
00:06:24.070 --> 00:06:34.420
called Excel sample to dot x x x and then we can specify a sheet name if you want to.

91
00:06:34.500 --> 00:06:39.590
Something to know is that what you're saying to underscore Excel for whatever reason Pandurs you need

92
00:06:39.590 --> 00:06:46.690
to write in sheets underscore a name and then the name of the sheet will go in and put in a new sheet.

93
00:06:46.700 --> 00:06:50.070
All right it's good and run this and that's it.

94
00:06:50.090 --> 00:06:52.340
We've saved that to an Excel file.

95
00:06:52.340 --> 00:06:54.380
Now let's go ahead and move along to working.

96
00:06:54.410 --> 00:06:55.490
H t m l.

97
00:06:55.760 --> 00:06:59.840
Again you'll need to install quite a few libraries in order for this to work and you probably need to

98
00:06:59.840 --> 00:07:02.140
restart that super notebook after that.

99
00:07:02.160 --> 00:07:04.670
Go ahead and check out the notes for this lecture.

100
00:07:04.670 --> 00:07:09.710
The note book for it to get a list of all the libraries need to install or go ahead and go to the beginning

101
00:07:09.710 --> 00:07:12.510
of the lecture where we show the list of libraries.

102
00:07:12.530 --> 00:07:16.320
Let's talk about HTL input here.

103
00:07:16.400 --> 00:07:24.770
I have a link to the FDIC doc of failed bank list page and here's the list of all the failed banks by

104
00:07:24.770 --> 00:07:26.150
the FDIC.

105
00:07:26.450 --> 00:07:30.610
As far as them keeping track is the Federal Deposit Insurance Corporation.

106
00:07:30.830 --> 00:07:32.900
And here we have a bunch of failed banks.

107
00:07:32.900 --> 00:07:37.370
The closing date updated day etc. but this is basically just watched him blink.

108
00:07:37.370 --> 00:07:40.740
This link is in the notebooks he can go out and copy and paste it from there.

109
00:07:40.760 --> 00:07:43.430
I'm going to go ahead and copy this link.

110
00:07:44.520 --> 00:07:47.640
And try to read it in with Pandurs nerds to do this.

111
00:07:47.640 --> 00:07:49.520
All I have to do is say PD.

112
00:07:49.560 --> 00:07:55.340
Well go ahead and make say data equals PD dots.

113
00:07:55.620 --> 00:07:57.760
Read h T.M..

114
00:07:57.930 --> 00:08:01.330
And then as a string I'm going to pass in that actual age TMLC

115
00:08:04.030 --> 00:08:09.930
they'll take a little bit of time to read it but it should work out if you have all the libraries OK.

116
00:08:09.940 --> 00:08:11.090
Looks like it worked out.

117
00:08:11.290 --> 00:08:16.870
Something to note here is that usually this isn't going to directly relate to a data frame.

118
00:08:16.900 --> 00:08:23.920
If I check out what data is if I say type you'll notice that it's actually a list.

119
00:08:24.060 --> 00:08:30.650
And essentially what pantless tried to do was to find every table element that was in the H team l file.

120
00:08:30.780 --> 00:08:37.680
And if you're familiar if h T.M. you know that if you can right click here and view page source you'll

121
00:08:37.680 --> 00:08:40.230
have this list of actual age T.M. code.

122
00:08:40.470 --> 00:08:45.600
And if you're familiar of e-mail you'll know that you can actually look for just like there's list classes

123
00:08:45.600 --> 00:08:46.240
here.

124
00:08:46.260 --> 00:08:52.890
There's actually table references so there's table markings in here in the HTML code and that's basically

125
00:08:52.890 --> 00:08:54.140
the is going to do.

126
00:08:54.150 --> 00:08:58.570
And that's going to make a list of them and convert each item in that list into a data frame.

127
00:08:59.330 --> 00:09:03.380
And what you're going to do is just cycle through that list until you find what you want it to look

128
00:09:03.380 --> 00:09:04.000
for.

129
00:09:04.070 --> 00:09:06.740
In this case it should be the very first item in the list.

130
00:09:06.920 --> 00:09:09.690
So if we say data at point zero.

131
00:09:09.740 --> 00:09:14.860
So the very first item on that list that's the data frame we were looking for big name city.

132
00:09:15.020 --> 00:09:16.370
Updated they set her cetera.

133
00:09:16.520 --> 00:09:20.530
Let's go in and just check out the head of that data frame.

134
00:09:20.780 --> 00:09:22.450
And that's what this looks like.

135
00:09:22.610 --> 00:09:24.260
Again some things don't copy over.

136
00:09:24.260 --> 00:09:24.890
Exactly.

137
00:09:24.900 --> 00:09:26.600
You get a bunch of no values.

138
00:09:26.690 --> 00:09:32.330
But keep in mind Panther is basically just reading this H.T. mail file as best as it can.

139
00:09:32.330 --> 00:09:32.760
All right.

140
00:09:32.840 --> 00:09:36.090
That's H-2A mail which is essentially just web scrapin of pandas.

141
00:09:36.260 --> 00:09:40.450
Let's finally move along to our last topic which is working with sequel.

142
00:09:40.820 --> 00:09:45.110
Now there's quite a few notes in your notebook regarding sequel and pandas.

143
00:09:45.110 --> 00:09:50.990
Pandas isn't actually probably the best way to read a sequel database because there are many flavors

144
00:09:50.990 --> 00:09:57.510
of sequel engines such as postscripts sequel My sequel sequel light etc. where we're going to do here

145
00:09:57.510 --> 00:10:03.440
is just actually build a very simple sequel engine that's going to be just temporarily held in memory

146
00:10:03.830 --> 00:10:08.660
in order to show you how you can use those to read tables completely as data frames.

147
00:10:08.660 --> 00:10:14.960
However I would recommend that you actually do a search for a specific driver dependent on your specific

148
00:10:15.050 --> 00:10:16.420
sequel engine.

149
00:10:16.460 --> 00:10:21.260
For example if you go to the notebook for this lecture you'll see that if you're using Postgres sequel

150
00:10:21.440 --> 00:10:26.390
you should actually using a library called Psycho P.G. 2 which is specifically designed to work with

151
00:10:26.390 --> 00:10:30.870
post-career sequel or if you're using my sequel you should use pi sequel.

152
00:10:30.950 --> 00:10:35.280
In other library specifically designed for that specific flavor of sequel.

153
00:10:35.360 --> 00:10:40.070
Right now we're just going to do a very simple example of how pandas could read an entire table and

154
00:10:40.070 --> 00:10:52.360
sequel if it had to end up doing is saying from sequel alchemy imports create engine and this is going

155
00:10:52.360 --> 00:10:57.260
to just allow us to create a very simple sequel engine in memory.

156
00:10:57.340 --> 00:11:04.170
I'm going to go ahead and say engine is equal to create underscore engine and here and just going to

157
00:11:04.280 --> 00:11:06.120
Taipan sequel lights.

158
00:11:09.060 --> 00:11:16.300
Three forward slashes and then memory colon.

159
00:11:16.420 --> 00:11:17.260
So I have sequel.

160
00:11:17.290 --> 00:11:24.020
Colon three four slashes colon memory colon wanted to go ahead and run that and this little thing.

161
00:11:24.030 --> 00:11:30.780
This little line of code has created a very temporary very small sequel like engine database that's

162
00:11:30.780 --> 00:11:32.310
running in memory.

163
00:11:32.310 --> 00:11:39.660
I'm going to go ahead and take my data frame that DSF and I'm going to say to underscore sequel and

164
00:11:39.660 --> 00:11:43.490
I'm going to write it to that very temporary engine that we have running in memory.

165
00:11:45.080 --> 00:11:49.250
So what you can do is you get to say to sequel you're going to pass in what you want this table to be

166
00:11:49.250 --> 00:11:50.090
called.

167
00:11:50.120 --> 00:11:52.920
So go ahead and call this my table.

168
00:11:53.330 --> 00:11:55.520
And then you pass in the sequel engine you're working with.

169
00:11:55.520 --> 00:11:57.650
In this case it's just an engine.

170
00:11:57.680 --> 00:12:05.210
Now this engine is going to be a connection usually I would recommend you read through this documentation

171
00:12:05.240 --> 00:12:11.630
thoroughly but again like I mentioned earlier pandas just by itself probably isn't the best source for

172
00:12:11.630 --> 00:12:14.560
you to actually read sequel into pandas directly.

173
00:12:14.630 --> 00:12:20.450
You should probably look for specialized Python libraries for whatever version of sequel you're working

174
00:12:20.450 --> 00:12:21.370
with.

175
00:12:21.370 --> 00:12:24.850
But as far as a very simple setting you can just say DFI to sequel.

176
00:12:24.990 --> 00:12:31.040
Passen the new table name you want and then the connection to your sequel engine.

177
00:12:31.430 --> 00:12:36.600
And now I'm going to go ahead and say sequel DSF and actually read back that table.

178
00:12:36.620 --> 00:12:44.290
So going to say PD read underscore sequel I pass in the name of my table in this case it's my table.

179
00:12:44.290 --> 00:12:47.840
And then I specify the actual connections and watch CNN.

180
00:12:47.990 --> 00:12:54.200
And that's just the engine that very small sequel lights database that's happening in memory.

181
00:12:54.200 --> 00:13:00.070
If I go ahead and read that and check out what that looks like I guess sequel DMF and notice that it

182
00:13:00.140 --> 00:13:02.830
index is a new column here.

183
00:13:02.840 --> 00:13:03.380
All right.

184
00:13:03.380 --> 00:13:03.810
Go ahead.

185
00:13:03.810 --> 00:13:06.070
Feel free to post the Q&amp;A forums.

186
00:13:06.170 --> 00:13:11.810
If you're having trouble finding a particular library that works if your sequel engine or your flavor

187
00:13:11.810 --> 00:13:18.170
of sequel as far as this lecture the main thing to get out of it is how to read and write to C S V files

188
00:13:18.440 --> 00:13:21.560
because we're only going to be working of C S V files for the rest of the Course.

189
00:13:21.740 --> 00:13:26.330
As far as your own personal usage hopefully you can just check out the read underscore methods.

190
00:13:26.330 --> 00:13:31.880
There are a lot of them and you can just look at the documentation or reference a notebook for how to

191
00:13:31.880 --> 00:13:35.390
actually read to a panda's data frame.

192
00:13:35.390 --> 00:13:37.500
All right thanks everyone.

193
00:13:37.520 --> 00:13:42.170
Go ahead and ask any questions you have on this lecture at the Q&amp;A forum because there is a lot of options

194
00:13:42.170 --> 00:13:44.620
here and we just don't have time to cover them all.

195
00:13:44.720 --> 00:13:47.870
But if you have any questions I'm happy to answer them in the forums.

196
00:13:47.870 --> 00:13:49.910
Thanks everyone and I'll see you at the next lecture.
