WEBVTT
1
00:00:06.480 --> 00:00:12.100
Welcome back everyone to this lecture on series series or similar to Empire race.

2
00:00:12.140 --> 00:00:17.090
Except that we can actually give them a name or date time index instead of just a numerical index.

3
00:00:17.090 --> 00:00:19.630
Let's open up a Jupiter notebook and see how they work.

4
00:00:20.240 --> 00:00:24.500
OK so let's begin understanding how to work with Ceres and we're going to use Sirius later on to work

5
00:00:24.500 --> 00:00:26.060
with data frames.

6
00:00:26.060 --> 00:00:33.620
I'm first going to import some pie and P and then I will import panderers as PD then to create a series

7
00:00:33.620 --> 00:00:36.530
you can actually convert many object types to a series.

8
00:00:36.530 --> 00:00:38.310
Let's show you how you can do that.

9
00:00:38.360 --> 00:00:41.390
I'm going to create a list called labels and we'll just have these labels.

10
00:00:41.390 --> 00:00:45.920
B A B C and Lalage's.

11
00:00:45.950 --> 00:00:46.480
ABC.

12
00:00:46.490 --> 00:00:49.930
Keep it simple anoints create illest numbers.

13
00:00:49.940 --> 00:00:59.670
This will be 10 20 30 and then I'm going to create a name Pyra which would just be an umpire A and I'll

14
00:00:59.670 --> 00:01:06.630
do the same numbers here at 10 20 30 and then I'm also going to create a dictionary which is going to

15
00:01:06.630 --> 00:01:11.920
have a key of a letter and then the value of a number.

16
00:01:12.080 --> 00:01:20.790
So say a 10 B 20 C and let's make C here 100 and make sure that's a string.

17
00:01:21.660 --> 00:01:22.410
There we go.

18
00:01:22.590 --> 00:01:27.330
So I have my labels list in my list of numbers an array of numbers and a dictionary.

19
00:01:27.360 --> 00:01:33.830
So let's show you how you can actually create a list using these various objects to create a series

20
00:01:33.830 --> 00:01:41.800
from a list you can just pass it in as my list and you'll see PD that series and you see my list.

21
00:01:41.870 --> 00:01:46.640
If you take a look at the documentation for series you'll notice that there's basically two main arguments

22
00:01:46.640 --> 00:01:50.520
that we're going to be passing that is the data argument and the index argument.

23
00:01:50.660 --> 00:01:53.930
So basically creates a one dimensional and the array.

24
00:01:53.970 --> 00:01:56.390
However it has axis labels.

25
00:01:56.420 --> 00:02:00.050
That's something that differentiates it from just a normal name pyrite.

26
00:02:00.230 --> 00:02:06.620
Right now if you just passen my list which is these data points 10:23 you see that we have an index

27
00:02:06.620 --> 00:02:11.190
position 0 matched up with a value 10.

28
00:02:11.450 --> 00:02:17.670
Now what we can also do is set the index to be labels.

29
00:02:17.850 --> 00:02:22.160
And now if you take a look at the series we've been able to index of a name label.

30
00:02:22.280 --> 00:02:26.400
So we have a which was this label matched up to the state of point 10.

31
00:02:26.630 --> 00:02:29.510
And that's kind of where the power of series comes into play.

32
00:02:29.510 --> 00:02:32.370
Now you can also create series from other object types.

33
00:02:32.690 --> 00:02:33.910
Not just a list.

34
00:02:33.950 --> 00:02:37.940
You could also passen that array and you would get the same values out.

35
00:02:38.090 --> 00:02:44.990
And then you could also pass in the array with the labels and Lotusphere indicating that data is equal

36
00:02:44.990 --> 00:02:46.950
to array or indexical labels.

37
00:02:47.060 --> 00:02:51.030
You can just pass them InfoSpace find those parameters and you'll get back the same results.

38
00:02:51.790 --> 00:02:56.270
You can also use that dictionary that we created.

39
00:02:56.290 --> 00:03:01.140
So if you pass in a dictionary what this will do is it will look at the dictionary and assign the keys

40
00:03:01.160 --> 00:03:06.240
the index and then the item to be the actual value at that point.

41
00:03:06.250 --> 00:03:11.710
Now something that's also impressive about a panda series besides is ability to have named indices is

42
00:03:11.710 --> 00:03:14.050
the fact that it can hold a variety of object types.

43
00:03:14.050 --> 00:03:19.660
So right now we saw that it just holds numerical objects but we could also say Petey's series and I

44
00:03:19.660 --> 00:03:23.750
could specify the data to be equal to that labels list.

45
00:03:23.900 --> 00:03:27.230
And now you'll notice it automatically fills in that numerical index.

46
00:03:27.340 --> 00:03:33.190
And then the data becomes strings or labels and you can also see the type indicating what the actual

47
00:03:33.220 --> 00:03:34.030
object type is.

48
00:03:34.030 --> 00:03:37.480
So you have 64 bit integers 32 bit integers etc..

49
00:03:39.150 --> 00:03:43.010
Now something else you can even do here while this is extremely uncommon.

50
00:03:43.020 --> 00:03:45.760
I just want to show you how flexible panda series are.

51
00:03:45.820 --> 00:03:48.460
You can even pass in a list of built in functions.

52
00:03:49.450 --> 00:03:53.440
Such as some prints and length Those are all built in functions you can see the syntax highlighting

53
00:03:53.440 --> 00:03:59.410
there and series won't actually complain that you're passing and functions in fact it will store them

54
00:03:59.470 --> 00:04:02.130
as built in functions so you could call them out later on.

55
00:04:02.170 --> 00:04:05.290
Again this is extremely uncommon and we won't really ever use this.

56
00:04:05.290 --> 00:04:08.430
I just want to show you how flexible the panda series is.

57
00:04:08.720 --> 00:04:13.630
OK let's go over how to use an index with a the series which is pretty much the most crucial part of

58
00:04:13.660 --> 00:04:15.940
understanding how a series works.

59
00:04:15.940 --> 00:04:22.720
To do this I'm going to create a series and I will say PD series I will set that equal to a variable

60
00:04:22.720 --> 00:04:29.260
called se or 1 in the pass in my data just to be 1 2 3 4 and then for my index.

61
00:04:29.300 --> 00:04:41.410
I'm just going to pass in some countries will say USA China let's say France and then Germany.

62
00:04:41.420 --> 00:04:44.390
So if I take a look at series 1 I have USA as one.

63
00:04:44.390 --> 00:04:45.850
China's two France's three.

64
00:04:45.860 --> 00:04:52.730
Germany's four that is going to create another series and I'm going to copy and paste these values here.

65
00:04:54.070 --> 00:04:58.310
But instead of actually providing the same index I'm going to change some of these countries so let's

66
00:04:58.310 --> 00:05:04.600
say instead of France will put in Italy and Germany will put in Japan

67
00:05:07.460 --> 00:05:09.860
will run that and then I see Series 2.

68
00:05:10.250 --> 00:05:15.120
So if you ever want to access a value from a series you can basically just do it with an index call.

69
00:05:15.440 --> 00:05:18.880
So you'll say S-E are one and then pasan.

70
00:05:18.890 --> 00:05:24.380
Whatever the index name is so if I want to grab the value for USA in this first series I just passen

71
00:05:24.410 --> 00:05:28.270
here as a string USA and it returns one for me.

72
00:05:28.460 --> 00:05:32.610
Likewise if I want to grab the value for Japan here I'll say Sirius to

73
00:05:35.730 --> 00:05:40.470
Japan and will return for now if you try to index something that's not in the series.

74
00:05:40.470 --> 00:05:46.290
For example let's say Canada was not in either of these series.

75
00:05:46.300 --> 00:05:47.980
So if you try to index you'll get an error.

76
00:05:47.980 --> 00:05:51.570
So keep in mind it's not so flexible where it's just going to produce none.

77
00:05:51.580 --> 00:05:55.390
It will tell you that there's an error that it can find the key and you'll end up usually getting a

78
00:05:55.390 --> 00:05:56.170
key error.

79
00:05:56.320 --> 00:05:58.610
And if you scroll all the way down it says here.

80
00:05:58.640 --> 00:06:02.150
Canada essentially indicating that there is no key called Canada.

81
00:06:02.160 --> 00:06:05.260
There let's go ahead and erase that.

82
00:06:05.520 --> 00:06:08.710
And then finally before we jump over to data friends which is what we're really going to be working

83
00:06:08.710 --> 00:06:12.670
with most of the time you can also do operations that are based off an index position.

84
00:06:12.870 --> 00:06:19.920
So if I were to say serious one plus series two and run this you'll see that it ends up adding up the

85
00:06:19.920 --> 00:06:21.990
values for where there was a match.

86
00:06:22.050 --> 00:06:27.870
So the only countries that match between series 1 and series 2 happens to be USA and China.

87
00:06:28.050 --> 00:06:31.590
So what it does when you add these series together is it adds them up.

88
00:06:31.590 --> 00:06:35.520
Where there is a match and then if there wasn't a match it gives you a null value and when the work

89
00:06:35.520 --> 00:06:40.830
of data friends of Panas later on we'll see how we can set null values to be zero and ignore them etc..

90
00:06:40.920 --> 00:06:43.080
But I just want to get the idea in your mind.

91
00:06:43.080 --> 00:06:46.860
They can perform operations based off of the index positions.

92
00:06:46.910 --> 00:06:48.810
All right that's really it for series.

93
00:06:48.810 --> 00:06:52.980
We're going to be using them a lot more when we talk about data frames and how you can construct a data

94
00:06:52.980 --> 00:06:56.040
frame based off of multiple series objects.

95
00:06:56.040 --> 00:06:57.830
Thanks everyone and I'll see at the next lecture.
