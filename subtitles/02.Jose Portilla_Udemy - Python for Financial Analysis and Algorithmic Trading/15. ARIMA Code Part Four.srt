1
00:00:05,300 --> 00:00:11,000
Welcome back everyone to part 4 of the Arema code along in this lecture will finally implement the Arema

2
00:00:11,000 --> 00:00:14,320
model and actually use it to forecast future data points.

3
00:00:14,510 --> 00:00:15,930
Let's go ahead and get started.

4
00:00:16,220 --> 00:00:16,400
All right.

5
00:00:16,400 --> 00:00:17,510
Here I am at the notebook.

6
00:00:17,510 --> 00:00:19,370
Let's go ahead and get started.

7
00:00:19,370 --> 00:00:21,580
First we'll show you how to import in a Rehema model.

8
00:00:21,620 --> 00:00:26,290
In case you ever find yourself needing to use it and then we'll show you how to import stat's models

9
00:00:26,440 --> 00:00:28,510
Seasonale a Rhema model.

10
00:00:28,510 --> 00:00:36,020
So in case you want in a Rieman model for non seasonal data you can say from stat's models the TSA Arema

11
00:00:36,020 --> 00:00:43,850
underscore model import Arema and then offer that you can just call the Arema model and if you do shift

12
00:00:43,850 --> 00:00:48,900
Tapin you see it's the auto recip integrated moving average Arema PD queue model.

13
00:00:48,920 --> 00:00:54,650
So there you provide it it's p and q depending on what you got back out from parsha autocorrelation

14
00:00:54,650 --> 00:00:59,570
plots and autocorrelation plots and make sure you've done the resource reading assignments to understand

15
00:00:59,810 --> 00:01:06,000
how to choose p and q values especially how to choose the capital P and Q values that go along for Seasonale

16
00:01:06,020 --> 00:01:06,780
model.

17
00:01:07,150 --> 00:01:11,320
And in case you ever want to see the full documentation in code just say help on this Arema object and

18
00:01:11,340 --> 00:01:13,700
it gives you the full documentation string here.

19
00:01:13,920 --> 00:01:16,470
OK so there's lots of information there that you can check out.

20
00:01:16,490 --> 00:01:21,710
In our case we have seasonal data so we'll be using the seasonal Arema model that's available for us

21
00:01:21,980 --> 00:01:23,180
in Stets models.

22
00:01:23,390 --> 00:01:27,560
OK let's show you how you can actually import the seasonal Arema model.

23
00:01:27,710 --> 00:01:35,600
So to do that you actually need to call it seal say S.M. the TSA dot and it's under the state space

24
00:01:36,080 --> 00:01:45,250
and then you're going to call s Arema X where we have S for seasonal Arema for auto regressive integrated

25
00:01:45,250 --> 00:01:50,980
moving average and then the X stands for X genius variables which allows you to take into account external

26
00:01:50,980 --> 00:01:54,300
variables and that's kind of useful for things like a weather forecast.

27
00:01:54,370 --> 00:01:58,810
So we're going to use that and we're going to pass in our actual data.

28
00:01:58,810 --> 00:02:05,360
This is the original data we had milk in pounds per cow and then going to set this to be my model and

29
00:02:05,360 --> 00:02:07,970
then I'm going to need to add in two things.

30
00:02:08,000 --> 00:02:10,830
One is the order and the other one is the seasonal order.

31
00:02:10,850 --> 00:02:19,030
So based on what we've seen so far we're going to see an order of 0 1 0 and then our seasonal order

32
00:02:19,030 --> 00:02:23,320
and you can kind of mess around with this to see what works best is going to set it to one on 1 and

33
00:02:23,320 --> 00:02:25,750
then 12 because there's told months in a year.

34
00:02:25,930 --> 00:02:30,820
So we will run that and then we're going to do is actually check out the results of this.

35
00:02:30,820 --> 00:02:33,820
So in order to check out the results we need to fit the model.

36
00:02:33,820 --> 00:02:40,090
So it's kind of two steps here once you've assigned the model you then call it to be fit on the data.

37
00:02:40,100 --> 00:02:43,130
So the fitting doesn't actually happen until you call it.

38
00:02:43,370 --> 00:02:47,780
Once you've done that and that may take a while depending on how large of a dataset you have you'll

39
00:02:47,780 --> 00:02:53,690
go ahead and just print out results and the call the summary method off those results and you'll get

40
00:02:53,690 --> 00:02:58,460
back your state space model results will tell you the dependent variable it was trying to predict the

41
00:02:58,460 --> 00:03:02,800
number of observations and a bunch of different information you can check out here.

42
00:03:02,880 --> 00:03:06,350
Now all of this is going to be useful to us now but it's in case you ever need it.

43
00:03:06,350 --> 00:03:07,800
It's pretty much all here.

44
00:03:08,060 --> 00:03:09,860
So that's the summer result.

45
00:03:09,860 --> 00:03:13,330
We're going to go ahead and show you is probably something that's a little more intuitive.

46
00:03:14,290 --> 00:03:25,610
If you take your results that you just did and you call it off of it's and it's a mixture called results

47
00:03:25,640 --> 00:03:28,280
that reside we can see the residual values.

48
00:03:28,280 --> 00:03:34,870
So basically what this did is it has the error based off what it would predict for our original data.

49
00:03:34,970 --> 00:03:42,020
So what I mean by that we can just plot this and these are the residual error so you can see 1963 kind

50
00:03:42,020 --> 00:03:43,010
of the big error there.

51
00:03:43,030 --> 00:03:46,380
But after that it pretty much just smoothes out.

52
00:03:46,730 --> 00:03:58,040
So what we can do is also do a plot of our results and call Rossett plots and then say kind is equal

53
00:03:58,070 --> 00:04:06,070
to KDE and this will give us a kernel density estimation to see kind of distribution of our errors.

54
00:04:06,080 --> 00:04:09,020
You could see that were mostly distributed around zero which is good for us.

55
00:04:09,020 --> 00:04:12,830
The cost of these residual errors is 0 the better.

56
00:04:12,830 --> 00:04:19,210
So let's go ahead and show you how we can use this to predict future values or actually perform forecasting.

57
00:04:19,310 --> 00:04:24,260
So we can get an idea of how well our model performs but just actually predicting for values that we

58
00:04:24,440 --> 00:04:25,810
in essence already know.

59
00:04:26,020 --> 00:04:31,310
So we're going to do the following I'll say if and I'm going to kind of do a little fake forecast a

60
00:04:31,310 --> 00:04:36,320
critical thing called forecast and it's going to be results and then I'm going to call the Predict method

61
00:04:36,320 --> 00:04:41,830
off of this and I'm going to predict PC to predict we have a start and that end.

62
00:04:41,990 --> 00:04:51,880
So I will say start is equal to next point let's say 150 and then the end point.

63
00:04:51,880 --> 00:04:54,010
Remember we had like 160 points.

64
00:04:54,010 --> 00:04:55,690
So I'll just state that there.

65
00:04:55,930 --> 00:05:03,730
And then what I'm going to do is say forecast actually let's get both of these columns will say milk

66
00:05:03,850 --> 00:05:10,700
in pounds per cow and hopefully I spelled this with the correct capitalization.

67
00:05:10,870 --> 00:05:12,210
Let me just make sure.

68
00:05:12,400 --> 00:05:15,630
Looks like the key is incorrect so let me grab that.

69
00:05:15,820 --> 00:05:21,050
I'll just say the thought columns and looks like a milk in pounds per cow.

70
00:05:21,050 --> 00:05:23,150
That's what actually was going to copy that.

71
00:05:23,180 --> 00:05:25,460
That C should be capitalized.

72
00:05:25,460 --> 00:05:31,730
Let's put that in that Rigaud Now let's add one more quote there.

73
00:05:31,750 --> 00:05:33,040
Let's stick with that hash tag.

74
00:05:33,220 --> 00:05:34,890
All right so a million pounds per cow.

75
00:05:34,930 --> 00:05:41,060
That's one of the columns I want to plot and then forecast is the other one so I will plot this time

76
00:05:41,060 --> 00:05:47,960
series and will plot a fix size of let's say 12 8.

77
00:05:47,970 --> 00:05:49,770
OK so what does this actually doing.

78
00:05:49,770 --> 00:05:56,730
Well this is showing you what your Arema model would have forecasted serial model is forecasting this.

79
00:05:56,730 --> 00:06:02,280
Now we can see how it compares to our actual real data and necessarily a pretty good forecast.

80
00:06:02,280 --> 00:06:07,240
We're only a little bit off on certain seasons but in general the trend seems to be correct.

81
00:06:07,260 --> 00:06:09,240
And the general seasonality of this seems to be correct.

82
00:06:09,240 --> 00:06:12,550
So so far we're doing pretty good even on the data that we already know.

83
00:06:12,810 --> 00:06:15,520
But what we actually want to do is forecast for future data.

84
00:06:15,540 --> 00:06:17,880
So things beyond 1 6 8.

85
00:06:17,970 --> 00:06:23,440
So you may think you would just come over here to end and give more points we would say okay predict

86
00:06:23,660 --> 00:06:25,430
to index to 50.

87
00:06:25,590 --> 00:06:30,840
But unfortunately if you were to run that you would end up getting all the way until the end where you

88
00:06:30,840 --> 00:06:32,450
stopped having data points.

89
00:06:32,610 --> 00:06:34,760
So you actually need is more time periods.

90
00:06:34,830 --> 00:06:39,150
So you can end up doing is actually create them with panderers onto our original data frame.

91
00:06:39,150 --> 00:06:44,280
So let me show you how we do that how we can fix this problem and set a higher end date for us to actually

92
00:06:44,280 --> 00:06:47,710
forecast real values.

93
00:06:47,730 --> 00:06:52,590
So take a look in detail here all the way at the end we have the milk impounds seasonal different seasonal

94
00:06:52,590 --> 00:06:54,950
first difference and then we have this forecasted value.

95
00:06:55,020 --> 00:06:57,860
So you can see here the real value the forecasted value.

96
00:06:57,870 --> 00:07:03,870
And then earlier we actually saw the residuals themselves was essentially the real value minus the forecasted

97
00:07:03,870 --> 00:07:11,060
value in all we're going to do now is add on some more months to this dataset with empty values and

98
00:07:11,060 --> 00:07:16,790
then once these index positions are there all these values are empty we can still forecast on them.

99
00:07:16,790 --> 00:07:17,090
All right.

100
00:07:17,090 --> 00:07:24,620
So what we need to do here is actually create an additional number of rows with time stamps with date

101
00:07:24,620 --> 00:07:28,730
time index that is going to represent future dates.

102
00:07:28,730 --> 00:07:34,910
So starting from 1975 December 1st let's go ahead and see if we can create one or two years after this

103
00:07:34,910 --> 00:07:36,040
Solus try to end it.

104
00:07:36,350 --> 00:07:39,810
Let's just say like November 1977 or something like that.

105
00:07:39,860 --> 00:07:43,130
See if we can predict about two years worth of milk production.

106
00:07:43,130 --> 00:07:51,680
So to do that we can use some panderers tools will say from Pandurs that T-Series the offsets import

107
00:07:53,120 --> 00:07:55,810
They offset.

108
00:07:55,830 --> 00:08:01,830
So if we take a look at what they offset does it allows you to do some sort of standard kind of date

109
00:08:01,920 --> 00:08:04,140
increment used for a date range.

110
00:08:04,140 --> 00:08:09,720
So that's what we're going to be using and we're going to do is set the argument months equal to and

111
00:08:09,720 --> 00:08:14,400
we'll show you what that's going to be a second that we do that I'm going to say future dates is equal

112
00:08:14,400 --> 00:08:18,590
to this and I'm going to basically do a list comprehension.

113
00:08:19,020 --> 00:08:29,660
I'm going to start with DSF index minus 1 and I'd say plus they offset where months is equal to x.

114
00:08:29,880 --> 00:08:39,400
And then I'm going to say for x in range 0 to 24.

115
00:08:39,600 --> 00:08:41,480
All so what is this actually doing.

116
00:08:41,510 --> 00:08:45,010
I look at this if we see DMF index negative one.

117
00:08:45,010 --> 00:08:46,770
That is the last index value.

118
00:08:46,780 --> 00:08:55,930
So this right here this is December 1st 1975 then I'm going to add a the offset where months is equal

119
00:08:55,930 --> 00:08:57,110
to x.

120
00:08:57,190 --> 00:09:04,240
So I'm going to add an offset of 0 months one month two months three months etc..

121
00:09:04,360 --> 00:09:06,320
Now I shouldn't actually start at zero months.

122
00:09:06,340 --> 00:09:10,480
I should start at one month because I don't want to have a duplicate.

123
00:09:10,510 --> 00:09:13,330
1975 December 1st.

124
00:09:13,330 --> 00:09:14,980
So let's run that.

125
00:09:14,980 --> 00:09:19,780
And if you check out with future dates look like it's a list of time stamps where we have time stamps

126
00:09:19,780 --> 00:09:23,560
that are basically the very next month part.

127
00:09:23,560 --> 00:09:28,350
So we have 1975 December 1st that we have 1976 January 1st.

128
00:09:28,540 --> 00:09:32,830
So we have now or future dates that we're ready to concatenate to this data frame.

129
00:09:32,830 --> 00:09:34,040
So let's do that now.

130
00:09:34,300 --> 00:09:43,020
We'll end up doing is we just scroll down here we'll say the data frame or create a data frame where

131
00:09:43,020 --> 00:09:51,390
the index is equal to the future dates and the columns is equal to our original columns the columns

132
00:09:51,900 --> 00:09:56,560
and also that to be equal to a future data frame.

133
00:09:56,580 --> 00:10:03,050
So if I take a look at my future data frame it's just empty values but the index indicates the future

134
00:10:03,070 --> 00:10:08,400
something we don't know yet 1976 and then we're going to set that future data frame.

135
00:10:08,430 --> 00:10:16,740
So if you scroll down here I'm going to set my final data frame equal to PD non-cat and I'm going to

136
00:10:16,740 --> 00:10:21,360
concatenate my original data frame with my future data frame.

137
00:10:23,040 --> 00:10:25,850
And if I take a look at my final data frame Take a look.

138
00:10:25,860 --> 00:10:29,760
The head of it we have our original data starting at 1962.

139
00:10:29,960 --> 00:10:31,330
There's no forecast there.

140
00:10:31,370 --> 00:10:37,780
And if we take a look at the tail of it we have all this feature data and there is no information there.

141
00:10:37,790 --> 00:10:41,640
So now this will allow us to easily forecast for future data points.

142
00:10:41,660 --> 00:10:43,790
So let's try that forecasting again.

143
00:10:43,790 --> 00:10:48,530
And now we'll be able to predict up to basically 24 points ahead.

144
00:10:49,290 --> 00:10:58,260
So I'll say the following DMF forecast and this is actually in the final T.F. So filed the forecast

145
00:10:58,260 --> 00:11:04,650
is going to be go to results and then I'm going to predict I will start at that very last point we had

146
00:11:04,650 --> 00:11:05,970
which was 168.

147
00:11:06,150 --> 00:11:14,640
And then I'm going to end it let's just say something like 1 88 actually saw more points of say 1 94

148
00:11:15,740 --> 00:11:17,750
or 182 excuse me.

149
00:11:17,750 --> 00:11:19,520
So that's 24 points ahead.

150
00:11:19,820 --> 00:11:23,570
And then we'll say run that's.

151
00:11:23,690 --> 00:11:26,910
So now if I look at my final T.F. let me look at the tail of it.

152
00:11:27,560 --> 00:11:31,010
I now have a forecast value for these future months.

153
00:11:31,010 --> 00:11:33,940
So let's actually plot this out and see if it makes sense or not.

154
00:11:34,070 --> 00:11:42,730
So I will say the following will say final DMF I'm going to take my milk and pounds per cow.

155
00:11:42,880 --> 00:11:48,990
I'm going to plot that and then also going to my final d f and then I'm going to plot the forecast on

156
00:11:48,990 --> 00:11:49,340
this

157
00:11:52,130 --> 00:11:57,650
and we can see here that our forecast here is an orange and if we actually want the labels we can just

158
00:11:57,650 --> 00:12:00,210
put this all in a single plot come in.

159
00:12:00,230 --> 00:12:03,240
So I'll just say pass and a list here.

160
00:12:04,050 --> 00:12:07,200
And then let's also put in milk and pounds per cow.

161
00:12:07,320 --> 00:12:09,630
So this will just make it a little more clear what's the forecast.

162
00:12:09,630 --> 00:12:12,530
Even though it's probably pretty obvious what's the forecast here.

163
00:12:12,540 --> 00:12:16,100
So I'll say fixed size told by.

164
00:12:16,200 --> 00:12:22,200
OK so now we see clearly milk in pounds per cow and we're able to create a realistic looking forecast.

165
00:12:22,230 --> 00:12:26,450
We can see that there's obviously increasing the seasonality is being taken into effect.

166
00:12:26,550 --> 00:12:31,770
And if we take a look at just how accurate we were in general in comparison to our old data it wasn't

167
00:12:31,770 --> 00:12:34,170
so bad it was kind of right on top of our old data.

168
00:12:34,170 --> 00:12:36,900
Now we can see here the residuals mostly are around zero.

169
00:12:36,930 --> 00:12:42,090
Looks like we had some air for those younger values but really doesn't a matter too much for accurate.

170
00:12:42,150 --> 00:12:43,820
Further along the time series.

171
00:12:44,020 --> 00:12:44,360
OK.

172
00:12:44,400 --> 00:12:45,650
So not bad.

173
00:12:45,690 --> 00:12:50,040
I hope you enjoyed learning about real models is clearly a complex topic.

174
00:12:50,040 --> 00:12:55,730
Make sure you do all the reading assignments if you intend to run a ream of models in the future.

175
00:12:55,730 --> 00:13:01,710
Now it comes to a point where I need to discuss why Arema models aren't always so great when you're

176
00:13:01,710 --> 00:13:03,100
dealing with financial data.

177
00:13:03,390 --> 00:13:11,580
So a lot of this stuff assumes that the y value is directly connected to the time and that the time

178
00:13:11,580 --> 00:13:13,820
is a really important aspect of the Y value.

179
00:13:13,830 --> 00:13:18,750
Now while that is true for a lot of financial data that doesn't really take into account things like

180
00:13:19,350 --> 00:13:26,070
force outside of the market such as external traders being able to also buy and sell stock and affect

181
00:13:26,160 --> 00:13:27,210
its price.

182
00:13:27,210 --> 00:13:33,720
And because of that often you'll hear stock and securities prices are following some sort of Brownian

183
00:13:33,720 --> 00:13:35,680
motion almost like a random walk.

184
00:13:35,700 --> 00:13:38,350
So they go up and down all the time when you zoom in really close.

185
00:13:38,400 --> 00:13:43,620
It almost looks random which is why we'll also cover Monte-Carlo simulations because of those aspects

186
00:13:43,620 --> 00:13:50,640
of financial data and securities data this sort of forecasting method doesn't really work with stock

187
00:13:50,790 --> 00:13:56,040
data in general which is kind of inconvenient because you can see here it performs really well on this

188
00:13:56,040 --> 00:14:00,660
sort of data where your time has a clear relationship with your y value.

189
00:14:00,840 --> 00:14:02,730
But first stock market data.

190
00:14:02,730 --> 00:14:04,120
It doesn't really work that way.

191
00:14:04,170 --> 00:14:08,550
So that's why we can't really use a lot of these techniques with financial data.

192
00:14:08,550 --> 00:14:09,130
OK.

193
00:14:09,420 --> 00:14:13,540
So I hope you enjoyed that discussion in general and I will see you at the next section of the course.
