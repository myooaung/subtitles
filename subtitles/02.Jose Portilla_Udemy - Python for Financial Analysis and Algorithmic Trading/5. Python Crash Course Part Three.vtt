WEBVTT
1
00:00:05.420 --> 00:00:09.280
Hello everyone and welcome back to this final part of the Python crash course.

2
00:00:09.500 --> 00:00:14.120
And in this part we'll discuss functions land expressions we'll talk briefly about the map and filter

3
00:00:14.120 --> 00:00:19.550
built in functions and we'll go over a couple of useful methods off some of the data types that we discussed.

4
00:00:19.550 --> 00:00:24.320
Let's get started by talking about functions and basically how we can create our own functions using

5
00:00:24.320 --> 00:00:25.230
Python.

6
00:00:25.550 --> 00:00:31.070
So to create your own function using Python you start off with the keyword DPF to define your function

7
00:00:31.520 --> 00:00:37.670
and functions are going to be lowercase So we'll just say something like my underscore phunk then close

8
00:00:37.670 --> 00:00:40.010
parentheses colon.

9
00:00:40.400 --> 00:00:44.670
And then you have the block of code that will execute whenever you actually call your function.

10
00:00:44.690 --> 00:00:49.880
Remember a function is basically just something that allows you to execute a block of code over and

11
00:00:49.880 --> 00:00:54.070
over again without having to rewrite that entire block you just called a single function.

12
00:00:54.590 --> 00:00:57.100
So we'll have it say something like Prince.

13
00:00:57.110 --> 00:00:58.070
Hello.

14
00:00:58.460 --> 00:01:04.570
I run that to define it and then if I call my phunk it executes Hello.

15
00:01:04.880 --> 00:01:11.900
So what else I can do if a function is adding parameters so I can have a parameter here we'll just call

16
00:01:11.900 --> 00:01:17.330
it parameter and then inside of my function I can actually have Parama.

17
00:01:17.330 --> 00:01:18.620
So what does it actually mean.

18
00:01:18.770 --> 00:01:24.050
Well it means that my function accepts a parameter or some sort of argument and then we can use it inside

19
00:01:24.050 --> 00:01:24.890
the function itself.

20
00:01:24.890 --> 00:01:29.690
So if I run this if I try running my func Again it's actually going to give me an error.

21
00:01:29.810 --> 00:01:33.540
It's going to say hey I expected one required a positional argument.

22
00:01:33.620 --> 00:01:36.420
Primm so requires this argument or parameter.

23
00:01:36.470 --> 00:01:41.830
So it's provided one will just give it Jose and it just prints out Jose.

24
00:01:41.870 --> 00:01:44.750
So that's the way you can create a function that has parameters.

25
00:01:44.750 --> 00:01:49.520
You can also set default values for parameters but it's just set in equals and then some sort of default

26
00:01:49.520 --> 00:01:50.920
value.

27
00:01:50.960 --> 00:01:57.620
So when your function has a default value if you run it with a value that you provide it will overwrite

28
00:01:57.620 --> 00:01:58.430
the default.

29
00:01:58.640 --> 00:02:03.640
But if you don't provide it with anything it will just go to the default value here.

30
00:02:03.650 --> 00:02:07.250
So another thing we can actually add into this function is the documentation string.

31
00:02:07.250 --> 00:02:10.050
So you've seen documentation strings by using shift tab.

32
00:02:10.160 --> 00:02:15.420
If you want to add in your own documentation string to a function just have a set of triple quotes and

33
00:02:15.430 --> 00:02:18.870
notices you begin typing those three double quotes there.

34
00:02:19.010 --> 00:02:24.560
Jupiter will automatically fill in that and that allows you to write in a multi-line string where the

35
00:02:24.560 --> 00:02:28.960
docstring will go here will say docstring goes here.

36
00:02:29.240 --> 00:02:33.850
And then I can rerun that in if I call my phunk I end up getting default.

37
00:02:33.890 --> 00:02:38.870
But if I have my cursor inside of this and shift tab I get to end up seeing my documentation's string

38
00:02:38.870 --> 00:02:40.940
where it just says docstring goes here.

39
00:02:41.060 --> 00:02:45.080
And it also tells you what the parameters are and what the default values for the parameters are.

40
00:02:45.080 --> 00:02:51.070
So you're calling a shift tab it's going into whatever library using and reading off those documentation's

41
00:02:51.070 --> 00:02:53.350
strings in those parameters.

42
00:02:53.360 --> 00:02:56.150
So notice here this function was just printing the parameter.

43
00:02:56.150 --> 00:03:01.640
Usually you won't have a function just do simple print statements but it's going to do instead because

44
00:03:01.640 --> 00:03:04.370
it's going to actually return the parameter.

45
00:03:04.400 --> 00:03:14.300
So for the argument let's just call this arguments and in here will take in arguments and we'll expect

46
00:03:14.390 --> 00:03:19.730
the argument to be a number so we'll do it just say times 5.

47
00:03:19.760 --> 00:03:20.660
So we have that.

48
00:03:20.660 --> 00:03:28.040
And then when I call my funk and pass five what I can end up doing is saying X equal to my funk.

49
00:03:28.220 --> 00:03:32.710
And then when I type in X it's now returning the argument times 5.

50
00:03:32.720 --> 00:03:37.670
So this is different than just printing it out because the return statement allows me to return it in

51
00:03:37.670 --> 00:03:39.720
order to save it to a variable later on.

52
00:03:39.920 --> 00:03:45.020
So usually when using functions you'll want to return whatever final calculation you did.

53
00:03:45.020 --> 00:03:49.710
So after you call the function you can actually get it back out and save it as a variable.

54
00:03:49.760 --> 00:03:53.960
And then once you have that variable then you can feel free to print it out if you know for whatever

55
00:03:53.960 --> 00:03:55.340
reason that's what you want to do.

56
00:03:56.230 --> 00:03:56.770
All right.

57
00:03:56.920 --> 00:03:58.600
So that is a function.

58
00:03:58.600 --> 00:04:02.470
Now sometimes you don't want to actually define an entire function.

59
00:04:02.620 --> 00:04:07.990
So specific use case for this is when you're using the map and filter built in functions you'll want

60
00:04:07.990 --> 00:04:10.410
to actually use what's known as a lamb the expression.

61
00:04:10.420 --> 00:04:12.000
That's our second topic here.

62
00:04:12.250 --> 00:04:15.340
So he lambda expression is known as an anonymous function.

63
00:04:15.640 --> 00:04:21.750
And what it allows you to do is quickly create a function to use one time that has no name.

64
00:04:21.790 --> 00:04:26.470
So let's create a normal function and they'll show you how to create an anonymous lambda expression.

65
00:04:26.920 --> 00:04:34.080
So we'll create a function called Times underscore to it takes in some variable of the are and then

66
00:04:34.080 --> 00:04:39.450
what it does it just returns that variable times to.

67
00:04:39.460 --> 00:04:48.860
So when I call times to let's pass and for save that we'll save that as my results and then if I check

68
00:04:48.860 --> 00:04:52.380
out my results I get back eight because four times two is eight.

69
00:04:52.550 --> 00:04:58.730
If I only intended to use this one time in my script it may not make sense for me to write out an entire

70
00:04:58.730 --> 00:04:59.320
function.

71
00:04:59.350 --> 00:05:04.800
And instead what I can do is use the lambda keyword to write what's known as a lambda expression.

72
00:05:04.910 --> 00:05:11.690
So the equivalent lambda expression for this would be keyword lambda var. colon.

73
00:05:11.810 --> 00:05:14.060
They are times two.

74
00:05:14.240 --> 00:05:19.120
So this would be the similar lambda expression version of this function.

75
00:05:19.130 --> 00:05:25.040
So let's actually break down how we can convert this function into a land expression and then up next

76
00:05:25.080 --> 00:05:26.460
we talk about map and filter.

77
00:05:26.540 --> 00:05:28.750
We'll see why lambda expressions can be useful.

78
00:05:29.710 --> 00:05:33.860
So to break down this top function into the expression we did the following things.

79
00:05:34.060 --> 00:05:38.280
A land expression will use the land the keyword instead of the keyword.

80
00:05:38.280 --> 00:05:44.530
So we can just delete that and then we know a land expression won't need a function name.

81
00:05:44.530 --> 00:05:48.070
So we actually remove that as well.

82
00:05:48.070 --> 00:05:52.960
And then we can remove these princes and then instead of just returning something since by default we

83
00:05:52.960 --> 00:05:54.190
know we're going to return.

84
00:05:54.310 --> 00:06:00.230
We just end up typing this and then we replace the D F with the keyword lambda.

85
00:06:00.520 --> 00:06:03.140
And now you have the lambda expression.

86
00:06:03.250 --> 00:06:06.260
So it's kind of show those steps one more time what's actually happening here.

87
00:06:06.370 --> 00:06:08.790
We take away this the key word.

88
00:06:08.950 --> 00:06:10.060
Change it to lambda.

89
00:06:10.060 --> 00:06:16.290
We take away the name of the function and then instead of having a return we just put whatever is going

90
00:06:16.290 --> 00:06:17.880
to return back on the same line.

91
00:06:17.880 --> 00:06:22.500
On the other side of this colon that's taking over a function into a land expression.

92
00:06:22.500 --> 00:06:25.810
Now this by itself isn't super useful but it's really useful.

93
00:06:25.870 --> 00:06:30.010
We're using it with other functions and you want to pass in your function as an argument.

94
00:06:30.030 --> 00:06:35.430
So let's discuss map and filter in order to show while an expression would be useful and we'll be using

95
00:06:35.430 --> 00:06:42.740
these all the time with the library known as pandas so I'm going to create a sequence of numbers.

96
00:06:42.750 --> 00:06:44.900
We'll say one two three four or five.

97
00:06:45.380 --> 00:06:50.980
And then what are am going to do is use the map function and this is a function that's built into Python

98
00:06:51.890 --> 00:06:59.230
so we can do shift tab on it and we can see that it maps some function to some iterable sequence.

99
00:06:59.450 --> 00:07:00.630
So what does that actually mean.

100
00:07:00.650 --> 00:07:09.460
Well what we can do here is say passen are times to function that we had earlier and then passen or

101
00:07:09.470 --> 00:07:11.010
sequence as a queue.

102
00:07:11.680 --> 00:07:13.070
And we see here it returns back.

103
00:07:13.070 --> 00:07:19.760
This map objects if I want to see the result of this I can cast that to a list and then you'll notice

104
00:07:19.760 --> 00:07:26.930
that it took our times to function that we defined earlier and then it said Okay apply times 2 to every

105
00:07:26.930 --> 00:07:29.040
single item in the sequence.

106
00:07:29.240 --> 00:07:32.920
And then we cast that to a list and we get back to four six eight 10.

107
00:07:32.930 --> 00:07:37.270
So again all it does is take it in a function and applies it to a sequence.

108
00:07:37.280 --> 00:07:42.410
Now maybe only intend to use times to once on the sequence.

109
00:07:42.410 --> 00:07:47.390
So instead of going through the entire process of defining a function with the keyword and having a

110
00:07:47.390 --> 00:07:54.210
docstring etc. you can replace times 2 by its equivalent land the expression that we define the pier.

111
00:07:54.370 --> 00:08:00.200
So I'll say Lamda some variable and then return multiplying it by 2.

112
00:08:00.290 --> 00:08:02.710
And if we run this we get back the exact same result.

113
00:08:02.750 --> 00:08:04.250
Two four six eight ten.

114
00:08:04.610 --> 00:08:07.080
And you can actually call this variable whatever you want.

115
00:08:07.310 --> 00:08:10.840
So just like in a for loop it can be just some temporary variable name.

116
00:08:10.850 --> 00:08:14.720
So you can say Nahm and then sometimes two in the Trill and the expression.

117
00:08:14.810 --> 00:08:17.500
So that's how you can use that map with the lambda expression.

118
00:08:17.570 --> 00:08:23.000
The other function I want to talk about that's built into Python is filter and filter again takes in

119
00:08:23.000 --> 00:08:26.230
some function and then applies it to some iterable.

120
00:08:26.240 --> 00:08:31.370
But the difference between a filter and a map is that this returns an iterator yielding those items

121
00:08:31.370 --> 00:08:35.860
of an iterable for which the function item is true.

122
00:08:35.870 --> 00:08:37.310
So what does that actually mean.

123
00:08:37.610 --> 00:08:46.680
Well we're going to have another function say f and we'll call it is even and it takes in some number

124
00:08:47.240 --> 00:08:49.730
and it's going to check if it's even or not.

125
00:08:49.770 --> 00:08:55.260
So we're going to return if the number maade to is equal to zero.

126
00:08:55.260 --> 00:09:01.590
Remember Number two this indicates what is the remainder after you divide it by two if you divide a

127
00:09:01.590 --> 00:09:04.810
number by two and the remainder happens to be equal to zero.

128
00:09:04.920 --> 00:09:08.370
Well then you know it's even so this returns either true or false.

129
00:09:08.400 --> 00:09:11.640
True if the numbers even false if the number is odd.

130
00:09:12.180 --> 00:09:18.920
So I will run this and then we'll say philtre passen is even.

131
00:09:19.040 --> 00:09:23.900
And then we'll pass on our sequence and if you just run this you get this Filcher object so to actually

132
00:09:23.900 --> 00:09:26.990
see the results you'll have a list here.

133
00:09:27.960 --> 00:09:31.650
And then we get back the even numbers of our list remember there was 1 2 3 4 5.

134
00:09:31.650 --> 00:09:34.470
The only even numbers were 2 and 4.

135
00:09:34.710 --> 00:09:39.420
And this is another situation where we could use a lambda expression so see if you can pause the video

136
00:09:39.450 --> 00:09:44.050
and replace is even here with an equivalent lambda expression.

137
00:09:44.060 --> 00:09:50.900
All right I'll walk through that right now instead of saying if I'm going say Lamda will take away is

138
00:09:50.930 --> 00:09:54.800
even will take away the return keyword.

139
00:09:55.260 --> 00:09:57.420
And there we have it the equivalent lambda expression.

140
00:09:57.420 --> 00:10:01.710
So then I just copy this and paste that in here.

141
00:10:02.360 --> 00:10:04.990
Run this and then we get to come for.

142
00:10:05.000 --> 00:10:09.310
So when you're new to Python if you just see this one line here it kind of looks a little bit crazy

143
00:10:09.350 --> 00:10:11.490
but this is actually normal Python.

144
00:10:11.600 --> 00:10:15.920
Some efficient code these one liners they pop up a lot especially some of the libraries we're using

145
00:10:15.930 --> 00:10:20.390
so it takes a little bit of time to get your mindset adjusted to these kind of clever one liners.

146
00:10:20.510 --> 00:10:24.380
But once you work for them more and more and get more comfortable Python will start to feel a lot more

147
00:10:24.380 --> 00:10:25.580
natural to you.

148
00:10:25.580 --> 00:10:29.690
Again don't worry too much if this felt like an overload of very specific Python things.

149
00:10:29.840 --> 00:10:34.410
You'll get enough practice as we go along to the course that by the end you'll be a pro in this.

150
00:10:34.750 --> 00:10:35.290
OK.

151
00:10:35.390 --> 00:10:39.590
Finally I want to just discuss a few simple methods that you may find useful as we continue on through

152
00:10:39.590 --> 00:10:41.520
this course.

153
00:10:41.590 --> 00:10:43.530
The first ones are just string methods.

154
00:10:44.480 --> 00:10:49.900
So if I say Hello my name is s.m I can make sure.

155
00:10:49.910 --> 00:10:52.930
Well let me change this so that s is capitalized.

156
00:10:52.950 --> 00:10:53.750
There we go.

157
00:10:53.870 --> 00:10:58.790
One of the methods I can call to lowercase everything in a string is just s t that lower and that will

158
00:10:58.910 --> 00:11:00.800
lowercase everything in that string.

159
00:11:00.810 --> 00:11:08.180
Likewise I can call s t the upper and that will uppercase everything and note here that in order to

160
00:11:08.180 --> 00:11:12.710
actually execute this I need to call these princes if I just call it without We'll just report back

161
00:11:12.710 --> 00:11:15.960
hey this is some function here that your haven't called yet.

162
00:11:16.040 --> 00:11:20.470
And then when you run this then you've actually called it in the last method I want to show you for

163
00:11:20.480 --> 00:11:23.370
a string is the split method and that one is pretty useful.

164
00:11:23.680 --> 00:11:31.800
So let's create Let's create another string we'll call it tweets and this will just say Go sports hash

165
00:11:31.800 --> 00:11:33.880
tag cool.

166
00:11:34.020 --> 00:11:35.520
Something like that.

167
00:11:35.550 --> 00:11:41.800
Now you can use the dot split method to actually split on particular spaces or characters.

168
00:11:41.850 --> 00:11:48.810
So if I say tweets and then call the split method on this one it ends up doing is by default it splits

169
00:11:48.900 --> 00:11:56.130
on the whitespace of the string and returns back a list of everything split on the whitespace so that

170
00:11:56.130 --> 00:12:02.200
allows you to actually get back a list and iterate through every word in this string.

171
00:12:02.290 --> 00:12:04.810
Now you can actually split on whatever character you want.

172
00:12:05.060 --> 00:12:10.340
So if you want to you could split instead on the hash tag and run this and then it will split on the

173
00:12:10.340 --> 00:12:11.600
hash tag it'll give you back.

174
00:12:11.600 --> 00:12:17.090
Go sports and then cool which then allows you to kind of grab stuff from this list and then it could

175
00:12:17.150 --> 00:12:21.050
do indexing off of this maybe index for one that returns back.

176
00:12:21.050 --> 00:12:21.690
Cool.

177
00:12:21.890 --> 00:12:24.700
So again this is very kind of pythoness the code here.

178
00:12:25.010 --> 00:12:26.410
Split is very useful.

179
00:12:26.410 --> 00:12:30.890
Now there's a bunch of other methods available on strings if you want to see them all just off of any

180
00:12:30.890 --> 00:12:35.540
data type call dots and then you'll see the tab excuse me.

181
00:12:35.580 --> 00:12:37.540
And then you'll see the list of methods.

182
00:12:37.610 --> 00:12:42.430
A lot of these we won't ever need to use but just keep in mind that there for you in case we need them.

183
00:12:42.450 --> 00:12:45.380
OK so those are useful methods for strings.

184
00:12:45.560 --> 00:12:51.410
If we look back or a dictionary that we created earlier with key 10 key to 10 and second item if you

185
00:12:51.410 --> 00:12:57.470
ever need just the keys or items of a dictionary we can and that doing as you can call the doc keys

186
00:12:57.650 --> 00:13:03.390
and sort of turn back kind of a list of the Keys Key key to remember they're not going to be returning

187
00:13:03.390 --> 00:13:10.520
in any sort of order if you want the actual items it's going to return back a tuple a list of tuples

188
00:13:10.520 --> 00:13:12.430
excuse me with the item pairs.

189
00:13:12.440 --> 00:13:15.830
So are key 10 key to second item.

190
00:13:15.830 --> 00:13:17.690
In case you ever need that.

191
00:13:17.770 --> 00:13:20.020
So there are some useful methods of a dictionary.

192
00:13:20.080 --> 00:13:24.760
You can always explore more of them by saying that tab and you here you can see the list of methods

193
00:13:24.760 --> 00:13:27.650
and attributes you can call off a dictionary object.

194
00:13:27.820 --> 00:13:31.430
We'll be using those too often of course so don't worry about it too much.

195
00:13:31.750 --> 00:13:32.240
OK.

196
00:13:32.380 --> 00:13:39.210
Finally for a list so let's create some listed say my list is equal to 1 2 3.

197
00:13:39.460 --> 00:13:45.940
Run that we already know that we can call up a pen on a list and that allows us to add something to

198
00:13:45.940 --> 00:13:47.280
the end of the list.

199
00:13:47.290 --> 00:13:53.430
So now if I check out my list I see one two three four if I ever want to remove an item from a list.

200
00:13:53.620 --> 00:14:00.100
All I need to do is say my list pop and that will remove the very last item in a list.

201
00:14:00.100 --> 00:14:03.110
If you want to remove an item at a certain index location.

202
00:14:03.310 --> 00:14:07.750
You just pass in that index location the pop so he can see my list of pop.

203
00:14:07.810 --> 00:14:10.280
And that removes one.

204
00:14:10.330 --> 00:14:13.320
Keep in mind this does take a permanent effect on your lists.

205
00:14:13.330 --> 00:14:18.600
If I call my list now it no longer has four or one it just has two and three.

206
00:14:18.790 --> 00:14:23.940
And the very last thing I want to talk about is checking if a element is in a list.

207
00:14:23.950 --> 00:14:26.590
They can do that simply with the keyword.

208
00:14:26.630 --> 00:14:33.380
So if you want to check the number one is in my list you just need to run this in or turn back.

209
00:14:33.380 --> 00:14:34.610
True or false.

210
00:14:34.610 --> 00:14:43.120
So if I don't check if 2 is in my list it returns true like why is it do something like is a in one

211
00:14:43.120 --> 00:14:49.410
too two that's going to return False if I add in as an item in that list then it returns true.

212
00:14:49.410 --> 00:14:49.820
All right.

213
00:14:49.850 --> 00:14:53.240
And this concludes this quick Python crash course coming up next.

214
00:14:53.240 --> 00:14:58.040
It's going to be a quick overview of the exercise notebook and then after that we'll go over the solutions.

215
00:14:58.040 --> 00:14:59.690
The exercise notebook.

216
00:14:59.970 --> 00:15:02.000
Okay thanks everyone and I'll see you at the next lecture.
