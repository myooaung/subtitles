WEBVTT
1
00:00:05.350 --> 00:00:12.840
Welcome back everyone to this lecture on time shifting often certain models for predicting prices are

2
00:00:12.840 --> 00:00:15.670
going to require us to shift our data forward or backward.

3
00:00:15.720 --> 00:00:20.850
A certain amount of time steps locally Pandurs makes this really easy and we're going to find out how.

4
00:00:20.880 --> 00:00:24.300
It's basically just a simple method call for the shift method.

5
00:00:24.450 --> 00:00:28.150
Let's hop over to Jupiter notebook and we'll be working at the same Wall-Mart data set.

6
00:00:28.170 --> 00:00:32.450
We worked with in the previous lecture OK here I am my Jupiter notebook.

7
00:00:32.470 --> 00:00:35.320
I've imported pandas as well as non-prime that plot lib.

8
00:00:35.350 --> 00:00:39.460
Now we're only really going to be using panderers for this lecture and I've read in my Wal-Mart stock

9
00:00:39.460 --> 00:00:44.580
C S V indicating that the date is the index column and I want to also parse the dates so their date

10
00:00:44.580 --> 00:00:49.380
time objects so this only works if Date Time indices remember that pretty much everything in the section

11
00:00:49.380 --> 00:00:53.030
of the course and onwards is only going to work with a date time index.

12
00:00:53.100 --> 00:00:59.320
But let's take a look at our head of the data frame and notice here that it's basically daily data.

13
00:00:59.580 --> 00:01:04.680
So we have the third the fourth the fifth and then it jumps to six and then it jumps to 9.

14
00:01:04.680 --> 00:01:06.220
Now this jump from 6 to 9.

15
00:01:06.240 --> 00:01:08.480
That's because the weekend Saturday and Sunday aren't included.

16
00:01:08.490 --> 00:01:09.380
That's seven and eight.

17
00:01:09.600 --> 00:01:11.510
So it's Monday Tuesday Wednesday Thursday Friday.

18
00:01:11.530 --> 00:01:17.250
But essentially they're just time steps of days and we take a look at the tail of our data.

19
00:01:18.500 --> 00:01:19.390
It's a similar thing.

20
00:01:19.400 --> 00:01:23.190
So here we have kind of a weekend or holiday jump depending on what happened here.

21
00:01:23.300 --> 00:01:27.000
And then again it goes back to daily 27 28 29 30 etc..

22
00:01:27.230 --> 00:01:33.380
What I want you to do is notice the actual opening date and its corresponding price so fifty nine point

23
00:01:33.380 --> 00:01:36.950
ninety seven goes with the third sixty point two goes.

24
00:01:37.010 --> 00:01:39.350
The fourth here and for the tail.

25
00:01:39.350 --> 00:01:43.820
I want you to notice that sixty nine point two goes to the twenty ninth and sixty nine point one goes

26
00:01:43.820 --> 00:01:44.770
to the 30th.

27
00:01:45.080 --> 00:01:49.790
So if you ever want to shift your data upwards by 1 timestep that is essentially one index position

28
00:01:49.850 --> 00:01:50.580
up.

29
00:01:50.600 --> 00:01:55.580
All you need to do is grab your data frame say if you scroll down here a little bit and then you can

30
00:01:55.580 --> 00:02:00.110
say shift and this is a method you can call off your data frame.

31
00:02:00.290 --> 00:02:02.890
And if you do a tap here it says period.

32
00:02:02.890 --> 00:02:06.220
So shift the index by the Zari number periods.

33
00:02:06.320 --> 00:02:13.730
So we all end up doing is saying the periods that precision the periods is equal to one period which

34
00:02:13.730 --> 00:02:16.210
is sent to just one index row.

35
00:02:16.480 --> 00:02:19.230
And if we take a look at the head for that.

36
00:02:19.430 --> 00:02:26.080
Notice now that since everything's been shifted up 1 we no longer have any value for the very first.

37
00:02:26.090 --> 00:02:29.260
So that gets filled in with no values.

38
00:02:29.360 --> 00:02:31.280
And if you look at fifty nine point seven.

39
00:02:31.280 --> 00:02:32.930
Now that's sync up with the fourth.

40
00:02:32.930 --> 00:02:37.250
So if we come back up here 59 points nine 7 that will sync up with the third.

41
00:02:37.250 --> 00:02:39.890
Earlier you shifted everything up one period.

42
00:02:39.890 --> 00:02:45.080
So now that nine point seven is linked up with the fourth which also means we check out the tail of

43
00:02:45.080 --> 00:02:53.240
this that we essentially lose the last row of data it gets shifted to a time stamp or a time row that

44
00:02:53.240 --> 00:02:54.030
we don't have.

45
00:02:54.230 --> 00:02:55.310
And it doesn't actually fill it in.

46
00:02:55.310 --> 00:02:57.080
It just essentially gets rid of it.

47
00:02:57.260 --> 00:03:01.640
So keep that in mind you're going to lose that very tail end by a certain number of periods that you

48
00:03:01.640 --> 00:03:04.430
shift forward if you want to shift backwards.

49
00:03:04.430 --> 00:03:05.340
That's very easy.

50
00:03:05.360 --> 00:03:07.320
You just set the periods to negative.

51
00:03:07.490 --> 00:03:09.870
So you can say periods negative 1.

52
00:03:10.550 --> 00:03:15.770
And now if you look at the tail since everything has been shifted backwards the tail is now null.

53
00:03:15.920 --> 00:03:21.730
And if you look at the head we would have lost that very first row of data.

54
00:03:21.740 --> 00:03:26.150
So coming back to the original had noticed it was fifty nine point ninety seven since we shifted everything

55
00:03:26.150 --> 00:03:28.770
backwards one day or one time step.

56
00:03:28.820 --> 00:03:32.620
It's now sixty point two and that very first row has now been lost.

57
00:03:32.630 --> 00:03:35.140
So if you want to shift backwards it's just a negative.

58
00:03:35.150 --> 00:03:40.010
All right the very last thing I want to briefly touch upon we won't really see it use that often but

59
00:03:40.010 --> 00:03:44.870
I do want you to be aware it is using t shift and the frequency argument.

60
00:03:45.050 --> 00:03:50.510
So the shift in the frequency argument essentially what it does is it shifts all the particular rows

61
00:03:50.870 --> 00:03:53.960
to the matching time string code that you provide.

62
00:03:53.960 --> 00:03:58.150
So don't really think of it as shifting everything forward by the time stream code.

63
00:03:58.190 --> 00:04:04.140
Instead think of it as shifting everything on the index to match the same time stream code.

64
00:04:04.310 --> 00:04:10.010
So to actually visualize this or to show you what I mean I'm going to ask for the original data frame

65
00:04:10.010 --> 00:04:10.360
head.

66
00:04:10.430 --> 00:04:12.770
So let's take a look at these first six rows.

67
00:04:12.770 --> 00:04:16.460
Everything belongs to January of 2012.

68
00:04:16.460 --> 00:04:22.220
Now imagine that I want to use some sort of time stream code such as the monthly frequency to shift

69
00:04:22.280 --> 00:04:28.070
every single row that's in the same month to have the matching tie date time index.

70
00:04:28.070 --> 00:04:34.180
So that is all of these roads that are in January to share the last day of the month.

71
00:04:34.190 --> 00:04:42.210
So January 30 first the way I can do that is offer this data frame I can call shift or shift or actually

72
00:04:42.270 --> 00:04:43.150
the same thing.

73
00:04:43.960 --> 00:04:51.230
And then say frequency is month and then we'll say the head of this.

74
00:04:51.420 --> 00:04:52.800
And notice what happens here.

75
00:04:52.890 --> 00:04:57.210
I don't actually lose any data because I'm not really actually shifting my data.

76
00:04:57.210 --> 00:05:03.660
Instead what I'm doing is I'm shifting the index itself to match up with whatever frequency I specifically

77
00:05:03.660 --> 00:05:07.710
provided that time string code that we discussed earlier in this case it's monthly.

78
00:05:07.890 --> 00:05:13.260
So all these January rows end up getting shifted to have an index matching up with the end of the month

79
00:05:13.350 --> 00:05:15.080
that is January 31.

80
00:05:15.290 --> 00:05:22.110
I could do a similar thing for for instance end of year run that and now everything that was in 2012

81
00:05:22.380 --> 00:05:27.230
ends up getting shifted to have the same end of year date time index.

82
00:05:27.240 --> 00:05:32.220
So you can almost think of this as a group by that instead of doing an aggregation you just reassign

83
00:05:32.340 --> 00:05:38.670
the actual date time for that particular row to match up with whatever frequency you provided.

84
00:05:38.670 --> 00:05:40.290
So that's something that's available to you.

85
00:05:40.290 --> 00:05:41.840
We won't really use it that often.

86
00:05:41.880 --> 00:05:46.590
I don't believe we ever throughout the rest of the course but just be aware that it does exist in case

87
00:05:46.590 --> 00:05:47.930
you ever feel the need for it.

88
00:05:48.210 --> 00:05:48.880
Okay.

89
00:05:48.990 --> 00:05:49.280
Really.

90
00:05:49.290 --> 00:05:55.280
All you need to know is how did you shift and then specify the periods of corresponding date time index.

91
00:05:55.290 --> 00:05:57.120
Thanks everyone and I'll see you at the next lecture.
