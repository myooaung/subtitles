WEBVTT
1
00:00:05.390 --> 00:00:06.510
Welcome back everyone.

2
00:00:06.530 --> 00:00:13.380
The date time index lecture often the time and date information in our financial data won't just be

3
00:00:13.380 --> 00:00:17.500
in a separate column but instead it will be the actual index of the data frame.

4
00:00:17.670 --> 00:00:22.360
Let's discover the built in Pandurs tools for creating the working for date time index.

5
00:00:22.370 --> 00:00:24.930
I'll open up a new Jupiter note book and get started.

6
00:00:25.020 --> 00:00:29.640
All right so to start off I'm going to do a couple of imports and you can essentially just fast forward

7
00:00:29.640 --> 00:00:34.950
through these Or maybe you are even already have them but I'm going to import them pies and the Panthers

8
00:00:35.010 --> 00:00:38.140
as PD and just in case we do any visualization.

9
00:00:38.460 --> 00:00:45.290
I'm going to import that plot plotted pipe plot as Piazzi and again in case we do any visualization.

10
00:00:45.290 --> 00:00:49.910
Let me just make sure Matt lib in line because I'm using a Jupiter note book.

11
00:00:50.290 --> 00:00:57.410
OK now builtin Python libraries for dates and times actually exist and the one for Python is the date

12
00:00:57.410 --> 00:00:58.520
time library.

13
00:00:58.520 --> 00:01:05.630
So if installing any additional library you should just be able to say from time import date time and

14
00:01:05.630 --> 00:01:12.050
this is Python's built in dates and time a library that allows you to create timestamps or specific

15
00:01:12.110 --> 00:01:13.310
date objects.

16
00:01:13.340 --> 00:01:17.100
So just to illustrate this I'm going to create a couple of variables.

17
00:01:17.270 --> 00:01:21.640
I'll say my year 2017 and you can basically just make these up.

18
00:01:21.650 --> 00:01:27.020
Also create a month will say the first so that January will create a day of the month.

19
00:01:27.050 --> 00:01:28.400
Will say that's too.

20
00:01:28.670 --> 00:01:30.290
We'll also create an hour.

21
00:01:30.320 --> 00:01:35.290
You kind of get the idea here and the hour it's important to note is going to be in the 24 hour format.

22
00:01:35.300 --> 00:01:42.350
That is something like 1 o'clock in the afternoon or 1 PM is going to be written as 3300 hours so my

23
00:01:42.350 --> 00:01:50.790
hour is going to be between 0 and 24 there and then we'll have a minute my minute will say 30 and then

24
00:01:50.790 --> 00:01:54.560
I'll say my second guess is say 15 seconds.

25
00:01:54.600 --> 00:01:56.310
OK so a bunch of arguments there.

26
00:01:56.540 --> 00:02:00.880
So if you want to use Python's builtin date time functionality it's actually quite simple you would

27
00:02:00.890 --> 00:02:07.460
just say my date is equal to and then you would call date time and the thing to note here and this is

28
00:02:07.460 --> 00:02:13.040
actually one of the complaints of Python's naming scheme is that this date time is being imported from

29
00:02:13.040 --> 00:02:16.940
the date time library so it's going to be like Date Time Date Time.

30
00:02:16.940 --> 00:02:21.700
This is a poor naming convention and a lot of people have complained about it but it's kind of really

31
00:02:21.710 --> 00:02:23.630
built into Python a lot of things depend on it.

32
00:02:23.630 --> 00:02:25.680
So it is here to stay.

33
00:02:25.730 --> 00:02:30.590
Just keep that in mind that if you just say import date time it's not the same as from date time import

34
00:02:30.590 --> 00:02:33.330
date time OK moving along.

35
00:02:33.330 --> 00:02:38.220
I'm going to create a date time object and if you do shift tab here you should see the documentation

36
00:02:38.230 --> 00:02:42.870
string and we can see that it takes in the year the month the day and then it has additional arguments

37
00:02:42.870 --> 00:02:43.780
for that time.

38
00:02:43.830 --> 00:02:50.940
So let's start off with just day information that has a date object and I'm going to pass in my year

39
00:02:52.230 --> 00:02:53.930
my month and my day.

40
00:02:53.940 --> 00:02:58.590
You could also just pass these in as numbers and all have to be variables but this is just for illustration

41
00:02:58.590 --> 00:02:59.060
purposes.

42
00:02:59.060 --> 00:03:03.540
That way it's really clear what the arguments are instead of just passing in numbers so that I have

43
00:03:03.540 --> 00:03:05.090
my dates.

44
00:03:05.220 --> 00:03:10.820
If I take a look at this object I have time that time and then I see 2017 January.

45
00:03:10.850 --> 00:03:13.570
That's one and then the day of the year or.

46
00:03:13.590 --> 00:03:14.700
Scuse me the day of the month.

47
00:03:14.730 --> 00:03:16.590
That's two and we can see that.

48
00:03:16.590 --> 00:03:19.050
Also defaults to zero hundred hours.

49
00:03:19.140 --> 00:03:23.640
So it's important to keep in mind that if you can provide some time information using date time it's

50
00:03:23.640 --> 00:03:26.520
going to default to zero hours and 0 minutes.

51
00:03:26.520 --> 00:03:35.570
If you don't want that to happen we could just specify my date time and then set equal to date time

52
00:03:35.600 --> 00:03:40.370
and I can actually just copy what's here and then I'm going to add an additional arguments to it goes

53
00:03:40.370 --> 00:03:50.820
year month day and then you can add in things like our your minute and then your actual seconds and

54
00:03:50.830 --> 00:03:53.580
after take a look at my date time.

55
00:03:53.800 --> 00:03:56.750
It actually corresponds to the additional time information.

56
00:03:56.830 --> 00:04:00.710
And notice here in this original line it just defaults to hours and minutes.

57
00:04:00.730 --> 00:04:05.270
It won't actually keep providing things like a default second or a default micro-second.

58
00:04:05.710 --> 00:04:11.230
Now it's important to note here is that this is not just a string or some sort of numerical object.

59
00:04:11.230 --> 00:04:13.730
If you take a look at the type of this object.

60
00:04:14.260 --> 00:04:20.490
So I'd say type my date time is a date time date time object and that's really important because this

61
00:04:20.490 --> 00:04:24.460
date time object actually has attributes that you can grab from.

62
00:04:24.700 --> 00:04:30.370
So I can say my date time dots and then if hit tab here you'll notice there's a bunch of things you

63
00:04:30.370 --> 00:04:31.230
can do with it.

64
00:04:31.230 --> 00:04:35.920
There's also a lot of methods but for now I'll just focus on the actual attributes and those are things

65
00:04:35.920 --> 00:04:43.030
like the day or date so I can check out the day and it's going to be the second or I could check out

66
00:04:43.030 --> 00:04:46.470
the month's And that's going to be the first.

67
00:04:46.480 --> 00:04:47.650
And notice these are attributes.

68
00:04:47.650 --> 00:04:49.690
I'm not actually calling here of close princes.

69
00:04:49.690 --> 00:04:54.120
The methods in particular are just attributes of that actual date time object.

70
00:04:54.280 --> 00:04:58.450
So that's the very basics of a date time object that's built into Python.

71
00:04:58.450 --> 00:05:02.470
Now if this were going to be dealing with date time index so you're usually going to be dealing with

72
00:05:02.470 --> 00:05:07.900
a time series as an index when working Panda's data frames obtained from some sort of financial API

73
00:05:07.930 --> 00:05:10.300
or just reading in some CSB file.

74
00:05:10.300 --> 00:05:14.970
Now fortunately for us pand this has a lot of functions and methods to work of time series data.

75
00:05:15.190 --> 00:05:24.990
So first I'm going to create an example of a date time list or a date time array so let's just say first

76
00:05:26.710 --> 00:05:35.260
to and I'm going to create a list of date time objects or say date time and I'll pass in let's say the

77
00:05:35.260 --> 00:05:36.480
1st of 2016.

78
00:05:36.490 --> 00:05:42.210
So January 1st 2016 and then I will also passen as a second item in this list.

79
00:05:42.250 --> 00:05:46.200
Time and let's just say the very next day.

80
00:05:46.200 --> 00:05:53.380
So January 2nd of 2016 I will run this and then say first to.

81
00:05:53.560 --> 00:05:56.230
So here I have just a normal Python list the date time object.

82
00:05:56.230 --> 00:06:00.650
So again check the type of this is the list.

83
00:06:01.350 --> 00:06:06.830
So I have a list of two time objects and what I can do is then convert this into an index.

84
00:06:06.960 --> 00:06:12.180
So as we know we can just convert a simple PI array or a simple python list to an actual index so I'll

85
00:06:12.180 --> 00:06:16.590
say ditty underscore I A&amp;E is equal to PD.

86
00:06:16.590 --> 00:06:21.330
That's And those here are going to say date time index.

87
00:06:21.340 --> 00:06:23.000
Just use tab to autocomplete.

88
00:06:23.160 --> 00:06:25.770
And this is important to note it's not just an index call.

89
00:06:25.800 --> 00:06:30.840
I'm actually telling Pandurs hey this is special date information not just a normal string or a normal

90
00:06:31.080 --> 00:06:33.990
number so I can say the date time index.

91
00:06:33.990 --> 00:06:37.950
And then I'm actually going to pass in that list first to.

92
00:06:38.170 --> 00:06:43.140
So now if I take a look at the T I N the date time index object.

93
00:06:43.330 --> 00:06:48.850
It's now clarified that hey this is a date time index and a lot of times we will actually have to manually

94
00:06:48.850 --> 00:06:50.810
create our date time index in this format.

95
00:06:50.890 --> 00:06:55.360
But in case you get some funky data you may have to do this so it's good that we go over it and we can

96
00:06:55.360 --> 00:06:59.820
see here now is kind of format a little differently we can see the dates here.

97
00:06:59.950 --> 00:07:04.090
And it says hey this is date time 64 bit with nanoseconds.

98
00:07:04.090 --> 00:07:08.610
There's no frequency and we'll discuss frequency later on when it's because frequency sampling.

99
00:07:08.740 --> 00:07:12.680
But here we can see we have the time index and let's attach some random data to it.

100
00:07:13.850 --> 00:07:20.960
So I'm going to use any random randn and I will say two by two.

101
00:07:20.970 --> 00:07:22.210
And let's take a look at that data.

102
00:07:22.310 --> 00:07:24.580
So here we have a random two by two array.

103
00:07:24.880 --> 00:07:33.450
And going to create two columns just Amby and then let's create a data frame will say F is equal to

104
00:07:34.140 --> 00:07:40.490
PD that data frame going to pass in that random data created and then as my index into pasand ditty

105
00:07:40.660 --> 00:07:43.610
underscore I N D and then I'll pass in my columns.

106
00:07:43.610 --> 00:07:45.180
I just created.

107
00:07:45.180 --> 00:07:46.670
All right so here we see our data frame.

108
00:07:46.670 --> 00:07:50.700
And of course as a quick note you probably don't have the same for numbers here that I do because I

109
00:07:50.700 --> 00:07:53.420
didn't set any sort of seed for a random number generator.

110
00:07:53.700 --> 00:07:57.930
But this is the main format you're going to see a lot of our financial data and it's going to have the

111
00:07:57.960 --> 00:08:00.330
index be some sort of date time object.

112
00:08:00.420 --> 00:08:04.380
And then our actual columns will just be that data points themselves things like the price of a stock

113
00:08:04.650 --> 00:08:07.210
or the price of the future that kind of thing.

114
00:08:07.230 --> 00:08:13.500
So now that I have my data framed and its index I can actually take different arguments from it or call

115
00:08:13.500 --> 00:08:14.730
different methods on it.

116
00:08:14.730 --> 00:08:20.970
I can say something like DFA index RMX and if I report that back it says one.

117
00:08:20.980 --> 00:08:22.100
So what does that actually mean.

118
00:08:22.120 --> 00:08:24.730
Well it means the index at position 1.

119
00:08:24.890 --> 00:08:26.350
And remember indexing starts at zero.

120
00:08:26.350 --> 00:08:27.890
So we see this is zero.

121
00:08:28.060 --> 00:08:32.390
And then this is one that is the maximum or the latest date.

122
00:08:32.780 --> 00:08:35.470
And that is the second of January 2016.

123
00:08:35.470 --> 00:08:41.830
And if you actually wanted the value itself you could say if in that case Max and this will return the

124
00:08:41.830 --> 00:08:48.370
actual time stamp itself 2016 January 2nd and you notice he has no hour minute or second information

125
00:08:48.370 --> 00:08:49.250
that we provided.

126
00:08:49.360 --> 00:08:56.950
So it defaulted to 0 0 0 and if you want the earliest you can do the exact same thing so the index in

127
00:08:57.310 --> 00:08:59.400
that returns the index location of the minimum.

128
00:08:59.500 --> 00:09:05.110
If you actually want the minimum value you'll say DLF index men and that returns the actual time stamp.

129
00:09:05.350 --> 00:09:05.770
OK.

130
00:09:05.950 --> 00:09:11.180
So very basic here main idea is I want to get across is a lot of your data is going to be in this format.

131
00:09:11.410 --> 00:09:15.460
And because it's in this format there are special properties you can grab from these date time objects

132
00:09:15.790 --> 00:09:19.810
the special properties being things like just calling attributes such as What is the day or what is

133
00:09:19.810 --> 00:09:20.620
the month.

134
00:09:20.830 --> 00:09:25.090
Later on we're going to get a lot more practice with formatting date time and the CS actually shifting

135
00:09:25.090 --> 00:09:29.180
it calling frequency sampling etc. but these are just the very basics.

136
00:09:29.200 --> 00:09:33.610
And it's also important to note in case you ever get any errors of date time remember it's from date

137
00:09:33.610 --> 00:09:35.260
time import date time.

138
00:09:35.320 --> 00:09:37.960
OK thanks everyone and I'll see you at the next lecture.
