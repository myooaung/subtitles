1
00:00:05,720 --> 00:00:09,370
Hello everyone and welcome to this lecture on pandas operations.

2
00:00:09,530 --> 00:00:14,270
There are a few pandas operations that don't really fit into any of the topics so we previously talked

3
00:00:14,270 --> 00:00:14,840
about.

4
00:00:14,840 --> 00:00:19,460
So we're going to do is just kind of put them all into this grab bag lecture where we discuss different

5
00:00:19,460 --> 00:00:24,410
operations things like pivot tables or how to count how many unique values you have in your data frame

6
00:00:25,100 --> 00:00:27,370
over things you know book and get started.

7
00:00:27,380 --> 00:00:27,670
All right.

8
00:00:27,680 --> 00:00:29,470
Here I am at the Jupiter notebook.

9
00:00:29,540 --> 00:00:34,020
I went ahead and just copied the first cell of the operations the book that goes with the structure

10
00:00:34,370 --> 00:00:36,240
in order to create this data frame.

11
00:00:36,350 --> 00:00:37,600
It just has three columns.

12
00:00:37,600 --> 00:00:46,090
Call 1 call to call 3 and has an index of just numbers 0 1 2 3 and call 1 we have 4 digits called 2.

13
00:00:46,220 --> 00:00:48,040
We have four numbers here.

14
00:00:48,200 --> 00:00:53,980
But notice that 4 4 4 is repeated and then call 3 which just has four sets of strings.

15
00:00:53,990 --> 00:00:57,300
Let's talk about finding unique values in a data frame.

16
00:00:57,320 --> 00:01:04,530
There's three main useful methods concerned with finding unique values in different imagine you want

17
00:01:04,530 --> 00:01:08,170
it to find all the unique values in column two.

18
00:01:08,210 --> 00:01:15,100
The method we can use for that is just the unique method and this will return a higher rate of all the

19
00:01:15,100 --> 00:01:20,650
unique values in column two instead of actually wanting the array of unique values.

20
00:01:20,650 --> 00:01:24,470
Let's say you just actually want the number of values self.

21
00:01:24,520 --> 00:01:26,110
Well there's two methods for this.

22
00:01:26,140 --> 00:01:31,810
You could just check the length of the array that gets returned and this would respond to three.

23
00:01:31,810 --> 00:01:37,260
There's three unique values in column two but Palace actually has a built in method for this and the

24
00:01:37,260 --> 00:01:39,270
schist and unique.

25
00:01:39,280 --> 00:01:41,450
And if I run the cell I get the same answer.

26
00:01:42,250 --> 00:01:42,670
All right.

27
00:01:42,790 --> 00:01:48,260
So we have unique for actual returning an array of unique values and unique.

28
00:01:48,520 --> 00:01:54,470
If I want the number of unique values the last useful function I want to show you is value counts.

29
00:01:54,470 --> 00:01:59,980
And this basically means if you want a table of the unique values and how many times they show up you

30
00:01:59,980 --> 00:02:04,730
can just use value underscore counts as a method.

31
00:02:04,960 --> 00:02:08,180
Run this and this returns.

32
00:02:08,180 --> 00:02:11,480
How many times each unique value occurred in that column.

33
00:02:11,500 --> 00:02:17,320
In this case 4 4 4 occurred twice and the other numbers occurred one time each.

34
00:02:17,330 --> 00:02:22,730
All right those are three very useful methods and you'll find yourself using them often in the exercises.

35
00:02:22,730 --> 00:02:25,950
Let's go ahead and talk about selecting data.

36
00:02:25,980 --> 00:02:28,450
We've already gone over conditional selection.

37
00:02:28,460 --> 00:02:33,930
But I want to reemphasize just how important it is and how powerful it is as a tool.

38
00:02:34,140 --> 00:02:41,310
We have our data frame DMF and we can use conditional selection by passing in a conditional selection

39
00:02:41,310 --> 00:02:49,950
statement such as saying return that F where column 1 is greater than 2 and this will return all the

40
00:02:49,950 --> 00:02:53,950
rows of the data frame where column one happens to be greater than 2.

41
00:02:54,020 --> 00:03:01,480
Remember that this command insight is essentially just a boolean series of False False True true.

42
00:03:01,500 --> 00:03:08,130
Now as a quick reminder if you want to combine conditions you can wrap these conditions in parentheses

43
00:03:09,600 --> 00:03:14,720
and then use either an ampersand or a pipe operator depending if you want and or or.

44
00:03:14,910 --> 00:03:22,470
And then you can say in other conditions such as where called to pass the sin as a string has equality

45
00:03:22,610 --> 00:03:29,120
with 4 4 4 and the return just that last row 3 and there it is.

46
00:03:29,390 --> 00:03:30,180
OK.

47
00:03:30,530 --> 00:03:34,440
So just a quick reminder of how to select data using conditional selection.

48
00:03:34,440 --> 00:03:36,510
Now let's talk about the applied method.

49
00:03:38,230 --> 00:03:42,910
The applied method is going to be one of the most powerful tools in your tool belt when using pandas.

50
00:03:42,910 --> 00:03:44,670
So let's go ahead and show you how it works.

51
00:03:45,720 --> 00:04:00,060
Magin we have a function DPF times 2 that takes in a value X and then returns let's say X times to.

52
00:04:00,180 --> 00:04:02,370
All right a very simple function.

53
00:04:02,520 --> 00:04:09,270
Now you know that you can already grab for instance a column and call a built in function off of it

54
00:04:09,420 --> 00:04:13,000
such as the sum and the return the sum of the column.

55
00:04:13,200 --> 00:04:18,510
But what if you want to apply your own custom function such as times to where Panthers has the ability

56
00:04:18,510 --> 00:04:19,260
to do that.

57
00:04:19,380 --> 00:04:25,920
You can just say the column name and then apply and then you just pass whatever function you want to

58
00:04:25,920 --> 00:04:26,520
apply.

59
00:04:26,970 --> 00:04:34,160
This case we're going to go ahead and apply times to and this will broadcast that function to each element

60
00:04:34,220 --> 00:04:37,480
in that column 2 4 6 8.

61
00:04:37,520 --> 00:04:40,560
You can also apply built in functions such as length.

62
00:04:40,640 --> 00:04:45,280
For instance if we take a look at column three we had a bunch of strings.

63
00:04:45,380 --> 00:04:48,570
Let's say we wanted a column there were present at the length of each string.

64
00:04:48,890 --> 00:04:55,190
Well then we could just say apply the person Elyon now returns the length of the stream which in this

65
00:04:55,190 --> 00:04:58,360
case was three for all those strings apply.

66
00:04:58,360 --> 00:05:02,050
It's going to be especially powerful when you combine it with land expressions.

67
00:05:02,090 --> 00:05:05,570
That way you don't need to take the whole time to define an entire function.

68
00:05:05,600 --> 00:05:10,100
If you're just going to apply it once for instance let's go ahead and make a lamp expression out of

69
00:05:10,100 --> 00:05:11,240
times 2.

70
00:05:11,390 --> 00:05:20,340
I'm going to go out and say Lamda X colon and then just x times to and I'm going to apply this to call

71
00:05:20,340 --> 00:05:23,390
them to let's go ahead and see how this works.

72
00:05:24,440 --> 00:05:25,140
And there you have it.

73
00:05:25,190 --> 00:05:30,560
We were able to multiply each value in that column by two and we were able to do this without having

74
00:05:30,560 --> 00:05:32,740
to write an entire function for it.

75
00:05:32,750 --> 00:05:36,860
We just do this as a lamb the expression and this is the sort of thing you're going to be using all

76
00:05:36,860 --> 00:05:39,310
the time as you get more and more comfortable with Panthers.

77
00:05:39,350 --> 00:05:43,670
This probably one of the most powerful features of pantless the ability to apply your own custom lambda

78
00:05:43,670 --> 00:05:45,780
expressions or functions.

79
00:05:45,800 --> 00:05:51,650
All right let's talk about removing Kobes again if we have.

80
00:05:52,040 --> 00:05:53,630
We want to let's say remove.

81
00:05:53,630 --> 00:05:55,050
Column 1.

82
00:05:55,100 --> 00:06:02,770
We can just say ZF drop passin the column we want to draw c o l 1.

83
00:06:02,930 --> 00:06:07,750
And then remember since these are the columns we have to specify access is equal to 1.

84
00:06:08,090 --> 00:06:11,750
And this will drop that column if we want this to occur in place.

85
00:06:11,750 --> 00:06:17,210
We have to specify in place equals true.

86
00:06:17,230 --> 00:06:19,290
Let's go ahead and not run that.

87
00:06:19,330 --> 00:06:25,550
So we retain our original data frame if you want to get the column and indexed names off a data frame.

88
00:06:25,600 --> 00:06:28,870
Those are actually just attributes of the data frame itself.

89
00:06:28,870 --> 00:06:36,580
Meaning you can say DFI columns will return this kind of index object essentially just a list of column

90
00:06:36,580 --> 00:06:37,350
names.

91
00:06:37,350 --> 00:06:42,460
This is going to be especially useful when you're trying to index a column and maybe the spacing is

92
00:06:42,460 --> 00:06:44,890
weird or you can't quite figure out what the string is.

93
00:06:45,010 --> 00:06:48,240
You can just call DFA columns or whatever your data frame name is.

94
00:06:48,550 --> 00:06:51,020
And Ill return this list of column names.

95
00:06:51,040 --> 00:06:56,140
You could actually do the same thing for an index you could say at the index it will give you information

96
00:06:56,140 --> 00:06:57,280
of the index.

97
00:06:57,280 --> 00:07:03,340
This case since it's a range index it actually just reports back the start stop and step size of the

98
00:07:03,340 --> 00:07:04,890
index.

99
00:07:04,890 --> 00:07:09,510
All right let's talk about sorting and ordering a data free.

100
00:07:09,530 --> 00:07:11,310
Here we have.

101
00:07:12,050 --> 00:07:15,390
And imagine you want to sort it by column 2.

102
00:07:15,650 --> 00:07:21,380
Essentially we want 4 4 4 and then 4 for 4 again before we see 5 5 5 and 6 6.

103
00:07:21,560 --> 00:07:30,260
We can use sort values in order to do this you call T.F. sort underscore values.

104
00:07:30,440 --> 00:07:35,990
And then as an argument you say by that we check shift tab here we can say bye and you could order this

105
00:07:36,080 --> 00:07:39,520
off of either the rose or the columns.

106
00:07:39,800 --> 00:07:44,400
But essentially you just Pessin as an argument the column you want to sort by.

107
00:07:44,480 --> 00:07:51,060
So I want to sort this by column two and you can say just column two such shift enter.

108
00:07:51,140 --> 00:07:58,010
And now I have sort of this data framed by column to know how the index stays attached to the row so

109
00:07:58,010 --> 00:08:00,150
you don't ever lose that information there.

110
00:08:00,470 --> 00:08:08,550
And that's the same thing as saying by column two same thing because it expects by to be the first.

111
00:08:08,550 --> 00:08:11,930
All right let's talk about just a couple of more useful operations.

112
00:08:12,060 --> 00:08:20,310
A really useful message to find no values in your data Freyne is that diff is no and this attorney data

113
00:08:20,310 --> 00:08:26,570
frame of booleans indicating whether or not the value was know or not this case you get a boolean of

114
00:08:26,570 --> 00:08:30,680
all falses because we have known nulls in our data frame.

115
00:08:30,870 --> 00:08:31,270
All right.

116
00:08:31,290 --> 00:08:37,740
Now let's finally talk about one last function or method in pantless called the pivot table and this

117
00:08:37,740 --> 00:08:41,510
methodology will be really familiar for Advanced Excel users.

118
00:08:41,520 --> 00:08:46,310
I want to go ahead and copy and paste some code from the notebook to create a new data frame.

119
00:08:48,660 --> 00:08:49,930
Go out and check out the state of freight.

120
00:08:49,930 --> 00:08:51,750
We have something that looks like this.

121
00:08:51,790 --> 00:08:59,640
We have AVCHD columns and notice here that we have repeating values in both the A column B column and

122
00:08:59,640 --> 00:09:00,780
the C column.

123
00:09:00,790 --> 00:09:05,390
So a column has foods and bars B has one twos.

124
00:09:05,580 --> 00:09:10,030
C has X and Y and then D has some integer values.

125
00:09:10,260 --> 00:09:13,750
You can use DFT pivot table to actually create a pivot table.

126
00:09:14,010 --> 00:09:18,630
And if you're not familiar of pivot tables I wouldn't worry about this too much but if you are maybe

127
00:09:18,630 --> 00:09:23,290
an Excel user who is familiar pivot tables Hopefully you'll find this functionality useful.

128
00:09:23,520 --> 00:09:29,880
Basically what we're going to do it not excel users is just create a multi index out of this table or

129
00:09:29,890 --> 00:09:40,280
data frame the method to do this is have it underscore table and pivot underscore table takes in three

130
00:09:40,280 --> 00:09:44,990
main arguments the values the index and the columns.

131
00:09:45,020 --> 00:09:50,600
In this case let's go ahead and indicate that the values we want in our table are these values.

132
00:09:50,610 --> 00:09:54,730
So what we actually want the data frame data points to be made up of.

133
00:09:54,830 --> 00:10:00,380
So I'm going to say values is equal to the D column.

134
00:10:00,580 --> 00:10:06,680
And then I will set my index to be equal to the A column and the B column.

135
00:10:06,680 --> 00:10:10,530
And that's basically going to make a and b into a multilevel index.

136
00:10:10,700 --> 00:10:18,750
It's going to pass in a list that says it's more than one column in the x and B and then finally I want

137
00:10:18,750 --> 00:10:22,510
my actual columns to be defined by the C column.

138
00:10:22,590 --> 00:10:29,280
This case just see that I can past that in as a list here and note that I'm saying See it's going to

139
00:10:29,280 --> 00:10:29,840
be the column.

140
00:10:29,850 --> 00:10:33,160
So I should end up with a column for X and a column for y.

141
00:10:33,390 --> 00:10:35,880
Let's go ahead and see how this works.

142
00:10:36,000 --> 00:10:41,910
I'm going to run this one more time here so we can compare the original data frame versus the pivot

143
00:10:41,910 --> 00:10:44,460
table that I'm about to create.

144
00:10:44,460 --> 00:10:46,440
All right so I ran this pivot table command.

145
00:10:46,710 --> 00:10:48,780
And let's go in and compare that two.

146
00:10:48,930 --> 00:10:53,080
Looks like I created an index out of those AB columns so that makes sense.

147
00:10:53,100 --> 00:11:01,050
Looks likely a bar and foo and then one and two repeat it then the actual columns I want where the values

148
00:11:01,050 --> 00:11:06,210
in this case Schuss X and Y and the actual data point values were the columns.

149
00:11:06,600 --> 00:11:11,480
I do have some no values here because there are no values that match up for that specific point.

150
00:11:11,700 --> 00:11:18,600
Meaning if I look back at the original data frame there is no value that goes with bar to x.

151
00:11:18,630 --> 00:11:27,050
So if you look here you won't find Martu X you'll only find part 2 y and similarly for food to y.

152
00:11:27,120 --> 00:11:33,420
There is no food to why there's only food to X and that's why we had to fill in no values here.

153
00:11:33,450 --> 00:11:34,010
OK.

154
00:11:34,080 --> 00:11:38,850
Feel free to post that Q&amp;A if you have more questions on Pivot Tables or what some more resources for

155
00:11:38,850 --> 00:11:40,440
examples on Pivot Tables.

156
00:11:40,470 --> 00:11:42,390
We won't really use these that often in the course.

157
00:11:42,390 --> 00:11:45,720
In fact there's only really one exorcized question later on.

158
00:11:45,720 --> 00:11:49,470
We're all working with heat maps as far as how to use the pivot tables for now.

159
00:11:49,560 --> 00:11:54,210
Well the concern yourself with them if you're already familiar pivot tables from something like Excel.

160
00:11:54,530 --> 00:11:55,240
OK.

161
00:11:55,470 --> 00:11:57,660
I hope some of these operations are useful to you.

162
00:11:57,650 --> 00:12:03,150
They see just a grab bag of useful functions and methods that are available to you and paths you can

163
00:12:03,150 --> 00:12:10,070
go ahead and reference the pandas operations lecture no book that's underneath the panda's folder.

164
00:12:10,080 --> 00:12:12,060
Thanks everyone and I'll see you at the next lecture.
