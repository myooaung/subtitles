1
00:00:05,360 --> 00:00:06,070
Welcome everyone.

2
00:00:06,080 --> 00:00:10,550
The first part of the Python crash course before we go to the Jupiter note book and actually code through

3
00:00:10,550 --> 00:00:11,330
some of this stuff.

4
00:00:11,510 --> 00:00:13,990
I want to quickly discuss what we're actually going to be covering.

5
00:00:14,000 --> 00:00:19,370
We'll talk about the fundamental data types things like numbers strings dictionaries etc. We'll discuss

6
00:00:19,370 --> 00:00:21,710
comparison of logical operators in Python.

7
00:00:21,740 --> 00:00:27,140
We'll talk about control flow statements things like if elif else statements for loops and while loops

8
00:00:27,410 --> 00:00:29,390
then we'll discuss functions how to create your own.

9
00:00:29,390 --> 00:00:34,020
Some built in functions and they'll also talk about some few built in Python expressions.

10
00:00:34,220 --> 00:00:37,690
OK let's open up a new Jupiter note book and get started already.

11
00:00:37,700 --> 00:00:41,930
Here I am at a Jupiter note book the very first thing I want to discuss is how you can comment your

12
00:00:41,930 --> 00:00:44,100
code to create a single line comment.

13
00:00:44,120 --> 00:00:50,120
Just to add hash tag type comments and then you'll notice if I run the cell or shift enter I don't get

14
00:00:50,120 --> 00:00:51,150
anything back.

15
00:00:51,410 --> 00:00:57,980
So if I actually want to see something back I can enter like a number 10 I'll do shift enter and I can

16
00:00:57,980 --> 00:00:59,670
see my output is just 10.

17
00:00:59,780 --> 00:01:02,870
If I don't want to actually see this or have it run I can comment it out.

18
00:01:03,020 --> 00:01:04,300
Now I don't get any output.

19
00:01:04,610 --> 00:01:07,310
OK let's start off with just discussing simple numbers.

20
00:01:07,400 --> 00:01:09,920
So numbers are quite easy to work with in Python.

21
00:01:09,950 --> 00:01:14,900
It's just the plus sign if you want to do subtraction just one minus three.

22
00:01:14,900 --> 00:01:17,300
Multiplication is just something with an asterix.

23
00:01:17,360 --> 00:01:20,460
So two times three is to Asterix three.

24
00:01:20,480 --> 00:01:25,540
If you want to do division just a forward slash one divided by two and I'm doing spaces here.

25
00:01:25,550 --> 00:01:28,020
But just so you know you don't actually need those spaces.

26
00:01:28,040 --> 00:01:30,690
It'll work either way if you want to exponent.

27
00:01:30,720 --> 00:01:35,520
It's just too abstract science intro to the power of 4 16.

28
00:01:35,720 --> 00:01:39,800
If you want to do the mod operator that is get the remainder of a division.

29
00:01:39,860 --> 00:01:40,910
It's the percent sign.

30
00:01:40,910 --> 00:01:42,680
So let me show you that real quick.

31
00:01:42,680 --> 00:01:46,060
So if we do for mod 2 that should return 0.

32
00:01:46,280 --> 00:01:49,150
So this is actually returning the remainder component.

33
00:01:49,160 --> 00:01:54,290
So for the Vita by 2 goes it evenly twice with a remainder 0.

34
00:01:54,290 --> 00:01:58,940
Now if I do 5 divided by two they'll end up being 2.5.

35
00:01:58,950 --> 00:02:05,850
So 2 goes into 5 twice and then it has a remainder of 1 otherwise known as 1 over 2 which is point five.

36
00:02:05,880 --> 00:02:11,250
If axis want to get the whole remainder value I could just add something like 5 mod to that will return

37
00:02:11,250 --> 00:02:15,220
the remainder 1 so 5 divided by 2 is 2 remainder 1.

38
00:02:15,260 --> 00:02:15,760
All right.

39
00:02:15,960 --> 00:02:20,110
And then lastly you can actually specify order of operations in Python.

40
00:02:20,280 --> 00:02:27,330
So if you were to do something like two plus three multiplied by five plus five this would actually

41
00:02:27,330 --> 00:02:33,270
end up multiplying 3 and 5 first and then add 2 and 5 together if you want to specify for the addition

42
00:02:33,270 --> 00:02:34,260
to happen first.

43
00:02:34,470 --> 00:02:41,790
You can just do parentheses so it can say print sees two plus three multiplied by five plus five.

44
00:02:41,790 --> 00:02:43,570
Now if you run that you get 50.

45
00:02:43,800 --> 00:02:45,390
OK so that's the very basics of numbers.

46
00:02:45,390 --> 00:02:47,090
Hopefully that was pretty straightforward.

47
00:02:47,340 --> 00:02:49,600
Nelse quickly discuss variable assignments.

48
00:02:49,800 --> 00:02:54,710
So in Python your variable assignments are going to just pretty much always be lowercase and follow

49
00:02:54,720 --> 00:02:56,010
snake casing.

50
00:02:56,010 --> 00:03:01,770
That means the name of the variable as far as separated words are going to be separated by underscores.

51
00:03:01,800 --> 00:03:03,760
So will have some name of the variable.

52
00:03:03,800 --> 00:03:07,990
Then we just use the equal sign for assignment and I will set that too.

53
00:03:08,040 --> 00:03:10,820
For example I can say X is 1.

54
00:03:11,310 --> 00:03:13,280
And why is equal to two.

55
00:03:13,680 --> 00:03:15,120
And then I can do something like.

56
00:03:15,240 --> 00:03:24,510
X plus y and get equal to 3 Kircus set a new variable z is equal to x y and then ask for z back out

57
00:03:24,630 --> 00:03:25,340
and I get 3.

58
00:03:25,350 --> 00:03:27,390
That's the basics of variable assignment.

59
00:03:27,390 --> 00:03:33,470
Moving on to other fundamental data type strings strings can either have single quotes or double quotes

60
00:03:33,870 --> 00:03:42,140
so we can have single quotes as a string and then I can have double quotes as the strings.

61
00:03:42,180 --> 00:03:48,540
So notice that when I actually ask for the string to be returned the default is just to have it as a

62
00:03:48,600 --> 00:03:49,730
single quote.

63
00:03:49,980 --> 00:03:51,990
Either way it's pretty much the same thing.

64
00:03:52,320 --> 00:03:56,850
The reason we have the option of single quotes and double quotes is in case you want to wrap a single

65
00:03:56,850 --> 00:03:57,350
quote.

66
00:03:57,510 --> 00:04:04,050
So for example in case you want to say something like I don't care without getting some sort of unfinished

67
00:04:04,050 --> 00:04:06,660
string error because there's a single quote there.

68
00:04:06,780 --> 00:04:09,600
I'll just wrap it in the other quote type which is double quotes.

69
00:04:09,600 --> 00:04:14,610
And here we can see we don't actually get an error there and it says oh this single quote isn't actually

70
00:04:14,610 --> 00:04:17,450
a stream quote because it's wrapping it in double quotes.

71
00:04:17,460 --> 00:04:18,960
OK now discuss.

72
00:04:18,960 --> 00:04:23,710
Actually printing out strings so you can see here that the strings are just being returned that are

73
00:04:23,730 --> 00:04:25,330
actually being printed out.

74
00:04:25,610 --> 00:04:30,030
So in order to print things out all you do is use the princess function.

75
00:04:30,030 --> 00:04:37,540
So if I have a variable x equal to hello and I ask to print x.

76
00:04:37,690 --> 00:04:39,460
Notice I just get back hello.

77
00:04:39,580 --> 00:04:44,530
The way the Jupiter note book works is it denotes printing by not actually reporting that it's a string

78
00:04:44,530 --> 00:04:45,300
with quotes.

79
00:04:45,390 --> 00:04:49,860
It also doesn't report aid output so it just prints out whatever he said to print out.

80
00:04:50,260 --> 00:04:55,850
So likewise I could say something like Prince double and it will just print out the word double.

81
00:04:55,850 --> 00:04:58,150
No quotes and no output cell there.

82
00:04:58,970 --> 00:05:01,150
Then I want to talk about prints of formatting.

83
00:05:01,220 --> 00:05:06,080
Sometimes is known as string interpellation where you want to insert a variable into a string when you're

84
00:05:06,080 --> 00:05:07,220
printing it out.

85
00:05:07,250 --> 00:05:22,730
So for example if I wanted to say my name is Jose Portsea and I'm going to print out Hello my name is

86
00:05:22,820 --> 00:05:29,030
and somehow I want to insert this variable called name into this print function or print statement.

87
00:05:29,030 --> 00:05:36,680
The way I can do that is I input these curly braces and then at the end of the string I call a format

88
00:05:36,680 --> 00:05:37,310
method.

89
00:05:38,440 --> 00:05:42,170
And then I pass in the variable name.

90
00:05:42,700 --> 00:05:48,110
So when I run this what's going to happen is Python is going to look for the variable name which I've

91
00:05:48,140 --> 00:05:53,530
already defined appear as Jose Portsea and then it's going to insert it into these curly braces.

92
00:05:53,530 --> 00:05:56,570
Now this can actually get a little more complex.

93
00:05:56,590 --> 00:06:02,770
So let's go ahead and define another variable we'll say defining a number value or a number variable

94
00:06:03,130 --> 00:06:12,550
and we'll call this number let's say 12 and then what I'm going to do now is Prince Hi my name is curly

95
00:06:12,550 --> 00:06:17,690
braces and my number is curly braces.

96
00:06:18,820 --> 00:06:24,760
There we're going to say the format and then I'm actually going to insert not just the name but also

97
00:06:24,760 --> 00:06:32,630
that number variable then if I run this it says Hi my name is Jose Here am I numbers 12.

98
00:06:32,630 --> 00:06:39,440
We can continue to actually expand on this by giving these to some local temporary variable names so

99
00:06:39,440 --> 00:06:45,560
I can say something like x is equal to name and Y is equal to number here.

100
00:06:45,700 --> 00:06:53,900
And then inside these braces I can say X and Y and then when I read this I get the same result.

101
00:06:53,910 --> 00:06:59,420
But what's nice about doing this sort of local variable assignment is that I can not have to worry about

102
00:06:59,420 --> 00:07:02,200
the order that I pass them into the format method.

103
00:07:02,300 --> 00:07:06,830
I can say why why and this is going to say hi my name is 12 my numbers 12.

104
00:07:06,950 --> 00:07:10,040
Or I could reverse the order and say Hi my name is of them in numbers.

105
00:07:10,040 --> 00:07:15,590
Jose Portsea So this is a nice little trick to use this variable name the local one inside your string

106
00:07:15,680 --> 00:07:20,110
and that's the basics of string interpellation and print formatting statements.

107
00:07:20,120 --> 00:07:22,950
OK let's move on to lists.

108
00:07:23,000 --> 00:07:25,920
Lists are basically Python's form of an array.

109
00:07:25,940 --> 00:07:31,910
So the way to find a list and it's going to come in here or Takuma a list is you have square braces

110
00:07:31,910 --> 00:07:36,900
or square brackets and then you separate out the items with a comma.

111
00:07:37,190 --> 00:07:39,380
So that's a basic list.

112
00:07:39,410 --> 00:07:44,630
Keep in mind a list can actually hold multiple data types so you can hold a string here and they can

113
00:07:44,630 --> 00:07:46,770
hold numbers and it won't actually complain.

114
00:07:46,940 --> 00:07:49,300
And the other thing to note is that you don't need a pre-define.

115
00:07:49,310 --> 00:07:51,640
How long a list is going to be beforehand.

116
00:07:51,830 --> 00:07:55,350
It's a dynamic array and you can just keep adding stuff to the list.

117
00:07:55,430 --> 00:07:59,830
So let's create a list called one to three.

118
00:08:00,000 --> 00:08:05,060
Well I'm actually creating a variable called my list which consists of a list of one to three I'm going

119
00:08:05,060 --> 00:08:10,400
to run that and actually want to add an item to this list.

120
00:08:10,410 --> 00:08:18,630
I can say my list append and I call this a pen method on the list and then I'm just going to type in

121
00:08:18,750 --> 00:08:20,050
what I actually want to append.

122
00:08:20,250 --> 00:08:26,440
Let's say the number four or in this case the number for a string called for.

123
00:08:26,550 --> 00:08:32,000
Then if I return or ask for my list it returns back 1 2 3 4.

124
00:08:32,040 --> 00:08:37,770
So the way you can add item to the end of the list is just append if you want to index an item off of

125
00:08:37,770 --> 00:08:38,210
the list.

126
00:08:38,250 --> 00:08:39,860
Indexing starts at zero.

127
00:08:40,080 --> 00:08:45,590
So let's read the fine or list to be a b and c.

128
00:08:45,810 --> 00:08:46,950
Let's get one more letter in there.

129
00:08:47,020 --> 00:08:50,660
The stuff I ask for my list.

130
00:08:50,670 --> 00:08:53,290
And you can use tab to quickly autocomplete this.

131
00:08:53,370 --> 00:09:00,540
You'll get back ABC if I want to grab the elements a what I end up doing is using indexing.

132
00:09:00,570 --> 00:09:06,120
I can say square brackets off the variable list and then pasand its index location and indexing and

133
00:09:06,120 --> 00:09:11,680
Python starts at zero so I'll say zero there they're all run that.

134
00:09:11,740 --> 00:09:16,550
And then we get back a if I want to grab the letter D.

135
00:09:16,550 --> 00:09:18,340
There's actually two ways I can do that.

136
00:09:18,470 --> 00:09:21,760
One way just counting over 0 1 to 3.

137
00:09:21,840 --> 00:09:28,820
So capacity 3 and that returns the Python actually supports negative indexing means I could say minus

138
00:09:28,820 --> 00:09:32,120
1 and that will automatically return the last element of the list.

139
00:09:32,120 --> 00:09:35,280
So starting at zero it goes backwards one towards the end of the list.

140
00:09:35,300 --> 00:09:37,310
And that also returns the.

141
00:09:37,460 --> 00:09:37,730
All right.

142
00:09:37,730 --> 00:09:40,430
Now let's quickly discuss slicing a list.

143
00:09:40,430 --> 00:09:44,830
So right now we can use indexing to just grab a single item off of the list.

144
00:09:44,950 --> 00:09:50,630
But if I want to actually grab multiple items that are together remember this is a sequence that's ordered.

145
00:09:50,630 --> 00:09:52,330
So there are 1 2 3.

146
00:09:52,340 --> 00:09:58,850
Let's say I want to grab a and b when I can end up doing is say the starting position at 0 and then

147
00:09:58,900 --> 00:10:04,120
colon and then we add up to but not including the last position.

148
00:10:04,130 --> 00:10:13,080
So if I want a and b that's going to start at 0 and then go up to but not including index to.

149
00:10:13,230 --> 00:10:15,710
So if I run this I then get back a and b.

150
00:10:15,720 --> 00:10:20,520
So this is a little confusing for beginners at first who aren't used to this sort of notation of indexing

151
00:10:20,520 --> 00:10:25,910
at zero and cash coming in from their language which as I believe Matlab starts indexing at 1.

152
00:10:26,160 --> 00:10:28,910
But sometimes people expect this to say ABC.

153
00:10:28,920 --> 00:10:34,980
The thing to remember here is that the first one starts at that index colon up to but not including

154
00:10:34,980 --> 00:10:36,410
that index.

155
00:10:36,510 --> 00:10:44,040
So I can zoom in one more time we see list ABC and then zero call into returns 0 1 and then up to bet

156
00:10:44,040 --> 00:10:45,250
on including two.

157
00:10:45,640 --> 00:10:46,230
OK.

158
00:10:46,410 --> 00:10:53,820
If you want to do everything in the beginning a shorthand for that is to say colon too and that will

159
00:10:53,820 --> 00:10:55,080
return the same thing.

160
00:10:55,340 --> 00:11:02,950
You can otherwise do the reverse and say starting an index to call and give me everything to the end.

161
00:11:02,960 --> 00:11:06,540
Now no b c the remember this first index does get included.

162
00:11:06,780 --> 00:11:11,380
And then if you're adding in the last index it's going to be up to but not including that.

163
00:11:11,490 --> 00:11:13,460
And then finally you can have a nested list.

164
00:11:13,500 --> 00:11:18,310
So I'm going to create a variable called nested and I'll set the sequel to 1 2.

165
00:11:18,320 --> 00:11:25,800
And then as the third item in this list the index to I need to have another list of a B.

166
00:11:25,840 --> 00:11:28,610
So I noticed double sets of brackets here.

167
00:11:28,660 --> 00:11:35,340
So if I call nested in nested list if I want to grab the letter A.

168
00:11:35,450 --> 00:11:38,810
But I have to do is say OK 0 1 2.

169
00:11:38,980 --> 00:11:45,950
So I passen to here run the cell and now I have that list that was at position to then I can add in

170
00:11:46,060 --> 00:11:50,620
another set of indices which is going to grab a.

171
00:11:50,620 --> 00:11:53,410
So it's going to be zero of this list.

172
00:11:54,510 --> 00:11:56,640
And that's how I can grab a by itself.

173
00:11:56,640 --> 00:11:59,220
And that's how you can use a nested list.

174
00:11:59,220 --> 00:12:02,640
OK so now let's discuss dictionaries.

175
00:12:02,670 --> 00:12:09,210
Dictionaries are a hash table as it is known in other languages for a python and it essentially consists

176
00:12:09,300 --> 00:12:16,050
of a key value pair or a key item pair notation for a dictionary ends up using curly braces.

177
00:12:16,230 --> 00:12:19,760
So I'm going to create a dictionary called the as the variable name.

178
00:12:19,790 --> 00:12:21,760
I'm going to have curly braces here.

179
00:12:22,140 --> 00:12:28,970
And you have some sort of key as a string colon and then some value such as a number 10.

180
00:12:29,280 --> 00:12:33,020
And then if you want another key value pair you'll add in a comma.

181
00:12:33,090 --> 00:12:35,520
You'll have some other key I will say this is key too.

182
00:12:35,790 --> 00:12:44,120
And then you can have some other item corresponding to key to let's say second item as a string send

183
00:12:44,130 --> 00:12:48,500
out the thing to remember about a dictionary is that a dictionary does not actually retain any sort

184
00:12:48,500 --> 00:12:49,370
of order.

185
00:12:49,370 --> 00:12:54,500
Instead it's acting as a hash table where instead of storing things as a sequence of items in a particular

186
00:12:54,530 --> 00:12:56,620
order it stores them a key value pairs.

187
00:12:56,630 --> 00:12:58,520
So has a key and then a value.

188
00:12:58,580 --> 00:13:03,590
So if you actually want to grab a value or item from a dictionary or you end up doing is saying the

189
00:13:04,700 --> 00:13:07,220
square braces and then you pasand the key.

190
00:13:07,420 --> 00:13:11,510
Unlike a list where you pass an index position for that dictionary it doesn't really make sense because

191
00:13:11,510 --> 00:13:12,860
it's an ordered.

192
00:13:12,860 --> 00:13:14,370
So we end up doing is just passing in a key.

193
00:13:14,370 --> 00:13:23,120
So if I want to grab the string second item I just passen key to run this and that returns second item.

194
00:13:23,120 --> 00:13:27,350
And that's the way a dictionary really works is just key item Peyre essentially operating like a hash

195
00:13:27,350 --> 00:13:27,750
table.

196
00:13:27,770 --> 00:13:34,730
In other languages for booleans that is true and false in Python it's just going to be true.

197
00:13:34,760 --> 00:13:41,360
Capital-T everything else lowercase and false capital F everything else lowercase.

198
00:13:41,420 --> 00:13:45,110
There's a few more data types that we're going to discuss and that's tuples and sets and then we'll

199
00:13:45,110 --> 00:13:48,250
finish our discussion of the fundamental data types of Python.

200
00:13:48,470 --> 00:13:55,560
Tuples are really really similar to lists except instead of square braces using parentheses.

201
00:13:55,720 --> 00:13:57,380
So we can see here I have a tuple.

202
00:13:57,430 --> 00:13:59,280
Some people also call them supples.

203
00:13:59,620 --> 00:14:03,720
So we have a tuple or a tuple consisting of three elements one two three.

204
00:14:04,360 --> 00:14:07,590
And I can index these just like I could with a normal list.

205
00:14:07,670 --> 00:14:09,610
It returns back 1.

206
00:14:09,670 --> 00:14:20,080
Now if I have a list and I said it equal to 1 to 3 and I index it the exact same way I get back to the

207
00:14:20,080 --> 00:14:22,310
same result as a couple or a tuple.

208
00:14:22,510 --> 00:14:26,800
So you may be wondering well what's the difference between this tuple and the list.

209
00:14:27,100 --> 00:14:33,610
Well a tuple is immutable meaning you can't actually change an item once it's in there a list is mutable

210
00:14:33,670 --> 00:14:36,160
meaning you can mutate it and actually change items.

211
00:14:36,160 --> 00:14:40,030
So let me show an example of the list versus this tuple object.

212
00:14:40,810 --> 00:14:47,380
So I can say grab my list element at zero and set that equal to the string.

213
00:14:47,380 --> 00:14:48,690
New.

214
00:14:48,840 --> 00:14:54,690
So if I call back my list I get back new to 3 instead of one to three.

215
00:14:54,750 --> 00:14:57,640
So I can see that this list object is mutable.

216
00:14:57,870 --> 00:15:04,380
If I try to do the same thing with this tuple member tuples defined by those princes I can get zero

217
00:15:04,710 --> 00:15:06,650
set equal to something that's new.

218
00:15:06,720 --> 00:15:11,030
I'm actually going to get an error and the error is going to say this tuple object does not support

219
00:15:11,070 --> 00:15:12,240
item assignment.

220
00:15:12,240 --> 00:15:17,610
So a tuple is immutable meaning you can't do this sort of re-assignment no reason for that is because

221
00:15:17,610 --> 00:15:22,290
sometimes you're going to want to store data in a format where you don't want a user or your program

222
00:15:22,290 --> 00:15:26,970
to later on have access and switch things out and usually want to reserve this for things that shouldn't

223
00:15:26,970 --> 00:15:27,770
be changed.

224
00:15:27,780 --> 00:15:32,960
Maybe for example the days of a calendar those are going to be the same no matter what you're doing

225
00:15:32,970 --> 00:15:37,110
so you probably want to store it as a tuple in order to not really mess around with things later on

226
00:15:37,110 --> 00:15:41,160
your program as you program more and more of Python will become more obvious where a tuple is a good

227
00:15:41,160 --> 00:15:44,080
choice versus a list is a good choice versus a dictionary.

228
00:15:44,100 --> 00:15:49,800
But now you should just be aware of the various data types and the final data type we're going to discuss

229
00:15:49,920 --> 00:15:55,800
is a set a set is an unordered collection of unique items.

230
00:15:56,130 --> 00:16:02,130
And that kind of looks like a dictionary in that it does use curly braces but you just pasand the items

231
00:16:02,130 --> 00:16:05,450
themselves there's no key item value pairs here.

232
00:16:05,460 --> 00:16:10,770
Now the thing to remember about a set it's that an unordered collection of unique items.

233
00:16:10,770 --> 00:16:18,520
What that basically means is is if you pass in multiples of the same item or elements when you run this

234
00:16:18,520 --> 00:16:25,440
set it's only going to grab the unique instances meaning it's only going to grab one of 1 1 or 2 and

235
00:16:25,440 --> 00:16:26,790
1 of 3.

236
00:16:26,820 --> 00:16:34,470
So what's nice about this is you can use the keywords set past in a list that has multiple elements

237
00:16:34,470 --> 00:16:41,040
here run this and you'll get back a set of the unique elements and that basically concludes our discussion

238
00:16:41,040 --> 00:16:43,670
of the fundamental data types of Python.

239
00:16:43,860 --> 00:16:48,100
So remember we started out with numbers and did some simple arithmetic and math.

240
00:16:48,140 --> 00:16:52,410
And as a quick note in case you ever want to do some more complicated math than what we showed here

241
00:16:52,830 --> 00:17:00,060
going to put and you sell here you can actually import the math library and this math library actually

242
00:17:00,060 --> 00:17:01,730
comes a lot of abilities.

243
00:17:01,740 --> 00:17:06,900
You can say math that in the Jupiter note picking a hit tab and it will show you the various mathematical

244
00:17:06,900 --> 00:17:08,590
functions that are available.

245
00:17:08,610 --> 00:17:14,910
So Python is sometimes called a language that comes with batteries included because this math library

246
00:17:14,910 --> 00:17:16,670
is already built into Python.

247
00:17:16,860 --> 00:17:21,830
Now we'll talk a lot more about importing other libraries that are going to be using panels that plot

248
00:17:21,940 --> 00:17:23,130
lib etc..

249
00:17:23,150 --> 00:17:25,950
But things like basic math that's actually already included.

250
00:17:25,950 --> 00:17:29,750
So for example if you want to take the square root of something you could say math that square root

251
00:17:30,300 --> 00:17:34,500
and then if you wanted to find out more about this you can do shift tab and you will report back to

252
00:17:34,500 --> 00:17:38,790
stock Dementation string which is return to square root of x and we'll talk about the documentation

253
00:17:38,790 --> 00:17:42,340
string later on when we discuss functions in this crash course.

254
00:17:42,510 --> 00:17:44,200
For example square root of 10.

255
00:17:44,460 --> 00:17:47,540
And for that we get back 3.1 6 etc..

256
00:17:47,790 --> 00:17:50,010
So that was the basics of numbers and arithmetic.

257
00:17:50,040 --> 00:17:54,870
Then we discussed the variable assignment and we also discussed string so we can use single quotes and

258
00:17:54,930 --> 00:17:55,830
double quotes.

259
00:17:55,830 --> 00:18:01,590
And as a quick note about strings for instance I have x is equal to hello here I can use the same indexing

260
00:18:01,590 --> 00:18:04,160
we used on a list on a string.

261
00:18:04,170 --> 00:18:10,530
So if I wanted to grab the very first letter such as H I could say X of 0 and I'll return h.

262
00:18:10,530 --> 00:18:16,040
So he should do in order to get a little practice of indexing is try to create a string such as Y is

263
00:18:16,050 --> 00:18:25,850
equal to Hello World and then say try to grab a random letter so see if you can grab this are for instance.

264
00:18:25,850 --> 00:18:34,690
All you have to do is count over 0 1 2 3 4 5 6 7 8 passen 8 and then you get our.

265
00:18:34,820 --> 00:18:38,480
Then we learned about Prince string interpellation list basic arrays.

266
00:18:38,480 --> 00:18:42,230
We learned about nested lists and how you can grab stuff from a nested list.

267
00:18:42,230 --> 00:18:52,140
We learned about slicing this nested various Spraggan notation dictionaries booleans tuples and sets.

268
00:18:52,160 --> 00:18:52,480
All right.

269
00:18:52,490 --> 00:18:57,710
Thank you everyone and we'll continue this along in the next lecture where we will be discussing control

270
00:18:57,710 --> 00:18:59,170
flow and functions.

271
00:18:59,180 --> 00:19:00,170
I'll see you there.
