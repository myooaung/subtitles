1
00:00:05,820 --> 00:00:09,410
Hello everyone and welcome to Quanto Appian pipeline's.

2
00:00:09,450 --> 00:00:14,730
We're going to begin using pipeline's by discussing just a few key parts mainly classifiers and factors

3
00:00:14,850 --> 00:00:18,050
and as well how to actually create a pipeline.

4
00:00:18,190 --> 00:00:24,010
So let's quickly discuss what a classifier is a classifier is a function that transforms the input of

5
00:00:24,010 --> 00:00:26,260
an asset and the time stamps it takes.

6
00:00:26,260 --> 00:00:32,160
An asset is an input and the time stamp as an input and it converts it to some sort of categorical output.

7
00:00:32,350 --> 00:00:39,420
And an example of this is passing in Apple or the Assaidi of Apple and time stamp of 2017 and then reports

8
00:00:39,430 --> 00:00:42,980
back some sort of categorical output such as tech sector.

9
00:00:43,090 --> 00:00:49,060
So I could pass and the asset the time stamp and then reports back Apple in the year 2017 happens to

10
00:00:49,060 --> 00:00:51,610
belong to the technology sector.

11
00:00:51,610 --> 00:00:57,100
So that's an example of a classifier essentially just classifying this as ID at this particular time

12
00:00:57,100 --> 00:00:57,790
stamp.

13
00:00:57,820 --> 00:01:03,040
And the reason we have to provide that time stamp is because companies change maybe Apple completely

14
00:01:03,040 --> 00:01:06,580
changes to actually become a fruit company and that's in the agricultural sector.

15
00:01:06,610 --> 00:01:07,170
You never know.

16
00:01:07,210 --> 00:01:10,580
So that's where we have to provide both the asset and the time stamp.

17
00:01:12,540 --> 00:01:17,020
Then a factor is similar except that it actually returns a numerical value.

18
00:01:17,100 --> 00:01:19,560
So it takes and again an asset and the time stamp.

19
00:01:19,740 --> 00:01:26,980
But instead of returning categorical output or returns a numerical one such as a 10 day moving average.

20
00:01:27,000 --> 00:01:32,070
So in this lecture we're going to create a pipeline that returns back all equities available at some

21
00:01:32,070 --> 00:01:32,750
time stamp.

22
00:01:32,760 --> 00:01:37,350
And I think that's part of what makes pipeline's a little confusing at first is the fact that you essentially

23
00:01:37,350 --> 00:01:42,830
grab everything and then start to create factors or classifiers and then filter those out.

24
00:01:42,840 --> 00:01:46,950
So we have learned about filters yet but we're going to kind of start with grabbing all the data and

25
00:01:46,950 --> 00:01:49,250
the next lecture will learn how to kind of filter for it.

26
00:01:49,530 --> 00:01:54,000
So again we're going to create a pipeline returns back all the equities and then we're going to use

27
00:01:54,330 --> 00:02:01,600
Quanto opens built in U.S. equity pricing data set to match up prices to those IDs then we can create

28
00:02:01,630 --> 00:02:06,730
a factor that will compute some numerical value given the pricing information such as the 30 day moving

29
00:02:06,730 --> 00:02:11,290
average in a lot of these functions are actually going to be imported from built in Quanto up in pipeline

30
00:02:11,290 --> 00:02:12,000
libraries.

31
00:02:12,130 --> 00:02:17,960
So we don't really have to cut out that much and said we're just going to do a lot of convenient imports.

32
00:02:17,970 --> 00:02:22,290
OK so let's see how these concepts fit in with the pipeline operator in Quanto in I'm going to jump

33
00:02:22,290 --> 00:02:23,880
to a new research note book now.

34
00:02:24,900 --> 00:02:25,260
All right.

35
00:02:25,290 --> 00:02:31,140
I've created a new title notebook in my research notebooks on Quanto in and the first thing going to

36
00:02:31,140 --> 00:02:39,490
do is say from Quanto in the pipeline and sometimes it has trouble with the tab autocomplete for Quanto

37
00:02:39,560 --> 00:02:40,490
in that pipeline.

38
00:02:40,720 --> 00:02:43,790
It's sometimes automatically goes to quando So just keep that in mind.

39
00:02:44,160 --> 00:02:47,760
Then I will say in poor pipeline.

40
00:02:48,350 --> 00:02:52,790
OK so I've imported this pipeline object and then the next thing to do which may seem a little strange

41
00:02:52,790 --> 00:03:00,190
if you're pretty familiar of Python but we're actually going to create a function called Make pipeline

42
00:03:00,400 --> 00:03:01,350
and all it does.

43
00:03:01,360 --> 00:03:06,040
It just returns in instantiation of the pipeline object.

44
00:03:06,040 --> 00:03:10,860
Again not typical for normal Python programming you usually just call pipeline.

45
00:03:10,900 --> 00:03:16,270
But the reason for that is when we begin to add things like factors classifiers filters having everything

46
00:03:16,270 --> 00:03:18,840
inside a function makes a little more sense.

47
00:03:18,880 --> 00:03:23,710
So now that we have this function that essentially makes a pipeline we're going to create a pipeline

48
00:03:23,710 --> 00:03:30,140
object will say pipe is equal to make pipeline.

49
00:03:30,150 --> 00:03:35,370
So if I take a look at what pipe actually is it's essentially this pipeline object from the zip line

50
00:03:35,370 --> 00:03:39,860
library member that's the open source version of a lot of these Quanto open tools.

51
00:03:39,870 --> 00:03:45,120
At this particular point in memory so I have my pipeline object ready to go.

52
00:03:45,120 --> 00:03:50,280
The next thing I need to do is import run a pipeline and that's going to allow me to run this pipeline.

53
00:03:50,400 --> 00:03:51,180
So we'll do the following.

54
00:03:51,180 --> 00:04:01,930
We'll say from Quanto in research in poor run pipeline.

55
00:04:01,950 --> 00:04:08,400
So then we're going to say result is equal to run pipeline and if you do shift tab here you'll notice

56
00:04:08,400 --> 00:04:11,430
there's three main arguments that we want to focus on here.

57
00:04:11,520 --> 00:04:18,330
When you pass and run pipeline you pass in a pipeline and then a start day and then end date and there

58
00:04:18,330 --> 00:04:19,920
is a chunk size as well.

59
00:04:19,920 --> 00:04:24,450
Computing in chunks is useful when you have pipeline's computed over a long period of time.

60
00:04:24,450 --> 00:04:29,130
So kind of does stuff in chunks but right now we're not dealing with that so we'll just say pipeline

61
00:04:29,130 --> 00:04:31,030
the start date and the end date.

62
00:04:31,040 --> 00:04:33,480
In effect we only really want one day of information.

63
00:04:33,510 --> 00:04:37,860
So we'll have the start date be the same as the end date.

64
00:04:37,960 --> 00:04:42,200
So I pass in my pipe object and then I'm going to pass in some sort of date.

65
00:04:42,220 --> 00:04:46,210
So let's say 2017 0 1 0 3.

66
00:04:46,360 --> 00:04:48,910
That was essentially the first day of trading in 2017.

67
00:04:49,090 --> 00:04:53,800
And if you actually pass in the first tier it will jump up to the third the first day of trading for

68
00:04:53,800 --> 00:04:56,640
the year and we're going have the end date be the same thing.

69
00:04:56,650 --> 00:04:59,860
So 2017 0 1 0 3.

70
00:05:00,190 --> 00:05:04,610
And what's nice about this is it can just pasand the strings in this particular order year month date

71
00:05:04,660 --> 00:05:07,690
with dashes and it knows that there are time stamps.

72
00:05:07,690 --> 00:05:13,510
So I'm going to run that and then I have my results so let's check out what our result actually looks

73
00:05:13,510 --> 00:05:14,230
like.

74
00:05:14,620 --> 00:05:17,760
So when you run this you get kind of a funky looking data frame.

75
00:05:17,770 --> 00:05:20,120
You'll notice that there's a ton of equities here.

76
00:05:20,290 --> 00:05:25,970
And if you scroll all the way down you'll end up seeing that you have 20:17 0 1 0 3.

77
00:05:25,990 --> 00:05:28,690
So what is this actually representing here.

78
00:05:28,690 --> 00:05:35,310
Well if you take a look at the info Ill say multiday index eight thousand three hundred forty three

79
00:05:35,310 --> 00:05:37,910
entries and says it's an empty data frame.

80
00:05:37,980 --> 00:05:42,510
So this kind of two key things to note here one is that there actually are no columns in the state of

81
00:05:42,510 --> 00:05:43,170
frame.

82
00:05:43,230 --> 00:05:49,590
If you look at results that columns notice there weren't actually any columns there and that's because

83
00:05:49,890 --> 00:05:55,740
what we're actually looking at here is just two sets of indices one set on the very outer left is a

84
00:05:55,740 --> 00:06:01,410
multiyear index or there this whole thing is a Maltais index on the outermost layer is the actual time

85
00:06:01,410 --> 00:06:01,770
stamp.

86
00:06:01,770 --> 00:06:08,910
So we have 2017 the 3rd of January and this insight index we have the equities.

87
00:06:08,910 --> 00:06:14,910
So it's the ID for this actual stocks we have the symbol of stock and the Assaidi at this particular

88
00:06:14,970 --> 00:06:20,550
moment in time and essentially return every single Assaidi available for us at this particular moment

89
00:06:20,550 --> 00:06:21,510
in time.

90
00:06:21,510 --> 00:06:25,120
So again this is what kind of makes it a little weird because we're getting back everything.

91
00:06:25,260 --> 00:06:29,330
It's not until you learn about filters that are going to filter out based off some sort of value but

92
00:06:29,340 --> 00:06:32,400
to get those values you need to use things like factors.

93
00:06:32,400 --> 00:06:36,630
So let's go ahead and kind of discuss what factors are now going to hash tag that out.

94
00:06:36,870 --> 00:06:42,150
So now right now we have that result object essentially just a multi index there's actually no information

95
00:06:42,150 --> 00:06:43,800
there beyond the index.

96
00:06:43,890 --> 00:06:53,480
So we will say from Quanto up in the pipeline that data built in import.

97
00:06:53,630 --> 00:06:59,360
And we're going to import U.S. equity pricing and this essentially contains the price information for

98
00:06:59,390 --> 00:07:01,790
all those equities in that index.

99
00:07:01,790 --> 00:07:07,490
So now we're going to create a factor that's going to allow us to take in the ID and that time stamp

100
00:07:07,490 --> 00:07:08,140
information.

101
00:07:08,210 --> 00:07:13,130
Essentially the information from the index and calculate some sort of numerical value from it and it's

102
00:07:13,130 --> 00:07:17,860
going to calculate that using the U.S. equity pricing information.

103
00:07:17,910 --> 00:07:19,020
So we're going to do the following.

104
00:07:19,020 --> 00:07:27,140
We'll say from Quanto up in that pipeline that factors import.

105
00:07:27,510 --> 00:07:32,220
And if you hit tab here you'll notice that there's a bunch of factors available to things like average

106
00:07:32,220 --> 00:07:38,520
dollar volume business day since previous events Bollinger bands a max draw down then you have Morningstar

107
00:07:38,520 --> 00:07:41,900
for all those fundamental data points returns etc..

108
00:07:41,940 --> 00:07:44,010
Simple moving average true range.

109
00:07:44,010 --> 00:07:51,280
So we're going to start off with just simple moving average run that imported simple moving average

110
00:07:51,400 --> 00:07:58,250
from Pipeline that factors that I'm going to call simple moving average and it will take something like

111
00:07:59,380 --> 00:08:05,030
inputs and you passen us equity pricing and then you get tap here.

112
00:08:05,050 --> 00:08:10,760
And you'll notice that you have all the pricing information the close price domain high low open volume

113
00:08:10,760 --> 00:08:11,790
etc..

114
00:08:11,810 --> 00:08:17,310
So we're going to just pasan close here.

115
00:08:17,450 --> 00:08:21,000
And if you do shift tab's simple moving average will tell you what it expects.

116
00:08:21,020 --> 00:08:24,280
So it expects these inputs which kind of go off.

117
00:08:24,500 --> 00:08:27,670
U.S. equity pricing and then expects a window length.

118
00:08:27,800 --> 00:08:29,780
So that's essentially how many days do you want.

119
00:08:29,780 --> 00:08:36,000
For the simple moving average So we're going to pass in here window lengths

120
00:08:40,680 --> 00:08:43,460
equal to 30 days.

121
00:08:43,490 --> 00:08:43,840
All right.

122
00:08:43,970 --> 00:08:45,300
So we have this right now.

123
00:08:45,320 --> 00:08:47,840
If I just read this I won't really get anything back.

124
00:08:47,840 --> 00:08:52,760
Just a simple moving average so we need to use this in conjunction with our make pipelined function.

125
00:08:53,000 --> 00:08:56,180
So let's scroll back up grab our make pipeline function.

126
00:08:56,180 --> 00:09:00,370
Remember I said previously it was a little weird to do this but now you're going to see why we need

127
00:09:00,400 --> 00:09:01,400
to do it this way.

128
00:09:01,610 --> 00:09:06,120
We have this function pipeline an envoy to do the following.

129
00:09:06,240 --> 00:09:14,160
I'm going to create a variable here that says something like I mean close 30.

130
00:09:14,330 --> 00:09:18,290
So that is the average closing price over the last 30 days.

131
00:09:18,500 --> 00:09:23,720
Otherwise known as our simple moving average with the inputs of the U.S. equity pricing that close with

132
00:09:23,720 --> 00:09:25,480
a window length of 30.

133
00:09:25,650 --> 00:09:28,520
So I'm going to copy that and paste that in here.

134
00:09:29,120 --> 00:09:34,230
So then I have this variable mean close 30 and right now I'm just returning pipeline.

135
00:09:34,520 --> 00:09:40,590
So inside a pipeline will you end up doing is the following you create a new parameter called columns

136
00:09:41,430 --> 00:09:47,730
and columns ends up being a dictionary where the dictionary ends up having the key of the new name of

137
00:09:47,730 --> 00:09:49,980
the column such as 30.

138
00:09:49,990 --> 00:09:55,080
They mean close and then you pass in the factor itself.

139
00:09:55,110 --> 00:09:56,590
I remember this is the factor.

140
00:09:56,610 --> 00:09:57,840
I mean close 30.

141
00:09:57,930 --> 00:10:02,130
So remember this is a factor object because we imported it from factors.

142
00:10:02,130 --> 00:10:04,470
So we're going to kind of copy and paste this here

143
00:10:07,370 --> 00:10:09,530
and pass that here for us.

144
00:10:09,530 --> 00:10:10,130
Run that.

145
00:10:10,130 --> 00:10:16,630
And now we have our pipeline object now because these can be really complicated methods.

146
00:10:16,640 --> 00:10:21,380
What we want to do is pass this into run pipelines so we make sure it only runs when we're ready for

147
00:10:21,380 --> 00:10:22,000
it to run.

148
00:10:23,050 --> 00:10:31,010
So let's take results now and say run the pipeline and we're going to pass in our pipeline object.

149
00:10:31,010 --> 00:10:32,480
So there's two ways we can do this.

150
00:10:32,600 --> 00:10:38,900
We can either do what we did above here which is say pipe is equal to make pipeline and then pass it

151
00:10:38,900 --> 00:10:44,100
in or what sometimes people like to do is they just copy this line right here and instead of creating

152
00:10:44,110 --> 00:10:48,430
in another variable is copy and paste that in here instead.

153
00:10:48,440 --> 00:10:49,620
So that's what we'll do.

154
00:10:49,910 --> 00:10:56,200
So we'll kind of just passen make pipeline here instead and then we're going to pass and the dates say

155
00:10:56,290 --> 00:10:57,460
which just is for one day.

156
00:10:58,320 --> 00:11:02,800
The 3rd of January here and then 2017 0 1 0 3.

157
00:11:02,820 --> 00:11:07,920
So we're doing this just for one day and getting our results now pending on the complexity of make pipeline.

158
00:11:08,010 --> 00:11:13,170
This could take a while because remember central we're doing is we're saying all right for every single

159
00:11:13,170 --> 00:11:16,050
US equity on this day and time.

160
00:11:16,200 --> 00:11:21,720
Go ahead and calculate the simple moving average So the 30 day moving average and we're going to do

161
00:11:21,720 --> 00:11:25,840
that on the close price because it called us equity pricing close.

162
00:11:25,940 --> 00:11:31,080
Okay once this is done running may take some more like 30 seconds in a minute depending on your date

163
00:11:31,080 --> 00:11:35,550
range where we can end up doing it check out the results so say give me the head of the results here

164
00:11:36,360 --> 00:11:41,820
and then we end up seeing the following Lucy the 30 day I mean close remember that's what we call this

165
00:11:41,880 --> 00:11:45,980
actual column and you can feel free to call this whatever you want.

166
00:11:46,080 --> 00:11:49,540
And then we have the factor which is the number right here.

167
00:11:49,590 --> 00:11:56,910
So remember the factor it takes and the falling it takes in some time stamp and some SITD some asset

168
00:11:56,990 --> 00:12:00,720
and returns back some numerical values such as the third they mean close.

169
00:12:00,840 --> 00:12:04,370
And this is a factor with topia and pipeline's.

170
00:12:04,440 --> 00:12:05,890
So so far so good.

171
00:12:05,910 --> 00:12:07,930
The actual concepts are pretty simple.

172
00:12:08,010 --> 00:12:13,070
It's just the fact that the syntax is a little weird to get used to and a lot of the kind of weirdness

173
00:12:13,070 --> 00:12:17,300
of the syntax in my opinion is the fact that you kind of have to know where to find a lot of this stuff.

174
00:12:17,310 --> 00:12:23,220
He had realized that he had to import simple moving average you know at a passen the inputs themselves

175
00:12:23,310 --> 00:12:28,420
and to be honest a lot of that kind of experience or knowledge just takes a lot of time looking through

176
00:12:28,420 --> 00:12:29,830
the documentation.

177
00:12:30,110 --> 00:12:30,630
OK.

178
00:12:30,810 --> 00:12:34,680
So we have the results here and we have the factor 3 they mean close.

179
00:12:34,680 --> 00:12:38,910
So we have time stamp asset turnback some numerical factor.

180
00:12:38,970 --> 00:12:42,600
Let's discuss having multiple factors and combining factors.

181
00:12:42,630 --> 00:12:45,330
So what we're going to do now is the following.

182
00:12:45,330 --> 00:12:52,980
We're going to grab this make pipeline copy it put it in a new cell and we're going to add in another

183
00:12:52,980 --> 00:12:54,190
factor to calculate.

184
00:12:54,390 --> 00:13:03,900
Let's go ahead and say latest close is equal to and we'll say U.S. equity pricing close dots and you'll

185
00:13:03,900 --> 00:13:09,050
notice that if you see another tab here you can grab a bunch of other parameters here.

186
00:13:09,240 --> 00:13:13,080
So one of them is latest Braben latest there.

187
00:13:13,380 --> 00:13:17,130
So we have the latest close which is the latest U.S. equity price in clothes here.

188
00:13:17,160 --> 00:13:19,240
And then we're going to add that in this new column.

189
00:13:19,380 --> 00:13:20,100
So I'll say

190
00:13:22,710 --> 00:13:31,580
latest clothes and this is going to pass and latest clothes and we're going to run that so we'll say

191
00:13:31,790 --> 00:13:38,840
results are equal to run a pipeline and going to pasan make pipeline.

192
00:13:39,250 --> 00:13:47,760
And then we will say some start the 2017 or ones or three and we'll say the following let's say 2017

193
00:13:47,880 --> 00:13:55,230
0 1 0 3 notice here that if you were to add in another kind of larger date you'd have more and more

194
00:13:55,230 --> 00:13:58,230
rows because you're using multi indexing.

195
00:13:58,310 --> 00:14:00,190
Now we're going to run this.

196
00:14:00,470 --> 00:14:05,090
And again this may take a little bit of time but hopefully if you did the first one already it shouldn't

197
00:14:05,090 --> 00:14:05,740
take that long.

198
00:14:05,750 --> 00:14:07,750
But let's go ahead and check out the head of the results here.

199
00:14:09,420 --> 00:14:17,160
The head and I can see I have two columns now the 30 day I mean close and the latest is and just as

200
00:14:17,220 --> 00:14:21,050
a quick note this is the latest close based off this time stamp.

201
00:14:21,060 --> 00:14:24,810
So this is essentially its closing price on January 3rd 2017.

202
00:14:25,080 --> 00:14:31,520
And this is the average closing price over the last 30 days before January 3rd 2017.

203
00:14:31,530 --> 00:14:32,710
So just keep that in mind.

204
00:14:32,850 --> 00:14:34,240
This is not today's latest close.

205
00:14:34,230 --> 00:14:40,180
This is the state's latest close and it's the state's 30 day average close.

206
00:14:40,240 --> 00:14:45,100
So now that we have those results we can end up doing is actually combined them and combining factors

207
00:14:45,190 --> 00:14:46,440
is actually quite simple.

208
00:14:46,540 --> 00:14:48,460
Here we have two separate factors.

209
00:14:48,550 --> 00:14:53,750
So the combined them all you need to do is say something like percent diff.

210
00:14:53,850 --> 00:14:59,820
So that's going to be the percent difference between the 30 day clothes and let's say let's just say

211
00:14:59,820 --> 00:15:01,850
the 10 day moving average or something.

212
00:15:02,070 --> 00:15:05,140
So let's go in and copy this.

213
00:15:05,230 --> 00:15:13,950
We're going to copy that and we're going to paste that in and we'll change the window length to be 10

214
00:15:15,430 --> 00:15:17,240
and we'll make this 10.

215
00:15:17,560 --> 00:15:21,310
And whether or not this is a useful calculation you know it's kind of up to you but I just want to show

216
00:15:21,310 --> 00:15:22,930
you how to combine two factors.

217
00:15:22,960 --> 00:15:24,420
So I mean close to 30.

218
00:15:24,460 --> 00:15:29,350
That's a factor of the simple moving average over the last 30 days then going have mean close 10 which

219
00:15:29,350 --> 00:15:34,960
is going to be a simple moving average of the closing price over the last 10 days.

220
00:15:35,020 --> 00:15:40,780
And so what we're going to do with that Issei percent difference is going to just be equal to mean close

221
00:15:40,960 --> 00:15:49,820
10 minus mean close 30 divided by I mean close 30.

222
00:15:49,820 --> 00:15:54,380
So again kind of just an arbitrary statistic to measure here but this is more just to show you what's

223
00:15:54,380 --> 00:16:00,280
possible and then we're going to call this whatever we want we can say percent's difference.

224
00:16:00,350 --> 00:16:01,550
And again totally up to you.

225
00:16:01,550 --> 00:16:06,740
We want to call it you can call this column Jeli just to make it clear that there's no restrictions

226
00:16:06,740 --> 00:16:09,710
on the name and we'll add that in.

227
00:16:09,780 --> 00:16:12,800
So let's make that pipeline we will run that pipeline again.

228
00:16:13,020 --> 00:16:14,040
And let me make sure.

229
00:16:14,040 --> 00:16:14,660
Percent.

230
00:16:14,750 --> 00:16:19,710
If an Whoops looks like I said pre-sent not percent.

231
00:16:19,770 --> 00:16:21,330
So let's run that again.

232
00:16:21,330 --> 00:16:21,790
There we go.

233
00:16:21,810 --> 00:16:27,000
Now we get our results run that and I have the percent difference where the percent difference between

234
00:16:27,330 --> 00:16:33,000
the mean close and 10 days versus the mean close over 30 days and that's how you can calculate single

235
00:16:33,000 --> 00:16:37,350
factors and actually combine factors to grab more information.

236
00:16:37,500 --> 00:16:39,790
We're going to do next is discuss filters and screen.

237
00:16:39,790 --> 00:16:44,670
So typically you're not going to want to grab every single equity at some particular time stamp.

238
00:16:44,850 --> 00:16:50,480
Well you want to do is grab the time stamp grab the IDs calculate some sort of factor off of it.

239
00:16:50,760 --> 00:16:54,740
And then what you'll do after that is filtered off based off some sort of factor.

240
00:16:54,780 --> 00:16:57,360
So let's go ahead and show you how to do that in the next lecture.

241
00:16:57,360 --> 00:16:58,860
Thanks everyone and I'll see you there.
