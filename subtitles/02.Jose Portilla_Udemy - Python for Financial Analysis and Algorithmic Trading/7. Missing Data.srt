1
00:00:05,420 --> 00:00:08,330
Hello everyone and welcome to this lecture on missing data.

2
00:00:08,330 --> 00:00:12,500
Now typically when you're dealing with financial datasets you hopefully don't actually ever have any

3
00:00:12,500 --> 00:00:13,610
missing data.

4
00:00:13,640 --> 00:00:17,650
Usually the stock price is going to be known for pretty much every day.

5
00:00:17,660 --> 00:00:19,980
So it's not very often the asset of missing data.

6
00:00:20,180 --> 00:00:24,830
But there are going to be some cases where you may have to either drop missing data or fill in missing

7
00:00:24,830 --> 00:00:25,480
data.

8
00:00:25,490 --> 00:00:29,170
So let's go ahead and go over Pandurs tools for dealing with missing data.

9
00:00:29,180 --> 00:00:31,420
Let's jump to the Jupiter notebook now.

10
00:00:31,430 --> 00:00:31,700
All right.

11
00:00:31,700 --> 00:00:33,590
Here I am at the Jupiter notebook.

12
00:00:33,590 --> 00:00:39,080
What I want to go out and do is create a data frame and just like we create we could create a series

13
00:00:39,140 --> 00:00:43,730
from a dictionary we can actually create a data frame from a dictionary as well.

14
00:00:43,760 --> 00:00:45,900
This dictionary is going to have three kids in it.

15
00:00:45,930 --> 00:00:53,860
It's going to keep a key B and key C and what these are going to be are columns in our data frame and

16
00:00:53,860 --> 00:01:00,120
then we can do for the actual data points is pasan a list of values for each key and those will be the

17
00:01:00,120 --> 00:01:03,550
data points for each row in that column name.

18
00:01:03,630 --> 00:01:11,460
We'll go ahead and say Key A has a list one 2 and then we're going to use any n to signify a missing

19
00:01:11,490 --> 00:01:14,240
ordinal value.

20
00:01:14,380 --> 00:01:22,080
Then we're going to say for key it's going to be 5 and P and then and P and then and then finally Keesey

21
00:01:22,320 --> 00:01:23,550
our third column.

22
00:01:23,550 --> 00:01:26,430
So we're going to retain all values 1 2 and 3.

23
00:01:26,490 --> 00:01:28,340
So has no missing values.

24
00:01:28,650 --> 00:01:35,610
And then we can go ahead and say is DFAC equal to PD data frame and then pass in the dictionary.

25
00:01:37,040 --> 00:01:43,550
And then when we check out our data frame we get this nice looking data frame of columns A B and C and

26
00:01:43,550 --> 00:01:51,700
then rows 0 1 and 2 no rows 0 has no missing values and Column C has no missing values.

27
00:01:51,980 --> 00:01:57,800
And then there's a few missing values here in rÃ¡by or column B and one missing value in column A.

28
00:01:58,660 --> 00:02:03,480
Let's go out and explore the drop and a method.

29
00:02:03,570 --> 00:02:06,880
A lot of times you just want to drop missing values from your data set.

30
00:02:06,930 --> 00:02:09,300
Especially if it's just a few missing values.

31
00:02:09,300 --> 00:02:16,560
If you say drop an A just by itself and call it as a method of close parentheses what occurs is that

32
00:02:16,560 --> 00:02:24,180
panderers is going to drop any row with any single or water more mill or missing values meaning if any

33
00:02:24,180 --> 00:02:29,130
of these rows had a null value in it one or more it went ahead and dropped them.

34
00:02:29,160 --> 00:02:35,340
If you want to perform this action on the columns which you can do is check out shift tab here and notice

35
00:02:35,340 --> 00:02:37,620
that there's an axis argument.

36
00:02:37,620 --> 00:02:42,460
That means by default the access is zero meaning the operation occurs along the rows.

37
00:02:42,630 --> 00:02:49,110
But if you want to do the operation along the columns being drop any columns that have a null value

38
00:02:49,530 --> 00:02:52,050
you can specify access is equal to 1.

39
00:02:53,040 --> 00:02:59,070
And that's going to drop any columns with a null value so I don't see the comparison here.

40
00:02:59,260 --> 00:03:04,700
And that means the drop troponin Atropos any rows any row values in it and then you have to drop in

41
00:03:04,690 --> 00:03:10,990
a with access equal to one is going to drop any columns of null values in it which you can also do is

42
00:03:10,990 --> 00:03:13,220
specify a threshold.

43
00:03:13,370 --> 00:03:20,960
And if we go in and check this out we'll say DMF drop at a news shift town to check out the documentation

44
00:03:21,280 --> 00:03:29,570
that is that there's a thresh arguments now what the argument is it's an integer value and you will

45
00:03:29,570 --> 00:03:34,730
require that many not and a values in order to not get dropped.

46
00:03:34,760 --> 00:03:38,780
For instance let me go and set the threshold equal to 2.

47
00:03:38,900 --> 00:03:41,470
And again we're just going to do this along the rows.

48
00:03:41,540 --> 00:03:48,760
So notice here how we have in Roseboro three nonne and a values in row 1.

49
00:03:48,770 --> 00:03:54,040
We have two non and a values and in row two we have only one.

50
00:03:54,140 --> 00:03:56,360
Number three not any values.

51
00:03:56,420 --> 00:04:01,250
That means if I say drop it like this it drops everything but Roseboro.

52
00:04:01,280 --> 00:04:09,520
However if I set the threshold to be equal to 2 and run this it went ahead and kept row 1.

53
00:04:09,590 --> 00:04:18,230
And basically what that means is because row 1 had at least two not any values 2.0 and the two it went

54
00:04:18,230 --> 00:04:22,180
ahead and kept that row.

55
00:04:22,200 --> 00:04:22,560
All right.

56
00:04:22,560 --> 00:04:25,280
Let's go ahead and move on to fill in.

57
00:04:25,650 --> 00:04:29,070
Right now we just focus on just dropping missing values.

58
00:04:29,180 --> 00:04:32,540
Well a lot of times you'll want to actually replace those missing values.

59
00:04:32,580 --> 00:04:34,610
We take a look at our data frame again.

60
00:04:34,680 --> 00:04:36,160
We have these missing values here.

61
00:04:36,240 --> 00:04:42,710
If we wanted to fill in those missing values we can use to fill and a method and this if we go and take

62
00:04:42,710 --> 00:04:45,200
a shift tab here has a couple of different arguments.

63
00:04:45,210 --> 00:04:47,680
But notice it has a value argument.

64
00:04:47,890 --> 00:04:53,240
And what she can do here is as a value set in your fill value.

65
00:04:53,280 --> 00:04:55,710
I'm just going to pass on a string to make it very obvious here.

66
00:04:55,740 --> 00:05:03,690
What's going on and notice it was able to fill in that value of whatever value we wanted in this case

67
00:05:03,690 --> 00:05:05,970
just a string that said fill value.

68
00:05:06,060 --> 00:05:10,350
However a lot of times when you're going to want to do is actually fill in the value of maybe the mean

69
00:05:10,350 --> 00:05:16,150
of the column and you can do that for example as such you can say DSF of a.

70
00:05:16,380 --> 00:05:17,730
So that's my a column.

71
00:05:17,730 --> 00:05:20,290
And notice the missing point here.

72
00:05:20,460 --> 00:05:32,450
I'll go ahead and say fill and a and I will set the value to the mean of that column.

73
00:05:32,980 --> 00:05:37,510
And now that value has been filled as the mean of the value.

74
00:05:37,600 --> 00:05:43,060
Now there's a whole philosophy and way of thinking and statistical methods for filling in missing values

75
00:05:43,090 --> 00:05:44,410
appropriately.

76
00:05:44,410 --> 00:05:46,490
I'll let you go ahead and explore those on your own.

77
00:05:46,540 --> 00:05:49,480
So they really depend on what kind of data you're working with.

78
00:05:51,310 --> 00:05:59,670
For now all I want you to be aware of is that there's a fill and a method and a drop and a method OK.

79
00:05:59,760 --> 00:06:00,890
That's it for now.

80
00:06:00,900 --> 00:06:06,060
Hopefully you remember just that these two methods are available for you and you can specify what access

81
00:06:06,060 --> 00:06:11,100
you want to perform the action on as well as the thrush argument and the value arguments.

82
00:06:11,100 --> 00:06:14,080
All right thanks everyone and I'll see you at the next lecture.
