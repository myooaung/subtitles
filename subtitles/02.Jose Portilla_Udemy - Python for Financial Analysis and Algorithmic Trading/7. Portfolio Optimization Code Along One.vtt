WEBVTT
1
00:00:05.380 --> 00:00:07.730
Hello everyone and welcome to this lecture.

2
00:00:07.790 --> 00:00:10.560
The code along for the portfolio optimization.

3
00:00:10.890 --> 00:00:12.740
We're going to consist of two parts here.

4
00:00:12.740 --> 00:00:16.660
One is the Monte-Carlo simulation where we choose a bunch of random applications.

5
00:00:16.820 --> 00:00:20.250
And the second part will be actually using an optimization algorithm.

6
00:00:20.270 --> 00:00:22.660
Let's open up a new chapter notebook and get started.

7
00:00:22.940 --> 00:00:29.560
OK so to begin with all this we need to import some PI and P Well import Pandurs PD and then we're going

8
00:00:29.560 --> 00:00:37.750
to import that plot lib pipe plot as Piazzi and to see our plots here we'll see that plot live in line

9
00:00:38.130 --> 00:00:42.960
Raemer you'll need to use Pilton that show if you're not using the Jupiter notebook.

10
00:00:43.060 --> 00:00:48.820
Now I'm going to go ahead and grab our data and I'm going to use the CSP files that we provide you can

11
00:00:48.820 --> 00:00:53.350
also use quando if you want just like we did before but we have all the close prices already set up

12
00:00:53.350 --> 00:00:54.550
for you.

13
00:00:54.550 --> 00:00:59.900
Set the index column to be the date column and then go ahead and say parse dates to be true.

14
00:01:01.260 --> 00:01:05.220
And then I'm going to copy this and we're going to paste it three more times here and then edit the

15
00:01:05.220 --> 00:01:06.670
actual stock names.

16
00:01:07.270 --> 00:01:14.970
So we'll have Amazon on this and then we'll have IBM then we'll have Cisco here.

17
00:01:15.060 --> 00:01:15.900
And let's go ahead.

18
00:01:15.970 --> 00:01:26.880
These say Cisco close IBM close and then the last one is a M.Z. and close.

19
00:01:26.980 --> 00:01:29.180
So those are for CACP files we provide you.

20
00:01:29.230 --> 00:01:34.390
And if you just tap autocomplete it should actually fill those in for you.

21
00:01:34.390 --> 00:01:38.150
But here we have Apple Cisco IBM and Amazon and then we're going to concatenate all of them together

22
00:01:39.280 --> 00:01:51.050
will say stocks PD concatenate Anatolians concatenate Apple Cisco IBM and Amazon along axes to once

23
00:01:51.050 --> 00:01:53.330
we kind of put all those columns together.

24
00:01:53.390 --> 00:01:58.030
Then let me go ahead and rename the columns so that we actually know what stocks they refer to we'll

25
00:01:58.070 --> 00:02:07.360
say stock stock columns is equal to Apple Cisco and we put a comma here not a period.

26
00:02:07.370 --> 00:02:07.890
There you go.

27
00:02:07.890 --> 00:02:14.510
Apple Cisco IBM and Amazon.

28
00:02:14.820 --> 00:02:20.430
So if we run that and checked the head of the stocks they frame we now have Apple Cisco IBM and Amazon

29
00:02:20.460 --> 00:02:21.920
and the closing prices.

30
00:02:22.140 --> 00:02:26.850
So we're going to do now is show you a couple of different things that we're going to be using to simulate

31
00:02:27.090 --> 00:02:28.770
thousands of possible applications.

32
00:02:28.770 --> 00:02:34.010
One thing we can end up using is the mean daily return and that's easy enough to get we just say stocks

33
00:02:34.920 --> 00:02:35.870
per cent change.

34
00:02:35.910 --> 00:02:43.350
One mean and that will be the mean daily return here.

35
00:02:43.730 --> 00:02:48.050
And then what it can also do is show the correlation between the returns but we won't really be using

36
00:02:48.050 --> 00:02:49.880
this but this is sometimes interesting to check out.

37
00:02:49.880 --> 00:02:57.410
You can say PC t change one and then say c o r r and this just returns back the Pearson correlation

38
00:02:57.410 --> 00:02:59.660
coefficient between all the time series.

39
00:02:59.660 --> 00:03:03.470
So obviously a time series is going to be perfectly correlated with itself.

40
00:03:03.470 --> 00:03:07.490
But here you can check out well how correlated to Cisco's stock to Apple stock.

41
00:03:07.730 --> 00:03:11.810
And later on we get to see how we can use correlation to do something known as Pear's trading.

42
00:03:11.870 --> 00:03:17.270
For now though we just kind of showing you this in case you ever want to explore this on your own.

43
00:03:17.480 --> 00:03:23.710
So to get started we're going to show you a couple of few things one of the main ones being logarithmic

44
00:03:23.710 --> 00:03:26.500
returns versus arithmetic returns.

45
00:03:26.500 --> 00:03:31.070
So we're going to do for the rest of this notebook we're going to switch over to using log returns instead

46
00:03:31.090 --> 00:03:32.580
of arithmetic returns.

47
00:03:32.800 --> 00:03:36.540
For many of our use cases they're almost the same as you'll see in just a second.

48
00:03:36.760 --> 00:03:42.400
But most technical analysis techniques required trending or normalizing the time series and using log

49
00:03:42.400 --> 00:03:44.140
returns is a nice way to do that.

50
00:03:44.140 --> 00:03:46.140
So a lot of returns are really convenient to work with.

51
00:03:46.140 --> 00:03:50.560
For a lot of the algorithms we encounter and you can go ahead and check out the notebook link for an

52
00:03:50.560 --> 00:03:56.020
article on why you should use low returns versus just arithmetic returns to be perfectly honest.

53
00:03:56.050 --> 00:04:00.330
A lot of times it doesn't make a huge difference especially for the more basic techniques we use.

54
00:04:00.340 --> 00:04:06.340
But as you get to more and more complex techniques which require these normalization of these time series

55
00:04:06.640 --> 00:04:09.950
using log returns is a nice easy way to take care of those problems.

56
00:04:10.000 --> 00:04:15.750
So to show you how similar they are just going to do socks percent change one and you the head of this.

57
00:04:15.760 --> 00:04:20.470
Remember this is just the daily returns arithmetically.

58
00:04:20.470 --> 00:04:25.780
And if we were to do this using logarithmic returns it would be the following we would take the log

59
00:04:26.410 --> 00:04:36.960
of stocks divided by stocks shifted over by one so shift over by one and we're going to call these the

60
00:04:37.070 --> 00:04:43.910
log Rhett's or log returns and if I show the head of this you'll see just how similar they are.

61
00:04:43.910 --> 00:04:50.990
So here we can see for example the very first values 0.00 5 3 7 4 here in the logarithmic return it's

62
00:04:51.080 --> 00:04:53.570
zero point 0 0 5 3 6.

63
00:04:53.570 --> 00:04:59.000
So extremely similar and you can see here as you continue on the numbers themselves are really quite

64
00:04:59.000 --> 00:04:59.640
similar.

65
00:04:59.810 --> 00:05:04.340
So that's why it hasn't been really affecting us previously and for a lot of other techniques it really

66
00:05:04.340 --> 00:05:05.460
won't make a huge difference.

67
00:05:05.480 --> 00:05:11.000
But just in case you're using a particular technical analysis analysis technique that requires the sort

68
00:05:11.000 --> 00:05:13.860
of the trending or normalization using logarithmic returns.

69
00:05:13.940 --> 00:05:20.090
This is how you can do that quite simply epilog stocks of IDBI stocks shifted over one time period and

70
00:05:20.080 --> 00:05:24.170
well you can also kind of check out the log returns histograms.

71
00:05:24.950 --> 00:05:33.160
So it's going to say been 0 to 100 here and say the figure sizes say 12 Bay and let's go ahead and say

72
00:05:33.160 --> 00:05:38.800
Piazzi I'll say Titely out just in case there's any overlapping here because I'm doing a histogram of

73
00:05:38.910 --> 00:05:42.190
the entire data frame so we should see for a little histogram plots here.

74
00:05:42.220 --> 00:05:50.110
So you see Apple Amazon Cisco and IBM you can kind of explore the returns here comparison to one another.

75
00:05:50.110 --> 00:05:50.820
All right.

76
00:05:51.010 --> 00:05:55.720
So we're going to go ahead and do is show you a couple of more things that we can use later on.

77
00:05:56.400 --> 00:06:04.840
If we took a log return mean this gives us back the average or mean return logarithmically speaking

78
00:06:04.840 --> 00:06:06.350
for each of the stocks.

79
00:06:06.370 --> 00:06:10.150
Something else we're going to use and we're doing the random allocations we're going to compute the

80
00:06:10.150 --> 00:06:12.910
pairwise covariance of the columns.

81
00:06:13.180 --> 00:06:23.980
So to do that it's log Rhett's and c o r r is the correlation of the columns and if you do CORV it's

82
00:06:23.980 --> 00:06:28.750
the covariance of the columns and you can just check out the Wikipedia articles for those actual formulas

83
00:06:28.750 --> 00:06:29.630
and what they represent.

84
00:06:29.650 --> 00:06:31.510
But they're quite similar.

85
00:06:31.510 --> 00:06:36.550
Here's the covariance of the log for returns here.

86
00:06:36.730 --> 00:06:37.430
OK.

87
00:06:37.700 --> 00:06:43.310
So now we're going to do is we can take logarithmic returns covariance and multiply it by the number

88
00:06:43.310 --> 00:06:46.040
of business days to get these values.

89
00:06:46.040 --> 00:06:48.350
And these are some values are going to be using on later.

90
00:06:48.350 --> 00:06:53.450
So keep this in mind we will actually use these right now but later on for one of the key steps in the

91
00:06:53.450 --> 00:06:57.300
random allocations we'll be using this sort of analysis technique.

92
00:06:57.350 --> 00:07:02.390
OK let's go ahead and do a single run for some random allocations and then we'll put it in a for loop

93
00:07:02.690 --> 00:07:05.360
and then do thousands of random allocations.

94
00:07:05.390 --> 00:07:11.000
So the first thing to do is I'm going to go ahead and print stock stock columns so we remember the order

95
00:07:11.000 --> 00:07:24.080
that we're working stuff in and then I'm going to say weights is equal to NPR-A random random 4.

96
00:07:24.870 --> 00:07:32.030
And then let's go ahead and print those weights and let's print the phrase random weights.

97
00:07:32.050 --> 00:07:34.370
So if I run this I can see my index.

98
00:07:34.480 --> 00:07:40.570
Apple Cisco IBM Amazon I say ran them whites and have created some random weights to each of these stocks

99
00:07:40.570 --> 00:07:42.040
for their allocations.

100
00:07:42.040 --> 00:07:46.490
Now there is a small problem here is that these random weights do not add up to 1.0.

101
00:07:46.720 --> 00:07:51.320
So to make sure that's the case all we're doing is dividing it by the sum of the weights.

102
00:07:51.370 --> 00:07:52.610
So that tells you how we can do that.

103
00:07:54.870 --> 00:07:57.060
We're going to say Prince rebalance

104
00:07:59.970 --> 00:08:02.300
and I'm going to print it out.

105
00:08:02.610 --> 00:08:06.040
Well first off let's pronounce Waites.

106
00:08:06.270 --> 00:08:11.460
But before we do that let's actually rebalance them the easiest way to rebalance these to make sure

107
00:08:11.460 --> 00:08:12.630
they are all equal.

108
00:08:12.670 --> 00:08:18.600
One is to just take the weight survey and then divide each of those values by the sum of weights.

109
00:08:18.820 --> 00:08:21.220
And this is essentially a normalization technique.

110
00:08:21.250 --> 00:08:22.540
So now I want to run this.

111
00:08:22.540 --> 00:08:23.740
I can see the following.

112
00:08:23.740 --> 00:08:24.810
Here are my stocks.

113
00:08:24.820 --> 00:08:29.110
Here are my random weights and then I rebalance them to get these.

114
00:08:29.140 --> 00:08:32.920
Now as a quick note you'll notice I'm getting random weights that are different every time.

115
00:08:32.920 --> 00:08:37.520
And technically that makes sense because I am asking for random numbers.

116
00:08:37.530 --> 00:08:41.100
Well it'd be nice if I got the same random set of numbers every time.

117
00:08:41.290 --> 00:08:45.250
To do that when you can do is say N.P. random

118
00:08:48.050 --> 00:08:48.940
seed.

119
00:08:49.190 --> 00:08:51.830
And this is going to set a seed value for the random numbers.

120
00:08:51.830 --> 00:08:55.040
That way you technically get the same random numbers every time.

121
00:08:55.040 --> 00:08:59.000
So if I run this again with seed 101 and this is just an arbitrary number it's going to be whatever

122
00:08:59.000 --> 00:08:59.830
you want.

123
00:08:59.840 --> 00:09:01.150
I would recommend you set it to 1 to 1.

124
00:09:01.150 --> 00:09:03.270
That way your values match up to my values.

125
00:09:03.380 --> 00:09:06.710
But every time you run this you should get the same random weights.

126
00:09:06.710 --> 00:09:13.820
Now keep in mind if I were to copy this and paste it in another cell then I would not get the same weights.

127
00:09:14.000 --> 00:09:17.810
So if I run this more than once I get a different set of random weights.

128
00:09:17.840 --> 00:09:22.490
It's the fact that the random seed is in the same cell that I'm resetting the seed every single time

129
00:09:22.820 --> 00:09:24.640
that I run these commands here.

130
00:09:24.650 --> 00:09:25.700
So keep that in mind.

131
00:09:25.730 --> 00:09:29.110
You should be putting everything in a single cell to get the same results I do.

132
00:09:29.330 --> 00:09:33.590
If you keep running this in a different cell where the seats are already been set you will end up getting

133
00:09:33.980 --> 00:09:35.370
different random numbers than me.

134
00:09:35.390 --> 00:09:37.290
So something to keep in mind.

135
00:09:37.350 --> 00:09:41.450
Now what's nice about this is no matter how many times I run the sell I'll keep getting the same random

136
00:09:41.450 --> 00:09:46.850
weights and same random rebalancing OK so that's the rebalancing step.

137
00:09:46.850 --> 00:09:50.010
Now what I'm going to do is the expected return step.

138
00:09:51.860 --> 00:09:57.370
So say expect that a return remember to actually get the Sharpe ratio we want to get the expected porfolio

139
00:09:57.380 --> 00:09:59.840
return divided by the expected volatility.

140
00:10:00.780 --> 00:10:02.280
So I'm going to print out

141
00:10:05.000 --> 00:10:11.690
expected a portfolio return a created a variable called expected return.

142
00:10:11.710 --> 00:10:18.510
And so we're going to kind of use some clever math but I'm just basically going to take my Lague returns.

143
00:10:18.910 --> 00:10:25.210
Take the average of them multiply them by weights and multiply that by 252.

144
00:10:25.810 --> 00:10:26.720
And later on.

145
00:10:26.830 --> 00:10:31.720
Well it's actually well firstly to technically multiply these two together although it doesn't really

146
00:10:31.720 --> 00:10:34.360
matter because of the way this is working.

147
00:10:36.670 --> 00:10:39.190
It just lines up better with the form of the equation.

148
00:10:39.190 --> 00:10:41.230
We expressed that again.

149
00:10:41.230 --> 00:10:45.030
All we're doing here is we are taking the average log returns.

150
00:10:45.040 --> 00:10:46.730
So if you take a look at what that was.

151
00:10:46.930 --> 00:10:52.120
Remember it's these values then you're going to multiply it by the weights we just created which will

152
00:10:52.120 --> 00:10:59.210
get you these values and then we're going to multiply that by 250 to technically 252 trading days.

153
00:10:59.270 --> 00:11:05.630
Then we're going to take the sum of this and then that's our expected return.

154
00:11:05.960 --> 00:11:11.210
So in terms of logarithmic or turn over the entire tuner for the two days that's our expected return

155
00:11:11.210 --> 00:11:13.440
because we took the some of it.

156
00:11:13.560 --> 00:11:22.410
Next thing to do is calculate the expected variance or I should say volatility really.

157
00:11:22.540 --> 00:11:32.110
So I'm going to prance expected volatility and this is basically the denominator of the volatility.

158
00:11:32.110 --> 00:11:39.830
This is the diameter of the Sharpe ratio formula so expect that volatility and we're essentially going

159
00:11:39.830 --> 00:11:42.520
to use some linear algebra here.

160
00:11:42.530 --> 00:11:45.430
So don't be too concerned with the entire method here.

161
00:11:45.440 --> 00:11:49.940
There are other ways to do this that lineup more of what we did in the previous code a long lecture.

162
00:11:49.940 --> 00:11:54.890
This is kind of just utilizing numb pie's linear algebra techniques so that it performs a lot faster

163
00:11:55.040 --> 00:11:56.970
and it has to have taking up products.

164
00:11:57.440 --> 00:12:07.110
So we're going to take the transpose the weights dot product transpose way with the dot product of the

165
00:12:07.110 --> 00:12:11.480
covariance of the returns multiplied by 252.

166
00:12:12.150 --> 00:12:15.240
And then that's also going to take in the weights here.

167
00:12:17.680 --> 00:12:20.810
So to make sure I did that right now it's kind of separate out what we're doing here.

168
00:12:20.810 --> 00:12:26.540
So the first thing in doing is inside of this I'm taking the dot product of the covariance of the log

169
00:12:26.540 --> 00:12:30.310
returns multiplied by 10 or 52 with the weights.

170
00:12:30.590 --> 00:12:35.590
So once I take that product anoints take the dot product of that multiplied by the transpose weights.

171
00:12:35.810 --> 00:12:37.320
So that's what's happening here.

172
00:12:37.340 --> 00:12:41.590
And then we take the square root of that whole thing and that gives you the expected volatility.

173
00:12:41.630 --> 00:12:45.890
This is kind of complex as far as what we're doing here.

174
00:12:45.890 --> 00:12:50.640
The reason we're doing it this way is that it's basically a lot more efficient code wise.

175
00:12:50.750 --> 00:12:53.010
It's kind of using some clever linear algebra here.

176
00:12:53.180 --> 00:12:55.190
If this kind of going over your head.

177
00:12:55.220 --> 00:12:56.180
Don't worry about it too much.

178
00:12:56.180 --> 00:13:00.980
You could technically rewrite this to match up with everything we did in the previous code long lecture.

179
00:13:00.980 --> 00:13:05.340
It would just run slower since we're going to do thousands of applications.

180
00:13:05.360 --> 00:13:07.880
We kind of want to use linear algebra toward advantage.

181
00:13:07.880 --> 00:13:11.920
So we kind of have this more complex writing of this.

182
00:13:12.280 --> 00:13:16.000
But then that allows us to just get the Sharpe ratio.

183
00:13:16.140 --> 00:13:26.240
So we're going to print out what's Sharpe ratio and also S.R. to be equal to the expected return divided

184
00:13:26.240 --> 00:13:28.860
by the expected volatility.

185
00:13:30.450 --> 00:13:33.320
And then let's print out our.

186
00:13:33.360 --> 00:13:39.270
So if I run this I got my random weights I rebalance them so they all equal one may expect that portfolio

187
00:13:39.270 --> 00:13:39.680
return.

188
00:13:39.680 --> 00:13:44.710
Whoops forgot to print the expected a return.

189
00:13:44.720 --> 00:13:47.090
Is this value in the expected volatility.

190
00:13:47.090 --> 00:13:48.100
Also forgot to print that

191
00:13:51.170 --> 00:13:53.930
run that is this and then that gives me a sharper ratio.

192
00:13:53.930 --> 00:13:57.670
There are plenty of force hasn't quite reached one yet but you can see what we're doing here.

193
00:13:58.010 --> 00:13:58.340
OK.

194
00:13:58.340 --> 00:14:00.660
The next step would be to do all of this.

195
00:14:00.800 --> 00:14:02.760
But thousands of times over.

196
00:14:02.990 --> 00:14:05.030
So that's how we're going to do in the very next lecture.

197
00:14:05.030 --> 00:14:06.900
We're going to run that couple of thousand times.

198
00:14:06.980 --> 00:14:08.170
We're going to plot out the data.

199
00:14:08.180 --> 00:14:12.620
Then after that we'll do another lecture where we actually show you mathematically the better way of

200
00:14:12.650 --> 00:14:17.300
optimizing it instead of just doing thousands of random allocations and then we'll also show you how

201
00:14:17.300 --> 00:14:19.500
to get the efficient frontier.

202
00:14:19.550 --> 00:14:19.880
Okay.

203
00:14:19.940 --> 00:14:24.830
So right now all we've done so far is basically grabbed our data and set up the formula we're going

204
00:14:24.830 --> 00:14:27.060
to be using for those random allocation.

205
00:14:27.060 --> 00:14:31.370
So we're going to take all this stuff take a get rid of the print statements and then put it in a for

206
00:14:31.370 --> 00:14:35.400
loop or we do let's say like 25000 applications.

207
00:14:35.840 --> 00:14:40.280
So in the very next lecture we're going to go through those thousands of applications and put all this

208
00:14:40.280 --> 00:14:41.920
in a for loop and then do some plotting.

209
00:14:42.110 --> 00:14:43.720
Thanks everyone and I'll see you there.
