1
00:00:05,360 --> 00:00:10,250
Welcome back everyone to part of this python crash course and we'll start off by talking about comparison

2
00:00:10,280 --> 00:00:16,860
operators so comparison operators things like less than greater than equal to not equals to light compared

3
00:00:16,870 --> 00:00:17,470
to items.

4
00:00:17,470 --> 00:00:22,720
So for example we can say is less is one less than two should enter.

5
00:00:22,730 --> 00:00:26,970
And that returns a boolean so comparison operators pretty much always going to return some sort of boolean

6
00:00:26,990 --> 00:00:28,560
either true or false.

7
00:00:28,580 --> 00:00:34,550
So that's the comparison operators for less than you can do greater than you can do less than or equal

8
00:00:34,550 --> 00:00:36,270
to.

9
00:00:36,600 --> 00:00:40,180
You can do greater than or equal to.

10
00:00:40,250 --> 00:00:45,770
And then you can do things like CheckFree qualities and say is one greater than one and an inequality

11
00:00:45,770 --> 00:00:48,240
is exclamation point equal sign.

12
00:00:48,320 --> 00:00:50,510
So is one not equal to three.

13
00:00:50,630 --> 00:00:52,190
That ends up being true.

14
00:00:52,190 --> 00:00:55,400
You can also do equality for various objects like strings.

15
00:00:55,400 --> 00:01:01,680
You can check is the string equal to this string and they happen to be true.

16
00:01:02,030 --> 00:01:04,440
Now keep in mind this will also take into account data types.

17
00:01:04,460 --> 00:01:08,270
So the number one will not be equal to the string one.

18
00:01:08,270 --> 00:01:09,790
So keep that in mind.

19
00:01:10,070 --> 00:01:15,770
Then once you've learned about comparison operators we can discuss logical operators so logical operators

20
00:01:15,800 --> 00:01:19,380
basically allow you to combine multiple comparison operators.

21
00:01:19,520 --> 00:01:22,760
And those are things like and or not statements.

22
00:01:22,790 --> 00:01:31,340
For example if you wanted to check if one was equal to two and if one was equal to one you can use the

23
00:01:31,350 --> 00:01:32,200
keyword.

24
00:01:32,390 --> 00:01:36,740
And Python makes this really easy because it just uses the English word and in other languages it's

25
00:01:36,740 --> 00:01:39,440
the ampersand or the pipe operator for these sort of things.

26
00:01:39,500 --> 00:01:42,570
Python just keeps the simple uses this plain-English word.

27
00:01:42,630 --> 00:01:44,160
So that's one of them.

28
00:01:44,240 --> 00:01:45,620
Copy and paste this here.

29
00:01:45,830 --> 00:01:47,620
And that's the and operator.

30
00:01:47,690 --> 00:01:50,630
So both conditions have to be true for the operator.

31
00:01:50,660 --> 00:01:53,430
There is the OR operator where only one condition has to be true.

32
00:01:53,480 --> 00:01:56,250
So is one equal to two or is one equal to one.

33
00:01:56,280 --> 00:01:59,570
This will return true because one of those conditions is true.

34
00:01:59,690 --> 00:02:04,300
And then finally the last logical operator or the logic operator is the not keyword.

35
00:02:04,460 --> 00:02:07,490
That's basically checking the opposite of the condition.

36
00:02:07,490 --> 00:02:13,250
So you can check for something like is 1 and I put these in parentheses just because it makes it more

37
00:02:13,250 --> 00:02:14,670
readable for me.

38
00:02:14,840 --> 00:02:19,370
The various comparison operators don't really need to be princes but I do recommend that some checking

39
00:02:19,370 --> 00:02:21,180
is one equal to one.

40
00:02:21,530 --> 00:02:26,320
And I can say not and in some other comparison.

41
00:02:26,360 --> 00:02:29,340
So for instance one equal to two.

42
00:02:29,660 --> 00:02:33,850
And this returns true because I'm checking for the opposite of this condition here.

43
00:02:33,890 --> 00:02:36,410
That's what the knot does.

44
00:02:36,410 --> 00:02:37,040
All right.

45
00:02:37,040 --> 00:02:42,080
Now let's move on to if elif and L statements basically control flow in Python.

46
00:02:42,080 --> 00:02:44,980
So Python makes use of what's known as whitespace.

47
00:02:44,990 --> 00:02:47,330
So let's start off with a very simple if statement.

48
00:02:47,600 --> 00:02:51,800
So I say if and then I going to pass in some sort of condition that I want to check.

49
00:02:51,800 --> 00:02:57,700
So if something is true or false I'm going to end up actually having control flow to work with it.

50
00:02:57,710 --> 00:03:04,250
So if it's going to check if some condition is true execute a block of code so I'm going to say if true

51
00:03:04,590 --> 00:03:05,940
and then I have a colon.

52
00:03:05,960 --> 00:03:08,950
And when you hit enter you'll see an indentation of whitespace.

53
00:03:09,020 --> 00:03:14,010
That is what Python uses to indicate if a block of code matches up with an if statement.

54
00:03:14,090 --> 00:03:20,530
So I'm going to say if true prince Hello.

55
00:03:21,150 --> 00:03:29,090
So I ran this and I can see that print's Hello actually happened if I were to say if false then nothing

56
00:03:29,090 --> 00:03:33,200
actually happens because if only executes on true conditions.

57
00:03:33,200 --> 00:03:38,660
So we can also then add in just comparison operators so I can say if one is equal to one prints hello

58
00:03:38,930 --> 00:03:40,030
that sort of thing.

59
00:03:40,040 --> 00:03:45,060
Now if we come up here and changes to one is equal to two we see nothing as the output.

60
00:03:45,080 --> 00:03:49,670
If you do want something to execute at the very end in case the if statement doesn't actually happen

61
00:03:49,970 --> 00:03:51,700
you can line up an L statement with it.

62
00:03:51,740 --> 00:03:56,680
So we can say if this condition is true execute that indented block of code else.

63
00:03:57,560 --> 00:04:00,450
We're going to do something else like Prince.

64
00:04:01,460 --> 00:04:08,850
If statements wasn't true this was not true.

65
00:04:09,320 --> 00:04:10,690
And they'll say if statement was not true.

66
00:04:10,700 --> 00:04:14,510
So let's come back here and change this is something that will be true just to make sure that if we

67
00:04:14,510 --> 00:04:16,100
say if one is equal to one print Hello.

68
00:04:16,100 --> 00:04:21,770
So we expect just Helots were printed out and you can also check for multiple conditions so maybe don't

69
00:04:21,770 --> 00:04:24,800
just want to check if one is equal to one check for another condition.

70
00:04:24,950 --> 00:04:27,180
You can line up in eyelift statement that essentially.

71
00:04:27,180 --> 00:04:27,960
Else if.

72
00:04:28,190 --> 00:04:32,580
And that also just takes in some other condition so that the condition can be.

73
00:04:32,600 --> 00:04:39,880
Two is equal to two colon Prince to.

74
00:04:39,990 --> 00:04:43,150
Run this and we get hello because the first condition executed.

75
00:04:43,240 --> 00:04:48,390
But if we make the first condition be false then you actually don't need this princess here.

76
00:04:48,490 --> 00:04:49,440
In other languages you do.

77
00:04:49,450 --> 00:04:54,140
But they're actually kind of uncommon for Python you just say if and then whatever condition checking.

78
00:04:54,280 --> 00:04:55,550
Now we run this we get two.

79
00:04:55,780 --> 00:04:56,690
So what's happening here.

80
00:04:56,710 --> 00:05:01,810
Well we say if you check this first Can this be true if it is have a colon in it.

81
00:05:01,870 --> 00:05:03,810
Execute that indented block of code.

82
00:05:04,060 --> 00:05:06,700
Elif condition to check if true that's true.

83
00:05:06,700 --> 00:05:08,860
Execute this and then that block code else.

84
00:05:08,890 --> 00:05:13,930
If none of these happen to be true we print this statement and that's the basics of F 11 l statements

85
00:05:14,230 --> 00:05:16,300
and control flow with Python.

86
00:05:16,300 --> 00:05:17,920
Now let's talk about for loops.

87
00:05:20,160 --> 00:05:25,350
So for loops allow you to iterate through some sort of iterable sequence and then execute actions for

88
00:05:25,350 --> 00:05:27,130
every element in that sequence.

89
00:05:28,530 --> 00:05:32,910
So let's start off by creating an example sequence we'll just start off the list sequence will be just

90
00:05:32,940 --> 00:05:43,440
one two three four five and then the way you do this is say for item and then the key word in sequence

91
00:05:43,590 --> 00:05:48,630
colon and you're going to execute something for every item in that sequence so you can say something

92
00:05:48,630 --> 00:05:49,770
like Prince.

93
00:05:49,980 --> 00:05:50,310
Hello

94
00:05:53,890 --> 00:05:58,110
and then it's going to happen is for every item in the sequence that is for every number in this list.

95
00:05:58,110 --> 00:06:02,910
We're going to perform this block of code in this case just in the printing Halo 5 times.

96
00:06:02,910 --> 00:06:07,820
Now you can also use this item itself inside of this for loop so we can say something like instead of

97
00:06:07,830 --> 00:06:10,060
prints hello print out the item

98
00:06:13,170 --> 00:06:16,320
in there I can see now one two three four or five.

99
00:06:16,340 --> 00:06:20,940
Now this item this temporary variable name can be whatever you want so you can actually say something

100
00:06:20,940 --> 00:06:25,980
like for jelly in CQ the sequence print jelly.

101
00:06:26,010 --> 00:06:30,000
And if I run this now it says one or two you'll get back the exact same result.

102
00:06:30,000 --> 00:06:31,360
One two three four five.

103
00:06:31,530 --> 00:06:34,710
So you call this variable name really whatever you want.

104
00:06:34,710 --> 00:06:36,420
And I can actually perform actions with this.

105
00:06:36,420 --> 00:06:42,630
So for instance if I wanted to print the square of every number I could say jelly to the power of two

106
00:06:42,910 --> 00:06:45,920
and you get something like this 1 4 9 16 25.

107
00:06:45,930 --> 00:06:49,110
Now obviously I should probably choose better names and jelly.

108
00:06:49,170 --> 00:06:54,060
So a good name here would be numb because these are numbers and then I have kind of a really readable

109
00:06:54,060 --> 00:06:56,410
for loop here I'm saying for Num. in the sequence.

110
00:06:56,430 --> 00:06:59,660
Prince Nahm to the power of two or the squared number.

111
00:06:59,700 --> 00:07:01,170
Run that and you get the same result.

112
00:07:01,170 --> 00:07:05,400
So let's say for loop just doing something for every item in the sequence.

113
00:07:05,400 --> 00:07:10,740
Now this also works not just for lists but it also works for strings and even dictionaries where a dictionary

114
00:07:10,740 --> 00:07:12,060
will be for every key.

115
00:07:12,060 --> 00:07:17,220
Just keep in mind that dictionaries aren't sorted so you may go through them in kind of a random order.

116
00:07:18,270 --> 00:07:20,460
Now let's talk about while loops.

117
00:07:21,000 --> 00:07:27,580
So while loops are loops of code that end up continually executing while a condition is true.

118
00:07:27,600 --> 00:07:29,440
So let me show you what I mean by that.

119
00:07:29,520 --> 00:07:40,560
I'm going to set a variable equal to one and only say while I is less than 5 Colan execute a block of

120
00:07:40,560 --> 00:07:41,230
code.

121
00:07:41,580 --> 00:07:49,980
So what I will do is I will say print is currently and then I will actually say that.

122
00:07:50,000 --> 00:07:51,900
Format an insert.

123
00:07:51,950 --> 00:07:56,870
They're using the formatting we talked about earlier and then what's important here as the last step

124
00:07:56,960 --> 00:07:58,240
is to add one to I.

125
00:07:58,270 --> 00:08:02,120
So then set reset equal to I plus 1.

126
00:08:02,120 --> 00:08:08,900
So if I run this I see eyes currently 1 2 3 4 and then at that very last loop I becomes 5 because four

127
00:08:08,900 --> 00:08:09,890
plus 1 is 5.

128
00:08:10,070 --> 00:08:12,280
Which means I'm no longer less than 5.

129
00:08:12,290 --> 00:08:14,130
So this while loop stops executing.

130
00:08:14,360 --> 00:08:17,530
So again if we take a look at this logic I starts at 1.

131
00:08:17,690 --> 00:08:18,850
1 is less than 5.

132
00:08:18,860 --> 00:08:25,460
We print out eyes currently 1 and then we say OK now Isaac will 2 plus 1 which is going to be one plus

133
00:08:25,460 --> 00:08:27,800
one which makes two and and so on.

134
00:08:27,800 --> 00:08:31,390
This keeps repeating until this condition is no longer true.

135
00:08:31,400 --> 00:08:36,320
You should be careful while loops because it's really easy to actually make a condition that last forever

136
00:08:36,380 --> 00:08:40,100
and you get an infinite while loop meaning instead of seeing a number here you see a little Asterix

137
00:08:40,100 --> 00:08:43,500
and it just keeps going on forever and forever if that ever happens to you.

138
00:08:43,730 --> 00:08:47,230
Well you can try to do is come over to kernel and then say restart.

139
00:08:47,300 --> 00:08:48,830
No restart the kernel.

140
00:08:48,860 --> 00:08:52,220
Keep in mind that will also delete all the variable names that you assigned earlier.

141
00:08:52,310 --> 00:08:56,820
So you may need to rerun themselves so you can do is kind of comment out your while loop.

142
00:08:56,870 --> 00:09:02,120
In case it was causing you errors and then say cell and then you can say run all the cells run all above

143
00:09:02,180 --> 00:09:03,920
all below etc..

144
00:09:03,950 --> 00:09:07,820
So keep that in mind in case you ever come for a while loop that ends up running for ever.

145
00:09:07,880 --> 00:09:12,170
Sometimes depending on what the while loop was doing it's really hard to bring your mouse over to click

146
00:09:12,170 --> 00:09:15,070
kernel because it just continually executes over and over again.

147
00:09:15,110 --> 00:09:21,130
In that case you may just need to kind of closure tab and restart Jupiter notebook or reopen the notebook.

148
00:09:21,370 --> 00:09:27,410
OK so now we're going to discuss a few key things that are built into Python as well as functions.

149
00:09:27,680 --> 00:09:30,510
One of the things I want to discuss is the range function.

150
00:09:30,800 --> 00:09:37,520
The range function is a generator for generating a sequence or a list of integers.

151
00:09:37,520 --> 00:09:38,730
So let me show you what I mean by that.

152
00:09:38,780 --> 00:09:45,680
If you just call range Phi in Python 3 you'll get back this range object that says zero comma 5.

153
00:09:45,830 --> 00:09:55,610
We can in the doing's iterating through this so say for item in range 5 and then you'll say print the

154
00:09:55,610 --> 00:10:00,940
item and they'll end up printing 0 1 2 3 4.

155
00:10:00,940 --> 00:10:07,900
So if we actually take a look at what range is returning it's returning a sequence of integers with

156
00:10:07,960 --> 00:10:13,430
a spacing of one from 0 all the way to whatever you asked for.

157
00:10:13,440 --> 00:10:17,270
But it doesn't actually include it because kind of like slicing indexing starts at zero.

158
00:10:17,280 --> 00:10:18,800
It doesn't include this last one.

159
00:10:18,880 --> 00:10:24,910
If you shift tab at range it will tell you what ranges range stop you get back this range object and

160
00:10:24,910 --> 00:10:28,240
you can actually specify a start stop and a step size.

161
00:10:28,240 --> 00:10:34,870
So for instance if we don't want to XLE actually want to start at zero we can do is say start at 1 and

162
00:10:34,870 --> 00:10:40,270
then go up to but not including five and that those one two three four if you want to indicate a step

163
00:10:40,270 --> 00:10:40,690
size.

164
00:10:40,690 --> 00:10:47,130
For instance if we go 20 here start at zero and then stay a step size of 2.

165
00:10:47,340 --> 00:10:51,140
That ends up going in step sizes to 0 2 4 6 8.

166
00:10:51,160 --> 00:10:53,960
Cetera actually brings out all those even numbers.

167
00:10:54,070 --> 00:10:55,360
Now range is a generator.

168
00:10:55,360 --> 00:11:00,100
So if you ever just call range by itself you get back this range generator object if you want the list

169
00:11:00,140 --> 00:11:07,560
where you can do is you can just say List Range and then whatever you want let's say from 1 to 11.

170
00:11:07,810 --> 00:11:11,500
Run that and then we get one up to and including 11.

171
00:11:11,500 --> 00:11:11,830
All right.

172
00:11:11,830 --> 00:11:14,090
So that's the basics range.

173
00:11:14,290 --> 00:11:18,130
So the next thing we're going to discuss is known as a list comprehension.

174
00:11:18,370 --> 00:11:25,120
So that's list comprehension and a list comprehension is just another way of rewriting or flattening

175
00:11:25,120 --> 00:11:28,270
out a for loop that happens to build out a list.

176
00:11:28,270 --> 00:11:32,440
And if you don't get it your first time don't worry about it too much you won't see it used that often

177
00:11:32,440 --> 00:11:33,460
throughout the course.

178
00:11:33,460 --> 00:11:35,050
But I just want you to be aware of it.

179
00:11:36,380 --> 00:11:42,510
So we're going to do is create a list let's say just one two three four.

180
00:11:42,570 --> 00:11:48,920
Now let's imagine that we want to create a list of numbers similar to x except every number in X is

181
00:11:48,930 --> 00:11:50,060
squared.

182
00:11:50,070 --> 00:11:52,780
Well we could do a simple for loop for this.

183
00:11:52,800 --> 00:12:04,140
I could say create an empty list called out and say for now in my list x colon say out dots a pens and

184
00:12:04,140 --> 00:12:07,980
a pen that number to the power of two.

185
00:12:07,980 --> 00:12:14,820
So if I run this and then ask for the out list after running that what ends up happening is I have the

186
00:12:14,820 --> 00:12:16,540
square of every number my original list.

187
00:12:16,560 --> 00:12:20,070
1 2 3 4 becomes 1 4 9 16.

188
00:12:20,190 --> 00:12:25,890
If you find yourself doing something like this running a for loop and appending to a list this is a

189
00:12:25,890 --> 00:12:30,870
common enough operation where you can use a list comprehension something that's built into Python.

190
00:12:31,080 --> 00:12:35,560
So we're going to do is rewrite this for loop as a list comprehension.

191
00:12:35,560 --> 00:12:40,230
So the way you do that is because you know the output is going to be a list you start with some square

192
00:12:40,230 --> 00:12:45,420
brackets and then whatever you were going to append to the list is what you start off with.

193
00:12:45,420 --> 00:12:46,870
So we just copy this.

194
00:12:46,940 --> 00:12:48,900
We were going to append some square.

195
00:12:49,260 --> 00:12:56,990
So we'll put that here and then you type in four and then you type in whatever this form was say for

196
00:12:57,000 --> 00:12:57,470
now.

197
00:12:59,030 --> 00:13:00,720
And then we say an X..

198
00:13:00,740 --> 00:13:06,500
So you basically take this top line of your loop and then write it in after whatever you're going to

199
00:13:06,500 --> 00:13:10,770
a pen and this will by itself reproduce that same list.

200
00:13:10,790 --> 00:13:12,890
And this is known as a list comprehension.

201
00:13:12,910 --> 00:13:17,360
You can kind of think of it as a flattened out for loop inside of brackets.

202
00:13:17,360 --> 00:13:19,980
Now we'll cover this again later on when we see it.

203
00:13:20,000 --> 00:13:22,210
I'll give you a quick refresher reminder of how it works.

204
00:13:22,280 --> 00:13:26,040
But I just want you to be aware of it and the fact that it exists.

205
00:13:26,060 --> 00:13:26,810
All right.

206
00:13:26,810 --> 00:13:29,690
So we'll end this part two for now.

207
00:13:29,690 --> 00:13:35,150
And coming up next we'll talk about functions lambda expressions map and filter and a few methods.

208
00:13:35,150 --> 00:13:36,920
Thanks everyone and I'll see at the next lecture.
