1
00:00:05,510 --> 00:00:11,120
Welcome back everyone to this lecture on emerging joining and concatenating data frames learning how

2
00:00:11,120 --> 00:00:15,620
to actually join two data frames together is an important part of the process especially when you're

3
00:00:15,620 --> 00:00:17,780
dealing with data sets from different sources.

4
00:00:17,810 --> 00:00:22,610
Usually you'll end up dealing with datasets by getting them from Panda's data reader or quando which

5
00:00:22,610 --> 00:00:26,390
will learn about later on then you'll have different data frames and you'll want to join them together

6
00:00:26,600 --> 00:00:28,670
before you actually continue your analysis.

7
00:00:28,670 --> 00:00:31,690
So we're going to learn the basics of merging joining and concatenating.

8
00:00:31,730 --> 00:00:36,020
We won't use all these methods and in fact I would highly recommend checking out the documentation on

9
00:00:36,020 --> 00:00:41,720
these methods because the documentation really lays out examples very clearly with pictures and example

10
00:00:41,720 --> 00:00:45,220
code for a variety of merging and concatenated tests.

11
00:00:45,260 --> 00:00:48,980
We're just going to go over the basics in this lecture with simple words the Jubran a notebook and get

12
00:00:48,980 --> 00:00:50,050
started.

13
00:00:50,120 --> 00:00:50,420
All right.

14
00:00:50,420 --> 00:00:55,690
Here we are at the Jupiter notebook for merging joining and concatenating.

15
00:00:55,700 --> 00:00:59,530
First off we're going to create some example data frames to work with here.

16
00:00:59,560 --> 00:01:04,630
I've imported pandas PD and using a dictionary and a list of index numbers.

17
00:01:04,760 --> 00:01:08,870
I've created three data frames one DFA to a DFT.

18
00:01:08,990 --> 00:01:15,350
We take a look at these data frames will see that we have diff one which has columns A B C and D and

19
00:01:15,350 --> 00:01:23,030
indexes 0 through 3 and then the 2 has the same columns except the indexes are 4 through 7 and then

20
00:01:23,030 --> 00:01:30,710
diea 3 has the indices through 11 Let's talk about concatenation concatenation basically glues together

21
00:01:30,710 --> 00:01:31,820
the data frames.

22
00:01:31,870 --> 00:01:35,030
Keep in mind that the dimensions should match all on the axis.

23
00:01:35,030 --> 00:01:37,550
You're trying to concatenate on for this.

24
00:01:37,550 --> 00:01:44,480
You just use PD dot com and then pass on a list of the data frame's to concatenate together you're going

25
00:01:44,480 --> 00:01:50,610
to concatenate data frames one two and three by passing them into a list into the PD.

26
00:01:50,660 --> 00:01:51,890
Concat function.

27
00:01:53,670 --> 00:02:00,310
You can see that by default the access to join on is zero meaning it's going to join the rows together.

28
00:02:00,910 --> 00:02:06,130
We see here that successfully concatenated or basically glued together the data frames.

29
00:02:06,460 --> 00:02:12,090
And we can see now we have a b and c and d as columns with the indices zero all the way up to 11.

30
00:02:12,130 --> 00:02:14,700
Each of the data points lining up nicely.

31
00:02:14,710 --> 00:02:17,360
Now you could also specify x is equal to 1.

32
00:02:17,390 --> 00:02:21,840
If you want to join and merge along the columns or concatenate along the columns.

33
00:02:22,150 --> 00:02:28,240
And this is an example of what happens when you use PD that Comcast on these three data frames along

34
00:02:28,270 --> 00:02:30,370
x is equal to 1.

35
00:02:30,370 --> 00:02:35,410
Notice here we have a bunch of missing values and that's because these data frames didn't have values

36
00:02:35,410 --> 00:02:38,320
for all the indices that you want to concatenate on.

37
00:02:38,500 --> 00:02:46,120
For example with data frame 1 A B and C and D you had indice values for 0 through 3.

38
00:02:46,120 --> 00:02:52,150
However for all the way up to 11 you had no values and that's why fill it in with Knolles when you joined

39
00:02:52,150 --> 00:03:00,240
this are concatenated on data into a data frame 3 which basically means when you're working with concatenation

40
00:03:00,300 --> 00:03:05,790
and Piddy that concat you'll want to make sure that you have information lining up correctly when you

41
00:03:05,790 --> 00:03:08,510
join on the axes.

42
00:03:08,590 --> 00:03:14,110
In this case we wanted to join an axis equal 0 to line everything up correctly had we specified the

43
00:03:14,110 --> 00:03:16,640
join along the columns facts equal to one.

44
00:03:16,720 --> 00:03:18,470
We'll have a bunch of missing information.

45
00:03:19,350 --> 00:03:23,870
Most often you'll probably be joining columns together so you'll in fact be joining along.

46
00:03:23,880 --> 00:03:25,500
Access is equal to 1.

47
00:03:25,500 --> 00:03:31,160
However make sure you know your data and what you actually want to concatenate before choosing an access.

48
00:03:31,170 --> 00:03:33,020
All right let's go ahead and move along.

49
00:03:34,120 --> 00:03:36,040
We'll create some more example data frames.

50
00:03:36,040 --> 00:03:40,950
In this case one called left and one called right here.

51
00:03:41,000 --> 00:03:42,180
Take a look at left.

52
00:03:42,230 --> 00:03:49,130
We have columns A and B with some values in them and then we have a key column k 0 through K3 we have

53
00:03:49,130 --> 00:03:54,780
the right data frame which is a very similar data frame except it has different columns C and D.

54
00:03:54,920 --> 00:04:00,170
However the key column is exactly the same as the left so heavily left data frame and the right data

55
00:04:00,170 --> 00:04:06,320
frame pandas is capable of using the merge function to do merge logic.

56
00:04:06,320 --> 00:04:09,680
That's very similar to merging sequel tables together.

57
00:04:09,680 --> 00:04:14,060
And if you don't work of sequel you don't have to worry too much about this but I'll show you the basics

58
00:04:14,060 --> 00:04:16,380
of how to merge two data frames.

59
00:04:16,580 --> 00:04:23,900
You just say PD that merge and then passen the left data frame and the right data frame or just pasan

60
00:04:23,990 --> 00:04:28,970
data from one data frame to whatever data frames you want to merge together.

61
00:04:29,000 --> 00:04:31,290
By default it will merge them on inner.

62
00:04:31,490 --> 00:04:36,890
And if you're unfamiliar with inor as regards to siecle merging don't worry about it just use the default

63
00:04:36,920 --> 00:04:37,610
inner.

64
00:04:37,670 --> 00:04:40,880
More importantly learn about this on.

65
00:04:41,150 --> 00:04:45,650
Basically when you're merging you're going to want to merge on a key column and you can actually pass

66
00:04:45,650 --> 00:04:48,290
in one or more key columns which we'll see later.

67
00:04:48,290 --> 00:04:54,410
But basically what's happening here is we're going to combine or merge these data frames together on

68
00:04:54,410 --> 00:04:55,460
this key column.

69
00:04:55,670 --> 00:05:01,100
And that way instead of concatenating them we would have two key columns we can merge so that we merge

70
00:05:01,100 --> 00:05:04,710
them or join them on the same key column that they share.

71
00:05:04,730 --> 00:05:09,440
So the logic here is when you're easily Peetie that merge instead of just gluing the data frames together

72
00:05:09,590 --> 00:05:12,710
you're going to see where the values match up on columns.

73
00:05:12,710 --> 00:05:18,080
In this case the key column and then create the rows using that key column.

74
00:05:18,080 --> 00:05:21,350
Let me go in and show you a couple of more complicated examples.

75
00:05:21,350 --> 00:05:29,360
Here I have left and right data frames and will notice here that they have two keys he one and key two

76
00:05:30,360 --> 00:05:35,280
otherwise they're exactly the same as the left and right we just saw earlier you can use PD that merge

77
00:05:35,490 --> 00:05:40,770
just pass in the first data frame and the second data frame and then you can specify on and you can

78
00:05:40,770 --> 00:05:48,150
pass in a list of keys if you want to actually merge on multiple keys such as key one or key to.

79
00:05:48,330 --> 00:05:53,120
And here are some more examples using merge outer or merge.

80
00:05:53,160 --> 00:05:59,310
Right now if you're not familiar of sequel syntax such as inner outer right or left joins don't worry

81
00:05:59,310 --> 00:06:00,120
about this too much.

82
00:06:00,120 --> 00:06:04,380
We don't actually use these in the course we will always default to something that looks like this in

83
00:06:04,380 --> 00:06:07,600
the course we just use an inner join.

84
00:06:07,650 --> 00:06:12,150
However if you find yourself trying to do the sort of sequel merging and you're already familiar of

85
00:06:12,150 --> 00:06:15,300
SQL syntax just know that pandas has this.

86
00:06:15,300 --> 00:06:17,980
How operator are parameter for you to use.

87
00:06:18,000 --> 00:06:23,700
In case you want the extra functionality but basically depending if you're using outer writes inner

88
00:06:23,700 --> 00:06:30,090
etc. You may find that you have some missing values so keep that in mind as you're working with PD that

89
00:06:30,090 --> 00:06:31,370
merge.

90
00:06:31,380 --> 00:06:33,960
Here's an example of left.

91
00:06:34,150 --> 00:06:39,520
And finally we have arrived at joining joining is a convenient method for combining the columns of two

92
00:06:39,520 --> 00:06:43,610
potentially differently index data frames into a single resulting data frame.

93
00:06:43,830 --> 00:06:48,280
You can essentially think of this as the same thing as merge except the keys you want to join on are

94
00:06:48,280 --> 00:06:51,150
actually on your index instead of a column.

95
00:06:51,160 --> 00:06:54,070
So here I've created two data frames left and right.

96
00:06:54,070 --> 00:07:00,030
Notice they have columns AB and then CD and then the index is actually the keys are going to join them

97
00:07:00,840 --> 00:07:07,000
and the syntax you can use is say left join right in will automatically do an inner join between the

98
00:07:07,000 --> 00:07:08,440
left and the right.

99
00:07:08,500 --> 00:07:14,330
Based off of the index keys if you wanted to merge these two data frames based off of one of their columns

100
00:07:14,330 --> 00:07:19,670
you'd have to use merge but the join method functionality comes off of one of the data frames.

101
00:07:19,670 --> 00:07:23,280
You say that join and then pass on the other data frame and just like merge.

102
00:07:23,300 --> 00:07:27,370
You can specify how such as inner left outer etc..

103
00:07:27,460 --> 00:07:31,910
And remember this only for and sequel users who are already familiar with that terminology.

104
00:07:31,910 --> 00:07:34,530
If you're unfamiliar with that don't worry about it too much.

105
00:07:34,820 --> 00:07:41,180
Let's go ahead and do a quick review of how to join merge into cottony data frames and we'll go over

106
00:07:41,180 --> 00:07:43,700
the key topics you should get out of this lecture.

107
00:07:43,850 --> 00:07:49,250
As far as merging joining and concatenating data frames in order to concatenate or glue data frames

108
00:07:49,250 --> 00:07:51,580
together the process is quite simple.

109
00:07:51,800 --> 00:07:57,410
You just say PD non-cat and you pasand a list of your data frames and then you make sure to specify

110
00:07:57,410 --> 00:08:02,220
the correct axis depending if you want to join them together by the rows or by their columns.

111
00:08:03,360 --> 00:08:09,420
Next you have PD that merge and PD that merge allows you to merge data frames together and you just

112
00:08:09,420 --> 00:08:10,470
passen your first data.

113
00:08:10,590 --> 00:08:15,360
You want to merge and then your second data frame you want to merge and then you say on and you can

114
00:08:15,360 --> 00:08:17,610
Pessin just a single column key.

115
00:08:17,610 --> 00:08:23,020
Or you can pass any list of keys and by default it will merge on inner.

116
00:08:23,070 --> 00:08:27,810
If you're unfamiliar with merging sequel tables don't worry about this how too much just worry about

117
00:08:28,050 --> 00:08:33,960
one data frame on the left one data frame on the right and then on a certain key column are on a list

118
00:08:33,960 --> 00:08:35,010
of key columns.

119
00:08:35,010 --> 00:08:38,690
That's really the only functionality of the merge that we'll be using throughout the course.

120
00:08:40,760 --> 00:08:45,410
And then for joining is a more advanced method for combining columns of two potentially differently

121
00:08:45,410 --> 00:08:46,600
indexed data frames.

122
00:08:46,610 --> 00:08:52,580
It's very similar to merge except the actually joining on the index instead of a column and the syntax

123
00:08:52,580 --> 00:08:57,390
for that is just the name of the Left data frame drawing on the right.

124
00:08:57,590 --> 00:09:02,150
We actually won't be using join throughout the course but I want you to be aware of that and you can

125
00:09:02,150 --> 00:09:06,540
reference this notebook or the documentation in case you ever want to review joining.

126
00:09:06,560 --> 00:09:08,070
All right great job.

127
00:09:08,210 --> 00:09:09,890
Thanks and I'll see you at the next lecture.
