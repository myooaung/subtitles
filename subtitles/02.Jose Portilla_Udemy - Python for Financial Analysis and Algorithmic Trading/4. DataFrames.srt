1
00:00:06,460 --> 00:00:11,200
Welcome back everyone to this first part on data frames and this lecturer will begin learning about

2
00:00:11,200 --> 00:00:14,460
data frames which are built directly on top of the serious object.

3
00:00:14,470 --> 00:00:19,000
We just learned about data frames where we're mainly going to be working with when dealing with financial

4
00:00:19,000 --> 00:00:19,360
data.

5
00:00:19,360 --> 00:00:20,990
So it's important that we really learn.

6
00:00:21,040 --> 00:00:23,180
Well we'll have three parts of this.

7
00:00:23,200 --> 00:00:24,820
So let's get started.

8
00:00:24,820 --> 00:00:25,150
All right.

9
00:00:25,150 --> 00:00:27,490
Here I am at the Jupiter notebook.

10
00:00:27,580 --> 00:00:33,310
I'm going to go ahead and say important piece and then import Panas PD and I'm going to do one last

11
00:00:33,310 --> 00:00:33,920
thing here.

12
00:00:34,000 --> 00:00:41,380
The save from them that random import Rand and and then I'm going to go out and set a seed.

13
00:00:41,490 --> 00:00:45,750
And what a seed means just to make sure that we get the same random numbers.

14
00:00:45,780 --> 00:00:49,490
That way if you're following me you'll see the same random numbers that I see.

15
00:00:49,630 --> 00:00:52,110
You're going to say NPE thought ran them seed.

16
00:00:52,410 --> 00:00:52,680
All right.

17
00:00:52,710 --> 00:01:00,350
Let's go in and explore the different command and the ADF is equal to the data frame.

18
00:01:00,380 --> 00:01:04,700
And you can actually use tab here using Jupiter up to complete this.

19
00:01:04,880 --> 00:01:11,330
And notice that the EFIS capitalize on the new shift to check out the docstring and the initial signature

20
00:01:11,360 --> 00:01:12,890
for this PD data frame.

21
00:01:13,900 --> 00:01:19,960
We have a data arguments and an index argument just like we did for series but then we have this additional

22
00:01:19,960 --> 00:01:21,500
columns arguments.

23
00:01:21,550 --> 00:01:26,260
Let's go ahead and build this up with some random data and we'll see what a data frame actually looks

24
00:01:26,260 --> 00:01:27,130
like.

25
00:01:27,130 --> 00:01:34,990
First I'm going to do is passen that data arguments and I'm just going to call Ranz and 5 comma for

26
00:01:37,080 --> 00:01:40,740
and then the next ones we want to pass is the index in the index.

27
00:01:40,750 --> 00:01:52,350
You can just make that a list of character here I don't go in and say ABC the.

28
00:01:52,440 --> 00:01:57,090
And then finally for the columns I'm going to go ahead and say the x y z.

29
00:01:57,240 --> 00:02:02,270
So I'll say W X Y.

30
00:02:03,120 --> 00:02:09,480
Z going to go ahead and run this and then passen the data from just the split and then we get a nice

31
00:02:09,480 --> 00:02:10,140
display.

32
00:02:10,170 --> 00:02:15,660
And this probably looks and feels a lot like Excel trees and a Jupiter notebook and that's good.

33
00:02:15,660 --> 00:02:21,180
If you're using another ID editor you may not get such a nice crisp display but you should get a printed

34
00:02:21,180 --> 00:02:24,740
output that looks similar to this.

35
00:02:24,760 --> 00:02:25,140
All right.

36
00:02:25,240 --> 00:02:34,230
So basically what we have here is a list of columns w x y z and corresponding rows ABC the E.

37
00:02:34,270 --> 00:02:38,360
Now each of these columns is actually just a panel series.

38
00:02:38,380 --> 00:02:44,310
So W as it panned the series has all x y and z and they all share a common index.

39
00:02:44,350 --> 00:02:49,470
And that's basically all data frame is it's just a bunch of series that share an index.

40
00:02:49,480 --> 00:02:54,910
Let's go ahead and show how we can use indexing and selection to actually grab one of these series objects

41
00:02:55,180 --> 00:03:02,400
or several of these columns out one way and the main way to do this is by saying DMF and then using

42
00:03:02,460 --> 00:03:06,080
Rackett notation and then passing the column name.

43
00:03:06,160 --> 00:03:08,690
This case is go ahead and grab the W column.

44
00:03:08,730 --> 00:03:11,130
So as a string of passen W..

45
00:03:11,580 --> 00:03:13,380
And this returns the W column.

46
00:03:13,440 --> 00:03:15,290
And now take a look at the output.

47
00:03:15,300 --> 00:03:17,580
Now this actually looks like a series.

48
00:03:17,730 --> 00:03:20,100
And that's because that's exactly what W column is.

49
00:03:20,100 --> 00:03:26,160
It's just a series and you can actually confirm this by saying type of d f of W..

50
00:03:27,450 --> 00:03:30,780
And it shows that it's Panas that core that series that series.

51
00:03:31,000 --> 00:03:37,330
If I just say type on the DFA object itself I will get a data frame out.

52
00:03:37,390 --> 00:03:43,720
So again just to reiterate that fact that a frame is just a bunch of series that share the same index.

53
00:03:43,720 --> 00:03:48,400
Now there's two different ways you can grab a column from a data rate.

54
00:03:48,430 --> 00:03:52,910
The main way and the way should always do it is using the sort of bracket notation and then passing

55
00:03:52,930 --> 00:03:53,880
the column name.

56
00:03:54,220 --> 00:03:59,770
However if you're really familiar of sequel a lot of times you're selecting a column you pass in a table

57
00:04:00,220 --> 00:04:01,600
and then the column name.

58
00:04:01,660 --> 00:04:07,260
This actually also works for pantless you could say dot and then the column name.

59
00:04:07,550 --> 00:04:13,120
However I would recommend that you don't use this because it may get confused with the various methods

60
00:04:13,120 --> 00:04:14,990
that are available off of the data front.

61
00:04:15,040 --> 00:04:21,360
For instance if I say DFA and then click tab I see a whole bunch of methods available for me.

62
00:04:21,600 --> 00:04:25,410
And those are a bunch of methods that we're going to learn about as we learn more about pandas.

63
00:04:25,680 --> 00:04:30,400
But what may happen is that one of these methods gets overwritten by a colony.

64
00:04:30,480 --> 00:04:35,300
And then panda is going to get confused whether you're asking for a method or an actual collimate.

65
00:04:35,550 --> 00:04:42,370
So you should do to avoid that it's always use a sort of bracket notation when requesting a column OK

66
00:04:42,630 --> 00:04:47,750
if you want multiple columns back then you can go ahead and pasan a list of columns.

67
00:04:47,940 --> 00:04:52,920
So know that I pass in my brackets and then I'm going to pass on a list of column names which is going

68
00:04:52,920 --> 00:04:55,140
to result in another set of brackets here.

69
00:04:55,320 --> 00:04:58,440
For instance I want to columns W and Z.

70
00:05:00,030 --> 00:05:08,480
I pass on a list here highlighted WNC and I get back a data frame containing those two series.

71
00:05:08,630 --> 00:05:13,730
And that means when I asked for multiple columns I'm actually getting back a data frame by ask for just

72
00:05:13,730 --> 00:05:18,470
a single column that I will get back a series and in the Jupiter notebook system that's the noted.

73
00:05:18,470 --> 00:05:21,830
By the way the output is displayed OK.

74
00:05:22,000 --> 00:05:25,130
Let's go ahead and move on to creating a new column.

75
00:05:25,810 --> 00:05:33,070
Palla's supports creation of new columns by just specifying the column as if it already exists for instance

76
00:05:33,130 --> 00:05:34,230
new.

77
00:05:34,270 --> 00:05:37,700
Now if I run this I'll get an error and it's a key error.

78
00:05:37,750 --> 00:05:39,000
Scroll all the way down here.

79
00:05:39,090 --> 00:05:39,940
Say here.

80
00:05:39,970 --> 00:05:45,640
New and it basically just trying to tell you that it can't find it that there is no key new there.

81
00:05:45,680 --> 00:05:53,770
However when you're creating a hash tag that out and put this back in when you're creating a new column

82
00:05:54,340 --> 00:05:59,380
you can actually define it as if it already exists and then on the right hand side of the equal sign

83
00:05:59,950 --> 00:06:06,210
use other columns with arithmetic in order to pull off a new column.

84
00:06:06,450 --> 00:06:13,150
For instance you can say if new column as if it already exists is equal to DFW plus f y.

85
00:06:13,290 --> 00:06:14,980
And this will run with no error.

86
00:06:15,030 --> 00:06:22,080
And now if I check out DMF that new column is actually in place there and for removing columns you can

87
00:06:22,080 --> 00:06:31,120
say the drop you can say DFA drop and pass in the actual column name you want to drop.

88
00:06:31,130 --> 00:06:34,480
Now if you just do this by itself you'll get an error.

89
00:06:34,640 --> 00:06:36,850
And let's go in and check out what that air is.

90
00:06:36,910 --> 00:06:38,300
Say value error.

91
00:06:38,390 --> 00:06:46,430
If we scroll down it says labels new not contained in Access and if I click shift tab on the drop method.

92
00:06:46,590 --> 00:06:53,460
Notice that by default it says access is equal to zero access equal to zero for the drop method refers

93
00:06:53,460 --> 00:06:55,600
to the index.

94
00:06:55,620 --> 00:07:04,140
If I actually want to refer to the columns I need to specify access is equal to 1 and then it will drop

95
00:07:04,800 --> 00:07:07,970
that new column here.

96
00:07:07,970 --> 00:07:11,240
Now there's two things to note when using this drop.

97
00:07:11,660 --> 00:07:16,100
The first thing to know is that this doesn't happen in place meaning I'm not actually affecting the

98
00:07:16,100 --> 00:07:21,420
state of frame unless I specifically specify this to occur in place.

99
00:07:21,590 --> 00:07:23,420
I want to show you what I mean by that.

100
00:07:23,700 --> 00:07:31,520
I'd call it a slight defect drop new access equal to 1 if I called DSF I'll see that I still have that

101
00:07:31,520 --> 00:07:32,840
new column.

102
00:07:33,050 --> 00:07:39,470
That means I need to actually specify as an argument to shift have to show it the in-place argument.

103
00:07:39,740 --> 00:07:45,870
In many many Panas methods all require this in place arguments to be set to true.

104
00:07:46,100 --> 00:07:51,590
And the reason Pancho's does that is that for you not to accidentally lose information in case you've

105
00:07:51,590 --> 00:07:56,960
done a bunch of adjustments to your data you don't want to accidentally lose it.

106
00:07:56,960 --> 00:08:03,200
So Pandurs requires you to say in-place equals true if actually a lot of these changes to stay and occur

107
00:08:03,380 --> 00:08:04,530
in place.

108
00:08:04,530 --> 00:08:10,910
And now if I call DFI running the cell notice that new column is now permanently removed because it

109
00:08:10,910 --> 00:08:18,850
occurred in place and something to note here is that we can also use the drop to drop rows.

110
00:08:18,960 --> 00:08:29,390
For instance let's go in and use this sitrep the Ebro I'll say Dhia got drop I pass an E and I can also

111
00:08:29,390 --> 00:08:31,440
say access is equal to zero.

112
00:08:31,440 --> 00:08:33,920
Now remember you actually don't have to add that in as an argument.

113
00:08:33,980 --> 00:08:35,890
That's the default.

114
00:08:35,930 --> 00:08:44,060
So let's go and just say the drop E and there we've been able to drop the e since Access is equal to

115
00:08:44,060 --> 00:08:46,960
zero and it works either way I could say X equals zero.

116
00:08:47,180 --> 00:08:51,260
And this will work again and note here I'm not doing this in place.

117
00:08:51,460 --> 00:08:51,920
OK.

118
00:08:52,130 --> 00:08:56,960
Sometimes a point of confusion is why are the rows zero as far as their access.

119
00:08:56,970 --> 00:09:03,710
And why are the columns one of the reference actually comes back to pie says Data frames are essentially

120
00:09:03,710 --> 00:09:10,100
just fancy index markers on top of a pipe or a to show this.

121
00:09:10,180 --> 00:09:17,790
I can say DFI thought shape just like we did of a pipe matrix and know if that shape is a tuple or two

122
00:09:17,810 --> 00:09:23,000
that missional matrix here and at the zero index are the number of rows.

123
00:09:23,010 --> 00:09:27,940
So if I say ZF here I have five rows a b c and d e.

124
00:09:28,480 --> 00:09:36,400
And then on the index one I have four columns W X Y Z which is why rows are referred to as the zero

125
00:09:36,400 --> 00:09:43,720
axis and columns are referred to as the one axis because it's directly taken from the shape just as

126
00:09:43,720 --> 00:09:45,670
you would have a pie array.

127
00:09:46,130 --> 00:09:46,990
OK.

128
00:09:47,020 --> 00:09:49,420
Now let's talk about selecting rows.

129
00:09:49,420 --> 00:09:54,970
We've talked about selecting columns which you just do by saying DFA and in brackets you passen the

130
00:09:54,970 --> 00:09:55,940
column name.

131
00:09:56,380 --> 00:10:04,210
Or if you want many columns you pasan a list of the column names such as Z and then comma X then it

132
00:10:04,210 --> 00:10:05,560
close off that bracket.

133
00:10:05,560 --> 00:10:10,590
So I'm passing a list of column names and I return a data frame of those columns.

134
00:10:10,630 --> 00:10:15,610
Let's talk about selecting rows when I take a look at my data frame again.

135
00:10:16,850 --> 00:10:17,770
Here's my data frame.

136
00:10:17,790 --> 00:10:21,430
ABC is my rose WXYZ are the columns.

137
00:10:21,530 --> 00:10:25,860
There's two ways to select rows in a data frame.

138
00:10:26,840 --> 00:10:30,020
And you have to call a method off of this and there's two methods to use.

139
00:10:30,020 --> 00:10:34,620
One is Loek ellos see for location.

140
00:10:34,830 --> 00:10:36,710
And this is going to take a label.

141
00:10:36,810 --> 00:10:41,670
So you can also do shift tab here to see this property and something to note here.

142
00:10:41,700 --> 00:10:47,670
I'm using square brackets which is a little weird but that's the way it works with panderers you Pessin

143
00:10:47,940 --> 00:10:48,810
LRC.

144
00:10:48,930 --> 00:10:55,630
And then you person in brackets the row you want for instance if one of the Ayro I just passen ELO C

145
00:10:55,830 --> 00:11:00,940
or passes the label of the index and this returns note a series.

146
00:11:01,290 --> 00:11:07,410
And this comes to our second conclusion that not only are all the columns series but the rows are series

147
00:11:07,410 --> 00:11:07,970
as well.

148
00:11:08,040 --> 00:11:14,420
As far as the way they're going to get returns when you request them in pantless Let's discuss the second

149
00:11:14,420 --> 00:11:18,330
way to grab a row which is based off of next position.

150
00:11:19,610 --> 00:11:20,800
I can use día.

151
00:11:20,960 --> 00:11:24,820
I Loek to actually pasan a numerical index position.

152
00:11:25,010 --> 00:11:33,530
Even if my axes are labeled by strings for instance if I want see that row I can do that two ways I

153
00:11:33,530 --> 00:11:42,830
could either say ELO see for location and in brackets pass the row name which is C or I can say I O

154
00:11:42,830 --> 00:11:46,770
C which is index space location and count index.

155
00:11:46,820 --> 00:11:54,760
So 0 1 2 and then on I Alosi pass and 2 and this also returns that row.

156
00:11:54,920 --> 00:12:00,380
And that basically means you have two ways of selecting rows using EHLO see if you want the location

157
00:12:00,380 --> 00:12:07,670
or labeled based index or I EHLO see if you want the numerical based index OK.

158
00:12:07,690 --> 00:12:13,000
Let's talk about selecting subsets of rows and columns and this will actually be very familiar to you

159
00:12:13,120 --> 00:12:15,980
since we just learned about pi.

160
00:12:16,360 --> 00:12:24,650
We can say DFI thought Alosi if you want to select a subset of rows and columns we can pass in just

161
00:12:24,650 --> 00:12:28,390
like we did with Num. Pi using common notation.

162
00:12:28,520 --> 00:12:31,560
The row we want and then the column was.

163
00:12:31,700 --> 00:12:37,140
So I want the Ghali Robie column Y.

164
00:12:37,310 --> 00:12:39,650
And this returns just a single value there.

165
00:12:39,680 --> 00:12:46,340
So if I take a look at my DFA again looking at ráby column y I have this negative 0.8 for they get the

166
00:12:46,340 --> 00:12:47,740
same result here.

167
00:12:47,750 --> 00:12:56,240
So just like pi you can use this row comma column notation and if you want a subset of this can say

168
00:12:56,390 --> 00:13:02,030
Dhia ELO C and then pasan a list separated by commas.

169
00:13:02,090 --> 00:13:10,310
For instance let's say one of the subset of A B rows with the W Y columns so basically I wanted this

170
00:13:10,680 --> 00:13:16,710
2.7 0.9 and 0.6 5 and negatives are twenty four.

171
00:13:16,820 --> 00:13:21,770
That means I can just pass in a list of the rows I want which in this case is a and b

172
00:13:24,840 --> 00:13:34,550
and then I can pass in a list of the columns I want in this case that's w and y shift enter that and

173
00:13:34,560 --> 00:13:37,060
they get the subset return of the data frame.

174
00:13:38,000 --> 00:13:41,650
OK we're going to stop here for now and continue this discussion.

175
00:13:41,660 --> 00:13:48,080
In part two of the data frame's lecture and this is all in the notebook called Data frames under the

176
00:13:48,080 --> 00:13:49,820
panda's folder.

177
00:13:49,820 --> 00:13:51,910
Let's get a quick review of what we've learned.

178
00:13:53,230 --> 00:14:00,040
As far as creating a data frame you just need to say PD data frame passing your data passen your index

179
00:14:00,130 --> 00:14:02,030
and then pass in your column names.

180
00:14:02,050 --> 00:14:04,260
Usually we won't be building data Frayne's by hand.

181
00:14:04,260 --> 00:14:09,310
This manner will actually be reading data from some sort of source like a CSP file but we learn how

182
00:14:09,310 --> 00:14:11,400
to do data input and output later.

183
00:14:11,400 --> 00:14:14,360
For now if you want to mainly created data frame that you can do it.

184
00:14:15,250 --> 00:14:21,340
Then for selecting columns from a data frame you can say DMF and then in brackets pass pass in the column

185
00:14:21,340 --> 00:14:24,590
you want or pass in a list of the columns you want.

186
00:14:24,660 --> 00:14:28,930
Remember that each column is actually just a series.

187
00:14:29,020 --> 00:14:34,420
You can create new columns based off of old calls by using this sort of arithmetic.

188
00:14:34,580 --> 00:14:39,040
Then you can drop columns or rows using DFA dropped.

189
00:14:39,140 --> 00:14:43,840
Remember you don't need to have say in-place equals true if you want the effect to be permanent.

190
00:14:43,910 --> 00:14:48,000
You say access one for columns and then access 0 for rows.

191
00:14:48,110 --> 00:14:57,580
And again that comes from this shape tuple 0 index was rows 1 index was columns as far as selecting

192
00:14:57,580 --> 00:14:59,470
rows from a data frame.

193
00:14:59,480 --> 00:15:00,660
There's two methods here.

194
00:15:00,730 --> 00:15:09,280
There is Alosi method which is a label based index location or there's that i Alosi which is the integer

195
00:15:09,280 --> 00:15:12,360
based index location.

196
00:15:12,560 --> 00:15:18,650
And then if you want to select subsets of the data frame you can use see and passen either values or

197
00:15:18,650 --> 00:15:23,180
complete lists to return subsets of the data free OK.

198
00:15:23,270 --> 00:15:25,430
That's it for the very basics that data frames.

199
00:15:25,550 --> 00:15:26,900
Coming up next round of this.

200
00:15:26,930 --> 00:15:32,060
Even more of what you can do if upin the state of frame such as using conditional selection.

201
00:15:32,060 --> 00:15:33,700
All right thanks everyone.

202
00:15:33,700 --> 00:15:34,670
I'll see you at the next lecture.
