
00:00:06,020 --> 00:00:07,260
Welcome back everyone to Perth.

2
00:00:07,280 --> 00:00:09,570
Three of the data framed series of lectures.

3
00:00:09,640 --> 00:00:14,350
This is where we're going to kind of wrap it all up and finish off our discussion of pandas data frames.

4
00:00:14,360 --> 00:00:16,270
Let's hop over that Jupiter notebook.

5
00:00:16,580 --> 00:00:16,970
All right.

6
00:00:16,970 --> 00:00:19,070
Here I am at the Jupiter notebook.

7
00:00:19,160 --> 00:00:24,950
What I'm going to go ahead and do is copy and paste some lines of code that are available for you in

8
00:00:24,950 --> 00:00:27,310
your notebook called Data frames.

9
00:00:27,440 --> 00:00:32,450
If you scroll down and see you get to the multa index and index higher key section you'll see these

10
00:00:32,450 --> 00:00:33,870
four lines of code.

11
00:00:33,890 --> 00:00:37,600
These are the four lines of code are going to use to actually build this data frame.

12
00:00:37,910 --> 00:00:39,950
We can go ahead and check this out.

13
00:00:39,950 --> 00:00:45,030
We'll say outside and that's just the list.

14
00:00:45,070 --> 00:00:52,570
So we have three or six items in this list of two different types G1 G1 G1 and then G-2 DTG two we have

15
00:00:52,600 --> 00:00:57,430
inside which is 1 2 3 1 2 3.

16
00:00:57,580 --> 00:01:06,030
And then we went ahead and did was using the zip function along with the list function is we said higher

17
00:01:06,030 --> 00:01:14,020
index we went ahead and used zip and LIST on this in order to make this into a list of tuple pairs G

18
00:01:14,060 --> 00:01:19,360
1 1 1 2 1 3 2 1 2 2 2 3.

19
00:01:19,590 --> 00:01:24,640
And then I passed it into a special function from panderers and we were actually won't be working with

20
00:01:24,660 --> 00:01:31,520
this function at all throughout the course but this is just for a customization of making a data frame.

21
00:01:31,530 --> 00:01:34,550
So don't worry too much about it but I just want you to be aware of it.

22
00:01:34,560 --> 00:01:39,410
It's PD that multi-band index from tuples and it can basically take in a list that looks like this and

23
00:01:39,420 --> 00:01:41,730
create a multi index from it.

24
00:01:41,730 --> 00:01:46,450
So after you're done with that you'll get this multi index with several levels.

25
00:01:46,450 --> 00:01:51,480
Do you want me to add one level one to three as another level and then labels and will go and explain

26
00:01:51,480 --> 00:01:54,140
what all that means as we create this data frame.

27
00:01:54,270 --> 00:01:58,970
But for now you can just feel free to copy and paste this code directly from the notebook.

28
00:01:59,070 --> 00:02:06,900
Since it's not important as far as creating that data frame from scratch we'll go in and say PD data

29
00:02:06,900 --> 00:02:13,350
frame passen randn 6 Com 2.

30
00:02:13,500 --> 00:02:21,060
So we have six rows by two columns and then I'm going to set the index to be the higher index object

31
00:02:21,060 --> 00:02:26,600
we just made and then I will set the columns to be a list a and b.

32
00:02:28,780 --> 00:02:29,260
All right.

33
00:02:29,320 --> 00:02:33,610
And you can feel free to copy and paste all this code from The Notebook because it's not that important.

34
00:02:33,610 --> 00:02:38,220
This is just for actually constructing a multi index level data frame.

35
00:02:38,270 --> 00:02:40,450
Let me show you what I mean by that here.

36
00:02:40,540 --> 00:02:44,710
If I actually show the data frame I can see that it has two levels of an index.

37
00:02:44,710 --> 00:02:46,910
It has this Jiwon and G-2 level.

38
00:02:47,020 --> 00:02:52,300
And then this sub or insight level one two three one two three and then two columns.

39
00:02:52,300 --> 00:02:56,760
And this is what a data frame looks like when it has multi-levels of an index.

40
00:02:56,770 --> 00:02:59,410
Otherwise known as an index higher key.

41
00:02:59,440 --> 00:03:05,620
Let's go ahead and show how we can actually call data from a multilevel index for this index hierarchy

42
00:03:05,620 --> 00:03:13,980
where we can go ahead and do is say if thought EHLO see and then we can go ahead and using Brecken notation

43
00:03:14,520 --> 00:03:17,210
GRABBE from the very outside index.

44
00:03:17,220 --> 00:03:24,150
For instance if I want everything that's under G 1 I can just passen she one and I get that little sub

45
00:03:24,150 --> 00:03:31,320
data frame in return which is basically the first three rows for those two columns and then I can continue

46
00:03:31,410 --> 00:03:41,420
indexing off of this such as I'll go see or ellos see either one is fine and then passing in number

47
00:03:41,690 --> 00:03:45,920
and that will actually then return these two items here as a series.

48
00:03:45,920 --> 00:03:53,760
So the basic idea is you call from the outside index and continue calling inside deeper.

49
00:03:53,980 --> 00:03:57,680
If you actually want to name these index names.

50
00:03:57,720 --> 00:03:59,320
So right now they are unnamed.

51
00:03:59,320 --> 00:04:04,460
That's notified about the fact that there's no name in these two cells which can go out into say Death

52
00:04:04,920 --> 00:04:05,970
Index.

53
00:04:06,030 --> 00:04:11,220
Names do shift enter and you should get a frozen list that's none none.

54
00:04:11,220 --> 00:04:14,620
And this is just the pandas index names object types.

55
00:04:14,700 --> 00:04:20,820
All it's saying here is that these indices don't have any names but you can go ahead and do say equals

56
00:04:22,230 --> 00:04:24,440
and then passed in a list of names.

57
00:04:24,570 --> 00:04:29,970
For instance let's go out and call this outside index groups because it's first G.

58
00:04:30,360 --> 00:04:34,890
And then we'll call the insight index and you m for numbers.

59
00:04:34,890 --> 00:04:43,050
And now when I call my data frame we have groups as a labeled index on the outside and numb as a label

60
00:04:43,050 --> 00:04:44,640
index on the inside.

61
00:04:44,880 --> 00:04:47,150
And this could have as many layers as you want.

62
00:04:47,460 --> 00:04:52,800
Hopefully you can begin to see how this would be useful for multilevel index information that you want

63
00:04:52,800 --> 00:04:54,440
to use along of a data frame.

64
00:04:55,360 --> 00:05:00,290
Let's go ahead and show you how we can grab information off of this one more time.

65
00:05:00,370 --> 00:05:02,890
Imagine you wanted to grab this value right here.

66
00:05:02,890 --> 00:05:06,190
0.07 to the one I have highlighted.

67
00:05:06,430 --> 00:05:12,500
Well that's under G-2 number two column B.

68
00:05:12,520 --> 00:05:14,830
Let's start from the outside and work our way in.

69
00:05:15,830 --> 00:05:26,860
We'll go ahead and specify that we want to see get to that returns the state of frame.

70
00:05:26,860 --> 00:05:28,810
Again we're looking for this value here.

71
00:05:28,840 --> 00:05:38,330
So let's go ahead and do one more index and we can go ahead and call here to.

72
00:05:38,550 --> 00:05:41,940
And then we have under column B or index B.

73
00:05:41,940 --> 00:05:45,090
Excuse me for the serious 0.07.

74
00:05:45,090 --> 00:05:50,940
So then finally we just call B at the end and that's how we can grab all the way from the outside the

75
00:05:50,940 --> 00:05:53,480
inside this particular value.

76
00:05:53,590 --> 00:05:56,130
What you should do now is pause the video.

77
00:05:56,130 --> 00:06:02,400
Select another value and see if you can successfully index it and return it back ok.

78
00:06:02,560 --> 00:06:03,970
Hopefully you're able to do that.

79
00:06:04,180 --> 00:06:09,790
Let's go ahead and show you one last very useful function called cross section and it's going to be

80
00:06:09,880 --> 00:06:17,950
X X so this returns a cross-section of rows or columns from a series of data frame and you're going

81
00:06:17,950 --> 00:06:21,200
to use this when you have a multilevel index.

82
00:06:22,070 --> 00:06:25,600
So again our data frame looks like this.

83
00:06:25,610 --> 00:06:31,500
Let's say we wanted to grab everything that was under G Jiwon I could do what I just showed you EHLO

84
00:06:31,520 --> 00:06:37,900
see Jiwon and that returns the data from energy one.

85
00:06:37,960 --> 00:06:44,680
But another option for a multilevel index is using this X as this cross section and then passing in

86
00:06:45,960 --> 00:06:48,080
Jiwon also has a string.

87
00:06:48,230 --> 00:06:56,150
But what's nice about this cross section is it has the ability to skip or go inside a multilevel index.

88
00:06:56,150 --> 00:07:04,310
For example let's say I have this data frame here and I want to grab all values of number equal to one

89
00:07:04,730 --> 00:07:05,920
with both groups in it.

90
00:07:05,960 --> 00:07:11,350
Meaning I want what I highlighted here 1 and then 0.3 1.6 9.

91
00:07:11,540 --> 00:07:16,420
But also I want to disvalue 0.26 0.1 8.

92
00:07:16,460 --> 00:07:21,250
So I want all values were numb that inside index is equal to 1.

93
00:07:21,370 --> 00:07:28,580
This sort of indexing is tricky for something like ellos see methods but it's not so bad with the X

94
00:07:28,670 --> 00:07:35,870
s or cross section method which you end up doing is specifying what you want.

95
00:07:36,040 --> 00:07:38,030
As far as not equal to one.

96
00:07:38,080 --> 00:07:44,270
And then you have to indicate as I said the arguments level and then pass in the name of the index.

97
00:07:44,410 --> 00:07:48,130
In this case the name of the index is numb.

98
00:07:48,160 --> 00:07:55,570
So essentially this allows us to grab a cross section where level equals numb is equal to 1 and that's

99
00:07:55,570 --> 00:08:02,300
who you're mainly going to be using this cross section and now we see both groups where level num happens

100
00:08:02,300 --> 00:08:03,470
to be equal to 1.

101
00:08:03,530 --> 00:08:07,290
And that's sort of different gets returned OK.

102
00:08:07,740 --> 00:08:11,510
Don't worry too much since this is pretty advanced usage of pandas.

103
00:08:11,520 --> 00:08:17,760
I just want you to be aware of it later on as we learn more about data visualization and you start reaching

104
00:08:17,760 --> 00:08:18,160
your data.

105
00:08:18,160 --> 00:08:24,700
Capstone projects we'll revisit this cross section method to actually grab stock index data.

106
00:08:25,110 --> 00:08:29,820
But for now I want you to be aware of it but don't worry as far as being tested on it because it's more

107
00:08:29,820 --> 00:08:34,050
advanced usage and you won't see this sort of stuff very often throughout the course.

108
00:08:34,050 --> 00:08:38,880
In fact it really only shows up once in one of the more advanced data capstone projects and there's

109
00:08:38,880 --> 00:08:41,940
an explanation of how to use cross section again.

110
00:08:41,940 --> 00:08:45,610
So we'll go on and give you a refresher before you see this topic again.

111
00:08:45,630 --> 00:08:51,970
For now this was more just an advanced overview of multi index topics and index higher topics.

112
00:08:52,110 --> 00:08:57,210
Mainly what you're going to want to do is index from the outside in step by step to get the data you

113
00:08:57,210 --> 00:08:58,120
want out.

114
00:08:58,510 --> 00:09:01,570
OK thanks everyone and I'll see you at the next lecture.
