1
00:00:05,570 --> 00:00:10,370
Welcome everyone to the numpad exercises lecture and this lecture we're just going to be going through

2
00:00:10,370 --> 00:00:13,010
the notebook and explaining the exercises.

3
00:00:13,190 --> 00:00:17,090
Let's hop over to non-pay folder and show you how you can find the notebook and go through it.

4
00:00:17,430 --> 00:00:17,680
OK.

5
00:00:17,690 --> 00:00:21,920
Under the Python for finance repo you can see here there's the pie folder.

6
00:00:21,920 --> 00:00:26,420
Here are the three notebooks so we just went through arrays indexing selection and operations.

7
00:00:26,420 --> 00:00:30,710
And then you have the exercises and the exercise solutions will be going through solutions in the next

8
00:00:30,710 --> 00:00:31,620
lecture video.

9
00:00:31,760 --> 00:00:34,420
But let's hit the non-pay exercises notebook for now.

10
00:00:34,700 --> 00:00:36,660
And here we see some non-pay exercises.

11
00:00:36,680 --> 00:00:39,300
And there's one important note that I want you to be aware of.

12
00:00:39,320 --> 00:00:44,180
Make sure you don't run the cells that are directly above an example output shown otherwise you'll end

13
00:00:44,180 --> 00:00:47,400
up writing over the example output and I'll show you what I mean in just a second.

14
00:00:47,420 --> 00:00:51,920
But basically what I wanted to do is you'll see some tasks in bold and you need to do it.

15
00:00:51,920 --> 00:00:55,020
So for the first one we'll show you important umpires and P.

16
00:00:55,030 --> 00:00:56,130
That's quite simple.

17
00:00:56,130 --> 00:01:01,200
All you say is important umpires and we run the cell and that's the answer to the first one.

18
00:01:01,280 --> 00:01:03,380
The next one is create an array of zeros.

19
00:01:03,380 --> 00:01:08,060
So what I mean by making sure you don't run the cells directly above the example output as you can see

20
00:01:08,060 --> 00:01:09,910
the example output you would expect.

21
00:01:10,070 --> 00:01:12,470
What you shouldnt do is code in the cell.

22
00:01:12,470 --> 00:01:14,920
Otherwise when you run it your output may be different.

23
00:01:14,930 --> 00:01:23,860
So you should say code here and then when you run the output such as Prince high you don't end up overwriting

24
00:01:23,860 --> 00:01:24,620
this array.

25
00:01:24,730 --> 00:01:28,360
So you can see there's a little extra cell in all these questions to say code here.

26
00:01:28,420 --> 00:01:31,170
So you don't actually end up writing over these arrays.

27
00:01:31,330 --> 00:01:36,760
So the first couple of questions are just creating arrays here I want you to create this array create

28
00:01:36,760 --> 00:01:40,760
the Saray create a three by three Matrix three by three Matrix.

29
00:01:40,960 --> 00:01:45,580
Now apply generating random numbers generating random numbers from a standard normal distribution.

30
00:01:45,580 --> 00:01:48,880
I want you to create this following matrix see if you can figure that out.

31
00:01:49,030 --> 00:01:55,450
Then more and matrices and finally you'll be non-pay indexing and selection where you have this matrix

32
00:01:55,480 --> 00:01:59,730
given to you of the numbers 1 through 25 it's a 5 by 5 matrix.

33
00:01:59,890 --> 00:02:03,910
And what I want you to do is write code that reproduces these arrays here.

34
00:02:03,910 --> 00:02:08,050
Now remember you don't want to actually write the code in this array otherwise you'll overwrite this.

35
00:02:08,050 --> 00:02:11,300
So instead write the code in this comment to write.

36
00:02:11,620 --> 00:02:16,200
So you want to select an stuff from that matrix array.

37
00:02:16,250 --> 00:02:17,880
OK so you'll do the following tasks.

38
00:02:17,890 --> 00:02:22,390
And then you also get the sum of all the values that matrix the stand deviation of all the values in

39
00:02:22,390 --> 00:02:26,980
the matrix and the sum of all the columns in the matrix and then this question right here it says get

40
00:02:26,980 --> 00:02:28,920
the sum of all the columns in math.

41
00:02:28,960 --> 00:02:32,610
That is the matrix So remember Matrix is a two dimensional matrix.

42
00:02:32,610 --> 00:02:38,150
So if you come up here and see this code again this is the code that actually produces the matrix.

43
00:02:38,170 --> 00:02:44,720
If you come down here and put this code in then you sell and check out what matrix looks like.

44
00:02:44,800 --> 00:02:49,570
What I want you to do is figure out how can you take the sum of all the columns so you can see here

45
00:02:49,780 --> 00:02:51,790
that the sum of the first column is 55.

46
00:02:51,820 --> 00:02:56,390
Sum of All the elements in the next column is 60 65 70 75 etc..

47
00:02:56,590 --> 00:02:59,220
Now we haven't actually shown you how to do that directly.

48
00:02:59,380 --> 00:03:02,350
Well we have shown you as Matt that some.

49
00:03:02,470 --> 00:03:06,830
And what I want you to do is explore how you can use this access argument.

50
00:03:06,910 --> 00:03:11,420
If you get stuck on this just hop over to the solutions lecture will fully explain it there.

51
00:03:11,560 --> 00:03:13,690
But this kind of left is something for you to discover.

52
00:03:13,720 --> 00:03:18,760
Do you have the ability to go into the docstring and understand how to use this access argument and

53
00:03:18,760 --> 00:03:23,760
as a hint it has to do with the shape of the array see.

54
00:03:23,790 --> 00:03:29,550
Take a look at the shape the letters you get back a tuple which means if you asked for shape of zero

55
00:03:29,820 --> 00:03:31,770
you get back the number of rows.

56
00:03:31,800 --> 00:03:37,320
If you ask for a shape of one you also get back the number of columns so keep that in mind that may

57
00:03:37,320 --> 00:03:38,340
be a useful hint.

58
00:03:38,400 --> 00:03:40,830
The fact that you can use a 0 or 1.

59
00:03:40,830 --> 00:03:46,500
So again when you're calling matrix some there's an X argument here.

60
00:03:46,500 --> 00:03:46,800
All right.

61
00:03:46,840 --> 00:03:49,920
Hope that's a heavy enough hint for you in case you get stuck on it.

62
00:03:49,920 --> 00:03:52,300
Feel free to hop with the solutions lecture.

63
00:03:52,360 --> 00:03:53,550
Is a less of the bonus question.

64
00:03:53,550 --> 00:03:55,740
So we worked a lot of random data with no Pi.

65
00:03:55,740 --> 00:04:00,860
What I want you to do is figure out there's a way that we can ensure we always get the same random numbers.

66
00:04:00,930 --> 00:04:05,070
And there's a little hint here that you can click on that a little google search.

67
00:04:05,070 --> 00:04:05,550
All right.

68
00:04:05,610 --> 00:04:07,860
Best of luck with the exercises in the next lecture.

69
00:04:07,860 --> 00:04:09,200
We'll cut through solutions.

70
00:04:09,240 --> 00:04:09,790
See if they're.
