WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:06.600
Under this video, we will like to sit in the sun authentication mechanism so

00:00:06.600 --> 00:00:08.850
that we will be able to connect from

00:00:08.850 --> 00:00:13.660
the UI application to the backend server written in Spring boot.

00:00:15.830 --> 00:00:26.085
So let's go to our terminal and type in NG, generate surveys.

00:00:26.085 --> 00:00:30.165
And we'll store our newly greater service under services.

00:00:30.165 --> 00:00:34.030
And this will be called authentication.

00:00:38.780 --> 00:00:45.600
You see that a newly created service has been set in place.

00:00:47.860 --> 00:00:52.650
And now under app module ts file,

00:00:56.560 --> 00:01:06.575
we'll need to import the forms module and also the HTTP Client module.

00:01:06.575 --> 00:01:13.859
Since both of these modules will be used as part of this video series.

00:01:16.180 --> 00:01:21.080
And let's also import HTTP Client

00:01:21.080 --> 00:01:28.780
module from

00:01:28.780 --> 00:01:38.030
Angular HTTP corresponding package.

00:01:38.790 --> 00:01:43.510
Now, under our authentication service ds,

00:01:43.510 --> 00:01:46.700
we need to import a bunch of things.

00:01:53.520 --> 00:02:00.050
So the first one will be the HTTP client.

00:02:02.040 --> 00:02:05.510
Http bottoms.

00:02:08.020 --> 00:02:14.660
Http error response will use all of this standard,

00:02:14.660 --> 00:02:23.580
this authentication service to invoke the login method on the springboard server side.

00:02:27.400 --> 00:02:32.210
Also, we will need to catch error and

00:02:32.210 --> 00:02:38.360
the map functionality from

00:02:38.360 --> 00:02:44.730
the parallax HGS operators package.

00:02:53.370 --> 00:02:58.210
And of course, in order to make the request a sync,

00:02:58.210 --> 00:03:01.520
we'll need to use the observable.

00:03:06.360 --> 00:03:09.850
And let's also important,

00:03:09.850 --> 00:03:16.790
don't throw error on the edX JS package.

00:03:19.230 --> 00:03:22.150
Now under the authentication service,

00:03:22.150 --> 00:03:27.100
we should define a method called authenticate that we received the username and

00:03:27.100 --> 00:03:35.240
password as parameters and were returned on observable of any.

00:03:43.590 --> 00:03:48.670
Under this method, will force setup a constant in place called

00:03:48.670 --> 00:03:56.965
body and will create

00:03:56.965 --> 00:04:01.070
object of HTTP bottoms.

00:04:04.650 --> 00:04:08.905
And under this body will set the username

00:04:08.905 --> 00:04:14.210
as the username that we receive as a parameter to this method,

00:04:17.970 --> 00:04:23.660
and also the password as the password.

00:04:30.870 --> 00:04:40.750
Now we need to invoke the HTTP functionality.

00:04:40.750 --> 00:04:48.925
But for this, let's import HTTP client under our constructor.

00:04:48.925 --> 00:04:51.775
Let's inject it actually.

00:04:51.775 --> 00:05:01.165
So private HTTP, HTTP client.

00:05:01.165 --> 00:05:04.450
So now we can properly use it.

00:05:04.450 --> 00:05:10.130
So we'll do a post requests to our backend server.

00:05:11.970 --> 00:05:16.780
But we need to define the specific URL that we need to invoke.

00:05:16.780 --> 00:05:20.755
So for this, let's create the constants class.

00:05:20.755 --> 00:05:24.655
This will be a type script class.

00:05:24.655 --> 00:05:31.610
So let's call it constants that ts under app folder.

00:05:39.420 --> 00:05:44.080
And lower here, Lovell's thing to note this to export

00:05:44.080 --> 00:05:49.615
the class constants so that we can properly use its elements

00:05:49.615 --> 00:05:55.270
inside our application and define those several URL of

00:05:55.270 --> 00:06:04.670
type string that will match the location of our server.

00:06:04.770 --> 00:06:08.635
Please know that we are not using docker at this point,

00:06:08.635 --> 00:06:10.760
just the local host.

00:06:11.970 --> 00:06:16.360
And now let's go back to our authentication service, DSN.

00:06:16.360 --> 00:06:18.490
Important is constants

00:06:18.490 --> 00:06:28.165
class from constants.

00:06:28.165 --> 00:06:29.810
Okay?

00:06:34.080 --> 00:06:41.515
And now we will go with this HTTP post constants, that server URL.

00:06:41.515 --> 00:06:44.050
And if you recall, we need to invoke

00:06:44.050 --> 00:06:51.250
the login URL from our server side in order to do the authentication.

00:06:51.250 --> 00:06:55.550
Send also the body that we just created.

00:06:56.130 --> 00:06:59.410
And as for the response type,

00:06:59.410 --> 00:07:02.510
we will use a text.

00:07:12.780 --> 00:07:17.390
Now we will walk the bipolar operation.

00:07:21.450 --> 00:07:29.050
And also the map so that we will transform the data that we receive.

00:07:29.050 --> 00:07:35.665
So let's set in place the response as a variable.

00:07:35.665 --> 00:07:38.710
And if everything worked well,

00:07:38.710 --> 00:07:41.560
using the lucky no operation,

00:07:41.560 --> 00:07:44.020
we will use the local storage of

00:07:44.020 --> 00:07:51.535
our angular application and set an item or where over here.

00:07:51.535 --> 00:07:55.885
Let's have the key as user.

00:07:55.885 --> 00:07:59.620
And for the value you will use it.

00:07:59.620 --> 00:08:03.235
And for the value we'll use the door.

00:08:03.235 --> 00:08:09.460
That is a method that will encode this as base-64,

00:08:09.460 --> 00:08:13.850
so called Bordeaux username and password.

00:08:17.850 --> 00:08:23.570
And if we end current or any issues,

00:08:24.030 --> 00:08:29.900
will handle the catcher statement

00:08:33.810 --> 00:08:39.680
with error of any or HTTP error response.

00:08:44.920 --> 00:08:48.510
And we'll throw the error.

00:08:55.510 --> 00:09:00.419
Things look good for our authentication service.

00:09:02.020 --> 00:09:06.665
Now let's create the package for our interceptors.

00:09:06.665 --> 00:09:14.930
An interceptor will be used for each request that we do from our UI application.

00:09:14.930 --> 00:09:20.975
So that whenever we invoke a specific request form on the server side,

00:09:20.975 --> 00:09:24.990
the interceptor will be set in place automatically.

00:09:25.020 --> 00:09:28.315
I'll show you how to do this.

00:09:28.315 --> 00:09:36.620
So we're importing the injectable from angular core,

00:09:42.540 --> 00:09:50.750
the HTTP request, HTTP handler.

00:09:51.990 --> 00:09:56.570
And we'll need to use HTTP event.

00:10:00.420 --> 00:10:04.310
And HTTP interceptor.

00:10:05.430 --> 00:10:09.020
Ron Moore and the hormone.

00:10:09.020 --> 00:10:19.160
Http are

00:10:19.160 --> 00:10:21.065
also important to observable.

00:10:21.065 --> 00:10:25.860
From RX GIS package.

00:10:28.000 --> 00:10:38.555
Our interceptor will be annotated with injectable stereotype and will export the class,

00:10:38.555 --> 00:10:43.145
let's call it bears ought interceptor.

00:10:43.145 --> 00:10:48.240
That will implement the HTTP interceptor.

00:10:51.390 --> 00:10:54.250
We need to implement

00:10:54.250 --> 00:11:04.630
the intercept method request of HTTP requests any.

00:11:04.630 --> 00:11:10.450
And for the next method in our load flow,

00:11:10.450 --> 00:11:13.315
we will use the HTTP handler.

00:11:13.315 --> 00:11:20.200
So once again, this is just an interceptor that will intercept each UI requests.

00:11:20.200 --> 00:11:26.695
And basically we'll add the header. If you recall.

00:11:26.695 --> 00:11:28.210
On the server side,

00:11:28.210 --> 00:11:37.050
we need on each request or requests should actually be authenticated.

00:11:37.060 --> 00:11:41.550
So we need to handle this from the UI side.

00:11:42.670 --> 00:11:50.360
So we will define a variable called current user and extract the user that

00:11:50.360 --> 00:11:58.410
we have in the local storage using the user key.

00:11:58.660 --> 00:12:06.275
If you'll recall, we're setting this user under local storage whenever we

00:12:06.275 --> 00:12:08.150
authenticate for the fourth time into

00:12:08.150 --> 00:12:14.370
obligation under the authentication service ab.js file.

00:12:18.100 --> 00:12:23.435
And if the current user is in place.

00:12:23.435 --> 00:12:25.910
So it means that we were able to authenticate to

00:12:25.910 --> 00:12:35.270
the server the requests

00:12:35.270 --> 00:12:41.760
that we have as fundamental to the intercept method will be clone.

00:12:41.860 --> 00:12:47.250
And we need to set the headers to our couldn't requests.

00:12:50.890 --> 00:12:56.300
And for this, we will set the authorization header as

00:12:56.300 --> 00:13:02.020
basic and also extract the value from the current users.

00:13:02.020 --> 00:13:09.860
So the current user will have that base-64 computed of username and password.

00:13:10.890 --> 00:13:15.715
And of course we need to continue our request.

00:13:15.715 --> 00:13:20.930
So we'll use the next dot handle requests.

00:13:22.710 --> 00:13:25.090
Now we need to set in place

00:13:25.090 --> 00:13:29.770
this interceptor so that the application will be able to use it.

00:13:29.770 --> 00:13:33.625
So we need to go under app module.js.

00:13:33.625 --> 00:13:37.250
And under the provider section.

00:13:39.400 --> 00:13:43.350
We need to define a statement here,

00:13:46.450 --> 00:13:52.230
such as provide HTTP interceptors.

00:13:53.350 --> 00:13:56.550
Use class.

00:13:56.890 --> 00:14:02.430
We need to use the basic or interceptor.

00:14:02.890 --> 00:14:07.890
And let us also define the multiset true.

00:14:10.900 --> 00:14:16.139
And of course we need to import the basic quality interceptor.
