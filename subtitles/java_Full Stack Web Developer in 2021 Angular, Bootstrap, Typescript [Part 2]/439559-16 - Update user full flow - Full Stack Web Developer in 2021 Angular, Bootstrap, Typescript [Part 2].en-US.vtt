WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.470
In our next video,

00:00:01.470 --> 00:00:08.740
we will focus on implementing the update or AD user API.

00:00:13.430 --> 00:00:16.290
So let's go on. There are constants

00:00:16.290 --> 00:00:23.870
glass and

00:00:23.870 --> 00:00:28.970
define a new public static variable

00:00:28.970 --> 00:00:32.760
called update user of type string.

00:00:33.520 --> 00:00:43.620
And will be computed from the constants that user resource plus updates shrink.

00:00:46.450 --> 00:00:54.000
Now under user that services.js,

00:00:54.310 --> 00:01:01.530
we will need to compute our update user corresponding method.

00:01:03.370 --> 00:01:11.375
So this will receive a user as a parameter of type any.

00:01:11.375 --> 00:01:15.780
And we return an observable of any.

00:01:16.480 --> 00:01:26.075
And we need to invoke this dot HTTP dot put constants, update user.

00:01:26.075 --> 00:01:33.690
And we'll also send the user that we want to update to our server.

00:01:42.520 --> 00:01:47.700
Now under user component type script file,

00:01:47.710 --> 00:01:56.580
we need to set up some specific variables for our update user, business logic.

00:01:56.590 --> 00:02:00.200
So forth. Let's add the comment.

00:02:00.200 --> 00:02:08.645
And we will need your child for update user model.

00:02:08.645 --> 00:02:15.650
In this way, we will be able to interact with the modal dialogue in our UI.

00:02:15.650 --> 00:02:19.530
So this is of type model directive.

00:02:28.020 --> 00:02:30.130
And if you recall,

00:02:30.130 --> 00:02:34.690
we have the open update user model method.

00:02:34.690 --> 00:02:39.770
Or the first thing is to clear any existing data from the UI.

00:02:40.140 --> 00:02:44.590
And we need to populate all our fields from

00:02:44.590 --> 00:02:49.165
the user parameter we received in this method.

00:02:49.165 --> 00:02:52.675
So this dot id equals user ID.

00:02:52.675 --> 00:02:54.490
Same for the FirstName,

00:02:54.490 --> 00:02:57.190
same for the last name.

00:02:57.190 --> 00:03:03.460
This username equals user.

00:03:03.460 --> 00:03:05.600
That username.

00:03:10.650 --> 00:03:16.345
For the password, we don't want to expose the password in the UI

00:03:16.345 --> 00:03:21.910
since the password is already encoded and we don't want to see it,

00:03:21.910 --> 00:03:25.750
we don't want to send to the server.

00:03:25.750 --> 00:03:28.570
They encoded password already,

00:03:28.570 --> 00:03:34.250
since this password will be also encoded on the server side.

00:03:38.850 --> 00:03:41.770
And now we will need similar to

00:03:41.770 --> 00:03:50.125
the Delete user API or delete an actually an update user method.

00:03:50.125 --> 00:03:54.870
So this is somehow similar to the Delete user.

00:03:57.430 --> 00:04:04.200
So we'll compute the variable called user.

00:04:04.360 --> 00:04:09.035
And the id will be this dot id,

00:04:09.035 --> 00:04:11.810
the firstname, this dot,

00:04:11.810 --> 00:04:14.640
first name dot the length.

00:04:15.700 --> 00:04:22.355
If this is not equal to 0,

00:04:22.355 --> 00:04:26.165
will send this dot first name.

00:04:26.165 --> 00:04:28.130
If it's equal to 0.

00:04:28.130 --> 00:04:31.040
And we will send new.

00:04:31.040 --> 00:04:33.725
Same for the last name.

00:04:33.725 --> 00:04:40.025
It's not equal to 0 in terms of the length, will send it.

00:04:40.025 --> 00:04:46.200
If not, we'll populate the user lastName with nor.

00:04:46.540 --> 00:04:52.760
What we're doing here is creating a user object that will be sent to

00:04:52.760 --> 00:05:01.320
the server side using the user service update user method that we created earlier.

00:05:03.400 --> 00:05:11.010
Same for the username and password.

00:05:15.100 --> 00:05:18.155
In terms of the age,

00:05:18.155 --> 00:05:21.365
we need to check if the age,

00:05:21.365 --> 00:05:25.560
it's undefined or not.

00:05:26.920 --> 00:05:29.285
And for the country,

00:05:29.285 --> 00:05:31.650
it's a simple approach.

00:05:33.100 --> 00:05:39.440
We should check the length of it with 0 or not.

00:05:39.440 --> 00:05:43.970
And we should send this dot country variable,

00:05:43.970 --> 00:05:47.069
the server or the PNL statement.

00:05:53.170 --> 00:05:58.880
So now we have the user object in place that needs to

00:05:58.880 --> 00:06:03.905
be sent to the server in order to properly updated.

00:06:03.905 --> 00:06:08.450
So we will use this dot user service that

00:06:08.450 --> 00:06:14.270
update user method with a user object that we just created.

00:06:14.270 --> 00:06:18.390
And we will invoke the subscribe method.

00:06:18.730 --> 00:06:22.070
And if the operations succeed,

00:06:22.070 --> 00:06:25.190
we're forced hide news,

00:06:25.190 --> 00:06:28.280
update user modal, dialog,

00:06:28.280 --> 00:06:33.810
and set up an informative message to the user.

00:06:34.210 --> 00:06:40.560
But for this, let's go to the constants class.

00:06:42.120 --> 00:06:47.635
And define a new message.

00:06:47.635 --> 00:06:50.695
Saw update the user.

00:06:50.695 --> 00:06:53.570
Info message.

00:06:56.670 --> 00:07:00.320
User has been updated.

00:07:09.120 --> 00:07:14.200
So this that main message equals

00:07:14.200 --> 00:07:24.440
constant updated user info message.

00:07:25.320 --> 00:07:30.460
And we also need to involve the final users method to update

00:07:30.460 --> 00:07:38.425
the existing table from the UI and remove any existing,

00:07:38.425 --> 00:07:42.200
any existing filtering operation in the UI.

00:07:44.940 --> 00:07:52.490
The user service not update user was not executed with success.

00:07:53.100 --> 00:08:01.000
When you specify a string variable that we need to update here.

00:08:01.000 --> 00:08:09.140
So let's go back and set up updated user informed message of type string.

00:08:09.990 --> 00:08:15.380
Let's also handle the case to clear the data.

00:08:17.580 --> 00:08:19.405
Okay?

00:08:19.405 --> 00:08:21.265
And let's go back.

00:08:21.265 --> 00:08:26.870
And if the operation was not executed with success,

00:08:28.650 --> 00:08:31.030
we will update the, update

00:08:31.030 --> 00:08:36.980
the user info message with the error message that we receive from the server.

00:08:42.900 --> 00:08:52.400
Now, we need to compute the HTML bark or our update user or operation.

00:08:52.400 --> 00:08:55.400
So we need to create a model for

00:08:55.400 --> 00:09:05.135
this div and DB model hashtag go update user model.

00:09:05.135 --> 00:09:10.310
Since you recall that the child in the type script file is

00:09:10.310 --> 00:09:16.620
named update user model and should match this hashtag.

00:09:18.520 --> 00:09:21.930
The role dialogue.

00:09:23.170 --> 00:09:27.800
For the style we need to set over rho minus

00:09:27.800 --> 00:09:35.260
psi auto LDL labeled by

00:09:35.260 --> 00:09:44.350
update user modal area hidden,

00:09:44.350 --> 00:09:46.100
true,

00:09:52.860 --> 00:09:54.970
div class modal

00:09:54.970 --> 00:09:58.580
dialog, or all document.

00:10:04.230 --> 00:10:10.249
We are creating now the modal content for our dialogue.

00:10:19.660 --> 00:10:26.340
Now for the model header will set in place a button.

00:10:26.680 --> 00:10:30.030
Class clothes.

00:10:30.130 --> 00:10:40.610
Or right. Now for

00:10:40.610 --> 00:10:45.155
the message that will wish shown are labeled clothes.

00:10:45.155 --> 00:10:49.655
And on the click event is important to

00:10:49.655 --> 00:10:55.940
invoke dot date user model height so that we can hide the dialog if we press,

00:10:55.940 --> 00:11:02.540
if we press on this x bottom from our dialogue,

00:11:07.050 --> 00:11:11.119
also set in place the span.

00:11:14.730 --> 00:11:19.310
And now let's compute the modal title,

00:11:23.580 --> 00:11:27.590
id update user model.

00:11:27.780 --> 00:11:33.590
And let's add the descriptive message for this.

00:11:45.960 --> 00:11:52.130
Now for the modal body or for the log,

00:12:08.550 --> 00:12:12.070
will need to first set in place

00:12:12.070 --> 00:12:19.930
the informative message in case of herding errors that might appear.

00:12:19.930 --> 00:12:26.810
Yolo invoking update user API.

00:12:28.590 --> 00:12:36.010
So if we have any informative message under the update user informed message,

00:12:36.010 --> 00:12:40.220
these are left will be shown to the user.

00:12:47.820 --> 00:12:57.770
Now we will compute the actual content or far model.

00:12:57.930 --> 00:13:03.350
Since we set in place that date UserInfo message over here.

00:13:16.620 --> 00:13:21.500
So div class row.

00:13:21.750 --> 00:13:27.550
And we'll split this rho into col md

00:13:27.550 --> 00:13:29.180
for

00:13:33.750 --> 00:13:38.230
H5 will use

00:13:38.230 --> 00:13:46.190
also the NDP badge default true to make some visual effects.

00:13:46.200 --> 00:13:52.010
The first thing to note is that we set in place the firstname.

00:13:52.260 --> 00:13:58.150
Now let's use coal AND eight.

00:13:58.150 --> 00:14:01.765
For the remaining part of this row.

00:14:01.765 --> 00:14:09.880
And we'll use the input tag with MDB input of type text,

00:14:09.880 --> 00:14:17.005
of course for does the firstname will use the two-way binding for the FirstName,

00:14:17.005 --> 00:14:20.620
such as when the user will update the firstName is

00:14:20.620 --> 00:14:25.730
variable will also be stored in the type script file automatically.

00:14:26.430 --> 00:14:31.795
And also shown in the UI of course, class form control.

00:14:31.795 --> 00:14:35.450
And the value is the firstName.

00:14:37.260 --> 00:14:46.205
So now we've finished with first the important role from our modal dialog.

00:14:46.205 --> 00:14:49.290
We're moving to the next row,

00:14:49.540 --> 00:14:55.889
div class colon before of course,

00:14:57.730 --> 00:15:02.010
MDB badge default, true.

00:15:02.530 --> 00:15:06.810
And let's set in place the lastname.

00:15:09.010 --> 00:15:16.710
Now for the second part of the row div class called the eight.

00:15:18.040 --> 00:15:23.295
And the same thing as we use for the firstname.

00:15:23.295 --> 00:15:30.210
We'll set in place the input tag, the NG model.

00:15:30.210 --> 00:15:33.770
This length for the lastName field.

00:15:46.590 --> 00:15:55.879
Moving now to the third and important role in our update user model.

00:16:03.150 --> 00:16:06.500
Div class row.

00:16:08.940 --> 00:16:15.800
We are splitting this row once again into sections.

00:16:18.480 --> 00:16:22.640
And dv batch default true.

00:16:23.940 --> 00:16:26.140
Now we set in place

00:16:26.140 --> 00:16:28.250
the username

00:16:34.200 --> 00:16:36.490
input in

00:16:36.490 --> 00:16:39.115
the B input of type text.

00:16:39.115 --> 00:16:47.930
And for the 2-way binding using NG model will bind this to the username field,

00:16:49.570 --> 00:16:53.460
and no value should be Username.

00:17:05.410 --> 00:17:11.880
Now we need to compute the row that corresponds to the password.

00:17:12.100 --> 00:17:15.449
So div class,

00:17:16.900 --> 00:17:19.440
row,

00:17:27.100 --> 00:17:29.480
div class core.

00:17:29.480 --> 00:17:31.799
And the four.

00:17:32.250 --> 00:17:37.550
For the password, the corresponding badge.

00:17:41.100 --> 00:17:45.170
So we should type in password.

00:17:48.870 --> 00:17:56.330
Now, the class colon, the minus eight.

00:18:06.360 --> 00:18:11.710
Over here, you can see that the 2-way binding is made for

00:18:11.710 --> 00:18:17.180
the password field and it is of type password.

00:18:22.710 --> 00:18:31.850
Now we need to focus on the fifth row in our dialogue.

00:18:35.760 --> 00:18:39.895
Ndp patch default, true.

00:18:39.895 --> 00:18:43.390
We'll set the configuration for

00:18:43.390 --> 00:18:53.540
the age class called MDA.

00:18:56.770 --> 00:19:00.180
Let's close this div.

00:19:15.460 --> 00:19:24.570
And the B input type text NG model should be mapped to the H field.

00:19:25.750 --> 00:19:28.460
And clash would be form control.

00:19:28.460 --> 00:19:32.430
Of course, the value should we age.

00:19:32.950 --> 00:19:41.550
And we should update and fix this synsets the input, okay?

00:19:42.370 --> 00:19:46.235
And Cong, file the source code.

00:19:46.235 --> 00:19:47.930
And now for

00:19:47.930 --> 00:19:52.610
the last

00:19:52.610 --> 00:20:00.050
row c,

00:20:00.050 --> 00:20:04.610
this error update user info message.

00:20:04.610 --> 00:20:08.490
Okay, we need to fix this.

00:20:10.900 --> 00:20:18.125
Let's take a look on there are user component ts and do a quick search.

00:20:18.125 --> 00:20:20.690
It is not found.

00:20:20.690 --> 00:20:24.155
But let's try to fix this.

00:20:24.155 --> 00:20:31.054
So you can see that it was updated UserInfo message.

00:20:31.054 --> 00:20:37.950
What we fix this by your changing it to update user info message.

00:20:43.150 --> 00:20:50.015
And over here, okay,

00:20:50.015 --> 00:20:54.630
now the code should compile correctly.

00:21:05.670 --> 00:21:14.290
Okay, so let's move forward with our final row in this dialogue.

00:21:14.290 --> 00:21:20.390
So div class called MDG4.

00:21:22.320 --> 00:21:28.450
We need to set up the badge for the country in this case.

00:21:28.450 --> 00:21:32.060
So MDB badge default true.

00:21:36.810 --> 00:21:42.980
So div class called m d eight.

00:21:46.060 --> 00:21:52.745
And now this is an simple input type of

00:21:52.745 --> 00:22:00.215
text and NG model should map to the country filled.

00:22:00.215 --> 00:22:03.545
Class should be formed control.

00:22:03.545 --> 00:22:08.940
And the value should be of course, country.

00:22:11.860 --> 00:22:19.079
Now we finish with this body div.

00:22:25.570 --> 00:22:34.710
And we need to set in place modal footer of hard dialogue.

00:22:36.490 --> 00:22:40.805
This will consist of two main buttons.

00:22:40.805 --> 00:22:46.730
So for the, for the first button will compute

00:22:46.730 --> 00:22:53.405
the bottom type button, color primary.

00:22:53.405 --> 00:22:57.185
The usual class waves light.

00:22:57.185 --> 00:23:02.730
And for area label will be saved.

00:23:02.890 --> 00:23:07.050
And for the click event.

00:23:07.420 --> 00:23:12.050
If you recall that we set in place

00:23:12.050 --> 00:23:21.740
this update user method in our type script file for the text will be update.

00:23:21.740 --> 00:23:25.590
So once again, update user.

00:23:25.930 --> 00:23:31.700
Under this update user will compute the user object and send it to

00:23:31.700 --> 00:23:37.025
the update user method from the user service.

00:23:37.025 --> 00:23:40.220
And after this, the business logic from

00:23:40.220 --> 00:23:47.720
our springboard app will be invoked to update the corresponding user.

00:23:47.720 --> 00:23:54.170
And of course this will be saved automatically into the database, MySQL database.

00:23:54.170 --> 00:23:57.600
Now for the second button,

00:23:59.290 --> 00:24:03.470
we'll use a button for council process.

00:24:03.470 --> 00:24:06.420
And on a click event.

00:24:06.460 --> 00:24:09.170
We just need to hide

00:24:09.170 --> 00:24:18.935
this update user modal dialog and TV waves effect.

00:24:18.935 --> 00:24:22.650
And for the texts we will use council.

00:24:25.540 --> 00:24:28.650
So far so good.

00:24:28.810 --> 00:24:31.685
Now let's see things in action.

00:24:31.685 --> 00:24:34.475
So I selected the first user.

00:24:34.475 --> 00:24:43.385
You see that text is automatically populated unless we accept the password.

00:24:43.385 --> 00:24:49.370
And you see that we made some changes and the firstname,

00:24:49.370 --> 00:24:52.829
for example, has been updated with success.

00:24:54.130 --> 00:24:59.330
Now for the password, the password,

00:24:59.330 --> 00:25:01.475
the if we updated,

00:25:01.475 --> 00:25:05.940
it will be encrypted on the server side.

00:25:06.580 --> 00:25:16.640
That's also update the country and also update the username to see free changes in place.

00:25:16.640 --> 00:25:22.130
So you see the password has been updated and encoded.

00:25:22.130 --> 00:25:25.680
Also the other two fields.

00:25:39.280 --> 00:25:44.705
Now really more, someone, some entries.

00:25:44.705 --> 00:25:48.650
And you see that the first name

00:25:48.650 --> 00:25:53.670
has been updated and no changes were made to the username.
