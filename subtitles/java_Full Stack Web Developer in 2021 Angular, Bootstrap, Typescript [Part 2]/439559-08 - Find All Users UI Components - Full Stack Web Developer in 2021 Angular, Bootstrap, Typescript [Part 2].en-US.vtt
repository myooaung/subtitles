WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:08.469
In this video, we'll set up the structure for our find all users API.

00:00:09.620 --> 00:00:15.640
So that will communicate from UI to the backend.

00:00:16.130 --> 00:00:22.500
So first navigate to the constants class,

00:00:22.500 --> 00:00:26.710
where we will need to set up some constants in place.

00:00:26.990 --> 00:00:35.760
So we'll set up a constant for public static users

00:00:35.760 --> 00:00:39.870
resource that will point to

00:00:39.870 --> 00:00:46.325
R server URL API users.

00:00:46.325 --> 00:00:48.620
If you recall, on the server side,

00:00:48.620 --> 00:00:56.400
this is the main entry point for our users resource.

00:00:57.730 --> 00:01:03.860
And now we will define the but for our fund,

00:01:03.860 --> 00:01:07.820
all users API as a string of course.

00:01:07.820 --> 00:01:09.395
And in this case,

00:01:09.395 --> 00:01:12.635
this will match exactly the users just source.

00:01:12.635 --> 00:01:16.220
So it will be local host 8080 slash,

00:01:16.220 --> 00:01:21.980
api slash users that will need to connect from

00:01:21.980 --> 00:01:31.320
the UI application and basically extract data from the server side using that URL.

00:01:35.860 --> 00:01:41.105
So now let's go to the user service Ts.

00:01:41.105 --> 00:01:45.140
And the first thing to note is that we'll need

00:01:45.140 --> 00:01:53.000
to add the HTTP client reference under our constructor.

00:01:53.000 --> 00:01:57.185
Since using this HTTP client component,

00:01:57.185 --> 00:02:01.955
we will be able to interact with the backend service.

00:02:01.955 --> 00:02:05.430
Using HTTP calls.

00:02:10.750 --> 00:02:14.915
Will also need a reference to our constant class.

00:02:14.915 --> 00:02:17.280
So let's import it.

00:02:21.460 --> 00:02:26.954
So important that constitute class from the source app constants.

00:02:26.954 --> 00:02:31.270
And now let's set in place a method called findall

00:02:31.270 --> 00:02:37.280
users that were returned on observable of any.

00:02:43.380 --> 00:02:50.570
And we will use the HTTP reference getMethod.

00:02:52.080 --> 00:02:58.520
And we'll call the constants find all user reference.

00:03:05.100 --> 00:03:09.720
Now let's navigate to our user component ts file.

00:03:09.720 --> 00:03:17.430
So this is the type script file for our user specific resource.

00:03:19.450 --> 00:03:26.279
And over here, we need to import the user service.

00:03:28.480 --> 00:03:33.110
Since this will do the communication to

00:03:33.110 --> 00:03:40.350
the backend service that we configure for our Supreme Court application.

00:03:40.840 --> 00:03:47.400
And of course, we need a reference to our constants class.

00:03:56.160 --> 00:04:00.350
Let's save this file now.

00:04:04.560 --> 00:04:08.680
We'll add a comment, descriptive comment.

00:04:08.680 --> 00:04:11.710
And we'll need to set up in place somehow

00:04:11.710 --> 00:04:16.120
specific variables that we'll use as part of this.

00:04:16.120 --> 00:04:21.970
Find all users API implementation will need done users

00:04:21.970 --> 00:04:30.055
array that will keep all our users in place.

00:04:30.055 --> 00:04:33.010
And for the table that will construct,

00:04:33.010 --> 00:04:37.030
we set up our user's table headers of type

00:04:37.030 --> 00:04:46.045
any with specific strings that will be shown in the UI.

00:04:46.045 --> 00:04:49.840
So we'll expose for each user ID,

00:04:49.840 --> 00:04:52.270
the username, the password,

00:04:52.270 --> 00:04:54.535
even if it's encoded,

00:04:54.535 --> 00:04:58.285
the firstname, lastname, age,

00:04:58.285 --> 00:05:00.655
and of course the country.

00:05:00.655 --> 00:05:11.420
So please recall that this these variables matches directly on user from the server side.

00:05:22.860 --> 00:05:28.480
We'll also need to setup some common elements.

00:05:28.480 --> 00:05:32.080
So I'll use the main message.

00:05:32.080 --> 00:05:39.050
The main message as string will be used for exposing informative messages.

00:05:39.240 --> 00:05:45.920
I will set in place a method called final users of type void.

00:05:51.060 --> 00:05:57.835
And imagine that we might have already some existing data in the user's array.

00:05:57.835 --> 00:06:01.720
So first thing to note is that we do clear the users

00:06:01.720 --> 00:06:06.325
are a just in case we already have some data over there.

00:06:06.325 --> 00:06:15.805
And now we need to call the find all users API using the user service.

00:06:15.805 --> 00:06:23.950
In order to retrieve user from the backend service exposed in the Spring boot app.

00:06:23.950 --> 00:06:28.730
So we will use this.userId service.

00:06:28.860 --> 00:06:34.880
But of course we need to inject the user service in the constructor.

00:06:35.130 --> 00:06:37.750
Since we've just imported It,

00:06:37.750 --> 00:06:40.790
was not injected it.

00:06:42.330 --> 00:06:48.315
So this that user service, the final users.

00:06:48.315 --> 00:06:51.480
And we need to subscribe.

00:06:51.730 --> 00:06:59.850
And based on the data that we receive from the final users API.

00:07:00.670 --> 00:07:06.030
Let's recall that we will receive an array.

00:07:11.950 --> 00:07:15.275
And now for each user,

00:07:15.275 --> 00:07:20.840
we need to push and basically add each user to the user.

00:07:20.840 --> 00:07:30.330
Sorry. So now the user's array will contain all our users exposed from the server side.

00:07:33.610 --> 00:07:38.720
In case we received the narrower will set this up.

00:07:38.720 --> 00:07:43.745
We set this error under the main message string.

00:07:43.745 --> 00:07:47.000
And of course, we need to invoke this method.

00:07:47.000 --> 00:07:50.540
So this method will be automatically invoke under

00:07:50.540 --> 00:07:55.860
the NGOs in it'll Angular lifecycle method.

00:08:03.190 --> 00:08:06.095
And next step is to navigate under

00:08:06.095 --> 00:08:13.834
user component HTML and build a UI works on for this final users API.

00:08:13.834 --> 00:08:21.090
So we'll set in place specific MD Bootstrap table,

00:08:23.680 --> 00:08:29.010
the head class, black, white text.

00:08:29.050 --> 00:08:36.360
And now we'll construct specific rows.

00:08:36.580 --> 00:08:39.590
So on the first row,

00:08:39.590 --> 00:08:45.860
we'll need to iterate over the users

00:08:45.860 --> 00:08:54.030
table header, scope as coal.

00:08:55.180 --> 00:09:04.025
And we will expose each row entry from our user's table headers.

00:09:04.025 --> 00:09:09.440
So I created for this NG four specific angular loop.

00:09:09.440 --> 00:09:13.864
And now for the p body,

00:09:13.864 --> 00:09:19.055
use the TR MDB table called

00:09:19.055 --> 00:09:25.250
and the same energy for specific angular statement.

00:09:25.250 --> 00:09:28.610
And for this we will iterate over the user,

00:09:28.610 --> 00:09:35.790
sorry, that of course we have in place form the final users API.

00:09:37.600 --> 00:09:43.280
And we'll expose each property from the user variable

00:09:43.280 --> 00:09:49.010
that we use in the iteration process of the user's array.

00:09:49.010 --> 00:09:53.550
So we will use the user ID,

00:09:55.750 --> 00:10:06.065
the user username, user password.

00:10:06.065 --> 00:10:09.500
Please recall that all these variables

00:10:09.500 --> 00:10:15.830
are directly exposed by our Spring boot server API.

00:10:15.830 --> 00:10:20.085
When we invoke the find all users API.

00:10:20.085 --> 00:10:25.885
And each user has this property set in place for him.

00:10:25.885 --> 00:10:36.320
So user firstName, lastName, user age.

00:10:39.090 --> 00:10:48.950
So we are using here the interpolation process from Angular and user country.

00:10:51.600 --> 00:10:55.825
And now if we navigate to the user's page,

00:10:55.825 --> 00:11:01.750
we see that the table is in place using all the corresponding headers and data is

00:11:01.750 --> 00:11:08.940
extracted correct way from Spring boot server.

00:11:13.810 --> 00:11:19.415
I would like to format a bit on the main page of our application.

00:11:19.415 --> 00:11:26.180
And for this, we'll use the jumbotron class from the end, the Bootstrap framework.

00:11:26.180 --> 00:11:30.200
So let's copy paste our outer outlet over here.

00:11:30.200 --> 00:11:35.160
And using this, we'll have some space in the UI.
