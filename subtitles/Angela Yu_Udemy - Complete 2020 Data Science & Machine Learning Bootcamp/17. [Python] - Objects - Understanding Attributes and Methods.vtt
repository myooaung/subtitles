WEBVTT
1
00:00:00.480 --> 00:00:08.430
In this lesson we're going to combine our knowledge of functions with a new topic objects.

2
00:00:08.430 --> 00:00:13.680
Objects are the basis for every python program that you will ever write.

3
00:00:13.680 --> 00:00:20.460
Not to oversimplify but when programming in Python we do things with stuff.

4
00:00:20.460 --> 00:00:22.480
Please pardon my formality.

5
00:00:22.530 --> 00:00:22.990
Bye.

6
00:00:23.000 --> 00:00:23.940
Do things.

7
00:00:24.060 --> 00:00:30.570
I mean calling functions functions that add to numbers functions that import data functions that fit

8
00:00:30.570 --> 00:00:38.280
regressions or generate charts or train machine learning models and by stuff I mean objects.

9
00:00:38.280 --> 00:00:41.730
This lesson will be all about the stuff part.

10
00:00:41.730 --> 00:00:44.430
So let's talk about objects you see.

11
00:00:44.490 --> 00:00:47.730
Pretty much everything in Python is an object.

12
00:00:47.730 --> 00:00:54.210
Remember those modules that we talked about in previous lessons modules like pandas math or our own

13
00:00:54.210 --> 00:00:55.740
life module.

14
00:00:55.740 --> 00:00:57.120
Those are objects.

15
00:00:57.510 --> 00:01:03.760
We also had data frames that we put inside our x and y variables data frames are objects too.

16
00:01:03.870 --> 00:01:11.850
And the plot inside our APL t variable is also an object more formally all the data in Python.

17
00:01:11.850 --> 00:01:17.400
Take the form of objects and the goal of this lesson is to explain the code that we wrote in previous

18
00:01:17.400 --> 00:01:20.780
lessons in more detail by the end of this lesson.

19
00:01:20.790 --> 00:01:24.220
I want you guys to have a deeper understanding of how PD.

20
00:01:24.270 --> 00:01:32.160
Don't read see as V and peel T don't show and rigour dot intercept actually work.

21
00:01:32.160 --> 00:01:36.310
My goal is to make these lines of code make a lot more sense.

22
00:01:36.360 --> 00:01:40.360
Let's make a real life analogy to objects in python.

23
00:01:40.360 --> 00:01:41.880
Now suppose you have a car.

24
00:01:41.990 --> 00:01:43.750
If you don't own a car don't worry.

25
00:01:43.920 --> 00:01:46.700
Owning a car is not a prerequisite for this course.

26
00:01:46.730 --> 00:01:51.510
Actually don't own a car myself but I've watched enough top gear to get very good at talking about cars

27
00:01:51.510 --> 00:01:53.480
and pretending I own one.

28
00:01:53.520 --> 00:01:58.670
Anyhow we're going to talk about your red car like it's a python object.

29
00:01:58.680 --> 00:02:01.470
First off your car needs to have a name.

30
00:02:01.650 --> 00:02:04.200
After all every decent car has a name.

31
00:02:04.200 --> 00:02:09.630
David Hasselhoff Scott and Knight-Ridder was called kit and in pixels movie The protagonist was called

32
00:02:09.660 --> 00:02:11.360
Lightning McQueen.

33
00:02:11.430 --> 00:02:14.810
So in honor of Pixar we're gonna name your red racecar.

34
00:02:14.910 --> 00:02:22.140
Lightning McQueen all lowercase and with another school to keep with Python naming conventions and also

35
00:02:22.200 --> 00:02:25.410
avoid expensive American lawsuits.

36
00:02:25.450 --> 00:02:31.980
Now if you have to describe this car to your friends you might talk about your car's color.

37
00:02:31.990 --> 00:02:38.160
The number of seats it has the power of the engine or how much petrol you have left in the tank.

38
00:02:38.290 --> 00:02:42.420
All these things are attributes of your car.

39
00:02:42.430 --> 00:02:48.850
Now there's something quite significant about this namely these attributes capture information about

40
00:02:48.850 --> 00:02:54.510
the state of your car and your costs state can change.

41
00:02:54.510 --> 00:03:00.650
For example as you're driving along the amount of fuel in the tank will decrease in the same way.

42
00:03:00.660 --> 00:03:05.150
If you've got a computer game the state of the game will also change right.

43
00:03:05.160 --> 00:03:09.780
Most obviously the level that the player is on will change as the program runs.

44
00:03:09.780 --> 00:03:14.940
This is the kind of thing I'm alluding to when I'm talking about state but coming back to these attributes

45
00:03:15.120 --> 00:03:20.130
let's talk about these attributes in a bit more detail and look at the python's syntax.

46
00:03:20.160 --> 00:03:29.300
The thing is much of Python programming boils down to this simple pattern object dot attribute.

47
00:03:29.380 --> 00:03:35.590
So if you were writing a piece of Python code accessing the attributes of your car then you might write

48
00:03:35.590 --> 00:03:43.300
something like lightning mcqueen dark color or lightning mcqueen dot engine power or lightning mcqueen

49
00:03:43.310 --> 00:03:45.280
dot mileage.

50
00:03:45.280 --> 00:03:50.680
We've actually encountered this object dot attribute pattern many times before.

51
00:03:50.680 --> 00:03:57.820
One of the best examples is when we pulled out the coefficient of regression or when we access the intercept

52
00:03:57.910 --> 00:04:05.050
of the regression in both of these cases the linear regression inside our regular variable was the object

53
00:04:05.640 --> 00:04:10.270
and this object had an attribute called intercept underscore.

54
00:04:10.330 --> 00:04:13.610
Now don't worry about the underscore at the end of this name.

55
00:04:13.840 --> 00:04:15.730
It's just part of the name of the attribute.

56
00:04:15.790 --> 00:04:20.470
The underscore has no special meaning they could have called his attributes something else but they

57
00:04:20.470 --> 00:04:23.580
tagged on the underscore at the end of the name.

58
00:04:23.590 --> 00:04:27.010
The point is is that we also used the same object.

59
00:04:27.010 --> 00:04:33.730
Don't attribute pattern when we were talking about our Python modules with Hitchhiker's Guide don't

60
00:04:33.880 --> 00:04:42.280
the answer and math dot pi in all of these cases we were able to access information from inside our

61
00:04:42.280 --> 00:04:49.360
object using the dot notation and it didn't matter if that object was a linear regression or if it was

62
00:04:49.390 --> 00:04:51.210
a Python module.

63
00:04:51.310 --> 00:04:57.670
Now accessing information from objects through their attributes is very well and good but remember how

64
00:04:57.670 --> 00:05:02.700
we said that Python is all about doing things with stuff.

65
00:05:02.710 --> 00:05:09.130
This is where our functions come in however because we really like computer programming jargon.

66
00:05:09.130 --> 00:05:15.730
We're gonna use a different word to refer to functions in this context functions that are used with

67
00:05:15.730 --> 00:05:18.820
an object are called methods.

68
00:05:18.820 --> 00:05:23.890
Now oftentimes you'll hear the word function and method used interchangeably.

69
00:05:24.100 --> 00:05:31.480
And trust me I'd be the last person to nitpick about this use of language but it's still a good idea

70
00:05:31.510 --> 00:05:37.570
to get familiar with all this vocabulary because you'll definitely come across these words online and

71
00:05:37.570 --> 00:05:43.160
also nobody enjoys getting corrected by strangers on the Internet in online forums.

72
00:05:43.270 --> 00:05:47.990
So use methods when you're talking about functions that belong to an object.

73
00:05:48.050 --> 00:05:54.400
Let's return to our car example before we talked about how our car has a state.

74
00:05:54.730 --> 00:06:00.340
It can be a new car with low mileage it can be an old car with high mileage the car's fuel tank can

75
00:06:00.340 --> 00:06:04.010
be full or the car can be almost out of petrol.

76
00:06:04.090 --> 00:06:09.200
The State of the car object is captured through the attributes of the car.

77
00:06:09.550 --> 00:06:16.830
An attribute is a piece of information about the car like the mileage or the amount of fuel.

78
00:06:16.900 --> 00:06:23.980
Now unless you're playing Top Trumps the most interesting thing about a car is not its stats but what

79
00:06:23.980 --> 00:06:26.140
the car does.

80
00:06:26.380 --> 00:06:30.460
And the coolest part of the car is definitely its behavior.

81
00:06:30.460 --> 00:06:38.950
Remember that we said programming is about doing things well things get done by calling methods and

82
00:06:38.950 --> 00:06:43.450
methods are the name for functions that belong to an object.

83
00:06:43.450 --> 00:06:49.960
So an example of a method on our car object would be something like drive.

84
00:06:49.990 --> 00:06:56.450
Now the question is how do we call one of these functions that's associated with our car.

85
00:06:56.470 --> 00:07:02.220
Well the format is exactly the same as with the attributes we use the dot notation.

86
00:07:02.290 --> 00:07:08.030
In other words we have our object then don't add the name of the method.

87
00:07:08.050 --> 00:07:16.090
So for example if your red race car can drive then we'd write Lightning McQueen don't drive hand if

88
00:07:16.090 --> 00:07:21.280
your car can do other things like torque then we'd follow the same pattern.

89
00:07:21.310 --> 00:07:22.620
That's enough theory.

90
00:07:22.750 --> 00:07:26.820
Let's put this into practice and add a function to our life.

91
00:07:26.820 --> 00:07:34.750
Don't P Why file so or when the life don't P Y file from your project folder in here.

92
00:07:34.770 --> 00:07:43.270
We're going to create a function by using the keyword def and when to call this function quote on the

93
00:07:43.270 --> 00:07:44.310
score.

94
00:07:44.350 --> 00:07:51.500
Marvin a function is not going to take any arguments so we'll just put empty parentheses and then a

95
00:07:51.500 --> 00:07:54.990
colon and inside the function we'll put a print statement.

96
00:07:55.250 --> 00:08:02.850
We're gonna print out a single sentence so we'll have two single quotes and then we'll write.

97
00:08:02.990 --> 00:08:07.910
I've calculated here a chance of survival

98
00:08:11.130 --> 00:08:12.060
but I don't think

99
00:08:18.280 --> 00:08:19.710
you'll like it.

100
00:08:20.260 --> 00:08:24.160
Now check out what happens if we add an apostrophe before the T.

101
00:08:24.160 --> 00:08:32.740
And don't putting that single quote The terminates are string so anything after the single quote is

102
00:08:32.740 --> 00:08:33.460
considered 3.

103
00:08:33.490 --> 00:08:36.790
Python code and then we have another single quote here.

104
00:08:37.420 --> 00:08:39.270
So this is a problem right.

105
00:08:39.280 --> 00:08:45.960
We've got a special character that single quote inside of our piece of text.

106
00:08:46.000 --> 00:08:52.230
The obvious problem is that in Python single quotes also go at the beginning and at the end of a string

107
00:08:52.240 --> 00:08:55.500
to tell Python that something is a piece of text.

108
00:08:56.410 --> 00:09:01.740
So we need to tell Python that it should ignore the single quote and don't.

109
00:09:01.960 --> 00:09:09.450
In other words we have to escape the single quote character to escape a special character like this.

110
00:09:09.490 --> 00:09:13.350
We have to add a backslash in front of it.

111
00:09:13.390 --> 00:09:16.060
This is what a backslash looks like.

112
00:09:16.060 --> 00:09:22.260
Notice how as soon as I put it there the syntax highlighting changes this single quote is ignored.

113
00:09:22.260 --> 00:09:28.460
And now this single quote at the end is what terminates this string.

114
00:09:28.470 --> 00:09:31.920
Now if you're looking at your keyboard you don't want to use this one here.

115
00:09:31.920 --> 00:09:33.590
This is the forward slash.

116
00:09:33.960 --> 00:09:36.600
And this does not escape the single quote.

117
00:09:36.600 --> 00:09:38.730
You want to use the backslash.

118
00:09:38.800 --> 00:09:41.260
I am going to add two more backslash us in single quotes.

119
00:09:41.340 --> 00:09:46.750
I might add one here and I'm going to add one here.

120
00:09:46.760 --> 00:09:52.140
Now let's save the file and then return to the Python intro notebook that we've been working in.

121
00:09:52.220 --> 00:09:59.360
We're got a file save when a switch tabs to the Python intro notebook.

122
00:09:59.540 --> 00:10:04.810
And this is where we've imported life as Hitchhiker's Guide.

123
00:10:04.980 --> 00:10:11.760
Now if you returning to this notebook and have not run the code in here for a while you can either click

124
00:10:11.820 --> 00:10:19.860
inside this cell here and press shift enter on your keyboard to rerun the cell or you can go to cell

125
00:10:20.520 --> 00:10:24.370
and then run all to run all the cells in the notebook.

126
00:10:24.690 --> 00:10:33.630
After you've done that go to the bottom of your notebook and there as a challenge see if you can call

127
00:10:33.750 --> 00:10:36.210
the quote Marvin method.

128
00:10:36.210 --> 00:10:41.100
If you call this method successfully then you see a quote from the Hitchhiker's Guide To The Galaxy

129
00:10:41.550 --> 00:10:44.850
appear below the cell after you run it.

130
00:10:44.850 --> 00:10:46.860
I'll give you a few seconds to pause the video

131
00:10:50.210 --> 00:10:51.920
and here's the solution.

132
00:10:52.100 --> 00:10:58.060
You'd write Hitchhiker's Guide dot quote on the school.

133
00:10:58.310 --> 00:11:01.180
Marvin and head shift enter.

134
00:11:01.760 --> 00:11:04.700
Remember to call the quote Marvin method.

135
00:11:04.700 --> 00:11:07.280
We need to use our module object.

136
00:11:07.280 --> 00:11:10.810
In this case our module has the name Hitchhiker's Guide.

137
00:11:11.060 --> 00:11:15.860
Put a dot after Hitchhiker's Guide and then write the method name.

138
00:11:15.870 --> 00:11:21.540
Now suppose you just tried to run quote Marvin on its own without the object.

139
00:11:21.540 --> 00:11:23.950
In that case you'd get an error.

140
00:11:24.120 --> 00:11:28.890
The arrow would read name quote Marvin is not defined.

141
00:11:28.890 --> 00:11:37.380
In other words are Python notebook doesn't recognize a function called quote Marvin and this is because

142
00:11:37.380 --> 00:11:41.540
quote Marvin belongs to the life don't P Y file.

143
00:11:41.610 --> 00:11:48.900
It belongs to the module not R Python intro notebook and this neatly illustrates the difference between

144
00:11:48.900 --> 00:11:52.320
a function and a method to use quote Marvin.

145
00:11:52.320 --> 00:11:59.340
We need to have that object and use the dot notation in contrast for a function like print or for a

146
00:11:59.340 --> 00:12:01.410
function like type.

147
00:12:01.410 --> 00:12:08.520
We didn't have to have anything before that function name print and type our functions while quote Marvin

148
00:12:09.120 --> 00:12:10.760
is a method.

149
00:12:11.130 --> 00:12:17.010
So let's revisit our old notebook with the linear regression again looking at this code.

150
00:12:17.100 --> 00:12:19.950
PD don't read CSP.

151
00:12:20.280 --> 00:12:27.020
We now see PD as the object and read underscore CSB as the method.

152
00:12:27.300 --> 00:12:28.130
And below.

153
00:12:28.260 --> 00:12:33.970
We can now recognize peel t the object and scatter as the method.

154
00:12:34.120 --> 00:12:41.860
In fact we're calling a whole host of methods on this peel t object including X label y label title

155
00:12:42.520 --> 00:12:44.140
and show.

156
00:12:44.140 --> 00:12:50.860
Now a question that we get a lot and something that can be a little bit confusing is the link between

157
00:12:50.860 --> 00:12:53.800
variables and objects.

158
00:12:53.800 --> 00:13:00.850
So let's talk about this a little bit and link how this lesson ties in with what we said about variables

159
00:13:01.780 --> 00:13:04.630
back at the top of our Python intro notebook.

160
00:13:04.630 --> 00:13:08.200
We had a variable called my age.

161
00:13:08.590 --> 00:13:16.690
The question you might ask at this point is is my age an object and the way to think about it is this

162
00:13:17.590 --> 00:13:23.410
variables are containers variables are boxes that hold on to data.

163
00:13:23.410 --> 00:13:28.670
The thing inside the variable is the actual object in this case.

164
00:13:28.710 --> 00:13:37.080
The object is the number 32 the object is the data and the variable is the name that is referencing

165
00:13:37.320 --> 00:13:42.200
the number 32 looking at the linear regression notebook.

166
00:13:42.210 --> 00:13:49.230
We had a variable called Capital x x contained our movie budgets as a data frame.

167
00:13:49.620 --> 00:13:57.580
The data frame contained in side effects is the object an x is just the name for the data frame.

168
00:13:57.600 --> 00:14:04.430
So in summary a variable is a way to refer to an object at some point in time.

169
00:14:04.440 --> 00:14:12.260
Variables are containers for data but a variable is not the data itself and this is actually quite important

170
00:14:12.290 --> 00:14:19.490
because it links back to our lesson on data types you see in Python the type actually lives with the

171
00:14:19.490 --> 00:14:23.330
object and not with the variable.

172
00:14:23.340 --> 00:14:24.390
Check this out.

173
00:14:24.750 --> 00:14:32.320
When I scrolled to the bottom here and in this cell right here I'm going to write.

174
00:14:32.800 --> 00:14:44.970
My age is equal to single quotes two hundred and then I'm going to write type my age and had shift enter.

175
00:14:45.160 --> 00:14:52.990
This now shows me that my age is a string at this point in time of the program at the top of the Python

176
00:14:52.990 --> 00:14:53.880
notebook.

177
00:14:53.920 --> 00:15:01.020
My age was still an integer an int but at the bottom of this notebook my age is now a string.

178
00:15:01.080 --> 00:15:08.160
In other words I can change the type of my age so let's change it again when I see my age is equal to

179
00:15:08.580 --> 00:15:15.070
twenty point five three I say type my age and hit shift enter.

180
00:15:15.120 --> 00:15:26.940
Now we see that my age is a float so in our notebook my age starts out as an integer equal to 32.

181
00:15:27.220 --> 00:15:34.900
Then it becomes a string and then it becomes a floating point number how this piece of code will actually

182
00:15:34.900 --> 00:15:43.060
really really freak out a Java or C programmer by the way the Java and C guys watching this probably

183
00:15:43.060 --> 00:15:47.920
just had a cold shiver run down their spine like when they watched the girl come out of the well in

184
00:15:47.920 --> 00:15:50.470
the horror movie The Ring.

185
00:15:50.500 --> 00:15:58.000
The important point I'm trying to make here is that in Python that type lives with the object inside

186
00:15:58.030 --> 00:16:01.230
the variable not the variable itself.

187
00:16:01.240 --> 00:16:08.620
So in this code we've simply changed what the object is inside of my age inside of the variable we've

188
00:16:08.620 --> 00:16:16.550
changed which object the variable is referencing and there's actually another important link to our

189
00:16:16.550 --> 00:16:23.090
lesson on types namely the fact that the behavior of the object will depend on its type.

190
00:16:24.260 --> 00:16:28.490
So our car can drive because it's a type car.

191
00:16:28.850 --> 00:16:33.370
And we could add one to my age because it was a number.

192
00:16:33.410 --> 00:16:39.900
In other words the operations that you can do on an object depend on its type.

193
00:16:39.950 --> 00:16:48.920
So even your simple integer is an object in Python an integer has a value say like 199 and then some

194
00:16:48.950 --> 00:16:53.190
operations that we can do on it like multiplying or adding.

195
00:16:53.190 --> 00:17:00.320
And this is why programmers like to think of objects as pieces of computer memory with a value and a

196
00:17:00.320 --> 00:17:08.580
set of operations in Python we actually care more about what an object does rather than what it is.

197
00:17:08.610 --> 00:17:15.750
Python programmers care more about an object's behavior and its methods than what its data type is.

198
00:17:15.750 --> 00:17:23.730
This is what makes pythons types dynamic and this is at the root of Python's flexibility.

199
00:17:23.730 --> 00:17:28.230
As a programming language on pythons Vikki PD page.

200
00:17:28.490 --> 00:17:35.750
This is what people mean when they talk about pythons dynamic type system that said harp on and on about

201
00:17:35.750 --> 00:17:42.740
types because in my experience even though they give Python a lot of flexibility they're also a big

202
00:17:42.830 --> 00:17:43.700
stumbling block.

203
00:17:43.700 --> 00:17:50.710
When you first starting out with Python now has a challenge let's put a couple of the past lessons together.

204
00:17:50.820 --> 00:17:55.020
You're back as the engineering lead at the calculator company in Silicon Valley.

205
00:17:55.110 --> 00:18:00.030
You've been laughing at your boss's terrible jokes and you've got a big bonus but your company needs

206
00:18:00.030 --> 00:18:03.870
to ship its calculators to its first paying customers ASAP.

207
00:18:04.020 --> 00:18:10.530
So it's crunch time for you and your development team and it's on you to implement the square root functionality

208
00:18:10.650 --> 00:18:12.410
of the calculator.

209
00:18:12.450 --> 00:18:13.990
Here's what you got to do.

210
00:18:14.040 --> 00:18:20.340
You got to open that life thought P Y file and you've got to import the math module and then you're

211
00:18:20.340 --> 00:18:26.940
going to try to figure out how to use the python square root functionality from the math module you're

212
00:18:26.940 --> 00:18:30.990
going to create your own function called Square on a square root.

213
00:18:30.990 --> 00:18:36.960
And that function is going to take one input and return the square root of whatever that function has

214
00:18:36.960 --> 00:18:40.630
been given as an argument after you're all done.

215
00:18:40.740 --> 00:18:47.040
You're going to save the life dot P Y file and in your Jupiter notebook you're gonna go to restart and

216
00:18:47.250 --> 00:18:51.850
run all finally in the bottom cell of your python intro notebook.

217
00:18:51.870 --> 00:18:58.470
You can calculate the square root of sixty three point one for how give you a few seconds to pause the

218
00:18:58.470 --> 00:19:03.760
video and have a go at this challenge ready.

219
00:19:03.820 --> 00:19:09.820
Here's the solution at the top of our life dot P Y file we're gonna import math

220
00:19:13.010 --> 00:19:22.220
and then we're gonna create a function called D F square on a score route and it's gonna take a single

221
00:19:22.220 --> 00:19:34.650
input say X semicolon and then in the body of the function we're going to return the result of the calculation.

222
00:19:35.760 --> 00:19:41.500
So the question is how do we make that calculation the way we figure this out is that we're going to

223
00:19:41.500 --> 00:19:47.200
Google for the official Python documentation on the math module.

224
00:19:47.200 --> 00:19:57.610
So we're going to write Python math module documentation into Google and then we're gonna go to the

225
00:19:57.790 --> 00:20:00.700
Python 3 which is what we're using.

226
00:20:00.730 --> 00:20:10.200
Documentation the documentation will look something like this and it's a pretty long page but let's

227
00:20:10.200 --> 00:20:20.740
see if we can find square root and if we search for the words square on this page we can see that the

228
00:20:20.740 --> 00:20:25.570
guidance for using the square root in the math module looks like this.

229
00:20:25.570 --> 00:20:34.720
We'd have to use the math module then put a dot after it and then write s q r t and provide a single

230
00:20:35.020 --> 00:20:43.810
argument let's use this functionality back in our lifetime P Y module on the same line where we have

231
00:20:43.810 --> 00:20:45.070
our return statement.

232
00:20:45.070 --> 00:20:54.640
We're going to write math dot Eskew on T and we're going to provide the same input the same parameter

233
00:20:54.970 --> 00:20:57.460
that we have for our function.

234
00:20:57.460 --> 00:21:01.590
So the name of that parameter in our case is x.

235
00:21:01.780 --> 00:21:05.950
Now again the exact name of this parameter doesn't really matter.

236
00:21:05.950 --> 00:21:09.730
We could've called this thing something else.

237
00:21:09.730 --> 00:21:11.940
In this case we'd have to be consistent.

238
00:21:11.980 --> 00:21:16.390
We'd have to call this something else as well.

239
00:21:16.390 --> 00:21:20.890
That way we're using the same parameter back in our Jupiter notebook.

240
00:21:20.890 --> 00:21:27.940
We said we'd go to kernel restart and run all to make sure that this works no matter what it is that

241
00:21:27.940 --> 00:21:31.350
you've been doing prior to getting to this point in the video.

242
00:21:31.360 --> 00:21:42.310
So here in our last cell we can write Hitchhiker's Guide dot square on the score route and then provide

243
00:21:42.310 --> 00:21:46.450
the value sixty three point one four.

244
00:21:46.450 --> 00:21:50.350
This was the last part of the challenge hitting shift enter.

245
00:21:50.350 --> 00:21:52.400
I can see an attribute error.

246
00:21:52.780 --> 00:21:56.600
Life has no attribute called square root.

247
00:21:56.680 --> 00:21:58.980
What do we forget to do.

248
00:21:59.230 --> 00:22:02.910
If you're getting this as well it's because you haven't saved your life.

249
00:22:02.920 --> 00:22:10.240
Dot P Why file and you can actually tell that they are unsafe changes by the little star in the name

250
00:22:10.240 --> 00:22:11.440
of the tab.

251
00:22:11.650 --> 00:22:19.150
So go to file hit save that little star will disappear and he'll say that your file was saved a few

252
00:22:19.150 --> 00:22:23.640
seconds ago hence pack in our Python notebook.

253
00:22:23.860 --> 00:22:28.510
We're gonna have to go again to Colonel restart and run all

254
00:22:35.750 --> 00:22:40.700
scrolling down now we can see that our cell has a valued it correctly.

255
00:22:40.940 --> 00:22:48.440
And the square root of sixty three point one four is about seven point nine five.

256
00:22:48.440 --> 00:22:49.640
So there you go.

257
00:22:49.640 --> 00:22:57.280
We've got the solution right below ourself but since our method here is returning a value let's save

258
00:22:57.290 --> 00:22:59.220
this value in a variable.

259
00:22:59.300 --> 00:23:08.810
So when I say result is equal to Hitchhiker's Guide dot square root and then below and when I just print

260
00:23:09.260 --> 00:23:16.430
the result and had shift enter so I hope this lesson helps demystify the code that we've written previously

261
00:23:16.850 --> 00:23:20.400
and explain what's going on behind the scenes.

262
00:23:20.750 --> 00:23:28.520
Looking at this line of code reading result is equal to Hitchhiker's Guide dot square root sixty three

263
00:23:28.520 --> 00:23:29.840
point one four.

264
00:23:29.930 --> 00:23:36.080
We can see that it's exactly the same pattern as with the python code that we wrote when we're doing

265
00:23:36.080 --> 00:23:37.530
our linear regression.

266
00:23:37.730 --> 00:23:38.390
There we wrote.

267
00:23:38.390 --> 00:23:43.110
Data is equal to PD dot read on the school V.

268
00:23:43.370 --> 00:23:45.910
We've got an object called PD.

269
00:23:46.160 --> 00:23:49.160
It has a method called read C.S. V.

270
00:23:49.370 --> 00:23:55.280
And that method is returning a value that we're storing in a variable called theta.

271
00:23:55.280 --> 00:23:56.030
Cool.

272
00:23:56.030 --> 00:23:58.790
So at this point you pretty much know python.

273
00:23:58.790 --> 00:24:04.360
So now Ryan Soyuz comic here can probably bring a smile to your face as well.

274
00:24:04.380 --> 00:24:10.120
Also I bet you're itching to use your python knowledge to run another regression.

275
00:24:10.130 --> 00:24:16.300
I'm gonna head off and grab a bite to eat now but I do look forward to seeing you in the next lesson.

276
00:24:16.310 --> 00:24:16.850
Take care.
