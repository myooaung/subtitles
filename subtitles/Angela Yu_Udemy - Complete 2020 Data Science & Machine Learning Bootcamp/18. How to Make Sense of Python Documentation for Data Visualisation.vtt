WEBVTT
1
00:00:01.300 --> 00:00:07.750
In this lesson we're going to apply all our Python programming knowledge to do the regression and analyze

2
00:00:07.750 --> 00:00:16.050
the data from a 1968 American study on how drugs affect math test scores.

3
00:00:16.180 --> 00:00:22.600
So we're going to be writing some Python code to visualize and plot our data and then we're going to

4
00:00:22.600 --> 00:00:31.810
run a linear regression to look at how well drug concentration in the tissue affects test performance

5
00:00:32.780 --> 00:00:37.820
but before we do that let's chat a little bit about the dataset that we're going to be using for this

6
00:00:37.820 --> 00:00:39.140
exercise.

7
00:00:39.170 --> 00:00:44.630
I was actually genuinely surprised when I found out that research like this even exists.

8
00:00:44.630 --> 00:00:52.370
But then again maybe the late 1960s where a different time in the United States in the original research

9
00:00:52.370 --> 00:00:59.510
paper the three academics by the names of Faulkner icon John Yang and Bing get five male volunteers

10
00:00:59.780 --> 00:01:04.600
to sit math tests after being injected with drugs.

11
00:01:04.670 --> 00:01:11.480
Now I reckon the fact that these drugs were administered intravenously speaks way more for the commitment

12
00:01:11.480 --> 00:01:18.760
of these five blokes than sitting math tests voluntarily handing out the specific drug in question is

13
00:01:18.760 --> 00:01:21.390
called and I hope I pronounced this right.

14
00:01:21.430 --> 00:01:32.220
D ly surging acid dye ethyl a mild or LSD 25 which Koogle tells me is a pretty potent hallucinogen and

15
00:01:32.230 --> 00:01:37.960
the way that this experiment worked is that these five blokes had to give seven blood samples after

16
00:01:37.960 --> 00:01:40.300
being injected with LSD.

17
00:01:40.810 --> 00:01:46.690
The amount of drugs that each dude was injected was actually proportional to their body weight so that

18
00:01:46.720 --> 00:01:51.370
each volunteer should be roughly affected more or less equally.

19
00:01:51.520 --> 00:01:59.140
The blood samples were taken from the volunteers after five minutes half an hour two hours four hours

20
00:01:59.320 --> 00:02:02.400
and again after eight hours.

21
00:02:02.410 --> 00:02:06.130
Now if you remember this is what you see in the first column of our data.

22
00:02:06.130 --> 00:02:16.530
Data from the second column labelled LSD on a school p p m is the tissue concentration of the drug measured

23
00:02:16.620 --> 00:02:21.610
in parts per million and after each blood sample was taken.

24
00:02:21.750 --> 00:02:28.050
The volunteers were sat down for a total of three minutes to solve as many arithmetic math problems

25
00:02:28.170 --> 00:02:29.620
as possible.

26
00:02:29.970 --> 00:02:33.950
And this brings me to our third column in the data frame.

27
00:02:34.050 --> 00:02:41.520
I've labeled this average under school math underscore test on the school school and the way these numbers

28
00:02:41.520 --> 00:02:49.020
are calculated is that first off the number shown in the column is actually the average of the five

29
00:02:49.020 --> 00:02:52.140
guys in the experiment.

30
00:02:52.140 --> 00:02:58.770
The second thing to note about these numbers is that the school is expressed as a percentage value and

31
00:02:58.770 --> 00:03:02.010
it's not like the number of questions that they got right.

32
00:03:02.190 --> 00:03:07.110
But it's a percentage of the control value.

33
00:03:07.350 --> 00:03:13.830
In other words the researchers knew how well people fared on average on their arithmetic tests and they

34
00:03:13.830 --> 00:03:20.910
compared the performance of the volunteers against that against the control test scores.

35
00:03:20.910 --> 00:03:27.210
Another way to think about this is that if there were 10 questions and the control group got around

36
00:03:27.300 --> 00:03:34.230
nine of them right then the volunteers got about three or thirty two point nine percent of the questions

37
00:03:34.230 --> 00:03:38.800
right 240 minutes or four hours into the experiment.

38
00:03:39.970 --> 00:03:47.100
Okay so we've imported pandas in our notebook and then we called the read CSB function to store our

39
00:03:47.100 --> 00:03:51.480
data in a data frame called data.

40
00:03:51.740 --> 00:03:55.290
How we've been messing around with our data quite a bit.

41
00:03:55.290 --> 00:04:02.130
So if you're curious what your data frame looks like at the bottom of your notebook then type data and

42
00:04:02.130 --> 00:04:03.960
press shift enter.

43
00:04:04.230 --> 00:04:10.620
If you just started this lesson and have not run the cells above then the Jupiter notebook will not

44
00:04:10.620 --> 00:04:13.520
recognize this variable in this case.

45
00:04:13.560 --> 00:04:18.720
You'll get a name error which means you have to go to cell and go to run all

46
00:04:24.040 --> 00:04:28.390
so that's a good thing to check if you're coming back to the Python intro.

47
00:04:28.390 --> 00:04:33.420
After taking a break here we can see what our data looks like right.

48
00:04:33.490 --> 00:04:41.740
We've got three columns and we're going to extract each column and put it into a separate variable.

49
00:04:41.740 --> 00:04:45.570
The first column I'm going to extract is gonna be called time.

50
00:04:45.610 --> 00:04:53.080
And I'm gonna set it equal to data square brackets and then when I pass in the name I'm going to say

51
00:04:53.370 --> 00:05:02.280
time on a score delay on the school in a school minutes minute shift and to see what it looks like.

52
00:05:02.650 --> 00:05:06.870
If I want to know what it looks like I can simply say print time.

53
00:05:07.210 --> 00:05:15.360
And here it is our variable called Time now contains a series containing the values of the first column.

54
00:05:15.580 --> 00:05:18.020
Let's do the same thing with the other two columns.

55
00:05:18.040 --> 00:05:26.120
So I want to create a variable called LSD set it equal to data square brackets and it was Ellis the

56
00:05:26.200 --> 00:05:33.820
underscore P p.m. And the third variable I'm going to create and then call school I'm going to set equal

57
00:05:33.820 --> 00:05:39.660
to data square brackets and then average math

58
00:05:45.070 --> 00:05:53.080
score I'm going to hit shift enter to make sure I haven't made any typos and this gives me confidence

59
00:05:53.350 --> 00:05:56.440
that my Python code is working.

60
00:05:56.440 --> 00:06:01.120
Now we're ready to start looking at our data in a graphical way.

61
00:06:01.210 --> 00:06:10.360
If you recall from previous lessons we've imported our plotting module as P.L. t so we can refer to

62
00:06:10.480 --> 00:06:16.390
our PI plot as PDT and visualize the data in these variables.

63
00:06:16.390 --> 00:06:23.560
So the easiest way to do this is to type peel T dot plot and supply into two things that we want to

64
00:06:23.560 --> 00:06:24.620
see.

65
00:06:24.640 --> 00:06:34.140
Let's say we want to look at the time vs. the amount of LSD in people's tissues hitting shift into doesn't

66
00:06:34.140 --> 00:06:35.660
show me anything.

67
00:06:35.660 --> 00:06:42.530
And that's because we need to give our pipeline the instruction to show us the graph so going to write

68
00:06:42.550 --> 00:06:44.460
PDT don't show

69
00:06:47.880 --> 00:06:56.770
and this gives me a graph that looks like this what this plot is showing us is the amount of elastic

70
00:06:56.770 --> 00:07:00.180
tissue concentration over time.

71
00:07:00.220 --> 00:07:08.230
So we've got eight data points and we're simply plotting a line chart for the x axis on this chart we

72
00:07:08.230 --> 00:07:15.140
have supplied our time for the y axis we have supplied our unless the variable.

73
00:07:15.160 --> 00:07:23.570
Now check this out at the moment our plot takes two arguments right time and LSD.

74
00:07:23.650 --> 00:07:30.760
However we're not limited to just providing these two we can actually provide more arguments including

75
00:07:31.240 --> 00:07:34.030
an argument for the color of the graph.

76
00:07:34.450 --> 00:07:36.940
So I'm going to put a comma here and write.

77
00:07:36.940 --> 00:07:47.470
Color equals and then single quotes G GEE IF I HAD shift end to now we see the line color change to

78
00:07:47.470 --> 00:07:48.880
green.

79
00:07:48.880 --> 00:07:57.400
Now a reasonable question to ask is How did you know that you can supply a color argument with a keyword

80
00:07:57.640 --> 00:07:59.450
just like this.

81
00:07:59.620 --> 00:08:06.010
And the answer is I didn't know until I looked at the official documentation that's available for Pi

82
00:08:06.040 --> 00:08:06.830
plot.

83
00:08:07.300 --> 00:08:14.380
Being able to read and interpret the official documentation that's available for each of these components

84
00:08:14.710 --> 00:08:20.910
is one of the key skills at getting good at Python programming so check this out.

85
00:08:20.930 --> 00:08:27.710
We're gonna head down to the part of the documentation that gives us information on the plotting method.

86
00:08:27.710 --> 00:08:32.780
This is the part of the documentation where we can find out more about the plotting method.

87
00:08:32.780 --> 00:08:37.870
We've got the name of our method up here namely plot hand inside the parentheses.

88
00:08:37.910 --> 00:08:40.020
We can see it take some arguments.

89
00:08:40.280 --> 00:08:45.980
Now the documentation provide some examples as well as information about what these arguments could

90
00:08:45.980 --> 00:08:47.150
be.

91
00:08:47.150 --> 00:08:54.680
The first thing that we did was that we plotted time vs. drug concentration in tissue so we just had

92
00:08:54.800 --> 00:08:58.670
two arguments hand in the documentation.

93
00:08:58.670 --> 00:09:04.420
We can see that this is the way to create a plot using the default styles and colors.

94
00:09:05.240 --> 00:09:13.640
However in addition to these standard x and y arguments we can supply some additional arguments.

95
00:09:13.640 --> 00:09:24.080
This is where we come across this term called K W args k w args is an abbreviation for keyword arguments.

96
00:09:24.550 --> 00:09:30.540
Add an example of a keyword argument is r color scrolling down.

97
00:09:30.610 --> 00:09:38.590
We can also see that G is a supported color abbreviation hence scrolling down even further we can see

98
00:09:38.650 --> 00:09:47.880
a handy list of the keyword arguments that we can use on our plot method so right here we can see that

99
00:09:47.880 --> 00:09:52.200
color is one of these keyword arguments but there are others too.

100
00:09:52.230 --> 00:09:57.060
For example line style or line width.

101
00:09:57.060 --> 00:10:00.630
Let's add the line with keyword argument to our Python code.

102
00:10:00.630 --> 00:10:02.960
Now here's how we can do it.

103
00:10:03.030 --> 00:10:06.910
We'll just add a comma and then write.

104
00:10:06.960 --> 00:10:09.360
Line width equals.

105
00:10:09.360 --> 00:10:10.620
I don't know say 10

106
00:10:13.290 --> 00:10:17.360
hitting shift enter updates the chart hand.

107
00:10:17.370 --> 00:10:22.690
Well we can see that now it has a very very thick green line in it.

108
00:10:22.770 --> 00:10:24.980
Ten is probably a little bit too thick for my taste.

109
00:10:24.990 --> 00:10:27.170
I'm going to go with three.

110
00:10:27.180 --> 00:10:27.960
There you go.

111
00:10:27.960 --> 00:10:30.200
This is not so bad.

112
00:10:30.240 --> 00:10:37.260
The other thing to think about with visualization and looking at data is that design is actually quite

113
00:10:37.260 --> 00:10:45.900
important in data visualization because if you think about it the end goal is showing our data to people

114
00:10:46.560 --> 00:10:53.730
and that's why we both need to make it look clear and we need to make it look pretty because typically

115
00:10:54.000 --> 00:10:59.610
you and I are gonna be in a position where we're going to have to press both our bosses and our customers

116
00:11:00.210 --> 00:11:06.300
have everybody judges a book by its cover I'm afraid so our chant is going to have to look a lot better

117
00:11:06.510 --> 00:11:08.270
than it is right now.

118
00:11:09.210 --> 00:11:13.160
The first thing to note is that we're going to add text to our chart.

119
00:11:13.170 --> 00:11:20.340
We have to add labels to these axes and a title to the chant so that people know what it is they're

120
00:11:20.340 --> 00:11:22.800
actually looking at.

121
00:11:22.800 --> 00:11:26.540
The second thing is that we don't actually have to stick to the default colors.

122
00:11:26.550 --> 00:11:29.800
We don't have to stick to a generic green or red.

123
00:11:29.820 --> 00:11:37.090
We can add a custom color and we do that by supplying a colors hex code.

124
00:11:37.440 --> 00:11:42.500
So here's a mini crash course in design a hex code looks something like this.

125
00:11:42.500 --> 00:11:50.100
It has a little hash tag and then it has one two three four five numbers or digits that come after it

126
00:11:51.520 --> 00:11:57.240
and other words a hex code is just like a particular I.D. for a color.

127
00:11:57.240 --> 00:12:02.700
Now what you'll want to do is you'll want to go to a Web site like say flat UI colors to grab these

128
00:12:02.700 --> 00:12:09.900
hex codes of colors that have already been curated for you because quite frankly these colors look really

129
00:12:09.900 --> 00:12:11.060
really good.

130
00:12:11.190 --> 00:12:13.350
So let's grab the hex code for this.

131
00:12:13.370 --> 00:12:20.940
Read this alpha in here and then when we go back to our plot we can supply this hex code instead of

132
00:12:20.940 --> 00:12:24.670
this g hitting shift enter.

133
00:12:24.720 --> 00:12:29.800
I can see that now my line has been updated to this beautiful red.

134
00:12:29.800 --> 00:12:35.430
I have a great resource to be aware of to find beautiful colors by the way is a website called material

135
00:12:35.430 --> 00:12:36.950
palette.

136
00:12:36.960 --> 00:12:41.000
If you want to include more than one color in your chart you can click on two of these.

137
00:12:43.150 --> 00:12:48.920
And you'll get an eight color color palette that you can use in your designs these kind of tricks are

138
00:12:48.920 --> 00:12:53.300
really handy for making something look beautiful really really quickly.

139
00:12:53.300 --> 00:12:56.340
So let's add some text to our graph.

140
00:12:56.360 --> 00:13:06.410
First off I'm going to give this graph a title so going to say PDT dot title parentheses single quotes

141
00:13:08.540 --> 00:13:09.920
tissue concentration

142
00:13:15.890 --> 00:13:25.220
of LSD over time and then I'll shift enter Excellent.

143
00:13:25.330 --> 00:13:29.920
But I do think that this title is a little bit small.

144
00:13:29.980 --> 00:13:35.100
So again we're gonna use a keyword argument to set the font size here.

145
00:13:35.230 --> 00:13:39.980
So the arguments name is font size.

146
00:13:40.090 --> 00:13:46.550
No surprises the elements that the font size 2 17 hitting shift enter updates.

147
00:13:46.600 --> 00:13:48.090
My chart.

148
00:13:48.250 --> 00:13:50.200
Now let's put some labels on these axes

149
00:13:52.950 --> 00:14:06.780
for the X axes will right peel T dot X label parentheses single quotes time in minutes and we'll set

150
00:14:06.780 --> 00:14:16.380
the font size for that equal to say 14 hitting shift and to can see our change right away.

151
00:14:17.570 --> 00:14:25.120
So now our x axis has a nice looking label when it do the same thing for our y axis.

152
00:14:25.150 --> 00:14:31.950
And notice how every time we write peel T which is our object put a dot after it and then we're calling

153
00:14:32.760 --> 00:14:35.160
a method on our object

154
00:14:37.890 --> 00:14:43.550
so to put that y label on they're going to see peeled heat up y labels single quotes tissue

155
00:14:46.390 --> 00:14:48.780
tissue Alice the P M

156
00:14:51.730 --> 00:14:57.320
font size equals 14.

157
00:14:57.320 --> 00:14:57.830
There you go.

158
00:15:00.300 --> 00:15:04.340
Now these aren't the only ways of adding text to our graph by the way.

159
00:15:04.440 --> 00:15:11.640
We can also add text in freeform more or less so if you want to add a little footnote to the graph we

160
00:15:11.640 --> 00:15:16.750
can do that and have it display where our data came from.

161
00:15:16.860 --> 00:15:23.450
So let's take a look at the documentation for adding arbitrary text to our graph.

162
00:15:24.480 --> 00:15:30.930
Here we can see that our text method has multiple arguments that it takes some of these are optional

163
00:15:31.410 --> 00:15:35.030
and some of these are required.

164
00:15:35.100 --> 00:15:40.660
The first thing you'll notice is that we have to supply an x value and a y value.

165
00:15:40.710 --> 00:15:46.980
These are the coordinates of where the text should be in the picture and the second thing that you'll

166
00:15:46.980 --> 00:15:50.520
notice is that the X stands for string.

167
00:15:50.700 --> 00:15:53.940
And this is just the piece of text that should be displayed.

168
00:15:53.940 --> 00:16:00.840
So we have to supply coordinates for the text as well as what the text should be.

169
00:16:00.840 --> 00:16:02.070
Let's try this out.

170
00:16:02.970 --> 00:16:05.640
So coming back here we can see PDT.

171
00:16:05.730 --> 00:16:07.830
Don't text.

172
00:16:07.830 --> 00:16:15.980
Now I don't know exactly where the text should go so going to say X is gonna be equal to zero.

173
00:16:16.230 --> 00:16:26.340
Y is gonna be equal to zero and our string text itself is gonna read VoG are at 0.

174
00:16:26.520 --> 00:16:29.060
Nineteen sixty eight

175
00:16:31.980 --> 00:16:33.500
maybe some parentheses here as well.

176
00:16:34.950 --> 00:16:42.360
Let's press shift enter now and see where these 0 0 coordinates actually are scrolling down.

177
00:16:42.420 --> 00:16:45.690
I can see that it places the text right here.

178
00:16:45.690 --> 00:16:55.400
If X is equal to zero and y is equal to zero let's see what happens when y is equal to say 5 when y

179
00:16:55.400 --> 00:17:05.690
is equal to find if it moves our text up here and when y is equal to say negative 1 I can see that it

180
00:17:05.690 --> 00:17:08.470
moves our text down here.

181
00:17:08.480 --> 00:17:12.150
So this is pretty good we know where the origin is.

182
00:17:12.180 --> 00:17:19.080
We know that positive number moves the text up and a negative number on the y value moves the text down.

183
00:17:19.160 --> 00:17:29.010
Reckon that a good amount for this y value might be something like zero point five try to get this arranges

184
00:17:29.010 --> 00:17:31.050
it very nicely.

185
00:17:31.440 --> 00:17:38.270
Now at the moment our font size for this piece of text is the default font size.

186
00:17:39.030 --> 00:17:47.590
We can set our own value again by providing the font size argument and say setting it to twelve there

187
00:17:47.600 --> 00:17:52.320
we go how it since we're setting the font size on a lot of things.

188
00:17:52.440 --> 00:17:59.100
We can also specify the font size of these numbers that are on the axes.

189
00:17:59.130 --> 00:18:04.760
Say we wanted the numbers on the axis to be the same font size as the label here.

190
00:18:04.860 --> 00:18:16.530
So I could write something like BLT daunt X takes parentheses font size equals 14 and peel t taught

191
00:18:16.620 --> 00:18:23.030
16 parentheses font size equals 14.

192
00:18:23.310 --> 00:18:32.090
If a hit shift entered now we can see that the numbers now have the same size as our labels and another

193
00:18:32.100 --> 00:18:40.370
thing that we can do on these axes is to set hard values for the range that they should cover.

194
00:18:40.380 --> 00:18:47.630
So for example we know that our time delay in minutes is going to be between zero and 500.

195
00:18:47.850 --> 00:18:54.450
And we also know that the parts per million are going to be between one and say six point five or seven

196
00:18:59.740 --> 00:19:01.180
to set a hard range.

197
00:19:01.210 --> 00:19:10.240
We can write something like T dot y limb limb for limit and provide two values a lower bound which is

198
00:19:10.240 --> 00:19:16.180
say one and an upper bound which is to say I don't know seven hitting shift enter.

199
00:19:16.560 --> 00:19:23.110
We can now see that our chart has updated so it's no longer determining automatically what the range

200
00:19:23.110 --> 00:19:24.390
of values should be.

201
00:19:24.430 --> 00:19:26.820
That should be displayed on the y axis.

202
00:19:26.920 --> 00:19:33.130
We have now specified our own range that we'd like to show namely we'd like to have the chance to show

203
00:19:33.130 --> 00:19:41.230
the values between 1 and 7 we can do the same thing for the x axis by writing PDT dot excellent and

204
00:19:41.230 --> 00:19:47.020
providing a lower bound of zero and an upper bound of 500.

205
00:19:47.030 --> 00:19:52.820
The reason I'm trying to show all this is to get this idea across that we're kind of breaking up our

206
00:19:52.820 --> 00:20:01.660
Python code into two sections if you will for the chart we're doing the styling and then down here we're

207
00:20:01.670 --> 00:20:03.160
actually plotting the data.

208
00:20:03.220 --> 00:20:09.410
And what's interesting to note about this is that the amount of code that's written to style the chant

209
00:20:10.010 --> 00:20:13.020
is actually getting longer and longer and longer.

210
00:20:13.040 --> 00:20:20.450
This is one of the reasons why that plot lib comes with something called built in styles these built

211
00:20:20.450 --> 00:20:26.450
in styles can act as a shortcut or a template to help you reduce the amount of code that you need to

212
00:20:26.450 --> 00:20:28.490
write to make something look pretty.

213
00:20:28.880 --> 00:20:37.100
In our previous lessons we've used the 538 style for our chart but there is actually many other styles

214
00:20:37.190 --> 00:20:42.500
that you can choose from one of the handy things to look at is actually the style of gallery.

215
00:20:42.560 --> 00:20:45.120
And here you can see for example the name of the style.

216
00:20:45.140 --> 00:20:49.980
So the first one it's called B MH and the second one's called Classic.

217
00:20:50.240 --> 00:20:56.750
And the third one is called Donk on the school background and you can scroll down to see what these

218
00:20:56.750 --> 00:21:01.370
different styles translate into if you're actually going to plot a chant.

219
00:21:01.370 --> 00:21:05.500
Now mind you this is actually an unofficial style guide that I found very very helpful.

220
00:21:05.510 --> 00:21:12.890
The official one looks something like this how I find both of these really really helpful in deciding

221
00:21:13.160 --> 00:21:19.790
what kind of template I should go with for my chance to apply any of these particular styles to your

222
00:21:19.790 --> 00:21:20.730
chart.

223
00:21:20.750 --> 00:21:24.200
All you have to do is write PDT dot style.

224
00:21:24.260 --> 00:21:30.060
Don't use and then provide the name of the particular template.

225
00:21:30.080 --> 00:21:33.770
So say we use classic if I had shift enter.

226
00:21:34.310 --> 00:21:36.410
I can see my chart update.

227
00:21:36.530 --> 00:21:40.470
This is what it would look like using the classic style.

228
00:21:40.550 --> 00:21:42.190
Of course you can put anything you want in here.

229
00:21:42.470 --> 00:21:49.850
So if you wanted to use say doc on a school background which is the name of another style then we'll

230
00:21:49.850 --> 00:21:50.990
get this

231
00:21:55.670 --> 00:22:01.010
I think one of the other names that I saw on the gallery was G.G. plot.

232
00:22:01.010 --> 00:22:03.610
So we just had shift enter here.

233
00:22:03.610 --> 00:22:09.190
Now one thing you'll notice is that maybe the style won't be applied right away.

234
00:22:09.190 --> 00:22:14.740
So if you see that happen to you just click into the cell and it shift into again.

235
00:22:15.100 --> 00:22:17.480
Then you should see the style applied.

236
00:22:17.990 --> 00:22:19.520
So I'm going to go with classic

237
00:22:23.210 --> 00:22:30.250
how the last thing we'll do with our plotting code is add a line of code into the cell so that our beautiful

238
00:22:30.250 --> 00:22:34.150
chance can be exported when we export our notebook.

239
00:22:34.510 --> 00:22:40.900
You see at the moment our chants are generated when this code is run but if we a percentage sign and

240
00:22:40.900 --> 00:22:52.500
then bright matte plot lib space in line then we are telling Jupiter notebook to export these chants

241
00:22:53.040 --> 00:23:00.930
along with the notebook when we go to file download as notebook.

242
00:23:01.650 --> 00:23:06.750
In other words this line of code here is Jupiter notebook specific.

243
00:23:06.780 --> 00:23:08.640
Now it's time to run our regression.
