WEBVTT
1
00:00:00.930 --> 00:00:01.830
All right.

2
00:00:02.070 --> 00:00:07.420
So in this lesson we're gonna be covering some advanced data visualization techniques.

3
00:00:07.530 --> 00:00:12.800
And I want to show you how to create 3-D charts in Python.

4
00:00:13.590 --> 00:00:17.840
So let's start off with a section heading.

5
00:00:17.860 --> 00:00:20.530
Change this to markdown.

6
00:00:20.960 --> 00:00:35.310
And I'm going to use the pound symbol and then right example for data of is with 3D charts and in the

7
00:00:35.310 --> 00:00:36.530
same markdown cell.

8
00:00:36.530 --> 00:00:40.810
We're only playing with a little bit more of the latest notation.

9
00:00:40.830 --> 00:00:43.860
Let me show you the function that we're going to minimize.

10
00:00:43.860 --> 00:00:47.050
This function will have two variables.

11
00:00:47.050 --> 00:00:54.020
So it's both going to have an X and Y and we'll have to minimize our cost across both of these inputs.

12
00:00:54.030 --> 00:01:00.680
So both of these parameters will have to be optimized in order to minimize the cost.

13
00:01:00.690 --> 00:01:03.800
So here's what our cost function will look like.

14
00:01:03.810 --> 00:01:16.410
So I'm going to add a subheading and I'll say minimize to Dollar Signs F of X comma Y is equal to and

15
00:01:16.410 --> 00:01:26.910
then I'm going to use the backslash to put in a keyword here F R A C Frank frac for fraction and then

16
00:01:26.910 --> 00:01:34.530
I'm going to use a curly brace of one close the curly brace and then have another opening clip race

17
00:01:34.680 --> 00:01:40.560
and then put it two and another close in curly brace and then when I put two dollar signs at the end

18
00:01:41.430 --> 00:01:48.210
for my closing tag and Hillary press shift and to show you what this late notation actually looks like.

19
00:01:48.390 --> 00:01:57.090
So what you see here is that we've created a fraction by using this tag right here the top part of the

20
00:01:57.090 --> 00:02:03.690
fraction is between the first set of curly braces and the bottom part of the fraction is in the second

21
00:02:04.050 --> 00:02:06.360
pair of curly braces.

22
00:02:06.360 --> 00:02:13.440
The function that we're actually gonna be minimizing isn't one 1/2 it is three to the power of.

23
00:02:13.440 --> 00:02:22.920
And then it'll be another opening curly brace minus X to the power of two minus Y to the power of two

24
00:02:23.310 --> 00:02:27.270
closing curly brace and then I'll add one at the end.

25
00:02:27.930 --> 00:02:31.050
Now let me shift enter to show you what this function looks like.

26
00:02:31.060 --> 00:02:31.630
Voila.

27
00:02:31.970 --> 00:02:38.900
Now a nice little trick with complicated functions like this is that we can split it up a little bit.

28
00:02:38.910 --> 00:02:47.010
This also makes it easier to write it in the python code so we can also write it like this can say minimize

29
00:02:47.370 --> 00:02:59.820
to Dollar Signs f of x y is equal to and then have again the backslash fraction curly brace one and

30
00:02:59.820 --> 00:03:08.970
then another curly brace R plus one closing curly brace to DOLLAR SIGNS AND THEN WHERE ALL THE SIGN

31
00:03:09.060 --> 00:03:18.870
ARE CLOSING dollar sign is and then another dollar sign three to the power of opening curly brace minus

32
00:03:18.960 --> 00:03:29.450
X to the power of two miners y to the power of two closing curly brace and then another dollar sign.

33
00:03:29.550 --> 00:03:34.350
And what this line of markdown will nicely do is show us again the difference between using two dollar

34
00:03:34.350 --> 00:03:41.400
signs in the latex markdown or one dollar sign in a late take markdown.

35
00:03:41.400 --> 00:03:47.520
So if that double dollar sign we get that equation centered and with a single dollar sign we get that

36
00:03:47.910 --> 00:03:50.490
notation in line.

37
00:03:50.490 --> 00:03:53.950
Now let's write the python code to express this function.

38
00:03:54.210 --> 00:04:00.630
So I'm going to go with the second way of expressing this equation because I think it makes it much

39
00:04:00.630 --> 00:04:02.570
more clear and easy.

40
00:04:02.640 --> 00:04:17.970
So Mercedes F F X comma Y colon R is equal to three times times open parentheses minus X times times

41
00:04:17.970 --> 00:04:23.690
2 minus Y times times 2.

42
00:04:24.030 --> 00:04:32.040
And then I'll say return 1 divided by parentheses R plus 1.

43
00:04:32.100 --> 00:04:33.480
And I'll shift enter.

44
00:04:33.990 --> 00:04:39.270
And this is what our function looks like in Python.

45
00:04:39.930 --> 00:04:46.020
So even though we could have written all of this in one line here after the return keyword I find it

46
00:04:46.020 --> 00:04:48.790
much more readable if we split it up like this.

47
00:04:48.840 --> 00:04:51.660
Now let's create a chart with this function.

48
00:04:51.660 --> 00:04:58.500
Let's see what this actually looks like on a graph has always with chants we've got to make some data

49
00:04:58.500 --> 00:05:04.410
first so we're going to use that Lynn space function again but this time we're gonna create data for

50
00:05:04.470 --> 00:05:07.320
both our x's and our y.

51
00:05:07.380 --> 00:05:15.540
So I'm going to create a variable called X under school for it's equal to end p for num pi Lin space

52
00:05:16.200 --> 00:05:28.890
parentheses start equals minus two stop equals two and then and u m equals two hundred and I'll do the

53
00:05:28.890 --> 00:05:38.220
same for our y because we've got two variables now so we'll have Y underscore for equals and p dot Lin

54
00:05:38.220 --> 00:05:49.340
space start equals minus two comma stop equals to come up and um equals two hundred.

55
00:05:49.350 --> 00:05:55.260
So while we're at it let's take a look at what the type of x under school 4 actually is what type of

56
00:05:55.380 --> 00:05:57.420
object is this.

57
00:05:57.420 --> 00:06:05.700
We can see that Lin space gives us a num pi array and end the array and we can also see the same thing

58
00:06:06.060 --> 00:06:14.130
if I move my cursor overland space hit shift tab and then I can see here if I press the plus sign

59
00:06:18.180 --> 00:06:27.660
and I scroll down it returns a and the array Yeah the Lin space function returns an end the array so

60
00:06:27.660 --> 00:06:33.340
I can see this both if I print out the type or if I take a look at the documentation.

61
00:06:33.780 --> 00:06:39.720
Now the interesting thing with the arrays is that they have a shape they have rows and they have columns.

62
00:06:39.720 --> 00:06:49.080
So what we can do is we can look at the shape of this array we can see shape of X array comma X underscore

63
00:06:49.230 --> 00:06:59.330
for dot shape yeah so shape is an attribute of the end the array so let's put this out see what we get

64
00:06:59.870 --> 00:07:05.350
so we can see that we've got a one dimensional array with two hundred rows.

65
00:07:05.480 --> 00:07:12.290
Hey mathematician would refer to this type of data structure as a vector.

66
00:07:13.010 --> 00:07:21.590
Let's keep that in mind for later and move on to trying to plot stuff but before we dive into plotting

67
00:07:21.590 --> 00:07:27.200
things right away let's have a quick think about what a plot might consist of.

68
00:07:27.200 --> 00:07:34.340
If we look at our previous Python code that say generated this plot right here what we see is that our

69
00:07:34.340 --> 00:07:40.670
chart is in fact made up of different pieces that come together for the final product.

70
00:07:40.670 --> 00:07:47.180
So for example we had our data points that were plotted as a scatter plot on the diagram and this was

71
00:07:47.180 --> 00:07:50.440
separate from the line that was being charted.

72
00:07:50.480 --> 00:07:58.400
Also our plot had other bits of information to write it had things like title and labels and so on.

73
00:07:58.400 --> 00:08:03.620
The point I'm trying to make is that we've actually used several different types of Python objects to

74
00:08:03.620 --> 00:08:11.450
make our final chance in this lesson we're gonna be generating a 3D plot that will look something like

75
00:08:11.450 --> 00:08:12.650
this.

76
00:08:12.710 --> 00:08:18.380
However to make this 3D plot we have to stop manipulating other types of Python components that make

77
00:08:18.380 --> 00:08:19.950
up this diagram.

78
00:08:20.120 --> 00:08:26.570
These Python components include the figure object and the axes object.

79
00:08:26.570 --> 00:08:28.670
Now we've already met the figure.

80
00:08:28.670 --> 00:08:31.390
Remember how we sized our plots previously.

81
00:08:31.790 --> 00:08:35.640
We did that by manipulating the figures size.

82
00:08:35.900 --> 00:08:44.660
So let's come down here add a little comment generating 3D plot and let's size our new plot with PDT

83
00:08:44.870 --> 00:08:58.050
dot figure parentheses fig size equals and then we'll pass in a list with the square brackets sixteen

84
00:08:58.740 --> 00:09:00.050
and twelve.

85
00:09:00.750 --> 00:09:03.810
So this is how we sized our figure always.

86
00:09:03.810 --> 00:09:06.330
Now here's something new that we can do with this code.

87
00:09:06.330 --> 00:09:15.090
If a head shift tab on this function then I can see by expanding the documentation and scrolling down

88
00:09:18.120 --> 00:09:21.180
that this function in fact returns something.

89
00:09:21.210 --> 00:09:29.040
This figure function has an output and it returns well it returns a figure yeah a figure.

90
00:09:29.040 --> 00:09:31.660
Instance will be returned.

91
00:09:31.990 --> 00:09:37.890
And since this bit of code has an output we can actually store that output somewhere.

92
00:09:37.890 --> 00:09:46.860
So I'm going to create an object call it fig and set it equal to the output from this bit of code here.

93
00:09:46.920 --> 00:09:52.710
So now our figure object is stored in a variable called Fig.

94
00:09:53.040 --> 00:09:56.850
At this point you might be asking what's a figure.

95
00:09:56.850 --> 00:10:04.680
And the answer is it's a little bit abstract conceptually a figure is just a math plot lib object that

96
00:10:04.770 --> 00:10:12.180
allows us to manipulate our final chart in certain ways like by say changing the size or adding axes

97
00:10:12.180 --> 00:10:13.320
to the chart.

98
00:10:13.440 --> 00:10:21.180
In fact you can think of a figure as a kind of top level container that contains other elements in the

99
00:10:21.180 --> 00:10:21.990
chart.

100
00:10:22.020 --> 00:10:28.790
That's just how the map plot lib library is structured in their code that we're using.

101
00:10:28.830 --> 00:10:35.880
The figure is a container for other bits of the chart not a follow up question is what kind of other

102
00:10:35.940 --> 00:10:39.520
elements are contained in a figure.

103
00:10:39.550 --> 00:10:47.880
Well one element actually is the charts axes and we are particularly interested in the charts axes because

104
00:10:47.880 --> 00:10:49.440
we're gonna have to manipulate them.

105
00:10:49.650 --> 00:10:52.380
So the axes we're going to store in a variable as well.

106
00:10:52.530 --> 00:11:07.880
So going to say a X is equal to Fig dot G C A print the C's projection equals then the string 3 D.

107
00:11:08.010 --> 00:11:15.540
So what's happening here is that we're calling a function called GCA which is short for get current

108
00:11:15.720 --> 00:11:16.650
axes.

109
00:11:16.650 --> 00:11:22.740
So we're getting the axes from the figure and we're storing them in a variable as well.

110
00:11:22.920 --> 00:11:31.850
So our fig object came in handy here on this line because we're using the fig object to grab our axes.

111
00:11:31.950 --> 00:11:37.980
Now I can't actually run the code like this a press shift into I'm going to get an error

112
00:11:42.370 --> 00:11:48.230
and the error reads value error unknown projection 3D.

113
00:11:48.670 --> 00:11:55.630
The reason we're getting this error is because we have to import our 3D axes into our Python notebook

114
00:11:55.860 --> 00:12:01.930
so we're screwed back up all the way where we had notebook inputs and packages.

115
00:12:01.930 --> 00:12:19.210
And here I'm going to add the code from NPL under school tool kits don't and plot 3D Dot axes 3D import

116
00:12:20.110 --> 00:12:26.070
capital a axes three and then capital D.

117
00:12:26.260 --> 00:12:27.560
So it's quite a mouthful.

118
00:12:27.610 --> 00:12:29.800
We're importing something very specific.

119
00:12:29.950 --> 00:12:38.170
So from NPL underscore toolkits stunt and plot 3D Dot axes 3D import axes 3D.

120
00:12:38.950 --> 00:12:47.010
And then going to have to hit shift into on this import that way we've refreshed our Python notebook.

121
00:12:47.260 --> 00:12:53.860
And if I scroll all the way down to the bottom I can now go to the cell and actually run it.

122
00:12:53.950 --> 00:13:02.760
It will recognise our 3D axes and will actually generate an empty chart for us like this.

123
00:13:02.830 --> 00:13:03.060
Okay.

124
00:13:03.070 --> 00:13:09.910
When I click back into the cell and add our next line of code because now that we've got our 3D axes

125
00:13:10.270 --> 00:13:13.180
we can try plotting our function on them.

126
00:13:13.450 --> 00:13:16.280
The method that we're going to call on our axes object.

127
00:13:16.480 --> 00:13:25.870
So writing a X dot is called plot surface so we're not plotting a line were plotting a surface because

128
00:13:25.870 --> 00:13:33.950
now we're in 3D space so we'll see a plot surface parentheses and then we have to feed our data to it.

129
00:13:33.970 --> 00:13:42.400
So we're going to say X underscore for and then Y underscore for and then for our z axis a third dimension

130
00:13:42.460 --> 00:13:53.170
it's gonna be f x underscore for comma Y underscore for and then two parentheses at the end.

131
00:13:53.170 --> 00:13:58.510
So this is the function that we want to call to actually plot a 3D chart and we're doing this on the

132
00:13:58.540 --> 00:14:05.870
3D axes object itself but before on this there's still something I have to do.

133
00:14:05.890 --> 00:14:13.600
So let me quickly pull up the documentation here by pressing shift and then tab on my keyboard and hitting

134
00:14:13.600 --> 00:14:22.630
the little plus sign here we can see in the signature that three required inputs and X Y and Z but scrolling

135
00:14:22.630 --> 00:14:30.970
down we can also read that these three inputs need to be 2d arrays.

136
00:14:30.970 --> 00:14:33.100
So they need to have two dimensions.

137
00:14:33.620 --> 00:14:42.100
But let me ask you this is X underscore for and Y underscore for a 2D array as it is right now.

138
00:14:42.430 --> 00:14:43.480
The answer is no.

139
00:14:44.560 --> 00:14:50.980
If we look here our shape that we've printed out is in fact showing us that we have a one dimensional

140
00:14:50.980 --> 00:14:51.730
array.

141
00:14:51.880 --> 00:14:56.500
So it's got two rows but it's only got one dimension.

142
00:14:56.800 --> 00:15:02.770
So there's something we have to do we have to make this two dimensional and we add some more lines on

143
00:15:02.830 --> 00:15:07.110
the top here to meet our requirement for our plot surface function.

144
00:15:07.120 --> 00:15:14.590
We have to transform our X underscore for and our y underscore for two a two dimensional array.

145
00:15:14.650 --> 00:15:20.350
So I've got a one dimensional vector and it should become a two dimensional matrix.

146
00:15:20.590 --> 00:15:25.180
And this is where our good friend num pi comes to the rescue.

147
00:15:25.180 --> 00:15:31.840
Once again we've got a really really good name pi function called mesh grid that we're gonna make use

148
00:15:31.840 --> 00:15:34.840
of to do just that.

149
00:15:34.840 --> 00:15:41.640
So I'm going to type x underscore for comma Y underscore for is equal to.

150
00:15:41.860 --> 00:15:44.930
You'll notice I'm using sequence unpacking here.

151
00:15:45.040 --> 00:15:48.820
So X and is go for comma Y let's go for is equal to.

152
00:15:48.860 --> 00:15:57.610
Dot mesh grid parentheses x underscore for Y on the school for.

153
00:15:57.610 --> 00:15:59.500
So what does mesh grid do.

154
00:15:59.500 --> 00:16:08.530
If I look at the docs I can see that this method returns a coordinate matrix from a coordinate vector

155
00:16:09.010 --> 00:16:17.680
so it will return to us a two dimensional array given a one dimensional array let's print out the shape

156
00:16:17.770 --> 00:16:27.970
so I can prove this to you I'll see array after the mesh grid comma X underscore for dot shape it's

157
00:16:27.970 --> 00:16:36.970
run this again and here we see that our array now is two hundred rows by two hundred columns.

158
00:16:37.310 --> 00:16:43.930
So I can show you what this would look like actually but I'm not going to show you a 200 by 200 matrix

159
00:16:44.440 --> 00:16:46.900
I'll just show you a five by five.

160
00:16:46.900 --> 00:16:56.170
So want to change the arguments here to our Lynn space function and then downhill say X underscore for

161
00:16:56.820 --> 00:17:02.200
and we can actually see what it looks like if it was a five by five matrix.

162
00:17:02.200 --> 00:17:09.500
So this still is two dimensional in contrast to what it was before we called the mesh grid function.

163
00:17:09.670 --> 00:17:16.260
This print statement is showing us that here at this point it was still one dimensional but by the time

164
00:17:16.260 --> 00:17:21.660
we've run mesh grid it has become two dimensional.

165
00:17:21.660 --> 00:17:22.000
All right.

166
00:17:22.050 --> 00:17:31.350
So delete this really quick here and I'll change our arguments back to two hundred and I'll read one

167
00:17:31.350 --> 00:17:32.400
the cell.

168
00:17:32.400 --> 00:17:34.980
Now it's time to look at our 3D chart.

169
00:17:34.980 --> 00:17:44.640
So let me add peel teed off show parentheses and head shift and scrolling down we see our beautiful

170
00:17:44.760 --> 00:17:52.260
surface being plotted on a 3D axis just like this.

171
00:17:52.260 --> 00:17:53.250
Very nice.

172
00:17:53.250 --> 00:17:55.950
So I'm very proud of our creation here.

173
00:17:56.250 --> 00:17:59.890
But the I think it could use some improvements.

174
00:17:59.940 --> 00:18:04.590
For starters I can't really tell which axes is which.

175
00:18:04.590 --> 00:18:06.440
Just by looking at this.

176
00:18:06.450 --> 00:18:11.980
So what we're gonna do is we're gonna add some labels to our axes.

177
00:18:12.000 --> 00:18:12.810
Now here's the thing.

178
00:18:12.810 --> 00:18:17.130
Previously we've added peel t dot X label.

179
00:18:17.130 --> 00:18:26.730
Yeah and had a function call like this but we've got a 3D chart and so we're going to call our method

180
00:18:26.880 --> 00:18:28.440
on our axes object.

181
00:18:28.440 --> 00:18:39.810
So we gonna see a X dot set underscore X label and then we'll pass in the string X with a font size

182
00:18:41.980 --> 00:18:51.520
equal to 20 and I'm gonna copy this code paste it two more times but instead of the X label I'll have

183
00:18:51.520 --> 00:18:55.510
the Y label and the Z label as well.

184
00:18:55.510 --> 00:19:07.300
And of course I'm wouldn't change the string to display to Y and then I'll change the z axes to f parentheses

185
00:19:07.450 --> 00:19:18.490
x y hyphen cost so that we will have a label on all our three axes of our 3D chart.

186
00:19:18.550 --> 00:19:23.670
Let me hit shift enter and update what's on screen voila.

187
00:19:23.670 --> 00:19:26.810
So this is what the Z label looks like.

188
00:19:26.960 --> 00:19:31.920
We've put our X label and our y label brilliant.

189
00:19:31.920 --> 00:19:34.560
So that's starting to look pretty decent.

190
00:19:34.560 --> 00:19:37.530
But you know what we can make it look even better.

191
00:19:37.890 --> 00:19:45.780
And the way we're gonna do this is by using color adding color provides so much additional information

192
00:19:46.200 --> 00:19:48.210
when it comes to data visualization.

193
00:19:48.840 --> 00:19:56.460
So my objective looking at this is to be able to visually differentiate not just based on where things

194
00:19:56.580 --> 00:19:57.120
are.

195
00:19:57.510 --> 00:20:04.800
If a value is high or low but what color a certain area is on this chart I want the color itself to

196
00:20:04.800 --> 00:20:07.380
tell me if the cost is high or low.

197
00:20:07.380 --> 00:20:16.660
And to do that we're gonna have to import a module called the color map somewhere scroll back up and

198
00:20:16.660 --> 00:20:21.690
in our very first cell and keep all the import statements nice and tidy up top.

199
00:20:22.270 --> 00:20:35.160
I'm going to see from map plot lib import CRM and see m stands for color map I'm going to shift enter

200
00:20:37.030 --> 00:20:38.150
and the scroll back down

201
00:20:41.140 --> 00:20:46.460
and then I'm going to modify this call to are plot surface function.

202
00:20:47.200 --> 00:20:53.740
This plot surface function can take some additional arguments and one of these arguments is surprise

203
00:20:53.740 --> 00:20:54.700
surprise.

204
00:20:54.700 --> 00:20:55.830
A color map.

205
00:20:55.930 --> 00:20:57.920
So I'm going to say see map.

206
00:20:59.130 --> 00:21:00.710
Is equal to.

207
00:21:01.020 --> 00:21:05.350
And then when I use the color map module that we've just imported.

208
00:21:05.440 --> 00:21:09.570
So want to say see map is equal to see em Dot.

209
00:21:09.840 --> 00:21:18.710
Cool warm cool warm is one of the color maps that we can use from the color map module.

210
00:21:18.750 --> 00:21:24.520
So let me update this chart right now beheading shift into.

211
00:21:24.750 --> 00:21:25.650
There we go.

212
00:21:25.650 --> 00:21:27.320
Isn't that amazing.

213
00:21:27.330 --> 00:21:34.110
I think this is so so cool but just like with our regular line plots and our surface plots we can actually

214
00:21:34.110 --> 00:21:40.230
add transparency to this plot as well so we can go back to our plot surface call and add a comma at

215
00:21:40.230 --> 00:21:48.570
the end and then provide an additional argument namely alpha equals and then say zero point four to

216
00:21:48.570 --> 00:21:50.880
add some transparency.

217
00:21:50.880 --> 00:21:58.230
So let me add shift into an update the chant now it looks like this with the above a value add zero

218
00:21:58.230 --> 00:21:59.230
point four.

219
00:21:59.280 --> 00:22:05.220
We can even see our grid shining through on the back of our chart.

220
00:22:05.330 --> 00:22:12.210
Now personally I think this chart is done to look quite wonderful because we've got our high cost in

221
00:22:12.420 --> 00:22:17.450
red and we've got our low cost in dark blue hues.

222
00:22:17.670 --> 00:22:21.700
So we can already visually differentiate between costs that are high and low.

223
00:22:21.780 --> 00:22:28.320
Just by looking at the color and also based on similar colors we can see which parts of our chart actually

224
00:22:28.320 --> 00:22:31.180
have a similar cost as well.

225
00:22:31.290 --> 00:22:34.690
I'm going to end this lecture on a challenge.

226
00:22:34.770 --> 00:22:41.970
Can you change the color mapping of this chart I mentioned earlier that there's quite a few different

227
00:22:41.970 --> 00:22:47.510
color maps available and we've used one of them called Cool warm.

228
00:22:47.580 --> 00:22:53.660
Can you dig into the documentation and change the color map on this chart to something else.

229
00:22:53.790 --> 00:22:58.050
I'll give you a few seconds to pause the video before I show you how

230
00:23:01.620 --> 00:23:03.620
and here's the solution.

231
00:23:03.960 --> 00:23:07.680
Part of becoming a proficient programmer.

232
00:23:07.680 --> 00:23:17.320
His getting really good at googling and I'll show you two pages that you can use to give you some inspiration.

233
00:23:17.340 --> 00:23:23.310
So there's this one here where it's all about choosing color maps.

234
00:23:23.310 --> 00:23:30.070
And here you can find the names and the look of various different types of color maps.

235
00:23:30.090 --> 00:23:33.940
So for example one of the color maps is called plasma.

236
00:23:34.020 --> 00:23:42.930
So if I update my code here to see m dot plasma then I'll get a color map that looks like this on my

237
00:23:42.930 --> 00:23:43.800
chart.

238
00:23:43.920 --> 00:23:45.930
But of course you're not limited to this.

239
00:23:45.960 --> 00:23:58.000
You can also strongly on a no winter or hot see what those look like S.M. dot winter will give us this

240
00:23:58.000 --> 00:24:06.100
look and see them dot hot we'll give us this look right here.

241
00:24:06.100 --> 00:24:13.870
Now if Google didn't bring you to this page then perhaps you landed on this page instead the color maps

242
00:24:13.890 --> 00:24:17.490
on the school reference dot P. why documentation.

243
00:24:17.910 --> 00:24:23.800
And here you'll also see very very similar information you'll get a visual representation of various

244
00:24:23.800 --> 00:24:27.780
different color maps that are available.

245
00:24:27.880 --> 00:24:33.430
So either of these two pages from map plot lib dot org will give you the information that you need to

246
00:24:33.670 --> 00:24:36.700
find the right color map to suit your preferences.
