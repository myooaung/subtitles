1
00:00:00,440 --> 00:00:00,850
All right.

2
00:00:00,870 --> 00:00:03,210
So welcome back.

3
00:00:03,210 --> 00:00:09,870
In this lesson we're going to start taking a look at another quirk of the gradient descent algorithm.

4
00:00:09,870 --> 00:00:16,110
We're going to be taking a look at an example where our gradient descent algorithm actually diverges

5
00:00:16,410 --> 00:00:19,380
and spirals more and more out of control.

6
00:00:19,380 --> 00:00:26,880
And also we're gonna be working through some more hardcore Python programming concepts so when I click

7
00:00:26,880 --> 00:00:34,660
in my last cell and then I'm going to go change the cell from code to markdown here when added hashtag

8
00:00:35,480 --> 00:00:36,160
and see.

9
00:00:36,200 --> 00:00:37,130
Example 3

10
00:00:40,340 --> 00:00:52,400
divergence overflow and Python tuples the function that we're gonna be looking at in this example it's

11
00:00:52,400 --> 00:01:04,190
gonna be this one it's gonna be h of x is equal to x to the power of five minus two X to the power of

12
00:01:04,670 --> 00:01:12,680
four plus two forgot my closing tags in the end.

13
00:01:12,710 --> 00:01:13,970
There we go.

14
00:01:14,000 --> 00:01:19,470
Maybe add another cell below actually to three so that we're not at the bottom of the screen.

15
00:01:19,910 --> 00:01:24,650
And then I want to generate some data has always that's gonna be my first thing.

16
00:01:24,730 --> 00:01:31,880
So when I make data and since this is example 3 am when I use X underscore 3 as my variable.

17
00:01:31,880 --> 00:01:48,800
And when you use MP Lynn space starting at minus 2.5 going to 2.5 and with the new M argument set to

18
00:01:49,220 --> 00:01:50,340
1000.

19
00:01:50,870 --> 00:01:51,420
Okay.

20
00:01:51,440 --> 00:01:55,600
So now it's time to write that equation above in Python code.

21
00:01:55,690 --> 00:02:14,470
It's gonna be D F H of X colon return x times times five minus two times x times times four plus two.

22
00:02:14,600 --> 00:02:23,950
And then our derivative of this function is gonna be D F D of H of X colon return.

23
00:02:24,340 --> 00:02:28,340
And then you've probably already worked this out by applying the power rule.

24
00:02:28,400 --> 00:02:40,790
It's gonna be five times x to the power of four minus eight x to the power of three.

25
00:02:40,790 --> 00:02:41,290
Okay.

26
00:02:41,300 --> 00:02:43,860
So let's plot this function.

27
00:02:44,000 --> 00:02:47,370
I'm gonna scroll up and I'm gonna take this cell here.

28
00:02:47,370 --> 00:02:53,620
It's a copy cell and then I'm going to paste it above.

29
00:02:53,670 --> 00:02:56,770
Now I'm going to have to make some changes to this code over here.

30
00:02:56,780 --> 00:02:57,640
The gradient descent.

31
00:02:57,650 --> 00:03:00,330
We're gonna be calling D of H.

32
00:03:00,590 --> 00:03:06,340
And I'm going to say my initial guess should be equal to zero point two.

33
00:03:06,440 --> 00:03:12,680
I wanna leave a lot of the other stuff as it is but I won't change my x axis and y axis on my graph.

34
00:03:12,680 --> 00:03:23,120
So this graph is gonna go from minus one point two to two point five and the y axis is gonna go from

35
00:03:24,170 --> 00:03:27,570
minus one to four.

36
00:03:27,800 --> 00:03:34,140
So that's our cost function gonna change the Y label to read h of x.

37
00:03:34,270 --> 00:03:43,590
I'm going to plot x underscore three on H of X underscore three and on the scatter plots.

38
00:03:43,630 --> 00:03:52,950
I'm also going to be plotting H of X not G of X similarly for my derivative might change the label.

39
00:03:53,120 --> 00:04:00,980
And on the access we're gonna go from minus one to two and then from minus four to five.

40
00:04:01,370 --> 00:04:04,720
And then on the plotting going to change this 2 x 3

41
00:04:07,700 --> 00:04:09,490
D.H. of x 3.

42
00:04:09,950 --> 00:04:19,680
And then I'm gonna hit shift into well so we can see here on our graph we start at positive zero point

43
00:04:19,680 --> 00:04:27,630
two and then our gradient descent slowly slowly slowly makes its way down into this local minimum.

44
00:04:27,720 --> 00:04:29,370
Right here.

45
00:04:29,370 --> 00:04:34,110
Let's modify the cell here to print out what the values actually are.

46
00:04:34,320 --> 00:04:47,290
So going to see print local men cause at and it's gonna be local underscore min and then I want to print

47
00:04:48,340 --> 00:05:00,310
the cost at the minimum is and then I'm going to say h of local men right.

48
00:05:01,230 --> 00:05:05,970
So local men remember is the last value calculated by a gradient descent.

49
00:05:06,240 --> 00:05:13,350
We're going to work out what the y value is on our chart here at this particular point.

50
00:05:13,690 --> 00:05:23,940
And finally let's print out the number of steps that our algorithm has taken including the initial guess.

51
00:05:24,040 --> 00:05:33,940
So that's gonna be the length alien of our variable called list underscore X how we run this.

52
00:05:33,940 --> 00:05:37,650
Now I can see the output here at the bottom.

53
00:05:37,650 --> 00:05:45,130
Below our charts the local minimum occurs at around one point six the cost of this minimum is about

54
00:05:45,310 --> 00:05:51,030
minus zero point six two and the number of steps is one hundred and seventeen.

55
00:05:51,070 --> 00:06:00,070
So our gradient descent algorithm has run over 100 times to get to this point okay.

56
00:06:00,080 --> 00:06:01,890
So we're converging to this minimum here.

57
00:06:01,910 --> 00:06:04,010
And so far nothing new.

58
00:06:04,010 --> 00:06:11,990
We've seen all of this before but let's see what happens if instead of at zero point two we start at

59
00:06:12,080 --> 00:06:13,460
negative zero point two.

60
00:06:13,460 --> 00:06:18,260
Let's see what happens if we start a little bit on the other side of this chart.

61
00:06:18,290 --> 00:06:27,020
So when I scroll back up and here where my initial guess is zero point two I want to change this to

62
00:06:27,230 --> 00:06:29,930
minus zero point two.

63
00:06:29,930 --> 00:06:37,110
And I want to rerun the cell and see what happens scrolling down we see an era.

64
00:06:37,250 --> 00:06:43,470
In fact we see an overflow area where it says the result is too large.

65
00:06:43,490 --> 00:06:45,160
What does that mean.

66
00:06:45,320 --> 00:06:52,220
I'm going to change the initial guess back to zero point two shift enter reload the graph so we can

67
00:06:52,220 --> 00:06:57,640
think about this if our initial guess was negative zero point two.

68
00:06:57,640 --> 00:07:05,200
Then we would be on the left hand side of this hump and this means that the algorithm would be starting

69
00:07:05,200 --> 00:07:11,380
to move down and down and down and down this line here now would continue going all the way down to

70
00:07:11,380 --> 00:07:14,190
like negative infinity.

71
00:07:14,200 --> 00:07:15,490
Now I know what you're thinking.

72
00:07:15,520 --> 00:07:17,110
Negative infinity.

73
00:07:17,560 --> 00:07:25,170
That makes H of X a very a very unrealistic cost function but it does illustrate several things.

74
00:07:25,210 --> 00:07:31,870
First we can see how our gradient descent algorithm behaves when the algorithm diverges.

75
00:07:31,870 --> 00:07:37,600
And second it shows us how our python program behaves when this happens.

76
00:07:37,600 --> 00:07:43,510
So conceptually we've explained the problem but I do think that seeing this overflow error gives us

77
00:07:43,630 --> 00:07:48,920
an opportunity for understanding something a little deeper about our Python code.

78
00:07:49,060 --> 00:07:55,660
So let's run our code in slow motion if you will and examine what's actually happening and to do that.

79
00:07:55,720 --> 00:08:02,710
I'm going to modify our gradient descent function so my scroll back up what we've defined our gradient

80
00:08:02,740 --> 00:08:12,560
descent and in our function header I'm going to tack on another parameter this parameter is gonna be

81
00:08:12,560 --> 00:08:23,070
called Max underscore it's her for Max iterations and give it a default value of say 300 and instead

82
00:08:23,070 --> 00:08:31,110
of this hardcoded 500 value here in our range I'm going to substitute our argument I'm going to substitute

83
00:08:31,110 --> 00:08:40,710
in Max it's her from Max iterations so this way we can specify the maximum number of times our loop

84
00:08:40,830 --> 00:08:45,000
will run when we are calling our function.

85
00:08:45,000 --> 00:08:48,460
So I'm going to press shift enter to update the python code now.

86
00:08:48,570 --> 00:08:54,750
So when to update the cell and then down here where we're generating this graph with our third example

87
00:08:55,440 --> 00:08:59,970
I'm going to change her function call as follows.

88
00:09:01,130 --> 00:09:11,270
For our initial guests I am going to use minus zero point two but then I'm going to give a max iteration

89
00:09:11,270 --> 00:09:19,220
value of 10 and see where this leaves us so many head shift enter.

90
00:09:19,710 --> 00:09:22,390
Take a look at the graphs OK.

91
00:09:22,400 --> 00:09:31,030
So in 10 iterations we're still pretty much on this hump if instead the max iterations of our loop are

92
00:09:31,030 --> 00:09:35,560
set to 40 then we can see we start moving a little further down

93
00:09:38,590 --> 00:09:46,800
and if I change it to say 60 I can see we're moving down even more.

94
00:09:46,920 --> 00:09:52,560
Let me update this to 70 and rerun this function when we examine the chart.

95
00:09:52,560 --> 00:09:55,290
Now what do we notice.

96
00:09:55,290 --> 00:10:03,540
Well yes it's moving down to the left but very interesting here is that the step size gets bigger and

97
00:10:03,540 --> 00:10:09,300
bigger with each step as this slope starts getting steeper and steeper and steeper.

98
00:10:09,680 --> 00:10:13,170
Our steps start getting larger and larger and larger.

99
00:10:14,220 --> 00:10:18,980
So what's the last x value that the algorithm calculates.

100
00:10:19,230 --> 00:10:26,250
We're printing out the last x value with this print statement so we can see below our graphs are the

101
00:10:26,310 --> 00:10:29,360
printouts from our three print statements.

102
00:10:29,580 --> 00:10:36,330
We can see that the last x value that's printed out is negative 2 million.

103
00:10:36,470 --> 00:10:38,650
That's the first print statement here.

104
00:10:39,050 --> 00:10:45,290
And this is definitely not a local minimum in this case but when we feed our negative 2 million back

105
00:10:45,410 --> 00:10:49,620
into our function then we can see that the cost.

106
00:10:49,620 --> 00:10:49,890
Yeah.

107
00:10:49,940 --> 00:10:53,720
What's on the y axis at this point.

108
00:10:53,870 --> 00:10:59,940
Equal to minus three point eight times ten to the power of 31.

109
00:10:59,960 --> 00:11:06,290
So in our print statement here python is giving us this number in scientific notation but it's actually

110
00:11:06,290 --> 00:11:07,400
an enormous number.

111
00:11:07,550 --> 00:11:13,880
It's around 3 8 0 0 0 0 0 0 0 0 0.

112
00:11:13,900 --> 00:11:15,790
It actually continues going right.

113
00:11:15,830 --> 00:11:19,460
I'd have to copy this paste it three times.

114
00:11:19,460 --> 00:11:21,960
This is how large this number is.

115
00:11:22,010 --> 00:11:29,260
That's being printed here in scientific notation hits three point eight with a lot of zeros after it.

116
00:11:29,370 --> 00:11:33,290
Yeah I mean you're going to be looking at this number and you're like well it's a computer right.

117
00:11:33,290 --> 00:11:40,490
So what we sent a man to the moon over like 40 years ago surely my computer can handle calculating large

118
00:11:40,490 --> 00:11:41,240
numbers right.

119
00:11:41,240 --> 00:11:42,810
What's the big deal.

120
00:11:43,010 --> 00:11:44,320
And you're not wrong.

121
00:11:44,330 --> 00:11:49,240
We can and we should be able to do math with very large numbers.

122
00:11:49,340 --> 00:11:54,800
But the thing is your computer and Python doesn't do this straight out of the box if you want to work

123
00:11:54,800 --> 00:11:56,850
with numbers of this sort of magnitude.

124
00:11:56,870 --> 00:12:01,310
If you're are I don't know calculating the number of atoms in the universe or what have you.

125
00:12:01,310 --> 00:12:04,260
Then you have to employ a couple of tricks.

126
00:12:04,280 --> 00:12:12,650
The thing is you can actually see what the maximum is that you can reach on your particular machine

127
00:12:12,680 --> 00:12:15,180
at home right now in Python.

128
00:12:15,200 --> 00:12:21,920
Straight out of the box and that's without importing any libraries or any modules and using python as

129
00:12:21,920 --> 00:12:24,450
it is that you've got installed right now.

130
00:12:24,590 --> 00:12:30,050
So if you're curious and you wanted to pull up this sort of system specific information you can actually

131
00:12:30,050 --> 00:12:33,450
do so with a module called sis.

132
00:12:33,470 --> 00:12:35,220
So import system.

133
00:12:35,260 --> 00:12:41,820
This is the module where the system's specific information resides and there you can pull up a number

134
00:12:41,820 --> 00:12:45,050
of different things to see the kind of things that I'm talking about.

135
00:12:45,060 --> 00:12:52,110
You can write something like help and then put sis in there and then you'll get some documentation on

136
00:12:52,440 --> 00:12:58,290
the system module so you can read this.

137
00:12:58,430 --> 00:13:05,660
This is by the way very very similar to what you can pull up by pressing shift and then tab and then

138
00:13:05,660 --> 00:13:07,700
hitting that little plus sign.

139
00:13:07,700 --> 00:13:12,820
You'll see that this also pulls up the same documentation.

140
00:13:12,920 --> 00:13:15,680
But let me show you two things that might be quite useful.

141
00:13:15,680 --> 00:13:18,110
I'm going to come out the the help here.

142
00:13:18,170 --> 00:13:19,820
Don't need this.

143
00:13:19,820 --> 00:13:25,340
So for example one thing that you might be interested in looking up is what version of Anaconda you're

144
00:13:25,340 --> 00:13:27,530
using or what version of Python.

145
00:13:27,710 --> 00:13:31,750
And you can pull this up by writing sis dot version.

146
00:13:31,790 --> 00:13:35,390
So version is an attribute of this system module.

147
00:13:35,390 --> 00:13:43,430
So right now you can see that I'm using Python 3 and I've got a 46 bit system and you can also see that

148
00:13:43,430 --> 00:13:47,180
I'm running this on a Mac.

149
00:13:47,240 --> 00:13:52,220
Let me comment this out again and let's look at something else.

150
00:13:52,280 --> 00:14:00,870
Let's pull up what the largest floating point numbers that I can calculate in my python program now.

151
00:14:00,910 --> 00:14:05,870
Now you might ask why why I'm interested in floating point numbers why do I say floating point numbers.

152
00:14:05,870 --> 00:14:12,230
Well if you have that type of the thing that we're looking up right the type of thing that we're calculating

153
00:14:12,800 --> 00:14:13,940
each of.

154
00:14:14,000 --> 00:14:15,040
Take a look.

155
00:14:15,050 --> 00:14:22,590
In this case it's H of low Coleman.

156
00:14:22,630 --> 00:14:24,250
So this is the thing that gave us the problem.

157
00:14:25,060 --> 00:14:33,070
So this is a float and this is what we're looking up to largest float that we can use is this dot float

158
00:14:33,550 --> 00:14:39,600
underscore info dot Max and here's our answer.

159
00:14:39,600 --> 00:14:40,330
Right.

160
00:14:40,500 --> 00:14:43,940
And this number that you see printed out here is specific to my machine.

161
00:14:44,220 --> 00:14:50,550
If you're using a different type of machine with a different architecture say 32 bit then you may see

162
00:14:50,700 --> 00:14:57,630
something else printed below the cell right now but this is my maximum floating point number that I

163
00:14:57,630 --> 00:14:59,550
can use on on my architecture.

164
00:14:59,560 --> 00:15:04,990
Yeah it's one point seven nine times ten to the power of 308.

165
00:15:05,030 --> 00:15:05,340
Yeah.

166
00:15:05,370 --> 00:15:15,570
This is huge but it's still well shy of the 10 to the power of 31 that we had just a moment ago.

167
00:15:15,620 --> 00:15:16,380
Right.

168
00:15:16,400 --> 00:15:19,860
It's many many orders of magnitude larger.

169
00:15:20,240 --> 00:15:22,400
So you might ask why are we running into this problem.

170
00:15:22,910 --> 00:15:29,120
Well looking at our chart we can see that our step size increases dramatically with each step.

171
00:15:29,120 --> 00:15:36,740
And if I go up here and I change this from Max iterations the number of times I run my loop from 70

172
00:15:36,830 --> 00:15:45,470
to say 71 and I look at my cost then I get minus two point one times ten to the power of one hundred

173
00:15:45,470 --> 00:15:47,910
and twenty one.

174
00:15:47,910 --> 00:15:54,710
So this is the crux of the problem I'm going to blow through my limit at the very next iteration on

175
00:15:54,710 --> 00:15:56,990
iteration 73.

176
00:15:57,020 --> 00:15:59,740
This is when I get the overflow error.

177
00:15:59,840 --> 00:16:05,080
Now in your machine at home if the number that you're seeing printed here the number that span out by

178
00:16:05,230 --> 00:16:11,660
thought float on underscore score in fact Max is smaller than this then you might actually get that

179
00:16:11,660 --> 00:16:14,370
overflow error much sooner than I do right.

180
00:16:14,390 --> 00:16:16,660
You might not get it at iteration 73.

181
00:16:16,670 --> 00:16:20,520
You might actually be getting that error far earlier that overflow error.

182
00:16:20,570 --> 00:16:26,540
Now one thing that you might like to know about Python lingo is that errors like this are also referred

183
00:16:26,540 --> 00:16:34,830
to as exceptions but no matter if you call it an exception or an error we still crash and burn.

184
00:16:35,230 --> 00:16:43,820
So so yeah I hope you enjoyed that little detail into the the low level of representation of numbers

185
00:16:43,940 --> 00:16:50,810
inside your python computer program but I think that while we're on the topic of Python programming

186
00:16:51,260 --> 00:17:00,570
we should revisit a piece of code that we've written in a previous lesson namely the code up here the

187
00:17:00,570 --> 00:17:06,870
code for our gradient descent algorithm because I have to confess something I've been a little cheeky

188
00:17:06,960 --> 00:17:14,130
in having our Python gradient descent function return multiple values without actually explaining how

189
00:17:14,130 --> 00:17:15,600
this works.

190
00:17:15,810 --> 00:17:19,680
And this is a good point to cover the python code.

191
00:17:19,860 --> 00:17:27,900
Before we go back to actually analyzing our algorithm so let's add a new section heading at the bottom

192
00:17:30,490 --> 00:17:33,690
I'm going to click this little plus sign here to insert some cells below.

193
00:17:34,620 --> 00:17:40,730
And this cell here I'm going to convert from code to markdown and the section heading I'm going to give

194
00:17:40,740 --> 00:17:44,760
this is Python tuples

195
00:17:47,880 --> 00:17:57,950
so what's a tuple a tuple is a data structure that's very very similar to a list a tuple is just a sequence

196
00:17:57,950 --> 00:18:01,160
of values that are separated by a comma.

197
00:18:01,160 --> 00:18:04,800
And this is what we've used in our gradient descent function.

198
00:18:04,820 --> 00:18:07,280
Let me show you how you can create a tuple quickly.

199
00:18:07,280 --> 00:18:12,580
Plus again here and let's do this let's.

200
00:18:12,860 --> 00:18:15,330
Let's insert a quick comment here.

201
00:18:15,680 --> 00:18:24,700
Creating a tuple my first tuple is gonna be called Breakfast and it's going to contain three values

202
00:18:25,360 --> 00:18:33,720
bacon eggs and avocado.

203
00:18:34,000 --> 00:18:37,190
This by the way is a fantastic way to start your day.

204
00:18:37,240 --> 00:18:41,070
It also illustrates the general format for tuples.

205
00:18:41,200 --> 00:18:49,090
You have a sequence of values that are separated by a comma when a crit another tuple here call it unlucky

206
00:18:49,520 --> 00:18:50,300
on the score.

207
00:18:50,390 --> 00:19:03,720
Numbers home give it 13 four for China 9 for Japan 26 for India and 17 for Italy.

208
00:19:03,810 --> 00:19:06,710
So it's the same pattern as above.

209
00:19:06,710 --> 00:19:09,310
And this way of creating tuples actually has a name.

210
00:19:09,340 --> 00:19:17,810
This is called tuple packing because we're packing multiple values into a single tuple.

211
00:19:18,040 --> 00:19:21,280
So now that we've got our tuples how do we access them.

212
00:19:21,280 --> 00:19:31,660
Well I'm going to add some print statements here like I love comma breakfast.

213
00:19:32,040 --> 00:19:34,970
Square brackets zero.

214
00:19:35,100 --> 00:19:42,270
Now that shift into my lack of spelling ability has foiled me once again I want to take out the superfluous

215
00:19:42,390 --> 00:19:49,590
e here and then hit shift into again and then we can see that the syntax here with the square brackets

216
00:19:50,040 --> 00:19:55,200
for working with tuples is actually very very similar to working with a list.

217
00:19:55,560 --> 00:19:58,460
So you've got a tuple that has a name.

218
00:19:58,650 --> 00:20:05,270
In this case breakfast and you're accessing the values inside the tuple through the index.

219
00:20:05,310 --> 00:20:12,840
So zero is the first item in the tuple and to show you a second example.

220
00:20:12,840 --> 00:20:15,870
I'm going to print out the string.

221
00:20:15,870 --> 00:20:24,830
My hotel has no space and then I'm gonna have two plus signs another string at the end T.H. floor.

222
00:20:25,080 --> 00:20:35,910
Now in between here I could put unlucky underscore numbers and then square brackets and say provide

223
00:20:36,330 --> 00:20:38,400
the index one

224
00:20:43,710 --> 00:20:50,450
and if I try to run this right now I'll get an error because the string concatenation with the pluses

225
00:20:50,810 --> 00:21:00,020
does not convert the integers here to strings so I have to actually wrap this in a function called SDR

226
00:21:01,970 --> 00:21:10,420
and only now can I press shift enter and run this if I try to do this without wrapping it then we'll

227
00:21:10,420 --> 00:21:15,260
get an error like this must be string not INT.

228
00:21:15,670 --> 00:21:23,350
And that's because my tuple here contains ints and those are not converted to strings by the plus operator.

229
00:21:23,500 --> 00:21:27,910
So when I wrap this in a string function and press enter.

230
00:21:28,270 --> 00:21:36,630
So we've covered how to how to access a value in a tuple brilliant and how we can try something else.

231
00:21:36,640 --> 00:21:42,040
Because I'm sure you're looking at this and you're saying well how are tuples different from lists.

232
00:21:42,040 --> 00:21:43,750
How how are tuples used.

233
00:21:43,750 --> 00:21:49,030
Why why do we have something that's so similar and yet different.

234
00:21:49,030 --> 00:21:59,170
Well in contrast to lists tuples are often used when the data they contain is heterogeneous.

235
00:21:59,170 --> 00:22:05,030
Now what I mean by that tuples often contain a mix of data and contrast to lists.

236
00:22:05,200 --> 00:22:13,630
So lists often contain the same kind of data like all strings all integers but tuple like C not on the

237
00:22:13,630 --> 00:22:25,350
score my underscore address equals one comma and then the string infinite loop and then karma and then

238
00:22:25,350 --> 00:22:28,310
another string Cupertino.

239
00:22:28,310 --> 00:22:33,440
And then karma 9 5 0 1 4 for a postcode.

240
00:22:34,440 --> 00:22:41,900
Then we've just created a tuple with a mix of data a mix of different data types if you will and this

241
00:22:41,900 --> 00:22:46,010
is something that you don't usually see in practice with lists.

242
00:22:46,010 --> 00:22:53,700
Lists are usually homogeneous meaning people don't tend to mix and match the different types of data.

243
00:22:53,890 --> 00:23:01,590
Now another difference with lists is that tuples are immutable.

244
00:23:01,630 --> 00:23:02,960
What does that mean.

245
00:23:02,980 --> 00:23:09,110
It means that we can't change the tuple after we've made it.

246
00:23:09,130 --> 00:23:20,590
So for example if I had C breakfast and I wanted to change bacon which is at index 0 and set that equal

247
00:23:20,590 --> 00:23:31,300
to a C sausage and just you know innocently swap out the value then python will actually yell at us.

248
00:23:31,470 --> 00:23:38,640
It's gonna give us a type error it's gonna say the tuple object does not support item assignment and

249
00:23:38,640 --> 00:23:46,800
this basically means that once we've created a tuple like this we cannot change the values here and

250
00:23:46,800 --> 00:23:52,300
we also can't append a new value say we can't stick this at say index 3 right.

251
00:23:52,470 --> 00:23:59,600
We get the same error in other words the immutability of tuples means that once you've created a tuple

252
00:23:59,930 --> 00:24:01,280
you can't mess around with it.

253
00:24:01,310 --> 00:24:03,570
You can't change it up.

254
00:24:03,660 --> 00:24:05,410
This is quite different from a list right.

255
00:24:05,430 --> 00:24:11,790
Because if you remember in our gradient descent function we were running our loop and we were appending

256
00:24:12,090 --> 00:24:19,200
items to our lists every time the loop ran our list grew in length because we're appending new items

257
00:24:20,160 --> 00:24:27,680
and this is something we couldn't do with tuples now one more thing I want to show you on the topic

258
00:24:27,680 --> 00:24:29,910
of tuples is a little gotcha.

259
00:24:29,960 --> 00:24:33,930
Say we want to create a tuple with a single value.

260
00:24:34,090 --> 00:24:37,000
So just one value inside our tuple.

261
00:24:37,100 --> 00:24:44,240
No it's strange but for the sake of argument how would think about how you would credit tuple with just

262
00:24:44,300 --> 00:24:45,260
one value.

263
00:24:45,260 --> 00:24:49,520
What would the python syntax look like to store a single value inside this tuple

264
00:24:53,380 --> 00:24:54,510
here's the solution.

265
00:24:54,530 --> 00:25:02,070
So if I put a single value in here say 42 then I would have to put a trailing comma after it.

266
00:25:02,080 --> 00:25:09,100
Now I've got a tuple with a single value so if I print it out print to pull with single value

267
00:25:12,080 --> 00:25:13,360
then I can see it looks like this.

268
00:25:13,370 --> 00:25:16,370
It's got a single value and a comma.

269
00:25:16,550 --> 00:25:23,720
And if I substitute the print for type and check then I can see that indeed tuple with single value

270
00:25:23,930 --> 00:25:26,540
is indeed a tuple.

271
00:25:26,540 --> 00:25:34,890
Now the the very first time I saw this I found this syntax like super weird and confusing trailing comma.

272
00:25:34,900 --> 00:25:35,790
Right.

273
00:25:35,840 --> 00:25:37,350
Well my goodness.

274
00:25:37,520 --> 00:25:38,970
So here it is now.

275
00:25:39,590 --> 00:25:44,820
You two have shared this experience and the the weird syntax.

276
00:25:44,910 --> 00:25:45,970
You're welcome.

277
00:25:45,990 --> 00:25:48,190
Now it's time to come full circle.

278
00:25:48,210 --> 00:25:55,000
We've packed a bunch of values into a tuple but we can also do the very opposite.

279
00:25:55,080 --> 00:25:59,280
So we can unpack these values as well.

280
00:25:59,280 --> 00:26:06,750
So if I take my tuple breakfast and I want to grab the values that are stored inside this tuple and

281
00:26:06,750 --> 00:26:17,190
put them into some separate variables I can do that by writing say main comma side comma greens is equal

282
00:26:17,190 --> 00:26:18,770
to breakfast.

283
00:26:19,050 --> 00:26:21,760
And this is called sequence unpacking.

284
00:26:21,780 --> 00:26:22,020
Yeah.

285
00:26:22,050 --> 00:26:33,100
So if I print out main course is and then comma main then I get main course is bacon.

286
00:26:33,100 --> 00:26:36,620
So here's the reason I mentioned this and why say we've come full circle.

287
00:26:36,700 --> 00:26:43,960
If I scroll back up to where we had our gradient descent function we can see here in our return statement

288
00:26:44,260 --> 00:26:51,370
what we're doing is we're returning three separate values but in fact we're packing all these values

289
00:26:51,640 --> 00:26:54,040
into a single tuple.

290
00:26:54,530 --> 00:26:55,470
Yeah.

291
00:26:55,780 --> 00:27:04,800
And when we're calling our gradient descent function say here then we are unpacking this sequence and

292
00:27:04,800 --> 00:27:10,830
storing the results in three separate variables local men.

293
00:27:10,830 --> 00:27:13,590
This underscore X the reverse underscore list.

294
00:27:14,250 --> 00:27:20,820
So we've actually been using tuples but we've never had to access any of the values from the tuple by

295
00:27:20,880 --> 00:27:22,050
index.

296
00:27:22,050 --> 00:27:23,530
But we can do that.

297
00:27:23,580 --> 00:27:25,840
Let me show you how it would work.

298
00:27:25,900 --> 00:27:36,240
So if I created a variable called data underscore tuple and set that equal to gradient underscore descent

299
00:27:36,750 --> 00:27:49,530
and for my derivative on a scroll function I supply D.H. and for my initial guess I supply zero point

300
00:27:49,530 --> 00:28:04,220
two then I can print out the local men at data underscore tuple square brackets zero because that's

301
00:28:04,220 --> 00:28:15,050
the very very first thing that is stored inside our tuple I can print out the cost at the last x value

302
00:28:15,800 --> 00:28:17,230
which would be equal to.

303
00:28:17,720 --> 00:28:27,520
Well in this case it would be H of data underscore tuple square brackets zero and then I could also

304
00:28:27,520 --> 00:28:39,070
print out the number of steps which in this case would be the length of so it would be data underscore

305
00:28:39,580 --> 00:28:47,620
tuple square brackets 1 then you're on this and then you can see that it works exactly the same way

306
00:28:47,950 --> 00:28:53,910
as before but instead of unpacking the sequence we're using the tuple now explicitly.

307
00:28:54,820 --> 00:29:01,480
Okay so we've paused a little bit on analysing our algorithm and we've talked a little more about Python

308
00:29:01,480 --> 00:29:08,020
and Python programming so now it's time to change tracks and go back to our gradient descent algorithm

309
00:29:09,430 --> 00:29:17,790
now a reasonable question to ask is why that I show you this H of X example function I mean this function

310
00:29:17,820 --> 00:29:25,110
by my own admission seems a little bit contrived and hurriedly confessed that a non convex cost function

311
00:29:25,470 --> 00:29:34,830
is not very realistic but truth be told is that we can get this divergence and the very very same overflow

312
00:29:34,890 --> 00:29:43,260
error in another way too and we can see this divergence and see the same error even if we are working

313
00:29:43,260 --> 00:29:50,040
with a very nice clean cost function where we know for a fact that we should be able to reach a minimum

314
00:29:51,030 --> 00:29:56,490
and this is what we're gonna be examining in the next lesson in the next lesson we're gonna be looking

315
00:29:56,490 --> 00:30:02,600
at the elephant in the room the gradient descent learning rate how I'll see you there.

316
00:30:02,850 --> 00:30:03,480
Take care.
