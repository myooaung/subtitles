WEBVTT
1
00:00:01.050 --> 00:00:07.260
So far we've had a cursory look at our data set and checked for missing data.

2
00:00:07.260 --> 00:00:11.930
Now we're going to start looking at our data in a bit more detail.

3
00:00:12.240 --> 00:00:17.210
One of the most useful things to do as part of exploring it is to visualize it.

4
00:00:17.250 --> 00:00:24.510
It's true they say you know a picture is worth a thousand words and data visualizations don't just come

5
00:00:24.510 --> 00:00:31.050
in handy when it comes to say presenting a snazzy final report to your boss your team or your client

6
00:00:31.650 --> 00:00:32.820
data visualizations.

7
00:00:32.820 --> 00:00:38.160
Also help us make sense of our data at the exploration stage.

8
00:00:38.190 --> 00:00:38.700
How so.

9
00:00:40.030 --> 00:00:44.860
Well there's two things that we want to get a sense for right now.

10
00:00:44.860 --> 00:00:53.290
The first is the distribution of the data and the second are outliers in our data.

11
00:00:53.290 --> 00:00:59.780
So what kind of visualization could we use at the exploration stage to spot both outliers and see the

12
00:00:59.780 --> 00:01:01.750
distribution.

13
00:01:01.750 --> 00:01:10.000
Well enter our friend the humble histogram the good old histogram is the first data visualization technique

14
00:01:10.060 --> 00:01:13.360
that we're going to cover histogram so pretty simple.

15
00:01:13.390 --> 00:01:20.500
This just shows the number of instances in the data that have a certain value a histogram is just a

16
00:01:20.500 --> 00:01:26.650
bar chart that shows us the frequency of a particular value in the screen histogram.

17
00:01:26.650 --> 00:01:34.150
We've got the values on the x axis and the number of occurrences on the y axis the taller an individual

18
00:01:34.150 --> 00:01:38.280
bar the more occurrences there are in the dataset.

19
00:01:38.470 --> 00:01:44.980
And by plotting all the bars next to each other we get a certain shape that shape is the distribution

20
00:01:45.400 --> 00:01:47.490
of our data.

21
00:01:47.510 --> 00:01:54.910
Now I've created the screen histogram here to show you what a normal distribution would look like.

22
00:01:54.940 --> 00:02:02.500
You can always spot a normal distribution by this very reassuring bell curve meaning a lot of the observations

23
00:02:02.590 --> 00:02:06.260
are around the center or the mean of the distribution.

24
00:02:06.340 --> 00:02:10.640
And very few observations are at the edges.

25
00:02:10.870 --> 00:02:16.420
The reason that we care about distributions in the first place is because they tell us a great deal

26
00:02:16.420 --> 00:02:21.290
about our data for this dataset on Boston house prices.

27
00:02:21.470 --> 00:02:29.500
That's 13 independent variables including everything from the average number of rooms to zoning restrictions

28
00:02:29.710 --> 00:02:33.010
to the pupil teacher ratio in the schools.

29
00:02:33.010 --> 00:02:41.590
And each of these variables is measured differently and a histogram is a good starting point for understanding

30
00:02:41.800 --> 00:02:47.790
what these features are how they're measured and what the data actually looks like.

31
00:02:47.830 --> 00:02:55.300
Another reason why I bring up distributions at this stage is that many statistical tests and estimation

32
00:02:55.300 --> 00:03:00.900
techniques make certain assumptions about the kind of distribution.

33
00:03:00.940 --> 00:03:08.200
Now we're going to revisit this concept at the analysis stage when it comes to our regression residuals

34
00:03:08.830 --> 00:03:14.570
and it'll be very interesting to see what kind of distributions those have.

35
00:03:14.590 --> 00:03:21.520
So this is something to keep in mind for later we're gonna see if we get a bell shaped curve like this

36
00:03:21.700 --> 00:03:24.420
at the analysis stage or not.

37
00:03:24.420 --> 00:03:26.450
Now let me ask you a question.

38
00:03:26.650 --> 00:03:34.240
What do you think the distribution of house prices will look like in our dataset.

39
00:03:34.270 --> 00:03:42.250
If you had to imagine the distribution of house prices in your head what would it look like spoiler

40
00:03:42.250 --> 00:03:42.960
alert.

41
00:03:43.120 --> 00:03:48.920
T house prices are going to look nothing like this Green has the ground right here.

42
00:03:49.150 --> 00:03:58.630
In fact the distribution of prices looks like this as you can see it's much more messy right.

43
00:03:58.640 --> 00:04:08.630
Well that's real data for you and also our data has outliers at the right hand edge of this distribution

44
00:04:09.600 --> 00:04:17.090
in normal distribution has very very few observations but the actual house prices have some pretty high

45
00:04:17.090 --> 00:04:18.490
balls right here.

46
00:04:18.500 --> 00:04:24.170
Now I'm not sure which houses these are in Boston but the people living there are pretty well off to

47
00:04:24.200 --> 00:04:25.880
say at least.

48
00:04:25.880 --> 00:04:26.360
All right.

49
00:04:26.360 --> 00:04:34.940
So now it's time to write some python code and learn how to draw histogram is like this because I suspect

50
00:04:35.210 --> 00:04:38.960
you're not just going to take my word for it when it comes to these charts.

51
00:04:39.110 --> 00:04:42.230
So let's head back to Jupiter notebook.

52
00:04:42.230 --> 00:04:52.530
Let's start by inserting a markdown cell and putting the following subheading here visualizing data

53
00:04:54.490 --> 00:05:02.760
his two grams distributions and bar charts.

54
00:05:02.760 --> 00:05:11.010
Now to draw a histogram in our notebook we're gonna make use of the matte plot lib module so we're gonna

55
00:05:11.010 --> 00:05:15.140
have to add some input statements at the very top.

56
00:05:15.240 --> 00:05:23.730
When a scroll of up and I'm going to add the following import statements import Matt.

57
00:05:23.910 --> 00:05:33.120
Plot lib dot pie plot as P L T and at the end I'm also going to add the percentage sign.

58
00:05:33.440 --> 00:05:33.900
Matt.

59
00:05:33.900 --> 00:05:39.340
Plot lib space in line.

60
00:05:39.340 --> 00:05:41.740
And let me hit shift enter.

61
00:05:42.220 --> 00:05:43.630
Now this last line.

62
00:05:43.630 --> 00:05:50.050
If you recall was so that our chance would show up when we export our notebooks.

63
00:05:50.050 --> 00:05:54.420
So this line of code is really stupid and notebook specific.

64
00:05:54.760 --> 00:06:02.920
Now to draw our histogram we're going to use our map plot lib module and call the Hist function.

65
00:06:02.920 --> 00:06:08.920
So we're gonna write BLT dot hist open parentheses.

66
00:06:08.920 --> 00:06:12.910
And now we need to supply some arguments.

67
00:06:12.910 --> 00:06:20.610
The first input to this function is what should be plotted on the histogram in our case.

68
00:06:20.610 --> 00:06:28.530
We're gonna start plotting the values from our target namely the house prices that are given in thousands.

69
00:06:28.530 --> 00:06:31.800
This was inside our data frames price column.

70
00:06:31.830 --> 00:06:34.470
If you remember so when I write data

71
00:06:37.350 --> 00:06:49.260
square brackets and then the string price in all caps on the next line on a put peel t Don show and

72
00:06:49.280 --> 00:06:56.020
hit shift into and this is the output that will get now.

73
00:06:56.090 --> 00:07:02.860
The thing about this histogram function is that we can supply more arguments to customize the look and

74
00:07:02.860 --> 00:07:05.750
feel of our histogram.

75
00:07:05.980 --> 00:07:16.690
For example we can supply an argument called beans and beans is going to determine how our prices are

76
00:07:16.690 --> 00:07:20.460
grouped together to form the individual balls.

77
00:07:20.470 --> 00:07:27.600
So we put beans equal to three and hedge shift enter.

78
00:07:28.210 --> 00:07:32.840
If we put beans as equal to three then we only get three parts.

79
00:07:33.100 --> 00:07:37.640
All our house prices are grouped into one of these three bars.

80
00:07:37.660 --> 00:07:40.350
Now this might be a little difficult for you to see.

81
00:07:40.360 --> 00:07:44.250
So what I'm going to do is I'm going to make my chart larger.

82
00:07:44.260 --> 00:07:56.080
First of all so we can do this with BLT dot figure parentheses fig size and then supply a tuple.

83
00:07:56.210 --> 00:07:58.780
When I say 10 and 6.

84
00:07:59.800 --> 00:08:02.940
So this is gonna make my chart a lot larger.

85
00:08:04.340 --> 00:08:06.590
But I want to make this more explicit still.

86
00:08:06.620 --> 00:08:12.320
I want to show a black outline of the actual beans in this chart.

87
00:08:12.590 --> 00:08:22.290
So there's something called Edge color E C that I can supply as an argument to this histogram function.

88
00:08:22.340 --> 00:08:31.050
Want to say e c is equal to and then the string black and now my histogram will look like this.

89
00:08:31.050 --> 00:08:38.910
So now we can really see that I've only got three bins all our house prices either grouped in to this

90
00:08:38.910 --> 00:08:47.510
first group here up to twenty thousand or the second bar here between 20 and say 35000 or this third

91
00:08:47.540 --> 00:08:53.250
by here between 35000 and fifty thousand dollars.

92
00:08:53.310 --> 00:08:56.590
Now of course you can play around with this input here.

93
00:08:56.730 --> 00:08:59.540
So we could also go the other extreme right.

94
00:08:59.550 --> 00:09:08.490
We could have I don't know 100 different bins hitting shift enter on this will make r chant look like

95
00:09:08.490 --> 00:09:18.070
so in other words setting the number of bins we can set how granular we want our histogram to look.

96
00:09:18.370 --> 00:09:20.830
I tell you what I'm going to go with 50

97
00:09:24.910 --> 00:09:32.140
I think 50 is a good compromise between three and three hundred and this conveys the information in

98
00:09:32.140 --> 00:09:34.920
the price column quite nicely.

99
00:09:36.250 --> 00:09:41.920
Now if you come back to this chant in three months time you're probably not going to know what it's

100
00:09:41.920 --> 00:09:42.430
showing.

101
00:09:42.490 --> 00:09:46.500
So let's add some labels on the axes.

102
00:09:46.500 --> 00:10:02.250
So I want to write PDT dot X label parentheses price in thousands and peel T don't y label parentheses

103
00:10:03.510 --> 00:10:11.420
number of houses and I went out to format this as a string I can't put it in there like so.

104
00:10:11.420 --> 00:10:17.030
So I need single quotes at the beginning and a single quote at the end.

105
00:10:17.040 --> 00:10:21.380
Now let me hit shift enter and walla.

106
00:10:21.390 --> 00:10:22.570
It's a lot more clear.

107
00:10:22.680 --> 00:10:30.900
We've got the frequency on the left hand the dollar price in thousands on the x axis so far so good

108
00:10:30.900 --> 00:10:31.230
right.

109
00:10:32.160 --> 00:10:33.990
But wait what was that.

110
00:10:34.140 --> 00:10:38.280
Did I just hear you say you want to style this histogram to make it look prettier.

111
00:10:38.340 --> 00:10:45.750
Okay okay let me try and channel my inner designer and choose a different color to do that I'm going

112
00:10:45.750 --> 00:10:52.290
to add another argument to my function call here and that argument is gonna be called Surprise Surprise

113
00:10:52.560 --> 00:10:57.980
color and it's also gonna be set equal to a string.

114
00:10:57.990 --> 00:11:05.310
Now I can add a hex code here as an input and how it turns out that my inner designer is actually super

115
00:11:05.310 --> 00:11:12.360
lazy and recommended that I use a Web site like material palette to pick a color instead.

116
00:11:12.360 --> 00:11:18.710
So you can see that this is just one of the many Web sites that creates a color palette for you.

117
00:11:18.930 --> 00:11:21.480
And I want to pick this blue one here.

118
00:11:21.480 --> 00:11:30.220
These two blue colors and then I'm just going to copy this hex code right here and this is the hex code

119
00:11:30.430 --> 00:11:37.570
that I'm then going to paste in has an argument for the color right here.

120
00:11:37.590 --> 00:11:38.730
Let's see what this looks like.

121
00:11:40.130 --> 00:11:41.270
Voila.

122
00:11:41.490 --> 00:11:42.030
Cool.

123
00:11:42.030 --> 00:11:46.290
So I think we've got a really nice histogram here from Matt plot lib.

124
00:11:46.410 --> 00:11:53.100
And now you can also see for yourself that the histogram here ties out with what I've showed you earlier

125
00:11:53.220 --> 00:11:54.640
on the slide.

126
00:11:54.780 --> 00:11:56.880
Trust but verify.

127
00:11:56.940 --> 00:11:57.260
All right.

128
00:11:59.130 --> 00:12:04.060
You know apparently the saying was Ronald Reagan's favorite Russian proverb.

129
00:12:04.150 --> 00:12:09.700
Trust but verify if you happen to know any other funky Russian proverbs.

130
00:12:09.850 --> 00:12:14.920
Please do let me know in the Courtenay section but moving on.

131
00:12:14.920 --> 00:12:20.960
The thing is we're actually not stuck with just using math pot lid before data is.

132
00:12:21.250 --> 00:12:29.050
There are quite a few other lovely Python modules out there that do a fantastic job at data visualization

133
00:12:29.470 --> 00:12:33.940
and I can't wait to introduce you to an alternative to Mac plot lib.

134
00:12:34.600 --> 00:12:36.790
And that's a module called seaborne.
