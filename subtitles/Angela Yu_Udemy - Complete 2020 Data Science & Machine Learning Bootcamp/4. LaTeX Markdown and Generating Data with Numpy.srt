1
00:00:00,570 --> 00:00:01,290
Ha right.

2
00:00:01,300 --> 00:00:07,270
So if you haven't fired up to put a notebook in a while then open your Anaconda command line.

3
00:00:07,300 --> 00:00:17,020
If you're in Windows or go to terminal if you're on Mac and then type in the command Jupiter notebook

4
00:00:18,190 --> 00:00:26,980
and hit enter your browser should fire up and drop you off on local host with your folders here.

5
00:00:27,280 --> 00:00:33,970
You want to navigate to the email projects folder that you've set up earlier and there you want to create

6
00:00:34,120 --> 00:00:37,420
a new Python 3 notebook

7
00:00:40,120 --> 00:00:40,740
hand.

8
00:00:40,780 --> 00:00:42,830
We're gonna click up here what says Untitled.

9
00:00:42,940 --> 00:00:47,640
I'm gonna rename it to 0 3.

10
00:00:48,060 --> 00:00:48,660
Great.

11
00:00:48,760 --> 00:00:52,950
Oh man I can't type gradient the scent.

12
00:00:53,120 --> 00:00:59,980
We're gonna hit rename and now we're ready to go for our first cell in our new notebook.

13
00:01:00,040 --> 00:01:03,550
We're not gonna be typing any python code.

14
00:01:03,550 --> 00:01:09,130
Instead we're going to be making our notebook a little bit more pretty a little bit more readable by

15
00:01:09,160 --> 00:01:11,300
inserting a heading.

16
00:01:11,320 --> 00:01:19,510
So what I'm going to do is I'm going to go to cell and then change the cell type from code to markdown

17
00:01:20,050 --> 00:01:28,630
so select markdown here and you'll notice that the AI in here has disappeared because this cell will

18
00:01:28,630 --> 00:01:32,190
now no longer be evaluated as code.

19
00:01:32,320 --> 00:01:34,770
So we said we're gonna make a title.

20
00:01:34,870 --> 00:01:41,570
Our first title is gonna be notebook imports and packages.

21
00:01:41,570 --> 00:01:50,110
Yeah and when he'd shift into sin how we can see here this is just plain text and in the cell below

22
00:01:50,320 --> 00:01:52,360
we're gonna be adding our import statements.

23
00:01:52,390 --> 00:01:59,440
So the first thing that we're gonna import is our old friend Matt plot lip pie plot where we're doing

24
00:01:59,440 --> 00:02:02,120
some plotting in this notebook.

25
00:02:02,120 --> 00:02:13,570
So when I write import Matt plot lib dot pi plot as party when I stick with the same naming convention

26
00:02:13,570 --> 00:02:14,430
here.

27
00:02:14,800 --> 00:02:20,750
And we're also going to import another library another package called num Pi.

28
00:02:21,220 --> 00:02:24,900
And this is commonly referred to as an P.

29
00:02:24,930 --> 00:02:29,780
So a lot of people use end p and we'll use that as well.

30
00:02:29,800 --> 00:02:38,980
So when it import num pi adds N P and we're also going to add the good ole Jupiter notebook statement

31
00:02:39,490 --> 00:02:41,050
percentage sign.

32
00:02:41,050 --> 00:02:41,450
Matt.

33
00:02:41,500 --> 00:02:44,310
Plot lib in line.

34
00:02:44,660 --> 00:02:51,280
So when doing some plotting so we're gonna add this Matt plot lib in line statements so that we can

35
00:02:51,310 --> 00:03:00,820
export our plots very very nicely and head shift enter now and before we go on I want to revert back

36
00:03:00,880 --> 00:03:03,640
to this markdown up here.

37
00:03:03,640 --> 00:03:10,210
I'd really like to have a section heading and let me show you how we can get that because notebook inputs

38
00:03:10,240 --> 00:03:13,260
and packages is very very small.

39
00:03:13,480 --> 00:03:23,080
If we put a hashtag in front of this and head space then immediately the font becomes a lot bigger bolder

40
00:03:23,170 --> 00:03:31,540
and blue and this is because this hashtag is telling Jupiter that now notebook inputs and packages should

41
00:03:31,540 --> 00:03:36,000
be considered as a heading that's not actually gonna look like this when I hit shift enter it's going

42
00:03:36,000 --> 00:03:40,100
to look like this it's gonna be big and bold.

43
00:03:40,210 --> 00:03:45,740
So this is a very nice way to create section headings in your notebook.

44
00:03:45,760 --> 00:03:53,530
Now if you wanted this a little smaller and one level down in the size and boldness then you can put

45
00:03:53,530 --> 00:04:00,690
two hashtags and you can see how the markdown adjusts really nicely and will look like this in contrast.

46
00:04:00,760 --> 00:04:01,910
Right.

47
00:04:01,930 --> 00:04:03,070
And you can even try three.

48
00:04:03,070 --> 00:04:03,360
Right.

49
00:04:03,370 --> 00:04:12,190
So there's different levels of boldness and size that you can you can play with for your section headings

50
00:04:12,190 --> 00:04:14,280
to keep your notebook organized.

51
00:04:14,380 --> 00:04:20,300
So I go with one and this way we can find our imports very quickly.

52
00:04:20,440 --> 00:04:24,320
Now we're gonna dive straight into our first example.

53
00:04:24,340 --> 00:04:31,240
Now the thing I want to do though is I'm going to take this cell here and I'm going to modify it to

54
00:04:31,240 --> 00:04:34,600
be a markdown cell as well.

55
00:04:34,600 --> 00:04:40,690
So this is my chance to share a little bit about what Jupiter notebook can do someone say example one

56
00:04:41,770 --> 00:04:53,170
example one and the example one is going to be about a very very very simple cost function and the cost

57
00:04:53,170 --> 00:04:55,810
function is going to look like this.

58
00:04:55,810 --> 00:05:07,280
It's going to be f of x is equal to X squared plus X plus 1.

59
00:05:07,420 --> 00:05:10,040
Let's see what this markdown would actually look like.

60
00:05:10,300 --> 00:05:17,650
Would look something like this but um the cool thing about markdown is that you can actually make the

61
00:05:17,650 --> 00:05:21,850
mathematical notation look a lot better.

62
00:05:22,360 --> 00:05:31,070
So you can add a dollar sign in the front and you can add a dollar sign in the back.

63
00:05:31,060 --> 00:05:39,730
And if I press shift enter now then you can see that indeed we have this formatting here in the markdown

64
00:05:39,730 --> 00:05:43,010
cell looking like an actual equation.

65
00:05:43,060 --> 00:05:45,490
So this is gonna be Example 1.

66
00:05:45,590 --> 00:05:46,630
Going to look like this.

67
00:05:46,630 --> 00:05:53,380
I can make this bigger as well so I can give it a section heading if you will.

68
00:05:53,380 --> 00:06:01,470
And now it's going to look like this so this is gonna be a simple cost function.

69
00:06:01,530 --> 00:06:02,640
All right.

70
00:06:02,740 --> 00:06:03,780
Here we go.

71
00:06:03,830 --> 00:06:04,340
How.

72
00:06:04,780 --> 00:06:10,000
If this is the first time that you're seeing this then you might be confused about what are these dollar

73
00:06:10,000 --> 00:06:11,350
symbols right.

74
00:06:11,380 --> 00:06:21,700
Well this is a markup notation from a system called late tech and late tech uses tags like these dollar

75
00:06:21,700 --> 00:06:29,440
signs to mark a particular section as a mathematical notation if I hire if I double up on the dollar

76
00:06:29,440 --> 00:06:32,820
signs then I'm giving it a different kind of tag.

77
00:06:33,100 --> 00:06:36,210
And you can see that you'll have a different formatting as well.

78
00:06:36,210 --> 00:06:44,110
So in this case it's centered so single dollar sign is in line.

79
00:06:44,230 --> 00:06:48,860
And the other tag the double dollar sign is for display.

80
00:06:48,970 --> 00:06:54,140
So we're gonna be using a late tech a little more in this module hand.

81
00:06:54,400 --> 00:07:00,670
You might actually see this in in many many other places as well it's it's super popular for writing

82
00:07:00,670 --> 00:07:06,610
mathematical equations or scientific papers especially in an academia.

83
00:07:06,670 --> 00:07:14,050
The best analogy that I can think of of how low tech works is that it works really similar to X AML

84
00:07:14,110 --> 00:07:15,270
or HD.

85
00:07:16,000 --> 00:07:22,330
So if you were to go to a Web site like say example dot com and you right click on it and you go to

86
00:07:22,750 --> 00:07:28,380
view page source then you'll see the HMO documents.

87
00:07:28,510 --> 00:07:31,920
So while the website will look like this example.

88
00:07:32,170 --> 00:07:39,240
Domain is actually surrounded by two HD tags title and title.

89
00:07:39,580 --> 00:07:46,080
So a beginning tag and an end tag and late tech sort of works a bit like this as well.

90
00:07:46,090 --> 00:07:53,200
You've got a markup meaning these tags that kind of give structure to your document.

91
00:07:53,200 --> 00:08:01,060
So it's through these tags that the Jupiter notebook knows how to format a particular section of text

92
00:08:01,180 --> 00:08:07,880
in the in the markup cells that we've added the the markup and our section heading.

93
00:08:07,900 --> 00:08:14,440
We can now actually you know write the python code for this function and it would look like this D def

94
00:08:14,860 --> 00:08:25,930
space f parentheses x semicolon New Line return x double multiplication sign for the power.

95
00:08:25,990 --> 00:08:32,650
So times times to plus X plus one.

96
00:08:32,710 --> 00:08:34,380
And that's our function.

97
00:08:34,470 --> 00:08:35,020
Right.

98
00:08:35,040 --> 00:08:38,810
This is our function in Python code.

99
00:08:38,820 --> 00:08:42,150
Now what we're going to do is we're going to generate the data.

100
00:08:42,160 --> 00:08:50,760
Now just add a little comment and here make data and the way we're going to do this is by using num

101
00:08:50,760 --> 00:08:51,680
pi.

102
00:08:51,690 --> 00:08:58,650
So our data is going to sit in a variable I'm going to call it X underscore one call underscore one

103
00:08:58,650 --> 00:09:05,850
because this is our first example so X and on the score one is gonna be equal to something and it's

104
00:09:05,890 --> 00:09:17,990
gonna get its value from a num pi function num PI was NDP and the function we're gonna call is Lynn

105
00:09:18,000 --> 00:09:19,160
space.

106
00:09:19,240 --> 00:09:20,150
Yeah.

107
00:09:20,460 --> 00:09:33,100
And Pete Lynn space parentheses start it's going to equal minus three comma stop it's gonna equal three

108
00:09:34,090 --> 00:09:45,700
and then and u m num is gonna equal say one hundred mid shift into and explain who what I did just there.

109
00:09:45,700 --> 00:09:54,250
So the uh Lin space function is something that comes from the NUM pi library I'm going to pull up the

110
00:09:54,250 --> 00:10:01,120
documentation for you guys and I've got a couple of arguments that I gave it I gave it a start value

111
00:10:01,180 --> 00:10:09,940
a stop value and a value for this third one called num now Lin space creates a sequence yeah a sequence

112
00:10:09,940 --> 00:10:15,460
of numbers that creates our data for us and it creates a sequence of numbers between the start value

113
00:10:15,580 --> 00:10:24,070
and the stop value and the number of samples is set by that third parameter so that third value at the

114
00:10:24,080 --> 00:10:29,050
end you add value back in our Python notebook we can actually take a look at what this would look like

115
00:10:29,450 --> 00:10:36,040
so if I put X underscore one here and it shift into then we can see what it is that we've actually got

116
00:10:36,040 --> 00:10:46,490
back we've got back an array that starts at negative three and goes to three and has a hundred individual

117
00:10:46,850 --> 00:10:47,440
data points.

118
00:10:47,450 --> 00:10:54,480
One hundred individual values that are spaced out equally between minus three and three.

119
00:10:54,560 --> 00:11:04,250
If this you know was I don't know the number 10 instead of 100 then I'd get an array with much fewer

120
00:11:04,280 --> 00:11:05,090
values right.

121
00:11:05,090 --> 00:11:10,590
Just one two three four five six seven eight nine 10.

122
00:11:10,640 --> 00:11:10,820
Right.

123
00:11:11,270 --> 00:11:16,670
So you can see this little space function here is very very handy for generating data.

124
00:11:16,890 --> 00:11:24,760
And one of the things I quite like doing is actually adding the names for the arguments.

125
00:11:25,640 --> 00:11:31,040
When I make a call to my function because I just find it's so much more readable than having it like

126
00:11:31,580 --> 00:11:33,890
minus three three and 10.

127
00:11:33,890 --> 00:11:34,300
Right.

128
00:11:34,340 --> 00:11:40,400
That's that's that's much much harder to read especially when you're coming back to it and you might

129
00:11:40,400 --> 00:11:42,720
not remember it so well.

130
00:11:42,890 --> 00:11:49,450
So X on a score one is an array with approximately 100 values.

131
00:11:49,500 --> 00:11:52,410
We can even give it more room and give it like say five hundred.

132
00:11:52,460 --> 00:11:53,380
Right.

133
00:11:53,460 --> 00:11:54,820
Go ahead shift into.

134
00:11:54,920 --> 00:12:00,720
And that's us having made our data now that we've got our data.

135
00:12:00,980 --> 00:12:02,450
Let's plot it right.

136
00:12:02,690 --> 00:12:13,070
Let's graph it using our function so we can add the plot by using our map plot lib PDT so we can actually

137
00:12:13,070 --> 00:12:14,660
do this in one line.

138
00:12:14,660 --> 00:12:14,930
Right.

139
00:12:14,940 --> 00:12:23,910
We can say Pulte dot plot and then parentheses x underscore one comma and then what.

140
00:12:24,490 --> 00:12:34,840
F of effects no f of x underscore one we're going to feed the actual data that we have in x1 into our

141
00:12:35,200 --> 00:12:41,080
function here and we have plot f of x as the sort of this is our y right.

142
00:12:41,140 --> 00:12:44,180
And X and it's co 1 this is r x.

143
00:12:44,470 --> 00:12:48,790
So now it's called peel T dot show parentheses at the end.

144
00:12:49,420 --> 00:12:50,350
See what happens.

145
00:12:50,710 --> 00:12:51,190
And here it is.

146
00:12:51,190 --> 00:12:59,740
This is what our function actually looks like a parabola I actually sent to this a little bit as well

147
00:12:59,740 --> 00:13:10,390
so I'm going to set the axes by writing P.L. T dot X Lim parentheses and I must give it a range of minus

148
00:13:10,390 --> 00:13:11,130
three.

149
00:13:11,440 --> 00:13:14,230
Uh two I don't know three.

150
00:13:14,320 --> 00:13:15,110
Right.

151
00:13:15,160 --> 00:13:23,680
This is what we generated our data from right from minus three two three and the y axis.

152
00:13:23,680 --> 00:13:33,940
We can set with P.L. T dot y Lim parentheses zero comma I don't know C from zero to eight.

153
00:13:34,090 --> 00:13:37,980
See what we get.

154
00:13:38,030 --> 00:13:41,170
This is starting to look a little bit better.

155
00:13:41,240 --> 00:13:54,370
I'm going out to labels as well with PDT dot X label parentheses and then the string X a font size of

156
00:13:55,000 --> 00:13:57,850
16 headed for the y axis.

157
00:13:57,850 --> 00:14:05,320
We're gonna just write F of X so t dot y label parentheses and then I'm going to give it the string

158
00:14:06,070 --> 00:14:16,270
F of X comma font size my typing font size is also equal to 16.

159
00:14:16,270 --> 00:14:17,290
There we go.

160
00:14:19,000 --> 00:14:22,110
All right so that's the plot of our function.

161
00:14:22,240 --> 00:14:23,020
That's pretty good right.

162
00:14:23,050 --> 00:14:25,120
So we've got a cost function.

163
00:14:25,120 --> 00:14:29,600
An example of one X squared plus X plus one.

164
00:14:29,710 --> 00:14:36,980
And the way we've kind of broken this down is we've created a function of python function right.

165
00:14:37,120 --> 00:14:39,550
Also called it f of x less confusing.

166
00:14:39,580 --> 00:14:46,480
We've created some data and the reason we had to do this was so that we could generate a nice graph

167
00:14:46,620 --> 00:14:47,320
right.

168
00:14:47,410 --> 00:14:56,830
So Exodus go 1 one used num PIs Lynn space and then we've just used map plot lib again to graph our

169
00:14:57,040 --> 00:14:59,830
data here in the next lesson.

170
00:15:00,070 --> 00:15:06,420
We're gonna set the stage for minimizing our cost of f effects is our cost.

171
00:15:06,880 --> 00:15:11,090
Then the lowest cost will be at the bottom of this graph.

172
00:15:11,110 --> 00:15:11,410
Right.

173
00:15:11,410 --> 00:15:15,510
So it'll be somewhere around here.

174
00:15:15,580 --> 00:15:22,900
All we have to do now is find out what's the lowest cost and for what value of X is our cost.

175
00:15:22,900 --> 00:15:23,470
The lowest.
