WEBVTT
1
00:00:00.330 --> 00:00:00.830
All right.

2
00:00:00.840 --> 00:00:08.370
So in this video I want to show you how to drop certain undesirable rows from a data frame.

3
00:00:08.370 --> 00:00:16.620
And I also want to show you how we can change up the heat index on our data frame to add document ideas

4
00:00:16.770 --> 00:00:18.210
to track these emails.

5
00:00:18.300 --> 00:00:25.020
So numbering these emails sequentially rather than with these unintelligible file names that we've got

6
00:00:25.020 --> 00:00:26.880
by default.

7
00:00:27.000 --> 00:00:35.880
So our first goal is dropping these three rows here with the index by the name of commands CMBS and

8
00:00:35.940 --> 00:00:41.490
dropping the index with the name dot D's underscore store.

9
00:00:41.580 --> 00:00:52.500
So add a little markdown cell here and that's going to read for move system file entries from data frame

10
00:00:53.820 --> 00:00:58.230
and the way we're gonna do this is using the data frames drop function.

11
00:00:58.260 --> 00:01:02.720
So this is a method that takes a couple of arguments.

12
00:01:02.730 --> 00:01:03.470
Right.

13
00:01:03.480 --> 00:01:06.580
It needs to know which file names to drop.

14
00:01:06.630 --> 00:01:08.880
So I'm going to apply that has a list.

15
00:01:08.880 --> 00:01:09.870
Square brackets.

16
00:01:10.050 --> 00:01:19.700
Single quotes and then CMBS comma single quotes dot D.S. underscore store.

17
00:01:19.740 --> 00:01:25.260
Now remember no typos here and you'll succeed.

18
00:01:25.260 --> 00:01:34.050
So as it is this will drop the three rows with this index and it will drop the one row with this index.

19
00:01:34.200 --> 00:01:42.780
What we could do is we could overwrite our data data frame with this modified version here so we can

20
00:01:42.780 --> 00:01:49.350
drop the rows and we can overwrite the data that's stored in our data frame.

21
00:01:49.500 --> 00:01:57.300
But the alternative of doing it this way is supplying another argument to this method and that's called

22
00:01:57.600 --> 00:02:03.150
in place in place is set to false by default.

23
00:02:03.300 --> 00:02:10.740
And if we set it to true then we don't have to do this we just can write the method like so and it will

24
00:02:10.800 --> 00:02:13.410
update our data frame.

25
00:02:13.410 --> 00:02:20.610
Now before I had shift enter on the cell let me copy this line of code here and pasted here just to

26
00:02:20.610 --> 00:02:25.230
make sure that this road does indeed disappear.

27
00:02:25.230 --> 00:02:26.730
Let's take a look.

28
00:02:26.760 --> 00:02:27.320
All right.

29
00:02:27.360 --> 00:02:33.390
So the entire thing shift it up so we're not seeing the same emails right here.

30
00:02:33.450 --> 00:02:36.340
We're having a different number of rows.

31
00:02:36.540 --> 00:02:37.590
So it seems to have worked.

32
00:02:38.250 --> 00:02:42.490
Let's take a look at what the shape is of our data frame now.

33
00:02:42.660 --> 00:02:48.960
Data dot shape gives us five thousand seven hundred and ninety six.

34
00:02:48.960 --> 00:02:55.290
So four entries have been dropped and this is how we've done it.

35
00:02:55.350 --> 00:02:56.390
Brilliant.

36
00:02:56.400 --> 00:02:58.910
Now let's replace these index names.

37
00:02:58.950 --> 00:03:02.460
Let's change these index names to something else.

38
00:03:02.460 --> 00:03:03.900
Maybe just some numbers right.

39
00:03:03.900 --> 00:03:10.860
So let's just number our roads from one to five thousand seven hundred and ninety six.

40
00:03:10.860 --> 00:03:22.820
I'll quickly add a markdown cell and to see and document I.D. to track emails in data set.

41
00:03:22.880 --> 00:03:25.980
We're going to be doing some manipulation of these e-mails.

42
00:03:26.120 --> 00:03:33.980
So it's going to be quite nice to be able to have a specific I.D. associated with each specific email

43
00:03:34.190 --> 00:03:37.120
so we can pull it up refer to it later on.

44
00:03:38.060 --> 00:03:47.630
Let's generate our document I.D. first sort so create a variable called document underscore I.D. and

45
00:03:47.870 --> 00:03:56.330
this will be equal to the values it's a zero to five thousand seven hundred and ninety six.

46
00:03:56.330 --> 00:04:04.190
So we can use you in built range function from Python starting from zero and going through the length

47
00:04:04.730 --> 00:04:06.630
of our data frame.

48
00:04:06.650 --> 00:04:13.970
So data dot index will give us the length of our data frame.

49
00:04:13.970 --> 00:04:21.980
Let's take a look at what this looks like document I.D. is now a range from zero to five thousand seven

50
00:04:21.980 --> 00:04:23.720
hundred ninety six.

51
00:04:23.720 --> 00:04:31.010
We're not printing out the individual numbers here but that actually doesn't change how we can use this

52
00:04:31.340 --> 00:04:32.050
object.

53
00:04:32.240 --> 00:04:43.690
So we can create a new column say data square brackets single quotes Yossi underscore I.D. dock I.D.

54
00:04:44.280 --> 00:04:54.370
and set that equal to our document I.D. And if we take a look at what this actually looks like then

55
00:04:55.150 --> 00:05:02.290
we would get something like so we'd still have our file names as the index but now we have a column

56
00:05:02.710 --> 00:05:09.150
with all the document I.D. from zero to five thousand seven hundred and ninety five.

57
00:05:09.160 --> 00:05:09.510
Right.

58
00:05:09.550 --> 00:05:10.210
Ninety five.

59
00:05:10.210 --> 00:05:11.130
Why.

60
00:05:11.140 --> 00:05:16.780
Because it's this length minus one right.

61
00:05:16.890 --> 00:05:20.010
There's five thousand seven hundred and ninety six entries.

62
00:05:20.160 --> 00:05:27.060
But since we start counting from zero the last entry is five thousand seven hundred and ninety five.

63
00:05:27.060 --> 00:05:28.340
All right.

64
00:05:28.460 --> 00:05:30.740
So this is what a new column looks like.

65
00:05:30.740 --> 00:05:32.240
Fair enough.

66
00:05:32.240 --> 00:05:36.210
Now let's shift all these file names into another column.

67
00:05:36.350 --> 00:05:46.800
I'll say data square brackets single quotes file and a square name all in caps is equal to data don't

68
00:05:46.920 --> 00:05:51.270
index the index being these flames right him.

69
00:05:51.300 --> 00:05:59.830
This will create a new column with all these file names so if I see data dot head now what we see is

70
00:05:59.890 --> 00:06:06.600
we've got our index we've got our category here we've got the message column we've got the document

71
00:06:06.690 --> 00:06:13.810
I.D. column and we've got the filing column which at the moment is the same as our index.

72
00:06:13.860 --> 00:06:21.620
However what I'm going to do now is I'm going to set my index to be equal to my document I.D. and the

73
00:06:21.620 --> 00:06:29.440
way we can do this is simply by saying data is equal to data dot set on the score index.

74
00:06:29.480 --> 00:06:37.880
So this is a method on our data frame and we simply specify duck under school I.D. in single quotes.

75
00:06:38.030 --> 00:06:46.070
If I hit shift enter now this will update but similar to our drop method which had this in place parameter

76
00:06:46.070 --> 00:06:47.410
here that we can set.

77
00:06:47.420 --> 00:06:55.220
True we can do the very very same thing with set index shift tab on my keyboard brings up the quick

78
00:06:55.220 --> 00:07:02.360
documentation and I can see here that we can change this here to true as well and then get rid of this

79
00:07:02.360 --> 00:07:05.860
bit of code and right come here.

80
00:07:06.110 --> 00:07:09.470
And then in place is equal to true.

81
00:07:09.650 --> 00:07:14.450
This will accomplish the exact same thing here's what it looks like.

82
00:07:16.810 --> 00:07:19.810
Now we've got our document I.D. as our index.

83
00:07:19.810 --> 00:07:27.190
We've got our category 1 for spam 0 for non spam our email bodies in the message column and our file

84
00:07:27.190 --> 00:07:27.850
names.

85
00:07:27.970 --> 00:07:33.800
We've preserved as a separate column in our data frame fantastic.

86
00:07:33.980 --> 00:07:38.820
Now let's quickly check what the end of our data frame looks like.

87
00:07:38.820 --> 00:07:45.620
Data dump tail we can see the last five rows the last row has the document eighty five thousand seven

88
00:07:45.620 --> 00:07:47.120
hundred and ninety five.

89
00:07:47.130 --> 00:07:49.470
That holds the message body starting with the words.

90
00:07:49.490 --> 00:07:51.410
If you run all right.

91
00:07:51.440 --> 00:07:53.500
So we've done a lot of data cleaning now.

92
00:07:53.570 --> 00:07:59.480
We've extracted our relevant data from the raw text files namely the email bodies.

93
00:07:59.480 --> 00:08:01.940
We've converted them into a data frame.

94
00:08:01.940 --> 00:08:07.030
We've checked for empty emails and we've checked for no missing values as well.

95
00:08:07.400 --> 00:08:13.400
And then we've dropped all the rows that didn't contain an email body from our panties data from.
