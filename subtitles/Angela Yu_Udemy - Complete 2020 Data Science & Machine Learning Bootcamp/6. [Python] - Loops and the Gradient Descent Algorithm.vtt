WEBVTT
1
00:00:00.650 --> 00:00:04.520
All right now it's finally time to do the hard part.

2
00:00:04.530 --> 00:00:09.780
We're going to write our own algorithm that will find the lowest cost.

3
00:00:09.930 --> 00:00:17.670
And this is the famous gradient descent algorithm and gradient is well you guessed it just another word

4
00:00:17.790 --> 00:00:19.520
for slope.

5
00:00:19.520 --> 00:00:26.740
So I'm going to give you a very very Austrian perspective to think about the gradient descent algorithm.

6
00:00:26.740 --> 00:00:32.520
You know we've got a lot of mountains back in Austria and they're very very beautiful and you can go

7
00:00:32.520 --> 00:00:37.340
ski down them but a mountain is a force of nature.

8
00:00:37.350 --> 00:00:47.670
You have to respect the mountains you see the weather can change very very quickly and this is especially

9
00:00:47.730 --> 00:00:49.370
unpredictable in winter.

10
00:00:49.560 --> 00:00:51.400
And at high altitude.

11
00:00:51.480 --> 00:00:57.430
So you know imagine yourself that you've wandered off the beaten track and the fall comes rolling in.

12
00:00:57.540 --> 00:01:03.870
And at this point you find yourself in a survival situation.

13
00:01:03.870 --> 00:01:09.850
This is when you can't see very far and you can only feel the ground beneath your feet.

14
00:01:09.870 --> 00:01:15.420
The cold is going to be creeping in through your jacket and you find yourself thinking how do I get

15
00:01:15.420 --> 00:01:15.800
down.

16
00:01:15.810 --> 00:01:23.650
How do I get back down wealth to figure out which way is down and towards that hot cup of tea waiting

17
00:01:23.650 --> 00:01:25.460
for you at the end of your journey.

18
00:01:25.570 --> 00:01:28.240
You got a feel like.

19
00:01:28.240 --> 00:01:29.020
Which way is down.

20
00:01:29.020 --> 00:01:30.920
What is the slope right.

21
00:01:30.970 --> 00:01:38.520
You're going to look at your feet and you're going to figure out that the fastest way down is in the

22
00:01:38.520 --> 00:01:42.010
direction where the slope is steepest.

23
00:01:42.180 --> 00:01:45.990
Right where the descent is the most steep.

24
00:01:46.530 --> 00:01:53.700
And if you take a step downwards in that direction and then kind of get a feel for it again like which

25
00:01:53.700 --> 00:01:59.670
way which way is the slope and then take another step where the slope is steepest you'll be down in

26
00:01:59.670 --> 00:02:01.010
that valley in no time.

27
00:02:01.020 --> 00:02:04.930
And you can sit on that hot cup of tea right.

28
00:02:05.100 --> 00:02:11.910
And this is how you can think about gradient descent except instead of a mountain Yeah gradient descent

29
00:02:12.350 --> 00:02:18.060
is going to take place on a cost function and the cost function actually doesn't tend to look like this.

30
00:02:18.060 --> 00:02:21.060
It doesn't kind of have a peak if you will.

31
00:02:21.120 --> 00:02:22.100
Right.

32
00:02:22.170 --> 00:02:27.450
Because of a function had a peak then it would be called concave.

33
00:02:27.450 --> 00:02:29.510
It has a maximum.

34
00:02:29.760 --> 00:02:33.240
But with our cost functions we're going to be looking for minimums.

35
00:02:33.240 --> 00:02:33.420
Right.

36
00:02:33.420 --> 00:02:37.640
So if you imagine that mountain flipped upside down and all you've got is a valley.

37
00:02:37.760 --> 00:02:37.980
Right.

38
00:02:37.980 --> 00:02:45.070
That you have to kind of find then your cost function is going to look more like this.

39
00:02:45.090 --> 00:02:49.390
This is a kind of function that's called convex.

40
00:02:49.400 --> 00:02:55.800
It will have a minimum and a hard job is to get to the bottom of it because that's where the cost is

41
00:02:55.980 --> 00:02:58.040
lowest.

42
00:02:58.470 --> 00:03:01.140
Now gradient descent isn't always called gradient descent.

43
00:03:01.140 --> 00:03:04.840
There's another word for it that you might see as well in the literature.

44
00:03:04.920 --> 00:03:13.260
Sometimes it's referred to as steepest descent and yes it's an optimization algorithm for finding the

45
00:03:13.380 --> 00:03:15.390
minimum of a function.

46
00:03:15.390 --> 00:03:21.140
So you know think about our mountain example to find the minimum the function takes these little steps.

47
00:03:21.150 --> 00:03:21.420
Right.

48
00:03:21.420 --> 00:03:28.140
It takes a step in that direction where the slope is steepest in the direction of the negative of the

49
00:03:28.140 --> 00:03:35.240
gradient and bit by bit ends up in the bottom of the valley.

50
00:03:35.260 --> 00:03:35.620
All right.

51
00:03:35.650 --> 00:03:38.560
So let's implement this and Jupiter notebook.

52
00:03:38.560 --> 00:03:41.650
Let's add another markdown cell here.

53
00:03:41.650 --> 00:03:51.760
And the cell cell type markdown down and put two hash tags there for a section heading and that section

54
00:03:51.760 --> 00:04:00.340
heading is gonna be Python loops and gradient descent.

55
00:04:00.340 --> 00:04:06.610
Now if you're a seasoned programmer you're gonna be familiar with writing loops but if you're new to

56
00:04:06.610 --> 00:04:13.840
Python or your new programming then the next couple of minutes are going to be the introduction to this

57
00:04:14.080 --> 00:04:20.240
topic of loops loops are little bits of code that are executed over and over again.

58
00:04:20.290 --> 00:04:22.520
We're going to walk down that mountain.

59
00:04:22.540 --> 00:04:26.140
We're going to walk down into the valley with our gradient descent algorithm.

60
00:04:26.140 --> 00:04:33.970
So this is going to be a very very useful tool for accomplishing that because our algorithm has to complete

61
00:04:33.970 --> 00:04:35.590
that famous three step process.

62
00:04:35.590 --> 00:04:35.990
Right.

63
00:04:36.040 --> 00:04:41.080
Predict calculate error and learn and repeat.

64
00:04:41.080 --> 00:04:47.560
So instead of writing the same Python instructions over and over again we're going to be using loops

65
00:04:47.830 --> 00:04:51.360
to simplify that for us.

66
00:04:51.820 --> 00:04:55.730
Speaking of four this is the first loop I'm going to introduce to you guys.

67
00:04:55.750 --> 00:05:04.850
So this is gonna be the for loop in Python so I'll just write a little commentary Python for loop and

68
00:05:04.870 --> 00:05:09.170
this is what the syntax looks like if the keyword for.

69
00:05:09.220 --> 00:05:15.460
And then there's gonna be a variable in this case I'm gonna call it and and then then other keyword

70
00:05:16.300 --> 00:05:28.070
in and then I'm going to say range parentheses five colon new line and now we're inside the loop here

71
00:05:28.070 --> 00:05:33.900
we're gonna print famous first words hello world.

72
00:05:34.160 --> 00:05:36.290
OK let's shift and turn.

73
00:05:36.290 --> 00:05:38.010
See what happens.

74
00:05:38.050 --> 00:05:38.330
All right.

75
00:05:38.350 --> 00:05:41.600
So we've printed hello world five times.

76
00:05:41.600 --> 00:05:41.800
Right.

77
00:05:41.810 --> 00:05:43.210
One two three four five.

78
00:05:43.640 --> 00:05:50.780
If I change this range to three l print it three times if I change it to a thousand l printed a thousand

79
00:05:50.780 --> 00:05:58.250
times but let's stick to the stick to five for the time being and let's take a closer look at this value

80
00:05:58.340 --> 00:05:59.130
end here.

81
00:05:59.150 --> 00:05:59.420
Right.

82
00:05:59.450 --> 00:06:06.580
And is just a variable and it's going to keep track of how often are for loop has run.

83
00:06:06.590 --> 00:06:15.440
So if I say hello world comma and then I can see what the value is of the variable and each time the

84
00:06:15.440 --> 00:06:16.050
loop is run.

85
00:06:16.070 --> 00:06:17.200
So it starts at zero.

86
00:06:17.270 --> 00:06:20.830
Programmers like to start counting from zero.

87
00:06:21.050 --> 00:06:23.900
And that's the very first time the loop runs.

88
00:06:23.900 --> 00:06:28.400
Then this print statement is executed another time.

89
00:06:28.490 --> 00:06:33.410
So second time third time fourth time fifth time.

90
00:06:33.590 --> 00:06:37.010
And at this point the loop stops.

91
00:06:37.010 --> 00:06:38.890
Right.

92
00:06:39.080 --> 00:06:43.620
Show you that print.

93
00:06:43.840 --> 00:06:46.240
End of loop.

94
00:06:46.770 --> 00:06:49.170
So the python program will come in here.

95
00:06:49.240 --> 00:06:53.460
They'll execute whatever's inside the loop and you can tell what's inside.

96
00:06:53.460 --> 00:06:59.850
By the spacing a predefined number of times in this case five times.

97
00:06:59.850 --> 00:07:00.320
Right.

98
00:07:00.330 --> 00:07:03.630
Zero one two three four.

99
00:07:03.630 --> 00:07:07.380
Now we can call a little counter variable here and we can call it I.

100
00:07:07.380 --> 00:07:09.960
This is another one that is often used.

101
00:07:09.960 --> 00:07:13.240
So I call it I get exactly the same result.

102
00:07:13.290 --> 00:07:15.180
It really doesn't matter what do you call it.

103
00:07:15.180 --> 00:07:19.380
You can call it counter as long as you're consistent.

104
00:07:19.380 --> 00:07:28.840
You can access the variable the looping counter inside of the loop by its name all right.

105
00:07:28.840 --> 00:07:30.710
So that's the that's the for loop.

106
00:07:30.880 --> 00:07:38.590
It executes a predefined number of times and it's got this very very simple syntax for an in range.

107
00:07:38.650 --> 00:07:40.460
And then some number here.

108
00:07:40.480 --> 00:07:45.490
So this is how often times you want to execute the loop with that out of the way.

109
00:07:45.520 --> 00:07:53.620
Let me show you another type of loop this type of loop is also very very common.

110
00:07:53.800 --> 00:07:57.510
And this is the so-called while loop

111
00:08:00.360 --> 00:08:03.350
a while loop works a little differently.

112
00:08:03.480 --> 00:08:04.130
Right.

113
00:08:04.140 --> 00:08:08.210
It has a condition that it checks every time it runs right.

114
00:08:08.220 --> 00:08:14.610
So it will check the condition and then if that condition holds it's going to run the code inside the

115
00:08:14.610 --> 00:08:19.890
loop and it's going to continue doing that until the condition fails.

116
00:08:19.890 --> 00:08:27.870
So if I have a counter and I say it's equal to zero and then I can write my while loop like this I can

117
00:08:27.870 --> 00:08:39.170
see while which is a key word and see counter is smaller than I don't know what seven colon print

118
00:08:41.690 --> 00:08:42.350
counting

119
00:08:47.580 --> 00:08:48.320
counter.

120
00:08:48.830 --> 00:08:57.910
So print the value of my counter inside my loop and then I'll say counter as equal to counter plus one.

121
00:08:57.910 --> 00:09:04.190
So I'm going to increment my counter variable by 1 every time the loop runs.

122
00:09:06.280 --> 00:09:12.850
And then when I finished with the loop I'll print something else.

123
00:09:12.850 --> 00:09:14.190
Yeah.

124
00:09:14.200 --> 00:09:17.260
Ready or not here I come.

125
00:09:18.590 --> 00:09:23.260
Yeah let's make that loop a little bit more menacing than the last one.

126
00:09:23.260 --> 00:09:33.640
So for hit shift enter now I can see my print statement inside my loop executed seven times.

127
00:09:33.640 --> 00:09:39.410
Right starts at zero and executed until our condition fails.

128
00:09:39.420 --> 00:09:46.630
This is the condition so whatever follows the while keyword is the condition that's checked.

129
00:09:47.220 --> 00:09:50.080
And this fails when counter is equal to seven.

130
00:09:50.200 --> 00:09:53.280
Seven is equal to seven it's not smaller than seven.

131
00:09:53.340 --> 00:09:56.720
So this will be false at this point.

132
00:09:57.000 --> 00:10:02.770
The loop terminates and the code inside is not executed anymore.

133
00:10:03.060 --> 00:10:06.810
And we jump to our print statement below.

134
00:10:06.810 --> 00:10:09.430
Write this one ready or not here I come.

135
00:10:09.780 --> 00:10:11.780
And this is what we're seeing here.

136
00:10:13.140 --> 00:10:21.020
Again I can accomplish the very very same thing as with the for loop so I can executed five times.

137
00:10:21.090 --> 00:10:27.530
So if you want You can also execute a while loop a predefined number of times.

138
00:10:27.610 --> 00:10:31.510
Yeah there's a small catch that's a small Gotcha.

139
00:10:31.650 --> 00:10:37.250
That can happen with while loops that you won't get with for loops.

140
00:10:37.250 --> 00:10:44.100
Hey guess what this gotchas any guess what it is that can trip you up and where you can shoot yourself

141
00:10:44.100 --> 00:10:44.580
in the foot

142
00:10:47.440 --> 00:10:52.920
so with while loops you can get into a situation where they don't stop where they don't terminate.

143
00:10:52.920 --> 00:11:01.980
So for example if I had made a typo here and instead of that plus I had hit minus then my loop would

144
00:11:01.980 --> 00:11:05.770
actually run forever right because it would start at a zero.

145
00:11:05.770 --> 00:11:14.270
Then when it reaches this line my counter would go to negative 1 then would come here and go to negative

146
00:11:14.270 --> 00:11:17.420
2 and then we can hang in negative 3.

147
00:11:17.420 --> 00:11:20.830
And this thing would just continue going right.

148
00:11:20.960 --> 00:11:28.370
Which is clearly not my intention right it would continue going and cause a lot of problems.

149
00:11:28.400 --> 00:11:37.430
So with while loops you have to be careful that you don't accidentally write an infinite loop.

150
00:11:37.940 --> 00:11:45.080
So for loops by their very nature run a predefined number of times while loops run while a certain condition

151
00:11:45.080 --> 00:11:46.700
holds true.

152
00:11:46.910 --> 00:11:53.480
And this is where you gotta be gotta be careful so with your while loops you can make sure they terminate

153
00:11:54.430 --> 00:11:59.940
and the easiest way to remember this is with an old programming joke.

154
00:11:59.980 --> 00:12:01.810
Yeah that goes something like this.

155
00:12:02.060 --> 00:12:09.440
A programmer once said to his wife Honey I'm heading to the supermarket to buy some groceries to which

156
00:12:09.440 --> 00:12:13.710
his wife responded while you're there buy some milk.

157
00:12:13.710 --> 00:12:16.460
And alas he never returned home again.

158
00:12:17.510 --> 00:12:17.900
Oh.

159
00:12:17.900 --> 00:12:19.130
Crickets.

160
00:12:19.460 --> 00:12:21.220
Back to gradient descent.

161
00:12:21.440 --> 00:12:26.330
Let's tackle that in the new cell here at the bottom.

162
00:12:26.330 --> 00:12:30.850
The thing with gradient descent is that we need a couple of ingredients right.

163
00:12:30.860 --> 00:12:34.170
We need a starting point.

164
00:12:34.190 --> 00:12:41.990
Then we need a learning rate and we're gonna need some maybe temporary value to hold onto something

165
00:12:42.200 --> 00:12:45.120
while our program is executing.

166
00:12:45.230 --> 00:12:47.720
So I'm gonna create these three things here.

167
00:12:47.750 --> 00:12:54.600
When I say new X which is gonna be our starting point I set it equal to three when to start with the

168
00:12:54.680 --> 00:12:57.050
three as the starting point.

169
00:12:57.090 --> 00:13:03.440
A previous X and this is gonna be my temp value if you will.

170
00:13:03.530 --> 00:13:06.300
That only matters inside of the loop.

171
00:13:07.180 --> 00:13:11.700
And then I'm going to also specify a learning rate.

172
00:13:11.720 --> 00:13:11.990
Yeah.

173
00:13:12.010 --> 00:13:14.630
Or gamma or whatever you call it.

174
00:13:14.680 --> 00:13:18.280
So I'll call it a step multiplier

175
00:13:22.310 --> 00:13:27.900
and I'll set it equal to zero point one now it's time to write that loop.

176
00:13:27.910 --> 00:13:36.930
It's gonna be a for loop for us so we'll see for and in range and maybe start at 30.

177
00:13:37.480 --> 00:13:39.640
Colon.

178
00:13:39.640 --> 00:13:40.880
And now for the first step.

179
00:13:40.930 --> 00:13:43.040
What's the first thing that we have to do.

180
00:13:43.510 --> 00:13:46.020
Well we have to make a guess right.

181
00:13:46.030 --> 00:13:47.770
We have to make some prediction.

182
00:13:47.770 --> 00:13:50.930
This is step one of the machine learning process.

183
00:13:50.980 --> 00:13:59.280
So when you take our time value previous on a score X and set equal to our random guess.

184
00:13:59.310 --> 00:13:59.760
Yeah.

185
00:14:00.000 --> 00:14:01.990
New X equals three.

186
00:14:02.220 --> 00:14:06.970
Three was a random guess just our starting point for our gradient descent.

187
00:14:06.970 --> 00:14:08.570
It's going to set them equal to each other.

188
00:14:09.860 --> 00:14:16.130
Now we get to step two step two is calculating the error because we need to know how far off we were

189
00:14:16.650 --> 00:14:18.010
from the previous lesson.

190
00:14:18.050 --> 00:14:28.220
You will know that the steepness of the slope tells us how far off we are right from the minimum because

191
00:14:28.220 --> 00:14:30.310
at the minimum the slope is equal to zero.

192
00:14:31.100 --> 00:14:35.210
And everywhere else it's equal to some number that that isn't zero.

193
00:14:35.250 --> 00:14:47.470
So our gradient is gonna be equal to D F of the previous X..

194
00:14:47.510 --> 00:14:47.850
Yeah.

195
00:14:48.280 --> 00:14:56.140
So we're gonna call our derivative function when I pass in the tenth value.

196
00:14:56.170 --> 00:15:05.570
So at the point where we are in our function and in a store the the slope yeah at this point in a variable

197
00:15:05.570 --> 00:15:12.380
called gradient so one thing you might ask at this point is why is calculating the gradient.

198
00:15:12.420 --> 00:15:14.330
Step two were calculating the arrow.

199
00:15:14.340 --> 00:15:16.770
What's the link between those two things.

200
00:15:17.100 --> 00:15:25.430
And the way to think about it is that the further away we are from our minimum the steeper our slope.

201
00:15:25.440 --> 00:15:33.300
So if the slope is very very steep then it's indicative of being very very far away from where we want

202
00:15:33.300 --> 00:15:37.380
to be a steep slope means that we've got a high error.

203
00:15:37.440 --> 00:15:42.590
And if the slope is zero or close to it then our era is small.

204
00:15:44.390 --> 00:15:47.420
And now it's time for that adjustment step for that learning step.

205
00:15:48.380 --> 00:16:00.770
So the new value of X is gonna be equal to the previous value of X minus because we get to go down the

206
00:16:00.770 --> 00:16:04.310
hill minus our step multiplier

207
00:16:07.750 --> 00:16:17.960
times the slope times the gradient and remember this is the value of the slope at the previous value

208
00:16:17.960 --> 00:16:19.400
of x.

209
00:16:19.450 --> 00:16:24.820
So what we're doing here is we're taking a step that's proportional to the negative of the gradient

210
00:16:24.820 --> 00:16:27.660
of the function at the point that we're at.

211
00:16:28.600 --> 00:16:35.680
And then we're subtracting from the previous x value because we want to move against the gradient towards

212
00:16:35.680 --> 00:16:41.130
the minimum and this is where the learning in machine learning takes place.

213
00:16:42.260 --> 00:16:49.470
So this loop is going to run 30 times and after it's finished let's print out our results.

214
00:16:49.470 --> 00:16:55.350
So I say the local minimum occurs at

215
00:16:58.550 --> 00:17:01.350
at what Well the new value of X right.

216
00:17:01.350 --> 00:17:08.290
Because that's what we're updating in our for loop and we're gonna print out the slope.

217
00:17:08.420 --> 00:17:08.660
Yeah.

218
00:17:08.820 --> 00:17:11.370
So we just have to make sure our slope is close to zero.

219
00:17:11.370 --> 00:17:12.140
Right.

220
00:17:12.270 --> 00:17:16.410
Or the value of D of F of X..

221
00:17:16.590 --> 00:17:19.290
Yeah.

222
00:17:19.490 --> 00:17:24.820
So uh while you're at this point.

223
00:17:24.990 --> 00:17:36.450
So this is gonna be our derivative function and as an input it's gonna get the latest value of x finally

224
00:17:37.190 --> 00:17:40.650
when I print out what the what the cost is at this point.

225
00:17:40.680 --> 00:17:49.290
So this is the f of x value or cost at this point is

226
00:17:52.030 --> 00:18:02.710
and this is gonna be our cost function at the point where the cost is lowest now before I run this.

227
00:18:02.730 --> 00:18:12.120
Make sure you've got a plus sign here because if you ever have to go to restart and run all or run all

228
00:18:12.120 --> 00:18:12.890
above.

229
00:18:12.930 --> 00:18:13.480
Yeah.

230
00:18:13.710 --> 00:18:18.150
Then you may want to make sure that this loop doesn't continue going.

231
00:18:18.210 --> 00:18:19.820
I just caught myself out there.

232
00:18:19.980 --> 00:18:30.800
So his shift into now here and I get my print statements shooting off the results of our gradient descent.

233
00:18:30.960 --> 00:18:32.060
So what can we learn from this.

234
00:18:32.070 --> 00:18:36.890
What can we deduce from the values that we're seeing here.

235
00:18:38.330 --> 00:18:43.340
Well the first thing is that we can see that they're approximations right.

236
00:18:43.340 --> 00:18:45.700
This isn't an exact value.

237
00:18:45.710 --> 00:18:47.920
We're not getting a very clean answer here.

238
00:18:49.360 --> 00:18:55.930
But that might be the case because maybe we haven't run our loop often enough.

239
00:18:55.930 --> 00:19:06.490
So if I increase the value here from say 30 to 50 let's see what happens with our values that we get

240
00:19:06.490 --> 00:19:14.570
printed out so one thing that we're seeing is that our slope is getting a lot closer to zero here than

241
00:19:14.570 --> 00:19:15.610
before.

242
00:19:15.620 --> 00:19:23.960
The second thing is is that this value here on f of x is also getting a lot more precise and so is our

243
00:19:23.960 --> 00:19:24.730
new value of x.

244
00:19:24.740 --> 00:19:31.890
So it's getting much much closer to a minus zero point five.

245
00:19:31.920 --> 00:19:36.960
Yeah if I run this 500 times let's see what happens.

246
00:19:38.590 --> 00:19:45.060
So as you can see we're converging on this local minimum by brute force right.

247
00:19:45.070 --> 00:19:48.790
We didn't solve our cost function here analytically.

248
00:19:48.790 --> 00:19:56.010
What we're doing is we're iterating and going down that valley that cost function.

249
00:19:56.380 --> 00:20:01.970
Until we reach the minimum point and at the minimum our slope is equal to zero.

250
00:20:02.050 --> 00:20:05.250
Our cost is equal to zero point seven five.

251
00:20:05.470 --> 00:20:11.960
And this is when the x is equal to minus zero point five.

252
00:20:12.010 --> 00:20:15.880
So obviously you can run this thing a thousand times or what have you.

253
00:20:15.880 --> 00:20:16.460
Right.

254
00:20:16.600 --> 00:20:23.200
But often times you actually know ahead of time how precise a calculation you need right from the resource

255
00:20:23.200 --> 00:20:25.120
management point of view.

256
00:20:25.130 --> 00:20:32.590
What you can actually do is you can tell the loop to stop running once a certain level of precision

257
00:20:32.590 --> 00:20:33.820
is met.

258
00:20:33.820 --> 00:20:35.920
And I'm sure you're looking up.

259
00:20:35.950 --> 00:20:36.180
Yeah.

260
00:20:36.190 --> 00:20:41.500
You scrolling up and you looking at this while loop here and you're thinking ah yeah the Y loop seems

261
00:20:41.500 --> 00:20:42.680
ideal for this right.

262
00:20:42.700 --> 00:20:49.930
We can run the while loop as long as our calculation is within a certain level of precision and you'd

263
00:20:49.930 --> 00:20:50.500
be right.

264
00:20:50.500 --> 00:20:57.430
That's exactly something you could implement if you wanted to with the structure of the while loop.

265
00:20:57.430 --> 00:21:02.500
Let me show you how to do this with the for loop as well.

266
00:21:02.620 --> 00:21:09.190
We're going to modify our code here a little bit to include a cutoff point for a certain level of precision

267
00:21:10.300 --> 00:21:17.480
and the way I'm going to do this is by adding another variable up top the same precision.

268
00:21:17.840 --> 00:21:24.820
It's gonna be equal to zero point zero zero zero one.

269
00:21:24.880 --> 00:21:25.160
Yeah.

270
00:21:25.190 --> 00:21:30.700
So this is how precise I want my answer to be.

271
00:21:30.770 --> 00:21:33.670
Now where did this come into play.

272
00:21:33.680 --> 00:21:41.030
Well what we're interested in in with our precision estimate is what's the difference between the new

273
00:21:41.030 --> 00:21:42.450
X and the old X right.

274
00:21:42.800 --> 00:21:49.280
So if those two are getting closer and closer and closer together then our calculation is getting much

275
00:21:49.280 --> 00:21:51.350
more precise.

276
00:21:51.380 --> 00:22:01.130
So what we can do is we can say well the step size is gonna be the difference between our new X minus

277
00:22:01.220 --> 00:22:03.110
our previous X..

278
00:22:03.140 --> 00:22:05.430
Yeah that's gonna be the step size.

279
00:22:05.540 --> 00:22:12.110
And just to make sure that step sizes is always a positive number we're going to say well what we care

280
00:22:12.110 --> 00:22:22.250
about is actually the absolute value of our step size and uh no change the number of times this loop

281
00:22:22.250 --> 00:22:25.250
runs to maybe 10.

282
00:22:25.260 --> 00:22:25.650
Yeah.

283
00:22:25.730 --> 00:22:32.690
And I'm going to print out the step size just we can see how it it evolves over time as the as the loop

284
00:22:32.690 --> 00:22:34.180
runs.

285
00:22:34.200 --> 00:22:34.960
So let me run this.

286
00:22:34.970 --> 00:22:36.530
Let me press shift enter here.

287
00:22:37.920 --> 00:22:42.870
And we can see here our step size initially starts out with zero point seven.

288
00:22:42.870 --> 00:22:43.730
And then it decreases.

289
00:22:43.740 --> 00:22:44.040
Right.

290
00:22:44.040 --> 00:22:48.490
The new X and the old X are getting closer and closer together.

291
00:22:48.690 --> 00:22:56.160
So we can see here our step size is decreasing.

292
00:22:56.330 --> 00:22:59.570
Coming up this print statement so it doesn't execute anymore.

293
00:23:00.070 --> 00:23:04.280
And I'm going to add the condition for terminating this for loop.

294
00:23:04.360 --> 00:23:13.360
Yeah I'm going to say well if the step size is smaller than the precision.

295
00:23:13.360 --> 00:23:20.500
So in other words if the difference between the new X and the previous x is smaller than zero point

296
00:23:20.500 --> 00:23:27.280
0 0 0 1 then we can terminate our loop then we can stop with our calculations.

297
00:23:27.630 --> 00:23:33.670
So put a column there and then the python keyword for stopping this loop.

298
00:23:33.810 --> 00:23:35.780
It's called break.

299
00:23:35.970 --> 00:23:37.530
We'll leave it at that.

300
00:23:38.220 --> 00:23:43.540
And uh I'm going to say well run 500 times.

301
00:23:43.540 --> 00:23:55.790
Yeah for loop run from zero to 500 but if the step size is smaller than our predetermined precision

302
00:23:56.930 --> 00:24:04.050
then stop running let's see how often our loop runs according to this logic.

303
00:24:04.670 --> 00:24:06.940
Well we don't know right.

304
00:24:06.970 --> 00:24:20.310
Could have run any number of times we probably have to print the value of an SO print loop run this

305
00:24:20.790 --> 00:24:21.900
many times

306
00:24:30.230 --> 00:24:32.830
got this.

307
00:24:33.150 --> 00:24:37.890
So given these constraints our loop ran 40 times.

308
00:24:37.980 --> 00:24:40.140
It's actually not that much.

309
00:24:40.170 --> 00:24:41.450
Not that many times.

310
00:24:41.640 --> 00:24:48.230
If we add an extra zero here on the position that we're looking for and press shift and to again we

311
00:24:48.240 --> 00:24:52.600
can see that it ran 50 times so it actually never gets up to 500.

312
00:24:52.600 --> 00:24:53.190
Yeah.

313
00:24:53.310 --> 00:25:00.340
Doesn't doesn't go up all that way and that's because it reaches that terminating condition.

314
00:25:00.450 --> 00:25:06.840
This brake statement a lot sooner but still the way we wrote this code we have two conditions where

315
00:25:06.840 --> 00:25:07.880
it can stop.

316
00:25:08.100 --> 00:25:16.320
It can either reach 500 and it will stop there or when it reaches the minimum and that step size becomes

317
00:25:16.320 --> 00:25:17.800
very very very small.

318
00:25:17.910 --> 00:25:25.200
Then it can also terminate now running the python loop and calculating the minimum is very well and

319
00:25:25.200 --> 00:25:30.920
good but I'm a very very visual person and I'm sure you might be too.

320
00:25:30.920 --> 00:25:37.140
So I find graphing things very very helpful the way we're gonna go about graphing it is.

321
00:25:37.140 --> 00:25:46.520
First off we have to kind of keep track of all the values that we've calculated inside of our loop.

322
00:25:46.680 --> 00:25:49.080
So we're going to create two lists.

323
00:25:49.140 --> 00:25:49.380
Yeah.

324
00:25:49.380 --> 00:25:53.890
Two Python lists one of them is going to hold onto our X values.

325
00:25:54.030 --> 00:26:00.720
So it's gonna be a list and it's going to contain the new X values and the other thing is I'm going

326
00:26:00.720 --> 00:26:04.560
to also create a list for all the slopes.

327
00:26:04.620 --> 00:26:12.300
So I'm going to call this slope list and it's going to contain whatever value our derivative has at

328
00:26:12.630 --> 00:26:14.210
this exposition.

329
00:26:14.220 --> 00:26:14.460
Yeah.

330
00:26:17.260 --> 00:26:21.370
Now within our loop we're actually doing these calculations anyhow.

331
00:26:21.370 --> 00:26:30.440
So all we need to do is we need to spend the x values and the slope values to our list.

332
00:26:30.490 --> 00:26:38.650
So I see X list dot append to add a new value to it of the new x value.

333
00:26:38.650 --> 00:26:46.700
And this is the x value that we've updated after we've taken our step down the cost function.

334
00:26:46.810 --> 00:26:56.590
So going to pen this value to our list and also for our slope list we're going to append

335
00:27:00.620 --> 00:27:06.110
the output from our derivative function at the new x value.

336
00:27:06.110 --> 00:27:06.940
Yeah.

337
00:27:07.220 --> 00:27:08.510
And that's it.

338
00:27:08.510 --> 00:27:11.040
That gives us the basis for plotting out charts.

339
00:27:11.120 --> 00:27:12.040
So let's do that now.

340
00:27:12.590 --> 00:27:23.890
I'm gonna go up here and I'm actually going to copy this cell here to edit copy cell and when I reuse

341
00:27:23.890 --> 00:27:25.730
it down here a lot of this code.

342
00:27:25.750 --> 00:27:36.730
So in a pace the cell above I find when I edit my comment to uh say that we're gonna superimpose the

343
00:27:38.890 --> 00:27:40.540
gradient descent calculations.

344
00:27:40.570 --> 00:27:40.760
Yeah

345
00:27:48.910 --> 00:27:57.520
so this is the goal now we've got two charts and we're gonna do is we're gonna add a scatter plot on

346
00:27:57.520 --> 00:28:01.090
top of these with the data that we've captured from our loop.

347
00:28:01.630 --> 00:28:02.520
Here's how we're gonna do it

348
00:28:08.040 --> 00:28:09.370
for our first chart.

349
00:28:09.390 --> 00:28:15.930
We're gonna say PDT dots scatter parentheses and then we have to supply some arguments.

350
00:28:16.350 --> 00:28:27.520
So on the x axis it's gonna be our list of x values and for our y axis we want to feed our list of values

351
00:28:28.060 --> 00:28:31.100
into our cost function.

352
00:28:31.160 --> 00:28:31.350
Right.

353
00:28:31.360 --> 00:28:33.620
So this is our F of X..

354
00:28:33.760 --> 00:28:40.870
Now you might think I can actually just put the X list in here and press shift enter but this isn't

355
00:28:40.870 --> 00:28:42.810
going to work when I get an error.

356
00:28:43.240 --> 00:28:51.340
Yeah and this is because our function the way that we've written it cannot process a list.

357
00:28:51.340 --> 00:28:55.630
It's unable to process this list as it is.

358
00:28:55.630 --> 00:29:01.960
So I'm gonna have to do a little type conversion first so I'm going to create a variable called values

359
00:29:02.050 --> 00:29:11.170
and set it equal to a num pi array which is gonna take as an argument our list of x values.

360
00:29:11.320 --> 00:29:22.360
So our function can work with an array but it can't work with a list and to press shift enter we should

361
00:29:22.360 --> 00:29:29.500
see that now we have a list kind of plant on top of our graph.

362
00:29:29.500 --> 00:29:33.640
But in terms of data visualization that was very very poor.

363
00:29:33.760 --> 00:29:34.030
Right.

364
00:29:34.150 --> 00:29:43.550
So I'm going to say the color of these dots should be red.

365
00:29:43.660 --> 00:29:52.000
They should be a lot larger so that the signs equal to maybe 100 and give them a little bit of transparency.

366
00:29:52.000 --> 00:29:55.870
So when I say the alpha should be equal to maybe zero point six.

367
00:29:55.870 --> 00:29:58.690
See how that looks.

368
00:29:58.820 --> 00:30:00.190
It's looking a lot better.

369
00:30:00.340 --> 00:30:00.510
Yeah.

370
00:30:00.520 --> 00:30:10.740
So we can see here as our algorithm runs going closer and closer to this minimum but we can also show

371
00:30:10.740 --> 00:30:13.940
this on our second chart as well.

372
00:30:13.980 --> 00:30:14.250
Right.

373
00:30:14.280 --> 00:30:24.270
So we can see how we're inching closer to where the slope is zero on this right hand chart and we can

374
00:30:24.270 --> 00:30:29.880
do that by making use of the other list that we've captured.

375
00:30:29.880 --> 00:30:39.930
So in this case it is a little bit simpler because we just have to write peel t scatter parentheses

376
00:30:40.740 --> 00:30:47.670
x list x values still the same but for the Y of how use we've done a bit of a calculation already so

377
00:30:47.670 --> 00:30:52.800
we can say slope on the score list

378
00:30:57.000 --> 00:30:59.540
and let's also make it a red color

379
00:31:02.920 --> 00:31:13.290
make the dots big size one hundred and alpha zero point five or something.

380
00:31:13.290 --> 00:31:17.490
Let's see how it goes.

381
00:31:17.930 --> 00:31:26.030
It's looking not bad but I do wonder if there maybe should be some transparency on the line itself.

382
00:31:26.030 --> 00:31:36.450
So if this thing had an alpha of say zero point six would it look a bit better yeah.

383
00:31:36.780 --> 00:31:45.960
Yeah this looks this looks better do the same thing with our plot at the top as well.

384
00:31:46.030 --> 00:31:52.110
Let's give this an alpha of zero point maybe six as well.

385
00:31:52.110 --> 00:31:55.520
See or zero point seven perhaps

386
00:31:58.320 --> 00:31:59.420
zero point eight.

387
00:31:59.580 --> 00:32:00.050
Try.

388
00:32:00.870 --> 00:32:01.270
Yeah.

389
00:32:01.350 --> 00:32:03.720
This is looking pretty good.

390
00:32:03.720 --> 00:32:11.700
So you can see here that now we have our scatter plot superimposed on our derivative function and it

391
00:32:11.700 --> 00:32:15.930
stops when the slope is equal to zero.

392
00:32:15.930 --> 00:32:21.900
And on the regular cost function we're moving down and down and down and down into the minimum at the

393
00:32:21.900 --> 00:32:24.900
bottom of this parabola.

394
00:32:24.940 --> 00:32:30.420
You know the cool thing is that we can even zoom in a little bit and we can even do a little close up

395
00:32:30.960 --> 00:32:33.300
of our slope.

396
00:32:33.300 --> 00:32:34.290
Let me show you what I mean.

397
00:32:34.710 --> 00:32:46.920
So if I take this bit of code here copied and pasted and say chart number three and call this the rid

398
00:32:46.920 --> 00:32:47.280
of

399
00:32:50.020 --> 00:33:03.190
close up and then I change the title and say gradient descent close up might get rid of the Y level

400
00:33:03.580 --> 00:33:11.380
don't need that to keep the grid but I'm going to change what's on the axes and go from say zero point

401
00:33:12.400 --> 00:33:18.550
five five to minus zero point two.

402
00:33:18.550 --> 00:33:24.200
So zooming in here on the x axis and on the y axis I'm going to do the same.

403
00:33:24.200 --> 00:33:33.660
When I zoom in from zero point three to zero point eight I'm still gonna leave it sky blue.

404
00:33:33.660 --> 00:33:41.710
Change the line with two six four zero point eight.

405
00:33:41.920 --> 00:33:48.550
Change these values around a little bit to make it a bit more distinct and make the dots a little bigger.

406
00:33:48.700 --> 00:34:00.670
And if a press shift enter now then nothing will happen because I need to adjust my subplot.

407
00:34:00.680 --> 00:34:00.850
Right.

408
00:34:00.860 --> 00:34:02.300
I'm adding a third plot here.

409
00:34:02.330 --> 00:34:09.090
So I have to make sure that I have in this case what three columns right I've got three chance.

410
00:34:09.140 --> 00:34:12.390
This is chart number three of the lot.

411
00:34:12.440 --> 00:34:18.710
And this is gonna be also edited to chart number two right.

412
00:34:19.750 --> 00:34:26.840
On the three column subplot and same with us as this chart number one on the three column subplot.

413
00:34:27.030 --> 00:34:29.890
And it's now that I can run this.

414
00:34:29.890 --> 00:34:32.270
See what happens.

415
00:34:32.570 --> 00:34:33.100
Huh.

416
00:34:33.160 --> 00:34:34.750
So I'd say this is pretty good right.

417
00:34:34.780 --> 00:34:42.190
We've got a close up here where we can actually watch the gradient descent converge upon that zero value.

418
00:34:42.190 --> 00:34:47.980
And you can see those steps getting smaller and smaller and smaller and smaller as we're getting closer

419
00:34:47.980 --> 00:34:49.050
to our goal.

420
00:34:49.060 --> 00:34:51.530
I think this is incredibly cool.

421
00:34:51.700 --> 00:34:54.300
The charts look a little bit squished.

422
00:34:54.640 --> 00:35:01.150
Maybe what I'll do is I'll change this from 15 to I don't know 20 on the width.

423
00:35:01.150 --> 00:35:09.040
See if that helps yeah that definitely looks a little better.

424
00:35:09.090 --> 00:35:10.350
Okay brilliant.

425
00:35:10.380 --> 00:35:12.990
We've done a quite a lot of work in this lesson.

426
00:35:12.990 --> 00:35:21.360
This has been a long and difficult lesson but writing the code definitely helps us play around with

427
00:35:21.360 --> 00:35:22.800
the gradient descent.

428
00:35:22.800 --> 00:35:31.050
Yeah because what we can do now is we can change a couple of these values and see how it behaves differently.

429
00:35:31.380 --> 00:35:41.010
So for example if instead of at three we start at minus three with our gradient descent.

430
00:35:41.010 --> 00:35:41.940
Let's take a look here.

431
00:35:41.950 --> 00:35:50.040
If I starting value is minus three and I rerun the loop and rerun all the calculations and rerun the

432
00:35:50.040 --> 00:35:56.040
graphs then we can see how the gradient descent comes in from the other side.

433
00:35:56.040 --> 00:36:01.250
So in this case it's from the bottom here instead of from the top.

434
00:36:01.530 --> 00:36:08.330
This is really really cool in being able to actually play with the algorithm.

435
00:36:08.330 --> 00:36:16.140
And this is the advantage of writing all the code out and actually running it and rerunning it to see

436
00:36:16.140 --> 00:36:23.400
how differently it behaves because not only can we change the starting point but we can also change

437
00:36:23.660 --> 00:36:25.280
see how many steps we're taking right.

438
00:36:25.290 --> 00:36:33.030
So if we rerun our algorithm to only run about 10 times instead of the usual amount then we can see

439
00:36:33.030 --> 00:36:36.380
how we're not getting that close to the minimum.

440
00:36:36.380 --> 00:36:36.660
All right.

441
00:36:36.690 --> 00:36:41.780
So we should be getting about here but we're actually not reaching it.

442
00:36:41.960 --> 00:36:44.360
So yeah I think this is really really cool.

443
00:36:44.450 --> 00:36:50.400
And in the next couple of lessons we're going to be exploring a couple more of the idiosyncrasies and

444
00:36:50.400 --> 00:36:53.810
the strengths and weaknesses of this algorithm.

445
00:36:53.810 --> 00:36:58.720
Now that we've written it and graft it I'll see you there.
