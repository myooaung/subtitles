WEBVTT
1
00:00:00.530 --> 00:00:07.730
In this lesson we're gonna put everything that we've learned together and build a quick and dirty property

2
00:00:07.730 --> 00:00:13.050
valuation tool for Boston using our existing data set.

3
00:00:13.400 --> 00:00:20.330
And this means that we're going to apply all the concepts that we've discussed previously but also it

4
00:00:20.330 --> 00:00:25.940
gives us a chance to expand our knowledge of Python programming techniques.

5
00:00:25.940 --> 00:00:32.810
In fact we're going to package our Boston property valuation tool as a Python module that you can then

6
00:00:32.870 --> 00:00:39.140
import into any other notebook just as we've been importing say pandas or NUM Pi.

7
00:00:39.590 --> 00:00:45.220
And also we're going to cover how to write Python functions that have default values for arguments.

8
00:00:45.410 --> 00:00:51.780
And we're going to cover how we can include helpful documentation in our Python code as well.

9
00:00:51.960 --> 00:00:53.460
So how will this tool work.

10
00:00:53.610 --> 00:00:57.040
How will it find a price for a property.

11
00:00:57.060 --> 00:01:01.140
Well it will make use of our existing model.

12
00:01:01.410 --> 00:01:08.280
Here we get the theta values from our regression and then all we need to do is plug in custom values

13
00:01:08.370 --> 00:01:15.540
for all the features like our m n o x else that chars and so on.

14
00:01:15.540 --> 00:01:21.860
And once we've done that we have our y hat for a property that is not in the dataset.

15
00:01:21.900 --> 00:01:24.480
So that's pretty simple right now.

16
00:01:24.600 --> 00:01:30.090
Of course there are certain limitations of the data set that we've been using and we're gonna have to

17
00:01:30.090 --> 00:01:32.190
work around these limitations.

18
00:01:32.310 --> 00:01:38.640
For starters we don't have a column with the location of the homes to assist us in pricing homes depending

19
00:01:38.640 --> 00:01:40.160
on an area.

20
00:01:40.200 --> 00:01:45.270
Also if you are searching for properties online you're not going to be able to input some pieces of

21
00:01:45.270 --> 00:01:50.580
information that are just just very very abstract like nobody is really going to know what the correct

22
00:01:50.580 --> 00:01:51.410
value for.

23
00:01:51.470 --> 00:01:58.290
That is in the area that they're looking to buy a home in or what the proportion of non retail business

24
00:01:58.350 --> 00:01:59.110
acres are.

25
00:01:59.610 --> 00:02:02.370
Which was the Indus feature in our model.

26
00:02:02.370 --> 00:02:07.020
In other words we'll be working around these limitations and also we'll be making some generous assumptions

27
00:02:07.320 --> 00:02:12.090
but it's all in good fun and we can learn a few things while doing this as well.

28
00:02:12.150 --> 00:02:15.270
So let's get started writing some code in Jupiter notebook.

29
00:02:15.510 --> 00:02:21.420
Let's create a new Python 3 notebook to hold our code for our valuation tool.

30
00:02:21.450 --> 00:02:31.380
I'm going to call this notebook zero for valuation tool and then I'm going to get started with our import

31
00:02:31.380 --> 00:02:32.820
statements.

32
00:02:32.820 --> 00:02:34.980
So we're gonna need a couple of things.

33
00:02:35.340 --> 00:02:44.550
We're gonna need from ASCII learn dot datasets import load underscore Boston we're gonna need her psyche

34
00:02:44.580 --> 00:02:57.450
learns regression capability so that's from S.K. learn dot linear the school model import linear regression

35
00:02:59.400 --> 00:03:13.950
from SDK learn dot matrix import mean on a school squared and a school error and then we're gonna import

36
00:03:14.310 --> 00:03:22.500
pandas as PD we're gonna import name pi as an P..

37
00:03:22.680 --> 00:03:25.250
These are all the import statements that we need for now.

38
00:03:25.500 --> 00:03:34.640
Let me shift enter now when add a comment in the next cell and it's gonna read gather data.

39
00:03:34.830 --> 00:03:39.090
It's time to create our target and our features.

40
00:03:39.090 --> 00:03:46.290
If you recall we can grab our data set by calling the load Boston function to store our data set in

41
00:03:46.290 --> 00:03:55.530
a variable called Boston underscore data set and that's going to be equal to the return value from load

42
00:03:55.590 --> 00:03:58.560
on the call Boston.

43
00:03:58.560 --> 00:04:07.290
Now let me create a data frame when I say data is equal to PD dot data frame and in the parentheses

44
00:04:07.320 --> 00:04:15.800
I'm going to set the data of this data frame equal to Boston underscore data set dot data.

45
00:04:15.810 --> 00:04:20.970
This if you recall is not a data frame which is why we're extracting the pieces of information that

46
00:04:20.970 --> 00:04:30.150
we need namely our features data by using that data attribute on the Boston data set object our data

47
00:04:30.150 --> 00:04:36.660
frame should also have some columns and these columns have names so columns is gonna be equal to Boston

48
00:04:36.660 --> 00:04:42.600
on the school data set don't feature on the school names.

49
00:04:42.600 --> 00:04:48.360
I think this is all a little bit of review but we're just going to convert our data into a format that

50
00:04:48.360 --> 00:04:49.730
we need.

51
00:04:49.740 --> 00:04:54.260
So how does our data frame look like at the moment data dot head.

52
00:04:54.930 --> 00:04:57.850
Well show us the first five rows.

53
00:04:58.140 --> 00:04:59.240
So that's fair enough.

54
00:04:59.280 --> 00:05:06.730
We've got a data frame with all the features but we're only gonna use a subset of them so features is

55
00:05:06.750 --> 00:05:09.510
gonna be equal to a new data frame.

56
00:05:09.540 --> 00:05:10.390
So it's gonna be data.

57
00:05:10.410 --> 00:05:14.580
Don't drop and then in the parentheses.

58
00:05:14.580 --> 00:05:21.980
Gonna have a list of things we want to drop we want to drop in this and we want to drop H.

59
00:05:22.590 --> 00:05:27.160
Both of these are columns some would say axis is equal to 1.

60
00:05:27.240 --> 00:05:34.110
Let's take a look at what the first five rows of our features data set looks like we should be missing

61
00:05:34.350 --> 00:05:41.250
this column here and we should be missing this column here features thought ahead will show us just

62
00:05:41.490 --> 00:05:44.650
that brilliant.

63
00:05:44.680 --> 00:05:47.070
This is what we've had before.

64
00:05:47.080 --> 00:05:51.820
And let me delete this line and work out our prices.

65
00:05:51.820 --> 00:05:57.490
We're gonna be working with law prices so I'll create a variable called log and a scope prices set that

66
00:05:57.490 --> 00:06:01.460
equal to end p dot log.

67
00:06:01.460 --> 00:06:06.430
Boston on the score data set dot target.

68
00:06:07.210 --> 00:06:14.950
Let's take a look at what this variable looks like so long on the script prices is an array with five

69
00:06:14.950 --> 00:06:17.560
hundred and six rows.

70
00:06:17.590 --> 00:06:20.150
We can see this by saying log on a score.

71
00:06:20.140 --> 00:06:30.940
Prices don't shape this confirms that we need have an array with five hundred and six rows but this

72
00:06:30.940 --> 00:06:32.100
array is flat.

73
00:06:32.140 --> 00:06:34.600
It's just one dimensional.

74
00:06:34.600 --> 00:06:42.880
In contrast the shape of our features data frame is five hundred six point eleven.

75
00:06:44.200 --> 00:06:51.840
So I'm planning to work with prices that are two dimensional so five hundred six by one.

76
00:06:51.990 --> 00:07:01.570
I'm going to get there by converting our log prices into a data frame so I'll say Target is equal to

77
00:07:01.900 --> 00:07:06.990
PD Panda's not data frame parentheses.

78
00:07:07.170 --> 00:07:10.290
Log on to school prices.

79
00:07:10.520 --> 00:07:16.080
Comment columns is equal to scrub brackets.

80
00:07:16.180 --> 00:07:20.670
Single quotes price all caps.

81
00:07:20.680 --> 00:07:21.940
Here we go.

82
00:07:21.940 --> 00:07:25.710
Now if I say Target don't shape.

83
00:07:26.260 --> 00:07:28.110
Let's see what we get.

84
00:07:28.300 --> 00:07:31.060
Five hundred and six by one.

85
00:07:31.090 --> 00:07:32.770
Perfect.

86
00:07:32.770 --> 00:07:40.840
Now as we've said in the introduction if we want to get an estimate for the value of a property we basically

87
00:07:40.840 --> 00:07:47.350
have to create something that looks like another row of data something that's structured exactly the

88
00:07:47.350 --> 00:07:50.770
way the features data frame is structured.

89
00:07:50.770 --> 00:07:57.190
So one row and eleven columns with a value for each column.

90
00:07:57.280 --> 00:07:58.760
How could we do this.

91
00:07:58.870 --> 00:08:08.980
How say we create a variable called property underscore stance so that equal to an empty ending array

92
00:08:09.010 --> 00:08:09.780
from num.

93
00:08:09.860 --> 00:08:18.580
And p dot and the array and we want that array to be 1 row by 11 columns.

94
00:08:18.610 --> 00:08:19.700
So we'll see.

95
00:08:19.750 --> 00:08:25.930
Shape is equal to parentheses one comma Eleven.

96
00:08:26.020 --> 00:08:29.140
Okay so now we have an empty array.

97
00:08:29.140 --> 00:08:35.470
Now what we can do is give a value for every single column so we can write something like property on

98
00:08:35.470 --> 00:08:40.940
the school stats and then access the very very first column.

99
00:08:40.990 --> 00:08:43.390
So that'll be in row number 0.

100
00:08:43.420 --> 00:08:47.250
So the first row and the first column column numbers 0.

101
00:08:47.260 --> 00:08:55.780
So square brackets 0 square brackets 0 and I can set that to a very particular value so I can set that

102
00:08:55.780 --> 00:08:58.850
to say zero point zero two.

103
00:08:59.050 --> 00:09:02.860
This is now my crime per capita.

104
00:09:02.860 --> 00:09:04.380
Let's see what this looks like.

105
00:09:04.450 --> 00:09:08.270
Property under school stats shift into.

106
00:09:08.880 --> 00:09:11.200
Now show us something like this.

107
00:09:11.200 --> 00:09:12.610
This is scientific notation.

108
00:09:12.640 --> 00:09:12.970
Yeah.

109
00:09:13.000 --> 00:09:19.530
So zero point zero two will be two to the power of ten to the minus two.

110
00:09:19.810 --> 00:09:25.010
And these other values are ten to the power of minus three hundred and fourteen.

111
00:09:25.030 --> 00:09:32.240
This looks really strange but what you're looking at is pretty much equal to zero if I change this value

112
00:09:32.240 --> 00:09:39.550
here to say eighty three night shift enter then you'll see the array displayed like that you have eighty

113
00:09:39.550 --> 00:09:43.880
three and then 0 0 0 0 0 0 right.

114
00:09:44.180 --> 00:09:48.890
So I know this might seem confusing but before we were looking at the output in scientific notation

115
00:09:49.850 --> 00:09:58.100
here we're looking at it more normally now a reasonable thing to ask is How do you know that this very

116
00:09:58.100 --> 00:10:01.350
first column here is the crime column.

117
00:10:01.730 --> 00:10:02.950
Yeah so this value here.

118
00:10:02.950 --> 00:10:06.380
How do I know that this should be around zero point zero two.

119
00:10:06.500 --> 00:10:14.600
Yeah well the answer is is that our property stats variable are one by one array will have the same

120
00:10:14.600 --> 00:10:20.990
structure has our features data frame so features thought ahead.

121
00:10:21.260 --> 00:10:26.420
If you recall will show us that the first column is crime.

122
00:10:26.540 --> 00:10:28.860
The second column are the zones.

123
00:10:28.880 --> 00:10:34.070
The third column is the Charles River dummy variable.

124
00:10:34.070 --> 00:10:36.490
So one thing that we might do right.

125
00:10:36.530 --> 00:10:42.430
One thing that we might find helpful is if we give these different indices a name.

126
00:10:43.250 --> 00:10:48.480
So if we want to get the value of our second column and our third column we could do it like this.

127
00:10:48.500 --> 00:10:55.760
I could copy this paste it twice change the second zero here and property starts to 1.

128
00:10:55.820 --> 00:11:02.060
This would be novel The Zone and if I want the zone to be equal to say 15 then I can do it like this

129
00:11:02.290 --> 00:11:08.000
and if I want the Charles River dummy variable to be equal to say 1 that I would have to pick index

130
00:11:08.200 --> 00:11:11.700
2 and set that equal to 1.

131
00:11:12.080 --> 00:11:13.070
You get the idea right.

132
00:11:13.340 --> 00:11:21.740
So property starts now looks like so we've got crime we've got our CNN feature and we have our Charles

133
00:11:21.740 --> 00:11:24.280
River dummy variable.

134
00:11:24.380 --> 00:11:31.280
Now personally I find accessing these indices by number very very confusing because I'm going to come

135
00:11:31.280 --> 00:11:37.820
back in a week's time and I'm not going to remember that crime is at zero or Z N is at 1 and Charles

136
00:11:37.820 --> 00:11:39.110
River is at 2.

137
00:11:39.120 --> 00:11:45.560
I only know that because I've worked with the state asset and I'm looking at my features data frame

138
00:11:45.980 --> 00:11:47.680
below.

139
00:11:47.720 --> 00:11:54.520
So one thing that might be quite handy is if we give these numbers names right.

140
00:11:54.550 --> 00:12:06.150
So I can come up here and say crime on the score index Ida X is equal to zero and I can say Z N on the

141
00:12:06.140 --> 00:12:12.180
score Ida X is equal to 1 and chars on the score.

142
00:12:12.260 --> 00:12:15.270
Ida X is equal to 2.

143
00:12:15.380 --> 00:12:16.410
And so on.

144
00:12:16.520 --> 00:12:25.370
Now I can come in here instead of having a zero there I'll say crime and a score Ida X instead of having

145
00:12:25.370 --> 00:12:33.080
a one here I'll say Z N on a school I.D. X and so on.

146
00:12:33.080 --> 00:12:33.580
Right.

147
00:12:33.890 --> 00:12:37.460
Charles underscore Ida x.

148
00:12:37.670 --> 00:12:45.560
In other words this is a technique for giving certain hard values a descriptive name that way when you're

149
00:12:45.560 --> 00:12:51.840
using them in your code later on it's a little more clear a little easier to read.

150
00:12:52.070 --> 00:12:58.640
Since we're not really going to change these values here I've written them in all caps and separated

151
00:12:58.640 --> 00:13:01.010
them within on the school.

152
00:13:01.010 --> 00:13:04.230
Now I'm going to add two more named indices here.

153
00:13:04.250 --> 00:13:06.680
The first one is going to reach for the number of rooms.

154
00:13:06.710 --> 00:13:12.480
So R.M. ADX and that's in row number four.

155
00:13:12.860 --> 00:13:22.460
And the next one is T ratio underscore Ida X and that's in row number eight scrolling down you can verify

156
00:13:22.460 --> 00:13:23.260
this.

157
00:13:23.410 --> 00:13:29.130
One two three four five six seven eight.

158
00:13:29.210 --> 00:13:31.330
Four Piti ratio.

159
00:13:31.500 --> 00:13:33.640
Berlin's.

160
00:13:33.730 --> 00:13:38.930
Now remember how this property stats array is empty at the moment.

161
00:13:39.100 --> 00:13:46.520
It's got zeros for all of these values and it's got three of these values defined.

162
00:13:47.080 --> 00:13:54.520
Now to be honest we're not going to be customizing all these values right because something like crime

163
00:13:54.550 --> 00:14:01.760
per capita is quite hard to know or the acres of industrial land in a particular area.

164
00:14:01.780 --> 00:14:05.300
It's also really hard to know if we're gonna make some assumptions.

165
00:14:05.590 --> 00:14:10.390
In other words for the property that we're looking at we're just gonna go with the average for all of

166
00:14:10.390 --> 00:14:14.830
Boston for now at least to get the average.

167
00:14:14.830 --> 00:14:23.860
We can simply grab it from our features data frame so features square brackets C R I M in single quotes

168
00:14:24.520 --> 00:14:35.170
dot mean well give us the average and I can of course take this I can do the same thing for our zones.

169
00:14:35.350 --> 00:14:42.610
So Z N dot mean and I could do the same thing for Charles River Charles that mean and I could do the

170
00:14:42.610 --> 00:14:46.820
same thing for all the other eleven features.

171
00:14:46.990 --> 00:14:49.420
Now what would this look like at the moment.

172
00:14:49.420 --> 00:14:55.780
If I refresh I can see this is the average crime per capita.

173
00:14:55.910 --> 00:15:02.150
This is the average hourly for the Z end index and this is the average value for Charles River.

174
00:15:02.150 --> 00:15:06.640
I'm going to stop copy pasting code and making this super repetitive.

175
00:15:06.980 --> 00:15:13.400
Instead I'm going to grab the mean value for all the features at the same time.

176
00:15:13.490 --> 00:15:18.280
Check it out features don't mean parentheses.

177
00:15:18.490 --> 00:15:24.120
Well give me all the mean values all the average values for all the features.

178
00:15:24.140 --> 00:15:33.500
My goal is to populate our property stats with all these values our property stats is an end array at

179
00:15:33.500 --> 00:15:34.320
the moment.

180
00:15:34.610 --> 00:15:35.620
But what is this.

181
00:15:35.630 --> 00:15:38.070
Let's take a look at what this is.

182
00:15:38.150 --> 00:15:45.140
Type parentheses features dot mean shows us that this is a series.

183
00:15:45.230 --> 00:15:46.890
It's a different kind of object.

184
00:15:47.000 --> 00:15:49.370
So we have to do a little bit of conversion here.

185
00:15:49.400 --> 00:15:58.350
We have to make the series object play nice with our array features that mean gives us a series.

186
00:15:58.550 --> 00:16:04.760
But the series object has an attribute called values.

187
00:16:05.060 --> 00:16:11.310
So competence pasted in and show you what this type is.

188
00:16:11.310 --> 00:16:22.190
By adding dot values at the end we can see that the values attribute on a series will give us an NDE

189
00:16:22.310 --> 00:16:29.570
array so array and array the two things should play nice because they're the same type of object.

190
00:16:29.740 --> 00:16:34.570
But remember how this is a one by 11 array.

191
00:16:34.810 --> 00:16:44.820
Let's double check what the dimensions all of this array here features dot mean dot values dot shape.

192
00:16:45.460 --> 00:16:48.370
Well tell us exactly that.

193
00:16:48.370 --> 00:16:52.200
This thing here it turns out is completely flat.

194
00:16:52.210 --> 00:16:54.080
It's a one dimensional array.

195
00:16:54.280 --> 00:16:59.240
Unlike our property stats array it is not two dimensional.

196
00:16:59.370 --> 00:17:09.200
It means that we have to reshape this array from a factory with 11 values to a one by 11 array.

197
00:17:09.240 --> 00:17:14.650
The easiest way to do this is to call the reed shape method.

198
00:17:14.790 --> 00:17:26.160
So features don't mean dot values don't reshape parentheses one comma eleven will give us exactly how

199
00:17:26.210 --> 00:17:26.760
hard it is.

200
00:17:26.790 --> 00:17:27.890
We're looking for.

201
00:17:27.900 --> 00:17:29.550
Check it out.

202
00:17:29.640 --> 00:17:39.290
Brilliant so I'm going to take this here and I won't say property stats equal to features don't mean

203
00:17:39.290 --> 00:17:48.650
dot values dot reshape one by eleven and this means I do not have to do any of this I can accommodate

204
00:17:48.860 --> 00:17:58.670
all of these lines of code and save us all of this work because we now have a property with some starting

205
00:17:58.670 --> 00:18:00.440
characteristics right.

206
00:18:00.830 --> 00:18:05.950
So we have a property a single row eleven features they all have a value.

207
00:18:06.140 --> 00:18:14.700
And in this case the value is just the average of all the five hundred six properties in the dataset.

208
00:18:14.720 --> 00:18:20.830
In other words property stats is kind of our template for making our prediction.

209
00:18:20.860 --> 00:18:23.620
This is the object that we're going to be working with.
