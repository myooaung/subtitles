1
00:00:00,870 --> 00:00:07,050
All right so now it's time to visualize our means squared error cost function.

2
00:00:07,170 --> 00:00:13,830
How I don't know about you but I can't look at these equations and picture what they actually look like

3
00:00:13,950 --> 00:00:14,760
in my head.

4
00:00:14,770 --> 00:00:19,890
I'm the kind of person who really needs a graph or a chart who has something visual to really understand

5
00:00:19,890 --> 00:00:21,340
what's going on.

6
00:00:21,350 --> 00:00:30,240
So let me insert a subheading here with markdown to pound symbols and I'll just write 3D plant for the

7
00:00:30,300 --> 00:00:40,860
mean squared error cost function and let's have a subheading here that reads make data for theta is

8
00:00:42,030 --> 00:00:49,110
the first step in creating our plot is to create a whole range of theta values that we can use to calculate

9
00:00:49,200 --> 00:00:50,860
the mean squared error for.

10
00:00:51,150 --> 00:00:58,020
So remember high said that the cost function depends on the parameter values and not the data itself

11
00:00:58,050 --> 00:01:03,060
not the X5 or the Y five arrays but it depends on the Theta.

12
00:01:03,270 --> 00:01:06,600
That's what the cost function is trying to map.

13
00:01:06,600 --> 00:01:12,090
The first thing they want to do is I'm going to set the number of data points for our chart.

14
00:01:12,090 --> 00:01:15,010
I'm going to call this number status.

15
00:01:15,060 --> 00:01:16,200
It's gonna be a variable.

16
00:01:16,470 --> 00:01:19,690
And to start off with I want to set equal to five.

17
00:01:20,130 --> 00:01:23,300
And then I'm going to create our data points.

18
00:01:23,340 --> 00:01:27,390
So I'll create a variable called T.H. on the underscore 0.

19
00:01:27,390 --> 00:01:32,170
I want to set that equal to the return value from num PIs Lynn space functions.

20
00:01:32,160 --> 00:01:37,200
That's gonna be N.P. dot fly in space parentheses.

21
00:01:37,530 --> 00:01:40,810
And then we're gonna supply three inputs.

22
00:01:40,830 --> 00:01:41,760
Start value.

23
00:01:41,760 --> 00:01:51,480
We're gonna see minus one stop value to save equal to three and a number of integrals so the number

24
00:01:51,480 --> 00:01:57,220
of points that we're gonna create I'm going gonna set that equal to an underscore status.

25
00:01:57,510 --> 00:02:06,780
So that way when we look at t h underscore 0 we see that it has 5 values it's an array of 1 2 3 4 5

26
00:02:06,990 --> 00:02:08,250
items.

27
00:02:08,790 --> 00:02:16,530
Then when a copy this line of code here pasted in and have the same thing for theta 1 theta one is also

28
00:02:16,530 --> 00:02:22,260
going to go from minus 1 to 3 and it's going to have 5 values.

29
00:02:22,260 --> 00:02:28,460
So what we've done here is we've created a one dimensional array but we're gonna have a 3D plot.

30
00:02:28,490 --> 00:02:31,540
So we're going to need a two dimensional array.

31
00:02:31,560 --> 00:02:37,950
We're not plotting a line we're plotting a surface and for these we need an array of two dimensions

32
00:02:38,640 --> 00:02:45,560
the way we're gonna create a two dimensional array is by using PIs mesh grid function.

33
00:02:45,560 --> 00:02:47,200
So we've done this before.

34
00:02:47,200 --> 00:02:53,430
And just to differentiate between the one dimensional and two dimensional variables I'll create another

35
00:02:53,430 --> 00:02:54,260
set.

36
00:02:54,300 --> 00:03:07,080
So when I say plot T Zero comma plot underscore t 1 is equal to end p mesh grid so mesh grid is the

37
00:03:07,080 --> 00:03:14,250
function that will give us a two dimensional array and who are using this common notation plot T Zero

38
00:03:14,250 --> 00:03:21,400
plot to one as a way of unpacking a sequence because mesh it will return to us a tuple mesh grid in

39
00:03:21,400 --> 00:03:28,950
turn needs two inputs so it's gonna be theta zero and theta one from these inputs it's going to create

40
00:03:29,250 --> 00:03:31,050
art 2d arrays.

41
00:03:31,380 --> 00:03:39,810
So if we look at t h underscore zero dot shape we'll see it's a flat array one dimensional with five

42
00:03:39,840 --> 00:03:47,880
elements and if we compare that to plot on a score T Zero dot shape then we see that it is a five by

43
00:03:47,880 --> 00:03:55,580
five arrays it's two dimensional It has twenty five elements total so effectively the that shape and

44
00:03:55,570 --> 00:04:02,410
I press shift enter I can see it here it looks like this five by five twenty five elements total.

45
00:04:02,610 --> 00:04:10,470
Now it's time to calculate the mean squared error for all the theta zero and all the theta one values

46
00:04:10,920 --> 00:04:13,050
in our range.

47
00:04:13,140 --> 00:04:21,570
So let me ask you this do you think that the cost that we calculate will have one dimension or will

48
00:04:21,570 --> 00:04:30,720
it have two dimensions and the answer is it's also gonna be two dimensional the surface plot needs to

49
00:04:30,720 --> 00:04:37,140
know the mean square error value for all the combinations of theta zeros and theta ones we're gonna

50
00:04:37,140 --> 00:04:41,460
be plotting a surface not a line after all.

51
00:04:41,460 --> 00:04:48,390
So here's what we're gonna do we're gonna start out with a two dimensional array of just zeros and then

52
00:04:48,390 --> 00:04:54,730
we're gonna calculate the mean squared era for each value in our array separately.

53
00:04:55,050 --> 00:05:01,110
This will give us a chance to learn about another Python programming technique which is very very common

54
00:05:01,680 --> 00:05:05,190
and that's using nested loops.

55
00:05:05,190 --> 00:05:12,510
Let's add this as a subheading actually some changes to markdown three pound signs and then I must say

56
00:05:14,160 --> 00:05:23,400
calc MSE using nested for loops going to add a few more cells down here.

57
00:05:23,400 --> 00:05:25,350
Keep working in the middle of the screen.

58
00:05:26,040 --> 00:05:33,780
And the first thing I want to do now is I'm going to create a two dimensional array just of zeroes so

59
00:05:33,780 --> 00:05:38,910
num pi actually has a function called zeros which is perfect for this.

60
00:05:38,910 --> 00:05:44,070
All we need to do is supply the dimensions of the array that we want as an output.

61
00:05:44,070 --> 00:05:49,770
So the variable that's going to hold on to all our means squared error calculations is going gonna be

62
00:05:49,770 --> 00:05:52,470
called plot underscore cost.

63
00:05:52,680 --> 00:05:57,340
And that's gonna be equal to the return value from this zeros.

64
00:05:57,390 --> 00:05:58,610
Function that I mentioned.

65
00:05:58,860 --> 00:06:03,270
So end p dot zeros parentheses.

66
00:06:03,600 --> 00:06:07,350
And then inside the parentheses we supply the dimensions.

67
00:06:07,350 --> 00:06:10,620
So if I supply two by three.

68
00:06:10,620 --> 00:06:16,590
So to come out three and then say plot on the scope cost.

69
00:06:17,290 --> 00:06:21,600
I can see what a 2 by 3 array of zeros will look like.

70
00:06:21,610 --> 00:06:26,620
There'll be three columns and two rows two rows three columns.

71
00:06:26,620 --> 00:06:28,660
If it's five by five.

72
00:06:28,720 --> 00:06:33,670
On the other hand it'll be five rows and five columns.

73
00:06:33,670 --> 00:06:37,320
Now I'm not going to have a hard couldn't five in here.

74
00:06:37,320 --> 00:06:46,600
Instead I'm going to use the number on the school status variable and and feed it as an argument two

75
00:06:46,690 --> 00:06:48,530
are zeros function.

76
00:06:48,550 --> 00:06:54,130
So what I want to do is I'm going to supply a tuple which you can see by the two parentheses and it's

77
00:06:54,130 --> 00:06:58,330
gonna be square it's gonna be symmetrical so it's going to have the same number of rows and the same

78
00:06:58,330 --> 00:07:00,100
number of columns.

79
00:07:00,220 --> 00:07:06,310
So it'll be an on a school Fatah's comma and I'll underscore status.

80
00:07:06,430 --> 00:07:10,150
This is gonna be the input to our zeros function.

81
00:07:10,210 --> 00:07:17,080
So if I ever have to change my variable up here and update this cell then my plot on the score cost

82
00:07:17,080 --> 00:07:19,790
will update as well.

83
00:07:19,810 --> 00:07:23,470
Now it's time to talk about nested loops.

84
00:07:23,560 --> 00:07:31,010
Let me add that as a commentator seen nested loop practice.

85
00:07:31,030 --> 00:07:32,550
Let me show you what I mean.

86
00:07:32,560 --> 00:07:38,110
So to create a nested loop we're going to use to for loops.

87
00:07:38,110 --> 00:07:45,550
So the first for loop it's gonna look like this is gonna read for i in range and then say the number

88
00:07:45,550 --> 00:07:52,330
three between the parentheses then colon and then inside this for loop there'll be another for loops.

89
00:07:52,390 --> 00:08:01,700
So I'm going to write for j in range parentheses 3 colon and inside the second for loop.

90
00:08:01,870 --> 00:08:03,710
I'm going to put a print statement.

91
00:08:03,970 --> 00:08:14,470
So let me print the string hello and hit shift enter and what we see is that hello is printed a total

92
00:08:14,560 --> 00:08:22,480
of nine times so three three and three three times three is nine.

93
00:08:22,480 --> 00:08:24,450
So this is how many times we print Hello.

94
00:08:25,420 --> 00:08:29,440
Let's go a step further than just printing Hello nine times.

95
00:08:29,530 --> 00:08:35,020
Let me show you another way of doing the string interpolation with python.

96
00:08:35,110 --> 00:08:39,760
This is a different way that we can work with the strings from what we've seen before.

97
00:08:39,850 --> 00:08:43,550
This particular method is called an F string.

98
00:08:43,600 --> 00:08:47,300
It's an F string because there's an F right in front of the string.

99
00:08:47,500 --> 00:08:54,580
So it's gonna be f and then you have the single or double quotes and then within the string itself I'm

100
00:08:54,580 --> 00:09:05,290
going to say the value of I is and then I'm going to use a set of curly braces and inside these curly

101
00:09:05,290 --> 00:09:09,720
braces I can access a variable in my Python code.

102
00:09:09,760 --> 00:09:13,230
So for example I can access this variable.

103
00:09:13,240 --> 00:09:16,990
I hear the iterator in my outer loop somewhere.

104
00:09:17,020 --> 00:09:18,140
See I.

105
00:09:18,340 --> 00:09:25,510
In between the curly braces and then going to continue and Jay is.

106
00:09:25,510 --> 00:09:28,640
And then another set of curly braces.

107
00:09:28,920 --> 00:09:33,740
And then inside these curly braces I'm going to actually put the value J.

108
00:09:33,850 --> 00:09:41,860
So I'm accessing this variable the second iterator the one for the inner for loop head.

109
00:09:41,880 --> 00:09:45,470
Now I'm going to hit shift and to see what we get.

110
00:09:45,480 --> 00:09:53,250
So what we see here is that the values that are printed out from inside these curly braces change every

111
00:09:53,250 --> 00:10:00,640
time the loop is executed by having this special notation the F in front and then the curly braces were

112
00:10:00,660 --> 00:10:07,180
able to tell Python that something inside this string should not be considered a string.

113
00:10:07,210 --> 00:10:12,630
Instead we're able to reference values that are stored in variables elsewhere.

114
00:10:12,630 --> 00:10:18,990
Now the other thing that's really cool about this particular pattern is that we can see what happened

115
00:10:19,230 --> 00:10:23,560
exactly when our loop executed nine times.

116
00:10:23,610 --> 00:10:26,220
So before we had Hello print it nine times.

117
00:10:26,250 --> 00:10:32,760
But this time we can see what's actually going on and how these I J values are changing when the loop

118
00:10:32,760 --> 00:10:34,050
first starts out.

119
00:10:34,390 --> 00:10:35,970
I's equal to zero.

120
00:10:36,090 --> 00:10:38,730
And J is equal to zero.

121
00:10:38,730 --> 00:10:47,370
And then what happens is that the inner loop executes three times J becomes equal to 1 and then to 2.

122
00:10:47,400 --> 00:10:50,700
And after that it's done executing.

123
00:10:50,700 --> 00:10:54,000
And then the outer loop increments by 1.

124
00:10:54,030 --> 00:11:02,400
So I goes from zero to 1 and then it's Jay's turn again J goes from zero to two executes three times

125
00:11:02,910 --> 00:11:05,370
and the whole thing repeats one final time.

126
00:11:06,180 --> 00:11:13,230
So one of the things you can probably already tell is how this might be applied to many many different

127
00:11:13,230 --> 00:11:15,110
kinds of problems.

128
00:11:15,210 --> 00:11:24,750
In particular it goes very very well with iterating through a 2D array or a 2D matrix if you want to

129
00:11:24,750 --> 00:11:31,080
hit up every single value then you can go row by row and column by column.

130
00:11:31,320 --> 00:11:34,900
And this is exactly what we're going to do.

131
00:11:34,920 --> 00:11:40,620
The important thing with this sort of stuff has with all Python code is to make sure the indentation

132
00:11:40,950 --> 00:11:48,150
is correct and that way Python knows that this loop is indeed nested inside this first one.
