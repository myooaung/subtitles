WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.550
Hello.

00:00:01.550 --> 00:00:02.620
Welcome back in this US.

00:00:02.620 --> 00:00:05.700
And we're going to be talking about four loops now.

00:00:05.700 --> 00:00:05.910
Ah,

00:00:05.910 --> 00:00:12.500
four loop in Its most basic understanding is very similar to a while.

00:00:12.500 --> 00:00:12.950
Loop.

00:00:12.950 --> 00:00:15.410
However it does,

00:00:15.410 --> 00:00:17.370
some of the work for you are rather it.

00:00:17.370 --> 00:00:19.650
It presents itself like it doesn't work for you.

00:00:19.650 --> 00:00:21.790
So just as a recap,

00:00:21.790 --> 00:00:24.030
a wild loop looks a lot like this.

00:00:24.030 --> 00:00:25.450
So you've got acts is equal to one,

00:00:25.450 --> 00:00:32.280
while X is less than or equal to or equal to Caleb.

00:00:32.280 --> 00:00:32.850
10.

00:00:32.850 --> 00:00:34.700
Do something in here.

00:00:34.700 --> 00:00:40.260
So you've got code here and then X plus.

00:00:40.260 --> 00:00:40.790
Plus,

00:00:40.790 --> 00:00:43.460
there you go.

00:00:43.460 --> 00:00:43.990
That's a while.

00:00:43.990 --> 00:00:44.280
Loop.

00:00:44.280 --> 00:00:44.650
Now,

00:00:44.650 --> 00:00:46.660
a four loop essentially does the same thing.

00:00:46.660 --> 00:00:52.360
So you've got four x is equal to that's a one.

00:00:52.360 --> 00:00:53.050
Ah,

00:00:53.050 --> 00:00:58.200
while X is equal to less than or equal to 10.

00:00:58.200 --> 00:01:01.390
And after each iteration X plus plus,

00:01:01.390 --> 00:01:08.450
Echo X is the number number,

00:01:08.450 --> 00:01:23.780
and we're also going to do the same thing in here and go h R echo while loop the are.

00:01:23.780 --> 00:01:28.840
And here we're gonna have a for loop.

00:01:28.840 --> 00:01:33.100
It s I'm just writing some HTML is that you can see and here we go.

00:01:33.100 --> 00:01:34.150
We have a wire loop.

00:01:34.150 --> 00:01:35.390
It goes from 1 to 10.

00:01:35.390 --> 00:01:38.950
We have a four loop that also goes from 1 to 10.

00:01:38.950 --> 00:01:43.330
And so the concepts of the loops are very,

00:01:43.330 --> 00:01:44.040
very similar.

00:01:44.040 --> 00:01:45.430
You start with a number,

00:01:45.430 --> 00:01:51.940
you keep Iterating over and over and over again until that number is satisfied.

00:01:51.940 --> 00:01:54.010
Until basically this condition,

00:01:54.010 --> 00:01:54.890
which is the exact same,

00:01:54.890 --> 00:01:57.760
is this condition is no longer true.

00:01:57.760 --> 00:02:01.050
And then after each generation,

00:02:01.050 --> 00:02:02.490
you just increment by one.

00:02:02.490 --> 00:02:03.510
So that's all it is.

00:02:03.510 --> 00:02:04.850
So these loops are very,

00:02:04.850 --> 00:02:05.160
very,

00:02:05.160 --> 00:02:06.050
very similar.

00:02:06.050 --> 00:02:11.180
But instead of having to write your own variable appear and having to manage it down here,

00:02:11.180 --> 00:02:12.540
this will manage it for you.

00:02:12.540 --> 00:02:16.080
And this will say after every iteration it will increment by one.

00:02:16.080 --> 00:02:21.650
So what happens if we said if X is equal to five?

00:02:21.650 --> 00:02:28.370
Continue and ah,

00:02:28.370 --> 00:02:29.200
what super duper?

00:02:29.200 --> 00:02:30.160
I thought I was gonna work,

00:02:30.160 --> 00:02:33.980
but I had a problem in my own personal logic.

00:02:33.980 --> 00:02:34.450
There we go.

00:02:34.450 --> 00:02:37.560
12346789 10.

00:02:37.560 --> 00:02:39.890
So it doesn't matter what happens here.

00:02:39.890 --> 00:02:41.000
This is one of the differences,

00:02:41.000 --> 00:02:41.450
by the way,

00:02:41.450 --> 00:02:47.320
is if we continue in this four loop,

00:02:47.320 --> 00:02:49.300
it will automatically increment by one.

00:02:49.300 --> 00:02:50.220
Doesn't matter what you do.

00:02:50.220 --> 00:02:55.580
Whereas if you continue in here without implementing manually,

00:02:55.580 --> 00:02:59.210
guess what that Luke could run on forever and ever and ever.

00:02:59.210 --> 00:03:03.720
So there is a benefit to using and learning the four loop instead of using the Wilder.

00:03:03.720 --> 00:03:06.930
But there's a place in time for both of them.

00:03:06.930 --> 00:03:12.670
Sometimes you don't necessarily know what that end condition is going to be.

00:03:12.670 --> 00:03:13.350
Um,

00:03:13.350 --> 00:03:16.660
so maybe maybe you just use a while loop.

00:03:16.660 --> 00:03:20.500
Maybe you don't actually know what you're going to be implementing by or that increment is

00:03:20.500 --> 00:03:21.250
going to change.

00:03:21.250 --> 00:03:22.130
If,

00:03:22.130 --> 00:03:23.390
for example,

00:03:23.390 --> 00:03:24.150
in here,

00:03:24.150 --> 00:03:27.380
if X is equal to five,

00:03:27.380 --> 00:03:31.340
maybe you want to actually say X whips.

00:03:31.340 --> 00:03:32.070
What am I doing here?

00:03:32.070 --> 00:03:36.330
X is plus equal to 10 rates.

00:03:36.330 --> 00:03:39.080
This will automatically break from the loop because this is now.

00:03:39.080 --> 00:03:40.940
If this is five plus 10 that's 15.

00:03:40.940 --> 00:03:41.760
That's higher than this.

00:03:41.760 --> 00:03:42.060
10.

00:03:42.060 --> 00:03:43.170
Guess what that loop is done.

00:03:43.170 --> 00:03:49.550
Or maybe you want to skip the next three and go 5678 plus nine.

00:03:49.550 --> 00:03:52.250
And now you got the last cycle coming in.

00:03:52.250 --> 00:03:54.630
So that is the difference.

00:03:54.630 --> 00:03:58.670
It's really how much control you want versus how much you want to automate Sometimes the

00:03:58.670 --> 00:03:59.660
automation is nice.

00:03:59.660 --> 00:04:03.330
It's a layer of protection at sometimes you need that extra control.

00:04:03.330 --> 00:04:05.200
Sometimes you just need to loop through things,

00:04:05.200 --> 00:04:07.720
and you need to be able to control that increments.

00:04:07.720 --> 00:04:11.850
So that is the primary difference between a wild loop and a four loop.

00:04:11.850 --> 00:04:13.290
Now,

00:04:13.290 --> 00:04:14.970
as with the while loop,

00:04:14.970 --> 00:04:17.640
which we learned to the last lesson you can use continue.

00:04:17.640 --> 00:04:18.840
But you can also use break.

00:04:18.840 --> 00:04:22.680
So you can say if X is equal to where we want a break.

00:04:22.680 --> 00:04:23.950
If we want to break this at eight,

00:04:23.950 --> 00:04:26.390
break out of it.

00:04:26.390 --> 00:04:29.910
And what break does is it says Quit looping through this.

00:04:29.910 --> 00:04:31.060
Quit your iterations.

00:04:31.060 --> 00:04:34.750
Quit doing whatever this loop is doing and move on with your life,

00:04:34.750 --> 00:04:37.080
and that's what I'm doing.

00:04:37.080 --> 00:04:39.150
So this is saying if X is equal to eight,

00:04:39.150 --> 00:04:40.160
which it currently is,

00:04:40.160 --> 00:04:40.420
right?

00:04:40.420 --> 00:04:45.350
1234 skips 567 and it is on the eighth cycle.

00:04:45.350 --> 00:04:47.950
It will break.

00:04:47.950 --> 00:04:52.050
So there you have it.

00:04:52.050 --> 00:04:53.100
That is a for loop.

00:04:53.100 --> 00:04:54.340
Nice and easy.

00:04:54.340 --> 00:04:57.850
Once you understand loops like like a wild Lou before love is very,

00:04:57.850 --> 00:04:59.150
very simple to understand.

00:04:59.150 --> 00:04:59.880
The next one,

00:04:59.880 --> 00:05:01.760
we're going to learn is the for each loop,

00:05:01.760 --> 00:05:04.680
which is probably the most popular loop in PHP.

00:05:04.680 --> 00:05:05.360
And actually,

00:05:05.360 --> 00:05:09.300
javascript recently got it for all those people,

00:05:09.300 --> 00:05:09.810
Uh,

00:05:09.810 --> 00:05:11.220
who like their JavaScript.

00:05:11.220 --> 00:05:14.800
There's also a for each kind of loop in JavaScript.

00:05:14.800 --> 00:05:15.370
Um,

00:05:15.370 --> 00:05:17.010
that was finally implemented as well.

00:05:17.010 --> 00:05:18.920
And so you can loop through,

00:05:18.920 --> 00:05:19.630
um,

00:05:19.630 --> 00:05:26.270
items in your it's calling it terrible eso you're a raise or your objects or whatever your

00:05:26.270 --> 00:05:31.190
iterating through and PHP has had this for well,

00:05:31.190 --> 00:05:31.850
forever.

00:05:31.850 --> 00:05:33.440
So welcome,

00:05:33.440 --> 00:05:34.050
Javascript.

00:05:34.050 --> 00:05:35.190
And,

00:05:35.190 --> 00:05:35.470
ah,

00:05:35.470 --> 00:05:36.390
for your task.

00:05:36.390 --> 00:05:38.180
You don't actually have asked for this one.

00:05:38.180 --> 00:05:38.490
I mean,

00:05:38.490 --> 00:05:39.160
if you want to,

00:05:39.160 --> 00:05:39.700
uh,

00:05:39.700 --> 00:05:40.950
definitely check this out.

00:05:40.950 --> 00:05:42.790
But this one is very,

00:05:42.790 --> 00:05:44.240
very similar to the wild loop.

00:05:44.240 --> 00:05:45.050
Um,

00:05:45.050 --> 00:05:46.150
if you have the time,

00:05:46.150 --> 00:05:46.500
do it.

00:05:46.500 --> 00:05:48.660
But by no means you actually have to do this one.

00:05:48.660 --> 00:05:53.670
You'll run into this in in the code in the wild while you're looking through,

00:05:53.670 --> 00:05:53.860
like,

00:05:53.860 --> 00:05:55.390
WordPress code or something like that,

00:05:55.390 --> 00:05:56.350
or layer of all code,

00:05:56.350 --> 00:05:59.050
you're going to see four loops just like this,

00:05:59.050 --> 00:06:03.800
and all you have to do is be able to read it and understand what it actually does.

00:06:03.800 --> 00:06:06.510
So there you go.

00:06:06.510 --> 00:06:09.430
Once you are done digesting all this,

00:06:09.430 --> 00:06:11.790
let's learn about for each loops,

00:06:11.790 --> 00:06:15.550
which is by far the most popular type of loop in PHP.

