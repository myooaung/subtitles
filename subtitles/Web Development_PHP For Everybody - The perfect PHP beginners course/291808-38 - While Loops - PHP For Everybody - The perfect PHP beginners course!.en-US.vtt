WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.070
Hello,

00:00:02.070 --> 00:00:02.950
Ola.

00:00:02.950 --> 00:00:04.280
How are you doing?

00:00:04.280 --> 00:00:06.450
I hope you're doing well so far.

00:00:06.450 --> 00:00:07.170
Ah,

00:00:07.170 --> 00:00:09.890
there have been 30 some lessons.

00:00:09.890 --> 00:00:10.990
Probably more.

00:00:10.990 --> 00:00:13.060
Uh and ah,

00:00:13.060 --> 00:00:14.070
if you've made it this far,

00:00:14.070 --> 00:00:18.000
you've actually made it to another major fundamental in computer programming.

00:00:18.000 --> 00:00:19.700
And these air called loops and sew.

00:00:19.700 --> 00:00:21.160
Your first loop is a wild loop,

00:00:21.160 --> 00:00:24.280
and it's going to use several pieces that we've already learned about.

00:00:24.280 --> 00:00:27.690
It's going to use either decker mentor or an incremental is going to use,

00:00:27.690 --> 00:00:29.220
basically an if statement.

00:00:29.220 --> 00:00:33.490
So while a condition is true is going to keep repeating itself and we're going to echo and

00:00:33.490 --> 00:00:35.550
possibly can cat need some stuff to the screen?

00:00:35.550 --> 00:00:40.700
So let's go ahead and take a look at our first while loop.

00:00:40.700 --> 00:00:40.930
I mean,

00:00:40.930 --> 00:00:41.940
it's a little bit bigger for you.

00:00:41.940 --> 00:00:45.760
And let's look at the I guess,

00:00:45.760 --> 00:00:46.270
the syntax,

00:00:46.270 --> 00:00:46.740
the logic,

00:00:46.740 --> 00:00:48.110
the structure of it.

00:00:48.110 --> 00:00:52.930
So we say while something is less than 10 is currently the logic.

00:00:52.930 --> 00:00:57.210
But while something is true,

00:00:57.210 --> 00:00:58.250
do some code.

00:00:58.250 --> 00:00:59.530
I mean,

00:00:59.530 --> 00:01:00.990
that's really all there is to it.

00:01:00.990 --> 00:01:02.780
There's nothing more.

00:01:02.780 --> 00:01:07.510
It's just one thing you have to keep a note about is this.

00:01:07.510 --> 00:01:10.540
May run on for ever and ever and ever a can,

00:01:10.540 --> 00:01:11.480
depending on your computer,

00:01:11.480 --> 00:01:12.360
possibly crash,

00:01:12.360 --> 00:01:13.770
your computers will be careful with us.

00:01:13.770 --> 00:01:16.170
But chances are PHP will just time out.

00:01:16.170 --> 00:01:16.950
Eventually,

00:01:16.950 --> 00:01:20.650
it will say I'm using too much memory and I'm gonna stop running the script.

00:01:20.650 --> 00:01:24.240
That memory limit is somewhere around 64 megabytes.

00:01:24.240 --> 00:01:27.150
Um and that that could be a long time.

00:01:27.150 --> 00:01:27.910
Uh,

00:01:27.910 --> 00:01:34.200
for a website to echo one sentence so many times it takes up 64 megabytes of RAM is ah,

00:01:34.200 --> 00:01:36.150
lot like a lot a lot.

00:01:36.150 --> 00:01:40.160
So I'm gonna show you how to prevent that.

00:01:40.160 --> 00:01:42.160
And I'm gonna show you how to write a while loop.

00:01:42.160 --> 00:01:46.980
So let's say variable X is equal to one.

00:01:46.980 --> 00:01:50.090
And in here in the while loop were going to say,

00:01:50.090 --> 00:02:00.470
while X is less than or equal to 10 Echo X is the number.

00:02:00.470 --> 00:02:03.520
Um,

00:02:03.520 --> 00:02:05.460
and let's echo line break in there,

00:02:05.460 --> 00:02:07.390
make that one line.

00:02:07.390 --> 00:02:09.200
And now,

00:02:09.200 --> 00:02:09.680
if we run,

00:02:09.680 --> 00:02:15.230
this X is always less than 10 and excess never going to be greater than 10.

00:02:15.230 --> 00:02:16.720
So this will run on forever.

00:02:16.720 --> 00:02:18.470
So I'm not going to run the script now.

00:02:18.470 --> 00:02:20.990
The way to prevent that is actually quite simple.

00:02:20.990 --> 00:02:23.900
we use an incremental so X plus plus,

00:02:23.900 --> 00:02:27.210
that's it at the very end of our loop inside of our brackets.

00:02:27.210 --> 00:02:28.280
Here we write X plus.

00:02:28.280 --> 00:02:28.500
Plus,

00:02:28.500 --> 00:02:32.540
what this does is it will turn X into two and then three and then four,

00:02:32.540 --> 00:02:33.000
then five.

00:02:33.000 --> 00:02:37.150
And eventually it will get to 10 and 11 and it will stop.

00:02:37.150 --> 00:02:42.150
So that's all there is to it.

00:02:42.150 --> 00:02:46.770
And if I save and refresh my page here it is.

00:02:46.770 --> 00:02:52.340
So while it looks like I've actually written 10 lines of code in all honesty,

00:02:52.340 --> 00:02:58.990
I have written 12345 lines of code and we can we can multiply that we can say 100.

00:02:58.990 --> 00:03:05.740
So while X is less than 100 or eat less than or equal to 100 it's going to create 100 lines

00:03:05.740 --> 00:03:07.250
of code just like this.

00:03:07.250 --> 00:03:10.430
Now,

00:03:10.430 --> 00:03:13.150
where on earth would you ever possibly use a loop like this?

00:03:13.150 --> 00:03:13.730
Well,

00:03:13.730 --> 00:03:18.820
if you are more of a front end developer and you're creating one kind of style like a card

00:03:18.820 --> 00:03:21.470
or some sort of template component or a partial,

00:03:21.470 --> 00:03:23.930
and you need it to show up more than once Ah,

00:03:23.930 --> 00:03:26.970
you could make a loop so that you can see how they act side by side.

00:03:26.970 --> 00:03:31.270
If you were dealing with columns in bootstrap and you need to see you know what five

00:03:31.270 --> 00:03:32.160
columns looks like it,

00:03:32.160 --> 00:03:33.800
and you only have enough data for two.

00:03:33.800 --> 00:03:35.110
You can loop through those,

00:03:35.110 --> 00:03:38.700
and you can show five or 10 or 20 if you wanted to,

00:03:38.700 --> 00:03:41.050
and you can see what it looks like when there are far too many.

00:03:41.050 --> 00:03:45.520
The components are far too much data or the opposite.

00:03:45.520 --> 00:03:47.680
You can remove the loop and you can say,

00:03:47.680 --> 00:03:47.890
Oh,

00:03:47.890 --> 00:03:49.650
this is what it looks like when there's only one.

00:03:49.650 --> 00:03:52.400
Now you can do this Ah,

00:03:52.400 --> 00:03:55.830
little bit differently as well You can do if it's less than 100.

00:03:55.830 --> 00:04:02.890
So what less than are equal to is going to Dio is this loop is going to run until this

00:04:02.890 --> 00:04:07.670
number is 100 and if we come down here,

00:04:07.670 --> 00:04:09.370
we'll see that it runs until it's 100.

00:04:09.370 --> 00:04:14.390
But if we said X has to be less than 100 what we're saying is 99 or lower.

00:04:14.390 --> 00:04:15.340
So we refresh page,

00:04:15.340 --> 00:04:15.980
go to the bottom,

00:04:15.980 --> 00:04:16.920
and here it is.

00:04:16.920 --> 00:04:22.400
99 is the number we can also do the opposite.

00:04:22.400 --> 00:04:28.980
We can say while X is greater than and let's give it a negative number while X is greater

00:04:28.980 --> 00:04:30.110
than minus 10.

00:04:30.110 --> 00:04:30.930
Keep running.

00:04:30.930 --> 00:04:32.120
Now this is the opposite.

00:04:32.120 --> 00:04:33.820
So this is going to run on forever.

00:04:33.820 --> 00:04:36.660
And what we need to do is we need to actually invert this.

00:04:36.660 --> 00:04:38.850
So X is going to start at one.

00:04:38.850 --> 00:04:44.690
And while it is still larger than the number negative 10 is going to keep executing.

00:04:44.690 --> 00:04:45.320
And so,

00:04:45.320 --> 00:04:47.370
every time this loop is finished,

00:04:47.370 --> 00:04:48.870
we need this to say,

00:04:48.870 --> 00:04:49.340
Oh,

00:04:49.340 --> 00:04:49.840
OK,

00:04:49.840 --> 00:04:50.500
you're done.

00:04:50.500 --> 00:04:51.040
You're done.

00:04:51.040 --> 00:04:53.100
This one cycle has what a loop is like.

00:04:53.100 --> 00:04:58.860
One full loop is called is called the cycle Eso we would say,

00:04:58.860 --> 00:04:59.280
OK,

00:04:59.280 --> 00:05:00.440
this the cycle is done,

00:05:00.440 --> 00:05:02.860
Decker meant by one so that this does not run forever.

00:05:02.860 --> 00:05:03.440
I'm gonna save.

00:05:03.440 --> 00:05:04.340
I'm gonna refresh.

00:05:04.340 --> 00:05:07.580
And there we go one all the way down to negative 10.

00:05:07.580 --> 00:05:11.340
Or if we wanted to do actually negative because it was negative night before.

00:05:11.340 --> 00:05:12.590
Now it's negative.

00:05:12.590 --> 00:05:12.950
10.

00:05:12.950 --> 00:05:17.460
So the next thing you need to know is that you can break out of the loop at any point in

00:05:17.460 --> 00:05:17.750
time.

00:05:17.750 --> 00:05:19.250
You just need to add a little bit of logic.

00:05:19.250 --> 00:05:20.950
So if we wanted to say,

00:05:20.950 --> 00:05:21.460
you know what?

00:05:21.460 --> 00:05:23.170
I don't like using the night negative numbers.

00:05:23.170 --> 00:05:24.470
I don't really use them that often.

00:05:24.470 --> 00:05:25.170
Um,

00:05:25.170 --> 00:05:25.950
let's do this.

00:05:25.950 --> 00:05:32.250
X is less than or equal to 17.

00:05:32.250 --> 00:05:35.590
And we want this to increment all the time.

00:05:35.590 --> 00:05:39.340
And after it increments,

00:05:39.340 --> 00:05:44.540
let's say we want us to Onley ever actually go up to I don't know.

00:05:44.540 --> 00:05:45.590
Seven.

00:05:45.590 --> 00:05:46.220
Okay,

00:05:46.220 --> 00:05:50.360
we could say if X is equal to seven,

00:05:50.360 --> 00:05:51.850
we know it's going to be seven.

00:05:51.850 --> 00:05:53.750
We can break.

00:05:53.750 --> 00:05:57.700
And what this will do is this will go.

00:05:57.700 --> 00:06:01.650
1234567 And then it will stop.

00:06:01.650 --> 00:06:03.380
Actually a lot.

00:06:03.380 --> 00:06:03.700
It'll go.

00:06:03.700 --> 00:06:13.980
123456 And if we move this down where technically should be now it's seven now we could

00:06:13.980 --> 00:06:14.950
actually make us more efficient.

00:06:14.950 --> 00:06:18.520
We could use the strict operator because this is an integer.

00:06:18.520 --> 00:06:20.440
This is an integer and this is incremental,

00:06:20.440 --> 00:06:22.290
an integer So all the data types are the same.

00:06:22.290 --> 00:06:25.680
We can use a strict operator and it will give us the same result.

00:06:25.680 --> 00:06:27.690
All right,

00:06:27.690 --> 00:06:28.020
now,

00:06:28.020 --> 00:06:28.920
if we wanted to,

00:06:28.920 --> 00:06:32.550
we could also say if x is equal to five.

00:06:32.550 --> 00:06:33.660
Continue.

00:06:33.660 --> 00:06:35.490
Just skip it completely.

00:06:35.490 --> 00:06:39.630
But because they're going to continue its not going to execute any of this code.

00:06:39.630 --> 00:06:41.760
So this number is never actually going to incremental.

00:06:41.760 --> 00:06:45.850
So we also need to add one of these in here.

00:06:45.850 --> 00:06:50.090
So actually going to be five increment the number but continue.

00:06:50.090 --> 00:06:51.850
Don't Don't check for anything else.

00:06:51.850 --> 00:06:52.590
Ah,

00:06:52.590 --> 00:06:53.460
and in fact,

00:06:53.460 --> 00:06:55.250
we could even do this,

00:06:55.250 --> 00:06:58.600
move that down so that it doesn't say the number five.

00:06:58.600 --> 00:06:59.370
So when we refresh,

00:06:59.370 --> 00:07:00.600
we've got 1 to 3.

00:07:00.600 --> 00:07:08.020
The number five is missing in here right in there is then that should have been the number

00:07:08.020 --> 00:07:08.460
five.

00:07:08.460 --> 00:07:09.360
But we said,

00:07:09.360 --> 00:07:09.750
Oh,

00:07:09.750 --> 00:07:11.270
the numbers five.

00:07:11.270 --> 00:07:12.050
Skip it.

00:07:12.050 --> 00:07:13.410
Don't do anything.

00:07:13.410 --> 00:07:14.360
Just skip it.

00:07:14.360 --> 00:07:15.760
In fact,

00:07:15.760 --> 00:07:17.790
let's let's make it look like it was skipped.

00:07:17.790 --> 00:07:18.450
Echo.

00:07:18.450 --> 00:07:22.450
Just do blank lines and a line break.

00:07:22.450 --> 00:07:25.640
There we go.

00:07:25.640 --> 00:07:27.600
1234 blank.

00:07:27.600 --> 00:07:30.390
Six goes up to 15 maximum of 17.

00:07:30.390 --> 00:07:31.300
But it said OK,

00:07:31.300 --> 00:07:32.810
the current iteration,

00:07:32.810 --> 00:07:35.660
the cycle is number 15 right now,

00:07:35.660 --> 00:07:36.950
so let's break out of it.

00:07:36.950 --> 00:07:38.440
All right,

00:07:38.440 --> 00:07:44.370
So that is your basic while loop you now know about break You now know about continue and

00:07:44.370 --> 00:07:46.500
What I would like you to do is create a wild loop.

00:07:46.500 --> 00:07:47.460
Don't forget,

00:07:47.460 --> 00:07:49.230
you need to be implementing at all times.

00:07:49.230 --> 00:07:50.330
Maybe just start with a very,

00:07:50.330 --> 00:07:51.000
very basic one.

00:07:51.000 --> 00:07:57.870
It's okay to start with basic ones like this and just echo the number back to the page.

00:07:57.870 --> 00:07:58.950
Don't forget to increment.

00:07:58.950 --> 00:08:01.270
Feel free to changes number as much as you like.

00:08:01.270 --> 00:08:05.070
If you really wanted to.

00:08:05.070 --> 00:08:05.320
Like,

00:08:05.320 --> 00:08:06.830
actually this number was very high.

00:08:06.830 --> 00:08:08.490
So I'll go upto ah 1000.

00:08:08.490 --> 00:08:12.720
But it's not gonna get 2000 because I've got the break statement on here.

00:08:12.720 --> 00:08:13.840
So if I comment that out,

00:08:13.840 --> 00:08:15.400
it's going to go.

00:08:15.400 --> 00:08:17.670
That s scrolling,

00:08:17.670 --> 00:08:18.000
scrolling,

00:08:18.000 --> 00:08:18.460
scrolling,

00:08:18.460 --> 00:08:19.350
scrolling,

00:08:19.350 --> 00:08:19.700
scrolling,

00:08:19.700 --> 00:08:20.550
scrolling.

00:08:20.550 --> 00:08:21.110
Hello,

00:08:21.110 --> 00:08:21.750
1000.

00:08:21.750 --> 00:08:25.600
And if we view the page source Hello?

00:08:25.600 --> 00:08:26.110
Well,

00:08:26.110 --> 00:08:26.360
look,

00:08:26.360 --> 00:08:28.050
that's there is a lot in there,

00:08:28.050 --> 00:08:30.440
so that's a loop.

00:08:30.440 --> 00:08:36.750
And essentially all it does is loop until that condition is no longer true.

00:08:36.750 --> 00:08:40.560
This condition in here and then once I was no longer true.

00:08:40.560 --> 00:08:45.340
It will stop doing whatever it's supposed to be doing and it will move on to the code in

00:08:45.340 --> 00:08:45.540
here.

00:08:45.540 --> 00:08:50.750
So echo stopper and no,

00:08:50.750 --> 00:08:52.660
this.

00:08:52.660 --> 00:08:56.050
So the Rio 1 to 15 plus your stopper.

00:08:56.050 --> 00:08:58.150
So your task.

00:08:58.150 --> 00:08:59.430
Create a basic wild loop.

00:08:59.430 --> 00:09:00.640
Don't get too fancy with it.

00:09:00.640 --> 00:09:01.340
It's OK,

00:09:01.340 --> 00:09:02.050
honestly.

00:09:02.050 --> 00:09:03.910
In PHP,

00:09:03.910 --> 00:09:07.270
you don't use wild loops that often we use a different kind of loop called for each,

00:09:07.270 --> 00:09:10.730
Which is how we looped through database results,

00:09:10.730 --> 00:09:12.370
is how we loop through a raise and things like that.

00:09:12.370 --> 00:09:13.810
We're gonna learn about that one pretty soon.

00:09:13.810 --> 00:09:15.670
But the while loop is still very,

00:09:15.670 --> 00:09:16.440
very important.

00:09:16.440 --> 00:09:21.560
It's good to know how to loop through these things as well and is a fundamental concept off

00:09:21.560 --> 00:09:22.920
all programming languages.

00:09:22.920 --> 00:09:25.940
The idea is that if you can loop through one thing,

00:09:25.940 --> 00:09:27.320
you can loop through basically anything.

00:09:27.320 --> 00:09:32.530
And instead of writing 1000 lines of code to check for 1000 different conditions,

00:09:32.530 --> 00:09:36.480
you could write a loop that will check for one condition 1000 times,

00:09:36.480 --> 00:09:38.350
so it's a lot more efficient that way.

00:09:38.350 --> 00:09:40.360
There you go.

00:09:40.360 --> 00:09:42.840
Once you're done creating that wild loop,

00:09:42.840 --> 00:09:44.780
let's go learn about another type of loop.

00:09:44.780 --> 00:09:45.620
A better loop

