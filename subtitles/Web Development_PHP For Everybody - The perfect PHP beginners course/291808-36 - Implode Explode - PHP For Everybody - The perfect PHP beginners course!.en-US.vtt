WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.560
all right.

00:00:01.560 --> 00:00:06.660
We've learned about a raise and associative raise and sorting arrays and multi dimensional

00:00:06.660 --> 00:00:08.350
raise and all that good stuff.

00:00:08.350 --> 00:00:10.390
There's one more thing I want to show you about.

00:00:10.390 --> 00:00:10.990
An array.

00:00:10.990 --> 00:00:17.150
Um and then I think we can move on to either switch statements or loops or something kind

00:00:17.150 --> 00:00:17.550
of cool.

00:00:17.550 --> 00:00:24.090
So what we're gonna do here is we are going to explode a sentence into an array and then

00:00:24.090 --> 00:00:26.480
we're going to implode that explain that sentence we're going to,

00:00:26.480 --> 00:00:26.670
like,

00:00:26.670 --> 00:00:28.970
glue it back together using implode.

00:00:28.970 --> 00:00:30.710
Now,

00:00:30.710 --> 00:00:38.080
if you've ever written Python or any sort of JavaScript Jackson,

00:00:38.080 --> 00:00:41.380
this is the equivalent of dot split.

00:00:41.380 --> 00:00:43.030
But in PHP,

00:00:43.030 --> 00:00:44.430
it's called No,

00:00:44.430 --> 00:00:45.050
not implode.

00:00:45.050 --> 00:00:45.910
That's the wrong one.

00:00:45.910 --> 00:00:47.040
Explode.

00:00:47.040 --> 00:00:47.840
Why,

00:00:47.840 --> 00:00:48.750
Who knows?

00:00:48.750 --> 00:00:49.910
No one really knows.

00:00:49.910 --> 00:00:52.620
Now explode has,

00:00:52.620 --> 00:00:54.850
ah couple parameters that it can take.

00:00:54.850 --> 00:00:58.130
I am not going to tell you all of them.

00:00:58.130 --> 00:01:02.760
I would like you to go over to PHP dot net and actually check out their documentation.

00:01:02.760 --> 00:01:06.760
So you have an understanding of not only how to use the docks,

00:01:06.760 --> 00:01:11.430
but that there are more parameters and I can't possibly go over every parameter for every

00:01:11.430 --> 00:01:12.560
PHP function ever.

00:01:12.560 --> 00:01:16.740
It's just it's gonna take too long and no one's gonna take the five million our course,

00:01:16.740 --> 00:01:17.090
you know,

00:01:17.090 --> 00:01:18.560
Plus,

00:01:18.560 --> 00:01:18.930
honestly,

00:01:18.930 --> 00:01:21.740
that's wasting your time because you're not going to use every single parameter all the

00:01:21.740 --> 00:01:22.670
time anyways,

00:01:22.670 --> 00:01:24.310
So let's go ahead and get started.

00:01:24.310 --> 00:01:27.370
We have a sentence.

00:01:27.370 --> 00:01:34.550
The quick brown fox jumps over the lazy dog or something like that,

00:01:34.550 --> 00:01:38.980
and we say Echo sentence.

00:01:38.980 --> 00:01:40.710
Okay,

00:01:40.710 --> 00:01:42.040
we've had a basic sentence.

00:01:42.040 --> 00:01:43.010
Now we can explode.

00:01:43.010 --> 00:01:44.150
This exploded.

00:01:44.150 --> 00:01:50.640
We want exploded on all of the spaces and we want to explode.

00:01:50.640 --> 00:01:51.650
Sentence.

00:01:51.650 --> 00:01:53.960
And that still doesn't do anything.

00:01:53.960 --> 00:01:54.410
Why?

00:01:54.410 --> 00:01:58.250
Because this function is not like sort sort will just automatically sort.

00:01:58.250 --> 00:02:00.180
But what you wanted to do.

00:02:00.180 --> 00:02:00.890
Ah,

00:02:00.890 --> 00:02:03.140
but we went explode to do is reassigned.

00:02:03.140 --> 00:02:05.860
So sentence is not Hey,

00:02:05.860 --> 00:02:09.060
spill sentence sentence is equal to explode sentence.

00:02:09.060 --> 00:02:11.140
And now we have an array.

00:02:11.140 --> 00:02:12.520
But we don't know what's in that array.

00:02:12.520 --> 00:02:23.840
So let's go ahead and we can either print are or we can use far dump sentence and check

00:02:23.840 --> 00:02:24.320
this out.

00:02:24.320 --> 00:02:30.500
So what explode did was it found every space because we told it to break on spaces.

00:02:30.500 --> 00:02:32.220
So there's one here.

00:02:32.220 --> 00:02:33.060
There's one here.

00:02:33.060 --> 00:02:34.080
There's one here.

00:02:34.080 --> 00:02:34.610
In fact,

00:02:34.610 --> 00:02:36.810
I'm just gonna do quickly.

00:02:36.810 --> 00:02:39.720
Those are all the sentences.

00:02:39.720 --> 00:02:44.590
All the spaces that explode exploded.

00:02:44.590 --> 00:02:48.710
And so what it basically did was got rid of all the spaces and said,

00:02:48.710 --> 00:02:54.320
Here's your array and you can see that the quick brown fox jumps over The lazy dog is the

00:02:54.320 --> 00:02:56.070
same as this one in here.

00:02:56.070 --> 00:02:57.900
The quick brown fox jumps over the lazy dog.

00:02:57.900 --> 00:03:01.460
Cool beans.

00:03:01.460 --> 00:03:02.650
So why would you ever use us?

00:03:02.650 --> 00:03:02.870
Well,

00:03:02.870 --> 00:03:05.580
sometimes you need to break a sentence apart,

00:03:05.580 --> 00:03:07.830
loop through and look for something in particular.

00:03:07.830 --> 00:03:07.980
Now,

00:03:07.980 --> 00:03:09.290
we don't know about loops yet.

00:03:09.290 --> 00:03:10.530
I'm gonna keep ah,

00:03:10.530 --> 00:03:14.970
that away from you just for a little bit because that kind of logic can sort of mess up

00:03:14.970 --> 00:03:17.350
your ability to learn something like this right away.

00:03:17.350 --> 00:03:20.740
But I promise you loops air coming and went to get him.

00:03:20.740 --> 00:03:21.470
They're fun.

00:03:21.470 --> 00:03:22.650
They're fun things to work with.

00:03:22.650 --> 00:03:26.350
So now we have an array.

00:03:26.350 --> 00:03:28.510
We have turned our sentence into an array.

00:03:28.510 --> 00:03:31.160
We also know that we can typecast.

00:03:31.160 --> 00:03:35.290
This sentence is equal to array sentence,

00:03:35.290 --> 00:03:37.880
but it's not going to work the same way.

00:03:37.880 --> 00:03:43.940
All it did was say your first and only parameter inside of this array is the whole sentence

00:03:43.940 --> 00:03:43.940
.

00:03:43.940 --> 00:03:45.390
So it's not the same thing.

00:03:45.390 --> 00:03:46.740
All it did was turn it into an array.

00:03:46.740 --> 00:03:49.820
So it's uncommon that let's go back here.

00:03:49.820 --> 00:03:51.040
We have our working array.

00:03:51.040 --> 00:03:52.780
Okay,

00:03:52.780 --> 00:03:53.050
Cool.

00:03:53.050 --> 00:03:56.640
So now you have an array and you want to merge them all together.

00:03:56.640 --> 00:03:57.170
Now,

00:03:57.170 --> 00:03:58.440
this is actually bad example.

00:03:58.440 --> 00:04:04.400
So let's break this off with a horizontal rule and let's create an array of names.

00:04:04.400 --> 00:04:05.380
We've done this before.

00:04:05.380 --> 00:04:07.350
We've got named Caleb.

00:04:07.350 --> 00:04:08.290
Ah,

00:04:08.290 --> 00:04:08.900
Nathan.

00:04:08.900 --> 00:04:13.640
And we have got what superhero do we want to use this time And man.

00:04:13.640 --> 00:04:15.000
Okay,

00:04:15.000 --> 00:04:15.540
cool.

00:04:15.540 --> 00:04:16.620
So we've got names in here,

00:04:16.620 --> 00:04:20.450
and if we did var dump names,

00:04:20.450 --> 00:04:24.900
don't forget chemical ends and refresh Caleb,

00:04:24.900 --> 00:04:26.110
Nathan and ant man.

00:04:26.110 --> 00:04:27.120
There we are.

00:04:27.120 --> 00:04:27.460
OK,

00:04:27.460 --> 00:04:31.050
but what if we want this all in a sentence so we could say something along the lines of,

00:04:31.050 --> 00:04:32.490
uh,

00:04:32.490 --> 00:04:35.400
your names are names,

00:04:35.400 --> 00:04:40.310
and we'll make sure we echo this Well,

00:04:40.310 --> 00:04:45.790
just as an array but weekend actually glue these together with a function called implode.

00:04:45.790 --> 00:04:50.430
So we say names is equal to implode and we want to implode.

00:04:50.430 --> 00:04:51.040
What now?

00:04:51.040 --> 00:04:51.580
Wow,

00:04:51.580 --> 00:04:57.100
Let's implode them with a comma and a space and let's implode names.

00:04:57.100 --> 00:05:01.480
And so what this is saying is for every item in the array,

00:05:01.480 --> 00:05:03.050
we're going to glue it together,

00:05:03.050 --> 00:05:04.570
and we're going to glue it together.

00:05:04.570 --> 00:05:07.520
We're going to contaminate it or can remember concatenation.

00:05:07.520 --> 00:05:11.960
We're going to can cat meat that with Akama and a space and so hit,

00:05:11.960 --> 00:05:13.070
save and refresh.

00:05:13.070 --> 00:05:15.490
And what Look at that.

00:05:15.490 --> 00:05:18.010
Your names are Caleb Nathan at man.

00:05:18.010 --> 00:05:23.060
And so now all of a sudden a raise are becoming a little bit more useful.

00:05:23.060 --> 00:05:27.160
We can start bringing them together without actually having to loop through it or do any

00:05:27.160 --> 00:05:30.820
sort of crazy programming logic in order to pull those names out.

00:05:30.820 --> 00:05:32.060
We don't have to do any debugging.

00:05:32.060 --> 00:05:33.980
We don't even have to look at Var dump anymore.

00:05:33.980 --> 00:05:35.540
We just know that names are Caleb,

00:05:35.540 --> 00:05:36.810
Nathan and ant man.

00:05:36.810 --> 00:05:38.390
And if we want to say your names,

00:05:38.390 --> 00:05:40.690
are all of them separated by a comma?

00:05:40.690 --> 00:05:44.010
We could do that when we use implode for that Now,

00:05:44.010 --> 00:05:48.150
what if we did something completely different and by completely different?

00:05:48.150 --> 00:05:48.430
I mean,

00:05:48.430 --> 00:05:48.690
actually,

00:05:48.690 --> 00:05:49.250
not that different,

00:05:49.250 --> 00:05:51.550
but we want to separate them with a pipe instead of Kama.

00:05:51.550 --> 00:05:52.690
There we go.

00:05:52.690 --> 00:05:53.450
We've got a pipe.

00:05:53.450 --> 00:05:55.220
And you know,

00:05:55.220 --> 00:05:56.850
if we want to decorate this a little bit,

00:05:56.850 --> 00:06:03.200
we could do pipe there and a pipe there.

00:06:03.200 --> 00:06:04.750
Now we've got pipes all around.

00:06:04.750 --> 00:06:08.480
So pipe Kayla Pipe Nathan Pipe ant man pipe.

00:06:08.480 --> 00:06:12.760
And if you want to do something little bit funner,

00:06:12.760 --> 00:06:13.270
I guess,

00:06:13.270 --> 00:06:13.860
Ah,

00:06:13.860 --> 00:06:24.290
we can change these all to upper case by going string to upper names and they're really all

00:06:24.290 --> 00:06:24.760
uppercase.

00:06:24.760 --> 00:06:28.150
So that is all there is to explode and implode.

00:06:28.150 --> 00:06:29.350
So why am I telling you this?

00:06:29.350 --> 00:06:33.990
I'm telling you this because eventually you're going to have an array or you're going to

00:06:33.990 --> 00:06:37.450
want to be able to put things into an array and then glue them together.

00:06:37.450 --> 00:06:40.790
This is a very common concept in programming,

00:06:40.790 --> 00:06:42.060
especially Web programming,

00:06:42.060 --> 00:06:43.860
where you're going through a list of things,

00:06:43.860 --> 00:06:46.620
you're looping through it and you want to create a brand new list.

00:06:46.620 --> 00:06:49.110
So what you're doing is you'll create an empty array,

00:06:49.110 --> 00:06:51.020
something along these lines.

00:06:51.020 --> 00:06:55.050
I'll make some space for us to breathe,

00:06:55.050 --> 00:06:59.720
and so you would have an array just empty like this,

00:06:59.720 --> 00:07:02.660
and you would have basically this four condition.

00:07:02.660 --> 00:07:04.530
So for actually,

00:07:04.530 --> 00:07:07.170
we're not gonna get into loops just yet because I've got a plan for that.

00:07:07.170 --> 00:07:13.800
So we're gonna loop one intense or what this is going to do is it's going to do 12345 all

00:07:13.800 --> 00:07:14.480
the way to 10.

00:07:14.480 --> 00:07:16.480
And we could say array.

00:07:16.480 --> 00:07:22.090
The integer of the number that's in there is equal to something,

00:07:22.090 --> 00:07:22.990
and essentially,

00:07:22.990 --> 00:07:24.710
what this is going to do is build a disarray.

00:07:24.710 --> 00:07:27.400
So this array could have 10 names in there now,

00:07:27.400 --> 00:07:29.500
with just three bits of code,

00:07:29.500 --> 00:07:30.370
three lines of code.

00:07:30.370 --> 00:07:30.660
Very,

00:07:30.660 --> 00:07:31.260
very easy.

00:07:31.260 --> 00:07:34.450
But then what if we wanted to echo all them out into a list?

00:07:34.450 --> 00:07:35.160
Well,

00:07:35.160 --> 00:07:37.740
that's when we would implode all of these together,

00:07:37.740 --> 00:07:40.170
using probably a comma in a space,

00:07:40.170 --> 00:07:43.080
because that's usually the most the most readable.

00:07:43.080 --> 00:07:47.100
And all of a sudden we have a list of people.

00:07:47.100 --> 00:07:48.790
We've got 10 people.

00:07:48.790 --> 00:07:51.030
This is funny to explain.

00:07:51.030 --> 00:07:55.900
So we have 10 names in an array that we have made into a string,

00:07:55.900 --> 00:07:57.750
and we have put into a sentence,

00:07:57.750 --> 00:08:00.850
and we did almost no work for it.

00:08:00.850 --> 00:08:04.150
And so that's why learning a raise is really,

00:08:04.150 --> 00:08:04.900
really important.

00:08:04.900 --> 00:08:06.670
Now.

00:08:06.670 --> 00:08:07.840
You don't have any homework.

00:08:07.840 --> 00:08:09.030
There's no task for this one.

00:08:09.030 --> 00:08:12.770
I just wanted to show you that there is a way to implode and explode.

00:08:12.770 --> 00:08:13.510
Um,

00:08:13.510 --> 00:08:15.280
a raise in PHP.

00:08:15.280 --> 00:08:18.190
And I think in the next lesson,

00:08:18.190 --> 00:08:20.890
we should sort of hot back to if else statements.

00:08:20.890 --> 00:08:21.900
Just one more.

00:08:21.900 --> 00:08:24.030
This one is called a switch statement.

00:08:24.030 --> 00:08:25.560
And this one's actually pretty cool,

00:08:25.560 --> 00:08:25.870
too.

00:08:25.870 --> 00:08:27.650
But the sin taxes a little bit odd.

00:08:27.650 --> 00:08:28.640
All right,

00:08:28.640 --> 00:08:32.010
so when you are done digesting all of this comes in,

00:08:32.010 --> 00:08:32.910
cleans up real quick.

00:08:32.910 --> 00:08:34.330
When you're done digesting this,

00:08:34.330 --> 00:08:35.950
I'll see you in the switch video.

