WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:06.170
hello and welcome back to another episode of learning PHP in this lesson,

00:00:06.170 --> 00:00:08.200
we're going to be talking about typecasting now.

00:00:08.200 --> 00:00:13.840
This is something that I actually don't see very often and is incredibly important,

00:00:13.840 --> 00:00:18.840
especially if you want to eventually learn other programming languages like Python or C or

00:00:18.840 --> 00:00:19.450
Java.

00:00:19.450 --> 00:00:25.640
Now PHP is a programming language that is loosely written.

00:00:25.640 --> 00:00:28.140
I'm doing these air quotes here loosely written.

00:00:28.140 --> 00:00:30.640
That means we can type age.

00:00:30.640 --> 00:00:30.980
Actually,

00:00:30.980 --> 00:00:31.630
hold on.

00:00:31.630 --> 00:00:34.800
We can't type anything unless we have some syntax in here.

00:00:34.800 --> 00:00:36.360
Now we can type.

00:00:36.360 --> 00:00:41.200
Age is equal to 12 and we can print eco age.

00:00:41.200 --> 00:00:42.170
And when we do this,

00:00:42.170 --> 00:00:43.280
it says 12.

00:00:43.280 --> 00:00:45.570
Or if we type literally,

00:00:45.570 --> 00:00:47.850
anything else it says 12.

00:00:47.850 --> 00:00:51.630
Anything else on the front end being on the browser,

00:00:51.630 --> 00:00:53.370
we will never see the difference.

00:00:53.370 --> 00:00:55.200
But in the programming language itself,

00:00:55.200 --> 00:00:56.600
we will definitely see difference.

00:00:56.600 --> 00:01:00.240
And I remember that lesson when we were talking about data types when we were talking about

00:01:00.240 --> 00:01:03.620
strings arrays floats into,

00:01:03.620 --> 00:01:03.970
you know,

00:01:03.970 --> 00:01:04.660
things like that.

00:01:04.660 --> 00:01:05.450
Well,

00:01:05.450 --> 00:01:06.990
this one,

00:01:06.990 --> 00:01:07.530
as you know,

00:01:07.530 --> 00:01:10.750
because there are quotations around it is a string.

00:01:10.750 --> 00:01:14.890
And if we do this var dump age,

00:01:14.890 --> 00:01:19.850
I didn't make that smaller.

00:01:19.850 --> 00:01:25.960
It says that on this page online seven it was being called and it is a string.

00:01:25.960 --> 00:01:34.510
And if we take these out and now says that it's an into its not a string anymore,

00:01:34.510 --> 00:01:35.250
it's an integer.

00:01:35.250 --> 00:01:43.250
And if we said 12 25 it's now called afloat because there's a floating decimal in there.

00:01:43.250 --> 00:01:45.380
So why is this important?

00:01:45.380 --> 00:01:45.830
Well,

00:01:45.830 --> 00:01:46.640
in the future,

00:01:46.640 --> 00:01:47.290
not yet.

00:01:47.290 --> 00:01:48.010
But in the future,

00:01:48.010 --> 00:01:53.100
we're going to be learning about if else statements these are called conditional and thes

00:01:53.100 --> 00:01:54.280
can become very,

00:01:54.280 --> 00:01:54.850
very important.

00:01:54.850 --> 00:01:54.920
So,

00:01:54.920 --> 00:01:55.060
I mean,

00:01:55.060 --> 00:01:58.140
to give you a quick glimpse into what that actually looks like Now,

00:01:58.140 --> 00:02:01.760
don't feel the need to learn all of us right now because we're going to learn all of this

00:02:01.760 --> 00:02:06.430
stuff that I'm about to type in the future in their own dedicated lessons.

00:02:06.430 --> 00:02:08.800
So you actually get some hands on experience of the task.

00:02:08.800 --> 00:02:10.970
But I'm just going to show you how something works here.

00:02:10.970 --> 00:02:11.410
Okay,

00:02:11.410 --> 00:02:18.950
so if I say if age is equal to 12 Echo Hello.

00:02:18.950 --> 00:02:26.350
I am 12 years old and we set that age variable too.

00:02:26.350 --> 00:02:27.150
12.

00:02:27.150 --> 00:02:30.240
This says hello.

00:02:30.240 --> 00:02:31.500
I'm 12 years old now.

00:02:31.500 --> 00:02:33.480
We know that age is a string,

00:02:33.480 --> 00:02:36.260
and we know that Well,

00:02:36.260 --> 00:02:39.750
this is not a string 12 without the quotations is an integer.

00:02:39.750 --> 00:02:42.350
Now,

00:02:42.350 --> 00:02:44.180
if I typed three equal signs,

00:02:44.180 --> 00:02:46.180
nothing happens.

00:02:46.180 --> 00:02:48.900
But to equal signs is okay.

00:02:48.900 --> 00:02:49.200
And again,

00:02:49.200 --> 00:02:52.910
we're gonna talk about this later and I'll get into them or intricacies of the ah,

00:02:52.910 --> 00:02:57.740
the two equal science versus the three equal signs and how the comparing all that stuff.

00:02:57.740 --> 00:02:58.360
But for now,

00:02:58.360 --> 00:02:59.750
you need to know that there is a difference.

00:02:59.750 --> 00:03:04.400
And so that difference is this 12 does not match.

00:03:04.400 --> 00:03:13.540
Whereas if I said three equal signs and age is an end and we're also checking for an

00:03:13.540 --> 00:03:16.170
integer refresh the page,

00:03:16.170 --> 00:03:17.050
it still shows up.

00:03:17.050 --> 00:03:19.690
When I used to equal signs,

00:03:19.690 --> 00:03:21.520
it will still show up and it still shows up.

00:03:21.520 --> 00:03:23.060
It's it's working perfectly fine.

00:03:23.060 --> 00:03:23.680
But again,

00:03:23.680 --> 00:03:25.250
when I put those quotations around it,

00:03:25.250 --> 00:03:27.950
it won't work with the three equal signs.

00:03:27.950 --> 00:03:30.060
Okay,

00:03:30.060 --> 00:03:32.350
so enough confusing you with all of that stuff.

00:03:32.350 --> 00:03:35.560
In the last lesson,

00:03:35.560 --> 00:03:41.790
we talked about Var dump and Bardem showed us a bunch of stuff so we could do an array and

00:03:41.790 --> 00:03:43.860
we get into multi dimensional race,

00:03:43.860 --> 00:03:48.190
which is a really fancy way of saying there's an array inside of Andre so we could say

00:03:48.190 --> 00:03:53.160
Array is the first item in this race also in array.

00:03:53.160 --> 00:03:55.980
And let's do you do,

00:03:55.980 --> 00:03:58.740
um,

00:03:58.740 --> 00:04:00.020
whips.

00:04:00.020 --> 00:04:03.250
I am not having a good day when it comes to taping today.

00:04:03.250 --> 00:04:07.980
Caleb Nathan and I'm gonna create another array,

00:04:07.980 --> 00:04:12.130
and this one's going to be do to do.

00:04:12.130 --> 00:04:13.520
I don't let's put these ones as numbers.

00:04:13.520 --> 00:04:21.050
Let's put 28 26 and fired Dump Array.

00:04:21.050 --> 00:04:24.690
Look at that now.

00:04:24.690 --> 00:04:29.350
It shows us that the array that we're dumping isn't array and there are two in there.

00:04:29.350 --> 00:04:30.310
There are two items in there.

00:04:30.310 --> 00:04:31.900
It doesn't necessarily know those items are.

00:04:31.900 --> 00:04:33.110
It just has the size to.

00:04:33.110 --> 00:04:35.240
In the first Ray,

00:04:35.240 --> 00:04:36.960
we've got a string Caleb,

00:04:36.960 --> 00:04:38.540
another string Nathan.

00:04:38.540 --> 00:04:40.310
And in the second Array,

00:04:40.310 --> 00:04:41.230
this one here.

00:04:41.230 --> 00:04:46.760
Remember that that index offset zero is equal to 11 is equal to two.

00:04:46.760 --> 00:04:47.770
In human terms.

00:04:47.770 --> 00:04:51.440
The 1st 1 is 28.

00:04:51.440 --> 00:04:54.140
That's an integer 26 that's afloat.

00:04:54.140 --> 00:04:56.150
And if we said 26.5 and refreshed,

00:04:56.150 --> 00:04:57.640
this is I said,

00:04:57.640 --> 00:04:58.350
that was a float early.

00:04:58.350 --> 00:05:00.260
I meant that's an into I got ahead of myself.

00:05:00.260 --> 00:05:01.600
But if we refresh now,

00:05:01.600 --> 00:05:07.500
now that says 26.5 this is now going to say float instead of int Taita just like that.

00:05:07.500 --> 00:05:09.290
So why is this important?

00:05:09.290 --> 00:05:09.650
Well,

00:05:09.650 --> 00:05:15.020
because in other programming languages and this is not really the case too much in PHP.

00:05:15.020 --> 00:05:17.360
But if you want to write really good PHP,

00:05:17.360 --> 00:05:19.650
you need to learn that these are different.

00:05:19.650 --> 00:05:22.350
So how do we force these to be the same?

00:05:22.350 --> 00:05:25.470
So I'm gonna create something new in here.

00:05:25.470 --> 00:05:26.140
Um,

00:05:26.140 --> 00:05:28.550
what should I do as an example,

00:05:28.550 --> 00:05:29.480
I'm yes,

00:05:29.480 --> 00:05:30.410
scared of this.

00:05:30.410 --> 00:05:31.450
Um,

00:05:31.450 --> 00:05:37.450
and let's say age is equal to 12 var dump age.

00:05:37.450 --> 00:05:40.980
This tells me it's a string,

00:05:40.980 --> 00:05:46.550
but what if What if a user puts in some information through a form or something?

00:05:46.550 --> 00:05:52.250
Some way we're taking in user input and they put in the number 12.

00:05:52.250 --> 00:05:52.590
Well,

00:05:52.590 --> 00:05:54.040
it's probably going to come back as a string,

00:05:54.040 --> 00:05:56.250
but what if we wanted that to be an integer?

00:05:56.250 --> 00:05:59.030
We have this single typecasting now I know.

00:05:59.030 --> 00:06:00.530
Finally kill if you've gotten to the point.

00:06:00.530 --> 00:06:01.020
Yep,

00:06:01.020 --> 00:06:01.740
I'm getting there.

00:06:01.740 --> 00:06:02.250
I'm getting there.

00:06:02.250 --> 00:06:07.480
Age is equal to int age.

00:06:07.480 --> 00:06:11.440
And what this does this is not actually a function.

00:06:11.440 --> 00:06:12.150
Technically,

00:06:12.150 --> 00:06:15.850
what this does is say we're now assigning age.

00:06:15.850 --> 00:06:19.350
That's this one up here to be an integer.

00:06:19.350 --> 00:06:22.350
So now when I save and refresh the page,

00:06:22.350 --> 00:06:23.430
this will no longer say String.

00:06:23.430 --> 00:06:27.650
This will say int We could do the same thing with float.

00:06:27.650 --> 00:06:35.420
We could do the same thing with a Ray and it gave us an array.

00:06:35.420 --> 00:06:37.410
It actually turned our string into an array.

00:06:37.410 --> 00:06:41.750
So now we can say eco age zero to get the age.

00:06:41.750 --> 00:06:42.680
Look,

00:06:42.680 --> 00:06:43.300
there it is.

00:06:43.300 --> 00:06:49.950
Let's go ahead and delete that we could if we wanted to turn this into an object.

00:06:49.950 --> 00:06:53.480
We haven't talked about objects really all that much,

00:06:53.480 --> 00:07:00.580
but we will be or the exact opposite.

00:07:00.580 --> 00:07:02.290
We could say 12.

00:07:02.290 --> 00:07:05.760
And let's comment that Oh,

00:07:05.760 --> 00:07:07.350
we're going to see that this is now an integer.

00:07:07.350 --> 00:07:08.730
And if we wanted to,

00:07:08.730 --> 00:07:13.150
we could also turn this back into a string just like that.

00:07:13.150 --> 00:07:18.390
So at this point in your programming development career,

00:07:18.390 --> 00:07:21.000
it's It's not important to know what type casting it's.

00:07:21.000 --> 00:07:26.700
It is important to know that there is a difference between 12 and 12 in the sense that 12

00:07:26.700 --> 00:07:28.450
is not the same as 12.

00:07:28.450 --> 00:07:32.330
These are actually two different things.

00:07:32.330 --> 00:07:34.090
PHP again is very loosely typed.

00:07:34.090 --> 00:07:36.090
So it compares those and says,

00:07:36.090 --> 00:07:36.490
Okay,

00:07:36.490 --> 00:07:37.510
those air close enough.

00:07:37.510 --> 00:07:39.470
I kind of understand that these are the same thing,

00:07:39.470 --> 00:07:40.970
But in other programming languages,

00:07:40.970 --> 00:07:44.890
you may not actually get that opportunity and more strictly written languages.

00:07:44.890 --> 00:07:47.910
You have to specify the 12 has to be a number.

00:07:47.910 --> 00:07:48.980
It can't be a string.

00:07:48.980 --> 00:07:51.210
Now,

00:07:51.210 --> 00:07:52.150
why am I telling you this?

00:07:52.150 --> 00:07:56.050
I'm telling you this to set you up for success in the future because you're not always

00:07:56.050 --> 00:07:57.780
going to be writing PHP for the rest your life.

00:07:57.780 --> 00:07:59.430
There is a big programming world out there,

00:07:59.430 --> 00:08:06.580
and you're going to eventually be writing Ruby or maybe Java or python or node or

00:08:06.580 --> 00:08:07.380
javascript,

00:08:07.380 --> 00:08:09.320
whatever that's going to be in the future.

00:08:09.320 --> 00:08:12.310
There are differences here.

00:08:12.310 --> 00:08:13.990
And so this is what typecasting is.

00:08:13.990 --> 00:08:16.890
Typecasting essentially is.

00:08:16.890 --> 00:08:17.950
Take us out here.

00:08:17.950 --> 00:08:26.620
Typecasting is forcing a data type on a variable actually,

00:08:26.620 --> 00:08:26.740
uh,

00:08:26.740 --> 00:08:27.550
variables value.

00:08:27.550 --> 00:08:28.190
Technically.

00:08:28.190 --> 00:08:35.320
So that's all that is now your task for this lesson but I would like you to do is creative

00:08:35.320 --> 00:08:35.830
variable.

00:08:35.830 --> 00:08:42.340
Make it a string so put like Caleb or whatever your name is Put your name in there and then

00:08:42.340 --> 00:08:43.830
I want you to change that to an inter.

00:08:43.830 --> 00:08:47.380
And because all this makes no sense,

00:08:47.380 --> 00:08:53.270
I wanted to change it to an end var dump it or print are it so that you can see what kind

00:08:53.270 --> 00:08:54.800
of property it actually is,

00:08:54.800 --> 00:08:56.230
what kind of data type it actually is.

00:08:56.230 --> 00:09:01.050
And I want you to see what happens when you turn your string your name into a number.

00:09:01.050 --> 00:09:06.360
Do you think it's gonna turn out to be five because there's five letters in there?

00:09:06.360 --> 00:09:07.370
Do you think it's going to be,

00:09:07.370 --> 00:09:08.240
um,

00:09:08.240 --> 00:09:09.390
won or zero?

00:09:09.390 --> 00:09:09.940
Oh,

00:09:09.940 --> 00:09:11.960
I missed Ah type as well.

00:09:11.960 --> 00:09:15.910
You can also change it into a bull or Boolean that's true or false,

00:09:15.910 --> 00:09:16.350
yes or no.

00:09:16.350 --> 00:09:19.950
Eso Go ahead,

00:09:19.950 --> 00:09:23.830
turn your name as a string into an int and see what happens.

00:09:23.830 --> 00:09:27.640
And then you'll probably be a little bit confused after that and then go ahead and do the

00:09:27.640 --> 00:09:30.550
same example that we did in this video where we use instead of,

00:09:30.550 --> 00:09:31.810
you know,

00:09:31.810 --> 00:09:32.950
I'm not even take that out.

00:09:32.950 --> 00:09:35.950
There you go.

00:09:35.950 --> 00:09:42.500
Let's go ahead and try this one out afterwards and see that 12 as a string actually turns

00:09:42.500 --> 00:09:43.250
into an inter.

00:09:43.250 --> 00:09:44.330
All right,

00:09:44.330 --> 00:09:44.680
cool.

00:09:44.680 --> 00:09:50.050
We'll see you in the next lesson once you're all done that and we'll learn something new.

