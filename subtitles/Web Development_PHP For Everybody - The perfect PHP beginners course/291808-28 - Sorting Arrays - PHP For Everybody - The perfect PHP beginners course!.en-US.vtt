WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.690
all right,

00:00:01.690 --> 00:00:02.360
And that last lesson.

00:00:02.360 --> 00:00:03.580
We talked all about a raise,

00:00:03.580 --> 00:00:08.550
and I made that terrible joke about a raise and and we referenced Thantos a lot because

00:00:08.550 --> 00:00:11.100
apparently this is like Marvel sponsored.

00:00:11.100 --> 00:00:11.580
It's not.

00:00:11.580 --> 00:00:12.200
I wish it was,

00:00:12.200 --> 00:00:12.690
but it's not.

00:00:12.690 --> 00:00:14.570
And in this lesson,

00:00:14.570 --> 00:00:16.790
we're going to learn how to sort arrays now.

00:00:16.790 --> 00:00:17.820
At the end of the last lesson,

00:00:17.820 --> 00:00:18.430
I said,

00:00:18.430 --> 00:00:23.710
a razor cool is a great way to organize your data and Yadi yada yada,

00:00:23.710 --> 00:00:26.350
but it's useless for you right now.

00:00:26.350 --> 00:00:28.600
And honestly,

00:00:28.600 --> 00:00:30.200
this lesson should be coming a little bit later.

00:00:30.200 --> 00:00:34.450
But I think because it's also very deeply integrated with the Rays,

00:00:34.450 --> 00:00:36.960
we should learn about this right now and in the future.

00:00:36.960 --> 00:00:39.190
You can reference us a little bit later if you need to.

00:00:39.190 --> 00:00:41.690
So this lesson might be one of those ones that you just watch.

00:00:41.690 --> 00:00:42.300
You sit back,

00:00:42.300 --> 00:00:42.700
relax,

00:00:42.700 --> 00:00:43.100
watch.

00:00:43.100 --> 00:00:45.430
You don't necessarily need to do the practice of it right now,

00:00:45.430 --> 00:00:47.850
because the concept is is pretty straightforward.

00:00:47.850 --> 00:00:51.730
So let's go ahead and create a list of names.

00:00:51.730 --> 00:00:52.590
A list,

00:00:52.590 --> 00:00:54.530
as in an array.

00:00:54.530 --> 00:00:56.160
I write python as well,

00:00:56.160 --> 00:01:02.890
so a list in Python is the exact same thing as an array in PHP and Javascript.

00:01:02.890 --> 00:01:04.260
Same name,

00:01:04.260 --> 00:01:05.290
same story,

00:01:05.290 --> 00:01:05.910
different name,

00:01:05.910 --> 00:01:07.570
but the exact same purpose.

00:01:07.570 --> 00:01:08.820
So I've got a name in here.

00:01:08.820 --> 00:01:10.290
Have that name Caleb,

00:01:10.290 --> 00:01:14.420
and I've got name Nathan and I've got name Zephyr,

00:01:14.420 --> 00:01:16.350
and I've got name Thor.

00:01:16.350 --> 00:01:17.610
Okay,

00:01:17.610 --> 00:01:21.550
so if I do this var dump names and remember,

00:01:21.550 --> 00:01:23.120
if you don't have our dump,

00:01:23.120 --> 00:01:24.300
you don't need to.

00:01:24.300 --> 00:01:25.790
If you don't have our dump,

00:01:25.790 --> 00:01:27.420
you can also use print.

00:01:27.420 --> 00:01:30.470
Are print are will tell you the exact same thing.

00:01:30.470 --> 00:01:31.230
You just have to go in there,

00:01:31.230 --> 00:01:31.930
view your source,

00:01:31.930 --> 00:01:34.480
and it will show you what we're looking at is a little less detailed.

00:01:34.480 --> 00:01:38.240
But it's good enough for what we need So far,

00:01:38.240 --> 00:01:38.550
dump.

00:01:38.550 --> 00:01:41.610
And we've got Caleb Nathan's effort.

00:01:41.610 --> 00:01:46.240
Or what if I wanted to sort these in ascending order in alphabetical ascending order,

00:01:46.240 --> 00:01:49.420
I could do names is equal to are sort,

00:01:49.420 --> 00:01:50.870
know are sort.

00:01:50.870 --> 00:01:51.550
That's reverse sort,

00:01:51.550 --> 00:01:55.250
just sort names.

00:01:55.250 --> 00:01:57.780
And all I do is pass in the array name.

00:01:57.780 --> 00:02:00.050
And if you take a look here,

00:02:00.050 --> 00:02:02.310
So a lot of other functions we've done already,

00:02:02.310 --> 00:02:03.480
you could do something like this,

00:02:03.480 --> 00:02:05.970
but this one just returns true this one says it's Boolean.

00:02:05.970 --> 00:02:07.880
A Boolean is a data type.

00:02:07.880 --> 00:02:09.420
That means it's either true or it's false.

00:02:09.420 --> 00:02:10.570
There's no in between.

00:02:10.570 --> 00:02:11.150
It's either.

00:02:11.150 --> 00:02:11.490
Yes,

00:02:11.490 --> 00:02:12.010
no,

00:02:12.010 --> 00:02:13.520
it's one or zero.

00:02:13.520 --> 00:02:14.660
It's black and white.

00:02:14.660 --> 00:02:15.690
It's up and down.

00:02:15.690 --> 00:02:16.130
It's yes,

00:02:16.130 --> 00:02:17.240
it's no use talking.

00:02:17.240 --> 00:02:17.950
It's cold.

00:02:17.950 --> 00:02:19.770
So that's all this is doing.

00:02:19.770 --> 00:02:20.990
This isn't doing anything,

00:02:20.990 --> 00:02:24.910
because now that we have names is true or false.

00:02:24.910 --> 00:02:27.160
All this is saying is named.

00:02:27.160 --> 00:02:31.550
The sorting is set into the names variable,

00:02:31.550 --> 00:02:35.950
and it said that the sorting was done properly.

00:02:35.950 --> 00:02:37.480
It returned true,

00:02:37.480 --> 00:02:38.250
So it's OK.

00:02:38.250 --> 00:02:39.220
We don't want that.

00:02:39.220 --> 00:02:40.800
So let's delete that.

00:02:40.800 --> 00:02:45.050
And let's just run this on its own and they're Rio.

00:02:45.050 --> 00:02:47.450
So now if we go through the alphabet,

00:02:47.450 --> 00:02:53.770
we've got a B C D e f g h i j k l m N o p Q r,

00:02:53.770 --> 00:02:54.060
S,

00:02:54.060 --> 00:02:55.040
t,

00:02:55.040 --> 00:02:55.280
u,

00:02:55.280 --> 00:02:55.440
V,

00:02:55.440 --> 00:02:55.730
W,

00:02:55.730 --> 00:02:55.980
X,

00:02:55.980 --> 00:03:05.020
Y and Z or zed and we can see that we've got que en ti said this is now in alphabetical

00:03:05.020 --> 00:03:05.450
order.

00:03:05.450 --> 00:03:08.150
Based on the information that is in this array,

00:03:08.150 --> 00:03:11.960
we can also do the reverse called our sort.

00:03:11.960 --> 00:03:14.110
Look at that.

00:03:14.110 --> 00:03:15.750
It's the exact opposite now.

00:03:15.750 --> 00:03:21.630
But what if we want to have some sort of multi dimensional and not a multi dimensional

00:03:21.630 --> 00:03:22.690
right and associative array.

00:03:22.690 --> 00:03:27.180
So when we use the fat arrows were calling this an associative array and we're just gonna

00:03:27.180 --> 00:03:28.190
put her age is in here.

00:03:28.190 --> 00:03:36.250
So 28 26 as effort is to and Thor,

00:03:36.250 --> 00:03:38.690
I I honestly have no idea.

00:03:38.690 --> 00:03:40.160
You know what?

00:03:40.160 --> 00:03:41.680
I I just see the number 1000.

00:03:41.680 --> 00:03:49.750
There's something to go with 1000 save that refresh my page and now you see that are sort.

00:03:49.750 --> 00:03:54.150
Actually remove this because if we remove that are sort.

00:03:54.150 --> 00:03:54.780
Look,

00:03:54.780 --> 00:03:57.390
we've got a regular ray just like what we saw in that last video.

00:03:57.390 --> 00:04:00.790
But if we try to sort this or are sorted,

00:04:00.790 --> 00:04:05.650
all it's doing is sorting the values,

00:04:05.650 --> 00:04:07.580
it these are the keys.

00:04:07.580 --> 00:04:13.750
So the Caleb Nathan Zephyr and Thor these air called keys or the indexes or indices,

00:04:13.750 --> 00:04:16.150
and it's not sorting by those.

00:04:16.150 --> 00:04:20.150
But what if we wanted to sort by those so we could do in a sort?

00:04:20.150 --> 00:04:23.720
And this one is sorting by the value in here?

00:04:23.720 --> 00:04:26.410
So this said to is the lowest Thor.

00:04:26.410 --> 00:04:29.380
Thor has the oldest agent about 1000.

00:04:29.380 --> 00:04:31.580
And look at that it goes to 26.

00:04:31.580 --> 00:04:32.250
28,000.

00:04:32.250 --> 00:04:35.630
So it's sorted this by its associative values.

00:04:35.630 --> 00:04:35.940
Now,

00:04:35.940 --> 00:04:40.200
if we wanted to sort these by the keys in an associative array,

00:04:40.200 --> 00:04:41.250
we do que sort.

00:04:41.250 --> 00:04:44.650
And now it's in alphabetical order again.

00:04:44.650 --> 00:04:46.020
Okay,

00:04:46.020 --> 00:04:46.390
now,

00:04:46.390 --> 00:04:47.640
what if we did?

00:04:47.640 --> 00:04:48.410
Ah,

00:04:48.410 --> 00:04:49.550
kr sort.

00:04:49.550 --> 00:04:51.770
So what this one did?

00:04:51.770 --> 00:04:54.430
Was it sorted alphabetical backwards?

00:04:54.430 --> 00:04:55.920
And is it a KR?

00:04:55.920 --> 00:05:03.960
Let's do a are sort and this one sorted by the value but in descending order,

00:05:03.960 --> 00:05:05.410
so from highest to lowest.

00:05:05.410 --> 00:05:05.870
Now,

00:05:05.870 --> 00:05:08.450
if you are uncertain what all of these are,

00:05:08.450 --> 00:05:10.600
as you probably should be right now,

00:05:10.600 --> 00:05:15.050
I'm gonna go ahead and I'm gonna put these in here for you to reference later,

00:05:15.050 --> 00:05:23.050
Sort are sort K sort a sort que are sort.

00:05:23.050 --> 00:05:24.920
They are sort.

00:05:24.920 --> 00:05:26.080
And there we go.

00:05:26.080 --> 00:05:30.360
And I am going to comment most of these out so that you can access these at any point in

00:05:30.360 --> 00:05:30.850
time.

00:05:30.850 --> 00:05:32.300
And there we go.

00:05:32.300 --> 00:05:35.110
We've got some sorting that again doesn't work with an associative array.

00:05:35.110 --> 00:05:40.070
And your task for this lesson is to actually make this associative array sort properly.

00:05:40.070 --> 00:05:42.230
You want to see those indexes those keys in here?

00:05:42.230 --> 00:05:45.910
So it should not say 123 are 0123 Rather,

00:05:45.910 --> 00:05:50.110
it should say Caleb Nathan's after Thor or in whatever particulary order.

00:05:50.110 --> 00:05:53.530
And I want you to try out our sort A sort case sort care sort.

00:05:53.530 --> 00:05:54.350
And they are sort.

00:05:54.350 --> 00:05:54.950
Now,

00:05:54.950 --> 00:05:56.750
if you don't know what these are,

00:05:56.750 --> 00:05:58.550
this is a great time to learn.

00:05:58.550 --> 00:06:05.230
Open up a new tab in chrome type PHP dot net hit space at all chroma automatically search

00:06:05.230 --> 00:06:15.150
PHP dot net for you and type in a race sort and you will get all sorts of array functions

00:06:15.150 --> 00:06:21.490
that's going to air sort And what do we see in here we've got?

00:06:21.490 --> 00:06:23.650
We've got a sorting flag which we didn't learn about.

00:06:23.650 --> 00:06:26.010
Maybe that's something that you might want to go and explore.

00:06:26.010 --> 00:06:29.350
There are examples in here.

00:06:29.350 --> 00:06:30.300
Um,

00:06:30.300 --> 00:06:32.820
you can go ahead and read other people's code.

00:06:32.820 --> 00:06:33.450
Um,

00:06:33.450 --> 00:06:34.550
really,

00:06:34.550 --> 00:06:38.390
What I want you to do is you don't have to know these off the top of your head.

00:06:38.390 --> 00:06:39.220
Um,

00:06:39.220 --> 00:06:40.220
because in all honestly,

00:06:40.220 --> 00:06:43.320
they're not used that often to be totally honest,

00:06:43.320 --> 00:06:47.740
but they are good to know that you have those in your toolbox and at any point in time.

00:06:47.740 --> 00:06:50.150
You know where to find those on the PHP dot net website.

00:06:50.150 --> 00:06:53.570
So there you go.

00:06:53.570 --> 00:06:56.130
That's this entire lesson wrapped up.

00:06:56.130 --> 00:06:57.280
I think after this,

00:06:57.280 --> 00:07:00.850
we should move on to something that's not an array because,

00:07:00.850 --> 00:07:01.820
well,

00:07:01.820 --> 00:07:04.450
we want to use something as little more useful right now.

