1
00:00:01,540 --> 00:00:02,750
<v Instructor>All righty, now step five</v>

2
00:00:02,750 --> 00:00:04,660
of generating a SalesPerson class,

3
00:00:04,660 --> 00:00:07,120
Now, we can use the Angular CLI to generate

4
00:00:07,120 --> 00:00:09,900
a class, so we could say ng generate class

5
00:00:09,900 --> 00:00:11,600
and you give a reference to the class.

6
00:00:11,600 --> 00:00:13,890
This'll create a very basic TypeScript class.

7
00:00:13,890 --> 00:00:16,300
Now, there's no requirement to use this,

8
00:00:16,300 --> 00:00:19,140
you could actually manually create the class yourself,

9
00:00:19,140 --> 00:00:22,970
but here I'm simply going to use the CLI just to help us out.

10
00:00:22,970 --> 00:00:24,760
Now this class that it creates, though,

11
00:00:24,760 --> 00:00:28,430
it's a very basic file, there's nothing here.

12
00:00:28,430 --> 00:00:30,680
But we can actually enhance it by adding

13
00:00:30,680 --> 00:00:32,270
some of our own code here.

14
00:00:32,270 --> 00:00:34,220
So I'll create my own constructor

15
00:00:34,220 --> 00:00:37,010
and I'll make use of parameter properties here.

16
00:00:37,010 --> 00:00:39,770
So the parameter properties for first name, last name,

17
00:00:39,770 --> 00:00:41,480
email, and sales volume.

18
00:00:41,480 --> 00:00:43,260
Now I know these are parameter properties

19
00:00:43,260 --> 00:00:45,490
because they're declared by prefixing

20
00:00:45,490 --> 00:00:48,780
the constructor argument with an access modifier.

21
00:00:48,780 --> 00:00:50,430
So the access modifiers you can use

22
00:00:50,430 --> 00:00:53,920
is public, protected, private, or read only.

23
00:00:53,920 --> 00:00:56,190
So the key here is that if you have a constructor

24
00:00:56,190 --> 00:00:59,420
with arguments and you prefix it with these items,

25
00:00:59,420 --> 00:01:02,343
then it's automatically a parameter property.

26
00:01:03,890 --> 00:01:05,700
Now remember with parameter properties,

27
00:01:05,700 --> 00:01:07,270
it actually declares the properties

28
00:01:07,270 --> 00:01:10,100
and assigns the properties automatically.

29
00:01:10,100 --> 00:01:12,250
It minimizes the boilerplate coding

30
00:01:12,250 --> 00:01:14,873
that you'd have to do for setting up a constructor.

31
00:01:16,380 --> 00:01:18,920
So in the bottom left here's the UML for the SalesPerson.

32
00:01:18,920 --> 00:01:20,660
So we have these four properties here,

33
00:01:20,660 --> 00:01:23,543
first name, last name, email, and sales volume.

34
00:01:26,730 --> 00:01:29,573
Okay, so now about these public properties.

35
00:01:30,730 --> 00:01:33,360
I know you saw that code with the constructor

36
00:01:33,360 --> 00:01:36,210
and I had these parameter properties and I used public

37
00:01:36,210 --> 00:01:41,200
and you probably said, "Oh my gosh, no, no way."

38
00:01:41,200 --> 00:01:43,910
All righty, so in the Angular world,

39
00:01:43,910 --> 00:01:46,150
public properties are very common.

40
00:01:46,150 --> 00:01:48,210
So you'll see the Angular developers

41
00:01:48,210 --> 00:01:51,000
using public properties in their code.

42
00:01:51,000 --> 00:01:53,380
So this is a different approach than what

43
00:01:53,380 --> 00:01:55,350
Java developers are used to.

44
00:01:55,350 --> 00:01:58,400
In the Java world, we primarily use private fields

45
00:01:58,400 --> 00:02:00,470
and have public getter setter methods

46
00:02:00,470 --> 00:02:02,590
to promote encapsulation.

47
00:02:02,590 --> 00:02:04,750
However, in the Angular world,

48
00:02:04,750 --> 00:02:08,020
most Angular developers simply use public properties

49
00:02:08,020 --> 00:02:11,410
and they skip on the getter setter methods or accessors.

50
00:02:11,410 --> 00:02:13,980
So you'll actually see this type of coding

51
00:02:13,980 --> 00:02:17,780
in the official Angular documentation and tutorials.

52
00:02:17,780 --> 00:02:20,570
Also you'll see this coding in blog articles

53
00:02:20,570 --> 00:02:23,390
and on real time projects,

54
00:02:23,390 --> 00:02:25,430
so don't worry about this too much.

55
00:02:25,430 --> 00:02:27,430
Feel free to use public properties

56
00:02:27,430 --> 00:02:29,910
in your Angular coding.

57
00:02:29,910 --> 00:02:32,623
Okay, whoo. I had to get that out of the way.

58
00:02:35,150 --> 00:02:36,940
Now moving ahead to step six,

59
00:02:36,940 --> 00:02:39,090
in our SalesPersonListComponent, we need

60
00:02:39,090 --> 00:02:41,810
to create some sample data, all right.

61
00:02:41,810 --> 00:02:45,040
So here in my code I'm going to import our new class,

62
00:02:45,040 --> 00:02:49,970
SalesPerson and then I'll create an array of objects,

63
00:02:49,970 --> 00:02:52,700
so I have sales-person-list of SalesPerson

64
00:02:52,700 --> 00:02:54,760
with square brackets denotes an array,

65
00:02:54,760 --> 00:02:56,900
equals, and then inside of this array,

66
00:02:56,900 --> 00:03:01,410
I simply create x number of SalesPerson objects here.

67
00:03:01,410 --> 00:03:04,210
So here I have entries for Anup Kumar, John Doe,

68
00:03:04,210 --> 00:03:06,123
Claire Murphy, and Mai Truong.

69
00:03:08,580 --> 00:03:11,100
And then finally to kind of wrap this all together

70
00:03:11,100 --> 00:03:14,880
in step seven, in our sales-person-list template file,

71
00:03:14,880 --> 00:03:18,283
we're going to build the HTML table by looping over the data.

72
00:03:19,330 --> 00:03:20,880
All righty, so we'll go ahead and create

73
00:03:20,880 --> 00:03:23,290
a very basic HTML table.

74
00:03:23,290 --> 00:03:25,570
I'll set up a thead section with out columns

75
00:03:25,570 --> 00:03:28,993
for first name, last name, email, and sales volume.

76
00:03:30,710 --> 00:03:33,310
And so now I move down to the table body.

77
00:03:33,310 --> 00:03:37,780
I'll make use of tr and then I'll use a *ngFor.

78
00:03:37,780 --> 00:03:40,730
So this is a special angular directive

79
00:03:40,730 --> 00:03:43,180
that will loop over the array and it'll

80
00:03:43,180 --> 00:03:45,960
create a table row for each array element.

81
00:03:45,960 --> 00:03:49,560
So here I have *ngFOr equals let tempSalesPerson

82
00:03:50,520 --> 00:03:52,320
of SalesPersonList.

83
00:03:52,320 --> 00:03:54,350
So this will actually access the property,

84
00:03:54,350 --> 00:03:56,560
the find and the component.

85
00:03:56,560 --> 00:03:59,320
So this is the exact name of the property,

86
00:03:59,320 --> 00:04:01,290
SalesPersonList, it matches up, and will simply

87
00:04:01,290 --> 00:04:02,963
loop over that array.

88
00:04:04,200 --> 00:04:06,260
And so for each element in the array,

89
00:04:06,260 --> 00:04:08,920
we'll have this table row and then we'll use table data

90
00:04:08,920 --> 00:04:12,360
to access the actual internals there for that given object.

91
00:04:12,360 --> 00:04:14,530
So I use the curly brace, curly brace,

92
00:04:14,530 --> 00:04:17,670
tempSalesPerson.firstName and then I repeat the process

93
00:04:17,670 --> 00:04:21,297
for .lastName, .email, and .salesVolume.

94
00:04:23,580 --> 00:04:25,510
So this'll give me the HTML table,

95
00:04:25,510 --> 00:04:28,283
populate it with data from the property.

96
00:04:30,150 --> 00:04:31,660
All righty, this looks great so let's go ahead

97
00:04:31,660 --> 00:04:34,143
and move it to our IDE and let's write the code.

