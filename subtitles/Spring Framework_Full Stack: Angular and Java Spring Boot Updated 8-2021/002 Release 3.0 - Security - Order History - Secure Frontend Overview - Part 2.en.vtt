WEBVTT
1
00:00:02.640 --> 00:00:03.820
<v ->So now we need to start writing</v>

2
00:00:03.820 --> 00:00:05.130
the code for the interceptor.

3
00:00:05.130 --> 00:00:06.120
So I'll just go ahead and set up

4
00:00:06.120 --> 00:00:08.373
the basic imports here for this class.

5
00:00:18.100 --> 00:00:19.940
Then I set up the class declaration

6
00:00:19.940 --> 00:00:22.800
AuthInterceptorService implements HttpInterceptor

7
00:00:25.130 --> 00:00:27.820
The HttpInterceptor is an interface,

8
00:00:27.820 --> 00:00:30.020
defined in the angular framework

9
00:00:30.020 --> 00:00:32.530
and so it has a method that we'll have to implement

10
00:00:32.530 --> 00:00:34.223
as part of our coding.

11
00:00:37.686 --> 00:00:38.700
And for our constructor,

12
00:00:38.700 --> 00:00:41.580
we're going to inject the OktaAuthService

13
00:00:41.580 --> 00:00:43.370
because we'll actually use that a little bit later

14
00:00:43.370 --> 00:00:46.010
to get the current access token

15
00:00:46.010 --> 00:00:47.613
for the user that's logged in.

16
00:00:51.930 --> 00:00:54.310
And remember I say that the HttpInterceptor

17
00:00:54.310 --> 00:00:56.140
is an angular interface.

18
00:00:56.140 --> 00:00:58.040
So we'll actually implement that interface

19
00:00:58.040 --> 00:00:59.130
and that one method that we have

20
00:00:59.130 --> 00:01:00.940
to implement is called Intercept.

21
00:01:00.940 --> 00:01:02.590
So here's the coding for it here.

22
00:01:03.840 --> 00:01:05.658
So they simply pass in a Request,

23
00:01:05.658 --> 00:01:07.380
the next Handler

24
00:01:07.380 --> 00:01:08.930
and the Returns and Observable.

25
00:01:10.360 --> 00:01:13.570
This will basically intercept all outgoing HTTP requests

26
00:01:13.570 --> 00:01:15.973
of the HttpClient that we're making use of.

27
00:01:17.120 --> 00:01:20.350
Now we have a return and we have this.handleAccess.

28
00:01:20.350 --> 00:01:22.540
So it's just a little helper method that we've defined

29
00:01:22.540 --> 00:01:23.513
in this class.

30
00:01:24.770 --> 00:01:26.930
So I have this.handleAccess,

31
00:01:26.930 --> 00:01:29.440
has a request and the next handler.

32
00:01:29.440 --> 00:01:31.030
Note here there's a new keyword

33
00:01:31.030 --> 00:01:33.070
at the beginning called async.

34
00:01:33.070 --> 00:01:35.570
So that says that this is an asynchronous function

35
00:01:36.590 --> 00:01:40.070
and this method will also return a Promise.

36
00:01:40.070 --> 00:01:43.410
And so a Promise is basically a way of having a future.

37
00:01:43.410 --> 00:01:44.243
So you're saying,

38
00:01:44.243 --> 00:01:46.190
hey, we're going to perform this operation

39
00:01:46.190 --> 00:01:48.130
and we're going to turn our value in the future.

40
00:01:48.130 --> 00:01:50.360
And this is the type of data that we're going to return.

41
00:01:50.360 --> 00:01:51.980
So it's kind of like

42
00:01:51.980 --> 00:01:54.410
a ticket or like an IOU

43
00:01:54.410 --> 00:01:56.940
and we'll eventually return that data back to

44
00:01:56.940 --> 00:01:58.143
the calling program.

45
00:02:03.460 --> 00:02:05.580
We only want to add an access token

46
00:02:05.580 --> 00:02:07.610
for our secured endpoints.

47
00:02:07.610 --> 00:02:10.200
So here I'll just set up this very basic array

48
00:02:10.200 --> 00:02:14.707
of a securedEndpoints/api/orders.

49
00:02:14.707 --> 00:02:17.180
And then I check to see if the secured endpoints is

50
00:02:17.180 --> 00:02:20.763
in the current URL that the user is making a call for.

51
00:02:21.660 --> 00:02:24.410
If so, then I'll get the access token

52
00:02:24.410 --> 00:02:28.530
so I'll use this.oktaAuth.getAccessToken.

53
00:02:28.530 --> 00:02:30.680
Now this getAccesToken is a

54
00:02:30.680 --> 00:02:31.750
async call.

55
00:02:31.750 --> 00:02:33.140
And what we'll do is we'll make use

56
00:02:33.140 --> 00:02:35.480
of this new keyword called await.

57
00:02:35.480 --> 00:02:38.170
So this is some very nice syntactic sugar

58
00:02:38.170 --> 00:02:39.870
available in TypeScript

59
00:02:39.870 --> 00:02:40.710
where you can wait

60
00:02:40.710 --> 00:02:42.920
for the async call to finish

61
00:02:42.920 --> 00:02:46.220
without having to get into any special coding syntax

62
00:02:46.220 --> 00:02:47.053
or whatever.

63
00:02:47.053 --> 00:02:47.886
So it's basically saying,

64
00:02:47.886 --> 00:02:49.290
Hey, we're making this async call

65
00:02:49.290 --> 00:02:50.123
to a promise

66
00:02:50.123 --> 00:02:51.640
and we are going to wait

67
00:02:51.640 --> 00:02:54.110
on the results and then those results

68
00:02:54.110 --> 00:02:57.153
then we'll assign it to our given access token.

69
00:03:01.857 --> 00:03:04.000
And so, now we go through and we clone the request

70
00:03:04.000 --> 00:03:07.550
and we add a new header with our access token.

71
00:03:07.550 --> 00:03:11.410
Here I say, request = request.clone.

72
00:03:11.410 --> 00:03:13.340
And then I add in that new header.

73
00:03:13.340 --> 00:03:14.410
So remember right,

74
00:03:14.410 --> 00:03:15.690
we're setting a new header.

75
00:03:15.690 --> 00:03:18.770
So the header is Authorization: "Bearer"

76
00:03:18.770 --> 00:03:21.000
and then we give the actual value

77
00:03:21.000 --> 00:03:22.430
of our accessToken.

78
00:03:22.430 --> 00:03:23.600
So we're basically,

79
00:03:23.600 --> 00:03:26.130
we're adding a new header here.

80
00:03:26.130 --> 00:03:29.160
Now you may wonder why am I cloning the request?

81
00:03:29.160 --> 00:03:31.280
Well, the request is immutable.

82
00:03:31.280 --> 00:03:34.220
That means that you can't change the request directly.

83
00:03:34.220 --> 00:03:36.040
So the only way you can make changes here

84
00:03:36.040 --> 00:03:38.480
is create a copy of that request

85
00:03:38.480 --> 00:03:40.590
and then make your changes accordingly.

86
00:03:40.590 --> 00:03:42.620
So that's why we do a request.clone

87
00:03:42.620 --> 00:03:44.890
and then we add in new headers there

88
00:03:44.890 --> 00:03:47.353
and that's the reasoning for that coding syntax.

89
00:03:50.830 --> 00:03:51.770
And then down at the bottom,

90
00:03:51.770 --> 00:03:55.120
we return next.handle(requests).toPromise.

91
00:03:55.120 --> 00:03:57.370
Effectively this will basically pass the request

92
00:03:57.370 --> 00:03:59.650
to the next interceptor in the chain.

93
00:03:59.650 --> 00:04:01.380
If there are no more interceptors in the chain,

94
00:04:01.380 --> 00:04:02.260
it simply makes a call

95
00:04:02.260 --> 00:04:04.450
to the destination

96
00:04:04.450 --> 00:04:06.253
API that you're making a call for.

97
00:04:09.710 --> 00:04:11.600
Okay, great. So kind of standing back a bit

98
00:04:11.600 --> 00:04:13.410
and we see here in the bottom left,

99
00:04:13.410 --> 00:04:14.740
we have the setup

100
00:04:14.740 --> 00:04:16.940
in place that we have our client angler app

101
00:04:16.940 --> 00:04:18.460
use the HTTP client,

102
00:04:18.460 --> 00:04:19.520
calls our interceptor

103
00:04:19.520 --> 00:04:22.150
that intercept that basically adds the access token

104
00:04:22.150 --> 00:04:23.880
and it puts it into the request header

105
00:04:23.880 --> 00:04:25.370
for Authorization: "Bearer"

106
00:04:25.370 --> 00:04:27.413
and the value of that access token.

107
00:04:31.500 --> 00:04:34.030
All right, step two is updating the app.module.ts

108
00:04:34.030 --> 00:04:36.340
to reference the interceptor.

109
00:04:36.340 --> 00:04:38.750
So we'll move into our app.module.ts file

110
00:04:42.310 --> 00:04:44.460
we have our normal declarations and imports.

111
00:04:44.460 --> 00:04:46.940
And then here for providers,

112
00:04:46.940 --> 00:04:49.570
we'll basically set up a reference here for the interceptor.

113
00:04:49.570 --> 00:04:52.780
So we make use of provide: HTTP_INTERCEPTORS

114
00:04:52.780 --> 00:04:55.030
so that's the token for the HttpInterceptors.

115
00:04:58.210 --> 00:05:01.320
And so now we register our AuthInterceptorService

116
00:05:01.320 --> 00:05:02.420
as an HttpInterceptor,

117
00:05:04.950 --> 00:05:06.540
and then for the multi: true

118
00:05:06.540 --> 00:05:09.480
this informs angler that the HttpInterceptors as a token

119
00:05:09.480 --> 00:05:11.840
for injecting an array of values,

120
00:05:11.840 --> 00:05:13.560
because remember with these interceptors,

121
00:05:13.560 --> 00:05:16.350
you can have zero to many interceptors.

122
00:05:16.350 --> 00:05:18.370
Now the word token here

123
00:05:18.370 --> 00:05:19.400
it's kind of overloaded.

124
00:05:19.400 --> 00:05:20.270
Don't get confused.

125
00:05:20.270 --> 00:05:21.830
So, they're not really referring

126
00:05:21.830 --> 00:05:25.220
to the JWT token or the access token or whatever.

127
00:05:25.220 --> 00:05:28.090
They're just referring to a token in a general sense.

128
00:05:28.090 --> 00:05:31.930
So basically like a string or like a hash maps

129
00:05:31.930 --> 00:05:33.400
like a key or whatever.

130
00:05:33.400 --> 00:05:35.840
That's their use of it in this fashion

131
00:05:35.840 --> 00:05:37.600
but I use the word token here because

132
00:05:37.600 --> 00:05:39.900
when you look at the interceptor documentation,

133
00:05:39.900 --> 00:05:41.360
they make use of that same

134
00:05:41.360 --> 00:05:43.293
reference or terminology.

135
00:05:49.010 --> 00:05:50.950
Visit the link that I have here on this slide,

136
00:05:50.950 --> 00:05:53.450
it'll take you to a page that has additional resources

137
00:05:53.450 --> 00:05:54.290
on these topics.

138
00:05:54.290 --> 00:05:55.490
And they're very useful.

139
00:05:58.520 --> 00:06:00.170
All right, well, this all looks really good.

140
00:06:00.170 --> 00:06:01.003
I'm excited.

141
00:06:01.003 --> 00:06:02.170
I'm ready to dive into the IDE

142
00:06:02.170 --> 00:06:03.700
and start writing some code.

143
00:06:03.700 --> 00:06:06.073
So I'll see you in the next video.

