1
00:00:01,170 --> 00:00:02,300
<v ->In this video, we'll cover</v>

2
00:00:02,300 --> 00:00:04,703
the development process for pagination.

3
00:00:07,880 --> 00:00:10,070
We've built our project so far and we're going to

4
00:00:10,070 --> 00:00:13,343
add this new feature for pagination in the bottom right.

5
00:00:15,900 --> 00:00:17,500
So here's our development process.

6
00:00:17,500 --> 00:00:19,840
The first thing is installing ng-bootstrap,

7
00:00:19,840 --> 00:00:22,850
then we'll refactor the interface for GetResponseProducts.

8
00:00:22,850 --> 00:00:25,800
We'll add pagination support to the product service.

9
00:00:25,800 --> 00:00:28,420
We'll update our product list to handle pagination

10
00:00:28,420 --> 00:00:30,630
and then finally we'll enhance our HTML template

11
00:00:30,630 --> 00:00:33,653
to use the ng-bootstrap pagination component.

12
00:00:36,660 --> 00:00:39,050
Okay, step one of installing ng-bootstrap.

13
00:00:39,050 --> 00:00:40,690
So all of the installation instructions

14
00:00:40,690 --> 00:00:42,070
are at this given website,

15
00:00:42,070 --> 00:00:45,050
we will walk through it here on this slide.

16
00:00:45,050 --> 00:00:46,490
So we'll run the following commands

17
00:00:46,490 --> 00:00:47,870
in our Angular project directory.

18
00:00:47,870 --> 00:00:50,400
We'll use ng add @angular/localize.

19
00:00:50,400 --> 00:00:53,200
This is a dependency for Angular nine and higher.

20
00:00:53,200 --> 00:00:56,180
We'll also do an npm install on ng-bootstrap

21
00:00:56,180 --> 00:00:57,530
that will actually install

22
00:00:57,530 --> 00:00:59,663
the ng-bootstrap component framework.

23
00:01:02,890 --> 00:01:05,190
Also, we need to import the module for pagination,

24
00:01:05,190 --> 00:01:08,160
so we need to edit our app.module.ts file

25
00:01:08,160 --> 00:01:10,150
and add a new entry here for imports

26
00:01:10,150 --> 00:01:12,733
for the Ngb pagination module.

27
00:01:15,500 --> 00:01:17,310
Alright, step two of refactor the interface

28
00:01:17,310 --> 00:01:18,170
for GetResponseProducts.

29
00:01:18,170 --> 00:01:21,600
So we currently use the interface GetResponseProducts

30
00:01:21,600 --> 00:01:24,380
to map the JSON data from the REST API

31
00:01:24,380 --> 00:01:26,540
over to our TypeScript objects.

32
00:01:26,540 --> 00:01:28,230
So here we have underscore embedded,

33
00:01:28,230 --> 00:01:31,770
we map here and in products array we map here.

34
00:01:31,770 --> 00:01:33,660
So we have that coding in place already.

35
00:01:33,660 --> 00:01:35,620
We simply need to kind of enhance this a bit

36
00:01:35,620 --> 00:01:37,123
to support that meta data.

37
00:01:39,160 --> 00:01:40,460
So the Response Meta Data

38
00:01:40,460 --> 00:01:43,220
has valuable information for pagination.

39
00:01:43,220 --> 00:01:45,200
So at the bottom here we have the page,

40
00:01:45,200 --> 00:01:47,670
we have size elements, total pages is a number.

41
00:01:47,670 --> 00:01:49,500
We saw that in one of the previous videos

42
00:01:49,500 --> 00:01:51,420
as far as the data that's returned.

43
00:01:51,420 --> 00:01:53,670
And we need to grab this data and map this over

44
00:01:53,670 --> 00:01:54,913
to our TypeScript code.

45
00:01:58,440 --> 00:02:00,530
So here let's refactor the interface to support,

46
00:02:00,530 --> 00:02:01,993
the pagination meta-data.

47
00:02:03,150 --> 00:02:05,770
So we have our JSON and then there's interface

48
00:02:05,770 --> 00:02:09,000
and we add this new entry into our interface for page.

49
00:02:09,000 --> 00:02:10,710
And then we have those four properties,

50
00:02:10,710 --> 00:02:13,530
size, total elements, total pages and number.

51
00:02:13,530 --> 00:02:15,500
Coz we need to capture that so we can use it

52
00:02:15,500 --> 00:02:17,053
in our Angular application.

53
00:02:20,020 --> 00:02:22,200
Alright, step three of adding pagination supports

54
00:02:22,200 --> 00:02:23,300
to our ProductService.

55
00:02:24,470 --> 00:02:25,410
So on our ProductService,

56
00:02:25,410 --> 00:02:28,690
we're going to add this new method, getProductListPaginate.

57
00:02:28,690 --> 00:02:30,750
We pass in parameters for pagination,

58
00:02:30,750 --> 00:02:32,673
the page and the page size.

59
00:02:35,530 --> 00:02:37,130
And then remember Spring Data REST supports

60
00:02:37,130 --> 00:02:38,540
pagination out of the box.

61
00:02:38,540 --> 00:02:40,170
So we simply have to send over the parameters

62
00:02:40,170 --> 00:02:41,743
for page and size.

63
00:02:45,330 --> 00:02:47,390
And then in step four we need to update our product list

64
00:02:47,390 --> 00:02:49,350
to handle pagination.

65
00:02:49,350 --> 00:02:51,793
So we define some new properties for pagination.

66
00:02:54,580 --> 00:02:56,530
And then in our method handleListProducts,

67
00:02:56,530 --> 00:02:59,403
we call the service and pass in the parameters.

68
00:03:00,820 --> 00:03:03,870
And then notice here thePageNumber - 1,

69
00:03:03,870 --> 00:03:05,870
because, pagination component and Angular,

70
00:03:05,870 --> 00:03:07,450
the pages are 1 based

71
00:03:07,450 --> 00:03:09,630
and Spring Data REST of the pages are 0 based.

72
00:03:09,630 --> 00:03:11,870
So we need to kind of decrement that value accordingly

73
00:03:11,870 --> 00:03:13,973
before sending it over to the backend.

74
00:03:17,490 --> 00:03:18,950
Then we actually processed the result

75
00:03:18,950 --> 00:03:21,190
that came from the backend.

76
00:03:21,190 --> 00:03:22,900
And so when data arrives in a product service,

77
00:03:22,900 --> 00:03:25,560
we set the properties based on that data

78
00:03:25,560 --> 00:03:27,490
and everything on the right hand side of the assignment

79
00:03:27,490 --> 00:03:30,783
is data from the Spring Data REST JSON from the backend.

80
00:03:32,360 --> 00:03:33,760
And so we have to do a small thing

81
00:03:33,760 --> 00:03:35,340
on the page number again, right?

82
00:03:35,340 --> 00:03:37,540
The backend is 0 based,

83
00:03:37,540 --> 00:03:39,780
the pagination component and Angular is 1 based

84
00:03:39,780 --> 00:03:41,820
so we need to kind of add 1 to that value.

85
00:03:41,820 --> 00:03:43,870
Backend 0 based frontend 1 base.

86
00:03:43,870 --> 00:03:45,840
That's why I have to do the little tricky stuff here

87
00:03:45,840 --> 00:03:46,673
with the math.

88
00:03:47,950 --> 00:03:50,050
And that's the coding there for step four.

