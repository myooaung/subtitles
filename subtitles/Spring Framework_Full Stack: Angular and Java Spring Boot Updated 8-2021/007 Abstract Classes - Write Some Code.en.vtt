WEBVTT
1
00:00:01.340 --> 00:00:03.630
<v Instructor>Okay, so let's go ahead and zoom in here,</v>

2
00:00:03.630 --> 00:00:05.204
so the first thing I want to do here

3
00:00:05.204 --> 00:00:07.310
is just do a copy/paste on my previous project.

4
00:00:07.310 --> 00:00:10.420
So let's copy the 05-inheritance project,

5
00:00:10.420 --> 00:00:13.070
and let's paste it here and we'll give it a new name.

6
00:00:17.450 --> 00:00:19.050
And the new name that we'll give this project,

7
00:00:19.050 --> 00:00:21.743
we'll call it 06-abstract-classes.

8
00:00:26.090 --> 00:00:28.780
Okay, so let's do some quick housekeeping here so,

9
00:00:28.780 --> 00:00:32.400
the two files here, Driver.js and Driver.ts

10
00:00:32.400 --> 00:00:33.920
I want to delete these two files

11
00:00:33.920 --> 00:00:36.980
because I'll simply use my array version later on.

12
00:00:36.980 --> 00:00:40.853
So let's go ahead and delete Driver.js and Driver.ts.

13
00:00:49.770 --> 00:00:52.653
Okay, so let's go ahead and open up Shape.ts,

14
00:00:58.250 --> 00:01:00.460
and I want to mark this class as being abstract

15
00:01:00.460 --> 00:01:02.603
so I simply use the abstract keyword.

16
00:01:09.590 --> 00:01:11.370
All right, so down at the bottom I'm going to add

17
00:01:11.370 --> 00:01:12.673
an abstract method.

18
00:01:21.610 --> 00:01:22.820
So calculateArea,

19
00:01:22.820 --> 00:01:24.670
and notice here there's no implementation,

20
00:01:24.670 --> 00:01:26.670
there's no body because we'll actually get

21
00:01:26.670 --> 00:01:29.383
the implementation from the concrete sub-classes.

22
00:01:31.700 --> 00:01:33.960
So one thing is, if I move back to the array

23
00:01:33.960 --> 00:01:36.890
Driver.ts then we'll actually see an error

24
00:01:36.890 --> 00:01:39.080
and it'll tell us, hey, cannot create

25
00:01:39.080 --> 00:01:41.130
an instance of an abstract class.

26
00:01:41.130 --> 00:01:42.240
And we know that, right?

27
00:01:42.240 --> 00:01:43.730
We're aware of that.

28
00:01:43.730 --> 00:01:46.590
So I'll actually remove this line of code here,

29
00:01:46.590 --> 00:01:48.470
so I'll remove the myShape

30
00:01:48.470 --> 00:01:49.950
and I'll also do a similar thing here

31
00:01:49.950 --> 00:01:52.820
on adding it to the array, remove that item

32
00:01:52.820 --> 00:01:55.670
because we can't create an instance of an abstract class.

33
00:02:00.350 --> 00:02:02.960
I'm moving to Rectangle.ts and so there's another

34
00:02:02.960 --> 00:02:04.820
error here and if we kind of float over it

35
00:02:04.820 --> 00:02:07.650
it says this non-abstract class does not

36
00:02:07.650 --> 00:02:10.570
implement the inherited abstract member calculateArea.

37
00:02:10.570 --> 00:02:11.403
All right, cool.

38
00:02:11.403 --> 00:02:15.658
So that means I need to write the code for calculateArea.

39
00:02:15.658 --> 00:02:17.440
And what I can do here is actually make use

40
00:02:17.440 --> 00:02:19.040
of the quick fix.

41
00:02:19.040 --> 00:02:20.080
All right, so this is the little tip

42
00:02:20.080 --> 00:02:21.300
that I told you about earlier.

43
00:02:21.300 --> 00:02:23.700
We can do a quick fix and we can implement

44
00:02:23.700 --> 00:02:25.783
the inherited abstract class.

45
00:02:26.670 --> 00:02:28.830
And it'll give me the method here, calculateArea.

46
00:02:28.830 --> 00:02:30.130
Cool, I like it.

47
00:02:30.130 --> 00:02:32.590
So now, I'll simply remove the placeholder code,

48
00:02:32.590 --> 00:02:35.033
and I'll implement the calculateArea method.

49
00:02:36.420 --> 00:02:37.900
So the area of a rectangle, right,

50
00:02:37.900 --> 00:02:39.487
is width times length.

51
00:02:51.110 --> 00:02:53.720
And then we have a similar issue here in circle.ts, right,

52
00:02:53.720 --> 00:02:56.150
we haven't implemented the abstract method.

53
00:02:56.150 --> 00:02:58.090
I'll do the similar trick here of implement

54
00:02:58.090 --> 00:02:59.913
the inherited abstract class.

55
00:03:05.050 --> 00:03:06.800
And I'll just update the code here.

56
00:03:16.880 --> 00:03:21.880
So this is Math.PI times Math.power radius, comma, two.

57
00:03:22.110 --> 00:03:23.603
So, radius squared.

58
00:03:32.040 --> 00:03:33.980
And remember, this math is a built-in object

59
00:03:33.980 --> 00:03:35.460
that has the properties and methods

60
00:03:35.460 --> 00:03:40.160
for mathematical constance and functions.

61
00:03:40.160 --> 00:03:44.473
So, that's our Pi R squared, okay that's great.

62
00:03:46.190 --> 00:03:49.433
So, this looks pretty good over here on our array driver.

63
00:03:55.560 --> 00:03:58.283
I'll add some code here to calculateArea.

64
00:04:06.140 --> 00:04:10.720
I'll also do a console.log on just a new line

65
00:04:10.720 --> 00:04:12.620
and again I could have used the back-slash N

66
00:04:12.620 --> 00:04:14.693
but here just keeping it simple for now.

67
00:04:17.040 --> 00:04:19.123
And now moving into my terminal,

68
00:04:25.060 --> 00:04:27.000
make sure I move into the correct directory,

69
00:04:27.000 --> 00:04:29.673
06-abstract-classes.

70
00:04:32.560 --> 00:04:34.393
Compile, run,

71
00:04:40.730 --> 00:04:43.640
and the first output here is for array of circle.

72
00:04:43.640 --> 00:04:46.630
So Pi R squared and the second one here

73
00:04:46.630 --> 00:04:50.113
is the area of rectangle, width times length.

74
00:04:52.480 --> 00:04:53.760
All right, so this looks good.

75
00:04:53.760 --> 00:04:56.820
We're able to set up an example here using abstract classes.

76
00:04:56.820 --> 00:04:57.653
Good job!

