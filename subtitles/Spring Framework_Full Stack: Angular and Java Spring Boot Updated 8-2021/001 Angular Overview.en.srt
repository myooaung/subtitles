1
00:00:01,130 --> 00:00:01,980
<v Instructor>In this video</v>

2
00:00:01,980 --> 00:00:04,003
we'll get an overview of Angular.

3
00:00:06,380 --> 00:00:07,760
So what is Angular?

4
00:00:07,760 --> 00:00:10,110
Well Angular is a framework for building modern

5
00:00:10,110 --> 00:00:12,160
single-page applications.

6
00:00:12,160 --> 00:00:15,920
You can get details on the project here at angular.io

7
00:00:15,920 --> 00:00:17,969
that's where you'll see the official documentation

8
00:00:17,969 --> 00:00:20,940
and also a list of Angular tutorials

9
00:00:20,940 --> 00:00:23,763
and a number of other really good resources.

10
00:00:26,640 --> 00:00:28,372
How is a single-page application

11
00:00:28,372 --> 00:00:31,774
different than a Traditional application?

12
00:00:31,774 --> 00:00:35,720
Well in a Traditional application each user action

13
00:00:35,720 --> 00:00:38,740
results in a full HTML page load.

14
00:00:38,740 --> 00:00:41,620
So if you do any work in the browser it'll make a request

15
00:00:41,620 --> 00:00:45,060
at a server and give you a full page every time.

16
00:00:45,060 --> 00:00:47,010
And that's the Traditional application.

17
00:00:48,150 --> 00:00:50,480
However in a single-page application,

18
00:00:50,480 --> 00:00:53,300
a web application is composed of a single page

19
00:00:53,300 --> 00:00:56,480
and based on the user actions the application page

20
00:00:56,480 --> 00:01:00,160
is updated so it normally performs a partial update

21
00:01:00,160 --> 00:01:02,250
instead of a full page load.

22
00:01:02,250 --> 00:01:04,690
Also the single-page application can communicate

23
00:01:04,690 --> 00:01:06,190
with the back-end server.

24
00:01:06,190 --> 00:01:09,500
It can send and retrieve data using the REST API

25
00:01:09,500 --> 00:01:11,438
and also some of this data can be used also to

26
00:01:11,438 --> 00:01:15,043
populate the actual single-page application.

27
00:01:18,130 --> 00:01:20,660
Now you may wonder well I need to see a concrete example

28
00:01:20,660 --> 00:01:22,940
of a single-page application just so I can understand it.

29
00:01:22,940 --> 00:01:26,390
So, if you've used any of the online maps like Google Maps

30
00:01:26,390 --> 00:01:29,180
or Yahoo Maps, those are single-page applications.

31
00:01:29,180 --> 00:01:32,010
They simply make partial updates on the page based on

32
00:01:32,010 --> 00:01:34,450
whatever data or whatever address or location

33
00:01:34,450 --> 00:01:37,110
you're looking for in the map system.

34
00:01:37,110 --> 00:01:40,370
And then also for email so most modern email solutions

35
00:01:40,370 --> 00:01:42,630
they are developed as single-page applications.

36
00:01:42,630 --> 00:01:44,585
So if you've used these before like Gmail and so forth,

37
00:01:44,585 --> 00:01:46,802
it's only partial page updates depending on what you're

38
00:01:46,802 --> 00:01:49,472
doing and so on so there's not a full page refresh

39
00:01:49,472 --> 00:01:52,630
for every submission or for every click.

40
00:01:52,630 --> 00:01:54,053
Just partial updates.

41
00:01:57,510 --> 00:01:59,550
So this is the Angular solution so this is kind of where

42
00:01:59,550 --> 00:02:01,940
Angular comes into place for helping you build

43
00:02:01,940 --> 00:02:03,960
modern single-page applications.

44
00:02:03,960 --> 00:02:05,900
So for your application as a single-page app

45
00:02:05,900 --> 00:02:07,990
you can make use of the Angular technology

46
00:02:07,990 --> 00:02:09,580
for doing partial page updates

47
00:02:09,580 --> 00:02:12,460
and also Angular can communicate to back-end services

48
00:02:12,460 --> 00:02:14,000
using the REST API.

49
00:02:14,000 --> 00:02:16,140
And we'll actually accomplish this in later videos

50
00:02:16,140 --> 00:02:17,700
and so we'll build a full-stack app.

51
00:02:17,700 --> 00:02:19,680
We'll have Angular on the front-end

52
00:02:19,680 --> 00:02:21,690
and we'll have Spring Boot on the back-end.

53
00:02:21,690 --> 00:02:24,333
All working together as a full-stack application.

54
00:02:27,590 --> 00:02:29,150
Okay great so this is all good stuff

55
00:02:29,150 --> 00:02:30,590
and so you're probably wondering okay well

56
00:02:30,590 --> 00:02:33,190
who's using Angular on real-time projects?

57
00:02:33,190 --> 00:02:35,640
Well companies around the world are using Angular

58
00:02:35,640 --> 00:02:37,480
so the Australian Government is using it

59
00:02:37,480 --> 00:02:38,830
for their immigration system,

60
00:02:38,830 --> 00:02:40,661
Citi Bank is using it for their customer service,

61
00:02:40,661 --> 00:02:43,140
Microsoft is using it for their gaming portals,

62
00:02:43,140 --> 00:02:44,730
and that's just a small sample.

63
00:02:44,730 --> 00:02:48,060
You can visit this website here, madewithangular.com

64
00:02:48,060 --> 00:02:50,020
and that'll show you some of the projects out there

65
00:02:50,020 --> 00:02:52,420
that are using Angular in the real world

66
00:02:52,420 --> 00:02:54,073
for real-time projects.

67
00:02:57,710 --> 00:02:59,666
Alrighty so let's take a look at Angular's history so

68
00:02:59,666 --> 00:03:03,060
the first version of AngularJS 1.0

69
00:03:03,060 --> 00:03:06,300
was released in October 2010 and then that worked out

70
00:03:06,300 --> 00:03:09,350
for a while however the Angular team found ways that they

71
00:03:09,350 --> 00:03:11,567
could actually improve the framework and actually make it

72
00:03:11,567 --> 00:03:15,550
better and so in this case they actually did a total rewrite

73
00:03:15,550 --> 00:03:19,840
of the framework so they released Angular 2 in October 2016.

74
00:03:19,840 --> 00:03:22,170
It's a total rewrite of the framework.

75
00:03:22,170 --> 00:03:25,400
It's a clean break from AngularJS 1.0.

76
00:03:25,400 --> 00:03:28,230
So it's actually two separate frameworks,

77
00:03:28,230 --> 00:03:32,170
two separate code bases and so it was a big transition

78
00:03:32,170 --> 00:03:33,870
there between the two.

79
00:03:33,870 --> 00:03:37,230
So using Angular 2 in going forward

80
00:03:37,230 --> 00:03:40,190
then all of those newer versions they simply followed

81
00:03:40,190 --> 00:03:43,060
the same framework approach and they made incremental

82
00:03:43,060 --> 00:03:46,740
improvements so they released Angular 4, 5, 6, 7 and 8.

83
00:03:46,740 --> 00:03:49,300
And again these were incremental improvements

84
00:03:49,300 --> 00:03:53,290
just like you have like Java 7, Java 8, 9, 10, 11, 12.

85
00:03:53,290 --> 00:03:56,680
No major changes here just incremental improvements.

86
00:03:56,680 --> 00:04:00,660
But here the key is that AngularJS 1.0 and Angular 2

87
00:04:00,660 --> 00:04:04,340
a total rewrite, two separate frameworks.

88
00:04:04,340 --> 00:04:08,350
So whenever you see AngularJS that's basically legacy work.

89
00:04:08,350 --> 00:04:11,520
Current work is Angular 2 and higher.

90
00:04:11,520 --> 00:04:14,143
Again, incremental improvements.

91
00:04:17,380 --> 00:04:19,310
Alrighty so let's kind of look at Angular's future

92
00:04:19,310 --> 00:04:21,470
as far as the future releases here so,

93
00:04:21,470 --> 00:04:24,310
the key item here is that a major release will come out

94
00:04:24,310 --> 00:04:28,570
every six months so Angular 9, 10, 11 and 12 and so on.

95
00:04:28,570 --> 00:04:30,400
So one thing to note here is that the dates are simply

96
00:04:30,400 --> 00:04:32,380
general guidance from the Angular team.

97
00:04:32,380 --> 00:04:34,770
It may shift accordingly in the future.

98
00:04:34,770 --> 00:04:36,310
But that's the basic idea.

99
00:04:36,310 --> 00:04:38,857
So don't become alarmed with version numbers if you see

100
00:04:38,857 --> 00:04:41,660
one team at your company using Angular 10

101
00:04:41,660 --> 00:04:43,950
and another team at your company using Angular 9

102
00:04:43,950 --> 00:04:46,530
or Angular 8 just because there's a new version

103
00:04:46,530 --> 00:04:47,803
every six months.

104
00:04:51,380 --> 00:04:53,130
So what about do-it-yourself?

105
00:04:53,130 --> 00:04:55,950
I mean you may wonder well, couldn't I just do it myself

106
00:04:55,950 --> 00:04:58,980
with JavaScript, jQuery and AJAX?

107
00:04:58,980 --> 00:05:00,560
And the answer's like well,

108
00:05:00,560 --> 00:05:03,388
it may work for small basic hobby apps.

109
00:05:03,388 --> 00:05:06,100
But for common features such as data binding,

110
00:05:06,100 --> 00:05:09,860
you may reinvent the wheel and it's also hard to manage

111
00:05:09,860 --> 00:05:13,090
and maintain for enterprise real-time applications

112
00:05:13,090 --> 00:05:15,740
with multiple developers working with you.

113
00:05:15,740 --> 00:05:18,060
And so that's the main reason we have frameworks

114
00:05:18,060 --> 00:05:21,130
such as Angular, React, Vue and so on.

115
00:05:21,130 --> 00:05:23,980
So a lot of other developers realize that this part

116
00:05:23,980 --> 00:05:26,990
is painful and hard to do and they created frameworks

117
00:05:26,990 --> 00:05:29,910
and do all the low level work, all the heavy lifting for us,

118
00:05:29,910 --> 00:05:32,513
so we can simply focus on building our app.

119
00:05:33,410 --> 00:05:36,623
Alrighty that wraps it up, I'll see you in the next video.

