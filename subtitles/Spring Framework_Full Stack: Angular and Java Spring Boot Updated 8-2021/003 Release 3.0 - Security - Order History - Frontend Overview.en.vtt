WEBVTT
1
00:00:01.120 --> 00:00:02.700
<v Instructor>In this video, we're going to continue</v>

2
00:00:02.700 --> 00:00:05.033
with our view order history development.

3
00:00:08.660 --> 00:00:11.630
All right, so we have the Spring Boot back end developed,

4
00:00:11.630 --> 00:00:14.460
now let's go ahead and focus on the Angular front end.

5
00:00:14.460 --> 00:00:16.590
So just as a refresher, we going to have a button

6
00:00:16.590 --> 00:00:18.400
over in the top right for orders

7
00:00:18.400 --> 00:00:21.180
and then we'll display the orders in the UI.

8
00:00:21.180 --> 00:00:23.990
So we have all the data coming from the REST API,

9
00:00:23.990 --> 00:00:24.940
let's go ahead and focus

10
00:00:24.940 --> 00:00:27.373
on doing the Angular UI development.

11
00:00:30.560 --> 00:00:32.240
Here's our development process.

12
00:00:32.240 --> 00:00:33.300
So the first thing we're going to do

13
00:00:33.300 --> 00:00:35.069
is keep track of a logged in user's email

14
00:00:35.069 --> 00:00:37.160
with the web browser storage,

15
00:00:37.160 --> 00:00:40.010
then we'll create an OrderHistory class.

16
00:00:40.010 --> 00:00:43.300
Next, we'll develop the OrderHistory service.

17
00:00:43.300 --> 00:00:45.900
We'll generate an order-history component

18
00:00:45.900 --> 00:00:49.400
and then we'll update the template text in the HTML page.

19
00:00:49.400 --> 00:00:51.280
Next we'll add the Orders button

20
00:00:51.280 --> 00:00:53.380
to the login-status component

21
00:00:53.380 --> 00:00:55.340
and then finally, we'll define a protected route

22
00:00:55.340 --> 00:00:57.363
for the order-history component.

23
00:01:00.610 --> 00:01:02.010
All right, step one of keeping track

24
00:01:02.010 --> 00:01:05.100
of the logged in user's email with web browser storage.

25
00:01:05.100 --> 00:01:07.120
So we know that we'll need to retrieve

26
00:01:07.120 --> 00:01:09.970
the orders by the user's email address,

27
00:01:09.970 --> 00:01:12.990
once they log in, let's go ahead and keep track

28
00:01:12.990 --> 00:01:14.399
of the user's email address

29
00:01:14.399 --> 00:01:15.959
and we'll store the email address

30
00:01:15.959 --> 00:01:18.190
in the web browser storage.

31
00:01:18.190 --> 00:01:20.870
So then other Angular components in our application

32
00:01:20.870 --> 00:01:23.200
can retrieve it at a later time.

33
00:01:23.200 --> 00:01:25.670
We'll make use of the web browser session storage,

34
00:01:25.670 --> 00:01:27.940
so the data will only be available

35
00:01:27.940 --> 00:01:30.233
during the current web browser session.

36
00:01:34.600 --> 00:01:36.070
Okay, so here's the coding here

37
00:01:36.070 --> 00:01:37.890
for keeping track of a user's email

38
00:01:37.890 --> 00:01:39.760
with web browser storage.

39
00:01:39.760 --> 00:01:42.270
We'll add an entry here to get a reference

40
00:01:42.270 --> 00:01:44.273
to the web browser's session storage.

41
00:01:45.690 --> 00:01:47.660
Down in the getUserDetails method,

42
00:01:47.660 --> 00:01:50.350
this is where we check to see if the user's authenticated.

43
00:01:50.350 --> 00:01:52.250
If they are authenticated, then we'll go ahead

44
00:01:52.250 --> 00:01:54.870
and get some additional information about the user,

45
00:01:54.870 --> 00:01:57.950
in particular, we want to store the user's email

46
00:01:57.950 --> 00:02:00.360
in the web browser's session storage.

47
00:02:00.360 --> 00:02:01.310
So what we do here,

48
00:02:01.310 --> 00:02:03.240
is we retrieve the user's email

49
00:02:03.240 --> 00:02:05.210
from the authentication response,

50
00:02:05.210 --> 00:02:09.290
so I simply say theEmail = res.email.

51
00:02:09.290 --> 00:02:12.670
Then I'll store the email in the browser storage.

52
00:02:12.670 --> 00:02:15.200
Here I'll make use of storage.setItem,

53
00:02:15.200 --> 00:02:18.623
I give the key the of userEmail and the value of theEmail.

54
00:02:20.780 --> 00:02:22.490
And we've seen coding like this before

55
00:02:22.490 --> 00:02:26.920
for storing and retrieving data in the browser storage.

56
00:02:26.920 --> 00:02:29.060
Alrighty, so let's store it there and we can later on,

57
00:02:29.060 --> 00:02:31.070
we'll use it in some other Angular components

58
00:02:31.070 --> 00:02:31.903
to retrieve it.

59
00:02:35.640 --> 00:02:36.920
Now, let's move ahead to step two

60
00:02:36.920 --> 00:02:38.830
of creating the OrderHistory class.

61
00:02:38.830 --> 00:02:40.480
We'll make use of the Angular CLI

62
00:02:40.480 --> 00:02:44.050
for ng generate class common/OrderHistory

63
00:02:44.050 --> 00:02:45.470
and it gives a basic stub class

64
00:02:45.470 --> 00:02:48.740
and it will add these five fields to the class.

65
00:02:48.740 --> 00:02:50.610
So I'll have a field here for ID,

66
00:02:50.610 --> 00:02:51.820
the order tracking number,

67
00:02:51.820 --> 00:02:54.410
total price, total quantity, date created.

68
00:02:54.410 --> 00:02:57.050
So eventually we'll be able to use this information

69
00:02:57.050 --> 00:02:59.750
in our UI components for actually displaying

70
00:02:59.750 --> 00:03:02.083
the appropriate data for the orders.

71
00:03:04.800 --> 00:03:07.500
In step three, we'll develop the OrderHistory service.

72
00:03:07.500 --> 00:03:10.040
Again, we'll make use of the Angular CLI

73
00:03:10.040 --> 00:03:13.003
ng generate service services/OrderHistory.

74
00:03:16.610 --> 00:03:19.490
And then we can move into the coding here for this class.

75
00:03:19.490 --> 00:03:20.610
The first we'll do, is we'll set up

76
00:03:20.610 --> 00:03:23.810
the orderURL /api/orders.

77
00:03:23.810 --> 00:03:26.693
We'll set up our constructor, we'll inject the httpClient.

78
00:03:28.020 --> 00:03:28.976
We'll create this method here,

79
00:03:28.976 --> 00:03:31.793
getOrderHistory, they'll pass in an email address.

80
00:03:32.970 --> 00:03:35.780
So we need to build the URL based on the customer email,

81
00:03:35.780 --> 00:03:37.410
so we simply call

82
00:03:37.410 --> 00:03:42.410
the orderHistoryUrl/search/findByCustomerEmail?email=

83
00:03:42.920 --> 00:03:45.883
and we use whatever value they pass in to this method.

84
00:03:47.850 --> 00:03:51.120
And then we'll do a return on httpClient.get

85
00:03:51.120 --> 00:03:52.910
and then we pass in the OrderHistoryUrl.

86
00:03:52.910 --> 00:03:55.623
So this effectively calls the REST API.

87
00:03:57.197 --> 00:03:59.620
GetResponseOrderHistory is simply an interface

88
00:03:59.620 --> 00:04:03.000
that we'll define and we'll use this to access the JSON

89
00:04:03.000 --> 00:04:04.810
that's sent back from Spring Data REST,

90
00:04:04.810 --> 00:04:08.123
in particular, we can access the _embedded entry.

91
00:04:12.230 --> 00:04:15.250
In step four, we'll generate the order-history component.

92
00:04:15.250 --> 00:04:18.423
Make use of ng generate component components/OrderHistory.

93
00:04:23.450 --> 00:04:25.570
And moving in here to the coding for this class,

94
00:04:25.570 --> 00:04:28.230
I'll set up an array, orderHistory,

95
00:04:28.230 --> 00:04:30.320
so I'll call it orderHistoryList.

96
00:04:30.320 --> 00:04:31.900
Initialize that as an empty list.

97
00:04:31.900 --> 00:04:33.010
I set up a reference here

98
00:04:33.010 --> 00:04:34.883
to the web browser's session storage.

99
00:04:36.450 --> 00:04:38.050
In my constructor, I'll inject the OrderHistoryService

100
00:04:38.050 --> 00:04:41.513
that we just created on the previous slides.

101
00:04:42.640 --> 00:04:46.220
In my ngOnInit method, I'll simply call handleOrderHistory.

102
00:04:46.220 --> 00:04:48.820
I'll go ahead and define this method here.

103
00:04:48.820 --> 00:04:50.870
First thing I'll do, is I'll read the user's email address

104
00:04:50.870 --> 00:04:51.960
from the browser's storage.

105
00:04:51.960 --> 00:04:53.940
So I use storage.getItem.

106
00:04:53.940 --> 00:04:55.637
Give the key of userEmail.

107
00:04:58.430 --> 00:05:00.510
And then I retrieve the data from the service,

108
00:05:00.510 --> 00:05:02.233
so I say orderHistoryService.getOrderHistory,

109
00:05:03.730 --> 00:05:05.980
the email.subscribe.

110
00:05:05.980 --> 00:05:07.370
Once I get the data back,

111
00:05:07.370 --> 00:05:09.210
then I assign the data accordingly.

112
00:05:09.210 --> 00:05:13.857
So I have this.orderHistoryList = data_embedded.orders.

113
00:05:18.700 --> 00:05:20.650
In step five, we're going to update the template text

114
00:05:20.650 --> 00:05:22.140
in the HTML page.

115
00:05:22.140 --> 00:05:23.300
So again, we're going to have this nice,

116
00:05:23.300 --> 00:05:26.543
little pretty table here for orders and list each order.

117
00:05:28.620 --> 00:05:30.840
So in our HTML component here, we'll set up a header,

118
00:05:30.840 --> 00:05:32.340
h3 for orders.

119
00:05:32.340 --> 00:05:34.410
We check to make sure the OrderHistory.length

120
00:05:34.410 --> 00:05:35.560
is greater than zero.

121
00:05:35.560 --> 00:05:37.700
Make sure we have things to display.

122
00:05:37.700 --> 00:05:39.650
Then I set up the table headers here

123
00:05:39.650 --> 00:05:41.596
for order tracking number, total price,

124
00:05:41.596 --> 00:05:43.353
total quantity and date.

125
00:05:45.520 --> 00:05:47.150
And now I simply need to loop over

126
00:05:47.150 --> 00:05:48.290
the orderHistoryList.

127
00:05:48.290 --> 00:05:50.930
So let tempOrderHistory of orderHistoryList

128
00:05:52.650 --> 00:05:54.340
and remember, orderHistoryList is defined

129
00:05:54.340 --> 00:05:56.430
as a field in our class

130
00:05:56.430 --> 00:05:58.980
and then we can loop over it and display that data.

131
00:06:05.336 --> 00:06:07.540
So I simply go through and set up TD's here

132
00:06:07.540 --> 00:06:09.300
for the order tracking number,

133
00:06:09.300 --> 00:06:12.330
total price, I pipe it through the currency pipe,

134
00:06:12.330 --> 00:06:14.860
total quantity and then also, date created

135
00:06:15.750 --> 00:06:16.690
and I just loop over that

136
00:06:16.690 --> 00:06:19.400
and do it for each one of those orderHistory items.

137
00:06:19.400 --> 00:06:20.900
And then notice here for date created,

138
00:06:20.900 --> 00:06:22.210
I make use of a date pipe,

139
00:06:22.210 --> 00:06:24.810
so I set the date format to medium.

140
00:06:24.810 --> 00:06:26.310
There are other date formats you can use,

141
00:06:26.310 --> 00:06:28.510
like short, medium, long, full.

142
00:06:28.510 --> 00:06:29.430
You can get the full list

143
00:06:29.430 --> 00:06:31.483
at the link I have here on the screen.

144
00:06:34.690 --> 00:06:36.230
All right, so we're almost done here.

145
00:06:36.230 --> 00:06:37.950
Step six of adding the orders button

146
00:06:37.950 --> 00:06:39.580
to the login-status component.

147
00:06:39.580 --> 00:06:41.500
So we've done a lot of this work before,

148
00:06:41.500 --> 00:06:43.150
we're simply going to add a new entry here

149
00:06:43.150 --> 00:06:44.830
for our orders button.

150
00:06:44.830 --> 00:06:46.710
So I'll make sure that the user's authenticated,

151
00:06:46.710 --> 00:06:48.720
I set up the router link to order-history

152
00:06:48.720 --> 00:06:50.810
and then the class and then the actual label

153
00:06:50.810 --> 00:06:51.890
for the button is orders

154
00:06:51.890 --> 00:06:55.450
and then we'll get the appropriate layout here in our UI

155
00:06:55.450 --> 00:06:56.843
for this setup.

156
00:07:00.940 --> 00:07:03.260
And then finally, finally, finally,

157
00:07:03.260 --> 00:07:05.880
step seven, we simply define a protected route

158
00:07:05.880 --> 00:07:07.560
for the order-history component.

159
00:07:07.560 --> 00:07:09.950
So we want to make sure that it's only available

160
00:07:09.950 --> 00:07:11.680
for people that are logged in.

161
00:07:11.680 --> 00:07:12.590
So we set up a path,

162
00:07:12.590 --> 00:07:15.240
order-history, component: OrderHistoryComponent

163
00:07:15.240 --> 00:07:17.490
and then canActivate: [OktaAuthGuard].

164
00:07:17.490 --> 00:07:18.680
So this is in place to make sure

165
00:07:18.680 --> 00:07:23.100
that the user doesn't try and access the route directly

166
00:07:23.100 --> 00:07:24.800
without being logged in.

167
00:07:24.800 --> 00:07:27.933
Okta will kick in and guard this given route.

168
00:07:29.600 --> 00:07:31.320
Alrighty, so this all looks pretty good.

169
00:07:31.320 --> 00:07:32.610
I'm getting really excited here,

170
00:07:32.610 --> 00:07:34.100
so let's go ahead and move into the next videos

171
00:07:34.100 --> 00:07:36.053
and let's start writing some code.

