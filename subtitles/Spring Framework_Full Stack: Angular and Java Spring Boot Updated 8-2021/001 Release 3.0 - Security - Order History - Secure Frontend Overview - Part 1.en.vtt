WEBVTT
1
00:00:01.100 --> 00:00:03.191
<v Instructor>In this video, we'll cover</v>

2
00:00:03.191 --> 00:00:04.240
the order history front end.

3
00:00:04.240 --> 00:00:06.653
We'll learn how to pass the access token.

4
00:00:10.110 --> 00:00:12.970
So with our order history, the REST API

5
00:00:12.970 --> 00:00:16.350
for slash API orders is secured on the back end.

6
00:00:16.350 --> 00:00:18.840
So now we need to update the Angular app

7
00:00:18.840 --> 00:00:21.130
to pass the access token.

8
00:00:21.130 --> 00:00:23.590
And we saw this in the previous video

9
00:00:23.590 --> 00:00:25.630
where we tried to get a list of orders

10
00:00:25.630 --> 00:00:27.500
and we simply got an empty list,

11
00:00:27.500 --> 00:00:29.900
or actually there was an error behind the scenes,

12
00:00:29.900 --> 00:00:31.640
so we were actually logged in,

13
00:00:31.640 --> 00:00:33.520
but our application was not passing

14
00:00:33.520 --> 00:00:36.320
our access token to the backend.

15
00:00:36.320 --> 00:00:40.040
As a result, the backend denied our request for data,

16
00:00:40.040 --> 00:00:42.440
because it's secured now and we have to provide

17
00:00:42.440 --> 00:00:45.713
proper access to get into that given backend.

18
00:00:49.210 --> 00:00:50.810
All right, so we know what we need to do, right?

19
00:00:50.810 --> 00:00:52.350
We need to send the access token.

20
00:00:52.350 --> 00:00:54.890
So our client's going to send the access token

21
00:00:54.890 --> 00:00:57.330
as an HTTP request header.

22
00:00:57.330 --> 00:00:59.490
All right, and we saw this diagram a little earlier.

23
00:00:59.490 --> 00:01:02.390
We're passing them this request, the request header body.

24
00:01:02.390 --> 00:01:03.830
So in the request header,

25
00:01:03.830 --> 00:01:05.920
we're going to add authorization bearer

26
00:01:05.920 --> 00:01:08.040
and give the actual value of our token.

27
00:01:08.040 --> 00:01:09.210
And we'll retrieve the value

28
00:01:09.210 --> 00:01:12.253
of the access token from our auth service.

29
00:01:16.070 --> 00:01:18.120
Now let's kind of look at this as far as the whole diagram.

30
00:01:18.120 --> 00:01:20.160
So we saw this sequence diagram before,

31
00:01:20.160 --> 00:01:21.750
but notice here near the bottom

32
00:01:21.750 --> 00:01:25.290
we have the section here for sending access token.

33
00:01:25.290 --> 00:01:27.440
Our client application, we need to update

34
00:01:27.440 --> 00:01:29.290
our client app or our Angular app

35
00:01:29.290 --> 00:01:31.390
to actually send that access token

36
00:01:31.390 --> 00:01:33.170
when we make a call to the backend,

37
00:01:33.170 --> 00:01:34.890
because right now in the backend,

38
00:01:34.890 --> 00:01:36.363
that API is secured.

39
00:01:39.010 --> 00:01:40.670
Okay, so Angular interceptors.

40
00:01:40.670 --> 00:01:43.540
So Angular provides a support for interceptors.

41
00:01:43.540 --> 00:01:46.550
So an interceptor can intercept the HTTP requests

42
00:01:46.550 --> 00:01:48.960
and responses, and you can use it to perform

43
00:01:48.960 --> 00:01:52.550
processing on the HTTP request responses.

44
00:01:52.550 --> 00:01:53.780
So here's a little diagram.

45
00:01:53.780 --> 00:01:56.470
So I have my Angular code over on the left hand side,

46
00:01:56.470 --> 00:01:58.140
my REST API on the backend.

47
00:01:58.140 --> 00:02:00.160
They're communicating left and right.

48
00:02:00.160 --> 00:02:01.780
Then we have this HTTP client that we use

49
00:02:01.780 --> 00:02:03.570
to handle the communication for us.

50
00:02:03.570 --> 00:02:05.070
And then we can add in an interceptor.

51
00:02:05.070 --> 00:02:07.940
So the interceptor can take our HP requests

52
00:02:07.940 --> 00:02:10.523
and perform some additional processing on it.

53
00:02:12.580 --> 00:02:15.350
And in fact, you can actually have multiple interceptors.

54
00:02:15.350 --> 00:02:17.570
So you can have zero to many interceptors.

55
00:02:17.570 --> 00:02:20.080
And so, depending on their functionality or whatever,

56
00:02:20.080 --> 00:02:22.270
each interceptor will be called in line

57
00:02:22.270 --> 00:02:25.463
before it actually makes it out to the REST API.

58
00:02:28.550 --> 00:02:31.660
And so you may wonder how we use Angular interceptors.

59
00:02:31.660 --> 00:02:33.700
Well, we'll use an interceptor to pass

60
00:02:33.700 --> 00:02:36.930
the access token in the HTTP request.

61
00:02:36.930 --> 00:02:39.270
So here's our client application, our Angular app.

62
00:02:39.270 --> 00:02:41.930
We're going to make a call to the spring boot backend.

63
00:02:41.930 --> 00:02:44.360
Our Angular app makes use of the HTTP client,

64
00:02:44.360 --> 00:02:45.660
and also the interceptor.

65
00:02:45.660 --> 00:02:48.400
So the interceptor will basically take that request

66
00:02:48.400 --> 00:02:51.980
and we'll use that to add the access token.

67
00:02:51.980 --> 00:02:54.190
So remember the idea of adding the access token

68
00:02:54.190 --> 00:02:56.140
is that we'll set up this request header,

69
00:02:56.140 --> 00:02:57.540
authorization bearer,

70
00:02:57.540 --> 00:03:00.483
and then we give the actual value of the access token.

71
00:03:04.100 --> 00:03:05.680
So here's our development process.

72
00:03:05.680 --> 00:03:08.120
So in our first step, we're going to create an interceptor.

73
00:03:08.120 --> 00:03:09.020
And then in the second step

74
00:03:09.020 --> 00:03:11.110
we're going to update the app module TS

75
00:03:11.110 --> 00:03:13.323
to reference our new interceptor.

76
00:03:16.340 --> 00:03:18.500
For creating the interceptor we'll actually define it

77
00:03:18.500 --> 00:03:20.043
as an Angular service.

78
00:03:21.550 --> 00:03:23.130
So we can generate this service

79
00:03:23.130 --> 00:03:24.890
by making use of the Angular CLI.

80
00:03:24.890 --> 00:03:29.613
So NG generate service, services slash auth interceptor.

