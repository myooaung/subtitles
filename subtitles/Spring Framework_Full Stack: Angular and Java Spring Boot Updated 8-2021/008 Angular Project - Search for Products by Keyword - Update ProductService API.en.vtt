WEBVTT
1
00:00:01.360 --> 00:00:03.710
<v Narrator>Okay so I'm getting really excited now</v>

2
00:00:03.710 --> 00:00:05.410
because we're at our final step,

3
00:00:05.410 --> 00:00:07.480
step six of updating the ProductService

4
00:00:07.480 --> 00:00:11.223
to call the URL on our Spring Boot application.

5
00:00:18.460 --> 00:00:19.810
Alrighty so let's zoom in here

6
00:00:19.810 --> 00:00:21.940
and let's let the IDE help us out a bit

7
00:00:21.940 --> 00:00:23.720
for solving this issue.

8
00:00:23.720 --> 00:00:25.340
We'll tell it to declare the method searchProducts

9
00:00:25.340 --> 00:00:29.223
and it'll actually create that in the productService.

10
00:00:32.660 --> 00:00:35.683
So if I swing over to the productService.ts,

11
00:00:40.790 --> 00:00:43.050
so as a check point this is where we're at, productService.

12
00:00:43.050 --> 00:00:45.380
We'll see there's a new method that was created for us

13
00:00:45.380 --> 00:00:48.280
on lines 12 through 14, searchProducts.

14
00:00:48.280 --> 00:00:50.233
Or actually, 13 and 15.

15
00:00:51.280 --> 00:00:52.620
Things are moving on us.

16
00:00:52.620 --> 00:00:54.980
Let's go ahead and cut this code,

17
00:00:54.980 --> 00:00:57.140
I want to simply move it down a little further

18
00:00:57.140 --> 00:00:59.170
in my application, just so things are kind of

19
00:00:59.170 --> 00:01:01.770
grouped together in a logical location.

20
00:01:01.770 --> 00:01:03.073
And I'll paste it here.

21
00:01:04.000 --> 00:01:06.070
So that's the new method that was created,

22
00:01:06.070 --> 00:01:07.830
but we need to do some work and clean it up.

23
00:01:07.830 --> 00:01:10.450
So let me copy the piece at the top

24
00:01:10.450 --> 00:01:13.790
for the Observable, an array of Products.

25
00:01:13.790 --> 00:01:16.463
So our searchProducts has that new return type.

26
00:01:17.620 --> 00:01:21.293
And I'll move in here and remove that placeholder code.

27
00:01:24.940 --> 00:01:29.560
I'll just kind of copy what I had up above for getProductList,

28
00:01:29.560 --> 00:01:33.000
and I'll paste it here for searchProducts.

29
00:01:33.000 --> 00:01:35.770
And I'll make some small modifications here

30
00:01:35.770 --> 00:01:36.720
for searchProducts.

31
00:01:41.100 --> 00:01:43.550
And in particular, I need to update the URL.

32
00:01:43.550 --> 00:01:46.840
So instead of building a URL based on category ID,

33
00:01:46.840 --> 00:01:49.690
I need to build a URL based on the keyword.

34
00:01:49.690 --> 00:01:54.410
Instead of findByCategoryId, I want to findByNameContaining

35
00:01:56.570 --> 00:01:59.850
and then I pass over name equals

36
00:01:59.850 --> 00:02:03.293
and whatever keyword that the user's searching for.

37
00:02:06.220 --> 00:02:07.830
All right, so we took care of that.

38
00:02:07.830 --> 00:02:11.230
That basically builds that new search URL

39
00:02:11.230 --> 00:02:14.920
and then the code on lines 34 to 36 is the basic call

40
00:02:14.920 --> 00:02:16.670
to that given back-end URL,

41
00:02:16.670 --> 00:02:18.883
or that given back-end REST API.

42
00:02:29.190 --> 00:02:30.440
Now, one thing that you may have noticed

43
00:02:30.440 --> 00:02:32.610
is that a lot of this code is similar.

44
00:02:32.610 --> 00:02:34.420
So we did a copy and paste of identical code.

45
00:02:34.420 --> 00:02:36.183
Let's refactor.

46
00:02:36.183 --> 00:02:38.040
Let's refactor this return statement,

47
00:02:38.040 --> 00:02:40.707
because this is basically the exact same thing, right?

48
00:02:40.707 --> 00:02:42.160
And so that's a code smell.

49
00:02:42.160 --> 00:02:43.940
Let's clean this up a bit.

50
00:02:43.940 --> 00:02:46.713
So I'll refactor this return section.

51
00:02:50.870 --> 00:02:53.573
And I'll extract it to a method in its class.

52
00:02:57.100 --> 00:03:00.140
So it extracted that method, and I can give it a new name.

53
00:03:00.140 --> 00:03:02.083
So I'll call it getProducts.

54
00:03:06.055 --> 00:03:08.740
Excellent, so line 34 calls this method

55
00:03:08.740 --> 00:03:10.700
that was just extracted,

56
00:03:10.700 --> 00:03:15.700
and it calls getProduct on lines 37 through 39.

57
00:03:15.890 --> 00:03:16.723
Okay, good.

58
00:03:16.723 --> 00:03:18.050
So the IDE helped us out here.

59
00:03:18.050 --> 00:03:21.070
But there's still one small thing that we need to do.

60
00:03:21.070 --> 00:03:23.490
If you scroll up a bit and look for

61
00:03:25.190 --> 00:03:28.020
getProductList, you'll notice that there's that other piece

62
00:03:28.020 --> 00:03:30.790
of identical code that wasn't automatically updated

63
00:03:30.790 --> 00:03:31.730
by the IDE.

64
00:03:31.730 --> 00:03:33.170
So let's remove that

65
00:03:33.170 --> 00:03:37.020
and simply copy the return statement here and paste it.

66
00:03:37.020 --> 00:03:41.290
Now we're A-OK, so getProductList uses return by getProducts

67
00:03:41.290 --> 00:03:43.760
and searchProducts uses the same one.

68
00:03:43.760 --> 00:03:45.730
Again, we've refactored the code,

69
00:03:45.730 --> 00:03:48.410
we've put common code into a separate method

70
00:03:48.410 --> 00:03:50.610
and then we have both of our other methods

71
00:03:50.610 --> 00:03:52.430
calling that given common code.

72
00:03:52.430 --> 00:03:56.503
So nice little refactoring exercise here with TypeScript.

73
00:03:58.870 --> 00:04:00.290
Let's open up a new terminal window

74
00:04:00.290 --> 00:04:01.790
and let's run our application.

75
00:04:21.114 --> 00:04:23.510
Alrighty, so our application is up and running.

76
00:04:23.510 --> 00:04:25.310
Let's go ahead and perform a search.

77
00:04:27.160 --> 00:04:28.360
We'll search for Python.

78
00:04:32.120 --> 00:04:35.330
And success, so now we've found two books

79
00:04:35.330 --> 00:04:37.970
with Python in the name, or the title.

80
00:04:37.970 --> 00:04:40.040
This is great, I like it.

81
00:04:40.040 --> 00:04:41.483
Let's do a search on data.

82
00:04:42.660 --> 00:04:44.740
So we get the books here with data

83
00:04:44.740 --> 00:04:47.030
and the title also containing.

84
00:04:47.030 --> 00:04:47.913
Good, I like it.

85
00:04:52.160 --> 00:04:54.563
Do another search here for beginners, cool.

86
00:04:57.930 --> 00:04:59.000
Guru in.

87
00:04:59.000 --> 00:05:00.240
Great, so I can become a guru

88
00:05:00.240 --> 00:05:02.750
in JavaScript, React, and Java?

89
00:05:02.750 --> 00:05:03.733
Nice.

90
00:05:04.680 --> 00:05:06.050
I'm just having fun here.

91
00:05:06.050 --> 00:05:08.530
We'll search for some other items here, like Cherokee.

92
00:05:08.530 --> 00:05:12.083
So these are mugs and mousepads with the name of Cherokee.

93
00:05:14.850 --> 00:05:16.220
And finally we can search for,

94
00:05:16.220 --> 00:05:18.960
I think I have a luggage tag out there called Blooming.

95
00:05:18.960 --> 00:05:19.833
Yep, there we go.

96
00:05:21.650 --> 00:05:23.660
So this is really good, I'm happy.

97
00:05:23.660 --> 00:05:27.400
We were successful in implementing a search using keywords.

98
00:05:27.400 --> 00:05:28.233
Good job!

