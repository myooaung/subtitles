WEBVTT
1
00:00:01.150 --> 00:00:02.680
<v Instructor>So now what we'll do is we'll go through</v>

2
00:00:02.680 --> 00:00:05.283
and we'll generate our login component.

3
00:00:11.490 --> 00:00:13.493
So back in my terminal window here,

4
00:00:14.950 --> 00:00:16.980
I'll make use of that NG generate

5
00:00:18.980 --> 00:00:22.463
and I'll give component components/login.

6
00:00:30.240 --> 00:00:32.470
Then I'll just move over here to this source directory

7
00:00:32.470 --> 00:00:34.670
just to verify that these new files were created

8
00:00:34.670 --> 00:00:37.520
so components, and then we have this new login component.

9
00:00:41.406 --> 00:00:42.239
And what we'll do

10
00:00:42.239 --> 00:00:44.863
is we'll start with this login.component.html.

11
00:00:53.660 --> 00:00:56.600
And so basically in this file here I'm going to clear this out

12
00:00:56.600 --> 00:00:58.720
and I'll set up a div container

13
00:00:58.720 --> 00:01:01.163
for the Okta Sign-In widget.

14
00:01:21.540 --> 00:01:23.000
So I'll save this one div here

15
00:01:23.000 --> 00:01:24.933
and I'll have Okta Sign-In widget.

16
00:01:37.380 --> 00:01:39.630
And then what I'll do is I'll move over and open up

17
00:01:39.630 --> 00:01:41.550
the login.component.tsfile

18
00:01:42.676 --> 00:01:44.463
so I can start adding some TypeScript code.

19
00:01:52.519 --> 00:01:54.800
So one thing I need to do up top is to an import on that

20
00:01:54.800 --> 00:01:57.543
myApp Config that I created a little bit earlier.

21
00:02:03.550 --> 00:02:06.070
So I'll have this import myApp Config from

22
00:02:06.070 --> 00:02:09.220
and then use the relative directories here ../..

23
00:02:09.220 --> 00:02:11.130
to kind of go up to directories

24
00:02:11.130 --> 00:02:13.883
over to config/my-app-config.

25
00:02:17.780 --> 00:02:20.230
And then I'll set up a reference to Okta Sign-In.

26
00:02:31.480 --> 00:02:33.810
And in my constructor here I'm going to inject

27
00:02:33.810 --> 00:02:35.830
the Okta Auth service

28
00:02:42.180 --> 00:02:43.853
and then I'll fix the imports.

29
00:02:53.870 --> 00:02:57.290
And what I'll do is I'll create a new Okta Sign-In

30
00:02:57.290 --> 00:03:00.770
entity here and I'll pass on some parameters to it

31
00:03:09.280 --> 00:03:11.210
and we'll have to make a reference here

32
00:03:11.210 --> 00:03:13.300
for this Okta sign in up top,

33
00:03:13.300 --> 00:03:14.410
so I'll do an import

34
00:03:22.613 --> 00:03:24.440
* as Okta sign in

35
00:03:27.080 --> 00:03:31.180
and then you have from Okta/Okta-signin-widget.

36
00:03:35.280 --> 00:03:38.610
So that'll give me access to the entities there

37
00:03:38.610 --> 00:03:39.653
in that module.

38
00:03:45.140 --> 00:03:46.810
All right, so that should take care of that

39
00:03:46.810 --> 00:03:49.410
issue we had earlier so now we have Okta sign in

40
00:03:52.550 --> 00:03:55.000
and so I'll give our parameter here for the logo.

41
00:03:58.580 --> 00:04:01.430
So this is assets/images/logo.png

42
00:04:01.430 --> 00:04:03.240
so that's our love to shop logo,

43
00:04:03.240 --> 00:04:05.883
it could be any logo that you want to provide.

44
00:04:07.281 --> 00:04:08.131
For the base URL,

45
00:04:13.917 --> 00:04:16.834
I'll make use of myApp config oidc,

46
00:04:19.701 --> 00:04:20.940
the issuer.split

47
00:04:25.871 --> 00:04:27.897
/oauth, so basically here, I'm just saying,

48
00:04:27.897 --> 00:04:31.417
"Hey, give me everything in the URL before oauth2."

49
00:04:35.246 --> 00:04:36.257
Then for the client ID,

50
00:04:36.257 --> 00:04:37.090
I simply just use the client ID as is,

51
00:04:38.100 --> 00:04:40.013
so myAppConfig.oidc.clientID.

52
00:04:47.750 --> 00:04:50.480
Oh yeah, I need to fix and typo up here,

53
00:04:50.480 --> 00:04:52.750
I need to put all this inside of a curly brace

54
00:04:52.750 --> 00:04:53.860
'cause this is on JSON

55
00:04:53.860 --> 00:04:56.570
so, make sure you have an open curly up top

56
00:04:56.570 --> 00:04:58.113
and then another close curly.

57
00:05:05.200 --> 00:05:08.100
And I'm just going to put this on that line here, okay, good.

58
00:05:14.160 --> 00:05:15.660
Then we have the redirect URI.

59
00:05:18.160 --> 00:05:21.380
So this is basically the call back and we can simply use

60
00:05:21.380 --> 00:05:23.563
what we have from our configuration.

61
00:05:24.430 --> 00:05:27.650
So oidc.redirectUri so a lot of this stuff is similar

62
00:05:27.650 --> 00:05:29.653
to the configs that we set up earlier.

63
00:05:31.410 --> 00:05:33.453
Now we'll specify some auth params.

64
00:05:39.126 --> 00:05:43.043
So I'll make use of the PKCE, set that to true,

65
00:05:45.378 --> 00:05:47.350
then for issuer, again, we just get a reference here

66
00:05:47.350 --> 00:05:49.600
from our config.issuer

67
00:05:51.950 --> 00:05:55.360
and also the scopes and again,

68
00:05:55.360 --> 00:05:57.610
simply grab that information from our config.

69
00:06:04.975 --> 00:06:06.320
All right, so that's the basic setup here

70
00:06:06.320 --> 00:06:08.890
that we need to create as we initialize

71
00:06:08.890 --> 00:06:10.683
this Okta Sign-In widget.

72
00:06:12.110 --> 00:06:13.760
Now the one thing here, the PKCE,

73
00:06:13.760 --> 00:06:16.370
remember that's the proof key for code exchange.

74
00:06:16.370 --> 00:06:18.640
We saw that in some of your earlier slides

75
00:06:18.640 --> 00:06:20.590
basically saying here, we're going to make use

76
00:06:20.590 --> 00:06:22.910
of dynamic secrets for passing the information

77
00:06:22.910 --> 00:06:25.590
between our app and the authorization server

78
00:06:25.590 --> 00:06:26.780
and that's the recommended approach

79
00:06:26.780 --> 00:06:28.580
for integrating our application

80
00:06:28.580 --> 00:06:30.890
with the Okta authorization server.

81
00:06:30.890 --> 00:06:31.923
Okay, good job.

