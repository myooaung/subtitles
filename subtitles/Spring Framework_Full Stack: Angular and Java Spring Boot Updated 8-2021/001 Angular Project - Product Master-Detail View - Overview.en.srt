1
00:00:01,140 --> 00:00:01,973
<v Instructor>In this video</v>

2
00:00:01,973 --> 00:00:04,843
we'll cover the Product Master-Detail View.

3
00:00:07,320 --> 00:00:08,940
So with Master-Detail View we have the

4
00:00:08,940 --> 00:00:10,690
master views of all the products

5
00:00:10,690 --> 00:00:12,380
and then when a user clicks on the product

6
00:00:12,380 --> 00:00:14,770
we want to show the actual details.

7
00:00:14,770 --> 00:00:16,500
So the application will show the details

8
00:00:16,500 --> 00:00:18,040
for a selected products.

9
00:00:18,040 --> 00:00:20,960
So we'll have a product image, the title, price,

10
00:00:20,960 --> 00:00:23,883
cart buttons, description, and so on.

11
00:00:26,450 --> 00:00:28,970
Alrighty so here's our development process.

12
00:00:28,970 --> 00:00:30,420
So the first thing we'll do is we'll create

13
00:00:30,420 --> 00:00:32,610
a new component for product details,

14
00:00:32,610 --> 00:00:36,150
then we'll add a new Angular route for product details,

15
00:00:36,150 --> 00:00:37,570
next we'll add router links

16
00:00:37,570 --> 00:00:40,330
to the product-list-grid HTML page,

17
00:00:40,330 --> 00:00:42,400
and then we'll enhance the ProductDetailsComponent

18
00:00:42,400 --> 00:00:45,830
to retrieve the product from the ProductService.

19
00:00:45,830 --> 00:00:48,520
Then we'll update the ProductService to call the URL

20
00:00:48,520 --> 00:00:50,520
on the Spring Boot app.

21
00:00:50,520 --> 00:00:52,870
And then finally we'll update the HTML page

22
00:00:52,870 --> 00:00:54,830
for the ProductDetailsComponent

23
00:00:54,830 --> 00:00:57,113
to display those product details.

24
00:01:00,270 --> 00:01:01,460
All right step one of creating

25
00:01:01,460 --> 00:01:03,620
the new component for product details.

26
00:01:03,620 --> 00:01:04,730
And this is really easy, right?

27
00:01:04,730 --> 00:01:07,070
We simply use the ng generate component

28
00:01:07,070 --> 00:01:09,220
and then we give components/ProductDetails.

29
00:01:13,240 --> 00:01:14,730
And then in step two we'll add

30
00:01:14,730 --> 00:01:17,180
a new Angular route for product details

31
00:01:17,180 --> 00:01:20,120
so in our add mod.ts files we'll add a new entry

32
00:01:20,120 --> 00:01:23,740
here for the route so we have path: 'products/:id'

33
00:01:23,740 --> 00:01:25,260
and then the actual component.

34
00:01:25,260 --> 00:01:27,150
So the :id is the parameter

35
00:01:28,030 --> 00:01:30,580
and then the component is the ProductDetailsComponent.

36
00:01:30,580 --> 00:01:32,880
So this is the actual component that we created

37
00:01:32,880 --> 00:01:34,393
on the previous slide.

38
00:01:39,180 --> 00:01:40,960
In step three we're going to add the router links

39
00:01:40,960 --> 00:01:43,430
to the product-list-grid HTML.

40
00:01:43,430 --> 00:01:45,320
So here's our main page here

41
00:01:45,320 --> 00:01:48,390
and so basically when the user clicks the product

42
00:01:48,390 --> 00:01:49,690
then we want to show the details.

43
00:01:49,690 --> 00:01:51,710
So when you add a link on the product image

44
00:01:51,710 --> 00:01:54,053
and also add a link on the product name.

45
00:01:56,920 --> 00:01:58,710
All right so a bit more here on the step three,

46
00:01:58,710 --> 00:02:01,220
the actual coding, so product-list-grid ocmponent.HTML

47
00:02:02,595 --> 00:02:04,580
on our section of looping over the collection of products

48
00:02:04,580 --> 00:02:06,680
we're going to add a link on the product image

49
00:02:06,680 --> 00:02:08,683
using our anchor router link.

50
00:02:11,240 --> 00:02:12,600
And then we'll do a similar thing here

51
00:02:12,600 --> 00:02:14,763
for adding a link on the product name.

52
00:02:16,840 --> 00:02:18,590
And so notice here we're actually passing

53
00:02:18,590 --> 00:02:19,970
over the parameter value here

54
00:02:19,970 --> 00:02:22,990
so we pass over the tempProduct.id

55
00:02:22,990 --> 00:02:27,523
for the image and also tempProduct.id for the given name.

56
00:02:31,270 --> 00:02:32,560
Then in step four we're going to enhance

57
00:02:32,560 --> 00:02:33,930
the ProductDetailsComponent

58
00:02:33,930 --> 00:02:36,790
to retrieve the product from ProductService.

59
00:02:36,790 --> 00:02:39,420
So the first thing we do is we get the id parameter string,

60
00:02:39,420 --> 00:02:42,120
we do that by saying paramMap.get('id').

61
00:02:42,120 --> 00:02:45,060
And remember we set up this given parameter name

62
00:02:45,060 --> 00:02:48,673
based on the app module ts when we set up the given route.

63
00:02:50,300 --> 00:02:51,520
And then we do the normal stuff here

64
00:02:51,520 --> 00:02:54,270
converting the string to a number using a plus symbol.

65
00:02:54,270 --> 00:02:56,100
So finally on the left hand side

66
00:02:56,100 --> 00:02:59,150
we'll have const theProductId which is a number

67
00:02:59,150 --> 00:03:00,873
as assigned to this given value.

68
00:03:03,440 --> 00:03:04,560
And then we actually retrieve

69
00:03:04,560 --> 00:03:06,953
the product from the ProductService.

70
00:03:08,765 --> 00:03:10,890
So this getProduct is a new method

71
00:03:10,890 --> 00:03:12,950
that we'll actually create in the ProductService

72
00:03:12,950 --> 00:03:15,013
for retrieving a given product.

73
00:03:18,370 --> 00:03:20,530
Alrighty step five of updating the product service

74
00:03:20,530 --> 00:03:22,590
to call the URL on the Spring Boot app.

75
00:03:22,590 --> 00:03:24,370
So here's our ProductService its.

76
00:03:24,370 --> 00:03:26,480
Here's that new method getProduct.

77
00:03:28,210 --> 00:03:30,020
So in this method we need to build the URL

78
00:03:30,020 --> 00:03:32,430
based on the product id so we make use of that

79
00:03:32,430 --> 00:03:35,520
localhost.8080/api/products/$(theProductId).

80
00:03:38,283 --> 00:03:39,960
And then we make a call to the REST API

81
00:03:39,960 --> 00:03:41,093
using the product URL.

82
00:03:42,340 --> 00:03:44,380
This returns an observable and in this case

83
00:03:44,380 --> 00:03:46,680
the JSON Data return can be converted directly

84
00:03:46,680 --> 00:03:48,130
to a product object.

85
00:03:48,130 --> 00:03:50,820
So here there's no need to unwrap the JSON

86
00:03:50,820 --> 00:03:54,000
from Spring Data REST, there's no _embedded entry

87
00:03:54,000 --> 00:03:56,250
and we'll see more of that on the next slide.

88
00:03:59,200 --> 00:04:01,690
So mapping the JSON to product.

89
00:04:01,690 --> 00:04:04,070
So here's the URL for retrieving a product id

90
00:04:04,070 --> 00:04:09,070
for example two, we give localhost.8080/api/products/2.

91
00:04:09,600 --> 00:04:11,230
Also give us this JSON

92
00:04:11,230 --> 00:04:14,090
and note this is a built-in feature of Spring Data REST.

93
00:04:14,090 --> 00:04:17,340
There's no additional coding or configuration required,

94
00:04:17,340 --> 00:04:18,773
you get this out of the box.

95
00:04:21,200 --> 00:04:22,470
And over on the right hand side

96
00:04:22,470 --> 00:04:24,830
we have our product.ts class.

97
00:04:24,830 --> 00:04:27,590
So this JSON Data can be converted directly

98
00:04:27,590 --> 00:04:30,560
to the Product object so the JSON properties

99
00:04:30,560 --> 00:04:34,760
map directly to properties in the Product class.

100
00:04:34,760 --> 00:04:36,270
So here's our JSON,

101
00:04:36,270 --> 00:04:38,660
note the items here that's highlighted.

102
00:04:38,660 --> 00:04:41,550
Then this converts over to the actual product

103
00:04:41,550 --> 00:04:46,340
and again matching directly on those given property names.

104
00:04:46,340 --> 00:04:48,440
So note here there's no underscore embedded,

105
00:04:48,440 --> 00:04:50,840
there's no additional interface or mapping that we need.

106
00:04:50,840 --> 00:04:52,773
We can kind of go one to one here.

107
00:04:55,800 --> 00:04:58,440
Alrighty step six of updating the HTML page

108
00:04:58,440 --> 00:05:01,710
for ProductDetailsComponent to display the product details.

109
00:05:01,710 --> 00:05:04,060
So in our details page we want to have the image,

110
00:05:04,060 --> 00:05:05,500
we want to have the name of the product,

111
00:05:05,500 --> 00:05:07,680
the price, cart button,

112
00:05:07,680 --> 00:05:10,270
and also the actual description of the product,

113
00:05:10,270 --> 00:05:12,630
and also a navigation link to go back

114
00:05:12,630 --> 00:05:14,313
to the main product list.

115
00:05:18,060 --> 00:05:19,420
So let's come look at the coding here

116
00:05:19,420 --> 00:05:22,350
and this is mainly just an HTML exercise.

117
00:05:22,350 --> 00:05:25,230
So here's our ProductDetailsComponent.HTML.

118
00:05:25,230 --> 00:05:28,890
So we have the image source equals product.image URL

119
00:05:28,890 --> 00:05:30,620
so it'll also give us the image.

120
00:05:30,620 --> 00:05:32,850
We have information over here for the product name,

121
00:05:32,850 --> 00:05:35,500
the price, the cart button.

122
00:05:35,500 --> 00:05:37,579
Then we have the actual description

123
00:05:37,579 --> 00:05:41,320
and then finally we have a link back to the product list

124
00:05:41,320 --> 00:05:42,873
using a router link.

125
00:05:44,270 --> 00:05:46,090
And that's basically it for the coding on

126
00:05:46,090 --> 00:05:49,650
the product details HTML page.

127
00:05:49,650 --> 00:05:51,130
Okay, so this looks great.

128
00:05:51,130 --> 00:05:52,920
Let' go ahead and move into our IDE

129
00:05:52,920 --> 00:05:54,570
and let's start writing the code.

