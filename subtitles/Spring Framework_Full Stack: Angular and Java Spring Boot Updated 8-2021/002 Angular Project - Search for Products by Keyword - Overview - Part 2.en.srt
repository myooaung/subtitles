1
00:00:00,921 --> 00:00:04,933
<v ->Alrighty, let's have a quick discussion on Event Binding.</v>

2
00:00:08,110 --> 00:00:10,620
In our application, in order to search for products,

3
00:00:10,620 --> 00:00:13,080
the user's going to enter the actual search information

4
00:00:13,080 --> 00:00:16,090
in the text field and then they'll hit the search button.

5
00:00:16,090 --> 00:00:18,510
So when the user clicks the search button,

6
00:00:18,510 --> 00:00:20,880
we need to be able to read that text field value

7
00:00:20,880 --> 00:00:22,750
and perform some operations on it.

8
00:00:22,750 --> 00:00:25,360
So for example, we can take that text data and then

9
00:00:25,360 --> 00:00:28,800
pass it over to our rest API for performing the search.

10
00:00:28,800 --> 00:00:30,920
But we need to learn about the Angular techniques

11
00:00:30,920 --> 00:00:32,703
for adding this functionality.

12
00:00:35,840 --> 00:00:38,640
In Angular, you can listen for events with "event binding".

13
00:00:38,640 --> 00:00:40,160
So in other languages, this is

14
00:00:40,160 --> 00:00:41,780
also known as "event handling".

15
00:00:41,780 --> 00:00:43,720
So here's an example, we have a button,

16
00:00:43,720 --> 00:00:45,460
we want to listen for a "click" event.

17
00:00:45,460 --> 00:00:46,630
So when a user clicks something

18
00:00:46,630 --> 00:00:49,660
they'll call our event handler "doMyCustomWork".

19
00:00:49,660 --> 00:00:52,860
So this is basically a method in our Angular component code.

20
00:00:52,860 --> 00:00:55,630
This can actually be any method name that we define.

21
00:00:55,630 --> 00:00:58,117
In our examples, we'll call it "doMyCustomWork".

22
00:01:00,700 --> 00:01:02,620
Let's expand on this example further.

23
00:01:02,620 --> 00:01:05,520
So we have our button, we're listening for the click event.

24
00:01:05,520 --> 00:01:07,840
We'll call a method in our Angular component code.

25
00:01:07,840 --> 00:01:09,000
And so when our Angular code--

26
00:01:09,000 --> 00:01:11,330
There's the method "doMyCustomWork".

27
00:01:11,330 --> 00:01:13,690
So when they click on a button, it'll call argument method.

28
00:01:13,690 --> 00:01:16,477
In this example, we simple do a console.log saying,

29
00:01:16,477 --> 00:01:18,383
"Hey! You pushed my button!".

30
00:01:18,383 --> 00:01:20,063
Don't push my buttons!

31
00:01:22,690 --> 00:01:25,420
Alrighty so looking at Reading User Input.

32
00:01:25,420 --> 00:01:28,540
So we'll have this input text field and then we'll listen

33
00:01:28,540 --> 00:01:31,170
for the enter key so when the user hits enter key,

34
00:01:31,170 --> 00:01:33,910
we want to read that text field and do something with it.

35
00:01:33,910 --> 00:01:36,580
So up top we make use of the hashtag symbol.

36
00:01:36,580 --> 00:01:38,880
That's a template reference variable for "myInput".

37
00:01:38,880 --> 00:01:41,653
This will give us access to the element.

38
00:01:42,490 --> 00:01:43,480
And then in our component,

39
00:01:43,480 --> 00:01:45,430
we'll have our method "doMyCustomWork".

40
00:01:46,620 --> 00:01:50,410
And so "myInput.value", that gives you the actual text

41
00:01:50,410 --> 00:01:54,330
the user typed in so then we can pass that to our

42
00:01:54,330 --> 00:01:56,960
custom method as a string and then we can

43
00:01:56,960 --> 00:01:59,400
display it saying hey, this is your data.

44
00:01:59,400 --> 00:02:01,960
And then we use whatever that given parameter is.

45
00:02:01,960 --> 00:02:05,743
So that's how we can read user input with Angular.

46
00:02:07,670 --> 00:02:10,440
And extending this example, we can add a search button.

47
00:02:10,440 --> 00:02:13,200
So again, we'll simply listen for a "click" event.

48
00:02:13,200 --> 00:02:16,200
And then we'll call our same method here "doMyCustomWork".

49
00:02:16,200 --> 00:02:19,200
And we'll pass in the text that the user typed in info.

50
00:02:19,200 --> 00:02:21,840
So basically our example works if the user hits the enter

51
00:02:21,840 --> 00:02:24,930
key for searching or if the user hits the search button.

52
00:02:24,930 --> 00:02:29,303
So basically both of those events will call the same method.

53
00:02:31,820 --> 00:02:34,190
Now you may wonder about what other events are out there.

54
00:02:34,190 --> 00:02:35,750
Well there's plenty more.

55
00:02:35,750 --> 00:02:38,560
There's a focus event so an element received focus.

56
00:02:38,560 --> 00:02:40,800
Blur: an element has lost focus.

57
00:02:40,800 --> 00:02:44,200
There's also the keyup event so any key is released.

58
00:02:44,200 --> 00:02:46,470
So if you want to handle it for a specific key

59
00:02:46,470 --> 00:02:49,440
like the enter key, then you make use of "keyup.enter".

60
00:02:49,440 --> 00:02:51,990
And we saw an example of that in our previous code.

61
00:02:52,920 --> 00:02:56,610
There's also the keydown event when any key is pressed.

62
00:02:56,610 --> 00:02:58,240
And there's also the double click event

63
00:02:58,240 --> 00:03:00,763
so the mouse is clicked twice on a given element.

64
00:03:02,100 --> 00:03:03,590
And there's more out there so you can

65
00:03:03,590 --> 00:03:05,143
go to the link here on the slide to get a list of

66
00:03:05,143 --> 00:03:08,543
all of the events that you can handle and make use of.

67
00:03:10,010 --> 00:03:12,760
Okay this was a quick discussion on Event Binding.

68
00:03:12,760 --> 00:03:15,110
In the next section we'll actually apply it to our

69
00:03:15,110 --> 00:03:17,910
eCommerce application and see how we can use this for

70
00:03:17,910 --> 00:03:20,133
searching for products by keyword.

