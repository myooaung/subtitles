1
00:00:01,510 --> 00:00:02,350
<v Instructor>Alrighty, so let's go ahead</v>

2
00:00:02,350 --> 00:00:05,810
and move into our IDE and let's write some code.

3
00:00:05,810 --> 00:00:07,280
So I'll move in here and the first thing

4
00:00:07,280 --> 00:00:08,883
I'll do is create a new folder.

5
00:00:11,670 --> 00:00:13,773
And I'll call it 05-inheritance.

6
00:00:19,490 --> 00:00:23,330
So let's create a new file, Shape.ts

7
00:00:23,330 --> 00:00:25,433
and so this will be for our Shape class.

8
00:00:30,290 --> 00:00:32,063
So I'll export class Shape.

9
00:00:35,860 --> 00:00:38,633
I'll define some private properties for _x and_y.

10
00:00:54,160 --> 00:00:57,580
So I'll generate the get/set accessors for x

11
00:01:04,610 --> 00:01:07,343
and I'll do a similar thing here for y.

12
00:01:09,600 --> 00:01:12,430
Okay great, so I have these get/set accessors

13
00:01:12,430 --> 00:01:13,800
setup for me automatically.

14
00:01:13,800 --> 00:01:16,460
And I'll just kind of move this private y

15
00:01:16,460 --> 00:01:19,070
and move it up to line four

16
00:01:19,070 --> 00:01:21,860
just so I have my properties defined in the same location

17
00:01:21,860 --> 00:01:23,910
and then my accessors down at the bottom.

18
00:01:28,620 --> 00:01:31,020
And now I'll go ahead and create my constructor.

19
00:01:35,560 --> 00:01:38,440
And I'll actually make use of parameter properties,

20
00:01:38,440 --> 00:01:40,640
so I'll just kind of cut the private _x

21
00:01:42,420 --> 00:01:44,820
and I'll do a similar thing here for private _y.

22
00:01:45,720 --> 00:01:48,210
Again, we're using that little shortcut here

23
00:01:48,210 --> 00:01:50,500
where we make use of the parameter properties

24
00:01:50,500 --> 00:01:53,140
where they'll actually define and assign

25
00:01:53,140 --> 00:01:56,150
at the same time without having to do any boiler plate code

26
00:01:56,150 --> 00:01:57,950
so those are parameter properties there

27
00:01:57,950 --> 00:01:59,150
so that's in good shape.

28
00:02:01,590 --> 00:02:03,350
And then I'll just kind of move down here to the bottom

29
00:02:03,350 --> 00:02:05,320
and I'll write the getInfo method

30
00:02:12,075 --> 00:02:17,075
and I just return the x/y location for this method.

31
00:02:29,770 --> 00:02:31,010
Alrighty, so this looks pretty good.

32
00:02:31,010 --> 00:02:33,210
So right now I don't have a public on the method

33
00:02:33,210 --> 00:02:36,463
but remember in TypeScript everything is public by default.

34
00:02:43,441 --> 00:02:47,358
Okay, so we have our Shape class taken care of.

35
00:02:48,670 --> 00:02:51,233
So let's go ahead and create a new file for Circle.

36
00:03:05,890 --> 00:03:09,437
So I'll have export class Circle extends Shape

37
00:03:12,690 --> 00:03:14,810
'cause we're using inheritance.

38
00:03:14,810 --> 00:03:16,460
And so there's an error message here

39
00:03:16,460 --> 00:03:18,790
so it says it doesn't know about Shape.

40
00:03:18,790 --> 00:03:21,230
Okay, that means we have to import it.

41
00:03:21,230 --> 00:03:22,970
So I'll just manually import it.

42
00:03:22,970 --> 00:03:25,480
There are some quick fixes that you can use

43
00:03:25,480 --> 00:03:28,360
to automatically import it, but I'll cover that later,

44
00:03:28,360 --> 00:03:30,323
so for now we'll just manual import.

45
00:03:32,410 --> 00:03:33,860
All right, so that's taken care of

46
00:03:33,860 --> 00:03:36,900
let's go ahead and define our property for radius

47
00:03:36,900 --> 00:03:39,433
and then we'll generate the get and set accessors.

48
00:03:54,220 --> 00:03:56,420
Then I'll go ahead and define my constructor

49
00:04:07,080 --> 00:04:11,270
and I'll setup the two parameters for x and y.

50
00:04:11,270 --> 00:04:13,180
Those are regular parameters

51
00:04:13,180 --> 00:04:16,290
and then I also do a cut/paste over here

52
00:04:16,290 --> 00:04:19,020
for the parameter property for radius

53
00:04:19,020 --> 00:04:20,833
and do a little cleanup up above.

54
00:04:22,760 --> 00:04:24,693
Okay great, so remember that these are regular parameters,

55
00:04:24,693 --> 00:04:26,430
theX and theY.

56
00:04:26,430 --> 00:04:30,263
And then private _radius, that's a parameter property.

57
00:04:33,610 --> 00:04:34,867
Now there's still a red x here

58
00:04:34,867 --> 00:04:36,510
and so let's kind of hover it

59
00:04:36,510 --> 00:04:38,303
and see exactly what the issue is.

60
00:04:39,140 --> 00:04:41,280
So it says constructors for derived classes

61
00:04:41,280 --> 00:04:43,100
must contain a super call.

62
00:04:43,100 --> 00:04:44,720
Okay, that's fair enough.

63
00:04:44,720 --> 00:04:47,520
So here we'll say super and we'll pass in theX and theY,

64
00:04:49,440 --> 00:04:52,693
so we're making a super class call as required.

65
00:04:55,180 --> 00:04:57,020
All right, now the next thing we want to do here

66
00:04:57,020 --> 00:05:00,210
is actually override the getInfo method

67
00:05:00,210 --> 00:05:02,923
and give our own implementation of that method.

68
00:05:07,070 --> 00:05:08,930
So here I give a return.

69
00:05:08,930 --> 00:05:11,180
I'll call super.getInfo and make a call

70
00:05:11,180 --> 00:05:14,920
to the super class method and then also I'll give

71
00:05:14,920 --> 00:05:19,323
my specific information radius equals and this._radius.

72
00:05:25,984 --> 00:05:27,410
Okay great, so that's the coding here.

73
00:05:27,410 --> 00:05:30,380
We kind of stepped back and this is the main coding here

74
00:05:30,380 --> 00:05:33,003
for our Circle class, good job.

