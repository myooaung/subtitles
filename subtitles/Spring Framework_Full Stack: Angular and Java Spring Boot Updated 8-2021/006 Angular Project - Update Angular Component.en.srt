1
00:00:00,783 --> 00:00:01,616
<v Chad>All righty,</v>

2
00:00:01,616 --> 00:00:03,180
so we're making some really good progress here.

3
00:00:03,180 --> 00:00:05,210
So in this video we're going to focus on step five

4
00:00:05,210 --> 00:00:06,750
of updating the Angular component

5
00:00:06,750 --> 00:00:10,173
and step six of displaying the data in an HTML page.

6
00:00:19,736 --> 00:00:20,800
All righty, so let's go ahead

7
00:00:20,800 --> 00:00:23,973
and move over to our coding here for our Angular component.

8
00:00:31,540 --> 00:00:34,733
So this is our product-list.component.ts.

9
00:00:40,147 --> 00:00:43,230
And one thing I'd like to do is inject a dependency here.

10
00:00:43,230 --> 00:00:45,080
So we're going to need our ProductService,

11
00:00:45,080 --> 00:00:47,620
so we're going to inject the Product Service

12
00:00:47,620 --> 00:00:50,213
into this productList component.

13
00:01:05,589 --> 00:01:10,240
All righty, so we have that dependency injected here.

14
00:01:10,240 --> 00:01:12,520
And then I'll set up a property here for products.

15
00:01:12,520 --> 00:01:14,343
It's an array of Product.

16
00:01:24,140 --> 00:01:26,060
Once an Angular component is initialized

17
00:01:26,060 --> 00:01:28,430
they'll call the ngOnInIt method.

18
00:01:28,430 --> 00:01:30,600
This is similar to our PostConstruct.

19
00:01:30,600 --> 00:01:32,320
So this is where I'll actually add the hook

20
00:01:32,320 --> 00:01:35,353
to call my listProducts method.

21
00:01:38,940 --> 00:01:40,560
And I haven't defined the listProducts method,

22
00:01:40,560 --> 00:01:42,010
I'll actually define it here.

23
00:01:49,571 --> 00:01:51,880
So instead of my listProducts method I'll make use

24
00:01:51,880 --> 00:01:54,463
of my productService and I'll call getProductList,

25
00:01:57,340 --> 00:02:00,083
and I'll actually subscribe to that data.

26
00:02:01,578 --> 00:02:04,278
And the method is actually invoked once you subscribe.

27
00:02:05,460 --> 00:02:08,880
This method will execute in an asynchronous fashion.

28
00:02:08,880 --> 00:02:10,750
And then when the data's returned

29
00:02:10,750 --> 00:02:13,623
then we can assign it to our own property.

30
00:02:14,480 --> 00:02:17,793
So here I'll simply assign the results to our product array.

31
00:02:20,210 --> 00:02:21,050
And that's basically it

32
00:02:21,050 --> 00:02:24,813
for integrating our service with our Angular component.

33
00:02:29,120 --> 00:02:30,590
Now I need to do one more thing here

34
00:02:30,590 --> 00:02:33,730
in step six of displaying the data in an HTML page.

35
00:02:33,730 --> 00:02:37,213
So let's go ahead and open up product-list.component.html.

36
00:02:41,020 --> 00:02:42,410
And so right now it's very simple,

37
00:02:42,410 --> 00:02:44,020
it just says product-list works.

38
00:02:44,020 --> 00:02:45,290
Let's go ahead and remove all that,

39
00:02:45,290 --> 00:02:47,143
and let's add our own custom code.

40
00:02:49,750 --> 00:02:50,770
So we'd like to just simply

41
00:02:50,770 --> 00:02:54,350
just have a collection of paragraphs

42
00:02:54,350 --> 00:02:55,910
with the actual names of the products.

43
00:02:55,910 --> 00:02:57,810
So right now we're just keeping it very simple.

44
00:02:57,810 --> 00:02:59,280
And we'll get into table stuff later,

45
00:02:59,280 --> 00:03:00,860
but let's just keep it simple for now.

46
00:03:00,860 --> 00:03:01,960
So I'll set a paragraph

47
00:03:01,960 --> 00:03:05,453
and I use ngFor let tempProduct of products.

48
00:03:09,780 --> 00:03:12,850
So we're accessing the products from the component.

49
00:03:12,850 --> 00:03:14,760
And those values were assigned

50
00:03:14,760 --> 00:03:16,783
based on our call to that service.

51
00:03:18,500 --> 00:03:21,150
And now I'll simply display the product name,

52
00:03:21,150 --> 00:03:23,113
and also the product price.

53
00:03:32,060 --> 00:03:34,100
And I'll also send it through that currency pipe

54
00:03:34,100 --> 00:03:35,233
so I can format it.

55
00:03:42,129 --> 00:03:45,040
And now that's basically it here for creating the HTML page.

56
00:03:45,040 --> 00:03:46,343
So this looks good so far.

57
00:03:50,360 --> 00:03:52,810
Okay, so let's go ahead and test our application.

58
00:03:56,199 --> 00:03:57,730
Just move into my terminal window here

59
00:03:57,730 --> 00:03:59,423
and get things up and running.

60
00:04:02,190 --> 00:04:04,230
And then also as a little side note,

61
00:04:04,230 --> 00:04:05,150
make sure you already have

62
00:04:05,150 --> 00:04:07,323
your Spring Boot app up and running too.

63
00:04:15,148 --> 00:04:20,020
All righty, so our app is up and running but, (laughs) what?

64
00:04:20,020 --> 00:04:21,620
Where are the products?

65
00:04:21,620 --> 00:04:23,820
I should see some products here.

66
00:04:23,820 --> 00:04:25,690
That's strange so let me just close

67
00:04:25,690 --> 00:04:28,770
some of these other windows here, do a reload.

68
00:04:28,770 --> 00:04:31,483
Okay, nothing, hmm, strange.

69
00:04:33,460 --> 00:04:35,320
Do a quick little check on the code

70
00:04:35,320 --> 00:04:40,320
so that's our product service calling it endpoint, okay.

71
00:04:45,880 --> 00:04:47,630
And let me just test that endpoint.

72
00:04:51,400 --> 00:04:53,970
Okay, yeah, so my Spring Boot server's up and running

73
00:04:53,970 --> 00:04:57,010
and it's sending back data, that looks good.

74
00:04:57,010 --> 00:04:59,143
Not sure what else is going on here.

75
00:05:01,770 --> 00:05:03,620
And let me investigate a bit further.

76
00:05:05,010 --> 00:05:08,980
And I can use the tools of my browser here.

77
00:05:08,980 --> 00:05:11,843
So More Tools, go to Developer Tools.

78
00:05:14,530 --> 00:05:15,610
And so this'll basically show

79
00:05:15,610 --> 00:05:18,760
any JavaScript or browser errors.

80
00:05:18,760 --> 00:05:23,760
And, ooh, good, look at that, access to the HttpRequest

81
00:05:25,600 --> 00:05:28,860
at localhost:8080/api/products from origin

82
00:05:28,860 --> 00:05:31,160
has been blocked by CORS policy.

83
00:05:31,160 --> 00:05:34,130
No Access-Control-Allow.

84
00:05:34,130 --> 00:05:38,763
Ooh got it, that same origin policy.

85
00:05:41,400 --> 00:05:45,660
Yeah, okay, so that's what's going on.

86
00:05:45,660 --> 00:05:48,110
So this is all a planned exercise

87
00:05:48,110 --> 00:05:49,230
'cause I wanted you to see this

88
00:05:49,230 --> 00:05:52,090
because this is a common pitfall

89
00:05:52,090 --> 00:05:54,870
with building full stack applications.

90
00:05:54,870 --> 00:05:57,290
And so we know how to solve this.

91
00:05:57,290 --> 00:05:58,650
We can solve this by making use

92
00:05:58,650 --> 00:06:02,980
of the @CrossOrign annotation on our Spring Boot app.

93
00:06:02,980 --> 00:06:04,440
But this is just a good exercise

94
00:06:04,440 --> 00:06:07,770
for you to see how you'll get this error message

95
00:06:07,770 --> 00:06:09,290
only if you dig in to it.

96
00:06:09,290 --> 00:06:12,570
On the page itself you won't see this given message,

97
00:06:12,570 --> 00:06:14,680
based on the coding that we've created so far.

98
00:06:14,680 --> 00:06:16,740
But any ways, no problem, no worries,

99
00:06:16,740 --> 00:06:18,760
we can resolve this in the next video.

100
00:06:18,760 --> 00:06:19,923
So I'll see you there.

