WEBVTT
1
00:00:01.290 --> 00:00:03.620
<v Instructor>In this video we'll learn how to create</v>

2
00:00:03.620 --> 00:00:04.720
classes in TypeScript.

3
00:00:07.310 --> 00:00:08.730
So we'll start with this example here

4
00:00:08.730 --> 00:00:10.210
using a Customer Class.

5
00:00:10.210 --> 00:00:12.210
A customer can have a first name and last name

6
00:00:12.210 --> 00:00:13.330
of TypeString.

7
00:00:13.330 --> 00:00:15.420
And then we'll also learn how to create constructors

8
00:00:15.420 --> 00:00:16.973
and also getter and setters.

9
00:00:21.054 --> 00:00:24.570
So here's the basic structure of a class and TypeScript.

10
00:00:24.570 --> 00:00:27.800
We use the class keyword and give the name of the class.

11
00:00:27.800 --> 00:00:30.350
And then we can define the properties, the constructors,

12
00:00:30.350 --> 00:00:33.600
and any getter and setter methods for this given class.

13
00:00:33.600 --> 00:00:36.080
So that is the basic layout.

14
00:00:36.080 --> 00:00:38.963
And then we can place this in a file called customer.ts.

15
00:00:40.250 --> 00:00:41.710
Now actually the file name,

16
00:00:41.710 --> 00:00:43.510
you can actually use any file name

17
00:00:43.510 --> 00:00:45.610
as long as it ends with a .ts extension.

18
00:00:45.610 --> 00:00:47.863
So we can actually place this customer class

19
00:00:47.863 --> 00:00:50.060
in a customer file called mydemo.ts.

20
00:00:50.060 --> 00:00:52.570
So again you can give any file name here.

21
00:00:52.570 --> 00:00:55.290
But by convention I like to use the actual

22
00:00:55.290 --> 00:00:56.880
name of the class.

23
00:00:56.880 --> 00:00:58.130
But it is not a requirement.

24
00:00:58.130 --> 00:00:59.733
You can use any name.

25
00:01:02.980 --> 00:01:05.150
Okay so let's go ahead and define some properties for our

26
00:01:05.150 --> 00:01:07.040
customer class.

27
00:01:07.040 --> 00:01:08.300
So I have two properties.

28
00:01:08.300 --> 00:01:11.710
Here I'll have the first name and last name of TypeString.

29
00:01:11.710 --> 00:01:14.233
And the properties are public by default.

30
00:01:15.080 --> 00:01:17.830
And so we'll actually cover access modifiers a little

31
00:01:19.148 --> 00:01:20.288
bit later in this video.

32
00:01:20.288 --> 00:01:21.333
But for right now we'll just keep the basics.

33
00:01:23.910 --> 00:01:25.940
So now that I have my customer class defined,

34
00:01:25.940 --> 00:01:27.700
let's go ahead and use it.

35
00:01:27.700 --> 00:01:29.460
So I can create an instance of this class

36
00:01:29.460 --> 00:01:30.750
by using the new keyword.

37
00:01:30.750 --> 00:01:34.173
So I'll say let myCustomer = new Customer.

38
00:01:35.500 --> 00:01:37.660
And now that it's created I can actually set some of the

39
00:01:37.660 --> 00:01:41.039
properties here by saying myCustomer.firstName = "Martin";

40
00:01:41.039 --> 00:01:42.310
lastName = "Dixon".

41
00:01:42.310 --> 00:01:44.633
And then I can display the output accordingly.

42
00:01:46.530 --> 00:01:48.520
And then I simply compile the code and run the code

43
00:01:48.520 --> 00:01:50.673
and we'll see the output of Martin Dixon.

44
00:01:53.630 --> 00:01:56.160
Alrighty so now let's look at creating a constructor for

45
00:01:56.160 --> 00:01:57.083
our class.

46
00:01:58.730 --> 00:02:00.440
So to create a constructor we make use of the

47
00:02:00.440 --> 00:02:02.620
constructor keyword.

48
00:02:02.620 --> 00:02:05.380
And then we pass in the params for the first and last

49
00:02:05.380 --> 00:02:06.850
and then we simply assign them by saying

50
00:02:06.850 --> 00:02:07.913
this.firstName = theFirst;

51
00:02:08.760 --> 00:02:10.320
this.lastName = theLast.

52
00:02:10.320 --> 00:02:13.810
And it's important that we must use this to refer to

53
00:02:13.810 --> 00:02:16.293
properties defined in this class.

54
00:02:19.820 --> 00:02:21.840
Alrighty so let's go ahead and update our example

55
00:02:21.840 --> 00:02:24.210
to use our new constructor.

56
00:02:24.210 --> 00:02:27.310
So here at the bottom I have let myCustomer = new Customer

57
00:02:27.310 --> 00:02:29.910
I pass in the first and last name of Martin Dixon

58
00:02:29.910 --> 00:02:31.760
and then I simply display the output.

59
00:02:32.780 --> 00:02:34.230
And then a similar thing here

60
00:02:35.082 --> 00:02:36.610
run our application and we see the same output Martin Dixon.

61
00:02:36.610 --> 00:02:38.840
But in this example we're using our new constructor

62
00:02:38.840 --> 00:02:41.040
that takes the first name and the last name.

63
00:02:43.760 --> 00:02:45.420
Okay access modifiers,

64
00:02:45.420 --> 00:02:47.280
now I promised this to you a little bit earlier.

65
00:02:47.280 --> 00:02:48.400
So here we are.

66
00:02:48.400 --> 00:02:50.230
So the first modifier public,

67
00:02:50.230 --> 00:02:52.980
the property is accessible to all classes.

68
00:02:52.980 --> 00:02:54.410
And this is the default modifier

69
00:02:54.410 --> 00:02:56.860
so if you don't list anything then the actual property

70
00:02:56.860 --> 00:02:58.423
will default to being public.

71
00:03:00.180 --> 00:03:01.680
And then there's also protected,

72
00:03:01.680 --> 00:03:04.102
meaning the property's only accessible in the current class

73
00:03:04.102 --> 00:03:05.973
and subclasses.

74
00:03:08.060 --> 00:03:11.210
And for private, the property is only accessible

75
00:03:11.210 --> 00:03:13.033
in the current class.

76
00:03:17.239 --> 00:03:18.350
All right so let's go ahead and mark

77
00:03:18.350 --> 00:03:19.550
the properties as private.

78
00:03:19.550 --> 00:03:22.573
So first name and last name they're now both private.

79
00:03:23.710 --> 00:03:25.560
So now down in my coder I'll actually have some

80
00:03:25.560 --> 00:03:27.810
compilation errors because I'm trying to access

81
00:03:27.810 --> 00:03:30.200
private properties.

82
00:03:30.200 --> 00:03:32.830
And the I-D-E will actually tell you this.

83
00:03:32.830 --> 00:03:35.630
So it'll say hey property first name is private and

84
00:03:35.630 --> 00:03:38.550
only accessible within the class customer.

85
00:03:38.550 --> 00:03:41.400
All right so you'll have to be within that given class

86
00:03:41.400 --> 00:03:42.313
of customer.

87
00:03:46.190 --> 00:03:47.860
Now if I compile the code

88
00:03:47.860 --> 00:03:49.510
then I'll see a similar error here.

89
00:03:49.510 --> 00:03:51.240
So it says "Hey there's an error,

90
00:03:51.240 --> 00:03:52.360
the property is private,

91
00:03:52.360 --> 00:03:53.270
only accessible,

92
00:03:53.270 --> 00:03:54.320
blah blah blah,

93
00:03:54.320 --> 00:03:55.750
makes sense."

94
00:03:55.750 --> 00:03:58.060
So we're trying to access this field that's private.

95
00:03:58.060 --> 00:03:59.780
And it's marked as private in our code.

96
00:03:59.780 --> 00:04:01.370
So this all makes sense.

97
00:04:01.370 --> 00:04:02.493
We will expect this.

98
00:04:05.120 --> 00:04:07.071
But now the part where it gets a little funny.

99
00:04:07.071 --> 00:04:08.030
(laughter)

100
00:04:08.030 --> 00:04:10.960
I say be careful so even though there are compilation

101
00:04:10.960 --> 00:04:14.027
errors, the TypeScript compiler will still generate a

102
00:04:14.027 --> 00:04:15.540
.js file!

103
00:04:15.540 --> 00:04:16.780
Yikes!

104
00:04:16.780 --> 00:04:19.460
So if I compile this code,

105
00:04:19.460 --> 00:04:21.790
and then if I were to actually get a D-I-R

106
00:04:21.790 --> 00:04:23.500
to look at the directory contents

107
00:04:23.500 --> 00:04:25.500
then there is customer.js.

108
00:04:25.500 --> 00:04:26.510
What??

109
00:04:26.510 --> 00:04:29.640
So it actually generated a .js file,

110
00:04:29.640 --> 00:04:31.580
But that doesn't make any sense.

111
00:04:31.580 --> 00:04:33.289
If there was a compile error,

112
00:04:33.289 --> 00:04:34.122
(laughter)

113
00:04:34.122 --> 00:04:36.623
why would you even generate the file?

114
00:04:37.750 --> 00:04:39.754
And it get's worse.

115
00:04:39.754 --> 00:04:40.587
(laughter)

116
00:04:40.587 --> 00:04:44.430
The code will still run.

117
00:04:44.430 --> 00:04:46.250
So that generated code

118
00:04:46.250 --> 00:04:48.050
it'll still run.

119
00:04:48.050 --> 00:04:48.883
So look at that

120
00:04:48.883 --> 00:04:53.730
when I say node Customer.js it'll print out Susan Public.

121
00:04:54.660 --> 00:04:57.140
What's going on here?

122
00:04:57.140 --> 00:04:59.360
So this little code snippet we create an instance

123
00:04:59.360 --> 00:05:02.040
and we set our first name is Susan, last name is Public

124
00:05:02.040 --> 00:05:04.570
and we displayed it and it runs.

125
00:05:04.570 --> 00:05:06.483
Oh! Really!

126
00:05:09.540 --> 00:05:13.320
So we can prevent this and I'll show you how.

127
00:05:13.320 --> 00:05:16.140
So here the first thing we want to do is just kind of just

128
00:05:16.140 --> 00:05:19.470
go from scratch here with Customer.js just to remove that

129
00:05:19.470 --> 00:05:20.773
previous J-S file.

130
00:05:21.620 --> 00:05:25.414
And we can compile using this new compiler flag

131
00:05:25.414 --> 00:05:26.581
noEmitOnError.

132
00:05:28.490 --> 00:05:32.790
So basically this flag says do not generate a .js file

133
00:05:32.790 --> 00:05:34.723
if there is a compilation error.

134
00:05:36.480 --> 00:05:39.110
So now when we do a D-I-R

135
00:05:39.110 --> 00:05:40.980
we only have a Customer.ts file.

136
00:05:40.980 --> 00:05:44.010
So the .js file was not generated.

137
00:05:44.010 --> 00:05:46.426
So I like to say "Yaay!"

138
00:05:46.426 --> 00:05:47.380
(laughter)

139
00:05:47.380 --> 00:05:50.210
So you kind of have to micromanage

140
00:05:50.210 --> 00:05:51.860
this TypeScript compiler.

141
00:05:51.860 --> 00:05:54.012
Because if you let it do it's own thing,

142
00:05:54.012 --> 00:05:55.980
you'll get some different results.

143
00:05:55.980 --> 00:05:58.230
But no problems, now that we're aware of it

144
00:05:58.230 --> 00:06:01.040
it shouldn't be a problem in the future.

145
00:06:01.040 --> 00:06:02.930
Alrighty so let's go ahead and move into the next video.

146
00:06:02.930 --> 00:06:04.240
And we'll move into our I-D-E

147
00:06:04.240 --> 00:06:05.750
and we'll write the code

148
00:06:05.750 --> 00:06:07.484
for our customer class and we'll test it out.

149
00:06:07.484 --> 00:06:10.173
So I'll see ya in the next video!

