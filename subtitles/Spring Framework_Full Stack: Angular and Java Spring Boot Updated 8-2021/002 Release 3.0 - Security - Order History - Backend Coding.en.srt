1
00:00:01,180 --> 00:00:03,160
<v Instructor>Alrighty, so let's go ahead and get started.</v>

2
00:00:03,160 --> 00:00:04,240
So the first thing we'll do

3
00:00:04,240 --> 00:00:06,890
is we'll create the OrderRepository REST API,

4
00:00:06,890 --> 00:00:08,860
and then also go through an update configs

5
00:00:08,860 --> 00:00:10,743
to make the API read only.

6
00:00:20,728 --> 00:00:21,780
So on IntelJ,

7
00:00:21,780 --> 00:00:23,860
we can go ahead and look at some of our backend codes.

8
00:00:23,860 --> 00:00:25,510
So I'll do a quick refresher here.

9
00:00:25,510 --> 00:00:28,470
I'm going to look at the entity class for Order.

10
00:00:28,470 --> 00:00:32,000
So this is the one that will set the API up

11
00:00:32,000 --> 00:00:33,470
based on this order class.

12
00:00:33,470 --> 00:00:36,723
And so order has a reference to the actual customer.

13
00:00:38,280 --> 00:00:40,100
And so we'll use this to search for orders

14
00:00:40,100 --> 00:00:42,233
by customer email address.

15
00:00:44,130 --> 00:00:48,290
And now I'll go ahead and move over to my dao package

16
00:00:48,290 --> 00:00:52,247
and I'll create this new interface for the OrderRepository.

17
00:00:59,594 --> 00:01:02,040
And we'll give the name OrderRepository

18
00:01:02,040 --> 00:01:03,733
make sure it's in Interface.

19
00:01:27,140 --> 00:01:28,380
And I'll give the annotation of top

20
00:01:28,380 --> 00:01:30,720
for the RepositoryRestResource.

21
00:01:35,550 --> 00:01:38,463
Also we'll extend the JpaRepository.

22
00:01:40,870 --> 00:01:44,193
We'll give the entity type comma, the primary key type.

23
00:01:45,530 --> 00:01:46,953
Order, Long.

24
00:01:49,926 --> 00:01:52,360
And be sure to import the order class

25
00:01:52,360 --> 00:01:55,163
from our e-commerce package.

26
00:02:02,980 --> 00:02:04,040
So now, we just go through it

27
00:02:04,040 --> 00:02:05,563
and we create our method name,

28
00:02:09,480 --> 00:02:14,480
findByCustomerEmail, you pass it on Param named email

29
00:02:21,790 --> 00:02:25,433
and we also provide our Params here for pagination support.

30
00:02:30,120 --> 00:02:31,570
And be sure to import Pageable

31
00:02:31,570 --> 00:02:35,083
from the springframework data domain package.

32
00:02:40,820 --> 00:02:43,190
That's all the coding that we need here for this repository.

33
00:02:43,190 --> 00:02:46,290
And so remember behind the scenes Spring will create a query

34
00:02:46,290 --> 00:02:48,243
based on the actual method name.

35
00:02:52,180 --> 00:02:53,140
Moving ahead to step two,

36
00:02:53,140 --> 00:02:54,310
we're going to update the configs

37
00:02:54,310 --> 00:02:57,633
to make the OrderRepository REST API read only.

38
00:03:05,131 --> 00:03:07,970
And so we'll make these updates here in this config package

39
00:03:07,970 --> 00:03:10,443
in this class, MyDataRestConfig.

40
00:03:17,500 --> 00:03:18,880
So, when MyDataRestConfig,

41
00:03:18,880 --> 00:03:20,251
we move down to this method here

42
00:03:20,251 --> 00:03:22,593
configureRepositoryRestConfiguration.

43
00:03:25,520 --> 00:03:27,893
Now we have some code that's already in place.

44
00:03:31,420 --> 00:03:35,420
Let's just go ahead and copy one of those lines

45
00:03:35,420 --> 00:03:37,020
and just paste it here

46
00:03:37,020 --> 00:03:39,963
and then we'll just give Order.class.

47
00:03:46,240 --> 00:03:50,133
So for this OrderRepository disable certain methods.

48
00:03:51,320 --> 00:03:52,770
And we follow this process before

49
00:03:52,770 --> 00:03:54,130
for a lot of our other codes.

50
00:03:54,130 --> 00:03:56,483
So you understand this piece so far.

51
00:03:59,920 --> 00:04:01,580
So we can go ahead and run our application

52
00:04:01,580 --> 00:04:02,793
and we can test it out.

53
00:04:12,810 --> 00:04:14,680
And what I'll do is I'll start up Postman

54
00:04:14,680 --> 00:04:17,943
so I can send some queries to this REST API.

55
00:04:26,700 --> 00:04:27,930
So, I'm really going to hit the Postman

56
00:04:27,930 --> 00:04:29,803
I'll create a new request.

57
00:04:35,700 --> 00:04:37,270
So, it's going to be a GET request

58
00:04:37,270 --> 00:04:39,740
and I simply need to give the URL.

59
00:04:39,740 --> 00:04:42,290
So just use the URL that we have here on the screen

60
00:04:45,210 --> 00:04:49,877
and api/orders/search/findByCustomerEmail.

61
00:04:54,750 --> 00:04:57,490
And then our parameters is email equals

62
00:04:57,490 --> 00:04:58,580
and we need to give an email address

63
00:04:58,580 --> 00:05:00,770
but I'm not sure which email address to use.

64
00:05:00,770 --> 00:05:03,040
So let me go and check my database

65
00:05:03,040 --> 00:05:07,063
and see what customer emails I have in my database.

66
00:05:11,380 --> 00:05:14,370
So, I'll just swing in here to MySQL work bench,

67
00:05:14,370 --> 00:05:18,463
log in, go to my table here and do a search on my customers.

68
00:05:21,890 --> 00:05:23,490
And I see in this example,

69
00:05:23,490 --> 00:05:27,240
I just have one customer emails demo@luv2code.com.

70
00:05:27,240 --> 00:05:29,040
So, your values may be different

71
00:05:29,040 --> 00:05:31,770
depending on what you use for testing.

72
00:05:31,770 --> 00:05:34,360
So just use whatever that email address is

73
00:05:34,360 --> 00:05:36,980
and then we can put it over here in this postman.

74
00:05:36,980 --> 00:05:40,010
So demo@luv2code.com.

75
00:05:40,010 --> 00:05:41,690
So just make sure that this matches

76
00:05:41,690 --> 00:05:44,493
with whatever data you have in your database.

77
00:05:48,620 --> 00:05:49,543
Click Send,

78
00:05:52,810 --> 00:05:54,130
you got a 200 response.

79
00:05:54,130 --> 00:05:55,160
So that's the success.

80
00:05:55,160 --> 00:05:55,993
So this is great.

81
00:05:55,993 --> 00:06:00,060
So looking at the data here, we can see the previous orders

82
00:06:00,060 --> 00:06:03,550
that were processed by this given customer.

83
00:06:03,550 --> 00:06:05,010
And you can always cross check this

84
00:06:05,010 --> 00:06:08,360
by looking at the orders in your actual database tables.

85
00:06:08,360 --> 00:06:09,193
So this looks pretty good.

86
00:06:09,193 --> 00:06:11,600
So we have the REST API in place

87
00:06:11,600 --> 00:06:15,230
for finding orders based on a customer's email.

88
00:06:15,230 --> 00:06:17,923
So, I'd like to say good job, my friend.

