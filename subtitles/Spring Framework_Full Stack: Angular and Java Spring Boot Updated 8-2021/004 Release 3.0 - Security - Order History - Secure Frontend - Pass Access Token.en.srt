1
00:00:01,106 --> 00:00:02,330
<v Instructor>All right, so let's remove</v>

2
00:00:02,330 --> 00:00:05,313
that placeholder code and let's start to add our coding.

3
00:00:16,130 --> 00:00:20,170
So we only want to add an access token for secured endpoints.

4
00:00:20,170 --> 00:00:23,223
And so I'll set up this array of secured endpoints.

5
00:00:32,100 --> 00:00:35,403
So this is for my, slash api, slash orders.

6
00:00:46,300 --> 00:00:50,040
And now I simply want to check the URL that's being processed,

7
00:00:50,040 --> 00:00:53,330
see if that matches with one of the secured endpoints

8
00:00:53,330 --> 00:00:56,080
or matches with the secured endpoints that I have here.

9
00:01:08,920 --> 00:01:10,820
And so if it does match,

10
00:01:10,820 --> 00:01:13,963
then we want to get the access token.

11
00:01:19,900 --> 00:01:22,743
So I'll set up this access token equals,

12
00:01:23,670 --> 00:01:26,103
I do the await this dot oktaAuth,

13
00:01:30,001 --> 00:01:31,060
dot,

14
00:01:31,060 --> 00:01:32,770
huh, OktaAuth

15
00:01:33,700 --> 00:01:34,780
oh gosh, okay.

16
00:01:34,780 --> 00:01:37,110
I forgot to inject the OktaAuth.

17
00:01:37,110 --> 00:01:38,930
So I need to move back up here

18
00:01:38,930 --> 00:01:40,823
to my constructor and inject that.

19
00:01:44,900 --> 00:01:48,853
So the OktaAuth is going to come in as an OktaAuthService.

20
00:01:50,850 --> 00:01:51,683
Here we go.

21
00:01:53,280 --> 00:01:54,640
Okay. Excellent, excellent.

22
00:01:54,640 --> 00:01:56,240
So that takes care of that part.

23
00:01:57,870 --> 00:01:59,830
So now I can use this OktaAuth.

24
00:01:59,830 --> 00:02:00,663
Okay, good.

25
00:02:00,663 --> 00:02:02,520
'Cause now it's injected and I can use it.

26
00:02:02,520 --> 00:02:07,180
So OktaAuth dot get access token.

27
00:02:07,180 --> 00:02:11,060
So this is a call to a asynchronous method,

28
00:02:11,060 --> 00:02:12,780
returns a promise.

29
00:02:12,780 --> 00:02:16,260
And so here we make use of this await to say

30
00:02:16,260 --> 00:02:19,483
wait until that processing finishes before proceeding.

31
00:02:27,094 --> 00:02:29,110
Now, we'll go through and clone the request

32
00:02:29,110 --> 00:02:32,253
and add new header with the access token.

33
00:02:38,350 --> 00:02:40,883
So I'll make use of this request dot clone.

34
00:03:00,520 --> 00:03:03,370
And for this entry here, authorization, bearer.

35
00:03:03,370 --> 00:03:05,773
And I give a reference to the access token.

36
00:03:09,310 --> 00:03:11,210
And remember the reason we have to clone

37
00:03:11,210 --> 00:03:13,600
is because the request is immutable,

38
00:03:13,600 --> 00:03:16,040
meaning that you can't change it directly.

39
00:03:16,040 --> 00:03:18,070
So you have to make a copy of it

40
00:03:18,070 --> 00:03:21,643
like cloning it and then setting the headers accordingly.

41
00:03:29,970 --> 00:03:32,700
And so then, at the end of this method,

42
00:03:32,700 --> 00:03:36,640
we say return next dot handle request dot to promise,

43
00:03:36,640 --> 00:03:37,590
basically saying, go ahead

44
00:03:37,590 --> 00:03:41,800
and continue the other interceptors that are in the chain.

45
00:03:41,800 --> 00:03:43,240
If there are no other interceptors,

46
00:03:43,240 --> 00:03:46,773
then I'll just simply make the call to the given rest API.

