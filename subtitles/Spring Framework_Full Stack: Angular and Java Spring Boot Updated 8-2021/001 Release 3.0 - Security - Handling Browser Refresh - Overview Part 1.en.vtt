WEBVTT
1
00:00:01.210 --> 00:00:02.043
<v Instructor>In this video,</v>

2
00:00:02.043 --> 00:00:04.143
we're going to Handle Browser Refresh.

3
00:00:07.450 --> 00:00:09.870
So we have a little problem

4
00:00:09.870 --> 00:00:11.810
and you may have noticed this already.

5
00:00:11.810 --> 00:00:13.740
If we add products to the cart

6
00:00:13.740 --> 00:00:15.920
then we refresh the browser page,

7
00:00:15.920 --> 00:00:19.200
we actually lose products in the cart, yikes.

8
00:00:19.200 --> 00:00:23.210
And so our cart goes to zero, not good.

9
00:00:23.210 --> 00:00:24.730
The same problem happens

10
00:00:24.730 --> 00:00:27.890
when we add products to the cart, then log in.

11
00:00:27.890 --> 00:00:31.300
We lose products in the cart again, not good.

12
00:00:31.300 --> 00:00:33.760
So let me show you a quick demo of this issue

13
00:00:33.760 --> 00:00:35.963
just so you can kind of see it real time.

14
00:00:39.710 --> 00:00:41.423
So we're in our application here,

15
00:00:42.540 --> 00:00:44.990
and let's go ahead and add some items to our cart

16
00:00:49.025 --> 00:00:50.860
and we can see we have X number of items

17
00:00:50.860 --> 00:00:52.810
in our cart right now, that looks good.

18
00:00:53.920 --> 00:00:56.440
And then if I go over and refresh the browser

19
00:00:56.440 --> 00:00:59.070
or reload the page,

20
00:00:59.070 --> 00:01:01.870
then Oh, notice up here,

21
00:01:01.870 --> 00:01:04.620
the cart is empty on page refresh

22
00:01:04.620 --> 00:01:07.033
Ah, terrible, awful.

23
00:01:09.150 --> 00:01:11.780
Now let's add some more items to our cart

24
00:01:11.780 --> 00:01:13.760
so we have three items here in the cart.

25
00:01:13.760 --> 00:01:15.510
Now let's go into a log in

26
00:01:24.250 --> 00:01:25.580
and then once we're logged in

27
00:01:25.580 --> 00:01:27.940
and we can look up top and ah, again

28
00:01:27.940 --> 00:01:30.880
the cart is empty after log in

29
00:01:30.880 --> 00:01:34.040
awful, bad, yuck I don't like it.

30
00:01:34.040 --> 00:01:36.523
So we need to solve this problem,

31
00:01:38.630 --> 00:01:40.650
and here's one possible solution.

32
00:01:40.650 --> 00:01:42.520
So we can keep track of the cart products

33
00:01:42.520 --> 00:01:45.510
using client side browser web storage.

34
00:01:45.510 --> 00:01:49.470
HTML5 introduced this idea of the Web Storage API,

35
00:01:49.470 --> 00:01:51.540
where we basically store data in the browser

36
00:01:51.540 --> 00:01:54.630
using key value pairs and it's similar to cookies,

37
00:01:54.630 --> 00:01:56.597
but it provides a more intuitive API.

38
00:01:56.597 --> 00:01:58.880
And it also requires a modern web browser

39
00:01:58.880 --> 00:02:00.140
that supports HTML5

40
00:02:00.140 --> 00:02:03.260
but most browsers out now support HTML5.

41
00:02:03.260 --> 00:02:05.100
Now this solution that I'm showing you

42
00:02:05.100 --> 00:02:08.550
is actually based on a solution provided by Matt Seymour.

43
00:02:08.550 --> 00:02:10.090
Matt is one of our students,

44
00:02:10.090 --> 00:02:12.540
he saw this issue and he created a solution

45
00:02:12.540 --> 00:02:15.570
and posted it in the QA discussion forum.

46
00:02:15.570 --> 00:02:16.960
I saw the solution and I'm like, wow,

47
00:02:16.960 --> 00:02:18.120
this looks really good.

48
00:02:18.120 --> 00:02:20.340
And other students also saw his solution.

49
00:02:20.340 --> 00:02:24.400
So I said, hey Matt, this is a great solution.

50
00:02:24.400 --> 00:02:27.130
Is it okay to add this to the course?

51
00:02:27.130 --> 00:02:29.020
And Matt replied, sure no problem

52
00:02:29.020 --> 00:02:30.290
so that's awesome.

53
00:02:30.290 --> 00:02:33.203
So thanks a lot Matt for helping out with this solution.

54
00:02:37.630 --> 00:02:40.610
Now there's two types of web storage that we can use.

55
00:02:40.610 --> 00:02:42.110
There are session storage,

56
00:02:42.110 --> 00:02:44.550
where the data's stored in the web browsers memory,

57
00:02:44.550 --> 00:02:46.570
and there's also local storage

58
00:02:46.570 --> 00:02:48.923
the data is stored on the client side computer.

59
00:02:52.010 --> 00:02:53.850
So let's talk a bit more about Session Storage.

60
00:02:53.850 --> 00:02:56.900
So it stores the data in the web browser session memory.

61
00:02:56.900 --> 00:02:59.280
So data is never sent to the server.

62
00:02:59.280 --> 00:03:01.060
Now, one thing that's important here

63
00:03:01.060 --> 00:03:03.140
when they say browser session

64
00:03:03.140 --> 00:03:06.360
they're referring to the web browser session

65
00:03:06.360 --> 00:03:08.330
it's only client side.

66
00:03:08.330 --> 00:03:12.080
Don't confuse this with Backend HttpSession all right?

67
00:03:12.080 --> 00:03:13.260
These are two separate things

68
00:03:13.260 --> 00:03:14.860
there's no relationship between the two.

69
00:03:14.860 --> 00:03:17.190
So again, web browser session basically

70
00:03:17.190 --> 00:03:20.513
just means the client side memory of the web browser.

71
00:03:23.400 --> 00:03:26.800
So each web browser tab has its own session

72
00:03:26.800 --> 00:03:30.170
and data's not shared between the web browser tabs.

73
00:03:30.170 --> 00:03:32.100
And once the web browser tab is closed

74
00:03:32.100 --> 00:03:33.240
or the browser is exited

75
00:03:33.240 --> 00:03:35.300
then the data is no longer available.

76
00:03:35.300 --> 00:03:37.410
So only for in memory

77
00:03:37.410 --> 00:03:39.410
while that given browser tab is running.

78
00:03:42.030 --> 00:03:43.590
Now, let's take a look at local storage.

79
00:03:43.590 --> 00:03:45.500
So local storage stores the data locally

80
00:03:45.500 --> 00:03:47.370
on the client web browser computer

81
00:03:47.370 --> 00:03:49.600
the data's never sent to the server.

82
00:03:49.600 --> 00:03:50.990
The data's available to tabs

83
00:03:50.990 --> 00:03:53.910
of the same web browser for the same origin.

84
00:03:53.910 --> 00:03:56.040
So the app must read the data again,

85
00:03:56.040 --> 00:03:58.300
only with the browser refresh.

86
00:03:58.300 --> 00:04:01.270
The data persists even if the web browser is closed.

87
00:04:01.270 --> 00:04:03.230
So if you close the browser and start it again

88
00:04:03.230 --> 00:04:05.270
you can still access the same data

89
00:04:05.270 --> 00:04:07.910
and there's no expiration date on the data.

90
00:04:07.910 --> 00:04:09.590
And also you can clear the data using

91
00:04:09.590 --> 00:04:13.363
out of JavaScript code or clearing the web browser cache.

92
00:04:16.890 --> 00:04:17.980
So data's scoping.

93
00:04:17.980 --> 00:04:21.040
So the data is scoped to a given origin.

94
00:04:21.040 --> 00:04:25.610
So only pages from the same origin can access the data.

95
00:04:25.610 --> 00:04:26.900
Well, what's an origin?

96
00:04:26.900 --> 00:04:29.730
Well, an origin is a combination of the protocol,

97
00:04:29.730 --> 00:04:31.633
the host name, and the port.

98
00:04:33.130 --> 00:04:35.140
So here's an example of a same origin.

99
00:04:35.140 --> 00:04:39.570
So we have Http: localhost: 4200

100
00:04:39.570 --> 00:04:41.950
equals the same localhost 4200.

101
00:04:41.950 --> 00:04:43.170
That's the exact same origin,

102
00:04:43.170 --> 00:04:45.513
same protocols, same hostnames, same port.

103
00:04:48.690 --> 00:04:50.490
Now here's a different origin.

104
00:04:50.490 --> 00:04:55.320
So we have localhost 4200 is not equal to localhost 8080.

105
00:04:55.320 --> 00:04:58.460
And the reason here is because they have different ports.

106
00:04:58.460 --> 00:05:01.190
So even though they have the same hostname

107
00:05:01.190 --> 00:05:02.700
they're running on different ports.

108
00:05:02.700 --> 00:05:07.080
So that means different origin and also the protocols,

109
00:05:07.080 --> 00:05:11.030
the unsecure Http compared to the secure HTTPS,

110
00:05:11.030 --> 00:05:13.010
those are different protocols, all right.

111
00:05:13.010 --> 00:05:15.250
So to have the same origin,

112
00:05:15.250 --> 00:05:18.963
the protocol, hostname, and port must match.

113
00:05:20.660 --> 00:05:23.100
And again, only pages from the same origin

114
00:05:23.100 --> 00:05:24.940
can access the data.

115
00:05:24.940 --> 00:05:28.710
So this prevents one website like, CNN.com

116
00:05:28.710 --> 00:05:32.053
from accessing data from another website like, Apple.com.

117
00:05:35.380 --> 00:05:37.240
And a bit more here on local storage.

118
00:05:37.240 --> 00:05:39.990
So for local storage, data is not shared

119
00:05:39.990 --> 00:05:41.620
between different web browsers.

120
00:05:41.620 --> 00:05:45.100
For example, Chrome cannot access the local storage

121
00:05:45.100 --> 00:05:46.300
of Firefox.

122
00:05:46.300 --> 00:05:47.930
So on the right-hand side we have Firefox

123
00:05:47.930 --> 00:05:49.180
and it's local storage,

124
00:05:49.180 --> 00:05:52.490
Chrome cannot access any of the local storage data

125
00:05:52.490 --> 00:05:54.163
for a different web browser.

126
00:05:57.070 --> 00:05:58.720
Now here's some factors to consider.

127
00:05:58.720 --> 00:06:01.280
So data and web storage is stored as plain text

128
00:06:01.280 --> 00:06:03.010
so it's not encrypted.

129
00:06:03.010 --> 00:06:05.170
So don't use it for any sensitive info

130
00:06:05.170 --> 00:06:07.590
such as credit card, numbers, et cetera.

131
00:06:07.590 --> 00:06:11.160
And also be aware that power users may tinker with files

132
00:06:11.160 --> 00:06:12.720
on their computer.

133
00:06:12.720 --> 00:06:14.430
In general, your apps should be resilient

134
00:06:14.430 --> 00:06:17.090
to still work as storage is not available.

135
00:06:17.090 --> 00:06:19.320
The user may clear their browser cache.

136
00:06:19.320 --> 00:06:22.260
Your app should still use reasonable defaults and that's

137
00:06:22.260 --> 00:06:24.760
something that you'd have to code for accordingly.

