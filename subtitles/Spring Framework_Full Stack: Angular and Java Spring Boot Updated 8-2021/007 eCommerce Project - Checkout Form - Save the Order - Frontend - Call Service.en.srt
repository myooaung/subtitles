1
00:00:01,090 --> 00:00:03,220
<v Instructor>Alrighty so now we can go ahead</v>

2
00:00:03,220 --> 00:00:05,680
and populate the purchase,

3
00:00:05,680 --> 00:00:08,320
using the order and the orderItems.

4
00:00:35,340 --> 00:00:37,610
Now we can get down to the real fun part.

5
00:00:37,610 --> 00:00:38,443
So this is kind of

6
00:00:38,443 --> 00:00:42,650
like the grand finale of calling the REST API

7
00:00:42,650 --> 00:00:44,973
and we'll call it via the checkoutService.

8
00:00:58,343 --> 00:01:01,405
So I'll call this checkoutService.placeOrder,

9
00:01:01,405 --> 00:01:04,180
I'll pass in a purchase object that I just created

10
00:01:04,180 --> 00:01:07,493
and populated with all that good data from the form,

11
00:01:08,730 --> 00:01:10,143
do a .subscribe.

12
00:01:21,667 --> 00:01:24,350
And now one thing I do slightly different here

13
00:01:24,350 --> 00:01:28,250
is I'll add code for calling the REST API

14
00:01:28,250 --> 00:01:32,340
and having the results coming back,

15
00:01:32,340 --> 00:01:34,630
and also I'll set up error handling.

16
00:01:34,630 --> 00:01:36,930
So this is something that's slightly new here.

17
00:01:38,270 --> 00:01:41,180
So we'll have something for next,

18
00:01:41,180 --> 00:01:44,163
and we'll also have an entry here for error.

19
00:01:48,200 --> 00:01:51,690
So next is the success path.

20
00:01:51,690 --> 00:01:53,980
Error is the error path.

21
00:01:53,980 --> 00:01:56,047
Okay just think of next as the happy path,

22
00:01:56,047 --> 00:01:58,983
error is the exception path or error path.

23
00:02:04,720 --> 00:02:07,523
So for the happy path, they'll send back a response,

24
00:02:10,410 --> 00:02:13,893
and now I can use that response and do something with it.

25
00:02:22,350 --> 00:02:24,070
And so we know that that response

26
00:02:24,070 --> 00:02:27,920
has our order tracking number,

27
00:02:27,920 --> 00:02:30,500
so it's going to come back as JSON

28
00:02:30,500 --> 00:02:35,500
and I can give the user a alert message,

29
00:02:35,850 --> 00:02:37,610
and I'll make use of the back ticks.

30
00:02:37,610 --> 00:02:39,480
So notice here I'm using back ticks

31
00:02:39,480 --> 00:02:43,473
because I'll make use of a template string for the output.

32
00:02:44,630 --> 00:02:46,020
So the order tracking number

33
00:02:46,020 --> 00:02:49,250
and then the template string is the dollar sign curly brace,

34
00:02:49,250 --> 00:02:52,060
that I can embed inside of this string,

35
00:02:52,060 --> 00:02:53,763
that has the back ticks on it.

36
00:02:57,310 --> 00:02:59,360
And I'll say response.orderTrackingNumber

37
00:03:00,958 --> 00:03:03,458
so that's the information coming back in the JSON.

38
00:03:05,680 --> 00:03:07,030
And that's from the Spring Boot code

39
00:03:07,030 --> 00:03:08,880
that we created a little bit earlier.

40
00:03:11,130 --> 00:03:13,530
All right so that'll give the user a little pop up,

41
00:03:13,530 --> 00:03:14,880
with their tracking number.

42
00:03:19,330 --> 00:03:20,190
And then also I'll just write

43
00:03:20,190 --> 00:03:21,470
a little comment here to myself

44
00:03:21,470 --> 00:03:22,600
I'll come back to this in a bit

45
00:03:22,600 --> 00:03:26,240
but we want to reset the cart, but give me one second

46
00:03:26,240 --> 00:03:27,390
I'll come back to that.

47
00:03:35,070 --> 00:03:36,730
So if there is an error,

48
00:03:36,730 --> 00:03:40,573
then I want to let the user know about the error.

49
00:03:42,870 --> 00:03:45,270
So a similar approach here, I'll just say alert,

50
00:03:50,240 --> 00:03:52,600
and I'll use the back ticks again

51
00:03:52,600 --> 00:03:55,210
'cause that'll make use of the template string approach

52
00:03:55,210 --> 00:03:56,523
just like we did up above.

53
00:04:08,090 --> 00:04:09,270
So there was an error

54
00:04:09,270 --> 00:04:11,410
and we'll make use of this error.message

55
00:04:11,410 --> 00:04:13,780
so that JSON will have an error message

56
00:04:13,780 --> 00:04:16,773
and we can display it using this code.

57
00:04:19,010 --> 00:04:22,240
And in most online guides you'll see the curly brace

58
00:04:22,240 --> 00:04:25,550
for this up on the previous line.

59
00:04:25,550 --> 00:04:26,610
So I'll kind of clean that up

60
00:04:26,610 --> 00:04:30,520
just so it'll follow what you see in normal online tutorials

61
00:04:30,520 --> 00:04:33,163
and blogs and stuff, as far as coding style.

62
00:04:34,050 --> 00:04:35,593
Once the user places their order

63
00:04:35,593 --> 00:04:38,410
then we want to reset the cart and clear it out,

64
00:04:38,410 --> 00:04:41,400
so we will define this new method here, reset cart

65
00:04:41,400 --> 00:04:44,430
'cause it's not part of our app as of now

66
00:04:44,430 --> 00:04:47,503
but now we have just created it.

67
00:04:54,985 --> 00:04:58,402
I'll remove some of the Boilerplate code.

68
00:05:09,020 --> 00:05:10,923
So we'll reset the cart data,

69
00:05:12,310 --> 00:05:14,823
and we'll also reset the form data,

70
00:05:16,700 --> 00:05:20,613
and finally we'll navigate back to the main products page.

71
00:05:30,436 --> 00:05:32,520
So I simply set the cart items

72
00:05:32,520 --> 00:05:35,853
to an empty array that basically clears it out.

73
00:05:36,760 --> 00:05:40,280
I will make use of those subjects

74
00:05:40,280 --> 00:05:42,310
for totalPrice and totalQuantity.

75
00:05:42,310 --> 00:05:44,070
That next zero basically

76
00:05:44,070 --> 00:05:46,370
send out zero to all subscribers there

77
00:05:46,370 --> 00:05:48,320
so they kind of reset themselves

78
00:05:48,320 --> 00:05:50,793
like the status component and so on.

79
00:05:52,680 --> 00:05:54,473
Just go through and reset the form.

80
00:06:03,520 --> 00:06:07,180
And again, once they've finished with their checkout

81
00:06:07,180 --> 00:06:09,390
we'll send them back to the main page.

82
00:06:09,390 --> 00:06:12,250
So that router, that's what we injected earlier

83
00:06:12,250 --> 00:06:13,480
in our constructor,

84
00:06:13,480 --> 00:06:18,480
we use that router to navigate a URL to /products.

85
00:06:24,470 --> 00:06:26,710
Kind of just scrolling back to the top

86
00:06:26,710 --> 00:06:28,990
so this is called an REST API

87
00:06:28,990 --> 00:06:31,240
so this is kind of the real work here

88
00:06:31,240 --> 00:06:33,053
for this checkout operation.

