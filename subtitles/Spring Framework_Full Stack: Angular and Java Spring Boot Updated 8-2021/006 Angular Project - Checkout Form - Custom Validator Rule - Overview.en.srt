1
00:00:01,250 --> 00:00:02,120
<v Instructor>In this video,</v>

2
00:00:02,120 --> 00:00:03,720
we'll work on our checkout form

3
00:00:03,720 --> 00:00:06,253
and we'll add a custom validator rule.

4
00:00:09,970 --> 00:00:13,260
Our form currently has a problem with white space.

5
00:00:13,260 --> 00:00:17,930
In the required fields, if we enter only white space,

6
00:00:17,930 --> 00:00:19,490
then it passes.

7
00:00:19,490 --> 00:00:20,323
Yikes.

8
00:00:23,170 --> 00:00:25,120
And let's take a look at this real quick.

9
00:00:25,120 --> 00:00:27,180
So we enter our checkout form.

10
00:00:27,180 --> 00:00:29,850
We have our customer fields here.

11
00:00:29,850 --> 00:00:33,090
And if we simply scroll to the bottom and hit Purchase,

12
00:00:33,090 --> 00:00:35,310
everything's required, that's good.

13
00:00:35,310 --> 00:00:39,540
And now if I simply enter white space here for first name,

14
00:00:39,540 --> 00:00:41,970
notice the validation goes away,

15
00:00:41,970 --> 00:00:44,250
and a similar thing for last name.

16
00:00:44,250 --> 00:00:46,000
Ooh, that's bad.

17
00:00:46,000 --> 00:00:50,960
So white space is okay, as of now, but it's not really okay.

18
00:00:50,960 --> 00:00:53,800
We need to resolve this. We need to fix this.

19
00:00:59,009 --> 00:01:02,480
So we can resolve this issue by creating a custom validator.

20
00:01:02,480 --> 00:01:05,750
We'll call this validator notOnlyWhitespace.

21
00:01:05,750 --> 00:01:08,320
We'll basically check the field value,

22
00:01:08,320 --> 00:01:10,870
if it only has white space,

23
00:01:10,870 --> 00:01:14,020
then we're going to return an error because it failed.

24
00:01:14,020 --> 00:01:16,853
Else will return null meaning that it passed.

25
00:01:20,550 --> 00:01:22,560
Alrighty, so here is our development process.

26
00:01:22,560 --> 00:01:23,550
So the first thing we'll do is

27
00:01:23,550 --> 00:01:25,840
we'll define our custom validator rule.

28
00:01:25,840 --> 00:01:27,940
Then we'll specify the custom validator rule

29
00:01:27,940 --> 00:01:29,520
for the form controls.

30
00:01:29,520 --> 00:01:32,010
And then finally we'll update the HTML template

31
00:01:32,010 --> 00:01:33,723
to display the error messages.

32
00:01:37,520 --> 00:01:40,410
Alrighty, step one of defining a custom validator rule.

33
00:01:40,410 --> 00:01:43,240
We'll simply define a method in a class.

34
00:01:43,240 --> 00:01:46,203
So here I have this class, Luv2ShopValidators,

35
00:01:47,240 --> 00:01:50,680
and we'll add a method here to not allow white spaces

36
00:01:50,680 --> 00:01:52,103
as far as validation.

37
00:01:54,440 --> 00:01:55,740
So I'll create this method here,

38
00:01:55,740 --> 00:01:58,800
static notOnlyWhitespace, passing a FormControl,

39
00:01:58,800 --> 00:02:01,590
that's the actual form control that we're checking on.

40
00:02:01,590 --> 00:02:02,980
And it returns ValidationErrors.

41
00:02:02,980 --> 00:02:05,440
So if the validation check fails,

42
00:02:05,440 --> 00:02:07,890
then we'll return validation errors.

43
00:02:07,890 --> 00:02:11,503
If the validation check passes, then we'll return null.

44
00:02:14,154 --> 00:02:16,560
And this ValidationErrors is a special object here.

45
00:02:16,560 --> 00:02:20,640
It's a map of errors returned from failed validation checks.

46
00:02:20,640 --> 00:02:23,003
And it's part of the Angular forms API.

47
00:02:25,300 --> 00:02:26,250
So here I'll just check

48
00:02:26,250 --> 00:02:28,310
if the string only contains white space.

49
00:02:28,310 --> 00:02:30,360
So I make sure that it's not null

50
00:02:30,360 --> 00:02:32,390
and I check the length by trimming it,

51
00:02:32,390 --> 00:02:34,070
checking it to be zero.

52
00:02:34,070 --> 00:02:35,580
If so, it's invalid.

53
00:02:35,580 --> 00:02:37,450
So we're going to return an error object.

54
00:02:37,450 --> 00:02:41,023
So here is a return { 'notOnlyWhitespace': true };.

55
00:02:43,700 --> 00:02:45,843
And then else it's valid. I return null.

56
00:02:52,020 --> 00:02:54,920
So a bit more here on this validation error key.

57
00:02:54,920 --> 00:02:57,880
The HTML template will check for this error key

58
00:02:57,880 --> 00:03:00,790
to see if it needs to display the actual error message

59
00:03:00,790 --> 00:03:03,403
and will use this actual key in the template.

60
00:03:06,120 --> 00:03:08,420
Alrighty, step two, specifying the custom validator rule

61
00:03:08,420 --> 00:03:10,020
for form controls.

62
00:03:10,020 --> 00:03:12,220
So here in our checkout.component.ts,

63
00:03:12,220 --> 00:03:13,650
we have our checkout form group,

64
00:03:13,650 --> 00:03:15,990
we have our customer component that we're creating.

65
00:03:15,990 --> 00:03:18,540
We add up the validations for required and minLength,

66
00:03:18,540 --> 00:03:21,345
and now we're going to add our new custom validator,

67
00:03:21,345 --> 00:03:24,140
Luv2ShopValidators.notOnlyWhitespace.

68
00:03:24,140 --> 00:03:26,420
So that's the actual method name that we're going to use.

69
00:03:26,420 --> 00:03:28,710
And we'll see how this maps to our actual class

70
00:03:28,710 --> 00:03:31,450
and the method that we have defined in the previous step.

71
00:03:31,450 --> 00:03:33,100
So that's the connection here

72
00:03:33,100 --> 00:03:35,400
between our custom validator method name

73
00:03:35,400 --> 00:03:37,300
and the reference here in this coding.

74
00:03:40,020 --> 00:03:42,200
Alrighty, in step three we're going to update the HTML template

75
00:03:42,200 --> 00:03:43,900
to display the error messages.

76
00:03:43,900 --> 00:03:45,970
So this is the coding we've seen before.

77
00:03:45,970 --> 00:03:49,020
If validation fails, then display the error messages.

78
00:03:49,020 --> 00:03:50,290
We have a new entry here.

79
00:03:50,290 --> 00:03:53,303
We say, or firstName.errors.notOnlyWhitespace.

80
00:03:56,750 --> 00:04:00,210
So this is a reference to our custom validation error key

81
00:04:00,210 --> 00:04:02,030
from the previous steps.

82
00:04:02,030 --> 00:04:04,047
So if you remember in the coding here, we've said,

83
00:04:04,047 --> 00:04:05,130
"Hey, it's invalid.

84
00:04:05,130 --> 00:04:07,700
We're going to return notOnlyWhitespace : true.

85
00:04:07,700 --> 00:04:10,870
So that's the actual link between the actual reference here

86
00:04:10,870 --> 00:04:13,690
in the template and the actual key.

87
00:04:13,690 --> 00:04:16,070
Now, this key that I'm using here,

88
00:04:16,070 --> 00:04:20,060
it has the same name as the method for this validation.

89
00:04:20,060 --> 00:04:23,150
However, we could use a different key name if we wanted to.

90
00:04:23,150 --> 00:04:24,960
We could use something totally different

91
00:04:24,960 --> 00:04:26,410
than the method name,

92
00:04:26,410 --> 00:04:28,510
but the reason I'm following this approach is because

93
00:04:28,510 --> 00:04:30,260
this is the same convention that's used

94
00:04:30,260 --> 00:04:32,110
by the Angular development team

95
00:04:32,110 --> 00:04:34,808
for all of the built-in Angular validations.

96
00:04:34,808 --> 00:04:37,190
The error key is the same as the method name.

97
00:04:37,190 --> 00:04:40,303
But again, that's not a requirement, just the convention.

98
00:04:41,960 --> 00:04:44,210
Alrighty, this looks really good so far.

99
00:04:44,210 --> 00:04:45,900
So let's go ahead and move to the next video

100
00:04:45,900 --> 00:04:47,600
and let's start writing some code.

