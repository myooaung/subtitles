WEBVTT
1
00:00:01.090 --> 00:00:02.230
<v Instructor>All right, in step six,</v>

2
00:00:02.230 --> 00:00:03.870
modify the Spring Boot app,

3
00:00:03.870 --> 00:00:05.920
the REST Repository needs a new method.

4
00:00:05.920 --> 00:00:09.070
So currently the Spring Boot app returns the products

5
00:00:09.070 --> 00:00:10.550
regardless of category.

6
00:00:10.550 --> 00:00:13.650
We need to modify this to only return products

7
00:00:13.650 --> 00:00:15.510
for a given category id

8
00:00:19.400 --> 00:00:23.480
Spring Data REST and Spring Data JPA supports query methods.

9
00:00:23.480 --> 00:00:26.870
So behind the scenes Spring will construct a query

10
00:00:26.870 --> 00:00:29.460
based on method naming conventions.

11
00:00:29.460 --> 00:00:32.250
Ooh, magic, magic.

12
00:00:32.250 --> 00:00:37.250
So methods starting with findBy, readBy, queryBy, and so on,

13
00:00:37.550 --> 00:00:39.863
those are called query methods.

14
00:00:41.890 --> 00:00:43.940
In this example here, in my repository

15
00:00:43.940 --> 00:00:46.833
I'm going to add this new method, findByCategoryId.

16
00:00:48.970 --> 00:00:51.500
So since this method starts with findBy,

17
00:00:51.500 --> 00:00:53.220
it's known as a query method

18
00:00:53.220 --> 00:00:56.100
and so Spring will do some special processing

19
00:00:56.100 --> 00:00:57.563
on this given method.

20
00:00:59.590 --> 00:01:01.490
All right, so let's kind of break this down a bit.

21
00:01:01.490 --> 00:01:04.020
So here's our query method, so findBy.

22
00:01:04.020 --> 00:01:06.140
It says, hey that's a query method

23
00:01:06.140 --> 00:01:08.490
and then we have by CategoryId.

24
00:01:08.490 --> 00:01:10.140
So it's going to match by CategoryId

25
00:01:12.020 --> 00:01:14.780
and then we pass in this RequestParam("id").

26
00:01:14.780 --> 00:01:19.430
So we tell it hey, use this parameter value to match all.

27
00:01:19.430 --> 00:01:22.620
So behind the scenes Spring will actually

28
00:01:22.620 --> 00:01:24.460
look at that method name.

29
00:01:24.460 --> 00:01:26.900
It'll parse that method name

30
00:01:26.900 --> 00:01:30.170
and Spring will execute a query similar to this.

31
00:01:30.170 --> 00:01:32.830
So it'll say SELECT * from product,

32
00:01:32.830 --> 00:01:34.799
because we have this product repository,

33
00:01:34.799 --> 00:01:39.799
where category_id equals whatever values being passed in.

34
00:01:40.440 --> 00:01:42.250
So again this is magic here.

35
00:01:42.250 --> 00:01:46.000
Spring is actually creating and executing a query

36
00:01:46.000 --> 00:01:48.150
based on your method name.

37
00:01:48.150 --> 00:01:52.723
Ah, scary, fun, exciting, magic.

38
00:01:55.050 --> 00:01:57.180
All right, so a bit more on these query methods.

39
00:01:57.180 --> 00:02:00.370
So you can actually provide your own custom query

40
00:02:00.370 --> 00:02:02.640
using the @Query annotation,

41
00:02:02.640 --> 00:02:04.090
because you say, hey you know what,

42
00:02:04.090 --> 00:02:06.580
I don't like the magic of the method name,

43
00:02:06.580 --> 00:02:11.100
or I have a very complex, advance query for my business

44
00:02:11.100 --> 00:02:13.680
that I can't write it out as a given method.

45
00:02:13.680 --> 00:02:15.530
Don't worry, you can use @Query

46
00:02:15.530 --> 00:02:17.763
and you can give your own query for that.

47
00:02:22.520 --> 00:02:24.890
The query methods also have support for conditionals

48
00:02:24.890 --> 00:02:28.360
like and, or, like, sort, and so on.

49
00:02:28.360 --> 00:02:29.790
For details on this topic

50
00:02:29.790 --> 00:02:31.670
you can see the Query Methods section

51
00:02:31.670 --> 00:02:34.030
in the Spring Data Reference Manual

52
00:02:34.030 --> 00:02:35.780
and here's the link here on the slide.

53
00:02:35.780 --> 00:02:36.820
You can go to this link.

54
00:02:36.820 --> 00:02:39.260
It'll redirect you to the official documentation

55
00:02:39.260 --> 00:02:41.910
and you can read all the details on this given topic.

56
00:02:44.550 --> 00:02:46.290
All right now a bit more on this method

57
00:02:46.290 --> 00:02:48.202
as far as some other items that I didn't discuss yet,

58
00:02:48.202 --> 00:02:50.020
Page and Pageable.

59
00:02:50.020 --> 00:02:53.200
So these items provide support for pagination.

60
00:02:53.200 --> 00:02:55.400
So in this given method definition here,

61
00:02:55.400 --> 00:02:58.100
note here on the left hand side, it has Page&lt;Product&gt;.

62
00:02:58.100 --> 00:03:01.140
So Page is a sublist of a list of object.

63
00:03:01.140 --> 00:03:04.270
So think your have 1,000 object out there.

64
00:03:04.270 --> 00:03:06.230
Then you only want the first 10 or first 20.

65
00:03:06.230 --> 00:03:08.150
That's a Page, so it's a list.

66
00:03:08.150 --> 00:03:09.550
It's just a small list.

67
00:03:09.550 --> 00:03:12.360
This Page has information such as total elements,

68
00:03:12.360 --> 00:03:15.240
total pages, current position, and so on

69
00:03:17.060 --> 00:03:18.890
and then also we have this Pageable.

70
00:03:18.890 --> 00:03:21.710
So Pageable represents pagination information.

71
00:03:21.710 --> 00:03:24.750
So it has information such as which page number to go to,

72
00:03:24.750 --> 00:03:26.910
the page size, the previous reference,

73
00:03:26.910 --> 00:03:28.410
the next reference, and so on

74
00:03:29.350 --> 00:03:32.180
and these objects are created automatically for you,

75
00:03:32.180 --> 00:03:35.313
behind the scenes, by the Spring framework.

76
00:03:38.100 --> 00:03:40.010
All right, so now that we have a method defined,

77
00:03:40.010 --> 00:03:42.720
Spring Data REST will automatically expose

78
00:03:42.720 --> 00:03:45.855
REST endpoints for the query methods.

79
00:03:45.855 --> 00:03:47.811
So any query method that you have

80
00:03:47.811 --> 00:03:49.343
that starts with findBy, readBy, queryBy,

81
00:03:50.496 --> 00:03:54.600
then they'll be available under your /search/

82
00:03:54.600 --> 00:03:56.543
whatever the query method name is.

83
00:03:58.090 --> 00:04:01.077
So in our example, our findByCategoryId

84
00:04:01.979 --> 00:04:03.060
then this will be under

85
00:04:03.060 --> 00:04:08.060
localhost:8080/api/products/search/findByCategoryId.

86
00:04:09.610 --> 00:04:11.680
So it matches on the actual method name

87
00:04:16.180 --> 00:04:18.270
and now with this new item here that we have

88
00:04:18.270 --> 00:04:22.010
the question is well, how do we pass data

89
00:04:22.010 --> 00:04:24.360
to this given REST API?

90
00:04:24.360 --> 00:04:28.270
Well we simply use the ?id= and then we plug in the value.

91
00:04:28.270 --> 00:04:29.680
So that's the id of one.

92
00:04:29.680 --> 00:04:33.030
So that's the CategoryId of one, or two, or three, or four.

93
00:04:33.030 --> 00:04:34.682
So that's how you pass the given data

94
00:04:34.682 --> 00:04:37.463
to this given Spring Data REST API.

95
00:04:40.840 --> 00:04:42.650
All right, so in our final step here,

96
00:04:42.650 --> 00:04:44.280
step seven, almost done.

97
00:04:44.280 --> 00:04:46.030
When need to update the Angular Service

98
00:04:46.030 --> 00:04:49.480
to call the new URL on our Spring Boot application.

99
00:04:49.480 --> 00:04:51.663
So here's our ProductService.TS.

100
00:04:53.060 --> 00:04:55.780
We have our base url, we have this method getProductList.

101
00:04:55.780 --> 00:04:57.290
We're going to add this new parameter here

102
00:04:57.290 --> 00:05:00.190
theCategoryId, that's a number,

103
00:05:00.190 --> 00:05:02.330
and then we simply set up the reference here.

104
00:05:02.330 --> 00:05:05.900
So baseUrl/search/findByCategoryId

105
00:05:06.900 --> 00:05:11.280
and then we simply associate or append the CategoryId

106
00:05:11.280 --> 00:05:13.770
that was passed into this given method.

107
00:05:13.770 --> 00:05:16.520
So it'll give us Id of one, two, three, or four

108
00:05:16.520 --> 00:05:17.960
based on the parameter that we passed

109
00:05:17.960 --> 00:05:21.793
to this given Angular method in our ProductService.

110
00:05:24.350 --> 00:05:26.860
All righty, so just a recap on our development process.

111
00:05:26.860 --> 00:05:30.000
We have seven steps for setting up this functionality.

112
00:05:30.000 --> 00:05:31.090
In the next set of videos

113
00:05:31.090 --> 00:05:32.900
we'll actually move into our Id E

114
00:05:32.900 --> 00:05:34.290
and we'll start writing the code.

115
00:05:34.290 --> 00:05:36.673
So I'll see you in the next video.

