WEBVTT
1
00:00:01.201 --> 00:00:02.034
<v Instructor>In this video</v>

2
00:00:02.034 --> 00:00:03.523
we'll cover the Angular Front End.

3
00:00:06.870 --> 00:00:09.060
So we'll create the Angular Front End components

4
00:00:09.060 --> 00:00:12.670
to retrieve data from the Spring Boot REST API's.

5
00:00:12.670 --> 00:00:13.850
So we've already done the work

6
00:00:13.850 --> 00:00:15.800
on the back end of developing a Spring Boot

7
00:00:15.800 --> 00:00:17.600
and exposing those API's.

8
00:00:17.600 --> 00:00:19.210
Now we're focusing here on the front end

9
00:00:19.210 --> 00:00:21.623
of building out our Angular Front End code.

10
00:00:25.240 --> 00:00:27.390
Alrighty, so let's look at our development process.

11
00:00:27.390 --> 00:00:28.460
So the first thing that we'll do is

12
00:00:28.460 --> 00:00:30.330
we'll create our Angular project.

13
00:00:30.330 --> 00:00:32.130
Then we'll create Angular components

14
00:00:32.130 --> 00:00:34.120
for showing the product-list.

15
00:00:34.120 --> 00:00:37.090
Next we'll develop the TypeScript class for our product.

16
00:00:37.090 --> 00:00:41.190
Then we'll create an Angular service to call the REST API's.

17
00:00:41.190 --> 00:00:43.110
And then we'll update our Angular component

18
00:00:43.110 --> 00:00:46.260
to subscribe to data from the Angular service.

19
00:00:46.260 --> 00:00:49.020
And then we'll display the data in an HTML page.

20
00:00:49.020 --> 00:00:51.290
And finally, we'll add cross origin support

21
00:00:51.290 --> 00:00:52.840
to our Spring Boot application.

22
00:00:56.232 --> 00:00:57.770
So the first step is really simple.

23
00:00:57.770 --> 00:01:00.600
We'll create a new project using the Angular CLI.

24
00:01:00.600 --> 00:01:03.723
We'll use the ng new angular-ecommerce.

25
00:01:06.930 --> 00:01:09.220
And then step two of creating the Angular component

26
00:01:09.220 --> 00:01:10.320
for the product list,

27
00:01:10.320 --> 00:01:12.740
we make use of ng generate component,

28
00:01:12.740 --> 00:01:15.293
and we say components/product-list.

29
00:01:21.420 --> 00:01:23.640
In step three we'll develop our TypeScript class

30
00:01:23.640 --> 00:01:24.473
for our product.

31
00:01:24.473 --> 00:01:26.490
So this is just a very basic TypeScript class,

32
00:01:26.490 --> 00:01:28.350
it's going to to hold the data for us.

33
00:01:28.350 --> 00:01:32.750
So we make use of this ng generate class, common/product.

34
00:01:32.750 --> 00:01:35.840
And they'll create a very basic class, that's just a shell.

35
00:01:35.840 --> 00:01:37.970
And then we'll add in these properties

36
00:01:37.970 --> 00:01:39.510
for our given product.

37
00:01:39.510 --> 00:01:41.390
And these are the same properties that are exposed

38
00:01:41.390 --> 00:01:42.823
by the REST API.

39
00:01:46.480 --> 00:01:48.490
In step four we'll create an Angular service

40
00:01:48.490 --> 00:01:50.600
to call the REST API's.

41
00:01:50.600 --> 00:01:53.920
So an Angular service is code developed in TypeScript.

42
00:01:53.920 --> 00:01:55.530
The service is a helper class

43
00:01:55.530 --> 00:01:57.312
that provides desired functionality,

44
00:01:57.312 --> 00:02:00.660
and it's part of your Angular application

45
00:02:00.660 --> 00:02:04.080
and it runs in the web browser client-side.

46
00:02:04.080 --> 00:02:06.780
So don't let the word service fool you here.

47
00:02:06.780 --> 00:02:09.890
It's really just a reusable class or a helper class

48
00:02:09.890 --> 00:02:12.320
that runs as part of our Angular application

49
00:02:12.320 --> 00:02:15.653
and it runs in the web browser on the client-side.

50
00:02:18.450 --> 00:02:20.970
And here's a diagram to kind of show you the interaction here.

51
00:02:20.970 --> 00:02:23.390
So on the back end, we have our Spring Boot back end

52
00:02:23.390 --> 00:02:25.130
exposing those REST API's.

53
00:02:25.130 --> 00:02:28.090
Now we're doing the front end code in our Angular project.

54
00:02:28.090 --> 00:02:29.470
And so our Angular project

55
00:02:29.470 --> 00:02:31.170
is will have all the GUI components,

56
00:02:31.170 --> 00:02:34.560
but it'll also have service or multiple services.

57
00:02:34.560 --> 00:02:37.350
So these services, again, just reusable classes,

58
00:02:37.350 --> 00:02:40.020
or helper classes, that run in the web browser

59
00:02:40.020 --> 00:02:42.350
on the client-side and we create these services

60
00:02:42.350 --> 00:02:43.923
using TypeScript code.

61
00:02:47.760 --> 00:02:49.590
Angular provides a REST client,

62
00:02:49.590 --> 00:02:52.530
and this client is called the HTTPClient.

63
00:02:52.530 --> 00:02:56.030
We need to add support for this in our application module.

64
00:02:56.030 --> 00:02:58.729
So in the imports section of our application module,

65
00:02:58.729 --> 00:03:02.903
we need to add a reference here for the HTTPClientModule.

66
00:03:06.200 --> 00:03:08.940
Alrighty, so now here's the code for our service.

67
00:03:08.940 --> 00:03:11.360
So a couple of things here for our service.

68
00:03:11.360 --> 00:03:13.930
Up top, our service is going to be injected

69
00:03:13.930 --> 00:03:15.320
into our components.

70
00:03:15.320 --> 00:03:16.920
Angular has built-in support

71
00:03:16.920 --> 00:03:19.100
for a dependency injection framework.

72
00:03:19.100 --> 00:03:22.738
So we simply annotate this class with @injectable,

73
00:03:22.738 --> 00:03:24.140
providedIn: "root".

74
00:03:24.140 --> 00:03:26.630
So this basically says, hey, here's a class

75
00:03:26.630 --> 00:03:28.970
and you can inject it as a dependency

76
00:03:28.970 --> 00:03:31.530
into another component or class.

77
00:03:31.530 --> 00:03:33.200
So the providedIn: "root" means that

78
00:03:33.200 --> 00:03:35.340
this class can be injected globally.

79
00:03:35.340 --> 00:03:37.340
So it's not specific to a given module.

80
00:03:37.340 --> 00:03:38.930
You can use it anywhere

81
00:03:38.930 --> 00:03:41.450
within this given Angular application.

82
00:03:41.450 --> 00:03:43.090
So here's our class ProductService.

83
00:03:43.090 --> 00:03:44.810
We have the baseURL for right now.

84
00:03:44.810 --> 00:03:47.940
We simply hard coded localhost 8080 API products.

85
00:03:47.940 --> 00:03:50.900
I'll show you how to put it in the config files later.

86
00:03:50.900 --> 00:03:52.640
And now moving to our constructor,

87
00:03:52.640 --> 00:03:56.164
our class has a dependency on the HTTPClient.

88
00:03:56.164 --> 00:03:58.340
So we can inject this client

89
00:03:58.340 --> 00:04:00.000
by making use of the constructor here.

90
00:04:00.000 --> 00:04:01.280
We get the private reference

91
00:04:01.280 --> 00:04:03.760
and then Angular will handle injecting

92
00:04:03.760 --> 00:04:07.950
this given httpClient into our given service.

93
00:04:07.950 --> 00:04:09.920
And so then we have getProductList.

94
00:04:09.920 --> 00:04:13.610
This method will return an observable of product array.

95
00:04:13.610 --> 00:04:14.810
And so inside of the coding here,

96
00:04:14.810 --> 00:04:19.810
we have return this.httpClient.getresponse, this.baseURL

97
00:04:20.385 --> 00:04:21.910
We're going to make use of a pipe and

98
00:04:21.910 --> 00:04:24.220
we're going to map our data to a response.

99
00:04:24.220 --> 00:04:27.820
And we say response._embedded.products.

100
00:04:27.820 --> 00:04:29.590
So that's the JSON, it's coming back to

101
00:04:29.590 --> 00:04:31.370
that spring data REST API.

102
00:04:31.370 --> 00:04:33.100
Remember that underscore embedded.

103
00:04:33.100 --> 00:04:34.420
So at the bottom here,

104
00:04:34.420 --> 00:04:36.490
we have this interface called get response.

105
00:04:36.490 --> 00:04:39.000
It'll basically take that underscore embedded,

106
00:04:39.000 --> 00:04:41.870
and then take those products inside of embedded

107
00:04:41.870 --> 00:04:45.470
and then map those to a given product.

108
00:04:45.470 --> 00:04:47.680
So this piece of code here basically handles

109
00:04:47.680 --> 00:04:51.840
grabbing that JSON data, unwrapping it, pulling it apart,

110
00:04:51.840 --> 00:04:56.023
and then placing that data into an array of products.

111
00:04:57.040 --> 00:04:59.270
Now at this point, this is just an observable,

112
00:04:59.270 --> 00:05:01.130
we don't execute that Code until we actually have

113
00:05:01.130 --> 00:05:03.220
a listener or subscriber on the code,

114
00:05:03.220 --> 00:05:05.170
and we'll cover that on the next slide.

