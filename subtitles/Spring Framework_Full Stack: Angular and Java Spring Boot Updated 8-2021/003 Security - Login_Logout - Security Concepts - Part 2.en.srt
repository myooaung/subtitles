1
00:00:02,830 --> 00:00:05,040
<v Instructor>So OAuth 2 is an authorization framework</v>

2
00:00:05,040 --> 00:00:07,900
that enables applications to have limited access

3
00:00:07,900 --> 00:00:11,920
to a resource on behalf of a resource owner, the user,

4
00:00:11,920 --> 00:00:14,230
for example you may have had certain scenarios

5
00:00:14,230 --> 00:00:16,230
where you want it to share images

6
00:00:16,230 --> 00:00:18,770
from your Google Drive to another application.

7
00:00:18,770 --> 00:00:20,470
And you may have used some

8
00:00:20,470 --> 00:00:22,170
of the links within the application,

9
00:00:22,170 --> 00:00:23,390
the browser will prompt you says,

10
00:00:23,390 --> 00:00:25,960
Hey, this given app, and this example here,

11
00:00:25,960 --> 00:00:29,290
Cool Course Uploader wants to view and manage files

12
00:00:29,290 --> 00:00:31,560
in your Google drive and you can give yes or no

13
00:00:31,560 --> 00:00:35,380
if you want to allow them to have permissions to do that.

14
00:00:35,380 --> 00:00:38,220
So behind the scenes OAuth 2 has being used

15
00:00:38,220 --> 00:00:40,313
to provide this type of functionality.

16
00:00:43,450 --> 00:00:46,160
So let's kind of look at this with an example here.

17
00:00:46,160 --> 00:00:50,200
So we have this resource owner with this protected resource,

18
00:00:50,200 --> 00:00:53,300
this client app, and this authorization server,

19
00:00:53,300 --> 00:00:55,570
all of these players here are going to kind of play together.

20
00:00:55,570 --> 00:00:59,530
So the resource owner in the top left, that's the user,

21
00:00:59,530 --> 00:01:01,490
okay, like your user account.

22
00:01:01,490 --> 00:01:04,380
Over on the top right, the protected resource,

23
00:01:04,380 --> 00:01:07,380
that's the Google Drive with your files and so forth.

24
00:01:07,380 --> 00:01:09,630
The client app in the bottom left

25
00:01:09,630 --> 00:01:11,920
that's maybe some application that you're using

26
00:01:11,920 --> 00:01:14,300
to try and integrate with your Google Drive

27
00:01:14,300 --> 00:01:16,660
and then the authorization server in the bottom right,

28
00:01:16,660 --> 00:01:18,310
this is the person who will actually

29
00:01:18,310 --> 00:01:20,850
have information as far as the permissions and roles

30
00:01:20,850 --> 00:01:22,010
and so forth as forth,

31
00:01:22,010 --> 00:01:25,140
as what a user can do for accessing different resources.

32
00:01:25,140 --> 00:01:26,610
So those are the big players here.

33
00:01:26,610 --> 00:01:29,220
Now let's look at a nice sequence diagram

34
00:01:29,220 --> 00:01:31,353
to see how they all play together.

35
00:01:34,440 --> 00:01:36,210
So we have this resource owner

36
00:01:36,210 --> 00:01:37,850
and we have this client application.

37
00:01:37,850 --> 00:01:38,683
So the client app says,

38
00:01:38,683 --> 00:01:40,757
"Hey I need to request authorization.

39
00:01:40,757 --> 00:01:43,777
"So, hey user can I access your Google Drive

40
00:01:43,777 --> 00:01:46,020
"to do X, Y and Z?"

41
00:01:46,020 --> 00:01:49,070
And the resource owner can grant authorization

42
00:01:49,070 --> 00:01:51,560
and then sends it out to the authorization server.

43
00:01:51,560 --> 00:01:53,980
So the authorization server will provide an Auth token,

44
00:01:53,980 --> 00:01:55,520
to the client application.

45
00:01:55,520 --> 00:01:57,300
The client app will use that Auth off token

46
00:01:57,300 --> 00:02:00,260
to also requests a access token.

47
00:02:00,260 --> 00:02:02,900
So this access token will actually have the details

48
00:02:02,900 --> 00:02:06,440
as far as how they can access this given resource

49
00:02:06,440 --> 00:02:10,270
and also we'll have details as far as what they can do.

50
00:02:10,270 --> 00:02:11,850
So then they'll send over the access token

51
00:02:11,850 --> 00:02:14,120
to the protected resource, and then they can go ahead

52
00:02:14,120 --> 00:02:16,900
and use the actual resource and so forth.

53
00:02:16,900 --> 00:02:18,130
At our very high level,

54
00:02:18,130 --> 00:02:20,830
this is how the interaction or interchange works

55
00:02:20,830 --> 00:02:23,773
use of OAuth 2 for authorization.

56
00:02:27,564 --> 00:02:28,950
So now we have OpenID Connect.

57
00:02:28,950 --> 00:02:33,950
So OpenID Connect is an identity layer on top of OAuth 2.

58
00:02:34,000 --> 00:02:37,430
So OAuth 2 really only provide support for authorization,

59
00:02:37,430 --> 00:02:40,510
OpenID Connect will allow you to have authentication.

60
00:02:40,510 --> 00:02:42,290
So basically this allows clients to receive

61
00:02:42,290 --> 00:02:46,370
identity information about authenticated resource owners

62
00:02:46,370 --> 00:02:50,020
or users, and so they'll provide a special ID token

63
00:02:50,020 --> 00:02:53,260
that has information about the user, other details

64
00:02:53,260 --> 00:02:55,410
and anything else that's been published

65
00:02:55,410 --> 00:02:57,603
via the authorization server.

66
00:03:00,700 --> 00:03:03,000
So I've been mentioning a lot about tokens.

67
00:03:03,000 --> 00:03:06,500
Well, there's a standard way of describing a token

68
00:03:06,500 --> 00:03:10,460
and that's using the JSON Web Token or JWT.

69
00:03:10,460 --> 00:03:13,700
And then also just a quick little side note here, JWT,

70
00:03:13,700 --> 00:03:17,360
you may hear some people also refer to this as, JAWT,

71
00:03:17,360 --> 00:03:19,550
J-A-W-T as far as pronouncing it.

72
00:03:19,550 --> 00:03:22,013
So it's up to you if you want to use JAWT or JWT.

73
00:03:25,170 --> 00:03:26,700
It's an open standard that defines

74
00:03:26,700 --> 00:03:29,550
a self-contained way of describing tokens

75
00:03:29,550 --> 00:03:33,790
at a secure and digitally signed to guarantee integrity.

76
00:03:33,790 --> 00:03:37,437
And it's used by OAuth and OpenID Connect.

77
00:03:37,437 --> 00:03:40,220
And so this token is kind of the item that's passed

78
00:03:40,220 --> 00:03:42,240
back and forth, like in that previous example,

79
00:03:42,240 --> 00:03:45,930
I said as far as OAuth tokens, access tokens, ID tokens,

80
00:03:45,930 --> 00:03:47,950
they all make use of the standard way

81
00:03:47,950 --> 00:03:52,123
of describing the tokens using JSON Web Tokens.

82
00:03:55,560 --> 00:03:57,440
So this JSON Web Token,

83
00:03:57,440 --> 00:04:01,150
well-defined way of describing the format of a token.

84
00:04:01,150 --> 00:04:04,750
So we have a header, that basically describes the algorithm

85
00:04:04,750 --> 00:04:06,490
and the type of token that they're using.

86
00:04:06,490 --> 00:04:08,620
The payload, so in this case,

87
00:04:08,620 --> 00:04:11,250
any type of content here, in this case we can have a name

88
00:04:11,250 --> 00:04:13,510
for an identity token, Susan Public.

89
00:04:13,510 --> 00:04:15,210
And then we can have the actual signature.

90
00:04:15,210 --> 00:04:17,950
So these JSON Web Tokens like I mentioned earlier,

91
00:04:17,950 --> 00:04:20,460
they're signed to preserve or guarantee

92
00:04:20,460 --> 00:04:22,303
the integrity of the token.

93
00:04:25,650 --> 00:04:27,870
Alright, so this brings us up to authorization server.

94
00:04:27,870 --> 00:04:29,960
So what exactly is an authorization server?

95
00:04:29,960 --> 00:04:32,050
Well, at a very high level you can say that

96
00:04:32,050 --> 00:04:34,200
an authorization server can generate tokens

97
00:04:34,200 --> 00:04:35,990
and also define security policies.

98
00:04:35,990 --> 00:04:39,440
Now, not all authorization servers are created equal.

99
00:04:39,440 --> 00:04:41,870
Some offer more features than others.

100
00:04:41,870 --> 00:04:44,480
You can actually create some very simple solutions

101
00:04:44,480 --> 00:04:47,010
for authorization servers where you could create

102
00:04:47,010 --> 00:04:49,330
your own simple solution with code

103
00:04:49,330 --> 00:04:52,310
and you can run all the low-level coding for that.

104
00:04:52,310 --> 00:04:55,150
So I normally recommend against doing this because,

105
00:04:55,150 --> 00:04:57,820
you could easily expose,

106
00:04:57,820 --> 00:05:00,070
your code could be vulnerable to some security holes

107
00:05:00,070 --> 00:05:01,070
or flaws or whatever.

108
00:05:01,070 --> 00:05:04,580
So you can do the very basic, you know, hobby project,

109
00:05:04,580 --> 00:05:07,770
we can project with Auth server, but for anything real time,

110
00:05:07,770 --> 00:05:10,163
you need a more enterprise solution.

111
00:05:11,010 --> 00:05:13,310
So regarding real-time enterprise solutions

112
00:05:13,310 --> 00:05:14,730
these are off the shelf solutions

113
00:05:14,730 --> 00:05:16,780
for companies that specialize in security.

114
00:05:16,780 --> 00:05:19,110
So that's all they do every day is security.

115
00:05:19,110 --> 00:05:21,020
They have full-time employees

116
00:05:21,020 --> 00:05:23,890
who simply focus on writing secure code

117
00:05:23,890 --> 00:05:25,900
or providing secure services.

118
00:05:25,900 --> 00:05:30,000
They make use of these services via cloud-based solutions

119
00:05:30,000 --> 00:05:32,070
and also on-premise solutions.

120
00:05:32,070 --> 00:05:34,150
And then we'll take a look at some of these solutions

121
00:05:34,150 --> 00:05:35,763
in the upcoming videos.

122
00:05:39,700 --> 00:05:40,880
Now, as I mentioned earlier,

123
00:05:40,880 --> 00:05:45,300
this security is a huge topic, very broad, very wide.

124
00:05:45,300 --> 00:05:47,220
So if you'd like to get more info on OAuth 2,

125
00:05:47,220 --> 00:05:51,990
you can go to oauth2.net, for OpenID Connect, openid.net

126
00:05:51,990 --> 00:05:55,843
and also JSON Web Tokens at jwt.io.

