1
00:00:01,130 --> 00:00:01,963
<v Instructor>In this video,</v>

2
00:00:01,963 --> 00:00:04,613
we'll cover secure communication with HTTPS.

3
00:00:08,750 --> 00:00:11,340
So we'd like to have secure communication

4
00:00:11,340 --> 00:00:12,620
for our application

5
00:00:12,620 --> 00:00:15,770
because in the future, we'd like to process credit cards.

6
00:00:15,770 --> 00:00:18,660
And so we'd like to have this data encrypted.

7
00:00:18,660 --> 00:00:21,010
So, between our web browser and our Angular App,

8
00:00:21,010 --> 00:00:24,340
we'd like to have secure communication or encrypted data.

9
00:00:24,340 --> 00:00:27,160
And also between our Angular App and our Spring Boot App,

10
00:00:27,160 --> 00:00:29,440
we'd also like for the data to be encrypted.

11
00:00:29,440 --> 00:00:31,380
And so then we can access our application

12
00:00:31,380 --> 00:00:33,713
by going to https://localhost:4200,

13
00:00:35,167 --> 00:00:37,087
and this will handle all of the secure communication

14
00:00:37,087 --> 00:00:40,093
and encryption for us behind the scenes.

15
00:00:43,400 --> 00:00:45,640
So what exactly is HTTPS?

16
00:00:45,640 --> 00:00:48,790
Well, it's the Hypertext Transfer Protocol Secure.

17
00:00:48,790 --> 00:00:50,530
It's the protocol for encrypting data

18
00:00:50,530 --> 00:00:52,940
between a web browser and a server,

19
00:00:52,940 --> 00:00:56,250
and it uses the TLS protocol behind the scenes,

20
00:00:56,250 --> 00:00:58,120
Transport Layer Security.

21
00:00:58,120 --> 00:01:00,180
Now you may have heard of SSL.

22
00:01:00,180 --> 00:01:03,400
Well, TLS is the successor of SSL.

23
00:01:03,400 --> 00:01:06,090
TLS is more secure than SSL.

24
00:01:06,090 --> 00:01:08,930
However, in the industry, people still use these terms

25
00:01:08,930 --> 00:01:12,750
interchangeably, so you'll see blog posts referring to SSL,

26
00:01:12,750 --> 00:01:14,830
you'll see tools and utilities and so forth

27
00:01:14,830 --> 00:01:15,973
referring to SSL.

28
00:01:19,290 --> 00:01:21,710
Using HTTPS, the nice thing about it

29
00:01:21,710 --> 00:01:24,730
is that there's no changes required to your source code.

30
00:01:24,730 --> 00:01:26,610
You simply configure a server to run

31
00:01:26,610 --> 00:01:28,660
using secure keys and certificate.

32
00:01:28,660 --> 00:01:31,110
Then you able to access your site using

33
00:01:31,110 --> 00:01:35,850
HTTPS:// whatever your host name is, localhost:4200.

34
00:01:37,290 --> 00:01:39,110
Make note of the use of HTTPS.

35
00:01:39,110 --> 00:01:40,990
That means that the data is being encrypted

36
00:01:40,990 --> 00:01:42,920
behind the scenes for you automatically

37
00:01:42,920 --> 00:01:45,483
between the web browser and the web server.

38
00:01:47,710 --> 00:01:49,890
Okay, so let's talk about keys and certs.

39
00:01:49,890 --> 00:01:52,550
To run securely, you'll need keys and certificates

40
00:01:52,550 --> 00:01:54,460
for your given application.

41
00:01:54,460 --> 00:01:57,210
This basically provides proof of your server's identity,

42
00:01:57,210 --> 00:02:00,240
meaning your domain name and it's reviewed and signed

43
00:02:00,240 --> 00:02:01,800
by a trusted certificate authority,

44
00:02:01,800 --> 00:02:05,950
such as GoDaddy, Verisign, AWS, et cetera.

45
00:02:05,950 --> 00:02:09,066
Effectively, it's a mutually trusted third party

46
00:02:09,066 --> 00:02:12,900
that can vouch or verify that you are who you say you are

47
00:02:12,900 --> 00:02:14,830
in terms of server identity.

48
00:02:14,830 --> 00:02:17,670
So, if I'm running something for luvtocode.com,

49
00:02:17,670 --> 00:02:19,160
this'll verify that I actually own

50
00:02:19,160 --> 00:02:20,730
the luvtocode domain name,

51
00:02:20,730 --> 00:02:22,840
and I am the Luv To Code company.

52
00:02:22,840 --> 00:02:25,890
A similar thing for Amazon, amazon.com.

53
00:02:25,890 --> 00:02:29,850
It's trusted that that given site is really amazon.com

54
00:02:29,850 --> 00:02:32,180
and not someone trying to fake or pretend

55
00:02:32,180 --> 00:02:33,400
that they're amazon.com.

56
00:02:33,400 --> 00:02:34,970
So that's the whole idea of a security,

57
00:02:34,970 --> 00:02:36,720
basically a stamp of approval

58
00:02:36,720 --> 00:02:38,753
from a trusted certificate authority.

59
00:02:40,530 --> 00:02:41,500
Now in the real world,

60
00:02:41,500 --> 00:02:44,410
you would normally have to pay for a certificate,

61
00:02:44,410 --> 00:02:46,090
but for dev and demo purposes,

62
00:02:46,090 --> 00:02:48,090
we're going to save some money here,

63
00:02:48,090 --> 00:02:51,310
and we'll create what we call self-signed certificates,

64
00:02:51,310 --> 00:02:54,360
and these are really good for dev and demo purposes,

65
00:02:54,360 --> 00:02:57,650
so there's no need for us to buy an actual certificate.

66
00:02:57,650 --> 00:02:58,740
The only caveat here

67
00:02:58,740 --> 00:03:00,510
is that the browser's going to warn about this.

68
00:03:00,510 --> 00:03:01,790
They're going to give you a warning

69
00:03:01,790 --> 00:03:04,510
when you make use of self-signed certificates,

70
00:03:04,510 --> 00:03:07,460
because no one's been able to actually vouch or verify

71
00:03:07,460 --> 00:03:09,010
that you are who you actually say you are

72
00:03:09,010 --> 00:03:10,270
because it's self-signed.

73
00:03:10,270 --> 00:03:12,280
You simply made this up.

74
00:03:12,280 --> 00:03:15,703
But we can safely ignore this for dev/demo purposes.

75
00:03:18,780 --> 00:03:20,470
Here's our development process.

76
00:03:20,470 --> 00:03:21,450
So in the first step,

77
00:03:21,450 --> 00:03:24,310
we're going to generate a key and a self-signed certificate,

78
00:03:24,310 --> 00:03:25,960
and then we're going to run the Angular App

79
00:03:25,960 --> 00:03:28,130
with the key and the self-signed certificate.

80
00:03:28,130 --> 00:03:29,230
And then finally we'll update

81
00:03:29,230 --> 00:03:31,863
our Spring Boot App with the new URL.

82
00:03:34,680 --> 00:03:36,810
And so what we'll do here in this set of videos

83
00:03:36,810 --> 00:03:38,710
is that we'll actually encrypt the data

84
00:03:38,710 --> 00:03:41,630
between the web browser and the Angular App.

85
00:03:41,630 --> 00:03:43,210
Now there's also some additional work

86
00:03:43,210 --> 00:03:45,320
we'd have to do on the backend to encrypt data

87
00:03:45,320 --> 00:03:47,550
between the Angular App and the Spring Boot App.

88
00:03:47,550 --> 00:03:50,010
I'll cover that later in another set of videos.

89
00:03:50,010 --> 00:03:50,843
So for right now,

90
00:03:50,843 --> 00:03:52,900
we're simply focusing on encrypting the data

91
00:03:52,900 --> 00:03:56,143
between the web browser and the Angular Application.

92
00:03:59,740 --> 00:04:01,110
Step one of generating the key

93
00:04:01,110 --> 00:04:02,470
and the self-signed certificate.

94
00:04:02,470 --> 00:04:04,170
We can accomplish this by using

95
00:04:04,170 --> 00:04:06,530
a free utility called openssl.

96
00:04:06,530 --> 00:04:10,010
So here's a sample command here for using openssl.

97
00:04:10,010 --> 00:04:13,810
We give openssl space req for request.

98
00:04:13,810 --> 00:04:18,180
And then we give the name of the output file, localhost.key.

99
00:04:18,180 --> 00:04:19,110
And then we give the name

100
00:04:19,110 --> 00:04:22,360
of the output certificate, localhost.crt.

101
00:04:22,360 --> 00:04:25,230
And then we give some additional configurations.

102
00:04:25,230 --> 00:04:28,490
Now, I'll cover all these configs in a separate document.

103
00:04:28,490 --> 00:04:31,770
So, at luv2code.com/openssl-setup,

104
00:04:31,770 --> 00:04:33,570
I give you all the details and steps

105
00:04:33,570 --> 00:04:35,630
as far as the additional configs,

106
00:04:35,630 --> 00:04:37,970
because it varies depending on the operating system

107
00:04:37,970 --> 00:04:41,050
that you're using: Microsoft Windows, Mac, or Linux.

108
00:04:41,050 --> 00:04:43,070
But I have this document that kind of walks you through

109
00:04:43,070 --> 00:04:44,730
everything step-by-step.

110
00:04:44,730 --> 00:04:46,920
And we'll use this when we get into the coding videos

111
00:04:46,920 --> 00:04:47,933
a little bit later.

112
00:04:50,320 --> 00:04:52,360
In step two, we're going to run our Angular App

113
00:04:52,360 --> 00:04:54,270
with the key and the self-signed certificate.

114
00:04:54,270 --> 00:04:56,830
So now remember, the key and the self-signed cert

115
00:04:56,830 --> 00:04:58,803
were generated in the previous step.

116
00:05:00,150 --> 00:05:03,450
So here we'll simply edit the file, package.json.

117
00:05:03,450 --> 00:05:05,010
We'll move into the script section.

118
00:05:05,010 --> 00:05:07,390
We'll move into the section here for the start command,

119
00:05:07,390 --> 00:05:09,410
and then we'll make use of this ng serve,

120
00:05:09,410 --> 00:05:13,080
and then we enable the ssl mode by saying ssl=true.

121
00:05:13,080 --> 00:05:16,020
And then we give our reference to our ssl key file,

122
00:05:16,020 --> 00:05:18,210
localhost.key, and also give our reference

123
00:05:18,210 --> 00:05:20,683
to the certificate localhost.cert.

124
00:05:23,570 --> 00:05:25,650
Now, one thing that will slightly change

125
00:05:25,650 --> 00:05:28,060
when we actually go through and run our application.

126
00:05:28,060 --> 00:05:30,490
So now instead of doing ng serve by itself,

127
00:05:30,490 --> 00:05:32,210
we can use an npm start.

128
00:05:32,210 --> 00:05:35,010
So that's the new command for starting our Angular App.

129
00:05:35,010 --> 00:05:37,810
The npm start refers to this script update

130
00:05:37,810 --> 00:05:40,040
that we just made here in the package.json.

131
00:05:40,040 --> 00:05:41,370
So when we say npm start,

132
00:05:41,370 --> 00:05:43,620
it's going to do this big, long ng serve

133
00:05:43,620 --> 00:05:46,020
with all the ssl information for the mode,

134
00:05:46,020 --> 00:05:47,700
the key file, and the cert for us,

135
00:05:47,700 --> 00:05:50,363
just so we don't have to re-type that every time.

136
00:05:54,300 --> 00:05:56,920
Now, let's talk about the web browser warning.

137
00:05:56,920 --> 00:05:58,730
So the web browser's going to warn you

138
00:05:58,730 --> 00:06:01,930
when you're using a self-signed certificate.

139
00:06:01,930 --> 00:06:03,900
So here's a screenshot from Firefox.

140
00:06:03,900 --> 00:06:06,690
It'll say, "Warning: Potential Security Risk Ahead".

141
00:06:06,690 --> 00:06:08,117
And a similar thing here for Chrome.

142
00:06:08,117 --> 00:06:10,160
"Your connection is not private".

143
00:06:10,160 --> 00:06:12,660
All right so these are some scary screens here

144
00:06:12,660 --> 00:06:15,260
to try and alert you and make you aware of issues

145
00:06:15,260 --> 00:06:16,810
that could possibly occur.

146
00:06:16,810 --> 00:06:19,010
And if you drill down further to get more details,

147
00:06:19,010 --> 00:06:20,520
it says, "localhost:4200

148
00:06:20,520 --> 00:06:22,760
uses an invalid security certificate".

149
00:06:22,760 --> 00:06:25,420
Ooh, "The certificate is not trusted

150
00:06:25,420 --> 00:06:27,790
because it is self-signed".

151
00:06:27,790 --> 00:06:30,630
And they gave this error code self_signed_cert.

152
00:06:30,630 --> 00:06:31,463
Okay, got it.

153
00:06:31,463 --> 00:06:34,600
So, we understand that we created our own self-signed cert,

154
00:06:34,600 --> 00:06:35,960
and so we're aware of this.

155
00:06:35,960 --> 00:06:38,750
But the browser's saying, hey, it's self-signed.

156
00:06:38,750 --> 00:06:40,520
We don't know who this person is,

157
00:06:40,520 --> 00:06:42,040
and there could be a security risk.

158
00:06:42,040 --> 00:06:44,650
But for dev/demo purposes, we're okay.

159
00:06:44,650 --> 00:06:46,773
We can accept the risk and continue.

160
00:06:50,160 --> 00:06:51,620
Okay, so moving ahead to step three

161
00:06:51,620 --> 00:06:54,480
of updating the Spring Boot App with the new URL.

162
00:06:54,480 --> 00:06:56,080
So in our Spring Boot Application,

163
00:06:56,080 --> 00:06:59,380
in our application.properties for the allowed origins,

164
00:06:59,380 --> 00:07:02,760
this is a list of the actual origins that we can accept

165
00:07:02,760 --> 00:07:04,820
coming into the Spring Boot Application.

166
00:07:04,820 --> 00:07:06,700
So now since we're using HTTPS,

167
00:07:06,700 --> 00:07:08,270
then we have to update this entry here

168
00:07:08,270 --> 00:07:11,230
to HTTPS://localhost:4200,

169
00:07:11,230 --> 00:07:15,023
because our Angular App is going to be running now using HTPPS.

170
00:07:18,910 --> 00:07:21,010
And here's some additional resources for you

171
00:07:21,010 --> 00:07:22,890
because you may have some more questions like,

172
00:07:22,890 --> 00:07:24,220
well, what is HTTPS?

173
00:07:24,220 --> 00:07:25,980
I need to do a deep dive on ssl.

174
00:07:25,980 --> 00:07:27,460
I'm going to do a deep dive on TLS.

175
00:07:27,460 --> 00:07:29,730
Or, more details on keys and certificates.

176
00:07:29,730 --> 00:07:32,011
So, here's some resources that you can use

177
00:07:32,011 --> 00:07:33,820
to get you up to speed with this.

178
00:07:33,820 --> 00:07:35,219
So you can go, there's a site here,

179
00:07:35,219 --> 00:07:38,340
luv2code.com/https-additional-resources,

180
00:07:38,340 --> 00:07:41,850
and I'll redirect you to a link that has additional details

181
00:07:41,850 --> 00:07:43,300
on these topics.

182
00:07:43,300 --> 00:07:45,230
But at this point, we have enough,

183
00:07:45,230 --> 00:07:46,830
we know enough to actually get started

184
00:07:46,830 --> 00:07:50,573
with using this and using it in our full stack application.

185
00:07:51,710 --> 00:07:53,380
Let's go ahead and move to the next video

186
00:07:53,380 --> 00:07:55,893
and let's get started.

