1
00:00:01,890 --> 00:00:03,120
<v Professor>Alrighty, so we're on step five</v>

2
00:00:03,120 --> 00:00:06,010
of developing the angular code to subscribe to data.

3
00:00:06,010 --> 00:00:08,590
So we have our class product list component.

4
00:00:08,590 --> 00:00:11,340
We have a field here, our products, our product array.

5
00:00:11,340 --> 00:00:14,400
We have this constructor that also has a dependency

6
00:00:14,400 --> 00:00:17,820
on product service, so that is injected

7
00:00:17,820 --> 00:00:20,150
by making use of the private product service.

8
00:00:20,150 --> 00:00:23,263
This constructor allows us to inject the given component.

9
00:00:25,030 --> 00:00:26,270
And then we'll make use of the ngOnInit()

10
00:00:26,270 --> 00:00:29,000
so this is like a post-constructors is called

11
00:00:29,000 --> 00:00:31,070
once the given component is initialized.

12
00:00:31,070 --> 00:00:32,980
We call this.listProducts().

13
00:00:32,980 --> 00:00:34,570
And then the real work happens here

14
00:00:34,570 --> 00:00:36,840
in this listProducts() method.

15
00:00:36,840 --> 00:00:39,072
So here we say this.productService()

16
00:00:39,072 --> 00:00:42,500
.getProductList().subscribe().

17
00:00:42,500 --> 00:00:46,050
So once we subscribe, that'll actually invoke that method,

18
00:00:46,050 --> 00:00:49,330
and it's going to invoke the method in an asynchronous fashion.

19
00:00:49,330 --> 00:00:51,790
So this method will kind of run in the background.

20
00:00:51,790 --> 00:00:54,840
Once all that data has been retrieved or returned,

21
00:00:54,840 --> 00:00:58,460
then we'll sign that data here to our array of products.

22
00:00:58,460 --> 00:01:01,470
So here I have this.products = data.

23
00:01:01,470 --> 00:01:04,700
So that's the data that came back from that given service

24
00:01:04,700 --> 00:01:06,523
via that rest API.

25
00:01:10,020 --> 00:01:11,280
All right, so now that we have the data,

26
00:01:11,280 --> 00:01:13,790
then we can display the data in an HTML page.

27
00:01:13,790 --> 00:01:16,400
So my page, here I simply make use of the ngFor,

28
00:01:16,400 --> 00:01:19,050
I say "let tempProduct of products",

29
00:01:19,050 --> 00:01:21,150
and then I simply display the product name

30
00:01:21,150 --> 00:01:22,450
and then the product unit price.

31
00:01:22,450 --> 00:01:25,540
I pipe it through my currency pipe to display

32
00:01:25,540 --> 00:01:28,950
the information using the U.S. dollar symbols here.

33
00:01:28,950 --> 00:01:31,400
And so, if everything works out as desired,

34
00:01:31,400 --> 00:01:33,410
then we'll have this given output:

35
00:01:33,410 --> 00:01:35,900
JavaScript, Spring Framework, so on and so forth.

36
00:01:35,900 --> 00:01:37,740
So just a very basic page.

37
00:01:37,740 --> 00:01:40,410
We can make it pretty by putting it into an HTML table,

38
00:01:40,410 --> 00:01:43,030
putting it into a bitweb template,

39
00:01:43,030 --> 00:01:44,110
but right now we're just trying to get

40
00:01:44,110 --> 00:01:47,010
the functionality of having our angular front end code

41
00:01:47,010 --> 00:01:49,923
make a call to the back end Spring Boot code.

42
00:01:52,430 --> 00:01:56,390
So hold your horses here, this code will not work

43
00:01:56,390 --> 00:01:58,680
because there's one more thing we need to do here.

44
00:01:58,680 --> 00:01:59,560
So in Step 7,

45
00:01:59,560 --> 00:02:02,730
we need to add CrossOrigin support to Spring Boot.

46
00:02:02,730 --> 00:02:05,270
Web browsers will not allow script code

47
00:02:05,270 --> 00:02:08,650
to call APIs that are not on the same origin.

48
00:02:08,650 --> 00:02:10,980
This is known as the same-origin policy.

49
00:02:10,980 --> 00:02:13,550
So basically the browser will have a security issue

50
00:02:13,550 --> 00:02:15,460
with any calls that you attempt to make

51
00:02:15,460 --> 00:02:16,810
that are not on the same origin.

52
00:02:16,810 --> 00:02:19,530
So, you may wonder, well, what is the same-origin here?

53
00:02:19,530 --> 00:02:21,330
So, same-origin is composed of

54
00:02:21,330 --> 00:02:24,670
the scheme or protocol, hostname, and port number.

55
00:02:24,670 --> 00:02:27,320
So, even if you're on the same machine

56
00:02:27,320 --> 00:02:29,630
and you have two apps running on different ports,

57
00:02:29,630 --> 00:02:32,360
those are not considered the same origin.

58
00:02:32,360 --> 00:02:34,920
So you have to make some additional configurations here

59
00:02:34,920 --> 00:02:37,290
to allow this communication to go back and forth.

60
00:02:37,290 --> 00:02:39,820
Now this same origin policy only applies

61
00:02:39,820 --> 00:02:42,320
to scripts running in a web browser.

62
00:02:42,320 --> 00:02:43,914
All right, because you're probably wondering, well,

63
00:02:43,914 --> 00:02:48,914
we can access rest APIs, using a browser or using postman,

64
00:02:49,310 --> 00:02:50,490
what's the big deal here?

65
00:02:50,490 --> 00:02:54,290
This is for JavaScript code that's running in a web browser

66
00:02:54,290 --> 00:02:57,470
so that's the restriction, JavaScript in a browser.

67
00:02:57,470 --> 00:02:59,840
But, we can relax this security piece

68
00:02:59,840 --> 00:03:03,640
by adding the Cross-Origin Resource Sharing support,

69
00:03:03,640 --> 00:03:04,560
or CORS.

70
00:03:04,560 --> 00:03:06,380
And so we can make this modification

71
00:03:06,380 --> 00:03:08,240
on our server side application.

72
00:03:08,240 --> 00:03:10,993
We can make this mod on our Spring Boot application.

73
00:03:12,430 --> 00:03:14,550
All right, so let's add CrossOrigin support

74
00:03:14,550 --> 00:03:16,291
to our Spring Booth application.

75
00:03:16,291 --> 00:03:18,030
So in your Spring Boot Application,

76
00:03:18,030 --> 00:03:20,830
you'll add an annotation to your rest API.

77
00:03:20,830 --> 00:03:22,940
So in our case we're using spring data rest,

78
00:03:22,940 --> 00:03:24,430
with spring data JPA,

79
00:03:24,430 --> 00:03:27,210
so here we simply add the sharp product repository.

80
00:03:27,210 --> 00:03:29,110
We say @CrossOrigin,

81
00:03:29,110 --> 00:03:31,320
and we give the origins that are allowed.

82
00:03:31,320 --> 00:03:33,883
Now remember, this is only for Javascript code

83
00:03:33,883 --> 00:03:36,410
that is running in a browser.

84
00:03:36,410 --> 00:03:38,960
Remember, earlier we could access all of this stuff

85
00:03:38,960 --> 00:03:41,360
via a browser or via postman.

86
00:03:41,360 --> 00:03:43,960
This will basically allow JavaScript code

87
00:03:43,960 --> 00:03:47,264
running on local host 4200 to make a call

88
00:03:47,264 --> 00:03:49,560
to our given rest API.

89
00:03:49,560 --> 00:03:51,210
All right, so that's the one example there.

90
00:03:51,210 --> 00:03:53,740
One thing you may wonder, well, I have multiple servers,

91
00:03:53,740 --> 00:03:54,830
how can I do that?

92
00:03:54,830 --> 00:03:57,030
No problem, you can simply say @Cross Origin,

93
00:03:57,030 --> 00:04:00,400
and you simply give a comma-delimited list of origins

94
00:04:00,400 --> 00:04:02,090
where you have JavaScript code running

95
00:04:02,090 --> 00:04:04,670
that needs to call your given application.

96
00:04:04,670 --> 00:04:07,060
And then you may say, well, gosh, this is just too much!

97
00:04:07,060 --> 00:04:10,493
I have a lot of servers, or I really don't care who calls,

98
00:04:10,493 --> 00:04:12,440
like in my rest API.

99
00:04:12,440 --> 00:04:14,070
I'd like for them to be able to use it

100
00:04:14,070 --> 00:04:17,040
in some JavaScript code running in a web browser somewhere.

101
00:04:17,040 --> 00:04:18,140
Easy, no problem!

102
00:04:18,140 --> 00:04:20,670
In that case you simply just give @CrossOrigin,

103
00:04:20,670 --> 00:04:21,503
and that's it!

104
00:04:21,503 --> 00:04:23,200
So by default this is a wild card,

105
00:04:23,200 --> 00:04:26,193
that'll allow access from any website.

106
00:04:28,170 --> 00:04:30,440
All right, so this is all some really good stuff.

107
00:04:30,440 --> 00:04:31,273
We'll move to the IDE

108
00:04:31,273 --> 00:04:33,520
and then we'll walk through this development process,

109
00:04:33,520 --> 00:04:35,070
and we'll start writing the code.

110
00:04:35,070 --> 00:04:37,923
So I'll see you in the next video, yo yo!

