1
00:00:01,150 --> 00:00:02,580
<v Instructor>Now in step six, we're going to develop</v>

2
00:00:02,580 --> 00:00:06,163
a log-in status component for the log in, log out buttons.

3
00:00:08,510 --> 00:00:09,810
At the top of our application,

4
00:00:09,810 --> 00:00:12,480
we'll have this log-in status component.

5
00:00:12,480 --> 00:00:14,380
So if the user's not logged in,

6
00:00:14,380 --> 00:00:16,830
we'll give them a log-in button.

7
00:00:16,830 --> 00:00:18,840
Once the user logs in successfully,

8
00:00:18,840 --> 00:00:20,440
then we'll welcome them back by name

9
00:00:20,440 --> 00:00:22,460
and then we'll also give them a log out button.

10
00:00:22,460 --> 00:00:24,200
So the buttons will change

11
00:00:24,200 --> 00:00:26,463
depending on the user's logged in state.

12
00:00:29,820 --> 00:00:31,340
Alrighty, so just getting started here,

13
00:00:31,340 --> 00:00:33,160
we use the angular CLI again,

14
00:00:33,160 --> 00:00:36,163
ng generate component, components/LoginStatus.

15
00:00:39,598 --> 00:00:40,610
And then we'll move into our

16
00:00:40,610 --> 00:00:43,393
log-instatus.component.ts file.

17
00:00:43,393 --> 00:00:45,830
We take care of some imports up top,

18
00:00:45,830 --> 00:00:47,770
our normal act component

19
00:00:47,770 --> 00:00:49,513
and our log-in status component.

20
00:00:50,800 --> 00:00:52,380
We'll set up two fields here,

21
00:00:52,380 --> 00:00:55,610
is authenticated and user full name.

22
00:00:55,610 --> 00:00:58,963
We'll use our constructor to inject the Okta auth service.

23
00:01:06,700 --> 00:01:08,300
In our ngon init method,

24
00:01:08,300 --> 00:01:11,250
we'll simply subscribe to the authentication state changes.

25
00:01:11,250 --> 00:01:15,730
So we say oktaauthservice.authenticatestate.subscribe.

26
00:01:15,730 --> 00:01:16,610
We get a result

27
00:01:17,470 --> 00:01:19,609
and we say isauthenticated equals to the result.

28
00:01:19,609 --> 00:01:21,709
And then we also call this.getuserdetails.

29
00:01:24,170 --> 00:01:25,850
Now what about getuserdetails?

30
00:01:25,850 --> 00:01:27,220
Well, it's over here.

31
00:01:27,220 --> 00:01:29,943
So it's a method that we'll define in our class here.

32
00:01:36,380 --> 00:01:39,240
And we check if this stock is authenticated,

33
00:01:39,240 --> 00:01:42,440
then we'll fetch the logged in user details, their claims

34
00:01:42,440 --> 00:01:45,410
and the user full name is exposed as a property name.

35
00:01:45,410 --> 00:01:50,410
So here we'll say this oktaauthservice.getuser.thin,

36
00:01:50,470 --> 00:01:52,190
so once we get a response,

37
00:01:52,190 --> 00:01:54,670
then we'll say this.userfullnames equals

38
00:01:54,670 --> 00:01:56,473
the response.name.

39
00:02:01,380 --> 00:02:02,560
And then also at the bottom here

40
00:02:02,560 --> 00:02:03,660
we'll have a log out method.

41
00:02:03,660 --> 00:02:05,500
So when they actually do log out,

42
00:02:05,500 --> 00:02:07,650
they will make use of the Okta auth service

43
00:02:07,650 --> 00:02:08,980
and sign up a user.

44
00:02:08,980 --> 00:02:10,810
And this removes the tokens that are associated

45
00:02:10,810 --> 00:02:12,163
with this given user.

46
00:02:15,520 --> 00:02:16,717
Okay we also have some work to do on our

47
00:02:16,717 --> 00:02:19,920
loginstatuscomponent.html page.

48
00:02:19,920 --> 00:02:22,140
So we'll set up this div and we'll make use

49
00:02:22,140 --> 00:02:24,790
of this ngif, if they are authenticated

50
00:02:24,790 --> 00:02:26,650
and user full name is set

51
00:02:26,650 --> 00:02:29,093
then we'll say welcome back user full name.

52
00:02:30,730 --> 00:02:32,100
We'll also have another ngif,

53
00:02:32,100 --> 00:02:33,530
if not authenticated,

54
00:02:33,530 --> 00:02:35,870
we'll show them the log-in button

55
00:02:35,870 --> 00:02:37,490
and if they are authenticated,

56
00:02:37,490 --> 00:02:39,490
then we'll show them the log out button.

57
00:02:41,490 --> 00:02:44,223
So here log in, displays the log-in button.

58
00:02:45,600 --> 00:02:46,820
If they're already logged in

59
00:02:46,820 --> 00:02:47,890
or they're authenticated,

60
00:02:47,890 --> 00:02:50,260
then we say welcome back username.

61
00:02:50,260 --> 00:02:51,340
And then we also provide

62
00:02:51,340 --> 00:02:53,163
a log out button for them.

63
00:02:56,730 --> 00:02:58,700
All right so now we need to add our new log-in

64
00:02:58,700 --> 00:03:01,663
status components to the header section of our application.

65
00:03:03,120 --> 00:03:05,180
So right now on our application

66
00:03:05,180 --> 00:03:07,180
and ourappcomponent.html,

67
00:03:07,180 --> 00:03:09,530
we have references to some of our custom components.

68
00:03:09,530 --> 00:03:12,120
So earlier we created an app search component.

69
00:03:12,120 --> 00:03:13,610
So that's in place now.

70
00:03:13,610 --> 00:03:17,100
We also have our app cart status, that's in place.

71
00:03:17,100 --> 00:03:19,860
Now we have this new log-in status component

72
00:03:19,860 --> 00:03:20,777
that we just created.

73
00:03:20,777 --> 00:03:23,693
And so we'll display it right here between the two.

74
00:03:26,910 --> 00:03:28,270
Alrighty. So we're almost done.

75
00:03:28,270 --> 00:03:29,890
We're almost done.

76
00:03:29,890 --> 00:03:32,340
So this is step seven of updating our app module configs

77
00:03:32,340 --> 00:03:33,290
to connect the routes.

78
00:03:33,290 --> 00:03:36,110
So in our appmodule.ts file, we'll do some imports

79
00:03:36,110 --> 00:03:37,363
up top for Okta.

80
00:03:38,250 --> 00:03:41,070
We'll also import our myappconfig.config file that

81
00:03:41,070 --> 00:03:42,950
we created a little bit earlier.

82
00:03:42,950 --> 00:03:45,200
We'll create this Okta config.

83
00:03:45,200 --> 00:03:48,680
So we say Okta.assign on auth required,

84
00:03:48,680 --> 00:03:50,862
we inject the actual router

85
00:03:50,862 --> 00:03:53,950
and then we say router.navigateto/log-in.

86
00:03:53,950 --> 00:03:57,350
This will redirect the user to our custom log-in page.

87
00:03:57,350 --> 00:04:00,680
And we also pass on a reference to my appconfig.oidc.

88
00:04:00,680 --> 00:04:02,272
So that's the JSON configs

89
00:04:02,272 --> 00:04:06,423
that we created earlier in myappconfig.ts file.

90
00:04:09,290 --> 00:04:12,410
And then moving over here, we have a bit more code to write.

91
00:04:12,410 --> 00:04:13,890
So we'll set up our routes here.

92
00:04:13,890 --> 00:04:17,000
So we have a route for log-in/callback

93
00:04:17,000 --> 00:04:18,560
and then also our route for log-in.

94
00:04:18,560 --> 00:04:21,200
So log in, we'll go to the log-in component

95
00:04:21,200 --> 00:04:23,300
that we just created in the previous slides.

96
00:04:23,300 --> 00:04:24,800
So we saw all the code for it,

97
00:04:24,800 --> 00:04:28,450
but you may wonder what's this Okta callback component.

98
00:04:28,450 --> 00:04:32,160
All right so of course it's something from the Okta SDK.

99
00:04:32,160 --> 00:04:34,130
So once the user is authenticated,

100
00:04:34,130 --> 00:04:35,980
they are redirected to our application.

101
00:04:35,980 --> 00:04:38,940
So normally we would have to parse the response

102
00:04:38,940 --> 00:04:42,050
and store the oauth or open ID connect tokens,

103
00:04:42,050 --> 00:04:45,103
but the Okta callback component will do this work for you.

104
00:04:45,103 --> 00:04:47,570
So there's no need for us to do any of the low level coding.

105
00:04:47,570 --> 00:04:50,320
So we simply allow the Okta callback component

106
00:04:50,320 --> 00:04:52,173
to handle this work for us.

107
00:04:55,710 --> 00:04:57,360
We also need to make another update here

108
00:04:57,360 --> 00:05:00,110
to the appmodule.ts in the import section,

109
00:05:00,110 --> 00:05:02,770
we need to import the Okta auth module.

110
00:05:02,770 --> 00:05:05,160
Basically give us access to the different components

111
00:05:05,160 --> 00:05:07,150
to find them in Okta auth module.

112
00:05:07,150 --> 00:05:10,010
And then for providers, we give a reference to Okta config.

113
00:05:10,010 --> 00:05:12,410
This allows us to perform dependency injection

114
00:05:12,410 --> 00:05:15,170
of the Okta auth service into different parts

115
00:05:15,170 --> 00:05:16,393
of our application.

116
00:05:21,050 --> 00:05:22,670
Alrighty, so that's pretty much it.

117
00:05:22,670 --> 00:05:24,240
So if you'd like to get more information

118
00:05:24,240 --> 00:05:26,920
on these Okta components for the Okta sign-in widget,

119
00:05:26,920 --> 00:05:29,110
you can use the link here listed on the slide,

120
00:05:29,110 --> 00:05:32,260
and also the Okta angular SDK referenced here.

121
00:05:32,260 --> 00:05:34,000
And the really nice thing about these links is that

122
00:05:34,000 --> 00:05:35,940
they give a description as far as the features

123
00:05:35,940 --> 00:05:37,760
and functionality that's available.

124
00:05:37,760 --> 00:05:39,250
And also you may be a little curious,

125
00:05:39,250 --> 00:05:42,160
you'd like to say, "Hmm I'd like to see the actual

126
00:05:42,160 --> 00:05:44,807
source code of what's happening in the background

127
00:05:44,807 --> 00:05:47,450
for this given Okta component

128
00:05:47,450 --> 00:05:49,340
or this you know, whatever code."

129
00:05:49,340 --> 00:05:50,720
Well, this is the GitHub repo.

130
00:05:50,720 --> 00:05:52,830
So you can actually see the real source code

131
00:05:52,830 --> 00:05:53,975
behind the scenes, as far as

132
00:05:53,975 --> 00:05:56,900
all of the low-level work that they're using here

133
00:05:56,900 --> 00:05:59,630
for communicating with the Okta platform.

134
00:05:59,630 --> 00:06:00,853
All right, good stuff.

