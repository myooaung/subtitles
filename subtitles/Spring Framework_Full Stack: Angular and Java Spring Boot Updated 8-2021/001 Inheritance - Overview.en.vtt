WEBVTT
1
00:00:01.160 --> 00:00:02.200
<v ->In this video,</v>

2
00:00:02.200 --> 00:00:03.033
we're going to learn about

3
00:00:03.033 --> 00:00:04.757
inheritance and Typscript.

4
00:00:08.530 --> 00:00:10.571
So TypeScripts support the object-oriented concept

5
00:00:10.571 --> 00:00:11.404
of inheritance.

6
00:00:11.404 --> 00:00:12.841
So it defines common properties

7
00:00:12.841 --> 00:00:15.060
and methods in the superclass,

8
00:00:15.060 --> 00:00:17.510
the subclasses can extend superclasses

9
00:00:17.510 --> 00:00:19.077
and add properties and methods.

10
00:00:19.077 --> 00:00:21.710
And it is also support for abstract classes

11
00:00:21.710 --> 00:00:23.193
and overriding.

12
00:00:24.090 --> 00:00:25.790
But one thing that's important here is that

13
00:00:25.790 --> 00:00:28.148
TypeScript only support single inheritance.

14
00:00:28.148 --> 00:00:31.463
However, you can implement multiple interfaces.

15
00:00:34.670 --> 00:00:37.040
Alrighty, so let's look at an inheritance example.

16
00:00:37.040 --> 00:00:40.900
So I'll have a shape, that has x and y for the location,

17
00:00:40.900 --> 00:00:42.540
get or set our accessors,

18
00:00:42.540 --> 00:00:44.630
and then also a getInfo() method.

19
00:00:44.630 --> 00:00:46.320
And then we'll have subclasses here.

20
00:00:46.320 --> 00:00:49.415
So a circle, it adds an additional property here, radius,

21
00:00:49.415 --> 00:00:51.309
again it's get or set our accessors,

22
00:00:51.309 --> 00:00:55.920
and then also, it can override the getInfo() method.

23
00:00:55.920 --> 00:00:59.654
Basically a string representation of the given item.

24
00:00:59.654 --> 00:01:01.880
And we can do a similar thing on the right hand side

25
00:01:01.880 --> 00:01:02.820
with rectangle.

26
00:01:02.820 --> 00:01:03.965
We can add two properties here,

27
00:01:03.965 --> 00:01:04.934
width and length,

28
00:01:04.934 --> 00:01:05.867
the get or setters,

29
00:01:05.867 --> 00:01:09.880
and also overriding the getInfo() method accordingly.

30
00:01:09.880 --> 00:01:12.433
And we'll see some examples of this with real code.

31
00:01:16.090 --> 00:01:19.090
All right so let's look at the code here for our shape class

32
00:01:21.840 --> 00:01:22.950
So we have a constructor,

33
00:01:22.950 --> 00:01:24.148
that has a private _x and y,

34
00:01:24.148 --> 00:01:25.739
these are our parameter properties,

35
00:01:25.739 --> 00:01:29.163
remember, it defines and assigns them at the same time.

36
00:01:34.200 --> 00:01:35.950
So this getInfo() method returns

37
00:01:35.950 --> 00:01:38.180
x= $this._x

38
00:01:38.180 --> 00:01:40.120
and y=$this._y

39
00:01:40.120 --> 00:01:41.247
So just a nice string representation

40
00:01:41.247 --> 00:01:43.343
for this given shape.

41
00:01:47.430 --> 00:01:49.210
And then we'll go ahead and set up our circle,

42
00:01:49.210 --> 00:01:51.930
so our circle extends shape,

43
00:01:51.930 --> 00:01:54.610
so the extends keyword is for inheritance.

44
00:01:54.610 --> 00:01:56.263
We define our constructor.

45
00:02:00.870 --> 00:02:02.980
So at the top we have regular parameters,

46
00:02:02.980 --> 00:02:04.251
theX and theY,

47
00:02:04.251 --> 00:02:07.262
and then we also have a parameter property

48
00:02:07.262 --> 00:02:08.095
_radius.

49
00:02:11.160 --> 00:02:13.540
And then we call the superclass constructor

50
00:02:13.540 --> 00:02:16.823
and we pass in those regular parameters x and y.

51
00:02:24.770 --> 00:02:26.820
And so then we'll have this getInfo() method

52
00:02:26.820 --> 00:02:29.770
that we override from the superclass.

53
00:02:29.770 --> 00:02:31.180
So here, for this example,

54
00:02:31.180 --> 00:02:34.190
I have return super.getInfo()

55
00:02:34.190 --> 00:02:36.748
so I call this superclass version of this method.

56
00:02:36.748 --> 00:02:39.008
And then I add-on my specific information

57
00:02:39.008 --> 00:02:43.043
radius=$(this._radius)

58
00:02:46.273 --> 00:02:48.360
Alrighty so now let's go ahead and pull it altogether

59
00:02:48.360 --> 00:02:50.363
by creating a main application.

60
00:02:51.200 --> 00:02:52.270
So just as a recap

61
00:02:52.270 --> 00:02:54.803
there's our shape class and also our circle class.

62
00:02:56.440 --> 00:02:57.532
And so here in our driver

63
00:02:57.532 --> 00:02:59.543
we do our imports accordingly.

64
00:03:00.570 --> 00:03:02.680
And then we create a new shape

65
00:03:02.680 --> 00:03:05.000
passing the x,y 10, 15

66
00:03:05.000 --> 00:03:07.433
and we do a console log on my shape.

67
00:03:08.500 --> 00:03:10.080
And then similar thing here for circle

68
00:03:10.080 --> 00:03:11.690
so x,y, radius

69
00:03:12.720 --> 00:03:14.540
and then we'll do a console.log on myCircle.

70
00:03:14.540 --> 00:03:16.757
And so we run this application

71
00:03:16.757 --> 00:03:19.620
this is our given output.

72
00:03:19.620 --> 00:03:22.430
So the first line here is for displaying the shape.

73
00:03:22.430 --> 00:03:25.500
And then the second line is for displaying the circle.

74
00:03:25.500 --> 00:03:26.478
And notice how it makes use of the

75
00:03:26.478 --> 00:03:29.650
overwritten version of the getInfo() method

76
00:03:29.650 --> 00:03:31.423
for that given circle.

77
00:03:35.040 --> 00:03:37.310
Alrighty so let's extend our example a bit more here

78
00:03:37.310 --> 00:03:39.299
and let's create the rectangle subclass.

79
00:03:39.299 --> 00:03:41.833
So Rectangle extends Shape.

80
00:03:43.127 --> 00:03:44.533
And we have our constructor.

81
00:03:48.840 --> 00:03:51.570
So our constructor makes use of two regular parameters,

82
00:03:51.570 --> 00:03:53.157
theX and theY,

83
00:03:53.157 --> 00:03:55.079
and also two parameter properties

84
00:03:55.079 --> 00:03:57.360
for the wide and the length

85
00:03:57.360 --> 00:03:59.123
for this given rectangle.

86
00:03:59.980 --> 00:04:02.360
And then we also call the superclass constructor

87
00:04:02.360 --> 00:04:03.710
by doing super(theX, theY).

88
00:04:11.530 --> 00:04:14.050
And then we override the getInfo() method

89
00:04:14.050 --> 00:04:17.320
so we can give our own specific implementation here.

90
00:04:17.320 --> 00:04:20.060
So here I say return super.getInfo()

91
00:04:20.060 --> 00:04:22.130
so I called it superclass method.

92
00:04:22.130 --> 00:04:24.760
And then I add on the specific information

93
00:04:24.760 --> 00:04:25.782
for this given subclass I have

94
00:04:25.782 --> 00:04:27.570
width=$(this._width),

95
00:04:28.982 --> 00:04:31.470
and length=$(this._length).

96
00:04:31.470 --> 00:04:33.383
And that's basically it for rectangle.

97
00:04:36.820 --> 00:04:39.040
All right so let's go ahead and support for the rectangle

98
00:04:39.040 --> 00:04:40.600
in our main application.

99
00:04:40.600 --> 00:04:42.393
So here's our code from before.

100
00:04:44.490 --> 00:04:45.531
So then I go ahead and create

101
00:04:45.531 --> 00:04:47.610
myRectangle = new Rectangle

102
00:04:47.610 --> 00:04:50.353
I pass in the x, y, width, length.

103
00:04:51.660 --> 00:04:55.062
And then I do a console.log(myRectangle.getInfo().

104
00:04:55.062 --> 00:04:57.559
So then once we run this application here is the output.

105
00:04:57.559 --> 00:04:58.841
So the first line's is for my shape,

106
00:04:58.841 --> 00:04:59.958
then my circle,

107
00:04:59.958 --> 00:05:01.791
and then my rectangle.

108
00:05:03.229 --> 00:05:04.287
And they can't notice how it's using

109
00:05:04.287 --> 00:05:06.686
the overwritten version of the getInfo() methods

110
00:05:06.686 --> 00:05:08.553
for myCircle and myRectangle.

111
00:05:15.000 --> 00:05:16.990
Okay so let's go ahead a create an array of shapes.

112
00:05:16.990 --> 00:05:18.081
So we have three shapes right now,

113
00:05:18.081 --> 00:05:18.914
myShape,

114
00:05:18.914 --> 00:05:19.747
myCircle,

115
00:05:19.747 --> 00:05:21.020
myRectangle,

116
00:05:21.020 --> 00:05:23.010
so I'll declare an array for the shapes,

117
00:05:23.010 --> 00:05:24.410
and it's going to be initially empty,

118
00:05:24.410 --> 00:05:25.243
so I'll say

119
00:05:25.243 --> 00:05:26.957
theShapes: Shape [] = [];

120
00:05:29.700 --> 00:05:30.986
so it's an empty array right now

121
00:05:30.986 --> 00:05:34.393
but it can only hold shapes and shapes subclasses.

122
00:05:35.370 --> 00:05:37.300
All right so now I'll go ahead and add the shapes

123
00:05:37.300 --> 00:05:38.291
to the array here so I'll say

124
00:05:38.291 --> 00:05:39.807
theShapes.push(myShape);

125
00:05:40.820 --> 00:05:43.790
and I'll do a similar thing for myCircle and myRectangle,

126
00:05:43.790 --> 00:05:46.870
so we're simply adding things to the array.

127
00:05:46.870 --> 00:05:48.408
And so then I'll set up a for loop here, I'll say

128
00:05:48.408 --> 00:05:50.900
(let tempShape of theShapes)

129
00:05:50.900 --> 00:05:51.733
and I'll do a

130
00:05:51.733 --> 00:05:55.100
console.log(tempShape.getInfo)

131
00:05:56.642 --> 00:05:57.506
And so here's the output here

132
00:05:57.506 --> 00:05:59.650
so we get the info for myShape and myCircle

133
00:05:59.650 --> 00:06:02.173
and then finally myRectangle.

134
00:06:03.800 --> 00:06:04.633
Okay great.

135
00:06:04.633 --> 00:06:06.300
So let's go ahead and move into our IDE

136
00:06:06.300 --> 00:06:08.083
and let's test out this coding.

