1
00:00:00,748 --> 00:00:03,060
<v Instructor>Okay so in this video we'll focus</v>

2
00:00:03,060 --> 00:00:04,650
on the implementation of the code

3
00:00:04,650 --> 00:00:06,180
for the checkout service example,

4
00:00:06,180 --> 00:00:08,380
in particular this place order method

5
00:00:08,380 --> 00:00:11,590
so it feels like we were just doing a lot of setup stuff

6
00:00:11,590 --> 00:00:15,040
now we actually kind of get down to doing some real coding.

7
00:00:15,040 --> 00:00:16,240
So in this place order,

8
00:00:16,240 --> 00:00:17,690
I know I'm going to do some JPA stuff,

9
00:00:17,690 --> 00:00:20,900
so I'll make use of the @transactional annotation

10
00:00:26,240 --> 00:00:28,780
and now I'll simply write some quick comments to myself,

11
00:00:28,780 --> 00:00:31,110
just to kind of keep myself on track

12
00:01:22,650 --> 00:01:24,130
so I'll just put a return null here,

13
00:01:24,130 --> 00:01:27,676
just to kind of get rid of the red squiggly

14
00:01:27,676 --> 00:01:30,243
but we'll update this in a second.

15
00:01:33,820 --> 00:01:34,680
Alrighty so let's go ahead

16
00:01:34,680 --> 00:01:36,240
and dive in here and let's write the code

17
00:01:36,240 --> 00:01:37,320
to retrieve the order info

18
00:01:37,320 --> 00:01:39,540
from the data transfer object purchase

19
00:01:47,280 --> 00:01:49,280
then we'll generate the tracking number,

20
00:02:03,500 --> 00:02:06,260
and this method generate Order Tracking Number

21
00:02:06,260 --> 00:02:11,260
is not there yet we'll let the IDE generate it for us

22
00:02:11,750 --> 00:02:14,040
or create it for us but give me just one second,

23
00:02:14,040 --> 00:02:17,210
I just want to do order dab set Order Tracking Number

24
00:02:17,210 --> 00:02:19,883
based on this value order Tracking Number,

25
00:02:25,040 --> 00:02:27,080
alright good so I can complete my thought there

26
00:02:27,080 --> 00:02:29,400
now let's go ahead and create this method,

27
00:02:29,400 --> 00:02:31,403
generate Order Tracking Number.

28
00:02:41,430 --> 00:02:45,210
So I basically want to create a unique ID

29
00:02:46,470 --> 00:02:51,060
that's hard to guess and somewhat random,

30
00:02:51,060 --> 00:02:54,250
so I don't want to use the database primary key

31
00:02:54,250 --> 00:02:55,240
that's auto-incremented,

32
00:02:55,240 --> 00:02:57,340
I want to do something slightly different,

33
00:03:02,350 --> 00:03:04,327
so I'll generate a random UUID

34
00:03:29,450 --> 00:03:30,910
so I'm making use of this UUID

35
00:03:30,910 --> 00:03:32,030
but you're probably wondering,

36
00:03:32,030 --> 00:03:34,350
what exactly is a UUID?

37
00:03:35,620 --> 00:03:36,453
Alright no problem

38
00:03:36,453 --> 00:03:38,200
Let's swing over for a second

39
00:03:38,200 --> 00:03:41,640
and let's have a quick discussion about the UUID

40
00:03:41,640 --> 00:03:43,940
and how we're going to use it in our application,

41
00:03:47,460 --> 00:03:49,500
So recall that I want to have a tracking number

42
00:03:49,500 --> 00:03:53,030
that is hard to guess random unique

43
00:03:53,030 --> 00:03:54,690
So we'll make use of this UUID,

44
00:03:54,690 --> 00:03:57,270
the universally unique identifier,

45
00:03:57,270 --> 00:04:00,140
So it's a standardized method for generating unique IDs

46
00:04:00,140 --> 00:04:02,150
It's available in four different versions,

47
00:04:02,150 --> 00:04:03,740
and will make use of version four,

48
00:04:03,740 --> 00:04:07,650
which will generate a random UUID number for us

49
00:04:07,650 --> 00:04:10,010
now if you'd like to get more information on this

50
00:04:10,010 --> 00:04:11,430
I highly recommend that you go

51
00:04:11,430 --> 00:04:13,800
to the Wikipedia and see the entry for it,

52
00:04:13,800 --> 00:04:17,200
so do a quick Google for Wikipedia UUID

53
00:04:17,200 --> 00:04:18,700
or you can use the link that I provided

54
00:04:18,700 --> 00:04:20,740
on the previous code example

55
00:04:20,740 --> 00:04:22,060
but the Google approach is probably

56
00:04:22,060 --> 00:04:23,840
the fastest and the easiest,

57
00:04:23,840 --> 00:04:26,040
and that'll bring you to the Wikipedia page.

58
00:04:29,800 --> 00:04:31,660
And so you may wonder well,

59
00:04:31,660 --> 00:04:34,070
what about the uniqueness of the number

60
00:04:34,070 --> 00:04:36,850
or collisions or duplicates alright,

61
00:04:36,850 --> 00:04:41,570
so the probability of a collision is very low negligible

62
00:04:41,570 --> 00:04:43,730
even in the Wikipedia entry they say

63
00:04:43,730 --> 00:04:46,200
you may not even need to care about it.

64
00:04:46,200 --> 00:04:48,870
Wikipedia has a specific section regarding this,

65
00:04:48,870 --> 00:04:51,740
it's called collisions and here they put all the math

66
00:04:51,740 --> 00:04:53,016
all the statistics and it kind of makes,

67
00:04:53,016 --> 00:04:57,530
your brain melt a bit but the probability of a duplicate,

68
00:04:57,530 --> 00:05:02,530
if you had 103 trillion version UUIDs is one in a billion

69
00:05:03,900 --> 00:05:07,520
alright so a very very very low percentage,

70
00:05:07,520 --> 00:05:09,640
And it has some other nice information

71
00:05:09,640 --> 00:05:13,250
as far as generating every second for the next 85 years

72
00:05:13,250 --> 00:05:16,450
they give you that part there so be sure to check that out,

73
00:05:16,450 --> 00:05:21,450
however you say well one of the billion I can't have that

74
00:05:22,870 --> 00:05:26,740
I need to have absolute 0% of collision,

75
00:05:26,740 --> 00:05:31,240
okay so in that case you could do this instead

76
00:05:31,240 --> 00:05:33,114
so you could generate a random new UUID,

77
00:05:33,114 --> 00:05:35,470
and then you could query a database and see

78
00:05:35,470 --> 00:05:38,523
if that UUID has been used by your application already,

79
00:05:39,550 --> 00:05:42,150
If so so when you have a duplicate

80
00:05:42,150 --> 00:05:44,760
then you simply repeat the previous two steps

81
00:05:44,760 --> 00:05:46,960
until no duplicates are found right

82
00:05:46,960 --> 00:05:48,940
so it's very easy to write the coding

83
00:05:48,940 --> 00:05:51,630
error to check for that so you can go forward,

84
00:05:51,630 --> 00:05:52,480
if you'd like to.

