WEBVTT
1
00:00:01.260 --> 00:00:04.230
Alrighty. So getting started with our development process

2
00:00:04.230 --> 00:00:06.230
In this video we'll create our common classes

3
00:00:06.230 --> 00:00:10.353
for customer, order, orderitem, address, and purchase.

4
00:00:19.220 --> 00:00:21.870
So let's go ahead and open up a terminal window here.

5
00:00:31.340 --> 00:00:32.840
I'll use the angular CLI

6
00:00:32.840 --> 00:00:35.313
to generate some stub classes for us.

7
00:00:40.630 --> 00:00:45.630
So use ng generate class common/customer

8
00:00:46.800 --> 00:00:47.810
and this will create this

9
00:00:47.810 --> 00:00:50.380
in the common subdirectory.

10
00:00:50.380 --> 00:00:52.160
swing over here and verify this

11
00:00:53.130 --> 00:00:57.320
app, common and there's our customer.ts.

12
00:00:57.320 --> 00:00:58.530
Okay, that's good.

13
00:00:58.530 --> 00:00:59.920
Now let's go ahead and repeat the process

14
00:00:59.920 --> 00:01:02.003
for our other classes,

15
00:01:03.250 --> 00:01:04.363
dot order,

16
00:01:06.556 --> 00:01:07.389
orderitem,

17
00:01:11.160 --> 00:01:12.060
Address

18
00:01:15.430 --> 00:01:16.853
and purchase.

19
00:01:29.010 --> 00:01:29.930
All right. So let's go

20
00:01:29.930 --> 00:01:31.290
and clear this window

21
00:01:31.290 --> 00:01:32.610
and let's start working

22
00:01:32.610 --> 00:01:33.963
on some of our classes.

23
00:01:39.380 --> 00:01:41.040
So I'll start with customer

24
00:01:44.450 --> 00:01:46.110
and the customer has three fields

25
00:01:46.110 --> 00:01:48.383
for first name, last name and email,

26
00:02:00.210 --> 00:02:03.213
and now move over to the order class.

27
00:02:07.710 --> 00:02:09.500
And I'll go ahead and define the fields here

28
00:02:09.500 --> 00:02:10.423
for the order.

29
00:02:17.380 --> 00:02:19.480
So at this level, we'll have total quantity

30
00:02:19.480 --> 00:02:20.733
and total price.

31
00:02:23.540 --> 00:02:25.273
Next we'll move to the order item.

32
00:02:52.413 --> 00:02:53.300
And for order item,

33
00:02:53.300 --> 00:02:54.720
we'll also set up a constructor

34
00:02:54.720 --> 00:02:56.200
that accepts a cart item.

35
00:02:56.200 --> 00:02:58.340
So we'll, we'd like to be able

36
00:02:58.340 --> 00:03:00.570
to construct that order item

37
00:03:00.570 --> 00:03:03.003
based off of cart item data.

38
00:03:09.620 --> 00:03:11.320
So I'll just do some assignments here

39
00:03:11.320 --> 00:03:12.920
inside of this constructor.

40
00:03:12.920 --> 00:03:14.870
So basically reading the appropriate fields

41
00:03:14.870 --> 00:03:15.970
from cart item

42
00:03:15.970 --> 00:03:18.633
and assigning them to this order item.

43
00:03:48.090 --> 00:03:49.950
And we'll use this coding later on

44
00:03:49.950 --> 00:03:51.940
in our checkout form

45
00:03:51.940 --> 00:03:54.820
when we're building up the purchase

46
00:03:54.820 --> 00:03:56.670
that we'll send over to the back end.

47
00:03:59.070 --> 00:04:01.010
And then finally here we have address

48
00:04:29.724 --> 00:04:32.270
our main item here is purchase.

49
00:04:32.270 --> 00:04:34.650
So that's the main object

50
00:04:34.650 --> 00:04:36.630
that we'll use for sending

51
00:04:36.630 --> 00:04:39.120
of all of the data

52
00:04:39.120 --> 00:04:41.373
that we read from the checkout form.

53
00:04:42.240 --> 00:04:43.840
So we'll have entries here for customers

54
00:04:43.840 --> 00:04:46.200
shipping Address, billing Address, order

55
00:04:46.200 --> 00:04:50.053
and a collection of order items.

56
00:05:18.579 --> 00:05:20.900
Just go ahead and fix the imports here

57
00:05:26.070 --> 00:05:27.880
Alrighty so that's our purchase.

58
00:05:27.880 --> 00:05:30.890
So our front end we'll assemble this purchase

59
00:05:30.890 --> 00:05:32.240
from all the form data

60
00:05:32.240 --> 00:05:34.650
and send it over to our rest API

61
00:05:34.650 --> 00:05:36.100
for processing.

62
00:05:36.100 --> 00:05:37.750
Alrighty, this looks pretty good.

