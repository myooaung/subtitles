WEBVTT
1
00:00:01.650 --> 00:00:04.170
All right, so let's go ahead, move and throw it here.

2
00:00:04.440 --> 00:00:07.080
Move into that spring boot ecommerce project.

3
00:00:10.010 --> 00:00:15.230
And let's move up here and let's create a new package, a new package named config.

4
00:00:39.870 --> 00:00:43.200
All right, so in our config package, let's go ahead and create a new job, a class.

5
00:00:56.990 --> 00:00:59.630
And we'll call this class my day to rest config.

6
00:01:08.080 --> 00:01:10.000
All righty, let me expand my window here.

7
00:01:18.170 --> 00:01:21.440
This class will implement the interface repository reskin figurer.

8
00:01:33.650 --> 00:01:37.340
And then we'll move in here and we'll implement the methods for this interface.

9
00:01:44.070 --> 00:01:47.850
And we'll choose the method configure repository risk configuration.

10
00:01:59.190 --> 00:02:02.160
OK, let's make a small digression.

11
00:02:02.310 --> 00:02:05.200
We need to make an update to our code.

12
00:02:05.610 --> 00:02:09.690
The spring team made some updates of this interface in recent versions of Spring.

13
00:02:10.020 --> 00:02:14.040
The method now has a new parameter cause registry.

14
00:02:14.370 --> 00:02:17.340
So we need to add this new parameter to our method.

15
00:02:20.110 --> 00:02:23.470
We'll also need to add the appropriate import for the course registry.

16
00:02:26.220 --> 00:02:29.280
Now, at the moment, we're not using the course registry parameter.

17
00:02:29.520 --> 00:02:32.790
However, it's required for the recent versions of this interface.

18
00:02:33.210 --> 00:02:37.230
But don't worry, we will use the course registry parameter later in the course.

19
00:02:37.380 --> 00:02:41.580
We'll use it to customize the core support in our application anyways.

20
00:02:41.820 --> 00:02:44.010
Be sure to make this update in your code.

21
00:02:46.400 --> 00:02:51.260
Now, when we return to the original code in the video, you'll see the old version of the method.

22
00:02:51.620 --> 00:02:52.470
Don't worry about it.

23
00:02:52.490 --> 00:02:55.850
Just keep what we have here and move on with the current updates.

24
00:02:56.180 --> 00:02:56.640
All righty.

25
00:02:56.870 --> 00:02:58.880
Let's go ahead and get back to coding.

26
00:03:06.850 --> 00:03:12.490
So the first thing I'll do is I'll set up an array of methods, and so these are the unsupported actions.

27
00:03:21.970 --> 00:03:25.660
So I'll choose the HTP methods for put posts and delete.

28
00:03:42.210 --> 00:03:46.920
All right, so let's go ahead and get down to business and let's disable the methods for product, put

29
00:03:47.010 --> 00:03:48.240
post and delete.

30
00:03:53.280 --> 00:03:54.720
Let me stretch out here for a bit.

31
00:03:56.170 --> 00:03:58.870
Myself, some white space, some room to work with.

32
00:04:00.240 --> 00:04:03.180
So uses config, I get exposure configuration.

33
00:04:05.040 --> 00:04:10.110
For a given domain type product class, and so this little applied to the product repository.

34
00:04:18.790 --> 00:04:20.830
And I'll say with item exposure.

35
00:04:21.890 --> 00:04:29.120
So for a given product item, we make use of the Java Lambda syntax with the arrow symbol.

36
00:04:34.600 --> 00:04:40.240
And then we use the AHP methods to disable and we pass in that array that we just created our unsupported

37
00:04:40.240 --> 00:04:40.960
actions.

38
00:04:44.970 --> 00:04:47.970
And then let's do a similar thing here for collection exposure.

39
00:04:58.210 --> 00:05:04.030
And so we also do a disable on those unsupported actions and still semicolon at the end.

40
00:05:04.690 --> 00:05:05.620
And that's pretty much it.

41
00:05:05.650 --> 00:05:13.240
So this block of code will disable the key methods for the product repository for put, post and delete.

42
00:05:13.570 --> 00:05:17.770
So only get will work effectively making this read only.

43
00:05:21.730 --> 00:05:25.700
So this is for the product repository, let's do a similar thing for the product categories.

44
00:05:25.720 --> 00:05:27.400
I'll just do or copy paste here.

45
00:05:28.530 --> 00:05:31.710
And I'll just make small updates here, product category.

46
00:05:40.450 --> 00:05:43.630
And then everything else for this is the same.

47
00:05:44.290 --> 00:05:51.490
So we've basically locked down the product repository and also the product category repository and only

48
00:05:51.490 --> 00:05:53.140
made them read only.

49
00:05:53.950 --> 00:05:55.720
So this looks really good so far.

50
00:05:55.960 --> 00:05:56.500
I'm happy.

51
00:05:59.740 --> 00:06:04.360
And oh, yeah, one more thing I need to do, I almost forgot about this laptop, I need to add support

52
00:06:04.360 --> 00:06:09.520
for that configuration class, basically allow this to be scanned as a given item here.

53
00:06:09.520 --> 00:06:12.300
So we simply use a at configuration.

54
00:06:12.350 --> 00:06:13.660
So spring will pick this up.

55
00:06:18.320 --> 00:06:19.430
All right, so we're in good shape here.

56
00:06:19.460 --> 00:06:21.650
Let's go ahead and run this and let's test it out.

57
00:06:46.770 --> 00:06:50.070
Already our app is up and running, let's go and test it using Postman.

58
00:06:55.380 --> 00:06:59.970
And inside of Postman, I'll set up a new request here, I get requests right now just to make sure

59
00:06:59.970 --> 00:07:01.520
our normal Read-Only stuff works.

60
00:07:01.530 --> 00:07:04.440
So just make sure that we can at least get some products.

61
00:07:07.640 --> 00:07:10.580
So local 80, 80 slash API slash products.

62
00:07:13.550 --> 00:07:15.720
So this works out just fine, as we expected.

63
00:07:18.900 --> 00:07:24.810
Just simply duplicate this tab here and change to get requests to a host to request.

64
00:07:28.540 --> 00:07:34.240
And so a post request is where we would try and add a new item or add a new product.

65
00:07:35.260 --> 00:07:42.520
So here I just move into the body raw and then Jason and I'll just write some very basic Jason here

66
00:07:42.520 --> 00:07:45.820
to try and send it over to the API.

67
00:07:59.090 --> 00:08:00.260
Let's send this over.

68
00:08:01.630 --> 00:08:02.830
Let's see what we get back.

69
00:08:04.870 --> 00:08:10.060
And this looks really good, so notice here at the status that says four or five method not allowed.

70
00:08:10.090 --> 00:08:17.170
All right, so this API would not allow you to post requests so that given resource or endpoint.

71
00:08:17.530 --> 00:08:18.130
So that's good.

72
00:08:22.960 --> 00:08:24.550
Let's do a similar thing here for Put.

73
00:08:28.790 --> 00:08:30.120
So we try to do a put.

74
00:08:30.140 --> 00:08:33.710
So basically doing it update for you on product I.D..

75
00:08:34.780 --> 00:08:38.930
It was sand and a similar thing, four or five methods not allowed again.

76
00:08:38.980 --> 00:08:39.460
Very good.

77
00:08:39.490 --> 00:08:39.970
I like that.

78
00:08:45.030 --> 00:08:46.860
And then let's try it for a delete.

79
00:08:49.550 --> 00:08:51.980
So let's try and delete product idea one.

80
00:08:53.890 --> 00:08:54.760
Send that over.

81
00:08:56.210 --> 00:08:59.730
And then we also get four or five method not allowed, so this is great.

82
00:08:59.750 --> 00:09:00.290
I like this.

83
00:09:00.470 --> 00:09:02.540
But now let's just kind of double check this.

84
00:09:04.070 --> 00:09:08.660
I want to go into my database and look at my tables just to make sure that nothing's being deleted.

85
00:09:08.660 --> 00:09:10.220
So I'm moving onto our tables.

86
00:09:10.550 --> 00:09:16.120
I go to the my product table to a quick query, and then, yeah, everything's just fine.

87
00:09:16.130 --> 00:09:17.810
So notice that our products are still intact.

88
00:09:18.110 --> 00:09:19.010
Nothing was changed.

89
00:09:19.250 --> 00:09:21.110
Product idea of one is still there.

90
00:09:21.440 --> 00:09:23.330
No moth's, no deletes, so on.

91
00:09:23.340 --> 00:09:27.140
So at this point, our rest API is Read-Only.

92
00:09:27.260 --> 00:09:28.370
So this is great.

93
00:09:28.400 --> 00:09:34.520
We went through the spring data process of configuring our API by making it read only using a small

94
00:09:34.520 --> 00:09:35.990
piece of Java code.

95
00:09:36.330 --> 00:09:36.860
Good job.
