WEBVTT
1
00:00:01.410 --> 00:00:03.480
<v ->Okay, moving ahead, in step two,</v>

2
00:00:03.480 --> 00:00:04.823
we'll create our entities.

3
00:00:17.700 --> 00:00:21.343
So I'll create the entities here into this entity package.

4
00:00:23.140 --> 00:00:25.570
So I'll just create a new Java class,

5
00:00:25.570 --> 00:00:27.870
and I'll create a new Java class for customer.

6
00:00:42.260 --> 00:00:46.220
I'll set up my JPA annotations here for entity,

7
00:00:46.220 --> 00:00:48.803
reference the table, name customer.

8
00:01:01.680 --> 00:01:03.900
And I'll also make use of Lombok annotations,

9
00:01:03.900 --> 00:01:06.670
getter and setter, for Lombok to generate

10
00:01:06.670 --> 00:01:09.070
the appropriate getter and setter that's for me.

11
00:01:12.560 --> 00:01:14.740
For this customer class, we need to create four fields:

12
00:01:14.740 --> 00:01:17.363
ID, firstname, lastname, and email.

13
00:01:41.440 --> 00:01:42.870
And then next I need to go through

14
00:01:42.870 --> 00:01:46.020
and actually "at" my JPA annotations

15
00:01:46.020 --> 00:01:49.123
to map these fields to database columns.

16
00:02:07.987 --> 00:02:11.630
And I will just copy-paste the at column X number of times,

17
00:02:11.630 --> 00:02:13.280
and update the names accordingly.

18
00:02:32.910 --> 00:02:35.630
And, in fact, if you've played around with higher (mumbles)

19
00:02:35.630 --> 00:02:38.290
JPA for awhile, you know that the at column

20
00:02:38.290 --> 00:02:40.290
annotation is optional.

21
00:02:40.290 --> 00:02:41.870
If you don't give a reference,

22
00:02:41.870 --> 00:02:44.480
it will simply use the name of the field for mapping.

23
00:02:44.480 --> 00:02:48.290
So I could really do this without the at column annotation,

24
00:02:48.290 --> 00:02:50.710
but I like to do this just to be explicit.

25
00:02:50.710 --> 00:02:53.200
Also, in the event that the database schema changes,

26
00:02:53.200 --> 00:02:54.890
I can easily make the change here

27
00:02:54.890 --> 00:02:58.053
without having to, have any major changes anywhere else.

28
00:03:00.060 --> 00:03:01.513
Alrighty, so that's customer.

29
00:03:02.360 --> 00:03:05.093
Let's go ahead and create a new class for address.

30
00:03:24.040 --> 00:03:25.610
And so we'll do a similar approach here,

31
00:03:25.610 --> 00:03:26.610
so I'll just kind of

32
00:03:30.450 --> 00:03:33.260
copy some of the information from my previous

33
00:03:33.260 --> 00:03:34.483
customer class,

34
00:03:38.440 --> 00:03:40.190
and I'll put that into the address.

35
00:03:42.930 --> 00:03:46.030
And be sure to update the @table annotation

36
00:03:46.030 --> 00:03:47.923
to point to address.

37
00:04:00.270 --> 00:04:01.380
Alrighty, so then I'll go through

38
00:04:01.380 --> 00:04:03.693
and define the fields here for the address,

39
00:04:17.109 --> 00:04:19.370
and I'll hold off on setting up reference to order.

40
00:04:19.370 --> 00:04:21.010
We'll get into that in a bit.

41
00:04:21.010 --> 00:04:21.843
All right.

42
00:04:21.843 --> 00:04:23.620
Now just cover the basic fields for right now.

43
00:04:25.360 --> 00:04:28.743
Move over to customer, I'll copy the ID generation stuff,

44
00:04:47.620 --> 00:04:50.513
and then I'll make the appropriate updates here for column.

45
00:05:13.110 --> 00:05:15.270
Alrighty, so that coding looks pretty good.

46
00:05:15.270 --> 00:05:16.103
Good job.

