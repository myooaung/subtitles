1
00:00:01,145 --> 00:00:01,978
<v Instructor>In this video,</v>

2
00:00:01,978 --> 00:00:04,923
we'll cover Add Products a Shopping Cart, part two.

3
00:00:07,380 --> 00:00:10,855
And so, here are our main focus is on CartStatusComponent,

4
00:00:10,855 --> 00:00:12,616
we actually want to update the status,

5
00:00:12,616 --> 00:00:14,220
keeping track of the total price

6
00:00:14,220 --> 00:00:16,900
and the total quantity for the cart.

7
00:00:16,900 --> 00:00:19,303
And we'll cover all this in this set of videos.

8
00:00:22,270 --> 00:00:24,120
Here's our development process,

9
00:00:24,120 --> 00:00:26,060
the first thing we'll do is we'll create a model class

10
00:00:26,060 --> 00:00:29,070
for CartItem, we'll develop a CartService

11
00:00:29,070 --> 00:00:30,970
will modify the ProductListComponents

12
00:00:30,970 --> 00:00:32,550
to call the CartService,

13
00:00:32,550 --> 00:00:34,807
we'll also enhance our CartStatusComponent

14
00:00:34,807 --> 00:00:37,320
to subscribe to the CartService,

15
00:00:37,320 --> 00:00:38,600
and then finally, we'll update

16
00:00:38,600 --> 00:00:40,460
the CartStatusComponent HTML

17
00:00:40,460 --> 00:00:43,783
to display the cart total price and quantity.

18
00:00:47,010 --> 00:00:48,620
All righty, so let's kind of get an overview

19
00:00:48,620 --> 00:00:50,260
of the application interaction

20
00:00:50,260 --> 00:00:53,530
just so you see how all the different pieces work together.

21
00:00:53,530 --> 00:00:54,840
So over on the left-hand side

22
00:00:54,840 --> 00:00:56,350
we'll have this ProductListComponent

23
00:00:56,350 --> 00:00:58,310
that's going to have an Add to Cart button

24
00:00:59,300 --> 00:01:00,570
and over on the right-hand side

25
00:01:00,570 --> 00:01:02,020
we'll have the CartStatusComponent

26
00:01:02,020 --> 00:01:05,180
for displaying the total price and quantity.

27
00:01:05,180 --> 00:01:07,480
And then down in the center we'll have the CartService

28
00:01:07,480 --> 00:01:09,870
basically keeps track of all of the items

29
00:01:09,870 --> 00:01:11,423
that are in our shopping cart.

30
00:01:12,840 --> 00:01:15,000
The way it works here is at the CartStatusComponent

31
00:01:15,000 --> 00:01:17,903
it's going to subscribe for events on the CartService.

32
00:01:18,810 --> 00:01:20,440
Then over on the left-hand side,

33
00:01:20,440 --> 00:01:21,710
when the ProductListComponent,

34
00:01:21,710 --> 00:01:24,580
when the user actually clicks on the Add to Cart button,

35
00:01:24,580 --> 00:01:27,573
the ProductListComponent is going to call the CartService,

36
00:01:27,573 --> 00:01:29,610
the CartService will manually keep track

37
00:01:29,610 --> 00:01:31,830
of all the items in the shopping cart

38
00:01:31,830 --> 00:01:35,240
and then it'll publish the events to all subscribers.

39
00:01:35,240 --> 00:01:38,420
So, one of the subscribers use the CartStatusComponent,

40
00:01:38,420 --> 00:01:40,830
the CartStatusComponent will receive the event

41
00:01:40,830 --> 00:01:45,110
and then update the UI for the total price and quantity.

42
00:01:45,110 --> 00:01:48,320
So this is a very common pattern in Angular developer.

43
00:01:48,320 --> 00:01:50,140
Basically, here we have the CartService

44
00:01:50,140 --> 00:01:52,810
that's an observable and the CartStatusComponent

45
00:01:52,810 --> 00:01:54,040
is an observer.

46
00:01:54,040 --> 00:01:55,680
And we'll see how this actually works out

47
00:01:55,680 --> 00:01:58,223
with the actual coding when we move into it.

48
00:02:01,480 --> 00:02:04,960
So in step one, we'll create a model class called CartItem.

49
00:02:04,960 --> 00:02:08,160
This class simply contains the essential fields of a product

50
00:02:08,160 --> 00:02:09,373
for use in the cart.

51
00:02:10,890 --> 00:02:13,010
And it also has a field for the quantity,

52
00:02:13,010 --> 00:02:15,760
and we can use this for kind of keeping track of everything.

53
00:02:15,760 --> 00:02:20,173
So effectively, we have X number of widgets in our cart.

54
00:02:22,900 --> 00:02:23,850
All righty, so in step two,

55
00:02:23,850 --> 00:02:25,650
we're going to develop our CartService.

56
00:02:28,060 --> 00:02:30,320
So we have this class CartService,

57
00:02:30,320 --> 00:02:32,470
so up top, we have our shopping cart,

58
00:02:32,470 --> 00:02:35,640
it's simply an array of CartItem objects

59
00:02:35,640 --> 00:02:37,600
and we initialize it to an empty array,

60
00:02:37,600 --> 00:02:39,763
so it starts out as empty upfront.

61
00:02:42,160 --> 00:02:44,780
And then we have two entries here for total price

62
00:02:44,780 --> 00:02:45,613
and total quantity.

63
00:02:45,613 --> 00:02:48,710
There's subjects, so you may wonder, what is a subject?

64
00:02:48,710 --> 00:02:52,020
Well, a Subject is a subclass of observable.

65
00:02:52,020 --> 00:02:54,440
And so we can use the Subject to publish

66
00:02:54,440 --> 00:02:57,000
events in our code programmatically

67
00:02:57,000 --> 00:02:58,350
and then these events will be sent

68
00:02:58,350 --> 00:03:00,050
to all of the subscribers.

69
00:03:00,050 --> 00:03:02,490
And so I'll actually show you coding in a second

70
00:03:02,490 --> 00:03:05,940
and how we can actually publish an event using this Subject,

71
00:03:05,940 --> 00:03:07,340
you'll see that in a second.

72
00:03:09,510 --> 00:03:12,350
And so remember our whole application interaction here.

73
00:03:12,350 --> 00:03:15,880
So our CartService is going to publish events for subscribers.

74
00:03:15,880 --> 00:03:17,410
So the CartStatusComponent,

75
00:03:17,410 --> 00:03:19,000
they're going to subscribe for events

76
00:03:19,000 --> 00:03:21,960
and they we'll actually publish events to the subscribers,

77
00:03:21,960 --> 00:03:24,810
and we'll see how this coding pulls together in a second.

78
00:03:29,730 --> 00:03:32,180
So a bit more on the coding here for CartService.

79
00:03:33,980 --> 00:03:35,770
So we'll have this method Add to Cart,

80
00:03:35,770 --> 00:03:37,313
they'll pass on a CartItem.

81
00:03:38,873 --> 00:03:40,010
And so a couple of things here,

82
00:03:40,010 --> 00:03:43,040
we'll check if we already have the item in our cart.

83
00:03:43,040 --> 00:03:45,190
So we simply set up a boolean value here

84
00:03:45,190 --> 00:03:49,890
and also an existing CartItem, initialize it to undefined.

85
00:03:49,890 --> 00:03:52,470
And if the cartItems.length is greater than zero,

86
00:03:52,470 --> 00:03:54,280
so we have some items in our cart.

87
00:03:54,280 --> 00:03:57,500
Let's find the item in the cart based on the item ID.

88
00:03:57,500 --> 00:04:00,309
So we simply loop through all of the CartItems,

89
00:04:00,309 --> 00:04:02,910
then we checked to see if the tip cartItem.id

90
00:04:02,910 --> 00:04:05,140
equals the CartItem ID.

91
00:04:05,140 --> 00:04:07,790
If so we assign it and then we break out of the loop.

92
00:04:09,740 --> 00:04:11,140
Then we check to see if we found it,

93
00:04:11,140 --> 00:04:13,190
so we check to see if the existing CartItem

94
00:04:13,190 --> 00:04:14,970
is not equal to undefined.

95
00:04:14,970 --> 00:04:17,803
If not, we'll assign it true or false.

96
00:04:18,690 --> 00:04:21,963
And we'll use this flag and some of the code coming up.

97
00:04:23,360 --> 00:04:26,330
And here's that little next segment of code.

98
00:04:26,330 --> 00:04:29,220
So if already exists in cart,

99
00:04:29,220 --> 00:04:31,543
we simply increment the quantity.

100
00:04:33,000 --> 00:04:36,050
Else, we simply add the item to the array.

101
00:04:36,050 --> 00:04:39,750
So we say this.cartItems.push the CartItem

102
00:04:39,750 --> 00:04:41,960
that adds it to the array.

103
00:04:41,960 --> 00:04:44,530
And then finally, here we compute the cart quantity

104
00:04:44,530 --> 00:04:45,960
and the cart total.

105
00:04:45,960 --> 00:04:49,445
So we call this method, this.computeCartTotals

106
00:04:49,445 --> 00:04:51,050
and we'll actually write the code for this one

107
00:04:51,050 --> 00:04:52,173
on the next slide.

