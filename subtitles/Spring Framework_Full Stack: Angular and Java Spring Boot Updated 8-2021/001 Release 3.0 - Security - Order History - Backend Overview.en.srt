1
00:00:01,110 --> 00:00:02,520
<v Instructor>In this video, we'll cover</v>

2
00:00:02,520 --> 00:00:04,063
viewing order history.

3
00:00:08,290 --> 00:00:10,250
Let's add a new feature to allow the users

4
00:00:10,250 --> 00:00:12,720
to view their previous order history.

5
00:00:12,720 --> 00:00:14,390
This feature will only be available

6
00:00:14,390 --> 00:00:16,690
to logged in, authenticated users.

7
00:00:16,690 --> 00:00:18,130
Here's a little screenshot.

8
00:00:18,130 --> 00:00:19,440
Notice here on the far right,

9
00:00:19,440 --> 00:00:21,610
there's a new button here called orders.

10
00:00:21,610 --> 00:00:23,080
The user will click that button,

11
00:00:23,080 --> 00:00:25,930
and then it will show them their list of previous orders.

12
00:00:29,980 --> 00:00:31,780
Now looking at the front and back end,

13
00:00:31,780 --> 00:00:33,000
we're going to split up the development

14
00:00:33,000 --> 00:00:35,130
across multiple videos.

15
00:00:35,130 --> 00:00:37,670
We'll start working on the Spring Boot back end,

16
00:00:37,670 --> 00:00:38,970
and then we'll come back and work

17
00:00:38,970 --> 00:00:40,423
on the Angular front end.

18
00:00:43,900 --> 00:00:45,180
Here's the development process

19
00:00:45,180 --> 00:00:46,730
for the Spring Boot back end.

20
00:00:46,730 --> 00:00:47,710
The first thing that we'll do is

21
00:00:47,710 --> 00:00:50,610
we'll create the OrderRepository REST API,

22
00:00:50,610 --> 00:00:52,080
and then we'll update the configs

23
00:00:52,080 --> 00:00:55,163
to make the OrderRepository REST API read only.

24
00:00:58,680 --> 00:01:00,290
Okay, so here's step one of creating

25
00:01:00,290 --> 00:01:02,880
the OrderRepository REST API.

26
00:01:02,880 --> 00:01:04,090
We're going to expose an endpoint

27
00:01:04,090 --> 00:01:07,163
to search for orders by the customer's email address.

28
00:01:08,390 --> 00:01:10,610
We'll have this GET method and the endpoint of

29
00:01:10,610 --> 00:01:12,530
slash order, slash search,

30
00:01:12,530 --> 00:01:15,230
slash find by customer email,

31
00:01:15,230 --> 00:01:17,450
and question mark, email equals,

32
00:01:17,450 --> 00:01:19,190
then we pass in the actual value

33
00:01:19,190 --> 00:01:20,700
for that user's email address

34
00:01:20,700 --> 00:01:22,063
that we want to search by.

35
00:01:25,560 --> 00:01:26,520
Now a bit more here.

36
00:01:26,520 --> 00:01:27,970
Remember that Spring Data REST

37
00:01:27,970 --> 00:01:30,490
and Spring Data JPA supports query methods,

38
00:01:30,490 --> 00:01:33,120
so Spring will actually construct a query

39
00:01:33,120 --> 00:01:36,250
based on method-naming conventions.

40
00:01:36,250 --> 00:01:39,046
In this example here, we have the OrderRepository.

41
00:01:39,046 --> 00:01:42,050
We have this method find by customer email,

42
00:01:42,050 --> 00:01:44,273
and we pass in a param email.

43
00:01:47,760 --> 00:01:48,870
As a quick refresher here,

44
00:01:48,870 --> 00:01:51,480
here's our database diagram that we were working on.

45
00:01:51,480 --> 00:01:53,360
We have the orders table.

46
00:01:53,360 --> 00:01:54,410
Then, for a given order,

47
00:01:54,410 --> 00:01:56,130
it's associated with a given customer,

48
00:01:56,130 --> 00:01:57,930
and so we'll search for orders

49
00:01:57,930 --> 00:02:00,053
based on the customer's email address.

50
00:02:04,240 --> 00:02:05,510
Then as another refresher,

51
00:02:05,510 --> 00:02:08,750
the class diagram for our JPA entity classes.

52
00:02:08,750 --> 00:02:10,490
We have the order class,

53
00:02:10,490 --> 00:02:11,600
and then notice here at the bottom,

54
00:02:11,600 --> 00:02:12,980
there's a customer entry,

55
00:02:12,980 --> 00:02:16,100
so the order's associated with a given customer.

56
00:02:16,100 --> 00:02:18,570
Again, we'll use this JPA entity

57
00:02:18,570 --> 00:02:19,890
to search for orders

58
00:02:19,890 --> 00:02:22,113
based on the customer's email address.

59
00:02:25,470 --> 00:02:26,990
Now moving ahead here,

60
00:02:26,990 --> 00:02:30,510
a bit more details on this OrderRepository.

61
00:02:30,510 --> 00:02:34,250
We have the find by customer email and the param.

62
00:02:34,250 --> 00:02:37,910
Remember, Spring's going to do the work behind the scenes.

63
00:02:37,910 --> 00:02:41,150
Spring will actually execute a query similar to this.

64
00:02:41,150 --> 00:02:43,810
We'll have a select star from orders,

65
00:02:43,810 --> 00:02:45,630
left outer join on customer,

66
00:02:45,630 --> 00:02:49,920
on orders.customer ID equals customer.id,

67
00:02:49,920 --> 00:02:53,760
where customer.email equals the email.

68
00:02:53,760 --> 00:02:55,240
Email is going to the param

69
00:02:55,240 --> 00:02:57,450
that's passed into this actual method,

70
00:02:57,450 --> 00:03:00,570
and it'll actually be passed in via the REST API.

71
00:03:00,570 --> 00:03:02,450
Remember, the nice thing about all of the Spring magic,

72
00:03:02,450 --> 00:03:04,160
we simply write the method name,

73
00:03:04,160 --> 00:03:06,770
and then Spring will actually generate the query

74
00:03:06,770 --> 00:03:08,440
based on the given method name,

75
00:03:08,440 --> 00:03:10,857
so more of that Spring magic for you (laughs).

76
00:03:15,250 --> 00:03:17,550
Then, looking at the rest endpoint,

77
00:03:17,550 --> 00:03:19,640
Spring data REST will actually expose

78
00:03:19,640 --> 00:03:22,510
an endpoint here, find by customer email,

79
00:03:22,510 --> 00:03:25,040
and then you'd pass in the parameter for email.

80
00:03:25,040 --> 00:03:27,410
Here, we simply pass data to the REST API,

81
00:03:27,410 --> 00:03:29,817
in this case, demo@luv2code.com.

82
00:03:32,630 --> 00:03:34,000
Also, as another refresher,

83
00:03:34,000 --> 00:03:35,690
notice here we have page and pageable.

84
00:03:35,690 --> 00:03:37,720
That's for pagination support.

85
00:03:37,720 --> 00:03:41,070
In the event that we had 100 orders or 500 orders,

86
00:03:41,070 --> 00:03:42,740
we could have pagination support.

87
00:03:42,740 --> 00:03:45,010
This functionality is built into the API,

88
00:03:45,010 --> 00:03:47,020
and we can have support for it in the future

89
00:03:47,020 --> 00:03:48,170
if we'd like to use it.

90
00:03:51,280 --> 00:03:52,810
Okay, so that covers that piece of it.

91
00:03:52,810 --> 00:03:54,620
Now, step two of updating the configs

92
00:03:54,620 --> 00:03:57,313
to make the OrderRepository REST API read only.

93
00:03:57,313 --> 00:03:59,820
We've done a lot of this work before.

94
00:03:59,820 --> 00:04:00,660
We're simply going to add

95
00:04:00,660 --> 00:04:03,030
one new line here in our configuration

96
00:04:03,030 --> 00:04:06,200
to disable the methods for the order.class.

97
00:04:06,200 --> 00:04:08,210
Everything else here works out the same,

98
00:04:08,210 --> 00:04:09,603
so we're a-okay.

99
00:04:11,010 --> 00:04:12,390
Alrighty, so this coding looks pretty good.

100
00:04:12,390 --> 00:04:13,970
Let's go ahead and move into the next videos,

101
00:04:13,970 --> 00:04:15,853
and let's start writing some code.

