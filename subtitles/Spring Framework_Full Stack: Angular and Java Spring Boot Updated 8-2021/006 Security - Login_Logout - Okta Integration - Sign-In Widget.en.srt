1
00:00:01,200 --> 00:00:02,180
<v Instructor>So in step five,</v>

2
00:00:02,180 --> 00:00:04,630
we need to integrate the Okta Sign-In Widget

3
00:00:04,630 --> 00:00:06,620
with our application.

4
00:00:06,620 --> 00:00:08,730
So the first thing we need to do is add support

5
00:00:08,730 --> 00:00:12,140
for the Okta sign in CSS styles.

6
00:00:12,140 --> 00:00:16,320
So in our angular.json file, then in the styles section,

7
00:00:16,320 --> 00:00:19,803
we simply reference the Okta sign in CSS.

8
00:00:23,320 --> 00:00:27,070
Next, we need to go through and generate a login component.

9
00:00:27,070 --> 00:00:30,800
So here I make use of the Angular CLI ng generate component,

10
00:00:30,800 --> 00:00:32,453
components/login.

11
00:00:34,730 --> 00:00:37,840
Then I'll open up our login component on HTML,

12
00:00:37,840 --> 00:00:39,990
and I'll basically just set up a container

13
00:00:39,990 --> 00:00:42,690
to inject the Okta Sign-In Widget.

14
00:00:42,690 --> 00:00:44,720
So here I simply set up a div,

15
00:00:44,720 --> 00:00:48,450
and then I give div id equals okta-sign-in-widget.

16
00:00:48,450 --> 00:00:50,010
So this is where it'll actually place

17
00:00:50,010 --> 00:00:52,673
the Okta Sign-In Widget within our application.

18
00:00:56,093 --> 00:00:59,240
So moving into the file login.component.ts,

19
00:00:59,240 --> 00:01:01,850
I have my regular Angular imports.

20
00:01:01,850 --> 00:01:03,480
And then also on the next two lines,

21
00:01:03,480 --> 00:01:06,610
I have imports from the Okta SDK,

22
00:01:06,610 --> 00:01:09,943
and also an import for the Okta Sign-In Widget.

23
00:01:12,670 --> 00:01:14,387
I'll also do an import on myAppConfig.

24
00:01:14,387 --> 00:01:15,720
And so this is from the file

25
00:01:15,720 --> 00:01:17,760
that we created earlier, myAppConfig.

26
00:01:17,760 --> 00:01:19,320
So that's that JSON file

27
00:01:19,320 --> 00:01:21,902
that has configuration information for connecting

28
00:01:21,902 --> 00:01:24,760
to our given Okta application.

29
00:01:24,760 --> 00:01:26,910
So effectively, just think of this JSON here

30
00:01:26,910 --> 00:01:28,610
as like a properties file.

31
00:01:28,610 --> 00:01:29,910
And so we'll do an import here,

32
00:01:29,910 --> 00:01:31,853
so we can access these configs.

33
00:01:35,880 --> 00:01:36,960
So now let's simply go through

34
00:01:36,960 --> 00:01:40,297
and just create a normal component here, LoginComponent.

35
00:01:41,530 --> 00:01:43,853
I'll set up a reference here for Okta sign in.

36
00:01:45,160 --> 00:01:46,330
I'll set up a constructor

37
00:01:46,330 --> 00:01:48,123
while I inject the OktaAuthService.

38
00:01:52,240 --> 00:01:53,720
And inside of this constructor here,

39
00:01:53,720 --> 00:01:56,330
I create this new OktaSignIn,

40
00:01:56,330 --> 00:01:59,700
and here's where I customize the actual logo here

41
00:01:59,700 --> 00:02:01,020
for this Sign-In Widget.

42
00:02:01,020 --> 00:02:06,020
So I say logo is assets/images/logo.png.

43
00:02:06,250 --> 00:02:08,750
So that's our Love2shop logo

44
00:02:08,750 --> 00:02:11,140
that already exists in our application.

45
00:02:11,140 --> 00:02:13,500
So we're simply giving a relative reference here

46
00:02:13,500 --> 00:02:14,580
for that logo.

47
00:02:14,580 --> 00:02:17,060
You can use any logo file here that you like

48
00:02:17,060 --> 00:02:19,853
for actually including it on your Sign-In Widget.

49
00:02:23,360 --> 00:02:25,740
And then I add information here for the base URI,

50
00:02:25,740 --> 00:02:28,100
the clientId and the redirectUri.

51
00:02:28,100 --> 00:02:29,750
This is the same information that we had

52
00:02:29,750 --> 00:02:31,283
from our configuration.

53
00:02:34,900 --> 00:02:37,020
And then I set up the authParams,

54
00:02:37,020 --> 00:02:39,840
so pkce, issuer, scopes.

55
00:02:39,840 --> 00:02:42,380
So we've already discussed issuer and scopes.

56
00:02:42,380 --> 00:02:44,910
You're probably wondering about PKCE,

57
00:02:44,910 --> 00:02:46,770
what exactly does that mean?

58
00:02:46,770 --> 00:02:49,940
So that stands for Proof Key for Code Exchange.

59
00:02:49,940 --> 00:02:51,773
We have this value set to true.

60
00:02:52,830 --> 00:02:56,143
So let's talk a bit about this Proof Key for Code Exchange.

61
00:02:59,150 --> 00:03:03,200
So we'll make use of our authorization code flow with PKCE.

62
00:03:03,200 --> 00:03:06,260
PKCE, again, Proof Key for Code Exchange.

63
00:03:06,260 --> 00:03:08,940
It's the recommended approach for controlling access

64
00:03:08,940 --> 00:03:11,420
between our app and the auth server.

65
00:03:11,420 --> 00:03:12,990
And in particular it protects against

66
00:03:12,990 --> 00:03:16,460
the Authorization Code Interception attacks.

67
00:03:16,460 --> 00:03:18,370
So basically what PKCE does

68
00:03:18,370 --> 00:03:21,400
is that it introduces a concept of dynamic secrets.

69
00:03:21,400 --> 00:03:24,350
So instead of constant secrets, it's dynamic.

70
00:03:24,350 --> 00:03:26,770
So it's actually implemented with the code verifier,

71
00:03:26,770 --> 00:03:28,773
a code challenge, and a method.

72
00:03:29,640 --> 00:03:33,040
Now if you'd like to get more details on PKCE,

73
00:03:33,040 --> 00:03:35,100
visit the link I have here on the screen,

74
00:03:35,100 --> 00:03:35,933
it'll redirect you

75
00:03:35,933 --> 00:03:39,523
to the official Okta documentation for PKCE.

76
00:03:43,100 --> 00:03:44,140
All right so a bit more here

77
00:03:44,140 --> 00:03:47,340
on our login.component.ts file.

78
00:03:47,340 --> 00:03:49,900
So we have the code from before,

79
00:03:49,900 --> 00:03:53,983
and we'll add this new method here for ngOnInIt.

80
00:03:55,270 --> 00:03:56,450
So in the ngOnInIt,

81
00:03:56,450 --> 00:03:57,283
the first thing that we'll do

82
00:03:57,283 --> 00:03:58,930
is we'll say oktaSignIn.remove,

83
00:03:58,930 --> 00:04:01,700
basically remove any previous elements that were there.

84
00:04:01,700 --> 00:04:04,360
And then I'll say oktaSignIn.renderEL.

85
00:04:04,360 --> 00:04:07,060
So EL means render an element,

86
00:04:07,060 --> 00:04:08,980
and we give the actual element id

87
00:04:08,980 --> 00:04:10,030
that we want them to render.

88
00:04:10,030 --> 00:04:12,960
So here I have Â£okta-sign-in-widget.

89
00:04:12,960 --> 00:04:15,930
So this name should be the same as the div tag

90
00:04:15,930 --> 00:04:18,840
that we used in our login.component.html.

91
00:04:18,840 --> 00:04:20,740
So remember that previous code that we wrote.

92
00:04:20,740 --> 00:04:21,573
We had this div

93
00:04:21,573 --> 00:04:24,010
and we had the id set to okta-sign-in-widget.

94
00:04:24,010 --> 00:04:26,010
So those two items have to match up

95
00:04:26,010 --> 00:04:28,750
because you're telling it, "Hey, render this element."

96
00:04:28,750 --> 00:04:30,870
And you need to give the actual element id

97
00:04:30,870 --> 00:04:31,703
and they have to match.

98
00:04:31,703 --> 00:04:32,960
You can give it any name.

99
00:04:32,960 --> 00:04:35,950
But as long as you stay consistent between the HTML file

100
00:04:35,950 --> 00:04:38,613
and the reference that we have here in our TS file.

101
00:04:40,450 --> 00:04:42,820
When the user submits their credentials, we get a response.

102
00:04:42,820 --> 00:04:45,560
And so if the response.status equals success,

103
00:04:45,560 --> 00:04:46,700
that means that everything's okay.

104
00:04:46,700 --> 00:04:49,943
We'll say oktaAuthService.signInWithRedirect.

105
00:04:51,330 --> 00:04:54,540
If we have an error, then we simply throw an error.

106
00:04:54,540 --> 00:04:56,330
And that's how the Sign-In Widget works.

107
00:04:56,330 --> 00:04:58,200
So again, not much coding.

108
00:04:58,200 --> 00:05:00,770
It encapsulates a lot of the low-level coding

109
00:05:00,770 --> 00:05:02,300
for the backend for communicating

110
00:05:02,300 --> 00:05:04,000
with the actual Okta service.

111
00:05:04,000 --> 00:05:06,080
And it handles the authentication

112
00:05:06,080 --> 00:05:08,320
and the authorization piece for us.

113
00:05:08,320 --> 00:05:09,493
Very nice, I like it.

