1
00:00:01,220 --> 00:00:03,420
<v Instructor>Okay, so I'm really happy now</v>

2
00:00:03,420 --> 00:00:06,030
because we're at the final step,

3
00:00:06,030 --> 00:00:08,480
step six of creating the controller,

4
00:00:08,480 --> 00:00:10,903
oof, almost there, almost there.

5
00:00:20,850 --> 00:00:22,300
Alrighty, so the one thing I want to do here

6
00:00:22,300 --> 00:00:24,450
is create a new package for our controller.

7
00:00:39,130 --> 00:00:41,250
And now in this new package, I'll go ahead

8
00:00:41,250 --> 00:00:44,050
and create a new Java class for our checkout controller.

9
00:01:02,911 --> 00:01:04,610
Alrighty, so here's my checkout controller,

10
00:01:04,610 --> 00:01:06,640
I need to do a couple of things up top,

11
00:01:06,640 --> 00:01:09,050
set up support for the cross origin

12
00:01:09,050 --> 00:01:10,250
and we've been through this drill before

13
00:01:10,250 --> 00:01:11,867
with creating a rest APIs

14
00:01:17,767 --> 00:01:20,440
and then we'll set up our @rest controller annotation

15
00:01:20,440 --> 00:01:23,280
and also set up the base request mapping

16
00:01:23,280 --> 00:01:24,303
for this controller.

17
00:01:33,199 --> 00:01:34,840
And then remember with our application architecture,

18
00:01:34,840 --> 00:01:36,790
we need to make use of our service,

19
00:01:36,790 --> 00:01:38,713
in this case our checkout service.

20
00:01:41,470 --> 00:01:44,560
So I'll go through the normal drill here of injecting that

21
00:01:44,560 --> 00:01:48,780
checkout service using the a constructor injection here.

22
00:02:05,248 --> 00:02:07,490
And then just remember we could put auto wired

23
00:02:07,490 --> 00:02:09,510
but it's not required or it's optional,

24
00:02:09,510 --> 00:02:11,490
and in this case, because we only have one constructor,

25
00:02:11,490 --> 00:02:13,850
so, Spring will automatically auto wire that

26
00:02:15,200 --> 00:02:16,443
service in for us.

27
00:02:18,660 --> 00:02:20,350
Alrighty, let me stretch out a little bit here

28
00:02:20,350 --> 00:02:22,850
at the bottom, give myself some room to work with.

29
00:02:28,758 --> 00:02:29,591
So we know with our API,

30
00:02:29,591 --> 00:02:31,923
we're going to have post-mapping for /purchase.

31
00:02:38,400 --> 00:02:42,203
So this method will return a purchase response.

32
00:02:45,230 --> 00:02:48,690
The JSON will come over in the request body

33
00:02:54,120 --> 00:02:56,440
and so the sign out here to this purchase

34
00:02:56,440 --> 00:02:57,550
data transfer object

35
00:02:59,440 --> 00:03:01,290
that we created a little bit earlier.

36
00:03:09,150 --> 00:03:11,050
And now the coding here is really simple,

37
00:03:11,050 --> 00:03:15,210
all I'm going to do is simply delegate this to my service.

38
00:03:15,210 --> 00:03:17,560
So I'll make use of checkout service.placeorder

39
00:03:19,330 --> 00:03:21,180
and I'll just pass over the purchase.

40
00:03:25,610 --> 00:03:27,730
So that'll return as purchase response

41
00:03:27,730 --> 00:03:31,520
and I simply return that via the rest API,

42
00:03:31,520 --> 00:03:33,320
so it'll take that purchase response,

43
00:03:33,320 --> 00:03:36,003
send it back as JSON and we're all good to go.

44
00:03:46,370 --> 00:03:47,770
And one other thing I would do,

45
00:03:47,770 --> 00:03:50,810
just a little bit of housekeeping stuff here,

46
00:03:50,810 --> 00:03:54,610
I'll upgrade to the current version of Spring Boot,

47
00:03:54,610 --> 00:03:57,650
'cause I'm, I've been using the same version for a while now

48
00:03:57,650 --> 00:03:59,840
and she'll probably just catch up with what they have,

49
00:03:59,840 --> 00:04:03,970
so, of course this all changes with every version, right?

50
00:04:03,970 --> 00:04:05,230
So by the time you watch it,

51
00:04:05,230 --> 00:04:07,700
they'll probably be on a totally different version

52
00:04:07,700 --> 00:04:09,050
of Spring Boot

53
00:04:09,050 --> 00:04:11,770
but I'll just kind of update what I have for right now.

54
00:04:11,770 --> 00:04:14,270
The best way I go about this is just going in

55
00:04:14,270 --> 00:04:16,490
to the spring.io website

56
00:04:16,490 --> 00:04:19,620
and seeing what the current version number is,

57
00:04:19,620 --> 00:04:22,020
so Spring Boot is currently at 2.4

58
00:04:22,020 --> 00:04:24,080
and again, this will totally change

59
00:04:24,080 --> 00:04:25,370
by the time you watch it,

60
00:04:25,370 --> 00:04:28,480
they have a very aggressive and fast release cycle

61
00:04:30,510 --> 00:04:33,370
and I'll use the 2.4 and also to get the right version of

62
00:04:33,370 --> 00:04:35,780
I'll do a little explore here

63
00:04:35,780 --> 00:04:38,220
and note version 2.4.0

64
00:04:38,220 --> 00:04:41,030
so, starting with this version

65
00:04:41,030 --> 00:04:42,700
or maybe even the previous version,

66
00:04:42,700 --> 00:04:46,067
they changed their scheme for our versioning here,

67
00:04:46,067 --> 00:04:48,770
so make sure you use exactly what they have.

68
00:04:48,770 --> 00:04:50,640
The important thing here is that they dropped

69
00:04:50,640 --> 00:04:55,640
the .release with this version and future versions,

70
00:04:56,210 --> 00:04:57,960
so just be aware of that.

71
00:04:57,960 --> 00:05:00,670
So I'll just make use of that little generate feature to

72
00:05:00,670 --> 00:05:02,380
see exactly what the version number is,

73
00:05:02,380 --> 00:05:03,780
and you can drop it in here.

74
00:05:04,750 --> 00:05:07,250
All right, so I have that in, 2.4.0

75
00:05:14,160 --> 00:05:16,940
and then I simply do a Maven update over here

76
00:05:16,940 --> 00:05:19,893
so I can pull down all the latest stuff from the palm.

77
00:05:25,732 --> 00:05:26,900
And if you notice here at the bottom,

78
00:05:26,900 --> 00:05:28,640
it says it's resolving dependencies,

79
00:05:28,640 --> 00:05:32,350
so, the idea is actually loading or downloading

80
00:05:32,350 --> 00:05:36,840
the latest version to our local Maven repository.

81
00:05:36,840 --> 00:05:39,590
Depending on your internet speed, this may take awhile,

82
00:05:41,460 --> 00:05:44,880
but anyways that the final point it's all done.

83
00:05:44,880 --> 00:05:47,070
One thing to be aware of you may still see

84
00:05:47,070 --> 00:05:50,500
the version number in a different color.

85
00:05:50,500 --> 00:05:53,670
You can safely ignore this, the application will still run

86
00:05:53,670 --> 00:05:55,580
and we could still run the e-commerce app

87
00:05:55,580 --> 00:05:57,420
and it'll be up and running with no problem,

88
00:05:57,420 --> 00:06:00,030
so, just move past that.

89
00:06:00,030 --> 00:06:01,840
All right, so this looks pretty good.

90
00:06:01,840 --> 00:06:04,050
So in the next video, we'll actually run this

91
00:06:04,050 --> 00:06:06,413
and see if it works, oh yeah.

