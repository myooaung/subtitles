WEBVTT
1
00:00:01.240 --> 00:00:02.073
<v Instructor>In this video,</v>

2
00:00:02.073 --> 00:00:04.773
we're going to secure the order history backend.

3
00:00:08.550 --> 00:00:11.160
So the Order History functionality is working,

4
00:00:11.160 --> 00:00:14.029
however, the REST API on the backend,

5
00:00:14.029 --> 00:00:17.360
/api/orders is unsecured.

6
00:00:17.360 --> 00:00:19.470
All right, so we have the front end stuff in place

7
00:00:19.470 --> 00:00:23.550
but the actual backend REST API is wide open.

8
00:00:23.550 --> 00:00:26.363
Anybody can access that backend API.

9
00:00:30.350 --> 00:00:31.760
And so what we'd like to do here

10
00:00:31.760 --> 00:00:33.960
is secure the backend REST API.

11
00:00:33.960 --> 00:00:38.330
So the /api/orders should only be available

12
00:00:38.330 --> 00:00:40.350
to logged in users.

13
00:00:40.350 --> 00:00:43.400
So they'll have to log into the actual application first

14
00:00:43.400 --> 00:00:47.470
before they can actually access this backend API.

15
00:00:47.470 --> 00:00:50.453
So the get for /api/orders.

16
00:00:54.480 --> 00:00:56.123
Here's our development process.

17
00:00:57.290 --> 00:00:59.780
In step one, we're going to add the Okta Spring Boot Starter

18
00:00:59.780 --> 00:01:02.220
to the Maven pom.xml file.

19
00:01:02.220 --> 00:01:05.780
And then we'll create an app at the Okta Developer website.

20
00:01:05.780 --> 00:01:07.280
Next and the Spring Boot app,

21
00:01:07.280 --> 00:01:09.620
we'll set up our application properties.

22
00:01:09.620 --> 00:01:11.680
And then finally we'll protect the endpoints

23
00:01:11.680 --> 00:01:14.463
in the Spring Security configuration class.

24
00:01:17.750 --> 00:01:20.220
Alright, in step one of adding the Okta Spring Boot Starter

25
00:01:20.220 --> 00:01:21.780
to the Maven pom.xml file.

26
00:01:21.780 --> 00:01:25.260
So Okta provides a Spring Boot starter for Oauth 2

27
00:01:25.260 --> 00:01:26.770
and OpenID Connect.

28
00:01:26.770 --> 00:01:29.550
It simplifies the integration and configuration

29
00:01:29.550 --> 00:01:31.990
of Spring Security and Okta.

30
00:01:31.990 --> 00:01:33.770
So here's the pom.xml file

31
00:01:33.770 --> 00:01:35.890
and the entries here for the group ID,

32
00:01:35.890 --> 00:01:37.900
artifact ID and the version.

33
00:01:37.900 --> 00:01:39.530
And this is provided by Okta.

34
00:01:39.530 --> 00:01:42.720
If you'd like to get more information or more details

35
00:01:42.720 --> 00:01:44.950
on this Okta Spring Boot Starter,

36
00:01:44.950 --> 00:01:47.200
go to the link here that I have on the slide.

37
00:01:50.470 --> 00:01:52.100
In step two we're going to create an app

38
00:01:52.100 --> 00:01:53.880
in the Okta website.

39
00:01:53.880 --> 00:01:55.740
So we simply visit the website,

40
00:01:55.740 --> 00:01:58.460
we create a new application integration for the platform,

41
00:01:58.460 --> 00:02:00.250
we choose web, for the sign-on method

42
00:02:00.250 --> 00:02:02.150
we choose OpenID Connect.

43
00:02:02.150 --> 00:02:03.670
We hit the create button

44
00:02:03.670 --> 00:02:05.380
and then it'll give us some details here.

45
00:02:05.380 --> 00:02:07.600
And so we simply give an application name.

46
00:02:07.600 --> 00:02:09.350
We can give any name that we want.

47
00:02:09.350 --> 00:02:10.183
And then at the bottom here

48
00:02:10.183 --> 00:02:13.033
we can set up the login redirect URI.

49
00:02:14.190 --> 00:02:16.420
And I'll cover all of this in the coding video.

50
00:02:16.420 --> 00:02:18.210
I'll kind of walk you through the process of

51
00:02:18.210 --> 00:02:21.210
getting into the website, filling out the forms accordingly.

52
00:02:24.620 --> 00:02:26.480
For step three in the Spring Boot app,

53
00:02:26.480 --> 00:02:28.630
we're going to set the application properties.

54
00:02:29.740 --> 00:02:31.100
And so we'll set up the properties here

55
00:02:31.100 --> 00:02:34.260
for Okta.oauth2.client ID.

56
00:02:34.260 --> 00:02:35.410
And we'll also do a similar thing here

57
00:02:35.410 --> 00:02:37.890
for client secret and for .issuer.

58
00:02:37.890 --> 00:02:38.860
And you may wonder, well,

59
00:02:38.860 --> 00:02:40.870
where can I get this information from?

60
00:02:40.870 --> 00:02:43.800
Well, you'll get this from the Okta Developer website.

61
00:02:43.800 --> 00:02:46.180
Once you create that app, then you'll have the entries here

62
00:02:46.180 --> 00:02:47.490
over on the right hand side,

63
00:02:47.490 --> 00:02:50.300
client ID, client secret and Okta domain.

64
00:02:50.300 --> 00:02:52.790
And you can easily copy paste that information

65
00:02:52.790 --> 00:02:55.500
from the website over into your properties file.

66
00:02:55.500 --> 00:02:58.350
And I'll show you that whole process in the coding video.

67
00:02:59.220 --> 00:03:01.530
Your Spring Boot application will use these properties

68
00:03:01.530 --> 00:03:04.963
to verify and validate the JWT access tokens.

69
00:03:08.510 --> 00:03:11.350
Alright, let's do a quick little refresher on OAuth 2.

70
00:03:11.350 --> 00:03:12.820
So there are some key players here,

71
00:03:12.820 --> 00:03:14.760
resource owner, resource server,

72
00:03:14.760 --> 00:03:17.020
client app and the authorization server

73
00:03:17.020 --> 00:03:19.170
and they all kind of interact and work together.

74
00:03:19.170 --> 00:03:21.970
And so let's kind of just take a look at this

75
00:03:21.970 --> 00:03:23.420
and do a quick refresh.

76
00:03:23.420 --> 00:03:26.553
The one item we'll look at is a resource server.

77
00:03:30.690 --> 00:03:32.920
The resource server is the app that's hosting

78
00:03:32.920 --> 00:03:34.820
our protected resources.

79
00:03:34.820 --> 00:03:36.650
So in our case it's our Spring Boot app

80
00:03:36.650 --> 00:03:39.000
that's hosting our RESt APIs.

81
00:03:39.000 --> 00:03:40.900
The resource server manages security

82
00:03:40.900 --> 00:03:43.300
using the access tokens, JWT.

83
00:03:43.300 --> 00:03:45.550
The access tokens are validated

84
00:03:45.550 --> 00:03:48.500
with the authorization server, which is Okta.

85
00:03:53.160 --> 00:03:54.980
So now let's kind of pull this together.

86
00:03:54.980 --> 00:03:56.360
On this diagram here,

87
00:03:56.360 --> 00:04:00.072
the resource owner is the actual end-user, right,

88
00:04:00.072 --> 00:04:01.920
they'll enter the user ID and password.

89
00:04:01.920 --> 00:04:03.630
They'll make use of this client application.

90
00:04:03.630 --> 00:04:06.910
In our case, that's an angular, front-end application.

91
00:04:06.910 --> 00:04:09.640
And then the resource servers are Spring Boot application

92
00:04:09.640 --> 00:04:13.000
holding our protected resources, those REST APIs.

93
00:04:13.000 --> 00:04:16.040
And then finally the authorization server is Okta.

94
00:04:19.920 --> 00:04:21.440
And here's the sequence diagram,

95
00:04:21.440 --> 00:04:23.190
so you can kind of see the whole interaction

96
00:04:23.190 --> 00:04:24.780
between these different players.

97
00:04:24.780 --> 00:04:27.910
So the resource owner will log in with their credentials,

98
00:04:27.910 --> 00:04:29.950
their user ID and password.

99
00:04:29.950 --> 00:04:31.840
The client application will send those credentials

100
00:04:31.840 --> 00:04:34.280
over to the authorization server, which is Okta.

101
00:04:35.410 --> 00:04:37.433
Okta provides an auth token.

102
00:04:38.480 --> 00:04:41.923
We'll use that auth token to request an access token.

103
00:04:42.840 --> 00:04:45.160
And then auth will provide us that access token.

104
00:04:45.160 --> 00:04:47.810
The client app will use that access token

105
00:04:47.810 --> 00:04:49.970
and send it over to the resource server

106
00:04:49.970 --> 00:04:51.990
which is our Spring Boot application.

107
00:04:51.990 --> 00:04:54.090
Our resource server's going to verify,

108
00:04:54.090 --> 00:04:57.603
validate the token, with the authorization server, Okta.

109
00:04:58.860 --> 00:05:00.660
And if everything checks out okay,

110
00:05:00.660 --> 00:05:04.320
then it'll provide access to the protected resource.

111
00:05:04.320 --> 00:05:06.390
So again remember the resource servers

112
00:05:06.390 --> 00:05:08.407
are Spring Boot application and he says,

113
00:05:08.407 --> 00:05:11.480
"Hey, I have a token, is this a valid token?"

114
00:05:11.480 --> 00:05:13.370
Then based on our security rules,

115
00:05:13.370 --> 00:05:17.483
then we can provide access to that given protected resource.

116
00:05:21.980 --> 00:05:25.020
Now with the clients sending the access token,

117
00:05:25.020 --> 00:05:26.750
they're going to send the access token

118
00:05:26.750 --> 00:05:28.820
as an HTTP request header.

119
00:05:28.820 --> 00:05:32.550
So our angular application, when they make a web request,

120
00:05:32.550 --> 00:05:34.370
then they'll actually send over this request.

121
00:05:34.370 --> 00:05:36.920
They'll also set up a special request header,

122
00:05:36.920 --> 00:05:40.530
authorization:bearer and then the actual

123
00:05:40.530 --> 00:05:43.130
reference to the access token, all right?

124
00:05:43.130 --> 00:05:45.240
So this is something that our angular application

125
00:05:45.240 --> 00:05:46.650
will have to send over.

126
00:05:46.650 --> 00:05:50.140
Now at the moment, our angular app, doesn't send this,

127
00:05:50.140 --> 00:05:52.290
we'll add this in some feature videos

128
00:05:52.290 --> 00:05:53.950
but that part will need to be in place

129
00:05:53.950 --> 00:05:56.510
for it to fully work into end.

130
00:05:56.510 --> 00:05:58.960
At the moment we're simply focusing on the backend

131
00:05:58.960 --> 00:06:01.200
of securing the backend, the REST API.

132
00:06:01.200 --> 00:06:03.360
Once we get the backend REST API secured,

133
00:06:03.360 --> 00:06:06.560
then we'll focus on making the updates for the angular app,

134
00:06:06.560 --> 00:06:08.820
but don't worry, I got you covered,

135
00:06:08.820 --> 00:06:11.220
we'll cover the backend stuff and the front end stuff

136
00:06:11.220 --> 00:06:12.520
in these series of videos.

137
00:06:16.930 --> 00:06:19.230
Okay, finally step four, protecting the endpoints

138
00:06:19.230 --> 00:06:21.623
in the Spring Security configuration class.

139
00:06:24.040 --> 00:06:26.603
So we just set up our package and our imports here,

140
00:06:30.640 --> 00:06:32.433
we'll set up this configuration,

141
00:06:33.390 --> 00:06:37.790
extends web security configure adapter.

142
00:06:37.790 --> 00:06:41.403
We override the configure method for HTTP security,

143
00:06:42.730 --> 00:06:46.283
and then we're going to protect this endpoint/api/orders.

144
00:06:47.190 --> 00:06:49.730
So here, what we're going to do is we're going to protect

145
00:06:49.730 --> 00:06:52.500
the endpoint and it's only accessible

146
00:06:52.500 --> 00:06:54.690
to authenticated users.

147
00:06:54.690 --> 00:06:59.690
So note here for .antmatches at /api/orders/**.

148
00:07:00.170 --> 00:07:01.900
The star star will basically say,

149
00:07:01.900 --> 00:07:06.850
apply this rule for this path and all sub paths recursively.

150
00:07:06.850 --> 00:07:08.537
And the .authenticated piece says,

151
00:07:08.537 --> 00:07:12.217
"Hey, this is only accessible to authenticated users."

152
00:07:15.660 --> 00:07:18.350
And then we have OAuth 2 resource server.

153
00:07:18.350 --> 00:07:20.130
So basically we're going to configure ourself

154
00:07:20.130 --> 00:07:22.250
as an Oauth 2 resource server,

155
00:07:22.250 --> 00:07:24.050
so we're providing support for that.

156
00:07:26.340 --> 00:07:28.020
And then we have .jwt.

157
00:07:28.020 --> 00:07:31.750
So this enables JWT encoded bearer token support.

158
00:07:31.750 --> 00:07:33.810
So when this information is passed over

159
00:07:33.810 --> 00:07:36.070
as part of the HTTP request header,

160
00:07:36.070 --> 00:07:39.270
then this gives us functionality to process that header,

161
00:07:39.270 --> 00:07:40.490
read that information

162
00:07:40.490 --> 00:07:43.693
and process that JWT token accordingly.

163
00:07:47.270 --> 00:07:50.040
Now, one thing I want to kind of just step aside here

164
00:07:50.040 --> 00:07:52.200
and make a small digression,

165
00:07:52.200 --> 00:07:54.770
JWT, that's how I referenced it.

166
00:07:54.770 --> 00:07:57.490
Online you'll also hear people refer to this

167
00:07:57.490 --> 00:07:59.290
as JSON Web Token.

168
00:07:59.290 --> 00:08:02.247
You'll also hear people refer to it as a "jot."

169
00:08:03.190 --> 00:08:05.380
You can call it a jot or JSON Web Token.

170
00:08:05.380 --> 00:08:06.213
It's totally up to you.

171
00:08:06.213 --> 00:08:08.350
It doesn't change the technical stuff, right?

172
00:08:08.350 --> 00:08:10.313
Everything still works as desired.

173
00:08:12.580 --> 00:08:14.130
Okay, back on track (giggling).

174
00:08:15.760 --> 00:08:17.950
And then we add support for the cors filter.

175
00:08:17.950 --> 00:08:20.040
So we simply say http.cors

176
00:08:21.160 --> 00:08:24.380
and that's basically it as far as the Spring Security

177
00:08:24.380 --> 00:08:28.560
backend coding for securing this REST endpoint.

178
00:08:28.560 --> 00:08:30.550
So what we'll do is we'll move into the next video

179
00:08:30.550 --> 00:08:32.980
and we'll go ahead and start writing the code.

180
00:08:32.980 --> 00:08:35.753
So I'll see ya in the next video.

