1
00:00:01,110 --> 00:00:03,703
<v ->In this video we'll cover TypeScript variables.</v>

2
00:00:06,870 --> 00:00:10,120
So TypeScript has some basic types.

3
00:00:10,120 --> 00:00:13,040
So there's boolean, true/false values.

4
00:00:13,040 --> 00:00:16,533
There's number, supports integer and floating point numbers.

5
00:00:17,400 --> 00:00:19,090
String, for text data.

6
00:00:19,090 --> 00:00:22,140
You can enclose it in a single or double quote.

7
00:00:22,140 --> 00:00:25,730
Any, supports any datatype assignment.

8
00:00:25,730 --> 00:00:27,550
And there are some other more advanced items,

9
00:00:27,550 --> 00:00:30,913
and you can see the details at www.typescriptlang.org.

10
00:00:34,190 --> 00:00:36,950
Alrighty, so how do you define a variable in TypeScript?

11
00:00:36,950 --> 00:00:39,260
So the basic syntax, you use the let keyword,

12
00:00:39,260 --> 00:00:42,973
you get the variablename: type = initial value.

13
00:00:44,370 --> 00:00:49,370
So as an example here I'll say let found: boolean = true;

14
00:00:50,330 --> 00:00:54,650
So here, found is the variablename, boolean is the type,

15
00:00:54,650 --> 00:00:56,703
and then true is the initial value.

16
00:00:59,480 --> 00:01:01,100
And let's look as some other examples of

17
00:01:01,100 --> 00:01:02,630
defining variables here.

18
00:01:02,630 --> 00:01:05,210
So we have let found: boolean = true;

19
00:01:05,210 --> 00:01:08,210
So the values here could be true or false.

20
00:01:08,210 --> 00:01:10,670
Let grade: number = 88.6;

21
00:01:12,186 --> 00:01:14,336
And the values here could be 73, 64.5, 100,

22
00:01:16,050 --> 00:01:18,497
so integer or decimal numbers.

23
00:01:18,497 --> 00:01:21,640
Let firstname: string = "Annup;",

24
00:01:21,640 --> 00:01:24,660
or let lastname: string = 'Kumar;.'

25
00:01:24,660 --> 00:01:26,393
So you can use double quotes for the strings

26
00:01:26,393 --> 00:01:28,993
or single quotes, totally up to you.

27
00:01:31,920 --> 00:01:33,810
Now the TypeScript let keyword.

28
00:01:33,810 --> 00:01:36,160
So we're using the new typescript let keyword

29
00:01:36,160 --> 00:01:37,980
for variable declarations,

30
00:01:37,980 --> 00:01:42,290
as opposed to the traditional JavaScript var keyword.

31
00:01:42,290 --> 00:01:45,560
The JavaScript var keyword had a number of gotchas

32
00:01:45,560 --> 00:01:48,570
and pitfalls, such as scoping issues, capturing,

33
00:01:48,570 --> 00:01:50,040
shadowing, and so on.

34
00:01:50,040 --> 00:01:53,500
So the new Typescript let keyword helps

35
00:01:53,500 --> 00:01:57,060
to eliminate those issues and so in this video series

36
00:01:57,060 --> 00:01:59,173
I'll use the let keyword throughout.

37
00:02:02,340 --> 00:02:04,516
Now, TypeScript is strongly typed.

38
00:02:04,516 --> 00:02:08,550
So here I set up the variables with their given types

39
00:02:11,400 --> 00:02:14,140
and so I can assign it to different values,

40
00:02:14,140 --> 00:02:17,270
as long as it's of that given type, so this would be okay.

41
00:02:17,270 --> 00:02:19,750
So I could say found = false, that's okay.

42
00:02:19,750 --> 00:02:22,971
Grade = 99; firstname = 'Eric'; and lastname = 'Noh';

43
00:02:22,971 --> 00:02:23,804
Right?

44
00:02:23,804 --> 00:02:25,560
So this all kind of matches up with the types

45
00:02:25,560 --> 00:02:26,610
that we've defined earlier.

46
00:02:26,610 --> 00:02:29,183
So this is a-okay, no problems.

47
00:02:33,050 --> 00:02:35,310
But now we could encounter some problems

48
00:02:35,310 --> 00:02:39,360
if we try and assign something with a different type.

49
00:02:39,360 --> 00:02:43,290
All right, so here if I say found = 0; grade = "A";

50
00:02:43,290 --> 00:02:46,270
then it's a type mismatch, because it doesn't match

51
00:02:46,270 --> 00:02:48,530
the given type we initially defined

52
00:02:48,530 --> 00:02:50,320
this variable for.

53
00:02:50,320 --> 00:02:53,400
And firstname = false; and lastname = 2099;

54
00:02:53,400 --> 00:02:56,050
this will also generate compellation errors

55
00:02:56,050 --> 00:02:57,440
because of type mismatch.

56
00:02:57,440 --> 00:02:58,820
And this is actually really good,

57
00:02:58,820 --> 00:03:01,067
it's great that the compiler is finding these errors

58
00:03:01,067 --> 00:03:05,323
at compilation time as opposed to waiting until run time.

59
00:03:05,323 --> 00:03:08,933
So this is a feature about TypeScript that I really like.

60
00:03:13,070 --> 00:03:16,330
Now TypeScript also has the any keyword.

61
00:03:16,330 --> 00:03:20,630
So I could say let mydata: any = 50.0;

62
00:03:20,630 --> 00:03:24,092
so that means we can assign different values of any type.

63
00:03:24,092 --> 00:03:24,925
(laughs) Okay.

64
00:03:24,925 --> 00:03:26,967
So I could have myData = false;

65
00:03:26,967 --> 00:03:28,183
myData = 'Eric';

66
00:03:28,183 --> 00:03:30,010
myData = 19;

67
00:03:30,010 --> 00:03:33,110
And this will all pass the compiler, (laughs) okay.

68
00:03:33,110 --> 00:03:34,050
So this is okay.

69
00:03:34,050 --> 00:03:37,810
But I'd like to say, be careful because you lose type-safety

70
00:03:37,810 --> 00:03:41,350
and you start to lose a lot of the features of TypeScript.

71
00:03:41,350 --> 00:03:43,780
So you may wonder, well when would I use any?

72
00:03:43,780 --> 00:03:45,830
Well you can use any for like generics.

73
00:03:45,830 --> 00:03:48,400
So if you're setting up a list, or an array,

74
00:03:48,400 --> 00:03:50,210
that can have different types of data,

75
00:03:50,210 --> 00:03:52,303
then you can set it up using any.

76
00:03:56,830 --> 00:03:58,760
Alrighty, so as far as displaying output

77
00:03:58,760 --> 00:04:00,690
you can simply use the console.log.

78
00:04:00,690 --> 00:04:02,000
So here is some examples.

79
00:04:02,000 --> 00:04:04,317
So here I have a console.log found; so it will print out

80
00:04:04,317 --> 00:04:06,471
whatever that boolean value is.

81
00:04:06,471 --> 00:04:09,930
It'll say console.log "The grade is " + grade;

82
00:04:09,930 --> 00:04:11,770
so string concatenation here.

83
00:04:11,770 --> 00:04:13,460
And also you can real get fancy

84
00:04:13,460 --> 00:04:14,293
the string concatonation.

85
00:04:14,293 --> 00:04:17,410
console.log "Hi" + firstname + " " + lastname;

86
00:04:17,410 --> 00:04:19,410
So this will give us the output here, true,

87
00:04:19,410 --> 00:04:22,423
the grade is 88.6, and Hi Anup Kumar.

88
00:04:25,870 --> 00:04:27,450
Alrighty, so then as far as running the app,

89
00:04:27,450 --> 00:04:30,360
so we have this file here of sample-types.ts,

90
00:04:30,360 --> 00:04:33,160
I compile the code using tsc, give the name

91
00:04:33,160 --> 00:04:35,190
of the TypeScript file.

92
00:04:35,190 --> 00:04:38,480
So remember this generates a .js file,

93
00:04:38,480 --> 00:04:42,950
so I can run this by saying C:\&gt; node sample-types.js.

94
00:04:42,950 --> 00:04:45,320
And remember we run the .js file,

95
00:04:45,320 --> 00:04:47,273
the generated JavaScript file.

96
00:04:48,710 --> 00:04:51,390
And this will give us the ouput true, the grade is 88.6,

97
00:04:51,390 --> 00:04:53,363
and Hi Anup Kumar.

98
00:04:56,460 --> 00:04:59,420
Alrighty, you can also make use of template strings.

99
00:04:59,420 --> 00:05:00,980
So let's look at the previous example

100
00:05:00,980 --> 00:05:03,030
that we had a little bit earlier.

101
00:05:03,030 --> 00:05:05,610
And so the concatenation could become clunky

102
00:05:05,610 --> 00:05:07,830
for very long strings, and you may have seen

103
00:05:07,830 --> 00:05:10,320
this in other programing languages.

104
00:05:10,320 --> 00:05:12,510
So we can make use of template strings here.

105
00:05:12,510 --> 00:05:16,780
So I could say console.log `Hi + $firstname $lastname;

106
00:05:16,780 --> 00:05:19,990
So notice here the difference, I make use of backticks,

107
00:05:19,990 --> 00:05:21,680
all right, and then I say hi,

108
00:05:21,680 --> 00:05:23,922
and then to reference a variable,

109
00:05:23,922 --> 00:05:27,840
I make use of ${ and I give whatever the value here.

110
00:05:27,840 --> 00:05:30,010
So this is very useful for long strings

111
00:05:30,010 --> 00:05:31,380
with a lot of concatenation.

112
00:05:31,380 --> 00:05:34,010
So instead of doing all the plus, plus, plus stuff

113
00:05:34,010 --> 00:05:36,010
you simply create your template string

114
00:05:36,010 --> 00:05:38,480
and then you reference your variables accordingly.

115
00:05:38,480 --> 00:05:40,360
So, kind of cleans up your code a bit

116
00:05:40,360 --> 00:05:44,173
If you have a very long string with a lot of concatenation.

117
00:05:45,140 --> 00:05:47,040
Okay, so this is all really good stuff.

118
00:05:47,040 --> 00:05:48,870
In the next video we'll move into the IDE

119
00:05:48,870 --> 00:05:50,250
and we'll write some code.

120
00:05:50,250 --> 00:05:51,350
So I'll see you there.

