WEBVTT
1
00:00:01.310 --> 00:00:02.570
<v ->All righty, so let's go ahead and talk</v>

2
00:00:02.570 --> 00:00:03.860
about the development process

3
00:00:03.860 --> 00:00:05.933
for the Spring Boot back end.

4
00:00:08.790 --> 00:00:11.740
And before I get there, I just want to do a little checkpoint

5
00:00:11.740 --> 00:00:13.900
here on our Java Development Environment.

6
00:00:13.900 --> 00:00:15.980
So one thing is that we're going to assume

7
00:00:15.980 --> 00:00:19.820
that you're already an experienced Spring Boot developer.

8
00:00:19.820 --> 00:00:21.560
If you don't have any Spring Boot experience,

9
00:00:21.560 --> 00:00:24.080
I'll recommend you go find an online tutorial

10
00:00:24.080 --> 00:00:24.913
for Spring Boot.

11
00:00:24.913 --> 00:00:26.760
There's a lot of free ones online.

12
00:00:26.760 --> 00:00:29.460
I also have a beginner's course that covers

13
00:00:29.460 --> 00:00:31.370
Spring Hibernate and Spring Boot.

14
00:00:31.370 --> 00:00:33.360
You can take a look at that if you need to get

15
00:00:33.360 --> 00:00:34.920
up to speed.

16
00:00:34.920 --> 00:00:36.960
And then also you should have the following items

17
00:00:36.960 --> 00:00:38.700
already installed on your computers.

18
00:00:38.700 --> 00:00:40.690
So you should already have the Java Development Kit

19
00:00:40.690 --> 00:00:42.393
installed, the Java IDE.

20
00:00:43.302 --> 00:00:44.530
We'll use IntelliJ in the videos,

21
00:00:44.530 --> 00:00:46.610
but any Java IDE will work.

22
00:00:46.610 --> 00:00:48.100
And I'll talk more about that later.

23
00:00:48.100 --> 00:00:49.910
You need to have Maven already installed

24
00:00:49.910 --> 00:00:51.500
and also the MySQL Database

25
00:00:51.500 --> 00:00:55.223
and also the MySQL Workbench, the client admin tool.

26
00:00:57.730 --> 00:00:58.980
All righty, so about IntelliJ.

27
00:00:58.980 --> 00:01:03.730
IntelliJ is this super amazing IDE for Java development,

28
00:01:03.730 --> 00:01:05.710
and I highly recommend that you take a look at it

29
00:01:05.710 --> 00:01:06.890
and use it.

30
00:01:06.890 --> 00:01:09.160
So in this course, we're going to use the free version

31
00:01:09.160 --> 00:01:10.480
of IntelliJ.

32
00:01:10.480 --> 00:01:13.080
It's known as the IntelliJ Community Edition.

33
00:01:13.080 --> 00:01:14.780
And you can download it from the website

34
00:01:14.780 --> 00:01:16.130
here on the slide.

35
00:01:16.130 --> 00:01:17.700
And once you're at that given website,

36
00:01:17.700 --> 00:01:20.260
you simply select Community Edition,

37
00:01:20.260 --> 00:01:21.910
download it, and get it up and running.

38
00:01:21.910 --> 00:01:24.430
And the Community Edition, you can use it for building

39
00:01:24.430 --> 00:01:27.030
the applications that we'll use here in this course.

40
00:01:28.110 --> 00:01:29.950
They also have the Ultimate Edition,

41
00:01:29.950 --> 00:01:31.150
so it's a paid version.

42
00:01:31.150 --> 00:01:34.880
It has a lot of additional enterprise features for you.

43
00:01:34.880 --> 00:01:36.720
If you're working for a company, your company could

44
00:01:36.720 --> 00:01:39.650
probably purchase that Ultimate Edition for you.

45
00:01:39.650 --> 00:01:42.470
But anyways, there's a free trial of the Ultimate Edition

46
00:01:42.470 --> 00:01:43.560
that is available,

47
00:01:43.560 --> 00:01:45.880
and you can download it also from the link

48
00:01:45.880 --> 00:01:47.790
that I gave here on this slide.

49
00:01:47.790 --> 00:01:48.930
So either way,

50
00:01:48.930 --> 00:01:51.280
but in this course, the development that we're going to use,

51
00:01:51.280 --> 00:01:54.840
the Community Edition will meet our given needs.

52
00:01:54.840 --> 00:01:56.910
And if you want to see a comparison between the

53
00:01:56.910 --> 00:01:59.470
different editions, the Community and Ultimate,

54
00:01:59.470 --> 00:02:02.340
at the JetBrains website, they do a really good job

55
00:02:02.340 --> 00:02:04.440
of showing you the comparison of features.

56
00:02:07.990 --> 00:02:10.210
All righty, so additional Java IDEs,

57
00:02:10.210 --> 00:02:11.350
and you're probably wondering,

58
00:02:11.350 --> 00:02:13.070
well what about Eclipse?

59
00:02:13.070 --> 00:02:14.150
What about VS Code?

60
00:02:14.150 --> 00:02:15.153
What about NetBeans?

61
00:02:16.368 --> 00:02:17.960
And the answer's, no problem.

62
00:02:17.960 --> 00:02:20.900
You're free to use other Java IDEs.

63
00:02:20.900 --> 00:02:23.750
All you need is a Java IDE that supports Maven,

64
00:02:23.750 --> 00:02:24.583
that's it.

65
00:02:24.583 --> 00:02:26.770
You can easily follow along in this course

66
00:02:26.770 --> 00:02:28.980
with any Java IDE.

67
00:02:28.980 --> 00:02:31.860
And we'll also provide support for IntelliJ, Eclipse,

68
00:02:31.860 --> 00:02:33.140
VS Code, and NetBeans.

69
00:02:33.140 --> 00:02:35.490
So feel free to use any IDE

70
00:02:35.490 --> 00:02:37.090
that you're most comfortable with.

71
00:02:37.090 --> 00:02:38.923
Don't worry, we got you covered.

72
00:02:42.330 --> 00:02:44.240
All righty, so our Spring Boot back end,

73
00:02:44.240 --> 00:02:46.680
so we're going to leverage Spring Data REST

74
00:02:46.680 --> 00:02:47.513
for our REST API.

75
00:02:47.513 --> 00:02:49.790
And it'll actually minimize the coding

76
00:02:49.790 --> 00:02:51.270
for the Spring Boot back end.

77
00:02:51.270 --> 00:02:54.250
So, again, we're building this full stack application,

78
00:02:54.250 --> 00:02:56.600
Angular on the front, Spring Boot on the back.

79
00:02:56.600 --> 00:02:58.750
We somehow need to create REST APIs,

80
00:02:58.750 --> 00:03:01.893
and we'll use Spring Data REST to help us out with that.

81
00:03:05.250 --> 00:03:07.210
Since you already have some Spring Boot experience,

82
00:03:07.210 --> 00:03:08.680
just a quick refresher here.

83
00:03:08.680 --> 00:03:11.320
So Spring Data REST will basically scan our project

84
00:03:11.320 --> 00:03:13.020
for a JpaRepository,

85
00:03:13.020 --> 00:03:15.920
and it'll expose REST APIs for each entity type

86
00:03:15.920 --> 00:03:17.780
for our JpaRepository.

87
00:03:17.780 --> 00:03:19.010
So here's one example here.

88
00:03:19.010 --> 00:03:23.050
We have this ProductRepository extends JpaRepository.

89
00:03:23.050 --> 00:03:25.900
We give the entity type comma the primary key type.

90
00:03:25.900 --> 00:03:27.870
So the entity type here is Product.

91
00:03:27.870 --> 00:03:29.793
The primary key type is Long.

92
00:03:32.960 --> 00:03:34.330
And based on this information,

93
00:03:34.330 --> 00:03:36.490
it'll expose REST endpoints.

94
00:03:36.490 --> 00:03:38.250
So a bit more here on the REST endpoints.

95
00:03:38.250 --> 00:03:41.000
So by default, Spring Data REST will create endpoints

96
00:03:41.000 --> 00:03:42.710
based on the entity type.

97
00:03:42.710 --> 00:03:45.220
It'll make use of the simple, pluralized form.

98
00:03:45.220 --> 00:03:46.860
So it'll basically take the first character

99
00:03:46.860 --> 00:03:48.690
of the entity type and make it lowercase

100
00:03:48.690 --> 00:03:50.820
and then just add an S to the entity.

101
00:03:50.820 --> 00:03:53.100
So in our example of our product repository

102
00:03:53.100 --> 00:03:56.730
extends JpaRepository Product comma Long.

103
00:03:56.730 --> 00:03:58.950
That'll basically expose an endpoint called

104
00:03:58.950 --> 00:04:00.410
slash products.

105
00:04:00.410 --> 00:04:03.363
So we'll take product, simply add an S to it.

106
00:04:06.290 --> 00:04:08.350
So the really nice thing here is that Spring Data REST

107
00:04:08.350 --> 00:04:10.490
will expose these endpoints for free.

108
00:04:10.490 --> 00:04:12.900
So we'll basically have a slash products,

109
00:04:12.900 --> 00:04:14.760
and we'll have support for all the different

110
00:04:14.760 --> 00:04:17.220
HTTP methods for POST, GET, PUT, DELETEs.

111
00:04:17.220 --> 00:04:20.000
So this will give us all of our CRUD support

112
00:04:20.000 --> 00:04:21.010
for our given entities,

113
00:04:21.010 --> 00:04:24.470
for creating, reading, updating, and deleting.

114
00:04:24.470 --> 00:04:28.151
So very minimal code here for exposing your REST API

115
00:04:28.151 --> 00:04:31.333
using Spring Data REST and also with Spring Boot.

116
00:04:34.640 --> 00:04:36.550
All righty, so let's go to look at our database schema.

117
00:04:36.550 --> 00:04:38.380
This is for release 1.0.

118
00:04:38.380 --> 00:04:40.280
So we'll have two tables to start out with.

119
00:04:40.280 --> 00:04:42.430
We'll have a product table and also

120
00:04:42.430 --> 00:04:44.470
a product category table.

121
00:04:44.470 --> 00:04:46.700
So a quick run on the product table.

122
00:04:46.700 --> 00:04:49.440
Most of these fields are fairly self-explanatory.

123
00:04:49.440 --> 00:04:51.130
At the top, we'll have the product ID

124
00:04:51.130 --> 00:04:52.763
and then we'll have the sku.

125
00:04:52.763 --> 00:04:54.730
We'll have the product name and description.

126
00:04:54.730 --> 00:04:57.600
Also a unit price, an image URL,

127
00:04:57.600 --> 00:04:59.200
and then we'll have the active field,

128
00:04:59.200 --> 00:05:00.150
which is Boolean.

129
00:05:00.150 --> 00:05:02.630
So this will say if the actual product is active

130
00:05:02.630 --> 00:05:03.570
in our catalog or not,

131
00:05:03.570 --> 00:05:06.430
or if we should show it or not in the display.

132
00:05:06.430 --> 00:05:08.520
Then we have the number of units in stock,

133
00:05:08.520 --> 00:05:11.260
the date this given product was created in our database,

134
00:05:11.260 --> 00:05:14.270
last updated date, and also the actual category ID

135
00:05:14.270 --> 00:05:16.510
that this product is associated with.

136
00:05:16.510 --> 00:05:18.580
And then over on the product category side,

137
00:05:18.580 --> 00:05:20.890
we have the actual product ID and the actual

138
00:05:20.890 --> 00:05:22.513
name of the category.

139
00:05:25.160 --> 00:05:26.380
And then when you look at this schema, you're like

140
00:05:26.380 --> 00:05:28.750
wow, this is really small for an e-commerce project.

141
00:05:28.750 --> 00:05:30.630
Well, remember this is for version 1.0.

142
00:05:30.630 --> 00:05:32.610
At this point, we're simply displaying a list

143
00:05:32.610 --> 00:05:33.443
of products.

144
00:05:33.443 --> 00:05:35.780
Our database schema will grow over time as we add

145
00:05:35.780 --> 00:05:38.290
more features and functionality to the database.

146
00:05:38.290 --> 00:05:40.990
But this is enough to get us started with release 1.0.

147
00:05:42.220 --> 00:05:43.760
And then also in this database schema, we're going to

148
00:05:43.760 --> 00:05:46.180
make use of some advanced JPA mappings,

149
00:05:46.180 --> 00:05:47.980
so we'll make use of many to one,

150
00:05:47.980 --> 00:05:51.323
so we'll have many products that belong to one category.

151
00:05:52.200 --> 00:05:54.140
And we'll also make use of one to many,

152
00:05:54.140 --> 00:05:56.670
so one category has many products.

153
00:05:56.670 --> 00:05:58.726
And these are advanced JPA mappings,

154
00:05:58.726 --> 00:05:59.940
and we'll actually make use of them

155
00:05:59.940 --> 00:06:01.483
in our full stack project.

156
00:06:04.740 --> 00:06:07.310
All righty, so our project will have two database scripts,

157
00:06:07.310 --> 00:06:10.663
01-create-user and 02-create-products.sql.

158
00:06:12.980 --> 00:06:15.990
All right, so a bit more about the 01-create-user.sql.

159
00:06:15.990 --> 00:06:17.890
This will basically create a MySQL user

160
00:06:17.890 --> 00:06:19.290
for our application.

161
00:06:19.290 --> 00:06:21.017
The user name will be ecommerceapp,

162
00:06:21.017 --> 00:06:23.083
and the password will be ecommerceapp.

163
00:06:26.190 --> 00:06:27.830
All righty and some information about the

164
00:06:27.830 --> 00:06:29.750
02-create-products.sql.

165
00:06:29.750 --> 00:06:31.550
So this will create new database tables

166
00:06:31.550 --> 00:06:33.490
for product and product category.

167
00:06:33.490 --> 00:06:36.313
And this will also load the tables with sample data.

168
00:06:39.410 --> 00:06:41.730
All righty, so looking at our Spring Boot back end,

169
00:06:41.730 --> 00:06:44.620
so our main thing to do, our main goal here

170
00:06:44.620 --> 00:06:47.070
in this section is to actually build the Spring Boot

171
00:06:47.070 --> 00:06:49.070
back end with the REST APIs

172
00:06:49.070 --> 00:06:52.453
and also provide access to the database using CRUD.

173
00:06:55.290 --> 00:06:57.230
So here's our development process.

174
00:06:57.230 --> 00:06:58.400
So the first thing that we'll do is we'll

175
00:06:58.400 --> 00:07:00.470
set up the database tables.

176
00:07:00.470 --> 00:07:03.690
And then we'll create the Spring Boot starter project.

177
00:07:03.690 --> 00:07:05.630
And with our starter project, we'll add in some

178
00:07:05.630 --> 00:07:09.080
dependencies for our Spring Boot starter data JPA,

179
00:07:09.080 --> 00:07:11.990
data REST, the mySQL connector Java,

180
00:07:11.990 --> 00:07:13.283
and also Lombok.

181
00:07:14.390 --> 00:07:16.190
And then we'll develop the entities for product

182
00:07:16.190 --> 00:07:17.860
and product category.

183
00:07:17.860 --> 00:07:20.140
And then we'll create the REST APIs with Spring Data

184
00:07:20.140 --> 00:07:23.383
JPA Repositories and also Spring Data REST.

185
00:07:26.330 --> 00:07:28.090
All right, now you may have noticed a reference

186
00:07:28.090 --> 00:07:28.923
to Lombok.

187
00:07:28.923 --> 00:07:30.313
And you're probably wondering to yourself,

188
00:07:30.313 --> 00:07:33.090
what exactly is Lombok?

189
00:07:33.090 --> 00:07:36.010
Well, Lombok is a modern Java project,

190
00:07:36.010 --> 00:07:38.070
and Lombok will automatically generate

191
00:07:38.070 --> 00:07:40.090
the getter and setter methods for you

192
00:07:40.090 --> 00:07:41.700
behind the scenes.

193
00:07:41.700 --> 00:07:44.680
So there's no need for the developer to manually define

194
00:07:44.680 --> 00:07:46.050
getter and setter methods.

195
00:07:46.050 --> 00:07:48.400
Lombok will do the work for you.

196
00:07:48.400 --> 00:07:50.680
Lombok has easy to use annotations

197
00:07:50.680 --> 00:07:53.020
to eliminate boilerplate code.

198
00:07:53.020 --> 00:07:54.850
And you can get more details on Lombok

199
00:07:54.850 --> 00:07:58.153
at the website here, projectlombok.org.

200
00:08:01.530 --> 00:08:03.540
So let's take a quick look at Lombok.

201
00:08:03.540 --> 00:08:05.470
So it's really easy to get started with.

202
00:08:05.470 --> 00:08:08.780
So before Lombok, we would create a Java class,

203
00:08:08.780 --> 00:08:11.270
and we would manually define all of our getter

204
00:08:11.270 --> 00:08:12.543
and setter methods.

205
00:08:14.930 --> 00:08:19.620
Now after using Lombok, we can create a Java class,

206
00:08:19.620 --> 00:08:22.100
we make use of this special annotation,

207
00:08:22.100 --> 00:08:25.080
this Lombok annotation called @Data.

208
00:08:25.080 --> 00:08:27.210
This annotation will actually generate the

209
00:08:27.210 --> 00:08:29.163
getter and setter methods for us.

210
00:08:30.920 --> 00:08:32.140
All right, so that's it.

211
00:08:32.140 --> 00:08:34.710
There's absolutely no need for us to manually

212
00:08:34.710 --> 00:08:36.260
write the getter and setters.

213
00:08:36.260 --> 00:08:39.900
Lombok will do all of this work for us behind the scenes.

214
00:08:39.900 --> 00:08:42.870
So notice here it makes your code much smaller,

215
00:08:42.870 --> 00:08:45.360
and it'll also minimize the amount of boilerplate

216
00:08:45.360 --> 00:08:47.920
code that you the developer have to write.

217
00:08:47.920 --> 00:08:50.230
Lombok will do all of that work for you

218
00:08:50.230 --> 00:08:51.670
behind the scenes.

219
00:08:51.670 --> 00:08:55.090
So we'll use Lombok in these videos just to minimize

220
00:08:55.090 --> 00:08:56.460
the boilerplate coding,

221
00:08:56.460 --> 00:09:00.120
but there's no hard requirement for you to use Lombok.

222
00:09:00.120 --> 00:09:02.220
You can create your normal Java classes

223
00:09:02.220 --> 00:09:04.340
and define your normal getter and setter methods.

224
00:09:04.340 --> 00:09:05.770
It's totally up to you.

225
00:09:05.770 --> 00:09:07.710
But here, we'll make use of Lombok

226
00:09:07.710 --> 00:09:09.460
just to minimize the boilerplate coding

227
00:09:09.460 --> 00:09:12.013
and also to make the videos go a bit faster.

228
00:09:12.970 --> 00:09:14.020
All righty, so I'm excited.

229
00:09:14.020 --> 00:09:15.690
Let's go ahead and move into the IDE,

230
00:09:15.690 --> 00:09:17.843
and let's get started.

