WEBVTT
1
00:00:01.640 --> 00:00:05.713
<v Instructor>Okay, so we have a little problem.</v>

2
00:00:07.300 --> 00:00:09.280
And you may wonder, well what's the problem?

3
00:00:09.280 --> 00:00:11.500
While our code worked fine,

4
00:00:11.500 --> 00:00:15.590
however, there was some errors in the background

5
00:00:15.590 --> 00:00:18.093
and we didn't see them immediately.

6
00:00:21.420 --> 00:00:23.390
So let's take a look at our application,

7
00:00:23.390 --> 00:00:25.100
we did our master detail view, right?

8
00:00:25.100 --> 00:00:27.830
We can get the actual detail for a given product

9
00:00:27.830 --> 00:00:29.950
by selecting that link.

10
00:00:29.950 --> 00:00:33.103
But now if we go and look at the developer console,

11
00:00:41.887 --> 00:00:44.710
and if we zoom in here, we can see that we have an error.

12
00:00:44.710 --> 00:00:46.660
We have a little problem.

13
00:00:46.660 --> 00:00:50.540
And it says TypeError, Cannot read property

14
00:00:50.540 --> 00:00:54.070
'imageUrl' of undefined.

15
00:00:54.070 --> 00:00:57.653
And this happens in our ProductDetailsComponent_Template

16
00:00:57.653 --> 00:01:01.320
dot html on line number four.

17
00:01:01.320 --> 00:01:03.590
Hmm, so let's go take a look at that.

18
00:01:03.590 --> 00:01:05.370
So here we are, line number four

19
00:01:05.370 --> 00:01:06.963
of our component dot html.

20
00:01:08.002 --> 00:01:09.793
And we reference pproduct.imageUrl.

21
00:01:10.920 --> 00:01:12.680
Let's swing over in the product dot ts,

22
00:01:12.680 --> 00:01:14.780
maybe I forgot to add that property

23
00:01:14.780 --> 00:01:16.560
or maybe it's a typo,

24
00:01:16.560 --> 00:01:19.260
but hmm, looking here on line six,

25
00:01:19.260 --> 00:01:21.420
I have a property called imageUrl

26
00:01:21.420 --> 00:01:26.170
and it looks like the same, product.imageUrl.

27
00:01:26.170 --> 00:01:28.050
Yeah, that's the same thing,

28
00:01:28.050 --> 00:01:31.063
so there's no typo here, hmm.

29
00:01:32.300 --> 00:01:34.563
Let's go look at our component dot ts.

30
00:01:39.610 --> 00:01:41.821
Line 13 we create our product then,

31
00:01:41.821 --> 00:01:44.530
oh, okay I got it.

32
00:01:44.530 --> 00:01:46.870
The property is undefined,

33
00:01:46.870 --> 00:01:48.870
we haven't assigned a value yet.

34
00:01:48.870 --> 00:01:52.887
Basically this item is null, it hasn't been instantiated.

35
00:01:52.887 --> 00:01:55.360
Got it, got it.

36
00:01:55.360 --> 00:01:59.203
So we actually don't assign it until later on

37
00:01:59.203 --> 00:02:02.670
when data arrives from the ProductService method call.

38
00:02:02.670 --> 00:02:04.690
And remember that's an asynchronous call,

39
00:02:04.690 --> 00:02:06.140
so it doesn't happen immediately,

40
00:02:06.140 --> 00:02:07.810
it happens in the background.

41
00:02:07.810 --> 00:02:10.160
So this is an example of a race condition.

42
00:02:10.160 --> 00:02:13.860
The HTML template file it attempting to access a property,

43
00:02:13.860 --> 00:02:15.510
product.imageUrl,

44
00:02:15.510 --> 00:02:18.330
but product is not assigned yet.

45
00:02:18.330 --> 00:02:22.750
It hasn't been instantiated, hence we have the error.

46
00:02:22.750 --> 00:02:25.573
Okay, all right, got it, got it.

47
00:02:26.420 --> 00:02:27.720
Ah, that was a tricky one.

48
00:02:29.940 --> 00:02:31.280
So you're probably wondering,

49
00:02:31.280 --> 00:02:33.760
well why does this work in the browser?

50
00:02:33.760 --> 00:02:37.100
Well, behind the scenes, when the property is assigned,

51
00:02:37.100 --> 00:02:40.410
meaning that the data actually arrives from our service,

52
00:02:40.410 --> 00:02:42.570
then Angular will automatically

53
00:02:42.570 --> 00:02:45.110
update the HTML template page.

54
00:02:45.110 --> 00:02:47.380
So initially there was an error,

55
00:02:47.380 --> 00:02:51.430
but once you view the page, then the error went away

56
00:02:51.430 --> 00:02:54.300
because the data actually arrived from the service

57
00:02:54.300 --> 00:02:56.100
and you actually saw the updates

58
00:02:56.100 --> 00:02:58.350
there on the actual HTML page.

59
00:02:58.350 --> 00:03:01.540
So this is known as data binding in the Angular world.

60
00:03:01.540 --> 00:03:03.120
This happens behind the scenes.

61
00:03:03.120 --> 00:03:07.220
So Angular will automatically update the HTML template page

62
00:03:07.220 --> 00:03:08.830
with the given data.

63
00:03:08.830 --> 00:03:12.460
So from the user's perspective, everything was fine.

64
00:03:12.460 --> 00:03:15.040
But we know, looking behind the scenes,

65
00:03:15.040 --> 00:03:16.593
there was a race condition.

66
00:03:18.710 --> 00:03:19.543
So you're probably wondering,

67
00:03:19.543 --> 00:03:20.610
well how can we solve it?

68
00:03:20.610 --> 00:03:23.930
Well, one solution is to assign a value to the product.

69
00:03:23.930 --> 00:03:26.330
Basically create a new instance of the product,

70
00:03:26.330 --> 00:03:29.490
so I say new Product, open paren, close parens.

71
00:03:29.490 --> 00:03:30.323
And then there we go.

72
00:03:30.323 --> 00:03:32.160
So now we have an empty product.

73
00:03:32.160 --> 00:03:34.530
So it's not null, it's not undefinded,

74
00:03:34.530 --> 00:03:36.260
it's actually just an empty product,

75
00:03:36.260 --> 00:03:37.460
but we can access it

76
00:03:37.460 --> 00:03:39.753
and we won't have that error from before.

77
00:03:42.740 --> 00:03:45.680
All right, so I swing back into my browser

78
00:03:45.680 --> 00:03:47.580
and this is great, no errors.

79
00:03:47.580 --> 00:03:48.830
So we're up and running,

80
00:03:48.830 --> 00:03:51.160
you can click around at different parts of the application

81
00:03:51.160 --> 00:03:52.740
and you won't see that error again.

82
00:03:52.740 --> 00:03:54.190
So that is resolved.

83
00:03:54.190 --> 00:03:55.913
So I'm pretty happy about that.

84
00:03:58.430 --> 00:04:01.030
Now let's kind of swing back over into our IDE

85
00:04:02.040 --> 00:04:03.100
and then you may wonder,

86
00:04:03.100 --> 00:04:06.480
well what are some other solutions that we could use?

87
00:04:06.480 --> 00:04:08.180
Well, another solution is that we can make use

88
00:04:08.180 --> 00:04:11.240
of that safe-navigation operator, that question mark.

89
00:04:11.240 --> 00:04:13.440
We saw that in some of the previous videos.

90
00:04:13.440 --> 00:04:17.160
So here, product question mark dot imageUrl,

91
00:04:17.160 --> 00:04:19.740
that'll make sure that we don't access an undefined

92
00:04:19.740 --> 00:04:20.890
and or null object.

93
00:04:20.890 --> 00:04:23.940
And this is one possible solution, you can do that.

94
00:04:23.940 --> 00:04:27.340
The one approach here is that if you had a lot of fields

95
00:04:27.340 --> 00:04:29.600
that you're displaying for a given product,

96
00:04:29.600 --> 00:04:31.400
like maybe five or 10 or 20,

97
00:04:31.400 --> 00:04:32.650
you'd have to put this question mark

98
00:04:32.650 --> 00:04:35.710
on each one of those fields or whatever or properties.

99
00:04:35.710 --> 00:04:38.167
Or another solution is that you could simply wrap

100
00:04:38.167 --> 00:04:40.730
this region in a div

101
00:04:40.730 --> 00:04:42.180
and then check for it accordingly.

102
00:04:42.180 --> 00:04:44.970
So just different ways of going about it.

103
00:04:44.970 --> 00:04:47.880
I'll actually undo this question mark item

104
00:04:47.880 --> 00:04:51.110
and I'll just kind of keep my original solution

105
00:04:51.110 --> 00:04:52.960
of creating a new instance.

106
00:04:52.960 --> 00:04:54.360
It's a very simple solution,

107
00:04:54.360 --> 00:04:55.830
it's a one-line solution

108
00:04:55.830 --> 00:04:58.690
and there's not a lot of extra work you have to do

109
00:04:58.690 --> 00:04:59.620
in the template page.

110
00:04:59.620 --> 00:05:01.990
So this is a nice way to solve that issue

111
00:05:01.990 --> 00:05:03.270
that we had in the browser.

112
00:05:03.270 --> 00:05:06.413
So I'll use this approach going forward in the videos.

