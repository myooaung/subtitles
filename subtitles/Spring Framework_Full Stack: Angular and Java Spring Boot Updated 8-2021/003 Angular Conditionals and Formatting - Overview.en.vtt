WEBVTT
1
00:00:01.140 --> 00:00:02.790
<v ->In this video, we're going to use Angular</v>

2
00:00:02.790 --> 00:00:04.973
for conditionals and formatting.

3
00:00:07.290 --> 00:00:10.010
So our goal here is that we want to add a new column

4
00:00:10.010 --> 00:00:12.810
to check if a sales person has met their quota.

5
00:00:12.810 --> 00:00:14.440
So, in our table here on the far right,

6
00:00:14.440 --> 00:00:16.780
we'll have this new column called, Met Quota,

7
00:00:16.780 --> 00:00:18.920
and then based on their sales volume,

8
00:00:18.920 --> 00:00:21.060
we'll have a value of yes or no,

9
00:00:21.060 --> 00:00:22.410
if they've met their quota.

10
00:00:24.670 --> 00:00:27.170
So, i'll make use of a conditional, ngIf.

11
00:00:27.170 --> 00:00:30.950
So Angular provides a structural directive, ngIf.

12
00:00:30.950 --> 00:00:33.660
We can show content based on a condition,

13
00:00:33.660 --> 00:00:35.580
or a Boolean expression.

14
00:00:35.580 --> 00:00:36.960
So here's one example:

15
00:00:36.960 --> 00:00:39.818
In our div, we can make use of *ngIf,

16
00:00:39.818 --> 00:00:42.390
and then we could drop in some Boolean expression.

17
00:00:42.390 --> 00:00:43.894
So, we'll show this content,

18
00:00:43.894 --> 00:00:46.283
if the Boolean expression is true.

19
00:00:47.560 --> 00:00:49.820
And if you like to get more details on ngIf,

20
00:00:49.820 --> 00:00:52.793
you can look at the online documentation at this link.

21
00:00:55.570 --> 00:00:57.440
Alrighty, so in our example,

22
00:00:57.440 --> 00:00:59.380
we want to check if the sales volume

23
00:00:59.380 --> 00:01:01.830
is greater than or equal to 60,000,

24
00:01:01.830 --> 00:01:03.560
then we'll display yes,

25
00:01:03.560 --> 00:01:05.370
else, we'll display no.

26
00:01:05.370 --> 00:01:07.840
So in our little column here, Met Sales Quota,

27
00:01:07.840 --> 00:01:10.570
that's the Boolean expression that we'll make use of.

28
00:01:10.570 --> 00:01:13.603
Sales Volume greater than or equal to 60,000.

29
00:01:16.480 --> 00:01:17.420
So in our coding here,

30
00:01:17.420 --> 00:01:20.140
we can make use of a conditional with ngIf.

31
00:01:20.140 --> 00:01:21.900
So first off, in our table head,

32
00:01:21.900 --> 00:01:25.490
we'll setup a new column here, Met Quota.

33
00:01:25.490 --> 00:01:26.500
So that's the new column

34
00:01:26.500 --> 00:01:28.840
that we'll have over on the far right.

35
00:01:28.840 --> 00:01:29.993
That's our table head.

36
00:01:31.060 --> 00:01:32.250
And then inside of our body,

37
00:01:32.250 --> 00:01:34.633
we loop over all of our Sales Persons.

38
00:01:36.110 --> 00:01:37.280
And then for our new column,

39
00:01:37.280 --> 00:01:39.405
we make use of this div *ngIf

40
00:01:39.405 --> 00:01:40.980
and we add this conditional,

41
00:01:40.980 --> 00:01:42.480
if tempSalesPerson.salesVolume

42
00:01:43.360 --> 00:01:45.293
is greater than or equal to 60,000,

43
00:01:46.280 --> 00:01:48.900
then we'll display, yes.

44
00:01:48.900 --> 00:01:50.363
So that's the case of true.

45
00:01:51.960 --> 00:01:54.550
Now, for the case of false, we'll have this else block.

46
00:01:54.550 --> 00:01:58.220
So, else, myElseBlock matches to this ng template

47
00:01:58.220 --> 00:01:59.230
in the next line,

48
00:01:59.230 --> 00:02:00.980
and we'll give the value of no.

49
00:02:00.980 --> 00:02:02.750
So that's the case of false.

50
00:02:02.750 --> 00:02:05.550
So for your else portion, you can call it anything.

51
00:02:05.550 --> 00:02:07.360
You can call it myElseBlock,

52
00:02:07.360 --> 00:02:10.294
you can call it demo, fun, test,

53
00:02:10.294 --> 00:02:12.837
anything you want to, as long as those two values

54
00:02:12.837 --> 00:02:15.057
match up, myElseBlock.

55
00:02:18.690 --> 00:02:20.550
The most commonly used structural directives

56
00:02:20.550 --> 00:02:22.800
are ngFor and ngIf.

57
00:02:22.800 --> 00:02:24.100
And We've already seen how to use

58
00:02:24.100 --> 00:02:25.963
this in some of our examples.

59
00:02:27.130 --> 00:02:28.410
Also, there are some others

60
00:02:28.410 --> 00:02:32.180
such as ngSwitch, ngStyle and so on.

61
00:02:32.180 --> 00:02:34.320
You can see the documentation for details

62
00:02:34.320 --> 00:02:36.353
by going to the link here on this slide.

63
00:02:39.832 --> 00:02:41.820
Now one more example here,

64
00:02:41.820 --> 00:02:44.422
we want to format the sales volume as a currency

65
00:02:44.422 --> 00:02:45.993
with US dollars.

66
00:02:46.850 --> 00:02:48.250
So, here's our table.

67
00:02:48.250 --> 00:02:49.810
And so for Sales Volume,

68
00:02:49.810 --> 00:02:51.960
we actually want to use the given currency symbol

69
00:02:51.960 --> 00:02:53.983
for a given currency.

70
00:02:57.580 --> 00:03:00.870
Angular provides currency formatting using Angular Pipes.

71
00:03:00.870 --> 00:03:04.790
So, basically you send data to a pipe for formatting.

72
00:03:04.790 --> 00:03:07.200
As an example here, we have this cost and

73
00:03:07.200 --> 00:03:08.033
and in some values,

74
00:03:08.033 --> 00:03:10.210
say lets say for example the value is

75
00:03:10.210 --> 00:03:14.820
11.99, then we can pipe it through the currency pipe

76
00:03:14.820 --> 00:03:16.000
for US dollars.

77
00:03:16.000 --> 00:03:18.440
This'll give us the output of the 11.99,

78
00:03:18.440 --> 00:03:20.023
with the US dollar symbol.

79
00:03:21.730 --> 00:03:24.240
Now if you'd like to get more details on the currency

80
00:03:24.240 --> 00:03:26.910
pipe as far as other formats and so forth,

81
00:03:26.910 --> 00:03:29.063
you can go to the link here on the slide.

82
00:03:31.020 --> 00:03:32.750
But one thing I'd like to point out is that,

83
00:03:32.750 --> 00:03:35.550
this is only for formatting.

84
00:03:35.550 --> 00:03:39.380
This does not perform any currency conversion,

85
00:03:39.380 --> 00:03:42.070
it doesn't use exchange rates, etc.

86
00:03:42.070 --> 00:03:45.793
It simply takes a number and formats it accordingly

87
00:03:45.793 --> 00:03:48.530
based on the currency that you specify.

88
00:03:48.530 --> 00:03:50.790
Alight, so there's no magic in the background here,

89
00:03:50.790 --> 00:03:52.003
only for formatting.

90
00:03:53.280 --> 00:03:54.895
Alight, just had to say that.

91
00:03:54.895 --> 00:03:57.062
(giggles)

92
00:03:59.260 --> 00:04:01.160
Okay, great, so lets apply this to our example.

93
00:04:01.160 --> 00:04:02.660
So we're going to format the sales volume

94
00:04:02.660 --> 00:04:04.873
as a currency with US dollars.

95
00:04:07.580 --> 00:04:10.000
So in our coding here in our table body,

96
00:04:10.000 --> 00:04:11.420
for our table data,

97
00:04:11.420 --> 00:04:12.813
we have our tempsalesperson.salesvolume,

98
00:04:14.300 --> 00:04:17.151
we'll use our pipe and we'll pipe it over to currency

99
00:04:17.151 --> 00:04:18.770
with USD.

100
00:04:18.770 --> 00:04:21.100
And so this will give us our desired output here

101
00:04:21.100 --> 00:04:22.803
that we have on our table.

102
00:04:26.690 --> 00:04:28.480
There are other pipes available, such as DatePipe,

103
00:04:28.480 --> 00:04:30.580
DecimalPipe and so on.

104
00:04:30.580 --> 00:04:33.030
You can see the documentation for details using

105
00:04:33.030 --> 00:04:34.713
the link here on the slide.

106
00:04:36.360 --> 00:04:38.200
Okay, so this all looks really good.

107
00:04:38.200 --> 00:04:39.790
Lets go ahead and move into our IDE,

108
00:04:39.790 --> 00:04:41.423
and lets write the code.

