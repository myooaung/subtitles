WEBVTT
1
00:00:01.160 --> 00:00:04.443
<v ->In this video, we're going to search for products by keyword.</v>

2
00:00:08.210 --> 00:00:11.050
So here's our application, and the top we have this section

3
00:00:11.050 --> 00:00:12.420
for searching for products.

4
00:00:12.420 --> 00:00:14.740
And so basically the user can type in to text,

5
00:00:14.740 --> 00:00:15.800
and he'll hit the search button,

6
00:00:15.800 --> 00:00:16.930
and we'll give him those products

7
00:00:16.930 --> 00:00:18.793
that match on that given keyword.

8
00:00:21.620 --> 00:00:22.640
All right, so let's go ahead and look at

9
00:00:22.640 --> 00:00:23.970
the development process.

10
00:00:23.970 --> 00:00:25.320
So the first thing we'll do is we'll modify

11
00:00:25.320 --> 00:00:26.153
our Spring Boot app.

12
00:00:26.153 --> 00:00:28.130
We'll add a new search method.

13
00:00:28.130 --> 00:00:30.920
We'll also create a new component for searching.

14
00:00:30.920 --> 00:00:33.810
We'll also add a new angle or route for searching.

15
00:00:33.810 --> 00:00:35.600
And then we'll update our SearchComponent

16
00:00:35.600 --> 00:00:37.480
to send data to the search route.

17
00:00:37.480 --> 00:00:39.720
Next, we'll enhance our PoductListComponent

18
00:00:39.720 --> 00:00:42.020
to search for products with the ProductService.

19
00:00:42.020 --> 00:00:44.290
And then finally we'll update our product service

20
00:00:44.290 --> 00:00:47.853
to call the URL on the Spring Boot application.

21
00:00:50.990 --> 00:00:52.970
Alrighty step one of modifying the Spring Boot app

22
00:00:52.970 --> 00:00:54.090
for a search method.

23
00:00:54.090 --> 00:00:56.550
So remember that Spring Data REST and Spring Data JPA

24
00:00:56.550 --> 00:00:58.130
supports query methods.

25
00:00:58.130 --> 00:00:59.940
So Spring will construct a query

26
00:00:59.940 --> 00:01:01.780
based on method naming conventions.

27
00:01:01.780 --> 00:01:04.540
And remember, this is all that Spring magic.

28
00:01:04.540 --> 00:01:06.370
So here's our product repository,

29
00:01:06.370 --> 00:01:07.287
we'll have this new method here,

30
00:01:07.287 --> 00:01:09.110
"find by name containing",

31
00:01:09.110 --> 00:01:11.093
and then we'll pass in the actual name.

32
00:01:14.590 --> 00:01:15.680
So a bit more here,

33
00:01:15.680 --> 00:01:17.800
so finding the products based on the name,

34
00:01:17.800 --> 00:01:18.920
so we have this method,

35
00:01:18.920 --> 00:01:20.370
so this is a special query method.

36
00:01:20.370 --> 00:01:23.570
So the containing means that it's similar to "like"

37
00:01:23.570 --> 00:01:25.293
in the normal SQL world.

38
00:01:29.180 --> 00:01:30.980
And so behind the scenes,

39
00:01:30.980 --> 00:01:32.340
Spring will actually execute

40
00:01:32.340 --> 00:01:33.870
a query similar to this.

41
00:01:33.870 --> 00:01:36.630
So they'll say "select star from product P, where p.name

42
00:01:36.630 --> 00:01:38.750
LIKE CONCAT mate."

43
00:01:38.750 --> 00:01:40.630
I'm going to use the percent wildcards

44
00:01:40.630 --> 00:01:42.770
to match on the actual name.

45
00:01:42.770 --> 00:01:44.310
So name's the actual parameter

46
00:01:44.310 --> 00:01:47.260
that's being passed into this given method.

47
00:01:47.260 --> 00:01:48.930
And again, Spring will do all this magic

48
00:01:48.930 --> 00:01:50.623
for you behind the scenes.

49
00:01:52.750 --> 00:01:54.690
Alrighty so then to actual call this method,

50
00:01:54.690 --> 00:01:55.850
remember that it's under

51
00:01:55.850 --> 00:01:57.710
api, slash, products, slash, search.

52
00:01:57.710 --> 00:01:59.760
And then the method name "find by name containing."

53
00:01:59.760 --> 00:02:01.490
and we pass with name=python.

54
00:02:01.490 --> 00:02:03.200
So this is a way of passing data

55
00:02:03.200 --> 00:02:04.070
to this REST API.

56
00:02:04.070 --> 00:02:06.270
So here we should get a list of all products,

57
00:02:06.270 --> 00:02:08.133
that have python in their name.

58
00:02:11.270 --> 00:02:12.730
Now, the next step here is creating

59
00:02:12.730 --> 00:02:14.410
a new component for search.

60
00:02:14.410 --> 00:02:17.490
So we'll actually build a new angler component for this.

61
00:02:17.490 --> 00:02:19.270
So we'll make use of the "ng generate".

62
00:02:19.270 --> 00:02:23.000
And we'll say "component, components, slash, search"

63
00:02:23.000 --> 00:02:24.663
And we'll add code to this later.

64
00:02:26.980 --> 00:02:29.360
And then in step three we need to add a new angular

65
00:02:29.360 --> 00:02:30.470
route for searching.

66
00:02:30.470 --> 00:02:32.480
So in our at mod.cs file,

67
00:02:32.480 --> 00:02:35.740
we'll set up this path, "search, slash, colon, keyword."

68
00:02:35.740 --> 00:02:37.870
So That's a parameter that we're defining.

69
00:02:37.870 --> 00:02:39.830
And then we'll tell it that this actual work

70
00:02:39.830 --> 00:02:42.060
will be handled by the product of this component.

71
00:02:42.060 --> 00:02:43.700
And we'll actually use this parameter

72
00:02:43.700 --> 00:02:45.383
in some of our later code.

