WEBVTT
1
00:00:01.310 --> 00:00:03.060
<v ->Okay so moving along with our development</v>

2
00:00:03.060 --> 00:00:06.260
process, now we're at step five of enhancing a product list

3
00:00:06.260 --> 00:00:09.033
component to read the category ID parameter.

4
00:00:19.649 --> 00:00:23.150
So lets move down to our components,

5
00:00:23.150 --> 00:00:26.313
and we'll move down to a product list component.ts.

6
00:00:29.370 --> 00:00:31.720
And zoom out real quick and expand this window.

7
00:00:35.040 --> 00:00:37.640
And one thing I like to do is just clean

8
00:00:37.640 --> 00:00:40.100
up some of the extra stuff that I have here.

9
00:00:40.100 --> 00:00:43.230
So, lines eight and nine we have these template URL's,

10
00:00:43.230 --> 00:00:44.633
that we're really not using.

11
00:00:44.633 --> 00:00:47.310
Lets go ahead and delete those and just get rid of them,

12
00:00:47.310 --> 00:00:49.670
because right now we're focusing on the template URL

13
00:00:49.670 --> 00:00:51.130
that uses our product listing grid,

14
00:00:51.130 --> 00:00:52.143
so we'll keep that.

15
00:00:53.150 --> 00:00:55.190
Okay, so moving in to our product list component

16
00:00:55.190 --> 00:00:58.923
lets add a new property here for current category ID.

17
00:01:07.270 --> 00:01:10.640
And we'll also inject the current route

18
00:01:10.640 --> 00:01:13.173
or will inject the activated route.

19
00:01:22.410 --> 00:01:24.570
Source a private route and I give

20
00:01:24.570 --> 00:01:26.483
the type of activated route.

21
00:01:29.540 --> 00:01:31.310
So that's the current active route

22
00:01:31.310 --> 00:01:32.740
that loaded the component.

23
00:01:32.740 --> 00:01:35.743
It's useful for accessing the route parameters,

24
00:01:36.970 --> 00:01:40.043
because we need that for accessing the given category ID.

25
00:01:47.210 --> 00:01:48.401
So on my NGN, on the net,

26
00:01:48.401 --> 00:01:51.342
I'll make small modification to simply do a subscribe

27
00:01:51.342 --> 00:01:55.043
on the paramMap for this given route.

28
00:02:33.237 --> 00:02:36.313
And now it's simply moved down to the list products method.

29
00:02:37.620 --> 00:02:38.780
I'll write a quick comment

30
00:02:38.780 --> 00:02:41.030
here as far as the code that I need to write.

31
00:02:46.659 --> 00:02:49.070
So I'll check to see if the ID parameter

32
00:02:49.070 --> 00:02:52.360
is available, just so I know if I can use that value,

33
00:02:52.360 --> 00:02:54.560
or if I need to make use of a default value.

34
00:02:55.960 --> 00:02:58.948
So here I set up a Boolean hash category ID.

35
00:02:58.948 --> 00:03:03.360
I make use of this .route.snapshot.paramMap

36
00:03:03.360 --> 00:03:05.255
has. This returns true or false

37
00:03:05.255 --> 00:03:08.263
if this given parameter is available.

38
00:03:09.600 --> 00:03:11.140
So it's swinging and break it down here,

39
00:03:11.140 --> 00:03:12.930
so we use the activated route.

40
00:03:12.930 --> 00:03:15.270
The state of the route at this given moment in time,

41
00:03:15.270 --> 00:03:18.340
paramMap is the map of all the route parameters,

42
00:03:18.340 --> 00:03:21.203
and we read the given ID parameter.

43
00:03:23.040 --> 00:03:26.073
If it's available it turns true, if not it turns false.

44
00:03:29.448 --> 00:03:31.950
And remember it's going to come in on that link,

45
00:03:31.950 --> 00:03:35.339
so category / one, so that's the actual ID,

46
00:03:35.339 --> 00:03:37.110
based on our route configuration,

47
00:03:37.110 --> 00:03:39.350
so, the colon ID that gives that actual

48
00:03:39.350 --> 00:03:41.993
parameter that given name.

49
00:03:53.760 --> 00:03:56.860
And now if it has the category ID, then we simply

50
00:03:56.860 --> 00:04:00.583
need to read that category ID and convert it to a number.

51
00:04:17.256 --> 00:04:18.980
So here I make the assignment, I'll say;

52
00:04:18.980 --> 00:04:20.783
this.currentcategoryid=+,

53
00:04:22.604 --> 00:04:24.383
and the plus is for the conversion.

54
00:04:27.490 --> 00:04:31.796
This.route.snapshot.paramMap.get

55
00:04:31.796 --> 00:04:33.633
the actual ID.

56
00:04:39.530 --> 00:04:41.140
And again remember the parameter values

57
00:04:41.140 --> 00:04:42.325
returned as a string, so we use the plus

58
00:04:42.325 --> 00:04:44.943
symbol to convert to a number.

59
00:04:53.143 --> 00:04:55.110
And then remember earlier I said;

60
00:04:55.110 --> 00:04:56.510
You know our component will actually

61
00:04:56.510 --> 00:04:58.971
give a default value so, if the category ID

62
00:04:58.971 --> 00:05:01.960
is not available then we'll simply default

63
00:05:01.960 --> 00:05:03.560
to category ID of one,

64
00:05:03.560 --> 00:05:05.079
and this is the logic that we're adding

65
00:05:05.079 --> 00:05:06.810
to our given component.

66
00:05:06.810 --> 00:05:08.540
We could set the default value to anything,

67
00:05:08.540 --> 00:05:11.263
but in this case I'll just use category one.

68
00:05:18.870 --> 00:05:20.074
All right, so that looks good as far as reading

69
00:05:20.074 --> 00:05:25.074
the category ID from the route paramMap or just defaulting.

70
00:05:25.170 --> 00:05:27.583
Now I need to actually get the products

71
00:05:27.583 --> 00:05:30.223
for this given category ID.

72
00:05:33.600 --> 00:05:35.250
So I'll need to make some updates to my product

73
00:05:35.250 --> 00:05:37.392
service, I'll say get product list and I'll pass

74
00:05:37.392 --> 00:05:39.920
in this.currentcategoryId.

75
00:05:39.920 --> 00:05:43.580
So say; hey, service give me products for this given

76
00:05:43.580 --> 00:05:46.467
ID, now right now we don't have this method

77
00:05:46.467 --> 00:05:48.160
that takes a parameter.

78
00:05:48.160 --> 00:05:50.422
So, we'll actually have to fix this,

79
00:05:50.422 --> 00:05:52.200
or enhance this.

80
00:05:52.200 --> 00:05:54.050
So at the moment I'll simply go into this product

81
00:05:54.050 --> 00:05:56.695
service and I'll update this method to accept

82
00:05:56.695 --> 00:05:58.463
the parameter for number.

83
00:06:10.959 --> 00:06:12.980
So I'm in my product service here,

84
00:06:12.980 --> 00:06:16.580
and I will say the category ID

85
00:06:16.580 --> 00:06:18.103
colon number,

86
00:06:25.510 --> 00:06:27.490
but now we still don't know how we'll actually

87
00:06:27.490 --> 00:06:29.020
do that on the backend.

88
00:06:29.020 --> 00:06:30.280
I'll make the call to the backend,

89
00:06:30.280 --> 00:06:32.840
so I'll just put little to do statement here.

90
00:06:32.840 --> 00:06:35.700
Just a little reminder to myself,

91
00:06:35.700 --> 00:06:37.563
that I have more work to do.

92
00:06:39.580 --> 00:06:42.116
And so basically, I need to build a URL based

93
00:06:42.116 --> 00:06:45.290
on the given category I'd that's passed in,

94
00:06:45.290 --> 00:06:48.940
and call the appropriate spring boot app URL,

95
00:06:48.940 --> 00:06:51.530
but I'll actually come back to this later.

96
00:06:51.530 --> 00:06:53.399
Once I figure out what the actual

97
00:06:53.399 --> 00:06:55.913
URL is for the spring boot app.

98
00:07:02.440 --> 00:07:05.070
So now swinging back to our product list component.

99
00:07:05.070 --> 00:07:06.620
That's where I'm at right now.

100
00:07:06.620 --> 00:07:08.900
Just scrolling down, so that's taken care of.

101
00:07:08.900 --> 00:07:11.360
So get product list, passing in the category ID.

102
00:07:11.360 --> 00:07:14.030
Now it knows about this given method parameter.

103
00:07:14.030 --> 00:07:14.960
There's still some work to do,

104
00:07:14.960 --> 00:07:17.853
but at least the code compiles so far.

