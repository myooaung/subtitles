WEBVTT
1
00:00:01.150 --> 00:00:01.983
<v Instructor>In this video,</v>

2
00:00:01.983 --> 00:00:04.763
we'll cover abstract classes and type script.

3
00:00:07.900 --> 00:00:11.080
So an abstract class represents a general concept.

4
00:00:11.080 --> 00:00:15.290
So, for example, a shape, a vehicle, a computer, and so on.

5
00:00:15.290 --> 00:00:17.670
So you can't create an instance of an abstract class,

6
00:00:17.670 --> 00:00:19.150
because there's still some details

7
00:00:19.150 --> 00:00:21.260
that need to be filled in, in general.

8
00:00:21.260 --> 00:00:24.330
Also, an abstract class can have abstract methods

9
00:00:24.330 --> 00:00:26.030
and then the abstract method must be

10
00:00:26.030 --> 00:00:27.813
implemented by concrete subclasses.

11
00:00:31.320 --> 00:00:33.340
So let's take a look at this with an example.

12
00:00:33.340 --> 00:00:36.720
So what we'll do is make our shape an abstract class.

13
00:00:36.720 --> 00:00:38.690
So it has some common features,

14
00:00:38.690 --> 00:00:42.070
but it will have an abstract method calculate area,

15
00:00:42.070 --> 00:00:43.870
because how you calculate the area

16
00:00:43.870 --> 00:00:47.300
for a shape depends on what type of shape it is.

17
00:00:47.300 --> 00:00:49.070
So circle has one formula,

18
00:00:49.070 --> 00:00:51.423
a rectangle has another formula, and so on.

19
00:00:53.190 --> 00:00:55.620
So every shape class must implement

20
00:00:55.620 --> 00:00:57.710
the calculate area method.

21
00:00:57.710 --> 00:00:59.130
So as an example here,

22
00:00:59.130 --> 00:01:03.270
the area of a circle is pi times the radius squared.

23
00:01:03.270 --> 00:01:06.640
And then for a rectangle, the area is width times length.

24
00:01:06.640 --> 00:01:08.950
So as you can see, that abstract method

25
00:01:08.950 --> 00:01:11.157
at the shape level has to be implemented

26
00:01:11.157 --> 00:01:13.200
by the actual subclasses.

27
00:01:16.941 --> 00:01:18.570
Okay so let's look at a coding example

28
00:01:18.570 --> 00:01:19.970
here for an abstract class.

29
00:01:19.970 --> 00:01:21.820
So we'll make the shape class abstract

30
00:01:21.820 --> 00:01:24.100
using the abstract keyword.

31
00:01:24.100 --> 00:01:26.070
And we'll also have an abstract method

32
00:01:26.070 --> 00:01:28.793
by making use of the abstract keyword on the method.

33
00:01:29.740 --> 00:01:32.050
But note here, this method has no implementation,

34
00:01:32.050 --> 00:01:33.843
it's simply an abstract method.

35
00:01:35.790 --> 00:01:37.330
So then we have our rectangles,

36
00:01:37.330 --> 00:01:40.000
so we have our class rectangle extends shape.

37
00:01:40.000 --> 00:01:43.340
So then we have to override the calculate area method,

38
00:01:43.340 --> 00:01:45.280
and provide our own implementation.

39
00:01:45.280 --> 00:01:46.980
And so earlier, as I mentioned,

40
00:01:46.980 --> 00:01:50.023
the actual area for our rectangle is width times length.

41
00:01:53.070 --> 00:01:54.850
So let's look at an example with circles.

42
00:01:54.850 --> 00:01:56.340
Our circle extends shape,

43
00:01:56.340 --> 00:01:59.180
so we have to override the calculate area method,

44
00:01:59.180 --> 00:02:03.350
and in here we return pi times radius squared.

45
00:02:03.350 --> 00:02:05.340
So what we do here is make use of the math object.

46
00:02:05.340 --> 00:02:07.100
It's a built-in object that has properties

47
00:02:07.100 --> 00:02:09.940
and methods for mathematical constants and functions.

48
00:02:09.940 --> 00:02:11.460
So there's a math dot pi,

49
00:02:11.460 --> 00:02:15.360
and then a math dot pow power, so you give the actual value

50
00:02:15.360 --> 00:02:17.620
and the actual exponent that you want.

51
00:02:17.620 --> 00:02:19.880
So that will still give us our radius squared.

52
00:02:19.880 --> 00:02:21.580
There are some other ways we could implement this,

53
00:02:21.580 --> 00:02:23.770
like we could say, in this case it's very simple,

54
00:02:23.770 --> 00:02:26.800
we could simply say, radius times radius for radius squared.

55
00:02:26.800 --> 00:02:28.090
But here I simply wanted to show you

56
00:02:28.090 --> 00:02:30.703
how you can make use of the math built-in object.

57
00:02:35.000 --> 00:02:36.770
Alrighty, so here creating an instance.

58
00:02:36.770 --> 00:02:39.740
So, this code will not compile,

59
00:02:39.740 --> 00:02:41.760
since shape is an abstract class.

60
00:02:41.760 --> 00:02:43.610
So we can't create an instance

61
00:02:43.610 --> 00:02:45.390
of an abstract class directly.

62
00:02:45.390 --> 00:02:49.140
We can only create an instance of concrete subclasses,

63
00:02:49.140 --> 00:02:51.860
such as circle, rectangle, so on.

64
00:02:51.860 --> 00:02:53.620
And so a concrete subclass

65
00:02:53.620 --> 00:02:55.650
is a class that's not abstract,

66
00:02:55.650 --> 00:02:58.793
and it implements all of the abstract methods.

67
00:03:01.813 --> 00:03:04.130
Okay so let's go ahead and create an array of shapes here.

68
00:03:04.130 --> 00:03:07.040
So we have my circle, my rectangle.

69
00:03:07.040 --> 00:03:09.570
We declare an array of shapes like we've done before.

70
00:03:09.570 --> 00:03:12.820
We add the shapes to the array, we simply do a four loop.

71
00:03:12.820 --> 00:03:15.340
So we console dot log on tempShape dot getinfo

72
00:03:15.340 --> 00:03:16.640
and then we have a new entry here.

73
00:03:16.640 --> 00:03:19.190
We say console dot log area equals

74
00:03:19.190 --> 00:03:21.900
and then tempShape dot calculateArea.

75
00:03:21.900 --> 00:03:24.270
So again, depending on the type of shape

76
00:03:24.270 --> 00:03:25.830
they'll use their own formula

77
00:03:25.830 --> 00:03:28.070
for calculating their given area.

78
00:03:28.070 --> 00:03:29.470
And then they have a console dot log here

79
00:03:29.470 --> 00:03:31.020
just to give me a line break.

80
00:03:31.020 --> 00:03:33.680
I could have easily used a backslash end for a line break,

81
00:03:33.680 --> 00:03:36.020
but I simply wanted to keep the code simple,

82
00:03:36.020 --> 00:03:37.500
and I just added that extra line.

83
00:03:37.500 --> 00:03:39.053
But, either way will work.

84
00:03:41.450 --> 00:03:44.320
So here's the output, the first entry here is for circle,

85
00:03:44.320 --> 00:03:46.580
so we have x, y, radius of twenty

86
00:03:46.580 --> 00:03:50.023
and then the area equals pi times the radius squared.

87
00:03:51.120 --> 00:03:53.150
And then a similar thing here for our rectangle,

88
00:03:53.150 --> 00:03:54.580
x, y, width, length,

89
00:03:54.580 --> 00:03:56.780
and then the area equals width times length.

90
00:03:58.570 --> 00:04:00.670
Alrighty, so let's go ahead and move into our IDE,

91
00:04:00.670 --> 00:04:02.373
and let's test out this code.

