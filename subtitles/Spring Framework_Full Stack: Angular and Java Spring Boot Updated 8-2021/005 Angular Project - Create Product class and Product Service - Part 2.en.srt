1
00:00:01,080 --> 00:00:03,230
<v Instructor>Alrighty so now let's go ahead and move back</v>

2
00:00:03,230 --> 00:00:05,363
over to our service now.

3
00:00:10,120 --> 00:00:11,690
Let me simply expand the window here

4
00:00:11,690 --> 00:00:13,003
for this product service.

5
00:00:16,680 --> 00:00:19,520
So I'll go ahead and define the base URL for the service

6
00:00:19,520 --> 00:00:20,430
that we're going to call.

7
00:00:20,430 --> 00:00:22,610
Right now we're hard coding it we'll get into the config

8
00:00:22,610 --> 00:00:23,853
file stuff for it later.

9
00:00:26,190 --> 00:00:28,683
So this is the URL for our spring boot REST API.

10
00:00:32,310 --> 00:00:34,100
And then in our constructor we're going to inject

11
00:00:34,100 --> 00:00:35,133
the HttpClient.

12
00:00:42,640 --> 00:00:45,290
And recall Angular has a dependence injection framework

13
00:00:45,290 --> 00:00:48,630
and HttpClient behind the scenes is injectable

14
00:00:48,630 --> 00:00:51,053
and Angular will inject it for us.

15
00:00:54,090 --> 00:00:56,940
And be careful here on the imports here don't choose

16
00:00:56,940 --> 00:00:59,890
the auto imports, you may want to add it manually because

17
00:00:59,890 --> 00:01:03,250
sometimes Visual Studio code has problems on importing

18
00:01:03,250 --> 00:01:04,993
the correct module.

19
00:01:11,390 --> 00:01:14,883
So be sure to make use of angular common http.

20
00:01:26,090 --> 00:01:28,073
So let me kind of scroll down here a bit.

21
00:01:33,075 --> 00:01:36,323
And we'll write this new method get product list.

22
00:01:39,260 --> 00:01:41,723
Returns an observable of product array.

23
00:01:44,870 --> 00:01:47,390
And this method's basically going to map the JSON data

24
00:01:47,390 --> 00:01:50,853
from the spring data REST service to a product array.

25
00:02:06,710 --> 00:02:11,200
So we use the HttpClient we make a get request to that base

26
00:02:11,200 --> 00:02:16,050
URL the data that's returned we pipet and then we make

27
00:02:18,165 --> 00:02:20,423
use of map to map that data to our given data type.

28
00:02:23,830 --> 00:02:27,930
And so we grab that response._embedded.products and that's

29
00:02:27,930 --> 00:02:30,730
going to be the product array that we're going to make use of.

30
00:02:41,533 --> 00:02:44,337
We'll also add a little supporting interface here

31
00:02:44,337 --> 00:02:46,413
at the bottom to help us with this mapping.

32
00:02:50,600 --> 00:02:54,260
So this interface getresponse will help us unwrap the JSON

33
00:02:54,260 --> 00:02:57,180
data from the spring of data REST API and make use

34
00:02:58,301 --> 00:02:59,860
of that underscore embedded entry that comes back

35
00:02:59,860 --> 00:03:02,593
from the spring data REST API.

36
00:03:03,750 --> 00:03:06,263
And we'll access the array of products.

37
00:03:11,440 --> 00:03:14,203
Now I need to take care of some imports here.

38
00:03:15,620 --> 00:03:18,323
So for observable I can make use of the quick fix.

39
00:03:24,520 --> 00:03:27,970
But for map it may not give you an easy solution here

40
00:03:27,970 --> 00:03:31,040
in Visual Studio code so we can just manually provide

41
00:03:31,040 --> 00:03:36,040
the entry, so I'll just move up top and I'll add the import

42
00:03:36,290 --> 00:03:40,413
here for the map and map is a special operator from the RXJS

43
00:03:40,413 --> 00:03:45,413
module and RXJS is short for reactive JavaScript.

44
00:03:53,840 --> 00:03:55,900
All right so this looks pretty good so this is the coding

45
00:03:55,900 --> 00:03:58,330
here for our product service and I'll make a get request

46
00:03:58,330 --> 00:04:01,470
to that backend base URL, grab the data unwrap it

47
00:04:01,470 --> 00:04:04,963
accordingly and make it available as an array of products.

