1
00:00:01,130 --> 00:00:03,100
<v Instructor>In this video, we'll continue with populating</v>

2
00:00:03,100 --> 00:00:05,033
the Country-State Drop-Down List.

3
00:00:08,350 --> 00:00:11,270
Alrighty, so the back end work for the REST API is done.

4
00:00:11,270 --> 00:00:13,690
Now let's handle the front end development.

5
00:00:13,690 --> 00:00:15,600
So the user is going to select the country,

6
00:00:15,600 --> 00:00:16,990
depending on the country selected,

7
00:00:16,990 --> 00:00:19,010
will populate the list of states.

8
00:00:19,010 --> 00:00:20,450
So here's our shipping address,

9
00:00:20,450 --> 00:00:21,930
the user selects the country,

10
00:00:21,930 --> 00:00:23,410
and then we'll populate the states

11
00:00:23,410 --> 00:00:25,583
for that selected country.

12
00:00:28,680 --> 00:00:30,460
Okay, so here's our development process,

13
00:00:30,460 --> 00:00:32,630
and this is all for the frontend.

14
00:00:32,630 --> 00:00:34,700
The first thing we'll do is we'll create TypeScripts classes

15
00:00:34,700 --> 00:00:36,100
for country and state.

16
00:00:36,100 --> 00:00:37,920
We'll add methods to the form service,

17
00:00:37,920 --> 00:00:39,520
for countries and states.

18
00:00:39,520 --> 00:00:41,170
We'll update the checkout components,

19
00:00:41,170 --> 00:00:43,730
or retrieve the countries from the service.

20
00:00:43,730 --> 00:00:45,750
We'll also update the HTML templates

21
00:00:45,750 --> 00:00:48,280
to populate drop-down lists for countries.

22
00:00:48,280 --> 00:00:49,840
And then we'll add an event handler

23
00:00:49,840 --> 00:00:51,630
for the checkout component.

24
00:00:51,630 --> 00:00:53,480
So we'll read the selected country,

25
00:00:53,480 --> 00:00:55,320
and then we'll retrieve the list of states

26
00:00:55,320 --> 00:00:57,330
based on a selected country.

27
00:00:57,330 --> 00:00:59,840
And then finally, we'll update our HTML template,

28
00:00:59,840 --> 00:01:02,583
to populate the drop-down list for states.

29
00:01:07,100 --> 00:01:08,920
And also here just as a refresher,

30
00:01:08,920 --> 00:01:11,660
we have our backend REST APIs already created,

31
00:01:11,660 --> 00:01:13,350
we can access various endpoints,

32
00:01:13,350 --> 00:01:15,030
and it'll give us a list of all countries.

33
00:01:15,030 --> 00:01:17,140
And also we can find by country code,

34
00:01:17,140 --> 00:01:19,170
and will give us a list of all states,

35
00:01:19,170 --> 00:01:20,470
for that given country.

36
00:01:20,470 --> 00:01:22,170
And that's already up and running.

37
00:01:24,930 --> 00:01:26,410
So getting started here with step one

38
00:01:26,410 --> 00:01:30,090
of creating the typeScript classes for country and state,

39
00:01:30,090 --> 00:01:31,410
allow this class country,

40
00:01:31,410 --> 00:01:33,950
and it'll have properties for id, code and name.

41
00:01:33,950 --> 00:01:36,940
And this will map over to the JSON data that we receive

42
00:01:36,940 --> 00:01:38,333
from the REST API.

43
00:01:39,690 --> 00:01:41,390
And then we'll do a similar thing here for state.

44
00:01:41,390 --> 00:01:44,490
We'll have a state class for id and Name and again,

45
00:01:44,490 --> 00:01:47,213
mapping over to the JSON from the REST API.

46
00:01:50,020 --> 00:01:51,350
Alrighty, so moving ahead to step two

47
00:01:51,350 --> 00:01:52,940
of adding methods to the form service

48
00:01:52,940 --> 00:01:54,210
for countries and states.

49
00:01:54,210 --> 00:01:56,918
So we'll make some updates here to all Luv2shopFormservice,

50
00:01:56,918 --> 00:01:59,740
or statesUrls for countries and states,

51
00:01:59,740 --> 00:02:02,090
and our constructor will Inject the HttpClient.

52
00:02:03,790 --> 00:02:05,680
And then we'll write the code here for Get Country.

53
00:02:05,680 --> 00:02:08,550
So it returns an observable array of countries.

54
00:02:08,550 --> 00:02:11,723
And we simply make the call to httpClient.get,

55
00:02:11,723 --> 00:02:13,110
GetResponseCountries.

56
00:02:13,110 --> 00:02:15,210
Remember, this is going to return an observable,

57
00:02:15,210 --> 00:02:18,150
we're going to map this JSON data from Spring Data REST,

58
00:02:18,150 --> 00:02:19,733
over to our Country array.

59
00:02:21,780 --> 00:02:23,420
And at the bottom, we'll create this interface,

60
00:02:23,420 --> 00:02:25,460
GetResponseCountries, and we use this,

61
00:02:25,460 --> 00:02:27,970
to unwrap the JSON from spring Data REST,

62
00:02:27,970 --> 00:02:30,203
for that underscore embedded entry.

63
00:02:31,710 --> 00:02:33,410
And then here's the JSON here at the top,

64
00:02:33,410 --> 00:02:37,070
and notice here how we map the underscore embedded,

65
00:02:37,070 --> 00:02:39,200
so we can actually get that list of countries,

66
00:02:39,200 --> 00:02:40,940
or get that array of countries,

67
00:02:40,940 --> 00:02:42,840
and then assign it and then send it back

68
00:02:42,840 --> 00:02:45,130
to the calling program.

69
00:02:45,130 --> 00:02:46,460
And this is a common technique.

70
00:02:46,460 --> 00:02:49,160
We've used this before in some of our previous videos.

71
00:02:52,140 --> 00:02:55,110
Alrighty and we kind of just repeat the process for states.

72
00:02:55,110 --> 00:02:56,320
So have this method here,

73
00:02:56,320 --> 00:02:59,050
Get States, pass in the country code,

74
00:02:59,050 --> 00:03:01,330
and then we'll set this searchStatesUrl.

75
00:03:01,330 --> 00:03:03,540
So we basically say findByCountryCode,

76
00:03:03,540 --> 00:03:06,760
and code equals theCountryCode they pass in,

77
00:03:06,760 --> 00:03:07,790
and then we do a similar thing.

78
00:03:07,790 --> 00:03:09,500
So this returns an observable,

79
00:03:09,500 --> 00:03:11,680
we map the JSON data from the spring Data REST,

80
00:03:11,680 --> 00:03:13,070
to a State array.

81
00:03:13,070 --> 00:03:15,004
And then at the bottom, we make use of this interface,

82
00:03:15,004 --> 00:03:16,270
GetResponseStates.

83
00:03:16,270 --> 00:03:19,110
Again, unwrapping the JSON from Spring Data REST,

84
00:03:19,110 --> 00:03:21,250
and we map it to that underscore embedded entry.

85
00:03:21,250 --> 00:03:23,633
So same coding that we've done before.

86
00:03:26,750 --> 00:03:27,840
Alrighty, now in Step three,

87
00:03:27,840 --> 00:03:29,310
we're going to update the checkout components,

88
00:03:29,310 --> 00:03:31,263
or retrieve countries from the service.

89
00:03:35,890 --> 00:03:37,510
So my checkout component class,

90
00:03:37,510 --> 00:03:39,883
I'll set up an array of country objects.

91
00:03:43,990 --> 00:03:46,380
And then here inside of this ngOnInit,

92
00:03:46,380 --> 00:03:48,760
I will do all of our normal initialization work.

93
00:03:48,760 --> 00:03:50,020
Here, we actually want to go out,

94
00:03:50,020 --> 00:03:52,250
and populate the countries or get a list of countries

95
00:03:52,250 --> 00:03:54,230
from that form service.

96
00:03:54,230 --> 00:03:55,808
So I use Luv2ShopFormService,

97
00:03:55,808 --> 00:03:58,950
I get countries that were subscribe, the data is returned,

98
00:03:58,950 --> 00:04:02,220
I simply do a console.log on those retrieve countries.

99
00:04:02,220 --> 00:04:04,950
And then also here, I say this.countries equals data.

100
00:04:04,950 --> 00:04:07,310
So when the form is initially displayed,

101
00:04:07,310 --> 00:04:09,060
we're going to populate the countries.

102
00:04:13,570 --> 00:04:16,340
Now in step four, we actually update the HTML templates,

103
00:04:16,340 --> 00:04:19,690
to populate the drop-down lists for the countries.

104
00:04:19,690 --> 00:04:22,420
So in our HTML here, we have option ngFor,

105
00:04:22,420 --> 00:04:25,080
let country of countries.

106
00:04:25,080 --> 00:04:26,470
And then we simply loop over that,

107
00:04:26,470 --> 00:04:28,330
we say country.name.

108
00:04:28,330 --> 00:04:29,569
So country is an actual array,

109
00:04:29,569 --> 00:04:31,970
that we defined in our actual component,

110
00:04:31,970 --> 00:04:33,083
on the previous slide.

111
00:04:36,700 --> 00:04:38,350
And next, we update our checkout component,

112
00:04:38,350 --> 00:04:40,210
we add an event handler.

113
00:04:40,210 --> 00:04:43,360
So for change event, we're going to call the method geStates.

114
00:04:43,360 --> 00:04:45,510
So when they select a country,

115
00:04:45,510 --> 00:04:48,830
then we want to get the states for that given country.

116
00:04:48,830 --> 00:04:50,270
And so we'll accomplish this inside

117
00:04:50,270 --> 00:04:51,823
of this getStates method.

118
00:04:59,090 --> 00:05:00,070
So a couple of things here.

119
00:05:00,070 --> 00:05:02,850
One is that I'll define two arrays of State objects

120
00:05:02,850 --> 00:05:05,210
for shipping and billing.

121
00:05:05,210 --> 00:05:06,730
We want to keep those separate,

122
00:05:06,730 --> 00:05:09,290
because when a user chooses their different countries,

123
00:05:09,290 --> 00:05:11,500
we simply want to update the appropriate states

124
00:05:11,500 --> 00:05:13,090
for that given section,

125
00:05:13,090 --> 00:05:15,263
for shipping address or billing address.

126
00:05:18,260 --> 00:05:20,250
And then inside of this method getStates,

127
00:05:20,250 --> 00:05:21,760
they'll pass in the formGroup,

128
00:05:21,760 --> 00:05:23,810
so I need to figure out which form I'm using,

129
00:05:23,810 --> 00:05:25,400
if I'm using billing or shipping,

130
00:05:25,400 --> 00:05:27,510
but basically, I read the selected country code,

131
00:05:27,510 --> 00:05:30,330
from the form and retrieve the states,

132
00:05:30,330 --> 00:05:33,100
for the selected country code.

133
00:05:33,100 --> 00:05:35,770
So here I say if formGroup name equals shippingAddress,

134
00:05:35,770 --> 00:05:38,970
then I assign this.shippingAddressStates equals data,

135
00:05:38,970 --> 00:05:42,200
else, this.billingInterestStates equals data.

136
00:05:42,200 --> 00:05:45,080
And then at the bottom here, I select the first item

137
00:05:45,080 --> 00:05:47,930
by default, so I say formGroup.get "state",

138
00:05:47,930 --> 00:05:50,010
setValue data sub zero.

139
00:05:50,010 --> 00:05:52,735
So selecting the first state in that list of states,

140
00:05:52,735 --> 00:05:54,485
so they're retrieved.

141
00:05:55,940 --> 00:05:58,940
And then finally, I want to update the HTML template,

142
00:05:58,940 --> 00:06:00,850
to populate the drop-down lists for states.

143
00:06:00,850 --> 00:06:02,260
So again, a similar thing,

144
00:06:02,260 --> 00:06:03,860
we simply loop over that array

145
00:06:03,860 --> 00:06:05,510
of our shipping address states.

146
00:06:05,510 --> 00:06:07,963
And then we simply give State.name.

147
00:06:10,070 --> 00:06:12,770
And that's the basic coding there for getting this set up.

148
00:06:12,770 --> 00:06:15,000
So let's go ahead and move into the video,

149
00:06:15,000 --> 00:06:18,043
dive and saw it in a missile writing some code.

