1
00:00:01,230 --> 00:00:02,430
<v Instructor>Alrighty, so we're moving along</v>

2
00:00:02,430 --> 00:00:03,810
with our development process.

3
00:00:03,810 --> 00:00:05,400
So in this video, we'll cover step two

4
00:00:05,400 --> 00:00:07,270
of updating our ProductListComponent

5
00:00:07,270 --> 00:00:08,973
to handle the pagination.

6
00:00:17,120 --> 00:00:17,953
Okay, so let's go ahead

7
00:00:17,953 --> 00:00:20,543
and move over to our product list component file.

8
00:00:23,220 --> 00:00:25,523
And that's product-list.component.ts.

9
00:00:31,270 --> 00:00:32,103
So I'll just start here.

10
00:00:32,103 --> 00:00:34,030
At the top of the file is a little checkpoint,

11
00:00:34,030 --> 00:00:36,880
making sure we're at the right place, the right location.

12
00:00:45,720 --> 00:00:48,920
So we'll add this new property here, previousKeyword,

13
00:00:48,920 --> 00:00:51,620
it's of type string, and I will initialize it to null,

14
00:00:52,610 --> 00:00:54,760
and we'll make use of it later in our code.

15
00:00:58,300 --> 00:01:00,930
Okay, so let's go ahead and move down to our method here,

16
00:01:00,930 --> 00:01:02,940
handle search products,

17
00:01:02,940 --> 00:01:05,640
and we'll do the bulk of our work here in this method.

18
00:01:07,450 --> 00:01:09,150
Let me zoom in a bit.

19
00:01:09,150 --> 00:01:11,350
So I'm going to write some quick comments here.

20
00:01:20,880 --> 00:01:23,530
So basically, if we have a different keyword

21
00:01:23,530 --> 00:01:26,950
than the previous, they want to set the page number to one,

22
00:01:26,950 --> 00:01:29,780
and we did a similar thing here for category IDs,

23
00:01:29,780 --> 00:01:32,440
when we're making use of listing products,

24
00:01:32,440 --> 00:01:34,240
but here we're focusing on keywords.

25
00:01:42,950 --> 00:01:46,580
If this.previousKeyword is not equal to theKeyword

26
00:01:46,580 --> 00:01:50,573
then we'll set this.PageNumber equal one.

27
00:01:52,600 --> 00:01:53,940
Basically just resetting it

28
00:01:53,940 --> 00:01:55,940
if there's a new keyword coming through.

29
00:02:06,210 --> 00:02:08,010
And then we'll also add some code here

30
00:02:08,010 --> 00:02:09,520
to keep track of the keywords,

31
00:02:09,520 --> 00:02:12,880
so I'll say this.previousKeyword equals theKeyword.

32
00:02:15,050 --> 00:02:17,100
And then also just for debugging purposes,

33
00:02:17,100 --> 00:02:19,800
I'll do a console.log and I'll log some information

34
00:02:19,800 --> 00:02:21,850
just so I can see it in the browser console

35
00:02:21,850 --> 00:02:24,693
if I need to come back and debug this application.

36
00:02:35,160 --> 00:02:38,153
So I'll log the keyword and I'll also log the page number.

37
00:02:48,374 --> 00:02:52,480
Alrighty, so that looks good for the basics.

38
00:02:52,480 --> 00:02:54,750
Now we need to update this next section of code here

39
00:02:54,750 --> 00:02:55,830
for searching for products

40
00:02:55,830 --> 00:02:56,663
'cause we're going to call

41
00:02:56,663 --> 00:02:59,333
that new method, searchProductsPaginate.

42
00:03:00,608 --> 00:03:02,300
So I'll just clear out that old code

43
00:03:02,300 --> 00:03:05,090
and I'll make use of searchProductsPaginate.

44
00:03:07,410 --> 00:03:09,170
And I'll pass in those three parameters.

45
00:03:09,170 --> 00:03:11,493
I'll pass in the page number minus one.

46
00:03:21,220 --> 00:03:23,343
I'll also pass in the page size.

47
00:03:28,280 --> 00:03:30,450
And then also pass in the keyword,

48
00:03:30,450 --> 00:03:32,163
what keyword we're searching for.

49
00:03:36,650 --> 00:03:38,990
Okay, and now I'll do the subscribe.

50
00:03:38,990 --> 00:03:41,740
Then I'll make a call here to this.processresults.

51
00:03:41,740 --> 00:03:44,343
So basically process the results of this async call.

52
00:03:47,730 --> 00:03:49,700
And that's the same method that we had previously

53
00:03:49,700 --> 00:03:51,263
in some of the previous videos.

54
00:03:55,840 --> 00:03:58,933
And that's pretty much it as far as calling the service.

55
00:04:03,870 --> 00:04:05,570
Now scroll up a bit and just to, kind of,

56
00:04:05,570 --> 00:04:07,400
get a good snapshot here, so basically,

57
00:04:07,400 --> 00:04:10,323
this is our updated handle search products method.

58
00:04:13,875 --> 00:04:14,970
Alrighty, so this looks pretty good.

59
00:04:14,970 --> 00:04:16,170
I'm getting excited.

60
00:04:16,170 --> 00:04:17,030
I'm ready to run it,

61
00:04:17,030 --> 00:04:19,733
so we'll go ahead and get started and test this out.

62
00:04:22,780 --> 00:04:23,613
The first thing we need to do

63
00:04:23,613 --> 00:04:25,610
is get our Spring Boot application up and running,

64
00:04:25,610 --> 00:04:27,780
so I'll swing over to IntelliJ,

65
00:04:27,780 --> 00:04:30,503
and I'll just run the Spring Boot ecommerce app.

66
00:04:37,370 --> 00:04:39,470
All right, so that's up and running a-okay.

67
00:04:39,470 --> 00:04:40,660
And Visual Studio Code,

68
00:04:40,660 --> 00:04:43,010
I'll simply open up a new terminal window here.

69
00:04:50,262 --> 00:04:51,095
And I'll go ahead

70
00:04:51,095 --> 00:04:52,913
and get my Angular application up and running.

71
00:04:58,200 --> 00:05:00,350
Alrighty, so I'll swing over to my browser,

72
00:05:03,230 --> 00:05:05,053
go to localhost 4200.

73
00:05:08,040 --> 00:05:11,140
And then for the search keyword, I'll just type in python.

74
00:05:11,140 --> 00:05:13,020
So I'm going to have two python items,

75
00:05:13,020 --> 00:05:15,040
and so that works out good with our pagination

76
00:05:15,040 --> 00:05:17,010
at the bottom, only one page.

77
00:05:17,010 --> 00:05:19,570
I'll type in the word introduction.

78
00:05:19,570 --> 00:05:22,320
So we have five products called introduction,

79
00:05:22,320 --> 00:05:25,430
so page size of one, sorry page size of five,

80
00:05:25,430 --> 00:05:27,023
one page, okay that's fine.

81
00:05:28,450 --> 00:05:30,520
I type in the letter A.

82
00:05:30,520 --> 00:05:33,000
And now I get a lot of results.

83
00:05:33,000 --> 00:05:35,080
Basically any product that has the letter A in it,

84
00:05:35,080 --> 00:05:36,700
so there's a lot of products, right,

85
00:05:36,700 --> 00:05:39,120
but this is a really good way to test out our pagination

86
00:05:39,120 --> 00:05:41,273
to see if this is really working for us.

87
00:05:49,923 --> 00:05:53,530
So then I search for Java, I see the results,

88
00:05:53,530 --> 00:05:55,283
change the page size to five.

89
00:05:57,530 --> 00:05:58,600
All righty, this is great.

90
00:05:58,600 --> 00:06:01,720
Our pagination is working for searching by keyword.

91
00:06:01,720 --> 00:06:02,950
This is some really good stuff.

92
00:06:02,950 --> 00:06:06,773
I'm excited and I like to say, good job, my friend.

