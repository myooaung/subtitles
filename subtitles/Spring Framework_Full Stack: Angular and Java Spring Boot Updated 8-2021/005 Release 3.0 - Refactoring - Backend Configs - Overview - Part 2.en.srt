1
00:00:01,220 --> 00:00:02,053
<v Instructor>In step four,</v>

2
00:00:02,053 --> 00:00:05,020
we're going to disable the HTTP PATCH method.

3
00:00:05,020 --> 00:00:06,030
Previously, we configured

4
00:00:06,030 --> 00:00:08,510
the Spring Data REST APIs for read only

5
00:00:08,510 --> 00:00:10,763
and we disabled GET, POST and DELETE.

6
00:00:11,700 --> 00:00:15,790
However, we also need to disable the HTTP PATCH

7
00:00:15,790 --> 00:00:18,810
because someone could still PATCH data to those end points.

8
00:00:18,810 --> 00:00:19,643
And so that's a,

9
00:00:19,643 --> 00:00:21,480
it's an issue that we need to resolve.

10
00:00:24,670 --> 00:00:25,810
Here is our coding here for

11
00:00:25,810 --> 00:00:27,850
MyDataRestConfig.java.

12
00:00:27,850 --> 00:00:30,143
We have those lists of methods in an array.

13
00:00:31,050 --> 00:00:32,660
PUT, POST, DELETE

14
00:00:32,660 --> 00:00:34,260
and we simply add PATCH.

15
00:00:34,260 --> 00:00:36,150
And everything else will work out just fine

16
00:00:36,150 --> 00:00:38,160
because all of those other lines of code

17
00:00:38,160 --> 00:00:41,943
make use of the same array for the unsupported actions.

18
00:00:45,140 --> 00:00:46,160
Okay, with step five

19
00:00:46,160 --> 00:00:48,500
we need to modify the Spring Data REST detection strategy.

20
00:00:48,500 --> 00:00:51,630
So by default, Spring Data REST will expose the REST APIs

21
00:00:51,630 --> 00:00:54,140
for the Spring Data repositories.

22
00:00:54,140 --> 00:00:55,500
This works in general

23
00:00:55,500 --> 00:00:58,800
but you may not want to expose all of your Repositories.

24
00:00:58,800 --> 00:01:01,870
For example, in our case, we have a Customer Repository

25
00:01:01,870 --> 00:01:05,410
but we don't want to expose this as a REST API.

26
00:01:05,410 --> 00:01:07,430
We only want to use it internally

27
00:01:07,430 --> 00:01:10,720
like for checking if a customer email exist or not.

28
00:01:10,720 --> 00:01:15,110
The REST endpoint /api/customers is currently exposed

29
00:01:15,110 --> 00:01:16,130
and we don't want that.

30
00:01:16,130 --> 00:01:18,063
So let's go ahead and fix this ASAP.

31
00:01:20,770 --> 00:01:21,950
All right, so let's talk first

32
00:01:21,950 --> 00:01:24,950
about the Spring Data REST detection strategies.

33
00:01:24,950 --> 00:01:26,650
There are different ones available.

34
00:01:28,430 --> 00:01:29,990
So there is the ALL strategy.

35
00:01:29,990 --> 00:01:31,350
So in this strategy,

36
00:01:31,350 --> 00:01:33,080
Spring Data REST will expose

37
00:01:33,080 --> 00:01:36,190
all Spring Data repositories regardless

38
00:01:36,190 --> 00:01:39,803
of their Java visibility or annotation configuration.

39
00:01:42,260 --> 00:01:44,080
There is also the DEFAULT strategy.

40
00:01:44,080 --> 00:01:45,670
So this strategy exposes

41
00:01:45,670 --> 00:01:48,110
public Spring Data REST repositories

42
00:01:48,110 --> 00:01:50,809
or ones explicitly annotated with

43
00:01:50,809 --> 00:01:53,080
@RepositoryRestResource

44
00:01:53,080 --> 00:01:57,520
and has the exported attribute not set to false.

45
00:01:57,520 --> 00:01:59,433
And you'll see some examples of this.

46
00:02:01,460 --> 00:02:03,272
The VISIBILITY strategy exposes

47
00:02:03,272 --> 00:02:06,820
only public Spring Data REST repositories

48
00:02:06,820 --> 00:02:08,850
regardless of annotation configuration.

49
00:02:08,850 --> 00:02:11,523
So public using the public keyword.

50
00:02:12,960 --> 00:02:14,650
The ANNOTATED strategy

51
00:02:14,650 --> 00:02:17,520
only exposes Spring Data REST repositories,

52
00:02:17,520 --> 00:02:21,060
explicitly annotated with @RepositoryRestResource

53
00:02:22,030 --> 00:02:26,120
and it's exported attribute is not set to false.

54
00:02:26,120 --> 00:02:27,700
So I like the ANNOTATED

55
00:02:27,700 --> 00:02:29,210
because it only exposes the ones

56
00:02:29,210 --> 00:02:30,780
that are explicitly annotated.

57
00:02:30,780 --> 00:02:32,750
And so this is a good approach for our app

58
00:02:32,750 --> 00:02:34,123
and this is what we'll use.

59
00:02:38,560 --> 00:02:40,830
So using the ANNOTATED strategy,

60
00:02:40,830 --> 00:02:42,670
so here we have this state repository.

61
00:02:42,670 --> 00:02:44,717
So we annotate the repository with

62
00:02:44,717 --> 00:02:46,467
@RepositoryRestResource(exported = true).

63
00:02:48,090 --> 00:02:51,530
And in fact, we really don't need the value of true

64
00:02:51,530 --> 00:02:54,310
because the default value of exported is true.

65
00:02:54,310 --> 00:02:56,810
So we don't have to explicitly list it here.

66
00:02:56,810 --> 00:02:59,403
We could simply just give the annotation by itself.

67
00:03:02,335 --> 00:03:04,440
Now we need to configure the detection strategy.

68
00:03:04,440 --> 00:03:05,560
So we need to tell the system,

69
00:03:05,560 --> 00:03:08,063
hey, use the ANNOTATED strategy.

70
00:03:09,110 --> 00:03:11,070
So in our application.properties file

71
00:03:11,070 --> 00:03:14,440
we set up spring-data-rest.detection-strategy

72
00:03:14,440 --> 00:03:15,913
equals ANNOTATED.

73
00:03:18,250 --> 00:03:19,670
Okay, this looks pretty good.

74
00:03:19,670 --> 00:03:21,050
Let's go ahead and move into the videos

75
00:03:21,050 --> 00:03:22,750
and let's start writing some code.

