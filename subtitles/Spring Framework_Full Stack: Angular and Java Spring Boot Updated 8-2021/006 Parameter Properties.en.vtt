WEBVTT
1
00:00:01.150 --> 00:00:02.450
<v Instructor>In this video, we'll cover</v>

2
00:00:02.450 --> 00:00:03.973
parameter properties.

3
00:00:07.370 --> 00:00:10.180
So TypeScript offers a shortcut syntax

4
00:00:10.180 --> 00:00:12.640
for creating constructors.

5
00:00:12.640 --> 00:00:15.260
It helps to minimize some of the boilerplate code

6
00:00:15.260 --> 00:00:17.740
for constructors and also for defining

7
00:00:17.740 --> 00:00:19.243
and assigning properties.

8
00:00:22.610 --> 00:00:24.620
So let's take a look at the traditional approach

9
00:00:24.620 --> 00:00:25.890
of creating a constructor.

10
00:00:25.890 --> 00:00:28.650
So we have a constructor, we have two params coming in.

11
00:00:28.650 --> 00:00:31.360
And then inside of the constructor we assign those params

12
00:00:31.360 --> 00:00:32.903
to the given properties.

13
00:00:34.240 --> 00:00:36.940
But TypeScript offers a really cool shortcut

14
00:00:36.940 --> 00:00:38.340
and we'll take a look at it.

15
00:00:41.370 --> 00:00:44.233
So here's the traditional approach on the left-hand side.

16
00:00:45.230 --> 00:00:47.100
And then here's the short cut.

17
00:00:47.100 --> 00:00:50.090
So notice here we have these parameter properties.

18
00:00:50.090 --> 00:00:53.650
So for our constructor, we have our two parameters

19
00:00:53.650 --> 00:00:55.730
but note the access modifier.

20
00:00:55.730 --> 00:01:00.457
So we have private _firstName comma private _lastName.

21
00:01:01.510 --> 00:01:05.290
So what this does is basically defines the properties

22
00:01:05.290 --> 00:01:09.620
and also assigns them at the same time.

23
00:01:09.620 --> 00:01:12.560
So this minimizes the boilerplate coding.

24
00:01:12.560 --> 00:01:15.250
Doing a comparison here, we see the traditional

25
00:01:15.250 --> 00:01:19.220
approach on the left-hand side and then this short cut here,

26
00:01:19.220 --> 00:01:22.235
we're using parameter properties so this is effectively

27
00:01:22.235 --> 00:01:25.030
the same level of coding.

28
00:01:25.030 --> 00:01:27.128
So by using the parameter properties,

29
00:01:27.128 --> 00:01:30.830
you get this same functionality in the background.

30
00:01:30.830 --> 00:01:34.520
So you get the properties defined and also assigning

31
00:01:34.520 --> 00:01:36.860
the properties automagically.

32
00:01:36.860 --> 00:01:39.320
So it makes your life a little bit easier

33
00:01:39.320 --> 00:01:41.410
when it comes to setting up your class.

34
00:01:41.410 --> 00:01:43.113
I really like this feature.

35
00:01:46.140 --> 00:01:47.360
Alrighty, now let's take a look at

36
00:01:47.360 --> 00:01:49.073
parameter properties in action.

37
00:01:49.950 --> 00:01:52.670
So here is our class customer with our constructor

38
00:01:52.670 --> 00:01:54.030
using parameter properties.

39
00:01:54.030 --> 00:01:56.590
And so again, remember, it defines the properties

40
00:01:56.590 --> 00:01:58.430
and assigns them automagically,

41
00:01:58.430 --> 00:02:00.253
minimizes that boilerplate coding,

42
00:02:01.410 --> 00:02:02.610
and then we simply use it.

43
00:02:02.610 --> 00:02:04.930
And so to the program that uses this class,

44
00:02:04.930 --> 00:02:06.270
everything else works the same.

45
00:02:06.270 --> 00:02:07.190
There's nothing different.

46
00:02:07.190 --> 00:02:08.900
So we simply create a new instance,

47
00:02:08.900 --> 00:02:10.705
we pass in the first name last name,

48
00:02:10.705 --> 00:02:12.730
we can access properties, so on and so forth.

49
00:02:12.730 --> 00:02:14.850
So everything else works fine.

50
00:02:14.850 --> 00:02:16.220
The only difference here is that

51
00:02:16.220 --> 00:02:18.350
for the actual customer class and when we define it

52
00:02:18.350 --> 00:02:21.220
or create it, we can make use of the parameter properties

53
00:02:21.220 --> 00:02:23.030
and save on some of the boilerplate coding.

54
00:02:23.030 --> 00:02:25.700
So it just makes our life a little bit easier.

55
00:02:25.700 --> 00:02:28.200
Okay great, so let's go ahead and move into our IDE

56
00:02:28.200 --> 00:02:29.993
and let's test out this coding.

57
00:02:34.180 --> 00:02:36.053
Okay so let's get started.

58
00:02:36.920 --> 00:02:39.080
Again, the first thing we want to is some housekeeping work,

59
00:02:39.080 --> 00:02:41.793
just copy pasting our previous project.

60
00:02:52.780 --> 00:02:57.780
And I'll rename the project to 04-parameter-properties.

61
00:03:08.200 --> 00:03:11.620
Alrighty so let's go ahead and open up the customer.ts file

62
00:03:11.620 --> 00:03:14.573
in our 04-parameter-properties folder.

63
00:03:16.900 --> 00:03:19.770
So we'll remove the traditional coding for the constructor

64
00:03:19.770 --> 00:03:22.411
and make use of parameter properties, that nice shortcut

65
00:03:22.411 --> 00:03:25.463
to help minimize that boilerplate code.

66
00:03:28.160 --> 00:03:31.420
All right so I'll just grab this property here

67
00:03:31.420 --> 00:03:33.870
for first name, and I'll cut it,

68
00:03:33.870 --> 00:03:36.500
and I'll replace the param there.

69
00:03:36.500 --> 00:03:38.950
So this is then going to be a parameter property.

70
00:03:44.950 --> 00:03:47.370
And I'll do a similar thing here for private last names,

71
00:03:47.370 --> 00:03:51.403
just cut that portion, and then paste it right here.

72
00:03:52.370 --> 00:03:55.050
And then I'll clean up lines three and four

73
00:03:55.050 --> 00:03:58.560
and then the internal assignments, no need to do that,

74
00:03:58.560 --> 00:04:01.050
because we're making use of parameter properties.

75
00:04:01.050 --> 00:04:04.340
All of that work happens behind the scenes by TypeScript.

76
00:04:04.340 --> 00:04:06.650
It's all done automagically.

77
00:04:06.650 --> 00:04:07.483
I love it.

78
00:04:08.980 --> 00:04:11.440
So this is the old code here in white,

79
00:04:11.440 --> 00:04:14.050
and then what we have in our editor, that's the new code

80
00:04:14.050 --> 00:04:16.453
using parameter properties shortcut.

81
00:04:19.730 --> 00:04:21.840
And I'll move down here so we have our constructor,

82
00:04:21.840 --> 00:04:24.650
that's fine, I'll get ride of lines 26 and 27.

83
00:04:24.650 --> 00:04:26.733
They don't really apply to this example.

84
00:04:29.750 --> 00:04:31.470
Let's just open up a terminal window

85
00:04:31.470 --> 00:04:33.430
and let's move into that directory

86
00:04:35.190 --> 00:04:37.653
for 04-parameter-properties.

87
00:04:39.420 --> 00:04:40.711
And the first thing I would do here is

88
00:04:40.711 --> 00:04:44.010
I'll simply do a clean, just so I can remove

89
00:04:44.010 --> 00:04:45.940
some of the old javascript codes,

90
00:04:45.940 --> 00:04:49.073
so I'll say tsc --build --clean.

91
00:04:50.780 --> 00:04:53.600
And that'll remove the .js files there.

92
00:04:53.600 --> 00:04:54.680
Okay, good.

93
00:04:54.680 --> 00:04:57.480
And now I'll simply do a normal tsc to compile the code.

94
00:05:00.790 --> 00:05:02.853
And now we can go ahead and run the code.

95
00:05:04.080 --> 00:05:05.330
We'll get the same output as before

96
00:05:05.330 --> 00:05:06.620
because we're constructing this object

97
00:05:06.620 --> 00:05:08.090
using parameter properties.

98
00:05:08.090 --> 00:05:09.650
So the only difference here is that we kind of

99
00:05:09.650 --> 00:05:11.379
cleaned up some of our coding.

100
00:05:11.379 --> 00:05:14.600
We got rid of the traditional constructor code,

101
00:05:14.600 --> 00:05:17.230
and we made use of the parameter properties,

102
00:05:17.230 --> 00:05:19.393
that nice TypeScript shortcut.

