1
00:00:01,200 --> 00:00:02,560
<v instructor>So our app is up and running,</v>

2
00:00:02,560 --> 00:00:03,740
but one thing I like to do is

3
00:00:03,740 --> 00:00:06,010
I'd like to modify this application,

4
00:00:06,010 --> 00:00:07,340
modify the properties.

5
00:00:07,340 --> 00:00:10,070
I want to try and break it on purpose.

6
00:00:10,070 --> 00:00:12,690
Is it really using this localhost:4200?

7
00:00:12,690 --> 00:00:15,500
What if I gave some bad information here?

8
00:00:15,500 --> 00:00:18,880
Would it read that and apply CORS accordingly?

9
00:00:18,880 --> 00:00:20,050
Huh, let's try it.

10
00:00:20,050 --> 00:00:22,380
So let me just add some bad name here.

11
00:00:22,380 --> 00:00:25,300
Just nowhere:4200.

12
00:00:25,300 --> 00:00:26,133
I'm totally making this up.

13
00:00:26,133 --> 00:00:27,480
You can give it anything

14
00:00:27,480 --> 00:00:29,053
as long as it's not localhost.

15
00:00:30,440 --> 00:00:34,660
And start up my spring boot app again in the background

16
00:00:34,660 --> 00:00:36,610
so it can pick up those new properties.

17
00:00:39,860 --> 00:00:42,050
Go to my angler application.

18
00:00:42,050 --> 00:00:44,010
And now notice here in the angler application

19
00:00:44,010 --> 00:00:45,610
there is no product categories,

20
00:00:45,610 --> 00:00:47,480
and there's no products.

21
00:00:47,480 --> 00:00:48,610
Hmm, interesting.

22
00:00:48,610 --> 00:00:50,710
Let's go look at the actual debugger here.

23
00:00:52,450 --> 00:00:53,780
So on the dev tools

24
00:00:55,000 --> 00:00:56,623
and under console,

25
00:00:58,310 --> 00:01:00,920
and then we can see that we have some errors here.

26
00:01:00,920 --> 00:01:01,883
So it said,

27
00:01:03,320 --> 00:01:05,670
find by category ID, from origin

28
00:01:05,670 --> 00:01:07,113
has been blocked by CORS,

29
00:01:08,130 --> 00:01:10,160
and from origin 4200.

30
00:01:10,160 --> 00:01:13,990
So, it's not allowing anything from 4200

31
00:01:13,990 --> 00:01:16,100
because it's not an allowed origin.

32
00:01:16,100 --> 00:01:18,960
So you'd have to change that value back to local host.

33
00:01:18,960 --> 00:01:21,580
So it is reading our properties information.

34
00:01:21,580 --> 00:01:23,820
Run our spring boot application again.

35
00:01:23,820 --> 00:01:25,200
And then if we go through application,

36
00:01:25,200 --> 00:01:26,910
and everything will work out just fine.

37
00:01:26,910 --> 00:01:27,743
On the back end

38
00:01:27,743 --> 00:01:30,000
we really are reading the application properties

39
00:01:30,000 --> 00:01:31,390
and reading the appropriate data.

40
00:01:31,390 --> 00:01:33,150
So now we see it's back to localhost.

41
00:01:33,150 --> 00:01:34,520
Everything is A-OK,

42
00:01:34,520 --> 00:01:36,490
and we can access our data accordingly.

43
00:01:36,490 --> 00:01:38,570
So our CORS configuration

44
00:01:38,570 --> 00:01:40,450
is working on the back end.

45
00:01:40,450 --> 00:01:41,283
I like that.

46
00:01:45,200 --> 00:01:46,800
Alrighty, let's move ahead to step three

47
00:01:46,800 --> 00:01:50,150
and configure the course mapping for the RestController.

48
00:01:50,150 --> 00:01:53,680
And so remember the configuration for the RestControllers

49
00:01:53,680 --> 00:01:54,970
are different

50
00:01:54,970 --> 00:01:58,150
from the configurations for the Spring Data REST.

51
00:01:58,150 --> 00:02:00,900
All right, so separate configuration shaft to set up here

52
00:02:00,900 --> 00:02:03,430
but we can use some of those same configs.

53
00:02:06,160 --> 00:02:08,340
So in our RestController

54
00:02:08,340 --> 00:02:09,950
we have this CheckoutController,

55
00:02:09,950 --> 00:02:12,037
notice at the top it's a RestController

56
00:02:12,037 --> 00:02:13,690
and we have the @CrossOrigin.

57
00:02:13,690 --> 00:02:17,103
What I'd like to do is use configurations for this.

58
00:02:19,060 --> 00:02:20,610
And so for the CrossOrigin portion

59
00:02:20,610 --> 00:02:23,760
I'd like to remove this or have this configured

60
00:02:23,760 --> 00:02:26,500
via our application and not having to hard-code it

61
00:02:26,500 --> 00:02:29,320
on each one of our RestControllers.

62
00:02:29,320 --> 00:02:30,940
So let's go ahead and delete it here,

63
00:02:30,940 --> 00:02:33,743
remove it from our controller, CheckoutController.

64
00:02:35,560 --> 00:02:37,630
And we'll move into our config package

65
00:02:37,630 --> 00:02:39,503
and we'll create a new configuration.

66
00:02:40,810 --> 00:02:42,963
So creating a new Java class here,

67
00:02:45,250 --> 00:02:46,653
I'll call it MyAppConfig.

68
00:02:52,810 --> 00:02:54,860
And this implements the WebMvcConfigurer.

69
00:03:15,152 --> 00:03:18,902
I'll just expand my window here for a second.

70
00:03:20,261 --> 00:03:24,300
And what I'd like to do is access two of our properties

71
00:03:24,300 --> 00:03:28,660
for allowed origins and also for the base path.

72
00:03:28,660 --> 00:03:32,350
So here I'll set up string array the allowed origins,

73
00:03:32,350 --> 00:03:34,053
and string base path.

74
00:03:36,720 --> 00:03:38,430
And then I'll use my @Value annotation

75
00:03:38,430 --> 00:03:40,993
to inject these property values accordingly.

76
00:03:51,420 --> 00:03:53,680
At theAllowedOrigins.

77
00:03:53,680 --> 00:03:55,460
And then I simply copy that,

78
00:03:55,460 --> 00:03:56,293
paste it,

79
00:03:56,293 --> 00:03:57,983
update the property reference here.

80
00:04:06,000 --> 00:04:08,403
So spring data rest.base-path.

81
00:04:09,410 --> 00:04:12,010
Cause we're using the same slash API

82
00:04:12,010 --> 00:04:13,530
for our RestControllers

83
00:04:13,530 --> 00:04:15,660
and for our spring data RestControllers.

84
00:04:15,660 --> 00:04:16,493
If they were a different thing

85
00:04:16,493 --> 00:04:19,370
you'd make use of different properties accordingly.

86
00:04:19,370 --> 00:04:21,470
Now let's go ahead and overwrite a method.

87
00:04:33,400 --> 00:04:36,277
And I'll overwrite this method, addCorsMapping.

88
00:04:49,244 --> 00:04:50,540
And they'll give me the basic stub here

89
00:04:50,540 --> 00:04:52,697
for this method, addCorsMapping.

90
00:05:00,690 --> 00:05:04,140
So I'll just rename this parameter here to cors.

91
00:05:04,140 --> 00:05:05,760
Just so it follows with the previous code

92
00:05:05,760 --> 00:05:06,840
that we've created.

93
00:05:06,840 --> 00:05:09,260
And I simply do a cors at addMapping.

94
00:05:10,320 --> 00:05:11,683
I give the base path,

95
00:05:20,840 --> 00:05:22,540
and then I do the .allowedOrigins.

96
00:05:26,451 --> 00:05:29,730
And then I pass on our variable, theAllowedOrigins.

97
00:05:36,130 --> 00:05:38,390
There's one more thing that we need to do for this class

98
00:05:38,390 --> 00:05:39,760
and I almost forgot.

99
00:05:39,760 --> 00:05:43,530
We actually need to add the @Configuration annotation

100
00:05:43,530 --> 00:05:44,700
for this class.

101
00:05:44,700 --> 00:05:47,500
This basically allows this given class to be picked up

102
00:05:47,500 --> 00:05:48,920
during component scanning.

103
00:05:48,920 --> 00:05:51,520
And this configuration will be applied accordingly.

104
00:05:51,520 --> 00:05:54,630
So just be sure to add this @Configuration annotation

105
00:05:57,840 --> 00:05:58,673
And then that's it.

106
00:05:58,673 --> 00:06:02,170
So we have the setup in place here for our @RestControllers

107
00:06:02,170 --> 00:06:03,730
for course mappings.

108
00:06:03,730 --> 00:06:04,563
Good job.

