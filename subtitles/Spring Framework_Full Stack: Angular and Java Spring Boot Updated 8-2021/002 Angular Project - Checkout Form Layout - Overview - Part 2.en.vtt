WEBVTT
1
00:00:00.954 --> 00:00:02.010
<v Chad>And then in step four</v>

2
00:00:02.010 --> 00:00:04.520
we're going to add support for reactive forms.

3
00:00:04.520 --> 00:00:06.720
So in our file app.module.ts

4
00:00:06.720 --> 00:00:09.670
in the imports section we'll reference ReactiveFormsModule.

5
00:00:13.500 --> 00:00:15.500
So in step five we're going to define the form

6
00:00:15.500 --> 00:00:17.330
in a component .ts file,

7
00:00:17.330 --> 00:00:19.140
but here let's take a look at a little screenshot

8
00:00:19.140 --> 00:00:22.370
of what our form's going to look like, a portion of it anyway.

9
00:00:22.370 --> 00:00:23.880
We'll have a customer group,

10
00:00:23.880 --> 00:00:25.850
and we'll also have a shipping address group.

11
00:00:25.850 --> 00:00:28.710
And each one of these groups will define form fields,

12
00:00:28.710 --> 00:00:30.970
first name, last name, email for a customer.

13
00:00:30.970 --> 00:00:32.150
For shipping address,

14
00:00:32.150 --> 00:00:34.620
country, street, city, state, zip code,

15
00:00:34.620 --> 00:00:37.360
and we'll see how we actually write the API code for this

16
00:00:37.360 --> 00:00:40.283
and also how we build the appropriate HTML layout.

17
00:00:42.960 --> 00:00:44.470
So here's the part of defining it

18
00:00:44.470 --> 00:00:47.763
in our component .ts files in our checkout.component.ts.

19
00:00:48.790 --> 00:00:51.340
We declare our form group called checkoutFormGroup.

20
00:00:53.060 --> 00:00:55.963
Then we inject the form builder into our constructor.

21
00:01:01.230 --> 00:01:02.840
And then we'll use the form builder

22
00:01:02.840 --> 00:01:04.823
to actually build the form.

23
00:01:06.820 --> 00:01:09.680
So here we have this.checkoutFormGroup

24
00:01:09.680 --> 00:01:12.830
equals this.formBuilder.group.

25
00:01:12.830 --> 00:01:14.850
All right, so we're creating a form group

26
00:01:14.850 --> 00:01:17.670
and then for the first item here we have customer,

27
00:01:17.670 --> 00:01:19.373
so that's the key for this group.

28
00:01:20.260 --> 00:01:22.800
And then we have this.formBuilder.group,

29
00:01:22.800 --> 00:01:24.950
and then we give the actual fields here

30
00:01:24.950 --> 00:01:26.800
for this given group.

31
00:01:26.800 --> 00:01:29.840
So we have first name, last name, and email.

32
00:01:29.840 --> 00:01:31.470
The quotes in square brackets,

33
00:01:31.470 --> 00:01:33.420
that means that's the initial value.

34
00:01:33.420 --> 00:01:35.140
The initial value for these form fields

35
00:01:35.140 --> 00:01:36.433
will be an empty string.

36
00:01:39.600 --> 00:01:42.030
And then we'll also have a method here called onSubmit.

37
00:01:42.030 --> 00:01:43.570
We simply log some data.

38
00:01:43.570 --> 00:01:46.200
That's the method to call when the submit button is clicked.

39
00:01:46.200 --> 00:01:48.210
We'll get into more of the event handling later,

40
00:01:48.210 --> 00:01:49.300
but I just wanted to show you

41
00:01:49.300 --> 00:01:51.243
that's where method will reside.

42
00:01:53.670 --> 00:01:56.150
All righty, so step six of laying out the form controls

43
00:01:56.150 --> 00:01:57.850
in the HTML template.

44
00:01:57.850 --> 00:01:59.330
So in our checkout.component.html

45
00:01:59.330 --> 00:02:01.250
we define this form formGroup

46
00:02:01.250 --> 00:02:03.620
and we give a reference to checkoutFormGroup.

47
00:02:03.620 --> 00:02:04.900
That's the name of the property

48
00:02:04.900 --> 00:02:08.020
from our component class that we just created.

49
00:02:08.020 --> 00:02:08.950
And then for a customer

50
00:02:08.950 --> 00:02:10.920
we have first name, last name, email.

51
00:02:10.920 --> 00:02:14.363
We set up a customer group, so formGroupName of customer.

52
00:02:20.720 --> 00:02:23.820
And then I simply do an h3 here for Customer.

53
00:02:23.820 --> 00:02:27.243
And then I add a row for our first name field.

54
00:02:29.970 --> 00:02:32.440
So I have input formControlName

55
00:02:32.440 --> 00:02:34.713
equals firstName type of text.

56
00:02:41.070 --> 00:02:42.760
And I simply repeat this process

57
00:02:42.760 --> 00:02:45.923
for the other rows, for last name and email.

58
00:02:47.730 --> 00:02:49.800
And that's the basic piece of my form,

59
00:02:49.800 --> 00:02:51.653
just for this one given group.

60
00:02:54.790 --> 00:02:56.860
And then also I need to add an event handler

61
00:02:56.860 --> 00:02:58.790
for form submission.

62
00:02:58.790 --> 00:03:00.520
So notice here, here's my form.

63
00:03:00.520 --> 00:03:05.143
At the bottom I have a submit button for purchase.

64
00:03:06.180 --> 00:03:08.800
And then up top I have the event handler,

65
00:03:08.800 --> 00:03:12.600
or the event binding ngSubmit equals onSubmit.

66
00:03:12.600 --> 00:03:14.250
So that's the method to call

67
00:03:14.250 --> 00:03:15.830
when the submit button is clicked,

68
00:03:15.830 --> 00:03:17.630
and we saw that coding a little earlier.

69
00:03:17.630 --> 00:03:20.050
So onSubmit, we'll do a console.log

70
00:03:20.050 --> 00:03:21.680
saying hey, handling submit button,

71
00:03:21.680 --> 00:03:22.640
and then also I'll go through

72
00:03:22.640 --> 00:03:24.233
and read some of the form data.

73
00:03:26.430 --> 00:03:28.940
And now a bit more on reading the form data here.

74
00:03:28.940 --> 00:03:30.550
So I do a console.log

75
00:03:30.550 --> 00:03:34.210
this.checkoutFormGroup.get customer .value,

76
00:03:34.210 --> 00:03:35.520
so that'll give me information

77
00:03:35.520 --> 00:03:38.000
about that given customer group,

78
00:03:38.000 --> 00:03:40.543
and so it'll output the data as JSON.

79
00:03:42.320 --> 00:03:45.008
So if I only wanted to get just the email address,

80
00:03:45.008 --> 00:03:47.870
then I could say this.checkoutFormGroup.get

81
00:03:47.870 --> 00:03:50.810
customer .value.email.

82
00:03:50.810 --> 00:03:53.760
So different ways of accessing the data.

83
00:03:53.760 --> 00:03:55.280
And we'll use this later on

84
00:03:55.280 --> 00:03:58.370
when we get into the order processing of reading that data

85
00:03:58.370 --> 00:04:01.253
and sending it over to our backend REST API.

86
00:04:04.330 --> 00:04:06.210
All righty, so for our checkout form,

87
00:04:06.210 --> 00:04:08.630
we're going to simply repeat the process

88
00:04:08.630 --> 00:04:10.570
for other sections of the form.

89
00:04:10.570 --> 00:04:12.410
So we've already done the work for a customer,

90
00:04:12.410 --> 00:04:14.280
we'll do a similar thing for shipping address,

91
00:04:14.280 --> 00:04:16.330
billing address, credit card,

92
00:04:16.330 --> 00:04:19.150
and also a section at the bottom of reviewing your order.

93
00:04:19.150 --> 00:04:20.340
Alrighty, so I'm not going to show

94
00:04:20.340 --> 00:04:22.240
all of the source code here in the slides

95
00:04:22.240 --> 00:04:24.370
because it's really just more of the same.

96
00:04:24.370 --> 00:04:27.360
I'll wait till we get into the actual coding section

97
00:04:27.360 --> 00:04:29.240
of the video in the IDE,

98
00:04:29.240 --> 00:04:31.170
and we'll write all of the code, all righty.

99
00:04:31.170 --> 00:04:33.040
So let's go ahead and swing over to the IDE

100
00:04:33.040 --> 00:04:35.173
and let's write some code.

