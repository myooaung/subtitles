WEBVTT
1
00:00:01.250 --> 00:00:02.640
<v Instructor>Alright, it's let's move back in here</v>

2
00:00:02.640 --> 00:00:04.690
with step four of updating the search components

3
00:00:04.690 --> 00:00:06.900
to send data to the search route.

4
00:00:06.900 --> 00:00:08.970
So the user is going to enter their search text,

5
00:00:08.970 --> 00:00:10.730
they're going to click the search button.

6
00:00:10.730 --> 00:00:13.080
Then the search component has a click handler method.

7
00:00:13.080 --> 00:00:15.010
So we basically read the search text,

8
00:00:15.010 --> 00:00:17.050
we route the data to the search component

9
00:00:17.050 --> 00:00:20.340
and this will be handled by the ProductLlistComponent.

10
00:00:20.340 --> 00:00:21.560
And now you may wonder,

11
00:00:21.560 --> 00:00:24.660
why is it being handled by the ProductLlistComponent,

12
00:00:24.660 --> 00:00:27.560
because basically, we want to reuse the logic and view

13
00:00:27.560 --> 00:00:28.880
for listing products,

14
00:00:28.880 --> 00:00:30.970
we already have that functionality in place,

15
00:00:30.970 --> 00:00:32.830
instead of reinventing the wheel

16
00:00:32.830 --> 00:00:35.783
we'll simply reuse that given ProductLlistComponent.

17
00:00:35.783 --> 00:00:38.353
And we'll see more of this as we get into the coding.

18
00:00:42.020 --> 00:00:43.830
Alrighty, so here's the actual HTML page

19
00:00:43.830 --> 00:00:46.150
where the user is going to enter their data.

20
00:00:46.150 --> 00:00:48.010
So atop we have our template reference value

21
00:00:48.010 --> 00:00:49.690
giving us access to the element

22
00:00:49.690 --> 00:00:50.950
at the bottom here Event fired

23
00:00:50.950 --> 00:00:52.610
when the user clicks the mouse button.

24
00:00:52.610 --> 00:00:54.130
And also the Event's going to be fired

25
00:00:54.130 --> 00:00:55.983
when the user hits the Enter key.

26
00:00:58.000 --> 00:00:59.760
So here, we can actually retrieve the value

27
00:00:59.760 --> 00:01:02.130
entered by the user, myInput.value,

28
00:01:02.130 --> 00:01:03.660
we call this doSearch method

29
00:01:03.660 --> 00:01:04.750
that's defined in our component.

30
00:01:04.750 --> 00:01:07.193
And remember, we can give it any name.

31
00:01:10.070 --> 00:01:11.140
Here's our component code.

32
00:01:11.140 --> 00:01:13.007
So here's the method, doSearch.

33
00:01:14.040 --> 00:01:16.420
And this maps over to the HTML page,

34
00:01:16.420 --> 00:01:18.593
doSearch passing in the value.

35
00:01:19.700 --> 00:01:21.040
We simply log the method

36
00:01:21.040 --> 00:01:23.510
and then we say this.router.navigateByUrl,

37
00:01:23.510 --> 00:01:25.470
so we're going to route to our search route,

38
00:01:25.470 --> 00:01:28.410
it's going to be handled by the ProductLlistComponent

39
00:01:28.410 --> 00:01:30.363
will pass over that search data.

40
00:01:31.350 --> 00:01:33.710
And again, we're going to reuse the logic and view

41
00:01:33.710 --> 00:01:35.170
for listing our products.

42
00:01:35.170 --> 00:01:36.760
So we're not a search by category

43
00:01:36.760 --> 00:01:38.470
here we're going to search by keyword,

44
00:01:38.470 --> 00:01:40.270
but here it will send it back to the same component

45
00:01:40.270 --> 00:01:42.120
for viewing and the list of products.

46
00:01:45.180 --> 00:01:46.070
Alrighty Step five,

47
00:01:46.070 --> 00:01:47.730
enhancing the components to search for products

48
00:01:47.730 --> 00:01:49.260
with product service.

49
00:01:49.260 --> 00:01:51.490
So this is our ProductLlistComponent.ts,

50
00:01:51.490 --> 00:01:53.560
we simply read the actual keyword.

51
00:01:53.560 --> 00:01:55.510
So remember, that comes in as a parameter

52
00:01:55.510 --> 00:01:57.423
based on our route configuration.

53
00:01:58.520 --> 00:02:01.610
So this is passed in from the Search component

54
00:02:01.610 --> 00:02:03.900
based on that little code that we had in the previous slide.

55
00:02:03.900 --> 00:02:06.210
So /search/value,

56
00:02:06.210 --> 00:02:08.810
whatever the user entered in that little text field.

57
00:02:09.910 --> 00:02:11.315
And then we'll use that to call

58
00:02:11.315 --> 00:02:15.003
productservice.searchproducts that we pass in the key word.

59
00:02:18.070 --> 00:02:19.130
Alrighty, step six is

60
00:02:19.130 --> 00:02:21.080
updating the product service to call the URL

61
00:02:21.080 --> 00:02:22.720
on the Spring Boot app.

62
00:02:22.720 --> 00:02:25.570
So this is our productservice.ts

63
00:02:25.570 --> 00:02:27.680
So here's the URL for searching for products.

64
00:02:27.680 --> 00:02:32.070
So search/findByNameContaining?name=

65
00:02:32.070 --> 00:02:34.220
we plug in that parameter that's passed in.

66
00:02:35.620 --> 00:02:37.710
And then we call that REST API.

67
00:02:37.710 --> 00:02:39.170
This returns an observable,

68
00:02:39.170 --> 00:02:41.780
we map the JSON data from Spring Data REST

69
00:02:41.780 --> 00:02:43.460
to a product array.

70
00:02:43.460 --> 00:02:45.760
And then we simply unwrap the JSON

71
00:02:45.760 --> 00:02:49.350
from Spring Data REST using that underscore embedded entry.

72
00:02:49.350 --> 00:02:51.320
And this is all coding that we've seen before

73
00:02:51.320 --> 00:02:55.713
for making restful calls from Angular to a backend API.

74
00:02:56.980 --> 00:02:59.020
Okay, this looks pretty good at this point.

75
00:02:59.020 --> 00:03:00.900
Let's go ahead and move in to our IDE.

76
00:03:00.900 --> 00:03:02.690
And let's start writing the code.

77
00:03:02.690 --> 00:03:05.003
So I'll see you in the next video.

