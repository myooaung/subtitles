1
00:00:01,130 --> 00:00:04,030
<v ->Okay so moving along with our development process</v>

2
00:00:04,030 --> 00:00:06,980
in step three we're going to create our data transfer objects.

3
00:00:17,100 --> 00:00:18,150
So the first thing we need to do

4
00:00:18,150 --> 00:00:20,823
is create a new package for dto.

5
00:00:37,140 --> 00:00:38,950
And now in that new package we need

6
00:00:38,950 --> 00:00:41,863
to go ahead and create a new class for purchase.

7
00:00:57,258 --> 00:01:00,546
And so remember our purchase basically has a relationship

8
00:01:00,546 --> 00:01:03,460
to our customer, shipping address, billing address,

9
00:01:03,460 --> 00:01:06,403
order and collection of order items.

10
00:01:11,330 --> 00:01:14,280
So we'll make use of the lombok annotation here for a data.

11
00:01:17,810 --> 00:01:20,120
And then we'll add our fields here

12
00:01:20,120 --> 00:01:23,140
for customer, shipping address, billing address,

13
00:01:23,140 --> 00:01:26,113
order, and a collection for order items.

14
00:01:43,420 --> 00:01:45,750
And so for our collection of order items

15
00:01:45,750 --> 00:01:47,100
you will make use of a set.

16
00:01:52,303 --> 00:01:53,830
And then for order make sure you import

17
00:01:53,830 --> 00:01:56,040
the correct class and a luv2code.

18
00:01:59,164 --> 00:02:01,093
And a similar thing here for address.

19
00:02:11,790 --> 00:02:14,840
Alrighty, so that looks pretty good.

20
00:02:14,840 --> 00:02:16,450
Now, one thing that you may notice is

21
00:02:16,450 --> 00:02:19,850
that in the code we use a set for a collection

22
00:02:19,850 --> 00:02:22,720
and in the diagrams a square bracket for array.

23
00:02:22,720 --> 00:02:25,640
But here really it's just a collection

24
00:02:25,640 --> 00:02:28,940
so think of a collection as a generic term.

25
00:02:28,940 --> 00:02:33,117
When we actually pass this over the wire using a REST API

26
00:02:33,117 --> 00:02:36,050
and JSON, JSON'll basically take those collections

27
00:02:36,050 --> 00:02:38,510
and it'll make use of a JSON array, all right.

28
00:02:38,510 --> 00:02:40,840
But we can easily go between the two,

29
00:02:40,840 --> 00:02:43,940
JSON array to a set, a set to a JSON array,

30
00:02:43,940 --> 00:02:45,693
that works with no problem.

31
00:02:52,160 --> 00:02:53,450
And now what we'll do is we'll create a new

32
00:02:53,450 --> 00:02:55,213
Java class PurchaseResponse.

33
00:03:10,613 --> 00:03:12,750
And so we'll use this class to send back

34
00:03:12,750 --> 00:03:14,633
a Java object as JSON.

35
00:03:16,270 --> 00:03:20,450
And so I'll make use of the @ data annotation from lombok.

36
00:03:20,450 --> 00:03:21,800
This class is very simple.

37
00:03:21,800 --> 00:03:24,420
It will simply have the order tracking number

38
00:03:24,420 --> 00:03:25,743
here as a string.

39
00:03:29,270 --> 00:03:30,103
And that's it.

40
00:03:30,103 --> 00:03:32,660
And so once we get into writing the service code

41
00:03:32,660 --> 00:03:35,160
you'll see how we'll use this purchase response.

42
00:03:35,160 --> 00:03:36,830
But for right now, we just have it set

43
00:03:36,830 --> 00:03:39,400
up as a data transfer object for us.

44
00:03:39,400 --> 00:03:40,920
So again, looks pretty good.

45
00:03:40,920 --> 00:03:41,753
Good job.

