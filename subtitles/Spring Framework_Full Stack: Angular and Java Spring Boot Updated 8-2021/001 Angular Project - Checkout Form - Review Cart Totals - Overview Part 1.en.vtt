WEBVTT
1
00:00:00.867 --> 00:00:02.440
<v Instructor>In this video, we'll continue</v>

2
00:00:02.440 --> 00:00:05.653
with our checkout form and we'll review cart totals.

3
00:00:09.580 --> 00:00:13.110
So our forum currently has a section for cart totals

4
00:00:13.110 --> 00:00:15.047
and you've seen this already in our checkout

5
00:00:15.047 --> 00:00:18.380
and we need to add the appropriate code to support this

6
00:00:18.380 --> 00:00:20.100
because right now we have a problem,

7
00:00:20.100 --> 00:00:22.630
the total quantity is zero and the price is zero

8
00:00:22.630 --> 00:00:24.193
and we need to update that.

9
00:00:27.100 --> 00:00:27.933
Now let's take a look

10
00:00:27.933 --> 00:00:31.357
at our cart service publishing messages and events.

11
00:00:31.357 --> 00:00:33.180
So recall that we send messages

12
00:00:33.180 --> 00:00:35.650
and events to other components in our application.

13
00:00:35.650 --> 00:00:38.550
For example, the cart status component will subscribe

14
00:00:38.550 --> 00:00:39.940
to the cart service,

15
00:00:39.940 --> 00:00:42.390
and the cart service will publish messages

16
00:00:42.390 --> 00:00:45.773
for, the total price and the total quantity.

17
00:00:49.750 --> 00:00:53.100
And we've already implemented pub, sub in our application.

18
00:00:53.100 --> 00:00:54.210
The next set of slides

19
00:00:54.210 --> 00:00:57.120
I'm simply just going to do a refresher, a review

20
00:00:57.120 --> 00:00:59.710
of the code that we have in place, because it will apply

21
00:00:59.710 --> 00:01:01.400
to the new things that we're going to add

22
00:01:01.400 --> 00:01:02.683
to the checkout form.

23
00:01:05.120 --> 00:01:07.330
So remember in our application interaction,

24
00:01:07.330 --> 00:01:08.910
we have our product list component

25
00:01:08.910 --> 00:01:09.990
in the top left,

26
00:01:09.990 --> 00:01:12.237
we have our cart status component in the top right,

27
00:01:12.237 --> 00:01:15.690
and then down in the center we have our cart service.

28
00:01:15.690 --> 00:01:17.467
And so our cart status component will subscribe

29
00:01:17.467 --> 00:01:20.399
to the cart service for events.

30
00:01:20.399 --> 00:01:22.816
We'll add some items to our shopping cart

31
00:01:22.816 --> 00:01:26.186
that'll send data over to the cart service.

32
00:01:26.186 --> 00:01:28.790
And then the cart service will publish those events

33
00:01:28.790 --> 00:01:30.670
to all subscribers.

34
00:01:30.670 --> 00:01:33.410
So since the cart status component is a subscriber,

35
00:01:33.410 --> 00:01:36.580
it'll read those events and update the user interface

36
00:01:36.580 --> 00:01:38.620
for the total price and quantity.

37
00:01:38.620 --> 00:01:41.020
And again, we already have this functionality in place.

38
00:01:41.020 --> 00:01:42.733
This is simply a quick refresher.

39
00:01:45.110 --> 00:01:47.800
So let's look at the coding here for the cart service.

40
00:01:47.800 --> 00:01:49.800
So in the cart service we have a subject

41
00:01:49.800 --> 00:01:53.190
for total price and a subject for a total quantity.

42
00:01:53.190 --> 00:01:56.750
And so remember, a subject is a subclass of observable.

43
00:01:56.750 --> 00:01:59.120
We can use the subject to publish events

44
00:01:59.120 --> 00:01:59.953
in our code,

45
00:01:59.953 --> 00:02:02.403
and the event will be sent to all subscribers.

46
00:02:03.270 --> 00:02:04.780
And so this cart status component,

47
00:02:04.780 --> 00:02:08.503
they simply subscribe to events on these given subjects.

48
00:02:11.530 --> 00:02:14.280
So now with the cart service we actually publish events.

49
00:02:14.280 --> 00:02:15.113
So in our cart service

50
00:02:15.113 --> 00:02:17.200
we had this method, compute cart totals.

51
00:02:17.200 --> 00:02:19.593
We'd set up a price and a quantity value.

52
00:02:19.593 --> 00:02:21.570
We'd simply build all for loop

53
00:02:21.570 --> 00:02:22.700
through all of our cart items

54
00:02:22.700 --> 00:02:25.963
to compute the totals, doing the math accordingly.

55
00:02:25.963 --> 00:02:27.956
And then we publish the new values

56
00:02:27.956 --> 00:02:31.280
so all subscribers will receive the new data.

57
00:02:31.280 --> 00:02:32.140
So at the bottom here

58
00:02:32.140 --> 00:02:36.503
I have this.totalprice.next, totalpricevalue,

59
00:02:36.503 --> 00:02:39.620
this.totalquantity.next, totalquantityvalue.

60
00:02:39.620 --> 00:02:41.600
So this will actually publish the events

61
00:02:41.600 --> 00:02:43.290
to all subscribers.

62
00:02:43.290 --> 00:02:44.730
One event for total price,

63
00:02:44.730 --> 00:02:46.880
and one even for total quantity.

64
00:02:46.880 --> 00:02:48.940
And so this will kind of accomplish step three here

65
00:02:48.940 --> 00:02:51.683
of publishing those events to all subscribers.

66
00:02:54.570 --> 00:02:56.430
And now a bit more on the cart status component

67
00:02:56.430 --> 00:02:58.338
to subscribe to the cart service.

68
00:02:58.338 --> 00:03:00.167
So in our cart status component,

69
00:03:00.167 --> 00:03:03.423
we have this total price, total quantity.

70
00:03:03.423 --> 00:03:06.773
We simply inject the cart service into the constructor.

71
00:03:07.820 --> 00:03:10.340
We do this update card status,

72
00:03:10.340 --> 00:03:12.830
and then we actually write the code here to subscribe

73
00:03:12.830 --> 00:03:15.390
to those events.

74
00:03:15.390 --> 00:03:17.855
So I've subscribed to the cart status with total price

75
00:03:17.855 --> 00:03:20.853
by saying cartservice.totalprice.subscribe.

76
00:03:22.070 --> 00:03:23.490
So when those new events are received,

77
00:03:23.490 --> 00:03:26.750
we'll make the assignments to update the UI accordingly.

78
00:03:26.750 --> 00:03:28.693
So that's for total price.

79
00:03:28.693 --> 00:03:32.170
And then we do a similar subscribe for total quantity,

80
00:03:32.170 --> 00:03:33.323
the exact same thing.

81
00:03:34.210 --> 00:03:35.043
Okay.

82
00:03:35.043 --> 00:03:36.350
And again, we already have this coding in place.

83
00:03:36.350 --> 00:03:38.366
Just to give you a quick refresher to kind of get you back

84
00:03:38.366 --> 00:03:39.453
up to speed.

85
00:03:42.680 --> 00:03:44.177
Now using his pub, sub,

86
00:03:44.177 --> 00:03:46.180
we can actually take a similar approach

87
00:03:46.180 --> 00:03:47.440
for the checkout component.

88
00:03:47.440 --> 00:03:49.500
But I'd like to say almost.

89
00:03:49.500 --> 00:03:51.146
So the checkout component is going to subscribe

90
00:03:51.146 --> 00:03:53.200
to events from the cart service.

91
00:03:53.200 --> 00:03:56.891
However, since the checkout component is instantiated later

92
00:03:56.891 --> 00:03:59.289
in the application, we'll actually miss

93
00:03:59.289 --> 00:04:02.820
out on some of the previous messages.

94
00:04:02.820 --> 00:04:05.800
So as a result, this checkout component cart totals,

95
00:04:05.800 --> 00:04:09.057
will erroneously show zero for quantity,

96
00:04:09.057 --> 00:04:10.680
and zero for price.

97
00:04:10.680 --> 00:04:12.490
And that's not good.

98
00:04:12.490 --> 00:04:14.320
We somehow need to get a replay

99
00:04:14.320 --> 00:04:16.803
of the messages that we missed earlier.

100
00:04:20.930 --> 00:04:23.300
So we need to have a replay on the messages.

101
00:04:23.300 --> 00:04:25.220
And this is kind of similar to the real world, right?

102
00:04:25.220 --> 00:04:26.200
You're running a meeting,

103
00:04:26.200 --> 00:04:27.240
there's always that one person

104
00:04:27.240 --> 00:04:28.527
on your team who shows up late.

105
00:04:28.527 --> 00:04:30.157
"Hey, sorry I'm late to the meeting.

106
00:04:30.157 --> 00:04:31.660
"Can you tell me what I missed?"

107
00:04:31.660 --> 00:04:32.697
And then you're like,

108
00:04:32.697 --> 00:04:33.530
"Oh gosh!

109
00:04:33.530 --> 00:04:34.363
"Really?

110
00:04:34.363 --> 00:04:36.750
"Show up on time next time."

111
00:04:36.750 --> 00:04:38.350
But anyways, we'll be nice.

112
00:04:38.350 --> 00:04:39.183
I'll say, "Okay, great.

113
00:04:39.183 --> 00:04:41.630
"We'll replay the previous messages for you."

114
00:04:41.630 --> 00:04:42.558
Okay?

115
00:04:42.558 --> 00:04:43.610
And so we can get this functionality

116
00:04:43.610 --> 00:04:45.773
with the replay subject.

117
00:04:49.203 --> 00:04:50.370
Mmh, replay subject.

118
00:04:50.370 --> 00:04:54.780
So recall the subject is used to send events to subscribers

119
00:04:54.780 --> 00:04:58.510
so the replay subject is a subclass of subject.

120
00:04:58.510 --> 00:05:01.120
So it'll also replay events

121
00:05:01.120 --> 00:05:03.400
for new subscribers who join later.

122
00:05:03.400 --> 00:05:05.970
It actually keeps a buffer of the previous events

123
00:05:05.970 --> 00:05:08.620
and will send these to the new subscribers.

124
00:05:08.620 --> 00:05:10.097
So this'll cover that case of,

125
00:05:10.097 --> 00:05:11.527
"Hey, sorry I'm late to the meeting.

126
00:05:11.527 --> 00:05:12.950
"Can you tell me what I missed?"

127
00:05:12.950 --> 00:05:14.417
And we'll be like, "Hey, no problem.

128
00:05:14.417 --> 00:05:15.597
"We got you covered.

129
00:05:15.597 --> 00:05:16.500
"This meeting is being recorded

130
00:05:16.500 --> 00:05:20.430
"and here's a replay of everything that you missed."

131
00:05:20.430 --> 00:05:22.940
We're going to be really nice at this meeting.

132
00:05:22.940 --> 00:05:26.720
(instructor chuckles)

133
00:05:26.720 --> 00:05:29.810
Now let's look at how a subject works without replay.

134
00:05:29.810 --> 00:05:31.893
Okay, so we're doing this without replay.

135
00:05:33.090 --> 00:05:33.923
So in the top left

136
00:05:33.923 --> 00:05:36.920
I have the cart service, total price, subject.

137
00:05:36.920 --> 00:05:38.913
We have our timeline going left to right.

138
00:05:38.913 --> 00:05:41.110
We have our card status component

139
00:05:41.110 --> 00:05:44.730
that'll subscribe to the total price subject.

140
00:05:44.730 --> 00:05:47.750
Then we do some operations on our shopping cart.

141
00:05:47.750 --> 00:05:49.847
We have some events coming through for A,

142
00:05:49.847 --> 00:05:53.211
and then we have another set of events coming through for B.

143
00:05:53.211 --> 00:05:56.574
And so later on we'll instantiate the checkout component

144
00:05:56.574 --> 00:05:58.941
and it'll actually subscribe.

145
00:05:58.941 --> 00:06:02.344
And so it'll only receive the new events

146
00:06:02.344 --> 00:06:04.730
after subscribing, right?

147
00:06:04.730 --> 00:06:06.860
So we don't have any replay in place.

148
00:06:06.860 --> 00:06:08.353
We're not recording the meeting so,

149
00:06:08.353 --> 00:06:09.186
"Sorry.

150
00:06:09.186 --> 00:06:11.657
"We can only tell you about the new stuff that happens

151
00:06:11.657 --> 00:06:13.710
"since you've been here at the meeting."

152
00:06:13.710 --> 00:06:14.543
All right?

153
00:06:14.543 --> 00:06:16.873
So that's how subject works without replay.

154
00:06:20.090 --> 00:06:21.670
But again, let's be nice here

155
00:06:21.670 --> 00:06:23.360
and let's record the meeting here.

156
00:06:23.360 --> 00:06:25.330
So we'll have this replay subject.

157
00:06:25.330 --> 00:06:28.110
So again, up top we have our cart service, total price.

158
00:06:28.110 --> 00:06:30.510
The one thing that's new, it's a replay subject.

159
00:06:32.115 --> 00:06:34.100
We have our cart status component

160
00:06:34.100 --> 00:06:35.819
that will actually subscribe.

161
00:06:35.819 --> 00:06:40.013
So we get these events A and these events B.

162
00:06:43.436 --> 00:06:46.270
And then we have our checkout component

163
00:06:46.270 --> 00:06:49.130
and this checkout component subscribes late.

164
00:06:49.130 --> 00:06:51.710
But no worries here.

165
00:06:51.710 --> 00:06:55.160
Replay events for new subscribers who join later.

166
00:06:55.160 --> 00:06:57.840
So they're going to receive these because of the replay

167
00:06:57.840 --> 00:07:00.000
because this meeting is being recorded.

168
00:07:00.000 --> 00:07:01.910
So they'll get those items A-OK.

169
00:07:01.910 --> 00:07:03.410
So those will cover the use case

170
00:07:03.410 --> 00:07:04.974
if they show up to the meeting late

171
00:07:04.974 --> 00:07:07.850
and they need to find out what they missed.

172
00:07:07.850 --> 00:07:08.683
And then of course

173
00:07:08.683 --> 00:07:11.770
they'll get all the new events that come on online too.

174
00:07:11.770 --> 00:07:13.800
That's kind of how the replay subject works

175
00:07:13.800 --> 00:07:14.700
and how it's different

176
00:07:14.700 --> 00:07:18.063
than the normal subject without replay.

177
00:07:21.048 --> 00:07:22.453
So now, as far as the coding changes

178
00:07:22.453 --> 00:07:23.970
to use a replay subject,

179
00:07:23.970 --> 00:07:25.240
it's really simple.

180
00:07:25.240 --> 00:07:26.530
In your cart service,

181
00:07:26.530 --> 00:07:27.640
instead of having subject,

182
00:07:27.640 --> 00:07:29.960
you simply change that to replay subject.

183
00:07:29.960 --> 00:07:30.793
And that's it.

184
00:07:30.793 --> 00:07:32.860
It'll keep a buffer of the previous events

185
00:07:32.860 --> 00:07:36.480
and it'll send those previous events to all new subscribers.

186
00:07:36.480 --> 00:07:37.670
And you can also configure this.

187
00:07:37.670 --> 00:07:41.453
You can tell it the size of the buffer, so on and so forth.

188
00:07:45.200 --> 00:07:47.181
And so for more details on replay subject,

189
00:07:47.181 --> 00:07:50.250
see the online docs, go to the link here on the slide.

190
00:07:50.250 --> 00:07:51.150
It'll redirect you

191
00:07:51.150 --> 00:07:54.030
to the official documentation for replay subjects

192
00:07:54.030 --> 00:07:56.330
and you can get all the configuration details.

