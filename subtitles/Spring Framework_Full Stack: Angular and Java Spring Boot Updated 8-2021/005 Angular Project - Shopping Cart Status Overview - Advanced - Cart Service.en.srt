1
00:00:01,690 --> 00:00:02,580
<v Instructor>Alright, so here's the code</v>

2
00:00:02,580 --> 00:00:04,563
here for our compute cart totals.

3
00:00:06,110 --> 00:00:08,580
This is very basic, we're simply going to walk through

4
00:00:08,580 --> 00:00:10,440
or loop through all of the cart items

5
00:00:10,440 --> 00:00:12,150
and just compute the totals here.

6
00:00:12,150 --> 00:00:15,910
So for let currentCartItem of this.cartItems

7
00:00:16,776 --> 00:00:17,609
and I have

8
00:00:17,609 --> 00:00:21,767
totalPriceValue += currentCartItems.quantity

9
00:00:21,767 --> 00:00:23,067
*currentCartItem.unitPrice

10
00:00:25,070 --> 00:00:26,911
and then the quantity simply,

11
00:00:26,911 --> 00:00:29,540
+=currentCartItem.quantity

12
00:00:32,050 --> 00:00:34,670
And so now the real word here is publishing the new value,

13
00:00:34,670 --> 00:00:37,200
so all subscribers will receive the new data.

14
00:00:37,200 --> 00:00:40,250
So we will say this.totalprice.next,

15
00:00:40,250 --> 00:00:43,014
and then we pass in total price value,

16
00:00:43,014 --> 00:00:45,853
totalquantity.next, total quantity value.

17
00:00:47,760 --> 00:00:50,820
So again, it publishes the events to all subscribers.

18
00:00:50,820 --> 00:00:52,930
It'll send one event for total price,

19
00:00:52,930 --> 00:00:56,380
one event for total quantity, and this.next method,

20
00:00:56,380 --> 00:00:58,650
that's the method that'll actually publish

21
00:00:58,650 --> 00:01:00,150
or send the event.

22
00:01:00,150 --> 00:01:03,430
That's the code that will actually generate or emit,

23
00:01:03,430 --> 00:01:05,593
or publish this actual event.

24
00:01:07,190 --> 00:01:09,640
So note here, we call the .next method twice.

25
00:01:09,640 --> 00:01:11,663
So we get two separate events.

26
00:01:15,010 --> 00:01:17,310
And again, just remembering our application interaction,

27
00:01:17,310 --> 00:01:19,500
so this card status component, a subscribe,

28
00:01:19,500 --> 00:01:21,070
the cart service, we did some work

29
00:01:21,070 --> 00:01:23,730
and then we publish events to all subscribers.

30
00:01:23,730 --> 00:01:27,440
So the cart status component will now get this event

31
00:01:27,440 --> 00:01:29,220
of this new data that we just sent out

32
00:01:29,220 --> 00:01:31,543
for total price and total quantity.

33
00:01:37,050 --> 00:01:39,710
So now step three of modifying our product list components

34
00:01:39,710 --> 00:01:41,390
have called the cart service.

35
00:01:41,390 --> 00:01:44,230
So here in our product list component, add to cart.

36
00:01:44,230 --> 00:01:45,840
We have our console.log.

37
00:01:45,840 --> 00:01:48,390
And remember earlier I said you know we had some to do,

38
00:01:48,390 --> 00:01:49,440
do the real work.

39
00:01:49,440 --> 00:01:52,060
Well, one thing we do is we create the cart items,

40
00:01:52,060 --> 00:01:55,380
I have the cart item equals new cart item,

41
00:01:55,380 --> 00:01:56,610
I pass in a product.

42
00:01:56,610 --> 00:01:58,300
So remember, the cart item has information

43
00:01:58,300 --> 00:02:00,450
about the product, along with the quantity.

44
00:02:03,160 --> 00:02:06,650
So here I have this cart service, I say, add to cart,

45
00:02:06,650 --> 00:02:10,323
I pass in the cart items, I'm calling that cart service.

46
00:02:12,680 --> 00:02:14,510
So that's kind of the step two there of the product

47
00:02:14,510 --> 00:02:16,980
list component, calling Add To Cart

48
00:02:16,980 --> 00:02:18,563
on the actual cart service.

49
00:02:25,520 --> 00:02:28,020
So now step four of enhancing the cart says components

50
00:02:28,020 --> 00:02:30,630
to subscribe to the cart service.

51
00:02:30,630 --> 00:02:31,770
Alright, so we have to subscribe.

52
00:02:31,770 --> 00:02:33,660
So here's our cart status component.

53
00:02:33,660 --> 00:02:37,320
We set up some values here for total price, total quantity.

54
00:02:37,320 --> 00:02:39,760
For the constructor, we inject our cart service

55
00:02:42,230 --> 00:02:46,050
and our ngOnInit method, we call this.updatecartstatus.

56
00:02:48,206 --> 00:02:50,560
And so on our update card status method will actually

57
00:02:50,560 --> 00:02:52,200
subscribe for events.

58
00:02:52,200 --> 00:02:55,990
So here I say this.cartservice.total price, subscribe,

59
00:02:55,990 --> 00:02:57,390
so I'm going to subscribe

60
00:02:57,390 --> 00:03:00,643
to the cart status total price property.

61
00:03:02,900 --> 00:03:04,720
And so then when new events are received,

62
00:03:04,720 --> 00:03:07,460
we simply make the assignments to update the UI.

63
00:03:07,460 --> 00:03:09,670
So here, whatever data comes back, I say,

64
00:03:09,670 --> 00:03:11,600
this.totalprice = data.

65
00:03:11,600 --> 00:03:14,230
That's data that's being sent from the

66
00:03:14,230 --> 00:03:17,263
actual cart service or published by the cart service.

67
00:03:19,930 --> 00:03:22,190
And I'd do a similar thing here for total quantities.

68
00:03:22,190 --> 00:03:25,890
So data again, that's being sent over, we receive it,

69
00:03:25,890 --> 00:03:27,620
and then we assign it accordingly.

70
00:03:27,620 --> 00:03:29,863
So we can update our user interface.

71
00:03:34,700 --> 00:03:36,600
Alrighty, so we're almost done here,

72
00:03:36,600 --> 00:03:39,050
step five of updating our cart status component,

73
00:03:39,050 --> 00:03:42,880
HTML to display the cart total price and quantity.

74
00:03:42,880 --> 00:03:45,550
So in our HTML page here for our card status,

75
00:03:45,550 --> 00:03:47,300
we simply make reference to total price,

76
00:03:47,300 --> 00:03:50,260
we pipe it through currency, and then for total quantity

77
00:03:50,260 --> 00:03:52,350
we added here, and this will show up

78
00:03:52,350 --> 00:03:55,300
in our actual cart status component dynamically.

79
00:03:55,300 --> 00:03:57,030
So no more hard coded data.

80
00:03:57,030 --> 00:03:59,680
We're actually making use of data from the component.

81
00:04:01,110 --> 00:04:03,300
So now remember our application interaction,

82
00:04:03,300 --> 00:04:04,680
the card service is going to publish

83
00:04:04,680 --> 00:04:06,320
events to all subscribers.

84
00:04:06,320 --> 00:04:08,500
We'll get those events and we'll update

85
00:04:08,500 --> 00:04:11,240
the UI for the total price and quantity.

86
00:04:11,240 --> 00:04:14,130
And so we'll see those new updates right there

87
00:04:14,130 --> 00:04:16,370
in our given status component.

88
00:04:16,370 --> 00:04:19,430
All right, I'm getting excited here.

89
00:04:19,430 --> 00:04:20,520
I'm ready to write some code.

90
00:04:20,520 --> 00:04:22,170
So let's go ahead and dive into our IDE

91
00:04:22,170 --> 00:04:23,893
and let's get started.

