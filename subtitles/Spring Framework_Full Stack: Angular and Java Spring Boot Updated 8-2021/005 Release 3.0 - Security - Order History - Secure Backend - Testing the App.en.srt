1
00:00:01,630 --> 00:00:03,630
<v ->Alrighty. So we've done some really</v>

2
00:00:03,630 --> 00:00:05,470
really good work so far, and I'm excited.

3
00:00:05,470 --> 00:00:08,493
I'm ready to test this out and see how this works.

4
00:00:11,240 --> 00:00:12,073
So let's go ahead

5
00:00:12,073 --> 00:00:14,643
and run our Spring Boot e-commerce application.

6
00:00:20,790 --> 00:00:23,450
Okay. So our app is up and running

7
00:00:23,450 --> 00:00:25,450
and I'll test this using Postman.

8
00:00:25,450 --> 00:00:27,793
So let's go ahead and run Postman right now.

9
00:00:35,650 --> 00:00:37,443
Okay. So we're in Postman.

10
00:00:38,530 --> 00:00:40,143
Let me expand real quick.

11
00:00:41,340 --> 00:00:45,600
And we want to make sure that this endpoint is protected.

12
00:00:45,600 --> 00:00:47,880
So it should be protected right now

13
00:00:47,880 --> 00:00:50,670
the slash API slash orders.

14
00:00:50,670 --> 00:00:53,690
So let's go ahead and send over a request for this API

15
00:00:53,690 --> 00:00:54,810
and see what happens

16
00:00:56,650 --> 00:00:59,390
and take a look at the status.

17
00:00:59,390 --> 00:01:00,490
So this is successful.

18
00:01:00,490 --> 00:01:01,970
So the end point is protected.

19
00:01:01,970 --> 00:01:05,280
We get a 401 Unauthorized.

20
00:01:05,280 --> 00:01:06,113
All right.

21
00:01:06,113 --> 00:01:08,080
So basically saying, Hey, this particular person

22
00:01:08,080 --> 00:01:12,060
is not authorized to access this given end point.

23
00:01:12,060 --> 00:01:12,970
So it's secure.

24
00:01:12,970 --> 00:01:13,803
So that's great.

25
00:01:13,803 --> 00:01:15,360
I like it.

26
00:01:15,360 --> 00:01:17,350
But now one thing I'd like to do here is that

27
00:01:17,350 --> 00:01:19,140
notice that the body is empty.

28
00:01:19,140 --> 00:01:19,973
There's nothing there

29
00:01:19,973 --> 00:01:21,950
Will it get a status code?

30
00:01:21,950 --> 00:01:23,820
It'd be nice if we could see a friendly

31
00:01:23,820 --> 00:01:28,280
401 message right here in the response body.

32
00:01:28,280 --> 00:01:29,470
And we can do that by making use

33
00:01:29,470 --> 00:01:31,430
of a little special feature provided

34
00:01:31,430 --> 00:01:34,053
by the Okta Spring Boot Starter.

35
00:01:35,120 --> 00:01:38,850
So I'll kind of swing back here into IntelliJ

36
00:01:38,850 --> 00:01:42,003
and I'll move into my security configuration class.

37
00:02:06,224 --> 00:02:09,300
And what I'll do here is I'll force a non-empty response

38
00:02:09,300 --> 00:02:10,133
about it

39
00:02:10,133 --> 00:02:12,640
for 401's to make the response more friendly.

40
00:02:12,640 --> 00:02:13,620
And I'll use our feature

41
00:02:13,620 --> 00:02:16,160
from the Okta Spring Boot Starter

42
00:02:16,160 --> 00:02:16,993
So I'll say

43
00:02:16,993 --> 00:02:21,730
Okta dot configure resource server 401 response body

44
00:02:21,730 --> 00:02:23,780
I pass in the HTTP.

45
00:02:23,780 --> 00:02:24,860
And again, this is

46
00:02:24,860 --> 00:02:28,053
from the Okta Spring Boot Starter project.

47
00:02:29,550 --> 00:02:32,863
And we've already added the support via the pom.xml.

48
00:02:39,240 --> 00:02:41,900
And what this will do is now when we make a request

49
00:02:41,900 --> 00:02:43,060
and it's a 401

50
00:02:43,060 --> 00:02:46,280
we'll also see this 401 in the body.

51
00:02:46,280 --> 00:02:48,540
So how the normal HTTP status code

52
00:02:48,540 --> 00:02:51,160
but we'll also see this in the actual body just

53
00:02:51,160 --> 00:02:53,333
to make it a bit more friendly for us.

54
00:02:55,010 --> 00:02:57,523
So let's go ahead and run our application again.

55
00:03:02,322 --> 00:03:03,155
And now I'll swing back

56
00:03:03,155 --> 00:03:05,873
into Postman and I'll submit this request again.

57
00:03:10,890 --> 00:03:12,910
So we get the status 401.

58
00:03:12,910 --> 00:03:16,330
The response is more friendly since it has a response body.

59
00:03:16,330 --> 00:03:18,820
So it's just easier to see without having to worry

60
00:03:18,820 --> 00:03:21,310
about just the actual status code itself.

61
00:03:21,310 --> 00:03:22,250
And this is very useful

62
00:03:22,250 --> 00:03:25,173
if you try and access this via a web browser.

63
00:03:28,000 --> 00:03:31,820
So let me just actually copy this endpoint

64
00:03:34,460 --> 00:03:38,003
and then move into a web browser and test it out.

65
00:03:40,430 --> 00:03:44,710
So in this browser, I'll just drop in that endpoint

66
00:03:44,710 --> 00:03:48,450
and then notice here we have 401 Unauthorized.

67
00:03:48,450 --> 00:03:49,283
So that's good.

68
00:03:49,283 --> 00:03:51,000
So we're able to see it right here

69
00:03:51,000 --> 00:03:52,753
in the body of the response.

70
00:03:52,753 --> 00:03:55,803
So this is good for troubleshooting and debugging.

71
00:03:57,620 --> 00:03:58,750
And I like to check some

72
00:03:58,750 --> 00:04:00,940
of my other endpoints that are already out there

73
00:04:00,940 --> 00:04:03,050
just to make sure that they are still available.

74
00:04:03,050 --> 00:04:07,380
So slash API slash products, that's a public API.

75
00:04:07,380 --> 00:04:10,410
There's no protection on it so we can access this

76
00:04:10,410 --> 00:04:12,350
a-okay just fine.

77
00:04:12,350 --> 00:04:13,183
All right.

78
00:04:13,183 --> 00:04:14,182
So that's fine.

79
00:04:14,182 --> 00:04:15,490
It's, it's publicly assessable.

80
00:04:15,490 --> 00:04:16,670
The only thing that we secured

81
00:04:16,670 --> 00:04:20,440
at the moment was simply our slash API slash orders.

82
00:04:20,440 --> 00:04:22,150
So that's the one that's secured

83
00:04:22,150 --> 00:04:24,380
and only can access it if you're logged in.

84
00:04:24,380 --> 00:04:26,870
So just showing you that we can provide very

85
00:04:26,870 --> 00:04:29,580
fine grain security on certain end points

86
00:04:29,580 --> 00:04:33,270
and not apply it to the entire application.

87
00:04:33,270 --> 00:04:35,230
And you can change those rules accordingly

88
00:04:35,230 --> 00:04:37,453
based on your application requirements.

89
00:04:39,500 --> 00:04:41,310
Now, one thing I like to do is actually

90
00:04:41,310 --> 00:04:43,684
run the Angular application right now

91
00:04:43,684 --> 00:04:48,260
and see how the Angular works with this protected backend.

92
00:04:48,260 --> 00:04:52,154
So a spoiler alert here, it's not going to work as desired

93
00:04:52,154 --> 00:04:55,420
but we'll kind of dig through and see, you know, exactly

94
00:04:55,420 --> 00:04:57,960
what's going on because there's more work we'll have to do

95
00:04:57,960 --> 00:04:58,820
to the Angular app,

96
00:04:58,820 --> 00:05:00,780
but let's just kind of see where we're at

97
00:05:00,780 --> 00:05:01,993
at this given moment.

98
00:05:06,380 --> 00:05:07,700
I'm in a terminal window here

99
00:05:07,700 --> 00:05:09,663
starting at my Angular application.

100
00:05:19,500 --> 00:05:21,840
So the Angular app is up and running.

101
00:05:21,840 --> 00:05:23,353
Take a look at my browser.

102
00:05:26,440 --> 00:05:27,453
Visit my app.

103
00:05:33,120 --> 00:05:34,820
and then I'll go ahead and log in.

104
00:05:44,120 --> 00:05:47,330
Okay. So I'm logged into the application a-okay.

105
00:05:47,330 --> 00:05:48,780
It's demo derby.

106
00:05:48,780 --> 00:05:50,200
I can click on orders

107
00:05:52,130 --> 00:05:53,030
and

108
00:05:54,580 --> 00:05:56,230
no orders found.

109
00:05:56,230 --> 00:05:58,423
Well I know I have orders for this account.

110
00:05:59,310 --> 00:06:02,080
Let's go ahead and take a look at our debug console

111
00:06:02,080 --> 00:06:04,023
here in our developer console.

112
00:06:09,150 --> 00:06:10,860
So under developer tools

113
00:06:15,400 --> 00:06:16,630
and Oh, wow.

114
00:06:16,630 --> 00:06:18,620
There's a 401 Error

115
00:06:18,620 --> 00:06:20,490
Hmm, got it.

116
00:06:20,490 --> 00:06:21,323
Got it. Got it.

117
00:06:21,323 --> 00:06:22,156
So

118
00:06:23,000 --> 00:06:25,263
401 unauthorized.

119
00:06:26,100 --> 00:06:27,156
All right.

120
00:06:27,156 --> 00:06:29,880
So now that order's API is secured right now

121
00:06:31,020 --> 00:06:32,920
when you see this area, you're wondering, well

122
00:06:32,920 --> 00:06:36,290
why is it 401 unauthorized because we are logged in.

123
00:06:36,290 --> 00:06:37,740
Well, yes, we're logged in

124
00:06:37,740 --> 00:06:40,420
but we're only logged in on the front end.

125
00:06:40,420 --> 00:06:44,390
We haven't passed our access token to the backend.

126
00:06:44,390 --> 00:06:47,350
So at the moment, the backend doesn't know who we are.

127
00:06:47,350 --> 00:06:49,540
So that's why it's saying unauthorized.

128
00:06:49,540 --> 00:06:52,230
We actually have to update the Angular app to

129
00:06:52,230 --> 00:06:56,140
pass the access token with the HTP requests.

130
00:06:56,140 --> 00:06:59,240
And we'll actually cover these details in the next video.

131
00:06:59,240 --> 00:07:01,440
So we have a lot of good things in store.

132
00:07:01,440 --> 00:07:03,663
So I'll see ya in the next video.

