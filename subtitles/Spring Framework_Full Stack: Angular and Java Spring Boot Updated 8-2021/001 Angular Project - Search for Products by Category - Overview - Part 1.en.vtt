WEBVTT
1
00:00:01.290 --> 00:00:02.320
<v Instructor>In this video we'll learn</v>

2
00:00:02.320 --> 00:00:04.773
how to Search for Products by Category.

3
00:00:07.640 --> 00:00:09.300
All righty, so our Release 2.0 Plan

4
00:00:09.300 --> 00:00:10.230
from the Boss,

5
00:00:10.230 --> 00:00:11.900
he gave us this big long list.

6
00:00:11.900 --> 00:00:13.510
So our current task right now

7
00:00:13.510 --> 00:00:16.263
is searching for products by category.

8
00:00:19.060 --> 00:00:20.350
So for this given feature

9
00:00:20.350 --> 00:00:21.670
we'll have our application,

10
00:00:21.670 --> 00:00:23.510
over on the left-hand side we'll have a menu,

11
00:00:23.510 --> 00:00:25.370
a list of links or options here,

12
00:00:25.370 --> 00:00:26.480
and when you select the link

13
00:00:26.480 --> 00:00:29.900
it'll show you the products for that given category.

14
00:00:29.900 --> 00:00:31.930
And the best way to get a idea about this

15
00:00:31.930 --> 00:00:34.000
is to take a look at a demo.

16
00:00:34.000 --> 00:00:36.930
So let me swing over there to my web browser,

17
00:00:36.930 --> 00:00:37.933
love to shop.

18
00:00:38.800 --> 00:00:40.980
And over on the left-hand side we have our links,

19
00:00:40.980 --> 00:00:41.890
so if I select Books,

20
00:00:41.890 --> 00:00:42.900
it gives me a list of books,

21
00:00:42.900 --> 00:00:45.300
I hit Coffee Mugs and I have a list of coffee mugs.

22
00:00:45.300 --> 00:00:47.740
So again, it's actually showing you the products

23
00:00:47.740 --> 00:00:50.360
based on the given category.

24
00:00:50.360 --> 00:00:51.800
So it will show you books

25
00:00:51.800 --> 00:00:53.290
or it will show you coffee mugs

26
00:00:53.290 --> 00:00:54.420
based on those links.

27
00:00:54.420 --> 00:00:55.940
And in a video series coming up here

28
00:00:55.940 --> 00:00:57.380
we'll learn how to write all the code

29
00:00:57.380 --> 00:00:59.510
behind the scenes to make this happen,

30
00:00:59.510 --> 00:01:00.453
to make this work.

31
00:01:05.360 --> 00:01:07.650
All righty, so let's take a look at Angular Routing.

32
00:01:07.650 --> 00:01:10.590
In Angular you can add links in your application.

33
00:01:10.590 --> 00:01:12.520
The links will route to other components

34
00:01:12.520 --> 00:01:13.720
in your application.

35
00:01:13.720 --> 00:01:15.740
Angular routing will handle updating

36
00:01:15.740 --> 00:01:18.110
a view for your application.

37
00:01:18.110 --> 00:01:19.830
And just like the demo I showed you earlier,

38
00:01:19.830 --> 00:01:21.580
we have links over on the left-hand side,

39
00:01:21.580 --> 00:01:22.880
and if you click that link

40
00:01:22.880 --> 00:01:25.030
then a section of the page is updated.

41
00:01:25.030 --> 00:01:28.190
So it'll only update a section of your page,

42
00:01:28.190 --> 00:01:30.750
it doesn't reload the entire page.

43
00:01:30.750 --> 00:01:31.600
All right, so that's the whole idea

44
00:01:31.600 --> 00:01:33.680
of the single page application.

45
00:01:33.680 --> 00:01:37.240
Only makes partial updates to your given page,

46
00:01:37.240 --> 00:01:39.033
and Angular can help us with this.

47
00:01:42.600 --> 00:01:44.360
All righty, so with the Angular Routing here

48
00:01:44.360 --> 00:01:45.950
there's some key components here.

49
00:01:45.950 --> 00:01:48.410
So we have the router, it's the main routing service.

50
00:01:48.410 --> 00:01:50.830
It enables navigation between the views

51
00:01:50.830 --> 00:01:52.360
based on the user actions.

52
00:01:52.360 --> 00:01:54.770
For example clicking on a link.

53
00:01:54.770 --> 00:01:55.730
We also have a route,

54
00:01:55.730 --> 00:01:59.200
so it basically maps a URL path to a component.

55
00:01:59.200 --> 00:02:02.090
There's a RouterOutlet, it acts as a placeholder,

56
00:02:02.090 --> 00:02:04.150
so it renders the desired component

57
00:02:04.150 --> 00:02:06.030
based on the route.

58
00:02:06.030 --> 00:02:07.110
You have the RouterLink,

59
00:02:07.110 --> 00:02:09.290
so that's your link to specific routes

60
00:02:09.290 --> 00:02:10.420
in your application,

61
00:02:10.420 --> 00:02:12.640
kind of like that menu that we saw.

62
00:02:12.640 --> 00:02:14.410
And then we have an ActivatedRoute,

63
00:02:14.410 --> 00:02:16.330
so it's the current active route

64
00:02:16.330 --> 00:02:17.680
that loaded the component.

65
00:02:17.680 --> 00:02:20.410
And this is useful for accessing route parameters.

66
00:02:20.410 --> 00:02:23.020
So for example we can use this to actually access

67
00:02:23.020 --> 00:02:24.450
the category ID

68
00:02:24.450 --> 00:02:27.043
that's passed over by a given router or link.

69
00:02:29.320 --> 00:02:30.760
Now we'll see code examples

70
00:02:30.760 --> 00:02:33.300
of all of these components in the upcoming slides

71
00:02:33.300 --> 00:02:34.360
and so we'll actually write codes

72
00:02:34.360 --> 00:02:36.510
that use all five of these components here.

73
00:02:37.450 --> 00:02:39.460
And there's also more the Angular Routing.

74
00:02:39.460 --> 00:02:42.020
So you can access the the link here on the page

75
00:02:42.020 --> 00:02:43.253
for more details.

76
00:02:47.190 --> 00:02:48.050
All righty so let's go ahead and look

77
00:02:48.050 --> 00:02:49.130
at our Development Process.

78
00:02:49.130 --> 00:02:50.050
So the first thing that we'll do

79
00:02:50.050 --> 00:02:51.710
is we'll define the routes,

80
00:02:51.710 --> 00:02:53.180
then we'll configure the router

81
00:02:53.180 --> 00:02:54.610
based on our routes.

82
00:02:54.610 --> 00:02:56.720
Next we'll define the router outlet,

83
00:02:56.720 --> 00:02:57.930
we'll set up router links

84
00:02:57.930 --> 00:03:01.120
to pass over the category ID parameter.

85
00:03:01.120 --> 00:03:03.360
Next we'll enhance our product list components

86
00:03:03.360 --> 00:03:05.730
to read the category ID parameter.

87
00:03:05.730 --> 00:03:08.380
And we'll also modify our Spring Boot application

88
00:03:08.380 --> 00:03:11.310
because the REST Repository needs a new method

89
00:03:11.310 --> 00:03:14.010
for handling category ID.

90
00:03:14.010 --> 00:03:16.040
And then finally we'll up date our Angular Service

91
00:03:16.040 --> 00:03:19.083
to call the new URL on the Spring Boot app.

92
00:03:22.130 --> 00:03:23.230
All righty so I'm kind of excited,

93
00:03:23.230 --> 00:03:24.650
let's go ahead and dive in here.

94
00:03:24.650 --> 00:03:26.690
So in step one of defining a route.

95
00:03:26.690 --> 00:03:28.730
So a route is a path and a reference

96
00:03:28.730 --> 00:03:29.563
to a component.

97
00:03:29.563 --> 00:03:31.230
So when the user selects the link

98
00:03:31.230 --> 00:03:32.480
for the route path,

99
00:03:32.480 --> 00:03:34.550
Angular will create a new instance

100
00:03:34.550 --> 00:03:35.683
of the component.

101
00:03:36.912 --> 00:03:38.220
And so here I'll set up my routes.

102
00:03:38.220 --> 00:03:40.930
And so the routes are simply a Comma-delimited list

103
00:03:40.930 --> 00:03:42.653
of route items.

104
00:03:43.880 --> 00:03:46.540
They specify the actual path to match.

105
00:03:46.540 --> 00:03:48.160
And then when the path matches

106
00:03:48.160 --> 00:03:49.620
it's going to create a new instance

107
00:03:49.620 --> 00:03:51.380
of a given component.

108
00:03:51.380 --> 00:03:52.560
So in this example,

109
00:03:52.560 --> 00:03:53.710
when they go for products

110
00:03:53.710 --> 00:03:55.900
then we'll create a new product list component

111
00:03:55.900 --> 00:03:57.160
and pass the appropriate data

112
00:03:57.160 --> 00:03:59.110
to that product list component.

113
00:03:59.110 --> 00:04:00.360
Now, one thing to make note here

114
00:04:00.360 --> 00:04:03.950
is that the path has no leading slashes all right,

115
00:04:03.950 --> 00:04:06.150
Angular will handle that part of it for you.

116
00:04:10.300 --> 00:04:12.300
We can also add a route to show products

117
00:04:12.300 --> 00:04:14.950
for a given category ID.

118
00:04:14.950 --> 00:04:16.590
So here I have my routes,

119
00:04:16.590 --> 00:04:21.120
and I have this entry here for category/:id.

120
00:04:21.120 --> 00:04:23.900
So this says that the category ID is a parameter.

121
00:04:23.900 --> 00:04:25.900
The component can read this later on

122
00:04:25.900 --> 00:04:28.653
and show products for this given category.

123
00:04:31.844 --> 00:04:33.620
And we can also add more routes

124
00:04:33.620 --> 00:04:36.180
to handle for other cases.

125
00:04:36.180 --> 00:04:38.210
So here's my list of routes.

126
00:04:38.210 --> 00:04:40.450
Note here entries number two and three,

127
00:04:40.450 --> 00:04:42.340
this is for category products,

128
00:04:42.340 --> 00:04:44.550
there's no category ID given,

129
00:04:44.550 --> 00:04:46.440
so internally the component will use

130
00:04:46.440 --> 00:04:48.260
the default category ID.

131
00:04:48.260 --> 00:04:49.760
And I'll show you how to write the code

132
00:04:49.760 --> 00:04:52.513
for this to handle this given scenario.

133
00:04:54.690 --> 00:04:56.610
And then also here I have path,

134
00:04:56.610 --> 00:04:58.070
so no path is given.

135
00:04:58.070 --> 00:04:59.320
So here we say,

136
00:04:59.320 --> 00:05:01.840
it's simply going to redirect to /products.

137
00:05:01.840 --> 00:05:04.070
Now notice here,

138
00:05:04.070 --> 00:05:06.010
this is one exception to the rule

139
00:05:06.010 --> 00:05:08.020
about no leading slashes.

140
00:05:08.020 --> 00:05:09.340
So when you do a redirect

141
00:05:09.340 --> 00:05:11.240
then you can make use leading slashes

142
00:05:11.240 --> 00:05:13.263
to access a given route.

143
00:05:15.940 --> 00:05:17.720
And then also the path match,

144
00:05:17.720 --> 00:05:20.640
this basically tells us how should we match on the path,

145
00:05:20.640 --> 00:05:24.720
so here full means to match on this path exactly.

146
00:05:24.720 --> 00:05:26.210
Now the default option is prefix,

147
00:05:26.210 --> 00:05:28.490
which means match if the path starts

148
00:05:28.490 --> 00:05:30.230
with a given value,

149
00:05:30.230 --> 00:05:32.230
but in this case we want to match exactly.

150
00:05:35.110 --> 00:05:37.940
And the final item here is the generic wildcard,

151
00:05:37.940 --> 00:05:39.500
we use the star, star, for this.

152
00:05:39.500 --> 00:05:41.410
So this will match on anything

153
00:05:41.410 --> 00:05:43.750
that didn't match the above routes.

154
00:05:43.750 --> 00:05:45.740
So this is kind of like your else case

155
00:05:45.740 --> 00:05:47.983
if nothing else matched up above.

156
00:05:50.410 --> 00:05:51.730
Now one thing to be aware here

157
00:05:51.730 --> 00:05:53.900
is that the order of the routes is important.

158
00:05:53.900 --> 00:05:55.890
So the first match wins,

159
00:05:55.890 --> 00:05:57.190
going top down.

160
00:05:57.190 --> 00:05:58.400
So when you define your routes

161
00:05:58.400 --> 00:06:00.690
you should start from the most specific route

162
00:06:00.690 --> 00:06:03.343
all the way down to the generic route.

163
00:06:06.130 --> 00:06:07.180
And you can also add

164
00:06:07.180 --> 00:06:10.920
a custom PageNotFoundComponent for 404s.

165
00:06:10.920 --> 00:06:12.690
So in case the user gives something

166
00:06:12.690 --> 00:06:14.020
that doesn't match,

167
00:06:14.020 --> 00:06:16.390
instead of redirecting to the main page,

168
00:06:16.390 --> 00:06:19.630
you could say, "Hey send this to my PageNotFoundComponent.

169
00:06:19.630 --> 00:06:21.810
Now this is a custom component

170
00:06:21.810 --> 00:06:23.210
that you create.

171
00:06:23.210 --> 00:06:24.920
You can give it any name,

172
00:06:24.920 --> 00:06:27.300
and you can provide your own custom view.

173
00:06:27.300 --> 00:06:28.740
So it's totally up to you

174
00:06:28.740 --> 00:06:30.370
as far as how you want to handle

175
00:06:30.370 --> 00:06:31.723
this given scenario.

176
00:06:32.910 --> 00:06:34.490
So one thing to be aware of here,

177
00:06:34.490 --> 00:06:36.960
be sure to place this last, because remember,

178
00:06:36.960 --> 00:06:38.950
the order of routes is important,

179
00:06:38.950 --> 00:06:42.010
so the first match wins going top down.

180
00:06:42.010 --> 00:06:43.190
So when you write your routes,

181
00:06:43.190 --> 00:06:44.980
start from the most specific

182
00:06:44.980 --> 00:06:46.303
to the generic.

183
00:06:48.010 --> 00:06:49.270
And if you like to see examples

184
00:06:49.270 --> 00:06:51.150
of how to create a custom component

185
00:06:51.150 --> 00:06:53.040
for this PageNotFound,

186
00:06:53.040 --> 00:06:55.803
then go to the link here that I have on the slide.

