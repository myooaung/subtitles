WEBVTT
1
00:00:01.380 --> 00:00:02.213
<v Instructor>In this video,</v>

2
00:00:02.213 --> 00:00:05.410
we'll cover steps two and three of refactoring the interface

3
00:00:05.410 --> 00:00:08.493
and then adding pagination support to the product service.

4
00:00:12.120 --> 00:00:14.320
Alrighty so just swinging back into our IDE.

5
00:00:23.640 --> 00:00:26.130
Alrighty so remember what the response Metadata,

6
00:00:26.130 --> 00:00:28.120
we have information there for pagination.

7
00:00:28.120 --> 00:00:30.330
We need to take this data and actually support

8
00:00:30.330 --> 00:00:31.840
it in our given interface.

9
00:00:31.840 --> 00:00:34.200
And so we'll refactor our interface to have support

10
00:00:34.200 --> 00:00:36.623
for these given Metadata elements.

11
00:00:40.370 --> 00:00:44.150
Alrighty so that interfaces in the file productservice.ts

12
00:00:49.620 --> 00:00:51.700
and I'll simply move down to the bottom of the file

13
00:00:51.700 --> 00:00:53.730
where those interfaces are defined.

14
00:00:53.730 --> 00:00:54.900
And so the one that we're working on here

15
00:00:54.900 --> 00:00:56.733
is, get response products,

16
00:00:58.320 --> 00:01:00.860
and I'll simply add new properties here

17
00:01:00.860 --> 00:01:03.343
for that response Metadata.

18
00:01:09.030 --> 00:01:10.770
Oops, I have a small typo there.

19
00:01:10.770 --> 00:01:14.730
I need to fix that, it's a comma instead of a semi-colon.

20
00:01:14.730 --> 00:01:15.830
Okay, that looks good.

21
00:01:27.060 --> 00:01:28.100
All right, this looks pretty good.

22
00:01:28.100 --> 00:01:30.570
So we have a property here for the size of the page,

23
00:01:30.570 --> 00:01:31.690
We have total elements,

24
00:01:31.690 --> 00:01:33.530
that's the grand total of all elements.

25
00:01:33.530 --> 00:01:36.330
But again, we're not returning everything, just account.

26
00:01:36.330 --> 00:01:38.080
We have the total pages available,

27
00:01:38.080 --> 00:01:40.930
and then we also have the current page number

28
00:01:40.930 --> 00:01:42.940
that we're using or accessing.

29
00:01:42.940 --> 00:01:43.970
All right, so this looks pretty good

30
00:01:43.970 --> 00:01:46.490
as far as refactoring that interface of support,

31
00:01:46.490 --> 00:01:48.533
this pagination data, good job.

32
00:01:58.150 --> 00:02:00.170
Alrighty, so in step three is that we need to add

33
00:02:00.170 --> 00:02:03.450
pagination support to the product service.

34
00:02:03.450 --> 00:02:05.360
Sorry, I basically need to define a method

35
00:02:05.360 --> 00:02:08.163
in this given service here to support pagination.

36
00:02:09.360 --> 00:02:11.110
And what I'll do is I'll kind of start here

37
00:02:11.110 --> 00:02:12.310
with some of the existing code

38
00:02:12.310 --> 00:02:14.533
and just do a little copy paste exercise.

39
00:02:17.300 --> 00:02:19.440
So I'll just grab the get product list method,

40
00:02:19.440 --> 00:02:21.640
I'll just copy this and then paste it

41
00:02:21.640 --> 00:02:24.923
and I'll kind of use it as my initial version of the method.

42
00:02:28.120 --> 00:02:30.050
And so this new method, I'll give it a new name here,

43
00:02:30.050 --> 00:02:32.233
I'll call it, get product list paginate,

44
00:02:36.570 --> 00:02:38.180
and then I'll pass in some parameters

45
00:02:38.180 --> 00:02:39.483
for this pagination.

46
00:02:42.810 --> 00:02:47.343
So we have the page, and also the page size.

47
00:03:06.286 --> 00:03:08.760
And then I'll make an update here instead of product array,

48
00:03:08.760 --> 00:03:12.663
I'll make use of that interface, get response products.

49
00:03:14.890 --> 00:03:16.720
Because we need to access this data

50
00:03:16.720 --> 00:03:19.720
in the calling application and you'll see more of that,

51
00:03:19.720 --> 00:03:21.270
in some of the upcoming videos.

52
00:03:28.940 --> 00:03:30.810
Alrighty so we need to make some updates to the URL.

53
00:03:30.810 --> 00:03:33.710
So Spring Data REST supports pagination out of the box.

54
00:03:33.710 --> 00:03:37.193
All we have to do is send the parameters for page and size.

55
00:03:51.160 --> 00:03:54.100
So passover page equals, the page

56
00:04:02.730 --> 00:04:05.913
and size equals, the page size.

57
00:04:19.300 --> 00:04:20.860
All right, I'll just make a little small tweak

58
00:04:20.860 --> 00:04:22.840
to the documentation up above

59
00:04:22.840 --> 00:04:24.883
just so it follows along with my code,

60
00:04:39.530 --> 00:04:40.880
and I'll update the return here.

61
00:04:40.880 --> 00:04:44.120
So I'll say httpclient.get,

62
00:04:44.120 --> 00:04:47.573
and then we going to to return a get response products,

63
00:04:52.820 --> 00:04:55.737
and then we pass on our search URL.

64
00:04:59.660 --> 00:05:01.140
Okay, that looks pretty good.

65
00:05:01.140 --> 00:05:02.770
So this is the basic coding here

66
00:05:02.770 --> 00:05:05.470
for our get product list, PatchLink method

67
00:05:05.470 --> 00:05:07.163
that's in our product service.

68
00:05:08.360 --> 00:05:10.660
And we'll actually use this in the next video

69
00:05:10.660 --> 00:05:12.253
from our actual component.

