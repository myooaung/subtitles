WEBVTT
1
00:00:00.411 --> 00:00:03.763
<v Instructor>In this video, we'll cover TypeScript basics.</v>

2
00:00:07.380 --> 00:00:09.320
So what exactly is TypeScript.

3
00:00:09.320 --> 00:00:11.550
Well, it's a language developed by Microsoft,

4
00:00:11.550 --> 00:00:13.900
the first release of it was in 2012,

5
00:00:13.900 --> 00:00:16.040
it's free and open-source.

6
00:00:16.040 --> 00:00:19.920
TypeScript provides static typing support to JavaScript,

7
00:00:19.920 --> 00:00:22.210
so this helps you with IDE support in terms

8
00:00:22.210 --> 00:00:25.210
of code completion, debugging and so on.

9
00:00:25.210 --> 00:00:28.130
TypeScript also adds support for object-oriented

10
00:00:28.130 --> 00:00:30.970
programming, such as classes, objects,

11
00:00:30.970 --> 00:00:33.330
inheritance, interfaces and so on.

12
00:00:33.330 --> 00:00:37.330
So it really just makes it easier to use the JavaScript

13
00:00:37.330 --> 00:00:40.520
ecosystem or environment in a compiled fashion.

14
00:00:40.520 --> 00:00:43.420
So that's the real beauty of TypeScript.

15
00:00:43.420 --> 00:00:45.370
And you can get more details on TypeScript

16
00:00:45.370 --> 00:00:48.623
at the official website typescriptlang.org.

17
00:00:52.140 --> 00:00:53.910
For Angular development, we can develop

18
00:00:53.910 --> 00:00:55.430
using various languages.

19
00:00:55.430 --> 00:00:57.870
So we can make use of JavaScript, it's the extremely

20
00:00:57.870 --> 00:00:59.620
popular programming language.

21
00:00:59.620 --> 00:01:02.110
You can also use ECMAScript, the standardized

22
00:01:02.110 --> 00:01:04.080
version of JavaScript, you'll see references

23
00:01:04.080 --> 00:01:07.230
such as ES6 and ES9 and so on.

24
00:01:07.230 --> 00:01:09.740
There's also TypeScript, so it adds optional

25
00:01:09.740 --> 00:01:12.550
types to JavaScript, and you can even develop

26
00:01:12.550 --> 00:01:16.650
Angular apps in other languages such as Dart, and so on.

27
00:01:16.650 --> 00:01:19.280
Now TypeScript is the most popular language

28
00:01:19.280 --> 00:01:22.280
for Angular development and I'll talk more about that later.

29
00:01:25.010 --> 00:01:26.340
So let's look at the relationships.

30
00:01:26.340 --> 00:01:30.340
So TypeScript is a superset of JavaScript and ECMAScript.

31
00:01:30.340 --> 00:01:33.460
So you have the core JavaScript, plain vanilla,

32
00:01:33.460 --> 00:01:35.760
then you have ECMAScript, which is the standardized

33
00:01:35.760 --> 00:01:38.790
version of JavaScript, and then we have TypeScript,

34
00:01:38.790 --> 00:01:41.030
so this is where we add optional types

35
00:01:41.030 --> 00:01:43.593
to the JavaScript programming environment.

36
00:01:47.290 --> 00:01:48.480
And then you're probably wondering,

37
00:01:48.480 --> 00:01:52.000
okay well, why do most developers use TypeScript,

38
00:01:52.000 --> 00:01:54.580
why don't they use Dart or ECMAScript

39
00:01:54.580 --> 00:01:56.730
or just plain vanilla JavaScript?

40
00:01:56.730 --> 00:01:59.360
Well, TypeScript is a strongly-typed language

41
00:01:59.360 --> 00:02:02.360
with compile-time checking and IDE support.

42
00:02:02.360 --> 00:02:05.800
So for very large projects, this helps with increased

43
00:02:05.800 --> 00:02:08.700
developer productivity and efficiency.

44
00:02:08.700 --> 00:02:11.380
And also, the Angular framework itself

45
00:02:11.380 --> 00:02:14.910
is internally developed using TypeScript.

46
00:02:14.910 --> 00:02:15.850
Yep, that's right.

47
00:02:15.850 --> 00:02:19.330
So the Angular developers, they actually used TypeScript

48
00:02:19.330 --> 00:02:21.590
to build the Angular framework.

49
00:02:21.590 --> 00:02:24.130
And then also, when you see a lot of docs,

50
00:02:24.130 --> 00:02:26.450
online blogs, tutorials and so on,

51
00:02:26.450 --> 00:02:29.460
they'll make use of TypeScript for their coding examples.

52
00:02:29.460 --> 00:02:31.560
So it's a really good idea to learn TypeScript

53
00:02:31.560 --> 00:02:34.853
if you're really serious about doing Angular development.

54
00:02:37.530 --> 00:02:39.840
Alrighty, so in this course, I'm going to to focus

55
00:02:39.840 --> 00:02:42.120
on practical results, so this is really just

56
00:02:42.120 --> 00:02:44.940
an introduction to TypeScript development.

57
00:02:44.940 --> 00:02:47.280
It's not an A to Z reference, if you need

58
00:02:47.280 --> 00:02:49.500
a complete reference to TypeScript,

59
00:02:49.500 --> 00:02:51.710
I say look at the TypeScript documentation

60
00:02:51.710 --> 00:02:54.490
and that's available at typescriptlang.org,

61
00:02:54.490 --> 00:02:57.130
but we'll cover enough practical information

62
00:02:57.130 --> 00:02:59.973
to help us build our given applications.

63
00:03:02.470 --> 00:03:04.590
Alrighty, so let's kind of look at the development process.

64
00:03:04.590 --> 00:03:06.110
So the first thing we'll do is we'll create

65
00:03:06.110 --> 00:03:08.860
our TypeScript code, then we'll compile the code,

66
00:03:08.860 --> 00:03:10.470
and then we'll actually run the code.

67
00:03:10.470 --> 00:03:12.040
And this is a step-by-step process,

68
00:03:12.040 --> 00:03:14.150
but it's very high-level, this is the basic

69
00:03:14.150 --> 00:03:16.140
process that you will take with any type

70
00:03:16.140 --> 00:03:18.363
of compiled programming language.

71
00:03:21.320 --> 00:03:23.650
Alrighty, so step one, creating the TypeScript code.

72
00:03:23.650 --> 00:03:26.670
So we create a text file, our TypeScript files

73
00:03:26.670 --> 00:03:28.900
will have a .ts extension, so I have

74
00:03:28.900 --> 00:03:31.710
this file here called mydemo.ts,

75
00:03:31.710 --> 00:03:35.073
and then here I simply say console.log("Hello World!"),

76
00:03:35.073 --> 00:03:37.990
it'll simply log a message to the actual console.

77
00:03:37.990 --> 00:03:40.490
And that's it, very simple, very straight forward.

78
00:03:43.570 --> 00:03:45.990
And then with step two of compiling the code,

79
00:03:45.990 --> 00:03:49.700
so web browsers do not understand TypeScript natively,

80
00:03:49.700 --> 00:03:51.550
they can only understand JavaScript,

81
00:03:51.550 --> 00:03:54.250
so we somehow need to convert our TypeScript code

82
00:03:54.250 --> 00:03:56.220
over to JavaScript code.

83
00:03:56.220 --> 00:03:59.018
And this is known as transpiling.

84
00:03:59.018 --> 00:04:00.483
Okay, funny term there, transpiling.

85
00:04:00.483 --> 00:04:03.000
So we're translating/compiling.

86
00:04:03.000 --> 00:04:06.120
So we have our transcript code right, mydemo.ts,

87
00:04:06.120 --> 00:04:08.720
and then we're going to convert it to JavaScript code

88
00:04:08.720 --> 00:04:11.470
and we're going to transpile it to JavaScript code,

89
00:04:11.470 --> 00:04:15.110
and so we'll end up with this file called mydemo.js.

90
00:04:15.110 --> 00:04:18.653
So transpiling, we're translating/compiling.

91
00:04:20.690 --> 00:04:23.200
Alrighty, so a bit more here, so transpiling

92
00:04:23.200 --> 00:04:25.630
is accomplished with the tsc command.

93
00:04:25.630 --> 00:04:30.030
So our file here, mydemo.ts, will use the tsc command

94
00:04:30.030 --> 00:04:32.190
to actually transpile the code,

95
00:04:32.190 --> 00:04:35.610
and this'll generate mydemo.js,

96
00:04:35.610 --> 00:04:37.583
that's the actual JavaScript code.

97
00:04:39.240 --> 00:04:42.070
So then our command line will simply use tsc space,

98
00:04:42.070 --> 00:04:44.400
the file name, mydemo.ts,

99
00:04:44.400 --> 00:04:46.530
so we give a reference to the TypeScript file,

100
00:04:46.530 --> 00:04:48.210
and then it'll actually generate

101
00:04:48.210 --> 00:04:52.083
the given JavaScript file, mydemo.js.

102
00:04:55.340 --> 00:04:56.840
And then to actually run the code,

103
00:04:56.840 --> 00:04:59.340
then we'll actually run the JavaScript code,

104
00:04:59.340 --> 00:05:01.460
and we'll make use of the node command.

105
00:05:01.460 --> 00:05:03.880
So we're going to run the generated JavaScript code,

106
00:05:03.880 --> 00:05:06.073
and we're going to run the .js file.

107
00:05:08.340 --> 00:05:10.350
So at the command line, we'll say node,

108
00:05:10.350 --> 00:05:12.770
and then we'll give a reference to the JavaScript code.

109
00:05:12.770 --> 00:05:15.960
So here I'll have node mydemo.js,

110
00:05:15.960 --> 00:05:17.800
and this'll give us Hello World!,

111
00:05:17.800 --> 00:05:21.800
because our file itself, had console.log("Hello World!).

112
00:05:21.800 --> 00:05:23.470
So the important thing here is that we're running

113
00:05:23.470 --> 00:05:26.893
the generated JavaScript code, the .js file.

114
00:05:29.320 --> 00:05:31.500
So you may wonder, well, well why do we even compile?

115
00:05:31.500 --> 00:05:33.160
Well the compiler is your friend,

116
00:05:33.160 --> 00:05:36.270
so the compiler or IDE can find errors

117
00:05:36.270 --> 00:05:37.800
at compilation time.

118
00:05:37.800 --> 00:05:39.220
So if I were to write some code here like

119
00:05:39.220 --> 00:05:40.820
console.LOGSTUFF(Hello World!"),

120
00:05:42.820 --> 00:05:45.560
so I just write the code here tsc mydemo.ts,

121
00:05:45.560 --> 00:05:48.647
compiling the code here, then it'll tell me

122
00:05:48.647 --> 00:05:51.603
"Hey, this property LOGSTUFF does not exist

123
00:05:51.603 --> 00:05:53.850
blah, blah, blah.", so this is very good,

124
00:05:53.850 --> 00:05:55.820
you want to find your errors earlier,

125
00:05:55.820 --> 00:05:57.770
as opposed to regular JavaScript,

126
00:05:57.770 --> 00:05:59.970
where we would only find the errors at run-time.

127
00:05:59.970 --> 00:06:02.410
So, again, the compiler is your friend,

128
00:06:02.410 --> 00:06:04.280
help you find the errors early

129
00:06:04.280 --> 00:06:06.963
to save you a lot of time and headache.

130
00:06:08.600 --> 00:06:10.180
Alrighty, so these are the basics here,

131
00:06:10.180 --> 00:06:11.600
we're going to move into the next video,

132
00:06:11.600 --> 00:06:13.590
we'll dive into the IDE, and ah,

133
00:06:13.590 --> 00:06:15.700
we'll go ahead and write our first TypeScript program.

134
00:06:15.700 --> 00:06:18.003
So I'll see ya' in the next video.

