WEBVTT
1
00:00:01.500 --> 00:00:03.690
<v ->Let's get started with our development process.</v>

2
00:00:03.690 --> 00:00:05.660
So in this video, we'll cover steps one and two

3
00:00:05.660 --> 00:00:07.770
of defining a custom validator rule,

4
00:00:07.770 --> 00:00:10.140
and also specifying the custom validator rule

5
00:00:10.140 --> 00:00:11.993
for the form controls.

6
00:00:19.592 --> 00:00:21.770
So we're in our IDE.

7
00:00:21.770 --> 00:00:24.220
Let's go ahead and open up a new terminal window.

8
00:00:27.250 --> 00:00:28.850
We went to our directory.

9
00:00:28.850 --> 00:00:31.330
And what we'll do is we'll generate a new class

10
00:00:31.330 --> 00:00:33.263
for this custom validator rule.

11
00:00:37.790 --> 00:00:40.370
So I'll make use of this ng generate class,

12
00:00:40.370 --> 00:00:42.143
give validators/Luv2ShopValidators.

13
00:00:53.085 --> 00:00:54.367
And this created the class

14
00:00:54.367 --> 00:00:58.030
and the appropriate package here or directory.

15
00:00:58.030 --> 00:00:59.800
Let me swing over here and take a look.

16
00:00:59.800 --> 00:01:02.700
So source app, we have this new directory

17
00:01:02.700 --> 00:01:05.470
here called validators, good.

18
00:01:05.470 --> 00:01:09.400
And we have our validator code or class in this directory.

19
00:01:09.400 --> 00:01:10.233
This is great.

20
00:01:10.233 --> 00:01:13.433
Let's go and open up I love to shop validators.ts.

21
00:01:16.960 --> 00:01:17.793
And at the bottom,

22
00:01:17.793 --> 00:01:19.480
I'll exit the terminal window

23
00:01:19.480 --> 00:01:21.193
just so I can free up some space.

24
00:01:23.460 --> 00:01:27.179
And right now I have this very empty class (laugh),

25
00:01:27.179 --> 00:01:29.030
Lu2ShopValidators but no problem.

26
00:01:29.030 --> 00:01:30.400
We'll add some code here

27
00:01:30.400 --> 00:01:33.113
and we'll actually add our custom validator rule.

28
00:01:36.870 --> 00:01:38.160
So I'll create this method,

29
00:01:38.160 --> 00:01:40.473
I'll make it static, not only whitespace.

30
00:01:41.330 --> 00:01:44.235
They'll pass in a form control

31
00:01:44.235 --> 00:01:45.430
and that's the one that we're checking against

32
00:01:45.430 --> 00:01:46.920
or validating against,

33
00:01:46.920 --> 00:01:49.073
and then we'll return validation errors.

34
00:01:51.764 --> 00:01:52.597
Give me a second.

35
00:01:52.597 --> 00:01:54.547
I'll just go ahead and fix the imports.

36
00:01:57.720 --> 00:02:01.093
So these are from the angular forms API.

37
00:02:05.870 --> 00:02:08.680
And now I simply just need to do a return null

38
00:02:08.680 --> 00:02:10.010
at the bottom just to kind of get rid

39
00:02:10.010 --> 00:02:12.533
of this first error message here.

40
00:02:13.960 --> 00:02:14.800
All right cool.

41
00:02:14.800 --> 00:02:15.633
That's done.

42
00:02:15.633 --> 00:02:16.712
All right great.

43
00:02:16.712 --> 00:02:17.545
So it kind of stepping back a bit.

44
00:02:17.545 --> 00:02:19.860
So if the validation check fails,

45
00:02:19.860 --> 00:02:22.000
and we're going to return validation errors,

46
00:02:22.000 --> 00:02:25.363
if the validation check passes, then we'll return null.

47
00:02:31.070 --> 00:02:32.560
All right so in my coding here,

48
00:02:32.560 --> 00:02:36.113
I'll check to see if the string only has whitespace.

49
00:02:39.240 --> 00:02:41.653
So I will make sure the string is not No.

50
00:02:48.530 --> 00:02:50.740
And I'll also trim the string

51
00:02:50.740 --> 00:02:53.160
and check the length of the string.

52
00:02:53.160 --> 00:02:55.780
So trim removes whitespace,

53
00:02:55.780 --> 00:02:57.893
any leading and trailing whitespace.

54
00:02:59.850 --> 00:03:01.790
So I will Check to see if it equals zero.

55
00:03:01.790 --> 00:03:03.900
If that's the case and I know that this string

56
00:03:03.900 --> 00:03:05.283
only has whitespace.

57
00:03:08.550 --> 00:03:11.150
So that means that this validation here should fail.

58
00:03:12.030 --> 00:03:14.880
So it's invalid, we're going to return this error object.

59
00:03:21.550 --> 00:03:25.013
And so the error object, I get my error key and the value.

60
00:03:31.140 --> 00:03:33.963
So the key is not only whitespace and I return true.

61
00:03:35.720 --> 00:03:37.290
And I'll talk more about that in a second.

62
00:03:37.290 --> 00:03:39.630
For now let's just go into our else statement.

63
00:03:39.630 --> 00:03:41.930
I'll just move this return no up top.

64
00:03:41.930 --> 00:03:46.930
So in this case, it's valid so we're return null.

65
00:03:47.820 --> 00:03:50.713
So no means everything's okay.

66
00:03:52.510 --> 00:03:57.240
So that's kind of the main coding here for this method,

67
00:03:57.240 --> 00:04:00.240
not only whitespace this validation rule

68
00:04:00.240 --> 00:04:03.890
So again, if validation check fails return validation error.

69
00:04:03.890 --> 00:04:05.673
if it passes, return null.

70
00:04:08.280 --> 00:04:11.020
And then a bit more than this validation error key,

71
00:04:11.020 --> 00:04:14.100
the HTML template will check for this error key

72
00:04:14.100 --> 00:04:16.410
to figure out if it needs to display

73
00:04:16.410 --> 00:04:17.743
an error message or not.

74
00:04:21.140 --> 00:04:23.090
And now we move to step two of specifying

75
00:04:23.090 --> 00:04:26.483
the custom validator rule for the form controls.

76
00:04:29.120 --> 00:04:32.083
And so we'll do this work in our checkout component.ts.

77
00:04:36.670 --> 00:04:39.630
So I will just move down here to components,

78
00:04:39.630 --> 00:04:42.473
checkout component.ts.

79
00:04:50.920 --> 00:04:54.330
And I'll move down here to my form controls.

80
00:04:54.330 --> 00:04:59.330
So the checkout form group, the customer group, first name.

81
00:04:59.450 --> 00:05:01.370
So right now we have the rules we required

82
00:05:01.370 --> 00:05:02.710
in min length of two.

83
00:05:02.710 --> 00:05:05.340
And then we'll add in our custom validator rule

84
00:05:05.340 --> 00:05:06.643
that we just created.

85
00:05:11.420 --> 00:05:13.790
So let me just knock things down to a separate line

86
00:05:13.790 --> 00:05:17.203
just so I have some more space, some room to work with.

87
00:05:18.510 --> 00:05:21.100
And right here, after min lift two,

88
00:05:21.100 --> 00:05:25.430
then I'll add in our custom validator rule,

89
00:05:25.430 --> 00:05:30.430
Luv2ShopValidators.not only whitespace.

90
00:05:38.800 --> 00:05:41.513
So that's our custom validator method name.

91
00:05:43.380 --> 00:05:45.380
But we need to fix some of the imports here

92
00:05:45.380 --> 00:05:46.780
because it doesn't have access

93
00:05:46.780 --> 00:05:49.777
to this class Luv2ShopValidators

94
00:05:49.777 --> 00:05:52.963
and we can just move up top and just manually import it.

95
00:05:58.550 --> 00:06:00.603
So I just don't import on this class.

96
00:06:01.800 --> 00:06:06.800
It's from source app validators/Luv2ShopValidators.

97
00:06:21.960 --> 00:06:23.910
That looks pretty good.

98
00:06:23.910 --> 00:06:28.780
So now if I go back down and that import error is resolved.

99
00:06:28.780 --> 00:06:30.590
we have Luv2ShopValidators.

100
00:06:30.590 --> 00:06:33.840
And one thing I'll do here, just for cosmetic purposes,

101
00:06:33.840 --> 00:06:36.470
I'll put each one of these validators

102
00:06:36.470 --> 00:06:38.440
on a separate line just to make things easy

103
00:06:38.440 --> 00:06:41.273
for you while we're watching this video together.

104
00:06:59.010 --> 00:07:00.360
So stepping back here.

105
00:07:00.360 --> 00:07:02.730
So here's the real coding for adding

106
00:07:02.730 --> 00:07:05.850
our custom validator methods, that's the method name.

107
00:07:05.850 --> 00:07:07.770
It links over to the actual class

108
00:07:07.770 --> 00:07:12.083
and method that we defined in the earlier sections.

109
00:07:13.979 --> 00:07:15.010
I like it.

110
00:07:15.010 --> 00:07:16.783
This looks really good so far.

