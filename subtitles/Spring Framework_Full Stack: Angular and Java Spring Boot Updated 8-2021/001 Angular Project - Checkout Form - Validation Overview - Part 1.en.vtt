WEBVTT
1
00:00:01.130 --> 00:00:01.963
<v Narrator>In this video,</v>

2
00:00:01.963 --> 00:00:04.633
we're going to add validation to our checkout form.

3
00:00:07.710 --> 00:00:09.910
So before we submit the form to the back end,

4
00:00:09.910 --> 00:00:12.110
let's perform some validation.

5
00:00:12.110 --> 00:00:14.140
So we'll check for required fields.

6
00:00:14.140 --> 00:00:15.750
We'll also make sure we have the minimum length

7
00:00:15.750 --> 00:00:17.623
on certain fields and so on.

8
00:00:21.006 --> 00:00:23.760
So Angular has a set of built in validation rules

9
00:00:23.760 --> 00:00:25.033
that we can make use of.

10
00:00:26.180 --> 00:00:28.080
So there's the required validation,

11
00:00:28.080 --> 00:00:29.903
must be a non empty value.

12
00:00:30.790 --> 00:00:33.670
Min, max, must be a number, greater than

13
00:00:33.670 --> 00:00:35.050
equal to value for min.

14
00:00:35.050 --> 00:00:37.153
Max, less than equal to a value.

15
00:00:38.090 --> 00:00:40.080
There's also min length and max length,

16
00:00:40.080 --> 00:00:43.150
basically checking the length of a string, accordingly.

17
00:00:43.150 --> 00:00:46.350
We can also apply a regular expression pattern

18
00:00:46.350 --> 00:00:48.773
and we can also make use of the email format.

19
00:00:50.040 --> 00:00:51.790
And there's some other validation rules,

20
00:00:51.790 --> 00:00:53.400
and you can make use of the link here on the slide

21
00:00:53.400 --> 00:00:56.393
to get the details on those other validations.

22
00:00:59.020 --> 00:01:01.640
And there's some additional validation features available.

23
00:01:01.640 --> 00:01:03.930
We can define custom validators,

24
00:01:03.930 --> 00:01:06.120
make use of Cross-field validation

25
00:01:06.120 --> 00:01:08.830
and also use asynchronous validators.

26
00:01:08.830 --> 00:01:10.920
And if you'd like to see code examples of this,

27
00:01:10.920 --> 00:01:13.170
you can make use of the Angular documentation

28
00:01:14.409 --> 00:01:15.409
for form validation.

29
00:01:17.870 --> 00:01:19.710
For our checkout form validation.

30
00:01:19.710 --> 00:01:22.083
These are our requirements from the boss.

31
00:01:23.260 --> 00:01:25.530
He wants to make sure that all fields are required.

32
00:01:25.530 --> 00:01:28.800
And also the email address has the proper email format.

33
00:01:28.800 --> 00:01:30.410
And then for the credit card field,

34
00:01:30.410 --> 00:01:33.140
only numbers are allowed, 16 digits.

35
00:01:33.140 --> 00:01:35.810
And for the CVC number only numbers are allowed

36
00:01:35.810 --> 00:01:37.723
and only three digits.

37
00:01:40.560 --> 00:01:42.650
Alrighty, so here's our development process.

38
00:01:42.650 --> 00:01:45.060
So the first step is specifying the validation rules

39
00:01:45.060 --> 00:01:46.600
for the form controls.

40
00:01:46.600 --> 00:01:48.300
Then we define the getter methods

41
00:01:48.300 --> 00:01:50.260
to access the form controls.

42
00:01:50.260 --> 00:01:52.480
Next, we update the HTML template

43
00:01:52.480 --> 00:01:54.140
to display the error messages.

44
00:01:54.140 --> 00:01:57.080
And then finally we add the event handler to check

45
00:01:57.080 --> 00:02:00.553
the validation status when the submit button is clicked.

46
00:02:04.060 --> 00:02:05.470
Alrighty, so starting with step one

47
00:02:05.470 --> 00:02:08.220
of specifying the validation rules for form controls,

48
00:02:08.220 --> 00:02:10.010
recall then a form fill is represented by

49
00:02:10.010 --> 00:02:11.689
the form control object.

50
00:02:11.689 --> 00:02:13.520
So we create the form control

51
00:02:13.520 --> 00:02:16.550
and pass in initial value and validators.

52
00:02:16.550 --> 00:02:18.480
So here's the basic syntax.

53
00:02:18.480 --> 00:02:22.300
New form control, initial value and validators.

54
00:02:22.300 --> 00:02:24.700
So as an example, new form control,

55
00:02:24.700 --> 00:02:28.090
we pass an initial value of an empty string.

56
00:02:28.090 --> 00:02:29.640
And then we pass in the validators

57
00:02:29.640 --> 00:02:32.550
and we pass in an array of validators here.

58
00:02:32.550 --> 00:02:34.050
So if you only had one validator,

59
00:02:34.050 --> 00:02:36.170
you simply pass in a single item itself.

60
00:02:36.170 --> 00:02:39.430
If you have multiple, you make use of an array.

61
00:02:39.430 --> 00:02:40.620
So in this example here,

62
00:02:40.620 --> 00:02:42.750
we're saying at this given field is required

63
00:02:42.750 --> 00:02:44.723
and then the minimum lamp is two.

64
00:02:48.270 --> 00:02:50.280
All right, so let's pull this together with an example

65
00:02:50.280 --> 00:02:51.410
with our checkout form.

66
00:02:51.410 --> 00:02:53.540
So we have our checkout form group.

67
00:02:53.540 --> 00:02:55.950
We have this customer form builder group

68
00:02:55.950 --> 00:02:57.690
and then we make use of use of first name,

69
00:02:57.690 --> 00:02:59.700
new form control, the empty string.

70
00:02:59.700 --> 00:03:01.300
And then we give our validators.

71
00:03:01.300 --> 00:03:02.660
Validators that required

72
00:03:02.660 --> 00:03:05.360
and also validators that min length of two.

73
00:03:05.360 --> 00:03:07.210
So that's for the first name control.

74
00:03:09.260 --> 00:03:11.510
And then we do the same thing here for last name.

75
00:03:11.510 --> 00:03:14.543
So validators that required and min length of two.

76
00:03:16.040 --> 00:03:18.820
For email address, we'll change things up slightly here.

77
00:03:18.820 --> 00:03:21.510
So we have the validators that required.

78
00:03:21.510 --> 00:03:24.680
However, we'll make use of this validate as a pattern.

79
00:03:24.680 --> 00:03:27.140
So we'll pass any regular expression

80
00:03:27.140 --> 00:03:29.330
to check on the email format.

81
00:03:29.330 --> 00:03:31.980
So this expression here will work for an example,

82
00:03:31.980 --> 00:03:34.933
like, you know, anil@gmail.com.

83
00:03:37.160 --> 00:03:40.170
So now you're probably wondering here,

84
00:03:40.170 --> 00:03:44.613
why aren't we using English built in validators that email?

85
00:03:46.070 --> 00:03:47.850
Hmm, well validators that email

86
00:03:47.850 --> 00:03:52.060
only checks for some texts at more texts or whatever.

87
00:03:52.060 --> 00:03:56.320
So based on this, the following is valid email format.

88
00:03:56.320 --> 00:04:00.780
So anil@luv2code or anil@gmail,

89
00:04:00.780 --> 00:04:05.070
these are valid emails based on validators that email.

90
00:04:05.070 --> 00:04:07.220
Okay, but that's too lenient.

91
00:04:07.220 --> 00:04:09.350
That's not really what we want

92
00:04:10.640 --> 00:04:13.590
because this doesn't really check for the domain name format

93
00:04:13.590 --> 00:04:17.330
like anil@luv2code.com or anil@gmail.com.

94
00:04:17.330 --> 00:04:19.720
So as a result, we use a regular expression

95
00:04:19.720 --> 00:04:20.940
with the validators that pattern.

96
00:04:20.940 --> 00:04:23.660
So that's why I'm using the pattern approach

97
00:04:23.660 --> 00:04:25.320
on the previous slide,

98
00:04:25.320 --> 00:04:29.320
because validators that email is too weak, too lenient.

99
00:04:29.320 --> 00:04:30.780
And the validators that pattern

100
00:04:30.780 --> 00:04:33.563
gives me more control over that format.

101
00:04:34.870 --> 00:04:36.490
Now, one final thing I want to mention here

102
00:04:36.490 --> 00:04:39.970
is that validators on email and validates that pattern,

103
00:04:39.970 --> 00:04:44.160
it only checks the format of the email address.

104
00:04:44.160 --> 00:04:47.530
It does not verify if the email address is real.

105
00:04:47.530 --> 00:04:50.570
Okay, so this validator, it doesn't go online

106
00:04:50.570 --> 00:04:51.870
to the internet and check to make sure

107
00:04:51.870 --> 00:04:53.620
this is a real email address or whatever.

108
00:04:53.620 --> 00:04:57.033
It's simply checking the format of that email address.

