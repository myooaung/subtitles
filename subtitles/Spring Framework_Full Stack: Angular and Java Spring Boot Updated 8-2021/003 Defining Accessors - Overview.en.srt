1
00:00:01,180 --> 00:00:02,013
<v Instructor>In this video</v>

2
00:00:02,013 --> 00:00:04,087
we'll make use of TypeScript accessors.

3
00:00:08,210 --> 00:00:10,210
So currently we have our customer Class,

4
00:00:10,210 --> 00:00:12,610
we have our properties for firstName and lastName,

5
00:00:12,610 --> 00:00:14,190
and they're private.

6
00:00:14,190 --> 00:00:15,510
And what I'd like to do is figure out,

7
00:00:15,510 --> 00:00:17,713
well how can I access that data?

8
00:00:21,366 --> 00:00:22,520
So since our properties are private,

9
00:00:22,520 --> 00:00:24,040
we need a way to access 'em,

10
00:00:24,040 --> 00:00:25,630
so we can create traditional methods

11
00:00:25,630 --> 00:00:27,860
as in other programming languages.

12
00:00:27,860 --> 00:00:30,503
So we can simply define getter and setter methods.

13
00:00:33,520 --> 00:00:34,810
So here's an example of creating

14
00:00:34,810 --> 00:00:36,610
getter setter methods in TypeScript.

15
00:00:38,080 --> 00:00:41,110
So I simply define a getter method, getFirstName.

16
00:00:42,460 --> 00:00:44,390
So I have the method name,

17
00:00:44,390 --> 00:00:45,820
and I have the return type,

18
00:00:45,820 --> 00:00:47,220
and I return this.firstName.

19
00:00:50,140 --> 00:00:52,110
And then I can do a similar thing for the setter methods.

20
00:00:52,110 --> 00:00:53,537
So setFirstName.

21
00:00:54,390 --> 00:00:56,150
There is the method name.

22
00:00:56,150 --> 00:00:57,690
There's the param type.

23
00:00:57,690 --> 00:01:00,510
And then return type of void.

24
00:01:00,510 --> 00:01:02,503
And we simply assign it internally.

25
00:01:04,410 --> 00:01:06,840
And then I simply create an instance of my class

26
00:01:08,090 --> 00:01:10,400
and then I set the data.

27
00:01:10,400 --> 00:01:12,810
So I say setFirstName Greg,

28
00:01:12,810 --> 00:01:14,928
and then I retrieve firstName by saying

29
00:01:14,928 --> 00:01:16,625
myCustomer.getFirstName.

30
00:01:16,625 --> 00:01:18,410
And a very traditional approach as far as using

31
00:01:18,410 --> 00:01:20,810
getters and setters just like any other programming language

32
00:01:20,810 --> 00:01:23,310
and you can do a similar thing here in TypeScript.

33
00:01:26,320 --> 00:01:29,460
But TypeScript also offers an alternate syntax

34
00:01:29,460 --> 00:01:30,510
that you can use.

35
00:01:30,510 --> 00:01:32,060
This idea of accessors.

36
00:01:32,060 --> 00:01:35,110
So you can define these special get set methods,

37
00:01:35,110 --> 00:01:39,705
known as accessors, with a slightly different syntax.

38
00:01:39,705 --> 00:01:41,955
(laughing)

39
00:01:43,090 --> 00:01:44,610
All righty, so in our Customer class

40
00:01:44,610 --> 00:01:45,500
the first thing I'll do is

41
00:01:45,500 --> 00:01:48,350
I'll change my internal property names.

42
00:01:48,350 --> 00:01:49,930
So for the internal property names

43
00:01:49,930 --> 00:01:52,250
you can give any property name.

44
00:01:52,250 --> 00:01:55,520
Some TypeScript developers use the leading underscore.

45
00:01:55,520 --> 00:01:57,950
But there is nothing special about the leading underscore.

46
00:01:57,950 --> 00:01:59,730
There's no special magic.

47
00:01:59,730 --> 00:02:01,290
It's simply a convention.

48
00:02:01,290 --> 00:02:03,780
You could actually give your internal property names

49
00:02:03,780 --> 00:02:05,893
any name because they're private.

50
00:02:07,960 --> 00:02:10,560
And then I go ahead and set up a get accessor.

51
00:02:10,560 --> 00:02:14,903
So note the special syntax here, get space property.

52
00:02:15,840 --> 00:02:18,780
And then we do a similar thing for creating a set accessor.

53
00:02:18,780 --> 00:02:22,740
So again, note the syntax set space property.

54
00:02:22,740 --> 00:02:24,750
And both of these accessors are public.

55
00:02:24,750 --> 00:02:28,930
So that's what they'll use to access this given data.

56
00:02:28,930 --> 00:02:31,360
And one thing to note about the set accessor,

57
00:02:31,360 --> 00:02:34,313
there's no return type, not even void.

58
00:02:35,490 --> 00:02:37,080
All righty, so these are the accessors,

59
00:02:37,080 --> 00:02:39,210
these are the public accessors that you'll use

60
00:02:39,210 --> 00:02:41,020
to access the given data.

61
00:02:41,020 --> 00:02:42,260
But now you access the data

62
00:02:42,260 --> 00:02:44,283
it's a slightly different syntax here.

63
00:02:45,610 --> 00:02:46,910
All righty, so let's go ahead and use it.

64
00:02:46,910 --> 00:02:48,830
So we create our customer and then I say,

65
00:02:48,830 --> 00:02:51,610
myCustomer.firstName = Susan.

66
00:02:51,610 --> 00:02:54,340
So this actually calls the set accessor

67
00:02:54,340 --> 00:02:56,220
since we're assigning a value.

68
00:02:56,220 --> 00:02:58,090
We're actually setting the given value.

69
00:02:58,090 --> 00:03:02,493
So behind the scenes TypeScript will call this set accessor.

70
00:03:03,800 --> 00:03:05,510
And then a similar thing here when we try

71
00:03:05,510 --> 00:03:07,320
and retrieve the data or read the data,

72
00:03:07,320 --> 00:03:09,520
so myCustomer.firstName.

73
00:03:09,520 --> 00:03:11,710
So we're actually retrieving the data.

74
00:03:11,710 --> 00:03:13,980
So it's going to call the get accessor

75
00:03:13,980 --> 00:03:16,350
since we're actually accessing a value.

76
00:03:16,350 --> 00:03:18,863
So they'll do this behind the scenes.

77
00:03:22,205 --> 00:03:24,490
And in fact, in our Customer class,

78
00:03:24,490 --> 00:03:28,190
we can actually give our internal property any name.

79
00:03:28,190 --> 00:03:31,440
If I wanted to I could have these properties as x and y.

80
00:03:31,440 --> 00:03:33,430
The outside code is not setting

81
00:03:33,430 --> 00:03:35,810
the internal private fields directly.

82
00:03:35,810 --> 00:03:39,930
Only via these public accessors for get and set.

83
00:03:39,930 --> 00:03:41,490
So the public get set accessors

84
00:03:41,490 --> 00:03:43,483
are still called accordingly.

85
00:03:46,180 --> 00:03:48,700
All righty, so let's just go ahead and rename our fields

86
00:03:48,700 --> 00:03:51,130
to the original names from the previous slides.

87
00:03:51,130 --> 00:03:53,627
So just a little bit of refactoring here.

88
00:03:53,627 --> 00:03:56,503
So I put back the _firstName and the _lastName.

89
00:03:57,570 --> 00:04:01,430
And then also I'm going to remove public from the accessors

90
00:04:01,430 --> 00:04:04,140
because if no access modifier is given,

91
00:04:04,140 --> 00:04:05,840
the it's public by default.

92
00:04:05,840 --> 00:04:08,753
So I'm simply just kind of cleaning up my code a bit.

93
00:04:12,250 --> 00:04:14,410
All righty, so regarding compiler flags,

94
00:04:14,410 --> 00:04:16,370
the get set accessor feature

95
00:04:16,370 --> 00:04:19,510
is only supported in ES5 and higher.

96
00:04:19,510 --> 00:04:22,170
You have to manually set a compiler flag

97
00:04:22,170 --> 00:04:24,300
in order to compile the code.

98
00:04:24,300 --> 00:04:29,140
So when you do a tsc you have to give --target ES5.

99
00:04:29,140 --> 00:04:31,430
If you don't provide this information

100
00:04:31,430 --> 00:04:33,480
you'll actually get an error where the compiler will say,

101
00:04:33,480 --> 00:04:37,090
hey, this feature's only available in ES5 or higher.

102
00:04:37,090 --> 00:04:39,853
So you have to explicitly give this compiler flag.

103
00:04:43,270 --> 00:04:44,290
So you may have noticed that

104
00:04:44,290 --> 00:04:46,210
we have a lot of compiler flags.

105
00:04:46,210 --> 00:04:47,810
It's too much stuff to remember,

106
00:04:47,810 --> 00:04:50,300
and it's really easy to forget.

107
00:04:50,300 --> 00:04:52,430
So wouldn't it be great to set this up

108
00:04:52,430 --> 00:04:54,267
in a configuration file?

109
00:04:54,267 --> 00:04:57,780
And the answer's yes and TypeScript has a solution.

110
00:04:57,780 --> 00:05:00,873
They have a config file called tsconfig.json.

111
00:05:04,230 --> 00:05:07,750
So this tsconfigjson file defines compiler options

112
00:05:07,750 --> 00:05:09,340
and project settings.

113
00:05:09,340 --> 00:05:10,660
So you simply place this file

114
00:05:10,660 --> 00:05:12,400
in the root of your project directory.

115
00:05:12,400 --> 00:05:15,970
So here's a very simple tsconfig.json file.

116
00:05:15,970 --> 00:05:17,530
And in this config we're simply

117
00:05:17,530 --> 00:05:20,580
setting some compiler options or compiler flags

118
00:05:20,580 --> 00:05:25,343
so we set the noEmitOnError to true and target for es5.

119
00:05:29,263 --> 00:05:31,150
And so if you don't want to manually create this file,

120
00:05:31,150 --> 00:05:34,420
you can also generate a template for this configuration.

121
00:05:34,420 --> 00:05:36,100
So in your directory and your project

122
00:05:36,100 --> 00:05:39,450
you simply say ts init and it'll generate a default

123
00:05:39,450 --> 00:05:41,970
tsconfig.json file.

124
00:05:41,970 --> 00:05:45,310
And then you simply edit the tsconfig.json file accordingly

125
00:05:45,310 --> 00:05:47,633
for your given project requirements.

126
00:05:51,710 --> 00:05:54,173
And then once your project has a tsconfig.json file,

127
00:05:54,173 --> 00:05:57,370
then you can compile it by simply giving the tsc command.

128
00:05:57,370 --> 00:05:58,680
And there's no need to give the names

129
00:05:58,680 --> 00:05:59,940
of your TypeScript files.

130
00:05:59,940 --> 00:06:02,963
By default it'll compile all *.ts files.

131
00:06:04,470 --> 00:06:06,010
And there's additional configurations

132
00:06:06,010 --> 00:06:08,580
you can set for the tsconfig.json file

133
00:06:08,580 --> 00:06:11,630
you can view the documentation to learn all of the details.

134
00:06:11,630 --> 00:06:16,630
Simply visit the link here www.luv2code.com/tsconfig-docs

135
00:06:16,800 --> 00:06:18,560
and I'll redirect you to the official

136
00:06:18,560 --> 00:06:20,503
tsconfig documentation.

137
00:06:24,510 --> 00:06:26,180
All righty, so just to kind of wrap up here,

138
00:06:26,180 --> 00:06:28,457
so we're making use of accessors, the get sets,

139
00:06:28,457 --> 00:06:30,280
and we have our fields that are private.

140
00:06:30,280 --> 00:06:31,680
We make use of these accessors,

141
00:06:31,680 --> 00:06:34,660
get space firstName, set space firstName.

142
00:06:34,660 --> 00:06:36,010
And then we make the assignments,

143
00:06:36,010 --> 00:06:37,680
and behind the scenes TypeScript will call

144
00:06:37,680 --> 00:06:41,703
the appropriate accessors for getting and setting the data.

145
00:06:43,960 --> 00:06:46,200
All righty, so let's go ahead and move into our IDE

146
00:06:46,200 --> 00:06:47,550
and let's write the code here,

147
00:06:47,550 --> 00:06:48,840
and let's test it out.

148
00:06:48,840 --> 00:06:51,113
So I'll see ya in the next video.

