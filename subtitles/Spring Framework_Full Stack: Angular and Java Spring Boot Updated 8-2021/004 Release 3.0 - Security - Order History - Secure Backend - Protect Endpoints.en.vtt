WEBVTT
1
00:00:01.080 --> 00:00:03.130
<v Instructor>Okay, so we're almost done here.</v>

2
00:00:03.130 --> 00:00:04.410
We're on our final step.

3
00:00:04.410 --> 00:00:06.640
Step 4 of protecting the endpoints

4
00:00:06.640 --> 00:00:08.790
in the Spring Security configuration class.

5
00:00:21.350 --> 00:00:23.650
All right, so let's go ahead and move into our code here.

6
00:00:23.650 --> 00:00:27.063
And we're going to create a new class in the config package.

7
00:00:37.420 --> 00:00:39.490
We choose New Java Class

8
00:00:39.490 --> 00:00:41.128
and we give the name,

9
00:00:41.128 --> 00:00:42.961
SecurityConfiguration.

10
00:00:49.310 --> 00:00:50.143
Give me one second here,

11
00:00:50.143 --> 00:00:51.363
I'll expand my window.

12
00:00:56.480 --> 00:00:59.393
And I'll annotate this with @Configuration.

13
00:01:03.690 --> 00:01:07.730
And then we'll have this class extend the Spring Security,

14
00:01:07.730 --> 00:01:09.313
webSecurityConfigurerAdapter class.

15
00:01:16.760 --> 00:01:19.860
And what we'll do here is we'll override a method,

16
00:01:19.860 --> 00:01:22.200
configure for the

17
00:01:22.200 --> 00:01:24.720
http security parameter.

18
00:01:24.720 --> 00:01:25.560
So I'll just go ahead

19
00:01:25.560 --> 00:01:29.753
and use the IDE to generate a given method for me.

20
00:01:31.000 --> 00:01:33.763
So I'm going to override/implement.

21
00:01:43.990 --> 00:01:45.440
And I'll select the method here

22
00:01:45.440 --> 00:01:49.393
configure that has the http security parameter.

23
00:01:57.900 --> 00:01:58.733
Okay, great.

24
00:01:58.733 --> 00:02:01.430
So I have a stub for this method in place now.

25
00:02:01.430 --> 00:02:02.263
That's good.

26
00:02:10.530 --> 00:02:12.510
And the main thing I want to do in this method here

27
00:02:12.510 --> 00:02:16.020
is protect the end point for /api/orders,

28
00:02:16.020 --> 00:02:18.073
so securing the back end.

29
00:02:20.070 --> 00:02:22.213
So I set up the authorized requests.

30
00:02:35.480 --> 00:02:37.210
I'll set up my antMatchers

31
00:02:37.210 --> 00:02:38.830
for the given endpoint

32
00:02:39.695 --> 00:02:42.050
/api/orders**.

33
00:02:43.658 --> 00:02:45.520
So apply this to this current path

34
00:02:45.520 --> 00:02:47.683
and all sub paths recursively.

35
00:02:53.317 --> 00:02:56.017
.authenticated means only for the authenticated users.

36
00:03:03.240 --> 00:03:06.710
We'll form and here for the OAuth2ResourceServer.

37
00:03:06.710 --> 00:03:08.943
So this adds the Resource Server support.

38
00:03:13.380 --> 00:03:15.280
And then the .JWT

39
00:03:15.280 --> 00:03:19.323
for processing JWT bearer tokens.

40
00:03:23.650 --> 00:03:25.540
So again, here we're protecting the end point

41
00:03:25.540 --> 00:03:28.040
that's only accessible to the authenticated users.

42
00:03:30.602 --> 00:03:33.623
And then we're configuring OAuth2 Resource Server support.

43
00:03:37.780 --> 00:03:39.080
And then finally, we're enabling

44
00:03:39.080 --> 00:03:42.083
the JWT-encoded bearer token support.

45
00:03:43.580 --> 00:03:44.980
So reading that information

46
00:03:44.980 --> 00:03:46.923
coming across in that request header.

47
00:03:50.550 --> 00:03:52.700
And one other item here is I'll add support

48
00:03:52.700 --> 00:03:53.750
for the CORS filters.

49
00:03:57.580 --> 00:03:59.863
So I just make use of http.cors.

50
00:04:08.960 --> 00:04:10.320
And that's basically it here

51
00:04:10.320 --> 00:04:14.050
for the initial coding here for our security configuration.

52
00:04:14.050 --> 00:04:15.200
So this looks really good.

53
00:04:15.200 --> 00:04:17.550
I'm happy with the work that we've done so far.

