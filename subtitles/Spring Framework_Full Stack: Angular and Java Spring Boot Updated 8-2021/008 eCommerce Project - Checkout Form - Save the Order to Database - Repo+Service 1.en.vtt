WEBVTT
1
00:00:01.090 --> 00:00:02.780
<v ->All righty, so just moving right ahead,</v>

2
00:00:02.780 --> 00:00:05.320
in this video we'll cover steps four and five

3
00:00:05.320 --> 00:00:06.810
of creating a repository,

4
00:00:06.810 --> 00:00:08.603
and also creating a service.

5
00:00:23.610 --> 00:00:26.190
So we'll move on to our DAO package

6
00:00:26.190 --> 00:00:28.900
and we'll create a new JPA repository,

7
00:00:28.900 --> 00:00:30.573
the CustomerRepository.

8
00:00:41.057 --> 00:00:43.724
And be sure to choose interface,

9
00:00:47.470 --> 00:00:49.670
because remember with spring data JPA,

10
00:00:49.670 --> 00:00:50.968
we simply define an interface

11
00:00:50.968 --> 00:00:53.783
and they give us all of the functionality for free.

12
00:00:59.310 --> 00:01:01.710
So here's our Customer Repository interface

13
00:01:02.560 --> 00:01:06.010
and we simply extend JPA repository.

14
00:01:06.010 --> 00:01:08.610
We give a reference to our entity class,

15
00:01:08.610 --> 00:01:10.703
comma the primary key type.

16
00:01:15.511 --> 00:01:18.344
And so that's customer comma long.

17
00:01:19.900 --> 00:01:21.280
So customer's our entity type,

18
00:01:21.280 --> 00:01:22.823
long is the primary key type.

19
00:01:25.020 --> 00:01:26.480
And the reason we're using customer here,

20
00:01:26.480 --> 00:01:29.000
because the customer has a collection of orders.

21
00:01:29.000 --> 00:01:30.920
So when a purchase comes across,

22
00:01:30.920 --> 00:01:32.240
we'll grab the customer,

23
00:01:32.240 --> 00:01:33.740
assemble it accordingly

24
00:01:33.740 --> 00:01:36.016
and then we'll save the actual customer

25
00:01:36.016 --> 00:01:38.443
using his customer repository.

26
00:01:47.810 --> 00:01:49.500
All righty, so that's our repository.

27
00:01:49.500 --> 00:01:52.610
Let's go ahead and take a look at creating our service.

28
00:01:52.610 --> 00:01:55.963
So the one thing I need to do is create a service package.

29
00:02:07.850 --> 00:02:08.990
In this package,

30
00:02:08.990 --> 00:02:11.853
I'll create a new interface for my checkout service.

31
00:02:17.280 --> 00:02:19.743
Check out service, be sure to choose interface.

32
00:02:36.910 --> 00:02:38.410
And we'll define one method

33
00:02:38.410 --> 00:02:41.040
that we'll have here for our checkout.

34
00:02:41.040 --> 00:02:43.340
So it's called Place Order.

35
00:02:43.340 --> 00:02:46.290
We'll pass on that purchase DTO

36
00:02:47.670 --> 00:02:50.210
and then we'll send back the purchase response

37
00:02:50.210 --> 00:02:51.870
and we've created these classes already,

38
00:02:51.870 --> 00:02:53.783
so you know what they're all about.

39
00:02:55.590 --> 00:02:56.423
All righty, so let's go ahead

40
00:02:56.423 --> 00:02:59.860
and create our new Java class CheckoutServiceImpl.

41
00:03:23.050 --> 00:03:23.883
And what we'll do is

42
00:03:23.883 --> 00:03:26.823
we'll implement the checkout service interface.

43
00:03:29.470 --> 00:03:30.790
And it's going to give us some errors,

44
00:03:30.790 --> 00:03:31.623
but that's okay,

45
00:03:31.623 --> 00:03:32.456
we simply go through

46
00:03:32.456 --> 00:03:35.153
and let the ID implement those methods for us.

47
00:03:40.220 --> 00:03:41.373
Right, that looks good.

48
00:03:43.540 --> 00:03:45.460
And since this is a service implementation,

49
00:03:45.460 --> 00:03:50.040
I need to annotate this class with at service

50
00:03:50.040 --> 00:03:53.323
such that Spring will pick it up during component scanning.

51
00:03:56.850 --> 00:03:58.370
So remember from our architecture,

52
00:03:58.370 --> 00:04:01.030
our service will make use of a repository,

53
00:04:01.030 --> 00:04:03.120
the spring data JPA repository,

54
00:04:03.120 --> 00:04:06.223
that's the CustomerRepository that we've just created.

55
00:04:18.144 --> 00:04:20.200
And then I'll set up a constructor here

56
00:04:20.200 --> 00:04:22.733
to inject that repository.

57
00:04:37.420 --> 00:04:38.253
And so in this case,

58
00:04:38.253 --> 00:04:39.630
the autowired are optional

59
00:04:39.630 --> 00:04:41.120
since we only have one constructor,

60
00:04:41.120 --> 00:04:42.320
so we really don't need it.

61
00:04:42.320 --> 00:04:43.760
So I'll simply take it off.

62
00:04:43.760 --> 00:04:45.480
Spring will know how to autowire

63
00:04:45.480 --> 00:04:46.777
and inject this automatically

64
00:04:46.777 --> 00:04:49.483
since there's only one constructor.

65
00:04:52.290 --> 00:04:54.923
All righty so this looks pretty good, I'm happy with it.

