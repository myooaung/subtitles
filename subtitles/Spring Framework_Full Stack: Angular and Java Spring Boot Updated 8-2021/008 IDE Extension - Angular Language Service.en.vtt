WEBVTT
1
00:00:01.369 --> 00:00:02.400
<v Instructor>In this video we'll cover</v>

2
00:00:02.400 --> 00:00:04.583
the Angular Language Service.

3
00:00:08.020 --> 00:00:11.130
Angular and JavaScript is very lenient.

4
00:00:11.130 --> 00:00:13.310
Even though we're using TypeScript,

5
00:00:13.310 --> 00:00:16.693
some bugs can still slip through our application.

6
00:00:18.920 --> 00:00:21.470
For example our product class does not

7
00:00:21.470 --> 00:00:24.160
have an id property defined,

8
00:00:24.160 --> 00:00:26.800
but we can still assign data to it.

9
00:00:26.800 --> 00:00:27.920
What?

10
00:00:27.920 --> 00:00:30.280
So if you noticed in some of our previous videos,

11
00:00:30.280 --> 00:00:32.060
if you were very observant,

12
00:00:32.060 --> 00:00:33.963
over on the left hand side we have the JSON

13
00:00:33.963 --> 00:00:35.270
that was being passed back

14
00:00:35.270 --> 00:00:37.630
from the Spring Data REST application.

15
00:00:37.630 --> 00:00:39.550
And then this data was being mapped over

16
00:00:39.550 --> 00:00:42.890
to a product class on the TypeScript side,

17
00:00:42.890 --> 00:00:44.860
we had a kind of one to one mapping

18
00:00:44.860 --> 00:00:46.470
on these properties here.

19
00:00:46.470 --> 00:00:49.730
However, there was no id field in our product class

20
00:00:49.730 --> 00:00:51.270
on the TypeScript side.

21
00:00:51.270 --> 00:00:54.330
But our application still worked,

22
00:00:54.330 --> 00:00:58.773
and we didn't have any errors in the browser console.

23
00:00:59.700 --> 00:01:00.533
Interesting.

24
00:01:03.840 --> 00:01:06.220
And we also referenced the Product id for

25
00:01:06.220 --> 00:01:07.880
our master/detail view,

26
00:01:07.880 --> 00:01:10.040
so in our application when we create links

27
00:01:10.040 --> 00:01:12.040
to go to the details page,

28
00:01:12.040 --> 00:01:14.280
we'd say tempProduct dot id.

29
00:01:14.280 --> 00:01:16.470
So we would access the id property.

30
00:01:16.470 --> 00:01:18.850
But again, we just saw the source code

31
00:01:18.850 --> 00:01:22.160
in the product class where that field doesn't exist.

32
00:01:22.160 --> 00:01:24.250
However, our app still worked,

33
00:01:24.250 --> 00:01:27.003
and there were no errors in the browser console.

34
00:01:30.870 --> 00:01:33.580
Ideally, we'd like to add more compile time checks

35
00:01:33.580 --> 00:01:35.430
for our application.

36
00:01:35.430 --> 00:01:39.050
So the Angular team provides the Angular Language Service,

37
00:01:39.050 --> 00:01:41.310
and this service provides additional support

38
00:01:41.310 --> 00:01:45.870
for compilation errors, code completions, and so on.

39
00:01:45.870 --> 00:01:49.079
The link on the slide takes you to the official website

40
00:01:49.079 --> 00:01:51.843
for the Angular Language Service.

41
00:01:54.540 --> 00:01:55.540
All right, so a bit more here

42
00:01:55.540 --> 00:01:56.960
on the Angular Language Service.

43
00:01:56.960 --> 00:01:59.370
It's available as an extension for the code editors,

44
00:01:59.370 --> 00:02:02.490
like Visual Studio Code, WebStorm, et cetera.

45
00:02:02.490 --> 00:02:05.170
We'll install the extension in Visual Studio Code.

46
00:02:05.170 --> 00:02:08.430
Simply go to Menu option, Go to View, Extensions.

47
00:02:08.430 --> 00:02:11.290
You search for Angular Language Service.

48
00:02:11.290 --> 00:02:12.810
It'll give you a list of extensions here,

49
00:02:12.810 --> 00:02:15.420
and you select the one for Angular Language Service

50
00:02:15.420 --> 00:02:16.920
and do an install.

51
00:02:16.920 --> 00:02:18.090
And it'll install it,

52
00:02:18.090 --> 00:02:20.098
and give you some nice compilation errors

53
00:02:20.098 --> 00:02:22.170
and code completion and so on.

54
00:02:22.170 --> 00:02:24.160
And we'll actually move into our IDE,

55
00:02:24.160 --> 00:02:25.893
and we'll go through this process.

56
00:02:30.800 --> 00:02:32.990
Alright, so we actually have a bug in our application.

57
00:02:32.990 --> 00:02:34.480
So in our product class,

58
00:02:34.480 --> 00:02:37.233
we don't have an id property defined.

59
00:02:42.020 --> 00:02:44.980
And in our product-list-grid component dot html,

60
00:02:44.980 --> 00:02:47.560
we would set up our router links for master detail view,

61
00:02:47.560 --> 00:02:50.090
and we'd make use of that id property.

62
00:02:50.090 --> 00:02:53.350
But our app still worked and there were no

63
00:02:53.350 --> 00:02:55.683
errors in the browser console.

64
00:03:01.100 --> 00:03:03.540
So let's just run our app real quick.

65
00:03:03.540 --> 00:03:05.430
Can access it in a browser,

66
00:03:05.430 --> 00:03:08.803
and I can go look at the console.

67
00:03:11.751 --> 00:03:14.500
And so right now I just have my normal logging stuff.

68
00:03:15.354 --> 00:03:19.080
Going to just jump around in the application, try some links.

69
00:03:19.080 --> 00:03:20.370
And the app still works,

70
00:03:20.370 --> 00:03:21.930
no errors in the browser console,

71
00:03:21.930 --> 00:03:24.660
even doing master detail view.

72
00:03:24.660 --> 00:03:26.933
No errors, strange.

73
00:03:29.070 --> 00:03:30.970
I can even go through and do a search.

74
00:03:32.390 --> 00:03:33.670
And again no errors.

75
00:03:33.670 --> 00:03:38.220
So basically JavaScript and Angular very lenient,

76
00:03:38.220 --> 00:03:41.190
where you can actually access fields in certain cases

77
00:03:41.190 --> 00:03:43.260
that are not actually defined.

78
00:03:43.260 --> 00:03:45.520
So we need some way of avoiding this issue

79
00:03:45.520 --> 00:03:48.563
because it could cause some big problems down the road.

80
00:03:50.330 --> 00:03:52.800
And this is the part with full stack development

81
00:03:52.800 --> 00:03:56.150
where I really miss the Java language.

82
00:03:56.150 --> 00:04:00.330
In the Java world our compiler works as advertised,

83
00:04:00.330 --> 00:04:02.820
and we wouldn't have scenarios like this.

84
00:04:02.820 --> 00:04:05.403
But anyways I really miss Java.

85
00:04:06.300 --> 00:04:08.550
But now lets kind of focus back on

86
00:04:08.550 --> 00:04:11.233
Angular type script and JavaScript.

87
00:04:15.890 --> 00:04:19.160
So in our IDE here we can install the extension

88
00:04:19.160 --> 00:04:21.173
for the Angular Language Service.

89
00:04:32.100 --> 00:04:35.933
And up top we type in Angular Language Service.

90
00:04:41.790 --> 00:04:44.480
Select that item, I'll kind of swing over here.

91
00:04:44.480 --> 00:04:46.120
Again make sure that this is the one

92
00:04:46.120 --> 00:04:48.260
from the Angular Dev Team.

93
00:04:48.260 --> 00:04:49.403
It says Angular,

94
00:04:50.250 --> 00:04:51.883
and then hit install.

95
00:04:53.640 --> 00:04:55.030
Okay great so once it's installed

96
00:04:55.030 --> 00:04:57.483
we can kind of close off that item there.

97
00:04:58.550 --> 00:04:59.883
Zoom out for a second.

98
00:05:05.270 --> 00:05:07.070
And let me zoom in here at the bottom and,

99
00:05:07.070 --> 00:05:09.080
Yay! We have errors.

100
00:05:09.080 --> 00:05:10.200
This is good.

101
00:05:10.200 --> 00:05:11.710
And it says, good stuff.

102
00:05:11.710 --> 00:05:14.700
Indentifier id is not defined.

103
00:05:14.700 --> 00:05:17.290
Product does not contain such a member.

104
00:05:17.290 --> 00:05:18.150
Yes!

105
00:05:18.150 --> 00:05:20.700
This is exactly what I was looking for.

106
00:05:20.700 --> 00:05:23.490
Please tell me about this bug, yes!

107
00:05:23.490 --> 00:05:26.330
And then we can also look at the details here

108
00:05:26.330 --> 00:05:29.470
so that'll tell you that this happens on line 11.

109
00:05:29.470 --> 00:05:31.640
Starting at column 53

110
00:05:31.640 --> 00:05:35.223
and also on line 15, column 53.

111
00:05:38.640 --> 00:05:40.700
So this is pretty good.

112
00:05:40.700 --> 00:05:42.820
So great, so I'm getting the error messages

113
00:05:42.820 --> 00:05:43.883
as desired.

114
00:05:45.130 --> 00:05:47.933
Just the simple things. (laughs)

115
00:05:52.060 --> 00:05:53.240
So we can resolve this right.

116
00:05:53.240 --> 00:05:55.440
It's very simple, very easy to fix.

117
00:05:55.440 --> 00:05:58.020
Just define that given property id.

118
00:05:58.020 --> 00:05:59.507
We'll define it as a string.

119
00:06:02.220 --> 00:06:03.380
And now we save it.

120
00:06:03.380 --> 00:06:05.460
You can notice here at the bottom, no errors.

121
00:06:05.460 --> 00:06:08.140
Or no problems, that's great.

122
00:06:08.140 --> 00:06:11.420
And we can go back to our HTML and no more issues.

123
00:06:11.420 --> 00:06:12.760
So this is really good.

124
00:06:12.760 --> 00:06:14.880
So that part helps us out.

125
00:06:14.880 --> 00:06:17.620
With just finding compilation errors or issues

126
00:06:17.620 --> 00:06:18.733
in our application.

127
00:06:23.050 --> 00:06:24.500
So anyways swing into our application,

128
00:06:24.500 --> 00:06:25.750
everything works as desired,

129
00:06:25.750 --> 00:06:26.740
everything's good to go.

130
00:06:26.740 --> 00:06:28.830
Just like before but we've kind of just

131
00:06:28.830 --> 00:06:30.640
cleaned up our code a bit in the background

132
00:06:30.640 --> 00:06:33.080
and removed some issues that could have possibly

133
00:06:33.080 --> 00:06:34.953
caused more problems in the future.

134
00:06:41.504 --> 00:06:42.930
And this was all thanks to using

135
00:06:42.930 --> 00:06:44.680
that Angular Language Service.

136
00:06:44.680 --> 00:06:47.480
And we can simply view that extension here again.

137
00:06:47.480 --> 00:06:49.630
So I'll just simply go to View, Extensions,

138
00:06:50.760 --> 00:06:53.210
and then I can choose Show me all of

139
00:06:53.210 --> 00:06:55.393
my Installed Extensions.

140
00:06:58.300 --> 00:06:59.960
And we can see that the Angular Language Service

141
00:06:59.960 --> 00:07:02.840
is the only extensions I have installed right now.

142
00:07:02.840 --> 00:07:05.820
So I'd like to say good job my friend

