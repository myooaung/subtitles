WEBVTT
1
00:00:01.140 --> 00:00:04.040
<v Instructor>In this video we're going to cover pagination.</v>

2
00:00:07.240 --> 00:00:10.483
So, pagination is useful for handling large amounts of data,

3
00:00:10.483 --> 00:00:13.440
will show the user a small subset of data,

4
00:00:13.440 --> 00:00:14.650
a page of data,

5
00:00:14.650 --> 00:00:16.220
and then the user can click on the links

6
00:00:16.220 --> 00:00:17.830
to view the other pages,

7
00:00:17.830 --> 00:00:20.410
and you've seen this before on Google search results,

8
00:00:20.410 --> 00:00:21.243
and so on.

9
00:00:24.560 --> 00:00:27.160
So, let's look at some pagination concepts.

10
00:00:27.160 --> 00:00:30.103
So, we query the database for a list of products,

11
00:00:31.490 --> 00:00:34.890
and what we'll do is we'll show the user a page of data.

12
00:00:34.890 --> 00:00:36.870
So, we don't show the user everything,

13
00:00:36.870 --> 00:00:39.190
only a page of data at a time.

14
00:00:39.190 --> 00:00:42.370
So, in this example, the page size is five.

15
00:00:42.370 --> 00:00:45.480
And we only provide a count of the total elements,

16
00:00:45.480 --> 00:00:47.600
for example, 100,000 products.

17
00:00:47.600 --> 00:00:50.060
But we don't return 100,000 products.

18
00:00:50.060 --> 00:00:53.673
We only return a small subset, or a page, of data.

19
00:00:57.380 --> 00:00:58.780
We'll need to have pagination support

20
00:00:58.780 --> 00:01:01.040
on the back-end, using Spring Boot.

21
00:01:01.040 --> 00:01:02.810
Also, we'll need pagination support

22
00:01:02.810 --> 00:01:04.653
on the front-end, using Angular.

23
00:01:08.210 --> 00:01:11.200
Our Spring Boot back-end makes use of Spring Data REST,

24
00:01:11.200 --> 00:01:13.840
and Spring Data REST provides pagination support

25
00:01:13.840 --> 00:01:16.000
out of the box, yes!

26
00:01:16.000 --> 00:01:17.640
So, you can go to the link here, on the slide.

27
00:01:17.640 --> 00:01:18.473
It'll redirect you

28
00:01:18.473 --> 00:01:21.000
to the official Spring Data REST documentation,

29
00:01:21.000 --> 00:01:24.010
and you can see all the information about pagination support

30
00:01:24.010 --> 00:01:25.453
in Spring Data REST.

31
00:01:29.580 --> 00:01:32.300
By default, Spring Data REST returns 20 elements,

32
00:01:32.300 --> 00:01:35.233
and we can customize this by passing in parameters.

33
00:01:38.920 --> 00:01:40.800
So, we can make use of the page parameter,

34
00:01:40.800 --> 00:01:43.873
that's the page number to access, it's zero-based.

35
00:01:45.130 --> 00:01:46.640
We can use the size parameter,

36
00:01:46.640 --> 00:01:48.920
so this is the size of the page to return,

37
00:01:48.920 --> 00:01:51.163
basically, the items per page.

38
00:01:54.120 --> 00:01:55.000
Alrighty, so let's go ahead

39
00:01:55.000 --> 00:01:57.930
and look at some pagination examples.

40
00:01:57.930 --> 00:02:00.840
So, to get the first page with the page size of 10,

41
00:02:00.840 --> 00:02:02.820
we give our REST API,

42
00:02:02.820 --> 00:02:06.030
and then we have page equals zero and size equals 10.

43
00:02:06.030 --> 00:02:07.770
Remember, pages are zero-based,

44
00:02:07.770 --> 00:02:10.510
so the first page is at position zero.

45
00:02:10.510 --> 00:02:13.640
Then to get the second page, with a page size of 10,

46
00:02:13.640 --> 00:02:16.660
we have page equals one and size equals 10.

47
00:02:16.660 --> 00:02:18.800
So, here the second page is at position one,

48
00:02:18.800 --> 00:02:20.593
because everything is zero-based.

49
00:02:23.430 --> 00:02:24.830
When using Spring Data REST,

50
00:02:24.830 --> 00:02:27.710
the response metadata has valuable information.

51
00:02:27.710 --> 00:02:30.900
So, in the JSON response, you have the array of products,

52
00:02:30.900 --> 00:02:32.510
but also there's a section here

53
00:02:32.510 --> 00:02:34.810
that has information about the page.

54
00:02:34.810 --> 00:02:36.650
So, here we have size 10.

55
00:02:36.650 --> 00:02:38.910
That's the size of this page.

56
00:02:38.910 --> 00:02:40.140
And then we have totalElements.

57
00:02:40.140 --> 00:02:42.570
That's the grand total of all elements in the database

58
00:02:42.570 --> 00:02:43.660
for this query.

59
00:02:43.660 --> 00:02:45.300
But we're not returning all the elements,

60
00:02:45.300 --> 00:02:48.000
just the count for informational purposes only.

61
00:02:48.000 --> 00:02:50.620
Then they also give you the total pages that are available.

62
00:02:50.620 --> 00:02:52.660
And then they'll specify the current page number

63
00:02:52.660 --> 00:02:55.313
that you're viewing in this JSON response.

64
00:02:57.480 --> 00:03:00.590
So, let's look at a quick demo here in our browser.

65
00:03:00.590 --> 00:03:03.483
So, I'll make use of page equals zero, size 10.

66
00:03:05.500 --> 00:03:06.710
So, there's our JSON,

67
00:03:06.710 --> 00:03:09.470
and so up top, the array of products.

68
00:03:09.470 --> 00:03:12.470
But all the way at the bottom here of this JSON response,

69
00:03:12.470 --> 00:03:15.440
we have that metadata, which is very valuable.

70
00:03:15.440 --> 00:03:19.930
So, there you go: page, size 10, elements, pages, number.

71
00:03:19.930 --> 00:03:22.830
So, that information comes back in the JSON response

72
00:03:22.830 --> 00:03:24.783
when you make use of Spring Data REST.

73
00:03:27.410 --> 00:03:29.380
And we can do a similar example here.

74
00:03:29.380 --> 00:03:32.883
So, page equals one, size of 10.

75
00:03:35.160 --> 00:03:37.890
We scroll all the way down to the bottom again,

76
00:03:37.890 --> 00:03:39.470
and so we have the metadata:

77
00:03:39.470 --> 00:03:43.460
size, elements, pages, and number, one.

78
00:03:43.460 --> 00:03:44.870
So, we're viewing the second page,

79
00:03:44.870 --> 00:03:47.133
but number one because it's zero-based.

80
00:03:48.560 --> 00:03:50.230
All right, so that's the piece, there, on the metadata,

81
00:03:50.230 --> 00:03:52.530
and why don't you use that in our application.

82
00:03:54.040 --> 00:03:55.890
Okay, so pagination with Angular.

83
00:03:55.890 --> 00:03:58.940
There are many pagination solutions available for Angular.

84
00:03:58.940 --> 00:03:59.773
We'll make use

85
00:03:59.773 --> 00:04:02.960
of a popular component framework called ng-bootstrap.

86
00:04:02.960 --> 00:04:05.100
So, the link is here on the screen.

87
00:04:05.100 --> 00:04:06.580
And basically, it's just a collection

88
00:04:06.580 --> 00:04:09.260
of Bootstrap widgets built the Angular way,

89
00:04:09.260 --> 00:04:12.470
so you can use these widgets in an Angular application.

90
00:04:12.470 --> 00:04:13.620
They're designed specifically

91
00:04:13.620 --> 00:04:16.213
to take advantage of the Angular framework.

92
00:04:19.080 --> 00:04:21.770
So, this component framework has a number of components,

93
00:04:21.770 --> 00:04:23.730
like accordions.

94
00:04:23.730 --> 00:04:25.380
They have datepickers.

95
00:04:25.380 --> 00:04:28.640
You can make use of progress bars with labels.

96
00:04:28.640 --> 00:04:31.540
You can also make use of pagination controls, and so on.

97
00:04:31.540 --> 00:04:34.600
And so, we'll actually make use of the pagination components

98
00:04:34.600 --> 00:04:36.523
in this given video series.

99
00:04:40.270 --> 00:04:43.960
So, the pagination component has a number of parameters.

100
00:04:43.960 --> 00:04:46.330
It has the page, the page number to access.

101
00:04:46.330 --> 00:04:48.360
It's one-based, ooh!

102
00:04:48.360 --> 00:04:52.240
The pageSize, the size of the page, defaults to 10.

103
00:04:52.240 --> 00:04:54.923
The collectionSize, meaning the total number of items.

104
00:04:54.923 --> 00:04:55.857
And then pageChange.

105
00:04:55.857 --> 00:04:57.147
That's the event handler for page change events.

106
00:05:02.072 --> 00:05:03.250
And here's a basic example

107
00:05:03.250 --> 00:05:05.280
of using the pagination component.

108
00:05:05.280 --> 00:05:07.730
We make use of NG pagination,

109
00:05:07.730 --> 00:05:09.290
and we set up our parameters,

110
00:05:09.290 --> 00:05:12.483
so this component will generate links for pagination.

111
00:05:15.530 --> 00:05:17.190
And we'll actually create the code

112
00:05:17.190 --> 00:05:19.370
to combine this for our project,

113
00:05:19.370 --> 00:05:21.560
and so we'll do all of this work from scratch

114
00:05:21.560 --> 00:05:22.620
in the upcoming videos.

115
00:05:22.620 --> 00:05:25.613
And so, you'll see how this works for our given project.

