1
00:00:02,150 --> 00:00:03,340
<v Instructor>Good, so that was a nice little discussion</v>

2
00:00:03,340 --> 00:00:04,570
about UUID.

3
00:00:04,570 --> 00:00:07,283
Java has a built-in class called UUID.

4
00:00:12,390 --> 00:00:13,600
Create this random UUID

5
00:00:13,600 --> 00:00:14,840
and we get a string version of it

6
00:00:14,840 --> 00:00:15,740
and we can make use of it.

7
00:00:15,740 --> 00:00:17,897
So that's how that piece works out.

8
00:00:22,950 --> 00:00:26,510
So let's move back into our coding here for place order.

9
00:00:26,510 --> 00:00:27,343
Now we'll go through

10
00:00:27,343 --> 00:00:28,710
and we'll populate the order

11
00:00:28,710 --> 00:00:30,233
with the order items.

12
00:00:34,490 --> 00:00:36,930
So I get the order items from

13
00:00:38,620 --> 00:00:40,313
the purchase DTO.

14
00:00:45,130 --> 00:00:47,190
And then do an order items dot for each.

15
00:00:47,190 --> 00:00:48,230
So I'm basically going to loop over

16
00:00:48,230 --> 00:00:50,080
each one of those order items,

17
00:00:50,080 --> 00:00:53,183
and I will add that to the order.

18
00:01:03,130 --> 00:01:04,830
So, really nice coding here.

19
00:01:04,830 --> 00:01:06,620
So I'm making use of Lambdas

20
00:01:06,620 --> 00:01:08,840
and as for each operator

21
00:01:08,840 --> 00:01:11,110
to loop through all of those order items

22
00:01:11,110 --> 00:01:12,320
from that collection

23
00:01:12,320 --> 00:01:15,023
and add them to the order, pretty cool.

24
00:01:22,390 --> 00:01:23,590
Then next we'll simply go through

25
00:01:23,590 --> 00:01:25,570
and populate the order with the billing address

26
00:01:25,570 --> 00:01:26,833
and the shipping address.

27
00:01:46,820 --> 00:01:48,753
Populate the customer with the order.

28
00:02:08,150 --> 00:02:08,983
Then we'll go through

29
00:02:08,983 --> 00:02:10,090
and we'll save it to the database

30
00:02:10,090 --> 00:02:11,720
using our JPA repository

31
00:02:11,720 --> 00:02:13,943
for our customer repository.

32
00:02:24,100 --> 00:02:25,820
And finally we'll return a response

33
00:02:25,820 --> 00:02:28,402
and so we'll make use of that purchase response

34
00:02:28,402 --> 00:02:31,940
and we'll pass in the order tracking number

35
00:02:31,940 --> 00:02:33,660
that we generated.

36
00:02:33,660 --> 00:02:36,693
So do the new purchase response order tracking number.

37
00:02:38,630 --> 00:02:40,990
Okay, well actually not okay.

38
00:02:40,990 --> 00:02:42,370
What's the red stuff.

39
00:02:42,370 --> 00:02:43,520
Let's take a look here.

40
00:02:44,640 --> 00:02:47,940
So new purchase response order tracking expected

41
00:02:47,940 --> 00:02:49,760
zero arguments found one

42
00:02:51,670 --> 00:02:53,860
but we're using Lombok

43
00:02:53,860 --> 00:02:56,920
so it should have the constructor force automatically

44
00:02:56,920 --> 00:02:59,890
since we're using @Data.

45
00:02:59,890 --> 00:03:00,919
Okay.

46
00:03:00,919 --> 00:03:02,780
There, that is order tracking number there.

47
00:03:02,780 --> 00:03:03,970
Okay. I spelled it right.

48
00:03:03,970 --> 00:03:05,230
Okay. That that's fine.

49
00:03:05,230 --> 00:03:06,600
So the spelling is fine.

50
00:03:06,600 --> 00:03:10,280
It's something about that purchase response class

51
00:03:11,230 --> 00:03:13,163
and something about my Lombok,

52
00:03:14,500 --> 00:03:16,410
so let me just go ahead and look at the coding here

53
00:03:16,410 --> 00:03:17,740
for this purchase response

54
00:03:24,820 --> 00:03:26,803
and I'm using @Data.

55
00:03:29,050 --> 00:03:29,883
Oh, okay.

56
00:03:29,883 --> 00:03:32,390
They'll give me a constructor, but I need

57
00:03:32,390 --> 00:03:35,140
they'll only do it for final fields.

58
00:03:35,140 --> 00:03:35,973
Got it.

59
00:03:35,973 --> 00:03:36,883
Got it.

60
00:03:36,883 --> 00:03:37,716
Got it.

61
00:03:37,716 --> 00:03:39,316
So I need to say final for that.

62
00:03:47,720 --> 00:03:51,840
Another option is that we could use the @Nonnull annotation

63
00:03:51,840 --> 00:03:53,900
on the field instead of final.

64
00:03:53,900 --> 00:03:55,520
So you can pick either way

65
00:03:55,520 --> 00:03:58,289
but if we wanted to do NonNull just say @NonNull

66
00:03:58,289 --> 00:04:00,340
and private string or the tracking number.

67
00:04:00,340 --> 00:04:02,260
So either way it worked there,

68
00:04:02,260 --> 00:04:04,850
the @Data does a lot of the work for you

69
00:04:04,850 --> 00:04:06,190
as far as creating all the getters

70
00:04:06,190 --> 00:04:09,273
and setters two strings constructors and so on.

71
00:04:10,360 --> 00:04:12,450
And it'll also create the constructors

72
00:04:12,450 --> 00:04:14,420
but you have to make sure that these are for final fields

73
00:04:14,420 --> 00:04:16,730
or they have a number of different rules on that.

74
00:04:16,730 --> 00:04:18,290
If you'd like to get more information

75
00:04:18,290 --> 00:04:21,982
on all these magical Lombok annotations

76
00:04:21,982 --> 00:04:23,703
simply go to the Lombok website

77
00:04:23,703 --> 00:04:25,474
they do a really good job of discussing

78
00:04:25,474 --> 00:04:28,001
what the various annotations are

79
00:04:28,001 --> 00:04:29,890
and also the different scenarios

80
00:04:29,890 --> 00:04:32,433
on when they'll generate the appropriate code.

81
00:04:34,350 --> 00:04:35,183
All right.

82
00:04:35,183 --> 00:04:37,913
So we've kind of resolved that and finished that part of it.

83
00:04:40,140 --> 00:04:44,020
So now if I swing back to my service

84
00:04:44,020 --> 00:04:46,840
then we should be okay on that return statement.

85
00:04:46,840 --> 00:04:49,210
Yep. We're A-OK good job.

86
00:04:49,210 --> 00:04:50,043
All right.

87
00:04:50,043 --> 00:04:50,876
So this looks pretty good.

88
00:04:50,876 --> 00:04:55,165
So we have the coding here for our place order method

89
00:04:55,165 --> 00:05:00,165
in place for saving it to the database.

