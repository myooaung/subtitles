1
00:00:01,280 --> 00:00:02,900
<v ->Alrighty, so let's dive in here.</v>

2
00:00:02,900 --> 00:00:03,910
So we're on step six.

3
00:00:03,910 --> 00:00:06,190
We need to modify our Spring Boot app.

4
00:00:06,190 --> 00:00:09,173
The REST Repository needs a new method.

5
00:00:14,380 --> 00:00:16,740
For this we need to swing over to IntelliJ

6
00:00:16,740 --> 00:00:19,683
so we can make updates to our Spring Boot application.

7
00:00:29,720 --> 00:00:30,910
Let's zoom in here.

8
00:00:30,910 --> 00:00:33,290
And let's move down to our dao package

9
00:00:33,290 --> 00:00:35,740
and open up our Product Repository,

10
00:00:35,740 --> 00:00:38,590
'cause this is the one we'll actually add our new method.

11
00:00:40,750 --> 00:00:42,603
Expand the window here for a second,

12
00:00:47,410 --> 00:00:50,353
and I'll add one of those new query methods.

13
00:01:20,459 --> 00:01:22,110
Okay, so we have the method here.

14
00:01:22,110 --> 00:01:24,270
Let's go ahead and fix some of the imports.

15
00:01:24,270 --> 00:01:27,080
And I'll actually make use of an IntelliJ feature

16
00:01:27,080 --> 00:01:29,923
or setting to handle auto importing.

17
00:01:30,920 --> 00:01:34,123
So I just move into my IntelliJ Preferences.

18
00:01:38,430 --> 00:01:40,023
I'll select Editor.

19
00:01:45,800 --> 00:01:47,743
I'll move down to General,

20
00:01:48,620 --> 00:01:50,743
and I'll choose Auto Import.

21
00:01:53,270 --> 00:01:55,560
Just to kind of help us out as we go through the course

22
00:01:55,560 --> 00:01:58,860
so we don't have to manually import items every time.

23
00:01:58,860 --> 00:02:01,693
So we'll Add unambiguous imports on the fly,

24
00:02:02,810 --> 00:02:05,530
and also Optimize imports on the fly,

25
00:02:05,530 --> 00:02:09,053
just to keep things a bit tidy and nice for us.

26
00:02:23,150 --> 00:02:25,320
And then we'll simply do an import over here,

27
00:02:25,320 --> 00:02:26,730
because this one is ambiguous and

28
00:02:26,730 --> 00:02:28,790
not sure which one to import.

29
00:02:28,790 --> 00:02:30,220
Be sure to import Pageable

30
00:02:30,220 --> 00:02:34,473
from the org.springframework.data.domain.

31
00:02:38,430 --> 00:02:40,580
So just make sure you have the correct imports

32
00:02:40,580 --> 00:02:43,093
up top here for Page and Pageable.

33
00:02:50,650 --> 00:02:53,060
And just as a refresher here, this is a query method

34
00:02:53,060 --> 00:02:55,000
because it starts with findBy.

35
00:02:55,000 --> 00:02:57,490
We're going to match by category id,

36
00:02:57,490 --> 00:02:59,350
and we'll use this parameter value

37
00:02:59,350 --> 00:03:01,443
based on the id parameter.

38
00:03:06,350 --> 00:03:08,530
And also remember, behind the scenes,

39
00:03:08,530 --> 00:03:10,200
Spring will execute a query similar

40
00:03:10,200 --> 00:03:13,690
to SELECT * FROM product where category_id=

41
00:03:13,690 --> 00:03:16,120
and then plug in that given parameter value.

42
00:03:16,120 --> 00:03:18,890
Again, remember, this is all the Spring magic

43
00:03:18,890 --> 00:03:20,280
that happens in the background.

44
00:03:20,280 --> 00:03:22,130
Spring will parse that method

45
00:03:22,130 --> 00:03:24,200
and execute the appropriate query.

46
00:03:24,200 --> 00:03:27,000
And then also Spring Data REST will automatically expose

47
00:03:27,000 --> 00:03:29,300
the endpoint based on that given method name,

48
00:03:29,300 --> 00:03:32,420
so search/findByCategoryId,

49
00:03:32,420 --> 00:03:33,870
and then here we have the ID,

50
00:03:33,870 --> 00:03:38,003
and that's what we pass over to that given REST API.

51
00:03:43,050 --> 00:03:46,080
Alrighty, so let's go ahead and run this version

52
00:03:46,080 --> 00:03:50,860
of our Spring Boot application and view the results.

53
00:03:50,860 --> 00:03:53,620
So if you have your app running be sure to stop it now,

54
00:03:53,620 --> 00:03:55,620
and then we'll go ahead and start it up.

55
00:04:05,300 --> 00:04:08,080
And then I'll simply open up a web browser

56
00:04:08,080 --> 00:04:11,240
and I'll go to a given endpoint just to test this out

57
00:04:11,240 --> 00:04:12,110
to see how it works.

58
00:04:12,110 --> 00:04:17,110
So I'll go to localhost:8080/api/products/search,

59
00:04:18,840 --> 00:04:22,087
then I give that method name findByCategoryId=

60
00:04:24,812 --> 00:04:28,680
and then I give id= and I pass in whatever the value is,

61
00:04:28,680 --> 00:04:30,130
one, two, three, or four.

62
00:04:30,130 --> 00:04:31,490
So I entered the value of one,

63
00:04:31,490 --> 00:04:33,840
so I'm getting all of the books, all right.

64
00:04:33,840 --> 00:04:36,810
These are all the books that are being passed back, cool.

65
00:04:36,810 --> 00:04:41,690
If I give the id equals two, then I'll get Coffee Mugs.

66
00:04:41,690 --> 00:04:44,070
Okay, Coffee Mug, Coffee Mug.

67
00:04:44,070 --> 00:04:45,370
All right, that's fine.

68
00:04:45,370 --> 00:04:47,750
And a similar thing here for the other CategoryIds

69
00:04:47,750 --> 00:04:49,470
of three and four.

70
00:04:49,470 --> 00:04:52,273
Mouse Pads and Luggage Tags, respectively.

71
00:04:54,290 --> 00:04:56,710
All right, so we know that our REST API is working properly,

72
00:04:56,710 --> 00:04:58,820
and we know that if we pass in a given CategoryId,

73
00:04:58,820 --> 00:05:02,563
it'll give us only products for that given category.

