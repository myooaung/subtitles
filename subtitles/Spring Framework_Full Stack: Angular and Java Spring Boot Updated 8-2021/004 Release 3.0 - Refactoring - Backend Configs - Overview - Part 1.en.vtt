WEBVTT
1
00:00:01.080 --> 00:00:01.913
<v Narrator>In this video,</v>

2
00:00:01.913 --> 00:00:04.640
we'll cover refactoring the backend configs.

3
00:00:08.350 --> 00:00:10.230
Here's our development process.

4
00:00:10.230 --> 00:00:11.100
The first thing that we'll do,

5
00:00:11.100 --> 00:00:14.190
is we'll fix the deprecated methods for Spring Data REST.

6
00:00:14.190 --> 00:00:17.250
We'll also configure CORS mapping for Spring Data REST.

7
00:00:17.250 --> 00:00:20.790
Then, we'll configure CORS mapping for RestController.

8
00:00:20.790 --> 00:00:23.530
Next, we'll disable the HTTP PATCH method.

9
00:00:23.530 --> 00:00:24.900
And then finally, we'll modify

10
00:00:24.900 --> 00:00:27.583
the Spring Data REST Detection Strategy.

11
00:00:30.340 --> 00:00:32.520
All right, step one of fixing the deprecated method

12
00:00:32.520 --> 00:00:33.880
for Spring Data REST.

13
00:00:33.880 --> 00:00:35.950
Now, you may have noticed that there was one method

14
00:00:35.950 --> 00:00:38.120
that's deprecated in our configuration.

15
00:00:38.120 --> 00:00:42.257
That method is called configureRepositoryRestConfiguration.

16
00:00:43.226 --> 00:00:45.490
And to fix this deprecated method is really easy.

17
00:00:45.490 --> 00:00:47.070
All you do is use the method signature

18
00:00:47.070 --> 00:00:50.210
that has an additional parameter for CORS registry.

19
00:00:50.210 --> 00:00:51.930
And we'll actually use this CORS registry

20
00:00:51.930 --> 00:00:54.403
because it has some very nice features available.

21
00:00:57.490 --> 00:01:00.210
This brings us to step two of configuring the CORS mapping

22
00:01:00.210 --> 00:01:01.510
for Spring Data REST.

23
00:01:01.510 --> 00:01:05.010
So, now this new parameter, CorsRegistry cors,

24
00:01:05.010 --> 00:01:07.480
we can use this to configure the CORS mapping.

25
00:01:07.480 --> 00:01:08.313
So, here I'll have

26
00:01:08.313 --> 00:01:10.973
cors.addMapping(/api/**).allowedOrigins.

27
00:01:16.090 --> 00:01:17.930
And this has the mapping for /api,

28
00:01:17.930 --> 00:01:19.830
which is defined in our app properties file

29
00:01:19.830 --> 00:01:22.063
as the spring.data.rest.base-path.

30
00:01:25.530 --> 00:01:26.970
And then another thing we can do here,

31
00:01:26.970 --> 00:01:28.830
is make use of this allowedOrigins.

32
00:01:28.830 --> 00:01:31.700
And so here, we can add the localhost:4200.

33
00:01:31.700 --> 00:01:34.090
Instead of having to add the CrossOrigin

34
00:01:34.090 --> 00:01:37.730
to every one of our repository REST resources,

35
00:01:37.730 --> 00:01:40.400
we can simply define it at one location here

36
00:01:40.400 --> 00:01:41.350
and make use of it.

37
00:01:41.350 --> 00:01:45.020
So, we can remove the CrossOrigin from our JpaRepositories

38
00:01:45.020 --> 00:01:46.990
and make use of this configuration here

39
00:01:46.990 --> 00:01:48.473
for Spring Data REST.

40
00:01:51.806 --> 00:01:52.800
Now, one thing I like to do here,

41
00:01:52.800 --> 00:01:55.260
is move the configuration for allowed origins

42
00:01:55.260 --> 00:01:56.820
to an application.properties

43
00:01:56.820 --> 00:01:58.770
because I don't want to hard code the localhost

44
00:01:58.770 --> 00:02:00.460
into my actual Java source code.

45
00:02:00.460 --> 00:02:02.830
I'll put it into this application.properties file,

46
00:02:02.830 --> 00:02:06.370
and my properties file will have this entry allowed.origins

47
00:02:06.370 --> 00:02:07.980
and I give the actual reference,

48
00:02:07.980 --> 00:02:11.020
and then I can inject this value to my configuration

49
00:02:11.020 --> 00:02:14.730
by using @value and reference that allowed.origins,

50
00:02:14.730 --> 00:02:17.380
assign it to an array of strings,

51
00:02:17.380 --> 00:02:19.240
and then later on I can use it here

52
00:02:19.240 --> 00:02:20.450
in this configure method.

53
00:02:20.450 --> 00:02:23.220
I can say AllowedOrigins and simply pass on a reference here

54
00:02:23.220 --> 00:02:26.730
for that variable, theAllowedOrigins.

55
00:02:26.730 --> 00:02:28.400
So, just gives me some flexibility here

56
00:02:28.400 --> 00:02:31.163
as far as configuring this CORS mapping.

57
00:02:32.440 --> 00:02:33.860
And if you have multiple origins,

58
00:02:33.860 --> 00:02:36.010
you can simply give a comma-delimited list.

59
00:02:39.800 --> 00:02:41.750
And then one final thing that we can do here,

60
00:02:41.750 --> 00:02:44.650
is we can make use of our existing property,

61
00:02:44.650 --> 00:02:46.270
spring.data.rest.base-path,

62
00:02:46.270 --> 00:02:48.830
and that's actually available in the config object.

63
00:02:48.830 --> 00:02:51.320
So, we can clean up this coding even further here.

64
00:02:51.320 --> 00:02:55.450
So, cors.addMapping, instead of hard coding the /api,

65
00:02:55.450 --> 00:02:58.325
we can simply reference this via this config object,

66
00:02:58.325 --> 00:02:59.825
config.getBasePath

67
00:03:00.750 --> 00:03:02.120
and it'll read that same information

68
00:03:02.120 --> 00:03:03.963
from that configuration file.

69
00:03:07.420 --> 00:03:09.230
With step three we will configure the CORS mapping

70
00:03:09.230 --> 00:03:10.680
for RestController.

71
00:03:10.680 --> 00:03:11.690
It's important here to note,

72
00:03:11.690 --> 00:03:13.270
that the RestController configuration

73
00:03:13.270 --> 00:03:15.760
is separate from the Spring Data REST configuration

74
00:03:15.760 --> 00:03:17.433
in regards to CORS mapping.

75
00:03:20.455 --> 00:03:22.580
So, here we create this new class here,

76
00:03:22.580 --> 00:03:25.653
MyAppConfig implements WebMvcConfigurer.

77
00:03:26.520 --> 00:03:27.820
And then what we'll do is we'll simply

78
00:03:27.820 --> 00:03:29.210
read in these properties

79
00:03:29.210 --> 00:03:32.050
from the application.properties file.

80
00:03:32.050 --> 00:03:35.440
So here, I'll have the @Value for spring.data.rest.base-path

81
00:03:35.440 --> 00:03:38.820
and also @Value for allowed.origins.

82
00:03:38.820 --> 00:03:40.540
And then I can use that in this method

83
00:03:40.540 --> 00:03:42.700
that I override here, addCorsMapping.

84
00:03:42.700 --> 00:03:44.270
They pass on the CORS registry

85
00:03:44.270 --> 00:03:47.503
and I use this cors.addMapping(basePath).allowedOrigins.

86
00:03:53.580 --> 00:03:55.430
And so now that we have this configuration set up

87
00:03:55.430 --> 00:03:58.750
for our RestController, then we can remove the @CrossOrigin

88
00:03:58.750 --> 00:04:00.330
for our RestController implementation

89
00:04:00.330 --> 00:04:02.920
for our CheckoutController.

90
00:04:02.920 --> 00:04:04.780
So, we can clean our code up a bit more.

91
00:04:04.780 --> 00:04:05.890
So, this is pretty good.

92
00:04:05.890 --> 00:04:06.723
I like it.

