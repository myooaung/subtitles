1
00:00:01,290 --> 00:00:02,123
<v Instructor>Now let's go ahead</v>

2
00:00:02,123 --> 00:00:03,850
and look at the Web Storage API.

3
00:00:03,850 --> 00:00:05,580
So the API works the same

4
00:00:05,580 --> 00:00:07,650
for session storage or local storage,

5
00:00:07,650 --> 00:00:10,120
it's based on the concept of key and value,

6
00:00:10,120 --> 00:00:12,553
and key and value are always strings.

7
00:00:13,530 --> 00:00:16,190
So remember the data is scoped to the page origin,

8
00:00:16,190 --> 00:00:18,360
which is the protocol, hostname, plus port.

9
00:00:18,360 --> 00:00:20,810
And remember, only pages from the same origin

10
00:00:20,810 --> 00:00:22,400
can access the data.

11
00:00:22,400 --> 00:00:23,490
To store an item,

12
00:00:23,490 --> 00:00:27,800
we make use of storage.setItem, key, value.

13
00:00:27,800 --> 00:00:29,150
And to retrieve an item,

14
00:00:29,150 --> 00:00:31,923
we make use of storage.getItem, key.

15
00:00:34,840 --> 00:00:36,990
Here's some more details on the API.

16
00:00:36,990 --> 00:00:39,020
So to set an item with key, value,

17
00:00:39,020 --> 00:00:40,940
that'll set the key with the given value.

18
00:00:40,940 --> 00:00:44,080
If it already exists, it'll update the value.

19
00:00:44,080 --> 00:00:47,210
getItem for the key it'll return the key value,

20
00:00:47,210 --> 00:00:49,880
if it doesn't exist, it'll return null.

21
00:00:49,880 --> 00:00:51,670
We can do a removeItem on key.

22
00:00:51,670 --> 00:00:53,240
So to remove the item key,

23
00:00:53,240 --> 00:00:56,120
if that key doesn't exist, it does nothing.

24
00:00:56,120 --> 00:00:57,710
And we can also call clear.

25
00:00:57,710 --> 00:01:00,320
The clear method will empty all the keys out of storage.

26
00:01:00,320 --> 00:01:03,160
So it will empty the keys and their associated data,

27
00:01:03,160 --> 00:01:05,403
this is for this specific origin.

28
00:01:07,150 --> 00:01:09,870
And if you'd to get more details here on the Web Storage API

29
00:01:09,870 --> 00:01:11,770
you can visit the link here on the slide,

30
00:01:11,770 --> 00:01:14,520
and it will redirect you to the official documentation.

31
00:01:17,630 --> 00:01:18,900
All right, so let's kind of pull this together

32
00:01:18,900 --> 00:01:20,610
with our development process.

33
00:01:20,610 --> 00:01:22,890
So in the first step we're going to update our CartService

34
00:01:22,890 --> 00:01:24,690
to read data from session storage,

35
00:01:24,690 --> 00:01:25,810
then we'll add a new method

36
00:01:25,810 --> 00:01:28,635
in CartService called persistCartItems.

37
00:01:28,635 --> 00:01:29,850
And then finally we'll modify

38
00:01:29,850 --> 00:01:31,490
the computeCartTotals method

39
00:01:31,490 --> 00:01:34,400
to call this new method persistCartItems.

40
00:01:37,240 --> 00:01:39,140
Alrighty, step one of updating the CartService

41
00:01:39,140 --> 00:01:41,090
to read data from the session storage.

42
00:01:41,090 --> 00:01:43,693
So in our CartService, we have our cartItems array,

43
00:01:44,720 --> 00:01:47,360
and for storage I'll make use of sessionStorage.

44
00:01:47,360 --> 00:01:48,410
So this is going to be a reference

45
00:01:48,410 --> 00:01:50,830
to the web browser's session storage,

46
00:01:50,830 --> 00:01:52,580
and we get access to this for free.

47
00:01:54,270 --> 00:01:56,860
Now in my constructor, I'm going to read data from storage.

48
00:01:56,860 --> 00:01:58,480
So I'll say, Let data equals

49
00:01:58,480 --> 00:02:02,940
JSON.parse, this.storage.getItem, cartItems.

50
00:02:02,940 --> 00:02:04,640
So cartItems is the key,

51
00:02:04,640 --> 00:02:07,570
and we can actually use any name for the key,

52
00:02:07,570 --> 00:02:10,220
we simply have to stay consistent in our application.

53
00:02:11,210 --> 00:02:14,530
And the JSON.parse remember, it'll read the JSON string

54
00:02:14,530 --> 00:02:15,983
and convert it to an object.

55
00:02:18,490 --> 00:02:20,700
And then I check if data is not equal to no,

56
00:02:20,700 --> 00:02:21,660
then I make an assignment

57
00:02:21,660 --> 00:02:23,400
this.cartItems equals data.

58
00:02:23,400 --> 00:02:24,530
And then I compute the totals

59
00:02:24,530 --> 00:02:26,500
based on the data that's read from storage.

60
00:02:26,500 --> 00:02:28,773
So I called this.computeCartTotals.

61
00:02:32,230 --> 00:02:34,020
And then in step two, we're going to add a new method

62
00:02:34,020 --> 00:02:35,970
in CartService called persistCartItems.

63
00:02:37,100 --> 00:02:37,990
So here's this new method,

64
00:02:37,990 --> 00:02:39,500
here persistCartItems,

65
00:02:39,500 --> 00:02:41,643
I make a call to this.storage.setItem,

66
00:02:42,930 --> 00:02:44,970
cartItems, that's the key.

67
00:02:44,970 --> 00:02:47,890
I'm going to make use of JSON.stringify, this.cartItems.

68
00:02:47,890 --> 00:02:51,000
So I pass in the value and I convert it to a string.

69
00:02:51,000 --> 00:02:52,770
Because remember with the storage API,

70
00:02:52,770 --> 00:02:53,880
everything is a string.

71
00:02:53,880 --> 00:02:56,350
So if I take this object and convert it to a string,

72
00:02:56,350 --> 00:02:59,053
and we do that by making use of that JSON.stringify.

73
00:03:02,211 --> 00:03:04,330
Then in step three we modify the computerCartTotals

74
00:03:04,330 --> 00:03:07,260
to call the new method, persistCartItems.

75
00:03:07,260 --> 00:03:09,550
So here is my computeCartTotals method.

76
00:03:09,550 --> 00:03:10,900
We do all of our normal work

77
00:03:10,900 --> 00:03:13,700
and then the final thing we'll do is this persist cart data.

78
00:03:13,700 --> 00:03:16,350
So I'll make use of this.persistCartItems.

79
00:03:16,350 --> 00:03:18,463
That's a new method that we just created.

80
00:03:20,250 --> 00:03:22,580
And that's basically it here for the coding.

81
00:03:22,580 --> 00:03:24,230
So let's go ahead and move into the next video

82
00:03:24,230 --> 00:03:26,233
and let's start writing some code.

