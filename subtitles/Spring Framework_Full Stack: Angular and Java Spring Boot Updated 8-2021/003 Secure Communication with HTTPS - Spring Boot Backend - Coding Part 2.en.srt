1
00:00:01,440 --> 00:00:02,273
<v ->Alrighty.</v>

2
00:00:02,273 --> 00:00:03,106
So this looks pretty good.

3
00:00:03,106 --> 00:00:04,240
I'm getting a bit excited here.

4
00:00:04,240 --> 00:00:06,180
Let's go ahead and run our application

5
00:00:06,180 --> 00:00:08,193
and test out our secure connection.

6
00:00:20,710 --> 00:00:23,733
Okay, so I have my application up and running.

7
00:00:27,070 --> 00:00:28,923
Swing over to my web browser,

8
00:00:29,910 --> 00:00:33,650
and I will access the secure version of my application.

9
00:00:33,650 --> 00:00:37,339
So I'll go to HTTPS, colon,

10
00:00:37,339 --> 00:00:40,170
localhost 8443.

11
00:00:40,170 --> 00:00:42,070
That's based on information from our configuration,

12
00:00:42,070 --> 00:00:45,723
our port number, slash api, slash products.

13
00:00:48,240 --> 00:00:49,150
And we pull that up,

14
00:00:49,150 --> 00:00:50,320
and oh, gosh.

15
00:00:50,320 --> 00:00:53,150
We get this scary message again, right?

16
00:00:53,150 --> 00:00:54,690
But, we've seen this before, right?

17
00:00:54,690 --> 00:00:57,720
And so for dev purposes, this is okay.

18
00:00:57,720 --> 00:00:59,050
We're only being flagged

19
00:00:59,050 --> 00:01:01,640
because we're using a self-signed certificate, all right.

20
00:01:01,640 --> 00:01:03,760
So the same thing we saw on the Angular side,

21
00:01:03,760 --> 00:01:06,310
we're seeing over here on the Spring Boot side.

22
00:01:06,310 --> 00:01:07,730
So don't be alarmed.

23
00:01:07,730 --> 00:01:10,330
Everything's okay because we're simply testing

24
00:01:10,330 --> 00:01:12,423
on localhosts with self-signed certs.

25
00:01:13,440 --> 00:01:15,410
Now, I'm going to show you one little trick

26
00:01:15,410 --> 00:01:17,293
that you can use on Chrome.

27
00:01:18,250 --> 00:01:21,250
So, Chrome has a setting to allow self-signed certs

28
00:01:21,250 --> 00:01:22,740
on localhost.

29
00:01:22,740 --> 00:01:26,140
So, you won't get that scary page every time.

30
00:01:26,140 --> 00:01:28,600
Basically, in order to do this, you go into the URL,

31
00:01:28,600 --> 00:01:30,510
you enter Chrome slash flags.

32
00:01:30,510 --> 00:01:32,410
This will bring up all the various flags

33
00:01:32,410 --> 00:01:33,850
that you can set for Chrome.

34
00:01:33,850 --> 00:01:36,040
And then we'll search for this flag called

35
00:01:36,040 --> 00:01:37,760
allow-insecure-localhost,

36
00:01:37,760 --> 00:01:40,263
and we'll actually enable that flag.

37
00:01:47,820 --> 00:01:48,940
So here's the process.

38
00:01:48,940 --> 00:01:51,210
So, in our browser here up top,

39
00:01:51,210 --> 00:01:56,210
we'll enter chrome, colon, slash, slash, flags.

40
00:02:01,204 --> 00:02:02,810
And this is simply a little shortcut

41
00:02:02,810 --> 00:02:05,723
to access special configuration flags for Chrome.

42
00:02:08,034 --> 00:02:09,770
And then to search for flags,

43
00:02:09,770 --> 00:02:13,843
we'll type in allow-insecure-localhost.

44
00:02:16,060 --> 00:02:18,900
As mentioned here, it allows for invalid certificates

45
00:02:18,900 --> 00:02:20,980
or self-signed certificates to work

46
00:02:20,980 --> 00:02:24,083
on localhost without the scary messages.

47
00:02:26,320 --> 00:02:28,703
Simply move over here and select enabled.

48
00:02:32,550 --> 00:02:33,660
And once you've set this,

49
00:02:33,660 --> 00:02:35,390
then you have to relaunch your browser

50
00:02:35,390 --> 00:02:38,423
or restart the browser for those settings to take effect.

51
00:02:40,870 --> 00:02:43,790
Okay so, I've kind of done the restart here.

52
00:02:43,790 --> 00:02:46,010
Now, if we go into the URL,

53
00:02:46,010 --> 00:02:49,380
and if we enter our secure server here,

54
00:02:49,380 --> 00:02:50,213
https,

55
00:02:51,340 --> 00:02:52,473
localhost, 8443,

56
00:02:54,980 --> 00:02:56,960
slash, api, slash products,

57
00:02:56,960 --> 00:02:58,760
then we should be able to access it without

58
00:02:58,760 --> 00:03:00,023
the scary messages.

59
00:03:04,640 --> 00:03:06,120
And success.

60
00:03:06,120 --> 00:03:06,953
Great.

61
00:03:06,953 --> 00:03:09,970
So now, we know that our Spring Boot app is running

62
00:03:09,970 --> 00:03:13,040
on the backend with https.

63
00:03:13,040 --> 00:03:15,430
Now up top left where it says not secure

64
00:03:15,430 --> 00:03:17,720
that's simply because we're using a self-signed cert,

65
00:03:17,720 --> 00:03:21,210
but we are using https in this example.

66
00:03:21,210 --> 00:03:23,140
So, I'd like to say congrats,

67
00:03:23,140 --> 00:03:24,093
my friend.

