1
00:00:01,080 --> 00:00:02,300
<v Instructor>Alrighty, So step two we need</v>

2
00:00:02,300 --> 00:00:04,780
to configure the router based on our routes.

3
00:00:04,780 --> 00:00:08,070
So we configure the router in the application module file.

4
00:00:08,070 --> 00:00:11,070
So that's the AppModule.TS file.

5
00:00:11,070 --> 00:00:13,780
And now notice the new entry here in the import section,

6
00:00:13,780 --> 00:00:15,020
we have RouterModule.forRoot

7
00:00:16,270 --> 00:00:18,300
and then we give the routes.

8
00:00:18,300 --> 00:00:20,580
And so those are the routes that we defined earlier

9
00:00:20,580 --> 00:00:22,580
in our application.

10
00:00:22,580 --> 00:00:24,160
And so now the route is configured

11
00:00:24,160 --> 00:00:26,560
and it knows about the routes that we've set up.

12
00:00:28,820 --> 00:00:31,590
Then in step three, we define the router outlet.

13
00:00:31,590 --> 00:00:34,180
So the router outlet acts as a placeholder.

14
00:00:34,180 --> 00:00:37,950
It renders the desired component based on the route.

15
00:00:37,950 --> 00:00:39,360
So in our previous example,

16
00:00:39,360 --> 00:00:40,890
we have our menu items on the left.

17
00:00:40,890 --> 00:00:43,100
You select the link and then the router outlet

18
00:00:43,100 --> 00:00:44,890
that's a little placeholder, that's the area

19
00:00:44,890 --> 00:00:47,463
of where the actual component will be rendered.

20
00:00:48,560 --> 00:00:51,350
And then remember it only updates a section of your page,

21
00:00:51,350 --> 00:00:53,690
it doesn't reload the entire page, right?

22
00:00:53,690 --> 00:00:55,430
So we have a single page application.

23
00:00:55,430 --> 00:00:59,023
We simply perform partial updates on our given page.

24
00:01:02,240 --> 00:01:03,620
Okay, so to make this work,

25
00:01:03,620 --> 00:01:05,840
then we need to update our app.component.html

26
00:01:05,840 --> 00:01:07,613
to use the router outlet.

27
00:01:08,760 --> 00:01:10,770
So in our app.component.html file

28
00:01:10,770 --> 00:01:14,200
in the main content section here, we say router-outlet.

29
00:01:14,200 --> 00:01:15,033
So again, we're saying,

30
00:01:15,033 --> 00:01:16,817
"Hey, based on the router configuration,

31
00:01:16,817 --> 00:01:19,880
"display the appropriate component here."

32
00:01:19,880 --> 00:01:21,700
And then here's a little snippet of the different routes.

33
00:01:21,700 --> 00:01:24,720
So based on a given path, show component X

34
00:01:24,720 --> 00:01:26,800
at this given location.

35
00:01:26,800 --> 00:01:28,250
So it'll actually create an instance

36
00:01:28,250 --> 00:01:29,340
of the ProductListComponent

37
00:01:29,340 --> 00:01:31,150
and then we'll display the products based

38
00:01:31,150 --> 00:01:33,763
on the given category ID for that given link.

39
00:01:35,410 --> 00:01:36,920
And as part of some refactoring,

40
00:01:36,920 --> 00:01:38,940
we can comment out or delete the reference

41
00:01:38,940 --> 00:01:40,530
to app-product-list.

42
00:01:40,530 --> 00:01:42,770
We no longer need this here, directly.

43
00:01:42,770 --> 00:01:45,730
This information will be updated dynamically based

44
00:01:45,730 --> 00:01:47,703
on our actual router setup.

45
00:01:50,720 --> 00:01:53,010
Alrighty, so in step four, we're going to set up router links

46
00:01:53,010 --> 00:01:55,080
to pass the category id parameter.

47
00:01:55,080 --> 00:01:57,290
So in our HTML page, we're going to set up links

48
00:01:57,290 --> 00:02:00,720
to our route and pass the category id as a param.

49
00:02:00,720 --> 00:02:03,110
So we have that little menu item for luv2shop,

50
00:02:03,110 --> 00:02:04,920
books, coffee mugs, and so on.

51
00:02:04,920 --> 00:02:07,380
We're going to set up links and then based on those links,

52
00:02:07,380 --> 00:02:09,000
we'll actually have the router outlet

53
00:02:09,000 --> 00:02:11,210
display the appropriate component based

54
00:02:11,210 --> 00:02:13,170
on a given category ID.

55
00:02:13,170 --> 00:02:15,893
And we'll pass in that category ID with the link.

56
00:02:20,540 --> 00:02:22,320
So here's our app.component.html

57
00:02:22,320 --> 00:02:24,840
So a little menu sidebar here, we make use

58
00:02:24,840 --> 00:02:29,840
of this anchor routerLink category/1.

59
00:02:29,860 --> 00:02:31,790
So based on the route configuration,

60
00:02:31,790 --> 00:02:34,332
it's going to use the ProductListComponent

61
00:02:34,332 --> 00:02:36,223
and will pass in that given ID.

62
00:02:37,870 --> 00:02:39,360
So remember in our configuration here,

63
00:02:39,360 --> 00:02:41,580
we have a /:id,

64
00:02:41,580 --> 00:02:43,690
So the number one, two, and so on

65
00:02:43,690 --> 00:02:46,460
that's the actual ID parameter that'll be passed in

66
00:02:46,460 --> 00:02:48,523
to this ProductListComponent.

67
00:02:51,370 --> 00:02:52,970
And then once the user clicks the link,

68
00:02:52,970 --> 00:02:55,760
then we can also apply a custom CSS style.

69
00:02:55,760 --> 00:02:57,920
This is optional, not required,

70
00:02:57,920 --> 00:03:00,190
but in this example, I'll say active-links.

71
00:03:00,190 --> 00:03:04,210
So that's the name of a CSS style in my styles.CSS file.

72
00:03:04,210 --> 00:03:06,670
In this case, we simply make the given link bold.

73
00:03:06,670 --> 00:03:09,080
But you can customize this and give it any look

74
00:03:09,080 --> 00:03:10,310
and feel that you'd want.

75
00:03:10,310 --> 00:03:12,663
It's any CSS that you want to apply.

76
00:03:14,270 --> 00:03:15,560
Now, one thing that you may notice,

77
00:03:15,560 --> 00:03:18,380
at the moment we're hard coding the categories.

78
00:03:18,380 --> 00:03:20,650
But don't worry, in upcoming videos

79
00:03:20,650 --> 00:03:22,190
we'll actually make this dynamic

80
00:03:22,190 --> 00:03:24,050
and we'll read the category information

81
00:03:24,050 --> 00:03:26,680
from the REST API that'll get the information

82
00:03:26,680 --> 00:03:28,000
from the database.

83
00:03:28,000 --> 00:03:29,450
So for right now, we'll simply start

84
00:03:29,450 --> 00:03:31,890
with the basics and then we'll make it more advanced,

85
00:03:31,890 --> 00:03:34,050
more complex in the following videos.

86
00:03:34,050 --> 00:03:36,233
So don't worry, I got you covered.

87
00:03:39,670 --> 00:03:41,350
Alrighty, so recall what the router outlet

88
00:03:41,350 --> 00:03:42,710
when the user clicks the link,

89
00:03:42,710 --> 00:03:44,300
the ProductListComponent will appear

90
00:03:44,300 --> 00:03:46,390
in the location of router-outlet.

91
00:03:46,390 --> 00:03:49,180
And that's based on the diagram that we have here.

92
00:03:49,180 --> 00:03:51,820
And remember, it'll only update a section of the page.

93
00:03:51,820 --> 00:03:54,253
It won't reload the entire page.

94
00:03:57,220 --> 00:03:58,950
Now, the next step here is step five

95
00:03:58,950 --> 00:04:00,800
of enhancing the ProductListComponent

96
00:04:00,800 --> 00:04:02,990
to read the category id parameters.

97
00:04:02,990 --> 00:04:05,873
So we need to read that information so we can use it.

98
00:04:06,930 --> 00:04:09,400
So I'll set up a property called CurrentCategoryId

99
00:04:09,400 --> 00:04:10,503
of type number.

100
00:04:11,380 --> 00:04:12,790
And then I make an assignment here.

101
00:04:12,790 --> 00:04:14,460
I say this.route

102
00:04:14,460 --> 00:04:17,060
that's the activated route.snapshot,

103
00:04:17,060 --> 00:04:19,577
the state of the route at this given moment in time,

104
00:04:19,577 --> 00:04:22,600
.paramMap, that's a map of all the route parameters.

105
00:04:22,600 --> 00:04:26,180
And then I'll say, "Hey, read a given parameter name X."

106
00:04:26,180 --> 00:04:28,853
In this case, the parameter that we want to read is ID.

107
00:04:30,190 --> 00:04:31,760
And this is based on the configuration

108
00:04:31,760 --> 00:04:33,100
that we have set up for our routes.

109
00:04:33,100 --> 00:04:35,780
So we have a :id, so that's the parameter,

110
00:04:35,780 --> 00:04:39,070
ID, and that's how we actually access the parameter ID

111
00:04:39,070 --> 00:04:40,393
that's being passed over.

112
00:04:41,690 --> 00:04:44,030
So the parameter values are returned as a string

113
00:04:44,030 --> 00:04:46,160
so we can actually use the plus symbol

114
00:04:46,160 --> 00:04:49,120
to convert the string to a number.

115
00:04:49,120 --> 00:04:51,300
So this is a little typescript trick here

116
00:04:51,300 --> 00:04:53,380
of converting strings to number.

117
00:04:53,380 --> 00:04:54,990
You simply use the plus symbol

118
00:04:54,990 --> 00:04:56,890
at the beginning of that given string

119
00:04:56,890 --> 00:04:59,863
and it'll do the conversion for you in the background.

