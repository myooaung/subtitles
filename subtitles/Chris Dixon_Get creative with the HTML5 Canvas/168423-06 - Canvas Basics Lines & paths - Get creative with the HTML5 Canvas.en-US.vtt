WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.110 --> 00:00:04.690
In this video, we're going to take a look at the lines and

00:00:04.690 --> 00:00:08.005
paths that we can do using the HTML canvas.

00:00:08.005 --> 00:00:12.380
Let's begin by fork in the last video,

00:00:12.540 --> 00:00:19.720
and I will change the name to be simply lines and paths,

00:00:22.010 --> 00:00:24.270
they're the same with the title.

00:00:24.270 --> 00:00:31.230
Then we are going

00:00:31.230 --> 00:00:37.600
to delete everything between script tags except the first two variables we created.

00:00:37.880 --> 00:00:41.285
We're going to need these in all the videos that we do,

00:00:41.285 --> 00:00:43.445
we can leave these as they are.

00:00:43.445 --> 00:00:47.080
Let's begin with a simple example of how

00:00:47.080 --> 00:00:51.130
to draw some lines and we'll do that by creating a square,

00:00:51.130 --> 00:00:54.140
by drawing the four sides individually.

00:00:54.140 --> 00:00:56.790
Again, let's work with the context,

00:00:56.790 --> 00:01:04.030
so ctx..We're going to begin by using the beginPath method,

00:01:05.150 --> 00:01:09.460
and we just need to leave the parentheses empty on this,

00:01:09.460 --> 00:01:12.905
this just specifies the start of a new path.

00:01:12.905 --> 00:01:16.920
Now before we start drawing just before we start adding the square,

00:01:16.920 --> 00:01:22.255
I'm just going to add a border so we can see the canvas outline.

00:01:22.255 --> 00:01:26.615
Let's set the style to be equal to border,

00:01:26.615 --> 00:01:34.200
and let's make it 2 pixels so we can see it on a solid line.

00:01:34.420 --> 00:01:37.560
Let's have our canvas back,

00:01:37.630 --> 00:01:43.050
back to you beginPath and then ctx.moveTo.

00:01:44.990 --> 00:01:50.630
This is going to be our starting position that we want to draw our line from.

00:01:50.630 --> 00:01:55.745
I want to set the pen to be 10 pixels in on the x-axis,

00:01:55.745 --> 00:02:01.540
and also 10 pixels in or 10 pixels down on the y-axis.

00:02:01.540 --> 00:02:05.930
This will effectively move the pen to somewhere around here,

00:02:05.930 --> 00:02:08.230
and this will be our starting position.

00:02:08.230 --> 00:02:10.665
Then to actually draw a line,

00:02:10.665 --> 00:02:13.300
we use ctx.lineTo,

00:02:15.470 --> 00:02:20.650
and then we need to add our two coordinates that we'll want to draw the line between.

00:02:20.650 --> 00:02:25.725
The first one we're going to add is the x-axis of 290,

00:02:25.725 --> 00:02:28.740
and the y-axis of 10.

00:02:28.740 --> 00:02:32.090
You notice that nothing has appeared on the screen yet,

00:02:32.090 --> 00:02:35.900
this is because to get this to actually draw in the same way as

00:02:35.900 --> 00:02:40.265
the rectangles video where we had to use stroke and fill,

00:02:40.265 --> 00:02:42.990
we need to do the same for the line.

00:02:43.630 --> 00:02:49.000
Ctx.strok, this will stroke the outline.

00:02:51.950 --> 00:02:55.110
The line begins at position x-10,

00:02:55.110 --> 00:02:58.485
y-10, we choose 10 pixels in,

00:02:58.485 --> 00:03:02.610
and then we'll move 290 or move to position

00:03:02.610 --> 00:03:09.640
290 which is here and also keep that 10 pixels position on the y-axis.

00:03:10.340 --> 00:03:17.940
Let's now continue with a second line 2 ctx.lineTo.

00:03:17.940 --> 00:03:22.965
We want to keep the pen across at 290,

00:03:22.965 --> 00:03:30.820
let's keep it there, but we want to drop it on the y-axis down to 290.

00:03:31.910 --> 00:03:35.520
I will get a straight vertical line,

00:03:35.520 --> 00:03:40.600
and hopefully you can see a pattern margin, ctx.lineTo.

00:03:41.690 --> 00:03:46.410
Now we need to move back to the first x position,

00:03:46.410 --> 00:03:51.900
which was 10 and keep the y-axis at 290.

00:03:51.900 --> 00:04:00.695
The third line, let's finish this off by going back to position 10, 10.

00:04:00.695 --> 00:04:05.815
This is our starting point and then we create a full square.

00:04:05.815 --> 00:04:11.375
Returning the line to the original coordinates is one way we can complete the square,

00:04:11.375 --> 00:04:13.925
there is a much easier way to do this.

00:04:13.925 --> 00:04:18.350
Let's comment out this line with two forward slashes,

00:04:18.350 --> 00:04:21.055
this line won't be red.

00:04:21.055 --> 00:04:26.685
Instead of this, because we use the beginPath method at the start,

00:04:26.685 --> 00:04:33.040
we can enclose a path off by using ctx.closePath.

00:04:33.950 --> 00:04:40.870
Then this will now return back to the original starting position and complete the square.

00:04:40.870 --> 00:04:44.685
That's how we draw a square by using stroke.

00:04:44.685 --> 00:04:47.810
If you wanted the squares have a color fill,

00:04:47.810 --> 00:04:52.230
we can change ctx to be fill,

00:04:53.380 --> 00:04:57.620
and then we'll get the color filled with the default black.

00:04:57.620 --> 00:05:00.860
We can change the default color to be anything we want by using

00:05:00.860 --> 00:05:04.810
the fill style method like we used for the rectangles.

00:05:04.810 --> 00:05:08.265
Let's move on by drawing some more new shapes,

00:05:08.265 --> 00:05:11.070
let's draw a triangle.

00:05:11.070 --> 00:05:14.890
Let's start by creating a new path.

00:05:15.950 --> 00:05:24.595
I'll begin the path of the triangle and then move the pen to the starting position.

00:05:24.595 --> 00:05:28.040
To have this inside of the square by

00:05:28.040 --> 00:05:33.035
10 more pixels we'll have the starting position this time set to 20,

00:05:33.035 --> 00:05:43.650
20, and let's create the first lines, ctx.lineTo.

00:05:43.650 --> 00:05:49.340
To make the first line go across the top for the start of the triangle,

00:05:49.340 --> 00:05:53.500
we need to make the position 10 pixels for every cross.

00:05:53.500 --> 00:05:56.780
This was 300 for the outline of the canvas,

00:05:56.780 --> 00:06:00.320
290 for the edge of the square.

00:06:00.320 --> 00:06:05.190
Let's bring in 10 more pixels and make this 280,

00:06:05.270 --> 00:06:09.520
and the Y position can remain at 20.

00:06:10.520 --> 00:06:12.860
Then to make this an equal triangle,

00:06:12.860 --> 00:06:17.250
we need to move it down to position 20 on the x-axis,

00:06:17.250 --> 00:06:21.865
and a Y value to make it equal of 280

00:06:21.865 --> 00:06:27.980
which is basically the opposite to this one ctx.lineTo,

00:06:27.980 --> 00:06:30.935
the X value of 20,

00:06:30.935 --> 00:06:34.380
the Y-value of 280.

00:06:34.580 --> 00:06:37.545
Then to return back to the top,

00:06:37.545 --> 00:06:42.370
let's simply close the path by using ctx.closePath,

00:06:47.180 --> 00:06:52.150
and then to make this appear, we're going to add ctx.fill.

00:06:53.330 --> 00:06:56.870
We don't actually see the triangle appear on the canvas.

00:06:56.870 --> 00:07:02.740
This is because the default fill color that we mentioned before is also black,

00:07:02.740 --> 00:07:05.900
which is blending into the same color as the square.

00:07:05.900 --> 00:07:10.620
Before we fill it, we can add a fillStyle,

00:07:12.430 --> 00:07:22.980
and let's set the color to be hexagon value again of 99ccff.

00:07:24.500 --> 00:07:28.265
We can see the triangle standing out on background.

00:07:28.265 --> 00:07:30.125
Let's add one more triangle,

00:07:30.125 --> 00:07:33.815
but this time we'll add a stroke rather than a fill.

00:07:33.815 --> 00:07:40.380
I'm just going to copy this triangle and just add this below.

00:07:40.380 --> 00:07:45.945
Of course rather than ctx.fill, we'll use stroke.

00:07:45.945 --> 00:07:50.025
Let's change the fillStyle to be red,

00:07:50.025 --> 00:07:53.070
just so we can see on the blue background.

00:07:53.070 --> 00:07:56.415
Let's offset it from the first triangle,

00:07:56.415 --> 00:08:01.540
let's set it to be start position of 40, 40.

00:08:02.180 --> 00:08:06.070
All the 20s can be changed to 40,

00:08:06.830 --> 00:08:13.635
and to make it equal we'll change 280 to be 230,

00:08:13.635 --> 00:08:16.980
and should make a nice even triangle.

00:08:16.980 --> 00:08:21.255
In fact this wants to be strokeStyle,

00:08:21.255 --> 00:08:24.505
because you're using a stroke rather than a fill.

00:08:24.505 --> 00:08:27.860
So that's our red color for the outline.

00:08:27.860 --> 00:08:29.945
Just before we finish this video,

00:08:29.945 --> 00:08:34.240
I just want to show you a few different methods for line dashes,

00:08:34.240 --> 00:08:38.360
they are setLineDash and getLineDash.

00:08:38.360 --> 00:08:42.600
To use the setLineDash we can add this to the last triangle.

00:08:42.600 --> 00:08:46.780
I'm just going to add it before the lines I've actually drawn,

00:08:46.780 --> 00:08:49.580
let's just add this below beginPath.

00:08:49.580 --> 00:08:53.260
We are going to use the context variable again,

00:08:53.260 --> 00:08:57.580
so ctx, this is setLineDash.

00:08:58.780 --> 00:09:04.360
Make sure to use capital letters for every word apart from the first one.

00:09:04.360 --> 00:09:08.540
Then we need to add some values inside the parenthesis,

00:09:08.540 --> 00:09:10.715
we need to actually add an array.

00:09:10.715 --> 00:09:13.894
We're going to use them with the square brackets,

00:09:13.894 --> 00:09:17.020
open up the square brackets just like this.

00:09:17.020 --> 00:09:19.230
To begin with a simple LineDash,

00:09:19.230 --> 00:09:23.625
I'm going to add two different values, 10 add 10.

00:09:23.625 --> 00:09:28.750
That makes a simple LineDash which is 10 pixels wide.

00:09:28.750 --> 00:09:31.115
Which is set by the first value,

00:09:31.115 --> 00:09:35.555
and then a gap of 10 pixels between each one of the lines.

00:09:35.555 --> 00:09:38.690
If you want these lines to be further apart we can

00:09:38.690 --> 00:09:42.635
change the second value, just like that.

00:09:42.635 --> 00:09:47.510
These values are just loop through until it reaches the end of the line.

00:09:47.510 --> 00:09:49.850
We can add more than two values,

00:09:49.850 --> 00:09:51.830
we can add a odd number.

00:09:51.830 --> 00:09:54.515
If we change this to be 10, 20,

00:09:54.515 --> 00:09:59.555
30, the three value simply loop until the end of the line.

00:09:59.555 --> 00:10:01.925
Let's take a look at the line dashes.

00:10:01.925 --> 00:10:03.680
We can see if we start here,

00:10:03.680 --> 00:10:06.375
there's a first line of 10 pixels,

00:10:06.375 --> 00:10:08.255
a gap of 20 pixels,

00:10:08.255 --> 00:10:11.510
then a third line of 30 pixels.

00:10:11.510 --> 00:10:16.250
Then back to the start, we have a gap of 10, a line of 20,

00:10:16.250 --> 00:10:19.625
and a gap of 30, it's 10, 20,

00:10:19.625 --> 00:10:24.060
30 again, and so on until right back to the start.

00:10:24.200 --> 00:10:27.920
Lastly, I just want to quickly show you getLineDash.

00:10:27.920 --> 00:10:31.280
GetLineDash is something which you may never have any use for,

00:10:31.280 --> 00:10:35.320
but I'll show you how to use it just in case.

00:10:35.320 --> 00:10:39.645
Underneath the setLineDash, I'm going to create a new variable,

00:10:39.645 --> 00:10:44.055
and this variable is going to start in the details of the LineDash.

00:10:44.055 --> 00:10:49.140
I'm just going to call it something relevant such as lineDashpattern,

00:10:53.630 --> 00:10:57.375
and then when I set this to be context.,

00:10:57.375 --> 00:11:03.360
and the method we need to use instead of setLineDash is getLineDash.

00:11:04.840 --> 00:11:07.695
I'll start inside this variable,

00:11:07.695 --> 00:11:12.030
let's open up the console and do a console log,

00:11:12.700 --> 00:11:19.620
console.log and then the thing we want to log is this variable.

00:11:19.620 --> 00:11:22.050
Let's add that inside there,

00:11:22.050 --> 00:11:24.750
and then I'm going to open up the console which is

00:11:24.750 --> 00:11:27.810
just at the bottom there, click on that.

00:11:27.810 --> 00:11:32.465
There's our array of the return values for the LineDash.

00:11:32.465 --> 00:11:33.650
We got 10, 20,

00:11:33.650 --> 00:11:36.595
30, and then it's repeated.

00:11:36.595 --> 00:11:39.440
Again, that's something that you may never need but it

00:11:39.440 --> 00:11:41.780
is there just in case you do need it.

00:11:41.780 --> 00:11:45.000
Thank you, and I'll see you in the next video.
