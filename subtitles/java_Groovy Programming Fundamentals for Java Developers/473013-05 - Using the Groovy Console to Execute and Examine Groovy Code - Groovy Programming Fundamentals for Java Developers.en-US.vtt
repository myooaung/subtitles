WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.590
In this video, we're going to get a little bit more

00:00:01.590 --> 00:00:04.350
hands-on and explore the Groovy console,

00:00:04.350 --> 00:00:06.750
which we mentioned before, enables us to run

00:00:06.750 --> 00:00:09.600
snippets of Ruby code and see what's going on behind the scenes.

00:00:09.600 --> 00:00:10.965
So let's jump in and have a look now.

00:00:10.965 --> 00:00:15.225
So if I go into terminal, sends it back there.

00:00:15.225 --> 00:00:18.060
And you'll see here I've got five degree

00:00:18.060 --> 00:00:20.800
we minus-minus version to make sure I've grouped on my system path.

00:00:20.800 --> 00:00:23.375
You can see here I'm using Ruby two four-thirds in,

00:00:23.375 --> 00:00:24.935
which is located in for you,

00:00:24.935 --> 00:00:27.215
which groovy at this particular location here,

00:00:27.215 --> 00:00:29.330
creepy been inside my SDK,

00:00:29.330 --> 00:00:32.765
one installation, which is where I have Ruby installed on this particular system.

00:00:32.765 --> 00:00:35.510
So once you have Ruby installed and you have access to

00:00:35.510 --> 00:00:38.600
the tools in the bin subdirectory of a groovy installation,

00:00:38.600 --> 00:00:40.025
then you'll be able to launch

00:00:40.025 --> 00:00:44.690
the Ruby console by just typing Ruby console and hitting Enter.

00:00:44.690 --> 00:00:47.630
So I'll just expand this out a little bit.

00:00:47.630 --> 00:00:50.510
And then here we can see where in the Ruby console.

00:00:50.510 --> 00:00:54.680
So to just get going with having a look at what we can actually do inside Ruby console.

00:00:54.680 --> 00:00:56.735
Let's just creates a very quick class.

00:00:56.735 --> 00:00:59.105
So let's create a class called Person.

00:00:59.105 --> 00:01:01.980
And inside person.

00:01:02.050 --> 00:01:06.890
We'll have a string which represents the Nim and int,

00:01:06.890 --> 00:01:08.765
which represents the age.

00:01:08.765 --> 00:01:10.490
So basic Ruby syntax.

00:01:10.490 --> 00:01:12.065
You'll notice a few things here.

00:01:12.065 --> 00:01:14.150
First off, we don't have any semi-colons.

00:01:14.150 --> 00:01:15.320
They're optional in Groovy.

00:01:15.320 --> 00:01:17.300
And also you'll notice that I haven't prefix to

00:01:17.300 --> 00:01:19.775
these members with the word private, like we usually do.

00:01:19.775 --> 00:01:21.185
And we're writing Java classes.

00:01:21.185 --> 00:01:23.180
So usually in a Java class in order to keep

00:01:23.180 --> 00:01:25.865
the state of an object's encapsulated that is,

00:01:25.865 --> 00:01:28.310
within the scope of the object itself and not make it

00:01:28.310 --> 00:01:31.355
directly accessible to other classes in your application.

00:01:31.355 --> 00:01:33.140
In order to keep that encapsulation,

00:01:33.140 --> 00:01:35.135
Java gives us the various access modifiers,

00:01:35.135 --> 00:01:40.025
private package, private, protected and public to be able to enforce that encapsulation.

00:01:40.025 --> 00:01:41.630
And normally we just do this by default.

00:01:41.630 --> 00:01:43.160
So we're just pretty much always make sure that

00:01:43.160 --> 00:01:45.155
whenever we have data members in the class,

00:01:45.155 --> 00:01:46.355
we mark them as private,

00:01:46.355 --> 00:01:49.460
which means they can't be accessed by any of the classes outside the class.

00:01:49.460 --> 00:01:51.950
And then we'd usually have getters possibly set as

00:01:51.950 --> 00:01:54.575
to which allow us to get the values or set the values.

00:01:54.575 --> 00:01:56.990
And those would have public visibility which would enable

00:01:56.990 --> 00:02:00.140
any other classes to be able to set or get those data members.

00:02:00.140 --> 00:02:02.135
So that's usually how we do things in Java.

00:02:02.135 --> 00:02:04.250
And in Groovy, you'll see we don't have that.

00:02:04.250 --> 00:02:06.335
Now we do have the same visibility.

00:02:06.335 --> 00:02:09.875
We do have the same notions of all the different visibility levels that we have in Java.

00:02:09.875 --> 00:02:11.105
We still have those in groovy.

00:02:11.105 --> 00:02:13.685
So don't worry about that. Nothing is going away as far as that goes.

00:02:13.685 --> 00:02:15.665
However, when we write syntax like this,

00:02:15.665 --> 00:02:19.745
what's actually happening is we're not declaring members on a class.

00:02:19.745 --> 00:02:21.965
We're actually declaring properties in a class.

00:02:21.965 --> 00:02:23.510
And to understand what this means,

00:02:23.510 --> 00:02:27.365
we need to look at a concept called abstract syntax tree transformations.

00:02:27.365 --> 00:02:30.170
In a nutshell, the Groovy compiler takes this class as

00:02:30.170 --> 00:02:32.960
it is and it generates a new class or more specifically,

00:02:32.960 --> 00:02:34.850
and enhances that class backwards.

00:02:34.850 --> 00:02:36.395
And data members which are private.

00:02:36.395 --> 00:02:39.695
And then by creating public getters and setters on that.

00:02:39.695 --> 00:02:41.135
And he does all that for free for us.

00:02:41.135 --> 00:02:44.120
So effectively, with this tiny snippet of code here,

00:02:44.120 --> 00:02:46.040
this is a fully fledged polio.

00:02:46.040 --> 00:02:47.870
It doesn't have an equals and a hashCode and

00:02:47.870 --> 00:02:50.135
a two-string will get to see how to do that later on.

00:02:50.135 --> 00:02:51.695
We will jump ahead of ourselves now though,

00:02:51.695 --> 00:02:53.900
but pretty much just this tiny syntax here,

00:02:53.900 --> 00:02:56.345
just these four lines consisting of just six words,

00:02:56.345 --> 00:02:59.240
pretty much is equivalent to a full Java Poggio

00:02:59.240 --> 00:03:02.405
where you have the private data members and the public getters and setters.

00:03:02.405 --> 00:03:05.509
So we grew, but you'll be pleased to know you don't have to constantly auto-generate

00:03:05.509 --> 00:03:07.280
getters and setters in your IDE and then have

00:03:07.280 --> 00:03:09.200
to change them when you change your data members.

00:03:09.200 --> 00:03:10.325
None of that kind of stuff.

00:03:10.325 --> 00:03:12.815
It's all done for you in Groovy automatically.

00:03:12.815 --> 00:03:14.390
Now I said before with Ruby console,

00:03:14.390 --> 00:03:16.925
we can run fragments of Ruby code and that's true.

00:03:16.925 --> 00:03:22.265
So for example here if I did int i equals naught and then hit command and enter,

00:03:22.265 --> 00:03:23.450
which is the way we run the code,

00:03:23.450 --> 00:03:24.935
which is inside the text editor.

00:03:24.935 --> 00:03:29.540
So if I hit that, you can see here it evaluates it into eicosanoids,

00:03:29.540 --> 00:03:32.120
evaluated that, and it returned the result of 0.

00:03:32.120 --> 00:03:33.800
So you can certainly do that for snippets.

00:03:33.800 --> 00:03:37.415
However, if I use command Z to get back to this,

00:03:37.415 --> 00:03:39.140
if I do this now impersonate won't work.

00:03:39.140 --> 00:03:40.880
So we'll see this now command and enter.

00:03:40.880 --> 00:03:41.900
It won't work.

00:03:41.900 --> 00:03:44.030
And the reason for this is because if you're doing anything more

00:03:44.030 --> 00:03:46.685
fancy than you really need to have a main method.

00:03:46.685 --> 00:03:48.470
In other words, if the code snippet which you are

00:03:48.470 --> 00:03:50.300
supplying can't immediately be evaluated.

00:03:50.300 --> 00:03:51.665
You have to put it in a main method.

00:03:51.665 --> 00:03:56.360
So here we can just do static, void, main, String,

00:03:56.360 --> 00:04:00.350
args, standard men method will expect to see in a Java application,

00:04:00.350 --> 00:04:02.030
you don't have to mark it as public though.

00:04:02.030 --> 00:04:06.380
And now if we do Command Enter and scroll up,

00:04:06.380 --> 00:04:08.465
we can see here that it's evaluated it.

00:04:08.465 --> 00:04:10.400
But he says The result was no.

00:04:10.400 --> 00:04:13.760
By the way, can do Command W as well just to clear the console.

00:04:13.760 --> 00:04:15.290
So we'll just clear that now as well.

00:04:15.290 --> 00:04:19.595
So we can see the result was null and any snippets do you have in Ruby console,

00:04:19.595 --> 00:04:21.065
they're always going to return a result.

00:04:21.065 --> 00:04:24.170
Even if the method that you're invoking returns void,

00:04:24.170 --> 00:04:25.430
it will still return results.

00:04:25.430 --> 00:04:26.660
So you can see the result was not,

00:04:26.660 --> 00:04:29.345
and this is a general feature of Groovy in fact.

00:04:29.345 --> 00:04:30.710
So to create the class person,

00:04:30.710 --> 00:04:32.600
we could just do new person

00:04:32.600 --> 00:04:35.285
like that just to create an empty person which doesn't have a name,

00:04:35.285 --> 00:04:36.515
doesn't have an edge set.

00:04:36.515 --> 00:04:38.315
And then you command and enter.

00:04:38.315 --> 00:04:42.395
And you can see here that it's created a person on the heap.

00:04:42.395 --> 00:04:44.690
So person at 741 AD,

00:04:44.690 --> 00:04:47.285
the hash basically way that's located on the heap.

00:04:47.285 --> 00:04:51.890
Now I spoke just momentarily about the fact that this is a full blown Poggio here.

00:04:51.890 --> 00:04:53.300
And we can check this out as well.

00:04:53.300 --> 00:04:54.350
So we jump into the menu,

00:04:54.350 --> 00:04:55.760
into the script section.

00:04:55.760 --> 00:05:00.245
You'll see there's an option here at the end which is inspect AST.

00:05:00.245 --> 00:05:03.125
Ast stands for Abstract Syntax Tree.

00:05:03.125 --> 00:05:04.970
So pretty much Groovy.

00:05:04.970 --> 00:05:06.275
Just maximize that.

00:05:06.275 --> 00:05:10.430
Pretty much groovy will the tree of the syntax which constitutes your code.

00:05:10.430 --> 00:05:13.040
And the compiler goes through various different stages to be

00:05:13.040 --> 00:05:16.025
able to get to the final bytecode that's going to be run.

00:05:16.025 --> 00:05:18.980
The final byte code that's going to make up your application that can then be

00:05:18.980 --> 00:05:22.010
run inside the JVM and it adds extra stuff along the way.

00:05:22.010 --> 00:05:23.330
So let's just see what we mean by this.

00:05:23.330 --> 00:05:25.205
Simply just drag this down here.

00:05:25.205 --> 00:05:29.495
Now the semantic analysis one is going to be too much to look at for now.

00:05:29.495 --> 00:05:31.475
But if you do go to class generation,

00:05:31.475 --> 00:05:35.750
this one here you can see then basically at the end of this particular stage.

00:05:35.750 --> 00:05:37.520
So these are individual stages which grew BY,

00:05:37.520 --> 00:05:39.425
goes through to be able to get to the end result.

00:05:39.425 --> 00:05:42.095
But at the end of class generation, we click this.

00:05:42.095 --> 00:05:46.445
You'll see that this thing here is actually the real class that's been generated.

00:05:46.445 --> 00:05:50.390
So the real source code, which corresponds to what we just saw in the window.

00:05:50.390 --> 00:05:53.660
So if we just cancel out this for a second and go back out to here,

00:05:53.660 --> 00:05:56.840
this tiny snippet of code we can see with just a main method.

00:05:56.840 --> 00:06:02.150
And this minimal Poggio effectively wants is controlled.

00:06:02.150 --> 00:06:08.450
Agree with transformations, actually comes out as this source code here.

00:06:08.450 --> 00:06:13.985
So you can see we've got our main method calling run script of this script with GA here,

00:06:13.985 --> 00:06:15.350
which is itself an object.

00:06:15.350 --> 00:06:17.180
And inside the object we have a run method.

00:06:17.180 --> 00:06:20.450
And this is the actual code we did put inside the main method itself,

00:06:20.450 --> 00:06:22.445
which is constructing that new person for us.

00:06:22.445 --> 00:06:26.795
And then underneath we can see it's actually got the definition of the person class.

00:06:26.795 --> 00:06:28.205
And as we said before,

00:06:28.205 --> 00:06:30.660
we have the two data members,

00:06:30.660 --> 00:06:33.670
which corresponds to the properties we specified.

00:06:33.670 --> 00:06:35.860
Marx is private, so we've got private String,

00:06:35.860 --> 00:06:37.900
Nim, private int age.

00:06:37.900 --> 00:06:39.370
And commensurate with that,

00:06:39.370 --> 00:06:42.010
we also have the individual getters and setters.

00:06:42.010 --> 00:06:44.050
So you can see here getName set Nim,

00:06:44.050 --> 00:06:45.715
and get agent set age,

00:06:45.715 --> 00:06:47.275
and all of those are public.

00:06:47.275 --> 00:06:51.505
So that just shows you some of the magic that goes on behind the scenes in Groovy and

00:06:51.505 --> 00:06:53.590
also of interest is if we go up to

00:06:53.590 --> 00:06:56.065
the top here you can see there's this extra aspect here.

00:06:56.065 --> 00:06:58.750
Implements groovy dot lang dot Groovy Object.

00:06:58.750 --> 00:07:02.500
And this adds extra stuff on here which hook into the Groovy runtime itself,

00:07:02.500 --> 00:07:05.650
which we won't go into now, but it's basically connected with Meta classes.

00:07:05.650 --> 00:07:07.660
You can set on the object itself

00:07:07.660 --> 00:07:11.470
and hook basically into being able to intercept method calls.

00:07:11.470 --> 00:07:13.470
So another really cool aspects of Groovy,

00:07:13.470 --> 00:07:15.800
which is to advance for Beginners course unfortunately,

00:07:15.800 --> 00:07:18.500
is the fact that you can actually have intersection of method

00:07:18.500 --> 00:07:21.950
calls built-in to objects are built into classes rather.

00:07:21.950 --> 00:07:27.245
And this mechanism is what enables Ruby to add extra stuff onto the existing JDK classes.

00:07:27.245 --> 00:07:29.090
But anyway, that was a nice introduction to how to use

00:07:29.090 --> 00:07:32.075
the gravy console to be able to execute snippets of Ruby code.

00:07:32.075 --> 00:07:34.670
And don't forget, you can always have a look at the generated classes

00:07:34.670 --> 00:07:38.340
if you want to see a bit more of what grievous doing behind the scenes.
