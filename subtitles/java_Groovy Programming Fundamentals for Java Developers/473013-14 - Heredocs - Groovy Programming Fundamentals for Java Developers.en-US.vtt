WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.195
Another nice aspect, as well as the strings in Ruby can actually

00:00:03.195 --> 00:00:06.390
span multiple lines with so-called here docs.

00:00:06.390 --> 00:00:08.055
And that's something that's borrowed from Pearl,

00:00:08.055 --> 00:00:11.415
really the ideas borrowed from Pell and other languages like PHP.

00:00:11.415 --> 00:00:13.905
So for example, if you are writing semicolon occurred,

00:00:13.905 --> 00:00:15.420
there was going to generate an email,

00:00:15.420 --> 00:00:19.000
then you might be able to do something like this.

00:00:21.290 --> 00:00:26.200
Email text equals and then on a new line.

00:00:31.720 --> 00:00:34.860
Thanks for signing up.

00:00:36.370 --> 00:00:46.835
And also have a great day, 18 or whatever.

00:00:46.835 --> 00:00:49.700
So then, if we look at this now,

00:00:49.700 --> 00:00:52.310
you can see the result is a string,

00:00:52.310 --> 00:00:53.810
the spanning several lines.

00:00:53.810 --> 00:01:02.420
If we look at the class of this ellipse email text,

00:01:02.420 --> 00:01:04.220
we look at the class of this.

00:01:04.220 --> 00:01:06.560
We can see it's still just a Java Lang string.

00:01:06.560 --> 00:01:08.735
It has been concatenated behind the scenes.

00:01:08.735 --> 00:01:11.960
What's nice though is that it's very useful for templates because

00:01:11.960 --> 00:01:15.110
we can also do string interpolation with this as well.

00:01:15.110 --> 00:01:18.020
So we could parameterize this template then and say,

00:01:18.020 --> 00:01:22.460
hi there, Nim and do the same thing that we did before.

00:01:22.460 --> 00:01:27.330
Name equals Alex for example.

00:01:28.870 --> 00:01:32.310
Certain prints out the string.

00:01:37.810 --> 00:01:43.430
We can see that this is the actual content of the text now.

00:01:43.430 --> 00:01:46.430
And it's been replaced as we expected like it was before,

00:01:46.430 --> 00:01:47.930
because of this string interpolation,

00:01:47.930 --> 00:01:51.035
we go using this syntax here.

00:01:51.035 --> 00:01:54.560
And again, we've got a G string and we'll have a formatting you add in here.

00:01:54.560 --> 00:01:57.095
If you add extra white-space or tabs or whatever,

00:01:57.095 --> 00:01:58.595
that's gonna respect to two.

00:01:58.595 --> 00:02:01.475
And so it's very useful to do things like templates,

00:02:01.475 --> 00:02:05.255
but also to do things like markup as well or SQL queries, that kind of thing.

00:02:05.255 --> 00:02:08.630
In fact, anywhere we can get the benefit of having a String spanning multiple lines.

00:02:08.630 --> 00:02:12.980
Whereas you'd normally in Java have to do some awful string concatenation stuff by having

00:02:12.980 --> 00:02:17.825
a string separated by individual strings with pluses at the end of each line,

00:02:17.825 --> 00:02:19.910
or using some StringBuilder with append methods.

00:02:19.910 --> 00:02:21.425
Here, you don't need to do that.

00:02:21.425 --> 00:02:23.015
It's just all done for you.

00:02:23.015 --> 00:02:25.830
Noise, simple, straightforward.
