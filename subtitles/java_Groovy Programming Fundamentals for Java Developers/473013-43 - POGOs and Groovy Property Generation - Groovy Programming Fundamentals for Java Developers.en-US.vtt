WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.160
One less thing to points out is when we have things like this.

00:00:05.160 --> 00:00:09.765
So these look like member variables from our Java classes.

00:00:09.765 --> 00:00:11.730
So string them in salary.

00:00:11.730 --> 00:00:14.910
And you probably thinking, why don't we have private String them.

00:00:14.910 --> 00:00:17.430
We're always talking about encapsulation and

00:00:17.430 --> 00:00:19.800
the fact that you need to keep data members private,

00:00:19.800 --> 00:00:22.455
as in the declaration of the field itself at the class level.

00:00:22.455 --> 00:00:25.185
So you have a private string name, for example.

00:00:25.185 --> 00:00:29.070
And then you'd expose that to the outside world with public getters and setters.

00:00:29.070 --> 00:00:32.490
So why we are taking the private L here and just left what looks like a

00:00:32.490 --> 00:00:34.320
package private or a default access

00:00:34.320 --> 00:00:36.465
level member variable looks a bit strange, doesn't it?

00:00:36.465 --> 00:00:39.690
And the reason for that is because this is one of the differences in Groovy.

00:00:39.690 --> 00:00:43.820
What we're doing here. We're not creating an actual data member itself.

00:00:43.820 --> 00:00:46.220
We're actually creating a groovy property,

00:00:46.220 --> 00:00:47.690
which is not a Java data member,

00:00:47.690 --> 00:00:49.805
is a groovy property which we're creating,

00:00:49.805 --> 00:00:52.400
which has this syntax we don't but private and

00:00:52.400 --> 00:00:55.115
you declare it in what looks obvious package private way.

00:00:55.115 --> 00:00:58.490
And what actually happens behind the scenes as you basically fight.

00:00:58.490 --> 00:01:00.470
If I get rid of all this other stuff,

00:01:00.470 --> 00:01:06.590
just to trim it down to the most basic possible class definition.

00:01:06.590 --> 00:01:08.945
So if I just run now,

00:01:08.945 --> 00:01:10.775
the obstacles, we need to have a main method.

00:01:10.775 --> 00:01:13.880
Actually for this, we don't have to have a main method because what I'm going

00:01:13.880 --> 00:01:16.670
to show you doesn't rely on the mammoth it so just ignore this message here.

00:01:16.670 --> 00:01:18.650
It just means that it couldn't find anything to run.

00:01:18.650 --> 00:01:22.985
But that's okay because what I want to show you is the actual an AST,

00:01:22.985 --> 00:01:25.820
an abstract syntax tree transformation.

00:01:25.820 --> 00:01:27.830
So if we dip into hear him,

00:01:27.830 --> 00:01:30.995
they couldn't run the class because we didn't define a mammoth as we've just seen.

00:01:30.995 --> 00:01:32.510
You can still create the classic,

00:01:32.510 --> 00:01:33.950
still generate that class.

00:01:33.950 --> 00:01:36.620
And this is the actual code that's generated.

00:01:36.620 --> 00:01:38.870
And you can see here that in addition to putting

00:01:38.870 --> 00:01:41.585
some extra group is defined like get Meta class,

00:01:41.585 --> 00:01:43.520
invoke method or kind of thing.

00:01:43.520 --> 00:01:46.790
In addition to that, we have this private String name,

00:01:46.790 --> 00:01:49.940
so it's made it actually to what we expect from Java.

00:01:49.940 --> 00:01:54.180
It's made into a private data member that we're used to from and Java classes.

00:01:55.150 --> 00:02:02.194
And it's also plugged in these extra getName and set them getter and setter combination,

00:02:02.194 --> 00:02:04.430
which Republicans would expect.

00:02:04.430 --> 00:02:07.025
So in spite of the fact though,

00:02:07.025 --> 00:02:09.665
it looks like we haven't gone getters and setters,

00:02:09.665 --> 00:02:12.380
that Ruby compiler has actually generated them for us.

00:02:12.380 --> 00:02:14.570
So this class here, just like in Java,

00:02:14.570 --> 00:02:17.225
when we have a POJO, a Plain Old Java Object,

00:02:17.225 --> 00:02:20.765
which is basically a name we used to say a Java class that has

00:02:20.765 --> 00:02:24.650
private data members and public getters and setters for all the data members it has.

00:02:24.650 --> 00:02:28.520
So the Poggio. Similarly in the Groovy world we have a pogo,

00:02:28.520 --> 00:02:30.785
which is a plain old Groovy Object.

00:02:30.785 --> 00:02:33.110
Same kind of idea, but it just looks a lot less

00:02:33.110 --> 00:02:36.155
clunky because we only have to list the properties in this way.

00:02:36.155 --> 00:02:39.725
Just all reap the benefits of the Gruber compiler generating

00:02:39.725 --> 00:02:41.900
the proper pole gel-like structure for us behind

00:02:41.900 --> 00:02:44.465
the scenes through the AST transformations.

00:02:44.465 --> 00:02:47.660
So as you can see, it's very easy and straightforward to create

00:02:47.660 --> 00:02:51.455
a new classes in Groovy page feel completely harm in doing so.

00:02:51.455 --> 00:02:55.200
Being able to leverage your existing Java knowledge of how to do that.
