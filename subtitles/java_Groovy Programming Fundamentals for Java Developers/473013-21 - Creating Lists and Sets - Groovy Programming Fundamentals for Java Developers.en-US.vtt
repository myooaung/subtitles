WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.030
In this video, we're going to have a look at collections in groovy.

00:00:03.030 --> 00:00:04.335
So let's talk about those now.

00:00:04.335 --> 00:00:07.620
So first off, the most used collection probably is a list.

00:00:07.620 --> 00:00:10.260
So you can create a list of very simply point using

00:00:10.260 --> 00:00:13.035
square brackets and putting the elements inside.

00:00:13.035 --> 00:00:15.345
So for example, we wanted to have a list of say,

00:00:15.345 --> 00:00:18.600
some odd numbers, 1357.

00:00:18.600 --> 00:00:20.295
And if we evaluate that,

00:00:20.295 --> 00:00:22.515
we can see we've got a list here.

00:00:22.515 --> 00:00:24.765
Now the actual type of this list,

00:00:24.765 --> 00:00:30.180
if we get the class, is an ArrayList.

00:00:30.180 --> 00:00:31.440
So bear this in mind.

00:00:31.440 --> 00:00:34.960
Whenever you create a list in Groovy is gonna create an ArrayList type.

00:00:34.960 --> 00:00:37.070
And that means from a performance perspective,

00:00:37.070 --> 00:00:40.745
it's gonna be optimized to retrieve elements by index.

00:00:40.745 --> 00:00:43.415
Now, if you wanted LinkedList instead,

00:00:43.415 --> 00:00:45.425
you can use type collision for them.

00:00:45.425 --> 00:00:48.005
So you can do as LinkedList.

00:00:48.005 --> 00:00:50.390
And remember we've got default imports in

00:00:50.390 --> 00:00:53.225
Groovy where one of the imports is Java util dot star.

00:00:53.225 --> 00:00:56.780
This means that we don't have to declare it as Java util dot linked list.

00:00:56.780 --> 00:00:58.565
We can just use this syntax.

00:00:58.565 --> 00:01:03.575
And now if we run, we can see we get back a LinkedList was also nice about this,

00:01:03.575 --> 00:01:07.730
is that it means that we can use type conversion to actually just turn this same syntax,

00:01:07.730 --> 00:01:10.970
to use the same syntax into this insect to get back a set.

00:01:10.970 --> 00:01:14.990
So for example, now if I type close to a set,

00:01:14.990 --> 00:01:18.920
then here you can see we get back something of type linked HashSet.

00:01:18.920 --> 00:01:21.350
And now with a LinkedHashSet, this is nice because it

00:01:21.350 --> 00:01:24.065
also means that it maintains the insertion order.

00:01:24.065 --> 00:01:26.810
So in other words, when it builds up this set

00:01:26.810 --> 00:01:29.810
by creating a set and then adding these elements individually,

00:01:29.810 --> 00:01:32.840
1357 have a LinkedHashSet works is actually

00:01:32.840 --> 00:01:36.815
maintains links between those elements in the different hash buckets.

00:01:36.815 --> 00:01:39.335
So that then when you get an iterator over that set,

00:01:39.335 --> 00:01:40.970
you get the elements back in the same order.

00:01:40.970 --> 00:01:42.695
So that's a nice thing to have as well.

00:01:42.695 --> 00:01:46.940
Again, we could change that if you didn't want to have that and just make it a hash site.

00:01:46.940 --> 00:01:49.250
And now you actually get back a hashset.

00:01:49.250 --> 00:01:50.990
But it's always nice to have a LinkedHashSet,

00:01:50.990 --> 00:01:52.340
I think wherever possible.

00:01:52.340 --> 00:01:55.290
So those lists and sets.
