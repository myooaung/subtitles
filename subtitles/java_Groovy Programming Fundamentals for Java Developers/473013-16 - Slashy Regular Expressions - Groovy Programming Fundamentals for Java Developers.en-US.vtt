WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.580
Now usually we don't tend to use matcher and

00:00:02.580 --> 00:00:06.150
matches the actual API methods in civic got shortcuts,

00:00:06.150 --> 00:00:07.650
which we'll cover in a second.

00:00:07.650 --> 00:00:09.720
But it's worth pointing out another convention.

00:00:09.720 --> 00:00:14.715
Instead of making a string based on single quotes, which we can do.

00:00:14.715 --> 00:00:20.715
Typically, regular expressions in Groovy are formed by using forward slashes.

00:00:20.715 --> 00:00:22.200
That's just a convention that she used.

00:00:22.200 --> 00:00:25.110
And the reason for that is because if you were to,

00:00:25.110 --> 00:00:27.000
if I comment this out for a second,

00:00:27.000 --> 00:00:30.420
I could create a regular expression that matches, for example,

00:00:30.420 --> 00:00:35.715
a whitespace character with backslash w or a digit with backslash d.

00:00:35.715 --> 00:00:38.995
Then if I try and construct the pattern of this, it won't work.

00:00:38.995 --> 00:00:41.195
You get this unexpected child backslash.

00:00:41.195 --> 00:00:45.620
And the reason being is because you have to do in normal string escaped back slashes.

00:00:45.620 --> 00:00:48.080
So you have to put a backslash before a backslash.

00:00:48.080 --> 00:00:50.315
So there'll be resolved to just the backslash d.

00:00:50.315 --> 00:00:52.070
So if we're on now it's fine.

00:00:52.070 --> 00:00:54.785
Whereas if we use forward slashes,

00:00:54.785 --> 00:00:57.065
we don't have to do this escaping.

00:00:57.065 --> 00:00:58.205
So we can run this.

00:00:58.205 --> 00:00:59.525
We don't have to do the escaping.

00:00:59.525 --> 00:01:01.400
And it just means that it makes our life a lot easier.

00:01:01.400 --> 00:01:03.920
We don't end up having to escape special characters which

00:01:03.920 --> 00:01:06.800
occur as part of the regular expression syntax that we're using.

00:01:06.800 --> 00:01:12.035
So that should make sense. Good. So let's go back to this.

00:01:12.035 --> 00:01:13.370
Here's our regular expression,

00:01:13.370 --> 00:01:17.100
which matches anything that starts with a capital S.
