WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.470
In this video, we're going to look further at

00:00:01.470 --> 00:00:03.570
collections and look at some of the extra methods that

00:00:03.570 --> 00:00:07.440
Groovy adds to the JDK is collection classes to make them easier to use.

00:00:07.440 --> 00:00:09.615
So let's start with a simple list.

00:00:09.615 --> 00:00:14.955
Numbers equals one to five.

00:00:14.955 --> 00:00:19.440
So we play this. We have a result here which is a list of numbers 12345.

00:00:19.440 --> 00:00:21.930
Now we can actually do filter operation on this to pull out,

00:00:21.930 --> 00:00:25.140
for example, the numbers which are odd. So let's see how we can do that.

00:00:25.140 --> 00:00:28.250
We can do numbers, dot and then find.

00:00:28.250 --> 00:00:30.845
And then what we're going to put here now is a closure.

00:00:30.845 --> 00:00:33.440
So you'll see here we have these two curly braces.

00:00:33.440 --> 00:00:35.510
This means it's a closure. I like to put it on

00:00:35.510 --> 00:00:37.910
a separate line like this so we can see what's going on.

00:00:37.910 --> 00:00:40.745
But once you get used to, you can also just put it on one line as well,

00:00:40.745 --> 00:00:44.510
which is useful for when you have shore expressions inside this closure as we'll see,

00:00:44.510 --> 00:00:47.810
but for now we'll put it on separate lines to better understand the syntax.

00:00:47.810 --> 00:00:49.490
So inside this closure,

00:00:49.490 --> 00:00:50.870
a gene, it's find all.

00:00:50.870 --> 00:00:52.040
I'm gonna show you first.

00:00:52.040 --> 00:00:53.840
Inside disclosure, we're going to give

00:00:53.840 --> 00:00:56.930
an expression which will be evaluated for each one of these elements.

00:00:56.930 --> 00:00:58.580
And if the expression returns true,

00:00:58.580 --> 00:01:02.570
then that element is going to be added to the list which find all returns.

00:01:02.570 --> 00:01:06.140
So let's say I have the variable e to represent the element.

00:01:06.140 --> 00:01:09.455
Then down here, I can basically have an expression which says

00:01:09.455 --> 00:01:13.730
the mod2 equals, equals one.

00:01:13.730 --> 00:01:15.110
And so now if I run that,

00:01:15.110 --> 00:01:18.170
we can see here we've got the odd numbers 135.

00:01:18.170 --> 00:01:20.630
The reason being is because e mod two on

00:01:20.630 --> 00:01:23.150
the first one is saying integer divide it by two,

00:01:23.150 --> 00:01:24.350
and then we end up with a remainder.

00:01:24.350 --> 00:01:25.745
And if the remainder equals one,

00:01:25.745 --> 00:01:28.010
then will include the element while it does equal one here.

00:01:28.010 --> 00:01:29.450
So one is included.

00:01:29.450 --> 00:01:31.805
On the second pass. We try it with two,

00:01:31.805 --> 00:01:33.665
so it's two mod two.

00:01:33.665 --> 00:01:37.925
So two into two divided by two is 0, so it doesn't equal one.

00:01:37.925 --> 00:01:42.185
So that means two is not included in this list here, and so on.

00:01:42.185 --> 00:01:44.300
So then we build up list 135.

00:01:44.300 --> 00:01:47.670
You can make the shorter, you can put this on one line.

00:01:49.120 --> 00:01:53.120
Now we know what it does. Habitable one line.

00:01:53.120 --> 00:01:54.725
So that would still work.

00:01:54.725 --> 00:01:57.320
And also you can make it shorter, still buy.

00:01:57.320 --> 00:02:00.050
Instead of actually creating a variable like we've done here,

00:02:00.050 --> 00:02:03.305
where we use the variable and the arrow operator to refer to

00:02:03.305 --> 00:02:07.460
each elements for each execution of this particular closure for each iteration.

00:02:07.460 --> 00:02:08.570
Instead of doing that,

00:02:08.570 --> 00:02:11.795
we can just basically use a special variable, which group it gives us,

00:02:11.795 --> 00:02:13.580
which is known as eight,

00:02:13.580 --> 00:02:16.580
which basically means the current iteration element

00:02:16.580 --> 00:02:18.110
or the element for the current iteration.

00:02:18.110 --> 00:02:20.510
So now if I clear and repeat,

00:02:20.510 --> 00:02:22.955
we can see we still got the same thing, 135.

00:02:22.955 --> 00:02:25.445
So as you can appreciate, that's a very simple,

00:02:25.445 --> 00:02:30.470
compact and concise syntax for being able to pull out odd numbers.

00:02:30.470 --> 00:02:33.920
And you can put any expressions you like in here which delivered the criteria by

00:02:33.920 --> 00:02:37.610
which elements from the original list are going to add it to this virtual list.

00:02:37.610 --> 00:02:39.800
And the thing that we get back, again,

00:02:39.800 --> 00:02:42.740
if we invoke getClass and what's returned,

00:02:42.740 --> 00:02:45.050
we get back an ArrayList like we did before.

00:02:45.050 --> 00:02:47.750
So there's nothing special about the actual item that we get back.

00:02:47.750 --> 00:02:49.070
We still get back an ArrayList.

00:02:49.070 --> 00:02:53.420
We just have a more compacts and concise way of being able to express our intent now,

00:02:53.420 --> 00:02:55.295
which is what I find in general with Groovy.

00:02:55.295 --> 00:02:59.390
It's what you always get. The way I like to look at it is that the power to weight ratio,

00:02:59.390 --> 00:03:02.015
in other words, the power that you've got with what Ruby gives you,

00:03:02.015 --> 00:03:06.215
balanced against the waiter would actually cost you to comprehend and the type things out

00:03:06.215 --> 00:03:08.480
is really good to put it in a colloquial where you

00:03:08.480 --> 00:03:10.880
get so much bang for your buck with Gruber, you really do.

00:03:10.880 --> 00:03:13.430
If you imagine you are writing this in Java,

00:03:13.430 --> 00:03:14.870
you can do that on one line.

00:03:14.870 --> 00:03:16.595
Whereas here, groovy once again,

00:03:16.595 --> 00:03:19.790
shines very simple, very concise, and very effective.

00:03:19.790 --> 00:03:22.100
You don't have to do this just with numbers either.

00:03:22.100 --> 00:03:28.160
So for example here, we could do deaf nims equals.

00:03:28.160 --> 00:03:34.645
So on Digg, Harry, oops, list.

00:03:34.645 --> 00:03:37.705
And then we could do nims.

00:03:37.705 --> 00:03:43.070
Dot find all passing in the closure.

00:03:44.130 --> 00:03:48.295
It dot starts with T for example,

00:03:48.295 --> 00:03:50.620
and execute that and we'll just get back Tom.

00:03:50.620 --> 00:03:52.780
This could also become more complex to,

00:03:52.780 --> 00:03:56.440
we don't even have to be limited to literals like lists which contained ins,

00:03:56.440 --> 00:03:58.060
or lists which contain strings.

00:03:58.060 --> 00:03:59.620
We can have more complex data structures.

00:03:59.620 --> 00:04:02.050
So for example, we can have a list that contains actual objects.

00:04:02.050 --> 00:04:07.465
So if we create a simple Poggio here, Person,

00:04:07.465 --> 00:04:15.710
string name in names and ages.

00:04:18.570 --> 00:04:24.850
New person, Em, Robots.

00:04:24.850 --> 00:04:29.180
Age 50,

00:04:32.310 --> 00:04:42.970
Simon, 45, Susie, 32.

00:04:42.970 --> 00:04:49.750
And then we can do nims and edges 0.

00:04:49.750 --> 00:04:56.245
Let's say it's dot and it now is representing the element.

00:04:56.245 --> 00:04:59.090
So whereas before it was the string, the int.

00:04:59.090 --> 00:05:00.200
Now it's not that type.

00:05:00.200 --> 00:05:02.060
Now it's actually up something of type person.

00:05:02.060 --> 00:05:08.180
So we could do it till age bigger than or equal to 40, for example.

00:05:08.180 --> 00:05:11.000
Oops, made a brief mistake there.

00:05:11.000 --> 00:05:14.465
Of course not using listing tax.

00:05:14.465 --> 00:05:19.595
When we're creating objects were using calling a constructor.

00:05:19.595 --> 00:05:23.405
But now you can see here we've got two people.

00:05:23.405 --> 00:05:25.040
So first person, second person.

00:05:25.040 --> 00:05:27.185
And if we wanted to print out the names of those people,

00:05:27.185 --> 00:05:35.840
we could do an each, which basically executes disclosure for each element.

00:05:35.840 --> 00:05:37.250
So we'll execute it,

00:05:37.250 --> 00:05:38.585
done them for this.

00:05:38.585 --> 00:05:41.040
And then it dawned on him for this.

00:05:41.140 --> 00:05:44.345
And we probably want to print that out.

00:05:44.345 --> 00:05:49.385
Print line like so.

00:05:49.385 --> 00:05:52.970
And now if we run, we can see here we've got name Robert and named Simon.

00:05:52.970 --> 00:05:55.130
And the reason being is because Robert and Simon,

00:05:55.130 --> 00:05:56.450
about over 40 years old,

00:05:56.450 --> 00:05:58.610
Roberts 50 and Simon's 45.

00:05:58.610 --> 00:06:00.440
But we don't get Suzy because she's started

00:06:00.440 --> 00:06:03.485
to because her rage isn't greater than or equal to 40.

00:06:03.485 --> 00:06:04.220
We could flip that.

00:06:04.220 --> 00:06:08.435
Of course we could do less than 40 and rerun, and then we just get Suzy.

00:06:08.435 --> 00:06:10.190
So here we can see we just get Susie back.

00:06:10.190 --> 00:06:11.705
So once again, groovy,

00:06:11.705 --> 00:06:14.255
very concise, very powerful at the same time.

00:06:14.255 --> 00:06:15.770
And with the final method gives us

00:06:15.770 --> 00:06:19.559
a really powerful way of being able to find information.
