WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.420
In this video, we're going to look at regular expressions in Groovy and

00:00:03.420 --> 00:00:07.095
see the first-class level support that Groovy gives us for dealing with these.

00:00:07.095 --> 00:00:09.480
So in groovy, there are three operators which we

00:00:09.480 --> 00:00:11.925
can use when we're dealing with regular expressions.

00:00:11.925 --> 00:00:13.500
These are the pattern operator,

00:00:13.500 --> 00:00:16.210
defined operator, and the match operator.

00:00:16.210 --> 00:00:18.710
And you can always tell in Groovy when you're using

00:00:18.710 --> 00:00:22.520
regular expressions because that'll involve this tilda character here.

00:00:22.520 --> 00:00:26.810
So whenever you see tilda in Groovy is basically some code involving regular expressions.

00:00:26.810 --> 00:00:30.755
So we can use the so-called pattern operator to construct a regular expression.

00:00:30.755 --> 00:00:36.995
So first off, if I just create an object Ari,

00:00:36.995 --> 00:00:41.960
and let's say we have a regular expression for S dot star.

00:00:41.960 --> 00:00:49.925
In other words, this would match words like sugar, sweet and 0.

00:00:49.925 --> 00:00:54.005
The reason being is that it starts with an S. So we can see here.

00:00:54.005 --> 00:00:56.720
And then dot star means it will match the rest of the world.

00:00:56.720 --> 00:00:58.820
So in this case, the dot star much is ERA.

00:00:58.820 --> 00:01:01.115
In this case it matches wheat.

00:01:01.115 --> 00:01:03.080
And in this case it matches ogre.

00:01:03.080 --> 00:01:05.690
Sugar, sweetened syrup. Very basic,

00:01:05.690 --> 00:01:07.760
very simple, straightforward regular expression.

00:01:07.760 --> 00:01:10.520
However, if we look at the class of this,

00:01:10.520 --> 00:01:12.575
this is just the Java Lang string at the minimum.

00:01:12.575 --> 00:01:14.240
So we can see here Java line string.

00:01:14.240 --> 00:01:18.515
So to turn this into a real regular expression using the java.util dot regex framework,

00:01:18.515 --> 00:01:20.420
which is what Ruby does under the hood with

00:01:20.420 --> 00:01:22.820
patterns and matches and those kinds of things.

00:01:22.820 --> 00:01:25.760
We apply it the patent operator just by prefixing

00:01:25.760 --> 00:01:28.850
the expression with a tilde m. So if we run now,

00:01:28.850 --> 00:01:33.335
we'll see that we have an instance of Java.util dot dx dot pattern.

00:01:33.335 --> 00:01:35.990
So in Java, regular expressions you may or may not be aware,

00:01:35.990 --> 00:01:38.465
but basically all regular expressions start with a pattern.

00:01:38.465 --> 00:01:40.895
So usually you get a Java util regex pattern.

00:01:40.895 --> 00:01:45.020
You call a static method compile on pattern passing in a regular expression like this.

00:01:45.020 --> 00:01:49.580
So S dot star, that gets you back then a precompile pattern that you can then do

00:01:49.580 --> 00:01:51.965
regular expression matching against different strings on

00:01:51.965 --> 00:01:54.560
using the API that's behind that patent object.

00:01:54.560 --> 00:01:56.510
So this is a valid patent now,

00:01:56.510 --> 00:01:57.710
and we can use this pattern.

00:01:57.710 --> 00:02:06.740
So for example, we can do RE dot match of sweet.

00:02:06.740 --> 00:02:11.480
And now if we look at the class, we get back.

00:02:11.480 --> 00:02:14.660
We can see we have Java util.org, x-dot matcher.

00:02:14.660 --> 00:02:17.480
And from this venture, we can then actually test

00:02:17.480 --> 00:02:20.225
if the string that's passed in actually matches.

00:02:20.225 --> 00:02:23.720
So we could do much, uh, dot matches here.

00:02:23.720 --> 00:02:26.810
And we get true back because sweet as a string

00:02:26.810 --> 00:02:29.705
passed in matches this regular expression here,

00:02:29.705 --> 00:02:32.390
because it starts with an S And the rest of the letters match

00:02:32.390 --> 00:02:35.540
that would change this to l.

00:02:35.540 --> 00:02:36.620
It has to start with an L.

00:02:36.620 --> 00:02:40.835
And then if we rerun, we'll see we get false because it doesn't match any longer.

00:02:40.835 --> 00:02:42.860
So let's just put that back.

00:02:42.860 --> 00:02:44.615
Okay, so that's the pattern operator,

00:02:44.615 --> 00:02:47.870
enables you to create Java util dot aggregates patterns,

00:02:47.870 --> 00:02:52.200
which you can then use to do regular expression matching against strings.
