WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.950
In this video, we're going to look at each.

00:00:01.950 --> 00:00:05.880
And this is a way of being able to iterate through elements of a collection,

00:00:05.880 --> 00:00:08.295
performing a snippet of code for each element.

00:00:08.295 --> 00:00:09.600
So let's see that in action now.

00:00:09.600 --> 00:00:11.160
So let's start off with a list.

00:00:11.160 --> 00:00:15.690
List L equals 12345.

00:00:15.690 --> 00:00:18.610
And we can use the each operator.

00:00:19.310 --> 00:00:21.585
So not just the word.

00:00:21.585 --> 00:00:25.320
We get back a list and we're calling the each method on this list.

00:00:25.320 --> 00:00:29.594
And this, each method has been added as part of the Groovy Development Kit enhancements.

00:00:29.594 --> 00:00:32.400
So the GDK basically takes a lot of

00:00:32.400 --> 00:00:35.820
standard Java library classes and adds extra methods in there,

00:00:35.820 --> 00:00:37.200
which made them nicer to use.

00:00:37.200 --> 00:00:38.610
And each one of these,

00:00:38.610 --> 00:00:40.170
so far Java collections,

00:00:40.170 --> 00:00:42.235
one of the methods that's added is each.

00:00:42.235 --> 00:00:44.720
And this gives us the ability to be able to iterate over

00:00:44.720 --> 00:00:47.255
each element and do something based on each element.

00:00:47.255 --> 00:00:50.885
So here we have these curly braces with a space.

00:00:50.885 --> 00:00:53.495
So we have the method name space and then curly braces.

00:00:53.495 --> 00:00:56.810
And what that is, that's basically passing in a thing called a closure.

00:00:56.810 --> 00:00:59.450
So a closure is a chunk of code and pretty

00:00:59.450 --> 00:01:01.895
much like a lambda expression is in Java eight.

00:01:01.895 --> 00:01:05.585
And above, all over some slight differences which are too advanced to go into here.

00:01:05.585 --> 00:01:06.890
But the notion is the same.

00:01:06.890 --> 00:01:11.465
It's basically a chunk of code that we can execute for each elements of the list,

00:01:11.465 --> 00:01:14.390
which is called for each element as we iterate over that list.

00:01:14.390 --> 00:01:17.945
So let's just talk about this syntax very briefly.

00:01:17.945 --> 00:01:20.090
It might look a bit alien this.

00:01:20.090 --> 00:01:24.080
So let's put it back to what it would be if we were thinking in normal Java terms.

00:01:24.080 --> 00:01:28.040
So we have a list and we're calling each,

00:01:28.040 --> 00:01:29.465
which is a method on that list.

00:01:29.465 --> 00:01:32.465
And then inside that method of other into that method,

00:01:32.465 --> 00:01:35.390
we can pass a parameter or an argument.

00:01:35.390 --> 00:01:38.240
Now it probably help at this point if we jump into

00:01:38.240 --> 00:01:40.910
Chrome and we have a look at the GDK documentation.

00:01:40.910 --> 00:01:44.000
So we'll just type in Groovy GDK.

00:01:44.000 --> 00:01:45.740
We can see we've got this link here,

00:01:45.740 --> 00:01:47.540
groovy line org, GDK.

00:01:47.540 --> 00:01:51.935
And this is basically the Groovy Doc Group is equivalent of the Java doc,

00:01:51.935 --> 00:01:54.395
which I've documentation the Groovy doc

00:01:54.395 --> 00:01:58.355
for the enhancements that it puts on the classes out of the JDK.

00:01:58.355 --> 00:02:03.560
So here you can see we've got some groovy standard classes which is also documented.

00:02:03.560 --> 00:02:08.215
But moreover, we have these packages here,

00:02:08.215 --> 00:02:10.180
which are packages that we are very familiar with

00:02:10.180 --> 00:02:12.520
from our regular day-to-day job development work.

00:02:12.520 --> 00:02:15.010
So if we click into java dot util for example,

00:02:15.010 --> 00:02:19.915
we can see here we have the usual interfaces we expect and the classes we expect it to.

00:02:19.915 --> 00:02:22.030
And then if we look at the collection interface,

00:02:22.030 --> 00:02:24.475
which is the super interface of all collections

00:02:24.475 --> 00:02:27.340
inside the Collections API or Java collections API.

00:02:27.340 --> 00:02:29.725
We can see we have these methods.

00:02:29.725 --> 00:02:32.335
And if we scroll down,

00:02:32.335 --> 00:02:36.430
we can see here we have this new method which is added called each.

00:02:36.430 --> 00:02:38.500
So each, if you click on this,

00:02:38.500 --> 00:02:41.390
you can see it takes a thing called a closure and

00:02:41.390 --> 00:02:44.710
iterates recollection passing each item to the given closure.

00:02:44.710 --> 00:02:47.230
And again, if we click into closure,

00:02:47.230 --> 00:02:49.425
you can have a read about there as well.

00:02:49.425 --> 00:02:51.980
But this is basically a class which enables you to

00:02:51.980 --> 00:02:55.400
encapsulate some chunk of code that you want to have executed.

00:02:55.400 --> 00:02:57.470
So what I'm saying going back here,

00:02:57.470 --> 00:03:00.710
we just basically got a list back which happens to implement collection.

00:03:00.710 --> 00:03:04.970
And as part of that, it makes available to us this each method and this each method,

00:03:04.970 --> 00:03:07.535
it just takes a closure as an argument which the each method,

00:03:07.535 --> 00:03:10.505
when it's executing is gonna use as a callback interface,

00:03:10.505 --> 00:03:13.025
which it calls back to his calls that closure.

00:03:13.025 --> 00:03:14.495
Diatomic gets a new element,

00:03:14.495 --> 00:03:15.950
passing that element in.

00:03:15.950 --> 00:03:18.980
So if I close that down, that makes sense now.

00:03:18.980 --> 00:03:21.230
So we could, for example,

00:03:21.230 --> 00:03:24.810
cosine a new closure in here.

00:03:25.000 --> 00:03:31.655
And we'd established that outside closure equals new closure.

00:03:31.655 --> 00:03:33.140
You probably think we could do that.

00:03:33.140 --> 00:03:35.090
We can't do that because closure is actually

00:03:35.090 --> 00:03:39.305
an abstract class and we don't really use closures directly in Groovy ourselves.

00:03:39.305 --> 00:03:41.495
Instead, we use this closure syntax.

00:03:41.495 --> 00:03:46.520
And that is what these curly braces mean here.

00:03:46.520 --> 00:03:48.365
This is basically a closure.

00:03:48.365 --> 00:03:51.425
And inside the curly braces we're gonna put what we actually want the closure to do.

00:03:51.425 --> 00:03:54.395
So the chunk of code and when executing on each iteration,

00:03:54.395 --> 00:03:56.555
I might find it strange that we have a space here.

00:03:56.555 --> 00:03:57.845
So what do we have a space?

00:03:57.845 --> 00:03:59.210
And we don't have brackets,

00:03:59.210 --> 00:04:01.970
or you could put brackets around here as well,

00:04:01.970 --> 00:04:03.605
but that's not idiomatic Groovy.

00:04:03.605 --> 00:04:05.195
So we'll remove those.

00:04:05.195 --> 00:04:09.620
Basically in Groovy, the parentheses are optional anyway,

00:04:09.620 --> 00:04:12.515
so it's returned back to where we're saying we're going to write this closure now.

00:04:12.515 --> 00:04:14.990
So the simplest thing we could do is basically prints out

00:04:14.990 --> 00:04:18.155
the element and agree that gives us a special variable called it,

00:04:18.155 --> 00:04:20.015
which basically means the current element.

00:04:20.015 --> 00:04:21.725
So if we execute this now,

00:04:21.725 --> 00:04:24.755
you can see for each elements is actually printed that Parliament out.

00:04:24.755 --> 00:04:25.475
Okay.

00:04:25.475 --> 00:04:29.405
You don't have to use this inbuilt variable, IT OR it.

00:04:29.405 --> 00:04:32.435
Instead, you can actually define your own variable.

00:04:32.435 --> 00:04:34.490
So we call it element for example.

00:04:34.490 --> 00:04:36.500
And if you do that, you need to basically have

00:04:36.500 --> 00:04:41.420
the variable that you're going to use to represent the current element of the iteration.

00:04:41.420 --> 00:04:43.595
And then you need to use this arrow operator here.

00:04:43.595 --> 00:04:46.910
And then you can refer to it here like this.

00:04:46.910 --> 00:04:48.680
So now if we rerun,

00:04:48.680 --> 00:04:51.290
you can see we still get the same effect.

00:04:51.290 --> 00:04:54.650
So that's how we can iterate through a list, mice and simple.

00:04:54.650 --> 00:04:57.080
And you could put whatever code you wanted to in

00:04:57.080 --> 00:04:59.360
there to somehow do something with the element.

00:04:59.360 --> 00:05:01.700
Of course, you can't actually modify that list.

00:05:01.700 --> 00:05:04.295
Launch ego concurrent modification exception.

00:05:04.295 --> 00:05:09.140
So for example, if I did L dot remove of element,

00:05:09.140 --> 00:05:12.350
that wouldn't work because it's concurrent modification exception.

00:05:12.350 --> 00:05:15.395
And that's because we can't alter the list is we're traversing through it.

00:05:15.395 --> 00:05:19.310
But if you want to do anything in a read-only way or calling other methods and passed out

00:05:19.310 --> 00:05:21.380
elements into the methods that can think or

00:05:21.380 --> 00:05:23.900
build up a new data structure. You can certainly do that.

00:05:23.900 --> 00:05:29.070
So that's the each method which is added as part of the GDK to all collections.
