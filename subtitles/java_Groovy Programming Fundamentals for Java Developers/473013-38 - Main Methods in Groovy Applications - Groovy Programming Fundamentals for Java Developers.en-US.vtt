WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.705
In this video, we're going to look at the most basic aspects of Groovy Programming.

00:00:03.705 --> 00:00:06.030
And that's basically creating a class or how you

00:00:06.030 --> 00:00:08.400
get started with Ruby console application,

00:00:08.400 --> 00:00:11.190
which enables you to generate quick scripts that you can execute.

00:00:11.190 --> 00:00:13.020
So we'll look at that in this video just so we can

00:00:13.020 --> 00:00:15.015
get up and running and find our way around.

00:00:15.015 --> 00:00:17.070
So first off, as you know in Java,

00:00:17.070 --> 00:00:19.725
every application starts with a main method.

00:00:19.725 --> 00:00:28.560
So it's normally where you have a public static void main arcs method like this.

00:00:28.560 --> 00:00:32.500
And here we put our actual code for the program.

00:00:32.500 --> 00:00:35.960
So you can see here this is a public method, it static,

00:00:35.960 --> 00:00:37.985
which means that we don't have to create an instance

00:00:37.985 --> 00:00:40.505
of the class that exists in before we can call it.

00:00:40.505 --> 00:00:42.515
So we can just call it on the class itself.

00:00:42.515 --> 00:00:44.585
It's void because it isn't maternally thing.

00:00:44.585 --> 00:00:46.685
It has a well-defined name, which is men.

00:00:46.685 --> 00:00:51.845
And it takes some brought him arguments which are passed in as an array of type string.

00:00:51.845 --> 00:00:53.960
And these usually correspond to

00:00:53.960 --> 00:00:57.050
the arguments that you pass to the program from the command line.

00:00:57.050 --> 00:00:59.300
So that's usually what happens in Java programs.

00:00:59.300 --> 00:01:00.980
And this will still working group as well.

00:01:00.980 --> 00:01:03.200
So for example in here, if I put

00:01:03.200 --> 00:01:07.940
a print statement to say running and unclear and then run,

00:01:07.940 --> 00:01:09.620
you can see the problems running.

00:01:09.620 --> 00:01:10.580
But what wouldn't agree?

00:01:10.580 --> 00:01:12.170
We console, we don't have to do this

00:01:12.170 --> 00:01:14.930
because it will actually generate that method for us.

00:01:14.930 --> 00:01:18.845
So if we get rid of that and then rerun,

00:01:18.845 --> 00:01:20.195
so you can see it's all fine.

00:01:20.195 --> 00:01:21.590
It's generated it for us.

00:01:21.590 --> 00:01:23.900
And we can see this if we go into the script section,

00:01:23.900 --> 00:01:30.155
into inspects AST, we can see here that this is the code that has been generated for us.

00:01:30.155 --> 00:01:32.375
And here you can see that method we just spoke about.

00:01:32.375 --> 00:01:33.500
The standard method that you find in

00:01:33.500 --> 00:01:36.170
all Java applications are all groovy applications as well.

00:01:36.170 --> 00:01:39.605
So all groovy applications need to have a public static void main method,

00:01:39.605 --> 00:01:42.680
which takes an array of string just like any normal Java program.

00:01:42.680 --> 00:01:45.875
And the reason is, is that this is actually a Java program behind the scenes.

00:01:45.875 --> 00:01:47.990
It just happens to calling to

00:01:47.990 --> 00:01:51.290
the Groovy library code to be able to do all that grew BY goodness.

00:01:51.290 --> 00:01:53.210
So you can see here org dot courthouse degree.

00:01:53.210 --> 00:01:55.550
We don't runtime invoke helper run script

00:01:55.550 --> 00:01:58.190
passing in the script name which is released generated,

00:01:58.190 --> 00:02:02.285
which enables the application or this short scripts which you've written to actually run.

00:02:02.285 --> 00:02:04.130
And while we're on the subject of the moment that you could

00:02:04.130 --> 00:02:05.960
actually make it shorter than usual.

00:02:05.960 --> 00:02:08.480
So for example, if we start out with what we had before,

00:02:08.480 --> 00:02:12.020
should we just go back to that?

00:02:12.020 --> 00:02:13.715
And we can amend this slightly.

00:02:13.715 --> 00:02:16.475
So for example here we can take advantage of group is weak typing.

00:02:16.475 --> 00:02:20.585
We don't have to specify what the parameter types are. So we can run this.

00:02:20.585 --> 00:02:21.695
That's fine.

00:02:21.695 --> 00:02:24.515
Again, we don't have to specify what the return type is.

00:02:24.515 --> 00:02:26.555
We could do this. That's fine.

00:02:26.555 --> 00:02:29.640
I indeed, we don't even have to mark it as public.

00:02:29.920 --> 00:02:31.655
We do that.

00:02:31.655 --> 00:02:33.725
However, we do need to say that it's static.

00:02:33.725 --> 00:02:36.245
Because if you do this, that won't work.

00:02:36.245 --> 00:02:40.595
And the reason is, is that it is a normal method definition now in the scripts instead.

00:02:40.595 --> 00:02:42.110
So if you go to the script,

00:02:42.110 --> 00:02:44.060
you'll see that it will have generators are public,

00:02:44.060 --> 00:02:46.100
static, void main method, which it has.

00:02:46.100 --> 00:02:47.810
But he thinks that the main method that we

00:02:47.810 --> 00:02:51.050
supplied is just an average method definition here.

00:02:51.050 --> 00:02:52.400
So that's why that doesn't work.

00:02:52.400 --> 00:02:55.535
So the very least you need to have static deaf men.

00:02:55.535 --> 00:02:58.415
But what I'd suggest is always public static, void, main,

00:02:58.415 --> 00:03:01.925
String, args, because then it's crystal clear that it's a main method.

00:03:01.925 --> 00:03:03.380
We're sticking with convention.

00:03:03.380 --> 00:03:06.200
And we're not relying on any groovy since extracts or

00:03:06.200 --> 00:03:09.365
anything to be quote unquote clever to get us up and running.

00:03:09.365 --> 00:03:12.785
Instead we're using and sticking to the defacto conventions.

00:03:12.785 --> 00:03:13.640
So always do that.

00:03:13.640 --> 00:03:21.230
That said, if we take this off and reruns,

00:03:21.230 --> 00:03:23.225
you've got a very simple script.

00:03:23.225 --> 00:03:26.990
So the simplest possible thing you can do in a group program is to return something.

00:03:26.990 --> 00:03:29.060
So the simplest possible script will be,

00:03:29.060 --> 00:03:31.880
for example, just a number like this one.

00:03:31.880 --> 00:03:33.275
We clear and return.

00:03:33.275 --> 00:03:34.880
This is a valid Ruby script.

00:03:34.880 --> 00:03:36.365
And this is because in Groovy,

00:03:36.365 --> 00:03:40.685
you can emit the return statement for the last statements in a method,

00:03:40.685 --> 00:03:42.470
and that's the value that will be returned.

00:03:42.470 --> 00:03:45.380
So this will actually be generated as return one.

00:03:45.380 --> 00:03:47.810
And that's as simple as possible script that we can write something

00:03:47.810 --> 00:03:50.420
that returns a result and doesn't actually do anything.

00:03:50.420 --> 00:03:52.160
Obviously wants to sing more useful,

00:03:52.160 --> 00:03:56.010
but syntactically as the simplest possible thing that we can do.
