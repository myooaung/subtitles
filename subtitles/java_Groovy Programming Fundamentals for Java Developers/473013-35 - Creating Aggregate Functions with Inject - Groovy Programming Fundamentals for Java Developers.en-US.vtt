WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.895
Another thing as well, which we'll see now is the inject function.

00:00:02.895 --> 00:00:06.450
And this is where we can fold elements of a collection successively to

00:00:06.450 --> 00:00:10.065
resolve effectively down into one single elements or value at the end.

00:00:10.065 --> 00:00:11.595
So let's take a look at this now.

00:00:11.595 --> 00:00:16.350
Let's suppose we have a list of numbers again.

00:00:16.350 --> 00:00:17.880
And we want to sum these numbers.

00:00:17.880 --> 00:00:22.575
We could by the way, just use the built-in function sum, which would give us 15.

00:00:22.575 --> 00:00:24.720
And by the way as well, we also have min,

00:00:24.720 --> 00:00:28.275
which gives us the minimum number and max,

00:00:28.275 --> 00:00:30.240
which gives a maximum number two.

00:00:30.240 --> 00:00:33.270
So groovy also offers these kinda by aggregate functions, if you will,

00:00:33.270 --> 00:00:35.190
which will take the whole set of numbers,

00:00:35.190 --> 00:00:38.910
can resolve down to some single element based on whether you want to find the minimum,

00:00:38.910 --> 00:00:40.245
maximum or the sum.

00:00:40.245 --> 00:00:42.310
Let us see how we can do this using inject.

00:00:42.310 --> 00:00:45.785
So to do this, we do L dot inject.

00:00:45.785 --> 00:00:49.475
And what we do is we have to pass the first value in the injection,

00:00:49.475 --> 00:00:51.185
which for here we'll just say 0.

00:00:51.185 --> 00:00:54.365
And then we effectively give a recurrence relation in a closure.

00:00:54.365 --> 00:00:56.990
So recurrence relation is basically where we're

00:00:56.990 --> 00:01:00.005
defining one elements in terms of another element,

00:01:00.005 --> 00:01:01.790
possibly multiple other elements.

00:01:01.790 --> 00:01:06.860
So what we're going to do here is we're going to add one to two, which would give three.

00:01:06.860 --> 00:01:10.430
And then for that three, we're going to add three, which will give six.

00:01:10.430 --> 00:01:13.295
And for that six, we had four, which gives ten.

00:01:13.295 --> 00:01:15.890
And for that ten we had five, which will give 15.

00:01:15.890 --> 00:01:17.720
So in other words, we're kind of accumulating

00:01:17.720 --> 00:01:19.985
this result with each iteration of the loop,

00:01:19.985 --> 00:01:22.310
which is almost like calculating and running total.

00:01:22.310 --> 00:01:24.230
And therefore, the first number that we pass in,

00:01:24.230 --> 00:01:26.255
which is 0 into the inject function.

00:01:26.255 --> 00:01:28.220
That's kind of like the starting running total,

00:01:28.220 --> 00:01:30.665
if you like, or the starting some so far, if you will.

00:01:30.665 --> 00:01:33.470
So the current sum is the first argument and the closure,

00:01:33.470 --> 00:01:36.395
and the next argument is the actual element itself, which is e.

00:01:36.395 --> 00:01:38.285
And if I just put some white space here,

00:01:38.285 --> 00:01:41.105
the expression in here is going to evaluate to the Newsome.

00:01:41.105 --> 00:01:45.515
So that is going to be some plus E, which makes sense.

00:01:45.515 --> 00:01:47.390
So now if we execute this,

00:01:47.390 --> 00:01:49.715
we can see that we get the number 15.

00:01:49.715 --> 00:01:51.170
And now that we know how that works,

00:01:51.170 --> 00:01:53.150
we could collapse up onto

00:01:53.150 --> 00:01:55.760
one line to make it a little

00:01:55.760 --> 00:01:58.610
tidy or we could change this to not just implement some though,

00:01:58.610 --> 00:02:00.725
we continue to implement the max.

00:02:00.725 --> 00:02:04.775
So here the current maximum is 0.

00:02:04.775 --> 00:02:07.265
That's this idea of this running total or running,

00:02:07.265 --> 00:02:09.065
running maximum, I guess in this case.

00:02:09.065 --> 00:02:11.960
And then for the elements, when we need to do is to basically

00:02:11.960 --> 00:02:20.030
return the maximum of either the current maximum and the current element.

00:02:20.030 --> 00:02:22.610
So if we execute this, we should see extends five,

00:02:22.610 --> 00:02:24.050
which he doesn't returns five.

00:02:24.050 --> 00:02:26.420
And if we had 13 and here for example,

00:02:26.420 --> 00:02:29.855
in the middle, then we get 13.

00:02:29.855 --> 00:02:31.280
That's the inject function,

00:02:31.280 --> 00:02:33.335
which enables us to reduce a collection.

00:02:33.335 --> 00:02:34.625
Downs were single element,

00:02:34.625 --> 00:02:38.060
which is sometimes useful if a little tricky to get your head around it first.

00:02:38.060 --> 00:02:40.250
But as soon as you get the hang of this recurrence relation,

00:02:40.250 --> 00:02:43.070
the fact that you're using the previous element or the element of

00:02:43.070 --> 00:02:46.325
their previous iterations run with the current iterations run.

00:02:46.325 --> 00:02:47.630
As soon as you get your head around that,

00:02:47.630 --> 00:02:51.150
then you should be able to use injects function with ease.
