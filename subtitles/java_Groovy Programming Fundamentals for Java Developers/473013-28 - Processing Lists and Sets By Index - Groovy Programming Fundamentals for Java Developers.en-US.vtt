WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.970
Now if you need to get the index for whatever reason,

00:00:02.970 --> 00:00:07.930
you can also have another method called each with index.

00:00:08.060 --> 00:00:10.860
And this gives you the element.

00:00:10.860 --> 00:00:12.615
Let's just call it E for example.

00:00:12.615 --> 00:00:15.540
And the index, let's call it idx,

00:00:15.540 --> 00:00:17.920
maybe L and idx.

00:00:18.290 --> 00:00:22.480
Sofa put these on a new line. You can do that.

00:00:23.060 --> 00:00:25.485
So now for example,

00:00:25.485 --> 00:00:29.130
I could say current elements,

00:00:29.130 --> 00:00:39.410
l, iteration number equals and then idx.

00:00:39.410 --> 00:00:43.820
So running this, you can see here for element

00:00:43.820 --> 00:00:49.430
12345 and the iteration is indexed from 0, so it's 01234.

00:00:49.430 --> 00:00:51.380
So that can be useful if you need to use

00:00:51.380 --> 00:00:54.380
the index in some way that's also available to you.

00:00:54.380 --> 00:00:58.775
So this, each kind of mechanism works fine for lists and also for sets as well.

00:00:58.775 --> 00:01:00.080
And don't forget as well.

00:01:00.080 --> 00:01:02.750
But if you're using the default set typing review that

00:01:02.750 --> 00:01:05.630
comes back if you don't specify the Manchus specific set type,

00:01:05.630 --> 00:01:07.550
that is only come back as a LinkedHashSet,

00:01:07.550 --> 00:01:10.940
which means it's always going to maintain the insertion order and it's gonna give you

00:01:10.940 --> 00:01:13.070
a reliable order back out when you're using

00:01:13.070 --> 00:01:16.680
each is reasonably having made this list into a set.

00:01:17.650 --> 00:01:28.205
And then get rid of this because we don't need the index. Get rid of that.

00:01:28.205 --> 00:01:29.465
And now R1.

00:01:29.465 --> 00:01:32.705
So now this is going to be a set which is a type of LinkedHashSet.

00:01:32.705 --> 00:01:35.310
You'll find you'll still get the same order.

00:01:35.500 --> 00:01:38.910
And we do 1-2-3-4-5.
