WEBVTT
1
00:00:01.040 --> 00:00:04.640
[Autogenerated] you now know what enterprise integration patterns are.

2
00:00:04.640 --> 00:00:07.110
But what exactly is spring integration,

3
00:00:07.110 --> 00:00:10.840
and how does it relate to enterprise integration patterns?

4
00:00:10.840 --> 00:00:15.400
Spring integration is an implementation off the enterprise integration patterns,

5
00:00:15.400 --> 00:00:18.180
which enables you to write your own spring based

6
00:00:18.180 --> 00:00:21.800
applications that use the patterns it contains.

7
00:00:21.800 --> 00:00:26.280
Many ready to use implementations off the concepts off enterprise integration

8
00:00:26.280 --> 00:00:30.850
patterns in the form off interfaces and classes that are designed with the

9
00:00:30.850 --> 00:00:34.340
main principles off the spring framework in mind,

10
00:00:34.340 --> 00:00:37.000
it has interfaces and classes for messages,

11
00:00:37.000 --> 00:00:39.090
different kinds of message channels,

12
00:00:39.090 --> 00:00:43.440
many different kinds off endpoints and transformers and routers.

13
00:00:43.440 --> 00:00:46.820
You can use these components using the standard spring framework

14
00:00:46.820 --> 00:00:49.840
programming techniques such as dependency injection,

15
00:00:49.840 --> 00:00:53.080
which helps you to maintain separation of concerns

16
00:00:53.080 --> 00:00:55.090
between business logic and integration.

17
00:00:55.090 --> 00:00:56.340
Logic.

18
00:00:56.340 --> 00:00:58.740
If you are familiar with the spring framework,

19
00:00:58.740 --> 00:01:03.300
you know that you can configure spring beans in the application context using

20
00:01:03.300 --> 00:01:08.140
XML or with annotations in Java code spring integration,

21
00:01:08.140 --> 00:01:11.940
AD DS XML name spaces and annotations specifically for

22
00:01:11.940 --> 00:01:15.140
configuring spring integration components.

23
00:01:15.140 --> 00:01:20.460
Besides these usual XML and innovations to configure your application context,

24
00:01:20.460 --> 00:01:24.380
spring integration also provides a domain specific language to

25
00:01:24.380 --> 00:01:29.030
configure components using these domain specific language.

26
00:01:29.030 --> 00:01:34.540
You can configure spring integration components in a readable way In Java code.

27
00:01:34.540 --> 00:01:37.640
The idea is that you configure messaging channels,

28
00:01:37.640 --> 00:01:42.240
endpoints, transformers and routers in a declare a tive way,

29
00:01:42.240 --> 00:01:45.930
coming back to the example of connecting to an FTP server that

30
00:01:45.930 --> 00:01:48.190
I mentioned in the beginning of the course.

31
00:01:48.190 --> 00:01:51.720
Instead of writing a lot of plumbing code that deals with the details,

32
00:01:51.720 --> 00:01:56.230
you configure an FTP inbound channel adapter that downloads

33
00:01:56.230 --> 00:02:00.000
files on a regular schedule and puts a message on a channel

34
00:02:00.000 --> 00:02:02.940
whenever new file is downloaded.

35
00:02:02.940 --> 00:02:06.870
Then you configure a service activator that calls your business logic.

36
00:02:06.870 --> 00:02:09.640
When it receives a message on the channel,

37
00:02:09.640 --> 00:02:12.880
you can find the reference and API documentation for

38
00:02:12.880 --> 00:02:20.000
spring integration at spring load. IOS slash projects slash spring dash integration.

