1
00:00:01,040 --> 00:00:04,190
[Autogenerated] We now have a nice demo application that can process

2
00:00:04,190 --> 00:00:08,170
registration messages by saving a registration in the database,

3
00:00:08,170 --> 00:00:13,640
sending a confirmation email to the at and and notifying the billing system.

4
00:00:13,640 --> 00:00:17,240
These old works fine as long as nothing goes wrong.

5
00:00:17,240 --> 00:00:20,750
In the real world, however, things do sometimes go wrong.

6
00:00:20,750 --> 00:00:24,720
So our software has to be prepared to deal with errors and unexpected

7
00:00:24,720 --> 00:00:29,080
situations in this module will investigate different error a

8
00:00:29,080 --> 00:00:32,840
scenarios and see how the application reacts.

9
00:00:32,840 --> 00:00:34,400
For example, what happens?

10
00:00:34,400 --> 00:00:38,650
Even error occurs when we are inserting a record in the database or if

11
00:00:38,650 --> 00:00:42,240
the mail server or the building system are unavailable.

12
00:00:42,240 --> 00:00:46,740
Well, look at how we can deal with these situations in different ways.

13
00:00:46,740 --> 00:00:47,290
First,

14
00:00:47,290 --> 00:00:50,730
we will look at how we can have revenue in Q reroute messages

15
00:00:50,730 --> 00:00:52,970
that cannot be processed to with that letter.

16
00:00:52,970 --> 00:00:54,240
Q.

17
00:00:54,240 --> 00:00:54,850
Finally,

18
00:00:54,850 --> 00:00:57,930
we will use spring integrations error handling mechanisms to

19
00:00:57,930 --> 00:01:01,080
get more fine grained control over errors that happened in the

20
00:01:01,080 --> 00:01:03,740
components of our integration flow.

21
00:01:03,740 --> 00:01:04,910
While we're doing this,

22
00:01:04,910 --> 00:01:07,060
you will also learn more about how spring

23
00:01:07,060 --> 00:01:10,640
integration uses threats and transactions.

24
00:01:10,640 --> 00:01:17,000
Let's start by checking out different ways things might go wrong in our demo application

