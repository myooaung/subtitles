1
00:00:01,040 --> 00:00:03,220
[Autogenerated] we've now completely decoupled the front

2
00:00:03,220 --> 00:00:06,140
end and back and using rather than queue.

3
00:00:06,140 --> 00:00:07,610
As a consequence of this,

4
00:00:07,610 --> 00:00:10,900
we no longer have to have both the front and on the back and running.

5
00:00:10,900 --> 00:00:16,540
To be able to enter and process at and registrations there is another advantage.

6
00:00:16,540 --> 00:00:22,540
2D Isha's well, we can now also skill the front and then back and independently.

7
00:00:22,540 --> 00:00:23,520
For example,

8
00:00:23,520 --> 00:00:26,860
we can have multiple instances off the back and running to process

9
00:00:26,860 --> 00:00:30,490
registrations as the last demo in this model,

10
00:00:30,490 --> 00:00:33,150
let's see how we can have one instance off the front and

11
00:00:33,150 --> 00:00:36,140
running and two instances off the back end.

12
00:00:36,140 --> 00:00:40,790
Let's take a look at the next example project in the back and application.

13
00:00:40,790 --> 00:00:45,040
We're using an embedded in memory H two database.

14
00:00:45,040 --> 00:00:48,250
This means that the database is running inside the back and

15
00:00:48,250 --> 00:00:51,760
application itself and doesn't store registrations on disk,

16
00:00:51,760 --> 00:00:53,740
but only in memory.

17
00:00:53,740 --> 00:00:55,700
When we stop the back and application,

18
00:00:55,700 --> 00:00:59,540
the database and all the data it contains disappear.

19
00:00:59,540 --> 00:01:03,820
Now we want to be able to run multiple instances off the back and application,

20
00:01:03,820 --> 00:01:07,040
and we want them to use the same database,

21
00:01:07,040 --> 00:01:10,840
so we're going to change the database configuration off the back end

22
00:01:10,840 --> 00:01:15,640
to make it work with an H two database running in a separate process

23
00:01:15,640 --> 00:01:17,460
to make it easy to run the database.

24
00:01:17,460 --> 00:01:18,250
Separately,

25
00:01:18,250 --> 00:01:20,790
I've created a small and simple Docker image and

26
00:01:20,790 --> 00:01:23,240
made it available on Docker hop.

27
00:01:23,240 --> 00:01:27,350
There seems to be no official Docker image for the H two database,

28
00:01:27,350 --> 00:01:31,090
so I've made one myself with the following command.

29
00:01:31,090 --> 00:01:34,440
You can start H two in a docker container.

30
00:01:34,440 --> 00:01:39,740
The H two console will be available on local host Port 80 82.

31
00:01:39,740 --> 00:01:43,940
Now there are two things we have to do in the back and application

32
00:01:43,940 --> 00:01:47,560
first Editor Spring Bootstrap Application Properties to make it

33
00:01:47,560 --> 00:01:51,690
access the age to database running in Docker instead of creating an

34
00:01:51,690 --> 00:01:54,540
embedded in memory database.

35
00:01:54,540 --> 00:01:59,950
Second is to remove the scheme adult SQL and data dot SQL files from the source.

36
00:01:59,950 --> 00:02:03,460
Main Resource is directory because we don't want the back

37
00:02:03,460 --> 00:02:06,850
and application to try and create a schema and insert data

38
00:02:06,850 --> 00:02:09,040
every time when it starts up,

39
00:02:09,040 --> 00:02:13,220
we do have to make sure to run the SQL commands in these two files once on

40
00:02:13,220 --> 00:02:17,830
the H two database running in Docker so that the schema axis and the data

41
00:02:17,830 --> 00:02:21,630
is inserted Let's now in one terminal windows.

42
00:02:21,630 --> 00:02:26,830
Start up the front and application using maven minus B l web

43
00:02:26,830 --> 00:02:31,300
Spring boot run and then starts to instances off the back and

44
00:02:31,300 --> 00:02:34,500
application using maven minus PLC services.

45
00:02:34,500 --> 00:02:40,150
Spring boot Ron in two other terminal windows, both off these instances.

46
00:02:40,150 --> 00:02:42,330
Off the back and application will connect to Rebel

47
00:02:42,330 --> 00:02:45,140
MQ and listen to the same cube.

48
00:02:45,140 --> 00:02:48,200
Since the Q does point to point messaging whenever the

49
00:02:48,200 --> 00:02:50,930
front and sends a message to Rick, you rabble,

50
00:02:50,930 --> 00:02:53,570
MQ is going to deliver it to only one of the

51
00:02:53,570 --> 00:02:56,240
instances off the back and application.

52
00:02:56,240 --> 00:02:59,740
Enter some registrations in the web application.

53
00:02:59,740 --> 00:03:03,640
Look at the logging off both instances off the back end,

54
00:03:03,640 --> 00:03:07,240
you will see that sometimes number one processes the registration,

55
00:03:07,240 --> 00:03:11,630
and sometimes number two used the H two console on local

56
00:03:11,630 --> 00:03:15,860
host sport 80 82 to see that both instances are saving

57
00:03:15,860 --> 00:03:18,840
registrations in the same database.

58
00:03:18,840 --> 00:03:19,710
As you can see,

59
00:03:19,710 --> 00:03:26,000
it's now easy to run multiple instances off the back and application to process registrations

