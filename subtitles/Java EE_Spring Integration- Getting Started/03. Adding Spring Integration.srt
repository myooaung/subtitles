1
00:00:01,040 --> 00:00:05,540
[Autogenerated] we're now going to ach bring integration to do demo application.

2
00:00:05,540 --> 00:00:08,510
We will start simple with a single point to point

3
00:00:08,510 --> 00:00:11,240
channel and a service activator.

4
00:00:11,240 --> 00:00:14,400
We are going to use spring integration to decouple the

5
00:00:14,400 --> 00:00:17,240
web player from the surface layer.

6
00:00:17,240 --> 00:00:20,180
At the moment, the controller, which is in the web player,

7
00:00:20,180 --> 00:00:24,140
has a direct dependency on the registration service.

8
00:00:24,140 --> 00:00:27,620
Instead of having the control are directly, call the service.

9
00:00:27,620 --> 00:00:31,340
We're going to make this work via a message channel.

10
00:00:31,340 --> 00:00:35,150
The submit method of the controller will put a message on the channel,

11
00:00:35,150 --> 00:00:40,740
and the service will be called by your service activator to process the message.

12
00:00:40,740 --> 00:00:43,240
Let's see how we can do this.

13
00:00:43,240 --> 00:00:46,580
The first thing we have to do is add a dependency on

14
00:00:46,580 --> 00:00:49,040
spring integration to the project.

15
00:00:49,040 --> 00:00:52,300
There is a spring Bootstrap artur for spring integration,

16
00:00:52,300 --> 00:00:56,940
so we will add a dependency on that starter in the May even POM file.

17
00:00:56,940 --> 00:01:01,070
We will be using XML configuration for the spring integration components.

18
00:01:01,070 --> 00:01:07,140
In this example, let's add a spring XML configuration file to the project.

19
00:01:07,140 --> 00:01:10,240
You can give this file any name you like.

20
00:01:10,240 --> 00:01:13,330
Let's name it integration dash conflict got to XML and

21
00:01:13,330 --> 00:01:16,240
save it in the resource is directory.

22
00:01:16,240 --> 00:01:20,440
Now we have to tell Spring to Lotus Configuration File.

23
00:01:20,440 --> 00:01:23,040
Go to the Spring Boot Application Class,

24
00:01:23,040 --> 00:01:27,650
which is class Globomantics registration application at

25
00:01:27,650 --> 00:01:30,750
an import resource annotation to make spring look for the

26
00:01:30,750 --> 00:01:33,440
XML file in the class path.

27
00:01:33,440 --> 00:01:35,850
That's all the set up we have to do to get screen

28
00:01:35,850 --> 00:01:39,340
integration included in our spring boot project.

29
00:01:39,340 --> 00:01:40,050
As you see,

30
00:01:40,050 --> 00:01:43,930
it's very easy now we can create ping integration

31
00:01:43,930 --> 00:01:46,740
components in the configuration file.

32
00:01:46,740 --> 00:01:52,540
Let's first declared the spring integration XML name, space and schema location.

33
00:01:52,540 --> 00:01:55,140
You can choose any name space prefix you like,

34
00:01:55,140 --> 00:01:57,740
but it is recommended conventional name.

35
00:01:57,740 --> 00:02:01,920
So let's use that we're going to create to spring integration

36
00:02:01,920 --> 00:02:05,940
components a message general on a service activator.

37
00:02:05,940 --> 00:02:07,760
Let's create our first message.

38
00:02:07,760 --> 00:02:10,310
General, this is super simple.

39
00:02:10,310 --> 00:02:14,740
We use in channel to create a channel and give it an ID.

40
00:02:14,740 --> 00:02:18,940
Let's give this generally IDE registration request.

41
00:02:18,940 --> 00:02:22,640
Creating the service activator is just as easy.

42
00:02:22,640 --> 00:02:27,840
The service activator pattern is one off the enterprise integration patterns.

43
00:02:27,840 --> 00:02:32,160
It's a simple type of endpoint that calls some business project whenever it

44
00:02:32,160 --> 00:02:35,740
receives a message on the channel that it's connected to.

45
00:02:35,740 --> 00:02:40,640
We have to specify a few attributes on the service activator element here.

46
00:02:40,640 --> 00:02:43,840
First, the channel that it listens on.

47
00:02:43,840 --> 00:02:48,290
Then we use the wrath and method attributes to specify that it should

48
00:02:48,290 --> 00:02:52,140
call the register method off the registration services.

49
00:02:52,140 --> 00:02:55,730
The value off the raft attribute is a spring be name,

50
00:02:55,730 --> 00:02:59,840
so we used to be name off the registration service here.

51
00:02:59,840 --> 00:03:03,020
The value off the method attribute is just the name off the

52
00:03:03,020 --> 00:03:04,910
method that we want to service activated.

53
00:03:04,910 --> 00:03:09,340
To go next, we have to modify to control her.

54
00:03:09,340 --> 00:03:13,240
Let's take a look at class registration controller.

55
00:03:13,240 --> 00:03:18,010
We don't want the controller to directly call the registration service anymore.

56
00:03:18,010 --> 00:03:22,440
So will first remove the dependency on the registration services.

57
00:03:22,440 --> 00:03:26,440
We do want to control her to send a message to the channel.

58
00:03:26,440 --> 00:03:29,640
Let's injected you and only to the controller.

59
00:03:29,640 --> 00:03:33,620
The channel definition that we put in the XML configuration file

60
00:03:33,620 --> 00:03:37,990
registers the message channel as a regular spring bean so we can use

61
00:03:37,990 --> 00:03:41,840
dependency injection here to get it into to controller.

62
00:03:41,840 --> 00:03:46,100
A typical spring integration application has multiple message generals and

63
00:03:46,100 --> 00:03:50,440
spring integration also registers a few special channels itself.

64
00:03:50,440 --> 00:03:54,000
So we have to use the qualifier annotation here to tell

65
00:03:54,000 --> 00:03:56,610
spring which message general being we want,

66
00:03:56,610 --> 00:03:58,390
which is in this case, of course,

67
00:03:58,390 --> 00:04:01,580
the channel with the IDE registration requests that we

68
00:04:01,580 --> 00:04:06,750
just created in the submit method, we now have to first create a message,

69
00:04:06,750 --> 00:04:09,640
which we can then send to the channel.

70
00:04:09,640 --> 00:04:14,740
An easy way to create a message is by using class message builder.

71
00:04:14,740 --> 00:04:18,630
Let's use the with payload method to create a message with the

72
00:04:18,630 --> 00:04:22,040
Henry registration object as the payload.

73
00:04:22,040 --> 00:04:26,750
Here's a small issue to take care off when you're using message Builder,

74
00:04:26,750 --> 00:04:30,840
you might notice that are actually two classes named Message Builder.

75
00:04:30,840 --> 00:04:32,940
Available to import.

76
00:04:32,940 --> 00:04:37,750
One is in the package or code spring framework integration not support,

77
00:04:37,750 --> 00:04:41,640
and the other one is in the package or code spring framework dot messaging,

78
00:04:41,640 --> 00:04:43,140
not support.

79
00:04:43,140 --> 00:04:46,640
This is a bit confusing, which one should use.

80
00:04:46,640 --> 00:04:50,540
The reason why there are two has to do with history.

81
00:04:50,540 --> 00:04:51,370
Originally,

82
00:04:51,370 --> 00:04:55,790
Message Builder and some other classes were part of spring integration,

83
00:04:55,790 --> 00:04:59,110
but at some point the people developing the spring framework

84
00:04:59,110 --> 00:05:02,430
found out that the number off core messaging classes were so

85
00:05:02,430 --> 00:05:06,940
useful that they added them to the core spring framework as well

86
00:05:06,940 --> 00:05:08,870
but for backward compatibility,

87
00:05:08,870 --> 00:05:12,640
they didn't remove the causes from spring integration.

88
00:05:12,640 --> 00:05:13,620
So now we are,

89
00:05:13,620 --> 00:05:18,840
unfortunately stuck with glasses with the same names in multiple places.

90
00:05:18,840 --> 00:05:22,740
My recommendation is to prefer the core spring messaging classes

91
00:05:22,740 --> 00:05:26,920
from the package or code spring framework that messaging above the

92
00:05:26,920 --> 00:05:29,740
spring integration specific classes.

93
00:05:29,740 --> 00:05:34,020
So I take care here to import message Builder from the package ordinal

94
00:05:34,020 --> 00:05:38,300
Spring Framework thought messaging that support now that we have a

95
00:05:38,300 --> 00:05:41,510
message sending into the general is very simple.

96
00:05:41,510 --> 00:05:45,940
We just have to call the scent method on the channel, passing it the message.

97
00:05:45,940 --> 00:05:46,620
That's it.

98
00:05:46,620 --> 00:05:50,240
We now have our first spring integration application.

99
00:05:50,240 --> 00:05:53,340
Let's run it and see if it still works.

100
00:05:53,340 --> 00:05:57,440
As you can see, the applications still does the same thing.

101
00:05:57,440 --> 00:06:05,000
When you fill in the registration form and click the register button, the registration is still saved in the database.

