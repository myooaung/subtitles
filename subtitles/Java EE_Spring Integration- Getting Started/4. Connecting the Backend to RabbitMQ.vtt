WEBVTT
1
00:00:01.040 --> 00:00:04.540
[Autogenerated] there is a message waiting in the queue for the back end.

2
00:00:04.540 --> 00:00:07.840
So obviously we now need to connect the back and to rather than

3
00:00:07.840 --> 00:00:10.840
queue so that I can process this message.

4
00:00:10.840 --> 00:00:14.940
This is very similar to what we've just done with the front end.

5
00:00:14.940 --> 00:00:18.000
The spring Boot application class for the beckoned is class

6
00:00:18.000 --> 00:00:22.250
Globomantics Service application just as in the front end.

7
00:00:22.250 --> 00:00:26.370
Well configured unnecessary spring integration components using XML.

8
00:00:26.370 --> 00:00:30.100
So there's an import resource annotation here to include the XML

9
00:00:30.100 --> 00:00:34.480
configuration file to receive messages from rabid MQ.

10
00:00:34.480 --> 00:00:37.240
We will use it channel adapter again.

11
00:00:37.240 --> 00:00:39.350
Since we're now receiving messages,

12
00:00:39.350 --> 00:00:43.840
we'll use an inbound channel adapter using the Q names.

13
00:00:43.840 --> 00:00:44.430
Attribute,

14
00:00:44.430 --> 00:00:47.410
we tell it that we want to receive messages from the queue

15
00:00:47.410 --> 00:00:51.040
named Globomantics Start registration request.

16
00:00:51.040 --> 00:00:55.070
Note that intelligent displaced is que name in red because for some reason it

17
00:00:55.070 --> 00:00:57.970
thinks that this name should be the name of a spring bean.

18
00:00:57.970 --> 00:00:59.740
But that's wrong.

19
00:00:59.740 --> 00:01:02.940
It looks like that's a small bug and IntelliJ.

20
00:01:02.940 --> 00:01:03.450
Next,

21
00:01:03.450 --> 00:01:06.830
we tell the channel adaptor to put the messages that it receives on

22
00:01:06.830 --> 00:01:09.700
the Spring Integration Channel named from Rabbit,

23
00:01:09.700 --> 00:01:14.220
which will also have to define the messages that were receiving on

24
00:01:14.220 --> 00:01:17.640
the From Rabbit Channel have adjacent payload.

25
00:01:17.640 --> 00:01:21.990
Let's add a JSON to object transformer the opposite off the object

26
00:01:21.990 --> 00:01:24.290
to JSON transformer that you used in the front,

27
00:01:24.290 --> 00:01:28.320
and to translate a JSON payload back to Aneta de Registration.

28
00:01:28.320 --> 00:01:30.040
Java object.

29
00:01:30.040 --> 00:01:30.360
Well,

30
00:01:30.360 --> 00:01:32.960
let the transformers and it's output messages to a

31
00:01:32.960 --> 00:01:35.740
channel named Registration regressed.

32
00:01:35.740 --> 00:01:36.400
Finally,

33
00:01:36.400 --> 00:01:39.710
we will define a service activator that receives messages from

34
00:01:39.710 --> 00:01:42.930
the registration Request Channel and that caused the register

35
00:01:42.930 --> 00:01:47.540
method on the registration service, just like we error previously.

36
00:01:47.540 --> 00:01:51.040
Let's start the back and application in the logging.

37
00:01:51.040 --> 00:01:53.680
You'll see that it has received the message from rather than

38
00:01:53.680 --> 00:01:57.190
queue immediately after starting up and that it has saved the

39
00:01:57.190 --> 00:01:59.740
registration in its database.

40
00:01:59.740 --> 00:02:01.830
You can connect to the age to console,

41
00:02:01.830 --> 00:02:05.740
which is now running on local host sport 80 81 see that

42
00:02:05.740 --> 00:02:08.340
the registration is in the database.

43
00:02:08.340 --> 00:02:10.340
So there we are.

44
00:02:10.340 --> 00:02:14.750
We now have separate front and back and application that can exchange messages.

45
00:02:14.750 --> 00:02:16.740
Fire rabid, MQ.

46
00:02:16.740 --> 00:02:21.140
In this example project I've used XML configuration,

47
00:02:21.140 --> 00:02:24.020
as you've learned earlier Spring integration provides

48
00:02:24.020 --> 00:02:27.400
different ways to configure components with XML,

49
00:02:27.400 --> 00:02:32.100
Java annotations or the spring integration domain specific language.

50
00:02:32.100 --> 00:02:35.840
There are pros and cons to each of these options.

51
00:02:35.840 --> 00:02:40.940
I've used XML here because it was clear and simple for this example,

52
00:02:40.940 --> 00:02:43.490
the spring integration named Space Partners,

53
00:02:43.490 --> 00:02:48.100
which convert your XML configuration to spring beans to a lot off work

54
00:02:48.100 --> 00:02:51.540
for you under the hood to set up everything correctly.

55
00:02:51.540 --> 00:02:52.450
As a bonus,

56
00:02:52.450 --> 00:02:56.320
I've also included the version off the Example project that we worked with

57
00:02:56.320 --> 00:03:00.290
in this module with Java configuration instead of XML.

58
00:03:00.290 --> 00:03:03.740
In the examples that you can download with this course,

59
00:03:03.740 --> 00:03:06.290
I'm not going to explain it in detail here,

60
00:03:06.290 --> 00:03:09.780
but you can take a look at it yourself to learn what you would need to do.

61
00:03:09.780 --> 00:03:14.040
If you would want to use Jennifer Configuration instead of XML,

62
00:03:14.040 --> 00:03:16.100
you will see that it's a bit more involved,

63
00:03:16.100 --> 00:03:18.860
since there are some components that you don't have to configure

64
00:03:18.860 --> 00:03:21.500
yourself that are configured automatically for you.

65
00:03:21.500 --> 00:03:23.540
When you use XML,

66
00:03:23.540 --> 00:03:25.670
you will have to have a better understanding of the

67
00:03:25.670 --> 00:03:34.000
spring integration components. To do this, I've added comments to the source code to explain it as well as I can

