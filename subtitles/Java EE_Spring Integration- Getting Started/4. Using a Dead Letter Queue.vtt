WEBVTT
1
00:00:01.040 --> 00:00:03.880
[Autogenerated] Let's take a look at one possible way to solve the

2
00:00:03.880 --> 00:00:06.440
problem that the back and service starts to spin,

3
00:00:06.440 --> 00:00:10.240
trying to re process a message that causes an error.

4
00:00:10.240 --> 00:00:12.970
There is an enterprise integration pattern that's about

5
00:00:12.970 --> 00:00:16.040
dealing with messages that cannot be processed,

6
00:00:16.040 --> 00:00:18.940
which is the dead letter channel pattern.

7
00:00:18.940 --> 00:00:22.220
The idea is that when the system detects a message that

8
00:00:22.220 --> 00:00:24.490
it cannot process for some reason,

9
00:00:24.490 --> 00:00:28.530
that message is put aside on a special channel so that it doesn't

10
00:00:28.530 --> 00:00:31.640
get in a way for processing other messages.

11
00:00:31.640 --> 00:00:34.730
Rapid MQ supports this pattern as follows.

12
00:00:34.730 --> 00:00:37.850
You can have it automatically send messages that are negatively

13
00:00:37.850 --> 00:00:40.240
acknowledged to with that letter exchange,

14
00:00:40.240 --> 00:00:45.970
which routes them to that letter Q A system administrator or another piece of

15
00:00:45.970 --> 00:00:48.910
software and then examined the messages on the dead letter.

16
00:00:48.910 --> 00:00:50.140
Q.

17
00:00:50.140 --> 00:00:54.560
Explaining rabid MQ in detail is outside of the scope off this course,

18
00:00:54.560 --> 00:00:55.770
so I won't explain.

19
00:00:55.770 --> 00:00:59.840
The configuration will be doing in rebel MQ in detail.

20
00:00:59.840 --> 00:01:00.710
It is, however,

21
00:01:00.710 --> 00:01:03.380
important that you know about the dead letter channel

22
00:01:03.380 --> 00:01:06.160
pattern because it's a common way to deal with problem

23
00:01:06.160 --> 00:01:09.040
messages in messaging applications.

24
00:01:09.040 --> 00:01:11.470
What we want to achieve is that when an exception

25
00:01:11.470 --> 00:01:13.530
happens in our integration flow.

26
00:01:13.530 --> 00:01:17.140
The message that causes the problem is not put right back onto the

27
00:01:17.140 --> 00:01:20.340
queue so that it's immediately processed again,

28
00:01:20.340 --> 00:01:22.500
but instead that it's put on a dead letter.

29
00:01:22.500 --> 00:01:23.740
Q.

30
00:01:23.740 --> 00:01:28.040
Let's start by making a small change in the demo application.

31
00:01:28.040 --> 00:01:32.250
The A M Q B inbound general adapter has an error handler attached to

32
00:01:32.250 --> 00:01:36.670
it that is used to handle exceptions that might occur when it sends

33
00:01:36.670 --> 00:01:39.840
messages into the spring integration flow.

34
00:01:39.840 --> 00:01:43.030
The default error handler will send a negative acknowledgement

35
00:01:43.030 --> 00:01:45.990
to rabid MQ for most types of exceptions,

36
00:01:45.990 --> 00:01:50.540
which will cause rapid mq to put the message back onto the Cube.

37
00:01:50.540 --> 00:01:54.560
Let's replace the default error handler with our own error handler

38
00:01:54.560 --> 00:01:58.040
so that we get more control over what happens.

39
00:01:58.040 --> 00:02:01.310
We can do that by adding an error handler attributes,

40
00:02:01.310 --> 00:02:06.440
which points to a spring bean that implements in their fish error handler.

41
00:02:06.440 --> 00:02:08.970
I've defined the glass registration error,

42
00:02:08.970 --> 00:02:12.140
a handler, which is our custom error handler.

43
00:02:12.140 --> 00:02:17.070
A simple thing we can do in the handle error method is wrap any exception

44
00:02:17.070 --> 00:02:22.140
in an AM kubectl reject and don't Rick you exception.

45
00:02:22.140 --> 00:02:26.130
This is a special exception that rabbit MQ message Listener will

46
00:02:26.130 --> 00:02:31.340
respond to by telling Rabbit MQ to drop and not Rick you the message

47
00:02:31.340 --> 00:02:35.370
when we now run the application without having greenmail running and

48
00:02:35.370 --> 00:02:37.520
we try to submit the registration.

49
00:02:37.520 --> 00:02:41.450
An exception will, of course, still be locked in the service application,

50
00:02:41.450 --> 00:02:44.140
but it will not start spinning.

51
00:02:44.140 --> 00:02:46.670
So we've solved the spinning problem.

52
00:02:46.670 --> 00:02:50.840
But now the message that caused the problem just disappears.

53
00:02:50.840 --> 00:02:53.420
Let's see how we can make rather than kubectl.

54
00:02:53.420 --> 00:02:55.340
Don't know that Letter cube.

55
00:02:55.340 --> 00:02:58.330
For this, we have to do some configuration in the rapid,

56
00:02:58.330 --> 00:03:00.250
um, que management application.

57
00:03:00.250 --> 00:03:07.640
So go to local oh sport 15 6 72 and log in with username guest and pastor guest.

58
00:03:07.640 --> 00:03:11.540
First, we'll have to create a dead letter exchange.

59
00:03:11.540 --> 00:03:16.210
Go to exchanges under, add a new exchange.

60
00:03:16.210 --> 00:03:25.440
Enter the name Globomantics dot the Alex Select type fan out Click Add exchange.

61
00:03:25.440 --> 00:03:30.140
Next, we'll created that letter Q, which will bind to this exchange?

62
00:03:30.140 --> 00:03:35.760
Go to cues under add a nuke, you enter the name Globomantics.

63
00:03:35.760 --> 00:03:40.040
Start the elk UI, click at Kew,

64
00:03:40.040 --> 00:03:44.050
then click on the name off the queue in the table under

65
00:03:44.050 --> 00:03:46.170
bindings and add a binding to this.

66
00:03:46.170 --> 00:03:46.990
Q.

67
00:03:46.990 --> 00:03:53.340
Enter the name of the exchange, which is Globomantics dot de l X and click bind.

68
00:03:53.340 --> 00:03:56.360
Finally, we'll recreate our registration request.

69
00:03:56.360 --> 00:03:56.780
Q.

70
00:03:56.780 --> 00:03:59.960
And make sure that the dead letter exchange is set to

71
00:03:59.960 --> 00:04:02.740
the exchange We've just created.

72
00:04:02.740 --> 00:04:04.940
Go back to cues.

73
00:04:04.940 --> 00:04:07.520
Delete the Globomantics Docker administration.

74
00:04:07.520 --> 00:04:09.140
Regressed Cube.

75
00:04:09.140 --> 00:04:12.780
Create a queue again under add new Q.

76
00:04:12.780 --> 00:04:17.000
Enter the name, then click on that letter exchange,

77
00:04:17.000 --> 00:04:21.440
which will add an argument for the value of the argument.

78
00:04:21.440 --> 00:04:26.740
Enter Globomantics or the Elects, which is the name off the dead letter exchange.

79
00:04:26.740 --> 00:04:29.040
Then click at Kew.

80
00:04:29.040 --> 00:04:31.010
Now let's run the application again.

81
00:04:31.010 --> 00:04:35.840
Still, without having greenmail running and under registration again.

82
00:04:35.840 --> 00:04:38.130
Now you will see that after a few seconds,

83
00:04:38.130 --> 00:04:39.960
the message appears on the Dead letter.

84
00:04:39.960 --> 00:04:41.140
Q.

85
00:04:41.140 --> 00:04:46.190
You can even get the message to inspect its content before we continue.

86
00:04:46.190 --> 00:04:49.280
Let's recap the most important learning points off this model.

87
00:04:49.280 --> 00:04:50.740
So far,

88
00:04:50.740 --> 00:04:53.410
all the message Chandler's in our integration flow are

89
00:04:53.410 --> 00:04:56.820
executed on the same threat because off the types off

90
00:04:56.820 --> 00:04:59.340
message generals that we've used,

91
00:04:59.340 --> 00:05:01.690
this has consequences for what happens with

92
00:05:01.690 --> 00:05:03.580
exceptions that are thrown by message.

93
00:05:03.580 --> 00:05:09.740
Hander's exceptions go back all the way to the rabbit MQ message listener.

94
00:05:09.740 --> 00:05:12.820
We have to be careful to configure the error handling on

95
00:05:12.820 --> 00:05:15.660
the message listener so that messages that cause problems

96
00:05:15.660 --> 00:05:18.040
are handled appropriately.

97
00:05:18.040 --> 00:05:21.840
We also have to think about transaction boundaries.

98
00:05:21.840 --> 00:05:24.210
Transactions in spring are threat local,

99
00:05:24.210 --> 00:05:27.980
which means that two pieces off coat that are running in different

100
00:05:27.980 --> 00:05:32.380
threats don't share transaction in this example.

101
00:05:32.380 --> 00:05:35.470
Because the whole flow runs on the same threat.

102
00:05:35.470 --> 00:05:40.140
We can set the transaction boundaries to include the entire flow.

103
00:05:40.140 --> 00:05:43.350
If we have non transactional systems in our flow,

104
00:05:43.350 --> 00:05:46.190
such as the meal server and the billing system,

105
00:05:46.190 --> 00:05:49.090
then using transactions is not going to prevent

106
00:05:49.090 --> 00:05:52.240
undesired behavior when errors occur.

107
00:05:52.240 --> 00:05:55.130
Sending an email or calling the building service will

108
00:05:55.130 --> 00:05:58.240
not be undone when an error occurs.

109
00:05:58.240 --> 00:06:00.190
In the second part of this module,

110
00:06:00.190 --> 00:06:02.650
we'll take a look at a different approach to handling

111
00:06:02.650 --> 00:06:04.550
errors in the integration flow,

112
00:06:04.550 --> 00:06:12.000
which will give us more fine grained control to handle errors that happen in specific message handlers

