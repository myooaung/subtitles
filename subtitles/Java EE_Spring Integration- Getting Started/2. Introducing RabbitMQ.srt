1
00:00:01,040 --> 00:00:04,640
[Autogenerated] so we're going to use Rapid MQ in this module.

2
00:00:04,640 --> 00:00:07,030
Let's take a moment to look at what exactly?

3
00:00:07,030 --> 00:00:10,470
Your message broker is what rabbit MQ is and how we can

4
00:00:10,470 --> 00:00:13,240
set it up for the demo application.

5
00:00:13,240 --> 00:00:15,710
In the demo application that we have so far.

6
00:00:15,710 --> 00:00:20,840
We have a web player on a service layer that both run in the same process.

7
00:00:20,840 --> 00:00:24,160
We have some what the couple them by having them use messaging

8
00:00:24,160 --> 00:00:27,240
with spring integration message channels.

9
00:00:27,240 --> 00:00:29,770
But what if we want to have separate processes,

10
00:00:29,770 --> 00:00:32,940
communicate with each other using messages?

11
00:00:32,940 --> 00:00:36,040
Then you'll want to use a message broker.

12
00:00:36,040 --> 00:00:40,250
The message broker is a piece of software that provides messaging capabilities,

13
00:00:40,250 --> 00:00:44,470
such as persistent message queues and ways to route messages from senders to

14
00:00:44,470 --> 00:00:48,510
receivers in the enterprise Integration Patterns book.

15
00:00:48,510 --> 00:00:51,890
Each of the patterns is introduced by stating a question

16
00:00:51,890 --> 00:00:55,140
that the pattern being described answers.

17
00:00:55,140 --> 00:00:59,340
The message Broker pattern is introduced with the following question.

18
00:00:59,340 --> 00:01:03,240
How can you decouple the destination off a message from the center and

19
00:01:03,240 --> 00:01:07,040
maintain central control over the flow of messages?

20
00:01:07,040 --> 00:01:09,960
From this question, you can see that it's about decoupling,

21
00:01:09,960 --> 00:01:11,250
senders and receivers,

22
00:01:11,250 --> 00:01:15,130
as I've already mentioned and also about being able to monitor

23
00:01:15,130 --> 00:01:18,340
and manage the flow of messages in the system.

24
00:01:18,340 --> 00:01:22,240
We will be using rabid and QSR message broker.

25
00:01:22,240 --> 00:01:25,060
It's open source and being developed by pivotal,

26
00:01:25,060 --> 00:01:29,030
the same company that takes care of the spring framework So rapid,

27
00:01:29,030 --> 00:01:31,350
um que is very well supported by spring,

28
00:01:31,350 --> 00:01:34,540
which makes it easy to use for a demo.

29
00:01:34,540 --> 00:01:37,520
Let's get rapid and running on our computer and take a

30
00:01:37,520 --> 00:01:40,340
quick look at its management in the face.

31
00:01:40,340 --> 00:01:45,110
You can, of course, download rapid mq and install it on your computer directly,

32
00:01:45,110 --> 00:01:47,940
but I'll be using Docker to run it.

33
00:01:47,940 --> 00:01:52,340
You will see that this makes it super easy to run rabbit MQ.

34
00:01:52,340 --> 00:01:54,920
If you've never used Docker before, don't worry.

35
00:01:54,920 --> 00:01:57,420
We're not going to do complicated things with it,

36
00:01:57,420 --> 00:01:59,800
and you don't need to understand it in detail.

37
00:01:59,800 --> 00:02:04,550
To follow this course, you don't even need to use Docker if you prefer.

38
00:02:04,550 --> 00:02:09,040
You can also just download and install rapid mq on your computer.

39
00:02:09,040 --> 00:02:12,600
However, I highly recommend that you learn the basics off Docker.

40
00:02:12,600 --> 00:02:15,940
Since it's so useful for software development,

41
00:02:15,940 --> 00:02:18,350
I use it every day when developing software,

42
00:02:18,350 --> 00:02:22,340
for example, to run database is in Docker containers.

43
00:02:22,340 --> 00:02:26,450
The software you run in a docker container runs in a kind of sandbox,

44
00:02:26,450 --> 00:02:30,590
so it doesn't pollute the rest of the system and it makes it very easy.

45
00:02:30,590 --> 00:02:31,730
For example,

46
00:02:31,730 --> 00:02:36,240
to create a new container with a fresh database whenever you need it,

47
00:02:36,240 --> 00:02:37,330
you can, of course,

48
00:02:37,330 --> 00:02:42,820
find a number of good courses on Docker at Pluralsight to run rabbit MQ In

49
00:02:42,820 --> 00:02:45,450
Docker you don't need to download or install rabbit.

50
00:02:45,450 --> 00:02:51,570
Mq you do of course, need to have Docker on your computer When you have Docker,

51
00:02:51,570 --> 00:02:55,330
it's just a single command to create and start a docker container

52
00:02:55,330 --> 00:02:59,430
running resident que When you do this for the first time,

53
00:02:59,430 --> 00:03:02,430
Docker will automatically download an image containing

54
00:03:02,430 --> 00:03:05,590
rabbit Mq When this command is done,

55
00:03:05,590 --> 00:03:10,640
you can see that the container is running by using the command Docker IOPS.

56
00:03:10,640 --> 00:03:12,600
Once the container is created,

57
00:03:12,600 --> 00:03:18,220
you can stop it using Docker stop rabbit MQ and restarted using Docker start

58
00:03:18,220 --> 00:03:24,640
rebel MQ you can delete to container using Docker RM rabid mq.

59
00:03:24,640 --> 00:03:28,590
When you delete a container, all the data that's in it is also lost.

60
00:03:28,590 --> 00:03:32,090
So if you had message queues and messages in your reverent you,

61
00:03:32,090 --> 00:03:33,030
they will be gone.

62
00:03:33,030 --> 00:03:35,240
When you delete a container,

63
00:03:35,240 --> 00:03:39,530
let's recreate and start my rabbit MQ Docker container again and

64
00:03:39,530 --> 00:03:42,640
then take a look at the management in the face.

65
00:03:42,640 --> 00:03:43,610
When it's running,

66
00:03:43,610 --> 00:03:46,450
you can get to the management interface by pointing your

67
00:03:46,450 --> 00:03:50,640
browser at local host Port 15 6 72.

68
00:03:50,640 --> 00:03:55,340
Use username, guest and password guest to log in.

69
00:03:55,340 --> 00:03:59,240
I'm not going to say too much about the management in the face.

70
00:03:59,240 --> 00:04:02,820
The most interesting part for our demo is to Q steps,

71
00:04:02,820 --> 00:04:08,140
so let's click that here you can see an overview of the message queues.

72
00:04:08,140 --> 00:04:11,440
Currently, there are no queues for our demo.

73
00:04:11,440 --> 00:04:15,800
We need to define one cube in the Add a new Q section.

74
00:04:15,800 --> 00:04:21,340
Let's enter the name of our Q Globomantics DOM registration request.

75
00:04:21,340 --> 00:04:23,400
We want this cute to be durable,

76
00:04:23,400 --> 00:04:26,110
which means that they will persist messages on disk

77
00:04:26,110 --> 00:04:28,640
and not just keep them in memory.

78
00:04:28,640 --> 00:04:33,740
We don't need to set any of the other options, so let's click at Kew.

79
00:04:33,740 --> 00:04:37,820
There's a new Q so now we have rapid mq running,

80
00:04:37,820 --> 00:04:41,940
and we've defined the queue that we need for our demo application.

81
00:04:41,940 --> 00:04:45,560
As I explained, when you stop and restart the Docker container,

82
00:04:45,560 --> 00:04:47,240
the Q will still be there.

83
00:04:47,240 --> 00:04:50,750
But if you delete the Docker container and recreated later,

84
00:04:50,750 --> 00:04:54,890
you'll also have to create a queue again with Reverend Q.

85
00:04:54,890 --> 00:04:55,280
Ready?

86
00:04:55,280 --> 00:05:02,000
Let's now take a look at how we can split the demo application into a separate front end and back end.

