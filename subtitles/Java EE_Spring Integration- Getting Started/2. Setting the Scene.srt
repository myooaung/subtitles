1
00:00:01,040 --> 00:00:02,590
[Autogenerated] all right to get started,

2
00:00:02,590 --> 00:00:05,640
you first needs and background information.

3
00:00:05,640 --> 00:00:08,820
We will set the scene by taking a closer look at what

4
00:00:08,820 --> 00:00:12,550
integration means in this context and by introducing you to

5
00:00:12,550 --> 00:00:15,240
the enterprise integration patterns.

6
00:00:15,240 --> 00:00:19,640
The enterprise integration patterns focus on a synchronous messaging,

7
00:00:19,640 --> 00:00:24,440
so we will also take a look at what exactly that is and why it's useful.

8
00:00:24,440 --> 00:00:27,400
Then I'll give you a first look at spring integration,

9
00:00:27,400 --> 00:00:31,940
and I'll explain what enterprise integration patterns have to do with it.

10
00:00:31,940 --> 00:00:35,050
Many companies have many different software systems and

11
00:00:35,050 --> 00:00:37,740
applications to run their business.

12
00:00:37,740 --> 00:00:41,650
The systems often have to be connected to work with each other on

13
00:00:41,650 --> 00:00:45,140
also to systems outside of the company itself.

14
00:00:45,140 --> 00:00:50,140
Connecting these different systems is what we mean by integration.

15
00:00:50,140 --> 00:00:52,550
Integrating systems is not always easy,

16
00:00:52,550 --> 00:00:54,930
because the systems may have vastly different

17
00:00:54,930 --> 00:00:58,540
interfaces and use different data formats.

18
00:00:58,540 --> 00:01:01,110
Some of the ways in which systems can be connected

19
00:01:01,110 --> 00:01:04,450
together include web services, messaging systems,

20
00:01:04,450 --> 00:01:06,010
exchanging files, fire,

21
00:01:06,010 --> 00:01:10,310
FTP share database is email and even custom

22
00:01:10,310 --> 00:01:13,440
application level networking protocols.

23
00:01:13,440 --> 00:01:17,880
Integration is about connecting systems using these mechanisms and also

24
00:01:17,880 --> 00:01:21,540
about translating data between different formats.

25
00:01:21,540 --> 00:01:26,340
As a software developer, you have undoubtedly heard off design patterns.

26
00:01:26,340 --> 00:01:29,890
Design patterns are general reusable solutions to

27
00:01:29,890 --> 00:01:32,690
common software design problems.

28
00:01:32,690 --> 00:01:34,470
In 2000 and three,

29
00:01:34,470 --> 00:01:37,610
Gregor Hope on Bobby Wolf published a book with the

30
00:01:37,610 --> 00:01:40,330
title Enterprise Integration Patterns,

31
00:01:40,330 --> 00:01:44,410
which describes 65 design patterns that specifically

32
00:01:44,410 --> 00:01:47,240
have to do with integration problems.

33
00:01:47,240 --> 00:01:50,390
Although 2000 and three years long ago in the fast

34
00:01:50,390 --> 00:01:52,490
changing world of software development,

35
00:01:52,490 --> 00:01:55,650
most off the book is still very much relevant in today's

36
00:01:55,650 --> 00:01:59,070
world of micro services and cloud computing that didn't

37
00:01:59,070 --> 00:02:01,540
exist yet when the book was written.

38
00:02:01,540 --> 00:02:05,430
Since spring integration is based on the enterprise integration patterns,

39
00:02:05,430 --> 00:02:08,070
We will look into the main concepts off enterprise

40
00:02:08,070 --> 00:02:10,640
integration patterns in this course.

41
00:02:10,640 --> 00:02:13,750
If you want to know more about enterprise integration patterns,

42
00:02:13,750 --> 00:02:17,790
then you can find detailed information about the book and the patterns on the

43
00:02:17,790 --> 00:02:23,740
books website www dot enterprise integration patterns dot com.

44
00:02:23,740 --> 00:02:26,540
You can, of course, also by the book.

45
00:02:26,540 --> 00:02:30,290
The book focuses on using a synchronous messaging as a

46
00:02:30,290 --> 00:02:33,340
solution for integrating systems.

47
00:02:33,340 --> 00:02:36,180
Let's take a quick look at what that is and how it

48
00:02:36,180 --> 00:02:39,340
differs from other ways to connect systems.

49
00:02:39,340 --> 00:02:42,690
One very common way to let software components communicate

50
00:02:42,690 --> 00:02:46,140
with each other is through web services,

51
00:02:46,140 --> 00:02:49,820
especially RESTful web services over HTTP.

52
00:02:49,820 --> 00:02:50,760
With JSON.

53
00:02:50,760 --> 00:02:54,540
As the common data format are frequently used,

54
00:02:54,540 --> 00:02:58,040
web services work in a synchronous way.

55
00:02:58,040 --> 00:03:02,040
The client sends a request to the server and then waits until the

56
00:03:02,040 --> 00:03:05,840
server has processed it and sends back a response.

57
00:03:05,840 --> 00:03:10,440
However, communication does not always need to be synchronous.

58
00:03:10,440 --> 00:03:12,500
In many cases, it can be Asian.

59
00:03:12,500 --> 00:03:17,050
Chrome is instead, when using an asynchronous messaging system,

60
00:03:17,050 --> 00:03:21,150
the center sends a message and immediately continues processing,

61
00:03:21,150 --> 00:03:23,540
not waiting for a response.

62
00:03:23,540 --> 00:03:26,800
The messaging system will make sure that the message is delivered

63
00:03:26,800 --> 00:03:30,340
to the receiver at some point in the future.

64
00:03:30,340 --> 00:03:31,930
If the response is needed,

65
00:03:31,930 --> 00:03:36,540
a message might be sent back to the original center in the same way.

66
00:03:36,540 --> 00:03:39,640
It's the same as a difference between talking to someone on the

67
00:03:39,640 --> 00:03:42,940
phone and sending someone a text message.

68
00:03:42,940 --> 00:03:47,530
Talking on the phone is synchronous you say something and then wait

69
00:03:47,530 --> 00:03:50,740
for the other person to respond to what you said.

70
00:03:50,740 --> 00:03:54,140
Sending a text messages asynchronous.

71
00:03:54,140 --> 00:03:57,840
You send the message and continue doing other things.

72
00:03:57,840 --> 00:04:02,040
At some point in the future, the other person will read your message,

73
00:04:02,040 --> 00:04:05,190
a synchronous messaging as a number of advantages over

74
00:04:05,190 --> 00:04:08,440
synchronous request response processing.

75
00:04:08,440 --> 00:04:09,410
For example,

76
00:04:09,410 --> 00:04:11,980
the center of a message doesn't have to wait until

77
00:04:11,980 --> 00:04:17,040
receiver sends back a response, which makes systems more responsive.

78
00:04:17,040 --> 00:04:18,520
Messages can be buffered.

79
00:04:18,520 --> 00:04:20,640
For example, in a cube.

80
00:04:20,640 --> 00:04:25,110
This makes it possible for the system to continue working if the receiver is

81
00:04:25,110 --> 00:04:29,750
temporarily unavailable when the receiver is back up again,

82
00:04:29,750 --> 00:04:34,240
it continues to process messages that are waiting for it in the Cube.

83
00:04:34,240 --> 00:04:39,840
This makes systems able to DLL with temporary failures without losing data.

84
00:04:39,840 --> 00:04:39,970
A.

85
00:04:39,970 --> 00:04:43,860
QUE also helps to prevent the receiver being overwhelmed with

86
00:04:43,860 --> 00:04:47,510
requests because the receiver can get messages from the Q and

87
00:04:47,510 --> 00:04:51,570
process them at a rate that is independent off how fast the center

88
00:04:51,570 --> 00:04:54,240
is putting messages onto the cube.

89
00:04:54,240 --> 00:04:59,520
Imagine an online shop, for example, when a customer places an order,

90
00:04:59,520 --> 00:05:02,880
the website needs to inform the warehouse that these ordered

91
00:05:02,880 --> 00:05:05,840
items need to be shipped to the customer.

92
00:05:05,840 --> 00:05:09,460
Suppose that the communication between the website and the warehouse

93
00:05:09,460 --> 00:05:13,140
would happen via a synchronous web service call.

94
00:05:13,140 --> 00:05:17,560
If there is a problem so that the warehouse is temporarily unavailable,

95
00:05:17,560 --> 00:05:23,240
then the customer wouldn't be able to place the order that would be annoying.

96
00:05:23,240 --> 00:05:26,720
It would work better if the communication between the website and the

97
00:05:26,720 --> 00:05:30,740
warehouse woodwork fire a synchronous messaging.

98
00:05:30,740 --> 00:05:35,440
The website sends a message to the warehouse using a messaging system and

99
00:05:35,440 --> 00:05:39,740
immediately informs the customer that their order has been placed.

100
00:05:39,740 --> 00:05:42,840
The messaging system might temporarily store the message

101
00:05:42,840 --> 00:05:46,070
in a Q and deliver it to the warehouse whenever the

102
00:05:46,070 --> 00:05:48,940
warehouses available to process it.

103
00:05:48,940 --> 00:05:51,380
So what exactly is spring integration?

104
00:05:51,380 --> 00:05:53,770
And what does it have to do with enterprise integration

105
00:05:53,770 --> 00:05:56,740
patterns and a synchronous messaging?

106
00:05:56,740 --> 00:06:00,130
Spring Integration is an implementation off the enterprise

107
00:06:00,130 --> 00:06:03,160
integration patterns based on the spring framework,

108
00:06:03,160 --> 00:06:06,020
which enables you to use these enterprise integration

109
00:06:06,020 --> 00:06:09,740
patterns in your own spring based applications.

110
00:06:09,740 --> 00:06:13,060
Since it's part of the spring framework family of projects,

111
00:06:13,060 --> 00:06:16,130
the way you use it in your applications will be familiar.

112
00:06:16,130 --> 00:06:20,020
If you know the spring framework, you will use spring beans,

113
00:06:20,020 --> 00:06:20,660
dependency,

114
00:06:20,660 --> 00:06:24,090
injection aspect oriented programming and other features off the

115
00:06:24,090 --> 00:06:27,100
spring framework to make your application modular,

116
00:06:27,100 --> 00:06:29,540
maintainable and testable,

117
00:06:29,540 --> 00:06:32,970
it will make it easy to connect your business larger components with each

118
00:06:32,970 --> 00:06:37,260
other and with external systems through a synchronous messaging without

119
00:06:37,260 --> 00:06:39,940
the need to write a lot of plumbing code.

120
00:06:39,940 --> 00:06:43,690
Before we dive into the details off working with spring integration,

121
00:06:43,690 --> 00:06:50,000
we will take a closer look at the main concepts and terminology off enterprise integration patterns.

