WEBVTT
1
00:00:01.040 --> 00:00:01.590
[Autogenerated] earlier.

2
00:00:01.590 --> 00:00:02.300
In the course,

3
00:00:02.300 --> 00:00:04.960
you've learned about the different types off message general

4
00:00:04.960 --> 00:00:08.540
implementations that spring integration provides.

5
00:00:08.540 --> 00:00:10.970
Remember that we had subscribe double message

6
00:00:10.970 --> 00:00:13.080
channels and possible message channels,

7
00:00:13.080 --> 00:00:15.720
which could further be divided into point to point

8
00:00:15.720 --> 00:00:18.540
channels and published subscribe channels.

9
00:00:18.540 --> 00:00:21.960
There are three subscribe Double message General implementations,

10
00:00:21.960 --> 00:00:27.040
which are direct channel executed channel and published subscribed channel.

11
00:00:27.040 --> 00:00:29.950
The first two of these are point to point channels,

12
00:00:29.950 --> 00:00:33.740
which means that each message sent to such a channel is

13
00:00:33.740 --> 00:00:36.840
received by exactly one receiver.

14
00:00:36.840 --> 00:00:39.950
A point to point Channel can have multiple receivers,

15
00:00:39.950 --> 00:00:44.440
but each message is delivered to only one of the receivers.

16
00:00:44.440 --> 00:00:47.080
A published subscribed channel, on the other hand,

17
00:00:47.080 --> 00:00:52.040
broadcasts messages that are sent to it to all of its receivers.

18
00:00:52.040 --> 00:00:55.400
So when a message is sent to published subscribed channel,

19
00:00:55.400 --> 00:00:58.090
a copy of the message is delivered to each off the

20
00:00:58.090 --> 00:01:00.840
subscribed receivers off the channel.

21
00:01:00.840 --> 00:01:04.550
The most common use case for published subscribe channels is

22
00:01:04.550 --> 00:01:08.240
to broadcast event notification messages.

23
00:01:08.240 --> 00:01:12.740
That's also how we are going to use it in our demo application.

24
00:01:12.740 --> 00:01:13.360
Currently,

25
00:01:13.360 --> 00:01:16.120
the only thing the registration service does is

26
00:01:16.120 --> 00:01:19.140
story registration in the database,

27
00:01:19.140 --> 00:01:22.580
what we're going to do is have the registration service return,

28
00:01:22.580 --> 00:01:26.040
an object that represents a registration event.

29
00:01:26.040 --> 00:01:29.370
It will be sent to a published subscribed channel so that other

30
00:01:29.370 --> 00:01:33.540
components can take action whenever a registration is made.

31
00:01:33.540 --> 00:01:33.980
Another,

32
00:01:33.980 --> 00:01:36.770
more subtle difference between point to point channels and

33
00:01:36.770 --> 00:01:39.430
published subscribe channels is in the degree off de

34
00:01:39.430 --> 00:01:42.240
coupling off senders and receivers.

35
00:01:42.240 --> 00:01:45.030
A point to Point Channel already provides a way to

36
00:01:45.030 --> 00:01:48.040
decouple the center from the receiver.

37
00:01:48.040 --> 00:01:50.740
The center doesn't need to know who the receiver is.

38
00:01:50.740 --> 00:01:55.440
That's going to process the message that it sends to its point to point channel.

39
00:01:55.440 --> 00:01:56.070
However,

40
00:01:56.070 --> 00:01:58.590
when you're designing a messaging application and

41
00:01:58.590 --> 00:02:02.570
you're using a point to point channel, you likely already have in mind.

42
00:02:02.570 --> 00:02:06.230
What receiver will be processing the messages and you'll design the

43
00:02:06.230 --> 00:02:10.140
payload of the messages specifically for that receiver.

44
00:02:10.140 --> 00:02:13.450
A published subscribed channel provides an even higher degree

45
00:02:13.450 --> 00:02:16.740
of decoupling between sender and receivers.

46
00:02:16.740 --> 00:02:19.040
When you use a published subscribed channel,

47
00:02:19.040 --> 00:02:22.730
multiple different receivers will probably receive the message,

48
00:02:22.730 --> 00:02:27.240
so you'll tend to design the message payload in a more generic way.

49
00:02:27.240 --> 00:02:30.810
This high degree of the coupling makes it easy to extend the

50
00:02:30.810 --> 00:02:34.390
system later with new types of receivers to handle the messages

51
00:02:34.390 --> 00:02:36.640
on the publish subscribed channel.

52
00:02:36.640 --> 00:02:37.570
Most likely,

53
00:02:37.570 --> 00:02:40.580
the only thing you'll need to do is write code for the new

54
00:02:40.580 --> 00:02:43.260
receiver and subscribe to the channel,

55
00:02:43.260 --> 00:02:46.260
And you won't need to change the center or the content of the

56
00:02:46.260 --> 00:02:50.560
messages when deciding whether to use a point to point channel

57
00:02:50.560 --> 00:02:52.470
or publish subscribed channel.

58
00:02:52.470 --> 00:02:57.670
The question it comes down to is, should only one receiver process the message,

59
00:02:57.670 --> 00:02:58.750
or does it make sense?

60
00:02:58.750 --> 00:03:02.040
If multiple receivers may process the message,

61
00:03:02.040 --> 00:03:05.400
the answer often depends on what role the message place in the

62
00:03:05.400 --> 00:03:09.840
application messages can have different roles.

63
00:03:09.840 --> 00:03:12.940
For example, a message may play the role over command,

64
00:03:12.940 --> 00:03:18.040
where the center sends the message to tell the receiver to executes some action.

65
00:03:18.040 --> 00:03:21.240
A message can also represent a piece of data,

66
00:03:21.240 --> 00:03:25.140
which is, for example, sent as a reply to a query.

67
00:03:25.140 --> 00:03:29.340
A third type of message represents an event to notify receivers

68
00:03:29.340 --> 00:03:32.040
that an event has happened in the system.

69
00:03:32.040 --> 00:03:36.180
These three roles correspond to three enterprise integration patterns,

70
00:03:36.180 --> 00:03:41.540
which are the command message, document message and event message patterns.

71
00:03:41.540 --> 00:03:44.290
When deciding what kind of channel to use,

72
00:03:44.290 --> 00:03:47.340
you will find that if your message represents an event.

73
00:03:47.340 --> 00:03:51.840
A published subscribed channel is the best choice most of the time.

74
00:03:51.840 --> 00:03:52.750
On the other hand,

75
00:03:52.750 --> 00:03:57.340
if a message represents a piece of data or a command that must be executed,

76
00:03:57.340 --> 00:04:00.540
a point to point journal is often more suited.

77
00:04:00.540 --> 00:04:04.210
There is, however, no exact recipe to make the decision,

78
00:04:04.210 --> 00:04:07.840
and ultimately it comes down to a design choice.

79
00:04:07.840 --> 00:04:11.140
It's time to bring the theory into practice.

80
00:04:11.140 --> 00:04:17.000
Let's see how we can implement published subscribe messaging in the Globomantics application.

