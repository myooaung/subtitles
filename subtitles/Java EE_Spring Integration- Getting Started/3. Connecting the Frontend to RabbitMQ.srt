1
00:00:01,040 --> 00:00:03,300
[Autogenerated] We will split our demo application into

2
00:00:03,300 --> 00:00:05,850
two separate spring boot applications.

3
00:00:05,850 --> 00:00:08,870
The front end, which contains the web player on the back end,

4
00:00:08,870 --> 00:00:12,140
which contains the servers and database layers.

5
00:00:12,140 --> 00:00:15,270
We will connect both applications to Rebel mq so

6
00:00:15,270 --> 00:00:17,840
that they can exchange messages.

7
00:00:17,840 --> 00:00:21,140
Let's take a look at the next example Project.

8
00:00:21,140 --> 00:00:25,860
The Example Project is now a multi module maven project with three modules,

9
00:00:25,860 --> 00:00:28,240
Model service and web.

10
00:00:28,240 --> 00:00:32,260
The model module only contains class at any registration,

11
00:00:32,260 --> 00:00:35,050
which is the data transfer object that's used in both

12
00:00:35,050 --> 00:00:37,540
the web player and the service layer.

13
00:00:37,540 --> 00:00:40,840
It's in a separate module that both the service and web

14
00:00:40,840 --> 00:00:44,340
modules depend on so that we can use it in both the front

15
00:00:44,340 --> 00:00:46,740
and and the back end applications.

16
00:00:46,740 --> 00:00:50,440
The service module contains the back and application.

17
00:00:50,440 --> 00:00:54,620
It's now a separate spring good application that contains only the service

18
00:00:54,620 --> 00:00:59,040
layer with class registration service and the database layer.

19
00:00:59,040 --> 00:01:01,830
The web module contains two from the application,

20
00:01:01,830 --> 00:01:06,040
which is just a web player with class registration controller.

21
00:01:06,040 --> 00:01:09,340
What our goal is now is to have the front and applications send

22
00:01:09,340 --> 00:01:13,190
messages to the rabid em que que that we defined and after back and

23
00:01:13,190 --> 00:01:16,540
application receive and process the messages.

24
00:01:16,540 --> 00:01:21,840
Let's first see how we can get the front and to send its messages to rabid MQ.

25
00:01:21,840 --> 00:01:22,590
First of all,

26
00:01:22,590 --> 00:01:27,440
let's take a quick look at the Maven POM file for the front and application.

27
00:01:27,440 --> 00:01:28,860
I've added a dependency.

28
00:01:28,860 --> 00:01:30,770
They're on spring integration.

29
00:01:30,770 --> 00:01:37,950
Am Q B am kubectl and for advanced message queueing Protocol is a standard

30
00:01:37,950 --> 00:01:41,330
protocol that applications used to work with message brokers,

31
00:01:41,330 --> 00:01:43,640
including Robin M Que.

32
00:01:43,640 --> 00:01:47,990
By including this dependency, Spring Boot will automatically configure a number.

33
00:01:47,990 --> 00:01:51,740
Offspring means that we need to connect to Rabid MQ.

34
00:01:51,740 --> 00:01:55,580
Next, let's take a look at Class Globomantics web application,

35
00:01:55,580 --> 00:01:58,610
which is the spring boot application class for the front and

36
00:01:58,610 --> 00:02:03,440
application for this demo we're using XML configuration.

37
00:02:03,440 --> 00:02:06,650
So I've added an import resource annotation here to

38
00:02:06,650 --> 00:02:09,840
include the XML configuration file.

39
00:02:09,840 --> 00:02:12,910
Let's see what we need to configure their to get the front

40
00:02:12,910 --> 00:02:15,940
and to send its messages to rabid MQ.

41
00:02:15,940 --> 00:02:19,940
We'll need to define a few spring integration components here.

42
00:02:19,940 --> 00:02:23,240
First, the registration requests General.

43
00:02:23,240 --> 00:02:26,450
That's the channel that the controller will send a message to when you

44
00:02:26,450 --> 00:02:30,560
submit the registration form on the web-page of the application just

45
00:02:30,560 --> 00:02:33,540
like we had in earlier versions off the demo.

46
00:02:33,540 --> 00:02:37,000
Remember that the message is that the controller sense having at

47
00:02:37,000 --> 00:02:40,890
and registration object as the payload and the daytime header

48
00:02:40,890 --> 00:02:45,030
containing the date and time the registration was submitted in the

49
00:02:45,030 --> 00:02:46,770
previous version off the demo,

50
00:02:46,770 --> 00:02:50,930
such a message was delivered to the service layer by a service activator

51
00:02:50,930 --> 00:02:54,680
that listened on the channel and that got the payload and header from the

52
00:02:54,680 --> 00:02:58,240
message and passed it to the registration services.

53
00:02:58,240 --> 00:03:02,740
In this new version, we want to send this message to rabid MQ.

54
00:03:02,740 --> 00:03:07,840
To be able to do this, we need to convert the payload to a suitable format.

55
00:03:07,840 --> 00:03:11,940
There are, of course, many formats that you can choose to use.

56
00:03:11,940 --> 00:03:17,340
You could, for example, use Jaffa serialization, but this has drawbacks.

57
00:03:17,340 --> 00:03:20,830
A serialized Jaffa object is a binary blog off data,

58
00:03:20,830 --> 00:03:23,120
which is not easily human readable.

59
00:03:23,120 --> 00:03:27,400
And another problem with JavaScript serialization is that it's tightly

60
00:03:27,400 --> 00:03:31,140
coupled with a specific version off a Java class.

61
00:03:31,140 --> 00:03:33,080
If you make changes to the class,

62
00:03:33,080 --> 00:03:37,180
then you might get an incompatible class change error when you try to read

63
00:03:37,180 --> 00:03:40,840
an object that was serialized with an older version.

64
00:03:40,840 --> 00:03:44,940
So it's better to use a human readable standard format.

65
00:03:44,940 --> 00:03:47,340
Let's use JSON here.

66
00:03:47,340 --> 00:03:50,430
Well, define an object to JSON Transformer,

67
00:03:50,430 --> 00:03:54,640
which bring integration conveniently has available for us.

68
00:03:54,640 --> 00:03:58,450
It will receive messages from the Registration Request channel,

69
00:03:58,450 --> 00:04:03,210
convert a payload to JSON and center converted messages to a new channel,

70
00:04:03,210 --> 00:04:06,040
which we'll call to Rabbit.

71
00:04:06,040 --> 00:04:09,510
To get the messages that are sent to this channel to Rabbit, MQ.

72
00:04:09,510 --> 00:04:13,320
We're going to use an outbound channel adapter.

73
00:04:13,320 --> 00:04:17,840
The channel adaptor pattern is another enterprise integration pattern.

74
00:04:17,840 --> 00:04:21,490
Channel adapters are the glue between spring integration message

75
00:04:21,490 --> 00:04:23,870
channels and other components and systems,

76
00:04:23,870 --> 00:04:27,740
and are very important part of spring integration.

77
00:04:27,740 --> 00:04:31,210
One of the main features offspring integration is that it comes with

78
00:04:31,210 --> 00:04:33,810
many different channel adaptor implementations,

79
00:04:33,810 --> 00:04:36,340
which allow you to connect to many different types

80
00:04:36,340 --> 00:04:39,060
of systems to connect to Rabbit.

81
00:04:39,060 --> 00:04:39,510
MQ.

82
00:04:39,510 --> 00:04:44,040
We're going to using a M Q P outbound channel adapter,

83
00:04:44,040 --> 00:04:48,530
spring integration am kubectl its own XML name space to

84
00:04:48,530 --> 00:04:52,060
define am kubectl components so well.

85
00:04:52,060 --> 00:04:56,240
First at that name space to the header off the XML file.

86
00:04:56,240 --> 00:04:59,640
Then we can define the outbound channel adapter.

87
00:04:59,640 --> 00:05:03,440
We will have to set a few attributes on the channel adapter

88
00:05:03,440 --> 00:05:06,420
first the channel that it should receive messages from

89
00:05:06,420 --> 00:05:08,840
which is the two Rabbit channel.

90
00:05:08,840 --> 00:05:11,950
Next, we have to shut the AM code ping template.

91
00:05:11,950 --> 00:05:15,190
Attribute the AM CUPE template.

92
00:05:15,190 --> 00:05:19,740
Bean is a spring bean that used to connect to the message broker.

93
00:05:19,740 --> 00:05:24,050
It's similar to a spring J D B C template or rest template that you

94
00:05:24,050 --> 00:05:28,770
used to connect to a database or arrest web services because we have

95
00:05:28,770 --> 00:05:30,810
a dependency on spring integration.

96
00:05:30,810 --> 00:05:35,500
Am code ping This project spring boot automatically creates a spring bean

97
00:05:35,500 --> 00:05:40,770
named rabbit template to connect to rabbit MQ that we can use here in the

98
00:05:40,770 --> 00:05:43,100
spring Boot Application Properties file.

99
00:05:43,100 --> 00:05:46,140
There are a number of properties that you can set to configure

100
00:05:46,140 --> 00:05:49,780
the connection to rapid mq these settings error used by

101
00:05:49,780 --> 00:05:53,040
Springwood to configure the rabbit template.

102
00:05:53,040 --> 00:05:55,740
They are configured here to point to rabbit mq

103
00:05:55,740 --> 00:05:58,240
that's running on the local machine.

104
00:05:58,240 --> 00:06:00,900
The last attributes we have to set on the outbound

105
00:06:00,900 --> 00:06:03,740
channel adaptor is the routing key.

106
00:06:03,740 --> 00:06:07,940
This tells rather than queue, which Q the message should go to.

107
00:06:07,940 --> 00:06:08,780
In this case,

108
00:06:08,780 --> 00:06:12,370
it's just the name off the queue we created in rabid MQ named

109
00:06:12,370 --> 00:06:15,840
Globomantics Docker registration request.

110
00:06:15,840 --> 00:06:19,440
That's it Let's see it in action.

111
00:06:19,440 --> 00:06:24,440
Let's start the front and by running class Globomantics web application,

112
00:06:24,440 --> 00:06:27,460
we can now navigate to the registration page again.

113
00:06:27,460 --> 00:06:30,940
Fill in the form and click to register bottom.

114
00:06:30,940 --> 00:06:33,550
Now let's take a look at the rabbit and queue management in

115
00:06:33,550 --> 00:06:36,540
the face again and click on the Cube.

116
00:06:36,540 --> 00:06:38,760
You can see that there is now a message on the Q,

117
00:06:38,760 --> 00:06:42,040
and you can also look at the content of the message.

118
00:06:42,040 --> 00:06:47,340
As you can see, it contains an at and registration message in JSON format.

119
00:06:47,340 --> 00:06:50,540
Notice that we have now really decoupled the front end and

120
00:06:50,540 --> 00:06:53,140
the back end of the demo application.

121
00:06:53,140 --> 00:06:55,680
We don't even need to have the back and running to be

122
00:06:55,680 --> 00:06:58,640
able to use the front and application.

123
00:06:58,640 --> 00:07:02,940
As long as there is nothing receiving messages from the Q and rabid MQ.

124
00:07:02,940 --> 00:07:05,640
The messages will just stay there.

125
00:07:05,640 --> 00:07:10,140
This shows you one of the big advantages off a synchronous messaging.

126
00:07:10,140 --> 00:07:14,240
You can take down the back and service, and it's still possible to register,

127
00:07:14,240 --> 00:07:17,000
and the registrations will wait in the queue until the

128
00:07:17,000 --> 00:07:19,840
back and is available to process them.

129
00:07:19,840 --> 00:07:26,000
Next is, of course, changing the back and so that it can receive messages from rebel Um que

