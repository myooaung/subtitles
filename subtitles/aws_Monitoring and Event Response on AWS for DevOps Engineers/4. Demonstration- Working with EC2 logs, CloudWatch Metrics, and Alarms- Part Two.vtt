WEBVTT
1
00:00:02.040 --> 00:00:05.740
So we created one alarm from a metric; let's create another.

2
00:00:05.740 --> 00:00:09.040
This time, let's select Create alarm.

3
00:00:09.040 --> 00:00:10.510
In the previous example,

4
00:00:10.510 --> 00:00:12.690
the metric was already selected for us because we

5
00:00:12.690 --> 00:00:14.290
started off through the metric section.

6
00:00:14.290 --> 00:00:18.130
Here we have to say Select metric.

7
00:00:18.130 --> 00:00:20.640
And if I give myself a bit more real estate here,

8
00:00:20.640 --> 00:00:24.510
we can see the same 2000 plus metrics, the custom namespaces,

9
00:00:24.510 --> 00:00:26.710
and the AWS namespaces.

10
00:00:26.710 --> 00:00:30.540
I'm going to choose the EC2 namespace again.

11
00:00:30.540 --> 00:00:32.160
But instead of per‑instance metrics,

12
00:00:32.160 --> 00:00:35.540
this time I'm going to select by auto scaling group.

13
00:00:35.540 --> 00:00:39.920
And in search, I'm going to look for the Globomantics auto scaling group.

14
00:00:39.920 --> 00:00:43.140
So now we're just looking at metrics for the Globomantics auto scaling group,

15
00:00:43.140 --> 00:00:46.640
and again, I'm going to look for CPU utilization.

16
00:00:46.640 --> 00:00:48.160
I'm going to select that.

17
00:00:48.160 --> 00:00:52.620
Here we're seeing the CPU utilization across all members of this auto scaling

18
00:00:52.620 --> 00:00:56.010
group as opposed to per‑instance metrics that we saw before.

19
00:00:56.010 --> 00:00:59.510
If I select this metric, and again,

20
00:00:59.510 --> 00:01:03.830
we'll want a condition, so if CPU is greater than 80%,

21
00:01:03.830 --> 00:01:05.580
I want that to generate an alarm.

22
00:01:05.580 --> 00:01:08.900
If I say Next, this time I want two actions.

23
00:01:08.900 --> 00:01:11.570
The first is to send a message to an SNS topic,

24
00:01:11.570 --> 00:01:13.170
so let's select our topic,

25
00:01:13.170 --> 00:01:16.330
but I also want this alarm to trigger an auto scale event.

26
00:01:16.330 --> 00:01:19.480
So if I scroll down a little bit and from auto scale

27
00:01:19.480 --> 00:01:23.750
select Add Auto Scaling Action, we can then select an auto scale group,

28
00:01:23.750 --> 00:01:27.030
and the scaling policy on that group that I want to be

29
00:01:27.030 --> 00:01:30.440
triggered when CPU goes above 80%.

30
00:01:30.440 --> 00:01:34.540
This auto scaling group and its scaling policy have been pre‑configured.

31
00:01:34.540 --> 00:01:37.840
So we say Next, add a name and optional description,

32
00:01:37.840 --> 00:01:41.330
say Next one more time, and again, if we're happy with our settings,

33
00:01:41.330 --> 00:01:45.140
we scroll down and choose Create alarm.

34
00:01:45.140 --> 00:01:49.440
Just like our first alarm, this shows insufficient data,

35
00:01:49.440 --> 00:01:52.180
but should transition to OK after a couple minutes.

36
00:01:52.180 --> 00:01:55.540
And here we can see it transitioned to the OK state.

37
00:01:55.540 --> 00:01:57.940
When this alarm goes to the alarm state,

38
00:01:57.940 --> 00:02:00.240
it will trigger the auto scale policy,

39
00:02:00.240 --> 00:02:03.180
which in turn will bring on additional instances because our

40
00:02:03.180 --> 00:02:05.940
auto scale group is under such heavy load.

41
00:02:05.940 --> 00:02:09.540
So we've seen some metrics and we've seen some alarms,

42
00:02:09.540 --> 00:02:12.490
but what about integrating our EC2 operatin system

43
00:02:12.490 --> 00:02:15.100
information and custom logs into CloudWatch?

44
00:02:15.100 --> 00:02:17.740
Well, let's take a look at that.

45
00:02:17.740 --> 00:02:20.730
So here I've RDP'd into web server 4. I've already

46
00:02:20.730 --> 00:02:23.350
downloaded and installed the CloudWatch agent.

47
00:02:23.350 --> 00:02:24.710
I now need to configure it.

48
00:02:24.710 --> 00:02:27.810
If I take a look at this directory, we can see the Amazon

49
00:02:27.810 --> 00:02:30.740
CloudWatch agent configuration wizard.

50
00:02:30.740 --> 00:02:33.440
So let's run that.

51
00:02:33.440 --> 00:02:36.110
So the Agent Configuration Wizard is going to ask us a series of

52
00:02:36.110 --> 00:02:40.330
questions used to create the JSON configuration file that's used

53
00:02:40.330 --> 00:02:42.200
to customize this CloudWatch agent.

54
00:02:42.200 --> 00:02:44.540
Now, we're not going to answer all the questions here,

55
00:02:44.540 --> 00:02:46.970
but you would run through this wizard answering all the questions that get

56
00:02:46.970 --> 00:02:52.770
asked. Once you've run through the configuration wizard, the next thing is to

57
00:02:52.770 --> 00:02:57.170
start the service. Here you can see a PowerShell script that's used to start

58
00:02:57.170 --> 00:03:00.700
the CloudWatch agent service. And this command,

59
00:03:00.700 --> 00:03:08.930
amazon‑cloudwatch‑agent‑ctl.ps1 ‑a fetch‑config ‑m ec2, and then the file

60
00:03:08.930 --> 00:03:13.140
location where the configuration JSON file can be found,

61
00:03:13.140 --> 00:03:18.340
we'll start the service with the appropriate JSON configuration file.

62
00:03:18.340 --> 00:03:22.840
So now the service should be started with the appropriate configuration.

63
00:03:22.840 --> 00:03:24.860
Let me show you that command again and make it a

64
00:03:24.860 --> 00:03:26.740
little bit easier for you to read.

65
00:03:26.740 --> 00:03:28.070
So there's the command.

66
00:03:28.070 --> 00:03:30.290
And although this is written across three different lines,

67
00:03:30.290 --> 00:03:31.740
remember, it is a single command.

68
00:03:31.740 --> 00:03:34.900
So with the agent installed, the Wizard run to create the configuration

69
00:03:34.900 --> 00:03:39.160
file, and now the service started with the appropriate configuration,

70
00:03:39.160 --> 00:03:43.350
this web server should start sending operating system metrics on

71
00:03:43.350 --> 00:03:47.750
potentially custom logs to CloudWatch, metrics logs you choose when you

72
00:03:47.750 --> 00:03:49.310
create the configuration file.

73
00:03:49.310 --> 00:03:54.120
Let's take a look at example of this config.json file. I'm over in

74
00:03:54.120 --> 00:03:58.140
Systems Manager, specifically Parameter Store.

75
00:03:58.140 --> 00:04:02.540
As part of the Agent Configuration Wizard, we can choose to store

76
00:04:02.540 --> 00:04:06.540
the config file in Parameter Store for later use.

77
00:04:06.540 --> 00:04:08.840
So let's look at these details.

78
00:04:08.840 --> 00:04:12.240
So these are the details of that configuration file, and you can see

79
00:04:12.240 --> 00:04:16.120
as part of the configuration, I've asked this to collect some custom

80
00:04:16.120 --> 00:04:20.680
logs, and these are my web server logs. We're also asking to collect

81
00:04:20.680 --> 00:04:22.840
event viewer system information,

82
00:04:22.840 --> 00:04:27.040
including verbose, informational, warning, error, and critical messages.

83
00:04:27.040 --> 00:04:29.750
And then we specify the type of metrics that should be

84
00:04:29.750 --> 00:04:31.620
collected from the operating system.

85
00:04:31.620 --> 00:04:33.940
When I configure a second web server now,

86
00:04:33.940 --> 00:04:37.160
or I configure a group of web servers en masse, I can point at

87
00:04:37.160 --> 00:04:40.080
this configuration file in Parameter Store.

88
00:04:40.080 --> 00:04:42.950
If we go back to CloudWatch, and again,

89
00:04:42.950 --> 00:04:47.240
I'm in metrics, notice this CWAgent namespace.

90
00:04:47.240 --> 00:04:51.580
If I select that, and I'll choose the first dimension, we can see

91
00:04:51.580 --> 00:04:55.540
metrics that are being registered by the CloudWatch agent.

92
00:04:55.540 --> 00:05:00.490
If we go to log groups and select the system log group, here we see log

93
00:05:00.490 --> 00:05:03.230
streams that are being generated by the CloudWatch agent.

94
00:05:03.230 --> 00:05:04.350
Specifically,

95
00:05:04.350 --> 00:05:09.330
each of these streams is registered events from the Windows Systems logs.

96
00:05:09.330 --> 00:05:10.360
So in this demonstration,

97
00:05:10.360 --> 00:05:22.000
we've seen metrics, alarms, and brief with integration of our operating system's applications with CloudWatch using the CloudWatch agent.

