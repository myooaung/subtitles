WEBVTT
1
00:00:01.840 --> 00:00:04.440
Let's start then with an introduction to Amazon CloudWatch.

2
00:00:04.440 --> 00:00:06.760
The most visible feature of CloudWatch and the feature that

3
00:00:06.760 --> 00:00:09.430
most people use first is CloudWatch Metrics.

4
00:00:09.430 --> 00:00:12.770
CloudWatch allows you collect metrics from AWS deployed resources,

5
00:00:12.770 --> 00:00:15.860
as well as on‑premises systems with the use of a CloudWatch agent.

6
00:00:15.860 --> 00:00:19.910
We can get up to 1 second of visibility of metrics

7
00:00:19.910 --> 00:00:22.240
and log data inside CloudWatch.

8
00:00:22.240 --> 00:00:23.740
Now that's really granular.

9
00:00:23.740 --> 00:00:27.340
It means we can see a level of detail in our metrics and logs that

10
00:00:27.340 --> 00:00:30.240
might not be visible in other monitoring solutions.

11
00:00:30.240 --> 00:00:32.840
Once we've collected metric and log information,

12
00:00:32.840 --> 00:00:35.000
we can then automate actions based on that information.

13
00:00:35.000 --> 00:00:39.630
We can set predefined thresholds for our metrics and then generate

14
00:00:39.630 --> 00:00:41.840
responses when those thresholds are breached.

15
00:00:41.840 --> 00:00:44.210
We can also integrate CloudWatch with machine learning.

16
00:00:44.210 --> 00:00:47.040
So based on past metrics and performance data,

17
00:00:47.040 --> 00:00:50.530
we can make predictions as to what resource levels we need in the future.

18
00:00:50.530 --> 00:00:54.340
By monitoring your AWS deployed resources,

19
00:00:54.340 --> 00:00:56.710
as well as your on‑premises servers using CloudWatch,

20
00:00:56.710 --> 00:00:59.510
this should help us reduce the mean time to detect and the

21
00:00:59.510 --> 00:01:01.740
mean time to resolution for problems.

22
00:01:01.740 --> 00:01:04.440
CloudWatch is massively feature rich.

23
00:01:04.440 --> 00:01:05.840
We start by collecting data.

24
00:01:05.840 --> 00:01:09.970
We collect metrics and we collect logs that are reliably stored.

25
00:01:09.970 --> 00:01:13.850
And by collecting this data and the use of features like

26
00:01:13.850 --> 00:01:16.040
Dashboards and Application Insights,

27
00:01:16.040 --> 00:01:18.880
we can monitor the performance of our AWS deployed resources.

28
00:01:18.880 --> 00:01:21.900
We can then act on the information we've gathered either

29
00:01:21.900 --> 00:01:24.960
manually or ideally through automation with CloudWatch

30
00:01:24.960 --> 00:01:26.940
Alarms and CloudWatch events.

31
00:01:26.940 --> 00:01:29.170
If you want the ability to work with historical data,

32
00:01:29.170 --> 00:01:31.440
then CloudWatch has got that covered too.

33
00:01:31.440 --> 00:01:36.240
We can keep CloudWatch data long term, then using tools like Log Analytics,

34
00:01:36.240 --> 00:01:39.640
contribute insights and custom metric operations.

35
00:01:39.640 --> 00:01:44.240
We can have detailed analysis of our data to help answer business questions.

36
00:01:44.240 --> 00:01:46.380
Security is at the heart of everything we do in AWS,

37
00:01:46.380 --> 00:01:51.440
so CloudWatch integrates with IAM to provide access control,

38
00:01:51.440 --> 00:01:55.340
and we can encrypt all data in CloudWatch to protect our data at rest.

39
00:01:55.340 --> 00:01:58.120
One of the key components that runs in CloudWatch is CloudWatch Logs.

40
00:01:58.120 --> 00:02:02.320
We can use CloudWatch to centralize all our logs from all our systems.

41
00:02:02.320 --> 00:02:07.320
These include AWS deployed resources, applications we install on compute,

42
00:02:07.320 --> 00:02:10.350
like EC2 and the Elastic Container Service,

43
00:02:10.350 --> 00:02:12.890
as well as collecting custom log information from

44
00:02:12.890 --> 00:02:14.120
your on‑premise service as well.

45
00:02:14.120 --> 00:02:16.890
Any logs that we store in CloudWatch can be stored indefinitely,

46
00:02:16.890 --> 00:02:20.140
so we have a huge collection of historical data that we can draw upon.

47
00:02:20.140 --> 00:02:23.440
And the log service is pretty feature rich.

48
00:02:23.440 --> 00:02:26.940
The log service includes a custom query language used to query log groups to

49
00:02:26.940 --> 00:02:31.940
help us search for specific error codes or patterns of data.

50
00:02:31.940 --> 00:02:34.550
And we can take all that data we've logged and visualize it in

51
00:02:34.550 --> 00:02:37.860
CloudWatch Dashboards or in third‑party visualization tools.

52
00:02:37.860 --> 00:02:40.930
When working with logs in Amazon CloudWatch,

53
00:02:40.930 --> 00:02:43.800
fundamentally, we're collecting log events.

54
00:02:43.800 --> 00:02:46.630
A log event is a record of activity.

55
00:02:46.630 --> 00:02:50.740
These records of activity come with a timestamp and a message.

56
00:02:50.740 --> 00:02:53.860
The message is the piece of logged information that we're interested in.

57
00:02:53.860 --> 00:02:57.240
Log events are grouped together into log streams.

58
00:02:57.240 --> 00:03:00.500
These streams are a sequence of log events that share the same source,

59
00:03:00.500 --> 00:03:05.240
so the same CloudTrail trail, the same Lambda function,

60
00:03:05.240 --> 00:03:08.350
or in the case of VPC Flow Logs, the same network interface.

61
00:03:08.350 --> 00:03:12.060
Log streams are grouped together into log groups.

62
00:03:12.060 --> 00:03:13.260
A log group, for example,

63
00:03:13.260 --> 00:03:16.600
could represent all the individual flows captured by

64
00:03:16.600 --> 00:03:19.140
neighboring VPC Flow Logs on a VPC.

65
00:03:19.140 --> 00:03:22.240
Log data itself is extremely useful,

66
00:03:22.240 --> 00:03:24.890
but one powerful feature of logs is the ability to

67
00:03:24.890 --> 00:03:27.900
convert log data into metric data points.

68
00:03:27.900 --> 00:03:30.130
Once we convert log data into metric data points,

69
00:03:30.130 --> 00:03:34.970
we can use these to trigger alarms that in turn can start on old series of

70
00:03:34.970 --> 00:03:38.440
automated events in response to that specific logged event.

71
00:03:38.440 --> 00:03:41.610
Now we're in full control of the retention settings for our logs.

72
00:03:41.610 --> 00:03:44.340
The default for logs is that they'll be stored indefinitely.

73
00:03:44.340 --> 00:03:46.640
But if you do want to set retention settings,

74
00:03:46.640 --> 00:03:50.940
you can set retention settings from 1 day to 10 years.

75
00:03:50.940 --> 00:03:53.640
Globomantics has some specific requirements.

76
00:03:53.640 --> 00:03:57.030
They wish to automatically respond to change in demand for their

77
00:03:57.030 --> 00:04:00.640
customer‑facing stateless app hosted on EC2.

78
00:04:00.640 --> 00:04:04.540
They expect this application to scale out and scale in

79
00:04:04.540 --> 00:04:06.840
based on demand for the application.

80
00:04:06.840 --> 00:04:09.140
They also wish to log information about custom access to the

81
00:04:09.140 --> 00:04:11.680
application hosted on those EC2 machines.

82
00:04:11.680 --> 00:04:13.840
And finally,

83
00:04:13.840 --> 00:04:18.100
Globomantics wishes to search through historical API activity as a way of

84
00:04:18.100 --> 00:04:21.300
auditing administrative access to the AWS accounts.

85
00:04:21.300 --> 00:04:23.900
So the question is, can CloudWatch help?

86
00:04:23.900 --> 00:04:25.700
And the answer is yes.

87
00:04:25.700 --> 00:04:29.880
To help Globomantics, we could recommend introducing CloudWatch Alarms.

88
00:04:29.880 --> 00:04:34.070
Alarms will allow Globomantics to measure a metric that can be used for

89
00:04:34.070 --> 00:04:37.790
scale‑out and scale‑in events for their EC2‑hosted application.

90
00:04:37.790 --> 00:04:41.080
They could also deploy the CloudWatch agent to those EC2 machines to

91
00:04:41.080 --> 00:04:43.970
gather custom login information from their applications,

92
00:04:43.970 --> 00:04:47.160
allowing them to track user activity on their app.

93
00:04:47.160 --> 00:04:49.100
They could also implement CloudTrail login.

94
00:04:49.100 --> 00:04:52.200
CloudTrail is the administrative auditing service inside AWS

95
00:04:52.200 --> 00:04:54.540
and as the ability to log to CloudWatch.

96
00:04:54.540 --> 00:04:57.180
This will allow them to search through historical

97
00:04:57.180 --> 00:04:59.390
administrative actions against their accounts.

98
00:04:59.390 --> 00:05:06.000
So now I spoke a little bit about what CloudWatch can offer us, let's jump into a demonstration.

