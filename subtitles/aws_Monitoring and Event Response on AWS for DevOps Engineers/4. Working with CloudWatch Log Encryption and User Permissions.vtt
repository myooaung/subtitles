WEBVTT
1
00:00:01.840 --> 00:00:03.130
Now that we've had a look at CloudWatch through the

2
00:00:03.130 --> 00:00:05.840
console and taken a look at CloudWatch logs,

3
00:00:05.840 --> 00:00:08.680
let's spend a few minutes looking at CloudWatch log

4
00:00:08.680 --> 00:00:10.740
encryption and user permissions.

5
00:00:10.740 --> 00:00:14.660
Like most services in AWS, when we talk about access control,

6
00:00:14.660 --> 00:00:16.210
we're really talking about two things.

7
00:00:16.210 --> 00:00:18.540
We're talking about authentication,

8
00:00:18.540 --> 00:00:20.730
which requires a set of credentials that can be used to

9
00:00:20.730 --> 00:00:25.840
authenticate requests to CloudWatch, and authorization,

10
00:00:25.840 --> 00:00:28.880
which involves assigning sets of permissions that are

11
00:00:28.880 --> 00:00:32.240
required to access CloudWatch resources.

12
00:00:32.240 --> 00:00:36.540
Traditional AWS tools are used to provide CloudWatch authentication.

13
00:00:36.540 --> 00:00:40.000
This includes the root user who has full control to

14
00:00:40.000 --> 00:00:41.640
CloudWatch and all its content,

15
00:00:41.640 --> 00:00:46.120
granting access to individual IAM users or groups by assigning the appropriate

16
00:00:46.120 --> 00:00:49.950
permissions and IAM roles with the appropriate permissions.

17
00:00:49.950 --> 00:00:53.290
An example of using an IAM role to grant access to CloudWatch

18
00:00:53.290 --> 00:00:55.520
would be roles assigned to Lambda functions.

19
00:00:55.520 --> 00:00:59.840
If we expect a Lambda function to create CloudWatch logs,

20
00:00:59.840 --> 00:01:02.800
then the function will need a role with the proper permissions.

21
00:01:02.800 --> 00:01:05.790
The same goes for compute like EC2. Or, indeed,

22
00:01:05.790 --> 00:01:08.580
any time an AWS service needs to read and write to CloudWatch,

23
00:01:08.580 --> 00:01:12.420
that service will need an appropriate role with the appropriate permissions.

24
00:01:12.420 --> 00:01:16.830
In order for our user or roles to be able to perform actions in CloudWatch,

25
00:01:16.830 --> 00:01:19.120
they need to be authorized to perform those actions.

26
00:01:19.120 --> 00:01:22.750
This authorization comes in the form of policies that are used to

27
00:01:22.750 --> 00:01:26.340
grant access to different actions in CloudWatch.

28
00:01:26.340 --> 00:01:28.080
These policies can be attached to users,

29
00:01:28.080 --> 00:01:31.030
groups, or roles, and they come in different types.

30
00:01:31.030 --> 00:01:34.240
Two ways that we can categorize policies are AWS managed

31
00:01:34.240 --> 00:01:36.790
policies and custom managed policies.

32
00:01:36.790 --> 00:01:40.100
Amazon CloudWatch has several different AWS managed policies to

33
00:01:40.100 --> 00:01:43.030
help us get started with CloudWatch authorization.

34
00:01:43.030 --> 00:01:45.340
For CloudWatch logs, for example,

35
00:01:45.340 --> 00:01:48.870
we have a policy called CloudWatchLogsFullAccess.

36
00:01:48.870 --> 00:01:53.860
Any user group or role that has this policy has full control of CloudWatch logs.

37
00:01:53.860 --> 00:01:57.980
We also have a read‑only policy called CloudWatchLogsReadOnlyAccess.

38
00:01:57.980 --> 00:02:01.510
Holders of this policy will be allowed to read logs, but do nothing else.

39
00:02:01.510 --> 00:02:05.240
Now in AWS, these policies are written in JSON.

40
00:02:05.240 --> 00:02:07.540
So here's an example of a policy.

41
00:02:07.540 --> 00:02:10.840
This policy includes an API version number,

42
00:02:10.840 --> 00:02:16.040
and typically that is 2012‑10‑17, and then one or more statements.

43
00:02:16.040 --> 00:02:18.240
This policy has a single statement.

44
00:02:18.240 --> 00:02:24.520
At a minimum, statements are made up of actions, effects, and resources.

45
00:02:24.520 --> 00:02:28.860
So the action section lists all the actions that this policy allows,

46
00:02:28.860 --> 00:02:33.340
and typically each action maps to an API.

47
00:02:33.340 --> 00:02:34.080
In this example,

48
00:02:34.080 --> 00:02:39.240
this action identifies all APIs that are part of the log's namespace.

49
00:02:39.240 --> 00:02:41.440
Next we have effect.

50
00:02:41.440 --> 00:02:44.230
The effect will either be allow or deny.

51
00:02:44.230 --> 00:02:46.410
Here the effect is allow,

52
00:02:46.410 --> 00:02:50.120
so allowing all the actions mentioned in the action section.

53
00:02:50.120 --> 00:02:52.820
And finally, we have the resource section.

54
00:02:52.820 --> 00:02:56.930
Here we've got a star, which indicates all resources,

55
00:02:56.930 --> 00:02:59.070
but you could be quite specific in this section.

56
00:02:59.070 --> 00:03:02.040
So this statement allows full control of all logs.

57
00:03:02.040 --> 00:03:07.740
In this example, we have the API version number and, again, a single statement.

58
00:03:07.740 --> 00:03:11.160
This time, we provided a specific list of actions.

59
00:03:11.160 --> 00:03:16.240
These actions are required for read‑only access to CloudWatch logs.

60
00:03:16.240 --> 00:03:21.260
This statement includes allow and, again, all resources.

61
00:03:21.260 --> 00:03:26.540
So if you were given this policy, you would be allowed read access to all logs.

62
00:03:26.540 --> 00:03:28.440
What does this next policy do?

63
00:03:28.440 --> 00:03:31.300
Take a minute, pause the video if you need,

64
00:03:31.300 --> 00:03:34.340
and see if you can write down what this policy does.

65
00:03:34.340 --> 00:03:36.940
So like our previous two policies,

66
00:03:36.940 --> 00:03:40.840
we have the API version and a single statement.

67
00:03:40.840 --> 00:03:43.620
We then have an action section that lists the actions

68
00:03:43.620 --> 00:03:45.480
that will either be allowed or denied.

69
00:03:45.480 --> 00:03:49.040
And in this example, we are allowing access.

70
00:03:49.040 --> 00:03:52.540
So it's the resource section here that's very different.

71
00:03:52.540 --> 00:03:55.840
This time, we're identifying a specific resource,

72
00:03:55.840 --> 00:03:59.340
namely a log group called GlobomanticsApp.

73
00:03:59.340 --> 00:04:03.240
So the holder of this policy will be able to write to this log group,

74
00:04:03.240 --> 00:04:05.750
read from this load group, but no other log groups.

75
00:04:05.750 --> 00:04:07.440
So by using policies,

76
00:04:07.440 --> 00:04:12.220
either AWS managed policies given to us by AWS or custom

77
00:04:12.220 --> 00:04:14.350
managed policies like this that we create,

78
00:04:14.350 --> 00:04:18.040
we can be very granular in the level of access we give to CloudWatch

79
00:04:18.040 --> 00:04:21.250
and not just to CloudWatch logs as in these examples,

80
00:04:21.250 --> 00:04:23.410
but any of the CloudWatch features.

81
00:04:23.410 --> 00:04:27.760
Most organizations that I work with need this granularity of access,

82
00:04:27.760 --> 00:04:31.610
different groups of people and services that require different levels

83
00:04:31.610 --> 00:04:34.740
of access to different resources in CloudWatch.

84
00:04:34.740 --> 00:04:38.990
So for Globomantics, for example, they may need one set of users to create,

85
00:04:38.990 --> 00:04:39.310
view,

86
00:04:39.310 --> 00:04:44.240
and delete CloudWatch logs and one set of users that can only read

87
00:04:44.240 --> 00:04:47.240
logs created by their customer‑faced application.

88
00:04:47.240 --> 00:04:49.960
At the same time, they may be running Lambda functions,

89
00:04:49.960 --> 00:04:53.860
and a different set of users need to able to analyze those logs.

90
00:04:53.860 --> 00:04:57.010
So maybe take a minute, think about your organization,

91
00:04:57.010 --> 00:04:59.470
think about the different teams of people in your

92
00:04:59.470 --> 00:05:02.990
organization and what levels of access they would need to

93
00:05:02.990 --> 00:05:04.840
the different CloudWatch services.

94
00:05:04.840 --> 00:05:08.020
One other aspect of CloudWatch logs to consider is encryption.

95
00:05:08.020 --> 00:05:11.820
Now by default, all log groups, so by extension,

96
00:05:11.820 --> 00:05:14.660
the log streams, log events are encrypted at rest.

97
00:05:14.660 --> 00:05:18.090
The conversation you should have then is around the encryption keys.

98
00:05:18.090 --> 00:05:20.760
Do you want to use encryption keys controlled by AWS,

99
00:05:20.760 --> 00:05:23.840
or do you want to provide your own keying information?

100
00:05:23.840 --> 00:05:26.300
It's also good to know of the encryption of data in transit.

101
00:05:26.300 --> 00:05:29.640
So information going from your AWS deployed resources,

102
00:05:29.640 --> 00:05:31.540
your AWS services,

103
00:05:31.540 --> 00:05:34.780
even your virtual machines on premise that are logging to CloudWatch,

104
00:05:34.780 --> 00:05:37.380
all of that data is encrypted end to end.

105
00:05:37.380 --> 00:05:40.240
This time CloudWatch controls those keys.

106
00:05:40.240 --> 00:05:48.000
So a pretty secure environment for us to be working in. Let's take a couple minutes then to look at access control in CloudWatch.

