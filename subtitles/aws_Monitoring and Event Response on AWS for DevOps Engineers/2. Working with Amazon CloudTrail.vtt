WEBVTT
1
00:00:01.940 --> 00:00:03.470
Now we know what CloudTrail is,

2
00:00:03.470 --> 00:00:06.100
let's spend a few minutes discussing how we work with CloudTrail.

3
00:00:06.100 --> 00:00:09.620
And to do that, we're going to work for our customer, Globomantics.

4
00:00:09.620 --> 00:00:12.640
Globomantics has several requirements around alerted.

5
00:00:12.640 --> 00:00:17.840
Firstly, they would like to be alerted when the AWS root account is being used.

6
00:00:17.840 --> 00:00:20.770
AWS best practice says that the AWS root account should never be

7
00:00:20.770 --> 00:00:23.040
used for administration on a day‑to‑day basis,

8
00:00:23.040 --> 00:00:25.310
that its access key should be revoked to enable

9
00:00:25.310 --> 00:00:27.260
multi‑factor authentication on that account,

10
00:00:27.260 --> 00:00:30.240
and then it's locked away and never used.

11
00:00:30.240 --> 00:00:31.430
So if it is used,

12
00:00:31.430 --> 00:00:35.000
that could be a security issue that Globomantics wants to know about.

13
00:00:35.000 --> 00:00:35.940
Secondly,

14
00:00:35.940 --> 00:00:37.770
Globomantics has a requirement to be able to view

15
00:00:37.770 --> 00:00:41.240
API activity for at least 2 years.

16
00:00:41.240 --> 00:00:42.890
They would like to be able to query, analyze,

17
00:00:42.890 --> 00:00:46.870
and download the API activity using AWS native tools.

18
00:00:46.870 --> 00:00:49.440
And, of course, security is paramount.

19
00:00:49.440 --> 00:00:53.040
Only authorized personnel should have access to the logs

20
00:00:53.040 --> 00:00:56.140
that contains the records of API activity.

21
00:00:56.140 --> 00:00:58.940
So let's look at Globomantics's first requirement,

22
00:00:58.940 --> 00:01:03.240
that they must be alerted when the AWS root account is used.

23
00:01:03.240 --> 00:01:04.540
So here we've got our root user,

24
00:01:04.540 --> 00:01:08.350
and let's pretend someone is logged in using the root user credentials.

25
00:01:08.350 --> 00:01:13.040
Well, by default, CloudTrail will record that activity.

26
00:01:13.040 --> 00:01:16.440
What we can do then is create a CloudWatch event.

27
00:01:16.440 --> 00:01:20.360
We'll create a CloudWatch event that is triggered when that root

28
00:01:20.360 --> 00:01:24.890
user logs in. Once triggered, we can send a message to SNS as a

29
00:01:24.890 --> 00:01:29.740
target for an event. And SNS, in turn, can generate an email.

30
00:01:29.740 --> 00:01:32.840
This email then is alerting Globomantics to this root account being

31
00:01:32.840 --> 00:01:39.080
used. For Globomantics own requirements, we could also integrate

32
00:01:39.080 --> 00:01:43.350
CloudTrail with CloudWatch. For example, for Globomantics's retention

33
00:01:43.350 --> 00:01:47.360
needs, we can configure CloudWatch to retain its logs for at least 2

34
00:01:47.360 --> 00:01:51.540
years. For their analysis needs, we can use log insights. We can use log

35
00:01:51.540 --> 00:01:55.270
insights to query and analyze the logs and to download the results of

36
00:01:55.270 --> 00:01:56.680
those queries.

37
00:01:56.680 --> 00:01:58.240
And finally for security,

38
00:01:58.240 --> 00:02:03.440
we have integration with IAM. So using a mixture of IAM users and IAM policies,

39
00:02:03.440 --> 00:02:05.950
we can guarantee the information in CloudWatch will only be

40
00:02:05.950 --> 00:02:08.340
made available to the appropriate users.

41
00:02:08.340 --> 00:02:09.940
When working with CloudTrail,

42
00:02:09.940 --> 00:02:12.840
we can do our configuration through the CloudTrail console.

43
00:02:12.840 --> 00:02:14.420
Remember, through the console itself,

44
00:02:14.420 --> 00:02:17.820
we can view 90 days of API activity. For that longer

45
00:02:17.820 --> 00:02:21.120
retention then, we integrate CloudTrail with CloudWatch, but

46
00:02:21.120 --> 00:02:24.320
also S3. When configuring CloudTrail,

47
00:02:24.320 --> 00:02:26.230
you can configure your trails to record activity for a

48
00:02:26.230 --> 00:02:28.370
single region or multiple regions,

49
00:02:28.370 --> 00:02:32.140
depending on your particular API monitoring needs.

50
00:02:32.140 --> 00:02:35.470
Now the rough steps to implement integration between CloudTrail

51
00:02:35.470 --> 00:02:38.390
and CloudWatch involve creating a new trail,

52
00:02:38.390 --> 00:02:41.440
selecting the optional CloudWatch integration,

53
00:02:41.440 --> 00:02:44.010
providing the name of the log group that you want to store your

54
00:02:44.010 --> 00:02:48.360
CloudTrail logs in, and providing the name of an IAM role that must

55
00:02:48.360 --> 00:02:51.240
have the correct policies to work with CloudWatch.

56
00:02:51.240 --> 00:02:54.570
Finally, we select the type of CloudTrail events that we want to monitor,

57
00:02:54.570 --> 00:03:02.000
then sit back, and wait for the logs to start to appear in CloudWatch. So let's see if we can configure that.

