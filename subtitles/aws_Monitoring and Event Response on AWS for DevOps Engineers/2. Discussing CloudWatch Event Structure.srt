1
00:00:02,240 --> 00:00:04,740
Now we have an understanding of what CloudWatch events are,

2
00:00:04,740 --> 00:00:07,950
let's take a look at some CloudWatch event structures. In this

3
00:00:07,950 --> 00:00:12,030
first example, our customer, Globomantics, needs to be informed

4
00:00:12,030 --> 00:00:13,940
when an EBS snapshot is created.

5
00:00:13,940 --> 00:00:17,040
So the first thing we need to do is create a rule.

6
00:00:17,040 --> 00:00:20,840
This rule will be based on an event pattern as opposed to a schedule.

7
00:00:20,840 --> 00:00:24,180
We would select EC2 as the service name when creating the rule, and

8
00:00:24,180 --> 00:00:27,540
EBS snapshot notification for the event type.

9
00:00:27,540 --> 00:00:32,540
We would then further filter the rule to monitor for createSnapshot events

10
00:00:32,540 --> 00:00:35,740
as opposed to deleteSnapshot or editSnapshot events.

11
00:00:35,740 --> 00:00:40,140
Once the rule is created, we should see the following JSON event pattern.

12
00:00:40,140 --> 00:00:44,860
Here we can see the source is aws.ec2, detail‑type Snapshot

13
00:00:44,860 --> 00:00:48,740
Notification, and the detail event, createSnapshot.

14
00:00:48,740 --> 00:00:51,340
This is the event pattern that we're monitoring for.

15
00:00:51,340 --> 00:00:55,270
You can create these patterns in any text editor and import them into

16
00:00:55,270 --> 00:00:58,570
CloudWatch Events or EventBridge, or you can use the steps on the previous

17
00:00:58,570 --> 00:01:02,040
slide to create the event rule for the console.

18
00:01:02,040 --> 00:01:06,060
Next, we need to select a target, so that once createSnapshot has been seen,

19
00:01:06,060 --> 00:01:10,140
Globomantics can be notified. So we select the target, and in

20
00:01:10,140 --> 00:01:13,860
this example we're going to use SNS topic as that target. We

21
00:01:13,860 --> 00:01:16,880
select the appropriate SNS topic. We then configure details for

22
00:01:16,880 --> 00:01:18,400
the rules such as rule name.

23
00:01:18,400 --> 00:01:20,940
So two steps for monitoring that snapshot event,

24
00:01:20,940 --> 00:01:23,440
create a rule and select a target.

25
00:01:23,440 --> 00:01:27,640
This is the JSON object we should see when that snapshot event occurs.

26
00:01:27,640 --> 00:01:30,810
If you set up SNS, then you'll receive an email from SNS topic.

27
00:01:30,810 --> 00:01:33,540
This is the detail you'll see inside your email.

28
00:01:33,540 --> 00:01:37,570
Notice the detail‑type of EBS Snapshot Notification, the account ID that

29
00:01:37,570 --> 00:01:41,140
generated this event, and the event was createSnapshot.

30
00:01:41,140 --> 00:01:44,530
Next, Globomantics would like to run a lambda function every 5 minutes.

31
00:01:44,530 --> 00:01:48,530
This time we choose Schedule as the event source when we create our event

32
00:01:48,530 --> 00:01:52,950
rule. We select a fixed rate of 5 minutes as the interval, and then

33
00:01:52,950 --> 00:01:54,770
select lambda function as the target.

34
00:01:54,770 --> 00:01:57,830
We select the appropriate lambda function and finally finish off

35
00:01:57,830 --> 00:02:01,040
this rule by configuring details such as rule name,

36
00:02:01,040 --> 00:02:03,440
so just one step required for this scheduled event.

37
00:02:03,440 --> 00:02:05,540
When you configure a scheduled event,

38
00:02:05,540 --> 00:02:08,350
you get to choose between a rate expression, which,

39
00:02:08,350 --> 00:02:09,750
as we stated previously,

40
00:02:09,750 --> 00:02:12,880
will run when the initial rule is created, and then a fixed schedule

41
00:02:12,880 --> 00:02:16,630
after that, and a cron expression for fine‑grained schedules not

42
00:02:16,630 --> 00:02:19,130
supported by regular rate expressions.

43
00:02:19,130 --> 00:02:24,940
Here's an example of creating a schedule‑expression using the AWS CLI,

44
00:02:24,940 --> 00:02:31,390
aws events put‑rule ‑schedule‑expression, and then we have the rate and

45
00:02:31,390 --> 00:02:34,450
the frequency of when the expressions have run, in this case every 5

46
00:02:34,450 --> 00:02:37,140
minutes, and then we provide a rulename.

47
00:02:37,140 --> 00:02:39,240
Now, this command is not complete.

48
00:02:39,240 --> 00:02:42,050
Missing from this command is the actual target that

49
00:02:42,050 --> 00:02:43,460
I want to run every 5 minutes.

50
00:02:43,460 --> 00:02:46,170
Here's an example of a cron expression. These look more

51
00:02:46,170 --> 00:02:49,140
complicated, and possibly they are,

52
00:02:49,140 --> 00:02:54,030
but they do give us that finer‑grained level of control. Here, this cron

53
00:02:54,030 --> 00:02:58,570
expression will run this rule at 12 o'clock every day.

54
00:02:58,570 --> 00:03:01,470
We know this from the 12 in the second column and the

55
00:03:01,470 --> 00:03:03,560
question mark in the fifth Column.

56
00:03:03,560 --> 00:03:06,820
The question mark is a wild card, which in this position means

57
00:03:06,820 --> 00:03:09,640
every day. When working with cron expressions,

58
00:03:09,640 --> 00:03:11,740
we have six fields that we can work with,

59
00:03:11,740 --> 00:03:14,710
starting from the left and working to the right, minutes,

60
00:03:14,710 --> 00:03:19,410
hours, days‑of‑the‑month, month, day‑of‑the‑week, and year.

61
00:03:19,410 --> 00:03:22,910
So now in the expression above we've got 12 in the hours

62
00:03:22,910 --> 00:03:26,960
column, so 12 o'clock, and the wildcard question mark in

63
00:03:26,960 --> 00:03:30,040
the day‑of‑the‑week column, which means every day.

64
00:03:30,040 --> 00:03:37,000
So let's take a look at creating some events in CloudWatch Events and Amazon EventBridge.

