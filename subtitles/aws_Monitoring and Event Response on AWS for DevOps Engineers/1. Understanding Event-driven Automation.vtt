WEBVTT
1
00:00:02.140 --> 00:00:04.750
Hi there, and welcome to this Pluralsight course,

2
00:00:04.750 --> 00:00:08.650
Monitoring an Event Response on AWS for DevOps Engineers.

3
00:00:08.650 --> 00:00:10.040
My name is Mike Brown.

4
00:00:10.040 --> 00:00:10.670
And in this module,

5
00:00:10.670 --> 00:00:15.840
we're going to look at using Amazon CloudWatch for incident response.

6
00:00:15.840 --> 00:00:20.540
In this module, we're first going discuss event‑driven automation.

7
00:00:20.540 --> 00:00:23.920
We're then going to talk about automated event management and healing before

8
00:00:23.920 --> 00:00:27.440
working with CloudWatch event rules to invoke a step function.

9
00:00:27.440 --> 00:00:27.600
Finally,

10
00:00:27.600 --> 00:00:32.940
we're going to finish off this module with a quick course and module review.

11
00:00:32.940 --> 00:00:36.540
Let's begin then by understanding event‑driven automation.

12
00:00:36.540 --> 00:00:39.830
Our customer, Globomantics, has some final requirements for us.

13
00:00:39.830 --> 00:00:40.940
Currently,

14
00:00:40.940 --> 00:00:43.320
Globomantics' support teams receive daily updates

15
00:00:43.320 --> 00:00:44.610
on the status of their services.

16
00:00:44.610 --> 00:00:47.460
They then use these updates to identify any issues,

17
00:00:47.460 --> 00:00:50.580
prioritize the issues, and then address those issues.

18
00:00:50.580 --> 00:00:53.500
Globomantics' security teams receive information in a similar way,

19
00:00:53.500 --> 00:00:58.040
except they receive email alerts whenever security event is reported.

20
00:00:58.040 --> 00:01:02.440
They then respond to those events, addressing any issues that were highlighted.

21
00:01:02.440 --> 00:01:06.810
At present, Globomantics' time to detect and resolve issues is measured in hours.

22
00:01:06.810 --> 00:01:07.980
We have been asked to help.

23
00:01:07.980 --> 00:01:08.960
Specifically,

24
00:01:08.960 --> 00:01:12.270
we've been asked to improve Globomantics' response time to

25
00:01:12.270 --> 00:01:15.640
performance availability and security issues.

26
00:01:15.640 --> 00:01:16.840
And to do that,

27
00:01:16.840 --> 00:01:18.630
we're going back to an idea that we've mentioned

28
00:01:18.630 --> 00:01:22.040
several times during this course, namely,

29
00:01:22.040 --> 00:01:24.240
automation is the key to success.

30
00:01:24.240 --> 00:01:28.740
Let the AWS services do the hard work, and we'll take the credit.

31
00:01:28.740 --> 00:01:28.960
Now,

32
00:01:28.960 --> 00:01:30.550
there's lots of frameworks out there that you can

33
00:01:30.550 --> 00:01:33.200
follow that govern incident response.

34
00:01:33.200 --> 00:01:35.690
Most of them will have a stepped approach where they break

35
00:01:35.690 --> 00:01:39.940
down incident response into various stages.

36
00:01:39.940 --> 00:01:42.240
For example, detect.

37
00:01:42.240 --> 00:01:45.360
We need to use AWS services like CloudWatch events,

38
00:01:45.360 --> 00:01:45.820
EventBridge,

39
00:01:45.820 --> 00:01:50.850
and the various logging services to help us detect when there's a problem,

40
00:01:50.850 --> 00:01:53.450
either infrastructure related orsecurity related,

41
00:01:53.450 --> 00:01:55.440
doesn't really matter.

42
00:01:55.440 --> 00:01:58.970
We need to deploy features that will detect events that are important to us.

43
00:01:58.970 --> 00:02:00.340
Once detected,

44
00:02:00.340 --> 00:02:03.470
we need to respond and this involves configuring the automation

45
00:02:03.470 --> 00:02:06.840
processes to respond to the detected events.

46
00:02:06.840 --> 00:02:08.550
We also need to report everything.

47
00:02:08.550 --> 00:02:11.380
We need to alert the relevant teams when an event occurs.

48
00:02:11.380 --> 00:02:15.360
Both the event itself and the automated resolution should be

49
00:02:15.360 --> 00:02:18.180
logged in your IT service management system.

50
00:02:18.180 --> 00:02:19.740
In AWS then,

51
00:02:19.740 --> 00:02:23.420
we have a whole series of tools that will help with our event‑driven automation.

52
00:02:23.420 --> 00:02:27.990
Starting off then with a whole series of services around events and logging.

53
00:02:27.990 --> 00:02:29.870
These are the services that are going to detect the

54
00:02:29.870 --> 00:02:32.140
events that we want to react to.

55
00:02:32.140 --> 00:02:36.840
Some of them we've discussed already, like CloudWatch events or EventBridge.

56
00:02:36.840 --> 00:02:40.140
Both of these allow us to pick up events from our deployed infrastructure,

57
00:02:40.140 --> 00:02:42.510
as well as AWS system health events.

58
00:02:42.510 --> 00:02:45.870
EventBridge extends the capabilities of CloudWatch events to

59
00:02:45.870 --> 00:02:48.730
include custom event busses that allow us to more easily

60
00:02:48.730 --> 00:02:52.390
integrate our applications with events services and an integrate

61
00:02:52.390 --> 00:02:53.980
third‑party SaaS applications.

62
00:02:53.980 --> 00:02:55.890
We also have AWS Config.

63
00:02:55.890 --> 00:03:00.740
Now, AWS Config keeps track of all the deployed resources in a particular region.

64
00:03:00.740 --> 00:03:04.050
It will automatically keep a compliance timeline and a

65
00:03:04.050 --> 00:03:06.510
configuration timeline for those resources.

66
00:03:06.510 --> 00:03:08.870
So if we deploy an EC2 instance,

67
00:03:08.870 --> 00:03:12.570
AWS Config will tell us how that instance has changed over time.

68
00:03:12.570 --> 00:03:15.840
We could then configure compliance rules in AWS Config.

69
00:03:15.840 --> 00:03:19.120
These rules perform checks against the AWS resources deployed to

70
00:03:19.120 --> 00:03:22.840
the region and can take remediation action.

71
00:03:22.840 --> 00:03:25.750
So if I have an AWS Config rule that says that all

72
00:03:25.750 --> 00:03:30.720
deployed EC2 instances must be m5.xlarge instances and my

73
00:03:30.720 --> 00:03:32.690
rule detect some small instances,

74
00:03:32.690 --> 00:03:37.540
then my rule could trigger a Lambda function that stops the EC2 instances,

75
00:03:37.540 --> 00:03:41.040
changes their size, and restarts them again.

76
00:03:41.040 --> 00:03:45.440
So AWS Config is a great service that will help us maintain our desired state.

77
00:03:45.440 --> 00:03:49.240
Amazon S3 also supports an event notification service,

78
00:03:49.240 --> 00:03:52.300
so we can configure S3 event rules on specific buckets,

79
00:03:52.300 --> 00:03:55.060
and these rules can monitor for particular methods,

80
00:03:55.060 --> 00:03:57.230
like PUTs and GETs.

81
00:03:57.230 --> 00:03:59.090
And when one of these actions is seen on the bucket,

82
00:03:59.090 --> 00:04:02.190
the event notification can trigger a Lambda function,

83
00:04:02.190 --> 00:04:07.040
send a message to an SNS topic, or put a message in an SQS queue.

84
00:04:07.040 --> 00:04:09.710
Lots of services have evolved in logging in AWS.

85
00:04:09.710 --> 00:04:11.100
These include CloudTrail,

86
00:04:11.100 --> 00:04:13.960
and we've already discussed CloudTrail a few times in this course.

87
00:04:13.960 --> 00:04:16.750
From the CloudTrails is our ordering service in AWS.

88
00:04:16.750 --> 00:04:19.840
We also have logs like VPC Flow Logs.

89
00:04:19.840 --> 00:04:25.350
VPC Flow Logs can track accepted or rejected flows through our VPCs,

90
00:04:25.350 --> 00:04:28.940
and we can monitor VPC flows from inside VPC,

91
00:04:28.940 --> 00:04:32.080
an individual subnet, or individual network adaptors.

92
00:04:32.080 --> 00:04:35.160
Now, these flow logs don't capture payload information,

93
00:04:35.160 --> 00:04:38.240
but they do capture all the header information.

94
00:04:38.240 --> 00:04:41.140
We also have logs provided by security devices,

95
00:04:41.140 --> 00:04:43.240
like the web application firewall.

96
00:04:43.240 --> 00:04:46.560
Today, we can have global WAFs that sit with CloudFront,

97
00:04:46.560 --> 00:04:48.770
and we can have regional WAFs that sit with our

98
00:04:48.770 --> 00:04:51.080
application load balancers and our API gateways.

99
00:04:51.080 --> 00:04:52.080
Either way,

100
00:04:52.080 --> 00:04:55.980
WAFs let us create rules that will either allow or

101
00:04:55.980 --> 00:04:57.670
deny certain types of traffic,

102
00:04:57.670 --> 00:05:01.340
and everything the WAF is doing can be logged, and we can

103
00:05:01.340 --> 00:05:03.940
use those logs for our security response.

104
00:05:03.940 --> 00:05:08.530
So all of these services and many more log information, usually

105
00:05:08.530 --> 00:05:12.540
either to CloudWatch, S3, or a combination of the 2.

106
00:05:12.540 --> 00:05:15.440
If the previous tools allow us to detect events,

107
00:05:15.440 --> 00:05:19.520
this next set of tools allow us to make sense of those events and

108
00:05:19.520 --> 00:05:21.940
to alert us that certain events have occurred.

109
00:05:21.940 --> 00:05:24.360
So we've already mentioned AWS Config rules.

110
00:05:24.360 --> 00:05:27.100
These see a particular configuration, make a judgment on that

111
00:05:27.100 --> 00:05:31.170
configuration, and decide whether the configuration is compliant

112
00:05:31.170 --> 00:05:33.840
or noncompliant with a config rule.

113
00:05:33.840 --> 00:05:37.470
If a configuration is noncompliant, we can instate automation actions.

114
00:05:37.470 --> 00:05:42.010
We have Amazon CloudWatch, and specifically here, we have CloudWatch alarms.

115
00:05:42.010 --> 00:05:45.150
We set up alarms based on specific metrics, and when a metric is

116
00:05:45.150 --> 00:05:48.240
above a certain threshold, action is taken.

117
00:05:48.240 --> 00:05:52.000
We also have products like AWS Inspector. Inspector looks at your operating

118
00:05:52.000 --> 00:05:55.820
systems and your installed applications, and it's looking specifically for

119
00:05:55.820 --> 00:05:59.960
security vulnerabilities based on some preconfigured assessments. We can then

120
00:05:59.960 --> 00:06:03.090
take the results of these security assessments and use them to harden our

121
00:06:03.090 --> 00:06:08.330
operating systems and applications. For our security team, Amazon GuardDuty is

122
00:06:08.330 --> 00:06:10.340
a really powerful tool.

123
00:06:10.340 --> 00:06:15.120
It's focus is around visibility of security events. Using GuardDuty then, we can

124
00:06:15.120 --> 00:06:18.740
be alerted when there's a security threat to our accounts.

125
00:06:18.740 --> 00:06:21.090
We then have integration with machine learning.

126
00:06:21.090 --> 00:06:25.540
Amazon Macie, for example, is all about information protection.

127
00:06:25.540 --> 00:06:29.630
It will use machine learning to help categorize the information inside your

128
00:06:29.630 --> 00:06:33.540
AWS account and help protect us from information leakage.

129
00:06:33.540 --> 00:06:34.080
Also,

130
00:06:34.080 --> 00:06:37.440
Amazon Detective. Amazon Detective will look at all your login

131
00:06:37.440 --> 00:06:41.820
information inside your AWS account, bringing that into one place, it

132
00:06:41.820 --> 00:06:47.030
will then use machine learning to identify any anomalous activities and

133
00:06:47.030 --> 00:06:49.540
alert you to potential security threats.

134
00:06:49.540 --> 00:06:53.960
So each of these tools gives us visibility into our configurations, into our

135
00:06:53.960 --> 00:06:58.180
security postures, and they allow us to generate alerts so we can be

136
00:06:58.180 --> 00:07:02.840
informed about configuration security issues, and also, by using the alerts

137
00:07:02.840 --> 00:07:09.020
to instigate automation steps. For automation in AWS, we have Lambda. Lambda

138
00:07:09.020 --> 00:07:11.140
is a service compute platform.

139
00:07:11.140 --> 00:07:15.050
Lambda, not only sits at the heart of our service application designs,

140
00:07:15.050 --> 00:07:18.480
but it can also run code in response to events. And we have

141
00:07:18.480 --> 00:07:22.560
step functions. Step functions allow us to coordinate a set

142
00:07:22.560 --> 00:07:24.940
of steps in response to an event.

143
00:07:24.940 --> 00:07:27.870
So what if you want to trigger several Lambda functions? You

144
00:07:27.870 --> 00:07:29.830
might want these functions to run in parallel,

145
00:07:29.830 --> 00:07:33.390
or you might want the functions to run sequentially, while step

146
00:07:33.390 --> 00:07:38.670
functions is your tool for creating workflows based on AWS services.

147
00:07:38.670 --> 00:07:43.550
And we have AWS Systems Manager. Systems Manager gives you visibility

148
00:07:43.550 --> 00:07:45.840
and control of your infrastructure.

149
00:07:45.840 --> 00:07:48.700
Its core components are all about working with your EC2

150
00:07:48.700 --> 00:07:52.040
instances and managing everything from patching,

151
00:07:52.040 --> 00:07:54.840
fleet‑wide sets of automated commands,

152
00:07:54.840 --> 00:07:58.010
as well as keeping track of inventory reporting and

153
00:07:58.010 --> 00:08:00.440
general health of your deployed instances.

154
00:08:00.440 --> 00:08:05.190
Our goal then must be better response to improve our meantime to detect and

155
00:08:05.190 --> 00:08:08.550
our meantime to resolve issues with our infrastructure.

156
00:08:08.550 --> 00:08:10.500
This will give us more time to innovate.

157
00:08:10.500 --> 00:08:14.220
We'll be able to spend our time on the next big thing or improving what we

158
00:08:14.220 --> 00:08:19.360
already have instead of reacting to events that can be automated. Have a

159
00:08:19.360 --> 00:08:21.940
think of your AWS‑deployed infrastructure.

160
00:08:21.940 --> 00:08:24.240
What areas would you like to automate?

161
00:08:24.240 --> 00:08:27.300
Once you've identified things that you'd like to automate, you go ahead and

162
00:08:27.300 --> 00:08:31.920
spend a bit of time matching those things against AWS services that can

163
00:08:31.920 --> 00:08:37.290
provide the automation. For Globomantics, their support team really want us

164
00:08:37.290 --> 00:08:39.340
to automate responses to failures.

165
00:08:39.340 --> 00:08:43.090
This will primarily involve setting up rules in CloudWatch or

166
00:08:43.090 --> 00:08:46.450
EventBridge, to detect a failure, and then triggering Lambda

167
00:08:46.450 --> 00:08:48.060
functions or step functions.

168
00:08:48.060 --> 00:08:51.540
The security team wants to detect and respond to security threats.

169
00:08:51.540 --> 00:08:55.060
This will involve setting up automation with tools like AWS Config,

170
00:08:55.060 --> 00:08:58.220
GuardDuty, as well as integrating products like Amazon Inspector

171
00:08:58.220 --> 00:09:01.580
and the machine learning tools, Macie and Detective. And again, we

172
00:09:01.580 --> 00:09:03.740
want to report everything.

173
00:09:03.740 --> 00:09:06.070
So not just that we detect an event, something was

174
00:09:06.070 --> 00:09:08.140
triggered, and now it's fixed,

175
00:09:08.140 --> 00:09:11.050
but exactly what happened on each stage of the process.

176
00:09:11.050 --> 00:09:18.000
That way, we can learn from all the information and use it to tune our event responses in the future.

