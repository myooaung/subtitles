1
00:00:01,940 --> 00:00:05,260
Hi there, and welcome to this Pluralsight course, Monitoring and

2
00:00:05,260 --> 00:00:08,060
Event Response on AWS for DevOps Engineers.

3
00:00:08,060 --> 00:00:10,600
My name is Mike Brown, and in this module,

4
00:00:10,600 --> 00:00:14,740
we're going to be working with CloudWatch events and Amazon EventBridge.

5
00:00:14,740 --> 00:00:17,420
We're going to begin this module by introducing

6
00:00:17,420 --> 00:00:19,740
CloudWatch events and Amazon EventBridge.

7
00:00:19,740 --> 00:00:22,990
We're going to discuss what we have in common and talk about how

8
00:00:22,990 --> 00:00:26,980
Amazon EventBridge extends the capabilities of CloudWatch events for

9
00:00:26,980 --> 00:00:30,040
managing event‑driven architectures in AWS.

10
00:00:30,040 --> 00:00:34,010
We'll then discuss event structures in both Cloudwatch events and EventBridge,

11
00:00:34,010 --> 00:00:37,740
and we're going to demonstrate events using both tools.

12
00:00:37,740 --> 00:00:38,090
Finally,

13
00:00:38,090 --> 00:00:40,460
we'll finish off this module by looking at how we can use

14
00:00:40,460 --> 00:00:43,590
CloudWatch logs to monitor CloudWatch events.

15
00:00:43,590 --> 00:00:49,140
So let's begin by introducing CloudWatch events and Amazon EventBridge.

16
00:00:49,140 --> 00:00:52,680
Our customer Globomantics would like some advice on which AWS

17
00:00:52,680 --> 00:00:55,850
service to use to automate certain actions.

18
00:00:55,850 --> 00:00:59,810
For example, they would like to automate the deployment of new application code,

19
00:00:59,810 --> 00:01:02,890
but they need a service to monitor their application repositories and

20
00:01:02,890 --> 00:01:05,660
to trigger code pipeline when their code is updated.

21
00:01:05,660 --> 00:01:09,340
They also need the ability to schedule a lambda function to run every 5 minutes,

22
00:01:09,340 --> 00:01:13,840
and they require to be notified when Amazon GuardDuty records a new finding.

23
00:01:13,840 --> 00:01:18,340
Ideally, if they can do this all in the same tool, then that will be preferred.

24
00:01:18,340 --> 00:01:19,920
So, what we'd recommend?

25
00:01:19,920 --> 00:01:24,740
Well, we'd advise Globomantics to use CloudWatch events or Amazon EventBridge.

26
00:01:24,740 --> 00:01:28,070
Either of these tools can perform the actions that Globomantics requires.

27
00:01:28,070 --> 00:01:32,040
So let's learn a bit more about these tools before performing a demonstration,

28
00:01:32,040 --> 00:01:34,640
which will show Globomantics how to use these tools

29
00:01:34,640 --> 00:01:36,840
to satisfy their requirements.

30
00:01:36,840 --> 00:01:38,800
CloudWatch events have been around for a while,

31
00:01:38,800 --> 00:01:41,840
and they essentially work in one of two ways.

32
00:01:41,840 --> 00:01:43,840
First of all, they can be event‑driven,

33
00:01:43,840 --> 00:01:46,350
so we can create a CloudWatch event that monitors for

34
00:01:46,350 --> 00:01:48,970
some form of operational change in AWS.

35
00:01:48,970 --> 00:01:52,610
We can then configure that event to inform a target to take action.

36
00:01:52,610 --> 00:01:57,610
An example of this would be application code being changed in code commit or S3,

37
00:01:57,610 --> 00:02:00,900
our CloudWatch event seeing that change,

38
00:02:00,900 --> 00:02:03,140
and then triggering code pipeline to run.

39
00:02:03,140 --> 00:02:06,030
We can also configure CloudWatch events to run a schedule.

40
00:02:06,030 --> 00:02:07,780
These schedules self trigger,

41
00:02:07,780 --> 00:02:10,800
either based on a cron expression or a rate expression.

42
00:02:10,800 --> 00:02:14,970
Using cron expressions, we can be very specific about the minute,

43
00:02:14,970 --> 00:02:19,140
hour, day, month, or year that we would like a particular event to run,

44
00:02:19,140 --> 00:02:21,060
including repeating that event on a schedule.

45
00:02:21,060 --> 00:02:26,100
With rate expressions, we create an event that runs when it is first created,

46
00:02:26,100 --> 00:02:29,040
and then based on that input, periodically after that.

47
00:02:29,040 --> 00:02:30,640
So with a rate expression,

48
00:02:30,640 --> 00:02:33,080
we can create an event that runs when it's created and

49
00:02:33,080 --> 00:02:35,040
then every 15 minutes after that.

50
00:02:35,040 --> 00:02:38,010
These schedule events will be great for Globomantics and their lambda

51
00:02:38,010 --> 00:02:41,440
function that they want to trigger based on a schedule.

52
00:02:41,440 --> 00:02:44,850
So which of these would be used by Globomantics to notify them

53
00:02:44,850 --> 00:02:46,660
when there's been a change in GuardDuty?

54
00:02:46,660 --> 00:02:49,140
Well, that would be an event‑driven event.

55
00:02:49,140 --> 00:02:51,810
An event‑driven event could see the change in GuardDuty,

56
00:02:51,810 --> 00:02:55,500
trigger an action, then informs Globomantics about that change.

57
00:02:55,500 --> 00:02:58,270
Amazon EventBridge builds on CloudWatch events.

58
00:02:58,270 --> 00:03:02,340
It supports both event‑driven and scheduled events,

59
00:03:02,340 --> 00:03:07,340
as well as allowing a greater level of integration with AWS services.

60
00:03:07,340 --> 00:03:10,260
We can also more easily integrate our own applications,

61
00:03:10,260 --> 00:03:13,040
as well as applications offered by third parties.

62
00:03:13,040 --> 00:03:15,670
Amazon EventBridge also offers a real‑time stream,

63
00:03:15,670 --> 00:03:19,730
delivering real‑time information from event sources to data targets.

64
00:03:19,730 --> 00:03:23,100
When working with CloudWatch events, we monitor for events.

65
00:03:23,100 --> 00:03:26,440
An event is a change in your AWS environment.

66
00:03:26,440 --> 00:03:30,620
So, for example, if you create an EBS snapshot, that would be an event.

67
00:03:30,620 --> 00:03:33,140
We can monitor that event and take action.

68
00:03:33,140 --> 00:03:35,110
If like you delete the snapshot,

69
00:03:35,110 --> 00:03:38,910
that also is an event that we can monitor for and take action against.

70
00:03:38,910 --> 00:03:43,300
Almost every action that involves invoking API in AWS can

71
00:03:43,300 --> 00:03:45,940
be registered as a CloudWatch event.

72
00:03:45,940 --> 00:03:49,090
Our job, then, is to create rules in CloudWatch.

73
00:03:49,090 --> 00:03:53,640
These rules match incoming events and routes them to a target.

74
00:03:53,640 --> 00:03:56,540
Typically, a target is another AWS service,

75
00:03:56,540 --> 00:03:59,690
but I want to react based on information from the event.

76
00:03:59,690 --> 00:04:02,160
Targets then process the event and perform whatever

77
00:04:02,160 --> 00:04:05,140
action the target was designed to do.

78
00:04:05,140 --> 00:04:07,740
Now, Amazon EventBridge is very similar.

79
00:04:07,740 --> 00:04:11,670
We have events, we have rules, and we have targets.

80
00:04:11,670 --> 00:04:16,640
But again, EventBridge builds upon what CloudWatch events can do.

81
00:04:16,640 --> 00:04:20,540
So EventBridge, for example, supports additional event buses.

82
00:04:20,540 --> 00:04:24,830
An event bus forms integration between CloudWatch events,

83
00:04:24,830 --> 00:04:28,610
or, in this case, Amazon EventBridge, and the source of those events.

84
00:04:28,610 --> 00:04:32,990
With CloudWatch events, we have a single event bus, the default event bus.

85
00:04:32,990 --> 00:04:36,410
With EventBridge, we have custom event buses available,

86
00:04:36,410 --> 00:04:38,640
too, provided by third parties,

87
00:04:38,640 --> 00:04:43,140
and event buses that allow us to integrate with your applications.

88
00:04:43,140 --> 00:04:46,840
Today there is already a community of AWS partners out there

89
00:04:46,840 --> 00:04:50,320
building event buses for EventBridge to integrate their

90
00:04:50,320 --> 00:04:52,940
applications into our event system.

91
00:04:52,940 --> 00:04:56,640
Here you have an example of event workflow using CloudWatch events.

92
00:04:56,640 --> 00:05:00,950
It's quite a basic workflow with a single default event bus and

93
00:05:00,950 --> 00:05:04,050
AWS services that can feed into that event bus.

94
00:05:04,050 --> 00:05:07,040
We then create rules to monitor for certain events,

95
00:05:07,040 --> 00:05:10,840
and when that event is seen, we pass that onto a target,

96
00:05:10,840 --> 00:05:13,130
which typically is another AWS service.

97
00:05:13,130 --> 00:05:16,540
Here we've got an event workflow, but this time with Amazon EventBridge.

98
00:05:16,540 --> 00:05:19,950
Notice here the different event buses, partner event buses,

99
00:05:19,950 --> 00:05:22,740
a default event bus, and customer event buses.

100
00:05:22,740 --> 00:05:26,020
So AWS services still report into the default event bus,

101
00:05:26,020 --> 00:05:29,440
but now you can build custom applications that could take advantage

102
00:05:29,440 --> 00:05:32,840
of the default event bus or a custom event bus.

103
00:05:32,840 --> 00:05:37,030
Notice as well the partner event buses allow an integration with

104
00:05:37,030 --> 00:05:39,540
different software‑as‑a‑service applications.

105
00:05:39,540 --> 00:05:41,990
The event buses interpret the events,

106
00:05:41,990 --> 00:05:45,020
which again are then picked up by rules that we've created.

107
00:05:45,020 --> 00:05:49,870
Once a rule picks up an event, it again sends that information to a target,

108
00:05:49,870 --> 00:05:53,540
which triggers an AWS service.

109
00:05:53,540 --> 00:05:57,820
The concept of events and event response in AWS is a very powerful thing.

110
00:05:57,820 --> 00:06:01,860
And there's plenty of use cases for CloudWatch events and EventBridge.

111
00:06:01,860 --> 00:06:07,580
So, for example, we can integrate AWS Config to CloudWatch events or EventBridge.

112
00:06:07,580 --> 00:06:10,840
So if there's a configuration change to one of our resources,

113
00:06:10,840 --> 00:06:13,140
we can all admit it saves us steps.

114
00:06:13,140 --> 00:06:14,900
They either just inform us about that change,

115
00:06:14,900 --> 00:06:19,860
or take remediation action, reverting the resource back to a previous state.

116
00:06:19,860 --> 00:06:23,590
We can collect application metrics and use these to scale your

117
00:06:23,590 --> 00:06:26,980
application's compute resources using events and EventBridge.

118
00:06:26,980 --> 00:06:29,740
And in this final example,

119
00:06:29,740 --> 00:06:33,660
we can see that we can use the details generated by an event to

120
00:06:33,660 --> 00:06:37,370
place messages in Kinesis Firehose where those messages can be

121
00:06:37,370 --> 00:06:45,000
transformed and processed and used by a wide variety of AWS services for analytics and reporting.

