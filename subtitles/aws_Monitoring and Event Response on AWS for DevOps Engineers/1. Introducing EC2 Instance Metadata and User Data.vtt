WEBVTT
1
00:00:02.940 --> 00:00:06.020
Hi there, and welcome to this Pluralsight course,

2
00:00:06.020 --> 00:00:10.640
Monitoring and Event Response on AWS for DevOps Engineers.

3
00:00:10.640 --> 00:00:13.280
My name's Mike Brown, and in this module we're going to be

4
00:00:13.280 --> 00:00:17.040
working with EC2 metadata and user data.

5
00:00:17.040 --> 00:00:20.330
We're going to begin this module with an introduction to EC2 instance

6
00:00:20.330 --> 00:00:24.270
metadata before going on to introduce EC2 user data.

7
00:00:24.270 --> 00:00:26.740
We'll then demonstrate working with metadata and

8
00:00:26.740 --> 00:00:29.440
user data through the AWS console.

9
00:00:29.440 --> 00:00:32.940
So let's begin with our metadata and user data introduction.

10
00:00:32.940 --> 00:00:35.940
Metadata is information about an instance.

11
00:00:35.940 --> 00:00:39.060
This includes everything from the instance ID to the AMI

12
00:00:39.060 --> 00:00:40.600
that was used to deploy the instance,

13
00:00:40.600 --> 00:00:43.790
essentially, most of its AWS configuration attributes.

14
00:00:43.790 --> 00:00:46.640
We can use this metadata to configure and manage running

15
00:00:46.640 --> 00:00:49.840
instances. So we can match things like deployments,

16
00:00:49.840 --> 00:00:55.040
maintenance, and security controls against the information we find in metadata.

17
00:00:55.040 --> 00:00:58.470
We can think of user data as being like a set of instructions.

18
00:00:58.470 --> 00:01:03.160
These instructions are used to customize an EC2 instance, usually during launch.

19
00:01:03.160 --> 00:01:06.260
User data might include instructions on roles,

20
00:01:06.260 --> 00:01:09.830
software packages or agents that need to be deployed during launch,

21
00:01:09.830 --> 00:01:12.600
or how different parts of our operating system or

22
00:01:12.600 --> 00:01:14.280
software packages need to be configured.

23
00:01:14.280 --> 00:01:18.010
We can then view this user data after launch and potentially reconfigure user

24
00:01:18.010 --> 00:01:21.640
data to provide additional instructions for our instances.

25
00:01:21.640 --> 00:01:22.030
So,

26
00:01:22.030 --> 00:01:25.240
examples of metadata include the IAM role that's

27
00:01:25.240 --> 00:01:27.340
associated with an EC2 instance.

28
00:01:27.340 --> 00:01:27.760
In fact,

29
00:01:27.760 --> 00:01:30.640
it's because this role information is part of metadata that

30
00:01:30.640 --> 00:01:34.250
applications that are running on our EC2 machines can assume those

31
00:01:34.250 --> 00:01:38.220
roles to perform actions in AWS. Metadata includes the public and

32
00:01:38.220 --> 00:01:40.150
private IP addresses used by the EC2 instance.

33
00:01:40.150 --> 00:01:42.260
The public IP address, in particular,

34
00:01:42.260 --> 00:01:45.150
wouldn't be available to the operating system or applications

35
00:01:45.150 --> 00:01:47.140
if it wasn't shared as part of metadata.

36
00:01:47.140 --> 00:01:49.640
We can also share the details of scheduled maintenance

37
00:01:49.640 --> 00:01:51.260
events through metadata as well.

38
00:01:51.260 --> 00:01:51.670
That way,

39
00:01:51.670 --> 00:01:54.210
our applications and operating systems know when

40
00:01:54.210 --> 00:01:55.880
these maintenance events will occur.

41
00:01:55.880 --> 00:01:57.850
Today there's two metadata versions,

42
00:01:57.850 --> 00:02:01.030
the Instance Metadata Service version 1 and the

43
00:02:01.030 --> 00:02:03.100
Instance Metadata Service version 2.

44
00:02:03.100 --> 00:02:07.390
Now, version 1 uses a basic request/response method that allows

45
00:02:07.390 --> 00:02:10.400
applications to run on the EC2 instance to retrieve the metadata.

46
00:02:10.400 --> 00:02:12.640
There's no authentication involved in this method,

47
00:02:12.640 --> 00:02:15.820
which means the metadata could be vulnerable if applications are

48
00:02:15.820 --> 00:02:18.480
misconfigured so that external actors could use the misconfigured

49
00:02:18.480 --> 00:02:20.790
application to retrieve the metadata.

50
00:02:20.790 --> 00:02:22.740
The version 2 Metadata Service uses a

51
00:02:22.740 --> 00:02:25.470
sessionâ€‘orientated method to access metadata.

52
00:02:25.470 --> 00:02:28.560
So the metadata service requests an access token.

53
00:02:28.560 --> 00:02:32.640
This access token is issued and will expire after a given period of time,

54
00:02:32.640 --> 00:02:35.670
essentially temporary access to the metadata service and the

55
00:02:35.670 --> 00:02:37.630
information it holds like role information.

56
00:02:37.630 --> 00:02:38.950
Once a token expires,

57
00:02:38.950 --> 00:02:42.810
a new token will have to be requested to access the metadata service again.

58
00:02:42.810 --> 00:02:46.210
So version 2 of the metadata service is considered more secure than version 1,

59
00:02:46.210 --> 00:02:48.120
and for our EC2 instances,

60
00:02:48.120 --> 00:02:50.470
it's up to us to decide which version of the metadata

61
00:02:50.470 --> 00:02:53.140
service we want those instances to use.

62
00:02:53.140 --> 00:02:56.140
One of the key components of the metadata service is

63
00:02:56.140 --> 00:02:58.540
it makes it easy to pass secure,

64
00:02:58.540 --> 00:03:02.010
often rotated credentials to applications, and a prime example

65
00:03:02.010 --> 00:03:05.040
of this is a role attached to an EC2 machine.

66
00:03:05.040 --> 00:03:09.340
We can make that role available to applications running on the EC2 machine.

67
00:03:09.340 --> 00:03:12.000
This means we don't have to embed credentials in the application itself,

68
00:03:12.000 --> 00:03:17.440
they can request access to the role when they need to perform an AWS action.

69
00:03:17.440 --> 00:03:21.140
When working with the Instance Metadata Service,

70
00:03:21.140 --> 00:03:23.740
consider disabling it if it's not required.

71
00:03:23.740 --> 00:03:25.700
So if you don't need your applications and operating

72
00:03:25.700 --> 00:03:28.010
system to have access to that data, turn it off.

73
00:03:28.010 --> 00:03:28.640
That way,

74
00:03:28.640 --> 00:03:31.680
there's no danger of our metadata being exposed if our EC2

75
00:03:31.680 --> 00:03:34.160
instances was infected with malicious code.

76
00:03:34.160 --> 00:03:37.020
If EC2 instances do not require a role, don't assign one,

77
00:03:37.020 --> 00:03:40.440
because once the role is assigned, if the metadata service is available,

78
00:03:40.440 --> 00:03:42.660
then applications on that instance can assume that

79
00:03:42.660 --> 00:03:44.540
role and use the role's actions.

80
00:03:44.540 --> 00:03:47.840
And if you are assigning roles for a metadata service to make available,

81
00:03:47.840 --> 00:03:50.140
then always use the principle of least privilege.

82
00:03:50.140 --> 00:03:53.260
Figure out what your applications running the EC2 instance need,

83
00:03:53.260 --> 00:03:57.400
and assign an EC2 role that gives the application the actions it needs,

84
00:03:57.400 --> 00:03:58.350
but nothing else.

85
00:03:58.350 --> 00:04:02.210
Finally, consider disabling version 1 of the Instance Metadata Service.

86
00:04:02.210 --> 00:04:05.000
Because it doesn't require any authentication from the applications

87
00:04:05.000 --> 00:04:07.710
themselves to access the metadata information,

88
00:04:07.710 --> 00:04:10.440
it does make it a bit more vulnerable than version 2.

89
00:04:10.440 --> 00:04:11.860
But, caution here,

90
00:04:11.860 --> 00:04:14.460
make sure that the applications that you're deploying can

91
00:04:14.460 --> 00:04:16.600
work with version 2 of the Metadata Service.

92
00:04:16.600 --> 00:04:20.320
Now, as we said, user data has a set of instructions for your EC2 instances.

93
00:04:20.320 --> 00:04:22.640
User data must be Base64 encoded,

94
00:04:22.640 --> 00:04:26.550
you can specify the user data at launch of the EC2 instance,

95
00:04:26.550 --> 00:04:27.530
and when it's deployed,

96
00:04:27.530 --> 00:04:30.670
you can see the user data either through the console or

97
00:04:30.670 --> 00:04:37.110
from inside the operating system, using the 169.254.169.254 IP address.

98
00:04:37.110 --> 00:04:40.240
Now, user data can be modified if you stop an instance,

99
00:04:40.240 --> 00:04:42.240
but it won't be automatically applied.

100
00:04:42.240 --> 00:04:44.560
You have to make change inside the operating system to make

101
00:04:44.560 --> 00:04:47.540
sure that user data is reapplied at reboot.

102
00:04:47.540 --> 00:04:49.440
Here's an example of Linux user data.

103
00:04:49.440 --> 00:04:52.310
This is a bash script that deploys the Apache web server at

104
00:04:52.310 --> 00:04:54.640
launch and makes sure the web server is started.

105
00:04:54.640 --> 00:04:57.740
A second example here, this time with PowerShell,

106
00:04:57.740 --> 00:05:01.550
deploying the IIS web server and its management tools.

107
00:05:01.550 --> 00:05:06.440
And finally, in this third example, we're applying user data using the CLI.

108
00:05:06.440 --> 00:05:10.640
So here we'll launch an EC2 instance, and notice the user data section

109
00:05:10.640 --> 00:05:13.840
identifies a script that will contain our user data.

110
00:05:13.840 --> 00:05:21.000
So now we've got an idea of what metadata and user data is, let's jump into a demonstration where we can show you both.

