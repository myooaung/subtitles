WEBVTT
1
00:00:02.040 --> 00:00:05.310
Hi there, and welcome this module in our Pluralsight course,

2
00:00:05.310 --> 00:00:09.040
Monitoring and Event Response on AWS for DevOps Engineers.

3
00:00:09.040 --> 00:00:09.840
My name's Mike Brown.

4
00:00:09.840 --> 00:00:11.190
In this module,

5
00:00:11.190 --> 00:00:16.780
we're going to work with tags in AWS. In this module, we're going to

6
00:00:16.780 --> 00:00:22.210
begin by discussing why tagging AWS resources is important. We're going

7
00:00:22.210 --> 00:00:26.330
to discuss use cases for tags in AWS. We're then going to work with AWS

8
00:00:26.330 --> 00:00:30.040
tags for resource organization, software deployment,

9
00:00:30.040 --> 00:00:32.740
and EC2 instance management.

10
00:00:32.740 --> 00:00:37.740
So let's begin by introducing AWS tagging. Starting with the basics,

11
00:00:37.740 --> 00:00:41.290
you might want to think about tag as being like a label, a piece of

12
00:00:41.290 --> 00:00:44.360
metadata that you assign to a resource. Each tag that you create

13
00:00:44.360 --> 00:00:46.790
consists of a key and optional value.

14
00:00:46.790 --> 00:00:48.570
So for EC2, for example,

15
00:00:48.570 --> 00:00:51.960
you might create a tag with a key of server name on a

16
00:00:51.960 --> 00:00:55.040
value of server1, a key‑value pair.

17
00:00:55.040 --> 00:00:58.840
Tags allow you to categorize your AWS resources in different ways.

18
00:00:58.840 --> 00:01:01.840
You might want to use tags for different departments,

19
00:01:01.840 --> 00:01:04.740
different projects, different cost centers.

20
00:01:04.740 --> 00:01:08.640
There's a myriad of different ways that we can use tags inside AWS.

21
00:01:08.640 --> 00:01:10.770
One of the things we can do with tags is search against

22
00:01:10.770 --> 00:01:13.040
tags and filter a list of resources.

23
00:01:13.040 --> 00:01:16.740
So if you want to work with all resources of project X,

24
00:01:16.740 --> 00:01:21.740
you can search for the project text tag and then apply policies, apply

25
00:01:21.740 --> 00:01:27.290
controls, apply software updates to just those sets of resources. Resources

26
00:01:27.290 --> 00:01:30.350
in AWS can have up to 50 tags. But for each resource,

27
00:01:30.350 --> 00:01:33.140
each tag must be unique.

28
00:01:33.140 --> 00:01:35.750
Our customer, Globomantics, has some requirements for us.

29
00:01:35.750 --> 00:01:36.700
Firstly,

30
00:01:36.700 --> 00:01:39.230
they want to organize their monthly bills based around the

31
00:01:39.230 --> 00:01:41.740
different cost centers in Globomantics.

32
00:01:41.740 --> 00:01:45.980
That way they know what each department is spending in AWS and can match

33
00:01:45.980 --> 00:01:49.940
each department's AWS spend to that department's budget.

34
00:01:49.940 --> 00:01:50.370
Also,

35
00:01:50.370 --> 00:01:53.470
the Globomantics DevOps teams will be using CI/CD

36
00:01:53.470 --> 00:01:56.800
pipelines to deploy their application code,

37
00:01:56.800 --> 00:02:00.590
and they need to be able to identify the correct compute resources for each

38
00:02:00.590 --> 00:02:04.420
code deployment. Globomantics also has a requirement to restrict access to

39
00:02:04.420 --> 00:02:08.620
resources based on custom values that can be assigned when the resources are

40
00:02:08.620 --> 00:02:13.450
launched. AWS tags can help Globomantics with each of these requirements.

41
00:02:13.450 --> 00:02:18.270
Firstly, we'll advise Globomantics to enable cost allocation tags. Once cost

42
00:02:18.270 --> 00:02:20.140
allocation tags have been enabled,

43
00:02:20.140 --> 00:02:23.540
AWS tracks costs at a very detailed level so that you can use

44
00:02:23.540 --> 00:02:26.760
Cost Explorer to view all the costs incurred by a particular tag.

45
00:02:26.760 --> 00:02:30.900
For Globomantics' automation requirements, we can configure tags

46
00:02:30.900 --> 00:02:32.430
on each compute resource.

47
00:02:32.430 --> 00:02:35.540
So one set of EC2 machines can be tagged in such a way

48
00:02:35.540 --> 00:02:38.380
that they will get application one and updates application

49
00:02:38.380 --> 00:02:39.570
one when they're rolled out,

50
00:02:39.570 --> 00:02:42.940
while another set of EC2 machines will be tagged in such a way

51
00:02:42.940 --> 00:02:45.140
that they will only get application two.

52
00:02:45.140 --> 00:02:45.880
Finally,

53
00:02:45.880 --> 00:02:48.690
Globomantics can use tags for access control. We can

54
00:02:48.690 --> 00:02:51.660
constrain access to AWS resources based on tags.

55
00:02:51.660 --> 00:02:56.040
So, for example, a database administrator can be given actions in RDS,

56
00:02:56.040 --> 00:03:00.240
but only to a specific set of RDS instances based on tags.

57
00:03:00.240 --> 00:03:03.340
So most AWS services take advantage of tagging.

58
00:03:03.340 --> 00:03:04.900
Systems Manager, for example,

59
00:03:04.900 --> 00:03:07.500
can use tags to group resources into resource groups.

60
00:03:07.500 --> 00:03:09.830
And once resources are grouped into resource groups,

61
00:03:09.830 --> 00:03:13.650
we can target administrative activity against that resource group. Amazon

62
00:03:13.650 --> 00:03:18.150
Inspector uses tags to identify a group of EC2 resources that it will then

63
00:03:18.150 --> 00:03:22.570
run its security checks against. Identity Access Management can use tags as

64
00:03:22.570 --> 00:03:27.090
part of resource‑based access control and attribute‑based access control.

65
00:03:27.090 --> 00:03:32.420
And CodeDeploy can use tags to identify groups of instances to which it will

66
00:03:32.420 --> 00:03:36.450
deploy code. We have Cost Explorer that can break down our bills based on

67
00:03:36.450 --> 00:03:42.520
tags and EC2 that can use tags for things like monitoring and access control.

68
00:03:42.520 --> 00:03:45.800
So these are just some of the services that can use tags inside AWS.

69
00:03:45.800 --> 00:03:47.320
Now, when working with tagging,

70
00:03:47.320 --> 00:03:50.690
we might have to adopt reactive governance. With reactive governance, we

71
00:03:50.690 --> 00:03:54.200
are looking for resources that are not properly tagged and either tagging

72
00:03:54.200 --> 00:03:56.500
them manually or tagging them automatically.

73
00:03:56.500 --> 00:03:59.690
And if your organization hasn't been using tagging up until this point,

74
00:03:59.690 --> 00:04:02.480
you'll have to go through a process of reactive governance so that

75
00:04:02.480 --> 00:04:06.840
all of your resources have a consistent set of tags. Ideally,

76
00:04:06.840 --> 00:04:08.690
we'll then adopt proactive governance.

77
00:04:08.690 --> 00:04:11.650
This ensures that tags are standardized across resources that you

78
00:04:11.650 --> 00:04:17.260
create. How might your organization used tags in AWS? It's definitely

79
00:04:17.260 --> 00:04:19.040
a question that's worth thinking about.

80
00:04:19.040 --> 00:04:20.430
Do you use tagging now?

81
00:04:20.430 --> 00:04:23.840
Will you use tagging in the future I would probably guess that

82
00:04:23.840 --> 00:04:31.000
for organizations that have DevOps teams, tagging will be one of the main ways that you identify resources.

