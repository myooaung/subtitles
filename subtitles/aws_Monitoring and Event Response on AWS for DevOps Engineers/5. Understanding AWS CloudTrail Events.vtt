WEBVTT
1
00:00:01.940 --> 00:00:05.140
So really powerful features, those alarms and metrics,

2
00:00:05.140 --> 00:00:07.630
not to mention the logging information from EC2.

3
00:00:07.630 --> 00:00:10.230
But let's change focus for a couple minutes and have a

4
00:00:10.230 --> 00:00:13.240
chat about AWS CloudTrail events.

5
00:00:13.240 --> 00:00:16.740
Module 3 of this course looked at how to integrate CloudTrail with CloudWatch.

6
00:00:16.740 --> 00:00:20.840
In this section, we want to talk a little bit more about CloudWatch Events.

7
00:00:20.840 --> 00:00:23.120
One set of events are API events.

8
00:00:23.120 --> 00:00:26.120
These events are generated by calls to public APIs.

9
00:00:26.120 --> 00:00:28.940
So any time you perform an administrative action,

10
00:00:28.940 --> 00:00:31.120
that registers as an API event.

11
00:00:31.120 --> 00:00:33.000
We've got console sign‑in events.

12
00:00:33.000 --> 00:00:37.710
Console sign events will register any attempt to sign in to the AWS console.

13
00:00:37.710 --> 00:00:40.430
Typically, if you're trying to sign in programmatically,

14
00:00:40.430 --> 00:00:42.630
that'll be registered as an API event.

15
00:00:42.630 --> 00:00:44.540
Console events are a separate category.

16
00:00:44.540 --> 00:00:46.440
We also have service events.

17
00:00:46.440 --> 00:00:50.460
These are events that are not necessarily generated by you or your admin teams.

18
00:00:50.460 --> 00:00:53.210
Instead, they're generated by an AWS service.

19
00:00:53.210 --> 00:00:56.250
So an example of this might be the rotation of KMS key.

20
00:00:56.250 --> 00:00:58.660
KMS key rotation can happen automatically,

21
00:00:58.660 --> 00:01:01.040
and it's an AWS service that triggers that,

22
00:01:01.040 --> 00:01:01.960
not you.

23
00:01:01.960 --> 00:01:06.770
Now when a CloudTrail event is triggered, the events will include an event ID.

24
00:01:06.770 --> 00:01:09.220
Event IDs are typically unique to each event,

25
00:01:09.220 --> 00:01:13.850
but sometimes events will share event IDs. So using KMS as an example,

26
00:01:13.850 --> 00:01:17.810
if I was to create a KMS key, that would generate an event.

27
00:01:17.810 --> 00:01:19.840
As part of my key creation,

28
00:01:19.840 --> 00:01:24.040
if I was to give a colleague in a different AWS account access that key,

29
00:01:24.040 --> 00:01:25.940
that's a second event.

30
00:01:25.940 --> 00:01:28.440
But because they were generated by the same action,

31
00:01:28.440 --> 00:01:31.980
me creating a KMS key, they would share an event ID.

32
00:01:31.980 --> 00:01:35.050
This makes it easy for me to search for a single event ID,

33
00:01:35.050 --> 00:01:37.720
but then see a whole group of actions that were taken

34
00:01:37.720 --> 00:01:39.940
as part of one administrative event.

35
00:01:39.940 --> 00:01:42.240
Whenever a CloudTrail event is registered,

36
00:01:42.240 --> 00:01:44.740
each event will have a user identity field.

37
00:01:44.740 --> 00:01:49.380
This field identifies the entity that was responsible for triggering that event.

38
00:01:49.380 --> 00:01:53.460
This could be a user, a role, or an AWS service.

39
00:01:53.460 --> 00:01:55.620
We can interact with CloudTrail Events through the

40
00:01:55.620 --> 00:01:58.410
CloudTrail dashboard CloudWatch or S3.

41
00:01:58.410 --> 00:02:03.340
Through the CloudTrail Dashboard, we can see 90 days of event activity,

42
00:02:03.340 --> 00:02:06.160
and we can search through and download those events.

43
00:02:06.160 --> 00:02:07.650
By using CloudWatch,

44
00:02:07.650 --> 00:02:11.980
we can configure CloudWatch events or use EventBridge to

45
00:02:11.980 --> 00:02:14.540
trigger a target when we see a specific event.

46
00:02:14.540 --> 00:02:17.790
We can also interact with CloudTrail Events through the use alarms,

47
00:02:17.790 --> 00:02:21.840
metrics, logs, and log insights.

48
00:02:21.840 --> 00:02:25.390
When we configure a CloudTrail to record different types of CloudTrail events,

49
00:02:25.390 --> 00:02:28.570
we can log all that event activity into S3.

50
00:02:28.570 --> 00:02:32.740
S3 provides long‑term archival at scale.

51
00:02:32.740 --> 00:02:34.550
It also supports searching through CloudTrail

52
00:02:34.550 --> 00:02:38.540
Events with features like S3 Select, Amazon Athena,

53
00:02:38.540 --> 00:02:41.940
or third‑party tools that integrate with S3.

54
00:02:41.940 --> 00:02:44.540
Now Globomantics has some requirements for us here.

55
00:02:44.540 --> 00:02:47.760
Globomantics wants to be alerted whenever the AWS root account is use.

56
00:02:47.760 --> 00:02:52.230
They want to be alerted when their EC2 instances are running low on disk space.

57
00:02:52.230 --> 00:02:54.660
They would like to be alerted when KMS keys are created or

58
00:02:54.660 --> 00:02:57.930
deleted. And they would like to be alerted when their deployed

59
00:02:57.930 --> 00:03:01.840
web application is generating 404 errors.

60
00:03:01.840 --> 00:03:04.110
Which of these can CloudTrail help with?

61
00:03:04.110 --> 00:03:07.810
Take a minute, pause the video if you need, and jot down the requirements

62
00:03:07.810 --> 00:03:10.980
that you think CloudTrail can help Globomantics with. Well,

63
00:03:10.980 --> 00:03:15.190
definitely, the use of the root user account and the creation and

64
00:03:15.190 --> 00:03:18.340
deletion of KMS keys, CloudTrail can alert us to.

65
00:03:18.340 --> 00:03:21.370
Each of these actions will generate a CloudTrail event that we can

66
00:03:21.370 --> 00:03:26.590
pick up through the CloudTrail console, CloudWatch, or S3. As for

67
00:03:26.590 --> 00:03:29.360
the disk space and the 404 errors,

68
00:03:29.360 --> 00:03:33.520
well, both of these can be seen if you integrate your EC2 operating

69
00:03:33.520 --> 00:03:36.640
system metrics and its logging with CloudWatch.

70
00:03:36.640 --> 00:03:40.140
But neither of these would generate a CloudTrail event.

71
00:03:40.140 --> 00:03:49.000
Now we've chatted a bit about CloudTrail events, let's jump into a demonstration where we'll look at CloudTrail events and log querying.

