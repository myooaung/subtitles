1
00:00:01,240 --> 00:00:06,190
[Autogenerated] Hi, This is Craig Golightly and welcome to using I am users,

2
00:00:06,190 --> 00:00:11,040
groups, policies and rolls.

3
00:00:11,040 --> 00:00:14,450
We're going to start out talking about I am identities.

4
00:00:14,450 --> 00:00:15,430
Specifically,

5
00:00:15,430 --> 00:00:22,160
I am users and how to create and manage those users with I am groups will also

6
00:00:22,160 --> 00:00:26,330
cover the different types and use cases for I am policies.

7
00:00:26,330 --> 00:00:28,240
And I am Rolls.

8
00:00:28,240 --> 00:00:32,480
I am is a big topic, so you'll definitely be seeing more of it.

9
00:00:32,480 --> 00:00:36,100
This module will give you a solid understanding of these core pieces

10
00:00:36,100 --> 00:00:40,140
of I am that you can build on in future modules.

11
00:00:40,140 --> 00:00:42,820
You have a couple of different options for identities.

12
00:00:42,820 --> 00:00:46,960
In a WS you can define an I am username code,

13
00:00:46,960 --> 00:00:50,860
be tied to a person or application with access to

14
00:00:50,860 --> 00:00:54,120
certain resource is in an AWS account.

15
00:00:54,120 --> 00:00:58,200
You can also leverage existing users Federated from a company

16
00:00:58,200 --> 00:01:01,700
directory or other identity providers like Amazon,

17
00:01:01,700 --> 00:01:03,340
Facebook and Google.

18
00:01:03,340 --> 00:01:05,930
We'll cover federation more when we talk about the

19
00:01:05,930 --> 00:01:08,260
Amazon Cognito service later on.

20
00:01:08,260 --> 00:01:12,700
In this course, when you create an I am username,

21
00:01:12,700 --> 00:01:16,560
decide what credentials you want to allow for that user.

22
00:01:16,560 --> 00:01:21,440
You can allow a username and password for console access as well

23
00:01:21,440 --> 00:01:25,340
as A W s access keys for programmatic calls.

24
00:01:25,340 --> 00:01:28,840
You can also configure an M F A device for the user or

25
00:01:28,840 --> 00:01:32,040
require them to set one up when they log in.

26
00:01:32,040 --> 00:01:34,100
As an I am user administrator,

27
00:01:34,100 --> 00:01:37,950
you can disable or reset passwords as well as generate,

28
00:01:37,950 --> 00:01:41,400
deactivate or delete A W S access keys.

29
00:01:41,400 --> 00:01:45,830
These tools can help you manage user access as your organization changes.

30
00:01:45,830 --> 00:01:49,840
Or if a user account is compromised in AWS,

31
00:01:49,840 --> 00:01:53,040
you'll define permissions using policies.

32
00:01:53,040 --> 00:01:56,200
Each policy has four components principle,

33
00:01:56,200 --> 00:01:59,340
which is the entity that is allowed or denied access.

34
00:01:59,340 --> 00:02:01,460
Usually and I am username.

35
00:02:01,460 --> 00:02:07,830
I am roll action, which is the type of access that is allowed or denied resource,

36
00:02:07,830 --> 00:02:09,610
which is the Amazon resource.

37
00:02:09,610 --> 00:02:12,440
The action will act on and condition,

38
00:02:12,440 --> 00:02:16,440
which defines the conditions under which the access to find is valid.

39
00:02:16,440 --> 00:02:20,290
When you first create an AWS account, you have one user.

40
00:02:20,290 --> 00:02:24,460
The root user who is allowed to do all actions on all

41
00:02:24,460 --> 00:02:26,990
resource is under any condition.

42
00:02:26,990 --> 00:02:30,570
This is why you do not want to use the root user for anything

43
00:02:30,570 --> 00:02:32,790
more than the initial set up of the account,

44
00:02:32,790 --> 00:02:37,440
or the few tasks that can only be done by the root user.

45
00:02:37,440 --> 00:02:40,030
Policies are easy to create and use,

46
00:02:40,030 --> 00:02:43,880
and they provide a very granular way to define user access in your

47
00:02:43,880 --> 00:02:48,820
AWS account with over 175 services and growing.

48
00:02:48,820 --> 00:02:53,900
Giving every user full access to all services is rarely necessary

49
00:02:53,900 --> 00:02:56,940
and is not a recommended way to manage your users.

50
00:02:56,940 --> 00:03:01,720
At the very least, you should determine which services a user actually needs,

51
00:03:01,720 --> 00:03:06,040
then create a policy to only grant them access to those services.

52
00:03:06,040 --> 00:03:08,740
You can take it a step further and grant only the

53
00:03:08,740 --> 00:03:10,910
operations they need to do their job.

54
00:03:10,910 --> 00:03:16,750
In that service, for example, a users may need read only access to an S3 bucket.

55
00:03:16,750 --> 00:03:20,180
Or you may only want to allow certain users to delete E.

56
00:03:20,180 --> 00:03:20,370
C.

57
00:03:20,370 --> 00:03:21,940
Two instances.

58
00:03:21,940 --> 00:03:25,480
We'll cover more detailed policy configurations in the designing

59
00:03:25,480 --> 00:03:28,740
for advanced security within a W S course.

60
00:03:28,740 --> 00:03:31,300
But policies don't have to be complicated,

61
00:03:31,300 --> 00:03:34,420
and we're going to use them from the beginning so you can avoid the

62
00:03:34,420 --> 00:03:38,040
pitfalls of making every user and administrator.

63
00:03:38,040 --> 00:03:41,530
AWS starts with deny for all actions.

64
00:03:41,530 --> 00:03:42,600
By default,

65
00:03:42,600 --> 00:03:49,340
there must be an allow present and no specific deny when it evaluates a request.

66
00:03:49,340 --> 00:03:52,890
Everything in a request must match up with a policy

67
00:03:52,890 --> 00:03:54,750
in order for it to be allowed.

68
00:03:54,750 --> 00:03:57,470
If something isn't working like you expect it to,

69
00:03:57,470 --> 00:04:00,030
then one of the conditions is not matching.

70
00:04:00,030 --> 00:04:02,950
Between the request and the defined policies.

71
00:04:02,950 --> 00:04:05,490
Look at the principal making the request,

72
00:04:05,490 --> 00:04:07,660
the action being requested,

73
00:04:07,660 --> 00:04:11,370
the resource the request wants to act on and all of the

74
00:04:11,370 --> 00:04:13,780
conditions which can include things like I,

75
00:04:13,780 --> 00:04:17,060
P address, time of day and many other items.

76
00:04:17,060 --> 00:04:19,500
We'll get into all of the different policy types and how

77
00:04:19,500 --> 00:04:21,680
they interact with each other later on.

78
00:04:21,680 --> 00:04:24,960
But these basic policy mechanics can help you evaluate

79
00:04:24,960 --> 00:04:29,490
scenarios that involve I am permissions in a W.

80
00:04:29,490 --> 00:04:29,820
S.

81
00:04:29,820 --> 00:04:34,540
You can have resource based policies and identity based policies.

82
00:04:34,540 --> 00:04:38,140
Let's first look at identity based policies.

83
00:04:38,140 --> 00:04:41,980
AWS has several managed policies that cover the most

84
00:04:41,980 --> 00:04:44,200
common use cases for your account.

85
00:04:44,200 --> 00:04:47,620
These error automatically updated and maintained by AWS

86
00:04:47,620 --> 00:04:50,050
without you having to make changes.

87
00:04:50,050 --> 00:04:53,390
You can also create a customer managed policy.

88
00:04:53,390 --> 00:04:56,630
If you need some specific customize ations that you

89
00:04:56,630 --> 00:04:59,540
can't find in an AWS managed policy,

90
00:04:59,540 --> 00:05:03,340
you can use a similar AWS managed policy as a starting point,

91
00:05:03,340 --> 00:05:06,040
then edit it for your specific needs.

92
00:05:06,040 --> 00:05:09,190
Using managed policies makes maintenance easier,

93
00:05:09,190 --> 00:05:12,880
since the policies could be attached to multiple principal entities

94
00:05:12,880 --> 00:05:16,160
and they centralize your I am policy management.

95
00:05:16,160 --> 00:05:20,310
I am also stores up to five versions of your customer managed

96
00:05:20,310 --> 00:05:24,060
policies to help you manage policy changes in the event you

97
00:05:24,060 --> 00:05:26,340
need to roll back a policy change.

98
00:05:26,340 --> 00:05:31,540
A W S recommends that you use managed policies for most scenarios.

99
00:05:31,540 --> 00:05:35,680
The other type of identity based policy is an in line policy.

100
00:05:35,680 --> 00:05:40,320
These error embedded directly in an entity and have a 1 to 1 relationship.

101
00:05:40,320 --> 00:05:43,640
The policy only exists within the entity,

102
00:05:43,640 --> 00:05:48,700
so when you delete the entity, any in line policies are also deleted.

103
00:05:48,700 --> 00:05:49,080
In line.

104
00:05:49,080 --> 00:05:52,970
Policies could be used to ensure that the policy defined is assigned

105
00:05:52,970 --> 00:05:56,710
only to the specific user where you define the policy.

106
00:05:56,710 --> 00:05:58,200
But for most cases,

107
00:05:58,200 --> 00:06:02,060
you should be using managed policies while you can

108
00:06:02,060 --> 00:06:04,800
attach policies directly to users.

109
00:06:04,800 --> 00:06:10,940
An easier way to manage user access is to attach policies to I am groups,

110
00:06:10,940 --> 00:06:13,540
then add users to those groups.

111
00:06:13,540 --> 00:06:18,170
The group policy will automatically be applied to any users in the group.

112
00:06:18,170 --> 00:06:21,340
This allows easier movement of users from group to group.

113
00:06:21,340 --> 00:06:26,140
As the rules change, and as you expand your use of AWS,

114
00:06:26,140 --> 00:06:27,070
for example,

115
00:06:27,070 --> 00:06:31,740
you could have an administrator's group that have full access to the account,

116
00:06:31,740 --> 00:06:34,890
then the developers group with a different set of permissions.

117
00:06:34,890 --> 00:06:38,150
Many organizations also have a billing group to limit

118
00:06:38,150 --> 00:06:41,040
access to account and payment information.

119
00:06:41,040 --> 00:06:45,620
You can set up whatever groups you need based on your organization and rolls.

120
00:06:45,620 --> 00:06:55,000
Just keep in mind that you can only ad and I am username a maximum of 10 groups. That's an AWS limit and cannot be increased.

