WEBVTT
1
00:00:01.000 --> 00:00:01.550
[Autogenerated] Amazon.

2
00:00:01.550 --> 00:00:06.640
Easy to isn't the only service to offer reserved instances.

3
00:00:06.640 --> 00:00:09.740
Amazon RDS, Red Shift,

4
00:00:09.740 --> 00:00:14.470
Alaska cache and dynamodb also have reservation models you can

5
00:00:14.470 --> 00:00:18.290
take advantage of to get a lower overall rate when using the

6
00:00:18.290 --> 00:00:21.040
service for an extended period of time.

7
00:00:21.040 --> 00:00:24.710
Let's look at a few examples for using reserved instances so

8
00:00:24.710 --> 00:00:27.330
you can get an idea of how it works and when.

9
00:00:27.330 --> 00:00:30.000
It may make sense for you.

10
00:00:30.000 --> 00:00:32.480
Suppose you had an M five large E.

11
00:00:32.480 --> 00:00:32.650
C.

12
00:00:32.650 --> 00:00:36.240
Two instance in the US East, One region.

13
00:00:36.240 --> 00:00:39.350
If you ran that instance for three years on demand,

14
00:00:39.350 --> 00:00:44.340
it would cost you about $2500 at 9.6 cents an hour.

15
00:00:44.340 --> 00:00:47.370
If you purchased the most flexible, reserved instance,

16
00:00:47.370 --> 00:00:52.180
a one year convertible with no upfront each year for three years you would

17
00:00:52.180 --> 00:00:57.940
spend almost $1900 which works out to be 7.1 cents an hour.

18
00:00:57.940 --> 00:01:02.170
If you purchased a three year standard, all upfront reserved instance,

19
00:01:02.170 --> 00:01:08.140
you would pay $986 which is like paying 3.7 cents an hour.

20
00:01:08.140 --> 00:01:12.830
In other words, if you ran an on demand instances for about 14 months,

21
00:01:12.830 --> 00:01:16.810
you've spent the same amount that it would cost for a three year standard.

22
00:01:16.810 --> 00:01:19.540
All upfront reserved instance.

23
00:01:19.540 --> 00:01:22.360
Many times people are concerned if they're going to be using an

24
00:01:22.360 --> 00:01:25.350
instance for three years in this example,

25
00:01:25.350 --> 00:01:28.390
as long as you use it for at least 14 months.

26
00:01:28.390 --> 00:01:30.800
It's the same price as on demand,

27
00:01:30.800 --> 00:01:35.140
with the advantage that your next 22 months are free.

28
00:01:35.140 --> 00:01:39.760
If we look at the prices for a RDS running my SQL on a DB M

29
00:01:39.760 --> 00:01:42.720
five large in the US East one region,

30
00:01:42.720 --> 00:01:47.590
it's a very similar pattern to the to instance we looked at with RDS.

31
00:01:47.590 --> 00:01:49.440
There are no convertible options,

32
00:01:49.440 --> 00:01:54.460
so we're comparing three years on demand with 31

33
00:01:54.460 --> 00:01:57.440
year terms with no upfront payment.

34
00:01:57.440 --> 00:02:00.930
With 13 year standard all up front,

35
00:02:00.930 --> 00:02:03.970
the three year all up front ends up costing what running an

36
00:02:03.970 --> 00:02:06.850
on demand for 14.5 months would cost.

37
00:02:06.850 --> 00:02:11.290
So again, if you run it on demand for about 14.5 months,

38
00:02:11.290 --> 00:02:14.930
you've paid for a three year all upfront reserved instance.

39
00:02:14.930 --> 00:02:16.750
But with the reserved instance,

40
00:02:16.750 --> 00:02:20.740
then your next 21 a half months would essentially be free.

41
00:02:20.740 --> 00:02:23.600
You can get more detailed pricing information for all of the

42
00:02:23.600 --> 00:02:27.940
different RDS offerings in the AWS documentation.

43
00:02:27.940 --> 00:02:33.140
Red Shift has the same options as RDS as far as one or three year term,

44
00:02:33.140 --> 00:02:38.090
with no partial or all upfront payment for this instantiate iPad

45
00:02:38.090 --> 00:02:42.540
and region on demand is 25 cents per hour.

46
00:02:42.540 --> 00:02:48.640
The one year no upfront saves you 20% dropping it to 20 cents an hour.

47
00:02:48.640 --> 00:02:55.100
Well, the three year all upfront saves you 62% at 9.4 cents an hour.

48
00:02:55.100 --> 00:03:00.150
In other words, if you run an on demand instances for about 13.5 months,

49
00:03:00.150 --> 00:03:05.340
then you've spent the same amount as a three year all upfront reserved instance.

50
00:03:05.340 --> 00:03:09.030
Check out the AWS documentation for information on all of the

51
00:03:09.030 --> 00:03:13.070
red shift instantiate types for Alaska cache.

52
00:03:13.070 --> 00:03:17.540
You can specify reserved cache nodes and create a one or three year

53
00:03:17.540 --> 00:03:21.940
reserved agreement with no partial or all upfront payment.

54
00:03:21.940 --> 00:03:27.040
For this example, the on demand is 15.6 cents per hour.

55
00:03:27.040 --> 00:03:32.240
The one year no upfront saves you 32% at 10.6 cents an hour,

56
00:03:32.240 --> 00:03:36.300
while the three year all upfront saves you 55% at

57
00:03:36.300 --> 00:03:38.600
seven cents an hour In this case,

58
00:03:38.600 --> 00:03:42.430
if you run an on demand instantiate little over 16 months,

59
00:03:42.430 --> 00:03:45.000
then you spent the same amount as a three year.

60
00:03:45.000 --> 00:03:47.780
All upfront, reserved instance.

61
00:03:47.780 --> 00:03:50.880
See the AWS documentation for more information on

62
00:03:50.880 --> 00:03:54.790
reserved cache Node.js sing with dynamodb,

63
00:03:54.790 --> 00:03:57.260
you can choose from on demand.

64
00:03:57.260 --> 00:04:02.330
Provisioned or reserved capacity on demand will automatically adjust

65
00:04:02.330 --> 00:04:05.930
capacity based on your workloads as they go up or down,

66
00:04:05.930 --> 00:04:10.780
and you are charged per million reads or writes as there used.

67
00:04:10.780 --> 00:04:14.490
There's no reservation model available for on demand capacity.

68
00:04:14.490 --> 00:04:16.940
You're just charged for actual use.

69
00:04:16.940 --> 00:04:21.700
This is a good fit for workloads that very quite a bit and are hard to predict,

70
00:04:21.700 --> 00:04:25.950
as well as low volume workloads with provisioned capacity.

71
00:04:25.950 --> 00:04:29.070
You'll specify the number of reads and writes per second

72
00:04:29.070 --> 00:04:32.060
that you expect your application to require You are then

73
00:04:32.060 --> 00:04:35.000
charged per capacity unit per hour.

74
00:04:35.000 --> 00:04:38.180
If you're provisioned, capacity adjusts up or down,

75
00:04:38.180 --> 00:04:42.240
then the number of capacity units you are charged for goes up or down.

76
00:04:42.240 --> 00:04:46.230
You usually have to over provisioned capacity to avoid throttling,

77
00:04:46.230 --> 00:04:47.670
so there is some waste.

78
00:04:47.670 --> 00:04:51.140
If your workload varies a lot during a short period of time,

79
00:04:51.140 --> 00:04:53.790
provisioned is a good fit for workloads that error

80
00:04:53.790 --> 00:04:56.860
predictable but may only last part of the day,

81
00:04:56.860 --> 00:05:01.940
so you can scale capacity down during those slow times and not pay as much.

82
00:05:01.940 --> 00:05:06.120
Reserve capacity works in conjunction with provisioned capacity.

83
00:05:06.120 --> 00:05:08.910
You can reserve right capacity units and read

84
00:05:08.910 --> 00:05:12.440
capacity units in blocks of 100 units.

85
00:05:12.440 --> 00:05:17.130
You pay an upfront fee based on a one year or three year term than an hourly

86
00:05:17.130 --> 00:05:20.560
rate that is lower than the provisioned capacity rate.

87
00:05:20.560 --> 00:05:25.280
Any reads or writes performed will be charged at the reserved rate first

88
00:05:25.280 --> 00:05:29.020
than any provisioned capacity beyond what you have reserved will be

89
00:05:29.020 --> 00:05:32.440
charged at the standard provisioned capacity rate.

90
00:05:32.440 --> 00:05:34.040
Like other reserved models,

91
00:05:34.040 --> 00:05:36.930
you'll pay for the capacity for the length of the term,

92
00:05:36.930 --> 00:05:38.580
whether you use it or not,

93
00:05:38.580 --> 00:05:41.060
so you would only want to reserve what is going to

94
00:05:41.060 --> 00:05:43.440
get utilized most of the time.

95
00:05:43.440 --> 00:05:46.130
Reserve capacity is a good fit for predictable

96
00:05:46.130 --> 00:05:49.140
workloads that have some constant activity.

97
00:05:49.140 --> 00:05:52.550
As a general guideline, you can start out with on demand.

98
00:05:52.550 --> 00:06:02.000
Then, if you see predictable patterns switched to provisioned, then add reserved capacity only for those loads that error fairly consistent

