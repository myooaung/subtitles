WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.370 --> 00:00:04.934
React is a front-end view library,

00:00:04.934 --> 00:00:07.875
therefore we need some data to work with.

00:00:07.875 --> 00:00:14.190
Later on, we'll be focusing on using Firebase as our backend to save unretrieved data.

00:00:14.190 --> 00:00:18.495
Both at the moment, I'm going to be using some sample data to work with.

00:00:18.495 --> 00:00:21.300
I have provided some sample data,

00:00:21.300 --> 00:00:24.045
which you can download and use for this course,

00:00:24.045 --> 00:00:27.520
which I have here saved to the dashboard.

00:00:27.590 --> 00:00:31.140
Let's start by creating a new file in our project.

00:00:31.140 --> 00:00:33.255
Install this sample data,

00:00:33.255 --> 00:00:36.240
we want to add this in the source.

00:00:36.240 --> 00:00:38.220
Create a new file.

00:00:38.220 --> 00:00:42.720
I don't want to call this the sampledata.js.

00:00:42.720 --> 00:00:45.965
If we open up this sample data,

00:00:45.965 --> 00:00:49.985
we can then copy the contents by selecting all.

00:00:49.985 --> 00:00:56.120
Then copy and paste this into our sample data file.

00:00:56.120 --> 00:00:58.415
This is simply some data,

00:00:58.415 --> 00:01:00.800
so we can work with components.

00:01:00.800 --> 00:01:02.945
We have a board's array,

00:01:02.945 --> 00:01:06.970
which is simply three different boards which you can live through.

00:01:06.970 --> 00:01:09.570
Below this we also have some lists.

00:01:09.570 --> 00:01:12.350
These are linked to the board by the board ID.

00:01:12.350 --> 00:01:14.600
They also have an ID and title,

00:01:14.600 --> 00:01:18.130
and then it nested inside will have some individual counts.

00:01:18.130 --> 00:01:22.760
This will now give us some basic data to work with in our components.

00:01:22.760 --> 00:01:26.930
When using react, the current data which have no components,

00:01:26.930 --> 00:01:29.365
is referred to as state.

00:01:29.365 --> 00:01:35.285
State is an object on a component which contains data which can change.

00:01:35.285 --> 00:01:38.030
For example, will be using the state in

00:01:38.030 --> 00:01:42.470
the list component to store all of the Quran cars in that list.

00:01:42.470 --> 00:01:45.860
State is independence of each component two.

00:01:45.860 --> 00:01:48.095
We had a free lists,

00:01:48.095 --> 00:01:49.475
just like we have here.

00:01:49.475 --> 00:01:52.100
The state will be different for each one.

00:01:52.100 --> 00:01:55.175
Since all of the car data is different,

00:01:55.175 --> 00:02:01.265
the state of the garden list would be an array of cards called new table unfixed fans.

00:02:01.265 --> 00:02:06.485
The list components for bedroom one would have a state array of new furniture,

00:02:06.485 --> 00:02:08.555
paint walls, and so on.

00:02:08.555 --> 00:02:12.050
Another useful parts of state is that it is dynamic.

00:02:12.050 --> 00:02:14.375
Meaning if the state changes,

00:02:14.375 --> 00:02:16.880
such as when a user deletes a card,

00:02:16.880 --> 00:02:21.065
it will update all of the components which uses data.

00:02:21.065 --> 00:02:26.120
State can also be anything such as if the use is currently logged in,

00:02:26.120 --> 00:02:29.285
if a pop-up modal is currently open,

00:02:29.285 --> 00:02:32.460
or the number of likes a post has.

00:02:32.520 --> 00:02:35.215
To take a first look at state.

00:02:35.215 --> 00:02:40.780
Let's head over to the app.js and we'll come again to add our state objects.

00:02:40.780 --> 00:02:43.945
Just after the line of function up.

00:02:43.945 --> 00:02:46.794
We can create our state object.

00:02:46.794 --> 00:02:50.710
Then inside here we can add any state which we want.

00:02:50.710 --> 00:02:57.275
Let's begin by adding a bold title and set this equal to a string of house ideas.

00:02:57.275 --> 00:03:01.705
This state can contain any names and values of the data we want.

00:03:01.705 --> 00:03:04.705
But remember, this is just the initial states

00:03:04.705 --> 00:03:08.215
and it can change or be updated at any time.

00:03:08.215 --> 00:03:12.550
If we save this file and go back over to the browser,

00:03:12.550 --> 00:03:14.635
back into our project.

00:03:14.635 --> 00:03:18.680
We see in the error message of state is not defined.

00:03:18.680 --> 00:03:24.320
This is happening because states can only be used on a class component.

00:03:24.320 --> 00:03:29.150
Remember before when we created the board listing car components,

00:03:29.150 --> 00:03:31.460
we created this as a class.

00:03:31.460 --> 00:03:34.370
Whereas if we go to the app.js,

00:03:34.370 --> 00:03:37.010
which is automatically generated for us,

00:03:37.010 --> 00:03:40.465
we have a function base components.

00:03:40.465 --> 00:03:43.280
This function component is great for

00:03:43.280 --> 00:03:47.930
a simple function which just takes in any data as a prop.

00:03:47.930 --> 00:03:49.985
We'll look at props very soon.

00:03:49.985 --> 00:03:53.545
Then it renders some content to the browser.

00:03:53.545 --> 00:03:59.255
Allow it just to confuse you even more with react version 16.8,

00:03:59.255 --> 00:04:01.910
they did introduce something called Hooke's,

00:04:01.910 --> 00:04:04.880
which allows us to do more with function components,

00:04:04.880 --> 00:04:07.015
which we couldn't previously do.

00:04:07.015 --> 00:04:10.580
But that's not something we need to worry about just yet.

00:04:10.580 --> 00:04:12.620
So to add state,

00:04:12.620 --> 00:04:16.550
what we need to do is to convert this to a class based components.

00:04:16.550 --> 00:04:19.565
This is just a few simple steps.

00:04:19.565 --> 00:04:21.920
The first thing I'm going to do is to clean up

00:04:21.920 --> 00:04:26.015
this return statement and remove all the unnecessary code.

00:04:26.015 --> 00:04:32.725
Let's take out the header and also the class name of App.

00:04:32.725 --> 00:04:38.435
Give us a save, now we'll just have a empty div inside of our return statement.

00:04:38.435 --> 00:04:41.735
Now we need to replace this first line of function

00:04:41.735 --> 00:04:45.380
App with a class just like we did in the board.

00:04:45.380 --> 00:04:48.940
So we need to expand the react components.

00:04:48.940 --> 00:04:54.860
Remove this. This is a class-based components which is call App.

00:04:54.860 --> 00:04:57.125
This will go into extends,

00:04:57.125 --> 00:05:01.185
react all components,

00:05:01.185 --> 00:05:06.745
making sure we still have the curly braces surrounding all of this code.

00:05:06.745 --> 00:05:08.945
Then as we mentioned earlier,

00:05:08.945 --> 00:05:12.695
a class components needs to have a random method.

00:05:12.695 --> 00:05:16.085
We need to surround the return statement with this.

00:05:16.085 --> 00:05:18.935
If we could just return statement out,

00:05:18.935 --> 00:05:20.525
we can then add in

00:05:20.525 --> 00:05:27.620
the random method inside the curly braces placed in the return statement,

00:05:27.620 --> 00:05:32.305
save as file, now should see no errors inside the browser.

00:05:32.305 --> 00:05:36.795
Back over to our state in the app.js.

00:05:36.795 --> 00:05:42.350
We can access our state using the curly braces inside the div.

00:05:42.350 --> 00:05:45.745
Let's add IP elements to output our states.

00:05:45.745 --> 00:05:47.675
The curly braces.

00:05:47.675 --> 00:05:51.755
We can access state with this dot state.

00:05:51.755 --> 00:05:55.830
Then the name of our state called all title,

00:05:56.270 --> 00:06:00.135
gives us a save, and then over to the browser.

00:06:00.135 --> 00:06:04.540
Now how the board title of house ideas.

00:06:04.580 --> 00:06:08.825
First of all, this is what is called JSX code,

00:06:08.825 --> 00:06:14.050
which allows us to mix JavaScript into our HTML elements.

00:06:14.050 --> 00:06:16.570
These curly braces which surround

00:06:16.570 --> 00:06:20.690
the states are used when we want to jump into JavaScript,

00:06:20.690 --> 00:06:23.350
and then run the code inside.

00:06:23.350 --> 00:06:27.829
We can add any JavaScript we want into these curly braces.

00:06:27.829 --> 00:06:33.460
So we can do some simple JavaScript such as 5 plus 10.

00:06:33.460 --> 00:06:36.435
Then we see the value of 15.

00:06:36.435 --> 00:06:40.480
All we can do is something such as a console log.

00:06:40.480 --> 00:06:44.045
Let's just add a string of hello.

00:06:44.045 --> 00:06:49.490
Save this, and then we see the value of hello in the console.

00:06:49.490 --> 00:06:54.070
Now, let's remove our console log and the 5 plus 10.

00:06:54.070 --> 00:06:59.375
Now we're going to update our state with the value of our sample data.

00:06:59.375 --> 00:07:03.695
Well, how would we go about updating or setting the state?

00:07:03.695 --> 00:07:07.615
Well, we can do this with a method called set state.

00:07:07.615 --> 00:07:10.890
First of all, let's import our sample data.

00:07:10.890 --> 00:07:13.320
We can use this in the file.

00:07:13.320 --> 00:07:19.160
Import data from a string value of dot slash,

00:07:19.160 --> 00:07:21.880
and then sample data.

00:07:21.880 --> 00:07:26.820
Then we can set up our initial board state to be an empty array.

00:07:26.820 --> 00:07:31.590
Let's change the board title to be boardT.

00:07:31.590 --> 00:07:34.900
Save this be a empty array.

00:07:35.120 --> 00:07:41.240
We can obtain this with a custom method outside of the render function.

00:07:41.240 --> 00:07:47.360
But render, we can create a custom method called Update state.

00:07:47.360 --> 00:07:50.585
We'll call this in just a moment from a button.

00:07:50.585 --> 00:07:54.335
But this is going to be a ES6 arrow function,

00:07:54.335 --> 00:07:59.060
where we're going to update the state with the set state method.

00:07:59.060 --> 00:08:04.230
We can do this with this dot set state.

00:08:04.340 --> 00:08:08.180
These points to our current component instance.

00:08:08.180 --> 00:08:12.970
The state that lives on this component's state is an object,

00:08:12.970 --> 00:08:15.395
when it's passing the curly braces.

00:08:15.395 --> 00:08:19.345
The state which we want to update is this boards here.

00:08:19.345 --> 00:08:23.900
At boards, and I'm going to set this equal to data.

00:08:23.900 --> 00:08:30.280
Though boards, data.boards is our sample data which were important.

00:08:30.280 --> 00:08:36.835
The next step is to now create a button in our random method to then set the states.

00:08:36.835 --> 00:08:39.325
So inside relative.

00:08:39.325 --> 00:08:42.020
Let's create a button.

00:08:42.020 --> 00:08:44.735
Inside here we can add a click listener.

00:08:44.735 --> 00:08:51.005
We'd on-click and set this equal to this dot update state,

00:08:51.005 --> 00:08:54.160
which is the name of our method.

00:08:54.160 --> 00:08:56.810
On-click is a way of handling

00:08:56.810 --> 00:09:01.345
the event very similar to a regular JavaScript event handler.

00:09:01.345 --> 00:09:05.570
Just on-click, on-change or on-mouseover.

00:09:05.570 --> 00:09:09.665
With regular JavaScript, they are all lowercase names.

00:09:09.665 --> 00:09:14.120
However, when using JSX I must be camel case, just like this.

00:09:14.120 --> 00:09:18.145
Every word after the first one begins with a capital.

00:09:18.145 --> 00:09:19.640
When this button is clicked,

00:09:19.640 --> 00:09:24.140
we then call our custom update state method in the curly braces,

00:09:24.140 --> 00:09:27.265
which we'll go ahead and run the code inside here.

00:09:27.265 --> 00:09:30.860
After this, we can then do a console log to check

00:09:30.860 --> 00:09:34.710
the value of state has been updated. This is JavaScript.

00:09:34.710 --> 00:09:39.914
This goes in between the curly braces and in fact we'll do a console table.

00:09:39.914 --> 00:09:41.610
It's by a formatted.

00:09:41.610 --> 00:09:46.765
We can then output this dot state, dot boards.

00:09:46.765 --> 00:09:49.895
Now let's check this out over in the browser.

00:09:49.895 --> 00:09:56.210
We have an error updating states needs to be a colon.

00:09:56.210 --> 00:10:00.305
Rather than equals satisfy colon.

00:10:00.305 --> 00:10:04.265
Then reload, click on our button,

00:10:04.265 --> 00:10:10.130
and now see a table with all of the three pieces of information from our sample data.

00:10:10.130 --> 00:10:12.455
We have the free course titles,

00:10:12.455 --> 00:10:14.900
have the background, the ID,

00:10:14.900 --> 00:10:16.420
and the index number.

00:10:16.420 --> 00:10:21.710
This is how we can update our state object using the set states.

00:10:21.710 --> 00:10:23.780
We shouldn't be tempted, however,

00:10:23.780 --> 00:10:25.925
to set it in any other way,

00:10:25.925 --> 00:10:32.950
such as this..state,.boards is equal to some value.

00:10:32.950 --> 00:10:37.485
We have used this set state method for various reasons.

00:10:37.485 --> 00:10:41.360
Setting this.state,.boards just like this,

00:10:41.360 --> 00:10:45.610
will not trigger a component of dates if the state changes.

00:10:45.610 --> 00:10:48.285
It can also be less performant too.

00:10:48.285 --> 00:10:54.065
Since multiple set state calls can be batched together into one single update.

00:10:54.065 --> 00:10:56.125
Slash, remove this.

00:10:56.125 --> 00:11:00.530
We'll get a lot more practice updating state during this course.

00:11:00.530 --> 00:11:03.500
Next, we will look at how we can loop through this data,

00:11:03.500 --> 00:11:08.310
and how to set the initial state when a component first loads.
