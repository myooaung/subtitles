WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.350 --> 00:00:03.360
With what we learned in the last video,

00:00:03.360 --> 00:00:08.160
we can now apply this again to retrieve the lists and cards from Firebase.

00:00:08.160 --> 00:00:12.555
We also going to be taking a look at two new Firebase methods.

00:00:12.555 --> 00:00:17.335
One is called orderBy and it will sort our data, which we'll get back.

00:00:17.335 --> 00:00:21.560
Then the Where method will allow us to only get a list or a card,

00:00:21.560 --> 00:00:26.245
if the boardId matches the current board we're viewing.

00:00:26.245 --> 00:00:29.760
Let's start over in the board components.

00:00:29.760 --> 00:00:35.895
The Board.js, we can start up at the top by removing the sampleData,

00:00:35.895 --> 00:00:38.205
we no longer need this import.

00:00:38.205 --> 00:00:41.055
Therefore we can also remove the setState call,

00:00:41.055 --> 00:00:43.650
which will apply this to state.

00:00:43.650 --> 00:00:46.740
Now if we go over to the browser,

00:00:46.740 --> 00:00:52.815
on the board view, it's no surprise we don't see any lists or cards in this components.

00:00:52.815 --> 00:01:00.120
So let's replace our sampleData with a method called getLists of in the board components.

00:01:00.120 --> 00:01:03.435
This is going to get our lists from Firebase,

00:01:03.435 --> 00:01:06.420
just like the getBoard method below.

00:01:06.420 --> 00:01:09.210
This one is called getLists,

00:01:09.210 --> 00:01:11.310
and this is going to be equal to

00:01:11.310 --> 00:01:15.600
async function which is also going to take in the boardId.

00:01:15.600 --> 00:01:17.835
Setup the arrow function,

00:01:17.835 --> 00:01:22.890
then inside here we can create our try and also our catch block.

00:01:22.890 --> 00:01:26.040
Catch block takes in an error as always,

00:01:26.040 --> 00:01:33.610
and then we can do a console log with the string of error fetching lists.

00:01:34.790 --> 00:01:38.070
Then afterwards, I'm going to add a comma,

00:01:38.070 --> 00:01:40.890
and then also I'll put the error.

00:01:40.890 --> 00:01:43.560
So just above this try section,

00:01:43.560 --> 00:01:48.280
we can first create our constant which is going to hold our lists.

00:01:48.500 --> 00:01:54.885
Where we going to await our list coming back which we can grab from the listRef.

00:01:54.885 --> 00:02:00.615
We could now chain onto the end the.get method which we used previously,

00:02:00.615 --> 00:02:04.950
but this would go ahead and grab all lists in our database.

00:02:04.950 --> 00:02:09.690
Instead, we only need to get the list for this column board.

00:02:09.690 --> 00:02:13.170
Over in Firebase if we go back to the browser,

00:02:13.170 --> 00:02:15.330
and then to the Console.

00:02:15.330 --> 00:02:19.350
Remember earlier when we created a new list and a new card,

00:02:19.350 --> 00:02:21.795
we also added a ID.

00:02:21.795 --> 00:02:23.625
This list, for example,

00:02:23.625 --> 00:02:27.270
has a boardId of 1,000 and then this

00:02:27.270 --> 00:02:31.560
will link to a individual board which it was created on.

00:02:31.560 --> 00:02:35.700
Firebase allows us to do this using the Where method.

00:02:35.700 --> 00:02:38.220
Let's take a look at how we can do this.

00:02:38.220 --> 00:02:39.740
Just after our listRef,

00:02:39.740 --> 00:02:42.530
we can chain on the end the Where method.

00:02:42.530 --> 00:02:45.915
Then inside here, this takes in three parameters.

00:02:45.915 --> 00:02:50.025
The first parameter which we add in is the field name.

00:02:50.025 --> 00:02:53.700
The field name is going to be equal to list of board,

00:02:53.700 --> 00:02:59.430
since we are looking at the list objects and then we want to select the board property.

00:02:59.430 --> 00:03:04.395
Inside here as a string, we can pass in list.board.

00:03:04.395 --> 00:03:08.070
The second parameter is the comparison,

00:03:08.070 --> 00:03:09.945
here we can use less than,

00:03:09.945 --> 00:03:11.729
greater than or equals,

00:03:11.729 --> 00:03:14.295
just like we can with JavaScript.

00:03:14.295 --> 00:03:16.245
Separate it by a comma.

00:03:16.245 --> 00:03:19.710
As a string, we can add the double equals to compare

00:03:19.710 --> 00:03:26.860
this board reference with the boardId which is passed in to our function as a parameter.

00:03:28.070 --> 00:03:32.190
Now this will only grab our lists from our collection,

00:03:32.190 --> 00:03:36.525
where the board field will match the current loaded boardId.

00:03:36.525 --> 00:03:40.335
This list also has a createdAt field.

00:03:40.335 --> 00:03:42.180
If we take a look in the console.

00:03:42.180 --> 00:03:44.685
This is the createdAt field just here,

00:03:44.685 --> 00:03:49.770
and this can be used to order our data by the date from when it was created.

00:03:49.770 --> 00:03:51.480
I have a spelling mistake here,

00:03:51.480 --> 00:03:56.145
but that's not a problem since we can delete these and then create a new list later on.

00:03:56.145 --> 00:04:00.210
Let's take a look at how we can use createdAt inside of here.

00:04:00.210 --> 00:04:02.430
All we need to do is just have to where,

00:04:02.430 --> 00:04:06.210
this we can also chain on to the end the orderBy method,

00:04:06.210 --> 00:04:07.800
then inside here as a string,

00:04:07.800 --> 00:04:12.970
we can pass in our list object and then the field name of createdAt.

00:04:13.640 --> 00:04:19.815
This will sort our list into ascending order using the createdAt field.

00:04:19.815 --> 00:04:23.250
You can also use any other field here too.

00:04:23.250 --> 00:04:25.680
If you want it to have the order reversed,

00:04:25.680 --> 00:04:32.335
you can also add a second argument of descending which shortened to D-E-S-C.

00:04:32.335 --> 00:04:36.220
But I want to remove this and keep it as default.

00:04:36.220 --> 00:04:38.700
We have error down the terminal,

00:04:38.700 --> 00:04:40.725
so this needs to be boardId,

00:04:40.725 --> 00:04:43.200
just like we've pressed data into our function.

00:04:43.200 --> 00:04:48.840
Then finally, we need to call the.get method to finally get these data.

00:04:48.840 --> 00:04:54.225
The rest should be pretty straight forward as is similar to what we've already used.

00:04:54.225 --> 00:04:55.830
Just after the Get method,

00:04:55.830 --> 00:04:58.020
we're going to call our list object,

00:04:58.020 --> 00:05:03.165
called.forEach method, so we can move through each item inside here.

00:05:03.165 --> 00:05:06.795
We're then going to store each item in the list variable,

00:05:06.795 --> 00:05:09.690
and then this runs a function for each one.

00:05:09.690 --> 00:05:12.150
First of all, let's grab our data,

00:05:12.150 --> 00:05:15.060
with const data and I'm going to set is equal to

00:05:15.060 --> 00:05:19.425
list the data method which we looked at in the last video,

00:05:19.425 --> 00:05:22.155
and then select the List object.

00:05:22.155 --> 00:05:27.885
Just after here we're going to construct our actual list which we can then push to state.

00:05:27.885 --> 00:05:31.875
Remember when we did this to the boards of in the App.js,

00:05:31.875 --> 00:05:34.155
we stored the data into a variable,

00:05:34.155 --> 00:05:38.445
we then created a board object where we had the data.

00:05:38.445 --> 00:05:41.025
We also needed to merge in the ID,

00:05:41.025 --> 00:05:43.995
which wasn't available from this data method.

00:05:43.995 --> 00:05:46.485
We just do the same over in the board,

00:05:46.485 --> 00:05:49.065
we can create our list objects.

00:05:49.065 --> 00:05:52.350
This is going to be equal to our ID,

00:05:52.350 --> 00:05:55.665
which you can grab from list.id.

00:05:55.665 --> 00:06:01.365
Then we use the spread operator to merge in the rest of the data.

00:06:01.365 --> 00:06:06.855
Below this, we can then set the states with this.setState.

00:06:06.855 --> 00:06:11.190
The state that we want to add is the currentLists.

00:06:11.190 --> 00:06:14.805
We have this already setup as an empty array.

00:06:14.805 --> 00:06:17.340
Let's set this inside here.

00:06:17.340 --> 00:06:19.920
We're looking for the currentLists,

00:06:19.920 --> 00:06:24.600
they're going to be equal to an object where we spread in the current state

00:06:24.600 --> 00:06:32.205
with this.state.currentLists separated by a comma.

00:06:32.205 --> 00:06:36.840
We then merge in our list object which we just created.

00:06:36.840 --> 00:06:43.275
Now this method is grabbing our currentLists and filtering them to the column board view.

00:06:43.275 --> 00:06:48.090
The next step is to actually call this method when the component will mount.

00:06:48.090 --> 00:06:52.480
Let's do this with, this.getLists.

00:06:52.670 --> 00:06:56.235
Remember getLists will also need a boardId,

00:06:56.235 --> 00:06:58.635
which you can pass in as an argument using

00:06:58.635 --> 00:07:03.210
this.props.match, to get this from the browser.

00:07:03.210 --> 00:07:08.745
We want to select the params and then also the boardId.

00:07:08.745 --> 00:07:14.865
Save this file and head over to the browser and then go to our Projects.

00:07:14.865 --> 00:07:18.900
If we open up the Console we see a strange warning.

00:07:18.900 --> 00:07:22.905
It tells us that the query requires an index,

00:07:22.905 --> 00:07:25.260
and then we can follow this link to create this.

00:07:25.260 --> 00:07:29.835
We can click on this link which it provides and then it will take goes

00:07:29.835 --> 00:07:35.130
over to the Firebase console where we can create a new index.

00:07:35.130 --> 00:07:37.860
We can see here that Firebase is going to create

00:07:37.860 --> 00:07:41.100
an index for those on this list collection.

00:07:41.100 --> 00:07:43.770
We can also see that the methods which we just

00:07:43.770 --> 00:07:46.995
added are also taken effect onto these fields.

00:07:46.995 --> 00:07:50.640
We assault in the list of boards into ascending order

00:07:50.640 --> 00:07:54.660
and also the createdAt property into ascending order too.

00:07:54.660 --> 00:07:59.085
We can go ahead and create our index by clicking this button.

00:07:59.085 --> 00:08:04.005
This is required since we now perform a more complex query.

00:08:04.005 --> 00:08:07.920
Remember we are using the Where method to filter out documents by

00:08:07.920 --> 00:08:12.645
the boardId and we then sought them by the creation dates.

00:08:12.645 --> 00:08:16.290
An index is a way to structure our data to

00:08:16.290 --> 00:08:19.800
loop Firebase to locate our data more efficiently.

00:08:19.800 --> 00:08:23.610
Resulting in our query being performed much faster,

00:08:23.610 --> 00:08:28.620
it basically will make Firebase aware that at some point in the future,

00:08:28.620 --> 00:08:34.305
we will be forming a more complex query so Firebase can be ready for them.

00:08:34.305 --> 00:08:37.110
This might take a little while to finish.

00:08:37.110 --> 00:08:42.870
Pause the video and come back when this is all done. Welcome back.

00:08:42.870 --> 00:08:45.345
Once this index has been created,

00:08:45.345 --> 00:08:47.310
now will be a good time to delete all of

00:08:47.310 --> 00:08:50.340
the lists and cards we currently have in the database.

00:08:50.340 --> 00:08:54.300
Let's head over to there and we start with the lists.

00:08:54.300 --> 00:08:58.035
I'm going to click on this icon and delete the collection.

00:08:58.035 --> 00:09:02.730
Also type in the name of lists to confirm this,

00:09:02.730 --> 00:09:05.490
and also the cards we can do the same.

00:09:05.490 --> 00:09:09.370
[inaudible] remove this.

00:09:09.370 --> 00:09:15.000
This is because they are linked to the boardIds from the sample data.

00:09:15.000 --> 00:09:17.540
I'm no longer using the sample data,

00:09:17.540 --> 00:09:19.545
therefore we don't need this.

00:09:19.545 --> 00:09:22.500
Now if we go back to our application,

00:09:22.500 --> 00:09:26.520
let's reload, and then we can create some new lists.

00:09:26.520 --> 00:09:28.965
Let's add List 1,

00:09:28.965 --> 00:09:34.450
List2, and then refresh.

00:09:34.550 --> 00:09:41.235
We see an error now saying cannot convert unidentified or nulled object.

00:09:41.235 --> 00:09:45.270
The reason we're seeing this error which is related to

00:09:45.270 --> 00:09:49.740
this.props.lists.title over in the list components

00:09:49.740 --> 00:09:54.210
is because we are still trying to loop through cards, which we don't have yet.

00:09:54.210 --> 00:09:57.585
Remember earlier on when we had our sample data,

00:09:57.585 --> 00:10:02.120
we had some cards added as an array inside of each list objects.

00:10:02.120 --> 00:10:03.945
We no longer have these values,

00:10:03.945 --> 00:10:07.435
so we can now remove this from the List.js.

00:10:07.435 --> 00:10:11.040
All we need to do is to comment out our loop,

00:10:11.040 --> 00:10:12.585
which is this section here,

00:10:12.585 --> 00:10:15.825
which is rendering out a card component.

00:10:15.825 --> 00:10:20.865
Over to the browser and now we can see the two lists which we just created.

00:10:20.865 --> 00:10:22.920
Let's also create some cards,

00:10:22.920 --> 00:10:28.690
card 1, card 2

00:10:28.690 --> 00:10:31.095
We can add this list two as well,

00:10:31.095 --> 00:10:33.885
so card for list two.

00:10:33.885 --> 00:10:35.970
We won't see these cards just yet,

00:10:35.970 --> 00:10:38.820
because we just commented out the card components,

00:10:38.820 --> 00:10:43.380
but if we go over to Firebase and then refresh the console,

00:10:43.380 --> 00:10:45.915
first of all, let's check out the lists.

00:10:45.915 --> 00:10:47.430
If we click on these,

00:10:47.430 --> 00:10:50.175
these are now linked to a particular board.

00:10:50.175 --> 00:10:52.245
The same with our second one,

00:10:52.245 --> 00:10:54.255
and if we go to our cards,

00:10:54.255 --> 00:10:59.910
we can also see these are connected to a list ID to the third one,

00:10:59.910 --> 00:11:02.490
and this is a different ID to the first two.

00:11:02.490 --> 00:11:04.020
To finish off this video,

00:11:04.020 --> 00:11:06.750
we can now read the cards from the database,

00:11:06.750 --> 00:11:10.560
which will follow a similar pattern to our lists.

00:11:10.560 --> 00:11:13.530
Over in our list we got JS components,

00:11:13.530 --> 00:11:18.045
we can first call the method from inside of component did mount.

00:11:18.045 --> 00:11:20.010
Just below our state object,

00:11:20.010 --> 00:11:22.260
we can add componentsDidMounts,

00:11:22.260 --> 00:11:25.680
setup our brackets and our curly braces.

00:11:25.680 --> 00:11:28.980
Inside of here we can call this.fetch cards,

00:11:28.980 --> 00:11:32.220
which is the method we're going to create in just a moment,

00:11:32.220 --> 00:11:38.950
which is going to pass in the list ID with this top props fault.list.

00:11:39.430 --> 00:11:43.685
Then we can set up our custom method just below this,

00:11:43.685 --> 00:11:49.425
so this is fetched cards is going to be a sync function,

00:11:49.425 --> 00:11:54.495
which you're going to take in this list ID which would been passed to it,

00:11:54.495 --> 00:11:57.495
setup our arrow function.

00:11:57.495 --> 00:12:01.270
Then I try and a catch block.

00:12:01.820 --> 00:12:12.040
Passing the error, not a console.error with the text of error, fetching cards.

00:12:13.250 --> 00:12:17.710
Add a comma and then outputs our error,

00:12:17.990 --> 00:12:22.470
so now we can set things up to get our cards from the database,

00:12:22.470 --> 00:12:26.700
which will match this list ID which is passed in.

00:12:26.700 --> 00:12:30.375
We can do this inside of the try block.

00:12:30.375 --> 00:12:35.715
We're going to first create a constant to store our cards,

00:12:35.715 --> 00:12:40.365
where we are going to await the data from our cards ref.

00:12:40.365 --> 00:12:45.120
After days, we can add train onto the end D taught where method.

00:12:45.120 --> 00:12:48.069
Remember this takes in three arguments.

00:12:48.069 --> 00:12:52.010
The first one is the value which you want to compare against.

00:12:52.010 --> 00:12:54.695
This is stored inside of the cards.

00:12:54.695 --> 00:12:56.660
If we take a look at the console,

00:12:56.660 --> 00:12:59.820
we want to select the list ID,

00:12:59.820 --> 00:13:05.130
so select card.list ID.

00:13:05.130 --> 00:13:09.395
The second value is the comparison, which is equals.

00:13:09.395 --> 00:13:13.710
We want to check if this is equal to the list ID.

00:13:15.170 --> 00:13:21.120
Just after this, we can also chain on to the end the order by method.

00:13:21.120 --> 00:13:27.569
We want to order this ascend in by the card.created up property,

00:13:27.569 --> 00:13:30.165
and then finally, to get this data,

00:13:30.165 --> 00:13:32.985
we call the.get method.

00:13:32.985 --> 00:13:36.720
After this, we can then select our cards and

00:13:36.720 --> 00:13:40.215
then loop through each one with the.for each.

00:13:40.215 --> 00:13:45.600
For each is then going to store each value into a variable called card.

00:13:45.600 --> 00:13:50.550
This will run a function which is going to construct our card objects.

00:13:50.550 --> 00:13:53.595
First of all, we can grab our data,

00:13:53.595 --> 00:13:57.450
which is just like we did with the lists on the boards.

00:13:57.450 --> 00:13:59.955
We can grab our card objects.

00:13:59.955 --> 00:14:03.614
We can run the data method to grab all the properties

00:14:03.614 --> 00:14:07.935
from the card and then select the card objects.

00:14:07.935 --> 00:14:11.595
Next, we're going to then create our card objects,

00:14:11.595 --> 00:14:12.825
which is going to be the one,

00:14:12.825 --> 00:14:14.790
which will push the state.

00:14:14.790 --> 00:14:17.220
We need to select the ID,

00:14:17.220 --> 00:14:20.470
which is available from the card object.ID,

00:14:21.200 --> 00:14:23.490
separated by a comma.

00:14:23.490 --> 00:14:25.710
We can then merge in the data,

00:14:25.710 --> 00:14:28.995
just like we did with the lists on the boards.

00:14:28.995 --> 00:14:34.155
Let's test this is working with a console log after our object.

00:14:34.155 --> 00:14:38.520
We want to log the value of our card objects.

00:14:38.520 --> 00:14:43.440
Save this and then go over to the browser into our project,

00:14:43.440 --> 00:14:45.809
we can now reload,

00:14:45.809 --> 00:14:50.295
and then we see that this query also requires an index two,

00:14:50.295 --> 00:14:55.550
so click on link over to the console,

00:14:55.550 --> 00:14:59.065
and we can now create our index for the cards too.

00:14:59.065 --> 00:15:02.025
Let's create this with this button.

00:15:02.025 --> 00:15:05.925
Pause video and give us a few moments to build our index,

00:15:05.925 --> 00:15:09.010
and I will see you in a few minutes.

00:15:09.020 --> 00:15:11.580
With our index is now created,

00:15:11.580 --> 00:15:15.015
we can go back over to the app and then reload,

00:15:15.015 --> 00:15:18.915
and now we'll see all three cards have being placed into the console.

00:15:18.915 --> 00:15:22.515
That's try creating a new card, test.

00:15:22.515 --> 00:15:25.485
Number one, send this off,

00:15:25.485 --> 00:15:28.230
reload the browser, and now we'll have

00:15:28.230 --> 00:15:32.010
our fourth card just added with the text of test one.

00:15:32.010 --> 00:15:35.610
We can also see this is linked to this list ID.

00:15:35.610 --> 00:15:37.780
Let's try adding a new one,

00:15:37.780 --> 00:15:42.099
so test two reload,

00:15:42.099 --> 00:15:47.340
and then we can see that test two has a different list ID to number one.

00:15:47.340 --> 00:15:51.030
The next thing to do now we know we have the correct data is

00:15:51.030 --> 00:15:55.000
to replace our console log with a set state.

00:15:55.070 --> 00:15:58.155
This now set states.

00:15:58.155 --> 00:16:02.025
Inside here we're going to set the current cards,

00:16:02.025 --> 00:16:06.060
which we already have in the states, create our objects.

00:16:06.060 --> 00:16:09.435
We can then merge in to our states.

00:16:09.435 --> 00:16:17.415
Our current cards, also passing in our new card object.

00:16:17.415 --> 00:16:20.625
With this now let's go back over to the browser,

00:16:20.625 --> 00:16:24.030
and then if we search inside of the react developer tools,

00:16:24.030 --> 00:16:26.550
we can search for a list components,

00:16:26.550 --> 00:16:28.290
select one of these,

00:16:28.290 --> 00:16:32.175
and then it down on the bottom we can see our state of current cards.

00:16:32.175 --> 00:16:35.850
This has an a ray with two different cards inside here.

00:16:35.850 --> 00:16:38.145
You can search for our second one.

00:16:38.145 --> 00:16:42.660
Uninstall the three current cards related to this list,

00:16:42.660 --> 00:16:48.210
so the final thing to do in this video is to display these cards inside of each list.

00:16:48.210 --> 00:16:51.360
If we go back to all list components and we

00:16:51.360 --> 00:16:54.960
can count out this loop which will run the out of the cards.

00:16:54.960 --> 00:16:59.670
We can then change the style prompts to be this top state.

00:16:59.670 --> 00:17:03.270
Since we now store in the current cards into states.

00:17:03.270 --> 00:17:06.600
Exactly the same before as our data.

00:17:06.600 --> 00:17:12.525
This is going to be this.state,.current cards,

00:17:12.525 --> 00:17:15.060
also passing in the key,

00:17:15.060 --> 00:17:18.495
over to the browser, and now we'll see the lists.

00:17:18.495 --> 00:17:21.585
Now have the cards display in each one.

00:17:21.585 --> 00:17:25.125
This now leaves us with each card on the correct list,

00:17:25.125 --> 00:17:28.750
and next we're going to look at how we can delete data.
