WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.950 --> 00:00:07.035
We now move on to adding the functionality to remove our items from the database.

00:00:07.035 --> 00:00:10.910
Removing one item from Firebase is pretty simple.

00:00:10.910 --> 00:00:16.560
All we need to do is to find the item in the database and then call a delete method.

00:00:16.560 --> 00:00:19.555
This is what we can do for the cards.

00:00:19.555 --> 00:00:23.765
The first thing we need to do is to add a simple Remove button for each card,

00:00:23.765 --> 00:00:29.180
which I'm going to add as a simple cross over to the Card.js

00:00:29.180 --> 00:00:35.195
components inside of our div and just blow the context.

00:00:35.195 --> 00:00:37.760
We can add HTML span elements.

00:00:37.760 --> 00:00:41.060
Inside here we can add a onClick event handler,

00:00:41.060 --> 00:00:46.370
which is going to trigger a method called this.deleteCard.

00:00:46.370 --> 00:00:49.745
Inside the opening and closing span tags,

00:00:49.745 --> 00:00:51.590
we can add HTML entity,

00:00:51.590 --> 00:00:56.410
which is the ampersand times and then the semicolon.

00:00:56.410 --> 00:00:59.570
Also the browser. This will output a cross,

00:00:59.570 --> 00:01:02.695
which we can use to trigger this method.

00:01:02.695 --> 00:01:06.175
Now we're dealing with the cards stored in Firebase.

00:01:06.175 --> 00:01:08.845
We need to import the cards reference.

00:01:08.845 --> 00:01:13.195
Up at the top, we can import our cardsRef.

00:01:13.195 --> 00:01:19.435
This is from the string which is../firebase.

00:01:19.435 --> 00:01:22.435
Then we can create our deleteCard method,

00:01:22.435 --> 00:01:25.135
which is called by clicking on this cross.

00:01:25.135 --> 00:01:27.800
Just above our random effort.

00:01:27.800 --> 00:01:33.015
We can add deleteCard is going to be a sink.

00:01:33.015 --> 00:01:35.175
We will receive the event information.

00:01:35.175 --> 00:01:38.529
When it's called settled the arrow function.

00:01:38.529 --> 00:01:45.140
I will try section and also the catch passing in the error.

00:01:45.140 --> 00:01:51.160
We can now put a console.error with the string of error deleting card.

00:01:54.800 --> 00:01:59.240
The first steps up in the try section is going to use

00:01:59.240 --> 00:02:03.835
this event information to prevent the default behavior.

00:02:03.835 --> 00:02:07.550
Will then need to grab the cardId from props.

00:02:07.550 --> 00:02:10.880
We can store this in a constant called cardId.

00:02:10.880 --> 00:02:15.390
Unsat this too this.props.data.id.

00:02:17.230 --> 00:02:21.890
Remember each card is receiving the props called data.

00:02:21.890 --> 00:02:27.195
So we'll go into the developer tools into React.

00:02:27.195 --> 00:02:29.480
If you search for a card,

00:02:29.480 --> 00:02:34.670
this is receiving all the data for each card Inside of this data Props.

00:02:34.670 --> 00:02:37.230
Here we access in it this id.

00:02:37.230 --> 00:02:43.380
Now we can use this to access a particular card inside a Firebase with this id.

00:02:43.460 --> 00:02:46.145
below this crazy new constant,

00:02:46.145 --> 00:02:48.445
which is going to be for our card.

00:02:48.445 --> 00:02:54.340
Here we're going to await the cardsRef point to our collection.

00:02:54.340 --> 00:02:58.520
We can then select a particular documents by the id.

00:02:58.520 --> 00:03:02.240
We already have this cardId stored just above.

00:03:02.240 --> 00:03:07.115
The last step is to then call the delete method on this particular card.

00:03:07.115 --> 00:03:11.420
So card.delete which is provided by Firebase.

00:03:11.420 --> 00:03:14.635
Let's save this and go over to the browser.

00:03:14.635 --> 00:03:18.180
Let's click on "Test one."

00:03:18.180 --> 00:03:23.135
We still need to refresh since we don't have real-time functionality just yet.

00:03:23.135 --> 00:03:26.195
But we now see that test one has been removed.

00:03:26.195 --> 00:03:31.170
If we go over to the console and then reload this,

00:03:32.710 --> 00:03:37.060
we can check each one of our cards for test one.

00:03:37.060 --> 00:03:40.775
This is now being removed from our database too.

00:03:40.775 --> 00:03:44.165
Next, we need to also remove the lists.

00:03:44.165 --> 00:03:48.950
This is a little more complex since we also need to find and remove each card,

00:03:48.950 --> 00:03:51.860
which is also associated with this list.

00:03:51.860 --> 00:03:56.390
Let's do this over in the list component, which is list.js.

00:03:56.390 --> 00:04:00.785
Again, this also needs a button or across to remove the list.

00:04:00.785 --> 00:04:05.335
We're going to do this just after we output the list title.

00:04:05.335 --> 00:04:10.695
This line of code just here at the span.

00:04:10.695 --> 00:04:18.370
The contents is going to be the HTML entity of ampersand times and the semicolon.

00:04:18.370 --> 00:04:21.795
This will also need a onClick event handler,

00:04:21.795 --> 00:04:28.020
which is going to be this.deleteList loop at the top.

00:04:28.020 --> 00:04:32.170
We can also import our listsRef from Firebase.

00:04:33.500 --> 00:04:37.750
Then created this deleteList method.

00:04:39.430 --> 00:04:47.700
This is going to be async and then pass in a arrow function, a try section.

00:04:48.500 --> 00:04:58.330
We can catch any errors at a console error with the text of Error deleting list.

00:05:02.030 --> 00:05:07.655
The first steps in the try block is going to be to grab the listId.

00:05:07.655 --> 00:05:11.170
We can store this in a constant called listId.

00:05:11.170 --> 00:05:14.425
This listId is available on the props.

00:05:14.425 --> 00:05:18.435
So this.props the props name is list.

00:05:18.435 --> 00:05:20.940
Then we can grab the id.

00:05:20.940 --> 00:05:29.350
Blow is a second constant for our cards where we are going to await our cardsRef.

00:05:29.350 --> 00:05:33.925
For this, we don't just want to call the.getmethod.

00:05:33.925 --> 00:05:37.255
Since this will grab all of our cards in the database.

00:05:37.255 --> 00:05:40.295
We only want to remove the particular cards which is

00:05:40.295 --> 00:05:43.670
associated with this list, which will remove in.

00:05:43.670 --> 00:05:46.080
Let's note this down. We can chain onto the end,

00:05:46.080 --> 00:05:48.080
the dots where method.

00:05:48.080 --> 00:05:50.585
Remember this takes in three arguments.

00:05:50.585 --> 00:05:55.010
The first one is going to be the card.listId.

00:05:55.010 --> 00:05:58.115
The second one is going to be the comparison.

00:05:58.115 --> 00:06:01.670
Would I want to check if each list id property on

00:06:01.670 --> 00:06:05.980
each card is going to be equal to this listId from props.

00:06:05.980 --> 00:06:09.690
So at comma, add in the listId.

00:06:09.690 --> 00:06:14.825
Then we can finally chain on the get method to pull in these cards.

00:06:14.825 --> 00:06:18.830
Next step, what you want to do with these cards, once we get them back.

00:06:18.830 --> 00:06:20.930
Well, for each card, which we get back,

00:06:20.930 --> 00:06:23.495
we want to call the delete method.

00:06:23.495 --> 00:06:24.890
But just before we do this,

00:06:24.890 --> 00:06:27.289
we're going to add a quick if statements,

00:06:27.289 --> 00:06:31.470
which is first going to check if any cards have came back.

00:06:32.180 --> 00:06:39.465
If cards.docs.length is not equal is not equals to 0.

00:06:39.465 --> 00:06:41.775
We then add the card braces.

00:06:41.775 --> 00:06:44.120
This is basically checking if the length of

00:06:44.120 --> 00:06:48.745
the documents which has been returned is greater than zero.

00:06:48.745 --> 00:06:52.685
This means that we have some matches for our list id.

00:06:52.685 --> 00:06:57.965
We can then loop through all of the cards.forEach.

00:06:57.965 --> 00:07:02.675
Then for each card we're going to call the.deletemethod.

00:07:02.675 --> 00:07:08.350
We can do t his with card.ref.delete.

00:07:08.350 --> 00:07:13.280
These should take care of removing all the cards which are linked to this list.

00:07:13.280 --> 00:07:16.480
The next step is to actually remove the list.

00:07:16.480 --> 00:07:20.685
Just each card section is going to be a little simpler.

00:07:20.685 --> 00:07:23.510
All we need to do is create a constant which you're going

00:07:23.510 --> 00:07:27.080
to grab our list from the listsRef.

00:07:27.080 --> 00:07:30.875
The document which you want to grab is the one which is

00:07:30.875 --> 00:07:35.670
equal to this listId. Let's pass this in.

00:07:35.920 --> 00:07:41.495
We can then use this list and call the Firebase.delete method,

00:07:41.495 --> 00:07:43.735
which will move the list too.

00:07:43.735 --> 00:07:48.275
Now we can save this and we can test this in the browser,

00:07:48.275 --> 00:07:51.670
over to Chrome and into the project.

00:07:51.670 --> 00:07:54.195
Let's go for List 1.

00:07:54.195 --> 00:07:55.950
This should remove Card1,

00:07:55.950 --> 00:07:58.020
Card2, and test two.

00:07:58.020 --> 00:08:02.270
Click on this. We don't see any errors in the console,

00:08:02.270 --> 00:08:04.535
so that's good. Let's refresh.

00:08:04.535 --> 00:08:06.635
Now this has been removed.

00:08:06.635 --> 00:08:09.300
Over to the the console.

00:08:09.500 --> 00:08:12.435
Let's first check our lists.

00:08:12.435 --> 00:08:14.685
We now just have List 2 inside here.

00:08:14.685 --> 00:08:16.145
The list is being removed.

00:08:16.145 --> 00:08:17.510
We can check the cards.

00:08:17.510 --> 00:08:20.225
Now we'll just have this single card,

00:08:20.225 --> 00:08:22.405
which is from this list here.

00:08:22.405 --> 00:08:23.990
This is all now work in.

00:08:23.990 --> 00:08:26.210
We can click on a list to remove.

00:08:26.210 --> 00:08:31.085
It will also remove any cards which has been linked with the id.

00:08:31.085 --> 00:08:35.150
Next up we're going to be coming back to deleting items by also

00:08:35.150 --> 00:08:39.630
removing the boards from our app and also from Firebase.
