WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.380 --> 00:00:04.290
Now that our app is where if the user is logged in,

00:00:04.290 --> 00:00:07.605
we can use this information to do certain things.

00:00:07.605 --> 00:00:10.680
One of them is to add conditional rendering,

00:00:10.680 --> 00:00:13.770
which will allow us to do things such as only displaying

00:00:13.770 --> 00:00:18.000
a board if it was created by the current logged in user.

00:00:18.000 --> 00:00:21.600
Just to begin here inside of the ball view,

00:00:21.600 --> 00:00:24.285
we output in a sign-in components.

00:00:24.285 --> 00:00:27.195
This is because over in the app.js,

00:00:27.195 --> 00:00:29.640
we have a mistake just here,

00:00:29.640 --> 00:00:33.870
so I'm going to save this just before we go any further.

00:00:33.870 --> 00:00:38.250
Now this is in place. We can go to the board.js,

00:00:38.250 --> 00:00:42.225
and we can add some conditional rendering for the board components.

00:00:42.225 --> 00:00:45.740
To begin, I'm going to add a new property to state,

00:00:45.740 --> 00:00:48.980
which is going to be a empty message to begin with,

00:00:48.980 --> 00:00:51.770
and then we can update this message when we can't

00:00:51.770 --> 00:00:54.910
find a board or the board has been removed.

00:00:54.910 --> 00:00:58.440
Let's go down to our get board method,

00:00:58.440 --> 00:01:00.880
which is just below this.

00:01:01.910 --> 00:01:06.285
Inside here, we're trying to find a board by the ID.

00:01:06.285 --> 00:01:10.085
If no board can be found rather than the console log,

00:01:10.085 --> 00:01:13.100
we can update our message in state.

00:01:13.100 --> 00:01:18.140
This.setState inside of objects,

00:01:18.140 --> 00:01:21.830
the property which we want to update is the message,

00:01:21.830 --> 00:01:27.240
which is simply going to be a string of board not found.

00:01:28.000 --> 00:01:31.610
We can also copy the set state section,

00:01:31.610 --> 00:01:36.750
and we can also add this tableau when we also delete the board too.

00:01:36.830 --> 00:01:41.390
If we save this file and now go over to any one of our boards,

00:01:41.390 --> 00:01:43.980
such as this board components here,

00:01:43.980 --> 00:01:47.660
when a board has been removed or cannot be found,

00:01:47.660 --> 00:01:50.315
we need to hide the board title,

00:01:50.315 --> 00:01:55.225
the delete button, and also the new list at the bottom.

00:01:55.225 --> 00:01:58.370
We can do this in the board components by adding

00:01:58.370 --> 00:02:03.520
a ternary operator based off if we have a message inside a state.

00:02:03.520 --> 00:02:06.570
Let's go over to the ball components,

00:02:06.570 --> 00:02:08.790
scroll down to our render,

00:02:08.790 --> 00:02:11.895
and then just above our board header,

00:02:11.895 --> 00:02:15.845
we can add our ternary operator inside the curly braces.

00:02:15.845 --> 00:02:18.380
We can check this.state.

00:02:18.380 --> 00:02:22.350
That message is equal to an empty string,

00:02:22.350 --> 00:02:25.040
we can then set up our ternary operator,

00:02:25.040 --> 00:02:29.630
which looks like this and this is just regular JavaScript.

00:02:29.630 --> 00:02:34.270
If this is true, and we'll just have a empty string inside the states,

00:02:34.270 --> 00:02:38.780
we can then rent out the header in this first set of brackets.

00:02:38.780 --> 00:02:43.895
Let's do this by cutting out the closing bracket right to the end,

00:02:43.895 --> 00:02:47.495
scroll down to just after the board header,

00:02:47.495 --> 00:02:50.350
which is this section here.

00:02:50.350 --> 00:02:53.310
We can then paste this inside,

00:02:53.310 --> 00:02:58.050
meaning that's our board header with the delete board button, and also,

00:02:58.050 --> 00:03:01.860
the text is now inside this first set of brackets,

00:03:01.860 --> 00:03:05.645
if this is false and we do have a board "Not_found" message,

00:03:05.645 --> 00:03:09.575
we can then output this message inside the second set of brackets,

00:03:09.575 --> 00:03:11.975
inside of a hedge to elements.

00:03:11.975 --> 00:03:18.235
The message is available with this.state.message.

00:03:18.235 --> 00:03:20.345
Now obviously the browser,

00:03:20.345 --> 00:03:22.430
let's give this a test.

00:03:22.430 --> 00:03:25.940
We now see our board header section up at the top.

00:03:25.940 --> 00:03:28.340
If we try to delete this board,

00:03:28.340 --> 00:03:31.775
this now removes the title and also the button,

00:03:31.775 --> 00:03:34.880
leaving us with the message of Board not found.

00:03:34.880 --> 00:03:38.210
We still have this new list button at the bottom though,

00:03:38.210 --> 00:03:41.090
and we can hide this by setting the input type to be

00:03:41.090 --> 00:03:44.795
hidden when there is a message inside the state.

00:03:44.795 --> 00:03:50.239
Let's go back to the ball components to our create new list inputs.

00:03:50.239 --> 00:03:52.640
Instead of setting the type to be text,

00:03:52.640 --> 00:03:56.990
we can also add a JavaScript ternary operator inside the curly braces,

00:03:56.990 --> 00:03:58.760
we can do the same as above.

00:03:58.760 --> 00:04:04.340
We can check if the message inside the state is equal to an empty string.

00:04:04.340 --> 00:04:09.595
If is, we're going to set the input type to be text,

00:04:09.595 --> 00:04:13.310
if not, we'll set the input type to be hidden.

00:04:13.310 --> 00:04:18.910
Now let's Save this, for this current board which we just removed.

00:04:18.910 --> 00:04:21.285
This is now removed the input type.

00:04:21.285 --> 00:04:27.945
Let's go to a different board any of this is fine,

00:04:27.945 --> 00:04:33.225
and the new list inputs is still there now this complete board component.

00:04:33.225 --> 00:04:37.730
Also, all it needs to display if the logged in user actually owns it.

00:04:37.730 --> 00:04:44.530
In Firebase, if we go back over to our Console and into the Database,

00:04:44.770 --> 00:04:49.805
inside of our boards, we added a user ID down at the very bottom.

00:04:49.805 --> 00:04:56.135
This use of ABC123 is currently hard-coded when we create a new board.

00:04:56.135 --> 00:04:59.855
This now needs to be changed much the logged in user,

00:04:59.855 --> 00:05:03.195
and we can do this all in the Create board form.

00:05:03.195 --> 00:05:05.285
Let's head over to there,

00:05:05.285 --> 00:05:09.650
inside of our components, inside here,

00:05:09.650 --> 00:05:12.305
we need to access the current logged in user,

00:05:12.305 --> 00:05:16.655
and to the list we can wrap our components in the off consumer.

00:05:16.655 --> 00:05:24.520
Let's go up to the top, and then we can import this, the off consumer,

00:05:24.790 --> 00:05:31.880
which is going to be available from the file path of../components folder,

00:05:31.880 --> 00:05:36.440
and then the off context down to the return section.

00:05:36.440 --> 00:05:39.580
We can now wrap this in the off consumer,

00:05:39.580 --> 00:05:42.690
let's add the components.

00:05:42.690 --> 00:05:44.630
Remember as a child,

00:05:44.630 --> 00:05:48.485
we need to pass in the function which is going to take in the user,

00:05:48.485 --> 00:05:53.700
which has all the logged in user's information set about auto function.

00:05:53.700 --> 00:05:57.905
Then inside of here, we can cut out all of the rest of the content.

00:05:57.905 --> 00:06:03.275
Grabs the form, all the way down to the closing form tag,

00:06:03.275 --> 00:06:07.050
and then we can paste this inside of our function.

00:06:08.570 --> 00:06:12.695
Now we have this user available inside these components,

00:06:12.695 --> 00:06:18.365
we needs pass it to our handle submit method so we can add it to the board objects.

00:06:18.365 --> 00:06:21.515
Let's go down to our own submit method.

00:06:21.515 --> 00:06:24.260
We need to remove this.handleSubmit,

00:06:24.260 --> 00:06:26.450
and then so can pass arguments with this,

00:06:26.450 --> 00:06:28.840
we can use a inline function.

00:06:28.840 --> 00:06:30.980
Setup an arrow function,

00:06:30.980 --> 00:06:34.740
which you can call this.handleSubmit.

00:06:35.030 --> 00:06:40.009
Having this in line will now allow us to pass in the arguments inside the brackets,

00:06:40.009 --> 00:06:42.020
so we need the event information,

00:06:42.020 --> 00:06:43.880
and we also need to grab the user.ID,

00:06:43.880 --> 00:06:48.345
so it will look to handle submits.

00:06:48.345 --> 00:06:52.140
That's an argument we also now need parsing the userID.

00:06:52.140 --> 00:06:56.314
This userID can now be used inside of our board object,

00:06:56.314 --> 00:06:59.970
rather than this hard-coded value of ABC123.

00:07:00.620 --> 00:07:05.020
This user can also be added to the if statement below where we

00:07:05.020 --> 00:07:09.220
checking if the board or title and also the background exists.

00:07:09.220 --> 00:07:14.965
We can also add a third condition to also check if the board or user is available,

00:07:14.965 --> 00:07:17.760
before saving this to Firebase.

00:07:17.760 --> 00:07:21.359
Now, let's save this and go over to the browser.

00:07:21.359 --> 00:07:25.855
This will need to be logged in so we can grab our unique user ID.

00:07:25.855 --> 00:07:27.755
Let's add the e-mail and password,

00:07:27.755 --> 00:07:30.200
which we signed up with earlier.

00:07:30.710 --> 00:07:34.550
Once we'll end up signed in with our email about the top,

00:07:34.550 --> 00:07:36.755
we now need to go to the URL.

00:07:36.755 --> 00:07:39.665
If we go to our users inside a Firebase,

00:07:39.665 --> 00:07:42.780
we can grab our unique user ID.

00:07:42.780 --> 00:07:47.835
We can then use this open URL with forward slash paste this in,

00:07:47.835 --> 00:07:50.525
followed by a forward slash boards.

00:07:50.525 --> 00:07:54.125
We're then taken to the section where we can create a new board,

00:07:54.125 --> 00:07:57.015
and we're now logged in as the current user.

00:07:57.015 --> 00:07:58.950
Now let's create a board name.

00:07:58.950 --> 00:08:00.990
Let's go for our test in,

00:08:00.990 --> 00:08:04.970
change the color, create new boards.

00:08:04.970 --> 00:08:07.655
We'll see if we tried to make this new board,

00:08:07.655 --> 00:08:09.440
that nothing seems to happen.

00:08:09.440 --> 00:08:14.280
If we go over to the database and check inside here,

00:08:14.280 --> 00:08:17.795
we'll see our board is not being added inside here either.

00:08:17.795 --> 00:08:23.040
This is because of the way our user ID is stored inside the Firebase.

00:08:23.040 --> 00:08:25.515
Currently when you're checking if the board title,

00:08:25.515 --> 00:08:29.300
background and the user is there before we save this.

00:08:29.300 --> 00:08:33.040
Well, in fact the board dot user is not recognized.

00:08:33.040 --> 00:08:38.450
This is because if we go to our of context inside here,

00:08:38.450 --> 00:08:40.390
when the state is changed,

00:08:40.390 --> 00:08:42.460
will then update in our user objects,

00:08:42.460 --> 00:08:44.565
to have the ID and email.

00:08:44.565 --> 00:08:46.660
At the moment we're setting the ID to be

00:08:46.660 --> 00:08:53.280
the user dot ID but if we go to Firebase and into authentication,

00:08:53.280 --> 00:08:57.865
the user ID is actually stored in a field called UID.

00:08:57.865 --> 00:09:01.050
We need to now update this inside the context.

00:09:01.050 --> 00:09:02.735
To my Firebase.

00:09:02.735 --> 00:09:06.620
Save this over to our app.

00:09:06.620 --> 00:09:09.650
Let's try testing once more,

00:09:09.650 --> 00:09:13.095
change the color, create new boards.

00:09:13.095 --> 00:09:15.045
Now this has been added.

00:09:15.045 --> 00:09:20.530
Let's just check the user has been recognized inside of our database,

00:09:21.330 --> 00:09:23.840
inside our testing board,

00:09:23.840 --> 00:09:25.595
rather than the hard-coded value.

00:09:25.595 --> 00:09:28.445
Now we have our user ID.

00:09:28.445 --> 00:09:33.580
We can now take advantage of this user ID property on the board and check

00:09:33.580 --> 00:09:38.825
it matches the current logged-in user before rendering out all board components.

00:09:38.825 --> 00:09:41.855
Back on to our board dot js.

00:09:41.855 --> 00:09:44.855
Inside here we're going to add a ternary operator.

00:09:44.855 --> 00:09:47.560
Let's add this just above our board wrapper.

00:09:47.560 --> 00:09:49.475
Inside the curly braces.

00:09:49.475 --> 00:09:53.430
We can check if the user dot ID is equal to

00:09:53.430 --> 00:10:00.290
this dot state dot current boards dot user,

00:10:00.290 --> 00:10:03.500
says about two sets of brackets.

00:10:04.350 --> 00:10:07.005
We can then cut the end section,

00:10:07.005 --> 00:10:12.435
so we can wrap our board components and then we can add this in right at the very end.

00:10:12.435 --> 00:10:14.345
Just after our board wrapper,

00:10:14.345 --> 00:10:16.970
which is here, we can paste this in.

00:10:16.970 --> 00:10:18.875
Inside the L section we're just going to add

00:10:18.875 --> 00:10:22.620
a empty span since we don't need to render out any content.

00:10:22.620 --> 00:10:27.100
Also to keep react happy we can also wrap this inside of a fragments.

00:10:27.100 --> 00:10:29.325
Just inside of the user,

00:10:29.325 --> 00:10:33.470
we can add a react dot fragments.

00:10:33.470 --> 00:10:37.095
You open the tag, grab the closing tag.

00:10:37.095 --> 00:10:39.875
Then we can add this down at the bottom.

00:10:39.875 --> 00:10:43.120
Just after this curly brace.

00:10:43.130 --> 00:10:46.855
Now let's give this a save and go over to the browser,

00:10:46.855 --> 00:10:49.065
into our boards view.

00:10:49.065 --> 00:10:53.865
Remember that only testing was created with this current logged-in user.

00:10:53.865 --> 00:10:56.915
The rest all had a hard-coded board value.

00:10:56.915 --> 00:11:00.320
Now if we click on testing, they should now work.

00:11:00.320 --> 00:11:02.265
We try any leavers.

00:11:02.265 --> 00:11:05.280
We now see that we just get the empty span with

00:11:05.280 --> 00:11:09.095
no content rendered to the screen. As an extra test.

00:11:09.095 --> 00:11:13.905
I'm also going to test this in another browser with a different login user.

00:11:13.905 --> 00:11:19.430
Now let's go to our home component and register a second user.

00:11:19.590 --> 00:11:23.530
Let's sign up with a second email.

00:11:23.550 --> 00:11:29.305
For this, I'm going to open up Firefox or any other second browser is fine.

00:11:29.305 --> 00:11:34.380
We can copy our local host 3000 into Firefox.

00:11:34.380 --> 00:11:37.600
I'm going to now log in as the second user.

00:11:37.600 --> 00:11:40.650
This is one which we just created.

00:11:42.090 --> 00:11:49.700
Click login. Now as a second re-check inside of the original browser,

00:11:49.700 --> 00:11:53.690
I'm going to log in as the original user.

00:11:54.170 --> 00:12:00.525
Go over to our testing board, let's open this,

00:12:00.525 --> 00:12:05.845
so now if we copy the URL which had been created with this user of the Firefox,

00:12:05.845 --> 00:12:08.710
we can now paste this in, hit enter.

00:12:08.710 --> 00:12:12.000
We now see a blank screen because the user which is logged

00:12:12.000 --> 00:12:16.425
in doesn't much the user field inside all of our board.

00:12:16.425 --> 00:12:18.765
This is all working fine.

00:12:18.765 --> 00:12:23.375
Something else which we need a conditional rendering for is this header components.

00:12:23.375 --> 00:12:26.235
We want to group together the user of email and

00:12:26.235 --> 00:12:29.790
logout button and only show these when logged in.

00:12:29.790 --> 00:12:34.870
Once logged out, we then want to remove these and only show the text of please sign in.

00:12:34.870 --> 00:12:36.960
This will be straightforward since

00:12:36.960 --> 00:12:42.420
the header dot js component already has access to the user from the context.

00:12:42.420 --> 00:12:45.860
Let's go over to our header components.

00:12:46.460 --> 00:12:50.440
Inside here we have access to our user inside of

00:12:50.440 --> 00:12:55.910
the consumer so we can scroll down to our user email and also the button.

00:12:55.910 --> 00:12:59.180
We can surround these in a fragment.

00:13:01.050 --> 00:13:08.980
Close this off, take the closing tag and add this just after the button.

00:13:09.470 --> 00:13:16.490
We can then add a ternary operator to check if the user dot ID is present.

00:13:16.490 --> 00:13:20.509
If it is, we are going to run the code inside these first set of brackets.

00:13:20.509 --> 00:13:24.125
If not, the code inside the second set will be run.

00:13:24.125 --> 00:13:25.945
Grab the closing brackets,

00:13:25.945 --> 00:13:28.595
right to the ends cut this out,

00:13:28.595 --> 00:13:32.295
paste this in just after the end of our fragments.

00:13:32.295 --> 00:13:38.820
Then we can grab the small section of please sign in and paste this in the else section.

00:13:38.820 --> 00:13:42.240
Save this and we can test this over in the browser.

00:13:42.240 --> 00:13:47.805
We're currently logged in and we see the logout button and the user email.

00:13:47.805 --> 00:13:49.475
If we click logout,

00:13:49.475 --> 00:13:53.425
this is now removed and we get the text of please sign-in.

00:13:53.425 --> 00:14:00.070
We will also back-up all the security soon when we add some permissions onto the server.

00:14:00.070 --> 00:14:02.805
Next, we'll stick with the conditional rendering

00:14:02.805 --> 00:14:06.690
by only displaying the boards for the current user.
