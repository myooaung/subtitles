WEBVTT
1
00:00:01.880 --> 00:00:04.426
The final steps for the server-side implementation are to

2
00:00:04.426 --> 00:00:08.017
implement the controller and service that tie appointment UI

3
00:00:08.017 --> 00:00:10.085
requests to the persistence layer.

4
00:00:10.085 --> 00:00:11.848
Once again, to keep focus on JHipster,

5
00:00:11.848 --> 00:00:16.532
I'm just going to show you how to drop the code in from a GitHub repository.

6
00:00:16.532 --> 00:00:19.452
I'll start by displaying the appointment service class.

7
00:00:19.452 --> 00:00:22.864
This is a very simple implementation that acts as a passthrough from

8
00:00:22.864 --> 00:00:25.942
the REST controller layer to the persistence layer.

9
00:00:25.942 --> 00:00:29.498
Then, I'll be displaying the appointment REST controller class.

10
00:00:29.498 --> 00:00:34.548
This controller exposes two endpoints for getting and posting appointment data.

11
00:00:34.548 --> 00:00:35.491
In this class,

12
00:00:35.491 --> 00:00:38.007
I'll take the opportunity to leverage user features

13
00:00:38.007 --> 00:00:41.510
provided to us as part of JHipster generation.

14
00:00:41.510 --> 00:00:42.577
Before we dive in,

15
00:00:42.577 --> 00:00:45.217
let's take a look at how JHipster configured the

16
00:00:45.217 --> 00:00:48.250
application to support these new classes.

17
00:00:48.250 --> 00:00:50.125
I'm displaying the Spring Security Configuration

18
00:00:50.125 --> 00:00:52.065
class that was generated by JHipster.

19
00:00:52.065 --> 00:00:55.854
You can find this class in the package com.

20
00:00:55.854 --> 00:00:56.972
Pluralsight.

21
00:00:56.972 --> 00:00:58.090
patientportal.

22
00:00:58.090 --> 00:00:59.208
config.

23
00:00:59.208 --> 00:01:02.673
The key line that I'm going to focus on is the antMatchers line

24
00:01:02.673 --> 00:01:05.750
found in the configure method of the class.

25
00:01:05.750 --> 00:01:10.218
This antMatcher performs a wildcard match on API endpoints to ensure that,

26
00:01:10.218 --> 00:01:13.818
at a minimum, the user is authenticated before they can access them.

27
00:01:13.818 --> 00:01:17.135
I point this out as we will be adding another

28
00:01:17.135 --> 00:01:19.629
endpoint as part of the REST controller.

29
00:01:19.629 --> 00:01:23.845
Very commonly, I've heard developers as how they can protect their API calls.

30
00:01:23.845 --> 00:01:28.265
Here, JHipster has already done it for us as part of the scaffolding.

31
00:01:28.265 --> 00:01:31.132
Let's look at the next configuration of relevance.

32
00:01:31.132 --> 00:01:33.883
I'm displaying the definition for the Spring Web

33
00:01:33.883 --> 00:01:35.952
Configuration class generated by JHipster.

34
00:01:35.952 --> 00:01:38.658
It's found in the package com.

35
00:01:38.658 --> 00:01:39.208
Pluralsight.

36
00:01:39.208 --> 00:01:39.758
patientportal.

37
00:01:39.758 --> 00:01:40.308
config.

38
00:01:40.308 --> 00:01:44.181
There's quite a bit defined in this class,

39
00:01:44.181 --> 00:01:46.428
including customizations of the servlet engine,

40
00:01:46.428 --> 00:01:48.366
a CorsFilter, and metrics.

41
00:01:48.366 --> 00:01:52.242
However, most of it is standard Spring configuration.

42
00:01:52.242 --> 00:01:56.114
The reason for showing this is simply so that you're aware of it when you're

43
00:01:56.114 --> 00:01:58.994
creating controllers and other web component features.

44
00:01:58.994 --> 00:02:03.948
Now, let's add the service class to the application.

45
00:02:03.948 --> 00:02:05.466
I've once again opened up Eclipse,

46
00:02:05.466 --> 00:02:07.651
and we're going to copy the file AppointmentService,

47
00:02:07.651 --> 00:02:14.044
that's found in the GitHub project under the folder

48
00:02:14.044 --> 00:02:17.137
java/com/Pluralsight/patientportal/service.

49
00:02:17.137 --> 00:02:19.923
We'll go back up to the project,

50
00:02:19.923 --> 00:02:23.108
and I'll paste it into the corresponding package.

51
00:02:23.108 --> 00:02:28.993
Okay our AppointmentService is now in the project, let's talk about it a bit.

52
00:02:28.993 --> 00:02:31.971
I'm showing the AppointmentService class that we just copied over,

53
00:02:31.971 --> 00:02:34.580
I've stripped out some of the code and comments to focus on the

54
00:02:34.580 --> 00:02:37.235
key behaviors that are found in the service.

55
00:02:37.235 --> 00:02:38.323
In the first two lines,

56
00:02:38.323 --> 00:02:41.176
note that I've annotated this class as a service to be

57
00:02:41.176 --> 00:02:43.403
managed as a component by Spring.

58
00:02:43.403 --> 00:02:45.244
And, annotated the class with Transactional,

59
00:02:45.244 --> 00:02:48.005
as it will leverage Spring's transaction support.

60
00:02:48.005 --> 00:02:51.582
The first method I've created is save.

61
00:02:51.582 --> 00:02:54.982
It will persist an appointment to the database using the appointment

62
00:02:54.982 --> 00:02:58.235
repository that we just previously copied over.

63
00:02:58.235 --> 00:03:02.671
The second method finds all appointments by the logged in user's ID.

64
00:03:02.671 --> 00:03:03.294
Once again,

65
00:03:03.294 --> 00:03:06.525
retrieval of this data from the database comes from the

66
00:03:06.525 --> 00:03:08.366
appointment repository that we created.

67
00:03:08.366 --> 00:03:11.543
As this service is really just wrapping the calls to the repository,

68
00:03:11.543 --> 00:03:14.076
you might be asking; do I really need this?

69
00:03:14.076 --> 00:03:16.499
While JHipster will generate service classes for you,

70
00:03:16.499 --> 00:03:18.737
you are certainly not required to leverage services,

71
00:03:18.737 --> 00:03:22.594
and in cases like this you could simply just use the

72
00:03:22.594 --> 00:03:24.941
repository directly in the REST controller.

73
00:03:24.941 --> 00:03:28.736
Now, let's add that REST controller.

74
00:03:28.736 --> 00:03:30.615
I've again opened up Eclipse to the project,

75
00:03:30.615 --> 00:03:32.787
and I'm going to copy over the AppointmentResource.

76
00:03:32.787 --> 00:03:41.768
java file that's found in the folder of the GitHub project

77
00:03:41.768 --> 00:03:43.432
java/com/Pluralsight/patientportal/web/rest.

78
00:03:43.432 --> 00:03:46.472
Copy it, move back up to the project,

79
00:03:46.472 --> 00:03:49.891
and again I'll paste it in the corresponding package.

80
00:03:49.891 --> 00:03:51.524
If you didn't delete that resource earlier,

81
00:03:51.524 --> 00:03:53.852
you'll just have to override it here.

82
00:03:53.852 --> 00:03:58.501
So now, let's talk about what this resource class contains.

83
00:03:58.501 --> 00:04:00.575
I'm displaying the first part of the appointment REST

84
00:04:00.575 --> 00:04:02.239
controller that was just copied over.

85
00:04:02.239 --> 00:04:06.794
In the first two lines, I've annotated the class as a Spring RestController,

86
00:04:06.794 --> 00:04:10.031
and I've added a RequestMapping of /api.

87
00:04:10.031 --> 00:04:11.476
As I showed you earlier,

88
00:04:11.476 --> 00:04:15.161
the API mapping is currently protected by Spring security by

89
00:04:15.161 --> 00:04:17.933
being accessed by non-authenticated users.

90
00:04:17.933 --> 00:04:20.095
This RestController will leverage the appointment

91
00:04:20.095 --> 00:04:21.897
service that was added earlier.

92
00:04:21.897 --> 00:04:24.555
It will also leverage a userService.

93
00:04:24.555 --> 00:04:26.327
What is this userService?

94
00:04:26.327 --> 00:04:29.466
This is a class that was generated for you by JHipster.

95
00:04:29.466 --> 00:04:34.700
It includes about 15 behaviors on the user entity that was provided to you.

96
00:04:34.700 --> 00:04:39.269
I'm going to show you how I used it in the RestController behavior shortly.

97
00:04:39.269 --> 00:04:42.033
The first method on the appointment REST controller exposes an

98
00:04:42.033 --> 00:04:47.086
endpoint to retrieve all appointments using an HTTP get.

99
00:04:47.086 --> 00:04:48.113
As you would expect,

100
00:04:48.113 --> 00:04:50.658
I'm leveraging the appointmentService that we dropped in

101
00:04:50.658 --> 00:04:52.761
earlier for retrieving the appointments.

102
00:04:52.761 --> 00:04:53.625
But in addition,

103
00:04:53.625 --> 00:04:58.786
here I'm using the UserService to get the currently authenticated users ID.

104
00:04:58.786 --> 00:05:02.145
And here we have the second method on the appointment REST controller,

105
00:05:02.145 --> 00:05:07.526
which exposes an endpoint to create an appointment using an HTTP post.

106
00:05:07.526 --> 00:05:10.503
The code includes some additional validation checks before leveraging

107
00:05:10.503 --> 00:05:14.157
the appointment service to persist the appointment.

108
00:05:14.157 --> 00:05:14.638
Once again,

109
00:05:14.638 --> 00:05:18.324
I want to point out that I'm using the userService that was generated by

110
00:05:18.324 --> 00:05:21.794
JHipster here to get the currently logged in user ID.

111
00:05:21.794 --> 00:05:23.358
Now that the code's in place,

112
00:05:23.358 --> 00:05:26.225
let's try an end to end test of the new functionality.

113
00:05:26.225 --> 00:05:29.340
Note that I've already started by client and server for the demo,

114
00:05:29.340 --> 00:05:32.740
so I'm not going to show you this again.

115
00:05:32.740 --> 00:05:36.212
I've again opened up the browser to the homepage of the application.

116
00:05:36.212 --> 00:05:39.343
Let's log in as the user account.

117
00:05:39.343 --> 00:05:41.580
Now that I'm signed in,

118
00:05:41.580 --> 00:05:45.872
let's navigate to that Appointments page that we created earlier,

119
00:05:45.872 --> 00:05:50.000
and here we see a line of test data in the Appointments table.

120
00:05:50.000 --> 00:05:54.555
This is the data that was preloaded by the Liquibase scripts.

121
00:05:54.555 --> 00:05:58.585
So this validates that our get endpoint is working successfully,

122
00:05:58.585 --> 00:05:59.898
let's test out the post endpoint.

123
00:05:59.898 --> 00:06:02.239
I'm going to select to create a new appointment,

124
00:06:02.239 --> 00:06:05.070
and let's put in some dummy data.

125
00:06:05.070 --> 00:06:09.119
Start with the Reason as injury, I'll keep the Insurance Change blank,

126
00:06:09.119 --> 00:06:11.933
and we'll put in a Phone Number.

127
00:06:11.933 --> 00:06:13.069
Now let's click Save,

128
00:06:13.069 --> 00:06:16.671
and there we see our alert that the appointment was created successfully.

129
00:06:16.671 --> 00:06:19.111
We see the new line of data,

130
00:06:19.111 --> 00:06:23.066
so that validates that our change worked successfully.

131
00:06:23.066 --> 00:06:25.434
Now there's one more thing that I want to test.

132
00:06:25.434 --> 00:06:27.107
We were able to create this data as a user,

133
00:06:27.107 --> 00:06:29.984
but I want to log in as an admin and make sure that

134
00:06:29.984 --> 00:06:31.690
the admin can't see this data.

135
00:06:31.690 --> 00:06:38.630
So let's log out, and again I'll sign in, this time I'll sign in as an admin.

136
00:06:38.630 --> 00:06:43.319
So navigate to the Appointments page, and I see no test data.

137
00:06:43.319 --> 00:06:44.686
So this means it's successful.

138
00:06:44.686 --> 00:06:48.234
I don't see the information that was actually added for the user,

139
00:06:48.234 --> 00:06:50.779
so this validates the end to end functionality.

140
00:06:50.779 --> 00:06:57.000
Everything's working as expected. Let's summarize what we learned.

