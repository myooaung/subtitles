1
00:00:02,556 --> 00:00:06,212
The next step for the server-side implementation is to implement persistence of

2
00:00:06,212 --> 00:00:10,072
appointment data into the database table that we defined.

3
00:00:10,072 --> 00:00:11,130
To keep focus on JHipster,

4
00:00:11,130 --> 00:00:15,600
I'll just be showing you how to drop in the code from a GitHub repository.

5
00:00:15,600 --> 00:00:18,353
I'll be displaying the appointment entity class.

6
00:00:18,353 --> 00:00:20,985
This leverages JPA annotations to map the class

7
00:00:20,985 --> 00:00:22,875
members to the database table columns.

8
00:00:22,875 --> 00:00:27,233
As the entity will also be passed up to the service and API layer,

9
00:00:27,233 --> 00:00:30,875
I'll be adding Java validation annotations to some of the columns.

10
00:00:30,875 --> 00:00:34,149
I'll then be displaying the appointment repository class.

11
00:00:34,149 --> 00:00:37,392
This extends Spring's JPA repository interface,

12
00:00:37,392 --> 00:00:41,825
providing access for operations against the appointment table.

13
00:00:41,825 --> 00:00:43,077
Before we see this code,

14
00:00:43,077 --> 00:00:48,309
let's first look at what JHipster generated for you to support database access.

15
00:00:48,309 --> 00:00:52,692
I'm showing the database configuration class that was generated by JHipster.

16
00:00:52,692 --> 00:00:57,102
You'll find this class in the package com.

17
00:00:57,102 --> 00:00:57,653
Pluralsight.

18
00:00:57,653 --> 00:00:58,205
patientportal.

19
00:00:58,205 --> 00:00:58,756
config.

20
00:00:58,756 --> 00:01:02,060
If you've worked with Spring configuration for databases in the past,

21
00:01:02,060 --> 00:01:04,391
most of this should be familiar to you.

22
00:01:04,391 --> 00:01:06,898
If not, let's walk through some of this.

23
00:01:06,898 --> 00:01:11,773
The first line is Spring's annotation to define this as a configuration class.

24
00:01:11,773 --> 00:01:16,344
The next line defines the package to be scanned for JPA repositories.

25
00:01:16,344 --> 00:01:20,973
Our new appointment repository class is going to reside in this package.

26
00:01:20,973 --> 00:01:25,898
Next, you'll see a line defining an annotation for enabling JPA auditing.

27
00:01:25,898 --> 00:01:29,173
JHipster has provided support for you out of the box to audit data,

28
00:01:29,173 --> 00:01:32,971
including created by, modified by, created date,

29
00:01:32,971 --> 00:01:34,598
and updated date.

30
00:01:34,598 --> 00:01:38,703
The springSecurityAuditorAware bean has also been defined to tie the

31
00:01:38,703 --> 00:01:43,248
currently logged in user or system user for audit purposes.

32
00:01:43,248 --> 00:01:47,759
The final annotation in the class enables Spring's

33
00:01:47,759 --> 00:01:49,450
transaction monument capabilities.

34
00:01:49,450 --> 00:01:53,896
Within the class definition, JHipster has two defined beans.

35
00:01:53,896 --> 00:01:57,267
The first allows for TCP connection to the H2

36
00:01:57,267 --> 00:01:59,139
database used in local development.

37
00:01:59,139 --> 00:02:00,911
Note the profile annotation.

38
00:02:00,911 --> 00:02:06,329
JHipster provides several constants for you as predefined Spring profile names.

39
00:02:06,329 --> 00:02:07,390
In this case,

40
00:02:07,390 --> 00:02:12,308
JHipster is using the development profile to restrict the bean's registration.

41
00:02:12,308 --> 00:02:16,586
The second bean defines the Liquibase configuration.

42
00:02:16,586 --> 00:02:18,913
Note that JHipster has brought in another of its

43
00:02:18,913 --> 00:02:21,120
dependencies as part of this definition.

44
00:02:21,120 --> 00:02:24,279
The TaskExecutor pass will support JHipster's custom

45
00:02:24,279 --> 00:02:27,308
implementation of Spring's Liquibase integration.

46
00:02:27,308 --> 00:02:30,461
The reason for extending this integration is that JHipster is providing

47
00:02:30,461 --> 00:02:34,671
asynchronous execution of the Liquibase schema tasks.

48
00:02:34,671 --> 00:02:37,792
This is another case where JHipster is going above and beyond basic

49
00:02:37,792 --> 00:02:42,569
scaffolding to provide a real-world solution to a common problem.

50
00:02:42,569 --> 00:02:45,722
Liquibase can take a long time to load a schema change,

51
00:02:45,722 --> 00:02:49,826
so this feature reduces the overall time to start a server that leverages it.

52
00:02:49,826 --> 00:02:51,304
That covers the database configuration,

53
00:02:51,304 --> 00:02:56,739
so now let's drop in the entity and repository.

54
00:02:56,739 --> 00:02:57,997
I've once again opened up Eclipse,

55
00:02:57,997 --> 00:03:02,835
and I have the patient-portal-resources project from GitHub.

56
00:03:02,835 --> 00:03:05,368
We're going to start by copying over the Appointment.

57
00:03:05,368 --> 00:03:07,677
java file that represents our entity.

58
00:03:07,677 --> 00:03:12,182
I'll select that and Copy it, I'll scroll back up to the project.

59
00:03:12,182 --> 00:03:14,802
Now note here, we already stubbed out appointment,

60
00:03:14,802 --> 00:03:18,311
so I'm just going to replace it.

61
00:03:18,311 --> 00:03:22,270
Great, now we have the appointment dropped in, but we also need the repository.

62
00:03:22,270 --> 00:03:24,404
Let's scroll down.

63
00:03:24,404 --> 00:03:26,538
I'll select AppointmentRepository.

64
00:03:26,538 --> 00:03:27,249
java.

65
00:03:27,249 --> 00:03:30,605
And we'll copy it, let's scroll back up again,

66
00:03:30,605 --> 00:03:33,936
and I'll paste it into the repository package.

67
00:03:33,936 --> 00:03:37,614
Now you might notice that there's an error.

68
00:03:37,614 --> 00:03:42,276
That error is because we've replaced the appointment entity.

69
00:03:42,276 --> 00:03:45,639
We can just resolve that by opening up the web.

70
00:03:45,639 --> 00:03:50,781
rest package, and for now deleting AppointmentResource.

71
00:03:50,781 --> 00:03:53,501
Obviously, we'll be adding that resource in shortly,

72
00:03:53,501 --> 00:03:55,506
but we no longer need the stub.

73
00:03:55,506 --> 00:03:58,730
So, now I have the repository and the entity added,

74
00:03:58,730 --> 00:04:02,926
let's talk about it in a little more detail.

75
00:04:02,926 --> 00:04:06,689
I'm displaying some of the code for the appointment entity class.

76
00:04:06,689 --> 00:04:09,532
This is a straightforward JPA entity.

77
00:04:09,532 --> 00:04:13,835
One thing to note here is that we have a foreign key reference to the userId.

78
00:04:13,835 --> 00:04:18,485
This is the Id of a user defined by JHipster's generated database schema.

79
00:04:18,485 --> 00:04:21,737
The reason we have the userId as a foreign key reference is

80
00:04:21,737 --> 00:04:24,947
that I want to restrict users so that they see only the

81
00:04:24,947 --> 00:04:26,351
appointments that they've created.

82
00:04:26,351 --> 00:04:31,800
Other than the userId, we have the id column configured as a sequence,

83
00:04:31,800 --> 00:04:35,083
the reason column, the insuranceChange flag column,

84
00:04:35,083 --> 00:04:36,967
and the phoneNumber Colum.

85
00:04:36,967 --> 00:04:39,834
Next, let's look at the AppointmentRepository.

86
00:04:39,834 --> 00:04:43,249
I'm displaying here the appointment repository class.

87
00:04:43,249 --> 00:04:48,542
This is simply an extension of the Spring data JpaRepository interface.

88
00:04:48,542 --> 00:04:52,576
Note the first line has the Spring repository annotation.

89
00:04:52,576 --> 00:04:56,591
Also note that I've added an additional method on the repository.

90
00:04:56,591 --> 00:04:59,720
The purpose of this method is to return appointments only

91
00:04:59,720 --> 00:05:02,386
if they are associated to a userId,

92
00:05:02,386 --> 00:05:06,467
which we'll be passing in as the current user's id.

93
00:05:06,467 --> 00:05:11,082
With the addition of this class, everything needed for persistence is in place.

94
00:05:11,082 --> 00:05:13,086
I'll continue building out the server-side so that we can

95
00:05:13,086 --> 00:05:15,090
test it in full when we're complete.

96
00:05:15,090 --> 00:05:16,373
With that in mind,

97
00:05:16,373 --> 00:05:22,000
let's move on to creating a REST controller class and a service class for appointments.

