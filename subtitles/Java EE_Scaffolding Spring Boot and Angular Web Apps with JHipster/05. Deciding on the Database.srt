1
00:00:02,005 --> 00:00:04,833
JHipster gives you a lot of flexibility for selecting the database

2
00:00:04,833 --> 00:00:07,487
that your application is going to work with.

3
00:00:07,487 --> 00:00:08,238
As you can see,

4
00:00:08,238 --> 00:00:12,333
the first selection you need to make is the type of database you want to use.

5
00:00:12,333 --> 00:00:14,360
There are three options presented.

6
00:00:14,360 --> 00:00:16,802
The first is to use a SQL database.

7
00:00:16,802 --> 00:00:22,375
The second and third are NoSQL databases called MongoDB and Cassandra.

8
00:00:22,375 --> 00:00:26,934
For this demo, I'm going to stick with SQL as it's the most common option.

9
00:00:26,934 --> 00:00:29,559
Now that I've selected SQL for the database type,

10
00:00:29,559 --> 00:00:32,782
I'm presented with different SQL database products.

11
00:00:32,782 --> 00:00:38,624
They include MySQL, MariaDB, PostgreSQL, Oracle, and SQL Server.

12
00:00:38,624 --> 00:00:39,396
Also note,

13
00:00:39,396 --> 00:00:43,641
the question highlights this as a selection for the production database.

14
00:00:43,641 --> 00:00:45,215
Well what does that mean?

15
00:00:45,215 --> 00:00:48,292
Production refers to a database used in any environment

16
00:00:48,292 --> 00:00:51,353
other than a local one for development.

17
00:00:51,353 --> 00:00:54,400
We'll select the development database next.

18
00:00:54,400 --> 00:01:00,278
First, I'm going to select SQL Server, and sure enough,

19
00:01:00,278 --> 00:01:04,434
the next decision is for the development database product used.

20
00:01:04,434 --> 00:01:06,649
Note that the first two options are for H2,

21
00:01:06,649 --> 00:01:09,160
which is commonly used when the production database

22
00:01:09,160 --> 00:01:11,831
can't be run on a local workstation.

23
00:01:11,831 --> 00:01:14,681
With the ease and availability in installation for SQL Server,

24
00:01:14,681 --> 00:01:17,022
you may want to select it for consistency.

25
00:01:17,022 --> 00:01:21,334
However, for this course, I'm going to select H2 with disk persistence,

26
00:01:21,334 --> 00:01:24,427
to reduce the number of prerequisites.

27
00:01:24,427 --> 00:01:25,098
Please note,

28
00:01:25,098 --> 00:01:28,984
I chose disk-based persistence as I've had trouble in the past

29
00:01:28,984 --> 00:01:30,990
querying in-memory persistence at runtime.

30
00:01:30,990 --> 00:01:32,544
So let's select the option.

31
00:01:32,544 --> 00:01:37,065
The next decision you'll be prompted with is for second level cash.

32
00:01:37,065 --> 00:01:42,000
JHipster generates your project using JPA, with Hibernate as the provider.

33
00:01:42,000 --> 00:01:45,733
By default, Hibernate caches objects within its current session.

34
00:01:45,733 --> 00:01:50,187
However, second level cache will cache object across sessions.

35
00:01:50,187 --> 00:01:52,102
Second level cache can improve the overall performance

36
00:01:52,102 --> 00:01:53,381
of your application's data access,

37
00:01:53,381 --> 00:01:56,643
but it does come with the requirement of a cache provider,

38
00:01:56,643 --> 00:01:59,224
as well as some additional complexity.

39
00:01:59,224 --> 00:02:03,220
As noted by the options, each cache is used for a single node,

40
00:02:03,220 --> 00:02:05,742
while Hazelcast and Infinispan are used for distributed

41
00:02:05,742 --> 00:02:07,391
cache in a clustered environment.

42
00:02:07,391 --> 00:02:10,116
While this is often recommended for performance improvements,

43
00:02:10,116 --> 00:02:12,858
I'd again like to keep this demo simple,

44
00:02:12,858 --> 00:02:15,530
so I'll be choosing No for this option.

45
00:02:15,530 --> 00:02:19,103
You should evaluate for yourself if you require this

46
00:02:19,103 --> 00:02:20,691
type of performance improvement.

47
00:02:20,691 --> 00:02:25,770
Let's look at what JHipster will generate for these options that were selected.

48
00:02:25,770 --> 00:02:29,391
There are three key assets that JHipster generates for database support.

49
00:02:29,391 --> 00:02:33,996
First, JHipster will generate the full configuration for your data source.

50
00:02:33,996 --> 00:02:37,020
Configurations will be available for different Spring profiles,

51
00:02:37,020 --> 00:02:40,479
including a development and production profile.

52
00:02:40,479 --> 00:02:44,494
Next, JHipster generates Liquibase configuration.

53
00:02:44,494 --> 00:02:49,273
Liquibase is a tool that supports management of the database schema.

54
00:02:49,273 --> 00:02:52,189
JHipster provides you with an initial schema that includes

55
00:02:52,189 --> 00:02:54,622
database tables for security support.

56
00:02:54,622 --> 00:02:58,238
Finally, JHipster generates the JPA entities for you.

57
00:02:58,238 --> 00:02:58,992
To start,

58
00:02:58,992 --> 00:03:02,342
these entities map to the database tables created

59
00:03:02,342 --> 00:03:04,520
through Liquibase for security.

60
00:03:04,520 --> 00:03:07,667
JHipster's database support is another feature that makes it

61
00:03:07,667 --> 00:03:10,173
stand tall above other scaffolding tools.

62
00:03:10,173 --> 00:03:10,604
Oftentimes,

63
00:03:10,604 --> 00:03:15,335
one of the most challenging tasks we face as developers is to work

64
00:03:15,335 --> 00:03:19,238
with an application that uses a local data store.

65
00:03:19,238 --> 00:03:22,273
JHipster is standardizing schema management right up front for you,

66
00:03:22,273 --> 00:03:25,781
which should help with the time it takes to develop locally,

67
00:03:25,781 --> 00:03:29,533
and the time it takes to maintain and implement schema changes.

68
00:03:29,533 --> 00:03:37,000
That covers JHipster's database support. The next decision is around the build tool to be used.

