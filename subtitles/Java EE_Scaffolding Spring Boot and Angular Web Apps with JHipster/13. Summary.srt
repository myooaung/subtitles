1
00:00:01,926 --> 00:00:02,667
In this module,

2
00:00:02,667 --> 00:00:05,943
we learned about the decisions that are required to use JHipster

3
00:00:05,943 --> 00:00:09,108
for generating a monolithic web application.

4
00:00:09,108 --> 00:00:12,741
I focused on six of the major decisions that need to be made.

5
00:00:12,741 --> 00:00:15,818
I showed how JHipster can generate projects that can support both

6
00:00:15,818 --> 00:00:18,930
a monolithic and microservice architecture.

7
00:00:18,930 --> 00:00:20,226
For the monolithic architecture,

8
00:00:20,226 --> 00:00:23,757
I talked about what JHipster actually generates for the client,

9
00:00:23,757 --> 00:00:25,668
the server, and the utilities.

10
00:00:25,668 --> 00:00:28,520
I explained the options for authentication in detail.

11
00:00:28,520 --> 00:00:33,551
These options included stateless authentication using JWT or Auth2,

12
00:00:33,551 --> 00:00:38,500
and the more common stateful authentication using HTTP Sessions.

13
00:00:38,500 --> 00:00:40,801
I also covered what JHipster generates for you,

14
00:00:40,801 --> 00:00:43,302
including security configuration, users,

15
00:00:43,302 --> 00:00:44,553
and roles.

16
00:00:44,553 --> 00:00:47,302
I covered the options for database selection.

17
00:00:47,302 --> 00:00:51,012
JHipster supports both SQL and NoSQL database types.

18
00:00:51,012 --> 00:00:51,307
Also,

19
00:00:51,307 --> 00:00:53,959
JHipster allows you to select a different database when

20
00:00:53,959 --> 00:00:55,979
running in a development environment,

21
00:00:55,979 --> 00:00:58,808
and when running in a production environment.

22
00:00:58,808 --> 00:01:03,525
Finally, JHipster supports schema management for the database via Liquibase.

23
00:01:03,525 --> 00:01:05,951
I discussed what JHipster generates when selecting Gradle as

24
00:01:05,951 --> 00:01:08,822
the primary build tool for the application.

25
00:01:08,822 --> 00:01:11,775
This included common tasks like compile and test,

26
00:01:11,775 --> 00:01:17,461
as well as support tasks, like Liquibase for database schema management.

27
00:01:17,461 --> 00:01:20,131
I discussed the options for client-side frameworks,

28
00:01:20,131 --> 00:01:23,605
and why Angular 4 is the recommended choice.

29
00:01:23,605 --> 00:01:24,093
Finally,

30
00:01:24,093 --> 00:01:27,390
I provided detail around additional testing frameworks that are

31
00:01:27,390 --> 00:01:31,313
supported on top of the default unit test frameworks,

32
00:01:31,313 --> 00:01:33,243
JUnit and Karma.

33
00:01:33,243 --> 00:01:34,010
We selected Protractor,

34
00:01:34,010 --> 00:01:37,714
as it provides end to end testing that supports Angular applications.

35
00:01:37,714 --> 00:01:39,925
With the project generated,

36
00:01:39,925 --> 00:01:48,000
the next step is to start developing a feature in order to understand the benefits that we achieved from scaffolding.

