1
00:00:00,000 --> 00:00:05,879
Hello, I'm Michael Hoffman, and welcome to the course.

2
00:00:05,879 --> 00:00:06,680
In this first module,

3
00:00:06,680 --> 00:00:09,497
I'm going to explain to you why it's important to start

4
00:00:09,497 --> 00:00:12,544
developing Java web applications with scaffolding.

5
00:00:12,544 --> 00:00:15,965
You'll also learn why JHipster may be the best

6
00:00:15,965 --> 00:00:17,865
option of generating the scaffolding.

7
00:00:17,865 --> 00:00:23,562
To begin, think about the last time that you created a new Java web application.

8
00:00:23,562 --> 00:00:29,064
Commonly, projects are either created using a manual, or an automated approach.

9
00:00:29,064 --> 00:00:32,181
When you created your last project, did you download the dependencies,

10
00:00:32,181 --> 00:00:35,024
write your own build scripts, automation scripts,

11
00:00:35,024 --> 00:00:36,950
configuration scripts, and security, or,

12
00:00:36,950 --> 00:00:41,550
did you generate a project from a tool, or command line interface?

13
00:00:41,550 --> 00:00:43,342
Did the generated project give you everything that

14
00:00:43,342 --> 00:00:48,197
you needed to be production ready, or did you still have to perform manual steps?

15
00:00:48,197 --> 00:00:51,639
Let's look at these approaches in some more detail.

16
00:00:51,639 --> 00:00:55,311
I know that when I've tried to create a project entirely from manual steps,

17
00:00:55,311 --> 00:00:58,800
I've often faced a lot of challenges.

18
00:00:58,800 --> 00:01:02,973
One of the biggest challenges that I've faced is the decision-making process.

19
00:01:02,973 --> 00:01:07,108
During project creation, there's a lot of decisions that need to be made.

20
00:01:07,108 --> 00:01:11,217
I need to ask questions such as what Spring profiles am I going to use,

21
00:01:11,217 --> 00:01:14,160
are developers going to want an imbedded local database,

22
00:01:14,160 --> 00:01:16,947
how am I going to implement security?

23
00:01:16,947 --> 00:01:18,295
Even after I make these decisions,

24
00:01:18,295 --> 00:01:21,658
it may take me one or more attempts just to get the implementation right.

25
00:01:21,658 --> 00:01:22,441
As a result,

26
00:01:22,441 --> 00:01:27,543
it takes me a lot of time just to get the foundation of an application in place.

27
00:01:27,543 --> 00:01:29,472
Likely, I'm going to run into time constraints,

28
00:01:29,472 --> 00:01:32,189
so there's also a good chance I'll be cutting corners and leaving

29
00:01:32,189 --> 00:01:34,563
out a key part of the application plumbing.

30
00:01:34,563 --> 00:01:37,119
Instead of using a manual approach,

31
00:01:37,119 --> 00:01:41,735
what if I used tooling to generate the project foundation for me?

32
00:01:41,735 --> 00:01:42,706
When you use tooling,

33
00:01:42,706 --> 00:01:46,275
such as generating a project from a command line or a website,

34
00:01:46,275 --> 00:01:47,901
you're starting with scaffolding.

35
00:01:47,901 --> 00:01:50,891
Scaffolding is any type of code structure that supports

36
00:01:50,891 --> 00:01:54,647
the process of building an application.

37
00:01:54,647 --> 00:01:56,812
The approach to scaffolding is two-fold.

38
00:01:56,812 --> 00:02:01,805
With scaffolding, you make decisions right at project creation time.

39
00:02:01,805 --> 00:02:04,506
The important difference from manual project creation is that

40
00:02:04,506 --> 00:02:07,847
scaffolding helps you not only make the obvious decisions,

41
00:02:07,847 --> 00:02:10,285
but also those less obvious ones.

42
00:02:10,285 --> 00:02:13,226
These less obvious decisions often aren't made until later

43
00:02:13,226 --> 00:02:17,255
in the project development life cycle, where they become more expensive,

44
00:02:17,255 --> 00:02:20,194
and much more difficult to implement.

45
00:02:20,194 --> 00:02:23,893
Scaffolding can also enforce the use of best practices.

46
00:02:23,893 --> 00:02:26,605
It's likely that the tool used to generate scaffolding is being

47
00:02:26,605 --> 00:02:29,681
updated to support the latest and greatest approach.

48
00:02:29,681 --> 00:02:33,548
This can be a significant difference for manual project creation,

49
00:02:33,548 --> 00:02:36,120
where you often follow practices that you're familiar with.

50
00:02:36,120 --> 00:02:39,603
Even if those practices may no longer be relevant.

51
00:02:39,603 --> 00:02:44,292
By taking this approach, what benefits should you get from scaffolding?

52
00:02:44,292 --> 00:02:47,491
I'm going to cover four main benefits that I have observed from

53
00:02:47,491 --> 00:02:52,442
using scaffolding over manual project creation.

54
00:02:52,442 --> 00:02:54,593
The first, and most important,

55
00:02:54,593 --> 00:02:57,605
is improved quality throughout the project lifecycle.

56
00:02:57,605 --> 00:02:59,837
Because you're making standardized decisions early,

57
00:02:59,837 --> 00:03:03,517
you'll reduce the chances of quality gaps later in the project,

58
00:03:03,517 --> 00:03:05,796
such as the lack of a testing framework,

59
00:03:05,796 --> 00:03:07,505
or the lack of deployment automation.

60
00:03:07,505 --> 00:03:10,333
Because you're choosing best practices that are modern,

61
00:03:10,333 --> 00:03:17,147
you should also gain an increase in the stability of the application.

62
00:03:17,147 --> 00:03:18,134
Along with improved quality,

63
00:03:18,134 --> 00:03:22,680
you should see a reduction in the time that it takes to complete a project.

64
00:03:22,680 --> 00:03:23,782
If for example,

65
00:03:23,782 --> 00:03:26,339
you didn't consider deployment automation until late in development,

66
00:03:26,339 --> 00:03:29,694
you might be forced to make a lot of code changes just to support it.

67
00:03:29,694 --> 00:03:32,328
And you can be sure that you'll be spending a lot of time

68
00:03:32,328 --> 00:03:33,890
discussing options with team members,

69
00:03:33,890 --> 00:03:37,148
who will likely be more stressed mid-project lifecycle,

70
00:03:37,148 --> 00:03:41,667
than they would have been at the start.

71
00:03:41,667 --> 00:03:43,759
Along with the quality of the project's foundation,

72
00:03:43,759 --> 00:03:47,466
scaffolding should also improve the quality of the overall solution.

73
00:03:47,466 --> 00:03:47,731
Why?

74
00:03:47,731 --> 00:03:50,882
Because you and your project team could focus on the important tasks,

75
00:03:50,882 --> 00:03:54,490
like making sure that the end user could log in and buy stuff,

76
00:03:54,490 --> 00:03:56,964
rather than those less important tasks,

77
00:03:56,964 --> 00:04:02,342
like deciding between Maven and Gradle as a build tool.

78
00:04:02,342 --> 00:04:06,340
All of this leads to a reduction in the risk of developing a project.

79
00:04:06,340 --> 00:04:09,645
Most importantly, you reduce those scary unknown risks,

80
00:04:09,645 --> 00:04:12,991
like your ability to actually test the application,

81
00:04:12,991 --> 00:04:15,082
or deploy it into production.

82
00:04:15,082 --> 00:04:16,569
Given these benefits,

83
00:04:16,569 --> 00:04:21,526
let's look at a common example for scaffolding Spring applications.

84
00:04:21,526 --> 00:04:25,758
As a Java web developer, I leverage the Spring Boot framework heavily.

85
00:04:25,758 --> 00:04:28,341
To generate scaffolding for a Spring Boot application,

86
00:04:28,341 --> 00:04:31,081
I frequently use the tool called Spring Initializer,

87
00:04:31,081 --> 00:04:34,432
which is available from the website, start.

88
00:04:34,432 --> 00:04:34,911
spring.

89
00:04:34,911 --> 00:04:35,390
io.

90
00:04:35,390 --> 00:04:38,729
Let's look at what it creates for you.

91
00:04:38,729 --> 00:04:40,780
I'm showing you the Spring Initializer website.

92
00:04:40,780 --> 00:04:42,216
I have the full version opened,

93
00:04:42,216 --> 00:04:45,872
and you can see all of the selections in this full version that are

94
00:04:45,872 --> 00:04:48,650
available for you when you're generating a project.

95
00:04:48,650 --> 00:04:52,138
Let's start by creating a simple Java web project.

96
00:04:52,138 --> 00:04:55,895
I want it to have web, database, and security features,

97
00:04:55,895 --> 00:04:58,657
and I want to use Gradle.

98
00:04:58,657 --> 00:04:59,984
I've changed my selection to use Gradle,

99
00:04:59,984 --> 00:05:02,357
I'm going to leave the other default selections for

100
00:05:02,357 --> 00:05:04,830
Java language and Spring Boot version,

101
00:05:04,830 --> 00:05:08,492
I'm also going to leave the defaults for the project metadata.

102
00:05:08,492 --> 00:05:09,781
Let's start adding dependencies.

103
00:05:09,781 --> 00:05:14,352
As I said I need a web feature, so let's search for Web.

104
00:05:14,352 --> 00:05:19,934
Okay now I have that as a dependency, I'm also looking for security,

105
00:05:19,934 --> 00:05:22,328
that was my second feature.

106
00:05:22,328 --> 00:05:24,721
Now I need to look for a database.

107
00:05:24,721 --> 00:05:26,217
So I'll search for database,

108
00:05:26,217 --> 00:05:31,235
and I have five selections and really only one of them are of interest to me.

109
00:05:31,235 --> 00:05:35,854
I'm going to use H2 for my local development, so I'll select that.

110
00:05:35,854 --> 00:05:39,227
So now I have three dependencies, but I want more.

111
00:05:39,227 --> 00:05:44,111
So let's scroll down and see what actually is available.

112
00:05:44,111 --> 00:05:48,670
On the left, I have Security selected in the Core category.

113
00:05:48,670 --> 00:05:50,739
On the right side, I have Web.

114
00:05:50,739 --> 00:05:56,068
I think that's enough for me, so I'll continue to scroll down.

115
00:05:56,068 --> 00:05:58,198
I see SQL at the bottom,

116
00:05:58,198 --> 00:06:02,104
and that's of interest to me because I need database support.

117
00:06:02,104 --> 00:06:06,726
The first option is JPA, I'd like to have JPA support so I'm going to check it,

118
00:06:06,726 --> 00:06:11,800
I'm going to look down a little farther and I also want PostgreSQL support,

119
00:06:11,800 --> 00:06:15,010
so I'm going to select PostgreSQL.

120
00:06:15,010 --> 00:06:18,569
So, again, I should have everything I need for database,

121
00:06:18,569 --> 00:06:20,533
I'll continue to scroll down just because I want to see

122
00:06:20,533 --> 00:06:22,837
what other options are available.

123
00:06:22,837 --> 00:06:26,731
There's a lot of stuff here.

124
00:06:26,731 --> 00:06:28,210
There's a lot over on cloud,

125
00:06:28,210 --> 00:06:32,145
well I'm not really using cloud so that's not of interest to me.

126
00:06:32,145 --> 00:06:35,284
I get down here and I see I/O,

127
00:06:35,284 --> 00:06:40,253
well I don't really have I/O right now so I'll continue.

128
00:06:40,253 --> 00:06:42,504
Then I get to the bottom and I get Ops.

129
00:06:42,504 --> 00:06:45,128
Let's go ahead and select Actuator.

130
00:06:45,128 --> 00:06:51,956
So, now I've selected some dependencies, I'm going to generate the project.

131
00:06:51,956 --> 00:06:54,629
And I have a demo project that's now been zipped up,

132
00:06:54,629 --> 00:06:57,955
and I can take a look at it in an IDE.

133
00:06:57,955 --> 00:07:01,444
Let's look and see what Spring generated.

134
00:07:01,444 --> 00:07:04,824
I'm displaying the demo project that got generated

135
00:07:04,824 --> 00:07:06,936
from the Spring Initializer website.

136
00:07:06,936 --> 00:07:09,904
As a basic starting project, this can work for me,

137
00:07:09,904 --> 00:07:13,850
but from an experienced point of view, I'm starting to see some gaps.

138
00:07:13,850 --> 00:07:16,824
Let's take the resources folder for example.

139
00:07:16,824 --> 00:07:21,287
I selected the web feature from the Spring Initializer website.

140
00:07:21,287 --> 00:07:26,119
As a result, all I got was a templates folder and static folder.

141
00:07:26,119 --> 00:07:30,106
I have to start from scratch creating my UI.

142
00:07:30,106 --> 00:07:35,421
Also, if I look at my java folder, the only class in here is my DemoApplication,

143
00:07:35,421 --> 00:07:40,446
which is the Spring Boot runner, I have no configurations in here at all.

144
00:07:40,446 --> 00:07:46,138
But, I know I selected Spring security, and some database dependencies.

145
00:07:46,138 --> 00:07:47,906
I expected something.

146
00:07:47,906 --> 00:07:52,032
Next, let's look at the build script.

147
00:07:52,032 --> 00:07:54,203
This build script is very basic.

148
00:07:54,203 --> 00:07:59,387
All it's showing me are the dependencies that I selected from the website.

149
00:07:59,387 --> 00:08:02,413
I have no type of integration with automated tools,

150
00:08:02,413 --> 00:08:06,192
or let's say Docker for example as a container.

151
00:08:06,192 --> 00:08:08,040
Again, it's very basic.

152
00:08:08,040 --> 00:08:08,274
So,

153
00:08:08,274 --> 00:08:10,850
why are there so many gaps to fill with this project

154
00:08:10,850 --> 00:08:14,978
before I can be production ready?

155
00:08:14,978 --> 00:08:17,719
While Spring Initializer supports the creation of a working prototype,

156
00:08:17,719 --> 00:08:20,818
it also highlights an important issue.

157
00:08:20,818 --> 00:08:23,590
Scaffolding tools may leave you with a gap between

158
00:08:23,590 --> 00:08:25,069
working prototype and production-ready.

159
00:08:25,069 --> 00:08:28,651
For example, while I selected a web dependency,

160
00:08:28,651 --> 00:08:31,467
no client-side code was generated.

161
00:08:31,467 --> 00:08:35,871
I'll need to manually integrate a client framework, such as Angular or React.

162
00:08:35,871 --> 00:08:40,552
The reason this is important is that I'm back to manual project creation.

163
00:08:40,552 --> 00:08:43,600
I won't see the benefits that I claimed you should

164
00:08:43,600 --> 00:08:44,819
be expecting from scaffolding.

165
00:08:44,819 --> 00:08:47,031
Now wouldn't it be great if there was a scaffolding tool that

166
00:08:47,031 --> 00:08:53,000
could fill this production readiness gap, and provide you the benefits that you deserve?

