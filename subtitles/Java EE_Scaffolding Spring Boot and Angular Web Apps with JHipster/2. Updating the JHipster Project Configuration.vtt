WEBVTT
1
00:00:02.435 --> 00:00:04.159
When JHipster generated the project scaffolding,

2
00:00:04.159 --> 00:00:06.764
it took an opinion on Spring profile names.

3
00:00:06.764 --> 00:00:10.763
You can find these profiles in the class io.

4
00:00:10.763 --> 00:00:11.851
github.

5
00:00:11.851 --> 00:00:12.939
jhipster.

6
00:00:12.939 --> 00:00:14.027
config.

7
00:00:14.027 --> 00:00:15.115
JHipsterConstants.

8
00:00:15.115 --> 00:00:19.056
You may be wondering why the package is different than our projects package.

9
00:00:19.056 --> 00:00:22.459
The reason is that the constants class is part of a JHipster

10
00:00:22.459 --> 00:00:24.637
library brought in as a project dependency.

11
00:00:24.637 --> 00:00:28.929
This is the second time we're seeing a coupling between

12
00:00:28.929 --> 00:00:31.642
our project and JHipster libraries.

13
00:00:31.642 --> 00:00:35.459
You've already seen the first Spring profile constant, which is dev.

14
00:00:35.459 --> 00:00:38.644
One example of its usage was to restrict visibility of the

15
00:00:38.644 --> 00:00:41.056
H2 database to the dev profile only.

16
00:00:41.056 --> 00:00:45.159
This is the default profile used by the JHipster application when

17
00:00:45.159 --> 00:00:48.326
no other profiles have been defined at runtime.

18
00:00:48.326 --> 00:00:49.937
Next is the test profile.

19
00:00:49.937 --> 00:00:52.332
By default, JHipster provides this as convenience,

20
00:00:52.332 --> 00:00:56.488
but doesn't leverage it directly in the generated project.

21
00:00:56.488 --> 00:00:58.831
You can use this if your task configuration is different

22
00:00:58.831 --> 00:01:01.539
than your dev and prod configuration.

23
00:01:01.539 --> 00:01:04.339
Next is the production profile.

24
00:01:04.339 --> 00:01:07.522
This profile is of concern to us for the remainder of this module,

25
00:01:07.522 --> 00:01:12.598
as we will use it to drive the build of our production artifact.

26
00:01:12.598 --> 00:01:15.874
The next two profiles are for cloud-based configurations.

27
00:01:15.874 --> 00:01:17.980
I won't be covering this in more detail as it's

28
00:01:17.980 --> 00:01:19.911
outside the scope for this course.

29
00:01:19.911 --> 00:01:25.672
The swagger profile allows you to turn on or off swagger as a feature.

30
00:01:25.672 --> 00:01:28.537
While we haven't covered it in the course,

31
00:01:28.537 --> 00:01:32.272
swagger is a third-party dependency that provides you with a UI for

32
00:01:32.272 --> 00:01:36.483
interacting with APIs from the server side of the application.

33
00:01:36.483 --> 00:01:41.095
By default, JHipster enables swagger automatically when using the dev profile,

34
00:01:41.095 --> 00:01:46.537
and it disables it automatically when you're using the prod profile.

35
00:01:46.537 --> 00:01:47.069
Commonly,

36
00:01:47.069 --> 00:01:52.925
I'll disable swagger in production to remove any potential security concerns.

37
00:01:52.925 --> 00:01:54.743
The last profile is NO_LIQUIBASE.

38
00:01:54.743 --> 00:01:59.091
We went into some depth on Liquibase while discussing the server-side code,

39
00:01:59.091 --> 00:02:02.590
and using this profile we'll disable Liquibase from

40
00:02:02.590 --> 00:02:05.489
running its startup of the application.

41
00:02:05.489 --> 00:02:06.027
In general,

42
00:02:06.027 --> 00:02:08.800
I disable Liquibase in production from the application properties directly,

43
00:02:08.800 --> 00:02:11.954
however, if you really wanted to use it in production,

44
00:02:11.954 --> 00:02:15.869
this profile allows you to run Liquibase without redeploying the application.

45
00:02:15.869 --> 00:02:19.148
If you find these profiles don't meet your needs,

46
00:02:19.148 --> 00:02:21.218
it's possible to roll your own,

47
00:02:21.218 --> 00:02:25.663
however it will take a small amount of efforts to replace

48
00:02:25.663 --> 00:02:27.929
references in the generated application.

49
00:02:27.929 --> 00:02:29.888
Now that you know the Spring profile's available,

50
00:02:29.888 --> 00:02:34.671
let's dive into the generated configuration for the application.

51
00:02:34.671 --> 00:02:38.049
JHipster generates a variety of configurations for you.

52
00:02:38.049 --> 00:02:42.706
For example, we saw the configuration for Liquibase earlier in the course.

53
00:02:42.706 --> 00:02:44.038
For the purposes of deployment,

54
00:02:44.038 --> 00:02:48.661
let's keep a focus on four property files found in

55
00:02:48.661 --> 00:02:51.418
the folder src/main/resources.

56
00:02:51.418 --> 00:02:55.826
The file application is a Spring Boot properties file that defines

57
00:02:55.826 --> 00:02:59.164
the base configurations across all profiles.

58
00:02:59.164 --> 00:03:02.260
It's found in the config sub folder.

59
00:03:02.260 --> 00:03:04.786
JHipster includes its own properties for the features it's

60
00:03:04.786 --> 00:03:07.812
providing in the generated application.

61
00:03:07.812 --> 00:03:11.823
JHipster also gives you a section where you can define

62
00:03:11.823 --> 00:03:13.428
your own application properties.

63
00:03:13.428 --> 00:03:15.758
The next file is application-dev.

64
00:03:15.758 --> 00:03:16.224
yml.

65
00:03:16.224 --> 00:03:20.620
Th properties in this file will override those of the application.

66
00:03:20.620 --> 00:03:25.243
yml file when the application is running with the Spring profile dev.

67
00:03:25.243 --> 00:03:26.454
If you remember earlier,

68
00:03:26.454 --> 00:03:30.460
we made a change to this file to add a property for Liquibase.

69
00:03:30.460 --> 00:03:35.291
The third file is in the config folder and is named application-prod.

70
00:03:35.291 --> 00:03:35.845
yml.

71
00:03:35.845 --> 00:03:38.615
As with the dev version,

72
00:03:38.615 --> 00:03:41.657
this properties file will override values from the application.

73
00:03:41.657 --> 00:03:46.207
properties file when the prod Spring profile is active.

74
00:03:46.207 --> 00:03:47.865
For the purposes of production deployment,

75
00:03:47.865 --> 00:03:51.612
we're going to evaluate the values in this file.

76
00:03:51.612 --> 00:03:55.159
Specifically those for the production database.

77
00:03:55.159 --> 00:03:58.544
The last file is the logback-spring.

78
00:03:58.544 --> 00:03:59.672
xml file.

79
00:03:59.672 --> 00:04:04.210
JHipster generated this as a configuration for application logging.

80
00:04:04.210 --> 00:04:07.956
By default, JHipster only defines logging to the console,

81
00:04:07.956 --> 00:04:12.628
however it's likely you're going to make changes to include logging to a file.

82
00:04:12.628 --> 00:04:15.920
An important note here about configuration.

83
00:04:15.920 --> 00:04:18.133
JHipster defines potentially environmental-specific

84
00:04:18.133 --> 00:04:20.900
values in these properties files.

85
00:04:20.900 --> 00:04:22.893
Such as the database password.

86
00:04:22.893 --> 00:04:26.055
As JHipster can't cover all possible deployment options,

87
00:04:26.055 --> 00:04:30.025
it's recommended that you consider extracting these type of properties to an

88
00:04:30.025 --> 00:04:33.453
external file that can be managed per environment by tooling.

89
00:04:33.453 --> 00:04:38.944
Also note that JHipster doesn't generate a test version of the properties file.

90
00:04:38.944 --> 00:04:39.997
Based on my implementations,

91
00:04:39.997 --> 00:04:45.435
it's likely you'll end up adding another file to define test profile properties.

92
00:04:45.435 --> 00:04:47.883
Now that you understand where and what these files,

93
00:04:47.883 --> 00:04:51.395
let's make two changes to support production deployment.

94
00:04:51.395 --> 00:04:52.689
As I noted,

95
00:04:52.689 --> 00:04:55.708
JHipster generated a properties file for overriding

96
00:04:55.708 --> 00:04:58.902
configurations in the Spring profile for production.

97
00:04:58.902 --> 00:05:02.030
I'm displaying a section of this properties file where

98
00:05:02.030 --> 00:05:04.475
JHipster defined the database for production.

99
00:05:04.475 --> 00:05:06.153
Earlier in the course,

100
00:05:06.153 --> 00:05:11.362
we generated a project that configured development to use H2 for the database,

101
00:05:11.362 --> 00:05:15.146
and production to use Microsoft SQL Server.

102
00:05:15.146 --> 00:05:19.861
Here we see that the production configuration defines a data source for us.

103
00:05:19.861 --> 00:05:23.443
Note that the data source defines an open source library for the driver.

104
00:05:23.443 --> 00:05:26.642
You may want to consider your options for the selection.

105
00:05:26.642 --> 00:05:26.923
Next,

106
00:05:26.923 --> 00:05:29.738
JHipster defined the URL and set the name of the

107
00:05:29.738 --> 00:05:32.479
database based on the application name.

108
00:05:32.479 --> 00:05:32.971
Finally,

109
00:05:32.971 --> 00:05:37.560
JHipster defined a default username and password using the SA

110
00:05:37.560 --> 00:05:40.182
account commonly provided by SQL Server.

111
00:05:40.182 --> 00:05:42.792
Note there are other configurations to be considered for your application,

112
00:05:42.792 --> 00:05:47.135
but I chose the data source configuration as it's one that's commonly changed.

113
00:05:47.135 --> 00:05:51.767
As I want to define a different password for the user,

114
00:05:51.767 --> 00:05:54.418
let's make that change now.

115
00:05:54.418 --> 00:05:57.956
I've opened up Eclipse and I have the application-prod.

116
00:05:57.956 --> 00:05:59.921
yml file in the editor.

117
00:05:59.921 --> 00:06:01.002
As you can see,

118
00:06:01.002 --> 00:06:04.424
JHipster defaulted the password for the data source to be yourStrong Password.

119
00:06:04.424 --> 00:06:08.963
I'm going to change this to a value that I'll be using later

120
00:06:08.963 --> 00:06:12.104
when we start up a SQL Server database.

121
00:06:12.104 --> 00:06:15.227
Let's change the value to be Password, with a capital P,

122
00:06:15.227 --> 00:06:19.520
the number 1, and an exclamation point.

123
00:06:19.520 --> 00:06:22.471
Now obviously, you'll want something a bit more secure,

124
00:06:22.471 --> 00:06:24.116
but this provides a basic example.

125
00:06:24.116 --> 00:06:26.546
Now that we have this property changed,

126
00:06:26.546 --> 00:06:31.264
let's continue the discussion on configurations.

127
00:06:31.264 --> 00:06:36.084
JHipster generated a file for you named logback-spring.

128
00:06:36.084 --> 00:06:41.677
xml, in the src/main/resources directory of the project.

129
00:06:41.677 --> 00:06:43.306
If you're not familiarly with logback,

130
00:06:43.306 --> 00:06:47.710
it's a logging framework that's essentially the successor to log4j.

131
00:06:47.710 --> 00:06:49.624
It's integrated well into Spring Boot,

132
00:06:49.624 --> 00:06:52.177
and I prefer it for my application logging.

133
00:06:52.177 --> 00:06:55.556
There are three key items to note in this file.

134
00:06:55.556 --> 00:06:55.835
First,

135
00:06:55.835 --> 00:07:00.385
JHipster is defined an appender to log messages from the application to a file.

136
00:07:00.385 --> 00:07:03.331
By default, this appender is commented out,

137
00:07:03.331 --> 00:07:06.046
however it's almost guaranteed that you'll want to uncomment

138
00:07:06.046 --> 00:07:08.982
it for your application to keep history.

139
00:07:08.982 --> 00:07:16.790
Next, note that the root element defines a level with a value of #logback.

140
00:07:16.790 --> 00:07:17.348
loglevel#.

141
00:07:17.348 --> 00:07:21.284
This expression will actually be replaced by the Gradle build script.

142
00:07:21.284 --> 00:07:22.687
If this doesn't work for you,

143
00:07:22.687 --> 00:07:26.816
you can also define logging per Spring profile in this configuration file,

144
00:07:26.816 --> 00:07:29.543
removing the need for this expression.

145
00:07:29.543 --> 00:07:32.446
The final item to note is that JHipster has only activated

146
00:07:32.446 --> 00:07:35.683
the console adaptor for the root element.

147
00:07:35.683 --> 00:07:40.358
However, you again will likely want to uncomment the file appender.

148
00:07:40.358 --> 00:07:42.430
Now that you've seen the content from this file,

149
00:07:42.430 --> 00:07:46.273
let's activate that file appender now.

150
00:07:46.273 --> 00:07:49.567
I've opened up Eclipse again, and I now have the file logback-spring.

151
00:07:49.567 --> 00:07:51.399
xml in the editor.

152
00:07:51.399 --> 00:07:57.877
I'm going to uncomment the file appender that's currently displayed.

153
00:07:57.877 --> 00:08:01.568
I'm also going to replace the file name of logFile with

154
00:08:01.568 --> 00:08:03.863
the application name of patientportal.

155
00:08:03.863 --> 00:08:08.123
So now the file appender is included in the configuration.

156
00:08:08.123 --> 00:08:12.063
This appender defines a log file that includes the time stamp,

157
00:08:12.063 --> 00:08:15.244
and will roll over based on the policy set.

158
00:08:15.244 --> 00:08:18.997
Now, we need to scroll down to the root element.

159
00:08:18.997 --> 00:08:22.389
Let's make the last change here and uncomment the

160
00:08:22.389 --> 00:08:24.650
file appender in the root element.

161
00:08:24.650 --> 00:08:29.904
Great, now we should see a log file generated for application logging messages.

162
00:08:29.904 --> 00:08:37.000
This is the last of the configuration changes needed, so let's get started into the deployment of our application.

