WEBVTT
1
00:00:01.841 --> 00:00:03.365
When we generated the project earlier,

2
00:00:03.365 --> 00:00:05.987
we chose to use Gradle for the application build script.

3
00:00:05.987 --> 00:00:11.036
We are now going to run the application server using Gradle on the command line.

4
00:00:11.036 --> 00:00:15.019
The command, as I'm showing, will run from the root directory of the project,

5
00:00:15.019 --> 00:00:17.146
and is named gradlew.

6
00:00:17.146 --> 00:00:19.852
Let's do that now.

7
00:00:19.852 --> 00:00:23.170
I've opened up a PowerShell window to the project.

8
00:00:23.170 --> 00:00:28.218
The folder is C:\dev\patient-portal.

9
00:00:28.218 --> 00:00:30.431
I'm going to start by showing you the tasks that are

10
00:00:30.431 --> 00:00:34.326
available in the build script for Gradle.

11
00:00:34.326 --> 00:00:39.914
I'm going to enter the command,. \gradlew tasks.

12
00:00:39.914 --> 00:00:41.772
And the command takes a little bit of time to run if

13
00:00:41.772 --> 00:00:43.166
you've run it for the first time,

14
00:00:43.166 --> 00:00:45.777
but you're going to see a whole list of tasks that

15
00:00:45.777 --> 00:00:47.491
are available in the build script.

16
00:00:47.491 --> 00:00:49.829
I'm going to scroll up a bit here.

17
00:00:49.829 --> 00:00:54.020
Note here in this first line that the default task is bootRun.

18
00:00:54.020 --> 00:00:58.500
This bootRun task is going to start our Undertow server locally.

19
00:00:58.500 --> 00:01:01.322
There's also several build tasks, documentation tasks,

20
00:01:01.322 --> 00:01:05.606
test tasks, but we're not going to cover those just yet.

21
00:01:05.606 --> 00:01:09.594
Let's scroll to the bottom and let's run our bootRun task.

22
00:01:09.594 --> 00:01:16.623
And again, I just need to run the command,. \gradlew.

23
00:01:16.623 --> 00:01:18.749
So again this takes a little bit of time to start it up,

24
00:01:18.749 --> 00:01:21.134
but once it's started you should see a message saying

25
00:01:21.134 --> 00:01:22.502
that the application is running,

26
00:01:22.502 --> 00:01:26.936
and it should show you the URLs that are available to access the application.

27
00:01:26.936 --> 00:01:29.979
This is just the server that we're running at this point,

28
00:01:29.979 --> 00:01:33.032
but it's going to be able to still access our static resources.

29
00:01:33.032 --> 00:01:40.588
So as long as this message has come up, we know our server's running.

30
00:01:40.588 --> 00:01:42.096
I've opened up a Chrome browser,

31
00:01:42.096 --> 00:01:48.324
and I've navigated to the URL that was on the command window,

32
00:01:48.324 --> 00:01:51.006
which is http://localhost:8080.

33
00:01:51.006 --> 00:01:53.661
You should see the same page that I'm seeing,

34
00:01:53.661 --> 00:01:56.073
and if so, it confirms that the server's running,

35
00:01:56.073 --> 00:02:00.562
and the application code is being hosted successfully by Undertow.

36
00:02:00.562 --> 00:02:08.000
Now that we have the server running, and we have the application open, let's start to dive into JHipster's implementation for security.

