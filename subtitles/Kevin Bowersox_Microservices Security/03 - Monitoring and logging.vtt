WEBVTT
1
00:00:00.005 --> 00:00:01.008
- [Instructor] Being able to observe

2
00:00:01.008 --> 00:00:04.001
the activity taking place in a system

3
00:00:04.001 --> 00:00:06.003
is important for many reasons.

4
00:00:06.003 --> 00:00:11.000
However, from a security perspective, it's essential.

5
00:00:11.000 --> 00:00:13.009
Having visibility into a system through its logs

6
00:00:13.009 --> 00:00:16.003
can alert us to suspicious behavior

7
00:00:16.003 --> 00:00:19.003
that detects an ongoing attack.

8
00:00:19.003 --> 00:00:22.003
If a security incident is discovered in a system

9
00:00:22.003 --> 00:00:24.001
that has good logging,

10
00:00:24.001 --> 00:00:27.001
it's possible to identify the attack vector,

11
00:00:27.001 --> 00:00:31.003
the extent of the attack, and possibly the attacker.

12
00:00:31.003 --> 00:00:34.002
Logs can also serve as great mechanisms

13
00:00:34.002 --> 00:00:37.008
for establishing audit trails for sensitive operations

14
00:00:37.008 --> 00:00:41.004
that may be exploited by insiders.

15
00:00:41.004 --> 00:00:43.007
Like most other security concerns,

16
00:00:43.007 --> 00:00:46.006
microservices present a unique challenge,

17
00:00:46.006 --> 00:00:49.005
because sensitive operations that once occurred

18
00:00:49.005 --> 00:00:54.009
in process now span multiple distributed components.

19
00:00:54.009 --> 00:00:57.003
This causes logging to be fragmented

20
00:00:57.003 --> 00:00:59.005
across the multiple services,

21
00:00:59.005 --> 00:01:03.005
and discrepancies can arise between logging strategies used

22
00:01:03.005 --> 00:01:06.001
by different teams.

23
00:01:06.001 --> 00:01:08.008
Tracing is one of the most important techniques

24
00:01:08.008 --> 00:01:11.009
that we can use to overcome these challenges related

25
00:01:11.009 --> 00:01:15.003
to logging in microservice architectures.

26
00:01:15.003 --> 00:01:19.004
Using a correlation ID associated with each request,

27
00:01:19.004 --> 00:01:22.002
we can trace an event that is distributed

28
00:01:22.002 --> 00:01:24.009
over several microservices.

29
00:01:24.009 --> 00:01:28.004
When each microservice includes the correlation ID

30
00:01:28.004 --> 00:01:30.005
of the event in their logs,

31
00:01:30.005 --> 00:01:33.009
the event can be reassembled at a later point in time

32
00:01:33.009 --> 00:01:36.007
using a common thread of information.

33
00:01:36.007 --> 00:01:39.009
This is helpful for aggregating system activities

34
00:01:39.009 --> 00:01:41.007
into a single event.

35
00:01:41.007 --> 00:01:44.001
We can then use this information to support

36
00:01:44.001 --> 00:01:46.005
a security inquiry or to determine

37
00:01:46.005 --> 00:01:49.008
what went wrong in an incident.

38
00:01:49.008 --> 00:01:53.003
To make logs more useful and easy to consume,

39
00:01:53.003 --> 00:01:55.009
a common logging structure should be established

40
00:01:55.009 --> 00:01:59.004
across the teams that build your microservices.

41
00:01:59.004 --> 00:02:02.002
Typically, it's standard to include information

42
00:02:02.002 --> 00:02:06.003
about when an audited event took place, who was involved,

43
00:02:06.003 --> 00:02:08.001
what type of event it was,

44
00:02:08.001 --> 00:02:11.000
and what section of the code invoked it.

45
00:02:11.000 --> 00:02:14.008
If you're using the same language across your microservices,

46
00:02:14.008 --> 00:02:17.006
I would highly recommend deciding upon

47
00:02:17.006 --> 00:02:19.006
a standard logging framework

48
00:02:19.006 --> 00:02:22.001
and mandating a configuration file

49
00:02:22.001 --> 00:02:25.008
that establishes the logging pattern used across your teams

50
00:02:25.008 --> 00:02:28.003
that build microservices.

51
00:02:28.003 --> 00:02:31.009
Teams should also remember to log unsuccessful activities

52
00:02:31.009 --> 00:02:33.007
that were attempted as well,

53
00:02:33.007 --> 00:02:36.007
because these events like authorization failures,

54
00:02:36.007 --> 00:02:40.008
error in HTTP codes, and invalid endpoint URLs,

55
00:02:40.008 --> 00:02:43.001
can indicate an attempted attack

56
00:02:43.001 --> 00:02:46.004
or an attacker running a scan.

57
00:02:46.004 --> 00:02:48.008
Since microservices are distributed,

58
00:02:48.008 --> 00:02:53.001
and there may be many instances of a single microservice,

59
00:02:53.001 --> 00:02:56.001
all of your logs should be sent to a central host

60
00:02:56.001 --> 00:02:58.008
where they're collected and aggregated.

61
00:02:58.008 --> 00:03:02.000
This allows all of the log information to be gathered

62
00:03:02.000 --> 00:03:04.001
in one spot where it can be searched

63
00:03:04.001 --> 00:03:06.007
to provide a complete picture of activity

64
00:03:06.007 --> 00:03:09.003
into the distributed system.

65
00:03:09.003 --> 00:03:12.002
There are many open-source and commercial tools available

66
00:03:12.002 --> 00:03:14.000
to perform this job.

67
00:03:14.000 --> 00:03:16.008
If you're interested in an open-source tool,

68
00:03:16.008 --> 00:03:19.007
check out the elastic stack platform.

69
00:03:19.007 --> 00:03:22.006
it's very feature-rich and includes capabilities

70
00:03:22.006 --> 00:03:26.005
for monitoring, which we're going to discuss next.

71
00:03:26.005 --> 00:03:29.002
Once the information from your microservices

72
00:03:29.002 --> 00:03:31.002
is logged centrally,

73
00:03:31.002 --> 00:03:35.000
automated monitoring can identify and alert developers

74
00:03:35.000 --> 00:03:38.000
to suspicious behavior in the system.

75
00:03:38.000 --> 00:03:40.006
These alerts typically focus on traffic

76
00:03:40.006 --> 00:03:44.009
that fails due to mutual TLS, invalid access tokens,

77
00:03:44.009 --> 00:03:48.001
or excessive traffic which can be an indicator

78
00:03:48.001 --> 00:03:50.009
of an attacker probing your system.

79
00:03:50.009 --> 00:03:52.002
Once detected,

80
00:03:52.002 --> 00:03:55.007
alerts can be issued through an instant response system

81
00:03:55.007 --> 00:03:59.005
that proceeds through a series of escalated notifications

82
00:03:59.005 --> 00:04:03.004
to ensure they receive the appropriate attention.

83
00:04:03.004 --> 00:04:05.005
Application logs are invaluable,

84
00:04:05.005 --> 00:04:07.001
not just for troubleshooting,

85
00:04:07.001 --> 00:04:09.004
but from a security standpoint.

86
00:04:09.004 --> 00:04:11.009
If you apply monolithic logging strategies

87
00:04:11.009 --> 00:04:13.008
to a microservice architecture,

88
00:04:13.008 --> 00:04:16.007
you'll quickly be disappointed and frustrated

89
00:04:16.007 --> 00:04:18.008
with the level of observability

90
00:04:18.008 --> 00:04:21.003
that you get into your system.

91
00:04:21.003 --> 00:04:24.003
The strategies we discuss can give you a holistic view

92
00:04:24.003 --> 00:04:26.000
of your distributed system,

93
00:04:26.000 --> 00:04:27.009
that provides valuable insights

94
00:04:27.009 --> 00:04:31.000
into the security position of its operations.

