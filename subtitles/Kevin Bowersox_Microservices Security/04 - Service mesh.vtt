WEBVTT
1
00:00:00.006 --> 00:00:02.005
- [Instructor] To help manage the complexities

2
00:00:02.005 --> 00:00:05.001
of service-to-service communication inside

3
00:00:05.001 --> 00:00:07.001
of a microservice-based system,

4
00:00:07.001 --> 00:00:11.003
we can use a platform known as a service mesh.

5
00:00:11.003 --> 00:00:15.003
When using a service mesh, there are a few prerequisites.

6
00:00:15.003 --> 00:00:18.002
Your microservices must run in containers,

7
00:00:18.002 --> 00:00:21.005
with Docker pretty much being the standard these days.

8
00:00:21.005 --> 00:00:22.009
They must also be deployed

9
00:00:22.009 --> 00:00:26.008
in a container orchestration system like Kubernetes.

10
00:00:26.008 --> 00:00:30.002
You can find many vendors that package a container runtime

11
00:00:30.002 --> 00:00:32.003
in container orchestrator,

12
00:00:32.003 --> 00:00:35.002
or you can leverage the open source distributions

13
00:00:35.002 --> 00:00:37.007
of these platforms.

14
00:00:37.007 --> 00:00:40.006
Once you satisfy these prerequisites,

15
00:00:40.006 --> 00:00:43.006
you can use a security mesh to establish a network

16
00:00:43.006 --> 00:00:46.007
of proxies that sit next to the containers

17
00:00:46.007 --> 00:00:49.000
that host your microservices.

18
00:00:49.000 --> 00:00:51.009
These proxies, known as sidecars,

19
00:00:51.009 --> 00:00:55.007
intercept the traffic entering and exiting a service,

20
00:00:55.007 --> 00:00:59.005
providing an excellent point to apply security tactics,

21
00:00:59.005 --> 00:01:04.007
like mutual TLS, access policies, and audit logging.

22
00:01:04.007 --> 00:01:07.008
As more instances of a microservice are deployed,

23
00:01:07.008 --> 00:01:10.008
so are the proxies that sit alongside them.

24
00:01:10.008 --> 00:01:15.004
This begins to form an interconnected service mesh.

25
00:01:15.004 --> 00:01:18.004
The mesh is transparent to microservices

26
00:01:18.004 --> 00:01:21.005
because it runs a proxy in a container

27
00:01:21.005 --> 00:01:23.003
that shares the same pod

28
00:01:23.003 --> 00:01:26.000
as the container running our service.

29
00:01:26.000 --> 00:01:30.003
The fabric formed by the mesh delivers an excellent strategy

30
00:01:30.003 --> 00:01:32.009
for managing and controlling the operations

31
00:01:32.009 --> 00:01:34.007
of the microservice deployment

32
00:01:34.007 --> 00:01:38.003
by intercepting the traffic between them.

33
00:01:38.003 --> 00:01:40.008
If we inspect the high level architecture

34
00:01:40.008 --> 00:01:45.000
of Istio, a popular security mesh provided by Google,

35
00:01:45.000 --> 00:01:48.008
we'll find that it splits logically into a data plane

36
00:01:48.008 --> 00:01:51.000
and a control plane.

37
00:01:51.000 --> 00:01:53.009
The data plane contains the set of proxies

38
00:01:53.009 --> 00:01:57.005
that microservices use to communicate with each other inside

39
00:01:57.005 --> 00:01:59.005
of the service mesh.

40
00:01:59.005 --> 00:02:02.003
The policies and configuration of the proxies

41
00:02:02.003 --> 00:02:05.006
in the mesh is managed, configured, and deployed

42
00:02:05.006 --> 00:02:07.008
by the control plane.

43
00:02:07.008 --> 00:02:10.001
Using a component known as Pilot,

44
00:02:10.001 --> 00:02:13.003
the control plane is able to push these policies

45
00:02:13.003 --> 00:02:17.000
and configurations to the proxies inside the mesh

46
00:02:17.000 --> 00:02:21.003
without any code changes to the actual microservices.

47
00:02:21.003 --> 00:02:24.006
The policies can define authorization roles enforced

48
00:02:24.006 --> 00:02:26.003
by the proxies.

49
00:02:26.003 --> 00:02:29.002
These policies can range from very high level,

50
00:02:29.002 --> 00:02:31.003
such as which services are permitted

51
00:02:31.003 --> 00:02:34.006
to communicate with each other to very low level,

52
00:02:34.006 --> 00:02:37.002
such as requiring claims on a jot

53
00:02:37.002 --> 00:02:39.007
that is passed to a service.

54
00:02:39.007 --> 00:02:42.005
We can combine these authorization strategies

55
00:02:42.005 --> 00:02:44.003
with other security tactics

56
00:02:44.003 --> 00:02:47.002
to create a deep defense in-depth strategy

57
00:02:47.002 --> 00:02:49.005
for our microservices.

58
00:02:49.005 --> 00:02:52.000
In addition to receiving policies,

59
00:02:52.000 --> 00:02:55.002
the proxies can also extract information,

60
00:02:55.002 --> 00:02:58.000
such as traces or logs from the mesh

61
00:02:58.000 --> 00:03:00.004
into a logging platform.

62
00:03:00.004 --> 00:03:04.003
Istio's tracing capabilities increase the observability

63
00:03:04.003 --> 00:03:06.002
of our microservices.

64
00:03:06.002 --> 00:03:09.002
It allows them to be better monitored.

65
00:03:09.002 --> 00:03:13.000
Istio's tracing capabilities increase the observability

66
00:03:13.000 --> 00:03:15.001
of our microservices to allow them

67
00:03:15.001 --> 00:03:17.001
to be better monitored.

68
00:03:17.001 --> 00:03:21.000
Request tracing within Istio uses a quest ID

69
00:03:21.000 --> 00:03:24.009
and a trace ID header that allows individual requests

70
00:03:24.009 --> 00:03:28.004
to be monitored as they are flow through each service

71
00:03:28.004 --> 00:03:30.002
in the mesh.

72
00:03:30.002 --> 00:03:32.005
These headers can be extracted

73
00:03:32.005 --> 00:03:37.005
and used as a correlation ID in our microservice logs.

74
00:03:37.005 --> 00:03:41.007
Istio also has its own internal access logging

75
00:03:41.007 --> 00:03:43.007
that allows for detailed auditing

76
00:03:43.007 --> 00:03:47.000
of network transactions that can be visualized

77
00:03:47.000 --> 00:03:52.000
in order to see the path a request takes through our system.

78
00:03:52.000 --> 00:03:54.007
One of the major benefits of Istio is

79
00:03:54.007 --> 00:03:57.004
that it provides mutual TLS with just a little bit

80
00:03:57.004 --> 00:04:00.007
of configuration, right out of the box.

81
00:04:00.007 --> 00:04:04.001
Istio bundles a certificate authority named Citadel

82
00:04:04.001 --> 00:04:08.003
into the control plane that has extensive functionality.

83
00:04:08.003 --> 00:04:11.002
Citadel can mount the certificate and key pair

84
00:04:11.002 --> 00:04:14.004
into a Kubernetes pod when it's created.

85
00:04:14.004 --> 00:04:17.003
It's also capable of automating the rotation

86
00:04:17.003 --> 00:04:20.001
of certificates within the pods.

87
00:04:20.001 --> 00:04:23.002
Using Citadel, you get mutual TLS

88
00:04:23.002 --> 00:04:25.003
with only a little configuration,

89
00:04:25.003 --> 00:04:27.003
and that's a lot of value and security

90
00:04:27.003 --> 00:04:29.006
for your microservices.

91
00:04:29.006 --> 00:04:32.001
A service mesh in general provides a wealth

92
00:04:32.001 --> 00:04:33.008
of features that make management

93
00:04:33.008 --> 00:04:36.006
of service-to-service communication less daunting

94
00:04:36.006 --> 00:04:38.003
and more secure.

95
00:04:38.003 --> 00:04:41.003
If you're considering tactics, like mutual TLS,

96
00:04:41.003 --> 00:04:43.004
it's a great option to consider.

97
00:04:43.004 --> 00:04:46.005
Service meshes are also relatively new,

98
00:04:46.005 --> 00:04:49.002
so as innovations arise, they're likely

99
00:04:49.002 --> 00:04:53.000
to play a greater role in microservice architectures.

