WEBVTT
1
00:00:00.005 --> 00:00:02.001
- [Instructor] To receive the full benefits

2
00:00:02.001 --> 00:00:04.003
of a microservice architecture,

3
00:00:04.003 --> 00:00:06.007
it takes a flexible execution environment

4
00:00:06.007 --> 00:00:10.000
that allows for rapid yet stable deployments.

5
00:00:10.000 --> 00:00:12.005
This is why the majority of developers choose

6
00:00:12.005 --> 00:00:15.009
to deploy microservices inside of containers.

7
00:00:15.009 --> 00:00:19.003
And in most cases, that means Docker.

8
00:00:19.003 --> 00:00:21.009
Like each new technology in the stack,

9
00:00:21.009 --> 00:00:24.001
containers have their own attack surface

10
00:00:24.001 --> 00:00:26.009
and expose new attack vectors.

11
00:00:26.009 --> 00:00:29.008
When running microservices on containers,

12
00:00:29.008 --> 00:00:32.002
security measures can be applied to harden

13
00:00:32.002 --> 00:00:34.009
various components within the architecture,

14
00:00:34.009 --> 00:00:39.001
including the host and the container runtime.

15
00:00:39.001 --> 00:00:41.006
The host where the container engine is installed

16
00:00:41.006 --> 00:00:45.004
is a starting point for securing the container platform.

17
00:00:45.004 --> 00:00:48.001
It should have a very limited number of users

18
00:00:48.001 --> 00:00:50.005
that can access it directly.

19
00:00:50.005 --> 00:00:53.009
If you're using a container orchestrator like Kubernetes,

20
00:00:53.009 --> 00:00:55.009
this number should be even smaller,

21
00:00:55.009 --> 00:00:59.007
because the need to access the host is diminished.

22
00:00:59.007 --> 00:01:02.007
When choosing an operating system for the host,

23
00:01:02.007 --> 00:01:05.009
it's best to use a thin distro specifically designed

24
00:01:05.009 --> 00:01:10.000
for using containers, like Red Hat's Fedora CoreOS.

25
00:01:10.000 --> 00:01:13.008
These distros reduce the attack surface on the host

26
00:01:13.008 --> 00:01:16.008
by removing non-essential applications.

27
00:01:16.008 --> 00:01:19.003
This lowers the number of vulnerabilities found

28
00:01:19.003 --> 00:01:21.008
within the operating system.

29
00:01:21.008 --> 00:01:24.003
The host should also be hardened in accordance

30
00:01:24.003 --> 00:01:26.005
with the same security strategies taken

31
00:01:26.005 --> 00:01:30.008
to secure other VMs in your environment.

32
00:01:30.008 --> 00:01:32.002
When running containers,

33
00:01:32.002 --> 00:01:34.008
whether it be directly with the container runtime

34
00:01:34.008 --> 00:01:38.002
or preferably with the help of a container orchestrator,

35
00:01:38.002 --> 00:01:41.004
there are several important runtime security configurations

36
00:01:41.004 --> 00:01:43.002
that need to be applied.

37
00:01:43.002 --> 00:01:46.007
Since Docker is the defacto standard for containers,

38
00:01:46.007 --> 00:01:48.009
the remainder of our security discussion

39
00:01:48.009 --> 00:01:52.004
is going to be pretty specific to Docker.

40
00:01:52.004 --> 00:01:55.004
A good best practice is to configure containers

41
00:01:55.004 --> 00:01:59.001
to run with the least amount of privileges necessary.

42
00:01:59.001 --> 00:02:02.000
An effective way to achieve this is to drop

43
00:02:02.000 --> 00:02:04.006
all the kernel capabilities initially,

44
00:02:04.006 --> 00:02:07.008
and then add in only those capabilities

45
00:02:07.008 --> 00:02:11.005
that are necessary to run the container.

46
00:02:11.005 --> 00:02:14.009
This should be accompanied by the no-new-privileges flag,

47
00:02:14.009 --> 00:02:17.008
which prevents the process inside the container

48
00:02:17.008 --> 00:02:22.001
from gaining new privileges during execution.

49
00:02:22.001 --> 00:02:25.004
Another dangerous configuration option to be aware of

50
00:02:25.004 --> 00:02:27.004
is the privileged flag.

51
00:02:27.004 --> 00:02:30.007
This flag should be avoided at all cost.

52
00:02:30.007 --> 00:02:33.002
It grants a large amount of capabilities

53
00:02:33.002 --> 00:02:37.001
to the underlying Docker process running the container,

54
00:02:37.001 --> 00:02:39.007
which can be used to escape the container

55
00:02:39.007 --> 00:02:43.005
and launch attacks on the underlying host.

56
00:02:43.005 --> 00:02:46.009
It's also important to set the user that will be used

57
00:02:46.009 --> 00:02:48.009
when running the image.

58
00:02:48.009 --> 00:02:52.001
This is done either with the image configuration

59
00:02:52.001 --> 00:02:54.006
or when the container is launched.

60
00:02:54.006 --> 00:02:56.002
If a user is not set,

61
00:02:56.002 --> 00:02:59.002
your container will run as root by default,

62
00:02:59.002 --> 00:03:03.002
and root inside the container is root on the host.

63
00:03:03.002 --> 00:03:06.004
If an attacker manages to escape the container,

64
00:03:06.004 --> 00:03:10.007
they will have complete access to the underlying host.

65
00:03:10.007 --> 00:03:14.006
Finally, running containers using a read-only file system

66
00:03:14.006 --> 00:03:18.002
and volumes is a great way to reduce the blast radius

67
00:03:18.002 --> 00:03:21.002
of any containers that are compromised.

68
00:03:21.002 --> 00:03:24.002
These runtime configurations can help secure

69
00:03:24.002 --> 00:03:28.004
your Docker containers in a microservice system.

70
00:03:28.004 --> 00:03:31.003
If you're looking for a tool to help ensure your containers

71
00:03:31.003 --> 00:03:33.000
are securely configured,

72
00:03:33.000 --> 00:03:34.004
you can use Docker Bench

73
00:03:34.004 --> 00:03:37.005
to check for security misconfigurations.

74
00:03:37.005 --> 00:03:40.002
This tool will scan running containers

75
00:03:40.002 --> 00:03:42.005
and report on any configurations

76
00:03:42.005 --> 00:03:47.002
that deviate from benchmark industry security standards.

77
00:03:47.002 --> 00:03:50.005
To secure containerized microservices at runtime,

78
00:03:50.005 --> 00:03:53.006
you must account for the additional layers in the stack

79
00:03:53.006 --> 00:03:55.007
and understand the security implications

80
00:03:55.007 --> 00:03:58.002
of how they are configured.

81
00:03:58.002 --> 00:04:02.000
This responsibility may span across multiple positions

82
00:04:02.000 --> 00:04:03.007
in an organization.

83
00:04:03.007 --> 00:04:05.006
So it's important to standardize

84
00:04:05.006 --> 00:04:09.000
these best practices via automation.

85
00:04:09.000 --> 00:04:11.004
Once your containers are running securely,

86
00:04:11.004 --> 00:04:14.004
your microservices can truly enjoy the benefits

87
00:04:14.004 --> 00:04:16.008
of the flexible deployment and scaling

88
00:04:16.008 --> 00:04:19.000
without serious security risks.

