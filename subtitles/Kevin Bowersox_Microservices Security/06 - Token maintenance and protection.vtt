WEBVTT
1
00:00:00.005 --> 00:00:02.005
- [Instructor] After a token has been issued,

2
00:00:02.005 --> 00:00:05.001
a few maintenance activities may take place

3
00:00:05.001 --> 00:00:08.007
before the token reaches its end of life.

4
00:00:08.007 --> 00:00:10.007
To help manage these activities,

5
00:00:10.007 --> 00:00:13.006
the identity and access management platform

6
00:00:13.006 --> 00:00:16.001
may add some token management features

7
00:00:16.001 --> 00:00:18.009
that are optional or not completely defined

8
00:00:18.009 --> 00:00:23.006
for authorization servers in the OAuth specification.

9
00:00:23.006 --> 00:00:25.001
In the best case scenario,

10
00:00:25.001 --> 00:00:28.002
a token is used for appropriate access by a client

11
00:00:28.002 --> 00:00:31.000
until it reaches its expiration date.

12
00:00:31.000 --> 00:00:31.008
At this point,

13
00:00:31.008 --> 00:00:36.001
it no longer can be used for access to a microservice.

14
00:00:36.001 --> 00:00:39.009
This is typically achieved by setting an expires in claim

15
00:00:39.009 --> 00:00:43.004
on the access token or storing information

16
00:00:43.004 --> 00:00:46.000
regarding its expiration date.

17
00:00:46.000 --> 00:00:50.005
In general, it is best to keep the access token short-lived,

18
00:00:50.005 --> 00:00:52.005
so that if it were to be compromised,

19
00:00:52.005 --> 00:00:56.008
it doesn't provide access for a long period of time.

20
00:00:56.008 --> 00:00:58.001
In some scenarios,

21
00:00:58.001 --> 00:01:01.001
clients may be provided with a refresh token

22
00:01:01.001 --> 00:01:04.005
that allows them to obtain a new access token

23
00:01:04.005 --> 00:01:07.006
without the resource owner involved.

24
00:01:07.006 --> 00:01:11.001
This is helpful when the client needs to access information

25
00:01:11.001 --> 00:01:14.000
when the resource owner is offline.

26
00:01:14.000 --> 00:01:16.008
Now there's one big problem with refresh tokens.

27
00:01:16.008 --> 00:01:18.000
If they're stolen,

28
00:01:18.000 --> 00:01:21.002
they're very similar to a password.

29
00:01:21.002 --> 00:01:24.007
To help mitigate the threat of a stolen refresh token,

30
00:01:24.007 --> 00:01:28.004
they can be rotated by issuing a new refresh token

31
00:01:28.004 --> 00:01:31.002
every time an access token is obtained

32
00:01:31.002 --> 00:01:33.001
using a refresh token.

33
00:01:33.001 --> 00:01:35.008
They just continue to rotate.

34
00:01:35.008 --> 00:01:39.007
In the worst case scenario, access tokens or refresh tokens

35
00:01:39.007 --> 00:01:42.006
are compromised, because they're not well-protected,

36
00:01:42.006 --> 00:01:44.008
and they need to be revoked.

37
00:01:44.008 --> 00:01:46.004
This is not an easy task,

38
00:01:46.004 --> 00:01:50.002
because it requires tokens to be persisted into storage

39
00:01:50.002 --> 00:01:53.009
and may require all tokens consented to by a user

40
00:01:53.009 --> 00:01:55.007
to be revoked.

41
00:01:55.007 --> 00:01:57.006
If tokens are not stored,

42
00:01:57.006 --> 00:02:00.000
it may not be possible to revoke them

43
00:02:00.000 --> 00:02:04.000
until all of the tokens have expired.

44
00:02:04.000 --> 00:02:07.006
In other situations, revocation can occur naturally,

45
00:02:07.006 --> 00:02:09.007
like when a logout occurs.

46
00:02:09.007 --> 00:02:12.005
Sometimes a client is unregistered,

47
00:02:12.005 --> 00:02:16.003
or a resource owner revokes a client's access

48
00:02:16.003 --> 00:02:18.002
to their resources.

49
00:02:18.002 --> 00:02:20.000
To support these scenarios,

50
00:02:20.000 --> 00:02:24.000
the token revocation specification extends OAuth

51
00:02:24.000 --> 00:02:25.008
by introducing an endpoint

52
00:02:25.008 --> 00:02:28.005
that allows a token to be revoked.

53
00:02:28.005 --> 00:02:32.009
After the token's revoked, it can no longer be used.

54
00:02:32.009 --> 00:02:36.003
Finally, let's just cover a few general best practices

55
00:02:36.003 --> 00:02:38.002
for working with tokens.

56
00:02:38.002 --> 00:02:41.000
It's almost a universal standard at this point,

57
00:02:41.000 --> 00:02:43.005
but I do want to point out that all of the calls

58
00:02:43.005 --> 00:02:46.005
that we talked about in OAuth should take place

59
00:02:46.005 --> 00:02:49.003
over TLS to prevent credentials or tokens

60
00:02:49.003 --> 00:02:51.000
from being compromised.

61
00:02:51.000 --> 00:02:53.008
You should never transport any of this information

62
00:02:53.008 --> 00:02:55.004
in the clear.

63
00:02:55.004 --> 00:02:58.003
Additionally, tokens should be protected like passwords,

64
00:02:58.003 --> 00:03:01.001
because anybody with access to a token

65
00:03:01.001 --> 00:03:03.004
can access a microservice.

66
00:03:03.004 --> 00:03:06.007
The same sort of protection should apply to the client ID

67
00:03:06.007 --> 00:03:10.001
and client secret issued to a client.

68
00:03:10.001 --> 00:03:12.007
Also, be sure to include an expiration date

69
00:03:12.007 --> 00:03:16.009
on every access token, keep the expiration short,

70
00:03:16.009 --> 00:03:20.000
and use refresh tokens if necessary.

71
00:03:20.000 --> 00:03:21.004
Without an expiration,

72
00:03:21.004 --> 00:03:24.006
you could be issuing access to a resource forever,

73
00:03:24.006 --> 00:03:26.009
which is not ideal.

74
00:03:26.009 --> 00:03:30.000
Finally, don't include highly sensitive information

75
00:03:30.000 --> 00:03:33.007
inside the payload of a token that leaves your control.

76
00:03:33.007 --> 00:03:36.000
If you need to access sensitive information

77
00:03:36.000 --> 00:03:39.003
from a microservice, there's patterns that can be used

78
00:03:39.003 --> 00:03:42.000
to secure the information.

79
00:03:42.000 --> 00:03:44.006
We've discussed the general purpose of tokens,

80
00:03:44.006 --> 00:03:47.008
their life cycle, and a few best practices.

81
00:03:47.008 --> 00:03:51.000
Understanding how they are used, when they are used,

82
00:03:51.000 --> 00:03:53.009
and the different standards that apply will allow you

83
00:03:53.009 --> 00:03:58.000
to be certain your microservices are securely using them.

