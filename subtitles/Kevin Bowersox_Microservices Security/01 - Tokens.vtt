WEBVTT
1
00:00:00.006 --> 00:00:03.006
- [Instructor] Microservices depend heavily upon tokens

2
00:00:03.006 --> 00:00:07.006
for establishing identity and enforcing access control.

3
00:00:07.006 --> 00:00:10.002
Tokens help overcome the challenges posed

4
00:00:10.002 --> 00:00:12.009
by a distributed system.

5
00:00:12.009 --> 00:00:14.007
In a microservice architecture,

6
00:00:14.007 --> 00:00:17.007
there is not a shared session between all of the services

7
00:00:17.007 --> 00:00:20.001
that can hold information about the end user

8
00:00:20.001 --> 00:00:22.000
and their privileges.

9
00:00:22.000 --> 00:00:24.006
It is also not feasible for an end user

10
00:00:24.006 --> 00:00:28.000
to authenticate each time a service is accessed,

11
00:00:28.000 --> 00:00:30.001
nor should we pass their credentials around

12
00:00:30.001 --> 00:00:32.006
between the services.

13
00:00:32.006 --> 00:00:35.000
A token overcomes these challenges,

14
00:00:35.000 --> 00:00:38.001
because it allows a client to hold some information

15
00:00:38.001 --> 00:00:40.002
that can identify the end user

16
00:00:40.002 --> 00:00:43.003
and the access granted to the client.

17
00:00:43.003 --> 00:00:46.009
It also avoids the problem of having the client hold

18
00:00:46.009 --> 00:00:49.007
the end user's credentials.

19
00:00:49.007 --> 00:00:53.005
At a high level, tokens fall under one of two formats,

20
00:00:53.005 --> 00:00:55.006
reference or structured.

21
00:00:55.006 --> 00:00:58.000
The major difference between these two tokens

22
00:00:58.000 --> 00:01:02.004
is where the token's actual metadata is stored.

23
00:01:02.004 --> 00:01:04.009
A reference token is an opaque string

24
00:01:04.009 --> 00:01:08.001
that doesn't contain any meaningful data.

25
00:01:08.001 --> 00:01:12.006
Instead, it is passed in a request and used as an identifier

26
00:01:12.006 --> 00:01:15.008
to look up the token metadata in a repository

27
00:01:15.008 --> 00:01:20.009
of stored tokens inside the IAM platform.

28
00:01:20.009 --> 00:01:21.009
On the other hand,

29
00:01:21.009 --> 00:01:25.003
structured tokens hold metadata about the token itself,

30
00:01:25.003 --> 00:01:28.000
the authentication event, and the end user

31
00:01:28.000 --> 00:01:30.006
inside the token's payload.

32
00:01:30.006 --> 00:01:35.000
The metadata is stored in key value pairs known as claims,

33
00:01:35.000 --> 00:01:38.008
which are grouped together into a claim set.

34
00:01:38.008 --> 00:01:41.009
One of the standards for formatting structured tokens

35
00:01:41.009 --> 00:01:46.007
commonly used inside microservices is JSON web token.

36
00:01:46.007 --> 00:01:48.007
When discussing JSON web tokens,

37
00:01:48.007 --> 00:01:53.003
you'll hear the term pronounced as either JWT or jot.

38
00:01:53.003 --> 00:01:56.004
I wouldn't get caught up in how to pronounce it.

39
00:01:56.004 --> 00:01:59.004
The JWT standard defines a structure

40
00:01:59.004 --> 00:02:02.006
that uses a signature and optional encryption

41
00:02:02.006 --> 00:02:05.001
to securely transmit a JSON object

42
00:02:05.001 --> 00:02:09.004
between two parties, like our client and our microservice.

43
00:02:09.004 --> 00:02:12.002
The jot structure defines three segments,

44
00:02:12.002 --> 00:02:16.000
a header, the payload, and a signature.

45
00:02:16.000 --> 00:02:17.006
The JOSE header of a jot

46
00:02:17.006 --> 00:02:21.005
specifies how the token was cryptographically protected,

47
00:02:21.005 --> 00:02:24.001
allowing the holder of the token to understand

48
00:02:24.001 --> 00:02:26.009
what algorithms or techniques were used

49
00:02:26.009 --> 00:02:29.007
to sign or encrypt the token.

50
00:02:29.007 --> 00:02:32.002
The payload or claim set of a jot

51
00:02:32.002 --> 00:02:35.009
contains information formatted in key value pairs

52
00:02:35.009 --> 00:02:40.005
that pertain to the end user or authentication event.

53
00:02:40.005 --> 00:02:43.001
The final segment of a jot, the signature,

54
00:02:43.001 --> 00:02:45.001
is very important.

55
00:02:45.001 --> 00:02:48.006
It is cryptographically derived from the token's header,

56
00:02:48.006 --> 00:02:51.002
payload, and a secret key.

57
00:02:51.002 --> 00:02:53.004
The signature is used to verify

58
00:02:53.004 --> 00:02:57.003
that a token hasn't changed since it was created.

59
00:02:57.003 --> 00:02:59.002
This is a way to ensure the token

60
00:02:59.002 --> 00:03:01.002
has maintained its integrity

61
00:03:01.002 --> 00:03:04.009
as it's passed from one party to the other.

62
00:03:04.009 --> 00:03:08.001
Structured tokens and reference tokens can be used

63
00:03:08.001 --> 00:03:10.005
for several different purposes.

64
00:03:10.005 --> 00:03:13.006
We have primarily been talking about access tokens,

65
00:03:13.006 --> 00:03:17.002
which are tokens used to gain access to a microservice,

66
00:03:17.002 --> 00:03:21.000
and they can be either reference or structured tokens.

67
00:03:21.000 --> 00:03:24.000
Another type of token, known as a refresh token,

68
00:03:24.000 --> 00:03:27.006
is a reference token that allows a new access token

69
00:03:27.006 --> 00:03:30.003
to be obtained after the current one

70
00:03:30.003 --> 00:03:33.008
held by a client has expired.

71
00:03:33.008 --> 00:03:36.004
ID tokens are another type of token

72
00:03:36.004 --> 00:03:38.001
that uses a jot structure

73
00:03:38.001 --> 00:03:42.005
to provide authentication information regarding the user

74
00:03:42.005 --> 00:03:45.007
for use by the client.

75
00:03:45.007 --> 00:03:48.005
These tokens will progress through a life cycle

76
00:03:48.005 --> 00:03:50.007
that begins with their issue and ends

77
00:03:50.007 --> 00:03:53.008
with their expiration or revocation.

78
00:03:53.008 --> 00:03:57.001
In the interim, they will be used by microservices

79
00:03:57.001 --> 00:04:01.008
to make access decisions and to establish end user identity.

80
00:04:01.008 --> 00:04:04.005
Most events in this lifecycle are governed

81
00:04:04.005 --> 00:04:08.006
by well-defined industry standards like OAuth or jot,

82
00:04:08.006 --> 00:04:11.005
and you can find them implemented in open sourced

83
00:04:11.005 --> 00:04:14.008
and commercial IAM platforms.

84
00:04:14.008 --> 00:04:17.000
Tokens fill the void in microservices

85
00:04:17.000 --> 00:04:19.009
where the session used to be in a monolith.

86
00:04:19.009 --> 00:04:22.006
However, the trade-off is that tokens

87
00:04:22.006 --> 00:04:25.004
are much more difficult to manage.

88
00:04:25.004 --> 00:04:26.008
In upcoming discussions,

89
00:04:26.008 --> 00:04:30.008
we'll layer in how various standards and cryptography

90
00:04:30.008 --> 00:04:33.009
are used to protect the integrity and confidentiality

91
00:04:33.009 --> 00:04:37.001
of tokens in microservice-based systems

92
00:04:37.001 --> 00:04:41.000
so that they can securely be used for access control.

