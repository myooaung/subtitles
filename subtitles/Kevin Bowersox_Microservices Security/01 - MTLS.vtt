WEBVTT
1
00:00:00.000 --> 00:00:02.006
- [Instructor] Identity plays an important role

2
00:00:02.006 --> 00:00:06.007
in digital security and microservices are not an exception.

3
00:00:06.007 --> 00:00:10.001
Some microservice security schemes choose

4
00:00:10.001 --> 00:00:12.008
to simply trust the network after a request

5
00:00:12.008 --> 00:00:16.003
has passed a certain point in the architecture.

6
00:00:16.003 --> 00:00:19.001
Services within a certain segment of the network

7
00:00:19.001 --> 00:00:22.002
are simply permitted to call each other without any scrutiny

8
00:00:22.002 --> 00:00:27.004
of the request or identification of the calling party.

9
00:00:27.004 --> 00:00:30.007
This breaks the important concept of defense in depth

10
00:00:30.007 --> 00:00:33.000
and creates a major vulnerability

11
00:00:33.000 --> 00:00:35.005
if an attacker breaches the network

12
00:00:35.005 --> 00:00:39.003
because they now have unimpeded access to the microservices

13
00:00:39.003 --> 00:00:40.009
in a deployment.

14
00:00:40.009 --> 00:00:44.002
Large segments of the network shouldn't be established

15
00:00:44.002 --> 00:00:45.009
as trust boundaries.

16
00:00:45.009 --> 00:00:47.007
Instead, the trust boundary

17
00:00:47.007 --> 00:00:50.002
should be the microservice itself.

18
00:00:50.002 --> 00:00:54.001
The microservice should not trust any external information

19
00:00:54.001 --> 00:00:55.007
or parties by default.

20
00:00:55.007 --> 00:00:59.003
Instead, the microservice should verify the identity

21
00:00:59.003 --> 00:01:02.001
of any calling party and the integrity

22
00:01:02.001 --> 00:01:04.004
of the information it receives.

23
00:01:04.004 --> 00:01:08.005
This is the concept of zero trust and we can incorporate it

24
00:01:08.005 --> 00:01:12.002
into how our microservices communicate to add some depth

25
00:01:12.002 --> 00:01:13.008
to our defense.

26
00:01:13.008 --> 00:01:16.009
Digital certificates are the most common way

27
00:01:16.009 --> 00:01:20.003
to assert the identity of a digital entity.

28
00:01:20.003 --> 00:01:23.000
A digital certificate contains information

29
00:01:23.000 --> 00:01:26.000
that identifies an entity, a public key

30
00:01:26.000 --> 00:01:28.009
and information regarding the certificate authority

31
00:01:28.009 --> 00:01:30.005
that issued it.

32
00:01:30.005 --> 00:01:34.000
in transport layer security or TLS,

33
00:01:34.000 --> 00:01:37.005
a digital certificate and PKI allow two parties

34
00:01:37.005 --> 00:01:41.002
to communicate information via an encrypted channel.

35
00:01:41.002 --> 00:01:43.002
This is established using a certificate

36
00:01:43.002 --> 00:01:46.004
and an encryption key that are exchanged.

37
00:01:46.004 --> 00:01:50.004
In the scenario, it's only one way authentication

38
00:01:50.004 --> 00:01:52.009
using the certificate because the server

39
00:01:52.009 --> 00:01:55.007
hasn't verified the identity of the client

40
00:01:55.007 --> 00:01:57.009
using its digital cert.

41
00:01:57.009 --> 00:02:01.007
It's only the client that verifies the server's identity,

42
00:02:01.007 --> 00:02:05.009
checking that its certificate was issued by a trusted list

43
00:02:05.009 --> 00:02:09.009
of certificate authorities maintained in the browser.

44
00:02:09.009 --> 00:02:12.007
You've most likely seen this in your browser

45
00:02:12.007 --> 00:02:14.007
when visiting a sensitive website,

46
00:02:14.007 --> 00:02:17.003
like an online banking platform.

47
00:02:17.003 --> 00:02:20.002
A little lock displaced to the left of the URL,

48
00:02:20.002 --> 00:02:22.009
where you can see the website cert.

49
00:02:22.009 --> 00:02:25.008
The digital certificate allows you to verify

50
00:02:25.008 --> 00:02:29.005
that it's actually your bank's website and not a spoof site

51
00:02:29.005 --> 00:02:32.003
that tends to steal your credentials.

52
00:02:32.003 --> 00:02:36.003
Because our browser trusts the certificate authority

53
00:02:36.003 --> 00:02:40.007
that issued the bank cert, we know the site can be trusted.

54
00:02:40.007 --> 00:02:43.005
Additionally, it's an indicator that our browser

55
00:02:43.005 --> 00:02:47.008
is communicating with the web server securely over TLS.

56
00:02:47.008 --> 00:02:50.008
So we can be sure that any information we send

57
00:02:50.008 --> 00:02:53.000
is not in clear text.

58
00:02:53.000 --> 00:02:56.007
To secure microservices, we can take the concept

59
00:02:56.007 --> 00:03:01.008
of TLS one step further by implementing mutual TLS.

60
00:03:01.008 --> 00:03:05.007
When using mutual TLS, both parties authenticate

61
00:03:05.007 --> 00:03:08.007
by providing their digital certificate that was issued

62
00:03:08.007 --> 00:03:12.001
by a mutually trusted certificate authority

63
00:03:12.001 --> 00:03:15.004
before the secure channel is established.

64
00:03:15.004 --> 00:03:18.004
Mutual TLS is one of the most common approaches

65
00:03:18.004 --> 00:03:21.007
for securing microservices use today.

66
00:03:21.007 --> 00:03:23.003
It allows the services

67
00:03:23.003 --> 00:03:25.009
to identify each other and be confident

68
00:03:25.009 --> 00:03:29.006
in each other's identity before communicating.

69
00:03:29.006 --> 00:03:33.007
When using mutual TLS, each microservice is deployed

70
00:03:33.007 --> 00:03:36.009
with a certificate and private and public key pair

71
00:03:36.009 --> 00:03:39.001
that allows them to identify each other

72
00:03:39.001 --> 00:03:43.001
when they communicate and to establish secure connections.

73
00:03:43.001 --> 00:03:45.005
Additionally, mutual TLS should be used

74
00:03:45.005 --> 00:03:48.005
to secure the communication between the API gateway

75
00:03:48.005 --> 00:03:51.004
and the microservice deployment.

76
00:03:51.004 --> 00:03:54.000
This adds an extra level of protection

77
00:03:54.000 --> 00:03:57.005
because if an attacker found their way into the network,

78
00:03:57.005 --> 00:03:59.004
they couldn't call a microservice

79
00:03:59.004 --> 00:04:02.000
without a trusted digital certificate.

80
00:04:02.000 --> 00:04:05.000
This is the depth in our defense.

81
00:04:05.000 --> 00:04:08.008
One of the challenges with mutual TLS is management

82
00:04:08.008 --> 00:04:11.005
and provisioning of the certificates.

83
00:04:11.005 --> 00:04:15.001
Most microservices are hosted in a femoral containers

84
00:04:15.001 --> 00:04:17.007
that will spin up and down on a whim.

85
00:04:17.007 --> 00:04:21.007
So provisioning a certificates needs to be automated.

86
00:04:21.007 --> 00:04:25.000
There is also the problem of how we rotate certificates

87
00:04:25.000 --> 00:04:26.008
that are about to expire.

88
00:04:26.008 --> 00:04:29.006
This should also be handled via automation

89
00:04:29.006 --> 00:04:32.003
because of the number of instances we can spin up

90
00:04:32.003 --> 00:04:34.000
of a microservice.

91
00:04:34.000 --> 00:04:36.005
While this may seem overwhelming,

92
00:04:36.005 --> 00:04:39.009
there are container orchestrators and service meshes

93
00:04:39.009 --> 00:04:44.000
that have built in features for managing mutual TLS.

94
00:04:44.000 --> 00:04:47.009
Configuring mutual TLS capabilities adds another layer

95
00:04:47.009 --> 00:04:49.007
of security to your microservices

96
00:04:49.007 --> 00:04:53.007
that is extremely effective and worth the effort.

97
00:04:53.007 --> 00:04:55.005
If you choose to trust the network,

98
00:04:55.005 --> 00:04:59.000
be aware you're putting your microservices at risk.

