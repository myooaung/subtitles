WEBVTT
1
00:00:00.006 --> 00:00:03.004
- [Teacher] When securing microservices in containers,

2
00:00:03.004 --> 00:00:07.002
a lot of attention is paid to the runtime configuration.

3
00:00:07.002 --> 00:00:10.003
However, we need to keep in mind that securely building

4
00:00:10.003 --> 00:00:14.004
and sourcing images is just as important.

5
00:00:14.004 --> 00:00:18.004
Images are built from instructions found in a Dockerfile.

6
00:00:18.004 --> 00:00:21.008
These instructions add our microservice to the image

7
00:00:21.008 --> 00:00:24.004
and configure it to run the service.

8
00:00:24.004 --> 00:00:26.000
You can think of a Dockerfile

9
00:00:26.000 --> 00:00:29.000
almost like source code for an environment.

10
00:00:29.000 --> 00:00:31.001
Once the Dockerfile is ready,

11
00:00:31.001 --> 00:00:33.004
it is built into a container image

12
00:00:33.004 --> 00:00:36.005
which is similar to how developers compile the source code

13
00:00:36.005 --> 00:00:39.009
for an object into a class.

14
00:00:39.009 --> 00:00:41.006
When we are ready to run the image,

15
00:00:41.006 --> 00:00:45.005
an instance of it known as a container is created,

16
00:00:45.005 --> 00:00:48.003
and it is ran on the container engine.

17
00:00:48.003 --> 00:00:49.005
If you're a developer,

18
00:00:49.005 --> 00:00:53.003
this is like creating an instance of a class.

19
00:00:53.003 --> 00:00:56.006
Just like classes in object-oriented programming,

20
00:00:56.006 --> 00:00:59.005
you can use a class written by another developer,

21
00:00:59.005 --> 00:01:03.002
you can build your own or a combination of the two.

22
00:01:03.002 --> 00:01:05.004
Containers are the same way.

23
00:01:05.004 --> 00:01:08.000
Typically when developers build their own image,

24
00:01:08.000 --> 00:01:10.002
they start from one that is provided to them,

25
00:01:10.002 --> 00:01:13.000
which is known as the base image.

26
00:01:13.000 --> 00:01:16.000
Then for each instruction in their Dockerfile,

27
00:01:16.000 --> 00:01:18.009
a new layer is added to the image.

28
00:01:18.009 --> 00:01:20.009
Finally, when the image is ready,

29
00:01:20.009 --> 00:01:23.003
it is built and stored in the registry

30
00:01:23.003 --> 00:01:27.001
where it can be pulled and run as a container.

31
00:01:27.001 --> 00:01:29.006
Now, let's layer some security principles

32
00:01:29.006 --> 00:01:31.002
on top of all this.

33
00:01:31.002 --> 00:01:34.000
First, it's very important that the base image

34
00:01:34.000 --> 00:01:37.006
is an official base image provided by a trusted source

35
00:01:37.006 --> 00:01:40.004
through a trusted repository.

36
00:01:40.004 --> 00:01:41.002
Typically,

37
00:01:41.002 --> 00:01:44.003
you'll be getting these images from major technology players

38
00:01:44.003 --> 00:01:49.002
like Microsoft, Red Hat or official Linux distros.

39
00:01:49.002 --> 00:01:52.004
If you pull an image from an untrusted source,

40
00:01:52.004 --> 00:01:55.002
it is possible to introduce a malicious container

41
00:01:55.002 --> 00:01:59.000
into your environment that has been planted by an attacker.

42
00:01:59.000 --> 00:02:01.008
This is one form of a supply chain attack

43
00:02:01.008 --> 00:02:05.007
where malicious code is inserted into the build process,

44
00:02:05.007 --> 00:02:08.004
ultimately leading to a corrupt container

45
00:02:08.004 --> 00:02:10.009
running in production.

46
00:02:10.009 --> 00:02:14.008
Many organizations manage their own image registries,

47
00:02:14.008 --> 00:02:17.001
and only allow their container platforms

48
00:02:17.001 --> 00:02:20.000
to pull approved images from them.

49
00:02:20.000 --> 00:02:24.005
They only permit official trusted images into the repository

50
00:02:24.005 --> 00:02:27.003
and only allowed developers to add images

51
00:02:27.003 --> 00:02:30.002
through the CICD pipeline.

52
00:02:30.002 --> 00:02:32.008
Combined with effective security scanning,

53
00:02:32.008 --> 00:02:35.003
this strategy effectively seals

54
00:02:35.003 --> 00:02:38.005
where images can be sourced and introduced,

55
00:02:38.005 --> 00:02:40.005
helping to prevent vulnerable images

56
00:02:40.005 --> 00:02:43.000
from entering the environment.

57
00:02:43.000 --> 00:02:45.006
Now, just because an image was deemed secure

58
00:02:45.006 --> 00:02:47.000
at one point in time,

59
00:02:47.000 --> 00:02:50.008
doesn't mean a vulnerability can't be found against it.

60
00:02:50.008 --> 00:02:54.003
So here we're looking at a Red Hat Python image.

61
00:02:54.003 --> 00:02:55.005
And you'll notice that

62
00:02:55.005 --> 00:02:58.004
if we look at the latest version of the image,

63
00:02:58.004 --> 00:03:00.003
it is secure.

64
00:03:00.003 --> 00:03:01.008
Now, if we go back

65
00:03:01.008 --> 00:03:05.004
and just take a look at the image 18 days ago,

66
00:03:05.004 --> 00:03:09.008
you'll notice that a CVE was found against this image

67
00:03:09.008 --> 00:03:13.000
or a piece of software that it uses.

68
00:03:13.000 --> 00:03:15.003
Now, this isn't a knock on Red Hat,

69
00:03:15.003 --> 00:03:17.007
it's actually very good that they're keeping up-to-date

70
00:03:17.007 --> 00:03:19.004
with the vulnerabilities,

71
00:03:19.004 --> 00:03:22.003
but it does create the need for users of the image

72
00:03:22.003 --> 00:03:26.008
to follow it and make sure they're using the latest version.

73
00:03:26.008 --> 00:03:29.000
Most providers of official images

74
00:03:29.000 --> 00:03:30.008
will routinely update them

75
00:03:30.008 --> 00:03:34.005
to address critical vulnerabilities identified in CVEs.

76
00:03:34.005 --> 00:03:38.005
So it's important to follow them and stay up-to-date.

77
00:03:38.005 --> 00:03:41.003
To ensure you're using the latest secure images,

78
00:03:41.003 --> 00:03:44.003
the image registry should be scanned frequently

79
00:03:44.003 --> 00:03:46.006
using an automated toll like Snyk

80
00:03:46.006 --> 00:03:48.006
that detects potential vulnerabilities

81
00:03:48.006 --> 00:03:50.006
related to an image.

82
00:03:50.006 --> 00:03:52.005
This can help identify containers

83
00:03:52.005 --> 00:03:55.000
created without a date base images

84
00:03:55.000 --> 00:03:57.002
that have recently discovered CVEs

85
00:03:57.002 --> 00:03:59.006
and vulnerabilities against them.

86
00:03:59.006 --> 00:04:00.004
Typically,

87
00:04:00.004 --> 00:04:03.000
this is fixed by rebuilding the image

88
00:04:03.000 --> 00:04:05.001
with a new version of the base image,

89
00:04:05.001 --> 00:04:07.001
and then redeploying the container

90
00:04:07.001 --> 00:04:09.004
to replace the older instances

91
00:04:09.004 --> 00:04:12.006
that are running with the vulnerabilities.

92
00:04:12.006 --> 00:04:14.004
Another best security practice

93
00:04:14.004 --> 00:04:17.000
is to choose a thin base image,

94
00:04:17.000 --> 00:04:19.006
which limits the tolls it contains,

95
00:04:19.006 --> 00:04:20.009
because it helps to reduce

96
00:04:20.009 --> 00:04:23.003
the attack surface of the container

97
00:04:23.003 --> 00:04:26.001
and it can limit an attackers options,

98
00:04:26.001 --> 00:04:29.003
if they were to compromise a microservice.

99
00:04:29.003 --> 00:04:31.000
Technologies like containers

100
00:04:31.000 --> 00:04:33.005
place control of the entire stack

101
00:04:33.005 --> 00:04:35.003
into the hands of developers,

102
00:04:35.003 --> 00:04:38.005
who may unknowingly do the wrong thing.

103
00:04:38.005 --> 00:04:41.006
It is important to establish good security practices

104
00:04:41.006 --> 00:04:44.009
surrounding images that give developers the power

105
00:04:44.009 --> 00:04:47.001
to deliver new microservices

106
00:04:47.001 --> 00:04:50.006
while staying within some security guard rails.

107
00:04:50.006 --> 00:04:51.007
To achieve this,

108
00:04:51.007 --> 00:04:54.007
you may need to take a closer look at your toll chain

109
00:04:54.007 --> 00:04:56.008
to ensure it supports new technologies

110
00:04:56.008 --> 00:04:59.004
like containers and microservices.

111
00:04:59.004 --> 00:05:00.008
Many of these technologies

112
00:05:00.008 --> 00:05:04.000
have outpaced traditional security practices.

