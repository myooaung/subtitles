WEBVTT
1
00:00:00.006 --> 00:00:03.002
- [Instructor] Microservice Architectures present unique

2
00:00:03.002 --> 00:00:06.002
security challenges that require us to rethink

3
00:00:06.002 --> 00:00:09.001
how we approach application security.

4
00:00:09.001 --> 00:00:13.000
Security strategies used in monolith are well established

5
00:00:13.000 --> 00:00:16.007
when compared to a Microservice Architecture.

6
00:00:16.007 --> 00:00:19.007
In a monolith, the number of exposed ports is kept

7
00:00:19.007 --> 00:00:24.004
to a minimum to reduce the applications attack surface.

8
00:00:24.004 --> 00:00:27.000
Requests entering the system are intercepted

9
00:00:27.000 --> 00:00:30.001
by a security filter that ensures users are authenticated

10
00:00:30.001 --> 00:00:33.006
and permitted to access the system.

11
00:00:33.006 --> 00:00:37.003
Upon authentication, a security context is established

12
00:00:37.003 --> 00:00:40.002
that contains the authenticated users identity,

13
00:00:40.002 --> 00:00:42.004
roles and permissions.

14
00:00:42.004 --> 00:00:46.008
Since the entire system executes within a single process,

15
00:00:46.008 --> 00:00:50.001
this security context is used throughout the monolith

16
00:00:50.001 --> 00:00:55.006
to authorize granular access to data and capabilities.

17
00:00:55.006 --> 00:00:58.001
Essentially, the entire monolith shares

18
00:00:58.001 --> 00:01:01.001
the same trust domain.

19
00:01:01.001 --> 00:01:04.003
Microservice Architectures are fundamentally different,

20
00:01:04.003 --> 00:01:07.007
so we need to rewrite the playbook.

21
00:01:07.007 --> 00:01:11.000
By design, these distributed systems are made up

22
00:01:11.000 --> 00:01:14.006
of independent components that must expose a port

23
00:01:14.006 --> 00:01:16.003
in order to be cold.

24
00:01:16.003 --> 00:01:20.004
This broadens the system's attack surface.

25
00:01:20.004 --> 00:01:22.009
The attack surface is also dynamic.

26
00:01:22.009 --> 00:01:25.006
It changes as we scale a service

27
00:01:25.006 --> 00:01:29.003
or when a new service is introduced.

28
00:01:29.003 --> 00:01:32.002
Access control poses another challenge

29
00:01:32.002 --> 00:01:35.003
as outside network traffic enters the system

30
00:01:35.003 --> 00:01:37.007
also known as North/South Traffic.

31
00:01:37.007 --> 00:01:41.000
We must decide where to perform authentication

32
00:01:41.000 --> 00:01:44.004
and subsequently authorization.

33
00:01:44.004 --> 00:01:46.009
Building authentication into each service

34
00:01:46.009 --> 00:01:49.002
isn't a good option, because requests

35
00:01:49.002 --> 00:01:50.007
from the same principle

36
00:01:50.007 --> 00:01:55.001
to another service would require reauthentication.

37
00:01:55.001 --> 00:01:57.004
Security controls may also be necessary

38
00:01:57.004 --> 00:01:59.007
for traffic between services

39
00:01:59.007 --> 00:02:02.003
also known as East/West Traffic,

40
00:02:02.003 --> 00:02:04.007
in order to maintain confidentiality

41
00:02:04.007 --> 00:02:09.002
and integrity of data pass between services.

42
00:02:09.002 --> 00:02:12.004
This task becomes more complicated when the traffic

43
00:02:12.004 --> 00:02:16.006
between services spans multiple trust domains.

44
00:02:16.006 --> 00:02:19.006
Once the user's identity is established,

45
00:02:19.006 --> 00:02:23.000
sharing that information across services while maintaining

46
00:02:23.000 --> 00:02:27.006
it's integrity requires specialized strategies.

47
00:02:27.006 --> 00:02:30.005
Microservice security isn't all doom and gloom.

48
00:02:30.005 --> 00:02:33.006
There are a few bright spots.

49
00:02:33.006 --> 00:02:37.003
Because services are independent of one another,

50
00:02:37.003 --> 00:02:42.001
there can be advantages when it comes to availability.

51
00:02:42.001 --> 00:02:46.000
For example, a denial of service attack could crash

52
00:02:46.000 --> 00:02:48.005
a non-essential service.

53
00:02:48.005 --> 00:02:52.003
However, since the attack only hit one service,

54
00:02:52.003 --> 00:02:54.005
it's possible for the rest of the system

55
00:02:54.005 --> 00:02:57.000
to remain available.

56
00:02:57.000 --> 00:03:01.006
If a service were exploited, the impact might be confined

57
00:03:01.006 --> 00:03:03.008
to a smaller portion of the system

58
00:03:03.008 --> 00:03:08.000
because it is harder for an attacker to move laterally.

59
00:03:08.000 --> 00:03:10.005
To secure a Microservice Architecture,

60
00:03:10.005 --> 00:03:12.006
it's important to take the time upfront

61
00:03:12.006 --> 00:03:14.009
to understand these unique aspects

62
00:03:14.009 --> 00:03:17.005
of securing a distributed system.

63
00:03:17.005 --> 00:03:22.000
That way the appropriate security strategies can be applied.

