WEBVTT
1
00:00:00.006 --> 00:00:03.002
- [Instructor] Microservice Architectures have introduced

2
00:00:03.002 --> 00:00:06.008
a fundamental shift that changes how developers build,

3
00:00:06.008 --> 00:00:11.001
operate, and secure technical systems.

4
00:00:11.001 --> 00:00:14.005
Before microservices many systems were built using a

5
00:00:14.005 --> 00:00:16.009
three tier architecture that consisted

6
00:00:16.009 --> 00:00:18.006
of a presentation layer that runs

7
00:00:18.006 --> 00:00:22.000
in the browser, a logic tier that ran server side

8
00:00:22.000 --> 00:00:26.006
and a database tier where information was stored.

9
00:00:26.006 --> 00:00:28.000
In this architecture

10
00:00:28.000 --> 00:00:29.009
the logic tier contains a set

11
00:00:29.009 --> 00:00:33.003
of services that work together to provide the systems

12
00:00:33.003 --> 00:00:36.003
business capabilities and data.

13
00:00:36.003 --> 00:00:39.000
In a hypothetical e-commerce system

14
00:00:39.000 --> 00:00:41.007
this might include services for business functions

15
00:00:41.007 --> 00:00:44.009
like the product catalog, inventory, pricing,

16
00:00:44.009 --> 00:00:47.005
shopping cart, and delivery.

17
00:00:47.005 --> 00:00:50.006
In a monolith we develop, package and deploy

18
00:00:50.006 --> 00:00:51.006
these business services

19
00:00:51.006 --> 00:00:55.006
as a single executable, which allows them to communicate

20
00:00:55.006 --> 00:01:00.001
in process to complete business functions.

21
00:01:00.001 --> 00:01:02.002
On the contrary microservice

22
00:01:02.002 --> 00:01:04.008
architectures separate the services

23
00:01:04.008 --> 00:01:06.006
in a systems application tier

24
00:01:06.006 --> 00:01:08.006
into separate components that are hosted

25
00:01:08.006 --> 00:01:12.008
and executed independently of one another.

26
00:01:12.008 --> 00:01:14.008
Since microservices execute

27
00:01:14.008 --> 00:01:17.005
in their own process space, all communication

28
00:01:17.005 --> 00:01:20.009
and collaboration between services occurs

29
00:01:20.009 --> 00:01:25.006
over a network protocol, typically HTTP.

30
00:01:25.006 --> 00:01:27.008
Access to a microservices data

31
00:01:27.008 --> 00:01:30.003
and capabilities occur strictly

32
00:01:30.003 --> 00:01:33.000
through a well-defined interface that is exposed

33
00:01:33.000 --> 00:01:35.007
as a rest API.

34
00:01:35.007 --> 00:01:37.007
Microservice architectures deliver a number

35
00:01:37.007 --> 00:01:39.008
of benefits that are related

36
00:01:39.008 --> 00:01:42.009
to their loose coupling and independence.

37
00:01:42.009 --> 00:01:44.008
When a system is built using microservices

38
00:01:44.008 --> 00:01:48.002
each service within the system can be developed

39
00:01:48.002 --> 00:01:52.003
and maintained by a separate team.

40
00:01:52.003 --> 00:01:53.006
The decoupled nature

41
00:01:53.006 --> 00:01:55.007
of the services allows these teams

42
00:01:55.007 --> 00:02:01.005
to isolate their development and avoid scheduled dependence.

43
00:02:01.005 --> 00:02:04.001
Once a change to a service is ready

44
00:02:04.001 --> 00:02:07.000
it can be least independent of the other services

45
00:02:07.000 --> 00:02:12.007
in the system because microservices are autonomous.

46
00:02:12.007 --> 00:02:14.000
The services are developed,

47
00:02:14.000 --> 00:02:17.005
packaged and deployed separately from each other.

48
00:02:17.005 --> 00:02:20.003
Eliminating the need to coordinate the timing

49
00:02:20.003 --> 00:02:22.000
of a big bang deployment that releases

50
00:02:22.000 --> 00:02:25.008
the entire system all at once.

51
00:02:25.008 --> 00:02:27.000
The autonomous nature

52
00:02:27.000 --> 00:02:29.001
of microservices also allows them

53
00:02:29.001 --> 00:02:32.003
to be scaled independently.

54
00:02:32.003 --> 00:02:33.005
If a specific service such

55
00:02:33.005 --> 00:02:36.009
as the catalog service comes under heavy load

56
00:02:36.009 --> 00:02:39.002
we can horizontally scale only

57
00:02:39.002 --> 00:02:41.008
that service to meet the demand.

58
00:02:41.008 --> 00:02:45.004
This allows us to efficiently allocate resources

59
00:02:45.004 --> 00:02:46.004
such as CPU

60
00:02:46.004 --> 00:02:50.007
and memory to where they are most needed in our system.

61
00:02:50.007 --> 00:02:55.000
Finally, microservice architectures can be more resilient.

62
00:02:55.000 --> 00:02:58.009
If a service within the distributed system begins to fail

63
00:02:58.009 --> 00:03:01.001
microservices can implement several

64
00:03:01.001 --> 00:03:05.006
fault tolerance strategies to keep the system intact.

65
00:03:05.006 --> 00:03:09.003
One resiliency pattern is the circuit breaker pattern

66
00:03:09.003 --> 00:03:12.008
which redirects traffic intended for a failing service

67
00:03:12.008 --> 00:03:15.001
to another service that provides a basic

68
00:03:15.001 --> 00:03:19.001
or default implementation of the service.

69
00:03:19.001 --> 00:03:21.005
These characteristics differentiate

70
00:03:21.005 --> 00:03:23.002
a microservice architecture

71
00:03:23.002 --> 00:03:25.009
from the traditional three tier monolith

72
00:03:25.009 --> 00:03:27.005
and will require it different

73
00:03:27.005 --> 00:03:30.006
security strategies be applied to achieve confidentiality

74
00:03:30.006 --> 00:03:34.000
integrity, and availability.

