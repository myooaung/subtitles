WEBVTT
1
00:00:00.006 --> 00:00:02.009
- [Instructor] As microservices have matured,

2
00:00:02.009 --> 00:00:06.003
so have the techniques used to secure them.

3
00:00:06.003 --> 00:00:10.005
In security domains, such as identity and access management,

4
00:00:10.005 --> 00:00:12.009
you're going to even discover general patterns

5
00:00:12.009 --> 00:00:13.008
that have emerged,

6
00:00:13.008 --> 00:00:16.005
like the ones we're about to discuss.

7
00:00:16.005 --> 00:00:19.004
Using patterns allows us to abstract away

8
00:00:19.004 --> 00:00:21.004
the finer implementation details

9
00:00:21.004 --> 00:00:24.004
to see how a system works at a high level.

10
00:00:24.004 --> 00:00:27.004
Our discussion will leave a few key points for later.

11
00:00:27.004 --> 00:00:30.002
However, it's important we highlight two concepts

12
00:00:30.002 --> 00:00:34.000
before we proceed, clients and tokens.

13
00:00:34.000 --> 00:00:37.001
Client is a general term that describes any hardware

14
00:00:37.001 --> 00:00:39.006
or software calling a service.

15
00:00:39.006 --> 00:00:41.004
For microservice architectures,

16
00:00:41.004 --> 00:00:44.007
this could be a mobile device, a single page application,

17
00:00:44.007 --> 00:00:47.005
a Java backend, a batch process,

18
00:00:47.005 --> 00:00:50.000
or another company's application.

19
00:00:50.000 --> 00:00:53.000
Now, clients are also used by end users

20
00:00:53.000 --> 00:00:58.008
to access their data on APIs or microservices.

21
00:00:58.008 --> 00:01:00.009
We're also going to talk about tokens.

22
00:01:00.009 --> 00:01:03.003
You can think of these as digital keys

23
00:01:03.003 --> 00:01:05.006
that contain security credentials,

24
00:01:05.006 --> 00:01:10.000
that open doors to resources like our microservices.

25
00:01:10.000 --> 00:01:13.005
Like real life keys, tokens come in various formats.

26
00:01:13.005 --> 00:01:16.006
Some are as simple as random strings of characters,

27
00:01:16.006 --> 00:01:22.000
like a UUID, while others contain more detailed information.

28
00:01:22.000 --> 00:01:24.007
These two concepts will play a key role

29
00:01:24.007 --> 00:01:27.006
in our discussion of access control.

30
00:01:27.006 --> 00:01:31.002
Similar to other parts of a microservice architecture,

31
00:01:31.002 --> 00:01:34.008
the responsibility of managing a party's identity,

32
00:01:34.008 --> 00:01:37.009
privileges, and access is isolated

33
00:01:37.009 --> 00:01:40.007
to a separate distributed component.

34
00:01:40.007 --> 00:01:43.000
For now, we're going to call this component

35
00:01:43.000 --> 00:01:45.001
the identity service.

36
00:01:45.001 --> 00:01:48.003
The service is important because it provides tokens

37
00:01:48.003 --> 00:01:52.006
to client applications after an authentication event.

38
00:01:52.006 --> 00:01:56.007
These tokens are passed in calls to the microservices

39
00:01:56.007 --> 00:01:59.005
by the client to demonstrate its permission

40
00:01:59.005 --> 00:02:01.005
to access them.

41
00:02:01.005 --> 00:02:05.000
From here, the pattern can take several forms.

42
00:02:05.000 --> 00:02:07.007
In simple and direct implementations,

43
00:02:07.007 --> 00:02:10.003
microservices will pass the token

44
00:02:10.003 --> 00:02:14.007
back to the identity service to verify its authenticity

45
00:02:14.007 --> 00:02:18.002
before granting access to a resource.

46
00:02:18.002 --> 00:02:20.006
There's problems with this approach.

47
00:02:20.006 --> 00:02:24.002
It can create a lot of traffic to the identity service,

48
00:02:24.002 --> 00:02:27.003
and as new services are added, it becomes apparent

49
00:02:27.003 --> 00:02:29.008
the approach does not scale well.

50
00:02:29.008 --> 00:02:33.003
The identity service quickly becomes the busiest service

51
00:02:33.003 --> 00:02:36.007
in the system and critical issues will start to appear

52
00:02:36.007 --> 00:02:39.009
when the system is placed under load.

53
00:02:39.009 --> 00:02:42.003
One way to resolve these issues

54
00:02:42.003 --> 00:02:45.008
is to route traffic destined for the microservices

55
00:02:45.008 --> 00:02:49.004
through a reverse proxy placed in front of them.

56
00:02:49.004 --> 00:02:52.008
Before the reverse proxy allows any traffic through,

57
00:02:52.008 --> 00:02:58.000
it will validate the token against the identity service.

58
00:02:58.000 --> 00:03:00.009
After validation by the reverse proxy,

59
00:03:00.009 --> 00:03:03.000
the traffic enters what is considered

60
00:03:03.000 --> 00:03:05.003
a trusted portion of the network,

61
00:03:05.003 --> 00:03:08.000
where it can access the microservices

62
00:03:08.000 --> 00:03:11.001
without further scrutiny.

63
00:03:11.001 --> 00:03:14.003
Unfortunately, implicitly trusting the network

64
00:03:14.003 --> 00:03:16.009
is sort of an anti-pattern.

65
00:03:16.009 --> 00:03:19.006
Just establishing trust beyond the gateway

66
00:03:19.006 --> 00:03:22.007
introduces security concerns that are not acceptable

67
00:03:22.007 --> 00:03:25.002
for most systems.

68
00:03:25.002 --> 00:03:28.005
This leads us to the next evolution of the pattern,

69
00:03:28.005 --> 00:03:32.000
where the identity service places additional information

70
00:03:32.000 --> 00:03:35.008
regarding the identity and permissions of the end user

71
00:03:35.008 --> 00:03:39.000
into the token when it's created.

72
00:03:39.000 --> 00:03:42.005
Now, the client can pass information regarding the user

73
00:03:42.005 --> 00:03:47.001
and its permissions within the token to the API gateway

74
00:03:47.001 --> 00:03:51.000
and subsequently to the microservices.

75
00:03:51.000 --> 00:03:54.002
The microservices use the identity and privileges

76
00:03:54.002 --> 00:03:57.006
found in the token to enforce access policies

77
00:03:57.006 --> 00:04:00.002
without the need for any additional traffic

78
00:04:00.002 --> 00:04:02.000
to the identity service

79
00:04:02.000 --> 00:04:05.003
or just blindly trusting the network.

80
00:04:05.003 --> 00:04:08.006
There are a few more security details that must be applied

81
00:04:08.006 --> 00:04:11.005
when using any form of this pattern,

82
00:04:11.005 --> 00:04:13.007
but when it comes to microservices,

83
00:04:13.007 --> 00:04:17.002
these patterns combined with token based strategies

84
00:04:17.002 --> 00:04:20.004
are the most adopted when it comes to identity

85
00:04:20.004 --> 00:04:22.000
and access management.

