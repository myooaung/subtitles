WEBVTT
1
00:00:00.006 --> 00:00:03.000
- [Instructor] Tokens are sensitive pieces of information

2
00:00:03.000 --> 00:00:06.004
that must be validated because they grant access

3
00:00:06.004 --> 00:00:10.008
to the microservices that sit behind an API.

4
00:00:10.008 --> 00:00:13.006
In a token-based security scheme, the token is held

5
00:00:13.006 --> 00:00:16.000
by the client between requests

6
00:00:16.000 --> 00:00:19.008
and it is passed to the resource server with each request.

7
00:00:19.008 --> 00:00:22.002
The resource server cannot blindly trust

8
00:00:22.002 --> 00:00:26.001
every token it receives because an attacker may have stolen

9
00:00:26.001 --> 00:00:27.009
and tampered with it.

10
00:00:27.009 --> 00:00:30.007
In order to make an access control decision,

11
00:00:30.007 --> 00:00:35.008
a microservice must validate the authenticity of the token.

12
00:00:35.008 --> 00:00:37.008
The measures used to verify a token

13
00:00:37.008 --> 00:00:40.007
depend upon the type of the token.

14
00:00:40.007 --> 00:00:42.006
If the token is a reference token,

15
00:00:42.006 --> 00:00:46.004
it needs to be introspected at the authorization server.

16
00:00:46.004 --> 00:00:49.006
Meaning we send it back to the authorization server

17
00:00:49.006 --> 00:00:52.001
to learn more about the state of the token

18
00:00:52.001 --> 00:00:55.003
or in simple terms, we learn if it's valid.

19
00:00:55.003 --> 00:00:58.000
The OAuth 2.0 token Introspection Standard

20
00:00:58.000 --> 00:01:02.000
is an extension of OAuth that governs this process.

21
00:01:02.000 --> 00:01:04.008
If using introspection, it's best to centralize

22
00:01:04.008 --> 00:01:07.006
this feature at the API gateway.

23
00:01:07.006 --> 00:01:11.000
It's also important that the authorization server

24
00:01:11.000 --> 00:01:13.005
has clustering and caching in place

25
00:01:13.005 --> 00:01:17.004
so that it can scale to meet heavy loads.

26
00:01:17.004 --> 00:01:21.002
Validating and protecting structured tokens is a much deeper

27
00:01:21.002 --> 00:01:24.001
and more complicated space, which is defined

28
00:01:24.001 --> 00:01:28.003
by the JSON object signing and encryption specifications.

29
00:01:28.003 --> 00:01:30.005
These are also known as JOSE.

30
00:01:30.005 --> 00:01:34.000
JOSE is a group of four specifications that work together

31
00:01:34.000 --> 00:01:37.007
to ensure the integrity and confidentiality of a token

32
00:01:37.007 --> 00:01:41.007
by providing instructions for how to sign and encrypt them.

33
00:01:41.007 --> 00:01:44.008
JSON web token defines the token structure

34
00:01:44.008 --> 00:01:48.001
and it's at the core of the JOSE specifications.

35
00:01:48.001 --> 00:01:51.001
The JSON web signature specification

36
00:01:51.001 --> 00:01:55.000
outlines the steps required to create the JWT signature

37
00:01:55.000 --> 00:01:58.005
which further references the JSON web algorithms

38
00:01:58.005 --> 00:02:01.004
and JSON web key standards.

39
00:02:01.004 --> 00:02:04.005
If you need to encrypt the JWT to protect sensitive claims,

40
00:02:04.005 --> 00:02:09.002
you can use the JSON web encryption standard.

41
00:02:09.002 --> 00:02:12.006
The easiest way to understand the JOSE specifications

42
00:02:12.006 --> 00:02:14.004
is to see them in action.

43
00:02:14.004 --> 00:02:18.009
So we're going to use a tool provided by the jwt.io website

44
00:02:18.009 --> 00:02:21.003
in order to take a closer look.

45
00:02:21.003 --> 00:02:23.006
If we navigate down to the middle of the page,

46
00:02:23.006 --> 00:02:25.000
we'll see the tool.

47
00:02:25.000 --> 00:02:29.002
It allows us to encode and decode a JWT.

48
00:02:29.002 --> 00:02:32.003
Now, if you take a look at the left side of the screen,

49
00:02:32.003 --> 00:02:33.008
you'll see your first JWT.

50
00:02:33.008 --> 00:02:35.006
And it's easy to tell it's a JWT

51
00:02:35.006 --> 00:02:39.004
because of the first three characters EYJ.

52
00:02:39.004 --> 00:02:41.009
JWTs are Base64 URL encoded.

53
00:02:41.009 --> 00:02:46.000
So it's going to look like a random string of characters,

54
00:02:46.000 --> 00:02:51.004
but EYJ is the Base64 encoding for an opening curly brace

55
00:02:51.004 --> 00:02:54.002
and a quotation mark which are the characters

56
00:02:54.002 --> 00:02:55.007
that all JWTs start with.

57
00:02:55.007 --> 00:02:59.004
So if you see that, you're most likely working with a JWT.

58
00:02:59.004 --> 00:03:03.001
Now, if we look at this dropdown at the top of the page,

59
00:03:03.001 --> 00:03:05.008
you're going to see a list of algorithms.

60
00:03:05.008 --> 00:03:09.007
These come from the JSON Web algorithm specification

61
00:03:09.007 --> 00:03:14.003
and these are the options that we have for signing the JWT.

62
00:03:14.003 --> 00:03:18.007
In general, each of the algorithms uses the same computation

63
00:03:18.007 --> 00:03:22.004
to create the signature with just some different inputs.

64
00:03:22.004 --> 00:03:26.006
It takes the header and Base64 URL encodes it,

65
00:03:26.006 --> 00:03:28.005
concatenates it with a period.

66
00:03:28.005 --> 00:03:31.006
And then Base64 URL encodes the payload,

67
00:03:31.006 --> 00:03:33.009
and concatenates that.

68
00:03:33.009 --> 00:03:38.003
It then takes a key which it uses for the algorithm

69
00:03:38.003 --> 00:03:40.002
that computes the signature

70
00:03:40.002 --> 00:03:44.000
and that gets appended to the end of the JWT.

71
00:03:44.000 --> 00:03:46.003
Let's take a look at this in action.

72
00:03:46.003 --> 00:03:52.001
So we're going to use the HS256 algorithm that is specified

73
00:03:52.001 --> 00:03:54.009
at the top of the page by default.

74
00:03:54.009 --> 00:03:57.008
This is a symmetric key algorithm.

75
00:03:57.008 --> 00:04:00.002
So it's going to use the same key

76
00:04:00.002 --> 00:04:02.004
in order to create the signature

77
00:04:02.004 --> 00:04:05.002
as it's going to use to verify it.

78
00:04:05.002 --> 00:04:08.003
So let's just enter a really simple key here.

79
00:04:08.003 --> 00:04:10.008
I'm going to name it Mykey

80
00:04:10.008 --> 00:04:14.007
and then I'm going to change the JWT just a little bit.

81
00:04:14.007 --> 00:04:18.000
You'll notice it's changing on the left-hand side

82
00:04:18.000 --> 00:04:20.003
as it creates the new JWT.

83
00:04:20.003 --> 00:04:22.005
So let's put my name there.

84
00:04:22.005 --> 00:04:24.009
You can put yours if you would like.

85
00:04:24.009 --> 00:04:28.008
But in the end, we wind up with this new token.

86
00:04:28.008 --> 00:04:31.003
Go ahead and copy that token.

87
00:04:31.003 --> 00:04:33.005
Don't forget your key

88
00:04:33.005 --> 00:04:36.009
and then hit the refresh key.

89
00:04:36.009 --> 00:04:41.001
So a JWT allows us to verify that the token

90
00:04:41.001 --> 00:04:43.004
has not been tampered with, as it goes

91
00:04:43.004 --> 00:04:45.002
from one party to another.

92
00:04:45.002 --> 00:04:49.004
So let's imagine that we're the party receiving this JWT.

93
00:04:49.004 --> 00:04:53.009
And let's say that we put the wrong key in here.

94
00:04:53.009 --> 00:04:59.005
And then we paste the JWT into the tool.

95
00:04:59.005 --> 00:05:02.005
You'll notice at the bottom, it's going to alert us

96
00:05:02.005 --> 00:05:05.009
to the fact that the signature is invalid.

97
00:05:05.009 --> 00:05:08.004
So let's run this scenario again

98
00:05:08.004 --> 00:05:11.002
and I'm going to refresh the page

99
00:05:11.002 --> 00:05:13.006
and then hopefully I'll remember my key.

100
00:05:13.006 --> 00:05:17.003
So let's put it into the bottom of the page

101
00:05:17.003 --> 00:05:19.004
where the signature is verified.

102
00:05:19.004 --> 00:05:20.009
And now I'm going to go ahead

103
00:05:20.009 --> 00:05:23.005
and paste the JWT one more time.

104
00:05:23.005 --> 00:05:27.003
You'll notice this time, the signature verifies.

105
00:05:27.003 --> 00:05:30.006
Now, depending upon which algorithm you use,

106
00:05:30.006 --> 00:05:32.004
you might need a different key.

107
00:05:32.004 --> 00:05:37.002
So if we take a look at an RS256 algorithm

108
00:05:37.002 --> 00:05:39.001
you'll notice it's going to look

109
00:05:39.001 --> 00:05:41.003
for a public and private key.

110
00:05:41.003 --> 00:05:44.006
So you'll need those to create the signature.

111
00:05:44.006 --> 00:05:48.000
Now, if you receive this JWT, you're going to need

112
00:05:48.000 --> 00:05:52.001
the public key in order to verify the signature.

113
00:05:52.001 --> 00:05:55.006
And one way that's provided by an identity provider

114
00:05:55.006 --> 00:05:59.003
is through a JSON web key set that's typically exposed

115
00:05:59.003 --> 00:06:00.009
via an endpoint.

116
00:06:00.009 --> 00:06:02.007
We can take a look at an example.

117
00:06:02.007 --> 00:06:05.008
This is the JSON web key set from Auth0

118
00:06:05.008 --> 00:06:08.006
from one of the demonstrations they provide.

119
00:06:08.006 --> 00:06:10.001
Now, it looks a little bit cryptic.

120
00:06:10.001 --> 00:06:12.005
So what I'm going to do, is take the JSON

121
00:06:12.005 --> 00:06:14.007
and go over to a lina.

122
00:06:14.007 --> 00:06:18.001
And then here, I'm going to validate the JSON.

123
00:06:18.001 --> 00:06:22.003
And you'll notice that we get this array of keys.

124
00:06:22.003 --> 00:06:25.008
So this is a JSON web key set and inside that array,

125
00:06:25.008 --> 00:06:27.009
is a JSON web key.

126
00:06:27.009 --> 00:06:31.008
These are all specified in the specifications

127
00:06:31.008 --> 00:06:34.002
that accompany JOSE.

128
00:06:34.002 --> 00:06:38.000
If you receive a JWT and you have the JSON web key set,

129
00:06:38.000 --> 00:06:41.002
you can go ahead and select the corresponding key

130
00:06:41.002 --> 00:06:44.001
and use that to verify the signature

131
00:06:44.001 --> 00:06:47.000
to ensure the JWT hasn't been tampered with.

