WEBVTT
1
00:00:00.006 --> 00:00:03.006
- [Instructor] Microservices often need to store secrets.

2
00:00:03.006 --> 00:00:05.003
Things like client credentials,

3
00:00:05.003 --> 00:00:08.001
database passwords, and SSL certificates

4
00:00:08.001 --> 00:00:11.000
that must be kept confidential.

5
00:00:11.000 --> 00:00:14.003
Unfortunately, many developers take a trust the network

6
00:00:14.003 --> 00:00:16.003
or security through obscurity approach

7
00:00:16.003 --> 00:00:18.004
to protecting secrets.

8
00:00:18.004 --> 00:00:21.002
This causes secrets to wind up in difficult

9
00:00:21.002 --> 00:00:23.008
but not impossible to reach places.

10
00:00:23.008 --> 00:00:26.008
You'll find them in properties, files, hard-coded strings

11
00:00:26.008 --> 00:00:31.006
docker files, container images, and environment variables.

12
00:00:31.006 --> 00:00:35.003
If you use these techniques, your microservices secrets

13
00:00:35.003 --> 00:00:38.004
won't be so secret anymore with a little bit of access

14
00:00:38.004 --> 00:00:43.000
to source control in image registry or host.

15
00:00:43.000 --> 00:00:45.007
Luckily, container orchestration platforms

16
00:00:45.007 --> 00:00:48.003
like Kubernetes, OpenShift and others

17
00:00:48.003 --> 00:00:51.005
provide better approaches to managing your secrets.

18
00:00:51.005 --> 00:00:55.006
Now there's no excuse to bake them into a container image.

19
00:00:55.006 --> 00:00:58.001
These platforms typically have an embedded

20
00:00:58.001 --> 00:01:01.006
secrets management capability that allows you to create

21
00:01:01.006 --> 00:01:05.005
and securely store, secrets like credentials or certificates

22
00:01:05.005 --> 00:01:07.002
for use in a pod.

23
00:01:07.002 --> 00:01:09.009
A pod is just a Kubernetes concept that is kind of

24
00:01:09.009 --> 00:01:12.002
like a group of containers.

25
00:01:12.002 --> 00:01:15.009
When attaching secrets, you'll typically have two options.

26
00:01:15.009 --> 00:01:19.001
You can inject them as an environment variable,

27
00:01:19.001 --> 00:01:21.005
or, you can mount them to the container

28
00:01:21.005 --> 00:01:24.009
using a file written in a volume.

29
00:01:24.009 --> 00:01:27.009
Writing a file to a volume is the most secure route.

30
00:01:27.009 --> 00:01:29.009
So I would recommend going that approach.

31
00:01:29.009 --> 00:01:32.009
If you're using a container orchestrator.

32
00:01:32.009 --> 00:01:35.009
An orchestrator is an easy way to handle secrets

33
00:01:35.009 --> 00:01:38.005
because it's built right into the platform.

34
00:01:38.005 --> 00:01:41.005
However, using this approach you cannot share secrets

35
00:01:41.005 --> 00:01:44.006
outside of a microservice cluster.

36
00:01:44.006 --> 00:01:47.002
This leads many organizations to adopt

37
00:01:47.002 --> 00:01:49.002
a solution for secrets management

38
00:01:49.002 --> 00:01:52.000
from a vendor product or their cloud host.

39
00:01:52.000 --> 00:01:56.005
Let's take a look at a popular option named Vault.

40
00:01:56.005 --> 00:02:00.006
Vault is secrets management platform provided by HashiCorp.

41
00:02:00.006 --> 00:02:03.004
It provides several strategies for microservices

42
00:02:03.004 --> 00:02:07.000
to securely store and access all sorts of secrets,

43
00:02:07.000 --> 00:02:11.005
including API keys, passwords, or certificates.

44
00:02:11.005 --> 00:02:15.005
To allow its clients, like microservices, to access secrets,

45
00:02:15.005 --> 00:02:18.000
Vault provides an API that can be used

46
00:02:18.000 --> 00:02:20.005
to easily obtain them.

47
00:02:20.005 --> 00:02:22.005
Another configuration model provided

48
00:02:22.005 --> 00:02:25.000
by vault is the Vault Agent.

49
00:02:25.000 --> 00:02:27.002
The agent provides tight integration

50
00:02:27.002 --> 00:02:29.007
with container orchestrators like Kubernetes

51
00:02:29.007 --> 00:02:33.001
by using a Sidecar model to provide microservices

52
00:02:33.001 --> 00:02:36.002
with transparent access to secrets.

53
00:02:36.002 --> 00:02:39.000
The Vault Agent handles the initial authentication

54
00:02:39.000 --> 00:02:42.005
with the API using an init container.

55
00:02:42.005 --> 00:02:44.009
It also allows templates to be created

56
00:02:44.009 --> 00:02:47.003
for microservice configuration files

57
00:02:47.003 --> 00:02:50.005
that have secrets injected into them.

58
00:02:50.005 --> 00:02:53.003
This approach eliminates the need to write code

59
00:02:53.003 --> 00:02:56.003
that retrieves the secrets from the vault API

60
00:02:56.003 --> 00:02:59.002
using HTTP calls.

61
00:02:59.002 --> 00:03:02.008
Dynamic Secrets are another advanced capability provided

62
00:03:02.008 --> 00:03:05.000
by Vault that allows credentials

63
00:03:05.000 --> 00:03:08.008
like those used for a database, to rotate transparently

64
00:03:08.008 --> 00:03:11.000
inside the microservice.

65
00:03:11.000 --> 00:03:13.005
This increases the security of the system

66
00:03:13.005 --> 00:03:17.002
because a stolen credential has a short life span.

67
00:03:17.002 --> 00:03:20.005
Another type of dynamic secret known as a lease,

68
00:03:20.005 --> 00:03:22.007
issues new short-lived credentials

69
00:03:22.007 --> 00:03:27.005
each time a client requests access to a protected resource.

70
00:03:27.005 --> 00:03:30.005
Managing credentials can be incredibly insecure

71
00:03:30.005 --> 00:03:33.006
using historical practices that are not suited

72
00:03:33.006 --> 00:03:36.006
for dynamic environments like containers.

73
00:03:36.006 --> 00:03:39.006
When supplying secrets to your microservices,

74
00:03:39.006 --> 00:03:42.000
I highly recommend considering a third party

75
00:03:42.000 --> 00:03:43.009
secrets management platform

76
00:03:43.009 --> 00:03:46.009
or, at a minimum using the storage provided

77
00:03:46.009 --> 00:03:49.000
by your container orchestrator.

