WEBVTT
1
00:00:00.004 --> 00:00:02.008
- [Instructor] Whether you are building microservices

2
00:00:02.008 --> 00:00:05.006
or a client calling them through an API,

3
00:00:05.006 --> 00:00:07.000
it is helpful to understand

4
00:00:07.000 --> 00:00:09.009
the wide array of complex access scenarios

5
00:00:09.009 --> 00:00:13.004
that can influence your security scheme.

6
00:00:13.004 --> 00:00:16.005
Access to a microservice occurs through a client,

7
00:00:16.005 --> 00:00:20.000
which is the system making the call to the service.

8
00:00:20.000 --> 00:00:24.003
Microservices are not directly accessed by end users.

9
00:00:24.003 --> 00:00:28.007
In many cases, clients don't directly access a microservice.

10
00:00:28.007 --> 00:00:32.006
All of their calls are passed through the API gateway.

11
00:00:32.006 --> 00:00:34.009
Additional complexity is introduced

12
00:00:34.009 --> 00:00:36.002
when we start to consider

13
00:00:36.002 --> 00:00:39.009
the different types of clients that are possible.

14
00:00:39.009 --> 00:00:42.005
Some clients known as public clients

15
00:00:42.005 --> 00:00:44.003
are unable to maintain

16
00:00:44.003 --> 00:00:47.004
the confidentiality of their credentials.

17
00:00:47.004 --> 00:00:49.009
For example, single page applications

18
00:00:49.009 --> 00:00:52.005
are unable to store credentials securely

19
00:00:52.005 --> 00:00:54.005
because they run in the browser

20
00:00:54.005 --> 00:00:59.002
where their credentials could be accessed by an attacker.

21
00:00:59.002 --> 00:01:01.005
On the other hand, confidential clients

22
00:01:01.005 --> 00:01:03.008
can protect the confidentiality

23
00:01:03.008 --> 00:01:06.004
of their credentials to some degree.

24
00:01:06.004 --> 00:01:09.007
This is because they run in a trusted domain.

25
00:01:09.007 --> 00:01:12.009
These clients typically will reside on the server side

26
00:01:12.009 --> 00:01:15.000
where access to their internals

27
00:01:15.000 --> 00:01:19.001
is limited to a small group of authorized users.

28
00:01:19.001 --> 00:01:20.007
It's also important to consider

29
00:01:20.007 --> 00:01:23.003
who owns a client application.

30
00:01:23.003 --> 00:01:25.005
When we talk about first-party clients,

31
00:01:25.005 --> 00:01:28.009
we're referring to clients owned by the same organization

32
00:01:28.009 --> 00:01:31.002
that built a microservice.

33
00:01:31.002 --> 00:01:34.003
On the other hand, there can be third-party clients

34
00:01:34.003 --> 00:01:37.005
who are outside parties and partners

35
00:01:37.005 --> 00:01:40.001
that will access the microservice.

36
00:01:40.001 --> 00:01:43.003
This makes things harder from a security perspective

37
00:01:43.003 --> 00:01:46.005
because we do not control their security policies,

38
00:01:46.005 --> 00:01:47.009
and we cannot confirm

39
00:01:47.009 --> 00:01:51.007
that the security posture of their client is adequate.

40
00:01:51.007 --> 00:01:53.009
In general, organizations tend to make

41
00:01:53.009 --> 00:01:55.009
their microservice security controls

42
00:01:55.009 --> 00:01:58.008
more stringent for third-party clients.

43
00:01:58.008 --> 00:02:02.006
However, some organizations will implement a strategy

44
00:02:02.006 --> 00:02:05.007
where they require their own first-party clients

45
00:02:05.007 --> 00:02:08.008
to satisfy the same stringent security controls

46
00:02:08.008 --> 00:02:11.006
applied for third parties.

47
00:02:11.006 --> 00:02:13.001
Another thing to consider

48
00:02:13.001 --> 00:02:17.007
is whether client resides inside or outside of your network.

49
00:02:17.007 --> 00:02:21.006
Internal applications such as those used by the workforce,

50
00:02:21.006 --> 00:02:23.005
sit within the company firewall

51
00:02:23.005 --> 00:02:25.004
and can receive some benefits

52
00:02:25.004 --> 00:02:28.001
from their limited accessibility.

53
00:02:28.001 --> 00:02:30.005
External public facing applications

54
00:02:30.005 --> 00:02:34.004
typically face a wider audience of potential attackers,

55
00:02:34.004 --> 00:02:37.002
making them more accessible to attack.

56
00:02:37.002 --> 00:02:40.002
In any case, an application's position

57
00:02:40.002 --> 00:02:42.009
inside or outside of your network

58
00:02:42.009 --> 00:02:46.003
should never be a case for fewer security controls

59
00:02:46.003 --> 00:02:48.007
because of the threat of insiders

60
00:02:48.007 --> 00:02:51.001
or lateral attacks that can occur

61
00:02:51.001 --> 00:02:55.002
once the perimeter of your system is breached.

62
00:02:55.002 --> 00:02:56.006
When we start to think about

63
00:02:56.006 --> 00:02:58.009
how the end user fits into the picture,

64
00:02:58.009 --> 00:03:01.003
other scenarios develop.

65
00:03:01.003 --> 00:03:05.007
In most basic situations that involve a human end user,

66
00:03:05.007 --> 00:03:07.006
a first-party web application

67
00:03:07.006 --> 00:03:10.000
or first-party single page application

68
00:03:10.000 --> 00:03:12.001
will make calls to a microservice

69
00:03:12.001 --> 00:03:16.000
owned by the same organization that built the service.

70
00:03:16.000 --> 00:03:18.006
If you've adopted an IAM platform,

71
00:03:18.006 --> 00:03:20.005
you'll often find capabilities

72
00:03:20.005 --> 00:03:23.008
that integrate transparently into your architecture

73
00:03:23.008 --> 00:03:26.006
to handle this scenario.

74
00:03:26.006 --> 00:03:28.006
In more advanced situations,

75
00:03:28.006 --> 00:03:32.000
a human will consent to a third-party application

76
00:03:32.000 --> 00:03:36.006
accessing some or all of their resources on a microservice

77
00:03:36.006 --> 00:03:40.000
operated by a different organization.

78
00:03:40.000 --> 00:03:43.001
Think of it like allowing somebody to borrow your car.

79
00:03:43.001 --> 00:03:45.004
They don't own it, but they can use it,

80
00:03:45.004 --> 00:03:47.000
and maybe there's some restrictions

81
00:03:47.000 --> 00:03:49.008
like only to the store and back.

82
00:03:49.008 --> 00:03:53.007
When microservices are exposed to third parties or partners,

83
00:03:53.007 --> 00:03:56.006
the security behind them must be prepared to handle

84
00:03:56.006 --> 00:04:01.002
these types of digital delegated access scenarios.

85
00:04:01.002 --> 00:04:04.003
If a networking site has ever requested to access

86
00:04:04.003 --> 00:04:07.004
your contact lists hosted somewhere else,

87
00:04:07.004 --> 00:04:10.009
you've seen this scenario in action.

88
00:04:10.009 --> 00:04:14.000
In some scenarios, humans are not involved at all,

89
00:04:14.000 --> 00:04:16.006
and the communication is machine to machine

90
00:04:16.006 --> 00:04:19.005
similar to when using a service account.

91
00:04:19.005 --> 00:04:23.001
In these scenarios, microservice security must support

92
00:04:23.001 --> 00:04:27.001
a non-human access scenario for first-party clients,

93
00:04:27.001 --> 00:04:30.008
and in some cases, third-party business partners.

94
00:04:30.008 --> 00:04:34.009
This is actually one of the simplest scenarios to secure.

95
00:04:34.009 --> 00:04:37.001
Microservice deployments must support

96
00:04:37.001 --> 00:04:39.001
a wide array of access scenarios

97
00:04:39.001 --> 00:04:42.006
to keep up with the demands of an interconnected world.

98
00:04:42.006 --> 00:04:44.004
This makes another strong case

99
00:04:44.004 --> 00:04:46.006
for using pre-existing platforms

100
00:04:46.006 --> 00:04:50.000
and leveraging the established security standards.

101
00:04:50.000 --> 00:04:51.006
As we explore OAuth,

102
00:04:51.006 --> 00:04:53.005
we'll see how the access scenarios

103
00:04:53.005 --> 00:04:56.005
can determine which flow is used by a client

104
00:04:56.005 --> 00:04:58.000
to obtain an access token.

