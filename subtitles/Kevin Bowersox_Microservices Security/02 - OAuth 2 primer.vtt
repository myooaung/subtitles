WEBVTT
1
00:00:00.006 --> 00:00:02.008
- [Instructor] OAuth is an authorization standard

2
00:00:02.008 --> 00:00:05.004
that supports token based security approaches

3
00:00:05.004 --> 00:00:09.001
like those used for securing microservices.

4
00:00:09.001 --> 00:00:11.001
OAuth can be a little complicated

5
00:00:11.001 --> 00:00:13.005
but it's really important to understand.

6
00:00:13.005 --> 00:00:16.005
So we'll spend some time mastering the fundamentals

7
00:00:16.005 --> 00:00:19.004
before covering the details.

8
00:00:19.004 --> 00:00:23.000
Let's start by diving into some OAuth two terminology

9
00:00:23.000 --> 00:00:25.008
that defines the four roles or actors

10
00:00:25.008 --> 00:00:30.001
that participate in token based access strategies.

11
00:00:30.001 --> 00:00:32.003
First is the resource owner.

12
00:00:32.003 --> 00:00:34.002
Think of this as the end-user

13
00:00:34.002 --> 00:00:37.004
who owns the information found in a microservice

14
00:00:37.004 --> 00:00:39.009
and can access it.

15
00:00:39.009 --> 00:00:41.009
Next is the resource server

16
00:00:41.009 --> 00:00:44.002
which is the server hosting the API

17
00:00:44.002 --> 00:00:46.007
in front of the microservices.

18
00:00:46.007 --> 00:00:48.000
The resource server

19
00:00:48.000 --> 00:00:52.000
makes a resource owner's information accessible

20
00:00:52.000 --> 00:00:55.007
if an access token is provided.

21
00:00:55.007 --> 00:00:58.004
The authorization server is responsible

22
00:00:58.004 --> 00:01:01.002
for issuing that access token to a client

23
00:01:01.002 --> 00:01:04.004
and verifying the integrity of access tokens pass

24
00:01:04.004 --> 00:01:06.008
to the resource server.

25
00:01:06.008 --> 00:01:09.004
Finally, the client is an application

26
00:01:09.004 --> 00:01:13.009
that accesses resources on behalf of a resource owner.

27
00:01:13.009 --> 00:01:18.002
It is granted a token by the authorization server.

28
00:01:18.002 --> 00:01:21.005
These roles are part of the OAuth two standard

29
00:01:21.005 --> 00:01:24.007
which describes the mechanism for clients to obtain

30
00:01:24.007 --> 00:01:28.002
and use an access token to achieve secure access

31
00:01:28.002 --> 00:01:32.007
to protected resources like our microservices.

32
00:01:32.007 --> 00:01:36.008
How you access a hotel room is a great high level comparison

33
00:01:36.008 --> 00:01:39.000
to the mechanics of OAuth.

34
00:01:39.000 --> 00:01:40.007
As a client of the hotel,

35
00:01:40.007 --> 00:01:44.005
you need to access a room that is owned by the hotel owner,

36
00:01:44.005 --> 00:01:46.009
who would be the resource owner.

37
00:01:46.009 --> 00:01:49.004
The hotel staff at the front desk serves

38
00:01:49.004 --> 00:01:51.004
as the authorization server.

39
00:01:51.004 --> 00:01:55.001
They ensure the hotel owner has authorized your stay

40
00:01:55.001 --> 00:01:57.004
usually by confirming your payment.

41
00:01:57.004 --> 00:02:02.002
And if so, they issue a key card which is your token.

42
00:02:02.002 --> 00:02:05.006
To access the room, which is the protected resource,

43
00:02:05.006 --> 00:02:09.000
you must swipe the key card or token against the lock,

44
00:02:09.000 --> 00:02:11.000
which acts as the resource server

45
00:02:11.000 --> 00:02:14.006
because it protects the room from unauthorized access.

46
00:02:14.006 --> 00:02:16.002
If the key card is valid,

47
00:02:16.002 --> 00:02:19.008
your token grants you access to only your specific room

48
00:02:19.008 --> 00:02:22.003
for the length of your reservation.

49
00:02:22.003 --> 00:02:26.002
And afterwards, the card is deactivated.

50
00:02:26.002 --> 00:02:28.001
The hotel analogy is helpful

51
00:02:28.001 --> 00:02:32.008
but it can not reflect every exact detail of an OAuth flow.

52
00:02:32.008 --> 00:02:36.008
The OAuth two standard specifies the details of each step

53
00:02:36.008 --> 00:02:39.005
in one of four flows a client can follow

54
00:02:39.005 --> 00:02:45.000
to be issued an access token containing specific scopes.

55
00:02:45.000 --> 00:02:47.007
Each series of steps known as a grant type

56
00:02:47.007 --> 00:02:51.008
defines an ordered sequence of HTTPS calls that occur

57
00:02:51.008 --> 00:02:56.003
between the client, resource owner and authorization server.

58
00:02:56.003 --> 00:02:58.001
When requesting this token,

59
00:02:58.001 --> 00:03:00.004
the client specifies a parameter

60
00:03:00.004 --> 00:03:04.000
that indicates the scope of the access request.

61
00:03:04.000 --> 00:03:08.003
A scope is a protected action defined on an API

62
00:03:08.003 --> 00:03:10.008
that an end-user can authorize a client

63
00:03:10.008 --> 00:03:13.009
to perform on their behalf.

64
00:03:13.009 --> 00:03:16.002
You can think of OAuth as a playbook

65
00:03:16.002 --> 00:03:18.006
and each grant type as a play

66
00:03:18.006 --> 00:03:22.003
that is best suited for certain scenarios.

67
00:03:22.003 --> 00:03:26.000
One strength of the OAuth playbook is its flexibility,

68
00:03:26.000 --> 00:03:28.003
which it achieves through careful omission

69
00:03:28.003 --> 00:03:31.003
of certain implementation details.

70
00:03:31.003 --> 00:03:34.002
For example, at points in the standard,

71
00:03:34.002 --> 00:03:38.000
it indicates a resource owner must be identified

72
00:03:38.000 --> 00:03:40.008
but it clearly states the authentication mechanism

73
00:03:40.008 --> 00:03:44.001
is beyond the scope of the specification.

74
00:03:44.001 --> 00:03:47.008
It also avoids dictating the format of an access token,

75
00:03:47.008 --> 00:03:50.001
how a client registration occurs

76
00:03:50.001 --> 00:03:53.000
or how tokens should be verified.

77
00:03:53.000 --> 00:03:55.004
Beyond the scope of the specification

78
00:03:55.004 --> 00:03:57.005
is littered throughout the standard.

79
00:03:57.005 --> 00:04:01.000
But that's where the flexibility comes in.

80
00:04:01.000 --> 00:04:03.009
These careful omissions in the OAuth standard

81
00:04:03.009 --> 00:04:07.006
allow it to act as a fill in the blank protocol

82
00:04:07.006 --> 00:04:10.006
where implementers can use their preferred techniques

83
00:04:10.006 --> 00:04:13.006
for areas the specification leaves open,

84
00:04:13.006 --> 00:04:16.002
such as authentication, client registration

85
00:04:16.002 --> 00:04:18.005
and token format.

86
00:04:18.005 --> 00:04:19.009
To help fill in the blanks,

87
00:04:19.009 --> 00:04:23.006
the community surrounding OAuth has produced specifications

88
00:04:23.006 --> 00:04:28.001
like OpenID Connect, JWT, JWS and many others

89
00:04:28.001 --> 00:04:32.004
that extend or compliment the core OAuth standard.

90
00:04:32.004 --> 00:04:35.004
When securing microservices using a token,

91
00:04:35.004 --> 00:04:38.000
the OAuth two family of specifications

92
00:04:38.000 --> 00:04:40.006
and a few others play a vital role.

93
00:04:40.006 --> 00:04:42.005
The standards provide guidance

94
00:04:42.005 --> 00:04:44.009
on how to securely perform certain events

95
00:04:44.009 --> 00:04:47.002
throughout a token's life cycle.

96
00:04:47.002 --> 00:04:51.003
As we discuss access control strategies for microservices,

97
00:04:51.003 --> 00:04:53.006
we'll dive deeper into these standards

98
00:04:53.006 --> 00:04:55.009
and the role they play when integrating

99
00:04:55.009 --> 00:04:58.000
into our security platforms.

