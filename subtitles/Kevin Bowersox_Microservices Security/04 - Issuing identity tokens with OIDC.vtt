WEBVTT
1
00:00:00.001 --> 00:00:02.009
- [Instructor] The OAuth two standard does leave a bit

2
00:00:02.009 --> 00:00:06.008
of a gap because it's solely focused on authorization.

3
00:00:06.008 --> 00:00:09.002
The standard does not provide any guidance

4
00:00:09.002 --> 00:00:13.000
on how to identify or authenticate end-users.

5
00:00:13.000 --> 00:00:17.006
To fill this gap, OpenID Connect was introduced.

6
00:00:17.006 --> 00:00:20.004
OpenID Connect is a thin identity layer

7
00:00:20.004 --> 00:00:22.008
that sits on top of OAuth.

8
00:00:22.008 --> 00:00:26.000
The standard describes how capabilities like authentication

9
00:00:26.000 --> 00:00:29.000
and user profile information are delivered

10
00:00:29.000 --> 00:00:32.003
using an authentication request, an ID token

11
00:00:32.003 --> 00:00:34.006
and a user info endpoint.

12
00:00:34.006 --> 00:00:37.009
OpenID Connect or OIDC,

13
00:00:37.009 --> 00:00:41.006
establishes a standalone identity provider that is separate

14
00:00:41.006 --> 00:00:43.009
from the client application.

15
00:00:43.009 --> 00:00:46.005
The architecture allows multiple client applications

16
00:00:46.005 --> 00:00:51.000
to leverage the same identity service for authentication.

17
00:00:51.000 --> 00:00:53.008
This is opposed to each one building their own

18
00:00:53.008 --> 00:00:55.008
and storing credentials.

19
00:00:55.008 --> 00:00:59.000
You've probably seen this scenario before.

20
00:00:59.000 --> 00:01:01.008
Organizations like LinkedIn, Google

21
00:01:01.008 --> 00:01:05.005
or Facebook allow applications they don't own to use

22
00:01:05.005 --> 00:01:07.003
their identity provider.

23
00:01:07.003 --> 00:01:09.006
If you've ever used a sign in with button,

24
00:01:09.006 --> 00:01:12.007
you've seen OpenID Connect in action.

25
00:01:12.007 --> 00:01:16.005
The standard is also used in enterprise scenarios,

26
00:01:16.005 --> 00:01:19.007
where identity providers are used to authenticate users

27
00:01:19.007 --> 00:01:23.008
for an organization's entire suite of applications.

28
00:01:23.008 --> 00:01:26.006
When we refer to an identity provider,

29
00:01:26.006 --> 00:01:29.005
we're referring to an authorization server

30
00:01:29.005 --> 00:01:32.000
that meets OIDC standards.

31
00:01:32.000 --> 00:01:35.005
To satisfy these standards, authorization servers

32
00:01:35.005 --> 00:01:38.003
must expose a new user info endpoint,

33
00:01:38.003 --> 00:01:40.006
in addition to the authorization

34
00:01:40.006 --> 00:01:42.007
and token endpoints specified

35
00:01:42.007 --> 00:01:45.006
in the OAuth two specification.

36
00:01:45.006 --> 00:01:49.003
This endpoint allows the client to pass an access token

37
00:01:49.003 --> 00:01:52.008
to it and in return, provides identity information

38
00:01:52.008 --> 00:01:55.004
about the resource owner.

39
00:01:55.004 --> 00:01:59.007
OpenID Connect also returns a new structured ID token,

40
00:01:59.007 --> 00:02:03.009
in addition to the access token from the token endpoint.

41
00:02:03.009 --> 00:02:07.004
It contains standard claims about the authentication event

42
00:02:07.004 --> 00:02:11.006
and the user's identity represented in a jot.

43
00:02:11.006 --> 00:02:13.004
The authorization code flow

44
00:02:13.004 --> 00:02:16.006
only changes slightly within OIDC.

45
00:02:16.006 --> 00:02:19.005
There's just a few key additions.

46
00:02:19.005 --> 00:02:23.008
In the initial redirect, the client adds the OpenID scope

47
00:02:23.008 --> 00:02:26.003
to create an authentication request.

48
00:02:26.003 --> 00:02:28.009
The redirect sends the resource owner

49
00:02:28.009 --> 00:02:31.008
to the identity provider where they're authenticated

50
00:02:31.008 --> 00:02:35.002
and consent to the client accessing their profile.

51
00:02:35.002 --> 00:02:39.005
After this, the flow continues just like it does

52
00:02:39.005 --> 00:02:41.002
in regular OAuth.

53
00:02:41.002 --> 00:02:45.003
And the authorization code is provided to the client.

54
00:02:45.003 --> 00:02:49.001
Finally, when the client exchanges the authorization code

55
00:02:49.001 --> 00:02:53.004
with the identity provider, it receives an ID token,

56
00:02:53.004 --> 00:02:56.002
in addition to the access token.

57
00:02:56.002 --> 00:02:59.007
The identity token, which is in jot format,

58
00:02:59.007 --> 00:03:03.002
contains a standard set of claims that provide information

59
00:03:03.002 --> 00:03:06.006
regarding the authentication event, the token issuer,

60
00:03:06.006 --> 00:03:09.008
the end-user and the token expiration.

61
00:03:09.008 --> 00:03:13.003
There's also three optional claims that can be included.

62
00:03:13.003 --> 00:03:16.001
Since the ID token is a jot,

63
00:03:16.001 --> 00:03:18.003
it contains a cryptographic signature

64
00:03:18.003 --> 00:03:21.005
that protects the token from being tampered with.

65
00:03:21.005 --> 00:03:25.004
Identity tokens should only be used by clients

66
00:03:25.004 --> 00:03:28.007
and should not be used for API access.

67
00:03:28.007 --> 00:03:32.000
To establish user identity within a microservice,

68
00:03:32.000 --> 00:03:34.001
the access token can be passed

69
00:03:34.001 --> 00:03:37.005
to the identity provider's user info endpoint

70
00:03:37.005 --> 00:03:42.000
to receive claims with information about the end-user.

71
00:03:42.000 --> 00:03:45.005
This allows the micro-service to get information

72
00:03:45.005 --> 00:03:48.008
about the end-user.

73
00:03:48.008 --> 00:03:51.003
To see OpenID connect in action,

74
00:03:51.003 --> 00:03:56.000
we can use the OpenID Connect playground provided by AuthO.

75
00:03:56.000 --> 00:03:59.004
This tool allows us to step through each request

76
00:03:59.004 --> 00:04:02.007
in the open ID connect authentication flow.

77
00:04:02.007 --> 00:04:05.005
The authentication flow is very similar

78
00:04:05.005 --> 00:04:08.005
to OAuth's authorization code flow.

79
00:04:08.005 --> 00:04:11.003
There's just a few key differences.

80
00:04:11.003 --> 00:04:15.003
Here we see the first step in the authentication flow,

81
00:04:15.003 --> 00:04:18.008
which is to create an authentication request.

82
00:04:18.008 --> 00:04:20.005
To do that, we need to make sure

83
00:04:20.005 --> 00:04:25.003
that we specify the OpenID scope within the request.

84
00:04:25.003 --> 00:04:28.000
This prompts the identity provider

85
00:04:28.000 --> 00:04:30.007
to authenticate the end-user.

86
00:04:30.007 --> 00:04:33.007
We're also able to provide more granular scopes,

87
00:04:33.007 --> 00:04:36.008
like profile, email, phone and address.

88
00:04:36.008 --> 00:04:39.001
These are going to provide the client

89
00:04:39.001 --> 00:04:44.006
with access to information on the end-user's profile.

90
00:04:44.006 --> 00:04:47.008
So once we've constructed the authentication request,

91
00:04:47.008 --> 00:04:50.009
we can send it to the authorization endpoint.

92
00:04:50.009 --> 00:04:54.003
This is going to redirect the end-user

93
00:04:54.003 --> 00:04:56.009
and cause them to authenticate.

94
00:04:56.009 --> 00:05:00.002
So here, I'm going to authenticate with Google,

95
00:05:00.002 --> 00:05:02.007
using an account that I created specifically

96
00:05:02.007 --> 00:05:04.005
for the situation.

97
00:05:04.005 --> 00:05:09.003
So we'll just enter in the credentials.

98
00:05:09.003 --> 00:05:14.003
Okay, now after we authenticate, a code is returned back

99
00:05:14.003 --> 00:05:15.009
to the client.

100
00:05:15.009 --> 00:05:20.008
The client can then exchange that code for an access token

101
00:05:20.008 --> 00:05:22.008
and an ID token.

102
00:05:22.008 --> 00:05:26.009
So let's go ahead and we're going to perform that exchange.

103
00:05:26.009 --> 00:05:30.003
And you'll notice that when we get the response back,

104
00:05:30.003 --> 00:05:35.000
we get an ID token and then, there's also an access token.

105
00:05:35.000 --> 00:05:38.002
Now, if we take a closer look at the ID token,

106
00:05:38.002 --> 00:05:42.007
you'll notice it starts with EYJ, that's a jot.

107
00:05:42.007 --> 00:05:45.007
Once we hit next, we're given the opportunity

108
00:05:45.007 --> 00:05:48.002
to verify the ID token.

109
00:05:48.002 --> 00:05:52.009
We can see that it was signed using the HS256 algorithm.

110
00:05:52.009 --> 00:05:55.000
So if we click on the verify button,

111
00:05:55.000 --> 00:06:00.007
we can verify the integrity of the claims within that jot.

112
00:06:00.007 --> 00:06:04.000
And we're also able to see them decoded.

113
00:06:04.000 --> 00:06:05.008
So if we take a look at those claims,

114
00:06:05.008 --> 00:06:08.004
you'll see information about the end-user.

115
00:06:08.004 --> 00:06:10.007
You can see when they were authenticated,

116
00:06:10.007 --> 00:06:13.001
you can see the client that sent them there

117
00:06:13.001 --> 00:06:14.002
and then you're going

118
00:06:14.002 --> 00:06:17.000
to get the standard OpenID Connect claims,

119
00:06:17.000 --> 00:06:19.002
here towards the bottom.

120
00:06:19.002 --> 00:06:22.008
So you can see how OpenID Connect augments OAuth

121
00:06:22.008 --> 00:06:26.004
to provide a useful identity layer on top of the protocol.

122
00:06:26.004 --> 00:06:29.005
The capabilities that are provided by this layer,

123
00:06:29.005 --> 00:06:32.008
especially the identity token and user info endpoint,

124
00:06:32.008 --> 00:06:35.009
provide an extremely useful specification

125
00:06:35.009 --> 00:06:40.000
for establishing a user context across microservices.

