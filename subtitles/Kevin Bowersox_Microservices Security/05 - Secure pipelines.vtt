WEBVTT
1
00:00:00.000 --> 00:00:02.009
- [Instructor] DevOps pipelines are a key enabler

2
00:00:02.009 --> 00:00:05.003
to achieving the rapid delivery cadence

3
00:00:05.003 --> 00:00:09.002
that draws most development teams towards microservices.

4
00:00:09.002 --> 00:00:12.004
If you think of a pipeline as a function,

5
00:00:12.004 --> 00:00:16.000
it accepts commits from a developer as inputs.

6
00:00:16.000 --> 00:00:18.000
And in the ideal scenario,

7
00:00:18.000 --> 00:00:21.003
outputs a container running the software the commit

8
00:00:21.003 --> 00:00:22.008
was made against.

9
00:00:22.008 --> 00:00:26.003
A lot happens between these two points.

10
00:00:26.003 --> 00:00:29.005
First, the code needs to be written and committed,

11
00:00:29.005 --> 00:00:32.003
which triggers the CI portion of the pipeline,

12
00:00:32.003 --> 00:00:35.002
where the software is built and tested.

13
00:00:35.002 --> 00:00:38.009
Then it's packaged into a container image stored

14
00:00:38.009 --> 00:00:41.003
in the artifact repository.

15
00:00:41.003 --> 00:00:44.004
When the CD portion of the pipeline is invoked,

16
00:00:44.004 --> 00:00:48.002
it pulls the container out of the repository and deploys it

17
00:00:48.002 --> 00:00:52.006
onto the container runtime using an orchestrator.

18
00:00:52.006 --> 00:00:55.003
In this flow, there is ample opportunity

19
00:00:55.003 --> 00:00:59.008
to inject automated security controls into the process.

20
00:00:59.008 --> 00:01:03.008
These controls act as gates that prevent vulnerable code

21
00:01:03.008 --> 00:01:07.004
or images from ever being deployed.

22
00:01:07.004 --> 00:01:10.000
As a strategy, it's best to detect

23
00:01:10.000 --> 00:01:13.005
and correct security vulnerabilities as early as possible

24
00:01:13.005 --> 00:01:16.000
in this process to prevent them

25
00:01:16.000 --> 00:01:21.001
from traveling further downstream towards production.

26
00:01:21.001 --> 00:01:23.009
Starting with the actual development,

27
00:01:23.009 --> 00:01:25.002
static code analysis tools

28
00:01:25.002 --> 00:01:27.002
that run on developer workstations

29
00:01:27.002 --> 00:01:29.009
can provide the first line of defense.

30
00:01:29.009 --> 00:01:32.005
These tools alert developers to security issues

31
00:01:32.005 --> 00:01:36.000
before they even reached the code repository.

32
00:01:36.000 --> 00:01:39.005
Even with scans in place on developer workstations,

33
00:01:39.005 --> 00:01:43.009
you should still run static code analysis on the CI build

34
00:01:43.009 --> 00:01:46.009
and fail the build for code that doesn't live up

35
00:01:46.009 --> 00:01:49.000
to the security standards.

36
00:01:49.000 --> 00:01:53.001
Access to the source code repository should be limited

37
00:01:53.001 --> 00:01:54.002
to actual contributors

38
00:01:54.002 --> 00:01:57.006
and there should be a pull request model in place

39
00:01:57.006 --> 00:02:01.004
that restricts who can commit code to release branches.

40
00:02:01.004 --> 00:02:03.008
Some tools like sneak allow you

41
00:02:03.008 --> 00:02:06.003
to incorporate security scans directly

42
00:02:06.003 --> 00:02:09.005
into your pull requests, providing direct feedback

43
00:02:09.005 --> 00:02:12.007
before the code hits the repository.

44
00:02:12.007 --> 00:02:16.009
When a microservice is built, all third party libraries

45
00:02:16.009 --> 00:02:20.001
should be sourced from a trusted artifact repository

46
00:02:20.001 --> 00:02:24.005
that provides a central point to access approved libraries

47
00:02:24.005 --> 00:02:26.004
and container images.

48
00:02:26.004 --> 00:02:30.008
After the microservice is built into an artifact,

49
00:02:30.008 --> 00:02:33.003
a barrage of unit and integration tests

50
00:02:33.003 --> 00:02:35.005
are typically ran against it.

51
00:02:35.005 --> 00:02:37.007
This provides an excellent point

52
00:02:37.007 --> 00:02:41.002
to inject some interactive security testing.

53
00:02:41.002 --> 00:02:44.008
These tests detect security issues while the code executes

54
00:02:44.008 --> 00:02:47.000
and alerts you to them.

55
00:02:47.000 --> 00:02:49.000
This provider it's additional feedback

56
00:02:49.000 --> 00:02:51.006
that can help the tech vulnerabilities.

57
00:02:51.006 --> 00:02:55.007
If all of the tests pass, the microservice is built

58
00:02:55.007 --> 00:02:57.008
into a container image that is placed

59
00:02:57.008 --> 00:03:00.004
in the artifact repository.

60
00:03:00.004 --> 00:03:05.005
Here, a registry scanner, which has provided as a capability

61
00:03:05.005 --> 00:03:08.009
in most artifact repositories can be used

62
00:03:08.009 --> 00:03:12.001
to detect new vulnerabilities that have arisen

63
00:03:12.001 --> 00:03:15.002
since the container was created.

64
00:03:15.002 --> 00:03:17.003
Access to the artifact repository

65
00:03:17.003 --> 00:03:20.000
should also be closely guarded.

66
00:03:20.000 --> 00:03:23.003
This prevents anyone from going around the security gates

67
00:03:23.003 --> 00:03:25.009
that are enforced by the pipeline.

68
00:03:25.009 --> 00:03:28.009
After the CI pipeline finishes,

69
00:03:28.009 --> 00:03:32.000
the CD pipeline triggers the container orchestrator

70
00:03:32.000 --> 00:03:36.001
to deploy the microservice images to a lower environment

71
00:03:36.001 --> 00:03:38.000
for further testing.

72
00:03:38.000 --> 00:03:40.005
This process should have strict controls,

73
00:03:40.005 --> 00:03:43.009
regarding the artifact version that is released.

74
00:03:43.009 --> 00:03:47.003
It should ensure that the artifact has been vetted

75
00:03:47.003 --> 00:03:49.008
through the earlier security gates.

76
00:03:49.008 --> 00:03:53.001
The same control should be applied once again,

77
00:03:53.001 --> 00:03:57.007
when an artifact is about to be released to production.

78
00:03:57.007 --> 00:04:01.006
In lower environments, the microservice can be subjected

79
00:04:01.006 --> 00:04:05.007
to dynamic testing that actively probes the service

80
00:04:05.007 --> 00:04:08.009
for a slew of well-known vulnerabilities.

81
00:04:08.009 --> 00:04:11.008
Typically, this is done through automated pen testing

82
00:04:11.008 --> 00:04:16.006
where a tole scans and probes against the microservice.

83
00:04:16.006 --> 00:04:20.000
These tools can integrate with the pipeline to gate

84
00:04:20.000 --> 00:04:23.009
any vulnerable images from advancing to production.

85
00:04:23.009 --> 00:04:26.005
Pipelines have many configurations.

86
00:04:26.005 --> 00:04:29.007
So we've boiled our discussion down to some common points

87
00:04:29.007 --> 00:04:32.006
within these platforms where security gates

88
00:04:32.006 --> 00:04:36.005
can be introduced to better secure your microservices.

89
00:04:36.005 --> 00:04:39.006
It is important to hone these automated security scans

90
00:04:39.006 --> 00:04:42.002
to focus on critical vulnerabilities

91
00:04:42.002 --> 00:04:45.001
because they can overwhelm development teams

92
00:04:45.001 --> 00:04:48.008
with false positives that create alert fatigue.

93
00:04:48.008 --> 00:04:51.008
Baking these security tests into your pipeline

94
00:04:51.008 --> 00:04:54.001
can help keep up your release velocity

95
00:04:54.001 --> 00:04:57.000
without compromising on security.

