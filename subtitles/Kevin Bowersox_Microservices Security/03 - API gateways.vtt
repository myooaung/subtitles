WEBVTT
1
00:00:00.006 --> 00:00:02.008
- [Instructor] The reverse proxy is another component

2
00:00:02.008 --> 00:00:05.005
in our pattern that provides a large set of features

3
00:00:05.005 --> 00:00:08.003
In a microservice-based system.

4
00:00:08.003 --> 00:00:10.008
A reverse proxy acts as a front end

5
00:00:10.008 --> 00:00:12.006
that all traffic to a server

6
00:00:12.006 --> 00:00:15.005
or multiple servers passes through.

7
00:00:15.005 --> 00:00:17.008
This helps to create a single entry point

8
00:00:17.008 --> 00:00:20.008
that hides details of the underlying servers

9
00:00:20.008 --> 00:00:24.009
from the client and allows functionality to be centralized

10
00:00:24.009 --> 00:00:27.000
in the gateway.

11
00:00:27.000 --> 00:00:29.001
In many microservice-based systems,

12
00:00:29.001 --> 00:00:31.001
an API gateway platform,

13
00:00:31.001 --> 00:00:33.005
which is one type of reverse proxy,

14
00:00:33.005 --> 00:00:36.006
is placed at the edge of the microservice deployment,

15
00:00:36.006 --> 00:00:38.007
where the traffic enters.

16
00:00:38.007 --> 00:00:40.005
To reach the microservices,

17
00:00:40.005 --> 00:00:43.008
all traffic must first pass through an API interface

18
00:00:43.008 --> 00:00:46.002
located in the gateway.

19
00:00:46.002 --> 00:00:48.006
This creates a secure access point

20
00:00:48.006 --> 00:00:51.006
into the microservices and shields the clients

21
00:00:51.006 --> 00:00:55.007
from any changes made beyond the gateway.

22
00:00:55.007 --> 00:00:58.000
As traffic travels through the proxy,

23
00:00:58.000 --> 00:01:01.008
it provides the opportunity to introduce security controls

24
00:01:01.008 --> 00:01:03.007
into the system.

25
00:01:03.007 --> 00:01:06.002
Before allowing the traffic to pass through,

26
00:01:06.002 --> 00:01:09.007
it is common for a gateway to verify a client's token

27
00:01:09.007 --> 00:01:13.006
by passing it to the IAM platform for verification.

28
00:01:13.006 --> 00:01:16.007
This allows the identity and access management platform

29
00:01:16.007 --> 00:01:18.008
to confirm the token's validity

30
00:01:18.008 --> 00:01:21.009
and ensure that it hasn't expired.

31
00:01:21.009 --> 00:01:25.004
We can also enforce access control within the gateway

32
00:01:25.004 --> 00:01:29.005
by protecting specific resources or endpoints.

33
00:01:29.005 --> 00:01:32.005
Other controls, such as spike arrest policies,

34
00:01:32.005 --> 00:01:34.009
focus on limiting the amount of traffic

35
00:01:34.009 --> 00:01:36.006
sent to the microservices

36
00:01:36.006 --> 00:01:38.007
by preventing large bursts of traffic

37
00:01:38.007 --> 00:01:43.000
from degrading API performance or causing an outage.

38
00:01:43.000 --> 00:01:45.008
Another policy ensures that client requests

39
00:01:45.008 --> 00:01:48.002
stay within a particular quota.

40
00:01:48.002 --> 00:01:51.009
This helps increase availability of our microservices

41
00:01:51.009 --> 00:01:53.006
and doesn't allow one client

42
00:01:53.006 --> 00:01:56.008
to consume all of the resources.

43
00:01:56.008 --> 00:01:58.001
Aside from policies,

44
00:01:58.001 --> 00:02:01.009
API gateways also provide visibility into the traffic

45
00:02:01.009 --> 00:02:04.004
that enters our microservices.

46
00:02:04.004 --> 00:02:07.008
We can monitor and trace this traffic via dashboards

47
00:02:07.008 --> 00:02:09.003
built into the tool,

48
00:02:09.003 --> 00:02:11.008
and these can be helpful when we need to investigate

49
00:02:11.008 --> 00:02:13.009
a security incident.

50
00:02:13.009 --> 00:02:15.009
Additionally, there are many features

51
00:02:15.009 --> 00:02:19.002
not related to security that we can interject

52
00:02:19.002 --> 00:02:23.004
into an API gateway, like monetization.

53
00:02:23.004 --> 00:02:26.000
API gateways often ship with portals,

54
00:02:26.000 --> 00:02:29.000
where internal and external developers

55
00:02:29.000 --> 00:02:32.000
can register their applications or clients

56
00:02:32.000 --> 00:02:36.002
to consume the APIs implemented by our microservices.

57
00:02:36.002 --> 00:02:39.001
This feature can integrate with the IAM platform

58
00:02:39.001 --> 00:02:43.000
to meet OAuth standards surrounding client registration,

59
00:02:43.000 --> 00:02:46.000
in order to provide a seamless and secure access

60
00:02:46.000 --> 00:02:47.009
to the microservices.

61
00:02:47.009 --> 00:02:50.009
If you've ever consumed a Facebook API

62
00:02:50.009 --> 00:02:53.000
or a stack overflow API,

63
00:02:53.000 --> 00:02:55.002
you've had to register your client,

64
00:02:55.002 --> 00:02:56.006
and this is the capability

65
00:02:56.006 --> 00:03:00.001
that a developer portal can provide.

66
00:03:00.001 --> 00:03:03.007
As you explore identity and access management platforms

67
00:03:03.007 --> 00:03:06.007
and API gateways, do not be surprised

68
00:03:06.007 --> 00:03:10.000
if you find a bit of overlap between their capabilities.

69
00:03:10.000 --> 00:03:12.005
It's not uncommon to find a little bit of OAuth

70
00:03:12.005 --> 00:03:16.005
in an API gateway or some reverse proxy style capabilities

71
00:03:16.005 --> 00:03:18.006
in an IAM platform.

72
00:03:18.006 --> 00:03:21.008
For smaller systems, you may determine that a single product

73
00:03:21.008 --> 00:03:24.007
meets your needs after a bit of research.

74
00:03:24.007 --> 00:03:27.008
Also, you'll find that API gateways are available

75
00:03:27.008 --> 00:03:30.007
in many hosting configurations, including on-prem,

76
00:03:30.007 --> 00:03:32.008
cloud, and hybrid models.

77
00:03:32.008 --> 00:03:34.007
Just make sure that whatever you choose,

78
00:03:34.007 --> 00:03:38.002
it adheres to your organization's policies.

79
00:03:38.002 --> 00:03:40.002
As you secure microservices,

80
00:03:40.002 --> 00:03:42.002
you'll likely find and yourself integrating

81
00:03:42.002 --> 00:03:46.000
one or both of these platforms into your services.

82
00:03:46.000 --> 00:03:48.003
They provide many security capabilities

83
00:03:48.003 --> 00:03:50.005
that are not practical for development teams

84
00:03:50.005 --> 00:03:51.008
to build on their own,

85
00:03:51.008 --> 00:03:55.004
but are necessary for securing microservices.

86
00:03:55.004 --> 00:03:57.006
We'll look deeper into these platforms

87
00:03:57.006 --> 00:04:00.000
to shed light on the additional security layers

88
00:04:00.000 --> 00:04:03.008
nested inside so that you can confidently connect the wires

89
00:04:03.008 --> 00:04:07.000
between your microservices and these platforms.

