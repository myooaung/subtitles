WEBVTT
1
00:00:00.002 --> 00:00:02.004
- [Instructor] Being issued an access token

2
00:00:02.004 --> 00:00:04.005
is the first step for clients that need

3
00:00:04.005 --> 00:00:07.001
to securely access a microservice.

4
00:00:07.001 --> 00:00:11.002
Tokens are issued to a client after a series of calls

5
00:00:11.002 --> 00:00:13.006
are orchestrated between the resource owner,

6
00:00:13.006 --> 00:00:17.002
the client application and the authorization server.

7
00:00:17.002 --> 00:00:20.006
The first part of this exchange is very important

8
00:00:20.006 --> 00:00:22.009
because the resource owner authenticates

9
00:00:22.009 --> 00:00:26.005
with the authorization server using their credentials.

10
00:00:26.005 --> 00:00:30.000
Then the resource owner consents to the client,

11
00:00:30.000 --> 00:00:32.007
accessing their protected resources.

12
00:00:32.007 --> 00:00:35.008
This causes the authorization server to create

13
00:00:35.008 --> 00:00:40.003
or mint an access token that is provided to the client.

14
00:00:40.003 --> 00:00:43.001
If the access token is a reference token,

15
00:00:43.001 --> 00:00:45.008
it must be stored at this point in time.

16
00:00:45.008 --> 00:00:49.001
Let's highlight a few key points and advantages

17
00:00:49.001 --> 00:00:50.009
of this exchange.

18
00:00:50.009 --> 00:00:53.004
First, the microservice is not required

19
00:00:53.004 --> 00:00:56.003
to store user credentials because authentication

20
00:00:56.003 --> 00:01:00.001
is handled centrally by the authorization server.

21
00:01:00.001 --> 00:01:02.009
The client never handles the credentials either

22
00:01:02.009 --> 00:01:06.005
because they are only provided to the authorization server.

23
00:01:06.005 --> 00:01:10.001
This prevents a password from being stolen from a client

24
00:01:10.001 --> 00:01:11.004
that stores it.

25
00:01:11.004 --> 00:01:13.004
It also avoids a lot of issues

26
00:01:13.004 --> 00:01:17.003
with information confidentiality and integrity.

27
00:01:17.003 --> 00:01:19.002
For example, if a client

28
00:01:19.002 --> 00:01:21.005
uses the resource owners credentials,

29
00:01:21.005 --> 00:01:25.004
the system cannot distinguish between the two of them.

30
00:01:25.004 --> 00:01:28.006
This complicates how system actions can be attributed

31
00:01:28.006 --> 00:01:30.000
to the end-user.

32
00:01:30.000 --> 00:01:35.000
To understand the exact details of how tokens can be issued,

33
00:01:35.000 --> 00:01:38.009
the OAuth two framework specifies four grant types.

34
00:01:38.009 --> 00:01:42.006
We'll dive into the details of the two most commonly used

35
00:01:42.006 --> 00:01:46.000
for microservices, the authorization code grant

36
00:01:46.000 --> 00:01:48.009
and the client credentials grant.

37
00:01:48.009 --> 00:01:51.009
Both grant types define HTTPS calls

38
00:01:51.009 --> 00:01:56.000
to specific end points expected on the authorization server

39
00:01:56.000 --> 00:01:58.004
that are used by the client in the process

40
00:01:58.004 --> 00:02:00.002
of obtaining a token.

41
00:02:00.002 --> 00:02:02.005
Before this takes place,

42
00:02:02.005 --> 00:02:05.009
the client and it's a redirect URI are expected

43
00:02:05.009 --> 00:02:09.004
to be registered with the authorization server.

44
00:02:09.004 --> 00:02:12.000
Registration is completed by the developer

45
00:02:12.000 --> 00:02:15.003
of the client application, using a registration form

46
00:02:15.003 --> 00:02:17.004
in the developer portal.

47
00:02:17.004 --> 00:02:21.000
Once the form is completed, a client ID and client secret

48
00:02:21.000 --> 00:02:23.009
will be issued to the application.

49
00:02:23.009 --> 00:02:27.004
The client's credentials in a redirect URI are used

50
00:02:27.004 --> 00:02:30.006
by the authorization server to authenticate the client

51
00:02:30.006 --> 00:02:33.001
and prevent against redirection attacks.

52
00:02:33.001 --> 00:02:36.003
Once these prerequisites are satisfied,

53
00:02:36.003 --> 00:02:39.005
clients can complete the sequence of HTTPS calls

54
00:02:39.005 --> 00:02:44.003
for authorization flows, like the authorization code grant.

55
00:02:44.003 --> 00:02:46.003
The flow starts when the resource owner

56
00:02:46.003 --> 00:02:49.004
visits the client website within their browser.

57
00:02:49.004 --> 00:02:52.001
The browser then redirects the client

58
00:02:52.001 --> 00:02:56.004
to the authorization end point on the authorization server.

59
00:02:56.004 --> 00:02:59.008
In the redirect, it passes a response type parameter

60
00:02:59.008 --> 00:03:03.001
to indicate it's an authorization code grant.

61
00:03:03.001 --> 00:03:06.009
It also passes the client ID, the redirect URI,

62
00:03:06.009 --> 00:03:09.006
the requested scope and a state parameter

63
00:03:09.006 --> 00:03:12.002
to protect against CSRF.

64
00:03:12.002 --> 00:03:15.005
If the resource owner is not authenticated,

65
00:03:15.005 --> 00:03:18.001
they will be prompted to supply their credentials

66
00:03:18.001 --> 00:03:21.006
within a log in page provided by the authorization server,

67
00:03:21.006 --> 00:03:24.009
which will be used to confirm their identity.

68
00:03:24.009 --> 00:03:27.004
After being authenticated, they will be asked

69
00:03:27.004 --> 00:03:30.008
to grant the client the requested permissions or scopes.

70
00:03:30.008 --> 00:03:35.001
After they have granted permission via consent page provided

71
00:03:35.001 --> 00:03:38.005
by the authorization server, the authorization server

72
00:03:38.005 --> 00:03:42.000
will redirect the resource owner's browser back

73
00:03:42.000 --> 00:03:46.008
to the client's redirect URI with an authorization code.

74
00:03:46.008 --> 00:03:50.000
From there, the client will send an HTTP post

75
00:03:50.000 --> 00:03:53.003
to the token endpoint on the authorization server

76
00:03:53.003 --> 00:03:56.006
with the authorization code it received.

77
00:03:56.006 --> 00:04:00.001
Other parameters like its client ID and client secret

78
00:04:00.001 --> 00:04:01.005
will also be sent.

79
00:04:01.005 --> 00:04:04.004
In the response to the post request,

80
00:04:04.004 --> 00:04:07.001
the authorization server will supply the client

81
00:04:07.001 --> 00:04:10.005
with an access token that can be used by the client

82
00:04:10.005 --> 00:04:13.005
to access resources on the API.

83
00:04:13.005 --> 00:04:16.006
Identity and access management platforms

84
00:04:16.006 --> 00:04:20.005
will expose the necessary authorization and token end points

85
00:04:20.005 --> 00:04:24.002
as part of their authorization server implementations.

86
00:04:24.002 --> 00:04:25.006
These allow clients

87
00:04:25.006 --> 00:04:30.002
to directly orchestrate authorization flows with the server.

88
00:04:30.002 --> 00:04:33.007
Some IAM platforms we'll build a product over top

89
00:04:33.007 --> 00:04:36.008
of these flows to shield first-party clients

90
00:04:36.008 --> 00:04:39.005
from the complexity of them.

91
00:04:39.005 --> 00:04:40.009
Now let's turn our attention

92
00:04:40.009 --> 00:04:43.001
to the client credentials grant.

93
00:04:43.001 --> 00:04:46.008
This grant is used to obtain an access token for machine

94
00:04:46.008 --> 00:04:50.008
to machine scenarios and it's much easier to orchestrate.

95
00:04:50.008 --> 00:04:54.005
In this flow, a registered client simply post

96
00:04:54.005 --> 00:04:57.002
their client ID and secret to the token endpoint,

97
00:04:57.002 --> 00:05:00.000
along with the specified grant type.

98
00:05:00.000 --> 00:05:02.007
In the response, the authorization server returns

99
00:05:02.007 --> 00:05:07.001
an access token that can be used to access a microservice.

100
00:05:07.001 --> 00:05:10.007
The OAuth's standard prescribed secure tactics for clients

101
00:05:10.007 --> 00:05:12.006
to obtain tokens that are issued

102
00:05:12.006 --> 00:05:15.004
to access protected resources.

103
00:05:15.004 --> 00:05:19.000
The flexibility of the standard allows IAM platforms

104
00:05:19.000 --> 00:05:21.009
to implement variants of the authorization server

105
00:05:21.009 --> 00:05:25.001
that can meet the security needs of both builders

106
00:05:25.001 --> 00:05:28.000
and consumers of microservices.

