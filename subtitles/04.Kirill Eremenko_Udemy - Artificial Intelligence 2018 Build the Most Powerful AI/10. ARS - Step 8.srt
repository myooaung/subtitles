1
00:00:00,700 --> 00:00:03,220
Hello and welcome to this news Tauriel.

2
00:00:03,220 --> 00:00:09,100
So in the previous one we started implementing the policy class which basically built the AI because

3
00:00:09,100 --> 00:00:13,950
the ear is nothing else than a policy and the policy is nothing else than a perception.

4
00:00:14,140 --> 00:00:22,720
So we initialized the matrix of weights of that perception and now we are going to implement an essential

5
00:00:22,750 --> 00:00:27,920
part of the algorithm which is this one right.

6
00:00:27,940 --> 00:00:30,830
We already normalized the states.

7
00:00:30,970 --> 00:00:38,260
So we are about to implement this version 2 of the algorithm because Version 1 is applying the perturbations

8
00:00:38,260 --> 00:00:45,330
without normalizing the States and us we are about to implement version 2 which is applied to perturbations

9
00:00:45,640 --> 00:00:47,380
after normalization of state.

10
00:00:47,380 --> 00:00:49,610
So we already implementing this part.

11
00:00:49,630 --> 00:00:56,590
And now we're going to implement that part that consists of applying some perturbations in one positive

12
00:00:56,590 --> 00:01:01,810
direction and applying the same perturbation on the opposite direction.

13
00:01:02,020 --> 00:01:08,860
We will call the positive direction positive and the opposite direction negative.

14
00:01:08,980 --> 00:01:09,660
OK.

15
00:01:09,970 --> 00:01:11,340
And what does that mean.

16
00:01:11,380 --> 00:01:17,350
What does it mean exactly applying the little perturbations that just consist of adding a very small

17
00:01:17,350 --> 00:01:21,820
value that you will see will follow a normal distribution.

18
00:01:21,820 --> 00:01:27,010
We will add those very small numbers following a normal distribution and for each of these very small

19
00:01:27,010 --> 00:01:32,040
numbers will also add the negative same small number.

20
00:01:32,230 --> 00:01:38,920
So adding the positive small number will be the positive direction and adding the negative small number

21
00:01:38,920 --> 00:01:42,760
will be the opposite or negative direction.

22
00:01:42,850 --> 00:01:48,580
So we'll apply that to each of the weights and then we'll observe the reward that we get and then we're

23
00:01:48,580 --> 00:01:54,130
going to do that for many directions actually you know it's 16 directions because we initialize the

24
00:01:54,130 --> 00:01:57,470
hyper parameter and the directions to 16.

25
00:01:57,490 --> 00:02:02,020
So for each of the six indirections we'll apply those perturbation to positive one and the opposite

26
00:02:02,020 --> 00:02:09,190
one the negative one and we'll see which direction gives us the best we want know the highest reward

27
00:02:09,220 --> 00:02:13,290
because indeed our ultimate goal is to increase the reward.

28
00:02:13,390 --> 00:02:16,290
So let's do this let's implement this part here.

29
00:02:16,330 --> 00:02:22,300
We will implement that through a function that will call evaluate.

30
00:02:22,440 --> 00:02:23,160
All right.

31
00:02:23,300 --> 00:02:34,210
Def evaluate which will take its argument self then input because indeed these perturbations will be

32
00:02:34,210 --> 00:02:41,560
applied once we feed an input to the perception of the policy and therefore we need an input to apply

33
00:02:41,560 --> 00:02:42,720
the perturbation.

34
00:02:42,720 --> 00:02:45,250
So that's why it is one of the arguments here.

35
00:02:45,280 --> 00:02:54,380
So input then it will take actually an argument the perturbation itself that we'll call Delta.

36
00:02:54,820 --> 00:03:00,360
So Delta you know will be these very small numbers following a normal distribution.

37
00:03:00,580 --> 00:03:07,240
And you know by using plus or minus We will choose the direction of the perturbation.

38
00:03:07,330 --> 00:03:09,600
If it's a plus it's going to be a positive direction.

39
00:03:09,730 --> 00:03:13,840
And if it's a minus it's going to be the opposite or negative direction.

40
00:03:14,110 --> 00:03:20,400
So Delta will just be a matrix of small numbers following the normal distribution Delta.

41
00:03:20,680 --> 00:03:27,600
And since this Evaluate function will actually also be used when no perturbation is applied.

42
00:03:27,790 --> 00:03:32,040
You know just to get the output when we feed the perception with a certain input.

43
00:03:32,320 --> 00:03:38,170
Well we will set the perturbation by default to none.

44
00:03:38,500 --> 00:03:45,710
So that's when we just use the evaluate method to indeed evaluate the policy when we fit it to certain

45
00:03:45,730 --> 00:03:46,240
books.

46
00:03:46,480 --> 00:03:51,940
Well we will indeed get the output without any perturbation and by default this will be the case because

47
00:03:51,940 --> 00:03:54,870
Delta is by default set to none.

48
00:03:55,330 --> 00:03:58,630
And now the less argument direction.

49
00:03:58,810 --> 00:04:02,460
So this argument will only take three possible values.

50
00:04:02,500 --> 00:04:04,410
First one is positive.

51
00:04:04,570 --> 00:04:07,660
The second one is negative or opposite.

52
00:04:07,930 --> 00:04:14,360
And the third one is none and saying we want this evaluate method to return the output when we feel

53
00:04:14,360 --> 00:04:16,930
a certain input without applying a perturbation.

54
00:04:16,930 --> 00:04:21,310
So by default direction is also going to be equal to none.

55
00:04:21,850 --> 00:04:29,800
And there we go that's all the arguments we need to make this evaluate method that not only can return

56
00:04:29,800 --> 00:04:36,010
the output when we feed a certain input but you will see that also can apply these perturbations according

57
00:04:36,010 --> 00:04:37,050
to the paper.

58
00:04:37,420 --> 00:04:44,170
So since you understand that this method can actually do three things which are first just returning

59
00:04:44,170 --> 00:04:46,560
the output when we feed a certain input.

60
00:04:46,630 --> 00:04:53,980
Second returning the output when we feed the perception with a certain input and we apply a perturbation

61
00:04:54,310 --> 00:04:55,910
in the positive direction.

62
00:04:56,020 --> 00:05:02,410
And third returning the output when we feed it with certain inputs and we apply the perturbation in

63
00:05:02,650 --> 00:05:04,860
the opposite or negative direction.

64
00:05:05,350 --> 00:05:11,680
And therefore we want to return the output in these three specific conditions.

65
00:05:11,680 --> 00:05:15,520
And that's why the best thing we have to do here is an IF condition.

66
00:05:15,520 --> 00:05:23,530
So we are going to have three if or rather two is in an else telling what will happen in these three

67
00:05:23,530 --> 00:05:25,270
specific conditions.

68
00:05:25,270 --> 00:05:27,730
So let's start with the first possible condition.

69
00:05:27,730 --> 00:05:33,030
The first possible condition is when the direction is none.

70
00:05:33,130 --> 00:05:35,150
That is by default.

71
00:05:35,230 --> 00:05:36,740
So the direction is.

72
00:05:37,360 --> 00:05:45,190
Well in that case it's very simple we will just return the output of the perception without applying

73
00:05:45,250 --> 00:05:46,870
any perturbation.

74
00:05:46,870 --> 00:05:48,180
And how can we get that.

75
00:05:48,370 --> 00:05:55,230
Well we just need to take our matrix of weight theta that we're going to multiply by the vector of inputs.

76
00:05:55,300 --> 00:05:57,550
No it's a matrix product.

77
00:05:57,550 --> 00:06:01,190
You apply basically the matrix to your input.

78
00:06:01,480 --> 00:06:04,200
And how can we do that in Bison.

79
00:06:04,210 --> 00:06:05,690
Well there is a function for that.

80
00:06:05,710 --> 00:06:08,680
That is the gut function.

81
00:06:08,680 --> 00:06:09,540
Here we go.

82
00:06:09,910 --> 00:06:17,380
And that is taking as arguments the input of course because we were playing the matrix of weight theta

83
00:06:17,740 --> 00:06:21,640
to our input state vector and that's it.

84
00:06:21,640 --> 00:06:28,010
That's what is returned by the Evaluate function of our policy when no perturbation is applied.

85
00:06:28,030 --> 00:06:30,700
And when we fill it with our input.

86
00:06:31,190 --> 00:06:32,210
Perfect.

87
00:06:32,230 --> 00:06:37,620
So that's the first case then the second case is when the direction is positive.

88
00:06:37,630 --> 00:06:39,060
So here I'm going to add another.

89
00:06:39,100 --> 00:06:47,880
If but when we add an extra if it's not and if we start with it's an elif elif which means an x f basically.

90
00:06:48,100 --> 00:06:55,810
So Elif if this time the direction is then in quote We can say positive.

91
00:06:55,810 --> 00:07:00,820
So you know the positive direction that is basically this one.

92
00:07:01,030 --> 00:07:06,060
No that's the positive perturbation or perturbation of positive direction.

93
00:07:06,070 --> 00:07:10,810
Well what will happen in that case what will we return.

94
00:07:11,080 --> 00:07:19,480
Well we will return same we take our matrix of weight theta But remember too each of the weights of

95
00:07:19,600 --> 00:07:26,870
the Preceptress the positive perturbation that is to each of the values of the matrix of weight we're

96
00:07:26,880 --> 00:07:36,100
going to add this noise times the little perturbation that we called Delta and Delta.

97
00:07:36,200 --> 00:07:39,670
You have to see it as a very small value like an epsilon.

98
00:07:39,830 --> 00:07:46,050
But that is not going to be always the same very small value because it's going to follow a normal distribution.

99
00:07:46,130 --> 00:07:51,400
And why will it not be the same value that because we're testing several directions right.

100
00:07:51,410 --> 00:07:54,620
So we're testing several possible small values.

101
00:07:54,620 --> 00:08:00,350
And of course for each of these small values that we're testing as directions we're going to test the

102
00:08:00,440 --> 00:08:04,200
opposite small values mean in the opposite direction.

103
00:08:04,520 --> 00:08:10,370
And so that's what we have to add right here to our matrix of weights that they called and that we called

104
00:08:10,490 --> 00:08:13,360
in our algorithm theta.

105
00:08:13,520 --> 00:08:14,650
So let's do this.

106
00:08:14,790 --> 00:08:15,940
Let's go back here.

107
00:08:16,190 --> 00:08:17,600
So solve the theta.

108
00:08:17,600 --> 00:08:18,540
Exactly.

109
00:08:18,830 --> 00:08:21,880
And we're going to add exactly as in the paper.

110
00:08:22,100 --> 00:08:28,980
Well first the noise that we called self that noise but self refers to the object.

111
00:08:29,000 --> 00:08:32,890
And we will call the object H-P with minimal letters.

112
00:08:33,080 --> 00:08:39,720
So I'm thinking for our future object H-P which we haven't created yet but we will later on.

113
00:08:39,950 --> 00:08:49,190
So our object H-P from object HPN going to get the hyper parameter noise so noise here and then exactly

114
00:08:49,190 --> 00:08:56,210
as in the paper I'm going to multiply this noise by Indeed the perturbation Delta.

115
00:08:56,550 --> 00:08:57,230
OK.

116
00:08:58,620 --> 00:09:00,900
We multiply the noise by the perturbation.

117
00:09:01,000 --> 00:09:03,400
Delta perfect.

118
00:09:03,440 --> 00:09:09,440
So that's basically applying the positive Britz aberration or you know the perturbation in the positive

119
00:09:09,440 --> 00:09:13,010
direction to our metrics of weight theta.

120
00:09:13,190 --> 00:09:20,420
And now of course we need to get our input because we apply this disturbed matrix of weight to the same

121
00:09:20,420 --> 00:09:21,220
input.

122
00:09:21,260 --> 00:09:23,510
So I'm adding here that input.

123
00:09:23,570 --> 00:09:24,670
Perfect.

124
00:09:24,680 --> 00:09:25,520
All right.

125
00:09:25,520 --> 00:09:33,140
So we've just done this and now we're going to do this that is applying the exact same perturbation

126
00:09:33,140 --> 00:09:35,250
with the exact same small value here.

127
00:09:35,390 --> 00:09:40,590
But in the opposite direction which we're going to call the negative direction.

128
00:09:40,700 --> 00:09:43,290
So let's do this let's now implement this.

129
00:09:43,700 --> 00:09:47,470
And since all the conditions here are complimentary.

130
00:09:47,840 --> 00:09:52,350
Well we don't have to add an Aliff but an else no.

131
00:09:52,460 --> 00:10:00,500
The last remaining condition else and we're going to return exactly the same but with a minus because

132
00:10:01,190 --> 00:10:08,150
it's the perturbation in the opposite direction but with the same noise and the same Delta and therefore

133
00:10:08,150 --> 00:10:12,100
what we only need to replace Here is the plus by the minus.

134
00:10:12,110 --> 00:10:13,600
All right so let's recap.

135
00:10:13,790 --> 00:10:21,290
If the direction is none if there is no perturbation we will just return the output that is the actions

136
00:10:21,680 --> 00:10:29,000
when we read the policy perception of the policy with discerning put here then if the direction is positive

137
00:10:29,180 --> 00:10:36,590
that is if we apply a perturbation in the positive direction Well we will return the matrix of weights

138
00:10:36,860 --> 00:10:40,420
where we applied this positive perturbation here.

139
00:10:40,590 --> 00:10:48,200
Adding a small delta value within noise of 0.03 to our input to this same input.

140
00:10:48,530 --> 00:10:56,330
And lastly if the direction is negative Well we will apply the same perturbation but the opposite one

141
00:10:56,330 --> 00:11:04,490
with this man sign here to our matrix of weights and we apply this perturbed matrix of weights to the

142
00:11:04,490 --> 00:11:08,240
same input and we have the three possible conditions.

143
00:11:08,540 --> 00:11:15,770
Therefore we now have a tool to evaluate method that can return the input whether or not you decide

144
00:11:15,770 --> 00:11:21,770
to not apply any perturbation apply a perturbation in a positive direction or apply perturbation in

145
00:11:21,770 --> 00:11:23,320
the opposite direction.

146
00:11:23,330 --> 00:11:31,130
So we basically implemented this part here and more specifically the version 2 here because indeed we

147
00:11:31,130 --> 00:11:32,920
normalized the state for us.

148
00:11:32,930 --> 00:11:35,720
Exactly as in the paper.

149
00:11:35,750 --> 00:11:36,320
Great.

150
00:11:36,440 --> 00:11:37,700
That's a good thing done.

151
00:11:37,850 --> 00:11:44,300
And now the next step is actually to make a function that will simple these perturbations dealt us.

152
00:11:44,480 --> 00:11:52,180
Because indeed right now if we go back to our code right now the delta is only an argument right.

153
00:11:52,220 --> 00:11:54,150
We didn't sample it anywhere.

154
00:11:54,200 --> 00:12:00,700
So we have to make a function we have to make an additional method that will sample these deltas here

155
00:12:00,710 --> 00:12:04,800
these perturbations deltas following a normal distribution.

156
00:12:04,820 --> 00:12:10,430
So we just need to sample the Deltas using the rand and function.

157
00:12:10,430 --> 00:12:11,400
By and by.

158
00:12:11,600 --> 00:12:19,540
And this will output some small values deltas following a Gaussian distribution of mean zero still zero.

159
00:12:19,550 --> 00:12:22,500
But of standard deviation the noise.

160
00:12:22,790 --> 00:12:30,250
So we will make that method which we'll call by the way simple deltas in the next tutorial to sample

161
00:12:30,260 --> 00:12:36,590
these deltas so that later on when we apply the evaluate method to apply some perturbations well in

162
00:12:36,590 --> 00:12:43,880
the delta here we will put our simpled deltas which will get things to this future simple deltas method

163
00:12:44,360 --> 00:12:46,010
that we're about to make in the next toile.

