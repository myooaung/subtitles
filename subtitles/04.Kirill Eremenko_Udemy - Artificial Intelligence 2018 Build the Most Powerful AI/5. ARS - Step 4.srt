1
00:00:00,490 --> 00:00:05,830
Hello and welcome to this new editorial and the previous one we made our first class said the hybrid

2
00:00:05,830 --> 00:00:11,620
parameters you know we put all the hyper parameters in one same class and now we're going to make another

3
00:00:11,620 --> 00:00:14,980
class which will be used to normalize the state.

4
00:00:14,980 --> 00:00:20,920
So very simply the class that we're about to make will you know issue some objects some instances of

5
00:00:20,920 --> 00:00:27,460
the class and one object will be the normalizer itself and we will apply the normalizer understates

6
00:00:27,760 --> 00:00:29,140
to normalize them.

7
00:00:29,140 --> 00:00:36,010
So first of all let me remind you what exactly are the states and why exactly do we need to normalize

8
00:00:36,010 --> 00:00:36,820
them.

9
00:00:36,820 --> 00:00:42,220
So it's important to understand that here we're not doing some deep reinforcement learning and therefore

10
00:00:42,580 --> 00:00:47,980
the state of the environment are not the images that we see on the screen.

11
00:00:47,980 --> 00:00:54,640
Instead the states are some vectors describing perfectly what's happening at each time t.

12
00:00:54,640 --> 00:01:00,700
So basically each state is represented by a vector which will contain the coordinates of the different

13
00:01:00,700 --> 00:01:07,150
points of the virtual robots you know each vector describes perfectly what's happening in the environment

14
00:01:07,150 --> 00:01:11,440
so that we can almost draw the picture by just looking at the vector.

15
00:01:11,440 --> 00:01:11,720
All right.

16
00:01:11,740 --> 00:01:17,310
And that's the state that's going to be the input of the perception or the policy.

17
00:01:17,470 --> 00:01:23,450
The policy is the function to put the States and returning as output the actions to play.

18
00:01:23,650 --> 00:01:25,350
So these are the states.

19
00:01:25,360 --> 00:01:28,740
Now let's explain why we need to normalize the state.

20
00:01:28,960 --> 00:01:33,930
Well the first important reason is that of course the paper says to do it.

21
00:01:34,030 --> 00:01:39,260
So that's the paper I remind simple random search provides a competitive approach to reinforcement learning.

22
00:01:39,430 --> 00:01:46,090
And if we scroll down that's the introduction you know related work the problem explanation of the problem

23
00:01:46,270 --> 00:01:46,690
first.

24
00:01:46,850 --> 00:01:55,210
Basic random search algorithm that already existed and then their proposed algorithm by the author which

25
00:01:55,210 --> 00:01:57,080
is this one augmenting random search.

26
00:01:57,280 --> 00:02:04,820
Well they say that in order to improve the performance of the algorithm we should normalize the states.

27
00:02:04,830 --> 00:02:08,100
All right so you can read this section here.

28
00:02:08,110 --> 00:02:11,530
They will explain that we must do it and how we should do it.

29
00:02:11,540 --> 00:02:16,690
We're going to do it of course in a tutorial so you're going to see the math details of how we're going

30
00:02:16,690 --> 00:02:23,080
to do basically we're going to do some online learning of an average and the variance because indeed

31
00:02:23,080 --> 00:02:31,300
in order to normalize some values you have to subtract by the mean and then divide by the standard deviation.

32
00:02:31,300 --> 00:02:33,790
So you're going to see the mathematical details.

33
00:02:34,060 --> 00:02:41,380
But if I wanted to explain to you why we should normalize to states intuitively That's because the neural

34
00:02:41,380 --> 00:02:48,340
network basically will make a much better difference between values that are comprised between 0 and

35
00:02:48,340 --> 00:02:57,280
1 rather than values that are for example between 100 and 200 or 50 and 300 you know because I tell

36
00:02:57,280 --> 00:03:03,280
you that the states are encoding what's happening in the environment so basically they are some vectors

37
00:03:03,280 --> 00:03:04,810
containing some coordinates.

38
00:03:04,810 --> 00:03:08,010
And of course the coordinates are not values between 0 and 1.

39
00:03:08,030 --> 00:03:11,270
There are more higher values maybe a couple of hundred.

40
00:03:11,290 --> 00:03:12,690
That depends on the metric.

41
00:03:12,820 --> 00:03:21,400
But the neural network will make a much better Association of values between 0 and 1 than values between

42
00:03:21,850 --> 00:03:23,950
100 and 200 for example.

43
00:03:23,950 --> 00:03:29,530
So that's why we're going to take all the values of the input state vector and we we're going to convert

44
00:03:29,530 --> 00:03:33,010
them between 0 and 1 by normalizing them.

45
00:03:33,160 --> 00:03:38,870
That is to each of the value we're going to subtract the mean and divide by the standard deviation.

46
00:03:38,870 --> 00:03:43,180
So that's the reason but feel free to have a look at this paragraph here.

47
00:03:43,180 --> 00:03:43,910
Read it.

48
00:03:44,110 --> 00:03:50,950
And now we're going to go back to Python to make this class that will normalized the states.

49
00:03:50,980 --> 00:03:52,030
So here we go.

50
00:03:52,060 --> 00:03:56,220
It's a class so I'm going to start with class again and.

51
00:03:56,380 --> 00:04:02,150
Well since this class since the object of this class will represent the normalized itself.

52
00:04:02,320 --> 00:04:06,600
Well I'm going to call it of course with a Keppel and normalizer.

53
00:04:08,230 --> 00:04:10,220
Normalizer with some parenthesis.

54
00:04:10,220 --> 00:04:12,400
It's not taking an argument still.

55
00:04:12,400 --> 00:04:15,050
So we can just add colon.

56
00:04:15,230 --> 00:04:16,070
And here we go.

57
00:04:16,100 --> 00:04:18,090
We are ready to define this class.

58
00:04:18,200 --> 00:04:25,910
So as for every class we have to start with the init method separated by two double underscores just

59
00:04:25,910 --> 00:04:27,740
like that exactly like before.

60
00:04:27,740 --> 00:04:33,140
But then remember for the previous class it just took self as argument because basically we just had

61
00:04:33,140 --> 00:04:40,780
to define some hyper parameters but here the method is going to take not only self but another one it's

62
00:04:40,790 --> 00:04:43,610
going to take self.

63
00:04:43,940 --> 00:04:50,990
And now this other argument is going to be the number of elements inside the vector that is the number

64
00:04:50,990 --> 00:04:53,200
of inputs of the perception.

65
00:04:53,360 --> 00:04:59,240
As I told you a state is described by a vector of several components and the number of components of

66
00:04:59,240 --> 00:05:02,500
the vector is the number of inputs of the perception.

67
00:05:02,660 --> 00:05:06,400
And that's exactly what we need to specify here as a second argument.

68
00:05:06,530 --> 00:05:07,970
Number of inputs.

69
00:05:08,390 --> 00:05:11,010
OK that's the only arguments we need.

70
00:05:11,140 --> 00:05:17,370
And now let's define the variables that are going to be the variables of the future instances.

71
00:05:17,390 --> 00:05:22,640
That is if future objects of this normalizer class that's always what we need to define here in this

72
00:05:22,940 --> 00:05:24,680
first init method.

73
00:05:24,830 --> 00:05:31,640
And so let's say what they are the variables of the future normalizer object will be first a counter

74
00:05:31,910 --> 00:05:37,040
saying how many states we've encountered since the beginning of the experience.

75
00:05:37,220 --> 00:05:40,740
Then it's going to be the mean the mean of the values of the states.

76
00:05:40,790 --> 00:05:46,850
That is for each of the inputs of the input vector and then it's going to be the variance because basically

77
00:05:46,850 --> 00:05:51,220
with only the mean and the variance we can normalize the values with the state.

78
00:05:51,410 --> 00:05:57,860
However we're going to add an extra variable which we're going to call mean def and that's basically

79
00:05:57,860 --> 00:06:04,580
the numerator in the calculation of the variance you know there's some of the squared differences between

80
00:06:04,580 --> 00:06:07,830
the values and the mean in the condition of the variance.

81
00:06:07,910 --> 00:06:12,530
So we'll initialize our objects with these four variables.

82
00:06:12,530 --> 00:06:13,880
Let's start with the first one.

83
00:06:13,910 --> 00:06:21,710
As we said the first one is a counter and calling self-doubt and itself is to specify that these are

84
00:06:21,710 --> 00:06:25,240
indeed going to be variables of our normalizer object.

85
00:06:25,460 --> 00:06:35,810
So Soledad N and then what I'm going to do is I'm going to create a vector of any input values all initialized

86
00:06:35,960 --> 00:06:44,040
to zeros Y and being put values because the input is the number of elements of your input vector.

87
00:06:44,270 --> 00:06:46,580
That's what we specify here.

88
00:06:46,580 --> 00:06:52,660
So right now I want to initialize everything to zero because then we'll update the mean and the variance.

89
00:06:52,670 --> 00:06:56,040
But we have to initialize all these values to zero first.

90
00:06:56,090 --> 00:06:58,760
And how can we do that easily with non-pay.

91
00:06:58,970 --> 00:07:03,950
Well we take them by first and by the way we can use the following shortcut.

92
00:07:03,950 --> 00:07:11,010
That's a classic but then you have to add here as and P so that you don't have to type the whole non-pilot

93
00:07:11,330 --> 00:07:21,380
library you can type here and that zeros so zeroes will create a vector of a certain number of elements

94
00:07:21,380 --> 00:07:24,130
and the number of elements is what you have to put here.

95
00:07:24,350 --> 00:07:33,160
And this zeros function and that of course and B inputs so that now we just create a vector of inputs

96
00:07:33,170 --> 00:07:36,740
values all initialized zeros are equal to zero.

97
00:07:37,160 --> 00:07:39,900
And that's our first variable of the object.

98
00:07:40,160 --> 00:07:46,400
And the second one as we said is going to be the mean so subduct mean and then exactly the same we're

99
00:07:46,400 --> 00:07:48,410
going to initialize that to zero.

100
00:07:48,410 --> 00:07:53,080
So I'm just going to copy that and paste it.

101
00:07:53,120 --> 00:07:58,760
So that means still a vector of and being puts element and then later on when we observe the new state

102
00:07:59,120 --> 00:08:05,960
we will do a non-land computation of the mean which means that this vector is going to be updated with

103
00:08:05,960 --> 00:08:10,550
the mean of the values for each of the input of the input vector.

104
00:08:10,820 --> 00:08:13,940
You're going to see we're going to do that in the next tutorial with the new method.

105
00:08:13,940 --> 00:08:17,490
Right now we're just initializing everything.

106
00:08:17,570 --> 00:08:20,010
Then the next one is self.

107
00:08:20,110 --> 00:08:28,730
That it would be Varians but we want to break the consideration of the variance in two by first calculating

108
00:08:28,730 --> 00:08:34,190
the numerator which we can call mean diff and same.

109
00:08:34,190 --> 00:08:39,830
Of course we want to compute the variance and therefore the mindif for each of the input of the input

110
00:08:39,830 --> 00:08:41,770
vector of the input state.

111
00:08:41,840 --> 00:08:48,370
So I'm still initializing this as a vector of any input zeros.

112
00:08:48,630 --> 00:08:49,510
OK.

113
00:08:49,610 --> 00:08:58,790
And finally the Varians self-taught var which same I'm initialising as a vector have been put zeros

114
00:08:58,940 --> 00:09:06,020
which later on will be updated containing the variance of the values of the states for each of the input

115
00:09:06,140 --> 00:09:07,240
of the input.

116
00:09:07,620 --> 00:09:08,230
OK.

117
00:09:08,440 --> 00:09:13,500
So now we have initialized the mean the numerator of the variance and the variance.

118
00:09:13,740 --> 00:09:21,430
And now in the next tutorial we're going to make a function which each time we observe a new state we'll

119
00:09:21,520 --> 00:09:24,020
update these variables here.

120
00:09:24,040 --> 00:09:30,040
That is the mean mindif and the variance to compute the mean and the variance of each of the values

121
00:09:30,040 --> 00:09:34,150
of the input states as soon as we observe a new state.

122
00:09:34,150 --> 00:09:39,000
All right so this will be an interesting computation and by the way this is a classic to know in math

123
00:09:39,010 --> 00:09:42,840
statistics or machine deep reinforcement learning.

124
00:09:43,240 --> 00:09:45,100
I will do that in next tutorial.

125
00:09:45,130 --> 00:09:46,830
And until then enjoy AI.

