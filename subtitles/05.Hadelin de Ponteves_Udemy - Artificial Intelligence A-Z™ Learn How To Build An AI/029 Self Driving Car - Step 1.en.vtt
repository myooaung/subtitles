WEBVTT
1
00:00:00.420 --> 00:00:03.950
Hello and welcome again to our self-driving car Maggio.

2
00:00:03.960 --> 00:00:10.200
So in just a toile I'm going to explain the environment on which we will implement our artificial intelligence

3
00:00:10.410 --> 00:00:16.500
and that will contain Of course the car that will train to drive itself and to avoid obstacles and on

4
00:00:16.500 --> 00:00:20.950
which will draw some roads and some blocks for our cars to navigate around them.

5
00:00:21.210 --> 00:00:28.170
So we will later build this artificial intelligence to train this car to drive on the road you know

6
00:00:28.170 --> 00:00:33.830
without crossing the limits and avoiding some obstacles that will put inside the road.

7
00:00:34.140 --> 00:00:35.870
So this is a pretty exciting challenge.

8
00:00:35.910 --> 00:00:42.000
And actually there are two separate files as you can see there is the apex and fowl that are artificial

9
00:00:42.000 --> 00:00:47.090
intelligence that will do all the training to train the car how to sell drive.

10
00:00:47.280 --> 00:00:52.080
And we have a map that we found that is the code that makes all this environment.

11
00:00:52.110 --> 00:00:57.090
So here is that code that's actually 200 lines of code a little more.

12
00:00:57.090 --> 00:01:00.460
So this code is not typically related to AI.

13
00:01:00.510 --> 00:01:03.380
It is just a code to make the environment make the map.

14
00:01:03.420 --> 00:01:08.430
So I'm going to go through each of the sections one by one to explain but we're not going to implement

15
00:01:08.430 --> 00:01:13.610
this code line by line from scratch because we want to focus on artificial intelligence.

16
00:01:13.740 --> 00:01:17.160
But let's still go through the sections one by one to understand what's happening.

17
00:01:17.370 --> 00:01:22.020
So first we import the central libraries that's for any code.

18
00:01:22.110 --> 00:01:28.770
We need some libraries to perform some task more efficiently than we import all the cavy packages.

19
00:01:28.890 --> 00:01:35.140
So that's not very important because this is all specific to Cavey we're using cavy to make the map.

20
00:01:35.190 --> 00:01:41.010
And so we're importing a lot of classes and objects to be able to make this map and add some tools in

21
00:01:41.010 --> 00:01:42.210
the map.

22
00:01:42.210 --> 00:01:44.420
All right then this line is important.

23
00:01:44.430 --> 00:01:53.130
This line is related because basically this is where we import our brain the brain of the car which

24
00:01:53.220 --> 00:01:57.760
will be another jet of this did you in class and the teacher in class.

25
00:01:57.820 --> 00:02:00.570
Is our artificial intelligence itself.

26
00:02:00.570 --> 00:02:04.680
You will see we will implement the dequeue in class in the following tutorials.

27
00:02:04.680 --> 00:02:09.650
And as you might have guessed dequeue instance for deep Q networks.

28
00:02:09.650 --> 00:02:15.450
So we will implement a dequeue learning network and then once it's ready we will be importing it here

29
00:02:15.540 --> 00:02:21.910
with this line from the AI and the eyes of course are a python file.

30
00:02:21.990 --> 00:02:22.310
All right.

31
00:02:22.320 --> 00:02:24.450
So can't wait to implement this.

32
00:02:24.450 --> 00:02:29.520
This is going to be quite a journey but you will see this is going to be very exciting because thanks

33
00:02:29.520 --> 00:02:33.200
to the I the car will be able to drive itself.

34
00:02:33.270 --> 00:02:33.880
All right.

35
00:02:33.880 --> 00:02:39.060
And now before I move on to the next sections we have to explain how we will train this car.

36
00:02:39.060 --> 00:02:43.880
I'm not going to explain the neural network right now but I'm going to explain the idea of how we can

37
00:02:43.920 --> 00:02:48.080
train the car to drive itself and to avoid obstacles.

38
00:02:48.360 --> 00:02:54.130
So you know in real life if you want to train a real car to avoid some walls or some obstacles.

39
00:02:54.390 --> 00:02:55.580
Well what would you do.

40
00:02:55.830 --> 00:03:01.130
You would definitely not take real walls or real big obstacles and smash your car onto them.

41
00:03:01.200 --> 00:03:02.710
That would cost you a lot of money.

42
00:03:02.850 --> 00:03:10.170
Instead a more intelligent idea would be to punish your car not when it smashes a wall or an obstacle

43
00:03:10.410 --> 00:03:12.690
but when it goes onto some sand.

44
00:03:12.810 --> 00:03:14.220
So it's like you have a field.

45
00:03:14.220 --> 00:03:19.680
This field has some roads on which the car has to stay and the roads are delimited by some sand.

46
00:03:19.860 --> 00:03:25.500
And each time the car goes into the center it's like it's going on to an obstacle because once the car

47
00:03:25.500 --> 00:03:31.050
goes into some sand it will be slowed down and we will make sure that the car is penalized is punished

48
00:03:31.050 --> 00:03:31.630
for that.

49
00:03:31.860 --> 00:03:35.200
And that is one essential point of artificial intelligence.

50
00:03:35.220 --> 00:03:40.210
The bad word comes whenever the car goes into some sense and is slowed down.

51
00:03:40.230 --> 00:03:40.770
All right.

52
00:03:40.770 --> 00:03:45.160
And therefore here I'm introducing last text and that's why.

53
00:03:45.300 --> 00:03:50.650
Which are the coordinates of the last point in memory when we draw some scent on the map.

54
00:03:50.760 --> 00:03:51.110
All right.

55
00:03:51.120 --> 00:03:57.720
And then we get our artificial intelligence which we call brain and that contains our neural network

56
00:03:57.900 --> 00:04:03.020
and we will call it brain because this is actually the brain of the car and that contains our Noodle

57
00:04:03.030 --> 00:04:03.920
Network.

58
00:04:04.350 --> 00:04:04.730
All right.

59
00:04:04.770 --> 00:04:10.200
So in this line of code as you can see I'm creating objects at the teacher in class.

60
00:04:10.230 --> 00:04:17.000
I will remind you that classes and objects are but Brenna's the object dehumanises the class and 5:3

61
00:04:17.010 --> 00:04:19.660
and 0.9 are the inputs of the class.

62
00:04:19.680 --> 00:04:26.880
So that's very simple five corresponds to the states that are encoded vectors of five dimensions we

63
00:04:26.880 --> 00:04:31.710
will see what they are perfectly describing what's happening in the environment on the map.

64
00:04:31.830 --> 00:04:38.820
Then three is the number of actions there will be three possible actions go left go straight or go right

65
00:04:39.330 --> 00:04:44.190
and 0.9 is again a parameter in the dequeue learning algorithm.

66
00:04:44.220 --> 00:04:46.900
All right and then we have the action through rotation.

67
00:04:46.980 --> 00:04:50.910
So action to rotation is a vector of three elements.

68
00:04:50.910 --> 00:04:53.290
020 and minus 20.

69
00:04:53.300 --> 00:05:01.820
And so we have to do this because the actions are encoded by three numbers 0 1 and 2 and that corresponds

70
00:05:01.820 --> 00:05:04.700
to the indexes of this action two rotation vector.

71
00:05:04.710 --> 00:05:11.160
So for example if the action that is selected at time t is zero.

72
00:05:11.270 --> 00:05:18.990
Well zero corresponds to the index of this action two rotation vector and the value of index 0 is zero.

73
00:05:19.150 --> 00:05:24.490
And therefore we will go straight then if the action selected is 1.

74
00:05:24.770 --> 00:05:30.380
Well one corresponds to the index of this action two additional vector and the value of this vector

75
00:05:30.380 --> 00:05:32.810
that has a next one is 20.

76
00:05:32.810 --> 00:05:38.580
So 20 corresponds to a rotation of 20 degrees and that means the code will go 20 degrees to the right

77
00:05:39.260 --> 00:05:46.500
and then if the action selected is to well to correspond to the index to this action to rotation vector.

78
00:05:46.700 --> 00:05:52.570
And therefore the code will do a rotation of minus 20 degrees and therefore it will go to the left.

79
00:05:52.580 --> 00:06:00.200
All right then we introduce the left reward Voivode because at each stage will be getting the last word.

80
00:06:00.200 --> 00:06:04.970
So remember if the card doesn't go into some sense then the reward will be positive.

81
00:06:05.180 --> 00:06:11.780
And if the code goes on to some sense well it will get the bad reward and each time this variable will

82
00:06:11.780 --> 00:06:15.270
contain this reward that it gets H20.

83
00:06:15.500 --> 00:06:20.760
And then we initialize the scores which is a vector that will contain the reward.

84
00:06:20.780 --> 00:06:22.780
Not all of them but the reward.

85
00:06:22.800 --> 00:06:28.340
Onto a sliding window so that you know we can make a curve of the mean squat the reward with respect

86
00:06:28.340 --> 00:06:29.440
to time.

87
00:06:29.450 --> 00:06:34.520
All right then in this code section we initialize the map so we initialize.

88
00:06:34.520 --> 00:06:36.170
For example the said variable.

89
00:06:36.170 --> 00:06:37.220
So that's important.

90
00:06:37.220 --> 00:06:42.710
The second variable is actually going to be an array in which the cells will be the pixels of the map

91
00:06:43.250 --> 00:06:45.880
and in each cell we will have a 1.

92
00:06:45.980 --> 00:06:52.120
If there is some sense in a zero if there is no center at the beginning we will not be drawing anything.

93
00:06:52.160 --> 00:06:57.840
So there will be no sense at all and therefore all the cells of the center array will have a zero.

94
00:06:57.860 --> 00:07:02.990
There will be zeros everywhere and as soon as we draw some sense while the cells on which we draw the

95
00:07:02.990 --> 00:07:10.290
sense will get one and we initialize the race with all the zeroes right here sent equals and zeros.

96
00:07:10.370 --> 00:07:13.510
Then we have this important thing which is the goal.

97
00:07:13.520 --> 00:07:17.630
So the goal is a point in the map which will train the car to reach.

98
00:07:17.630 --> 00:07:19.850
So it's like a destination.

99
00:07:19.850 --> 00:07:21.460
So what is this goal going to be.

100
00:07:21.560 --> 00:07:27.380
Well this is going to be the upper left corner of the map to all train the car to go to the upper left

101
00:07:27.380 --> 00:07:28.480
corner of the map.

102
00:07:28.550 --> 00:07:33.290
And then once it reaches the upper left corner of the map then we will trend to go to the bottom right

103
00:07:33.290 --> 00:07:36.590
corner of the map so we can imagine the following scenario.

104
00:07:36.590 --> 00:07:42.620
The upper left corner of the map is the airport of a city and the bottom right corner of the map is

105
00:07:42.620 --> 00:07:44.320
the downtown of the city.

106
00:07:44.570 --> 00:07:50.180
And we will train a taxi or Uber to do some round trips between the airport and the downtown.

107
00:07:50.210 --> 00:07:55.610
And of course we'll make the task difficult to this taxi by drawing some more and more difficult roads

108
00:07:55.700 --> 00:08:01.190
and adding more and more obstacles on the street to see if the taxi can still manage to go from the

109
00:08:01.190 --> 00:08:02.760
airport to downtown.

110
00:08:02.990 --> 00:08:04.170
So this is going to be fun.

111
00:08:04.190 --> 00:08:11.030
And so that's why here I'm setting the coordinates of the first goal that is the airport which is at

112
00:08:11.030 --> 00:08:12.640
the upper left of the screen.

113
00:08:12.830 --> 00:08:20.000
So the map will be like a square like this and the coordinates of the origin that is the coordinates

114
00:08:20.090 --> 00:08:22.090
00 is right here.

115
00:08:22.340 --> 00:08:25.250
And then larger is this distance here.

116
00:08:25.310 --> 00:08:32.640
So the coordinates 20 and Najah minus 20 will therefore be right here the upper left corner of the map.

117
00:08:32.790 --> 00:08:35.650
And why did I choose 20 and not zero.

118
00:08:35.850 --> 00:08:40.300
Well that's because we want to train the car not to rush into the walls.

119
00:08:40.320 --> 00:08:45.450
You know we want to train into the walls as well and therefore it's not be zero because we don't want

120
00:08:45.450 --> 00:08:48.120
the car to touch to where we want to touch to go.

121
00:08:48.180 --> 00:08:53.910
So we have to put it right here and then I'm just introducing the last distance variable which just

122
00:08:53.910 --> 00:08:58.200
gives the current distance from the car to the road and that I'm initializing to zero.

123
00:08:59.020 --> 00:08:59.470
All right.

124
00:08:59.480 --> 00:09:02.220
And now time to make the car and the game.

125
00:09:02.370 --> 00:09:06.650
So we're going to make two classes one class for the car and one class for the game.

126
00:09:06.850 --> 00:09:10.850
And inside these classes will already make some connections with our AI.

127
00:09:11.170 --> 00:09:13.170
So we'll do that in the next Statoil.

128
00:09:13.180 --> 00:09:15.000
And until then enjoy I.
