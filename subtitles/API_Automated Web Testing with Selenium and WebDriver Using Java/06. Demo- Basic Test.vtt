WEBVTT
1
00:00:00.240 --> 00:00:07.080
I mentioned earlier that creating a test framework is a front‑loaded cost,

2
00:00:07.080 --> 00:00:10.030
meaning that there is a lot more work up front.

3
00:00:10.030 --> 00:00:13.220
And I'm going to warn you that that's about what we're going to go through.

4
00:00:13.220 --> 00:00:17.040
The first couple of classes we have to make take a lot of

5
00:00:17.040 --> 00:00:20.230
work for what seems like very little return.

6
00:00:20.230 --> 00:00:24.950
Except as we start to develop more tests, you'll see that pay off very rapidly.

7
00:00:24.950 --> 00:00:26.230
To begin with,

8
00:00:26.230 --> 00:00:30.470
I'm in our Tests project where we're going to actually create our test.

9
00:00:30.470 --> 00:00:32.560
I want to create a new unit test.

10
00:00:32.560 --> 00:00:41.120
So I'm going to go to src, test, java, and right‑click and say New, Java Class.

11
00:00:41.120 --> 00:00:53.740
And I am going to type in here com.pluralsight.UnitTest and click Enter.

12
00:00:53.740 --> 00:00:58.340
We could honestly give this a more meaningful name than this particular test,

13
00:00:58.340 --> 00:01:03.220
but it's going to work for the example that we're going through now.

14
00:01:03.220 --> 00:01:08.370
To signify a test, we're going to use the @Test annotation.

15
00:01:08.370 --> 00:01:18.280
And then below this, we're going to enter in public void canGoToHomePage.

16
00:01:18.280 --> 00:01:26.410
And we're going to reference a class that we have not created yet in here.

17
00:01:26.410 --> 00:01:41.040
We're going to say Pages.homePage.goTo, and we have not created this yet.

18
00:01:41.040 --> 00:02:02.790
I'll say Assertions.assertTrue Pages.homePage.isAt, and let's save this.

19
00:02:02.790 --> 00:02:07.050
Now, we have not created the Pages class yet.

20
00:02:07.050 --> 00:02:09.950
We don't have a method named homePage yet,

21
00:02:09.950 --> 00:02:13.940
and we haven't created the functionality to go to that home page.

22
00:02:13.940 --> 00:02:17.390
We're going to switch over to our TestFramework project

23
00:02:17.390 --> 00:02:19.500
and start creating this functionality.

24
00:02:19.500 --> 00:02:21.770
In our TestFramework project,

25
00:02:21.770 --> 00:02:26.600
I'm going to minimize that side tray and get rid of our build window as

26
00:02:26.600 --> 00:02:30.280
well and just start focusing on writing some code.

27
00:02:30.280 --> 00:02:35.570
To do so, I'm going to expand our test framework and navigate down to src,

28
00:02:35.570 --> 00:02:39.770
main, java, and begin by creating a new Java class.

29
00:02:39.770 --> 00:02:45.510
That's going to be under com.pluralsight.Pages.

30
00:02:45.510 --> 00:02:53.350
Inside of here, we're going to create a method.

31
00:02:53.350 --> 00:02:59.320
I'm going to call this public static HomePage.

32
00:02:59.320 --> 00:03:02.790
So it's going to return an instance of the HomePage class,

33
00:03:02.790 --> 00:03:07.160
and the method is going to be called homePage.

34
00:03:07.160 --> 00:03:17.380
And we'll say HomePage homePage = new HomePage,

35
00:03:17.380 --> 00:03:23.750
and we'll return that instance of homePage.

36
00:03:23.750 --> 00:03:27.780
Now, we can create that class as well.

37
00:03:27.780 --> 00:03:31.880
And if we hover over the red instance of HomePage,

38
00:03:31.880 --> 00:03:33.680
it'll ask us if we want to create that.

39
00:03:33.680 --> 00:03:36.540
Let's say yes.

40
00:03:36.540 --> 00:03:39.500
We want the destination package to be com.pluralsight,

41
00:03:39.500 --> 00:03:43.940
so I'll put it underneath that directory and click OK.

42
00:03:43.940 --> 00:03:50.310
And inside of here, we know we need that method of goTo,

43
00:03:50.310 --> 00:04:01.770
and we can define that by saying public void goTo.

44
00:04:01.770 --> 00:04:05.860
And we're going to reference another class that we

45
00:04:05.860 --> 00:04:09.350
have not created yet called Browser.

46
00:04:09.350 --> 00:04:13.380
We'll say Browser.goTo.

47
00:04:13.380 --> 00:04:18.100
Let's pass in a reference to a URL.

48
00:04:18.100 --> 00:04:24.970
Now, as we mentioned, we're going to have this navigate our site for us.

49
00:04:24.970 --> 00:04:30.910
So this is going to build things around the site we're trying to test.

50
00:04:30.910 --> 00:04:34.540
It really wants to import a browser object for us.

51
00:04:34.540 --> 00:04:34.980
Nope,

52
00:04:34.980 --> 00:04:36.590
we're not going to do that because we're going to

53
00:04:36.590 --> 00:04:40.740
create our own for referencing our site.

54
00:04:40.740 --> 00:04:45.640
Let's begin by putting in the URL that we want this to go to.

55
00:04:45.640 --> 00:05:04.940
So we'll say static String URL is equal to http://www.pluralsight.com.

56
00:05:04.940 --> 00:05:09.340
Now you'll start to notice we're gleaning some of the pieces out of our

57
00:05:09.340 --> 00:05:16.140
application that we had hardcoded in our previous tests.

58
00:05:16.140 --> 00:05:20.800
Now if we hover over this, it wants to resolve this to Browser.

59
00:05:20.800 --> 00:05:22.830
We can look at the more actions and say no,

60
00:05:22.830 --> 00:05:25.430
we want to create a class called Browser.

61
00:05:25.430 --> 00:05:29.930
And the same thing, the destination package is com.pluralsight,

62
00:05:29.930 --> 00:05:33.940
so we'll click OK.

63
00:05:33.940 --> 00:05:36.540
And inside of here,

64
00:05:36.540 --> 00:05:50.660
we can say that we want static WebDriver driver = new ChromeDriver.

65
00:05:50.660 --> 00:06:08.870
And our goTo method, we will say public static void goTo String url,

66
00:06:08.870 --> 00:06:15.840
and this is going to say driver.get url,

67
00:06:15.840 --> 00:06:18.440
so the URL that we're passing in.

68
00:06:18.440 --> 00:06:24.530
So kind of a wrapper class that we're going to put around those other

69
00:06:24.530 --> 00:06:27.630
methods and functionality that we're passing into it here.

70
00:06:27.630 --> 00:06:32.820
While we're in the Browser class, let's add two other methods inside of here.

71
00:06:32.820 --> 00:06:39.970
We'll say public static String title,

72
00:06:39.970 --> 00:06:46.430
and we're going to say return driver.getTitle.

73
00:06:46.430 --> 00:06:52.190
And we're going to use this for the assertion that we have inside of our unit

74
00:06:52.190 --> 00:06:55.900
test and inside of the HomePage class that we're riding.

75
00:06:55.900 --> 00:06:58.740
We'll do one other feature here.

76
00:06:58.740 --> 00:07:09.590
We'll say public static void close, and we'll say driver.close.

77
00:07:09.590 --> 00:07:13.650
And that's just to clean up our resources and be a

78
00:07:13.650 --> 00:07:17.440
good steward of our code base.

79
00:07:17.440 --> 00:07:20.840
Now going back over to our HomePage,

80
00:07:20.840 --> 00:07:25.290
it's now resolved our browser that it was complaining about,

81
00:07:25.290 --> 00:07:29.450
but we don't have the isAt functionality that we had

82
00:07:29.450 --> 00:07:31.740
called from our unit test done yet.

83
00:07:31.740 --> 00:07:39.140
Remember, if we switch back over to our other test project,

84
00:07:39.140 --> 00:07:41.650
we have this Pages.homePage.isAt.

85
00:07:41.650 --> 00:07:46.970
So let's go create that isAt functionality.

86
00:07:46.970 --> 00:07:59.440
And to do so, we'll say public boolean isAt,

87
00:07:59.440 --> 00:08:13.620
and we'll return Browser.title.equals, and we'll pass in a title string.

88
00:08:13.620 --> 00:08:16.070
We haven't created this object yet.

89
00:08:16.070 --> 00:08:26.200
So much like the URL, we're going to say static String title is equal to,

90
00:08:26.200 --> 00:08:31.620
and if we go out to the Pluralsight website and grab the

91
00:08:31.620 --> 00:08:37.000
title off that page in our browser, we can paste that inside of here.

92
00:08:37.000 --> 00:08:41.140
Navigating to the website and viewing the source,

93
00:08:41.140 --> 00:08:45.630
we can see here that the title tag contains Pluralsight:

94
00:08:45.630 --> 00:08:48.120
The tech workforce development company.

95
00:08:48.120 --> 00:08:50.290
So I've gone ahead and grabbed that.

96
00:08:50.290 --> 00:08:53.630
And let's switch back over to our IDE,

97
00:08:53.630 --> 00:08:58.140
and we can paste that inside of our title tag.

98
00:08:58.140 --> 00:09:00.240
So let's save that.

99
00:09:00.240 --> 00:09:03.110
We should now have all of the pieces that we need.

100
00:09:03.110 --> 00:09:08.040
We're going to our Pages, which resolves our HomePage.

101
00:09:08.040 --> 00:09:11.620
Our HomePage asks for our Browser and the goTo and isAt

102
00:09:11.620 --> 00:09:15.140
from it and then our Browser itself.

103
00:09:15.140 --> 00:09:18.260
Let's look at our Pages class and see if there's

104
00:09:18.260 --> 00:09:22.040
anything else we need to add here, and everything looks good.

105
00:09:22.040 --> 00:09:25.720
Let's expand that Maven tray again and run install.

106
00:09:25.720 --> 00:09:30.850
This will build our framework and install it in our local repository.

107
00:09:30.850 --> 00:09:33.960
And switching over to our test project,

108
00:09:33.960 --> 00:09:39.540
it should now resolve those errors inside of our unit test.

109
00:09:39.540 --> 00:09:43.310
If we refresh this, you can see that the errors go away, and

110
00:09:43.310 --> 00:09:45.410
we're ready to actually run that test.

111
00:09:45.410 --> 00:09:49.110
So that was the enabling of auto imports that we had

112
00:09:49.110 --> 00:09:50.700
when we first set up our project.

113
00:09:50.700 --> 00:09:53.340
All of our errors are now resolved.

114
00:09:53.340 --> 00:09:57.250
We can run our tests the exact same way we were running our other methods,

115
00:09:57.250 --> 00:10:01.630
and that is to right‑click and say Run canGoToHomePage.

116
00:10:01.630 --> 00:10:07.300
This will fire up our test framework and run through,

117
00:10:07.300 --> 00:10:09.080
and you can see our test passed.

118
00:10:09.080 --> 00:10:12.300
You should also see a browser window pop up, just like you

119
00:10:12.300 --> 00:10:14.050
have been running all of your tests,

120
00:10:14.050 --> 00:10:17.840
but notice that our test went through and successfully completed.

121
00:10:17.840 --> 00:10:19.650
If yours didn't for some reason,

122
00:10:19.650 --> 00:10:23.630
make sure you've got your title and the URL in there correctly,

123
00:10:23.630 --> 00:10:27.500
and it is case‑sensitive on that equal statement so make sure you

124
00:10:27.500 --> 00:10:30.900
haven't manually typed something in incorrectly there.

125
00:10:30.900 --> 00:10:32.930
But let's walk through the code that we just created.

126
00:10:32.930 --> 00:10:34.350
So this was our unit test.

127
00:10:34.350 --> 00:10:37.090
Pretty straightforward, Pages.homePage.goTo.

128
00:10:37.090 --> 00:10:41.230
And to walk through this, this is the page object model.

129
00:10:41.230 --> 00:10:45.550
We're saying in the Pages object, we want to go to the HomePage.

130
00:10:45.550 --> 00:10:49.200
And from the HomePage, we want to actually navigate to it.

131
00:10:49.200 --> 00:10:52.980
And then we're going to use an assertion to say are we

132
00:10:52.980 --> 00:10:55.620
actually at where we think we're at?

133
00:10:55.620 --> 00:10:59.310
In our framework where we really did most of the work,

134
00:10:59.310 --> 00:11:04.210
let's close our Maven tray here and minimize this, we created a

135
00:11:04.210 --> 00:11:07.490
Pages object, and the Pages object said, hey,

136
00:11:07.490 --> 00:11:08.910
let's go to the HomePage.

137
00:11:08.910 --> 00:11:13.930
We created a HomePage object, which then utilized our browser to say,

138
00:11:13.930 --> 00:11:19.140
well, the URL to this page is pluralsight.com, and this is the title

139
00:11:19.140 --> 00:11:22.620
of this page. And if we're going to navigate to it,

140
00:11:22.620 --> 00:11:26.850
we want to go to that URL. From here,

141
00:11:26.850 --> 00:11:32.130
we can also test to say that we are at this page, and then we created a

142
00:11:32.130 --> 00:11:38.440
browser object to encapsulate or wrap our WebDriver to do this.

143
00:11:38.440 --> 00:11:43.240
This all worked in conjunction to navigate through. And you can see

144
00:11:43.240 --> 00:11:46.640
that our other project had no references to Selenium.

145
00:11:46.640 --> 00:11:51.540
In fact, even our framework itself wrapped a lot of that up.

146
00:11:51.540 --> 00:11:54.390
Let's continue to keep building upon this,

147
00:11:54.390 --> 00:11:58.260
but you're starting to see the power of having this here as we have

148
00:11:58.260 --> 00:12:02.830
other pages inside of here, like if we had an about page or contact page

149
00:12:02.830 --> 00:12:07.250
or those types of things. You'll create more objects very similar to

150
00:12:07.250 --> 00:12:12.100
that HomePage object and put the URL, title, other properties inside of

151
00:12:12.100 --> 00:12:15.060
there listed in this object.

152
00:12:15.060 --> 00:12:17.190
Now you don't have to hardcode these in here too.

153
00:12:17.190 --> 00:12:19.330
You can load these through a properties file,

154
00:12:19.330 --> 00:12:25.000
pull them out of a database, but we're showing you how to set up the framework and get that up and running.

