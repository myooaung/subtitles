1
00:00:00,540 --> 00:00:04,230
You may have heard the term page object model before.

2
00:00:04,230 --> 00:00:06,960
This is a common term in the automation community,

3
00:00:06,960 --> 00:00:11,250
which is basically referring to the idea of mapping your test framework, or the

4
00:00:11,250 --> 00:00:14,260
model of your test framework, to the model of your pages.

5
00:00:14,260 --> 00:00:15,620
So in an application,

6
00:00:15,620 --> 00:00:18,890
you may have a series of different pages in the web application,

7
00:00:18,890 --> 00:00:22,460
and those pages are going to be modeled in our framework the same way.

8
00:00:22,460 --> 00:00:25,390
We're going to create some mapping between them.

9
00:00:25,390 --> 00:00:29,320
So the idea here is that, for example, let's look at our login page.

10
00:00:29,320 --> 00:00:30,740
If you have a login page,

11
00:00:30,740 --> 00:00:34,340
we're going to create a class inside of our test framework called Login Page,

12
00:00:34,340 --> 00:00:38,960
and it's going to have some of the same functionality that your login page has.

13
00:00:38,960 --> 00:00:42,050
It's going to be responsible for being able to get

14
00:00:42,050 --> 00:00:44,540
elements that exist on that login page.

15
00:00:44,540 --> 00:00:48,200
For example, a username field and a password field and a login button,

16
00:00:48,200 --> 00:00:50,240
it's going to manipulate that.

17
00:00:50,240 --> 00:00:53,580
It's going to work at the highest level possible.

18
00:00:53,580 --> 00:00:55,950
That's what makes a good automation framework.

19
00:00:55,950 --> 00:00:59,890
Instead of having a method on this login page that our tests are going to use

20
00:00:59,890 --> 00:01:03,940
that says get username field or enter text in username field,

21
00:01:03,940 --> 00:01:07,250
we're going to have a login method on the login page,

22
00:01:07,250 --> 00:01:09,900
and we're going to pass in a username and password.

23
00:01:09,900 --> 00:01:14,130
It's automatically going to know how to insert the username and password

24
00:01:14,130 --> 00:01:17,940
into the correct field and push that login button.

25
00:01:17,940 --> 00:01:21,970
So this is going to aid in our automation. When designing your framework

26
00:01:21,970 --> 00:01:26,020
for your test, you want to test in the same way that a user might use that

27
00:01:26,020 --> 00:01:30,580
web page. By doing it that way, you make it very simple to write your

28
00:01:30,580 --> 00:01:32,670
tests and to understand your tests.

29
00:01:32,670 --> 00:01:36,990
So you see here also that pages in a page object model don't have to

30
00:01:36,990 --> 00:01:41,000
necessarily map to exact pages in an application.

31
00:01:41,000 --> 00:01:43,840
In this instance, I have a shopping cart example here,

32
00:01:43,840 --> 00:01:46,280
and maybe you have a shopping cart on every single page.

33
00:01:46,280 --> 00:01:49,000
Maybe it's in your header. But it's a section of your web

34
00:01:49,000 --> 00:01:53,400
application, so it's going to map to its own logical object in your

35
00:01:53,400 --> 00:01:57,210
framework, and that shopping cart is going to have methods that

36
00:01:57,210 --> 00:02:04,000
your tests can call and use that are going to work in the shopping cart just like a user would.

