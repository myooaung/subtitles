1
00:00:00,440 --> 00:00:06,150
Let's make our demo here a little bit more usable in a more real‑world scenario.

2
00:00:06,150 --> 00:00:11,540
Let's start off by commenting out this driver.get for Pluralsight.

3
00:00:11,540 --> 00:00:14,800
Let's go ahead and create a new one, and we'll say driver.get.

4
00:00:14,800 --> 00:00:25,540
We'll pass in the URL of http://www.google.com.

5
00:00:25,540 --> 00:00:28,400
We'll terminate that with a semicolon.

6
00:00:28,400 --> 00:00:30,830
Now the first thing that we want to do is we want to

7
00:00:30,830 --> 00:00:34,040
search that page and find an element.

8
00:00:34,040 --> 00:00:38,940
The previous slides were showing you all the various ways to find that element.

9
00:00:38,940 --> 00:00:41,040
But what element are we looking for?

10
00:00:41,040 --> 00:00:47,020
Let's switch over to our browser and look at what the search field has for

11
00:00:47,020 --> 00:00:51,460
an ID or has for a name and see if one of those might be the better way to

12
00:00:51,460 --> 00:00:55,340
approach grabbing that element on the page.

13
00:00:55,340 --> 00:00:59,350
Now I'm going to show you a little trick of why I actually will use

14
00:00:59,350 --> 00:01:03,220
multiple browsers to look up IDs or names or things,

15
00:01:03,220 --> 00:01:05,360
and that's because it's not always clear.

16
00:01:05,360 --> 00:01:06,910
So I've got Chrome open here.

17
00:01:06,910 --> 00:01:10,680
I'm going to right‑click on the search box and say Inspect,

18
00:01:10,680 --> 00:01:17,900
and I get a field that is ID input, type search,

19
00:01:17,900 --> 00:01:21,960
and then some other attributes that I don't really care about

20
00:01:21,960 --> 00:01:23,780
for what we're trying to do with our test.

21
00:01:23,780 --> 00:01:27,850
So you would think that the ID for the field that we want is input.

22
00:01:27,850 --> 00:01:32,240
Let me switch over to Firefox and show you the difference there.

23
00:01:32,240 --> 00:01:40,260
If I do the same thing in Firefox, right‑click and say Inspect, I can come in

24
00:01:40,260 --> 00:01:46,740
here and see that this particular field has a name equal to q.

25
00:01:46,740 --> 00:01:51,760
So the input class is nothing like what we saw with Chrome, and

26
00:01:51,760 --> 00:01:54,050
that's because they try to hide some of their things that they're

27
00:01:54,050 --> 00:01:59,040
trying to show you and make it a little less confusing. But in our

28
00:01:59,040 --> 00:02:01,340
case, it actually makes it harder.

29
00:02:01,340 --> 00:02:05,270
I happen to know for a fact that we want the element with the name

30
00:02:05,270 --> 00:02:08,480
equal to q, and that's what we want to search on.

31
00:02:08,480 --> 00:02:13,290
And I was able to find that by using Firefox instead of Chrome. That's

32
00:02:13,290 --> 00:02:16,820
why I'll always keep or look at the development tools for multiple

33
00:02:16,820 --> 00:02:19,910
browsers on my machine because sometimes it's easier to find what we're

34
00:02:19,910 --> 00:02:22,380
looking for in one versus the other.

35
00:02:22,380 --> 00:02:28,840
Let's go back and do a find element by name of q in our IDE.

36
00:02:28,840 --> 00:02:31,200
Now that we know the name of that element, we can do a

37
00:02:31,200 --> 00:02:37,120
WebElement. And that particular one is the searchField, and

38
00:02:37,120 --> 00:02:39,670
we can do a driver.findElement.

39
00:02:39,670 --> 00:02:46,390
We want to do that by name. And the name we're going to pass in is q. If you'll

40
00:02:46,390 --> 00:02:52,310
remember, we found that through Firefox. And we'll say searchField.click, so

41
00:02:52,310 --> 00:02:57,320
we've got the focus on that page. Now we want to click on it to transfer focus

42
00:02:57,320 --> 00:03:04,650
to it. Then we can take that search field and send keys to it. Literally, we're

43
00:03:04,650 --> 00:03:14,570
going to type in pluralsight. And then when we're done with that, we can click

44
00:03:14,570 --> 00:03:15,590
Enter on that field.

45
00:03:15,590 --> 00:03:26,640
So we'll say searchField.sendKeys, and we'll do Keys.ENTER.

46
00:03:26,640 --> 00:03:28,310
Let's save this.

47
00:03:28,310 --> 00:03:33,640
I'm going to go ahead and run it, and it should pull up a browser. Navigate

48
00:03:33,640 --> 00:03:40,060
to google.com. Find the element on that page by name of q. Click on it to

49
00:03:40,060 --> 00:03:46,650
transfer focus to it and then send the keys or type in Pluralsight and then

50
00:03:46,650 --> 00:03:49,850
hit Enter on it, which will then bring up the other page with the search

51
00:03:49,850 --> 00:03:54,630
results for Pluralsight. Let's run this and see if that does exactly what we

52
00:03:54,630 --> 00:03:56,840
think it should do.

53
00:03:56,840 --> 00:04:00,010
And just as I expected, switching over to my browser,

54
00:04:00,010 --> 00:04:05,510
I have a Chrome page that has pulled up. It's actually gone through

55
00:04:05,510 --> 00:04:09,240
and done the search with the Pluralsight text in there and pulled

56
00:04:09,240 --> 00:04:11,540
up the search results for that page.

57
00:04:11,540 --> 00:04:15,460
So a pretty sophisticated little search based off of just a couple of

58
00:04:15,460 --> 00:04:19,470
elements. Pretty easy to do and quick to get that in there.

59
00:04:19,470 --> 00:04:23,120
And I like showing you both of those methods where Chrome will

60
00:04:23,120 --> 00:04:25,710
sometimes give you a better answer or Firefox will give you a

61
00:04:25,710 --> 00:04:32,000
better answer, it depends on the scenario, of which ID might be best to search off of on that page.

