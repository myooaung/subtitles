WEBVTT
1
00:00:00.340 --> 00:00:03.820
Before we actually get into creating the automation framework,

2
00:00:03.820 --> 00:00:05.710
let's answer the most important question,

3
00:00:05.710 --> 00:00:09.840
which is why do all of this work of creating a framework?

4
00:00:09.840 --> 00:00:13.120
Why not just record a test using Selenium IDE?

5
00:00:13.120 --> 00:00:15.620
It seems like that would be an easy way to go and why do

6
00:00:15.620 --> 00:00:18.060
we have to write all this code? Well,

7
00:00:18.060 --> 00:00:20.700
there's a few reasons why recording doesn't work.

8
00:00:20.700 --> 00:00:23.040
Let's go over some of those.

9
00:00:23.040 --> 00:00:27.040
One of the major reasons is test brittleness.

10
00:00:27.040 --> 00:00:28.830
So if you look at a simple diagram here,

11
00:00:28.830 --> 00:00:31.950
you can see that if you decided that you were just going to record these

12
00:00:31.950 --> 00:00:34.980
tests and you were going to use some kind of framework,

13
00:00:34.980 --> 00:00:39.740
then your test would directly depend on your web application.

14
00:00:39.740 --> 00:00:42.640
So what happens if your web app changes in some way?

15
00:00:42.640 --> 00:00:45.170
Let's say that the structure of the application changes

16
00:00:45.170 --> 00:00:49.760
significantly or even just minor little changes. Well,

17
00:00:49.760 --> 00:00:53.920
if you have a large number of tests and all of those tests depend on,

18
00:00:53.920 --> 00:00:58.880
let's say, a particular element on a page being named a certain thing and that

19
00:00:58.880 --> 00:01:03.740
changes, all of those tests are suddenly going to break.

20
00:01:03.740 --> 00:01:07.060
Now you're going to have to modify that code in all of those

21
00:01:07.060 --> 00:01:09.730
tests that you had recorded and played back.

22
00:01:09.730 --> 00:01:12.890
That's really the big disadvantage of recording because recording is

23
00:01:12.890 --> 00:01:16.870
going to grab the element as we've seen by the most sufficient way

24
00:01:16.870 --> 00:01:18.620
that it can find throughout the element,

25
00:01:18.620 --> 00:01:24.530
which is not abstracting away that idea of graphing an element.

26
00:01:24.530 --> 00:01:28.610
So if the element changes all of those tests break. You're copying

27
00:01:28.610 --> 00:01:32.210
a lot of code when you're recording. And if you've been developing

28
00:01:32.210 --> 00:01:37.190
very long, copy and paste is a red flag or what they call a code

29
00:01:37.190 --> 00:01:40.960
smell to warn you you're doing something that's going to break in

30
00:01:40.960 --> 00:01:43.240
multiple places.

31
00:01:43.240 --> 00:01:45.260
Now let's think about what happens when you put an

32
00:01:45.260 --> 00:01:47.400
automation framework in place.

33
00:01:47.400 --> 00:01:49.980
The only modification I've made to this diagram is I've

34
00:01:49.980 --> 00:01:52.530
created an abstraction layer, and that's what the

35
00:01:52.530 --> 00:01:54.630
automation framework is doing for you.

36
00:01:54.630 --> 00:01:59.040
It's primarily giving you an abstraction from the actual web application.

37
00:01:59.040 --> 00:02:02.640
We'll see in a minute here how we actually still want to model

38
00:02:02.640 --> 00:02:05.640
the application using the page object model.

39
00:02:05.640 --> 00:02:08.270
But the idea here is that your tests now depend on the

40
00:02:08.270 --> 00:02:11.540
automation framework, not the application itself.

41
00:02:11.540 --> 00:02:14.410
You're using the automation framework almost as

42
00:02:14.410 --> 00:02:17.040
internal language for writing your tests.

43
00:02:17.040 --> 00:02:20.550
Since your tests depend on that automation framework, if we run through

44
00:02:20.550 --> 00:02:25.020
that scenario where something changes in your web app, then you just

45
00:02:25.020 --> 00:02:27.470
have to update that method in your automation framework that

46
00:02:27.470 --> 00:02:29.920
manipulates that object in your web app.

47
00:02:29.920 --> 00:02:33.980
So for example, let's say that an ID changes or the name of some field

48
00:02:33.980 --> 00:02:38.800
that you're using on an element changes, you only break at that

49
00:02:38.800 --> 00:02:41.640
framework level, not throughout all of your test.

50
00:02:41.640 --> 00:02:45.690
Your tests can still stay the same. Hopefully, you've only created one

51
00:02:45.690 --> 00:02:49.070
reference to it in your automation framework, and you've abstracted away the

52
00:02:49.070 --> 00:02:51.970
idea of how to grab that element or use that element.

53
00:02:51.970 --> 00:02:54.910
So all of those tests are depending on the framework, and you

54
00:02:54.910 --> 00:02:57.880
only have to change it in one place because it's not a

55
00:02:57.880 --> 00:03:01.740
duplication of dependencies in your web app.

56
00:03:01.740 --> 00:03:05.990
Now this chart is by no means scientific in any way, but it's just an

57
00:03:05.990 --> 00:03:09.330
example of some observations that I've personally made working with a

58
00:03:09.330 --> 00:03:13.770
lot of different organizations on their test automation frameworks and

59
00:03:13.770 --> 00:03:16.740
seeing from experience how things go.

60
00:03:16.740 --> 00:03:19.760
What I've found is that recording starts out to be much

61
00:03:19.760 --> 00:03:21.460
faster than developing a framework.

62
00:03:21.460 --> 00:03:24.690
It's very easy to get going with automation frameworks by

63
00:03:24.690 --> 00:03:27.360
starting off just doing some recording.

64
00:03:27.360 --> 00:03:28.840
In fact, you start off really,

65
00:03:28.840 --> 00:03:32.150
really fast. But what ends up happening is because of that test

66
00:03:32.150 --> 00:03:35.560
brittleness and because the test that you record starts to get more

67
00:03:35.560 --> 00:03:40.950
complex, the time it takes to record starts to go up significantly, and

68
00:03:40.950 --> 00:03:44.690
you're not able to reuse a lot of what you've already recorded. So you

69
00:03:44.690 --> 00:03:46.200
really don't gain any benefit.

70
00:03:46.200 --> 00:03:46.830
In fact,

71
00:03:46.830 --> 00:03:50.440
it starts to slow down just because those tests start breaking and

72
00:03:50.440 --> 00:03:54.040
breaking, and you're constantly going back and rerecording things or

73
00:03:54.040 --> 00:03:57.390
modifying those tests. Now on the framework side,

74
00:03:57.390 --> 00:03:59.000
you start off with a big hit.

75
00:03:59.000 --> 00:04:01.530
It definitely takes a lot more time to use the framework or

76
00:04:01.530 --> 00:04:04.040
build the framework than it does to record.

77
00:04:04.040 --> 00:04:06.620
But as you start building up that framework and as you start

78
00:04:06.620 --> 00:04:09.230
building up all the functionality of that framework and really

79
00:04:09.230 --> 00:04:13.600
finding ways to make your code efficient and tests very succinct,

80
00:04:13.600 --> 00:04:16.740
you end up saving a large amount of time.

81
00:04:16.740 --> 00:04:24.000
You get to the point where it's very easy to write automated tests because you already have all of the supporting framework in place.

