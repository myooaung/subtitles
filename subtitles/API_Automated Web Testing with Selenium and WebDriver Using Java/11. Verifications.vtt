WEBVTT
1
00:00:00.040 --> 00:00:02.900
We kind of snuck in a little bit of this,

2
00:00:02.900 --> 00:00:04.520
but haven't really talked about it,

3
00:00:04.520 --> 00:00:10.030
and that is how do we verify or tell that our test is

4
00:00:10.030 --> 00:00:12.740
a valid test of our application?

5
00:00:12.740 --> 00:00:14.770
We've got it wiring things up,

6
00:00:14.770 --> 00:00:18.300
but not really going through and making it a real test case.

7
00:00:18.300 --> 00:00:20.390
And this is useful if you're a developer and just

8
00:00:20.390 --> 00:00:23.320
wanting to automate navigation.

9
00:00:23.320 --> 00:00:25.390
But if you really want to go through and tell that

10
00:00:25.390 --> 00:00:28.460
something is in fact valid at this point,

11
00:00:28.460 --> 00:00:31.360
you need to do one of two things.

12
00:00:31.360 --> 00:00:37.090
First, we can do an assert. An assert checks to make sure something is true.

13
00:00:37.090 --> 00:00:38.350
If an assert fails,

14
00:00:38.350 --> 00:00:42.060
the test stops because an assert says this needs to be

15
00:00:42.060 --> 00:00:44.640
true in order for me to continue.

16
00:00:44.640 --> 00:00:47.910
So you might use an assert to verify that you're on a particular page by

17
00:00:47.910 --> 00:00:52.080
checking the title of that page before you try to click on anything on it

18
00:00:52.080 --> 00:00:55.680
because there's no point if you're not on the correct page.

19
00:00:55.680 --> 00:00:58.500
It means you've already failed.

20
00:00:58.500 --> 00:01:00.530
Verify, on the other hand,

21
00:01:00.530 --> 00:01:04.840
actually checks some statement and the test can still continue to pass that.

22
00:01:04.840 --> 00:01:07.570
You might put multiple verification steps in it,

23
00:01:07.570 --> 00:01:10.190
and if it fails, it will log that failure,

24
00:01:10.190 --> 00:01:14.480
but will keep going on so that you might be able to check multiple things.

25
00:01:14.480 --> 00:01:18.440
An easy way to remember this is if an assert fails,

26
00:01:18.440 --> 00:01:22.640
that test has failed, and it's really an error. And if a verify fails,

27
00:01:22.640 --> 00:01:26.110
then it probably is actually a failing test, and then probably it's

28
00:01:26.110 --> 00:01:30.630
actually a failing test case, and there might be multiple verifications

29
00:01:30.630 --> 00:01:38.000
that could fail. So only one assert value, but multiple verify failures are allowed.

