1
00:00:00,740 --> 00:00:05,600
We are able to run every function that is passed to in its statement but right now if anything goes

2
00:00:05,600 --> 00:00:08,270
wrong inside of one these supplied functions.

3
00:00:08,270 --> 00:00:13,280
So just be really clear F and right there would be like this functionally passed into the statement

4
00:00:13,700 --> 00:00:15,660
or this function right here.

5
00:00:15,830 --> 00:00:16,820
And if anything goes wrong.

6
00:00:16,850 --> 00:00:22,610
So if we fail an assertion or we have a typo or whatever else that means that our entire test program

7
00:00:22,610 --> 00:00:28,990
is going to fail entirely so this function call right here that's gonna run the IT statement if it goes

8
00:00:28,990 --> 00:00:30,090
bad that's it.

9
00:00:30,100 --> 00:00:36,270
Our entire test is done so we need to make sure that we handle any errors that occur while we are running

10
00:00:36,270 --> 00:00:37,890
an individual test.

11
00:00:37,890 --> 00:00:41,040
In theory an error is going to be occurring like all the time.

12
00:00:41,140 --> 00:00:43,750
Anytime a test fails and as we're writing tests.

13
00:00:43,770 --> 00:00:45,810
Yeah tests fail a lot.

14
00:00:45,810 --> 00:00:53,290
So to handle an error from that let's do a try we're going to wrap that function call with a try catch

15
00:00:53,980 --> 00:00:59,970
like so and we should probably add in some additional kind of reporting to the user.

16
00:00:59,970 --> 00:01:07,240
In addition to this so how about right after we call f n if everything goes okay and we actually get

17
00:01:07,240 --> 00:01:12,100
to the next line of code let's do a console log and just print out to the user that hey we just ran

18
00:01:12,160 --> 00:01:14,910
this statement and everything was good to go.

19
00:01:14,950 --> 00:01:19,630
So for that I'll do having it like a console log I'll use some string interpolation so I can use some

20
00:01:19,630 --> 00:01:22,740
back text right here and I'll say OK.

21
00:01:22,810 --> 00:01:28,250
Meaning this test was just ran successfully and then I'll print out the description like so

22
00:01:31,660 --> 00:01:32,670
let's be really clear.

23
00:01:32,740 --> 00:01:36,720
If anything goes wrong with the test we run that console log is not going to be invoked.

24
00:01:36,790 --> 00:01:42,310
So if the f n throws an error or just horribly goes wrong we're going to automatically skip over the

25
00:01:42,310 --> 00:01:45,400
console log and enter into the catch statement.

26
00:01:45,400 --> 00:01:49,720
So now inside the catch statement if we enter this thing that means something just went wrong with the

27
00:01:49,720 --> 00:01:52,490
test that we had the description for right here.

28
00:01:52,620 --> 00:01:56,830
So let's print out a kind of equivalent error message to tell the user that something just went kind

29
00:01:56,830 --> 00:02:00,290
of haywire they'll do a console dot log right here.

30
00:02:00,360 --> 00:02:02,440
Once again do I set it back ticks.

31
00:02:02,450 --> 00:02:05,710
I'll place an X to say hey something is not quite right.

32
00:02:06,620 --> 00:02:14,070
I'll once again print out the description and then after that we'll do another console log as well and

33
00:02:14,070 --> 00:02:18,230
we'll print out the air and that just occurred okay.

34
00:02:18,260 --> 00:02:19,880
Let's save this and see how we're doing now.

35
00:02:22,190 --> 00:02:25,500
One thing before we actually run this let's make sure we actually have a failing test.

36
00:02:25,550 --> 00:02:26,240
So I'll go back to the.

37
00:02:26,270 --> 00:02:31,510
For each dot test file I can go down to the bottom test right here and on the strict equal I'm gonna

38
00:02:31,520 --> 00:02:37,250
change that three to a four just to make sure that test fails so we can see one test pass top one should

39
00:02:37,250 --> 00:02:40,740
pass in the bottom one should fail yet.

40
00:02:40,760 --> 00:02:46,650
So I'll go back over to me and now if we scroll up we'll see that we get in OK.

41
00:02:46,660 --> 00:02:50,230
We ran that test successfully X that before each is time.

42
00:02:50,260 --> 00:02:54,230
That one failed because we got three not equal to four.

43
00:02:54,270 --> 00:02:56,510
Now the only problem here is that we print out the error message.

44
00:02:56,520 --> 00:03:03,030
It shows this entire stack trace right here which is really just way too much information way more than

45
00:03:03,030 --> 00:03:03,890
we would ever need.

46
00:03:04,830 --> 00:03:09,030
So I think that we should try to kind of just condense down and show like a really abbreviated thing

47
00:03:09,030 --> 00:03:11,600
and say hey here is specifically what went wrong.

48
00:03:11,640 --> 00:03:17,530
You can go figure out what occurred or what happened incorrectly yourself to do so back inside of the

49
00:03:17,530 --> 00:03:22,150
try catch we just set up we can find that console log where we console log out the air and we'll print

50
00:03:22,150 --> 00:03:30,640
out just the errors message the message is essentially just like this part right here a very core message

51
00:03:30,850 --> 00:03:38,080
of the air in addition writing from the error message as the first argument to console log I'm going

52
00:03:38,080 --> 00:03:39,220
to put in a string

53
00:03:41,940 --> 00:03:47,820
forward slash or zap backslash backslash sorry of t this is going to be interpreted by your terminal

54
00:03:47,850 --> 00:03:48,980
as a tab character.

55
00:03:49,020 --> 00:03:53,520
So it's just going to indent the error message make it a little bit easier to read as opposed to the

56
00:03:53,530 --> 00:03:58,680
okays and the Xs is let's say this again run again.

57
00:03:58,710 --> 00:03:58,970
Hey.

58
00:03:58,980 --> 00:03:59,310
All right.

59
00:03:59,340 --> 00:04:01,270
That's definitely a bit easier.

60
00:04:01,320 --> 00:04:05,150
You'll notice that down here we've got that's like three not equal four.

61
00:04:05,190 --> 00:04:06,320
That's not being indented.

62
00:04:06,330 --> 00:04:07,640
We'll take care then just a moment.

63
00:04:07,710 --> 00:04:12,590
But for right now it looks like everything else is turning up pretty good.

64
00:04:12,670 --> 00:04:17,410
Now the next thing we should think about is where other errors might occur inside of our test runner.

65
00:04:17,440 --> 00:04:22,790
The other thing that might go wrong is when we have a require statement right here when we call require.

66
00:04:22,830 --> 00:04:27,150
We're gonna take a look at all the file or all the code inside of that given file.

67
00:04:27,300 --> 00:04:29,790
We're gonna load up the file and execute everything inside of it.

68
00:04:30,240 --> 00:04:35,280
So there actually is another source of errors that could occur inside of our program if we go back over

69
00:04:35,280 --> 00:04:41,110
to our for each test file and go down to the very bottom down here.

70
00:04:41,180 --> 00:04:46,640
Try throwing in just like a bunch of gibberish like so now whenever we require this file that's going

71
00:04:46,640 --> 00:04:50,500
to immediately crash because there is some undefined variable inside of here.

72
00:04:50,540 --> 00:04:57,290
We could also try to serve a kind of syntax error so I could just put in like say I don't know some

73
00:04:57,290 --> 00:05:02,730
number of unbalanced parentheses or curly braces like so.

74
00:05:02,830 --> 00:05:08,680
So definitely big errors inside this file now these errors or these typos we have inside of here are

75
00:05:08,680 --> 00:05:15,740
not going to be caught by the try catch instead we're going to get an error thrown at the require statement

76
00:05:15,740 --> 00:05:18,680
time because that's when the file actually gets executed.

77
00:05:18,830 --> 00:05:23,150
So let's save that for each test file now run team again.

78
00:05:23,330 --> 00:05:27,340
And now we'll see a big error that says hey there's a big typo inside of here.

79
00:05:27,400 --> 00:05:31,900
So this is another thing that we should probably keep from holding up our entire test suite.

80
00:05:32,050 --> 00:05:36,250
So to handle that lets us wrap the require statement inside of a try catch as well

81
00:05:40,530 --> 00:05:45,190
and once again if something goes wrong we can use the same kind of error reporting syntax as what we

82
00:05:45,190 --> 00:05:46,570
had up here.

83
00:05:46,570 --> 00:05:55,100
So I'll do a console dot log I'll do a X and say error loading file

84
00:05:58,190 --> 00:06:00,370
and then is the second argument let's put in the name of the file.

85
00:06:00,380 --> 00:06:08,190
So file dot name and we'll also print out exactly what went wrong or what the type of was.

86
00:06:08,300 --> 00:06:13,830
So I'll do a console log of air dot message.

87
00:06:13,910 --> 00:06:19,670
Let's save this I'll flip back over we'll do it to me.

88
00:06:19,920 --> 00:06:20,430
And there we go.

89
00:06:20,430 --> 00:06:21,090
So now we can see.

90
00:06:21,110 --> 00:06:21,350
OK.

91
00:06:21,360 --> 00:06:24,300
Something really went wrong when we were trying to load that file.

92
00:06:24,390 --> 00:06:31,110
We had a unexpected token now in this case our entire test suite still exits because a typo inside of

93
00:06:31,110 --> 00:06:35,990
a file is really an unrecoverable error but at least now it's very clearly reported to us.

94
00:06:36,000 --> 00:06:38,340
What went wrong and exactly what occurred.

95
00:06:38,340 --> 00:06:40,320
You'll notice in this case we print out the error message.

96
00:06:40,320 --> 00:06:44,460
We just get unexpected token and we're not told where that error actually occurred.

97
00:06:44,460 --> 00:06:51,400
So in this scenario it might actually make sense to display the entire error message so if we do this

98
00:06:51,400 --> 00:06:56,500
now after removing the DOT message from air now we're going to get the full stack trace and we'll tell

99
00:06:56,500 --> 00:06:58,550
us exactly what went wrong.

100
00:06:58,570 --> 00:07:02,860
In addition you'll notice that it actually gives us the entire file path right here and the line that

101
00:07:02,860 --> 00:07:07,510
occurred on that's probably more useful than us trying to insert our own error message right here.

102
00:07:07,520 --> 00:07:13,160
So I think we could get by with just doing a console log of the given error.

103
00:07:13,360 --> 00:07:13,790
All right.

104
00:07:13,790 --> 00:07:18,350
One last safe one last test it's all Tammy again.

105
00:07:18,350 --> 00:07:23,740
And now I'm told very clearly exactly what just went wrong OK.

106
00:07:23,770 --> 00:07:25,150
So this looks pretty good.

107
00:07:25,330 --> 00:07:26,610
Definitely good improvement.

108
00:07:26,800 --> 00:07:30,670
Now we're going to add in a little bit more stuff on the reporting here to make the report that comes

109
00:07:30,670 --> 00:07:32,180
out just a little bit easier.

110
00:07:32,200 --> 00:07:34,180
Let's add that in just a moment in the next video.
