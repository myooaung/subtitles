WEBVTT
1
00:00:00.270 --> 00:00:04.500
Next up a quick break from the built in array methods like for each and map.

2
00:00:04.500 --> 00:00:11.070
We'll get back to them shortly but first arrow functions arrow functions are a new ish syntax in JavaScript

3
00:00:11.220 --> 00:00:14.890
an alternative way of defining a function expression.

4
00:00:14.910 --> 00:00:16.260
Notice up here.

5
00:00:16.260 --> 00:00:18.010
Internet Explorer is crossed out.

6
00:00:18.180 --> 00:00:23.070
Arrow functions are not supported in i.e. but pretty much everyone uses them these days.

7
00:00:23.070 --> 00:00:26.520
And there are many solutions to make sure code will run in all browsers.

8
00:00:26.520 --> 00:00:31.350
You can write an arrow function and then if it doesn't work in I.T. it'll be turned into some other

9
00:00:31.350 --> 00:00:35.190
code that does work but that's out of the scope of what we're talking about now.

10
00:00:35.280 --> 00:00:37.750
Let's take a look at Aero function syntax.

11
00:00:37.800 --> 00:00:42.660
We write function expressions all the time an anonymous function like this one here we pass into map

12
00:00:42.960 --> 00:00:44.890
or one that we pass into for each.

13
00:00:44.910 --> 00:00:50.190
We do this so much in javascript that it was decided that there should be a more compact syntax for

14
00:00:50.190 --> 00:00:52.310
defining function expressions.

15
00:00:52.410 --> 00:00:55.260
So it's another way of defining a function.

16
00:00:55.260 --> 00:00:57.300
We don't have to write the function keyword.

17
00:00:57.300 --> 00:01:02.790
Instead we write our function like this parentheses and the arrow.

18
00:01:02.790 --> 00:01:03.960
That's where the name comes from.

19
00:01:03.960 --> 00:01:06.550
Arrow function and then curly braces.

20
00:01:06.570 --> 00:01:10.610
Although we'll see that sometimes those braces are actually optional.

21
00:01:10.740 --> 00:01:14.520
So in this video we'll just take a look at a couple simple arrow functions.

22
00:01:14.520 --> 00:01:16.670
Let's try em out over here.

23
00:01:17.040 --> 00:01:22.470
If we wanted to write a function expression without an arrow function we would do something like const

24
00:01:22.740 --> 00:01:32.250
square equals function which accepts some number and it returns X times X to do the same thing with

25
00:01:32.250 --> 00:01:33.820
an arrow function.

26
00:01:33.870 --> 00:01:42.180
I'll comment that one out we would do const square equals parentheses no function keyword x or whatever

27
00:01:42.180 --> 00:01:44.180
our parameter name is.

28
00:01:44.490 --> 00:01:49.220
And then our arrow return x times x.

29
00:01:49.230 --> 00:01:53.720
And if I run my code and I call square of 4 we do get 16.

30
00:01:53.820 --> 00:01:56.970
You can compare the two syntax is here already.

31
00:01:56.970 --> 00:01:58.010
This one is shorter.

32
00:01:58.020 --> 00:02:03.570
We don't have to write functions so much and this makes a big difference when you look at some existing

33
00:02:03.570 --> 00:02:09.590
code bases or some libraries where you pass a lot of functions around you use a lot of callbacks.

34
00:02:09.690 --> 00:02:15.830
If you have function all over the place especially if you have nested callbacks you see function everywhere.

35
00:02:15.840 --> 00:02:17.970
It's like 90 percent of what your code is.

36
00:02:17.970 --> 00:02:23.210
First is when we use aero functions it's a lot cleaner slimmer and easier to understand.

37
00:02:23.340 --> 00:02:28.500
Now error functions were not introduced exclusively because they are more compact or they're easier

38
00:02:28.500 --> 00:02:29.500
on the eye.

39
00:02:29.530 --> 00:02:32.600
There is another difference aside from how we write them.

40
00:02:32.610 --> 00:02:36.060
There is a difference in how they behave around something called the keyword.

41
00:02:36.060 --> 00:02:39.270
This now we haven't talked about this in javascript yet.

42
00:02:39.390 --> 00:02:45.600
We will and when we do will address aero functions but with what we know right now aero functions work

43
00:02:45.660 --> 00:02:48.870
exactly the same way as any other function we can write.

44
00:02:48.870 --> 00:02:50.310
They're just shorter.

45
00:02:50.610 --> 00:02:52.020
So let's try one more.

46
00:02:52.020 --> 00:02:59.360
I'll define a function let's go with is even it accepts one parameter.

47
00:02:59.380 --> 00:03:11.190
We'll call this num we write our arrow and then we'll return num mod to equal equal equal 0 let's call

48
00:03:11.700 --> 00:03:17.830
it doesn't like that I have two squares refresh my code is even of 4.

49
00:03:17.960 --> 00:03:21.500
That's true is even a forty seven is false.

50
00:03:21.500 --> 00:03:22.280
There we go.

51
00:03:22.460 --> 00:03:25.850
One more error function with multiple parameters.

52
00:03:25.850 --> 00:03:27.850
Let's do this is so boring.

53
00:03:27.860 --> 00:03:30.780
But let's do multiply equals.

54
00:03:30.900 --> 00:03:37.020
We write our parents x and y just like we would with a regular function x comma Y.

55
00:03:37.070 --> 00:03:43.670
We just don't write the function keyword and we instead add the arrow and this will return x times Y.

56
00:03:45.050 --> 00:03:49.700
We run multiply of 4 and 7 we get twenty eight.

57
00:03:49.760 --> 00:03:55.100
The next video is going to be all about error functions and how we can sometimes make them even slimmer

58
00:03:55.210 --> 00:03:56.070
and cleaner.

59
00:03:56.150 --> 00:04:00.170
But first I'm just going to show you two rules when you write an error function.

60
00:04:00.170 --> 00:04:07.670
If you only have one parameter you can actually leave the parentheses off so I could rewrite any of

61
00:04:07.670 --> 00:04:08.430
these.

62
00:04:08.450 --> 00:04:16.390
Not this one but square and is even like this those parentheses are optional.

63
00:04:16.560 --> 00:04:19.110
Only when we have one parameter.

64
00:04:19.110 --> 00:04:24.690
So if I run my code is even still works is even of seven is false.

65
00:04:24.690 --> 00:04:27.030
It's even of eight is true.

66
00:04:27.510 --> 00:04:30.710
If we have more than one we have to have those prints.

67
00:04:30.780 --> 00:04:33.170
Otherwise javascript gets confused.

68
00:04:33.420 --> 00:04:34.850
It doesn't know what I'm trying to do here.

69
00:04:35.280 --> 00:04:41.070
And you could see my auto formatted here formatted it oddly and I get an error as soon as I run the

70
00:04:41.070 --> 00:04:42.600
code doesn't know what's going on.

71
00:04:42.630 --> 00:04:45.240
We have to add prints if we have more than one parameter.

72
00:04:45.630 --> 00:04:50.120
If we have one parameter they're optional and it's a matter of personal preference.

73
00:04:50.310 --> 00:04:53.540
I like leaving them off but some style guides.

74
00:04:53.580 --> 00:04:58.740
Some companies you may work with will expect you to add them in and then if we define a function with

75
00:04:59.010 --> 00:05:07.350
no parameters whatsoever like const greets which will just console that log Hello or Hi there.

76
00:05:07.350 --> 00:05:08.390
What do we do here.

77
00:05:08.400 --> 00:05:11.010
We have to have empty parents.

78
00:05:11.010 --> 00:05:12.810
We can't just leave it off.

79
00:05:12.840 --> 00:05:16.410
We need empty parents and it will console log.

80
00:05:16.460 --> 00:05:18.190
Hi.

81
00:05:18.210 --> 00:05:19.310
I'll run my code now.

82
00:05:19.320 --> 00:05:23.360
I call greets and we get high.

83
00:05:24.300 --> 00:05:30.660
So to wrap up the basic rules of an arrow function are that one it behaves just like a function expression

84
00:05:31.200 --> 00:05:33.120
where we declare it with the function keyword.

85
00:05:33.120 --> 00:05:34.630
But we don't have to do that.

86
00:05:34.710 --> 00:05:36.530
This arrow function has no name.

87
00:05:36.540 --> 00:05:40.880
We're simply creating an anonymous function expression using an arrow function.

88
00:05:40.950 --> 00:05:41.920
So we have the arrow.

89
00:05:42.030 --> 00:05:43.380
We have our curly braces.

90
00:05:43.380 --> 00:05:45.300
We return just like a regular function.

91
00:05:45.300 --> 00:05:48.750
We have our parameters but we have a couple options.

92
00:05:48.750 --> 00:05:52.470
If we have no parameters whatsoever we have to have empty prints.

93
00:05:52.560 --> 00:05:56.220
If we have multiple parameters we have to have the prints there.

94
00:05:56.220 --> 00:06:01.870
But if we have one parameter and only one then we can optionally leave them off.

95
00:06:01.920 --> 00:06:06.420
So this or what we had before both are valid.

96
00:06:06.420 --> 00:06:11.700
Next we'll see some nice optimizations how we can actually write an error function without these curly

97
00:06:11.700 --> 00:06:14.010
braces and without having to write return.
