1
00:00:00,810 --> 00:00:04,230
We've now taken a look at several different ways of storing images.

2
00:00:04,290 --> 00:00:07,980
Now we need to figure out how we're going to store images inside of our application.

3
00:00:08,040 --> 00:00:13,080
Like I said earlier we're going to do things that is not quite the best or most optimal way but it's

4
00:00:13,080 --> 00:00:17,630
in a way that's going to work for our application and it works in the context of this course.

5
00:00:17,670 --> 00:00:21,870
So it's not something I would recommend that you do in a production professional application but there

6
00:00:21,870 --> 00:00:25,290
are some scenarios where our approach is going to work just fine.

7
00:00:25,290 --> 00:00:29,920
So what we're going to do is take the file as included or the file that's been uploaded.

8
00:00:30,000 --> 00:00:36,310
We're going to turn it into a string that can be safely stored inside of our products not just on file.

9
00:00:36,330 --> 00:00:40,800
We're then going to take that string that represents the image and create a new record out of it using

10
00:00:40,830 --> 00:00:44,670
our products repository which in turn is going to save it into products stored.

11
00:00:44,670 --> 00:00:50,840
Jason So we first need to figure out how we can take the image that was included with this file upload

12
00:00:50,840 --> 00:00:55,400
request and turn it into a string that can be safely stored inside a file to do so.

13
00:00:55,400 --> 00:00:57,490
I'm going to find the console log right here.

14
00:00:57,590 --> 00:01:02,960
Remember rect file is an object that has all different properties about the file it was just uploaded

15
00:01:03,680 --> 00:01:09,590
the RAW image data is stored inside of the buffer property we're going to take that buffer.

16
00:01:09,590 --> 00:01:17,120
We're gonna call to string on it and we're going to encode it as a base sixty four string bass 64 string

17
00:01:17,420 --> 00:01:23,880
can safely represent an image in a string format so we're going to do a quick console log right here

18
00:01:23,910 --> 00:01:29,850
and see what that actually looks like it's going to say this go back over to my browser I'm going to

19
00:01:30,120 --> 00:01:33,240
enter an a title and a price and then I'll upload a file.

20
00:01:33,240 --> 00:01:37,770
Now once again this console log that's going to end up inside of our terminal is going to be a very

21
00:01:37,770 --> 00:01:38,820
very large.

22
00:01:38,820 --> 00:01:44,370
If you upload an image that's something like my coat right here of 117 kilobytes.

23
00:01:44,520 --> 00:01:49,020
So I would recommend that you just take a look at these small image that I upload right now so you can

24
00:01:49,020 --> 00:01:55,800
see it more or less what the base64 encoded string is going to look like so I'm going to select my small

25
00:01:55,800 --> 00:02:03,620
image submit it and then check out my terminal then over here I can see as big string of all these random

26
00:02:03,620 --> 00:02:05,120
looking characters.

27
00:02:05,120 --> 00:02:08,200
So this is a base 64 encoded image.

28
00:02:08,330 --> 00:02:14,190
It's essentially a string that encodes some raw data when we have an image in base64 formats.

29
00:02:14,210 --> 00:02:19,160
We can very easily distribute this string and essentially send the image around to people who are asking

30
00:02:19,160 --> 00:02:20,360
for it.

31
00:02:20,450 --> 00:02:25,880
What's better is that this string can be safely stored inside of our products not just on file.

32
00:02:25,910 --> 00:02:31,290
So this is a reasonable way for the context of our application to handle and store images.

33
00:02:31,310 --> 00:02:35,780
It's not something that I would highly recommend you do on a production application but once again there

34
00:02:35,780 --> 00:02:40,080
are better approaches to take in that scenario okay.

35
00:02:40,120 --> 00:02:45,610
So now that we've got this image in some workable fashion I'm going to remove the console log but keep

36
00:02:45,610 --> 00:02:52,090
around the base 64 bit stuff I'm going to assign all that to a variable that I'll call image and then

37
00:02:52,090 --> 00:03:01,640
going to also get access to the title and the price from wreck dot body.

38
00:03:01,650 --> 00:03:07,830
Now given the title the price and an image for some particular product we're going to use the products

39
00:03:07,830 --> 00:03:12,720
repo that we required up here and we were working on just a little bit ago to create a new product and

40
00:03:12,720 --> 00:03:15,330
save it into our products not just on file.

41
00:03:15,480 --> 00:03:19,860
Remember to do so all we have to do is call that create method.

42
00:03:19,860 --> 00:03:23,630
Here it is right here in passing an object with all the properties we want to save

43
00:03:27,020 --> 00:03:28,000
so back down.

44
00:03:28,160 --> 00:03:38,190
I'm going to call a wait products repo create and we're going to pass on the attributes we want to save.

45
00:03:38,220 --> 00:03:44,570
So title price and image I'm using the awake keyword here so I'm gonna make sure that I mark the enclosing

46
00:03:44,570 --> 00:03:47,980
function as async okay.

47
00:03:48,030 --> 00:03:49,440
That's pretty much it.

48
00:03:49,470 --> 00:03:53,250
So we are ready to do a quick test here before we do a quick test.

49
00:03:53,280 --> 00:03:58,650
I want to mention that there is an extremely subtle bug in the code we have right now very very subtle

50
00:03:59,070 --> 00:04:03,480
really hard to detect until you actually run this code and realize that there's something kind of funny

51
00:04:03,480 --> 00:04:03,950
going on.

52
00:04:04,740 --> 00:04:09,480
Nonetheless we're going to run this code see what happens and then tried to diagnose what is currently

53
00:04:09,480 --> 00:04:10,480
going wrong.

54
00:04:10,870 --> 00:04:13,770
It's going to save the file.

55
00:04:13,870 --> 00:04:20,400
I'm gonna go back to my form but in a title and a price I'm going to once again use my small image right

56
00:04:20,400 --> 00:04:24,950
here and submit it I see okay it's as submitted.

57
00:04:24,960 --> 00:04:26,990
So it seems like everything went OK.

58
00:04:27,060 --> 00:04:32,010
Now I should be able to open up my products dot Jason file and see all the saved information around

59
00:04:32,010 --> 00:04:35,880
the product that was just created so open it up and there we go

60
00:04:39,090 --> 00:04:45,770
so it looks like everything showed up your correctly or I should of put some emphasis on here it looks

61
00:04:45,770 --> 00:04:50,480
like everything showed up correctly but there actually is a very subtle bug like I mentioned.

62
00:04:50,480 --> 00:04:51,960
Let's take a quick pause right here.

63
00:04:52,000 --> 00:04:55,790
We're gonna come back the next video we're gonna start playing around with our request handler a little

64
00:04:55,790 --> 00:04:59,570
bit more and we're going to very quickly realize that even though it appears that everything is working

65
00:04:59,570 --> 00:05:03,600
correctly there is something just a little bit wrong with our setup.

66
00:05:03,800 --> 00:05:05,110
So I'll see you in just a minute.
