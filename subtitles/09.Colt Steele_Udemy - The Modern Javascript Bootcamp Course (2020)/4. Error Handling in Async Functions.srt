1
00:00:00,150 --> 00:00:00,880
All right.

2
00:00:01,140 --> 00:00:02,580
So this is great.

3
00:00:02,580 --> 00:00:08,340
Very short an easy way to wait for an asynchronous operation to complete before running the next line.

4
00:00:08,700 --> 00:00:12,570
But what if the asynchronous operation if that promise is not resolved.

5
00:00:12,570 --> 00:00:16,140
What if it's rejected right now it's working out.

6
00:00:16,140 --> 00:00:17,460
I have Internet.

7
00:00:17,610 --> 00:00:19,830
I'm not requesting an invalid you are.

8
00:00:20,190 --> 00:00:28,610
But if I change that this end point should give me a forum for iOS is going to reject the promise.

9
00:00:28,620 --> 00:00:29,620
I don't have a catch.

10
00:00:29,640 --> 00:00:31,790
I don't have any sort of error handling.

11
00:00:31,980 --> 00:00:32,970
What happens.

12
00:00:32,970 --> 00:00:38,730
Let's see some uncut and promise error request.

13
00:00:38,770 --> 00:00:43,870
I don't have any code that I'm running either to catch that error maybe to make a different request

14
00:00:43,870 --> 00:00:46,750
to tell the user something went wrong.

15
00:00:46,750 --> 00:00:49,190
I am not handling it at all.

16
00:00:49,210 --> 00:00:50,830
We have a couple of options.

17
00:00:50,830 --> 00:00:55,690
The first is to chain on a dot catch to might get planets call.

18
00:00:55,690 --> 00:00:57,770
Remember get planets is an async function.

19
00:00:57,790 --> 00:00:59,280
It returns a promise.

20
00:00:59,500 --> 00:01:12,180
If I catch get planets error console dot log in catch and then let's console that like the error as

21
00:01:12,180 --> 00:01:12,480
well.

22
00:01:14,340 --> 00:01:15,270
Let's see what happens now.

23
00:01:16,820 --> 00:01:17,270
OK.

24
00:01:17,300 --> 00:01:17,890
There we go.

25
00:01:18,000 --> 00:01:19,900
And catch here's my error.

26
00:01:20,030 --> 00:01:21,330
I caught it.

27
00:01:21,380 --> 00:01:22,830
We have another option though.

28
00:01:23,090 --> 00:01:30,140
If you don't want to have to use dot catch and pass it and callback can come comment that out in my

29
00:01:30,140 --> 00:01:31,250
async function.

30
00:01:31,340 --> 00:01:37,670
I'll keep this original one I can add a try and catch block which looks like this.

31
00:01:37,820 --> 00:01:42,830
Try something otherwise catch the error.

32
00:01:42,890 --> 00:01:47,590
So here's what I would want to try and if something goes wrong.

33
00:01:47,600 --> 00:01:51,320
If an exception is raised if there's an error don't freak out.

34
00:01:51,320 --> 00:02:02,300
Just run this code and I'll cancel that log in catch comma or e not error.

35
00:02:02,370 --> 00:02:03,880
Let's see what happens now.

36
00:02:03,910 --> 00:02:08,910
Need to call get planet still get planets.

37
00:02:08,970 --> 00:02:09,480
Great.

38
00:02:09,510 --> 00:02:13,200
Let's try it out same output.

39
00:02:13,410 --> 00:02:14,760
Well we said in catch.

40
00:02:14,820 --> 00:02:19,890
I think what we have before in catch with three exclamation points this time we have one.

41
00:02:19,890 --> 00:02:23,400
So we get the same behavior but these are technically different.

42
00:02:23,400 --> 00:02:29,820
They're different because this is going to catch any errors any issues within this one async function

43
00:02:30,040 --> 00:02:30,770
here.

44
00:02:30,890 --> 00:02:36,780
I could have multiple functions that are returning promises I could have got vendors and as we've seen

45
00:02:36,780 --> 00:02:43,170
before the callback in our DOT catch will run for any of them if the promise is rejected.

46
00:02:43,170 --> 00:02:46,250
So when we have one function we're calling it doesn't really matter.

47
00:02:46,500 --> 00:02:48,000
We're just doing one thing.

48
00:02:48,000 --> 00:02:51,450
There's one place one promise where the error could be raised.

49
00:02:51,600 --> 00:02:54,280
So it's not a big difference but there is a difference.

50
00:02:54,300 --> 00:02:59,070
This is more of a backup to catch multiple potential errors here.

51
00:02:59,070 --> 00:03:01,690
It's more specific to what we're trying to do.

52
00:03:01,890 --> 00:03:04,920
And we can be more detailed in how we handled it.

53
00:03:04,920 --> 00:03:06,840
But I'm not going to deal with that right now.

54
00:03:06,840 --> 00:03:13,170
Next what I'd like to show you is how we can make multiple requests or multiple asynchronous operations

55
00:03:13,170 --> 00:03:18,030
in a single async function using a weights and async async await.
