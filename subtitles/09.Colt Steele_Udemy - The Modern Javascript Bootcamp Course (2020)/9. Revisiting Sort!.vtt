WEBVTT
1
00:00:00.240 --> 00:00:02.240
Next step we have another array method.

2
00:00:02.280 --> 00:00:08.170
We've actually seen before but when we saw it earlier it didn't really behave the way we wanted it to.

3
00:00:08.190 --> 00:00:10.680
So the method is sought here.

4
00:00:10.740 --> 00:00:17.160
I have an array called prices and it's full of numbers representing prices on a website or who knows

5
00:00:17.160 --> 00:00:18.140
what.

6
00:00:18.390 --> 00:00:24.630
When we called a red dot sought or prices dot sought early on when we talked about array methods back

7
00:00:24.630 --> 00:00:30.090
when we were covering index of or reverse those sort of methods we didn't know about callbacks.

8
00:00:30.150 --> 00:00:31.220
We didn't know about functions.

9
00:00:31.230 --> 00:00:37.560
Even so when we call prices that sort the default sort in JavaScript it's very weird.

10
00:00:37.560 --> 00:00:41.070
I have no idea why this decision was made but the default.

11
00:00:41.130 --> 00:00:47.190
As we've already seen is to convert all of these numbers to strings and sort them as strings and that

12
00:00:47.190 --> 00:00:49.770
leads to some very odd behavior.

13
00:00:49.830 --> 00:00:50.970
If I run this code.

14
00:00:50.970 --> 00:00:52.040
Price is not sort.

15
00:00:52.040 --> 00:00:54.130
Just do it over here.

16
00:00:54.810 --> 00:00:57.760
You can see it ends up sorting them by the first character.

17
00:00:57.810 --> 00:01:04.230
So one before three and it's sorting them based off of strings rather than sorting them by actual value.

18
00:01:04.230 --> 00:01:09.170
So we end up with nine at the end of the array and that's ninety nine point ninety nine.

19
00:01:09.310 --> 00:01:14.760
Okay well we end up with ninety nine point nine nine at the end when we have three thousand and ninety

20
00:01:14.760 --> 00:01:18.420
five hundred and four hundred and five or four hundred point five.

21
00:01:18.420 --> 00:01:23.370
Those should all be greater but this sort doesn't really work the way we want it to.

22
00:01:23.400 --> 00:01:28.200
So back then I said once we talked about functions we'll see how to use sort and how to customize its

23
00:01:28.200 --> 00:01:29.250
behavior.

24
00:01:29.280 --> 00:01:30.530
This is how we do it.

25
00:01:30.750 --> 00:01:34.740
We pass in what they call on the docks a compare function.

26
00:01:34.740 --> 00:01:37.560
Now this function has two parameters.

27
00:01:37.800 --> 00:01:44.190
You can call them A and B or first and second and we need to return a value a number from compare func

28
00:01:45.150 --> 00:01:48.830
if that compare func returns a negative number.

29
00:01:49.080 --> 00:01:54.030
The function will sort a before B if it returns 0.

30
00:01:54.120 --> 00:02:01.050
It does not change the order and if it returns a number greater than 0 it will sort be before a.

31
00:02:01.050 --> 00:02:04.660
So this is always kind of confusing to explain when you look at it this way.

32
00:02:04.710 --> 00:02:08.090
It may not make a lot of sense but let me show you how we would use it here.

33
00:02:08.100 --> 00:02:14.280
So if we do is not sort and rewrite our function a compare function that needs to have two parameters

34
00:02:14.790 --> 00:02:16.020
A and B is fine.

35
00:02:16.020 --> 00:02:22.990
Then the standard sort would be a minus B and let me just show you what we get first.

36
00:02:22.990 --> 00:02:26.920
I'll save this to a variable cost sort one.

37
00:02:28.030 --> 00:02:34.070
Let's look at sort 1 we end up with twelve thirty five point nine nine ninety nine.

38
00:02:34.070 --> 00:02:36.710
Four hundred three thousand and ninety five hundred.

39
00:02:36.710 --> 00:02:40.520
We are sorting in ascending order from smallest to largest.

40
00:02:40.550 --> 00:02:45.560
If we come back to this chart and remember that if the compare function returns a negative number it

41
00:02:45.560 --> 00:02:52.070
sorts a before B where A is the first element B is the second if it's a positive number instead it sorts

42
00:02:52.070 --> 00:02:54.000
b before a.

43
00:02:54.050 --> 00:03:00.080
So if we walk through this with a simple example the first time this callback is executed we have four

44
00:03:00.080 --> 00:03:02.290
hundred point five and three thousand.

45
00:03:03.020 --> 00:03:10.400
So if we have a and b we have I'm just going to do 400 point five and then three thousand and the way

46
00:03:10.400 --> 00:03:14.790
our compare function is setup is that it returns a minus B.

47
00:03:15.050 --> 00:03:18.890
So 400 minus three thousand is going to be a negative number.

48
00:03:19.790 --> 00:03:21.960
So what does it do with a negative number.

49
00:03:22.010 --> 00:03:24.890
It sorts a before B.

50
00:03:24.890 --> 00:03:29.800
So that means that it's going to sort 400 before three thousand.

51
00:03:29.850 --> 00:03:37.670
Then let's say we were comparing thirty five point nine nine and twelve at that point a would be thirty

52
00:03:37.670 --> 00:03:40.280
five point nine nine.

53
00:03:40.310 --> 00:03:46.890
And then we have twelve point 0 4 B when we subtract a minus B thirty five minus twelve.

54
00:03:46.940 --> 00:03:49.010
That gives us a positive number.

55
00:03:49.280 --> 00:03:53.920
And when we have a positive number it sorts b before a.

56
00:03:54.020 --> 00:04:00.560
So that means twelve would go before thirty five and if we had two numbers that were equal then they

57
00:04:00.560 --> 00:04:06.140
would be treated as equal we wouldn't put one before the other we keep the order unchanged at least

58
00:04:06.140 --> 00:04:07.710
between those two values.

59
00:04:08.120 --> 00:04:12.350
So if we wanted to sort the other way let's call this concept ascending sort.

60
00:04:13.070 --> 00:04:21.710
If I wanted to do a descending sort any ideas here we would do prices dot sort we have a and b let's

61
00:04:21.710 --> 00:04:31.810
do instead of a and b this time X and Y and then we want to return Y minus X.

62
00:04:31.940 --> 00:04:33.910
So this is the other way around.

63
00:04:34.100 --> 00:04:40.610
And I kind of just made a horrible decision to name it X and Y from educational point of view because

64
00:04:40.610 --> 00:04:42.500
now you can't compare these as easily.

65
00:04:42.500 --> 00:04:44.590
So when you do that.

66
00:04:44.630 --> 00:04:44.880
OK.

67
00:04:44.900 --> 00:04:45.800
So a and b.

68
00:04:45.800 --> 00:04:50.210
Same order here but now we're returning B minus a.

69
00:04:50.240 --> 00:04:56.790
So if a is 1000 and we're comparing it to be which is 4000.

70
00:04:57.200 --> 00:04:59.930
In this case we're doing B minus a.

71
00:04:59.960 --> 00:05:03.950
So 4000 minus 1000 gives us a positive number.

72
00:05:03.950 --> 00:05:07.510
And when we get a positive number sort b before a.

73
00:05:08.090 --> 00:05:14.590
So that means moving the larger numbers to the left side of the array sorting them in descending order.

74
00:05:15.860 --> 00:05:23.480
So this one change a minus B versus B minus a or first thing minus second thing versus second thing

75
00:05:23.510 --> 00:05:26.510
minus first thing makes a significant difference.

76
00:05:26.660 --> 00:05:32.400
So we look at descending sort it's going from ninety five hundred all the way down to twelve.

77
00:05:32.780 --> 00:05:36.190
So the greatest number is first though the smallest number is last.

78
00:05:36.290 --> 00:05:42.230
There is a problem though if we look at ascending sort it looks like I mean it is exactly the same thing

79
00:05:42.740 --> 00:05:44.270
but that's deceiving.

80
00:05:44.270 --> 00:05:49.430
Remember that sort is one of the few array methods at least one of the few a callback array methods

81
00:05:49.670 --> 00:05:52.370
that actually mutates the original array.

82
00:05:52.370 --> 00:05:55.280
So we sorted it one way in place.

83
00:05:55.280 --> 00:06:00.630
We're actually updating prices and then we sorted it another way here in place.

84
00:06:00.830 --> 00:06:03.710
So we lose this effort it's gone.

85
00:06:03.710 --> 00:06:05.930
We're just making another reference to the same array.

86
00:06:06.140 --> 00:06:08.980
So we have three variables pointing to the exact same array.

87
00:06:08.990 --> 00:06:11.870
If we look at prices it's also updated.

88
00:06:12.020 --> 00:06:14.310
It's just one array in memory.

89
00:06:14.390 --> 00:06:20.300
So if I wanted to just have to clear different results where I was not sorting the same array I could

90
00:06:20.300 --> 00:06:26.960
either declare two variables prices 1 and then make a duplicate of prices 2 with the same data or I

91
00:06:26.960 --> 00:06:30.410
could use a method to copy the data into a new array.

92
00:06:30.890 --> 00:06:38.450
So something like slice right here if I slice first and I don't pass anything in.

93
00:06:38.680 --> 00:06:44.120
If I call prices not slice it makes a copy of that array.

94
00:06:44.170 --> 00:06:47.630
We saw this behavior earlier when we first talked about slice.

95
00:06:47.740 --> 00:06:53.500
So this is not something you would normally do unless you really did not want to sort in place.

96
00:06:53.500 --> 00:06:57.530
It's pretty rare that you're going to sort ascending and descending at once.

97
00:06:57.640 --> 00:07:02.470
Maybe you'll allow a user to toggle between them but then you can just have one array that is going

98
00:07:02.470 --> 00:07:03.920
from ascending to descending.

99
00:07:04.090 --> 00:07:07.840
But when I'm teaching I want to show you both so that you can take a look at both of them at the same

100
00:07:07.840 --> 00:07:09.140
time.

101
00:07:09.250 --> 00:07:14.190
Let's make another variable here called Bad sort equals prices.

102
00:07:14.330 --> 00:07:15.740
Dot slice.

103
00:07:16.000 --> 00:07:21.910
So I'm just making three copies each one of these variables now is not connected to the original prices.

104
00:07:21.910 --> 00:07:24.720
They have the same data but they're not the same reference.

105
00:07:24.820 --> 00:07:25.940
And let's see what we get.

106
00:07:26.000 --> 00:07:27.220
So we have our bad sort.

107
00:07:27.220 --> 00:07:27.930
First.

108
00:07:27.940 --> 00:07:34.060
This is the one based off of strings I shouldn't call it bad sort but it's bad when you're sorting numbers.

109
00:07:34.090 --> 00:07:39.460
Then we have our ascending sword where we go from smallest number to the greatest number that was using

110
00:07:39.550 --> 00:07:45.880
a minus B first minus second and then we have our descending sword which goes the other way B minus

111
00:07:45.910 --> 00:07:46.250
a.

112
00:07:46.630 --> 00:07:48.400
So it returns a positive number.

113
00:07:48.490 --> 00:07:51.990
When this version would've returned a negative number and vice versa.

114
00:07:52.540 --> 00:07:54.720
So ninety five hundred down to twelve.

115
00:07:55.000 --> 00:07:55.720
Okay.

116
00:07:55.960 --> 00:08:01.210
Now the last thing I'll show you is how to sort something that is a little more complex rather than

117
00:08:01.300 --> 00:08:02.850
a single array of numbers.

118
00:08:02.860 --> 00:08:05.090
Let's go back to our books array okay.

119
00:08:05.170 --> 00:08:07.550
I've copied the books array back in.

120
00:08:07.690 --> 00:08:08.930
We have nine books.

121
00:08:08.930 --> 00:08:10.150
They each have a rating.

122
00:08:10.240 --> 00:08:12.080
I think that's the logical thing to sort by.

123
00:08:13.090 --> 00:08:17.410
So we'll write our sort and we'll do this one in place books dot sort.

124
00:08:17.680 --> 00:08:21.290
I mean it always happens in place but we won't make a copy of the array.

125
00:08:21.340 --> 00:08:24.550
We don't care about the original order let's just mutate this array.

126
00:08:24.820 --> 00:08:27.420
So books that sort we pass in our callback.

127
00:08:27.610 --> 00:08:34.270
I'll go with a and b again but this time we can't do something like a minus B because a and b are both

128
00:08:34.570 --> 00:08:35.530
objects.

129
00:08:35.530 --> 00:08:38.680
They're referring to one element in the array at a time.

130
00:08:38.680 --> 00:08:40.590
That's one element that's another.

131
00:08:40.690 --> 00:08:45.220
How can we compare or how can we run one object minus another object.

132
00:08:45.280 --> 00:08:46.360
We can't.

133
00:08:46.360 --> 00:08:51.020
So what we need to do is compare based off of reading which is easy enough.

134
00:08:51.040 --> 00:08:56.770
It's just a dot rating minus B dot rating.

135
00:08:56.770 --> 00:09:02.350
And let's take a look at books now before the first one was four point two five for good omens three

136
00:09:02.350 --> 00:09:05.240
point eighty three for changing my mind.

137
00:09:05.500 --> 00:09:12.790
If we look at books over here not books but books we end up with first lord of the Flies.

138
00:09:12.940 --> 00:09:14.130
Three point six seven.

139
00:09:14.170 --> 00:09:19.570
Then we have changing my mind three point eight American Gods four point one one all the way down to

140
00:09:19.570 --> 00:09:20.300
the way of kings.

141
00:09:20.320 --> 00:09:22.070
Four point six five.

142
00:09:22.420 --> 00:09:27.520
And we could reverse it if we wanted to by going the other direction if we wanted highest rated first

143
00:09:28.120 --> 00:09:32.530
we would do beat out rating minus a dot rating.

144
00:09:32.590 --> 00:09:37.540
Now you can do more complex sorts instead of just comparing based off of one value.

145
00:09:37.540 --> 00:09:40.120
Here we're only sorting based off a rating.

146
00:09:40.120 --> 00:09:46.520
You could write a more complex function that sorted based off of rating and also sorted based off of.

147
00:09:46.930 --> 00:09:53.470
I don't know the genre or if you had different types of ratings like for audiobooks you have ratings

148
00:09:53.470 --> 00:09:59.170
for the book itself in the story and then ratings for the performance quality of the person narrating

149
00:09:59.170 --> 00:09:59.660
it.

150
00:09:59.770 --> 00:10:05.320
So you have two different ratings and if you wanted to sort descending based off of primarily the story

151
00:10:05.650 --> 00:10:10.760
but then secondarily also the performance you could write a more complex function.

152
00:10:10.880 --> 00:10:12.210
But this is good enough for now.

153
00:10:12.250 --> 00:10:18.460
Let's look at books now and what do we have up first may expand this.

154
00:10:18.460 --> 00:10:22.900
We've got WAY OF KINGS four point six five and that is sort.

155
00:10:22.990 --> 00:10:28.570
So we saw the very very basics of sort back when we covered arrays and array methods before we talked

156
00:10:28.570 --> 00:10:29.510
about callbacks.

157
00:10:29.620 --> 00:10:30.880
And it wasn't that useful.

158
00:10:30.970 --> 00:10:36.100
I guess if you need to sort strings it's it's fine but if you need to sort numbers you need to pass

159
00:10:36.100 --> 00:10:42.610
a callback in a compare func and it needs to return a number if it's a negative number one thing happens

160
00:10:42.640 --> 00:10:44.050
if it's a positive number.

161
00:10:44.050 --> 00:10:45.470
Something else happens.

162
00:10:45.480 --> 00:10:46.780
Okay so that is sort.
