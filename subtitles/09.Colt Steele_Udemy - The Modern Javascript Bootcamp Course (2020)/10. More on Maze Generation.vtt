WEBVTT
1
00:00:00.640 --> 00:00:04.080
Now that we understand the general algorithm I want to give you a couple more details.

2
00:00:04.180 --> 00:00:07.960
That's really going to flesh out how we're going to implement this in our version of building out this

3
00:00:07.960 --> 00:00:09.080
maze.

4
00:00:09.130 --> 00:00:14.440
So as I said just a moment ago we're going to end up having a grid of sorts and it's great is going

5
00:00:14.440 --> 00:00:22.170
to be a two dimensional array it's going to have some number of rows in this case it would have three

6
00:00:22.230 --> 00:00:32.380
rows because there is one two three and there would be three columns goes one two and three having the

7
00:00:32.380 --> 00:00:37.290
grid alone is not quite enough or not the most convenient way of writing out this algorithm however.

8
00:00:37.330 --> 00:00:41.830
So we're going to introduce one other data structure or really technically two other structures inside

9
00:00:41.830 --> 00:00:46.810
of here to kind of keep track of how we're going to actually generate this entire grid.

10
00:00:46.810 --> 00:00:50.440
So when we spoke about how are we going to build this thing out and last video I said several times.

11
00:00:50.470 --> 00:00:53.830
Oh yeah we're going to remove this wall between two different cells.

12
00:00:53.920 --> 00:00:58.680
So the real question here is how are we going to track where there is a wall and where there is Nazi

13
00:00:58.690 --> 00:00:59.890
wall.

14
00:00:59.890 --> 00:01:05.280
Well to keep track of where there are walls and not we're going to add in two different pieces of terminology.

15
00:01:05.530 --> 00:01:10.660
We're gonna say that if there is a wall between two different cells that are right next to each other

16
00:01:10.990 --> 00:01:21.970
on the same row so this wall right here we're going to call that wall a vertical wall if there is ever

17
00:01:21.970 --> 00:01:25.270
a wall between two cells in a column.

18
00:01:25.270 --> 00:01:31.330
So like this one and this one right here we're going to call this wall right here a horizontal

19
00:01:34.060 --> 00:01:39.800
so there are two types of walls that we're going to be concerned with vertical and horizontal to keep

20
00:01:39.800 --> 00:01:41.850
track of where there are any walls.

21
00:01:41.870 --> 00:01:44.230
We're going to add in two additional arrays.

22
00:01:44.240 --> 00:01:47.120
These are also going to be two dimensional arrays that we're going to keep track of.

23
00:01:47.240 --> 00:01:52.550
In addition to the grid one so we're going to introduce another variable or another 2D array here called

24
00:01:53.000 --> 00:02:01.120
verticals and that's going to keep track of wherever there is a vertical wall and another one called

25
00:02:01.180 --> 00:02:07.620
as you'd probably guess horizontals and this is going to keep track of wherever there is a horizontal

26
00:02:07.620 --> 00:02:08.800
wall.

27
00:02:08.880 --> 00:02:14.190
Now you can just about guarantee 100 percent that you're going to get confused by the terminology verticals

28
00:02:14.190 --> 00:02:17.460
and horizontals several times as we are writing out this code.

29
00:02:17.460 --> 00:02:23.940
So please right now really committed to memory that the verticals array is going to keep track of walls

30
00:02:23.940 --> 00:02:29.840
that go up and down and the horizontals array is going to keep track of walls that go side to side like

31
00:02:29.850 --> 00:02:33.590
so inside of both these arrays.

32
00:02:33.600 --> 00:02:37.920
Like I said they're going to be two dimensional and they're going to contain a bunch of different boolean

33
00:02:37.980 --> 00:02:39.270
values.

34
00:02:39.270 --> 00:02:48.310
Each of these boolean values is going to be either true or false a value of true means there is no wall.

35
00:02:48.540 --> 00:02:53.440
So a value of true inside of verticals or horizontals essentially can be interpreted as true.

36
00:02:53.460 --> 00:03:02.760
This is like an open space false means that there is a wall.

37
00:03:02.910 --> 00:03:07.070
Now with this knowledge we can start to take a look at some different sample mazes and get a sense of

38
00:03:07.250 --> 00:03:12.920
the different verticals and horizontals arrays that we would create to represent each one going to do

39
00:03:12.920 --> 00:03:13.910
a little bit of tracing here

40
00:03:18.490 --> 00:03:24.520
and now I want to imagine how we would build up the verticals array and the horizontals array.

41
00:03:24.620 --> 00:03:28.790
If I start to make a couple of changes to this little demo maze that I have right here

42
00:03:31.660 --> 00:03:33.880
give me just one minute to clean this thing up.

43
00:03:33.940 --> 00:03:35.000
There we go that's better.

44
00:03:35.880 --> 00:03:36.180
OK.

45
00:03:36.200 --> 00:03:40.740
So I want to imagine for a second how I would build out the horizontals array and the verticals one

46
00:03:41.220 --> 00:03:43.230
if I remove that.

47
00:03:43.530 --> 00:03:53.880
That's about that one right there that will drop just a few more like so.

48
00:03:53.930 --> 00:03:57.100
So this right here would represent a valid maze.

49
00:03:57.120 --> 00:04:02.640
Now I want to imagine how I would generate or what the different verticals and the horizontals arrays

50
00:04:02.640 --> 00:04:03.180
would look like.

51
00:04:03.600 --> 00:04:10.750
Let's first consider the horizontals.

52
00:04:10.800 --> 00:04:13.200
So again this would be a two dimensional array.

53
00:04:13.530 --> 00:04:20.130
So I'll put in my outer brackets like so and then I'm going to have and this is critical to inner arrays

54
00:04:20.310 --> 00:04:25.740
that represent the two kind of lines of horizontal bars or walls that I can have.

55
00:04:25.740 --> 00:04:27.300
The first one is right here.

56
00:04:27.360 --> 00:04:30.150
That is one line of horizontal walls.

57
00:04:30.210 --> 00:04:32.670
There's the second one right there.

58
00:04:33.940 --> 00:04:36.680
So in this case remember also means there is a wall.

59
00:04:36.700 --> 00:04:39.070
True means there is no wall right here.

60
00:04:39.070 --> 00:04:40.060
There is a wall.

61
00:04:40.120 --> 00:04:45.020
So I would do false and all but f or false and then open open.

62
00:04:45.130 --> 00:04:47.870
So true true.

63
00:04:48.090 --> 00:04:51.060
And down here open closed open.

64
00:04:51.790 --> 00:05:00.780
So True False True that's how we get from having these different gaps into this horizontals array so

65
00:05:00.790 --> 00:05:04.810
now we can repeat the same process and consider what this would look like for the verticals array.

66
00:05:05.440 --> 00:05:07.810
So again let me delete some of this stuff on here very quickly

67
00:05:14.870 --> 00:05:18.760
and there we go that's about good enough right there.

68
00:05:18.770 --> 00:05:20.940
So now we can consider the verticals array.

69
00:05:21.080 --> 00:05:22.530
What would this look like.

70
00:05:22.540 --> 00:05:24.500
Well once again this is going to be a two dimensional array.

71
00:05:25.310 --> 00:05:32.840
It's going to have two inner rows inside of it the first one in the first row of verticals is going

72
00:05:32.840 --> 00:05:38.470
to represent this spacing right here and there's the second row right there.

73
00:05:38.540 --> 00:05:43.640
Now I'm using the row the term row here because I'm talking about like this row and this row I'm not

74
00:05:43.640 --> 00:05:47.650
talking about like that line because I would really call that a column.

75
00:05:47.670 --> 00:05:48.500
They're really talking.

76
00:05:48.500 --> 00:05:54.720
I'm saying that like this space right here would be the first element then that is the second element.

77
00:05:55.070 --> 00:05:58.730
Third one and so on okay.

78
00:05:58.770 --> 00:06:02.390
So now let's consider how we would fill out the verticals for this case.

79
00:06:02.430 --> 00:06:05.980
So we have open closed open.

80
00:06:06.090 --> 00:06:18.670
So that's true false and then over here we once again have open closed open the true false and true

81
00:06:19.900 --> 00:06:20.340
yet.

82
00:06:20.360 --> 00:06:22.040
So that is the general idea.

83
00:06:22.060 --> 00:06:23.630
So misspelt verticals by the way.

84
00:06:23.840 --> 00:06:26.770
That's the general idea of how we're going to keep track of these different walls.

85
00:06:26.780 --> 00:06:28.670
So we have three data structures in total.

86
00:06:28.670 --> 00:06:36.050
We've got the grid to track all the different actual cells that we have so that we have nine cells then

87
00:06:36.070 --> 00:06:40.520
we have horizontals to keep track of the walls that run from left to right.

88
00:06:40.530 --> 00:06:45.640
So like along that line right there and that line right there and we have verticals to keep track of

89
00:06:45.640 --> 00:06:51.370
the different walls that go from top to bottom right there and right there when the most challenging

90
00:06:51.370 --> 00:06:56.680
things to understand about this is that the verticals horizontals versus the grid array are going to

91
00:06:56.680 --> 00:06:58.610
have different dimensions.

92
00:06:58.630 --> 00:07:05.380
Notice that the grid array in this case would have would be a three by three as there are three columns

93
00:07:05.500 --> 00:07:10.800
and three rows but the verticals are going to have some very different dimensions.

94
00:07:10.890 --> 00:07:18.530
The verticals are going to have two rows so here's row one row two and three columns inside there.

95
00:07:18.540 --> 00:07:27.960
So one two three over though a three two or a two by three versus a three by three for the grid all

96
00:07:27.970 --> 00:07:28.120
right.

97
00:07:28.150 --> 00:07:31.050
So this is another one of those topics we're done with all the diagrams.

98
00:07:31.060 --> 00:07:35.260
This is another one of those topics where obviously as I'm telling you this stuff is probably really

99
00:07:35.260 --> 00:07:38.450
complicated and you might be sitting there thinking what in the world is going on here.

100
00:07:38.500 --> 00:07:43.180
And by the way Steven I can't read your handwriting qualifying totally fine.

101
00:07:43.180 --> 00:07:47.140
We're going to write out the code here and as we write the code I got to tell you the algorithm actually

102
00:07:47.140 --> 00:07:50.290
ends up being kind of clear about what is going on.

103
00:07:50.380 --> 00:07:54.250
So we're gonna write out all of our code and I really think that rather quickly you're going to get

104
00:07:54.250 --> 00:07:58.340
a good understanding of how this maze is really being put together.

105
00:07:58.420 --> 00:08:03.100
I can tell you right now from building this thing out several times and figure out the best way to explain

106
00:08:03.100 --> 00:08:03.420
it.

107
00:08:03.490 --> 00:08:08.740
The hardest part to understand about this is the different dimensions between the grid array where they

108
00:08:08.740 --> 00:08:14.700
array that keeps track of which cells we've actually visited and the verticals in horizontals right.

109
00:08:14.710 --> 00:08:19.630
That is by far the biggest challenging thing just understanding that there are different dimensions

110
00:08:19.810 --> 00:08:23.950
for each one that we need to be aware of to understand that we're going to come back to drawings like

111
00:08:23.950 --> 00:08:27.580
this several times as we start to write out that code and just make sure that every step along the way

112
00:08:27.610 --> 00:08:32.580
it is really really clear where all these different numbers are coming from okay.

113
00:08:32.630 --> 00:08:33.410
So that's pretty much it.

114
00:08:33.650 --> 00:08:34.810
Let's take a quick pause right here.

115
00:08:34.820 --> 00:08:38.960
When we come back the next video we're going to start to write out some code to create the grid array

116
00:08:39.230 --> 00:08:42.080
the verticals rate and the horizontals Ray as well.

117
00:08:42.080 --> 00:08:43.750
So I'll see you in just a minute.
