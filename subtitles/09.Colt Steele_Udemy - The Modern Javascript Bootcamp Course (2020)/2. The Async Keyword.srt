1
00:00:00,210 --> 00:00:03,140
All right so there are two pieces a sink and a wait.

2
00:00:03,150 --> 00:00:04,490
Two separate keywords.

3
00:00:04,530 --> 00:00:11,500
We're gonna start with async so we use async in front of a function declaration or function expression.

4
00:00:11,670 --> 00:00:16,230
We use it to designate a certain function as an async function.

5
00:00:16,650 --> 00:00:20,700
And the key thing to understand about this keyword is when you put it in front of a function like I

6
00:00:20,700 --> 00:00:21,620
have here.

7
00:00:21,810 --> 00:00:24,320
This function behaves differently.

8
00:00:24,480 --> 00:00:27,140
It's now going to return a promise.

9
00:00:27,150 --> 00:00:32,160
So even though I never write new promise I don't explicitly say hey Return a promise.

10
00:00:32,160 --> 00:00:35,870
I'm simply saying return a string because I put async there.

11
00:00:35,880 --> 00:00:39,540
The function now returns a promise and I can show this to you.

12
00:00:39,570 --> 00:00:45,450
Let's make a simple function we'll just call it greet function greet console about log.

13
00:00:45,450 --> 00:00:47,910
Actually that's not console dot log let's return.

14
00:00:48,090 --> 00:00:49,730
Hello.

15
00:00:49,900 --> 00:00:50,350
Okay.

16
00:00:50,370 --> 00:00:56,940
No surprise if I call greed right now it's not an async function we get a string back javascript 1 0

17
00:00:56,940 --> 00:00:59,640
1 return a string we get a string.

18
00:00:59,820 --> 00:01:07,590
Now if I duplicate this and put the async keyword in front of my function declaration.

19
00:01:07,860 --> 00:01:16,950
Now when I call green what I get is a promise promise that was returned and resolved with the value

20
00:01:16,950 --> 00:01:18,290
of Hello.

21
00:01:18,330 --> 00:01:24,870
So whatever the value that I'm returning is the promise that will be returned from Greece will be resolved

22
00:01:24,900 --> 00:01:26,370
with that value.

23
00:01:26,760 --> 00:01:35,130
So I could do something like greet dot then and we'll just call this Val and then we can cancel that

24
00:01:35,130 --> 00:01:38,120
log promise resolved with.

25
00:01:38,880 --> 00:01:47,510
And then we can add in Val so I can chain on a dot then because greed is now going to return a promise.

26
00:01:47,510 --> 00:01:48,290
Tested out.

27
00:01:48,410 --> 00:01:48,800
There we go.

28
00:01:48,800 --> 00:01:51,380
Promise resolved with Hello.

29
00:01:51,380 --> 00:01:53,270
Let's say we have another function.

30
00:01:53,270 --> 00:01:55,370
This one will be trivial as well.

31
00:01:55,370 --> 00:01:59,060
Let's go with ADD and it takes an X and Y.

32
00:01:59,060 --> 00:02:02,810
It returns the sum of X plus Y.

33
00:02:03,410 --> 00:02:06,530
Right now if we don't make it async it just returns a number.

34
00:02:06,710 --> 00:02:11,730
Assuming we pass in two numbers if we make it async by putting the async keyword first.

35
00:02:11,900 --> 00:02:19,580
If I call add we get a resolved promise with the value that it's resolved with set to nine so I could

36
00:02:19,580 --> 00:02:26,210
use a dot then these two simple functions make kind of no sense at all to use promises with or to make

37
00:02:26,240 --> 00:02:29,330
async because they're not doing anything asynchronous.

38
00:02:29,450 --> 00:02:30,470
Why use a promise.

39
00:02:30,470 --> 00:02:35,230
But the next thing I want to mention is how do we return a promise that is not resolved.

40
00:02:35,840 --> 00:02:37,310
So things go well.

41
00:02:37,310 --> 00:02:40,070
We return a value return the string hello.

42
00:02:40,070 --> 00:02:44,910
That promise returned from Greece is going to be resolved with Hello.

43
00:02:45,020 --> 00:02:48,370
Or with the number nine in this case if we add four and five.

44
00:02:48,470 --> 00:02:54,530
But sometimes we want to make promises where they might be rejected they might be resolved and instead

45
00:02:54,530 --> 00:02:56,010
of an async function.

46
00:02:56,330 --> 00:03:02,910
If we want to return a rejected promise all that we do is raise an exception.

47
00:03:03,140 --> 00:03:06,230
So if we throw an exception we throw an error.

48
00:03:06,320 --> 00:03:08,330
That promise will be rejected.

49
00:03:08,330 --> 00:03:14,410
So if we use this add example let's check if X and Y are actually numbers.

50
00:03:14,630 --> 00:03:16,880
If they're not we'll throw some sort of exception.

51
00:03:17,450 --> 00:03:27,800
So we could just check if X do type of x equals number or if it's not equal to number let's do that.

52
00:03:27,800 --> 00:03:32,970
Or type of y is not equal to number.

53
00:03:33,050 --> 00:03:43,200
Then we can throw X and Y must be numbers OK so let's not make this an async function for a moment just

54
00:03:43,200 --> 00:03:44,970
a regular old function.

55
00:03:44,970 --> 00:03:53,390
If we run it and I call ad with E and I don't know 5 There we go uncut.

56
00:03:53,430 --> 00:03:55,620
Exception X and Y must be numbers.

57
00:03:55,680 --> 00:03:57,030
So the logic works.

58
00:03:57,180 --> 00:03:59,190
No promises involved whatsoever.

59
00:03:59,190 --> 00:04:03,010
We call it with numbers instead everything's good.

60
00:04:03,090 --> 00:04:12,510
Now if I make it async tried again ad 4 and 5 we have a return value.

61
00:04:12,540 --> 00:04:16,830
This code was running and so the promise is resolved with that return value.

62
00:04:16,830 --> 00:04:22,140
If I call it with a string something that's not a number we still get a promise back.

63
00:04:22,140 --> 00:04:23,600
But it's been rejected.

64
00:04:23,760 --> 00:04:34,470
X and Y must be numbers so I could call add on E and R sure I can put on my dot.

65
00:04:34,470 --> 00:04:41,630
Then let's go with Val console dot log and I just copy this here.

66
00:04:41,940 --> 00:04:51,800
Promise resolves with Val and I can put a catch as well and promise rejected with and then we'll print

67
00:04:51,800 --> 00:04:58,590
the error so I'm just calling ad but add is an async function which means it returns a promise.

68
00:04:58,620 --> 00:04:59,730
It may be rejected.

69
00:04:59,760 --> 00:05:00,960
It may be resolved.

70
00:05:00,990 --> 00:05:02,980
I can handle it either way.

71
00:05:03,150 --> 00:05:09,330
And if we take a look and run my code we get promise rejected with X and Y must be numbers.

72
00:05:09,330 --> 00:05:13,060
So at this point async functions are what we've seen.

73
00:05:13,120 --> 00:05:15,730
They're a nice way of returning a promise.

74
00:05:15,750 --> 00:05:18,520
Take a moment and think of how you would write this yourself.

75
00:05:18,720 --> 00:05:24,870
So without using an async function but by manually creating the promise and resolving slash rejecting

76
00:05:24,870 --> 00:05:27,140
it here's what I would do.

77
00:05:27,510 --> 00:05:31,320
It would look something like this function ad X come away.

78
00:05:31,320 --> 00:05:35,100
Then we would return a new promise.

79
00:05:35,100 --> 00:05:39,750
We have our resolve function parameter and reject.

80
00:05:39,960 --> 00:05:41,980
And if none of this looks familiar to you.

81
00:05:42,000 --> 00:05:44,450
Make sure you check out the promises section.

82
00:05:44,460 --> 00:05:45,840
I can't say that enough.

83
00:05:45,960 --> 00:05:47,120
It really helps.

84
00:05:47,160 --> 00:05:48,360
So we have our new promise.

85
00:05:48,360 --> 00:05:53,220
And then in here we can move this logic but we're going to change it a bit.

86
00:05:53,220 --> 00:05:56,820
If type of x is not a number or type of y is not a number.

87
00:05:56,820 --> 00:06:03,840
Instead of throwing we're going to reject that promise like that.

88
00:06:03,840 --> 00:06:09,370
And then here we would resolve with X plus Y.

89
00:06:09,630 --> 00:06:17,010
So if I comment out my async version and we take a look at our manual promise creation it's called add

90
00:06:17,340 --> 00:06:18,960
this code should still work fine.

91
00:06:19,470 --> 00:06:21,710
So I should be catching this error.

92
00:06:21,900 --> 00:06:25,040
The rejected promise and we get the same output.

93
00:06:25,110 --> 00:06:32,560
If I instead due to numbers like I don't know why I keep doing 4 and 5 6 and 7 refresh promise resolved

94
00:06:32,560 --> 00:06:34,360
with 13.

95
00:06:34,540 --> 00:06:35,110
All right.

96
00:06:35,290 --> 00:06:41,290
So in async function on one level is just a short cut syntax to make a function that returns a promise

97
00:06:41,860 --> 00:06:47,630
if you return a value like we do here that value will be the value the promise is resolved with.

98
00:06:47,740 --> 00:06:52,580
If you throw an exception instead that promise will be rejected with this value.

99
00:06:52,930 --> 00:06:56,490
So our dot then callback or our DOT catch callbacks still work.

100
00:06:56,800 --> 00:06:59,560
But this is not all there is to async functions.

101
00:06:59,560 --> 00:07:01,330
That is the async keyword.

102
00:07:01,330 --> 00:07:05,650
And shortly we'll see the await keyword which makes things even more magical.
