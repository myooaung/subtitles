WEBVTT
1
00:00:00.240 --> 00:00:02.330
Next up a really important topic.

2
00:00:02.370 --> 00:00:08.730
Changing styles using JavaScript so we could select one element or 20 elements and potentially change

3
00:00:08.730 --> 00:00:12.180
their color their background color their font size we could hide them.

4
00:00:12.180 --> 00:00:12.900
How do we do that.

5
00:00:12.900 --> 00:00:16.450
How do we manipulate CSF properties using JavaScript and the dump.

6
00:00:17.130 --> 00:00:20.400
Well there is a couple ways I'm going to show you one in this video.

7
00:00:20.400 --> 00:00:22.400
It's called these style property.

8
00:00:22.500 --> 00:00:25.760
So every element that we select has a style property.

9
00:00:25.770 --> 00:00:26.850
So why don't we select one.

10
00:00:26.850 --> 00:00:35.800
How about this H1 const H1 equals document that query SELECT YOUR H1 in my CSX file that I have here.

11
00:00:36.070 --> 00:00:41.010
I've given all H1 ones a color of purple and a font size of sixty pixels.

12
00:00:41.190 --> 00:00:46.320
So if I look at H1 dot style I open this up.

13
00:00:46.590 --> 00:00:51.410
We get this massive object but it looks like everything is completely empty.

14
00:00:51.420 --> 00:00:53.880
This is not telling me what the color is.

15
00:00:53.880 --> 00:00:56.480
It's not telling me font size express.

16
00:00:56.550 --> 00:00:59.850
If I find color on here or I could just type it.

17
00:01:00.360 --> 00:01:00.990
Where are you.

18
00:01:01.000 --> 00:01:02.390
C O L O.

19
00:01:02.420 --> 00:01:03.480
Oh come on.

20
00:01:03.480 --> 00:01:04.050
Here we go.

21
00:01:04.110 --> 00:01:05.450
Empty string.

22
00:01:05.460 --> 00:01:06.810
Why is that happening.

23
00:01:06.840 --> 00:01:10.590
It seems like this should be a representation of the styles on the element.

24
00:01:10.590 --> 00:01:15.900
But if I do H1 dot style dot color as we just saw nothing is there.

25
00:01:15.900 --> 00:01:21.330
So this is the first really important thing to understand about the style property we can use the style

26
00:01:21.330 --> 00:01:26.670
property to change colors or styles we can change any of those properties and they will be affected

27
00:01:26.820 --> 00:01:33.270
on the page but if we're trying to use the style property to read existing properties to read existing

28
00:01:33.270 --> 00:01:39.460
styles it won't work unless those styles are defined in line which is not really a good idea.

29
00:01:39.510 --> 00:01:44.860
We normally don't add inline styles if I go to my H1 I can style it inline.

30
00:01:44.940 --> 00:01:50.730
I could say color is teal I don't know why I'm doing quotes again.

31
00:01:50.760 --> 00:01:51.320
There we go.

32
00:01:51.390 --> 00:01:53.480
Color is teal.

33
00:01:53.610 --> 00:01:55.480
This is not normally what we'd want to do.

34
00:01:55.500 --> 00:02:02.310
We want to separate our styles from our HMO but if I do it this way and I refresh the page now I select

35
00:02:02.310 --> 00:02:11.640
the H1 again and I look at H1 dot style dot color it's now set to teal so the style property only contains

36
00:02:11.700 --> 00:02:17.670
styles that you have set inline which normally will be pretty much completely empty for every element

37
00:02:17.670 --> 00:02:24.210
that you look at but we can also change the color or any of these styles here using the DOM using javascript

38
00:02:24.600 --> 00:02:31.050
I can now make this is there a color called Orchid yes there is great color name we get this change

39
00:02:31.050 --> 00:02:38.130
it actually changes it and if we look at what it does on our element it now has the inline style color

40
00:02:38.130 --> 00:02:44.490
is orchid if I go select something else like how about just this paragraph here.

41
00:02:44.820 --> 00:02:52.050
So we'll do const p equals document query selector and then I'll just delete this we want the first

42
00:02:52.050 --> 00:02:52.850
paragraph.

43
00:02:53.010 --> 00:03:01.020
So if I look at P it's that paragraph right there if I do p dot style dot now let's do color again color

44
00:03:01.020 --> 00:03:05.300
on this one will be white okay.

45
00:03:05.360 --> 00:03:10.940
So I have it highlighted so you can see it but obviously it's not easily visible right now so why don't

46
00:03:10.940 --> 00:03:17.180
we change the background color and the way we do a background color in CSX is that straight background

47
00:03:17.300 --> 00:03:18.860
dash color.

48
00:03:19.070 --> 00:03:24.260
Now this is another very important part of working with styles in the DOM in JavaScript the property

49
00:03:24.260 --> 00:03:33.080
names are camel cased so there is no p dot style dot background dash color it doesn't exist we'll get

50
00:03:33.350 --> 00:03:39.830
Oh well I misspelled it but this does not exist because in JavaScript this is not a valid identifier

51
00:03:40.130 --> 00:03:48.110
you can't name a variable or add an object or a property to an object called B dash w that won't work

52
00:03:49.040 --> 00:03:55.760
syntax error so that is why all of the style properties in JavaScript are camel cased so I could do

53
00:03:55.760 --> 00:04:04.490
P that style dot background color camel case it set to an empty string because we haven't actually set

54
00:04:04.490 --> 00:04:09.440
an inline style all of the styles we have are coming from our style sheet and I don't think we have

55
00:04:09.440 --> 00:04:18.610
a background color anyway but if I were to set it to black now that change takes effect and if we look

56
00:04:18.610 --> 00:04:25.120
at the style attribute of the style property we'll see that every single property name is camel cased

57
00:04:25.150 --> 00:04:26.620
if it's more than one word.

58
00:04:26.680 --> 00:04:33.430
So anytime you see animation delay or animation direction or anything like that in CSI s those would

59
00:04:33.430 --> 00:04:40.930
be dashes in between kabob case animation dash delay in JavaScript in the DOM it's all camel case it

60
00:04:40.930 --> 00:04:45.690
has to be otherwise they wouldn't be valid names for properties OK.

61
00:04:45.750 --> 00:04:52.420
So again this is only inline properties that we can read out but we can set any properties we want but

62
00:04:52.420 --> 00:04:58.400
you have to remember that what you're doing is adding a property to the element itself adding CSX in

63
00:04:58.400 --> 00:05:03.640
line and there's nothing really wrong with it but there's a better approach if you have a bunch of styles

64
00:05:03.640 --> 00:05:08.920
that you want to add if I wanted to add like 10 different styles to one of these elements or to a bunch

65
00:05:08.920 --> 00:05:15.040
of elements with this option using the style property I have to do it one at a time Pete style that

66
00:05:15.040 --> 00:05:20.590
background color equals black pete style what color equals white Pete style dot font size you can do

67
00:05:20.620 --> 00:05:30.040
that one camel cased equals and about 40 pixels so that's three separate lines and if this was something

68
00:05:30.040 --> 00:05:36.040
I was doing frequently for some reason probably not these styles specifically but on a Web site we often

69
00:05:36.040 --> 00:05:41.050
have groups of styles that we want to apply to different elements and we keep sort of a similar theme

70
00:05:41.290 --> 00:05:46.060
we would usually make a class and that's what we'll get to in just a bit there's another alternative

71
00:05:46.060 --> 00:05:53.500
for styling so this is the style property it's useful it allows you to update styles one at a time everything's

72
00:05:53.500 --> 00:05:59.290
camel cased if needed but it is not a good way to figure out what the current styles are on an element

73
00:05:59.620 --> 00:06:04.900
unless you happen to write all of your styles in line it's not going to have the values you expect so

74
00:06:04.900 --> 00:06:08.920
there's another way we can get all of the actual styles and that's what we'll see in the next video

75
00:06:09.630 --> 00:06:14.950
what I'll end up with here is just showing how we can use a loop and manipulate styles instead of a

76
00:06:14.950 --> 00:06:21.160
loop as well so let's change these styles of all the allies on the page I'll come over to my file my

77
00:06:21.160 --> 00:06:29.030
JavaScript file select all the allies document that query selector ally actually I want query SELECT

78
00:06:29.030 --> 00:06:40.520
you're all we'll call this concept all allies and then we can loop for let's ally of all allies.

79
00:06:40.770 --> 00:06:41.910
Why don't we set.

80
00:06:41.940 --> 00:06:42.340
Ally.

81
00:06:42.360 --> 00:06:46.720
That style DOD color to be some color.

82
00:06:46.830 --> 00:06:49.620
Why don't we make a little array of colors actually.

83
00:06:49.620 --> 00:07:03.730
So we'll do concert colors equals and then red orange yellow green blue and purple.

84
00:07:03.750 --> 00:07:05.220
How many allies do we actually have.

85
00:07:05.220 --> 00:07:06.330
One two three four.

86
00:07:06.360 --> 00:07:07.350
We have six.

87
00:07:07.410 --> 00:07:07.630
All right.

88
00:07:07.650 --> 00:07:08.970
So we have seven colors here.

89
00:07:09.600 --> 00:07:10.130
Yeah.

90
00:07:10.290 --> 00:07:10.680
No.

91
00:07:10.710 --> 00:07:11.480
Six.

92
00:07:11.500 --> 00:07:11.750
Okay.

93
00:07:11.760 --> 00:07:12.660
I'm a moron.

94
00:07:12.660 --> 00:07:13.770
We have six colors.

95
00:07:13.770 --> 00:07:16.720
That works as long as we have six allies.

96
00:07:16.770 --> 00:07:23.340
So if I want to access one of these colors and use it to change the corresponding ally using a for loop

97
00:07:23.370 --> 00:07:27.420
a for of loop is actually not going to help me much because I don't have the index.

98
00:07:27.510 --> 00:07:31.320
I want to take the first ally out of the six and set it to be red.

99
00:07:31.350 --> 00:07:33.110
The second Ally said it to be orange.

100
00:07:33.210 --> 00:07:40.940
So I would probably use a regular for loop here or why don't we mix it up and use for each instead all

101
00:07:40.950 --> 00:07:43.060
allies dot for each.

102
00:07:43.110 --> 00:07:45.240
And then we'll write an arrow function.

103
00:07:45.240 --> 00:07:50.700
And remember in our area function we have two parameters that we can use for for each.

104
00:07:50.700 --> 00:07:54.410
We have the elements and the index.

105
00:07:54.630 --> 00:08:00.630
Why don't we just start by console dot logging L and I see what we get.

106
00:08:00.670 --> 00:08:01.120
Okay.

107
00:08:01.340 --> 00:08:03.960
So we're getting the ally and then the index here.

108
00:08:03.980 --> 00:08:06.910
Now I can use that index to access that color.

109
00:08:06.980 --> 00:08:13.440
So const color we'll just call it color equals colors of I.

110
00:08:14.450 --> 00:08:20.330
And that should now give me a color based off of the index of the ally that we're working with.

111
00:08:20.390 --> 00:08:23.410
So we get red orange yellow green blue and purple.

112
00:08:23.540 --> 00:08:28.850
So I'm using a for each just to mix it up and then in here we'll access the element which I think I'll

113
00:08:28.850 --> 00:08:29.950
rename to Ally.

114
00:08:29.960 --> 00:08:31.830
It's a better name for that parameter.

115
00:08:32.030 --> 00:08:36.880
Ally does style dark color equals this color.

116
00:08:36.950 --> 00:08:38.480
Let's try running it.

117
00:08:38.480 --> 00:08:39.620
There we go.

118
00:08:39.620 --> 00:08:43.150
Red orange yellow green blue and purple.

119
00:08:43.310 --> 00:08:45.760
So why did those styles win out.

120
00:08:45.890 --> 00:08:47.600
Where if I refresh the page.

121
00:08:47.600 --> 00:08:52.600
Well I have two comments out this code before they already had a color.

122
00:08:52.670 --> 00:08:57.890
Some of them based off of a class and a class is relatively specific right.

123
00:08:57.890 --> 00:08:59.320
Why did these styles went out.

124
00:08:59.330 --> 00:09:01.700
When I changed the color there was a conflict.

125
00:09:01.700 --> 00:09:03.600
This is teal and I made it red.

126
00:09:03.620 --> 00:09:05.010
Why did Red win.

127
00:09:05.030 --> 00:09:07.740
Remember this is all inline styles.

128
00:09:07.760 --> 00:09:11.700
And anytime you do inline styles it is extremely specific.

129
00:09:11.720 --> 00:09:18.550
It's actually added to the element itself as we've seen like we have here and that is going to win out.

130
00:09:18.560 --> 00:09:22.640
It's going to beat any class declaration you have for any class styles.

131
00:09:22.730 --> 00:09:25.240
So that's why those styles end up applying.

132
00:09:25.250 --> 00:09:25.490
All right.

133
00:09:25.550 --> 00:09:29.210
So that's the style property every element that we select.

134
00:09:29.240 --> 00:09:36.230
We can read existing inline styles only using the style property but we can set any properties or any

135
00:09:36.230 --> 00:09:39.860
styles that we want as long as we use the correct camel case when applicable.

136
00:09:40.370 --> 00:09:43.130
And it will actually add an inline style.

137
00:09:43.130 --> 00:09:48.050
So it's not changing our style sheet in any way it's just inserting an inline style declaration into

138
00:09:48.050 --> 00:09:50.190
the individual element already.
