1
00:00:01,110 --> 00:00:01,580
Okay.

2
00:00:01,650 --> 00:00:03,440
Our class timer's looking pretty good.

3
00:00:03,570 --> 00:00:06,540
Believe it or not our start in paws methods are just about complete.

4
00:00:06,540 --> 00:00:11,040
We're not going to really add any additional code to them so we're not going to start to focus our attention

5
00:00:11,100 --> 00:00:12,990
on the tick method right here.

6
00:00:12,990 --> 00:00:17,880
Remember the tick method is going to run once every second because we set up the interval to call it

7
00:00:17,910 --> 00:00:23,670
once every 1000 milliseconds the inside of the tick method we're going to start to want to figure out

8
00:00:23,700 --> 00:00:26,070
what we want to do every second.

9
00:00:26,640 --> 00:00:29,570
I think that every second there's probably would be a pretty obvious thing we want to do.

10
00:00:29,670 --> 00:00:34,830
We probably are going to want to reach into the DOM find whatever the current time is right there and

11
00:00:34,830 --> 00:00:36,560
subtract one from it.

12
00:00:36,630 --> 00:00:41,190
So if we start off with 18 seconds and then that tick method runs we'll probably want to decrease it

13
00:00:41,190 --> 00:00:45,860
down to 17 then 16 15 14 13 and so on.

14
00:00:45,960 --> 00:00:50,520
I want to remind you really quickly that this input or this element right here that's going to display

15
00:00:50,520 --> 00:00:55,560
the current time is actually going to be a kind of invisible text input.

16
00:00:55,590 --> 00:01:00,690
The reason we're making it a text input is that a user can very easily reach inside there and change

17
00:01:00,780 --> 00:01:06,090
the current time or the duration of the timer so they could enter and three hundred and then hit play

18
00:01:06,570 --> 00:01:11,470
and that would count down our timer from 300 seconds.

19
00:01:11,480 --> 00:01:15,650
Now in this video I want to focus on a really interesting question.

20
00:01:15,710 --> 00:01:22,030
Well at least it's interesting to me I suppose the question I want to focus on is inside the tick method.

21
00:01:22,190 --> 00:01:26,380
We clearly at some point in time are going to have to write some code that looks like this.

22
00:01:26,390 --> 00:01:27,560
This is gonna be pseudocode.

23
00:01:27,560 --> 00:01:29,930
Don't write this just a quick example.

24
00:01:29,990 --> 00:01:35,960
So we're definitely going to have to write out something like time remaining is time remaining minus

25
00:01:35,960 --> 00:01:36,940
one.

26
00:01:36,950 --> 00:01:40,860
Something like this to countdown our timer from whatever the current time is.

27
00:01:40,880 --> 00:01:46,800
Subtract one second and then update the variable or the value of time remaining so we're going to write

28
00:01:46,800 --> 00:01:48,450
out a line of code that looks like that.

29
00:01:48,540 --> 00:01:52,670
But here's the interesting question and this is what I want to explore in this video.

30
00:01:52,770 --> 00:01:56,480
Where does the variable time remaining live.

31
00:01:56,580 --> 00:02:03,690
In other words where is this data actually being stored there's two kind of obvious or different ways

32
00:02:03,690 --> 00:02:04,930
we can solve that.

33
00:02:04,950 --> 00:02:09,270
Let's take a look at a diagram and understand that two different places that we can store the information

34
00:02:09,330 --> 00:02:16,190
about how much time is remaining on our timer so the first way is kind of slightly more obvious one

35
00:02:16,190 --> 00:02:21,050
I think and this is where if I would like really grilled you and asked you to figure this out this is

36
00:02:21,050 --> 00:02:23,070
probably what you might come up with.

37
00:02:23,120 --> 00:02:29,120
So an option number one in deciding where to store the time left on our timer we might decide to create

38
00:02:29,120 --> 00:02:34,000
an instance variable on our timer instance called something like time left.

39
00:02:34,250 --> 00:02:39,380
Then every single time that tick method ran we could subtract one from that value and then take that

40
00:02:39,380 --> 00:02:44,290
value and update our text or submit our input element with it.

41
00:02:44,300 --> 00:02:49,820
So in other words when we run it tick We'll count down twenty nine to twenty eight then take the value

42
00:02:49,820 --> 00:02:55,780
of twenty eight and throw it into the input element does some code that looks like that might look like

43
00:02:55,780 --> 00:02:56,080
this.

44
00:02:56,080 --> 00:02:57,150
I'm going to very quickly write it.

45
00:02:57,160 --> 00:03:00,850
I am going to delete this code very quickly so you don't have to write this as well.

46
00:03:00,850 --> 00:03:06,490
So he might write out inside a constructor something like this dot time left equals thirty.

47
00:03:06,610 --> 00:03:11,980
So whenever we create a class or a instance of timer our default value for time left will be 30 representing

48
00:03:11,980 --> 00:03:15,040
30 seconds that inside of tick.

49
00:03:15,120 --> 00:03:21,660
We could do something like this dot Time left is this dot time left minus one and then we could do something

50
00:03:21,660 --> 00:03:25,560
like take our input element remember we've got a reference to it right there.

51
00:03:25,560 --> 00:03:34,410
Duration input so we could say this dot duration input dot value is this dot time left.

52
00:03:34,540 --> 00:03:40,180
So again take the current time subtract one from it then take that value and throw it into the duration

53
00:03:40,210 --> 00:03:44,610
input and I would update the text on the screen.

54
00:03:44,610 --> 00:03:47,860
So this is a definitely way that works without a doubt.

55
00:03:47,880 --> 00:03:49,660
This is a method that works.

56
00:03:49,740 --> 00:03:53,790
I'm going to delete this code really quickly and we're gonna take a look at option number two for where

57
00:03:53,790 --> 00:04:02,260
we stored this data so in option number two we're going to kind of invert this control flow rather than

58
00:04:02,260 --> 00:04:07,900
having our timer instance have seen some definition of what the time left is and stored inside the input

59
00:04:07,930 --> 00:04:09,720
element or update the input element.

60
00:04:09,820 --> 00:04:16,660
We're going to instead have the current time live inside of the input element so whatever the input

61
00:04:16,660 --> 00:04:20,500
elements value is that is the time remaining.

62
00:04:20,500 --> 00:04:25,210
And then at any time that our timer instance needs to know how much time is remaining it will reach

63
00:04:25,210 --> 00:04:27,250
into the input element.

64
00:04:27,250 --> 00:04:28,740
Figure out what the current value is.

65
00:04:28,780 --> 00:04:33,100
So we're going to essentially take the value out of that input element and bring it back over to our

66
00:04:33,100 --> 00:04:34,030
timer instance

67
00:04:37,610 --> 00:04:42,060
so why would we ever go with this approach right here approach number one seemed like it was kind of

68
00:04:42,050 --> 00:04:42,640
obvious.

69
00:04:42,640 --> 00:04:44,460
Of course we've got a timer instance.

70
00:04:44,560 --> 00:04:46,300
It's got some time left.

71
00:04:46,300 --> 00:04:50,680
It's an instance variable really easy to get at that value right away.

72
00:04:50,680 --> 00:04:53,380
So why would we ever use this approach right here.

73
00:04:53,380 --> 00:04:58,240
Well the reason that we might use this approach is that it makes some you X or some actual like interactions

74
00:04:58,240 --> 00:05:01,350
with the user a little bit easier to handle.

75
00:05:01,480 --> 00:05:07,840
Remember at some point in time we want the user to be able to type in a new text value inside this input

76
00:05:07,840 --> 00:05:08,400
right here.

77
00:05:08,410 --> 00:05:12,540
So we want them to be able to click in there and type in like give me a timer that countdown counts

78
00:05:12,540 --> 00:05:14,030
down from 10.

79
00:05:14,110 --> 00:05:19,000
If we were storing all of our data inside of our class we would want to set up an event handler and

80
00:05:19,000 --> 00:05:22,310
watch for any time a user changes that value.

81
00:05:22,360 --> 00:05:27,940
So if user changes that from 300 down to 10 we would have to have an event listener that watches for

82
00:05:27,940 --> 00:05:30,850
a changed event on that input when that occurs.

83
00:05:30,940 --> 00:05:38,850
We would have to take that change value and go and update our time left but with this approach we don't

84
00:05:38,850 --> 00:05:44,670
have to worry about any event handlers at all on that input element because anytime you want to figure

85
00:05:44,670 --> 00:05:50,040
out what the current time remaining is we can just reach directly in get that value pull it back out

86
00:05:50,160 --> 00:05:56,010
and make use of it inside of our timer instance and that's sounds like a very small and simple thing

87
00:05:56,040 --> 00:06:00,330
but I just want to suggest that's maybe one reason that we would want to just have our timer instance

88
00:06:00,540 --> 00:06:04,770
store the value or the time remaining inside of that input element.

89
00:06:04,770 --> 00:06:09,330
There are going to be some other interactions that get a little bit easier as well when we start to

90
00:06:09,330 --> 00:06:13,710
take this approach is in this approach but they're not going to be quite as obvious until we get a little

91
00:06:13,710 --> 00:06:18,640
bit further along with this application now just at a higher level.

92
00:06:18,670 --> 00:06:23,500
I want to mentioned that option number two we refer to this as storing our data inside of our dom.

93
00:06:23,560 --> 00:06:28,150
So our application has some like critical data that is required to make it work correctly and we are

94
00:06:28,150 --> 00:06:34,060
storing that data inside of different dom elements with option number one we're storing all of our data

95
00:06:34,090 --> 00:06:35,830
inside of our javascript code.

96
00:06:35,890 --> 00:06:37,620
So we've got a job skip class right here.

97
00:06:37,840 --> 00:06:42,870
That class or that instance of the class has the data that is critical to making our application work

98
00:06:43,980 --> 00:06:44,090
now.

99
00:06:44,130 --> 00:06:47,280
Option number one is a little bit more popular these days.

100
00:06:47,280 --> 00:06:47,630
All right.

101
00:06:47,640 --> 00:06:51,620
To be totally honest you option one is definitely more popular these days.

102
00:06:51,630 --> 00:06:54,110
Option number two used to be really popular.

103
00:06:54,120 --> 00:06:58,530
So like years ago this used to be the way that we wrote javascript applications but it's definitely

104
00:06:58,530 --> 00:07:00,180
pivoted towards option number one.

105
00:07:00,210 --> 00:07:01,420
More recently.

106
00:07:01,680 --> 00:07:05,230
Having said that we're going to use Option number two inside this application.

107
00:07:05,310 --> 00:07:09,940
And the reason for that is I want you to see what this approach looks like.

108
00:07:09,960 --> 00:07:11,580
I want you to see some of the downsides.

109
00:07:11,580 --> 00:07:16,620
I want you to understand why we used to write code like this as javascript engineers years ago and why

110
00:07:16,620 --> 00:07:23,550
we now instead use Option number one and stored data inside of our javascript code instead Dawn sorry

111
00:07:23,550 --> 00:07:29,340
to kind of show you not the most modern or like technically correct way to do this stuff or what's really

112
00:07:29,340 --> 00:07:34,080
popular right now but again it is important for you to understand why we take one approach over the

113
00:07:34,080 --> 00:07:39,270
other hand the easiest way to do that is to write out the code in that older approach so you can see

114
00:07:39,270 --> 00:07:43,030
some of the problems that start to arise.

115
00:07:43,070 --> 00:07:43,970
So it's all in the mind.

116
00:07:44,210 --> 00:07:45,450
Let's take a quick pause right here.

117
00:07:45,500 --> 00:07:49,100
When we come back the next video we're going to start to update our class and make sure that it can

118
00:07:49,100 --> 00:07:54,140
very easily read some data out of that input element to figure out how many seconds are left on our

119
00:07:54,140 --> 00:08:00,170
timer and then make sure that whenever our tick method gets called we're going to update the value of

120
00:08:00,170 --> 00:08:02,910
that input element and subtract one from it.

121
00:08:03,110 --> 00:08:05,940
So quick pause right here and I'll see you in just a minute.
