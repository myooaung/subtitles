WEBVTT
1
00:00:01.060 --> 00:00:05.170
In this video we're going to figure out how we can take some string that the user enters like my secret

2
00:00:05.170 --> 00:00:11.610
message and turn it into a seemingly random string of characters like what you see over here so we're

3
00:00:11.610 --> 00:00:16.060
going to use a encryption methodology called base64 encoding.

4
00:00:16.350 --> 00:00:20.610
In this video I want to tell you a little bit more about how base64 encoding works.

5
00:00:20.610 --> 00:00:24.150
You don't really need to know the behind the scenes stuff to understand this because at the end of the

6
00:00:24.150 --> 00:00:29.540
day we're going to use a function built into javascript to do this conversion process for us.

7
00:00:29.610 --> 00:00:33.840
Nonetheless I thought you might be kind of curious about how all this stuff actually works.

8
00:00:33.840 --> 00:00:39.300
So to understand how this encoding works I want to imagine or walk through the process really of how

9
00:00:39.300 --> 00:00:43.390
we would encode the characters s e c like so.

10
00:00:43.410 --> 00:00:45.990
So like really short for secret message.

11
00:00:45.990 --> 00:00:49.990
But I want to just think about the first three characters alone.

12
00:00:50.220 --> 00:00:50.850
That's the goal.

13
00:00:52.010 --> 00:00:53.690
Now is a little bit of backstory.

14
00:00:53.790 --> 00:00:56.640
I you understand two important concepts here.

15
00:00:56.690 --> 00:01:01.100
There are two sets of character codes that we're going to use to encrypt that string.

16
00:01:01.100 --> 00:01:06.970
The first one you need to be aware of is the ASCII character code set to the ASCII character code set.

17
00:01:06.980 --> 00:01:14.510
Essentially is saying that the characters lowercase a ze capital A3 Zi 0 9 and a couple of other special

18
00:01:14.510 --> 00:01:20.150
characters can be represented with the decimal value from 0 to 127.

19
00:01:20.150 --> 00:01:24.370
So let me show you a chart that can help you understand what that's really saying.

20
00:01:24.400 --> 00:01:27.190
This right here is an ASCII at character table.

21
00:01:27.190 --> 00:01:32.260
So it's essentially telling us that all these different characters that you see in red have a number

22
00:01:32.320 --> 00:01:39.860
representation we can use to refer to each specific character for example the letter S which we said

23
00:01:39.860 --> 00:01:51.450
we want to encode has an ASCII representation of 1 1 5 lowercase e is 1 to 1 and c is ninety nine likewise

24
00:01:51.570 --> 00:01:57.080
there is also a set of character codes referred to as the base64 character codes.

25
00:01:57.180 --> 00:02:02.540
So this is essentially saying something similar but it's for very much for your characters.

26
00:02:02.610 --> 00:02:08.940
So the characters lowercase A3 Zi capital A3 and 0 through 9 can be represented with a decimal value

27
00:02:08.940 --> 00:02:10.030
as well.

28
00:02:10.300 --> 00:02:14.790
So the those character codes are essentially from this table right here.

29
00:02:14.790 --> 00:02:22.510
So it's more or less saying that the letter S has a character code of 44 capital a zero and so on so

30
00:02:22.550 --> 00:02:28.730
when we talk about and coding a string using a base64 encoding we're really talking about is essentially

31
00:02:28.730 --> 00:02:36.020
taking the ASCII character code representation of a string like the letters S.E.C. getting the numbers

32
00:02:36.050 --> 00:02:42.450
that represent each character and somehow converting them into the base64 standard and then taking all

33
00:02:42.470 --> 00:02:47.990
those numbers and returning them back to their original character forms like the letter A B C D and

34
00:02:47.990 --> 00:02:48.910
so on.

35
00:02:49.220 --> 00:02:54.080
The thing that makes this process all that tricky is the fact that ASCII character codes can span from

36
00:02:54.140 --> 00:03:00.500
0 to 127 but base64 character codes can span from zero to sixty three.

37
00:03:00.500 --> 00:03:05.640
So in order to make these two conversions kind of work together we end up using a little bit of a trick.

38
00:03:05.660 --> 00:03:10.730
Let me walk you through exactly what that trick is so we're going to understand this conversion process

39
00:03:10.850 --> 00:03:17.940
step by step that we first start off with the letters S E and C again that is the character sequence

40
00:03:17.940 --> 00:03:24.190
that we're going to imagine how it gets translated do we start off with the ASCII character representation

41
00:03:24.880 --> 00:03:28.980
and then we convert each of those into their respective character codes.

42
00:03:29.140 --> 00:03:32.390
So we get 1 1 5 1 2 1 and ninety nine.

43
00:03:32.510 --> 00:03:38.090
We then take those numbers and convert them to their eight digit binary representation.

44
00:03:38.090 --> 00:03:43.700
So these are like the ones and zeros that we talk about when we imagine the very base or core level

45
00:03:43.700 --> 00:03:45.000
of computer programming.

46
00:03:45.020 --> 00:03:49.100
So each number it gets converted into a binary representation.

47
00:03:49.320 --> 00:03:54.990
You can double check these numbers by just going online and doing a Google search for decimal to binary.

48
00:03:54.990 --> 00:03:59.880
So for example if I wanted to convert 1 1 5 I could pull up a calculator like the one you see right

49
00:03:59.880 --> 00:04:05.430
here put in 1 1 5 and I get out 0 1 1 1 0 0 1 1

50
00:04:08.650 --> 00:04:13.300
now the thing to keep in mind here or noticed is that each of these numbers get converted into an eight

51
00:04:13.300 --> 00:04:19.480
digit binary representation for the next year we're going to do is take each of those eight digit representations

52
00:04:19.570 --> 00:04:25.870
and join all them together and we end up with a twenty four digit of all those numbers joined together

53
00:04:25.960 --> 00:04:29.370
in series then after that.

54
00:04:29.370 --> 00:04:35.520
This is where we start to do the conversion process over to the base 64 world so we're gonna take that

55
00:04:35.700 --> 00:04:41.310
string of twenty four digits and split them out into groups of six characters.

56
00:04:41.490 --> 00:04:48.730
So we end up with four groups of six to take a look at each the binary codes here.

57
00:04:48.760 --> 00:04:50.850
Each of them are six characters.

58
00:04:50.950 --> 00:04:56.410
So here's the kind of conversion step we then take each of these binary strings convert them back into

59
00:04:56.410 --> 00:05:03.790
normal numbers and then for each of these binary strings right here we map them to the base 60 for table

60
00:05:04.810 --> 00:05:12.750
the big difference between the ascii table and the base64 one is to express the ascii table we've got

61
00:05:12.750 --> 00:05:19.710
the eight individual characters but base64 gets expressed with four characters or seeming six characters

62
00:05:19.710 --> 00:05:27.670
for each binary string so we take these groups of six characters and we reference each of those on that

63
00:05:27.670 --> 00:05:29.000
base64 table.

64
00:05:29.050 --> 00:05:33.130
So for example the 0 1 1 1 0 0.

65
00:05:33.460 --> 00:05:38.500
We can look that up on this table and there we go right there 0 1 1 1 0 0.

66
00:05:38.530 --> 00:05:43.720
We end up with a seed you then repeat that process for the next group of 6.

67
00:05:43.750 --> 00:05:52.650
So this one is 1 1 0 1 1 0 echo v over here we can see 1 1 0 1 1 0 for the number 2 and we repeat that

68
00:05:52.650 --> 00:05:54.600
process on and on.

69
00:05:54.600 --> 00:05:58.710
So we end up with the letters C to capital B and J.

70
00:05:58.890 --> 00:06:09.040
We then join those letters together and that is our base64 representation of the string s e c so that's

71
00:06:09.040 --> 00:06:09.540
pretty much it.

72
00:06:09.550 --> 00:06:14.140
That's how we're going to go from a string over to this kind of character encoding and that's how we're

73
00:06:14.140 --> 00:06:16.720
going to do the actual conversion process.

74
00:06:16.720 --> 00:06:20.590
Once again we don't have to do all this conversion on our own or by hand.

75
00:06:20.590 --> 00:06:25.360
Instead we're going to use a simple function that is built directly into javascript to do this conversion

76
00:06:25.360 --> 00:06:26.220
for us.

77
00:06:26.290 --> 00:06:30.780
Like I said I thought you might be curious about how all this stuff is actually working it's now that

78
00:06:30.780 --> 00:06:32.310
we've got a better idea of what's going on.

79
00:06:32.310 --> 00:06:35.970
We'll take a quick pause right here and start to do this conversion in the next video.
