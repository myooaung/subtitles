WEBVTT
1
00:00:00.210 --> 00:00:03.680
Next up we have a different type of scope called lexical scope.

2
00:00:03.690 --> 00:00:05.940
This one's pretty simple and straightforward.

3
00:00:06.090 --> 00:00:11.850
When we have nested functions which we sometimes do maybe not at this point with what we're writing

4
00:00:11.850 --> 00:00:13.240
but later on.

5
00:00:13.320 --> 00:00:17.190
And if you learn things like react you'll have nested functions all the time.

6
00:00:17.360 --> 00:00:22.470
If I have a nested function like the one I have here are the two functions I have outer and inside of

7
00:00:22.470 --> 00:00:22.590
it.

8
00:00:22.600 --> 00:00:28.470
I've defined another function called inner outer has a variable called hero.

9
00:00:28.710 --> 00:00:30.990
Hero is defined in this function.

10
00:00:30.990 --> 00:00:37.110
I don't have access to it outside of that function but if I am nested further in in a different function

11
00:00:37.380 --> 00:00:39.020
I still have access to hero.

12
00:00:39.750 --> 00:00:41.760
So I'll demonstrate this briefly.

13
00:00:41.760 --> 00:00:50.520
Let's make we'll just go with inner and outer so function outer and then we'll have function inner and

14
00:00:50.550 --> 00:00:58.800
in the outer function will declare a variable we'll call this movie equals day is great film great great

15
00:00:58.920 --> 00:01:09.540
great film and then in inner let's access movie let's console that log movie dot to uppercase

16
00:01:12.660 --> 00:01:20.130
so at this point how do I actually run inner if I run outer I'll run the code over here and I call outer

17
00:01:20.660 --> 00:01:26.370
it doesn't return anything all that it does is declare a variable and then we have a function declaration

18
00:01:26.970 --> 00:01:29.860
we're writing a function or declaring it but we're never calling it.

19
00:01:29.970 --> 00:01:39.330
So if I execute inner from inside outer let's try it again now it is successfully counseled that logging

20
00:01:39.540 --> 00:01:45.870
Amadeus in all caps movie was not defined in this function it was defined in its parent in the outer

21
00:01:45.870 --> 00:01:55.440
function right here secondary to this what if I tried to call inner from outside this function I don't

22
00:01:55.440 --> 00:02:01.950
have access to it it's just like I declared a variable instead of outer I declared a function it's called

23
00:02:01.970 --> 00:02:02.530
inner.

24
00:02:02.790 --> 00:02:09.900
I don't have access to it over here I only have access to it inside of outer unless I were to return

25
00:02:09.900 --> 00:02:12.250
the function which is something we'll see later on.

26
00:02:12.960 --> 00:02:17.750
So if I call inner from inside outer This is getting confusing with this.

27
00:02:18.000 --> 00:02:25.770
The naming here if I execute outer it declares a variable movie sets it's Amadeus it knows about a function

28
00:02:25.770 --> 00:02:30.110
we declare the function we define it here enter and then we call it.

29
00:02:30.780 --> 00:02:37.260
So when it's called it concerned that logs movie it does not have a movie defined in here so it will

30
00:02:37.260 --> 00:02:43.160
look for a different movie from the scope of the parent function which is called outer.

31
00:02:43.330 --> 00:02:49.110
So lexical scope refers to the fact that nested functions are like sickly bound they're bound to the

32
00:02:49.110 --> 00:02:54.510
scope of their parent or of their outer functions but it's a one way relationship it doesn't work the

33
00:02:54.510 --> 00:02:55.540
other way around.

34
00:02:55.560 --> 00:03:02.100
If I were to define a variable in here but X equals 10 I do not have access to X outside that function

35
00:03:02.250 --> 00:03:04.100
just like regular function scope.

36
00:03:04.110 --> 00:03:05.620
We've seen earlier on.

37
00:03:05.820 --> 00:03:10.710
If I run outer we get Amadeus from the inner function running.

38
00:03:10.710 --> 00:03:13.230
The variable is successfully declared in inner.

39
00:03:13.300 --> 00:03:15.070
But I don't have access to it out here.

40
00:03:15.090 --> 00:03:20.910
So a variable declared in one function is available to nested functions within it.

41
00:03:20.910 --> 00:03:27.510
And then finally if I were to declare movie in this function a different movie let's say movie equals

42
00:03:27.870 --> 00:03:29.780
what's another good movie.

43
00:03:29.790 --> 00:03:32.430
How about The Shining.

44
00:03:32.490 --> 00:03:36.900
What do you expect to happen here when we call inner from inside outer.

45
00:03:37.110 --> 00:03:44.010
So when I execute outer it will declare movie in the scope of this function called outer.

46
00:03:44.040 --> 00:03:49.290
Then we execute inner and inner defines its own version of movie called The Shining.

47
00:03:49.290 --> 00:03:50.350
That's the value.

48
00:03:50.400 --> 00:03:53.090
And then we're going to print movie out to uppercase.

49
00:03:53.130 --> 00:03:57.240
Which movie is printed the shining behind the scenes.

50
00:03:57.240 --> 00:04:02.730
The thought process if you want to think of it that way inside of this function is when we reference

51
00:04:02.730 --> 00:04:08.820
movie it's going to look to see is there a movie in this function is there a movie defined in this scope.

52
00:04:08.850 --> 00:04:11.280
If it doesn't find it it will look further up.

53
00:04:11.280 --> 00:04:13.180
Is there a movie defined up here.

54
00:04:13.380 --> 00:04:16.170
And if there is then it we'll use that.

55
00:04:16.170 --> 00:04:19.390
So we could go one level further as an example.

56
00:04:19.410 --> 00:04:25.320
So we'll have movie Amadeus movie The Shining and then in here I'll do another inner function.

57
00:04:25.320 --> 00:04:28.050
I'll call this one extra enter

58
00:04:30.900 --> 00:04:32.610
and we'll cancel that log.

59
00:04:32.610 --> 00:04:34.590
Movie out upper uppercase in here

60
00:04:37.330 --> 00:04:40.980
and I'll make sure I call extra enter.

61
00:04:41.050 --> 00:04:42.670
So this is a very weird pattern.

62
00:04:42.670 --> 00:04:46.420
What I'm doing right now but it illustrates the principles at play.

63
00:04:46.420 --> 00:04:52.570
So when I call outer we define movie to Amadeus in the scope of the outer function then we execute inner

64
00:04:53.150 --> 00:04:53.920
and inner.

65
00:04:53.950 --> 00:04:57.850
We define movie right here with the value of the shining.

66
00:04:57.850 --> 00:05:02.420
Then we execute extra inner extra inner does not have a movie defined inside.

67
00:05:02.500 --> 00:05:09.470
So it will look up to the nearest scope which is the inner function and use that value.

68
00:05:09.490 --> 00:05:13.560
So if I run outer we get the shining.

69
00:05:13.570 --> 00:05:16.700
If I were to comment this out we don't get an error.

70
00:05:16.810 --> 00:05:19.200
It just continues up past inner.

71
00:05:19.230 --> 00:05:25.530
It doesn't find movie so it looks up again does it find a movie there and it does.

72
00:05:25.530 --> 00:05:26.600
And that's pretty much it.

73
00:05:26.730 --> 00:05:31.560
When you have a nested function you have access to the variables declared in the scope of the parent

74
00:05:31.560 --> 00:05:32.060
function.

75
00:05:32.160 --> 00:05:35.870
And that continues down as many levels as you need to nest.

76
00:05:35.890 --> 00:05:38.880
This seems like it might be useless or not that useful.

77
00:05:38.880 --> 00:05:44.940
But as I mentioned if you use things like react later on you define functions that represent a component

78
00:05:44.970 --> 00:05:45.570
on your page.

79
00:05:45.570 --> 00:05:48.930
So you could have a function called to do list.

80
00:05:48.930 --> 00:05:55.320
And in that to do list component you might have different variables like let to DOS equals an array

81
00:05:55.620 --> 00:06:04.580
and let the user name equal something then you would have different functions for that to do list you

82
00:06:04.580 --> 00:06:08.170
would might have one called add to do.

83
00:06:08.340 --> 00:06:14.160
I can spell to do you might have another one called removed to do and another one called update to do

84
00:06:14.550 --> 00:06:19.220
and they might use to dos and use your name in their function bodies.

85
00:06:19.260 --> 00:06:25.080
So we're grouping it all together into a To Do List function because that's what react once but we still

86
00:06:25.080 --> 00:06:31.410
break up our code our functionality into smaller pieces and we have access to those variables declared

87
00:06:31.620 --> 00:06:33.960
in the outer function.

88
00:06:33.960 --> 00:06:35.880
Okay so that's lexical scope.
