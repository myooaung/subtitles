WEBVTT
1
00:00:01.010 --> 00:00:04.390
Let's continue working on our autocomplete inputs at this point.

2
00:00:04.400 --> 00:00:08.050
We are calling fetch data inside of the on input function.

3
00:00:08.060 --> 00:00:11.330
Let's make sure that we return some usable data from that data.

4
00:00:11.570 --> 00:00:14.930
Once we get some usable data back we'll then make sure that we iterate over it.

5
00:00:14.960 --> 00:00:19.160
And for every movie we fetch we'll try to render out some content onto the screen.

6
00:00:19.160 --> 00:00:24.340
After that we'll then start to think about how we can select a video and by actually clicking on it.

7
00:00:24.670 --> 00:00:27.350
Let's make sure that we actually get some data back from batch data.

8
00:00:27.350 --> 00:00:29.710
Let's take a look at the fetch data implementation.

9
00:00:29.780 --> 00:00:34.580
Here it is right here right now at the very end of the function we're just console logging out our data

10
00:00:34.910 --> 00:00:36.350
which is not very useful.

11
00:00:36.350 --> 00:00:41.180
Instead we should probably return all the data that we have fetched but more importantly we need to

12
00:00:41.180 --> 00:00:45.700
make sure that we only return the actual real data that we care about.

13
00:00:45.710 --> 00:00:47.370
Let me show you what I mean by that.

14
00:00:47.610 --> 00:00:54.330
If I go backwards my browser right now and do another search I'm going to see a console log of all the

15
00:00:54.330 --> 00:00:57.260
data that we get back inside of our request.

16
00:00:57.270 --> 00:01:00.030
So this is the console dot data property.

17
00:01:00.210 --> 00:01:03.570
It is an object that has a search property inside of it.

18
00:01:03.570 --> 00:01:05.340
That is an array of objects.

19
00:01:05.460 --> 00:01:08.640
So you and I don't really care about the response property.

20
00:01:08.670 --> 00:01:10.680
We don't really care about total results.

21
00:01:10.680 --> 00:01:14.140
All you and I really care about is the search property.

22
00:01:14.160 --> 00:01:20.550
So from that fetch data we should really only be returning the search property and nothing else.

23
00:01:20.590 --> 00:01:24.230
So I'm going to go back over to find fetch data.

24
00:01:24.350 --> 00:01:32.120
I'm going to remove that console log and I will replace it with return response dot data dot search

25
00:01:33.040 --> 00:01:35.300
and some using a capital S right here.

26
00:01:35.300 --> 00:01:38.360
That is definitely not standard usually in JavaScript.

27
00:01:38.360 --> 00:01:42.570
We always have every variable proceeding with a lowercase letter like so.

28
00:01:42.830 --> 00:01:47.260
The only reason I'm using an uppercase as right here is that the response that we actually get back

29
00:01:47.260 --> 00:01:52.760
in this API has a capital S in it and that's actually true with many of the different properties that

30
00:01:52.760 --> 00:01:57.750
we're going to see coming back from the API this is very much non-standard in nature.

31
00:01:57.890 --> 00:02:04.170
So it is way more standard on any API to see all these different property names with lowercase letters.

32
00:02:04.190 --> 00:02:09.190
So in general you should expect to see lowercase letters at the start of every property name.

33
00:02:09.260 --> 00:02:14.350
It just happens that this API author decided to use uppercase instead.

34
00:02:14.390 --> 00:02:20.810
So unfortunately we have to follow that same convention at some locations inside of our code okay.

35
00:02:20.840 --> 00:02:26.660
So now whenever we call batch data we're going to get back our array of different movies we fetched

36
00:02:27.140 --> 00:02:28.610
to inside of an input.

37
00:02:28.700 --> 00:02:33.690
Let's make sure that we take whatever comes out of that data and assign it to a variable.

38
00:02:33.840 --> 00:02:41.340
So let's say const movies is much data and then right after that we'll do another console log of movies

39
00:02:42.790 --> 00:02:46.100
if we save this and run it we're going to very quickly see something unexpected.

40
00:02:46.120 --> 00:02:48.730
So of course let's do that right away.

41
00:02:48.730 --> 00:02:52.250
I'll flip back over refresh I'll run it again.

42
00:02:52.300 --> 00:02:54.650
Now I see a console log of a promise.

43
00:02:54.670 --> 00:02:56.040
So what's going on here.

44
00:02:56.050 --> 00:03:00.870
I'm seeing a promise instead of an array of movies which is what I kind of expected to see.

45
00:03:00.940 --> 00:03:04.060
Well remember fetch data is an async function.

46
00:03:04.060 --> 00:03:06.040
We marked it with the async keyword.

47
00:03:06.040 --> 00:03:10.870
So whenever we call fetch data it's going to take some amount of time to actually process this request

48
00:03:11.230 --> 00:03:14.610
and then eventually return the data that we get back.

49
00:03:14.710 --> 00:03:19.550
Right now when we call fetch data we are treating it as though it were a synchronous function.

50
00:03:19.630 --> 00:03:25.360
So if we want to somehow wait on fetch data to actually get some data and get access to the response

51
00:03:25.750 --> 00:03:28.720
we have to treat it as though it were in async function.

52
00:03:28.760 --> 00:03:31.930
So in other words we need to put the await keyword right in front of it.

53
00:03:32.610 --> 00:03:37.780
And now because we are using the awake keyword inside the on input function we have to mark that function

54
00:03:37.870 --> 00:03:39.740
as being async as well.

55
00:03:42.100 --> 00:03:42.320
OK.

56
00:03:42.360 --> 00:03:47.600
So let's save this and try to run it again I refresh and put in Avengers.

57
00:03:47.660 --> 00:03:50.420
Now I can see it my list of different movies being printed out.

58
00:03:50.890 --> 00:03:51.160
OK.

59
00:03:51.180 --> 00:03:53.030
So that's definitely better.

60
00:03:53.060 --> 00:03:55.520
All right now though we've got our data inside of an input.

61
00:03:55.520 --> 00:03:57.790
Let's take another quick pause when we come back the next video.

62
00:03:57.800 --> 00:04:02.320
We're going to start to iterate over our list of movies and turning each one into a snippet of HD PML

63
00:04:02.600 --> 00:04:04.310
and then throw it onto our document.
