WEBVTT
1
00:00:00.270 --> 00:00:07.320
Lastly to end this section on functions and function adjacent content we have kind of a quirk of JavaScript

2
00:00:07.380 --> 00:00:09.220
something called hoisting.

3
00:00:09.330 --> 00:00:12.990
It does have to do with functions but it's also not crucial.

4
00:00:13.020 --> 00:00:16.140
It's not something that you need to stress about or worry about.

5
00:00:16.140 --> 00:00:19.950
If you're having trouble understanding but I do need to show it to you.

6
00:00:19.980 --> 00:00:22.050
So here we go.

7
00:00:22.050 --> 00:00:26.610
What do you think happens if I have a variable I'll declare it with var first.

8
00:00:26.610 --> 00:00:28.410
Var animal.

9
00:00:28.410 --> 00:00:33.100
And I'll set it equal to what a good animal a tapir.

10
00:00:33.120 --> 00:00:37.080
And then I control that log animal.

11
00:00:37.110 --> 00:00:39.110
This probably is obvious.

12
00:00:39.120 --> 00:00:42.040
Hopefully if I run this code it prints it out.

13
00:00:42.450 --> 00:00:45.370
But what if I switch the order up.

14
00:00:45.390 --> 00:00:48.750
What if I try and print animal first.

15
00:00:48.750 --> 00:00:53.670
What do you expect to see I get undefined.

16
00:00:53.900 --> 00:01:00.050
That may or may not have been what you expected but if I comment this out What do you expect to see.

17
00:01:00.160 --> 00:01:01.720
Consider log animal.

18
00:01:01.790 --> 00:01:03.570
It doesn't exist.

19
00:01:03.980 --> 00:01:05.000
So we get an error.

20
00:01:05.000 --> 00:01:06.660
Animal is not defined.

21
00:01:07.010 --> 00:01:13.310
But when I declare it after the fact at this point animal should still be undeclared right.

22
00:01:13.310 --> 00:01:16.780
I should still get this error but I don't.

23
00:01:16.910 --> 00:01:20.400
It tells me undefined remember that variables.

24
00:01:20.420 --> 00:01:23.630
When we declare them but don't initialize them.

25
00:01:23.630 --> 00:01:31.420
For example var x and I don't give it a value X is set to undefined.

26
00:01:31.410 --> 00:01:36.350
Now what's happening here that is leading to this weird behavior is called hoisting.

27
00:01:36.350 --> 00:01:42.620
When javascript is interpreting the code what happens is that it hoists up I'm doing air quotes but

28
00:01:42.620 --> 00:01:43.470
you can't see it.

29
00:01:43.550 --> 00:01:46.610
It hoist up the variable declaration.

30
00:01:46.610 --> 00:01:48.260
This part right here.

31
00:01:48.560 --> 00:01:54.860
It doesn't actually move it in your code it doesn't reorganize your code but it runs this part first.

32
00:01:54.890 --> 00:01:56.370
Var animal.

33
00:01:56.660 --> 00:01:59.900
And then you can think of it as doing this after the fact.

34
00:01:59.900 --> 00:02:02.150
So it starts with var animal.

35
00:02:02.150 --> 00:02:04.170
So animal has a value of undefined.

36
00:02:04.280 --> 00:02:11.250
Then we cancel that log animal which gives us undefined and then finally animal is set to taper.

37
00:02:11.360 --> 00:02:15.150
So if I run this code we get undefined and then tapir.

38
00:02:15.200 --> 00:02:17.480
But that wasn't the code we had written of course.

39
00:02:17.480 --> 00:02:26.010
This was the code but we'll still get the same output undefined taper so this behavior is called hoisting

40
00:02:26.070 --> 00:02:29.850
or JavaScript is going to see a var declaration.

41
00:02:29.850 --> 00:02:34.860
It will run this first and then later will fill the value with taper.

42
00:02:34.860 --> 00:02:37.050
Now this is an odd behavior.

43
00:02:37.050 --> 00:02:42.330
It's probably not something you would ever want to happen if you're trying to print animal out.

44
00:02:42.330 --> 00:02:48.660
You probably want animal to be defined and have a value so to avoid it you just want to make sure you're

45
00:02:48.660 --> 00:02:54.840
always declaring your variables before you use them declaring and initializing them before you do anything

46
00:02:54.840 --> 00:02:55.650
with them.

47
00:02:55.680 --> 00:02:57.210
So that is var.

48
00:02:57.300 --> 00:03:01.820
Now let's compare let in const can probably tell where I'm going with this.

49
00:03:01.890 --> 00:03:07.020
Let's make a variable and instead of animal let's go with shrimp.

50
00:03:07.020 --> 00:03:09.990
Shrimp will be set to Harlequin shrimp.

51
00:03:09.990 --> 00:03:12.650
Very very pretty species of shrimp.

52
00:03:12.660 --> 00:03:14.460
You can google that.

53
00:03:14.460 --> 00:03:19.530
I wanted one as a pet for a long time until I learned the only food they eat is a starfish and they

54
00:03:19.530 --> 00:03:24.810
keep a starfish alive and just keep eating its legs and then letting it regrow and eating more likes.

55
00:03:24.840 --> 00:03:28.220
It's very very harsh reality for the starfish anyway.

56
00:03:28.260 --> 00:03:35.140
If we console that lug shrimp here we probably expect to see Harlequin shrimp.

57
00:03:35.250 --> 00:03:39.980
But if I do the same thing I did with the bar where I put the constant log first.

58
00:03:40.050 --> 00:03:43.120
What happens we get something different.

59
00:03:43.120 --> 00:03:50.240
It tells us reference error cannot access shrimp before initialization so variable declarations made

60
00:03:50.240 --> 00:03:55.200
with light are not hoisted like they were with var declarations.

61
00:03:55.360 --> 00:03:57.790
And that's one of the main reasons that we use.

62
00:03:58.130 --> 00:04:03.730
Aside from block scope as well so it is very different than var two different ways of making variables.

63
00:04:03.740 --> 00:04:06.860
But clearly they behave differently.

64
00:04:06.860 --> 00:04:09.270
So when you declare variable let it's not hoisted.

65
00:04:09.350 --> 00:04:15.440
We can not access it before we actually run this code before this variable exists which makes sense.

66
00:04:15.440 --> 00:04:17.740
That's how the language should work right.

67
00:04:17.750 --> 00:04:22.040
We wouldn't want that to happen if we are trying to console not like shrimp.

68
00:04:22.160 --> 00:04:27.950
We expect shrimp to be a thing or we expect to get an error saying shrimp is not a thing unlike what

69
00:04:27.950 --> 00:04:34.490
happened here where we could console that log animal before we actually gave it a value.

70
00:04:34.580 --> 00:04:38.380
Javascript knew it existed even though we hadn't hit that line yet.

71
00:04:38.600 --> 00:04:40.700
Which is weird it's bizarre.

72
00:04:40.700 --> 00:04:45.820
Now if I do the same thing with const instead of let me get the same behavior.

73
00:04:46.160 --> 00:04:48.390
So letting const are not hoisted.

74
00:04:48.710 --> 00:04:53.130
Now this brings us to functions with functions.

75
00:04:53.150 --> 00:05:05.310
We write a function declaration like function Howell which will console that log out something like

76
00:05:05.310 --> 00:05:06.100
that.

77
00:05:06.390 --> 00:05:08.720
If I call how after the fact.

78
00:05:08.730 --> 00:05:09.690
Clearly it works.

79
00:05:09.690 --> 00:05:11.640
We've done that a million times.

80
00:05:11.640 --> 00:05:18.180
But if I call Howell before what do you think happened it still works.

81
00:05:18.180 --> 00:05:23.250
So functions at least function declarations that we have here a function statement.

82
00:05:23.250 --> 00:05:24.900
Those are hoisted.

83
00:05:24.900 --> 00:05:30.450
You can think of them as being put at the top of your file so all the way up to the top.

84
00:05:30.450 --> 00:05:33.350
Actually that's not actually happening.

85
00:05:33.480 --> 00:05:39.450
It's just the javascript interpreter is running across these lines it's processing these lines first

86
00:05:40.650 --> 00:05:44.630
so that we can call Howell which is also unexpected.

87
00:05:44.640 --> 00:05:50.430
What's interesting is that if we instead write our function using a function expression so I'll declare

88
00:05:50.430 --> 00:05:53.280
a variable I can use var or I could use it.

89
00:05:53.550 --> 00:06:01.260
I'll do var let's do a function called Hoot and it will consider that.

90
00:06:01.670 --> 00:06:04.660
Hoo hoo.

91
00:06:05.210 --> 00:06:06.830
I'll call who down below.

92
00:06:06.860 --> 00:06:08.630
We know that works.

93
00:06:09.050 --> 00:06:14.140
If I try and call who first this time it doesn't work.

94
00:06:14.390 --> 00:06:15.890
Why does not work.

95
00:06:15.980 --> 00:06:17.600
We're using a different type of function.

96
00:06:17.600 --> 00:06:19.790
This is a function expression.

97
00:06:19.790 --> 00:06:23.520
These aren't hoisted although it's not entirely true.

98
00:06:23.630 --> 00:06:26.450
The variable hoot does exist.

99
00:06:26.450 --> 00:06:28.550
If I were to console that log who'd

100
00:06:32.300 --> 00:06:35.170
it exists but it's not a function.

101
00:06:35.190 --> 00:06:35.570
Whoops.

102
00:06:35.600 --> 00:06:37.790
Get rid of those parents.

103
00:06:38.360 --> 00:06:40.790
And now if I counted that log we get undefined.

104
00:06:40.790 --> 00:06:43.850
It's the same thing we saw up here with animal.

105
00:06:44.150 --> 00:06:50.270
This variable declaration is hoisted up javascript knows there's a variable called Hoot but it doesn't

106
00:06:50.270 --> 00:06:52.840
know the value so it sets it to undefined.

107
00:06:52.880 --> 00:07:00.590
So if I try and execute it with parentheses it's trying to call undefined which you can't do.

108
00:07:00.830 --> 00:07:02.210
So the variable is hoisted.

109
00:07:02.240 --> 00:07:03.710
The value is not.

110
00:07:03.710 --> 00:07:11.870
And if I instead did let we get a different error with it because this variable declaration is not hoisted

111
00:07:12.140 --> 00:07:19.130
just like shrimp poison or whatever we did for but that was not hoisted and because restoring this function

112
00:07:19.130 --> 00:07:22.800
in the variable declared with it it's not hoisted at all.

113
00:07:22.850 --> 00:07:28.590
So we get this error saying you cannot use that function before it's declared you can't access hoot

114
00:07:28.640 --> 00:07:31.330
before it exists which makes sense.

115
00:07:31.340 --> 00:07:38.510
You shouldn't be able to do that but you can with function declarations and when you use var so that's

116
00:07:38.510 --> 00:07:39.620
hoisting.

117
00:07:39.620 --> 00:07:44.960
It's not the highest stakes Super important thing that you have to understand before you move on but

118
00:07:44.960 --> 00:07:51.410
it's kind of an interesting quirk of JavaScript and letting const exist to remedy some of these unexpected

119
00:07:51.410 --> 00:07:57.340
consequences that would happen with var where you could write code that seems like it shouldn't work.

120
00:07:57.350 --> 00:08:00.400
Maybe you wrote it in error and it didn't throw an error.

121
00:08:00.410 --> 00:08:06.890
Instead it treated the variable as undefined and it could be confusing it can lead to issues so definitely

122
00:08:06.980 --> 00:08:10.820
use the button concept but it's good to be aware of this weird hoisting thing.
