WEBVTT
1
00:00:00.180 --> 00:00:05.610
There's one more place you'll often see restructuring used which is inside of a function definition

2
00:00:05.970 --> 00:00:07.860
where the parameters are listed.

3
00:00:08.130 --> 00:00:14.040
We can use the syntax the same de structuring syntax we've seen to destructor an array or an object

4
00:00:14.250 --> 00:00:21.090
but if we put it inside the parentheses of a function definition what this will do is extract or unpack

5
00:00:21.090 --> 00:00:23.920
values from the arguments passed in.

6
00:00:23.940 --> 00:00:30.300
So what I'm doing here is saying I'm expecting full name to be passed an object hence the curly braces

7
00:00:30.660 --> 00:00:33.210
and I only really care about first and last.

8
00:00:33.210 --> 00:00:38.520
So the objects could contain a whole bunch of other things but I'm only going to extract first and last

9
00:00:38.760 --> 00:00:39.730
and use them.

10
00:00:39.780 --> 00:00:45.630
So let's try it out we'll define a function we can use an arrow function a regular function expression

11
00:00:45.690 --> 00:00:46.680
function declaration.

12
00:00:46.680 --> 00:00:47.790
It doesn't matter.

13
00:00:47.790 --> 00:00:51.120
Let's go with function prints.

14
00:00:51.150 --> 00:00:59.960
How about just print in rather than just accepting a person like this and then extracting the parts

15
00:00:59.960 --> 00:01:01.460
we want from person.

16
00:01:01.610 --> 00:01:09.060
If we're going to print out something along the lines of let's go with first last and then title.

17
00:01:09.200 --> 00:01:14.240
So if we pass this runner and we would get Elliott kept Yogi comma Elder if the order of the Golden

18
00:01:14.240 --> 00:01:15.640
Heart of Kenya.

19
00:01:16.250 --> 00:01:23.330
So we could d structure first last and title from person concept first.

20
00:01:23.330 --> 00:01:34.670
Last title hopes the title equals person and then counseled out log here and I'll use a string template

21
00:01:34.670 --> 00:01:45.680
literal to display first and then a space and then last comma and then title and this should work if

22
00:01:45.680 --> 00:01:50.110
I run print runner.

23
00:01:50.240 --> 00:01:50.680
There we go.

24
00:01:50.690 --> 00:01:55.050
Elliot Kip choke a comma holder of the Order of the Golden Heart of Kenya.

25
00:01:55.190 --> 00:02:01.370
But if I wanted to instead D structure the object right here I can shorten my code up significantly

26
00:02:01.790 --> 00:02:08.780
so I'm going to duplicate this and comment out the original and get rid of this line entirely and instead

27
00:02:08.990 --> 00:02:10.860
D structure right here.

28
00:02:10.880 --> 00:02:14.350
So when the data is passed in we'll just grab the parts we want.

29
00:02:14.350 --> 00:02:17.370
We'll unpack first last and title.

30
00:02:17.840 --> 00:02:20.820
We don't need the rest of the object here.

31
00:02:20.990 --> 00:02:24.960
We have person so we could access country if we needed to.

32
00:02:24.960 --> 00:02:29.720
Or let's say there was 50 other properties we would have access to them in here.

33
00:02:29.720 --> 00:02:34.610
But if all we need is these three then why not do structure them.

34
00:02:34.610 --> 00:02:36.100
Just make it cleaner.

35
00:02:36.240 --> 00:02:39.590
Now if I run this code it still should work.

36
00:02:39.590 --> 00:02:42.380
Print runner we get the exact same output.

37
00:02:44.300 --> 00:02:47.120
So that's pretty much that at least for objects.

38
00:02:47.120 --> 00:02:52.210
We can do the same thing with arrays and I'll do a slightly different example here.

39
00:02:52.280 --> 00:02:56.480
I have an array that could represent a GDP response.

40
00:02:56.630 --> 00:02:59.820
If you're not super familiar with each GDP Don't worry.

41
00:02:59.930 --> 00:03:07.100
Some frameworks and some some technologies will represent a response from a website as an array and

42
00:03:07.130 --> 00:03:11.720
each line of the response will be represented as one element.

43
00:03:11.720 --> 00:03:18.650
And if I wanted to write a function that used the status code which is the second element I could do

44
00:03:18.650 --> 00:03:20.090
is defined my function.

45
00:03:20.090 --> 00:03:30.770
Let's go with parse response or something and let's D structure this element out of response.

46
00:03:30.770 --> 00:03:31.990
So this is an array.

47
00:03:32.060 --> 00:03:37.770
If I'm expecting an array to be passed in I could grab each individual piece right here.

48
00:03:37.820 --> 00:03:41.840
So this first element let's call that protocol.

49
00:03:41.840 --> 00:03:44.220
The second element would be status code.

50
00:03:44.480 --> 00:03:52.930
And the third element would be content type now instead of here I have access to those pieces.

51
00:03:53.100 --> 00:03:55.280
And let's just print status code.

52
00:03:55.440 --> 00:04:03.150
Let's do a status column status code.

53
00:04:03.700 --> 00:04:12.030
And if I run past response ops pass response and I pass in my response me.

54
00:04:12.040 --> 00:04:13.870
Open this up a bit.

55
00:04:13.930 --> 00:04:14.840
We get 200.

56
00:04:14.860 --> 00:04:20.850
OK so we're d. structuring in the exact same way when a value is passed in.

57
00:04:20.980 --> 00:04:27.300
This is expecting an array to be passed in and we are unpacking all three elements or the first three.

58
00:04:27.310 --> 00:04:29.710
If there were more we would be ignoring them.

59
00:04:29.890 --> 00:04:31.390
First is up here.

60
00:04:31.390 --> 00:04:36.300
We're doing the same thing but with an object and we're unpacking based off of the property name.

61
00:04:36.400 --> 00:04:42.100
So you'll see this often far more often with objects definitely where you just need one or two pieces

62
00:04:42.100 --> 00:04:44.290
of the object or maybe more than that's fine.

63
00:04:44.440 --> 00:04:49.270
But you don't need every single thing and it's just a nice way to shorten your functions up make things

64
00:04:49.270 --> 00:04:52.840
cleaner and not have to declare variables in the function.

65
00:04:52.840 --> 00:04:56.810
You can just grab them in the definition when an argument is passed in.

66
00:04:56.980 --> 00:05:01.870
And that's pretty much it for D structuring a really versatile new feature you'll see it a lot in the

67
00:05:01.870 --> 00:05:02.860
real world as well.

68
00:05:03.400 --> 00:05:04.330
And I'm going to be quite.
