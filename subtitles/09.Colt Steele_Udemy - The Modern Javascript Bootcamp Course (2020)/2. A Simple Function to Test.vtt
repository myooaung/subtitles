WEBVTT
1
00:00:01.250 --> 00:00:05.030
In this video we're going to start to work on a very small no J.S. Project.

2
00:00:05.030 --> 00:00:09.200
After that we're going to figure out how to test it without any outside testing library.

3
00:00:09.200 --> 00:00:13.580
So this first approach right here is going to be really simple and straightforward just to kind of get

4
00:00:13.580 --> 00:00:18.670
us into the mindset of what testing is kind of like and what we try to focus on okay.

5
00:00:18.710 --> 00:00:21.070
So to get started I'm going to go back over to my terminal.

6
00:00:21.220 --> 00:00:26.900
I got to find my workspace directory of sorts so this can be anywhere on your computer inside this folder.

7
00:00:26.900 --> 00:00:29.880
I'm gonna make a new project directory called High dash.

8
00:00:30.060 --> 00:00:32.780
I'll then change into there and start up my code.

9
00:00:32.780 --> 00:00:36.240
Ed so what is this project that we're building.

10
00:00:36.240 --> 00:00:38.310
Well the project name is high dash.

11
00:00:38.310 --> 00:00:42.150
This is kind of a little pun of sorts in the world of JavaScript.

12
00:00:42.150 --> 00:00:45.510
There is an extremely popular library called load ash.

13
00:00:45.510 --> 00:00:48.720
So this is the documentation page for load ash right here.

14
00:00:48.720 --> 00:00:54.600
The load Ash library provides a huge set of helper functions to do a lot of different operations that

15
00:00:54.600 --> 00:00:57.900
we currently have to do by hand inside of javascript.

16
00:00:57.900 --> 00:01:02.700
So if you take a look at the documentation at load Ash dot com you're going to see just a ton of different

17
00:01:02.700 --> 00:01:03.410
helper functions.

18
00:01:03.420 --> 00:01:05.970
That's all this library really does.

19
00:01:05.970 --> 00:01:12.360
So inside of here you'll find functions like is integer we call is integer we pass in some value and

20
00:01:12.360 --> 00:01:18.370
then this function just returns True or false to tell us if that thing is an integer that's just one

21
00:01:18.370 --> 00:01:18.870
example.

22
00:01:18.880 --> 00:01:21.500
There are many other functions inside of here.

23
00:01:21.550 --> 00:01:26.470
You'll notice that all these different functions are called by referencing underscore dot and then the

24
00:01:26.470 --> 00:01:29.890
function name just you know a single underscore like that.

25
00:01:29.890 --> 00:01:33.740
That is not a special character in the javascript language.

26
00:01:33.820 --> 00:01:39.520
The underscore is a completely valid identifier is a completely valid variable name.

27
00:01:39.520 --> 00:01:44.320
So the underscore is just like any other variable that could have just as easily bend like the word

28
00:01:44.380 --> 00:01:50.100
load ash or something like that so we're going to re implement one or two functions from the load Ash

29
00:01:50.100 --> 00:01:52.820
library and then figure out how to test them.

30
00:01:53.040 --> 00:01:55.690
We're going to be implementing two pretty basic functions.

31
00:01:55.770 --> 00:01:59.880
The first one that we're going to re implement from scratch is for each.

32
00:01:59.880 --> 00:02:04.230
So the documentation right here for each it's under the collection section if you want to take a look

33
00:02:04.230 --> 00:02:05.350
at it yourself.

34
00:02:05.540 --> 00:02:10.440
The for each function behaves identically to the for each function that we've been using throughout

35
00:02:10.440 --> 00:02:14.330
this course that is included with JavaScript arrays.

36
00:02:14.400 --> 00:02:19.920
So it turns out that for many years javascript did not have that array helper method of for each.

37
00:02:19.920 --> 00:02:25.710
So for literally like two two and a half decades javascript did not have a built in for each method.

38
00:02:25.710 --> 00:02:30.990
So the low dash library came along many many years ago and they gave us a version of four each which

39
00:02:30.990 --> 00:02:36.060
was just fantastic we could use for each to iterate over all the elements of an array and we used to

40
00:02:36.060 --> 00:02:42.330
do this all the darn time before the for each function it was built into JavaScript or each is still

41
00:02:42.330 --> 00:02:46.710
included inside of load ash because hey people still sometimes use this thing.

42
00:02:46.710 --> 00:02:50.290
There are some other reasons to use the built in or the version of for each.

43
00:02:50.290 --> 00:02:55.890
This includes with load ash but usually these days we use the version that is built into all JavaScript

44
00:02:55.890 --> 00:03:02.260
arrays like I said we're going to implement this function take a look at the function signature.

45
00:03:02.450 --> 00:03:07.800
So when we call for each using load ash and this our implementations can be very similar.

46
00:03:07.870 --> 00:03:12.400
The first argument is going to be the array that we want to iterate over and then the second argument

47
00:03:12.700 --> 00:03:17.380
will be a function that we pass in we can take a look at example right here and we'll see a better example

48
00:03:17.380 --> 00:03:17.700
of it.

49
00:03:18.990 --> 00:03:23.030
So in this case they're iterating over an array with the values 1 and 2.

50
00:03:23.190 --> 00:03:28.500
The second argument is then a function that function will be called with every element out of that array.

51
00:03:28.560 --> 00:03:33.810
In turn so that's what we're going to be making for Step 1 Get started.

52
00:03:33.810 --> 00:03:35.470
I can go back over to my editor.

53
00:03:35.700 --> 00:03:41.130
I'm going to create a new index Scott J.S. file and then inside of here I'll do a module that exports

54
00:03:41.490 --> 00:03:44.400
of an object inside this object.

55
00:03:44.410 --> 00:03:48.090
We're going to write out a couple of different functions really just two or three.

56
00:03:48.310 --> 00:03:51.040
We'll begin first with the for each function

57
00:03:54.170 --> 00:03:58.340
so we're going to make sure that our for each function that we are building is going to have a identical

58
00:03:58.340 --> 00:04:00.710
signature to the one that load ash has over here.

59
00:04:00.980 --> 00:04:03.170
So our first argument needs to be an array.

60
00:04:03.320 --> 00:04:08.780
And the second argument will be the function that'll be executed for every element in that array so

61
00:04:08.780 --> 00:04:15.560
I'm going to receive the first argument as simply array or a R and then my second argument will call

62
00:04:15.710 --> 00:04:18.970
about simply f n short for function.

63
00:04:19.070 --> 00:04:25.850
So we want to iterate over every element inside of array and call f n with it naturally.

64
00:04:25.860 --> 00:04:31.580
We could implement this by just using the built in for each function that's included with JavaScript.

65
00:04:31.760 --> 00:04:36.920
But just for a little fun let's try to write this out from scratch using just really basic javascript

66
00:04:36.920 --> 00:04:44.430
stuff so to implement for each from scratch we can write a very simple for loop so we can say for let

67
00:04:44.430 --> 00:04:53.630
I equals to zero ie less than a r length and I plus plus then inside of here.

68
00:04:53.650 --> 00:05:01.150
For every element or every index we will reach into our array and pull out a value at that appropriate

69
00:05:01.150 --> 00:05:03.240
index.

70
00:05:03.460 --> 00:05:06.820
And then finally we will call our function with that value.

71
00:05:06.940 --> 00:05:14.750
So I'll say it again and pass in value technically usually we also pass the index of this value as the

72
00:05:14.750 --> 00:05:16.480
second argument to the function.

73
00:05:16.730 --> 00:05:19.160
So we'll pass and I's the second argument as well.

74
00:05:19.160 --> 00:05:21.150
Like so okay.

75
00:05:21.210 --> 00:05:22.320
So that's pretty much it.

76
00:05:22.320 --> 00:05:25.020
That is a implementation of for each from scratch.

77
00:05:25.020 --> 00:05:28.800
So now here's the big question how do we know if this code works.

78
00:05:28.800 --> 00:05:34.080
I mean I can read it and it looks like it works but how do we actually make sure it works.

79
00:05:34.110 --> 00:05:39.000
So if we were using similar conventions to what we were doing earlier on say this course we might do

80
00:05:39.000 --> 00:05:39.630
something like this.

81
00:05:39.630 --> 00:05:44.100
You might come down to the very bottom and tried to write out something like Okay let's call for each

82
00:05:44.460 --> 00:05:46.920
let's throw in some array.

83
00:05:46.980 --> 00:05:52.730
So like one two three but in our function as the second argument

84
00:05:55.400 --> 00:05:58.480
receive each value and then do a console log of the value.

85
00:05:58.490 --> 00:06:02.870
So this is some code that we might write if we were kind of following everything we've done in this

86
00:06:02.870 --> 00:06:03.800
course already.

87
00:06:04.040 --> 00:06:09.410
We would then go over to our terminal and run this file node and we would visually inspect the console

88
00:06:09.470 --> 00:06:13.550
to make sure that we saw the values 1 2 and 3 console logged out.

89
00:06:13.580 --> 00:06:17.640
So that would be a absolute perfect definition of manual testing.

90
00:06:17.780 --> 00:06:22.460
We were running some code and then we were using our own two eyes to make sure that we got the expected

91
00:06:22.460 --> 00:06:23.000
results.

92
00:06:23.660 --> 00:06:26.150
So that is an approach that we want to do away with.

93
00:06:26.660 --> 00:06:31.670
When we start to think about automated testing so instead of trying to run our code and then manually

94
00:06:31.670 --> 00:06:37.430
look at the output we want to figure out some way to run this stuff in an automated fashion and maybe

95
00:06:37.460 --> 00:06:41.930
run it in several different styles and make sure that in every different case that we call out for each

96
00:06:41.930 --> 00:06:47.350
function it should work in some very well expected undefined way.

97
00:06:47.360 --> 00:06:47.690
All right.

98
00:06:47.720 --> 00:06:49.330
So let's take a pause right here.

99
00:06:49.340 --> 00:06:52.850
We're going to come back in the next video and we're going to figure out how we can write out some code

100
00:06:53.120 --> 00:06:59.630
to test this function in a very automated style and we're going to do it entirely without making use

101
00:06:59.630 --> 00:07:01.910
of any outside testing library.

102
00:07:01.930 --> 00:07:04.530
So a quick pause and we'll tackle that in just a moment.
