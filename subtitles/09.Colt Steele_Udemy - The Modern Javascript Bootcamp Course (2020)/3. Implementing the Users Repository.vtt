WEBVTT
1
00:00:00.780 --> 00:00:05.810
The last video we discussed creating a repository to model all the different users that we create.

2
00:00:05.820 --> 00:00:08.280
The reason we are doing this just to make sure it's really clear.

3
00:00:08.400 --> 00:00:12.420
Right now we've got our poster quest handler right here to handle account creation.

4
00:00:12.510 --> 00:00:17.100
So when a user makes a POST request we need to save some details about this user that is being created

5
00:00:17.400 --> 00:00:23.340
namely their email and their password so they can later log in with that same email and password combination

6
00:00:24.180 --> 00:00:28.920
because that we have to store this information somewhere and we're going to store that information by

7
00:00:28.920 --> 00:00:31.060
using this repository pattern.

8
00:00:31.140 --> 00:00:35.070
So we're going to have this one class that manages all the different users that get created inside our

9
00:00:35.070 --> 00:00:35.760
application.

10
00:00:36.520 --> 00:00:39.810
So now in this video we're going to start to create this user's repository.

11
00:00:39.810 --> 00:00:43.710
This is going to be a class we create inside of a new file inside of our projects.

12
00:00:43.740 --> 00:00:47.080
We're going to start to implement all these different methods one by one.

13
00:00:47.370 --> 00:00:50.880
Of course right now we don't have a lot of functionality tied to some of these methods.

14
00:00:51.000 --> 00:00:56.160
Like for example we haven't even discussed where we would be deleting a user or updating a user.

15
00:00:56.160 --> 00:01:00.120
Nonetheless we're going to put all the functionality together right now from the get go because eventually

16
00:01:00.150 --> 00:01:05.070
we will be using all these different methods in one way or another even if it doesn't appear to be the

17
00:01:05.070 --> 00:01:06.120
case right now.

18
00:01:07.390 --> 00:01:07.660
OK.

19
00:01:07.690 --> 00:01:12.430
So to get started I got to go back towards my project directory I'm going to make a new folder called

20
00:01:12.490 --> 00:01:20.210
repositories then inside they're going to create a new file called users dot J.S. so inside this new

21
00:01:20.210 --> 00:01:26.400
File we're going to create a class called users repository and this class is going to have all those

22
00:01:26.400 --> 00:01:28.040
different methods we just discussed.

23
00:01:28.110 --> 00:01:35.680
So it's gonna have methods like it all get one random I.D. right all and so on so inside of this class

24
00:01:35.860 --> 00:01:40.510
the first thing you need to do is make sure that we have some file on our harddrive that we can use

25
00:01:40.510 --> 00:01:42.740
to store all of our information to.

26
00:01:43.000 --> 00:01:48.100
Remember we had said that this repository and each of them really is going to have some backing either

27
00:01:48.150 --> 00:01:51.310
users start Jason or products dot Jason File.

28
00:01:51.310 --> 00:01:56.800
So the instant that we create a instance of users repository the first thing I want to do is check and

29
00:01:56.800 --> 00:02:03.880
see if we have some file already created to store some information in if we don't then we should probably

30
00:02:03.880 --> 00:02:05.900
create that file right away.

31
00:02:06.040 --> 00:02:08.540
So to handle this I'm going to create a constructor function.

32
00:02:08.620 --> 00:02:14.080
Remember constructor functions get called instantly whenever we create a new instance of a class the

33
00:02:14.110 --> 00:02:18.910
name constructor is very special as an argument to its constructor function.

34
00:02:18.930 --> 00:02:24.900
I'm going to expect to be passed a file name and this will be the file name or the name of the file

35
00:02:24.900 --> 00:02:30.180
that we're going to eventually store all of our different users or products or whatever into inside

36
00:02:30.190 --> 00:02:31.030
my constructor.

37
00:02:31.150 --> 00:02:35.680
I'm going to immediately write in some code to make sure that we were passed a file name if we were

38
00:02:35.680 --> 00:02:36.820
not given a file name.

39
00:02:36.820 --> 00:02:41.710
When we create an instance of a repository well that means we don't know where we're going to save any

40
00:02:41.710 --> 00:02:42.370
information.

41
00:02:42.400 --> 00:02:48.640
So we should probably just throw an error right away and say sorry but we need a file name so I will

42
00:02:48.640 --> 00:02:50.620
say if no file name.

43
00:02:50.620 --> 00:02:59.810
If one was not provided then let's throw a new air and we'll get the text creating a repository requires

44
00:02:59.870 --> 00:03:06.420
a file name now as we're ready on all the code for this repository.

45
00:03:06.430 --> 00:03:11.770
We probably are going to want to test it to some degree rather than worrying about setting up some full

46
00:03:11.770 --> 00:03:12.970
feature testing framework.

47
00:03:12.970 --> 00:03:17.380
We're going to instead just write in some testing code down here at the bottom of the file every step

48
00:03:17.380 --> 00:03:21.830
along the way and make sure that everything more or less works the way we expect.

49
00:03:21.850 --> 00:03:28.240
So underneath my class to test out what we have so far I'm going to try to call new users repository

50
00:03:31.090 --> 00:03:33.100
and I'm not going to pass in any argument.

51
00:03:33.230 --> 00:03:36.670
So let's just make sure that we've we call this thing without any file name.

52
00:03:36.670 --> 00:03:39.640
We see that error to run this thing.

53
00:03:39.650 --> 00:03:43.410
I'm going to save the file and then going to go back over to my terminal.

54
00:03:43.520 --> 00:03:50.330
I'm going to start my running server by hitting control C I will then change into that new repositories

55
00:03:50.330 --> 00:03:52.930
directory.

56
00:03:53.000 --> 00:03:57.240
So here's the repositories folder and I'm going to directly run users J us.

57
00:03:57.290 --> 00:04:04.750
So I'll run node users dot J.S. then very quickly I see a big error message that says creating a repository

58
00:04:04.780 --> 00:04:06.050
requires a file name.

59
00:04:06.280 --> 00:04:06.680
Okay.

60
00:04:06.760 --> 00:04:08.720
So I would definitely say that works out.

61
00:04:08.740 --> 00:04:12.490
Now I know that we probably didn't have to do a test right away but I just want you to understand as

62
00:04:12.490 --> 00:04:16.210
we develop all these different methods we will be writing out some code down here at the bottom just

63
00:04:16.210 --> 00:04:19.870
to make sure everything works OK.

64
00:04:19.930 --> 00:04:24.710
So now after we get past that check I'm going to take whatever file name was provided and store it inside

65
00:04:24.710 --> 00:04:32.690
of an instance variable so I'll say this dot file name is file name then after that we're going to write

66
00:04:32.690 --> 00:04:35.780
in some code right here to make sure that this file exists.

67
00:04:35.780 --> 00:04:41.200
Remember if we don't have a file at the given file name we're going to create it right away.

68
00:04:41.240 --> 00:04:44.630
The first thing I do is check to see if the file exists to do so.

69
00:04:44.630 --> 00:04:51.230
Let's go back to our no J.S. F S module documentation and figure out how we can check to see if a file

70
00:04:51.230 --> 00:04:58.700
exists on our harddrive a back inside my browser I will navigate to no J.S. dot org slash API

71
00:05:01.490 --> 00:05:07.550
and then on the left hand side we can navigate down to file system.

72
00:05:07.650 --> 00:05:12.280
So then inside of here we're going to look for a function called Access.

73
00:05:12.280 --> 00:05:13.790
Here it is right here.

74
00:05:13.930 --> 00:05:18.550
So the access function can be used to check to see if a file exists if it exists.

75
00:05:18.550 --> 00:05:20.220
Well that means that we are good to go.

76
00:05:20.260 --> 00:05:25.920
Otherwise in the context of our repository class you'll have to run some code to create the file the

77
00:05:25.920 --> 00:05:28.560
access function comes in two different flavors.

78
00:05:28.560 --> 00:05:32.690
We've either got this callback based one we've got the version at the very bottom.

79
00:05:32.730 --> 00:05:37.560
The promise based version no that's under FSC dot promises and a third version.

80
00:05:37.560 --> 00:05:44.730
I know I just said two but there actually is a third version called F S dot access sync which we can

81
00:05:44.730 --> 00:05:45.260
scroll down.

82
00:05:45.270 --> 00:05:47.230
It's the next function down right here.

83
00:05:47.640 --> 00:05:52.830
The accessing function does the same thing as access but it executes Synchronicity which means there

84
00:05:52.830 --> 00:05:55.130
is no callback involved.

85
00:05:55.260 --> 00:06:00.240
So whenever we call access sync we're going to basically sit there and wait some number of milliseconds

86
00:06:00.270 --> 00:06:07.380
as node tries to access the file system and check to see if this file exists from a performance standpoint.

87
00:06:07.490 --> 00:06:14.240
We really don't want to use access sync in general however at this point we are in a real corner case

88
00:06:15.110 --> 00:06:16.550
for our entire application.

89
00:06:16.550 --> 00:06:22.840
You and I are only ever going to create exactly one instance of users repository just one.

90
00:06:22.970 --> 00:06:27.380
We're going to have this one instance sitting around and whenever we need to work with our users we

91
00:06:27.380 --> 00:06:29.810
are going to get access to that instance.

92
00:06:29.810 --> 00:06:34.710
So in the context of users repository it is not the worst thing in the world to make use of access sync

93
00:06:34.730 --> 00:06:40.640
because we're only going to call this function exactly one time for the entire lifecycle of our application

94
00:06:42.050 --> 00:06:47.840
the other reason that we're going to use access sync instead of just the normal access or even the promise

95
00:06:47.840 --> 00:06:53.730
based version is that we want to run the code to check to see if this file exists inside of our constructor

96
00:06:54.210 --> 00:06:58.940
and constructor functions in JavaScript are not allowed to be async in nature.

97
00:06:59.070 --> 00:07:04.440
So if we want to do this check to see if a file exists we would otherwise if we we're not going use

98
00:07:04.440 --> 00:07:08.190
the sync version we would have to make some separate version of this function or a separate function

99
00:07:08.190 --> 00:07:14.040
on here called something like check for file or something like that because this is a separate function

100
00:07:14.040 --> 00:07:19.470
we could market as a sync but then every single time that we wanted to use it our users repository or

101
00:07:19.470 --> 00:07:23.370
anytime we create a new one we would have to create the thing

102
00:07:26.460 --> 00:07:33.420
assign it to a variable and then call check for file like so.

103
00:07:33.510 --> 00:07:38.150
So again not super ideal because we would always have to have that additional method call because of

104
00:07:38.140 --> 00:07:40.780
that we're going to go ahead and just kind of slightly cheat.

105
00:07:40.800 --> 00:07:42.830
I would really not even call this a cheat.

106
00:07:42.930 --> 00:07:49.020
I feel very comfortable recommending this as a solution to just call access sync from within that constructor.

107
00:07:49.080 --> 00:07:56.460
So long story short inside our constructor we're going to call f s dot access sync and we're going to

108
00:07:56.460 --> 00:07:59.110
check to see if that file exists.

109
00:07:59.250 --> 00:08:02.390
I'm gonna make sure that I also require in F S at the very top

110
00:08:05.190 --> 00:08:06.510
if that file does not exist.

111
00:08:06.510 --> 00:08:08.090
It's going to throw an error.

112
00:08:08.220 --> 00:08:16.730
So we're going to catch that error with a try catch statement like so so if we end up inside this catch

113
00:08:16.730 --> 00:08:21.530
case that means the file does not exist and we're going to have to write or essentially create that

114
00:08:21.530 --> 00:08:28.560
file so in order to create that file we're going to use another method from the F S module called right.

115
00:08:28.580 --> 00:08:33.140
File and I'm going to find it somewhere inside of here.

116
00:08:33.160 --> 00:08:40.690
Here we go right here so the FSA dot right file function takes the name of a file and is the second

117
00:08:40.690 --> 00:08:43.050
argument some data to write into there.

118
00:08:43.420 --> 00:08:47.830
Whenever we call this if a file with that given name doesn't exist it's going to create the file for

119
00:08:47.830 --> 00:08:48.580
us.

120
00:08:49.710 --> 00:08:54.190
So this is a perfect method to call to make sure that the file actually does exist.

121
00:08:54.630 --> 00:08:55.740
Just like access sync.

122
00:08:55.740 --> 00:08:58.750
There are two or technically three versions of this method.

123
00:08:58.830 --> 00:09:02.760
We have FSC dot right file FSC dot promises right file.

124
00:09:02.910 --> 00:09:08.910
And if we scroll down just a little bit s dot right file sync just like access sync if we call this

125
00:09:08.910 --> 00:09:13.500
function right here there is no callback there's no async behavior we can call this function and then

126
00:09:13.500 --> 00:09:19.770
essentially our code pauses or just kind of waits for a very long time as its function runs for the

127
00:09:19.770 --> 00:09:24.810
same reasons as calling access sync inside the constructor we're going to use FSM dot right file sync

128
00:09:24.810 --> 00:09:26.100
inside of here as well.

129
00:09:26.100 --> 00:09:31.410
Again it is because we are not allowed to have async code inside of a constructor and it's also because

130
00:09:31.440 --> 00:09:36.890
I expect to only ever create exactly one user's repository inside my application.

131
00:09:37.020 --> 00:09:46.310
So I feel entirely ok using the right file sync method it's going to do FSM dot right file sync we'll

132
00:09:46.310 --> 00:09:52.670
do this dot file name and then as a second argument I'm going to put in an empty array inside of a string.

133
00:09:52.670 --> 00:09:55.030
We'll discuss why we're doing that in just a moment.

134
00:09:55.040 --> 00:09:58.250
Don't worry about that just yet OK.

135
00:09:58.300 --> 00:10:00.420
Let's not save this.

136
00:10:00.510 --> 00:10:03.870
We're still creating our new users repository down here.

137
00:10:04.110 --> 00:10:08.210
But now I'm going to update that line and make sure I pass in a file name to use.

138
00:10:08.280 --> 00:10:14.250
So because we are storing some users I'm going to try to use a file called user dot Jason to store all

139
00:10:14.250 --> 00:10:17.310
of my information okay.

140
00:10:17.360 --> 00:10:22.050
So now in suddenly project directory right now I do not have a user's not JS on file.

141
00:10:22.190 --> 00:10:23.520
I'm not going to save this.

142
00:10:23.630 --> 00:10:25.040
I'm going to go back over to my terminal.

143
00:10:25.040 --> 00:10:26.570
I'm going to run this file again.

144
00:10:26.570 --> 00:10:32.090
And once I do I should see a user's not just on file up here inside my project directory and all it

145
00:10:32.090 --> 00:10:40.220
should have inside of it is an empty array so I'll go back over I'm still inside of repositories.

146
00:10:40.330 --> 00:10:48.200
I'm going to run users dot J.S. by then go back over to my editor I will see right there users dot Jason

147
00:10:48.630 --> 00:10:52.680
and I mentioned just a moment ago that I would expect to see it inside my root project directory.

148
00:10:52.730 --> 00:10:55.100
Eventually we will see inside the project directory.

149
00:10:55.130 --> 00:11:02.390
Right now our users dot J.S. file is going to write that Jason File into the same directory that our

150
00:11:02.390 --> 00:11:04.330
program is being executed from.

151
00:11:04.370 --> 00:11:08.150
So eventually we're going to be executing our code from the e com directory.

152
00:11:08.150 --> 00:11:11.180
So if I do node repositories users dot J.S..

153
00:11:11.390 --> 00:11:14.680
Now the Jason file is created inside my root project directory.

154
00:11:14.720 --> 00:11:20.810
But just as we're doing this testing that's going to be created inside of repositories instead if I

155
00:11:20.810 --> 00:11:26.170
then open up either of these Jason files I will see an empty array inside their okay.

156
00:11:26.200 --> 00:11:27.540
So this is a good start.

157
00:11:27.550 --> 00:11:32.800
We are now ensuring that we've got some file name being provided and we are ensuring that that file

158
00:11:32.800 --> 00:11:38.430
actually exists on our harddrive so now we'll take a quick pause as usual when we come back the next

159
00:11:38.430 --> 00:11:43.410
video we're going to continue by implementing some of the different methods over here that we just discussed.
