WEBVTT
1
00:00:00.210 --> 00:00:05.970
The arrow functions we've seen so far are already pretty compact compared to a regular function expression

2
00:00:06.210 --> 00:00:12.230
where we have to write the word function but there's an even more compact way of writing some aero functions.

3
00:00:12.240 --> 00:00:14.550
This only works in certain scenarios.

4
00:00:14.550 --> 00:00:16.380
It's called implicit return.

5
00:00:16.560 --> 00:00:21.420
Adding an implicit return to an arrow function means that you don't have to write the return keyword

6
00:00:21.420 --> 00:00:25.440
itself and some scenarios you can write a one liner aero function.

7
00:00:26.100 --> 00:00:29.110
So let's talk about when you can use this and how it works.

8
00:00:29.160 --> 00:00:36.410
If I have a simple error function typing in the wrong area called Square I know it's a boring one.

9
00:00:36.630 --> 00:00:44.800
It accepts a single parameter we'll call it n we return end times and this arrow function consists of

10
00:00:44.830 --> 00:00:47.530
a single expression that we're returning.

11
00:00:47.530 --> 00:00:51.910
We're not doing some other logic first we're not making a variable we're not adding a conditional.

12
00:00:51.910 --> 00:00:57.130
We're simply returning an expression in scenarios where you have one expression that you want to be

13
00:00:57.130 --> 00:00:58.040
returned.

14
00:00:58.150 --> 00:01:04.780
You can rewrite this arrow function using parentheses instead of curly braces and if you do that you

15
00:01:04.780 --> 00:01:07.420
can leave off the return keyword.

16
00:01:07.420 --> 00:01:19.100
So we could rewrite this has const square equals and then parentheses and times and that's it.

17
00:01:19.360 --> 00:01:25.030
You'll see if I even try and add return in there it gets highlighted with red squiggly of death telling

18
00:01:25.030 --> 00:01:28.790
me expression expected not a return statement.

19
00:01:28.930 --> 00:01:34.930
It wants just the expression and this value will be computed and returned.

20
00:01:34.930 --> 00:01:44.500
So if I run it we'll do square of eight 64 square of 2 is 4 but we can make this even shorter by putting

21
00:01:44.500 --> 00:01:50.770
it on a single line and we can do that in scenarios where it fits and it makes sense to put on a single

22
00:01:50.770 --> 00:01:51.280
line.

23
00:01:51.370 --> 00:01:53.020
We can leave off the parents.

24
00:01:53.020 --> 00:01:57.100
I'll comment that version out and we can just do this right here.

25
00:01:57.130 --> 00:01:59.810
So this is equivalent to what we had right here.

26
00:02:00.190 --> 00:02:04.480
Writing an arrow function accepts a single parameter n and it returns.

27
00:02:04.480 --> 00:02:07.500
And times and it's an implicit return.

28
00:02:07.630 --> 00:02:08.850
We don't need those poor friends.

29
00:02:08.860 --> 00:02:14.110
If we're putting it on one line but that doesn't mean we should always try and make everything on one

30
00:02:14.110 --> 00:02:14.710
line.

31
00:02:14.710 --> 00:02:19.270
If it's super long if it's hard to read put parents and just put it on a new line.

32
00:02:19.300 --> 00:02:26.460
So if instead of returning n times n we had some array that we were trying to return based off of n

33
00:02:27.490 --> 00:02:29.450
let's just say it was a long array like this.

34
00:02:29.460 --> 00:02:31.440
This won't make sense to JavaScript.

35
00:02:31.450 --> 00:02:38.230
None of those are valid identifiers or existing identifiers but if I had this this is a bit long for

36
00:02:38.260 --> 00:02:40.750
a single line so we add those parents.

37
00:02:40.780 --> 00:02:46.240
It's just a way of making it clear that this whole thing is the expression not just this one line but

38
00:02:46.240 --> 00:02:51.310
let's go back to what we had before and times and make sure it still works.

39
00:02:51.310 --> 00:02:54.430
Square off to square off seven forty nine.

40
00:02:54.430 --> 00:02:55.380
It's working.

41
00:02:55.660 --> 00:03:00.970
So this is a really nice feature when you need a simple error function which a lot of the time we do

42
00:03:00.970 --> 00:03:05.800
need when we're using all of these callback methods we've seen for arrays for each.

43
00:03:05.800 --> 00:03:11.740
Or map a lot of the time we just want a single short expression to be returned so we can use this one

44
00:03:11.740 --> 00:03:12.770
liner syntax.

45
00:03:12.790 --> 00:03:16.090
One less thing before we see some examples using array methods.

46
00:03:16.090 --> 00:03:17.610
I'll just show you what happens here.

47
00:03:17.710 --> 00:03:22.420
If we had some additional logic let's say we wanted to check if n is positive.

48
00:03:22.480 --> 00:03:29.560
So if n is greater than or equal to zero let's just say it has to be greater than zero then we'll return

49
00:03:29.560 --> 00:03:31.210
something return.

50
00:03:31.330 --> 00:03:32.400
Let's do it the other way around.

51
00:03:32.410 --> 00:03:35.890
If it's negative we'll return false.

52
00:03:35.950 --> 00:03:36.790
This is a problem.

53
00:03:37.480 --> 00:03:40.020
I have multiple expressions multiple lines.

54
00:03:40.020 --> 00:03:42.420
It's not just multiple expressions I have statements.

55
00:03:42.460 --> 00:03:46.570
I've got a conditional then I have this expression at the bottom.

56
00:03:46.570 --> 00:03:49.180
This function does not know what it's supposed to return.

57
00:03:49.180 --> 00:03:51.800
Javascript does not know what to return.

58
00:03:51.940 --> 00:03:54.640
There's multiple things that it could return.

59
00:03:54.640 --> 00:03:56.820
And this is an invalid aero function.

60
00:03:56.860 --> 00:04:03.670
We can't do this if we're trying to use an implicit return we only get one thing one expression to return.

61
00:04:03.880 --> 00:04:11.610
That way there is no doubt in JavaScript mind it knows this is the one thing to return implicitly.

62
00:04:11.610 --> 00:04:11.880
Okay.

63
00:04:11.890 --> 00:04:13.470
So let's see some examples now.

64
00:04:13.510 --> 00:04:13.940
All right.

65
00:04:13.990 --> 00:04:15.980
So I have a simple array of numbers.

66
00:04:16.150 --> 00:04:22.960
If I wanted to double every name and map it into a new array I would call num stop map and without an

67
00:04:22.960 --> 00:04:24.770
error function it would look something like this.

68
00:04:24.790 --> 00:04:35.270
Function for and we want to return and times to end if we save that to a variable we'll call this numbers.

69
00:04:35.440 --> 00:04:37.090
How about doubles.

70
00:04:37.090 --> 00:04:41.180
1 we look at doubles one should be review.

71
00:04:41.290 --> 00:04:43.580
I didn't run my code try that again.

72
00:04:43.750 --> 00:04:46.360
We get 2 4 6 8 and so on.

73
00:04:46.540 --> 00:04:49.990
If I wanted to use an arrow function instead I could do doubles.

74
00:04:49.990 --> 00:04:57.850
2 equals num stop map and if we use a non implicit error function a regular aero function we would have

75
00:04:57.880 --> 00:05:07.480
n and then return end times to refresh our code doubles to looks the same.

76
00:05:07.480 --> 00:05:13.490
But we can make it even shorter with what we just saw doubles three equals num stop map.

77
00:05:13.570 --> 00:05:18.920
We'll go with the parameter name of N N times 2 and that's it.

78
00:05:19.180 --> 00:05:20.340
Much much shorter.

79
00:05:20.380 --> 00:05:22.060
We don't have to add curly braces.

80
00:05:22.120 --> 00:05:23.830
We don't need to add return.

81
00:05:23.830 --> 00:05:28.650
We simply write an arrow function on one line when we have a single expression.

82
00:05:28.660 --> 00:05:29.840
This works great.

83
00:05:29.860 --> 00:05:32.930
Let's look at double three.

84
00:05:33.190 --> 00:05:34.840
It looks identical.

85
00:05:34.840 --> 00:05:35.750
So this is really nice.

86
00:05:35.770 --> 00:05:39.000
And this is one of the main reasons this arrow functions were added in.

87
00:05:39.130 --> 00:05:45.030
We use callbacks so frequently that there needed to be a nicer more compact syntax.

88
00:05:45.190 --> 00:05:50.200
Remember later on there is another distinction between hero functions and regular functions.

89
00:05:50.200 --> 00:05:50.920
We'll talk about that.

90
00:05:50.920 --> 00:05:52.090
It has to do with a keyword.

91
00:05:52.090 --> 00:05:53.910
This but we're not there yet.

92
00:05:53.950 --> 00:05:58.960
Let's do another example where we map these numbers into an array where we have the values.

93
00:05:58.990 --> 00:06:00.630
Even an odd string.

94
00:06:00.790 --> 00:06:06.390
So we would have odd and then even and then odd as you can see here.

95
00:06:06.430 --> 00:06:10.900
We would just alternate if I wanted to write that function or that map.

96
00:06:10.900 --> 00:06:15.060
How about const parity list.

97
00:06:15.220 --> 00:06:19.700
Parity is the term referring to if a number is even or odd.

98
00:06:19.720 --> 00:06:23.520
I'm pretty sure that's what it's called anyway num stop map.

99
00:06:23.530 --> 00:06:33.790
Let's use a regular function first function for an if and is mod 2 equals zero.

100
00:06:33.820 --> 00:06:38.480
If and mod 2 is equal to zero we will return even.

101
00:06:40.240 --> 00:06:48.680
Otherwise we return odd if we look at parody list we get odd even odd even all the way down.

102
00:06:48.730 --> 00:06:53.610
Let's rewrite this with an arrow function so it will be similar.

103
00:06:53.770 --> 00:07:00.790
We'll have num stop map and then end with our arrow and we could leave it like this and it still works.

104
00:07:00.790 --> 00:07:04.710
We look at parody list but if I wanted to use an implicit return.

105
00:07:04.870 --> 00:07:05.430
No dice.

106
00:07:05.440 --> 00:07:07.440
At least not with this version.

107
00:07:07.600 --> 00:07:09.950
We could rewrite this to be a one liner.

108
00:07:10.020 --> 00:07:13.660
We were really just doing a simple if anyone else.

109
00:07:13.660 --> 00:07:14.600
One condition.

110
00:07:14.710 --> 00:07:15.570
If that's not true.

111
00:07:15.580 --> 00:07:16.690
Do this instead.

112
00:07:16.690 --> 00:07:21.440
Even or odd and we can use the ternary operator to do this in one line.

113
00:07:21.520 --> 00:07:23.960
Remember we only get one expression here.

114
00:07:23.980 --> 00:07:25.060
We have multiple.

115
00:07:25.060 --> 00:07:28.930
This will not work if I try and rewrite it using parents.

116
00:07:29.080 --> 00:07:30.380
We're out of luck.

117
00:07:30.640 --> 00:07:37.300
If I replace those curly braces with poor friends javascript still does not like it and tells us expression

118
00:07:37.330 --> 00:07:42.340
expected so we can rewrite it like this with the ternary operator.

119
00:07:42.340 --> 00:07:48.790
If you remember this syntax and mod two equals zero question mark.

120
00:07:48.790 --> 00:07:58.010
So if this thing we want to return this value even colon that means otherwise we'll return odd.

121
00:07:58.330 --> 00:07:59.660
And this is a one liner.

122
00:07:59.680 --> 00:08:01.510
This works.

123
00:08:01.510 --> 00:08:03.490
Refresh look at parody list.

124
00:08:03.490 --> 00:08:04.630
We're good to go.

125
00:08:04.900 --> 00:08:09.840
And if you wanted to you could put this actually on one line instead of using prints.

126
00:08:10.350 --> 00:08:12.150
We just bring it up like this.

127
00:08:12.190 --> 00:08:16.830
It's a little long but I also have my font zoomed in a bit.

128
00:08:16.870 --> 00:08:19.310
It's up to you if you want to do it on one line.

129
00:08:19.330 --> 00:08:24.160
I think sometimes people go overboard trying to fit something onto one line just so they can say they've

130
00:08:24.160 --> 00:08:24.900
done it.

131
00:08:25.030 --> 00:08:29.980
It's easier to read this in my opinion but in a simpler example like this one here it makes a lot of

132
00:08:29.980 --> 00:08:31.450
sense to put it on one line.

133
00:08:31.450 --> 00:08:34.370
There's no reason for the extra lines and extra characters.

134
00:08:34.380 --> 00:08:40.300
Okay so this pretty much concludes our little arrow functions interlude arrow functions are really really

135
00:08:40.300 --> 00:08:41.280
useful.

136
00:08:41.380 --> 00:08:45.910
They don't do anything that you can't do with a regular function at least with what we've seen.

137
00:08:45.910 --> 00:08:48.700
They're just a replacement that is more compact.

138
00:08:48.790 --> 00:08:53.050
So even in their most verbose form it's still shorter.

139
00:08:53.050 --> 00:08:57.470
If you compare this to a regular function expression we don't have to write function.

140
00:08:57.640 --> 00:09:01.110
We just write our parameter optional parentheses around it.

141
00:09:01.150 --> 00:09:07.060
Remember that from the last video you can put parentheses there it's up to you and then the arrow curly

142
00:09:07.060 --> 00:09:08.600
braces return something.

143
00:09:08.740 --> 00:09:15.190
Or we can use an implicit return where we don't have to write return but we can only have a single expression

144
00:09:15.190 --> 00:09:16.990
in the body of the function.

145
00:09:16.990 --> 00:09:23.110
And if it doesn't fit on one line like I don't think this one fits very well you can use parental to

146
00:09:23.110 --> 00:09:23.650
wrap it.

147
00:09:23.740 --> 00:09:26.820
But it still needs to be a single expression.

148
00:09:26.840 --> 00:09:27.810
Okay so that's.

149
00:09:27.820 --> 00:09:31.660
Arrow functions now will pick back up with more of those built in array methods.
