1
00:00:00,240 --> 00:00:07,410
Next up another practice problem with functions so this one involves something called a pan gram not

2
00:00:07,440 --> 00:00:16,110
a palindrome not a ten gram but pan gram and a pen Gram is a sentence that contains every letter of

3
00:00:16,110 --> 00:00:17,150
the alphabet.

4
00:00:17,430 --> 00:00:23,880
The most famous one at least in English is the quick brown fox jumps over the lazy dog so there is at

5
00:00:23,880 --> 00:00:30,390
least one A one B one C all the way through C in this sentence that doesn't mean there's only one A

6
00:00:30,390 --> 00:00:36,690
and only one B there just has to be at least one quick side note there is such a thing as a perfect

7
00:00:36,690 --> 00:00:43,380
pan gram where each letter is only used one time but in English apparently it's impossible unless you

8
00:00:43,380 --> 00:00:46,780
use abbreviations like P HD and G.

9
00:00:46,780 --> 00:00:49,040
Q So we're not worried about those.

10
00:00:49,050 --> 00:00:54,780
We're focusing on a traditional Pentagram where each letter can be used more than once so quick brown

11
00:00:54,780 --> 00:00:55,760
fox.

12
00:00:55,890 --> 00:00:56,300
What else.

13
00:00:56,340 --> 00:00:59,000
Sphinx of black courts judge my vow.

14
00:00:59,220 --> 00:01:02,490
Pack my box with five dozen liquor jugs.

15
00:01:02,490 --> 00:01:07,710
So I'd like for you to write a function called is pen gram which accepts a sentence we can assume it

16
00:01:07,710 --> 00:01:08,250
is a string.

17
00:01:08,250 --> 00:01:13,200
You don't need to check to see if it's a number or anything like that and it should return true or false

18
00:01:13,560 --> 00:01:18,820
depending on whether that input string does in fact contain every letter in the English alphabet.

19
00:01:18,900 --> 00:01:23,910
So ABC all the way through Z and it should not care about casing.

20
00:01:23,910 --> 00:01:29,350
So as an example this string right here the 5 boxing wizards jump quickly.

21
00:01:29,430 --> 00:01:31,090
This is a pan gram.

22
00:01:31,130 --> 00:01:33,090
It does include every letter.

23
00:01:33,090 --> 00:01:34,230
It's an upper case T.

24
00:01:34,260 --> 00:01:35,900
At the beginning not a lowercase t.

25
00:01:36,090 --> 00:01:37,460
It should still return true.

26
00:01:38,040 --> 00:01:43,680
So you don't need to manually check does it contain uppercase D does it contain lowercase t.

27
00:01:43,860 --> 00:01:45,830
You can get around that pretty easily.

28
00:01:46,080 --> 00:01:50,760
And then here's an example where it's almost the same sentence but it's missing the L and the Y at the

29
00:01:50,760 --> 00:01:53,610
end so it does not have every letter.

30
00:01:53,610 --> 00:01:55,500
It returns false.

31
00:01:55,560 --> 00:02:02,220
Okay so pause give it a shot if you'd like and here's my attempt I'll define a function called is Pan

32
00:02:02,220 --> 00:02:05,250
Graham and it takes.

33
00:02:05,250 --> 00:02:09,240
How about sentence or phrase as tr.

34
00:02:09,330 --> 00:02:16,020
String and then what we need to do essentially is loop over every letter in the alphabet and check if

35
00:02:16,080 --> 00:02:17,840
that letter is in sentence.

36
00:02:18,150 --> 00:02:25,710
The naive approach would be if sentence and then we have multiple ways to check for the existence of

37
00:02:25,710 --> 00:02:26,450
a character.

38
00:02:26,490 --> 00:02:31,820
We could do index of and we want to make sure it's not equal to negative 1.

39
00:02:31,920 --> 00:02:37,630
So if we could do that and then do it for B and C and D and E and our code would be quite long.

40
00:02:37,710 --> 00:02:44,010
So instead we can do it dynamically using a loop but how do we loop over every character in the alphabet.

41
00:02:44,040 --> 00:02:48,800
Aside from creating an array from scratch and putting every letter in there as a string.

42
00:02:49,170 --> 00:02:55,380
An easier way in my opinion is to just loop over a string so we still have to type every character ABC

43
00:02:55,380 --> 00:03:06,270
d e f g h i j k l m n o p q r s t u hate w x y and z we have it now in a single string and we can loop

44
00:03:06,300 --> 00:03:07,280
over this.

45
00:03:07,470 --> 00:03:19,860
You can put this in a variable or we could just do for let let's go with character of ABC tizzy just

46
00:03:19,860 --> 00:03:20,690
to make sure it works.

47
00:03:20,700 --> 00:03:23,340
We can control that log character.

48
00:03:23,340 --> 00:03:28,350
We do need to use a 4 of or a regular for loop that would work with an eye.

49
00:03:28,410 --> 00:03:31,260
It's just annoying to deal with the index if we don't need to.

50
00:03:31,320 --> 00:03:33,570
We'll just use each individual character.

51
00:03:33,570 --> 00:03:38,460
Let's try running it is Pan gram and we do get every letter.

52
00:03:38,600 --> 00:03:40,560
OK so that's working.

53
00:03:40,560 --> 00:03:46,230
Now we just want to check if the butter is in sentence and as soon as we find one that is not in the

54
00:03:46,230 --> 00:03:48,620
sentence we want to return false.

55
00:03:48,630 --> 00:03:50,310
That means it's not a pan gram.

56
00:03:50,490 --> 00:03:54,660
It just takes one letter not being there for the whole thing to return false.

57
00:03:54,660 --> 00:04:02,400
So we could use index of if sentence dot index of character.

58
00:04:03,400 --> 00:04:04,980
Remember index of returns.

59
00:04:04,990 --> 00:04:05,740
Negative one.

60
00:04:05,740 --> 00:04:08,020
If it can't find that character.

61
00:04:08,020 --> 00:04:13,700
So if it's equal to negative 1 we could return false.

62
00:04:14,560 --> 00:04:17,150
And then where do you put the return true.

63
00:04:17,350 --> 00:04:19,640
All the way after the entire loop.

64
00:04:20,050 --> 00:04:25,720
If we make it all the way here it means every character was found as soon as one character is not found.

65
00:04:25,720 --> 00:04:27,250
We return false.

66
00:04:27,380 --> 00:04:30,420
So down here that means every character is there.

67
00:04:30,520 --> 00:04:34,270
Let's verify it refresh over here is Pan gram.

68
00:04:34,270 --> 00:04:38,710
I'll pass in this string although there is a problem with this string.

69
00:04:38,710 --> 00:04:46,180
We have a capital T at the beginning so I do need to update that for now to a lower case d and we get

70
00:04:46,180 --> 00:04:47,140
true.

71
00:04:47,200 --> 00:04:49,120
Let's try deleting a single letter.

72
00:04:49,120 --> 00:04:53,710
We now get false some other letter still false.

73
00:04:53,750 --> 00:04:55,870
OK it appears to be working.

74
00:04:56,080 --> 00:04:59,050
Now let's make it work with all string casings.

75
00:04:59,050 --> 00:05:02,740
I don't know why I said all uppercase and lowercase letters.

76
00:05:02,800 --> 00:05:09,280
The easiest way to account for different casings is just to equalize them so our string right here is

77
00:05:09,280 --> 00:05:10,800
all lowercase letters.

78
00:05:10,930 --> 00:05:14,080
So let's make a sentence all lowercase as well.

79
00:05:14,080 --> 00:05:21,130
So let's call sentence start to lowercase but remember this does not update sentence the string itself

80
00:05:21,160 --> 00:05:25,740
is immutable it returns a lowercase version of sentence.

81
00:05:25,870 --> 00:05:33,210
So let's save that to a variable let's call it lower cased and then instead of doing a sentence that

82
00:05:33,220 --> 00:05:37,850
index of will do lower cased dot index.

83
00:05:38,700 --> 00:05:45,280
So all we did was now use a lower case version of whatever sentence is passed in and compare it to only

84
00:05:45,340 --> 00:05:47,860
lowercase letters and we could go the other way.

85
00:05:47,950 --> 00:05:54,610
We could make it all caps and then this string would need to be a b c d in all caps as well.

86
00:05:54,670 --> 00:05:57,340
Let's see if it works again.

87
00:05:57,370 --> 00:06:00,310
Here is the original all lowercase it still works.

88
00:06:00,310 --> 00:06:06,900
Let's make an uppercase why it still works but if that Y is missing it's false it's not a paragraph.

89
00:06:07,210 --> 00:06:07,960
Cool.

90
00:06:08,080 --> 00:06:13,540
There is another small change we could make instead of using index of we could use a different method

91
00:06:13,840 --> 00:06:20,950
like includes includes is great but the downside is it's not supported in i.e. internet explorer.

92
00:06:20,950 --> 00:06:24,890
It's a newer method but let's just write it anyway.

93
00:06:24,970 --> 00:06:29,920
I think it makes the code easier to read instead of this index of equals negative one.

94
00:06:29,950 --> 00:06:31,870
We could rewrite it as lowercase.

95
00:06:31,930 --> 00:06:39,870
That includes character but we want to say if it does not include that character return false.

96
00:06:40,480 --> 00:06:44,500
In my opinion this is a little cleaner than index of character.

97
00:06:44,500 --> 00:06:47,100
Equals equals equals negative one.

98
00:06:47,140 --> 00:06:52,930
It's not a big deal obviously but since includes is a boolean method it returns true or false right

99
00:06:52,930 --> 00:06:53,420
away.

100
00:06:53,530 --> 00:06:58,030
They don't have to do a comparison and will return False if the string does not include it.

101
00:06:59,140 --> 00:07:01,500
Let's make sure it works.

102
00:07:02,450 --> 00:07:03,100
It does.

103
00:07:03,100 --> 00:07:05,580
We remove that why it does not work.

104
00:07:05,740 --> 00:07:08,490
We'll put the Y back and remove something else.

105
00:07:08,980 --> 00:07:13,360
If we add in extra characters as long as I put that I back it still should work.

106
00:07:13,360 --> 00:07:15,920
We're not looking for a perfect pentagram.

107
00:07:16,300 --> 00:07:16,660
All right.
