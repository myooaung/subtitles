1
00:00:00,330 --> 00:00:00,690
All right.

2
00:00:00,900 --> 00:00:07,980
So next up we're going to see an even better way of replicating the exact same functionality creating

3
00:00:08,010 --> 00:00:15,480
a template for a color in our case where we have different properties like RG and B that are numbers

4
00:00:15,480 --> 00:00:16,330
in this case.

5
00:00:16,560 --> 00:00:20,320
And then we also add methods that are on the color prototype.

6
00:00:20,580 --> 00:00:25,780
So there is only one copy of them across all instances of that color.

7
00:00:26,040 --> 00:00:29,920
And this better option is the new class syntax.

8
00:00:30,060 --> 00:00:37,380
So it is just syntactic sugar for exactly what we've been doing syntactic sugar remember is just like

9
00:00:37,390 --> 00:00:43,530
AB cleaner cuter way of writing something that behind the scenes is going to turn into what we already

10
00:00:43,530 --> 00:00:44,270
have here.

11
00:00:44,280 --> 00:00:49,020
So you still have to understand prototypes and the keyword this I want to show you how we could rewrite

12
00:00:49,020 --> 00:00:56,400
this as a single class and the main benefit in my opinion is that we don't have to add methods to the

13
00:00:56,400 --> 00:00:58,680
prototype manually like we have here.

14
00:00:58,740 --> 00:01:04,140
We don't have to break up the constructor function and then separately add methods.

15
00:01:04,140 --> 00:01:10,080
I hate doing that because you end up with this nice little compact function that explains the properties

16
00:01:10,080 --> 00:01:15,780
of your object and then you realize oh wait no there's all these other properties there on the prototype.

17
00:01:15,780 --> 00:01:18,960
So you're defined separately and individually like this.

18
00:01:19,050 --> 00:01:20,630
It just is kind of clunky.

19
00:01:20,700 --> 00:01:26,280
So let's see the alternative come at this out and you'll have to hang in there with a bit of this syntax

20
00:01:26,310 --> 00:01:27,090
upfront.

21
00:01:27,210 --> 00:01:29,250
So we have a keyword called Class.

22
00:01:30,270 --> 00:01:36,660
And then I can give my class a name and typically we use an uppercase letter to indicate that it is

23
00:01:36,660 --> 00:01:38,910
a class or a constructor function.

24
00:01:38,910 --> 00:01:45,760
It is a pattern for some sort of object just like we have XM LIHEAP request where the X is uppercase

25
00:01:46,230 --> 00:01:52,680
normally in JavaScript for a function name you know document that query selector we don't capitalized

26
00:01:52,720 --> 00:01:57,660
AQ but we do when we are creating classes or constructor functions.

27
00:01:58,020 --> 00:02:01,050
So this gives us a class next.

28
00:02:01,050 --> 00:02:06,920
Probably the most confusing part for beginners we always add in a constructor.

29
00:02:07,170 --> 00:02:15,320
Now a constructor is a function that will execute immediately whenever a new color is created so it's

30
00:02:15,320 --> 00:02:18,230
kind of like this constructor function here.

31
00:02:18,230 --> 00:02:28,250
So we would add in three arguments and if I called this counseled out log R G and B and maybe also console

32
00:02:28,250 --> 00:02:36,050
that log inside constructor like that if I create a new color we have to use the same syntax you've

33
00:02:36,050 --> 00:02:44,250
already seen new color save it to a variable concept which should we call it C one very boring pass

34
00:02:44,270 --> 00:02:47,060
in some numbers two five five six seven eight nine.

35
00:02:47,510 --> 00:02:48,220
Okay.

36
00:02:48,230 --> 00:02:56,940
And if I try running this in my browser refresh you can see my inside constructor console that log ran

37
00:02:56,960 --> 00:03:01,470
immediately and I have RG and b be printed out.

38
00:03:01,510 --> 00:03:03,550
So those arguments are passed through.

39
00:03:03,550 --> 00:03:09,010
So I never said run the constructor I never called Dot constructor or anything like that.

40
00:03:09,130 --> 00:03:12,530
It automatically runs as long as its name constructor.

41
00:03:12,700 --> 00:03:16,910
So that is a must have whenever you define a class you have to have the class keyword.

42
00:03:17,080 --> 00:03:22,600
You need to have the Constructor which will run immediately whenever we instantiate a new instance of

43
00:03:22,600 --> 00:03:30,610
color or whatever the classes assemble HDP request or the Dog class or the alert class or Button class

44
00:03:31,180 --> 00:03:35,710
you have to call it with new and you need to have a constructor there.

45
00:03:35,710 --> 00:03:44,230
So usually in the constructor we're going to access this this dot a or this dot R equals are this dot

46
00:03:44,230 --> 00:03:49,060
B equals B and this dot G equals G.

47
00:03:49,090 --> 00:03:56,320
So these are going to be added as properties on this color object that we get returned just like we

48
00:03:56,320 --> 00:03:59,020
had this here in our constructor function.

49
00:03:59,020 --> 00:04:00,550
Same idea.

50
00:04:00,550 --> 00:04:04,510
This will automatically refer to a new object.

51
00:04:04,510 --> 00:04:09,580
So when we call new color it still follows those same steps even though it's in a class it's going to

52
00:04:09,580 --> 00:04:14,460
make a new empty object and it sets the value of this to that object.

53
00:04:14,470 --> 00:04:21,740
So this dot are will be whatever is passed in as are the Stop B will be whatever is passed into B and

54
00:04:21,760 --> 00:04:27,100
this g the order doesn't matter but it's driving me crazy to have B before G.

55
00:04:27,100 --> 00:04:34,210
So I would probably change that up but it won't change anything let's also add in a name for the color.

56
00:04:34,330 --> 00:04:35,290
We can do that last.

57
00:04:35,290 --> 00:04:38,680
Maybe this dot name equals.

58
00:04:38,800 --> 00:04:41,830
And then this could be a name to describe that color.

59
00:04:41,830 --> 00:04:46,280
So this dot name equals whatever name was passed in and you can change these.

60
00:04:46,300 --> 00:04:47,630
You don't have to match.

61
00:04:47,770 --> 00:04:47,980
Right.

62
00:04:47,980 --> 00:04:52,930
We could have name and name it as color name instead.

63
00:04:53,080 --> 00:04:56,790
But this is the property we are adding to the object.

64
00:04:57,130 --> 00:05:01,470
And typically we use the exact same name very common to see that.

65
00:05:01,480 --> 00:05:01,770
OK.

66
00:05:02,200 --> 00:05:05,850
So as far as a name for this color what even is this color.

67
00:05:05,860 --> 00:05:08,260
Let's just take a look using V.S. code here.

68
00:05:08,290 --> 00:05:10,690
Let's just put our G.B. in front of that OK.

69
00:05:10,690 --> 00:05:12,000
It's a reddish color.

70
00:05:12,040 --> 00:05:13,810
We'll call that tomato.

71
00:05:13,890 --> 00:05:19,140
So we'll pass that in tomato as a string like that.

72
00:05:19,520 --> 00:05:19,820
OK.

73
00:05:20,640 --> 00:05:21,710
So let's look at this.

74
00:05:21,720 --> 00:05:27,640
See one when I run the code see one is an object.

75
00:05:27,640 --> 00:05:31,560
It has a b a g a name and an R..

76
00:05:31,810 --> 00:05:38,380
They were all set in this constructor so I never made an empty object myself just like I never did it

77
00:05:38,380 --> 00:05:39,180
here.

78
00:05:39,340 --> 00:05:41,780
The new keyword takes care of that.

79
00:05:41,890 --> 00:05:47,290
All I did was say on this new object that will be created for me even though I am not ever seeing it

80
00:05:47,950 --> 00:05:53,950
and it magically has stored in the value of this ad in our property set it to this argument or this

81
00:05:53,950 --> 00:05:57,190
parameter are same for GP and name.

82
00:05:57,190 --> 00:05:57,980
All right.

83
00:05:58,180 --> 00:06:01,770
Now let's look at the prototype for this color.

84
00:06:01,900 --> 00:06:02,460
This object.

85
00:06:02,470 --> 00:06:06,040
You can see the constructor is set to color.

86
00:06:06,040 --> 00:06:07,010
All right.

87
00:06:07,240 --> 00:06:08,590
So we didn't do that either.

88
00:06:08,740 --> 00:06:12,180
But by using new IT ALL TAKES CARE OF IT.

89
00:06:12,190 --> 00:06:13,500
NOW WHAT ABOUT methods.

90
00:06:13,510 --> 00:06:15,790
This is the real advantage in my opinion.

91
00:06:15,940 --> 00:06:21,540
We don't have to do color dot prototype dot whatever like we did up here.

92
00:06:21,580 --> 00:06:25,380
We could do something trivial like how about Greece.

93
00:06:25,600 --> 00:06:27,420
I don't know why a color would have.

94
00:06:27,790 --> 00:06:33,100
The easiest way to do this is with this adorable syntax that we can use instead of classes.

95
00:06:33,220 --> 00:06:35,550
We can actually use this instead of objects in general.

96
00:06:35,560 --> 00:06:39,870
We talked about it in our objects what we call it Secret Life of object section.

97
00:06:39,870 --> 00:06:44,530
So a new shorthand syntax for defining a method and here I can just return.

98
00:06:44,680 --> 00:06:47,480
Hello from a color.

99
00:06:48,550 --> 00:06:52,040
And actually why don't we include the color name from.

100
00:06:52,180 --> 00:06:55,570
I need to make this a template literal tactics.

101
00:06:55,750 --> 00:07:00,850
This dot name and then will add an exclamation point at the end.

102
00:07:00,850 --> 00:07:06,630
So this is now a method on every color but not on the instances.

103
00:07:06,640 --> 00:07:08,110
This is a nice part.

104
00:07:08,110 --> 00:07:10,600
It's just like we had done this here.

105
00:07:10,750 --> 00:07:17,880
Color dot prototype dot greet equals some function but we don't have to type prototype.

106
00:07:17,890 --> 00:07:19,000
We don't have to type color.

107
00:07:19,000 --> 00:07:25,650
We just put it inside this class so we can group everything together which makes things much easier.

108
00:07:25,720 --> 00:07:26,670
So let's try it.

109
00:07:26,680 --> 00:07:27,970
We have this color one.

110
00:07:28,000 --> 00:07:29,690
Let's open it up.

111
00:07:29,710 --> 00:07:33,160
It does not have green showing here said Green is on the prototype.

112
00:07:33,160 --> 00:07:35,800
There's only one copy of Grete.

113
00:07:35,890 --> 00:07:37,570
See one dot greet.

114
00:07:37,720 --> 00:07:39,130
Let's execute it.

115
00:07:39,130 --> 00:07:40,430
Hello from tomato.

116
00:07:40,900 --> 00:07:44,510
Let's make a different color new color.

117
00:07:44,590 --> 00:07:47,760
Let's do 255 255 255.

118
00:07:47,860 --> 00:07:49,770
And I think that's white.

119
00:07:50,050 --> 00:07:52,760
Save that to a variable cost white.

120
00:07:52,780 --> 00:07:59,570
Sure and call white dot greet hello from white.

121
00:07:59,570 --> 00:08:00,770
All right.

122
00:08:00,770 --> 00:08:06,140
So let's actually add in some methods that we would want like in our G.B. method.

123
00:08:06,140 --> 00:08:08,580
We can copy the logic from what we did earlier.

124
00:08:08,690 --> 00:08:14,540
We'll just return this string but we need to make sure we get our G and B.

125
00:08:14,540 --> 00:08:17,540
And we have access to those just like we did here.

126
00:08:17,570 --> 00:08:19,410
By using the keyword this.

127
00:08:19,550 --> 00:08:26,300
So this anytime we're instead of a class this refers to the instance of the class the individual color

128
00:08:26,320 --> 00:08:26,760
object.

129
00:08:26,760 --> 00:08:32,890
So not the prototype or anything not the function not the window unless you're not using the new keyword

130
00:08:32,900 --> 00:08:33,640
that is.

131
00:08:33,770 --> 00:08:37,970
But if you use the new keyword this will refer to the individual object.

132
00:08:38,060 --> 00:08:44,960
And then whenever we have an object a color like white dot greet White is a color object when we greet

133
00:08:45,380 --> 00:08:45,860
the keyword.

134
00:08:45,860 --> 00:08:50,430
This was used instead of greet got rid of it but we had this name.

135
00:08:50,600 --> 00:08:53,750
This referred to the individual object the instance.

136
00:08:54,080 --> 00:08:55,210
So we can do structure.

137
00:08:55,270 --> 00:09:04,820
We could do this that are this that g this top b or just d structure our G and B from this.

138
00:09:04,930 --> 00:09:14,390
Now if I call it we have c 1 C one dot R B gives me this nice RG B string take a look.

139
00:09:14,470 --> 00:09:16,590
And we get that reddish tomato we color.

140
00:09:16,730 --> 00:09:19,950
Let's add another method in let's go with this hex method.

141
00:09:20,030 --> 00:09:29,800
So I'm just going to copy the logic and add hex and that relies on our G and B which we already have

142
00:09:29,830 --> 00:09:30,960
on the object.

143
00:09:31,060 --> 00:09:40,120
So I'm going to d structure again let's try that one out see one dot hex and did we have another color

144
00:09:40,280 --> 00:09:41,150
white.

145
00:09:41,320 --> 00:09:43,780
I think I defined that and refresh the page.

146
00:09:43,780 --> 00:09:46,460
So let's define another color over here.

147
00:09:46,510 --> 00:09:47,880
Let's call this one red.

148
00:09:48,100 --> 00:09:56,690
And then another one which will be white and just have 255 255 255 now need to save that to a different

149
00:09:56,690 --> 00:09:57,510
variable.

150
00:09:57,520 --> 00:10:07,230
White OK so if we check here white dots hex we get f f f f f f f that's accurate.

151
00:10:07,270 --> 00:10:12,240
And you know that one hex color and then if we do red dot hex we get a different outcome.

152
00:10:12,460 --> 00:10:18,790
And if we compare them red dot hex not execute them but compare the references triple equals white dot

153
00:10:18,790 --> 00:10:26,080
hex they are the same function because they're on the prototype they are not in the individual instance

154
00:10:26,440 --> 00:10:31,240
they're over here and let's add in our our GPA as well.

155
00:10:31,240 --> 00:10:32,470
Let's see.

156
00:10:32,680 --> 00:10:34,410
This was our GPA.

157
00:10:34,490 --> 00:10:38,510
We'll copy this logic but I think I'm going to refactor this.

158
00:10:38,800 --> 00:10:43,240
If we look at our GPA it accepts a parameter called Alpha.

159
00:10:43,240 --> 00:10:46,200
We set it to be 1.0 as a default value.

160
00:10:46,270 --> 00:10:50,050
It returns something very similar to our G.B..

161
00:10:50,080 --> 00:10:53,370
This right here is the same thing.

162
00:10:53,560 --> 00:11:01,480
We just have a added after the fact in our GPA and we have our GPA at the start and Archie B at the

163
00:11:01,480 --> 00:11:02,500
start of our B.

164
00:11:03,190 --> 00:11:14,330
So we could make a separate function maybe call it enter RG B like that and all that I'll do there.

165
00:11:14,360 --> 00:11:17,330
Nice and easy is return.

166
00:11:17,330 --> 00:11:22,160
This part of the string so I'm just going to copy the whole thing over you'll see what I'm going for.

167
00:11:22,850 --> 00:11:24,830
I'm just going to return this string.

168
00:11:24,830 --> 00:11:27,750
No parents just a comma separated list.

169
00:11:27,770 --> 00:11:32,250
So it would look like two five five common to five five comma two five five.

170
00:11:32,360 --> 00:11:39,710
So if I called this from within another method I could easily do our B and put parental around that

171
00:11:40,340 --> 00:11:45,110
or I could add in another number and do RGA around that.

172
00:11:45,650 --> 00:11:51,050
So I just made a method that is going to help me out it's called inter GP and now we get the opportunity

173
00:11:51,050 --> 00:11:55,950
to talk about how we would call one of these methods from within another instance method.

174
00:11:55,950 --> 00:12:04,580
Another method on this class to do that we just reference this same thing so we could call this Dot's

175
00:12:05,120 --> 00:12:06,530
inner our G.B.

176
00:12:09,220 --> 00:12:16,360
that should give us a string that will go on the inside of our our GP right here and I need to escape

177
00:12:16,360 --> 00:12:18,550
that with my dollar sign.

178
00:12:18,550 --> 00:12:27,550
Curly braces let's make sure that works for our GP refresh the page white dot our GP that looks good

179
00:12:28,570 --> 00:12:33,930
we can verify if we paste that down here it is white at least according to V.S. code.

180
00:12:33,940 --> 00:12:43,870
Now we can rewrite RGA to do the same thing so I can get rid of that and replace it with this dot enter

181
00:12:44,200 --> 00:12:52,810
our GP and executed it as a function and then we add RGA open Perrin and then closing per end at the

182
00:12:52,810 --> 00:13:01,300
end as well as karma the alpha value so very similar because we're using the same function on the inside.

183
00:13:01,350 --> 00:13:07,190
It just gives us a good opportunity to call a function from within our method to be more accurate from

184
00:13:07,190 --> 00:13:07,510
within.

185
00:13:07,510 --> 00:13:09,890
Another method on the class.

186
00:13:10,370 --> 00:13:17,330
So does white that RG be a work that's going to be quite boring not as exciting as let's do read that

187
00:13:17,330 --> 00:13:19,310
our GPA.

188
00:13:19,310 --> 00:13:19,810
There we go.

189
00:13:20,360 --> 00:13:26,570
And if he tries zero point four We get a more transparent color could do the same thing.

190
00:13:26,570 --> 00:13:35,540
Document dad's body style that's background color equals red dot our GPA.

191
00:13:35,540 --> 00:13:40,740
This is the full strength of that red color and this is half strength.

192
00:13:40,820 --> 00:13:42,950
This is a tenth of the strength.

193
00:13:43,430 --> 00:13:44,360
Cool.

194
00:13:44,360 --> 00:13:49,000
So we've added a couple of methods and we've covered most of the basics of classes so far.

195
00:13:49,400 --> 00:13:53,760
You define a class with the class keyword you usually capitalized that name.

196
00:13:53,840 --> 00:13:56,310
You should always capitalize it although you don't have to.

197
00:13:56,330 --> 00:13:57,500
You should.

198
00:13:57,500 --> 00:14:01,850
And then instead of those curly braces the first thing we need to add is a constructor.

199
00:14:01,850 --> 00:14:07,310
This function will run automatically whenever you instantiate a new instance of the class.

200
00:14:07,580 --> 00:14:12,800
So we don't call it manually inside of that constructor and instead of the entire class if we're in

201
00:14:12,800 --> 00:14:20,700
a method like I have here constructor or down here the keyword this will refer to the individual object.

202
00:14:20,720 --> 00:14:27,050
So this dot are this dot gee this dot B I'm assigning properties to each color not to the prototype

203
00:14:27,080 --> 00:14:33,160
but to the color then these methods I've added they are added to the prototype automatically.

204
00:14:33,360 --> 00:14:36,700
So I don't have to do any of this colored up prototyped out blah blah blah.

205
00:14:37,140 --> 00:14:39,960
I can keep everything together inside this class.

206
00:14:39,960 --> 00:14:42,510
I don't have to have the separate constructor function.

207
00:14:42,610 --> 00:14:48,990
Then later add my methods I can put it all in one happy family and defined my class defined my pattern

208
00:14:49,050 --> 00:14:55,560
for every color every color has an RG and b in a name in every color has these four methods but they're

209
00:14:55,560 --> 00:15:01,080
located on the prototype they look up to that one prototype template object.

210
00:15:01,370 --> 00:15:04,440
Okay so we're gonna continue to add on to our class in the next video.
