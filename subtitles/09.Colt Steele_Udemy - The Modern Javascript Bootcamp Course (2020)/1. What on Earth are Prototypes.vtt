WEBVTT
1
00:00:00.210 --> 00:00:01.170
Welcome back.

2
00:00:01.170 --> 00:00:07.450
In this section we're focusing on object oriented programming or at least javascript flavor of Opie.

3
00:00:07.530 --> 00:00:13.500
Object oriented programming so we'll cover things like constructor functions and classes super keyword

4
00:00:13.500 --> 00:00:14.430
inheritance.

5
00:00:14.520 --> 00:00:21.390
But we're gonna start with a quick video on a quirky but important aspect of javascript object prototypes.

6
00:00:21.600 --> 00:00:26.110
So you may have come across this at some point we've briefly touched on it throughout the course a couple

7
00:00:26.110 --> 00:00:26.970
of times.

8
00:00:26.970 --> 00:00:30.990
We're not going to take a deeper dive into what the heck a prototype is.

9
00:00:31.110 --> 00:00:32.690
What does it mean.

10
00:00:32.760 --> 00:00:33.870
What is this thing.

11
00:00:33.900 --> 00:00:40.830
When I look at an array What is this proto underscore underscore proto property.

12
00:00:40.980 --> 00:00:45.420
So that's we're going to talk about first and then we'll go more into creating constructor functions

13
00:00:45.450 --> 00:00:47.320
and classes and all of that stuff.

14
00:00:47.340 --> 00:00:47.610
All right.

15
00:00:47.640 --> 00:00:53.280
So according to MDA and prototypes are the mechanism by which JavaScript objects inherent features inherit

16
00:00:53.340 --> 00:00:54.630
features from one another.

17
00:00:54.690 --> 00:00:59.120
Objects can have a prototype object which acts as a template object.

18
00:00:59.130 --> 00:01:05.430
So what this means is that certain objects will take an array as an example an array has a whole bunch

19
00:01:05.430 --> 00:01:06.350
of different methods.

20
00:01:06.360 --> 00:01:12.660
If we look at something like array on MDA on the left side we've seen this a couple of times methods

21
00:01:12.870 --> 00:01:13.710
under methods.

22
00:01:13.710 --> 00:01:21.810
There are so many methods that start with a red dot prototype dot can cat entries every fill Key's push

23
00:01:21.810 --> 00:01:30.150
reduce all these methods that we use all the time like one two three dot push for that push method is

24
00:01:30.150 --> 00:01:40.350
not defined as a method on this array right here by save it to a variable const R R equals one two three.

25
00:01:40.470 --> 00:01:44.700
If we look at that array I don't see any methods right here.

26
00:01:44.820 --> 00:01:53.730
I mean I could define my own method a red dot saying equals a function and we can console that log.

27
00:01:53.780 --> 00:01:56.190
Hi I have a la la la.

28
00:01:56.910 --> 00:02:04.920
Okay so there is a function or method technically that I added to the array itself the individual array.

29
00:02:05.070 --> 00:02:07.700
It has a method called Sing remember.

30
00:02:07.830 --> 00:02:13.150
Arrays are objects in javascript so when we added that method to array we see it show up here.

31
00:02:13.290 --> 00:02:14.870
But when I call a red dot.

32
00:02:14.880 --> 00:02:18.760
Push push 5.

33
00:02:18.930 --> 00:02:21.130
I don't see that method listed here.

34
00:02:21.150 --> 00:02:23.230
I don't see any of the methods we use.

35
00:02:23.310 --> 00:02:30.280
They're all inside of this property called underscore underscore Prado underscore underscore just Proto.

36
00:02:30.330 --> 00:02:33.800
Some people also call this Dunder double underscore Dunder.

37
00:02:33.980 --> 00:02:34.970
I just say Proto.

38
00:02:35.370 --> 00:02:44.010
It's a property that references the array prototype so a prototype is the template object for in this

39
00:02:44.010 --> 00:02:47.640
case arrays it contains a bunch of methods typically.

40
00:02:47.880 --> 00:02:51.210
So all of these methods that every array will have access to.

41
00:02:51.210 --> 00:02:57.120
But rather than defining them individually in every single array a separate copy right I could make

42
00:02:57.300 --> 00:02:58.480
another array here.

43
00:02:58.600 --> 00:03:03.300
Concerta Ray to equals four five six.

44
00:03:03.450 --> 00:03:04.690
We look at a ray too.

45
00:03:04.760 --> 00:03:11.760
It doesn't have its own copy of push and pop all that it has just as the original array that we created.

46
00:03:11.780 --> 00:03:17.730
They both share a property called proto which is a reference to this blueprint object.

47
00:03:17.840 --> 00:03:19.400
The prototype.

48
00:03:19.400 --> 00:03:25.310
This prototype contains all of the methods and through the magic of javascript I can simply access array

49
00:03:25.340 --> 00:03:28.960
dots and then what's another one we haven't used yet.

50
00:03:29.000 --> 00:03:30.380
How about includes.

51
00:03:30.380 --> 00:03:33.130
Does that array include two we get true.

52
00:03:33.140 --> 00:03:39.530
This includes method is not defined on every single array that we make it is defined on this prototype

53
00:03:39.620 --> 00:03:41.030
object.

54
00:03:41.030 --> 00:03:43.960
Now the reason I'm bringing this up is that it matters.

55
00:03:44.000 --> 00:03:49.820
It's something we will cover and come back to as we talk about defining classes and constructor functions.

56
00:03:49.820 --> 00:03:56.900
So rather than having a separate method on every single array called push there is one prototype and

57
00:03:56.900 --> 00:04:04.820
each array has a reference to that prototype with this special property double underscore proto and

58
00:04:04.820 --> 00:04:08.330
we actually can see this in other types of objects in javascript.

59
00:04:08.390 --> 00:04:13.610
What if I take a look at the document dump body and I save that to a variable concept.

60
00:04:14.570 --> 00:04:18.930
We'll just call this body if we look at body.

61
00:04:18.970 --> 00:04:21.370
I'm gonna have to console that desire.

62
00:04:21.430 --> 00:04:24.360
Body will open it up.

63
00:04:24.520 --> 00:04:31.930
It has certain properties that are specific to this body things like the base you are I the background

64
00:04:32.320 --> 00:04:35.050
but then it also has a proto down at the bottom.

65
00:04:36.340 --> 00:04:42.220
It's prototype is an HD female body element and there are different methods and properties that correspond

66
00:04:42.580 --> 00:04:44.590
to that prototype template.

67
00:04:44.590 --> 00:04:51.160
This age came out body template so that's the basic idea of a prototype or prototypes in JavaScript.

68
00:04:51.160 --> 00:04:57.480
We have this one object that is the the prototype for other types of objects.

69
00:04:57.580 --> 00:04:59.500
So there is no Ray prototype.

70
00:04:59.500 --> 00:05:09.070
If I look at a ray dot prototype capital a ray so not an individual instance of an array but capital

71
00:05:09.100 --> 00:05:10.420
a array.

72
00:05:10.420 --> 00:05:17.500
Here is everything on that array prototype and I could actually define my own type of an object my own

73
00:05:17.500 --> 00:05:23.410
brand new object and set its prototypes to the array prototype and I would have access to those array

74
00:05:23.410 --> 00:05:26.880
methods in my whatever object my version of the array.

75
00:05:27.550 --> 00:05:28.890
But we're not there yet.

76
00:05:28.930 --> 00:05:34.090
All we need to know at this point is that prototypes are like a template object that's that's actually

77
00:05:34.090 --> 00:05:40.030
what they are they are objects they contain typically a bunch of methods and then we can create multiple

78
00:05:40.030 --> 00:05:45.610
objects that share the same prototype so that they all have access to the same methods without having

79
00:05:45.610 --> 00:05:47.380
to have their own copy.

80
00:05:47.410 --> 00:05:53.380
Now as a fun little demo here we can actually mess with or add our own properties and methods to the

81
00:05:53.380 --> 00:05:57.800
array prototype or object prototype or whatever prototypes we want.

82
00:05:57.820 --> 00:06:00.850
There is a string dot prototype as well.

83
00:06:00.850 --> 00:06:02.190
Strings are kind of confusing.

84
00:06:02.220 --> 00:06:06.880
Yes we've talked about have strings and numbers and billions are technically primitive types.

85
00:06:06.940 --> 00:06:13.270
However in JavaScript they all get these intermediate object wrappers and that's where all those string

86
00:06:13.270 --> 00:06:16.360
methods come from the string prototype.

87
00:06:17.740 --> 00:06:21.510
So I could actually add on something to the string prototype right now.

88
00:06:21.530 --> 00:06:26.770
If I just take a look we see a bunch of string methods like can cat and a property like length.

89
00:06:26.770 --> 00:06:29.710
What else do we have substring starts with.

90
00:06:29.710 --> 00:06:30.960
Search replace.

91
00:06:31.420 --> 00:06:40.150
I could add my own method called Grumps go back to good old Grumps set it to an arrow function and we'll

92
00:06:40.150 --> 00:06:48.570
just console that log but we alert go away just like that okay.

93
00:06:49.640 --> 00:06:51.260
So it doesn't seem like much happened.

94
00:06:51.290 --> 00:06:57.830
We look at string dot prototype this prototype object this template for other strings now has a property

95
00:06:57.830 --> 00:06:59.000
called crumpets.

96
00:06:59.090 --> 00:07:00.890
So why don't I make a new String.

97
00:07:00.910 --> 00:07:06.480
I'll call this concept a cat equals blue I guess.

98
00:07:06.590 --> 00:07:07.730
One of my cats.

99
00:07:07.790 --> 00:07:12.170
Now what if I try and call cat dot Grumps.

100
00:07:12.350 --> 00:07:12.980
Hey.

101
00:07:13.280 --> 00:07:15.310
This page says go away.

102
00:07:15.320 --> 00:07:20.960
So now every time you make a string at least until I refresh my page I now have access to a new string

103
00:07:20.960 --> 00:07:23.230
method called rumpus.

104
00:07:23.240 --> 00:07:28.840
I could also add on a property I could do a string dot prototype Dot.

105
00:07:28.850 --> 00:07:34.620
How about we do yell and do something slightly more complicated I think if we move over to my code here.

106
00:07:34.730 --> 00:07:40.250
Let's access string dot prototype which remember is the prototype object for every string.

107
00:07:40.250 --> 00:07:43.290
It is the place where string methods are stored.

108
00:07:43.310 --> 00:07:51.350
I can now add on something let's go with yellow which will be a function and let's just console but

109
00:07:51.350 --> 00:07:55.070
log this instead of here for a moment.

110
00:07:55.070 --> 00:07:58.410
So we're getting ahead of ourselves but I want to just show something kind of fun.

111
00:07:58.640 --> 00:08:10.280
If I run my code I make some string like hello and I call dot yell this referred to this string Hello.

112
00:08:10.320 --> 00:08:19.360
So what I could do is console that log this dot to uppercase so this refers to whatever string we're

113
00:08:19.360 --> 00:08:24.660
calling the method on which is actually something we've seen before where we had an object and we would

114
00:08:24.660 --> 00:08:27.770
refer to this dot X instead of that object.

115
00:08:27.820 --> 00:08:34.120
This will refer to whatever's on the left hand side of that dot at least in this case.

116
00:08:34.390 --> 00:08:35.100
So let's try.

117
00:08:35.110 --> 00:08:36.730
Hello Dot yellow again.

118
00:08:36.730 --> 00:08:37.080
All right.

119
00:08:37.090 --> 00:08:41.810
We've just called an existing method dot to uppercase which is already there.

120
00:08:41.860 --> 00:08:52.920
So why don't we return a template literal string where we have this dot to uppercase plus a bunch of

121
00:08:53.010 --> 00:09:01.660
bunch of exclamation points and then how about some other stuff like O M G more exclamation points.

122
00:09:01.860 --> 00:09:03.850
That's screaming apparently.

123
00:09:03.920 --> 00:09:04.800
OK.

124
00:09:05.040 --> 00:09:11.230
Refresh my page and make some string like I love you Dot.

125
00:09:11.310 --> 00:09:14.530
Yo and this is what we get.

126
00:09:14.540 --> 00:09:18.740
We've made our own method that we can use on every single string.

127
00:09:18.740 --> 00:09:21.490
It's important to realize that this is not really a good idea.

128
00:09:21.500 --> 00:09:24.880
This is not a pattern that I would recommend you follow all the time.

129
00:09:25.070 --> 00:09:27.940
It's just a demonstration of how prototypes work.

130
00:09:28.160 --> 00:09:36.470
So we can add something to the array prototype Ray dot prototype which is a specific object a template

131
00:09:36.980 --> 00:09:42.950
that stores methods and properties for every single array and we can override something like dot pop

132
00:09:44.490 --> 00:09:48.360
and we'll make that a function but it will just always return.

133
00:09:48.360 --> 00:09:49.170
Sorry.

134
00:09:49.170 --> 00:09:51.660
I want that element.

135
00:09:51.660 --> 00:09:56.860
I will never pop it off.

136
00:09:56.860 --> 00:09:57.140
Okay.

137
00:09:58.300 --> 00:10:05.560
So we are now replacing the existing pop that every array looks up to on its array prototype.

138
00:10:05.620 --> 00:10:11.560
So if I make an array like three four five and I call pop huh it doesn't work.

139
00:10:11.620 --> 00:10:13.860
We get our version.

140
00:10:13.900 --> 00:10:18.720
So kind of fun stuff not highly recommended but it is going to be informative.

141
00:10:18.730 --> 00:10:20.940
It would be helpful to understand prototypes.

142
00:10:21.010 --> 00:10:23.290
It's actually a relatively simple idea.

143
00:10:23.290 --> 00:10:24.520
It's very intimidating.

144
00:10:24.520 --> 00:10:31.870
I think when you're starting out that the idea boils down to having a single object that contains common

145
00:10:31.870 --> 00:10:39.790
properties and methods that other copies other objects of arrays or other strings look up to to find

146
00:10:39.790 --> 00:10:41.520
their common properties.

147
00:10:41.530 --> 00:10:43.850
It's a place to store things the template blueprint.

148
00:10:43.870 --> 00:10:49.000
There's so many ways of putting it but the term in Javascript is prototype.

149
00:10:49.110 --> 00:10:55.050
The one confusing thing that I would like to address is I make an array here concept.

150
00:10:55.320 --> 00:11:02.760
I don't know numbers again and notes so boring numbs seven eight nine if I look at numbers.

151
00:11:02.870 --> 00:11:07.560
What does this underscore proton versus prototype.

152
00:11:07.820 --> 00:11:15.170
So they both are very similar and they both sound like prototype or proton this here a ray dot prototype

153
00:11:15.380 --> 00:11:20.390
is the actual object where we add the methods to or the properties.

154
00:11:20.420 --> 00:11:23.720
This is the template object the prototype.

155
00:11:23.720 --> 00:11:31.630
This is a reference so underscore Proton is a property name on this array or on this string.

156
00:11:31.670 --> 00:11:32.340
I could look.

157
00:11:32.420 --> 00:11:39.560
I don't have a string now but I could make a string const dog equals Timothy and if I look at dog dot

158
00:11:40.070 --> 00:11:48.970
underscore proto it's a reference to the string prototype to this object so it's a reference vs..

159
00:11:49.080 --> 00:11:56.520
This here is the actual prototype object that I can add on to but inside individual strings or arrays

160
00:11:56.520 --> 00:12:02.250
or other objects the property name that is used to reference that actual template the prototype object

161
00:12:02.490 --> 00:12:08.250
is double underscore protip it's pretty rare that you would ever need to touch this yourself or do anything

162
00:12:08.250 --> 00:12:10.790
with underscore proto.

163
00:12:10.830 --> 00:12:16.610
If anything you will be accessing the actual prototype itself and manipulating it.

164
00:12:16.770 --> 00:12:19.510
So that is a brief primer on prototypes.

165
00:12:19.530 --> 00:12:23.490
Next we're going to talk about some basics of constructor functions in JavaScript.
