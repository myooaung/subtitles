WEBVTT
1
00:00:00.900 --> 00:00:06.170
In the last video I made a huge deal around the fact that we can only ever require a file one single

2
00:00:06.170 --> 00:00:07.330
time.

3
00:00:07.340 --> 00:00:11.390
Now again you might be thinking Steven this is a lot of detail right here at the very start of learning

4
00:00:11.390 --> 00:00:15.560
node but again I'm showing you this because I can just about guarantee that this is going to cause you

5
00:00:15.560 --> 00:00:16.960
trouble at some point in time.

6
00:00:16.970 --> 00:00:19.490
So let me show you the last step here.

7
00:00:19.490 --> 00:00:25.370
This is why we care about knowing that we only run a given file exactly one time in the lifecycle of

8
00:00:25.400 --> 00:00:26.590
a project.

9
00:00:26.780 --> 00:00:32.360
So I'm gonna go back over to my script that J.S. file and then inside of you are going to delete everything

10
00:00:32.360 --> 00:00:38.660
that I have and I'm going to declare a variable inside of here called counter and I'll start it off

11
00:00:38.720 --> 00:00:45.890
at 0 then I'm going to set up a module that exports but this time rather than just exporting a simple

12
00:00:45.890 --> 00:00:54.000
string or a number I'm gonna export a big object and then inside this object I'm going to set up some

13
00:00:54.060 --> 00:00:59.080
different functions for viewing the value of counter and setting its value as well.

14
00:00:59.910 --> 00:01:02.820
So inside this object I'll say set or about increment.

15
00:01:02.820 --> 00:01:06.300
That makes more sense since increment counter.

16
00:01:06.300 --> 00:01:10.940
So that's gonna be a function and any time I run that I'm going to increment counter by once I'll say

17
00:01:10.950 --> 00:01:20.380
counter is counter plus 1 and I'll setup a second function on here called Get counter and as you might

18
00:01:20.380 --> 00:01:25.370
guess I'm going to return the counter variable.

19
00:01:25.470 --> 00:01:31.030
Now here's the key when we required this file for the very first time we're going to set up the counter

20
00:01:31.030 --> 00:01:35.820
variable and we're going to declare this object and export it.

21
00:01:35.850 --> 00:01:42.270
This object has a closure scope reference to the counter variable and the super important thing to understand

22
00:01:42.270 --> 00:01:48.570
here is that the counter variable is only ever going to be declared exactly one time because we only

23
00:01:48.690 --> 00:01:50.570
can execute the code inside of here.

24
00:01:50.610 --> 00:01:56.820
One time when the file first gets required so behind the scenes we can kind of imagine that this object

25
00:01:56.820 --> 00:02:05.800
right here is going to be taken and assigned into this require cache like so now I know the diagram

26
00:02:05.800 --> 00:02:11.200
here now looks really ugly but hopefully you can get a sense that we now have that object inside of

27
00:02:11.200 --> 00:02:21.000
our cache like so so if we now ever require in my script file a second or third or fourth time we do

28
00:02:21.000 --> 00:02:23.170
not read a clear the counter variable.

29
00:02:23.220 --> 00:02:28.110
Instead we're just getting back a reference to this exact same object.

30
00:02:28.110 --> 00:02:34.620
So there's only ever exactly one counter variable in memory just one and it's going to be shared every

31
00:02:34.620 --> 00:02:40.790
single time that we tried to require in my script JSA a additional time okay.

32
00:02:40.800 --> 00:02:44.630
So let's now test this thing out and you're going to start to see some interesting behavior.

33
00:02:44.670 --> 00:02:48.870
And it's not going to quite work as you might have originally expected when you first started working

34
00:02:48.870 --> 00:02:55.640
with node so I gonna go back over to next dot J.S. I'm gonna delete everything inside of here again

35
00:02:56.920 --> 00:03:08.390
and I'll say about counter object is require my script J.S. I'll do a console log of counter object

36
00:03:08.420 --> 00:03:12.860
dot get counters or a number that is the function that's going to get us whatever the current value

37
00:03:12.860 --> 00:03:17.540
is when we first run this console log at the very start of our program the counter should start off

38
00:03:17.570 --> 00:03:21.970
as 0 then after that I'm going to increment the counter.

39
00:03:22.000 --> 00:03:26.740
Let's do a counter object increment counter.

40
00:03:26.850 --> 00:03:31.850
Like so and I'll just do another console log again right after that.

41
00:03:32.040 --> 00:03:36.850
So at this point starting pretty basic let's just establish a baseline of what the counter object looks

42
00:03:36.850 --> 00:03:37.840
like.

43
00:03:37.920 --> 00:03:43.030
It'll save both these files and then run node index dot J.S. again.

44
00:03:43.080 --> 00:03:47.390
And sure enough I get 0 and 1 which is pretty much what I expected.

45
00:03:47.400 --> 00:03:48.900
Now here's the weird part.

46
00:03:48.930 --> 00:03:53.670
Here's where things start to get interesting and this is where I really want you to develop a sense

47
00:03:53.670 --> 00:04:00.740
of intuition of what is going on with node I'm now going to go back up to the top and copy paste that

48
00:04:00.740 --> 00:04:06.860
require statement I'm going to put that second require statement underneath everything we just wrote

49
00:04:06.860 --> 00:04:07.480
out.

50
00:04:07.670 --> 00:04:15.910
I'm going to call the second one right here new counter object and then I'll do a console log of new

51
00:04:16.030 --> 00:04:24.750
counter object get counter so in the world of JavaScript or in the world of like an infinite possibilities

52
00:04:24.750 --> 00:04:25.570
so to speak.

53
00:04:25.570 --> 00:04:28.590
There's really only two possible outcomes from this.

54
00:04:28.590 --> 00:04:33.600
Like let's ignore everything I just told you for a second and let's imagine that you had to guess what

55
00:04:33.600 --> 00:04:35.830
was going to happen when we ran this code.

56
00:04:36.000 --> 00:04:42.930
The only possible results of doing this would be require the first time and running that first require

57
00:04:42.990 --> 00:04:45.400
would declare the counter variable and started off as zero.

58
00:04:45.450 --> 00:04:52.110
So we would then get a console log of zero we would incrementing counter by 1 and then do a console

59
00:04:52.110 --> 00:04:56.280
log again of 1 and then here's the part where there's the two possibilities.

60
00:04:56.280 --> 00:05:02.680
When we require in my script J.S. again either we're going to magically see that counter variable at

61
00:05:02.700 --> 00:05:09.420
reset to zero or we're gonna get the exact same object with a reference to the same counter variable

62
00:05:09.420 --> 00:05:10.350
that we got the first time.

63
00:05:10.350 --> 00:05:12.400
In which case it would be equal to 1.

64
00:05:12.420 --> 00:05:17.760
Those are the only two possibilities again just ignoring everything I just told you now I want you to

65
00:05:17.760 --> 00:05:21.510
kind of guess what we're going to see here based on the discussion we've had so far.

66
00:05:22.440 --> 00:05:25.800
So again decide hey either it's gonna be 0 1.

67
00:05:25.860 --> 00:05:26.360
Who knows.

68
00:05:26.370 --> 00:05:31.250
Let's just say this thing and run it's all run this again.

69
00:05:31.250 --> 00:05:37.130
And sure enough we get 0 1 1 and this is exactly what I would expect.

70
00:05:37.130 --> 00:05:42.770
So again just to put great detail here and make sure everything is crystal clear only put in the actual

71
00:05:43.040 --> 00:05:44.630
actually let's just write in some code your right here.

72
00:05:44.630 --> 00:05:47.560
Let's imagine that it says counter go zero.

73
00:05:47.560 --> 00:05:51.040
Like so the very first time that we require in my script.

74
00:05:51.050 --> 00:05:56.950
J.S. we initialize that counter variable and then we export this big object right here inside this big

75
00:05:56.950 --> 00:05:57.340
object.

76
00:05:57.340 --> 00:06:02.860
Every time you see the word counter that is a reference back to the variable that we just declared inside

77
00:06:02.950 --> 00:06:03.760
of my script.

78
00:06:03.780 --> 00:06:10.600
J.S. so there's only ever a single instance of this counter variable just one for the entire lifecycle

79
00:06:10.630 --> 00:06:11.650
of our application.

80
00:06:12.910 --> 00:06:17.360
Then inside of index dot J.S. we can imagine that I know this code doesn't quite match up but let's

81
00:06:17.360 --> 00:06:22.910
just imagine that it's us requiring in my script once then a second time the first time require it.

82
00:06:22.910 --> 00:06:27.860
We run the code inside there we get the everything assigned to the cache we get back the counter object

83
00:06:27.950 --> 00:06:30.270
we increment that number by 1.

84
00:06:30.380 --> 00:06:34.870
So it's now equal to 1 and then we do the second require statement.

85
00:06:34.870 --> 00:06:39.560
So when we do that second require statement we're not going to magically go back into my script at J.S.

86
00:06:39.560 --> 00:06:46.340
and run all that stuff again and re declare counter instead we get what ever came or whatever is currently

87
00:06:46.490 --> 00:06:54.710
inside of that require cash so we get the same object that has the reference to the same counter variable

88
00:06:55.840 --> 00:07:02.310
so even though you might think that because we require in my script J.S. we are getting a second or

89
00:07:02.310 --> 00:07:05.240
we are executing inside everything inside of here a second time.

90
00:07:05.240 --> 00:07:11.240
Again that is not what happens we get whatever is inside of our cash so that is going to be the existing

91
00:07:11.240 --> 00:07:16.910
object that has a reference to the existing counter variable and so that's why we see a second console

92
00:07:16.910 --> 00:07:19.690
log of the number one.

93
00:07:19.780 --> 00:07:20.080
All right.

94
00:07:20.110 --> 00:07:21.970
So I just want repeat repeat one more time.

95
00:07:21.970 --> 00:07:26.590
I know that I'm going into tremendous detail here very quickly on all this requires stuff but I've found

96
00:07:26.590 --> 00:07:31.330
that we are getting started with node getting a really good understanding of how require works at the

97
00:07:31.510 --> 00:07:35.580
very start we'll really set you up for success in the long term.

98
00:07:35.590 --> 00:07:40.540
In addition it's going to in the long term solve a lot of issues that might come up later on when you're

99
00:07:40.540 --> 00:07:43.450
going to find that you're like requiring stuff in multiple times.

100
00:07:43.450 --> 00:07:48.500
And for some crazy reason like you're not getting a new copy of an object or something like that.

101
00:07:48.520 --> 00:07:53.470
So again everything gets thrown into that cache and we just get that same expert add value back again

102
00:07:53.530 --> 00:07:59.960
and again and again we do not run these required files multiple times just once.

103
00:08:00.070 --> 00:08:00.350
Okay.

104
00:08:00.400 --> 00:08:05.260
So now that we've got a good sense on this module stuff let's take a pause right here and we're going

105
00:08:05.260 --> 00:08:07.120
to continue to discuss all this.

106
00:08:07.120 --> 00:08:08.770
No j ust up in the next video.
