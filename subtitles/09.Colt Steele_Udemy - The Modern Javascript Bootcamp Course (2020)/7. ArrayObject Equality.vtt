WEBVTT
1
00:00:00.210 --> 00:00:06.660
Another really important topic around arrays and objects has to do with equality checking for equality.

2
00:00:06.660 --> 00:00:13.210
Now we've seen the equality operator strict equality triple equals and double equals.

3
00:00:13.410 --> 00:00:15.600
In this case they both return true.

4
00:00:15.600 --> 00:00:18.520
Now let's talk about how they behave with arrays and objects.

5
00:00:18.570 --> 00:00:20.890
So let's make a variable we'll just call it numbs.

6
00:00:20.900 --> 00:00:27.330
I'm out of creative ideas for now such as numbers and then we'll make another variable called mystery

7
00:00:28.200 --> 00:00:30.660
and it will be an identical looking array.

8
00:00:30.660 --> 00:00:32.620
1 2 3.

9
00:00:32.700 --> 00:00:35.080
What happens when I compare these two.

10
00:00:35.130 --> 00:00:40.950
If I run numbers triple equals mystery we get false.

11
00:00:41.130 --> 00:00:42.390
So they look the same to us.

12
00:00:42.390 --> 00:00:48.110
They contain the exact same values in the exact same order but they are completely different in JavaScript

13
00:00:48.180 --> 00:00:48.740
mind.

14
00:00:48.960 --> 00:00:53.160
And you might think that W equals would solve that but it does not.

15
00:00:53.250 --> 00:00:59.000
This all hinges upon what we talked about earlier with reference types when we have a variable called

16
00:00:59.010 --> 00:01:05.160
Numbers the value of that variable the little space in memory is not storing the array it's simply storing

17
00:01:05.190 --> 00:01:06.540
a reference to this array.

18
00:01:06.900 --> 00:01:13.380
So we can imagine that numbs in memory has some long address to another part of memory where the actual

19
00:01:13.380 --> 00:01:14.490
array is stored.

20
00:01:14.520 --> 00:01:20.700
Remember arrays can be very very large and they don't fit in a single variable the allocated or the

21
00:01:20.700 --> 00:01:22.390
allowed space for a variable.

22
00:01:22.410 --> 00:01:26.410
So instead javascript stores a reference to where that array is.

23
00:01:26.430 --> 00:01:32.210
So when we compare with double equals or triple equals we're comparing these addresses.

24
00:01:32.400 --> 00:01:39.250
So mystery might look the same but it has its own completely unique place in memory.

25
00:01:39.270 --> 00:01:41.540
Let me make these a little more distinct looking.

26
00:01:41.550 --> 00:01:42.610
There we go.

27
00:01:42.660 --> 00:01:44.500
So they are not at all the same.

28
00:01:44.490 --> 00:01:45.990
And this is what's being compared.

29
00:01:46.110 --> 00:01:47.910
So here's a question for you.

30
00:01:47.910 --> 00:01:53.150
How could I concoct a situation where two arrays were equal when I ran.

31
00:01:53.150 --> 00:01:56.400
Triple equals or double equals we got true.

32
00:01:56.400 --> 00:02:01.530
I would need to do something different I could not define my arrays like this but I would need to do

33
00:02:01.560 --> 00:02:06.270
is instead defined mystery to be based off of numbers.

34
00:02:06.300 --> 00:02:14.190
So instead of mystery let's do let more numbers equals numbers.

35
00:02:14.190 --> 00:02:19.070
So now they have a reference to the same address in memory the same place.

36
00:02:19.170 --> 00:02:24.760
And if I compare them here if I refresh numbers triple equals more numbers.

37
00:02:24.810 --> 00:02:26.000
That is true.

38
00:02:26.220 --> 00:02:27.770
It's also true with double equals.

39
00:02:27.840 --> 00:02:31.350
And if you recall back to the earlier video on reference types.

40
00:02:31.350 --> 00:02:39.930
If we change one of them like more num stop push for more numbers is altered as is numbers they're referring

41
00:02:39.930 --> 00:02:42.070
to the same array in memory.

42
00:02:42.120 --> 00:02:45.720
So when we double or triple equals they are identical.

43
00:02:45.720 --> 00:02:51.240
So what this means is if you're trying to compare arrays if you're trying to see if an array is equal

44
00:02:51.240 --> 00:02:56.730
to another array it's not as straightforward as you might hope it would be because a lot of times you're

45
00:02:56.730 --> 00:03:00.370
not trying to check if an array is the exact same array.

46
00:03:00.390 --> 00:03:05.400
Instead you often want to check if they look the same if they contain the same information.

47
00:03:05.400 --> 00:03:08.540
Here's an example I have a user object.

48
00:03:08.790 --> 00:03:13.230
It has a user name in an email and notifications which is an array.

49
00:03:14.070 --> 00:03:15.840
If I wanted to print something out.

50
00:03:15.840 --> 00:03:20.860
If notifications was empty it would not work to do this.

51
00:03:20.880 --> 00:03:27.270
If user dot notifications triple equals empty array I see students try.

52
00:03:27.270 --> 00:03:29.020
This seems like it should make sense.

53
00:03:29.070 --> 00:03:35.640
It does not work for this same reason empty array triple equals empty array is false.

54
00:03:35.640 --> 00:03:40.900
They look the same but each time I type empty array it's a new place in memory.

55
00:03:41.010 --> 00:03:46.740
They look the same but they are different they have different addresses or different locations in memory.

56
00:03:46.740 --> 00:03:50.440
So this does not work even though notifications is an empty array.

57
00:03:50.700 --> 00:03:57.450
So if I tried to constantly log no new notifications it's not going to work.

58
00:03:57.660 --> 00:04:01.220
Now an empty array is an easy case because we have different strategies.

59
00:04:01.230 --> 00:04:08.700
We could attempt instead instead of checking for equality to an empty array we could say if dot length

60
00:04:09.750 --> 00:04:18.030
is equal to zero we get no new notifications but we could even shorten this more if you remember length

61
00:04:18.180 --> 00:04:25.110
will give us zero in this scenario and zero is a false value so we could say if not user dot notifications

62
00:04:25.110 --> 00:04:25.510
dot length.

63
00:04:25.530 --> 00:04:29.100
If there is no length we get no new notifications.

64
00:04:29.120 --> 00:04:35.170
But now if there is something in here like message it's a notification it doesn't print out.

65
00:04:35.310 --> 00:04:41.190
So the next thing that it's a little trickier is trying to check if an array contains or looks like

66
00:04:41.220 --> 00:04:43.110
another array that isn't empty.

67
00:04:43.170 --> 00:04:50.190
So if I wanted to know if one array contained exactly the numbers 1 2 and 3 in that order.

68
00:04:50.190 --> 00:04:55.680
We've seen this does not work and unfortunately there's not an easy option for us right now until we

69
00:04:55.680 --> 00:04:56.940
talk about loops.

70
00:04:56.940 --> 00:05:02.460
We don't really have a way of checking for array quality equality of values.

71
00:05:02.550 --> 00:05:09.510
What we will need to do is manually compare every element in an array to another array.

72
00:05:09.600 --> 00:05:14.460
So if I wanted to know does notifications look exactly like this where we have message.

73
00:05:14.610 --> 00:05:16.140
And what's another notification.

74
00:05:16.140 --> 00:05:23.160
Let's say and alert if I needed to do that I would have to write code to say is the first element message

75
00:05:23.190 --> 00:05:24.910
is the second element alert.

76
00:05:25.110 --> 00:05:29.970
So we're not there yet but at this point what I want you to understand and hopefully you're getting

77
00:05:29.970 --> 00:05:33.920
it by now is that we cannot easily compare values in arrays.

78
00:05:34.020 --> 00:05:39.930
If we're trying to look for equality all that these operators double and triple equals will do is check

79
00:05:39.930 --> 00:05:46.830
for equality of reference not equality of contents and the exact same thing holds true for objects.

80
00:05:46.860 --> 00:05:52.530
If we make an empty object and we triple equals another empty object they are not the same the object

81
00:05:52.620 --> 00:06:01.750
a one is not equal to the object a one in less they are referring to the same place in memory which

82
00:06:01.750 --> 00:06:02.820
you've seen before.

83
00:06:02.820 --> 00:06:13.770
If I had left data one equals a call on one and then left data two equals data one.

84
00:06:13.770 --> 00:06:17.440
Now they are referring to the same thing in memory.

85
00:06:17.760 --> 00:06:19.800
So we get true when we compare them.

86
00:06:19.890 --> 00:06:23.620
So arrays and objects behave exactly the same way.

87
00:06:23.700 --> 00:06:26.220
In this situation when we're checking for equality.
