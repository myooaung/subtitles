1
00:00:00,270 --> 00:00:04,770
Next up let's talk about those bottom for comparison operators that we skipped over.

2
00:00:04,830 --> 00:00:07,230
They all have to do with equality.

3
00:00:07,230 --> 00:00:08,610
It's the 21st century.

4
00:00:08,610 --> 00:00:15,060
It's time we finally confront equality meaning the for equality operators that we ignored in the last

5
00:00:15,060 --> 00:00:16,200
video.

6
00:00:16,200 --> 00:00:17,340
They seem kind of similar.

7
00:00:17,340 --> 00:00:20,290
At least two of them are two groups that seem similar.

8
00:00:20,310 --> 00:00:26,550
We have equality which is to equal signs as you can see here and then another version of equality called

9
00:00:26,610 --> 00:00:29,790
strict equality with three equal signs.

10
00:00:29,790 --> 00:00:36,120
And then we have non equality with one into let's start by talking about double equals versus triple

11
00:00:36,120 --> 00:00:36,960
equals.

12
00:00:37,230 --> 00:00:38,520
What is the difference.

13
00:00:38,520 --> 00:00:44,850
Well let's start with double equals double equals is just usually referred to as the equality operator.

14
00:00:44,850 --> 00:00:49,440
It checks for equality of values but it doesn't care about type.

15
00:00:49,500 --> 00:00:52,390
So the types of data that you're comparing don't matter.

16
00:00:52,680 --> 00:00:58,890
It's going to coerce both values to a common type and cause it's just a fancy way of saying convert

17
00:00:59,110 --> 00:01:02,330
spent to try and get them to be a the same type.

18
00:01:02,520 --> 00:01:05,580
So it can compare them directly as one type.

19
00:01:05,580 --> 00:01:11,320
And once they're converted if they have the same value then it returns true and evaluates to true.

20
00:01:11,340 --> 00:01:13,020
Otherwise we get false.

21
00:01:13,020 --> 00:01:15,580
Now this can lead to some unexpected results.

22
00:01:15,600 --> 00:01:22,440
But let's take a look at some expected results first four equals four That makes sense.

23
00:01:22,500 --> 00:01:26,370
What about a equals a great.

24
00:01:26,560 --> 00:01:31,740
We could even do false equals false hope for an equals sign.

25
00:01:31,740 --> 00:01:35,100
That is assigning something as we've already seen with variables.

26
00:01:35,130 --> 00:01:38,160
That's how you assign a value to is comparison.

27
00:01:38,790 --> 00:01:40,090
So that's true.

28
00:01:40,140 --> 00:01:40,460
All right.

29
00:01:41,160 --> 00:01:43,630
But as I mentioned things can get odd.

30
00:01:43,650 --> 00:01:45,860
We have things like this.

31
00:01:45,870 --> 00:01:50,880
If I take a number and I compare it to a string of the same number that's giving me true.

32
00:01:50,880 --> 00:01:52,510
Now these aren't equal.

33
00:01:52,560 --> 00:01:53,940
These are different values.

34
00:01:53,940 --> 00:01:56,610
They are completely different in terms of JavaScript.

35
00:01:56,610 --> 00:01:58,500
One is a number one is a string.

36
00:01:58,500 --> 00:02:02,500
But remember double equals we'll try and get them to be a common type.

37
00:02:02,580 --> 00:02:08,220
So it converts them to a common type and then it decides oh yeah they have the same value.

38
00:02:08,280 --> 00:02:14,170
Same thing with some maybe less expected things zero and an empty string.

39
00:02:14,310 --> 00:02:22,380
So zero double equals a string with S is false but an empty string is true behind the scenes.

40
00:02:22,380 --> 00:02:27,720
JavaScript is converting these to a similar type and it decides they are equal.

41
00:02:27,720 --> 00:02:29,550
We'll talk about why in just a bit.

42
00:02:29,670 --> 00:02:32,350
Why is zero similar to an empty string.

43
00:02:32,520 --> 00:02:38,790
Obviously true double equals false is going to be false but we also have things like zero clear this

44
00:02:39,270 --> 00:02:41,030
zero double equals false.

45
00:02:41,100 --> 00:02:43,080
Those are definitely different values.

46
00:02:43,080 --> 00:02:47,650
One is the number one is a boolean but it still comes out true.

47
00:02:48,000 --> 00:02:49,260
And then one more example.

48
00:02:49,290 --> 00:02:49,730
No.

49
00:02:49,740 --> 00:02:51,750
And undefined as we saw.

50
00:02:51,750 --> 00:02:59,280
These are two distinct values two separate primitives but they are considered equal when we use two

51
00:02:59,310 --> 00:03:00,920
equal sides.

52
00:03:00,930 --> 00:03:01,200
All right.

53
00:03:01,710 --> 00:03:06,630
So we're going to get to Tripoli calls in just a moment but we're going to take a detour to talk about

54
00:03:06,900 --> 00:03:08,180
why some of this happens.

55
00:03:08,310 --> 00:03:13,950
What is actually happening behind the scenes that makes javascript say zero is double equals to an empty

56
00:03:13,950 --> 00:03:16,910
string or zero is double equal false.

57
00:03:16,910 --> 00:03:20,250
It doesn't seem all that logical but there is some reasoning behind it.
