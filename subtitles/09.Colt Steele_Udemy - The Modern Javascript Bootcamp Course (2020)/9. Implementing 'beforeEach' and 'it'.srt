1
00:00:01,180 --> 00:00:04,110
Now you've got a better little test harness to make use of right here.

2
00:00:04,110 --> 00:00:10,720
Our goal is to be able to run for each dot test out J.S. with our TMI program and have the test in here

3
00:00:10,840 --> 00:00:14,450
actually be executed and then report some results about it.

4
00:00:14,470 --> 00:00:18,730
The most obvious thing we need to do right now is to make sure that the IT function inside of here is

5
00:00:18,730 --> 00:00:20,460
somehow defined.

6
00:00:20,490 --> 00:00:25,270
So remember whenever we make use of moka moka is going to run all of our different test files inside

7
00:00:25,270 --> 00:00:31,250
of our project and it's going to magically make the IT function available inside of here for us.

8
00:00:31,270 --> 00:00:35,410
It really does appear like it's magic because look inside this file nowhere inside this file did we

9
00:00:35,410 --> 00:00:37,640
define the IT function.

10
00:00:37,810 --> 00:00:40,990
So how do we magically make the IT function available inside of here.

11
00:00:41,800 --> 00:00:48,200
Well it's actually kind of simple and straightforward back inside of runner Duchess right above the

12
00:00:48,200 --> 00:00:51,790
require statement which is where that file is going to actually be executed.

13
00:00:51,800 --> 00:00:54,170
We're going to define global dot.

14
00:00:54,170 --> 00:00:54,560
It

15
00:00:57,920 --> 00:01:02,990
Global is a very special keyword or a very special variable inside of no J.S..

16
00:01:03,050 --> 00:01:06,590
It's very similar to the window variable inside the browser.

17
00:01:06,590 --> 00:01:11,720
This is a variable that is available inside of every file and it's shared between every file as well

18
00:01:12,670 --> 00:01:18,400
if we ever write out the name of some variable like so like just it inside of any given file of our

19
00:01:18,400 --> 00:01:23,980
project node is going to first check to see if the variable was diff or that variable is defined anywhere

20
00:01:24,010 --> 00:01:25,330
inside this file.

21
00:01:25,330 --> 00:01:29,950
If it wasn't notable then automatically take a look at all the different properties that are attached

22
00:01:29,980 --> 00:01:31,780
to the global variable.

23
00:01:32,170 --> 00:01:39,540
If node can find this on that global variable it's going to reference that property so in other words

24
00:01:39,600 --> 00:01:47,470
if we write out simply it right here node is going to resolve that to this function automatically and

25
00:01:47,540 --> 00:01:49,960
this global variable really is global in scope.

26
00:01:50,000 --> 00:01:52,760
So it is shared between all different files.

27
00:01:52,760 --> 00:01:58,190
So long story short if we define this function right here right before we require this file when we

28
00:01:58,190 --> 00:01:59,280
execute the file.

29
00:01:59,300 --> 00:02:05,980
So the for each dot test file the actual it statement right here or this it will look up node is gonna

30
00:02:05,990 --> 00:02:09,920
see that variable that's going to see that nowhere inside this file was it defined.

31
00:02:09,920 --> 00:02:14,570
So it's then going to look at the global scope or the global object and that's going to find it function

32
00:02:14,630 --> 00:02:16,710
located over there.

33
00:02:16,800 --> 00:02:17,760
That's how Moka does it.

34
00:02:17,790 --> 00:02:20,020
And that's exactly how we're going to do it as well.

35
00:02:21,510 --> 00:02:21,780
OK.

36
00:02:21,860 --> 00:02:28,070
So now inside us it statement I'm going to receive the description and a function that the IT function

37
00:02:28,070 --> 00:02:29,200
is going to be called with.

38
00:02:29,240 --> 00:02:33,830
So description and effect right here is going to be that description.

39
00:02:33,830 --> 00:02:41,210
And that function so far right now inside of our IT function let's just do a real simple console log

40
00:02:41,780 --> 00:02:48,570
description or DSC it's going to save this go back over to my terminal.

41
00:02:48,580 --> 00:02:52,990
I'll run to me again and we'll see the description of our test should some and a right.

42
00:02:53,680 --> 00:02:54,310
Awesome.

43
00:02:54,310 --> 00:02:58,840
So that means that we can successfully kind of inject the IT function into the file that we are about

44
00:02:58,840 --> 00:03:00,510
to require.

45
00:03:00,620 --> 00:03:06,650
Now keep in mind that we want to have at least somewhat parity with moka moka has not only the IT function

46
00:03:06,650 --> 00:03:09,950
it also has the B for each function as well.

47
00:03:09,950 --> 00:03:15,780
So I would like to have a kind of kind of pseudo or mock implementation of before each.

48
00:03:15,800 --> 00:03:19,850
Remember when we spoke about this project overall we said that we were going to write our own testing

49
00:03:19,850 --> 00:03:22,880
framework that works in like 80 percent of cases.

50
00:03:23,000 --> 00:03:28,040
It turns out that MCAS implementation of before each is like really really special.

51
00:03:28,040 --> 00:03:31,180
And there's a lot of like interesting corner cases that it handles.

52
00:03:31,490 --> 00:03:34,010
We're not going to really implement any of those corner cases.

53
00:03:34,010 --> 00:03:38,660
We're going to simply make sure that if anyone ever calls before each inside of our testing framework

54
00:03:39,050 --> 00:03:44,950
it's simply going to run a given function once before every et statement that's pretty much all we have

55
00:03:44,950 --> 00:03:50,200
seen before each do with Moka but just you know Moka has like some really interesting things that it

56
00:03:50,200 --> 00:03:51,400
does with before each as well.

57
00:03:51,400 --> 00:03:55,810
Again we're not going to worry about that extra stuff where it can take care of the very basic implementation

58
00:03:56,920 --> 00:04:03,140
so let's add some code inside of here that's going to kind of serve as RB for each I'm going to put

59
00:04:03,170 --> 00:04:09,760
a before he try here and then to have like an actual legitimate usage of it I'm going to define a let

60
00:04:09,760 --> 00:04:17,720
variable up here called numbers inside them for each I'll say numbers is 1 2 3 and then I'll delete

61
00:04:17,720 --> 00:04:20,630
the numbers declaration inside the it statement.

62
00:04:20,630 --> 00:04:25,610
So in other words our goal of before each is to just initialize the numbers array and make it make it

63
00:04:25,610 --> 00:04:27,560
available for the statement that we're about to run

64
00:04:30,710 --> 00:04:31,160
OK.

65
00:04:31,330 --> 00:04:36,420
Now to really make sure that the before each is running before every it statements let's add in a second

66
00:04:36,430 --> 00:04:45,400
it statement as well it's all do add second it's statement down here and I'll say it before each is

67
00:04:45,400 --> 00:04:47,110
ran each time.

68
00:04:47,110 --> 00:04:51,640
That's essentially our description we're literally writing a test about our testing framework right

69
00:04:51,640 --> 00:04:59,020
here kind of better so then inside of here let's try to use the numbers array in some fashion it's all

70
00:04:59,020 --> 00:05:09,100
just say like about asserts and we'll do a strict equal about numbers what length should be equal to

71
00:05:09,100 --> 00:05:09,190
it.

72
00:05:09,210 --> 00:05:09,960
Three.

73
00:05:10,330 --> 00:05:11,730
Now to really test this thing out.

74
00:05:11,740 --> 00:05:16,490
The idea here is that we're going to reinitiate size numbers for every single it statement.

75
00:05:16,540 --> 00:05:21,760
So to really test this out inside of our IT statement right here after the asserts let's add in some

76
00:05:21,760 --> 00:05:24,050
code to kind of destroy the numbers array.

77
00:05:24,080 --> 00:05:32,920
Second to say numbers dot push re And how about we do that a couple of times now after this statement

78
00:05:32,920 --> 00:05:37,720
runs we have now like destroyed or completely wrecked the numbers array.

79
00:05:37,720 --> 00:05:42,490
If we then attempt to immediately run this it statement down here we're not going to get a numbers length

80
00:05:42,490 --> 00:05:43,290
equal to three.

81
00:05:43,300 --> 00:05:52,990
Instead it will be the one two three like we have right there plus four five six seven so if the before

82
00:05:52,990 --> 00:05:57,860
each is going to actually run before each it statement we should have both test passing right now.

83
00:05:57,880 --> 00:06:03,430
If it doesn't run before each the second test is going to fail because we have changed the numbers array

84
00:06:04,550 --> 00:06:08,180
and it did not get reset between each test case.

85
00:06:08,190 --> 00:06:12,900
Let's go back over to our runner dot j ust file and now we're going to have to implement global dot

86
00:06:12,930 --> 00:06:20,720
before each so this thing is going to be given some function to make sure that we receive that function

87
00:06:21,050 --> 00:06:25,790
and then eventually call it before every it statement that actually gets invoked I'm gonna create a

88
00:06:25,790 --> 00:06:32,140
new array up here called before each is and I'm going to store a reference to that function that was

89
00:06:32,140 --> 00:06:33,100
passed in inside

90
00:06:38,310 --> 00:06:44,940
it's now inside of our IT statement we're going to fill out the actual implementation it's going to

91
00:06:44,940 --> 00:06:49,930
take a look at all the different type of right there by the way and make sure that's global dots before

92
00:06:50,090 --> 00:06:50,430
each.

93
00:06:50,430 --> 00:06:55,920
There we go so inside of our it's implementation we're going to take a look at all the different before

94
00:06:55,920 --> 00:07:02,340
each is that have been loaded up so I'll say before each is that for each and for each function that

95
00:07:02,340 --> 00:07:07,590
we loaded up and saved a reference to we're gonna call each one and then only after that are we going

96
00:07:07,590 --> 00:07:15,340
to call the it statements function that was passed in so we'll call f n like so OK so let's test this

97
00:07:15,340 --> 00:07:19,420
now going gonna say the file and if we don't get any errors that means everything worked as expected

98
00:07:20,200 --> 00:07:27,830
I'll flip back over run to me no errors that means everything worked so now we can kind of make sure

99
00:07:27,830 --> 00:07:32,570
that everything is really working as expected by going back over to the test file and I'll try changing

100
00:07:32,570 --> 00:07:40,400
Say how about on a strict equal right here let's change that from six up to seven I'll save that go

101
00:07:40,400 --> 00:07:47,680
back over and now we see an error because we failed that assertion unclear uncommon that or change that

102
00:07:47,680 --> 00:07:53,230
back to six and then in addition down here on the second test let's try changing the number assertion

103
00:07:53,230 --> 00:08:00,590
from three to four makes sure that fails as well and yet that fails as well so that's kind of like the

104
00:08:00,590 --> 00:08:06,290
beginnings of our testing framework we now have the ability to setup inside of our test file some before

105
00:08:06,290 --> 00:08:13,020
each we can set up some it statements and our runner is going to take a look at all the different statements

106
00:08:13,060 --> 00:08:18,810
it's going to invoke every before each that has been defined and then run the actual test function so

107
00:08:18,940 --> 00:08:23,920
I note this stuff is like really crazy right now don't get me wrong like this is a pretty darn challenging

108
00:08:23,920 --> 00:08:28,870
project but we have something that like really works kind of not that bad.

109
00:08:28,960 --> 00:08:34,350
So far we just have to add in a couple of extra stuff and we're going to be in a really good spot.

110
00:08:34,600 --> 00:08:37,560
So take a quick pause right here and continue in just a moment.
