1
00:00:00,640 --> 00:00:05,650
The last thing I want to show you around the basics of Nogales is how to debug a node program.

2
00:00:05,650 --> 00:00:08,940
So as you can probably guess we can run console logs inside of node.

3
00:00:08,950 --> 00:00:09,880
All we want.

4
00:00:10,070 --> 00:00:13,900
Anytime we do a console log we're going to see some output at our terminal.

5
00:00:13,900 --> 00:00:18,260
However there's definitely some more robust ways of doing debugging that just console logs.

6
00:00:18,280 --> 00:00:24,610
In fact we can use the same debugger that you're used to inside the browser with node J.S. as well.

7
00:00:24,610 --> 00:00:26,440
Let me show you a couple different ways of debugging.

8
00:00:26,440 --> 00:00:28,540
Just give you a better sense of what's going on.

9
00:00:29,620 --> 00:00:30,220
All right.

10
00:00:30,220 --> 00:00:35,910
So here's a quick summary so we can start up a debugger in one of two ways.

11
00:00:35,940 --> 00:00:40,890
And in one of those ways there's kind of a different flavor of doing it the first way to start debugging

12
00:00:41,070 --> 00:00:46,090
is to run a node inspect and then the name of the file that we want to run.

13
00:00:46,140 --> 00:00:53,070
This is going to start up a debugger S.L. I the CLIA is essentially running inside of our terminal and

14
00:00:53,070 --> 00:00:56,810
we can use it to debug our application wide inside the terminal.

15
00:00:57,230 --> 00:01:00,840
It's easiest to see this thing in action to give you a better sense of what's happening.

16
00:01:01,080 --> 00:01:11,360
So I can go back over to my terminal and run node in SPECT index dot J.S. so when we run this command

17
00:01:11,390 --> 00:01:17,200
we're going to see some output like so execution of our program stops on the very first line of code.

18
00:01:17,510 --> 00:01:20,680
So we're essentially waiting for our program to start right here.

19
00:01:20,840 --> 00:01:26,330
We are then given a prompt that we can use to manipulate the current state of the program or step through

20
00:01:26,330 --> 00:01:28,520
execution at this prompt.

21
00:01:28,520 --> 00:01:30,680
There's a couple of different things that we need to be aware of.

22
00:01:31,760 --> 00:01:37,980
First off there are some different characters that we can enter to manipulate the execution of our program.

23
00:01:38,330 --> 00:01:43,910
If we enter see like just the letter C that is going to continue execution of our program until the

24
00:01:43,910 --> 00:01:50,990
program ends or we hit a debugger statement in our code can it end to run the next line of code as to

25
00:01:50,990 --> 00:01:54,960
step into a function or 0 to step out of a function.

26
00:01:55,070 --> 00:02:00,600
Let's try using some of these different commands right now and go into each first try running.

27
00:02:00,600 --> 00:02:06,870
Simply How about n to run the next line of code we'll see that we have now essentially advanced from

28
00:02:06,960 --> 00:02:10,710
the cons declaration right here to actually add the require statement.

29
00:02:10,710 --> 00:02:14,970
The next thing that's about to happen here is we're about to run that require function.

30
00:02:15,120 --> 00:02:20,580
We know that because it is highlighted in green at this point we can either run and again to go to the

31
00:02:20,670 --> 00:02:26,850
next expression or we can run s to step into the execution of the require statement.

32
00:02:26,910 --> 00:02:33,660
Let's try it as really quickly so I'll step in and then we see some kind of strange code right here

33
00:02:33,670 --> 00:02:36,550
that doesn't really look like anything that you and I wrote.

34
00:02:36,720 --> 00:02:42,570
So we're essentially stepping into the internal implementation like no JSA is implementation of the

35
00:02:42,570 --> 00:02:43,830
required function.

36
00:02:44,010 --> 00:02:48,360
Now we know that because we can see the current file that we're in is something called internal modules

37
00:02:48,620 --> 00:02:49,980
helpers Scott J.S..

38
00:02:50,130 --> 00:02:55,560
So this is definitely not any code that you and I wrote so we might decide to now step out and say I

39
00:02:55,560 --> 00:03:01,260
don't really care about what requires doing so to step out of the execution of required we can do oh

40
00:03:02,280 --> 00:03:04,790
so enter o it enter.

41
00:03:05,220 --> 00:03:08,840
And now we have advanced past the execution of require.

42
00:03:09,400 --> 00:03:17,550
Now at this point we can try to inspect the counter object so I can run counter objects like so excuse

43
00:03:17,550 --> 00:03:18,860
me we can't do that just yet.

44
00:03:18,870 --> 00:03:22,660
We have to enter into the rebel first so we're gonna put it in rebel.

45
00:03:22,660 --> 00:03:23,090
One.

46
00:03:23,100 --> 00:03:27,150
I forgot to mention in that diagram the rebel commands is essentially going to start up an execution

47
00:03:27,150 --> 00:03:31,010
environment where we can reference the different variables inside of our program.

48
00:03:31,170 --> 00:03:31,860
They'll do rebel.

49
00:03:31,860 --> 00:03:32,530
There we go.

50
00:03:32,670 --> 00:03:36,870
And now we can do counter object and there's the counter object.

51
00:03:36,870 --> 00:03:40,410
So we've got the increment counter function and they get counter function.

52
00:03:40,410 --> 00:03:46,820
So I could manually checkout counter object and get the current value of counter where I can even manually

53
00:03:47,000 --> 00:03:48,140
increment the counter as well

54
00:03:51,280 --> 00:03:54,930
and I could do it a couple times and then get the counter again.

55
00:03:55,000 --> 00:03:56,780
And now it's at six.

56
00:03:56,920 --> 00:04:01,240
So at some point time if we've satisfied ourselves with debugging inside this old rebel we can take

57
00:04:01,270 --> 00:04:04,830
control C we're back at our debug prompt.

58
00:04:05,140 --> 00:04:11,140
Now we can once again either continue until we had a debugger statement run the next expression step

59
00:04:11,140 --> 00:04:12,240
in or step out.

60
00:04:12,240 --> 00:04:13,760
So at this point I think we've seen enough.

61
00:04:13,810 --> 00:04:19,930
I'm going to hit C to continue execution and essentially we have now completed execution of our program

62
00:04:20,200 --> 00:04:25,090
and so it's just waiting for us to disconnect or essentially add this debugging session which we can

63
00:04:25,090 --> 00:04:29,030
do as usual by adding control C.

64
00:04:29,200 --> 00:04:32,920
All right so as you might guess using that ripple is kind of nasty.

65
00:04:32,920 --> 00:04:36,610
I'll be honest I don't really expect you to be using that on a daily basis.

66
00:04:36,640 --> 00:04:42,280
However it is really nice because you can start it up very very quickly and once you start getting used

67
00:04:42,280 --> 00:04:48,660
to it you can really advance through your code and test things out rather fast much more user friendly.

68
00:04:48,660 --> 00:04:50,410
Are these other two options.

69
00:04:50,430 --> 00:04:55,500
So these are far far easier to use but they also take just a little bit longer to get started with.

70
00:04:56,760 --> 00:05:03,150
Let's first take a look at the bottom one here node dash dash inspect dash B R.K. index dot J and to

71
00:05:03,230 --> 00:05:06,050
go over to my terminal once again and run that command

72
00:05:10,380 --> 00:05:14,820
once I run that command we see I print up right here and this print up doesn't really convey a lot of

73
00:05:14,820 --> 00:05:19,020
useful information what we have to do here is kind of hidden from us.

74
00:05:19,050 --> 00:05:23,640
So this is a little fact of knowledge that you really have to keep in your head in order to connect

75
00:05:23,670 --> 00:05:25,940
to this debugger and actually make use of it.

76
00:05:26,070 --> 00:05:30,120
We're going to open up our browser specifically the Chrome browser.

77
00:05:30,320 --> 00:05:34,150
So if you're not running Chrome right now unfortunately you can't follow along with a step.

78
00:05:34,170 --> 00:05:40,560
This is only going to work with Chrome browser so in my chrome browser I can open up a new tab and navigate

79
00:05:40,560 --> 00:05:49,890
to Chrome colon slash slash inspect I can do that right now I'll go to Chrome slash slash inspect and

80
00:05:49,890 --> 00:05:50,910
here we go.

81
00:05:50,910 --> 00:05:56,860
This is a interface for connecting to that running node instance right here we see something it says

82
00:05:56,860 --> 00:05:57,880
remote target.

83
00:05:57,880 --> 00:06:03,460
This is essentially saying that there is a running no J.S. process specifically the index dot J.S. file

84
00:06:03,820 --> 00:06:06,540
and we can connect to it and start up a debugger.

85
00:06:06,700 --> 00:06:12,230
We can do that by clicking on the a little link right there that says inspect once I do so we're going

86
00:06:12,230 --> 00:06:17,190
to see the classic chrome debugger up here the one that you are probably very used to by now.

87
00:06:17,390 --> 00:06:21,470
And if you take a look at the code that we're debugging it is everything we have inside of our index

88
00:06:21,470 --> 00:06:23,180
not J.S. file.

89
00:06:23,180 --> 00:06:28,670
So now I can use the console right here to inspect different variables I can use the same controls to

90
00:06:28,700 --> 00:06:31,810
continue execution step in step out and so on.

91
00:06:31,910 --> 00:06:36,230
So I'll try stepping over to that next expression.

92
00:06:36,300 --> 00:06:39,720
Now we have defined or required in the my script J.S. file.

93
00:06:39,720 --> 00:06:45,000
Now I can inspect that counter object by using the console down here by the way if you don't see the

94
00:06:45,000 --> 00:06:48,010
console hit escape and I'll pop it right up.

95
00:06:48,090 --> 00:06:52,450
Of course you can also at the console tab at the top as well.

96
00:06:52,460 --> 00:06:57,620
Now I can take a look at counter object and just like you saw at the terminal but had a much easier

97
00:06:57,620 --> 00:07:08,480
to use fashion we can you cannot object increment counter pilot a couple of times yet the counter and

98
00:07:08,480 --> 00:07:15,460
there we go then once all done we can resume and we see the program run as usual.

99
00:07:15,460 --> 00:07:19,960
That's going to do the console logs into our debugger directly as opposed to the console which we saw

100
00:07:19,960 --> 00:07:22,120
previously as you might guess.

101
00:07:22,210 --> 00:07:29,650
This is a really handy thing to use way easier to use from a user perspective or us as developers than

102
00:07:29,650 --> 00:07:31,690
doing that command line debugger.

103
00:07:31,720 --> 00:07:37,410
However as you might guess well sometimes it's a little bit annoying to have to go to Chrome Poland

104
00:07:37,420 --> 00:07:38,800
slash slash inspect.

105
00:07:38,920 --> 00:07:44,200
In addition every single time that we want to restart our program we have to refresh this thing hit

106
00:07:44,200 --> 00:07:50,090
inspect again and essentially open up the debugger again now last thing on it mentioned here is the

107
00:07:50,090 --> 00:07:57,230
difference between dash dash inspect the arc and just dash dash inspect the beer K is what I probably

108
00:07:57,230 --> 00:08:01,550
think that you're going to use for the most part when you're doing debugging especially when you're

109
00:08:01,550 --> 00:08:06,710
starting out with note the real difference here is that when you add on the dash dashboard R.K. that's

110
00:08:06,710 --> 00:08:13,220
going to start up your program but it's going to pause execution on the very first line of code dash

111
00:08:13,220 --> 00:08:19,910
dash and Specht is going to start up the debugger but it's also going to simultaneously run your program

112
00:08:21,300 --> 00:08:27,260
it's going to run your program until you connect to it with a debugger and hit a debugger statement.

113
00:08:28,050 --> 00:08:33,900
So usually the dash dash inspect is only going to be used when you are running a very long running process

114
00:08:33,990 --> 00:08:39,450
like a server if you're running a very small script that's going to complete execution in a matter of

115
00:08:39,450 --> 00:08:44,610
like milliseconds which is the case with our current program we're always going to be using dash dash

116
00:08:44,660 --> 00:08:49,740
inspect the arcade to be completely honest with you I would almost just forget that this variant of

117
00:08:49,740 --> 00:08:51,090
the command even exists.

118
00:08:51,090 --> 00:08:54,510
And just remember this one right here OK.

119
00:08:54,530 --> 00:08:59,900
So that's how we're going to debug our note programs again very similar experience to debugging inside

120
00:08:59,900 --> 00:09:06,910
the browser because we are pretty much using the exact same debugger now that we've got some basics

121
00:09:06,940 --> 00:09:08,070
of node down.

122
00:09:08,140 --> 00:09:11,930
We understand a little bit about modules in a little bit about debugging.

123
00:09:11,940 --> 00:09:15,910
Well let's start to do some interesting things with node in the next video.
