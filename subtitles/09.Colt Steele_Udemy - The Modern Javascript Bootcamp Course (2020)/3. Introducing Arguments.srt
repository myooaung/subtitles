1
00:00:00,180 --> 00:00:07,150
Next up let's talk about function arguments arguments is really a fancy term for inputs to a function.

2
00:00:07,200 --> 00:00:13,080
And right now our functions don't expect they don't accept any inputs they behave the same way every

3
00:00:13,080 --> 00:00:13,950
time.

4
00:00:13,950 --> 00:00:20,940
So we wrote that silly Grumps function and this is kind of what happens here visually at least if this

5
00:00:20,940 --> 00:00:27,000
is the function we don't pass any inputs and we just call Grumps the exact same way every time and we

6
00:00:27,000 --> 00:00:30,290
get the same output those three console dot logs.

7
00:00:30,300 --> 00:00:32,910
Now I didn't write them here because they took up too much space.

8
00:00:32,910 --> 00:00:35,610
So we get this little grumpy kid instead.

9
00:00:35,610 --> 00:00:39,510
But it's the same output every time the same three lines that are printed.

10
00:00:39,510 --> 00:00:40,790
Here's another example.

11
00:00:40,800 --> 00:00:47,700
A function that I'm calling green just type it up very quickly and all it does is console dot log Hi

12
00:00:48,030 --> 00:00:49,410
every single time.

13
00:00:49,410 --> 00:00:57,630
If I run it and I call greed we can't impact it we don't pass anything in it works the same way no inputs.

14
00:00:57,630 --> 00:00:59,230
Same output.

15
00:00:59,430 --> 00:01:05,160
Now this doesn't necessarily mean we'll always get the exact same output as we saw with our roll die

16
00:01:05,190 --> 00:01:06,270
function.

17
00:01:06,270 --> 00:01:11,790
We did get a different output because we're using random numbers but we're not altering the behavior

18
00:01:11,910 --> 00:01:16,020
when we call it we call roll died the exact same way every single time.

19
00:01:16,140 --> 00:01:21,180
We're not impacting it we're just saying roll the dice and it picks random number but it would be nice

20
00:01:21,210 --> 00:01:27,630
if we could specify if this was a six sided die or a 12 sided die or something like that and we would

21
00:01:27,630 --> 00:01:29,520
do that by passing in an argument.

22
00:01:30,150 --> 00:01:35,240
So those inputs that we pass in as I've already mentioned are called arguments.

23
00:01:35,310 --> 00:01:41,530
Here's an example of an updated version of Grete where we could pass in a value for someone's name.

24
00:01:41,610 --> 00:01:46,800
So if we call greet and then we pass in Tim the output could be Hi Tim.

25
00:01:46,800 --> 00:01:52,350
If we did it with honor we could get the output of high honor still very simple stuff.

26
00:01:52,350 --> 00:01:59,880
Here's another example a hypothetical function called average and it takes multiple arguments two or

27
00:01:59,880 --> 00:02:03,990
four maybe ten and the output will be the average.

28
00:02:03,990 --> 00:02:08,430
So it will sum them all together and then divide by the number of inputs.

29
00:02:08,490 --> 00:02:11,900
So twenty plus twenty five divided by two twenty two point five.

30
00:02:11,940 --> 00:02:18,000
These four numbers divided by four gives us four and we've already seen arguments quite a bit in the

31
00:02:18,030 --> 00:02:23,820
built in methods we've been working with something like two uppercase expects no inputs we don't pass

32
00:02:23,820 --> 00:02:29,670
anything in it just uppercase is something it's kind of like our initial version of Greek it does the

33
00:02:29,670 --> 00:02:37,080
same thing but then we have things like index f or includes or splice or slice where we have to specify

34
00:02:37,080 --> 00:02:43,500
inputs we have to tell it in the case of index of what string we're looking for in hello and we get

35
00:02:43,500 --> 00:02:49,890
different behaviours and different outcomes if we pass in an h index of 0 if we pass in an oh we get

36
00:02:49,890 --> 00:02:56,040
index of 4 we're specifying additional information so how do we make our functions expect arguments

37
00:02:56,040 --> 00:03:02,460
and use those values in the code in the function body it's pretty simple All we do is instead of our

38
00:03:02,460 --> 00:03:07,430
function definition instead of empty parentheses we add in some variable name.

39
00:03:08,040 --> 00:03:13,920
So this has to be a valid javascript identifier it can't have spaces it can't start with a number but

40
00:03:13,980 --> 00:03:15,810
otherwise we can name it whatever we want.

41
00:03:16,500 --> 00:03:26,100
And just like with a for of loop where we had for let x of some array let's say the array 1 2 3 this

42
00:03:26,130 --> 00:03:32,220
X doesn't matter what we call it at all but it will hold the value each time through this loop of one

43
00:03:32,220 --> 00:03:38,370
of these elements we kind of do the same thing for a function if we wanted to update our greet function

44
00:03:38,790 --> 00:03:46,880
to accept somebodies name I would go maybe with nickname or person and we put that in the parentheses.

45
00:03:47,070 --> 00:03:53,670
This does not do anything on its own it will only work if we pass in a string or a number or some value

46
00:03:53,940 --> 00:03:55,190
when we call green.

47
00:03:55,260 --> 00:04:03,900
But let's constantly log nickname nickname will hold the value of whatever is passed in JavaScript doesn't

48
00:04:03,900 --> 00:04:09,840
care what the type is if it's a string or even an array it just cares that it's the first thing that

49
00:04:09,840 --> 00:04:13,080
was passed in and it will be assigned to nickname.

50
00:04:13,080 --> 00:04:17,760
That's just a sort of a placeholder name you want to give it something that makes sense a name that

51
00:04:17,970 --> 00:04:24,340
is logical so nickname is fine let's see what happens now I'm printing out nickname on the first line

52
00:04:24,810 --> 00:04:29,510
let's call greet and then pass in Tim there go.

53
00:04:29,540 --> 00:04:37,310
You can see the first count start log says nickname which is Tim so nickname had the value of Tim because

54
00:04:37,310 --> 00:04:44,630
that's what I passed in if I pass something else in like a no nickname has that value it could be an

55
00:04:44,630 --> 00:04:51,770
array about an empty array we consider lug empty array and what if I don't pass anything.

56
00:04:52,670 --> 00:04:57,560
In some languages this could cause an error in JavaScript it doesn't care.

57
00:04:57,560 --> 00:05:02,990
It says there's no value it's undefined but it doesn't break anything it's just not their nickname just

58
00:05:02,990 --> 00:05:10,010
didn't have a value so let's rewrite this just to be slightly nicer we use back ticks and we'll greet

59
00:05:10,010 --> 00:05:17,540
the person high and then dollar sign nickname and maybe an exclamation point afterwards run it again

60
00:05:18,020 --> 00:05:23,040
greet Tim Hi Tim.

61
00:05:23,040 --> 00:05:29,570
Okay so we're confident logging something different based off of the input the input has a direct impact

62
00:05:29,690 --> 00:05:32,390
on what the function actually does.

63
00:05:32,390 --> 00:05:36,210
Next up let's try modifying roll die or throw dice.

64
00:05:36,470 --> 00:05:37,310
These two functions.

65
00:05:37,310 --> 00:05:38,650
Let's pick one.

66
00:05:38,650 --> 00:05:39,280
How uncommon.

67
00:05:39,280 --> 00:05:40,400
Them both.

68
00:05:40,400 --> 00:05:42,420
Let's go with throw dice.

69
00:05:42,500 --> 00:05:52,160
So right now throw dice always calls roll die six times if I call it over here throw dice it rolls six

70
00:05:52,160 --> 00:05:59,060
dice it calls roll dice six times but what if we could specify a number of times how many times we actually

71
00:05:59,060 --> 00:05:59,640
want to roll.

72
00:05:59,660 --> 00:06:04,010
Maybe we're playing a game where you have two dice but maybe we're playing another game like Yahtzee

73
00:06:04,010 --> 00:06:05,690
where you have five or six.

74
00:06:05,690 --> 00:06:11,360
I don't remember how many it actually uses but it's more than two we could pass in an argument and let's

75
00:06:11,360 --> 00:06:12,880
give it a name.

76
00:06:12,950 --> 00:06:14,720
We'll talk more about terminology here.

77
00:06:14,750 --> 00:06:19,120
Technically the variables we write here are called parameters not arguments.

78
00:06:19,190 --> 00:06:23,420
Let's go with times or NUM roles.

79
00:06:23,540 --> 00:06:24,620
Maybe that's better.

80
00:06:24,620 --> 00:06:29,630
Num rolls and then in here we'll use this to repeat roll die.

81
00:06:29,990 --> 00:06:31,570
So how do we repeat something.

82
00:06:31,670 --> 00:06:36,610
We'll use a loop so we'll loop for we'll just do a for loop.

83
00:06:36,800 --> 00:06:39,410
Let's I equals zero.

84
00:06:39,410 --> 00:06:47,240
Well I is less than num rolls I add one to AI each time and we'll call roll die.

85
00:06:49,010 --> 00:06:53,490
So if we pass in five we'll go from zero and then up to five.

86
00:06:53,510 --> 00:06:55,020
But not including five.

87
00:06:55,220 --> 00:06:59,990
Or we could go from one and then less than or equal to num roles.

88
00:06:59,990 --> 00:07:04,580
I'll just go with zero because we don't care about what I actually is we just want a certain number

89
00:07:04,580 --> 00:07:05,600
of times.

90
00:07:05,690 --> 00:07:16,720
So let's see if it works throw dice and I do need to pass in a number like three we got three rolls.

91
00:07:16,720 --> 00:07:19,000
How about five.

92
00:07:19,030 --> 00:07:20,180
We get five rolls.

93
00:07:20,290 --> 00:07:22,810
It combined two of them because they were identical.

94
00:07:22,810 --> 00:07:26,340
Thanks chrome counsel nine we get nine rolls.

95
00:07:26,410 --> 00:07:31,920
Now we've written it so that we can impact the way it behaves based off of a single input.

96
00:07:31,930 --> 00:07:32,130
All right.

97
00:07:32,140 --> 00:07:33,320
So that's good enough for now.

98
00:07:33,430 --> 00:07:38,170
In the next video we'll see how we can have multiple arguments how the order matters and we'll start

99
00:07:38,170 --> 00:07:39,910
writing some more complicated functions.
