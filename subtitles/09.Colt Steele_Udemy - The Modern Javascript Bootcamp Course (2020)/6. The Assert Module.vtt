WEBVTT
1
00:00:01.290 --> 00:00:04.250
There's one last little fix I want to make to our test file.

2
00:00:04.440 --> 00:00:08.880
So right now instead of both of our tests we've got some really repetitive testing logic.

3
00:00:09.030 --> 00:00:15.300
So in both cases that test right there in this one we say several times in a row if these things are

4
00:00:15.300 --> 00:00:21.610
not equal throw in there and we can see this perfectly duplicated over and over again and as usual any

5
00:00:21.610 --> 00:00:23.430
time that we've got some code duplication.

6
00:00:23.460 --> 00:00:28.110
Well that usually means that there is an opportunity to do some refactoring or cleanup.

7
00:00:28.170 --> 00:00:33.150
So in this video we're going to take a look at a module in it no jazz standard library that is going

8
00:00:33.150 --> 00:00:35.990
to automate like that code block right there.

9
00:00:36.210 --> 00:00:38.580
And that one and that one and so on.

10
00:00:38.580 --> 00:00:43.290
So we're going to condense each of these big IF statements that are really ugly down to one single function

11
00:00:43.290 --> 00:00:45.950
call to get started.

12
00:00:45.950 --> 00:00:52.220
We're going to pull open our browser and take a look at the no jazz standard library documentation as

13
00:00:52.220 --> 00:00:58.610
a quick reminder you can get there by going to you know J.S. dot org slash API once you're here on the

14
00:00:58.610 --> 00:01:02.730
left hand side we'll find the link to assertion testing.

15
00:01:02.750 --> 00:01:07.310
So this is a module that has a bunch of different functions inside of it that allow us to essentially

16
00:01:07.340 --> 00:01:12.920
automate exactly what we're doing right here the different functions it will find are going to allow

17
00:01:12.920 --> 00:01:17.810
us to make different assertions or compare different values against each other in slightly different

18
00:01:17.810 --> 00:01:23.760
fashions a function that will allow us to replace these really big if statements that we can use very

19
00:01:23.760 --> 00:01:27.000
easily is the strict equal function.

20
00:01:27.000 --> 00:01:31.620
So instead of here I'm going to look where assert that strict equal it's down here towards the bottom

21
00:01:34.040 --> 00:01:37.910
so we can see a really good example of how to use this right here inside the example.

22
00:01:37.910 --> 00:01:44.180
So we call assert dot strict equal and then we pass in the value that we expect or excuse me the value

23
00:01:44.210 --> 00:01:46.210
that we actually have out of our test.

24
00:01:46.340 --> 00:01:51.620
And then as the second argument we pass on the value that we expected to get internally strict equal

25
00:01:51.650 --> 00:01:54.650
is going to check and see if those two values are equal to each other.

26
00:01:54.860 --> 00:02:00.630
If they're not it's then going to throw in their so we can use this very easily to replace all the different

27
00:02:00.650 --> 00:02:02.580
if statements we currently have.

28
00:02:02.580 --> 00:02:08.310
Let's flip back over to our code and do that replacement really quickly show up at the top.

29
00:02:09.000 --> 00:02:18.660
I'm going to require a cert Rhonda a cert module we can then go down through all of our different if

30
00:02:18.660 --> 00:02:25.600
statements and call a cert dot strict equal saw first go to the for each function right above the if

31
00:02:25.600 --> 00:02:26.000
statement.

32
00:02:26.020 --> 00:02:32.710
I will call a search dot strict equal at the first argument is going to be what we actually got out

33
00:02:32.710 --> 00:02:33.450
of our test.

34
00:02:33.460 --> 00:02:36.130
So this going to value that our code produced.

35
00:02:36.130 --> 00:02:43.380
So for us in this case it would be the sum variable that is what our code produced in the second argument

36
00:02:43.440 --> 00:02:47.830
is going to be the value that we expected to find which in this case is six.

37
00:02:48.040 --> 00:02:54.050
All put in six as a second argument and just you know optionally we can pass in a third argument of

38
00:02:54.050 --> 00:02:58.610
an error message if we put in a argument right here it's gonna be a simple string and it's going to

39
00:02:58.610 --> 00:03:01.720
be printed up inside of our console when something goes wrong.

40
00:03:01.760 --> 00:03:06.230
The only reason to put in the argument over here is to just clarify what we were really looking for

41
00:03:06.230 --> 00:03:10.690
or what we were trying to compare here in a very simple test like what we have right here.

42
00:03:10.700 --> 00:03:15.260
It is not really necessary to put in that third argument because chances are if something goes wrong

43
00:03:15.260 --> 00:03:20.380
with this test you can probably open up this function and really quickly understand what was going on.

44
00:03:20.630 --> 00:03:24.890
But if it was a little bit more complicated test and the assertion that we are trying to make right

45
00:03:24.890 --> 00:03:29.690
here wasn't really clear in nature then we might choose to throw in some kind of message just to help

46
00:03:29.690 --> 00:03:34.440
ourselves and other engineers understand what this thing was trying to check.

47
00:03:34.580 --> 00:03:38.900
So in our case just as a demonstration I would normally not put a message here but in this case I will

48
00:03:40.250 --> 00:03:48.450
I would put in something like expected for each to sum the array or something like that.

49
00:03:48.610 --> 00:03:51.130
So it's something to say hey here's what we're trying to achieve.

50
00:03:51.130 --> 00:03:58.250
We were trying to use the for each function to find the sum of all the values in the array so this assert

51
00:03:58.280 --> 00:04:02.150
that strict equals statement can completely replace the if statement that we have right now.

52
00:04:02.180 --> 00:04:06.730
So I can now delete the if statement entirely okay.

53
00:04:06.750 --> 00:04:13.550
Let's say this really quickly I'll go back over to my terminal and run it I didn't see anything go wrong.

54
00:04:13.550 --> 00:04:17.500
That is because we calculated a value that was equal to the expected value.

55
00:04:17.510 --> 00:04:20.420
So some and six were equal to each other.

56
00:04:20.510 --> 00:04:24.560
Let's once again change the value of six right there just to force our test to fail.

57
00:04:24.560 --> 00:04:26.450
It's going to change that to seven.

58
00:04:26.510 --> 00:04:32.270
I'll say this once again rerun the file and now I can see the error message right here expected for

59
00:04:32.270 --> 00:04:33.560
each to sum the array

60
00:04:36.760 --> 00:04:37.580
OK.

61
00:04:37.870 --> 00:04:42.220
So this is going to condense down all these different tests we write quite a bit so we don't have to

62
00:04:42.220 --> 00:04:48.190
use these really bulky if statements and say throw new error every single time I'm going to change the

63
00:04:48.190 --> 00:04:53.350
seven right there back to a six and then going to go down to our map function and I'm going to update

64
00:04:53.410 --> 00:04:54.620
this thing as well.

65
00:04:55.720 --> 00:05:02.100
To use the Assert dot strict equal statement so we're going to call that function three times once for

66
00:05:02.100 --> 00:05:04.730
each of these different statements this time around.

67
00:05:04.740 --> 00:05:08.970
I'm not going to put in a message because once again I think that this test at the end of the day would

68
00:05:08.970 --> 00:05:11.710
probably be easy enough to understand what was going on.

69
00:05:11.760 --> 00:05:17.120
So we really shouldn't necessarily require a big error message to describe what we're trying to achieve

70
00:05:18.390 --> 00:05:23.530
I'll do and assert not strict equal of results at zero.

71
00:05:23.540 --> 00:05:30.300
That should be equal to two and I can simply paste this down twice the next one will be results at 1

72
00:05:30.570 --> 00:05:36.610
and that should be equal to 4 and then results at 2 should be equal to 6.

73
00:05:36.630 --> 00:05:40.720
Now we can delete all those if statements and we're left with just that

74
00:05:43.600 --> 00:05:48.020
it I'll flip back over I rerun my tests and it looks like everything is still good.

75
00:05:48.200 --> 00:05:51.780
I'm going to once again cause this test to artificially fail.

76
00:05:51.890 --> 00:05:56.150
I always do this just to make sure that there's not some fluke and to make sure that all the tests are

77
00:05:56.150 --> 00:05:58.620
expected to run actually are running.

78
00:05:58.760 --> 00:06:01.130
There might be some weird scenario where I don't know.

79
00:06:01.160 --> 00:06:05.900
Maybe I simply forgot to save the file or something like that that is making my test pass when in reality

80
00:06:05.930 --> 00:06:07.040
they're failing.

81
00:06:07.040 --> 00:06:12.020
So it's usually good practice to see your test fail one time and then fix it up to make it work.

82
00:06:12.750 --> 00:06:13.970
So I'll take the six down here.

83
00:06:13.970 --> 00:06:15.230
I'm going to change it to a 7

84
00:06:17.980 --> 00:06:19.460
and now I can see the error message.

85
00:06:19.460 --> 00:06:22.910
So we expected 6 to be equal to seven or something.

86
00:06:22.910 --> 00:06:24.570
We expected six to equal.

87
00:06:24.590 --> 00:06:25.070
Well no.

88
00:06:25.180 --> 00:06:27.190
We did expect six to equal seven.

89
00:06:27.190 --> 00:06:30.530
But in reality it should be six equal to six.

90
00:06:30.560 --> 00:06:32.570
So now we can go back over change that back to a six.

91
00:06:32.570 --> 00:06:36.860
Like so and we're all set okay.

92
00:06:36.870 --> 00:06:38.760
So is the Assert module.

93
00:06:38.820 --> 00:06:42.750
Now I want to mention that there are several other functions inside of here that are really handy to

94
00:06:42.750 --> 00:06:43.530
have.

95
00:06:43.740 --> 00:06:50.580
In particular we could technically replace this test right here with another function called strict

96
00:06:50.670 --> 00:06:52.860
or something deep strict equal.

97
00:06:52.860 --> 00:06:56.820
So this thing is going to take a look at all the different values inside of some object in this case

98
00:06:56.870 --> 00:07:00.830
array and some expected values and make sure they are equal.

99
00:07:01.170 --> 00:07:06.740
So we could technically have replaced these three calls with just one single call.

100
00:07:06.810 --> 00:07:11.820
So let's try that out really quickly I'm going to comment those out we could have done a cert dot deep

101
00:07:11.880 --> 00:07:12.540
strict equal

102
00:07:15.520 --> 00:07:21.810
and said I expect the result to be equal to whoops 2 4 6.

103
00:07:21.880 --> 00:07:26.110
Now this function is going to take a look at all the different values inside result and make sure that

104
00:07:26.110 --> 00:07:31.300
they are equal to all the values inside of that array right there and in the same order of course.

105
00:07:31.370 --> 00:07:34.570
Now we can save this try again and we're still good to go.

106
00:07:34.940 --> 00:07:40.430
Once again I might choose to just make this thing fail on purpose I'll change that last one to a 7 and

107
00:07:40.430 --> 00:07:41.110
there we go.

108
00:07:41.120 --> 00:07:44.870
Nice thing about using the strict equal thing is it gives you this really nice error message to help

109
00:07:44.870 --> 00:07:47.510
you understand exactly what was different.

110
00:07:47.720 --> 00:07:53.250
So this is saying that the actual value we passed in like the value that our code produced had a six.

111
00:07:53.290 --> 00:08:00.570
And that's indicated by the plus right there in green and then the expected value was missing or wanted

112
00:08:00.570 --> 00:08:02.850
to have a seven but it is missing out of the expected value.

113
00:08:02.850 --> 00:08:08.390
That's why we see the minus so kind of nice to use on these more complex functions because they'll just

114
00:08:08.390 --> 00:08:09.430
give you a little bit more helpful.

115
00:08:09.440 --> 00:08:12.600
Error Message In fact I think that's so nice.

116
00:08:12.600 --> 00:08:17.810
I'll stick with that instead of the individual strict equals okay.

117
00:08:17.840 --> 00:08:18.620
That's pretty much it.

118
00:08:19.010 --> 00:08:21.130
So we now have a pretty solid.

119
00:08:21.140 --> 00:08:23.440
Believe it or not testing implementation here.

120
00:08:23.440 --> 00:08:24.510
So let's take a pause.

121
00:08:24.560 --> 00:08:29.030
We're gonna come back the next video we're going to replace our little custom testing library that we

122
00:08:29.030 --> 00:08:34.100
just assembled with some outside testing library and you're going to very quickly see as I mentioned

123
00:08:34.100 --> 00:08:34.960
like 10 times now.

124
00:08:35.330 --> 00:08:40.220
All this stuff is just plain identical so quick pause and we'll tackle that in just a moment.
