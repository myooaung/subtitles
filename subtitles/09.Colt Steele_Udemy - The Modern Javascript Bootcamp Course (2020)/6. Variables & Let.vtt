WEBVTT
1
00:00:00.210 --> 00:00:02.330
Next up let's talk about variables.

2
00:00:02.340 --> 00:00:08.820
So far we've seen how to write numbers in simple mathematical expressions but we're not capturing any

3
00:00:08.820 --> 00:00:12.060
information we're not able to recall any values.

4
00:00:12.060 --> 00:00:16.380
It's just basically a calculator a nice javascript calculator.

5
00:00:16.560 --> 00:00:21.870
But when we add variables in we now can keep track of values and recall them Or update them whenever

6
00:00:21.870 --> 00:00:22.410
we want.

7
00:00:22.830 --> 00:00:25.710
So variables are like labeled jars.

8
00:00:25.770 --> 00:00:29.670
You can see about this diagram on the right hand side where we have a value.

9
00:00:29.880 --> 00:00:33.750
And it goes into a sort of a container that has a label on it.

10
00:00:33.750 --> 00:00:37.980
So in this case we're saying age is 72 the number 72.

11
00:00:38.040 --> 00:00:41.440
So we can store value we give it a name so that we can recall it later.

12
00:00:41.460 --> 00:00:42.200
We could use it.

13
00:00:42.210 --> 00:00:46.540
We can pass it to something we can change it can do all sorts of things.

14
00:00:46.560 --> 00:00:49.350
So very very important concept in programming.

15
00:00:49.350 --> 00:00:51.250
We make variables all the time.

16
00:00:51.360 --> 00:00:55.760
So the basic syntax that we'll see first is using a keyword called left.

17
00:00:55.830 --> 00:01:01.560
Now there actually are two different ways that we can create variables in JavaScript at least two that

18
00:01:01.560 --> 00:01:03.020
are commonly used today.

19
00:01:03.090 --> 00:01:06.300
There's another option which we'll talk about in a separate video coming up.

20
00:01:06.930 --> 00:01:09.130
So for now we're talking about it in concept.

21
00:01:09.150 --> 00:01:10.520
First up let.

22
00:01:10.530 --> 00:01:12.710
So let is the keyword we start with.

23
00:01:12.990 --> 00:01:18.210
And then a variable name some name is what I'm calling it here it could equal or it could be anything

24
00:01:18.210 --> 00:01:18.820
you want.

25
00:01:18.990 --> 00:01:20.590
It could be my variable.

26
00:01:20.670 --> 00:01:22.740
It could be stupid variable.

27
00:01:22.830 --> 00:01:25.110
It could be chicken eggs.

28
00:01:25.110 --> 00:01:29.790
There are a couple of conventions that we'll talk about in a moment and then we have an equal sign and

29
00:01:29.790 --> 00:01:31.560
then a value.

30
00:01:31.560 --> 00:01:42.610
So to recreate what we have here we would write let age equals 72 let age equals 72.

31
00:01:42.610 --> 00:01:48.120
Now we have a value called age and at any point I can recall it just like that.

32
00:01:48.550 --> 00:01:51.150
We usually don't just recall age for no reason.

33
00:01:51.280 --> 00:01:52.640
We usually do something with it.

34
00:01:53.260 --> 00:02:00.070
Here's a simple example we have two variables hands which is four and roosters which is two we can add

35
00:02:00.070 --> 00:02:02.860
them together hence plus roosters.

36
00:02:02.860 --> 00:02:08.890
So not only are we saving a value that we can recall later we're also giving it a nice name.

37
00:02:08.980 --> 00:02:14.050
A way of understanding what it is we can see clearly we are adding hens to roosters we're trying to

38
00:02:14.050 --> 00:02:18.510
calculate total number of chickens versus just adding four plus two.

39
00:02:18.550 --> 00:02:23.590
It's not as easy to tell what's going on but the main value here the main reason for variables is that

40
00:02:23.590 --> 00:02:27.730
we are storing information so that we can recall it and use it later.

41
00:02:27.730 --> 00:02:28.720
So we can recall them.

42
00:02:28.810 --> 00:02:31.480
But of course we can also update them.

43
00:02:31.480 --> 00:02:38.830
So here I have hens which I'm initializing to four and a raccoon killed on my hands very very sad for

44
00:02:38.830 --> 00:02:45.120
those who don't know raccoons while adorable are quite vicious towards lots of animals especially chickens.

45
00:02:45.220 --> 00:02:51.010
I could do something like hens minus one which you might think would change the value of hens but it's

46
00:02:51.010 --> 00:02:52.940
not actually doing that at all.

47
00:02:52.990 --> 00:02:55.900
Here I have my age variable which is 72.

48
00:02:55.960 --> 00:02:59.410
If I do age plus 1 let's say that this person had a birthday.

49
00:02:59.410 --> 00:03:01.320
Their age should now be 73.

50
00:03:01.450 --> 00:03:06.940
I'm not actually changing the value all that I'm doing is saying hey javascript give me that value for

51
00:03:06.940 --> 00:03:11.470
age and then add one to it but I'm not telling it to update age.

52
00:03:11.770 --> 00:03:19.240
So the easiest way or the first way to change it is to set hens or age equal to the variable current

53
00:03:19.240 --> 00:03:24.880
value plus or minus or whatever we're trying to do we change it based off of the current value.

54
00:03:25.360 --> 00:03:28.900
So for example age equals age plus 1.

55
00:03:28.930 --> 00:03:32.200
Now we have 73 in age as you can see there.

56
00:03:32.350 --> 00:03:35.130
We can do it again if I recall it with the up arrows.

57
00:03:35.290 --> 00:03:39.230
I'm adding one let's add a whole decade.

58
00:03:39.430 --> 00:03:42.430
Now if we look at age it's 84.

59
00:03:42.490 --> 00:03:46.170
So that's one way of updating a variable and we can multiply divide.

60
00:03:46.180 --> 00:03:47.240
We could do whatever we want.

61
00:03:47.260 --> 00:03:48.940
We could also just completely change it.

62
00:03:48.970 --> 00:03:52.810
I could say age is actually now 18.

63
00:03:52.870 --> 00:03:58.340
This person was reincarnated as a teenager actually is 18 considered a teenager.

64
00:03:58.390 --> 00:03:59.440
I don't know adult.

65
00:03:59.620 --> 00:04:01.870
Anyway we've now set it to 18.

66
00:04:01.900 --> 00:04:04.270
Now there are a couple of things to know about variables.

67
00:04:04.270 --> 00:04:08.510
The first is that you can't technically name your variables anything.

68
00:04:08.620 --> 00:04:11.290
For example you couldn't name a variable.

69
00:04:11.290 --> 00:04:14.850
Let let let equals 10.

70
00:04:15.070 --> 00:04:20.260
Javascript will get very confused because light is a reserved word it's a key word in the language of

71
00:04:20.260 --> 00:04:26.860
JavaScript so it thinks that we're trying to make another variable here and you can see left is disallowed

72
00:04:26.890 --> 00:04:29.450
as electrically bound name.

73
00:04:29.800 --> 00:04:30.780
So that doesn't work.

74
00:04:30.790 --> 00:04:34.320
There are others that you still encounter definitely in JavaScript.

75
00:04:34.330 --> 00:04:36.800
There's something called the document.

76
00:04:37.390 --> 00:04:39.880
The document is a special object.

77
00:04:39.880 --> 00:04:43.300
We haven't talked about objects but it's something that exists in your browser.

78
00:04:43.300 --> 00:04:50.740
And so if you tried to make a variable called document that document equals 15 identifier document has

79
00:04:50.740 --> 00:04:52.480
already been declared.

80
00:04:52.540 --> 00:04:56.200
So there are some things you'll need to look out for but for the most part you can name your variables

81
00:04:56.240 --> 00:04:56.890
anything.

82
00:04:57.490 --> 00:04:58.510
That doesn't mean you should.

83
00:04:58.510 --> 00:05:01.320
There are some things you should be aware of or that you should keep in mind.

84
00:05:01.330 --> 00:05:04.360
First of all you want to give your variable a name that makes sense.

85
00:05:04.390 --> 00:05:11.860
So you don't want to do let X equals 18 when in reality this is a value for age or you wouldn't want

86
00:05:11.860 --> 00:05:12.080
to do.

87
00:05:12.100 --> 00:05:13.450
Let's see equals five.

88
00:05:13.450 --> 00:05:18.770
If this was a five star rating why not call it rating or score or something like that.

89
00:05:18.850 --> 00:05:24.110
So naming is very very important and along with that there's a convention in JavaScript where we name

90
00:05:24.160 --> 00:05:30.040
variables using camel case camel case just means that when you have multiple words multiple pieces in

91
00:05:30.040 --> 00:05:40.120
a variable name like num of hands you capitalize the first letter of each new word except for the first

92
00:05:40.120 --> 00:05:42.040
one at least in javascript.

93
00:05:42.040 --> 00:05:45.020
So this is camel case except for the first letter.

94
00:05:45.100 --> 00:05:50.920
We don't want to have an uppercase first letter it won't break things you can do this num of heads equals

95
00:05:51.180 --> 00:05:52.130
six.

96
00:05:52.210 --> 00:05:53.700
I think I had forward earlier.

97
00:05:53.710 --> 00:05:55.730
Now we have six some of the eggs hatched.

98
00:05:55.990 --> 00:06:02.050
This works but the convention the pattern that developers follow in javascript that companies want you

99
00:06:02.050 --> 00:06:07.360
to follow that style guides want you to follow is to lowercase the first letter and then uppercase the

100
00:06:07.360 --> 00:06:09.460
first letter of every other word after that.

101
00:06:10.000 --> 00:06:15.790
So let average rating equal let's go with nine point seven.

102
00:06:17.260 --> 00:06:22.570
OK so that's one thing to keep in mind you don't want to do average dash rating.

103
00:06:22.570 --> 00:06:27.580
We don't want snake case or you use underscores and you don't want to just let it bleed together like

104
00:06:27.580 --> 00:06:28.010
this.

105
00:06:28.030 --> 00:06:35.180
If those are actual separate words it's much easier to read if you have camel casing lastly if you try

106
00:06:35.180 --> 00:06:40.690
and read declare a variable that you've already made like what I just do average rating.

107
00:06:40.730 --> 00:06:49.670
If I wanted to make another average rating and I want to set it to zero this time Nope not gonna happen

108
00:06:49.670 --> 00:06:54.460
with let javascript tells me identifier average rating has already been declared.

109
00:06:54.590 --> 00:07:00.390
So if we create a variable with a given name using but we can not then read declare it.

110
00:07:00.530 --> 00:07:04.300
We cannot make a new variable with the same name using let.

111
00:07:04.400 --> 00:07:08.500
We can only have one of those in a given scope which we haven't talked about scope.

112
00:07:08.540 --> 00:07:10.640
So don't worry about it we'll return to it.

113
00:07:10.640 --> 00:07:12.350
But you can see the problem right.

114
00:07:12.350 --> 00:07:13.520
We already have average rating.

115
00:07:13.520 --> 00:07:14.830
We've made space for it in memory.

116
00:07:14.830 --> 00:07:16.130
JavaScript is like OK.

117
00:07:16.150 --> 00:07:17.870
There's one thing called average rating.

118
00:07:17.870 --> 00:07:21.040
You try and make another it's not going to be happy with you and you get this error.
