1
00:00:01,140 --> 00:00:05,460
We just put together our create method and it definitely works ok but there's one little thing that

2
00:00:05,460 --> 00:00:11,250
we missed while we were putting it together back inside of my users dot J's on file inside the repositories

3
00:00:11,250 --> 00:00:12,060
directory.

4
00:00:12,060 --> 00:00:16,640
I want you to notice that right now all of our different records have the exact same email and password.

5
00:00:16,660 --> 00:00:19,740
Now in the context of saving users this doesn't make a lot of sense.

6
00:00:19,740 --> 00:00:25,550
Usually every different user who signs up to our application has to have a different and unique email.

7
00:00:25,620 --> 00:00:28,140
Think about this from the world of products.

8
00:00:28,200 --> 00:00:32,520
If we were trying to store different products inside of here maybe every product would have like a title

9
00:00:32,520 --> 00:00:38,160
property and in the world of products or things that we sell it is entirely possible for different products

10
00:00:38,160 --> 00:00:39,750
to have the same title.

11
00:00:39,750 --> 00:00:43,260
Think about like maybe bottled water or scissors.

12
00:00:43,260 --> 00:00:47,280
There's probably some scissors out there that have the name scissors and that is just the name of the

13
00:00:47,280 --> 00:00:47,790
product.

14
00:00:47,790 --> 00:00:49,680
No other name whatsoever.

15
00:00:49,860 --> 00:00:55,320
So we want to have the ability to support different records that have some identical properties but

16
00:00:55,320 --> 00:01:01,780
we'd still need some way to identify them separately so in order to do so we're going to make sure that

17
00:01:01,810 --> 00:01:07,130
every record that we ever save into our data store gets assigned a randomized I.D..

18
00:01:07,540 --> 00:01:12,460
And for that we're going to create a method called random I.D. then whenever we call create to save

19
00:01:12,460 --> 00:01:16,130
some new data we're going to take in the attributes that are being provided.

20
00:01:16,300 --> 00:01:20,560
We're gonna add in a random I.D. as the I.D. property into that object.

21
00:01:20,950 --> 00:01:21,940
So let's give this a shot.

22
00:01:21,940 --> 00:01:24,760
Let's think about how we're going to generate a random I.D..

23
00:01:25,150 --> 00:01:29,790
Now of course well let's first begin by creating our method.

24
00:01:29,890 --> 00:01:34,640
So I'll say random I.D. This actually doesn't need to be async by mistake.

25
00:01:34,660 --> 00:01:40,830
So I'm going to remove that so instead of here we could of course just like return math thought random

26
00:01:40,950 --> 00:01:43,630
and then multiply that by some really big number.

27
00:01:43,770 --> 00:01:49,620
But there's a slightly better way to handle the idea generation and in particular a way using the node

28
00:01:49,920 --> 00:01:51,890
j asked in a library once again.

29
00:01:52,130 --> 00:01:59,200
So I can go over to the documentation once more over here I'm going to find the crypto module.

30
00:01:59,200 --> 00:02:05,070
So crypto stands for cryptography or cryptographic inside of here there are a ton of different functions

31
00:02:05,070 --> 00:02:09,310
related to handling and siphoning encrypting and decrypting data.

32
00:02:09,420 --> 00:02:13,950
We're going to eventually use this module to store passwords or at least help store passwords securely

33
00:02:13,950 --> 00:02:16,410
inside of our application at some point as well.

34
00:02:16,500 --> 00:02:21,240
Right now we're going to use this module to generate a random string of characters that are going to

35
00:02:21,240 --> 00:02:29,900
serve as our I.D. So on this page I'm going to search for random bytes we're looking for a crypto not

36
00:02:29,900 --> 00:02:35,480
random bytes so we can call this thing with some size that's going to give us back something called

37
00:02:35,510 --> 00:02:40,280
once again a buffer and we can think of a buffer as being like an array that has some raw data inside

38
00:02:40,280 --> 00:02:41,240
of it.

39
00:02:41,270 --> 00:02:46,010
More importantly that buffer is going to have some very randomized data which we can use as the basis

40
00:02:46,010 --> 00:02:52,440
for our random ideas you'll notice that the code example right here shows it being called asynchronously

41
00:02:52,740 --> 00:02:54,720
or in other words with a callback.

42
00:02:54,720 --> 00:02:59,280
We do not have to provide a callback if we don't then we could call random bytes and immediately get

43
00:02:59,280 --> 00:03:04,360
some result return back to us in order to show you how this function works.

44
00:03:04,360 --> 00:03:10,070
I'm going to go directly back over to my terminal and enter the node rebel by writing out note we'll

45
00:03:10,090 --> 00:03:15,880
just try calling that random bytes function directly and see how it works once I start up the rebel.

46
00:03:15,890 --> 00:03:25,160
I'll then first require in the crypto module so say const crypto is require crypto so then I can call

47
00:03:25,160 --> 00:03:31,420
it crypto not random bytes and I'm going to say that I want for date bytes of data.

48
00:03:31,520 --> 00:03:36,020
If I call that I then get back this buffer again it's like an array that has some random data inside

49
00:03:36,110 --> 00:03:42,170
or something some raw data inside in this case because I said four bytes I get back at sixty five.

50
00:03:42,180 --> 00:03:51,690
That's one byte 7 A that's byte 2 15 and 1 D so Byte 0 1 2 and 3 obviously we probably want this printed

51
00:03:51,690 --> 00:03:54,580
out as a string so we can actually use it as an I.D..

52
00:03:54,900 --> 00:03:59,790
So in order to do so we can once again call it random bytes and then on the end we can chain to String

53
00:04:00,540 --> 00:04:07,600
x so that will give us these values in a string hex format there we go.

54
00:04:08,930 --> 00:04:10,730
So this right here will be our idea.

55
00:04:10,800 --> 00:04:15,180
We're going to call this function every single time that we want to randomly generate an I.D..

56
00:04:15,180 --> 00:04:19,230
And as you'd guess every single time we call this it's gonna give us back a random string of numbers

57
00:04:19,230 --> 00:04:24,830
and letters it's going to go back over to my editor at the top.

58
00:04:24,830 --> 00:04:27,300
I'm going to require in crypto

59
00:04:33,390 --> 00:04:37,470
I'll then go back down to the random idea function and write here.

60
00:04:37,480 --> 00:04:40,670
I will call crypto random bytes.

61
00:04:40,760 --> 00:04:44,050
Give me four bytes to string hex

62
00:04:47,440 --> 00:04:49,350
then we'll go back to our create function.

63
00:04:49,410 --> 00:04:54,890
Here it is right here and we're going to make sure that whatever attributes object that we get right

64
00:04:54,890 --> 00:05:00,230
here we're going to attach an I.D. property to it and to that I.D. property will assign the result of

65
00:05:00,230 --> 00:05:10,470
calling random I.D. so I'll say adders dot I.D. is this dot random bytes or sweet random I.D.

66
00:05:15,020 --> 00:05:16,940
okay that looks good.

67
00:05:17,090 --> 00:05:18,240
It's now to test this out.

68
00:05:18,260 --> 00:05:22,690
I'm going to go back to my repositories directory inside my code editor I'm going to find that users

69
00:05:22,690 --> 00:05:24,870
dot Jason file and delete it.

70
00:05:24,880 --> 00:05:28,300
So we're gonna start off from scratch delete everything we have.

71
00:05:28,300 --> 00:05:32,670
And from this point on every user that we create should have an I.D. assigned to it.

72
00:05:32,900 --> 00:05:37,390
This to allay any confusion by the way and also get to delete the user dot Jason file that's inside

73
00:05:37,390 --> 00:05:40,480
of my root project directory.

74
00:05:40,630 --> 00:05:43,470
It's all make sure I save this file.

75
00:05:43,660 --> 00:05:46,360
I'll go back over to my terminal to exit out of the node rebel.

76
00:05:46,360 --> 00:05:54,830
Remember we can hit control see I'll then run node user start J.S. and there is the record that was

77
00:05:54,830 --> 00:05:55,240
created.

78
00:05:55,240 --> 00:06:00,770
So now we have an email password and a randomly generated I.D. If I run this again I'll get a second

79
00:06:00,770 --> 00:06:04,120
user and it should have a very different idea than the first.

80
00:06:04,290 --> 00:06:05,750
Yes this definitely looks good.

81
00:06:06,820 --> 00:06:08,160
Well quick falls right here.

82
00:06:08,260 --> 00:06:11,050
And as your guests move on to our next function in just a moment.
