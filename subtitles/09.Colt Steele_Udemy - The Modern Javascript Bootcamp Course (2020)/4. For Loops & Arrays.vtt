WEBVTT
1
00:00:00.270 --> 00:00:05.750
We can also use for loops to loop or iterate over a string or an array.

2
00:00:05.790 --> 00:00:09.120
We still generate numbers but we generate the indices.

3
00:00:09.210 --> 00:00:12.830
So for a string like lions it's in an array here.

4
00:00:12.840 --> 00:00:20.040
But if we're working with the string lions we would start with an index of 0 and generate I up until

5
00:00:20.040 --> 00:00:24.200
we hit 4 0 1 2 3 4.

6
00:00:24.540 --> 00:00:26.440
And once we hit 4 we're done.

7
00:00:26.700 --> 00:00:31.050
And then we can use that index that I to access each character.

8
00:00:31.050 --> 00:00:34.200
Or we could do it for an array which is what I'm doing here.

9
00:00:34.260 --> 00:00:35.810
We have three items in here.

10
00:00:35.910 --> 00:00:45.070
We start with index of 0 and we loop as long as the eye variable is less than the length of the array.

11
00:00:45.150 --> 00:00:50.120
So let's try it up we'll make an array over here.

12
00:00:50.280 --> 00:00:58.080
So if I have an array called exam scores it represents maybe the test scores of one student or of a

13
00:00:58.080 --> 00:00:59.700
teacher who has multiple students.

14
00:00:59.700 --> 00:01:00.630
These are all the scores.

15
00:01:00.630 --> 00:01:01.460
It doesn't really matter.

16
00:01:01.800 --> 00:01:03.990
It's a silly example either way.

17
00:01:03.990 --> 00:01:09.420
If we wanted to print each score out we'll start with that we would need to iterate over this array

18
00:01:10.080 --> 00:01:16.140
and generate an I or any variable in a for loop that starts at zero because the first element starts

19
00:01:16.140 --> 00:01:22.020
at index 0 and then we want to go up until the end of that array but we don't want to go past it.

20
00:01:22.020 --> 00:01:28.590
So we'll do four let I equals zero and we'll keep going while i is less than exam scores that length

21
00:01:28.980 --> 00:01:30.900
not less than or equal to.

22
00:01:31.020 --> 00:01:34.860
Because remember the length is always one more than the greatest index.

23
00:01:34.890 --> 00:01:38.420
So we have one two three four five six elements.

24
00:01:38.580 --> 00:01:42.310
But the last item the last element has an index of five.

25
00:01:42.780 --> 00:01:48.330
So if we did less than or equal to the length which is six then at the last turn of the loop the last

26
00:01:48.330 --> 00:01:54.000
iteration we would be accessing exam scores of six which is undefined.

27
00:01:54.000 --> 00:01:59.550
So i is less than exam scores at length or we could do less than or equal to exam score stout length

28
00:01:59.790 --> 00:02:02.150
minus one but that's longer.

29
00:02:02.160 --> 00:02:07.980
So I like to do it this way and then we'll add one to each time and we'll start by just constant that

30
00:02:07.980 --> 00:02:16.400
logging exam scores of I and we can also control that log I first.

31
00:02:16.830 --> 00:02:18.480
Let's run it.

32
00:02:18.480 --> 00:02:18.930
There we go.

33
00:02:19.530 --> 00:02:25.980
So I starts at zero then one two three four five it stops at five because the next I it's going to be

34
00:02:25.980 --> 00:02:32.030
six which is no longer less than the length because the length is six and six is not less than six.

35
00:02:32.400 --> 00:02:36.210
And then we access using square brackets each individual element.

36
00:02:36.240 --> 00:02:39.780
So we get ninety eight seventy seven eighty four and so on.

37
00:02:39.780 --> 00:02:43.250
Now I'm gonna make an adjustment to this variable I'll be right back.

38
00:02:43.310 --> 00:02:43.620
Okay.

39
00:02:43.670 --> 00:02:44.990
So I made an adjustment.

40
00:02:45.060 --> 00:02:45.920
Actually that's a lie.

41
00:02:45.930 --> 00:02:52.320
I made a new variable called my students which now that I'm thinking about it is a little arrogant because

42
00:02:52.320 --> 00:02:56.020
all of these students are Greek gods they're not actually my students.

43
00:02:56.190 --> 00:03:00.660
Unfortunately I did have a serious obsession with Greek mythology as a kid.

44
00:03:00.660 --> 00:03:07.080
So each student is an object we have an array each element is an object and they have a grade each and

45
00:03:07.080 --> 00:03:08.130
a first name.

46
00:03:08.130 --> 00:03:13.740
So why don't we start by just printing out zoos scored 86 Artemus scored ninety seven Harris scored

47
00:03:13.740 --> 00:03:19.930
seventy two so we'll need to loop over the array for we can do I again let I equals zero.

48
00:03:20.040 --> 00:03:25.260
This is a standard pattern to loop over an array we always start an index of zero in this we wanted

49
00:03:25.260 --> 00:03:31.620
to go backwards in which case we would start with the last index and loop until we hit index of zero

50
00:03:32.340 --> 00:03:33.800
but usually we go left to right.

51
00:03:34.290 --> 00:03:42.020
So we'll go while I is less than my students that length and we'll add one to each time I plus plus

52
00:03:42.900 --> 00:03:51.330
and then what I'm going to print out is a template literal so console that log and then back ticks I'll

53
00:03:51.330 --> 00:03:57.090
put the first name in this line is going to get quite long if I don't make a separate variable because

54
00:03:57.090 --> 00:04:05.610
I is just a number so if I print I that's going to be 0 1 2 in order to access first name for each one

55
00:04:05.610 --> 00:04:12.180
of these I first have to go through my students of I will give me each object but if I just print out

56
00:04:12.180 --> 00:04:18.510
the object that's not gonna get me where I want I also need to access dot first name or square bracket

57
00:04:18.510 --> 00:04:19.480
first name.

58
00:04:19.710 --> 00:04:25.550
So what I'm going to do is put this in its own variable each time through the loop I'll call this let

59
00:04:25.670 --> 00:04:29.720
students equals my student of I.

60
00:04:29.850 --> 00:04:37.870
So now student is going to be an object if we just start by counsel that logging student comment that

61
00:04:37.870 --> 00:04:38.830
out.

62
00:04:38.830 --> 00:04:40.270
Refresh the page.

63
00:04:40.390 --> 00:04:44.430
My student is not defined by my students.

64
00:04:44.830 --> 00:04:45.430
And there we go.

65
00:04:45.430 --> 00:04:51.190
We're printing each object out because student is simply referencing each element in the array at the

66
00:04:51.190 --> 00:04:52.590
appropriate index.

67
00:04:52.600 --> 00:04:57.370
So now I want to access student dot first name and student debt grade.

68
00:04:57.370 --> 00:05:01.670
So I'll do my back ticks and the pattern I'll follow is Apollo.

69
00:05:01.810 --> 00:05:10.170
Got a 98 or scored 98 so student which is just a place holder variable each time through the loop.

70
00:05:10.300 --> 00:05:15.820
Student first name and then outside of the dollar sign.

71
00:05:15.820 --> 00:05:23.360
Curly braces but still in the back ticks scored and then another dollar sign.

72
00:05:23.380 --> 00:05:29.480
Student dot grade save refresh.

73
00:05:29.500 --> 00:05:31.500
There we go zoo scored eighty six.

74
00:05:31.500 --> 00:05:33.750
It's hard to miss scored ninety seven and so on.

75
00:05:33.820 --> 00:05:38.830
If you feel confident with looping through arrays at this point skip ahead.

76
00:05:38.860 --> 00:05:42.960
Otherwise I'll do a few more examples and I'll actually start with looping through a string.

77
00:05:42.970 --> 00:05:49.720
It's the exact same approach except instead of an array we're accessing a string using those indices

78
00:05:50.170 --> 00:05:51.930
but we still start at zero.

79
00:05:51.940 --> 00:05:54.040
I'll make a variable called Word.

80
00:05:54.040 --> 00:06:00.430
It will start as stressed and I use const so it's going to stay as stressed.

81
00:06:00.430 --> 00:06:01.030
Which is fine.

82
00:06:01.030 --> 00:06:04.390
I'm just going to loop over it but I'm going to loop backwards.

83
00:06:04.600 --> 00:06:10.070
So we could do the exact same loop we saw here but I think at this point you understand how that works.

84
00:06:10.210 --> 00:06:14.600
We loop while i is less than that length of the array or the string in our case.

85
00:06:14.800 --> 00:06:21.080
So to go backwards we'll write a for loop and instead of starting I at zero which would start with S.

86
00:06:21.100 --> 00:06:22.840
The first character we want.

87
00:06:22.840 --> 00:06:28.150
The last index which is going to be the length of the array or the length of the string in our case

88
00:06:28.630 --> 00:06:35.070
word length minus one word length will give us 1 2 3 4 5 6 7 8.

89
00:06:35.170 --> 00:06:40.550
So the last index is 7 so we'll start with IE equal to 7.

90
00:06:40.570 --> 00:06:45.490
I'm not going to hard code that because we could have a different string here that is 20 characters

91
00:06:46.770 --> 00:06:52.120
and then we're going to loop while I is greater than or equal to zero.

92
00:06:52.360 --> 00:06:57.220
Or we could also say greater than negative 1 but we want it to hit zero.

93
00:06:57.400 --> 00:06:59.090
So greater than or equal to zero.

94
00:06:59.230 --> 00:07:02.490
And then each time through we'll subtract one from I.

95
00:07:02.710 --> 00:07:05.330
And then we can start by just console dialoguing.

96
00:07:05.350 --> 00:07:10.470
I make sure that we get seven six five four three two one zero which we do.

97
00:07:10.830 --> 00:07:20.660
And now instead we'll consider out log word of I refresh and I didn't work.

98
00:07:20.660 --> 00:07:22.130
I planned this out.

99
00:07:22.160 --> 00:07:24.850
It works but it combined the two S's.

100
00:07:24.860 --> 00:07:32.240
As you can see here which is unfortunate because now you can't read what it spells but stressed spelled

101
00:07:32.240 --> 00:07:33.910
backwards is deserts.

102
00:07:34.160 --> 00:07:38.440
So we're now printing out each character in the string in reverse order.

103
00:07:38.440 --> 00:07:45.170
And if we wanted to we could even make a new string entirely that holds the reversed word so we can

104
00:07:45.170 --> 00:07:52.670
make a variable up here called let reversed word equals an empty string and then each time through here

105
00:07:52.790 --> 00:07:55.020
we'll do reversed word.

106
00:07:55.070 --> 00:07:59.580
Plus equals word of.

107
00:08:00.260 --> 00:08:05.120
So we're starting with index of what is 7 at the beginning and 0 6.

108
00:08:05.270 --> 00:08:10.190
Whatever this index is we take that letter and we added into reverse word which is empty.

109
00:08:10.220 --> 00:08:13.200
So we start we add a d and then the loop goes again.

110
00:08:13.340 --> 00:08:18.080
This time I is one less so we're adding an E and then an S and so on.

111
00:08:18.080 --> 00:08:19.630
Let's make sure it works.

112
00:08:19.700 --> 00:08:22.040
So at the end we will print out.

113
00:08:22.070 --> 00:08:31.070
Actually why don't we just print out consoles out log reversed word each time right there refresh and

114
00:08:31.070 --> 00:08:31.530
there we go.

115
00:08:31.560 --> 00:08:39.830
D d e d s desk dessert dessert desserts and so I'll just print it out at the end and we have successfully

116
00:08:39.920 --> 00:08:43.000
reversed a word awesome.

117
00:08:43.160 --> 00:08:45.410
Okay one more really quick example.

118
00:08:45.410 --> 00:08:48.370
Instead of printing things out we did something slightly different here.

119
00:08:48.380 --> 00:08:54.200
We reversed a word into a new variable but why don't we try averaging all of the grades.

120
00:08:54.320 --> 00:08:57.770
So in my students we have four students that each have a grade.

121
00:08:57.800 --> 00:09:01.880
What we need to do is loop over all students for each one.

122
00:09:01.880 --> 00:09:04.140
We need to sum the grades together.

123
00:09:04.160 --> 00:09:07.550
So we need a variable to accumulate or to hold that sum.

124
00:09:07.670 --> 00:09:12.580
And then after the loop is done we'll have a total and we need to divide it by.

125
00:09:12.650 --> 00:09:17.870
In this case for the length of my students so we can keep this loop.

126
00:09:17.870 --> 00:09:24.140
I'm just going to duplicate it come at the original out and instead of doing this here in constant logging

127
00:09:25.030 --> 00:09:28.940
we need to add student dot grade to something.

128
00:09:28.940 --> 00:09:34.330
Remember student is equal to each individual object because I'm doing my students of I.

129
00:09:34.370 --> 00:09:35.730
Which gives me one of these objects.

130
00:09:35.750 --> 00:09:37.690
Then the grade gives me that number.

131
00:09:37.880 --> 00:09:42.470
So I'm going to make a variable and I need to make it outside the loop.

132
00:09:42.560 --> 00:09:45.560
I'll call this total and it will start at zero.

133
00:09:45.560 --> 00:09:48.530
If I put total equals zero in the loop.

134
00:09:48.590 --> 00:09:54.650
If I move this line right here I will be re creating or reassigning total to zero.

135
00:09:54.650 --> 00:09:59.180
Every time this loop runs so we'll never actually remember the previous result.

136
00:09:59.210 --> 00:10:06.080
I need to have it up top where we actually can sum each grade together so student dot grade will do

137
00:10:06.080 --> 00:10:08.420
total plus equals.

138
00:10:08.720 --> 00:10:17.340
So add that grade to the total and then at the end will concert that log total and see what we get.

139
00:10:17.590 --> 00:10:18.710
Three four five.

140
00:10:18.770 --> 00:10:22.350
That seems appropriate and it seems like it makes sense.

141
00:10:22.400 --> 00:10:24.730
That's not the average to get the average.

142
00:10:24.770 --> 00:10:27.730
We need to divide not by 4.

143
00:10:27.920 --> 00:10:32.570
We do need to divide by 4 but I don't want to hard code 4 because we could have 10 students in here.

144
00:10:32.780 --> 00:10:35.090
So we'll divide by my students at length.

145
00:10:35.120 --> 00:10:37.190
That's a number of students in there.

146
00:10:37.220 --> 00:10:45.730
So my students that length will save refresh and the average is eighty six point two five.

147
00:10:45.740 --> 00:10:46.520
There we go.

148
00:10:46.520 --> 00:10:50.930
So we covered a lot of different problems in sort of different examples.

149
00:10:50.930 --> 00:10:56.810
In this video but at its core we did the same thing every time whether it was a string or an array.

150
00:10:56.810 --> 00:11:02.300
We start looping at zero and we loop until the last index adding 1 2.

151
00:11:02.390 --> 00:11:09.170
Each time we use IE that number to access individual elements or individual characters.

152
00:11:09.170 --> 00:11:11.920
In one case we went backwards but it's the same idea.

153
00:11:11.960 --> 00:11:17.450
We start with the last index and we subtract one each time as long as we're greater than or equal to

154
00:11:17.480 --> 00:11:18.260
zero.

155
00:11:18.320 --> 00:11:24.770
So a really common pattern looping or iterating over a string an array or any index collection you generate

156
00:11:24.770 --> 00:11:25.610
those indices.
