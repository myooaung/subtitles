1
00:00:00,210 --> 00:00:06,810
Next up we're going to talk about why this pattern a factory function is not commonly used and why instead

2
00:00:07,200 --> 00:00:11,460
we use something called the constructor pattern or constructor function.

3
00:00:11,460 --> 00:00:14,650
So let's start with what you probably have seen at this point.

4
00:00:14,670 --> 00:00:21,750
We've seen this new keyword occasionally like new example age GDP request I hate typing this but we

5
00:00:21,750 --> 00:00:25,740
run this if we need to make an Excel HDP request we're not using fat.

6
00:00:25,740 --> 00:00:27,160
We're not using axes.

7
00:00:27,180 --> 00:00:30,580
Check out the requests section if you're not sure what the heck I'm talking about.

8
00:00:30,660 --> 00:00:34,290
This makes us a new object following a pattern.

9
00:00:34,290 --> 00:00:39,340
Also we can make an array with this syntax new Array.

10
00:00:39,580 --> 00:00:41,310
It's definitely lengthier.

11
00:00:41,320 --> 00:00:43,420
It's not commonly used at all.

12
00:00:43,420 --> 00:00:45,620
You could do new String.

13
00:00:45,670 --> 00:00:47,960
Notice I'm using capital letters.

14
00:00:47,980 --> 00:00:50,080
What is that new keyword.

15
00:00:50,080 --> 00:00:55,650
It's actually an operator and we'll get to it and we'll talk about why it's preferable to this approach.

16
00:00:55,720 --> 00:00:58,750
But let's start with understanding the shortcoming here.

17
00:00:58,750 --> 00:01:01,870
It's not a huge one but it's important to understand.

18
00:01:02,080 --> 00:01:06,130
Every time I make a new color object we start with an empty object.

19
00:01:06,160 --> 00:01:11,160
We have three unique properties right there added directly to the object that makes sense.

20
00:01:11,170 --> 00:01:18,790
But then these functions they're recreated and a unique copy is added to each color object.

21
00:01:18,790 --> 00:01:23,520
So each color object has its own R B function.

22
00:01:23,560 --> 00:01:28,150
Yeah the values are going to always be different assuming that the colors are different.

23
00:01:28,150 --> 00:01:29,980
We have different RG and B's.

24
00:01:29,980 --> 00:01:36,580
We can end up with a different result but there's no reason to have a unique copy of the function itself.

25
00:01:37,960 --> 00:01:45,610
Just like if we were to write a regular function called RG b out here function RG B we could reuse that

26
00:01:45,790 --> 00:01:47,470
with any inputs.

27
00:01:47,470 --> 00:01:51,840
We don't need to have function RG B2 and RG b 3 and RG before.

28
00:01:51,830 --> 00:01:56,950
Anytime we want to pass and different values we just make one function that is not what's happening

29
00:01:56,950 --> 00:02:02,890
here and I can show you that I have two colors I've created using make color I have first color and

30
00:02:02,890 --> 00:02:08,790
I have black they have different values that I passed in so we get different objects right.

31
00:02:08,820 --> 00:02:15,370
We have black Where are G and B are 0 0 0 and we have first color not a very original name.

32
00:02:15,420 --> 00:02:17,930
Thirty five 255 150.

33
00:02:18,170 --> 00:02:20,810
Notice they have their own copy.

34
00:02:20,830 --> 00:02:26,380
Well looks like they have their own copy of hex and RG B and we could verify that in a bunch of different

35
00:02:26,380 --> 00:02:27,030
ways.

36
00:02:27,040 --> 00:02:36,160
The simplest would be if we compare black dot let's take hex and compare it to first color dot hex they

37
00:02:36,160 --> 00:02:37,430
are not equal.

38
00:02:37,780 --> 00:02:42,490
Triple equals for a reference type is going to check and functions are reference types as a reminder

39
00:02:43,000 --> 00:02:46,600
it will check to see if they are referring to the same function.

40
00:02:46,600 --> 00:02:48,480
In this case and they are not.

41
00:02:49,210 --> 00:02:57,340
But if we compare that to something like a string any string high dot what's a good method to use.

42
00:02:57,340 --> 00:03:01,450
How about we use dot slice.

43
00:03:01,450 --> 00:03:07,930
I'm not going to call it just high dot slice triple equals by dot slice.

44
00:03:07,930 --> 00:03:09,600
Two different strings.

45
00:03:09,610 --> 00:03:12,560
Notice that we get true.

46
00:03:13,160 --> 00:03:19,640
What's happening here is that the slice method is not defined on every single string or if I had worked

47
00:03:19,640 --> 00:03:20,800
with an array.

48
00:03:20,810 --> 00:03:27,620
Know if we look at some array one two three four the methods are not defined in this individual object.

49
00:03:27,740 --> 00:03:29,450
Arrays are objects.

50
00:03:29,620 --> 00:03:32,750
A weird part of JavaScript they are considered objects.

51
00:03:32,750 --> 00:03:36,430
Instead they are defined on the prototype.

52
00:03:36,440 --> 00:03:39,440
Remember we started this section off with prototypes.

53
00:03:39,440 --> 00:03:45,250
Every array gets its built in array methods from one prototype array object.

54
00:03:45,410 --> 00:03:51,890
This contains all of the methods and functionality that we're used to using a radar pop array that can

55
00:03:51,890 --> 00:03:52,680
cat.

56
00:03:52,820 --> 00:03:53,860
Same thing with strings.

57
00:03:53,870 --> 00:03:57,140
These string prototype contains the methods.

58
00:03:57,140 --> 00:04:02,430
So instead of having their own copy this array does not have its own copy of pop.

59
00:04:03,050 --> 00:04:05,970
This string does not have its own copy of Slice.

60
00:04:06,120 --> 00:04:13,390
Are referencing one function and it's located on the prototype with what we've set up here.

61
00:04:13,400 --> 00:04:20,450
We don't have an easy way of making that work so this is where the constructor function enters a constructor

62
00:04:20,450 --> 00:04:23,780
function is kind of a kind of a weird part of JavaScript.

63
00:04:23,780 --> 00:04:28,150
Honestly it's pretty different than most other programming languages I've worked with.

64
00:04:28,340 --> 00:04:29,900
But don't let that scare you.

65
00:04:29,930 --> 00:04:37,190
It's not too bad if you go to M.D. and there's a nice little explanation of this new operator which

66
00:04:37,190 --> 00:04:38,650
we will use.

67
00:04:38,930 --> 00:04:42,520
But first take a look at this code right here.

68
00:04:42,650 --> 00:04:44,130
We have a function.

69
00:04:44,450 --> 00:04:49,710
It's starting with a capital letter which is just a style choice but inside the function.

70
00:04:49,740 --> 00:04:54,650
There's never a return value and we're referencing this directly in the function.

71
00:04:54,650 --> 00:04:57,790
We're not in an object like we had here right.

72
00:04:57,800 --> 00:05:03,360
We created an object color and we reference this inside that object on a method.

73
00:05:03,800 --> 00:05:05,240
Here it's just a function.

74
00:05:05,240 --> 00:05:10,440
This dot make equal something this stop model what is going on.

75
00:05:10,460 --> 00:05:11,270
Well let's try it out.

76
00:05:11,720 --> 00:05:17,540
So on the docks we had a function and had a capital letter which is really just a way of indicating

77
00:05:17,540 --> 00:05:19,670
that this is a regular function.

78
00:05:19,760 --> 00:05:22,730
It is a function that helps you create objects.

79
00:05:22,760 --> 00:05:24,300
It's a constructor function.

80
00:05:24,350 --> 00:05:25,690
Function color.

81
00:05:25,700 --> 00:05:33,440
We pass an R G and B and then what they did on MDA and was this thought R equals R.

82
00:05:34,040 --> 00:05:41,180
This dot G equals G and this dot B equals B okay.

83
00:05:41,340 --> 00:05:49,050
Well let's see what happens when I call color when they come over here refresh my page and then execute

84
00:05:49,080 --> 00:05:50,430
color and pass in.

85
00:05:50,510 --> 00:05:54,740
I'll just do 2 5 5 0 and 0.

86
00:05:54,860 --> 00:05:56,440
I didn't get anything back.

87
00:05:56,450 --> 00:05:58,310
Doesn't appear to be working.

88
00:05:58,610 --> 00:06:03,270
If I save that to a variable I would just see undefined.

89
00:06:03,280 --> 00:06:05,610
What if we print out this console log.

90
00:06:05,600 --> 00:06:08,320
This gets printed out at the end.

91
00:06:08,320 --> 00:06:13,380
After we've added those properties are G and B what do you think this is going to refer to.

92
00:06:15,380 --> 00:06:18,410
Who refers to the window.

93
00:06:18,410 --> 00:06:19,220
Why is that.

94
00:06:19,430 --> 00:06:24,240
Well if you remember back in the Secret Life of object section we talked about the keyboard.

95
00:06:24,260 --> 00:06:27,490
This and how it behaves in the scope of this function.

96
00:06:27,490 --> 00:06:29,870
It's not inside of any other object.

97
00:06:29,930 --> 00:06:32,700
This is going to refer to the global scope.

98
00:06:32,780 --> 00:06:36,720
The nearest object which is the window object.

99
00:06:36,800 --> 00:06:43,040
So then why on earth would the docs talk about making a function like this and referring to this in

100
00:06:43,040 --> 00:06:45,840
your function not returning anything.

101
00:06:45,860 --> 00:06:53,960
Well the secret is this new operator when we call this function but we call it with new before the function

102
00:06:53,960 --> 00:06:56,500
call it behaves differently.

103
00:06:56,540 --> 00:07:01,700
These are the steps I guess I'll just copy these over and show them to you here.

104
00:07:02,300 --> 00:07:11,100
When we call this color function with new new color and then we pass in values 255 40 and 100.

105
00:07:11,420 --> 00:07:12,540
Just like that.

106
00:07:13,040 --> 00:07:16,190
It's going to create a blank plain javascript object.

107
00:07:16,190 --> 00:07:22,610
OK it sets the constructor of this object to another object will come back to that passes the newly

108
00:07:22,610 --> 00:07:24,970
created object from step 1 as the.

109
00:07:25,070 --> 00:07:27,500
This in this context.

110
00:07:27,500 --> 00:07:32,780
So it's going to make us a new object and it will set this to that new object.

111
00:07:33,080 --> 00:07:36,350
So we'll be adding our G and B to that new object.

112
00:07:36,590 --> 00:07:40,080
Then it returns this at the end.

113
00:07:40,810 --> 00:07:42,700
So it's kind of doing what we saw earlier.

114
00:07:42,730 --> 00:07:49,720
Concept let's just call it o equals an object and then this would be referring to this object and then

115
00:07:49,720 --> 00:07:54,500
it adds these properties to that object and then at the end it would return.

116
00:07:54,520 --> 00:08:01,630
Oh but it's doing it all implicitly behind the scenes for us this behaves differently here than it normally

117
00:08:01,630 --> 00:08:01,900
does.

118
00:08:01,900 --> 00:08:08,470
As we saw if we don't use a new keyword this refers to the window object but when we use new it's just

119
00:08:08,470 --> 00:08:10,090
how javascript works.

120
00:08:10,090 --> 00:08:12,280
It's the magic of this operator.

121
00:08:12,280 --> 00:08:16,960
It will be used to create a new object for you based off of this pattern.

122
00:08:17,050 --> 00:08:18,230
So why don't we try it now.

123
00:08:18,910 --> 00:08:23,760
When I copy this over go back to my code refresh.

124
00:08:23,760 --> 00:08:25,630
If we just call color like that.

125
00:08:25,840 --> 00:08:29,640
Not good if we call it with new.

126
00:08:29,750 --> 00:08:30,790
All right.

127
00:08:30,800 --> 00:08:32,420
Take a look at this.

128
00:08:32,480 --> 00:08:39,470
We get an object and this object has properties on it that we assign to using this.

129
00:08:39,740 --> 00:08:43,480
I never told it to make an object explicitly and never said return an object.

130
00:08:43,550 --> 00:08:47,000
It did that and did something else.

131
00:08:47,000 --> 00:08:52,160
If you look under Prado here it has a constructor property set to color.

132
00:08:52,160 --> 00:08:58,220
That was the first or the second thing links or it sets the constructor of the object to another object

133
00:08:59,120 --> 00:09:02,060
using whatever we named this function.

134
00:09:02,060 --> 00:09:05,080
So it sets the constructor to this color function.

135
00:09:05,090 --> 00:09:12,710
What this allows us to do is now we can add methods not to the individual objects not to the instances

136
00:09:13,010 --> 00:09:15,020
but to the prototype.

137
00:09:15,020 --> 00:09:22,460
So if I copied what we did earlier like this RG bee method and I put it in here I have to uncommon some

138
00:09:22,460 --> 00:09:23,960
of this and fix it up.

139
00:09:23,960 --> 00:09:30,080
We would have something like this dot RG B equals that function and we can access this.

140
00:09:30,230 --> 00:09:31,910
It should work fine.

141
00:09:31,910 --> 00:09:32,660
This is not new.

142
00:09:32,690 --> 00:09:34,750
This is kind of what we saw earlier.

143
00:09:34,760 --> 00:09:40,710
Let's see what happens when I call new color again instead of color.

144
00:09:40,710 --> 00:09:44,570
It still has RG be defined on the individual object.

145
00:09:44,580 --> 00:09:50,610
It's not defined on the prototype but we have a workaround rather than doing this.

146
00:09:50,940 --> 00:09:56,570
We would define that method on the prototype outside of this constructor function.

147
00:09:56,580 --> 00:09:58,800
It's kind of odd but that's how it works.

148
00:09:58,800 --> 00:10:03,030
We call color dot prototype Dot.

149
00:10:03,270 --> 00:10:09,160
Our GDP equals this function so it's a little clunky.

150
00:10:09,520 --> 00:10:11,230
But we saw this syntax already.

151
00:10:11,230 --> 00:10:17,230
We saw how we could change a red out prototyped up pop and overwrite it to be some other function that

152
00:10:17,230 --> 00:10:18,940
did nothing.

153
00:10:18,970 --> 00:10:20,530
Same idea.

154
00:10:20,530 --> 00:10:27,760
So we have now made this constructor function for color anytime we call it with the new keyword it makes

155
00:10:27,760 --> 00:10:28,560
us a new object.

156
00:10:28,560 --> 00:10:35,170
It sets the constructor to color of that object and then it sets the value of this to that new empty

157
00:10:35,170 --> 00:10:36,010
object.

158
00:10:36,160 --> 00:10:37,600
We can add properties to it.

159
00:10:37,720 --> 00:10:39,910
It returns that object.

160
00:10:40,030 --> 00:10:48,720
So if I call you know new color 40 50 60 I save that to a variable costs color one.

161
00:10:49,330 --> 00:10:56,910
I now have an object here that has RG and B but not only that if we take a look at color one it does

162
00:10:56,910 --> 00:10:58,130
not have that method.

163
00:10:58,140 --> 00:11:01,500
RG be defined on it self on the actual object.

164
00:11:01,500 --> 00:11:05,960
It's defined on the prototype so I can still call color one dot.

165
00:11:05,990 --> 00:11:09,390
RG V which is the very important part.

166
00:11:09,390 --> 00:11:12,020
If we couldn't then it wouldn't be worth doing.

167
00:11:12,360 --> 00:11:14,190
But I don't have a unique copy of it here.

168
00:11:14,190 --> 00:11:19,790
I can still access it from the prototype object just like with an array or a string.

169
00:11:19,980 --> 00:11:27,000
So this is now better or more efficient than our factory approach where we returned a new object every

170
00:11:27,000 --> 00:11:28,090
time it was called.

171
00:11:28,200 --> 00:11:33,540
And on that object we added in individual methods that were unique each time.

172
00:11:33,540 --> 00:11:37,560
Now I could have two colors color one and color two.

173
00:11:37,620 --> 00:11:41,650
It could be totally different this one could be 0 0 0 0.

174
00:11:41,850 --> 00:11:44,080
And why don't I add in a second method.

175
00:11:44,250 --> 00:11:55,080
We'll do color dot prototype dot hex equals function and I'll just copy the code from right here.

176
00:11:55,310 --> 00:11:57,350
I have to tweak it a bit.

177
00:11:57,370 --> 00:11:58,600
Don't need that.

178
00:11:58,600 --> 00:12:05,620
Don't need that uncommon to save and everything else should work.

179
00:12:05,650 --> 00:12:08,620
We still have access to this instead of these functions.

180
00:12:08,650 --> 00:12:12,450
This will be set to whatever is on the left side of that dot.

181
00:12:12,460 --> 00:12:19,250
So color one dot hex color one will be the value of this.

182
00:12:19,450 --> 00:12:23,870
If I do color to color too will be the value of this.

183
00:12:24,040 --> 00:12:31,690
Even though the function is defined as a method on the prototype so let's verify that color one dot

184
00:12:31,840 --> 00:12:39,070
hex is the same as color to dot hex because they are on these shared prototype object rather than uniquely

185
00:12:39,070 --> 00:12:40,580
defined on each instance.

186
00:12:41,190 --> 00:12:44,850
So we've defined a recipe for a color we've set every color.

187
00:12:45,010 --> 00:12:52,570
We'll have this one prototype that has RG B in hex and we need one copy and one copy only of those methods.

188
00:12:52,570 --> 00:12:53,230
Let's test it out.

189
00:12:53,650 --> 00:12:55,120
So we have color 1.

190
00:12:55,270 --> 00:12:58,870
I can still call dot hex color to dot Hex.

191
00:12:58,870 --> 00:13:03,220
I get different results because the value of this is different.

192
00:13:03,220 --> 00:13:05,200
Inside those methods.

193
00:13:05,200 --> 00:13:13,240
But then if I call color one dot hex triple equals color to dot hex hallelujah it's true they're pointing

194
00:13:13,240 --> 00:13:16,280
to the same thing and we can verify that also.

195
00:13:16,280 --> 00:13:19,110
Just open up this object here in the dev tools.

196
00:13:19,390 --> 00:13:22,120
We don't see hex and RG be defined here.

197
00:13:22,120 --> 00:13:23,800
They're defined on the prototype.

198
00:13:24,700 --> 00:13:27,390
So a key distinction from what we saw earlier.

199
00:13:28,580 --> 00:13:29,150
All right.

200
00:13:29,250 --> 00:13:35,700
So why don't we end by adding one more method in this method will be our GPA which I could call like

201
00:13:35,970 --> 00:13:44,250
color one dot our GPA and I can pass in a number from zero to one like zero point five and this should

202
00:13:44,250 --> 00:13:52,080
give me an RG B color or an RG be a color which follows the same pattern here but it has a fourth channel

203
00:13:52,500 --> 00:14:04,380
a alpha which is in charge of opacity so I would define color dot prototype dot our GPA equals function

204
00:14:05,250 --> 00:14:10,260
and while I'm doing this an important thing to note you don't want to use aero functions for this.

205
00:14:10,260 --> 00:14:14,450
Remember that they behave differently with the keyword this so you can run into trouble.

206
00:14:15,180 --> 00:14:19,190
So use traditional standard function expressions like I'm doing here.

207
00:14:19,380 --> 00:14:22,360
So we could duplicate this line to get RG and V.

208
00:14:22,440 --> 00:14:25,090
We also want the parameter for the alpha channel.

209
00:14:25,320 --> 00:14:29,670
Why don't we give it a default of 1 if nobody or if it's not passed in.

210
00:14:29,670 --> 00:14:35,160
We'll just do a full regular color and won't have any translucent Alpha will be 1.0.

211
00:14:35,340 --> 00:14:41,280
Then we have to return our string template literal and it should be RG B A.

212
00:14:41,550 --> 00:14:50,730
And then we interpolate are we interpolate G we interpolate B forgot the dollar sign and then finally

213
00:14:51,030 --> 00:14:55,400
we interpolate a and we also need the closing Perrin.

214
00:14:55,590 --> 00:14:57,240
So let's test it out here.

215
00:14:57,240 --> 00:14:59,020
We've got color 1.

216
00:14:59,190 --> 00:15:00,560
Let's see what color 1 looks like.

217
00:15:00,560 --> 00:15:01,380
I don't even know.

218
00:15:01,560 --> 00:15:06,990
Color 1 dot our GV gives us this color is it at all.

219
00:15:06,990 --> 00:15:07,950
Interesting.

220
00:15:08,030 --> 00:15:10,890
It's going to pasted in here and it's pretty ugly.

221
00:15:10,890 --> 00:15:14,970
Why don't we change that to be much about much greener.

222
00:15:15,000 --> 00:15:19,590
We'll try again color one dot RG B gives us this let's take a look.

223
00:15:19,630 --> 00:15:21,520
Okay very bright green.

224
00:15:21,720 --> 00:15:28,560
Now if I want to use that somewhere let's just do document dump body dot style dot background color

225
00:15:29,370 --> 00:15:33,710
equals and I'll use color one dot our GP.

226
00:15:33,840 --> 00:15:35,660
There we go pretty green.

227
00:15:35,790 --> 00:15:37,870
Now let's try our RG be method.

228
00:15:37,920 --> 00:15:43,470
It has a default parameter so it should be the exact same color but now if I pass in a number like zero

229
00:15:43,470 --> 00:15:47,540
point eight Oh it's getting more translucent.

230
00:15:47,790 --> 00:15:53,830
Go down to zero point for zero point two zero point one.

231
00:15:54,060 --> 00:15:55,260
There we go.

232
00:15:55,260 --> 00:16:02,300
So we've made this one method defined on the color prototype and it works across any instances of color.

233
00:16:02,300 --> 00:16:06,270
Anytime we ran new color that's the main takeaway here.

234
00:16:06,270 --> 00:16:10,020
The new keyword does these mysterious operations.

235
00:16:10,110 --> 00:16:15,000
It's very confusing when you're starting out because if you look at this function on its own it seems

236
00:16:15,000 --> 00:16:19,590
like it shouldn't do anything it doesn't ever make an object it doesn't ever return anything but you

237
00:16:19,590 --> 00:16:25,120
put that new keyword in front when you execute the function and it changes how it behaves entirely.

238
00:16:25,380 --> 00:16:30,360
And then we saw that we can add methods to the color prototype so that they are only defined one time

239
00:16:30,690 --> 00:16:34,260
rather than on each individual color like we had up here.

240
00:16:35,790 --> 00:16:42,090
So as you can see the syntax is kind of annoying and it leads to these long files where things aren't

241
00:16:42,090 --> 00:16:43,640
really grouped together right.

242
00:16:43,650 --> 00:16:45,720
We have our color definition here.

243
00:16:45,870 --> 00:16:48,900
But then all of the methods are defined separately.

244
00:16:48,900 --> 00:16:54,900
This is why the class keyword in the new class syntax was introduced which is what we'll see right after

245
00:16:54,900 --> 00:16:55,570
this.

246
00:16:55,590 --> 00:16:59,790
Another way of achieving the exact same outcome but a prettier syntax.
