1
00:00:00,240 --> 00:00:01,140
Welcome back.

2
00:00:01,140 --> 00:00:07,230
Now that we've seen the very basics of functions and their syntax arguments return values etc. We're

3
00:00:07,230 --> 00:00:13,020
now going to talk about some other details some important things need to know about functions and function

4
00:00:13,050 --> 00:00:14,580
adjacent topics.

5
00:00:14,580 --> 00:00:19,950
So this section is not really one monolithic topic but a couple of related things that I've put together

6
00:00:19,950 --> 00:00:21,740
into one section.

7
00:00:21,870 --> 00:00:23,070
So we have a couple goals.

8
00:00:23,070 --> 00:00:25,600
The first is to understand scope.

9
00:00:25,800 --> 00:00:31,560
When I introduce Latin concept and briefly talked about var I mentioned we would come back and discuss

10
00:00:31,590 --> 00:00:35,220
scope and how those different keywords impact scope.

11
00:00:35,220 --> 00:00:40,110
We're gonna start by talking about that in the section it does relate to functions then we'll talk a

12
00:00:40,110 --> 00:00:46,410
lot about higher order functions functions as a value in JavaScript how we can pass functions to other

13
00:00:46,410 --> 00:00:47,220
functions.

14
00:00:47,340 --> 00:00:53,190
We'll take a look at some existing built in functions and methods that expect you to pass a function

15
00:00:53,190 --> 00:00:57,510
as an argument and that's our main goal our goals for this section.

16
00:00:57,510 --> 00:01:02,830
So we're going to start with scope scope is kind of like variable visibility.

17
00:01:02,850 --> 00:01:09,060
It's it's this idea that depending on where you define a variable other pieces of your code may or may

18
00:01:09,060 --> 00:01:12,620
not have access to that value in a variable scope.

19
00:01:12,720 --> 00:01:18,810
Is that window it's the portion of your code where other values have access to it or other functions

20
00:01:18,840 --> 00:01:23,220
or other pieces of the code can access and manipulate that value.

21
00:01:23,220 --> 00:01:27,710
So there's multiple pieces different ways that scope behaves in JavaScript and that's what we're going

22
00:01:27,710 --> 00:01:29,620
to talk about in the next few videos.

23
00:01:29,820 --> 00:01:36,420
And the first type of scope is called function scope so when we define a variable in a function like

24
00:01:36,420 --> 00:01:38,850
I have right here it doesn't matter what the function is.

25
00:01:38,850 --> 00:01:40,020
It's called helped me.

26
00:01:40,020 --> 00:01:44,650
We have a variable called message I'm on fire inside the function.

27
00:01:44,670 --> 00:01:46,700
Of course we have access to message.

28
00:01:46,770 --> 00:01:50,490
If I were to log it or just get the value it's I'm on fire.

29
00:01:50,610 --> 00:01:54,190
But outside the bound to that function we don't have access.

30
00:01:54,270 --> 00:01:59,280
I get an error if I try to access message down here it is scoped to this function.

31
00:01:59,280 --> 00:02:00,990
That's what this box is representing.

32
00:02:02,010 --> 00:02:05,880
So this probably makes sense and you may have encountered this already.

33
00:02:06,030 --> 00:02:10,380
If you're brand new might have played around still if we have some function it doesn't matter what it's

34
00:02:10,380 --> 00:02:14,820
called Let's just go with L'OrÃ©al and then I define some variable in there.

35
00:02:14,850 --> 00:02:25,380
Let me person equals Tom and then let's also do one with const const age equals forty five and let's

36
00:02:25,380 --> 00:02:31,110
do one with var so var color equals teal okay.

37
00:02:31,240 --> 00:02:33,010
So we have three variables going on.

38
00:02:33,460 --> 00:02:39,390
If I try to access any of them outside of this Hallowell function like let's start with person counseled

39
00:02:39,400 --> 00:02:46,480
out log person we're not going to have a good time person is not defined and you might think well maybe

40
00:02:46,480 --> 00:02:52,540
if you call well then those variables will be they'll come into existence right now we're defining that

41
00:02:52,540 --> 00:02:54,880
function but this code is not executing.

42
00:02:54,880 --> 00:02:56,530
So if I execute it first.

43
00:02:56,530 --> 00:03:00,450
Same problem person is scoped to this function.

44
00:03:00,560 --> 00:03:04,840
Ello Well I have access to it in here of course but not outside.

45
00:03:04,840 --> 00:03:11,410
And if I tried that instead with age which is defined with const same error and if I try it with color

46
00:03:11,740 --> 00:03:17,650
which is defined with var once again we get the exact same error just for a different name for a variable

47
00:03:18,010 --> 00:03:19,250
person age and color.

48
00:03:19,330 --> 00:03:22,560
None of these exist outside the bounds of this function.

49
00:03:22,600 --> 00:03:23,570
They're scoped to it.

50
00:03:23,710 --> 00:03:28,710
So this means that we can have multiple functions that have similar or the same variable names.

51
00:03:28,720 --> 00:03:36,580
I could have another function we'll call this one change color and I'll set a variable called color.

52
00:03:36,620 --> 00:03:39,620
Let's go with light color equals.

53
00:03:39,710 --> 00:03:43,660
And this time it will be purple and we can also have.

54
00:03:43,730 --> 00:03:52,250
Let's do another age we'll do const age equals 19 and we'll consider that log one of them let's console

55
00:03:52,250 --> 00:04:01,460
that log age here and let's also do it here counseled out log age and then we'll call Elwell and we'll

56
00:04:01,460 --> 00:04:02,410
call change color.

57
00:04:04,330 --> 00:04:07,420
I'll get rid of this council that log at the bottom.

58
00:04:07,420 --> 00:04:10,720
You can see we get unique values in this context.

59
00:04:10,720 --> 00:04:12,300
Age is 45.

60
00:04:12,340 --> 00:04:15,160
In this context age is 19.

61
00:04:15,160 --> 00:04:20,700
So they are scopes those variables that we declared in a given function are scoped to that function.

62
00:04:20,800 --> 00:04:24,280
They are visible only in here after the fact.

63
00:04:24,280 --> 00:04:30,970
We can call the function but we cannot access or manipulate those variables from down here or up top.

64
00:04:30,970 --> 00:04:33,840
We are not in the same scope.

65
00:04:33,850 --> 00:04:35,290
Here's another example.

66
00:04:35,380 --> 00:04:40,080
This time I have a variable called bird that I've defined up top.

67
00:04:40,240 --> 00:04:42,310
Or it could be down below it doesn't matter where it's defined.

68
00:04:42,310 --> 00:04:47,830
But I have bird and then I have another let bird inside this function.

69
00:04:47,830 --> 00:04:50,630
So now I have two variables with the exact same name.

70
00:04:50,740 --> 00:04:59,770
And remember if I try and do that in the same scope like let high equals high and then let high equal

71
00:05:00,130 --> 00:05:04,820
3 I get an error it's telling me High has already been declared.

72
00:05:05,140 --> 00:05:09,790
So it's not saying hi it's already been declared anywhere in your code you can only have one high.

73
00:05:09,850 --> 00:05:13,760
It's more along the lines of high has been declared in this scope.

74
00:05:13,870 --> 00:05:18,850
You cannot have another high declared in the same scope but we can do it like this.

75
00:05:18,850 --> 00:05:24,970
We can have one variable with one name outside this function and another variable with the exact same

76
00:05:24,970 --> 00:05:27,470
name in the function.

77
00:05:27,470 --> 00:05:29,510
Compare that to what we had up top.

78
00:05:29,510 --> 00:05:34,600
It was the same idea we had age in one function in age in a different function different scopes.

79
00:05:35,150 --> 00:05:36,630
So we have different scopes here.

80
00:05:36,690 --> 00:05:40,090
Two beautiful birds by the way if you ever want to google what these look like.

81
00:05:40,090 --> 00:05:43,770
Oh mandarin ducks golden pheasants really pretty birds.

82
00:05:43,790 --> 00:05:48,260
Let's consider that log bird down here and let's do the same thing at the very bottom.

83
00:05:48,320 --> 00:05:49,730
Run my code.

84
00:05:49,730 --> 00:05:54,220
Well right now I'm not executing bird watch but here bird is set to mandarin duck.

85
00:05:54,440 --> 00:05:55,700
Let's call bird watch.

86
00:05:58,940 --> 00:06:03,300
Now we get bird watch which runs out log Golden Pheasant.

87
00:06:03,380 --> 00:06:07,130
It's finding the nearest bird which is in this scope.

88
00:06:07,280 --> 00:06:12,160
Then we consider it log bird outside the function bird is set to mandarin duck.

89
00:06:12,170 --> 00:06:15,260
So this diagram kind of explains this scenario.

90
00:06:15,320 --> 00:06:16,680
Here we have two scopes.

91
00:06:16,700 --> 00:06:20,350
We have the orange or yellow box which represents the scope of this function.

92
00:06:20,450 --> 00:06:27,020
Bird where it set two Golden Pheasant is only accessible in bird watch but then we have this larger

93
00:06:27,020 --> 00:06:31,070
scope where bird the first bird was declared outside the function.

94
00:06:31,070 --> 00:06:33,760
So it's pink box extends down below as well.

95
00:06:34,230 --> 00:06:37,150
And that's pretty much all I wanted to show you in this video.

96
00:06:37,340 --> 00:06:40,360
In this context let in concert will behave the same way.

97
00:06:40,460 --> 00:06:46,490
If I updated both let's to instead be const and run this we get the same output.

98
00:06:46,520 --> 00:06:53,030
If I update them to both be var we get the same output as well but in the next video we'll see a very

99
00:06:53,030 --> 00:06:59,000
significant difference between how letting concert behave and how far behaves in certain scenarios.

100
00:06:59,000 --> 00:07:00,830
So we have more scope to talk about that's next.
