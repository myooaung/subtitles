1
00:00:00,790 --> 00:00:04,690
Well we've got our information working but there are two big issues with it right now.

2
00:00:04,690 --> 00:00:07,150
Whenever we run the animation it's occurring and it's real.

3
00:00:07,150 --> 00:00:08,670
Kind of like blocks segment.

4
00:00:08,740 --> 00:00:13,170
Second by second so be really nice to have a much smoother animation.

5
00:00:13,180 --> 00:00:18,910
The other big issue is that because we are always subtracting by 50 units for our offset value we're

6
00:00:18,910 --> 00:00:22,210
always going to end up either overshooting or under shooting.

7
00:00:22,270 --> 00:00:25,760
Having the animation finished at the very top point right there.

8
00:00:25,760 --> 00:00:26,560
Let's take a look at this.

9
00:00:26,560 --> 00:00:28,510
I'm going down to nine eight seven.

10
00:00:28,570 --> 00:00:33,340
Ideally the animation would stop right there and even not even really right there because we still have

11
00:00:33,340 --> 00:00:38,170
that little segment visible but the animation to be really correct the entire border should disappear

12
00:00:38,230 --> 00:00:40,120
right when it hits zero.

13
00:00:40,120 --> 00:00:44,890
So again we need to make sure that we somehow get a better subtract subtraction right here than the

14
00:00:44,950 --> 00:00:48,970
negative 50 let's first focus on the animation however.

15
00:00:49,050 --> 00:00:54,080
So let's make sure that we can show a really smooth animation as opposed to the big blocky thing to

16
00:00:54,090 --> 00:00:55,430
make the animation a lot smoother.

17
00:00:55,440 --> 00:01:01,720
We can just choose to run our timer much more frequently so let's take a look at our timer implementation

18
00:01:01,720 --> 00:01:04,540
once again back inside of our timer dot J File.

19
00:01:04,810 --> 00:01:07,140
If you take a look it starts right here.

20
00:01:07,150 --> 00:01:13,090
You'll recall that we are running the tick method once every one seconds or 1000 milliseconds so what

21
00:01:13,090 --> 00:01:18,310
we could do to make our animation a lot smoother is run the tick method way more frequently and every

22
00:01:18,310 --> 00:01:22,840
single time we run the tick method rather than doing the 50 unit update right here.

23
00:01:22,840 --> 00:01:26,090
We could do a really small update like one pixel.

24
00:01:26,350 --> 00:01:33,210
So if we only do one pixel update at a time it will make the animation a lot smoother to make this happen.

25
00:01:33,210 --> 00:01:35,060
Let's go back to timer J us.

26
00:01:35,130 --> 00:01:39,370
We're going to find where we set up our interval and rather than running tick every one seconds will

27
00:01:39,390 --> 00:01:47,300
instead run in every 50 milliseconds that's going to be way more frequent and let's make sure it down

28
00:01:47,300 --> 00:01:49,000
inside of our tick method as well.

29
00:01:50,330 --> 00:01:55,490
Right here where we update the value of time remaining rather than subtracting one second because we're

30
00:01:55,490 --> 00:02:02,540
going to run tick so much more frequently we should instead only subtract point zero five now so that's

31
00:02:02,620 --> 00:02:07,010
a 50 milliseconds and matches up perfectly with the interval timer that we have right there

32
00:02:10,350 --> 00:02:10,620
okay.

33
00:02:10,660 --> 00:02:11,950
Let's now save this.

34
00:02:11,980 --> 00:02:14,350
I'm gonna go back over to my index dot j ust file.

35
00:02:14,500 --> 00:02:18,600
I'm going to find where we've got the 50 and I'm going to change that to one instead.

36
00:02:18,600 --> 00:02:23,590
So now every single time we have a tick I'm going to update the current offset by just one unit or one

37
00:02:23,590 --> 00:02:28,790
pixel I'm going to say this I can go back over refresh and hit start again.

38
00:02:28,900 --> 00:02:34,080
And so now we can very easily see that the animation is a lot smoother but there's another little issue

39
00:02:34,110 --> 00:02:35,340
that's cropped up.

40
00:02:35,340 --> 00:02:39,810
Take a look at the text input right here that shows the current value of the timer.

41
00:02:39,810 --> 00:02:43,560
It definitely has the like seventeen point whatever it looks like it's counting down.

42
00:02:43,680 --> 00:02:46,610
You'll notice that there are a ton of extra nines inside of here.

43
00:02:47,130 --> 00:02:47,980
So how could that be.

44
00:02:47,980 --> 00:02:52,170
We're only ever adjusting the timer by over here.

45
00:02:52,190 --> 00:02:54,140
Point zero five units.

46
00:02:54,140 --> 00:02:57,510
But for some reason we're getting all these extra nines inside there.

47
00:02:57,510 --> 00:03:04,120
Well the reason we're seeing this is because mathematics in Javascript is a very imprecise science all

48
00:03:04,250 --> 00:03:09,590
the subtraction addition multiplication all the stuff that we do uses a system in JavaScript called

49
00:03:09,650 --> 00:03:11,410
floating point operations.

50
00:03:11,660 --> 00:03:16,720
And math inside of JavaScript sometimes gets subject to these really strange rounding errors.

51
00:03:16,730 --> 00:03:18,000
Let me show you a really common.

52
00:03:18,000 --> 00:03:21,200
Very easy to reproduce rounding error inside my console right now.

53
00:03:21,200 --> 00:03:25,110
I'll say one point nine minus one yeah.

54
00:03:25,120 --> 00:03:26,480
Didn't really see that coming.

55
00:03:26,500 --> 00:03:29,310
So of course the results of that should be just point nine.

56
00:03:29,470 --> 00:03:33,310
But because the way javascript handles math and actually to be honest most programming languages handle

57
00:03:33,310 --> 00:03:36,250
math we end up with this really weird results.

58
00:03:36,250 --> 00:03:39,790
And so because of this floating point error that is the same reason that we're seeing something really

59
00:03:39,790 --> 00:03:42,600
funky inside of our input right there as well.

60
00:03:43,360 --> 00:03:44,980
So we can fix this up pretty easily.

61
00:03:45,050 --> 00:03:50,870
We're just going to do a little kind of a rounding operation when we set the value inside that input.

62
00:03:50,990 --> 00:03:57,270
I'm gonna go back over to my Ed. find the timer dot J.S. file and I'll find our setter method for time

63
00:03:57,270 --> 00:03:59,550
remaining at the bottom.

64
00:03:59,630 --> 00:04:01,030
So here's the setter.

65
00:04:01,190 --> 00:04:06,440
So we'd take the current time that has been passed in to time remaining and throw that into the value

66
00:04:06,740 --> 00:04:08,960
or the input value property.

67
00:04:09,020 --> 00:04:13,500
So it's this time variable right here that has all those extra decimal points inside of it.

68
00:04:13,530 --> 00:04:15,500
So it makes everything work out nicely.

69
00:04:15,500 --> 00:04:18,560
We can just call to fixed on this.

70
00:04:18,560 --> 00:04:22,520
That's going to essentially around the decimal under there just two decimal places.

71
00:04:22,550 --> 00:04:27,530
So we're going to drop off all those extra little values that we see inside all the actual decimals

72
00:04:28,730 --> 00:04:30,300
so I'm going to save the update.

73
00:04:30,400 --> 00:04:33,150
Go back over refresh it start again.

74
00:04:33,190 --> 00:04:34,420
That's definitely better.

75
00:04:34,420 --> 00:04:40,180
So now we just see the first two numbers and the first two decimals okay.

76
00:04:40,190 --> 00:04:42,440
So overall I'd say that this was a good fix.

77
00:04:42,440 --> 00:04:47,210
It's not the last big thing we have to do inside of our index not just file subtracting by one right

78
00:04:47,210 --> 00:04:47,530
here.

79
00:04:47,540 --> 00:04:48,800
Still not appropriate.

80
00:04:49,130 --> 00:04:54,470
We need to make sure that we adjust the current offset by some appropriate value so that no matter what

81
00:04:54,470 --> 00:05:00,230
our timer is running for we will always end the animation at 0 seconds perfectly at the very top of

82
00:05:00,230 --> 00:05:01,420
the circle.

83
00:05:01,520 --> 00:05:03,410
So we have to figure out some way of handling that.

84
00:05:03,410 --> 00:05:06,620
Let's take a pause right now and discuss how to do it in the next video.
