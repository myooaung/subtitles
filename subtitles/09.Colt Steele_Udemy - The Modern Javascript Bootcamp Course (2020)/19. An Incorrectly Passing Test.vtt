WEBVTT
1
00:00:00.530 --> 00:00:04.760
In the last video we got kind of a proof that we can get this testing setup to work correctly but if

2
00:00:04.760 --> 00:00:09.370
you look really closely at the tests we executed you'll notice something just a little bit strange.

3
00:00:09.380 --> 00:00:10.810
Let me show you what I mean.

4
00:00:10.880 --> 00:00:13.370
I'm gonna go back to the next e-mail file.

5
00:00:13.520 --> 00:00:16.250
I'm going to delete the input inside there to make my test fail.

6
00:00:16.250 --> 00:00:19.240
Once again I'm gonna save this file.

7
00:00:19.370 --> 00:00:21.030
I'll go back over to my terminal.

8
00:00:21.170 --> 00:00:25.230
I'll run to me at once again and take a look at the message that we get here.

9
00:00:25.310 --> 00:00:27.660
We get a very large error message.

10
00:00:27.770 --> 00:00:31.550
You might recall that we spent a little bit of time to make sure that they in time and test failed.

11
00:00:31.580 --> 00:00:33.740
We took just the message of the year.

12
00:00:33.740 --> 00:00:39.260
So like just that part right there and printed it out in some nice red text and kind of indented it

13
00:00:39.320 --> 00:00:39.740
as well.

14
00:00:39.740 --> 00:00:42.330
We actually spent like two or three videos doing that.

15
00:00:42.460 --> 00:00:47.750
Well you'll now notice that we are back to seeing a very large error message when this test fails instead.

16
00:00:47.810 --> 00:00:54.620
In addition you'll also notice very incorrectly that the test itself was marked as passing.

17
00:00:54.860 --> 00:00:59.750
So it seems like everything is kind of working but not quite working.

18
00:00:59.780 --> 00:01:01.400
So what's going on here.

19
00:01:01.400 --> 00:01:03.820
Well let's take another look at the code that we've written so far.

20
00:01:05.330 --> 00:01:10.140
I'm going to go back to the apt dot test out James file so inside of here We marked this function as

21
00:01:10.140 --> 00:01:14.730
being async because we are calling render which is definitely an async function.

22
00:01:14.730 --> 00:01:19.590
Remember we have to wait some amount of time for j ust Dom to load up this index dot H and I'll file

23
00:01:19.620 --> 00:01:24.690
off our hard drive past all the e-mail inside of it and then build up that kind of fake representation

24
00:01:24.720 --> 00:01:28.710
of the Dom that all takes some amount of time.

25
00:01:28.710 --> 00:01:35.060
So this function right here definitely has to be async in nature so the issue is if we take a look at

26
00:01:35.060 --> 00:01:40.910
where this function actually gets executed let's go back over to our runner dot J as file which is where

27
00:01:40.910 --> 00:01:43.090
that function actually gets executed.

28
00:01:43.130 --> 00:01:44.690
So here's runner dot James.

29
00:01:44.900 --> 00:01:49.730
Here's the run test function inside of there is where we defined the ET statement.

30
00:01:49.730 --> 00:01:50.930
There it is right there.

31
00:01:51.660 --> 00:01:57.730
So notice how inside of here whenever we invoke it there's the function that actually gets called in

32
00:01:57.780 --> 00:01:58.380
inside.

33
00:01:58.380 --> 00:02:01.770
We'll notice that we call f in right there directly.

34
00:02:01.770 --> 00:02:08.310
So when we call f in right there we did not put on any kind of a kind of anything to wait for asynchronous

35
00:02:08.310 --> 00:02:08.640
code.

36
00:02:08.640 --> 00:02:10.920
We essentially say call that function.

37
00:02:10.920 --> 00:02:16.580
It was passed in as the second argument and then immediately go on to run the next line of code.

38
00:02:16.590 --> 00:02:21.780
So what that really does with this kind of async nature is it executes the effin right there it executes

39
00:02:21.780 --> 00:02:26.330
the function that causes this function right here to execute.

40
00:02:26.330 --> 00:02:27.500
So this function starts to run.

41
00:02:27.510 --> 00:02:32.180
And the first thing it does is it says okay I'm going to go and tried to call that render function.

42
00:02:32.550 --> 00:02:37.050
So it goes off or on some code inside of render and eventually gets that point time where J system says

43
00:02:37.080 --> 00:02:42.330
Okay hold up just pause for a moment I need to go find this index to e-mail file load it up and pass

44
00:02:42.330 --> 00:02:47.370
its contents at the point that j ust on says Hey wait hold up.

45
00:02:47.420 --> 00:02:53.530
We can essentially imagine that we have all of our code kind of return because of the async nature.

46
00:02:53.540 --> 00:02:59.420
So kind of all flows back through and gets back to right here and the next line after J ust on says

47
00:02:59.420 --> 00:03:01.200
give me just a minute that gets executed.

48
00:03:01.250 --> 00:03:07.930
Is this console log then at some points I'm the future j ust I'm actually says oh hey I got this indexed

49
00:03:07.930 --> 00:03:12.880
I use a file everything's good to go and we actually take the results of that and assign it to the DOM

50
00:03:12.880 --> 00:03:17.260
variable we then go on to the input right here and then run our assertion.

51
00:03:17.320 --> 00:03:18.090
So the net effect.

52
00:03:18.100 --> 00:03:21.980
Long story short is that right now we call the it statement.

53
00:03:22.000 --> 00:03:24.930
We then immediately do our console log.

54
00:03:25.180 --> 00:03:31.540
Then at some point time later we actually run the asserts or we actually do the check and run the Assert

55
00:03:31.540 --> 00:03:32.570
statement.

56
00:03:32.680 --> 00:03:35.350
And so that's right now why we are seeing the green.

57
00:03:35.410 --> 00:03:39.100
Okay message and then a little bit later totally imperceptible to you and I.

58
00:03:39.100 --> 00:03:44.560
Because it happens so quickly we see the error message that occurs during a search.

59
00:03:44.560 --> 00:03:49.810
So in order to fix this we just have to add in some check or some something essentially to make sure

60
00:03:49.810 --> 00:03:55.600
that we await for this it statement right here to actually finish execution to do so.

61
00:03:55.600 --> 00:04:00.370
We just have to go back over to our runner really simple really straightforward F and right here that

62
00:04:00.370 --> 00:04:07.930
is an async function now it contains some asynchronous code so all we have to do is await it we'll make

63
00:04:07.930 --> 00:04:12.490
sure we mark the enclosing function as async as well and that's it.

64
00:04:12.500 --> 00:04:15.770
That's all we have to do.

65
00:04:15.820 --> 00:04:16.090
All right.

66
00:04:16.120 --> 00:04:17.690
Let's save this now.

67
00:04:17.740 --> 00:04:19.850
I'm going to go back over.

68
00:04:20.050 --> 00:04:21.590
I'm gonna run me again.

69
00:04:21.660 --> 00:04:25.500
And now we'll see the correct error message because now we are correctly waiting on the asynchronous

70
00:04:25.500 --> 00:04:28.560
nature of that it statement.

71
00:04:28.620 --> 00:04:30.730
So this definitely looks better.

72
00:04:30.780 --> 00:04:34.800
I'm going to go back over to index dot e-mail file and I'm going to restore that input element really

73
00:04:34.800 --> 00:04:37.740
quickly to make sure my test passes again.

74
00:04:38.040 --> 00:04:39.650
I'll save this file.

75
00:04:39.780 --> 00:04:41.380
I'm going to execute me again.

76
00:04:41.430 --> 00:04:45.550
And now I can see everything is passing very good OK.

77
00:04:45.570 --> 00:04:49.730
That definitely is going to prevent something that we fixed up that definitely had to be fixed up.

78
00:04:49.730 --> 00:04:54.410
Let's take another pause right here the next video we're going start to add in some tests around interacting

79
00:04:55.100 --> 00:04:57.080
with the text input and the form itself.

80
00:04:57.080 --> 00:05:01.910
Make sure we can submit it and once you do that we're gonna see yet another little issue up here so

81
00:05:01.910 --> 00:05:03.970
quick pause and I'll see you in just a minute.
