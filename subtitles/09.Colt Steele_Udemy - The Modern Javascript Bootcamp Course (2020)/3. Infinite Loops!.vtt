WEBVTT
1
00:00:00.090 --> 00:00:00.900
For loops are great.

2
00:00:00.900 --> 00:00:01.980
We use them a ton.

3
00:00:01.980 --> 00:00:07.350
I'll show you a few more situations where we use them with strings where we use them with arrays but

4
00:00:07.350 --> 00:00:10.000
first I want to talk about something that's not so great.

5
00:00:10.090 --> 00:00:14.580
And this is true of many types of loops across all languages.

6
00:00:14.580 --> 00:00:19.410
You can write infinite loops in an infinite loop is something you absolutely want to avoid.

7
00:00:19.560 --> 00:00:20.830
Do not run this code.

8
00:00:20.880 --> 00:00:27.810
It's not going to break your computer it's not going to set it on fire or crash anything but your window

9
00:00:27.810 --> 00:00:34.250
that you run it in on your browser is going to be very unhappy and I might show you what happens.

10
00:00:34.290 --> 00:00:39.960
I definitely have written many infinite loops accidentally and I'll talk about how that happens but

11
00:00:39.960 --> 00:00:45.670
the idea behind an infinite loop is that you write a loop where the ending condition is never met.

12
00:00:45.720 --> 00:00:50.180
So the second part of your for loop in this case would always be true.

13
00:00:50.220 --> 00:00:58.110
So here's an example I'm saying start at twenty add one to each time and run this loop while I is greater

14
00:00:58.110 --> 00:00:59.750
than or equal to zero.

15
00:00:59.820 --> 00:01:04.290
It's always going to be greater than or equal to zero because I'm always adding to AI and it starts

16
00:01:04.290 --> 00:01:12.600
at 20 so it will run on and on and on and on and on and tell either javascript freaks out or the browser

17
00:01:12.600 --> 00:01:15.050
freaks out you'll see what happens.

18
00:01:15.060 --> 00:01:16.180
I guess I'll show it to you.

19
00:01:16.270 --> 00:01:18.360
Committed to it at this point.

20
00:01:18.360 --> 00:01:23.370
So you want to be careful about this when you're writing a for loop and especially when you write while

21
00:01:23.370 --> 00:01:25.340
loops which will cover next.

22
00:01:25.350 --> 00:01:28.110
So let's try and create one an infinite loop.

23
00:01:28.680 --> 00:01:37.620
Let's count was great and I that starts at 1 and I'm going to add two to AI each time so maybe I'm trying

24
00:01:37.620 --> 00:01:40.440
to count to 4 6 8 and so on.

25
00:01:40.440 --> 00:01:49.230
Up until I hit 20 so my condition a poorly written condition would be run this when I is not equal to

26
00:01:49.230 --> 00:01:52.530
20 but there's a problem here.

27
00:01:52.650 --> 00:01:59.550
I'm starting AI at 1 I'm adding 2 to it each time so we'll get 3 and then we'll get well we'll get one

28
00:01:59.550 --> 00:02:06.450
then 3 then 5 then 7 we'll never have twenty so it's always going to be not equal to 20 we'll never

29
00:02:06.450 --> 00:02:07.650
hit twenty.

30
00:02:07.680 --> 00:02:10.130
We're counting on odd numbers because we start at 1.

31
00:02:10.260 --> 00:02:12.940
So we blow right past it.

32
00:02:13.010 --> 00:02:13.590
Gosh.

33
00:02:13.590 --> 00:02:14.400
Here we go.

34
00:02:14.580 --> 00:02:17.460
When I run it I'm being dramatic.

35
00:02:17.460 --> 00:02:22.040
It's not that bad you can see what's happening here.

36
00:02:22.050 --> 00:02:27.010
We've already hit two thousand nine hundred three and did my browser stop.

37
00:02:27.030 --> 00:02:27.230
Yeah.

38
00:02:27.270 --> 00:02:27.680
OK.

39
00:02:27.810 --> 00:02:31.320
Now it's lagging I can't scroll I can't click.

40
00:02:31.320 --> 00:02:33.060
It's getting on jittery.

41
00:02:33.180 --> 00:02:38.330
It's just going to keep going and then eventually Chrome is going to ask me if I want to kill the process.

42
00:02:38.340 --> 00:02:39.780
You might have seen that before.

43
00:02:39.810 --> 00:02:45.360
If you're trying to open something intensive in the browser or page it's being weird a little window

44
00:02:45.360 --> 00:02:51.000
pops up and says You want to kill or wait on this web page I'll click kill one that eventually pops

45
00:02:51.000 --> 00:02:53.040
up and I'll be back in a bit.

46
00:02:53.730 --> 00:02:54.280
OK.

47
00:02:54.360 --> 00:02:56.200
So eventually I killed it.

48
00:02:56.250 --> 00:02:58.200
My computer is now very angry.

49
00:02:58.200 --> 00:03:01.460
You can hear the fans going most likely through the microphone.

50
00:03:01.470 --> 00:03:06.560
It got very warm because it's trying to do all these computations and there's no end in sight.

51
00:03:06.570 --> 00:03:10.730
It just keeps going and going and going and going and that's not good behavior.

52
00:03:10.800 --> 00:03:13.310
So infinite loops or something we want to avoid.

53
00:03:13.320 --> 00:03:17.940
So in general when you're doing a for loop there's a couple of things to look out for before you ever

54
00:03:17.940 --> 00:03:18.750
run the code.

55
00:03:18.750 --> 00:03:22.860
The first is just pay attention and make sure you're going in the right direction.

56
00:03:22.860 --> 00:03:30.840
This is a simple one but if you're trying to count backwards from 200 or from 100 let I equals 100 and

57
00:03:30.840 --> 00:03:33.040
we'll decrement by 1.

58
00:03:33.210 --> 00:03:36.760
We want this code to run when i is greater than or equal to zero.

59
00:03:37.080 --> 00:03:39.870
But often at least sometimes I do this.

60
00:03:39.870 --> 00:03:44.220
I'm so used to doing I less than or equal to something that that's what I'll go with.

61
00:03:44.220 --> 00:03:46.060
And that causes an infinite loop.

62
00:03:46.060 --> 00:03:50.700
I usually catch myself but it's just something to pay attention to make sure that if you're going backwards

63
00:03:50.700 --> 00:03:55.760
or going forwards whichever direction you're going that your condition here is appropriate.

64
00:03:55.860 --> 00:04:02.370
And the other piece of advice that I have is that I would pretty much never use equality or non equality

65
00:04:02.550 --> 00:04:05.150
in a for loop if you're working with numbers.

66
00:04:05.160 --> 00:04:10.740
It's much better to do greater than or less than because then we would avoid a situation like this if

67
00:04:10.740 --> 00:04:13.960
I did want to count from three to five to seven.

68
00:04:14.100 --> 00:04:16.980
And I wanted to stop as soon as we get past 20.

69
00:04:17.070 --> 00:04:22.590
It would just be better if I said while I is less than or equal to 20 because even if we don't hit 20

70
00:04:22.590 --> 00:04:28.710
exactly we're starting at 1:00 we add two we'll end up with 19 and then we get to 21.

71
00:04:28.770 --> 00:04:34.080
We skipped over 20 but the loop will still stop because this won't be true anymore.

72
00:04:34.200 --> 00:04:35.250
So just two things.

73
00:04:35.250 --> 00:04:40.440
Make sure you're going in the right direction your logic makes sense here and generally try to avoid

74
00:04:40.440 --> 00:04:43.200
equality and non equality there.

75
00:04:43.260 --> 00:04:46.230
I prefer to use greater than and less than when I can.

76
00:04:46.260 --> 00:04:47.800
So I'm going to add a note here.

77
00:04:47.910 --> 00:04:50.910
Don't run this.

78
00:04:50.910 --> 00:04:53.460
This will cause an infinite loop.

79
00:04:53.590 --> 00:04:54.930
I'll get rid of that one.

80
00:04:55.110 --> 00:05:00.210
You probably will encounter an infinite loop or two but at this point hopefully you'll be able to identify

81
00:05:00.270 --> 00:05:01.280
what's going on.

82
00:05:01.290 --> 00:05:05.670
I'll be very clear when your browser just starts freaking out at you and getting hot and jittery and

83
00:05:06.330 --> 00:05:08.110
laggy it happens.

84
00:05:08.250 --> 00:05:12.780
It's nothing to be ashamed of but it's definitely something you want to be on the lookout for and try

85
00:05:12.780 --> 00:05:13.920
and prevent if you can.
