WEBVTT
1
00:00:00.210 --> 00:00:00.630
All right.

2
00:00:00.630 --> 00:00:07.410
So that was a brief intro to the concept of Ajax asynchronous javascript and excel in this video.

3
00:00:07.410 --> 00:00:09.630
The last one before we actually make requests.

4
00:00:09.750 --> 00:00:16.260
We're gonna talk about Excel and this other thing I mentioned Jason javascript object notation.

5
00:00:16.260 --> 00:00:21.810
So these are two ways of basically formatting data so that you can send it from a server to another

6
00:00:21.810 --> 00:00:23.800
server or a server to a browser.

7
00:00:23.850 --> 00:00:25.740
It's a format for information.

8
00:00:25.740 --> 00:00:27.760
They both solve essentially the same problem.

9
00:00:27.780 --> 00:00:30.070
We have some data that we want to send.

10
00:00:30.240 --> 00:00:34.560
We need to figure out a common standard way of sending that information.

11
00:00:34.650 --> 00:00:42.480
So if we had some data about a user for example where we have name would be something like Todd and

12
00:00:42.480 --> 00:00:46.220
then we have you know e-mail is something else.

13
00:00:46.320 --> 00:00:51.740
Todd at g mail and age could be a number like eighty nine.

14
00:00:51.930 --> 00:00:55.190
This is information and I'm already formatting it in some way.

15
00:00:55.200 --> 00:00:56.910
This isn't actually Jason.

16
00:00:56.910 --> 00:01:00.030
This is an example but there's tons of ways we could do this right.

17
00:01:00.030 --> 00:01:04.080
We could just use arrows to represent keys and values.

18
00:01:04.200 --> 00:01:05.440
We could.

19
00:01:05.730 --> 00:01:06.360
What else could we do.

20
00:01:06.360 --> 00:01:13.580
We could do colons or we could go with Excel which is one format.

21
00:01:13.770 --> 00:01:15.210
I'll show you what it looks like.

22
00:01:15.300 --> 00:01:17.650
It stands for Extensible Markup Language.

23
00:01:17.700 --> 00:01:23.550
You can think of excel as a very very broad almost the parent of each team.

24
00:01:23.580 --> 00:01:28.100
It looks like aged him out except the element names are very different.

25
00:01:28.120 --> 00:01:29.740
They're not actual elements.

26
00:01:29.820 --> 00:01:34.630
Excel is a way of just grouping content and adding meaning to your data.

27
00:01:34.650 --> 00:01:42.420
So if we were to represent this as X AML we actually use tags like name and then instead of that we

28
00:01:42.420 --> 00:01:49.830
would put Todd and then we could have another tag for email and instead of that you put Todd at GM outcome

29
00:01:50.610 --> 00:02:00.270
and we could even ness things so inside of the name we could have first and that would be Todd then

30
00:02:00.270 --> 00:02:02.220
we could have second.

31
00:02:02.250 --> 00:02:07.680
So it's very similar to edged him out in the way that we structure things the characters we use but

32
00:02:07.680 --> 00:02:13.530
it means something entirely different x amount can represent any sort of information like First Name

33
00:02:13.530 --> 00:02:14.250
Last Name.

34
00:02:14.250 --> 00:02:15.320
What am I going with second.

35
00:02:15.320 --> 00:02:19.180
Geez I meant last name email whatever.

36
00:02:19.980 --> 00:02:22.980
Each team email represents the structure of a web page.

37
00:02:23.040 --> 00:02:27.950
It uses similar formatting but otherwise it's it has a totally different purpose.

38
00:02:27.960 --> 00:02:33.240
They both are encoding information so that it can be transferred from one machine to another across

39
00:02:33.240 --> 00:02:34.050
the Internet.

40
00:02:34.050 --> 00:02:41.010
Little tiny pieces of light or bits turning on and off but X M0 is just a broad way of structuring data

41
00:02:41.520 --> 00:02:43.640
so X used to be a lot more popular.

42
00:02:43.800 --> 00:02:45.190
You'll still see it sometimes.

43
00:02:45.300 --> 00:02:50.890
It's actually kind of frustrating when you encounter an API you want to use that response with X.

44
00:02:51.000 --> 00:02:57.840
It's just not very common at least in my experience but in JavaScript we have a way of taking data like

45
00:02:57.840 --> 00:03:04.770
this and turning it into a javascript object like if this was a javascript object it would be a name

46
00:03:05.760 --> 00:03:08.940
which has another object first.

47
00:03:09.060 --> 00:03:10.660
Todd would be a string.

48
00:03:10.710 --> 00:03:18.380
Last would be Smith as a string and then another property would be email Todd at gmail dot com.

49
00:03:18.450 --> 00:03:24.420
This would be an actual javascript object we could use that we structure based off of this X amount

50
00:03:25.200 --> 00:03:26.910
and JavaScript has a way of doing that.

51
00:03:26.940 --> 00:03:33.570
We can parse text that is X amount and turn it into actual javascript so we can use it but there is

52
00:03:33.570 --> 00:03:34.250
another format.

53
00:03:34.260 --> 00:03:40.190
We've already mentioned which is called Jason and Jason is extremely common these days.

54
00:03:40.320 --> 00:03:45.360
It stands for a javascript object notation so it is not javascript.

55
00:03:45.360 --> 00:03:51.060
It looks like Javascript it shares a lot of things in common with javascript but it is not the exact

56
00:03:51.060 --> 00:03:55.410
same javascript object notation is another format for sending data.

57
00:03:55.410 --> 00:03:59.580
It's another notation but there are some key differences.

58
00:03:59.610 --> 00:04:04.140
First of all every key in Jason must be a string with quotes.

59
00:04:04.440 --> 00:04:06.780
We use colons instead of an object.

60
00:04:06.810 --> 00:04:08.920
We also can use arrays.

61
00:04:09.090 --> 00:04:15.510
We can have values like bad numbers boolean strings but we cannot store more complicated things like

62
00:04:15.510 --> 00:04:17.160
functions as an example.

63
00:04:17.190 --> 00:04:20.180
So the bad news is that it's not actually JavaScript.

64
00:04:20.190 --> 00:04:23.580
The good news is that it's very close which makes it a great fit.

65
00:04:23.640 --> 00:04:30.440
If we are using JavaScript because we can translate between Jason and JavaScript very very easily it's

66
00:04:30.450 --> 00:04:33.120
a single function call instead of javascript.

67
00:04:33.120 --> 00:04:40.470
So here's one of the API is will play around with later this API is called swampy or Star Wars API and

68
00:04:40.470 --> 00:04:42.630
we can play around with this on their web page.

69
00:04:42.630 --> 00:04:45.170
Let's look at star ships slash 9.

70
00:04:45.180 --> 00:04:47.000
This is just their documentation.

71
00:04:47.040 --> 00:04:49.250
So a little preview of what you get back.

72
00:04:49.650 --> 00:04:56.580
And if I actually open up the dev tools and I go to network again let's go to planets slash 3.

73
00:04:56.610 --> 00:04:58.550
You'll see that a request is sent.

74
00:04:58.580 --> 00:04:59.710
Here is our response.

75
00:05:00.080 --> 00:05:06.900
If I paste this over here it looks like a javascript object but it's not actually javascript at this

76
00:05:06.900 --> 00:05:07.410
point.

77
00:05:07.410 --> 00:05:10.500
But remember it's being sent as part of a response.

78
00:05:10.500 --> 00:05:12.510
It's not actually javascript.

79
00:05:12.510 --> 00:05:17.970
What we would do is then take it once we get it back and translate it into a real javascript object

80
00:05:18.240 --> 00:05:20.580
which is really really easy to do.

81
00:05:20.670 --> 00:05:27.510
So this is another format of representing information to take this example and turn it into Jason.

82
00:05:27.510 --> 00:05:35.490
It would look almost identical to what we have here except we would have quotes around every key and

83
00:05:35.820 --> 00:05:36.750
actually that's pretty much it.

84
00:05:36.780 --> 00:05:42.300
If we had more complex data if we had a function from javascript we're trying to turn into Jason that

85
00:05:42.300 --> 00:05:43.600
becomes problematic.

86
00:05:43.830 --> 00:05:44.940
But there are ways around it.

87
00:05:45.900 --> 00:05:54.090
So to sum of this up Jason is a format for sending data so as x amount X AML used to be very common.

88
00:05:54.240 --> 00:05:57.220
Hence the term Ajax with an ex.

89
00:05:57.420 --> 00:06:03.480
Nowadays most people use Jason and even though it's called javascript object notation it's named that

90
00:06:03.480 --> 00:06:05.520
because it's very similar to JavaScript.

91
00:06:05.580 --> 00:06:11.880
That doesn't mean you can only use it with JavaScript so these APIs we see will respond with Jason like

92
00:06:11.880 --> 00:06:12.870
the Star Wars API.

93
00:06:12.870 --> 00:06:18.540
I just briefly showed you it sends you Jason when you send a request to it but you can write a python

94
00:06:18.540 --> 00:06:24.870
application that communicates with that API receives Jason and turns it into valid python.

95
00:06:24.870 --> 00:06:28.710
You could do any you could do a ruby application and do the same thing.

96
00:06:28.800 --> 00:06:34.230
So the name javascript object notation means that it is similar to JavaScript but it's not something

97
00:06:34.230 --> 00:06:39.710
you can only use with JavaScript you can interact with it with any other programming language.

98
00:06:39.780 --> 00:06:41.040
You just have to pass it.

99
00:06:41.040 --> 00:06:45.610
You have to turn it into valid javascript and there's actually a format here.

100
00:06:45.630 --> 00:06:46.910
This just a bunch of them.

101
00:06:46.920 --> 00:06:50.660
Here's one I'm looking at which will tell you if your code is valid.

102
00:06:50.670 --> 00:06:51.750
Jason.

103
00:06:51.750 --> 00:06:57.270
So if I try and write some Jason that is not actually valid like person

104
00:06:59.780 --> 00:07:08.090
is the string of Thomas and then let's just start with that let's process that invalid.

105
00:07:08.090 --> 00:07:11.930
It tells me immediately strings should be wrapped in double quotes.

106
00:07:11.990 --> 00:07:12.400
OK.

107
00:07:12.500 --> 00:07:14.010
So I use single quotes here.

108
00:07:14.090 --> 00:07:15.340
That should be double.

109
00:07:15.410 --> 00:07:16.490
And this has no quotes.

110
00:07:16.520 --> 00:07:18.890
Which is valid in JavaScript not valid.

111
00:07:18.890 --> 00:07:30.220
And Jason if I try something like Hello or greets which should be a function it doesn't even do anything

112
00:07:30.250 --> 00:07:32.260
it's just a function javascript wise.

113
00:07:32.260 --> 00:07:33.470
This is totally fine.

114
00:07:33.580 --> 00:07:40.240
But if I process it it tells me strings should be wrapped in double quotes expecting comma colon or

115
00:07:40.300 --> 00:07:46.590
curly brace to close the object not an opening curly brace and it encountered in opening curly brace.

116
00:07:46.720 --> 00:07:51.220
So it doesn't tell me you can't do functions because this parser doesn't really care.

117
00:07:51.340 --> 00:07:58.450
It's telling me you're not following the exact rules of Jason which say after a colon you have to encounter

118
00:07:58.600 --> 00:08:05.080
a comma another colon or a closing object brace like this object brace here which is closed down there.

119
00:08:05.740 --> 00:08:10.160
So all of this is to say yes it's similar to JavaScript it is not javascript.

120
00:08:10.810 --> 00:08:15.340
OK next we're getting at practice sending requests a couple of different ways.

121
00:08:15.370 --> 00:08:20.440
We'll get Jason back and we will turn it into javascript and do something with the information that's

122
00:08:20.440 --> 00:08:21.130
coming up next.
