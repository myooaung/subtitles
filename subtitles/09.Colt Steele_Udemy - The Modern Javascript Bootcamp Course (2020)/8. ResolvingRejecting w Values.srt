1
00:00:00,210 --> 00:00:05,370
The next thing to know about promises is that when you reject or resolve a promise you can reject or

2
00:00:05,370 --> 00:00:10,530
resolve it with a value and you'll have access to that value in your callback that you pass into then

3
00:00:10,680 --> 00:00:11,760
or catch.

4
00:00:11,760 --> 00:00:17,470
Which is really really useful because most of the time we're not just waiting on some resolve or reject

5
00:00:17,470 --> 00:00:20,760
it happens arbitrarily like a random resolve or reject.

6
00:00:20,850 --> 00:00:26,070
We want to know why was something rejected for example in the case of a HDP request.

7
00:00:26,100 --> 00:00:29,670
Why did this fail and if it didn't fail if it was resolved.

8
00:00:29,670 --> 00:00:31,440
What is the data that we got back.

9
00:00:31,440 --> 00:00:36,230
That's the point of making a request at least most of the time is you're trying to get some information.

10
00:00:36,600 --> 00:00:40,540
So we are going to make a fake request function here.

11
00:00:40,560 --> 00:00:51,020
We'll call it const fake request and we'll pass in a new URL so we'll call this like fake request read

12
00:00:51,040 --> 00:00:52,830
it dot com or something.

13
00:00:52,830 --> 00:00:59,100
Or actually that's just do relative U.R.L. so slash dogs or slash log in and it's going to take some

14
00:00:59,100 --> 00:01:03,660
time so we know that it's going to return a promise because it takes some time.

15
00:01:03,870 --> 00:01:10,330
So let's do return new promise and then we have our callback in here.

16
00:01:10,330 --> 00:01:16,120
The I think it's called an execute or function executor function on the docs at least it doesn't really

17
00:01:16,120 --> 00:01:16,440
matter.

18
00:01:16,570 --> 00:01:22,950
But we have our resolve parameter and our reject and then we'll do a set time out.

19
00:01:23,380 --> 00:01:25,720
And how long should this timeout take.

20
00:01:25,750 --> 00:01:30,610
Let's say it takes three seconds to make a request which is a pretty long time to make a request and

21
00:01:30,610 --> 00:01:37,430
then our callback that goes here for set time out and what do we want to do in here.

22
00:01:37,430 --> 00:01:42,470
Let's pick a random number and decide randomly if this request worked or not.

23
00:01:42,560 --> 00:01:48,410
And we'll resolve it or reject sort of the same thing we've done before math out random we'll save that

24
00:01:48,410 --> 00:01:52,430
to a variable const Rand and then we'll check if Rand.

25
00:01:52,640 --> 00:01:59,480
We don't want it to fail half the time so let's say if Rand is less than zero point three we will reject

26
00:01:59,570 --> 00:02:06,650
to start like this and then else we will resolve.

27
00:02:08,120 --> 00:02:09,530
So so far nothing new.

28
00:02:09,530 --> 00:02:10,960
We've already seen how to do this.

29
00:02:10,970 --> 00:02:15,740
If we call fake request we don't even need to pass in a U RL Because we're not using it at the moment.

30
00:02:15,920 --> 00:02:26,000
So fake request DOD let's just do it then a simple one and a catch we will cancel that log request worked

31
00:02:26,990 --> 00:02:35,550
and then in our DOT catch we'll do a console dot log request failed.

32
00:02:35,550 --> 00:02:38,380
So this is kind of a recap of what we already know.

33
00:02:38,520 --> 00:02:43,860
It's the same idea a set time out faking something in the last video we were doing a dog promise but

34
00:02:43,860 --> 00:02:46,830
it was the same thing except I think there's a 50 50 chance.

35
00:02:46,830 --> 00:02:48,340
Now we have it 30 70.

36
00:02:48,630 --> 00:02:55,800
So if we run this should take 3 seconds and we'll see either requests worked or requests failed and

37
00:02:55,800 --> 00:02:56,690
I won't keep going.

38
00:02:56,690 --> 00:02:57,980
Hopefully we get a request.

39
00:02:58,270 --> 00:03:02,490
OK one more chance to give it one more chance.

40
00:03:02,490 --> 00:03:04,330
All right well you always have to trust me.

41
00:03:04,480 --> 00:03:10,990
Requests will fail at some point so this video is about how we can reject and resolve with a value we

42
00:03:10,990 --> 00:03:15,010
can pass information in to the resolve or reject calls.

43
00:03:15,040 --> 00:03:16,520
So let's start with reject.

44
00:03:16,690 --> 00:03:20,440
If we reject why don't we pass in a status code.

45
00:03:20,440 --> 00:03:27,280
So a typical HDP response includes a status code you've probably seen two hundred four OK or definitely

46
00:03:27,370 --> 00:03:30,390
most likely at least seen for 0 4 not found.

47
00:03:30,400 --> 00:03:32,680
Why don't we just pass that through.

48
00:03:32,890 --> 00:03:38,990
So reject and then let's pass an object in where status is set to 4 0 4.

49
00:03:39,010 --> 00:03:44,770
So now instead of our catch if something is rejected our callback instead of catch will run to we can

50
00:03:44,770 --> 00:03:52,600
add a parameter and now could call it data or response and then we can look at Red Dot status console

51
00:03:52,600 --> 00:04:00,870
dot log Reg status and if this ever fails let's do one second just to make it easier.

52
00:04:00,940 --> 00:04:01,620
Come on.

53
00:04:01,780 --> 00:04:02,410
It worked.

54
00:04:02,950 --> 00:04:03,380
Okay.

55
00:04:03,400 --> 00:04:04,270
There we go.

56
00:04:04,270 --> 00:04:10,690
Four or four requests failed so we have access to this data that we pass through a single variable or

57
00:04:10,750 --> 00:04:16,240
it's not even a variable a single value we could pass more things like reject it with this object and

58
00:04:16,240 --> 00:04:20,070
then I don't know what else would make sense in this context but we could put whatever we want in here

59
00:04:20,080 --> 00:04:25,560
we could also pass in to and then we just have a second parameter we could call it No.

60
00:04:25,720 --> 00:04:30,310
Now as far as resolving with a value or multiple values it's the same process.

61
00:04:30,340 --> 00:04:35,300
Why don't we do something a bit more useful like when we call fake requests will pass into a U.R.L..

62
00:04:35,500 --> 00:04:41,560
How about slash users and then we'll use that you are all to decide what to respond with.

63
00:04:41,560 --> 00:04:44,000
We're pretending to be an HP request.

64
00:04:44,080 --> 00:04:45,220
We're mocking it out.

65
00:04:45,280 --> 00:04:46,750
We're adding the delay.

66
00:04:46,750 --> 00:04:50,240
Why don't we start with a variable we'll call this.

67
00:04:50,250 --> 00:04:50,610
Mm hmm.

68
00:04:50,630 --> 00:04:55,120
What should we call this maybe data or pages.

69
00:04:55,120 --> 00:05:02,260
Sure it will be an object where we map you around like Slash users to some information.

70
00:05:02,260 --> 00:05:09,080
And how about our users will be an array an array of objects where we have an idea for each one let's

71
00:05:09,100 --> 00:05:17,080
just say idea of one user name is Bilbo and we'll just have two users in here to keep it simple ideas

72
00:05:17,080 --> 00:05:18,630
of five.

73
00:05:18,650 --> 00:05:23,500
Username will be how about as morale.

74
00:05:24,520 --> 00:05:27,250
Okay so whatever you are L is passed in.

75
00:05:27,250 --> 00:05:32,010
We will use that you are our parameter to access information out of pages.

76
00:05:32,050 --> 00:05:34,390
Let's just add a second page in here.

77
00:05:34,390 --> 00:05:39,170
This one will be slash about and it will just be a string of text.

78
00:05:39,190 --> 00:05:41,040
This is the about page.

79
00:05:42,670 --> 00:05:51,110
Okay so if you pass and slash users what we'll do is take that you URL and resolve with pages of your

80
00:05:51,120 --> 00:06:00,060
RL Let's just call this data concept data and then we'll resolve it with an object maybe so that we

81
00:06:00,060 --> 00:06:02,790
can include a status code of 200 which means.

82
00:06:02,810 --> 00:06:08,290
OK and then we'll also include data and I'll just use a shorthand instead of data call and data.

83
00:06:08,310 --> 00:06:13,370
I'll just add data so if we check it out we pass in slash users.

84
00:06:13,940 --> 00:06:17,350
Let's start with something easier How about slash about Dot.

85
00:06:17,520 --> 00:06:24,400
Then we'll go with response maybe reds again and we'll console that log.

86
00:06:24,710 --> 00:06:33,350
Let's go with status code red dot status and then duplicate that and do red dot data which is the second

87
00:06:33,350 --> 00:06:34,170
thing right.

88
00:06:34,220 --> 00:06:39,720
We have status and data that we resolve with and we'll go with data here.

89
00:06:39,890 --> 00:06:41,120
Let's see what we get.

90
00:06:41,120 --> 00:06:42,680
If it does resolve and it did.

91
00:06:42,680 --> 00:06:44,400
Status Code 200 data.

92
00:06:44,420 --> 00:06:46,250
This is the about page.

93
00:06:46,250 --> 00:06:52,130
Now instead of randomly resolving or rejecting let's get rid of a random number and instead will reject

94
00:06:52,160 --> 00:06:56,820
if the you or L is invalid if it's not contained within pages.

95
00:06:57,200 --> 00:06:59,640
So we'll get rid of all this or almost all of.

96
00:06:59,720 --> 00:07:00,670
We'll just get rid of all of it.

97
00:07:01,490 --> 00:07:06,620
And what we'll do here is check within the set time out so we're still going to wait a full second or

98
00:07:06,620 --> 00:07:08,260
three seconds or whatever.

99
00:07:08,360 --> 00:07:11,420
We'll check if the euro was in pages.

100
00:07:11,420 --> 00:07:15,250
So if data right we're just plugging this you are all in.

101
00:07:15,350 --> 00:07:23,570
If data we will resolve with this that we already have else will reject

102
00:07:26,270 --> 00:07:31,540
with the object that has status set to four or four which means not found which makes sense.

103
00:07:31,590 --> 00:07:35,910
You are all you passed and was not found in our fake or fake application.

104
00:07:35,990 --> 00:07:38,180
It has two end points right now.

105
00:07:38,180 --> 00:07:39,860
Why don't we test this out now.

106
00:07:39,890 --> 00:07:43,850
So if I do about we'll see if that one works it should still work.

107
00:07:43,880 --> 00:07:46,210
I'll change it to users actually.

108
00:07:46,210 --> 00:07:54,740
And then if we try another one this time fake request it will do slash dogs which does not exist in

109
00:07:54,740 --> 00:07:55,790
our pages.

110
00:07:55,850 --> 00:08:03,020
So if you are Elliot's dogs this line should be undefined so this won't run and instead will reject.

111
00:08:03,320 --> 00:08:05,660
Let's double check cool.

112
00:08:05,680 --> 00:08:06,870
So our first one worked.

113
00:08:06,940 --> 00:08:11,710
We got status code 200 from the dog then call back right here.

114
00:08:11,750 --> 00:08:14,500
Red Dot data where these two users.

115
00:08:14,500 --> 00:08:16,780
And then the second request did not work.

116
00:08:16,780 --> 00:08:19,350
We got four or four requests failed already.

117
00:08:19,360 --> 00:08:25,830
So in this video we saw that we can resolve and reject with data we can pass through some argument there.

118
00:08:25,900 --> 00:08:31,660
In this case it was an object in both the resolving and rejecting scenarios and then instead of our

119
00:08:31,660 --> 00:08:37,350
dot then callback we can add a parameter give it whatever name we want and it will have that data.

120
00:08:37,450 --> 00:08:44,020
It will be passed whatever the promise was resolved with and then same thing for dot catch except when

121
00:08:44,020 --> 00:08:45,760
the promise is rejected.

122
00:08:45,760 --> 00:08:49,780
This function will run and this parameter will have whatever value we passed.

123
00:08:49,780 --> 00:08:50,110
All right.

124
00:08:50,140 --> 00:08:53,040
So we're almost done with the basics of promises.

125
00:08:53,050 --> 00:08:58,080
We have one other really important topic to cover which is chaining multiple promises.

126
00:08:58,120 --> 00:09:00,990
What if we wanted to make another request after the first one.

127
00:09:01,060 --> 00:09:02,590
We have a really nice way of doing it.

128
00:09:02,680 --> 00:09:03,430
So that's coming up next.
