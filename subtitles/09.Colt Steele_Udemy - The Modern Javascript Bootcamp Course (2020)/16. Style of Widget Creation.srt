1
00:00:00,980 --> 00:00:04,940
We just added in a bunch of e-mail directly to our index not a small file.

2
00:00:04,940 --> 00:00:09,980
So now in theory we could go back over to our javascript code tried to select these different anchor

3
00:00:09,980 --> 00:00:15,680
elements and then update the content inside them to show the movie poster and the title.

4
00:00:15,680 --> 00:00:17,330
In theory that would work.

5
00:00:17,330 --> 00:00:21,860
But before we do that we kind of have a choice to make here about how we're going to implement this

6
00:00:21,920 --> 00:00:23,470
autocomplete widget.

7
00:00:23,510 --> 00:00:29,500
Let me show you a diagram to help you understand the decision that we have to make OK so this is option

8
00:00:29,500 --> 00:00:30,390
number one right here.

9
00:00:30,430 --> 00:00:34,420
And this is kind of what the path is that we're walking down right now.

10
00:00:34,420 --> 00:00:39,100
So right now in this kind of option we would write out all the each team all that is required or at

11
00:00:39,100 --> 00:00:42,230
least as much as possible inside of our each HTML document.

12
00:00:42,610 --> 00:00:46,750
So in other words we would write out that div with class dropdown we would write out the input inside

13
00:00:46,750 --> 00:00:47,240
there.

14
00:00:47,470 --> 00:00:52,420
Then the drop down menu the content and then eventually render out all the dropdown items inside there

15
00:00:53,320 --> 00:00:57,250
and then inside of our indexed dot J.S. file we would write out some code that looks like this.

16
00:00:57,250 --> 00:01:03,370
It would try to select probably like that div with class dropdown or some like autocomplete class or

17
00:01:03,370 --> 00:01:08,830
something like that and then set up an event listener on the input inside there and then whenever a

18
00:01:08,830 --> 00:01:15,430
user does a search we would then take the results generate all those options and throw all the different

19
00:01:15,430 --> 00:01:22,250
results like all the different anchor tags into that dropdown content div and this right here might

20
00:01:22,250 --> 00:01:24,750
seem like a really obvious way to do it right.

21
00:01:24,770 --> 00:01:26,610
Like what other way is there.

22
00:01:26,610 --> 00:01:29,670
Well there actually is another way to approach this problem.

23
00:01:29,690 --> 00:01:33,920
One thing what to highlight about this is that we are making some really big assumptions between the

24
00:01:33,920 --> 00:01:38,350
contents of our each e-mail file and the contents of our JavaScript file.

25
00:01:38,390 --> 00:01:42,260
In other words our javascript code is not going to work correctly.

26
00:01:42,380 --> 00:01:49,340
If our e-mail file doesn't have exactly the correct structure in other words this code this entire setup

27
00:01:49,370 --> 00:01:53,360
would not work correctly at all if we did not have that input element.

28
00:01:53,360 --> 00:01:57,940
If we accidentally delete it or move that input element our javascript code would probably not work

29
00:01:57,940 --> 00:01:58,630
correctly.

30
00:01:59,670 --> 00:02:04,020
Likewise if we did not have the correct spelling on this class right here if dropdown content which

31
00:02:04,020 --> 00:02:08,990
is where we want to put all of our anchor elements that represent each individual video if we misspelled

32
00:02:09,000 --> 00:02:12,980
that class name or moved it somewhere else instead of our project that's pretty much it.

33
00:02:12,990 --> 00:02:19,800
Are javascript code is no longer going to work correctly either so in other words we've got a very distinct

34
00:02:19,800 --> 00:02:23,030
coupling between our ace HTML document and our JavaScript file.

35
00:02:23,130 --> 00:02:28,920
The two of them work very closely together and if we change either we might break our entire application

36
00:02:30,600 --> 00:02:33,860
so that in mind let's take a look at another way of approaching this.

37
00:02:33,880 --> 00:02:36,260
This would be option number two.

38
00:02:36,380 --> 00:02:42,700
OK so an option number two we are going to have way less each team l inside of our index not a small

39
00:02:42,700 --> 00:02:46,720
file so to represent our entire autocomplete widget.

40
00:02:46,810 --> 00:02:53,530
Maybe we could get away with only creating one single element a div with a class of autocomplete or

41
00:02:53,530 --> 00:03:00,710
something like that so in this scenario we would create just the beer root of our widget inside of our

42
00:03:00,710 --> 00:03:06,110
e-mail documents and then instead of putting all the HMO inside there inside of our e-mail document

43
00:03:06,380 --> 00:03:11,660
we would instead rely upon our javascript code to go through the process of creating all the HMO those

44
00:03:11,690 --> 00:03:13,560
required for us.

45
00:03:13,580 --> 00:03:18,830
So in other words we would try to maybe select this div right here and then we would run some code to

46
00:03:18,830 --> 00:03:25,090
create an input in there for us we would then handle the input like in other words deal with change

47
00:03:25,090 --> 00:03:31,330
events we would run our search on the API and then we would add in all the different HDL required to

48
00:03:31,330 --> 00:03:39,130
show that dropdown so add in all the HDL or the drop down menu dropdown content and so on so in this

49
00:03:39,130 --> 00:03:45,160
scenario read centrally dumping all the responsibility of producing HDL off to the javascript side of

50
00:03:45,160 --> 00:03:50,960
our application that might sound like a lot more work on our side but in reality it kind of makes life

51
00:03:51,020 --> 00:03:55,460
a little bit easier because no longer are we going to have a strong coupling between our indexed on

52
00:03:55,490 --> 00:03:58,110
e-mail file and the javascript file.

53
00:03:58,130 --> 00:04:03,020
Now all we have to do is make sure that we have got one div inside of here with a class of autocomplete

54
00:04:03,530 --> 00:04:08,360
and then we should be able to just run some code inside our index not just file it will find that div

55
00:04:08,450 --> 00:04:12,200
and setup our entire autocomplete widget inside there.

56
00:04:12,200 --> 00:04:17,930
So no expectations whatsoever about the H SYMBOL that's inside of that div.

57
00:04:17,960 --> 00:04:23,150
This right here is a way more flexible approach because with this approach you and I can much more easily

58
00:04:23,150 --> 00:04:27,140
create reusable widgets that we can reuse between different projects.

59
00:04:27,170 --> 00:04:31,070
It also makes it much more easy to share our code with other developers.

60
00:04:31,070 --> 00:04:35,300
Imagine sharing both these options with some friend of yours who wants to implement the same kind of

61
00:04:35,360 --> 00:04:37,010
autocomplete widgets.

62
00:04:37,010 --> 00:04:40,480
If you were using option number one up here you would have to tell your friend.

63
00:04:40,520 --> 00:04:41,010
OK.

64
00:04:41,060 --> 00:04:43,170
First you're gonna go over to your age HTML document.

65
00:04:43,460 --> 00:04:46,470
You're gonna put together this div and it has to have an input.

66
00:04:46,490 --> 00:04:52,220
Make sure as input and it has to have these two days may have to be nested in this very particular way.

67
00:04:52,220 --> 00:04:55,000
Just imagine trying to communicate that to some other engineer.

68
00:04:55,130 --> 00:04:59,600
You know maybe it's as easy as just copy pasting them some snippet of HDL but at the end of the day

69
00:04:59,960 --> 00:05:06,030
that's definitely a decent amount to communicate over to them however if you were using option number

70
00:05:06,030 --> 00:05:12,240
two you could tell your friends Oh yeah just create this div with a class of autocomplete and then run

71
00:05:12,240 --> 00:05:17,820
this javascript function run like some function called Create autocomplete and boom that's it everything

72
00:05:17,820 --> 00:05:24,300
will be set up for that other engineer automatically so throughout this course we've largely been using

73
00:05:24,330 --> 00:05:29,690
option number one but as we move forward we're going to be moving towards option number two.

74
00:05:29,910 --> 00:05:34,560
We're going to try to limit the amount of coupling between our e-mail document and our JavaScript file.

75
00:05:34,710 --> 00:05:40,140
And again the entire idea here is that it's going to lead to greater reuse of the different widgets

76
00:05:40,140 --> 00:05:41,370
we put together.

77
00:05:41,370 --> 00:05:46,520
And it's also going to lead to less coupling between our different files of our project.

78
00:05:46,540 --> 00:05:46,820
OK.

79
00:05:46,860 --> 00:05:49,930
So now we understand like why we're gonna take this kind of approach.

80
00:05:49,950 --> 00:05:54,270
Obviously it's going to require us to add in a pretty good amount of additional javascript code and

81
00:05:54,270 --> 00:05:57,060
we're going to have to make a couple of changes to our e-mail document.

82
00:05:57,150 --> 00:06:01,890
And I want to kind of set you up and get you to understand why we're about to write all the code how

83
00:06:01,890 --> 00:06:05,220
we're gonna write so quick pause and I'll see you in just a minute.
