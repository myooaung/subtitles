1
00:00:00,180 --> 00:00:06,030
Next up let's see how we can use X years to make multiple change requests just like we did with fetch

2
00:00:06,180 --> 00:00:11,610
where we refactor our code so it's nice and clean but we're still having to repeat a couple of things

3
00:00:11,640 --> 00:00:12,480
over and over.

4
00:00:12,480 --> 00:00:17,190
We start by fetching the first ten planets which is right here where are you right there.

5
00:00:17,190 --> 00:00:18,590
Then we check the status code.

6
00:00:18,660 --> 00:00:25,030
If it's not 200 we trigger the catch callback otherwise we continue on we pass to Jason that returns

7
00:00:25,030 --> 00:00:25,820
a promise.

8
00:00:25,890 --> 00:00:32,310
Then we print the planets afterwards and we had to work with this promised resolve right here to print

9
00:00:32,310 --> 00:00:34,290
the planets so that we could chain on a dot.

10
00:00:34,290 --> 00:00:38,530
Then again so we could fetch more planets and keep the whole chain of promises going.

11
00:00:38,640 --> 00:00:43,490
Each one of these functions here returns a promise to rewrite this with axioms.

12
00:00:43,590 --> 00:00:47,730
It saves us a little bit of code so I still have axioms included.

13
00:00:47,730 --> 00:00:57,560
Change the title here x CEOs change requests we'll start by running an X yos dot get call which returns

14
00:00:57,560 --> 00:01:01,690
a promise we need to put Are you are all in there then our DOT.

15
00:01:01,700 --> 00:01:04,200
Then we don't have to pass.

16
00:01:04,340 --> 00:01:08,420
So all we need to do after that is print out the planets.

17
00:01:08,420 --> 00:01:10,580
So we'll go with reds.

18
00:01:10,580 --> 00:01:12,460
Sure.

19
00:01:12,740 --> 00:01:15,050
And actually if all we want is the data.

20
00:01:15,050 --> 00:01:17,000
I'm just going to do red dot data.

21
00:01:17,000 --> 00:01:24,800
I can use the restructuring right here to grab the data out and we'll consider that log data to make

22
00:01:24,800 --> 00:01:25,670
sure it's showing up

23
00:01:28,630 --> 00:01:30,130
refresh the page.

24
00:01:30,130 --> 00:01:31,210
Awesome.

25
00:01:31,210 --> 00:01:34,570
So now we can print each planet for let planet.

26
00:01:34,570 --> 00:01:35,740
Same thing we've seen before.

27
00:01:35,750 --> 00:01:45,830
Planet of data dot results console dot logged planet dot name or something like that hopefully that

28
00:01:45,830 --> 00:01:46,940
works.

29
00:01:46,940 --> 00:01:47,480
There we go.

30
00:01:47,480 --> 00:01:49,490
We're getting the first ten planets.

31
00:01:49,700 --> 00:01:51,830
Then we have that data Dot.

32
00:01:51,840 --> 00:01:57,620
Next you are well if we look in our data next right there we make a request to that you are.

33
00:01:58,490 --> 00:02:06,410
So it would just be axioms to get and then and here rather than passing in a string you RL that we create

34
00:02:06,740 --> 00:02:15,050
we'll just pass in data dot next which is a you RL And if we want to chain on a dot then out here rather

35
00:02:15,050 --> 00:02:15,880
than right here.

36
00:02:15,890 --> 00:02:17,300
I mean I can do this.

37
00:02:17,300 --> 00:02:21,560
This is totally fine could just copy this entire thing.

38
00:02:21,560 --> 00:02:26,690
I could make a second request this way and let's just make sure that works and I'll print the data out

39
00:02:26,690 --> 00:02:30,050
both times and I'll consider it like each planet name.

40
00:02:30,200 --> 00:02:32,990
Does it work all right.

41
00:02:33,010 --> 00:02:40,160
So our first 10 and our second 10 but as we've seen we can change then by returning a promise.

42
00:02:40,240 --> 00:02:45,850
So I don't have to nest the dot then like I have here I could move this out.

43
00:02:45,850 --> 00:02:54,220
If I return x yo stack Get Data next which itself returns a promise so I can put the dot then like this

44
00:02:54,850 --> 00:02:59,070
which is a little cleaner and simpler refresh.

45
00:02:59,440 --> 00:02:59,910
Same thing.

46
00:03:01,740 --> 00:03:06,170
So that's kind of it if you want to make one request and then another request using Acciona.

47
00:03:06,180 --> 00:03:09,970
We don't have to worry about parsing we don't have to worry about checking the status code.

48
00:03:10,230 --> 00:03:14,220
Otherwise it's pretty much the same as using fetch returns a promise put out.

49
00:03:14,280 --> 00:03:19,170
Then continue the dot then chain as long as we want to make these sequential requests.

50
00:03:19,260 --> 00:03:20,970
So this happens here.

51
00:03:20,970 --> 00:03:22,420
Then this then this.

52
00:03:23,070 --> 00:03:28,030
So the only way we make this request is if the first one was successful and we don't have a dog catch

53
00:03:28,030 --> 00:03:33,980
right now so we could add that in dot catch error.

54
00:03:34,350 --> 00:03:36,260
And what should we do here.

55
00:03:36,360 --> 00:03:39,960
Console dot log error.

56
00:03:40,470 --> 00:03:40,860
Sure.

57
00:03:40,860 --> 00:03:42,630
Something like that.

58
00:03:42,630 --> 00:03:48,750
So if we want to refactor this in the same way that we created this nice chain of promises where we

59
00:03:48,750 --> 00:03:54,540
just call a function each time it's a pass in a function name each time to dot then instead of having

60
00:03:54,540 --> 00:03:57,960
to use these inline anonymous functions we can do that.

61
00:03:58,740 --> 00:04:02,100
I think I would go with what would we call it the same thing.

62
00:04:02,100 --> 00:04:08,520
So fetch next planets and then print planets and then fetch next print planets and so on.

63
00:04:08,520 --> 00:04:17,910
So let's try that we can start with concept fetch next planets equals function will accept a U.R.L.

64
00:04:18,690 --> 00:04:26,010
and it will default to this you are l the first set of planets that we want to fetch just like we did

65
00:04:26,070 --> 00:04:35,760
earlier right here and then all we do is return axioms that get you out.

66
00:04:37,170 --> 00:04:38,440
Okay.

67
00:04:38,710 --> 00:04:44,620
So at this point I should be able to rewrite at least my very first exit stack get as just fetch next

68
00:04:44,620 --> 00:04:50,190
planets and I won't pass anything in we'll use the default initial.

69
00:04:50,230 --> 00:04:53,540
You know just make sure that part works.

70
00:04:53,620 --> 00:04:55,110
We should get the first ones.

71
00:04:55,200 --> 00:04:55,900
Okay.

72
00:04:56,050 --> 00:05:00,790
And it still continues to work because we're not ever calling fetch next planets again and then we can

73
00:05:00,790 --> 00:05:04,810
replace this with fetch next planets as well if we wanted to.

74
00:05:04,930 --> 00:05:09,180
Although we will update this shortly will pass and data dot next.

75
00:05:09,180 --> 00:05:11,770
The same URL that we had before.

76
00:05:11,950 --> 00:05:14,430
Refresh it still works.

77
00:05:14,430 --> 00:05:16,420
We get first 10 the second 10.

78
00:05:17,010 --> 00:05:18,750
Now let's make a print.

79
00:05:18,750 --> 00:05:23,160
Next planets function print planets equals.

80
00:05:23,550 --> 00:05:29,460
And as a parameter the way that this would work ideally is that we could call fetch next planets then

81
00:05:29,820 --> 00:05:31,740
print planets.

82
00:05:31,740 --> 00:05:37,680
Now fetch next planets is just returning axiom stock get of that you are relevant returns the entire

83
00:05:37,680 --> 00:05:41,550
promise and that promise is resolved with the entire response.

84
00:05:41,550 --> 00:05:47,640
As we've seen and we're extracting the data so why don't we do the same thing D structured data here

85
00:05:48,300 --> 00:05:55,230
and then we can move our console that log can move all of our code right there and then print the name

86
00:05:55,230 --> 00:05:59,970
out of each planet in data dot results and then we return fetch.

87
00:05:59,970 --> 00:06:00,890
Next planets again.

88
00:06:01,470 --> 00:06:12,670
So now I should be able to rewrite this then print planets then fetch next planets then print planets.

89
00:06:12,800 --> 00:06:17,450
There is one thing we have to pay attention to in order for this to work the way we've written it which

90
00:06:17,450 --> 00:06:23,050
is that we need to manually resolve our promise return a resolved promise just like we did here.

91
00:06:23,210 --> 00:06:30,380
Back when we did a similar refactor with fetch we returned promised resolve data next which then calls

92
00:06:30,410 --> 00:06:33,130
the dot then that is the ensuing dot.

93
00:06:33,140 --> 00:06:40,220
Then we'll do the same thing promised dot resolve and then we'll just pass in data dot next whatever

94
00:06:40,220 --> 00:06:45,510
this value is will be used and passed into the dot then callback.

95
00:06:45,530 --> 00:06:49,170
So if this is print planets we'll print out all the planets.

96
00:06:49,280 --> 00:06:56,720
Then we return a resolved promise with the value of data dot next which is a you are well then that

97
00:06:56,720 --> 00:07:03,200
is passed into fetch next planets because it's the next dot then callback fetch next planets is expecting

98
00:07:03,200 --> 00:07:06,050
a U or L to be passed in and it is.

99
00:07:06,050 --> 00:07:07,150
So we don't use a default.

100
00:07:07,160 --> 00:07:07,910
Now we would use that.

101
00:07:07,910 --> 00:07:09,980
Next you around make sure it works.

102
00:07:09,980 --> 00:07:11,090
And there we go.

103
00:07:11,270 --> 00:07:13,630
Our first 10 and our second 10.

104
00:07:14,150 --> 00:07:17,880
So we could continue to fetch and print as many as we wanted.

105
00:07:17,880 --> 00:07:24,270
Do one more round so I'm printing I should fetch and then print one more time.

106
00:07:24,270 --> 00:07:26,490
You could also move this.

107
00:07:26,490 --> 00:07:32,520
Each pair into its own function called fetch in print and then that would return a promise and you could

108
00:07:32,520 --> 00:07:36,260
chain multiple fetch and prints together but this is pretty clean.

109
00:07:36,300 --> 00:07:38,440
And if we compare it to what we had before.

110
00:07:38,670 --> 00:07:44,940
The only difference is that we had to check for a status code and pass but with Xs we don't.

111
00:07:44,940 --> 00:07:48,700
So it's just slightly cleaner slightly quicker and easier to use.

112
00:07:48,750 --> 00:07:53,040
We don't have to worry about the fact that we get a stream back when we're working with fetch and we

113
00:07:53,040 --> 00:07:58,100
have to pass to Jason and that itself takes time it's a synchronous it returns a promise.

114
00:07:58,200 --> 00:08:02,280
We just get the data back when it's ready and it's pre passed for us.

115
00:08:02,280 --> 00:08:04,760
So that's a brief introduction to axioms.

116
00:08:04,830 --> 00:08:09,960
You will definitely get a lot more experience with it throughout the project part of this course.

117
00:08:09,960 --> 00:08:14,940
We use expos in a couple of projects to make requests both on the client and server side.
