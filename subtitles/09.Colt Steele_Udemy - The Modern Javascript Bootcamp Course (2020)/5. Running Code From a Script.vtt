WEBVTT
1
00:00:00.210 --> 00:00:06.300
We've got a quick but super important detour away from logic and conditionals and comparisons for just

2
00:00:06.300 --> 00:00:07.170
a moment.

3
00:00:07.200 --> 00:00:10.740
We need to talk about how we are going to run our code from here on out.

4
00:00:10.770 --> 00:00:16.920
So far we've been playing around in the console with little one liners like one plus two or four is

5
00:00:16.920 --> 00:00:18.890
less than or equal to eight.

6
00:00:18.900 --> 00:00:23.910
It's nice we can get an answer evaluated immediately and we see the result visually.

7
00:00:23.910 --> 00:00:28.880
We are not writing an entire script with a bunch of code and executing it when we're ready.

8
00:00:28.920 --> 00:00:31.190
We're typing something immediately.

9
00:00:31.230 --> 00:00:38.090
This is actually called a ripple read evaluate print loop that's what the javascript console is here.

10
00:00:38.160 --> 00:00:44.610
It reads in whatever you type it evaluates it it prints it and it loops meaning that I can do it continuously.

11
00:00:44.610 --> 00:00:50.990
If I hit enter right now this is not valid javascript so it throws an error but it reads in that code

12
00:00:51.060 --> 00:00:52.120
thinks this is code.

13
00:00:52.140 --> 00:00:56.130
It realizes it's not when it evaluates it or it's not valid code.

14
00:00:56.130 --> 00:00:59.400
It prints an error and then it loops so I can do something else.

15
00:01:00.480 --> 00:01:05.370
So that's great for playing around for testing things out but it's not so great for creating larger

16
00:01:05.370 --> 00:01:10.470
scripts and larger applications where we actually want to have access to our code after the fact.

17
00:01:10.560 --> 00:01:11.600
This code all goes away.

18
00:01:11.610 --> 00:01:17.700
If I refresh the page it's gone but also it's not that easy to write multiple lines of code and create

19
00:01:17.700 --> 00:01:19.960
larger scripts in the console.

20
00:01:20.040 --> 00:01:22.830
So we're going to be writing our code in JavaScript files.

21
00:01:22.860 --> 00:01:27.630
Most of the time from here on out we'll try new things out we'll play around with new features in the

22
00:01:27.630 --> 00:01:32.640
console for a couple minutes but most of what we'll do will be in a javascript file.

23
00:01:32.910 --> 00:01:38.340
So we have a text editor I introduced this early on in the course I'm using V.S. code.

24
00:01:38.340 --> 00:01:40.400
You can use any text editor you want.

25
00:01:40.440 --> 00:01:46.710
You just need to make a dot J.S. file and unfortunately we can't simply open a javascript file in the

26
00:01:46.710 --> 00:01:48.160
browser to run it.

27
00:01:48.180 --> 00:01:55.150
We have to open an HMO file which has a script or it includes our JavaScript file.

28
00:01:55.230 --> 00:01:58.500
The browser doesn't know how to handle just a plain JavaScript file.

29
00:01:58.620 --> 00:02:02.930
It knows how to handle an HMO file that includes a javascript file.

30
00:02:03.330 --> 00:02:04.590
So there's two steps.

31
00:02:04.680 --> 00:02:05.910
Let's go ahead and try it out.

32
00:02:06.000 --> 00:02:11.730
Over in V.S. code I'm going to make a new file I'm working in a folder called code.

33
00:02:11.730 --> 00:02:18.840
I'll make a new file you can either right click new file he can go file new file or use a shortcut which

34
00:02:18.840 --> 00:02:20.860
is what I usually do on a Mac.

35
00:02:20.850 --> 00:02:28.530
Command n and I'll call this file appetite J S or script J Yes it does not matter as long as you can

36
00:02:28.530 --> 00:02:29.340
reference it.

37
00:02:29.340 --> 00:02:32.310
So I'll go with script actually and change your mind.

38
00:02:32.340 --> 00:02:37.230
I like app update J.S. and we'll put some code in here.

39
00:02:37.410 --> 00:02:39.500
We saw this really early on in the course.

40
00:02:39.510 --> 00:02:44.310
I'm just going to add an alert that says it's working.

41
00:02:44.310 --> 00:02:50.570
So if we get it working correctly we should see this pop up in the browser so that was the first step.

42
00:02:50.570 --> 00:02:55.790
The next step is to create an HMO file and include a script.

43
00:02:55.910 --> 00:02:57.530
So I'm going to go back to V.S. code.

44
00:02:57.590 --> 00:02:58.880
I'll make a new file.

45
00:02:59.060 --> 00:03:02.970
Command n and I'll call this one something that HMO.

46
00:03:03.050 --> 00:03:07.220
A pretty standard generic name is index that HMO you can call it.

47
00:03:07.220 --> 00:03:08.870
Code that aged him out Web site.

48
00:03:08.870 --> 00:03:12.330
It doesn't matter as long as it ends in dot HMO.

49
00:03:12.530 --> 00:03:14.700
And I'm going to put them in the same folder.

50
00:03:14.750 --> 00:03:19.970
It just makes it easier when I'm including this javascript file so I'm going to put that there.

51
00:03:20.120 --> 00:03:22.850
And if you're not super familiar with HCM Al don't fret.

52
00:03:22.940 --> 00:03:25.640
You don't have to type this entire structure from scratch.

53
00:03:25.790 --> 00:03:33.110
If you're using V.S. code or a similar Ed and V.S. code I can type exclamation point tab and it fills

54
00:03:33.140 --> 00:03:34.790
all of this stuff out for me.

55
00:03:34.820 --> 00:03:39.130
I get my standard boilerplate HDMI all essentially the template.

56
00:03:39.230 --> 00:03:43.090
The thing we use every time or the code we write every time in an HMO file.

57
00:03:43.310 --> 00:03:49.450
I'll give this a title like my first J s script and then I'll save this.

58
00:03:49.520 --> 00:03:51.890
Right now we're not including the script at all.

59
00:03:51.890 --> 00:03:54.490
So we need to include a script tag.

60
00:03:55.010 --> 00:04:01.850
So I would just use autocomplete here type scripts are probably just SC will give it to you and then

61
00:04:01.850 --> 00:04:07.730
we need to add a source attribute which corresponds to the path to our file.

62
00:04:07.790 --> 00:04:10.670
So it's called app dot J.S. they're in the same folder.

63
00:04:10.820 --> 00:04:13.270
So all I need to type here is app dot.

64
00:04:13.270 --> 00:04:14.760
J Yes.

65
00:04:14.990 --> 00:04:18.740
Later on we'll talk about the placement of this script for now.

66
00:04:18.740 --> 00:04:22.350
You can put it anywhere in this age HTML document can go here.

67
00:04:22.580 --> 00:04:24.520
You can go at the bottom of the body.

68
00:04:24.590 --> 00:04:28.900
It doesn't matter for now because our script does not depend on any NEHTA.

69
00:04:28.910 --> 00:04:30.920
We're not interacting with HDMI.

70
00:04:30.920 --> 00:04:35.500
We're not creating elements or deleting elements or having events or anything like that.

71
00:04:35.630 --> 00:04:39.800
We're just simply printing some content so you can put it wherever you want.

72
00:04:39.830 --> 00:04:45.800
If you're familiar with JavaScript already in HCM all the problems that can arise from including a script

73
00:04:45.800 --> 00:04:51.940
too soon then go ahead and put it down at the bottom but it doesn't matter for now it will later all

74
00:04:51.940 --> 00:04:52.260
right.

75
00:04:52.370 --> 00:04:54.660
So we have our script included hopefully.

76
00:04:54.830 --> 00:05:01.430
Just make sure your name is matching whatever you name the file we'll save this and then go to my browser

77
00:05:01.910 --> 00:05:03.890
while first I'm going to open it in the browser.

78
00:05:04.100 --> 00:05:05.770
So there's multiple ways of doing this.

79
00:05:05.780 --> 00:05:08.120
You go to your hcm l file you right click.

80
00:05:08.120 --> 00:05:13.780
You can click open with you can just double click and it opens up in your default browser.

81
00:05:13.820 --> 00:05:18.470
Which for me is chrome and we can see that it's working because my alert came through.

82
00:05:18.560 --> 00:05:21.050
It says it's working and that's it.

83
00:05:21.050 --> 00:05:22.660
We don't see any content on the page.

84
00:05:22.670 --> 00:05:24.370
We're not really worrying about that.

85
00:05:24.380 --> 00:05:30.230
So for most of this early part of the course we'll just be working in the console of our file that we're

86
00:05:30.230 --> 00:05:31.990
opening up the HCM Al file.

87
00:05:32.090 --> 00:05:37.670
So we've now successfully included a script it's working and this is a workflow we'll follow a lot.

88
00:05:37.670 --> 00:05:41.750
If you're not very comfortable with it yet it takes some practice but it's just one of those things

89
00:05:41.750 --> 00:05:42.860
you do often.

90
00:05:42.890 --> 00:05:47.420
You could even make a template a folder that you could just duplicate anytime you wanted to make a new

91
00:05:47.420 --> 00:05:48.390
script.

92
00:05:48.410 --> 00:05:55.790
You could also do this where you make a new script here or call this one app to dot us and this one

93
00:05:55.790 --> 00:05:56.880
will say alert.

94
00:05:56.930 --> 00:06:01.360
I am a different script we'll save.

95
00:06:01.520 --> 00:06:10.230
And then in my index I can just include app 2 instead I'll refresh my page now I get script 2.

96
00:06:10.280 --> 00:06:15.680
I am a different script or app too so you don't have to make a new age team out and JavaScript file

97
00:06:15.770 --> 00:06:17.660
every single time you want a new script.

98
00:06:17.660 --> 00:06:23.720
You can just swap out which script you're including So then this brings me to one last important piece

99
00:06:24.320 --> 00:06:24.980
in the console.

100
00:06:24.980 --> 00:06:29.990
We've been typing things like let's go back to app J.S. we've been typing things like this for plus

101
00:06:29.990 --> 00:06:35.300
4 or 3 equals equals 3 and we see an answer right away.

102
00:06:35.300 --> 00:06:41.500
It's evaluated and printed back but in regular JavaScript in a script like we have here.

103
00:06:41.690 --> 00:06:44.870
This won't show up this won't print anything.

104
00:06:44.870 --> 00:06:50.310
It will be evaluated and JavaScript knows what the answer is and what the result is.

105
00:06:50.420 --> 00:06:53.030
But it doesn't show it to us it doesn't print it out.

106
00:06:53.090 --> 00:06:58.390
So if we want something to be explicitly printed out we have to use a method another method.

107
00:06:58.400 --> 00:06:59.450
It's not a string method.

108
00:06:59.460 --> 00:07:00.770
It's not a number method.

109
00:07:00.770 --> 00:07:02.870
It has to do with something called the console.

110
00:07:02.870 --> 00:07:08.840
The method is called console dot org and all that it does is it prints something to the console.

111
00:07:08.840 --> 00:07:11.170
So as I mentioned when we write code like this.

112
00:07:11.240 --> 00:07:16.340
If I refresh my page I make sure I'm including Hap dodges J.S. not app 2.

113
00:07:16.460 --> 00:07:18.680
If I refresh we don't see anything.

114
00:07:18.710 --> 00:07:24.410
If I open up the javascript console you can see nothing is printed out.

115
00:07:24.460 --> 00:07:30.130
I can also move this over actually since we don't really care about this HCM Al page we just want the

116
00:07:30.130 --> 00:07:31.090
Javascript.

117
00:07:31.090 --> 00:07:36.820
I think what I would do instead is get rid of this right here and I'll just display the console next

118
00:07:36.820 --> 00:07:38.570
to my editor.

119
00:07:38.770 --> 00:07:44.440
So there is an HD humor page open I'm just viewing the console and I put them together in one window.

120
00:07:44.440 --> 00:07:47.110
But as you can see nothing is showing up I refresh the page.

121
00:07:47.110 --> 00:07:53.710
We don't see anything but if I instead use console dot log console dot log and then we pass in three

122
00:07:53.710 --> 00:07:55.640
plus four whatever we had before.

123
00:07:55.660 --> 00:07:58.640
I'll save and refresh the page.

124
00:07:58.750 --> 00:08:01.140
I now get seven Hallelujah.

125
00:08:01.180 --> 00:08:02.380
It's working.

126
00:08:02.380 --> 00:08:08.770
So this is the way that we actually view values at least until we talk about HMO and displaying content

127
00:08:08.800 --> 00:08:09.880
on a page.

128
00:08:09.880 --> 00:08:15.400
For now we're just showing things in the console so console dot log is a special really commonly used

129
00:08:15.400 --> 00:08:20.500
method often used for debugging and trying to understand what's going wrong somewhere or when you're

130
00:08:20.500 --> 00:08:24.400
starting out just to print stuff so you can see while we're here.

131
00:08:24.400 --> 00:08:28.960
I'll just show you a couple of flavors I'll just do one more flavor of console dot log.

132
00:08:28.960 --> 00:08:35.560
Instead of logging something there's another method called console dot error and we can pass in some

133
00:08:35.560 --> 00:08:40.650
content it will be printed but rather than printed nicely like this I'll refresh the page.

134
00:08:40.780 --> 00:08:48.100
It shows up like a javascript error so it's red we can exit away maybe we can't usually.

135
00:08:48.560 --> 00:08:52.360
I think you usually can anyway just shows up differently.

136
00:08:52.360 --> 00:08:58.330
Console again refers to the javascript console log is going to print something out it will log it to

137
00:08:58.330 --> 00:08:58.830
you.

138
00:08:58.930 --> 00:09:04.930
And the last thing that we can pass in multiple things to console that log we could do three plus four

139
00:09:04.930 --> 00:09:05.450
karma.

140
00:09:05.980 --> 00:09:08.490
Hello karma.

141
00:09:08.740 --> 00:09:12.090
How about true and save.

142
00:09:12.410 --> 00:09:14.950
I'll refresh my page on the left.

143
00:09:14.950 --> 00:09:19.690
And let me make this a little clearer what it does is it prints them all to the console.

144
00:09:19.690 --> 00:09:21.830
It separates them with a space.

145
00:09:22.150 --> 00:09:26.920
So you could have as many things as you want past into constant log and we'll print them all out just

146
00:09:26.920 --> 00:09:28.880
separated by spaces.

147
00:09:29.010 --> 00:09:29.250
Okay.

148
00:09:29.260 --> 00:09:34.480
So that's the detour we're going gonna go back to logic and conditionals and making decisions in our

149
00:09:34.480 --> 00:09:35.010
code.

150
00:09:35.080 --> 00:09:37.900
Now that we have a place to actually write our code.

151
00:09:38.230 --> 00:09:44.410
So the workflow make a file name it something DHHS included using a script tag in each team I'll file

152
00:09:44.800 --> 00:09:49.810
double click that each time I'll file to open it in the browser and then in the browser we'll be working

153
00:09:49.810 --> 00:09:50.710
on the console for now.

154
00:09:50.710 --> 00:09:57.370
So just open the console again and we will be using console that log to display values.

155
00:09:57.370 --> 00:09:57.690
All right.
