WEBVTT
1
00:00:00.180 --> 00:00:05.340
When we first saw conditional statements we saw that we could nest them inside of one another if and

2
00:00:05.340 --> 00:00:10.890
then inside that if we could have another if we can do the same thing with for loops we can nest loops

3
00:00:11.340 --> 00:00:14.130
and I'll show you some situations where this makes sense.

4
00:00:14.160 --> 00:00:16.670
But first we're going to try and walk through how it works.

5
00:00:16.740 --> 00:00:20.600
Sometimes it can be a little bit confusing or difficult to wrap your head around.

6
00:00:20.940 --> 00:00:23.940
So we're gonna start with a single loop.

7
00:00:23.940 --> 00:00:30.070
Let's just go from one to ten but I equal one I less than or equal to 10.

8
00:00:30.210 --> 00:00:38.730
And then I plus plus and I'm going to console that log the string outer loop and then also I and we

9
00:00:38.730 --> 00:00:42.070
get outer loop one down to outer loop 10.

10
00:00:42.090 --> 00:00:44.830
And now I'm going to add in a second inner loop.

11
00:00:44.850 --> 00:00:49.640
Now this loop is going to go the other direction from 10 down to 1.

12
00:00:50.280 --> 00:00:54.430
So we'll start with left and then what should we name the variable.

13
00:00:54.450 --> 00:00:59.700
This is a really important topic and we'll actually come back to it in the next section in more detail.

14
00:00:59.700 --> 00:01:05.550
But for now you should know you can get away with naming your variable eye again which seems like it

15
00:01:05.550 --> 00:01:06.590
shouldn't work.

16
00:01:07.080 --> 00:01:13.990
If we type in our console let equal zero and then I tried to make another eye with a different value.

17
00:01:14.340 --> 00:01:19.620
I get an error says I has already been declared but in this case these eyes.

18
00:01:19.620 --> 00:01:23.390
This let I and this let I have a different scope.

19
00:01:23.460 --> 00:01:24.790
We haven't talked about scope.

20
00:01:24.960 --> 00:01:27.030
That's what we'll talk about in the next section.

21
00:01:27.030 --> 00:01:33.180
So for now we're not going to go with AI and in general it doesn't make sense it's a bad idea to use

22
00:01:33.270 --> 00:01:35.870
the same name in a nested loop.

23
00:01:35.880 --> 00:01:42.570
It's confusing to look at and if you needed access to both these variables inside this inner loop you

24
00:01:42.570 --> 00:01:45.420
wouldn't have it if you named them the same thing.

25
00:01:45.420 --> 00:01:48.600
There's no way to reference both of them and at least not an easy way.

26
00:01:49.050 --> 00:01:50.620
So that's not what we're going to do.

27
00:01:50.700 --> 00:01:56.210
We're gonna go with J which is pretty standard if you use AI then move on to J.

28
00:01:56.210 --> 00:02:02.120
For nested loop and then if there's a loop inside of J use k and usually you shouldn't have more or

29
00:02:02.130 --> 00:02:04.650
you should try and avoid more nesting.

30
00:02:04.650 --> 00:02:07.640
I try and just do two loops whenever possible at most.

31
00:02:08.820 --> 00:02:13.920
OK so we'll go from 10 and we'll keep going.

32
00:02:13.920 --> 00:02:22.730
Wild J is greater than or equal to zero and we'll subtract about two each time instead of one.

33
00:02:22.890 --> 00:02:25.260
So our outer loop is going to go from one to 10.

34
00:02:25.260 --> 00:02:33.570
The Inner Loop will go from 10 to zero by subtracting twos and in here I'll control that log inner loop

35
00:02:34.650 --> 00:02:37.010
and then J.

36
00:02:37.090 --> 00:02:38.270
Okay let's see what we get.

37
00:02:40.450 --> 00:02:46.820
Okay so let's take a look at how this is working but I'm going to do to make it easier to see the difference.

38
00:02:46.830 --> 00:02:52.530
I'm going to indent this string I'm just gonna add some spaces on the inner loop and that way we get

39
00:02:52.530 --> 00:02:54.090
some differentiation.

40
00:02:54.930 --> 00:02:58.500
So if we look at the outer loop only we're going from one to 10.

41
00:02:58.500 --> 00:03:00.930
Here is the first time through that outer loop.

42
00:03:01.170 --> 00:03:07.080
Then the second time third time all the way down to here but every single time this outer loop runs

43
00:03:07.260 --> 00:03:12.590
just a single iteration the inner loop completes its full cycle.

44
00:03:12.750 --> 00:03:19.790
So that's why we end up with 10 8 6 4 2 0 and then we hit the end of this loop here.

45
00:03:19.860 --> 00:03:22.890
So that means we're at the end of this first cycle.

46
00:03:22.890 --> 00:03:23.850
Then it starts over.

47
00:03:23.850 --> 00:03:27.180
I now goes up to 2 and we cancel that log.

48
00:03:27.180 --> 00:03:33.870
Outer Loop then we hit this loop and it has to finish executing so it does its whole thing 10 8 6 4

49
00:03:33.870 --> 00:03:37.710
2 0 and then that's the end of this outer loop.

50
00:03:37.710 --> 00:03:39.510
We start over.

51
00:03:39.510 --> 00:03:41.090
So it takes a long time.

52
00:03:41.160 --> 00:03:41.670
It doesn't.

53
00:03:41.670 --> 00:03:47.640
It's not actually a long time it's extremely extremely quick but it takes a long time relatively for

54
00:03:47.640 --> 00:03:49.390
the outer loop to run again.

55
00:03:49.470 --> 00:03:55.160
This inner loop completes its full cycle every single time the outer loop just iterate.

56
00:03:55.170 --> 00:04:03.330
Once you can see overall we have a lot of iterations and the relationship here is if we have X iterations

57
00:04:03.450 --> 00:04:09.540
on an outer loop and Y inner iterations on the inner loop we will be running X Y times or we'll have

58
00:04:09.810 --> 00:04:13.880
basically multiplied the number of times this runs by the number of times this runs.

59
00:04:13.890 --> 00:04:16.340
And that's how many total iterations you have.

60
00:04:16.350 --> 00:04:16.800
All right.

61
00:04:16.920 --> 00:04:19.260
So this example is kind of pointless.

62
00:04:19.260 --> 00:04:24.720
If we were just trying to generate numbers however many numbers this is if we wanted to generate these

63
00:04:24.720 --> 00:04:26.810
exact numbers fine.

64
00:04:26.820 --> 00:04:28.160
This is a good way to do it.

65
00:04:28.160 --> 00:04:33.430
If for some reason we need 1 and then 10 8 6 4 2 0 that's fine.

66
00:04:33.570 --> 00:04:39.240
But this isn't really a great showcase of why you might want nested iteration or nested for loops.

67
00:04:39.240 --> 00:04:45.790
So the first example I'll show you involves that game 2048 from a couple of videos ago.

68
00:04:45.800 --> 00:04:51.510
Here is a game board after I've lost the game I just randomly pressed arrow keys to try and finish it

69
00:04:52.080 --> 00:04:54.300
and it is a four by four grid.

70
00:04:54.300 --> 00:05:02.850
Each cell has a corresponding value and then we'll calculate a score by summing all of these cells together.

71
00:05:02.850 --> 00:05:09.240
And I structured my own version of this that the data at least in an array I'm calling game board and

72
00:05:09.240 --> 00:05:16.110
it's based exactly off of this score or this board that I created by losing the game for 30 to eight

73
00:05:16.140 --> 00:05:21.360
and four is the first row 4 3 2 8 and 4 and there are 4 rows.

74
00:05:21.360 --> 00:05:29.070
So to sum all of the values here I need to loop twice the first loop to move this down so we can grip

75
00:05:29.070 --> 00:05:29.830
it together.

76
00:05:29.970 --> 00:05:33.050
The first loop is just going to iterate over this outer array.

77
00:05:33.690 --> 00:05:37.380
So one two three four elements.

78
00:05:37.440 --> 00:05:45.770
So for let I equals zero I is less than game board doubt length high.

79
00:05:46.020 --> 00:05:47.710
Plus plus.

80
00:05:47.760 --> 00:05:52.620
So this is going to iterate through game board and it's at least going to give me a number that I can

81
00:05:52.620 --> 00:06:02.760
use to access game board of I and I could just console that log that but I'll just be printing out each

82
00:06:02.820 --> 00:06:05.420
individual row via refresh the page.

83
00:06:05.460 --> 00:06:06.370
There we go.

84
00:06:06.510 --> 00:06:07.980
So I can't just sum this.

85
00:06:08.010 --> 00:06:12.740
I can't say a total variable plus equals this entire array.

86
00:06:12.780 --> 00:06:19.560
I need to then loop through each one of these summaries and for each value add it to some variable.

87
00:06:19.770 --> 00:06:22.840
So the question is how do I loop through this array here.

88
00:06:22.860 --> 00:06:30.120
What I would probably do is make a new variable I'll call it row which will equal game board of IE.

89
00:06:30.300 --> 00:06:36.270
Because this outer loop is just giving us an entire row at a time when we access using IE we get 1 row

90
00:06:36.990 --> 00:06:39.990
and then I'm going to loop over row.

91
00:06:40.230 --> 00:06:43.530
So depending on how many items are here it's always 4.

92
00:06:43.650 --> 00:06:48.380
I'm not going to hardcoded because we could have a 5 by 5 game board or an 8 by 8 game board.

93
00:06:48.420 --> 00:06:52.670
I'm going to use the length of the row so to loop over row.

94
00:06:52.920 --> 00:06:54.910
All I need to do is 4.

95
00:06:54.930 --> 00:06:57.930
Let let's go with j equals zero.

96
00:06:57.930 --> 00:07:03.300
J is less than row dot length J plus plus.

97
00:07:03.300 --> 00:07:09.630
And why don't we start by constant logging row of high and up here.

98
00:07:09.630 --> 00:07:16.650
I'll cancel that log the row so you can just see the relationship refresh the page and it's hard to

99
00:07:16.650 --> 00:07:18.000
see what's going on here.

100
00:07:18.010 --> 00:07:20.190
Well I actually made a mistake here.

101
00:07:20.260 --> 00:07:21.380
A pretty common one.

102
00:07:21.630 --> 00:07:25.020
I use the variable i instead of this loop.

103
00:07:25.080 --> 00:07:30.510
There's nothing wrong with it in a technical sense javascript doesn't care but as far as my logic is

104
00:07:30.510 --> 00:07:34.110
concerned the variable i want is J.

105
00:07:34.110 --> 00:07:37.740
J is going to be referring to each element in a row.

106
00:07:38.130 --> 00:07:41.320
I is referring to the actual Roe.

107
00:07:41.600 --> 00:07:50.690
So in the first iteration I is zero and I'm then using that to access zero item zero item zero item

108
00:07:50.690 --> 00:07:51.040
zero.

109
00:07:51.050 --> 00:07:53.210
Which is why I get all of these forms printed out.

110
00:07:53.330 --> 00:07:55.910
So I want to access J because J.

111
00:07:55.910 --> 00:07:58.970
We'll be changing each time.

112
00:07:58.970 --> 00:08:00.680
And here's what we get.

113
00:08:00.680 --> 00:08:02.680
So our outer loop starts.

114
00:08:02.900 --> 00:08:07.820
We get this row and then we loop over this for thirty to eight and four.

115
00:08:07.820 --> 00:08:08.900
That's each value.

116
00:08:08.900 --> 00:08:11.350
The Inner Loop finishes there's nothing afterwards.

117
00:08:11.360 --> 00:08:12.640
So the outer loop is done.

118
00:08:12.740 --> 00:08:16.040
Not iteration and we start the next cycle.

119
00:08:16.040 --> 00:08:23.010
So now I is set to 1 which gives us this index and we loop over this row.

120
00:08:23.120 --> 00:08:25.540
So why don't we sum it all together now.

121
00:08:25.540 --> 00:08:31.940
I'll get rid of these constant logs and do that I need a total variable but total lets go with total

122
00:08:31.940 --> 00:08:44.650
score started at zero and then in here I'm simply going to total score plus equals and then row of J.

123
00:08:44.840 --> 00:08:52.290
Remember row is this entire element each time through and then J Give me a number like zero.

124
00:08:52.310 --> 00:08:53.780
So I'm going to take row of zero.

125
00:08:53.840 --> 00:08:59.730
Add that to total score row of one row of two growth three add those eleven and then loop starts over.

126
00:08:59.810 --> 00:09:04.760
And now we're working on this array and then I do row of 0 and keep adding them in.

127
00:09:04.790 --> 00:09:05.510
Let's see what we get.

128
00:09:05.510 --> 00:09:10.540
If I refresh the page I didn't print out total score but you can see it over here if I type it.

129
00:09:10.550 --> 00:09:11.940
Two hundred and thirty.

130
00:09:12.140 --> 00:09:18.230
So this is still kind of a silly scenario but this is a very real example of one you would use nested

131
00:09:18.230 --> 00:09:18.920
loops.

132
00:09:18.920 --> 00:09:25.280
We need to have at least two loops to access each element because we have two arrays or nested and if

133
00:09:25.280 --> 00:09:28.940
we had further separated we would need another loop.

134
00:09:28.940 --> 00:09:29.180
All right.

135
00:09:29.210 --> 00:09:30.500
So that's it for now.

136
00:09:30.620 --> 00:09:35.780
Just take away the fact that we can have nested loops each iteration through the outer loop.

137
00:09:35.780 --> 00:09:40.790
We have a complete cycle of the inner loop before the outer loop increments or moves on to its next

138
00:09:40.790 --> 00:09:41.300
iteration.
