WEBVTT
1
00:00:00.300 --> 00:00:00.620
All right.

2
00:00:00.750 --> 00:00:03.090
So our current promise we'll get you a dog.

3
00:00:03.090 --> 00:00:06.820
Promise is either resolved or rejected immediately.

4
00:00:06.810 --> 00:00:09.380
There's nothing that takes time in this promise.

5
00:00:09.390 --> 00:00:11.320
There's no real reason to use a promise.

6
00:00:11.370 --> 00:00:17.220
We could just write a simple if else and just generate a random number on its own and print out code

7
00:00:17.640 --> 00:00:20.390
depending on if random is less than five.

8
00:00:20.430 --> 00:00:21.120
Do this thing.

9
00:00:21.120 --> 00:00:23.820
Otherwise console that log no dog.

10
00:00:23.820 --> 00:00:26.230
Pretty simple with what we've seen so far.

11
00:00:26.400 --> 00:00:30.380
But now let's introduce some some delay so it takes longer.

12
00:00:30.420 --> 00:00:36.450
What we'll do is just use a set time out to simulate the number of years it took my dad to finally reject

13
00:00:36.450 --> 00:00:38.690
his promise of getting me a dog.

14
00:00:39.060 --> 00:00:40.800
So I will keep this here.

15
00:00:40.830 --> 00:00:42.430
So we have a record of it.

16
00:00:42.470 --> 00:00:43.280
I'll duplicate it.

17
00:00:43.770 --> 00:00:50.670
And then in here instead of just immediately resolving or rejecting let's do a set timeout and are set

18
00:00:50.670 --> 00:00:53.170
time out we'll have a function.

19
00:00:53.730 --> 00:01:01.710
And the delay will be five seconds and then in that function the callback I'll move my logic to pick

20
00:01:01.710 --> 00:01:04.860
a random number and then either resolve or reject.

21
00:01:05.370 --> 00:01:09.990
So now this promise takes five seconds before it's resolved or rejected.

22
00:01:10.170 --> 00:01:11.860
Otherwise those first five seconds.

23
00:01:11.880 --> 00:01:14.670
It's pending which we saw earlier.

24
00:01:14.730 --> 00:01:20.160
So the DOT then code or the dot catch code whatever one of these runs depending on if it was resolved

25
00:01:20.160 --> 00:01:23.580
or rejected it won't run for five seconds.

26
00:01:23.760 --> 00:01:24.450
So let's try it out.

27
00:01:25.600 --> 00:01:26.610
I refresh.

28
00:01:26.760 --> 00:01:29.580
It takes five seconds to you do.

29
00:01:29.580 --> 00:01:30.780
Come on.

30
00:01:30.780 --> 00:01:31.380
There we go.

31
00:01:31.380 --> 00:01:32.440
No dog.

32
00:01:32.460 --> 00:01:36.060
If I refresh and I quickly take a look at we'll get you a dog.

33
00:01:36.060 --> 00:01:38.730
It starts as pending for these five seconds.

34
00:01:38.730 --> 00:01:39.660
It's pending.

35
00:01:39.750 --> 00:01:42.840
Now it's been rejected one more time.

36
00:01:42.840 --> 00:01:43.940
It starts as pending.

37
00:01:43.950 --> 00:01:46.870
Hopefully this time it's resolved.

38
00:01:46.920 --> 00:01:47.260
No.

39
00:01:47.440 --> 00:01:47.690
OK.

40
00:01:47.700 --> 00:01:48.180
One more time.

41
00:01:48.180 --> 00:01:49.860
Come on come on.

42
00:01:49.890 --> 00:01:50.460
Resolve it.

43
00:01:50.460 --> 00:01:57.540
Get me a dog seriously three in a row.

44
00:01:57.560 --> 00:02:05.720
How about now spending what the heck just resolve the joy.

45
00:02:05.770 --> 00:02:14.120
Oh my goodness how many of these are going to be in a row just resolve please OK this is horrendous

46
00:02:14.120 --> 00:02:14.480
luck

47
00:02:17.980 --> 00:02:19.180
Oh my

48
00:02:21.650 --> 00:02:30.020
pending Oh finally I just hit the absolute jackpot of rejected promises.

49
00:02:30.040 --> 00:02:32.910
How many was that like eight nine in a row.

50
00:02:32.910 --> 00:02:34.940
Oh what are the odds when I'm recording.

51
00:02:35.170 --> 00:02:36.260
But we finally get it.

52
00:02:36.340 --> 00:02:39.160
It starts is pending and then it's resolved.

53
00:02:39.220 --> 00:02:39.600
All right.

54
00:02:39.640 --> 00:02:44.640
So this is our first example of a promise it takes some time takes five seconds.

55
00:02:44.650 --> 00:02:49.900
It's kind of simulating making a request and having to wait for that request to come back.

56
00:02:50.020 --> 00:02:52.160
It's eventually resolved or rejected.

57
00:02:52.210 --> 00:02:52.560
Yes.

58
00:02:52.570 --> 00:02:55.430
We're just hard coding a five second delay for no reason.

59
00:02:55.430 --> 00:02:59.110
But imagine that something has to happen over those five seconds.

60
00:02:59.110 --> 00:03:03.600
Like we're animating something and we want to wait until the animation finishes which will return to

61
00:03:03.610 --> 00:03:07.410
that was the original impetus for promises in this section.

62
00:03:07.570 --> 00:03:12.670
We were doing a whole bunch of nested callbacks and it was hideous when we were moving that button across

63
00:03:12.670 --> 00:03:13.980
the screen.

64
00:03:14.050 --> 00:03:20.200
So another thing that we frequently do is return a promise from a function instead of just making one

65
00:03:20.200 --> 00:03:26.770
promise like we have here we could instead just get rid of my variable define a function we'll call

66
00:03:26.770 --> 00:03:32.560
this const make dog promise equals some function.

67
00:03:32.560 --> 00:03:37.210
And this function will return a promise this exact promise.

68
00:03:37.210 --> 00:03:38.320
We already have.

69
00:03:38.320 --> 00:03:40.750
So we just write return.

70
00:03:40.750 --> 00:03:44.370
So now I can call this function instead of we'll get you a dog.

71
00:03:44.560 --> 00:03:55.080
I can do make dog promise dog then and I can actually just change this on like that.

72
00:03:55.450 --> 00:03:56.240
I don't have to.

73
00:03:56.310 --> 00:04:02.950
Well if I call make dog promise again and did catch that would be two completely separate promises and

74
00:04:02.950 --> 00:04:06.010
they may not resolve they may not both resolve or both reject.

75
00:04:06.010 --> 00:04:11.090
They could have different values but if we instead chain it like this we get around that problem.

76
00:04:11.320 --> 00:04:13.360
And it's also just shorter and cleaner.

77
00:04:13.360 --> 00:04:20.710
You could save the variable or the result to a variable you know the equals make dog promise and then

78
00:04:20.710 --> 00:04:26.640
do it out then and deduct catch but this is just better.

79
00:04:26.710 --> 00:04:27.700
There we go.

80
00:04:27.730 --> 00:04:29.080
So let's test it out.

81
00:04:29.140 --> 00:04:31.500
We'll wait five seconds.

82
00:04:31.560 --> 00:04:35.940
Come on and there we go.

83
00:04:35.940 --> 00:04:42.480
It was resolved so nothing major that we saw here except for the fact that one we can change dot then

84
00:04:42.480 --> 00:04:47.810
and catch together without having to create a variable or without having to reference that promise again.

85
00:04:47.820 --> 00:04:53.220
I can just put a dot catch after a dot then and only one of the other will run.

86
00:04:53.220 --> 00:04:56.730
In this case my promise is either resolved or rejected.

87
00:04:56.730 --> 00:04:59.160
If it's resolved this function runs here.

88
00:04:59.190 --> 00:05:04.950
If it's rejected this function runs here and then the second thing we saw was that we can make a function

89
00:05:05.010 --> 00:05:10.470
which returns a promise which is an extremely common pattern rather than creating a promise from scratch

90
00:05:10.650 --> 00:05:12.330
and saving it to a variable.

91
00:05:12.330 --> 00:05:19.440
Often we work with functions where we would call once we get to X use axioms dot get some U.R.L. read

92
00:05:19.470 --> 00:05:25.930
scum that will give us a promise and we put a dot then in a dot catch after that.

93
00:05:25.980 --> 00:05:28.410
So this function itself is not a promise.

94
00:05:28.500 --> 00:05:33.090
We're executing a function which returns a promise just like we did here.

95
00:05:33.300 --> 00:05:34.710
This returns a new promise.

96
00:05:34.860 --> 00:05:37.620
It's either resolved or rejected eventually.

97
00:05:37.830 --> 00:05:40.040
But in the meantime it's still an object.

98
00:05:40.050 --> 00:05:46.050
It has a status of pending and when it is either resolved or rejected one of these will run.

99
00:05:46.080 --> 00:05:46.320
OK.

100
00:05:46.340 --> 00:05:47.510
So we have a lot more to cover.

101
00:05:47.520 --> 00:05:48.690
So onwards we go.
