1
00:00:00,240 --> 00:00:04,770
Just like with a race where we could nest an array instead of an array we can do the same thing for

2
00:00:04,770 --> 00:00:05,400
objects.

3
00:00:05,430 --> 00:00:10,680
We can fill objects with kids that are arrays or also keys that are other objects.

4
00:00:10,680 --> 00:00:16,500
And we do this all the time because most of the data we work with in the real world is generally a combination

5
00:00:16,500 --> 00:00:21,360
of list or ordered data as well as key value pairs of data.

6
00:00:21,360 --> 00:00:23,200
So here are a couple of examples.

7
00:00:23,220 --> 00:00:28,360
I have an object called student and a student has a first name or last name key.

8
00:00:28,380 --> 00:00:35,010
We have a strengths property which is set to an array and then we have an exams key and the value is

9
00:00:35,010 --> 00:00:35,860
another object.

10
00:00:35,880 --> 00:00:41,510
So we have the midterm score and the final score two different exams and we could play around with this.

11
00:00:41,520 --> 00:00:42,900
Here's a quick little quiz.

12
00:00:42,930 --> 00:00:44,170
How would I access.

13
00:00:44,340 --> 00:00:48,240
How would I add together midterm and final and then divide them by two.

14
00:00:48,240 --> 00:00:49,660
How would I find the average.

15
00:00:49,680 --> 00:00:54,160
You don't have to use some fancy shortcut to average things but just access this number.

16
00:00:54,270 --> 00:00:58,220
Access this number and add them together and divide by two.

17
00:00:58,230 --> 00:00:59,580
So here's how I would do it.

18
00:00:59,580 --> 00:01:11,430
Student dot exams dot midterm plus student dot exams dot final and that will give us the combination

19
00:01:11,760 --> 00:01:14,490
so we'll just call this.

20
00:01:14,550 --> 00:01:21,330
We'll go with average and then surround them with parentheses because we want to make sure we add them

21
00:01:21,330 --> 00:01:22,830
before we divide by 2.

22
00:01:22,830 --> 00:01:24,380
Add in our equals sign.

23
00:01:24,510 --> 00:01:30,580
Let's refresh and see what average looks like 90 and that seems right.

24
00:01:30,690 --> 00:01:36,450
So we're using the dot notation multiple times you chain them together first to get exams then to get

25
00:01:36,450 --> 00:01:44,700
midterm if we wanted to access art it would be student dot strength and then square bracket one because

26
00:01:44,700 --> 00:01:49,410
its index of 1 and we could keep nesting as far as we wanted to.

27
00:01:49,410 --> 00:01:51,220
On and on and on.

28
00:01:51,360 --> 00:01:57,990
Another really common format is where we have an array in each element in the array is an object so

29
00:01:57,990 --> 00:02:03,540
we get the order where we have the top level array but rather than just storing a string or a number

30
00:02:03,780 --> 00:02:09,180
we can store a bunch of information together as an object to this would represent a simple shopping

31
00:02:09,180 --> 00:02:15,690
cart for some sort of e-commerce checkout where you have a product with a name a price and a quantity

32
00:02:15,960 --> 00:02:17,970
for each element in that array.

33
00:02:17,970 --> 00:02:19,360
So there is an order.

34
00:02:19,380 --> 00:02:22,930
Most cards have an order thing that was added first is up top.

35
00:02:22,950 --> 00:02:25,920
The thing that was most recently added is down at the bottom.

36
00:02:25,920 --> 00:02:27,850
It displays the price the quantity.

37
00:02:27,900 --> 00:02:33,360
We could easily multiply price times quantity for each element especially once we talk about loops and

38
00:02:33,360 --> 00:02:37,810
then you could print that out and then total it all up and have one subtotal.

39
00:02:37,830 --> 00:02:40,320
So this pattern you'll see all over the place as well.

40
00:02:40,470 --> 00:02:42,750
An array of objects.

41
00:02:42,750 --> 00:02:44,000
Here's one more example.

42
00:02:44,160 --> 00:02:49,560
Remember when we talked about arrays and we saw multi-dimensional arrays where we were representing

43
00:02:49,560 --> 00:02:56,010
a game board like for tic tac toe and each row is represented by its own nested array.

44
00:02:56,340 --> 00:02:58,550
So we would have three rows.

45
00:02:58,580 --> 00:03:00,170
I'll just duplicate this.

46
00:03:00,510 --> 00:03:06,820
We'll do X here 0 here and keep that as X and then this one.

47
00:03:07,140 --> 00:03:11,700
Let's do no o comma x.

48
00:03:11,970 --> 00:03:17,490
So we have our game board which is stored in a single array but we may want other information about

49
00:03:17,490 --> 00:03:18,740
the game itself.

50
00:03:18,900 --> 00:03:24,720
And if we were storing or we're trying to represent an entire tic tac toe game in one object or in one

51
00:03:24,720 --> 00:03:27,340
variable we could put this in an object.

52
00:03:27,390 --> 00:03:28,630
We could do something like this.

53
00:03:28,650 --> 00:03:29,600
We have an object.

54
00:03:29,730 --> 00:03:39,720
We would track player 1 and we could give them a name say Player 1 is my cat blue player 2 is my other

55
00:03:39,720 --> 00:03:41,370
cat.

56
00:03:41,390 --> 00:03:46,760
He doesn't really have a name I call him muffins and then we'll also have the game board so we could

57
00:03:46,760 --> 00:03:52,910
do board and paste that in there and then let's make this into a variable contest.

58
00:03:52,920 --> 00:03:54,370
Game equals.

59
00:03:54,510 --> 00:04:00,090
I'll save my board gets kind of messed up the formatting because of my preferences for V.S. code.

60
00:04:00,090 --> 00:04:04,790
This isn't long enough to trigger three separate lines but that doesn't really matter.

61
00:04:04,830 --> 00:04:07,920
So now we have a little more information about player.

62
00:04:07,950 --> 00:04:13,440
Player 1 player 2 and the board but then looking at this we might want more information about each player.

63
00:04:13,440 --> 00:04:20,400
How do we know who is 0 and who is x so for Player 1 instead of just storing a name we could make that

64
00:04:20,400 --> 00:04:29,910
an object and the object could have username as a key and then what would we call that x or 0 character.

65
00:04:29,940 --> 00:04:32,010
What do you call that team.

66
00:04:32,010 --> 00:04:39,070
Let's go with playing as and Blue will be X and then we could do the same thing for Player 2.

67
00:04:39,090 --> 00:04:50,420
So Player 2 becomes an object where we have user name and then we have playing as 0 and we have to make

68
00:04:50,420 --> 00:04:52,240
sure we add those commas correctly.

69
00:04:52,430 --> 00:04:54,880
So when we take objects and arrays we put them together.

70
00:04:54,980 --> 00:05:01,090
We can model most of the information and the data we need to for any given application usually by nesting.

71
00:05:01,090 --> 00:05:06,830
And sometimes it gets a little crazy with the nesting but just those two structures really give us a

72
00:05:06,830 --> 00:05:07,820
lot of flexibility.
