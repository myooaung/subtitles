WEBVTT
1
00:00:01.110 --> 00:00:03.310
In this video we're going to take a look at the current URL.

2
00:00:03.330 --> 00:00:05.940
We're going to see if there is a hash inside of it.

3
00:00:05.940 --> 00:00:06.500
If there is.

4
00:00:06.510 --> 00:00:11.070
We're going to encode the message and throw it into the DOM to get started.

5
00:00:11.070 --> 00:00:14.910
We first need to figure out how we can just take a look at the current URL and determine whether or

6
00:00:14.910 --> 00:00:17.000
not there is a hash inside of there.

7
00:00:17.010 --> 00:00:18.860
So I'm want to generate a new message right now.

8
00:00:18.870 --> 00:00:26.100
So a secret message it create and then visit that link and really importantly when you paste in that

9
00:00:26.100 --> 00:00:29.730
your l makes sure there's only one hash character inside of here.

10
00:00:29.910 --> 00:00:34.410
Technically right now if we start to generate multiple messages.

11
00:00:34.410 --> 00:00:38.310
So notice how I just reloaded the page and I have a hash inside the current URL.

12
00:00:38.310 --> 00:00:43.860
If I now generate another message I get a year L that is going to have two hash characters inside of

13
00:00:43.860 --> 00:00:44.750
it.

14
00:00:44.790 --> 00:00:46.920
But there's one and there's the other.

15
00:00:46.920 --> 00:00:51.600
The reason for this is that every single time that we tried to generate a new message you all were taking

16
00:00:51.600 --> 00:00:58.190
the current exact year l displayed inside that address bar and adding in an additional hash to it.

17
00:00:58.200 --> 00:01:02.340
So as we start to generate more and more messages we're just going to get more and more hashes which

18
00:01:02.340 --> 00:01:04.910
is definitely not what we really want.

19
00:01:04.920 --> 00:01:09.900
This might seem like a real big bug but when we finally implement the final version of our application

20
00:01:10.080 --> 00:01:15.330
this bug is going to fall away because essentially a user is never going to come back to this message

21
00:01:15.330 --> 00:01:20.970
part or this generate message part with a hash inside the URL currently in the final version.

22
00:01:21.000 --> 00:01:26.640
If there is a hash inside the URL a user will not see this form at all.

23
00:01:26.650 --> 00:01:31.810
So this is just a little bug that you need to be aware of as we are testing this application.

24
00:01:31.910 --> 00:01:37.070
So I'm going to once again make sure that I generate the message and get just one hash inside the url

25
00:01:37.130 --> 00:01:43.610
like so if you have more than one then just go back to the H2 e-mail documents generate another message

26
00:01:44.330 --> 00:01:47.590
and throw that Lincoln like so OK.

27
00:01:47.640 --> 00:01:52.170
Now back on track how do we get access to that hash right there to get access to that hash.

28
00:01:52.170 --> 00:01:52.650
We can do.

29
00:01:52.650 --> 00:01:54.330
Once again window dot location

30
00:01:57.780 --> 00:02:01.560
then inside this object you'll see that there is a hash property right there.

31
00:02:01.560 --> 00:02:02.620
So pretty straightforward.

32
00:02:02.640 --> 00:02:05.010
That's how we're gonna get that hash.

33
00:02:05.010 --> 00:02:08.640
You will notice in addition that there is the hash character at the very start.

34
00:02:08.640 --> 00:02:10.380
So that kind of pound symbol.

35
00:02:10.440 --> 00:02:16.150
So we need to kind of remove that pound symbol right there and get just the rest of the string and then

36
00:02:16.210 --> 00:02:21.610
decode that from a base 64 encoded string into a normal ASCII string instead.

37
00:02:21.610 --> 00:02:26.140
So let's go back over to our index dot j ust file and write out some code to do that.

38
00:02:26.260 --> 00:02:35.650
It's a back over here at the very top of first D structure hash off of window dot location.

39
00:02:35.780 --> 00:02:37.610
Then do a console dot log.

40
00:02:37.610 --> 00:02:44.630
And remember to go from a encoded hash or submit an encoded base64 string to an oral ASCII string we

41
00:02:44.630 --> 00:02:51.710
call a to b before you pass in the hash to that thing we need to make sure that we first however remove

42
00:02:51.710 --> 00:03:00.490
the hash character inside of it so we'll say hash dot replace hound with empty string it's going to

43
00:03:00.490 --> 00:03:06.190
save that I'll put back over refresh the page and then as long as I do have a hash inside there right

44
00:03:06.190 --> 00:03:11.890
now inside my address bar I should in fact see my encoded message I put in some gibberish.

45
00:03:11.920 --> 00:03:14.500
So really quickly I'm going to generate a more meaningful message.

46
00:03:14.500 --> 00:03:20.340
I'll say a secret message I'll get that link pasted in.

47
00:03:20.390 --> 00:03:21.360
Hit enter.

48
00:03:21.500 --> 00:03:23.540
You might have to hit reload.

49
00:03:23.540 --> 00:03:26.330
And when I do so I see a secret message appear.

50
00:03:26.330 --> 00:03:30.860
So it's definitely working correctly now that we can't get that message and decode it.

51
00:03:30.870 --> 00:03:36.840
Let's add in some additional H T.M. to show it inside of kind of this nice looking frame right here

52
00:03:37.970 --> 00:03:42.260
so let's take a quick pause first however and take care of generating the eastern oil for that in just

53
00:03:42.260 --> 00:03:42.670
a moment.
