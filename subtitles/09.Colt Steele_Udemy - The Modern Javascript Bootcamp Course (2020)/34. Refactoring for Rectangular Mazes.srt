1
00:00:01,160 --> 00:00:03,900
In this video we're going to do a kind of nasty refactor.

2
00:00:03,900 --> 00:00:05,480
So we're going to go through our code.

3
00:00:05,580 --> 00:00:11,600
We're going to find every time that we had a reference to cells and remove it we're going to replace

4
00:00:11,600 --> 00:00:15,100
it with a reference to cells horizontal or vertical.

5
00:00:15,130 --> 00:00:19,870
We're also going to find every location that we had a reference to unit length X and we will replace

6
00:00:19,870 --> 00:00:23,050
it with a reference to unit length X or Y.

7
00:00:23,140 --> 00:00:27,670
I can tell you right now that the refactor we're about to do is going to be really nasty.

8
00:00:27,670 --> 00:00:31,350
It's very likely that we're going to make a mistake somewhere along the way.

9
00:00:32,280 --> 00:00:34,870
So I know that this is going to be kind of annoying refactor.

10
00:00:34,980 --> 00:00:39,390
The reason that I decided to do this refactor at the end is that understanding all the maze generation

11
00:00:39,390 --> 00:00:44,630
stuff is just a lot easier when the height and width of the maze was always identical.

12
00:00:44,670 --> 00:00:46,720
And that's what we did from the get go.

13
00:00:46,860 --> 00:00:51,750
There's a lot easier to take that approach and do the refactor later than to break out the separate

14
00:00:51,780 --> 00:00:55,250
or different values of cells in the horizontal and vertical direction from the get go.

15
00:00:55,260 --> 00:00:58,100
That would've been a lot more challenging right away.

16
00:00:58,200 --> 00:01:01,770
So I apologize for this video in advance I can tell you right now.

17
00:01:01,770 --> 00:01:03,480
But nonetheless we got to get it done.

18
00:01:03,480 --> 00:01:05,760
So let's get to it one more time.

19
00:01:05,760 --> 00:01:10,520
We're going to go round on every reference to cells and replace it with one of these two variables on

20
00:01:10,530 --> 00:01:14,270
every reference to unit length and replace it with one of those two.

21
00:01:14,550 --> 00:01:19,150
Let's start going to first take a look at the walls array right here.

22
00:01:19,430 --> 00:01:24,200
Walls does not have any references to cells or unit length.

23
00:01:24,200 --> 00:01:26,500
So no change is required.

24
00:01:26,510 --> 00:01:31,720
Well then take a look at May's generation nothing inside of shuffle has any reference to those variables.

25
00:01:31,730 --> 00:01:36,490
So no problem and we get to the first place so we need to start to do a refactor.

26
00:01:36,490 --> 00:01:40,530
So where we create grid verticals in horizontals.

27
00:01:40,650 --> 00:01:43,970
Let me give you a quick overview of why these things need to change now.

28
00:01:45,210 --> 00:01:49,130
So here's a demonstration or a maze that we eventually want to have put together.

29
00:01:49,140 --> 00:01:53,790
So in this case we have four columns and three rows.

30
00:01:53,790 --> 00:01:59,880
So let's think about the grid array that we would create to represent this maze the grid would have

31
00:01:59,970 --> 00:02:06,880
basically the same structure as the maze that we're looking at so we would have three rows

32
00:02:10,350 --> 00:02:14,970
and inside of each of those rows there would be or elements one for each column.

33
00:02:15,210 --> 00:02:17,310
So they would all start off as false.

34
00:02:17,410 --> 00:02:20,800
So like false false false.

35
00:02:20,870 --> 00:02:29,390
So overall the grid the outer array is length 3 the inner array is length 4.

36
00:02:29,460 --> 00:02:34,560
So we need to update the values that we're passing in here to accommodate for that.

37
00:02:34,720 --> 00:02:39,690
So the outer array that we're creating right there that is going to have the number of rows and our

38
00:02:39,690 --> 00:02:43,890
number of rows to go all the way back up the top is cells vertical.

39
00:02:43,890 --> 00:02:50,670
So cells vertical is the number of rows that we have so I'm going to update array cells.

40
00:02:50,670 --> 00:02:59,920
The first call right there two cells vertical and then the second one will be cells horizontal because

41
00:02:59,920 --> 00:03:04,120
remember the inner map or seeing the inner array right here we call it we have inside the map statement

42
00:03:04,360 --> 00:03:08,770
is building out each inner row that's going to be the number of columns we have which is tracked by

43
00:03:08,770 --> 00:03:11,980
the cells horizontal variable.

44
00:03:11,990 --> 00:03:16,350
Now we can update the two other arrays we generate in an identical fashion.

45
00:03:16,550 --> 00:03:24,310
The outer array will be cells vertical and down here on horizontal the outer arrays will be cells vertical

46
00:03:24,400 --> 00:03:30,950
minus one then on verticals on the inner array instead of cells will have cells.

47
00:03:31,130 --> 00:03:42,530
Horizontal and on this one right here inside of the horizontals we will have cells horizontal that step

48
00:03:42,530 --> 00:03:50,320
one next up we need to find a random start row and a random start column rather than having this be

49
00:03:50,320 --> 00:03:52,540
multiplied by just our total number of cells.

50
00:03:52,540 --> 00:03:54,970
We now no longer have that variable of course.

51
00:03:54,970 --> 00:04:02,680
So we need to calculate either a random number from 0 up to our cells horizontal or 0 2 cells vertical

52
00:04:02,680 --> 00:04:07,200
depending upon whether we are trying to get a random row or column.

53
00:04:07,300 --> 00:04:12,050
So again cells vertical corresponds to the number of rows that we have.

54
00:04:12,100 --> 00:04:18,670
So I'm going to change the start row right here two cells vertical and the start column will be some

55
00:04:18,670 --> 00:04:21,110
random number of times cells.

56
00:04:21,130 --> 00:04:25,020
Horizontal Hey.

57
00:04:25,230 --> 00:04:28,460
Next up will move to step through cell inside of here.

58
00:04:28,470 --> 00:04:33,390
We have just one reference to or I guess two right here one place that we reference the cells variable

59
00:04:33,750 --> 00:04:39,120
and that's where we check to see if we are out of bounds for next row right here.

60
00:04:39,150 --> 00:04:43,590
We're going to make sure that we are not exceeding the total number of vertical cells we have.

61
00:04:43,610 --> 00:04:49,470
So cells vertical with next column we're going to make sure we don't exceed the total number of columns

62
00:04:49,470 --> 00:04:56,100
we have that these cells horizontal.

63
00:04:56,110 --> 00:04:56,400
All right.

64
00:04:56,410 --> 00:04:57,560
Just a little bit more.

65
00:04:57,670 --> 00:05:03,370
Fortunately the next one is going to be really easy and straightforward I'm going to go down down down

66
00:05:03,850 --> 00:05:09,940
to where we iterate through horizontals one side of horizontals we've got a ton of different references

67
00:05:09,940 --> 00:05:11,310
to our unit length.

68
00:05:11,440 --> 00:05:16,630
So we need to make sure we update each of these two other unit length X or Y but fortunately like I

69
00:05:16,630 --> 00:05:21,880
said this is going to be really easy refactor remembered the ordering of arguments we pass into the

70
00:05:21,880 --> 00:05:27,580
rectangle function the first argument is the center of the rectangle in the x direction.

71
00:05:27,580 --> 00:05:33,070
So as you would probably guess we're going to update unit length both locations inside that first argument

72
00:05:33,100 --> 00:05:36,040
to unit length x.

73
00:05:36,170 --> 00:05:40,710
The second argument is the center point of the rectangle in the y direction.

74
00:05:40,730 --> 00:05:48,440
So again as you would guess we're going to now multiply by unit length y and add in unit length Y then

75
00:05:48,440 --> 00:05:56,530
the third argument is the length of the rectangle in the x direction so unit length X I take a look

76
00:05:56,650 --> 00:05:58,400
at this line right here this block of code.

77
00:05:58,420 --> 00:06:02,650
Make sure you do not have any references to the plane unit length variable.

78
00:06:02,650 --> 00:06:09,480
They should all be either unit length X or Y so that's it for horizontals.

79
00:06:09,540 --> 00:06:13,380
We'll repeat that same process for the verticals as well.

80
00:06:13,410 --> 00:06:22,670
So again first line the unit length X and X second will be length Y and Y and this time the fourth argument

81
00:06:22,700 --> 00:06:26,920
which is the height of the rectangle we are creating that needs to be of course the height.

82
00:06:26,930 --> 00:06:28,350
So in the vertical direction.

83
00:06:28,370 --> 00:06:29,690
So unit length Y

84
00:06:33,480 --> 00:06:33,910
Okay.

85
00:06:33,950 --> 00:06:35,330
Just a little bit more.

86
00:06:35,570 --> 00:06:41,350
I know I said this is a nasty refactor but we're almost done with it so for the goal right here we are

87
00:06:41,350 --> 00:06:45,910
multiplying by the unit length again we've got the same ordering of arguments.

88
00:06:45,910 --> 00:06:50,420
So the first and third arguments need to take a look at the unit length the x direction.

89
00:06:50,430 --> 00:06:53,000
Here's the first argument should go to X.

90
00:06:53,200 --> 00:06:58,800
Third argument should go to X and then the second and fourth arguments are concerned with the y direction.

91
00:06:58,800 --> 00:07:11,250
So we'll do unit length Y and Y so you don't think X Y then X and Y.

92
00:07:11,340 --> 00:07:11,640
All right.

93
00:07:11,640 --> 00:07:12,680
Last a little bit.

94
00:07:12,720 --> 00:07:14,040
Here's our ball right here.

95
00:07:15,710 --> 00:07:18,530
We've got three references to the unit length.

96
00:07:18,600 --> 00:07:23,270
Remember the first and second are the x and y center points of the ball.

97
00:07:23,270 --> 00:07:31,430
So we're going to change the first two X the second to Y and then the third argument right here is going

98
00:07:31,430 --> 00:07:32,920
to be the radius of the ball.

99
00:07:34,450 --> 00:07:39,750
So for the radius of the ball we might have a very different length the x direction in the y direction.

100
00:07:39,820 --> 00:07:45,340
So we should really take the minimum of those two and use that to decide exactly what the radius should

101
00:07:45,340 --> 00:07:47,110
be on the line right above.

102
00:07:47,110 --> 00:07:51,210
I'm going to declare a new variable called Ball radius.

103
00:07:51,250 --> 00:08:01,130
This will be math dot Min of the unit length in the x direction and the unit length in the y direction.

104
00:08:01,140 --> 00:08:04,030
So find whichever of those two is lesser.

105
00:08:04,200 --> 00:08:06,690
Now we're going to divide it by two

106
00:08:11,390 --> 00:08:17,730
and then I'm going to take out a third argument right here and replace it with.

107
00:08:17,730 --> 00:08:22,470
Ball radius you I just realized I made the same mistake I did before the ball.

108
00:08:22,500 --> 00:08:24,360
We are providing a radius here.

109
00:08:24,390 --> 00:08:27,340
So we actually want to do divided by four.

110
00:08:27,480 --> 00:08:28,440
After the math Min

111
00:08:31,320 --> 00:08:33,010
gets that should be it.

112
00:08:33,030 --> 00:08:37,620
So now at this point time we should build to do a search on this file for unit length and if we search

113
00:08:37,620 --> 00:08:41,990
around we should not find any reference to a variable that says just unit length by itself.

114
00:08:42,600 --> 00:08:49,120
So as I go around I should see everywhere unit length X and unit length y I should yield to do the same

115
00:08:49,120 --> 00:08:53,770
thing for cells as well I should build a search for cells and see everywhere other cells horizontal

116
00:08:53,770 --> 00:08:56,910
or cells vertical once I've done that check.

117
00:08:56,940 --> 00:09:02,670
I'll then save the file gonna go back over and refresh and that should be at I should now have my maze

118
00:09:02,700 --> 00:09:10,620
showing up in a properly scaled fashion no matter what the dimensions of my window are if you refresh

119
00:09:10,650 --> 00:09:15,960
and you see an error I can 100 percent guarantee you that you just made a typo.

120
00:09:16,080 --> 00:09:19,530
So at some location you put in a reference to the wrong variable.

121
00:09:19,530 --> 00:09:24,160
Take a look at the error message and take a look at what line it told you that the error occurred on.

122
00:09:24,390 --> 00:09:27,660
You can then go to that line inside of your index not just file.

123
00:09:27,660 --> 00:09:30,420
Now we'll tell you exactly where the typo is.

124
00:09:30,420 --> 00:09:33,720
Again if you have an error where you didn't before.

125
00:09:34,050 --> 00:09:35,130
No two ways about it.

126
00:09:35,160 --> 00:09:37,010
I absolutely positively guarantee you.

127
00:09:37,050 --> 00:09:38,100
You have a typo.

128
00:09:38,110 --> 00:09:41,380
So just make sure you take a look and figure out where it is OK.

129
00:09:41,410 --> 00:09:45,820
So again I know that refactor is painful but if we close our console and then refresh we're going to

130
00:09:45,820 --> 00:09:49,530
see that we get this nicely scaled different sized maze.

131
00:09:49,600 --> 00:09:53,380
Now we can do some really interesting things so we can have different number of cells in the horizontal

132
00:09:53,380 --> 00:09:54,640
or vertical direction.

133
00:09:54,640 --> 00:10:01,330
So for example I can have 14 cells in the horizontal and just 10 in the vertical if I save that.

134
00:10:01,330 --> 00:10:06,640
There we go and now it doesn't appear that the maze is super squished or anything like that because

135
00:10:06,640 --> 00:10:09,150
we are allowing for the different number of cells.

136
00:10:09,220 --> 00:10:13,520
Now we can play this thing.

137
00:10:13,690 --> 00:10:18,080
You don't have to watch me play it but I'm going to just solve it really quickly.

138
00:10:18,160 --> 00:10:18,550
Come on.

139
00:10:19,390 --> 00:10:19,540
Yeah.

140
00:10:19,550 --> 00:10:21,630
If you want to watch just pause here.

141
00:10:21,640 --> 00:10:22,400
Watch the next video.

142
00:10:22,420 --> 00:10:23,320
But I've always got it.

143
00:10:23,320 --> 00:10:24,010
There we go.

144
00:10:24,010 --> 00:10:25,730
Done.

145
00:10:25,800 --> 00:10:26,040
All right.

146
00:10:26,070 --> 00:10:27,870
Let's say that looks pretty good.

147
00:10:27,870 --> 00:10:30,950
Last thing I wanna do is just add in a little bit of color to this thing.

148
00:10:30,960 --> 00:10:35,400
I also wanna throw a big message on the center of the screen whenever the user wins as well.

149
00:10:35,460 --> 00:10:37,410
So last little test in the next video.
