1
00:00:00,300 --> 00:00:05,610
So far the string methods that we've seen all follow this pattern we call the method name with empty

2
00:00:05,610 --> 00:00:06,390
parentheses.

3
00:00:06,390 --> 00:00:10,770
We don't provide any information or values when we execute it.

4
00:00:10,770 --> 00:00:13,620
Now we're going to see a different set of string methods.

5
00:00:13,620 --> 00:00:20,310
They work in the exact same way the same syntax except instead of the parentheses we pass in additional

6
00:00:20,310 --> 00:00:22,540
information to modify their behavior.

7
00:00:22,710 --> 00:00:30,060
Methods are just actions uppercase this trim this lowercase this but some of them like replace require

8
00:00:30,090 --> 00:00:31,120
additional information.

9
00:00:31,140 --> 00:00:34,490
What are you replacing and what do you want to replace it with.

10
00:00:34,530 --> 00:00:39,060
Or if we are searching for something we need to specify what we're searching for.

11
00:00:39,060 --> 00:00:43,750
So those values that we pass in between the parentheses are called arguments.

12
00:00:43,950 --> 00:00:49,610
We can pass in one argument and sometimes we pass in multiple as in the case of replace.

13
00:00:49,740 --> 00:00:50,830
What are you replacing.

14
00:00:50,850 --> 00:00:52,650
What do you want to replace it with.

15
00:00:52,660 --> 00:00:56,930
So I'm going to show you a couple examples of these methods so they work the same way.

16
00:00:57,070 --> 00:00:58,650
We just pass an information.

17
00:00:58,650 --> 00:00:59,560
Here's the first one.

18
00:00:59,580 --> 00:01:02,340
It's called index of index of.

19
00:01:02,400 --> 00:01:07,400
We'll tell you where in a string a given string occurs substring.

20
00:01:07,410 --> 00:01:11,530
So here I have cat dog as the variable TV show.

21
00:01:11,580 --> 00:01:19,500
And if I call index of cat it returns 0 meaning cat comes at the very beginning of the string.

22
00:01:19,500 --> 00:01:25,470
It's not just looking for C. It's looking for cat the entire substring the entire match S.A.T. starts

23
00:01:25,470 --> 00:01:27,280
at index 0.

24
00:01:27,330 --> 00:01:37,020
Then if we do dog index of dog we get three which means it starts at 0 1 2 3 index of 3 or the fourth

25
00:01:37,050 --> 00:01:37,980
character.

26
00:01:37,980 --> 00:01:39,000
Here's a quick example.

27
00:01:39,000 --> 00:01:41,280
Baseball dot index of.

28
00:01:41,730 --> 00:01:47,360
Let's look for where ball occurs in the string and it tells us it starts at index 4.

29
00:01:48,270 --> 00:01:55,050
If I just did B This one is important because there are two B's it only tells me the first instance

30
00:01:55,140 --> 00:02:00,470
of B the first occurrence which is at index 0 it is case sensitive.

31
00:02:00,480 --> 00:02:07,680
So if I instead had baseball with capital B it ignores that one that's not a match but this one is a

32
00:02:07,680 --> 00:02:09,090
match at index 4.

33
00:02:09,300 --> 00:02:15,630
Now for looking for something that doesn't exist in the string like baseball that index of entertaining

34
00:02:17,190 --> 00:02:23,760
which clearly entertaining does not exist instead of the world of baseball we get negative 1 so negative

35
00:02:23,760 --> 00:02:30,810
1 is the representation of not found anytime you call index of with a value that is not found you'll

36
00:02:30,810 --> 00:02:36,720
get negative 1 and you'll often see people use this once we talk about conditional logic people will

37
00:02:36,720 --> 00:02:43,260
write code that checks if index of something equals negative one that means the thing you're looking

38
00:02:43,260 --> 00:02:44,530
for is not there.

39
00:02:44,790 --> 00:02:50,880
So that's pretty much it for index of it returns a number always sometimes it will be the index of something

40
00:02:50,880 --> 00:02:54,100
you're looking for and if it's not found you get negative one.

41
00:02:54,180 --> 00:02:59,970
The next method we'll take a look at is called Slice slice does kind of what it sounds like it takes

42
00:03:00,030 --> 00:03:06,900
slices of an existing string and it gives you a piece of it and it works in a couple of different ways.

43
00:03:06,900 --> 00:03:12,660
If we pass in a single number let's just keep working with baseball if we pass in a single number to

44
00:03:12,660 --> 00:03:21,440
slice like maybe 4 it's going to take a slice starting an index for all the way to the end.

45
00:03:21,510 --> 00:03:23,220
So in our case that's ball.

46
00:03:23,490 --> 00:03:28,860
But remember strings are immutable just like all the methods we've seen so far this is not altering

47
00:03:28,860 --> 00:03:36,660
baseball it's not changing the value if we had it in a variable like if we had let sport equal baseball

48
00:03:37,100 --> 00:03:45,180
and then reduced sport that slice for sport is unchanged it's still baseball and we could save this

49
00:03:45,210 --> 00:03:47,500
to a separate variable if we wanted it.

50
00:03:47,970 --> 00:03:49,830
So that's one use for slice.

51
00:03:49,860 --> 00:03:52,170
If you pass in a single number.

52
00:03:52,170 --> 00:03:59,670
Also if we tried something like sport that slice 40 there is no index 40 we get an empty string when

53
00:03:59,670 --> 00:04:07,110
we use slice we can also pass in two numbers to indices first one is where we should start the slice

54
00:04:07,380 --> 00:04:10,530
and then the second one is where the slice should end.

55
00:04:10,530 --> 00:04:11,550
So let's test it out.

56
00:04:11,970 --> 00:04:22,020
We'll do this on super hero and if we do a dot slice going from index 0 and then we go into index 5

57
00:04:22,650 --> 00:04:30,720
we'll end up with super notice that it is not inclusive because index 5 is 0 1 2 3 4 5.

58
00:04:30,810 --> 00:04:32,600
That would be the H right here.

59
00:04:32,610 --> 00:04:40,170
It stops right before that h so it starts at zero and it goes basically to 4 1 less than what we have

60
00:04:40,170 --> 00:04:41,010
here.

61
00:04:41,130 --> 00:04:42,300
So we end up with super.

62
00:04:42,300 --> 00:04:48,930
If I wanted to slice let's go with he the word I guess it is not a very exciting word but two characters

63
00:04:48,930 --> 00:04:49,680
in the middle.

64
00:04:49,680 --> 00:05:00,040
We need to go from this index which is 0 1 2 3 4 5 and then we want to go and tell 7 and we get he let's

65
00:05:00,050 --> 00:05:07,820
say I had a bunch of prices that people had written like fifty point six zero and I wanted to remove

66
00:05:07,820 --> 00:05:11,690
a dollar sign on all of them what I could do is slice.

67
00:05:11,690 --> 00:05:15,680
So just do you slice from one to the end.

68
00:05:15,680 --> 00:05:19,400
And now I get the number isolated even though it's a string.

69
00:05:19,400 --> 00:05:24,080
I could then turn it into a number which we haven't seen how to do yet but this is a common use case.

70
00:05:24,110 --> 00:05:28,670
If you have data that follows a pattern and you're trying to isolate a certain portion of it you use

71
00:05:28,670 --> 00:05:33,530
slice and then we have one more method that accepts arguments that we'll talk about.

72
00:05:33,530 --> 00:05:38,330
There are many many others that come with a built in and JavaScript many string methods but the last

73
00:05:38,330 --> 00:05:41,920
one we'll see is called replace and it also does what it sounds like.

74
00:05:41,960 --> 00:05:47,290
You specify what you want to replace what string and what you want to replace it with.

75
00:05:47,300 --> 00:05:57,590
So if I had the string baseball is entertaining and I called replace on it I could replace entertaining

76
00:05:57,590 --> 00:06:00,650
if I wanted to with.

77
00:06:00,770 --> 00:06:04,360
How about OK.

78
00:06:04,480 --> 00:06:05,240
And now we get.

79
00:06:05,240 --> 00:06:15,860
Baseball is OK if I try it with something like this Ha ha ha dark place and I want to replace ha with

80
00:06:17,590 --> 00:06:19,130
which we'll replace it with.

81
00:06:19,130 --> 00:06:22,450
How about hee hee hee hee.

82
00:06:22,520 --> 00:06:24,210
Let's see what happens.

83
00:06:24,260 --> 00:06:26,820
It only replaces the first one.

84
00:06:26,900 --> 00:06:32,660
So there are ways of replacing all occurrences in a string but it involves a regular expression which

85
00:06:32,660 --> 00:06:34,300
is something we have not talked about.

86
00:06:34,340 --> 00:06:40,010
So we're not going to go into it but if you want to learn more go check it out on MDA and look up replace.

87
00:06:40,010 --> 00:06:45,050
So it replaces the first occurrence and of course if it doesn't find the thing that you're trying to

88
00:06:45,050 --> 00:06:45,530
replace.

89
00:06:45,530 --> 00:06:49,910
Like if I tried to replace ha with he there is no ha.

90
00:06:50,690 --> 00:06:52,150
So it's unchanged.

91
00:06:52,320 --> 00:06:53,390
It doesn't give us an error.

92
00:06:53,390 --> 00:06:55,130
Nothing really happens.

93
00:06:55,130 --> 00:06:57,210
It just doesn't replace it.

94
00:06:57,260 --> 00:07:03,110
So that's replace you pass in to values the thing that all of these methods have in common is that we

95
00:07:03,110 --> 00:07:05,480
pass in at least one value.

96
00:07:05,480 --> 00:07:11,380
So we had methods where we pass nothing in like trim or to lowercase to uppercase and we have methods

97
00:07:11,440 --> 00:07:16,510
repast specific values in index of where we specify what we're looking for.

98
00:07:16,610 --> 00:07:18,270
Tell me the index of cats.

99
00:07:18,380 --> 00:07:19,430
Here we have slice.

100
00:07:19,430 --> 00:07:25,610
You can pass in one number in order to go from one index to the end of the string or you can pass in

101
00:07:25,610 --> 00:07:28,070
two numbers to get a specific slice.

102
00:07:28,310 --> 00:07:34,700
And we had replaced where you pass in two values if we go back to the docs here I'm on Ambien right

103
00:07:34,700 --> 00:07:36,910
now I'm on to uppercase for string.

104
00:07:36,920 --> 00:07:40,530
But if we go to the left again we can see all the different methods.

105
00:07:40,670 --> 00:07:46,790
If we look at slice just to give you an idea of how you read these docs if you look down right here

106
00:07:46,930 --> 00:07:53,350
or it says syntax the syntax is string dot slice and then we must pass in a begin index.

107
00:07:53,360 --> 00:07:56,370
So the starting index and then we have an end index.

108
00:07:56,390 --> 00:07:58,900
But notice there's these brackets around it.

109
00:07:58,970 --> 00:08:03,010
This is a way of telling you this is optional slice works.

110
00:08:03,020 --> 00:08:05,920
If you only specify begin index as we've seen.

111
00:08:06,110 --> 00:08:08,900
If we only pass in five it works.

112
00:08:08,900 --> 00:08:12,110
But if you want you can also pass in an end index.

113
00:08:12,110 --> 00:08:18,410
So if you see documentation like this on MDA and whenever you see these brackets under the syntax portion

114
00:08:18,710 --> 00:08:22,370
of documentation page this is telling you it's optional.
