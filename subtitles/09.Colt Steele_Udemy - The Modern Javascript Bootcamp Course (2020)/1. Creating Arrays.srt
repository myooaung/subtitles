1
00:00:00,560 --> 00:00:07,720
So far we've seen how to work with single values like the number twelve point three or the string high.

2
00:00:07,840 --> 00:00:08,570
And that's great.

3
00:00:08,960 --> 00:00:13,270
But most of the time in the real world our data is a lot more complicated.

4
00:00:13,370 --> 00:00:17,790
It consists of pieces like numbers and strings and boolean.

5
00:00:17,870 --> 00:00:23,540
But usually we have more than one piece of information and they're often related to one another.

6
00:00:23,570 --> 00:00:27,600
So this is where data structures come in which is what we're talking about here.

7
00:00:27,620 --> 00:00:33,080
We're seeing our first two data structures in this section the array and the object they're both built

8
00:00:33,080 --> 00:00:36,390
into javascript and they're both used all over the place.

9
00:00:36,430 --> 00:00:40,640
You would be hard pressed to find any code base that did not contain both of them.

10
00:00:40,640 --> 00:00:42,510
They're really really useful.

11
00:00:42,610 --> 00:00:46,160
First a couple of goals we want to be able to write arrays.

12
00:00:46,180 --> 00:00:47,500
Understand the syntax.

13
00:00:47,650 --> 00:00:49,960
Do the same thing with object laterals.

14
00:00:49,960 --> 00:00:55,690
Also we'll take a quick detour to talk about reference types and revisit our friend concept we saw let

15
00:00:55,870 --> 00:01:02,260
let in const briefly we'll talk about it again in this section and then we'll talk about a ton of built

16
00:01:02,260 --> 00:01:04,080
in array and object methods.

17
00:01:04,090 --> 00:01:10,240
Remember how string had all these different methods like string dot index of string dot to uppercase

18
00:01:10,720 --> 00:01:14,410
arrays and objects have their own set of methods as well.

19
00:01:14,410 --> 00:01:19,660
In this video we're going to start with arrays which are collections of values all of these different

20
00:01:19,660 --> 00:01:21,160
values we've seen so far.

21
00:01:21,160 --> 00:01:28,690
Strings numbers billions things like normal and undefined arrays collect them into one structure one

22
00:01:28,690 --> 00:01:31,180
collection and it's ordered.

23
00:01:31,210 --> 00:01:37,120
So I'd like to visually think of it as one of these pill containers where you have little slots and

24
00:01:37,120 --> 00:01:42,320
you can put data on our case pills into these slots and there's an order.

25
00:01:42,460 --> 00:01:47,260
Usually it's like Monday Tuesday Wednesday Thursday and so on and you start with this first one and

26
00:01:47,260 --> 00:01:50,790
then the second one and you can see where I'm going with this.

27
00:01:50,800 --> 00:01:57,340
Arrays are very similar they are slots and on their own arrays don't do much unless we put information

28
00:01:57,340 --> 00:02:01,890
in them so they collect all those primitive type of data we've seen so far.

29
00:02:01,900 --> 00:02:06,490
They also can collect other data like other arrays which we'll get to in a bit.

30
00:02:06,520 --> 00:02:10,810
So let's take a look at two quick examples of where an array is used.

31
00:02:10,810 --> 00:02:13,660
Here is a playlist on Spotify.

32
00:02:13,670 --> 00:02:15,940
There's a very special special.

33
00:02:16,000 --> 00:02:18,390
There's a particular order to these songs.

34
00:02:18,430 --> 00:02:21,180
People spend a lot of time ordering playlists.

35
00:02:21,250 --> 00:02:26,080
Usually they're not just a random collection of songs although people do shuffle them much undue which

36
00:02:26,110 --> 00:02:28,880
undoes the order but the order is set.

37
00:02:28,960 --> 00:02:33,880
You can change it depending on the application but the main point is that there is an order so there's

38
00:02:33,880 --> 00:02:37,290
something first second third and so on all the way down to the bottom.

39
00:02:37,330 --> 00:02:42,970
We could use an array and there is an array behind the scenes for Spotify that is used to store playlist

40
00:02:42,970 --> 00:02:44,890
information.

41
00:02:44,890 --> 00:02:48,450
Another example would be comments on a blog post or on Reddit.

42
00:02:48,490 --> 00:02:51,230
Those comments have a particular order on Reddit.

43
00:02:51,340 --> 00:02:54,690
There it depends on how you're sorting but it could be by upvotes.

44
00:02:54,700 --> 00:02:57,850
It could be by time most recent comments.

45
00:02:57,850 --> 00:02:59,200
I'm on medium here.

46
00:02:59,200 --> 00:03:01,040
There are 7 comments I think.

47
00:03:01,240 --> 00:03:02,880
And as you can see there is an order.

48
00:03:02,880 --> 00:03:07,100
If I refresh the page we'll get that same order again.

49
00:03:07,300 --> 00:03:12,550
Now each comment consists of multiple pieces of information which is where objects will come in.

50
00:03:12,550 --> 00:03:19,150
So we're gonna get there for now we'll be creating arrays that consist of single values in each slot

51
00:03:19,330 --> 00:03:20,460
in that array.

52
00:03:20,530 --> 00:03:26,740
Something like this comment consists of multiple values a user name a date the comment text the number

53
00:03:26,740 --> 00:03:30,550
of applause or claps or whatever they're called on Medium.

54
00:03:30,550 --> 00:03:33,580
There's multiple pieces of information bundled into one comment.

55
00:03:33,700 --> 00:03:35,880
But for now we'll start with simpler things.

56
00:03:36,070 --> 00:03:39,580
So to make an array there's a really really easy way of doing it.

57
00:03:39,580 --> 00:03:41,190
We just use these square brackets.

58
00:03:41,200 --> 00:03:44,050
We've seen them before in the context of strings.

59
00:03:44,170 --> 00:03:45,780
They mean something different.

60
00:03:45,910 --> 00:03:50,280
If we're not accessing a string so we've seen this ELA well.

61
00:03:50,440 --> 00:03:58,520
If I can type of string ELA well square brackets 1 or 2 or 0 when we make an array we use the same brackets.

62
00:03:58,600 --> 00:04:03,850
But in a different context where there's no string in front it will make us an empty container an empty

63
00:04:03,880 --> 00:04:05,050
pillbox.

64
00:04:05,050 --> 00:04:07,590
This is now ready to store our information.

65
00:04:07,630 --> 00:04:12,930
We can also Initialize an array with data already in it so we can store whatever we want.

66
00:04:13,270 --> 00:04:19,860
All of the types we've seen so far are welcome in any array so we can put strings or numbers or boolean.

67
00:04:19,900 --> 00:04:21,970
We can even mix them all up together.

68
00:04:22,150 --> 00:04:24,650
So here's an example of a simple array.

69
00:04:24,820 --> 00:04:32,750
Let's go with let's how about shopping list equals and then we'll put in some things that we need.

70
00:04:32,770 --> 00:04:41,230
We have ice we have let's go with cheese and usually I think ice actually makes sense at the end remember

71
00:04:41,230 --> 00:04:47,110
these are ordered we'll put ice in there I'm going to put that at the end because when I go the grocery

72
00:04:47,110 --> 00:04:50,160
store I like to get frozen stuff at the end so it doesn't melt.

73
00:04:50,560 --> 00:04:55,040
We'll also put baby cereal and then cheese.

74
00:04:55,150 --> 00:04:58,990
OK so this is going to make us an array with 3 items in it.

75
00:04:59,050 --> 00:05:04,450
If I save my code I'm just working in another app J.S. connected to my index I've opened it up over

76
00:05:04,450 --> 00:05:05,980
here I'll refresh.

77
00:05:06,010 --> 00:05:12,340
I don't see anything because I'm not concerned about logging but I can access shopping list and we can

78
00:05:12,340 --> 00:05:13,860
see it contains three items.

79
00:05:13,900 --> 00:05:15,050
Length is three.

80
00:05:15,130 --> 00:05:16,660
We'll talk about that in a moment.

81
00:05:16,720 --> 00:05:19,500
So there's our first example of an array.

82
00:05:19,600 --> 00:05:24,420
We also could make an empty array if we didn't have information to put in it at the beginning.

83
00:05:24,490 --> 00:05:29,890
We could go and add information later on which we'll see how to do we could make an array of numbers

84
00:05:30,280 --> 00:05:36,800
like Lotto numbers and I don't really know what the rules are for lotto numbers.

85
00:05:36,970 --> 00:05:40,750
If they're supposed to be less than 60 or 100 or whatever it is.

86
00:05:40,750 --> 00:05:43,120
But here's an example of that.

87
00:05:43,450 --> 00:05:45,820
We have five numbers in an array.

88
00:05:45,830 --> 00:05:49,960
There's an order and we can also combine information.

89
00:05:49,960 --> 00:05:51,970
So this will be relatively meaningless.

90
00:05:52,000 --> 00:05:57,760
Usually your data is relatively cohesive when you have it inside of an array but it doesn't have to

91
00:05:57,760 --> 00:05:58,140
be.

92
00:05:58,180 --> 00:06:02,110
We could have a string like dog a number 12.

93
00:06:02,110 --> 00:06:08,620
True no good even putting out a number and they're perfectly valid in some programming languages.

94
00:06:08,620 --> 00:06:10,190
This would not be good.

95
00:06:10,210 --> 00:06:13,270
Some of them don't want you to mix up data in an array.

96
00:06:13,270 --> 00:06:14,230
You have to specify.

97
00:06:14,230 --> 00:06:19,510
This is a collection of only strings and you're only allowed to put strings in there but that's not

98
00:06:19,510 --> 00:06:20,900
the case with JavaScript.

99
00:06:20,920 --> 00:06:27,400
We can put whatever we want and if I look at I do need to refresh the page so that it loads I look at

100
00:06:27,400 --> 00:06:32,400
my collection we can see it's an array with five items in it.

101
00:06:32,590 --> 00:06:32,820
All right.

102
00:06:32,830 --> 00:06:34,900
So that's the basics of making an array.

103
00:06:34,900 --> 00:06:40,270
There is one other way to make one if you don't use this square brackets syntax which is also called

104
00:06:40,600 --> 00:06:42,500
array literal syntax.

105
00:06:42,610 --> 00:06:47,400
You can do this you won't see it at least I don't see it very often.

106
00:06:47,530 --> 00:06:53,350
And the reason is that it's a lot longer but new Array will make you an empty array just like empty

107
00:06:53,350 --> 00:06:59,100
array does with the square brackets and you could pass in values if I wanted numbers in that array.

108
00:06:59,110 --> 00:07:01,520
It gives me a new array with 1 2 3 4 5.

109
00:07:01,600 --> 00:07:02,600
But why do that.

110
00:07:02,620 --> 00:07:08,300
If you could just instead do one two three four five so that's creating arrays.

111
00:07:08,350 --> 00:07:11,440
Next we'll talk about accessing information out of arrays.

