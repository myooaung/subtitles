WEBVTT
1
00:00:00.120 --> 00:00:05.520
The next thing you should know about strings is that they are indexed every character in a string is

2
00:00:05.520 --> 00:00:10.290
assigned a corresponding number based off of its position in the string.

3
00:00:10.290 --> 00:00:11.580
So they go from left to right.

4
00:00:11.610 --> 00:00:12.900
Starting from zero.

5
00:00:12.900 --> 00:00:16.350
So the first character in a string is always at position 0.

6
00:00:16.380 --> 00:00:22.220
Or it has an index of 0 and then it goes up to the end of the string incrementing each character.

7
00:00:22.320 --> 00:00:29.130
So in the case of chicken which is a seven character string one two three four five six seven the lowest

8
00:00:29.130 --> 00:00:30.940
index is zero as always.

9
00:00:31.020 --> 00:00:36.230
And the greatest index for that last n or the only n is 6.

10
00:00:36.240 --> 00:00:41.580
So these are really useful for a variety of reasons but largely for some of the methods we're about

11
00:00:41.580 --> 00:00:47.880
to see in the next couple of videos where we can pass in indices to search for portions of a string

12
00:00:47.910 --> 00:00:50.760
or to copy portions of a string into a new variable.

13
00:00:50.790 --> 00:00:52.110
Things like that.

14
00:00:52.260 --> 00:00:59.390
There's one other thing I'd like to show you which is every string has a property called length.

15
00:00:59.460 --> 00:01:01.410
We haven't really talked about properties.

16
00:01:01.440 --> 00:01:08.490
Properties are just values we can access so we can ask for length off of hello what is Hello Dot length.

17
00:01:08.490 --> 00:01:09.560
It gives us 5.

18
00:01:09.720 --> 00:01:12.930
That is the number of characters 1 2 3 4 5.

19
00:01:13.170 --> 00:01:21.540
If I have elo elo Well well well well well length I have no idea what we'll get 13 we have 13 characters

20
00:01:22.080 --> 00:01:29.250
and just so we're clear here every single character in a string matters and is counted so not just letters

21
00:01:29.250 --> 00:01:31.290
or numbers but spaces.

22
00:01:31.290 --> 00:01:37.080
There's also a period in there it was added automatically by chrome and I hit two spaces but that is

23
00:01:37.080 --> 00:01:38.010
10 characters.

24
00:01:38.070 --> 00:01:43.770
Even though this has one traditional character what we would call a character it's 10 characters long

25
00:01:43.770 --> 00:01:44.930
in JavaScript land.

26
00:01:45.750 --> 00:01:49.020
So length is something that we can access if we need it.

27
00:01:49.290 --> 00:01:51.360
But let's go back to these indices.

28
00:01:51.360 --> 00:01:58.880
So let's make a variable we'll go with let my song equals Surfin USA.

29
00:01:58.920 --> 00:02:01.050
I think there's an apostrophe there.

30
00:02:02.280 --> 00:02:08.550
So good thing I use double quotes so you can put that single quote there and if we look at my song length

31
00:02:09.180 --> 00:02:11.130
it has a length of eleven.

32
00:02:11.130 --> 00:02:17.700
The next piece of syntax I'll show you is how we can use those indices to access individual characters.

33
00:02:17.700 --> 00:02:24.600
So if I want the very first character of this string here's some new syntax we use square brackets and

34
00:02:24.600 --> 00:02:28.060
we pass in a number corresponding to the position.

35
00:02:28.380 --> 00:02:33.290
So index of zero should be the first character which is s index of 1.

36
00:02:33.330 --> 00:02:37.320
Gives me you index of 2 and so on.

37
00:02:37.320 --> 00:02:45.780
Now if we take the length again which is eleven what happens when I try and access my song square brackets

38
00:02:45.900 --> 00:02:46.850
eleven.

39
00:02:47.610 --> 00:02:53.460
We get a value called undefined so we're going to talk more about undefined and another primitive called

40
00:02:53.520 --> 00:02:56.610
No but undefined means there's nothing there.

41
00:02:56.610 --> 00:03:01.830
There isn't a character at index eleven or for that matter index one hundred and ten.

42
00:03:01.830 --> 00:03:08.520
It's the same exact scenario it's a different number but neither of them exists in our string.

43
00:03:08.520 --> 00:03:14.190
So the length is always one greater than the last index in our case length was eleven.

44
00:03:14.310 --> 00:03:20.010
So the greatest index that we have is ten that gives us uppercase.

45
00:03:20.010 --> 00:03:24.570
Strings are not the only things that are indexed by position in JavaScript.

46
00:03:24.570 --> 00:03:28.460
We'll see arrays later on which use the exact same syntax.

47
00:03:28.560 --> 00:03:29.730
They also have a length.

48
00:03:29.850 --> 00:03:31.860
So it's a pattern that comes up more than once.

49
00:03:31.860 --> 00:03:35.340
Let's say I had some long variable with some gibberish in it.

50
00:03:36.060 --> 00:03:37.940
Oh I messed myself up there.

51
00:03:37.950 --> 00:03:39.180
This works though.

52
00:03:39.510 --> 00:03:46.920
And if I wanted to access that last character I could do this gibberish of gibberish dot length minus

53
00:03:46.920 --> 00:03:51.840
one and that will give me the very last character find the length the string whatever it is.

54
00:03:51.840 --> 00:03:57.210
Subtract one and use that as an index and we get this character there.

55
00:03:57.660 --> 00:04:03.990
One less thing to know about strings and indices if we have let's go back to our fave song variable.

56
00:04:04.980 --> 00:04:13.260
If I wanted to change this Let's say I want to change the uppercase s to a uppercase D for Dauphine

57
00:04:13.380 --> 00:04:14.000
USA.

58
00:04:14.790 --> 00:04:20.310
If I tried to do that fave song of zero equals D.

59
00:04:21.060 --> 00:04:27.850
We look at fave song it's still Surfin USA so we can actually change strings this way.

60
00:04:27.900 --> 00:04:34.260
Strings are immutable in JavaScript meaning that the individual value is not changeable in some other

61
00:04:34.260 --> 00:04:37.430
languages you can manipulate one character at a time.

62
00:04:37.590 --> 00:04:44.190
If we wanted to create a string that was Irfan USA plus a D at the beginning we would have to make a

63
00:04:44.190 --> 00:04:50.120
brand new string and a new variable and take D and then add it to this substring which we haven't seen

64
00:04:50.120 --> 00:04:50.810
a to do yet.

65
00:04:51.390 --> 00:04:55.560
So just know that if you're coming from another programming language or if it seems logical to you that

66
00:04:55.560 --> 00:05:01.340
you should be able to change individual characters you cannot do that in a given string that string

67
00:05:01.340 --> 00:05:02.750
is the same it's immutable.
