1
00:00:00,740 --> 00:00:03,420
We just finished up our compare passwords function.

2
00:00:03,440 --> 00:00:06,160
There is one tiny little step I missed inside of here.

3
00:00:06,170 --> 00:00:11,810
Remember that when we call s script what we actually get back is a buffer and we saw that back here

4
00:00:11,810 --> 00:00:13,460
inside the documentation.

5
00:00:13,550 --> 00:00:16,250
So when we call s script we get back a buffer.

6
00:00:16,250 --> 00:00:20,900
They call it inside the documentation a derived key and again a buffer is like an array that has some

7
00:00:20,900 --> 00:00:22,610
raw data inside of it.

8
00:00:22,670 --> 00:00:28,550
So when we call s script right here hash supplied is actually a buffer so we should probably update

9
00:00:28,550 --> 00:00:32,390
the name of that and more importantly we need to make sure that we try to do the comparison against

10
00:00:32,390 --> 00:00:33,090
hash.

11
00:00:33,110 --> 00:00:38,280
You have to take that buffer and turn it into an actual string so I'm going to add on to the end of

12
00:00:38,340 --> 00:00:39,690
hash supplied.

13
00:00:39,690 --> 00:00:43,890
We're going to call two string hacks to make sure that we take the buffer.

14
00:00:43,890 --> 00:00:45,510
Turn it into a string.

15
00:00:45,510 --> 00:00:49,980
I mean optionally if you want to you can update the name of that variable as well to something a little

16
00:00:49,980 --> 00:00:52,890
bit more appropriate just to indicate that it is a buffer.

17
00:00:52,920 --> 00:00:55,060
So how about like hash.

18
00:00:55,560 --> 00:01:01,960
I don't know yes hashed supplied love or something like that.

19
00:01:02,150 --> 00:01:06,050
I guess that makes at least a little bit more sense and kind of clarifies what's going on here.

20
00:01:07,830 --> 00:01:11,900
Okay so now that we've got compare passwords fixed up let's save this.

21
00:01:12,040 --> 00:01:17,230
We're going to go back over to our index not j ust file we're gonna find our post request handler for

22
00:01:17,230 --> 00:01:23,730
dealing with a submission of our sign in form so then inside of here we currently have a very simplistic

23
00:01:23,850 --> 00:01:26,340
password comparison test right here.

24
00:01:26,340 --> 00:01:31,400
So we need to essentially update that if statement to use the compare passwords method.

25
00:01:31,410 --> 00:01:32,740
We just put together.

26
00:01:33,150 --> 00:01:36,110
Remember the two arguments you compared passwords.

27
00:01:36,330 --> 00:01:41,100
The first argument is going to password that is saved inside of our database inside of our post request

28
00:01:41,100 --> 00:01:41,520
handler.

29
00:01:41,520 --> 00:01:46,890
We already found the user inside of our database so that user object right there has the password property

30
00:01:47,130 --> 00:01:52,230
that we want to use as the first argument to compare passwords then the second argument is going to

31
00:01:52,230 --> 00:01:58,020
be the password that the user supplied that is available inside this post requests handler on the password

32
00:01:58,020 --> 00:02:00,570
variable right there that we just pulled out of record body.

33
00:02:00,590 --> 00:02:06,640
I remember rect body is all the information that was entered into our form we essentially have everything

34
00:02:06,640 --> 00:02:18,260
we need to finish this up right above my if statement I'll say const valid password is a weight users

35
00:02:18,260 --> 00:02:25,080
repo compare passwords and then as a first argument we're gonna stick in a password that we got from

36
00:02:25,080 --> 00:02:31,140
our database which is user password and as the second argument we'll throw in the password that was

37
00:02:31,140 --> 00:02:39,200
just supplied to us by the user it's all put in password like so it's now valid password is going to

38
00:02:39,200 --> 00:02:44,660
be true if the password is valid and false if it is not valid so we need to update our if statement

39
00:02:44,660 --> 00:02:51,950
check right here it's all say if not valid password that that thing is not true then let's return early

40
00:02:51,950 --> 00:02:56,780
from this function and we'll send back to the user something it says hey sorry but that's a bad password

41
00:02:59,040 --> 00:02:59,280
OK.

42
00:02:59,330 --> 00:03:02,820
Let's save this and test out this whole entire flow.

43
00:03:02,900 --> 00:03:05,150
It's going to go back to my local host three thousand.

44
00:03:05,150 --> 00:03:11,470
I'm going to make sure I go to sign out so now logged out.

45
00:03:11,610 --> 00:03:16,610
I'm going to go to sign up and I got to create an entirely new account just to test out this sign and

46
00:03:16,620 --> 00:03:17,600
flow.

47
00:03:17,660 --> 00:03:27,460
It's gonna make a new account called test 10 at test dot com with a password of password account created.

48
00:03:27,480 --> 00:03:32,000
Now I'm going to sign out once I'm again signed out.

49
00:03:32,010 --> 00:03:36,300
I'll then attempt to sign in as that user I just made a second ago.

50
00:03:36,360 --> 00:03:46,310
So I'll go to slash sign in I'm going to try to sign in with test 10 at test dot com and password hit

51
00:03:46,310 --> 00:03:52,360
it and I'm signed in so that's pretty much it now to really test out this flow.

52
00:03:52,360 --> 00:03:56,820
I'm gonna make sure that I sign out once again I'll go to sign in.

53
00:03:56,820 --> 00:03:59,070
I'll put in test ten at test dot com.

54
00:03:59,070 --> 00:04:03,030
But this time I'm going to put in an invalid password definitely invalid right there.

55
00:04:03,120 --> 00:04:06,950
I'll try to sign in and I get invalid password okay.

56
00:04:06,990 --> 00:04:11,630
So that is pretty much the entire authentication process from start to finish.

57
00:04:11,700 --> 00:04:15,270
We put it altogether more or less from scratch inside of our project.

58
00:04:15,270 --> 00:04:18,840
The only really big outside dependency we used was Cookie session.

59
00:04:18,840 --> 00:04:23,340
I would have loved to put together our own custom cookie middleware but like I said there are so many

60
00:04:23,340 --> 00:04:27,840
corner cases you need to be aware of that it really was not going to be worth our time to try to assemble

61
00:04:27,840 --> 00:04:28,800
that thing from scratch.

62
00:04:29,880 --> 00:04:35,240
Now before we kind of take a pause here and say hey this is like a really great example of authentication.

63
00:04:35,370 --> 00:04:38,730
There are a couple of updates so I'd love to do to our project.

64
00:04:38,760 --> 00:04:43,300
So just a couple locations so we can add in some code to clean up the overall structure.

65
00:04:43,320 --> 00:04:45,670
So our goal here we're going to take a pause.

66
00:04:45,720 --> 00:04:50,310
We're going to start to refactor some the code and better structure our project and once we're done

67
00:04:50,310 --> 00:04:55,020
with that we're going to essentially have a really good solid starting point for any app that you want

68
00:04:55,020 --> 00:05:00,800
to start to tackle in the future that requires authentication so quick pause right here.

69
00:05:00,800 --> 00:05:03,640
We'll start to do a little bit of refactor in just a moment.
