1
00:00:00,090 --> 00:00:03,270
Next up it's time for a quick quiz on strings.

2
00:00:03,270 --> 00:00:08,580
We've covered a lot so far around strings working with quote single and double quotes talking about

3
00:00:08,640 --> 00:00:10,800
indices different methods.

4
00:00:10,800 --> 00:00:14,660
So there are a few challenges here but they follow the same format as the other quizzes.

5
00:00:15,090 --> 00:00:20,120
So I'll show you a little question I'd like to try and evaluate it without typing the code.

6
00:00:20,340 --> 00:00:21,420
Pause if needed.

7
00:00:21,840 --> 00:00:22,890
So here's the first one.

8
00:00:22,890 --> 00:00:26,420
What is the value of age after this code runs.

9
00:00:26,610 --> 00:00:29,010
And then here's the next one.

10
00:00:29,100 --> 00:00:31,020
What does this evaluate to.

11
00:00:31,050 --> 00:00:33,940
So no variable just what does this evaluate to.

12
00:00:34,020 --> 00:00:36,750
If you were to run this in your console what would you get back.

13
00:00:38,190 --> 00:00:39,240
The next one.

14
00:00:39,390 --> 00:00:41,070
What does this evaluate to.

15
00:00:41,190 --> 00:00:46,320
Same idea no variable but if you were to copy and paste this into your console which I hope you don't

16
00:00:46,320 --> 00:00:49,040
do what would you get back.

17
00:00:49,350 --> 00:00:50,760
And another one.

18
00:00:50,760 --> 00:00:54,750
What is the value of the song variable after this code runs.

19
00:00:54,840 --> 00:00:56,880
So after both lines are done.

20
00:00:56,880 --> 00:01:02,990
If you typed song into the console what value will it hold next.

21
00:01:03,000 --> 00:01:06,030
What is the value of the cleaned input variable.

22
00:01:06,030 --> 00:01:07,300
There are two variables here.

23
00:01:07,320 --> 00:01:10,700
I'm interested in what the value of the second one would hold her.

24
00:01:10,710 --> 00:01:11,460
What does it hold.

25
00:01:11,460 --> 00:01:15,230
After these lines run yet another one.

26
00:01:15,310 --> 00:01:20,540
What is the value of the index variable here so we have two variables.

27
00:01:20,540 --> 00:01:24,230
What is the value of index after this code runs.

28
00:01:24,350 --> 00:01:25,670
And one more.

29
00:01:25,670 --> 00:01:28,430
What is the value of index in this scenario.

30
00:01:28,430 --> 00:01:28,960
Almost there.

31
00:01:28,970 --> 00:01:29,660
We have two more.

32
00:01:30,140 --> 00:01:30,860
Here's this one.

33
00:01:30,860 --> 00:01:32,510
What is the value of index.

34
00:01:32,510 --> 00:01:33,180
Same name.

35
00:01:33,240 --> 00:01:35,600
But it's not related to the first one.

36
00:01:35,690 --> 00:01:37,780
What is the value inside that variable.

37
00:01:38,000 --> 00:01:43,460
When these lines are done and then the very last one slightly longer.

38
00:01:43,460 --> 00:01:45,200
What does this evaluate to.

39
00:01:45,230 --> 00:01:46,250
So no variables.

40
00:01:46,340 --> 00:01:50,050
But if you were to run this line in your console what would you see.

41
00:01:50,060 --> 00:01:50,510
All right.

42
00:01:50,810 --> 00:01:56,170
So if you need to pause on any of those questions I highly highly recommend you take these.

43
00:01:56,250 --> 00:01:59,470
And I want to say you take them seriously depending on your skill level.

44
00:01:59,470 --> 00:02:00,310
These might be easy.

45
00:02:00,320 --> 00:02:03,050
These might be challenging but take your time.

46
00:02:03,080 --> 00:02:04,420
Make sure you can get through these.

47
00:02:04,460 --> 00:02:06,650
And let's talk about the answers.

48
00:02:06,710 --> 00:02:07,030
All right.

49
00:02:07,340 --> 00:02:13,160
So this very first one when we take two strings and we add them together it is called concatenation

50
00:02:13,790 --> 00:02:18,680
and we end up with a new string where those two strings have been shoved together.

51
00:02:18,950 --> 00:02:22,350
So age if I can spell it not on message.

52
00:02:22,350 --> 00:02:27,180
Our age ends up as 50 for OK.

53
00:02:27,730 --> 00:02:28,380
This one.

54
00:02:28,510 --> 00:02:31,750
We have the string pecan pie or pecan pie.

55
00:02:31,750 --> 00:02:33,700
And we're looking for index seven.

56
00:02:33,730 --> 00:02:35,410
So what does that give us.

57
00:02:35,410 --> 00:02:37,640
Well I.

58
00:02:37,810 --> 00:02:42,310
And the reason I chose this string is that I wanted to make sure that you understand it's not just letters

59
00:02:42,370 --> 00:02:45,250
spaces and any character and a string counts.

60
00:02:45,340 --> 00:02:49,440
We start at 0 0 1 2 3 4 5 6 7.

61
00:02:49,440 --> 00:02:53,010
Is I another similar question here.

62
00:02:53,020 --> 00:02:55,200
What does this evaluate to.

63
00:02:55,300 --> 00:03:02,620
This one is slightly different because there is no index of three in the string PUP the highest index

64
00:03:02,650 --> 00:03:05,080
is two the length is three.

65
00:03:05,080 --> 00:03:05,940
One two three.

66
00:03:06,080 --> 00:03:07,830
But indexes start at zero.

67
00:03:07,840 --> 00:03:09,040
So the highest index is two.

68
00:03:09,040 --> 00:03:11,610
So we get undefined.

69
00:03:11,760 --> 00:03:15,380
Next up what is the value of song.

70
00:03:15,390 --> 00:03:23,760
So this one is it's kind of tricky I guess because we are upper casing song with two uppercase but we're

71
00:03:23,760 --> 00:03:25,530
not actually storing the result anywhere.

72
00:03:25,530 --> 00:03:27,900
We're not saving it to the song variable.

73
00:03:27,900 --> 00:03:30,120
So song is actually unchanged.

74
00:03:30,120 --> 00:03:33,540
We have let song equals London calling.

75
00:03:33,540 --> 00:03:36,300
And then afterwards we are upper casing it.

76
00:03:36,360 --> 00:03:41,250
So we do get this string returned to us but song is unaltered.

77
00:03:41,520 --> 00:03:45,750
The song remains the same top notch led zeppelin reference there.

78
00:03:46,020 --> 00:03:46,400
OK.

79
00:03:46,470 --> 00:03:49,370
Next up what is the value of cleaned input.

80
00:03:49,440 --> 00:03:54,960
So we have our string user input set to Todd at gmail dot com capitalized Todd.

81
00:03:54,960 --> 00:03:58,350
There's space at the beginning and we are trimming it first.

82
00:03:58,500 --> 00:04:00,890
So the space at the beginning will go away.

83
00:04:00,900 --> 00:04:03,850
Then we are lower casing the results of that trim.

84
00:04:04,140 --> 00:04:06,820
So lower casing it means everything will be lower cased.

85
00:04:06,840 --> 00:04:11,340
So we'll have lower case Todd at gmail dot com instead of cleaned input.

86
00:04:11,340 --> 00:04:12,480
So if we test it out

87
00:04:15,510 --> 00:04:22,300
if I run it take a look at cleaned input that's what we get user input is unchanged.

88
00:04:22,320 --> 00:04:25,240
Next up what is the value of index here.

89
00:04:25,260 --> 00:04:28,450
So we have a variable called Park set to Yellowstone.

90
00:04:28,470 --> 00:04:35,550
The string and then we have a variable called index which is the result of calling index of stone.

91
00:04:35,670 --> 00:04:41,050
So the word Stone does occur instead of park but it's not an exact match.

92
00:04:41,190 --> 00:04:42,460
Case does matter.

93
00:04:42,600 --> 00:04:49,760
And I used an uppercase s for stone versus in the park variable the stone or the S in stone is lower

94
00:04:49,760 --> 00:04:50,550
case.

95
00:04:50,580 --> 00:04:51,960
So what does that mean.

96
00:04:52,140 --> 00:04:54,540
We'll get index of negative 1.

97
00:04:54,630 --> 00:05:03,040
We just tested out here we look at index it is negative 1 which is what index f returns when it doesn't

98
00:05:03,040 --> 00:05:04,430
find that value.

99
00:05:05,060 --> 00:05:07,140
Here's another index of example.

100
00:05:07,450 --> 00:05:08,560
Yellow is a variable.

101
00:05:08,590 --> 00:05:11,900
We set it to go away two exclamation points.

102
00:05:11,920 --> 00:05:18,370
What is the value of index where index is a variable set to the result of yellow dot index of exclamation

103
00:05:18,370 --> 00:05:19,000
point.

104
00:05:19,000 --> 00:05:22,620
What does index of return when we pass an exclamation point.

105
00:05:22,690 --> 00:05:24,840
There are two exclamation points.

106
00:05:25,120 --> 00:05:30,370
I wanted to make sure you understand we only get the first matching index which is going to be this

107
00:05:30,370 --> 00:05:39,280
character here and that has an index of 0 1 2 3 4 5 6 7 we can verify that here or not.

108
00:05:39,760 --> 00:05:45,140
I use the variable index twice just to refresh the page and recall that line.

109
00:05:45,340 --> 00:05:49,690
And now if we look at index we get seven and then we've got this last one.

110
00:05:49,960 --> 00:05:53,110
What does this evaluate two slightly trickier.

111
00:05:53,110 --> 00:05:58,870
We have garbage it's all caps so I guess it's garbage dot slice too.

112
00:05:58,990 --> 00:06:04,050
So when we slice with one number one index we go from that index to the end of the string.

113
00:06:04,060 --> 00:06:06,520
So index of 2 is 0 1 2.

114
00:06:06,520 --> 00:06:13,780
So we end up with our beige garbage with the exclamation point that substring then we replace the B

115
00:06:14,320 --> 00:06:16,540
with an empty string.

116
00:06:16,540 --> 00:06:19,240
Now this is actually kind of hard to see here.

117
00:06:20,530 --> 00:06:26,350
I didn't realize when I blew it up as the image here it looks like a space.

118
00:06:26,410 --> 00:06:27,760
So that's my fault.

119
00:06:27,980 --> 00:06:29,240
I'll have to add a note.

120
00:06:29,530 --> 00:06:35,350
Anyway it is an empty string but if you treated it as a space as long as you understand how replace

121
00:06:35,350 --> 00:06:36,040
works.

122
00:06:36,160 --> 00:06:36,850
That's all good.

123
00:06:37,180 --> 00:06:45,010
So what we should end up with here if we run it we have garbage we slice so we end up with our bridge

124
00:06:45,370 --> 00:06:50,800
and then we replace the B with nothing an empty string which gives us rage.

125
00:06:50,800 --> 00:06:58,390
So we go from garbage to hard rage and then that goes to rage with the exclamation point.

126
00:06:58,930 --> 00:07:04,450
So if you treated it as a space we would end up with rage like this.

127
00:07:04,990 --> 00:07:09,320
Either one is totally valid I apologize if that was confusing.

128
00:07:09,400 --> 00:07:10,770
Now we've made it through the quiz.

129
00:07:10,870 --> 00:07:15,970
We have a little bit more to talk about with strings and then we're gonna move on to undefined and no.

130
00:07:16,120 --> 00:07:20,680
And then we're really going to open things up and get into conditional logic and adding real logic and

131
00:07:20,680 --> 00:07:22,600
decision making into our code.
