WEBVTT
1
00:00:00.900 --> 00:00:05.340
Well we had a really big sidetrack in putting together that users repository but now that we've got

2
00:00:05.370 --> 00:00:10.110
all that code put together we can start to focus on signing up users to our application once again.

3
00:00:10.110 --> 00:00:15.540
Now remember we are focused on having administrators sign up to our app because only administrators

4
00:00:15.540 --> 00:00:21.420
can sign into the application and then start to change existing items or create products or delete products

5
00:00:21.420 --> 00:00:23.180
or whatever else.

6
00:00:23.240 --> 00:00:28.350
So to get back into the world of handling sign up of our application I want to tell you a little bit

7
00:00:28.380 --> 00:00:32.310
about the general sign up process that we're going to follow.

8
00:00:32.540 --> 00:00:32.860
All right.

9
00:00:32.890 --> 00:00:34.490
So here's what we are going to be doing.

10
00:00:36.280 --> 00:00:41.950
Whenever a user submits the sign up form to our application we're going to run a couple of little checks

11
00:00:42.010 --> 00:00:44.220
inside of our post request handler.

12
00:00:44.290 --> 00:00:48.750
We're going to first check to see if another user already signed up at the provided email.

13
00:00:48.760 --> 00:00:52.680
We're only going to allow one unique email for each user.

14
00:00:52.720 --> 00:00:56.890
So in other words an email can only be used one time to sign up for an account.

15
00:00:56.980 --> 00:00:59.290
If that email has been used that's pretty much it.

16
00:00:59.290 --> 00:01:05.920
That e-mail is associated with that user and nothing else is going to happen so if a user already signed

17
00:01:05.920 --> 00:01:10.630
up with the given email or the email that is supplied inside the form we're going to show in error to

18
00:01:10.630 --> 00:01:12.030
the user and tell them sorry.

19
00:01:12.120 --> 00:01:16.010
But this e-mail is in use after that.

20
00:01:16.010 --> 00:01:21.380
Well then also check to see if the password and password confirmation are different if they're different.

21
00:01:21.380 --> 00:01:26.750
That means that the user likely made a typo when they entered in the password or the password confirmation.

22
00:01:26.750 --> 00:01:29.910
And so we will also show an error to the user in that case as well.

23
00:01:30.700 --> 00:01:35.020
If the user gets past both these checks that means that we need to create an account for this user or

24
00:01:35.020 --> 00:01:37.830
some kind of record to represent them.

25
00:01:37.860 --> 00:01:41.750
Well this gets exactly what it means to create an account for a user in just a little bit.

26
00:01:41.770 --> 00:01:47.100
We're gonna have a much kind of larger discussion about some of the ideas behind authentication inside

27
00:01:47.110 --> 00:01:51.850
of a web app in general to help you understand like what authentication or signing up and signing in

28
00:01:51.850 --> 00:01:53.260
is really about.

29
00:01:53.290 --> 00:01:57.680
But first let's just implement these checks really quickly.

30
00:01:57.700 --> 00:01:58.180
All right.

31
00:01:58.300 --> 00:02:02.140
So to implement those checks I can go back to my index dot GSA file.

32
00:02:02.140 --> 00:02:05.180
I'm going to find our post request handler right here.

33
00:02:05.180 --> 00:02:10.270
So remember at present to your console logging out wrecked body and that is going to be an object that

34
00:02:10.270 --> 00:02:15.430
contains all the properties inside of the form specifically the name off of each of those different

35
00:02:15.430 --> 00:02:16.860
inputs.

36
00:02:16.900 --> 00:02:21.910
Let's try to resubmit this form right here and just see that console log once again to get a quick reminder

37
00:02:21.910 --> 00:02:27.700
of the structure of that object so to do so I'm going to go back to my browser I can go to look at those

38
00:02:27.700 --> 00:02:36.710
three thousand I'll see my form once again I'll enter in an email of test at test dot com some password

39
00:02:36.740 --> 00:02:44.340
and some password confirmation and then submit the form then we can go back over to our terminal and

40
00:02:44.340 --> 00:02:48.000
we should see an email password and password confirmation.

41
00:02:48.000 --> 00:02:50.830
So that is what the rect body object contains.

42
00:02:51.450 --> 00:02:57.030
So in order to do these comparisons or these checks of the users email and the password in password

43
00:02:57.030 --> 00:03:03.030
confirmation we're going to reference the wrecked body dot email property and password and password

44
00:03:03.030 --> 00:03:09.050
confirmation and so on let's go back over to our post request handler right here and start to implement

45
00:03:09.050 --> 00:03:16.620
some of those checks so instead of here I'm going to first D structure the email password and password.

46
00:03:16.710 --> 00:03:25.100
Confirmation properties out of the wreck dot body object then after that we need to take that email

47
00:03:25.310 --> 00:03:28.190
and check to see if a user has signed up with it before.

48
00:03:28.640 --> 00:03:32.120
So in other words we need to take a look at our users repository.

49
00:03:32.240 --> 00:03:37.700
So we need to get access to this inside of our index such as file in order to access the code we wrote

50
00:03:37.700 --> 00:03:39.550
inside that file inside of index.

51
00:03:39.600 --> 00:03:45.820
J.S. we have to go up to the top of index dot J.S. and add a require statement for its at the top up

52
00:03:45.820 --> 00:03:46.080
here.

53
00:03:46.090 --> 00:03:54.190
I'll say const users repo short for repository and then to get the code inside that file that we just

54
00:03:54.190 --> 00:04:03.080
put together it will do a require statement of repositories users notice that I've got the dot slash

55
00:04:03.110 --> 00:04:03.930
inside of here.

56
00:04:03.980 --> 00:04:06.790
Remember that means look in the current directory.

57
00:04:06.890 --> 00:04:13.960
So in the same directory as the index dot J S file inside there find the repositories folder and then

58
00:04:13.960 --> 00:04:18.440
inside there find these file called users.

59
00:04:18.490 --> 00:04:21.410
Now we've got access to the instance of our repository right there.

60
00:04:21.460 --> 00:04:25.210
So we can use all the same methods on it that we've been testing throughout the last couple of videos

61
00:04:27.050 --> 00:04:31.360
to back down side by post request handler in order to check to see if someone has already signed up

62
00:04:31.360 --> 00:04:32.490
at the given email.

63
00:04:32.520 --> 00:04:39.780
We can do a concert is existing user is a weight users repo.

64
00:04:39.780 --> 00:04:44.950
Dot we're going to use the method we just put together of get one by.

65
00:04:45.140 --> 00:04:55.680
So get one by and we're going to put in our filter objects of email equal to the email that was provided

66
00:04:56.430 --> 00:05:01.780
the key and the value here are identical so we can shorten that down to just be email like so.

67
00:05:01.790 --> 00:05:05.970
So this is how we're gonna check to see if someone has already signed up with a given email before.

68
00:05:06.020 --> 00:05:08.770
You'll notice that I assigned it to a variable of existing user.

69
00:05:08.810 --> 00:05:13.920
So that just means to say this is an existing user who has already signed up to our application.

70
00:05:14.270 --> 00:05:19.460
So if existing user is defined that means that someone has already used the email of email and so in

71
00:05:19.460 --> 00:05:24.820
that case we should show a error message to the user if existing user is undefined.

72
00:05:24.830 --> 00:05:29.300
That means that no one has ever used that email before and we have passed the first check to allow a

73
00:05:29.300 --> 00:05:38.220
user to sign up so let's add in a check for this I'll say if existing user is defined then let's return

74
00:05:38.250 --> 00:05:40.620
out of this request handler right away.

75
00:05:42.580 --> 00:05:47.770
And I'll show an error message to the user by doing a red dot sent and we'll send back some just kind

76
00:05:47.770 --> 00:05:54.630
of text message that says hey here's why you failed to sign up so I'll say something like email in use

77
00:05:54.960 --> 00:05:56.940
like so now.

78
00:05:56.940 --> 00:05:58.120
One last thing inside of here.

79
00:05:58.230 --> 00:06:02.910
We're making use of the awake keyword remember anytime we use the awake keyword we have to mark the

80
00:06:03.090 --> 00:06:10.700
enclosing function as being async so I'll say async and await.

81
00:06:10.760 --> 00:06:11.020
All right.

82
00:06:11.120 --> 00:06:14.920
So I think we're ready for a test here now in order to test this out.

83
00:06:14.930 --> 00:06:20.420
We need to make sure that we actually have a user inside of our users not just on file with an email

84
00:06:20.450 --> 00:06:23.540
equal to whatever we're going to submit inside of our form.

85
00:06:23.540 --> 00:06:28.130
So we need to open up the users not just on file that was created inside of our root project directory

86
00:06:28.520 --> 00:06:32.170
when we started up our server.

87
00:06:32.380 --> 00:06:33.590
There it is right here.

88
00:06:33.670 --> 00:06:38.920
So it's empty by default because we just recreated this file and I'm going to manually add in a new

89
00:06:38.920 --> 00:06:39.850
user to this thing.

90
00:06:39.880 --> 00:06:45.000
So I know exactly what email to use to sign up in order to get that error message to trigger.

91
00:06:45.090 --> 00:06:50.800
So all adding an object with an email of test at test AECOM.

92
00:06:50.830 --> 00:06:51.990
This is a Jason File.

93
00:06:52.000 --> 00:06:55.930
So make sure that you're using double quotes inside of you're not single quotes.

94
00:06:55.930 --> 00:07:02.330
And he needs to have the quotes around email and the actual value that we enter as well so then I'll

95
00:07:02.330 --> 00:07:05.160
save this file.

96
00:07:05.380 --> 00:07:07.940
I'll go back over to my browser.

97
00:07:08.090 --> 00:07:15.190
I'm going to manually navigate to local three thousand once again and I'll enter test at test dot com.

98
00:07:15.210 --> 00:07:20.250
So that's definitely an email that's in use It'll enter in some random passwords as well.

99
00:07:20.250 --> 00:07:24.480
And then hit sign up and see email and use perfect.

100
00:07:25.070 --> 00:07:25.600
OK.

101
00:07:25.630 --> 00:07:28.700
So we're now handling that error correctly.

102
00:07:28.730 --> 00:07:32.150
Now we can do the same thing for the password comparison as well.

103
00:07:32.150 --> 00:07:37.620
I know this is a long video but let's just do that really quickly so we will add in a check here we

104
00:07:37.620 --> 00:07:43.770
will say if the password and password confirmation are not equal to each other.

105
00:07:43.860 --> 00:07:47.210
That means that the user likely added in a typo accidentally.

106
00:07:47.270 --> 00:07:51.480
So we'll save password is not equal to password confirmation

107
00:07:54.100 --> 00:07:57.910
then we need to return immediately from this function once again because we don't want to do anything

108
00:07:57.910 --> 00:08:06.360
else inside of here and we'll send back an air of something like passwords must match its I'll say this

109
00:08:06.360 --> 00:08:11.510
again I'll go back over to look at those three thousand.

110
00:08:11.710 --> 00:08:17.050
I'm not going to enter an email that is definitely not in use and I'll enter in two passwords that do

111
00:08:17.050 --> 00:08:24.940
not match at all already hit sign up and I see it passwords must match OK so both those checks look

112
00:08:24.940 --> 00:08:25.960
good.

113
00:08:26.140 --> 00:08:29.800
Now let's make sure that we can get past both those checks and get to the part where we can actually

114
00:08:29.800 --> 00:08:35.410
create an account for this user so to get past both those checks I'll enter in an email that is definitely

115
00:08:35.410 --> 00:08:44.220
unique and I'll enter in two identical passwords then sign up and I see account created okay.

116
00:08:44.310 --> 00:08:47.610
So overall I'd say this all looks pretty good.

117
00:08:47.740 --> 00:08:48.850
Let's take a quick pause right here.

118
00:08:48.880 --> 00:08:52.570
When we come back the next video we're going to start to understand what it really means to create an

119
00:08:52.570 --> 00:08:57.290
account for a user and how we actually mark them as being signed into our applications somehow.

120
00:08:57.370 --> 00:08:59.500
So quick puzzle take care of that in just a moment.
