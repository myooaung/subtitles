1
00:00:01,000 --> 00:00:05,520
Let's figure out how to test that code that we just wrote without using any outside library.

2
00:00:05,530 --> 00:00:10,900
Now when I say outside library I'm talking about like any third party package or anything like that.

3
00:00:11,020 --> 00:00:15,730
We are going to eventually still use the some functions out of the know jazz standard library but just

4
00:00:15,730 --> 00:00:19,730
like one or two just to make our lives a little bit slightly easier.

5
00:00:19,740 --> 00:00:25,830
OK so to get started I can go back over to my editor inside of my project directory.

6
00:00:25,840 --> 00:00:32,170
I'm going to create a new file called index dot test dot J.S. but this is the first thing is kind of

7
00:00:32,170 --> 00:00:35,320
interesting whenever you write some test related code.

8
00:00:35,320 --> 00:00:40,090
We're always going to place it in a separate file completely separate from whatever code we are trying

9
00:00:40,090 --> 00:00:41,130
to test.

10
00:00:41,320 --> 00:00:45,820
The reason for this is that when we start to think about automated testing we're really talking about

11
00:00:45,820 --> 00:00:49,540
running our entire application in two different contexts.

12
00:00:49,540 --> 00:00:54,700
The first context would be like if we wanted to run our program as usual and actually make use of the

13
00:00:54,700 --> 00:01:00,940
code inside of our very normal very usual type of program so if we were doing that for our project we

14
00:01:00,940 --> 00:01:07,300
would run a node index J.S. at our command line and we would do that to specifically execute this file

15
00:01:07,300 --> 00:01:10,890
right here as soon as we start to want to test this code.

16
00:01:10,890 --> 00:01:15,990
However we would not want to put some code inside of here that's going to actually test this stuff and

17
00:01:15,990 --> 00:01:17,150
just leave it inside of here.

18
00:01:18,460 --> 00:01:22,210
Think about if we had that same approach we just discussed a moment ago where we had something like

19
00:01:22,210 --> 00:01:28,600
this at the bottom to file if we'd left this code inside of here and then ran our project every single

20
00:01:28,600 --> 00:01:34,330
time we ran our project we would see a console log of 1 2 3 and I would start to muddy up our program

21
00:01:34,330 --> 00:01:39,220
really quickly because we would get some console logs and whatnot completely unrelated to the actual

22
00:01:39,220 --> 00:01:40,640
purpose of our program.

23
00:01:40,690 --> 00:01:46,580
It's solely testing code so whenever we write some testing code we're almost always going to it inside

24
00:01:46,580 --> 00:01:52,050
of some other file very commonly in the community.

25
00:01:52,050 --> 00:01:56,760
We're going to name these different testing files that we create as the name of the file that we're

26
00:01:56,760 --> 00:02:03,210
trying to essentially test or make use of some code from dot test dot J.S. now putting in that extension

27
00:02:03,240 --> 00:02:07,770
of dot test doesn't actually change the meaning of the file or anything like that.

28
00:02:07,860 --> 00:02:09,990
It is solely an identifier.

29
00:02:09,990 --> 00:02:17,400
We could just as easily called it something like index dash test not J.S. but again usually by convention

30
00:02:18,120 --> 00:02:26,040
we will call it dot test J then inside of here in order to write a test without any outside library.

31
00:02:26,230 --> 00:02:29,950
We're going to do it in the most simple basic straightforward way possible.

32
00:02:30,010 --> 00:02:32,410
Let me tell you right now there is no secret to this.

33
00:02:32,450 --> 00:02:36,230
There's no secret in order to write a very simple and straightforward test.

34
00:02:36,310 --> 00:02:40,300
We're just going to require in our function we're going to call it.

35
00:02:40,300 --> 00:02:44,800
We're going to get some results out and we're just going to make sure that the result that we got is

36
00:02:44,800 --> 00:02:45,910
what we kind of expect.

37
00:02:46,570 --> 00:02:48,960
So let me show you at the very top.

38
00:02:49,210 --> 00:02:57,050
We will require in the before each function that we just wrote from the index file and then going to

39
00:02:57,050 --> 00:02:58,250
call the for each function

40
00:03:01,360 --> 00:03:04,500
and when I call it I'm going to pass in some totally reasonable arguments.

41
00:03:04,510 --> 00:03:05,980
So like 1 2 and 3

42
00:03:08,880 --> 00:03:15,150
then inside of here let's try to count up or sum up all the values inside the array in order to do so

43
00:03:15,240 --> 00:03:17,400
let's create a counter variable right above.

44
00:03:17,730 --> 00:03:24,420
So I'll call this like let's some equal and initialize it to zero then inside this for each function

45
00:03:24,510 --> 00:03:30,030
I'll receive the value we are iterating over and I'm going to add it to some.

46
00:03:30,090 --> 00:03:37,090
So I'll say some equals some plus value and we could condense this down technically to just some plus

47
00:03:37,150 --> 00:03:44,820
equals value and then after that I will write out counseled out log some.

48
00:03:44,950 --> 00:03:48,240
This right here is a totally valid test to some degree.

49
00:03:48,550 --> 00:03:52,150
We're going to run our code and then console log out the results.

50
00:03:52,150 --> 00:03:56,280
The only downside to this kind of approach right here is that we are just console logging the value.

51
00:03:56,410 --> 00:04:01,060
And so it would still require you and I as developers to take a look at our terminal and verify that

52
00:04:01,060 --> 00:04:05,020
the value that we got out the some variable is what we expected to be.

53
00:04:05,020 --> 00:04:10,630
So you and I would really have to memorize that this test and inside of this test file is supposed to

54
00:04:10,630 --> 00:04:14,370
return six because that's what one plus two plus three is.

55
00:04:14,410 --> 00:04:18,830
So rather than making ourselves have to memorize that we should see a console log of six right here.

56
00:04:18,940 --> 00:04:26,730
Let's instead just write a little automated check so I'll say something like if some does not equal

57
00:04:26,800 --> 00:04:27,570
6.

58
00:04:27,720 --> 00:04:31,030
Then that means something must be really wrong with our code.

59
00:04:31,050 --> 00:04:39,930
So in that case I will throw a new error and say something like expected something array to equal 6

60
00:04:42,730 --> 00:04:43,450
and that's it.

61
00:04:43,450 --> 00:04:45,550
That is a valid test.

62
00:04:45,550 --> 00:04:46,890
We didn't right use any framework.

63
00:04:46,900 --> 00:04:48,280
We didn't use any outside library.

64
00:04:48,280 --> 00:04:53,490
We just wrote our own code to run an art project in some automated fashion.

65
00:04:53,520 --> 00:04:54,790
It's now to test this out.

66
00:04:54,790 --> 00:05:01,230
We can go back over to our terminal and run the index test dot J as file so I'll go back over inside

67
00:05:01,230 --> 00:05:04,410
of high dash I'll do node index dot test.

68
00:05:04,440 --> 00:05:10,780
J.S. I did not see any console log or anything like that which means all my tests ran successfully.

69
00:05:10,820 --> 00:05:15,720
It's now to really make sure that our tests are working the way we expect we can go back over and introduce

70
00:05:15,750 --> 00:05:18,080
an intentional break inside of our code.

71
00:05:18,090 --> 00:05:22,830
In other words I want to forcibly break my test right now to make sure that it kind of is technically

72
00:05:22,830 --> 00:05:24,960
doing what I would expect.

73
00:05:24,960 --> 00:05:30,840
So to make this thing break I'll change the some not equal six to some not equal seven so that's definitely

74
00:05:30,840 --> 00:05:31,770
an incorrect answer.

75
00:05:31,800 --> 00:05:38,730
So now I would expect to see a V air being thrown they'll say this go back over run it again.

76
00:05:38,880 --> 00:05:40,800
And now I can see a big error message.

77
00:05:40,860 --> 00:05:42,000
And so this is telling me that.

78
00:05:42,030 --> 00:05:42,780
Okay.

79
00:05:42,870 --> 00:05:46,720
Like yeah we are successfully running a test here okay.

80
00:05:46,750 --> 00:05:50,410
So I'm gonna change these some not equals seven back to six.

81
00:05:50,410 --> 00:05:51,630
Now why is this valuable.

82
00:05:51,640 --> 00:05:53,620
Like what have we really achieved here.

83
00:05:53,620 --> 00:05:58,240
Well this now means that we can go back to our index not just file and if we wanted to we could start

84
00:05:58,240 --> 00:06:03,940
to try to refactor our for each function we could tried to re implement it in a totally different fashion

85
00:06:04,690 --> 00:06:07,240
every single time we make a change to the code inside of here.

86
00:06:07,330 --> 00:06:13,450
We could rerun the index dot test dot J.S. file and as long as we don't see any error message at all

87
00:06:13,690 --> 00:06:21,480
it means that the changes that we just made two for each did not break anything inside of her at so

88
00:06:21,550 --> 00:06:22,820
let's try doing that right now.

89
00:06:22,840 --> 00:06:29,230
Let's try making a change to the for each function and see what effect it actually has.

90
00:06:29,240 --> 00:06:30,260
So how about this.

91
00:06:30,260 --> 00:06:35,390
How about instead of this kind of ugly classic for loop right here let's try using a different style

92
00:06:35,390 --> 00:06:35,790
of loop.

93
00:06:35,810 --> 00:06:42,810
Let's try using a for in loop gonna comment out the for loop that we have right there.

94
00:06:42,940 --> 00:06:50,710
I'll do a four let value or index excuse me in a r.

95
00:06:50,730 --> 00:06:51,210
There we go.

96
00:06:52,570 --> 00:06:58,280
So remember there is a for of loop and a for in loop four of is usually what is used to iterate over

97
00:06:58,280 --> 00:06:59,140
an array.

98
00:06:59,270 --> 00:07:04,230
If we use a four of then we're going to receive each value inside the array.

99
00:07:04,490 --> 00:07:10,220
But our our case we're going to use a four in because we do need to know the index of each element inside

100
00:07:10,220 --> 00:07:15,350
the array so we can pass that in as the second argument to our callback function.

101
00:07:15,380 --> 00:07:18,420
So that's why we're using index right here.

102
00:07:18,460 --> 00:07:28,130
So now we can try to call our f n with the value at a r r Index as the second argument will once again

103
00:07:28,130 --> 00:07:30,150
put in the index.

104
00:07:30,390 --> 00:07:35,720
Now I can save this and rather than rewriting some test code down here to verify that it works as expected

105
00:07:35,960 --> 00:07:39,790
instead I'll just go over to my terminal rerun node index test.

106
00:07:39,810 --> 00:07:45,350
J.S. I don't see any errors and that means that even though I just made a huge colossal change to my

107
00:07:45,350 --> 00:07:53,300
app or my implementation of for each I should say everything still works 100 percent as expected so

108
00:07:53,300 --> 00:07:57,930
that is the value in testing we can do some really sizable re factors like the one you see right here.

109
00:07:58,040 --> 00:08:02,870
And once again rather than writing out all the manual testing stuff down here and then taking a look

110
00:08:02,870 --> 00:08:07,520
at some console log or something like that we instead just run one simple command we didn't get any

111
00:08:07,520 --> 00:08:10,460
errors that means everything works as expected.

112
00:08:12,300 --> 00:08:14,380
OK so now we've seen some basics around this.

113
00:08:14,390 --> 00:08:15,930
Let's take a quick pause right here.

114
00:08:16,010 --> 00:08:19,240
When we come back the next video we're going to start to add in an additional function.

115
00:08:19,430 --> 00:08:23,630
In addition to for each and start to look at some other different scenarios in testing as well.
