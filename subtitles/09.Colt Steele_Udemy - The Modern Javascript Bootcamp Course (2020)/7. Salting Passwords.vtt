WEBVTT
1
00:00:00.980 --> 00:00:06.320
We just discussed hashing out passwords now hashing a password and storing the hash is more secure than

2
00:00:06.350 --> 00:00:09.130
just directly storing a password in plain text.

3
00:00:09.260 --> 00:00:11.840
But there is still a very big security hole with this approach.

4
00:00:11.840 --> 00:00:15.990
So in this video we're going to discuss what that security hole is and how to fix it.

5
00:00:16.040 --> 00:00:19.850
The first thing I want you to understand about this a little exploit and what we've discussed so far

6
00:00:20.300 --> 00:00:24.770
is that many users out there end up using some really common passwords.

7
00:00:24.800 --> 00:00:29.210
In other words different users use the same password very frequently.

8
00:00:29.210 --> 00:00:34.100
So chances are there are like millions of people out there today who use the password of password all

9
00:00:34.100 --> 00:00:35.000
over the place.

10
00:00:35.120 --> 00:00:40.150
Or one two three four five six or monkey or 30 or whatever else.

11
00:00:40.520 --> 00:00:43.220
So many different people use the same password.

12
00:00:43.580 --> 00:00:49.010
With that in mind a malicious user could exploit this kind of hashing setup that we put together by

13
00:00:49.010 --> 00:00:55.790
using something called a rainbow table attack but a rainbow table attack is is where a malicious user

14
00:00:55.850 --> 00:00:59.480
is going to get a list of all of those very common passwords.

15
00:00:59.480 --> 00:01:05.240
So maybe they've got a list of like 1000 of the most common passwords or even a hundred thousand they're

16
00:01:05.240 --> 00:01:10.190
then going to sit down and for every single one of those passwords they're going to compute the respective

17
00:01:10.190 --> 00:01:18.260
hash a build up this little lookup table then where they know that the hash of like 0 0 0 situates is

18
00:01:18.260 --> 00:01:21.960
what is produced by running monkey at three hashing algorithm.

19
00:01:22.000 --> 00:01:29.070
So they've got this very easy look up to go between a hash and a very specific password.

20
00:01:29.110 --> 00:01:30.340
So how is this relevant.

21
00:01:30.340 --> 00:01:36.400
Well imagine what would happen if a user a malicious user then got access to all the passwords that

22
00:01:36.400 --> 00:01:40.570
we have stored inside of our users not just on file in a Hash format.

23
00:01:40.570 --> 00:01:45.200
So these might be the passwords that we are storing in a very simple hash format right here.

24
00:01:45.490 --> 00:01:50.410
A malicious user would then go through this list of hash passwords they would look at each one one by

25
00:01:50.410 --> 00:01:55.000
one and they would check to see if there is a corresponding hash stored inside of this table.

26
00:01:55.380 --> 00:02:00.040
So they would say OK do I have any hash stored equal to S.B. 3 blah blah blah.

27
00:02:00.490 --> 00:02:04.130
They would then look through all these different hashes and I'd say nope don't have it.

28
00:02:04.300 --> 00:02:04.570
OK.

29
00:02:04.570 --> 00:02:06.790
Do I have a hash of it see 68.

30
00:02:06.790 --> 00:02:08.310
Nope don't have it.

31
00:02:08.560 --> 00:02:11.460
Do I have a hash of 0 0 see 2 8 5.

32
00:02:11.470 --> 00:02:14.170
Whoa look at that 0 0 2 8 5.

33
00:02:14.230 --> 00:02:21.040
That means that the person with that hash right there that must be the hash version of the password

34
00:02:21.190 --> 00:02:22.420
monkey.

35
00:02:22.480 --> 00:02:27.310
And so now a malicious user would know that the person with this password and their specific e-mail

36
00:02:27.310 --> 00:02:34.010
which is readable in plain text inside of our database has a password of monkey so with the rainbow

37
00:02:34.010 --> 00:02:39.230
table attack even though a user or a malicious user cannot go from a hash to a password they can do

38
00:02:39.230 --> 00:02:44.510
all this kind of free computing work up front and then use that to kind of backtrack or back calculate

39
00:02:44.720 --> 00:02:47.410
what all of our different users passwords were.

40
00:02:47.500 --> 00:02:53.090
Now of course in some cases users might have passwords hash that are completely unpredictable.

41
00:02:53.150 --> 00:02:58.700
In other words a malicious user would probably not have an entry inside this table with a password entry

42
00:02:58.700 --> 00:03:05.000
of like my pass blah Ludlow Lao word or something like that.

43
00:03:05.030 --> 00:03:09.500
So if we have a user with a sufficiently random password this remote table attack would probably not

44
00:03:09.500 --> 00:03:10.940
work against it.

45
00:03:10.940 --> 00:03:13.390
But if a user is using these very common passwords.

46
00:03:13.430 --> 00:03:20.110
Oh yeah definitely we could be vulnerable to this rainbow table attack approach so that's this remote

47
00:03:20.110 --> 00:03:21.010
table attack.

48
00:03:21.010 --> 00:03:22.990
How are we going to defend against it.

49
00:03:22.990 --> 00:03:28.890
Well this is where we're going to add in one additional step to our password storage process.

50
00:03:28.960 --> 00:03:30.130
So here's what we're going to do.

51
00:03:30.190 --> 00:03:35.500
We're going to add in an additional random string of characters to every password that we hash called

52
00:03:35.530 --> 00:03:37.000
a salt.

53
00:03:37.000 --> 00:03:42.070
So whenever we are about to throw a password through a hashing algorithm we're going to add in this

54
00:03:42.130 --> 00:03:46.230
randomly generated string of characters every single time a user signs up.

55
00:03:46.250 --> 00:03:51.820
We're going to give every different user a very different salt or a random string of characters.

56
00:03:51.820 --> 00:03:54.070
So we're going to append these two things together.

57
00:03:54.160 --> 00:03:57.210
So we will end up with something like my password.

58
00:03:57.550 --> 00:03:59.840
Blah blah blah like so

59
00:04:02.620 --> 00:04:07.960
and then throw this really big string right here through our hashing algorithm and we'll still get out

60
00:04:07.990 --> 00:04:10.520
a hash as we usually would.

61
00:04:10.520 --> 00:04:16.250
So now the net result of this is that if someone wanted to build up a rainbow table to use against this

62
00:04:16.250 --> 00:04:21.710
approach well they would have to do way more work because now not only would they have to compute the

63
00:04:21.710 --> 00:04:23.360
hash for monkey.

64
00:04:23.360 --> 00:04:28.910
It would also have to compute the hash for just about every possible derivation or extension of monkey

65
00:04:28.910 --> 00:04:36.450
as well so they would also have to find the hash of say monkey plus some random stream characters and

66
00:04:36.450 --> 00:04:42.620
they would have to do it again for monkey plus some other random string of characters and I'd do it

67
00:04:42.620 --> 00:04:49.510
again for monkey and some yet other random string of characters and so just by adding on that random

68
00:04:49.510 --> 00:04:55.880
string of characters we make it much harder for someone to attack us with this remote table attack but

69
00:04:55.880 --> 00:05:01.040
even then there is a downside to this approach and that is well when a user comes back to our application

70
00:05:01.280 --> 00:05:05.040
and they try to add in their power give us their password and we try to verify it.

71
00:05:05.060 --> 00:05:09.020
How are we then going to use this same kind of approach to decide whether or not the correct password

72
00:05:09.020 --> 00:05:10.280
has been supplied.

73
00:05:10.580 --> 00:05:13.680
Because the salt that gets added in isn't visible to the user.

74
00:05:13.850 --> 00:05:16.920
So essentially when the user signs up we are taking their password.

75
00:05:17.060 --> 00:05:22.310
We're going to add in that random string of characters and then store the hash of that so the hash is

76
00:05:22.310 --> 00:05:26.420
going to be some random string of characters like that when a user comes back and signs in and they

77
00:05:26.420 --> 00:05:28.170
provide just that password.

78
00:05:28.190 --> 00:05:33.210
How are we going to somehow generate the same hash to verify that it really is the correct password.

79
00:05:34.530 --> 00:05:38.420
So this is where things get just slightly slightly complicated but don't worry.

80
00:05:38.430 --> 00:05:42.600
Take a look at a quick diagram and of course we're going to eventually write out all this stuff in code

81
00:05:42.900 --> 00:05:44.100
ourselves manually.

82
00:05:44.100 --> 00:05:48.390
We're not going to use any library for the salting process so we'll definitely get a really good idea

83
00:05:48.390 --> 00:05:49.910
of how this works at the end of the day.

84
00:05:49.990 --> 00:05:53.910
But let's take a look at a diagram and understand how we're still going to figure out whether or not

85
00:05:53.910 --> 00:05:56.650
a user entered the correct password.

86
00:05:56.640 --> 00:05:58.170
So here's the idea.

87
00:05:58.170 --> 00:06:01.340
When a user first signs up we're still going to take their password.

88
00:06:01.470 --> 00:06:03.600
We're going to generate a random salt.

89
00:06:03.600 --> 00:06:08.520
We're gonna join the two together run it through a hashing algorithm and inside of our database we're

90
00:06:08.520 --> 00:06:12.990
going to store two different things inside of this password field.

91
00:06:13.290 --> 00:06:19.020
We're going to store the hashed password plus the salt so in other words the combination of the password

92
00:06:19.020 --> 00:06:24.300
plus the random salt we just generated then just gonna put a little separator character in there.

93
00:06:24.300 --> 00:06:32.220
So like a period or a slash or a plus or a dash or basically whatever we want some kind of separator

94
00:06:32.220 --> 00:06:38.840
character and then on the other side that little separator we're going to paste in that random salt

95
00:06:40.870 --> 00:06:45.400
so whatever random salt we just generated we're going to store in essentially plaintext inside of our

96
00:06:45.400 --> 00:06:52.810
database so our database is recording not only the hashed password plus the salt but the random salt

97
00:06:52.870 --> 00:06:59.930
as well so then whenever some user comes back to sign in we're going to take a look at the email they

98
00:06:59.930 --> 00:07:00.930
provided.

99
00:07:00.950 --> 00:07:05.740
We're gonna look up that email inside of our database and we'll find this text right here.

100
00:07:06.680 --> 00:07:12.110
Well then separate the hashed password plus salt and the random salt based upon that little separator

101
00:07:12.110 --> 00:07:12.520
character.

102
00:07:12.530 --> 00:07:16.280
So the period where the slash or the plus or whatever else.

103
00:07:16.280 --> 00:07:21.050
So now we know what the original hash password plus salt is and we know exactly what the random salt

104
00:07:21.050 --> 00:07:22.550
is as well.

105
00:07:22.550 --> 00:07:27.680
So we're going to take that random salt salt that is stored inside of our database and join it up with

106
00:07:27.680 --> 00:07:35.460
the password that the user just entered were then going to hash the Password Plus the salt together

107
00:07:35.790 --> 00:07:41.640
and we should get out the exact same hash password plus salt that we generated originally and so we

108
00:07:41.640 --> 00:07:46.260
can once again see if those two things match and if they do well then the correct original password

109
00:07:46.320 --> 00:07:52.490
must have been supplied and whenever you first look at this process the first thing that comes to mind

110
00:07:52.490 --> 00:07:57.200
for a lot of people is wait a minute if we're just storing the random salt inside the database isn't

111
00:07:57.200 --> 00:07:58.540
that a security hole.

112
00:07:58.550 --> 00:07:59.840
Well no not really.

113
00:07:59.900 --> 00:08:05.480
Because remember whenever we join the password the salt and hash it there's no way to figure out like

114
00:08:05.480 --> 00:08:08.390
where the password begins and where the salt begins.

115
00:08:08.390 --> 00:08:13.250
When we run those two things together through the hashing algorithm there's no telling what is really

116
00:08:13.250 --> 00:08:14.620
generating that hash.

117
00:08:14.630 --> 00:08:18.270
So at the end of the day having just the salt alone is really worthless.

118
00:08:18.290 --> 00:08:24.160
So it doesn't supply anything or give any hint whatsoever to a malicious user so that's it.

119
00:08:24.160 --> 00:08:25.240
That's the general idea.

120
00:08:25.240 --> 00:08:28.090
That's how we're going to store our passwords securely.

121
00:08:28.120 --> 00:08:31.360
It's how we're going to make sure that we don't have our passwords in plain text and that's how we're

122
00:08:31.360 --> 00:08:37.600
going to make sure that we don't fall into the trap of a rainbow table attack as you can imagine.

123
00:08:37.820 --> 00:08:42.230
This is going to be at some slightly complicated code to be honest it's really not the worst thing in

124
00:08:42.230 --> 00:08:46.460
the world at the end of the day we're only going to write out about like 20 lines or so to implement

125
00:08:46.550 --> 00:08:48.330
all the stuff we've discussed so far.

126
00:08:48.560 --> 00:08:53.300
And those 20 lines a lot of it are just gonna be like New Line characters and whatnot some spacing stuff.

127
00:08:54.050 --> 00:08:55.970
So it really is not the worst thing.

128
00:08:56.030 --> 00:08:57.200
So let's take a pause right here.

129
00:08:57.200 --> 00:09:02.210
We'll come back the next video and we'll start to implement this hashing and salting process for our

130
00:09:02.210 --> 00:09:05.890
sign up and our sign in flows.
