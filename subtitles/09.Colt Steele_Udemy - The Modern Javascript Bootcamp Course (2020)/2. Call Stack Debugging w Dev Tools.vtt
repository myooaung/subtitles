WEBVTT
1
00:00:00.260 --> 00:00:02.990
OK so that was a brief interview with Karl stack.

2
00:00:03.010 --> 00:00:07.980
Now I'd like to show you in the Chrome dev tools how you can actually take a look at the representation

3
00:00:08.130 --> 00:00:10.220
of the call stack and step through it.

4
00:00:10.290 --> 00:00:12.080
One call at a time.

5
00:00:12.270 --> 00:00:13.020
So let's do it.

6
00:00:13.170 --> 00:00:20.790
I have some simple code here a function called Make rant that I'm calling twice and passing in a string.

7
00:00:20.790 --> 00:00:25.730
The rand text and then a place to append a new H1.

8
00:00:25.830 --> 00:00:28.490
What it does is it makes new empty H1.

9
00:00:28.560 --> 00:00:34.450
Then it sets the inter text to the result of a function called Get rant text get ranch.

10
00:00:34.450 --> 00:00:40.830
Text is going to call two different functions The first one is Scream which uppercase is it and add

11
00:00:40.830 --> 00:00:42.340
some exclamation points.

12
00:00:42.390 --> 00:00:44.510
Then another function I call repeat.

13
00:00:44.730 --> 00:00:49.560
Yes there is a built in string repeat these days but for this example I'm not using it.

14
00:00:49.560 --> 00:00:54.990
I wanted a couple other functions on the stack so then it calls repeat which takes that scream.

15
00:00:55.020 --> 00:01:01.260
The uppercase version of whatever we pass in so let's say we started with go away.

16
00:01:01.350 --> 00:01:08.040
That's our phrase we pass in it's going to call Scream which will give us go away with three exclamation

17
00:01:08.040 --> 00:01:08.850
points.

18
00:01:08.850 --> 00:01:13.750
And then if I call repeats which I am here get rant text repeats it eight times.

19
00:01:13.920 --> 00:01:16.820
We end up with a string that looks like this.

20
00:01:18.420 --> 00:01:19.490
Eight of those.

21
00:01:19.680 --> 00:01:23.970
Then we take that and create a H1 which we actually already created.

22
00:01:23.970 --> 00:01:29.160
We add that as the inter text and appended to whatever element we pass in.

23
00:01:29.250 --> 00:01:31.380
So it's just a dumb demo.

24
00:01:31.380 --> 00:01:35.140
It's not something you probably would do but this is what we end up with over here.

25
00:01:35.160 --> 00:01:39.530
I have two H ones I hate man is very true I hate men so much.

26
00:01:39.540 --> 00:01:45.610
Oh my gosh I just I feel queasy even just writing the word let alone seeing it eight times here.

27
00:01:45.630 --> 00:01:47.120
That's coming from make rants.

28
00:01:47.230 --> 00:01:52.200
I just passing this string and a place to append the new element and then here's a second one if you

29
00:01:52.200 --> 00:01:54.170
have to cough please cover your mouth.

30
00:01:54.390 --> 00:01:56.350
It's also being appended here.

31
00:01:56.370 --> 00:01:58.160
Let's take a look at just one.

32
00:01:58.270 --> 00:02:02.140
So it will make it a little easier when we step through the call stack.

33
00:02:02.330 --> 00:02:10.200
So going to open up the Chrome dev tools and go to the sources tab and in the sources tab and pretend

34
00:02:10.200 --> 00:02:11.350
that was closed.

35
00:02:11.520 --> 00:02:17.970
If we open up this navigator on the left side for me go to our file with the code.

36
00:02:17.970 --> 00:02:22.010
So app J.S. is the name of my file whatever you named yours.

37
00:02:22.200 --> 00:02:25.770
What we do is add in a breakpoint on the left.

38
00:02:25.800 --> 00:02:26.660
I can actually click.

39
00:02:26.670 --> 00:02:33.000
So if I click in here I can make some changes and play around with them but if I click on the number

40
00:02:33.720 --> 00:02:40.170
to the left of one of those function calls it will actually insert a breakpoint it will pause execution

41
00:02:40.170 --> 00:02:42.660
of our code when it encounters this.

42
00:02:42.660 --> 00:02:45.120
So all of this code will run first.

43
00:02:45.120 --> 00:02:51.990
If I were to add in a console that log console dialog hello and refresh the page.

44
00:02:52.050 --> 00:02:53.880
While I'm an idiot it goes away.

45
00:02:53.880 --> 00:03:00.780
Of course I just said that I do a console that log here Hello this will run first before we encounter

46
00:03:00.780 --> 00:03:01.500
that breakpoint.

47
00:03:02.310 --> 00:03:04.860
If I look at my console we get Hello.

48
00:03:04.890 --> 00:03:07.340
Notice though I don't see anything over here.

49
00:03:07.470 --> 00:03:13.660
It says paused in debugger and I have this little alert over here that says paused on breakpoint.

50
00:03:14.100 --> 00:03:16.800
So because I clicked there it paused.

51
00:03:16.890 --> 00:03:25.800
If I click and refresh it doesn't pause anymore but if I click and I refresh the page there we go OK.

52
00:03:26.420 --> 00:03:28.460
So let's see what we can do.

53
00:03:28.520 --> 00:03:32.790
On the left side we have a tab or a piece called call stack.

54
00:03:32.930 --> 00:03:36.660
This is where we'll see a representation of the call stack.

55
00:03:36.860 --> 00:03:42.980
And if we just walk through this first on our own we'll zoom in a bit and can as you mean okay I'll

56
00:03:42.980 --> 00:03:47.340
close the sidebar make rant is going to be called.

57
00:03:47.570 --> 00:03:50.510
There's no function calls aside from make Rand so far.

58
00:03:50.600 --> 00:03:56.900
So make Rand will be added to the call stack then make rant itself calls the document does create element

59
00:03:56.900 --> 00:04:00.990
is a built in function or method that won't appear on the call stack really.

60
00:04:01.070 --> 00:04:09.290
But our first function we defined is get rant text so get rant text is over here that calls scream so

61
00:04:09.290 --> 00:04:11.060
scream or run and return something.

62
00:04:11.060 --> 00:04:13.160
Then we get to rant and that's returned.

63
00:04:13.160 --> 00:04:15.830
We have text then repeat is called.

64
00:04:15.830 --> 00:04:16.970
With that value.

65
00:04:16.970 --> 00:04:18.470
So repeat is going to run.

66
00:04:19.160 --> 00:04:21.340
So let's just play around with it.

67
00:04:21.380 --> 00:04:23.180
I'm going to click over here on this.

68
00:04:23.180 --> 00:04:29.000
There's also a shortcut but to make it easier for you to see when I'm actually advancing I'll just click.

69
00:04:29.000 --> 00:04:33.260
So keep your eye here where it says Call Stack okay.

70
00:04:33.360 --> 00:04:35.650
So make Rand was added to the call stack.

71
00:04:36.240 --> 00:04:39.120
It's not done executing otherwise who would be off.

72
00:04:39.120 --> 00:04:41.920
And it can't be done it has to do some other stuff first.

73
00:04:41.940 --> 00:04:46.570
So the first thing it did was evaluate this document that create element.

74
00:04:46.710 --> 00:04:50.090
Then we get to this line get Rand to text.

75
00:04:50.190 --> 00:04:54.130
So you'll see get rant text is now added to the call stack.

76
00:04:54.300 --> 00:05:01.380
And if I look at any of these at any point if I click it make click on make rants you can see it's kind

77
00:05:01.380 --> 00:05:02.510
of hard to show here.

78
00:05:02.540 --> 00:05:09.720
But this is the information the values that are in current in this scope of make rant so phrase is set

79
00:05:09.720 --> 00:05:11.110
to I hate managed.

80
00:05:11.130 --> 00:05:13.240
That's the argument we passed in.

81
00:05:13.260 --> 00:05:19.680
We also have element which is the body which I passed in down here and now this H1 variable is this

82
00:05:19.770 --> 00:05:25.020
H1 element that we created with document that create element.

83
00:05:25.020 --> 00:05:31.140
So then instead of get rant text we have a variable text but it's not set to anything yet.

84
00:05:31.680 --> 00:05:39.050
If I move forward again we'll see scream added to the top of the call stack there it is.

85
00:05:39.090 --> 00:05:42.740
So make rent started but it's not done it can't finish.

86
00:05:42.760 --> 00:05:46.530
Intel get rent tax comes back that can't finish.

87
00:05:46.560 --> 00:05:53.280
Intel scream comes back we're in scream right now scream does not call any other functions aside from

88
00:05:53.610 --> 00:05:55.640
returning string to uppercase.

89
00:05:55.710 --> 00:05:58.740
So you'll see if I advance again.

90
00:05:58.840 --> 00:06:02.380
Scream is up top advance and it's gone.

91
00:06:02.430 --> 00:06:04.200
Scream has been removed.

92
00:06:04.200 --> 00:06:08.220
It finished executing in a return to value which we now have here.

93
00:06:08.220 --> 00:06:09.600
Text has value.

94
00:06:09.600 --> 00:06:18.700
I hate Manet's all uppercase with three exclamation points that came from scream then next line rant.

95
00:06:18.760 --> 00:06:21.980
The variable let rant equals repeat of text.

96
00:06:22.090 --> 00:06:27.550
This is text that variable so repeat this eight times so repeat is going to be added.

97
00:06:27.580 --> 00:06:28.860
That's our next function.

98
00:06:29.080 --> 00:06:30.870
You'll see it added to the stack.

99
00:06:30.880 --> 00:06:32.260
There it is.

100
00:06:32.260 --> 00:06:34.630
So get ran text is still waiting.

101
00:06:34.660 --> 00:06:41.460
Make rent is still waiting on get ran text which is waiting on repeat so repeat is then going to loop.

102
00:06:41.500 --> 00:06:46.440
I'll skip through this so we have results which is completely built at this point.

103
00:06:46.570 --> 00:06:48.070
The loop is over.

104
00:06:48.070 --> 00:06:48.550
We're now at.

105
00:06:48.550 --> 00:06:49.750
Return result.

106
00:06:49.750 --> 00:06:50.080
So.

107
00:06:50.080 --> 00:06:56.020
Result is I hate Manet's uppercase exclamation points repeated eight times in a single string that is

108
00:06:56.020 --> 00:06:59.180
returned to the contents of the function don't really matter.

109
00:06:59.230 --> 00:07:03.780
In these examples I just want you to pay attention to the call stack itself.

110
00:07:03.800 --> 00:07:11.050
Watchmen things are added in when they're removed so return results repeat should be removed.

111
00:07:11.410 --> 00:07:12.670
And there we go.

112
00:07:13.480 --> 00:07:19.630
So now get rant text has all those function calls it has return values from them it's done and it's

113
00:07:19.630 --> 00:07:26.230
ready if it's not done yet but it's ready to return rant so it waited first to get scream then scream

114
00:07:26.230 --> 00:07:29.650
came back and it waited to get repeat then repeat return to value.

115
00:07:29.650 --> 00:07:35.530
So now it can return that value so it's going to return and get rant techs will be removed.

116
00:07:35.530 --> 00:07:36.140
Here it goes.

117
00:07:36.150 --> 00:07:37.410
Goodbye.

118
00:07:37.420 --> 00:07:38.890
Now we're back in make ranch.

119
00:07:38.920 --> 00:07:42.740
The original function call that has been waiting patiently this whole time.

120
00:07:43.870 --> 00:07:46.630
You can kind of see wherever it's going with this.

121
00:07:46.750 --> 00:07:47.620
Where are you.

122
00:07:47.680 --> 00:07:53.180
This idea here of a finger in a book to keep track of where you are.

123
00:07:53.230 --> 00:07:55.200
It's kind of the same idea maybe.

124
00:07:55.510 --> 00:07:59.430
I don't know if that's a good analogy or not but it's it's kind of the same idea.

125
00:07:59.440 --> 00:08:05.290
This function was originally added to the stack a while ago but it couldn't finish until a bunch of

126
00:08:05.290 --> 00:08:06.650
other function calls ran.

127
00:08:06.770 --> 00:08:08.380
And this is a simple example.

128
00:08:08.380 --> 00:08:13.660
Often you end up with some functions that have a whole bunch of function calls which call other functions

129
00:08:14.020 --> 00:08:18.880
and then recursion is a whole other issue but you're not going to get into at this point but just know

130
00:08:18.880 --> 00:08:21.010
that this is a simple demo.

131
00:08:21.010 --> 00:08:25.270
Most of the time your apps are going to have many more functions on the call stack at any given point

132
00:08:25.270 --> 00:08:32.440
or they could at least so make grants is now ready to append element that append child there is no return

133
00:08:32.440 --> 00:08:34.840
statement and make rent.

134
00:08:34.870 --> 00:08:38.140
So there we go we get to the last line it's showing me this here.

135
00:08:38.260 --> 00:08:44.210
So make rent will be removed from the calls deck and because this element that append child H1 ran.

136
00:08:44.410 --> 00:08:51.330
We now have the text showing up our new element on the screen so I'll step through it and it's gone.

137
00:08:51.330 --> 00:08:56.440
It's completely off the call stack which means that this function call here is done in it finished.

138
00:08:56.440 --> 00:08:58.230
That was the original starting point.

139
00:08:58.360 --> 00:09:02.510
Now the interpreter has moved on to this line and there's nothing after it.

140
00:09:02.620 --> 00:09:04.440
It's just done.

141
00:09:04.440 --> 00:09:04.990
And there we go.

142
00:09:05.050 --> 00:09:10.920
We made it through so that is how you can use the dev tools to step through step by step.

143
00:09:10.930 --> 00:09:13.760
Each function call on the call stack and see what's going on.

144
00:09:14.110 --> 00:09:18.000
And this can be useful if things are just behaving very oddly.

145
00:09:18.070 --> 00:09:19.020
It's also a nice way.

146
00:09:19.030 --> 00:09:24.550
If you had a breakpoint somewhere for you to just take a look at the Values at any given point play

147
00:09:24.550 --> 00:09:27.680
around with the variables in there see see what's going on.

148
00:09:27.680 --> 00:09:29.190
Diagnose your problems.

149
00:09:29.200 --> 00:09:33.390
The main reason I brought it up here was just to make it clear how the call stack works.

150
00:09:33.430 --> 00:09:38.830
This idea of the latest function called to be added to the stack that function call it will be the first

151
00:09:38.860 --> 00:09:45.010
to be removed and you end up with this pile up of functions that are function calls that maybe are waiting

152
00:09:45.010 --> 00:09:49.390
on a bunch of other function calls to finish which themselves might be waiting and other function calls

153
00:09:49.550 --> 00:09:55.640
and eventually one of them has to finish in return something to that sort of a reverse cascade can happen.

154
00:09:55.660 --> 00:10:00.850
The functions that were waiting will hopefully return which continues all the way down to our original

155
00:10:00.850 --> 00:10:04.960
function call which was make rant so why are we talking about this.

156
00:10:05.020 --> 00:10:06.420
Why do you need to know about it.

157
00:10:06.430 --> 00:10:11.740
Well it's going to help explain and help you understand how a synchronous code works in JavaScript which

158
00:10:11.740 --> 00:10:13.750
is what we're going to tackle right now.

159
00:10:13.750 --> 00:10:15.970
Well next video right after this.
