WEBVTT
1
00:00:00.440 --> 00:00:04.810
The last big thing we have to add in to our application is to detect whenever our ball right here reaches

2
00:00:04.810 --> 00:00:07.280
the goal at the very bottom right hand corner.

3
00:00:07.300 --> 00:00:12.160
So what we're really trying to do here put in a more simplistic way or a more kind of engineering sense

4
00:00:12.190 --> 00:00:16.370
is detect a collision event between two different shapes.

5
00:00:16.390 --> 00:00:21.490
Let's write out some code that will allow us to detect whenever two different shapes inside of our matter

6
00:00:21.490 --> 00:00:24.060
application collide with each other.

7
00:00:24.060 --> 00:00:24.820
It's going to go backwards.

8
00:00:24.850 --> 00:00:28.410
My editor at the very top I'm going to find the matter object.

9
00:00:28.420 --> 00:00:34.130
Once again we're going to pull another object off of that thing called events.

10
00:00:34.130 --> 00:00:39.160
So this is an object that's going to let us listen for different things that actually occur inside of

11
00:00:39.160 --> 00:00:41.130
our world object.

12
00:00:41.180 --> 00:00:46.070
Well then go back down to the very bottom the file and down here are going to add in a comment called

13
00:00:46.520 --> 00:00:53.110
win condition so the meaning here is that well this is how a user can actually win our game or win the

14
00:00:53.110 --> 00:00:54.330
maze.

15
00:00:54.340 --> 00:00:58.490
We're going to write out events not on engine.

16
00:00:58.630 --> 00:01:04.880
We're going to listen for an event called Collision start double check your spelling on collision and

17
00:01:04.880 --> 00:01:07.760
make sure that you also have a capital S on there as well.

18
00:01:09.350 --> 00:01:13.400
And the third argument is going to be a callback function that's going to be called with some event

19
00:01:13.460 --> 00:01:14.480
object.

20
00:01:14.780 --> 00:01:18.650
So this event object is going or I mean this callback function is going to be invoked every single time

21
00:01:18.650 --> 00:01:22.760
that there is a collision between two different shapes inside of our world.

22
00:01:23.090 --> 00:01:31.120
Right now I'll add in a console dot log of event it's I'll save this I'll pull it back over refresh

23
00:01:31.240 --> 00:01:37.890
and we'll do a quick test I'm go to press the key and just make sure that my ball runs into some wall

24
00:01:38.340 --> 00:01:39.820
that counts as a collision.

25
00:01:39.840 --> 00:01:44.770
So as soon as the ball runs into a wall I should see a console log and sure enough I do right there.

26
00:01:44.820 --> 00:01:50.040
Now you're going to very quickly see some really strange behavior as we start to console log out this

27
00:01:50.040 --> 00:01:57.670
event object the event object that is used by matter J.S. gets reused between different events.

28
00:01:57.720 --> 00:02:02.580
So in other words this is kind of hard to like internalize but I'll show you some proof of it very quickly

29
00:02:03.090 --> 00:02:04.690
this event object right here.

30
00:02:04.830 --> 00:02:12.000
There is one single event object that matter J.S. owns every single time that any event occurs it adds

31
00:02:12.000 --> 00:02:15.630
some properties to this event object to describe what just happened.

32
00:02:15.750 --> 00:02:22.090
It then sends that object into our callback function immediately after our callback function runs all

33
00:02:22.090 --> 00:02:26.340
the different properties of that event object get wiped out and removed.

34
00:02:26.440 --> 00:02:27.600
That might sound really crazy.

35
00:02:27.670 --> 00:02:29.590
But let's take a look at the console log that we just got.

36
00:02:29.630 --> 00:02:34.780
You're going to see that in action really quickly because the weird behavior inside of our console.

37
00:02:34.780 --> 00:02:40.180
So notice how when I got the initial console log like that right there I see that pairs is an array

38
00:02:40.270 --> 00:02:41.590
of length one.

39
00:02:41.730 --> 00:02:45.660
That means that there is a single element inside of the pairs array.

40
00:02:46.000 --> 00:02:50.350
But if I expand this and look at pairs it is now empty.

41
00:02:50.640 --> 00:02:55.090
And that is because when we got the initial console log like right here when we called console log on

42
00:02:55.090 --> 00:03:00.850
the event object there was an element inside of that pairs array but the way that the chrome console

43
00:03:00.850 --> 00:03:05.770
works is that it doesn't really evaluate or look at these different properties too closely until you

44
00:03:05.770 --> 00:03:09.040
click on that little triangle and expand that thing.

45
00:03:09.040 --> 00:03:15.400
So when you expand that entry right there chrome takes another look at that same exact object when it

46
00:03:15.400 --> 00:03:16.610
takes that second look.

47
00:03:16.720 --> 00:03:22.300
It says oh well it turns out there's actually nothing in pairs now because matter J.S. after it called

48
00:03:22.300 --> 00:03:27.890
our event handler wiped out all the different properties inside this object.

49
00:03:28.090 --> 00:03:32.250
That's why we're going to very quickly see some really strange behavior from our console as we start

50
00:03:32.250 --> 00:03:37.610
to log out this thing so let's take another look at how we can console log this thing out and start

51
00:03:37.610 --> 00:03:41.930
to get a real better sense of what's going on inside this event object without having to worry about

52
00:03:41.930 --> 00:03:47.300
the fact that all the properties inside of it get wiped out going to remove the console log and replace

53
00:03:47.300 --> 00:03:51.830
it with event that pairs dot for each

54
00:03:55.720 --> 00:03:57.850
so as we just saw pairs is an array.

55
00:03:57.850 --> 00:04:04.140
So I'm going to try to iterate through that array and I'm going to say for every collision I want to

56
00:04:04.140 --> 00:04:07.990
console log that collision object.

57
00:04:08.190 --> 00:04:12.490
So let's try this again if I flip back over loops refresh.

58
00:04:12.500 --> 00:04:15.610
There we go and get the ball to run into something again.

59
00:04:15.620 --> 00:04:18.670
Now we're going to see a slightly different console log.

60
00:04:18.680 --> 00:04:23.120
Now we get to see what is actually inside of that pairs array whereas before by the time we looked at

61
00:04:23.120 --> 00:04:24.910
it inside of our console it was already gone.

62
00:04:24.920 --> 00:04:26.800
It already got destroyed.

63
00:04:26.810 --> 00:04:30.010
Now we can see what is actually inside of that pairs array.

64
00:04:30.110 --> 00:04:33.730
We can see that it is some kind of object that has a lot of different properties.

65
00:04:33.830 --> 00:04:39.340
That describes the collision that just occurred the properties that you and I care about the most is

66
00:04:39.350 --> 00:04:46.460
body a right here and a body b those two properties described the two shapes that just ran into each

67
00:04:46.460 --> 00:04:47.070
other.

68
00:04:47.150 --> 00:04:48.190
So we can see that.

69
00:04:48.190 --> 00:04:53.720
I just had something with the label of circle body run into something with the label of rectangle body

70
00:04:54.260 --> 00:05:00.400
and as you could probably guess that means that the ball right here ran into one of the walls so in

71
00:05:00.400 --> 00:05:05.800
order to detect whenever a user gets the ball right here to reach our wind condition down the bottom

72
00:05:05.800 --> 00:05:11.020
right hand side we need to just inspect the body a and body B properties.

73
00:05:11.020 --> 00:05:16.480
And if they are the ball and that little goal that means that the user must have gotten to the goal

74
00:05:16.660 --> 00:05:19.580
then they must have won the game.

75
00:05:19.800 --> 00:05:20.050
All right.

76
00:05:20.230 --> 00:05:26.320
So let's write out some code to detect that kind of collision going to first go back over to my editor

77
00:05:27.040 --> 00:05:31.730
I can go to the very top and I'm going to change cells down to just three.

78
00:05:31.780 --> 00:05:36.700
The reason for this is that I want to be able to very easily win the maze like really quickly.

79
00:05:36.700 --> 00:05:40.150
So now this is a lot easier to win than what we had before.

80
00:05:40.270 --> 00:05:42.730
Now if I touch the goal right there

81
00:05:45.690 --> 00:05:52.000
I can inspect this thing you know I do get multiple the console logs here because I accidently ran into

82
00:05:52.000 --> 00:05:57.250
a wall so I can make sure I select a console log that actually represents running into that body.

83
00:05:57.250 --> 00:05:57.670
There we go.

84
00:05:57.730 --> 00:05:59.350
That's one right there.

85
00:05:59.380 --> 00:06:05.770
Now I see that I've got a body a rectangle body and again a body of circle body.

86
00:06:05.770 --> 00:06:10.150
So these labels are not super helpful so we need some different way to identify whether or not we just

87
00:06:10.150 --> 00:06:14.440
ran into the ball and the actual goal right there.

88
00:06:14.440 --> 00:06:19.780
So to make sure that we can easily identify when body and body B are the ball and the goal we can go

89
00:06:19.780 --> 00:06:25.790
back to where we create the ball and the goal and we can add in a custom label to each of them going

90
00:06:25.790 --> 00:06:34.770
to find where I create the ball right here and then as a final argument to this thing I'm going to add

91
00:06:34.770 --> 00:06:44.460
in an options object and to it I'm going to add in a label a property of simply ball I'll then find

92
00:06:44.490 --> 00:06:45.700
where I create the ball.

93
00:06:45.810 --> 00:06:47.320
The goal gives me right above.

94
00:06:47.700 --> 00:06:52.950
So here's the goal right here I'm gonna add in a label of goal.

95
00:06:53.050 --> 00:06:57.970
Now whenever we see those console logs we should have a more definitive label for both them.

96
00:06:58.020 --> 00:07:00.590
I'll save this in a flip back over.

97
00:07:00.730 --> 00:07:03.750
I'm going to try to win again.

98
00:07:03.770 --> 00:07:04.820
There we go.

99
00:07:04.820 --> 00:07:11.990
Now if I inspect the console log I get a label of gold and a label of ball that's way easier now to

100
00:07:11.990 --> 00:07:16.670
detect when we have the ball and the gold contact each other as opposed to trying to figure out when

101
00:07:17.150 --> 00:07:22.220
like one was simply ball and the other was rectangle body because every rectangle is going to be printed

102
00:07:22.220 --> 00:07:29.100
out as rectangle now back inside of our event handler down here at the very bottom we can just do a

103
00:07:29.100 --> 00:07:33.420
quick check and see if pair a and b are actually the ball.

104
00:07:33.600 --> 00:07:39.910
And the goal now if you start to write out an if statement here we never really know if body a is going

105
00:07:39.910 --> 00:07:44.620
to be the ball or body is going to be the goal and vice versa for body B.

106
00:07:44.680 --> 00:07:49.180
So an easy way to kind of capture this and not have to write out a really long if statement right here

107
00:07:49.180 --> 00:07:55.140
to compare all different possibilities is to create a little array and I'll call labels and I'm going

108
00:07:55.140 --> 00:08:07.760
to have inside their ball and go and then I'll say if labels includes collision not body a dot label

109
00:08:09.810 --> 00:08:21.260
and if labels includes collision body B dot label then the user must have hit the goal when you say

110
00:08:21.260 --> 00:08:23.750
that you can see that whole line inside of you.

111
00:08:23.750 --> 00:08:28.860
I'll do a console log of user 1 like so.

112
00:08:28.890 --> 00:08:34.560
So again if we tried to write out an if statement to just look if body a was ball or goal and body B

113
00:08:34.560 --> 00:08:37.800
was ball or goal Well that would just be a really long if statement.

114
00:08:37.800 --> 00:08:41.880
So this is just an easy way to kind of collapse it down a little bit.

115
00:08:41.930 --> 00:08:42.840
Let's save this.

116
00:08:42.950 --> 00:08:47.900
I'll go back over refresh and now I can run into as many things as I want and I don't see any console

117
00:08:47.900 --> 00:08:48.830
logs.

118
00:08:48.860 --> 00:08:53.720
It's only when I run into that goal right there that I see the console log of user 1.

119
00:08:53.780 --> 00:08:54.710
So that's pretty much it.

120
00:08:54.740 --> 00:09:00.260
That's how a user is going to win the game so let's take a pause right here now that we can detect this

121
00:09:00.260 --> 00:09:05.250
win we can start to tell the user hey you won or whatever else we want to do a quick pause.

122
00:09:05.240 --> 00:09:06.710
We'll take care of that in the next video.
