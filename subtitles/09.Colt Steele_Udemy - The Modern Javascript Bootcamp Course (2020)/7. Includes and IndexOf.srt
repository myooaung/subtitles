1
00:00:00,210 --> 00:00:03,950
Next up we'll take a look at two built in methods that are kind of similar.

2
00:00:03,960 --> 00:00:11,250
They have to do with searching or looking for a value in an array includes and index of how they sound

3
00:00:11,250 --> 00:00:14,880
like they might do the same thing but they return different values.

4
00:00:14,880 --> 00:00:19,360
So let's start with includes includes is relatively simple.

5
00:00:19,440 --> 00:00:20,940
It is known as a boolean method.

6
00:00:20,940 --> 00:00:22,670
It returns True or false.

7
00:00:22,680 --> 00:00:27,450
It takes a value and it tells you if that array includes that value or not.

8
00:00:27,660 --> 00:00:28,230
And that's it.

9
00:00:28,230 --> 00:00:30,560
It doesn't tell you where it just is a yes or no.

10
00:00:30,660 --> 00:00:32,360
It's a boolean method.

11
00:00:32,430 --> 00:00:35,160
I have an example array over here called ingredients.

12
00:00:35,370 --> 00:00:40,890
And if I wanted to call ingredients that includes does it include fish.

13
00:00:41,100 --> 00:00:41,970
It does not.

14
00:00:41,970 --> 00:00:46,920
As far as I remember it does include a slew of very odd ingredients and not sure what you could make

15
00:00:46,990 --> 00:00:48,660
this for you quite nasty.

16
00:00:48,660 --> 00:00:56,010
Shrimp and sugar and flour but you can see we get false if I tried ingredients that includes how about

17
00:00:56,010 --> 00:01:00,170
shrimp we get true and that's kind of it.

18
00:01:00,190 --> 00:01:02,700
It's relatively simple.

19
00:01:02,700 --> 00:01:06,420
It does not check inside of each element.

20
00:01:06,450 --> 00:01:08,730
So we're working with strings.

21
00:01:08,730 --> 00:01:12,920
You might think if I tried to search for corn it would tell me true.

22
00:01:12,930 --> 00:01:13,650
But it does not.

23
00:01:13,650 --> 00:01:15,440
It's looking for an exact match.

24
00:01:15,450 --> 00:01:17,820
Does the array have an element.

25
00:01:17,970 --> 00:01:24,180
Corn not does the array contain elements that may contain corn in them.

26
00:01:24,270 --> 00:01:25,700
It's looking for a direct match.

27
00:01:25,710 --> 00:01:27,610
And it doesn't find corn in here.

28
00:01:27,600 --> 00:01:30,750
There's corn starch but that's not the same as the string corn.

29
00:01:30,750 --> 00:01:33,100
There is one optional thing we can pass in.

30
00:01:33,120 --> 00:01:40,910
You can see here called from index from index is a way you can specify where to start searching from.

31
00:01:40,920 --> 00:01:48,210
So for some reason I wanted to know if let's say a water was included in the second half of the array.

32
00:01:48,450 --> 00:01:50,070
How many items long is this.

33
00:01:50,070 --> 00:01:52,360
This is ingredients length.

34
00:01:52,380 --> 00:01:53,550
It's eight items.

35
00:01:53,550 --> 00:01:55,150
So index of seven.

36
00:01:55,200 --> 00:01:57,390
So let's go with cheese as our middle point.

37
00:01:57,390 --> 00:02:00,920
It's not exactly the middle but it has an index of three.

38
00:02:00,960 --> 00:02:08,720
So I could do ingredients that includes water after index of three and that's false.

39
00:02:08,910 --> 00:02:17,580
But if I remove that it's true if I say index of zero it's also true because it is index of zero it's

40
00:02:17,580 --> 00:02:18,980
starting the search from here.

41
00:02:19,590 --> 00:02:26,100
I don't often use this second optional thing we can pass in the from points or the search from index

42
00:02:26,370 --> 00:02:32,130
but it is there figured I should show you and we'll do one quick example where we can take includes

43
00:02:32,130 --> 00:02:34,320
and use it in a simple conditional.

44
00:02:34,770 --> 00:02:42,150
So let's say someone is gluten free or gluten intolerant and they want to check if ingredients include

45
00:02:42,150 --> 00:02:42,780
flour.

46
00:02:42,870 --> 00:02:52,530
We could do if ingredients that includes flour and we don't have to check if that equals true because

47
00:02:52,530 --> 00:02:56,040
it is a boolean method it returns true or false.

48
00:02:56,040 --> 00:02:58,390
This whole thing becomes true or false.

49
00:02:58,390 --> 00:03:04,080
And if that's the case if it is true we'll say I'm gluten free I can not eat that.

50
00:03:04,100 --> 00:03:04,620
All right.

51
00:03:04,620 --> 00:03:05,660
Refresh the page.

52
00:03:05,670 --> 00:03:07,140
There we go.

53
00:03:07,140 --> 00:03:08,330
That's kind of it.

54
00:03:08,340 --> 00:03:14,190
Next up we have the second method index of in the note I wrote here is that it works just like string

55
00:03:14,190 --> 00:03:20,490
that index of so it will search for a value and if it finds it it will return the index where it found

56
00:03:20,490 --> 00:03:24,990
it versus includes which returns True or false.

57
00:03:24,990 --> 00:03:31,740
And just like with a string if it does not find the value if it's not present it returns negative one.

58
00:03:31,860 --> 00:03:42,780
So let's try it out over here ingredients dot index of heal and we get 6 0 1 2 3 4 5 and 6.

59
00:03:42,780 --> 00:03:44,140
Good job javascript.

60
00:03:44,190 --> 00:03:45,750
You're correct.

61
00:03:45,750 --> 00:03:51,410
And if we try something that's not in there like maple syrup I mean it should be in there.

62
00:03:51,470 --> 00:03:51,640
Right.

63
00:03:51,650 --> 00:03:53,260
That would be great.

64
00:03:53,330 --> 00:03:58,620
I need to say Todd index of who doesn't want shrimp with maple syrup and cheese.

65
00:03:58,620 --> 00:03:59,070
It tells us.

66
00:03:59,070 --> 00:03:59,760
Negative one.

67
00:04:00,330 --> 00:04:05,550
So it works just like index of works on a string except in the context of an array.

68
00:04:05,670 --> 00:04:12,300
It tells you where that value is in that array and just like with includes we can specify a from index

69
00:04:12,830 --> 00:04:21,510
you're not really sure how often you end up doing that but just to make sure let's look for cheese after

70
00:04:21,510 --> 00:04:22,930
the index of five.

71
00:04:23,040 --> 00:04:30,900
It does not exist but if we change that to be index of two we do get three and that's correct 0 1 2

72
00:04:30,900 --> 00:04:32,070
3.

73
00:04:32,140 --> 00:04:35,220
OK so two different ways of looking for a value.

74
00:04:35,220 --> 00:04:38,070
It really depends on what your purpose is or what your goal is.

75
00:04:38,160 --> 00:04:43,740
If you're just trying to see if something is in there period and you don't need to know where then use

76
00:04:43,740 --> 00:04:46,440
includes it makes your logic short.

77
00:04:46,500 --> 00:04:52,440
You don't have to check if a value know if the index equals something which we would have to do if we

78
00:04:52,440 --> 00:05:02,420
were to rewrite this using index of we would do something like ingredients dot index of flour is not

79
00:05:02,510 --> 00:05:08,700
equal to negative 1 that means flower is in the ingredients array.

80
00:05:08,710 --> 00:05:12,200
If you're just checking if a value is present includes is easier.

81
00:05:12,200 --> 00:05:13,410
But if you need to know where.

82
00:05:13,490 --> 00:05:19,430
Then he would use index up and you could use INDEX OF to find you know if Flower is in here and you

83
00:05:19,430 --> 00:05:25,430
wanted to replace it with I don't know what do you want a gluten free people that use instead of flour.

84
00:05:25,430 --> 00:05:29,550
Do they use corn flour so whatever it is you replace it with a substitute.

85
00:05:29,570 --> 00:05:35,510
You need to know where it is and then you could change the value at that index using the return value

86
00:05:35,510 --> 00:05:36,170
of index of.
