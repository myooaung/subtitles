1
00:00:00,880 --> 00:00:05,520
Next we have to do is to make sure that we adjust our dash offset value by something more precise than

2
00:00:05,530 --> 00:00:06,660
negative one.

3
00:00:06,660 --> 00:00:11,030
So let's take a look at a couple of diagrams and really understand the math that we have to do.

4
00:00:11,080 --> 00:00:11,300
OK.

5
00:00:11,320 --> 00:00:16,330
So here's the general idea when everything first starts are in our side of our information we want our

6
00:00:16,330 --> 00:00:20,800
dash array value of our circle element to be equal to perimeter.

7
00:00:20,800 --> 00:00:23,640
That is what is going to give us that big round circle.

8
00:00:23,680 --> 00:00:30,380
When everything first starts out when the animation ends we still want the dash rate to be equal to

9
00:00:30,380 --> 00:00:31,460
perimeter.

10
00:00:31,460 --> 00:00:35,570
But what's really going to change over time is the dash offset the dash offset.

11
00:00:35,570 --> 00:00:37,100
We'll start out off at zero.

12
00:00:37,100 --> 00:00:39,770
So that's what's going to give us the kind of nice circle right here.

13
00:00:39,770 --> 00:00:44,930
And then over time we want to make it more and more negative as the dash offset gets in more negative.

14
00:00:44,930 --> 00:00:47,470
We're going to get additional whitespace from the top.

15
00:00:47,470 --> 00:00:50,750
Going around the clockwise direction.

16
00:00:50,750 --> 00:00:56,750
So by the end we want to have a dot dash offset equal to negative one times perimeter.

17
00:00:56,810 --> 00:01:03,260
So the real question here becomes how do we start with a dash off set of zero and then effectively over

18
00:01:03,560 --> 00:01:10,010
the span of our entire timer and in very equal increments go from the value of zero to negative parameter

19
00:01:11,150 --> 00:01:12,010
to make that happen.

20
00:01:12,010 --> 00:01:19,480
We're essentially going to say if our perimeter is say a circle of 100 units and we have total 50 different

21
00:01:19,480 --> 00:01:26,770
tic events then each individual tick would need to adjust that offset by negative one times 100 divided

22
00:01:26,770 --> 00:01:27,570
by 50.

23
00:01:27,580 --> 00:01:29,510
That gives us negative 2.

24
00:01:29,530 --> 00:01:33,370
Let me show you a better diagram to really illustrate how this formula works.

25
00:01:33,460 --> 00:01:35,680
So here's the formula that we need.

26
00:01:35,680 --> 00:01:37,600
So we're going to calculate offset.

27
00:01:37,600 --> 00:01:43,750
This is going to be how much we're going to change that stroke dash offset property for every tick.

28
00:01:43,750 --> 00:01:49,900
That's the general formula we can start to plug in the start and end values inside of it to figure out

29
00:01:49,930 --> 00:01:52,180
or and make sure that actually makes sense.

30
00:01:52,210 --> 00:01:58,630
So our offset at the very start would be P times the time remaining which would for us be 30 seconds

31
00:01:58,960 --> 00:02:00,420
divided by the total duration.

32
00:02:00,490 --> 00:02:08,350
Which would also be 30 seconds and then we would subtract by the perimeter the 30 divided by 30 would

33
00:02:08,350 --> 00:02:09,100
turn into one.

34
00:02:09,100 --> 00:02:15,840
So we'd end up with P minus p and so offset at the very start would be equal to zero and so that matches

35
00:02:15,840 --> 00:02:23,070
up with our initial requirement over here then at the very end our dash offset is equal to zero or that's

36
00:02:23,290 --> 00:02:24,330
simply our dash offset.

37
00:02:24,330 --> 00:02:27,000
We want to be equal to a negative perimeter.

38
00:02:27,000 --> 00:02:31,900
So at the very end we're gonna have a time remaining of zero divided by 30.

39
00:02:32,100 --> 00:02:33,570
So we get zero divide by 30.

40
00:02:33,600 --> 00:02:39,120
That's going to end up zeroing out and we are left with just negative P and that once again matches

41
00:02:39,120 --> 00:02:43,930
up with what we just discussed over here this is pretty much the formula that we have to increment or

42
00:02:44,020 --> 00:02:46,540
implement inside of our on tick function.

43
00:02:46,540 --> 00:02:53,290
There's just one problem with it are on tick function doesn't really have any idea of how much time

44
00:02:53,290 --> 00:02:56,620
is remaining or the total duration.

45
00:02:56,620 --> 00:02:58,280
That's not a big problem.

46
00:02:58,360 --> 00:03:03,460
Kind of let me show you a real small change that we can make to our code to make sure that the on tick

47
00:03:03,460 --> 00:03:04,790
function that we have.

48
00:03:04,870 --> 00:03:10,150
So this function right here can get access to the time remaining if you want to do that we could go

49
00:03:10,150 --> 00:03:17,510
back over to timer J.S. I'm going to find my tick function here is right here inside there I'll find

50
00:03:17,510 --> 00:03:26,520
where we call on tick and inside of it when we call on tick I will simply pass in this dark time remaining.

51
00:03:26,570 --> 00:03:34,110
So now back inside of our index dot j ust file on tick is going to receive the time remaining so that's

52
00:03:34,110 --> 00:03:34,740
not bad.

53
00:03:34,770 --> 00:03:39,420
So we now have one of these values inside of our formula that we need to determine what the offset should

54
00:03:39,420 --> 00:03:41,310
be at each tick.

55
00:03:41,310 --> 00:03:47,460
Now there is a second problem here and that is the total duration value we need to know the entire duration

56
00:03:47,520 --> 00:03:48,540
of the timer.

57
00:03:48,570 --> 00:03:53,940
So if we set it for 30 seconds and Head Start we need to know that starting time right now there is

58
00:03:53,940 --> 00:03:57,520
absolutely nothing inside of application to track that value.

59
00:03:57,570 --> 00:04:03,060
In other words there's no input there's no value inside of our timer class nothing that tracks the total

60
00:04:03,060 --> 00:04:09,830
duration of the timer but by using one that callbacks we implemented we can start to track it ourselves.

61
00:04:11,200 --> 00:04:16,240
So we're gonna say that whenever we call on starts we're going to pass in an argument that represents

62
00:04:16,300 --> 00:04:22,520
how much time is going to take for this entire timer to run will then receive that argument right here

63
00:04:22,520 --> 00:04:23,180
and store it.

64
00:04:23,300 --> 00:04:28,340
So then later on INSIDE OF on tick we can use that value to figure out what the total duration is going

65
00:04:28,340 --> 00:04:32,160
to be let's write out some code because I know this is confusing.

66
00:04:32,260 --> 00:04:35,620
Let's write out some code you're going to see where we got this really quickly.

67
00:04:35,720 --> 00:04:41,120
So I'm gonna go back over to my timer I'm going to find where we call on starts which is inside these

68
00:04:41,130 --> 00:04:42,180
start function.

69
00:04:42,510 --> 00:04:47,650
And when we call it I'm going to pass in the value of this time remaining.

70
00:04:47,880 --> 00:04:52,710
So when we first start our timer this time remaining that value is gonna be how long the timer is going

71
00:04:52,710 --> 00:04:53,060
to run.

72
00:04:53,060 --> 00:05:02,560
In total so in on starts we can receive that as an argument that I will referred to as total duration

73
00:05:05,290 --> 00:05:10,030
so then it's back over here rather than storing something like current offset right there and going

74
00:05:10,030 --> 00:05:15,890
to delete that and I'm going to make a new variable called simply duration and it will set the value

75
00:05:15,890 --> 00:05:24,470
to toll duration whenever the OnStar function is called so we'll say duration is total duration so then

76
00:05:24,470 --> 00:05:30,590
finally inside of on tick we can actually implement the correct offset when we update the stroke dash

77
00:05:30,650 --> 00:05:35,000
offset so we no longer have to make a change over time.

78
00:05:35,000 --> 00:05:39,570
So I'm gonna delete that line instead at every tick we're going to take the time remaining.

79
00:05:39,740 --> 00:05:46,220
We're going to take the total duration and we're going to take our perimeter and we'll use it to figure

80
00:05:46,220 --> 00:05:48,890
out exactly what the offset value should be.

81
00:05:48,890 --> 00:05:52,070
So going to delete current offset right there I'm going to give myself a little bit of space and we'll

82
00:05:52,070 --> 00:05:53,750
write in our form formula.

83
00:05:54,120 --> 00:06:02,150
So remember right above we already defined our perimeter so we'll say perimeter times time remaining

84
00:06:02,690 --> 00:06:10,760
divided by the duration and we'll subtract from that the perimeter and that's it.

85
00:06:10,760 --> 00:06:16,010
Now I know this like explanation of all the math is really nasty but when really comes down to it this

86
00:06:16,010 --> 00:06:16,910
is what's really going on.

87
00:06:18,230 --> 00:06:21,230
It's going to save this and we can do one last test.

88
00:06:21,260 --> 00:06:27,330
We can make sure I save both files of course put back over it starts and now we can see the timer working

89
00:06:27,390 --> 00:06:29,850
as expected either way.

90
00:06:29,900 --> 00:06:34,720
The animation is always going to play a little more smoothly if you close your console so closer.

91
00:06:34,820 --> 00:06:39,050
Chrome console if it seems like it's a little bit laggy now we can wait for this to count down all the

92
00:06:39,050 --> 00:06:39,650
way to zero.

93
00:06:39,670 --> 00:06:45,250
And when it hits zero we should see the animation finishing like right there at the very top end points.

94
00:06:45,890 --> 00:06:47,450
So nine eight seven.

95
00:06:47,480 --> 00:06:48,640
Well you can count.

96
00:06:49,220 --> 00:06:52,700
So I'm going to wait for this thing to finish up and make sure that it finishes at the correct location

97
00:06:54,610 --> 00:06:55,680
and there we go.

98
00:06:55,690 --> 00:07:01,330
So by the time I hit zero we have cleared out that entire circle perfectly every time.

99
00:07:01,360 --> 00:07:05,620
Now of course I can always update the timer to say three seconds head start and it's going to play it

100
00:07:05,620 --> 00:07:07,850
again OK.

101
00:07:07,890 --> 00:07:09,630
Well let's say this looks pretty good.

102
00:07:09,630 --> 00:07:13,890
Now the only thing that we might change here when I use three you'll notice it still looks a little

103
00:07:13,890 --> 00:07:14,640
bit choppy.

104
00:07:14,670 --> 00:07:20,090
So if you want to you can always go back over and adjust the interval that we do this update at.

105
00:07:20,100 --> 00:07:23,330
So instead of 50 right here we can always take it down to say 20.

106
00:07:23,520 --> 00:07:27,600
But if you update it right there Just make sure that you update how much we change time remaining by

107
00:07:27,600 --> 00:07:28,940
for every tick.

108
00:07:28,950 --> 00:07:34,890
So if we take that to 20 we would want to subtract point 0 2 from time remaining.

109
00:07:34,900 --> 00:07:36,830
So I'll save this I'll refresh.

110
00:07:36,870 --> 00:07:38,850
I'll try again with three seconds.

111
00:07:38,850 --> 00:07:42,090
Yeah that definitely looks a little bit more smooth OK.

112
00:07:42,120 --> 00:07:43,470
Well this looks pretty good overall.

113
00:07:43,470 --> 00:07:48,060
So now the last thing I do is just a little bit of styling to make sure that the input the start and

114
00:07:48,060 --> 00:07:52,040
pause button all that stuff shows up inside of the circle.

115
00:07:52,050 --> 00:07:54,180
So let's take care of some styling in just a moment.
