WEBVTT
1
00:00:00.810 --> 00:00:05.850
Like we just said in this video we're going to start to create a repository parent class and then have

2
00:00:05.910 --> 00:00:08.600
users and products inherit from it.

3
00:00:08.610 --> 00:00:09.890
So let's get to it.

4
00:00:10.110 --> 00:00:15.510
Back inside of my editor I got to find the repositories directory inside there and going to make a new

5
00:00:15.510 --> 00:00:20.430
file called simply repository dot J.S. so inside of here.

6
00:00:20.430 --> 00:00:22.650
We're going to define our base class.

7
00:00:22.650 --> 00:00:26.990
It's gonna have all the different methods that are going to be shared between users in products and

8
00:00:27.000 --> 00:00:34.210
any other future repository that we decide to create though inside of here I'm going to first define

9
00:00:34.660 --> 00:00:43.220
and immediately export a new class called repository and inside of here we're going to cut and paste

10
00:00:43.280 --> 00:00:47.940
just about every single method from users and place it into repository.

11
00:00:47.970 --> 00:00:54.230
It's going to go back to what users dot J.S. I'm going to highlight from constructor all the way down

12
00:00:57.770 --> 00:01:00.780
to the very bottom of that class.

13
00:01:00.860 --> 00:01:02.840
It's going to take everything out of here.

14
00:01:02.980 --> 00:01:04.100
I'm going to cut all of it.

15
00:01:04.100 --> 00:01:08.300
So now users repository the class anyways is empty.

16
00:01:08.300 --> 00:01:15.250
I'll go over to repository dot J.S. I've got paste all that stuff in there are two methods inside of

17
00:01:15.250 --> 00:01:21.190
here maybe three that we do need to extract and take back over to users so inside of repository dot

18
00:01:21.200 --> 00:01:26.450
J.S. going to scroll down until I find the create method for the create method right here.

19
00:01:26.460 --> 00:01:30.330
This is an implementation that is a very specific to users.

20
00:01:30.330 --> 00:01:36.270
So I only want my users repository to have this specific implementation so I'm going to cut that method

21
00:01:36.270 --> 00:01:36.600
out

22
00:01:39.430 --> 00:01:43.810
go back over to users J.S. and paste it back into users repository

23
00:01:46.430 --> 00:01:51.980
then I'll go back to the repository DHHS file the next method that is very specific to our users repository

24
00:01:51.980 --> 00:01:54.610
is right after it is compare passwords.

25
00:01:54.630 --> 00:01:56.390
So going to take that method as well.

26
00:01:56.570 --> 00:02:00.810
Cut it out and go at it to users J us as well

27
00:02:06.230 --> 00:02:10.880
next up I'm going to fix up a couple of different require statements and make sure that they are available

28
00:02:10.910 --> 00:02:17.510
inside a repository such as well the repository DHS needs to have access to the FSA module and if we

29
00:02:17.510 --> 00:02:23.820
find the random ideas function it also has to have access to the crypto module as well so at the very

30
00:02:23.820 --> 00:02:30.460
top I'm going to require an F S I'll also get crypto

31
00:02:36.310 --> 00:02:37.360
OK.

32
00:02:37.560 --> 00:02:42.990
The last thing we're going to do is re import or require in this class reports repository back into

33
00:02:42.990 --> 00:02:49.520
a user's J s it's going to go back over there I'm going to require in repository

34
00:02:55.400 --> 00:03:00.340
and I'm going to make sure that users repository extends our base class of repository.

35
00:03:00.370 --> 00:03:04.810
So I'll say users repository extends repository.

36
00:03:04.860 --> 00:03:09.700
So remember what that extends keyword right there does it means essentially take a look at that class

37
00:03:09.700 --> 00:03:10.810
repository.

38
00:03:10.810 --> 00:03:15.250
Take a look at all the different methods that have been assigned to it and more or less we can imagine

39
00:03:15.250 --> 00:03:20.330
that we're gonna take all those methods and copy paste them into the body of our class.

40
00:03:20.470 --> 00:03:26.280
So they're all going to be magically available inside of here but now because all those methods are

41
00:03:26.280 --> 00:03:31.140
inside of a separate class that is reusable we can create other repositories and extend them in the

42
00:03:31.140 --> 00:03:32.180
same way.

43
00:03:32.310 --> 00:03:37.050
And then just choose to override some very specific methods or add in some additional methods wherever

44
00:03:37.050 --> 00:03:39.830
we want some more functionality.

45
00:03:39.900 --> 00:03:42.340
There is one last fix we have to do right now.

46
00:03:42.360 --> 00:03:48.090
Repository has been left without any create function whatsoever because remember once again the create

47
00:03:48.090 --> 00:03:52.740
function we have right here is very very specific to creating a user.

48
00:03:52.800 --> 00:03:57.870
So we do have to go back over to our repository based class and create a create function inside of there

49
00:03:58.130 --> 00:04:01.040
that can be used for all generic records in general.

50
00:04:01.050 --> 00:04:06.920
So like products or any other type of record we decide to create in the future as well so back inside

51
00:04:06.930 --> 00:04:16.560
of repository right after the constructor I'm going to put together a async create method.

52
00:04:16.570 --> 00:04:20.330
Now we did put together a very generic looking to create method a while ago.

53
00:04:20.410 --> 00:04:25.840
Remember we're essentially going to take in some attributes we're going to create a new thing using

54
00:04:25.840 --> 00:04:26.810
those attributes.

55
00:04:26.950 --> 00:04:32.080
We're going to add them to our array of all the different records we have and then write that data back

56
00:04:32.080 --> 00:04:38.970
to our harddrive so we can go through that process pretty quickly so just like before we're going to

57
00:04:38.970 --> 00:04:40.140
receive our.

58
00:04:40.320 --> 00:04:43.000
I just want make sure I get the argument names here at least somewhat consistent.

59
00:04:43.020 --> 00:04:45.670
So adders is what we used previously.

60
00:04:45.750 --> 00:04:49.190
So we're going to receive some attributes inside an object.

61
00:04:49.400 --> 00:04:53.030
We're going to once again assign an I.D. or a random idea to that.

62
00:04:53.030 --> 00:05:00.540
So I'll say out-of-state I.D. is this not random I.D. I'll then get all my records

63
00:05:05.380 --> 00:05:07.530
then we'll add in the new record.

64
00:05:07.960 --> 00:05:17.320
So add in adders with the I.D. attached to it and we'll go ahead and do and await this dot right all

65
00:05:18.010 --> 00:05:21.610
with all those records awaits.

66
00:05:21.920 --> 00:05:26.630
And then finally I'm going to return adders because now it has been updated to have that I.D. in other

67
00:05:26.630 --> 00:05:29.860
parts of our application might care about the idea that was just added in.

68
00:05:29.900 --> 00:05:38.910
So I'll say return adders OK so now repository meets this entire like idea of a class that can work

69
00:05:38.910 --> 00:05:44.160
with records that are stored on our harddrive and we've chosen to extend it for the users class the

70
00:05:44.160 --> 00:05:45.490
users repository.

71
00:05:45.690 --> 00:05:49.260
When we extended it we added in one method overwrite it an existing one.

72
00:05:49.260 --> 00:05:51.180
And that's pretty much it.

73
00:05:51.300 --> 00:05:52.330
Let's take a pause right here.

74
00:05:52.360 --> 00:05:56.980
When we come back the next video we will create our products repository which is really just going to

75
00:05:56.980 --> 00:06:02.000
extend the repository base class and borrow all those methods that are defined on it.

76
00:06:02.350 --> 00:06:02.920
So quick pause.

77
00:06:02.920 --> 00:06:04.230
I'll see you in just a minute.
