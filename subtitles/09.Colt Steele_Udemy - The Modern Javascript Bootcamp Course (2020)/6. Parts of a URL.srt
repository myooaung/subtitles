1
00:00:00,940 --> 00:00:04,660
Well we can show a link to the user but now it's time to figure out how we're going to actually make

2
00:00:04,660 --> 00:00:05,620
the link right here.

3
00:00:05,620 --> 00:00:11,590
Something that some other user can visit and actually see some message appear on the screen so to figure

4
00:00:11,590 --> 00:00:16,660
that out we need to understand how we are going to essentially take that string and encode it into a

5
00:00:16,720 --> 00:00:21,520
urinal and make sure that that you all can actually be visited by someone else and just you know for

6
00:00:21,540 --> 00:00:23,960
this first version this application we're going to be building.

7
00:00:24,040 --> 00:00:29,160
The only other person who's going to be able to visit this link is you on your own computer.

8
00:00:29,260 --> 00:00:33,380
We'll eventually get a version put together that someone else on another computer can access.

9
00:00:33,460 --> 00:00:37,050
But right now you're really the only person who's going to be able to access this link.

10
00:00:37,060 --> 00:00:38,930
For now okay.

11
00:00:39,000 --> 00:00:40,810
So let's figure out what we're going to do.

12
00:00:40,950 --> 00:00:47,370
We first need to understand the different parts of a your l in general so I have a example your URL

13
00:00:47,400 --> 00:00:48,140
right here.

14
00:00:48,330 --> 00:00:50,640
We're going to divide it out to four different parts.

15
00:00:50,640 --> 00:00:52,020
The first part is the domain.

16
00:00:52,170 --> 00:00:57,610
So that would be like message dot com or Google dot com eBay dot com or whatever else.

17
00:00:57,750 --> 00:01:02,790
Immediately after that we're going to have what is called the path the path can be arbitrarily long

18
00:01:03,210 --> 00:01:11,350
so it can be slashed index dot HDL or slash my slash messages or whatever else at some point after that

19
00:01:11,650 --> 00:01:18,130
we get a character sometimes not always of a little question mark and then a collection of some word

20
00:01:18,400 --> 00:01:25,330
equals another word we refer to this as the query string it is used to communicate some number of options

21
00:01:25,330 --> 00:01:26,960
to a back end server.

22
00:01:27,010 --> 00:01:30,330
So for example I might have colored equals red.

23
00:01:30,580 --> 00:01:35,200
We can imagine that the query string right here is like an options object or kind of like a job script

24
00:01:35,200 --> 00:01:41,440
object really so we can imagine that the word color is like a key and red is like a value.

25
00:01:41,640 --> 00:01:44,080
So inside of a javascript object it would look like

26
00:01:49,550 --> 00:01:55,980
only at the very end we have a hash character or a pound symbol and in some arbitrary value after it

27
00:01:56,320 --> 00:02:02,320
we refer to that as our hash or fragment part of the you or L now out of the entire year l there is

28
00:02:02,320 --> 00:02:08,410
really one part of it that is really dedicated or intended for usage by the browser specifically so

29
00:02:08,410 --> 00:02:13,810
the browser can kind of manage its own information and that is the hash or fragment here at the very

30
00:02:13,810 --> 00:02:14,900
end.

31
00:02:14,950 --> 00:02:20,020
So typically you and I ask developers if we ever have some information that we want to somehow store

32
00:02:20,020 --> 00:02:25,440
in the URL and it is only relevant to the browser and not relevant to some back end server.

33
00:02:25,540 --> 00:02:29,050
We will usually store that inside the hash here at the very end.

34
00:02:29,230 --> 00:02:33,550
Give you a more practical example of what do you Well it really looks like we can really take a look

35
00:02:33,550 --> 00:02:38,470
at the URL of the current page that I'm at right now to really get a sense of what these different parts

36
00:02:38,470 --> 00:02:45,380
are talking about so I'm at a Web site called draw dot IO and I use this to put all the diagrams together

37
00:02:45,380 --> 00:02:50,330
for this course I took that you were L right there and broke it up in the same fashion.

38
00:02:50,390 --> 00:02:56,750
So the domain is draw out Io the path is simply forward slash and then we've got a query string and

39
00:02:56,750 --> 00:02:59,150
a hash fragment the query string.

40
00:02:59,150 --> 00:03:04,100
In this case is sending a message to a back end server and it's telling the back end server that I want

41
00:03:04,100 --> 00:03:10,310
to run the draw down Io application in the get hub mode which means that any diagrams that I create

42
00:03:10,550 --> 00:03:17,470
are going to be synchronized to some GitHub repository that I own that's some information we want to

43
00:03:17,470 --> 00:03:21,940
communicate to a back in server so that the back end server can send me a version of this application

44
00:03:22,240 --> 00:03:28,560
that's going to interact with GitHub but then the actual repository that I want to sync all this information

45
00:03:28,560 --> 00:03:33,660
to is something that is only concern to the browser because from this point on once I get this application

46
00:03:33,660 --> 00:03:38,700
running inside my browser the browser is going to communicate with GitHub directly and figure out how

47
00:03:38,700 --> 00:03:40,710
to sync some information up.

48
00:03:40,710 --> 00:03:47,910
So inside of the URL or excuse me inside the hash or fragment I have the entire link to my get hub repository

49
00:03:48,270 --> 00:03:53,090
and the file inside that repository that I want to sync this diagram to.

50
00:03:53,130 --> 00:03:58,560
So again domain the query string which has some parameters so we want to send to it back in server and

51
00:03:58,560 --> 00:04:04,410
then the hash or fragment as we call it that has some information relevant to adjust my browser and

52
00:04:04,410 --> 00:04:06,420
not really anyone else.

53
00:04:06,420 --> 00:04:10,650
So with all this in mind I think that you might be able to understand that we probably want to install

54
00:04:11,010 --> 00:04:16,440
that cryptic string inside of the hash or fragment at the very end because we want to store some information

55
00:04:16,440 --> 00:04:21,810
that is really just relevant to a user's browser and not really relevant to a back in server or anything

56
00:04:21,810 --> 00:04:23,640
like that.

57
00:04:23,690 --> 00:04:28,820
So now we understand where we might want to save our little encrypted string to communicate with someone

58
00:04:28,820 --> 00:04:29,360
else.

59
00:04:29,510 --> 00:04:31,000
We want to throw it into the hash.

60
00:04:31,010 --> 00:04:32,500
Let's take a pause here come back.

61
00:04:32,540 --> 00:04:37,130
We're going to figure out how we're going to update the URL that we are visiting whenever we're looking

62
00:04:37,130 --> 00:04:40,870
at this application and stick that little hash inside of it.

63
00:04:41,090 --> 00:04:44,020
Don't click pause and I'll see you in just a minute.
