1
00:00:00,210 --> 00:00:03,990
Next up let's talk about our third primitive type string.

2
00:00:03,990 --> 00:00:09,060
Strings come up all the time early on I talked about this form and how we might represent the data in

3
00:00:09,060 --> 00:00:10,000
JavaScript.

4
00:00:10,200 --> 00:00:16,610
All of this text information the review the name the email we would store that or model that using strings.

5
00:00:16,620 --> 00:00:22,480
Strings are just textual values pieces of text or strings of characters.

6
00:00:22,800 --> 00:00:26,390
And the most important thing to remember is that we wrap them in quotes.

7
00:00:26,520 --> 00:00:30,040
Single or double quotes so you can see some examples here.

8
00:00:30,060 --> 00:00:33,210
This is a string Ziggy using double quotes.

9
00:00:33,270 --> 00:00:35,550
Here's another one a longer string.

10
00:00:36,150 --> 00:00:38,340
Here's one with single quotes.

11
00:00:38,340 --> 00:00:43,920
This is problematic where we're mixing a double and a single we're never closing the string.

12
00:00:43,920 --> 00:00:44,950
You can use either.

13
00:00:45,180 --> 00:00:51,240
What's really important is just to be consistent within a single application or single file.

14
00:00:51,240 --> 00:00:55,720
You don't want to have some strings that are using single quotes and others that are using double.

15
00:00:55,800 --> 00:00:57,480
It's not a problem for your code.

16
00:00:57,510 --> 00:00:58,580
It won't cause any errors.

17
00:00:58,590 --> 00:01:01,200
It's just confusing for other developers.

18
00:01:01,830 --> 00:01:05,310
So as I said we can type strings instead of quotes.

19
00:01:05,310 --> 00:01:06,090
That's a string.

20
00:01:06,720 --> 00:01:08,900
We can do it with single quotes.

21
00:01:09,000 --> 00:01:10,790
We could even put numbers in there.

22
00:01:10,800 --> 00:01:13,130
This is a string not a number.

23
00:01:13,320 --> 00:01:17,800
I haven't shown you this yet but there is a special operator in JavaScript called type of.

24
00:01:18,390 --> 00:01:20,790
I have no idea why it is not capitalized.

25
00:01:20,790 --> 00:01:27,090
The Oh I'm sure there's a good reason for it hopefully but type of is an operator where we pass in a

26
00:01:27,090 --> 00:01:34,260
value like eighty seven and it tells us that's a string versus if I got rid of the quotes.

27
00:01:34,320 --> 00:01:35,970
That's a number.

28
00:01:36,030 --> 00:01:43,110
So strings are text they can contain all sorts of characters not just letters and numbers but also special

29
00:01:43,110 --> 00:01:44,190
characters.

30
00:01:44,400 --> 00:01:46,640
As long as we remember to close the string.

31
00:01:47,760 --> 00:01:53,890
So if you do something like this and we don't close it we get an error Invalid or unexpected token.

32
00:01:54,090 --> 00:01:58,410
That means that JavaScript encountered this opening quote and thanks.

33
00:01:58,410 --> 00:02:03,360
All right we're on a string string Len string you hand string land and then it just ends and it was

34
00:02:03,360 --> 00:02:07,690
expecting a quote at the end to let it know the string is done.

35
00:02:07,920 --> 00:02:11,460
We can also use quotes inside of other quotes.

36
00:02:11,530 --> 00:02:12,850
So let me show you what I mean.

37
00:02:12,870 --> 00:02:20,070
Let's say we had an example of he said and then I wanted to use quotes inside of this because somebody

38
00:02:20,070 --> 00:02:22,730
is talking hahaha.

39
00:02:23,010 --> 00:02:24,510
This is totally valid.

40
00:02:24,510 --> 00:02:29,900
I have single quotes on the outside and then double quotes on the inside that works.

41
00:02:29,940 --> 00:02:32,940
And I could do it the other way around as well.

42
00:02:32,940 --> 00:02:37,060
He said Elwell valid as well.

43
00:02:37,200 --> 00:02:44,300
What does not work is if you tried to use double quotes she said and then double quotes again like that.

44
00:02:45,270 --> 00:02:50,880
What's happening here is that we start a string off and then we close it prematurely and then we have

45
00:02:50,880 --> 00:02:54,790
this just LMG hanging around which doesn't mean anything in JavaScript.

46
00:02:54,810 --> 00:03:00,300
Give us an error and then a quote which opens a string and a quote that closes a string and it just

47
00:03:00,300 --> 00:03:05,910
contains a space so unexpected identifier it doesn't know what AMG is supposed to be.

48
00:03:06,870 --> 00:03:13,530
So those quotes have to be there but you can mix them up if you do need to have quotes inside of a string.

49
00:03:13,560 --> 00:03:15,930
Of course you can make variables with strings.

50
00:03:15,930 --> 00:03:17,340
Let's go with let.

51
00:03:17,460 --> 00:03:19,310
First name equals.

52
00:03:19,330 --> 00:03:22,610
We'll just use Ziggy as we've already seen in the notes.

53
00:03:22,610 --> 00:03:26,420
So we have first name and then let's also do last name.

54
00:03:26,610 --> 00:03:28,170
So let's.

55
00:03:28,290 --> 00:03:29,450
Last name.

56
00:03:30,420 --> 00:03:34,970
Let's do Ziggy cannery face.

57
00:03:35,040 --> 00:03:37,190
That's a very unique last name.

58
00:03:38,070 --> 00:03:43,680
And what I want to show you here is that we have some operations that we can do with strings.

59
00:03:43,680 --> 00:03:47,760
We can do something like first name plus last name.

60
00:03:47,760 --> 00:03:52,320
Now this is very different obviously than mathematically adding them even though it's the same operator

61
00:03:52,320 --> 00:03:53,420
or the same symbol.

62
00:03:53,460 --> 00:03:57,810
It has a very different meaning in this context when we're working with strings.

63
00:03:57,810 --> 00:04:03,330
We are going to can cat Nate the strings together which means shove them together into one string Ziggy

64
00:04:03,330 --> 00:04:05,070
canary face.

65
00:04:05,070 --> 00:04:10,460
And if we wanted to we could go further and add in a space between the two like this.

66
00:04:10,500 --> 00:04:13,620
So first name plus a space plus last name.

67
00:04:14,160 --> 00:04:19,740
Now we have Ziggy canary face and we could save that to a variable like full name equals first name

68
00:04:20,100 --> 00:04:21,730
plus space plus last name.

69
00:04:21,900 --> 00:04:24,730
And we have full name as Ziggy canary face.

70
00:04:24,750 --> 00:04:26,000
There are some quirky things.

71
00:04:26,010 --> 00:04:34,680
If you start mixing types like hi plus one one is going to be turned into a string and we end up with

72
00:04:34,680 --> 00:04:36,870
high one or concatenate them.

73
00:04:36,900 --> 00:04:40,500
We don't have similar operators for minus.

74
00:04:40,530 --> 00:04:47,740
So if we tried to do high minus H that doesn't work and thinks that we're working in mathematical realm

75
00:04:47,760 --> 00:04:49,230
so we get not a number.

76
00:04:49,230 --> 00:04:54,430
Same thing with division we try and do high divided by age not a number.

77
00:04:54,430 --> 00:04:59,250
There's quite a bit more to talk about with strings which we're about to do but I won't leave off here

78
00:04:59,420 --> 00:05:04,990
for this video we've seen that strings are textural value strings of characters and they need to be

79
00:05:04,990 --> 00:05:07,300
contained within quotes double or single.

80
00:05:07,300 --> 00:05:11,420
It doesn't matter as long as you are consistent and you close them correctly.

81
00:05:11,470 --> 00:05:15,850
So you have an opening single you need to have a closing single and the same goes for double quotes.
