1
00:00:00,870 --> 00:00:05,550
Now that we've done all these calculations for the horizontals array we can repeat that same process

2
00:00:05,550 --> 00:00:06,890
for verticals.

3
00:00:06,950 --> 00:00:11,050
So we're going to essentially do the same exact thing we did in the last video but we'll do it way faster.

4
00:00:11,070 --> 00:00:14,580
Since we now understand essentially what we're trying to accomplish here.

5
00:00:14,610 --> 00:00:21,270
So underneath the horizontals for each I'll add in a verticals for each then inside of here.

6
00:00:21,270 --> 00:00:27,560
Once again we're going to receive each row and we'll get a row index then inside of here we'll do a

7
00:00:27,620 --> 00:00:32,730
row for each and on the row for each.

8
00:00:32,730 --> 00:00:37,730
We're going to receive the Boolean value which will again refer to as open and we get the column index

9
00:00:37,730 --> 00:00:44,910
so we're currently operating on as well then inside we can say if open is true then return right away

10
00:00:46,100 --> 00:00:48,260
otherwise we want to create a wall segment.

11
00:00:48,260 --> 00:00:56,130
So once again we'll do const wall is bodies dot rectangle so all we really have to figure out is the

12
00:00:56,130 --> 00:01:00,540
different arguments to pass to bodies dot rectangle this time around the math is going to be just a

13
00:01:00,540 --> 00:01:04,080
little bit different because we are operating on a different direction.

14
00:01:04,350 --> 00:01:08,580
So let's once again go take a look at diagram and figure out how to calculate the center point to the

15
00:01:08,580 --> 00:01:13,670
x and y coordinates for each wall segment in the vertical direction.

16
00:01:13,760 --> 00:01:14,040
Okay.

17
00:01:14,070 --> 00:01:15,360
So here we are again.

18
00:01:15,520 --> 00:01:24,710
I'm going to imagine some data for my verticals array so in this case I'm going to have three rows and

19
00:01:24,770 --> 00:01:28,480
two columns and I'll remind you why in just a moment.

20
00:01:28,490 --> 00:01:32,410
So in this case I'm going to throw in some imaginary data here I'll do.

21
00:01:32,510 --> 00:01:43,610
True and False false and true and true and false so we have the three rows in this case because we're

22
00:01:43,610 --> 00:01:47,970
talking about that set of all segments that set and that set.

23
00:01:48,330 --> 00:01:55,910
So essentially this this this this this and this and then we've got two columns because there's only

24
00:01:55,970 --> 00:02:03,330
two lines of those segments on here so if we consider the different TRUE and FALSE values inside of

25
00:02:03,330 --> 00:02:10,940
this array I'm going to a race wherever we have a true value so we want that to be open.

26
00:02:11,000 --> 00:02:12,220
So no wall there.

27
00:02:12,650 --> 00:02:14,150
We want that to be open.

28
00:02:14,180 --> 00:02:18,080
No wall and we want that to be open as well.

29
00:02:20,600 --> 00:02:24,980
So once again let's imagine how we're going to calculate the x and y central points for each of these

30
00:02:24,980 --> 00:02:25,950
different segments.

31
00:02:25,970 --> 00:02:28,370
Well first start with this one on the top right hand side.

32
00:02:28,430 --> 00:02:32,190
And we essentially want to get the x and y coordinates of that X right there.

33
00:02:32,480 --> 00:02:36,800
Coming from our top left origin point at 0 1 0.

34
00:02:36,950 --> 00:02:44,690
So we need to determine that distance right there and that distance right there this time around I'm

35
00:02:44,690 --> 00:02:49,660
going to basically give you the formulas as opposed to trying to demonstrate exactly how they get calculated.

36
00:02:50,030 --> 00:02:51,150
They'll save us a lot of time.

37
00:02:51,170 --> 00:02:55,400
Essentially the same thing as last video we just need to calculate that center point right there as

38
00:02:55,400 --> 00:02:58,640
a function of the arrow and column that we are currently operating on.

39
00:02:58,730 --> 00:03:04,670
And the unit length as well so for the x direction that x component right there we're going to have

40
00:03:04,700 --> 00:03:05,990
our column

41
00:03:08,810 --> 00:03:13,310
index times unit length

42
00:03:18,050 --> 00:03:20,090
plus the unit

43
00:03:23,700 --> 00:03:25,410
let's try out the math for this.

44
00:03:25,410 --> 00:03:29,280
So in this case we have a column index of 0 than one.

45
00:03:29,400 --> 00:03:33,050
So our column index is 1 times 200.

46
00:03:33,060 --> 00:03:35,980
That is our unit length plus 200.

47
00:03:36,210 --> 00:03:37,920
And that is 400.

48
00:03:38,010 --> 00:03:39,060
That's definitely what this should be.

49
00:03:39,060 --> 00:03:44,640
Because remember we're essentially saying go over cell one cell 2 and then right there.

50
00:03:44,640 --> 00:03:46,400
So each cell is two hundred units.

51
00:03:46,440 --> 00:03:51,040
So we get two hundred and 200 over and that takes us to right there.

52
00:03:51,450 --> 00:03:53,880
So 400 definitely correct.

53
00:03:53,880 --> 00:03:57,510
We can repeat that for this next segment down here.

54
00:03:57,540 --> 00:04:07,710
That would be a column index of 0 times 200 was 200 is 200.

55
00:04:07,740 --> 00:04:09,660
Yep that definitely looks right to me.

56
00:04:09,660 --> 00:04:13,140
And then the last one down here on the bottom right is actually going to be identical to that first

57
00:04:13,140 --> 00:04:14,030
calculation.

58
00:04:14,130 --> 00:04:20,140
They'll be the one times 200 plus two hundred equals 400 OK.

59
00:04:20,180 --> 00:04:22,550
So that definitely solves this in the x direction.

60
00:04:22,550 --> 00:04:31,990
So now we get to repeat this same process but in the vertical direction instead they'll do some erasing.

61
00:04:32,270 --> 00:04:34,470
I'm going to again try to find that segment right there.

62
00:04:34,470 --> 00:04:38,910
Well let me just redraw some the stuff just so we can get some actual clarity in this diagram

63
00:04:41,970 --> 00:04:47,500
like so like so and like so now we'll find the y component of that element right there.

64
00:04:47,500 --> 00:04:52,030
So just eyeballing this it's essentially going to be we're going down half the length of one cell.

65
00:04:52,030 --> 00:04:55,320
So I'm going to expect this to be about 100 units.

66
00:04:55,330 --> 00:04:58,330
So the formula for this will be our row index

67
00:05:01,990 --> 00:05:04,090
times the unit length

68
00:05:07,000 --> 00:05:13,850
plus unit length divided by two.

69
00:05:13,850 --> 00:05:17,060
Now we can easily plug in some numbers to verify that that is the case.

70
00:05:17,110 --> 00:05:20,070
So right here are row index is currently zero.

71
00:05:20,080 --> 00:05:21,760
I'll throw those on right now.

72
00:05:21,760 --> 00:05:32,920
So we get zero times 200 plus 200 over two which gives us the 100 that I definitely expected.

73
00:05:33,190 --> 00:05:38,920
Then this one right here we're talking about going half of one cell plus the full length of another

74
00:05:38,920 --> 00:05:39,750
cell.

75
00:05:39,760 --> 00:05:43,480
So again just kind of guessing I'm going to say it's probably supposed to be three hundred.

76
00:05:43,510 --> 00:05:44,980
Let's throw the numbers in.

77
00:05:45,160 --> 00:05:53,920
So now I have a row index of 1 times 200 plus 200 over to yep there's my three hundred.

78
00:05:54,060 --> 00:06:02,460
And then finally for this one right here I have two full cell lengths was half a selling so that will

79
00:06:02,460 --> 00:06:11,800
be hopefully around 500 in this case by row and indexed as to so do two times two hundred plus two hundred

80
00:06:11,800 --> 00:06:16,930
over two and yep that is the full five hundred all right.

81
00:06:16,970 --> 00:06:17,540
That's it.

82
00:06:17,540 --> 00:06:24,560
So we have to now add in that formula and the one we saw just a moment ago where the x and y positions

83
00:06:24,950 --> 00:06:26,870
it's going to go back over to my editor.

84
00:06:27,140 --> 00:06:36,780
We'll do a column index times unit length plus unit length and we'll do a row index times unit length

85
00:06:38,060 --> 00:06:41,330
plus unit length divided by two.

86
00:06:41,330 --> 00:06:42,400
And I got a little typo here.

87
00:06:42,410 --> 00:06:44,920
I'm going to fix.

88
00:06:45,000 --> 00:06:49,460
And then finally we need to provide the width of a wall in the height of a wall.

89
00:06:49,630 --> 00:06:54,300
So remember the third argument is going to be how wide the wall is in the x direction.

90
00:06:54,300 --> 00:07:00,370
So now we're talking about like if we have a really wide wall that looks like that right there.

91
00:07:00,580 --> 00:07:03,520
What is this x direction.

92
00:07:03,700 --> 00:07:08,410
So we'll once again use some like arbitrary kind of small number to give ourselves a thin wall and then

93
00:07:08,410 --> 00:07:12,130
the height of the wall which is the fourth argument is going to be a unit length.

94
00:07:12,310 --> 00:07:19,500
So that's gonna be like a full 200 so as the third argument I'll do a wall width of whatever we had

95
00:07:19,500 --> 00:07:19,980
before.

96
00:07:19,980 --> 00:07:20,760
Looks like he was 10

97
00:07:23,560 --> 00:07:29,470
and the height is going to be the full unit length then finally as the last argument we'll throw on

98
00:07:29,470 --> 00:07:33,360
that same is static flag.

99
00:07:33,530 --> 00:07:38,960
And then finally underneath the wall we'll do a world dot add to our world object.

100
00:07:39,290 --> 00:07:44,250
And I want to add the while we just created OK so that's a lot of code.

101
00:07:44,260 --> 00:07:47,910
Let's say this once again put back over refresh and there we go.

102
00:07:47,920 --> 00:07:52,870
Here's our maze so we can refresh a whole bunch and we'll see all the different bases that we create

103
00:07:53,440 --> 00:07:59,470
in every scenario we should have like a solid continuous path we should to visit every single cell and

104
00:07:59,470 --> 00:08:02,050
there should never be a blockage of any kind.

105
00:08:02,080 --> 00:08:06,970
And as I refresh the whole bunch indefinite definite looks like that's the case now I know doing these

106
00:08:07,030 --> 00:08:12,100
formulas in the last two videos was really tedious but the benefit to taking this approach is we've

107
00:08:12,100 --> 00:08:17,310
now got this kind of configurable calculation going on there are very few static numbers inside of here

108
00:08:17,350 --> 00:08:20,490
besides the wall with all eventually abstract that out.

109
00:08:20,500 --> 00:08:25,720
So that means that in order to drastically change our maze we can just manipulate these values right

110
00:08:25,720 --> 00:08:26,950
here.

111
00:08:26,950 --> 00:08:32,740
So for example if I want to have a maze that is five cells wide five cells tall I can change cells to

112
00:08:32,740 --> 00:08:38,150
five and then everything else inside this file should automatically update appropriately.

113
00:08:38,190 --> 00:08:45,030
Now I can refresh and now I've got one cell to cell three cell for cell five and something in the vertical

114
00:08:45,030 --> 00:08:46,240
direction as well.

115
00:08:46,550 --> 00:08:50,580
And we can start to really play around with that number a lot more so I can go up to say 10 to make

116
00:08:50,610 --> 00:08:52,430
a much more detailed maze.

117
00:08:52,590 --> 00:08:56,940
There definitely is a limit to the number of cells you can have practically I think that it's going

118
00:08:56,940 --> 00:08:59,580
to max out around 100 or so.

119
00:08:59,640 --> 00:09:05,850
I do 100 OK maybe slightly over 100 since we're doing some recursion we're going to eventually exceed

120
00:09:05,850 --> 00:09:09,740
the maximum call stack size which means we are doing too much recursion.

121
00:09:09,810 --> 00:09:12,170
We could see that once we have way too many cells.

122
00:09:12,180 --> 00:09:16,360
Well the maze is basically unusable anyways so it's not really that big a difference.

123
00:09:16,560 --> 00:09:18,050
Let's try like cells 50.

124
00:09:18,160 --> 00:09:18,380
OK.

125
00:09:18,400 --> 00:09:19,900
That's a little bit too much.

126
00:09:20,040 --> 00:09:21,690
About 30.

127
00:09:21,830 --> 00:09:29,440
That's a little bit not quite useful but we could very easily make it usable by adjusting our wall size.

128
00:09:29,480 --> 00:09:35,470
So that is the 10 right here in the horizontals and the 10 inside the verticals as well.

129
00:09:35,620 --> 00:09:41,020
So we can change those to like about five to five right there in five right there.

130
00:09:41,020 --> 00:09:46,660
Save refresh and now it looks a bit more like a maze than it did before.

131
00:09:46,730 --> 00:09:48,050
So this is great.

132
00:09:48,050 --> 00:09:50,440
We've basically got a proof of concept for our maze.

133
00:09:50,450 --> 00:09:54,740
I am going to take it back to cells of three because that's really nice for testing purposes.

134
00:09:54,890 --> 00:09:57,490
It looks like everything is pretty much working as we expect.

135
00:09:57,620 --> 00:10:02,430
So pretty much the last thing we have to add in here is the ball that the user is going to control.

136
00:10:02,430 --> 00:10:07,220
We need to add in the success area down here at the bottom right hand side and then make sure that we

137
00:10:07,220 --> 00:10:09,950
can control the ball with some keyboard controls.

138
00:10:10,220 --> 00:10:12,680
So quick pause right here and we'll continue in the next video.
