1
00:00:01,020 --> 00:00:05,530
In the last video we authored a render function and made it available to everyone who ran our test framework

2
00:00:05,740 --> 00:00:08,710
by signing it to the global dot render variable.

3
00:00:08,720 --> 00:00:13,330
So now it's time to actually test out our testing framework to do so we first need to make sure that

4
00:00:13,330 --> 00:00:17,030
we have some tests that involve the sample web project that we just put together.

5
00:00:17,190 --> 00:00:23,350
So to get started inside of sample web project I'm going to create a new folder called test and then

6
00:00:23,350 --> 00:00:30,060
inside there I'll make a new file called app that test dot J.S. inside of app dot test at GSK.

7
00:00:30,070 --> 00:00:34,060
We're gonna write out some tests very similar to the ones we just put together a little bit ago around

8
00:00:34,060 --> 00:00:42,150
that for each example so inside of app dot test out J.S. I will write out it has a text input that's

9
00:00:42,150 --> 00:00:47,190
gonna be the focus of this first test that we author remember we are attempting to load up that index

10
00:00:47,190 --> 00:00:51,750
dot e-mail file and we're going to get a direct reference to essentially all the each email that is

11
00:00:51,750 --> 00:00:55,960
inside of it and we can interact with that each smell as though we were inside a browser.

12
00:00:56,580 --> 00:01:01,710
So we're going to write out a test that's just going to make sure that the small file has a text input

13
00:01:01,710 --> 00:01:03,480
like the one you see right there.

14
00:01:05,640 --> 00:01:11,220
So to do so we first have to call that render function to take that index on e-mail file and load it

15
00:01:11,220 --> 00:01:13,130
up inside of J.S. storm.

16
00:01:13,350 --> 00:01:17,340
What we get back should be an object that represents all the each level that's inside there and then

17
00:01:17,340 --> 00:01:21,040
we can start to inspect it and write our tests.

18
00:01:21,120 --> 00:01:26,310
We just made the render function available inside the global scope so we don't have to require anything

19
00:01:26,340 --> 00:01:27,820
in or anything like that.

20
00:01:27,840 --> 00:01:34,740
So inside of these it's statement I'll say const Dom is render and then I'll pass in the path to the

21
00:01:34,740 --> 00:01:37,270
indexed dot Asian I'll file that I want to execute.

22
00:01:37,450 --> 00:01:43,410
So that would be indexed dot Asian like so now remember render is an async function.

23
00:01:43,560 --> 00:01:49,770
So I'm going to mark the enclosing function as a sink and put a weight right in front of render the.

24
00:01:49,780 --> 00:01:54,940
Now let's just do a quick console log of Dom and see what we get okay.

25
00:01:54,980 --> 00:01:56,350
I'm gonna save this.

26
00:01:56,360 --> 00:01:59,890
I'm going to go back over to my terminal.

27
00:02:00,000 --> 00:02:02,340
I'm going to change into sample web project.

28
00:02:02,490 --> 00:02:08,760
Make sure you are inside of there as well and I'll execute Tumi and there we go.

29
00:02:08,770 --> 00:02:11,280
We get a really big console log right here.

30
00:02:11,290 --> 00:02:14,900
Take a look at that though a lot of information.

31
00:02:14,910 --> 00:02:19,970
You'll notice a lot of the stuff looks like stuff that we would see inside of some kind of normal kind

32
00:02:19,980 --> 00:02:22,010
of document or like normal web page.

33
00:02:22,020 --> 00:02:25,740
We see a lot of different event handlers we can setup and whatnot.

34
00:02:26,010 --> 00:02:29,400
So it definitely looks like this is at least somewhat working correctly right now.

35
00:02:29,430 --> 00:02:35,130
We can kind of see some browser related stuff but now the question very quickly becomes how do we actually

36
00:02:35,130 --> 00:02:39,340
kind of reach in there and really access the Dom and somehow mess around with it.

37
00:02:40,050 --> 00:02:45,310
Well to do so we could take another look at the Jamestown documentation so back over here if we go to

38
00:02:45,310 --> 00:02:47,100
the very top and scroll down a little bit.

39
00:02:48,270 --> 00:02:54,420
Remember here it is right here that second example we get back the dumb object inside there.

40
00:02:54,420 --> 00:03:00,480
We can reference window then document and on there we can have all these different queries selectors.

41
00:03:00,480 --> 00:03:05,400
So if we want to just make sure that our e-mail file has some text input inside of it we could write

42
00:03:05,400 --> 00:03:06,670
out some code that looks like this.

43
00:03:06,690 --> 00:03:18,130
I'll say const input is Dom dot window dot document dot query selector and I'll look for an input.

44
00:03:18,190 --> 00:03:23,380
Now if we do not have an input in our test is failing the input variable right here will be null.

45
00:03:23,380 --> 00:03:28,630
So we could do something very classic like what we first wrote out we could say if there is no input

46
00:03:28,690 --> 00:03:30,940
let's throw a new error.

47
00:03:30,970 --> 00:03:35,140
We spoke about that at great detail but remember a better way of writing out this if statement right

48
00:03:35,140 --> 00:03:40,660
here would be to instead use that a module that we have access to inside of node so I can remove the

49
00:03:40,660 --> 00:03:42,310
F statements at the top.

50
00:03:42,310 --> 00:03:52,100
I'm going to require in asserts like so and then to make sure that the input actually exists.

51
00:03:52,190 --> 00:03:59,480
We can simply assert input if we just directly call asserts in passing some value a cert is gonna throw

52
00:03:59,480 --> 00:04:01,820
an error if this value right here is false.

53
00:04:01,940 --> 00:04:03,800
Some of the words of input is equal to NULL.

54
00:04:03,830 --> 00:04:07,390
This is gonna throw an error in our test is going to fail right away.

55
00:04:07,560 --> 00:04:15,320
So let's now say this and try it out again I'll go back to my terminal or ran to me and looks like okay

56
00:04:16,070 --> 00:04:22,070
now of course as usual we always like to make our test fail at least one time so I'm going to go back

57
00:04:22,070 --> 00:04:30,680
over to my e-mail document and I'm going to delete that input right there I'll then save this go back

58
00:04:30,680 --> 00:04:37,790
over to my terminal run team again and I can see a nice big error message being displayed so that's

59
00:04:37,790 --> 00:04:43,520
awesome It means that we can now effectively load up all this h t mail and test what is going on inside

60
00:04:43,520 --> 00:04:48,430
of here and eventually we can also test to make sure that we start to interact with these elements.

61
00:04:48,620 --> 00:04:52,970
We can make sure that they do the correct thing based upon the javascript code that we authored inside

62
00:04:52,970 --> 00:04:55,770
of that index not just file as well.

63
00:04:55,790 --> 00:04:56,150
That's it.

64
00:04:56,150 --> 00:05:00,860
That's pretty much proof that we can get this thing working and we can run some arbitrary JavaScript

65
00:05:00,860 --> 00:05:06,770
or some javascript that is meant to execute inside the browser in a node jazz environment instead.

66
00:05:06,880 --> 00:05:08,210
So it looks really good.

67
00:05:08,210 --> 00:05:12,560
Well as we solve a lot of stuff to do so let's take a pause right here and continue in just a moment.
