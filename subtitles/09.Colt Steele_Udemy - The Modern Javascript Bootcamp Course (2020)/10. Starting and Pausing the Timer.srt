1
00:00:00,600 --> 00:00:03,100
All right so now that we've got all this this stuff out of the way.

2
00:00:03,120 --> 00:00:04,140
Let's get back on track.

3
00:00:04,140 --> 00:00:06,500
We're going to focus on our start at that right here.

4
00:00:06,510 --> 00:00:09,240
The goal of our start method is to start up a timer.

5
00:00:09,240 --> 00:00:14,670
We want to make sure that we run some amount of code every some amount of time that's going to be responsible

6
00:00:14,670 --> 00:00:16,860
for updating the text inside of our timer.

7
00:00:16,860 --> 00:00:23,790
So like count the 19 down to an 18 17 16 and so on the code that is going to actually update the timer

8
00:00:23,790 --> 00:00:28,460
itself and like count that thing down is going to be placed inside of this tick method.

9
00:00:28,530 --> 00:00:33,600
The goal that tick method right here is to update the text inside there and eventually emit a signal

10
00:00:33,600 --> 00:00:39,590
to the rest of our application to say hey some amount of time just past so the goal of start is really

11
00:00:39,590 --> 00:00:45,240
just to start up the tick method and call it every so many number of seconds.

12
00:00:45,260 --> 00:00:49,600
Let's take a look at what the implementation will look like right underneath starts.

13
00:00:49,600 --> 00:00:57,070
I'm going to also defined tick and I'm going to use that same kind of arrow syntax like so inside of

14
00:00:57,080 --> 00:00:57,360
tick.

15
00:00:57,370 --> 00:01:01,660
I'll put a quick council log of tick just we can make sure that we're calling it appropriately.

16
00:01:01,870 --> 00:01:06,850
And then inside of starts in order to make sure that we call tick every so many seconds like every second

17
00:01:06,850 --> 00:01:12,200
or so we can use the set interval function that is built into the javascript language.

18
00:01:12,400 --> 00:01:18,740
So inside of starts we will invoke set interval we're gonna pass in a reference to a function to invoke

19
00:01:19,190 --> 00:01:20,770
which will be the static.

20
00:01:21,020 --> 00:01:26,340
And then as the second argument we'll put in how often we want to run this function in this case I want

21
00:01:26,340 --> 00:01:29,160
to run tick every one seconds.

22
00:01:29,160 --> 00:01:31,740
The second argument is expressed in milliseconds.

23
00:01:31,740 --> 00:01:34,800
There are 1000 milliseconds inside of a second.

24
00:01:34,830 --> 00:01:40,320
So this code right here is going to make sure that we run this not tick once every seconds so the net

25
00:01:40,320 --> 00:01:44,930
result should be seeing a console log every second inside of our console.

26
00:01:44,930 --> 00:01:45,160
All right.

27
00:01:45,200 --> 00:01:47,870
Let's save this flip back over and see how we do.

28
00:01:48,720 --> 00:01:49,730
It's going to refresh.

29
00:01:49,760 --> 00:01:54,600
I'll click on Start and I see tick tick tick tick.

30
00:01:54,640 --> 00:01:55,120
And so on.

31
00:01:55,790 --> 00:01:57,270
OK well that definitely looks good.

32
00:01:57,490 --> 00:02:00,130
But there is a very subtle little issue here.

33
00:02:00,130 --> 00:02:06,100
If we refresh again I want you to notice that when we click on Start we have to wait a full second before

34
00:02:06,100 --> 00:02:07,300
we see the first tick.

35
00:02:08,680 --> 00:02:13,600
So it turns out that when you call set interval it's going to wait one seconds or whatever that delay

36
00:02:13,600 --> 00:02:17,980
is before calling that function for the first time in our application.

37
00:02:17,980 --> 00:02:22,600
This would be kind of bad because whenever a user clicks on that start button they really expect to

38
00:02:22,600 --> 00:02:24,480
see the timer start working right away.

39
00:02:24,490 --> 00:02:28,300
We don't want them to be waiting around for a second and then see some kind of update.

40
00:02:28,330 --> 00:02:31,560
Instead we want that update to occur instantly.

41
00:02:31,660 --> 00:02:36,610
So in order to make sure that occurs we're going to simply call this dot tick manually right before

42
00:02:38,730 --> 00:02:38,850
it's.

43
00:02:38,850 --> 00:02:43,560
Now this is saying whenever we call starts we're going to immediately run one tick.

44
00:02:43,560 --> 00:02:47,910
Then we're going to set up an interval that's going to be executed one second in the future.

45
00:02:47,940 --> 00:02:51,470
Then one second after that after that after that and so on.

46
00:02:51,510 --> 00:02:57,090
So if we say this again go back over refresh and click starts we now instantly see tick and then tick

47
00:02:57,270 --> 00:03:00,380
tick tick and so on okay.

48
00:03:00,410 --> 00:03:01,150
So looks pretty good.

49
00:03:03,070 --> 00:03:04,080
And this is pretty easy.

50
00:03:04,090 --> 00:03:05,650
So let's just keep going right now.

51
00:03:05,680 --> 00:03:08,800
The next method that we need to put together is the pause method.

52
00:03:08,800 --> 00:03:13,990
So we need to make sure that when we click on that pause button we stop the ticking altogether in order

53
00:03:13,990 --> 00:03:19,270
to stop our interval essentially stop this function from being called whenever we call set interval

54
00:03:19,330 --> 00:03:25,080
we get back something called a timer language with sign it to a variable that I'll call timer

55
00:03:29,300 --> 00:03:35,590
and for right now let's just do a console log of that timer and see what exactly it is I'll go back

56
00:03:35,590 --> 00:03:39,670
over refresh click start again and there's the console log of the timer.

57
00:03:39,670 --> 00:03:44,960
So in this case it is a simple number of 1 want to tell you what's going on behind the scenes.

58
00:03:45,100 --> 00:03:51,760
Whenever we call set interval we get back in integer the integer is an I.D. and it's essentially representing

59
00:03:51,790 --> 00:03:56,770
the running timer or the running interval that is going to continue executing this function again and

60
00:03:56,770 --> 00:04:03,190
again if we ever need to stop that timer or stop this interval from running we can call another function

61
00:04:03,220 --> 00:04:09,500
that is built into the browser or into javascript called Clear interval when we call a clear interval

62
00:04:09,530 --> 00:04:13,460
interval we're gonna pass on the idea of the interval that we want to stop.

63
00:04:13,640 --> 00:04:16,350
And so in this case would be the timer variable right there.

64
00:04:17,350 --> 00:04:23,050
So in this scenario right here we are essentially setting up an interval and then immediately cancelling

65
00:04:23,050 --> 00:04:23,650
it.

66
00:04:23,650 --> 00:04:28,870
So I would expect to never see the tick function run except for the first time we call it manually right

67
00:04:28,870 --> 00:04:35,690
there so let's say this again I'm going to flip back over refresh I'll hit start.

68
00:04:36,000 --> 00:04:39,900
And so now I see one tick behind the scenes we set up our interval.

69
00:04:39,900 --> 00:04:42,480
And then on the next line of code we immediately cancelled it.

70
00:04:42,660 --> 00:04:48,150
So I don't see any more ticks up here so of course rather than canceling the timer right away.

71
00:04:48,210 --> 00:04:53,820
Well we probably want to cancel it at some point in time in the future specifically in our case whenever

72
00:04:53,820 --> 00:04:58,950
the user clicks on the pause button which should run the pause method inside of our class.

73
00:04:59,780 --> 00:05:01,430
Let's define a pause method.

74
00:05:01,430 --> 00:05:05,810
We're going to make sure that the pause method is going to call clear interval and pass in the relevant

75
00:05:05,900 --> 00:05:16,180
I.D. So underneath starts I'm going to define my pause method like so inside of here we will call clear

76
00:05:16,180 --> 00:05:17,290
interval.

77
00:05:17,290 --> 00:05:22,450
Now there's just a little issue we need to somehow get the timer variable that was created over here

78
00:05:22,720 --> 00:05:27,250
into this other method in order to share information between different methods.

79
00:05:27,400 --> 00:05:30,250
We assigned that information to an instance variable.

80
00:05:30,550 --> 00:05:35,920
So instead of a sonnet directly to a variable right here called const timer we're going to say this

81
00:05:36,010 --> 00:05:42,210
dot timer so by assigning the value to this that's going to make sure that we can refer to this dot

82
00:05:42,210 --> 00:05:46,950
timer over inside this method and we'll get access to the same information that we just assigned right

83
00:05:46,950 --> 00:05:47,760
there.

84
00:05:47,760 --> 00:05:51,960
So in other words we're gonna say clear interval with this dot timer.

85
00:05:51,960 --> 00:05:56,010
We can also clean up the clear interval that we left inside a start because we don't need it inside

86
00:05:56,010 --> 00:05:59,070
there anymore.

87
00:05:59,090 --> 00:06:04,880
One other quick thing to mention we are currently working on a class called timer referring to a variable

88
00:06:04,880 --> 00:06:10,100
inside of here of like this dot timer is just a little bit unclear because we now have two words inside

89
00:06:10,100 --> 00:06:12,830
of a class that are really really similar.

90
00:06:12,860 --> 00:06:17,420
So in order to avoid any confusion whatsoever I'm just gonna change the name of the variable that we

91
00:06:17,420 --> 00:06:22,700
are assigning the I.D. to two How about interval because that's kind of what it represents.

92
00:06:22,700 --> 00:06:27,390
You can also do something like interval I.D. that would also be appropriate as well but I'm just gonna

93
00:06:27,380 --> 00:06:32,750
go with interval that is what I use personally on projects that I work on I'm going to make sure that

94
00:06:32,750 --> 00:06:39,330
I update this not timer inside a pause as well like so okay.

95
00:06:39,400 --> 00:06:40,510
So now to test this out.

96
00:06:40,540 --> 00:06:45,550
Lastly we have to do very quickly we need to make sure that backup inside the constructor we watch for

97
00:06:45,550 --> 00:06:49,810
a click event on the pause button element whenever a click event occurs.

98
00:06:49,810 --> 00:06:51,640
We need to run that pause method.

99
00:06:52,000 --> 00:06:57,610
So right after where we set up our click event handler right there I'm going to do a this dot pause

100
00:06:57,700 --> 00:07:06,380
button add event listener I'm going to watch for the Click event whenever that occurs I want to run

101
00:07:06,380 --> 00:07:12,050
the this dot pause method like so okay so it looks pretty good.

102
00:07:12,180 --> 00:07:19,080
So going to save this and we'll do a quick test so flip back over it refresh it starts now we're gonna

103
00:07:19,100 --> 00:07:24,320
see a tick once every second and then as soon as we hit the pause button it stops.

104
00:07:24,570 --> 00:07:27,400
And so I don't see any more ticks occur.

105
00:07:27,400 --> 00:07:30,450
All right well let's say that this is working out pretty darn well so far.

106
00:07:30,490 --> 00:07:33,480
Let's take a quick pause right here and continue in just a moment.
