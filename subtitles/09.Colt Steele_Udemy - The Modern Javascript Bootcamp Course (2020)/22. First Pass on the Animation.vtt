WEBVTT
1
00:00:00.770 --> 00:00:05.780
Now that we've got the entire story let's start to work on the actual implementation of this animation.

2
00:00:05.810 --> 00:00:10.480
The first thing we're going to do is change some of the dimensions of the SPG and the circle elements.

3
00:00:10.700 --> 00:00:15.920
Right now if I zoom all the way out to 100 percent that timer that we have right here is really small.

4
00:00:15.950 --> 00:00:20.240
So I want to basically double the size of the timer just sort of fills up the screen a little bit more

5
00:00:20.240 --> 00:00:24.070
nicely so to get started I'm going to find my SPG element.

6
00:00:24.200 --> 00:00:28.290
I'm going to change the height to 400 the width to 400.

7
00:00:28.420 --> 00:00:30.570
I'm going to change the radius as well.

8
00:00:30.570 --> 00:00:34.940
We're going to use a radius of 190.

9
00:00:34.970 --> 00:00:39.290
We're going to leave the C X or AND SEE Y at two hundred and two hundred.

10
00:00:39.350 --> 00:00:43.570
But we are going to have to come back and adjust those and just a little bit you'll see why very shortly

11
00:00:45.700 --> 00:00:49.500
we will leave the fill of transparent stroke.

12
00:00:49.510 --> 00:00:54.770
I'm going to leave as blue I'm going to slightly adjust these stroke with make it just a little bit

13
00:00:54.770 --> 00:00:56.950
thicker at 15.

14
00:00:57.140 --> 00:01:01.460
And then finally I'm going to take out the dash array any dash offset.

15
00:01:01.460 --> 00:01:06.380
We're going to calculate both those values on the fly using the radius because otherwise like I just

16
00:01:06.380 --> 00:01:11.540
mentioned if we ever decide to change the radius again chances are we might not remember how DASH rate

17
00:01:11.540 --> 00:01:12.300
is calculated.

18
00:01:12.320 --> 00:01:17.120
Remember it's supposed to be the perimeter value so we're going to calculate that value on the fly using

19
00:01:17.120 --> 00:01:19.060
the radius just so we don't have to remember.

20
00:01:19.070 --> 00:01:19.410
Oh yeah.

21
00:01:19.430 --> 00:01:25.770
Two times pi times the radius to figure this out so in total we're gonna double check here.

22
00:01:25.790 --> 00:01:28.360
We should have our c x see y Bill.

23
00:01:28.380 --> 00:01:30.790
Stroke stroke width in transform.

24
00:01:30.920 --> 00:01:31.530
One last thing.

25
00:01:31.550 --> 00:01:33.610
I apologize here on rotate.

26
00:01:33.650 --> 00:01:39.910
We need to adjust that to two hundred two hundred to specify the new center point okay.

27
00:01:39.960 --> 00:01:43.380
Let's save this now and see how we're doing okay.

28
00:01:43.560 --> 00:01:48.100
Well that looks pretty good definitely a little bit better sized.

29
00:01:48.150 --> 00:01:52.050
We're going to make sure that the text input only certain pause buttons eventually show up inside there

30
00:01:52.050 --> 00:01:57.030
militias work on the animation to get started they're not going to go back over to our index start j

31
00:01:57.020 --> 00:02:02.900
ust file and down by our timer we're going to eventually write a bunch of different code inside of here

32
00:02:03.080 --> 00:02:08.480
to work with the timer and make sure that every time we get a tick we can get clean up a little bit

33
00:02:08.480 --> 00:02:14.910
or really kind of change some of the different properties of that circle element so to get started at

34
00:02:14.910 --> 00:02:19.740
the very top with all these other queries selectors I'm going to add in a selector to find that circle

35
00:02:19.770 --> 00:02:31.270
element I'll say const circle is document dot query selector circle and after that we will immediately

36
00:02:31.300 --> 00:02:37.600
read off the value of art or the radius and we'll use it to calculate the perimeter defined the radius

37
00:02:37.600 --> 00:02:44.860
of the circle we can use circle dot get attributes and then we put in the name of the attribute that

38
00:02:44.860 --> 00:02:53.860
we want to find in this case are so to calculate the perimeter it will be the radius times 2 times math

39
00:02:53.980 --> 00:03:00.410
dot pi and notice how pyrite here is all capitals then going to assign that to a variable that I will

40
00:03:00.410 --> 00:03:08.980
call perimeter then immediately after that we're going to set the dash array value on the circle equal

41
00:03:08.980 --> 00:03:13.930
to the perimeter remember that is what is going to get us the full big circle like you see right here

42
00:03:15.960 --> 00:03:18.750
it's also a circle set attribute.

43
00:03:18.810 --> 00:03:28.490
We're going to try to set stroke dash dash array and we're going to set it equal to the perimeter okay.

44
00:03:28.510 --> 00:03:31.480
That looks pretty good.

45
00:03:31.510 --> 00:03:35.890
It's now the next thing we're going to do is to make sure that every single time our timer ticks we're

46
00:03:35.890 --> 00:03:37.900
going to once again set an attribute.

47
00:03:37.900 --> 00:03:43.090
But this time we're going to set our stroke dash offset property which is what's going to give us that

48
00:03:43.090 --> 00:03:50.420
white space up here on the starting on the top edge and go around in the clockwise direction the inside

49
00:03:50.420 --> 00:03:51.500
of on tick.

50
00:03:51.500 --> 00:04:00.530
I'm going to delete that console log and I'll replace it with circle that set attribute.

51
00:04:00.640 --> 00:04:07.780
We're going to set the stroke dash dash offset property and we need to provide a value right here that's

52
00:04:07.780 --> 00:04:13.900
going to start off a zero and go more and more negative over time ideally by the time our entire loop

53
00:04:13.900 --> 00:04:14.530
finishes.

54
00:04:14.530 --> 00:04:19.780
So by the time the timer like ticks down to zero set or the stroke dash offset right here should be

55
00:04:19.810 --> 00:04:21.600
equal to the perimeter.

56
00:04:21.730 --> 00:04:29.970
That would be ideal so to make that happen right now we're going to declare a little variable right

57
00:04:29.970 --> 00:04:41.180
above our timer that we'll call current offset and I'll initialize it at 0 then inside of the set attribute

58
00:04:41.180 --> 00:04:42.830
or inside the on tick right here.

59
00:04:42.890 --> 00:04:45.080
I'm going to say current offset

60
00:04:48.300 --> 00:04:52.380
and during every tick we'll update the value of current offset.

61
00:04:52.650 --> 00:04:58.970
We'll say Chernoff that will be current offset minus 50 and I apologize actually want that line to be

62
00:04:58.970 --> 00:05:05.340
underneath these set attributes like so we'll set the attributes and then subtract a little bit off

63
00:05:05.340 --> 00:05:07.610
the current offset okay.

64
00:05:07.640 --> 00:05:10.010
So let's say this and see how we're doing right now.

65
00:05:10.130 --> 00:05:13.310
It's to flip back over I'm gonna refresh.

66
00:05:13.310 --> 00:05:18.410
I'm going to hit start and now we can see that things starting to tick down.

67
00:05:18.450 --> 00:05:19.200
Well look at that.

68
00:05:19.200 --> 00:05:20.730
It actually works.

69
00:05:20.730 --> 00:05:20.930
Okay.

70
00:05:20.970 --> 00:05:23.240
Well that's definitely not bad at all.

71
00:05:23.240 --> 00:05:28.100
The only problem right now is that it is a very kind of like blocky animation because remember we are

72
00:05:28.100 --> 00:05:33.520
only ticking once every seconds and then every seconds we are counting off by exactly 50.

73
00:05:33.560 --> 00:05:36.750
So that's what's resulting this really blocky looking animation.

74
00:05:36.770 --> 00:05:39.890
The other issue is that as soon as we start to get down to right there.

75
00:05:39.890 --> 00:05:45.170
Well unfortunately because we are just subtracting 50 units every time we're going to eventually roll

76
00:05:45.170 --> 00:05:49.700
around that entire property or that entire value of stroke dash offset.

77
00:05:49.700 --> 00:05:54.650
So it's going to eventually get greater than the perimeter so definitely what we have right now works.

78
00:05:54.670 --> 00:05:57.450
But there are a couple of things about it we need to improve.

79
00:05:57.520 --> 00:06:00.160
So we need to make sure that the animation is a lot smoother.

80
00:06:00.160 --> 00:06:05.250
We also need to make sure that rather than using this just negative 50 right here we should adjust by

81
00:06:05.260 --> 00:06:06.890
a very even increment.

82
00:06:06.910 --> 00:06:11.730
So essentially the number of ticks or it really our perimeter divided by the number of ticks.

83
00:06:11.830 --> 00:06:16.480
So that by the time it gets down to zero or the timer gets down to zero we should end up right there

84
00:06:16.570 --> 00:06:20.960
and not go over to the next edge so definitely still a little bit of work.

85
00:06:21.080 --> 00:06:23.450
So let's get started on that in the next video.
