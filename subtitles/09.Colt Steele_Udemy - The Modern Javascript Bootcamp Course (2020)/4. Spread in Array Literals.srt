1
00:00:00,240 --> 00:00:02,820
Next up we'll see the second use case for spread.

2
00:00:02,950 --> 00:00:08,640
If we go back to this paragraph of gibberish from Indian spread syntax allows an interval such as an

3
00:00:08,640 --> 00:00:14,790
array to be expanded in places where zero or more elements for array laterals are expected.

4
00:00:14,790 --> 00:00:17,640
So we can use those three dots instead of an array literal.

5
00:00:18,060 --> 00:00:21,840
We just saw how we can use it in a function call in an array literal.

6
00:00:21,840 --> 00:00:24,020
It does something very similar.

7
00:00:24,060 --> 00:00:27,640
It takes an automobile and it spreads it out.

8
00:00:27,690 --> 00:00:34,500
It takes the individual pieces and in the case of an array it copies them over into a new destination

9
00:00:34,500 --> 00:00:39,170
array so we can use it to combine arrays to make a copy of an array.

10
00:00:39,170 --> 00:00:42,640
There is a whole bunch of situations where you may end up using spread.

11
00:00:43,080 --> 00:00:43,920
So let's check it out.

12
00:00:43,920 --> 00:00:46,050
I have a simple example over here.

13
00:00:46,110 --> 00:00:48,590
I have some arrays of really cool animals.

14
00:00:48,590 --> 00:00:50,190
My favorite animals out there.

15
00:00:50,190 --> 00:00:56,300
We've got several pods which are basically squid cuttlefish not Alice's.

16
00:00:56,310 --> 00:00:57,980
So there's a couple examples in here.

17
00:00:57,990 --> 00:00:59,670
We've got gastro pods.

18
00:00:59,670 --> 00:01:06,590
Giant African Snail variable neon slug a really cool animal and Nigeria which include things like jellyfish

19
00:01:06,710 --> 00:01:10,230
and in corals and Hydra and a couple other things.

20
00:01:10,230 --> 00:01:13,220
Anyway we're going to combine them in a few different ways.

21
00:01:13,230 --> 00:01:14,450
Also stick around at the end.

22
00:01:14,460 --> 00:01:18,370
If you want to see some photos and videos of these some of them are pretty cool.

23
00:01:18,570 --> 00:01:21,440
But I won't waste your time in the middle of the video with that.

24
00:01:21,450 --> 00:01:26,670
So quick biology lesson in both of these right here several pods and gastro pods.

25
00:01:26,700 --> 00:01:28,600
They're both considered molluscs.

26
00:01:28,800 --> 00:01:35,880
So if I wanted to make an array with both of them called molluscs or mollusks I think it's the correct

27
00:01:35,940 --> 00:01:42,990
Latin term I could use spread like this stuff several pods comma.

28
00:01:43,110 --> 00:01:50,370
Dot dot dot gastro pods and this will make me a new array with both the contents of those arrays combined

29
00:01:50,370 --> 00:01:51,410
into one.

30
00:01:51,540 --> 00:01:52,970
So let's take a look.

31
00:01:53,070 --> 00:01:54,650
What do we have over here.

32
00:01:54,670 --> 00:01:56,930
Malaysia has six elements.

33
00:01:56,970 --> 00:02:00,400
We had three from several pods and three from gastro pods.

34
00:02:00,420 --> 00:02:01,560
Notice the order.

35
00:02:01,800 --> 00:02:07,640
I put several pods first so we get those three elements first and then gastro pods afterwards.

36
00:02:07,730 --> 00:02:09,890
In the original arrays are untouched.

37
00:02:10,020 --> 00:02:16,560
We're just making a copy or actually a new array with copies of both arrays inside.

38
00:02:16,560 --> 00:02:22,830
If I instead did it the other way around and I did three dots with gastro pods first and then three

39
00:02:22,830 --> 00:02:29,100
dots spread with several pods for low pods.

40
00:02:29,260 --> 00:02:33,700
You can see the order is different now so we have the first three from gastro pods.

41
00:02:33,700 --> 00:02:35,310
Second three from several pods.

42
00:02:35,320 --> 00:02:37,470
The order does matter.

43
00:02:37,630 --> 00:02:43,110
Also we could add in other elements if we wanted to that weren't present from these arrays.

44
00:02:43,210 --> 00:02:49,840
I could add in upfront which another mollusk we could add if I wanted to add at the beginning a garden

45
00:02:49,840 --> 00:02:52,570
slug it would look like this.

46
00:02:52,720 --> 00:03:00,670
I just added as an element and then comma and then spread comma spread more and then we go.

47
00:03:00,670 --> 00:03:03,280
I could also combine more than one array.

48
00:03:03,490 --> 00:03:05,710
I could do all three of these arrays.

49
00:03:05,890 --> 00:03:07,710
They would be considered invertebrates.

50
00:03:07,840 --> 00:03:12,610
So const inverts equals and then dot dot dot.

51
00:03:12,640 --> 00:03:14,140
Let's do an idol area first.

52
00:03:14,140 --> 00:03:14,860
Dot dot dot.

53
00:03:14,860 --> 00:03:16,780
Gastro pods dot dot dot.

54
00:03:16,780 --> 00:03:19,470
Need my comma dot dot dot.

55
00:03:19,540 --> 00:03:20,520
Several iPods.

56
00:03:22,090 --> 00:03:27,790
And if I look at inverts we now have an array of eight elements all of them combined.

57
00:03:27,790 --> 00:03:28,500
Spread is great.

58
00:03:28,510 --> 00:03:33,470
In situations where you need to combine arrays but it's not doing something we couldn't do before.

59
00:03:33,580 --> 00:03:36,770
We have already seen how to use can cat.

60
00:03:36,790 --> 00:03:42,810
So for example several pods dot can cat gastro pods.

61
00:03:42,810 --> 00:03:48,570
It gives us the same result that we had from this line where we're taking the data from several pods

62
00:03:48,600 --> 00:03:50,340
and combining it with gastro pods.

63
00:03:50,750 --> 00:03:53,690
And if we look at the originals they're still unchanged.

64
00:03:53,700 --> 00:03:59,560
This is just a shorter syntax it's easier to see and easier to reorder as you like.

65
00:03:59,700 --> 00:04:02,370
And we can add an element wherever we want to.

66
00:04:02,400 --> 00:04:07,710
We can do multiple arrays combined there's a lot we can do and one of the most common use cases for

67
00:04:07,710 --> 00:04:10,530
spread is actually just to make a copy of an array.

68
00:04:11,190 --> 00:04:16,750
If I just want a second version of Nigeria actually let's go with several pods.

69
00:04:16,750 --> 00:04:18,370
Nigeria is annoying to spell.

70
00:04:18,690 --> 00:04:25,020
I could do const self copy equals array literal brackets.

71
00:04:25,020 --> 00:04:36,380
Dot dot dot several pods and if I look at self copy I now have the same data and they have unique references.

72
00:04:36,390 --> 00:04:46,460
So they are not triple equals to each other self copy triple equals several iPods is false versus if

73
00:04:46,460 --> 00:04:56,290
I had just made an array like concept or it made a variable concept copy equals Sevilla pods copy triple

74
00:04:56,290 --> 00:05:02,620
equals several pods will be true as we've seen before because they are referencing the same reference

75
00:05:02,800 --> 00:05:08,170
they're pointing to the same reference but when we use spread here it is going to make a clone a new

76
00:05:08,170 --> 00:05:15,190
array in memory with a new unique reference but that does not extend to nested arrays or if we had objects

77
00:05:15,190 --> 00:05:17,960
inside of the arrays those won't be cloned.

78
00:05:18,040 --> 00:05:19,900
The references will remain the same.

79
00:05:19,900 --> 00:05:24,250
So it does not go multiple levels deep so we can do this with arrays.

80
00:05:24,280 --> 00:05:28,650
We can also spread other types of data into an array.

81
00:05:28,750 --> 00:05:32,490
There's not many that you would do it with but one example would be a string.

82
00:05:32,710 --> 00:05:39,070
If we wanted to get a string like let's say we had a b c d e f g imagine this is the whole alphabet

83
00:05:39,430 --> 00:05:46,270
and I wanted an array where each character was one element I could do dots split which we've seen already

84
00:05:46,320 --> 00:05:54,070
and you pass in an empty string saying split this string on nothing split on every character and it

85
00:05:54,070 --> 00:05:57,370
gives us an array just like that but I can also do this.

86
00:05:57,370 --> 00:06:02,240
ABC TFG and spread it One two three.

87
00:06:02,680 --> 00:06:07,220
And it's the same idea what we had here with an array when we spread it.

88
00:06:07,420 --> 00:06:14,170
We're telling javascript to iterate over this interval and for each item in there added as an element

89
00:06:14,170 --> 00:06:20,500
in the array which is what we did earlier with a different array rather than a string but the same process

90
00:06:20,830 --> 00:06:22,600
so we can spread strings.

91
00:06:22,660 --> 00:06:28,000
Probably not that common that you would spread a bunch of them into one array but we could we could

92
00:06:28,000 --> 00:06:37,840
do a b c comma D E F comma hello and then spread these guys.

93
00:06:38,170 --> 00:06:42,550
And that's what we end up with ABC DCF and then hello at the end.

94
00:06:42,550 --> 00:06:45,520
So that's pretty much it for spreading into an array literal.

95
00:06:45,520 --> 00:06:49,120
Same idea as spreading into a function call.

96
00:06:49,210 --> 00:06:55,270
We're taking an honorable and breaking it into pieces and moving them or copying them to a destination.

97
00:06:55,270 --> 00:06:57,550
In this case it's an array that we're creating.

98
00:06:57,550 --> 00:07:01,420
And as promised I'll show you some of those animals if you want to check them out.

99
00:07:01,450 --> 00:07:04,670
Some of my favorite guys on earth guys favorite animals.

100
00:07:04,750 --> 00:07:06,700
We've got the Dumbo Octopus.

101
00:07:06,700 --> 00:07:15,790
Very adorable tiny octopus very cute giant African snail horrifyingly huge snails they're giant as their

102
00:07:15,790 --> 00:07:16,840
name tells you.

103
00:07:16,840 --> 00:07:20,830
Quite quite intimidating would not want to hold one of those in my hands.

104
00:07:20,830 --> 00:07:25,000
Then we've got a really cool animal called a variable neon slug.

105
00:07:25,060 --> 00:07:30,960
It's a species of new to brink these really cool flat worms that live in the ocean.

106
00:07:31,060 --> 00:07:33,310
Lots of them have beautiful beautiful colors.

107
00:07:33,310 --> 00:07:34,590
You can see here.

108
00:07:34,690 --> 00:07:38,660
And then finally my favorite the flamboyant cuttlefish.

109
00:07:38,690 --> 00:07:45,280
They're tiny adorable little creatures with incredible skin and ability to display these patterns and

110
00:07:45,280 --> 00:07:47,620
change their the shape of their body.

111
00:07:47,680 --> 00:07:49,180
Very hypnotic anyway.

112
00:07:49,240 --> 00:07:50,800
So those are some of my favorite animals.

113
00:07:50,800 --> 00:07:52,540
Thanks for joining me on cults animal.

114
00:07:52,540 --> 00:07:55,320
Our back to JavaScript.

115
00:07:55,360 --> 00:07:56,420
That's coming up next.

116
00:07:56,440 --> 00:07:57,490
More spread.

117
00:07:57,490 --> 00:07:57,990
Wait wait.

118
00:07:58,000 --> 00:08:00,070
I forgot to show you the best part.

119
00:08:00,070 --> 00:08:00,990
Here we go.

120
00:08:01,000 --> 00:08:06,690
The way that they eat this appendage comes out horrifying and then snaps back.

121
00:08:06,820 --> 00:08:08,050
OK that's it for that.
