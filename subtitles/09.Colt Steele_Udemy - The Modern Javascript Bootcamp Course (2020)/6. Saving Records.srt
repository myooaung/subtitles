1
00:00:01,250 --> 00:00:02,380
Let's start to implement this.

2
00:00:02,390 --> 00:00:07,080
Create function to create function is going to take some attributes that a user should have.

3
00:00:07,130 --> 00:00:11,590
We're then going to take that record stored inside of our data file somehow.

4
00:00:11,730 --> 00:00:16,970
The first thing I want to discuss is the attributes property right here for our user creation or storing

5
00:00:16,970 --> 00:00:17,480
and user.

6
00:00:17,480 --> 00:00:21,710
We're probably going to want to save their email and password but we probably want to write out our

7
00:00:21,710 --> 00:00:26,270
code in kind of a generic format so that if we ever decide to add in additional properties that a user

8
00:00:26,270 --> 00:00:28,600
should have we can readily accept those.

9
00:00:28,610 --> 00:00:33,680
So for example if a user object is supposed to now have a user name or something like that we just want

10
00:00:33,680 --> 00:00:37,940
to make sure that create is written in such a way that it could take in those additional attributes

11
00:00:38,850 --> 00:00:47,100
so I can once again go back over to my editor underneath get all I can to add an async create and this

12
00:00:47,100 --> 00:00:51,830
will be called with some attributes that this new user record is going to have.

13
00:00:52,060 --> 00:00:58,190
I'm going to shorten the name attributes right away to just adders just for abbreviations sake so adders

14
00:00:58,220 --> 00:01:06,330
is going to be an object that maybe has like an email property with a email and a password that has

15
00:01:06,330 --> 00:01:07,650
a password.

16
00:01:07,650 --> 00:01:10,350
So we need to essentially take that object right there.

17
00:01:10,610 --> 00:01:17,770
Add it into our big array of users and then write that update to our users not just on file one thing

18
00:01:17,770 --> 00:01:21,760
on mention really quickly is that you'll notice that right now I'm kind of imagining that our password

19
00:01:21,760 --> 00:01:26,830
is stored in plain text for the first iteration of our stuff we're going to assume that our passwords

20
00:01:26,890 --> 00:01:28,160
are stored in plain text.

21
00:01:28,200 --> 00:01:32,370
We are going to very quickly refactor it to store passwords in a much more secure fashion.

22
00:01:32,380 --> 00:01:34,950
I just wanna mention that really quickly if all that doesn't make sense.

23
00:01:34,960 --> 00:01:35,740
No problem.

24
00:01:35,830 --> 00:01:42,020
We're gonna have a huge discussion later on about how to safely secure and store passwords okay.

25
00:01:42,050 --> 00:01:47,780
So then inside of here in order to create an add a new user we're going to first load up the contents

26
00:01:48,050 --> 00:01:49,650
of our user store Jason on file.

27
00:01:49,670 --> 00:01:54,710
So essentially every single time we want to make a change to our list of users we're going to load our

28
00:01:54,710 --> 00:01:55,400
file backup.

29
00:01:55,430 --> 00:02:01,160
So we have the most recent collection or iteration of data available will then add in our new user to

30
00:02:01,160 --> 00:02:07,980
that array and then write the file directly back to our harddrive so inside of here I'm going to say

31
00:02:08,430 --> 00:02:11,620
const records is a wait.

32
00:02:11,730 --> 00:02:19,970
This dot get all that's gonna give me my big existing list of users I'm then going to push in the records

33
00:02:19,980 --> 00:02:29,440
not push the new user and then after that we need to write out some code that's going to write the updated

34
00:02:30,790 --> 00:02:35,340
records array back to files dot or me.

35
00:02:35,350 --> 00:02:36,870
Users dot Jason.

36
00:02:36,920 --> 00:02:44,410
Well really for us this file name so for that we're going to do the exact opposite of read file up here.

37
00:02:44,410 --> 00:02:49,240
We're going to instead use right file so we're going to take all of our information turn it back into

38
00:02:49,240 --> 00:02:52,700
Jason data and then write that back to our hard drive.

39
00:02:52,730 --> 00:02:56,690
Let's take a look at the documentation around right file again very quickly because this time around

40
00:02:56,720 --> 00:03:01,950
we're going to use the promise based version as opposed to the sync based version we had before it's

41
00:03:02,000 --> 00:03:03,070
back in my documentation.

42
00:03:03,070 --> 00:03:06,900
I'll look for FSM dot promises dot right file.

43
00:03:06,910 --> 00:03:07,960
Here it is right here.

44
00:03:08,810 --> 00:03:11,030
So making use of this is really easy and straightforward.

45
00:03:11,050 --> 00:03:13,840
We're going to call f s stop promises dot right file.

46
00:03:13,900 --> 00:03:20,640
We're going to pass in the file name in the data to throw in their if the file already exists.

47
00:03:20,640 --> 00:03:24,150
When we call right file we are not going to add on additional information.

48
00:03:24,150 --> 00:03:28,860
Instead we're going to replace whatever is already inside the file so we can basically call it right

49
00:03:28,860 --> 00:03:33,780
file as many times as we want to in a row with some new information.

50
00:03:33,850 --> 00:03:35,350
It's a back over here.

51
00:03:35,420 --> 00:03:46,040
We're gonna just take out that comment and I'll do an a wait f S. promises not right file the first

52
00:03:46,040 --> 00:03:49,570
argument will be this dot file name.

53
00:03:49,600 --> 00:03:54,570
The second argument is going to be the information that we want to store inside that file as a string.

54
00:03:54,700 --> 00:03:58,980
So we're going to take our records variable which we just changed and add in that newsy user.

55
00:03:59,110 --> 00:04:03,850
We're going to turn it into Jason and then pass it in as the second argument they'll do.

56
00:04:03,860 --> 00:04:07,480
Jason not string of fi records.

57
00:04:10,090 --> 00:04:15,070
And then there is an optional third argument we can pass in the options object with the encoding.

58
00:04:15,070 --> 00:04:18,520
You'll notice once again the default encoding is UTF 8.

59
00:04:18,550 --> 00:04:22,510
So we really don't have to pass it in because well we are using a default here.

60
00:04:23,110 --> 00:04:28,060
So from this point on I'm just going to ignore that encoding argument because usually UTF 8 is the default

61
00:04:30,590 --> 00:04:30,930
okay.

62
00:04:31,610 --> 00:04:33,530
So that's pretty much it for creates.

63
00:04:33,580 --> 00:04:38,140
Now we are going to eventually abstract out this right file line into a separate function because as

64
00:04:38,140 --> 00:04:43,660
you're going to see we end up having to update our users not Jason File from many different locations

65
00:04:43,690 --> 00:04:45,420
inside this repository class.

66
00:04:45,520 --> 00:04:49,870
But if right now just for testing purposes we will leave that line directly inside of our create function

67
00:04:52,080 --> 00:04:53,450
to now to test this out.

68
00:04:53,480 --> 00:05:02,860
I'm gonna go back down to my test function right above where I call get all I will call repo not create

69
00:05:03,720 --> 00:05:09,480
I'll put in the user properties I want to are the properties for this user that I want to save so I

70
00:05:09,480 --> 00:05:18,520
can give them an email of test at test dot com and a password of password to create function is asynchronous

71
00:05:18,520 --> 00:05:18,960
in nature.

72
00:05:19,000 --> 00:05:23,490
So I can make sure that I also put the awake keyword right in front of it to think about what we're

73
00:05:23,490 --> 00:05:28,620
now doing we're going to get access to our users repository we're gonna save a new record to it we're

74
00:05:28,620 --> 00:05:34,870
then going to get all the records we have saved and console logged amount are going to save this and

75
00:05:34,870 --> 00:05:36,650
we'll do another quick test.

76
00:05:36,810 --> 00:05:44,230
I'll go back over to my terminal node users dot J.S. and I can see the console log of that one single

77
00:05:44,230 --> 00:05:45,340
user.

78
00:05:45,340 --> 00:05:50,710
In addition if I go over to my editor and OPEN UP THE USER start JS on file I'll see my plane data inside

79
00:05:50,740 --> 00:05:51,550
there as well.

80
00:05:52,740 --> 00:05:52,960
Okay.

81
00:05:52,990 --> 00:05:53,550
So this is it.

82
00:05:53,560 --> 00:05:58,370
This kind of proves that we can have some persistence of data and add in new records over time.

83
00:05:58,480 --> 00:06:03,370
Now every single time that we run node user start we're going to add in a new user record.

84
00:06:03,430 --> 00:06:09,840
So if I run to several times in a row I'm going to end up with a equivalent number of user objects if

85
00:06:09,840 --> 00:06:14,490
I go back over to my users not just Jason File I'll see all those different records reflected inside

86
00:06:14,490 --> 00:06:15,500
of here.

87
00:06:15,580 --> 00:06:21,330
The nice benefit to this application or this style of creating a user's repository that stores all this

88
00:06:21,330 --> 00:06:26,850
data inside of a file is that if you and I ever want to see what information is inside of our project

89
00:06:27,090 --> 00:06:31,450
we can just open up the appropriate JS on file and we're pretty much good to go.

90
00:06:31,650 --> 00:06:33,020
So this is a good improvement.

91
00:06:33,030 --> 00:06:36,910
Let's take another pause right here and continue working on the remainder of our functions.
