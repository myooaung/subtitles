WEBVTT
1
00:00:00.770 --> 00:00:02.380
We just did a little bit of project setup.

2
00:00:02.420 --> 00:00:05.660
So ready to start writing some code inside the index dodgy his file.

3
00:00:05.660 --> 00:00:09.860
But before we do I want to outline some of the big challenges that we're probably going to run into

4
00:00:09.920 --> 00:00:13.070
as we work on this project and how we're going to solve each of them.

5
00:00:13.070 --> 00:00:17.170
Remember overall this project is going to be pretty similar to the last one we just worked on.

6
00:00:17.170 --> 00:00:22.440
Are we going to tackle it by making use of more open source packages than we did before.

7
00:00:22.440 --> 00:00:22.670
OK.

8
00:00:22.790 --> 00:00:29.410
So back inside work diagram right here so these are three big issues I think we're going to run into.

9
00:00:29.410 --> 00:00:34.130
First off we need to somehow detect when a file changes inside of a given folder.

10
00:00:34.150 --> 00:00:39.890
Remember we don't only want to restart a program when the file that we are executing gets changed.

11
00:00:39.970 --> 00:00:41.740
We want to watch the entire folder.

12
00:00:41.810 --> 00:00:46.480
And we want to see if anything in the entire folder changes whenever that occurs.

13
00:00:46.480 --> 00:00:49.270
Then we're going to go ahead and do the restart.

14
00:00:49.500 --> 00:00:55.000
Next up it would be kind of nice to provide some help to anyone who uses our CLIA tool.

15
00:00:55.000 --> 00:00:58.570
Right now of course we're kind of imagining that we're developing this for ourself but we're going to

16
00:00:58.570 --> 00:01:03.490
pretend that maybe some other engineers might decide to use our CLIA tool that we're putting together.

17
00:01:03.490 --> 00:01:07.840
And so it'd be really nice if I could somehow integrate some help system into it to make it more obvious

18
00:01:07.840 --> 00:01:12.230
to other engineers how to use our program finally.

19
00:01:12.250 --> 00:01:14.260
And this is obviously going to be a pretty big one.

20
00:01:14.320 --> 00:01:19.290
We need to figure out how to execute some javascript code from within a javascript program.

21
00:01:19.300 --> 00:01:22.380
In other words hey you and I are running a job script program.

22
00:01:22.450 --> 00:01:26.530
We need to detect whenever some file changes and execute that file.

23
00:01:26.530 --> 00:01:32.730
So how do we essentially run some code from within a program well for each of these big challenges we're

24
00:01:32.730 --> 00:01:37.170
going to use some open source package or a module from the node standard library.

25
00:01:37.860 --> 00:01:39.160
So here's the idea.

26
00:01:39.510 --> 00:01:44.850
First off for detecting whenever a file changes we're going to be using a package called Chalk ADR or

27
00:01:44.850 --> 00:01:49.180
choke ADR whatever you want to pronounce that as it's up to you.

28
00:01:49.230 --> 00:01:54.230
Anyways we're going to use this package to detect whenever a file changes inside of our project directory.

29
00:01:54.480 --> 00:01:57.280
We can pull up the documentation for this package right now.

30
00:01:57.330 --> 00:02:04.540
I'll go to NPM J Ask.com once a year and go to search for choke ADR chalk ADR.

31
00:02:04.610 --> 00:02:07.190
I don't know I'll find it right there.

32
00:02:09.210 --> 00:02:14.190
And we can take a look at some the documentation on the documentation here you can read over some of

33
00:02:14.190 --> 00:02:14.790
the notes.

34
00:02:14.790 --> 00:02:19.530
Essentially the thing is made for doing exactly what we are using it for right now detecting whenever

35
00:02:19.560 --> 00:02:22.020
a file changes inside of a directory.

36
00:02:22.140 --> 00:02:27.210
It not only detects whenever a file is changed it also detects in every file is created or deleted as

37
00:02:27.210 --> 00:02:28.150
well.

38
00:02:28.410 --> 00:02:30.060
You can see an example of how to use it.

39
00:02:30.090 --> 00:02:36.160
If you go down to getting started right here you'll see a tiny little snippet.

40
00:02:36.200 --> 00:02:38.950
That's pretty much exactly what you and I want to do.

41
00:02:39.110 --> 00:02:45.770
We want to watch for changes inside of some directory and whenever something occurs the dot on all right

42
00:02:45.770 --> 00:02:52.190
there it means whenever a file is changed created updated whatever it's going to run this callback function

43
00:02:52.220 --> 00:02:53.270
right here.

44
00:02:53.270 --> 00:02:55.870
So you and I we can kind of imagine inside that callback function.

45
00:02:55.880 --> 00:03:02.180
We're going to end up adding in some code that's going to restart our program so using choke it out

46
00:03:02.180 --> 00:03:04.660
should be pretty straightforward.

47
00:03:04.660 --> 00:03:10.000
Next up we need to somehow provide some better help to users of our CLIA tool.

48
00:03:10.000 --> 00:03:16.000
So for that to build our CLIA tool this time around we're going to use a package called I can't pronounce

49
00:03:16.000 --> 00:03:17.230
any of these things I'll be honest with you.

50
00:03:17.230 --> 00:03:18.820
Corporal.

51
00:03:18.820 --> 00:03:22.550
Corporal I don't know anyone here so we're going to use this package.

52
00:03:22.570 --> 00:03:24.310
So let's take a look get some documentation for it.

53
00:03:24.310 --> 00:03:27.040
Back at NPM ust dot com a look up capital.

54
00:03:27.130 --> 00:03:33.270
I guess so this is a package just intended to help us put together a command line tool.

55
00:03:33.300 --> 00:03:37.800
It's going to automate a lot of the things that you're probably used to having inside of a command line

56
00:03:37.800 --> 00:03:38.400
application.

57
00:03:39.090 --> 00:03:42.760
So for example we can go down two examples right here.

58
00:03:42.900 --> 00:03:49.110
They'll show us a little code snippet of how to use it so we're going to essentially build our application

59
00:03:49.110 --> 00:03:51.840
using this kind of framework or this kind of style right here.

60
00:03:52.080 --> 00:03:58.890
If we build our app using this structure then capital is going to give us some output that allows users

61
00:03:59.730 --> 00:04:02.460
to use our application in a really straightforward way.

62
00:04:02.490 --> 00:04:09.000
So if you scroll down a little bit here we'll see an example of that further or a bit further.

63
00:04:09.000 --> 00:04:09.450
Here we go.

64
00:04:09.490 --> 00:04:12.320
It's all the way down at auto generated help.

65
00:04:12.410 --> 00:04:16.620
So this right here is an example of some of the things that capital does for us if we fill in some of

66
00:04:16.620 --> 00:04:21.960
the blanks of the code we saw earlier where we call some different functions and tell this program exactly

67
00:04:21.960 --> 00:04:27.600
what arguments we expect our code to receive then it's going to automatically fill out stuff like hey

68
00:04:27.630 --> 00:04:29.350
here's how you use our program.

69
00:04:29.610 --> 00:04:33.210
Here's the different commands that are available and here some the different options you can use as

70
00:04:33.210 --> 00:04:34.170
well.

71
00:04:34.170 --> 00:04:39.180
So again the entire goal of this capital thing is to essentially generate this health stuff for us and

72
00:04:39.180 --> 00:04:44.530
also pass some of the incoming arguments that are being provided to our program.

73
00:04:45.170 --> 00:04:50.620
Then the last thing is how are we going to execute some javascript code from within our javascript code

74
00:04:51.100 --> 00:04:56.890
for that we're going to use the standard library module called child underscore process to execute our

75
00:04:56.890 --> 00:05:03.880
program it's going to go back over to the node J.S. standard documentation remember you can get here

76
00:05:03.880 --> 00:05:10.380
by going to know J dot org slash API and once here on the left hand side we'll find a child processes

77
00:05:11.880 --> 00:05:17.540
so this entire module right here is about running some code from within our node program.

78
00:05:17.540 --> 00:05:20.390
There are three different methods inside of here that we need to be aware of.

79
00:05:21.700 --> 00:05:23.730
You could see them listed out right here towards the top.

80
00:05:24.130 --> 00:05:26.730
So one is the exact function.

81
00:05:26.740 --> 00:05:28.090
Another is fork.

82
00:05:28.120 --> 00:05:30.010
And another is spun.

83
00:05:30.010 --> 00:05:35.320
These are all different commands that are used to create new programs from within our program.

84
00:05:35.380 --> 00:05:39.400
We'll talk about the differences between each of these and why we might want to use one over the other

85
00:05:39.640 --> 00:05:43.790
when we get to the point where we actually need to execute some code okay.

86
00:05:43.810 --> 00:05:44.500
So that's it.

87
00:05:44.500 --> 00:05:48.670
Those are the big challenges and that's how we're going to generally approach that each of them.

88
00:05:48.670 --> 00:05:52.450
Again we're going to have much more reliance on some outside code this time around.

89
00:05:52.450 --> 00:05:57.100
So we're going to be more kind of like filling in the blanks here as opposed to what we did in the last

90
00:05:57.100 --> 00:06:03.270
application where we were trying to do everything essentially from scratch yes let's pause right here

91
00:06:03.600 --> 00:06:07.440
when we come back the next video we're going to install some of these different packages and then start

92
00:06:07.440 --> 00:06:09.120
to make use of them inside of our project.
