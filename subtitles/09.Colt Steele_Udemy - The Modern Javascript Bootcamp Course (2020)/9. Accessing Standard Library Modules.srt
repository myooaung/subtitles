1
00:00:00,760 --> 00:00:06,310
I'm still taking a look at the documentation for the file system module inside of no J.S. so inside

2
00:00:06,310 --> 00:00:06,600
of here.

3
00:00:06,610 --> 00:00:11,080
I want to take a look at a very specific function that's going to allow us to accomplish the app we're

4
00:00:11,080 --> 00:00:16,210
trying to build which remember is to print out all the files and folders inside of some given directory

5
00:00:17,340 --> 00:00:23,440
so in the FSA or file system documentation I'm going to do a search on the page or read

6
00:00:26,150 --> 00:00:32,650
that we are looking for the FSA dot read dir which is short for read directory function it's going to

7
00:00:32,650 --> 00:00:38,460
find that documentation and click it to this is a function that will allow us to read the contents of

8
00:00:38,460 --> 00:00:39,630
a directory.

9
00:00:39,630 --> 00:00:44,760
So we're going to be given back a array of strings and that array of strings is going to be all of the

10
00:00:44,760 --> 00:00:48,150
different file names inside of a given folder.

11
00:00:48,190 --> 00:00:52,990
So this is essentially exactly what we need to start up our project because like we said we're trying

12
00:00:52,990 --> 00:00:57,860
to just really read the contents of a directory and print it out at the Council.

13
00:00:57,900 --> 00:00:59,880
All right so let's start up a project.

14
00:00:59,970 --> 00:01:04,560
We're going to create a new project folder create an index not just file inside there and then we will

15
00:01:04,560 --> 00:01:09,840
tried to get access to this function and call it from within our code to get started.

16
00:01:09,840 --> 00:01:15,530
I'll go back over to my terminal and back inside of a workspace directory of sorts inside of here.

17
00:01:15,540 --> 00:01:19,270
I'm gonna make a new project folder called list.

18
00:01:19,350 --> 00:01:22,320
The idea here is that we're going to be listing files and folders.

19
00:01:22,320 --> 00:01:23,610
We can call it anything we want.

20
00:01:23,670 --> 00:01:26,240
The name list is appropriate or at least good enough.

21
00:01:27,020 --> 00:01:29,160
I'll then change into there and then start my code.

22
00:01:29,170 --> 00:01:34,960
Ed once my editor is open I'll create an index.

23
00:01:34,960 --> 00:01:37,260
Dot J.S. file.

24
00:01:37,480 --> 00:01:37,740
All right.

25
00:01:37,740 --> 00:01:39,660
So now we've got a place to get started.

26
00:01:39,670 --> 00:01:45,130
We need to get access to the file system module inside of our project to do so.

27
00:01:45,130 --> 00:01:50,440
We have to add in a required statement and add in the module from the node standard library that we

28
00:01:50,440 --> 00:01:52,170
want to make use of.

29
00:01:52,220 --> 00:02:01,070
So to get access to the file system module we will write out const F S equals require F S So why did

30
00:02:01,070 --> 00:02:02,780
I write f s here.

31
00:02:02,780 --> 00:02:08,990
Well it turns out that the filesystem module in node is abbreviated just about everywhere as simply

32
00:02:09,170 --> 00:02:10,560
f s..

33
00:02:10,700 --> 00:02:13,610
This is not the case with every module inside the node center library.

34
00:02:13,610 --> 00:02:18,440
They are not all abbreviated so unfortunately as you start to get used to the different modules we have

35
00:02:18,440 --> 00:02:22,880
access to you're going to have to take a look at some the different documentation to get a better sense

36
00:02:22,880 --> 00:02:28,910
of exactly what we have to require when we're trying to look for a given module with most other modules

37
00:02:28,910 --> 00:02:29,930
that we're going to use.

38
00:02:29,930 --> 00:02:34,460
It's pretty straightforward to figure out exactly what we're going to require in.

39
00:02:34,620 --> 00:02:41,540
So for example if we go back over to our documentation and take a look at the left where the path module

40
00:02:42,650 --> 00:02:48,390
to get access to the path module we would require the word path as opposed to the abbreviation of it

41
00:02:48,390 --> 00:02:52,110
which might be just like the letter P or something like I said.

42
00:02:52,110 --> 00:02:56,040
Unfortunately you're going to have to get a little bit of experience reading the documentation to understand

43
00:02:56,280 --> 00:03:00,570
how to get access to these different modules just understand that some of them are going to be kind

44
00:03:00,570 --> 00:03:06,060
of abbreviated or whatnot or they might have some naming it is not a hundred percent expected.

45
00:03:06,060 --> 00:03:09,800
Another good example of this is the child processes module.

46
00:03:10,140 --> 00:03:15,420
So to get access to this module you might think you'd simply like the letter C P or something or even

47
00:03:15,420 --> 00:03:20,280
just the word child process or child dash process or something like that.

48
00:03:20,330 --> 00:03:25,330
We'll know it turns out that to get access to that wanted it as child underscore process.

49
00:03:26,040 --> 00:03:30,450
So again you're gonna have to do a little research and just have kind of a good memory on how we get

50
00:03:30,450 --> 00:03:33,350
access to these different modules.

51
00:03:33,450 --> 00:03:38,760
So again to get access to the filesystem module we write out require FS and we assign it to a variable

52
00:03:38,840 --> 00:03:39,910
f us.

53
00:03:40,050 --> 00:03:45,540
Now this object right here or that variable is an object that has all the different pieces of functionality

54
00:03:45,600 --> 00:03:53,540
that are stuffed into the file system module so on that object we can get access to every single function

55
00:03:53,600 --> 00:03:59,540
that you see listed out inside of the file system documentation so everything inside of here we access

56
00:03:59,570 --> 00:04:01,420
all of it through that F S object.

57
00:04:02,960 --> 00:04:06,570
So as we mentioned the one that we really care about here is read Dir.

58
00:04:06,590 --> 00:04:07,930
I'm going to get it back on screen.

59
00:04:07,930 --> 00:04:08,920
Here it is right here.

60
00:04:09,630 --> 00:04:14,090
So now we can call the F S dot read it dir function directly.

61
00:04:14,180 --> 00:04:15,170
Let's take a quick pause.

62
00:04:15,200 --> 00:04:16,640
So this video doesn't go on too long.

63
00:04:16,640 --> 00:04:19,670
We'll come back the next section and start to learn how to use this function.
