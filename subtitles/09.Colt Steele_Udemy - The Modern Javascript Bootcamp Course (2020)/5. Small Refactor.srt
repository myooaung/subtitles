1
00:00:01,410 --> 00:00:01,660
All right.

2
00:00:01,680 --> 00:00:02,300
Let's keep going.

3
00:00:02,300 --> 00:00:03,960
On our get all function.

4
00:00:03,960 --> 00:00:05,280
So we've now got our contents.

5
00:00:05,370 --> 00:00:13,600
So we're going to now pass the contents to right here I'll say Constanta data is Jason dot PURSE AND

6
00:00:13,620 --> 00:00:19,010
I'LL PASS IN contents like so so inside the file we're going to store all of our users as JS on data

7
00:00:19,340 --> 00:00:21,740
which can be safely written out as a string.

8
00:00:21,740 --> 00:00:25,470
Once we load information that file we first have it as a string.

9
00:00:25,520 --> 00:00:31,010
So we need to take that string and pass it from Jason back into a normal javascript object or an array

10
00:00:31,010 --> 00:00:39,350
of objects in this case so after we do that pass operation will then return our data not to test this

11
00:00:39,350 --> 00:00:39,520
out.

12
00:00:39,520 --> 00:00:45,000
Once again I'm going to remove that console log up there back down inside of my test function.

13
00:00:45,000 --> 00:00:50,040
I'm going to take whatever we get back from get all and assign it to agreeable that I'll call users

14
00:00:51,480 --> 00:00:54,530
and I'll do a console log of users.

15
00:00:54,530 --> 00:01:00,560
So before like I mentioned we were doing technically a console log of just a string that had an array

16
00:01:00,770 --> 00:01:02,600
or array characters inside of it.

17
00:01:02,600 --> 00:01:07,960
Now when we do this console log we should be seeing an actual javascript array so I can make sure I

18
00:01:07,960 --> 00:01:12,260
save that file and then do node users not just once again.

19
00:01:12,260 --> 00:01:17,840
So now looks like we're the same thing but technically it now is actually an array OKAY.

20
00:01:17,870 --> 00:01:20,410
SO THIS IS VERY GOOD.

21
00:01:20,490 --> 00:01:23,590
NOW WE'VE GOT TO DO A LITTLE BIT OF A refactor of the statement right here.

22
00:01:23,590 --> 00:01:26,550
We've got some extraneous variables being created.

23
00:01:26,710 --> 00:01:32,660
So we're going to refactor this thing down to a single line of code or really a single expression in

24
00:01:32,660 --> 00:01:34,580
order to get it down to a single expression.

25
00:01:34,640 --> 00:01:39,650
I'm going to take where we call a weight F S dot read file right there and I'm going to wrap it with

26
00:01:39,770 --> 00:01:46,640
Jason dot pass and I'll make sure I get a closing parentheses on the other side as well so now we can

27
00:01:46,640 --> 00:01:52,850
just return the result of that expression and we don't have to go through creating all those extra variables.

28
00:01:53,030 --> 00:01:58,470
So going to delete that comment I'm going to delete the stuff underneath and we are left with the same

29
00:01:58,470 --> 00:01:59,720
functionality that we had before.

30
00:01:59,730 --> 00:02:04,460
But it's much more compact so I'll save this do another quick test.

31
00:02:04,630 --> 00:02:07,280
Yup still works OK.

32
00:02:07,410 --> 00:02:13,170
So obviously console logging out in empty array is not super interesting or handy so we'll take another

33
00:02:13,170 --> 00:02:15,090
pause right here when we come back in just a moment.

34
00:02:15,090 --> 00:02:19,740
We're going to start to implement our create function which we're going to use to actually add new records

35
00:02:19,980 --> 00:02:21,300
into our data store.

36
00:02:21,300 --> 00:02:26,760
After that will then be all to really test the full flow of creating a record saving it and then returning

37
00:02:26,760 --> 00:02:29,460
it eventually by retrieving it once again.

38
00:02:29,460 --> 00:02:31,130
Let's take care of that in just a moment.
