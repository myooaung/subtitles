1
00:00:00,240 --> 00:00:03,210
Next up two very similar events that are pretty useful.

2
00:00:03,210 --> 00:00:09,060
They're called input and change on input on change are the respective properties they have to do with

3
00:00:09,060 --> 00:00:15,660
inputs like we have here a text input a select a checkbox and what I want to show you is that we can

4
00:00:15,660 --> 00:00:21,660
actually listen to changes across all three of these different types of inputs or different form controls

5
00:00:21,990 --> 00:00:23,980
using a single event type.

6
00:00:24,090 --> 00:00:29,880
And our goal here is to let's say create a data structure that looks like this.

7
00:00:29,880 --> 00:00:36,810
It's an object that will automatically stay in sync or will stay updated with whatever a user is typing.

8
00:00:36,840 --> 00:00:43,170
So instead of waiting for a user to hit submit like we did in the previous video where we grab the data

9
00:00:43,230 --> 00:00:49,680
from each input after they submit the form we could instead just keep in sync and know exactly what

10
00:00:49,680 --> 00:00:51,580
is happening in each input.

11
00:00:51,660 --> 00:00:57,600
So we would have an object with maybe a key of credit card and it would be equal to whatever is in that

12
00:00:57,600 --> 00:00:58,530
input.

13
00:00:58,650 --> 00:01:06,620
We could have the checkbox so terms and then that could be set to true and veggie could be set to a

14
00:01:06,850 --> 00:01:13,140
carrot and then as soon as one of these changes if the user checks the checkbox we want it to go to

15
00:01:13,140 --> 00:01:14,410
false immediately.

16
00:01:14,580 --> 00:01:21,200
We don't want to wait for a submission event so to do this we can use the input event the type of the

17
00:01:21,190 --> 00:01:23,060
event is called input.

18
00:01:23,640 --> 00:01:24,880
I'll show it to you now.

19
00:01:24,950 --> 00:01:32,490
We'll do an event listener input and then we'll do an arrow function this time let's console that log

20
00:01:33,330 --> 00:01:34,210
E.

21
00:01:34,410 --> 00:01:43,390
Well let's start with credit card changed and then we'll print out the event I'll refresh and you'll

22
00:01:43,390 --> 00:01:46,360
see as soon as I change this input here.

23
00:01:46,870 --> 00:01:53,590
Anything which is basically whenever I type of character in here we get a new console dot log.

24
00:01:53,590 --> 00:01:55,540
So the input has changed.

25
00:01:55,570 --> 00:02:01,140
We also have input that target which tells me what the input actually is or what.

26
00:02:01,150 --> 00:02:02,230
What triggered this event.

27
00:02:02,230 --> 00:02:03,870
What the object is.

28
00:02:04,360 --> 00:02:11,170
And if I wanted to create this data structure I could have const form data set it equal to an object

29
00:02:11,770 --> 00:02:23,620
and then update form data of let's go with a credit card maybe all lowercase c c equals and then to

30
00:02:23,620 --> 00:02:32,770
get the value it's event dot target dot value which is the target element the input itself scroll down

31
00:02:32,780 --> 00:02:33,970
we'll see the value.

32
00:02:33,970 --> 00:02:34,890
Where are you.

33
00:02:34,890 --> 00:02:40,370
V keep going got carpal tunnel already from that scrolling.

34
00:02:40,370 --> 00:02:40,820
Here we go.

35
00:02:40,820 --> 00:02:47,840
That's the value or I could have just hardcoded it has credit card input dot value but I'm going to

36
00:02:47,840 --> 00:02:52,490
go with event at target date value because you'll see in just a moment that we could actually refactor

37
00:02:52,490 --> 00:02:56,830
this into a single callback so I'll type something in here.

38
00:02:56,930 --> 00:03:01,190
Let's look at our form data and it's up to date.

39
00:03:01,190 --> 00:03:08,870
Now we could do the same thing duplicate this for the very select so very select dot add event listener

40
00:03:09,350 --> 00:03:14,450
for the input event which will trigger it whenever we change the value of that select.

41
00:03:14,570 --> 00:03:21,770
So instead of credit card changed we'll say veggie changed and let's add to form data under the key

42
00:03:21,980 --> 00:03:29,750
veggie so I'll change this value and we get our constant log.

43
00:03:29,780 --> 00:03:34,170
If I look at my form data object it has veggie of carrots.

44
00:03:34,280 --> 00:03:38,090
But as soon as I type something in here we look at form data.

45
00:03:38,090 --> 00:03:44,990
Now it has the credit card value from that input and it has the selected veggie so it's staying up to

46
00:03:44,990 --> 00:03:52,790
sync staying up to sync saying staying up to date or in sync with what we have and we can do one more

47
00:03:52,790 --> 00:03:57,610
for the checkbox which is a little bit trickier and not really.

48
00:03:57,620 --> 00:04:04,100
But we can't use the value we'll use the checked attribute or the checked property terms checkbox that

49
00:04:04,100 --> 00:04:16,910
had event listener input event and we'll do constant log checkbox and then we'll print the event and

50
00:04:16,910 --> 00:04:19,880
for form data if we want to update the form data.

51
00:04:19,880 --> 00:04:27,880
Let's go with agree to terms maybe and set that equal to event that target.

52
00:04:27,980 --> 00:04:34,890
We can't do value because it's a checkbox we do checked which we saw very recently.

53
00:04:34,940 --> 00:04:36,290
So let's try it.

54
00:04:36,290 --> 00:04:37,260
I check it.

55
00:04:37,460 --> 00:04:39,240
Let's look at form data.

56
00:04:39,650 --> 00:04:41,350
Agree to terms is true.

57
00:04:41,510 --> 00:04:42,970
Change this.

58
00:04:42,980 --> 00:04:51,950
Look at form data VEGGIE is carrot I type something in here we look at form data again and there we

59
00:04:51,950 --> 00:04:53,890
go it's staying up to date.

60
00:04:54,020 --> 00:04:58,640
So now we have this object that is staying in sync with whatever is going on in the form.

61
00:04:58,730 --> 00:05:01,360
So we don't have to wait for a user to click submit.

62
00:05:01,640 --> 00:05:07,550
We could wait for them to submit to send the data off or to do something with the data but we have a

63
00:05:07,550 --> 00:05:08,960
live representation.

64
00:05:09,030 --> 00:05:14,600
What's not live but a in sync representation of what's in the form and this is how we could achieve

65
00:05:14,600 --> 00:05:18,820
something like this credit card form from code pin as I type.

66
00:05:19,190 --> 00:05:24,790
The numbers are updating up top although they're also being obfuscated so they're not fully showing.

67
00:05:24,950 --> 00:05:28,360
But whatever I type is being affected and displayed live.

68
00:05:28,370 --> 00:05:33,800
So it's not waiting for me to submit and I'll add in a cardholder name that's updating up there I can

69
00:05:33,800 --> 00:05:38,870
put it in the security code and that's showing on the back.

70
00:05:39,020 --> 00:05:44,420
It's a pretty cool form but what I'm trying to illustrate here is that these events are all being triggered

71
00:05:44,480 --> 00:05:50,900
before a user submits the javascript knows what's going on in these inputs as I type which is what we

72
00:05:50,900 --> 00:05:51,410
have here.

73
00:05:51,440 --> 00:05:56,440
It's just there's no functionality and nothing pretty to look at but we're doing the same thing.

74
00:05:57,410 --> 00:05:59,510
So I did mention there's a better way of writing this.

75
00:05:59,570 --> 00:06:02,510
This is three separate event listeners which is fine.

76
00:06:02,510 --> 00:06:05,080
We need to attach an event listener to each one.

77
00:06:05,300 --> 00:06:11,630
What is not great is that we're hard coding these in it would be nice if we could have one where I could

78
00:06:11,630 --> 00:06:17,930
say something like you know in the event listener and in the callback where I could figure out which

79
00:06:17,930 --> 00:06:24,500
input we were working with Take That input get its value and then just store that in the form data dynamically

80
00:06:24,920 --> 00:06:26,320
which we can do.

81
00:06:26,390 --> 00:06:29,200
And here is the simplest way of doing that I'll comment these out.

82
00:06:29,210 --> 00:06:33,110
So we have them will add a name to each input.

83
00:06:33,170 --> 00:06:36,990
So the first one will have maybe credit card as a name.

84
00:06:37,160 --> 00:06:43,550
The second one will have a name of agree to terms.

85
00:06:43,550 --> 00:06:53,260
And the third one will have a name of selected veggie Okay so we have three names now in our javascript.

86
00:06:53,340 --> 00:06:56,230
We can loop over all three of these.

87
00:06:56,310 --> 00:07:04,680
So I'll make an array with credit card input terms checkbox and veggie select and I'll loop over that

88
00:07:04,830 --> 00:07:08,580
for let's input of

89
00:07:12,230 --> 00:07:16,760
and then I'll do an input that add event listener for the input event.

90
00:07:18,310 --> 00:07:21,780
We have our event here an error function.

91
00:07:21,850 --> 00:07:26,470
And on this event object we have event at Target which we've already seen.

92
00:07:26,560 --> 00:07:28,870
There's a property called name.

93
00:07:28,870 --> 00:07:30,580
So why don't I console that log that

94
00:07:33,610 --> 00:07:39,080
we'll try running it when this changes selected veggie was the name here.

95
00:07:39,080 --> 00:07:46,720
Agreed a term chosen name here credit card is a name so we can use that name to add to our form data

96
00:07:46,750 --> 00:07:47,740
object.

97
00:07:47,740 --> 00:07:57,580
So it would be something like this form data of event out target date name equals event dot target dot

98
00:07:57,580 --> 00:08:05,200
value we're taking whatever that value is and adding it in under the name that is on the input.

99
00:08:05,320 --> 00:08:10,450
There's still a minor problem because our checkbox doesn't have the value we want it to have.

100
00:08:10,450 --> 00:08:18,100
But if I do asparagus change my credit card number to Hello Well we'll look at form data over here and

101
00:08:18,100 --> 00:08:20,230
look at that selected veggie is asparagus.

102
00:08:20,230 --> 00:08:26,170
Credit card is Ello Ello well and I didn't have to actually reference any of those manually so I could

103
00:08:26,170 --> 00:08:32,950
have 10 different inputs and automatically as long as I give them a name their input value will be added

104
00:08:32,950 --> 00:08:35,860
to my object under their name.

105
00:08:35,860 --> 00:08:38,970
Now as far as the checkbox this one's kind of annoying.

106
00:08:39,070 --> 00:08:45,700
Unfortunately there is no value on a checkbox it just set to on whether it's on or off.

107
00:08:45,700 --> 00:08:52,450
We still get on which is pretty obnoxious but we can write a little bit of an edge case into this function

108
00:08:52,600 --> 00:08:57,640
where we can check if the type of the input is a checkbox.

109
00:08:57,640 --> 00:09:04,020
So if we cancel that log e refresh my page I'll check this.

110
00:09:04,270 --> 00:09:13,420
If we look at event target scroll way down every input here has type of checkbox not every input but

111
00:09:13,420 --> 00:09:14,830
every input has a type.

112
00:09:14,830 --> 00:09:21,760
In this case it's a checkbox here if I do the text input which is for credit card and we take a look.

113
00:09:21,760 --> 00:09:23,690
Where are you target.

114
00:09:23,860 --> 00:09:24,790
Scroll down.

115
00:09:24,910 --> 00:09:28,810
We can find type it set to text.

116
00:09:28,810 --> 00:09:35,230
So we could write a little bit of a conditional to check what type is equal to and what I would probably

117
00:09:35,230 --> 00:09:37,380
do is d structure target.

118
00:09:37,480 --> 00:09:39,640
That's the only thing we care about from the event.

119
00:09:39,730 --> 00:09:42,730
So use a parameter rise to D structuring.

120
00:09:42,730 --> 00:09:48,220
I don't even know if that's the right term for that but D structure in the parameter definition and

121
00:09:48,220 --> 00:09:50,230
then I'll D structure even more.

122
00:09:50,230 --> 00:09:59,530
I'll grab the name I'll grab the type the value and the checked property out of Target which is event

123
00:09:59,710 --> 00:10:07,370
target and then I can update this to be form data of name equals event out target value.

124
00:10:07,480 --> 00:10:18,040
But I want to check first if type is equal to checkbox if that's the case then we'll store the value

125
00:10:18,040 --> 00:10:18,880
of checked.

126
00:10:18,880 --> 00:10:22,010
Otherwise we store value.

127
00:10:22,120 --> 00:10:27,580
So this is kind of a maybe hacky one liner but we're taking the name whatever the name is credit card

128
00:10:27,580 --> 00:10:34,150
input or credit card I think it's what we want with and then we have a type which should be set to text

129
00:10:34,180 --> 00:10:35,230
for that input.

130
00:10:35,230 --> 00:10:40,030
We have a value which is whatever is in the input and checked won't exist for that input because it's

131
00:10:40,030 --> 00:10:41,260
not a checkbox.

132
00:10:41,260 --> 00:10:46,930
So then we're taking form data we're updating the property credit card which is a name and we're checking

133
00:10:46,930 --> 00:10:48,510
if type is equal to a checkbox.

134
00:10:48,520 --> 00:10:49,280
It's not.

135
00:10:49,390 --> 00:10:56,410
So we'll use the value but then if we change the checkbox checked we'll have a value true or false and

136
00:10:56,410 --> 00:10:58,190
type will be checkbox.

137
00:10:58,210 --> 00:11:02,850
So this is true and we'll store the Boolean true or false from checked.

138
00:11:02,890 --> 00:11:04,960
So let's console out log form data here

139
00:11:07,700 --> 00:11:10,540
extra s refresh.

140
00:11:10,770 --> 00:11:11,820
I'll check it.

141
00:11:11,970 --> 00:11:13,320
Agree to terms true.

142
00:11:13,320 --> 00:11:14,070
Check again.

143
00:11:14,070 --> 00:11:15,690
False.

144
00:11:15,770 --> 00:11:19,310
Now we have selected veggie is carrot type something in here.

145
00:11:19,310 --> 00:11:23,120
It's updating automatically which is pretty cool.

146
00:11:23,120 --> 00:11:29,540
You have one function one callback that we are using and it's working on three different inputs and

147
00:11:29,540 --> 00:11:33,080
I could have more if I had four or five 10 different inputs here.

148
00:11:33,230 --> 00:11:39,370
I could use this same code if all I wanted to do was create an object containing the form data.

149
00:11:39,500 --> 00:11:44,870
The last thing is that I mentioned we have input and change to different events.

150
00:11:44,870 --> 00:11:52,160
If I just switch this over to be a change event it will still work pretty much the same way we've got

151
00:11:52,220 --> 00:11:54,650
selected veggie asparagus.

152
00:11:54,650 --> 00:12:03,230
This is updating but here this won't update until I lose focus so I just clicked away or if I hit enter

153
00:12:03,500 --> 00:12:08,990
so just typing in the input doesn't trigger that event but focusing or losing focus which is called

154
00:12:08,990 --> 00:12:13,450
blurring the input or hitting enter will change it.

155
00:12:13,820 --> 00:12:15,310
Otherwise these two are the same.

156
00:12:15,380 --> 00:12:20,240
You can't really incrementally change the checkbox or the select it's just yes or no.

157
00:12:20,420 --> 00:12:26,420
But with a text input there is a difference between the change event and the input event that we had

158
00:12:26,450 --> 00:12:27,260
earlier.

159
00:12:27,680 --> 00:12:34,400
So input will just always update whenever this updates or whenever the input itself has any new characters

160
00:12:34,400 --> 00:12:37,280
in there it triggers the event.

161
00:12:37,340 --> 00:12:41,480
All right so two different events and a new pattern.

162
00:12:41,510 --> 00:12:46,490
This is pretty common especially if you get to something like react and some of these other frameworks

163
00:12:46,490 --> 00:12:53,330
out there and other libraries you'll see code kind of like this where we use the name of an input as

164
00:12:53,330 --> 00:13:00,150
a key to store the value from that input under to create a nice object that contains all of our form

165
00:13:00,150 --> 00:13:00,950
data at once.
