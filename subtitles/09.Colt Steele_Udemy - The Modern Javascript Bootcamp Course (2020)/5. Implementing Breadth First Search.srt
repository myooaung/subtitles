1
00:00:00,630 --> 00:00:05,110
In the last video I gave you a general description of the breadth first search algorithm.

2
00:00:05,110 --> 00:00:09,400
I now want to add on just a little bit more to that and describe how we're going to adapt this algorithm

3
00:00:09,460 --> 00:00:11,110
for our purposes.

4
00:00:11,110 --> 00:00:16,770
So I had said in the last video that we start off at say movies we take a look at the children we take

5
00:00:16,770 --> 00:00:19,600
that big list and we throw it into this array.

6
00:00:19,740 --> 00:00:23,670
We then start to iterate through the array and take a look at each individual item and then for each

7
00:00:23,670 --> 00:00:28,530
item we find all of its children and critically I said we would take all those children.

8
00:00:28,530 --> 00:00:34,020
So in this case the children of s RC because that's the first element and we would add them all into

9
00:00:34,020 --> 00:00:35,100
the array.

10
00:00:35,100 --> 00:00:37,880
That is how a normal breadth first search works.

11
00:00:37,980 --> 00:00:40,290
But we're gonna make a little change to that.

12
00:00:40,380 --> 00:00:47,110
We're only going to add these children into this array to iterate over if they are folders in this case.

13
00:00:47,110 --> 00:00:48,580
These are not folders that we're working with.

14
00:00:48,580 --> 00:00:50,000
These are files.

15
00:00:50,140 --> 00:00:54,940
So if we're working with the file if we find that all the children of this thing are files then we're

16
00:00:54,940 --> 00:00:56,960
going to take a look at each file.

17
00:00:57,250 --> 00:01:02,380
We're going to see if it has the test dot J.S. extension and if it does we'll add it to our other array

18
00:01:02,380 --> 00:01:05,290
of files that keeps track of all of our different test files.

19
00:01:05,500 --> 00:01:11,050
But if it's not a test dot J.S. file or a folder then we're basically just gonna throw it out and ignore

20
00:01:11,050 --> 00:01:11,980
it.

21
00:01:11,980 --> 00:01:17,230
So for our implementation of breadth first search in reality what would go on is we start off with movies.

22
00:01:17,290 --> 00:01:24,050
We take a look at s RC We don't take care anything about s our C so we would then move on to test so

23
00:01:24,140 --> 00:01:26,730
then side of test we would take a look at app test J.S..

24
00:01:26,820 --> 00:01:31,190
Okay that's a file we care about so we'd save a reference to it but we would not add it to the array

25
00:01:31,190 --> 00:01:35,600
down here because we don't need to go into it and start to iterate because a file is never gonna have

26
00:01:35,600 --> 00:01:40,090
any children so then the other thing inside of test would be widgets.

27
00:01:40,120 --> 00:01:45,190
So we would add widgets to that array so that's the only change that you and I are going to make to

28
00:01:45,190 --> 00:01:49,200
the breadth first search algorithm to adapt it for our purposes.

29
00:01:49,250 --> 00:01:49,450
Okay.

30
00:01:49,480 --> 00:01:52,920
So with all that mind let's flip back over and start to work on this thing.

31
00:01:53,870 --> 00:02:00,920
So back over here at the very top of the file I'm going to require in the F S module from the node standard

32
00:02:00,920 --> 00:02:07,890
library then inside of collect files we're going to Amelia mark this thing as async because we're definitely

33
00:02:07,890 --> 00:02:13,510
gonna end up with some asynchronous code inside of their and I'm also going to add in a argument to

34
00:02:13,510 --> 00:02:20,420
this thing to collect files of target path so target path right here is going to be the folder or the

35
00:02:20,600 --> 00:02:26,820
entire absolute path to some folder that we want to investigate on our local machine so in our case

36
00:02:26,940 --> 00:02:31,550
if we wanted to take a look at the movie's directory and find all the different files and folders inside

37
00:02:31,560 --> 00:02:37,130
there the argument to collect files would be the absolute path to this movie's directory.

38
00:02:37,240 --> 00:02:45,900
So just as a quick example target path if you were on a Mac OS or Unix based system you would end up

39
00:02:45,900 --> 00:02:53,610
with a target path of something like users your user name documents maybe like projects movies or something

40
00:02:53,610 --> 00:02:54,850
like that.

41
00:02:54,930 --> 00:03:00,370
So that's what we're going to eventually pass in to collect files all right.

42
00:03:00,370 --> 00:03:05,890
So now inside of here we're going to use the FSA module to take a look at that target path and find

43
00:03:05,950 --> 00:03:08,190
all the different files and folders inside there.

44
00:03:08,230 --> 00:03:12,340
So that's like step one of our algorithm where back over here we said we're going to look at the root

45
00:03:12,340 --> 00:03:17,650
directory and find all the files and folders immediately inside of it just to get a quick reminder on

46
00:03:17,650 --> 00:03:18,340
how to do that.

47
00:03:18,340 --> 00:03:24,570
Let's take a look at the no J.S. standard documentation so once again at no j ust dot org slash API

48
00:03:25,320 --> 00:03:30,390
and I'm inside of the file system section inside of here.

49
00:03:30,410 --> 00:03:33,740
We're going to do a search for read Dir.

50
00:03:33,840 --> 00:03:37,180
Remember the reader function has a couple of different flavors.

51
00:03:37,310 --> 00:03:41,930
There's the callback version which I'm looking at right here see as the third argument of a callback.

52
00:03:42,170 --> 00:03:49,190
There's the synchronous version and if we hit enter again we should eventually go down to the F S promises

53
00:03:49,190 --> 00:03:49,980
section.

54
00:03:50,000 --> 00:03:52,930
So this is the promise based version of reader.

55
00:03:53,000 --> 00:03:58,640
That's what we want to use inside of our code because using promises and async await is a lot easier

56
00:03:58,640 --> 00:04:00,600
than using callbacks in general.

57
00:04:00,750 --> 00:04:07,020
So I gonna click on that and take a look at the documentation so when we call reader we pass in the

58
00:04:07,020 --> 00:04:12,260
name of the folder that we want to take a look at and then it's going to return a promise that's going

59
00:04:12,260 --> 00:04:17,130
to be eventually resolved with the names of all the different files and folders that are inside there.

60
00:04:17,150 --> 00:04:22,910
So in other words when we call reader we'd say the path the movies we would get back in array that has

61
00:04:22,910 --> 00:04:26,680
the words source and test inside of it as a quick reminder.

62
00:04:26,690 --> 00:04:30,230
This is like an imaginary directory structure right here so it's not quite what you and I are going

63
00:04:30,230 --> 00:04:35,610
to see but close enough it's let's go back over inside of collect files.

64
00:04:35,720 --> 00:04:49,090
I'll say const files is a weight F S that promises not read dir and we'll pass in the target at all

65
00:04:49,090 --> 00:04:49,410
right.

66
00:04:49,450 --> 00:04:54,400
Now immediately after that let's do a return of files right away just so we can start to test this stuff

67
00:04:54,460 --> 00:04:58,330
that we're putting together inside of here in order to test this code.

68
00:04:58,340 --> 00:05:01,590
We have to make sure that we go back over to our index not just file.

69
00:05:01,820 --> 00:05:07,000
So back over inside of index dot J.S. Let's require in the runner file that we just authored.

70
00:05:07,000 --> 00:05:16,350
So at the top I'll replace the console log with const runner is require runner or then create a new

71
00:05:16,350 --> 00:05:17,190
instance of the runner

72
00:05:20,060 --> 00:05:25,240
and then I'm going to call the collect files function and remember collect files as async.

73
00:05:25,240 --> 00:05:28,300
And chances are right now you are running a version of no JFK.

74
00:05:28,300 --> 00:05:34,540
That does not support top level await expressions in other words we can't say a weight runner dot collect

75
00:05:34,540 --> 00:05:39,320
files right here with the version of note that you are probably using right now.

76
00:05:39,720 --> 00:05:45,510
Any a weight statement has to be wrapped inside of a function so we're going to instead define a little

77
00:05:45,510 --> 00:05:54,520
helper function just for the purposes of making use of async await so I'll say about run I will market

78
00:05:54,640 --> 00:05:56,230
as async.

79
00:05:56,230 --> 00:06:03,820
And then finally inside there we can then say maybe like results is a weight runner dot collect files

80
00:06:06,030 --> 00:06:12,700
will then console log the results and call run at the bottom and then one last thing we need to make

81
00:06:12,700 --> 00:06:15,690
sure that we pass in the correct path to collect files.

82
00:06:15,760 --> 00:06:20,650
So it's going to be the path for whatever folder we want to read all these files out for.

83
00:06:20,790 --> 00:06:22,410
Well I want you to think about this for a second.

84
00:06:22,440 --> 00:06:26,880
What directory do we really care about getting all these files from it's probably going to be whatever

85
00:06:26,880 --> 00:06:32,270
folder we run our little t test T M E program front.

86
00:06:32,390 --> 00:06:37,200
So in other words if I'm inside of the movie's testing directory and I run TMC inside of here I would

87
00:06:37,200 --> 00:06:41,640
want to find all the files and folders inside of that directory.

88
00:06:41,640 --> 00:06:47,820
So we need to somehow get a reference to what directory our program is being executed from to do so

89
00:06:47,910 --> 00:06:55,840
we can call process that see WD which stands for current working directory.

90
00:06:55,840 --> 00:07:01,360
So whenever we now run our team program that right there is going to return exactly what directory our

91
00:07:01,360 --> 00:07:03,820
program was invoked from.

92
00:07:04,030 --> 00:07:04,270
All right.

93
00:07:04,310 --> 00:07:10,860
Let's save all this and we'll do a quick test I'll go back to our team directory I'll do the test from

94
00:07:10,860 --> 00:07:11,490
inside of here.

95
00:07:11,490 --> 00:07:14,010
You can do it from any folder on your machine it should be fine.

96
00:07:14,130 --> 00:07:18,960
And I'll run TMC inside of here and I should see all the different files and folders located inside

97
00:07:19,020 --> 00:07:20,160
of me.

98
00:07:20,340 --> 00:07:25,620
I can go to another directory on my machine as well so I'll go back to a workspace that I use on here

99
00:07:25,890 --> 00:07:31,120
called me and I'll steal the files and folders that I have on here as well okay.

100
00:07:31,120 --> 00:07:35,930
So it looks like step one is working out just fine so let's take a pause right here.

101
00:07:35,950 --> 00:07:40,000
When come back the next video we're going to continue to implement our breadth first search algorithm.
