1
00:00:00,830 --> 00:00:03,140
Now we've got a very basic empty test working.

2
00:00:03,140 --> 00:00:07,940
We're going to start to focus on actually getting our auto complete widget right here to display and

3
00:00:07,940 --> 00:00:09,630
actually running some tests around it.

4
00:00:09,650 --> 00:00:12,290
So let's discuss exactly how we're going to approach this.

5
00:00:12,320 --> 00:00:17,000
The first thing we need to do is make sure that all of our autocomplete related code is available inside

6
00:00:17,000 --> 00:00:19,190
of this HDMI document.

7
00:00:19,190 --> 00:00:21,740
So in other words we need to add a script tag to our test.

8
00:00:21,760 --> 00:00:27,300
Each G.M. file so we can get access to the create auto complete function.

9
00:00:27,300 --> 00:00:30,310
Again this is what actually creates an auto complete.

10
00:00:30,330 --> 00:00:37,360
So in order to get access to this file we will open up our test dot HDL file then write above our script

11
00:00:37,360 --> 00:00:45,920
tag for auto complete test J.S. Latin another script tag with a source of up one directory auto complete

12
00:00:46,130 --> 00:00:46,760
DHHS

13
00:00:49,950 --> 00:00:52,650
now just so you know in order for the auto complete to work correctly.

14
00:00:52,660 --> 00:00:56,500
It also technically needs the utilize dot J as file as well.

15
00:00:56,500 --> 00:01:00,230
So I'm going to add in another script tag right above.

16
00:01:00,410 --> 00:01:05,430
I'm gonna go up one directory and get utilize dot J.S..

17
00:01:05,590 --> 00:01:09,230
Now we should be able to go back over to our browser after saving that file.

18
00:01:09,360 --> 00:01:11,440
We should be able to refresh this.

19
00:01:11,520 --> 00:01:13,710
Everything is going to look the same for right now.

20
00:01:13,710 --> 00:01:20,880
But if we open up our console we shouldn't now be able to type out simply create auto complete and see

21
00:01:20,880 --> 00:01:27,450
that function defined inside of your SO THAT MEANS THAT OUR create auto complete function is now available

22
00:01:27,450 --> 00:01:30,500
inside of our test each HTML documents.

23
00:01:30,560 --> 00:01:33,830
Now here's where things really start to get a little bit weird.

24
00:01:34,070 --> 00:01:40,010
In order to test this thing we need to actually call create auto complete and show a auto complete widget

25
00:01:40,040 --> 00:01:40,850
on the screen.

26
00:01:40,850 --> 00:01:43,610
That's the entire point of testing this stuff in a browser.

27
00:01:43,610 --> 00:01:49,250
We want to actually take that widget display it and then kind of manipulate it manipulate it programmatically

28
00:01:51,120 --> 00:01:57,190
so to do so we essentially are going to treat that autocomplete as though we were using it for real.

29
00:01:57,190 --> 00:02:00,340
So we need to really understand how the autocomplete itself works.

30
00:02:00,340 --> 00:02:05,040
Let's take a look at autocomplete dot J.S. and just get a quicker view on how we create an auto complete

31
00:02:06,430 --> 00:02:11,350
so I don't know if you watched the video earlier on in this course about the movie's application but

32
00:02:11,350 --> 00:02:15,100
I am going to very quickly go over some of the options we have to provide right here in order to get

33
00:02:15,100 --> 00:02:16,880
this thing to work correctly.

34
00:02:17,060 --> 00:02:23,390
The first property right here route is going to be some H html element inside of our documents that

35
00:02:23,390 --> 00:02:25,950
we want to show this auto complete in.

36
00:02:26,080 --> 00:02:30,700
The second is going to be a function that is responsible for rendering each individual auto complete

37
00:02:30,730 --> 00:02:31,180
item.

38
00:02:31,180 --> 00:02:38,430
So like each movie that gets displayed like that that that and that so the render item function is going

39
00:02:38,430 --> 00:02:43,890
to get called many times on option select is a function that will be called anytime we click on one

40
00:02:43,890 --> 00:02:47,530
of those results input value.

41
00:02:47,660 --> 00:02:51,920
Make sure that whenever we click on a result it kind of back fills or updates the input.

42
00:02:51,920 --> 00:02:54,740
So watch what happens when I click on the Avengers right here.

43
00:02:54,890 --> 00:03:01,640
It's gonna take that title and throw it into the input and then finally fetch data is what is responsible

44
00:03:01,640 --> 00:03:06,800
for taking a user's text input and then running some search of the API and actually getting some data

45
00:03:06,800 --> 00:03:12,430
back so in order to show in autocomplete we essentially have to provide all these different options

46
00:03:12,700 --> 00:03:18,100
and most importantly one thing to keep in mind here we have to have an actual root element inside of

47
00:03:18,100 --> 00:03:24,940
our test each doc to show the autocomplete in so to get this working we're going to go back over to

48
00:03:24,940 --> 00:03:32,250
the test each CML file right beneath the div that says idea of Moka I'm going to make a new div with

49
00:03:32,250 --> 00:03:35,470
an idea of target.

50
00:03:35,550 --> 00:03:38,810
So this is going to be where we attempt to render our autocomplete widget to you.

51
00:03:38,820 --> 00:03:44,050
We're gonna try to show the thing right inside of their.

52
00:03:44,200 --> 00:03:50,430
Now we can go to our autocomplete test dot J.S. so here's where we're going to write all of our tests

53
00:03:50,740 --> 00:03:54,540
and inside of here we're going to write out some code that's going to actually show in autocomplete

54
00:03:54,750 --> 00:03:59,970
inside that div so let's try replacing this current dummy test we have right here.

55
00:03:59,980 --> 00:04:05,010
I'm going to update the name and say it shows an auto complete.

56
00:04:05,020 --> 00:04:09,550
So in this first test we're just going to try to create an auto complete and show it in that div with

57
00:04:09,550 --> 00:04:11,330
an idea of target.

58
00:04:11,350 --> 00:04:17,480
So we will call the create auto complete function and we're going to eventually pass in all these arguments.

59
00:04:17,680 --> 00:04:21,850
We don't have to pass on all them right now or at least we shouldn't just get this thing to display.

60
00:04:21,850 --> 00:04:27,250
We should only have to call or pass in a root element to show the auto complete into it's going to call

61
00:04:27,250 --> 00:04:37,090
it creates auto complete I can pass in routes and to specify the route elements we'll provide a reference

62
00:04:37,090 --> 00:04:39,370
to that div that we just added right there.

63
00:04:39,430 --> 00:04:47,050
So I'll say document query selector and target OK.

64
00:04:47,090 --> 00:04:49,300
Let's now save this and just see what we get.

65
00:04:49,340 --> 00:04:52,670
So I'll flip back over refresh and there's our widget.

66
00:04:52,700 --> 00:04:55,390
Now of course it looks nothing like what we have back over here.

67
00:04:55,390 --> 00:05:00,470
And the reason for that is that our test small file doesn't have any CSX loaded up into it right now

68
00:05:00,470 --> 00:05:02,030
to style our application.

69
00:05:02,090 --> 00:05:07,040
So everything that we see is going to be like the very plain looking elements from a testing perspective

70
00:05:07,070 --> 00:05:11,360
that should be totally fine because we're not really gonna write any tests around what stuff looks like

71
00:05:11,720 --> 00:05:16,480
we're running tests around how stuff works.

72
00:05:16,490 --> 00:05:16,730
All right.

73
00:05:16,730 --> 00:05:21,370
So now that we can at least show an input if we select this thing and start to type in here we're gonna

74
00:05:21,390 --> 00:05:26,150
very quickly see an error message because we are not providing all the required options to our auto

75
00:05:26,150 --> 00:05:27,350
complete widget.

76
00:05:27,350 --> 00:05:31,460
In particular when we type something in the auto complete widget is going to attempt to reach out and

77
00:05:31,460 --> 00:05:33,280
fetch some data from the API.

78
00:05:33,320 --> 00:05:35,810
That was the purpose the batch data function.

79
00:05:35,810 --> 00:05:40,250
So we have to actually provide an implementation of fetch data for our autocomplete to work correctly

80
00:05:41,530 --> 00:05:44,430
and this is where things start to get even more interesting.

81
00:05:44,470 --> 00:05:50,480
Okay there's a real fundamental question that needs to be asked here when we start testing widgets like

82
00:05:50,480 --> 00:05:57,050
this right here inside of our real application like this over here in our real application whenever

83
00:05:57,050 --> 00:06:03,230
we type some text into that input we're going to make an API request to that movie's API.

84
00:06:03,230 --> 00:06:07,820
So that's going to reach out to some other server on the Internet attempt to get a list of movies and

85
00:06:07,820 --> 00:06:09,560
then show them inside of here.

86
00:06:09,590 --> 00:06:15,570
So the very fundamental question that we need to answer is whether or not we want to test that.

87
00:06:15,680 --> 00:06:20,750
In other words do we want to this API request to be a part of our testing logic.

88
00:06:20,900 --> 00:06:26,140
It doesn't have to be we can provide a dummy implementation of fetching some data.

89
00:06:26,150 --> 00:06:31,430
In other words rather than providing an implementation of fetch data right here that will actually make

90
00:06:31,430 --> 00:06:38,210
a network request we could instead just have it return an array of objects that look like movies and

91
00:06:38,210 --> 00:06:41,250
then we can just always show that data out on the screen.

92
00:06:41,330 --> 00:06:44,870
So it's really kind of a question for you you need to decide inside of your application.

93
00:06:44,870 --> 00:06:51,020
Do I want to test the process of making the API request or do I just want to show some data like return

94
00:06:51,020 --> 00:06:57,020
some dummy data to show inside of this fake autocomplete you might think to yourself Well of course

95
00:06:57,020 --> 00:07:00,870
I want to test making the API request but it's not always that simple.

96
00:07:00,920 --> 00:07:07,010
In some cases you might be trying to access an API that charges you to access some data or you might

97
00:07:07,010 --> 00:07:08,870
be using an API that is really slow.

98
00:07:08,870 --> 00:07:13,930
Which means that it would take a lot of extra time for your test to actually run so just to keep things

99
00:07:13,930 --> 00:07:15,340
all a bit easy for us.

100
00:07:15,340 --> 00:07:21,640
We're going to return some fake data whenever someone types inside of our fake autocomplete so to do

101
00:07:21,640 --> 00:07:23,740
so we're gonna pass in an additional argument.

102
00:07:23,760 --> 00:07:26,350
Here are additional property of fetch data.

103
00:07:27,870 --> 00:07:31,740
So again fetch data is usually required by decree autocomplete function.

104
00:07:31,740 --> 00:07:36,180
That is what gets called with some search term and that is where we would normally go out to our API

105
00:07:36,210 --> 00:07:38,400
and make a request to get the list of movies.

106
00:07:38,460 --> 00:07:43,070
So instead of that we're just going to return some fake data to show.

107
00:07:43,070 --> 00:07:48,480
So I'm going to manually return an array that will have some objects that represent movies inside of

108
00:07:48,480 --> 00:07:55,420
here just so you know the actual data that we need to show the movie is going to be an object and it

109
00:07:55,420 --> 00:07:58,700
has to have a capital T title property.

110
00:08:00,590 --> 00:08:03,680
So this is how we would fake showing or returning a movie.

111
00:08:03,680 --> 00:08:14,260
So I will make a fake movie of Avengers another one of about not Avengers and then another one of some

112
00:08:14,410 --> 00:08:18,330
other movie.

113
00:08:18,360 --> 00:08:23,220
So now when we type in that text input our autocomplete widget should be calling this function and it's

114
00:08:23,220 --> 00:08:24,750
going to get back immediately.

115
00:08:24,750 --> 00:08:30,100
This fake data right here once it gets that fake data is then going to attempt to render it out on the

116
00:08:30,100 --> 00:08:32,340
screen to actually get it to render.

117
00:08:32,350 --> 00:08:34,900
We have to have to provide that render option function.

118
00:08:34,900 --> 00:08:37,240
This is the last thing we need to do before we can actually test this.

119
00:08:37,270 --> 00:08:41,180
So just bear with me for a moment longer right after fetch data.

120
00:08:41,180 --> 00:08:46,040
I'm going to pass in one more function called render option.

121
00:08:46,120 --> 00:08:48,970
This will be called with every movie that we fetch.

122
00:08:48,970 --> 00:08:53,260
So it's going to be first that object then that one and then that one.

123
00:08:53,410 --> 00:08:57,640
So instead of here we're going to return some HDL that describes what we want each individual option

124
00:08:57,640 --> 00:08:58,900
to look like.

125
00:08:58,930 --> 00:09:03,130
Now again back over here in our official implementation we tried to show some image in the title and

126
00:09:03,130 --> 00:09:04,330
the year.

127
00:09:04,330 --> 00:09:08,980
In this case because we're really just testing some basic interaction here we can just attempt to show

128
00:09:08,980 --> 00:09:14,270
the title because that's the only fake data we put inside of your anyways so I will say return movie

129
00:09:14,330 --> 00:09:14,750
dots.

130
00:09:14,770 --> 00:09:21,370
Title Now you might notice that I've got a capital T on title all throughout here that is just because

131
00:09:21,370 --> 00:09:27,220
the official API that we used for these movies has a capital T title property as opposed to the usual

132
00:09:27,250 --> 00:09:30,110
which would be or should be lowercase t.

133
00:09:30,130 --> 00:09:34,510
So the only reason I'm using the capital T is to be a little bit closer to the actual code that we wrote

134
00:09:34,510 --> 00:09:38,020
for our movies application okay.

135
00:09:38,030 --> 00:09:44,490
So which Nebula saved this and do a quick test it's gonna flip back over I can refresh and now if I

136
00:09:44,490 --> 00:09:49,660
type in here no matter what I type it's always going to call that fake batch data function.

137
00:09:49,710 --> 00:09:54,630
It's always gonna get back the same set of movies and so I will always see Avengers not Avengers and

138
00:09:54,630 --> 00:09:55,900
some of you right here.

139
00:09:56,940 --> 00:10:00,010
All right so that gets us one step closer.

140
00:10:00,010 --> 00:10:05,440
Now I know a little bit ago I said hey how this setup is kind of a pain and maybe now you're kind of

141
00:10:05,440 --> 00:10:08,380
starting to agree with me doing this testing setup.

142
00:10:08,380 --> 00:10:11,770
Not the most fun thing in the world.

143
00:10:11,980 --> 00:10:14,900
We are going to eventually when we put our framework together.

144
00:10:15,050 --> 00:10:19,590
Remember that's something we're gonna do after all this when we put our own testing framework together.

145
00:10:19,600 --> 00:10:21,490
All this stuff is going to go a lot easier.

146
00:10:21,490 --> 00:10:21,960
Trust me.

147
00:10:22,060 --> 00:10:24,600
So just bear with me a little bit longer when we get to this part.

148
00:10:24,640 --> 00:10:26,640
Life is gonna be really good.

149
00:10:26,650 --> 00:10:26,890
Okay.

150
00:10:26,920 --> 00:10:29,810
Let's take a quick pause right here and continue in just a moment.
