1
00:00:00,560 --> 00:00:01,010
All right.

2
00:00:01,010 --> 00:00:03,310
And this video now that we've gone through a lot of different testing stuff.

3
00:00:03,320 --> 00:00:06,940
It is now time for us to write our own custom testing framework.

4
00:00:06,950 --> 00:00:08,570
Now this is going to be a lot of fun.

5
00:00:08,570 --> 00:00:12,770
We're going to take a lot of the knowledge that we've gained around no J.S. not around just this testing

6
00:00:12,770 --> 00:00:18,410
stuff but also around the earlier projects where we tried to find all the different files and folders

7
00:00:18,410 --> 00:00:24,320
inside of a directory and also the project where we learned how we could automatically rerun a project

8
00:00:24,320 --> 00:00:27,940
or rerun some amount of code every single time a file changed as well.

9
00:00:27,950 --> 00:00:32,420
So this really is a kind of culmination of a lot of no J.S. stuff.

10
00:00:32,420 --> 00:00:35,900
The first thing we're going to do is lay out some requirements of the testing framework we're going

11
00:00:35,900 --> 00:00:38,510
to build.

12
00:00:38,520 --> 00:00:42,450
So this is going to describe some the different aspects of our testing framework.

13
00:00:42,450 --> 00:00:46,540
The first thing I want to make sure is that we end up with a node based CLIA.

14
00:00:46,590 --> 00:00:51,300
So some like tool that we can execute from our command line that's going to run all of our tests inside

15
00:00:51,300 --> 00:00:52,680
of a project.

16
00:00:52,680 --> 00:00:56,790
So we're not going to be running anything inside of a browser like we're doing just a moment ago with

17
00:00:56,790 --> 00:01:03,420
Moka next note we have to be able to test browser based javascript applications.

18
00:01:03,460 --> 00:01:07,000
And now here's where things start to get interesting you'll notice I put all the exclamations right

19
00:01:07,000 --> 00:01:09,650
here because remember when you're talking about MOCA.

20
00:01:09,670 --> 00:01:15,040
I had said we have to use MOCA inside the browser if we want to taste test some browser based javascript

21
00:01:15,040 --> 00:01:23,440
code because node by default doesn't have any idea of a dom or of query selectors or of event listeners

22
00:01:23,530 --> 00:01:25,340
or stuff like that.

23
00:01:25,360 --> 00:01:28,670
So these two notes right here are at odds with each other.

24
00:01:28,720 --> 00:01:34,330
I'm saying that I want to build a testing framework that runs with no J.S. but simultaneously we must

25
00:01:34,330 --> 00:01:40,920
be able to test browser based javascript applications big enough to figure out some really clever way

26
00:01:40,920 --> 00:01:45,220
to implement both these same things inside the same testing framework.

27
00:01:45,390 --> 00:01:49,360
We're going to come back to this note in just a little bit and explain how we're going to tackle it.

28
00:01:49,380 --> 00:01:54,920
Let's continue going over requirements right now so our next requirement is that there must be very

29
00:01:54,980 --> 00:01:56,000
very little setup.

30
00:01:56,210 --> 00:02:01,120
So in other words unlike that Moka web based project we just worked on where we had to create that index

31
00:02:01,120 --> 00:02:06,080
dot or something the test on each demo file amended through a bunch of markup inside there for our command

32
00:02:06,080 --> 00:02:07,520
line tool that we're going to build.

33
00:02:07,580 --> 00:02:12,440
I want to be able to just essentially have one command that we can execute and have that run all the

34
00:02:12,440 --> 00:02:14,510
different tests inside of our project.

35
00:02:14,540 --> 00:02:19,400
So a little bit similar to the moka or the version of Moka that we used very briefly when we were testing

36
00:02:19,400 --> 00:02:22,210
that high dash application.

37
00:02:22,400 --> 00:02:27,350
Next up and this is going to be a critical one inside of the moka test that we just did inside the browser

38
00:02:27,380 --> 00:02:33,110
we were testing one little widget just that autocomplete thing and we had to do a whole bunch of setup

39
00:02:33,170 --> 00:02:39,250
to test that thing out and all that setup was really just to be able to test the autocomplete so it

40
00:02:39,250 --> 00:02:44,800
would be really nice to yield to test multiple different things inside of our movie's application without

41
00:02:44,800 --> 00:02:50,230
having to write a bunch of configuration code or anything like that again as a good example we should

42
00:02:50,230 --> 00:02:55,130
in theory really be able to test that this little notice right here goes away any time that we search

43
00:02:55,130 --> 00:02:57,070
as we search for something.

44
00:02:57,070 --> 00:03:03,100
So I want to be able to test the entire application very easily as opposed to just that little widget

45
00:03:03,130 --> 00:03:06,110
right there.

46
00:03:06,130 --> 00:03:10,540
Next up these CLIA that we build should definitely have a watch mode of sorts.

47
00:03:10,600 --> 00:03:15,490
So if we start up some testing suite and we then make any change to any file inside of our project I

48
00:03:15,490 --> 00:03:20,440
want to automatically rerun our test suite and re execute all the tests we have.

49
00:03:20,440 --> 00:03:26,320
So essentially this tool should be watching our file or our project directory consistently.

50
00:03:26,320 --> 00:03:31,790
And if there is ever a newly saved added or deleted file we should rerun our tests.

51
00:03:31,870 --> 00:03:35,800
So as you'd guess we're going to leverage some of our knowledge that we got from that earlier project

52
00:03:36,100 --> 00:03:41,860
using that choke in our library and integrate that into our testing framework and then finally we're

53
00:03:41,860 --> 00:03:47,800
going to also have to find all the files inside of our project that end with an extension of test dot

54
00:03:47,830 --> 00:03:51,350
J.S. once we find any files with that name.

55
00:03:51,390 --> 00:03:55,290
We're going to make sure that we execute them and we're going to make sure that we run any tests that

56
00:03:55,290 --> 00:03:57,900
are present inside of those different files.

57
00:03:57,990 --> 00:04:02,130
And so as you guessed this is also going to leverage some that earlier knowledge we got around finding

58
00:04:02,190 --> 00:04:07,410
all the different files and folders inside of some directory OK.

59
00:04:07,440 --> 00:04:07,910
So that's it.

60
00:04:07,920 --> 00:04:12,900
That's the high level requirements but of course at this point I haven't really stated anything around

61
00:04:12,930 --> 00:04:14,920
how we're going to do this implementation.

62
00:04:14,970 --> 00:04:15,560
That's okay.

63
00:04:15,570 --> 00:04:16,730
Let's take a pause right here.

64
00:04:16,740 --> 00:04:17,850
We'll come back next video.

65
00:04:17,850 --> 00:04:21,900
We're going to start to do a little bit of project setup and we'll discuss how we're going to tackle

66
00:04:22,050 --> 00:04:23,250
each of these items.
