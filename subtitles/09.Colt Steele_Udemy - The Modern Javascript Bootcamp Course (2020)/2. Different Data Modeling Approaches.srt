1
00:00:01,540 --> 00:00:01,800
All right.

2
00:00:01,810 --> 00:00:06,850
Let's discuss how we're going to design and create this data store thing so our data store is going

3
00:00:06,850 --> 00:00:12,520
to take the form of a couple of different individual classes each individual class is going to manage

4
00:00:12,550 --> 00:00:14,730
its own collection of objects.

5
00:00:14,740 --> 00:00:19,030
So for example we're going to have one class that manages all the different users of our application

6
00:00:19,450 --> 00:00:22,540
and another class that manages all the different products of our application.

7
00:00:23,350 --> 00:00:27,910
So lumping this all into the term of data store is only from a kind of conceptual standpoint at the

8
00:00:27,910 --> 00:00:28,550
end of the day.

9
00:00:28,660 --> 00:00:35,120
It really is going to be like two separate objects for managing both those different resources.

10
00:00:35,190 --> 00:00:39,180
We're going to call these different separate objects repositories.

11
00:00:39,180 --> 00:00:47,060
So for example the object that matches the list of users will be called the user's repository and the

12
00:00:47,060 --> 00:00:52,350
one that manages our list of projects will be called the products repository.

13
00:00:52,370 --> 00:00:56,660
So let's discuss how we're going to design both these different repositories the design them are going

14
00:00:56,660 --> 00:00:57,830
to be just about identical.

15
00:00:57,860 --> 00:01:02,360
So I guess what I mean to say is how are we going to design a repository in general.

16
00:01:02,510 --> 00:01:06,680
I sat down and thought up all the different methods that I would probably want to have a repository

17
00:01:06,680 --> 00:01:08,040
to own.

18
00:01:08,060 --> 00:01:11,640
So in this case we're gonna think about the design of the user's repository.

19
00:01:12,200 --> 00:01:16,640
So again this is going to be a class that has a bunch of different methods attached to it for working

20
00:01:16,640 --> 00:01:17,920
with all the different users.

21
00:01:17,920 --> 00:01:22,730
We intend to create inside of our app we're going to eventually have something just about identical

22
00:01:22,760 --> 00:01:29,710
for managing all of our products so we create as well so some different methods I expect this repository

23
00:01:29,710 --> 00:01:34,120
to have I think a lot of them will be kind of obvious in nature or at least somewhat obvious.

24
00:01:34,120 --> 00:01:39,370
So I think that we should have a get all method that will return a list of all of our users get one

25
00:01:39,610 --> 00:01:45,430
that will find a user with a given I.D. it'll be provided as an argument I get one by that we'll take

26
00:01:45,430 --> 00:01:51,250
some number of filters and then find one user that matches that given filter and we will of course discuss

27
00:01:51,250 --> 00:01:58,390
exactly what filters are we should have methods to create update and delete some stored users a method

28
00:01:58,390 --> 00:02:04,240
to generate a random I.D. and a method to take all the different users we have and save them to some

29
00:02:04,240 --> 00:02:06,570
file on our file system.

30
00:02:06,580 --> 00:02:10,780
So for us that's going to be like a user start JS on file that we're gonna store all of our users into

31
00:02:11,830 --> 00:02:15,640
so we're going to create a class that implements all of this behavior right here and then like I said

32
00:02:15,680 --> 00:02:17,850
eventually we'll create something very similar.

33
00:02:17,980 --> 00:02:23,960
As a matter of fact almost identical for our products as well before we start to write any code.

34
00:02:24,000 --> 00:02:28,200
There's something one to mention about this style of approach of having one class to manage all of our

35
00:02:28,200 --> 00:02:34,230
different users in the world of JavaScript and kind of server design will really server design and data

36
00:02:34,230 --> 00:02:37,140
management in general especially around Web applications.

37
00:02:37,140 --> 00:02:41,100
There are two very popular approaches for managing data.

38
00:02:41,100 --> 00:02:43,760
The first is called the repository approach.

39
00:02:43,800 --> 00:02:46,300
This is what we are following inside of our application.

40
00:02:46,320 --> 00:02:50,760
This is where we're going to have a single class that we refer to as our repository that is going to

41
00:02:50,760 --> 00:02:57,090
be responsible for all the data access to one type of resource like all of our users or all of our products

42
00:02:57,090 --> 00:03:01,980
or all of our whatever else all the records that we're going to be working with.

43
00:03:02,020 --> 00:03:08,560
So like each individual user or each individual product is going to be stored and used as a plain javascript

44
00:03:08,560 --> 00:03:09,370
object.

45
00:03:09,370 --> 00:03:14,500
It's like a normal object literal that doesn't have any methods attached to it whatsoever so in this

46
00:03:14,500 --> 00:03:19,600
scenario a repository is responsible for all of our interaction with our data.

47
00:03:19,660 --> 00:03:24,310
It has all the functionality all the methods all of that kind of stuff is wrapped up in this one class

48
00:03:24,550 --> 00:03:31,610
for managing one type of data the other popular style of approach is called the Active Record style

49
00:03:31,610 --> 00:03:33,800
and this is definitely not an official name.

50
00:03:33,800 --> 00:03:38,390
You're only going to see some number of places refer to this style as the active record style.

51
00:03:38,450 --> 00:03:44,000
I really in my research couldn't really find a distinct scheme or her distinct name for this style of

52
00:03:44,000 --> 00:03:46,290
coding or setting up a web application.

53
00:03:46,370 --> 00:03:51,440
But in this kind of active record style approach which is named after Ruby on Rails which relies upon

54
00:03:51,440 --> 00:03:56,480
a library called active record every record or essentially every user or product or whatever else is

55
00:03:56,540 --> 00:03:59,030
a instance of a model class.

56
00:03:59,180 --> 00:04:04,010
And so each of these different records have their own set of methods to save or update or delete or

57
00:04:04,010 --> 00:04:07,460
whatever else that particular record that we are working with.

58
00:04:07,490 --> 00:04:12,440
So it's really a question and these two approaches of where we are locating all of our code are we tying

59
00:04:12,470 --> 00:04:18,230
all of our code to kind of a gatekeeper that governs access to our raw data or are we keeping all of

60
00:04:18,230 --> 00:04:22,850
our code with each individual record and associating all of our functionality and centering all the

61
00:04:22,850 --> 00:04:27,950
functionality around each individual record or this first dive into everything we're doing.

62
00:04:27,950 --> 00:04:33,530
I think that the repository approach makes a ton of sense because we really can't sit down and imagine

63
00:04:33,560 --> 00:04:37,830
just like off the top of our heads all the different ways that we would want to work with our data.

64
00:04:37,970 --> 00:04:41,420
You know in this scenario yeah we would want to get all of our different records we want to go to get

65
00:04:41,420 --> 00:04:41,870
one.

66
00:04:41,870 --> 00:04:47,490
We want to be all search for one create update delete and all that kind of good stuff as soon as you

67
00:04:47,490 --> 00:04:52,410
start to get the active record approach things start to get a little bit more hairy because each individual

68
00:04:52,410 --> 00:04:54,770
record is going to have its own set of methods.

69
00:04:54,780 --> 00:04:59,880
There are some methods that don't make sense to allocate to each individual record for example with

70
00:04:59,880 --> 00:05:04,500
the active record approach something it gets a little bit hairy is where to locate a method called like

71
00:05:04,770 --> 00:05:10,710
get all this is a method that is supposed to operate or do a kind of search over a collection of different

72
00:05:10,710 --> 00:05:14,640
records and hopefully return an array of different objects.

73
00:05:14,790 --> 00:05:20,070
And so if we were associating all of our functionality with each individual record well where does that

74
00:05:20,070 --> 00:05:22,250
really make sense to put a method like this.

75
00:05:22,250 --> 00:05:26,160
It just starts to get a little bit more harried to think about a little bit more challenging.

76
00:05:26,160 --> 00:05:31,520
And so I think when you're first getting started using this repository approach makes a lot more sense.

77
00:05:31,670 --> 00:05:31,920
OK.

78
00:05:31,950 --> 00:05:34,960
So our goal right now is to create a new class.

79
00:05:35,130 --> 00:05:39,600
We're going to implement all these methods right here and at every step along the way after we make

80
00:05:39,660 --> 00:05:44,580
any kind of update with say create update delete or whatever else we're going to make sure that all

81
00:05:44,580 --> 00:05:49,110
of our data eventually gets written out to a users not just Jason File and that's how we are going to

82
00:05:49,110 --> 00:05:51,000
have some level of persistence.

83
00:05:51,630 --> 00:05:54,890
So let's get started on our users repository in the next video.
