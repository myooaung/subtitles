WEBVTT
1
00:00:00.870 --> 00:00:04.680
At the end of last video I mentioned that I want to make sure that we have some better output whenever

2
00:00:04.680 --> 00:00:06.590
we run our little program.

3
00:00:06.600 --> 00:00:09.980
Right now we are printing out all the different files and folders inside that simple array.

4
00:00:09.990 --> 00:00:11.740
Let's just get better formatting.

5
00:00:11.760 --> 00:00:17.670
There is one other issue I want to take care of however if I go back into my code editor inside my root

6
00:00:17.670 --> 00:00:23.620
project directory I'm going to create a new folder inside of here called simply empty folder.

7
00:00:23.620 --> 00:00:29.890
So I'm just creating this as a quick example if I go back over to my terminal and I run an L S you'll

8
00:00:29.890 --> 00:00:34.720
see that on my machine Your machine might be configured differently but on my computer empty folder

9
00:00:34.780 --> 00:00:39.970
gets printed out with a slightly different color which is assigned to me that this is a folder as opposed

10
00:00:39.970 --> 00:00:45.840
to a normal file so as we start to improve the formatting here I not only want to make sure that we

11
00:00:45.840 --> 00:00:48.810
display all these file names in a little bit better format.

12
00:00:48.930 --> 00:00:52.770
I also want to try to color code the different things that we are logging.

13
00:00:52.770 --> 00:00:57.630
So I want to make sure that I log out all the different folder names with one color in all the different

14
00:00:57.630 --> 00:01:05.820
file names with another color so something a little bit more similar to how else responds on my machine.

15
00:01:05.820 --> 00:01:09.480
I believe you're not doing this is going to be just a little bit challenging.

16
00:01:09.480 --> 00:01:10.430
Let me tell you why.

17
00:01:11.370 --> 00:01:15.250
If we consider our code right now we are calling Reid Dir.

18
00:01:15.450 --> 00:01:20.070
That's going to take a look inside of the current working directory and give us back the file names

19
00:01:20.340 --> 00:01:24.310
of all the files and folders inside of that directory.

20
00:01:24.310 --> 00:01:29.910
Now here's the awkward thing that is an array of strings so we get just the name of the file.

21
00:01:29.910 --> 00:01:33.930
Nothing else or the folder and nothing else.

22
00:01:33.930 --> 00:01:40.440
The reason that this is kind of awkward is that we don't have any idea whatsoever inside of our program

23
00:01:40.440 --> 00:01:45.510
right now whether each of these strings represents a file or a folder.

24
00:01:45.510 --> 00:01:50.130
So if I do an end L S inside of here now I can see that I have a string that says empty folder and you

25
00:01:50.130 --> 00:01:54.390
and I know that is a folder because we just created it and you and I know that everything else inside

26
00:01:54.390 --> 00:01:55.740
of here is a file.

27
00:01:55.740 --> 00:01:57.970
But our program doesn't know that.

28
00:01:58.320 --> 00:02:03.530
The only thing that our program knows is that there are some things like some objects essentially inside

29
00:02:03.530 --> 00:02:09.470
a current working directory with these names in our program has no idea if they are files or folders.

30
00:02:09.740 --> 00:02:13.400
So that is going to be actually kind of a challenging thing to solve.

31
00:02:13.440 --> 00:02:19.290
We're going to have to find some additional way using the F S module to somehow take a look at each

32
00:02:19.290 --> 00:02:25.260
of these things and decide whether or not there are files or folders that you might immediately say

33
00:02:25.260 --> 00:02:27.780
to me or say to yourself Steven this is insane.

34
00:02:27.780 --> 00:02:32.970
Why don't we just check to see if each of these has an extension so you might think that you can just

35
00:02:32.970 --> 00:02:38.040
use the presence of an extension to decide whether or not something is a file or a folder.

36
00:02:38.040 --> 00:02:40.040
Well unfortunately that doesn't really work.

37
00:02:40.050 --> 00:02:41.590
A hundred percent at a time.

38
00:02:41.730 --> 00:02:46.910
A perfect example of why that doesn't work is actually the node command line tool itself.

39
00:02:47.690 --> 00:02:53.760
If I run it which node that will print out where the node executable lives on my machine.

40
00:02:53.840 --> 00:03:01.030
So you can see that it exists inside of this folder right here so the node program doesn't have an executable

41
00:03:01.030 --> 00:03:03.950
or excuse me it doesn't have an extension on it.

42
00:03:04.090 --> 00:03:11.050
No program is a file it is one single file but it doesn't have an extension so we cannot use the presence

43
00:03:11.290 --> 00:03:17.650
of an extension or not a staunch extension to decide whether or not something is a file because we are

44
00:03:17.650 --> 00:03:22.900
going to misidentify stuff like executable files.

45
00:03:22.930 --> 00:03:24.520
So how are we going to actually do this.

46
00:03:24.850 --> 00:03:27.630
Well let's go back over to the node standard library.

47
00:03:27.790 --> 00:03:28.940
Here it is right here.

48
00:03:29.020 --> 00:03:36.910
I've got the file system documentation up on the screen and I'm going to do a search for L stats like

49
00:03:36.910 --> 00:03:45.240
so so we are looking for FSS dot l stats El stat is mentioned many times inside this file 10 times in

50
00:03:45.240 --> 00:03:45.810
total.

51
00:03:45.840 --> 00:03:50.250
So make sure that you find like this bullet point right here of El stat.

52
00:03:50.260 --> 00:03:51.530
Well then click on that.

53
00:03:51.660 --> 00:03:54.640
We'll take a look at the documentation.

54
00:03:54.640 --> 00:04:02.310
This function is used to get some information about one single file or folder at a time so for our project

55
00:04:02.370 --> 00:04:07.200
we're going to end up having to call El stats multiple different times with every single object that

56
00:04:07.200 --> 00:04:14.460
we get back inside of that file names array we use El stat just like how we do the reader function.

57
00:04:14.690 --> 00:04:19.820
We're going to call f s dot l stats we're going to pass in the name of the file or folder that we want

58
00:04:19.820 --> 00:04:25.010
to take a look at and then a callback function that's going to be invoked once node has looked up some

59
00:04:25.010 --> 00:04:31.000
details about that given file the callback just like reader is going to be invoked with the first argument

60
00:04:31.000 --> 00:04:37.360
of error and a second argument of a stats object that thing right there is what you and I are really

61
00:04:37.360 --> 00:04:43.600
interested in the stats object has some information about the given file or folder that we provided

62
00:04:43.600 --> 00:04:49.880
the path to as the first arguments so this object right here we can use that to figure out whether or

63
00:04:49.880 --> 00:04:57.350
not the given thing is a file or a folder and then after that we can console log its name with the appropriate

64
00:04:57.350 --> 00:05:00.080
color attach.

65
00:05:00.130 --> 00:05:04.450
Let's take a look more at the stats object and get a better idea of how it's going to tell us whether

66
00:05:04.450 --> 00:05:06.430
something is a file or a folder.

67
00:05:06.490 --> 00:05:11.860
So if I click on F. Scott stats it's gonna take me to a class definition.

68
00:05:11.860 --> 00:05:19.690
So when we call l stat and we get back that stats object we get an instance of the F S stats class this

69
00:05:19.690 --> 00:05:21.690
class has a ton of different properties on it.

70
00:05:21.700 --> 00:05:25.720
And if you look at these different property names you can see that they all look really official and

71
00:05:25.720 --> 00:05:27.780
fancy from the get go.

72
00:05:27.790 --> 00:05:31.360
Fortunately we don't really have to interpret any of that information there.

73
00:05:31.420 --> 00:05:37.590
If we scroll down we're going to see that these stats object that we get back from the El stat method

74
00:05:37.830 --> 00:05:40.680
has some very clearly named methods on it.

75
00:05:40.740 --> 00:05:47.770
One is is directory and another is is file so we can use these two methods too.

76
00:05:48.300 --> 00:05:53.820
As you could probably guess really easily identify whether something is a file or a folder and then

77
00:05:53.820 --> 00:05:59.930
do a console log with the appropriate color depending upon which these is true so that's it.

78
00:05:59.960 --> 00:06:03.870
That's the idea we're gonna call El stat a whole bunch with every file we find.

79
00:06:04.010 --> 00:06:08.750
We're gonna get back that stats object we're going to call either is file or is directory then use the

80
00:06:08.750 --> 00:06:13.200
output of that to decide how to console log each file name.

81
00:06:13.350 --> 00:06:16.260
All right so let's go back over to our editor.

82
00:06:16.410 --> 00:06:21.300
We're gonna take a quick pause here before writing on any code so quick pause come back and start working

83
00:06:21.300 --> 00:06:22.820
with L stat in just a moment.
