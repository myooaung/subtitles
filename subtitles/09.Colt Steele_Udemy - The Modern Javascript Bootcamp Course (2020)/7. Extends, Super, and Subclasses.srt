1
00:00:00,240 --> 00:00:00,820
All right.

2
00:00:00,870 --> 00:00:01,370
We've made it.

3
00:00:01,380 --> 00:00:05,010
We have one last important topic around classes in JavaScript.

4
00:00:05,010 --> 00:00:08,970
It is the keyword extend along with keyword called super.

5
00:00:08,970 --> 00:00:13,410
They both have to do with sub classing essentially inheritance.

6
00:00:13,440 --> 00:00:17,030
This is a way of sharing functionality between classes.

7
00:00:17,280 --> 00:00:22,230
So typically I would want to show something more realistic kind of what we did here.

8
00:00:22,230 --> 00:00:26,940
This is nothing crazy but I mean I've used plenty of libraries that are color libraries.

9
00:00:26,940 --> 00:00:29,200
They exist just to do this.

10
00:00:29,220 --> 00:00:30,920
Some of them are more more fully featured.

11
00:00:30,930 --> 00:00:33,480
But this is not totally unrealistic.

12
00:00:33,480 --> 00:00:40,710
It's not the typical intro to classes idea of dog and cat or bank account or deck of cards.

13
00:00:40,710 --> 00:00:41,960
It's something slightly better.

14
00:00:42,090 --> 00:00:48,090
But for this video on inheritance and extends and subclasses and super I'm going to dial it down.

15
00:00:48,150 --> 00:00:50,560
We're gonna go back to the basics.

16
00:00:50,640 --> 00:00:55,720
The most cliche possible classes let's define a class called Cats.

17
00:00:56,070 --> 00:01:00,390
I know and will pass in a name and an age about that.

18
00:01:01,460 --> 00:01:02,100
All right.

19
00:01:02,100 --> 00:01:08,480
And then we'll set this name to be name and then this dot age to be age.

20
00:01:08,570 --> 00:01:13,890
So the reason I'm going simple so we can focus on the concepts not get too bogged down in the actual

21
00:01:13,890 --> 00:01:14,990
logic of things.

22
00:01:15,060 --> 00:01:17,380
The logic here will be incredibly simple.

23
00:01:17,520 --> 00:01:20,610
So a cat class and we'll have a simple method called Eat.

24
00:01:22,310 --> 00:01:25,960
And in here we will return the string.

25
00:01:26,070 --> 00:01:26,820
Let's do this.

26
00:01:26,820 --> 00:01:36,590
Don't name is eating OK so I can make a new class or a new cat new cat.

27
00:01:36,600 --> 00:01:45,270
Save it to a variable const Monty equals new cat Monty who is technically dead but I'll say nine.

28
00:01:45,360 --> 00:01:46,860
Let's look at Monty.

29
00:01:46,940 --> 00:01:48,980
It has name of Monte age of nine.

30
00:01:49,140 --> 00:01:51,290
I call Monty dog eat.

31
00:01:51,300 --> 00:01:52,640
Monty is eating.

32
00:01:53,040 --> 00:01:53,310
All right.

33
00:01:53,550 --> 00:01:56,250
So now let's say I have a nother class.

34
00:01:56,250 --> 00:02:03,290
This class is called Dog dog is very similar.

35
00:02:03,330 --> 00:02:04,410
Surprise surprise.

36
00:02:04,410 --> 00:02:06,230
It's almost like I'd planned it that way.

37
00:02:06,630 --> 00:02:07,460
Now that was stupid.

38
00:02:07,490 --> 00:02:08,370
Oh no I said that.

39
00:02:08,370 --> 00:02:09,870
I'm sorry.

40
00:02:09,870 --> 00:02:12,810
So a dog also has a name and an age.

41
00:02:12,810 --> 00:02:18,450
We said This dog name to be name is that age to be age.

42
00:02:18,450 --> 00:02:19,770
It also has an eat method.

43
00:02:19,790 --> 00:02:20,930
It's just copy that over.

44
00:02:22,920 --> 00:02:27,500
OK let's make a dog so I'll call new dog.

45
00:02:27,570 --> 00:02:28,550
I'll pass in.

46
00:02:28,550 --> 00:02:34,790
Why it concept why it equals new dog in an age.

47
00:02:35,040 --> 00:02:36,160
He's also dead.

48
00:02:36,160 --> 00:02:37,080
Yikes.

49
00:02:37,120 --> 00:02:44,720
We look at why it's it's an object has a name and an age and it has a it method.

50
00:02:44,980 --> 00:02:50,020
They're basically the same thing just different names but we could go ahead and add some method to cat

51
00:02:50,320 --> 00:03:01,200
that doesn't exist on dog like meow and then it could just return meow and we could do the same thing

52
00:03:01,200 --> 00:03:01,860
for dog.

53
00:03:01,860 --> 00:03:06,270
We could have a method called bark which returns Wolf.

54
00:03:08,700 --> 00:03:09,610
OK.

55
00:03:09,690 --> 00:03:14,130
So now they're slightly different but there is a lot of duplicated functionality.

56
00:03:14,340 --> 00:03:21,060
So one of the options we have in Javascript is to move this duplicated code from here and from Cat and

57
00:03:21,060 --> 00:03:29,370
from dog into a separate standalone class that both of these classes could extend so you can think of

58
00:03:29,370 --> 00:03:32,240
it as kind of like a parent child relationship.

59
00:03:32,340 --> 00:03:33,650
We could have a parent class.

60
00:03:33,660 --> 00:03:45,040
I'd call it probably animal or pet let's do pet class pet and let's just copy this entire thing here.

61
00:03:45,490 --> 00:03:49,220
Like that and remove all of that from Cat.

62
00:03:49,450 --> 00:03:51,900
All of that from dog.

63
00:03:52,130 --> 00:03:54,790
So right now I'm not going to be able to make a new cat.

64
00:03:54,970 --> 00:03:56,390
I won't be able to make a new dog.

65
00:03:56,440 --> 00:03:57,360
I can make a new pet.

66
00:03:58,260 --> 00:04:06,910
But if I try and rerun this code and make a new dog let's look at what why it is an empty object.

67
00:04:06,910 --> 00:04:11,410
There's no constructor no constructor on dog and no constructor on cat.

68
00:04:11,410 --> 00:04:19,350
So here is how we can tell cat and dog to include the functionality of pet to extend pet.

69
00:04:19,360 --> 00:04:23,810
It's as simple as saying class cats extends pet.

70
00:04:23,890 --> 00:04:29,130
I'll do the same thing for Dog class dog extends pet.

71
00:04:29,290 --> 00:04:30,490
So now does it work.

72
00:04:30,490 --> 00:04:35,420
Well let's see what happens when I make a new cat or a new dog all right.

73
00:04:35,470 --> 00:04:38,780
I just made a new dog.

74
00:04:39,000 --> 00:04:42,050
Look at that age and name.

75
00:04:42,090 --> 00:04:47,160
We're already filled out but I don't have a constructor in dog.

76
00:04:47,250 --> 00:04:50,670
Doesn't matter because I extended from pet.

77
00:04:50,850 --> 00:04:56,520
It's going to use that constructor if it doesn't find one on my dog or on this dog class in which it

78
00:04:56,520 --> 00:04:56,840
did it.

79
00:04:57,210 --> 00:05:00,080
So it looked to the constructor from pet.

80
00:05:00,420 --> 00:05:04,620
So we end up with age and name and take a look.

81
00:05:04,620 --> 00:05:11,960
We also have bark bark which is defined on dog and even more exciting.

82
00:05:12,030 --> 00:05:15,740
We have access to eat which is not defined on dog at all.

83
00:05:15,900 --> 00:05:17,010
So we don't see it here.

84
00:05:17,040 --> 00:05:17,250
Right.

85
00:05:17,250 --> 00:05:18,300
We don't see it there.

86
00:05:18,300 --> 00:05:19,410
I don't see eat here.

87
00:05:19,650 --> 00:05:22,930
But if I look at this promo here and photo again.

88
00:05:22,980 --> 00:05:23,850
There we go.

89
00:05:23,850 --> 00:05:25,320
So we have dog.

90
00:05:25,320 --> 00:05:27,920
This is a functionality from dog which is just bark.

91
00:05:28,050 --> 00:05:33,330
Then we have the functionality from pet which is eat so I can call why it dog eat.

92
00:05:34,200 --> 00:05:41,610
Even though I never defined eat on the dog class we are extending the functionality from pet both on

93
00:05:41,610 --> 00:05:43,170
cat and dog.

94
00:05:43,470 --> 00:05:45,900
So I could do it again with a cat.

95
00:05:45,990 --> 00:05:47,590
Let's just make that Monty.

96
00:05:47,790 --> 00:05:48,660
Where are you.

97
00:05:48,660 --> 00:05:49,790
Here we go.

98
00:05:49,890 --> 00:05:51,800
We have Monty dots.

99
00:05:51,850 --> 00:06:00,750
He not to find on cat Monty dog meow is defined on cat.

100
00:06:00,820 --> 00:06:02,020
That's the basics.

101
00:06:02,170 --> 00:06:04,660
A couple of other things very important to note.

102
00:06:04,660 --> 00:06:13,210
If I had another method on let's say on dog also called Eat and this one returned I need to use a string

103
00:06:13,210 --> 00:06:28,050
template literal something else like this dog name scarfs his food like that and now I make a dog if

104
00:06:28,050 --> 00:06:29,660
we call Wyatt dog eat.

105
00:06:29,850 --> 00:06:31,680
Which version of Eat does it call.

106
00:06:31,800 --> 00:06:34,050
It calls the dog version.

107
00:06:34,050 --> 00:06:40,650
So if it doesn't find eat on dog on the dog prototype it will look up on the pet prototype where it

108
00:06:40,650 --> 00:06:44,820
does find it and if it didn't find it there it would look on the object prototype if didn't find it

109
00:06:44,820 --> 00:06:45,220
there.

110
00:06:45,300 --> 00:06:51,250
It's going to be unhappy and it will let you know so I'll leave that there so you can see how it works.

111
00:06:51,390 --> 00:06:56,550
The other important keyword here that we haven't talked about yet is called Super.

112
00:06:56,640 --> 00:07:03,050
So sometimes you want to rely on the exact same constructor from your superclass from pet.

113
00:07:03,060 --> 00:07:09,960
In this case cat extends pet we don't have a constructor but if I wanted to have some additional information

114
00:07:09,960 --> 00:07:14,800
for cat like I don't know what else to pass in.

115
00:07:14,880 --> 00:07:22,110
Let's say you pass in the name and age and we want to pass in about lives left which will default to

116
00:07:22,120 --> 00:07:22,900
9.

117
00:07:23,160 --> 00:07:24,820
Very good to cat 9 lives.

118
00:07:24,860 --> 00:07:25,450
Okay.

119
00:07:26,610 --> 00:07:33,240
And here I could manually set this dog name equals name this dot age equals age but I'm already doing

120
00:07:33,240 --> 00:07:34,460
that here.

121
00:07:34,500 --> 00:07:42,770
So really all I want to do is set this dot lives left equals lives left and if I don't want to duplicate

122
00:07:42,770 --> 00:07:47,440
that I can use the super keyword super.

123
00:07:47,450 --> 00:07:51,590
It's going to reference the class that we are extending from.

124
00:07:51,650 --> 00:08:00,380
So if I call super instead of here and I pass in name and age it's going to call this constructor so

125
00:08:00,380 --> 00:08:01,620
we can see this in action.

126
00:08:01,710 --> 00:08:14,330
It's cancelled out log in cat constructor and then duplicate this appear in pet constructor and let's

127
00:08:14,330 --> 00:08:19,290
see what happens we'll make a new cat I'll pass in a number of lives.

128
00:08:19,310 --> 00:08:22,250
Actually I won't and will default to 9.

129
00:08:22,250 --> 00:08:25,340
Take a look in cat constructor in pet constructor.

130
00:08:25,460 --> 00:08:34,100
If we look at Monty Monty has a name Monty in age 9 and lives left with set tonight so we reuse the

131
00:08:34,100 --> 00:08:39,170
functionality from this constructor but we added on our own for cat.

132
00:08:39,410 --> 00:08:40,640
So very important.

133
00:08:40,730 --> 00:08:44,550
Super is going to be a reference to the superclass.

134
00:08:44,610 --> 00:08:50,360
It can be confusing definitely trips people up but it's a reference to what we're extending from which

135
00:08:50,360 --> 00:08:52,340
is pet so we could do it.

136
00:08:52,370 --> 00:08:56,820
We could use it instead of dog but just to save you time and not for you to death.

137
00:08:56,840 --> 00:08:58,680
We'll keep it simple here.

138
00:08:58,820 --> 00:08:59,960
So this is a common pattern.

139
00:08:59,960 --> 00:09:04,580
You have some base class you have other classes that extend from it.

140
00:09:04,580 --> 00:09:11,150
And in this case of dog we didn't add any new properties in it's the exact same constructor as pet.

141
00:09:11,320 --> 00:09:12,180
And that's fine.

142
00:09:12,270 --> 00:09:17,060
It will call that constructor automatically if we don't define our own but in the case of cat which

143
00:09:17,060 --> 00:09:21,950
is common when we're building more realistic things we have other data.

144
00:09:21,950 --> 00:09:25,400
Just a simple lives left which you want to add on to this.

145
00:09:25,850 --> 00:09:27,170
So we call super.

146
00:09:27,170 --> 00:09:31,450
We can take advantage of this constructor and then add on lives left as well.

147
00:09:32,120 --> 00:09:34,020
And that's the basics of inheritance.

148
00:09:34,030 --> 00:09:36,470
And mean you can continue to go multiple levels.

149
00:09:36,530 --> 00:09:38,650
We could have pet extend from animal.

150
00:09:38,690 --> 00:09:41,840
We could have animal extend from living thing.

151
00:09:41,900 --> 00:09:47,300
There's so many different things we could do and you'll see this with things like HMO elements in the

152
00:09:47,300 --> 00:09:51,410
DOM that extends from like five or six different classes.

153
00:09:51,410 --> 00:09:57,080
But remember when you extend something and we need to find a class it's all just setting up these constructor

154
00:09:57,080 --> 00:10:01,600
functions and calling it with new and adding methods to the prototype.

155
00:10:01,640 --> 00:10:05,360
So this is all just nice syntactic sugar okay.
