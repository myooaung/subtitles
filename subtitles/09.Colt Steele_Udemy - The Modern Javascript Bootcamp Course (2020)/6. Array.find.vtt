WEBVTT
1
00:00:00.270 --> 00:00:06.210
The next one of these array methods that expects a callback is called Find find does pretty much what

2
00:00:06.210 --> 00:00:07.130
it sounds like.

3
00:00:07.260 --> 00:00:12.950
It finds an element it retrieves an element from an array based off of the function that we pass it.

4
00:00:13.020 --> 00:00:15.920
So this function needs to return true or false.

5
00:00:16.050 --> 00:00:21.090
And each time find we'll call that function with one of these elements.

6
00:00:21.180 --> 00:00:27.620
And if that function returns true then it's done it will return to you the value of that element.

7
00:00:27.720 --> 00:00:34.470
So it only returns one value one element that matches even if there are 10 matches in a given array.

8
00:00:34.470 --> 00:00:37.850
It stops after it finds the very first one.

9
00:00:37.880 --> 00:00:38.920
So here's an example.

10
00:00:39.050 --> 00:00:40.520
I have an array called movies.

11
00:00:40.520 --> 00:00:41.930
It has four strings.

12
00:00:41.930 --> 00:00:47.080
Every movie has either Mr. or Mrs. or both in its title.

13
00:00:47.330 --> 00:00:55.610
If I want to find the first movie that has these string misses in it I could do movies that find I'll

14
00:00:55.610 --> 00:00:56.650
do an arrow function.

15
00:00:56.690 --> 00:01:03.370
I'll call the parameter movie and this needs to be a boolean function that returns true or false.

16
00:01:03.380 --> 00:01:06.570
So how do I figure out if movie contains misses.

17
00:01:06.650 --> 00:01:14.390
I have a couple of ways but I'll do movie dot includes misses and I need to make sure I return this.

18
00:01:14.420 --> 00:01:20.570
If I'm not going to use an implicit return and then I'll save this to a variable I'll call this concert

19
00:01:20.950 --> 00:01:22.420
movie.

20
00:01:22.580 --> 00:01:23.660
Let's see what happens.

21
00:01:23.720 --> 00:01:27.890
We'll look at movie and it contains Mr. and Mrs. Smith.

22
00:01:27.890 --> 00:01:29.910
Now movies is unchanged.

23
00:01:29.960 --> 00:01:32.490
All we're doing is a simple find a search.

24
00:01:32.600 --> 00:01:35.590
We're not removing or updating movies in any way.

25
00:01:35.960 --> 00:01:42.230
So this function right here again has to return true or false and the first time it returns true for

26
00:01:42.230 --> 00:01:47.610
a given movie and give an element find is done and it returns that movie.

27
00:01:47.690 --> 00:01:54.120
So the Fantastic Mr. Fox was movie the very first time through it was plugged into this function.

28
00:01:54.140 --> 00:01:59.900
It does not include misses so it returns false which means find moves on to the next element.

29
00:01:59.930 --> 00:02:04.530
Mr. and Mrs. Smith that became movie movie includes Mrs..

30
00:02:04.550 --> 00:02:06.210
Now is true.

31
00:02:06.330 --> 00:02:07.540
Returns true.

32
00:02:07.550 --> 00:02:08.720
So then find.

33
00:02:08.720 --> 00:02:09.820
Stops everything.

34
00:02:09.950 --> 00:02:11.810
And it returns this string right here.

35
00:02:12.170 --> 00:02:19.370
If I wanted to instead find the first movie that starts with Mrs. not just includes Mrs. somewhere I

36
00:02:19.370 --> 00:02:21.090
could write it as concept.

37
00:02:21.200 --> 00:02:29.630
I'll just do movie 2 equals movie stop find we'll do an implicit return this time M I'll do parents

38
00:02:29.630 --> 00:02:33.530
to start M that index of Mrs..

39
00:02:33.710 --> 00:02:34.470
I do need to pay.

40
00:02:34.760 --> 00:02:39.590
Pay attention to capitalization or down case everything.

41
00:02:39.680 --> 00:02:41.970
I want that to equal one.

42
00:02:42.200 --> 00:02:44.240
That would mean that Mrs..

43
00:02:44.240 --> 00:02:46.680
Actually what am I saying I want equal zero.

44
00:02:46.700 --> 00:02:51.650
That would mean that Mrs. comes at the very beginning of the string and that should match Mrs. Doubtfire

45
00:02:52.130 --> 00:02:54.200
but not Mr. and Mrs. Smith.

46
00:02:54.200 --> 00:02:56.210
So let's see if it works.

47
00:02:56.240 --> 00:02:57.650
Run my code.

48
00:02:57.650 --> 00:03:01.360
Movie 2 we get Mrs. Doubtfire again.

49
00:03:01.400 --> 00:03:05.650
This first one was looking for anything that contained Mrs. anywhere.

50
00:03:05.690 --> 00:03:08.650
We do have two matches but this one doesn't matter.

51
00:03:08.660 --> 00:03:13.110
Never found because find is going to stop after the first match it returns.

52
00:03:13.130 --> 00:03:17.020
Mr. and Mrs. Smith the other movies there could be a thousand other movies.

53
00:03:17.090 --> 00:03:18.150
They don't get looked at.

54
00:03:18.180 --> 00:03:21.320
They're passed over this error function we wrote here.

55
00:03:21.410 --> 00:03:26.400
We could just do on a single line if we wanted to.

56
00:03:26.400 --> 00:03:30.600
For me it's a bit long with my editor zoomed in but it's not too bad.

57
00:03:30.600 --> 00:03:33.410
So this works if you want to do it that way.

58
00:03:33.450 --> 00:03:36.030
Now let's do another example with a different data structure.

59
00:03:36.030 --> 00:03:39.350
Here I have that box array we've been using for a couple examples.

60
00:03:39.360 --> 00:03:40.590
Each book is an object.

61
00:03:40.590 --> 00:03:44.920
It has a title authors which is an array and a rating.

62
00:03:45.000 --> 00:03:51.000
If I wanted to find a book that had a rating greater than four point three I would do book stop find

63
00:03:51.390 --> 00:03:52.070
error function.

64
00:03:52.080 --> 00:04:00.630
I'll just go with B as the parameter B dot reading I can spell rating is greater than or equal to four

65
00:04:00.630 --> 00:04:04.880
point three and we'll save that to a variable concept.

66
00:04:05.040 --> 00:04:08.670
Good book.

67
00:04:08.710 --> 00:04:10.190
Let's take a look.

68
00:04:10.210 --> 00:04:12.370
Good book is bone.

69
00:04:12.370 --> 00:04:13.810
The Complete Edition.

70
00:04:13.810 --> 00:04:17.690
Great Graphic Novel By the way rating is four point four two.

71
00:04:17.710 --> 00:04:19.660
It gave us the first match.

72
00:04:19.840 --> 00:04:26.250
We could also do something like find the first book where Neil Gaiman is an author so concept.

73
00:04:26.350 --> 00:04:34.730
Neil book equals book stop find b we want B.

74
00:04:34.780 --> 00:04:42.920
Authors dot includes Neil Gaiman There we go.

75
00:04:43.180 --> 00:04:45.280
And I think that one is good enough for one line.

76
00:04:45.280 --> 00:04:48.690
It's not that long but just to have a little variety.

77
00:04:48.760 --> 00:04:52.800
Let's do it with parents.

78
00:04:52.930 --> 00:04:54.540
There we go.

79
00:04:54.550 --> 00:04:55.420
Let's take a look.

80
00:04:55.450 --> 00:04:59.310
Nail book and it gave us good moments.

81
00:04:59.320 --> 00:05:02.590
The first book where he's listed as an author.

82
00:05:02.590 --> 00:05:07.190
So this one doesn't matter because find only gives us the first match.

83
00:05:07.390 --> 00:05:12.520
So find is really useful when you're trying to for example find something based off of an idea.

84
00:05:12.760 --> 00:05:18.970
If you have a list of comments and or how about a list of posts that a user has created and they've

85
00:05:18.970 --> 00:05:25.300
clicked a button to delete one of those posts if it's a web app they want to remove it when that button

86
00:05:25.300 --> 00:05:26.190
is clicked.

87
00:05:26.350 --> 00:05:28.580
Most likely you'll end up sending an I.D..

88
00:05:28.630 --> 00:05:31.410
You'll call a function with an idea of that post.

89
00:05:31.690 --> 00:05:35.240
It will be something like delete post with idea of two.

90
00:05:35.650 --> 00:05:37.580
It would be something like this.

91
00:05:37.690 --> 00:05:43.600
You would have a function called delete maybe delete post you'd pass in to and then you would use to

92
00:05:43.870 --> 00:05:55.750
to find the post with that I.D. So you might do posts dot find for the post parameter p p dot I.D. equals

93
00:05:55.780 --> 00:06:01.840
two and maybe instead of deleting you wanted to update so you would find the post and then update the

94
00:06:01.840 --> 00:06:07.390
post based off of that I.D. we use find a lot especially when we're looking for something based off

95
00:06:07.390 --> 00:06:09.690
of an identifier a user name.

96
00:06:09.760 --> 00:06:12.100
But remember it only gives us the first match.
