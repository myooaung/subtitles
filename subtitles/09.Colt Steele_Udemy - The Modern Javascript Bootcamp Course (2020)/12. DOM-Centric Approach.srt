1
00:00:01,140 --> 00:00:05,910
OK so in the last video we had a long discussion about where we're going to store data inside of application.

2
00:00:05,910 --> 00:00:10,950
So again we're going to store at the current time inside of that input element that is going to be our

3
00:00:10,950 --> 00:00:11,950
source of truth.

4
00:00:12,060 --> 00:00:17,810
That is really going to be the only place that has any information about what our current timer is.

5
00:00:17,820 --> 00:00:23,100
So in order to actually get some value inside there and updated over time I'm going to first go over

6
00:00:23,100 --> 00:00:29,050
to my index start each CML file inside of here I'm going to find that input element and I'm going to

7
00:00:29,050 --> 00:00:34,290
give it a value property and I'll start off as 30.

8
00:00:34,470 --> 00:00:38,080
Now whenever we assign an HMO attribute it always has to be a string.

9
00:00:38,100 --> 00:00:40,990
So notice how this is a string that says 30.

10
00:00:41,010 --> 00:00:45,930
So we just need to keep that in mind as soon as we start to read a value out of this text input to figure

11
00:00:45,930 --> 00:00:47,750
out how much time is left on our timer.

12
00:00:47,790 --> 00:00:49,190
We're going to get a string.

13
00:00:49,210 --> 00:00:53,690
We're going to have to convert it into a number.

14
00:00:53,920 --> 00:00:57,720
Well then go back over to my index dot j ust file it's over here.

15
00:00:57,730 --> 00:01:00,830
I'm then going to go down to my tick method.

16
00:01:00,830 --> 00:01:06,820
I'm going to delete that console log of tick and inside of here I'm going to add in some code to reach

17
00:01:06,820 --> 00:01:08,070
into the text input.

18
00:01:08,200 --> 00:01:10,140
I'm going to get the current value out of it.

19
00:01:10,180 --> 00:01:16,480
We're going to subtract one from it and then throw that updated value back inside the input though to

20
00:01:16,480 --> 00:01:19,930
do so we're going to first get a reference to the text input.

21
00:01:19,960 --> 00:01:24,990
Remember we already have a reference to it inside of our class as this dot duration input.

22
00:01:25,030 --> 00:01:32,740
That was one of the arguments to our constructor so inside of here I'll say time remaining is going

23
00:01:32,740 --> 00:01:37,830
to be this dot duration input dot value.

24
00:01:37,840 --> 00:01:40,830
Now the value right here once again that is going to be a string.

25
00:01:40,840 --> 00:01:44,650
So we have to take that string and turn it into a number to do so.

26
00:01:44,650 --> 00:01:52,530
We're going to wrap that thing inside of hearts float the parts float function is built into the job

27
00:01:52,530 --> 00:01:56,310
script language so we can just freely reference it at any point time.

28
00:01:56,400 --> 00:02:00,870
This function is going to take a string that contains a number and it's going to pull out just the number

29
00:02:00,870 --> 00:02:04,040
part of that string and give it back to us.

30
00:02:04,050 --> 00:02:06,380
There are two functions that do this kind of operation.

31
00:02:06,390 --> 00:02:13,530
There's parts int and parts float pass it is short for pass integer pass it will give us a number that

32
00:02:13,530 --> 00:02:18,200
does not have a decimal whereas past float will give us a number that has a decimal.

33
00:02:18,240 --> 00:02:24,270
So just as a quick example if we have some string that has like ten point one inside of it and we ran

34
00:02:24,270 --> 00:02:25,740
it through pass INT.

35
00:02:25,800 --> 00:02:32,890
That would give us 10 if we ran it through pass float that would give us ten point one so we're going

36
00:02:32,890 --> 00:02:39,750
to use pass float because we're going to eventually support decimals inside of our timer okay.

37
00:02:39,770 --> 00:02:49,020
So after we get our time remaining we can do a update to the value of time remaining and give the new

38
00:02:49,020 --> 00:02:56,130
value or through the new value back in to the input element so we can say this dot duration input dot

39
00:02:56,150 --> 00:03:03,450
value is going to be time remaining minus 1 Okay.

40
00:03:03,520 --> 00:03:05,130
And that should pretty much be it.

41
00:03:05,140 --> 00:03:10,060
So let's not go back over to our browser and say both these files and test this out so I can refresh

42
00:03:10,060 --> 00:03:14,320
over here I can now see the default value of 30 which I set inside the HDMI file.

43
00:03:14,370 --> 00:03:20,340
I'll then click on starts and I'll see the timer start to count down now the very good thing about this

44
00:03:20,340 --> 00:03:25,680
approach or can the nice thing if I click on pause right here and I update that value to say three hundred

45
00:03:26,010 --> 00:03:31,320
and then click on Start My time was just going to work right away the way I expect we do not have to

46
00:03:31,320 --> 00:03:37,110
add in any additional event handlers to watch for a change event and change some internal representation

47
00:03:37,110 --> 00:03:42,300
of that timer inside of our timer instance that's what we would have had to do to get a change to work

48
00:03:42,300 --> 00:03:47,010
correctly you and I would have had to set up that event listener watch for a change the input element

49
00:03:47,190 --> 00:03:50,560
and then wrote that updated value back inside the timer instance.

50
00:03:50,730 --> 00:03:56,360
So again nice thing about this approach a little bit less work from the get go OK.

51
00:03:56,390 --> 00:04:01,190
So this definitely works but let's take a quick pause right here and I want to point out something about

52
00:04:01,190 --> 00:04:04,250
the current state of our code inside the tick method.

53
00:04:04,370 --> 00:04:07,910
We're going to figure out some way to kind of condense the code we have inside of here just a little

54
00:04:07,910 --> 00:04:10,820
bit so quick pause and I'll see you in just a moment.
