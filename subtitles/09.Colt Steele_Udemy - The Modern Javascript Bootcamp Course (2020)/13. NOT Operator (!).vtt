WEBVTT
1
00:00:00.210 --> 00:00:08.580
Next up the third and final logical operator we'll see for now the not operator so unlike or or end

2
00:00:08.730 --> 00:00:15.450
where we have two characters Ampersand Ampersand or with or we have pipe pipe with not we have a single

3
00:00:15.450 --> 00:00:19.880
character one exclamation point and it works a little differently.

4
00:00:19.980 --> 00:00:24.750
We don't have a left and a right side like we did with or we have one side we have the other.

5
00:00:24.750 --> 00:00:31.440
Same thing with and not is just going to operate on a single expression and it returns true if that

6
00:00:31.440 --> 00:00:32.970
expression is false.

7
00:00:33.480 --> 00:00:39.930
So we put exclamation point in front of some expression if that expression returns false.

8
00:00:40.080 --> 00:00:44.910
When you have the not in front of it the whole thing is now true kind of negates it.

9
00:00:45.810 --> 00:00:49.780
So here's a couple of very simple examples we've seen no.

10
00:00:49.800 --> 00:00:51.850
Which is a false C value.

11
00:00:52.170 --> 00:01:03.020
When you put an exclamation point in front of it we end up with true not no true not zero true not empty

12
00:01:03.020 --> 00:01:04.940
string true.

13
00:01:04.940 --> 00:01:12.180
Now if we try it with a truth value like forty five we get false now because forty five is truth.

14
00:01:12.660 --> 00:01:16.570
So then not true is false.

15
00:01:16.570 --> 00:01:19.220
Same thing with a string that is truth.

16
00:01:19.610 --> 00:01:21.280
And you can see where I'm going.

17
00:01:21.280 --> 00:01:26.680
We can also use not to negate actual expressions that are not just a single value.

18
00:01:26.680 --> 00:01:29.770
So something like zero equals zero is truth.

19
00:01:30.520 --> 00:01:36.940
It's true when we put the exclamation point that not in front we get false or three less than or equal

20
00:01:36.940 --> 00:01:38.310
to four that is true.

21
00:01:38.430 --> 00:01:45.370
The exclamation point gives us false scenarios where you use this can vary greatly and it's hard to

22
00:01:45.370 --> 00:01:49.810
show all that useful of an example and I'll explain why in just a moment.

23
00:01:49.810 --> 00:01:57.100
All of these operators and or not along with the conditionals themselves if else if and else are really

24
00:01:57.100 --> 00:02:03.820
flexible and there's often a ton of different ways of achieving the exact same logic or the same outcome

25
00:02:04.030 --> 00:02:11.080
but you can write it differently you can use nested things as we've seen you could use and you can combine

26
00:02:11.080 --> 00:02:14.190
certain things with not in order to make them work.

27
00:02:14.230 --> 00:02:21.820
So let's take a look at an example we saw earlier we had the logged in user example where we were trying

28
00:02:21.820 --> 00:02:27.610
to check if a user was logged in or if this variable had a value we wanted to do something.

29
00:02:27.820 --> 00:02:32.830
But now let's flip it and say that we want to check if there is not a logged in user so that we can

30
00:02:32.830 --> 00:02:36.490
boot them off the web page they're in the wrong spot they shouldn't be here.

31
00:02:36.490 --> 00:02:41.500
So if there isn't a logged in user do something.

32
00:02:41.500 --> 00:02:45.240
How would we do that with what we've seen so far without not.

33
00:02:45.340 --> 00:02:53.300
We would do if logged in user and then else is where we would put our code that code down here would

34
00:02:53.300 --> 00:02:58.050
run when there is no logged in user when it's undefined or no empty string.

35
00:02:58.100 --> 00:03:05.550
But if we want to use not if we don't have an otherwise we just want to check if there's not a user.

36
00:03:05.810 --> 00:03:10.970
We could write this if not logged in user we'll come to that log.

37
00:03:11.330 --> 00:03:13.430
And if I run it we end up with.

38
00:03:13.460 --> 00:03:14.640
Get out of here.

39
00:03:14.750 --> 00:03:20.430
But if I change this to now have a value we don't get anything.

40
00:03:20.750 --> 00:03:27.710
So we could have written this as we saw earlier with the regular if put some code in here for when the

41
00:03:27.710 --> 00:03:29.010
user is logged in.

42
00:03:29.150 --> 00:03:31.580
And then in the else put this.

43
00:03:31.580 --> 00:03:36.920
But if we don't have two situations we just want to check if there's not a logged in user.

44
00:03:36.920 --> 00:03:37.760
We could use not.

45
00:03:38.090 --> 00:03:40.640
So here's another very simple example.

46
00:03:40.640 --> 00:03:46.250
Most of these as you've already noticed are quite silly and not they don't seem immediately useful.

47
00:03:46.250 --> 00:03:51.470
But these pieces of logic the tools we're learning I promise they do come into play all the time when

48
00:03:51.470 --> 00:03:53.360
you're creating real applications.

49
00:03:53.360 --> 00:03:54.950
We just don't have those tools yet.

50
00:03:55.010 --> 00:03:59.790
So we're kind of faking it with logged in user or what we're gonna do now.

51
00:03:59.870 --> 00:04:02.010
We'll do something like flavor.

52
00:04:02.210 --> 00:04:03.920
Flavor will be grape.

53
00:04:04.160 --> 00:04:11.940
So we are a online snow cone stand and we mail you snow cones premade using dry ice.

54
00:04:11.990 --> 00:04:13.230
We only have two flavors.

55
00:04:13.280 --> 00:04:19.360
We have grape and we have Cherry So if a user order something that is not grape and it's not cherry

56
00:04:19.720 --> 00:04:21.190
we need to tell them you can't do that.

57
00:04:22.300 --> 00:04:24.840
So we have a couple of different ways of doing this.

58
00:04:24.880 --> 00:04:37.550
We could check if flavor is not equal to grape and flavor is not equal to Cherry.

59
00:04:37.730 --> 00:04:38.770
We'll come to that log.

60
00:04:38.770 --> 00:04:40.210
We don't have that flavor.

61
00:04:40.270 --> 00:04:41.860
We don't have that flavor.

62
00:04:42.610 --> 00:04:44.530
So that's one way of doing it.

63
00:04:44.770 --> 00:04:52.630
If I change this to watermelon for example refresh the page we don't have that flavor but if we wanted

64
00:04:52.630 --> 00:04:56.860
to write it another way just kind of what I'm getting at here we have a lot of options.

65
00:04:56.920 --> 00:05:13.350
We could also say if flavor equals grape or flavor equals cherry and then negate that entire thing with

66
00:05:13.350 --> 00:05:15.550
piranhas around it.

67
00:05:15.810 --> 00:05:20.790
We would read this as if not flavor is grape or flavors cherry.

68
00:05:21.420 --> 00:05:27.120
So this logic is basically the same thing we wrote up here the same exact outcome for it's true in the

69
00:05:27.120 --> 00:05:31.670
same scenarios and false in the same scenarios but we've written it differently.

70
00:05:31.980 --> 00:05:33.190
I definitely prefer.

71
00:05:33.250 --> 00:05:34.690
Well I think I prefer this one.

72
00:05:35.070 --> 00:05:35.730
It's easier.

73
00:05:35.760 --> 00:05:36.970
Fewer operators.

74
00:05:37.080 --> 00:05:39.160
But this is totally valid.

75
00:05:39.330 --> 00:05:41.990
And remember the way it works is that we have or.

76
00:05:42.030 --> 00:05:43.440
Which is in parentheses.

77
00:05:43.560 --> 00:05:47.550
So if one of these is true the entire thing is true.

78
00:05:47.820 --> 00:05:52.040
And that would mean flavor is grape or flavor is cherry.

79
00:05:52.140 --> 00:05:55.630
So if flavor is grape this becomes true.

80
00:05:56.130 --> 00:05:58.710
This doesn't matter because it's an or.

81
00:05:58.820 --> 00:06:03.860
So the whole thing becomes true like that and then we negate that.

82
00:06:03.860 --> 00:06:07.840
So the whole thing becomes false and then this code would not run.

83
00:06:08.430 --> 00:06:15.630
But if we had flavor was watermelon for example this is false this is false.

84
00:06:15.630 --> 00:06:21.890
So this whole or becomes false and then we negate that false which gives us true.

85
00:06:22.560 --> 00:06:24.300
So let's make sure it works.

86
00:06:24.390 --> 00:06:26.040
OK comment this one out.

87
00:06:26.130 --> 00:06:27.200
Well consider log.

88
00:06:27.210 --> 00:06:29.830
We only have grape and Cherry refresh.

89
00:06:29.850 --> 00:06:31.830
Right now we're using watermelon.

90
00:06:31.830 --> 00:06:32.880
Is that right.

91
00:06:32.880 --> 00:06:34.600
We only have grape and cherry.

92
00:06:34.770 --> 00:06:36.200
I changed it to grape.

93
00:06:36.240 --> 00:06:37.550
No problem.

94
00:06:37.650 --> 00:06:39.800
We don't get that counseled outlook.

95
00:06:40.230 --> 00:06:46.400
So it's not the most riveting example but I wanted to show that we can rewrite things to different ways.

96
00:06:46.860 --> 00:06:52.460
I still prefer this one but not gives us flexibility and sometimes it is actually useful.

97
00:06:52.650 --> 00:06:57.570
But I just wanted to show we have flexibility all of this stuff can be rewritten multiple ways.

98
00:06:57.570 --> 00:06:59.770
There's still further ways we could rewrite this.

99
00:06:59.820 --> 00:07:01.150
We could nest instead.

100
00:07:01.260 --> 00:07:02.520
But I won't get into that for now.

101
00:07:02.640 --> 00:07:06.720
So that is not the third logical operator and or and not.
