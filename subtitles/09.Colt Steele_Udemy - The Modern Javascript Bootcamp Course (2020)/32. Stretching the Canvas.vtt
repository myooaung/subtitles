WEBVTT
1
00:00:00.630 --> 00:00:04.470
Well now that we've got just about everything working as expected let's start to think about how we're

2
00:00:04.470 --> 00:00:08.620
going to actually scale the entire game to fill up the entire screen.

3
00:00:08.640 --> 00:00:12.750
So I want to make sure that no matter what size browser window the user is using.

4
00:00:12.780 --> 00:00:18.400
I want this canvas to stretch from the very top left corner all the way down to the very bottom right.

5
00:00:18.690 --> 00:00:23.580
To do so we're going to add in once the ISIS rule and we're going to change a couple of different variables

6
00:00:23.610 --> 00:00:27.800
inside of our JavaScript file and just about all the logic is going to remain the same.

7
00:00:27.810 --> 00:00:33.270
We just have to make sure that at several different locations we respect a measurement in the y direction

8
00:00:33.300 --> 00:00:38.880
and x direction as opposed to what's going on right now where we just assume we always have an identical

9
00:00:39.090 --> 00:00:41.540
width and height no matter what.

10
00:00:41.630 --> 00:00:41.880
Okay.

11
00:00:41.910 --> 00:00:42.790
So first things first.

12
00:00:43.090 --> 00:00:45.630
What's what the CFS rule that I just mentioned.

13
00:00:45.640 --> 00:00:52.510
Well if you open up your element inspector and take a look at the body elements right now you might

14
00:00:52.510 --> 00:00:58.720
notice that the body by default has a margin of eight pixels on it that is preventing our canvas right

15
00:00:58.720 --> 00:01:03.210
here from getting truly to the top left corner of the browser window.

16
00:01:03.250 --> 00:01:08.170
So let's make sure that we can just remove that default margin on the body to do so.

17
00:01:08.170 --> 00:01:09.690
I'll go back over to my editor.

18
00:01:09.920 --> 00:01:12.430
I'm going to open up the index dot each to your mail file.

19
00:01:12.430 --> 00:01:15.500
Here it is right here in the head element.

20
00:01:15.550 --> 00:01:17.020
I'll add in a style tag

21
00:01:19.820 --> 00:01:27.730
and then inside there I'll select the body and set margin to zero that's going to remove that extra

22
00:01:27.740 --> 00:01:33.830
little bit of space around our canvas by now refresh I should see the canvas go truly up to the top

23
00:01:33.830 --> 00:01:35.670
left corner.

24
00:01:35.710 --> 00:01:35.980
All right.

25
00:01:35.980 --> 00:01:39.340
So now how are we going to make sure that this canvas fills up the entire screen.

26
00:01:39.370 --> 00:01:42.020
So from that corner down to the bottom right.

27
00:01:42.130 --> 00:01:46.810
Well if you take a look at your console really quickly I'm going to type out window right here.

28
00:01:46.810 --> 00:01:51.130
Remember this is our window object which is available to us by default when we are running javascript

29
00:01:51.130 --> 00:01:59.750
code inside the browser one or two properties at this window object has is window dot enter with and

30
00:01:59.750 --> 00:02:06.980
window dot inner height these two properties are going to give me the entire visible area or the dimensions

31
00:02:06.980 --> 00:02:09.500
of it that the user can see right now.

32
00:02:09.500 --> 00:02:14.510
So it's going to be from that top left corner just right underneath the back button all the way down

33
00:02:14.720 --> 00:02:17.570
to the bottom right corner of the viewable area.

34
00:02:17.570 --> 00:02:21.150
It does not include any space that is taken up by the console.

35
00:02:21.170 --> 00:02:27.670
So for example if I pull the console out and then try to get the width again I now get a width that

36
00:02:27.670 --> 00:02:30.180
is much greater than what I had just a moment ago.

37
00:02:30.250 --> 00:02:32.010
You can also see the inner height and width.

38
00:02:32.140 --> 00:02:36.560
If you are using Chrome as you drag around the console just look at the top left hand corner or see

39
00:02:36.580 --> 00:02:38.490
the top right hand corner right there.

40
00:02:38.500 --> 00:02:44.860
So as I pull over the console I'll see that the invisible area gets smaller and smaller so we're going

41
00:02:44.860 --> 00:02:49.870
to use window dot inner height and window dot inner width to figure out exactly how large we want our

42
00:02:49.870 --> 00:02:52.910
canvas to be to get started.

43
00:02:52.910 --> 00:02:58.610
I can go back over to my index dot J.S. file I got to find where we set up height in width right here

44
00:02:59.270 --> 00:03:02.650
and we will pull those values from the window object.

45
00:03:02.750 --> 00:03:11.690
It's also a window dot inner width is going to be with an window dot in her height is going to be height

46
00:03:13.410 --> 00:03:17.220
if I see this file right now and go back over and refresh.

47
00:03:17.220 --> 00:03:22.090
I will still see the maze appear and it's going to take up the full space available to us.

48
00:03:22.380 --> 00:03:26.790
If I close my concern now and then refresh again I'll see you that really does take up the entire browser

49
00:03:26.790 --> 00:03:27.720
window.

50
00:03:27.720 --> 00:03:32.700
However because of our maze logic which assumes we always have equal dimensions for the height and the

51
00:03:32.700 --> 00:03:36.630
width well the entire maze doesn't actually show up correctly.

52
00:03:36.630 --> 00:03:41.340
The ball is shown correctly and our square over here is showing correctly but the actual walls are not

53
00:03:41.340 --> 00:03:44.050
really placed in the appropriate locations.

54
00:03:44.050 --> 00:03:47.220
So it's clear that we're still going to have to do a little bit more work to figure out how to get this

55
00:03:47.220 --> 00:03:48.710
thing to work correctly.

56
00:03:48.900 --> 00:03:49.830
So pause right here.

57
00:03:49.850 --> 00:03:54.000
We're gonna come back the next video and discuss the big refactor they were going to do to a couple

58
00:03:54.000 --> 00:03:57.570
of different variables inside of here to get everything else working the way we expect.
