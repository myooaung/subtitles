WEBVTT
1
00:00:00.210 --> 00:00:06.570
So we saw that we can use a return statement to export or return a value so that we can capture it later

2
00:00:06.690 --> 00:00:08.670
in a variable or do something with it.

3
00:00:08.730 --> 00:00:14.100
But there's another thing you should know about return statements which is that they end function execution.

4
00:00:14.100 --> 00:00:19.320
So if you have a return statement in the middle of your function the code afterwards is not going to

5
00:00:19.320 --> 00:00:20.210
execute.

6
00:00:20.220 --> 00:00:27.900
For example if we have our function Square which takes a number and we want it to return x times x if

7
00:00:27.900 --> 00:00:29.670
that's the parameter.

8
00:00:29.670 --> 00:00:38.100
If I add some code afterwards like console that log all done and I try calling this function square

9
00:00:38.100 --> 00:00:46.710
of four I get 16 but this console that log never runs it's after this return statement.

10
00:00:46.820 --> 00:00:50.080
Whenever javascript encounters a return it just moves on.

11
00:00:50.090 --> 00:00:52.060
It's done with this function entirely.

12
00:00:52.070 --> 00:00:55.380
We can have 100 lines after this they would not run.

13
00:00:55.760 --> 00:01:02.180
But of course if we were using conditionals IF WE HAD TO IF statement around a return then it may not

14
00:01:02.180 --> 00:01:03.290
run every single time.

15
00:01:03.410 --> 00:01:09.170
So it's not a matter of if there is a return statement written anywhere in the function nothing afterwards

16
00:01:09.170 --> 00:01:09.860
runs.

17
00:01:09.860 --> 00:01:12.520
It's only if the return statement is executed.

18
00:01:12.530 --> 00:01:16.400
If this code is run which in our case it always is.

19
00:01:16.400 --> 00:01:23.180
But we could write something else like a very stupid function called is purple is purple takes a color

20
00:01:24.920 --> 00:01:35.510
as a parameter and we'll assume it to string and if color is triple equal to the string purple we will

21
00:01:35.510 --> 00:01:38.790
return true.

22
00:01:38.860 --> 00:01:45.410
I name this is purple which is a standard convention is something for a boolean method which returns

23
00:01:45.440 --> 00:01:47.040
True or false.

24
00:01:47.120 --> 00:01:52.080
So we have true or false or returning true if color is triple equal to purple.

25
00:01:52.520 --> 00:01:56.300
If it's not equal to purple we could return false.

26
00:01:56.300 --> 00:02:01.340
So we have to return statements but only one of them is going to run if color is purple.

27
00:02:01.340 --> 00:02:05.930
This will run and let's actually make it a little more case insensitive.

28
00:02:06.170 --> 00:02:09.610
So why don't we to lower case color.

29
00:02:10.100 --> 00:02:16.130
So if someone passes in purple in all caps we'll compare it first by lower casing it to all lowercase

30
00:02:16.190 --> 00:02:18.600
and then comparing it to purple.

31
00:02:18.680 --> 00:02:19.070
All right.

32
00:02:19.070 --> 00:02:25.910
So is purple of Blue is false is purple of purple.

33
00:02:25.910 --> 00:02:26.480
It's true.

34
00:02:28.460 --> 00:02:29.770
Ups.

35
00:02:30.230 --> 00:02:31.090
All caps.

36
00:02:31.130 --> 00:02:32.680
We still get true.

37
00:02:32.810 --> 00:02:37.400
So this is not the best way of writing this function and we'll talk about how we could refactor it in

38
00:02:37.400 --> 00:02:38.540
a moment.

39
00:02:38.540 --> 00:02:41.290
Ignoring the fact that it's not even a useful function at all.

40
00:02:41.300 --> 00:02:43.320
Not even remotely useful.

41
00:02:43.370 --> 00:02:48.110
We do have to return statements only one of them is going to run but as soon as one of them does run

42
00:02:48.500 --> 00:02:49.880
the rest of the code stops.

43
00:02:50.180 --> 00:02:53.580
So in this if if I had a console that log.

44
00:02:53.600 --> 00:02:55.090
Yay.

45
00:02:55.370 --> 00:02:56.930
That's never going to run ever.

46
00:02:56.930 --> 00:03:03.650
There is no scenario where this runs because either this is true and we're returning which stops the

47
00:03:03.650 --> 00:03:06.800
execution of the function completely or it's false.

48
00:03:06.800 --> 00:03:10.290
And so this entire chunk is skipped and removed right to here.

49
00:03:10.310 --> 00:03:14.900
If I try is purple with purple we don't get it.

50
00:03:16.400 --> 00:03:22.940
OK so I mentioned there are other ways of writing this for especially for a simple if else a simple

51
00:03:22.940 --> 00:03:23.600
yes or no.

52
00:03:24.170 --> 00:03:29.600
We can rewrite this function a couple of different ways and when I copy this the first improvement we

53
00:03:29.600 --> 00:03:35.480
can make is to remove the else entirely because of the way return statements work.

54
00:03:35.480 --> 00:03:42.860
What we just talked about where they end function execution the only way to get to this line is if this

55
00:03:42.860 --> 00:03:47.790
is false because we're returning true in here execution stops.

56
00:03:47.810 --> 00:03:50.690
So if color is purple we're done.

57
00:03:50.690 --> 00:03:51.980
Function over.

58
00:03:51.980 --> 00:03:56.450
If it's not this is the only way we would ever return false.

59
00:03:56.450 --> 00:03:58.730
So it's just a shorter way of writing this.

60
00:03:58.730 --> 00:04:02.990
You'll see people write functions like this that take advantage of the fact that a return statement

61
00:04:03.320 --> 00:04:05.450
stops a function.

62
00:04:05.490 --> 00:04:07.190
OK so this is one way of doing it.

63
00:04:07.190 --> 00:04:13.460
We can just run the code again make sure it still works is purple of purple is true is purple of anything

64
00:04:13.460 --> 00:04:15.310
else is false.

65
00:04:15.410 --> 00:04:19.730
We don't have an else now there's actually an even shorter way of writing this where we could basically

66
00:04:19.730 --> 00:04:21.280
do it on one line.

67
00:04:21.560 --> 00:04:29.340
If we're just returning a Boolean true or false we can simply return this right here return color dot

68
00:04:29.360 --> 00:04:32.990
to lowercase triple equals purple.

69
00:04:32.990 --> 00:04:35.430
This right here is a boolean expression.

70
00:04:35.660 --> 00:04:38.690
Triple equals will give us true or false.

71
00:04:38.690 --> 00:04:44.150
So if I have let's say color is pink I would call Pink Dot to lowercase

72
00:04:47.120 --> 00:04:48.320
triple equals purple.

73
00:04:48.350 --> 00:04:56.650
That's false but if color is purple even if it's capitalized oddly it still gives us true.

74
00:04:56.690 --> 00:05:00.840
So we're going to return this value and that will be true or false.

75
00:05:00.860 --> 00:05:02.330
This evaluates first.

76
00:05:02.330 --> 00:05:06.300
Then it's returned so it's just another way of writing it.

77
00:05:06.320 --> 00:05:07.840
We only need one return.

78
00:05:07.940 --> 00:05:10.060
Now this only works for a yes or no.

79
00:05:10.130 --> 00:05:12.210
Simple situation like we have here.

80
00:05:12.260 --> 00:05:14.750
What if we wanted to check if color is purple.

81
00:05:14.870 --> 00:05:16.120
We want to return true.

82
00:05:16.250 --> 00:05:19.310
And if color is like we want to return true.

83
00:05:19.310 --> 00:05:20.950
Anything else is false.

84
00:05:21.050 --> 00:05:22.450
We would need to rewrite this.

85
00:05:22.490 --> 00:05:24.250
It would be harder to do in a single line.

86
00:05:25.430 --> 00:05:26.940
And let's do one more example.

87
00:05:26.970 --> 00:05:32.820
I want to show how a return will stop a function no matter where it's located in that function.

88
00:05:32.940 --> 00:05:35.580
So it could be instead of a loop instead of a conditional.

89
00:05:35.730 --> 00:05:40.480
It doesn't matter so we'll do a slightly more advanced version of is purple.

90
00:05:40.530 --> 00:05:47.880
Let's go with contains purple and this will accept an array and we will loop over the array and if any

91
00:05:47.880 --> 00:05:53.360
element in that array is either purple or magenta we'll return true.

92
00:05:53.370 --> 00:05:55.080
Otherwise we return false.

93
00:05:55.080 --> 00:06:06.690
So we'll loop over the array for let's color of array we'll use it for of if color is triple equal purple

94
00:06:08.250 --> 00:06:12.330
or color is triple equal said magenta.

95
00:06:12.330 --> 00:06:18.480
I think this magenta purple or is it pink for our purposes for considering it purple.

96
00:06:18.480 --> 00:06:22.480
If that's the case we'll return true.

97
00:06:23.870 --> 00:06:26.190
And then where would we return false.

98
00:06:26.190 --> 00:06:31.050
This one's a bit different if we put return false here or else return false.

99
00:06:31.350 --> 00:06:38.070
Then as soon as we encounter something that's not purple let's say our array looks like this blue pink

100
00:06:39.030 --> 00:06:40.890
magenta.

101
00:06:40.890 --> 00:06:43.770
The first time through the loop color will be blue.

102
00:06:43.770 --> 00:06:47.460
So this is not true and we don't want to return false right away.

103
00:06:47.460 --> 00:06:49.350
That stops the function entirely.

104
00:06:49.350 --> 00:06:51.300
We're only checking the first element.

105
00:06:51.360 --> 00:06:57.510
The only time we know that the entire array does not contain purple is if the loop is finished.

106
00:06:57.510 --> 00:07:02.820
So if the loop is done and we haven't returned true that means we never found purple or magenta as an

107
00:07:02.820 --> 00:07:03.690
element.

108
00:07:03.690 --> 00:07:05.270
Then we can return false.

109
00:07:05.280 --> 00:07:07.680
So we just move it down there.

110
00:07:07.800 --> 00:07:11.050
So let's test it out contains Purple.

111
00:07:11.050 --> 00:07:12.290
I'll paste that array in.

112
00:07:12.300 --> 00:07:19.230
I do need to make sure I get rid of the semicolon add my parents and we get true if we change this to

113
00:07:19.230 --> 00:07:20.630
no longer be magenta.

114
00:07:20.730 --> 00:07:23.580
We get false so this is showing us two things.

115
00:07:23.610 --> 00:07:28.590
First of all when we return true it doesn't matter that we're instead of a conditional instead of a

116
00:07:28.590 --> 00:07:30.530
loop instead of a function.

117
00:07:30.810 --> 00:07:35.610
The function is done at least this single execution of it when we called it with this array.

118
00:07:35.910 --> 00:07:36.450
It's done.

119
00:07:36.450 --> 00:07:42.830
It returns true so it's not like a return is only going to break out of one code block.

120
00:07:43.020 --> 00:07:48.540
It has the power to halt the entire function even though it's in a conditional in a loop.

121
00:07:48.540 --> 00:07:54.930
So this loop might run one time if the first element is purple or magenta or it might run 100 times.

122
00:07:54.930 --> 00:08:00.780
If our elements or if our array is one hundred items long with no instance of purple or magenta and

123
00:08:00.780 --> 00:08:08.070
the second thing we saw once again is returning false or returning some value as a last ditch has basically

124
00:08:08.070 --> 00:08:09.360
the last option.

125
00:08:09.360 --> 00:08:10.980
The last line in this function.

126
00:08:10.980 --> 00:08:16.110
So if none of this return true at any point that means we've gone through the entire loop then just

127
00:08:16.110 --> 00:08:17.520
return false.

128
00:08:17.520 --> 00:08:19.100
We don't have to add additional logic.

129
00:08:19.110 --> 00:08:19.620
We don't need an.

130
00:08:19.620 --> 00:08:21.140
Else we just know.

131
00:08:21.150 --> 00:08:22.660
If you haven't returned by now.

132
00:08:22.890 --> 00:08:24.420
This is what we want to return.

133
00:08:24.450 --> 00:08:27.390
So if this is true the function is done and this never runs.

134
00:08:27.510 --> 00:08:31.250
If we never return true then this runs.

135
00:08:31.280 --> 00:08:34.390
OK so we've seen the basics of functions at this point.

136
00:08:34.470 --> 00:08:36.840
We define a function at least one version.

137
00:08:37.260 --> 00:08:42.170
All we've seen is the function syntax function statement or function declaration.

138
00:08:42.210 --> 00:08:43.350
We have function.

139
00:08:43.470 --> 00:08:47.300
Some function name potentially different parameters.

140
00:08:47.310 --> 00:08:51.510
We would add in a and b and then some return value.

141
00:08:51.510 --> 00:08:54.450
And you don't have to return a value from every single function.

142
00:08:54.570 --> 00:09:00.600
But a lot of the time you want to and we'll see a bunch of examples coming up because it's time to get

143
00:09:00.600 --> 00:09:01.410
some practice.
