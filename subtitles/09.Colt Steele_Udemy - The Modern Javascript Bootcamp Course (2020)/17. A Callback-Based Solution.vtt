WEBVTT
1
00:00:00.710 --> 00:00:00.970
All right.

2
00:00:00.980 --> 00:00:05.500
In this video we're going to go through the entire solution for this still callback kind of approach.

3
00:00:05.540 --> 00:00:09.230
We're gonna go through it rather quickly because like I said this is not super ideal.

4
00:00:09.260 --> 00:00:12.220
I just want you have an idea of how we would put this solution together.

5
00:00:12.320 --> 00:00:13.890
So let's get to it.

6
00:00:13.900 --> 00:00:15.280
I'm gonna go back over to my editor.

7
00:00:15.350 --> 00:00:20.030
I'm going to remove the two bad code comments I have inside of here just to clean things up a little

8
00:00:20.030 --> 00:00:23.980
bit and I'll create an array called all stats.

9
00:00:24.050 --> 00:00:27.680
So again this is going to be an array that starts off with all no values.

10
00:00:27.770 --> 00:00:33.720
And we're going to over time throw in our actual stat objects to it to create a array that starts off

11
00:00:33.720 --> 00:00:37.370
with a bunch of no values equal to the number of file names we have.

12
00:00:37.370 --> 00:00:44.830
I mean he is a little trickier going to say array file names dot length than dot Phil.

13
00:00:44.840 --> 00:00:47.270
No like I said little trick.

14
00:00:47.270 --> 00:00:53.510
This creates an array with a length equal to the file names array and then I'm going to fill every value

15
00:00:53.570 --> 00:00:57.120
or every index inside there with the value of No.

16
00:00:57.170 --> 00:01:03.350
So because I have four file names because I've got one two three four file entities right here I know

17
00:01:03.350 --> 00:01:05.260
that I'm going to get as a result.

18
00:01:05.300 --> 00:01:07.630
No no no.

19
00:01:07.640 --> 00:01:11.890
And I'll just like we saw on the diagram a moment ago OK.

20
00:01:11.930 --> 00:01:16.910
So now inside of our for loop the first we have to do is get the index of the file name that we are

21
00:01:16.910 --> 00:01:21.740
working with right before the L stack call.

22
00:01:21.820 --> 00:01:31.640
I'm going to add in index is file names dot index of file name with a for of loop by default we don't

23
00:01:31.640 --> 00:01:34.730
have easy access to the index of the element we are iterating over.

24
00:01:34.940 --> 00:01:39.720
So we're using this line right here to figure out what the index of this given file is.

25
00:01:39.850 --> 00:01:48.020
So then inside the L stack call I'm going to delete that console log I'm going to take my all stats

26
00:01:48.020 --> 00:01:52.480
array and I'm going to update the element at this given index.

27
00:01:52.520 --> 00:01:59.750
So I'll say all stats at index is going to be the data that we just got back inside of the L stat function.

28
00:01:59.750 --> 00:02:06.510
So the stats object right there so again just like we saw in that diagram a moment ago this is where

29
00:02:06.510 --> 00:02:08.790
we're taking the data that was passed to our callback.

30
00:02:08.790 --> 00:02:13.710
We're going to go to the appropriate index and throw the stats object in there replacing the existing

31
00:02:13.770 --> 00:02:15.630
no value.

32
00:02:15.870 --> 00:02:20.730
Now every single time after we do that update right there we then need to iterate over the all stats

33
00:02:20.730 --> 00:02:21.300
array.

34
00:02:21.420 --> 00:02:26.600
We're going to check to see if there are any null values left if there is a no value.

35
00:02:26.610 --> 00:02:30.720
That means we're still waiting on some data if there is not a null value that means we have all the

36
00:02:30.720 --> 00:02:31.750
data we expect to get.

37
00:02:31.770 --> 00:02:36.490
And it's time to go ahead and try to do some processing.

38
00:02:36.620 --> 00:02:40.160
So for that we're going to use once again a little trickier.

39
00:02:40.170 --> 00:02:47.980
I'm going to use the all stats dot every function the every function is built into every single array

40
00:02:49.390 --> 00:02:52.940
if we call every we can pass in an iterator function to this thing.

41
00:02:52.980 --> 00:02:58.270
So we'll pass in a little iterator function like so the inner function is then going to be called for

42
00:02:58.270 --> 00:03:02.320
every element inside of all stats from this inner function.

43
00:03:02.350 --> 00:03:09.340
We're going to return a boolean value if every single inner function every single invocation of it returns

44
00:03:09.340 --> 00:03:14.290
true then every overall this entire statement is going to evaluate to true.

45
00:03:14.440 --> 00:03:20.800
Otherwise if any of the inner function invocations return a false value then the entire expression will

46
00:03:20.800 --> 00:03:22.670
return false instead.

47
00:03:22.690 --> 00:03:28.210
So this is a perfect use case for what we're trying to do here we're trying to see if any value inside

48
00:03:28.210 --> 00:03:29.620
of all stats is equal to null.

49
00:03:30.460 --> 00:03:36.850
So if we ever return a false value from every that means that we are not yet ready to do some processing

50
00:03:36.880 --> 00:03:42.090
of our data go inside if you're going to take the stats variable.

51
00:03:42.090 --> 00:03:46.430
So I can accept that as an argument and I'm just going to return stats.

52
00:03:46.580 --> 00:03:51.820
Remember stats is going to be a null value or our actual object.

53
00:03:51.940 --> 00:03:54.440
So null by default is a false value.

54
00:03:54.440 --> 00:04:01.590
So if I ever return null that means that the every statement is going to overall evaluate to false so

55
00:04:01.820 --> 00:04:08.850
we can then assign that to a variable that I'll call maybe ready or something and we'll say if ready.

56
00:04:09.200 --> 00:04:16.160
That means we are ready to do our final step of processing so for our final step of processing we can

57
00:04:16.190 --> 00:04:19.050
iterate over all stats with a for each.

58
00:04:19.050 --> 00:04:28.690
So I'll say all stats or each inside of here I'm going to take my stats object.

59
00:04:28.780 --> 00:04:36.480
So each individual stats object and its index there's one reason we're pulling in the index right here.

60
00:04:36.530 --> 00:04:37.800
And it's kind of an awkward one.

61
00:04:37.820 --> 00:04:42.110
It turns out that these stats object we're working with doesn't actually have a reference back to the

62
00:04:42.230 --> 00:04:44.060
file name that it belongs to.

63
00:04:44.090 --> 00:04:50.150
So we know the stats of a file but we don't know what these stats are actually for the reason that we're

64
00:04:50.150 --> 00:04:55.280
pulling out the index right here is so we can go back into the file names array and pull out the original

65
00:04:55.280 --> 00:04:56.770
file name.

66
00:04:56.880 --> 00:05:02.600
We can not just make reference to the file name variable inside of here directly because remember the

67
00:05:02.610 --> 00:05:07.170
finally variable is going to be changing over time every single time that we run this for loop.

68
00:05:07.170 --> 00:05:09.690
We are changing the value of file name.

69
00:05:09.840 --> 00:05:14.370
That means that if we just tried to do a console log a file name right here we're going to see the same

70
00:05:14.370 --> 00:05:18.840
value four times over as a matter of fact let's just try that out really quickly and I'll just prove

71
00:05:18.840 --> 00:05:19.360
it to you.

72
00:05:20.150 --> 00:05:26.190
So do a console log a file name going to go back over and run and alas.

73
00:05:26.240 --> 00:05:27.050
And there we go.

74
00:05:27.050 --> 00:05:31.220
So I see the same file name four times over again because we're referencing the same variable right

75
00:05:31.220 --> 00:05:34.980
here that's why we're pulling in index.

76
00:05:34.980 --> 00:05:41.500
So inside of you I'll do a console log file names at index that will give me the correct file name and

77
00:05:41.500 --> 00:05:45.930
then stats dot is file.

78
00:05:45.940 --> 00:05:46.210
All right.

79
00:05:46.230 --> 00:05:50.090
So let's save this a flip back over and allez.

80
00:05:50.290 --> 00:05:51.070
And there we go.

81
00:05:51.070 --> 00:05:53.790
So I get empty folder false and then future true.

82
00:05:53.800 --> 00:06:00.080
And more importantly every single time I run this I get the exact same order back.

83
00:06:00.130 --> 00:06:00.330
All right.

84
00:06:00.340 --> 00:06:03.550
So I know that we sped through that rather quickly and there might be one or two things inside here

85
00:06:03.550 --> 00:06:09.290
that are kind of confusing but like I said I just want to very quickly give you a overview of this solution.

86
00:06:09.310 --> 00:06:10.730
It's not the best way of doing this.

87
00:06:10.840 --> 00:06:16.450
Again it's not the best way because if we ever decide to add in some additional asynchronous call here

88
00:06:16.780 --> 00:06:22.090
like maybe after doing an el SAP we then want to open up some other file that is relevant or maybe for

89
00:06:22.090 --> 00:06:26.290
every folder we want to open up the folder and find the files inside there as soon as we start to add

90
00:06:26.290 --> 00:06:27.700
in any additional complexity.

91
00:06:27.700 --> 00:06:33.350
This entire kind of solution starts to fall apart because it just gets way too confusing.

92
00:06:33.370 --> 00:06:34.800
Now we've seen this approach.

93
00:06:34.840 --> 00:06:35.790
Let's take a quick pause.

94
00:06:35.800 --> 00:06:40.080
We'll come back the next video and start to discuss solution number two.

95
00:06:40.120 --> 00:06:41.580
So I'll see you in just a minute.
