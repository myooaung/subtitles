1
00:00:01,340 --> 00:00:03,430
We've now got an implementation of for each.

2
00:00:03,440 --> 00:00:07,820
And we are reasonably confident that it works the way we expect because we have a test inside of our

3
00:00:07,820 --> 00:00:13,090
index test JSF file it's now jammed in a little bit more code to our project.

4
00:00:13,090 --> 00:00:15,420
Let's try to implement another function.

5
00:00:15,460 --> 00:00:20,140
I want to try to implement another function that we are already familiar with and is also present inside

6
00:00:20,140 --> 00:00:21,490
the load Ash library.

7
00:00:21,490 --> 00:00:25,680
So I'm back here at the documentation once again I'm gonna take a look at the map function.

8
00:00:26,320 --> 00:00:30,490
So this is the same kind of map function that we've used throughout the course the same kind of map

9
00:00:30,490 --> 00:00:33,580
function that is built into all JavaScript arrays.

10
00:00:33,640 --> 00:00:38,560
Remember load Ash was created before map belong to a race in the job script language and that's why

11
00:00:38,560 --> 00:00:40,550
this library has it defined.

12
00:00:40,870 --> 00:00:45,860
So we're going to re implement map from scratch with the same kind of style you see right here.

13
00:00:45,880 --> 00:00:49,580
Yes we could absolutely use the map function built into our JavaScript arrays.

14
00:00:49,630 --> 00:00:51,420
So what we're doing here is kind of pointless.

15
00:00:51,430 --> 00:00:57,660
But again we're just doing it to have something to actually test the way that the load Ash map function

16
00:00:57,660 --> 00:01:01,850
works is let's go down a little bit see an example.

17
00:01:01,860 --> 00:01:04,710
So we're going to pass in an array.

18
00:01:04,710 --> 00:01:10,050
The second argument is going to be some function that we want to run on every element in that array.

19
00:01:10,050 --> 00:01:15,280
So in this case they're passing on the square function whatever it gets returned from that second argument

20
00:01:15,280 --> 00:01:19,540
or that function right there when it gets called is going to be used to assemble a brand new Array.

21
00:01:20,110 --> 00:01:22,810
So in this case you'll see they put in four and eight.

22
00:01:22,870 --> 00:01:27,700
So that means that the value for is going to go into square they're going to multiply four by four and

23
00:01:27,700 --> 00:01:32,180
they end up getting sixteen as then returned from the square function.

24
00:01:32,230 --> 00:01:37,960
So internally map is going to collect that new value and add it to a brand new Array.

25
00:01:37,960 --> 00:01:43,240
That same process gets very heated for the number eight eight times eight is 64.

26
00:01:43,300 --> 00:01:48,520
And so the sum total or the output of the map function in this case would be 16 and 64.

27
00:01:48,610 --> 00:01:50,260
So again that is a new array.

28
00:01:50,440 --> 00:01:56,890
It has all the different values after they've been processed by the square function let's start to implement

29
00:01:56,890 --> 00:01:59,000
this back inside of our project as well.

30
00:01:59,790 --> 00:02:03,570
But you know what this time around let's do things a little bit differently.

31
00:02:03,820 --> 00:02:09,910
Rather than writing out an implementation of our map function inside of index J.S. let's try to instead

32
00:02:10,150 --> 00:02:16,480
write out a test first and that might sound crazy because hey we don't really know how the map function

33
00:02:16,510 --> 00:02:17,680
is going to be put together.

34
00:02:17,720 --> 00:02:18,400
That's true.

35
00:02:18,400 --> 00:02:21,330
We don't really know how we're going to write out the map function.

36
00:02:21,430 --> 00:02:26,720
However we do know exactly what arguments the map function requires.

37
00:02:26,890 --> 00:02:32,780
And chances are we can guess what different output it is going to return so when we write out tests

38
00:02:32,810 --> 00:02:36,650
we don't really care so much about the internal implementation of a chunk of code.

39
00:02:36,770 --> 00:02:42,430
All we really care about is knowing what goes into it and what should come out with that knowledge alone.

40
00:02:42,500 --> 00:02:47,630
We should be able to write a test to make sure that map works the way we expect so let's try to write

41
00:02:47,630 --> 00:02:51,640
out a test first inside of our index not test out j ust file.

42
00:02:51,650 --> 00:02:57,740
So I'm going to first try to require in a map function from index that map function doesn't exist yet.

43
00:02:57,740 --> 00:02:59,740
So we're definitely going to have to define it.

44
00:02:59,780 --> 00:03:01,070
We'll do that in just a moment.

45
00:03:01,070 --> 00:03:02,520
Well let's write out some tests for it first.

46
00:03:04,840 --> 00:03:09,700
So down underneath our existing test I'm going to create a new array of numbers once again.

47
00:03:09,700 --> 00:03:14,470
So I call this how about what we call the original one we didn't actually assign to a variable let's

48
00:03:14,470 --> 00:03:16,180
just call a map directly.

49
00:03:16,180 --> 00:03:22,520
I'm gonna put in an array of 1 2 and 3 again I'll then put in my iterator function that's going to receive

50
00:03:22,550 --> 00:03:24,260
every value inside there.

51
00:03:24,380 --> 00:03:27,350
So let's try to do something really similar to that load Ash function.

52
00:03:27,440 --> 00:03:37,160
I'm going to take the value I'm going to return value times to so when we call map we should get back

53
00:03:37,160 --> 00:03:43,800
a result that are assigned to a variable result and results should look something like this should be

54
00:03:43,800 --> 00:03:53,040
something equal to 2 4 and 6 so let's now write out some code to make sure that is the case make sure

55
00:03:53,040 --> 00:03:57,330
that's the case with some code we can just do a series of IF statements like what we had up here.

56
00:03:57,330 --> 00:04:07,340
So let's say if result at zero is not equal to two then let's throw an error has something just went

57
00:04:07,340 --> 00:04:10,370
wrong it means that we did not put our map statement together correctly.

58
00:04:10,670 --> 00:04:20,370
So throw a new error like expected to find two but found and then we could use some string interpolation

59
00:04:20,370 --> 00:04:25,110
here to put the actual value that we found that would make it just a little bit easier for us to debug

60
00:04:25,170 --> 00:04:30,280
if we ever saw this error at our terminal so in order to get a value inside there are to replace the

61
00:04:30,280 --> 00:04:37,320
single quotes with back to X and then at the very end I'll put results at zero.

62
00:04:37,420 --> 00:04:44,260
Now we can repeat this process so I will copy that if statement down twice for the second if statement

63
00:04:44,440 --> 00:04:51,230
I'll check results at 1 so at that index it should be four for I'll update the a little check right

64
00:04:51,230 --> 00:04:51,880
there.

65
00:04:54,020 --> 00:04:56,160
And then finally on the third one we'll check resulted.

66
00:04:56,160 --> 00:05:01,770
Two that one should be six and I'll update the text inside of our little message as well.

67
00:05:04,060 --> 00:05:04,330
All right.

68
00:05:04,360 --> 00:05:08,160
So we now have a test to make sure that map works the way we expect.

69
00:05:08,170 --> 00:05:13,060
So now we can go back over to our terminal and run this test of course once we do so we're gonna see

70
00:05:13,060 --> 00:05:14,380
a very big error really quickly.

71
00:05:14,380 --> 00:05:18,100
Something like math is not a function because we haven't even defined that function yet.

72
00:05:18,460 --> 00:05:23,740
But we at least now have something that we can run again and again specifically this test file to kind

73
00:05:23,740 --> 00:05:27,430
of gauge our progress and make sure that we are implementing the map function correctly.

74
00:05:27,670 --> 00:05:32,950
And by the end when we actually have implemented this thing in its entirety we will have some block

75
00:05:32,950 --> 00:05:33,650
of code.

76
00:05:33,670 --> 00:05:41,460
So like this stuff right here that will verify that the map function works as expected for all time.

77
00:05:41,560 --> 00:05:46,240
Let's now go back over to our index dot just file we'll take a stab at implementing this map function

78
00:05:47,740 --> 00:05:48,530
back over here.

79
00:05:48,550 --> 00:05:55,070
I'm gonna put in a second property into my object called map so this will also be called with some array

80
00:05:55,250 --> 00:06:01,450
and some function so inside of here we're gonna take a very similar approach to what we just did inside

81
00:06:01,450 --> 00:06:07,740
of our for each so we're going to write out a for loop a real simple basic one like that right there

82
00:06:08,150 --> 00:06:12,660
we're going to iterate over every value inside of our array and for every value we're gonna call that

83
00:06:12,870 --> 00:06:14,230
callback function.

84
00:06:14,520 --> 00:06:19,410
But this time around we're going to receive whatever the callback function returns and add it into a

85
00:06:19,440 --> 00:06:20,660
brand new Array.

86
00:06:20,850 --> 00:06:26,070
So let's write out the implementation really quickly at the very top I'll say results is going to be

87
00:06:26,070 --> 00:06:26,810
an empty array.

88
00:06:26,820 --> 00:06:30,960
So this is going to be the new array of values that we're going to add to as we iterate through our

89
00:06:30,960 --> 00:06:42,560
array I'll then do a four let I equals zero I less than error length plus plus.

90
00:06:42,650 --> 00:06:50,780
Well then do you just as we had before F N will pass in a r at I and as the second argument we'll throw

91
00:06:50,780 --> 00:06:52,080
in the index as well.

92
00:06:54,110 --> 00:06:58,390
And now because this is a map statement we're going to take whatever gets returned from that's an added

93
00:06:58,480 --> 00:06:59,900
into our results array.

94
00:06:59,950 --> 00:07:05,440
So I will wrap that entire statement with result thought push.

95
00:07:05,490 --> 00:07:14,130
And then finally after the for loop we can't return that new array of results so there's our implementation.

96
00:07:14,210 --> 00:07:18,410
Now once again if we were back like anywhere else inside this course to test this out we would have

97
00:07:18,410 --> 00:07:23,300
gone down here and written out like Okay let's call a map with 1 2 3 let's do whatever.

98
00:07:23,300 --> 00:07:27,530
And then eventually just do a console log and we would have to go to our terminal and verify that that

99
00:07:27,530 --> 00:07:33,670
console lock were correctly instead let's just run the test file that we already put together.

100
00:07:33,670 --> 00:07:35,430
So I'll go back over to my terminal.

101
00:07:35,560 --> 00:07:40,810
I'm going to rerun node index dot test dot J.S. and I don't see any error whatsoever.

102
00:07:40,870 --> 00:07:41,940
What does that mean.

103
00:07:41,950 --> 00:07:44,930
It means that the code we just wrote worked perfectly.

104
00:07:44,960 --> 00:07:49,630
Now in order to make sure that our test here isn't like a fluke or anything like that we could go back

105
00:07:49,630 --> 00:07:54,490
over to our map statement and tried to introduce a bug to this thing on purpose.

106
00:07:54,490 --> 00:08:00,860
The reason we would do this is to make sure that our code actually works as expected so I might change

107
00:08:00,860 --> 00:08:04,310
the let I equals zero right here to let I equals 1.

108
00:08:04,310 --> 00:08:06,720
So now we're not going to iterate through the whole array.

109
00:08:06,770 --> 00:08:10,690
So I would now expect to see my test back inside of index not test.

110
00:08:10,700 --> 00:08:13,180
J.S. I would expect to see a failure over here.

111
00:08:13,190 --> 00:08:14,780
I would expect to see something go wrong.

112
00:08:15,650 --> 00:08:19,460
That can go back to my internal rerun and sure enough I do see an error.

113
00:08:19,750 --> 00:08:23,710
So I expected to find two but found four instead.

114
00:08:23,740 --> 00:08:29,680
So now we know or we have some level of confidence that our test is working as expected because we introduced

115
00:08:29,680 --> 00:08:33,310
a bug if we ever run a test and we don't see any errors at all.

116
00:08:33,370 --> 00:08:38,770
It kind of makes you have to think well did the test actually run did actually work as expected.

117
00:08:38,770 --> 00:08:43,480
And so very commonly when we run some testing code or write a test for the very first time we will introduce

118
00:08:43,480 --> 00:08:48,610
a bug just to make sure that yeah the test actually is running okay.

119
00:08:48,620 --> 00:08:49,700
So this looks pretty good.

120
00:08:49,700 --> 00:08:55,480
So we've got a working implementation of that so at this point we've gone through and tested two different

121
00:08:55,480 --> 00:09:00,360
functions and we wrote out the test for them in this separate companion file.

122
00:09:00,370 --> 00:09:03,060
Now this approach it definitely works right.

123
00:09:03,070 --> 00:09:08,080
We have proven that we can run some code inside this other file to make sure that our main application

124
00:09:08,350 --> 00:09:09,790
works as expected.

125
00:09:09,790 --> 00:09:12,730
But there are some very big downsides to this approach.

126
00:09:12,760 --> 00:09:17,950
So in the next video I'm going to outline some big issues with our current approach of testing and we're

127
00:09:17,950 --> 00:09:23,380
going to learn how we can fix it first by making a couple of changes to our project and then by eventually

128
00:09:23,380 --> 00:09:25,880
using an outside testing library as well.

129
00:09:26,080 --> 00:09:28,470
So quick pause right here and I'll see you in just a minute.
