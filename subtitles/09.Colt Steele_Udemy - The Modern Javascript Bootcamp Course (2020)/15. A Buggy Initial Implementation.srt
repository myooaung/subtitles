1
00:00:01,050 --> 00:00:05,410
All right now that we understand what we're trying to do let's go back over to our next hour J.S. file.

2
00:00:05,410 --> 00:00:08,220
We're going to iterate over our file names array right here.

3
00:00:08,260 --> 00:00:13,000
And for every file name we're going to run that El stat function will then decide whether or not the

4
00:00:13,000 --> 00:00:16,540
file is a file or a folder and then do the appropriate console log.

5
00:00:16,850 --> 00:00:20,820
So to get started I'm going to remove the console log file names right there.

6
00:00:20,950 --> 00:00:23,070
We're going to start to write out a little code here.

7
00:00:23,080 --> 00:00:27,100
Now before we write any code I want to tell you right away that I'm going to show you how to do this

8
00:00:27,310 --> 00:00:29,670
the incorrect way with L stats.

9
00:00:29,710 --> 00:00:33,500
So I going to write out some bad code here.

10
00:00:33,600 --> 00:00:37,740
The reason I want to show you this bad code is that I can almost guarantee you that if you were working

11
00:00:37,740 --> 00:00:38,960
on this project on your own.

12
00:00:38,970 --> 00:00:43,570
As we get her you might write out some code very similar to what I'm about to show you.

13
00:00:43,590 --> 00:00:48,330
So I going to first show you the bad way of doing this stuff and then we're going to point out why this

14
00:00:48,330 --> 00:00:53,220
code is bad and then very quickly refactor it into a way more appropriate way.

15
00:00:53,700 --> 00:00:58,020
So I just wanna be really clear that bad code is starting right now because I know it's really annoying

16
00:00:58,020 --> 00:01:02,580
if you ever hear in a video like write out a bunch of code and then you hear oh yeah we would never

17
00:01:02,580 --> 00:01:06,090
actually write out code like this it just makes life really confusing.

18
00:01:06,090 --> 00:01:10,620
So we're gonna start bad code right here and I'm going to be very clear in telling you where we are

19
00:01:10,620 --> 00:01:12,150
done writing bad code.

20
00:01:12,600 --> 00:01:12,860
Okay.

21
00:01:12,870 --> 00:01:15,540
So let's get to it underneath that comment.

22
00:01:15,570 --> 00:01:20,140
I'm going to iterate over my file names array with a for of loop.

23
00:01:20,190 --> 00:01:29,760
So I'll say for let's file name of file names and then inside of here I'm going to make use of the L

24
00:01:29,760 --> 00:01:30,910
stat function.

25
00:01:31,020 --> 00:01:39,220
So we'll say F S dot l stat I'll put in the file name and then the second argument which is going to

26
00:01:39,220 --> 00:01:45,460
be a callback function that gets invoked with an air object if one occurred and our stats object which

27
00:01:45,460 --> 00:01:51,000
is that instance of the class that we just took a look at a moment ago then inside of here I'll say

28
00:01:51,060 --> 00:01:59,050
if air let's just do a console log of that error again we're going to take the easy way out here otherwise

29
00:01:59,260 --> 00:02:06,490
I'll do a console log of the file name and whether or not it is actually a file or a folder so I'll

30
00:02:06,490 --> 00:02:13,750
do a console log of the file name and then the second argument to the console log I'm going to print

31
00:02:13,750 --> 00:02:19,670
out true if this thing is a file remember we just took a look at that stats object a second ago we saw

32
00:02:19,670 --> 00:02:25,220
that it has years FSI dot stats we saw that it has the is file method on it.

33
00:02:25,270 --> 00:02:27,650
So that's how we're going to print out either true or false.

34
00:02:27,680 --> 00:02:34,130
This thing is a file or not it's all say stats dot is file okay.

35
00:02:34,170 --> 00:02:39,130
So that ends bad code I say like bad code complete.

36
00:02:39,220 --> 00:02:44,180
So we're going to run this code we're gonna see why it is not quite working as intended.

37
00:02:44,200 --> 00:02:49,100
We're kind of not as intended and we'll very quickly start to refactor it.

38
00:02:49,120 --> 00:02:51,060
I just want to point out here that what we've written so far.

39
00:02:51,070 --> 00:02:53,320
Kind of like in general looks reasonable right.

40
00:02:53,320 --> 00:02:58,710
It doesn't look that weird and that's why I specifically want to show you why this is not super ideal.

41
00:02:59,180 --> 00:02:59,450
OK.

42
00:02:59,470 --> 00:03:06,380
So going to save this I'm going to go back over to my terminal and I'll run an L S so now I should see

43
00:03:06,410 --> 00:03:09,890
each my file names and other false or true next to it.

44
00:03:09,980 --> 00:03:14,490
I do correctly see false next to empty folder because that is a folder not a file.

45
00:03:14,660 --> 00:03:18,530
But then each of my three files have true so it looks like everything is working.

46
00:03:18,680 --> 00:03:26,160
OK but I'm going to run the NL s command several times and I'm going to start to see some really interesting

47
00:03:26,160 --> 00:03:34,170
behavior so I'm going to run it again one more time and about one more time okay.

48
00:03:34,280 --> 00:03:38,780
Now I'm going to show you something interesting about this output you might not see the same output

49
00:03:38,810 --> 00:03:44,810
on your machine Your machine might have no problem whatsoever but I want you to take a close look at

50
00:03:44,810 --> 00:03:47,870
what is going on on my machine and you're going to see something weird here.

51
00:03:47,870 --> 00:03:54,290
Notice how the first time I ran an L S I first saw a console log of empty folder then package lock then

52
00:03:54,290 --> 00:03:57,010
package shapes on that index touch us.

53
00:03:57,080 --> 00:04:02,960
Then the next time I ran it just a couple seconds later I saw those console logs occur in an extremely

54
00:04:02,960 --> 00:04:10,870
different order I first saw index J.S. then package Jason and package lock then empty folder the exact

55
00:04:10,930 --> 00:04:17,620
opposite and then the third time I went to empty folder and now index such a s with second as opposed

56
00:04:17,620 --> 00:04:20,080
to last on the first time.

57
00:04:20,140 --> 00:04:24,760
So the point here is that every single time that I run my program in general I'm seeing some very different

58
00:04:24,850 --> 00:04:30,310
order of console logs again on your machine it might look like everything is occurring in the same order

59
00:04:30,610 --> 00:04:33,360
but clearly that is not the case for me.

60
00:04:33,400 --> 00:04:40,260
So what is going on here and how does this relate to the code that we just wrote a second ago.

61
00:04:40,360 --> 00:04:45,160
Like why is this causing this very oddly ordered output.

62
00:04:45,160 --> 00:04:49,770
Well let's kind of get a better idea of what's going on behind the scenes with L stats.

63
00:04:49,780 --> 00:04:52,710
OK so quick diagram over here.

64
00:04:52,820 --> 00:04:55,000
This is a timeline diagram.

65
00:04:55,000 --> 00:04:58,000
Time is passing in the vertical direction.

66
00:04:58,000 --> 00:05:04,720
So when we run our program we run that for loop and when we run the for loop we run all oracles to that

67
00:05:04,750 --> 00:05:07,950
l step function in very quick succession.

68
00:05:07,960 --> 00:05:13,160
In other words we call each those functions within like microseconds of each other.

69
00:05:13,160 --> 00:05:18,380
The important thing to understand about the L step function and just about every function inside the

70
00:05:18,380 --> 00:05:22,830
no just in the library is that it does not run the callback instantly.

71
00:05:22,910 --> 00:05:24,930
In other words that callback right there.

72
00:05:25,010 --> 00:05:32,830
It does not get called immediately after we run l steps instead what goes on behind the scenes is we

73
00:05:32,900 --> 00:05:34,540
run the for loop.

74
00:05:34,540 --> 00:05:38,920
We then call the El static function for every iteration of the for loop.

75
00:05:38,980 --> 00:05:47,550
So again in quick succession again and again and again we call El steps then behind the scenes no J.S.

76
00:05:47,610 --> 00:05:49,150
looks on the hard drive.

77
00:05:49,320 --> 00:05:55,050
It takes a look at the file it reads in some stats about it and then it comes back to our program and

78
00:05:55,050 --> 00:06:03,060
it calls the callback at some future point in time with the information about that file so the problem

79
00:06:03,060 --> 00:06:06,540
is that reaching out to the harddrive takes some amount of time.

80
00:06:06,540 --> 00:06:12,270
Maybe it's just milliseconds but it does take some amount of time regardless and it also might take

81
00:06:12,270 --> 00:06:17,020
some slightly different amount of time for all the different files that we're trying to look up.

82
00:06:17,270 --> 00:06:21,950
So the order in which these callbacks get invoked is completely unknown to us.

83
00:06:21,960 --> 00:06:26,080
We have no idea what the ordering is going to be.

84
00:06:26,250 --> 00:06:30,370
So that is the big problem with our current implementation right now.

85
00:06:31,320 --> 00:06:36,540
We don't have any good way to kind of add some code inside of here that says hey don't do any console

86
00:06:36,540 --> 00:06:43,510
logs until we have all the callbacks being called because if we ever want to do some ordering or alphabetized

87
00:06:43,510 --> 00:06:47,850
some of the results here we kind of have to wait until all the callbacks get and vote and then kind

88
00:06:47,850 --> 00:06:52,950
of collect the feedback from each of them and then do a console log at the very end with our current

89
00:06:52,950 --> 00:06:53,750
implementation.

90
00:06:53,760 --> 00:06:57,250
That is just about impossible.

91
00:06:57,290 --> 00:07:00,990
So now we kind of see what is going wrong with this current implementation.

92
00:07:01,010 --> 00:07:04,520
We'll take a pause right here come back the next video and we're going to start to remove just about

93
00:07:04,580 --> 00:07:10,130
all this code and replace it with something that's going to allow us to get all the output from these

94
00:07:10,130 --> 00:07:12,350
different El stat functions at the same time.

95
00:07:12,440 --> 00:07:17,660
That's going to allow us to do some sorting or just make sure that we at a bare minimum always print

96
00:07:17,660 --> 00:07:21,040
out the same order on the screen every time.

97
00:07:21,080 --> 00:07:22,820
So we'll take care of that in just a moment.
