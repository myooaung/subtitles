1
00:00:01,270 --> 00:00:04,930
We were just discussing how the weight for function will be really handy to use right here.

2
00:00:04,960 --> 00:00:06,630
So let's start to implement it.

3
00:00:06,670 --> 00:00:10,720
So again the idea is that we're going to receive some selector and we're going to essentially just wait

4
00:00:10,720 --> 00:00:13,490
around until we see that thing up here on the screen.

5
00:00:13,490 --> 00:00:19,150
It's gonna go up to the top of my file the very top and I'm going to define weight for

6
00:00:22,300 --> 00:00:25,430
so this thing is going to receive an argument of a selector.

7
00:00:25,600 --> 00:00:30,310
Now right away if you took a look at where we called it down here I use the awake keyword that is because

8
00:00:30,310 --> 00:00:34,420
we want to have some asynchronous code inside of here and we want to essentially just wait for that

9
00:00:34,420 --> 00:00:40,730
thing to process before we continue on and execute everything else inside.

10
00:00:40,740 --> 00:00:44,590
That means that the wait for function must return a promise.

11
00:00:44,670 --> 00:00:50,700
And that's how we're going to implement this or wait for function up here is going to return a new promise

12
00:00:52,150 --> 00:00:55,080
recall how a promise works we call new promise.

13
00:00:55,080 --> 00:01:01,050
We then pass in a function this functionally Parson is going to be called with two arguments resolve

14
00:01:01,440 --> 00:01:07,280
and reject both these are arguing versus both these arguments are functions.

15
00:01:07,370 --> 00:01:10,890
If we call resolve then the overall promise will be resolved.

16
00:01:11,040 --> 00:01:15,190
And if we call reject the overall promise will be rejected and failed.

17
00:01:15,290 --> 00:01:20,780
In this case if we call reject that is going to cause an error to be thrown which will cause an error

18
00:01:20,780 --> 00:01:22,110
to be thrown down here.

19
00:01:22,280 --> 00:01:27,740
And that will cause the overall test to fail as well so in other words if we don't see some elements

20
00:01:27,770 --> 00:01:35,280
appear in within some amount of time we can just call reject and we should be good to go.

21
00:01:35,350 --> 00:01:35,560
All right.

22
00:01:35,560 --> 00:01:39,010
So inside of here there are several different ways that we can actually implement this logic but we're

23
00:01:39,010 --> 00:01:41,320
going to use a very simple straightforward way.

24
00:01:41,590 --> 00:01:43,990
We're going to create two different time outs.

25
00:01:43,990 --> 00:01:47,310
One will be an interval and one will be a timeout.

26
00:01:47,410 --> 00:01:51,070
So we're going to set up an interval which is gonna be a function that's going to run every so many

27
00:01:51,130 --> 00:01:54,130
milliseconds inside the set interval.

28
00:01:54,130 --> 00:01:58,570
We're gonna check to see if an element with that selector exists inside the document.

29
00:01:58,570 --> 00:02:03,270
If it does that means that the element has appeared and we will resolve the promise.

30
00:02:03,340 --> 00:02:07,180
The purpose of the set time out is to make sure that if we go for some amount of time without seeing

31
00:02:07,210 --> 00:02:11,360
an element with that selector appear then we will automatically reject the premise instead.

32
00:02:12,490 --> 00:02:13,690
So let's put this together.

33
00:02:13,790 --> 00:02:19,790
I'm going to say set interval I'm gonna pass in a function and I want to run this function every say

34
00:02:19,940 --> 00:02:21,340
30 milliseconds.

35
00:02:21,530 --> 00:02:23,870
You can put just about any value that you want to write here.

36
00:02:23,870 --> 00:02:28,410
This is just going to be how often we check the DOM to see if some element has appeared.

37
00:02:28,590 --> 00:02:32,400
The lower technically the better technically our tests will run faster.

38
00:02:32,450 --> 00:02:36,900
However if you take it really low you're going to be running this function really really don't often

39
00:02:37,070 --> 00:02:39,950
and you'll end up burning through more spew than you need to.

40
00:02:39,950 --> 00:02:47,120
So 30 totally reasonable then inside the interval every 30 milliseconds we're going to check and see

41
00:02:47,150 --> 00:02:49,250
if an element with that selectors has appeared.

42
00:02:49,280 --> 00:02:55,350
So I'll say if document dot query selector and then passing the selector that we're looking for.

43
00:02:55,430 --> 00:02:57,010
So if that has appeared.

44
00:02:57,170 --> 00:03:04,760
If we have found something with that call right there let's resolve the promise.

45
00:03:04,800 --> 00:03:09,230
Now we need to also handle the case in which we go for some amount of time without seeing the selector.

46
00:03:09,360 --> 00:03:13,020
If we go for like five seconds well chances are things not going to appear.

47
00:03:13,080 --> 00:03:17,700
So we need to then reject that promise and just stop this entire waiting process.

48
00:03:17,700 --> 00:03:21,820
So outside of the set interval here's the set interval right after it.

49
00:03:21,870 --> 00:03:23,880
So make sure you're after it not inside.

50
00:03:23,880 --> 00:03:27,690
Right after the interval we'll set up a time out as well

51
00:03:31,310 --> 00:03:35,980
remember the difference between a interval and a time out interval is going to run that function every

52
00:03:35,980 --> 00:03:40,030
somebody milliseconds time out is going to run a function just one time.

53
00:03:40,030 --> 00:03:45,730
So in my case I'm going to say that I am willing to wait up to two thousand milliseconds or two seconds.

54
00:03:45,730 --> 00:03:50,030
If the element doesn't appear within that amount of time I don't think it's ever going to appear.

55
00:03:50,050 --> 00:03:52,560
And so I'm just going to reject the promise and say That's it.

56
00:03:52,570 --> 00:03:53,490
We waited long enough.

57
00:03:53,500 --> 00:03:54,040
I give up.

58
00:03:54,720 --> 00:04:00,600
So inside the set time out I will call reject what we have right here.

59
00:04:00,680 --> 00:04:01,460
Almost works.

60
00:04:01,460 --> 00:04:03,230
There's just one last little thing.

61
00:04:03,230 --> 00:04:08,900
When we call set time outs it's going to set a c a set interval it's going to run at function every

62
00:04:08,900 --> 00:04:13,780
so many milliseconds for ever until we actually stop it at some point time.

63
00:04:13,790 --> 00:04:15,370
Hopefully we're going to find the element.

64
00:04:15,380 --> 00:04:16,330
Or maybe we don't.

65
00:04:16,340 --> 00:04:18,950
But either way whether we find it or we don't.

66
00:04:18,950 --> 00:04:22,880
We need to make sure that we stop that interval from running because otherwise it's just going to continue

67
00:04:22,940 --> 00:04:26,780
running forever even after we resolve the promise.

68
00:04:26,780 --> 00:04:31,100
In addition we probably want to make sure that after we reject the promise.

69
00:04:31,100 --> 00:04:34,730
If that happens then we should make sure we stop the interval as well.

70
00:04:36,380 --> 00:04:39,900
The reverse is opposite or skimming the reverse is true as well.

71
00:04:40,250 --> 00:04:44,240
So if we decide to resolve the premise we probably wanna make sure that we stop the time out from ever

72
00:04:44,240 --> 00:04:47,130
occurring and don't attempt to reject the promise.

73
00:04:47,240 --> 00:04:51,260
We cannot actually reject a promise that has already been resolved but just for completion sake we're

74
00:04:51,260 --> 00:04:52,840
going to add that check in.

75
00:04:52,880 --> 00:04:53,110
Okay.

76
00:04:53,120 --> 00:04:55,250
So long story short what we're really doing here.

77
00:04:55,250 --> 00:05:01,930
We're gonna store a reference to the interval that gets created and a timeout that gets created as well.

78
00:05:01,930 --> 00:05:07,000
And then in both cases whether we resolve or reject we're going to clear the interval and the timeout.

79
00:05:07,030 --> 00:05:10,320
So we'll take care of reject first let's say clear interval.

80
00:05:10,360 --> 00:05:15,580
Remember this is a function built into the browser and will pass in the interval that we want to stop

81
00:05:19,240 --> 00:05:22,400
and then up here in the case right before we resolve.

82
00:05:22,670 --> 00:05:27,260
We will clear the interval and we will also clear the time out.

83
00:05:27,310 --> 00:05:27,940
In this case

84
00:05:31,310 --> 00:05:31,660
okay.

85
00:05:31,730 --> 00:05:32,540
That's it.

86
00:05:32,540 --> 00:05:34,870
That is our wait for function.

87
00:05:34,910 --> 00:05:38,960
I know this code is a little bit nasty but it definitely works pretty well and it's extremely handy

88
00:05:38,960 --> 00:05:41,680
to have whenever testing something like this over here.

89
00:05:42,950 --> 00:05:44,050
Okay so let's try this again.

90
00:05:44,060 --> 00:05:50,580
I gonna go back down to the very bottom the file so now when our test runs we're going to enter some

91
00:05:50,580 --> 00:05:56,380
value to the input dispatch that events were then going to wait for some element called dropdown dash

92
00:05:56,380 --> 00:05:57,130
item to appear.

93
00:05:57,160 --> 00:06:02,500
As soon as it does then we will run our expectation it's going to save all this put back over refresh

94
00:06:03,860 --> 00:06:08,300
and I forgot for the millionth time inside this course to add the async keyword.

95
00:06:08,390 --> 00:06:09,320
My mistake.

96
00:06:09,320 --> 00:06:11,410
Sorry about that on the statement right here.

97
00:06:11,420 --> 00:06:12,830
We're using the await keyword.

98
00:06:12,830 --> 00:06:15,370
We need to mark the enclosing function as async.

99
00:06:15,440 --> 00:06:16,130
That's it.

100
00:06:17,890 --> 00:06:18,770
Yes I'll save that.

101
00:06:18,820 --> 00:06:19,900
Back over.

102
00:06:19,900 --> 00:06:23,110
Now we're good to go so it looks like the test is passing.

103
00:06:23,110 --> 00:06:28,870
You'll also notice that the test is taking some amount of time to actually execute the waiting after

104
00:06:28,870 --> 00:06:33,410
the user types something in there is 500 milliseconds so that's why we see it 511 right here it takes

105
00:06:33,420 --> 00:06:37,950
slightly longer than five and a milliseconds so I can refresh and once again.

106
00:06:38,090 --> 00:06:38,790
Yep looks good.

107
00:06:39,860 --> 00:06:40,110
Okay.

108
00:06:40,180 --> 00:06:40,770
So that's it.

109
00:06:42,700 --> 00:06:46,420
All right well we still got like one or two more tests to run so quick pause right here and I'll see

110
00:06:46,420 --> 00:06:47,460
you in just a minute.
