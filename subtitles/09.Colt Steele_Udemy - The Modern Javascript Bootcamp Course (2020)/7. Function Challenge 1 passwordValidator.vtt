WEBVTT
1
00:00:00.270 --> 00:00:00.670
All right.

2
00:00:00.690 --> 00:00:05.100
Let's get some practice writing functions with return values and arguments.

3
00:00:05.100 --> 00:00:07.730
We'll have a couple of these challenges or code along.

4
00:00:07.770 --> 00:00:09.540
It's up to you how you want to treat them.

5
00:00:09.690 --> 00:00:13.800
If you want to attempt to write the function on your own I highly recommend that approach.

6
00:00:13.800 --> 00:00:19.270
But if you are completely new to functions and you're a little overwhelmed then maybe take a step back.

7
00:00:19.290 --> 00:00:22.050
Follow along with me and revisit these later on.

8
00:00:22.350 --> 00:00:23.700
So here's the first one.

9
00:00:23.920 --> 00:00:26.130
There's some description some text I wrote.

10
00:00:26.130 --> 00:00:31.380
You can download this if you want and write your own function without looking at my solution.

11
00:00:31.380 --> 00:00:37.740
The goal is to write a function called is valid password and it accepts two different arguments a password

12
00:00:38.040 --> 00:00:39.060
and a user name.

13
00:00:39.060 --> 00:00:41.200
And you can assume both of them are strings.

14
00:00:41.520 --> 00:00:44.510
And this function should return true or false.

15
00:00:44.730 --> 00:00:46.010
It's a boolean method.

16
00:00:46.410 --> 00:00:51.690
If the password meets all of the requirements which we'll go into in a moment it should return true.

17
00:00:51.780 --> 00:00:55.010
If any of them fail then it should not be valid.

18
00:00:55.020 --> 00:00:56.580
So we return false.

19
00:00:56.580 --> 00:00:59.670
So the password needs to be at least eight characters.

20
00:00:59.670 --> 00:01:03.720
It cannot contain any spaces and it cannot contain the user name.

21
00:01:04.740 --> 00:01:11.030
So if my username is dog lover which is what I have here this is an invalid password.

22
00:01:11.130 --> 00:01:12.690
It contains that text.

23
00:01:12.690 --> 00:01:14.220
It's not as safe.

24
00:01:14.220 --> 00:01:19.830
This is still not a very good set of rules for a password in general but it's good enough for our function

25
00:01:20.040 --> 00:01:21.060
examples.

26
00:01:21.060 --> 00:01:26.330
So no Username Name that cannot be contained anywhere in the string in the middle of the beginning.

27
00:01:26.340 --> 00:01:29.190
Also we need to make sure at least eight characters.

28
00:01:29.460 --> 00:01:37.590
So another example would be is valid password and then if the password was only Hello one that would

29
00:01:37.590 --> 00:01:43.230
be false because it's not long enough as would this because it does not have a space.

30
00:01:43.590 --> 00:01:49.050
We don't need to return any specific reason for why it's invalid so don't return something like password

31
00:01:49.080 --> 00:01:50.040
too short.

32
00:01:50.040 --> 00:01:52.440
It should be a Boolean true or false.

33
00:01:52.470 --> 00:01:57.690
So go ahead and try this if you'd like pause the video and then let's write a solution.

34
00:01:57.690 --> 00:02:03.860
So I'll start off by defining my function is valid password to parameters.

35
00:02:03.930 --> 00:02:05.620
The first one will be password.

36
00:02:05.670 --> 00:02:07.350
The second one is the user name.

37
00:02:07.470 --> 00:02:09.410
You could do it the other way around if you want.

38
00:02:09.420 --> 00:02:14.040
I'm just following the pattern I laid out here but you just need to make sure you have two parameters

39
00:02:14.070 --> 00:02:15.810
and give them meaningful names.

40
00:02:15.810 --> 00:02:19.040
So for calling this one password then we better treat it as password.

41
00:02:19.770 --> 00:02:21.840
So we have three different things for checking for.

42
00:02:21.840 --> 00:02:23.670
Let's start with the length of the password.

43
00:02:25.320 --> 00:02:27.120
So we need a conditional.

44
00:02:27.120 --> 00:02:31.980
We need to check if password length is greater than or equal to eight.

45
00:02:32.880 --> 00:02:35.040
If that's the case it is valid.

46
00:02:35.130 --> 00:02:41.850
So we could write it this way but it's a little trickier because we need to make sure all of these are

47
00:02:41.850 --> 00:02:44.370
valid in order for the whole thing to be valid.

48
00:02:44.610 --> 00:02:48.720
So we need all of these to be true in order for us to return true.

49
00:02:48.750 --> 00:02:53.550
So I couldn't just say if password length is greater than or equal to 8 return true.

50
00:02:53.820 --> 00:03:00.540
Because that might work if the password is eight characters like that but one of those characters could

51
00:03:00.540 --> 00:03:03.930
be a space at which point it's invalid.

52
00:03:03.930 --> 00:03:06.350
So I need to make sure all of them are true.

53
00:03:06.510 --> 00:03:14.160
So I could chain them all together with and I'm not a fan of this approach for a bunch of pieces together

54
00:03:14.250 --> 00:03:16.300
like this could get quite long.

55
00:03:16.350 --> 00:03:20.520
We have to check if their space spaces we have to check if there's user name the user username is contained

56
00:03:20.520 --> 00:03:21.320
in the password.

57
00:03:21.360 --> 00:03:28.950
So I'm going to reverse my logic and say if password length is less than eight return false because

58
00:03:28.950 --> 00:03:34.520
only one of these needs to be untrue needs to be false in order for the entire password to be invalid.

59
00:03:34.560 --> 00:03:36.740
So we'll just check is it too short.

60
00:03:37.050 --> 00:03:40.140
Then we know automatically return false.

61
00:03:40.140 --> 00:03:41.520
Then I'll do another one.

62
00:03:41.520 --> 00:03:42.400
Are there spaces.

63
00:03:42.420 --> 00:03:49.980
So if password and then how do we check if there is a space in a string or any character in that string.

64
00:03:49.980 --> 00:03:59.200
I'll just do index of the space character and remember index of will give us negative 1.

65
00:03:59.490 --> 00:04:04.780
If that character is not in there so there's no space in a sd s and I get negative 1.

66
00:04:04.950 --> 00:04:11.670
So if password that index of is not negative one that means we have a problem we want it to be a negative

67
00:04:11.670 --> 00:04:17.880
one in order for the password to be valid so we'll return false here that means there is a space and

68
00:04:17.880 --> 00:04:20.110
then how do we check if it contains the user name.

69
00:04:20.910 --> 00:04:30.720
Basically the exact same thing password that index of username so username could be dog lover and dog

70
00:04:30.720 --> 00:04:37.830
lover is contained in this string we can use INDEX OF with multiple characters I could do a sd s index

71
00:04:37.830 --> 00:04:42.560
of a SD and it tells us it starts at index 0.

72
00:04:43.500 --> 00:04:50.580
If I do s d s set terrible string to use but you can see it starts at index 1 so it's not only use for

73
00:04:50.580 --> 00:04:56.220
a single character at a time if this is the case we will return false.

74
00:04:57.030 --> 00:05:03.420
Otherwise we can return true and we don't need an LS We also don't need to do if and else if and where

75
00:05:03.420 --> 00:05:10.710
to else if you could but since we're returning as soon as one of them is true if this is true we return

76
00:05:10.710 --> 00:05:16.860
we're done we don't have to do if and else If but we'll refactor this in a moment or we'll talk about

77
00:05:16.860 --> 00:05:21.930
a different way of writing this in a moment but let's just make sure it works so I'm going to try calling

78
00:05:21.930 --> 00:05:30.220
this let's do is valid password of something that is too short so a SD like that and then some user

79
00:05:30.220 --> 00:05:38.850
name it doesn't really matter we get false OK now let's do another example where there's a space it

80
00:05:38.850 --> 00:05:44.970
could be let's do one that's long enough but there's a space in there and then some user name we still

81
00:05:44.970 --> 00:05:52.280
get false and now let's do our final test case where we have a long enough password like chicken one

82
00:05:52.280 --> 00:05:59.960
two three four and the user name is chicken that's not allowed.

83
00:06:00.000 --> 00:06:01.140
So we get false.

84
00:06:01.580 --> 00:06:04.770
But if I no longer include chicken in my password.

85
00:06:04.880 --> 00:06:08.190
Now instead change it to chicken spelled that way.

86
00:06:08.190 --> 00:06:09.930
We finally get true.

87
00:06:10.080 --> 00:06:12.630
So we're now meeting the requirements.

88
00:06:12.750 --> 00:06:16.170
This is OK and I actually kind of like writing it this way.

89
00:06:16.500 --> 00:06:19.440
It's very explicit and clear what's going on.

90
00:06:19.470 --> 00:06:22.340
We could write it using a single conditional.

91
00:06:22.350 --> 00:06:24.060
It would just get really long.

92
00:06:24.060 --> 00:06:27.600
We can link them together and say if one of these is true.

93
00:06:27.600 --> 00:06:34.270
So if this or this or this return false so we could do that.

94
00:06:34.270 --> 00:06:39.170
I'll duplicate the function and rewrite it just so you can see what it would look like.

95
00:06:39.430 --> 00:06:47.680
So we could rewrite it as if and then the first thing would be password length is less than eight or

96
00:06:48.310 --> 00:06:48.940
password.

97
00:06:48.940 --> 00:06:57.100
That index of space not empty string but space is not equal to negative one or password that index of

98
00:06:57.180 --> 00:07:00.350
user name is not equal to negative one.

99
00:07:00.880 --> 00:07:09.970
If that's the case if one of those is true return false or more if one or more is true and then return

100
00:07:10.270 --> 00:07:14.270
true at the end that means everything is valid and this works.

101
00:07:14.560 --> 00:07:19.380
I would definitely just want to format it like we have here make it easier to see one long line.

102
00:07:19.390 --> 00:07:20.710
It's not so pretty.

103
00:07:20.710 --> 00:07:22.300
Let's make sure it still works.

104
00:07:22.300 --> 00:07:26.830
Let me comment out the original one here refresh and tried again.

105
00:07:27.870 --> 00:07:30.480
So this one is valid.

106
00:07:30.480 --> 00:07:34.830
This one contained chicken which is the username so it's invalid.

107
00:07:34.830 --> 00:07:39.030
This one had a space in it invalid.

108
00:07:39.030 --> 00:07:41.670
And this one was too short.

109
00:07:41.730 --> 00:07:43.890
Also invalid.

110
00:07:44.010 --> 00:07:46.380
So this is also nice this is not too bad.

111
00:07:46.380 --> 00:07:51.630
Another approach you could take just by the way if you are bored with this or you feel like you've got

112
00:07:51.630 --> 00:07:52.820
a good grasp of it.

113
00:07:53.160 --> 00:07:53.940
Go ahead and move on.

114
00:07:53.940 --> 00:07:58.090
I probably don't even need to tell you that but I will show you another approach.

115
00:07:58.140 --> 00:08:05.280
What we could do is make each of these into a variable all of these return true or false so we get rid

116
00:08:05.280 --> 00:08:05.900
of this.

117
00:08:05.940 --> 00:08:10.410
Just gonna delete everything for a moment and I could make a variable here.

118
00:08:10.410 --> 00:08:11.310
What would this be called.

119
00:08:11.310 --> 00:08:13.820
Maybe is too short or too short.

120
00:08:13.980 --> 00:08:25.860
So const two short equals password length less than eight const and then this one would be has spaces

121
00:08:26.130 --> 00:08:29.550
or has space equals this line.

122
00:08:29.550 --> 00:08:35.130
So these variables I'm making three of them are going to be true or false boolean values password that

123
00:08:35.130 --> 00:08:41.660
index of user names so we'll call this const as a short way of saying this contains user name.

124
00:08:41.670 --> 00:08:42.960
How about two similar

125
00:08:45.750 --> 00:08:58.200
like that and then we can use those to make a conditional if too short or has space or two similar.

126
00:08:58.200 --> 00:08:59.710
Return false.

127
00:08:59.820 --> 00:09:00.990
And I'll do this on one line.

128
00:09:01.020 --> 00:09:02.640
There's nothing wrong with that.

129
00:09:03.030 --> 00:09:04.500
I don't need those curly braces.

130
00:09:04.590 --> 00:09:07.940
We've seen that once or twice for nice and short conditionals.

131
00:09:08.010 --> 00:09:10.590
All we need is one line of code return false.

132
00:09:10.620 --> 00:09:12.440
Otherwise return true.

133
00:09:14.830 --> 00:09:15.600
OK.

134
00:09:15.750 --> 00:09:17.140
It should still work.

135
00:09:17.250 --> 00:09:18.950
That's invalid.

136
00:09:19.020 --> 00:09:24.030
This one with the space in it super long space still invalid.

137
00:09:24.030 --> 00:09:29.170
Let's go with a different username like dog and then a password that contains dog.

138
00:09:29.670 --> 00:09:31.320
I love Dog.

139
00:09:31.320 --> 00:09:32.430
One two three.

140
00:09:32.460 --> 00:09:33.380
Still false.

141
00:09:33.450 --> 00:09:37.780
But now if I change username to be cat password no longer contains it.

142
00:09:37.890 --> 00:09:41.700
It's true and we've got yet another thing that we could change.

143
00:09:41.700 --> 00:09:46.890
And to be clear here I'm not saying that this is the best evolution or that this version will be the

144
00:09:46.890 --> 00:09:48.030
better version.

145
00:09:48.030 --> 00:09:50.790
I just want to explore some possibilities here.

146
00:09:50.880 --> 00:09:56.640
So what we're doing right now is checking a bunch of conditions while it's a single condition that contains

147
00:09:56.940 --> 00:09:58.330
a couple of hours.

148
00:09:58.440 --> 00:10:01.440
And if this is true we return false.

149
00:10:01.590 --> 00:10:04.320
If it's not true we return true.

150
00:10:05.220 --> 00:10:09.480
So we want this to be false so that we return true if that makes sense.

151
00:10:09.480 --> 00:10:15.000
So we could invert this instead of saying if it's too short or it has spaces or it's too similar to

152
00:10:15.040 --> 00:10:16.770
username return false.

153
00:10:16.770 --> 00:10:18.800
We could say if it's not too short.

154
00:10:19.080 --> 00:10:22.020
If it doesn't have space and it's not too similar.

155
00:10:22.020 --> 00:10:22.880
Return true.

156
00:10:23.970 --> 00:10:29.760
And we could write that like this function is valid password we can keep these variables but remember

157
00:10:29.790 --> 00:10:34.710
anytime I have a variable here you could just replace it with a condition so we could say if it's not

158
00:10:34.710 --> 00:10:43.020
too short and does not have space and it's not too similar.

159
00:10:43.020 --> 00:10:46.380
We want to return true.

160
00:10:46.380 --> 00:10:50.720
Otherwise return false and it should still work fine if I refresh over there.

161
00:10:50.730 --> 00:10:56.100
This one is valid but if I now change this to be love as my username it's false.

162
00:10:56.280 --> 00:11:01.770
If I just change the user name to something and then add a space false and if the password is too short

163
00:11:01.860 --> 00:11:04.710
we get false okay.

164
00:11:05.160 --> 00:11:10.800
Now this also is good but we can improve it even one more degree shouldn't say improve but we can shorten

165
00:11:10.800 --> 00:11:12.870
it if you want it to.

166
00:11:12.870 --> 00:11:14.270
We're saying if this is true.

167
00:11:14.280 --> 00:11:14.970
Return true.

168
00:11:14.970 --> 00:11:17.100
If this is false return false.

169
00:11:17.100 --> 00:11:19.440
We could just say return this.

170
00:11:19.440 --> 00:11:21.310
This evaluates to true or false.

171
00:11:21.540 --> 00:11:25.890
So I could get rid of that return.

172
00:11:26.160 --> 00:11:35.410
This this whole thing will evaluate to TRUE or FALSE and then we return that value so that's false.

173
00:11:35.520 --> 00:11:38.790
Let's do a longer one.

174
00:11:38.790 --> 00:11:41.400
That's true because it does not contain this username.

175
00:11:41.880 --> 00:11:42.950
I had a space.

176
00:11:43.110 --> 00:11:44.940
We've seen this a bunch of times by now.

177
00:11:44.940 --> 00:11:48.300
The logic still works and I'll stop here.

178
00:11:48.360 --> 00:11:53.300
We could continue to flip flop and change the type of logic we're doing.

179
00:11:53.430 --> 00:11:58.410
We could instead of making a variable called too short and checking if the password is too short.

180
00:11:58.410 --> 00:12:02.370
We could go the other way around and check is this password long enough.

181
00:12:02.370 --> 00:12:07.290
In which case we'd be checking password at length greater than or equal to 8 and then we could change

182
00:12:07.290 --> 00:12:08.640
our logic down here.

183
00:12:08.640 --> 00:12:12.030
The point is we could continue to alter the logic.

184
00:12:12.030 --> 00:12:15.450
I'm not going to stress about it looking at all of them.

185
00:12:15.540 --> 00:12:17.720
I think any of them is good.

186
00:12:17.850 --> 00:12:22.070
Even this first one which is a lot longer in terms of the number of lines.

187
00:12:22.260 --> 00:12:24.540
It's still very easy to see what's going on.

188
00:12:24.570 --> 00:12:31.250
A lot of people obsess especially students who are starting out obsessed with writing compact super

189
00:12:31.250 --> 00:12:37.640
short one liner functions and really trying to do hacky cool things and that's great.

190
00:12:37.640 --> 00:12:43.010
It's always fun to see how short you can make something but often that comes at the expense of readability

191
00:12:43.430 --> 00:12:44.330
and expressiveness.

192
00:12:44.330 --> 00:12:45.710
Just being able to understand it.

193
00:12:45.800 --> 00:12:50.490
If someone walked into this code or walked into this file and needed to understand what was going on.

194
00:12:50.630 --> 00:12:56.260
All of these are pretty clear and these in particular I like with these variables.

195
00:12:56.270 --> 00:13:00.020
Some people would say as you don't need those variables you're wasting memory.

196
00:13:00.020 --> 00:13:06.050
It's really a miniscule waste of memory if you want to call it that and it's not worth stressing about.

197
00:13:06.200 --> 00:13:07.970
But pick whichever one you're comfortable with.

198
00:13:07.970 --> 00:13:10.010
I just want to show a couple different versions.
