1
00:00:00,180 --> 00:00:03,310
We've seen that we can fill arrays with all sorts of values.

2
00:00:03,390 --> 00:00:05,850
We can put Nolan there could do undefined.

3
00:00:05,850 --> 00:00:11,390
You could put out a number can put a string regular number you can put whatever we want.

4
00:00:11,430 --> 00:00:17,040
Well not whatever we want but out of the valid values in JavaScript we can use them all instead of an

5
00:00:17,040 --> 00:00:17,880
array.

6
00:00:17,910 --> 00:00:21,070
We can also nest arrays inside of arrays.

7
00:00:21,270 --> 00:00:25,120
So here's a couple of examples of how you might do that and what it looks like.

8
00:00:25,170 --> 00:00:27,080
It's as simple as Array brackets.

9
00:00:27,150 --> 00:00:30,170
And then each element could be an array.

10
00:00:30,210 --> 00:00:32,670
In this case I have pairs of colors.

11
00:00:32,760 --> 00:00:37,530
So we have red and then crimson purple orchid blue navy blue.

12
00:00:37,530 --> 00:00:43,860
So the first color in each array is maybe the lighter version and the second version or the second color

13
00:00:43,860 --> 00:00:44,770
is darker.

14
00:00:44,910 --> 00:00:47,260
Doesn't really matter in this context.

15
00:00:47,340 --> 00:00:52,680
Once we learn objects you'll see that most of the time we end up combining arrays and objects for more

16
00:00:52,680 --> 00:00:58,650
complex data and that objects would probably help us organize this data a bit better because what's

17
00:00:58,650 --> 00:01:03,870
hard about this is looking at it you don't really understand what is the significance of the first color

18
00:01:03,870 --> 00:01:05,170
versus the second.

19
00:01:05,280 --> 00:01:06,500
Is there an order.

20
00:01:06,510 --> 00:01:12,330
Well there's the default array order but is there a reason that red comes first or green and comes before

21
00:01:12,330 --> 00:01:12,750
all of.

22
00:01:12,990 --> 00:01:18,180
But if we put that aside the main point here is that we can store arrays instead of arrays.

23
00:01:18,180 --> 00:01:20,650
We could do something like animal pairs.

24
00:01:20,730 --> 00:01:27,780
Be an array and each element will be a sub array and nested array inside and we could just have empty

25
00:01:27,780 --> 00:01:29,010
arrays instead of an array.

26
00:01:29,010 --> 00:01:32,120
There's nothing wrong with that but I'm going to fill it with strings.

27
00:01:32,160 --> 00:01:35,230
So we'll have female and male versions of animals.

28
00:01:35,250 --> 00:01:40,590
So we have dough for deer and then a male version of buck or a stag.

29
00:01:40,710 --> 00:01:42,270
It's never clear on that.

30
00:01:42,660 --> 00:01:46,880
And then we just add a comma afterwards and we can put another element like twenty two if we wanted

31
00:01:46,890 --> 00:01:49,290
to and then true and then another array.

32
00:01:49,290 --> 00:01:51,720
It's just treated like any other element.

33
00:01:51,930 --> 00:01:54,630
But I'll do a couple nested Arrays I'll fast forward through this.

34
00:01:54,630 --> 00:01:55,260
There we go.

35
00:01:55,260 --> 00:02:01,380
So we have three arrays nested inside of one array and let's try to access some data out of animal pairs

36
00:02:01,590 --> 00:02:05,970
so I'll clear the console refresh the page and I have animal pairs.

37
00:02:05,970 --> 00:02:10,020
If we inspect it in the dev tools you can expand each nested array.

38
00:02:11,030 --> 00:02:17,910
But let's start by trying to figure out the female version of Peacock So how do we get p hen out of

39
00:02:17,910 --> 00:02:19,520
this animal pairs array.

40
00:02:19,650 --> 00:02:27,590
It is in the third element of animal pairs so 0 1 2 index of 2 animal pairs of two.

41
00:02:27,660 --> 00:02:34,270
And that gives us this entire array and then to access the first element we use INDEX OF 0.

42
00:02:34,650 --> 00:02:39,510
And we just chain them together like this animal pairs to zero.

43
00:02:39,750 --> 00:02:48,360
That gives us P hen animal pairs to one gives us Peacock animal pairs of let's go with one one.

44
00:02:48,450 --> 00:02:55,380
Sure gives us ram it gives us the first portion animal pairs of one gives us this whole array and then

45
00:02:55,380 --> 00:03:01,710
we're accessing index of one in that child array or in that nested array which gives us RAM and we can

46
00:03:01,740 --> 00:03:03,480
update elements as well.

47
00:03:03,600 --> 00:03:10,760
Let's say I was wrong about Buck and Hatch actually stag which I'm not sure about but if it was actually

48
00:03:10,770 --> 00:03:12,820
stag we could update it.

49
00:03:12,930 --> 00:03:18,660
It is the zero with element this array is the zero with element in the main animal pairs array and then

50
00:03:18,660 --> 00:03:23,930
we want to change index of one and set that equal to stag.

51
00:03:23,940 --> 00:03:28,970
Now we look at animal pairs and you can see that change was made.

52
00:03:29,040 --> 00:03:29,620
Okay.

53
00:03:29,910 --> 00:03:32,760
So this is still not a really good example.

54
00:03:32,760 --> 00:03:38,400
And the reason for that is that it just doesn't really make sense why would you store these pairs in

55
00:03:38,400 --> 00:03:39,930
an order in an array.

56
00:03:39,930 --> 00:03:44,140
Why is Doe and book First In P hen and Peacock is third.

57
00:03:44,400 --> 00:03:49,470
Why is there an order an array is usually the best choice when there is an explicit or an important

58
00:03:49,500 --> 00:03:56,250
order that needs to be preserved not just random pairs of data but it does technically work but here

59
00:03:56,250 --> 00:04:00,140
is a much better and much more common example of nested Arrays.

60
00:04:00,330 --> 00:04:06,310
Here we have a tic tac toe board but you could use nested arrays to model any sort of board a chessboard

61
00:04:06,360 --> 00:04:14,160
checkers board a grid in candy crush any grid we could use to nested or not just two nested arrays but

62
00:04:14,160 --> 00:04:16,470
two levels of nested arrays.

63
00:04:16,590 --> 00:04:22,470
So here we have tic tac toe and this graphic on the right is represented by the array on the left.

64
00:04:22,500 --> 00:04:29,120
So we have the first row which is one array 0 no and X or Oh no index.

65
00:04:29,250 --> 00:04:36,570
I use Noel to represent no move being played an empty square and then the next row is no X and 0 and

66
00:04:36,570 --> 00:04:39,320
then x 0 and no.

67
00:04:39,450 --> 00:04:44,550
So multi-dimensional arrays which is the fancy term for what we're doing here where we have arrays instead

68
00:04:44,550 --> 00:04:45,630
of arrays.

69
00:04:45,690 --> 00:04:48,330
They're really common when you're working with boards.

70
00:04:48,420 --> 00:04:49,350
You can continue.

71
00:04:49,350 --> 00:04:51,510
You could have a three dimensional array.

72
00:04:51,510 --> 00:04:53,220
This is a two dimensional array.

73
00:04:53,340 --> 00:04:57,580
You could have a three dimensional array if you were modelling a Rubik's cube for example.

74
00:04:57,630 --> 00:05:01,870
You can continue to invest further and further I won't spend too much time on this example because it

75
00:05:01,870 --> 00:05:04,560
works exactly the same as what we saw here.

76
00:05:04,570 --> 00:05:06,300
We're just using different data.

77
00:05:06,610 --> 00:05:12,790
So for a three by three board we would have three arrays each element or each array has three elements

78
00:05:12,790 --> 00:05:14,770
itself for a 10 by 10.

79
00:05:14,770 --> 00:05:19,150
We would have 10 arrays nested instead of the board and they would all be 10 elements long.

80
00:05:19,180 --> 00:05:21,320
So that's pretty much it for nested arrays.

81
00:05:21,340 --> 00:05:24,610
The main point here is that we can put arrays instead of other arrays.

82
00:05:24,640 --> 00:05:27,320
We could continue and have a bunch of arrays.

83
00:05:27,460 --> 00:05:34,090
For example if I was confused about Buck I could put Buck and stag here and now we have three levels

84
00:05:34,090 --> 00:05:38,860
of arrays and we would access Stagg via animal pairs.

85
00:05:38,940 --> 00:05:41,130
0 that gives us the first array.

86
00:05:41,260 --> 00:05:43,450
This entire thing and then I want this element.

87
00:05:43,450 --> 00:05:45,790
So index of 1 0 1.

88
00:05:45,790 --> 00:05:52,780
So I chain that on and then I want the last element which is index of 1 again chain that on one more

89
00:05:52,780 --> 00:05:53,920
time.

90
00:05:53,920 --> 00:05:55,090
Yep that's it.

91
00:05:55,090 --> 00:05:59,890
We just continue to add square brackets over and over to access or to update information.

92
00:05:59,890 --> 00:06:04,330
I'll change it to stag in all caps and I think that's a good place to stop with nested arrays.
