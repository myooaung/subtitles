WEBVTT
1
00:00:01.340 --> 00:00:04.540
In the last video we ran into a little issue around this test right here.

2
00:00:04.600 --> 00:00:08.170
As I mentioned the tests show that we have is all pretty much good to go.

3
00:00:08.260 --> 00:00:11.630
And the issue that we're running into is from somewhere else inside of our project.

4
00:00:12.130 --> 00:00:16.210
So in this video I want to show you a diagram to help you understand exactly what is going on right

5
00:00:16.210 --> 00:00:17.350
now.

6
00:00:17.350 --> 00:00:22.150
The first three the diagram however I'm going to open up the render dot J.S. file so remember this is

7
00:00:22.150 --> 00:00:26.080
what is going to take the name of some each G.M. file and then call the.

8
00:00:26.140 --> 00:00:29.070
From file function attached to j ust.

9
00:00:29.350 --> 00:00:31.710
Recall that this is an async function.

10
00:00:31.720 --> 00:00:36.520
So we have to put the awake keyword right there to allow j ust to dump some time to go and find that

11
00:00:36.520 --> 00:00:41.370
file on our hard drive load its contents up and then pass all the H mountainside there.

12
00:00:41.400 --> 00:00:42.490
So just keep in mind.

13
00:00:42.550 --> 00:00:45.510
Let's go take a look at that diagram.

14
00:00:45.620 --> 00:00:45.930
All right.

15
00:00:45.940 --> 00:00:47.390
A little time flow diagram here.

16
00:00:47.510 --> 00:00:53.560
So we start off at the very top and we're going to work our way down so everything starts off with us

17
00:00:53.560 --> 00:00:58.810
telling j ust om to load up that index dot each symbol file this area right here represents the amount

18
00:00:58.810 --> 00:01:02.610
of time that it takes to go find the file and pass everything inside.

19
00:01:02.710 --> 00:01:04.830
Eventually j ust is going to do just that.

20
00:01:04.900 --> 00:01:05.900
It's going to load the file.

21
00:01:05.920 --> 00:01:08.380
It's going to pass all the e-mail inside of it.

22
00:01:08.380 --> 00:01:13.430
The instant that occurs the from file promise we get is going to be resolved.

23
00:01:13.480 --> 00:01:19.210
So in other words the instant that j system finishes passing it the HMO this promise right here that

24
00:01:19.210 --> 00:01:24.520
we get back from calling from file will be resolved and we're going to continue execution down by returning

25
00:01:24.610 --> 00:01:31.410
the damn object so the instant after that happens we flow into like this left hand side the diagram

26
00:01:32.250 --> 00:01:33.700
our tests then start to run.

27
00:01:33.720 --> 00:01:40.020
So we run all of our different statements and in our case we do the actual form submission and we check

28
00:01:40.020 --> 00:01:42.530
that each one element right away.

29
00:01:42.660 --> 00:01:47.300
And at that point time we see that there is nothing inside the H1 element just yet.

30
00:01:47.340 --> 00:01:48.810
So here's the core issue.

31
00:01:48.810 --> 00:01:55.200
Just loading up the e-mail file and passing the h t doesn't actually complete the entire loading process

32
00:01:55.230 --> 00:01:56.880
of our application.

33
00:01:56.880 --> 00:02:02.490
Once J A storm has passed that HDL it sees that there is a script tag inside there and unfortunately

34
00:02:02.540 --> 00:02:08.640
J a stamp by default does not wait for the script that we are referencing inside that script tag to

35
00:02:08.640 --> 00:02:11.330
actually be loaded and execute it.

36
00:02:11.370 --> 00:02:17.250
So in other words right after that promise gets resolved we run our tests but only some little amount

37
00:02:17.250 --> 00:02:18.360
of time after that.

38
00:02:18.360 --> 00:02:23.610
So represented by this error right here some amount of time later j ust om finally loads up the next

39
00:02:23.610 --> 00:02:26.550
dot J as file and executes all the code inside

40
00:02:29.280 --> 00:02:34.020
just to be clear at the index dot J is file that I'm referencing is the one inside of our sample web

41
00:02:34.020 --> 00:02:35.040
project folder.

42
00:02:35.430 --> 00:02:40.650
So the one that has our code that watches for a summit event on the form element and does the validation

43
00:02:40.650 --> 00:02:46.510
logic so the whole problem right now is that this code right here to actually watch for the form submission

44
00:02:46.570 --> 00:02:51.220
is not executed until after our test run that's it.

45
00:02:51.220 --> 00:02:57.830
That's the problem so we need to figure out some way to essentially tell J.S. Dom to not allow things

46
00:02:57.830 --> 00:03:04.070
to progress or to not return from the render function right here until after all the associated scripts

47
00:03:04.100 --> 00:03:08.660
and resources and whatnot have been loaded up inside of this Dom object.

48
00:03:08.660 --> 00:03:15.140
That's what we have to do we have to delay returning from this until the entire Dom is ready to go and

49
00:03:15.140 --> 00:03:19.430
we can actually effectively run some tests on it because otherwise we're just going to be testing like

50
00:03:19.700 --> 00:03:24.080
a half version of our application that might not have all the job script code that we are relying upon

51
00:03:24.140 --> 00:03:27.210
loaded up inside of it.

52
00:03:27.320 --> 00:03:27.600
All right.

53
00:03:27.650 --> 00:03:30.110
So now that we understand the issue let's take a pause right here.

54
00:03:30.110 --> 00:03:32.350
Write out some code next video to fix it all up.
