1
00:00:01,420 --> 00:00:01,650
All right.

2
00:00:01,660 --> 00:00:05,150
So in this video we're going to implement our run comparison function.

3
00:00:05,160 --> 00:00:09,010
Now as I mentioned just a moment ago implementing this function is going to be just a little bit challenging

4
00:00:09,400 --> 00:00:12,850
because the metrics that we're comparing here aren't always just play numbers.

5
00:00:12,850 --> 00:00:14,590
In this case we've got some strings.

6
00:00:14,650 --> 00:00:17,610
So we need to figure out how to compare these different values.

7
00:00:17,650 --> 00:00:20,730
There's actually another reason and this is kind of a challenging little problem.

8
00:00:21,010 --> 00:00:26,470
Let me tell you exactly why I want you to think about the exact logic we're kind of ordering in which

9
00:00:26,470 --> 00:00:29,530
we would run the comparison inside this function.

10
00:00:29,530 --> 00:00:34,600
The first statistic that we print out down here is the number of awards or that whole award string and

11
00:00:34,600 --> 00:00:36,520
then the box office and then the medal score.

12
00:00:37,210 --> 00:00:43,360
So it's clear that we need to somehow reach into the Dom we need to select this element on both sides

13
00:00:43,360 --> 00:00:47,260
of the screen because remember there's really two of these elements on the screen one for each movie

14
00:00:47,260 --> 00:00:47,950
we search for.

15
00:00:48,550 --> 00:00:54,250
So we need to find this first element like the first element with a class of notification is primary

16
00:00:54,610 --> 00:00:56,640
and a article tag.

17
00:00:56,950 --> 00:01:02,520
And we're going to essentially assume that that is of type awards are displaying the awards stepped.

18
00:01:02,530 --> 00:01:06,520
So we might end up running some code inside of here that looks like this is can give you a very quick

19
00:01:06,520 --> 00:01:17,480
example maybe something like find the first article elements for each movie then run a comparison on

20
00:01:17,480 --> 00:01:27,660
the number of awards then apply some styling to that article element.

21
00:01:27,720 --> 00:01:32,850
The key thing here is that we're just looking for the first article for each movie and we're assuming

22
00:01:32,850 --> 00:01:39,440
that that first article element represents the number of awards statistic if we start to write some

23
00:01:39,440 --> 00:01:40,220
code like this.

24
00:01:40,250 --> 00:01:43,030
We're going to very quickly end up in a bad spot.

25
00:01:43,040 --> 00:01:48,620
Let me tell you why if our code just looks at the first element and assumes it is awards we could break

26
00:01:48,620 --> 00:01:56,240
our application super quickly by going back down to our template and just changing the order of statistics.

27
00:01:56,270 --> 00:02:02,450
So in other words I could take this first statistic block cut it and move it underneath that first one

28
00:02:02,570 --> 00:02:03,510
or the second one.

29
00:02:03,530 --> 00:02:07,390
So now the award statistic is second in the list.

30
00:02:07,390 --> 00:02:13,250
So if I ever wanted to reorder the different statistics that I'm showing here I would also have to make

31
00:02:13,250 --> 00:02:20,830
an update to the run comparison function because now the first article in The list represents the box

32
00:02:20,830 --> 00:02:21,860
office amount.

33
00:02:22,090 --> 00:02:28,120
So we'd have to update this code to run a comparison on the box office value instead.

34
00:02:28,330 --> 00:02:33,640
And then it kind of follows that the second comparison I would have to update from box office to instead

35
00:02:33,640 --> 00:02:37,290
take a look at number of awards.

36
00:02:37,300 --> 00:02:42,760
So in other words we don't really want to encode the order of statistics here and try to read it out

37
00:02:42,760 --> 00:02:47,880
of our each team T.M. to figure out what order we're going to compare these different statistics in.

38
00:02:48,160 --> 00:02:51,530
So that kind of grows that approach out the window.

39
00:02:51,550 --> 00:02:53,290
So how are we going to like actually fix this.

40
00:02:53,290 --> 00:02:55,570
How are we going to actually approach it.

41
00:02:55,570 --> 00:03:01,290
Well I've got one kind of crazy idea that's going to kind of solve a lot of the different issues that

42
00:03:01,290 --> 00:03:06,510
we're going to run into upfront particularly that other issue around like comparing strings versus strings.

43
00:03:06,570 --> 00:03:13,040
I think that when we run the movie template function we should add it in a data property to each of

44
00:03:13,050 --> 00:03:19,980
these different articles and we should make the data property a number version like an easily comparable

45
00:03:19,980 --> 00:03:23,070
version of each of the different statistics that we want to show.

46
00:03:23,580 --> 00:03:26,070
So in other words I think would be awesome.

47
00:03:26,070 --> 00:03:31,440
Whenever we run movie templates for each of these different articles on the article itself I want to

48
00:03:31,440 --> 00:03:38,580
put in like a data value property and maybe set it to for this first box office value something like

49
00:03:38,610 --> 00:03:44,250
six hundred twenty three million I'll say something like data value is six hundred twenty three million

50
00:03:44,280 --> 00:03:51,390
or so then later on we decide to run our comparison rather than trying to look at the order of articles

51
00:03:51,390 --> 00:03:56,670
and figure out that we first have like box office then awards then met a score or whatever we can just

52
00:03:56,670 --> 00:04:02,190
read that data value property and compare it against the data value property for the first article on

53
00:04:02,190 --> 00:04:04,120
the other side of the screen.

54
00:04:04,170 --> 00:04:09,720
So in other words we're throwing the idea that this is like the box office statistic out the window

55
00:04:10,110 --> 00:04:11,670
inside the run comparison function.

56
00:04:11,670 --> 00:04:15,680
The only thing run comparison will take care about is that data value property.

57
00:04:15,960 --> 00:04:20,910
So we can just take a look at the data value property on each pair of articles and then take a look

58
00:04:20,910 --> 00:04:26,850
at which one is greater and apply the appropriate class to each one to color that notification as either

59
00:04:26,850 --> 00:04:29,160
green or yellow.

60
00:04:29,160 --> 00:04:34,350
Now this is yet another scenario where I know as I explain this it probably sounds crazy and a little

61
00:04:34,350 --> 00:04:35,440
bit complicated.

62
00:04:35,520 --> 00:04:40,830
So let's once again write some code as soon as we do I think you'll get a good idea of why we're doing

63
00:04:40,830 --> 00:04:41,350
this.

64
00:04:41,520 --> 00:04:44,340
So quick pause and we'll start to implement this approach in the next video.
