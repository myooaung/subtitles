1
00:00:00,880 --> 00:00:05,590
Well I think that we both understand exactly how this autocomplete widget is going to work in general.

2
00:00:05,590 --> 00:00:07,400
At least how we're going to interact with it.

3
00:00:07,420 --> 00:00:09,310
So let's start writing out some code.

4
00:00:09,310 --> 00:00:14,470
The first thing we're going to do or the first step is to just show a plain text input to the user.

5
00:00:14,560 --> 00:00:20,620
Anytime a user types inside there we're going to initiate a search of our API and try to find some corresponding

6
00:00:20,620 --> 00:00:22,200
list of movies.

7
00:00:22,270 --> 00:00:29,390
So to get started I can go back over to my code editor and find my index dot each time I'll file at

8
00:00:29,390 --> 00:00:30,920
the very bottom.

9
00:00:31,040 --> 00:00:35,730
I'm gonna find a div inside of here with the class of container you and I are going to add all of our

10
00:00:35,740 --> 00:00:40,930
each team l inside of this div the other each smell that you see right above it is responsible for just

11
00:00:40,930 --> 00:00:44,680
showing the header and we're not going to have to mess with any of that stuff at all for this entire

12
00:00:44,680 --> 00:00:45,250
application.

13
00:00:46,300 --> 00:00:51,640
The inside of that container I'm going to add in an input element.

14
00:00:51,850 --> 00:00:52,530
That's pretty much it.

15
00:00:52,540 --> 00:00:55,030
That's all the asian all we have to add for right now.

16
00:00:55,050 --> 00:01:01,280
Well then go back over to the index dot J.S. file and inside of here we'll add in a little bit of code

17
00:01:01,280 --> 00:01:07,340
to select that input element that will add in an event listener and we'll say that anytime a user types

18
00:01:07,340 --> 00:01:13,340
inside there we're going to run our fetch data function and try to search for some particular movie

19
00:01:15,270 --> 00:01:19,620
so at the very bottom of the file I'm going to delete the fetch data function call because we no longer

20
00:01:19,620 --> 00:01:24,390
want to search the API automatically when our application first starts.

21
00:01:24,600 --> 00:01:30,790
Well then select my input and assign it to an input variable they'll say document dot query selector

22
00:01:32,490 --> 00:01:42,040
input like so then I'll add on my event listener so I'll do an input dot add event listener.

23
00:01:42,210 --> 00:01:47,620
Now we're going to watch for the input event the input event is triggered anytime that a user changes

24
00:01:47,620 --> 00:01:53,150
the text inside that input and that's exactly what we want and as the second argument I'll put in my

25
00:01:53,150 --> 00:01:57,030
callback function that's going to be called with some event object.

26
00:01:57,110 --> 00:02:03,680
So now remember we can get access to that change text by referencing event not target not value that's

27
00:02:03,680 --> 00:02:07,380
going to be whatever the user just typed into that input.

28
00:02:07,430 --> 00:02:14,660
Now if we want to try to search the API we can take that variable right there and pass it as an argument

29
00:02:14,660 --> 00:02:19,820
into fetch data we can then do a little bit of work on fetch data to make sure that it receives an argument

30
00:02:20,180 --> 00:02:27,510
and he uses that as the query string or as the query for a search of the API so inside of my event listener

31
00:02:27,990 --> 00:02:36,570
I'm going to call that data with the value from the inputs Well then make sure that I receive that as

32
00:02:36,570 --> 00:02:37,830
an argument to this function.

33
00:02:37,830 --> 00:02:38,490
So I call that.

34
00:02:38,490 --> 00:02:46,290
How about search term like so and then we will make sure that we pass that in as a parameter right now.

35
00:02:46,310 --> 00:02:50,870
Remember that we refactor this prams object to look up details about a very specific movie.

36
00:02:51,410 --> 00:02:57,290
If we want to look up a collection different movies or do an actual search then instead of an S param

37
00:02:57,290 --> 00:03:01,110
right there or something that I presume we will replace it with an s.

38
00:03:01,370 --> 00:03:03,680
And that's just straight from the documentation that we are looking at.

39
00:03:03,680 --> 00:03:08,300
We can go back over really quickly if you want to and look at the search documentation if we want to

40
00:03:08,300 --> 00:03:08,980
do a search.

41
00:03:09,080 --> 00:03:15,720
We're going to add in an S parameter so then instead of searching for that very particular movie I.D.

42
00:03:15,810 --> 00:03:23,520
will instead search for search term and that should be at so let's say this file.

43
00:03:23,660 --> 00:03:28,910
I'll go back over again to refresh the page I see my search input.

44
00:03:29,120 --> 00:03:34,230
I'm also going to open up the network tab inside of my chrome console so that I can see all the different

45
00:03:34,230 --> 00:03:36,510
requests that we're making to the API.

46
00:03:36,510 --> 00:03:41,970
If I want to see only the requests that are javascript code or issuing we can click on the XY char button

47
00:03:41,970 --> 00:03:46,380
right here and that's going to filter by just requests that are being created from our javascript code

48
00:03:47,550 --> 00:03:50,340
well then start to type inside of your ad and we'll see what happens.

49
00:03:50,410 --> 00:03:52,630
It's going to search for Avengers event.

50
00:03:53,620 --> 00:03:56,430
Jurors like so okay.

51
00:03:56,510 --> 00:04:00,890
As soon as I started typing I saw a collection of different requests being issued.

52
00:04:00,890 --> 00:04:04,780
If I go to the very last request that was made I can click on it.

53
00:04:05,000 --> 00:04:10,230
I'll see the query string right there inside the URL says s equals Avengers all right.

54
00:04:10,250 --> 00:04:11,300
That's definitely good.

55
00:04:11,360 --> 00:04:16,480
And if I click on preview I'll see that I definitely get some search results for the Avengers movie.

56
00:04:16,520 --> 00:04:17,070
Perfect.

57
00:04:17,820 --> 00:04:22,230
Well it definitely looks like it's working out pretty well so far but there's just one little issue.

58
00:04:22,350 --> 00:04:26,700
We're doing a search of the API for every single key press.

59
00:04:26,790 --> 00:04:28,180
Is that a problem.

60
00:04:28,200 --> 00:04:29,150
I would say yes.

61
00:04:29,160 --> 00:04:32,160
This is not really ideal.

62
00:04:32,160 --> 00:04:38,800
The reason this is not ideal is that you and I only get to access the API 1000 times per day.

63
00:04:38,880 --> 00:04:43,990
So we've got a hard cap on the number of times we can reach out to search for the Avengers.

64
00:04:44,010 --> 00:04:46,830
I made a total of like twelve requests or so.

65
00:04:47,040 --> 00:04:51,450
I even made a little typo in there which means I had to make an additional three requests or so as I

66
00:04:51,450 --> 00:04:58,590
fix the typo so I just ate up 12 out of my 1000 possible requested I get to make for the entire day

67
00:04:58,890 --> 00:05:01,200
with that one single query.

68
00:05:01,380 --> 00:05:07,140
So what would be kind of nice is if we said Okay as soon as the user stops typing for a little bit of

69
00:05:07,140 --> 00:05:11,140
time then let's go ahead and do the search automatically.

70
00:05:11,190 --> 00:05:16,170
So in other words if I type out Avengers and then just sit here for like half a second and don't type

71
00:05:16,170 --> 00:05:23,550
anything more let's make a request then as opposed to doing a request for every single key press that's

72
00:05:23,550 --> 00:05:25,580
gonna be a little bit of complicated logic.

73
00:05:25,600 --> 00:05:29,350
Let's take a quick pause right here and figure out how we will implement that in the next video.
