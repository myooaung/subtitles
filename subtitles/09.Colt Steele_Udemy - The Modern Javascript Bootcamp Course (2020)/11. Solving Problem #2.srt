1
00:00:01,100 --> 00:00:01,490
All right.

2
00:00:01,560 --> 00:00:02,890
To problem number two.

3
00:00:02,900 --> 00:00:07,340
So now that we know how we're going to identify a person and the car that belongs to them.

4
00:00:07,430 --> 00:00:10,970
Now the question becomes what does that shopping cart actually look like.

5
00:00:10,970 --> 00:00:12,620
How are you going to represent a shopping cart.

6
00:00:12,620 --> 00:00:16,920
How are we going to store information inside of it's like a list of products and whatnot.

7
00:00:16,930 --> 00:00:21,740
So to answer question number two right here we're going to take a look at three different ways to store

8
00:00:21,770 --> 00:00:27,320
some representation of products inside of some kind of cart thingamajig.

9
00:00:27,320 --> 00:00:29,030
I'm going to show you three different approaches.

10
00:00:29,030 --> 00:00:32,040
The first two are going to be bad approaches.

11
00:00:32,450 --> 00:00:36,230
Just like before when we went through some bad solutions with something else we were discussing earlier

12
00:00:36,230 --> 00:00:40,880
on in the course the reason I'm going to show you some bad solutions here is that you can kind of develop

13
00:00:40,880 --> 00:00:43,330
a little bit of engineering sense and understand why.

14
00:00:43,460 --> 00:00:45,730
One way of doing this is kind of bad.

15
00:00:45,830 --> 00:00:48,060
And another way might be kind of good.

16
00:00:48,110 --> 00:00:52,980
So let's take a look at our bad first two options OK.

17
00:00:53,010 --> 00:00:58,890
So again we want to think about how we're going to store or kind of Associates a cart with some number

18
00:00:58,890 --> 00:01:01,290
of products being inside of its.

19
00:01:01,370 --> 00:01:02,490
So this is a bad approach.

20
00:01:02,490 --> 00:01:07,460
No one in bad approach number one a user might make a request to our server and say add product with

21
00:01:07,460 --> 00:01:13,980
I.D. one two three to my cart were then going to create some random I.D. to represent that cart for

22
00:01:13,980 --> 00:01:14,790
this user.

23
00:01:14,820 --> 00:01:19,480
So maybe in our case we create some random I.D. like nine eight seven and then we'll send back a response

24
00:01:19,480 --> 00:01:25,330
that says Hey your cart ideas 987 we'll store that 987 inside of that user's cookie.

25
00:01:25,410 --> 00:01:30,800
So anytime they make a followup request we're always going to receive back in the cookie cart I.D. is

26
00:01:30,800 --> 00:01:31,480
nine eight seven.

27
00:01:31,500 --> 00:01:37,800
We'll know who is making requests to our server then more specifically inside of our products repository.

28
00:01:38,060 --> 00:01:39,950
We might have our list of products.

29
00:01:39,950 --> 00:01:44,280
So like this is one product right here out of a big array of different products.

30
00:01:44,330 --> 00:01:50,300
So in order to somehow associate the user who just wanted to add decided to a cart and a product right

31
00:01:50,300 --> 00:01:57,350
here we could add in an additional property to each individual item something called like carts and

32
00:01:57,350 --> 00:02:04,470
then inside this array we can store the idea of every cart that this item belongs to so some other user

33
00:02:04,680 --> 00:02:10,620
made a request here so let's imagine some other browser makes a request and they also say Oh yeah at

34
00:02:10,620 --> 00:02:15,900
product retired you wanted three to my cart maybe for this other user user B we randomly generate an

35
00:02:15,900 --> 00:02:22,980
idea of like 555 and send that back and then inside of our products repository we might also add in

36
00:02:23,210 --> 00:02:25,720
by 5 to this carts array.

37
00:02:25,880 --> 00:02:31,590
So now whenever we look at this product right here we know that this product belongs to cart 8 7 and

38
00:02:31,660 --> 00:02:33,650
5 5 5.

39
00:02:33,710 --> 00:02:39,140
So this is one possible approach to handle this anytime that we want to figure out how many products

40
00:02:39,170 --> 00:02:42,080
or which user has which products inside their cart.

41
00:02:42,080 --> 00:02:45,470
We could iterate over all of our different products instead of a repository.

42
00:02:45,560 --> 00:02:51,980
We could look at the Cart I.D. And if say someone with a card I.D. of 5 5 5 asks for all the products

43
00:02:51,980 --> 00:02:56,930
that belong to them we'll look for all the products that have a current property that has 555 in that

44
00:02:56,930 --> 00:03:02,320
array and that means that this product must belong in this user's cart.

45
00:03:02,320 --> 00:03:08,020
Now the downside to this approach is that any time we want to ask about what products belong to what

46
00:03:08,020 --> 00:03:13,510
users we have to iterate through our entire list of products we have to go through every list of products

47
00:03:13,540 --> 00:03:15,020
or every single product we have.

48
00:03:15,070 --> 00:03:20,050
You have to look at that Curt's property for every single product we have to see if some given I.D.

49
00:03:20,230 --> 00:03:22,910
is present inside that array.

50
00:03:22,950 --> 00:03:28,300
In addition this approach also store some information about this cart stuff with a product.

51
00:03:28,350 --> 00:03:33,780
These are really two different types of information like a product object right here is really supposed

52
00:03:33,780 --> 00:03:37,110
to be just about a product and nothing else.

53
00:03:37,110 --> 00:03:41,670
It should just have titled price and image by adding on this cart's property right here.

54
00:03:41,670 --> 00:03:46,320
We're kind of polluting the definition of exactly what a product is.

55
00:03:46,340 --> 00:03:52,610
In addition over time as many many users come to our Web sites and add items to a cart and then leave

56
00:03:52,610 --> 00:03:57,980
our application forever well we would just eventually end up with all these kind of strangling or orphaned

57
00:03:58,010 --> 00:04:00,210
ideas floating inside this array.

58
00:04:00,500 --> 00:04:07,310
So we can imagine that if a million users came to our product they added one item each to their cart

59
00:04:07,490 --> 00:04:11,120
we would then end up with a million elements inside of that carts array right there.

60
00:04:11,690 --> 00:04:16,460
And so this array might grow without bounds without any clear way of when we would remove any I.D. out

61
00:04:16,460 --> 00:04:17,600
of there.

62
00:04:17,600 --> 00:04:24,330
So I would definitely say that this is not a very good approach okay approach number two.

63
00:04:24,340 --> 00:04:28,900
So this is also a bad approach but it starts to get a little bit more towards the realm of reason of

64
00:04:28,900 --> 00:04:30,810
something it kind of makes sense.

65
00:04:30,820 --> 00:04:35,380
So in this world we're going to once again have a user make a request to our server our server is going

66
00:04:35,380 --> 00:04:40,630
to generate some idea that represents this person's cart send that I.D. back to the browser at this

67
00:04:40,630 --> 00:04:42,760
time in order to represent that cart.

68
00:04:42,820 --> 00:04:48,220
We're going to create a separate repository called the Hertz repository inside of their will store an

69
00:04:48,220 --> 00:04:52,710
array of objects and each object represents one user's cart.

70
00:04:52,720 --> 00:04:58,480
So this would be the representation of the cart for the person who just said add product with I.D. one

71
00:04:58,470 --> 00:05:05,460
two three to my cart so then inside this object we might store the idea the cart and a products array

72
00:05:05,800 --> 00:05:08,900
and inside this products array will destroy the entire product.

73
00:05:08,940 --> 00:05:16,100
So there's product with idea one two three as a title pants a price in some image data as well so you

74
00:05:16,100 --> 00:05:21,800
can now imagine that Einstein someone asked to add an item to a cart we would look at our products repository

75
00:05:22,390 --> 00:05:29,060
find the appropriate item or product take that product and add it into the products array so this seems

76
00:05:29,060 --> 00:05:34,860
like it's kind of a reasonable approach but there's definitely a very large downside with this kind

77
00:05:34,860 --> 00:05:35,510
of style.

78
00:05:35,580 --> 00:05:40,950
We're essentially making a copy of this entire product definition and storing it inside other cards

79
00:05:40,950 --> 00:05:42,260
repository.

80
00:05:42,270 --> 00:05:43,440
So here's the big problem.

81
00:05:43,500 --> 00:05:48,300
Let's imagine that at some point in time we come through our admin panel and we decide to update the

82
00:05:48,300 --> 00:05:52,860
price points of this product inside of our products repository.

83
00:05:52,860 --> 00:05:59,500
So we could say like OK I know what this price to be ninety dollars but if we think back to this card's

84
00:05:59,500 --> 00:06:04,650
repository we still have some representation of that product right here.

85
00:06:04,650 --> 00:06:09,040
And it has the exact same properties but now they are totally out of date.

86
00:06:09,240 --> 00:06:12,930
This record inside of our card's repository still has a price of 50.

87
00:06:12,930 --> 00:06:17,820
So if we wanted to take this approach every single time that we edited a product we would have to look

88
00:06:17,820 --> 00:06:19,840
through all the different cards we have.

89
00:06:20,040 --> 00:06:23,940
We'd have to look through all the different products that they store and make sure that we update the

90
00:06:23,940 --> 00:06:26,420
appropriate properties on every single one.

91
00:06:26,610 --> 00:06:30,300
Which would definitely eventually be a very expensive operation.

92
00:06:30,330 --> 00:06:32,790
So this is another approach approach number two.

93
00:06:32,790 --> 00:06:37,200
And I would say that this is also not a very good approach okay.

94
00:06:37,240 --> 00:06:41,140
Now it's on to you approach number three and this is the one that we're going to use inside of our application

95
00:06:42,070 --> 00:06:47,130
so in this approach we're going have something very similar to approach number two that we just discussed.

96
00:06:47,130 --> 00:06:49,270
We're still going to have a product's repository.

97
00:06:49,290 --> 00:06:51,420
We're also going to have a Curt's repository.

98
00:06:51,630 --> 00:06:57,390
So every time a user attempts to add a product to a cart if they don't have a cart already we're going

99
00:06:57,390 --> 00:07:02,250
to generate a cart for them which means that we're going to essentially just create a new record inside

100
00:07:02,250 --> 00:07:08,660
of our card's repository that's going to have a randomly assigned I.D. and a products array at this

101
00:07:08,660 --> 00:07:14,270
time instead of storing the entire product inside this right we're going to instead only store the I.D.

102
00:07:14,300 --> 00:07:15,800
of the product.

103
00:07:15,800 --> 00:07:20,060
So in other words if a user said give me product one two three and that corresponds with this pair of

104
00:07:20,060 --> 00:07:25,700
pants right here then inside of this products array for this cart we're going to store a object that

105
00:07:25,700 --> 00:07:33,140
says I.D. one two three and the quantity of that product as well so the idea of one two three that is

106
00:07:33,140 --> 00:07:37,500
essentially something that is pointing over to our products repository.

107
00:07:37,550 --> 00:07:41,090
This is the idea of the product that the user had added.

108
00:07:41,090 --> 00:07:45,590
So if you ever wanted to figure out the different products that a user has added to their cart we would

109
00:07:45,590 --> 00:07:50,840
take a look at the products array and for every object inside of here we would take that I.D. and look

110
00:07:50,840 --> 00:07:56,900
up that I.D. inside of the product's repository and say OK there we go product with idea 1 2 3 OK.

111
00:07:56,960 --> 00:08:02,220
This person ordered some pants the price of 50 and there's the image as well.

112
00:08:02,240 --> 00:08:05,750
Now the good thing about this approach is that it solves a lot of the problems that we just discussed

113
00:08:05,780 --> 00:08:11,940
on the other two so at this approach we could very easily make updates to the original products repository.

114
00:08:11,940 --> 00:08:16,980
So for example we could update the title or the price or the image and we would not have to worry about

115
00:08:16,980 --> 00:08:21,820
going through our carts as well and updating all those things.

116
00:08:21,840 --> 00:08:26,330
The downside is that the code involved with this is definitely a little bit more complicated has now.

117
00:08:26,340 --> 00:08:31,500
Anytime that you want to tell a user about all the different products they have we have to like I said

118
00:08:31,560 --> 00:08:36,120
just a moment ago go through this array find all those ideas and then look up the appropriate ideas

119
00:08:36,150 --> 00:08:37,710
inside of our products repository.

120
00:08:37,890 --> 00:08:42,010
It's definitely just a little bit more code on that front okay.

121
00:08:42,030 --> 00:08:42,880
So that's pretty much it.

122
00:08:42,880 --> 00:08:45,010
Those are three possible solutions we can take.

123
00:08:45,010 --> 00:08:50,620
And again we're going to go with solution number three so we're going to have a card's repository that's

124
00:08:50,660 --> 00:08:53,240
going to store a array of objects.

125
00:08:53,240 --> 00:08:56,390
The idea of each of these is going to be stored inside of a user's cookie.

126
00:08:56,390 --> 00:09:01,490
So we know exactly what user is tied to which cart and each cart is going to have the products array

127
00:09:02,270 --> 00:09:07,400
each array of products is going to store the idea of a product and a quantity in the cart as well.

128
00:09:08,040 --> 00:09:12,230
So now that we've got a better idea of how to approach this let's take a pause right here and start

129
00:09:12,260 --> 00:09:13,880
our implementation in the next video.
