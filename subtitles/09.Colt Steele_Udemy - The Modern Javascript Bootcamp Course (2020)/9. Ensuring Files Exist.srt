1
00:00:01,350 --> 00:00:01,620
All right.

2
00:00:01,650 --> 00:00:06,270
And we've got our action function put together and we've seen that this args object is going to possibly

3
00:00:06,270 --> 00:00:07,740
have a file name inside of it.

4
00:00:07,740 --> 00:00:11,970
Let's start to move some code around and start progressing our program forward.

5
00:00:11,970 --> 00:00:15,870
So to get started I'm going to delete the console log of ARGs that we have inside there.

6
00:00:15,870 --> 00:00:18,520
I'm going to uncommon all the code we have at the bottom.

7
00:00:18,570 --> 00:00:26,060
I'm going to cut all of it and place it into the action function then inside this code where we set

8
00:00:26,060 --> 00:00:28,030
up our token our watcher right now.

9
00:00:28,100 --> 00:00:32,690
If there's ever a change event or a deletion event we're just running that little console log function

10
00:00:33,320 --> 00:00:35,960
let's update that and instead call starts.

11
00:00:35,990 --> 00:00:41,810
So we're gonna start be the place where we start up a users program or once we detect a change or whatever

12
00:00:41,810 --> 00:00:48,080
else stop the existing version that program and then restart its so rather than doing the console log

13
00:00:48,080 --> 00:00:53,570
right there and delete that function and replace it with start and I'll do the same thing with unlink

14
00:00:53,630 --> 00:00:54,080
as well

15
00:00:58,040 --> 00:00:58,310
OK.

16
00:00:58,430 --> 00:01:03,770
So now inside of action the next time we should probably do is decide whether or not we are going to

17
00:01:03,770 --> 00:01:08,990
use the file name that the user provided or if we're going to default to running the index dot J.S.

18
00:01:08,990 --> 00:01:09,750
file instead.

19
00:01:09,980 --> 00:01:12,530
Remember that's why we made this argument optional.

20
00:01:12,560 --> 00:01:17,500
We said that if the user does not provide a file name we'll just try to see if there is an index not

21
00:01:17,510 --> 00:01:25,140
just file if there is we'll default to using that instead so inside of you're going to first check to

22
00:01:25,140 --> 00:01:32,710
see if we have a file name being provided we can access that by referencing our export file name or

23
00:01:32,770 --> 00:01:38,050
alternatively we can just do some D structuring out of the args object which would just reduce the amount

24
00:01:38,050 --> 00:01:40,530
of code we write inside of here by a very small amount.

25
00:01:40,540 --> 00:01:49,110
So let's try that instead I'm going to delete args replace it with a set of parentheses then add a set

26
00:01:49,110 --> 00:01:52,680
of curly braces and do file name like so

27
00:01:56,360 --> 00:02:00,690
OK so now we need to check to see if this file name exists.

28
00:02:00,910 --> 00:02:04,690
If it does not exist we will default to using index dot J.S..

29
00:02:04,870 --> 00:02:10,690
And finally whatever file name we end up with we need to make sure that that file actually exists inside

30
00:02:10,690 --> 00:02:13,780
the directory that our program is being called from.

31
00:02:13,780 --> 00:02:16,030
Because if a user tries to run a file that doesn't exist.

32
00:02:16,030 --> 00:02:19,990
Well we probably want to show an error or something similar.

33
00:02:20,030 --> 00:02:24,480
Let's first check and see whether or not the user provided a file name.

34
00:02:24,470 --> 00:02:34,010
So I'll simply say about name is going to be a file name or index dot J.S. it's a very simply here we

35
00:02:34,010 --> 00:02:40,220
are going to say OK if we don't get the file name we will default to a string of index dot J.S. so the

36
00:02:40,220 --> 00:02:45,170
next up we need to check and see whether or not this file actually exists to do so.

37
00:02:45,200 --> 00:02:48,080
We're gonna go back to the FSA standard library.

38
00:02:48,130 --> 00:02:50,860
It's going to go back to my node documentation.

39
00:02:50,900 --> 00:02:55,430
Remember you can find it at no J S dot org slash API.

40
00:02:55,560 --> 00:03:00,910
Well then go down to the file system section and inside of here we're going to look for a function called

41
00:03:01,300 --> 00:03:06,990
Access remember there are multiple different versions of a lot of the different functions inside of

42
00:03:06,990 --> 00:03:07,540
here.

43
00:03:07,590 --> 00:03:12,030
There are the callback based versions which is what I'm looking at right here and there are also the

44
00:03:12,030 --> 00:03:15,510
promise based versions as well for our application.

45
00:03:15,510 --> 00:03:21,150
We want to use the promise based version so I'm not going to click on the first access I see right here.

46
00:03:21,150 --> 00:03:27,600
Instead I'm going to hit enter one more time and find the FSA promises version of Access so we can work

47
00:03:27,600 --> 00:03:34,330
with this function as through a promise once I find that I'll click that link.

48
00:03:34,390 --> 00:03:39,460
The purpose of this function is essentially just to check and see whether or not a file exists on the

49
00:03:39,460 --> 00:03:40,440
hard drive.

50
00:03:40,540 --> 00:03:46,270
It can also be used to see whether or not the user has permission to read or write to that file as well.

51
00:03:46,270 --> 00:03:50,150
But the default behavior is just to see if the file even exists.

52
00:03:50,200 --> 00:03:55,330
So we can use this function to ensure that the file exists before we tried to actually run it.

53
00:03:55,330 --> 00:04:00,970
So let's require in the FSA module to our project we're going to use access and just make sure that

54
00:04:00,970 --> 00:04:10,360
the file exists I'm going to go back over at the top I'm going gonna add in a require statement for

55
00:04:10,360 --> 00:04:10,960
F S

56
00:04:14,110 --> 00:04:20,360
then after we get the name of the file that we are looking for let's do in a wait.

57
00:04:20,410 --> 00:04:31,160
F S dot promises not access name like so because we are using the await keyword inside of here.

58
00:04:31,210 --> 00:04:35,870
We need to make sure that we mark the enclosing function as async so I'll do that right away.

59
00:04:37,820 --> 00:04:44,130
So now if this name file does not exist then this entire Steven right here is going to throw an error.

60
00:04:44,130 --> 00:04:49,230
So we should probably wrap that statement with a try catch statement so we can grab that error and handle

61
00:04:49,230 --> 00:04:57,510
it appropriately so I'm going to wrap that with a try I'll put the closing curly braces on the other

62
00:04:57,510 --> 00:04:58,330
side.

63
00:04:58,590 --> 00:05:02,470
I'll say catch air then instead of here.

64
00:05:02,490 --> 00:05:05,630
We don't really care so much about the air object that comes back.

65
00:05:06,210 --> 00:05:10,710
If anything goes wrong whatsoever with the access function chances are it's because the user either

66
00:05:10,710 --> 00:05:13,930
doesn't have access to the file or it just plain doesn't exist.

67
00:05:14,820 --> 00:05:19,230
So rather than trying to interpret the error that comes back I'm just going to immediately throw a new

68
00:05:19,230 --> 00:05:20,080
error right here.

69
00:05:20,160 --> 00:05:23,420
That explains exactly what went wrong to the user.

70
00:05:23,420 --> 00:05:25,710
So I'm going to say throw new error

71
00:05:28,690 --> 00:05:35,530
and then we'll put its here something like could not find the file and it will put in the name of the

72
00:05:35,530 --> 00:05:42,220
file so we can either do a plus name or alternatively a little bit better way would TV use a template

73
00:05:42,220 --> 00:05:42,940
string.

74
00:05:43,080 --> 00:05:48,660
So rather than using the single quotes right here are replace with back to X delete the plus name at

75
00:05:48,660 --> 00:05:56,770
the end and then do the dollar sign curly brace and put name in like so okay.

76
00:05:56,820 --> 00:05:59,960
Let's say this go back over to our eternal and test out.

77
00:06:00,060 --> 00:06:04,500
We're just going to make sure that if we try to run some kind of file with our watch it tool that doesn't

78
00:06:04,500 --> 00:06:07,490
exist we should see an error like the one right there.

79
00:06:08,000 --> 00:06:11,860
So I gonna go back over to my terminal Iran watch it.

80
00:06:11,860 --> 00:06:15,790
Else put in some random string for a file that doesn't exist at all.

81
00:06:15,790 --> 00:06:19,690
And as soon as I do so I see the appropriate Error Could not find the file blah blah blah.

82
00:06:20,550 --> 00:06:23,010
Okay well that definitely looks like it works.

83
00:06:23,110 --> 00:06:25,380
So let's take a quick pause right here.

84
00:06:25,390 --> 00:06:30,050
We now know that if we get past this tri catch statement that the file actually does exist.

85
00:06:30,190 --> 00:06:34,990
And so the next thing we need to do is add in some code to our start function to actually run the user's

86
00:06:35,050 --> 00:06:37,030
file using no J.S..

87
00:06:37,090 --> 00:06:38,200
And then watch it.

88
00:06:38,200 --> 00:06:42,940
Anything for changes anytime a change occurs will stop the existing process and start a new one.

89
00:06:43,280 --> 00:06:45,640
A quick pause and I'll see you in just a minute.
