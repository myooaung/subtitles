WEBVTT
1
00:00:00.860 --> 00:00:01.060
All right.

2
00:00:01.070 --> 00:00:03.340
Let's continue working on our breadth first search.

3
00:00:03.380 --> 00:00:05.900
So we've now got our list of files right here.

4
00:00:05.900 --> 00:00:09.050
So this is going to be the initial list of files that we need to walk.

5
00:00:09.050 --> 00:00:11.360
Remember that was the entire idea behind this algorithm.

6
00:00:11.360 --> 00:00:12.490
We take a look at that directory.

7
00:00:12.500 --> 00:00:17.270
Get the files and folders throw them into an array that was returned to us automatically so that's the

8
00:00:17.270 --> 00:00:19.310
array right there that we care about.

9
00:00:19.310 --> 00:00:22.700
Now we're going to iterate through files and for everything inside there.

10
00:00:22.700 --> 00:00:27.020
We're going to check and see for working with the directory if we are then we're going to look inside

11
00:00:27.020 --> 00:00:33.960
of it and see if these are all files and folders inspect them and then handle them appropriately so

12
00:00:33.990 --> 00:00:40.140
instead of the returned files right here I'm going to replace it with a four letter file of files

13
00:00:42.890 --> 00:00:49.380
so now file is going to be the name of the file or the folder that we are currently iterating over so

14
00:00:49.390 --> 00:00:50.880
we need to take a look at this thing.

15
00:00:50.920 --> 00:00:53.950
And first off decide if it is a file or a folder.

16
00:00:53.950 --> 00:00:58.930
Remember how we did that earlier inside the course in order to decide if something was a file or a folder.

17
00:00:58.930 --> 00:01:06.160
We made use of the L stat function also from the no J.S. Standard Library the FSA module in particular.

18
00:01:06.160 --> 00:01:08.260
So just like reader there are three versions.

19
00:01:08.650 --> 00:01:16.250
We've got the callback the sync version if we keep going down we'll find FSS promises not l stat so

20
00:01:16.270 --> 00:01:21.250
this will give us back a stats object that we can use to decide whether or not the given thing that

21
00:01:21.250 --> 00:01:23.010
we're looking at is a file or a folder.

22
00:01:23.020 --> 00:01:28.870
Because right now when we call reader all we get back is whether or not or the name of this file we

23
00:01:28.870 --> 00:01:30.970
don't know if it's a directory or a file.

24
00:01:30.970 --> 00:01:36.040
So that's why we have to call l step on it get that object back and then you use these stats object

25
00:01:36.040 --> 00:01:39.130
to decide if it's a file or a folder.

26
00:01:39.250 --> 00:01:39.470
Ok.

27
00:01:39.500 --> 00:01:43.660
So inside of here we're going to first take the name of the file that we're working with.

28
00:01:43.700 --> 00:01:49.580
This is just the simple name of the file and we're going to convert it into the full absolute name of

29
00:01:49.580 --> 00:01:50.140
the file.

30
00:01:50.150 --> 00:01:53.550
So like the directory plus the file name as well.

31
00:01:53.690 --> 00:02:02.250
So to do so I'll say file path is path dot join we're going to join together at the root directory that

32
00:02:02.250 --> 00:02:02.960
we're operating on.

33
00:02:02.970 --> 00:02:06.280
So target path and the name of the file as well.

34
00:02:06.330 --> 00:02:11.250
And that's going to give us one big long absolute path and file name to the file we're currently working

35
00:02:11.250 --> 00:02:12.290
on.

36
00:02:12.490 --> 00:02:15.730
Now we're making use of the path module also from the node standard library.

37
00:02:15.730 --> 00:02:18.570
So let's make sure that we get a require statement up here for that as well.

38
00:02:21.910 --> 00:02:25.710
Then after that let's run our l stack command on the file path.

39
00:02:25.930 --> 00:02:36.570
So let's say con stats is a weight F S dot promises l stat we'll pass in the file path so remember that

40
00:02:36.570 --> 00:02:43.110
stats object we can take a look at that thing here's the documentation for the stats object stats object

41
00:02:43.140 --> 00:02:49.890
has a couple of methods tied to it named is directory and also is file so we're going to call is directory

42
00:02:49.920 --> 00:02:56.140
and is file on that stats object to decide if we're working with a file or a folder so I'll first take

43
00:02:56.140 --> 00:03:05.210
care of the file case I'll say if stats dot is file and then I'll do my else case else if stats dot

44
00:03:05.270 --> 00:03:11.510
is directory.

45
00:03:11.650 --> 00:03:16.990
Now let's take care of this file case first when we look at each individual file remember what the entire

46
00:03:16.990 --> 00:03:21.700
goal of is of this function we're working on right now we're trying to find all the different files

47
00:03:21.940 --> 00:03:28.300
that have a name of something something dot test dot J.S. so we need to detect whether or not this file

48
00:03:28.300 --> 00:03:34.170
that we're operating on has the dot test dot J.S. extension we can use a very simple approach for that

49
00:03:34.920 --> 00:03:45.730
we'll say if this is a file and file includes the string dot test dot J.S. and that means that this

50
00:03:45.730 --> 00:03:48.950
is a file that we want to care about and we want to save a reference to it.

51
00:03:50.170 --> 00:03:51.720
So backup inside of our constructor.

52
00:03:51.740 --> 00:03:56.660
We created the this dot files instance variable and we set it equal to an array.

53
00:03:56.660 --> 00:04:00.860
So this is where we're going to store the absolute parts of all the different test files that we have

54
00:04:01.070 --> 00:04:05.060
so we can eventually invoke them.

55
00:04:05.070 --> 00:04:07.030
Now one thing ought to mention about the code we have right now.

56
00:04:07.050 --> 00:04:11.940
We have an instance variable called this dot files and we also have a local variable inside of our collect

57
00:04:11.940 --> 00:04:14.610
files function called simply files.

58
00:04:14.610 --> 00:04:18.270
This is the kind of thing that very easily leads to confusion because you might sit there and say to

59
00:04:18.270 --> 00:04:19.410
yourself Hey wait.

60
00:04:19.410 --> 00:04:22.230
Am I working with this files or the variable files.

61
00:04:22.980 --> 00:04:29.820
So just to alleviate any confusion here let's date the name of this dot files to this dot test files.

62
00:04:29.820 --> 00:04:31.290
It's also a little bit more descriptive.

63
00:04:31.290 --> 00:04:38.280
It says this is the location of all the test files that we care about so if we have a thing that is

64
00:04:38.280 --> 00:04:42.140
a file and it has that name let's add it into that test files array.

65
00:04:42.240 --> 00:04:48.530
So let's say this dot test files dot push and rather than just throwing the name of the file inside

66
00:04:48.530 --> 00:04:48.870
there.

67
00:04:48.920 --> 00:04:53.300
So like file path let's instead wrap it inside of an object.

68
00:04:53.420 --> 00:04:57.170
I'll give the object a property name and have that be the file path.

69
00:04:57.320 --> 00:04:59.840
You'll see why we're creating an object here in just a little bit

70
00:05:02.930 --> 00:05:03.930
OK.

71
00:05:04.060 --> 00:05:09.310
So now let's handle the other case the case in which we have a directory so remember if we have a directory

72
00:05:09.790 --> 00:05:15.310
we want to take a look at that directory we want to find all the children inside of it.

73
00:05:15.310 --> 00:05:16.780
Let's take a look at test instead.

74
00:05:16.810 --> 00:05:19.950
So if we have a directory we want to find all the children's side of it.

75
00:05:21.930 --> 00:05:26.010
And we want to add it into our array

76
00:05:29.870 --> 00:05:33.220
so for that we're gonna come down to our Elsa.

77
00:05:33.260 --> 00:05:41.460
Right here we'll say counts child files is a wait f s dot promises read DIR.

78
00:05:41.530 --> 00:05:45.730
So this is what's going to give us everything inside the current file that we're working on we'll pass

79
00:05:45.730 --> 00:05:50.380
in the file path loops lowercase P.

80
00:05:50.420 --> 00:05:57.320
There we go so now that we've got that big array of all that stuff we care about we're going to join

81
00:05:57.320 --> 00:06:03.600
it all into or push all that stuff into the files array that we're currently iterating over so to do

82
00:06:03.600 --> 00:06:08.850
so we'll save files not push and we're not going to say child files.

83
00:06:08.970 --> 00:06:13.740
Remember child falls right here is going to be an array of strings files is an array of strings.

84
00:06:13.740 --> 00:06:18.450
If we called simply files not push we would end up with something looks like this something it says

85
00:06:18.450 --> 00:06:21.520
like hey here's our index dot J.S. file or whatever else.

86
00:06:21.600 --> 00:06:26.850
And then if we push in an array of strings we would end up with a nested array inside there with some

87
00:06:26.850 --> 00:06:31.310
other file names of like whatever s our C directory and test and so on.

88
00:06:31.380 --> 00:06:33.720
So we don't want to directly push in child files.

89
00:06:33.720 --> 00:06:39.750
Instead we want to add in each element inside of child files to the original files array.

90
00:06:39.960 --> 00:06:44.460
So to do that we can make use of the dot dot dot syntax.

91
00:06:44.540 --> 00:06:51.090
So that says Take everything from child files all the elements inside that array and add each one individually

92
00:06:51.360 --> 00:06:52.470
into the files array

93
00:06:56.000 --> 00:07:03.330
one other little thing to be aware of your when we do this file or when we iterate over our file.

94
00:07:03.330 --> 00:07:05.870
We are getting just the name of the file by itself.

95
00:07:06.630 --> 00:07:12.930
So in other words right now when we get that child files array we would get back simply at test start

96
00:07:12.940 --> 00:07:17.250
J.S. in widgets and we would essentially take these things and add them into the array.

97
00:07:17.250 --> 00:07:22.950
Down here the reason that this is an issue is that when we eventually iterate through all the elements

98
00:07:22.950 --> 00:07:28.300
inside the array we then at some point call path not join with target path and file.

99
00:07:28.380 --> 00:07:33.490
So in other words we would end up with something like Slash users.

100
00:07:33.520 --> 00:07:39.400
Steven Greider workspace whatever flash widgets and a problem here is that we didn't capture any of

101
00:07:39.400 --> 00:07:45.570
the names of the earlier files or folders that we were had to walk through to get to the test folder.

102
00:07:45.820 --> 00:07:51.500
So this would fail right here because we haven't put in the name movies inside there.

103
00:07:51.650 --> 00:07:56.240
So to make sure that we do that before we push all this stuff into the array we're going to map over

104
00:07:56.240 --> 00:08:03.100
it really quickly we'll say that for each file which I will abbreviate as simply f we will call path

105
00:08:03.240 --> 00:08:08.820
dot join and join together the name of the current file that we were iterating over in this case we

106
00:08:08.820 --> 00:08:17.560
know that's a folder by this point and F Ok I know this is some pretty nasty stuff right here.

107
00:08:17.560 --> 00:08:19.120
This is all the code we have to write.

108
00:08:19.120 --> 00:08:20.540
We are now all done.

109
00:08:20.770 --> 00:08:25.960
If any this is confusing I would highly encourage you to add in some console logs inside of here and

110
00:08:25.960 --> 00:08:30.750
then run the program inside of any given directory on your machine try to tinker around with some of

111
00:08:30.750 --> 00:08:36.430
the code like for example take off the map statement we just added if that was confusing you're going

112
00:08:36.440 --> 00:08:37.800
to run into an error very quickly.

113
00:08:37.810 --> 00:08:42.610
You can do a little bit of debugging and see exactly why we just added that little last part in and

114
00:08:42.610 --> 00:08:45.230
the same goes for just about everything else inside of here as well.

115
00:08:46.770 --> 00:08:51.420
Now at the bottom of collect files just so we can test this out I'm going to once again return.

116
00:08:51.420 --> 00:08:53.010
So we don't need to return yet.

117
00:08:53.070 --> 00:08:54.900
We don't need to return any files just yet.

118
00:08:54.900 --> 00:08:59.950
We actually have the test files instance variable so in order to test this out we'll go back over to

119
00:08:59.950 --> 00:09:06.680
our indexed j ust file we no longer have to receive anything because we're not returning a thing and

120
00:09:06.800 --> 00:09:12.890
then for the consulate statement I'll update it to run our dot test files and let's say this go back

121
00:09:12.890 --> 00:09:17.940
over to our terminal and run it anywhere inside of our project.

122
00:09:17.950 --> 00:09:22.450
So I'm going to see an empty array in many locations because remember we now have an implementation

123
00:09:22.480 --> 00:09:29.360
that looks specifically for the dot test dot J.S. extension so if I end up going back over to the testing

124
00:09:29.360 --> 00:09:36.410
folder that we just had a moment ago some movies testing inside of there we've got the test directory

125
00:09:37.430 --> 00:09:39.850
and inside of it is a test out J.S. file.

126
00:09:40.110 --> 00:09:45.910
So if we invoke Tumi right here I would expect to see an object that has the path to that autocomplete

127
00:09:46.110 --> 00:09:48.960
test out his file and it looks like I do.

128
00:09:49.170 --> 00:09:54.450
And what's more you'll notice that is the full absolute directory as well.

129
00:09:54.600 --> 00:09:59.020
So little bit nasty but we got through it so let's take a quick pause right here.

130
00:09:59.040 --> 00:10:05.890
We've now completed this kind of step 1 to our approach we've stored a reference to each test file we

131
00:10:05.890 --> 00:10:06.460
find.

132
00:10:06.460 --> 00:10:10.870
So now we need to think about how we're going to actually execute all these different files so quick

133
00:10:10.870 --> 00:10:12.940
pause and I'll see you in just a minute.
