WEBVTT
1
00:00:00.180 --> 00:00:06.660
There is a special keyword in JavaScript called Break which we can use instead of loops to break out

2
00:00:06.660 --> 00:00:09.180
of that loop to stop its execution.

3
00:00:09.180 --> 00:00:16.350
Whenever javascript encounters break that loop that it's enclosed in is done so you can use this technically

4
00:00:16.350 --> 00:00:17.010
in a for loop.

5
00:00:17.010 --> 00:00:20.180
It's pretty uncommon but we could.

6
00:00:20.480 --> 00:00:26.010
And the reason it's uncommon is that for loop you're writing the exact rules you're writing how many

7
00:00:26.010 --> 00:00:27.000
times it should run.

8
00:00:27.270 --> 00:00:34.070
So for I equals zero I less than 10 I plus plus I know how many times this is going to run.

9
00:00:34.410 --> 00:00:38.950
Let's say I'll constantly log Hi each time and then I'll break.

10
00:00:39.000 --> 00:00:50.050
When I is equal to five if I equals five I'll call break and this breaks out of that loop.

11
00:00:50.070 --> 00:00:51.870
Let's see what happens.

12
00:00:51.940 --> 00:00:53.620
Zero one two three four five.

13
00:00:53.730 --> 00:00:56.550
We encounter the break and the loop is done.

14
00:00:56.550 --> 00:01:01.920
Like I said it's not very commonly used in a for loop because why not just write this for loop to go

15
00:01:01.920 --> 00:01:06.340
from zero to five instead of zero through ten and then stopping halfway through.

16
00:01:06.540 --> 00:01:08.490
But it is something that you can do.

17
00:01:08.520 --> 00:01:14.850
Also I should mention if you have multiple loops and you break in one of the nested loops it does not

18
00:01:14.940 --> 00:01:21.120
stop all loops from executing it will only stop the inner loop or the current loop that break is located

19
00:01:21.120 --> 00:01:21.470
in.

20
00:01:21.540 --> 00:01:27.930
But like I said not that common in a for loop but it can be common in a while loop in fact using break

21
00:01:27.960 --> 00:01:33.990
we can restructure our while loop from earlier this one where we had a guessing game which wasn't much

22
00:01:33.990 --> 00:01:39.930
of a game for us but for the computer maybe guessing a random number over and over until the guests

23
00:01:39.930 --> 00:01:41.030
match the target.

24
00:01:41.190 --> 00:01:48.060
We could rewrite that using break in a while loop and this might seem odd to write this loop right here.

25
00:01:48.060 --> 00:01:53.920
While true but we can do this as long as we break out at some point.

26
00:01:54.090 --> 00:01:56.610
So this is basically saying loop forever.

27
00:01:56.670 --> 00:01:59.760
But then in the loop we're going to say not so fast.

28
00:01:59.760 --> 00:02:02.210
If this condition is true break out of the loop.

29
00:02:02.250 --> 00:02:08.960
If we wanted to get this exact same logic going just uncommon most of this we will pick our target and

30
00:02:08.960 --> 00:02:18.420
a guess and then while true if Target equals guess we will break.

31
00:02:18.420 --> 00:02:28.940
Otherwise we will make a new guess guess equals math top for math at random and at the bottom we'll

32
00:02:28.950 --> 00:02:34.650
print the target and the guess once you've won congrats you win and then let's also print it here so

33
00:02:34.650 --> 00:02:40.560
we can see what's going on and I can get rid of my original while loop so we still have our logic to

34
00:02:40.560 --> 00:02:44.380
get the two random numbers and then we have this loop that seems crazy.

35
00:02:44.450 --> 00:02:48.750
It seems like it should be an infinite loop while True just the loop forever.

36
00:02:48.810 --> 00:02:52.650
But then we have our condition that says if Target is the same as guests break.

37
00:02:52.650 --> 00:02:58.320
Now if that break doesn't happen we'll print out Target and guests and then we'll get a new guess and

38
00:02:58.320 --> 00:03:04.110
the loop starts over because it's still true while true it's going to go forever until we break.

39
00:03:04.110 --> 00:03:07.050
If I run this you can see it still works.

40
00:03:07.050 --> 00:03:11.460
Target is 9 guesses 7 target 9 guess 1 guess was 9.

41
00:03:11.670 --> 00:03:14.450
So the loop broke right there and then we print.

42
00:03:14.460 --> 00:03:16.460
Congrats you win now.

43
00:03:16.470 --> 00:03:22.530
I'm not such a big fan of this approach because of two main reasons one it can be easy to end up with

44
00:03:22.560 --> 00:03:29.010
infinite loops but the main reason I don't like it is writing while true is just not very some very

45
00:03:29.010 --> 00:03:31.290
explanatory or informational.

46
00:03:31.380 --> 00:03:39.780
If you look at it I would prefer to write something that was maybe while game not maybe not game over.

47
00:03:39.840 --> 00:03:45.870
I think that's better and have a boolean called Game Over and you could change boolean or change came

48
00:03:45.870 --> 00:03:48.660
over from true to false or false to true.

49
00:03:48.660 --> 00:03:54.420
So for me when I look at this loop here you can change this and structure it in a better way while still

50
00:03:54.420 --> 00:03:55.100
using break.

51
00:03:55.470 --> 00:03:58.520
But I just don't find it as intuitive to look at.

52
00:03:58.710 --> 00:04:03.870
But I did want to show you break because it is used occasionally again it will break out of the loop.

53
00:04:03.870 --> 00:04:08.580
It's located in but if there are nested loops it will not break all of them.

54
00:04:08.580 --> 00:04:14.430
It breaks out of its current loop it stops its execution cold in its tracks even if it was set to go

55
00:04:14.430 --> 00:04:15.960
off a thousand more times.

56
00:04:16.110 --> 00:04:18.170
If it encounters break then it's done.
