WEBVTT
1
00:00:00.610 --> 00:00:03.430
Time to move on to the last aspect of our testing framework.

2
00:00:03.460 --> 00:00:07.850
So in this section we're going to make sure that we can test a browser based javascript application.

3
00:00:07.960 --> 00:00:13.750
Even though we are running some code based on no J.S. remember the whole issue here is that with no

4
00:00:13.750 --> 00:00:16.770
JSA we do not have access to the browser.

5
00:00:16.810 --> 00:00:21.220
So the question of how do we actually test a browser based javascript application starts to get really

6
00:00:21.220 --> 00:00:27.340
kind of complicated because that browser based app is going to try to access the DOM use methods that

7
00:00:27.340 --> 00:00:32.000
are built into the browser and so on so how are we gonna do this.

8
00:00:32.000 --> 00:00:34.580
Well we're going to kind of cheat so to speak.

9
00:00:34.580 --> 00:00:40.550
We're going to run a little library inside of our testing tool that is going to simulate a browser inside

10
00:00:40.550 --> 00:00:42.030
of no J.S..

11
00:00:42.050 --> 00:00:45.200
Let's take a look at the library that we're going to use to actually do this.

12
00:00:45.230 --> 00:00:53.250
So I got gonna go back over to NPM J.S. dot com and I'll do a search for J.S. Dom and I'll find the

13
00:00:53.250 --> 00:00:58.600
first results right here the Jamestown Project right here.

14
00:00:58.600 --> 00:01:02.740
Essentially gives us a copy of a running browser inside of no us.

15
00:01:02.800 --> 00:01:06.970
Now when I say a copy of a running browser it's not actually a browser per say.

16
00:01:07.030 --> 00:01:12.160
There's not going to be any window that appears there is no actual window that pops up and shows web

17
00:01:12.160 --> 00:01:17.440
pages or anything like that instead is a re-employment mission of a lot of the code that runs in the

18
00:01:17.440 --> 00:01:18.440
browser.

19
00:01:18.460 --> 00:01:22.930
And so when we make use of J.S. Dom we can pretend as though we have access to a browser even though

20
00:01:22.930 --> 00:01:29.780
they're not is not actually a browser present so we're going to use Charleston to essentially load up

21
00:01:29.870 --> 00:01:35.390
all the code for the application that we're trying to test once we load all that code up we can then

22
00:01:35.390 --> 00:01:40.070
tried to mess around with some browser based code from a node environment.

23
00:01:40.190 --> 00:01:44.150
I got to tell you using j system is just going to be a little bit complicated because we're going to

24
00:01:44.140 --> 00:01:46.570
do some very specific setup.

25
00:01:46.580 --> 00:01:51.230
We're going to make sure we set up G.S. Dom in such a way that we can very easily use it inside of our

26
00:01:51.230 --> 00:01:52.720
testing framework.

27
00:01:52.760 --> 00:01:56.970
So it is gonna revolve around a little bit of complicated code but at the end of the day it's going

28
00:01:56.970 --> 00:02:02.120
to be pretty short overall like in other words not a lot of code just a little bit that is slightly

29
00:02:02.120 --> 00:02:03.590
complicated that's all.

30
00:02:04.430 --> 00:02:04.700
All right.

31
00:02:04.760 --> 00:02:08.990
So now we understand how we're going to solve this issue of running a browser based application at the

32
00:02:08.990 --> 00:02:09.700
terminal.

33
00:02:09.710 --> 00:02:10.750
Let's take a pause right here.

34
00:02:10.760 --> 00:02:11.730
We'll come back the next video.

35
00:02:11.750 --> 00:02:15.080
We're going to install j system and start wiring it up inside of our project.
