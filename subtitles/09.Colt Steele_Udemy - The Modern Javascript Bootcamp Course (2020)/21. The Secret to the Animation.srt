1
00:00:00,890 --> 00:00:03,470
Now that we understand the dash Ray and dash offset properties.

2
00:00:03,510 --> 00:00:06,960
Let's understand how we're going to use them to actually implement this animation.

3
00:00:06,960 --> 00:00:10,620
I want to first begin by taking a look at the finished product one more time.

4
00:00:10,620 --> 00:00:12,560
So this is what we are going after.

5
00:00:12,630 --> 00:00:18,030
We want to have the entire stroke starting off as covered so that would imply that we're going to begin

6
00:00:18,060 --> 00:00:21,360
with a dash Ray with whatever our perimeter value is.

7
00:00:21,360 --> 00:00:28,480
So for us it's red round five sixty five and we should also have a dash offset starting at zero.

8
00:00:28,510 --> 00:00:33,100
So that's how we're going to get that full aero or that full border excuse me starting up when we first

9
00:00:33,100 --> 00:00:34,810
start our application.

10
00:00:34,810 --> 00:00:36,810
Now here's where things get challenging.

11
00:00:36,910 --> 00:00:39,880
Take note of how this animation plays out.

12
00:00:40,000 --> 00:00:47,030
We're starting from the very top edge and we're going to show white space going in the clockwise direction.

13
00:00:47,110 --> 00:00:51,850
That's kind of counter to what we were just discussing remember the default behavior is to draw the

14
00:00:51,850 --> 00:00:58,320
border starting from right here as opposed to anything up at the top and then the dash offset is going

15
00:00:58,320 --> 00:01:03,310
to add an additional whitespace going in the counter clockwise direction.

16
00:01:03,330 --> 00:01:08,720
So this final product has the spacing or the whitespace going in clockwise.

17
00:01:08,760 --> 00:01:14,190
What I just showed you around dash offset is going to add space in the counter clockwise.

18
00:01:14,190 --> 00:01:18,780
So in other words if we use dash offset as we know it right now and we start off at zero and let's say

19
00:01:18,780 --> 00:01:23,220
one second goes by and we change that to 20 OK we're going to get that gap.

20
00:01:23,250 --> 00:01:25,530
Then if we go to 40 we're gonna get that gap.

21
00:01:25,530 --> 00:01:26,160
And so on.

22
00:01:26,610 --> 00:01:30,840
So again it is playing in the opposite direction of what we really want.

23
00:01:30,840 --> 00:01:32,310
So how are we going to fix this.

24
00:01:32,310 --> 00:01:36,160
Well as usual it's just a little trick dash offset.

25
00:01:36,180 --> 00:01:38,160
We're just gonna make it negative here.

26
00:01:38,190 --> 00:01:39,340
That's pretty much it.

27
00:01:39,540 --> 00:01:44,870
Providing a negative value of dash offset is going to add in that whitespace in the opposite direction.

28
00:01:44,880 --> 00:01:49,560
So it's going to start to go in the clockwise direction instead of the counterclockwise that we saw

29
00:01:49,620 --> 00:01:56,800
in the last video so if I change dash offset to negative 40 we're going to get the whitespace right

30
00:01:56,800 --> 00:01:57,170
there.

31
00:01:57,190 --> 00:02:01,750
And then as we start to take that number more negative it's going to start to go in a clockwise direction

32
00:02:01,750 --> 00:02:05,730
we're going to see more and more whitespace like so.

33
00:02:05,860 --> 00:02:11,410
So you can imagine that for every second that goes by we're going to change dash offset to be slightly

34
00:02:11,440 --> 00:02:16,210
more and more negative and that's what's going to give us whitespace going all the way around the outside

35
00:02:16,210 --> 00:02:20,770
edge until it eventually comes back to the same right hand side.

36
00:02:20,790 --> 00:02:27,760
Now the last big question is how are we going to actually get the animation to start at the top like

37
00:02:27,820 --> 00:02:33,160
up there as opposed to the default behavior which is to have the entire border being drawn right there

38
00:02:33,160 --> 00:02:34,870
on the right hand side.

39
00:02:34,870 --> 00:02:38,560
Well once again a little trick usually how it works out.

40
00:02:38,710 --> 00:02:44,590
So the little trick we're going to use we're just going to rotate this entire circle negative 90 degrees

41
00:02:44,960 --> 00:02:50,770
so you can take the entire circle rotate it negative 90 so we're gonna take it 90 degrees in a counterclockwise

42
00:02:51,010 --> 00:02:57,980
direction counterclockwise do that rotation we can add on an additional property to our circle element

43
00:02:59,190 --> 00:03:08,040
we're going to provide transform is rotate negative 90 and this will also take two other arguments.

44
00:03:08,040 --> 00:03:11,490
When we call rotates we're going to pass in 100 loops.

45
00:03:11,520 --> 00:03:12,090
One hundred.

46
00:03:12,090 --> 00:03:18,790
One hundred may expand this just we can see it more easily so as you would guess the first argument

47
00:03:18,790 --> 00:03:23,800
to rotate is going to be at the amount we want to rotate in the direction that we are rotating in a

48
00:03:23,800 --> 00:03:28,960
negative value means that we're going to rotate in the counterclockwise direction the second two values

49
00:03:28,960 --> 00:03:32,920
right here define the origin point of the transform.

50
00:03:32,980 --> 00:03:39,100
So by default usually a transform is done against the top left corner of our SPG element by passing

51
00:03:39,100 --> 00:03:40,630
in at one hundred one hundred.

52
00:03:40,630 --> 00:03:46,090
We are saying that we want to rotate this circle around what happens to also be the center point of

53
00:03:46,090 --> 00:03:46,950
the circle.

54
00:03:46,990 --> 00:03:51,810
So we're going to rotate around that point right there.

55
00:03:51,940 --> 00:03:59,130
Let's save this refresh and now if we start off with the data or me a dash offset of 0

56
00:04:02,060 --> 00:04:06,290
we start up right there everything is matching up on the top and then as we start to make this number

57
00:04:06,320 --> 00:04:11,480
more and more negative so go to negative 10 it's going to start to give us that whitespace as they go

58
00:04:11,480 --> 00:04:12,490
to negative 50.

59
00:04:12,590 --> 00:04:17,330
Give us more as we go to negative 100 and we can start to see how.

60
00:04:17,330 --> 00:04:22,070
As we start to make dash offset more and more negative we're going to get that whitespace around that

61
00:04:22,100 --> 00:04:27,440
outside edge going in the clockwise direction just like we saw on our finished product over here.

62
00:04:27,500 --> 00:04:28,280
So that's pretty much it.

63
00:04:28,280 --> 00:04:29,140
That is the secret.

64
00:04:29,240 --> 00:04:32,780
The secret is to use the negative value of dash offset.

65
00:04:32,780 --> 00:04:38,260
We're going to use a dash array value equal to the entire perimeter of the circle.

66
00:04:38,470 --> 00:04:44,200
And then finally we're going to transform this circle as well to implement a rotation negative 90 degrees

67
00:04:46,280 --> 00:04:46,560
OK.

68
00:04:46,590 --> 00:04:50,940
So now that we see like the general idea essentially what we're trying to do here the last thing we

69
00:04:50,940 --> 00:04:54,110
have to do is essentially take this entire strategy.

70
00:04:54,180 --> 00:04:59,790
We need to make sure that every single time we tick our timer so like over here with on tick every single

71
00:04:59,790 --> 00:05:03,640
time that happens we need to make sure that we start to make dash offset right here.

72
00:05:03,720 --> 00:05:09,890
More and more negative we're also gonna add in a little bit of code to kind of adjust these values of

73
00:05:09,890 --> 00:05:14,930
dash rate and like calculate that value on the fly is obviously putting in the parameter Ursa near the

74
00:05:14,930 --> 00:05:16,100
perimeter right here.

75
00:05:16,190 --> 00:05:20,930
That is a calculated value we have to do two times pi times the radius.

76
00:05:20,930 --> 00:05:25,130
So rather than encoding the dash array right here we'll instead set that programmatically.

77
00:05:25,250 --> 00:05:30,830
So we'll read the value of the radius of the circle calculate the perimeter stick it in and then every

78
00:05:30,830 --> 00:05:34,240
single time we get a tick we will update dash offset.

79
00:05:34,230 --> 00:05:35,410
So now that we've got the full story.

80
00:05:35,420 --> 00:05:38,630
Quick pause right here and we'll work on our implementation in the next video.
