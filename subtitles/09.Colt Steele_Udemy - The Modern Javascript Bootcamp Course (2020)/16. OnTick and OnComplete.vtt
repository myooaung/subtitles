WEBVTT
1
00:00:00.980 --> 00:00:02.480
Or on START callback is all done.

2
00:00:02.480 --> 00:00:05.490
Let's do the same for on tick and on complete the inside of.

3
00:00:05.490 --> 00:00:05.980
On tick.

4
00:00:05.990 --> 00:00:13.810
I'm gonna put in a quick console log and say timer just ticked down and then inside of incomplete I'll

5
00:00:13.820 --> 00:00:19.440
do a console log and say timer is completed.

6
00:00:19.530 --> 00:00:22.500
Now we need to receive these inside of our constructor as well.

7
00:00:22.590 --> 00:00:27.150
We're going to assign them to an instance variable and eventually invoke them during some very specific

8
00:00:27.150 --> 00:00:29.920
point time of our timers life cycle.

9
00:00:30.080 --> 00:00:32.210
Well first go back up to the constructor.

10
00:00:32.490 --> 00:00:39.740
Once again inside of this callbacks check we'll do this dot on tick.

11
00:00:39.760 --> 00:00:46.770
We'll be callbacks dot on tick we'll also do this dot on complete and store a reference to callbacks

12
00:00:46.770 --> 00:00:48.720
dot on complete as well.

13
00:00:50.310 --> 00:00:50.540
Okay.

14
00:00:50.550 --> 00:00:53.180
So we've now stored a reference to both of those callbacks.

15
00:00:53.200 --> 00:00:57.510
So now we need to make sure that we called both them at some very specific points in time so we would

16
00:00:57.510 --> 00:01:04.680
need to take a look at our code and figure out where the most appropriate time is to invoke those callbacks.

17
00:01:04.680 --> 00:01:09.210
I think that in the case of on tick where we want to call this thing every time we tick down our timer

18
00:01:09.720 --> 00:01:15.000
jets are the most appropriate time for that would be like right here inside the LS case of our take

19
00:01:15.000 --> 00:01:20.760
function so inside the LS case that means that we are going to like tick down the timer.

20
00:01:20.920 --> 00:01:31.050
So for that right after subtracting I'll say if this dot on tick so if we were given that callback let's

21
00:01:31.050 --> 00:01:31.860
go ahead and call it

22
00:01:34.840 --> 00:01:39.160
now we can repeat the same process for on complete as well where would be the most appropriate time

23
00:01:39.160 --> 00:01:40.170
to call this.

24
00:01:40.390 --> 00:01:42.940
We want to call that function any anytime that the timer is done.

25
00:01:42.940 --> 00:01:45.700
So in other words when it has reached zero.

26
00:01:45.760 --> 00:01:50.470
So for that we might go down to tick once again and right after calling this dot pause.

27
00:01:50.470 --> 00:01:57.280
We could do a quick check see if this dot on complete was provided and if it was once again we will

28
00:01:57.280 --> 00:01:57.730
call it

29
00:02:00.840 --> 00:02:01.080
okay.

30
00:02:01.110 --> 00:02:02.160
So this is looking pretty good.

31
00:02:02.430 --> 00:02:03.540
So let's now save this.

32
00:02:03.550 --> 00:02:07.620
We're going to do another quick test inside the browser and we're going to take a look at our console

33
00:02:07.650 --> 00:02:12.010
and make sure that these console logs show up at all the appropriate times.

34
00:02:12.030 --> 00:02:17.730
So we should see a console log occur when our timer starts we should see some tick messages as the timer

35
00:02:17.730 --> 00:02:18.600
counts down.

36
00:02:18.600 --> 00:02:26.850
And we should see one on complete when the timer is all done yes I'll go back over or refresh I'm gonna

37
00:02:26.870 --> 00:02:32.660
change us down to just three seconds again I'll hit starts and I see timer started tick down tick down

38
00:02:32.840 --> 00:02:35.240
completed Excellent.

39
00:02:35.260 --> 00:02:37.380
That is exactly what we want.

40
00:02:37.390 --> 00:02:41.470
So once again these little console logs right here these are proof that we can essentially tell the

41
00:02:41.470 --> 00:02:44.100
outside world all the code outside of our class.

42
00:02:44.200 --> 00:02:46.400
That's something important just occurred.

43
00:02:46.450 --> 00:02:50.980
And so again we're going to eventually take a look at those callbacks and we're going to add in some

44
00:02:50.980 --> 00:02:56.640
code to draw the border to update the border and eventually reset it as well.

45
00:02:56.800 --> 00:02:59.890
That's pretty much it for our timer implementation for right now.

46
00:02:59.890 --> 00:03:04.390
We are going to have to come back to this once again in just a little bit and add in one little more

47
00:03:04.390 --> 00:03:07.580
piece of code but we'll get to that in just a little bit.

48
00:03:07.750 --> 00:03:09.130
So let's take a quick pause right here.

49
00:03:09.130 --> 00:03:12.970
We're going to start working on all this animated order stuff in the next video.
