WEBVTT
1
00:00:00.550 --> 00:00:06.440
In the last video we recapped on why the value of this inside of a method inside of a class is so important.

2
00:00:06.550 --> 00:00:11.380
If we ever want to call some other method inside of a class or reference some instance variable or whatever

3
00:00:11.380 --> 00:00:16.220
else of value of this must be set equal to the instance of the class right now.

4
00:00:16.240 --> 00:00:22.140
When we call this dot start from our button event listener the value of this is not what we it to be.

5
00:00:22.210 --> 00:00:28.150
It has been overridden and the value of this inside out method is instead equal to our button that we

6
00:00:28.150 --> 00:00:32.940
are clicking on which definitely doesn't have a method called important method to call.

7
00:00:33.040 --> 00:00:36.320
So we need to essentially make that error message right there go away.

8
00:00:36.340 --> 00:00:41.560
So to make that go away we're going to review the three different ways that we can determine the value

9
00:00:41.560 --> 00:00:45.770
of this inside of a method so let's get to it.

10
00:00:45.780 --> 00:00:49.060
Let's review those three different ways okay.

11
00:00:49.100 --> 00:00:53.180
So the way that we're going to interpret this diagram right here whenever we want to determine what

12
00:00:53.180 --> 00:00:58.220
the value of this is going to be inside of a function we're gonna ask ourselves this question first

13
00:00:58.460 --> 00:01:02.720
we're gonna ask ourselves did we define a function with an arrow function.

14
00:01:02.750 --> 00:01:07.990
If so that is the answer to what the value of this is if this is not true.

15
00:01:08.030 --> 00:01:10.750
We're going to move on to question two If that is not true.

16
00:01:10.790 --> 00:01:14.730
We're going to fall down to the kind of all other cases category here.

17
00:01:14.750 --> 00:01:23.340
So essentially we go down the list and we stop at the first place that we can answer yes to Let's first

18
00:01:23.340 --> 00:01:27.930
review what it means to use an arrow function and what the value of this inside there will be if we

19
00:01:27.930 --> 00:01:29.910
do use an arrow function.

20
00:01:29.940 --> 00:01:35.640
So if we define a function with an arrow function and then we access this inside that arrow function

21
00:01:35.940 --> 00:01:38.570
here's what we can determine what the value of this will be.

22
00:01:38.670 --> 00:01:40.150
We can use a little trick.

23
00:01:40.200 --> 00:01:47.100
So right above our era function we're going to find the first valid line and right counsel dot log this

24
00:01:47.250 --> 00:01:53.410
on that first valid line in the value of this inside the arrow functional the equal to whatever was

25
00:01:53.410 --> 00:01:58.510
console logged from that console log that we added in we'll give you a very quick demonstration of this

26
00:01:58.540 --> 00:02:00.230
because this rule will actually make a lot of sense.

27
00:02:00.250 --> 00:02:04.890
Once you see a practical demonstration of it okay.

28
00:02:04.900 --> 00:02:08.590
So back over here I'm gonna go down to the bottom of the file and we're going to write out a couple

29
00:02:08.590 --> 00:02:10.750
of examples really quickly.

30
00:02:10.750 --> 00:02:13.120
First I'm going to comment out timer dot start.

31
00:02:13.120 --> 00:02:17.890
So we don't get any kind of erroneous console log messages that will kind of throw off this demonstration

32
00:02:17.890 --> 00:02:20.800
we're going to do then down here.

33
00:02:20.800 --> 00:02:27.070
I'm going to write out an arrow function called print this and inside of here I'd bet as you'd guess

34
00:02:27.070 --> 00:02:30.050
we'll do a console log of this.

35
00:02:30.090 --> 00:02:34.780
Now here's the question What is the value of this going to be equal to inside of here.

36
00:02:34.780 --> 00:02:36.550
Whenever we call it print this.

37
00:02:36.680 --> 00:02:41.350
Well if we want to determine what this console log will result in or what the value of this is we can

38
00:02:41.350 --> 00:02:47.260
take a look at the era function we're going to find the first valid line of code above the arrow function.

39
00:02:47.270 --> 00:02:48.920
So that would be like this right here.

40
00:02:48.940 --> 00:02:50.460
That's the first valid line.

41
00:02:50.830 --> 00:02:55.330
And right there we will add in a console dot log of this.

42
00:02:55.340 --> 00:03:01.130
So now the value of this inside the function is going to be equal to the value of this outside the function.

43
00:03:01.130 --> 00:03:04.790
These two console logs will be absolutely identical.

44
00:03:04.940 --> 00:03:10.710
And so we could check that by calling print this I'm going to save this file.

45
00:03:10.950 --> 00:03:16.590
Look back over refresh and we'll see that in both cases we get window which is essentially the global

46
00:03:16.590 --> 00:03:20.820
context inside of JavaScript when we're executing code inside the browser.

47
00:03:20.820 --> 00:03:24.060
So this definitely means that this first rule worked out correctly.

48
00:03:24.060 --> 00:03:28.800
Let's take a look at a little bit more complex example of how to use this little trick around arrow

49
00:03:28.800 --> 00:03:36.810
functions so I'm going to define a new object that I'll call about colors inside of here.

50
00:03:36.820 --> 00:03:44.340
I'm going to define a method called print color and then we're going to eventually inside of here define

51
00:03:44.340 --> 00:03:51.210
a function called Print This once again and inside there I'll do a console dot log of this.

52
00:03:51.540 --> 00:03:55.160
And then Emily after it I will run print this.

53
00:03:55.230 --> 00:03:59.310
Now once again in order to determine what the value of this is going to be inside there.

54
00:03:59.340 --> 00:04:03.750
We could add a console log on the line right above right above the error function.

55
00:04:03.750 --> 00:04:07.140
I'm going to add in console dot log this.

56
00:04:07.140 --> 00:04:12.330
And once again the value of this is going to be identical between those two console log statements.

57
00:04:12.360 --> 00:04:17.310
Let's first comment out that will block right there and just run print color by itself and see what

58
00:04:17.400 --> 00:04:19.920
the console log normally would be.

59
00:04:19.920 --> 00:04:28.550
So down here I'll do colors dot print color I'm going to save this look back over refresh and so normally

60
00:04:28.550 --> 00:04:33.680
the value of this inside of that method would be the object itself like the entire object that we just

61
00:04:33.680 --> 00:04:34.520
created.

62
00:04:34.520 --> 00:04:35.890
This colors object.

63
00:04:36.470 --> 00:04:43.270
So that means that inside of that era function the value of this is going to be equal to what the colors

64
00:04:43.300 --> 00:04:44.560
object as well.

65
00:04:44.710 --> 00:04:48.430
So I'll save this now with all that stuff uncommon did refresh.

66
00:04:48.430 --> 00:04:51.430
Run it again and we'll see the identical console log.

67
00:04:51.430 --> 00:04:53.470
In both cases OK.

68
00:04:53.500 --> 00:04:57.160
So again that is the rule for determining the value of this inside of an arrow.

69
00:04:57.160 --> 00:05:02.770
Function let's not take a look at the second way or kind of if we don't define a function with an arrow

70
00:05:02.770 --> 00:05:03.350
function.

71
00:05:03.490 --> 00:05:09.340
How then do we decide what the value of this is going to be inside their so the second check we're going

72
00:05:09.340 --> 00:05:15.880
to do we're going to see it did we call the function with BIND call or apply when we invoked it as a

73
00:05:15.880 --> 00:05:22.150
quick reminder bind call and apply our built in functions that belong to all functions inside of javascript

74
00:05:22.150 --> 00:05:27.940
that we create we can use bind call and apply to call a function in a very special way.

75
00:05:28.030 --> 00:05:33.490
The first argument to all three of bind call and apply is going to be the value of this that we want

76
00:05:33.490 --> 00:05:35.530
to execute the function with.

77
00:05:35.580 --> 00:05:37.990
Now this note right here is really confusing.

78
00:05:37.990 --> 00:05:40.520
So let's just write a real quick code example right away.

79
00:05:42.640 --> 00:05:48.530
I'm going to delete the colors example and I will replace it with a new function that I will call print

80
00:05:48.530 --> 00:05:49.370
this.

81
00:05:49.370 --> 00:05:54.020
And this time I'm going to define it with a function keyword is if I defined it with an arrow function

82
00:05:54.170 --> 00:06:00.520
then we would use that rule instead of stick a second one then inside of here I'll do a console dot

83
00:06:00.520 --> 00:06:07.380
log of this as usual and now I'm going to invoke this function right here by using call.

84
00:06:07.520 --> 00:06:14.860
So I gonna call print this I'm going to invoke it using call instead of calling it directly.

85
00:06:15.030 --> 00:06:20.710
And now the first argument to call right here is going to be the value of this inside of the function

86
00:06:22.620 --> 00:06:23.740
so I'm going to put in here.

87
00:06:23.740 --> 00:06:30.620
How about a object with a color of red it's now in print.

88
00:06:30.620 --> 00:06:31.900
This gets executed.

89
00:06:32.130 --> 00:06:36.960
The value of this inside of it is going to be equal to that object right there.

90
00:06:37.020 --> 00:06:38.490
So I'll say this.

91
00:06:38.490 --> 00:06:41.280
I'm gonna go back over refresh and sure enough.

92
00:06:41.280 --> 00:06:41.730
There we go.

93
00:06:42.510 --> 00:06:48.030
So again if we make use of call first argument is going to override the value of this inside there we

94
00:06:48.030 --> 00:06:54.280
can do the same thing with apply as well so I'll save this as well refresh we get the same exact results

95
00:06:55.850 --> 00:07:01.440
if we don't call the function with apply so if we just call the function directly the value of this

96
00:07:01.470 --> 00:07:03.700
is going to be a little bit more unpredictable.

97
00:07:03.750 --> 00:07:09.170
Let's refresh and we see that in this case it is equal to the window.

98
00:07:09.220 --> 00:07:15.160
So again it is very clear that we call the function with BIND call or apply that is going to override

99
00:07:15.190 --> 00:07:17.080
the value of this inside the function.

100
00:07:17.080 --> 00:07:19.870
So that is the second check that we always do.

101
00:07:19.870 --> 00:07:21.580
So now we follow on to the last case here.

102
00:07:21.790 --> 00:07:26.440
If we don't define the function with an error function and if we don't use bind color apply we fall

103
00:07:26.440 --> 00:07:32.140
into all other cases and in order to determine what the value of this is going to be inside the function

104
00:07:32.530 --> 00:07:37.420
we take a look at where we invoke the function we take a look at whatever is to the left of the dots

105
00:07:37.480 --> 00:07:42.330
inside of the function call and that is what the value of this is going to be equal to.

106
00:07:42.370 --> 00:07:45.520
Now this is another scenario where the note I have right here is a little confusing.

107
00:07:45.520 --> 00:07:52.790
So let's do a quick example again trying to delete this example I'm going to create a new object again

108
00:07:52.820 --> 00:08:00.620
called colors inside of here I'll make a method called print color and inside there I'll do a console

109
00:08:00.620 --> 00:08:02.600
log of this.

110
00:08:02.790 --> 00:08:06.460
Now how would we run the method print color to run that method.

111
00:08:06.550 --> 00:08:09.950
We would call colors dot print color.

112
00:08:10.010 --> 00:08:11.840
Now here's the trick we're gonna take a look at this.

113
00:08:11.840 --> 00:08:16.590
These rails right here to determine what the value of this is going to be inside of this function.

114
00:08:16.610 --> 00:08:17.650
When we call it.

115
00:08:17.900 --> 00:08:20.320
So we first say do we have an error function.

116
00:08:20.330 --> 00:08:22.160
No definitely don't.

117
00:08:22.160 --> 00:08:24.500
Are we calling the function to bind color apply.

118
00:08:24.510 --> 00:08:26.030
No definitely not.

119
00:08:26.030 --> 00:08:26.290
OK.

120
00:08:26.330 --> 00:08:29.170
So we fall into this other case right here.

121
00:08:29.240 --> 00:08:33.320
So in order to determine what the value of this is going to be inside this function when we call it

122
00:08:33.770 --> 00:08:39.800
we take a look at the period to the left of the function name that period right there and we look at

123
00:08:39.800 --> 00:08:42.270
whatever variable is to the left of it.

124
00:08:42.410 --> 00:08:49.060
In this case the colors object because the colors object is to the left of that period the value of

125
00:08:49.060 --> 00:08:54.280
this inside of print color is going to be equal to colors.

126
00:08:54.280 --> 00:08:58.590
So this right here is what this is going to be.

127
00:08:58.770 --> 00:09:01.580
Let's save this and we can verify that really easily.

128
00:09:01.810 --> 00:09:08.190
Sorry fresh again and sure enough I see print color we can really abuse this rule right here to really

129
00:09:08.190 --> 00:09:10.290
demonstrate how it works very easily.

130
00:09:10.290 --> 00:09:12.080
So let me give you a quick example.

131
00:09:12.120 --> 00:09:19.590
I'm gonna create another object right underneath colors and I'll call this one like random object and

132
00:09:19.590 --> 00:09:29.630
I'll give it a property of like a is one like so and then going to assign random object a new property

133
00:09:29.630 --> 00:09:34.870
called print color and I'm going to assign to that property right there.

134
00:09:34.870 --> 00:09:39.220
The print color function from the colors object it's also colors dot print

135
00:09:42.540 --> 00:09:47.370
you'll notice here I'm not calling print color it's not being invoked I'm just taking the function and

136
00:09:47.370 --> 00:09:50.820
assigning it to the random object on a property called print color.

137
00:09:50.850 --> 00:09:57.470
So this line of code right here is equivalent to if I just copy pasted that function down like so fully

138
00:09:57.480 --> 00:10:05.340
equivalent let's now tried to call random object dot print color it's a random object dot print color

139
00:10:06.790 --> 00:10:12.820
it's now we're going to define a method that is defined inside of the colors object but what this method

140
00:10:12.820 --> 00:10:18.400
is defined inside of doesn't govern the value of this inside the function instead the rule that we fall

141
00:10:18.400 --> 00:10:22.820
into is this one right here and two to determine the value of this inside the method call.

142
00:10:22.900 --> 00:10:27.140
We take a look at whatever it is to the left of the dot when we invoke the method.

143
00:10:27.160 --> 00:10:32.710
So here's we invoke the method we're gonna take a look at the dot and what is still left it is random

144
00:10:32.770 --> 00:10:33.820
object.

145
00:10:33.820 --> 00:10:38.410
So now when we call a print color right here we're not going to see a value of this being console log

146
00:10:38.440 --> 00:10:39.630
that is the colors object.

147
00:10:39.640 --> 00:10:42.560
Instead we're going to see the random object.

148
00:10:42.930 --> 00:10:44.050
So I'll save this.

149
00:10:44.260 --> 00:10:46.410
Go back over refresh and there we go.

150
00:10:46.420 --> 00:10:52.020
We see a console log of the random object not the colors one.

151
00:10:52.150 --> 00:10:52.430
OK.

152
00:10:52.460 --> 00:10:53.110
So that is it.

153
00:10:53.120 --> 00:10:55.460
That is our three big rules right here.

154
00:10:55.460 --> 00:10:58.830
This is how we determine the value of this.

155
00:10:58.850 --> 00:11:02.470
So now the inevitable question is how does this solve our problem.

156
00:11:02.510 --> 00:11:03.110
Right.

157
00:11:03.110 --> 00:11:08.540
How are we going to fix the issue we have where we need to call starts and have it always give us the

158
00:11:08.540 --> 00:11:10.910
same value of this.

159
00:11:10.910 --> 00:11:15.230
Well in order to make sure that we can enforce the value of this inside the start function we're going

160
00:11:15.230 --> 00:11:19.610
to just simply make sure that we fall into case one or two.

161
00:11:19.640 --> 00:11:23.990
So in other words in order to make sure the value of this inside of start is always the instance of

162
00:11:23.990 --> 00:11:29.960
timer that we want it to be we're going to define that function using an arrow function or we're going

163
00:11:29.960 --> 00:11:33.180
to call it using bind call or apply.

164
00:11:33.180 --> 00:11:35.190
So that's how we're gonna fix this problem.

165
00:11:35.210 --> 00:11:38.510
Let's take a quick pause right here because this is a very long video we're going to come back the next

166
00:11:38.510 --> 00:11:43.670
section or next video and wrap all this this stuff up rather quickly so quick pause I'll see you in

167
00:11:43.670 --> 00:11:44.460
just a minute.
