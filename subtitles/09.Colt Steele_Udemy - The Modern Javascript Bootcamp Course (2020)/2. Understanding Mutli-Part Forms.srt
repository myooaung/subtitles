1
00:00:00,850 --> 00:00:04,980
In the last video we establish that we're not going to be able to do our image upload using the same

2
00:00:04,980 --> 00:00:08,030
strategy that we've been using so far for form submission.

3
00:00:08,070 --> 00:00:12,540
So in other words whenever we tried to submit an image all we actually got on our back and server it

4
00:00:12,540 --> 00:00:14,060
was the name of the image.

5
00:00:14,070 --> 00:00:15,840
Nothing about the actual image data.

6
00:00:16,660 --> 00:00:21,630
So in this video we're going to do a deep dive on to form elements and get a better understanding of

7
00:00:21,630 --> 00:00:27,300
how we can make a form except a file and upload that file to our back end server.

8
00:00:27,300 --> 00:00:31,230
Some of the stuff I'm about to tell you has been stuff that you've already heard inside this course

9
00:00:31,320 --> 00:00:33,180
several times before.

10
00:00:33,180 --> 00:00:38,070
Nonetheless we're going to do a review of how forms work to make sure that you really understand how

11
00:00:38,070 --> 00:00:40,880
our data or how the file is going to be transmitted.

12
00:00:40,890 --> 00:00:46,630
So let's get to it to get started going to first go back over to my editor.

13
00:00:46,740 --> 00:00:51,110
I'm going to find inside my views directory the products new template.

14
00:00:51,220 --> 00:00:53,260
So here's the form that we're working on right now.

15
00:00:54,280 --> 00:00:57,100
Now we've used forms throughout this course in many different fashions.

16
00:00:57,550 --> 00:01:02,900
We first use them as just a simple form element like so at some point time.

17
00:01:02,920 --> 00:01:08,710
We then started to add in this method of post and that changed how we were submitting this form to our

18
00:01:08,710 --> 00:01:14,060
back and server so I first want to focus on what method is really doing for us here.

19
00:01:14,200 --> 00:01:18,160
After we understand what method is really doing we're going to talk about another property that can

20
00:01:18,160 --> 00:01:21,920
be added into a form element and how that changes the form.

21
00:01:21,940 --> 00:01:26,650
The first thing I want you to understand is that when we're showing a form by itself like so there was

22
00:01:26,650 --> 00:01:29,620
a default value of method that was being used.

23
00:01:29,620 --> 00:01:36,400
So if we don't provide a method the browser is going to add in a default value for method of get instead

24
00:01:38,350 --> 00:01:43,660
the method property right here is describing how the form is going to submit information or how that

25
00:01:43,660 --> 00:01:49,370
information is actually going to be communicated to the back end server if we provide a method of get.

26
00:01:49,510 --> 00:01:54,280
That means that the browser is going to take all the information of the form add it into the URL of

27
00:01:54,280 --> 00:01:56,810
a request and then make a request to the backend server.

28
00:01:56,890 --> 00:01:58,750
With that your URL.

29
00:01:58,840 --> 00:02:04,270
And as we saw if we change method to post it's going to take all the information out the form stick

30
00:02:04,270 --> 00:02:09,220
it into the body of a post request and then make that request to the back end server.

31
00:02:09,220 --> 00:02:10,820
I want to review both these really quickly.

32
00:02:10,870 --> 00:02:14,680
I'm going to update this to a method of get going to save it.

33
00:02:15,070 --> 00:02:21,700
Go back over to my form refresh Internet title a price and hit submit and lo and behold we can see that

34
00:02:21,700 --> 00:02:26,920
we made a change the url all of our foreign data is now inside there and as soon as we hit submit.

35
00:02:26,920 --> 00:02:31,180
Not only was the URL updated but we also made a new request to the backend server.

36
00:02:31,210 --> 00:02:39,110
So that's why our form values cleared themselves out if I now go back over change form back to post

37
00:02:39,260 --> 00:02:41,410
or form of method to post.

38
00:02:41,420 --> 00:02:45,010
Now we're going to take all the information put inside the body of the post request.

39
00:02:45,170 --> 00:02:49,820
It's going to go back over refresh the page put in the title and a price hit submit.

40
00:02:50,030 --> 00:02:54,380
If I inspect the request was issued I'll see if there is a forum data down here.

41
00:02:54,380 --> 00:02:58,640
So that is all the information that was inside the body of the request and that's how it was communicated

42
00:02:58,640 --> 00:03:01,260
to our back in server.

43
00:03:01,260 --> 00:03:06,480
So again the point that I'm trying to make here is that the method property communicates how to share

44
00:03:06,480 --> 00:03:10,960
information or how to transmit this information to the back end server.

45
00:03:10,960 --> 00:03:15,280
The other thing that I want to point out once again is that if we do not provide a method option right

46
00:03:15,280 --> 00:03:20,690
here there is a default that will be used and that is the default of get okay.

47
00:03:20,730 --> 00:03:25,620
So now that we're kind of up to par we've got all that and reminded fresh in our minds and I want to

48
00:03:25,860 --> 00:03:30,520
tell you about another option that we can provide to a form element.

49
00:03:30,660 --> 00:03:39,210
The other option that we can provide is E and C type this stands for encoding type whereas the method

50
00:03:39,210 --> 00:03:46,260
describes how to transmit information and type describes how to take information out of the form and

51
00:03:46,260 --> 00:03:52,480
get it ready to be transmitted so it describes how to encode this information or how to kind of bundle

52
00:03:52,480 --> 00:03:55,650
it all up to make it safe to transport in some style.

53
00:03:56,980 --> 00:04:06,160
If we do not specify encoding type the default value that is used is application slash X dash w w w

54
00:04:07,160 --> 00:04:09,530
form your URL encoded.

55
00:04:09,710 --> 00:04:12,050
So again this is the default value that is used.

56
00:04:12,050 --> 00:04:18,970
If we do not provide an encoding type if we save this right now and then tried to use our form again.

57
00:04:19,100 --> 00:04:23,330
We're going to see that no behavior has changed because we're just passing in the same value that is

58
00:04:23,330 --> 00:04:24,680
used by default.

59
00:04:24,680 --> 00:04:29,980
So for example I can go back over really quickly enter in a title and a price hit submit.

60
00:04:30,110 --> 00:04:31,110
Look at the request.

61
00:04:31,150 --> 00:04:32,090
Yep form data.

62
00:04:32,120 --> 00:04:33,600
Data is still right there.

63
00:04:34,510 --> 00:04:40,500
When we say form your URL encoded we are literally saying take all the information out of the form.

64
00:04:40,660 --> 00:04:42,190
Specifically the inputs.

65
00:04:42,370 --> 00:04:45,590
Take a look at the named properties of each input.

66
00:04:45,700 --> 00:04:51,040
Take a look at the values of each and put them all together in a query string kind of format.

67
00:04:51,040 --> 00:04:53,550
That is what your URL encoded right here really means.

68
00:04:53,560 --> 00:05:00,560
It means take this form information and make it safe for transport inside of a URL so if we take a look

69
00:05:00,560 --> 00:05:05,480
at our form data right here and click on View Source we'll see what our information is actually being

70
00:05:05,480 --> 00:05:10,340
transmitted as inside of that post requests so we'll see that it has that same kind of query string

71
00:05:10,340 --> 00:05:13,340
format that we saw up inside of our your l just a moment ago.

72
00:05:14,470 --> 00:05:21,100
So again your URL encoded means take this information make it safe to be transmitted inside of a euro.

73
00:05:21,160 --> 00:05:27,070
Now the problem here this is the core issue around using these default settings of encoding type with

74
00:05:27,070 --> 00:05:28,750
an input of type file.

75
00:05:28,750 --> 00:05:34,570
The problem is that when we tried to upload a file a file might have some data inside of it that can

76
00:05:34,570 --> 00:05:45,230
not be safely or even efficiently transmitted into a U.R.L. safe format I'll show you that very soon.

77
00:05:45,290 --> 00:05:50,870
So again the issue is we might have files that have data inside them that we can't simply turn into

78
00:05:50,870 --> 00:05:52,460
a string in any fashion.

79
00:05:52,460 --> 00:05:57,650
And so we can't transmit a file with this kind of you URL encoding scheme.

80
00:05:57,650 --> 00:06:02,090
And that's why right now when we tried to submit an image the image is not transmitted whatsoever is

81
00:06:02,090 --> 00:06:03,950
because the form is saying hey you know what.

82
00:06:03,950 --> 00:06:08,880
I see you've got a file but I've got no idea how to turn that file into a you're all safe string.

83
00:06:08,930 --> 00:06:13,870
So I'm just going to ignore it and I'm going to instead just transmit the name of the file.

84
00:06:13,970 --> 00:06:17,750
So again the whole issue here is the default encoding type that we're trying to use.

85
00:06:17,750 --> 00:06:20,760
That is why the form is not being transmitted.

86
00:06:20,840 --> 00:06:26,550
So as you might guess in order to make all this stuff work rather than using an encoding type of you

87
00:06:26,550 --> 00:06:33,240
URL encoded we're going to simply use a different encoding type one that can safely transmit raw file

88
00:06:33,240 --> 00:06:39,440
data so in place of this default value of your URL encoded.

89
00:06:39,440 --> 00:06:49,030
We're going to instead replace it with multipart slash form dash data so that's the secret.

90
00:06:49,050 --> 00:06:54,300
So this is going to change how information is taken out of our form and turned into some format to be

91
00:06:54,300 --> 00:06:57,980
sent to our back and server when we use multipart foreign data.

92
00:06:57,990 --> 00:07:03,630
That means take all the different pieces of information out of our form and for each separate input

93
00:07:04,560 --> 00:07:11,460
send each little part to the back end server in a different little part so to speak let's save this.

94
00:07:11,510 --> 00:07:16,900
I'm going to save this file so new DOT J.S. and then going to go over to my root handler for the post

95
00:07:16,900 --> 00:07:17,550
request.

96
00:07:17,620 --> 00:07:22,150
We're going to add in an additional console log and we're going to see how encoding type right here

97
00:07:22,150 --> 00:07:28,030
of multipart form dash data is going to actually transfer all the information inside of our form.

98
00:07:28,030 --> 00:07:33,730
So inside of roots admin I'll find products not J.S. says the file we've been working on.

99
00:07:33,730 --> 00:07:35,800
Here's our post request handler.

100
00:07:35,800 --> 00:07:41,210
I'm going to remove the console log of errors and you might think that at this point time we could simply

101
00:07:41,210 --> 00:07:44,930
do a console thought log of wrecked out body and see that image.

102
00:07:44,930 --> 00:07:47,860
Now unfortunately no that's not the case.

103
00:07:48,110 --> 00:07:53,900
If you recall way long ago at the very start of this project inside of our index dot GSA file we wired

104
00:07:53,900 --> 00:07:58,880
up that body parser thing right here when we wired a body parser we specifically said body parts are

105
00:07:58,880 --> 00:08:01,430
dots you were all encoded.

106
00:08:01,490 --> 00:08:08,210
So that told our body parser to take a look at any incoming post request and if it had a U RL encoded

107
00:08:08,210 --> 00:08:10,990
body pass it for us.

108
00:08:11,060 --> 00:08:16,100
So the current middleware that we're using right here only works with default forms.

109
00:08:16,100 --> 00:08:20,990
It's not going to work out of the box with a multipart form which is what we're currently working with

110
00:08:22,500 --> 00:08:26,660
so I want you to think back to when we were talking about all this body parser stuff.

111
00:08:26,660 --> 00:08:31,960
I want you to think about how we were kind of getting at our form information before we were using that

112
00:08:31,960 --> 00:08:33,100
little middleware.

113
00:08:33,100 --> 00:08:40,720
You might recall that we wrote out some code that looked like rect on data takes that data and do a

114
00:08:40,720 --> 00:08:42,700
console log of that data.

115
00:08:42,700 --> 00:08:46,340
And in this case you're also going to call to string with it.

116
00:08:46,360 --> 00:08:49,330
So again we had some code like this before we wired up that middleware.

117
00:08:50,080 --> 00:08:54,790
So this was saying OK we're going to take each little chunk of data that's going to come into our server

118
00:08:55,980 --> 00:09:01,080
every single time that we get a chunk of data we're going to console log out whatever data we just received.

119
00:09:01,080 --> 00:09:04,910
So this is going to show us the raw data that isn't being included with our post requests.

120
00:09:04,920 --> 00:09:10,680
Now let's save this I'm going to go back over to my application.

121
00:09:10,970 --> 00:09:16,710
I'm gonna make sure they refresh my form entirely and then I'm going to do a file upload once again.

122
00:09:16,720 --> 00:09:17,440
They're really important.

123
00:09:17,450 --> 00:09:20,410
I encourage you not to do a file upload right now.

124
00:09:20,600 --> 00:09:21,980
Do not try to upload an image.

125
00:09:22,010 --> 00:09:25,850
If you try to upload an image right now it's an credibly possible that you're going to lock up your

126
00:09:25,850 --> 00:09:31,610
terminal entirely because we're going to essentially console log out all of the raw data of an image

127
00:09:32,480 --> 00:09:33,880
between the last video and this one.

128
00:09:33,880 --> 00:09:37,910
I took the liberty of getting a really really small image.

129
00:09:37,910 --> 00:09:44,720
So this image right here is one by one pixels it is eight hundred and eighty one bytes in size the code

130
00:09:44,750 --> 00:09:47,630
image that I had is one hundred and seventeen kilobytes.

131
00:09:48,110 --> 00:09:53,950
So if I try to console log out one hundred and seventeen kilobytes of raw data well I might end up locking

132
00:09:53,940 --> 00:09:55,130
up my terminal.

133
00:09:55,130 --> 00:09:58,110
So again I encourage you not to try to upload a file right now.

134
00:09:58,220 --> 00:10:04,010
I'm going to do a file upload with this very small image so we can very easily see what data is inside

135
00:10:04,010 --> 00:10:06,220
of that post request OK.

136
00:10:06,280 --> 00:10:11,890
I'm going to try to upload small submit now going to go back over to my terminal and see what got console

137
00:10:11,890 --> 00:10:14,620
logged OK.

138
00:10:14,650 --> 00:10:20,320
So here's the body of the post requests that we are now receiving it's going to scroll back up to the

139
00:10:20,320 --> 00:10:27,260
top of the request tonight you'll see that the content inside of the body this request is significantly

140
00:10:27,260 --> 00:10:32,480
different than what it was before when we had that default encoding type of your URL encoded and we

141
00:10:32,480 --> 00:10:38,060
had the default type of your URL encoded we formed up that query string and that was all that was sent

142
00:10:38,150 --> 00:10:40,130
from the browser to our server.

143
00:10:40,130 --> 00:10:46,040
But now with the multipart encoding type we're saying take all of the different inputs inside of our

144
00:10:46,040 --> 00:10:52,340
form split them all up into separate little parts of this request and then send them all over one by

145
00:10:52,340 --> 00:10:54,430
one so you can see inside of here.

146
00:10:54,440 --> 00:11:00,940
I've got one little section right here where the input that had a name of title and there's my title

147
00:11:01,680 --> 00:11:05,380
I then got another little section right here with the name of price.

148
00:11:05,650 --> 00:11:08,410
And there's my price and then right here.

149
00:11:08,410 --> 00:11:09,590
Here's the important part.

150
00:11:09,640 --> 00:11:11,940
I've got a name of image.

151
00:11:12,040 --> 00:11:19,060
I've got the name of the image where the actual file name I see the type of image that it is.

152
00:11:19,060 --> 00:11:21,160
And then the raw image data.

153
00:11:21,160 --> 00:11:25,430
So this is how that RAW image data is being communicated from my browser to my server.

154
00:11:25,510 --> 00:11:31,030
Remember how I said just a moment ago there is no safe way to take some raw file data and convert it

155
00:11:31,030 --> 00:11:34,570
into a string and have that string being sent to the backend server.

156
00:11:34,570 --> 00:11:38,980
Now we can kind of see why there are some characters inside of here or some raw data inside the image

157
00:11:39,250 --> 00:11:44,350
that clearly cannot be safely turned into a string and even console logged out inside my terminal let

158
00:11:44,350 --> 00:11:50,930
alone transferred as a you're all safe string inside the body of a post request.

159
00:11:50,980 --> 00:11:56,740
So this is how we're going to receive a actual file inside of a post request we use a multipart form

160
00:11:56,800 --> 00:12:01,450
data submission now last kind of interesting thing I want to show you here.

161
00:12:01,450 --> 00:12:03,810
Last part and this is a kind of a long video.

162
00:12:03,940 --> 00:12:09,310
If I go back over and take a look at the request that was actually issued and click on it I can go back

163
00:12:09,310 --> 00:12:12,670
down to the form data section and now there's nothing down there.

164
00:12:13,300 --> 00:12:20,290
So whenever I start to use that encoding type of multipart form data Chrome is no longer going to try

165
00:12:20,290 --> 00:12:24,130
to tell me what data is being placed inside the body of the post request.

166
00:12:24,130 --> 00:12:29,320
So it just doesn't even print out the form data section down here even though there technically is some

167
00:12:29,320 --> 00:12:32,760
information being communicated in the body of that request.

168
00:12:32,770 --> 00:12:37,480
The only reason Chrome doesn't do it is because it is for performance concerns and you can actually

169
00:12:37,480 --> 00:12:38,350
look that up online.

170
00:12:38,350 --> 00:12:42,820
That's why we don't see anything about that post requests body down here.

171
00:12:42,830 --> 00:12:47,120
The other interesting thing if you take a look at the request header section you'll see that the content

172
00:12:47,120 --> 00:12:53,270
type header says multipart foreign data the content type header is telling our server about the format

173
00:12:53,270 --> 00:12:55,410
of data that it's about to receive.

174
00:12:55,430 --> 00:13:00,020
So it's telling our server in this case it's about to get a multipart forum submission.

175
00:13:00,140 --> 00:13:06,110
It also gets this boundary property right here the boundary property is a string that describes exactly

176
00:13:06,110 --> 00:13:10,010
what is separating all the different fields inside of our form.

177
00:13:10,010 --> 00:13:13,910
So if we take a look at it it says Web Kit form boundary and then some random string of characters right

178
00:13:13,910 --> 00:13:14,450
there.

179
00:13:14,450 --> 00:13:20,930
If I go back over to the council like I just got we'll see if that is the boundary right there between

180
00:13:20,990 --> 00:13:23,330
every different input from my form.

181
00:13:23,540 --> 00:13:28,700
So whenever my server sees web get form boundary that essentially means hey here's another like chunk

182
00:13:28,700 --> 00:13:31,410
of data or another input out of the form.

183
00:13:31,640 --> 00:13:34,080
And then here is another and then here's another.

184
00:13:34,130 --> 00:13:38,240
In this case the last one is the actual image itself.

185
00:13:38,320 --> 00:13:43,200
So hopefully this kind of like behind the scenes look I know some of this was like very quickly that

186
00:13:43,210 --> 00:13:48,580
went through it but this is essentially what is going on with image submission or really file submission

187
00:13:48,880 --> 00:13:52,010
to our back end server or even while file upload I suppose.

188
00:13:52,010 --> 00:14:00,110
So we've got this multipart request every part represents a different input out of our form the last

189
00:14:00,110 --> 00:14:02,490
one is the actual image that is being uploaded.

190
00:14:02,630 --> 00:14:07,220
The reason we have to use this multipart form submission is because our file contains some raw data

191
00:14:07,220 --> 00:14:10,850
inside of it that cannot be safely turned into a U or L.

192
00:14:11,120 --> 00:14:16,190
The other big issue is that the middleware that we're using right now for automatically passing our

193
00:14:16,190 --> 00:14:23,000
post requests is only currently configured to receive a U URL encoded post request at this point.

194
00:14:23,000 --> 00:14:28,130
We no longer have a Euro encoded plus request instead we now have a post request with an encoding type

195
00:14:28,130 --> 00:14:29,270
of multipart phone data.

196
00:14:29,300 --> 00:14:33,720
So the existing middleware that we have right here is not going to work for us.

197
00:14:33,840 --> 00:14:34,060
All right.

198
00:14:34,110 --> 00:14:34,620
That's it.

199
00:14:34,620 --> 00:14:39,570
Hopefully that kind of outlines what is going on and what the issue is and hopefully it also makes you

200
00:14:39,570 --> 00:14:42,630
think about what we have to do to actually receive this file now.

201
00:14:42,660 --> 00:14:48,300
Yes we do like technically have the file on our server but just like we saw before when we were talking

202
00:14:48,300 --> 00:14:52,020
about this body passing stuff this format of data right here.

203
00:14:52,020 --> 00:14:54,870
Well you and I can't really easily access it right.

204
00:14:54,870 --> 00:14:59,850
Like we can't really very easily reach in here and get at that image and actually work that in some

205
00:14:59,850 --> 00:15:01,440
meaningful fashion.

206
00:15:01,440 --> 00:15:06,450
So as you might guess in the next video we're going to get another middleware specifically intended

207
00:15:06,660 --> 00:15:09,070
to handle multipart form submissions.

208
00:15:09,180 --> 00:15:12,780
It's going to reach into that form submission it's going to pull out each piece of data.

209
00:15:12,810 --> 00:15:17,760
So the title the price and also the image and it's going to give us the image in some way that we can

210
00:15:17,760 --> 00:15:19,770
actually work with it.

211
00:15:19,810 --> 00:15:20,090
All right.

212
00:15:20,110 --> 00:15:20,780
That's it.

213
00:15:20,780 --> 00:15:23,920
Stick a pause right here and start to tackle all that stuff in the next video.
