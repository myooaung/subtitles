1
00:00:01,530 --> 00:00:04,350
We just put together our logic to salt and hash a password.

2
00:00:04,350 --> 00:00:08,980
So now we just have to implement the logic that's going to take a password supplied by the user.

3
00:00:09,180 --> 00:00:10,630
Add on the salt to it.

4
00:00:10,650 --> 00:00:15,690
Run hashing algorithm on it and then compare the output against what was stored inside of our database.

5
00:00:15,690 --> 00:00:17,150
So let's get to it.

6
00:00:17,180 --> 00:00:20,450
I'm gonna go back over to my users repository file.

7
00:00:20,450 --> 00:00:21,390
I'll find the create method.

8
00:00:21,390 --> 00:00:26,880
We were just working on and then right after it I'm going to add in a new method that I would call compare

9
00:00:27,690 --> 00:00:34,630
passwords so they compare passwords function is going to be called with some saved password that we

10
00:00:34,630 --> 00:00:40,770
have from our database and some supplied password that the user just gave us.

11
00:00:40,790 --> 00:00:44,600
Now I'm gonna add in some comments here just to really make sure it's super clear about the nature of

12
00:00:44,600 --> 00:00:46,040
these two arguments.

13
00:00:46,310 --> 00:00:51,940
So the safe password is going to be password saved in our database.

14
00:00:52,100 --> 00:00:54,210
And remember its format is going to look something like this.

15
00:00:54,210 --> 00:01:00,270
It's going to be a string it's going to have the hashed portion and then a period and then the salt

16
00:01:00,300 --> 00:01:01,050
at the very end.

17
00:01:03,280 --> 00:01:11,540
Then we're also going to get the supplied which is the password given to us by to us by a user trying

18
00:01:11,540 --> 00:01:18,810
to sign it then inside this function we need to take that stored password from our database.

19
00:01:18,880 --> 00:01:20,710
It has that separator character in there.

20
00:01:20,860 --> 00:01:25,460
So we're gonna call split on it to get both the hash password and the salt.

21
00:01:25,660 --> 00:01:29,540
We're then gonna take that salt join it onto the one supplied by the user.

22
00:01:29,740 --> 00:01:34,900
We're gonna hash the output and once again do that comparison okay.

23
00:01:34,970 --> 00:01:38,910
So I'll go back over so over here.

24
00:01:38,950 --> 00:01:49,530
I'm gonna go ahead and call saved dot split on period I'll assign the results of that to results.

25
00:01:49,600 --> 00:01:52,640
It's now results is going to be an array with two strings inside of it.

26
00:01:52,800 --> 00:01:55,030
The first element will be our hash password.

27
00:01:55,230 --> 00:02:01,410
The second element will be the salt so I can get access to those two elements by doing hash is resulted

28
00:02:01,460 --> 00:02:11,930
0 and salt as result at 1 you're technically is a much nicer way to write out these three lines of code

29
00:02:11,930 --> 00:02:12,370
right here.

30
00:02:12,380 --> 00:02:17,900
It just involves a little bit of more complex javascript syntax so I can rewrite those three lines with

31
00:02:17,990 --> 00:02:18,770
a single line.

32
00:02:18,800 --> 00:02:27,860
By doing this I'll say const an array hashed and salt is saved dot split on period.

33
00:02:27,920 --> 00:02:32,500
So again these three lines 100 percent equivalent to that single line right there.

34
00:02:32,510 --> 00:02:36,500
So on the single line we are saying okay when we call save dot split we're going to get back in array

35
00:02:36,500 --> 00:02:38,270
with two elements.

36
00:02:38,270 --> 00:02:43,660
So we're going to d structure that array we're going to reach into the array we're going to try to pull

37
00:02:43,660 --> 00:02:48,730
out the first element and assign it to a variable called hash Well then pull out the second element

38
00:02:48,790 --> 00:02:51,320
and sign it to a variable called salt.

39
00:02:51,490 --> 00:02:55,870
Remember that by putting the square brackets on the left hand side that equals sine we are not creating

40
00:02:55,900 --> 00:02:56,850
a new array here.

41
00:02:56,860 --> 00:02:59,210
Instead we are trying to do some D structuring.

42
00:02:59,350 --> 00:03:04,620
So this is assigned to javascript that we want to reach into an array and pull some values out of it.

43
00:03:05,370 --> 00:03:10,030
So we're going to go with that slightly more compact version because less code is usually better code

44
00:03:12,460 --> 00:03:12,700
okay.

45
00:03:12,720 --> 00:03:16,950
So now we've got the hash password which remember is the hash plus altered password.

46
00:03:16,950 --> 00:03:19,900
It's like the purple square from this diagram.

47
00:03:19,960 --> 00:03:24,090
And we've got the salt which is the random string of characters we had previously created.

48
00:03:24,180 --> 00:03:28,610
And that is like the red box from this diagram.

49
00:03:28,710 --> 00:03:32,220
It's now we're going to take the password that the user supplied.

50
00:03:32,220 --> 00:03:37,960
We're going to hash it along with the salt that we had saved inside of our database language to say

51
00:03:37,990 --> 00:03:48,100
hash supplied is await a script we'll put in the supplied password as the password and the salt as the

52
00:03:48,090 --> 00:03:49,190
second argument.

53
00:03:49,190 --> 00:03:53,520
And then once again we'll put in the key length of 64 without worrying too much about exactly what that

54
00:03:53,520 --> 00:03:54,570
does.

55
00:03:54,720 --> 00:03:59,010
Whatever happens just make sure that the number you put in right there is equal to the number that we've

56
00:03:59,010 --> 00:04:00,540
got backup here inside of create

57
00:04:04,070 --> 00:04:06,610
then after that we'll do our comparison.

58
00:04:06,610 --> 00:04:11,110
So this is where we are going to take these purple boxes and just compare them together.

59
00:04:11,200 --> 00:04:19,870
So I'm going to return the results of comparing the hash faster password against the hash supplied password

60
00:04:21,590 --> 00:04:25,150
so we're gonna say do a comparison that's gonna return true or false.

61
00:04:25,370 --> 00:04:29,620
It's going to take the results of that expression and just return it directly from compare passwords

62
00:04:31,400 --> 00:04:31,640
okay.

63
00:04:31,660 --> 00:04:33,750
So that's pretty much it for compare passwords.

64
00:04:33,790 --> 00:04:38,650
So I going to save this file and now all we have to do is add in some code to our index not just file.

65
00:04:38,760 --> 00:04:43,530
We're going to make sure that we call that computer passwords method instead of doing this a very simple

66
00:04:43,530 --> 00:04:49,120
comparison that we currently have inside of our post request handler for dealing with a sign in attempts.

67
00:04:49,140 --> 00:04:50,330
Let's take a quick pause.

68
00:04:50,340 --> 00:04:53,220
Come back the next video and update that comparison right there.
