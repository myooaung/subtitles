WEBVTT
1
00:00:01.080 --> 00:00:04.990
In this video we're going to discuss another big issue with our current project.

2
00:00:05.040 --> 00:00:07.730
This is the last big issue we're going to tackle after this one.

3
00:00:07.740 --> 00:00:12.270
We're then going to start to focus on the product side of our application so let's figure out what is

4
00:00:12.270 --> 00:00:16.320
all that wrong with our project right now and figure out how to fix it up okay.

5
00:00:16.340 --> 00:00:20.360
So I got to give you a quick demonstration over at that base camp Web site once again.

6
00:00:20.600 --> 00:00:21.770
You don't have to go to base camp.

7
00:00:21.770 --> 00:00:22.870
We're not using it for anything.

8
00:00:22.880 --> 00:00:27.570
I just want to give you a very quick demonstration on how they're logging form works.

9
00:00:27.720 --> 00:00:29.760
So I am on the sign in page.

10
00:00:30.080 --> 00:00:36.620
I'm going to enter in a garbage e-mail right here when I hit next and then going to see a validation

11
00:00:36.620 --> 00:00:38.240
message on the same form.

12
00:00:38.780 --> 00:00:44.510
So a user could use this form try to log in see validation message right away and then say oh I must

13
00:00:44.510 --> 00:00:49.370
have put in the incorrect e-mail I'm going to put in a correct one and then attempt to sign in again

14
00:00:50.790 --> 00:00:54.580
unfortunately our application doesn't work as nicely as this one right now.

15
00:00:54.630 --> 00:00:59.520
Let's take a look at what our app does when a user fails to sign incorrectly.

16
00:00:59.520 --> 00:01:01.930
So I got to go back to our application.

17
00:01:02.060 --> 00:01:05.740
I'm gonna go to the slash sign in route.

18
00:01:05.940 --> 00:01:07.790
So here is our sign in form.

19
00:01:08.000 --> 00:01:14.400
And now if I enter in a garbage email and a garbage password and click sign in I get a separate each

20
00:01:14.400 --> 00:01:21.530
HTML document altogether that says email not found so when a user uses our application they are going

21
00:01:21.530 --> 00:01:26.570
to submit the form and then see an error and then to actually attempt to log in again a user would have

22
00:01:26.570 --> 00:01:31.940
to go click the back button and once they hit that back button they've now lost that validation message

23
00:01:31.970 --> 00:01:35.800
and so they might not quite remember exactly what just went wrong.

24
00:01:35.960 --> 00:01:40.970
And so they might try to sign it again with the same exact invalid e-mail and just end up seeing the

25
00:01:40.970 --> 00:01:43.400
same error message again.

26
00:01:43.400 --> 00:01:48.320
So what I want to do is get a logging experience a little bit more similar to base camps.

27
00:01:48.410 --> 00:01:53.780
I want to make sure that if a user attempts to log in and enters in an invalid email or password I want

28
00:01:53.780 --> 00:01:59.540
to show the same form to the user but with a validation message on here that tells them exactly what

29
00:01:59.540 --> 00:02:01.970
just went wrong.

30
00:02:02.130 --> 00:02:06.200
I want to make sure that the same thing happens for our sign up page as well.

31
00:02:06.240 --> 00:02:16.100
So if a user goes to a slash sign up and they enter in say two passwords that don't match I don't want

32
00:02:16.100 --> 00:02:19.040
to have a separate each single document to show that validation message.

33
00:02:19.040 --> 00:02:23.900
Instead I want to show that validation message on the exact same form so that a user can attempt to

34
00:02:24.110 --> 00:02:27.750
sign up again right away without having to go click on that back button.

35
00:02:28.570 --> 00:02:33.910
So it's pretty clear the reason I show you both the sign in and the sign up pages for this.

36
00:02:33.990 --> 00:02:38.080
The thing I want make sure is kind of clear here is that we're not going to do like some kind of one

37
00:02:38.110 --> 00:02:39.480
off behavior here.

38
00:02:39.520 --> 00:02:43.140
In other words we're not talking about just showing you validation message on one form.

39
00:02:43.240 --> 00:02:48.030
We're talking about figuring out some repeatable solution that we can use again and again and again

40
00:02:48.040 --> 00:02:52.030
inside of our project to handle validation on all the different forms we create.

41
00:02:52.690 --> 00:02:56.800
So whatever solution we come up with for this needs to be easily repeatable and needs to be kind of

42
00:02:56.800 --> 00:03:00.850
convenient for us to use as developers as well.

43
00:03:00.860 --> 00:03:04.910
The other thing I want to point out here is that we're really discussing kind of two distinct different

44
00:03:04.910 --> 00:03:06.080
problems.

45
00:03:06.110 --> 00:03:11.330
The first problem or the first part of this problem is that well we need to somehow validate these different

46
00:03:11.330 --> 00:03:13.910
messages or these different inputs.

47
00:03:14.080 --> 00:03:18.510
We need to produce a reasonable feedback message to send to the user.

48
00:03:18.550 --> 00:03:23.980
The second part of the problem is that we need to somehow take that validation message and show it inside

49
00:03:24.010 --> 00:03:26.580
of the different views that we've put together.

50
00:03:26.590 --> 00:03:34.500
So the sign in view and the sign up view that we're going to first focus on part 1 of this problem we're

51
00:03:34.500 --> 00:03:39.450
going to figure out a convenient way to handle validation inside of our application a more convenient

52
00:03:39.450 --> 00:03:44.700
way than what we are doing right now which is to do these simple if statements inside of our post request

53
00:03:44.700 --> 00:03:49.590
handler for sign up and the post request handler for signing in as well.

54
00:03:49.620 --> 00:03:53.700
So we need to have some more convenient way of doing this validation stuff.

55
00:03:53.810 --> 00:03:57.450
So that's gonna be the first big focus we have.

56
00:03:57.470 --> 00:04:02.540
Let me show you a library that we're going to use to handle validation for us in some kind of automatic

57
00:04:02.540 --> 00:04:08.720
sense inside of our project that we're going to be using a library called Express validator to help

58
00:04:08.720 --> 00:04:12.190
us validate the contents of all these different forms.

59
00:04:12.200 --> 00:04:18.840
Let's take a look at the documentation for this library by going to NPM J Ask.com I'm going to search

60
00:04:18.840 --> 00:04:27.310
for Express dash validator and hopefully I'll be the first result on this list.

61
00:04:27.330 --> 00:04:32.460
So this is a middleware very similar to some of the other middleware that we've used already specifically

62
00:04:32.460 --> 00:04:33.570
made for you guessed it.

63
00:04:33.570 --> 00:04:39.180
EXPRESS j ust which is what we are using inside of our application so we need to install this as an

64
00:04:39.210 --> 00:04:40.890
NPM dependency.

65
00:04:40.920 --> 00:04:45.690
We also can take a look at the documentation as well by going to that link right there and I'm going

66
00:04:45.690 --> 00:04:49.930
to take out a look at the documentation right away okay.

67
00:04:49.960 --> 00:04:55.450
So inside this Getting Started page for the documentation we can get a pretty good example on how to

68
00:04:55.450 --> 00:04:56.470
make use of this.

69
00:04:56.500 --> 00:05:01.410
It's got kind of a interesting style to take a look at the second code snippet right here.

70
00:05:01.480 --> 00:05:03.190
It's a little bit hard to see let me zoom in.

71
00:05:03.220 --> 00:05:09.520
Just make it easier to the idea behind the Express validator library is that we're going to pass in

72
00:05:09.520 --> 00:05:16.000
an array as the second argument to our post request or whatever request handlers inside our application

73
00:05:16.780 --> 00:05:22.360
and inside that array we're going to tell express validator to automatically do some validation on the

74
00:05:22.360 --> 00:05:28.540
different inputs that are being provided to our callback or this root handler from the browser so when

75
00:05:28.540 --> 00:05:34.150
we say check user name and check password right here that is telling express validator to go and find

76
00:05:34.180 --> 00:05:41.080
a username property or a password property inside the request body it's then going to check to make

77
00:05:41.080 --> 00:05:43.690
sure that the user name provided isn't email.

78
00:05:43.840 --> 00:05:50.320
And in this case that the password is at least five characters long then if there is any validation

79
00:05:50.320 --> 00:05:57.560
error with those two inputs inside of the request handler itself right here we are supposed to call

80
00:05:57.590 --> 00:06:02.630
validation results on that request object and that's going to give us back an object that tells us whether

81
00:06:02.630 --> 00:06:06.390
or not there were any errors in that incoming data.

82
00:06:06.400 --> 00:06:10.270
So this is the library that we're going to use to do some better validation of the inputs that are being

83
00:06:10.270 --> 00:06:11.640
given to us.

84
00:06:11.730 --> 00:06:15.730
So let's install this and then we'll figure out how to use it a little bit more in detail beyond the

85
00:06:15.760 --> 00:06:22.020
simple example we see right here in the next video I'm gonna go back over to my terminal I'm going to

86
00:06:22.030 --> 00:06:33.030
stop my server I'll do an npm install express dash validator I'll let that do its thing and once it's

87
00:06:33.030 --> 00:06:38.520
done I'm going to make sure that I restart my server with NPM run Dev okay.

88
00:06:38.560 --> 00:06:42.660
It's like I said Quick pause we'll come back in just a moment and we'll make sure that we add in some

89
00:06:42.660 --> 00:06:47.850
code to handle validation of these different things that are being provided to us from our form a little

90
00:06:47.850 --> 00:06:49.710
bit better than what we're doing right now.
