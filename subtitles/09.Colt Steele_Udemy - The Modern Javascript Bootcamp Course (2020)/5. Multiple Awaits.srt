1
00:00:00,240 --> 00:00:00,990
Welcome back.

2
00:00:00,990 --> 00:00:06,750
Next we'll get a bit more practice with a sink and a wait so I'm using code that I wrote back in the

3
00:00:06,780 --> 00:00:08,130
promises section.

4
00:00:08,130 --> 00:00:13,620
I know I've said this in pretty much every video so far in this async section but if you did not watch

5
00:00:13,620 --> 00:00:17,880
the promises section highly highly recommend you go back and check it out or at least look at the code

6
00:00:17,910 --> 00:00:18,950
in more detail.

7
00:00:18,960 --> 00:00:23,720
Remember that everything we're seeing here with a sink and a weight it's all promises underneath there

8
00:00:23,730 --> 00:00:24,580
behind the scenes.

9
00:00:24,620 --> 00:00:30,270
It's just a little wallpaper on top or makeup on top or painter who knows it's something on top to decorate

10
00:00:30,270 --> 00:00:32,010
it to make it nice and pretty.

11
00:00:32,010 --> 00:00:37,590
So this function that we created a couple of sections ago is called Move X move X returns a promise.

12
00:00:37,650 --> 00:00:44,790
And in this promise it will move an element a certain number of pixels horizontally or along the x axis

13
00:00:44,790 --> 00:00:48,590
left or right depending on the number you pass in positive or negative.

14
00:00:48,840 --> 00:00:50,540
And then it uses a delay.

15
00:00:50,610 --> 00:00:55,700
So it waits one second or three seconds before it actually does that operation.

16
00:00:55,890 --> 00:00:59,400
So it returns a promise set time out with a delay.

17
00:00:59,400 --> 00:01:06,210
I'm using one second for all of them and then it moves some element that number of pixels using transform

18
00:01:06,680 --> 00:01:07,580
in less.

19
00:01:07,590 --> 00:01:09,730
We don't have enough room to keep moving.

20
00:01:09,900 --> 00:01:12,270
So at that point the promise is rejected.

21
00:01:12,270 --> 00:01:16,500
If we do have enough room the element is moved and the promise is resolved.

22
00:01:16,770 --> 00:01:18,050
So we end up with something like this.

23
00:01:18,060 --> 00:01:24,250
If I shrink my window down we can move a couple times and then the promise is rejected.

24
00:01:24,250 --> 00:01:31,480
We caught it with our catch down here and we canceled out logged some information about the error.

25
00:01:31,600 --> 00:01:34,430
This is what we had before this massive massive callbacks.

26
00:01:34,430 --> 00:01:38,530
Success and Failure callbacks promises really helped us clean it up.

27
00:01:38,530 --> 00:01:42,270
Now we'll see how we can continue to clean it up using async functions.

28
00:01:42,340 --> 00:01:44,910
We won't have to write any of these events.

29
00:01:44,980 --> 00:01:48,360
So what we'll start with is calling move x.

30
00:01:48,370 --> 00:01:50,660
Guess I'll just come at this out.

31
00:01:50,780 --> 00:01:51,750
We'll keep the button.

32
00:01:51,790 --> 00:01:57,020
We do need that duplicated just so we have a record of the original.

33
00:01:57,240 --> 00:02:02,230
We need to select the button and we'll call move X. But I'm going to do it from inside an async function

34
00:02:02,830 --> 00:02:04,820
so I'll call this function.

35
00:02:04,820 --> 00:02:06,200
How about animate.

36
00:02:06,280 --> 00:02:07,210
Right.

37
00:02:07,210 --> 00:02:09,670
It's not really a nice animation because it's so choppy.

38
00:02:09,700 --> 00:02:11,330
But we'll call it intimate right.

39
00:02:11,350 --> 00:02:18,920
We'll make it an async function and we'll pass an element then inside of here.

40
00:02:19,080 --> 00:02:26,140
We will call move X which returns a promise I'll pass in that element I'll pass in an amount.

41
00:02:26,820 --> 00:02:33,930
So let's just hard code this as a hundred pixels at a time every second 1000 milliseconds.

42
00:02:33,930 --> 00:02:37,020
This returns a promise so I can await it.

43
00:02:37,410 --> 00:02:44,150
And if I want to wait for this to finish before I run the next move X I don't need dot then I can just

44
00:02:44,170 --> 00:02:46,640
await this first one and then do it again.

45
00:02:46,650 --> 00:02:52,950
Fingers crossed hopefully we move twice as long as we pass in the correct button to animate.

46
00:02:52,950 --> 00:02:53,730
Right.

47
00:02:53,760 --> 00:03:01,730
So we'll call Animal Rights Beatty and refresh one jump to jump.

48
00:03:01,820 --> 00:03:03,170
Awesome.

49
00:03:03,170 --> 00:03:07,930
So if we wanted to move this many times we could do the exact same thing.

50
00:03:08,000 --> 00:03:11,510
We just duplicate this every time and we await.

51
00:03:11,510 --> 00:03:17,480
We say wait until that promise that is returned from move X has been resolved.

52
00:03:17,480 --> 00:03:20,880
And if it's resolved then move on to the next one.

53
00:03:20,900 --> 00:03:25,700
However right now we're not catching any errors so if we do hit that boundary and the promise is rejected

54
00:03:26,570 --> 00:03:29,010
you'll see we get an error.

55
00:03:29,210 --> 00:03:31,470
We'll take a look good.

56
00:03:31,520 --> 00:03:37,970
It's waiting every time for that promise to be resolved and then boom uncut error.

57
00:03:37,970 --> 00:03:39,320
We did not catch this anywhere.

58
00:03:39,830 --> 00:03:42,350
We just talked about how we can catch errors.

59
00:03:42,470 --> 00:03:51,650
We could add a try catch in our function but I would probably do is right here is at a catch for that

60
00:03:51,650 --> 00:03:52,010
error.

61
00:03:52,670 --> 00:03:54,930
And then we could just cancel that log.

62
00:03:55,040 --> 00:03:56,210
All done.

63
00:03:56,210 --> 00:04:01,450
Let's see if it works OK continue.

64
00:04:01,460 --> 00:04:04,010
Awesome and all done.

65
00:04:04,010 --> 00:04:05,640
Perfect.

66
00:04:05,800 --> 00:04:06,070
OK.

67
00:04:06,080 --> 00:04:09,230
So if we take a look at this compared to what we had here.

68
00:04:09,370 --> 00:04:11,520
I mean it's not a massive improvement.

69
00:04:11,630 --> 00:04:16,790
We don't have to write all the dot then we don't need these unnecessary callbacks anymore which I think

70
00:04:16,790 --> 00:04:18,350
is definitely worth it.

71
00:04:18,680 --> 00:04:22,170
And all we have to do is add in a wait and async.

72
00:04:22,580 --> 00:04:24,650
Now this is relatively simple logic we're doing.

73
00:04:24,650 --> 00:04:27,860
It's not much logic at all it's the same thing every time.

74
00:04:28,010 --> 00:04:33,950
So it maybe isn't as clear but when we talk about making sequential requests which is what we'll see

75
00:04:33,950 --> 00:04:34,460
next.

76
00:04:34,490 --> 00:04:40,150
Making axes OS or fetch requests one after another where they depend on each other using async await

77
00:04:40,160 --> 00:04:43,220
makes it much easier to read and understand what's going on.

78
00:04:43,280 --> 00:04:49,280
Not to mention shorter so why don't we wrap this up instead of just intimating to the right why don't

79
00:04:49,280 --> 00:04:57,980
we also once we hit the end estimate back to the left so we could change this estimate right to accept

80
00:04:57,980 --> 00:05:04,580
an amount and then anytime I'm passing in one hundred there I'll replace it with amount and then here

81
00:05:05,120 --> 00:05:10,520
when we get that error when we've hit the edge why don't we cancel that log and move the other direction

82
00:05:11,000 --> 00:05:13,070
so counsel that log all done.

83
00:05:13,070 --> 00:05:20,980
And then we can call animate writes same element PETN this time.

84
00:05:20,980 --> 00:05:26,870
Here we need to say we're moving a hundred pixels this time let's move negative one hundred pixels.

85
00:05:27,010 --> 00:05:28,300
Let's see if that works.

86
00:05:28,360 --> 00:05:34,600
So we moved to the right and we're going to hit that edge we get all done.

87
00:05:34,730 --> 00:05:36,730
And now we're moving back to the left.

88
00:05:36,740 --> 00:05:41,330
Now we don't really have any error handling for the left side so we're just going to keep moving off

89
00:05:41,330 --> 00:05:48,030
the screen because our logic right now in estimates or in move x is just checking the right boundary.

90
00:05:48,230 --> 00:05:54,830
So I think that's a bit of an oversight but we now have this async function here that we can call it

91
00:05:54,830 --> 00:05:56,650
returns a promise within it.

92
00:05:56,780 --> 00:06:01,840
We can await any other thing that returns a promise and mimic synchronous code.

93
00:06:01,850 --> 00:06:04,490
So next we'll see how we can do this with requests.

94
00:06:04,490 --> 00:06:09,710
How can we have sequential requests and we'll also talk about parallel requests which is another way

95
00:06:09,800 --> 00:06:13,890
of sending multiple requests where we don't have to wait for one to come back first.
