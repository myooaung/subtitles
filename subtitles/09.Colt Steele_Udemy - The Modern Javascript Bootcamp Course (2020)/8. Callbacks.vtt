WEBVTT
1
00:00:00.300 --> 00:00:05.020
Next up an important piece of terminology that comes up all the time in JavaScript.

2
00:00:05.050 --> 00:00:11.490
There's a million blog posts and YouTube videos written about callbacks callbacks are simply functions

3
00:00:11.640 --> 00:00:16.190
that are passed into other functions to be invoked within the outer function.

4
00:00:16.230 --> 00:00:17.860
So we've already done this we've seen it.

5
00:00:17.910 --> 00:00:20.210
We just didn't call it a callback.

6
00:00:20.340 --> 00:00:23.160
If we go back to this example call twice.

7
00:00:23.160 --> 00:00:28.530
We wrote a function called twice which accepts a single function and it executes it two times.

8
00:00:28.530 --> 00:00:33.980
In this example the function we pass in laugh is a callback.

9
00:00:34.050 --> 00:00:37.680
It is called within this outer function called twice.

10
00:00:37.680 --> 00:00:43.440
So anytime we pass a function to another function and it's executed in that function we would call it

11
00:00:43.560 --> 00:00:48.000
a callback and callbacks are extremely extremely common in JavaScript.

12
00:00:48.060 --> 00:00:49.940
We can write code like we did here.

13
00:00:49.950 --> 00:00:54.740
We can write our own function that accepts callbacks but also tons of the built in methods.

14
00:00:54.750 --> 00:01:00.060
The really useful ones in JavaScript expect you to pass in a callback if you want to make a request

15
00:01:00.090 --> 00:01:03.450
to load data from Facebook API.

16
00:01:03.600 --> 00:01:05.140
That request takes time.

17
00:01:05.190 --> 00:01:09.120
We pass in a callback function that will be called when the request is finished.

18
00:01:09.150 --> 00:01:14.640
When the data is back if we want to run code when a user clicks on a button on a page or when they hover

19
00:01:14.640 --> 00:01:20.160
over a photo the code that we write to set that up requires us to pass in a callback function which

20
00:01:20.160 --> 00:01:24.180
will be executed when the user hovers or when the user clicks.

21
00:01:24.180 --> 00:01:26.950
So in this video I just want to show you some of that.

22
00:01:27.030 --> 00:01:29.190
This is not the one video on callbacks.

23
00:01:29.190 --> 00:01:31.800
This is an intro to the general concept.

24
00:01:31.920 --> 00:01:34.910
Then in the next couple sections we'll see tons of them.

25
00:01:34.920 --> 00:01:39.040
There are lots of built in array methods and we're going to spend a good amount of time covering them.

26
00:01:39.120 --> 00:01:42.900
They all accept callbacks so it's not some foreign crazy concept.

27
00:01:42.990 --> 00:01:44.110
We've already been doing it.

28
00:01:44.220 --> 00:01:46.770
We just haven't been using the term callback.

29
00:01:46.770 --> 00:01:51.870
This is the callback the function that we pass in the one thing that we haven't talked about is much

30
00:01:51.870 --> 00:01:54.540
with callbacks or with higher order functions.

31
00:01:54.540 --> 00:01:58.280
Is that often we use anonymous functions when we call them.

32
00:01:58.320 --> 00:02:03.390
We pass in an anonymous function rather than an existing function like laugh.

33
00:02:03.400 --> 00:02:08.070
There's nothing wrong with this but sometimes we just need a one time use function.

34
00:02:08.100 --> 00:02:13.280
We don't need it to be a standalone function in which case we use an anonymous function.

35
00:02:13.320 --> 00:02:17.370
I'm saying function a lot starting to sound weird to me but let me show you an example of something

36
00:02:17.370 --> 00:02:19.820
we haven't seen in JavaScript.

37
00:02:19.830 --> 00:02:27.270
There is a method called set timeout set timeout will run a certain block of code or a function of code

38
00:02:27.660 --> 00:02:34.470
after a certain number of milliseconds or seconds we pass in a number of milliseconds like five thousand

39
00:02:34.530 --> 00:02:41.700
which is five seconds but the first argument we need to pass it is a function so a function to run and

40
00:02:41.700 --> 00:02:44.700
then how long to wait before it runs.

41
00:02:44.700 --> 00:02:49.530
If you look at the documentation on empty in this first argument it's called function.

42
00:02:49.530 --> 00:02:53.700
In this case a function to be executed after the timer expires.

43
00:02:53.700 --> 00:02:57.000
That's what we need to pass it like function Grumps.

44
00:02:57.170 --> 00:03:03.360
Good old crumpets function but instead of constant logging let's do something more obvious we will alert.

45
00:03:03.360 --> 00:03:04.050
If you don't remember.

46
00:03:04.050 --> 00:03:04.780
Alert.

47
00:03:04.940 --> 00:03:09.030
Passing something in here like gibberish.

48
00:03:09.230 --> 00:03:12.890
I'll go over to my actual browser window where it is and I get an alert.

49
00:03:12.890 --> 00:03:17.870
It pops up one of the most irritating things ever when a website actually uses alerts.

50
00:03:17.870 --> 00:03:23.160
I don't recommend you do it but it's more obvious easier for us to see compared to a console log all

51
00:03:23.210 --> 00:03:26.860
alert something like go away.

52
00:03:27.650 --> 00:03:33.350
And then if I wanted to call this function after five thousand milliseconds I could pass it in right

53
00:03:33.350 --> 00:03:36.250
here using a name Grumps.

54
00:03:36.470 --> 00:03:40.580
That's the name of my function and if I run this code I'll refresh my page.

55
00:03:40.640 --> 00:03:46.430
I have the browser page open after 5 millisecond or 5 seconds almost there.

56
00:03:46.430 --> 00:03:47.360
There we go.

57
00:03:47.480 --> 00:03:51.890
It alerts so what we've seen is that said timeout accepts the function.

58
00:03:51.890 --> 00:03:53.920
This is not a function we wrote said time out.

59
00:03:53.930 --> 00:03:55.750
It comes in the browser for free.

60
00:03:55.760 --> 00:03:56.930
It's built in.

61
00:03:56.930 --> 00:04:01.160
It expects us to pass in a function and a number of milliseconds.

62
00:04:01.310 --> 00:04:08.030
And in our example we wrote a function and passed it in but we can also do it in line using an anonymous

63
00:04:08.030 --> 00:04:08.990
function.

64
00:04:08.990 --> 00:04:14.990
So remember these anonymous functions look like this function and then no name.

65
00:04:15.040 --> 00:04:21.680
It's just function and this is a way of saying after 5000 milliseconds run this chunk of code it doesn't

66
00:04:21.680 --> 00:04:22.300
have a name.

67
00:04:22.310 --> 00:04:27.870
I'm not going to use it anywhere else if I simply wanted to say alert.

68
00:04:27.950 --> 00:04:29.210
Welcome.

69
00:04:29.210 --> 00:04:30.670
This is a one time thing.

70
00:04:30.740 --> 00:04:35.290
I don't need this to be a reusable function that I can call over and over somewhere else.

71
00:04:35.570 --> 00:04:40.340
Then I don't have to make it a reusable function I don't have to make it a named function or save it

72
00:04:40.340 --> 00:04:43.650
to a variable I can just pass in this function expression.

73
00:04:43.720 --> 00:04:49.730
And this is a very common pattern set time out not the set time apart but passing in an anonymous function

74
00:04:49.970 --> 00:04:51.740
to another function.

75
00:04:51.890 --> 00:04:53.780
So we'll see this quite a bit.

76
00:04:53.780 --> 00:04:58.790
This function will be called after five thousand seconds 5000 milliseconds.

77
00:04:58.850 --> 00:05:02.330
I should have done 3000 5000 takes a little bit too long.

78
00:05:02.480 --> 00:05:03.320
Don't know what to say.

79
00:05:03.370 --> 00:05:04.490
OK there it is.

80
00:05:04.490 --> 00:05:06.620
This page says Welcome.

81
00:05:06.620 --> 00:05:08.220
So that's one example.

82
00:05:08.330 --> 00:05:09.820
I'm going to show you another example.

83
00:05:09.890 --> 00:05:14.060
This one's a little bit more advanced it involves some stuff we haven't seen before.

84
00:05:14.090 --> 00:05:16.630
But it's also a bit more exciting.

85
00:05:16.730 --> 00:05:22.270
We're going to write some code that will run when we click a button on the page.

86
00:05:22.430 --> 00:05:24.080
So we need to add a button.

87
00:05:24.140 --> 00:05:29.240
First of all so in our HDMI page we'll add a button inside the body.

88
00:05:29.240 --> 00:05:34.730
We haven't covered anything around DOM manipulation events so this is a preview of something we'll spend

89
00:05:34.730 --> 00:05:36.860
a lot of time on later on in the course.

90
00:05:37.100 --> 00:05:39.560
But a lot of button here that says don't click ME

91
00:05:42.740 --> 00:05:50.060
AND THEN SOMETHING I NEED TO DO THAT'S IMPORTANT IS MOVE MY SCRIPT tag down to the end of my body because

92
00:05:50.060 --> 00:05:55.760
this script needs to run after all of the content is loaded after the button is on the page.

93
00:05:55.760 --> 00:06:00.640
If I left it here it would run first before the button was on the page.

94
00:06:00.750 --> 00:06:05.900
Now again the takeaway here is not the actual syntax it's not the methods the code I'm going to show

95
00:06:05.900 --> 00:06:08.970
you it's the pattern of passing in a callback.

96
00:06:09.050 --> 00:06:14.220
So in order to run code when this button is clicked I need to start by selecting it.

97
00:06:14.270 --> 00:06:18.380
This is something we will spend time on later on so don't get hung up on it but I'll make a variable

98
00:06:18.380 --> 00:06:25.340
called B10 and I'm going to select that button document that query selector pass in a string of button

99
00:06:25.760 --> 00:06:29.030
and this will select the button for me that was here.

100
00:06:29.030 --> 00:06:34.640
Now the way I run code when we click on that button is by calling a method called add event listener

101
00:06:34.730 --> 00:06:36.380
on the button.

102
00:06:36.380 --> 00:06:41.170
I'm going to listen for a click and then this second part is the most important piece.

103
00:06:41.180 --> 00:06:48.290
This is a function to run when the button is clicked so we could define a separate function like Grumps

104
00:06:48.760 --> 00:06:51.280
and I could pass that in right here.

105
00:06:51.620 --> 00:06:55.260
Then when I click on that button Grumps will be called.

106
00:06:55.460 --> 00:06:56.450
We can play around with it.

107
00:06:56.480 --> 00:07:01.200
Here's my button up and get an error because I didn't uncommon Grumps.

108
00:07:01.280 --> 00:07:07.430
Try that again refresh the page I click I get my alert and this approach works.

109
00:07:07.430 --> 00:07:10.830
If we needed Grumps somewhere else if we wanted to do something with it.

110
00:07:10.910 --> 00:07:14.680
But if this is just a one time thing I'm only using it here.

111
00:07:14.930 --> 00:07:17.200
I can add in an anonymous function.

112
00:07:17.300 --> 00:07:20.770
This is my callback function Grumps was a callback as well.

113
00:07:20.780 --> 00:07:22.100
This is a different callback.

114
00:07:22.100 --> 00:07:25.830
This one is anonymous and all alert.

115
00:07:25.880 --> 00:07:27.440
Why did you click me.

116
00:07:30.810 --> 00:07:34.510
And if we test this out refresh the page click.

117
00:07:34.830 --> 00:07:35.700
Why did you click me.

118
00:07:35.700 --> 00:07:40.760
Don't panic about any of this syntax query SELECT YOUR document add event listener.

119
00:07:40.920 --> 00:07:42.450
Just worry about this part.

120
00:07:42.480 --> 00:07:45.620
We're passing in a function just like we did right here.

121
00:07:45.810 --> 00:07:51.360
We pass a function into another function and the typical pattern you'll see a lot is to use an anonymous

122
00:07:51.360 --> 00:07:54.610
function rather than declaring it and giving it a name.

123
00:07:54.630 --> 00:07:58.470
If you don't need to reuse it if you don't need to do that it's a one time thing.

124
00:07:58.500 --> 00:08:01.080
Just pass it in as an anonymous function.

125
00:08:01.110 --> 00:08:04.980
In fact this is such a common thing that there is an even shorter way of doing this.

126
00:08:04.980 --> 00:08:07.770
A shorter syntax that we'll see in the next section.

127
00:08:08.220 --> 00:08:10.540
So this is just an intro to callbacks.

128
00:08:10.560 --> 00:08:16.830
The idea of passing a function in to another function the term that describes this function we pass

129
00:08:16.830 --> 00:08:19.180
in is callback.

130
00:08:19.270 --> 00:08:19.580
All right.
