WEBVTT
1
00:00:00.890 --> 00:00:01.880
Just two methods left.

2
00:00:01.880 --> 00:00:03.920
Get one by and update.

3
00:00:03.920 --> 00:00:06.480
In this video we're going to take you to the update method.

4
00:00:06.560 --> 00:00:11.540
So the idea behind this method is that we're going to receive an I.D. and some object that has the new

5
00:00:11.540 --> 00:00:12.030
attribute.

6
00:00:12.030 --> 00:00:14.720
So we want to use to update an existing record.

7
00:00:14.720 --> 00:00:18.390
We're then going to find the appropriate record inside of our array of records.

8
00:00:18.400 --> 00:00:20.590
Update it and then save all that stuff.

9
00:00:20.660 --> 00:00:23.250
Back to our users not just on file.

10
00:00:23.390 --> 00:00:27.590
So let's get to it back inside of my editor right after the delete.

11
00:00:27.590 --> 00:00:35.850
Matthew we just put together or define async update so this will receive arguments of I.T. and adders

12
00:00:37.550 --> 00:00:41.650
and inside of here we're going to first get all of our records and then find the one that we actually

13
00:00:41.650 --> 00:00:42.160
care about.

14
00:00:42.160 --> 00:00:45.810
So I'll say concert records is a wait.

15
00:00:45.940 --> 00:00:50.260
This dot get all and then we will get the record that we care about.

16
00:00:50.270 --> 00:00:58.380
So it will be concert record is record it's not fined we'll iterate over every record.

17
00:00:58.570 --> 00:01:04.030
We're going to look at each one's I.D. and then return the one with an I.D. equal to the idea that was

18
00:01:04.030 --> 00:01:09.490
passed into the update function and you'll notice that the logic that we have right here looks awfully

19
00:01:09.490 --> 00:01:12.850
similar to some of the logic we just put together inside of get one up here.

20
00:01:12.850 --> 00:01:16.240
And so you might be thinking why don't we just reuse the get one function.

21
00:01:16.240 --> 00:01:21.070
Well the reason for that is after we do the update to the record that we just found we have to save

22
00:01:21.100 --> 00:01:26.590
all these records back to the user j some file and the keyword there is save all the records.

23
00:01:27.280 --> 00:01:30.000
So we need to get all the records anyways.

24
00:01:30.070 --> 00:01:34.750
So even though yes we could make use the get one method we still have to call get all at the end of

25
00:01:34.750 --> 00:01:39.850
the day anyhow because we have to have the entire list for when we plan to save it back into the users

26
00:01:39.850 --> 00:01:41.380
not just on file.

27
00:01:41.380 --> 00:01:47.810
So that's why we can't really use or reuse some code from get one to effectively so then after that

28
00:01:47.880 --> 00:01:52.650
I'm gonna check to see if we have found a record if you haven't found a record that means that something

29
00:01:52.650 --> 00:01:54.310
is going very wrong.

30
00:01:54.420 --> 00:01:58.980
And so I'm going to throw it in error to say sorry but we didn't find what you were looking for.

31
00:01:58.980 --> 00:02:08.390
So I'll say if there is not a record let's throw a new error and we'll do some back ticks in here and

32
00:02:08.390 --> 00:02:14.630
say a record with I.D. of I.D. not found not you'll notice.

33
00:02:14.640 --> 00:02:16.150
Another interesting thing here.

34
00:02:16.230 --> 00:02:21.210
We are throwing an area if we didn't find a record that we're trying to update but there are several

35
00:02:21.210 --> 00:02:22.310
other scenarios.

36
00:02:22.380 --> 00:02:26.550
Say once again get one right here where we are not throwing in air.

37
00:02:26.550 --> 00:02:32.310
So if we call get one and we don't find that record we just return presumably undefined or no whatever

38
00:02:32.580 --> 00:02:35.010
records not find returns by default.

39
00:02:35.010 --> 00:02:37.470
So why are we not throwing an error in that case.

40
00:02:37.470 --> 00:02:42.090
Well the reason is when we call get one the kind of implicit understanding is that whoever is calling

41
00:02:42.090 --> 00:02:45.750
get one is going to check to see if we actually found some record.

42
00:02:45.780 --> 00:02:50.610
In other words if you are calling get one if you are a developer who was making use this method it's

43
00:02:50.610 --> 00:02:54.320
kind of up to you to make sure that you actually got what you were expecting to find.

44
00:02:55.200 --> 00:03:00.000
However in the case of updates the kind of implicit understanding here is that we're going to call update

45
00:03:00.270 --> 00:03:02.380
and some record is going to be updated.

46
00:03:02.400 --> 00:03:03.330
That's the understanding.

47
00:03:03.330 --> 00:03:04.400
That's our hope.

48
00:03:04.440 --> 00:03:08.630
If we don't find the records update that means that something is very very wrong.

49
00:03:08.670 --> 00:03:13.850
It means that we just passed in an I.D. to update something that doesn't even exist.

50
00:03:13.860 --> 00:03:17.780
How could we possibly have an I.D. to a record that doesn't exist at all.

51
00:03:17.790 --> 00:03:20.470
So that really indicates that something is very wrong with our code.

52
00:03:20.490 --> 00:03:23.640
And so it's a little bit more appropriate to throw an error in that scenario

53
00:03:26.380 --> 00:03:26.660
OK.

54
00:03:26.730 --> 00:03:34.710
So after that we'll then attempt to update the record we just found to do so I'm going to use the object

55
00:03:34.740 --> 00:03:37.480
dot a sine function.

56
00:03:37.480 --> 00:03:39.740
So I'll say record with adders.

57
00:03:39.750 --> 00:03:40.960
So what does this do.

58
00:03:41.010 --> 00:03:45.840
This is going to take all the different properties and key value pairs inside that adders object and

59
00:03:45.840 --> 00:03:52.710
copy them one by one onto the record object so we can imagine if record is equal to some object like

60
00:03:52.710 --> 00:04:05.140
say email of test at test dot com and adders is some object like password of my password.

61
00:04:05.300 --> 00:04:11.270
We are trying to take all the properties from adders and assign them or copy them over to record.

62
00:04:12.110 --> 00:04:18.640
And so after running that line of code right there we would end up with record being equal to email

63
00:04:18.650 --> 00:04:24.660
of test at test dot com and password of my password.

64
00:04:24.690 --> 00:04:28.560
So again object I assign takes everything from that object right there.

65
00:04:28.690 --> 00:04:34.410
Copies it onto the first argument that this is a very easy way to update all the properties on they're

66
00:04:35.170 --> 00:04:37.410
going to delete those comments really quickly.

67
00:04:37.590 --> 00:04:43.000
Now after we do that update we can take all of our records inside of that records array right.

68
00:04:43.020 --> 00:04:44.610
There is the record we just updated.

69
00:04:44.660 --> 00:04:49.890
So it's going to take that big array of records and write them all back to our Jason File and we can

70
00:04:49.890 --> 00:04:50.940
do that by calling.

71
00:04:51.020 --> 00:04:51.680
That's not right.

72
00:04:51.690 --> 00:04:55.900
All once again so I'll say a wait that's not right.

73
00:04:55.920 --> 00:05:00.770
All with records OK.

74
00:05:00.840 --> 00:05:01.950
Looks good.

75
00:05:01.950 --> 00:05:02.880
It's now as usual.

76
00:05:02.880 --> 00:05:05.220
Time for a quick test to test this.

77
00:05:05.250 --> 00:05:07.790
I'm going to go to my users start Jason File.

78
00:05:07.980 --> 00:05:12.720
Looks like I don't have any users inside of here right now so I don't have to create one very quickly.

79
00:05:12.930 --> 00:05:20.890
So to create a user I'm going to make sure that I call my create method right here down inside my test

80
00:05:20.890 --> 00:05:21.780
function.

81
00:05:21.910 --> 00:05:24.470
So I'm going to do in a wait repo.

82
00:05:24.470 --> 00:05:33.120
Dot create and I'll create a record with an email of test at test dot.com so I'll save this.

83
00:05:33.170 --> 00:05:35.390
I can go back over to my terminal and run that file

84
00:05:41.030 --> 00:05:45.500
if I now go to my Jason File once again I should see the record that was just created.

85
00:05:45.500 --> 00:05:47.480
So now let's try to update this thing.

86
00:05:47.600 --> 00:05:54.270
I'm going to try to call update and add in a password property to it so back inside my test method I'm

87
00:05:54.270 --> 00:06:01.450
going to remove the repo Doc create line and instead do a await repo dot update.

88
00:06:01.560 --> 00:06:04.750
The first argument is going to be the idea of the record that we're trying to update.

89
00:06:04.770 --> 00:06:10.440
So I'll make sure that I go copy that I.D. with the record that was just generated I'll paste it in

90
00:06:10.470 --> 00:06:16.310
as the first argument and then for the second argument I'll put in the update that I want to apply.

91
00:06:16.410 --> 00:06:24.890
So I want to add in a password property with the value of my password and then save this.

92
00:06:24.980 --> 00:06:33.660
Let's go back over rerun our code and then we can go check our user start Jason File once again.

93
00:06:33.670 --> 00:06:38.170
We're going to expect to see a password property with the value of my password.

94
00:06:38.170 --> 00:06:38.600
Awesome.

95
00:06:38.620 --> 00:06:39.070
Looks good.

96
00:06:40.800 --> 00:06:46.500
As one further quick test let's try to update a record with some unknown I.D. or an idea that doesn't

97
00:06:46.500 --> 00:06:48.020
actually exist.

98
00:06:48.090 --> 00:06:54.080
So I'm going to call repo dot update but I'm going to put in a garbage I.D. like so it's now if we save

99
00:06:54.080 --> 00:06:54.920
this and rerun it.

100
00:06:54.920 --> 00:06:59.890
I would expect to see a big error saying that a record was not found and sure enough.

101
00:06:59.900 --> 00:07:00.230
Yep.

102
00:07:00.290 --> 00:07:04.230
I see a record with I.D. one two three not found.

103
00:07:04.260 --> 00:07:06.020
OK so this looks pretty good.

104
00:07:06.020 --> 00:07:09.380
It's now the very last thing we to do is take care of get one by.

105
00:07:09.490 --> 00:07:12.550
That is definitely the hardest method we have to put together.

106
00:07:12.580 --> 00:07:13.620
It's not really that bad.

107
00:07:13.660 --> 00:07:16.220
It's just relatively more challenging than the others.

108
00:07:16.270 --> 00:07:17.140
So quick pause right here.

109
00:07:17.140 --> 00:07:19.480
We'll come back in just a moment and put that thing together.
