WEBVTT
1
00:00:00.970 --> 00:00:04.390
In this video we're going to take a look at some of the other functions that are available to us inside

2
00:00:04.390 --> 00:00:06.340
of that child process module.

3
00:00:06.340 --> 00:00:10.840
So we made use of spawn but there are three others that you might want to be aware of.

4
00:00:10.880 --> 00:00:16.090
And before I say another thing I want you to know that this video is 100 percent optional.

5
00:00:16.090 --> 00:00:21.280
Some of the stuff that I can discuss in here is going to be really complicated and you really do not

6
00:00:21.280 --> 00:00:24.030
need to know just about anything inside of here.

7
00:00:24.040 --> 00:00:25.190
You really don't.

8
00:00:25.220 --> 00:00:30.640
I'm only putting this video inside the course because you might be a really really curious about the

9
00:00:30.640 --> 00:00:33.640
purpose of these four different functions.

10
00:00:33.640 --> 00:00:38.050
At the end of the day I really do not expect to be using these for different functions on a regular

11
00:00:38.050 --> 00:00:40.000
basis whatsoever.

12
00:00:40.030 --> 00:00:44.500
So if you ever are in a scenario where you have to use one of these functions I expect that you're going

13
00:00:44.500 --> 00:00:49.000
to take a look at some documentation and figure out which one is appropriate to you at that point in

14
00:00:49.000 --> 00:00:50.160
time.

15
00:00:50.290 --> 00:00:54.940
I'm only putting this video here once again just to give you a little bit complete information on what's

16
00:00:54.940 --> 00:00:56.390
going on behind the scenes.

17
00:00:56.440 --> 00:00:57.850
Finally wholly optional.

18
00:00:57.850 --> 00:00:59.340
So if you don't want to know any of this stuff.

19
00:00:59.350 --> 00:01:00.210
Pause right here.

20
00:01:00.220 --> 00:01:01.660
Move on to the next video.

21
00:01:01.660 --> 00:01:05.300
And if you get confused at any point in this video just pause and move on.

22
00:01:06.090 --> 00:01:06.360
OK.

23
00:01:06.400 --> 00:01:07.570
That's enough of a disclaimer.

24
00:01:07.600 --> 00:01:10.330
So let's get to it OK.

25
00:01:10.360 --> 00:01:12.620
So four different commands here four different functions.

26
00:01:12.670 --> 00:01:14.140
We made use of spawn.

27
00:01:14.170 --> 00:01:17.280
So why do we use spawn and not some of the other ones.

28
00:01:17.290 --> 00:01:22.080
Well to understand that we first have to understand the differences between these four different functions.

29
00:01:22.270 --> 00:01:27.430
At the end of the day they are all about running some code or some program that gets started up from

30
00:01:27.430 --> 00:01:29.910
within our application.

31
00:01:29.910 --> 00:01:30.500
OK.

32
00:01:30.730 --> 00:01:35.410
So here's the big difference is that you need to be aware of the differences between these four different

33
00:01:35.410 --> 00:01:42.070
functions largely comes down to whether or not the command that we provide to each is executed inside

34
00:01:42.100 --> 00:01:43.240
of a shell.

35
00:01:43.240 --> 00:01:49.510
And it also comes down to whether or not the output or the standard Io from the processes that are created

36
00:01:49.600 --> 00:01:56.020
are passed back to our program in a stream or not as well so you might be wondering what's a shell and

37
00:01:56.020 --> 00:01:57.090
what's the stream.

38
00:01:57.220 --> 00:01:59.230
Like I said some complicated stuff.

39
00:01:59.320 --> 00:02:02.340
So let's dig in and figure out what's going on.

40
00:02:02.380 --> 00:02:03.540
So what is a shell.

41
00:02:03.550 --> 00:02:04.560
Exactly.

42
00:02:04.570 --> 00:02:07.150
Well let me give you a very practical example.

43
00:02:07.220 --> 00:02:11.660
I'm gonna go back over to my terminal whenever I run my terminal.

44
00:02:11.810 --> 00:02:17.750
There is actually another program executed inside of my terminal automatically and somewhat invisibly

45
00:02:17.990 --> 00:02:21.580
that you don't even really realize you are interacting with.

46
00:02:21.680 --> 00:02:25.400
In other words whenever someone says or even I have inside of this course.

47
00:02:25.400 --> 00:02:28.180
Hey let's open up our terminal when we open up our terminal.

48
00:02:28.190 --> 00:02:31.880
We're really opening up to different things at the same time.

49
00:02:32.000 --> 00:02:37.190
The first thing we're opening up is well the terminal that is the program that displays some text to

50
00:02:37.190 --> 00:02:43.490
us allows us to type something in and allows us to have pretty formatted stuff allows us to have maybe

51
00:02:43.490 --> 00:02:50.160
multiple tabs and so on the other program that is being created here is something called the shell which

52
00:02:50.160 --> 00:02:57.900
is what actually takes the commands and text we type in interprets it and uses it to execute some number

53
00:02:57.900 --> 00:03:00.190
of programs on our computer.

54
00:03:00.870 --> 00:03:04.090
So the shell is really the brains of your terminal.

55
00:03:04.150 --> 00:03:10.140
It is what actually takes the text you type in and passes it and executes it in some intelligent fashion

56
00:03:11.260 --> 00:03:16.780
a really good example of this is if I tried to run a kind of complex command right here you don't have

57
00:03:16.780 --> 00:03:18.550
to understand the command I'm about to run.

58
00:03:18.580 --> 00:03:21.150
I just want to give you a quick example.

59
00:03:21.240 --> 00:03:29.010
I'm going to run a cat index dot J.S. and then I'm going to pipe the output of that over to WC dash

60
00:03:29.060 --> 00:03:29.780
l.

61
00:03:30.070 --> 00:03:34.480
If you're on a Windows machine this command is probably not going to work for you.

62
00:03:34.500 --> 00:03:40.740
So what this does is it gets all the text inside of my index not J.S. file it takes all of that and

63
00:03:40.740 --> 00:03:47.700
then pipes it or essentially throws it into another program called WC WC dash L is going to come out.

64
00:03:47.710 --> 00:03:53.910
Count out and print the number of lines inside of whatever input I feed into it.

65
00:03:53.940 --> 00:03:58.470
So in total this command right here is going to print out the number of lines of code inside of index

66
00:03:58.470 --> 00:03:59.460
dot J.S..

67
00:03:59.610 --> 00:04:01.830
So if I run that I get out thirty two.

68
00:04:01.900 --> 00:04:05.110
Now what is interesting here is not the fact I get 32.

69
00:04:05.130 --> 00:04:10.410
What is interesting is the fact that I was able to string together some number of different programs

70
00:04:10.440 --> 00:04:11.640
in this fashion.

71
00:04:11.940 --> 00:04:15.330
So Cat by itself in WC by itself.

72
00:04:15.330 --> 00:04:21.160
These are two separate individual programs and they don't inherently know how to work with each other.

73
00:04:21.240 --> 00:04:24.860
So what's really going on here is we are executing our shell program.

74
00:04:24.960 --> 00:04:26.130
We are providing it.

75
00:04:26.250 --> 00:04:32.220
This series of commands right here my shell is then going to interpret that I'm trying to run a program

76
00:04:32.220 --> 00:04:38.580
called cat and I'm trying to feed it an argument of index J.S. to my shell is going to execute that

77
00:04:38.580 --> 00:04:44.430
command and then take all the output that we get back from that single command right there it's then

78
00:04:44.430 --> 00:04:49.200
going to interpret based on this little pipe symbol right here that I want to take all that input and

79
00:04:49.250 --> 00:04:52.850
awesomely output and provide it as input to WC.

80
00:04:52.980 --> 00:05:00.380
And so it's then going to execute WC and throw all the output from cat into it so there's no like magic

81
00:05:00.380 --> 00:05:04.660
mysterious force out there that is doing all this stuff for me it is the shell.

82
00:05:04.670 --> 00:05:12.390
The shell is what is taking stuff from Cat and throwing it into WC if we didn't have access to the shell

83
00:05:12.600 --> 00:05:16.090
we would never be able to run complex commands like this.

84
00:05:16.110 --> 00:05:21.470
Instead we would be limited to just doing very simple one off commands one single command at a time

85
00:05:21.600 --> 00:05:27.750
so I would have to do that index at J.S. and then I would have to take all this stuff right here.

86
00:05:27.750 --> 00:05:32.610
Copy it and somehow throw it into the WC commands.

87
00:05:32.650 --> 00:05:37.450
It's a life without your shell would be well kind of miserable.

88
00:05:37.460 --> 00:05:42.230
So what does this all have to do with Shell with all these different options over here.

89
00:05:42.320 --> 00:05:48.080
I have shell here and I'm saying yes or no I'm saying whether or not the first arguments or the command

90
00:05:48.200 --> 00:05:55.530
we pass to each of these functions is executed inside of a shell let's clarify what that means.

91
00:05:55.620 --> 00:06:02.700
Now that we know what a shell is it means that when I call the exact function and I pass in a first

92
00:06:02.700 --> 00:06:10.320
argument to it of the command or the thing that I want to run a shell is created by No G.S. to take

93
00:06:10.320 --> 00:06:16.150
that first argument and execute that string to give you a good example of this.

94
00:06:16.170 --> 00:06:23.680
Let's take a look at the documentation once again specifically for the exact function so I'll find exact

95
00:06:23.680 --> 00:06:24.070
right here.

96
00:06:24.700 --> 00:06:31.100
I'll click on it and just like spawn you'll notice that it takes a first argument of a command so in

97
00:06:31.100 --> 00:06:33.290
this case the command.

98
00:06:33.290 --> 00:06:35.680
We'll take a look at the example down here.

99
00:06:35.780 --> 00:06:42.140
The command is going to be a long possibly a long string that has a bunch of different little sub commands

100
00:06:42.170 --> 00:06:43.260
inside of it.

101
00:06:43.310 --> 00:06:46.840
So we could do echo and print out a home variable.

102
00:06:47.000 --> 00:06:53.510
We could have the same kind of program I just ran where I do a cat and then pipe it into a word count

103
00:06:54.550 --> 00:06:59.110
whatever string we pass right here is going to be executed inside of a shell like this.

104
00:06:59.110 --> 00:07:06.430
And so we have the benefit of a shell to interpret the possibly complex command that we pass in so that's

105
00:07:06.430 --> 00:07:12.560
what's going on with shell so to really summarize and put this into a way more kind of straightforward

106
00:07:12.580 --> 00:07:14.830
term or straightforward means.

107
00:07:14.890 --> 00:07:21.460
I would say that if I ever had to execute some really complex series of commands I would use exact because

108
00:07:21.520 --> 00:07:27.220
I could use the shell syntax or I have the benefit of running my command inside of a shell so I can

109
00:07:27.250 --> 00:07:33.130
execute this really complex series of commands and just rely upon the shell to do all the fancy work

110
00:07:33.220 --> 00:07:40.510
for me because exact file spawn and fork do not run a command inside of a shell.

111
00:07:40.680 --> 00:07:46.340
They are limited to us just running one singular program at a time with some set number of arguments

112
00:07:46.760 --> 00:07:53.310
and we can never use those to refer to say an environment variable or use the pipe syntax or do anything

113
00:07:53.310 --> 00:07:57.920
that we are used to doing at our terminal OK.

114
00:07:57.950 --> 00:07:59.840
So that can explains shell.

115
00:07:59.870 --> 00:08:07.100
Now the next one we're going to discuss is stream stream is kind of I don't know it is easy to understand

116
00:08:07.130 --> 00:08:13.850
and hard to understand hard to understand because well this like yes or no for each of these options

117
00:08:13.850 --> 00:08:15.590
is kind of meaningless.

118
00:08:15.590 --> 00:08:16.840
Why do I say that.

119
00:08:16.850 --> 00:08:18.060
Well let me just give you.

120
00:08:18.080 --> 00:08:21.820
Well let's first discuss what stream is and then I'll tell you why these different options on here have

121
00:08:21.830 --> 00:08:24.920
no one yes or at the end of the day like entirely pointless.

122
00:08:24.920 --> 00:08:30.800
So the stream right here is essentially referring to how information from standard Io of that child

123
00:08:30.800 --> 00:08:34.830
process gets sent back to our primary process.

124
00:08:34.910 --> 00:08:40.500
So here's what's essentially going on we have our parent process for you and me.

125
00:08:40.520 --> 00:08:41.470
That is our watch it.

126
00:08:41.470 --> 00:08:49.160
Application at some point time we could use it ZEC or exact file which don't have this stream support

127
00:08:49.400 --> 00:08:51.470
to create a new child process.

128
00:08:51.470 --> 00:08:55.450
If we use exact or exact file this is what is going to happen.

129
00:08:55.670 --> 00:09:01.480
Our parent process is going to create a new process that is like a new program to be executed that new

130
00:09:01.480 --> 00:09:05.120
program might have some number of console logs being emitted.

131
00:09:05.170 --> 00:09:08.570
It might also have some errors that are being thrown at the end of the day.

132
00:09:08.590 --> 00:09:14.010
This new process is going to have some amount of output that is trying to send out to the world when

133
00:09:14.010 --> 00:09:20.670
we create this new process with exact or exact file all of that output that the new process emits is

134
00:09:20.670 --> 00:09:25.980
going to be collected automatically by no J.S. when that process then is completed.

135
00:09:26.070 --> 00:09:28.680
So it exits or gets killed or whatever.

136
00:09:28.680 --> 00:09:34.080
All this output is gonna be wrapped up in a nice little package and sent back to our parent process

137
00:09:34.170 --> 00:09:41.530
for processing and we can see that very easily if we take a look at the documentation so here's the

138
00:09:41.530 --> 00:09:42.450
documentation.

139
00:09:42.460 --> 00:09:44.850
Take a look at exact and exact file.

140
00:09:45.000 --> 00:09:47.870
The last argument about them is a callback function.

141
00:09:48.070 --> 00:09:54.810
So let's take a look at exactly this callback right here is going to be invoked after that child process

142
00:09:54.810 --> 00:10:01.110
terminates and the arguments to that callback function are going to be everything that that child process

143
00:10:01.320 --> 00:10:02.380
logged out.

144
00:10:02.430 --> 00:10:09.490
So everything from standard out in everything from standard error so in other words with exact an exact

145
00:10:09.490 --> 00:10:10.240
file.

146
00:10:10.240 --> 00:10:14.070
We're really trying to run like one program it's gonna do its own little thing.

147
00:10:14.140 --> 00:10:16.340
Hopefully it's going to be kind of a short running process.

148
00:10:16.450 --> 00:10:21.220
And then when it's all done it's gonna give us this nice little bundled up output that says hey here's

149
00:10:21.310 --> 00:10:25.580
all the output of that child process emitted so that's what I mean.

150
00:10:25.650 --> 00:10:30.390
Back over here when I say that there is no stream there's no kind of streaming of information from that

151
00:10:30.390 --> 00:10:31.000
child process.

152
00:10:31.140 --> 00:10:35.820
Back to our primary process so how is that different from spawn and fork.

153
00:10:36.150 --> 00:10:43.400
Well I bet you can guess so with spawn and fork we're gonna create that new process whenever that new

154
00:10:43.400 --> 00:10:49.070
process has a console log or an error or whatever else that information is going to be immediately sent

155
00:10:49.070 --> 00:10:54.650
back over to our parent process and the parent can choose optionally to handle that output or just say

156
00:10:55.010 --> 00:10:56.000
I don't care about at all.

157
00:10:56.000 --> 00:11:00.690
Just go do your own thing then at some point time that process is going to complete.

158
00:11:00.770 --> 00:11:06.000
When that happens we don't get any bundle of information because we already received it as each console

159
00:11:06.000 --> 00:11:07.070
log actually occurred.

160
00:11:07.070 --> 00:11:13.590
Originally though that is what is going on with this stream column over here.

161
00:11:13.610 --> 00:11:19.450
Now let me tell you about why this stuff like the stream stuff and the shell stuff are all kind of pointless

162
00:11:19.460 --> 00:11:23.040
and this is what is kind of frustrating about the child process library in general.

163
00:11:23.150 --> 00:11:26.700
At the end of the day all that really matters is these spawn commands.

164
00:11:26.780 --> 00:11:33.800
Exact exact file and to a lesser degree Falk are essentially just reusing the spawn function and providing

165
00:11:33.860 --> 00:11:35.770
some different options to it.

166
00:11:35.810 --> 00:11:36.880
Why do I say that.

167
00:11:36.890 --> 00:11:41.960
Well it turns out that this spawn thing right here can be used to essentially if we just pass upon some

168
00:11:41.960 --> 00:11:47.270
different options it will behave exactly as exact file does or if we pass different options it will

169
00:11:47.270 --> 00:11:53.340
behave exactly as exact does or if we pass different options it will behave exactly like Hawk does.

170
00:11:53.390 --> 00:11:55.430
So let me show you why that is.

171
00:11:55.430 --> 00:12:03.800
I can go once again back over the docs to find spawn so your spawn right here Remember I told you spawn

172
00:12:04.040 --> 00:12:06.010
doesn't run your command in a shell.

173
00:12:06.320 --> 00:12:11.090
That was kinda something that was specially reserved to exact but if you look at the documentation really

174
00:12:11.090 --> 00:12:16.820
quickly or very carefully I should say this bond function you'll see that the options object has an

175
00:12:16.850 --> 00:12:18.750
option of shell.

176
00:12:18.830 --> 00:12:26.900
So if we pass in shell of true then to our command is now going to be executed inside of a shell which

177
00:12:26.900 --> 00:12:29.890
is what exactly is supposed to be for.

178
00:12:29.900 --> 00:12:35.120
So in other words we can use spawn to essentially emulate what the other three functions do really easily

179
00:12:35.360 --> 00:12:43.330
by just passing in the correct options so we can call spawn with Shell if true and all the sudden we

180
00:12:43.330 --> 00:12:46.420
get that kind of nice shell behavior.

181
00:12:46.510 --> 00:12:48.310
The opposite is kind of true as well.

182
00:12:48.310 --> 00:12:54.580
So if Zack emits all of its output with a stream say what the exact virus without a stream.

183
00:12:54.580 --> 00:13:03.230
Same with exact file if we go and take a look at the documentation on exactly inside of here we can

184
00:13:03.230 --> 00:13:10.900
find maybe its exact file in this case so I'm thinking of Yeah exact filing and go down to exact file.

185
00:13:11.000 --> 00:13:12.980
Here it is right here.

186
00:13:12.980 --> 00:13:19.010
So exact file as well you'll see that I said OK the exact file back over here doesn't make you see the

187
00:13:19.010 --> 00:13:19.850
shell.

188
00:13:19.880 --> 00:13:20.090
Yeah.

189
00:13:20.120 --> 00:13:22.970
Turns out we can call exact file with that same option.

190
00:13:23.000 --> 00:13:28.430
So here is the exact file documentation we can pass in an option of Shell true and we get access to

191
00:13:28.430 --> 00:13:29.570
the shell as well.

192
00:13:31.430 --> 00:13:37.380
In addition if we take a look a little bit down here I might have to do a search on this page.

193
00:13:37.390 --> 00:13:38.500
I was going to do a search

194
00:13:45.390 --> 00:13:50.850
Rigo OK so this right here less going to show you I know at this point I'm kind of ranting a little

195
00:13:50.850 --> 00:13:51.930
bit so we're almost done.

196
00:13:51.930 --> 00:13:53.470
Like I said this video is optional.

197
00:13:53.580 --> 00:13:56.370
So whenever we call the four different functions.

198
00:13:56.370 --> 00:13:58.260
Exact exact file spawn or fork.

199
00:13:58.260 --> 00:14:01.060
We get back an object called a process.

200
00:14:01.560 --> 00:14:06.320
So this is a object that essentially represents the process that we are executing.

201
00:14:06.330 --> 00:14:10.530
So this is some documentation right here about the different properties that this little process object

202
00:14:10.530 --> 00:14:11.460
has.

203
00:14:11.460 --> 00:14:16.540
And if I go back up to the top of this section that might be the most clear thing I could do here we

204
00:14:16.540 --> 00:14:16.720
go.

205
00:14:16.750 --> 00:14:20.740
So child process this is a thing that we get back whenever we create a process.

206
00:14:20.800 --> 00:14:28.710
So either what spawn exact exact file or for so this child process exposes the standard out and the

207
00:14:28.710 --> 00:14:31.500
standard in and the standard error streams.

208
00:14:31.500 --> 00:14:37.190
So in other words this idea right here that exact and exact file we can't make use of the String output.

209
00:14:37.350 --> 00:14:39.660
Totally not true not true at all.

210
00:14:39.930 --> 00:14:47.280
When we call exact or exact file we get back a child process object and we can use that object to intercept

211
00:14:47.550 --> 00:14:52.260
all the information that is being logged out by the process created by exact or exact file.

212
00:14:52.530 --> 00:14:57.720
So in other words we can handle the objects or the processes that come out of these two functions as

213
00:14:57.720 --> 00:15:00.860
though they were returning or creating a stream as well.

214
00:15:01.770 --> 00:15:05.880
So at the end of the day I like I said I'm kind of ranting a little bit here at the end of the day the

215
00:15:05.880 --> 00:15:11.160
entire point is all these functions are really frustrating and at the end of the day all you really

216
00:15:11.160 --> 00:15:13.150
need to know is these spawn function.

217
00:15:13.160 --> 00:15:19.180
That's the only thing that really matters because the spawn function we can pass a different set of

218
00:15:19.180 --> 00:15:24.220
options to every time and get it to behave as though it were these other functions.

219
00:15:24.220 --> 00:15:28.810
So you don't really need to know about the other ones you really just have to know about spawn unless

220
00:15:28.810 --> 00:15:31.980
you have some very particular use case.

221
00:15:32.100 --> 00:15:37.050
The one exception to this they're going to mentioned right here at the very end is the work function.

222
00:15:37.050 --> 00:15:44.440
The fourth function is used specifically to create a process out of a javascript file.

223
00:15:44.570 --> 00:15:47.970
So when we call it process dot fork we're going to pass in it not a command.

224
00:15:47.970 --> 00:15:53.470
Instead we're going to pass in a path to a javascript file to run using Node.

225
00:15:53.660 --> 00:15:59.090
The recent forecast different is that it really is just for running a no J.S. process.

226
00:15:59.190 --> 00:16:05.610
The only big difference here is that when we create a new process using fork our main process the parent

227
00:16:05.670 --> 00:16:11.450
can communicate with a child using something called IPC or inter process communication.

228
00:16:11.450 --> 00:16:16.380
It is pretty darn rare that you're ever going to want to call fork outside of one pretty darn particular

229
00:16:16.380 --> 00:16:17.130
scenario.

230
00:16:17.130 --> 00:16:22.380
And that is specifically around a web server and that's something that's all that to advance for this

231
00:16:22.380 --> 00:16:22.680
course.

232
00:16:22.680 --> 00:16:25.570
So we're not going to be talking about it too much okay.

233
00:16:25.640 --> 00:16:29.720
So at this point I think I've gone way off the rails on these four different functions.

234
00:16:29.720 --> 00:16:34.280
I apologize for the little bit of the rant there towards the end but like I said at the end of the day

235
00:16:34.490 --> 00:16:37.340
all you really need to know is the bond function understand it.

236
00:16:37.370 --> 00:16:42.140
Take a look at the options and understand that you can use one to essentially do the same thing that

237
00:16:42.140 --> 00:16:45.450
the three other do as well.

238
00:16:45.600 --> 00:16:46.560
So quick pause right here.

239
00:16:46.750 --> 00:16:49.980
Well let's continue on the next video and start to finish up our application.
