WEBVTT
1
00:00:00.240 --> 00:00:03.570
Next up we have a really important topic in the world of objects.

2
00:00:03.630 --> 00:00:06.970
The idea that we can add functions to our objects.

3
00:00:07.080 --> 00:00:11.580
So we've seen that we can pass functions around we can store them in variables we can store them in

4
00:00:11.580 --> 00:00:15.300
arrays we can pass them as arguments we can return them from a function.

5
00:00:15.420 --> 00:00:17.810
We can also store them in objects.

6
00:00:17.850 --> 00:00:22.610
Now why we would do this is a bigger topic that we will get to in pieces.

7
00:00:22.710 --> 00:00:28.350
The first simplest reason we would do this is just to group functions together to group functionality

8
00:00:28.350 --> 00:00:30.840
into some sort of cohesive unit.

9
00:00:30.840 --> 00:00:36.360
So here's an example we have a math object that contains different functions that have to do with one

10
00:00:36.360 --> 00:00:37.100
another.

11
00:00:37.170 --> 00:00:43.500
So they're just grouped together and it's just that a nice organizational structure.

12
00:00:43.500 --> 00:00:47.460
So we call these methods when we add a function into an object.

13
00:00:47.580 --> 00:00:53.840
And we've been using the word method quite a bit when we do things like Hello Dot to uppercase.

14
00:00:53.850 --> 00:00:55.340
This is a method.

15
00:00:55.580 --> 00:01:00.360
And I mentioned this a couple of times earlier when we define a function on our own and we store it

16
00:01:00.360 --> 00:01:12.840
in a variable or just a function declaration concept add equals function X comma Y return x plus y.

17
00:01:12.840 --> 00:01:21.090
This right here is a function right there but when we added into an object and it lives on something

18
00:01:21.330 --> 00:01:24.940
and we call it with the dot notation it is now a method.

19
00:01:25.440 --> 00:01:29.880
So these are built in methods but now we'll see how to add our own methods to objects.

20
00:01:29.880 --> 00:01:32.280
It's very straightforward where they saw it on the slides.

21
00:01:32.280 --> 00:01:38.410
One question you might have is I thought strings were not objects I thought they were primitives.

22
00:01:38.550 --> 00:01:41.790
They aren't strings just a value how do they have methods.

23
00:01:41.790 --> 00:01:44.930
That is something we'll get to in due time so we're gonna put that aside for now.

24
00:01:45.630 --> 00:01:52.100
But let's go ahead and define our object we'll call it math and I'll show you a couple of different

25
00:01:52.100 --> 00:01:54.000
ways of adding functions in.

26
00:01:54.170 --> 00:02:00.380
So right now I have a function called add I've used a function expression saved it to the variable add

27
00:02:00.980 --> 00:02:08.300
I could just do this we saw that shorthand a couple videos ago I now have a object called math.

28
00:02:08.390 --> 00:02:16.090
If I run my code over here we look at math the key is ADD and the value is the function stored in add.

29
00:02:16.490 --> 00:02:22.760
So we have ADD is the key and then you can see a function right here if I want to call it I need to

30
00:02:22.760 --> 00:02:29.000
use the dot notation math dot add and then pass in two numbers.

31
00:02:29.000 --> 00:02:36.390
Now because of the way I wrote this I also could just call add and pass in values 2 and 5.

32
00:02:36.590 --> 00:02:42.860
I'm calling this function from here versus if I do math dot add we're referencing the same function

33
00:02:42.980 --> 00:02:48.680
it's the same variable or the same function in memory but I'm accessing it in a different way.

34
00:02:48.860 --> 00:02:53.540
So it's pretty uncommon to define your function first and then add it into an object.

35
00:02:53.540 --> 00:03:01.670
Normally you would do something like this add colon function and then add our arguments and put our

36
00:03:01.670 --> 00:03:03.490
function expression right here.

37
00:03:03.740 --> 00:03:15.060
So we'll just return x plus y and if we want another property if we want to do multiply we can add another

38
00:03:15.060 --> 00:03:23.770
function at our arguments x or parameters X and Y and then we can return x times Y.

39
00:03:23.780 --> 00:03:26.930
So now I have two properties both of which are functions.

40
00:03:26.930 --> 00:03:29.040
I can still add in non functions.

41
00:03:29.060 --> 00:03:34.370
I can add whatever I want to the object I could do numbers and that could be an array.

42
00:03:34.370 --> 00:03:39.560
One two three four five if I run this code we look at math.

43
00:03:39.780 --> 00:03:42.000
We now have two functions in here.

44
00:03:42.000 --> 00:03:47.390
Add multiply and numbers which is an array and I use the exact same syntax.

45
00:03:47.410 --> 00:03:55.500
Math numbers is how I access that array math that add is how I access that function but I'm not executing

46
00:03:55.500 --> 00:03:59.040
it until I add the parents 5 and 6.

47
00:03:59.040 --> 00:04:03.710
Same thing with Multiply multiply with no parental.

48
00:04:03.740 --> 00:04:08.050
Gives me a reference to the function I'm getting the function if that makes sense.

49
00:04:08.100 --> 00:04:10.590
I'm asking javascript does this thing exist.

50
00:04:10.620 --> 00:04:11.760
Tell me about it.

51
00:04:11.790 --> 00:04:13.550
Now I'm saying I know it exists.

52
00:04:13.620 --> 00:04:18.710
Let's run it and we get forty two when I multiply six and seven.

53
00:04:18.750 --> 00:04:24.540
So again right now this is just a nice way of grouping functions together putting them in an object

54
00:04:24.870 --> 00:04:30.050
so that they're just in some sort of container rather than having a bunch of functions floating around.

55
00:04:30.060 --> 00:04:36.630
I now have this math object which is the same idea as the existing math that we have in JavaScript.

56
00:04:36.630 --> 00:04:40.500
We've seen a couple of these methods math dot random.

57
00:04:40.500 --> 00:04:45.280
It's grouped instead of math instead of just having a floating random function we call.

58
00:04:45.750 --> 00:04:52.050
We have a math object that contains a bunch of different functions or technically methods.

59
00:04:52.050 --> 00:04:57.420
So the terminology one more time we have functions which we've seen on our own but when we add a function

60
00:04:57.480 --> 00:05:01.550
as a property in an object we call it a method.

61
00:05:01.590 --> 00:05:07.440
So these are two methods we'll soon see some additional things we can do instead of methods.

62
00:05:07.440 --> 00:05:09.730
Some new constructs or new features.

63
00:05:09.930 --> 00:05:15.960
The keyword this will come up very soon in this section which will make these methods more useful or

64
00:05:15.960 --> 00:05:17.000
more flexible.

65
00:05:17.010 --> 00:05:19.070
Right now it's just purely a container.

66
00:05:19.080 --> 00:05:24.290
This object just stores functions and groups them together so that we can carry them around like a purse

67
00:05:24.290 --> 00:05:25.930
or all of our belongings.

68
00:05:25.950 --> 00:05:30.990
Next I'm going to show you a new syntax that makes it a little shorter to define methods and then we'll

69
00:05:30.990 --> 00:05:32.940
go on and talk about the keyword.

70
00:05:32.970 --> 00:05:33.390
This.
