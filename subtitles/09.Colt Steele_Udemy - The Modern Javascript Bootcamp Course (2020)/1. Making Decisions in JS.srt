1
00:00:00,330 --> 00:00:01,530
Welcome back everyone.

2
00:00:01,530 --> 00:00:05,520
The next big topic in javascript that we'll tackle is logic.

3
00:00:05,640 --> 00:00:10,920
How do we implement decisions how do we make choices in our code so that we have different outcomes.

4
00:00:10,920 --> 00:00:15,530
This is obviously a very very important part of writing applications writing games.

5
00:00:15,570 --> 00:00:21,180
Pretty much anything remotely interesting that you would build with JavaScript needs to have some decision

6
00:00:21,180 --> 00:00:22,420
making going on.

7
00:00:22,590 --> 00:00:25,800
It shouldn't just be the exact same thing every single time.

8
00:00:25,800 --> 00:00:27,650
I'm sure someone could prove me wrong on that.

9
00:00:27,660 --> 00:00:33,990
But most applications that you interact with that I use day to day they all have some form of decision

10
00:00:33,990 --> 00:00:35,130
making going on.

11
00:00:35,130 --> 00:00:37,650
Often hundreds of decisions.

12
00:00:37,650 --> 00:00:43,080
So just to give an example of kind of what I'm talking about here is an interactive chess game built

13
00:00:43,080 --> 00:00:44,490
with JavaScript.

14
00:00:44,520 --> 00:00:48,960
There are tons and tons of decisions here's a really simple one some simple logic.

15
00:00:48,960 --> 00:00:55,350
When I click on a piece I'm white down here I can move it assuming that I'm trying to move to a valid

16
00:00:55,350 --> 00:00:56,170
space.

17
00:00:56,310 --> 00:00:57,270
So that works.

18
00:00:57,420 --> 00:01:03,890
But if I try and move to an invalid space there is some logic that checks.

19
00:01:03,900 --> 00:01:08,210
Am I hovering or am i dropping this piece over a place where it can move.

20
00:01:08,280 --> 00:01:09,300
Yes or no.

21
00:01:09,370 --> 00:01:10,560
There's a different outcome.

22
00:01:10,560 --> 00:01:14,160
Same thing with clicking on one of my opponent's pieces.

23
00:01:14,460 --> 00:01:17,870
I can pick it up but if I try and drop it anywhere.

24
00:01:17,890 --> 00:01:22,490
Doesn't matter if it's valid or invalid as far as the piece is concerned and how it moves.

25
00:01:22,680 --> 00:01:23,880
It's not my piece.

26
00:01:23,880 --> 00:01:30,280
So there's logic that says if that's not if it's not movable if it's not your piece you can't move it.

27
00:01:30,330 --> 00:01:35,620
Don't do anything just return it to where it was then we've got things like Netflix.

28
00:01:35,770 --> 00:01:39,940
When I go to Netflix if I'm not signed in then I see a different page.

29
00:01:40,000 --> 00:01:42,760
There's some logic there's a decision that's made.

30
00:01:42,760 --> 00:01:44,110
Is the user signed in.

31
00:01:44,110 --> 00:01:44,950
If they are.

32
00:01:44,980 --> 00:01:47,170
Show them their main Netflix home page.

33
00:01:47,260 --> 00:01:47,920
If they're not.

34
00:01:47,920 --> 00:01:48,730
Show them the.

35
00:01:48,880 --> 00:01:49,810
Whatever this is.

36
00:01:49,960 --> 00:01:52,450
Advertising promo landing page.

37
00:01:52,450 --> 00:01:57,680
If I do try and sign up I'll click submit without specifying an email or password.

38
00:01:57,710 --> 00:01:59,160
There's logic that checks.

39
00:01:59,290 --> 00:02:00,070
Is there an email.

40
00:02:00,070 --> 00:02:01,510
Is there a password.

41
00:02:01,510 --> 00:02:03,430
If not don't submit the form.

42
00:02:03,550 --> 00:02:05,130
So that was a choice.

43
00:02:05,230 --> 00:02:06,250
The form was not submitted.

44
00:02:06,250 --> 00:02:11,750
There is a branching path and we get to red boxes with different error messages.

45
00:02:11,770 --> 00:02:16,040
Now as I fill out an email like Kat had gmail dot com.

46
00:02:16,150 --> 00:02:19,530
Notice that as soon as this becomes a valid email pattern.

47
00:02:19,660 --> 00:02:22,350
So dot com it turns green.

48
00:02:22,480 --> 00:02:23,650
There's more logic there.

49
00:02:23,680 --> 00:02:24,580
It's checking.

50
00:02:24,580 --> 00:02:25,720
Is that valid.

51
00:02:25,720 --> 00:02:31,870
As far as the actual pattern or shape of my text Kat at gmail dot com anyway you can see where I'm going

52
00:02:31,870 --> 00:02:32,380
with this.

53
00:02:32,380 --> 00:02:38,200
There are decisions there are branching outcomes and paths in any application out there whether it has

54
00:02:38,200 --> 00:02:41,680
to do with being logged in a game and different logic.

55
00:02:41,680 --> 00:02:47,110
There's just so many different things you can do but they all hinge on the same basic logic building

56
00:02:47,110 --> 00:02:47,800
blocks.

57
00:02:47,800 --> 00:02:49,840
So that's all we're going to talk about in this section.

58
00:02:49,840 --> 00:02:52,000
There's a good amount to cover.

59
00:02:52,060 --> 00:02:53,320
Here are some of the goals.

60
00:02:53,410 --> 00:02:56,310
We're gonna start by talking about comparison operators.

61
00:02:56,350 --> 00:03:00,520
Later we'll talk about a second set of operators called boolean operators.

62
00:03:00,550 --> 00:03:05,860
So our good friend the true or false primitive value the boolean is coming back.

63
00:03:05,860 --> 00:03:09,790
We'll spend a lot of time getting to know it and then we'll write conditional statements.

64
00:03:09,790 --> 00:03:12,310
So those are the actual decisions we make.

65
00:03:12,340 --> 00:03:14,100
The branches we can add to our code.

66
00:03:14,230 --> 00:03:15,280
So that's where we're going.

67
00:03:15,280 --> 00:03:19,300
I will shut up and see you in the next video when we actually start with comparisons.
