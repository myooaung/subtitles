WEBVTT
1
00:00:00.930 --> 00:00:05.400
The last video we were able to receive an image finally inside of our form that got uploaded to our

2
00:00:05.400 --> 00:00:07.790
server so we're now playing around with that image.

3
00:00:07.810 --> 00:00:11.820
And the next thing we need to start to think about is where we're going to store the image and eventually

4
00:00:11.820 --> 00:00:16.380
make it available to other users inside of application so we can actually associate an image with the

5
00:00:16.380 --> 00:00:18.300
product and so on.

6
00:00:18.300 --> 00:00:24.390
So in this video we're going to discuss a couple of different ways of handling image storage right now

7
00:00:24.390 --> 00:00:24.980
at the very start.

8
00:00:24.980 --> 00:00:28.520
Let me tell you right away that we're going to talk about these different methods.

9
00:00:28.590 --> 00:00:33.760
We're going to end up using a method for storing our images that is kind of a shortcut.

10
00:00:33.830 --> 00:00:38.610
It is essentially not like the right way really to handle image upload.

11
00:00:38.610 --> 00:00:42.810
I know that might sound really disappointing to hear the reason for it is that doing image upload the

12
00:00:42.810 --> 00:00:45.210
right way is really really challenging.

13
00:00:45.210 --> 00:00:47.600
In general it requires a lot of extra code.

14
00:00:47.670 --> 00:00:53.580
It requires some extra setup and it also usually involves paying some amount of money for image hosting

15
00:00:53.580 --> 00:01:01.480
as well or outside data storage more or less this of course as we said many times is all about JavaScript

16
00:01:01.510 --> 00:01:03.350
that's we're studying here inside this course.

17
00:01:03.460 --> 00:01:06.670
And that's why we're going to use this kind of shortcut for storing our images.

18
00:01:06.880 --> 00:01:13.030
Nonetheless it pains me honestly it pains me to show you what is not the right way of image storage.

19
00:01:13.030 --> 00:01:17.550
I don't want to do this but in the context of the course it is the right thing to do.

20
00:01:17.560 --> 00:01:21.050
Nonetheless I really want you to understand the different options out there.

21
00:01:21.070 --> 00:01:24.700
So in this video we're gonna have an optional video optional lecture right here.

22
00:01:24.700 --> 00:01:28.250
We're going to outline some different ways of handling image upload.

23
00:01:28.300 --> 00:01:30.280
This is entirely an optional video.

24
00:01:30.280 --> 00:01:31.410
So if you don't want to watching this.

25
00:01:31.420 --> 00:01:31.960
No problem.

26
00:01:31.960 --> 00:01:32.580
Positive video.

27
00:01:32.590 --> 00:01:33.970
Move on to the next one.

28
00:01:34.000 --> 00:01:36.980
Everything around this image upload stuff is all going to be inside this video.

29
00:01:37.000 --> 00:01:41.160
We're not going to write any code so you can 100 percent skip this video OK.

30
00:01:41.220 --> 00:01:42.150
So it would then mind.

31
00:01:42.240 --> 00:01:42.870
Let's get to it.

32
00:01:42.870 --> 00:01:46.380
We're going to take a look at four different ways of handling image upload.

33
00:01:46.410 --> 00:01:51.040
We're going to go through them in order of worst to best.

34
00:01:51.160 --> 00:01:56.770
So first off I want to do a quick side topic here just to help you understand how servers or web applications

35
00:01:56.770 --> 00:02:01.220
in general frequently get architected once they start to gain a lot of users.

36
00:02:01.240 --> 00:02:05.710
This right here is a diagram of our current setup very simple very straightforward in nature.

37
00:02:05.710 --> 00:02:11.050
We have an express server our browser makes requests that server and we get back some response and we

38
00:02:11.050 --> 00:02:14.180
see some content appear on the screen simply enough.

39
00:02:14.220 --> 00:02:20.220
The downside to this approach however is that it's not going to scale to handle many many many users

40
00:02:20.250 --> 00:02:22.020
at some point in the future.

41
00:02:22.020 --> 00:02:27.690
So we can imagine that if we eventually have like 500000 different users who are trying to get access

42
00:02:27.690 --> 00:02:32.400
to our e-commerce application the number of requests that those five hundred thousand users are going

43
00:02:32.400 --> 00:02:37.590
to be generating and sending to our server is going to very quickly overwhelm our server and our one

44
00:02:37.590 --> 00:02:42.030
instance of our server like the one program that we're currently running inside of our terminal is not

45
00:02:42.030 --> 00:02:48.320
going to be able to handle that level of traffic so a very common way to handle scaling up an application

46
00:02:48.320 --> 00:02:54.590
like ours is to do something like this right here so in this scenario rather than having our browser

47
00:02:54.590 --> 00:02:58.910
communicate directly with the server the browser is going to instead communicate directly with something

48
00:02:58.910 --> 00:03:00.890
called a load balancer.

49
00:03:00.920 --> 00:03:05.960
This is a server inside of itself but it is not running any actual business logic.

50
00:03:06.020 --> 00:03:09.200
It's not generating any h t mail or anything like that.

51
00:03:09.230 --> 00:03:16.800
Instead the only job the load balancer is to receive incoming requests from say a browser and then randomly

52
00:03:16.830 --> 00:03:21.540
take that request and forward it on to one of a number of different servers.

53
00:03:21.840 --> 00:03:25.250
Each of these servers over here will be running the exact same application.

54
00:03:25.280 --> 00:03:28.060
So same code base they'll do the exact same thing.

55
00:03:28.170 --> 00:03:30.490
We're just running different copies.

56
00:03:30.540 --> 00:03:34.770
The benefit to this approach is that we can handle far greater numbers of users.

57
00:03:34.950 --> 00:03:38.640
So if we have five hundred thousand users coming out our application they're all going to hit the load

58
00:03:38.640 --> 00:03:44.190
balancer the load balancers then going to randomly assigned that request to one these servers that server

59
00:03:44.190 --> 00:03:49.770
is going to respond through the load balancer and some send some response back to the browser.

60
00:03:49.770 --> 00:03:51.950
So again this is a very common pattern.

61
00:03:52.060 --> 00:03:55.460
We see all the time inside of Web applications.

62
00:03:55.500 --> 00:03:57.180
It's not something you need to worry about right now.

63
00:03:57.180 --> 00:04:02.020
The only reason I'm introducing this is to help you understand why somebody approaches for dealing with

64
00:04:02.040 --> 00:04:04.480
image upload are not really good at all.

65
00:04:04.530 --> 00:04:07.880
That's the only reason I'm showing you this right now OK.

66
00:04:07.910 --> 00:04:12.530
So with that we have this preamble out of the way we're gonna start to talk about four different methods

67
00:04:12.560 --> 00:04:17.640
of image upload and these are really all talking about where we store our image.

68
00:04:17.850 --> 00:04:24.290
So we're going to go in order of worst to in theory best the reason we're gonna start with this really

69
00:04:24.290 --> 00:04:28.820
bad option right here and the reason I'm going to tell you about this bad option at all is that if you

70
00:04:28.820 --> 00:04:34.040
start to look up image upload online you're going to find a lot of blogs and a lot of guides and whatnot

71
00:04:34.340 --> 00:04:40.280
that tell you to use this method right here even other courses to be honest anytime someone tells you

72
00:04:40.280 --> 00:04:42.860
to use this verse approach that we're going to discuss.

73
00:04:42.860 --> 00:04:45.860
If they tell you to do that turn right back to them and say you're crazy.

74
00:04:45.860 --> 00:04:49.220
This is never going to work and I'm going to tell you why that is.

75
00:04:49.330 --> 00:04:49.940
So let's get to it.

76
00:04:49.940 --> 00:04:55.010
We're gonna talk about the first bad way of handling image upload and of course we can discuss why it

77
00:04:55.010 --> 00:04:57.840
is bad as well OK.

78
00:04:57.870 --> 00:04:59.400
So this is our bad approach.

79
00:04:59.400 --> 00:05:00.600
So we've got our browser.

80
00:05:00.600 --> 00:05:03.330
We've got this kind of multi server approach.

81
00:05:03.330 --> 00:05:08.370
So in this first approach the way in which we store the image that gets sent from the browser we're

82
00:05:08.370 --> 00:05:12.870
going to have the browser make a request to the load balancer the load balancer is then going to pick

83
00:05:12.870 --> 00:05:15.890
one of these servers at random to handle that request.

84
00:05:15.900 --> 00:05:18.510
So maybe in this case we'll be the top server up here.

85
00:05:18.620 --> 00:05:23.940
Some I'm going to delete the connection lines to the other two we're just gonna consider this request

86
00:05:23.940 --> 00:05:29.250
being forwarded on to that server so the image is going to be forwarded on it eventually goes to the

87
00:05:29.250 --> 00:05:33.150
server up here and the server receives that image.

88
00:05:33.150 --> 00:05:38.010
So one very simple and very straightforward way to handle image upload and eventually make this image

89
00:05:38.040 --> 00:05:43.020
available to other people are trying to view the products we have created is to take that image and

90
00:05:43.020 --> 00:05:44.520
just store it on a hard drive.

91
00:05:44.920 --> 00:05:52.030
So like the hard drive attached to the server over here to put that image right there until someone

92
00:05:52.030 --> 00:05:56.770
comes along and says hey I want to get at that image at which point time we read it off the hard drive

93
00:05:56.830 --> 00:05:59.580
and send it back to whoever asks for the image.

94
00:05:59.620 --> 00:06:01.450
So why is this about approach.

95
00:06:01.450 --> 00:06:04.870
Well it's really simple and really straightforward.

96
00:06:04.870 --> 00:06:11.790
If we had an architecture that looks like this right here this approach would work out just fine.

97
00:06:11.790 --> 00:06:13.260
No issue whatsoever.

98
00:06:13.260 --> 00:06:15.380
So we upload the image it's on our hard drive.

99
00:06:15.390 --> 00:06:19.290
If anyone ever wants it they just go directly to our server and ask for it.

100
00:06:19.290 --> 00:06:25.140
But as soon as we start to scale our application and introduce this idea of a load balancer and multiple

101
00:06:25.140 --> 00:06:29.370
other servers this entire approach entirely falls flat.

102
00:06:29.370 --> 00:06:32.170
No reason is extremely straightforward.

103
00:06:32.250 --> 00:06:38.100
As I mentioned just a moment ago this load balancer is going to receive requests and randomly as a keyword

104
00:06:38.100 --> 00:06:42.120
here randomly assigned the request to one of these different servers.

105
00:06:42.120 --> 00:06:48.400
So let's imagine that the browser uploads the image right there and then later on like two minutes later

106
00:06:48.610 --> 00:06:52.410
the browser turns back around and says hey by the way can I get that image.

107
00:06:52.450 --> 00:06:57.790
So the browser would make a request the load balancer and maybe this time the load balancer would route

108
00:06:57.790 --> 00:06:59.980
the request to this server.

109
00:06:59.980 --> 00:07:02.590
So then this server would look on its hard drive for the image.

110
00:07:02.590 --> 00:07:05.200
And lo and behold it's not there.

111
00:07:05.200 --> 00:07:10.000
The image has been stored on a totally different harddrive a totally different storage medium up here.

112
00:07:10.000 --> 00:07:17.450
So this server would have no access whatsoever to the image stored over on that harddrive so the key

113
00:07:17.450 --> 00:07:22.160
idea here is that we are taking image storing it on a hard drive and in this scenario we imagine the

114
00:07:22.160 --> 00:07:26.870
hard drive is paired on a one to one basis with an instance of a server.

115
00:07:26.900 --> 00:07:30.710
This is the easiest and most straightforward way to handle image upload.

116
00:07:30.740 --> 00:07:34.040
Without a doubt but it has a extremely obvious downside.

117
00:07:34.040 --> 00:07:39.320
As soon as you start to introduce multiple different servers this entire idea falls apart entirely.

118
00:07:39.320 --> 00:07:43.790
So you might see like I said some guides out there some blog posts that recommend that you take an image

119
00:07:43.790 --> 00:07:48.830
and just save it to an harddrive and then just hey serve it off the harddrive but obviously it doesn't

120
00:07:48.830 --> 00:07:54.530
work in the long term if you ever expect to scale or grow your application if you expect your application

121
00:07:54.530 --> 00:07:58.090
to always be one single server then sure this approach works fine.

122
00:07:58.130 --> 00:08:03.200
But I think that a lot of people out there myself included always kind of look a little bit at least

123
00:08:03.200 --> 00:08:07.670
a little to the future and think about hey what happens like next week when I start to get a lot of

124
00:08:07.670 --> 00:08:11.800
users and I need to scale things up OK.

125
00:08:11.810 --> 00:08:16.870
So that's method number one where we have some co-located hard disk that we used to store the image

126
00:08:16.930 --> 00:08:17.980
and serve it from.

127
00:08:17.980 --> 00:08:21.340
So that is not a great solution It technically works.

128
00:08:21.340 --> 00:08:27.480
But like I said it is not a long term solution Gates or the next slow and take a look at is storing

129
00:08:27.490 --> 00:08:29.560
the image directly in the database.

130
00:08:29.560 --> 00:08:32.430
This is another kind of obvious thing that you might decide to do.

131
00:08:32.470 --> 00:08:36.340
And if you go and look at other blog posts online around image upload they're going to tell you to do

132
00:08:36.340 --> 00:08:36.730
this.

133
00:08:36.820 --> 00:08:43.390
So you might have some dedicated database a database like my sequel host grass Mongo DV and so on.

134
00:08:43.390 --> 00:08:45.800
If you don't know those terms that's totally fine.

135
00:08:45.920 --> 00:08:49.990
And we might decide to take the image and just store it directly inside the database.

136
00:08:50.220 --> 00:08:54.850
So essentially something like this we're gonna take the image throw it through to one of the servers

137
00:08:54.850 --> 00:08:58.290
randomly and then the server is going to say oh great an image.

138
00:08:58.330 --> 00:09:03.620
Is going to store this inside my database along with the rest of my definition of a product.

139
00:09:03.670 --> 00:09:07.960
Remember at the other day we are storing products here so we might create a product inside the database

140
00:09:07.990 --> 00:09:09.520
and attach this image to it.

141
00:09:10.610 --> 00:09:15.590
The benefit to this approach is that usually in just about every web application that doesn't have a

142
00:09:15.650 --> 00:09:20.570
more exotic architecture all these different servers are always going to be connecting to the same database

143
00:09:20.630 --> 00:09:22.950
so they all share the same data.

144
00:09:23.180 --> 00:09:27.770
The benefit to this approach is we're going to put our image in one location where all these different

145
00:09:27.770 --> 00:09:30.450
servers can easily access it.

146
00:09:30.610 --> 00:09:34.130
But in this case I would say that this is not a great approach.

147
00:09:34.190 --> 00:09:39.490
It technically works and it technically will handle like this multi server approach right here.

148
00:09:39.650 --> 00:09:43.680
But there is a very big downside and the downside.

149
00:09:43.680 --> 00:09:47.700
One of the biggest aspects of it is the cost of doing this.

150
00:09:47.700 --> 00:09:52.860
Traditionally having a database and storing information inside of a database is relatively expensive

151
00:09:53.160 --> 00:09:58.880
compared to just raw hard drive space rock hard drive space is generally really really cheap.

152
00:09:59.160 --> 00:10:02.380
But getting database space is much more expensive.

153
00:10:02.460 --> 00:10:05.290
Let's do a quick calculation just to prove this.

154
00:10:05.360 --> 00:10:11.510
So I've got some pricing right here from NWS for getting some database storage space.

155
00:10:11.650 --> 00:10:19.190
So this is saying right here that getting one gigabyte of space for a database costs what ten or eleven

156
00:10:19.190 --> 00:10:25.250
point five cents per month per gigabyte it's in other words for every month that you get a database

157
00:10:25.280 --> 00:10:32.020
through NWS for every gigabyte of information that you store you're going to pay eleven and a half cents.

158
00:10:32.180 --> 00:10:37.010
Let's do some quick math here and think about what a application might end up costing if we decide to

159
00:10:37.010 --> 00:10:43.700
store Oliver images inside of a database that we pay this rate for just to get some quick interesting

160
00:10:43.700 --> 00:10:44.600
numbers here.

161
00:10:44.720 --> 00:10:49.730
We're going to assume that every single image that gets uploaded to our application is 200 kill bytes

162
00:10:50.060 --> 00:10:56.210
which is point 0 0 2 gigabytes and then we're going to assume that maybe we have the same level of traffic

163
00:10:56.450 --> 00:11:02.060
as a very popular image sharing Web site called imgur which gets one point five million images uploaded

164
00:11:02.060 --> 00:11:03.080
per day.

165
00:11:03.080 --> 00:11:07.190
Now obviously this is for an image sharing Web site not an e-commerce one like we're building right

166
00:11:07.190 --> 00:11:07.760
now.

167
00:11:07.760 --> 00:11:11.150
Nonetheless I figured hey let's just do some numbers here.

168
00:11:11.150 --> 00:11:16.100
The other thing to mention is that this is a very old number many years old at this point.

169
00:11:16.160 --> 00:11:21.770
So it was one point five million images by this image sharing Web site back in 2015 but all these numbers

170
00:11:21.870 --> 00:11:23.320
let us do some quick math.

171
00:11:23.630 --> 00:11:30.060
So we're gonna say OK we've got point 0 0 0 2 gigabytes per image.

172
00:11:30.410 --> 00:11:39.710
Times one point five million images per month or is that per day update.

173
00:11:39.830 --> 00:11:40.070
OK.

174
00:11:40.100 --> 00:11:40.490
My bad.

175
00:11:40.490 --> 00:11:46.610
Per day then that's going to be at eleven and a half cents and I will multiply it by 30 thirty to get

176
00:11:46.610 --> 00:11:47.660
a month.

177
00:11:47.660 --> 00:11:50.690
So that's 1000 dollars each additional month.

178
00:11:50.720 --> 00:11:55.070
So every month you're going to pay a thousand dollars more than the previous month for it.

179
00:11:55.060 --> 00:12:00.470
The images that you're uploading because remember this image storage is like kill it if month one you're

180
00:12:00.470 --> 00:12:02.890
going to get one point five million the next month.

181
00:12:02.900 --> 00:12:09.740
You are now storing 3 million and so on so for just one month's worth of images to store one month for

182
00:12:09.740 --> 00:12:10.470
a full year.

183
00:12:10.610 --> 00:12:16.900
We're talking about around 12000 U.S. dollars to store images inside of a database.

184
00:12:17.000 --> 00:12:21.740
Now how does this compare to another option if we did not store images inside of a database.

185
00:12:21.740 --> 00:12:27.110
Well we can take a look at another feature inside of eight of us for storing data which is called Amazon

186
00:12:27.200 --> 00:12:31.290
S3 when we use Amazon S3.

187
00:12:31.320 --> 00:12:37.950
Our pricing is a much much lower two and a two point three cents per gigabyte.

188
00:12:37.950 --> 00:12:43.140
So we can do that same kind of calculation but instead of 11 1/2 cents I'm going to go down to zero

189
00:12:43.140 --> 00:12:48.180
to three and now for the same thing we're spending like a quarter as much money less than a quarter

190
00:12:48.180 --> 00:12:49.110
really.

191
00:12:49.230 --> 00:12:54.180
You can tell that immediately just like some off the cuff calculation here storing images inside of

192
00:12:54.180 --> 00:13:00.050
a database can be extremely expensive even though it technically does work.

193
00:13:00.090 --> 00:13:06.570
That's option number two option number three is to use an outside data store like Amazon S3 and we're

194
00:13:06.570 --> 00:13:10.440
going to stream incoming images from our server to that outside data store.

195
00:13:10.470 --> 00:13:13.070
So in this approach you get something like this.

196
00:13:13.100 --> 00:13:17.640
So we still have a load balancer we've got our servers we've still got a database but now we've got

197
00:13:17.640 --> 00:13:22.740
some outside data store which we can kind of think of as like a centralized singular hard drive more

198
00:13:22.740 --> 00:13:27.030
or less many different cloud providers offer services like this.

199
00:13:27.030 --> 00:13:32.520
So an example would be Amazon S3 which we just looked at the pricing for digital ocean spaces Google

200
00:13:32.520 --> 00:13:36.560
cloud storage there's like Asaad disk or something like that as well.

201
00:13:36.570 --> 00:13:41.380
So this is essentially just four files particularly images are a great use case for this.

202
00:13:41.430 --> 00:13:45.030
It's really cheap to store images on this kind of data store.

203
00:13:45.030 --> 00:13:50.830
And so it makes it a pretty good place to handle image upload so in this scenario we would still have

204
00:13:50.860 --> 00:13:56.880
a user make a request to upload an image that would flow through a load balancer be assigned to a server.

205
00:13:56.890 --> 00:14:01.870
Now here's the key thing the server would take this image and then bit by bit as it is being uploaded

206
00:14:01.870 --> 00:14:06.100
to the server the server would in turn forward bit by bit.

207
00:14:06.100 --> 00:14:12.580
Up to this outside data store and so we would store all of our images on this outside data store.

208
00:14:12.780 --> 00:14:17.900
And so in theory at some point time we would have thousands hundreds of thousands even millions of images

209
00:14:17.930 --> 00:14:23.430
on this outside state data store which is entirely what they're designed to do so in this approach we

210
00:14:23.430 --> 00:14:26.400
once again have some centralized source of all of our images.

211
00:14:26.460 --> 00:14:30.600
So all these different servers can easily say to the browser Oh hey yeah go get this image from this

212
00:14:30.600 --> 00:14:31.940
outside data store.

213
00:14:32.010 --> 00:14:35.360
In addition there's outside data store is really cheap to use.

214
00:14:35.460 --> 00:14:38.650
So it's great on our expenses as well.

215
00:14:38.700 --> 00:14:43.520
The downside to this approach however is that we're still involving the server in this process.

216
00:14:43.560 --> 00:14:48.270
So in other words we would have to have a number of servers inside of application to handle all of the

217
00:14:48.330 --> 00:14:53.970
increased load of throwing this image through the load balancer to our server and then have our server

218
00:14:54.000 --> 00:14:58.970
process that image and then part by part upload it to that outside server.

219
00:14:58.970 --> 00:15:00.570
So this is a good approach.

220
00:15:00.600 --> 00:15:07.320
I would even maybe just say like OK it is OK it's good whatever you want to say because it still involves

221
00:15:07.350 --> 00:15:12.420
our application and we still have to provision additional servers or capacity to handle all this image

222
00:15:12.450 --> 00:15:18.220
upload traffic right typical application maybe that's OK because maybe we don't expect to get many images

223
00:15:18.460 --> 00:15:24.160
but depending upon the type of application you're building well maybe at some point time this would

224
00:15:24.430 --> 00:15:29.450
have a lot of extra load being put on your servers OK.

225
00:15:29.510 --> 00:15:33.270
Now onto the last method pre signed you or else.

226
00:15:33.280 --> 00:15:36.250
So this is like the right way of doing things.

227
00:15:36.310 --> 00:15:39.060
This is by far the most complicated I think.

228
00:15:39.070 --> 00:15:39.670
However.

229
00:15:39.700 --> 00:15:40.950
So there is a downside to it.

230
00:15:40.960 --> 00:15:46.240
And like I said that's why we are not doing this way inside of our application is it would go just so

231
00:15:46.240 --> 00:15:50.740
far beyond the topic of JavaScript and just about everything around this doesn't really involve a lot

232
00:15:50.740 --> 00:15:52.000
of javascript code at all.

233
00:15:52.000 --> 00:15:56.740
Instead it's a lot of dev ops kind of stuff where we have to sign up for an IWC account do a lot of

234
00:15:56.740 --> 00:16:01.600
configuration pay some money all that kind of good stuff or bad stuff depending upon how you look at

235
00:16:01.600 --> 00:16:01.840
it.

236
00:16:02.230 --> 00:16:04.000
So that's why we're not doing it inside this course.

237
00:16:04.000 --> 00:16:07.810
Nonetheless let's figure out how it actually works.

238
00:16:07.980 --> 00:16:12.590
OK so in this approach we have basically the same thing as what we just discussed where we've got this

239
00:16:12.590 --> 00:16:18.620
outside data stored for all of our files but in this scenario what's going to happen our browser is

240
00:16:18.620 --> 00:16:24.050
going to make an initial request to our server and in this initial request the server is going to say

241
00:16:24.080 --> 00:16:28.000
hey server I want to upload a file to you in the server.

242
00:16:28.010 --> 00:16:30.570
In response is going to say OK that's great.

243
00:16:30.590 --> 00:16:34.170
I'm happy that you want to upload a file but don't send it to me.

244
00:16:34.310 --> 00:16:34.850
I'll tell you what.

245
00:16:34.850 --> 00:16:42.820
Instead the server is going to send back to the browser something called a priest signed U.R.L..

246
00:16:43.610 --> 00:16:50.770
So that's going to come from the server back over to the browser a priest signed your URL is a your

247
00:16:50.770 --> 00:16:53.610
URL that has some configuration stuffed into it.

248
00:16:53.620 --> 00:16:57.330
So like a token or two you know a special string of characters.

249
00:16:57.330 --> 00:17:03.700
The priest on your l is going to allow the browser to take this image and directly upload it to this

250
00:17:03.790 --> 00:17:10.420
outside data store so from the browser directly over to this outside data store.

251
00:17:10.630 --> 00:17:16.780
Normally our data stores like Amazon S3 or whatever else we're using are 100 percent locked down and

252
00:17:16.780 --> 00:17:22.090
we never allow any outside person to stick any files into our data store because otherwise we could

253
00:17:22.090 --> 00:17:26.110
possibly be paying for posting someone else's files inside of our project.

254
00:17:26.110 --> 00:17:32.500
Obviously not a good thing but in order to allow one person to once just like one time upload one single

255
00:17:32.500 --> 00:17:37.870
file we can generate this priest on your l thing which essentially gives very temporary access to the

256
00:17:37.870 --> 00:17:45.330
browser to upload a file to the data store one time for this very specific file so in this scenario

257
00:17:45.630 --> 00:17:50.590
we are not involving our server at all except for the generation of that priest on your l.

258
00:17:50.610 --> 00:17:54.990
The image is gonna go directly from the browser to the outside data store and unlike the last solution

259
00:17:54.990 --> 00:17:59.280
that we just took a look at our server is not going to have to do any additional processing to take

260
00:17:59.280 --> 00:18:03.600
that image stream it and essentially copy it back over to the data store here.

261
00:18:03.600 --> 00:18:06.350
So our servers end up doing significantly less work.

262
00:18:06.360 --> 00:18:12.360
Overall though this is definitely without doubt the best approach it is in theory like the right and

263
00:18:12.360 --> 00:18:17.220
I'm doing quotes in real life right now like it is quote unquote the right way of doing things.

264
00:18:17.280 --> 00:18:19.500
There are some scenarios where this is overkill.

265
00:18:19.500 --> 00:18:23.790
There are some scenarios where using of those other methods might be better but in general as an all

266
00:18:23.790 --> 00:18:30.360
purpose solution this is like a really good solid secure cost effective way of handling image upload.

267
00:18:30.360 --> 00:18:35.160
Like I said it is something that costs money as we usually end up having to sign up for one these services

268
00:18:35.190 --> 00:18:36.490
and pay for storage.

269
00:18:36.510 --> 00:18:41.580
It requires a lot of extra configuration and a little bit of extra code on our servers as well which

270
00:18:41.580 --> 00:18:42.270
is the only reason.

271
00:18:42.270 --> 00:18:46.170
Like I said that we're not doing it inside this course okay.

272
00:18:46.200 --> 00:18:50.290
So with all that in mind I hope you enjoy this quick overview on all these different methods.

273
00:18:50.290 --> 00:18:56.270
It's the last kind of takeaway I want you to have here anytime someone tells you to do image upload

274
00:18:56.300 --> 00:18:59.760
and to store it directly onto the hard disk and then read files out of there.

275
00:18:59.810 --> 00:19:05.450
Generally bad idea unless you've got a very particular use case where you know hundred percent that

276
00:19:05.450 --> 00:19:11.310
your image or your application is only ever going to have one server running storing stuff in a database

277
00:19:11.550 --> 00:19:15.950
definitely works but usually it costs a little bit more money streaming through the data store.

278
00:19:15.960 --> 00:19:16.980
Good solution.

279
00:19:17.010 --> 00:19:21.950
It is solid but it does require your servers to have some additional proof to them because they're going

280
00:19:21.950 --> 00:19:27.360
to do a little tiny bit of extra processing to receive these image uploads and then forward the file

281
00:19:27.360 --> 00:19:32.460
on to some outside data store priest on your l essentially having the browser upload directly to that

282
00:19:32.490 --> 00:19:33.620
outside data store.

283
00:19:33.720 --> 00:19:35.540
Definitely very good solution.

284
00:19:35.670 --> 00:19:40.940
Secure cost effective but requires a little bit more work upfront okay.

285
00:19:41.060 --> 00:19:43.250
So that's that quick overview on image upload.

286
00:19:43.250 --> 00:19:49.370
Like I said I felt really bad about it in this course in general tell me you like the not right way

287
00:19:49.370 --> 00:19:53.660
to do things which is why I want to give you this overview and I know it's kind of long possibly confusing

288
00:19:53.660 --> 00:19:55.070
but that's what we got.

289
00:19:55.750 --> 00:19:56.050
Okay.

290
00:19:56.090 --> 00:19:58.480
So I hope you enjoyed this overview overall.

291
00:19:58.640 --> 00:19:59.540
Let's take a pause right here.

292
00:19:59.540 --> 00:20:03.980
We're gonna come back the next video and we're going to implement a solution for storing images in our

293
00:20:03.980 --> 00:20:04.610
application.
