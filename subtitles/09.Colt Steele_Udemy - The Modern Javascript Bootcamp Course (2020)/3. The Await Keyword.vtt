WEBVTT
1
00:00:00.150 --> 00:00:02.550
Next up we move on to part two.

2
00:00:02.640 --> 00:00:03.820
The second keyword.

3
00:00:03.900 --> 00:00:04.850
Oh wait.

4
00:00:04.860 --> 00:00:08.080
So we have async which we used to declare an async function.

5
00:00:08.190 --> 00:00:14.790
It basically is a fancy way of wrapping that function in a promise but a wait is really magical.

6
00:00:14.790 --> 00:00:21.090
We put the awake keyword inside of an async function and it will pause the execution of the function

7
00:00:21.480 --> 00:00:24.390
while it waits for a promise to be resolved.

8
00:00:24.390 --> 00:00:30.930
So it will await something without having to use a dot next we can run code after an asynchronous operation

9
00:00:31.350 --> 00:00:33.290
without having to mess things with callbacks.

10
00:00:33.690 --> 00:00:38.220
So here's an example let's use axioms which charity have included.

11
00:00:38.280 --> 00:00:45.990
Just do the same old dumb planet's API from swampy and I have Acciona as you can see here we have access

12
00:00:45.990 --> 00:00:52.110
to get that returns a promise instead of returning I promised myself from a function let's call this

13
00:00:52.470 --> 00:01:03.580
get planet's return axial stock get like that and then doing get planets then let's say I want to cancel

14
00:01:03.580 --> 00:01:05.390
that log the planets after the fact.

15
00:01:05.430 --> 00:01:08.190
So get planets then raise

16
00:01:10.950 --> 00:01:13.850
concerns that log red dot data.

17
00:01:14.180 --> 00:01:15.530
So hopefully this works.

18
00:01:15.560 --> 00:01:17.270
No async function involved.

19
00:01:17.270 --> 00:01:17.960
There we go.

20
00:01:17.960 --> 00:01:20.990
We get the data so we return a promise.

21
00:01:20.990 --> 00:01:27.650
Then we have to use dot then and wait until the callback is actually executed in our code gets broken

22
00:01:27.650 --> 00:01:27.930
up.

23
00:01:28.060 --> 00:01:29.510
So a little harder to read.

24
00:01:29.660 --> 00:01:34.580
It's still much better than passing in a bunch of callbacks to a function since we're using promises

25
00:01:35.150 --> 00:01:46.160
but the easier way is to declare an async function get planets we'll do our axioms get passed in the

26
00:01:46.160 --> 00:01:55.250
euro and the craziest part right here is oh wait actually I don't get and will save the value that the

27
00:01:55.250 --> 00:02:01.770
promise is resolved with to a variable I'll call this rez and then I'll put a line after here console

28
00:02:01.780 --> 00:02:04.220
that log rez dot data.

29
00:02:04.220 --> 00:02:06.280
Same thing I had here.

30
00:02:06.680 --> 00:02:08.300
So this looks like it's synchronous.

31
00:02:08.300 --> 00:02:09.620
This is going to happen.

32
00:02:09.830 --> 00:02:14.990
It doesn't matter how long it takes we'll get some response value we'll call it reds then this will

33
00:02:14.990 --> 00:02:16.240
run after.

34
00:02:16.250 --> 00:02:22.340
That promise is resolved only after it's resolved so we don't have to use that then it looks like a

35
00:02:22.340 --> 00:02:27.650
nice cute synchronous function one thing happens it finishes the next thing happens and it finishes

36
00:02:28.220 --> 00:02:30.710
and that is what the await keyword does.

37
00:02:30.720 --> 00:02:32.590
But let's verify that it actually does.

38
00:02:32.600 --> 00:02:41.490
So let's do get planets refresh over here awesome so this returns a promise as we've seen before.

39
00:02:41.490 --> 00:02:46.200
If I just run it over here we get maps copy the wrong part.

40
00:02:46.200 --> 00:02:52.630
I just run the axiom stuff get that return to promise normally without a waits we consider it like resident

41
00:02:52.680 --> 00:02:54.990
data we'll get an error.

42
00:02:55.740 --> 00:02:58.410
Now while we don't get an error we get undefined.

43
00:02:58.410 --> 00:03:03.360
There is no data property because this is a promise that is returned and it's not yet resolved.

44
00:03:03.360 --> 00:03:10.530
When this runs but by putting a wait here javascript will wait it will not move on until this promise

45
00:03:10.560 --> 00:03:12.060
is resolved.

46
00:03:12.060 --> 00:03:13.830
So the promise will be resolved.

47
00:03:13.830 --> 00:03:19.260
That value is resolved with that's normally passed to dot then we'll just be stored in this variable

48
00:03:20.070 --> 00:03:23.340
and then we have access to it on the very next line.

49
00:03:23.340 --> 00:03:27.180
It's important to know though you can only use it wait instead of an async function.

50
00:03:27.180 --> 00:03:28.680
This will not work.

51
00:03:28.770 --> 00:03:35.040
I get a nice error a wait is a reserved word I cannot do it unless I'm in an async function.

52
00:03:35.190 --> 00:03:41.530
So even for just one single request like we have here this is still much easier to read.

53
00:03:41.640 --> 00:03:45.020
We don't have to do dot then we don't need an extra callback.

54
00:03:45.060 --> 00:03:50.540
It's not horrible to do that and to work with promises but this is so nice right.

55
00:03:50.580 --> 00:03:54.900
It's just syntactic sugar so it still uses promises behind the scenes.

56
00:03:54.900 --> 00:03:59.510
It just kind of hides it from you and it makes it look synchronous but it's still easier to read.

57
00:03:59.670 --> 00:04:04.500
It's easier to write and as you'll see when we start making more requests or doing more asynchronous

58
00:04:04.500 --> 00:04:09.450
operations it's very easy to see what happens first and second and third and so on so we get some more

59
00:04:09.450 --> 00:04:09.930
practice.
