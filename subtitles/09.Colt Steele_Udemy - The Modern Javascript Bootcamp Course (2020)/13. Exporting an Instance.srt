1
00:00:00,880 --> 00:00:01,140
All right.

2
00:00:01,150 --> 00:00:03,110
We're all don't our users repository.

3
00:00:03,140 --> 00:00:07,000
It's the very last thing I do inside of this file is a little bit of code cleanup.

4
00:00:07,000 --> 00:00:10,490
We also need to make sure that we eventually export the class to be created.

5
00:00:10,510 --> 00:00:13,190
So we created a class called users repository.

6
00:00:13,240 --> 00:00:18,730
We need to make sure that we export it so other files inside of our project can get access to this class.

7
00:00:18,850 --> 00:00:21,730
So to get started I got to go down to the very bottom of the file.

8
00:00:21,730 --> 00:00:24,780
I'm going to find our test function and where we invoke it.

9
00:00:24,850 --> 00:00:30,480
And I I'm going to delete all that code after that all then replace it with a module.

10
00:00:30,490 --> 00:00:31,530
Dot exports.

11
00:00:31,820 --> 00:00:36,930
So remember this is how we get code to be available to other files inside of our project.

12
00:00:36,980 --> 00:00:38,890
So there's two ways that we can export the class.

13
00:00:38,900 --> 00:00:40,260
We just create it.

14
00:00:40,310 --> 00:00:43,490
We can either export the entire class directly.

15
00:00:43,760 --> 00:00:49,290
So in other words we could write out a module that exports is users repository.

16
00:00:49,460 --> 00:00:54,050
Now I want you to think about the impact that doing this would have on the rest of our project.

17
00:00:54,060 --> 00:00:59,190
This means that inside of another file let's pretend that we're writing inside another file down here.

18
00:00:59,220 --> 00:01:10,000
We then have to write out some code like const users repository is required users because that's what

19
00:01:10,000 --> 00:01:15,650
we named this file right here and then I would have to use that class to create an instance of it before

20
00:01:15,650 --> 00:01:18,520
I could access any of the methods we define inside the class.

21
00:01:18,590 --> 00:01:22,910
So I would say something like constant repo is new users

22
00:01:25,150 --> 00:01:31,180
repository and remember the argument to our constructor is the name of the file that we want to save

23
00:01:31,210 --> 00:01:32,540
all of our data into.

24
00:01:32,560 --> 00:01:35,350
So we've been using user site Jason.

25
00:01:35,350 --> 00:01:38,190
So this is the code that we'd write inside of another file.

26
00:01:38,200 --> 00:01:42,180
Now I'm going to suggest that this approach right here is not the best in the world.

27
00:01:42,190 --> 00:01:43,370
Let me show you why.

28
00:01:43,540 --> 00:01:49,990
Let's imagine that we have yet another file inside of our project and inside of this other File we're

29
00:01:49,990 --> 00:01:54,640
going to write some very similar code but maybe in writing out this code specifically when we add in

30
00:01:54,640 --> 00:01:56,420
that constructor argument of the file name.

31
00:01:56,590 --> 00:02:03,340
Maybe I accidentally make a very small typo like so it's kind of hard to see here.

32
00:02:03,350 --> 00:02:04,190
But notice how.

33
00:02:04,190 --> 00:02:06,210
Up here I've got user start Jason.

34
00:02:06,350 --> 00:02:08,560
And down here I've got user dot Jason.

35
00:02:09,460 --> 00:02:14,070
So that means that we're going to create two separate Jason files inside of our project one called User

36
00:02:14,070 --> 00:02:18,590
stat JS on the other called user and it means that I'm going to be working with two different data sets

37
00:02:18,590 --> 00:02:19,760
inside my application.

38
00:02:19,880 --> 00:02:24,060
And this would end up being kind of a challenging bug to track down.

39
00:02:24,380 --> 00:02:29,390
You would start to run some queries to say find a particular user inside of the database or inside the

40
00:02:29,390 --> 00:02:30,260
data store.

41
00:02:30,500 --> 00:02:34,460
And in some cases it would appear to you that the queries are working and then in others that the queries

42
00:02:34,730 --> 00:02:41,360
weren't working and that would definitely be rather challenging to debug so we're going to use a different

43
00:02:41,360 --> 00:02:46,730
strategy for exporting users repository than the one you see right here.

44
00:02:46,770 --> 00:02:54,020
So rather than exporting the entire class of users repository we're going to instead export an instance

45
00:02:54,080 --> 00:02:55,290
of the class.

46
00:02:55,410 --> 00:03:02,180
So I'm going to say at the module that experts line model the experts equals new users repository and

47
00:03:02,180 --> 00:03:04,330
I'll put in the name that we're going to save all this data too.

48
00:03:04,370 --> 00:03:10,720
So users got Jason it's now what is the impact of making this change right here.

49
00:03:10,740 --> 00:03:15,380
Well now with this change whenever we import something from this file rather than receiving the entire

50
00:03:15,380 --> 00:03:20,540
class and having to create a new instance out of it right away we're going to instead receive an instance

51
00:03:20,540 --> 00:03:26,000
of users repository that we can start calling methods on immediately without having to call the new

52
00:03:26,330 --> 00:03:31,950
or pass in the name of the file or any of that stuff so inside of some other files we now can write

53
00:03:31,950 --> 00:03:39,030
some code like const repo is just require users and we can immediately do something like repo dot gets

54
00:03:39,090 --> 00:03:41,100
all or get one

55
00:03:43,800 --> 00:03:48,030
or whatever else we want to call and we don't have to worry about creating an instance of the class

56
00:03:48,060 --> 00:03:49,170
right away.

57
00:03:49,170 --> 00:03:53,250
And so it'd be the same thing in some other file we would get the instance and we could start working

58
00:03:53,250 --> 00:03:58,890
with the instance right away without having to worry about creating an instance of it OK.

59
00:03:58,920 --> 00:04:01,570
So this is definitely a better way to approach this.

60
00:04:01,580 --> 00:04:05,810
The only reason we can get away with this in this particular case is because we only really ever need

61
00:04:05,810 --> 00:04:08,770
to have one copy of users repository.

62
00:04:08,810 --> 00:04:15,130
There's not really a good reason for having multiple copies of it floating around our application so

63
00:04:15,180 --> 00:04:20,760
I can delete all that test code and we're left with just this right here now that we've got our users

64
00:04:20,760 --> 00:04:25,890
dot J.S. file pretty much all buttoned up we're gonna do just a little bit of additional cleanup here.

65
00:04:25,910 --> 00:04:30,510
So you'll notice inside of our repositories directory we've got that users not just on file which is

66
00:04:30,510 --> 00:04:32,030
where we've been storing all of our data.

67
00:04:32,040 --> 00:04:38,220
As we've been testing this class I recall that the Jason File is going to be created inside of whatever

68
00:04:38,280 --> 00:04:45,000
directory we run our node program from right now that file is only create inside of repositories because

69
00:04:45,000 --> 00:04:51,380
at our terminal we've been running no J.S. from inside the repositories directory in just a moment.

70
00:04:51,390 --> 00:04:55,770
We're going to change back to our root project directory and then start up our server as we normally

71
00:04:55,770 --> 00:04:58,490
would as soon as we do so users Dot.

72
00:04:58,500 --> 00:05:03,030
Jason is going to instead be created inside of our roots project directory.

73
00:05:03,330 --> 00:05:08,340
So all I mean to say here is that I'm going to delete the users not Jason File inside of repositories

74
00:05:08,610 --> 00:05:12,990
just so I don't have multiple copies of that file floating around my project which could easily make

75
00:05:12,990 --> 00:05:20,480
me a little bit confused at some point in time so I'm going to find user such a son and delete it and

76
00:05:20,480 --> 00:05:27,080
I'm going to make really sure that I delete user not Jason and not users dot Jesus is the J S file is

77
00:05:27,140 --> 00:05:28,640
where all of our code sits.

78
00:05:28,640 --> 00:05:32,270
We definitely don't want to delete that okay.

79
00:05:32,400 --> 00:05:33,810
Alex Good.

80
00:05:33,870 --> 00:05:34,260
It's now.

81
00:05:34,260 --> 00:05:38,400
Last thing I'm going to do I'm gonna go back to my AECOM project directory.

82
00:05:38,410 --> 00:05:43,980
So that's my main project directory and I'm going to start my server backup with NPM run dev

83
00:05:46,810 --> 00:05:47,790
all right.

84
00:05:47,900 --> 00:05:52,430
So now that we've got our repository all put together that's all ready to be used.

85
00:05:52,880 --> 00:05:55,850
We're going to go back over to our index not just file.

86
00:05:55,850 --> 00:06:00,710
We're going to find our post request handler right here which remember is receiving a post request from

87
00:06:00,710 --> 00:06:03,470
a user trying to sign up to our application.

88
00:06:03,470 --> 00:06:06,880
Let's take a quick pause right here and now that we've got that repository all put together we're gonna

89
00:06:06,900 --> 00:06:11,840
start to implement the logic inside of this post request handler to actually receive that request and

90
00:06:11,840 --> 00:06:13,590
create an account for the user.

91
00:06:13,640 --> 00:06:15,740
It's quite possible to cure that in just a moment.
