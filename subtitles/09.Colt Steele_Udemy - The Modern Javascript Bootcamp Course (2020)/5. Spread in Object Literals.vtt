WEBVTT
1
00:00:00.180 --> 00:00:06.180
Next up we have the third context we can use spread down here at the bottom of the paragraph an object

2
00:00:06.180 --> 00:00:10.950
expression to be expanded in places where zero or more key value pairs are expected.

3
00:00:10.950 --> 00:00:12.570
So here's what it looks like.

4
00:00:12.720 --> 00:00:13.380
It's the same.

5
00:00:13.380 --> 00:00:14.460
Dot dot dot.

6
00:00:14.460 --> 00:00:21.060
But we put it inside of curly braces instead of an object literal and it will copy over key value pairs

7
00:00:21.070 --> 00:00:24.790
properties from other objects into a destination object.

8
00:00:24.840 --> 00:00:29.940
So effectively we can make copies of objects or we can create combinations of objects we can put them

9
00:00:29.940 --> 00:00:30.850
together.

10
00:00:30.900 --> 00:00:33.330
So that's what we'll see in this video.

11
00:00:33.360 --> 00:00:37.770
I have two existing objects one called feline one called Canine.

12
00:00:37.770 --> 00:00:45.270
They just have two stupid properties their family and the number of legs for cats and furry set to true

13
00:00:45.300 --> 00:00:47.310
for canines.

14
00:00:47.370 --> 00:00:55.350
If I wanted to make a new object that included these properties but also more properties like a dog

15
00:00:57.030 --> 00:01:09.070
Dog object will include everything from canine and I'll also set is pet to true and adorable true if

16
00:01:09.070 --> 00:01:17.140
we look at dog I run the code over here we have those two properties from canine the family and furry

17
00:01:17.170 --> 00:01:18.430
set to true.

18
00:01:18.490 --> 00:01:20.530
So those were copied over.

19
00:01:20.530 --> 00:01:24.780
We could also do the same thing for cats concept feline.

20
00:01:24.880 --> 00:01:26.250
Let's go with.

21
00:01:26.290 --> 00:01:26.880
What's it.

22
00:01:26.900 --> 00:01:27.760
How about house cat.

23
00:01:27.760 --> 00:01:29.000
That's fine.

24
00:01:29.200 --> 00:01:36.440
We'll spread feline and then also add in is grumpy.

25
00:01:36.460 --> 00:01:41.640
True and personality unpredictable.

26
00:01:41.830 --> 00:01:42.970
At least my cats are.

27
00:01:44.530 --> 00:01:51.190
And if we look at house cat over here we've got the properties coming from feline plus the properties

28
00:01:51.190 --> 00:01:53.720
we set right here.

29
00:01:53.730 --> 00:02:02.320
Now what can happen is sometimes you might have conflicting properties like if we added legs for two

30
00:02:02.350 --> 00:02:05.090
canine as well they both have legs of four.

31
00:02:05.350 --> 00:02:07.870
What happens when we merge them together.

32
00:02:07.870 --> 00:02:19.170
So let's do concept cat dog equals and dot dot dot canine comma dot dot dot feline What do you think

33
00:02:19.170 --> 00:02:19.650
happens.

34
00:02:19.950 --> 00:02:25.200
Well in this case it's pretty simple because we know what happens in an object where we try and have

35
00:02:25.200 --> 00:02:27.030
two properties with the same key.

36
00:02:27.210 --> 00:02:28.870
They just overwrite each other.

37
00:02:28.980 --> 00:02:31.600
So we only have one legs property.

38
00:02:31.600 --> 00:02:41.340
But but what if let's say we have a three legged dog concept tripod equals and I copy and canine and

39
00:02:41.340 --> 00:02:44.350
then I set legs to three.

40
00:02:44.640 --> 00:02:47.630
What do you think tripod looks like.

41
00:02:47.640 --> 00:02:52.950
Well it does have legs set to three even though we had legs for an canine.

42
00:02:52.950 --> 00:02:59.850
The reason is that the order matters so we copy the properties from canine first and then afterwards

43
00:02:59.970 --> 00:03:02.070
legs is updated to three.

44
00:03:02.100 --> 00:03:08.440
So if I switch them here and then dot dot canine.

45
00:03:08.440 --> 00:03:09.560
Try it again.

46
00:03:09.560 --> 00:03:16.790
We'll get tripod now legs is set to four legs was three originally but then those properties were copied

47
00:03:16.790 --> 00:03:18.350
in and that overrode it.

48
00:03:18.980 --> 00:03:22.890
So the order does matter if you have conflicting properties with the same key name.

49
00:03:23.090 --> 00:03:29.450
We can also use spread to create a clone of an object so that we don't have the exact same reference

50
00:03:29.580 --> 00:03:32.810
or creating a copy of the object but just like with arrays.

51
00:03:32.810 --> 00:03:34.670
This is only one level deep.

52
00:03:34.670 --> 00:03:38.430
It will not clone nested objects or nested arrays.

53
00:03:38.750 --> 00:03:45.080
So if I wanted a copy of one of these existing objects how about cat dog I could do concept cat dog

54
00:03:45.260 --> 00:03:56.240
clone equals dot dot dot cat dog so cat dog itself exists or is created from two other objects to objects

55
00:03:56.240 --> 00:04:03.350
properties have been copied over and then I'm copying that Cat Dog object over into cat dog clone.

56
00:04:03.350 --> 00:04:04.420
Refresh my page.

57
00:04:04.460 --> 00:04:10.650
We have cat dog clone and if we triple equals to cat dog it's false.

58
00:04:10.730 --> 00:04:13.800
They are unique references because we made a copy.

59
00:04:13.820 --> 00:04:15.890
It's not the same reference.

60
00:04:15.980 --> 00:04:21.680
Another very important thing about spread in general this is the only context where you can spread an

61
00:04:21.710 --> 00:04:25.090
object when you're spreading into another object.

62
00:04:25.100 --> 00:04:33.440
If you'd tried to do it inside of an array and do it over here let's see how about canine or dog.

63
00:04:33.440 --> 00:04:34.720
This does not work.

64
00:04:34.790 --> 00:04:37.670
We get an error object is not ignorable.

65
00:04:37.670 --> 00:04:44.780
So in the context of an array it doesn't work in the context of an object so we can spread objects it

66
00:04:44.780 --> 00:04:47.290
does behave differently and the same holds true.

67
00:04:47.300 --> 00:04:53.810
If we were trying to pass this into a math dot Max or something which wouldn't even make sense but we

68
00:04:53.810 --> 00:04:56.030
can't spread the object either.

69
00:04:56.120 --> 00:04:57.370
It's not an ideal.

70
00:04:57.470 --> 00:05:02.870
It only works if we're passing in an array that we're spreading a string or some other ignorable but

71
00:05:02.900 --> 00:05:05.210
an object literal is not one.

72
00:05:05.210 --> 00:05:07.250
Now what do you think happens if I try the opposite.

73
00:05:07.250 --> 00:05:16.080
If I have an object literal and I try to spread an array into it the array of 4 5 6 what happens here.

74
00:05:17.290 --> 00:05:17.860
No error.

75
00:05:18.430 --> 00:05:27.580
Instead we get key value pairs based off of the indices so zero is the key set to 4 1 5 2 to 6.

76
00:05:27.580 --> 00:05:32.290
Probably not that common that you'd need to do that but the same thing holds true with the string.

77
00:05:32.290 --> 00:05:37.100
We can spread a string into an object but just kind of a weird thing to do.

78
00:05:37.120 --> 00:05:42.370
Never really seen it done in the last thing I'll show you here is that we can create array laterals

79
00:05:42.670 --> 00:05:47.440
that also contain objects laterals where we use spread in different contexts.

80
00:05:47.440 --> 00:05:52.900
So let's say I was making an array and I was spreading in the string hello.

81
00:05:52.900 --> 00:06:00.320
For some reason and then I also have an object as one of the possible values in the array and in there

82
00:06:00.600 --> 00:06:03.190
I spread in cat dog.

83
00:06:03.190 --> 00:06:06.280
So I'm combining them inside of an array.

84
00:06:06.700 --> 00:06:17.230
Let's create a variable here constant random equals get rid of that extra s random is an array with

85
00:06:17.470 --> 00:06:23.200
string characters first that we spread and then an object that contains object properties that we spread

86
00:06:23.800 --> 00:06:25.330
so we can nest them.

87
00:06:25.330 --> 00:06:29.280
Now we can create more data structures or nested structures where we spread.

88
00:06:29.380 --> 00:06:32.250
But the context matters the way that spread works.

89
00:06:32.260 --> 00:06:37.540
Instead of this object is different than the way spread works right here because here we're in an array

90
00:06:37.960 --> 00:06:39.610
here we're in an object.

91
00:06:39.610 --> 00:06:44.500
Yes technically it's nested in the array but that doesn't matter it behaves just the same as it did

92
00:06:44.500 --> 00:06:45.860
here or here.

93
00:06:45.970 --> 00:06:47.210
So that is spread.

94
00:06:47.260 --> 00:06:49.750
We saw three different situations where it works.

95
00:06:49.780 --> 00:06:54.730
We always use three dots the first one we saw was passing into a function math.

96
00:06:54.740 --> 00:06:59.450
That man was the example I used where you can spread a bunch of values.

97
00:06:59.500 --> 00:07:05.350
Let's say an array into individual arguments so they're passed as separate arguments.

98
00:07:05.350 --> 00:07:10.960
Then we saw how do you spread in an array literal super useful which helps us copy data from one array

99
00:07:11.080 --> 00:07:12.200
into a new array.

100
00:07:12.220 --> 00:07:17.920
We can combine arrays essentially a nicer way of concatenate ing or we can create a clone of an array

101
00:07:18.430 --> 00:07:23.860
and then in this video we saw how we can use spread in objects laterals to copy properties over from

102
00:07:23.860 --> 00:07:25.540
one object to a new object.

103
00:07:25.600 --> 00:07:27.370
We can create a clone of an object.

104
00:07:27.370 --> 00:07:32.200
We can create a hybrid where we take properties from two objects or three or four and combine them into

105
00:07:32.200 --> 00:07:32.830
one.

106
00:07:32.830 --> 00:07:36.960
We can add new properties and just remember that the order does matter.

107
00:07:37.180 --> 00:07:42.460
If you have conflicting properties like we did with the legs situation so legs here.

108
00:07:42.490 --> 00:07:46.330
If we want likes to remain three should come after all right.

109
00:07:46.330 --> 00:07:49.270
That spread a lovely lovely new feature.
