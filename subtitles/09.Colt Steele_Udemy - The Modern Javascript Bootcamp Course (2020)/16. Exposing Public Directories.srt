1
00:00:01,280 --> 00:00:05,750
In this video we're going to figure out how he can get Express to give us the CSX file that we're looking

2
00:00:05,750 --> 00:00:06,490
for.

3
00:00:06,510 --> 00:00:10,040
So right now I'm inside of my laptop J.S. file there is the link tag right there.

4
00:00:10,070 --> 00:00:15,380
But clearly inside of our browser if we look at the network we request app that's the ISIS file is not

5
00:00:15,380 --> 00:00:17,690
getting loaded up which is why something's inside of here.

6
00:00:17,780 --> 00:00:20,400
They'll look quite right just yet.

7
00:00:20,510 --> 00:00:21,770
So how are we going to fix this.

8
00:00:21,770 --> 00:00:25,890
Well as usual let's take a look at a diagram really quickly okay.

9
00:00:25,920 --> 00:00:28,790
So here's what's happening inside of application right now.

10
00:00:28,800 --> 00:00:34,920
Our browser is going to make a request for a route like Slash sign in to our Express server right now

11
00:00:34,950 --> 00:00:35,820
on the Express server.

12
00:00:35,820 --> 00:00:41,100
We have a route handler that is a dedicated javascript function to receive that incoming request.

13
00:00:41,100 --> 00:00:44,980
Process it and then send back some handcrafted HDL.

14
00:00:45,210 --> 00:00:47,640
We've got the same thing for Slash sign up as well.

15
00:00:48,280 --> 00:00:51,780
So now we need to add in a very different type of root handler.

16
00:00:51,780 --> 00:00:56,760
In this case rather than receiving some incoming request and having that execute some javascript code

17
00:00:57,150 --> 00:01:04,020
we instead want express to try and find a file called may not see SS and send that file back over to

18
00:01:04,020 --> 00:01:05,370
the browser.

19
00:01:05,370 --> 00:01:10,920
So in other words we want our Express application to serve up some files or really just make some files

20
00:01:10,980 --> 00:01:14,470
available in our application to the browser.

21
00:01:14,660 --> 00:01:16,490
Let's figure out how we're going to do that.

22
00:01:16,790 --> 00:01:21,770
Back inside my browser I'm going to find my root project directory and inside there I'm going to create

23
00:01:21,800 --> 00:01:26,350
a new folder called Public this public directory.

24
00:01:26,360 --> 00:01:28,750
We're going to expose to the outside world.

25
00:01:28,820 --> 00:01:34,070
So in other words any file or any folder inside this public directory we're going to make sure that

26
00:01:34,100 --> 00:01:38,390
a browser can freely access all the different files and folders inside there.

27
00:01:38,390 --> 00:01:40,900
So the public directory really means public.

28
00:01:40,940 --> 00:01:41,690
This is public.

29
00:01:41,690 --> 00:01:45,640
It is available to the outside world inside this public directory.

30
00:01:45,640 --> 00:01:52,240
We're going to place any CSF files any images any fonts any javascript code that we want to make available

31
00:01:52,240 --> 00:01:53,720
to our browser.

32
00:01:53,770 --> 00:01:58,990
It is very important that we never place any files inside there that are secret or really just important

33
00:01:58,990 --> 00:02:00,330
to our application.

34
00:02:00,340 --> 00:02:04,840
So for example you and I are never going to play some javascript code inside there that is intended

35
00:02:04,840 --> 00:02:07,530
to be used by our server in general.

36
00:02:07,540 --> 00:02:12,280
We always want to hide the code from our server and not allow outsiders to see it because who knows

37
00:02:12,540 --> 00:02:17,250
our javascript code that runs the server might have some secrets inside of it or something like that

38
00:02:17,470 --> 00:02:23,420
that we don't want the outside world world to know about however we will place JavaScript files inside

39
00:02:23,420 --> 00:02:29,880
the public directory that are intended intended to be executed by the browser so inside this public

40
00:02:29,880 --> 00:02:37,140
directory I'm going to make a new folder called CSX so to better organize this directory I will eventually

41
00:02:37,140 --> 00:02:43,170
make separate files called CSX fonts images J.S. and so on just to make sure that's really clear where

42
00:02:43,170 --> 00:02:52,450
every type of file lives inside their I'm then going to open up that directory using my file explorer.

43
00:02:52,480 --> 00:02:54,490
So here's the CSX folder right there.

44
00:02:54,690 --> 00:02:55,510
And we do icons.

45
00:02:55,510 --> 00:03:01,060
You can see a much larger them on the darn thing.

46
00:03:01,060 --> 00:03:01,540
There we go.

47
00:03:01,690 --> 00:03:02,600
Here's public.

48
00:03:02,590 --> 00:03:04,050
There's the CSX folder.

49
00:03:04,060 --> 00:03:10,240
I got to open up that CSX folder and then I'll copy over the main dot CSX file that we had downloaded

50
00:03:10,240 --> 00:03:11,850
in the last video.

51
00:03:12,160 --> 00:03:16,230
So I going to place it in there like so now.

52
00:03:16,250 --> 00:03:23,370
If I go back over to my editor and open up that CSX directory I should see that main file inside now

53
00:03:23,430 --> 00:03:27,400
just placing these folders inside of here it doesn't actually do anything.

54
00:03:27,510 --> 00:03:32,460
In other words if we go back over to our browser and refresh the page no change whatsoever.

55
00:03:32,460 --> 00:03:37,800
We have to specifically tell express that we wanted to make this directory available to the outside

56
00:03:37,800 --> 00:03:39,710
world to do so.

57
00:03:39,720 --> 00:03:45,810
We're going to go back to our index dot J.S. file and find where we create our app right here.

58
00:03:45,810 --> 00:03:47,790
Remember inside the index not just file.

59
00:03:47,790 --> 00:03:50,220
We have wired up several different middleware.

60
00:03:50,220 --> 00:03:55,940
Some of these are coming from outside libraries like body parser and cookie session there is another

61
00:03:55,940 --> 00:03:57,760
middleware that we're going to wire up inside of here.

62
00:03:57,860 --> 00:04:03,970
And this one is coming directly from the Express library itself so we're going to say right at the top.

63
00:04:04,110 --> 00:04:11,730
The first middleware that we're going to wire up will say apps that use Express dot static and then

64
00:04:11,790 --> 00:04:15,100
we're going to pass in a string of public.

65
00:04:15,170 --> 00:04:20,390
So this is telling express to take a look inside of our current working directory find the public folder

66
00:04:20,870 --> 00:04:24,620
and make everything inside there available to the outside world.

67
00:04:24,640 --> 00:04:28,990
Now it's kind of interesting about this line right here is that it kind of changes every single request

68
00:04:29,020 --> 00:04:33,940
that's going to come into our application every request that now comes into our application is going

69
00:04:33,940 --> 00:04:37,030
to be handled first by this middleware right here.

70
00:04:37,030 --> 00:04:41,500
Express is going to take a look at the route of the incoming request and it's going to see if there

71
00:04:41,500 --> 00:04:48,140
is a file inside the public directory that matches up to the route that the request is looking for so

72
00:04:48,140 --> 00:04:55,900
in other words whenever someone now makes a request to CSX slash main dot CSX Express is going to take

73
00:04:55,900 --> 00:05:00,970
a look automatically every single time inside of this directory that's going to see if there is a folder

74
00:05:00,970 --> 00:05:05,360
called CSX and then it's going to see inside there if there's a file called Maine dot CSX.

75
00:05:05,490 --> 00:05:10,990
And if there is Express is going to take that file and send it back to whoever made the request if there's

76
00:05:10,990 --> 00:05:16,780
not a file inside there that matches up to whatever the user or the requester is looking for then Express

77
00:05:16,780 --> 00:05:21,580
is going to continue on and run all the other middle tiers and route handlers that we've wired up inside

78
00:05:21,580 --> 00:05:30,560
of application let's now save this we'll go back over I'm going to refresh and now I will see a little

79
00:05:30,560 --> 00:05:34,590
difference on the header I can see that the link for products is at the right hand side.

80
00:05:34,720 --> 00:05:40,040
And if I open up my network request log I'll also see that we are now successfully retrieving that main

81
00:05:40,280 --> 00:05:42,940
CSX file okay.

82
00:05:43,000 --> 00:05:43,980
So that's pretty much it.

83
00:05:43,990 --> 00:05:49,150
We've now got some good styling inside of here you'll notice that everything works just about identical

84
00:05:49,150 --> 00:05:51,310
to how it worked before around our form.

85
00:05:51,310 --> 00:05:58,420
So for example if I put in some invalid e-mail to sign in and hit submit we're still going to see that

86
00:05:58,420 --> 00:06:00,400
same kind of validation stuff.

87
00:06:00,400 --> 00:06:06,490
If I put in a valid e-mail but a incorrect password I'll see invalid password and so on.

88
00:06:06,800 --> 00:06:10,360
We should have all the same behavior around our sign up form as well.

89
00:06:10,360 --> 00:06:17,770
So if I tried to sign in with an e-mail that already exists I should get a validation error and so on.

90
00:06:17,800 --> 00:06:18,850
So this looks pretty good.

91
00:06:18,850 --> 00:06:20,600
Definitely good styling improvement.

92
00:06:20,680 --> 00:06:23,280
So quick pause right here and continue in just a moment.
