1
00:00:00,240 --> 00:00:04,920
Next up we have the Array method that I probably use the most out of all of them.

2
00:00:04,920 --> 00:00:06,450
It's called Map.

3
00:00:06,450 --> 00:00:10,790
Map is used to create a new array from an existing array.

4
00:00:10,830 --> 00:00:13,290
It could be used to simply duplicate an array.

5
00:00:13,350 --> 00:00:19,200
Though there are easier ways of doing it but it can also be used to extract portions of an array or

6
00:00:19,200 --> 00:00:25,560
to somehow transform an array into a new array double every number in this array or reverse every string

7
00:00:25,560 --> 00:00:31,320
in the original and make a new array with those reverse strings so it accepts a callback just like for

8
00:00:31,320 --> 00:00:31,880
each.

9
00:00:31,890 --> 00:00:38,790
It calls that callback with every element in the array but it builds a new array with those values.

10
00:00:38,790 --> 00:00:40,440
So here's a simple example.

11
00:00:40,650 --> 00:00:42,860
Here I have an array called texts.

12
00:00:42,930 --> 00:00:52,320
We have a raffle L'OrÃ©al AMG t t y l for strings lowercase and I'm calling texts dot map I'm passing

13
00:00:52,320 --> 00:00:58,650
a callback function in the parameter name I settled on was t t represents each one of these strings

14
00:00:59,250 --> 00:01:07,440
and I'm returning from this function T dot to uppercase and what this whole map does overall is it generates

15
00:01:07,470 --> 00:01:15,090
a new array and I'm storing it in a variable called caps so it does not alter or update texts its original

16
00:01:15,120 --> 00:01:21,090
values are still unchanged but I've mapped them over to a new array called caps so we'll take a look

17
00:01:21,090 --> 00:01:22,380
at a bunch of examples.

18
00:01:23,010 --> 00:01:25,950
I have two sample arrays to start nice and simple ones.

19
00:01:26,040 --> 00:01:32,790
Let's work with numbers let's make a new array called doubles doubles will be an array where every value

20
00:01:32,790 --> 00:01:36,430
is double this value the corresponding value in numbers.

21
00:01:36,690 --> 00:01:41,270
So we'll call numbers dot map and we'll pass in a function.

22
00:01:41,490 --> 00:01:47,310
Usually we use anonymous functions unless you have a predefined function that does exactly what you

23
00:01:47,310 --> 00:01:47,870
need.

24
00:01:47,970 --> 00:01:54,330
Usually these are one time use things and the callback parameter or go with is just num.

25
00:01:54,390 --> 00:01:57,560
That makes sense it represents each number.

26
00:01:57,570 --> 00:02:00,630
Now what I need to do from this function is return of value.

27
00:02:00,630 --> 00:02:04,030
This is how map knows what value to add to the array.

28
00:02:04,080 --> 00:02:06,910
If I don't return anything it won't work.

29
00:02:07,050 --> 00:02:11,280
So let's return Num Times 2.

30
00:02:11,280 --> 00:02:17,880
And if I run this right now we don't get anything or we don't see anything numbers is unchanged because

31
00:02:17,880 --> 00:02:22,220
map does not mutate the original array it maps the values to a new array.

32
00:02:22,350 --> 00:02:24,120
So I need to capture that value.

33
00:02:24,180 --> 00:02:29,670
If I run this code on my console you can see that it returns map itself returns.

34
00:02:29,670 --> 00:02:38,130
This new map array so I'll capture that in a variable cost doubles tried again.

35
00:02:38,130 --> 00:02:44,160
And now if I look at doubles it exists and it's a double of this original array.

36
00:02:44,400 --> 00:02:51,740
So if I don't return something I just console out log or I'm simply writing this expression here.

37
00:02:51,870 --> 00:02:59,400
If we look at doubles it's an array full of undefined because MAB doesn't care what the return value

38
00:02:59,400 --> 00:03:05,460
is it's going to take whatever is returned from our function and added into a new array eight times

39
00:03:05,490 --> 00:03:07,650
because it ran our function eight times.

40
00:03:07,650 --> 00:03:13,440
There's eight elements here and each time nothing was returned and when a function returns nothing the

41
00:03:13,440 --> 00:03:15,310
value you get is undefined.

42
00:03:15,360 --> 00:03:18,160
So it created an array of eight undefined.

43
00:03:18,450 --> 00:03:22,200
So we need to return a value here.

44
00:03:22,270 --> 00:03:26,960
There we go next let's do another example with numbers once again.

45
00:03:27,090 --> 00:03:32,230
But instead of simply doubling the value let's decide if the number is even or odd.

46
00:03:32,430 --> 00:03:37,380
And we're going to map them into a new array where the array will contain.

47
00:03:37,380 --> 00:03:45,240
Let's have it contain an object for each element and we'll have the number set to 20 and then we'll

48
00:03:45,240 --> 00:03:56,300
set is even 2 True or false and we'll do that for every single element in numbers so to do that we need

49
00:03:56,300 --> 00:04:00,380
to call numbers dot map passenger callback function.

50
00:04:00,380 --> 00:04:06,230
I'll go with N as a parameter this time instead of num and then we know we want to check if the value

51
00:04:06,230 --> 00:04:11,900
is even and we want to return an object so we can return an object here.

52
00:04:12,110 --> 00:04:16,880
We can do it all at once you don't have to make it in a variable first and then return it and we'll

53
00:04:16,880 --> 00:04:30,080
set value to be n and then we'll set is even to be a bully and true or false based off of an mod 2 equals

54
00:04:30,140 --> 00:04:31,400
zero.

55
00:04:31,400 --> 00:04:38,660
So this if the remainder once you divide by two is zero that will return true if not it returns false.

56
00:04:38,780 --> 00:04:45,390
So we'll end up with the is even property being true or false and then value is just the number itself.

57
00:04:45,390 --> 00:04:53,800
And so if we try this and save it to a variable we'll go with const Mm num detail.

58
00:04:53,800 --> 00:04:55,610
I don't know if it's not a great name.

59
00:04:55,610 --> 00:05:02,930
Let's look at what we get num detail is an array of objects and each object has a value and is even

60
00:05:03,800 --> 00:05:10,880
so we have value twenty one is even false value twenty two is even true.

61
00:05:10,880 --> 00:05:12,320
So there is one example.

62
00:05:12,410 --> 00:05:18,410
Now let's work with the array of strings I have all of these abbreviations and let's say I wanted to

63
00:05:18,410 --> 00:05:26,570
format them different I want an array where each string is all caps and separated by periods like A.S.A.P.

64
00:05:27,230 --> 00:05:30,030
should be formatted this way instead of A.S.A.P..

65
00:05:30,200 --> 00:05:32,940
So I want to map them into a new array.

66
00:05:33,440 --> 00:05:34,780
What I need to do here.

67
00:05:34,850 --> 00:05:40,820
Well what I can do at least is use map if I didn't want to use map in all of these examples I could

68
00:05:40,820 --> 00:05:45,340
do this manually I could make a loop for left word.

69
00:05:45,350 --> 00:05:47,180
Let's go with numbers just to do this.

70
00:05:47,180 --> 00:05:55,370
Doubles example for the NUM of numbers I need to make a results array so we'll make our array we'll

71
00:05:55,370 --> 00:06:05,600
call it doubles to cost doubles to equals an empty array and then I need to push into doubles to push

72
00:06:06,840 --> 00:06:12,120
numb times to so I'm doing the same thing effectively.

73
00:06:12,130 --> 00:06:17,270
There's no function involved but I'm iterating over numbers for each number.

74
00:06:17,370 --> 00:06:20,790
I'm multiplying it by two and pushing it into an array.

75
00:06:20,850 --> 00:06:25,050
I'm actually doing the push one at a time versus when we use map.

76
00:06:25,050 --> 00:06:30,450
All we do is write a function map calls that function takes the result and it puts it into a new array

77
00:06:30,450 --> 00:06:32,790
for us automatically and it gives us that array.

78
00:06:33,330 --> 00:06:36,020
But if we verify that this works doubles too.

79
00:06:36,270 --> 00:06:37,380
There we go.

80
00:06:37,380 --> 00:06:41,280
But again this is not calling a function for something simple like multiplying by 2.

81
00:06:41,280 --> 00:06:47,190
This is easy but map is really really useful especially when we start to combine it with other methods

82
00:06:47,190 --> 00:06:47,910
that we'll see.

83
00:06:48,180 --> 00:06:51,160
So I don't want to give you the impression that you should do this.

84
00:06:51,210 --> 00:06:54,240
This is easier because it's usually not.

85
00:06:54,240 --> 00:06:57,560
I just wanted to kind of recreate the basics of what it's doing.

86
00:06:57,810 --> 00:06:59,000
So it makes it array for us.

87
00:06:59,010 --> 00:07:01,330
It starts empty and then it calls this function.

88
00:07:01,380 --> 00:07:02,610
It gets a return value.

89
00:07:02,610 --> 00:07:06,190
It pushes that into the array and then it does it again for the next element.

90
00:07:06,210 --> 00:07:12,240
So back to our words we're going to call map where it stopped map.

91
00:07:12,240 --> 00:07:15,460
I'll call this word the parameter here.

92
00:07:15,630 --> 00:07:21,900
Now the logic to get this to be an abbreviation where we have all caps and a period after every letter

93
00:07:22,470 --> 00:07:24,350
is a little tricky.

94
00:07:24,390 --> 00:07:27,450
It's not hard but we're going to use a couple of different methods.

95
00:07:27,450 --> 00:07:33,210
We're going to capitalize it first so we're gonna call word dot to uppercase.

96
00:07:33,300 --> 00:07:39,990
Then the easiest way in my opinion to add a period after every character is to split the word into an

97
00:07:39,990 --> 00:07:41,520
array.

98
00:07:41,700 --> 00:07:43,170
So if we do it over here.

99
00:07:43,440 --> 00:07:52,620
If we had A.S.A.P. dot to uppercase dot split split and wants to know where it should split and if we

100
00:07:52,620 --> 00:08:00,150
give it an empty string it creates an array with each character from that string so each element is

101
00:08:00,150 --> 00:08:01,440
one character.

102
00:08:01,440 --> 00:08:02,710
So now I have an array.

103
00:08:03,000 --> 00:08:09,570
Then I can call dot join on that array and tell it what to join those characters together with.

104
00:08:09,690 --> 00:08:15,270
So take each element in this array that we just created using split and join it together into one string

105
00:08:15,420 --> 00:08:18,160
separated by a period after each character.

106
00:08:18,300 --> 00:08:19,420
And there we go.

107
00:08:19,680 --> 00:08:21,560
So we can use that logic right here.

108
00:08:21,690 --> 00:08:28,290
Word to uppercase dots put on the empty string which means but on every character that gives us an array

109
00:08:28,670 --> 00:08:32,230
and we can call dot join on a period.

110
00:08:32,310 --> 00:08:33,260
So this is not going to work.

111
00:08:33,270 --> 00:08:35,790
What am I missing I'm missing.

112
00:08:35,790 --> 00:08:36,700
Return.

113
00:08:36,990 --> 00:08:39,640
We have to return this from our function.

114
00:08:40,110 --> 00:08:41,950
And then let's capture the variable.

115
00:08:42,180 --> 00:08:45,470
We'll call this a briefs abbreviations.

116
00:08:45,840 --> 00:08:48,150
If we run it we look at the briefs.

117
00:08:48,150 --> 00:08:50,340
We now have this array that we mapped.

118
00:08:50,340 --> 00:08:53,720
We took this array of values and we map them into a new array.

119
00:08:53,730 --> 00:08:58,080
The originals are unchanged but we now have a new array.

120
00:08:58,320 --> 00:09:04,350
Remember for each is similar but we're not building an array with those values for each is like half

121
00:09:04,350 --> 00:09:04,950
of map.

122
00:09:05,100 --> 00:09:09,090
It calls a function on every element but it doesn't store them in an array.

123
00:09:09,090 --> 00:09:15,300
It doesn't return a new array map does map takes that function it calls it and it takes the return value

124
00:09:15,330 --> 00:09:18,540
and puts it in a new array which is how we end up with this.

125
00:09:18,540 --> 00:09:20,470
Here's one more common use case for map.

126
00:09:20,550 --> 00:09:26,630
If we have a slightly more complex data structure like this box array we have a bunch of properties

127
00:09:26,640 --> 00:09:28,470
we have title authors rating.

128
00:09:28,470 --> 00:09:34,920
If I wanted to create a new array that contained all the book titles in my library I could use map if

129
00:09:34,920 --> 00:09:38,050
I want to just extract or isolate the title.

130
00:09:38,100 --> 00:09:40,270
I don't care about authors I don't care about reading.

131
00:09:40,410 --> 00:09:42,510
I can use math to do that.

132
00:09:42,510 --> 00:09:49,830
I would map over books so book Stop map I pass in my callback and I'll call the parameter here.

133
00:09:49,830 --> 00:09:58,640
Let's go with B for book and all I want to do is return the title so B dot title return.

134
00:09:58,650 --> 00:10:02,670
Beat out title and that's it.

135
00:10:02,730 --> 00:10:07,980
So I'm saying create a new array based off of this array and the value I'm going to return that you

136
00:10:07,980 --> 00:10:14,880
should use to make that new Array is only the title so I'm whittling down this array of objects and

137
00:10:14,880 --> 00:10:20,760
turning it into an array of strings turning it into a strong term I'm creating a new version based off

138
00:10:20,760 --> 00:10:21,260
of it.

139
00:10:21,360 --> 00:10:23,370
The original books is unchanged.

140
00:10:23,460 --> 00:10:24,370
I'm mapping it.

141
00:10:24,570 --> 00:10:27,390
So let's go with concept titles.

142
00:10:27,390 --> 00:10:29,610
Let's look at titles.

143
00:10:30,470 --> 00:10:31,560
And there we go.

144
00:10:31,560 --> 00:10:35,000
I have whittled down the pieces I need I've extracted them.

145
00:10:35,130 --> 00:10:39,270
I didn't change the original but this is a really common thing to do.

146
00:10:39,270 --> 00:10:45,080
Sometimes you have complex data structures and you want an array of just one piece or just a couple

147
00:10:45,090 --> 00:10:50,680
pieces you want a simplified form we can use map to do that without impacting the original.

148
00:10:50,730 --> 00:10:56,310
We just return the piece or the pieces that we want to form a new array using so that's mapped.

149
00:10:56,340 --> 00:11:01,060
Like I said it's very useful helps us take one array and map it into a new array.

150
00:11:01,080 --> 00:11:07,140
We provide a callback function and that callback is executed once per element in the original array

151
00:11:07,390 --> 00:11:11,310
and the return value of our callback is what is used to generate the new array.
