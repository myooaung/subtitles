WEBVTT
1
00:00:00.270 --> 00:00:00.510
All right.

2
00:00:00.540 --> 00:00:05.670
So we saw the loveliness of X a charge X AML HDP requests.

3
00:00:05.670 --> 00:00:07.140
It didn't seem that bad.

4
00:00:07.140 --> 00:00:12.630
I mean it's a little extra syntax but if this was the only way we had to make requests we can obviously

5
00:00:12.630 --> 00:00:18.510
make it work where it gets kind of annoying is once we start making these requests that are dependent

6
00:00:18.690 --> 00:00:19.920
on one another.

7
00:00:19.920 --> 00:00:24.780
So for example here we're getting all the planets back or at least the first 10 planets.

8
00:00:24.780 --> 00:00:28.000
And if we look just on the API this is a little dashboard.

9
00:00:28.000 --> 00:00:29.940
If we look at the data we get back.

10
00:00:29.940 --> 00:00:36.910
It includes residents and films which are actually just references to other API endpoints.

11
00:00:36.930 --> 00:00:43.920
So if I wanted to take the first planet and look at the first resident of that planet I would send another

12
00:00:43.920 --> 00:00:44.990
request to this.

13
00:00:45.000 --> 00:00:46.060
You are.

14
00:00:46.500 --> 00:00:48.150
So let's do that through our code.

15
00:00:48.240 --> 00:00:50.730
We need to wait for the first request to come back.

16
00:00:50.880 --> 00:00:52.570
Then we'll look inside results.

17
00:00:52.570 --> 00:00:54.660
We'll get the first results.

18
00:00:54.690 --> 00:01:00.300
The first planet looking residents will get the first resident and send a request to that you are all

19
00:01:01.880 --> 00:01:03.550
let's see if it works.

20
00:01:03.560 --> 00:01:10.490
So up here we would have to write our code inside the callback to make a second request.

21
00:01:10.490 --> 00:01:11.790
So we're getting our data.

22
00:01:11.930 --> 00:01:15.400
Why don't we just start by singling out the you are.

23
00:01:15.410 --> 00:01:21.230
We want to request so that's data dot but is it results dot.

24
00:01:21.770 --> 00:01:24.760
We want the first result so of zero.

25
00:01:25.070 --> 00:01:26.660
We can start by printing that

26
00:01:29.310 --> 00:01:32.610
refresh the page on my Web page.

27
00:01:32.730 --> 00:01:32.970
OK.

28
00:01:33.000 --> 00:01:34.460
So that's the first result.

29
00:01:34.470 --> 00:01:38.240
Then we want residents or we could do films that might be more interesting.

30
00:01:38.250 --> 00:01:39.210
Why don't we do films.

31
00:01:39.240 --> 00:01:42.810
So we'll do data dot results of zero dot films.

32
00:01:42.930 --> 00:01:44.310
That's an array.

33
00:01:44.310 --> 00:01:45.490
We want the first.

34
00:01:45.540 --> 00:01:49.770
You are all that we get from that films array which is right here.

35
00:01:50.140 --> 00:01:53.720
Swap eco slash API such films slash 6.

36
00:01:53.730 --> 00:01:58.060
This is a you URL that we can send a request to to get more information.

37
00:01:58.140 --> 00:02:03.710
And it looks like what is this film slash 6 is revenge of the Sith.

38
00:02:03.750 --> 00:02:08.910
Honestly I know almost nothing about Star Wars sadly I love sci fi and fantasy but somehow I've never

39
00:02:08.910 --> 00:02:09.330
seen them.

40
00:02:09.780 --> 00:02:14.960
So let's now send a request to this you are out so we have the euro.

41
00:02:14.980 --> 00:02:24.450
We'll save it to a variable we'll call this concert film you Earl then we have to do all of this again.

42
00:02:25.300 --> 00:02:34.930
So we make a new object concert film request equals new exam I'll TTP request not capitalized even though

43
00:02:34.930 --> 00:02:43.250
I always attempt to do it the first time then film request that at event listener on load put our callback

44
00:02:43.270 --> 00:02:54.730
in here let's just consider it log jam let's do this just to start then we'll add our other event listener

45
00:02:54.940 --> 00:02:57.490
if it fails.

46
00:02:57.490 --> 00:03:04.420
So for the error with the at event listener for error at our function and here we do have an event object

47
00:03:04.450 --> 00:03:06.490
by the way that we can use.

48
00:03:06.750 --> 00:03:16.720
Why don't we cancel that log error and then also show the event object that error event object and then

49
00:03:16.810 --> 00:03:21.760
we need to actually send the request but first we have to open it like we did down here.

50
00:03:21.760 --> 00:03:30.250
So film request dot open you want to get request and the U.R.L. this time is this you are row right

51
00:03:30.250 --> 00:03:37.570
here film you are about that we extracted from the response of the very first request so film you are

52
00:03:37.570 --> 00:03:42.180
out then finally film request send.

53
00:03:42.460 --> 00:03:52.330
So if it works we should see this printed out first we'll say first request worked and then let's add

54
00:03:52.330 --> 00:03:55.050
a second console dialog here.

55
00:03:55.450 --> 00:03:56.800
Second request worked

56
00:03:59.500 --> 00:04:01.810
let's give it a look first.

57
00:04:01.810 --> 00:04:03.260
Hey second one works.

58
00:04:03.280 --> 00:04:08.220
Take a look at what we get back instead of response or response text.

59
00:04:08.230 --> 00:04:11.290
We've got title let's just print the movie title.

60
00:04:11.830 --> 00:04:17.620
So we need to pass again so this references the entire film request object.

61
00:04:17.620 --> 00:04:23.950
We want this dot response text which is exactly what we did in the first request.

62
00:04:24.010 --> 00:04:25.660
We want to pass that whole thing.

63
00:04:25.660 --> 00:04:29.230
So we use that magic method that comes for free with JavaScript.

64
00:04:29.290 --> 00:04:32.390
Jason that part that turns it into javascript.

65
00:04:32.830 --> 00:04:38.780
We'll save this in a variable called Film data and we can just console that log film data.

66
00:04:38.780 --> 00:04:42.650
Now try it again.

67
00:04:42.710 --> 00:04:46.700
Now we have an actual javascript object and it contains information.

68
00:04:46.700 --> 00:04:52.730
So we sent one request to get all the planets and we're just arbitrarily selecting the first planet

69
00:04:53.150 --> 00:04:55.050
and the first film that it appears in.

70
00:04:55.190 --> 00:05:00.720
It also appears I think this planet whatever the first planet was all drawn or something.

71
00:05:00.860 --> 00:05:01.200
I don't know.

72
00:05:01.220 --> 00:05:02.180
Might have made that up.

73
00:05:02.180 --> 00:05:04.630
Whatever the first planet is it appears in two films.

74
00:05:04.730 --> 00:05:12.530
We took the first one and we requested information about that using the URL from that films array from

75
00:05:12.530 --> 00:05:13.530
the first result.

76
00:05:13.610 --> 00:05:17.970
So we couldn't make the second request until the first one was successfully completed.

77
00:05:17.990 --> 00:05:22.070
So we have to nested inside here these nasty nested callbacks.

78
00:05:22.070 --> 00:05:26.350
This is just not a good look and it's still only what two levels deep it's not bad.

79
00:05:26.420 --> 00:05:28.820
We're not even doing much with our errors at all.

80
00:05:28.820 --> 00:05:32.540
We're not handling them we're not trying to make a subsequent request.

81
00:05:32.630 --> 00:05:36.040
Often you will try and make another request if the first one errors.

82
00:05:36.040 --> 00:05:37.470
You might try something different.

83
00:05:37.640 --> 00:05:41.570
And then that subsequent request needs to have its own two callbacks.

84
00:05:41.690 --> 00:05:47.680
Things get very messy very quickly which is really the main reason that I don't like to use x jars.

85
00:05:47.690 --> 00:05:49.410
Why Most people don't like them.

86
00:05:49.490 --> 00:05:50.810
It's just difficult.

87
00:05:50.810 --> 00:05:56.330
It gets messy and nested which is why fetch was created which is what we'll see just after this video

88
00:05:56.340 --> 00:06:02.540
fetch supports promises which makes it way way easier to make subsequent requests or to handle failures.

89
00:06:02.540 --> 00:06:04.070
We need one catch.

90
00:06:04.070 --> 00:06:07.820
So if you didn't watch the promises section definitely go back and check it out.

91
00:06:07.820 --> 00:06:12.640
It will help you really understand what is so amazing about fetch and promises in general.

92
00:06:12.740 --> 00:06:13.730
So that's coming up next.
