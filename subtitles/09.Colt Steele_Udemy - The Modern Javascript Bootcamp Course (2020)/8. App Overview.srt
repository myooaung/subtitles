1
00:00:00,700 --> 00:00:05,080
Now seeing a little bit of know J.S. and so now we're going to start to work on a project to get a better

2
00:00:05,080 --> 00:00:07,870
idea of how to build applications with it.

3
00:00:07,870 --> 00:00:11,860
The first project we're going to work on with node is going to be fairly simple and straightforward

4
00:00:12,150 --> 00:00:16,690
and it's really focused on helping you get a handle on the Node J.S. standard library.

5
00:00:16,690 --> 00:00:17,540
We'll talk about what that is.

6
00:00:17,540 --> 00:00:18,710
Just a moment.

7
00:00:18,810 --> 00:00:22,170
I first want wanna tell you exactly what we're going to be building.

8
00:00:22,180 --> 00:00:28,810
All right so if you run a Linux based machine or a Mac based machine or even a Windows machine with

9
00:00:28,810 --> 00:00:34,630
a Linux terminal emulator you might be familiar with the LS commands that we run at the terminal the

10
00:00:34,630 --> 00:00:40,550
Ellis command can be used to print out the different files and folders inside of some directory.

11
00:00:40,570 --> 00:00:43,860
So in this case I can run l s and see a couple different folders.

12
00:00:44,140 --> 00:00:49,360
I could run l s on some other directory like my root directory and see all the files and folders inside

13
00:00:49,360 --> 00:00:49,990
there as well.

14
00:00:51,600 --> 00:00:54,980
So we can really use the Ellis command in two very basic ways.

15
00:00:55,080 --> 00:00:59,880
We can call Ellis by itself with no arguments and that's going to print out all the files and folders

16
00:00:59,910 --> 00:01:06,690
in the current directory or we can call Ellis with a path that can be a relative or an absolute path

17
00:01:07,040 --> 00:01:10,900
they'll print out all the files and folders in that target directory.

18
00:01:10,920 --> 00:01:16,890
So I want to use no G.S. to re implement this basic functionality around the Ellis command.

19
00:01:16,890 --> 00:01:21,420
So we're going to make our own version of L S that we're going to build to run directly at our terminal

20
00:01:21,720 --> 00:01:27,360
inside of any project or any directory on our machine and just print out all the files and folders inside

21
00:01:27,360 --> 00:01:28,320
there.

22
00:01:28,320 --> 00:01:32,970
So like I said pretty simple project what we're going to learn a lot about node along the way along

23
00:01:32,970 --> 00:01:38,960
with a couple of different topics around async programming and some array helper methods and whatnot.

24
00:01:39,150 --> 00:01:44,520
The first thing want to do is help give you an an idea of how we're going to actually read out files

25
00:01:44,520 --> 00:01:47,130
and folders at all at this point.

26
00:01:47,130 --> 00:01:51,390
We've only been taking a look at javascript inside the browser and in the browser we don't have any

27
00:01:51,390 --> 00:01:57,960
access whatsoever to the user's hard drive but with node that all changes with no G S we can read out

28
00:01:57,960 --> 00:02:01,770
files and folders inside of a directory very easily.

29
00:02:01,770 --> 00:02:03,420
So here's how we're going to do it.

30
00:02:03,720 --> 00:02:10,020
We're going to first take a look at the no GSM standard documentation so I can open up a new browser

31
00:02:10,020 --> 00:02:13,290
tab and visit that link at the top.

32
00:02:13,290 --> 00:02:17,670
You can see that I'm like get the documentation for version 13 1 0.

33
00:02:17,700 --> 00:02:23,620
You might be looking at a very much newer version of the documentation if you are totally fine.

34
00:02:23,640 --> 00:02:29,880
Turns out that no J.S. releases new versions quite frequently but there are usually very very few breaking

35
00:02:29,880 --> 00:02:30,870
changes.

36
00:02:30,870 --> 00:02:33,460
So if you're looking at a version of like 20 or something.

37
00:02:33,540 --> 00:02:35,340
Really no issue whatsoever.

38
00:02:35,340 --> 00:02:39,270
It is extremely unlikely that's going to have any issue with the code that we're going to write for

39
00:02:39,270 --> 00:02:44,030
this project so on this page we can take a look at the left hand side.

40
00:02:44,050 --> 00:02:50,410
These are all different libraries or modules inside of the node at JFK standard library we can use all

41
00:02:50,410 --> 00:02:55,840
these different modules right here and they're all chock full of code in classes and functions and whatnot

42
00:02:55,840 --> 00:02:59,480
that we can use to build out a node application pretty darn easily.

43
00:02:59,770 --> 00:03:04,330
So we can use these modules to get access to things on a user's computer that we don't usually have

44
00:03:04,330 --> 00:03:07,220
access to for our project.

45
00:03:07,220 --> 00:03:10,950
We're going to be wanting to work with the file system on the user's machine.

46
00:03:11,180 --> 00:03:16,430
So if we scroll down a little bit we're going to find a section called file system right here I click

47
00:03:16,430 --> 00:03:17,020
on that.

48
00:03:17,120 --> 00:03:23,300
We can then be taken to a big gigantic page like this really is a giant page with a ton of different

49
00:03:23,300 --> 00:03:26,930
functions that can be used to work with the users file system.

50
00:03:26,930 --> 00:03:32,150
So in other words we can use the functions and objects inside of here to read different files on the

51
00:03:32,150 --> 00:03:38,180
user's hard drive create files edit files rename them and so on just about everything you can possibly

52
00:03:38,180 --> 00:03:39,830
think of.

53
00:03:39,840 --> 00:03:41,460
All right so let's pause right here.

54
00:03:41,460 --> 00:03:45,060
We're going to come back in just a moment and I'm going to point out a couple of different methods that

55
00:03:45,080 --> 00:03:49,140
are probably going to be really useful for us in building the application that we just discussed.
