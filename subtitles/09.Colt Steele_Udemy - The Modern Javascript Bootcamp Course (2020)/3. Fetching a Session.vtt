WEBVTT
1
00:00:00.940 --> 00:00:05.490
We just installed the cookie session library not to make use of it inside of a project.

2
00:00:05.500 --> 00:00:08.040
We first have to wire it up to our project.

3
00:00:08.050 --> 00:00:10.550
We can't just start accessing it directly on this line of code.

4
00:00:10.570 --> 00:00:13.460
So let me show you how to use this library very quickly.

5
00:00:13.460 --> 00:00:18.340
I'm going to first go up to the very top of my index dot J.S. file and right after the body parser require

6
00:00:18.340 --> 00:00:23.140
statement I'm going to require in cookie session as well.

7
00:00:28.090 --> 00:00:32.670
The cookie session library is a middleware function just like body parser is.

8
00:00:32.740 --> 00:00:37.180
So in order to make use of cookies session inside of our project we're going to wired up to our app

9
00:00:37.270 --> 00:00:40.310
object by using the app don't use function.

10
00:00:40.420 --> 00:00:47.710
So right after body parser I will call app that use I'll then pass in cookie session.

11
00:00:47.710 --> 00:00:53.780
I'm going to call it like a function and I'm going to pass in a configuration object inside of this

12
00:00:53.780 --> 00:00:56.540
configuration object that we're passing off to Cookie session.

13
00:00:56.630 --> 00:01:04.160
We're going to provide exactly one property that property is he's at is going to be an array.

14
00:01:04.250 --> 00:01:09.050
The first element inside this array is going to be a string with some random characters inside of it.

15
00:01:09.050 --> 00:01:14.800
Like so you can use any random series of characters that you want fully up to you what you use.

16
00:01:14.840 --> 00:01:18.750
Let me tell you exactly why we're adding in this information right here.

17
00:01:18.780 --> 00:01:24.080
Remember just a moment ago I told you inside this diagram that we've got a cookie that is going to include

18
00:01:24.080 --> 00:01:30.740
some users I.D. So whenever a user or specifically a browser makes a request to our server they're going

19
00:01:30.740 --> 00:01:35.370
to include that cookie and that includes some identifying information inside of it.

20
00:01:36.540 --> 00:01:43.080
Now here is something that would be very bad if we allowed it to occur if a user was able to go into

21
00:01:43.080 --> 00:01:46.390
their cookie which remember is really just a random string of characters.

22
00:01:46.530 --> 00:01:51.600
And if they could change the information inside there at random or at will I should say.

23
00:01:51.840 --> 00:01:57.540
So if I was the user with I.D. too and I went into my cookie and changed that little number right there

24
00:01:57.780 --> 00:02:04.840
to 10 instead now whenever I make a request to the server the server would look at the cookie that I

25
00:02:04.850 --> 00:02:10.940
including they would see user idea of 10 and now they use the server would assume that I was the user

26
00:02:10.940 --> 00:02:13.040
with an idea of 10.

27
00:02:13.040 --> 00:02:18.170
So in other words if a user could very easily modify the contents of a cookie they could pretend that

28
00:02:18.170 --> 00:02:20.720
they were someone who they are not.

29
00:02:20.720 --> 00:02:25.900
So to prevent that from happening we add on this Keyes property over here.

30
00:02:25.970 --> 00:02:30.670
This Keyes property is used to encrypt all the information that is stored inside the cookie.

31
00:02:30.710 --> 00:02:35.900
So to a user it really truly will just appear to be a random string of characters and they will not

32
00:02:35.900 --> 00:02:41.380
be able to decipher it or let alone make any changes to the information stored inside their just to

33
00:02:41.380 --> 00:02:43.900
really drill home how important this encryption is.

34
00:02:44.350 --> 00:02:49.810
Well really just a moment ago when we were making use of base camp you saw me pull out all that information

35
00:02:49.900 --> 00:02:53.490
from the cookie header and add it into my API clients.

36
00:02:53.880 --> 00:02:58.340
And so clearly a user can very easily get access to that cookie string itself.

37
00:02:58.390 --> 00:03:03.400
And so if it was easy to decrypt and change the information side there it would be absolutely trivial

38
00:03:03.400 --> 00:03:06.830
to pretend that you were someone else inside of an application.

39
00:03:06.850 --> 00:03:12.470
So that is why it is so important to encrypt the information that we are storing inside of a cookie.

40
00:03:12.470 --> 00:03:17.740
The cookie session library is going to do that for us automatically so long as we include this key string

41
00:03:17.740 --> 00:03:19.030
right here.

42
00:03:19.030 --> 00:03:24.850
This Keyes array of strings is essentially the encryption key that is going to be used to encrypt all

43
00:03:24.850 --> 00:03:31.480
that data if you ever set a cookie on a user's browser and then come back and change this key in any

44
00:03:31.480 --> 00:03:31.890
way.

45
00:03:31.900 --> 00:03:35.100
So let's say delete some characters add characters or change.

46
00:03:35.170 --> 00:03:39.400
That means that you're going to have a different encryption key and that means all of sudden that all

47
00:03:39.400 --> 00:03:44.380
the cookies you had set before are no longer going to be accessible because even you do not have the

48
00:03:44.380 --> 00:03:48.400
encryption key any longer okay.

49
00:03:48.410 --> 00:03:51.250
So that's all we have to do to wire up the cookie session library.

50
00:03:51.250 --> 00:03:57.170
So what impact does that really have to our project well the only thing that cookie session really does

51
00:03:57.230 --> 00:04:03.440
as far as you and I can tell as developers is add in an additional property to our rec object.

52
00:04:03.530 --> 00:04:08.520
So remember every request handler we put together is going to have this rack as an argument.

53
00:04:08.780 --> 00:04:15.740
The Rec object represents the incoming request the cookie session library ads on exactly one additional

54
00:04:15.740 --> 00:04:24.940
property to that Rec object the additional property that gets added in is rec dot session that is added

55
00:04:25.210 --> 00:04:32.360
by Cookie a session if we were not using the cookie session library court session would not exist at

56
00:04:32.360 --> 00:04:36.940
all wrecked out session property is going to be an object.

57
00:04:36.950 --> 00:04:39.160
It's like a plain javascript object.

58
00:04:39.160 --> 00:04:43.180
You and I can add in as many properties as we wish to this object right here.

59
00:04:44.540 --> 00:04:50.360
If we add in any properties to this object whenever we call resort sent the cookie session library is

60
00:04:50.360 --> 00:04:56.440
going to automatically look at the object and take a look at any information on it that you and I changed.

61
00:04:56.600 --> 00:05:03.860
It's then going to take a lot information encoded into a simple string and then attach it as the disunity

62
00:05:03.890 --> 00:05:06.380
attach it to the outgoing response as the cookie.

63
00:05:06.380 --> 00:05:08.990
That should be stored on the user's browser.

64
00:05:09.050 --> 00:05:13.190
It's a long story short the DOT session property is going to be an object.

65
00:05:13.220 --> 00:05:18.140
Any information we throw inside there is going to be automatically maintained by cookies session for

66
00:05:18.140 --> 00:05:25.850
us now if we want to store the idea of the user that we just generated inside of this person's cookie

67
00:05:25.880 --> 00:05:28.070
or essentially whoever just made the request.

68
00:05:28.220 --> 00:05:34.770
We're going to just add in a new property to the rect session object so we'll say rec not session not

69
00:05:34.820 --> 00:05:42.140
user I.D. is user dot I.D. a user dot IDE or user I.D. right here that doesn't have to be user I.D.

70
00:05:42.140 --> 00:05:46.450
again record session is an object so we can add in any property name we want.

71
00:05:46.610 --> 00:05:53.690
We could have had this instead be something like idea of person making this request or something like

72
00:05:53.690 --> 00:05:54.020
that.

73
00:05:55.570 --> 00:06:01.420
But having just user I.D. definitely makes a little bit more sense okay.

74
00:06:01.460 --> 00:06:07.100
So now our users should be automatically getting signed into our application whenever they sign up for

75
00:06:07.100 --> 00:06:12.680
an account specifically because we are setting some information on the users.

76
00:06:12.680 --> 00:06:16.660
Cookie let's now save this and do a quick test.

77
00:06:16.810 --> 00:06:23.340
I'm gonna go back over I'm gonna go back to local host three thousand I'm going to enter in an email

78
00:06:23.340 --> 00:06:25.350
that I've never signed up with before.

79
00:06:25.380 --> 00:06:29.820
Remember you probably have already signed up with an email so check your user start Jace on file make

80
00:06:29.830 --> 00:06:34.830
sure you don't have any email inside of here that you're going to have about to reuse because otherwise

81
00:06:34.890 --> 00:06:36.940
you're just gonna get an error very quickly.

82
00:06:36.970 --> 00:06:43.780
I'm going to use test 1 at test dot com I'll then enter in some matching passwords I'll hit sign up

83
00:06:44.850 --> 00:06:46.050
and I see a account created.

84
00:06:47.270 --> 00:06:52.370
Now if you have your network request tab open right now take a look at the request that we just made

85
00:06:53.680 --> 00:06:54.460
so I click on this.

86
00:06:54.460 --> 00:06:57.780
I'll see if I made a post request to local host 3000.

87
00:06:57.930 --> 00:07:02.920
And now very importantly I'll see some information I didn't see before on the response headers.

88
00:07:02.980 --> 00:07:08.620
So the response we got back in server server we had some headers and now we see a set cookie inside

89
00:07:08.620 --> 00:07:09.570
of here.

90
00:07:09.790 --> 00:07:15.280
So we now have a cookie that was provided to us from our server of that string right there.

91
00:07:15.280 --> 00:07:21.850
And we also have something called a session signature the session signature is what makes sure that

92
00:07:21.850 --> 00:07:24.170
we didn't tamper with our cookie in any way.

93
00:07:24.190 --> 00:07:26.480
So this is something as provided by Cookie session.

94
00:07:26.710 --> 00:07:31.550
The information that you and I are actually storing is really included inside of this set express call

95
00:07:31.560 --> 00:07:38.340
in session property so that string right there in encrypted format contains all the information that

96
00:07:38.340 --> 00:07:40.560
we just stored on the session object.

97
00:07:40.560 --> 00:07:46.610
So it includes the user I.D. key and the value of whatever the user I.D. actually is.

98
00:07:46.700 --> 00:07:49.320
It's now to really make sure that this work correctly.

99
00:07:49.440 --> 00:07:58.120
I'm going to go back up to my root request handler where we show the form inside of here inside the

100
00:07:58.120 --> 00:08:04.360
div specifically I'm going to add in a reference to a javascript variable I'm going to try to print

101
00:08:04.360 --> 00:08:10.120
out the I.D. of the person who just made this request I'm going to know the idea of the person who just

102
00:08:10.120 --> 00:08:15.490
made the request because remember that rec object right there is going to automatically be given that

103
00:08:15.490 --> 00:08:21.870
session property the one we just spoke about a moment ago at session property is managed by Cookie session.

104
00:08:21.920 --> 00:08:27.620
So when ever any request comes into our application we should be able to look at Rec not session and

105
00:08:27.620 --> 00:08:31.030
that will be the same object we set up a little bit ago.

106
00:08:31.130 --> 00:08:33.680
We'll have all the same information all the same properties.

107
00:08:33.770 --> 00:08:39.580
And it's going to be a 100 percent customized for the user who just made the request to our server inside

108
00:08:39.580 --> 00:08:39.860
of here.

109
00:08:39.860 --> 00:08:46.370
I'll say rec not session dot user I.D. and I'll put a little text in front of it and say something like

110
00:08:46.730 --> 00:08:51.860
your I.D. is like so OK.

111
00:08:51.940 --> 00:08:54.930
I'm gonna say this once again and go back over.

112
00:08:55.090 --> 00:09:01.450
I'm going to navigate back to local three thousand and now I can see your ideas blah blah blah.

113
00:09:01.450 --> 00:09:05.320
So clearly we have some information being stored with my browser.

114
00:09:05.320 --> 00:09:11.350
That information is being sent to the server whenever I make a request hooky session is going to intercept

115
00:09:11.350 --> 00:09:12.250
the request.

116
00:09:12.430 --> 00:09:18.640
It's going to decode all the information stored inside the cookie and attach it to the rec session object.

117
00:09:18.750 --> 00:09:23.950
And so now anywhere inside of our application as long as we have access to that rec object we can identify

118
00:09:24.010 --> 00:09:30.060
whether or not this person is signed in based upon the presence of rec not session that user I.D..

119
00:09:30.280 --> 00:09:34.930
In other words if this property right here is defined that means that this person making the request

120
00:09:34.990 --> 00:09:39.640
has signed up or signed in to our application and that's it.

121
00:09:39.640 --> 00:09:43.410
That is authentication in a nutshell.

122
00:09:43.460 --> 00:09:49.030
OK so we've now gone through the entire flow of basic authentication or at least sign up.

123
00:09:49.380 --> 00:09:51.980
We still have to cover signing in and signing out.

124
00:09:52.020 --> 00:09:55.620
So we're going to take care of that stuff very quickly and we're going to start to do a bigger refactor

125
00:09:55.620 --> 00:09:56.770
to our code base.

126
00:09:56.820 --> 00:09:58.940
We're gonna solve a couple of security issues.

127
00:09:58.980 --> 00:10:03.360
We're going to generally just organize our code in a fashion that will make it easier to expand our

128
00:10:03.360 --> 00:10:05.780
app in the future as well.

129
00:10:05.850 --> 00:10:08.340
So a quick pause and I'll see you in just a minute.
