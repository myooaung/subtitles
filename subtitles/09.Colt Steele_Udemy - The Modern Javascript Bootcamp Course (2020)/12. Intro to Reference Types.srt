1
00:00:00,190 --> 00:00:00,800
Righty.

2
00:00:00,840 --> 00:00:03,600
We survived that massive chunk of array methods.

3
00:00:03,630 --> 00:00:05,430
Hopefully we all survived it.

4
00:00:05,460 --> 00:00:08,010
Now we're going to address this third bullet point here.

5
00:00:08,010 --> 00:00:10,690
Just one video but a very important topic.

6
00:00:10,800 --> 00:00:16,280
The idea of reference types in JavaScript so you'll have to bear with me here for a moment.

7
00:00:16,290 --> 00:00:22,710
We're going to take a step back two strings or numbers any of the primitive types we saw earlier.

8
00:00:22,710 --> 00:00:24,410
Strings numbers billions.

9
00:00:24,420 --> 00:00:25,800
No undefined.

10
00:00:25,800 --> 00:00:32,370
All those they work differently than things like a race and objects which we're about to cover.

11
00:00:32,430 --> 00:00:35,700
So let's take a look at an example here of a single string.

12
00:00:35,700 --> 00:00:38,910
Let's go with fruit equals orange.

13
00:00:38,910 --> 00:00:42,660
Suppose we have this example string variable called fruit.

14
00:00:43,050 --> 00:00:50,330
And I make a another variable called color so I'll do that color equals fruit.

15
00:00:50,520 --> 00:00:52,860
I want it to have the exact same value.

16
00:00:53,100 --> 00:00:56,410
So fruit is storing the value of orange color.

17
00:00:56,490 --> 00:01:00,180
It's also storing the value of orange if we look at color it's orange.

18
00:01:00,180 --> 00:01:02,230
Fruit is orange.

19
00:01:02,420 --> 00:01:02,870
Okay.

20
00:01:02,930 --> 00:01:05,640
And now what if I decide to change fruit.

21
00:01:05,760 --> 00:01:09,050
Fruit is now going to be watermelon.

22
00:01:09,120 --> 00:01:10,670
What is the value of color.

23
00:01:10,680 --> 00:01:12,360
We know fruit is watermelon.

24
00:01:12,360 --> 00:01:13,460
What is color.

25
00:01:13,470 --> 00:01:14,690
It's orange.

26
00:01:14,910 --> 00:01:16,750
So that hopefully makes sense.

27
00:01:16,830 --> 00:01:19,410
We're storing a value in a variable.

28
00:01:19,410 --> 00:01:25,560
So at the beginning color is set to the same value orange but then we change the value in fruit but

29
00:01:25,560 --> 00:01:27,300
that doesn't change the value in color.

30
00:01:27,300 --> 00:01:28,800
They're not linked.

31
00:01:28,800 --> 00:01:30,900
That's because they are primitive types.

32
00:01:30,900 --> 00:01:36,840
And when we work with primitive types when we create a variable to store one we're creating a value

33
00:01:36,930 --> 00:01:39,110
type variable.

34
00:01:39,420 --> 00:01:45,060
What that means is that in memory javascript stores all of these variables every single variable we

35
00:01:45,060 --> 00:01:47,280
ever make is stored in memory.

36
00:01:47,460 --> 00:01:52,920
And when we're working with a value type variable the actual value is stored in memory.

37
00:01:52,920 --> 00:01:59,100
So imagine every time we make a variable there's a little slot in memory that's made to store your information

38
00:01:59,100 --> 00:02:00,240
for that variable.

39
00:02:00,420 --> 00:02:06,300
If you use a primitive type as the value that value itself is stored that is the thing that is put in

40
00:02:06,300 --> 00:02:08,730
the container in the jar.

41
00:02:08,730 --> 00:02:14,890
But for large things like arrays that doesn't work arrays can have tons of information in them.

42
00:02:14,910 --> 00:02:21,240
So instead of storing all of those values in the variable itself what javascript does instead is it

43
00:02:21,240 --> 00:02:27,600
stores a reference to that array and you can think of that reference as kind of like just a string of

44
00:02:27,600 --> 00:02:29,640
numbers a memory address.

45
00:02:29,640 --> 00:02:31,580
We don't really we're not able to see it.

46
00:02:32,010 --> 00:02:34,350
There's not an easy way to get javascript to print it.

47
00:02:34,530 --> 00:02:39,510
But the key distinction here is that when we work with arrays and we put them in a variable the variable

48
00:02:39,510 --> 00:02:47,010
itself does not hold the array it holds an arrow a pointer a reference to where the array is in memory

49
00:02:47,400 --> 00:02:52,260
compared to a value type variable where the actual value is stored.

50
00:02:52,260 --> 00:02:58,410
So we can see this in action if we do something like this let's we'll just do numbers equals five six

51
00:02:58,410 --> 00:03:07,340
seven eight and I'll make a second variable we'll call this other names equals numbers.

52
00:03:07,440 --> 00:03:08,280
All right.

53
00:03:08,280 --> 00:03:15,960
So when we set up numbers equals five six seven eight that array that array is not stored in the space

54
00:03:15,960 --> 00:03:19,290
in memory for numbers it's not stored in that jar.

55
00:03:19,290 --> 00:03:26,370
Instead a reference to this array is stored so you can kind of think of it as numbers equals some reference

56
00:03:26,580 --> 00:03:27,780
in memory.

57
00:03:27,780 --> 00:03:34,770
Then when I say other numbers equals numbers it will set other names to be the same reference.

58
00:03:34,770 --> 00:03:40,740
So they're both pointing to the same thing in memory instead of each version or each variable storing

59
00:03:40,950 --> 00:03:43,170
the actual value of the array.

60
00:03:43,320 --> 00:03:45,350
They both are just pointing to the same thing.

61
00:03:45,360 --> 00:03:51,030
And that means if I change numbers num stop push let's go with 10.

62
00:03:51,060 --> 00:03:52,560
Now I guess nine is next.

63
00:03:53,510 --> 00:04:00,050
And then we look at other numbers it reflects that change because updating numbers doesn't change the

64
00:04:00,050 --> 00:04:02,280
value stored in numbers.

65
00:04:02,330 --> 00:04:07,920
It is using this reference to find that array update that array but the reference is still the same.

66
00:04:08,060 --> 00:04:13,100
And other numbers is looking for the exact same label or the same reference in memory.

67
00:04:13,100 --> 00:04:16,040
So when I change one the other changes as well.

68
00:04:16,040 --> 00:04:23,410
So if we did other names dot Pop let's do it two times or maybe three times and then we look at numbers.

69
00:04:23,510 --> 00:04:24,870
It's also impacted.

70
00:04:25,370 --> 00:04:27,370
So this is a really important distinction.

71
00:04:27,560 --> 00:04:33,050
When you work with arrays and we'll shortly see objects behave the same way they are stored as reference

72
00:04:33,050 --> 00:04:37,520
types in variables or in memory rather than the actual value being stored.

73
00:04:37,520 --> 00:04:42,410
And that does have some important repercussions one of which we'll address in the very next video about

74
00:04:42,410 --> 00:04:43,330
concept.

75
00:04:43,340 --> 00:04:47,190
Another way of making a variable that hasn't seemed all that useful to us right now.

76
00:04:47,490 --> 00:04:47,790
OK.

77
00:04:47,840 --> 00:04:48,590
So I'll stop here.

78
00:04:48,590 --> 00:04:53,630
This is not the last time we'll talk about reference types but I just wanted to introduce the idea to

79
00:04:53,630 --> 00:04:55,290
sum it up in five seconds.

80
00:04:55,310 --> 00:04:59,000
Primitive types are stored as the actual value in a variable.

81
00:04:59,000 --> 00:05:00,250
Arrays are different.

82
00:05:00,290 --> 00:05:04,100
Instead the variable stores are reference to where that array is in memory.
