WEBVTT
1
00:00:01.290 --> 00:00:03.090
Our program is more or less working.

2
00:00:03.090 --> 00:00:05.140
There are still a couple of things we have to do.

3
00:00:05.220 --> 00:00:10.920
But first I want a quick discussion about the standard IO object right here and also the three other

4
00:00:10.980 --> 00:00:13.920
methods or functions inside that child process module.

5
00:00:13.950 --> 00:00:15.050
So let's get to it.

6
00:00:15.060 --> 00:00:18.620
First off what is standard Io OK.

7
00:00:18.680 --> 00:00:23.410
So this is a diagram of exactly what happens when we start up a program from our terminal.

8
00:00:23.420 --> 00:00:26.260
This is not necessarily a no JSA application.

9
00:00:26.270 --> 00:00:27.830
This is really any type of program.

10
00:00:28.550 --> 00:00:34.610
So our terminal starts up some new kind of program or to be more precise we are using our terminal to

11
00:00:34.610 --> 00:00:37.850
create a process when this process is created.

12
00:00:37.880 --> 00:00:43.460
It gets it signed three different communication channels these different channels that we refer to as

13
00:00:43.460 --> 00:00:50.030
standard in standard out and standard air abbreviated is in the way that you see right here are used

14
00:00:50.030 --> 00:00:56.270
to communicate with this running process standard in can be used to receive some information directly

15
00:00:56.270 --> 00:00:57.430
from our terminal.

16
00:00:57.440 --> 00:01:03.020
So for example if we type something into our terminal while our program is running that input is sent

17
00:01:03.020 --> 00:01:09.650
to standard in our program can choose to optionally listen to that incoming input and do something with

18
00:01:09.650 --> 00:01:17.010
it then ever our program decides to do a console log or throw an error it's going to emit this information

19
00:01:17.310 --> 00:01:23.610
over the other two channels standard out and standard air standard out is used to communicate any normal

20
00:01:23.700 --> 00:01:24.500
logs.

21
00:01:24.510 --> 00:01:29.730
So like if we just want to communicate some information to the outside world via a console log or something

22
00:01:29.730 --> 00:01:36.400
similar we use standard out for that whenever you call a console log inside of a node J.S. application

23
00:01:36.580 --> 00:01:43.310
standard out is what is being used to communicate that information back over to our terminal standard

24
00:01:43.340 --> 00:01:47.210
error is being used anytime that you throw an error of any kind.

25
00:01:47.210 --> 00:01:52.610
So if we throw an error or what to otherwise display some error text our process right some information

26
00:01:52.970 --> 00:01:59.810
to this standard error channel which then sends that error information back over to our terminal.

27
00:01:59.870 --> 00:02:04.970
So that's the basics of standard in standard out and standard air every single process that we create

28
00:02:05.030 --> 00:02:08.240
has its own three separate channels.

29
00:02:08.320 --> 00:02:11.380
So how does this relate to when we create a child process.

30
00:02:11.380 --> 00:02:16.930
Well essentially when we create a child process we essentially have our process making this thing down

31
00:02:16.930 --> 00:02:17.420
here.

32
00:02:17.530 --> 00:02:21.700
And in this scenario the standard in and standard out and standard errors that are being created for

33
00:02:21.700 --> 00:02:26.080
the child process don't have anywhere to send their information to.

34
00:02:26.080 --> 00:02:29.160
So these are kind of just like blank lines that go out into nothingness.

35
00:02:29.170 --> 00:02:34.830
Nothing is waiting to receive the output from Standard and or standard error or give input to standard

36
00:02:34.840 --> 00:02:38.900
in the purpose of that standard.

37
00:02:38.900 --> 00:02:45.220
I oh right here of inherit is really just saying when we create this child process take the standard

38
00:02:45.220 --> 00:02:51.100
in standard out and standard error that belong to our current process and essentially just wire all

39
00:02:51.100 --> 00:02:52.640
that stuff together.

40
00:02:52.780 --> 00:02:58.600
So if the child process puts out any normal log message it's going to be automatically forwarded on

41
00:02:58.660 --> 00:03:04.330
to our processes standard out which in turn gets sent back over to the terminal which is why we saw

42
00:03:04.360 --> 00:03:09.800
a console log from the what we call it test dot J.S. file.

43
00:03:09.850 --> 00:03:15.370
Same thing with standard error if we have any air from that child process it's going to get forwarded

44
00:03:15.370 --> 00:03:22.340
to our processes standard error which in turn is can be sent on to the terminal as well so that is the

45
00:03:22.340 --> 00:03:27.200
purpose of standard Io inherit if we do not pass in any value for that.

46
00:03:27.200 --> 00:03:33.710
So in other words if we remove that object altogether then now we are not doing that forwarding anymore.

47
00:03:33.710 --> 00:03:37.260
So if we now reran our program let's actually do that right now.

48
00:03:37.550 --> 00:03:41.820
So I'll run stop this with a control C and then restart it with.

49
00:03:42.070 --> 00:03:42.700
Watch it.

50
00:03:42.700 --> 00:03:43.170
Test.

51
00:03:43.240 --> 00:03:44.090
Yes.

52
00:03:44.140 --> 00:03:48.580
Now we're not going to see any console logs or any errors or anything like that because we are no longer

53
00:03:48.650 --> 00:03:53.850
forwarding that output information back over to our terminal.

54
00:03:53.900 --> 00:03:55.920
So that's a bit more on that options object.

55
00:03:55.920 --> 00:03:58.960
I'm going to undo that change and re save the file.

56
00:03:59.010 --> 00:04:01.790
Let's take another quick pause right here when we come back in just a moment.

57
00:04:01.800 --> 00:04:05.820
We'll discuss those three other methods that are available inside the child process module.
