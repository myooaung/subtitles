WEBVTT
1
00:00:00.280 --> 00:00:02.510
OK so we just talked about reference types.

2
00:00:02.550 --> 00:00:06.990
If you did not watch that video definitely go back and check it out because it's really important for

3
00:00:06.990 --> 00:00:08.030
this video.

4
00:00:08.070 --> 00:00:09.570
So we're talking about concert.

5
00:00:09.690 --> 00:00:12.480
We saw a concert early on when we defined variables.

6
00:00:12.510 --> 00:00:15.710
We saw we could use let's let X equals 34.

7
00:00:15.720 --> 00:00:17.620
We can change X at any point.

8
00:00:17.700 --> 00:00:20.720
X is now going to be five more.

9
00:00:20.730 --> 00:00:23.300
We just incremented X and it did change.

10
00:00:23.400 --> 00:00:27.960
If we instead use const to define our variable constant we'll go with concert.

11
00:00:27.950 --> 00:00:35.320
City equals How about Lisbon city is now set to Lisbon.

12
00:00:35.390 --> 00:00:37.060
And if I change it.

13
00:00:37.160 --> 00:00:41.110
City equals London not okay.

14
00:00:41.150 --> 00:00:45.440
You cannot reassign or give a new value to a concert.

15
00:00:45.500 --> 00:00:51.680
So up until this point really the only use case for it has been things like this concert pi equals three

16
00:00:51.680 --> 00:00:57.680
point 1 4 1 5 9 where we know something is not going to change but that's about to change because as

17
00:00:57.680 --> 00:01:03.230
we just saw arrays are reference types which means that the actual array data is not the content that

18
00:01:03.230 --> 00:01:07.370
is stored in the slot in memory for each variable.

19
00:01:07.370 --> 00:01:09.000
Instead it is a reference.

20
00:01:09.020 --> 00:01:15.230
So as long as the reference doesn't change the internals the insides of an array can change even if

21
00:01:15.230 --> 00:01:16.590
you're using const.

22
00:01:16.970 --> 00:01:18.200
So here's an example.

23
00:01:18.350 --> 00:01:25.580
We have an array called my eggs and it's two items long brown and brown those two brown eggs and this

24
00:01:25.580 --> 00:01:31.730
is a representation of what it would look like where the variable my eggs is referencing it's pointing

25
00:01:31.730 --> 00:01:35.480
to some content or to the actual array with all the values in it.

26
00:01:35.810 --> 00:01:38.910
But this pointer is what is not supposed to change.

27
00:01:38.960 --> 00:01:44.420
This has to stay constant what happens over here doesn't matter because the only thing stored in my

28
00:01:44.420 --> 00:01:47.030
eggs is the reference.

29
00:01:47.030 --> 00:01:48.190
So we can change it.

30
00:01:48.200 --> 00:01:55.730
We can now add in to my eggs we can push even though it's const it's not let we use const we can still

31
00:01:55.730 --> 00:02:01.890
change the contents because we're not updating or altering this reference one more time.

32
00:02:02.030 --> 00:02:08.150
I could set my eggs of zero to be green change the first value in there I'm manipulating values I'm

33
00:02:08.150 --> 00:02:14.960
adding in I could empty out the array as long as I don't reassign my eggs to some other array which

34
00:02:14.960 --> 00:02:20.630
is what I did right here I said my eggs equals a new array with blue and pink not allowed I would get

35
00:02:20.630 --> 00:02:26.510
this error assignment to constant variable because we change the reference the arrow used to be pointing

36
00:02:26.510 --> 00:02:33.260
to this array in memory but then I said forget that one my eggs is now a new array and so it's pointing

37
00:02:33.260 --> 00:02:38.990
to this array now it doesn't even get that far because it throws an error but this is visually what

38
00:02:38.990 --> 00:02:43.100
could be happening behind the scenes and you're not allowed to do that with const you can not change

39
00:02:43.100 --> 00:02:48.770
that reference but again you can change anything inside that array as long as you don't sever that one

40
00:02:48.770 --> 00:02:56.120
tie that arrow so we can play around with it as we saw with a variable if we did pi and we tried to

41
00:02:56.120 --> 00:03:04.430
change PI we can't do that pi is now forty five not allowed I can't do pi plus equals one can't do that

42
00:03:04.580 --> 00:03:10.730
but if we're working with an array let's go with foods and it starts with milk that's the only item

43
00:03:10.730 --> 00:03:17.120
in there I can do whatever I want with the foods array with the content in here I could empty it out

44
00:03:17.450 --> 00:03:24.420
I can push onto it so let's push food step push chocolate no problem.

45
00:03:24.440 --> 00:03:29.460
It works because the reference is staying the same foods.

46
00:03:30.020 --> 00:03:33.410
Let's do an unchecked milk chocolate.

47
00:03:33.410 --> 00:03:39.360
How about tortillas up need to make sure I can spell foods.

48
00:03:39.830 --> 00:03:40.430
And there we go.

49
00:03:40.480 --> 00:03:50.070
We've updated foods I could remove everything from their foods that pop three times and we still have

50
00:03:50.070 --> 00:03:51.020
the same reference.

51
00:03:51.030 --> 00:03:57.300
Even though it's completely empty the actual array itself the reference of that arrow is unchanged but

52
00:03:57.300 --> 00:03:59.340
I can not do this.

53
00:03:59.340 --> 00:04:05.310
Food equals a new array definitely cannot do that even though it's already an empty array.

54
00:04:05.430 --> 00:04:11.010
I'm making a new empty array here which means and new Arrow a new place in memory or a new reference

55
00:04:11.040 --> 00:04:12.840
not allowed.

56
00:04:12.840 --> 00:04:16.950
So food is the original empty array and I can again add onto it.

57
00:04:16.950 --> 00:04:22.890
I can do whatever I want now because of this behavior because arrays are reference types constants used

58
00:04:23.010 --> 00:04:23.940
all the time.

59
00:04:23.940 --> 00:04:30.300
When we work with arrays all the time far more often than light unless you have some good reason that

60
00:04:30.300 --> 00:04:34.590
your variable would need to point to different entirely different arrays.

61
00:04:34.620 --> 00:04:39.780
Most of the time you just need a variable for your array and the array might change but you're not going

62
00:04:39.780 --> 00:04:41.750
to just point to some new Array.

63
00:04:41.790 --> 00:04:46.800
It's possible you're not saying that you could only use cons for the rest of your life with arrays but

64
00:04:46.800 --> 00:04:52.510
you'll see the majority of the array variables in the real world and tutorials.

65
00:04:52.650 --> 00:04:54.450
Most of them will be done with const.

66
00:04:54.570 --> 00:04:58.940
So from here on out that's what I'll be doing most of the time unless there's a good reason to use it.

67
00:04:59.130 --> 00:05:04.050
And then when we're working with primitive types things like numbers I'll use const when appropriate

68
00:05:04.080 --> 00:05:05.780
but a lot of the time we need light.

69
00:05:05.910 --> 00:05:07.960
If those values need to change.

70
00:05:08.190 --> 00:05:12.150
All right so that's pretty much it for this video for reference types.

71
00:05:12.150 --> 00:05:15.130
Again we can change the internals of the array.

72
00:05:15.240 --> 00:05:19.680
We just can't point to a new array or to a string out of nowhere or to a Boolean.

73
00:05:19.680 --> 00:05:21.690
It has to be that one reference in memory.
