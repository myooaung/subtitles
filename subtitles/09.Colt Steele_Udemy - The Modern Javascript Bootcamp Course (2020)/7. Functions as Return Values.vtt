WEBVTT
1
00:00:00.210 --> 00:00:05.580
In the last video we talked about one type of higher order function where a function accepts another

2
00:00:05.580 --> 00:00:07.290
function as an argument.

3
00:00:07.290 --> 00:00:11.430
Now let's talk about returning a function from within a function.

4
00:00:11.520 --> 00:00:13.060
So I have an example of this.

5
00:00:13.110 --> 00:00:20.430
It's a little bit trickier to explain but you can kind of think of these functions as function factories.

6
00:00:20.430 --> 00:00:26.640
The function itself returns another function and in the examples I'll show you the functions on the

7
00:00:26.640 --> 00:00:33.060
outside the outer functions are making new versions of a function they're tweaking a function and returning

8
00:00:33.060 --> 00:00:33.170
it.

9
00:00:33.180 --> 00:00:35.100
So you can use it.

10
00:00:35.160 --> 00:00:37.130
So let's start with a simple example.

11
00:00:37.320 --> 00:00:44.640
We're going to make a function which we'll call multiply by and when I call multiply by three.

12
00:00:44.970 --> 00:00:49.980
It will return a function that triples a value any anytime I call it.

13
00:00:49.980 --> 00:00:57.330
So I would do something like this const triple equals multiplied by three and then I could call triple

14
00:00:57.480 --> 00:01:06.630
on five and that would give me 15 I could make another function from the same factory const double equals

15
00:01:06.660 --> 00:01:08.800
multiply by two.

16
00:01:08.910 --> 00:01:14.940
And that returns to me a new function where I can call it in passing a number and it will be multiplied

17
00:01:14.940 --> 00:01:15.660
by two.

18
00:01:15.660 --> 00:01:24.690
So if I called double of eight I get sixteen so this multiplied by function returns a new function that

19
00:01:24.690 --> 00:01:26.230
we can save and use.

20
00:01:26.280 --> 00:01:33.900
So we'll start by defining it multiply by and it accepts a single number and we want it to return a

21
00:01:33.900 --> 00:01:35.030
function.

22
00:01:35.040 --> 00:01:40.620
Now this is where function expressions come in because we don't have to declare a separate function

23
00:01:40.620 --> 00:01:49.290
first and then return that I can just write return function right here an anonymous function like we've

24
00:01:49.290 --> 00:01:57.090
seen where we could write const X equals function like this a function expression there's no name we

25
00:01:57.090 --> 00:02:01.740
don't have to have a name because we're returning this and we'll captured in a variable.

26
00:02:01.740 --> 00:02:04.990
So this doesn't work just yet it does return a function.

27
00:02:05.070 --> 00:02:13.560
And if I put something in here console dot log high we can call this if I run it over here if I call

28
00:02:13.560 --> 00:02:19.380
multiply by I don't even need to pass in our numbers we're not using it and I saved the result to a

29
00:02:19.380 --> 00:02:27.780
variable we'll just call it mystery equals multiply by if we look at mystery it holds a function and

30
00:02:27.780 --> 00:02:31.000
if I execute it it runs this function.

31
00:02:31.080 --> 00:02:36.840
This was the return value we could have done this on two separate lines I could have written a function

32
00:02:36.840 --> 00:02:49.290
in here like const F equals function console dot log floor and then I can return f that also works if

33
00:02:49.290 --> 00:02:50.560
I do the same thing.

34
00:02:50.730 --> 00:02:56.160
Mystery equals multiply by and now I take a look at mystery it holds a function and I can execute it

35
00:02:56.340 --> 00:03:01.800
but I think it's easier just to return it at the same time because we're not using it in this function

36
00:03:01.830 --> 00:03:04.080
we're simply returning it that's it.

37
00:03:04.770 --> 00:03:05.000
Okay.

38
00:03:05.030 --> 00:03:11.700
So to actually implement multiply by where we accept a number what we want to do is return a function

39
00:03:12.240 --> 00:03:21.840
that also accepts a single argument we'll just call it X and we want to return in that function x times

40
00:03:21.980 --> 00:03:22.490
num.

41
00:03:22.680 --> 00:03:30.370
So let's think about how this works if I call multiply by with the number three numbers three and it's

42
00:03:30.370 --> 00:03:33.180
going to return this function right here.

43
00:03:33.340 --> 00:03:36.970
So let's just copy this on its own paste it down here.

44
00:03:36.970 --> 00:03:43.870
This won't stand as valid code but if we just ignore that and think of how it works this function has

45
00:03:43.870 --> 00:03:45.370
num set to 3.

46
00:03:45.430 --> 00:03:47.820
That's what we passed in 4 num.

47
00:03:47.890 --> 00:03:54.640
So now if I have this stored in a variable like I did up here and I call this function and I pass in

48
00:03:54.640 --> 00:03:57.380
some value let's say it stored in a variable.

49
00:03:57.580 --> 00:03:59.410
If we pass in 3 I would call this triple.

50
00:03:59.410 --> 00:04:07.460
So constant triple equals this function if I call triple on six x will be six.

51
00:04:07.570 --> 00:04:16.060
And it returns six times three which gives me eighteen but if I instead called multiply by five num

52
00:04:16.120 --> 00:04:17.220
would be five.

53
00:04:17.320 --> 00:04:24.860
So it would return this function right here where we accept a single argument and we return that number

54
00:04:24.870 --> 00:04:26.730
times five.

55
00:04:26.730 --> 00:04:31.600
So when I call it I pass in to it returns two times five which gives me ten.

56
00:04:31.680 --> 00:04:36.810
So this function is a factory for making more functions it modifies them.

57
00:04:36.810 --> 00:04:42.240
I like to think of it as a little conveyor belt going by and it's stamping them with a different number

58
00:04:42.390 --> 00:04:43.830
or a different value.

59
00:04:43.890 --> 00:04:48.480
In this case num it impacts how this actual function here behaves.

60
00:04:48.480 --> 00:04:51.900
If we pass an eight and we'll get back a function that multiplies by eight.

61
00:04:52.470 --> 00:04:57.350
So let's actually play with this now we have multiplied by everything looks good here.

62
00:04:57.360 --> 00:04:59.850
We're returning a new function return x times num.

63
00:05:01.110 --> 00:05:08.630
Let's make our triple function so const triple equals multiply by three that gives me a new function.

64
00:05:08.640 --> 00:05:11.910
If we look at triple we have a function.

65
00:05:12.270 --> 00:05:19.170
And if I call it on a number like six we get 18 I call it on two we get six I call it on nine we get

66
00:05:19.170 --> 00:05:23.310
twenty seven it's multiplying everything that I pass in by three.

67
00:05:23.610 --> 00:05:32.100
Now let's make another one of these we'll call this double we'll multiply by two and if I called double

68
00:05:32.520 --> 00:05:37.550
on five I get ten triple on five I get 15.

69
00:05:37.620 --> 00:05:40.850
So this factory gave us two different functions.

70
00:05:40.860 --> 00:05:46.850
They all followed the same pattern but it plugged in a different number and I would do one more.

71
00:05:46.860 --> 00:05:50.700
But other than triple double I guess quadruples not too bad.

72
00:05:50.700 --> 00:05:54.210
How about const have to cut it in half.

73
00:05:54.810 --> 00:06:01.840
So multiply by not mutation event multiply by zero point five.

74
00:06:01.980 --> 00:06:03.260
Let's try that.

75
00:06:03.270 --> 00:06:06.860
Have of six gives me three of nine.

76
00:06:06.870 --> 00:06:08.790
I get 4.5.

77
00:06:08.810 --> 00:06:09.030
All right.

78
00:06:09.060 --> 00:06:10.630
So this is our first example.

79
00:06:10.710 --> 00:06:14.830
If you're struggling with this I told you understand this is always a tough one to teach.

80
00:06:14.880 --> 00:06:20.100
It's kind of a different way of thinking about functions but remember that functions are just values

81
00:06:20.310 --> 00:06:25.600
that can be passed around whether as an argument like we saw in the last video or as a return value.

82
00:06:25.680 --> 00:06:30.620
And this multiply function is just changing the return value ever so slightly.

83
00:06:30.630 --> 00:06:36.600
Also remember how we talked about this idea of lexical scope a couple of videos ago a nested function

84
00:06:36.900 --> 00:06:40.660
has access to the scope of its parent function.

85
00:06:40.770 --> 00:06:42.860
Num is not defined in this function.

86
00:06:42.930 --> 00:06:50.250
It's defined up here but we have access to it and it's returned and num still has that value it persists.

87
00:06:50.250 --> 00:06:56.070
So if we passed in three num as always three in this function right here num is always two num it's

88
00:06:56.070 --> 00:06:57.800
always zero point five.

89
00:06:57.840 --> 00:07:00.330
So let's take a look at another example.

90
00:07:00.810 --> 00:07:05.750
What we're going to do is make this function which I'm calling make between func.

91
00:07:05.880 --> 00:07:11.090
It will return a function where we can check if a value is between two numbers.

92
00:07:11.100 --> 00:07:16.630
So I would call it like this make between function and maybe we can come up with a better name for this.

93
00:07:16.800 --> 00:07:20.140
Make between func 0 and 18.

94
00:07:20.550 --> 00:07:26.470
I'll save this to a variable concept is not adult is child.

95
00:07:27.180 --> 00:07:36.480
So this should return to me a function where if I call it with a number like five I get true because

96
00:07:36.480 --> 00:07:45.120
it's between 0 and 18 if I call it with something like 67 or 68 I should get false because it's not

97
00:07:45.120 --> 00:07:46.740
within that range.

98
00:07:46.770 --> 00:07:53.970
So we're making a factory for functions that serve to check if a value is between one number and another

99
00:07:53.970 --> 00:07:55.530
number.

100
00:07:55.530 --> 00:07:56.800
So I'll show you how it works.

101
00:07:56.900 --> 00:08:01.710
This probably very confusing just to see that explanation but we'll define our function we'll call it

102
00:08:01.740 --> 00:08:14.880
make between func and it will accept two numbers x and y and it needs to return a function in this function

103
00:08:14.880 --> 00:08:17.040
accepts a number.

104
00:08:17.340 --> 00:08:23.460
This is the return value function will pass a value into it and we want to compare that value to X and

105
00:08:23.460 --> 00:08:23.760
Y.

106
00:08:24.810 --> 00:08:31.190
So if num is between x and y that means it is greater than X and less than y.

107
00:08:31.290 --> 00:08:35.670
Or we could make it inclusive so it's greater than or equal to x less than or equal to y.

108
00:08:36.330 --> 00:08:46.560
So we could just write if num is greater than equal to x and num is less than or equal to y we could

109
00:08:46.560 --> 00:08:48.660
return true.

110
00:08:48.660 --> 00:08:52.680
We could do it on multiple lines like this return true else.

111
00:08:52.800 --> 00:08:58.530
We don't even need the else we can just write return false but we can also shorten this even more and

112
00:08:58.530 --> 00:09:06.760
just say return num greater than or equal to x and num less than or equal to y.

113
00:09:06.790 --> 00:09:09.300
This is a bully and expression it gives us true or false.

114
00:09:10.630 --> 00:09:16.780
So if we play around with this if we call make between func and I pass in 0 and 18 this returns to me

115
00:09:16.780 --> 00:09:24.000
a function where you can imagine x is 0 and Y is 18.

116
00:09:24.790 --> 00:09:34.290
So now I have this function stored in a variable potentially let's say it's called is child and then

117
00:09:34.290 --> 00:09:43.580
if I call is child with 17 num will be 17 and it's plugged in here is 17 greater than or equal to zero.

118
00:09:43.590 --> 00:09:46.440
Yes and is 17 less than or equal to 18.

119
00:09:46.440 --> 00:09:47.050
Yes.

120
00:09:47.130 --> 00:09:48.840
So this returns true.

121
00:09:48.900 --> 00:09:54.840
So we get true if I pass in a different value like ninety nine we would get false.

122
00:09:54.990 --> 00:10:00.930
So it's a factory for making these between functions to check if a value is between two numbers.

123
00:10:00.990 --> 00:10:08.880
So let's play around with it we'll do exactly what I just had is child equals make between func from

124
00:10:08.880 --> 00:10:21.710
0 to 18 and I'll call is child on 17 we get true if I call it on ninety nine we get false and we'll

125
00:10:21.710 --> 00:10:29.990
just do one more for good measure one true and thirty five false but we can now make a another between

126
00:10:29.990 --> 00:10:36.140
func we get a new return value let's do make between func which something we would want to check if

127
00:10:36.140 --> 00:10:38.440
a number is between one number and another.

128
00:10:38.600 --> 00:10:52.320
How about between 1990 and 2000 and we'll call this function is 90s so it doesn't really matter but

129
00:10:52.500 --> 00:10:56.130
call it that is 90s or is in 90s.

130
00:10:56.360 --> 00:10:59.390
So very poor very poor function name.

131
00:10:59.410 --> 00:11:07.590
Now if I call is in 90s they run my code and I pass in nineteen eighty nine.

132
00:11:07.690 --> 00:11:15.250
That's false but if I pass in 1992 through 1993 technically it includes two thousand because of the

133
00:11:15.250 --> 00:11:20.090
way I wrote it where it's less than or equal to and greater than or equal to.

134
00:11:20.200 --> 00:11:27.140
So we could rewrite it to not be inclusive or I could just say if it's between 1990 and 1999.

135
00:11:27.490 --> 00:11:29.590
So now we have a second function.

136
00:11:29.680 --> 00:11:35.950
It has the same behavior the same pattern the template of a function if you will but the x and y that

137
00:11:35.950 --> 00:11:37.540
have been plugged in are different.

138
00:11:38.350 --> 00:11:44.200
So this outer function is decorating or it's finalizing this function that's being returned.

139
00:11:44.230 --> 00:11:53.300
Let's do one more let's make a function called is nice outside outsider is nice whether and our range

140
00:11:53.300 --> 00:11:57.160
of temperatures I mean I use Fahrenheit for those of you who use Celsius.

141
00:11:57.170 --> 00:11:58.850
Go ahead and do that as well.

142
00:11:58.940 --> 00:12:04.550
We'll go from sixty five degrees to maybe like 80.

143
00:12:04.580 --> 00:12:06.950
It's a bit too hot for me start to sweat.

144
00:12:07.100 --> 00:12:18.900
So maybe seventy nine degrees let's say 60 to 79 degrees so make between funk between 60 and 79.

145
00:12:19.150 --> 00:12:27.580
I'll call it is nice weather if it's 45 degrees out we get false if it's 76 degrees we get true and

146
00:12:27.580 --> 00:12:31.300
if it's too hot if it's 98 degrees we get false.

147
00:12:31.450 --> 00:12:37.720
So three different functions that behave kind of similarly the same pattern of behavior but they have

148
00:12:37.720 --> 00:12:43.240
different values different men's and maxes that have been baked in to the actual function.

149
00:12:43.360 --> 00:12:49.450
So we've made a factory that returns a type of a function a pattern but they're all tweaked to be different

150
00:12:49.900 --> 00:12:51.590
just like we did up here as well.

151
00:12:51.610 --> 00:12:56.080
So this whole function return value thing can take a little bit to get used to.

152
00:12:56.140 --> 00:13:01.030
I would just take your time and don't panic about it if you're struggling with it like I said when I'm

153
00:13:01.030 --> 00:13:05.800
teaching in person this is always one of the topics that I noticed a lot of students take a while to

154
00:13:05.800 --> 00:13:06.880
wrap their head around.

155
00:13:07.030 --> 00:13:12.730
So play around with this and try modifying the code make your own versions come up with other functions

156
00:13:13.030 --> 00:13:18.880
instead of make between make a function called make less then or make greater than or make not equal

157
00:13:18.880 --> 00:13:20.830
to and play around with that.
