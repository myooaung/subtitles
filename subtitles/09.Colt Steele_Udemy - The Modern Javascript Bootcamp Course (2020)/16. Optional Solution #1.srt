1
00:00:01,090 --> 00:00:04,930
Well we now understand why this is kind of a bad approach or some bad code right here.

2
00:00:04,930 --> 00:00:08,530
So now we're gonna start to take a look at a couple of different ways to fix this code.

3
00:00:08,560 --> 00:00:12,270
We're going to ultimately refactor this into three different forms.

4
00:00:12,310 --> 00:00:16,450
The reason we're going to do such an exhaustive refactor is I just want you to see many different ways

5
00:00:16,450 --> 00:00:17,750
of writing out some code.

6
00:00:17,830 --> 00:00:23,680
Many different styles and we want to do kind of an analysis or a pros and cons of each different way.

7
00:00:23,680 --> 00:00:27,880
Moreover I really just want you to see different styles of writing code so that you kind of get a sense

8
00:00:27,880 --> 00:00:29,710
of what code to write on your own.

9
00:00:29,740 --> 00:00:33,820
There's always multiple ways of accomplishing something with JavaScript and it's just important for

10
00:00:33,820 --> 00:00:36,700
you to understand the different ways that you can do something.

11
00:00:36,700 --> 00:00:37,870
OK so let's get to it.

12
00:00:37,870 --> 00:00:40,580
Let's talk about the different ways that we're going to refactor this.

13
00:00:40,630 --> 00:00:44,350
So these are three different options three different ways we can go to kind of fix up the code that

14
00:00:44,350 --> 00:00:45,620
we have right now.

15
00:00:45,700 --> 00:00:48,660
The first two options are not really great solutions.

16
00:00:48,670 --> 00:00:50,750
They are not perfect by any means.

17
00:00:50,750 --> 00:00:52,520
They may have some really big drawbacks.

18
00:00:52,570 --> 00:00:56,030
Nonetheless I still want you to see these possible solutions.

19
00:00:56,110 --> 00:01:01,210
The third solution we're going to go over is in theory the right way to essentially do this stuff.

20
00:01:01,240 --> 00:01:03,410
So we are going to eventually look at the right way.

21
00:01:03,490 --> 00:01:08,080
But again I just want to show you some different options because these might be useful in some other

22
00:01:08,080 --> 00:01:11,860
context or some other project or something that you're going to work on in the future.

23
00:01:11,860 --> 00:01:13,530
We never really know.

24
00:01:13,540 --> 00:01:13,770
OK.

25
00:01:13,800 --> 00:01:18,200
So with option number one we're going to maintain a callback based approach.

26
00:01:18,250 --> 00:01:23,320
So right now we have a callback based approach because well we're using callbacks so we're going to

27
00:01:23,320 --> 00:01:28,390
use the same kind of callback based approach but we're going to make it work the way we expect.

28
00:01:28,420 --> 00:01:32,980
In other words we're going to get the correct ordering of data and correct console logs or the ordering

29
00:01:32,980 --> 00:01:39,270
of council logs at the very end of our function call or after our program runs that to do so we're going

30
00:01:39,270 --> 00:01:44,250
to create an array to store the results from each else that call.

31
00:01:44,250 --> 00:01:49,890
Then as we invoke each callback we're going to add the stats object that we get back to that array and

32
00:01:49,890 --> 00:01:54,000
then eventually when the arrays fall and we have all the data we ever expect to have in the correct

33
00:01:54,000 --> 00:01:59,760
order will then run some processing on it to actually log out every file name and whether or not is

34
00:01:59,760 --> 00:02:03,850
a file now saying that just by reading it from this note right here.

35
00:02:03,860 --> 00:02:05,320
Kind of unclear about what's going on.

36
00:02:05,330 --> 00:02:07,920
So quick diagram.

37
00:02:07,980 --> 00:02:08,180
All right.

38
00:02:08,190 --> 00:02:09,120
So here's the idea.

39
00:02:09,120 --> 00:02:14,010
We're still going to have the same kind of callback approach where we have this really mysterious ordering

40
00:02:14,010 --> 00:02:14,990
of callbacks.

41
00:02:15,030 --> 00:02:19,240
We have no idea ever what order these callbacks are going to be invoked in.

42
00:02:19,680 --> 00:02:25,290
So as a solution at the very start before we do any calls to step what so ever we're going to create

43
00:02:25,350 --> 00:02:31,820
an array that will call something like all stats the length of this array is going to be equal to the

44
00:02:31,820 --> 00:02:34,250
number of L stack calls we expect to have.

45
00:02:34,250 --> 00:02:41,260
So in this case for then inside that array every element is going to start off as normal.

46
00:02:41,260 --> 00:02:45,790
Now here's the trick we're going to kind of sit around and wait for the first callback to be invoked

47
00:02:46,090 --> 00:02:47,260
if we're going by this diagram.

48
00:02:47,260 --> 00:02:51,830
It'll be callback number three because the third callback is being vote.

49
00:02:51,940 --> 00:02:58,120
We're going to take the stats that we get back from that call and update the element at index 3 inside

50
00:02:58,120 --> 00:02:59,240
the array.

51
00:02:59,320 --> 00:03:05,240
And so I'm going to shove in my stats object into that thing or then going to run a little bit of code

52
00:03:05,450 --> 00:03:11,240
to check to see if there are any null values in the array still if there is still a null value inside

53
00:03:11,240 --> 00:03:11,520
of here.

54
00:03:11,540 --> 00:03:14,560
That means so we don't have all the data we expect to get.

55
00:03:14,600 --> 00:03:19,460
So we're going to say OK we don't have all the data we expect we're not going to do anything else.

56
00:03:19,490 --> 00:03:23,550
Well then sit around and wait for a little bit for the next callback to be invoked.

57
00:03:23,660 --> 00:03:26,690
So as he gets a B callback number two right here.

58
00:03:26,690 --> 00:03:32,520
So because the second callback got invoked we would go to index number two right here.

59
00:03:32,900 --> 00:03:39,530
Take the stats data that we got inside that callback and push it into index number two and then we would

60
00:03:39,680 --> 00:03:42,090
check to see if there's still any null values inside of here.

61
00:03:42,130 --> 00:03:43,050
Yep there are two.

62
00:03:43,130 --> 00:03:47,840
So we're not going run any further processing than we will repeat for number four.

63
00:03:47,840 --> 00:03:49,100
Still have no value.

64
00:03:49,100 --> 00:03:53,520
Repeat for number one and then we'll check to see if there are any null values.

65
00:03:53,520 --> 00:03:54,880
Now in this case nope.

66
00:03:54,950 --> 00:03:55,410
Normal.

67
00:03:55,470 --> 00:03:59,700
No more null values and that so that means that we have all the data we expect to ever get.

68
00:04:00,000 --> 00:04:04,530
And so then at that point time we could do some processing and say OK like let's iterate through this

69
00:04:04,530 --> 00:04:07,470
list of all stats we have all the data we expect to have.

70
00:04:07,500 --> 00:04:12,910
And it is in the same order as the original l stat calls that we made.

71
00:04:12,930 --> 00:04:15,250
Again this is one possible way to solve this.

72
00:04:15,270 --> 00:04:20,670
The reason that this is not super ideal is that well although the logic I just laid out here kind of

73
00:04:20,670 --> 00:04:26,250
makes sense and it works if we ever had something more complicated than this like maybe after doing

74
00:04:26,250 --> 00:04:31,920
the El stack call we had to do another asynchronous call for some other function we ever had to add

75
00:04:31,920 --> 00:04:33,950
on any additional layer of complexity.

76
00:04:34,020 --> 00:04:37,800
This solution would just start to get really confusing really quickly.

77
00:04:38,460 --> 00:04:42,480
So even though it works I'd still say it's not super ideal.

78
00:04:42,480 --> 00:04:46,940
Nonetheless I still want to show you how this solution we've put together so quick pause right here.

79
00:04:46,950 --> 00:04:48,980
We'll come back the next video and throw it together.

80
00:04:48,990 --> 00:04:50,820
This implementation really quickly.
