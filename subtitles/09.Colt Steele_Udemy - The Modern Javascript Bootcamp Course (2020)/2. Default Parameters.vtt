WEBVTT
1
00:00:00.330 --> 00:00:05.970
So the first of these new features we'll see has to do with adding default function parameter values.

2
00:00:05.970 --> 00:00:10.870
So we could do this in the past we just now have a newer more compact syntax to do it.

3
00:00:11.520 --> 00:00:12.440
Here's what I'm talking about.

4
00:00:12.450 --> 00:00:17.090
If we have a function make sure I'm in the right window I'll just go with our standard.

5
00:00:17.100 --> 00:00:23.040
Multiply two parameters X and Y we return X times Y.

6
00:00:23.100 --> 00:00:26.010
Right now if we call it with two parameters it works great.

7
00:00:26.010 --> 00:00:29.490
Actually these are arguments we're passing in to arguments.

8
00:00:29.490 --> 00:00:32.490
But if we leave one off we get not a number.

9
00:00:32.490 --> 00:00:36.860
And that's because Y is set to undefined when we don't specify a value.

10
00:00:36.900 --> 00:00:43.110
So if we wanted to have a default value for y if a user or another function call or developer does not

11
00:00:43.110 --> 00:00:46.890
pass in a second argument we want a default value.

12
00:00:46.890 --> 00:00:55.200
We could in the past do it this way we would manually check if type of Y equals undefined.

13
00:00:55.200 --> 00:01:01.260
And if you don't remember how type of works it does not return the actual value of undefined it returns

14
00:01:01.260 --> 00:01:03.390
a string containing the type.

15
00:01:03.390 --> 00:01:08.010
So if I declare a variable w the value of W is undefined.

16
00:01:08.010 --> 00:01:12.820
If I do type of W I get the string undefined.

17
00:01:12.870 --> 00:01:19.410
So I see people do this sometimes and this won't work because you're always going to get a string back

18
00:01:19.470 --> 00:01:20.420
from type of.

19
00:01:20.910 --> 00:01:22.610
So we need to make this a string.

20
00:01:23.370 --> 00:01:27.480
So if type of Y's undefined then we'll say y equals 1.

21
00:01:27.930 --> 00:01:29.610
And this is the older way of doing it.

22
00:01:30.360 --> 00:01:34.910
If we call multiply a four now we're multiplying four times one and we get four.

23
00:01:35.010 --> 00:01:39.870
But if we pass into value for y we get twelve in this case.

24
00:01:39.870 --> 00:01:46.710
So this is only happening if there is no Y there's a shorter way of doing this manual check before we

25
00:01:46.710 --> 00:01:53.040
get to the newer way the newer feature you could use a ternary operator where you set y equal to and

26
00:01:53.040 --> 00:02:00.670
then we have our condition type of Y equals the string undefined.

27
00:02:00.800 --> 00:02:05.660
Question mark if this is true we'll set y to be one.

28
00:02:05.660 --> 00:02:08.780
Otherwise y stays as y.

29
00:02:08.780 --> 00:02:14.340
So if you pass into value like fives for Y this is false so this doesn't run.

30
00:02:14.450 --> 00:02:17.900
This is what we end up setting y equal to y equals Y.

31
00:02:17.960 --> 00:02:20.450
If you don't pass something in and it's undefined.

32
00:02:20.450 --> 00:02:21.170
This is true.

33
00:02:21.500 --> 00:02:25.470
So we end up setting y equal to one.

34
00:02:25.520 --> 00:02:28.160
So this works but it's still pretty clunky.

35
00:02:28.460 --> 00:02:31.760
It's not very user friendly or developer friendly.

36
00:02:31.820 --> 00:02:37.020
We have a much better way thanks to the new default parameter syntax.

37
00:02:37.190 --> 00:02:39.130
It looks like this right here.

38
00:02:39.230 --> 00:02:45.860
So we define our function and right inside the parents where we are listing the parameters we can add

39
00:02:45.860 --> 00:02:49.550
a default with equal sign and then a default value.

40
00:02:49.550 --> 00:02:56.750
So here is the exact same thing except with a and b instead of x and y where B will default to 1 if

41
00:02:56.750 --> 00:02:58.590
a value is not passed in.

42
00:02:58.700 --> 00:03:06.210
So I could rewrite this if I commented out get rid of this entire line y equals 1.

43
00:03:06.800 --> 00:03:10.160
And this just means if no Y is passed in if it's undefined.

44
00:03:10.190 --> 00:03:11.580
Use this value.

45
00:03:11.930 --> 00:03:16.440
So I'll run my code again make sure it still works if we only pass an eight.

46
00:03:16.490 --> 00:03:20.120
We get eight if we pass in to an eight we get 16.

47
00:03:20.810 --> 00:03:22.440
Let's do one more example.

48
00:03:22.610 --> 00:03:26.930
If we were to define a function called Greece let's do it with an arrow.

49
00:03:26.930 --> 00:03:27.980
Function this time.

50
00:03:28.190 --> 00:03:33.410
So concept greets equals a function.

51
00:03:33.410 --> 00:03:38.480
And this function will take a person and then a greeting.

52
00:03:38.480 --> 00:03:42.270
And the way I want Greek to work is that I can call it like this.

53
00:03:42.300 --> 00:03:46.780
Greet Tim and then some greeting like Yo.

54
00:03:46.850 --> 00:03:47.710
And it will print out.

55
00:03:47.730 --> 00:03:50.800
Yo Tim with an exclamation point let's say.

56
00:03:50.870 --> 00:03:55.990
But if I just call greet Tim it should default the greeting to Hi.

57
00:03:56.000 --> 00:03:57.890
The string Hi.

58
00:03:57.950 --> 00:04:01.880
So all we need to do is say greeting equals Hi.

59
00:04:02.360 --> 00:04:06.380
And that will give it a default value if greeting is not passed.

60
00:04:06.380 --> 00:04:12.820
So we move this over a tad let's add in our simple console dot log.

61
00:04:13.430 --> 00:04:19.610
I'll do a template literal string and then we'll add in the person which is the first parameter and

62
00:04:19.610 --> 00:04:24.130
then the second actually I guess we want to say greeting first right.

63
00:04:24.170 --> 00:04:24.890
Yo Tim.

64
00:04:24.890 --> 00:04:25.820
Hi Tim.

65
00:04:25.820 --> 00:04:35.090
So well two greeting with our curly braces and then a comma person exclamation point let's try it.

66
00:04:35.460 --> 00:04:41.690
We'll do greet of Tim and won't pass anything in and we get high Tim.

67
00:04:42.060 --> 00:04:46.830
But if we do greet of Tim and yo we get yo Tim.

68
00:04:47.320 --> 00:04:49.370
Okay so that's another example.

69
00:04:49.380 --> 00:04:52.370
We're using a string this time as the default value.

70
00:04:52.380 --> 00:04:55.190
You can also do things with arrays or objects.

71
00:04:55.200 --> 00:04:58.510
If you wanted to I'll just make up a dumb example.

72
00:04:58.710 --> 00:05:07.470
If we have a function called Constant floor and let's say there are two parameters and why we'll default

73
00:05:07.470 --> 00:05:08.820
to the array one two three

74
00:05:12.310 --> 00:05:14.890
let's just console log X and Y.

75
00:05:15.850 --> 00:05:22.210
So this does absolutely nothing but I just want to show you that we can use an array or an object or

76
00:05:22.210 --> 00:05:31.030
any other value in JavaScript as the default value so let's call blah with one and we can see that X

77
00:05:31.030 --> 00:05:31.710
is one.

78
00:05:31.870 --> 00:05:32.890
Is the array.

79
00:05:32.890 --> 00:05:37.950
But if I pass in 1 and 3 Now X is one and Y is three.

80
00:05:38.080 --> 00:05:43.510
One really important note about default parameters is that the order absolutely matters.

81
00:05:43.510 --> 00:05:49.510
So if I add in a third parameter here let's say for Grete I want it person greeting and then I don't

82
00:05:49.510 --> 00:05:57.390
know punctuation which is this exclamation point at the end if I want it to default to exclamation point.

83
00:05:57.390 --> 00:06:04.620
That's fine I can do this if I call Grete right now and I only pass in oh I need to update this so that

84
00:06:04.620 --> 00:06:13.350
I'm actually using the exclamation point or punctuation if I call great again and I pass in on yeah

85
00:06:14.700 --> 00:06:17.280
we get high on Yeah with an exclamation point.

86
00:06:17.580 --> 00:06:24.240
So both of those default parameters kicked in greeting is high punctuation is exclamation point but

87
00:06:24.240 --> 00:06:25.480
it does not work.

88
00:06:25.530 --> 00:06:32.940
Of course if I tried to pass in person and punctuation like this the way that they are interpreted the

89
00:06:32.940 --> 00:06:38.820
way that JavaScript knows which one needs to have a default value is purely based off of the order you

90
00:06:38.820 --> 00:06:39.700
pass them in.

91
00:06:39.910 --> 00:06:44.860
So there's no way for me to say here I want to pass in person as on.

92
00:06:45.150 --> 00:06:50.240
And punctuation as a question mark and use the default greeting.

93
00:06:50.310 --> 00:06:51.600
It doesn't work that way.

94
00:06:51.660 --> 00:06:56.820
So all the default parameters also need to come at the end of your parameter list.

95
00:06:56.880 --> 00:07:01.330
You can't make the first thing default and then have non default parameters afterwards.

96
00:07:01.860 --> 00:07:07.280
So if you went back to multiply this example I couldn't do this.

97
00:07:07.410 --> 00:07:16.130
X equals 1 and then just regular y if I try that and I multiply two what happens here.

98
00:07:16.130 --> 00:07:23.930
Well X is going to be two and Y is undefined so there's no default for Y if I pass in two numbers it

99
00:07:23.930 --> 00:07:29.780
works fine but the default is never going to work the way I want it to work unless I'm fine with Y being

100
00:07:29.780 --> 00:07:30.700
undefined as well.

101
00:07:31.310 --> 00:07:37.010
So this is not something you really see and it's not something I recommend you do your default parameters

102
00:07:37.010 --> 00:07:38.280
come at the end.

103
00:07:38.570 --> 00:07:39.520
And that's pretty much it.

104
00:07:39.560 --> 00:07:44.390
So you can have as many as you want although if you're finding yourself adding a ton of defaults to

105
00:07:44.390 --> 00:07:49.460
your parameter list there's probably a better way of writing the function but it's a really nice addition

106
00:07:49.790 --> 00:07:55.520
just new syntax compared to doing something like this where you're manually checking for type so that's

107
00:07:55.520 --> 00:07:55.790
it.

108
00:07:55.790 --> 00:07:58.460
That's the newer way of adding default parameters.
