WEBVTT
1
00:00:01.660 --> 00:00:04.623
The next piece that we'll set up in our controllers will be the create,

2
00:00:04.623 --> 00:00:08.847
update, and delete API endpoints for the sessions and the speakers.

3
00:00:08.847 --> 00:00:12.763
So I've opened up the SessionsController, and we'll go ahead and start there.

4
00:00:12.763 --> 00:00:15.724
Let's begin by creating the create method,

5
00:00:15.724 --> 00:00:17.968
so this will create a new session,

6
00:00:17.968 --> 00:00:22.188
and if you pass a session info to the API endpoint,

7
00:00:22.188 --> 00:00:25.413
it'll create a new session into the database.

8
00:00:25.413 --> 00:00:30.153
At the bottom of the controller, I'm simply going to add this new method.

9
00:00:30.153 --> 00:00:34.095
We'll import any missing classes, and let's take a look at what's happening.

10
00:00:34.095 --> 00:00:38.256
So the first thing that you should notice is that we're using an @PostMapping.

11
00:00:38.256 --> 00:00:41.410
This is saying that we're requiring the HTTP verb POST

12
00:00:41.410 --> 00:00:44.474
to be presented with this API call.

13
00:00:44.474 --> 00:00:47.744
We did not give it a request mapping because,

14
00:00:47.744 --> 00:00:51.103
essentially, we're posting to the base part of the class,

15
00:00:51.103 --> 00:00:56.166
which is the api/v1/sessions endpoint, using the POST verb.

16
00:00:56.166 --> 00:00:57.798
Now here's where it will get interesting.

17
00:00:57.798 --> 00:01:02.807
In the create parameter section, we've had an @RequestBody annotation,

18
00:01:02.807 --> 00:01:05.375
and then we have a session object that's passed in.

19
00:01:05.375 --> 00:01:09.042
What is happening here is Spring MVC is taking in all of

20
00:01:09.042 --> 00:01:12.731
the attributes in a JSON payload and automatically

21
00:01:12.731 --> 00:01:15.311
marshaling them into a session object.

22
00:01:15.311 --> 00:01:19.179
Once it does this, we can simply pass that to our SessionRepository,

23
00:01:19.179 --> 00:01:24.299
which is part of Spring Data JPA, and we can save and flush that.

24
00:01:24.299 --> 00:01:27.358
A quick note on save and flush.

25
00:01:27.358 --> 00:01:29.571
When you're using JPA and entities,

26
00:01:29.571 --> 00:01:32.081
you can save objects as you're working with it,

27
00:01:32.081 --> 00:01:36.408
but it actually doesn't get committed to the database until you flush it.

28
00:01:36.408 --> 00:01:39.178
So the SessionRepository and the JPA repositories,

29
00:01:39.178 --> 00:01:39.964
in general,

30
00:01:39.964 --> 00:01:43.742
provide this one method that will do the save and the flush all

31
00:01:43.742 --> 00:01:47.593
at once as you pass in JPA entities to it.

32
00:01:47.593 --> 00:01:51.056
The next endpoint I'm going to create is the DELETE endpoint.

33
00:01:51.056 --> 00:01:53.184
Here's the method implementation for that.

34
00:01:53.184 --> 00:01:55.137
Let's talk about the annotations.

35
00:01:55.137 --> 00:02:00.711
The @RequestMapping is specifying that you need to pass in an id similar to

36
00:02:00.711 --> 00:02:04.640
what we did on the GET saying that you have to have an id,

37
00:02:04.640 --> 00:02:08.199
but we're also adding a different HTTP method to this

38
00:02:08.199 --> 00:02:10.416
using the request method DELETE.

39
00:02:10.416 --> 00:02:16.773
So this requires the HTTP verb DELETE presented with this API endpoint.

40
00:02:16.773 --> 00:02:19.511
You might ask why we don't just call @DeleteMapping,

41
00:02:19.511 --> 00:02:25.578
and that's because Spring only provides @GetMappings and @PostMappings.

42
00:02:25.578 --> 00:02:26.949
If you use a different verb,

43
00:02:26.949 --> 00:02:30.867
you have to specify it in the RequestMapping attributes.

44
00:02:30.867 --> 00:02:33.882
Again, the parameter for the DELETE takes in an id,

45
00:02:33.882 --> 00:02:36.328
and this is pulled off of the PathVariable,

46
00:02:36.328 --> 00:02:38.497
similar to the GET.

47
00:02:38.497 --> 00:02:41.676
And once we have the id of the record that we're going to delete,

48
00:02:41.676 --> 00:02:47.124
we can, again, call the Spring Data JPA repository to delete it by the id.

49
00:02:47.124 --> 00:02:48.736
I've added a comment here,

50
00:02:48.736 --> 00:02:53.334
and this is just applicable to anytime you're deleting records in a

51
00:02:53.334 --> 00:02:57.668
database with JPA that you'll have to deal with cascades.

52
00:02:57.668 --> 00:03:00.254
So for example, if the session has children records,

53
00:03:00.254 --> 00:03:02.506
this would not allow it to delete.

54
00:03:02.506 --> 00:03:05.255
We'll get a foreign key constraint violation when we

55
00:03:05.255 --> 00:03:07.066
issue the DELETE call to the database.

56
00:03:07.066 --> 00:03:10.671
One thing that you can do for extra credit or homework

57
00:03:10.671 --> 00:03:14.980
would be to put in logic that allows the deleting of the

58
00:03:14.980 --> 00:03:17.253
children records for sessions.

59
00:03:17.253 --> 00:03:18.858
And there's a few ways you can do this.

60
00:03:18.858 --> 00:03:20.761
I'm not going to give you any hints on that,

61
00:03:20.761 --> 00:03:24.838
but it'll give you the ability to research it and try a few things on your own.

62
00:03:24.838 --> 00:03:28.738
But just keep in mind that this will only delete session repositories

63
00:03:28.738 --> 00:03:33.407
without any children records at this current implementation.

64
00:03:33.407 --> 00:03:38.662
Finally, let's look at an implementation for updating a session record.

65
00:03:38.662 --> 00:03:42.116
So I've pasted in the actual update implementation.

66
00:03:42.116 --> 00:03:44.423
I'm going to open the screen here so we have a little

67
00:03:44.423 --> 00:03:46.119
bit more room to see what's going on.

68
00:03:46.119 --> 00:03:50.615
First, let's begin with the @RequestMapping annotation.

69
00:03:50.615 --> 00:03:54.353
Again, we're requiring the id on the URL,

70
00:03:54.353 --> 00:03:57.058
similar to the DELETE and the GET endpoint.

71
00:03:57.058 --> 00:04:02.838
And at this point, we're changing the method to an HTTP verb PUT.

72
00:04:02.838 --> 00:04:04.944
One note on REST implementations.

73
00:04:04.944 --> 00:04:08.542
When you're updating a record, you have two verbs that you can choose from.

74
00:04:08.542 --> 00:04:11.743
You can choose from the PUT and the PATCH verb.

75
00:04:11.743 --> 00:04:14.199
It's kind of up to you how you want to implement them.

76
00:04:14.199 --> 00:04:14.956
But typically,

77
00:04:14.956 --> 00:04:20.636
the PUT will replace all of the attributes on the record that you're updating,

78
00:04:20.636 --> 00:04:26.101
and the PATCH will allow just a portion of the attributes to be updated.

79
00:04:26.101 --> 00:04:30.532
So this implementation will take all of the attributes in on the request body

80
00:04:30.532 --> 00:04:35.542
for that session and replace them all on the database record.

81
00:04:35.542 --> 00:04:39.478
Jumping down to line 42 here, let's take a look at what's happening.

82
00:04:39.478 --> 00:04:44.444
So in order to update a record, we first need to get the existing one.

83
00:04:44.444 --> 00:04:48.387
So we're asking the SessionRepository to find the record by the id,

84
00:04:48.387 --> 00:04:51.413
which is coming off of the URL parameter.

85
00:04:51.413 --> 00:04:54.463
We're storing it in a session variable called existingSession,

86
00:04:54.463 --> 00:04:58.727
and next, I'm using the BeanUtils object,

87
00:04:58.727 --> 00:05:01.122
which we still need to import,

88
00:05:01.122 --> 00:05:05.599
and the BeanUtils object takes the existingSession and

89
00:05:05.599 --> 00:05:09.850
copies the incoming session data onto it.

90
00:05:09.850 --> 00:05:13.824
The third parameter on the copyProperties method allows us to

91
00:05:13.824 --> 00:05:18.341
ignore properties on the entities or Java object that we do not

92
00:05:18.341 --> 00:05:21.337
want to copy over from one to the other.

93
00:05:21.337 --> 00:05:21.965
In this case,

94
00:05:21.965 --> 00:05:26.349
we want to ignore the session_id attribute because that's the primary key,

95
00:05:26.349 --> 00:05:28.508
and we don't want to replace it.

96
00:05:28.508 --> 00:05:32.898
If you don't ignore it, you'll essentially copy null onto the primary key.

97
00:05:32.898 --> 00:05:35.813
And when you go to update that onto the database,

98
00:05:35.813 --> 00:05:40.842
that will cause an exception to occur because the primary key cannot be null.

99
00:05:40.842 --> 00:05:41.769
And finally,

100
00:05:41.769 --> 00:05:46.822
we're using the old trusty saveAndFlush method again on the existing session,

101
00:05:46.822 --> 00:05:52.939
which has now been updated with our attributes on our Session JPA repository.

102
00:05:52.939 --> 00:05:57.063
I've added a couple of comments here at the top of the method

103
00:05:57.063 --> 00:05:59.732
implementation just to kind of keep in mind.

104
00:05:59.732 --> 00:06:03.609
First, because this is a PUT, we're expecting all the attributes to be passed in.

105
00:06:03.609 --> 00:06:08.313
If they're not all passed in, those attributes will be updated with null.

106
00:06:08.313 --> 00:06:12.317
If you only need to update certain attributes of your JPA entity,

107
00:06:12.317 --> 00:06:16.782
you should look at implementing the patch version of this update.

108
00:06:16.782 --> 00:06:20.647
And finally, we're not doing any kind of validation.

109
00:06:20.647 --> 00:06:21.871
And since we're requiring all the attributes,

110
00:06:21.871 --> 00:06:24.792
it would probably make sense to check that they're all there.

111
00:06:24.792 --> 00:06:27.715
If they're not, you could return a 400,

112
00:06:27.715 --> 00:06:31.833
which would indicate a bad payload passed to the update API endpoint,

113
00:06:31.833 --> 00:06:32.898
and that's it.

114
00:06:32.898 --> 00:06:35.329
If we take a look at our actual controller now,

115
00:06:35.329 --> 00:06:38.134
we have a full CRUD controller for the sessions.

116
00:06:38.134 --> 00:06:42.654
We have a LIST, a GET, a CREATE, a DELETE,

117
00:06:42.654 --> 00:06:43.706
and an UPDATE,

118
00:06:43.706 --> 00:06:50.073
and this fills out all of our CRUD operations for a proper REST resource,

119
00:06:50.073 --> 00:06:52.096
which in this case, is Sessions.

120
00:06:52.096 --> 00:06:54.344
So again, it's time to pause the video.

121
00:06:54.344 --> 00:06:57.839
I want you to update the SpeakersController with a CREATE,

122
00:06:57.839 --> 00:07:01.478
UPDATE, and DELETE method, similar to what we've done here for the Sessions.

123
00:07:01.478 --> 00:07:04.776
And once you're done, go ahead and turn the video back on,

124
00:07:04.776 --> 00:07:10.337
and we can check my solution with what you've come up with.

125
00:07:10.337 --> 00:07:14.348
Okay, here's what I have for the SpeakersController.

126
00:07:14.348 --> 00:07:16.583
It should look very similar to the SessionsController.

127
00:07:16.583 --> 00:07:19.216
We have a create method implemented.

128
00:07:19.216 --> 00:07:21.734
The only difference is that we're working with Speaker

129
00:07:21.734 --> 00:07:24.046
objects rather than Session objects.

130
00:07:24.046 --> 00:07:29.319
The DELETE method is doing something very similar, just deleting by the id.

131
00:07:29.319 --> 00:07:34.222
Again, note that we're using speakerRepository rather than the sessionRepository.

132
00:07:34.222 --> 00:07:34.901
And finally,

133
00:07:34.901 --> 00:07:38.945
the update is doing pretty much the same thing as the

134
00:07:38.945 --> 00:07:41.664
session update with the main difference that we're using

135
00:07:41.664 --> 00:07:45.520
the Speaker on the RequestBody, and in the ignoreProperties,

136
00:07:45.520 --> 00:07:53.104
we're ignoring the primary key of speaker_id rather than session_id.

137
00:07:53.104 --> 00:07:53.844
At this point,

138
00:07:53.844 --> 00:07:57.003
we pretty much have our micro service conference API

139
00:07:57.003 --> 00:08:03.000
app coded up and ready to test out. That's what we'll do, coming up next!

