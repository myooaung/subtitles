1
00:00:01,434 --> 00:00:03,556
I'm back in the application.properties file,

2
00:00:03,556 --> 00:00:05,716
and I want to adjust the database connection info.

3
00:00:05,716 --> 00:00:08,501
Maybe I'm getting ready to deploy to production,

4
00:00:08,501 --> 00:00:11,544
or maybe my database got moved, or something has changed,

5
00:00:11,544 --> 00:00:13,990
and I need to deal with it.

6
00:00:13,990 --> 00:00:17,157
The first thing that you should take note of is that the database URL

7
00:00:17,157 --> 00:00:20,492
and credentials are currently hard coded into the app.

8
00:00:20,492 --> 00:00:22,846
This info is your production database info,

9
00:00:22,846 --> 00:00:25,342
and you check your code into a public Git repository,

10
00:00:25,342 --> 00:00:26,756
all of the sudden,

11
00:00:26,756 --> 00:00:30,741
everyone has credentials and access to your production database.

12
00:00:30,741 --> 00:00:34,117
So the best way to solve this is to simply not hard code your

13
00:00:34,117 --> 00:00:37,467
database info in the application.properties file.

14
00:00:37,467 --> 00:00:41,365
Let's go ahead and move it to an external environment variable.

15
00:00:41,365 --> 00:00:45,995
Spring Boot handles property placeholders in the application property file.

16
00:00:45,995 --> 00:00:51,930
First, I'm going to copy the URL and remove it from the app properties file.

17
00:00:51,930 --> 00:00:54,885
Next, I'm going to replace the value with this.

18
00:00:54,885 --> 00:00:58,214
This tells Spring to look for a property called DB_URL and

19
00:00:58,214 --> 00:01:01,072
set its value on the datasource.url.

20
00:01:01,072 --> 00:01:03,529
In order to do this,

21
00:01:03,529 --> 00:01:06,864
we need to set up an environment variable to handle that URL.

22
00:01:06,864 --> 00:01:10,789
Once that's done, none of the info is actually _____ into the source code,

23
00:01:10,789 --> 00:01:13,463
but I can still run my application.

24
00:01:13,463 --> 00:01:15,976
To add an environment variable to the IntelliJ,

25
00:01:15,976 --> 00:01:20,888
you need to click on the Run menu and go to Edit Configurations,

26
00:01:20,888 --> 00:01:24,096
find the ConferenceDemoApplication configuration and jump

27
00:01:24,096 --> 00:01:27,444
down to the Environment Variables box.

28
00:01:27,444 --> 00:01:30,752
In here, we can add the name of the environment variable,

29
00:01:30,752 --> 00:01:32,808
which is DB_URL,

30
00:01:32,808 --> 00:01:36,085
and we can paste the value that we pulled out of the

31
00:01:36,085 --> 00:01:39,267
application.properties file into here, click OK to save that,

32
00:01:39,267 --> 00:01:43,218
we'll go ahead and apply this, and click OK to exit.

33
00:01:43,218 --> 00:01:44,075
So at this point,

34
00:01:44,075 --> 00:01:46,344
my app is now configured to read an external

35
00:01:46,344 --> 00:01:48,326
property value for the database URL.

36
00:01:48,326 --> 00:01:52,441
You'd most likely want to do the same for the username and password

37
00:01:52,441 --> 00:01:56,539
properties so that sensitive data isn't hard coded into the file.

38
00:01:56,539 --> 00:02:00,149
To test this out, we can go ahead and restart or run our application,

39
00:02:00,149 --> 00:02:04,432
and at this point, IntelliJ is saying Tomcat has started on port 5000,

40
00:02:04,432 --> 00:02:07,488
but you can jump over to Postman really quick just to test

41
00:02:07,488 --> 00:02:12,600
out we can get data from our database.

42
00:02:12,600 --> 00:02:15,459
Back in Postman, I can test my sessions out again.

43
00:02:15,459 --> 00:02:18,711
But if you remember, we changed the port of our application to 5000,

44
00:02:18,711 --> 00:02:21,758
so I'll need to update that as well.

45
00:02:21,758 --> 00:02:25,541
Once I'm on the correct port, I'll go ahead and send the request to the server,

46
00:02:25,541 --> 00:02:28,421
and you'll notice that we still got all of our data,

47
00:02:28,421 --> 00:02:32,182
even though we pulled the database URL out of the

48
00:02:32,182 --> 00:02:35,629
applications file and into an environment variable.

49
00:02:35,629 --> 00:02:38,481
At this point, if you happen to deploy your application in production,

50
00:02:38,481 --> 00:02:42,348
you can simply provide the production credentials as an environment variable,

51
00:02:42,348 --> 00:02:46,817
and your app is now pointing to an appropriate data source for that environment.

52
00:02:46,817 --> 00:02:52,012
This is one way that you can handle environment-specific configuration.

53
00:02:52,012 --> 00:02:59,000
Spring Boot also provides another way to handle environment configuration, which we'll take a look at next.

