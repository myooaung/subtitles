WEBVTT
1
00:00:01.605 --> 00:00:04.492
We could begin by creating some controllers and

2
00:00:04.492 --> 00:00:06.311
working down the architectural stack,

3
00:00:06.311 --> 00:00:09.320
but I actually want to take a bottom-up approach in this course.

4
00:00:09.320 --> 00:00:11.898
If you started with a good database and schema,

5
00:00:11.898 --> 00:00:14.843
that will give you an excellent base for the rest of your app.

6
00:00:14.843 --> 00:00:17.148
Since we just finished connecting to the database,

7
00:00:17.148 --> 00:00:20.738
the next step is to apply some JPA entities so that we

8
00:00:20.738 --> 00:00:23.395
can talk to the database structures.

9
00:00:23.395 --> 00:00:27.558
Let's start by heading over to the model package that we created earlier.

10
00:00:27.558 --> 00:00:30.786
That's be in the java folder in the com.pluralsight .conference,

11
00:00:30.786 --> 00:00:35.654
and you'll see that there is the models package.

12
00:00:35.654 --> 00:00:38.638
To add a new JPA model here, I can simply right-click,

13
00:00:38.638 --> 00:00:41.792
go to the new menu, and say Java class.

14
00:00:41.792 --> 00:00:46.002
And we'll go ahead and begin by creating the session class,

15
00:00:46.002 --> 00:00:48.705
which will map to the conference sessions.

16
00:00:48.705 --> 00:00:51.816
So the name for the new Java class will be Session.

17
00:00:51.816 --> 00:00:54.822
Hit Enter, and we have a new plain Java class.

18
00:00:54.822 --> 00:00:58.166
Next, we need to annotate this as a JPA entity,

19
00:00:58.166 --> 00:01:02.747
so I can do that by adding a class-level annotation at the top.

20
00:01:02.747 --> 00:01:05.044
Anytime you bring in a new entity or object,

21
00:01:05.044 --> 00:01:06.980
you'll also need to import that,

22
00:01:06.980 --> 00:01:10.964
and IntelliJ can help me with that by clicking on the Import class.

23
00:01:10.964 --> 00:01:16.358
We want to choose the javax.persistence Entity class for our import.

24
00:01:16.358 --> 00:01:19.669
I've also given it a name of sessions because that is

25
00:01:19.669 --> 00:01:21.953
the name of our database table.

26
00:01:21.953 --> 00:01:25.364
In the database, we have a plural name for our database table,

27
00:01:25.364 --> 00:01:28.670
and the class itself is called Session singular because it

28
00:01:28.670 --> 00:01:32.307
will be one instance or row of that data.

29
00:01:32.307 --> 00:01:36.470
Next thing I'm going to do is add a default constructor to all of my entities.

30
00:01:36.470 --> 00:01:38.934
This simply helps with serialization and deserialization,

31
00:01:38.934 --> 00:01:42.549
which will happen when we plug in the controllers later on

32
00:01:42.549 --> 00:01:46.411
to marshal the data into and out of JSON.

33
00:01:46.411 --> 00:01:48.184
You could use IntelliJ to create the constructor,

34
00:01:48.184 --> 00:01:52.179
but it's simple to just create a public session constructor.

35
00:01:52.179 --> 00:01:57.052
I can now map the table columns to the Java attributes in the Session class.

36
00:01:57.052 --> 00:01:58.614
I'm going to add the following class attributes

37
00:01:58.614 --> 00:02:01.461
with their appropriate data type.

38
00:02:01.461 --> 00:02:06.154
A quick sidebar discussion here, I want to mention something about conventions.

39
00:02:06.154 --> 00:02:11.516
Notice that the variable names aren't technically Java standard camelCase names.

40
00:02:11.516 --> 00:02:13.523
I'm keeping them the exact same name, spelling,

41
00:02:13.523 --> 00:02:16.515
and format as the database columns.

42
00:02:16.515 --> 00:02:19.403
By doing this, JPA will auto-bind to those columns,

43
00:02:19.403 --> 00:02:21.751
and I don't need to annotate them.

44
00:02:21.751 --> 00:02:24.850
If I wanted to change them to match standard Java camelCase,

45
00:02:24.850 --> 00:02:29.878
I can do that by simply adding an @column annotation on each

46
00:02:29.878 --> 00:02:32.187
attribute and mapping it appropriately.

47
00:02:32.187 --> 00:02:34.980
Since we're not diving too deep into JPA in this course,

48
00:02:34.980 --> 00:02:40.020
I'm going to leave this as is for simple speed and convenience.

49
00:02:40.020 --> 00:02:42.370
There is one annotation that I do have to add,

50
00:02:42.370 --> 00:02:48.023
and that is the id annotation to specify which attribute is the primary key.

51
00:02:48.023 --> 00:02:54.009
So above the session_id attribute, I'm going to add the following code.

52
00:02:54.009 --> 00:02:57.278
I'll go ahead and import the classes as needed.

53
00:02:57.278 --> 00:03:00.304
For Id, we want to use the JavaX persistence Id.

54
00:03:00.304 --> 00:03:05.906
This tells JPA that the IDE is the primary key field and that the

55
00:03:05.906 --> 00:03:10.353
GeneratedValue annotation specifies how the primary key field gets

56
00:03:10.353 --> 00:03:12.411
populated on a new record insert.

57
00:03:12.411 --> 00:03:14.430
By using the IDENTITY strategy,

58
00:03:14.430 --> 00:03:22.362
JPA will utilize the Postgres created sequence for primary key values.

59
00:03:22.362 --> 00:03:25.424
Here's the table structure for the sessions in the Postgres database,

60
00:03:25.424 --> 00:03:28.454
and you'll notice that the database PRIMARY KEY fields

61
00:03:28.454 --> 00:03:31.330
are set to the serial data type.

62
00:03:31.330 --> 00:03:33.460
When you create a table with serial data type,

63
00:03:33.460 --> 00:03:36.896
it creates it as an integer and add an auto sequence to it,

64
00:03:36.896 --> 00:03:41.830
which you can see here, the sessions_session_id_seq.

65
00:03:41.830 --> 00:03:45.834
This means that Postgres will generate a sequenced auto-generated number

66
00:03:45.834 --> 00:03:51.171
for your primary key whenever you insert a record.

67
00:03:51.171 --> 00:03:51.388
Finally,

68
00:03:51.388 --> 00:03:53.935
the last thing that we need to do is create getters and

69
00:03:53.935 --> 00:03:56.368
setters for the attributes we've added.

70
00:03:56.368 --> 00:04:00.997
IntelliJ can do this quickly simply by right-clicking in the class,

71
00:04:00.997 --> 00:04:05.860
clicking on the Generate menu item, selecting Getters and Setters,

72
00:04:05.860 --> 00:04:09.688
then you can select all of the attributes,

73
00:04:09.688 --> 00:04:11.194
and click OK.

74
00:04:11.194 --> 00:04:14.611
You'll see that IntelliJ added them at the bottom of the class.

75
00:04:14.611 --> 00:04:17.659
I can go ahead and save that file and make sure that I

76
00:04:17.659 --> 00:04:19.179
don't have any compiler errors anywhere,

77
00:04:19.179 --> 00:04:20.177
and that's it!

78
00:04:20.177 --> 00:04:23.977
We've created one entity already.

79
00:04:23.977 --> 00:04:27.911
What I'd like you to do now is build out an entity for the Speakers table.

80
00:04:27.911 --> 00:04:30.876
Go ahead and pause the video and build everything in that table

81
00:04:30.876 --> 00:04:33.596
similar to what we did for the session entity,

82
00:04:33.596 --> 00:04:36.505
except do not add the speaker_photo field.

83
00:04:36.505 --> 00:04:41.327
That's a binary field, and we'll deal with that field later in a later demo.

84
00:04:41.327 --> 00:04:41.992
once you're done,

85
00:04:41.992 --> 00:04:44.759
go ahead and restart the video and check back with how

86
00:04:44.759 --> 00:04:48.895
you did compared to my solution.

87
00:04:48.895 --> 00:04:51.630
Okay, here's what I have for the Speaker class.

88
00:04:51.630 --> 00:04:53.443
You'll notice that I placed it in the models

89
00:04:53.443 --> 00:04:56.279
package and that I called it Speaker.

90
00:04:56.279 --> 00:05:00.055
I then added the annotation @Entity, gave it a name of speakers,

91
00:05:00.055 --> 00:05:04.311
which maps to the actual table name, which is plural speakers,

92
00:05:04.311 --> 00:05:06.087
but the class is singular.

93
00:05:06.087 --> 00:05:09.285
I then added the attributes from that table with the

94
00:05:09.285 --> 00:05:11.861
exception of the speaker image.

95
00:05:11.861 --> 00:05:15.844
I then created a primary key by adding the @Id annotation

96
00:05:15.844 --> 00:05:18.538
and the @GeneratedValue annotation.

97
00:05:18.538 --> 00:05:25.000
I created a basic empty constructor, and I added all of the getters and setters.

98
00:05:25.000 --> 00:05:27.162
If you didn't end up with something similar to that,

99
00:05:27.162 --> 00:05:29.728
go ahead and fix up your code before moving on.

100
00:05:29.728 --> 00:05:32.557
At this point, hopefully you're asking yourself,

101
00:05:32.557 --> 00:05:35.982
what about the relationship between speakers and sessions?

102
00:05:35.982 --> 00:05:38.773
In the database, we have a table called session_speakers.

103
00:05:38.773 --> 00:05:45.000
How does that all work? That's what we'll be covering, coming up next!

