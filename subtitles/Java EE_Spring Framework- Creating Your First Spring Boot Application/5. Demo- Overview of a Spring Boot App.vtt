WEBVTT
1
00:00:01.751 --> 00:00:02.371
When you're working with Maven,

2
00:00:02.371 --> 00:00:05.687
all Maven-based apps are pretty much laid out the same way.

3
00:00:05.687 --> 00:00:07.574
To add a little bit more room,

4
00:00:07.574 --> 00:00:10.488
I'm simply going to toggle down this bottom pane by

5
00:00:10.488 --> 00:00:14.898
clicking on the Build button, and I'm going to expand open the project editor.

6
00:00:14.898 --> 00:00:18.407
If you open up the conference-demo portion of your project editor,

7
00:00:18.407 --> 00:00:21.209
this is where all of the contents that were generated

8
00:00:21.209 --> 00:00:23.247
by the Spring initializer live.

9
00:00:23.247 --> 00:00:27.127
The firs important file worth noting is probably the pom.xml.

10
00:00:27.127 --> 00:00:28.338
This is a Maven structure,

11
00:00:28.338 --> 00:00:32.453
and this is where all of the dependencies live inside of your application.

12
00:00:32.453 --> 00:00:36.074
And in fact, you can see that the spring-boot-starter-web was added to this,

13
00:00:36.074 --> 00:00:41.632
which was the Spring Web dependency we checked in the Spring Initializr website.

14
00:00:41.632 --> 00:00:46.899
We'll be covering the POM file and dependencies in more depth a little later on.

15
00:00:46.899 --> 00:00:49.794
The next important section worth digging into is the source code of the app,

16
00:00:49.794 --> 00:00:52.962
and that is contained in the src folder.

17
00:00:52.962 --> 00:00:54.948
It even lays out a main and test folder,

18
00:00:54.948 --> 00:00:58.371
and each of these folders correspond to code that will be either

19
00:00:58.371 --> 00:01:01.582
for testing purposes or for the application.

20
00:01:01.582 --> 00:01:03.957
Diving deeper into the main folder,

21
00:01:03.957 --> 00:01:07.829
you can see that there is Java source code and resources source code.

22
00:01:07.829 --> 00:01:09.530
Property files, XML files,

23
00:01:09.530 --> 00:01:13.807
and any other non-Java-based file will go into the resource area,

24
00:01:13.807 --> 00:01:18.036
and all Java code will go into the Java folder.

25
00:01:18.036 --> 00:01:18.571
Underneath Java,

26
00:01:18.571 --> 00:01:22.968
you'll notice that the package structure is set up based off of the info entered

27
00:01:22.968 --> 00:01:27.713
on the Spring initializer in the group and package section.

28
00:01:27.713 --> 00:01:30.841
So for this app, the package name is com.pluralsight .conferencedemo,

29
00:01:30.841 --> 00:01:33.459
and I can open that up,

30
00:01:33.459 --> 00:01:38.448
and I have a basic Java file called ConferenceDemoApplication here.

31
00:01:38.448 --> 00:01:39.783
And if I open up the ConferenceDemoApplication,

32
00:01:39.783 --> 00:01:45.894
this is the main entry point for your Spring Boot application.

33
00:01:45.894 --> 00:01:48.267
There are a few interesting pieces in this file

34
00:01:48.267 --> 00:01:50.274
that I want you to take notice of.

35
00:01:50.274 --> 00:01:53.682
First is the public void main method.

36
00:01:53.682 --> 00:01:56.956
That method is the main entry point into any Java application,

37
00:01:56.956 --> 00:02:01.374
and it's just a plain Java way to start your application,

38
00:02:01.374 --> 00:02:03.266
and that's how your program will begin its life,

39
00:02:03.266 --> 00:02:07.169
and this is also how your program can be run standalone

40
00:02:07.169 --> 00:02:09.427
rather than deployed to a container.

41
00:02:09.427 --> 00:02:12.360
You'll also notice that there is an annotation in this

42
00:02:12.360 --> 00:02:14.939
class called @SpringBootApplication.

43
00:02:14.939 --> 00:02:17.848
This tells the Spring Boot loader to run the application as a Spring

44
00:02:17.848 --> 00:02:21.781
Boot app and configure it like a Spring Boot app.

45
00:02:21.781 --> 00:02:24.344
At this point, you might be asking, where is the rest of the code,

46
00:02:24.344 --> 00:02:26.221
and where do I start writing code?

47
00:02:26.221 --> 00:02:28.852
So far, the app has just a couple lines of Java code,

48
00:02:28.852 --> 00:02:33.148
and this gives you an idea of how powerful Spring Boot is.

49
00:02:33.148 --> 00:02:36.044
You could run the application with just this small amount of code,

50
00:02:36.044 --> 00:02:38.331
and the app would fire up and run.

51
00:02:38.331 --> 00:02:38.625
Granted,

52
00:02:38.625 --> 00:02:41.112
it won't do anything interesting yet because we haven't

53
00:02:41.112 --> 00:02:43.977
added any interesting code to it.

54
00:02:43.977 --> 00:02:47.028
One of the first things that I like to do is to get the app set up

55
00:02:47.028 --> 00:02:50.303
and sectioned out into its architectural pieces.

56
00:02:50.303 --> 00:02:53.157
I'm going to do that by adding some new packages.

57
00:02:53.157 --> 00:02:57.082
I'm going to select the com.pluralsight .conferencedemo package,

58
00:02:57.082 --> 00:03:01.373
right-click on it, and say New, Package.

59
00:03:01.373 --> 00:03:03.563
And I'm first going to create a controllers package

60
00:03:03.563 --> 00:03:07.401
that will hold our API controllers.

61
00:03:07.401 --> 00:03:11.734
I'm going to create another new package, and this one, I'm going to call models.

62
00:03:11.734 --> 00:03:15.692
This will hold our JPA entities and other persistence info.

63
00:03:15.692 --> 00:03:22.008
The third package I'm going to create is called repositories.

64
00:03:22.008 --> 00:03:26.278
This will hold our JPA repositories.

65
00:03:26.278 --> 00:03:30.687
And finally, I'm going to create one last package called services.

66
00:03:30.687 --> 00:03:34.082
This package could hold service or logic-based code that

67
00:03:34.082 --> 00:03:36.624
may need to go into the application.

68
00:03:36.624 --> 00:03:38.977
These packages aren't necessary for your application,

69
00:03:38.977 --> 00:03:42.323
but I find that creating some best practices with a little

70
00:03:42.323 --> 00:03:45.666
organization like this early on really helps keep the code in the

71
00:03:45.666 --> 00:03:48.703
application from getting messy later on.

72
00:03:48.703 --> 00:03:50.320
And that's it for the basic layout.

73
00:03:50.320 --> 00:03:58.000
If you've done any kind of MVC app before and you've used Maven, this layout shouldn't be too surprising for you.

