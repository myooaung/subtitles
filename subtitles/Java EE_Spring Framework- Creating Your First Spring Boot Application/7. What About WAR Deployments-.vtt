WEBVTT
1
00:00:01.279 --> 00:00:04.619
If you're working with an existing application or an infrastructure,

2
00:00:04.619 --> 00:00:09.903
chances are you are already creating a WAR file for deployments to a container.

3
00:00:09.903 --> 00:00:12.342
If you've created a Spring Boot app in this environment,

4
00:00:12.342 --> 00:00:16.443
you'll need to be able to continue to support deploying to your container,

5
00:00:16.443 --> 00:00:19.239
and that's going to require a WAR file.

6
00:00:19.239 --> 00:00:21.597
Since our application is a Maven-based application,

7
00:00:21.597 --> 00:00:25.702
we need to make some modifications to the pom.xml file to

8
00:00:25.702 --> 00:00:28.077
package the app a little differently.

9
00:00:28.077 --> 00:00:29.702
Currently, when you build a project,

10
00:00:29.702 --> 00:00:32.446
Maven will generate a standalone executable JAR file,

11
00:00:32.446 --> 00:00:37.135
and this also contains the embedded container that Spring Boot uses by default,

12
00:00:37.135 --> 00:00:39.089
which is Tomcat.

13
00:00:39.089 --> 00:00:41.311
The first thing that will need to happen is to flag

14
00:00:41.311 --> 00:00:43.660
the embedded container as provided.

15
00:00:43.660 --> 00:00:47.134
This will tell Maven to not package Tomcat or whatever embedded

16
00:00:47.134 --> 00:00:51.202
container that you're using in the final packaged artifact.

17
00:00:51.202 --> 00:00:56.231
Second, we need to tell Maven to package our app as a WAR instead of a JAR file.

18
00:00:56.231 --> 00:00:58.361
Once these two changes are done,

19
00:00:58.361 --> 00:01:00.939
the Spring Boot Maven plugin will take care of the rest.

20
00:01:00.939 --> 00:01:04.555
There is also one small Java coding change you'll have to make,

21
00:01:04.555 --> 00:01:11.000
so let's go ahead and modify the conference app to produce a WAR file instead of a JAR file.

