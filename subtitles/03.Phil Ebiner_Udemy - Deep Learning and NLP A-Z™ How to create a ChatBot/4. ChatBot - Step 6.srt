1
00:00:00,610 --> 00:00:05,110
Hello and welcome to this new tutorial in the previous Statoil we imported the data set.

2
00:00:05,140 --> 00:00:10,810
We now have the lines and the conversations and two separate data sets that we called conversations

3
00:00:10,990 --> 00:00:11,760
and lines.

4
00:00:12,010 --> 00:00:17,790
And now what we have to do is to create a dictionary that maps each line with its ID.

5
00:00:17,830 --> 00:00:19,830
So why do we have to do that.

6
00:00:19,840 --> 00:00:21,840
What is the purpose of doing this.

7
00:00:22,060 --> 00:00:28,420
Well first of all one of the best advice that I can give you for coding is to always understand where

8
00:00:28,420 --> 00:00:30,860
you come from and where you want to go.

9
00:00:31,090 --> 00:00:36,220
So we come from the previous story where we import the data set and now we need to understand where

10
00:00:36,220 --> 00:00:38,630
we want to go and where we want to go.

11
00:00:38,650 --> 00:00:46,300
What we want to think in the end is a data set that contains basically two columns the input and the

12
00:00:46,300 --> 00:00:53,260
output because the inputs will be the inputs that will be fed into the neural network and the outputs

13
00:00:53,260 --> 00:00:54,260
will be the target.

14
00:00:54,430 --> 00:00:58,260
You know because we will compare the target that is the real replied.

15
00:00:58,330 --> 00:01:00,870
Reply by the characters to the answer.

16
00:01:00,910 --> 00:01:06,100
Reply by the chat but and thats how the chat but will learn to speak whether its prediction is close

17
00:01:06,220 --> 00:01:07,320
to the target.

18
00:01:07,330 --> 00:01:14,800
So where we want to go is two words a dataset composed of inputs and outputs and the way to do that.

19
00:01:14,800 --> 00:01:20,860
The easiest way to do this is with the dictionaries because we'll have to keep track of the conversations

20
00:01:21,190 --> 00:01:24,970
to make a correct mapping between the inputs and the output.

21
00:01:25,180 --> 00:01:30,460
And by the way this is a first dictionary that we are creating but you're going to see that you'll create

22
00:01:30,700 --> 00:01:31,840
many others.

23
00:01:31,840 --> 00:01:35,040
And besides knowing this we want to obtain such a structure.

24
00:01:35,140 --> 00:01:40,540
Well keep in mind that you'll have to do a lot of cleaning because in order for the training to go smoothly.

25
00:01:40,690 --> 00:01:44,450
Well the techs have to be as much as possible.

26
00:01:44,590 --> 00:01:49,840
They need to be simple simplified as much as possible and you will see that will have some cleaning

27
00:01:50,030 --> 00:01:53,060
Suppe phases in this data preprocessing phase.

28
00:01:53,230 --> 00:01:58,760
So that's why right now we need to first create a dictionary that will map each line with its ID.

29
00:01:58,880 --> 00:02:02,210
And let's start doing this right now in this tutorial.

30
00:02:02,470 --> 00:02:04,390
So to initiate.

31
00:02:04,390 --> 00:02:07,130
To initialize or introduce a dictionary.

32
00:02:07,270 --> 00:02:08,200
We need to start like this.

33
00:02:08,200 --> 00:02:11,880
We need to first give it a name and we're going to give it the following name.

34
00:02:11,920 --> 00:02:14,830
We want to map each line with its ID.

35
00:02:14,830 --> 00:02:23,500
So the key identifier of the dictionary will be the ID of the line and the value will be the line itself.

36
00:02:23,500 --> 00:02:28,480
So since we map from the ID to the line the following name we're going to give to our dictionary will

37
00:02:28,480 --> 00:02:31,360
be ID to line.

38
00:02:31,750 --> 00:02:38,710
I did to like and to initialize a dictionary only to do it this way by introducing a pair of brackets

39
00:02:38,860 --> 00:02:39,860
just like that.

40
00:02:39,880 --> 00:02:46,090
All right so dictionary initialized and now the common thing that happened afterwards after initializing

41
00:02:46,420 --> 00:02:55,660
is naturally a loop because we are going to iterate through all the lines of our lines dataset and for

42
00:02:55,720 --> 00:02:58,570
each of these lines we are going to split.

43
00:02:58,600 --> 00:03:04,810
First the line because it is separated by the plus plus plus dollar plus plus plus we are going to split

44
00:03:04,810 --> 00:03:11,980
that into the different elements of the row and then we will get the key which is the first element

45
00:03:12,220 --> 00:03:15,560
and then we will get the value that is the line up which is the last element.

46
00:03:15,610 --> 00:03:22,870
You know if I open this again well this is what will split the value here and the first element is this

47
00:03:22,870 --> 00:03:28,610
one the ID that will map to the last element which is this one.

48
00:03:28,630 --> 00:03:29,390
They do not.

49
00:03:29,560 --> 00:03:31,300
OK so let's do this.

50
00:03:31,420 --> 00:03:33,590
Let's start this all up.

51
00:03:33,850 --> 00:03:39,070
So to start followed we start with for of course then we need to give the loop variable which we will

52
00:03:39,070 --> 00:03:42,630
call line because we are iterating through the lines.

53
00:03:42,810 --> 00:03:51,520
So for line in the well in lines because our lines are in our lines dataset then Cullen and then we

54
00:03:51,610 --> 00:03:52,720
enter the loop.

55
00:03:52,750 --> 00:04:02,970
So first Rimando was wanted do we want to open this again we want to split this because we want to get

56
00:04:03,060 --> 00:04:04,230
this and this.

57
00:04:04,230 --> 00:04:11,100
So we want to split this whole value here and we're going to split this by this string here plus plus

58
00:04:11,110 --> 00:04:12,560
plus plus plus plus.

59
00:04:12,900 --> 00:04:23,380
And the way to do this is to first take the line and I'm going to add an underscore here first and that

60
00:04:23,380 --> 00:04:27,900
just means a temporary variable because it will actually not be used later.

61
00:04:27,910 --> 00:04:31,740
It's like a local variable that is only going to be used in the loop.

62
00:04:32,140 --> 00:04:34,480
So on that score line equals.

63
00:04:34,690 --> 00:04:39,370
And this is where I'm going to make the split so I'm going to take my line which is a loop variable

64
00:04:39,730 --> 00:04:45,850
line that split parenthesis and then in the parenthesis when it's input.

65
00:04:45,850 --> 00:04:48,290
What do we want to split by.

66
00:04:48,460 --> 00:04:53,970
And we want to split by the plus plus plus dollar plus plus plus so end quote.

67
00:04:54,250 --> 00:05:01,530
I'm going to add space plus plus plus dollar plus plus plus there is a space because if you look closer

68
00:05:01,990 --> 00:05:08,350
there is actually some spaces between the elements and this string here plus plus plus plus plus plus

69
00:05:08,830 --> 00:05:10,310
all right so be careful with that.

70
00:05:10,570 --> 00:05:18,400
So that makes the split and then we're going to get what we want that is the line ID and the line itself.

71
00:05:18,520 --> 00:05:25,390
That is the text but just for safety purpose we're going to make sure that the line has the correct

72
00:05:25,480 --> 00:05:27,320
length which should be fine.

73
00:05:27,420 --> 00:05:29,670
You know if we can do this again.

74
00:05:29,860 --> 00:05:35,390
Well each line should have 5 elements 1 2 3 4 and 5.

75
00:05:35,470 --> 00:05:36,840
We just need to make sure of that.

76
00:05:36,850 --> 00:05:40,690
Otherwise we will get some shifting issue and that could be bad.

77
00:05:40,690 --> 00:05:47,950
So in order to avoid this shifting issue it's better to only get the IDs and the lines for the lines

78
00:05:47,950 --> 00:05:53,960
they have for sure five elements and it's OK if we lose some lines so that's OK.

79
00:05:54,270 --> 00:06:05,690
And so as we said if the length of the line the temporary local voidable line is equal to five.

80
00:06:05,830 --> 00:06:07,160
Well what do we do.

81
00:06:07,180 --> 00:06:13,360
We're going to get the key and fire which is the line ID and the value which is the line itself the

82
00:06:13,360 --> 00:06:18,520
line set by the character and there is actually a trick to do that in one line.

83
00:06:18,520 --> 00:06:26,830
We simply need to take our dictionary that was introduced as ID to line and then in brackets we can

84
00:06:26,830 --> 00:06:35,470
enter the key here which is line 0 and then to get the value but not only get the value but also to

85
00:06:35,470 --> 00:06:37,210
do the mapping at the same time.

86
00:06:37,240 --> 00:06:45,580
We simply need to add here equal to value itself which is line and which element of the line.

87
00:06:45,630 --> 00:06:52,940
Well look at this again you know the key identifiers does and the value is this.

88
00:06:52,970 --> 00:06:53,690
They do not.

89
00:06:53,870 --> 00:07:02,710
And that's the 0 1 2 3 4 element and counting from 0 because indexes in Python start at zero.

90
00:07:02,900 --> 00:07:10,900
So be careful that the fourth index and the fifth index and therefore here I am entering four.

91
00:07:11,150 --> 00:07:18,260
And that gives my dictionary that creates my dictionary that maps each line ID with its text.

92
00:07:18,260 --> 00:07:19,070
So let's check that.

93
00:07:19,070 --> 00:07:23,550
Let's check if everything's OK and let's have a look at our dictionary.

94
00:07:23,750 --> 00:07:27,290
So press incremental control plus enter to execute.

95
00:07:27,290 --> 00:07:28,970
There we go dictionary.

96
00:07:28,970 --> 00:07:35,770
I did to line create it as you can see it was recognized by both and directly as a dictionary.

97
00:07:35,870 --> 00:07:40,060
And if we double click on it yes if you double click on it.

98
00:07:40,280 --> 00:07:47,960
Well we get our dictionary with in the first column here the key the key identifier as I told you.

99
00:07:48,260 --> 00:07:53,810
And in this column here the value which is the line itself said by the character.

100
00:07:53,810 --> 00:07:59,890
So for example if we take this line here well the line is you know I can talk about that.

101
00:07:59,900 --> 00:08:05,640
That's the value of the dictionary and it has the key identifier L A thousand six.

102
00:08:05,660 --> 00:08:08,130
So there are a lot of lines but there we go.

103
00:08:08,150 --> 00:08:10,460
We got our dictionary that's perfect.

104
00:08:10,460 --> 00:08:18,110
And that will be very useful for us to then get this special structure of the dataset that I spoke of

105
00:08:18,200 --> 00:08:19,780
at the beginning of the story.

106
00:08:20,240 --> 00:08:20,810
Perfect.

107
00:08:20,810 --> 00:08:27,440
So now we're ready to move onto the next step which is to create a list of all the conversations with

108
00:08:27,560 --> 00:08:30,680
the IDs as we got in the conversations they just set.

109
00:08:30,830 --> 00:08:36,680
And we want to do that of course because we need to keep track of the conversations for the training

110
00:08:36,680 --> 00:08:37,490
data.

111
00:08:37,520 --> 00:08:39,960
So we'll see that in more details in the next the Tauriel.

112
00:08:39,980 --> 00:08:41,690
And until then Id been on the.
