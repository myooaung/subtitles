1
00:00:00,700 --> 00:00:02,520
Hello and welcome to this new tutorial.

2
00:00:02,680 --> 00:00:08,080
Now we're going to finally apply the padding to the sequences with the pad token.

3
00:00:08,230 --> 00:00:12,480
So first We'll answer two questions First why do we have to do that.

4
00:00:12,490 --> 00:00:17,840
And second what are we going to do exactly with our questions and our answers.

5
00:00:17,860 --> 00:00:23,980
So the answer to why we have to do this is that all the sentences in a batch whether they are questions

6
00:00:24,010 --> 00:00:26,290
or answers must have the same length.

7
00:00:26,470 --> 00:00:29,570
And now the second question what are we going to do exactly.

8
00:00:29,770 --> 00:00:36,520
Well as you can see I've prepared here two sentences one question and one answer.

9
00:00:36,520 --> 00:00:39,270
And as you can see the question Who are you.

10
00:00:39,280 --> 00:00:43,240
And the answer I am about where I don't have the same length.

11
00:00:43,540 --> 00:00:50,120
And after we apply the padding this question and answer will become this.

12
00:00:50,150 --> 00:00:51,170
Who are you.

13
00:00:51,170 --> 00:00:52,400
Bad bad bad bad.

14
00:00:52,520 --> 00:00:55,120
And I am about as know.

15
00:00:55,190 --> 00:01:03,680
So basically the bad tokens are added so that the length of the question sequence is equal to the length

16
00:01:03,830 --> 00:01:05,500
of the answer sequence.

17
00:01:05,720 --> 00:01:10,270
That's the purpose of betting and that's a must do in deep in LP.

18
00:01:10,280 --> 00:01:16,610
So now what we're going to have to do is for each batch and for each sentence of each batch we will

19
00:01:16,610 --> 00:01:23,420
complete the length of each sentence with enough pad tokens so that each sentence of the batch has the

20
00:01:23,420 --> 00:01:24,410
same length.

21
00:01:24,410 --> 00:01:25,460
So let's do this.

22
00:01:25,490 --> 00:01:26,390
It's going to be quite easy.

23
00:01:26,390 --> 00:01:34,240
We're actually going to make a function that we're going to call apply betting apply padding function

24
00:01:34,410 --> 00:01:43,780
that is going to take two arguments the first one is the batch of sequence sequences in this way batch

25
00:01:43,780 --> 00:01:44,840
of sequences.

26
00:01:44,860 --> 00:01:51,180
I just want to make sure you understand the argument here that a batch of sequences and not single sequences

27
00:01:51,960 --> 00:01:57,910
of sequences first argument and the second argument is going to be a word to any dictionary whether

28
00:01:57,910 --> 00:02:02,760
it is two questions word two in Dictionary or the answers were in the dictionary.

29
00:02:02,750 --> 00:02:04,130
We'll actually use them both.

30
00:02:04,210 --> 00:02:07,350
But the name of the argument I'm giving here is words.

31
00:02:07,410 --> 00:02:12,010
And just keep in mind that it is the dictionary mapping the words to the integers.

32
00:02:12,010 --> 00:02:13,710
All right so there are two arguments.

33
00:02:13,740 --> 00:02:17,630
Now let's define what this apply baning function has to do.

34
00:02:17,650 --> 00:02:25,090
So you get what this has to do and has two complete sentences with bad tokens so that all the sentences

35
00:02:25,090 --> 00:02:27,190
in the batch have the same length.

36
00:02:27,250 --> 00:02:32,050
You can actually practice do a little exercise here and try to make that function.

37
00:02:32,200 --> 00:02:38,500
You take your bet of sequences you take each sequence of the batch and you try to add the tokens in

38
00:02:38,500 --> 00:02:42,590
a way that all the sequences of the batch have the same length.

39
00:02:42,610 --> 00:02:43,090
All right.

40
00:02:43,090 --> 00:02:46,440
And now I'm going to start implementing the solution.

41
00:02:46,480 --> 00:02:51,260
So since all the sequences in a batch must have the same length.

42
00:02:51,260 --> 00:02:56,800
We're going to start from the sequence in the batch that has the maximum length and then what we'll

43
00:02:56,800 --> 00:03:03,400
do is we'll take all the other ones and we will complete them with bad tokens so that all these other

44
00:03:03,400 --> 00:03:08,340
ones have the same length as the largest one as the one with the maximum length.

45
00:03:08,350 --> 00:03:15,580
So let's do this let's get this larger sequence and more specifically what we need exactly is the length

46
00:03:15,670 --> 00:03:21,490
of this larger sequence because we will use this length to complete the other shorter sequences in a

47
00:03:21,490 --> 00:03:22,300
batch.

48
00:03:22,300 --> 00:03:29,010
So I'm going to introduce a new mobile here that I'm going to call next sequence length.

49
00:03:29,030 --> 00:03:33,650
All right the maximum length of all the sequences in a batch Max sequence length.

50
00:03:33,880 --> 00:03:36,170
And how are we going to get it.

51
00:03:36,280 --> 00:03:42,640
Well we'll basically take the list of all the sequences and get the max of the length of the sequences

52
00:03:42,990 --> 00:03:46,710
and there is actually a trick to do this in one line one line of code.

53
00:03:46,840 --> 00:03:48,260
You might guess what it is.

54
00:03:48,430 --> 00:03:51,070
It's the for loop inside the list.

55
00:03:51,070 --> 00:03:57,820
And you know we take the maximum of the length inside this list as we have to put in square brackets

56
00:03:58,180 --> 00:04:00,120
and there goes the for loop inside.

57
00:04:00,190 --> 00:04:01,310
And so now what do we want to get.

58
00:04:01,310 --> 00:04:05,350
Want to get the max of the sequences in the batch.

59
00:04:05,350 --> 00:04:11,960
So we're going to have to loop over all the sequences in the match and to do that with you for sequences.

60
00:04:12,790 --> 00:04:16,790
In Well our argument batch of sequences.

61
00:04:16,830 --> 00:04:21,270
So I'm just copying this in batch of sequences.

62
00:04:21,560 --> 00:04:23,200
And what do we want exactly.

63
00:04:23,210 --> 00:04:31,830
Among all the sequences that we managed to get thanks to this loop Well we want the length of the sequence.

64
00:04:31,830 --> 00:04:32,280
All right.

65
00:04:32,300 --> 00:04:37,210
And thanks to the max you will get the maximum of the sequence length.

66
00:04:37,220 --> 00:04:42,560
All right perfect So now we have the largest sequence length and we'll use that right now to complete

67
00:04:42,650 --> 00:04:47,080
the other sequences which are shorter with tokens.

68
00:04:47,210 --> 00:04:53,270
So I'm going to introduce a new line here and that's where I will complete the other sequences.

69
00:04:53,270 --> 00:04:55,200
So how are you going to complete them.

70
00:04:55,280 --> 00:05:01,010
Well first of all since that's exactly what we want to return you know the batch of sequences completed

71
00:05:01,220 --> 00:05:08,990
by the tokens we are ready first to return what we want and what will come after the return is the batch

72
00:05:09,080 --> 00:05:11,670
of sequences with the added tokens.

73
00:05:11,690 --> 00:05:14,490
So how are we going to add these battlegrounds.

74
00:05:14,660 --> 00:05:18,380
Well first of all we have to return the list of sequences.

75
00:05:18,500 --> 00:05:24,470
So I'm introducing some square brackets here and then we're going to do the same trick before loop inside

76
00:05:24,470 --> 00:05:30,800
this list because of course we have to loop over again all the sequences because for each of these sequences

77
00:05:30,970 --> 00:05:35,860
we are going to add the path tokens to make them have an equal length to the largest one.

78
00:05:35,870 --> 00:05:46,120
All right so for then sequence again in of course again our batch of sequences I copied that before.

79
00:05:46,310 --> 00:05:47,600
And so that's the for loop.

80
00:05:47,600 --> 00:05:54,680
And what we want to do comes before the for loop and what we must do is add the tokens to complete each

81
00:05:54,680 --> 00:05:57,170
of these sequences and how are we going to do that.

82
00:05:57,290 --> 00:06:04,820
Well the trick is to first take our sequence which so far has not long enough length but we are going

83
00:06:04,820 --> 00:06:11,690
to add the tokens to that list the sequence right now is a list of token key identifiers.

84
00:06:11,690 --> 00:06:17,990
And so what we're going to do is a list EDITION we're going to add up to list and the first list will

85
00:06:17,990 --> 00:06:19,260
be the sequence.

86
00:06:19,490 --> 00:06:26,470
And the second list will be a list of tokens of length that will complete the length of this new sequence.

87
00:06:26,480 --> 00:06:30,870
We want to get so that it has an equal length as the largest sequence.

88
00:06:31,070 --> 00:06:37,940
And the trick to do that is to add here plus then since we're adding up to lists I'm introducing some

89
00:06:37,940 --> 00:06:45,620
square brackets here and inside the square brackets we're going to have the right number of tokens so

90
00:06:45,620 --> 00:06:51,410
that our sequence gets the maximum length sequence and to do that's what we're going to do is well first

91
00:06:51,590 --> 00:06:58,520
get our token but we need to actually get the integer ID of the PetroChina because remember our sequences

92
00:06:58,580 --> 00:07:05,560
are encoded in two unique integers and therefore that's where our word to in dictionary comes into play.

93
00:07:05,570 --> 00:07:12,100
We're going to get it to get this unique integer ID and coding the pet token.

94
00:07:12,260 --> 00:07:16,000
So I'm taking my words in a dictionary and then in square brackets.

95
00:07:16,070 --> 00:07:19,890
Well since the key of the dictionary is the token itself.

96
00:07:20,120 --> 00:07:25,100
I just need to enter the token in quotes and so well we can get it here.

97
00:07:25,110 --> 00:07:33,110
That's of course the bad token which I am copying here as the key of my word in dictionary that will

98
00:07:33,110 --> 00:07:38,100
return the unique integer ID of the by token.

99
00:07:38,100 --> 00:07:38,440
All right.

100
00:07:38,450 --> 00:07:45,250
And then that's not over of course to complete the sequence so that it has the maximum length sequence.

101
00:07:45,400 --> 00:07:52,970
We are going to multiply this single element list that contains the token ID by a scalar that is by

102
00:07:52,970 --> 00:07:55,250
an integer which will be wait for it.

103
00:07:55,310 --> 00:07:59,630
The maximum length sequence minus the length of that sequence.

104
00:07:59,840 --> 00:08:06,260
And that will complete this sequence so that it gets the maximum length sequence with the tokens that

105
00:08:06,260 --> 00:08:07,420
complete it.

106
00:08:07,430 --> 00:08:14,420
All right so multiplying this single element list by scholar is like doing a list addition several times

107
00:08:14,660 --> 00:08:19,160
so that it gets several tokens inside this list.

108
00:08:19,160 --> 00:08:27,350
All right so as we just said we have to multiply this by the difference between the max sequence lengths

109
00:08:27,680 --> 00:08:30,200
which we got at the previous line.

110
00:08:30,290 --> 00:08:38,260
So the max sequence length minus the length of that sequence so that we can complete it with the token

111
00:08:38,270 --> 00:08:38,780
IDs.

112
00:08:38,900 --> 00:08:44,260
And so now very easy to get this length of the sequence we're dealing with right now in the loop.

113
00:08:44,420 --> 00:08:52,250
Well we have to get the len function of that sequence and that will complete the sequence that it has

114
00:08:52,460 --> 00:08:58,360
the maximum length sequence that is that it has the same length as a sequence that has the largest length.

115
00:08:58,630 --> 00:08:59,200
All right.

116
00:08:59,240 --> 00:09:05,400
I'm just removing that F here because that was the new variable which doesn't take an S and here.

117
00:09:05,540 --> 00:09:06,740
Everything looks great.

118
00:09:06,750 --> 00:09:12,840
We're ready to execute this to define the Apply padding function.

119
00:09:13,100 --> 00:09:13,990
And there we go.

120
00:09:14,000 --> 00:09:22,320
We now have our function apply betting and we will definitely like it very soon on our batch of sequences

121
00:09:22,680 --> 00:09:23,320
until then.

122
00:09:23,380 --> 00:09:24,300
And you've been on the.
