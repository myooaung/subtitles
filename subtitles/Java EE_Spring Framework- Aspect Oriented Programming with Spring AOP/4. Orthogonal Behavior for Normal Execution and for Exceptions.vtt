WEBVTT
1
00:00:02.800 --> 00:00:07.150
[Autogenerated] we continue our demonstration with the following examples

2
00:00:07.150 --> 00:00:12.870
that will implement or total behavior for normal execution and examples

3
00:00:12.870 --> 00:00:20.900
that will implement or total behavior for exceptions will show how to

4
00:00:20.900 --> 00:00:26.650
define our custom annotations and how to use aspect J on methods annotated

5
00:00:26.650 --> 00:00:29.240
with our custom annotation.

6
00:00:29.240 --> 00:00:33.290
This is intended to replace the naming conventions Toby followed

7
00:00:33.290 --> 00:00:36.770
in order the SPG PointCast expression language.

8
00:00:36.770 --> 00:00:42.710
Toby applied Our spring applications still contains the passenger class,

9
00:00:42.710 --> 00:00:45.240
the passenger dull interface,

10
00:00:45.240 --> 00:00:49.480
the passenger thou in class and the best injuries manager

11
00:00:49.480 --> 00:00:54.860
class with the main method we are creating.

12
00:00:54.860 --> 00:00:55.350
Now,

13
00:00:55.350 --> 00:01:01.170
this new log annotation we are going to use it in order to

14
00:01:01.170 --> 00:01:04.980
distinguish the metals on which to apply the aspect

15
00:01:04.980 --> 00:01:07.290
oriented programming mechanisms.

16
00:01:07.290 --> 00:01:11.710
And we're going to add this log annotation exactly on the get

17
00:01:11.710 --> 00:01:16.440
passenger method from the passenger thou in class.

18
00:01:16.440 --> 00:01:22.780
We're also creating this logging aspect class and we

19
00:01:22.780 --> 00:01:29.140
are an irritating it with aspect.

20
00:01:29.140 --> 00:01:34.480
It contains a private longer field and this log method and not a day Lewis

21
00:01:34.480 --> 00:01:40.170
around this log method will be executed around each metal that is an

22
00:01:40.170 --> 00:01:44.340
irritated with the newly introduced log annotation.

23
00:01:44.340 --> 00:01:48.000
As we have access to the proceeding joint point meaning to

24
00:01:48.000 --> 00:01:50.400
the execution of the original method.

25
00:01:50.400 --> 00:01:53.530
We take the method name using this joint point.

26
00:01:53.530 --> 00:01:54.630
Don't get signature.

27
00:01:54.630 --> 00:01:56.620
Don't get name the method.

28
00:01:56.620 --> 00:02:00.180
Arguments using the joint point don't get ours,

29
00:02:00.180 --> 00:02:02.660
and we are Logan gunning for message,

30
00:02:02.660 --> 00:02:06.280
saying that we're calling the method and the first argument.

31
00:02:06.280 --> 00:02:08.610
Then we are executing the original method.

32
00:02:08.610 --> 00:02:13.640
We are logging an inn for message with the metal name and its result,

33
00:02:13.640 --> 00:02:18.300
and we are returning the result of the method itself.

34
00:02:18.300 --> 00:02:21.920
Using this newly introduced log annotation will help

35
00:02:21.920 --> 00:02:24.830
us avoiding naming conventions.

36
00:02:24.830 --> 00:02:28.110
As you saw in our previous examples.

37
00:02:28.110 --> 00:02:32.450
Remember that we're executing some aspect only related to

38
00:02:32.450 --> 00:02:34.720
metals that were ending in passenger,

39
00:02:34.720 --> 00:02:39.890
and we're having a certain signature similarly to what we have

40
00:02:39.890 --> 00:02:44.150
previously presented inside this AARP dot xml file.

41
00:02:44.150 --> 00:02:49.370
We need to add the GOP Aspect J Dash auto proxy directive from the

42
00:02:49.370 --> 00:02:52.980
spring configuration that enables the aspect a support,

43
00:02:52.980 --> 00:02:58.540
and we'll also need the logging aspect bean belonging to the com dot parasite

44
00:02:58.540 --> 00:03:03.820
dot spring GOP dot example for dot logging aspect class.

45
00:03:03.820 --> 00:03:07.910
By adding this being inside the AARP dot XML file,

46
00:03:07.910 --> 00:03:12.070
it will be under the control of the spring container.

47
00:03:12.070 --> 00:03:18.530
Let's see how this application works,

48
00:03:18.530 --> 00:03:23.420
and we're getting your total functionality provided by the lower aspect

49
00:03:23.420 --> 00:03:27.180
this time using our own custom annotation aspect,

50
00:03:27.180 --> 00:03:34.000
J and the around annotation and the last example from this

51
00:03:34.000 --> 00:03:37.690
model will show how to define an aspect that will implement

52
00:03:37.690 --> 00:03:41.140
or tonal behavior for exceptions.

53
00:03:41.140 --> 00:03:46.440
We still have this passenger class, the passenger thou interface,

54
00:03:46.440 --> 00:03:50.530
but the passenger, the IMP class, has suffered some changes.

55
00:03:50.530 --> 00:03:51.380
First,

56
00:03:51.380 --> 00:03:55.620
it is annotated with service of passenger doll requiring spring

57
00:03:55.620 --> 00:03:59.040
to create a bean with the name passenger Dow.

58
00:03:59.040 --> 00:04:02.790
And the logic of the get passenger requires the i d.

59
00:04:02.790 --> 00:04:04.990
Not Toby less than one.

60
00:04:04.990 --> 00:04:06.910
If the idea is less than one,

61
00:04:06.910 --> 00:04:10.680
then we throw on your own time exception with the message.

62
00:04:10.680 --> 00:04:16.060
Incorrect i d the AARP dot xml file also suffered some changes.

63
00:04:16.060 --> 00:04:21.060
We have added this directive Context components Camp Base package forcing

64
00:04:21.060 --> 00:04:24.470
spring to look for some components in the base package.

65
00:04:24.470 --> 00:04:28.540
Calm parasite springer p dot Example five.

66
00:04:28.540 --> 00:04:29.530
This way,

67
00:04:29.530 --> 00:04:34.100
spring will be able to discover the bean and outdated with service

68
00:04:34.100 --> 00:04:38.310
passenger doll in the passenger's manager class,

69
00:04:38.310 --> 00:04:42.000
we are retrieving the passenger thou bean and we're trying

70
00:04:42.000 --> 00:04:46.000
to get the passenger having i d zero.

71
00:04:46.000 --> 00:04:52.570
Let's run the program.

72
00:04:52.570 --> 00:04:56.860
As we're expecting, we are getting around time exception with the message.

73
00:04:56.860 --> 00:05:03.840
Incorrect i d the I d zero is not accepted as it is less than one.

74
00:05:03.840 --> 00:05:05.960
In order to manage the exception,

75
00:05:05.960 --> 00:05:12.740
we're going to introduce this exception aspect class.

76
00:05:12.740 --> 00:05:19.640
We are going to annotate it with aspect and with service so that spring will

77
00:05:19.640 --> 00:05:23.690
automatically create a being based on the exception aspect.

78
00:05:23.690 --> 00:05:29.320
Class the class contains ah private longer field,

79
00:05:29.320 --> 00:05:33.980
and this metal annotated with after throwing it will apply at the

80
00:05:33.980 --> 00:05:39.580
execution of any method throwing around time exception.

81
00:05:39.580 --> 00:05:44.190
Let's move back toe this AARP dot xml file and introduce

82
00:05:44.190 --> 00:05:47.370
this GOP Aspect J auto proxy directive.

83
00:05:47.370 --> 00:05:50.940
The AARP Aspect J Auto proxy directive from the spring

84
00:05:50.940 --> 00:05:54.930
configuration enables the aspect J support.

85
00:05:54.930 --> 00:05:58.590
Remember the exception aspect being is already declared

86
00:05:58.590 --> 00:06:03.050
through the service and rotation.

87
00:06:03.050 --> 00:06:12.490
Let's see now how the application works and we're getting your total

88
00:06:12.490 --> 00:06:16.040
functionality provided by the exception aspect.

89
00:06:16.040 --> 00:06:19.940
We see that the messages logged after having thrown the exception.

90
00:06:19.940 --> 00:06:24.340
However, this does not prevent the exception, Toby propagated.

91
00:06:24.340 --> 00:06:26.840
If we would like the program to continue,

92
00:06:26.840 --> 00:06:32.120
we have toe explicitly catch the exception.

93
00:06:32.120 --> 00:06:33.400
To conclude this module,

94
00:06:33.400 --> 00:06:38.230
our demonstrations focused on showing code that uses the facilities of spring a.

95
00:06:38.230 --> 00:06:39.240
Opie.

96
00:06:39.240 --> 00:06:42.680
We showed how spring ill be aspects are implemented.

97
00:06:42.680 --> 00:06:47.240
Using regular classes and XML based configuration,

98
00:06:47.240 --> 00:06:50.950
we showed how to use asperity annotations to declare

99
00:06:50.950 --> 00:06:53.610
regular job classes as aspects.

100
00:06:53.610 --> 00:06:57.640
We effectively use the Mainspring LP a rotations to implement

101
00:06:57.640 --> 00:07:02.240
or total behavior for normal execution and to implement or

102
00:07:02.240 --> 00:07:05.010
total behavior for exceptions.

103
00:07:05.010 --> 00:07:08.850
Now we have an overall image of the capabilities of spring.

104
00:07:08.850 --> 00:07:12.160
A Opie will start to put them in practice,

105
00:07:12.160 --> 00:07:14.490
using a flight management application,

106
00:07:14.490 --> 00:07:17.640
bringing you two situations close to real life.

107
00:07:17.640 --> 00:07:23.000
We'll do this in the next model. See you there.

