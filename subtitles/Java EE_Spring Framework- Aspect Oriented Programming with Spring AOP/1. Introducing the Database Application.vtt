WEBVTT
1
00:00:01.140 --> 00:00:01.980
[Autogenerated] Hello.

2
00:00:01.980 --> 00:00:04.510
Welcome to this model about the implementation of

3
00:00:04.510 --> 00:00:07.970
crosscutting concerns for cashing and exceptions.

4
00:00:07.970 --> 00:00:11.120
You'll see how we continue our flights management application,

5
00:00:11.120 --> 00:00:13.040
accessing a database.

6
00:00:13.040 --> 00:00:17.940
So let's move further.

7
00:00:17.940 --> 00:00:22.240
What we're going to do for our demonstration will introduce a data base

8
00:00:22.240 --> 00:00:25.240
on which to execute crude operations on the flights,

9
00:00:25.240 --> 00:00:29.690
and passengers with Great an aspect that manages cashing on

10
00:00:29.690 --> 00:00:33.340
crude operations will implement a new feature that requires

11
00:00:33.340 --> 00:00:35.000
working with aspects for handling.

12
00:00:35.000 --> 00:00:44.400
Exceptions on will create aspects that manage these exceptions,

13
00:00:44.400 --> 00:00:47.340
removed to the code and first show how to introduce

14
00:00:47.340 --> 00:00:51.340
a database to our application.

15
00:00:51.340 --> 00:00:54.450
First, we need the database structure toe work on.

16
00:00:54.450 --> 00:01:00.640
So we add this DBS Commander SQL File that will create it.

17
00:01:00.640 --> 00:01:04.700
We created this passenger stable having the fields I D.

18
00:01:04.700 --> 00:01:09.150
That is generated the name, which is Barker of 50 and the country,

19
00:01:09.150 --> 00:01:12.690
which is also of our car of 50 who answered the

20
00:01:12.690 --> 00:01:15.590
passenger Jim from United States.

21
00:01:15.590 --> 00:01:18.620
Then we serve the passenger Jack from United Kingdom,

22
00:01:18.620 --> 00:01:22.140
and we serve the passenger Jill from Australia.

23
00:01:22.140 --> 00:01:27.460
Then we'll add the nitty dependencies to the prom dot XML file will

24
00:01:27.460 --> 00:01:31.270
add the spring GBC dependency that helps the spring application to

25
00:01:31.270 --> 00:01:33.640
interact with the database through J B, B,

26
00:01:33.640 --> 00:01:36.250
C and the H S, Q L, D,

27
00:01:36.250 --> 00:01:41.580
B and H two dependencies that are needed by the H two in memory

28
00:01:41.580 --> 00:01:47.420
database into the AARP dot xml configuration file.

29
00:01:47.420 --> 00:01:50.030
We need to introduce the reference to the J D.

30
00:01:50.030 --> 00:01:55.010
B C name space and the reference to the excess D or

31
00:01:55.010 --> 00:01:57.500
excimer scheme a database spring J D B C.

32
00:01:57.500 --> 00:01:58.540
File.

33
00:01:58.540 --> 00:02:01.760
Then we'll declare an embedded database with the I.

34
00:02:01.760 --> 00:02:01.910
D.

35
00:02:01.910 --> 00:02:04.470
Data source that is accessed through J.

36
00:02:04.470 --> 00:02:04.600
D.

37
00:02:04.600 --> 00:02:06.940
B C.

38
00:02:06.940 --> 00:02:10.390
We initialize this database through the help of the script

39
00:02:10.390 --> 00:02:14.590
Deby schema dot est Really that we have just shown and that

40
00:02:14.590 --> 00:02:16.470
is to be found on the class path.

41
00:02:16.470 --> 00:02:19.950
We remind that we have placed our debate schema dot a

42
00:02:19.950 --> 00:02:22.460
steel file in the resource is folder,

43
00:02:22.460 --> 00:02:28.170
which is added by him Avon on the class path and we introduced this

44
00:02:28.170 --> 00:02:31.370
being with the I D data source belonging to the class,

45
00:02:31.370 --> 00:02:32.950
or HG got spring framework.

46
00:02:32.950 --> 00:02:35.860
Look J d B C dot data source dot driver,

47
00:02:35.860 --> 00:02:39.310
manager data source, and has a Siri's of configuration.

48
00:02:39.310 --> 00:02:41.400
The driver class name will be ordered out.

49
00:02:41.400 --> 00:02:42.810
HSP LD be Dr J.

50
00:02:42.810 --> 00:02:42.920
D.

51
00:02:42.920 --> 00:02:43.160
B C.

52
00:02:43.160 --> 00:02:44.390
Driver.

53
00:02:44.390 --> 00:02:47.050
The U R L of the database will be J D.

54
00:02:47.050 --> 00:02:51.110
B C H two flights management and the credentials to

55
00:02:51.110 --> 00:02:58.540
access this database will be username, essay and empty password.

56
00:02:58.540 --> 00:03:02.240
We will access the database by implementing the Dow or Data

57
00:03:02.240 --> 00:03:04.940
Access Object Design Pattern Day taxes.

58
00:03:04.940 --> 00:03:08.480
Object is a pattern that provides an abstract interface to a

59
00:03:08.480 --> 00:03:13.400
database that thou offer specific date operations without

60
00:03:13.400 --> 00:03:15.830
exposing the details of the database.

61
00:03:15.830 --> 00:03:21.220
By mapping the application calls to the persistence layer we create.

62
00:03:21.220 --> 00:03:24.440
This new package calmed a parasite that spring europea dot

63
00:03:24.440 --> 00:03:29.530
flights management dot Dow and inside it we are creating

64
00:03:29.530 --> 00:03:33.800
the passenger dollar interface.

65
00:03:33.800 --> 00:03:34.440
The passenger.

66
00:03:34.440 --> 00:03:37.650
The interface declares a get passenger method that

67
00:03:37.650 --> 00:03:39.410
is receiving as argument the i.

68
00:03:39.410 --> 00:03:41.690
D of the passenger.

69
00:03:41.690 --> 00:03:46.210
We created this passenger down in plus that implements

70
00:03:46.210 --> 00:03:48.340
the passenger door in their face.

71
00:03:48.340 --> 00:03:54.260
We have to override the previously defined get passenger method.

72
00:03:54.260 --> 00:03:57.420
The passenger don't in class will contain the map of the

73
00:03:57.420 --> 00:04:01.540
passengers that have already been created.

74
00:04:01.540 --> 00:04:04.410
We need to add this data source and J.

75
00:04:04.410 --> 00:04:08.130
D B C fields in the class.

76
00:04:08.130 --> 00:04:12.580
The data source interface controls the database connections It is part of the J

77
00:04:12.580 --> 00:04:17.540
D B C specification and can be seen as a connection factory.

78
00:04:17.540 --> 00:04:19.120
Frink An extra database.

79
00:04:19.120 --> 00:04:22.120
The other data source data source allows to hide

80
00:04:22.120 --> 00:04:24.790
connection pulling and transaction management.

81
00:04:24.790 --> 00:04:28.770
J D B C Temperate is the central class in the package or dot

82
00:04:28.770 --> 00:04:31.420
spring framework dot j d b c dot core.

83
00:04:31.420 --> 00:04:35.170
Its responsibilities are to execute Esquivel queries to

84
00:04:35.170 --> 00:04:37.550
reiterate over results and to catch J.

85
00:04:37.550 --> 00:04:37.670
D.

86
00:04:37.670 --> 00:04:37.780
B.

87
00:04:37.780 --> 00:04:40.210
C exceptions.

88
00:04:40.210 --> 00:04:42.800
The perimeter's that are necessary when executing an

89
00:04:42.800 --> 00:04:49.280
SQL query are the data source, the row mapper and the SQL quero.

90
00:04:49.280 --> 00:04:53.360
The road map er is doing the mapping of the results that to certain

91
00:04:53.360 --> 00:04:57.840
objects we have to find here a row mapper that when it receives the

92
00:04:57.840 --> 00:05:00.740
results that it will construct a passenger,

93
00:05:00.740 --> 00:05:05.430
then said the name of the passenger as the name column from the results set

94
00:05:05.430 --> 00:05:10.820
and said the country as the country column from the results that we

95
00:05:10.820 --> 00:05:16.150
introduced here the set data source method that is used by spring to inject

96
00:05:16.150 --> 00:05:18.950
the data source and to initialize the J.

97
00:05:18.950 --> 00:05:20.090
D B C template,

98
00:05:20.090 --> 00:05:24.530
we see that we're initializing the data source field from the current object

99
00:05:24.530 --> 00:05:28.650
with the value of the data source Parametric and then with great the GBC

100
00:05:28.650 --> 00:05:33.230
temperate object by calling the constructor of the J D B C temperate class and

101
00:05:33.230 --> 00:05:37.840
passing the stored data source as prior matter.

102
00:05:37.840 --> 00:05:41.610
We introduced this yet by the method that selects from the

103
00:05:41.610 --> 00:05:44.720
database a passenger with a given I d.

104
00:05:44.720 --> 00:05:49.560
We define this string guest will saying Select all from passengers where I d

105
00:05:49.560 --> 00:05:53.230
equals Sam para Matter and we're returning the result of J.

106
00:05:53.230 --> 00:05:53.350
D.

107
00:05:53.350 --> 00:05:57.890
B c template dot query for object of SQL Row mapper and I D.

108
00:05:57.890 --> 00:06:01.630
This means that we're going to execute the Skrill query by

109
00:06:01.630 --> 00:06:05.420
passing as idea para matter the value of the int i.

110
00:06:05.420 --> 00:06:08.730
D perimeter of the get by de method and using for

111
00:06:08.730 --> 00:06:12.880
mapping the previously defined row mapper.

112
00:06:12.880 --> 00:06:17.850
Now we can write the behavior of the get passenger method first.

113
00:06:17.850 --> 00:06:19.270
If the passenger was the given,

114
00:06:19.270 --> 00:06:24.360
ideas already in the passenger's map will no longer query the database but will

115
00:06:24.360 --> 00:06:29.480
return the passenger calling Passengers map dot Yet of I D.

116
00:06:29.480 --> 00:06:33.680
Otherwise, if the passenger hasn't been put in the passenger's map,

117
00:06:33.680 --> 00:06:35.820
we're going toe query the database,

118
00:06:35.820 --> 00:06:39.460
get the passenger with the help of the previously defined Get by

119
00:06:39.460 --> 00:06:42.340
de Mattered and then return the passenger.

120
00:06:42.340 --> 00:06:46.050
You may now ask yourself who will put the passenger to the map?

121
00:06:46.050 --> 00:06:52.950
We will get back to the answer to this question a little later.

122
00:06:52.950 --> 00:06:55.190
We need to initialize the passenger Dow,

123
00:06:55.190 --> 00:06:59.760
improve Bean and set its data source as the data source that we have

124
00:06:59.760 --> 00:07:04.540
already defined in our application configuration.

125
00:07:04.540 --> 00:07:12.000
Remember, we already defined, said data source. Method is used by spring to do this.

