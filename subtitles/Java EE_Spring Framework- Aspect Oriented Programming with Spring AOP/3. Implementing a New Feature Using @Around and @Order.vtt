WEBVTT
1
00:00:01.500 --> 00:00:03.730
[Autogenerated] we moved with her and we're going to

2
00:00:03.730 --> 00:00:07.450
introduce additional logging functionalities.

3
00:00:07.450 --> 00:00:11.160
We are going to use the remaining normal executioner notations

4
00:00:11.160 --> 00:00:18.890
meaning the around annotation and the order annotation.

5
00:00:18.890 --> 00:00:22.270
There is one more requirement to be implemented in order to

6
00:00:22.270 --> 00:00:25.440
track what happens within the system.

7
00:00:25.440 --> 00:00:26.860
Objects as flights,

8
00:00:26.860 --> 00:00:31.540
passengers and tickets should not change their internals too frequently.

9
00:00:31.540 --> 00:00:36.030
If this happens, we should logger message with severe priority.

10
00:00:36.030 --> 00:00:39.830
And this message should be logged before other messages from

11
00:00:39.830 --> 00:00:44.210
the ones we defined in looking aspect one.

12
00:00:44.210 --> 00:00:51.310
So we create this new class and we're calling it logging aspect, too.

13
00:00:51.310 --> 00:00:57.880
We are going to annotate this class as aspect and we're introduced

14
00:00:57.880 --> 00:01:03.140
this longer as private field inside the class.

15
00:01:03.140 --> 00:01:06.650
What are we going to do when the internal state of a flight

16
00:01:06.650 --> 00:01:09.440
of a passenger or of a ticket is changed?

17
00:01:09.440 --> 00:01:11.900
We're going to get the method name.

18
00:01:11.900 --> 00:01:14.040
We are going to get its arguments.

19
00:01:14.040 --> 00:01:18.290
We are going to log a severe message about the method that

20
00:01:18.290 --> 00:01:20.440
has been cold and its first argument.

21
00:01:20.440 --> 00:01:24.800
Then we are going to execute your regional method itself with longer new

22
00:01:24.800 --> 00:01:28.840
silver message with the method name and its result,

23
00:01:28.840 --> 00:01:35.840
and we are going toe return the result of the method itself.

24
00:01:35.840 --> 00:01:38.820
When are we going to execute the log method?

25
00:01:38.820 --> 00:01:43.410
This will be executed around the execution off any setter.

26
00:01:43.410 --> 00:01:44.330
More exactly.

27
00:01:44.330 --> 00:01:48.720
It will be executed when any set method from the package.

28
00:01:48.720 --> 00:01:51.950
Com dot parasite dot spring GOP dot flies

29
00:01:51.950 --> 00:01:55.020
management dot domain will be executed.

30
00:01:55.020 --> 00:02:01.240
So we are going toe annotated this log method with around and will pass

31
00:02:01.240 --> 00:02:06.600
all centers as argument of the method as the messages logged by this

32
00:02:06.600 --> 00:02:10.250
class have higher priority than the ones from looming aspect one will

33
00:02:10.250 --> 00:02:16.880
annotate looking aspecto with order of two and well edited looking

34
00:02:16.880 --> 00:02:23.840
Aspect one with order of one.

35
00:02:23.840 --> 00:02:27.190
We also need to configure the application to create the new

36
00:02:27.190 --> 00:02:32.560
logging aspecto bean we are introducing in AARP dot xml this

37
00:02:32.560 --> 00:02:36.980
logging aspecto bean belonging to the class comb that parasite dot

38
00:02:36.980 --> 00:02:39.790
spring AARP dot flights management, not aspects,

39
00:02:39.790 --> 00:02:41.540
not logging aspect, too.

40
00:02:41.540 --> 00:02:45.410
We introduced this been here in a o p dot XML,

41
00:02:45.410 --> 00:02:52.380
and this way it will arrive under the management of the spring container.

42
00:02:52.380 --> 00:02:57.000
Let's run the current application.

43
00:02:57.000 --> 00:02:57.780
They're logging aspect.

44
00:02:57.780 --> 00:03:02.400
Message related to a set number method has been

45
00:03:02.400 --> 00:03:03.920
displayed before the longing aspect.

46
00:03:03.920 --> 00:03:05.060
Message Belonging.

47
00:03:05.060 --> 00:03:07.840
Toa Logging Aspect one class.

48
00:03:07.840 --> 00:03:11.440
So we created an application that has implemented a series

49
00:03:11.440 --> 00:03:14.470
of Logan capabilities using Spring A O.

50
00:03:14.470 --> 00:03:15.240
P.

51
00:03:15.240 --> 00:03:20.990
And normal executioner Notations Aspect Point got before

52
00:03:20.990 --> 00:03:29.040
after after returning around and order.

53
00:03:29.040 --> 00:03:32.740
So what did you do during this model?

54
00:03:32.740 --> 00:03:36.220
We introduced the flight management application Ah program.

55
00:03:36.220 --> 00:03:40.240
Working with flights, passengers and thickets,

56
00:03:40.240 --> 00:03:43.340
we implemented new logging features working with

57
00:03:43.340 --> 00:03:46.160
aspect for the normal execution floor.

58
00:03:46.160 --> 00:03:50.410
We created aspects that managed logging operations on.

59
00:03:50.410 --> 00:03:55.010
We'll use the normal execution annotations aspect Point got

60
00:03:55.010 --> 00:04:01.440
before After after returning around and order,

61
00:04:01.440 --> 00:04:04.130
we'll continue the development of the application,

62
00:04:04.130 --> 00:04:13.000
introducing crosscutting concerns for cashing and for exceptions. See you in the next model.

