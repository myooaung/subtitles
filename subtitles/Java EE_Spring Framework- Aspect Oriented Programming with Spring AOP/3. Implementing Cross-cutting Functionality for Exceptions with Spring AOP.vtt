WEBVTT
1
00:00:02.740 --> 00:00:05.240
[Autogenerated] well, no move to the next demonstration,

2
00:00:05.240 --> 00:00:09.740
and this is referring toe cross cutting functionality for exceptions.

3
00:00:09.740 --> 00:00:13.820
What are going to do is first create custom exception,

4
00:00:13.820 --> 00:00:15.330
then introduce exception,

5
00:00:15.330 --> 00:00:18.930
throwing in the crowd methods and then create the

6
00:00:18.930 --> 00:00:24.030
aspect that intercept the exception.

7
00:00:24.030 --> 00:00:27.920
The next feature that is required to be implemented is preventing the

8
00:00:27.920 --> 00:00:31.650
insertion of a passenger having an invalid country data.

9
00:00:31.650 --> 00:00:34.690
We should log a severe message when such a situation

10
00:00:34.690 --> 00:00:38.780
happens with created this new package.

11
00:00:38.780 --> 00:00:45.140
Corndog parasite dot spring GOP dot flights management Not exceptions.

12
00:00:45.140 --> 00:00:48.050
And here we are going to create the country does not exist

13
00:00:48.050 --> 00:00:54.340
exception class that extends runtime exception.

14
00:00:54.340 --> 00:00:56.620
The custom exception class will have ah,

15
00:00:56.620 --> 00:01:01.210
private Stringfield Country code,

16
00:01:01.210 --> 00:01:04.910
A constructor that receives as argument a country killed and

17
00:01:04.910 --> 00:01:10.490
initialize is that this country coldfield and they get there

18
00:01:10.490 --> 00:01:13.140
for this country code field.

19
00:01:13.140 --> 00:01:15.270
When should we throw with such an exception?

20
00:01:15.270 --> 00:01:20.440
When we try to insert the passenger having an invalid country coat,

21
00:01:20.440 --> 00:01:25.510
we will add this insert method to the passenger dollar interface and

22
00:01:25.510 --> 00:01:30.390
will override it into the passenger dow and class.

23
00:01:30.390 --> 00:01:33.640
This is the implementation of the insert method.

24
00:01:33.640 --> 00:01:36.700
If the country code of the passenger is not to be found in

25
00:01:36.700 --> 00:01:40.720
the list of the I s O country codes we throw the previously

26
00:01:40.720 --> 00:01:42.570
defined country does not exist.

27
00:01:42.570 --> 00:01:43.340
Exception.

28
00:01:43.340 --> 00:01:49.140
Otherwise, we attempt the insertion into a database.

29
00:01:49.140 --> 00:01:53.380
We create this new passenger we said his name Toby Mike.

30
00:01:53.380 --> 00:01:57.140
We said his country Toby set set, which is an invalid country.

31
00:01:57.140 --> 00:02:03.990
Then we try to insert Mike into a database That's right to

32
00:02:03.990 --> 00:02:12.460
execute the program as it was expected,

33
00:02:12.460 --> 00:02:15.250
because those that that country code does not exist,

34
00:02:15.250 --> 00:02:17.270
we are getting a country does not exist.

35
00:02:17.270 --> 00:02:19.140
Exception.

36
00:02:19.140 --> 00:02:24.740
But remember, we need to log a severe message when such a situation happens,

37
00:02:24.740 --> 00:02:27.120
as this is a cross cutting functionality,

38
00:02:27.120 --> 00:02:32.340
we will create a separate aspect called Country does Not Exist aspect.

39
00:02:32.340 --> 00:02:37.380
And we're going to annotate this class with the aspect annotation who insert

40
00:02:37.380 --> 00:02:43.730
this private longer field and this log method annotated with after throwing

41
00:02:43.730 --> 00:02:46.710
the point cut is the execution of the metal comb.

42
00:02:46.710 --> 00:02:51.630
The plural site dot spring GOP not flights management daughter dowel dot

43
00:02:51.630 --> 00:02:56.680
passenger Thou am not insert and we're looking a severe message announcing

44
00:02:56.680 --> 00:03:01.990
that we have tried to insert a passenger with an un existing country coat we

45
00:03:01.990 --> 00:03:05.890
also need to include the country does not exist aspect of being in the AARP

46
00:03:05.890 --> 00:03:09.810
dot xml configuration file.

47
00:03:09.810 --> 00:03:14.740
Let's run the application again.

48
00:03:14.740 --> 00:03:16.290
And besides the exception,

49
00:03:16.290 --> 00:03:20.150
we're also getting this severe log message attempt to insert the

50
00:03:20.150 --> 00:03:24.380
passenger within an existing country that Zet.

51
00:03:24.380 --> 00:03:26.470
You see that working with the after throwing a

52
00:03:26.470 --> 00:03:29.330
notation does not prevent the exception.

53
00:03:29.330 --> 00:03:30.640
Toby propagated.

54
00:03:30.640 --> 00:03:33.030
If we would like the program to continue,

55
00:03:33.030 --> 00:03:35.740
we have to explicitly cash the exception.

56
00:03:35.740 --> 00:03:40.160
So we have successfully implemented Botha cashing aspect and an exception

57
00:03:40.160 --> 00:03:46.640
handing aspect with the help of the spring GOP capabilities.

58
00:03:46.640 --> 00:03:48.240
To conclude this model,

59
00:03:48.240 --> 00:03:51.540
we introduced a data base on which we executed crowd

60
00:03:51.540 --> 00:03:54.640
operations on the flights and passengers.

61
00:03:54.640 --> 00:03:58.400
We created an aspect managing, cashing on crowd operations,

62
00:03:58.400 --> 00:04:02.750
in particular on the operation of getting a passenger by i D.

63
00:04:02.750 --> 00:04:05.660
We implemented a new feature requiring working with

64
00:04:05.660 --> 00:04:07.960
aspect for handling exceptions,

65
00:04:07.960 --> 00:04:12.100
and we created an aspect managing this kind of exceptions.

66
00:04:12.100 --> 00:04:21.000
We still need to discuss about spring Europea introductions and their usage. See you in the next model

