1
00:00:01,210 --> 00:00:04,670
[Autogenerated] and we'll move now to presenting the aspect oriented

2
00:00:04,670 --> 00:00:10,570
programming key terms To start the introduction of the key A.

3
00:00:10,570 --> 00:00:15,160
Opie Terms will show this code example where we may say that the logging

4
00:00:15,160 --> 00:00:20,630
itself as orthogonal functional T may be considered an aspect.

5
00:00:20,630 --> 00:00:23,710
The action executed before the main function is called

6
00:00:23,710 --> 00:00:27,470
before advice and the action executed after the main

7
00:00:27,470 --> 00:00:35,320
functionality is called after advice, we summarize with the help of this picture.

8
00:00:35,320 --> 00:00:39,470
The main key, a Hopi Terms on aspect,

9
00:00:39,470 --> 00:00:46,040
represents the model Aries ation of a concern that cuts across multiple classes.

10
00:00:46,040 --> 00:00:49,280
Longing is a very good example of an orthogonal or

11
00:00:49,280 --> 00:00:51,960
crosscutting concern in Java applications.

12
00:00:51,960 --> 00:00:54,880
We'll see in the next model that spring GOP

13
00:00:54,880 --> 00:00:57,840
implements aspect Using regular classes,

14
00:00:57,840 --> 00:01:01,690
the scheme are based approach or regular classes and

15
00:01:01,690 --> 00:01:04,140
outdated with the aspect annotation.

16
00:01:04,140 --> 00:01:09,360
The Aspect J Approach ah Joint Point represents the effective execution of

17
00:01:09,360 --> 00:01:14,200
a method where the aspect will be applied on advice.

18
00:01:14,200 --> 00:01:19,630
Is the action taking by an aspect at the particular joint point would see

19
00:01:19,630 --> 00:01:23,370
that there are different types of advice is as before,

20
00:01:23,370 --> 00:01:24,920
after around,

21
00:01:24,920 --> 00:01:29,540
after returning after throwing spring A or B may create chains

22
00:01:29,540 --> 00:01:32,640
of advice is for one single joint point,

23
00:01:32,640 --> 00:01:37,110
and a point cut is a predicated that matches join points on

24
00:01:37,110 --> 00:01:41,430
advice is associate ID with a point cut expression and runs at

25
00:01:41,430 --> 00:01:44,240
any joint point matching that point cut,

26
00:01:44,240 --> 00:01:53,120
for example, the execution of a method with a 13 name and more key GOP terms.

27
00:01:53,120 --> 00:01:57,220
The target object is the object being advised by one or

28
00:01:57,220 --> 00:02:00,670
more aspects would see that spring GOP will create a

29
00:02:00,670 --> 00:02:03,080
runtime proxy for the target object.

30
00:02:03,080 --> 00:02:06,730
In orderto add the aspects to the execution.

31
00:02:06,730 --> 00:02:09,490
Our introduction is used to declare additional methods

32
00:02:09,490 --> 00:02:11,960
or fields for a given class spring.

33
00:02:11,960 --> 00:02:16,840
GOP allows that the advised object receives new interfaces to implement.

34
00:02:16,840 --> 00:02:20,180
You can have a given class that receives additional behavior

35
00:02:20,180 --> 00:02:23,870
at runtime with the help of introductions.

36
00:02:23,870 --> 00:02:27,690
The GOP proxy is the object created by the GOP framework so

37
00:02:27,690 --> 00:02:30,450
that it can add the aspects in the execution.

38
00:02:30,450 --> 00:02:34,270
Springer be provides two ways to create the GOP proxy.

39
00:02:34,270 --> 00:02:38,190
The standard mechanism of proxy creation called J D.

40
00:02:38,190 --> 00:02:42,610
K Dynamic Proxy and AH see Jilib, or cogeneration.

41
00:02:42,610 --> 00:02:49,910
Library proxy will show how both of them act during the next model With ink is

42
00:02:49,910 --> 00:02:53,770
the operation of program transformation that applies the aspect to the target

43
00:02:53,770 --> 00:02:57,840
object in order to create the advised object.

44
00:02:57,840 --> 00:02:58,530
Spring, eh?

45
00:02:58,530 --> 00:02:59,000
Oh peeper.

46
00:02:59,000 --> 00:03:05,590
First weaving at runtime, this picture summarizes the runtime living operation.

47
00:03:05,590 --> 00:03:09,840
The aspect Weaver puts had tohave the base code of the target object

48
00:03:09,840 --> 00:03:13,260
and the program transformation defined by the aspect.

49
00:03:13,260 --> 00:03:18,630
And we'll get the modified coat to conclude the first

50
00:03:18,630 --> 00:03:21,110
model of our journey with spring GOP.

51
00:03:21,110 --> 00:03:23,970
We take a brief look at what we're covered so far.

52
00:03:23,970 --> 00:03:26,010
We demonstrated the need for aspect oriented

53
00:03:26,010 --> 00:03:28,940
programming and how we arrived to it.

54
00:03:28,940 --> 00:03:32,730
We explain the GOP use cases for orthogonal functionality,

55
00:03:32,730 --> 00:03:37,660
including here logging, exception, handling user writes checks,

56
00:03:37,660 --> 00:03:42,340
cashing transactions and tweaking a legacy application.

57
00:03:42,340 --> 00:03:45,320
We define the terms of aspects join points,

58
00:03:45,320 --> 00:03:48,490
advices, point cuts that are, get objects,

59
00:03:48,490 --> 00:03:50,140
introductions.

60
00:03:50,140 --> 00:03:55,150
And we explained the functionality of a Opie Processes and a Opie weaving.

61
00:03:55,150 --> 00:03:58,440
Our next goal will be to put all these terms and

62
00:03:58,440 --> 00:04:07,000
notions in action through code examples. This is to follow in the next model

