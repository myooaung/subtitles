1
00:00:01,940 --> 00:00:05,240
[Autogenerated] we'll move for her to our next demonstration.

2
00:00:05,240 --> 00:00:10,410
We implement a new feature working with aspect for the normal execution floor.

3
00:00:10,410 --> 00:00:14,670
More exactly, we're going to track the operations through logging,

4
00:00:14,670 --> 00:00:18,760
and we're going to use the before annotation the after

5
00:00:18,760 --> 00:00:26,350
annotation and the after returning an imitation in order to

6
00:00:26,350 --> 00:00:28,680
introduce the spin your profession AL it ease.

7
00:00:28,680 --> 00:00:34,240
The first thing to do is to add two new dependencies to the poem XML file.

8
00:00:34,240 --> 00:00:38,500
First, we'll add the spring GOP dependency.

9
00:00:38,500 --> 00:00:42,260
Then we'll add the spring aspects dependency.

10
00:00:42,260 --> 00:00:45,870
The first new requirement to be implemented is two lager message.

11
00:00:45,870 --> 00:00:50,140
Every time the get idea method of the flight class is called,

12
00:00:50,140 --> 00:00:54,080
the idea of the flight is its most sensitive information,

13
00:00:54,080 --> 00:00:55,570
and we should keep track.

14
00:00:55,570 --> 00:01:00,140
Every time this one is accessed,

15
00:01:00,140 --> 00:01:04,860
we will create a separate package called com dot parasite dot springer.

16
00:01:04,860 --> 00:01:12,690
P dot flights management don't aspect where to introduce the logging aspect,

17
00:01:12,690 --> 00:01:14,890
and we'll create this logging aspect.

18
00:01:14,890 --> 00:01:24,240
One class will mark this class with the aspect annotation,

19
00:01:24,240 --> 00:01:28,000
and we'll introduce this private longer field.

20
00:01:28,000 --> 00:01:34,840
We introduced this looking advice, Get I D method that will log a message.

21
00:01:34,840 --> 00:01:35,490
Well, Adam,

22
00:01:35,490 --> 00:01:39,980
before annotated method to log the fact that the method

23
00:01:39,980 --> 00:01:44,830
calm parasite spring GOP flights management domain flight

24
00:01:44,830 --> 00:01:48,020
don't get i d will be called you.

25
00:01:48,020 --> 00:01:52,670
See here the joint point that this before method is executed

26
00:01:52,670 --> 00:01:55,320
right before the execution of the method.

27
00:01:55,320 --> 00:02:02,280
With this signature, we also need to configure the application to use a o.

28
00:02:02,280 --> 00:02:03,140
P.

29
00:02:03,140 --> 00:02:07,760
This AARP aspect J Dash Auto Proxy directive will enable

30
00:02:07,760 --> 00:02:11,640
spring to use the AARP facilities,

31
00:02:11,640 --> 00:02:17,290
and we need to introduce this looking aspect one being belonging to the class.

32
00:02:17,290 --> 00:02:22,540
Calm the parasite dot spring europea dot flights management thought aspects,

33
00:02:22,540 --> 00:02:23,220
not logging.

34
00:02:23,220 --> 00:02:28,520
Expect one in order the logging aspect toe Get in action where you mind

35
00:02:28,520 --> 00:02:32,070
that by introducing these beans into this configuration,

36
00:02:32,070 --> 00:02:40,810
they will arrive under the control of the spring container?

37
00:02:40,810 --> 00:02:46,330
Let's run the current application.

38
00:02:46,330 --> 00:02:51,530
Let's have a look at the results and we see this newly

39
00:02:51,530 --> 00:02:54,140
introduced crosscutting functionality.

40
00:02:54,140 --> 00:02:58,150
The looking message appears right before calling the

41
00:02:58,150 --> 00:03:04,440
get I D method from the flight class.

42
00:03:04,440 --> 00:03:07,550
The next requirement asks to log a message after

43
00:03:07,550 --> 00:03:10,740
successfully executing any print method,

44
00:03:10,740 --> 00:03:17,340
either the one from the flight or the one from the passenger class.

45
00:03:17,340 --> 00:03:24,250
In order to do this will create the logging advice print method well annotated

46
00:03:24,250 --> 00:03:29,560
with after returning as it has to be executed on Lee after successfully

47
00:03:29,560 --> 00:03:35,230
executing another method and which is the method that this looking advice

48
00:03:35,230 --> 00:03:38,820
print needs to be executed after its success?

49
00:03:38,820 --> 00:03:42,200
Any method that ants with Sprint because you are looking for

50
00:03:42,200 --> 00:03:45,290
both the print metal from the flight class and the print

51
00:03:45,290 --> 00:03:47,540
method from the passenger class.

52
00:03:47,540 --> 00:03:52,210
As the information is printed and may become visible for different people,

53
00:03:52,210 --> 00:03:59,310
we are looking this message as warning.

54
00:03:59,310 --> 00:04:04,810
Let's run the current application.

55
00:04:04,810 --> 00:04:11,360
Let's have a look at the result and we get this cross cutting

56
00:04:11,360 --> 00:04:18,340
functionality that the print method has been called.

57
00:04:18,340 --> 00:04:21,940
And there is a new requirement asking to log messages for

58
00:04:21,940 --> 00:04:26,230
any ticket method that is called tickets are the most

59
00:04:26,230 --> 00:04:28,640
sensitive objects in the applications.

60
00:04:28,640 --> 00:04:30,790
Tons of them are created every day,

61
00:04:30,790 --> 00:04:37,760
and we should keep track of everything that happens to them in order to keep

62
00:04:37,760 --> 00:04:41,540
track of the execution of the metals from the ticket class.

63
00:04:41,540 --> 00:04:47,840
We're introducing this logging advice method when we re executive,

64
00:04:47,840 --> 00:04:50,510
but introduce this point cut referring to anti matter within

65
00:04:50,510 --> 00:04:55,250
the class Corn dog parole site dot spring GOP dot flights

66
00:04:55,250 --> 00:05:00,840
management dot domain Don't take it,

67
00:05:00,840 --> 00:05:08,140
and we are annotating this logging advice mattered with the after an imitation,

68
00:05:08,140 --> 00:05:12,740
providing as argument the all ticket methods point cut.

69
00:05:12,740 --> 00:05:17,490
These means that the method will be executed after any method that

70
00:05:17,490 --> 00:05:23,380
matches the point cut defined by the all ticket methods.

71
00:05:23,380 --> 00:05:28,540
Let's execute the application.

72
00:05:28,540 --> 00:05:30,250
Having a look at the results,

73
00:05:30,250 --> 00:05:39,000
we see the cross cutting functionality recording that different metals from the ticket class have been executed.

