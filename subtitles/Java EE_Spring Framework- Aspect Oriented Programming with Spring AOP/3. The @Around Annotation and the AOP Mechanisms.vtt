WEBVTT
1
00:00:02.590 --> 00:00:05.630
[Autogenerated] and will demonstrate now more capabilities of aspect.

2
00:00:05.630 --> 00:00:10.000
J and its annotations would continue the demonstration

3
00:00:10.000 --> 00:00:16.440
of Aspect J based Spring A or B, and we look at the around annotation.

4
00:00:16.440 --> 00:00:21.600
We'll discuss the aspect oriented program mechanisms and will show

5
00:00:21.600 --> 00:00:29.580
how the creation of proxy objects takes place.

6
00:00:29.580 --> 00:00:31.940
Let's go back now to our coat.

7
00:00:31.940 --> 00:00:35.900
Remember, we have a spring application containing a few classes.

8
00:00:35.900 --> 00:00:38.890
Passenger The passenger,

9
00:00:38.890 --> 00:00:44.930
though interface the passenger door in class and the passengers management

10
00:00:44.930 --> 00:00:49.670
class that contains the main method will now create the aspect.

11
00:00:49.670 --> 00:00:55.610
Plus, it is our previously introduced looking aspect class,

12
00:00:55.610 --> 00:01:01.440
but this time will show how to use the around annotation.

13
00:01:01.440 --> 00:01:07.640
First, we have an irritated the class with the aspect annotation.

14
00:01:07.640 --> 00:01:13.180
It contains a private longer field and this metal annotated with

15
00:01:13.180 --> 00:01:16.500
surround that we're going to explain in detail.

16
00:01:16.500 --> 00:01:19.940
According to the argument of the around an imitation,

17
00:01:19.940 --> 00:01:24.810
this method will be executed around the execution of any

18
00:01:24.810 --> 00:01:28.240
method whose name ends with passenger.

19
00:01:28.240 --> 00:01:30.530
The method may belong to any package,

20
00:01:30.530 --> 00:01:34.500
may receive any arguments and may return anything.

21
00:01:34.500 --> 00:01:39.970
You see that this lock method keeps a reference to the proceeding joint point,

22
00:01:39.970 --> 00:01:42.590
meaning the execution of the original method.

23
00:01:42.590 --> 00:01:46.940
First, we are going to get the metal name using these Joint point.

24
00:01:46.940 --> 00:01:49.110
Don't get signature and dot kid name.

25
00:01:49.110 --> 00:01:52.310
Then we'll take the method arguments by using these turning points.

26
00:01:52.310 --> 00:01:54.090
Don't get arcs,

27
00:01:54.090 --> 00:01:58.150
and we are going toe lager and inform message that we call the

28
00:01:58.150 --> 00:02:01.850
method with this name and its first argument,

29
00:02:01.850 --> 00:02:05.040
then will execute the original method.

30
00:02:05.040 --> 00:02:06.040
The joint point.

31
00:02:06.040 --> 00:02:06.980
Don't proceed.

32
00:02:06.980 --> 00:02:08.210
Launches in execution.

33
00:02:08.210 --> 00:02:10.670
The original method will then look the result.

34
00:02:10.670 --> 00:02:14.440
Return by the method and we'll return the result itself.

35
00:02:14.440 --> 00:02:17.970
Let's move now to the configuration that we need to change into the

36
00:02:17.970 --> 00:02:24.990
AARP dot xml file first with reference to the GOP XML name space

37
00:02:24.990 --> 00:02:26.910
and the reference to the spring a o.

38
00:02:26.910 --> 00:02:27.330
P.

39
00:02:27.330 --> 00:02:29.070
Access the or XML scheme.

40
00:02:29.070 --> 00:02:34.620
Our definition that is needed by the GOP exam and name space.

41
00:02:34.620 --> 00:02:38.550
The GOP Aspect J Dash auto proxy directive from the spring

42
00:02:38.550 --> 00:02:42.400
configuration enables the aspect J support,

43
00:02:42.400 --> 00:02:47.450
and we need to add this looking aspect being belonging to the com dot parasite.

44
00:02:47.450 --> 00:02:51.620
Those spring GOP dot example three dot logging aspect class.

45
00:02:51.620 --> 00:02:55.980
Introducing it into the AARP dot xml configuration file.

46
00:02:55.980 --> 00:03:01.340
These bean will arrive under the control of the spring container.

47
00:03:01.340 --> 00:03:07.800
Let's see now how the application works and we're getting your

48
00:03:07.800 --> 00:03:11.460
total functionality provided by the longer aspect,

49
00:03:11.460 --> 00:03:18.400
this time using aspect J and the around annotation.

50
00:03:18.400 --> 00:03:22.840
We remind that we have replaced the usage of the before and after

51
00:03:22.840 --> 00:03:26.540
method with the usage of one single method.

52
00:03:26.540 --> 00:03:30.970
This log method, annotated with around the around annotation,

53
00:03:30.970 --> 00:03:35.260
is more powerful and it provides us access to the

54
00:03:35.260 --> 00:03:38.340
original joint point execution.

55
00:03:38.340 --> 00:03:41.670
This line of code this joint point don't proceed is

56
00:03:41.670 --> 00:03:44.240
executing the original method.

57
00:03:44.240 --> 00:03:48.130
We could have have control and decide if and in which

58
00:03:48.130 --> 00:03:53.190
conditions toe execute the original method.

59
00:03:53.190 --> 00:03:56.520
Let's stop for a minute from the cover demonstration and explain the

60
00:03:56.520 --> 00:04:00.540
mechanisms that are created behind the aspect.

61
00:04:00.540 --> 00:04:02.940
What did we create so far?

62
00:04:02.940 --> 00:04:08.330
We created a passenger thou am plus that implements the passenger door

63
00:04:08.330 --> 00:04:12.940
interface and is defining the get passenger method.

64
00:04:12.940 --> 00:04:18.340
And we also created the Logging Aspect class that contains

65
00:04:18.340 --> 00:04:21.540
the log method with the around annotation.

66
00:04:21.540 --> 00:04:25.440
What we'll do the spring aspect oriented programming make honest.

67
00:04:25.440 --> 00:04:30.840
In this case, Spring will create a passenger door proxy class,

68
00:04:30.840 --> 00:04:34.650
meaning a substitute class in order to be able to substitute the

69
00:04:34.650 --> 00:04:38.950
original passenger thou in class passenger door proxy will have

70
00:04:38.950 --> 00:04:43.550
to implement the same passenger doll interface and to define the

71
00:04:43.550 --> 00:04:45.510
same get passenger method.

72
00:04:45.510 --> 00:04:48.910
This method will first create a logging aspect.

73
00:04:48.910 --> 00:04:53.570
Then it will create a proceeding joint point with a proceed method.

74
00:04:53.570 --> 00:04:57.490
These proceed method will delegate its execution.

75
00:04:57.490 --> 00:05:01.990
Tow the original passenger DAO dot get passenger of i D.

76
00:05:01.990 --> 00:05:08.030
Then it will return the result of logging aspect dot log of joint point.

77
00:05:08.030 --> 00:05:12.240
So jumping into the log method from the logging aspect class.

78
00:05:12.240 --> 00:05:14.930
Well, first, yet the method name.

79
00:05:14.930 --> 00:05:18.280
By executing this joint points don't get signature.

80
00:05:18.280 --> 00:05:19.640
Don't get name.

81
00:05:19.640 --> 00:05:23.660
We'll get the arguments of the method by executing these German point dot,

82
00:05:23.660 --> 00:05:25.820
get arcs and, well, ogre.

83
00:05:25.820 --> 00:05:30.130
The bugging message with the metal name and its first argument

84
00:05:30.130 --> 00:05:32.360
will then execute the original method itself.

85
00:05:32.360 --> 00:05:37.940
We longer debugging message with the method name and its result and will return

86
00:05:37.940 --> 00:05:43.840
the result of the execution of the original method itself,

87
00:05:43.840 --> 00:05:47.950
which are the strategy is to create the proxy objects we mentioned in

88
00:05:47.950 --> 00:05:52.070
the previous model that there is a J take a dynamic process tender

89
00:05:52.070 --> 00:05:56.240
mechanism and a CD lib proxy mechanism.

90
00:05:56.240 --> 00:05:59.340
How does this one's work on the left hand side.

91
00:05:59.340 --> 00:06:04.770
It is the case when the target class is implementing a certain interface spring.

92
00:06:04.770 --> 00:06:09.260
A Opie will create a proxy class and in order this class to

93
00:06:09.260 --> 00:06:12.210
be ableto play the role of the substitute.

94
00:06:12.210 --> 00:06:15.810
It will have to implement the same interface in the case.

95
00:06:15.810 --> 00:06:19.090
The target class does not implement an interface.

96
00:06:19.090 --> 00:06:24.130
The second mechanism see Julie Brooksie mechanism needs to be put in practice.

97
00:06:24.130 --> 00:06:27.570
The proxy class will extend the target class itself,

98
00:06:27.570 --> 00:06:31.180
and this way it will be able to play the role of the substitute.

99
00:06:31.180 --> 00:06:36.600
This is what we see on the right hand side for our concrete.

100
00:06:36.600 --> 00:06:37.240
Please.

101
00:06:37.240 --> 00:06:42.250
Our passenger, though impress, is implementing the passenger the interface.

102
00:06:42.250 --> 00:06:44.760
So as we see on the left hand side,

103
00:06:44.760 --> 00:06:47.590
Spring a Opie will create a proxy class that will

104
00:06:47.590 --> 00:06:50.480
implement the same passenger dollar interface.

105
00:06:50.480 --> 00:06:53.020
And this way it will be able to play the role of the

106
00:06:53.020 --> 00:06:55.430
substitute if our class passenger,

107
00:06:55.430 --> 00:06:58.950
though imp was not implementing any interface spring,

108
00:06:58.950 --> 00:07:04.540
a Opie will come with this proxy class to extend directly passenger Dow imp

109
00:07:04.540 --> 00:07:09.970
and allow this proxy to play the role of the substitute.

110
00:07:09.970 --> 00:07:13.350
Let's move back to the coat and show the mechanism of

111
00:07:13.350 --> 00:07:16.440
creating proxy objects in action.

112
00:07:16.440 --> 00:07:20.190
Our passenger dollar in class is implementing passenger doll.

113
00:07:20.190 --> 00:07:23.450
So for creating the proxy class, the J.

114
00:07:23.450 --> 00:07:28.010
D K dynamic proxy mechanism is used.

115
00:07:28.010 --> 00:07:31.240
If we have a look in this a o p dot xml class,

116
00:07:31.240 --> 00:07:37.380
we see that the type of the passenger Dobie is exactly passenger dowel imp.

117
00:07:37.380 --> 00:07:42.090
So what would happen if instead of costing toe passenger doll

118
00:07:42.090 --> 00:07:45.120
which is the interface will cost a passenger?

119
00:07:45.120 --> 00:07:46.980
The imp?

120
00:07:46.980 --> 00:07:51.540
Let's check the execution of the program.

121
00:07:51.540 --> 00:07:52.740
Surprise!

122
00:07:52.740 --> 00:07:53.850
We are getting a job.

123
00:07:53.850 --> 00:07:56.800
Are long class cost exception?

124
00:07:56.800 --> 00:07:59.800
The proxy class that is created by spring cannot be

125
00:07:59.800 --> 00:08:03.440
cast to our passenger thou in class.

126
00:08:03.440 --> 00:08:04.860
Why is it happening?

127
00:08:04.860 --> 00:08:07.270
Because Spring is applying the J.

128
00:08:07.270 --> 00:08:07.420
D.

129
00:08:07.420 --> 00:08:11.890
K dynamic proxies strategy and it is creating a proxy class that is

130
00:08:11.890 --> 00:08:14.840
implementing director the passenger now interface.

131
00:08:14.840 --> 00:08:19.310
So even if the two classes are implementing the same interface,

132
00:08:19.310 --> 00:08:21.840
they do not have any inheritance relationship.

133
00:08:21.840 --> 00:08:25.430
So one class cannot be cost toe another one.

134
00:08:25.430 --> 00:08:28.190
Let's show how to force the usage of the sea Jilib

135
00:08:28.190 --> 00:08:30.980
strategy proxy mechanism instead of the J.

136
00:08:30.980 --> 00:08:31.120
D.

137
00:08:31.120 --> 00:08:34.470
K dynamic proxies standard mechanism.

138
00:08:34.470 --> 00:08:39.840
Let's make the class passenger thou imp not to implement any interface.

139
00:08:39.840 --> 00:08:43.100
We are getting the bean from the container and wear custom.

140
00:08:43.100 --> 00:08:47.140
Get directly to passenger thou imp.

141
00:08:47.140 --> 00:08:52.820
That's around the coat success.

142
00:08:52.820 --> 00:08:55.540
The code is running fine.

143
00:08:55.540 --> 00:08:57.070
What did it happen?

144
00:08:57.070 --> 00:09:02.010
Spring GOP used the second mechanism and created a proxy class that

145
00:09:02.010 --> 00:09:08.830
is directly extending the passenger thou in class.

146
00:09:08.830 --> 00:09:10.440
Let's try something more.

147
00:09:10.440 --> 00:09:15.440
Make the passenger the imp class final.

148
00:09:15.440 --> 00:09:26.640
Let's re run the application and we're getting on exception.

149
00:09:26.640 --> 00:09:28.750
The messages are very significant.

150
00:09:28.750 --> 00:09:34.500
Could not generate CD leaps up class of class passenger, thou imp.

151
00:09:34.500 --> 00:09:37.050
Common causes of this problem include using a final

152
00:09:37.050 --> 00:09:39.590
class or a non visible class.

153
00:09:39.590 --> 00:09:41.820
So we are told that spring a O.

154
00:09:41.820 --> 00:09:42.020
P.

155
00:09:42.020 --> 00:09:47.270
Is using the sea Jilib strategy and that it cannot supplies a final class.

156
00:09:47.270 --> 00:09:48.150
Looking back here,

157
00:09:48.150 --> 00:09:52.940
we see that from the two strategies none of them can be applied in this case.

158
00:09:52.940 --> 00:09:57.230
Our passenger thou in plus is no longer implementing any interface.

159
00:09:57.230 --> 00:09:58.960
And when spring a O.

160
00:09:58.960 --> 00:09:59.140
P.

161
00:09:59.140 --> 00:10:06.200
Is trying to subclass it, it fails as our class is a final one.

162
00:10:06.200 --> 00:10:11.440
Let's give up to the idea of making the passenger the Imp class final

163
00:10:11.440 --> 00:10:16.290
and make the get passenger method of final method.

164
00:10:16.290 --> 00:10:22.140
Let's run the application.

165
00:10:22.140 --> 00:10:25.960
You see the execution of the application has succeeded,

166
00:10:25.960 --> 00:10:29.640
but the cross cutting functionality could not be introduced.

167
00:10:29.640 --> 00:10:31.060
This is because spring A O.

168
00:10:31.060 --> 00:10:31.240
P.

169
00:10:31.240 --> 00:10:36.810
Is able to introduce the proxy class by extending the passenger thou in class.

170
00:10:36.810 --> 00:10:46.000
But it is not able to change the behavior of the get passenger method. That method is final.

