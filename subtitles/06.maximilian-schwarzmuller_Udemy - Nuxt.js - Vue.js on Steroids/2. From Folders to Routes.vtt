WEBVTT

00:02.090 --> 00:10.160
So one of the main ideas besides the server side rendering of the web which is basically the core thing

00:10.160 --> 00:17.660
next is able to do is the fact that you can configure your entire viewer app and mainly the routing

00:17.720 --> 00:25.340
of your web so the pages you support through folders and files in a normal viewer app you would have

00:25.340 --> 00:29.080
to to find routes in a route conflict that looks something like this.

00:29.240 --> 00:32.450
You have a bunch of javascript objects in an array.

00:32.600 --> 00:39.320
And for each object you have a POV property and to component which should be loaded and you're passing

00:39.320 --> 00:46.460
this to view router the official routing package of view and therefore you can then load DS you or else

00:46.640 --> 00:53.060
so your domain slash nothing slash product slash products and then some dynamic products ID in this

00:53.060 --> 00:54.420
example.

00:54.560 --> 01:02.300
Now with next you can define or create the same structure and the same route can think without routing

01:02.300 --> 01:03.940
such a conflict file.

01:03.950 --> 01:11.530
Instead you create a folder with a file inside of it like for The Root route directly in the page directory.

01:11.540 --> 01:12.460
That's important.

01:12.470 --> 01:18.090
That is where all your routing folders have to live in the page directory.

01:18.170 --> 01:22.660
You don't create a subfolder but just add the indexed on The View file.

01:22.700 --> 01:25.540
The name doesn't matter here it has to be indexed.

01:25.790 --> 01:29.720
And this will then be your starting component for Slash.

01:29.780 --> 01:30.660
Nothing.

01:31.340 --> 01:36.630
For over pauvres you would create some folders with index files in there.

01:36.680 --> 01:39.840
Or you could create for the second route here.

01:39.950 --> 01:45.500
You could also create a product stop view file but I'll come back to that and when to choose which in

01:45.500 --> 01:46.760
a second.

01:46.850 --> 01:56.080
So you create a folder structure that reflects your u r l structure and basically that is pretty straightforward

01:56.090 --> 02:02.380
to think about because your u r l can be seen as a payoff in a nested folder and that's just what you're

02:02.390 --> 02:03.440
creating here.

02:03.650 --> 02:08.300
So let's see this navigation through folders and files in action.

02:08.300 --> 02:14.790
I created a brand new next project in exactly the same way with the same settings as in the first court

02:14.830 --> 02:15.540
martial.

02:15.560 --> 02:17.590
So create next day.

02:18.080 --> 02:23.930
And I therefore have the same starting folder I named this project Naks course but the name is totally

02:23.930 --> 02:24.780
up to you.

02:24.950 --> 02:29.760
I started the development server in the terminal integrated into my ID.

02:29.780 --> 02:37.370
But it's the normal terminal or command prompt here and they get this page on localhost 3000 therefore

02:38.090 --> 02:42.670
now this page is folder is now what's responsible for that.

02:42.680 --> 02:45.380
I already mentioned this in a first course module.

02:45.440 --> 02:51.400
There we have the index view file which holds the code we see on that page here.

02:51.410 --> 02:53.370
Now as I said the naming does matter.

02:53.390 --> 02:57.410
It has to be in the pages folder because that happens next.

02:57.560 --> 03:05.510
These are my well pages of the app and it has to be named index dot view dot view because it's a view

03:05.510 --> 03:13.130
component next polls up on Google so users view components and index because just as we use that index

03:13.130 --> 03:19.460
thought HVM a file on a normal static web server where then the web server also knows that it should

03:19.460 --> 03:22.920
load this file if you navigate to just slash nothing.

03:23.090 --> 03:24.430
Well that's the same here.

03:24.590 --> 03:29.610
The index file is the default file to be loaded if you navigate to something.

03:29.630 --> 03:35.090
Now as I showed you in the first chorus module you can add a second fall on the pages folder which you

03:35.090 --> 03:41.620
could name users view and in that file you simply create a template with a simple output.

03:41.660 --> 03:48.610
The users view for example and design all of a sudden adds this route to your route config.

03:48.770 --> 03:52.650
So behind the scenes a route can conflict like this will now have been created.

03:52.850 --> 04:00.580
You would have one route which has Poth nothing where you load the index files or the component in there

04:01.160 --> 04:02.890
and you got a second.

04:02.920 --> 04:14.200
Now which would be slash users where you load the users start you file so the users component essentially.

04:14.420 --> 04:19.880
So that is what was created behind the scenes you could say and that is why if we save everything we

04:19.880 --> 04:22.150
can go back and we can reach that secte route.

04:22.190 --> 04:29.360
First of all reloading the app to register the new conflict and then entering users and we see the users

04:29.470 --> 04:30.740
view.

04:30.770 --> 04:38.180
Now an alternative would have been to not create this user restart view file but to create a user's

04:38.300 --> 04:39.160
folder.

04:39.200 --> 04:45.630
So I created this new folder and moved that user thought you file in there and name it indexed view.

04:45.650 --> 04:52.190
Now the name is important because as I just said if you navigate to slash some folder or slash nothing

04:52.610 --> 04:58.820
then the index that you follow will be rendered automatically with that set up if you reload as Slash

04:58.820 --> 05:00.120
users page here.

05:00.290 --> 05:05.120
You see it still works and it works exactly the same way as before.

05:05.120 --> 05:08.610
Now what is the difference then which approach should you use.

05:08.810 --> 05:14.900
Well if you use the Folder approach as I use it here in my opinion it becomes a bit easier to read because

05:14.900 --> 05:20.630
you now really have a folder structure just as you can think of your you are l as a full structure where

05:20.680 --> 05:22.510
in the slash user's folder.

05:22.700 --> 05:26.960
And then we can go into the user folder for the ID 1 and so on.

05:26.960 --> 05:32.850
So that is why I would recommend using that folder driven approach with index that you files.

05:32.960 --> 05:36.490
But technically it's also registered as a new route.

05:36.530 --> 05:43.130
If you create a file named differently than indexed view then this file name will be the POF you can

05:43.130 --> 05:44.400
navigate to.

05:44.780 --> 05:47.320
This is the core concept of pages.

05:47.420 --> 05:50.150
You create folders or files.

05:50.270 --> 05:54.070
And with that you create a route conflict behind the scenes.

05:54.080 --> 06:01.380
Now of course we can do a bit more and for example we can also load dynamic parameters like your example

06:01.380 --> 06:02.740
I just mentioned.

06:02.750 --> 06:07.390
Let's say we want to go to slash 1 so to pick the user with the ID 1.

06:07.700 --> 06:11.640
Obviously that's dynamic and we don't want to create a bunch of subfolder.

06:11.660 --> 06:17.720
You're one to free because we couldn't even do that as a developer because we don't know which users

06:17.750 --> 06:22.700
our app will have and yet so dynamic parameters Zaldy support.

06:22.850 --> 06:24.350
We can even nest these.

06:24.410 --> 06:27.650
So a bunch of exciting things we can do.

06:27.650 --> 06:30.440
Let's take a look at these things in the next lecture.
