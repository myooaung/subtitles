WEBVTT

00:02.140 --> 00:07.210
So let's add async data to a single host year when we have a post ID.

00:07.240 --> 00:12.260
The special thing here is that we typically want to fetch data for just that single post.

00:12.280 --> 00:19.010
So let's first of all add a script section to that index that you fall in there we can add a sync data.

00:19.240 --> 00:25.990
And as you learned we can now use async datum to use the callback and return the data for example within

00:26.080 --> 00:26.920
a timeout.

00:26.980 --> 00:34.500
So some async code which we use to simulate a HTP request and again we will use real HTB requests later.

00:34.960 --> 00:41.920
So now here let's pass that context object again and then that callback method or function we can execute

00:42.790 --> 00:44.360
in the async data here.

00:44.380 --> 00:49.750
I again want to execute set timeout and let's say we wait for one second that say dessous as long as

00:49.750 --> 00:52.740
it takes to get our data back.

00:52.750 --> 00:58.660
And again this is just Dammy code to simulate an asynchronous task and after just one second I'll execute

00:58.660 --> 01:05.550
the Colback pass NULL to indicate we got no error and then pass our data.

01:05.650 --> 01:10.690
So a javascript object did will become or will be merged with our Aberg component data.

01:10.690 --> 01:16.390
If we had any if we don't have any it will be the entire component data we work with and there I will

01:16.390 --> 01:19.330
add a loaded post not as a single post.

01:19.330 --> 01:26.350
And of course we can take one of the posts from the loaded post from the other pages like this.

01:26.350 --> 01:30.720
However this loaded post you're probably has some different fields.

01:30.760 --> 01:35.290
Because here we all need to have the date and do you offer.

01:35.290 --> 01:37.230
So we should also get this.

01:37.240 --> 01:43.690
So let's say besides title and preview text here we also have to offer Maximillian maybe on my name

01:43.720 --> 01:45.290
or your name whatever you like.

01:45.550 --> 01:51.880
And we have the updated date which just could be new date which makes it the current date of today.

01:51.940 --> 01:54.590
But hey we can change this later for now.

01:54.600 --> 01:55.590
Is this good.

01:55.900 --> 01:57.700
So now we get all these fields.

01:57.730 --> 02:01.490
We also will need a content because we only have to preview text.

02:01.510 --> 02:06.880
Now here we would have to fold post content now to not bore you with me typing for one hour.

02:06.880 --> 02:15.050
I will simply enter some dummy text here some dummy text which is definitely not the preview text though.

02:15.250 --> 02:16.810
So this is what will output.

02:17.080 --> 02:23.080
Now we got this loaded post property available in the component because the loading at an async data

02:23.710 --> 02:31.090
that means that in our post body here in the template we can now access loaded post title.

02:31.090 --> 02:43.150
For example we can print out last updated on Loaded post updated date we can here print out loaded post

02:43.680 --> 02:47.000
offer there we would have the content.

02:47.050 --> 02:56.840
So we have loaded post content and now we're still not using the context right now here of course we

02:56.840 --> 02:59.100
just have dumb data so we don't need that.

02:59.120 --> 03:10.530
But let's actually output the context let's use it by simply for now outputting the entered route parameter

03:10.540 --> 03:17.420
as part of the title later of course we will not manipulate data with that but we will simply fetch

03:17.420 --> 03:18.350
the right data.

03:18.410 --> 03:24.560
So if we send the HTP requests to some API endpoint we typically need to specify for which ID we want

03:24.560 --> 03:25.600
to get back data.

03:25.700 --> 03:29.360
And that ID could then be our route parameter.

03:29.360 --> 03:32.000
So for now lets simply edit the title.

03:32.000 --> 03:39.430
I will add ID colon and then here I want to output the ID before I close the brackets and then Id hear

03:39.420 --> 03:44.610
a can be something I fetched from context parents and then its ID.

03:44.720 --> 03:52.520
Keep in mind parents on the context object gives us access to the same route parents would do in other

03:52.520 --> 03:53.230
places.

03:53.270 --> 04:00.650
So outside of azing data but inside async data this route Perlman's I mean inside async data we can't

04:00.680 --> 04:04.280
use that because the component has not been created yet.

04:04.400 --> 04:10.890
This route has not been injected yet hence we got the date on the context and their parents as a convenient

04:10.890 --> 04:13.940
object which holds all roud parameters.

04:13.940 --> 04:15.540
The longer words would be context.

04:15.540 --> 04:21.440
Roud parents this also exists and on that road object youve got all the same properties you have on

04:21.440 --> 04:25.990
the this dollar sign route object in other places of the component.

04:26.030 --> 04:27.400
So I hope this is really clear.

04:27.410 --> 04:28.930
We just can't access this here.

04:29.000 --> 04:33.350
But we got the context which is provided by next which has all the information.

04:33.710 --> 04:37.380
So if that were outputting the ideas part of the title.

04:37.430 --> 04:38.980
Now let's check if that works.

04:39.080 --> 04:45.650
Let's save this and make sure that you save all files and then go back and click on a single post.

04:45.680 --> 04:46.820
It takes a second.

04:46.940 --> 04:54.290
And then we indeed load depost with all the async data and the ID and it can prove this to you if we

04:54.290 --> 04:59.000
go back and click on the second post we actually output ID to here.

04:59.600 --> 05:01.250
And this is how that works.

05:01.280 --> 05:09.320
This is how we can use the Context object to get useful routing data or information we might need.

05:09.380 --> 05:14.600
Feel free to console log it again to dig in and see what it has to offer we'll also use our parts of

05:14.600 --> 05:15.890
it later in the course.

05:16.220 --> 05:23.110
And with that we got the entire power we need to run code on the server for the first load fetched data

05:23.150 --> 05:28.910
there and then run it on the client for the subsequent navigation access to user might do.
