WEBVTT

00:02.130 --> 00:04.720
We're storing the token in our store.

00:04.740 --> 00:13.080
The problem just is this story gets re-initialize on every page refresh so persisting our log in tokened

00:13.140 --> 00:19.980
across page refreshes is not possible right now in a traditional single page application.

00:19.980 --> 00:26.820
You want stored a token in local storage and when your application starts up you would typically just

00:27.030 --> 00:30.040
check local storage for the existence of the token.

00:30.120 --> 00:36.870
See if it's still valid from expiry time perspective and if it is stored in your music store and you're

00:36.870 --> 00:38.040
good to go.

00:38.040 --> 00:41.800
The problem we have is that what do we refresh the page.

00:41.820 --> 00:44.580
We actually execute code on the server.

00:44.670 --> 00:46.440
We can't access local storage.

00:46.440 --> 00:51.240
There are whole store is initialized here with next server in it.

00:51.270 --> 00:54.470
This runs on the server as the name implies.

00:54.480 --> 00:58.440
So here we can check whether we have the token in local storage.

00:58.560 --> 01:00.450
Now there are work arounds.

01:00.450 --> 01:06.780
One thing we can do is we can dispatch an action from within our default layout for example this will

01:06.780 --> 01:12.360
fire when our application starts for the first time and we could use it or from the add in the layout

01:12.570 --> 01:18.450
and we could use it to simply then dispatch an action immediately when the first page using that layout

01:18.480 --> 01:19.710
is getting rendered.

01:19.890 --> 01:25.890
And when that is the case we could dispatch an action where we look into our local storage and initialize

01:25.890 --> 01:28.740
our store with that token if we got it.

01:28.800 --> 01:35.310
Now that is a road we absolutely can take a different approach would be to create a special middleware

01:35.310 --> 01:40.590
which we attach to routes where we need the token where we simply check for the existence of the token

01:40.740 --> 01:41.960
in the middleware.

01:41.990 --> 01:45.930
And if we got token then we set it in the store.

01:46.020 --> 01:48.270
I prefer this approach.

01:48.270 --> 01:54.390
So what we can do is we can first of all stored a token when we get it before we talk about something

01:54.390 --> 01:55.330
else.

01:55.350 --> 02:02.460
So when we get to user and we set the token in our store here in Buick's I also want to reach out to

02:02.460 --> 02:08.620
local storage and said item my token queue the token.

02:08.640 --> 02:11.860
I got back so to the ID token from the response.

02:12.030 --> 02:16.060
Now does this getting stored in local storage to next.

02:16.070 --> 02:25.800
I will add a new action which will name in it off where I also get X context and in turn it off.

02:25.950 --> 02:30.680
I will check local storage and get my token.

02:30.680 --> 02:37.470
I'll store this in a token constant then and this will however be undefined if we don't have a token

02:37.470 --> 02:42.000
in our storage or it will be the token we stored the last time.

02:42.240 --> 02:48.870
We should also not only store the token but we should also store the expiry time saw a set set item

02:49.830 --> 02:51.620
token expiration.

02:51.720 --> 02:58.410
However this should not be resolved expire Zain because that's just an amount in seconds and storing

02:58.410 --> 02:59.720
debt doesn't help us.

02:59.730 --> 03:06.030
We need to know the time stamp when it's expire is not the amount and second because we don't know when

03:06.030 --> 03:08.700
will fatuus the next time.

03:08.700 --> 03:16.150
So actually here I will get the current date with new date and on the current date we can call gets

03:16.150 --> 03:17.340
time.

03:17.470 --> 03:24.110
This gives us the current time in milliseconds and we can simply add result expires in times 1000 there.

03:24.130 --> 03:31.180
This gives us a time stamp in the future when this will expire and we can store this in local storage

03:31.270 --> 03:36.100
in in in it off the air for all to want to get to that.

03:36.190 --> 03:45.610
The motto can be expiration date can be gotten from or can be fed from local storage get item and now

03:45.620 --> 03:54.560
it's token expiration and with these two values I can check if new dates of the current date when we're

03:54.560 --> 04:01.010
executing this is greater then the expiration date which means it has expired.

04:01.020 --> 04:03.670
This is I just want to return and don't do anything else.

04:03.860 --> 04:06.690
If that's not the case we know the token is still valid.

04:07.010 --> 04:13.880
If something else is the case I want to return if we don't have a token because in this case well even

04:13.880 --> 04:16.420
if it would still be valid we don't have one.

04:16.700 --> 04:23.270
So if the date is expired or the tokenistic bar so if the date is prior to our current date or if we

04:23.270 --> 04:25.430
don't have a token then it will return.

04:25.460 --> 04:34.680
In either case we can continue and we can then call you x context commit set token and pass the token

04:34.680 --> 04:36.450
we got from local storage.

04:36.750 --> 04:41.740
So now we're persisting this in the local storage and we're fetching it in IT OFF.

04:42.030 --> 04:48.480
Our goal now has to be to execute in that off to fetch the token from local storage.

04:48.590 --> 04:55.220
When ever we well dispatched as action as I mentioned I want to use a middleware for this.

04:55.230 --> 04:57.090
So let's go to the middleware folder.

04:57.150 --> 04:58.200
Let's create a new file.

04:58.200 --> 05:02.770
And let's name it check of J.S. in there.

05:03.150 --> 05:08.140
I will copy my off Shreyas code and I will do something different.

05:08.160 --> 05:12.720
Know of course I simply want to do one thing.

05:13.020 --> 05:18.240
I want to call context store dispatch in it off.

05:18.420 --> 05:25.920
I would simply call or dispatch does action whenever dismayed or Away runs to see if our token is valid

05:25.950 --> 05:33.040
if we got a token does middleware is now attached to all files where we need a token.

05:33.360 --> 05:39.750
So essentially to all files we attached the middleware to so go to the index that you fall in the admin

05:39.750 --> 05:40.400
area.

05:40.470 --> 05:47.040
And here we now got off but first of all I got to check off the order here is important to execute middleware

05:47.040 --> 05:51.140
in that order and I'll copy that to new post also.

05:52.050 --> 05:59.860
And I will copy it to my index don't you fall here in the post ID folder in the Edmond area.

06:00.060 --> 06:01.940
Now to see the order.

06:02.070 --> 06:06.010
Let's also add icons a long statement to both malwares.

06:06.210 --> 06:08.700
So here we got middleware.

06:09.060 --> 06:15.610
Check off in our copy that CONS a lock step into the off middleware.

06:15.630 --> 06:24.930
So here I got just off let's save all these files and let's return to our application.

06:25.930 --> 06:29.210
If I reload the page I'm redirected to dissipate here.

06:29.500 --> 06:35.850
Let's try to go to just admen and we get an error.

06:36.950 --> 06:37.960
We got an error.

06:37.980 --> 06:41.090
A local storage is not defined.

06:41.440 --> 06:43.610
Now where is that coming from.

06:43.820 --> 06:51.300
As you can see it starts executing check off because it's our first middleware but then in IT OFF failed

06:51.330 --> 06:54.190
because local storage is not defined.

06:54.260 --> 07:01.440
The problem is that I mentioned that we actually run middleware on the server as well as on the client

07:01.440 --> 07:04.360
and if we refresh the page it runs on the server.

07:04.460 --> 07:08.000
The problem is on the server there is no local storage.

07:08.090 --> 07:09.940
That's a browser feature.

07:10.130 --> 07:14.200
So storing the token in local storage like this won't work.

07:14.510 --> 07:21.370
What we of course can do is we can go back to the check of middleware and check where we're running.

07:21.470 --> 07:30.380
I can check if process is client that's using an environment variable provided by next and only if that's

07:30.380 --> 07:33.360
the case then I want to dispatch this action.

07:33.650 --> 07:40.670
Now if we save this and we go back to our application and our reload admin now is S.M. redirect that.

07:40.680 --> 07:42.590
So now this does not fail.

07:42.660 --> 07:46.380
Now it works correctly it executes check off and then chust off.

07:47.190 --> 07:53.510
But the problem now of course is we didn't solve the issue of persisting the token across refresh us.

07:53.520 --> 08:05.550
The only thing we solved is that if I now go back and log in and in between load a non admin route and

08:05.550 --> 08:12.490
then go back to the admin section then it still works because storing the token the local storage worked.

08:12.590 --> 08:18.300
And if I reloaded unknown admin route we went around the problem of executing the middleware on the

08:18.300 --> 08:24.750
server and then by clicking on admen we executed it on the client and therefore could successfully dispatch

08:24.780 --> 08:27.180
in it off and fetch the token.

08:27.180 --> 08:30.820
So this is now working but of course this is not ideal.

08:30.840 --> 08:34.320
We want to support refresh us in the admin area too.

08:34.620 --> 08:38.520
So we should be able to run this middleware on the server too.

08:38.650 --> 08:40.500
Let's work on this in the next ELECTRESS.

08:40.500 --> 08:47.600
However there is one thing I want to fix real quick I noticed if we initialize authentication like this.

08:47.880 --> 08:55.860
Well then we should of course also dispatch our set log out timer here because if we set the token like

08:55.870 --> 08:58.960
that well obviously we want to set the timer too.

08:59.190 --> 09:01.680
So let's call this fetch your set.

09:01.670 --> 09:07.890
Log out timer and I'll pass something to said log out timer and that something should be the difference

09:07.890 --> 09:14.310
between the expiration date and the current date expiration date already is stored as milliseconds so

09:14.330 --> 09:20.190
I'll simply subtract new date gets time.

09:20.200 --> 09:25.810
So the current time stamp in milliseconds dessous the remaining time and will add up plus in front of

09:25.810 --> 09:26.560
expiration date.

09:26.560 --> 09:28.600
To convert this to a number.

09:28.600 --> 09:31.560
Now here I also recognized this check.

09:31.630 --> 09:37.210
I should also use gets time on the current date to convert this to Molli seconds because this already

09:37.210 --> 09:37.960
is.

09:37.960 --> 09:41.570
You can also add up last year to convert this string to a number.

09:41.620 --> 09:44.260
So with these changes in place this is fixed.

09:44.260 --> 09:50.440
Let's now move on to fixing this problem of reloading on the Admin Page and still being able to get

09:50.500 --> 09:51.130
the token.
