WEBVTT

00:02.190 --> 00:04.000
We get back and ID token.

00:04.080 --> 00:06.100
Now of course we also want to use it.

00:06.210 --> 00:11.930
This ID token allows us to send requests to protect the resources on the server.

00:12.360 --> 00:14.900
Right now we don't have such protected resources.

00:15.030 --> 00:22.620
But let's switch back to our fire console and let's go to the database tap There there go to rules and

00:22.620 --> 00:25.590
now I want to lock this database down.

00:25.650 --> 00:28.700
Currently we're giving everyone read and write access.

00:28.740 --> 00:34.860
Now I want to set this to offene could add users only at least for writing data by setting this rule

00:34.860 --> 00:41.400
here all of an equal to NULL does essentially mean set of checks whether we send a valid Jason Webb

00:41.400 --> 00:47.370
token with that incoming request and only if we do so only if authenticated user is trying to write

00:47.760 --> 00:49.870
only then it succeeds.

00:50.070 --> 00:51.810
Reading should be open to everyone.

00:51.840 --> 00:53.610
Writing should not.

00:53.610 --> 00:55.920
Now we actually need to send debt.

00:56.010 --> 01:03.780
Can we get up and log in to our Bacchante and this is something we can now do by attaching it to our

01:03.780 --> 01:10.860
right focused requests which we can find in our store and directions to get at post and we get added

01:10.890 --> 01:11.570
posts.

01:11.580 --> 01:17.450
These are the two types of actions where we actually change something on the backend.

01:17.610 --> 01:20.830
Now for that we need the tokened as I mentioned.

01:21.000 --> 01:29.880
So this token which in the end gets returned to us when we successfully sign in what in turn happens

01:29.880 --> 01:30.740
here.

01:31.170 --> 01:34.110
Now two things can be done or should be done.

01:34.170 --> 01:39.600
One we should store to tokin and our view x store is a great place to do so.

01:39.610 --> 01:48.840
Second we should also put this logic here into action probably so that all our actions all HTP requests

01:49.080 --> 01:53.910
live in our store and are not split up between pages and the store.

01:53.910 --> 02:00.290
So first of all I will wrap this entire code here where we send the request and go to my next genius

02:00.300 --> 02:02.430
fall in the store folder.

02:02.550 --> 02:08.650
Now there I want to add a new action which is authenticate user.

02:08.760 --> 02:15.860
There I get my state and I get my payload my off data.

02:15.870 --> 02:18.080
We could say it here.

02:18.270 --> 02:24.230
I of course want to still sent my request but dis log in is not a whaleboat in here.

02:24.330 --> 02:26.660
That was a property of our component.

02:26.760 --> 02:31.930
So let's assume that our off data simply has to log in property now.

02:32.400 --> 02:34.470
So we need to pass this.

02:34.560 --> 02:40.350
We also need to access email and password and this should also be accessed on all of the data.

02:40.380 --> 02:48.510
So this all data object should have free properties is log in email and password X-ists can still be

02:48.510 --> 02:50.800
accessed like this as we did earlier.

02:50.850 --> 02:53.760
You can use this access in the store.

02:54.180 --> 02:58.950
So now we want to dispatch this action from within our off file here.

02:59.010 --> 03:05.540
Our off in next of you fall I do this by simply calling this store dispatch.

03:05.760 --> 03:08.340
And then we name that authenticate user.

03:08.340 --> 03:08.630
Right.

03:08.670 --> 03:13.240
So that's the action we just created a second ago this action.

03:13.350 --> 03:16.110
Now there we need to pass our special payload.

03:16.110 --> 03:18.690
So let's do that let's go back here.

03:18.930 --> 03:25.350
And as a second argument I'll pass an object where I have is log in which will hold this log in as a

03:25.350 --> 03:26.240
value.

03:26.250 --> 03:32.850
Ray have my e-mail which holds this email as a value and where I pass the password which of course accesses

03:32.970 --> 03:34.500
this password.

03:34.500 --> 03:43.190
Now we're dispatching this action here from our off screen Indian Express for indie action method here.

03:43.230 --> 03:50.850
We now want to store the token once the action completes so once we get back a response for this I will

03:50.850 --> 03:52.510
add a new mutation.

03:52.680 --> 04:01.950
So let's go up to mutations which I'll call set token set token will get my state here and that of course

04:01.950 --> 04:06.500
was an error in the action we get view x context not the state.

04:06.540 --> 04:11.330
So make sure to change this in the mutation we get to state though.

04:11.610 --> 04:19.590
And I also get my payload which should be the token and then I want to set a state token equal to token

04:20.410 --> 04:26.190
or initialize this and I will add a token here which is null initially.

04:26.220 --> 04:32.340
So now we have the set token mutation which takes the token all we now have to do is committed.

04:32.640 --> 04:43.880
So here in our of any case user action when we do get a successful response then I want to actually

04:44.060 --> 04:53.780
execute view x context commit set token and pass result ID token was the name of the property that holds

04:53.780 --> 04:57.800
the token with this approach here.

04:57.810 --> 05:08.270
We're storing the token in our view x store once we get I know also want to return this axiom request

05:08.290 --> 05:09.680
you're in my action.

05:10.060 --> 05:13.450
So did any of it next of you fall.

05:13.450 --> 05:20.270
We can actually add a then block and once we're done we can actually navigate away.

05:20.380 --> 05:29.930
So then I can use my router to push back to let's say the admin page with all this in place.

05:29.960 --> 05:31.170
Let's try it out.

05:31.520 --> 05:35.940
Let's go back to our application here and let's try signing in.

05:35.960 --> 05:42.820
So modem set to log in let me enter valid credentials and I get redirected.

05:42.820 --> 05:43.950
This is looking good.

05:44.140 --> 05:48.320
Let's now look into our view def tools and they're in the store.

05:48.340 --> 05:50.330
We indeed see the token.

05:50.470 --> 05:57.680
So now the tokens in the store in the next lecture we'll actually use it to attach it to outgoing requests.
