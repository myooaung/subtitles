WEBVTT

00:02.190 --> 00:08.170
We had to look at the next configuration and there was this special plugins and modules array.

00:08.250 --> 00:11.880
Now what's the difference what are both plug ins.

00:11.880 --> 00:20.420
Is a very useful feature that allows you to load certain functionalities and execute certain code before

00:20.430 --> 00:23.330
your app is fully rendered and mounted.

00:23.610 --> 00:29.640
And that of course is especially important since you don't have access to that main dot J as file you

00:29.640 --> 00:32.580
typically have in normal of us.

00:32.940 --> 00:40.650
We can actually solve one real problem with plug ins that we have in our app here and that is our components.

00:40.650 --> 00:46.140
Some of the components especially our UI components like the button and the control input are used in

00:46.140 --> 00:49.360
various places like in the admin Post forum.

00:49.380 --> 00:56.430
Therefore we import them here but we also use them for example in the off route here the off page for

00:56.430 --> 00:57.570
the admin section.

00:57.570 --> 00:59.620
Hence we also import them here.

00:59.910 --> 01:07.150
It's really cumbersome to import these components in all our different files pages and components.

01:07.170 --> 01:12.930
Would it be better to set them up as global components and in a normal duet you would do that in the

01:12.930 --> 01:13.490
main.

01:13.580 --> 01:17.460
JS file where you mount your route you innocence.

01:17.460 --> 01:22.630
The problem is we don't have that file but that's exactly what plug ins does for us.

01:22.710 --> 01:30.110
It allows us to plug functionality into the build and mounting process right before the app gets mounted.

01:30.120 --> 01:36.420
So right before does route the instance gets created you could say let me show you how this works in

01:36.420 --> 01:37.680
the plugins folder.

01:37.760 --> 01:44.220
Or simply create a new javascript fall and I'll name it core dash components dot J s the name is totally

01:44.220 --> 01:44.930
up to you though.

01:44.970 --> 01:47.250
This does not have to be a specific name.

01:47.310 --> 01:51.080
It should be really descriptive to you but nothing else.

01:51.120 --> 01:58.110
Now in this file I want to register while core components so components which we constantly reuse.

01:58.200 --> 02:04.110
So if we scan through our various pages post-blast list would be a candidate because we use it here

02:04.290 --> 02:08.750
in the general index the view file and then he posts it makes that useful.

02:08.940 --> 02:11.800
And as I already mentioned a good candidate.

02:11.910 --> 02:16.540
Are our controls app button which we also use and a couple of places.

02:16.950 --> 02:21.250
So let's go back to our core components and let's add these imports.

02:21.300 --> 02:24.030
So simply import app button at the top.

02:24.080 --> 02:28.080
All the import app control input.

02:28.200 --> 02:31.430
And I also want to control the host list.

02:31.590 --> 02:37.880
So let's add this as imports to next very important.

02:37.880 --> 02:45.410
We also import the EU here so we import view from view the main view library the framework itself is

02:45.410 --> 02:51.260
of course a dependency of Nax because Nax builds up on it and now we get a chance of directly using

02:51.260 --> 02:53.750
it with view imported.

02:53.780 --> 03:01.130
We can now call view component and give our component a selector like app button which we're using in

03:01.130 --> 03:05.620
all our templates and then assigning the component we want to register.

03:05.810 --> 03:12.770
And this is now a global component which we can use in any page with our importing and registering it

03:12.860 --> 03:14.330
in that page.

03:14.360 --> 03:21.160
So I would quickly repeat this for app control input and all the four post list.

03:21.170 --> 03:27.290
Now with this we can go to the next conflict file and register this plugin because just adding it in

03:27.290 --> 03:29.550
the plugins folder alone doesn't do the trick.

03:29.570 --> 03:34.780
We should just add there to make it a bit easier to understand our app and find it.

03:34.910 --> 03:43.550
Now I'm using Tilda plugins to point to the plugins folder and then core Dasch component Daut components

03:43.700 --> 03:49.150
dot Geass that is our full path to the file.

03:50.660 --> 03:58.340
With that added year it's now lagging day content of this fall right into the mounting process before

03:58.340 --> 03:59.840
it mounts everything.

03:59.840 --> 04:06.490
And now if we save all the files we can go to our Abra files and get rid of the post list import anti

04:06.490 --> 04:09.420
registration here under local components.

04:09.450 --> 04:13.200
The same here for the Post's folder.

04:13.410 --> 04:16.640
The same here for indexed view in the admin area.

04:16.640 --> 04:18.240
We don't need these two imports.

04:18.260 --> 04:23.630
We can get rid of the components property therefore diddles do that here.

04:24.050 --> 04:26.860
Yes I did then off section.

04:26.870 --> 04:31.950
We don't need to control and button here we can get rid of these components.

04:32.300 --> 04:38.780
Post ID while we need that we could register ebon post for him as a global component too but we only

04:38.780 --> 04:41.160
use it in two places so I guess it's OK.

04:41.660 --> 04:46.380
And it every post forum there we also have potman app control input.

04:46.400 --> 04:48.860
So here we can also get rid of that.

04:49.220 --> 04:56.360
With that if we save all these changed false our app should still work as it did before.

04:56.570 --> 05:00.760
If we navigate around this is all looking good still.

05:00.770 --> 05:05.100
So we're still able to create a new post and see that for and without errors.

05:05.360 --> 05:11.080
But now we use deep flagons approach which of course saves us a lot of time.

05:11.090 --> 05:14.420
We don't have to write the same code over and over again.
