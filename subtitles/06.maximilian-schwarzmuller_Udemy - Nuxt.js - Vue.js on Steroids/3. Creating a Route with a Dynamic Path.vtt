WEBVTT

00:02.190 --> 00:08.670
Now that we had a look at the basics of routing it next and how we use folders and files to do that

00:08.670 --> 00:09.560
routing.

00:09.570 --> 00:13.660
Let's see how we would create roud with that dynamic path.

00:13.740 --> 00:19.790
So where we can enter an idea and get access to that entered route parameter in our view.

00:19.830 --> 00:20.630
So to say.

00:20.820 --> 00:29.430
So let's say we want to create a dynamic route for users so that we can enter slash users slash and

00:29.430 --> 00:33.000
then the dynamic parameter like the User ID.

00:33.000 --> 00:35.250
You can do this in two ways.

00:35.250 --> 00:39.960
Again you can create a file or a folder in both approaches.

00:39.990 --> 00:41.650
The name matters a lot.

00:41.880 --> 00:43.680
Let's start with a file.

00:43.710 --> 00:48.710
If I create a new file here the name has to start with an underscore.

00:48.750 --> 00:57.630
This signals to you that this is now not a hard coded u r l but some dynamic segment in the URL.

00:58.050 --> 01:05.520
And then you enter any name by which you later want to extract dynamic segment the dynamic parameter

01:05.610 --> 01:08.610
entered by a user like ID.

01:08.790 --> 01:10.710
And then it's still a dop you follow.

01:10.710 --> 01:13.700
So still a component a page which will be loaded.

01:13.890 --> 01:19.720
So I'll add a template here and there are output a single user.

01:19.770 --> 01:27.990
Now with that approach where we can do is we can save this and go back reload yet and then enter slash

01:28.080 --> 01:31.210
1 for example after slash users.

01:31.350 --> 01:33.480
And there's loads a single user.

01:34.020 --> 01:41.880
Now the same is the case if we enter slash anything here because then again does anything part is simply

01:41.880 --> 01:49.350
treat that as the dynamic parameter because we created this underscore Id fall in users.

01:49.380 --> 01:56.610
Now we can also access the data entered by the user so we can for example output a single user with

01:56.940 --> 02:04.140
ID and then let's say we want to output that dynamic parameter that we can use the normal view features

02:04.170 --> 02:05.930
because it's just a component.

02:05.970 --> 02:10.560
So we can enter interpellation here with these double Colie braces.

02:10.800 --> 02:15.090
Now between this we can now access that roud parameter.

02:15.090 --> 02:17.420
The question is how.

02:17.790 --> 02:21.340
And here is one important thing you got to know next.

02:21.400 --> 02:26.750
Yes looks different but uses the view router behind the scenes.

02:26.820 --> 02:32.500
It simply creates the routing configuration for you and passes it to view router.

02:32.820 --> 02:37.850
Since this is the case we can use all the default view router features.

02:38.040 --> 02:45.270
For example in components which we have here in the end we can access dollar sign route which is injected

02:45.270 --> 02:52.650
and provided by Buga us so not by next but by Future asked by the router and which gives us information

02:52.650 --> 02:54.500
about the currently loaded route.

02:54.660 --> 03:03.990
And for example there's a dollar sign route object has a parents property that property in turn is an

03:03.990 --> 03:10.780
object where we can access all the dynamic segments that are relevant to this loaded route.

03:10.800 --> 03:12.960
In our case the IDs segment.

03:13.050 --> 03:15.740
So that is where we can enter ID here.

03:15.840 --> 03:22.100
And if you would have named the file underscore user then you would x' dot user here.

03:22.290 --> 03:23.600
But we named it ID.

03:23.670 --> 03:31.560
So this is ID here with that if we save this you see with ID anything as output because I'm on slash

03:31.620 --> 03:36.570
anything and if I enter one then with ID one is output.

03:36.570 --> 03:43.480
This is how this works is how we can use dynamic parameters in our next routing setup.

03:43.860 --> 03:44.910
And as before.

03:44.950 --> 03:51.120
There's only one of the two possible approaches we could have also created a nested folder with underscore

03:51.120 --> 03:57.120
ideas a name but without view at the end because it's a folder and then we could move that file into

03:57.140 --> 04:00.120
the folder and now rename it to index again.

04:00.120 --> 04:01.300
This is really important.

04:01.320 --> 04:04.130
This now has to be indexed view.

04:04.200 --> 04:08.870
And with that we get exactly the same set up as before just with a folder based approach.

04:09.060 --> 04:16.100
Now if a reload the page it still works and if I go to slash anything does all still works.

04:16.110 --> 04:22.280
The main advantage here again might be that it's easier to think of that as a folder structure.

04:22.290 --> 04:27.960
Since we all kind of have a folder structure and you are ill but ultimately this is up to you.

04:28.260 --> 04:33.780
However there's one important difference if you have a folder based approach with the folder named underscore

04:33.780 --> 04:36.360
ID then this is mandatory.

04:36.360 --> 04:44.170
And if you will nest something here like you nest more dash details to you then you could enter slash

04:44.170 --> 04:52.210
users slash some ID slash more details and you would have to enter that ID if you create a file named

04:52.270 --> 04:59.050
underscore ID that you then any aberant neighboring files can be loaded without the ID being prepared

04:59.050 --> 05:03.190
and of course because you didn't create a nested structure as in this case.

05:03.190 --> 05:10.180
So if you plan on adding more sap routes so to say then you have to take that folder based approach.

05:10.180 --> 05:13.840
If that's not your plan you can use the file based one.

05:13.930 --> 05:16.910
However as you see you always can use the folder based one.

05:16.960 --> 05:21.550
And I personally can recommend this because it makes this project a bit easier to manage.

05:21.550 --> 05:22.510
In my experience.
