WEBVTT

00:02.300 --> 00:05.650
OK so we heard about service side rendering and the last video.

00:05.670 --> 00:08.460
Now this might be a concept that's brand new to you.

00:08.460 --> 00:10.720
What does suicide rendering mean.

00:10.740 --> 00:17.460
The important thing is it does not mean dead you chance or next chance is used as a templating engine

00:17.460 --> 00:18.210
on the server.

00:18.210 --> 00:22.540
It's not a replacement for handlebars for each As for.

00:22.650 --> 00:23.650
Anything like that.

00:23.660 --> 00:25.570
That's not what it is.

00:25.830 --> 00:30.630
Instead let's think about how you chase applications typically work and with dad.

00:30.690 --> 00:32.490
I mean single page applications.

00:32.550 --> 00:38.880
If you're just dropping some UI widgets into your pages which are already rendered by some other service.

00:39.210 --> 00:41.190
Well then you don't need next.

00:41.190 --> 00:47.310
But first single page applications we typically use view which of course is a client side javascript

00:47.310 --> 00:48.600
framework.

00:48.600 --> 00:53.520
Now there we have a user using the browser and the server where our APIs search from.

00:53.580 --> 00:59.130
And typically it works like get a user sends a request by entering a u r l and to server sends back

00:59.130 --> 01:00.700
the next HDMI.

01:01.050 --> 01:08.970
Deadfall contains no HMO code or only very basic one but it contains your single page application.

01:08.970 --> 01:12.180
It contains links to all the scripts that need to be loaded.

01:12.180 --> 01:17.130
It essentially then starts your view app which runs entirely in the browser.

01:17.130 --> 01:22.830
The view APIs then responsible for rendering the UI so that you app is adding all the time elements

01:22.830 --> 01:24.050
in the browser.

01:24.060 --> 01:27.630
It's also responsible for catching any future routes you might visit.

01:27.660 --> 01:31.770
So catching any navigation actions which are triggered by clicking links and so on.

01:31.920 --> 01:34.530
So anything of that kind is handled by View.

01:34.560 --> 01:40.270
Yes you'll never get a second page from the server as long as you stay in your application.

01:40.410 --> 01:44.620
Now this index HDMI file could be service rendered.

01:44.640 --> 01:49.680
Now it's already coming from a server but as I said doesn't contain VHDL code of the finished fall the

01:49.680 --> 01:55.680
user sees because dead content is all created through javascript fruit.

01:56.100 --> 01:58.500
Now for a search engine optimization for example.

01:58.500 --> 02:05.070
This isn't as great because especially if you need to load some asynchronous data before rendering something

02:05.070 --> 02:06.110
in the screen.

02:06.390 --> 02:09.270
Especially in that case you have a problem.

02:09.300 --> 02:15.200
The Google Crawler is not going to wait for you to load your content no matter how long it takes to

02:15.210 --> 02:18.780
Google trawl or just sees the empty page and that's it.

02:18.780 --> 02:22.170
And that is not as good for search engine optimization.

02:22.170 --> 02:28.420
Also your users will have to wait for the Condren to load in front of their face instead of on the server

02:28.470 --> 02:30.510
which might be preferrable.

02:30.510 --> 02:36.510
So what we can do is we can render dead first initial page on the server and we're only talking about

02:36.510 --> 02:37.370
this.

02:37.440 --> 02:43.130
This first page user visits for any given Eurail no matter if it's the router you are or in that â‚¬3

02:43.530 --> 02:47.880
that first page can be pre-rendered on the server on the fly.

02:47.910 --> 02:52.530
When the user requests it and that is especially where next Chaske can help you.

02:52.710 --> 02:57.730
Next choice is by default set up to contain all the functionality you need for it.

02:57.750 --> 03:03.940
So did you create a normal abuse app but it actually gets pre-rendered dynamically or even statically

03:03.960 --> 03:10.260
as you will learn on the server so that whenever a user with your page he gets it fresh from the server

03:10.290 --> 03:15.630
pre-rendered on the server thereafter we're back in the single page application world no second page

03:15.630 --> 03:21.840
is going to get rendered future yes takes over and handles all future navigation actions all future

03:22.060 --> 03:23.670
renderings it needs to do.

03:23.700 --> 03:30.300
It's just that first initial load which is rendered on the server and which hence improves search engine

03:30.600 --> 03:36.200
finding capabilities because the search engine crawler requests all your pages.

03:36.260 --> 03:42.060
And since it sends a new request for every page it gets a pre-rendered page for every request hence

03:42.060 --> 03:43.890
it sees what the user sees.

03:43.890 --> 03:45.630
This is one advantage you have.

03:45.640 --> 03:48.990
You get some obvious and this is what service had renderings all about.

03:48.990 --> 03:54.990
It's not about adding a templating engine to your back and next G-S is not a service IDE framework or

03:54.990 --> 03:59.530
anything like that it just runs on the server to pre-rendered your view apps.
