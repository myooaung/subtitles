WEBVTT

00:02.230 --> 00:08.140
In the last assignment I mentioned that there is something special happening if we never get to the

00:08.140 --> 00:09.700
main page and back to block.

00:09.700 --> 00:11.630
We see that loading bar at the top.

00:11.770 --> 00:17.120
Now you might say sure we're waiting for the posts below that that's what you told us and we are.

00:17.290 --> 00:21.970
But the strange thing is no service side rendering is happening here.

00:21.970 --> 00:28.330
Remember what I said once the first page has been loaded which essentially happens whenever you refresh

00:28.330 --> 00:30.270
or enter and you you are l.

00:30.430 --> 00:34.420
Once that is done we have a single page application.

00:34.450 --> 00:35.820
So if I click on the logo.

00:35.840 --> 00:39.770
No this actually doesn't fetch a new page from the server.

00:39.940 --> 00:47.500
It changes in javascript only our initially fetched page still is the same.

00:47.590 --> 00:54.300
I can prove this to you by going back to your main page and an async data.

00:54.610 --> 01:02.300
Let's console lock a async data is executed.

01:03.410 --> 01:04.880
Let's save this.

01:04.880 --> 01:06.720
It's on the main index that you follow.

01:06.890 --> 01:13.030
Let's go back to our page and let's reload that main page once it reloads.

01:13.030 --> 01:17.110
Check the console log on the right you won't see that message here.

01:17.140 --> 01:18.160
You do see it.

01:18.160 --> 01:23.560
However if you go back to the editor and have a look at the terminal where your development server is

01:23.560 --> 01:28.020
running because async data here is executed on the server.

01:28.150 --> 01:30.530
Makes sense I guess that is what I told you.

01:30.790 --> 01:37.960
However let's go back to the EP and make sure to not reload the page go to blog or some other link and

01:37.960 --> 01:39.860
go back to the main page.

01:39.880 --> 01:43.540
Now you see async data is executed in the console.

01:43.630 --> 01:50.920
If you go back to the terminal you now don't see it a second time here because remember what I said

01:51.190 --> 01:56.190
once the first page was loaded you have a single page up and that is what's happening here.

01:56.290 --> 01:59.890
If we refreshed a page or we enter a new you are l.

01:59.920 --> 02:01.730
The code runs on the server.

02:01.810 --> 02:08.380
If we didn't never get around it click links with next link or router push then we stay inside the single

02:08.380 --> 02:12.750
page app and async data and now actually executes on the client.

02:12.850 --> 02:16.630
It still waits for it to finish before it shows us the finished page.

02:16.750 --> 02:23.320
But now next case is actually showing us this loading bar at the top to bruv the user experience and

02:23.530 --> 02:28.860
it's now doing all of that in the browser because your search engine optimization doesn't matter anymore.

02:28.960 --> 02:33.820
And we can now actually provide a more pleasant experience by showing a spinner or stuff like that.

02:33.940 --> 02:40.120
If we stick in the browser and that is all handled for us automatically we wait on the server Anyways

02:40.150 --> 02:45.080
if we refresh the page if we are on the page it happens in the browser.

02:45.130 --> 02:53.110
This is the special thing I want you to take away async data is always something we wait for but does

02:53.110 --> 02:55.220
not always run on the server.

02:55.420 --> 03:02.650
It only does so if we are loading the page for the first time because we were fresh did or we entered

03:02.650 --> 03:10.630
a new U R L and with that let's dive into that context object which can help us with finding out where

03:10.630 --> 03:11.490
we're running.

03:11.650 --> 03:14.940
And also with doing some very useful things.
