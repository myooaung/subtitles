WEBVTT

00:02.560 --> 00:09.050
Now if the changes we implemented over the last six years one thing broke a set log out timer doesn't

00:09.050 --> 00:15.680
really work as before anymore because if we're initializing our state on the server through the cookie

00:16.100 --> 00:18.490
then this will be executed on the server.

00:18.590 --> 00:20.650
And it's not helpful to us there.

00:20.690 --> 00:25.690
It doesn't work with the store and the wax that actually runs in the browser.

00:25.970 --> 00:32.780
So a more efficient way of checking whether we have a valid token is to not use the site log out timer

00:32.780 --> 00:33.810
thing here.

00:33.860 --> 00:40.170
So therefore what I will do is I will no longer dispatch this action to set this log out timer.

00:40.220 --> 00:45.470
I will still check for the expiration date though I still want to ensure we're not logging the user

00:45.470 --> 00:50.960
in with expired tokens but I will not use set log out timer.

00:50.990 --> 00:56.570
So let's get rid of all places where we dispatch this instead.

00:56.960 --> 01:00.160
We can simply perform this check through check.

01:00.170 --> 01:08.560
All right check off the middle where we created cold's in it off on every route that needs a token.

01:08.570 --> 01:16.460
So in the end we're already executing this in it of action here where we're dispatching the action all

01:16.460 --> 01:19.910
the time even on the client or also on the client.

01:19.910 --> 01:23.020
So we're constantly checking the expiration date.

01:23.180 --> 01:29.540
And if we ever find out that we get no expiration date then there's the important thing then we should

01:29.540 --> 01:35.610
not return here but we should simply commit our clear token method.

01:35.710 --> 01:42.990
So if you x context commit clear token that is what I want to execute in this case.

01:43.010 --> 01:51.290
If I find out the token expired and the same of course should be done for our check when we fetch it

01:51.290 --> 01:54.930
from the cookie there we don't even do this check.

01:54.950 --> 01:56.690
We just use our expiration date.

01:56.720 --> 01:58.990
We just get it this check.

01:59.000 --> 02:02.950
Overall should simply be moved off or if else statements.

02:02.990 --> 02:06.370
So did we only retrieve values in the if else statements.

02:06.500 --> 02:09.150
The logic happens off grid.

02:09.350 --> 02:18.650
So here in this place I will check if no token or invalid token and if either of the two is the case

02:18.830 --> 02:21.400
then clear token is committed.

02:21.470 --> 02:30.080
So this mutation up here which then really sets a token to now in our view x store and if we do that

02:30.680 --> 02:33.470
and we reload our application

02:36.610 --> 02:38.550
everything still works as before.

02:38.560 --> 02:46.210
But for tokin ever becomes invalid We will no longer be locked in if we click around because then we

02:46.210 --> 02:50.410
will essentially be frozen out because our token will then be invalid.

02:50.410 --> 02:53.580
So right now inspect our store.

02:53.620 --> 03:01.870
We have a token here right so that is our current state but let's now simulate that it's in Valot and

03:01.870 --> 03:11.770
to simulate this when we store the token let's simply not multiply this with 1000.

03:11.790 --> 03:15.110
So then it's only going to be free not 6 seconds.

03:15.120 --> 03:24.650
So if we do this now and we go back to the off page to log in again and get a new token.

03:24.740 --> 03:35.010
Now we are a syndicated But actually if I click around a bit this never fires search there seems to

03:35.010 --> 03:36.180
be something wrong.

03:36.180 --> 03:45.030
Let's quickly have a look at this and outpoured new date gets time and also output the expiration date

03:45.450 --> 03:48.910
as a number to see what's inside that.

03:48.920 --> 03:54.640
Let's now quickly reload and let's log in again to get a new token again.

04:01.710 --> 04:08.020
And the problem here is really that they are of different lengths as you can see.

04:08.220 --> 04:14.920
So we need to fix that and this is happening due to an interesting blog which I introduced here when

04:14.920 --> 04:18.140
I stored a token into cookie or in local storage.

04:18.160 --> 04:21.790
I get the current time stamp and I add the expires in time.

04:21.790 --> 04:23.620
That however is a string.

04:23.830 --> 04:26.960
And this concatenates does all to one big string.

04:27.220 --> 04:31.030
So I actually need up to add up less in front of this year.

04:31.050 --> 04:33.980
Q Two can word this into a number of first.

04:34.220 --> 04:46.380
Or simply use number parse it and pass the string as an argument and do the same of course here when

04:46.470 --> 04:54.310
I store it in the cookie or doing it like this I'm now converting this to number first so that the addition

04:54.310 --> 04:56.170
here yields a number.

04:56.590 --> 05:05.920
So let's now quickly go back to the off page.

05:06.110 --> 05:07.640
Now does looks much better.

05:10.890 --> 05:15.240
And now I'm redirected back because now we get no token or invalid token.

05:15.270 --> 05:16.550
So this is now working.

05:16.620 --> 05:24.510
Let's now revert back to ensure we're storing the right expiry time or we're using the right expiry

05:24.510 --> 05:25.150
time.

05:25.380 --> 05:27.870
Let's get rid of that Konsole law here

05:31.190 --> 05:36.480
and now we want to add this times when down here

05:40.030 --> 05:46.870
to the current time stamp so that we convert our time in seconds here to milli seconds.

05:46.900 --> 05:52.120
Now we get this check implement that and of course you can still improve the general error handling.

05:52.120 --> 05:57.130
For example if you try to send the request with the invalid token and you get back an error from the

05:57.130 --> 06:03.430
back end here and the catch block instead of logging it to the console you could Frot an alert or change

06:03.430 --> 06:08.840
some average state to trigger some Avri UI element to show a modal or something like debt.

06:08.860 --> 06:15.040
But we got a working of indication in place here now using the tools Nax gives us and working on both

06:15.040 --> 06:17.420
the server side and the client side.
