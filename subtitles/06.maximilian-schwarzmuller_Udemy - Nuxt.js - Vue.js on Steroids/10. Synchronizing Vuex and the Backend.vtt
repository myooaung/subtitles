WEBVTT

00:02.090 --> 00:05.060
So we're working with data and that's all working great.

00:05.180 --> 00:10.550
But we noticed that our store is not in sync with the data on the server because we're only fetching

00:10.550 --> 00:11.870
new data from the server.

00:11.900 --> 00:18.830
When we reload the page or with a db for the first time we're not doing it when we added it of course

00:18.830 --> 00:23.530
one way to solve this would be to always use async data in all the pages.

00:23.660 --> 00:26.060
But then we have a longer loading times.

00:26.060 --> 00:31.130
So the more elegant way could be to manipulate our store if we add a new post.

00:31.130 --> 00:36.980
We want to add it to the story if we edit a post we want to edit it in the store so he can go to our

00:36.980 --> 00:44.060
store index j us fall and add some mutations like to add posts much mutation where I get to post as

00:44.060 --> 00:52.710
a payload and added post mutation rate gets the edited post as a payload.

00:52.710 --> 00:58.010
Now in edit post I want to replace an existing post with the updated version.

00:58.140 --> 01:06.750
So first of all find the index of the existing post in the loaded POST array all name and post index

01:07.370 --> 01:13.350
and I get it by reaching out to state loaded posts and using the find index method.

01:13.410 --> 01:19.600
This will search desirÃ© for a given post and determine the index of that.

01:19.600 --> 01:25.370
Now for that we need to pass a function to find the index which will run on every post in the array.

01:25.410 --> 01:30.120
Defunct returns true if it is supposed I was looking for and returns false otherwise.

01:30.440 --> 01:36.770
So here I will simply check if the post I'm looking at India rate has an ID.

01:36.780 --> 01:41.750
We do add the ID here when we store the posts in the state.

01:42.390 --> 01:47.800
So if it has an ID that matches the ID of the edited post.

01:47.920 --> 01:53.830
So here are also the id property that is my matching condition and if this returns True I found the

01:53.830 --> 01:55.130
post I was looking for.

01:55.150 --> 02:01.180
That is to post editing and then I return the index and store it in the post index constant.

02:01.180 --> 02:09.280
With that post index constant I can reach out to loaded posts X-ists d element at dead ID at that index

02:09.280 --> 02:14.130
so post index and set it equal to edit that post.

02:14.140 --> 02:21.430
With this approach and replacing an element in the array with a new element in at post I will reach

02:21.430 --> 02:27.360
out to state loaded posts and push my post onto it that's all.

02:27.370 --> 02:28.920
With that I got the mutations.

02:28.990 --> 02:37.750
Now we need the actions Aleta and post action where I expect to get the Buick's context of course and

02:37.750 --> 02:44.620
the posts which should be added and will add added posts action variables to get the context and the

02:45.220 --> 02:46.210
edited post.

02:46.210 --> 02:50.790
Let's say now in both actions I want to commit my mutations.

02:50.930 --> 02:56.270
It's also not uncommon to execute the async code in here though so we could go to the index that you

02:56.270 --> 03:03.710
fall into in your post folder and copy the access code here and put it into the store so we could go

03:03.710 --> 03:08.240
to add posts to the action we just created and entered a code here.

03:08.420 --> 03:11.760
X is already imported so we can use it here.

03:12.080 --> 03:14.210
Now I will change it a bit though.

03:14.240 --> 03:17.190
The object I'm sending to the back end of.

03:17.210 --> 03:25.010
Pull it out and store it in a new constant so that they can then send is constant here with the post

03:25.010 --> 03:29.930
request and also use it in the then blocked or after ones were done.

03:29.990 --> 03:37.280
Because of this this new created POAs that I want to add to my store so I can use view X. context commit

03:38.000 --> 03:43.070
and commit ad post with the created post object.

03:43.070 --> 03:49.300
Now the problem will be that created post of course has an ID which is assigned by the backend.

03:49.340 --> 03:56.180
The good thing is that result we get here will hold that ID so we can create a new object.

03:56.180 --> 04:03.710
Your Verby take the properties of the created post and then add a new id property which comes from rest

04:03.710 --> 04:04.540
data.

04:04.550 --> 04:08.460
That is the field X-ists gives us to get the response data.

04:08.670 --> 04:15.050
And there will be a name field that is provided by firebase and that will be the ID that was created

04:15.080 --> 04:16.120
automatically.

04:16.160 --> 04:23.540
With that I'm storing data in that post in our local store to sauted if we later x' it or edited we

04:23.540 --> 04:24.350
can get it.

04:24.350 --> 04:30.110
Bited ID now accessing the router won't work like this.

04:30.330 --> 04:40.260
But what we can do is we can actually return this post promise this change here and in new post we now

04:40.260 --> 04:42.310
simply no longer use x.

04:42.330 --> 04:52.440
Yes but I access my store and dispatch an action the ad post-action I passed my posted data and since

04:52.440 --> 05:00.360
I returned it I can also change then here to be informed when this async action is finished because

05:00.360 --> 05:02.640
I'm returning the promise from my store.

05:02.640 --> 05:04.770
This is actually possible.

05:04.770 --> 05:12.730
And then once I'm done here I execute this arrow function where I get no argument but where I push back

05:12.730 --> 05:15.920
to the Admin Page let's try this out.

05:16.210 --> 05:24.640
Let's go back to our running application and let's reload the admin page and here let's create a new

05:24.640 --> 05:27.140
post by me Maximillian.

05:27.180 --> 05:31.530
It's some test at the pump link.

05:31.550 --> 05:34.810
We all know and love this is just testing.

05:34.820 --> 05:41.190
If it works and doesn't work as our preview text Let's click save.

05:42.810 --> 05:50.380
And we're instantly redirected and we get an error that host data is not defined in store at post.

05:50.670 --> 05:54.720
So does Aeros coming from our store at post post.

05:54.720 --> 05:56.200
Data is not defined yet.

05:56.220 --> 05:57.600
We just named it post.

05:57.600 --> 05:59.580
The argument is just post.

05:59.880 --> 06:01.840
So sorry about that let's change it.

06:02.070 --> 06:05.040
Let's then reload the page and let's try again.

06:05.070 --> 06:08.480
Maximillian doesn't work.

06:08.550 --> 06:11.530
The link doesn't work now.

06:12.720 --> 06:17.570
Actually a couple of question marks and this looks good.

06:17.960 --> 06:25.610
Well almost I get rest is not defined here and I still only see the new post if I reload the page at

06:25.610 --> 06:28.160
least waiting for the action to complete work.

06:28.400 --> 06:30.410
But the rest didn't work.

06:30.770 --> 06:41.270
Regarding the error I have a dumb mistake in the ADD post action return result and here I try to access

06:41.270 --> 06:42.710
recit data.

06:42.740 --> 06:44.010
It should be a result.

06:44.030 --> 06:45.300
Data of course.

06:45.350 --> 06:47.960
So let's save this and let's try it again.

06:48.170 --> 06:51.170
Let's create a new post here.

06:51.590 --> 06:52.790
Just testing.

06:52.790 --> 06:54.410
Enter the thumbnail link.

06:54.410 --> 07:00.210
Testing this thing and just a couple of dots and lets it save.

07:00.450 --> 07:01.970
And now this looks much better.

07:01.970 --> 07:09.690
We immediately got the new post here that's now achieve the same for editing in the edit post action.

07:09.830 --> 07:15.980
I also want to perform the age to dippie request so I will grab the code from the index that you follow

07:16.070 --> 07:23.450
in the post ID folder in the Edmon area and it will added into my added post action.

07:23.480 --> 07:29.840
I will also return it so that we can wait for it to finish and handle that redirection here which I'll

07:29.840 --> 07:32.600
cut from the store in the page.

07:32.750 --> 07:34.170
So hearable again.

07:34.220 --> 07:41.180
Justis dollar signs store dispatch added post and pastie edit that post here.

07:41.480 --> 07:50.960
And once this is done and then block I will execute my erro function where I simply push back to admin.

07:51.140 --> 07:56.000
So I am dispatching the edit post to action then passing the edited post.

07:56.030 --> 08:02.700
That means that in the edit post action where we get the edited post I of course need to forward it

08:02.780 --> 08:08.680
to my backend However accessing distraught parents won't work anymore.

08:08.960 --> 08:13.750
This isn't the issue though because the post idea is also stored in the edited post.

08:13.760 --> 08:21.140
We can't just access edited posts Id we're having them in the database or we're storing it in the store

08:21.200 --> 08:23.700
when we're fetching data from the backend.

08:23.720 --> 08:26.870
So this works here in the then block.

08:27.050 --> 08:35.570
I now want to update my local store by calling you X context commit and by committing the edit post

08:35.570 --> 08:40.410
mutation and passing the edited post we're getting here.

08:42.150 --> 08:44.630
With that let's try that out too.

08:44.820 --> 08:52.100
If we go back to our application load this post with the many question marks and I edited with Preview

08:52.110 --> 08:56.290
text that is real preview text.

08:56.460 --> 09:02.510
If I now save this still only the question marks and if I have a look at firebase itself.

09:02.820 --> 09:11.330
You see here I stored a new undefined object so actually we didn't target the right ID.

09:11.340 --> 09:19.980
Now the problem of course is that in edit post action I said that we could simply take the ID we're

09:19.980 --> 09:25.740
sending the request to from the edited post but this is actually not correct because we're fetching

09:25.740 --> 09:32.870
the post here in admin posts Id with async data and the posts we get back from firebase.

09:32.880 --> 09:36.050
If you have a look at them doesn't have an ID field.

09:36.060 --> 09:40.980
We add that manually when we add posts to our store but then on the other hand we're not getting the

09:40.980 --> 09:42.720
edited posts from the store.

09:42.750 --> 09:45.180
We're getting them directly from the server.

09:45.570 --> 09:46.770
So to fix this.

09:46.860 --> 09:50.770
We can simply do is where we store our loaded posts here.

09:51.090 --> 09:57.270
We can of course also store the ID by creating a new object when we pull out the properties of the post

09:57.270 --> 10:04.440
we got from the server and then manually adding Does ID field which stores context parents post ID they

10:04.440 --> 10:08.210
ID of the post we loaded with this approach.

10:08.220 --> 10:12.980
Now we can go back to our page and now we can successfully edit this.

10:13.140 --> 10:16.910
Some real preview.

10:17.180 --> 10:21.210
If I had saved now you see some real preview here.

10:21.210 --> 10:22.770
So this is now working.

10:22.830 --> 10:31.080
And now we're having a store where we are able to edit and add posts without having to fetch new data

10:31.110 --> 10:35.230
from the server and still we show up to date data to the user's.
