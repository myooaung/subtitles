WEBVTT

00:02.210 --> 00:07.070
So the last lecture we had to look at how we generate a single page application.

00:07.070 --> 00:14.030
Now want to show you the ferde and maybe coolest feature of knucks just the ability to preach generate

00:14.120 --> 00:22.820
the entire app as static files which we can deploy to a static host during or after development to do

00:22.820 --> 00:23.150
that.

00:23.150 --> 00:24.050
Important.

00:24.050 --> 00:26.840
Make sure to switch back to Universal mode.

00:27.050 --> 00:33.080
It also works with single page application mode but there it's not as impressive because it simply generates

00:33.080 --> 00:36.560
you a single page application with Universum mode.

00:36.560 --> 00:40.940
However it really Prete generates all your faults.

00:40.940 --> 00:44.000
Now let me show you how this works in your project folder.

00:44.000 --> 00:46.400
Ron NPM Naran generate.

00:46.400 --> 00:50.940
This uses the last command you'll see in the package chase and fall.

00:50.960 --> 00:57.740
This will now build decode and preach generate all pages and give you a folder for each page and then

00:57.760 --> 00:59.700
next thought aged him.

00:59.840 --> 01:03.830
Now it's actually finishing with an error here in in it.

01:03.830 --> 01:07.070
Often our store because local storage is not defined.

01:07.070 --> 01:08.490
We can fix this later.

01:08.690 --> 01:13.800
Let's first of all have a look at what it did generate in the dist folder here.

01:13.990 --> 01:17.510
You now have some folders for your different pages in the index.

01:17.510 --> 01:19.590
Each team will fall for each one of them.

01:19.820 --> 01:25.660
And if we inspect them like our root index HMO fault you can see it's optimized.

01:25.670 --> 01:29.050
But actually all the post data is in there.

01:29.090 --> 01:34.990
So if you scroll a little bit further to the right you should see actual post data like a new post.

01:34.990 --> 01:40.850
Again this is now statically generated which means that if we navigate into that disk folder and we

01:40.850 --> 01:49.520
start our HTP server at Port 80 82 we can load our starting page and see all these posts.

01:49.670 --> 01:52.310
But that has been pre-generated.

01:52.580 --> 01:57.170
If we didn't click around we're back in a single page application though that's important.

01:57.350 --> 02:00.920
So now we don't send real requests and get back to real pages.

02:01.070 --> 02:08.000
Once we load the first page which ever it is we're back in a single page application but every possible

02:08.030 --> 02:11.180
entry point has been pre-generated.

02:11.480 --> 02:15.520
And that's pretty amazing because with that we got the best of both worlds.

02:15.560 --> 02:21.230
We've got search engine optimization because everything is pre-generated all the female files with all

02:21.230 --> 02:24.520
the content are there for the crawlers to be consumed.

02:24.590 --> 02:30.030
And for your users too of course you don't need on the fly page pre-rendered on the server.

02:30.080 --> 02:33.900
Hence you don't need to know Chaiya server a static host is all you need.

02:34.190 --> 02:36.590
And you still have a single page application.

02:36.620 --> 02:43.220
Once a user entered your page there's one issue though besides that error which we'll have to fix if

02:43.220 --> 02:45.890
you reload this page for a single post.

02:45.890 --> 02:51.590
You don't see anything because if you go back to your project and you have a close look in the Post's

02:51.590 --> 03:00.470
folder there only is the root index HVM fall all the dynamic routes for the various post IDs have not

03:00.490 --> 03:04.550
been pre-rendered because how would next do that.

03:04.550 --> 03:10.580
It can't pre-rendered them because it simply doesn't know which kind of post you have which routes you

03:10.580 --> 03:12.250
actually have which IDs.

03:12.290 --> 03:14.840
In this case you actually have to pre-rendered.

03:15.250 --> 03:17.600
So that is something we can take care of though.

03:17.660 --> 03:19.530
Let's do that in the next lecture.
