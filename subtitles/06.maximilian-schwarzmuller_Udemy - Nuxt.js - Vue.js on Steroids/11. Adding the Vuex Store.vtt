WEBVTT

00:02.230 --> 00:08.800
Thus far you'll learn a bit how async data works with dummy data but still with asynchronous code.

00:08.890 --> 00:12.650
Now what's happening right now is on our page.

00:12.850 --> 00:20.070
If we never get around reloaded navigate to the block we constantly have to wait for data to be fetched.

00:20.080 --> 00:24.830
We constantly have to wait for new requests being made to a server.

00:24.850 --> 00:32.050
Now this might be what you want because maybe all your pages use very different data but sometimes you

00:32.050 --> 00:38.470
also want to fetch data and load it into your view x store so that you can use it in the rest of your

00:38.470 --> 00:45.040
application let's say be there because you want to shorten the loading times or because you somehow

00:45.040 --> 00:50.980
in your application need that data outside of the component where you loaded it and you want to conveniently

00:50.980 --> 00:52.360
have it in the store.

00:52.630 --> 00:58.510
So let me show you how you load data into the view x store instead of just loading it in the component

00:58.840 --> 01:00.220
and afford it.

01:00.220 --> 01:02.860
We of course need a US store.

01:02.910 --> 01:07.090
So let's see how we can add one adding new X to next JSA apps.

01:07.120 --> 01:08.130
Is super simple.

01:08.140 --> 01:10.180
You don't have to install the dependency.

01:10.240 --> 01:11.790
It's already built in.

01:11.950 --> 01:18.070
You have to add some files as so often the next cheapest configuration happens for a few files.

01:18.070 --> 01:24.340
If you want to really use it you have two different modes of which you can choose the first one is classic

01:24.340 --> 01:31.300
mode day or you simply create the index dot J as fall in a storage folder in your root next project

01:32.170 --> 01:36.170
and then you have one store and one module for the entire app.

01:36.340 --> 01:40.520
You can then add mutations actions and Patersons onto the index.

01:40.650 --> 01:43.840
Fall the alternative fisty modules mode.

01:43.990 --> 01:50.860
If you have more data that goes into your store you want to create multiple dot J.S. files in the store

01:50.860 --> 01:57.040
folder where the name in front of dot G-S becomes the name of the module and you have namespace modules.

01:57.040 --> 02:04.360
Now check the official U.S. stocks or my entire view course if you want to learn more about us modules

02:04.600 --> 02:10.120
essentially that allows you to slice your story up into different modules so that you don't end up with

02:10.120 --> 02:16.720
one gigantic index that just fall but that you have multiple smaller files you still define mutations

02:16.720 --> 02:17.340
and so on.

02:17.440 --> 02:22.610
But in the different dot as follows for the given module.

02:22.750 --> 02:27.160
Now let's add a story and see this in action to create a store.

02:27.160 --> 02:32.470
The simplest thing we can do is we can go to the store folder create it if you don't have it and the

02:32.470 --> 02:36.870
index thought she has far to use that classic mode in that file.

02:36.950 --> 02:40.840
You first of all need to import Buick's from view X..

02:40.900 --> 02:43.740
You don't need to run NPM install or anything like that though.

02:43.780 --> 02:47.270
It already ships with next year.

02:47.290 --> 02:48.930
You should create a function.

02:48.970 --> 02:54.100
And I'm just using a syntax where a store a function a constant which you can name as you want but only

02:54.250 --> 02:56.800
create store because that is what it will do.

02:56.830 --> 02:58.350
It will create a store.

02:58.390 --> 03:00.700
And here I'm using an arrow function.

03:00.700 --> 03:06.820
Now why do we create a function instead of just an object which represents the store because it should

03:06.820 --> 03:10.570
be callable by next which will be executed on the server.

03:10.570 --> 03:12.090
To set up the store.

03:12.370 --> 03:14.610
So therefore here we return a new x.

03:14.630 --> 03:21.670
Store if we returned an object instead of the function then all users of our app would actually get

03:21.670 --> 03:27.300
the same instance because on the server in node J.S. where does runs.

03:27.550 --> 03:34.430
If we have plain objects stored well then we always get that object for every connected user.

03:34.570 --> 03:41.350
If we have a function that returns and you store as this does then every new user receives his own store

03:41.650 --> 03:46.640
which we of course want especially if we start managing user specific data in a store.

03:47.020 --> 03:53.170
So here we get the Buick's store and it's now initialized with a javascript object where you can set

03:53.170 --> 03:57.710
up your starting state your mutations and so on.

03:57.820 --> 04:02.950
So typically these are the building blocks you have and these are the normal building blocks you have

04:02.950 --> 04:04.670
in any of us store.

04:04.690 --> 04:07.250
There's nothing special about the next version.

04:07.270 --> 04:10.570
It is the normal package in the end.

04:10.630 --> 04:16.840
So in year we could have our loaded posts which is an empty array initially and then we could have a

04:16.840 --> 04:24.700
mutation where we have set posts there we received to state and some payload which could be our posts

04:24.700 --> 04:32.290
and the end does Meffert can be executed by us and there we could set the state loaded posts equal to

04:32.290 --> 04:35.020
posts which I assumed to be an array.

04:35.020 --> 04:42.860
We can then also have an action set posts and in that action we could commit this nutation.

04:42.870 --> 04:50.370
Now as you probably know in view X your actions receive a special object which you can alter name context

04:50.580 --> 04:52.110
or to make it less confusing.

04:52.110 --> 04:57.130
Let's name it view x context and this will have a couple of helpful methods.

04:57.240 --> 05:04.190
One of them is to commit method which you can execute to commit a mutation.

05:04.310 --> 05:06.420
You passed the mutation name as a string.

05:06.470 --> 05:14.020
So set posts refers to this mutation and then an optional payload here that could be posts which I also

05:14.020 --> 05:16.640
expect to get as a payload for it is action.

05:16.640 --> 05:21.170
So now we're just forwarding it in the getters here.

05:21.220 --> 05:29.280
We could then return loaded posts here to each Geter we also get the state passed as an argument by

05:29.290 --> 05:36.040
view X automatically and then just return state loaded posts like this so that we can use it in our

05:36.130 --> 05:39.460
components with that load.

05:39.500 --> 05:46.000
Here we can call this action or make discommode here to store and loaded posts in the store.

05:46.270 --> 05:48.460
We cannot just save that file.

05:48.490 --> 05:56.410
However not before exporting as a default export thing to create store method as a default I should

05:56.410 --> 05:58.270
say so create store.

05:58.270 --> 06:03.460
Is that constant we create a fear which holds this factory function giving us a store.

06:03.610 --> 06:06.360
And now we're exporting this as the fall default.

06:06.580 --> 06:13.740
The rest will be handled by next and will automatically inject the story into all our components.

06:13.800 --> 06:21.700
Now we can populated in our pages like here in the posts component's So in the posts folder the next

06:21.700 --> 06:29.740
time you fall here we could add a lifecycle hook maybe create It's a one second Capone it was created

06:30.260 --> 06:41.340
we could then access this dollar sign store this patch set posts like this and pass this loaded posts

06:41.400 --> 06:45.980
our array of loaded posts which we load through async data to to store it.

06:46.200 --> 06:49.890
This will run once the component has been initialized.

06:49.890 --> 06:51.360
Now let's see if that works.

06:51.390 --> 06:55.540
Let's go to that post page and let's reload it.

06:55.610 --> 06:57.580
And now how do we find out if it worked.

06:57.860 --> 07:00.540
Well maybe you got the view developer tools installed.

07:00.590 --> 07:05.900
Then it's really easy because there you can look into your Buick's store and there you see we have a

07:05.900 --> 07:11.510
base state where actually the loaded posts are part off the state off the store.

07:11.750 --> 07:17.300
If you don't have that installed you don't want to install it simply console lock to store after you

07:17.300 --> 07:28.010
dispatched it or simply console log this store getters loaded posts to refer to your data or once you

07:28.010 --> 07:28.860
dispatched it.

07:29.060 --> 07:34.010
If you do this you also see that console lock with your data.

07:34.490 --> 07:36.240
So this is working.

07:36.320 --> 07:39.860
It is not the best way we can do this though.

07:40.010 --> 07:43.420
This will initialize our store and maybe this is all we need.

07:43.550 --> 07:47.510
But we can also ensure that this runs on the server.

07:47.510 --> 07:54.320
The page is loaded for the first time and that we initialize our store instead of calling async data

07:54.320 --> 07:54.870
here.

07:55.100 --> 07:57.620
Let me show you how this works in the next lecture.
