WEBVTT

00:02.160 --> 00:06.900
We actually got three different deployment and generation options.

00:06.900 --> 00:08.630
The first is a universal map.

00:08.730 --> 00:12.790
You saw that mode in the next conflict fall.

00:12.830 --> 00:19.080
That is the mode we used for the course and in that mode what you do is you build your project and then

00:19.080 --> 00:21.420
you ship it to a Nokia server.

00:21.600 --> 00:27.210
The first US they're always rendered dynamically on the server and after the first load the application

00:27.210 --> 00:29.320
turns into a single page application.

00:29.430 --> 00:35.190
That's great for Search Engine Optimization to single page APIs and nobbler mode.

00:35.190 --> 00:42.630
We can use and we will use in this module there Diablo simply is shipped to the client just the index.

00:42.630 --> 00:48.630
Each team will follow with no content in it but with deep holes script of course included and then the

00:48.630 --> 00:51.270
app is loaded and rendered on the client.

00:51.270 --> 00:57.530
You have a normal US therefore but you still have the simplified development deal automatically in third

00:57.540 --> 01:01.720
routing all these next features the static app.

01:01.770 --> 01:05.230
That's the third option and that's pretty cool here.

01:05.370 --> 01:13.020
You can pre render your views during development so you don't have a server node server where they are

01:13.020 --> 01:16.250
pre-rendered on the fly when the request is incoming.

01:16.470 --> 01:23.560
But you pre-rendered them now ahead of time when you're working on your application.

01:23.610 --> 01:25.290
I will show you how this works.

01:25.290 --> 01:32.010
The cool thing is here you deaden the NHS chip a bunch of pre-generated HVM old files javascript files

01:32.010 --> 01:34.220
and possibly see us as files.

01:34.320 --> 01:40.530
Unlike in the worst lap where you need a real node server because that's not a core difference when

01:40.530 --> 01:44.000
we talk about deployment for the first option.

01:44.190 --> 01:52.350
We need a no J.S. hosta hosting provider that can host a no chase application for the simple reason

01:52.680 --> 01:59.580
that in universal mode pages are generated on the fly whenever they are request that India's single

01:59.580 --> 02:05.640
page application mode a static host like AWOS Asprey is all we need.

02:05.640 --> 02:11.520
So just some hosting provider that is able to serve h html javascript and C-s ass.

02:11.700 --> 02:18.360
We don't need no chase running on a server and that simplifies the whole set up the placement and typically

02:18.360 --> 02:25.600
also is cheaper and the same is true for the steady gap since we regenerate everything on our machine

02:25.980 --> 02:27.450
or wherever you want.

02:27.600 --> 02:33.160
We just ship a bunch of HVM old javascript and as false with content though.

02:33.180 --> 02:38.370
That's the big difference to the single page app where you ship an empty index HDMI HTML fall into scripts.

02:38.370 --> 02:40.980
Here you ship pre-populated faults.

02:41.090 --> 02:43.750
So did anyone reaching your page.

02:43.920 --> 02:49.940
Already gets the finished aged email file and dare ofter enters your single page application.

02:50.190 --> 02:52.920
But you still use a static host here.

02:53.220 --> 02:59.010
So these are the free options and will have a look at all three for our demo app so lets see how that

02:59.010 --> 02:59.690
works.
