WEBVTT

00:02.080 --> 00:08.160
In the last lecture we started implementing abettor generate process which allows us to regenerate our

00:08.160 --> 00:09.620
dynamic routes.

00:09.660 --> 00:16.110
Now I want to ensure that we actually limit the amount of age to the requests we make because right

00:16.140 --> 00:19.260
now we make one request to get all posts.

00:19.350 --> 00:26.760
Then we add dead post to the to be generated routes and when we generate all the pages here it essentially

00:26.760 --> 00:35.280
makes this request here in the index that you filed in the post ID folder for every single post.

00:35.280 --> 00:41.350
Now that's a bit redundant because we're already fetching all the posts data here in the generate function.

00:41.370 --> 00:46.210
Thankfully there is an alternative syntax we can use to generate such a route.

00:46.440 --> 00:50.100
We can port an object instead of a string.

00:50.430 --> 00:51.900
So let's quickly do that.

00:52.260 --> 00:56.750
And that object should now have the key which is called route.

00:56.910 --> 01:06.840
That is the path but then it also has a second property which is called payload and this is an object

01:06.840 --> 01:11.750
which can contain data that we want to pass to D to regenerate route.

01:11.910 --> 01:20.630
And here it simply lets say post data which is our response data for the given key.

01:20.670 --> 01:27.630
So now we don't just generate the path but all the data for that post is stored in a payload property

01:27.630 --> 01:30.140
and there in the post data property.

01:30.150 --> 01:35.990
Now we can use that payload in the index w fault in the posts Id folder.

01:36.300 --> 01:43.980
There we can check if our context has a payload property which it only has during the static generation

01:43.980 --> 01:44.890
command.

01:45.270 --> 01:53.990
If that's the case then I want to return different data to be merged with our data for this component.

01:54.000 --> 01:56.700
I won't make a new HTP request.

01:56.760 --> 02:07.950
Instead I return a javascript object where my loaded post is my context payload post data remember post

02:07.980 --> 02:08.930
data.

02:09.120 --> 02:13.090
That was the post data we stored here.

02:13.290 --> 02:16.340
With that if we save doesn't and we run generate again.

02:16.530 --> 02:18.270
It should still work.

02:18.340 --> 02:24.220
Does HTP request never gets executed because when you return from the async data function here already.

02:24.450 --> 02:30.360
So now it should still be able to reach generate all these files without issues but it will not make

02:30.390 --> 02:32.890
all these redundant HTP requests.

02:33.330 --> 02:40.620
If we have a look at our generated faults let's refresh just to make sure we're seeing the latest state.

02:40.890 --> 02:47.460
Here's our post and if we scroll to the right of it we should still see that it's populated with real

02:47.460 --> 02:52.340
content like last updated on 24 January so this is correct.

02:52.560 --> 02:56.980
But now this actually was made without making redundant requests.

02:57.030 --> 03:02.600
And with that I just want to ensure that we fix these off related errors and then we're good to go.
