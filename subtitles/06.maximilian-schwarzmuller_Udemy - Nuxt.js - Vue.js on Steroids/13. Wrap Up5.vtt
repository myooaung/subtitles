WEBVTT

00:02.450 --> 00:06.010
Oking Endace module we worked a lot with data.

00:06.160 --> 00:11.410
And now I really want to wrap this all up and summarize what you've learned so that this is all crystal

00:11.410 --> 00:19.000
clear with first of all had a look at async data a method you can add to any view component object to

00:19.150 --> 00:21.200
which you return to your page components.

00:21.340 --> 00:22.660
And that's important.

00:22.750 --> 00:26.920
Which just like fetch is only available in page components.

00:26.920 --> 00:32.420
You can't use it in layouts where abro components async data will be executed on the server.

00:32.440 --> 00:38.310
If you loading the page for the first time or on the client for subsequent clicks and arrogation actions

00:39.100 --> 00:43.480
and if you're running a sync code in there it will wait for that to finish.

00:43.600 --> 00:48.220
If you use that call back and call it or if you return a promise.

00:48.310 --> 00:51.050
One of the two has to be the case.

00:51.150 --> 00:57.390
It will then merge the data you return on the callback or you return from the promise with the data

00:57.540 --> 00:59.500
object you have in a component.

00:59.670 --> 01:04.860
So the object you can add with the normal data method it will merge with that.

01:04.860 --> 01:10.860
Or if you don't have the data method as we do here it will simply set it and from that point on you

01:10.860 --> 01:17.220
can always safely access that data in your template because the template is rendered off tracing data

01:17.250 --> 01:18.560
finished.

01:18.630 --> 01:22.110
It's powerful to fetch page specific data.

01:22.440 --> 01:28.360
If you get data that occurs in multiple places of your app you could look to fetch instead.

01:28.560 --> 01:36.210
Fetch is used just like async data in a page but unlike async data it doesn't merge the data with the

01:36.210 --> 01:38.280
data property of the component.

01:38.280 --> 01:42.810
Instead it stores it in the store at least a few instructed to do so.

01:42.840 --> 01:48.510
You can call the commit method inside their fetch just gets the data and leave it up to you what to

01:48.510 --> 01:49.170
do with it.

01:49.200 --> 01:52.970
It doesn't merged with the data property of the component though.

01:53.070 --> 01:57.570
Now that can be convenient but if you've got a large chunk of data which you need in multiple places

01:57.900 --> 02:01.460
the better approach might be to use a special next server in it.

02:01.470 --> 02:09.720
Action in the index has fallen your store folder here you set up the X store by setting up a factory

02:09.720 --> 02:16.290
function that returns a new store and that special action is always dispatched first on the server.

02:16.290 --> 02:23.790
By next only on the server once you run on the app and the client you'd never execute this again and

02:23.790 --> 02:26.490
therefore you got fast loading times.

02:26.520 --> 02:28.430
These are the different tools you have.

02:28.590 --> 02:35.080
And besides these tools you can of course work with the store just as any average you get.

02:35.130 --> 02:39.870
You can dispatch actions from anywhere including your layouts and Abaroa components.

02:40.080 --> 02:42.570
And you can perform mutations and so on.

02:42.570 --> 02:49.120
It's unnormal Buick's store the special thing of that module really was the thing about the basic data.

02:49.230 --> 02:56.310
The fecche method and the next server in it actually now in the next module we will finally add a real

02:56.310 --> 02:56.990
back end.

02:57.120 --> 03:02.810
So did you get a better feeling for how that works and how Nax place to Gabr with a back end.

03:02.970 --> 03:07.670
Because that can be confusing isn't next already running on the server.

03:07.740 --> 03:10.400
Let's take a closer look in the next module.
