WEBVTT

00:02.130 --> 00:07.110
Knouted restoring the token let's use it for outgoing requests.

00:07.110 --> 00:14.330
We have these requests or these actions in our next just fall into store add and edit post.

00:14.490 --> 00:18.670
Let's first try out what happens if I try to edit a post now.

00:18.910 --> 00:22.140
All the cons. again and it's simply not safe.

00:22.530 --> 00:29.340
I get this for a one error here I get navigated away still but I get this error.

00:29.610 --> 00:36.570
Now that is of course something that happens because we are not passing authentication information with

00:36.570 --> 00:40.670
the request and we locked down our firebase database rules.

00:40.680 --> 00:44.850
So we need to be authenticated in order to succeed.

00:44.850 --> 00:52.570
So what we can do is we can go back to our store file and in edit posts.

00:52.590 --> 00:53.860
Let's start with that.

00:53.910 --> 00:56.070
We have to attach to token.

00:56.070 --> 00:58.270
Now how do we attach the token.

00:58.320 --> 01:01.030
Let's quickly google for something.

01:01.260 --> 01:08.650
If you google for firebase rest API off you should find this authenticated rest requests article.

01:08.670 --> 01:15.060
And there you'll find information on how to add a token to your outgoing requests reaching you firebase

01:15.120 --> 01:16.250
rest API.

01:17.000 --> 01:23.580
If you scroll down a bit to firebase ID tokens you'll see that you need to add that off query parameter

01:23.580 --> 01:31.750
to your outgoing requests so that simply do that here on the edit post put request at the end off.

01:31.770 --> 01:38.350
Jason I'll add this question mark of thing and you're all simply add my token.

01:38.370 --> 01:40.330
Now how do I get access to it.

01:40.350 --> 01:42.570
I get my X context here.

01:43.800 --> 01:51.780
And on that context I can actually access my state and on that state I can get my token.

01:51.920 --> 01:56.040
So this allows me to extract the token in my action year.

01:56.090 --> 01:57.220
And now let's try this out.

01:57.260 --> 01:58.520
Let's go back now.

01:58.550 --> 02:04.640
Important you need to log in first because right now we have no way of persisting the token across page

02:04.640 --> 02:05.380
refreshes.

02:05.420 --> 02:11.410
So let's go back to the log in page and quickly log in there like this.

02:12.650 --> 02:19.490
And now if we know don't reload the page in between let's edit this post the exclamation mark for example

02:19.490 --> 02:22.740
in hit say and now does work.

02:22.780 --> 02:28.210
These are other errors we can see that it worked because there is this extra exclamation mark and it's

02:28.210 --> 02:28.900
still there.

02:28.900 --> 02:30.840
If we load the page.

02:30.970 --> 02:36.970
So this does work and we can attach the same logic with that of query parameter and the token from the

02:36.970 --> 02:39.350
state to our new post.

02:39.490 --> 02:43.770
You are out here in the at post-action there at the end of the URL.

02:43.810 --> 02:49.920
I also simply add this.

02:50.080 --> 02:53.620
With that we got our token in use.

02:53.650 --> 03:01.240
One problem we're facing is that we're not persisting the token across page refreshes and also that

03:01.270 --> 03:04.170
we're not really redirecting the user.

03:04.180 --> 03:10.860
In cases where he's not logged in right now and unsophisticated user can access all our routes.

03:10.930 --> 03:16.180
Now let's actually work on that first since we will use middleware for that and thereafter have a look

03:16.180 --> 03:19.620
at what we can do about refreshing the pages.
