WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.560
also of spring.

00:00:02.560 --> 00:00:04.430
It's possible to do property overriding as well.

00:00:04.430 --> 00:00:05.250
If you think about it,

00:00:05.250 --> 00:00:06.970
properties in coming from different locations,

00:00:06.970 --> 00:00:08.590
they can come in from a properties file,

00:00:08.590 --> 00:00:10.490
which is bundled with the application itself.

00:00:10.490 --> 00:00:14.480
And if you like that kind of like the tightest or the closest property source to the

00:00:14.480 --> 00:00:15.080
application.

00:00:15.080 --> 00:00:16.130
So what I mean by that is,

00:00:16.130 --> 00:00:17.930
if you look inside the Target Classes directory,

00:00:17.930 --> 00:00:19.520
you could see that if this was a jar file,

00:00:19.520 --> 00:00:22.150
then the application don't properties here would actually be part of that job.

00:00:22.150 --> 00:00:22.450
Well,

00:00:22.450 --> 00:00:25.120
and so if we didn't have this property of righting mechanism in spring,

00:00:25.120 --> 00:00:26.050
which I'm about to show you,

00:00:26.050 --> 00:00:29.040
the only way you could change the property will be to rebuild the application after you've

00:00:29.040 --> 00:00:30.090
modified this application.

00:00:30.090 --> 00:00:33.600
Properties File Virginia New release of a new jar file and typically in production.

00:00:33.600 --> 00:00:34.480
You don't want to do that.

00:00:34.480 --> 00:00:37.500
You might want to instead just override the property in some of the way,

00:00:37.500 --> 00:00:39.410
and you got a couple of options for this in spring,

00:00:39.410 --> 00:00:40.150
which I'll go over now.

00:00:40.150 --> 00:00:44.090
You can basically override either via an environment variable well via system property,

00:00:44.090 --> 00:00:47.050
which you passing to the job virtual machine when you run the program itself.

00:00:47.050 --> 00:00:48.350
So I see those in action now.

00:00:48.350 --> 00:00:52.140
So if I close that and if I got to hear the run menu,

00:00:52.140 --> 00:00:53.850
I'm going to edit configurations.

00:00:53.850 --> 00:00:57.070
Then here we can see the configuration,

00:00:57.070 --> 00:01:00.640
which we've bean using when we run the application of these rather settings for it.

00:01:00.640 --> 00:01:01.460
So here it saying,

00:01:01.460 --> 00:01:03.310
Run the men class app,

00:01:03.310 --> 00:01:04.790
which is the one that you've got here,

00:01:04.790 --> 00:01:08.350
that it's telling us to use that particular class both on this Jerry,

00:01:08.350 --> 00:01:09.620
it's not too interesting.

00:01:09.620 --> 00:01:14.230
But what is interesting is the fact that you can either pass in VM options or environment

00:01:14.230 --> 00:01:14.790
variables.

00:01:14.790 --> 00:01:15.460
So,

00:01:15.460 --> 00:01:15.870
for example,

00:01:15.870 --> 00:01:17.820
that's passing an environment variable of the same names.

00:01:17.820 --> 00:01:18.760
If I got my dot,

00:01:18.760 --> 00:01:22.810
name equals and let's call it Matt on the score end.

00:01:22.810 --> 00:01:28.950
So nights from the environment and they find you employ on okay,

00:01:28.950 --> 00:01:32.350
then if I rerun again,

00:01:32.350 --> 00:01:35.790
we'll see that all changed.

00:01:35.790 --> 00:01:36.070
Now.

00:01:36.070 --> 00:01:37.440
It won't be Matt anymore.

00:01:37.440 --> 00:01:38.670
Be matter on the Scott End,

00:01:38.670 --> 00:01:42.730
And that's because the precedence off the property from the environment is overriding the

00:01:42.730 --> 00:01:42.880
moon,

00:01:42.880 --> 00:01:45.390
which we have inside the application dot properties file here.

00:01:45.390 --> 00:01:46.100
Similarly,

00:01:46.100 --> 00:01:48.200
if I go back into edit configurations.

00:01:48.200 --> 00:01:51.550
But if I have a minus D switch,

00:01:51.550 --> 00:02:01.510
let's call it my underscore six prop and still have the environment variable set and then

00:02:01.510 --> 00:02:02.910
do applying.

00:02:02.910 --> 00:02:03.450
Okay,

00:02:03.450 --> 00:02:10.030
if I were now you'll see that we've got Maxus prop So Assistant property,

00:02:10.030 --> 00:02:11.470
which has passed into the JV m.

00:02:11.470 --> 00:02:14.200
That my honesty was for outranks an environment variable,

00:02:14.200 --> 00:02:17.310
which is part of the run time environment for the application process itself.

00:02:17.310 --> 00:02:21.680
It kind of makes sense because usually you have in a production application a user account

00:02:21.680 --> 00:02:24.470
which the application runs under that might have some environment variables,

00:02:24.470 --> 00:02:26.250
which a part of the profile for that count.

00:02:26.250 --> 00:02:30.070
But yet you might want to change it when launching the JV m itself and again because that's

00:02:30.070 --> 00:02:31.420
closer to the application.

00:02:31.420 --> 00:02:32.960
This is how we can override the environment,

00:02:32.960 --> 00:02:33.950
for Apple has been passed him.

00:02:33.950 --> 00:02:37.440
So that's how we injecting properties using the plantation style.

00:02:37.440 --> 00:02:37.920
Yeah,

00:02:37.920 --> 00:02:38.350
that's that.

00:02:38.350 --> 00:02:40.150
Would you property overriding in spring

