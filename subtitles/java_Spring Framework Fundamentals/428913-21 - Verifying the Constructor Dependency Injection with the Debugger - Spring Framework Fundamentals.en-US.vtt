WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.590
So now we've got the external configuration in place to do the constructor injection on the

00:00:05.590 --> 00:00:06.040
bean.

00:00:06.040 --> 00:00:09.390
Let's go back to the APP and run the program to make sure everything set up the way it

00:00:09.390 --> 00:00:09.750
should be.

00:00:09.750 --> 00:00:11.910
So if we go back to the app on,

00:00:11.910 --> 00:00:13.540
if we do control shifty,

00:00:13.540 --> 00:00:23.850
just a debug and look inside the concepts now looking so the bean factory and now the being

00:00:23.850 --> 00:00:24.750
definition map.

00:00:24.750 --> 00:00:26.450
You don't normally have to look in here,

00:00:26.450 --> 00:00:26.800
by the way,

00:00:26.800 --> 00:00:30.730
but it's sometimes useful to just have a looking in debug mode to make sure things are

00:00:30.730 --> 00:00:31.570
white correctly.

00:00:31.570 --> 00:00:34.010
But he can see without the service and the repository.

00:00:34.010 --> 00:00:36.200
And if we look inside,

00:00:36.200 --> 00:00:41.590
the service and the value of them just grow up a little bit.

00:00:41.590 --> 00:00:46.540
You'll see what constructive argument values general argument value,

00:00:46.540 --> 00:00:48.590
and it's a run.

00:00:48.590 --> 00:00:50.610
So I'm being referenced this thing called Repository.

00:00:50.610 --> 00:00:51.760
Okay,

00:00:51.760 --> 00:00:53.990
so that's what's inside the spring context.

00:00:53.990 --> 00:00:58.910
If we f aids to step over them and look at the bean that's returned,

00:00:58.910 --> 00:00:59.200
we'll see.

00:00:59.200 --> 00:01:00.210
We got my service,

00:01:00.210 --> 00:01:02.650
and now we have my repository,

00:01:02.650 --> 00:01:06.750
and now both of these beans were supplied by the spring container,

00:01:06.750 --> 00:01:08.890
but over and above what we saw before.

00:01:08.890 --> 00:01:10.800
In addition to just creating the beans,

00:01:10.800 --> 00:01:16.190
Spring has also injected the repository Bean into the service class.

00:01:16.190 --> 00:01:19.110
We can now invoke the business method on the bean.

00:01:19.110 --> 00:01:21.300
So if we do all 10 Fate,

00:01:21.300 --> 00:01:25.560
which brings up an evaluation window that sometimes very useful by the way to have this

00:01:25.560 --> 00:01:27.500
evaluation window when you were a deep succession,

00:01:27.500 --> 00:01:32.210
because then you can give it occurred fragment and executed on the fly so that we could do

00:01:32.210 --> 00:01:32.210
,

00:01:32.210 --> 00:01:32.710
for example,

00:01:32.710 --> 00:01:35.370
being adult do business logic.

00:01:35.370 --> 00:01:36.540
And if we just do control,

00:01:36.540 --> 00:01:38.350
enter to execute that,

00:01:38.350 --> 00:01:40.950
then go back into the console,

00:01:40.950 --> 00:01:43.890
we'll see what it's don't want you to do.

00:01:43.890 --> 00:01:46.670
It's doing the business logic than it's doing the DB query.

00:01:46.670 --> 00:01:49.230
That's good.

00:01:49.230 --> 00:01:51.390
You means you've got the beans wired up as they should be.

00:01:51.390 --> 00:01:53.810
I've got the spring container to do its dependency injection,

00:01:53.810 --> 00:01:54.800
which is what we wanted

