WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:06.300
so we know how to create the spring content to read configuration,

00:00:06.300 --> 00:00:09.550
which is external best on how to basically put a being in there,

00:00:09.550 --> 00:00:10.630
which is managed by spring,

00:00:10.630 --> 00:00:12.960
and then to retrieve it from that application context.

00:00:12.960 --> 00:00:13.660
That's good.

00:00:13.660 --> 00:00:16.740
I just want to point something out quickly before we carry on.

00:00:16.740 --> 00:00:20.050
And that's basically about the notion of a thing in spring called Scope.

00:00:20.050 --> 00:00:21.760
So to demonstrate this,

00:00:21.760 --> 00:00:30.020
if I copy this to make to variable references being one on being to Onda,

00:00:30.020 --> 00:00:33.010
we don't even need this now.

00:00:33.010 --> 00:00:33.850
To be honest with this,

00:00:33.850 --> 00:00:36.900
not she will create three.

00:00:36.900 --> 00:00:40.170
Why don't so if I said a break point,

00:00:40.170 --> 00:00:46.510
just drag it down here and now control shift in D to debug.

00:00:46.510 --> 00:00:49.520
If I step over this line to set the first variable up,

00:00:49.520 --> 00:00:51.550
the first reference to being one,

00:00:51.550 --> 00:00:56.780
then we can see here that being one has a reference to my service on.

00:00:56.780 --> 00:00:59.760
This is the representation of the address in memory where it is.

00:00:59.760 --> 00:01:00.210
In other words,

00:01:00.210 --> 00:01:03.050
it's just a number which gives the actual instance and identity,

00:01:03.050 --> 00:01:03.480
if you will.

00:01:03.480 --> 00:01:05.610
If I do a face again,

00:01:05.610 --> 00:01:13.730
you'll see that being too as a variable reference also points to my service 15 or six.

00:01:13.730 --> 00:01:19.610
So basically both the being one variable on the bean to variable both points for exactly

00:01:19.610 --> 00:01:20.500
the same instance.

00:01:20.500 --> 00:01:21.730
And simply as well.

00:01:21.730 --> 00:01:23.750
If I do being three again,

00:01:23.750 --> 00:01:26.580
it's the same instance on what's happening here.

00:01:26.580 --> 00:01:28.130
Is that the spring container,

00:01:28.130 --> 00:01:30.230
which is responsible for creating these beans?

00:01:30.230 --> 00:01:30.720
If you remember.

00:01:30.720 --> 00:01:33.910
So we've delegated the power of actually creating these beans ourselves.

00:01:33.910 --> 00:01:35.720
We've delegated those to the spring container.

00:01:35.720 --> 00:01:36.960
That's the entire point of spring,

00:01:36.960 --> 00:01:40.610
that it manages the life cycle of the beans and the relationships between the beans and all

00:01:40.610 --> 00:01:41.150
that kind of stuff.

00:01:41.150 --> 00:01:42.240
But dependency injection,

00:01:42.240 --> 00:01:44.340
which will cover shortly because we've done that,

00:01:44.340 --> 00:01:47.050
springs in control how the beans are created.

00:01:47.050 --> 00:01:52.850
Onda default So called scope for beans being created in spring is a thing called Singleton

00:01:52.850 --> 00:01:53.930
scope on.

00:01:53.930 --> 00:01:55.450
What that means is that Bean,

00:01:55.450 --> 00:01:56.930
when it's placed in the spring run time,

00:01:56.930 --> 00:01:58.270
is gonna be a singleton.

00:01:58.270 --> 00:01:58.880
In other words,

00:01:58.880 --> 00:02:01.630
along they exist one instance for the entire replication,

00:02:01.630 --> 00:02:04.200
which is bound into the application context.

00:02:04.200 --> 00:02:07.920
So spring is effectively media singleton single to meaning that there's only one instance

00:02:07.920 --> 00:02:08.710
in the application,

00:02:08.710 --> 00:02:10.590
and when we do get being when we call,

00:02:10.590 --> 00:02:11.930
get being off the context.

00:02:11.930 --> 00:02:15.920
It's getting as a reference to that singleton that one and only instance which we have in

00:02:15.920 --> 00:02:18.250
the spring container so that Singleton scope.

