WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.750
so going back to the men service class,

00:00:05.750 --> 00:00:07.590
we had the men being which we created before,

00:00:07.590 --> 00:00:09.000
which was call my service.

00:00:09.000 --> 00:00:12.010
You can see here from the AP class,

00:00:12.010 --> 00:00:12.780
the one that should do it.

00:00:12.780 --> 00:00:13.440
Get bean.

00:00:13.440 --> 00:00:16.790
It's been creates the being and then he turns it back to us here.

00:00:16.790 --> 00:00:19.000
And that's because if you look at my service will see,

00:00:19.000 --> 00:00:23.250
it doesn't have any state and it doesn't have a constructor explicitly defined.

00:00:23.250 --> 00:00:27.500
So what actually happens is behind the scenes Java Putzer D for construction,

00:00:27.500 --> 00:00:29.080
which looks like that.

00:00:29.080 --> 00:00:32.150
So whenever you don't explicitly defined a constructor in Java,

00:00:32.150 --> 00:00:34.500
the compiler puts one in for you so you don't have to do it.

00:00:34.500 --> 00:00:36.480
You just makes creating objects that bit easier.

00:00:36.480 --> 00:00:38.470
But the minute you do have a constructor,

00:00:38.470 --> 00:00:42.290
but then you won't get this default constrictor provided for you.

00:00:42.290 --> 00:00:42.590
Now,

00:00:42.590 --> 00:00:44.810
in the case of this simple being definition that we've created,

00:00:44.810 --> 00:00:47.250
we don't actually passing the state into the bean.

00:00:47.250 --> 00:00:48.570
And so because of this,

00:00:48.570 --> 00:00:53.220
the spring container can rely on the default constructor created by the compiler to enable

00:00:53.220 --> 00:00:57.930
it to create a new instance on demand money call getting so that's how that works.

00:00:57.930 --> 00:00:59.870
That's how the spring container can stand.

00:00:59.870 --> 00:01:02.910
She ate a simple being with no state by using the default constructor.

