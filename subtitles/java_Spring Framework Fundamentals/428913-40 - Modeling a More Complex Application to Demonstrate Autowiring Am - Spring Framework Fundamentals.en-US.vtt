WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.230
So in this video games have a look of what can happen when things get a little bit more

00:00:05.230 --> 00:00:07.340
complex and see some of the issues that we can run into.

00:00:07.340 --> 00:00:08.280
So first of all,

00:00:08.280 --> 00:00:09.070
I'm gonna revert.

00:00:09.070 --> 00:00:15.120
What we did before in APP config could be about this Java based configuration way of doing

00:00:15.120 --> 00:00:15.620
things,

00:00:15.620 --> 00:00:16.750
because in general,

00:00:16.750 --> 00:00:22.350
most projects that have used tense uses the component skinned mechanism.

00:00:22.350 --> 00:00:24.920
So if we go back to component scanning,

00:00:24.920 --> 00:00:26.030
so remember this more.

00:00:26.030 --> 00:00:28.330
Scan that package for classes,

00:00:28.330 --> 00:00:32.550
which annotated with where the service nor repository,

00:00:32.550 --> 00:00:37.320
a cease tomorrow and also in the service someone it's grating.

00:00:37.320 --> 00:00:37.980
Those components,

00:00:37.980 --> 00:00:40.210
like the services repositories or controllers,

00:00:40.210 --> 00:00:41.750
are plain vanilla components.

00:00:41.750 --> 00:00:47.050
It's gonna also search for auto wide fields on that component on that being do dependency

00:00:47.050 --> 00:00:48.700
injection to set that particular field,

00:00:48.700 --> 00:00:52.380
which should be another being which exists in the spring run time in the spring container.

00:00:52.380 --> 00:00:54.580
So we haven't spoke about it explicitly,

00:00:54.580 --> 00:00:57.600
but let's talk about this auto wired sanitation now in spring.

00:00:57.600 --> 00:00:59.090
There different ways of auto wiring.

00:00:59.090 --> 00:01:01.800
Thes dependence is you can either auto white by name,

00:01:01.800 --> 00:01:03.150
which will take the field name.

00:01:03.150 --> 00:01:04.560
It's a repository in this case,

00:01:04.560 --> 00:01:06.350
you can also wire by type.

00:01:06.350 --> 00:01:09.220
So don't take the reference type of the field,

00:01:09.220 --> 00:01:12.220
which in this case is my repository on by name and by type.

00:01:12.220 --> 00:01:15.230
Those two mechanisms used for set a dependency injection.

00:01:15.230 --> 00:01:15.890
Because here,

00:01:15.890 --> 00:01:16.160
of course,

00:01:16.160 --> 00:01:21.350
it's a field on the other way of auto wiring is with constructor injection,

00:01:21.350 --> 00:01:27.110
where you effectively move the auto wired annotation from the field itself and put it onto

00:01:27.110 --> 00:01:27.800
the constructor.

00:01:27.800 --> 00:01:31.740
So those are the three main ways have been able to do auto wiring in spring,

00:01:31.740 --> 00:01:33.630
and in this trivial application,

00:01:33.630 --> 00:01:37.300
everything works fine because we've only got three concrete classes that we could instead

00:01:37.300 --> 00:01:37.670
ship.

00:01:37.670 --> 00:01:41.440
But if you imagine you've got a larger application with many more classes on,

00:01:41.440 --> 00:01:42.340
probably interfaces,

00:01:42.340 --> 00:01:43.890
abstract classes on hold,

00:01:43.890 --> 00:01:45.450
hierarchies of classes as well,

00:01:45.450 --> 00:01:48.280
then things can get a bit more complex.

00:01:48.280 --> 00:01:52.140
So let's just reflect to this slightly so we can introduce them interfaces,

00:01:52.140 --> 00:01:55.590
and then we can use the interface type to be the reference that's gonna be used for this

00:01:55.590 --> 00:01:58.010
autumn wiring on Noah concrete class type.

00:01:58.010 --> 00:02:01.540
So what I mean by that is that my repository is public class,

00:02:01.540 --> 00:02:03.510
you know it's not interface is not an abstract class.

00:02:03.510 --> 00:02:05.560
It means we could just do knew my repository.

00:02:05.560 --> 00:02:09.310
We can create the class itself and it's the same thing with my services.

00:02:09.310 --> 00:02:09.690
Well,

00:02:09.690 --> 00:02:10.320
again,

00:02:10.320 --> 00:02:11.040
public class,

00:02:11.040 --> 00:02:11.790
my service.

00:02:11.790 --> 00:02:15.790
We could just create an instance of my service not providing we have a repository.

00:02:15.790 --> 00:02:18.870
But the main thing is the these are interface types Is the normal classes,

00:02:18.870 --> 00:02:19.330
If you will,

00:02:19.330 --> 00:02:21.020
they just happen to have some annotations on them.

00:02:21.020 --> 00:02:27.670
So let's go into my repository and going to re factor on extract interface.

00:02:27.670 --> 00:02:33.230
I'm gonna rename the original class to I am Peel to be in the implementation and then that

00:02:33.230 --> 00:02:34.480
class will implement the Inter.

00:02:34.480 --> 00:02:34.710
First,

00:02:34.710 --> 00:02:38.660
it's extracted out and we're gonna extract this myth that the one another method that which

00:02:38.660 --> 00:02:41.730
is due query It's a value reflector You can see now.

00:02:41.730 --> 00:02:42.280
After that,

00:02:42.280 --> 00:02:45.520
we still have a class which is a repository so will still be picked up by the spring of

00:02:45.520 --> 00:02:47.170
infrastructure to be recognizes,

00:02:47.170 --> 00:02:47.600
have bean.

00:02:47.600 --> 00:02:51.180
The only difference is in now implements this my repository interface here,

00:02:51.180 --> 00:02:52.670
which has appeared here.

00:02:52.670 --> 00:02:55.290
You can see let's do the same with my service as well.

00:02:55.290 --> 00:03:02.200
So my service right click re factor extract inter verse.

00:03:02.200 --> 00:03:05.150
We in the original quest.

00:03:05.150 --> 00:03:07.800
I mean,

00:03:07.800 --> 00:03:08.520
that's import.

00:03:08.520 --> 00:03:10.100
Just give it that impulsive fixtures,

00:03:10.100 --> 00:03:14.940
estates and implementation on extract out the one method in that class.

00:03:14.940 --> 00:03:16.480
Let's go to go in the interface as well,

00:03:16.480 --> 00:03:17.380
then re factor.

00:03:17.380 --> 00:03:19.090
Guess again.

00:03:19.090 --> 00:03:21.400
Same thing we still have at service here.

00:03:21.400 --> 00:03:22.640
This still makes that bean,

00:03:22.640 --> 00:03:24.910
which is gonna play nicely with the spring runtime.

00:03:24.910 --> 00:03:27.200
The only difference is we have this my service,

00:03:27.200 --> 00:03:28.020
which is an interface.

00:03:28.020 --> 00:03:28.600
Also.

00:03:28.600 --> 00:03:29.330
What's happened is,

00:03:29.330 --> 00:03:30.950
if you go back into my service import,

00:03:30.950 --> 00:03:36.050
you'll notice that the reference to my repository is actually now the interface type.

00:03:36.050 --> 00:03:38.560
So until a J ideas done that for us specifically,

00:03:38.560 --> 00:03:39.670
So whatever possible,

00:03:39.670 --> 00:03:44.040
it's gonna prefer interface types of a concrete classes in general that's always good to

00:03:44.040 --> 00:03:48.330
always prefer so called abstractions that's interfaces of a concretions That's concrete

00:03:48.330 --> 00:03:48.750
classes.

00:03:48.750 --> 00:03:52.200
The reason being is that you can always change the actual implementation that you want

00:03:52.200 --> 00:03:53.380
something else that earlier today,

00:03:53.380 --> 00:03:57.450
without having to change every single reference where it's used anyway going back to the

00:03:57.450 --> 00:03:57.840
code.

00:03:57.840 --> 00:04:00.050
So if we go back to app,

00:04:00.050 --> 00:04:04.950
we don't need this anymore.

00:04:04.950 --> 00:04:08.090
One of the change we need to make,

00:04:08.090 --> 00:04:09.460
and that's basically this.

00:04:09.460 --> 00:04:11.930
So in general in spring again is the same principle.

00:04:11.930 --> 00:04:13.630
Prefer abstractions over concretions?

00:04:13.630 --> 00:04:16.790
So the type which I'm passing the spring content to say,

00:04:16.790 --> 00:04:17.450
Give me the Bean,

00:04:17.450 --> 00:04:18.490
which matches this type,

00:04:18.490 --> 00:04:19.760
is the most abstract version.

00:04:19.760 --> 00:04:20.680
It's the interface type.

00:04:20.680 --> 00:04:24.170
It'll still pull back that implementation because that's the only option it has,

00:04:24.170 --> 00:04:27.450
because that's the one on the instance which happens to implement that interface.

00:04:27.450 --> 00:04:28.150
But nevertheless,

00:04:28.150 --> 00:04:29.600
that's how we get it from the spring container,

00:04:29.600 --> 00:04:30.970
bypassing the interface type.

00:04:30.970 --> 00:04:31.510
And then here,

00:04:31.510 --> 00:04:33.460
you can see when we receive it back.

00:04:33.460 --> 00:04:36.350
Were they storing it in the interface reference type as well?

00:04:36.350 --> 00:04:37.590
So all well and good,

00:04:37.590 --> 00:04:41.290
Let's just control shifty to debug this and make sure it's the works.

00:04:41.290 --> 00:04:44.240
If a two step over and here we can see,

00:04:44.240 --> 00:04:49.930
we've got service on Repository only this time it's my service simple with my repository

00:04:49.930 --> 00:04:50.280
import.

00:04:50.280 --> 00:04:51.780
So these are the implementations now,

00:04:51.780 --> 00:04:54.140
so we'll just stop that there Now.

00:04:54.140 --> 00:04:55.120
This point people thinking,

00:04:55.120 --> 00:04:55.660
Well,

00:04:55.660 --> 00:04:56.110
that's great,

00:04:56.110 --> 00:04:56.910
but what are you showing me?

00:04:56.910 --> 00:04:57.230
Well,

00:04:57.230 --> 00:05:01.120
the reason we've done this re factoring is demonstrate a little bit of complexity than

00:05:01.120 --> 00:05:02.110
application orbit.

00:05:02.110 --> 00:05:03.270
It's a little bit contrived here,

00:05:03.270 --> 00:05:04.310
but just bear with me.

00:05:04.310 --> 00:05:10.550
So that's supposing we have My service is Let's just take my service on my service.

00:05:10.550 --> 00:05:15.360
Simple SE is doing business logic as it did before.

00:05:15.360 --> 00:05:17.980
Now let's make another implementation of the service.

00:05:17.980 --> 00:05:21.190
So come and C Command V.

00:05:21.190 --> 00:05:24.980
I'm going to call this another service import,

00:05:24.980 --> 00:05:26.050
okay?

00:05:26.050 --> 00:05:26.890
Actually,

00:05:26.890 --> 00:05:27.210
just well,

00:05:27.210 --> 00:05:27.510
without it,

00:05:27.510 --> 00:05:27.610
well,

00:05:27.610 --> 00:05:28.980
it just creates a new packages as well,

00:05:28.980 --> 00:05:31.060
so we can definitely see what's going on Normal.

00:05:31.060 --> 00:05:34.430
You do this in and surprise application anyway,

00:05:34.430 --> 00:05:37.920
so you wanna have packages which correspond to the layers which are involved in the

00:05:37.920 --> 00:05:38.490
application.

00:05:38.490 --> 00:05:42.750
So we typically have a presentation layer we don't Here we do have any control is it's no

00:05:42.750 --> 00:05:43.250
Web app.

00:05:43.250 --> 00:05:45.450
But just for the purposes of demonstration,

00:05:45.450 --> 00:05:49.850
we'd have services,

00:05:49.850 --> 00:05:52.620
sometimes even business line.

00:05:52.620 --> 00:06:00.890
If you like where the services are gonna live and you can have a persistence,

00:06:00.890 --> 00:06:02.180
or actually or dare to lay.

00:06:02.180 --> 00:06:03.510
What if it doesn't really matter?

00:06:03.510 --> 00:06:04.480
One of you call these,

00:06:04.480 --> 00:06:06.040
it doesn't really matter.

00:06:06.040 --> 00:06:13.010
But we'll just shift the repository classes into the dead Alaia Persistence layer will

00:06:13.010 --> 00:06:13.650
shift.

00:06:13.650 --> 00:06:21.600
The service is into the business lab and then app on that conflict just to stay where they

00:06:21.600 --> 00:06:21.880
are.

00:06:21.880 --> 00:06:23.380
Let's just talk to the soup.

00:06:23.380 --> 00:06:25.340
So to get back what we're saying.

00:06:25.340 --> 00:06:26.950
So I go into the business layer.

00:06:26.950 --> 00:06:29.730
Here we have this my service.

00:06:29.730 --> 00:06:32.380
And if you do control hates to get a hierarchy weaken.

00:06:32.380 --> 00:06:32.570
See,

00:06:32.570 --> 00:06:35.020
now we have two implementations of that service.

00:06:35.020 --> 00:06:36.200
So my service import,

00:06:36.200 --> 00:06:39.750
which is the original when we started with on this another service Simple.

00:06:39.750 --> 00:06:43.380
So two different service implementations which both do what they're supposed to do in

00:06:43.380 --> 00:06:45.350
accordance with is my service interface.

00:06:45.350 --> 00:06:47.050
So they're gonna do some business logic,

00:06:47.050 --> 00:06:48.850
but there's gonna do it in different ways.

00:06:48.850 --> 00:06:53.140
So I said,

00:06:53.140 --> 00:06:57.050
doing some business logic slightly differently.

00:06:57.050 --> 00:06:58.150
For example,

00:06:58.150 --> 00:07:01.990
maybe this one doesn't clear the repository for whatever reason,

00:07:01.990 --> 00:07:07.050
just to make it a little bit more interesting.

00:07:07.050 --> 00:07:12.660
The key point is that they both implement my service and they both of around the same

00:07:12.660 --> 00:07:13.150
method.

00:07:13.150 --> 00:07:17.480
So if you can imagine the spring container now because we have these two implementations

00:07:17.480 --> 00:07:18.200
which both important,

00:07:18.200 --> 00:07:22.560
the same interface is gonna need a bit of help to work out which implementation we want to

00:07:22.560 --> 00:07:24.250
use when we retrieve a bean on,

00:07:24.250 --> 00:07:25.660
we'll see how to do that in the next video.

00:07:25.660 --> 00:07:26.850
When we look at qualifiers

