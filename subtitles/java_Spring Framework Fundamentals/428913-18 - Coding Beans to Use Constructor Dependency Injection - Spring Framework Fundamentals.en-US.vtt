WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.270
now.

00:00:02.270 --> 00:00:02.910
In the last video,

00:00:02.910 --> 00:00:04.520
we discussed stateless beans,

00:00:04.520 --> 00:00:07.150
which could just be created on Don't hold any state.

00:00:07.150 --> 00:00:08.040
Moreover,

00:00:08.040 --> 00:00:11.510
there they don't hold any references to any other beans on.

00:00:11.510 --> 00:00:14.420
This leads us nicely onto the topic of dependency injection.

00:00:14.420 --> 00:00:16.280
This is where we actually want to have a bean,

00:00:16.280 --> 00:00:17.490
which uses something else.

00:00:17.490 --> 00:00:17.680
So,

00:00:17.680 --> 00:00:18.080
for example,

00:00:18.080 --> 00:00:20.230
you've got one bean in the application context.

00:00:20.230 --> 00:00:22.320
You've got another being in the application context.

00:00:22.320 --> 00:00:26.660
So being air and being be and you want being be to be injected into being air,

00:00:26.660 --> 00:00:28.350
such that being a and do stuff with it.

00:00:28.350 --> 00:00:29.870
So let's have a look how to do that now.

00:00:29.870 --> 00:00:33.900
So let's supposing this is a service on this service?

00:00:33.900 --> 00:00:35.350
Does some business logic,

00:00:35.350 --> 00:00:38.050
I should say,

00:00:38.050 --> 00:00:43.860
doing some business logic because in our service classes,

00:00:43.860 --> 00:00:46.430
that's where the business logic of an application happens in general,

00:00:46.430 --> 00:00:48.300
with lead applications on,

00:00:48.300 --> 00:00:49.650
let's create repository.

00:00:49.650 --> 00:00:56.720
So that's supposing that we have a repository bean,

00:00:56.720 --> 00:00:57.600
and that's not persistence.

00:00:57.600 --> 00:01:00.940
Layer on that knows how to talk to whatever data still we might be using.

00:01:00.940 --> 00:01:01.600
Okay,

00:01:01.600 --> 00:01:05.110
we're not gonna put the actual code in here to access the data store or set up a New Jersey

00:01:05.110 --> 00:01:05.110
.

00:01:05.110 --> 00:01:05.870
BC stuff.

00:01:05.870 --> 00:01:09.590
We're just going through this now to illustrate the concept of layering on how dependency

00:01:09.590 --> 00:01:10.780
injection works in spring.

00:01:10.780 --> 00:01:12.630
So just hanging there,

00:01:12.630 --> 00:01:13.990
stay with me for the time being on,

00:01:13.990 --> 00:01:15.210
we're gonna see how to dependency.

00:01:15.210 --> 00:01:17.950
Inject the repository into the service very shortly.

00:01:17.950 --> 00:01:18.960
But for now,

00:01:18.960 --> 00:01:21.780
let's just imagine we have a method on here,

00:01:21.780 --> 00:01:24.050
which is like we had do business logic before.

00:01:24.050 --> 00:01:27.390
Let's just say we have do query.

00:01:27.390 --> 00:01:27.850
Yeah,

00:01:27.850 --> 00:01:29.950
so that is gonna do some kind of query.

00:01:29.950 --> 00:01:32.470
Institutes of store.

00:01:32.470 --> 00:01:36.260
Let's imagine that is a query,

00:01:36.260 --> 00:01:36.990
which is fine.

00:01:36.990 --> 00:01:42.560
And then the service see doing business logic.

00:01:42.560 --> 00:01:42.970
Now,

00:01:42.970 --> 00:01:43.740
in this example,

00:01:43.740 --> 00:01:45.960
the service needs to use the repository,

00:01:45.960 --> 00:01:49.990
Let's say to get some data back from the data store water somehow do something with a

00:01:49.990 --> 00:01:50.650
database.

00:01:50.650 --> 00:01:55.540
So let's put a reference in to the repository.

00:01:55.540 --> 00:01:59.730
They So the service now has a reference to the repository,

00:01:59.730 --> 00:02:01.150
and then once that happens,

00:02:01.150 --> 00:02:02.670
once we have that set up,

00:02:02.670 --> 00:02:04.760
then we could just do repository dot do query.

00:02:04.760 --> 00:02:09.960
So this is an example of the service delegating responsibility to access the data store,

00:02:09.960 --> 00:02:14.640
delegating that to the repository object because we don't want to have data access logic in

00:02:14.640 --> 00:02:14.980
the layer,

00:02:14.980 --> 00:02:16.840
which is responsible for business logic.

00:02:16.840 --> 00:02:17.590
Just like,

00:02:17.590 --> 00:02:18.160
for example,

00:02:18.160 --> 00:02:19.200
in a Web application.

00:02:19.200 --> 00:02:21.290
We don't want to have business logic in the layer,

00:02:21.290 --> 00:02:24.890
which is responsible for handling the Web requests in the presentation layer.

00:02:24.890 --> 00:02:27.750
So this is just layering in surprise applications.

00:02:27.750 --> 00:02:32.210
We want every layer toe have a specific goal or purpose on all classes,

00:02:32.210 --> 00:02:35.570
winning that layer aligned to doing that particular thing.

00:02:35.570 --> 00:02:39.250
So presentation Layer has some controllers to service Web requests.

00:02:39.250 --> 00:02:44.790
Service layer as services which have business logic on a persistence layer has repositories

00:02:44.790 --> 00:02:46.240
which know how to access the data store.

00:02:46.240 --> 00:02:47.190
And,

00:02:47.190 --> 00:02:47.370
you know,

00:02:47.370 --> 00:02:51.320
this is very typical of enterprise applications and in particular of enterprise spring

00:02:51.320 --> 00:02:52.300
applications as well.

00:02:52.300 --> 00:02:54.250
So that's one good.

00:02:54.250 --> 00:02:57.050
If we go into the application context now,

00:02:57.050 --> 00:03:00.850
we could create another being definition here.

00:03:00.850 --> 00:03:03.030
And just like we've created the service,

00:03:03.030 --> 00:03:05.450
we could also create a repository one as well.

00:03:05.450 --> 00:03:10.720
So my repository Now,

00:03:10.720 --> 00:03:11.020
of course,

00:03:11.020 --> 00:03:12.550
going back to my service,

00:03:12.550 --> 00:03:16.300
we need to actually set the repository into the service itself.

00:03:16.300 --> 00:03:18.840
So we're gonna do that through using the constructor.

00:03:18.840 --> 00:03:21.050
So we're gonna continue constructed here my service,

00:03:21.050 --> 00:03:24.250
which takes the repository.

00:03:24.250 --> 00:03:29.080
How we gonna sign it?

00:03:29.080 --> 00:03:34.090
This repository equals repository.

00:03:34.090 --> 00:03:36.950
She lets just move that underneath.

00:03:36.950 --> 00:03:38.680
It's another looks good.

00:03:38.680 --> 00:03:42.680
Service has a constructor which takes a repository Repository stepped on the member

00:03:42.680 --> 00:03:43.300
variable.

00:03:43.300 --> 00:03:46.200
And then that means that when we come to execute this do business logic here,

00:03:46.200 --> 00:03:49.180
it will use the instance of repository to do the query,

00:03:49.180 --> 00:03:50.350
which is fine.

00:03:50.350 --> 00:03:51.080
No,

00:03:51.080 --> 00:03:54.880
this point our codes all set up and ready to use dependency injection.

