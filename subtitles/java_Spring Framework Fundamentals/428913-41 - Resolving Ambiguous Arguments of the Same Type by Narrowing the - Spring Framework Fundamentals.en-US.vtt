WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:06.150
So we have these two separate implementations which both implement the same interface.

00:00:06.150 --> 00:00:07.920
So let's think about what happens now.

00:00:07.920 --> 00:00:12.750
Then we've got my service simple with this app service annotation,

00:00:12.750 --> 00:00:17.110
Which means that springs gonna pick it up and register it as an auto wiring candidate to be

00:00:17.110 --> 00:00:21.800
injected into any dependencies that you might need to use it on the same thing with this

00:00:21.800 --> 00:00:22.800
other service one here.

00:00:22.800 --> 00:00:31.140
So we're now going to app and we look at this method,

00:00:31.140 --> 00:00:31.480
Cole,

00:00:31.480 --> 00:00:34.710
you can probably imagine there's gonna be some ambiguity here which needs to be resolved

00:00:34.710 --> 00:00:37.550
because we're only asking for something that implements my service.

00:00:37.550 --> 00:00:41.780
But now we have two implementations of beans which implement my service.

00:00:41.780 --> 00:00:43.580
So let's see what happens in that case.

00:00:43.580 --> 00:00:44.230
So far,

00:00:44.230 --> 00:00:45.750
you control shift are to run this.

00:00:45.750 --> 00:00:50.870
We'll get a spring error and here you can see the arrow says,

00:00:50.870 --> 00:00:52.350
no unique being definition exception.

00:00:52.350 --> 00:00:53.550
No qualifying being off,

00:00:53.550 --> 00:00:55.400
type on in my service available.

00:00:55.400 --> 00:00:57.180
I expected a single matching being,

00:00:57.180 --> 00:01:02.080
but found to on here it gives you the to beans which implement that interface.

00:01:02.080 --> 00:01:04.330
Would you saying you know which one do you want me to use?

00:01:04.330 --> 00:01:05.600
You've gotta help me out here.

00:01:05.600 --> 00:01:06.570
Give me some kind of clue.

00:01:06.570 --> 00:01:08.460
So there are different ways of solving this.

00:01:08.460 --> 00:01:10.260
You could be explicit.

00:01:10.260 --> 00:01:10.950
So,

00:01:10.950 --> 00:01:11.390
for example,

00:01:11.390 --> 00:01:16.410
you could say we want to know the service simple,

00:01:16.410 --> 00:01:17.010
for example.

00:01:17.010 --> 00:01:18.740
So if we do that,

00:01:18.740 --> 00:01:19.460
that would be fine.

00:01:19.460 --> 00:01:23.130
And indeed it is self control.

00:01:23.130 --> 00:01:26.860
Shifty here.

00:01:26.860 --> 00:01:28.910
When we f eight to step over it here,

00:01:28.910 --> 00:01:29.900
we could see we got the other set.

00:01:29.900 --> 00:01:30.520
Another service.

00:01:30.520 --> 00:01:31.050
Simple.

00:01:31.050 --> 00:01:33.150
You can also as well.

00:01:33.150 --> 00:01:38.250
There's nothing to stop you having,

00:01:38.250 --> 00:01:41.240
you know,

00:01:41.240 --> 00:01:46.840
getting these two instances back explicitly and using them,

00:01:46.840 --> 00:01:47.850
whatever you want to use them.

00:01:47.850 --> 00:01:48.350
So here,

00:01:48.350 --> 00:01:49.430
as we can see,

00:01:49.430 --> 00:01:52.150
we've got under the service simple on my service import.

00:01:52.150 --> 00:01:53.190
So that's perfectly fine.

00:01:53.190 --> 00:01:54.000
That's all well and good.

00:01:54.000 --> 00:01:57.630
This works in the case when we're explicitly getting a being from the application context.

00:01:57.630 --> 00:01:58.220
That's fine.

00:01:58.220 --> 00:01:59.520
But there's another scenario as well,

00:01:59.520 --> 00:02:00.630
where you might get ambiguity,

00:02:00.630 --> 00:02:04.350
and that's when you're not getting the bean from the spring context like we are here.

00:02:04.350 --> 00:02:09.100
But instead you delegating responsibility to the spring container to injector bean to do

00:02:09.100 --> 00:02:10.250
its dependency injection.

00:02:10.250 --> 00:02:12.150
So let's have a look at that case now,

00:02:12.150 --> 00:02:15.550
So if I go into my service simple,

00:02:15.550 --> 00:02:16.450
for example.

00:02:16.450 --> 00:02:19.650
And here you can see it's expecting my repository.

00:02:19.650 --> 00:02:20.830
But again,

00:02:20.830 --> 00:02:21.800
we could do the same thing.

00:02:21.800 --> 00:02:33.260
We can copy my repository import and create some of the repository import can just change

00:02:33.260 --> 00:02:33.990
my search for now.

00:02:33.990 --> 00:02:37.540
And if we look at the type Iraqi on there,

00:02:37.540 --> 00:02:38.240
we can see.

00:02:38.240 --> 00:02:40.850
Now we've got some of the reports trample on my repository.

00:02:40.850 --> 00:02:44.850
Impulsive got to implementations of the same interface type,

00:02:44.850 --> 00:02:50.710
but because in my service import were only specifying the interface type Spring won't know

00:02:50.710 --> 00:02:51.180
what to do.

00:02:51.180 --> 00:02:57.070
So even though we have solved the first problem by being very explicit was still gonna have

00:02:57.070 --> 00:02:58.650
an issue when we execute this line here.

00:02:58.650 --> 00:03:00.690
So let's just try that now,

00:03:00.690 --> 00:03:01.000
Sir,

00:03:01.000 --> 00:03:02.940
Control Shifty to debug.

00:03:02.940 --> 00:03:05.320
And in fact,

00:03:05.320 --> 00:03:05.590
you get it.

00:03:05.590 --> 00:03:06.430
Even before then.

00:03:06.430 --> 00:03:06.820
From here,

00:03:06.820 --> 00:03:09.150
we could see we got no unique being definition exception.

00:03:09.150 --> 00:03:10.590
No qualifying being again.

00:03:10.590 --> 00:03:11.510
It's disqualifying.

00:03:11.510 --> 00:03:12.640
Qualifier idea.

00:03:12.640 --> 00:03:15.060
No qualifying being of type body block.

00:03:15.060 --> 00:03:19.410
My repository available expected single matching being but found to the same thing my

00:03:19.410 --> 00:03:25.010
repository import and some other repository import now,

00:03:25.010 --> 00:03:28.920
whereas in this case we could be more specific about the type when we invoked that,

00:03:28.920 --> 00:03:34.370
Get bean with it and indeed we could do the same thing here.

00:03:34.370 --> 00:03:35.380
So we could actually,

00:03:35.380 --> 00:03:37.400
I just said,

00:03:37.400 --> 00:03:37.770
You know what?

00:03:37.770 --> 00:03:41.440
I want the some of the repository import one on that would work.

00:03:41.440 --> 00:03:42.220
That's fine.

00:03:42.220 --> 00:03:43.010
So basically,

00:03:43.010 --> 00:03:46.540
this is using the concrete type now for the purposes of dependency injection,

00:03:46.540 --> 00:03:48.960
which means the auto wiring will work on Beacon.

00:03:48.960 --> 00:03:52.260
Still assign a reference off that implementation to its interface.

00:03:52.260 --> 00:03:52.920
That that's fine.

00:03:52.920 --> 00:03:54.670
So let's just try that control.

00:03:54.670 --> 00:03:55.350
Shifty,

00:03:55.350 --> 00:03:58.280
you can see now that's fine.

00:03:58.280 --> 00:03:59.760
And again,

00:03:59.760 --> 00:04:03.520
we can step through on the narrow types have solved the ambiguity problem that we had

00:04:03.520 --> 00:04:03.910
before.

