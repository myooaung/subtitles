WEBVTT
1
00:00:02.024 --> 00:00:06.106
Now first it can be a bit confusing the difference between

2
00:00:06.106 --> 00:00:09.953
scopes and roles versus authorities.

3
00:00:09.953 --> 00:00:11.425
In OAuth2,

4
00:00:11.425 --> 00:00:16.418
scopes define the scope of the access the resource owner has

5
00:00:16.418 --> 00:00:20.360
approved the client to perform on their behalf,

6
00:00:20.360 --> 00:00:26.746
generally in the token they have defined under the scope or scp property.

7
00:00:26.746 --> 00:00:33.009
However, sometimes they can be claims about a resource owner like their roles,

8
00:00:33.009 --> 00:00:35.658
which also need to be considered.

9
00:00:35.658 --> 00:00:39.638
For example, a user, the resource owner,

10
00:00:39.638 --> 00:00:45.084
might have approved a client to access the administrator functions of the

11
00:00:45.084 --> 00:00:49.741
application on their behalf by including the scope admin.

12
00:00:49.741 --> 00:00:52.793
However, the user might not be an admin.

13
00:00:52.793 --> 00:00:57.627
So even though the resource server trusts the user approved the client to

14
00:00:57.627 --> 00:01:02.164
access the admin section by including the admin scope,

15
00:01:02.164 --> 00:01:05.756
it can still reject the request because the user is not

16
00:01:05.756 --> 00:01:08.090
entitled to access the admin section.

17
00:01:08.090 --> 00:01:10.637
They don't have an admin role.

18
00:01:10.637 --> 00:01:14.505
And vice versa, the user might be an administrator, i.e.

19
00:01:14.505 --> 00:01:19.786
having an admin role, and be entitled to access the admin section.

20
00:01:19.786 --> 00:01:24.249
However, they did not authorize the client with the admin scope.

21
00:01:24.249 --> 00:01:30.380
Hence, even though the resource server can verify the user is an administrator,

22
00:01:30.380 --> 00:01:33.344
it will still reject any access to the administrator resources

23
00:01:33.344 --> 00:01:37.026
for the client because they don't have the appropriate scope

24
00:01:37.026 --> 00:01:41.521
authorized by the resource owner to access the administrator

25
00:01:41.521 --> 00:01:44.033
resources on their behalf.

26
00:01:44.033 --> 00:01:47.014
Now Spring stores roles, scopes,

27
00:01:47.014 --> 00:01:52.240
and authorities in the same collection called the granted authorities.

28
00:01:52.240 --> 00:01:55.344
In order to avoid name collisions,

29
00:01:55.344 --> 00:01:59.836
say you have an existing application with the role of admin,

30
00:01:59.836 --> 00:02:05.932
you configure OAuth2 in your application and the scope of admin is in the JWT,

31
00:02:05.932 --> 00:02:08.637
both mean two different things.

32
00:02:08.637 --> 00:02:10.940
The role indicates the user is an administrator,

33
00:02:10.940 --> 00:02:14.613
and the scope indicates they authorize the bearer to

34
00:02:14.613 --> 00:02:18.363
access the admin resources on their behalf.

35
00:02:18.363 --> 00:02:23.372
So in order to have both a scope and a role with the same name,

36
00:02:23.372 --> 00:02:30.106
Spring uses the prefix ROLE_ for roles and SCOPE_ for scopes.

37
00:02:30.106 --> 00:02:33.180
But for authorities, there is no prefix.

38
00:02:33.180 --> 00:02:37.314
Hence, in the code if you see hasRole ADMIN,

39
00:02:37.314 --> 00:02:40.913
Spring will actually search for a value of

40
00:02:40.913 --> 00:02:43.497
ROLE_ADMIN in the granted authorities,

41
00:02:43.497 --> 00:02:56.000
which is the same as using hasAuthority ROLE_ADMIN. If you need to check for a scope, you can use the hasAuthority SCOPE_ADMIN.

