1
00:00:02,363 --> 00:00:08,555
One of the key new features of OpenID Connect is the identity token.

2
00:00:08,555 --> 00:00:11,625
It's a JWT that thinks claims about how the authentication

3
00:00:11,625 --> 00:00:16,762
occurred for the end user by the authorization server and allows

4
00:00:16,762 --> 00:00:20,345
your client to validate that authentication.

5
00:00:20,345 --> 00:00:21,212
Now to do this,

6
00:00:21,212 --> 00:00:26,393
it has a number of mandatory claims about the authentication process,

7
00:00:26,393 --> 00:00:31,764
such as the subject, which asserts the identity of the user.

8
00:00:31,764 --> 00:00:34,520
Now it must be unique and never reassignable.

9
00:00:34,520 --> 00:00:37,696
This allows a client to confidently use that field as

10
00:00:37,696 --> 00:00:40,195
a unique identifier for the user.

11
00:00:40,195 --> 00:00:43,278
The issuer field, this describes who's the issuing authority,

12
00:00:43,278 --> 00:00:47,339
and it allows the client to verify the user was

13
00:00:47,339 --> 00:00:49,508
authenticated by the expected source.

14
00:00:49,508 --> 00:00:53,073
Audience, this is a very important field.

15
00:00:53,073 --> 00:00:57,277
It basically identifies the client that was authenticated.

16
00:00:57,277 --> 00:00:59,674
Now it must be a client ID.

17
00:00:59,674 --> 00:01:03,541
The reason for this field is that your typical OpenID Connect provider,

18
00:01:03,541 --> 00:01:06,788
like Google, will support thousands of clients.

19
00:01:06,788 --> 00:01:07,035
Hence,

20
00:01:07,035 --> 00:01:10,081
your client can use this claim to ensure that the user

21
00:01:10,081 --> 00:01:12,334
was authenticated for your application.

22
00:01:12,334 --> 00:01:14,234
The expiration time,

23
00:01:14,234 --> 00:01:18,500
now one great feature about including this is that they also specify the

24
00:01:18,500 --> 00:01:22,421
format of the expiry time that the provider must use,

25
00:01:22,421 --> 00:01:25,871
which is great as before you had to deal with all the

26
00:01:25,871 --> 00:01:27,756
various different formats for each provider.

27
00:01:27,756 --> 00:01:31,631
Now there were also some useful optional claims as well.

28
00:01:31,631 --> 00:01:31,905
However,

29
00:01:31,905 --> 00:01:36,085
you generally find that most authentication providers will include these.

30
00:01:36,085 --> 00:01:40,286
Some key ones is the issued at, when was this token issued,

31
00:01:40,286 --> 00:01:44,233
and the auth time, when was it authorized.

32
00:01:44,233 --> 00:01:47,908
These are great for customizing your validation of a token.

33
00:01:47,908 --> 00:01:48,763
So for example,

34
00:01:48,763 --> 00:01:52,354
you might decide that even though the token is not yet

35
00:01:52,354 --> 00:01:54,860
expired according to the expiration claim,

36
00:01:54,860 --> 00:01:58,637
your application will only accept tokens that have been

37
00:01:58,637 --> 00:02:00,580
issued within the last 2 minutes.

38
00:02:00,580 --> 00:02:03,520
So it allows you to have your own expiration policy rather

39
00:02:03,520 --> 00:02:07,382
than relying on the authorization server's.

40
00:02:07,382 --> 00:02:10,488
Now OpenID Connect also introduced some standard scopes,

41
00:02:10,488 --> 00:02:13,309
and some key ones are the OpenID,

42
00:02:13,309 --> 00:02:18,289
which is mandatory and must be included as the first scope and

43
00:02:18,289 --> 00:02:21,937
indicates that this application intends to use OpenID Connect

44
00:02:21,937 --> 00:02:24,551
to verify the user's identity.

45
00:02:24,551 --> 00:02:27,117
Some of the other keys ones is a profile indicates that

46
00:02:27,117 --> 00:02:30,475
the user's profile claim is required, email address,

47
00:02:30,475 --> 00:02:35,865
and, of course, offline access, which is for the refresh token.

48
00:02:35,865 --> 00:02:38,393
Now you could also include custom scopes.

49
00:02:38,393 --> 00:02:40,138
Now there are many more other scopes.

50
00:02:40,138 --> 00:02:43,067
But the key feature is that for each scope,

51
00:02:43,067 --> 00:02:46,535
there are default standard claims associated with them.

52
00:02:46,535 --> 00:02:49,238
So if you user consents to a scope,

53
00:02:49,238 --> 00:02:55,016
the authorization server will return all or a subset of the standard claims.

54
00:02:55,016 --> 00:02:56,851
Now this is a great feature.

55
00:02:56,851 --> 00:02:59,501
You will see the benefit of it in the next module.

56
00:02:59,501 --> 00:02:59,817
Basically,

57
00:02:59,817 --> 00:03:04,174
if your application is looking for their user's email claim or

58
00:03:04,174 --> 00:03:07,138
the address and you're using OpenID Connect,

59
00:03:07,138 --> 00:03:11,200
then you know that that claim will be named address and email,

60
00:03:11,200 --> 00:03:17,788
not ADR or ADDR or EML or some other format the provider might use.

61
00:03:17,788 --> 00:03:21,667
Now additionally to the scopes, there are standard endpoints.

62
00:03:21,667 --> 00:03:24,068
So once you know the provider's location,

63
00:03:24,068 --> 00:03:29,188
the endpoint URLs will be the same for every OpenID Connect provider.

64
00:03:29,188 --> 00:03:31,740
Now some of the key endpoints are the UserInfo endpoint

65
00:03:31,740 --> 00:03:35,406
where the client can request previously consented user

66
00:03:35,406 --> 00:03:37,987
claims using the access token.

67
00:03:37,987 --> 00:03:41,485
You're probably thinking if we have an ID token,

68
00:03:41,485 --> 00:03:43,807
why do we still need the access token?

69
00:03:43,807 --> 00:03:47,810
Well the ID token might not have all the claims about the resource

70
00:03:47,810 --> 00:03:51,473
owner that were requested as it might be a thin token,

71
00:03:51,473 --> 00:03:55,508
meaning it has a subset of only the essential claims

72
00:03:55,508 --> 00:03:58,033
you might require for authentication.

73
00:03:58,033 --> 00:04:02,326
The ID token only mandates claims about how the authentication occurred

74
00:04:02,326 --> 00:04:06,594
and what format the user's claim should be in if the authorization

75
00:04:06,594 --> 00:04:09,493
server decides to add them to the ID token.

76
00:04:09,493 --> 00:04:13,350
Now this is generally to keep the size of the ID token small

77
00:04:13,350 --> 00:04:16,539
so it's compatible with mobile clients.

78
00:04:16,539 --> 00:04:16,844
However,

79
00:04:16,844 --> 00:04:20,823
if you need all the user's claims like say it's the first time the user is

80
00:04:20,823 --> 00:04:23,700
accessing your application and you need to register them,

81
00:04:23,700 --> 00:04:28,753
then you can go to the UserInfo endpoint and get all the claims.

82
00:04:28,753 --> 00:04:29,277
However,

83
00:04:29,277 --> 00:04:32,302
that's an implementation decision with the provider

84
00:04:32,302 --> 00:04:34,998
whether they provide a fat or thin token.

85
00:04:34,998 --> 00:04:39,451
The main point is the access token combined with the refresh token

86
00:04:39,451 --> 00:04:43,166
allows for rerequesting approved user claims without having to

87
00:04:43,166 --> 00:04:46,905
bother the user to reconsent each time.

88
00:04:46,905 --> 00:04:48,129
The WebFinder endpoint,

89
00:04:48,129 --> 00:04:51,875
this provides a way to dynamically discover the OpenID

90
00:04:51,875 --> 00:04:54,701
Connect provider for a given user.

91
00:04:54,701 --> 00:04:58,569
Provider metadata, this is a very useful endpoint.

92
00:04:58,569 --> 00:05:02,655
It returns a discovery document with all the OpenID Connect

93
00:05:02,655 --> 00:05:06,278
details of the provider and what it supports,

94
00:05:06,278 --> 00:05:12,070
such as support response, grant type, URL of the JW keyset,

95
00:05:12,070 --> 00:05:16,111
the asserted issuer, supported scopes, token endpoints,

96
00:05:16,111 --> 00:05:20,057
basically everything a client might need to dynamically configure

97
00:05:20,057 --> 00:05:23,799
itself with the provider and validate tokens.

98
00:05:23,799 --> 00:05:27,614
There's also a session management endpoint, which is quite useful.

99
00:05:27,614 --> 00:05:30,672
This checks if the user still has an active session with the

100
00:05:30,672 --> 00:05:34,520
authentication server as the client might also want to log the user out

101
00:05:34,520 --> 00:05:38,545
from their end if they log out from the provider.

102
00:05:38,545 --> 00:05:39,985
There are many others.

103
00:05:39,985 --> 00:05:41,981
I encourage you to check the spec.

104
00:05:41,981 --> 00:05:45,638
But the great thing is if you're dealing with an OpenID Connect provider,

105
00:05:45,638 --> 00:05:47,539
the endpoints follow a standard.

106
00:05:47,539 --> 00:05:56,000
So that makes them super easy to find. Next, let's look at the differences between OAuth2 and the OpenID Connect flow.

