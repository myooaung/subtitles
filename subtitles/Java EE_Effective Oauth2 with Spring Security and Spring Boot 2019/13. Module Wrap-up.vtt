WEBVTT
1
00:00:02.090 --> 00:00:03.083
In this module,

2
00:00:03.083 --> 00:00:07.538
we introduced the client- credentials grant and some key microservice

3
00:00:07.538 --> 00:00:11.873
security patterns that you could implement with Spring Security when

4
00:00:11.873 --> 00:00:16.103
dealing with different scenarios in distributed systems.

5
00:00:16.103 --> 00:00:20.315
Although JWT is great for storing state between service calls,

6
00:00:20.315 --> 00:00:24.563
which can improve the scalability of your application,

7
00:00:24.563 --> 00:00:28.159
you should still keep the content in them to a bare minimum,

8
00:00:28.159 --> 00:00:34.237
ideally a unique subject identifier and some scopes and roles.

9
00:00:34.237 --> 00:00:37.802
And unless your application really needs that scalability,

10
00:00:37.802 --> 00:00:43.587
sensitive data should be sent securely in the request body or sourced

11
00:00:43.587 --> 00:00:48.992
from the authorization server when required rather than being on the

12
00:00:48.992 --> 00:00:52.155
token as tokens can be passed around,

13
00:00:52.155 --> 00:00:56.150
and anybody who gets a hold of it can simply read it.

14
00:00:56.150 --> 00:01:00.549
If you do, however, need to include sensitive data on the token,

15
00:01:00.549 --> 00:01:03.974
then consider some form of encryption.

16
00:01:03.974 --> 00:01:08.130
Access tokens can be used by the bearer against the userinfo

17
00:01:08.130 --> 00:01:10.862
endpoint to retrieve the user's claims.

18
00:01:10.862 --> 00:01:15.959
Hence, be mindful of this when considering an access token for token relay.

19
00:01:15.959 --> 00:01:18.480
Now in the next module,

20
00:01:18.480 --> 00:01:21.966
we'll look at some vulnerabilities in our application and

21
00:01:21.966 --> 00:01:29.000
some advanced validation and customizations that you can implement to address these.

