1
00:00:01,993 --> 00:00:06,208
Previously, we had an opaque token, now a JSON Web Token.

2
00:00:06,208 --> 00:00:09,327
You're probably thinking the first one is better.

3
00:00:09,327 --> 00:00:10,399
It's smaller.

4
00:00:10,399 --> 00:00:12,007
Hold that thought.

5
00:00:12,007 --> 00:00:13,855
As you can see in its small format,

6
00:00:13,855 --> 00:00:17,539
it's simply a string as the JSON is Base64 URL-encoded.

7
00:00:17,539 --> 00:00:23,892
This is so you can transmit it easier in the header and even in the URL.

8
00:00:23,892 --> 00:00:25,502
Although if the payload is large,

9
00:00:25,502 --> 00:00:28,535
it can exceed the maximum length of a URL or header.

10
00:00:28,535 --> 00:00:33,061
The message is split into three parts separated by a period.

11
00:00:33,061 --> 00:00:37,452
If we decode it, we can see the two JSON maps and the signature.

12
00:00:37,452 --> 00:00:39,333
The first part is the header,

13
00:00:39,333 --> 00:00:44,987
which specifies the algorithm used to sign it with JSON Web Algorithms.

14
00:00:44,987 --> 00:00:49,212
JWA essentially is a registry of standard names and algorithms.

15
00:00:49,212 --> 00:00:52,676
So anyone reading this will know which algorithm the token is

16
00:00:52,676 --> 00:00:56,373
signed with and be able to easily verify it.

17
00:00:56,373 --> 00:00:58,025
Next is the payload.

18
00:00:58,025 --> 00:01:02,710
The JWT specification doesn't mandate what you need to put in here.

19
00:01:02,710 --> 00:01:05,435
It's solely based on your requirements.

20
00:01:05,435 --> 00:01:11,075
Finally, the JSON Web Signature, which uses the algorithm defined in the header.

21
00:01:11,075 --> 00:01:14,040
It's basically the signature of the header and payload.

22
00:01:14,040 --> 00:01:14,883
As mentioned,

23
00:01:14,883 --> 00:01:18,335
the JSON Web Token doesn't mandate what fields you

24
00:01:18,335 --> 00:01:20,341
can and cannot put in the payload.

25
00:01:20,341 --> 00:01:25,058
However, it does have standard optional fields, which you should definitely use.

26
00:01:25,058 --> 00:01:31,518
Now the best way to think of a JWT is a signed cookie.

27
00:01:31,518 --> 00:01:36,907
So with a JWT, a mobile user can authenticate with an identity provider.

28
00:01:36,907 --> 00:01:39,140
The identity provider will gather the user information

29
00:01:39,140 --> 00:01:42,465
and permissions into a JSON map, sign it,

30
00:01:42,465 --> 00:01:45,418
create a JWT, and send it to the client.

31
00:01:45,418 --> 00:01:50,653
So now rather than the state being in the server, it's client-side.

32
00:01:50,653 --> 00:01:54,585
The client then includes it in every request it makes.

33
00:01:54,585 --> 00:01:55,855
That's powerful.

34
00:01:55,855 --> 00:01:56,114
Firstly,

35
00:01:56,114 --> 00:01:59,986
if you have tens of thousands of users signed in on a mobile

36
00:01:59,986 --> 00:02:02,670
app making hundreds of calls per minute,

37
00:02:02,670 --> 00:02:05,379
having your server stateless and not maintaining and

38
00:02:05,379 --> 00:02:08,013
looking up state scales really well.

39
00:02:08,013 --> 00:02:09,912
As you can see,

40
00:02:09,912 --> 00:02:14,976
JWT in itself is a collection of standards from Java Web Algorithms,

41
00:02:14,976 --> 00:02:16,041
Java Web Signatures,

42
00:02:16,041 --> 00:02:20,397
and even Java Web Encryption where you can encrypt the content.

43
00:02:20,397 --> 00:02:23,725
Basically, it's a standard token format.

44
00:02:23,725 --> 00:02:25,771
Hence, we need other standards, like OAuth2,

45
00:02:25,771 --> 00:02:31,491
to define how to use the tokens for delegated access or which

46
00:02:31,491 --> 00:02:34,619
identity fields are required for federated access,

47
00:02:34,619 --> 00:02:43,000
such as OpenID Connect. In the next section, we'll describe how OAuth2 and OpenID Connect achieve this.

