WEBVTT
1
00:00:02.169 --> 00:00:07.243
The purpose of the resource server is to extract the JWT token from the request,

2
00:00:07.243 --> 00:00:10.841
validate it by checking the signature, the expiry,

3
00:00:10.841 --> 00:00:15.060
and optionally if the issuer and audience is correct,

4
00:00:15.060 --> 00:00:19.829
effectively to authorize the request to the protected resource.

5
00:00:19.829 --> 00:00:25.743
Currently, the two REST services are not secured, and anyone can access them.

6
00:00:25.743 --> 00:00:30.713
The main difference between the clients and these services is that the

7
00:00:30.713 --> 00:00:35.288
controllers are RestControllers and not the MvcControllers.

8
00:00:35.288 --> 00:00:37.815
Now this is not uncommon to find.

9
00:00:37.815 --> 00:00:42.085
The client and perhaps an API gateway would be accessible

10
00:00:42.085 --> 00:00:45.033
from outside a firewall and be secured,

11
00:00:45.033 --> 00:00:49.913
while all the services are behind the firewall and not secured.

12
00:00:49.913 --> 00:00:52.640
However, this is asking for trouble.

13
00:00:52.640 --> 00:00:55.299
Anyone behind the firewall can access the services,

14
00:00:55.299 --> 00:00:58.689
a rogue employee or a consultant,

15
00:00:58.689 --> 00:01:02.361
and there have been many high-profile cases in large

16
00:01:02.361 --> 00:01:06.251
organizations where the hacker was someone on the inside.

17
00:01:06.251 --> 00:01:06.728
Also,

18
00:01:06.728 --> 00:01:11.084
I've seen many cases where a configuration error resulted

19
00:01:11.084 --> 00:01:14.957
in a development or testing environment actually

20
00:01:14.957 --> 00:01:17.208
connecting to a production service,

21
00:01:17.208 --> 00:01:21.839
resulting in major production issues and impacting consumers.

22
00:01:21.839 --> 00:01:26.541
Converting the services into secure resource servers is

23
00:01:26.541 --> 00:01:28.245
very straightforward with Spring.

24
00:01:28.245 --> 00:01:32.199
We add the spring-boot-starter-security dependency and the

25
00:01:32.199 --> 00:01:36.058
spring-book-starter- oauth2-resource-server dependency.

26
00:01:36.058 --> 00:01:38.759
Spring Boot will now detect these dependencies and

27
00:01:38.759 --> 00:01:41.730
trigger the appropriate autoconfig class,

28
00:01:41.730 --> 00:01:44.297
securing all endpoints.

29
00:01:44.297 --> 00:01:48.134
The resource server will need a way to validate the token's signature.

30
00:01:48.134 --> 00:01:48.396
Hence,

31
00:01:48.396 --> 00:01:53.965
we even need to send a token to the authorization server for validation or

32
00:01:53.965 --> 00:01:57.886
have access to the public keys to verify the signature.

33
00:01:57.886 --> 00:02:04.620
In our application.yml file, we can add the JW key set URI or the issuer URI,

34
00:02:04.620 --> 00:02:08.724
and we can get these details from our Keycloak discovery document.

35
00:02:08.724 --> 00:02:12.468
Providing the issuer URI will allow for validating the issuer

36
00:02:12.468 --> 00:02:16.009
claimed in the token as an added security check.

37
00:02:16.009 --> 00:02:18.330
It will match the issuer in the discovery document

38
00:02:18.330 --> 00:02:21.624
with the one in the JWT token.

39
00:02:21.624 --> 00:02:22.145
That's it.

40
00:02:22.145 --> 00:02:24.463
If we try to access the microservice now,

41
00:02:24.463 --> 00:02:29.446
you can see the request is blocked as we are not authenticated.

42
00:02:29.446 --> 00:02:30.207
Easy.

43
00:02:30.207 --> 00:02:35.532
If we look at the filter chain,

44
00:02:35.532 --> 00:02:40.281
we can see that Spring has added the bearer token authentication filter,

45
00:02:40.281 --> 00:02:45.178
which, as the name suggests, will look out for the JWT token in the header,

46
00:02:45.178 --> 00:02:48.087
then delegate to the AuthenticationManager who will

47
00:02:48.087 --> 00:02:51.390
use a JwtAuthenticationProvider,

48
00:02:51.390 --> 00:02:55.242
which will decode and validate the token with the

49
00:02:55.242 --> 00:03:00.033
NimbusJwtDecoder and convert the trusted token into an

50
00:03:00.033 --> 00:03:04.942
authentication object using a JwtAuthenticationConverter.

51
00:03:04.942 --> 00:03:05.842
In later modules,

52
00:03:05.842 --> 00:03:10.675
we'll customize the decoder to add more validation to the token and the

53
00:03:10.675 --> 00:03:15.529
converter to custom map claims and scopes to roles.

54
00:03:15.529 --> 00:03:20.585
To recap, our React client will perform the implicit grants with Keycloak,

55
00:03:20.585 --> 00:03:21.641
get an access token,

56
00:03:21.641 --> 00:03:29.000
and then forward it in all subsequent requests to the resource server, which will then validate the token.

