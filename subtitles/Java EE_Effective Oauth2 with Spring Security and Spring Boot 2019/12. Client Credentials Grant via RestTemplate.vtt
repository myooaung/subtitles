WEBVTT
1
00:00:02.125 --> 00:00:03.578
So as we mentioned before,

2
00:00:03.578 --> 00:00:07.516
Spring is moving to replace the RestTemplate with the WebClient.

3
00:00:07.516 --> 00:00:12.856
Unlike in the token relay example where the RestTemplate had to simply add the

4
00:00:12.856 --> 00:00:17.168
access token to the header for the client credentials flow,

5
00:00:17.168 --> 00:00:20.762
the RestTemplate also needs to request the access token from

6
00:00:20.762 --> 00:00:24.225
the authorization server using the client credentials grant

7
00:00:24.225 --> 00:00:26.941
before it can make the request.

8
00:00:26.941 --> 00:00:32.937
Now there is no support for that in Spring 5 as they are focusing on WebClient.

9
00:00:32.937 --> 00:00:36.459
So we have to use an older version of the Spring OAuth2 project,

10
00:00:36.459 --> 00:00:40.178
which has an OAuth2 RestTemplate implementation,

11
00:00:40.178 --> 00:00:42.296
which can handle this for us,

12
00:00:42.296 --> 00:00:44.675
meaning we have to rewrite our portfolio services

13
00:00:44.675 --> 00:00:48.783
security using the legacy OAuth2 project.

14
00:00:48.783 --> 00:00:50.128
In our project dependencies,

15
00:00:50.128 --> 00:00:56.180
we include the spring-boot-starter-security dependency and the following

16
00:00:56.180 --> 00:01:02.794
spring-security-oauth2- autoconfigure dependency to port it into Spring Boot 2.1

17
00:01:02.794 --> 00:01:08.071
.6 as Spring Boot 2 doesn't support it out of the box.

18
00:01:08.071 --> 00:01:11.666
The version should be the same as the Spring Boot project.

19
00:01:11.666 --> 00:01:17.003
Next, we add our keyset URI as this IA resource server,

20
00:01:17.003 --> 00:01:22.266
and it needs a way to validate the token signature.

21
00:01:22.266 --> 00:01:26.289
We need to now create a configuration class and use the

22
00:01:26.289 --> 00:01:30.465
Configuration and EnableResourceServer annotation.

23
00:01:30.465 --> 00:01:35.560
We then return a bean of type ClientCredentialsResourceDetails where we

24
00:01:35.560 --> 00:01:39.500
put in our client details like the ID and secret,

25
00:01:39.500 --> 00:01:44.709
the grant type of client credentials and the access token URI,

26
00:01:44.709 --> 00:01:47.713
basically the endpoint where the RestTemplate can request

27
00:01:47.713 --> 00:01:52.132
the access token using the client-id and secret via the

28
00:01:52.132 --> 00:01:54.641
client credentials grant type.

29
00:01:54.641 --> 00:01:57.034
Then when we create an instance of the RestTemplate,

30
00:01:57.034 --> 00:02:00.931
we actually return an instance of the OAuth2RestTemplate with

31
00:02:00.931 --> 00:02:05.941
the ClientCredentialsResourceDetails object.

32
00:02:05.941 --> 00:02:09.075
We can then wire in the RestTemplate into our pricing service

33
00:02:09.075 --> 00:02:14.096
class and call the pricing microservice.

34
00:02:14.096 --> 00:02:17.512
The OAuth2RestTemplate will take care of the rest.

35
00:02:17.512 --> 00:02:22.492
It will get the access token from the token endpoint we

36
00:02:22.492 --> 00:02:25.781
configured and add it to the request header.

37
00:02:25.781 --> 00:02:26.858
Easy peasy.

38
00:02:26.858 --> 00:02:29.551
One minor change is required.

39
00:02:29.551 --> 00:02:33.176
The legacy version of Spring OAuth will expect a

40
00:02:33.176 --> 00:02:36.507
claim of user_name in the token,

41
00:02:36.507 --> 00:02:41.370
which it will then map to the username in the authenticated principal.

42
00:02:41.370 --> 00:02:52.000
So in Keycloak, we need a mapper that maps the preferred username to user_name. We can use the mapper type User Attribute to achieve that.

