1
00:00:01,795 --> 00:00:07,125
In the client credentials grant, effectively no user is involved.

2
00:00:07,125 --> 00:00:09,382
The resource owner is the requester,

3
00:00:09,382 --> 00:00:13,580
most likely a non-human entity like another service.

4
00:00:13,580 --> 00:00:17,518
This is a great flow for when you have a batch job that needs to start up

5
00:00:17,518 --> 00:00:21,414
and make some requests to some services for reporting,

6
00:00:21,414 --> 00:00:25,455
etc., or in the case of our demo, the pricing service,

7
00:00:25,455 --> 00:00:28,950
which doesn't have any user resources on it.

8
00:00:28,950 --> 00:00:30,999
It's just the price of the crypto.

9
00:00:30,999 --> 00:00:34,840
So passing the access token is a bad idea for reasons

10
00:00:34,840 --> 00:00:37,198
described in the previous section.

11
00:00:37,198 --> 00:00:37,562
Also,

12
00:00:37,562 --> 00:00:41,831
the portfolio service might want to cache the prices and might not make

13
00:00:41,831 --> 00:00:45,856
the call to the pricing service for every request.

14
00:00:45,856 --> 00:00:48,758
It might use a thread that makes the request every 30 seconds,

15
00:00:48,758 --> 00:00:52,794
even though there is no active request taking place.

16
00:00:52,794 --> 00:00:55,088
With the client credentials grant,

17
00:00:55,088 --> 00:00:58,497
the client_id and secret is passed directly to the token

18
00:00:58,497 --> 00:01:01,347
endpoint in exchange for an access token only.

19
00:01:01,347 --> 00:01:05,544
No refresh token as the service can just rerequest a new

20
00:01:05,544 --> 00:01:08,312
token if the existing one expires.

21
00:01:08,312 --> 00:01:11,953
Now let's compare the pros and cons of the token relay versus

22
00:01:11,953 --> 00:01:19,000
client credentials and which part of the application they are suited for and also some alternatives.

