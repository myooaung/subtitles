WEBVTT
1
00:00:02.052 --> 00:00:07.249
Previously when our services were not secure because they were stateless,

2
00:00:07.249 --> 00:00:11.355
the requester had to provide the username in the request

3
00:00:11.355 --> 00:00:15.852
either in the query string or the request body.

4
00:00:15.852 --> 00:00:21.030
That's not ideal as it opens up the application to injection attacks.

5
00:00:21.030 --> 00:00:24.890
Even though our services are now requiring a valid JWT token,

6
00:00:24.890 --> 00:00:29.501
it doesn't stop the holder of that token from accessing anyone's resources.

7
00:00:29.501 --> 00:00:33.713
You want to make sure that the holder of the token can

8
00:00:33.713 --> 00:00:38.207
only access their subject's resources.

9
00:00:38.207 --> 00:00:41.446
If we look at the JWT token created by the authorization server,

10
00:00:41.446 --> 00:00:44.594
it contains the users claim.

11
00:00:44.594 --> 00:00:46.874
Juan is the preferred username.

12
00:00:46.874 --> 00:00:51.167
So let's use this value rather than providing it in the request payload.

13
00:00:51.167 --> 00:00:54.628
In our controller, for the portfolio get method,

14
00:00:54.628 --> 00:01:00.950
we can access the JWT token authentication using the SecurityContextHolder.

15
00:01:00.950 --> 00:01:04.540
Then we get the token and retrieve the claim as a string.

16
00:01:04.540 --> 00:01:10.050
Now we don't have to pass in the username via query string or validate it.

17
00:01:10.050 --> 00:01:15.320
And we are confident that only the portfolio of the resource

18
00:01:15.320 --> 00:01:19.001
owner the token is created for is returned.

19
00:01:19.001 --> 00:01:22.761
We can actually make this cleaner by using the

20
00:01:22.761 --> 00:01:28.695
@AuthenticationPrincipal annotation as a parameter to the method.

21
00:01:28.695 --> 00:01:31.181
Spring will now do the retrieval and casting for us.

22
00:01:31.181 --> 00:01:35.810
Let's do the same for the other methods in the controller.

23
00:01:35.810 --> 00:01:38.126
Let's try it via our React app.

24
00:01:38.126 --> 00:01:41.595
Make sure you have Node running or the Crypto Portfolio React app

25
00:01:41.595 --> 00:01:45.638
running and both the support and portfolio services.

26
00:01:45.638 --> 00:01:49.303
I'm switching to Firefox as I find the developer mode

27
00:01:49.303 --> 00:01:52.520
shows the headers better than Chrome.

28
00:01:52.520 --> 00:01:55.409
I'm redirected to Keycloak.

29
00:01:55.409 --> 00:01:55.982
Hmm.

30
00:01:55.982 --> 00:02:02.045
Looks like there's an error, Cross-Origin Request Blocked.

31
00:02:02.045 --> 00:02:07.976
If I go to the Network tab, I can see a call via an option HTTP method,

32
00:02:07.976 --> 00:02:10.060
which returned a 401.

33
00:02:10.060 --> 00:02:13.101
Basically, Spring blocked this request.

34
00:02:13.101 --> 00:02:13.400
However,

35
00:02:13.400 --> 00:02:18.942
if I try the same request via Postman with the access token from the client app,

36
00:02:18.942 --> 00:02:22.312
it works and returns the data.

37
00:02:22.312 --> 00:02:30.000
This is because the request originated from JavaScript and was cross-origin. We will look at this next.

