WEBVTT
1
00:00:02.396 --> 00:00:04.395
If you've been using Spring Security before,

2
00:00:04.395 --> 00:00:08.687
you'll probably be familiar with the following approach: a login

3
00:00:08.687 --> 00:00:11.852
page prompting the user for their credentials,

4
00:00:11.852 --> 00:00:14.586
by default the username and password.

5
00:00:14.586 --> 00:00:17.115
This is then transmitted to the server in the body

6
00:00:17.115 --> 00:00:24.258
of the request or in the header, like basic authentication over HTTPS hopefully.

7
00:00:24.258 --> 00:00:24.704
Server-side,

8
00:00:24.704 --> 00:00:28.727
the password hash is retrieved from the database and matched against the

9
00:00:28.727 --> 00:00:33.044
hash of the password in the authentication request.

10
00:00:33.044 --> 00:00:36.727
If successful, a session is created with the authenticated user,

11
00:00:36.727 --> 00:00:41.144
and the cookie with the session ID is returned to the client.

12
00:00:41.144 --> 00:00:44.771
All subsequent requests to the server include the session

13
00:00:44.771 --> 00:00:47.414
ID to avoid having to re-authenticate.

14
00:00:47.414 --> 00:00:50.612
Now this is very easy to set up with Spring.

15
00:00:50.612 --> 00:00:54.603
However, this approach has the following challenges.

16
00:00:54.603 --> 00:00:56.423
The user's credentials are handled by the

17
00:00:56.423 --> 00:01:00.034
application and transmitted in plain text,

18
00:01:00.034 --> 00:01:04.734
hence an increase risk of being leaked by some malicious code.

19
00:01:04.734 --> 00:01:05.298
Also,

20
00:01:05.298 --> 00:01:09.328
storing credentials alongside application data exposes them to any

21
00:01:09.328 --> 00:01:14.316
injection vulnerabilities introduced by the development team.

22
00:01:14.316 --> 00:01:17.680
It also doesn't scale very well as the number of applications and services

23
00:01:17.680 --> 00:01:23.551
in your organization grows as each application will need its own often

24
00:01:23.551 --> 00:01:27.096
duplicated authentication and identity management.

25
00:01:27.096 --> 00:01:31.340
Often using different technology stacks requiring maintenance on all

26
00:01:31.340 --> 00:01:36.067
the login registration pages and keeping up to date with security best

27
00:01:36.067 --> 00:01:38.407
practices and updates becomes difficult.

28
00:01:38.407 --> 00:01:43.057
Users also need to maintain multiple sets of credentials.

29
00:01:43.057 --> 00:01:45.281
And since they tend to reuse the same passwords,

30
00:01:45.281 --> 00:01:50.587
your organization security becomes as strong as the weakest link.

31
00:01:50.587 --> 00:01:51.780
In essence,

32
00:01:51.780 --> 00:01:55.385
some sort of single sign-on is required where a user authenticates

33
00:01:55.385 --> 00:01:59.480
once with an identity provider and then gets the keys to access all

34
00:01:59.480 --> 00:02:04.585
the applications they are authorized for and not just within your

35
00:02:04.585 --> 00:02:06.039
organization's boundaries.

36
00:02:06.039 --> 00:02:10.499
If a potential user already has an account with a third party like Google,

37
00:02:10.499 --> 00:02:14.276
how can Google and your application trust each other to allow an

38
00:02:14.276 --> 00:02:17.390
authenticated user with Google to authenticate and share the

39
00:02:17.390 --> 00:02:21.687
identity in Google with your application?

40
00:02:21.687 --> 00:02:26.130
This is very common now, sign in with Google or Facebook, etc.

41
00:02:26.130 --> 00:02:30.117
The user can then agree to share their identity details,

42
00:02:30.117 --> 00:02:33.844
which can then be used by your application to register them

43
00:02:33.844 --> 00:02:37.553
automatically without having to fill out any time-consuming registration

44
00:02:37.553 --> 00:02:42.828
forms or simply authenticate and allow them to access your application

45
00:02:42.828 --> 00:02:45.936
without handling or storing their passwords.

46
00:02:45.936 --> 00:02:51.286
OAuth2, OpenID Connect with JWT are standards that can help solve this.

47
00:02:51.286 --> 00:02:56.544
Additionally, most applications start out as monoliths with a UI,

48
00:02:56.544 --> 00:02:58.980
service, and data access layer.

49
00:02:58.980 --> 00:03:02.292
These are straightforward to implement and secure.

50
00:03:02.292 --> 00:03:06.257
You only need to protect a UI or API entry point.

51
00:03:06.257 --> 00:03:08.514
However, they don't scale well.

52
00:03:08.514 --> 00:03:11.285
There is a limit at how much hardware you can throw

53
00:03:11.285 --> 00:03:13.444
at them to meet increased demand.

54
00:03:13.444 --> 00:03:13.713
Eventually,

55
00:03:13.713 --> 00:03:18.837
you will need to break them up into microservices and scale horizontally.

56
00:03:18.837 --> 00:03:23.887
Now from a security standpoint, you will now have more endpoints to secure.

57
00:03:23.887 --> 00:03:27.596
A request from a user might require multiple hops to complete.

58
00:03:27.596 --> 00:03:30.396
How can you authenticate a request between hops without

59
00:03:30.396 --> 00:03:33.104
sharing the password and without a session?

60
00:03:33.104 --> 00:03:36.563
How can you maintain the identity state of a user

61
00:03:36.563 --> 00:03:39.607
between stateless autonomous services?

62
00:03:39.607 --> 00:03:43.707
And how can you do it without impacting the performance of the application?

63
00:03:43.707 --> 00:03:48.110
In a monolith, latency is low due to interprocess communication.

64
00:03:48.110 --> 00:03:52.780
In a distributed system, there is now the additional cost of the network hop.

65
00:03:52.780 --> 00:04:04.000
Hence, how can you minimize any additional latency of any security checks? Next, we will look at ways how tokens can help address some of these issues.

