WEBVTT
1
00:00:02.112 --> 00:00:05.701
Just by adding the OAuth2 dependencies, the client-secret ID,

2
00:00:05.701 --> 00:00:09.049
everything was set up for us by Spring Boot.

3
00:00:09.049 --> 00:00:12.756
Now Spring Boot takes an opinionated view of what you want to

4
00:00:12.756 --> 00:00:16.334
configure based on certain environmental factors like what you

5
00:00:16.334 --> 00:00:20.167
added to the class path or what you had configured in your

6
00:00:20.167 --> 00:00:22.819
application context amongst other things.

7
00:00:22.819 --> 00:00:26.923
Spring Boot does this via these autoconfiguration classes.

8
00:00:26.923 --> 00:00:29.837
In the Spring Boot autoconfigure package,

9
00:00:29.837 --> 00:00:32.506
the Spring factory is located in the META- INF folder.

10
00:00:32.506 --> 00:00:37.632
You can see all the autoconfig classes that are bootstrapped.

11
00:00:37.632 --> 00:00:42.919
There are a number of Spring Security and OAuth2 autoconfiguration classes.

12
00:00:42.919 --> 00:00:46.771
The SecurityAutoConfiguration plugged in the delegating filter

13
00:00:46.771 --> 00:00:50.763
proxy into the embedded Tomcat web server.

14
00:00:50.763 --> 00:00:55.174
OAuth2ClientAutoconfiguration is what set up our

15
00:00:55.174 --> 00:00:57.631
application as an OAuth2 client.

16
00:00:57.631 --> 00:00:59.333
Firstly, it defines the order,

17
00:00:59.333 --> 00:01:05.246
stating it needs to be configured before the SecurityAutoConfiguration class.

18
00:01:05.246 --> 00:01:09.656
ConditionalOnClass states that the following classes need to be in

19
00:01:09.656 --> 00:01:13.712
application class path to activate this configuration.

20
00:01:13.712 --> 00:01:16.155
The final one checks if it is a web app.

21
00:01:16.155 --> 00:01:16.471
Basically,

22
00:01:16.471 --> 00:01:20.458
because our application is a web app and the ClientRegistration class

23
00:01:20.458 --> 00:01:24.850
is in the OAuth2 client dependency we just added,

24
00:01:24.850 --> 00:01:27.379
Spring Boot triggered this autoconfiguration as it

25
00:01:27.379 --> 00:01:29.443
assumed that's what we wanted.

26
00:01:29.443 --> 00:01:31.489
If this, however, wasn't the intention,

27
00:01:31.489 --> 00:01:36.066
we can let Spring Boot know not to configure this autoconfiguration by adding

28
00:01:36.066 --> 00:01:40.409
the exclude to your Spring Boot application annotation.

29
00:01:40.409 --> 00:01:42.754
Now back to the config class.

30
00:01:42.754 --> 00:01:48.622
Once the conditions are satisfied, two config classes are imported.

31
00:01:48.622 --> 00:01:50.612
These do the actual work.

32
00:01:50.612 --> 00:01:55.534
OAuth2ClientRegistrationRespository Configuration activated when we

33
00:01:55.534 --> 00:01:58.675
registered our clients in the properties files.

34
00:01:58.675 --> 00:02:02.227
It sets up the ClientRegistrationRepository,

35
00:02:02.227 --> 00:02:05.949
which manages access to all the client registrations.

36
00:02:05.949 --> 00:02:09.990
A client registration contains all the metadata about a client registered

37
00:02:09.990 --> 00:02:15.278
with a provider such as their registration and clientId,

38
00:02:15.278 --> 00:02:20.448
the clientSecret, the scopes it will send to the authorization endpoint,

39
00:02:20.448 --> 00:02:23.092
the authorization grant this client will perform,

40
00:02:23.092 --> 00:02:27.371
ProviderDetails like the authorization endpoint URI,

41
00:02:27.371 --> 00:02:30.832
userinfo endpoint, token URI amongst other things,

42
00:02:30.832 --> 00:02:34.228
everything needed to initiate the OAuth2 or OpenID

43
00:02:34.228 --> 00:02:38.114
Connect flow and to authorize the client.

44
00:02:38.114 --> 00:02:38.997
If you recall,

45
00:02:38.997 --> 00:02:42.690
we only have to provide the client-id and secret to

46
00:02:42.690 --> 00:02:45.883
configure sign-in with Google and Facebook.

47
00:02:45.883 --> 00:02:48.013
How about the other data?

48
00:02:48.013 --> 00:02:52.814
Well that's retrieved from Spring Boot's CommonOAuth2Provider enum.

49
00:02:52.814 --> 00:02:55.268
You can see the details for Google, Facebook,

50
00:02:55.268 --> 00:03:01.113
Okta, and GitHub, all the default config needed like the scopes.

51
00:03:01.113 --> 00:03:05.121
For Google, we have OpenID as its OpenID Connect provider.

52
00:03:05.121 --> 00:03:09.491
For Facebook, since it's not an OpenID Connect provider,

53
00:03:09.491 --> 00:03:13.389
we have the Facebook Connect scopes and all the nuance

54
00:03:13.389 --> 00:03:15.262
configuration for each provider,

55
00:03:15.262 --> 00:03:20.084
like the authorizationUri where the client can request the access code,

56
00:03:20.084 --> 00:03:25.605
the tokenUri where the client can exchange the access code for the access token,

57
00:03:25.605 --> 00:03:28.012
and optionally a refresh token,

58
00:03:28.012 --> 00:03:33.225
the JW keyset URI where our clients can get the public keys from

59
00:03:33.225 --> 00:03:36.775
providers to verify the signature of the tokens,

60
00:03:36.775 --> 00:03:40.655
userinfo endpoint where the client can use the access token

61
00:03:40.655 --> 00:03:44.683
to get more information about the user.

62
00:03:44.683 --> 00:03:48.284
UserNameAttributeName indicates which claim returned uniquely

63
00:03:48.284 --> 00:03:51.581
identify the principal and can be used for the username.

64
00:03:51.581 --> 00:03:55.547
Now you can see the benefits of using OpenID Connect.

65
00:03:55.547 --> 00:04:00.271
For the OpenID Connect providers, the userinfo endpoint is always the same,

66
00:04:00.271 --> 00:04:04.775
/userinfo, and the username claim is always the subject.

67
00:04:04.775 --> 00:04:10.296
Whereas for each of the OpenID Connect providers, it could vary.

68
00:04:10.296 --> 00:04:13.208
You would need to check the provider specification.

69
00:04:13.208 --> 00:04:18.498
Now for Facebook and Git, Spring have done this for us, and it's the id claim.

70
00:04:18.498 --> 00:04:22.409
Now you can override any of these attributes in your properties files.

71
00:04:22.409 --> 00:04:24.858
If we change the scope for Google,

72
00:04:24.858 --> 00:04:28.462
you can now see our authorization redirect only

73
00:04:28.462 --> 00:04:31.107
includes the OpenID Connect scope.

74
00:04:31.107 --> 00:04:33.223
You can change the client-name,

75
00:04:33.223 --> 00:04:37.600
which will change the display name of the provider in the default login page.

76
00:04:37.600 --> 00:04:42.494
And you can change the registration ID by adding the property provider.

77
00:04:42.494 --> 00:04:46.577
The OAuth2ClientRegistrationRepository Configuration class,

78
00:04:46.577 --> 00:04:47.746
by default,

79
00:04:47.746 --> 00:04:50.815
creates an in-memory client registration repository and

80
00:04:50.815 --> 00:04:54.348
adds the client registrations to it.

81
00:04:54.348 --> 00:04:58.047
A client registration repository is just that.

82
00:04:58.047 --> 00:05:00.952
It's a repository for client registrations.

83
00:05:00.952 --> 00:05:06.779
It has one method, findyByRegistrationId, which returns a ClientRegistration.

84
00:05:06.779 --> 00:05:07.985
Now in your application,

85
00:05:07.985 --> 00:05:11.330
you might want to store the ClientRegistration metadata

86
00:05:11.330 --> 00:05:14.397
somewhere else like in a database perhaps.

87
00:05:14.397 --> 00:05:14.631
Hence,

88
00:05:14.631 --> 00:05:17.906
you can provide your own implementation of the client registration

89
00:05:17.906 --> 00:05:22.009
repository and add it to the application context.

90
00:05:22.009 --> 00:05:26.555
And as you can see, because of the ConditionalOnMissingBean annotation,

91
00:05:26.555 --> 00:05:28.760
Spring Boot would then back off.

92
00:05:28.760 --> 00:05:31.316
Now if we didn't provide these properties,

93
00:05:31.316 --> 00:05:33.892
we would have to programmatically expose the

94
00:05:33.892 --> 00:05:36.834
ClientRegistrationRepository as a bean.

95
00:05:36.834 --> 00:05:43.014
The other configuration class, OAuth2WebSecurityDuration, completes the setup.

96
00:05:43.014 --> 00:05:47.659
First, it configures an OAuth2AuthorizedClientService.

97
00:05:47.659 --> 00:05:51.053
Now on the successful completion of an OAuth2 authorization grant,

98
00:05:51.053 --> 00:05:54.937
the client is now authorized to make the call to the protected

99
00:05:54.937 --> 00:05:58.026
resource on behalf of the resource owner.

100
00:05:58.026 --> 00:06:00.836
Essentially it's an authorized client.

101
00:06:00.836 --> 00:06:03.953
Spring provides an OAuth2AuthorizedClient class,

102
00:06:03.953 --> 00:06:09.087
which is an association class of all the entities required

103
00:06:09.087 --> 00:06:11.524
to make the protected resource call.

104
00:06:11.524 --> 00:06:14.564
It has the access token, optionally the refresh token,

105
00:06:14.564 --> 00:06:18.165
which you can then use to get a new access token.

106
00:06:18.165 --> 00:06:23.053
There is a principle name, which is the unique identifier of the resource owner,

107
00:06:23.053 --> 00:06:27.893
the client registration, which has the provider's details like the token URI,

108
00:06:27.893 --> 00:06:30.222
the userinfo URI,

109
00:06:30.222 --> 00:06:34.602
etc., everything you would need to perform the protected resource call.

110
00:06:34.602 --> 00:06:41.099
Now the OAuth2AuthorizedClientService manages the OAuth2AuthorizedClients.

111
00:06:41.099 --> 00:06:44.912
It is a method to store, retrieve, and remove them.

112
00:06:44.912 --> 00:06:50.761
By default, Spring Boot configures an InMemoryOAuth2AuthorizedClientService.

113
00:06:50.761 --> 00:06:55.731
It also configures an OAuth2AuthorizedClientRepository.

114
00:06:55.731 --> 00:07:00.220
By default, it uses the session to store the authorized clients.

115
00:07:00.220 --> 00:07:04.948
Hence, once the user's session expires, you will lose the tokens.

116
00:07:04.948 --> 00:07:08.013
Now this could be an issue if you're using long-lived tokens,

117
00:07:08.013 --> 00:07:11.876
although best practice is to always keep the tokens

118
00:07:11.876 --> 00:07:14.873
short-lived to limit the impact if they get leaked.

119
00:07:14.873 --> 00:07:15.217
However,

120
00:07:15.217 --> 00:07:18.788
if you're using refresh tokens to keep the user logged

121
00:07:18.788 --> 00:07:21.057
in even after the session expires,

122
00:07:21.057 --> 00:07:25.659
then you could implement your own OAuth2AuthorizedClientRepository

123
00:07:25.659 --> 00:07:29.416
and store the refresh tokens in a different store.

124
00:07:29.416 --> 00:07:32.161
All you would need to do is create an implementation of the

125
00:07:32.161 --> 00:07:37.966
OAuth2AuthorizedClientRepository and register it as a bean with Spring.

126
00:07:37.966 --> 00:07:40.903
Spring Boot would then back off and plug your repository

127
00:07:40.903 --> 00:07:45.118
into the OAuth2AuthorizedClientService.

128
00:07:45.118 --> 00:07:46.368
And finally,

129
00:07:46.368 --> 00:07:50.286
the OAuth2WebSecurityConfiguration also configures the

130
00:07:50.286 --> 00:07:55.486
WebSecurityConfigurationAdapter and enables OAuth.

131
00:07:55.486 --> 00:08:05.000
In this case, we already have an existing adapter, so the ConditionalOnMissingBean would not trigger this default implementation.

