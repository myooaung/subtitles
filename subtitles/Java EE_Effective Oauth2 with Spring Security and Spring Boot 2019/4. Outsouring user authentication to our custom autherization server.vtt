WEBVTT
1
00:00:02.052 --> 00:00:06.387
To register our authorization server with our client web app,

2
00:00:06.387 --> 00:00:13.280
in the application.yml file under security.oauth2 .client .registration,

3
00:00:13.280 --> 00:00:15.949
we use the provider property.

4
00:00:15.949 --> 00:00:17.293
We can give it a name,

5
00:00:17.293 --> 00:00:21.501
then provide the endpoint details of the authorization server,

6
00:00:21.501 --> 00:00:26.549
the authorization-uri where the client can redirect the user's browser

7
00:00:26.549 --> 00:00:30.521
to begin the OAuth2 flow and get the access token,

8
00:00:30.521 --> 00:00:37.423
the token-uri where the client can exchange the code for the access token,

9
00:00:37.423 --> 00:00:45.057
userinfo-uri where the client can use the access token to get the user's claims,

10
00:00:45.057 --> 00:00:45.771
user-name-attribute,

11
00:00:45.771 --> 00:00:53.993
what claim returned by the userinfo can be used to uniquely identify the user,

12
00:00:53.993 --> 00:00:56.044
like a username.

13
00:00:56.044 --> 00:01:00.312
Notice all the provider URLs contain the context path we

14
00:01:00.312 --> 00:01:04.428
configured in the auth server properties file.

15
00:01:04.428 --> 00:01:06.515
Now that the provider is configured,

16
00:01:06.515 --> 00:01:10.152
we need to provide the client metadata under security,

17
00:01:10.152 --> 00:01:11.771
oauth2, client.

18
00:01:11.771 --> 00:01:14.671
We give it a registration ID of crypto- portfolio,

19
00:01:14.671 --> 00:01:19.540
then the details we configured when registering it with the

20
00:01:19.540 --> 00:01:23.052
authorization server like the client-id,

21
00:01:23.052 --> 00:01:26.905
secret, client-name, a more descriptive name,

22
00:01:26.905 --> 00:01:30.815
which will appear in the default OAuth2 login page,

23
00:01:30.815 --> 00:01:35.501
scope, redirect-uri, grant-type, authentication-method,

24
00:01:35.501 --> 00:01:36.694
in this case basic.

25
00:01:36.694 --> 00:01:41.695
This is how the client will send the client-id and secret to the token endpoint

26
00:01:41.695 --> 00:01:46.253
when exchanging the authorization code for the access token.

27
00:01:46.253 --> 00:01:49.746
Now Spring also supports form authentication where the

28
00:01:49.746 --> 00:01:53.022
credentials are sent in the request body.

29
00:01:53.022 --> 00:01:55.967
And finally, the provider.

30
00:01:55.967 --> 00:02:02.357
We can now update our login.html page to add a link to login with

31
00:02:02.357 --> 00:02:06.283
crypto-portfolio and remove the previous login form as our application

32
00:02:06.283 --> 00:02:09.917
is no longer going to handle user credentials.

33
00:02:09.917 --> 00:02:10.520
Next,

34
00:02:10.520 --> 00:02:19.000
we'll take a peek under the covers to see all the moving parts and what made all this happen.

