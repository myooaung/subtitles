1
00:00:00,000 --> 00:00:05,568
If we inspect the current architecture of our web MVC

2
00:00:05,568 --> 00:00:08,311
version of the Crypto Portfolio application,

3
00:00:08,311 --> 00:00:11,768
it's effectively one big monolith,

4
00:00:11,768 --> 00:00:16,220
while our React client interacts with two microservices.

5
00:00:16,220 --> 00:00:20,379
In this module, let's fix and modernize the architecture.

6
00:00:20,379 --> 00:00:24,564
We'll break up the MVC monolith to also use the microservices and

7
00:00:24,564 --> 00:00:28,594
add another hop by adding a pricing service,

8
00:00:28,594 --> 00:00:33,447
which the portfolio service will use to source current crypto prices.

9
00:00:33,447 --> 00:00:35,722
This is common in many systems.

10
00:00:35,722 --> 00:00:37,955
You might have a mixture of clients,

11
00:00:37,955 --> 00:00:40,979
public like mobile and single-page applications that are running

12
00:00:40,979 --> 00:00:44,999
on the user's browser or on their machine.

13
00:00:44,999 --> 00:00:47,742
And we see applications server-side.

14
00:00:47,742 --> 00:00:53,188
So to prevent duplication of code, they will often interact with microservices.

15
00:00:53,188 --> 00:00:55,970
However, currently it is a bit messy.

16
00:00:55,970 --> 00:00:58,487
The clients have to be aware of where all the services are,

17
00:00:58,487 --> 00:01:01,314
and that can be tricky for public clients,

18
00:01:01,314 --> 00:01:05,018
like mobile apps, in case you need to change the location.

19
00:01:05,018 --> 00:01:05,617
Also,

20
00:01:05,617 --> 00:01:09,623
configuring cross-domain resource sharing in each service for

21
00:01:09,623 --> 00:01:13,478
single-page applications is also not ideal.

22
00:01:13,478 --> 00:01:16,178
Additionally, the clients might be lightweight,

23
00:01:16,178 --> 00:01:17,005
like mobile,

24
00:01:17,005 --> 00:01:21,200
and don't need the same large payloads returned back from the services.

25
00:01:21,200 --> 00:01:25,788
There might also be customizations required between each different client.

26
00:01:25,788 --> 00:01:26,156
Hence,

27
00:01:26,156 --> 00:01:31,975
you might have some sort of API gateway to route requests or use a

28
00:01:31,975 --> 00:01:34,736
backend for frontend pattern for public clients,

29
00:01:34,736 --> 00:01:39,417
effectively a service that sits between the client and the other services

30
00:01:39,417 --> 00:01:43,320
and routes and consolidates the requests for the client.

31
00:01:43,320 --> 00:01:43,629
Generally,

32
00:01:43,629 --> 00:01:48,700
that service is owned and maintained by the frontend development teams.

33
00:01:48,700 --> 00:01:49,889
From a security perspective,

34
00:01:49,889 --> 00:01:53,988
you now have more endpoints to secure and more hops to cater for.

35
00:01:53,988 --> 00:01:59,995
Effectively, a lot of the hops are now service-to-service with no user involved.

36
00:01:59,995 --> 00:02:09,000
Some are on behalf of the user and others are not. Next, let's look at security solutions for these challenges.

