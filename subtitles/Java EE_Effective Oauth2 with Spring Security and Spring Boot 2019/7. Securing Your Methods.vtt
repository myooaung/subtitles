WEBVTT
1
00:00:01.980 --> 00:00:07.279
Let's fix the security vulnerabilities in our support service.

2
00:00:07.279 --> 00:00:09.884
In the admin controller of the support service,

3
00:00:09.884 --> 00:00:17.197
we want only users with the admin role to access these features and

4
00:00:17.197 --> 00:00:21.588
clients with the scope portfolio-service-admin.

5
00:00:21.588 --> 00:00:25.965
We could do that by using the mvcMatcher in our

6
00:00:25.965 --> 00:00:31.247
WebSecurityConfigurationAdapter to apply this at the URL level.

7
00:00:31.247 --> 00:00:37.864
But we can also do the same in our admin controller by simply enabling method

8
00:00:37.864 --> 00:00:43.472
authorization using the EnableGlobalMethodSecurity annotation.

9
00:00:43.472 --> 00:00:47.688
We can use the preauthorize annotation on any of the REST

10
00:00:47.688 --> 00:00:52.029
methods to check for the role admin and scope.

11
00:00:52.029 --> 00:00:55.485
For scopes, we use the hasAuthority.

12
00:00:55.485 --> 00:00:59.355
For the admin role, we can use the hasRole ADMIN.

13
00:00:59.355 --> 00:01:02.524
For scopes, we can use the hasAuthority.

14
00:01:02.524 --> 00:01:09.733
And to combine them into one, we could use the hasAnyAuthority annotation.

15
00:01:09.733 --> 00:01:11.027
For the admin role,

16
00:01:11.027 --> 00:01:16.149
we need to include the ROLE_ prefix as that is how it is

17
00:01:16.149 --> 00:01:18.856
stored in the granted authorities.

18
00:01:18.856 --> 00:01:24.034
The hasRole method did the prefixing for us.

19
00:01:24.034 --> 00:01:28.927
For the scope, we use the SCOPE_ prefix.

20
00:01:28.927 --> 00:01:33.012
In our support query controller for the getQueries method,

21
00:01:33.012 --> 00:01:38.722
we can use the preauthorize to allow clients to perform actions

22
00:01:38.722 --> 00:01:43.964
on behalf of administrators who have consented to the admin scope

23
00:01:43.964 --> 00:01:51.809
to view anyone's support queries, while non-admin users can only view their own.

24
00:01:51.809 --> 00:01:55.738
We allow access if the principal has a role and scope of

25
00:01:55.738 --> 00:01:59.100
admin or if they have a role of USER,

26
00:01:59.100 --> 00:02:02.639
and the username path variable matches the preferred

27
00:02:02.639 --> 00:02:06.822
username in the JWT token claims.

28
00:02:06.822 --> 00:02:12.176
Basically, administrators can view all queries and respond to them.

29
00:02:12.176 --> 00:02:17.969
Users can only view their own and respond to those.

30
00:02:17.969 --> 00:02:24.700
If the admin is using the React UI, it will not include the admin scope,

31
00:02:24.700 --> 00:02:28.223
and hence they won't be able to view all the queries

32
00:02:28.223 --> 00:02:30.604
and perform administration tasks.

33
00:02:30.604 --> 00:02:34.743
There is also a PostAuthorize annotation where you can perform

34
00:02:34.743 --> 00:02:38.504
security checks prior to the method being returned so you can

35
00:02:38.504 --> 00:02:41.956
interrogate the objects being returned, modify them,

36
00:02:41.956 --> 00:02:44.059
remove things from collections, etc.

37
00:02:44.059 --> 00:02:48.825
You can see how powerful Spring expressions are.

38
00:02:48.825 --> 00:02:48.996
Next,

39
00:02:48.996 --> 00:02:55.000
we will look at how you can learn more about Spring expressions and authorization.

