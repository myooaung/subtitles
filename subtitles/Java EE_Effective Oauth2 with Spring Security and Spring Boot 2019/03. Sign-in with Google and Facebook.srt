1
00:00:02,499 --> 00:00:06,587
Because we are using Spring Boot in conjunction with Spring Security,

2
00:00:06,587 --> 00:00:09,245
configuration is straightforward.

3
00:00:09,245 --> 00:00:12,381
We add the spring-boot-starter dependency and,

4
00:00:12,381 --> 00:00:19,231
as our application is the client, the spring-security-oauth2-client dependency.

5
00:00:19,231 --> 00:00:22,790
Next, in the application's configuration file,

6
00:00:22,790 --> 00:00:26,590
application.yml, security, oauth2, client,

7
00:00:26,590 --> 00:00:30,008
registration, facebook as the application ID,

8
00:00:30,008 --> 00:00:33,883
and we add the client-id and secret.

9
00:00:33,883 --> 00:00:35,738
One final step.

10
00:00:35,738 --> 00:00:38,731
In the SecurityConfiguration class that extends the

11
00:00:38,731 --> 00:00:45,422
WebSecurityConfigurationAdapter, we need to add the OAuth2 builder method.

12
00:00:45,422 --> 00:00:47,231
For our demo application,

13
00:00:47,231 --> 00:00:51,779
this class already exists as we are using Spring Security in

14
00:00:51,779 --> 00:00:54,357
the application already with form login.

15
00:00:54,357 --> 00:01:00,725
Now if we refresh the page, we get a bland default page with a Facebook link,

16
00:01:00,725 --> 00:01:06,291
which we can select to initiate the OAuth2 flow with Facebook.

17
00:01:06,291 --> 00:01:06,689
Easy.

18
00:01:06,689 --> 00:01:11,544
Now to add Google, we need to add one other dependency,

19
00:01:11,544 --> 00:01:14,413
spring-security-oauth2-jose.

20
00:01:14,413 --> 00:01:18,043
This is for JWT support as Google uses OpenID Connect.

21
00:01:18,043 --> 00:01:21,373
So the ID token will be a JWT.

22
00:01:21,373 --> 00:01:26,006
For signing and encryption, JWT uses a collection of specifications.

23
00:01:26,006 --> 00:01:29,431
JSON Web Algorithms defines the list of algorithms for

24
00:01:29,431 --> 00:01:31,511
digitally signing or encryption.

25
00:01:31,511 --> 00:01:37,543
JSON Web Key defines how a cryptographic key or sets of keys are represented.

26
00:01:37,543 --> 00:01:42,561
Now this collection is known as JavaScript, object signing, and encryption.

27
00:01:42,561 --> 00:01:45,966
Now for some reason it's pronounced as jose rather than jose.

28
00:01:45,966 --> 00:01:49,912
Spring will use this library to verify the JWTs.

29
00:01:49,912 --> 00:01:54,451
Now the reason for these standards is that it makes life a lot simpler.

30
00:01:54,451 --> 00:01:58,713
If you are using a particular algorithm to sign your token and you

31
00:01:58,713 --> 00:02:03,410
describe it with the JSON Web Algorithms specification,

32
00:02:03,410 --> 00:02:07,665
then anybody reading that will know exactly what algorithm that is.

33
00:02:07,665 --> 00:02:13,013
Then if you specify the signature in the JSON Web Signature format,

34
00:02:13,013 --> 00:02:17,672
anyone can then read and verify that token or if you're

35
00:02:17,672 --> 00:02:21,250
encrypting if you used JSON Web Algorithms.

36
00:02:21,250 --> 00:02:24,573
And then if you provided the public keys that you used

37
00:02:24,573 --> 00:02:26,964
to sign in the JSON Web Key format,

38
00:02:26,964 --> 00:02:30,426
anybody can then verify your JWT automatically.

39
00:02:30,426 --> 00:02:33,405
So there basically is a group of standards that can

40
00:02:33,405 --> 00:02:36,727
allow anybody to verify your JWTs.

41
00:02:36,727 --> 00:02:40,434
Next, we add the client-id and secret for Google.

42
00:02:40,434 --> 00:02:41,756
That's it.

43
00:02:41,756 --> 00:02:43,079
Easy peasy.

44
00:02:43,079 --> 00:02:45,271
We can now login with Google.

45
00:02:45,271 --> 00:02:45,967
By default,

46
00:02:45,967 --> 00:02:50,632
Spring Boot allows us to also configure Okta GitHub in a similar

47
00:02:50,632 --> 00:02:54,593
way by just configuring the client-id and secret.

48
00:02:54,593 --> 00:02:55,513
Pretty neat, right?

49
00:02:55,513 --> 00:02:59,016
All that by adding just a bit of config.

50
00:02:59,016 --> 00:03:02,961
If you're like me, you're probably wondering what's going on under the covers?

51
00:03:02,961 --> 00:03:04,834
How is this configured?

52
00:03:04,834 --> 00:03:06,788
What decisions were made?

53
00:03:06,788 --> 00:03:10,257
You will learn this in the remainder of this module as it's important to

54
00:03:10,257 --> 00:03:13,747
know as no two security requirements are the same,

55
00:03:13,747 --> 00:03:17,081
and you'll probably need to configure and customize the framework.

56
00:03:17,081 --> 00:03:18,576
In our demo application,

57
00:03:18,576 --> 00:03:22,748
Spring no longer defaults to our original form login page.

58
00:03:22,748 --> 00:03:26,723
We will want to change this back to our original login page and

59
00:03:26,723 --> 00:03:30,377
add Facebook and Google sign-in links to it.

60
00:03:30,377 --> 00:03:35,835
Also, we have a bit of a hybrid implementation with form and OAuth2 login.

61
00:03:35,835 --> 00:03:38,862
We need a way to automatically register OAuth2 users,

62
00:03:38,862 --> 00:03:43,981
record their username and email, and set up and maintain their portfolio state.

63
00:03:43,981 --> 00:03:51,000
Let's do this next. But first, let's see what Spring Boot did under the covers.

