WEBVTT
1
00:00:01.947 --> 00:00:03.264
In an OAuth2 client,

2
00:00:03.264 --> 00:00:07.498
you might need to customize the authorization request that

3
00:00:07.498 --> 00:00:10.686
gets sent to the authorization server.

4
00:00:10.686 --> 00:00:15.297
You might need to add additional request parameters for the authorization

5
00:00:15.297 --> 00:00:21.154
code flow as providers might not always implement things correctly as per

6
00:00:21.154 --> 00:00:25.140
the specification or require custom parameters,

7
00:00:25.140 --> 00:00:27.745
which the standard does allow.

8
00:00:27.745 --> 00:00:34.575
Now by default, Spring uses the default OAuth2AuthorizationRequestResolver.

9
00:00:34.575 --> 00:00:37.353
If you recall, when you select the login,

10
00:00:37.353 --> 00:00:41.421
the request is for the OAuth2 authorization endpoint.

11
00:00:41.421 --> 00:00:46.143
Now the default OAuth2AuthorizationRequestResolver intercepts this,

12
00:00:46.143 --> 00:00:50.421
looks up the client via the registration ID in the

13
00:00:50.421 --> 00:00:56.187
client registration repository, and creates a redirect authorization request,

14
00:00:56.187 --> 00:01:01.513
which is sent via the user's browser to the authorization server.

15
00:01:01.513 --> 00:01:04.248
Now you might need to modify this,

16
00:01:04.248 --> 00:01:07.324
and Spring allows you to provide your own version of the

17
00:01:07.324 --> 00:01:11.643
OAuth2AuthorizationRequestResolver.

18
00:01:11.643 --> 00:01:15.721
Here I have an example of a custom implementation,

19
00:01:15.721 --> 00:01:18.093
which is a class that implements the

20
00:01:18.093 --> 00:01:24.659
OAuth2AuthorizationRequestResolver interface and overrides the required

21
00:01:24.659 --> 00:01:25.413
methods.

22
00:01:25.413 --> 00:01:30.174
This implementation is a wrapper around the default implementation.

23
00:01:30.174 --> 00:01:33.950
We simply create an internal reference of the default resolver,

24
00:01:33.950 --> 00:01:39.337
passing in the client registration repository.

25
00:01:39.337 --> 00:01:43.064
In the resolve method that returns the authorization request,

26
00:01:43.064 --> 00:01:47.201
we simply call the default implementation and then we

27
00:01:47.201 --> 00:01:51.083
can customize it before returning it.

28
00:01:51.083 --> 00:01:56.279
In this example, we can add additional parameters like the optional prompt,

29
00:01:56.279 --> 00:01:56.606
consent,

30
00:01:56.606 --> 00:02:02.576
which will prompt the user for consent each time they log in to the application.

31
00:02:02.576 --> 00:02:05.581
All we do now is add it, you guessed it,

32
00:02:05.581 --> 00:02:10.410
to the authorization endpoint via the OAuth2 login.

33
00:02:10.410 --> 00:02:11.622
Easy.

34
00:02:11.622 --> 00:02:20.000
Now if we restart our application, you can see the new parameter being passed in the authorization request.

