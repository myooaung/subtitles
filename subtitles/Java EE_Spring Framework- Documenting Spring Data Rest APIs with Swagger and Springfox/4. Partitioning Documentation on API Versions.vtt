WEBVTT
1
00:00:00.970 --> 00:00:04.870
If you're managing versioning by branching your code base and using a

2
00:00:04.870 --> 00:00:08.640
load balancer or proxy server to direct traffic,

3
00:00:08.640 --> 00:00:13.100
each application will simply have its own Swagger UI. Since the

4
00:00:13.100 --> 00:00:15.840
documentation is generated from the code,

5
00:00:15.840 --> 00:00:18.870
any changes in each version will be reflected in the

6
00:00:18.870 --> 00:00:21.390
documentation for that version.

7
00:00:21.390 --> 00:00:23.230
If you haven't watched it already,

8
00:00:23.230 --> 00:00:28.610
I recommend the Spring Framework: Versioning Spring Data REST APIs course for a

9
00:00:28.610 --> 00:00:33.240
discussion of different versioning strategies for your API.

10
00:00:33.240 --> 00:00:35.560
When you're working with a versioned API,

11
00:00:35.560 --> 00:00:39.880
you can utilize path selectors in the Docket object to

12
00:00:39.880 --> 00:00:43.740
restrict the generated documentation to certain endpoints

13
00:00:43.740 --> 00:00:46.440
based on the path of the endpoint.

14
00:00:46.440 --> 00:00:47.690
For example,

15
00:00:47.690 --> 00:00:53.160
this Docket object contains a PathSelector that is filtering on an ant

16
00:00:53.160 --> 00:00:58.150
pattern of any endpoints that start with v2. By default,

17
00:00:58.150 --> 00:01:02.220
all paths are included, but by adding PathSelectors,

18
00:01:02.220 --> 00:01:07.640
you can restrict what appears in your documentation.

19
00:01:07.640 --> 00:01:11.630
Let's look at an example of two versions of an application,

20
00:01:11.630 --> 00:01:17.315
each with their own Swagger UI. We'll also incorporate PathSelectors to only

21
00:01:17.315 --> 00:01:21.780
generate documentation for a given pattern of endpoints.

22
00:01:21.780 --> 00:01:25.140
If you were using URI versioning with the basePath

23
00:01:25.140 --> 00:01:29.940
configuration, we'd set this for v1 for version 1.

24
00:01:29.940 --> 00:01:32.850
Then in the Docket of our Configuration class,

25
00:01:32.850 --> 00:01:40.360
we would put a PathSelector that is only looking for v1 URIs. In our ApiInfo,

26
00:01:40.360 --> 00:01:46.580
we have version 1.0. In the Swagger UI, we can see Employee API

27
00:01:46.580 --> 00:01:50.880
1.0. Then if we expand the Employee Entity,

28
00:01:50.880 --> 00:01:56.510
we can see all of the v1 endpoints, and same with the example‑service.

29
00:01:56.510 --> 00:01:59.920
If we switched to the version 2 branch of the project,

30
00:01:59.920 --> 00:02:05.690
we can see the basePath is set to v2, and the Docket has a PathSelector

31
00:02:05.690 --> 00:02:11.750
looking for v2. The ApiInfo has also been updated with a version

32
00:02:11.750 --> 00:02:17.690
property of 2.0. When we look at the Swagger UI, we can see Employee API

33
00:02:17.690 --> 00:02:20.710
2.0. Then when we expand the entities,

34
00:02:20.710 --> 00:02:24.820
we can see all of the v2 paths under the Employee Entity

35
00:02:24.820 --> 00:02:27.980
and the v2 path for the example‑service.

36
00:02:27.980 --> 00:02:31.210
If you're managing your versions by branching your code base and

37
00:02:31.210 --> 00:02:34.310
deploying two separate apps behind a load balancer, each

38
00:02:34.310 --> 00:02:41.000
application will simply have its own Swagger UI that will stay up to date with that code base.

