1
1

00:00:01,639  -->  00:00:03,266
<v Instructor>Hello everyone and welcome</v>
2

2

00:00:03,266  -->  00:00:07,105
to the functions and methods homework solutions lecture.
3

3

00:00:07,105  -->  00:00:09,184
I'm just gonna quickly go over
4

4

00:00:09,184  -->  00:00:11,413
the solutions that I came up with
5

5

00:00:11,413  -->  00:00:14,692
for the functions and methods homework.
6

6

00:00:14,692  -->  00:00:16,724
The first one, wanted you to write a function
7

7

00:00:16,724  -->  00:00:20,185
that computes the volume of a sphere given its radius.
8

8

00:00:20,185  -->  00:00:23,822
I just started out with def, called my function vol,
9

9

00:00:23,822  -->  00:00:28,558
v-o-l, took in an argument, r-a-d, for the radius
10

10

00:00:28,558  -->  00:00:31,330
and then returned, you'll note here the floating
11

11

00:00:31,330  -->  00:00:34,267
point number since I'm using Python too.
12

12

00:00:34,267  -->  00:00:37,640
Four divided by three, times 3.14,
13

13

00:00:37,640  -->  00:00:41,557
so four thirds times pi times the radius cubed.
14

14

00:00:43,573  -->  00:00:44,913
Then I wanted you to write a function
15

15

00:00:44,913  -->  00:00:47,160
that checks whether a number is in a given range,
16

16

00:00:47,160  -->  00:00:49,749
inclusive of high and low.
17

17

00:00:49,749  -->  00:00:53,674
What I did here was I created a function, def space,
18

18

00:00:53,674  -->  00:00:57,097
ran underscore check, takes in three arguments,
19

19

00:00:57,097  -->  00:00:59,800
'num', 'low' and 'high'.
20

20

00:00:59,800  -->  00:01:03,668
It checks if num is in range, low high,
21

21

00:01:03,668  -->  00:01:04,848
so that would be a list.
22

22

00:01:04,848  -->  00:01:07,098
If it's in that list, print
23

23

00:01:08,444  -->  00:01:12,611
it's in the range, else print numbers outside the range.
24

24

00:01:14,713  -->  00:01:16,786
Then if you only wanted to return a boolean,
25

25

00:01:16,786  -->  00:01:19,529
what you could've done was def ran bool
26

26

00:01:19,529  -->  00:01:21,804
and then just returned the boolean itself,
27

27

00:01:21,804  -->  00:01:22,887
num in range.
28

28

00:01:25,328  -->  00:01:27,693
After that, wanted you to write a Python function
29

29

00:01:27,693  -->  00:01:30,007
that accepts a string and calculates the number
30

30

00:01:30,007  -->  00:01:32,700
of upper case letters and lower case letters.
31

31

00:01:32,700  -->  00:01:35,057
For example, had 'Hello Mr. Rogers,
32

32

00:01:35,057  -->  00:01:37,121
how are you this fine Tuesday?'
33

33

00:01:37,121  -->  00:01:40,378
and expected output was number of upper case characters,
34

34

00:01:40,378  -->  00:01:43,257
number of lower case characters.
35

35

00:01:43,257  -->  00:01:44,372
If you were feeling ambitious,
36

36

00:01:44,372  -->  00:01:46,840
you could've explored the collections module
37

37

00:01:46,840  -->  00:01:50,133
but the way I did this was I created a dictionary
38

38

00:01:50,133  -->  00:01:51,800
with upper and lower
39

39

00:01:52,774  -->  00:01:54,918
as my keys and then I said
40

40

00:01:54,918  -->  00:01:57,519
for character, or for c in s,
41

41

00:01:57,519  -->  00:01:59,884
so for character in the string,
42

42

00:01:59,884  -->  00:02:03,583
if it's upper is true, so that's a method on a string,
43

43

00:02:03,583  -->  00:02:05,583
add a count to that key.
44

44

00:02:07,597  -->  00:02:10,067
If it was lower, add a count to a lower key,
45

45

00:02:10,067  -->  00:02:12,015
else, if it was like a period or something,
46

46

00:02:12,015  -->  00:02:15,297
just pass and then I printed out the results
47

47

00:02:15,297  -->  00:02:16,880
of that dictionary.
48

48

00:02:18,519  -->  00:02:20,376
Next I wanted you to write a Python function
49

49

00:02:20,376  -->  00:02:22,156
that takes a list and returns a new list
50

50

00:02:22,156  -->  00:02:25,740
with unique elements of the first list.
51

51

00:02:25,740  -->  00:02:28,740
The way you can do this in this case
52

52

00:02:29,965  -->  00:02:32,628
is start with an empty list in this function
53

53

00:02:32,628  -->  00:02:35,878
then say, for a in l, if a is not in x,
54

54

00:02:36,934  -->  00:02:38,845
if it's not in that unique list,
55

55

00:02:38,845  -->  00:02:40,558
the one you're gonna output,
56

56

00:02:40,558  -->  00:02:43,308
append it to a and then return x.
57

57

00:02:44,380  -->  00:02:49,369
You can also use sets but we'll mention that later on.
58

58

00:02:49,369  -->  00:02:51,062
Next I wanted you to write a Python function
59

59

00:02:51,062  -->  00:02:53,888
to multiply all the numbers in a list.
60

60

00:02:53,888  -->  00:02:57,139
You have a sample list, expected output.
61

61

00:02:57,139  -->  00:03:01,670
What I did, I said total is equal to numbers, index zero,
62

62

00:03:01,670  -->  00:03:03,347
so that very first item.
63

63

00:03:03,347  -->  00:03:07,264
Then I said for x in numbers, total times x,
64

64

00:03:08,364  -->  00:03:10,500
so total times total times x
65

65

00:03:10,500  -->  00:03:13,170
and then return the total.
66

66

00:03:13,170  -->  00:03:15,152
After that, I wanted you to write a Python function
67

67

00:03:15,152  -->  00:03:18,288
that checks whether a passed string is a palindrome or not.
68

68

00:03:18,288  -->  00:03:19,792
This is a quick way to do it.
69

69

00:03:19,792  -->  00:03:21,654
You just check if the string is equal
70

70

00:03:21,654  -->  00:03:25,685
to the string reversed through indexing.
71

71

00:03:25,685  -->  00:03:28,782
Last one was a little harder.
72

72

00:03:28,782  -->  00:03:29,842
Had to write a Python function
73

73

00:03:29,842  -->  00:03:32,889
to check whether a string is a pangram or not.
74

74

00:03:32,889  -->  00:03:34,881
I mentioned the string module.
75

75

00:03:34,881  -->  00:03:38,009
What I did here was I used set to say
76

76

00:03:38,009  -->  00:03:41,704
this alphaset is equal to the set of the alphabet
77

77

00:03:41,704  -->  00:03:43,678
and then I wanted you to return
78

78

00:03:43,678  -->  00:03:46,154
the alphaset, which was less than or equal to
79

79

00:03:46,154  -->  00:03:50,200
the set of the first string, everything lower case.
80

80

00:03:50,200  -->  00:03:51,569
Go ahead and read over that one,
81

81

00:03:51,569  -->  00:03:53,329
make sure you fully understand it.
82

82

00:03:53,329  -->  00:03:55,735
I know it's pretty tricky, but this boolean
83

83

00:03:55,735  -->  00:03:58,049
is the main trick here as far as
84

84

00:03:58,049  -->  00:04:00,632
this function's implementation.
85

85

00:04:02,196  -->  00:04:04,756
Thanks, go ahead and review the Jupiter notebook,
86

86

00:04:04,756  -->  00:04:06,596
and I will see you at the next lecture.
87

87

00:04:06,596  -->  00:04:07,929
Thanks everyone!
