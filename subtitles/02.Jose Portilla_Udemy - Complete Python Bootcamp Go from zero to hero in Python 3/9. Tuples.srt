1
1

00:00:01,423  -->  00:00:02,256
<v Instructor>Hello, everyone,</v>
2

2

00:00:02,256  -->  00:00:04,602
and welcome to the lecture on tuples.
3

3

00:00:04,602  -->  00:00:06,651
So, sometimes, some people call 'em tuples,
4

4

00:00:06,651  -->  00:00:08,416
some people call 'em tuples.
5

5

00:00:08,416  -->  00:00:10,548
I'll be referring to them as tuples
6

6

00:00:10,548  -->  00:00:12,373
throughout the rest of the course.
7

7

00:00:12,373  -->  00:00:14,863
So, in Python, these tuples are very similar
8

8

00:00:14,863  -->  00:00:17,520
to lists, except, they are immutable,
9

9

00:00:17,520  -->  00:00:18,960
so that means they can't be changed.
10

10

00:00:18,960  -->  00:00:23,430
So, right now, I have open the Jupyter Notebook.
11

11

00:00:23,430  -->  00:00:26,159
And, in this lecture, we're gonna be going over
12

12

00:00:26,159  -->  00:00:29,853
constructing tuples, some basic tuple methods,
13

13

00:00:29,853  -->  00:00:32,156
their immutability, and we'll drive that point home,
14

14

00:00:32,156  -->  00:00:35,409
and then, a quick side talk on when to use tuples.
15

15

00:00:35,409  -->  00:00:37,086
All right, so this will probably be
16

16

00:00:37,086  -->  00:00:39,324
a pretty brief lecture, since a lot
17

17

00:00:39,324  -->  00:00:41,647
of the syntax will feel pretty familiar.
18

18

00:00:41,647  -->  00:00:44,512
So, how do you construct a tuple?
19

19

00:00:44,512  -->  00:00:46,771
So, if you remember, you can construct
20

20

00:00:46,771  -->  00:00:49,152
a list using square brackets.
21

21

00:00:49,152  -->  00:00:52,569
So here I have a list of one, two, three.
22

22

00:00:54,268  -->  00:00:56,743
With a tuple, it's almost the same,
23

23

00:00:56,743  -->  00:01:00,660
except you're gonna use parentheses and commas.
24

24

00:01:01,607  -->  00:01:04,433
And so, now, t is a tuple there.
25

25

00:01:04,433  -->  00:01:07,927
So, just like a string or a list,
26

26

00:01:07,927  -->  00:01:10,873
you can use the L-E-N, the length function,
27

27

00:01:10,873  -->  00:01:13,063
to check its length, and so that will give you
28

28

00:01:13,063  -->  00:01:15,779
how many elements are in that tuple.
29

29

00:01:15,779  -->  00:01:17,914
And then, tuples, just like a list,
30

30

00:01:17,914  -->  00:01:20,081
can also mix object types.
31

31

00:01:20,081  -->  00:01:23,172
So I can put in a string along with an integer
32

32

00:01:23,172  -->  00:01:26,164
into my tuple, and there's no problems there.
33

33

00:01:26,164  -->  00:01:28,009
And let's go ahead and show that tuple.
34

34

00:01:28,009  -->  00:01:28,842
All right.
35

35

00:01:28,842  -->  00:01:32,677
So, again, a tuple is a sequence, just like a list,
36

36

00:01:32,677  -->  00:01:35,214
and we can index it just as we've seen before.
37

37

00:01:35,214  -->  00:01:38,100
And so, t of zero, that brings out that string,
38

38

00:01:38,100  -->  00:01:41,542
and if I wanna access that two, it's in the one index.
39

39

00:01:41,542  -->  00:01:44,676
And it also supports slicing, so let's say I,
40

40

00:01:44,676  -->  00:01:48,053
whoops, let's say I wanted to grab the last one.
41

41

00:01:48,053  -->  00:01:49,404
I could use a negative one.
42

42

00:01:49,404  -->  00:01:52,133
So, indexing, all that syntax is the same
43

43

00:01:52,133  -->  00:01:54,996
as it was for strings and lists.
44

44

00:01:54,996  -->  00:01:58,476
Now, there's a few basic tuple methods
45

45

00:01:58,476  -->  00:02:00,049
that I wanna introduce to you guys.
46

46

00:02:00,049  -->  00:02:03,974
So, remember, for a method, you take your variable name,
47

47

00:02:03,974  -->  00:02:06,511
put a dot or a decimal point, and then,
48

48

00:02:06,511  -->  00:02:10,171
you write the method name and if it takes any arguments,
49

49

00:02:10,171  -->  00:02:12,137
you usually have parentheses there.
50

50

00:02:12,137  -->  00:02:15,282
So, in this case, index will,
51

51

00:02:15,282  -->  00:02:17,442
you can enter a value that you know is in the tuple,
52

52

00:02:17,442  -->  00:02:19,364
and it's gonna return the index.
53

53

00:02:19,364  -->  00:02:22,254
So, if we look at my current tuple, that t,
54

54

00:02:22,254  -->  00:02:26,316
it has a one string and a two integer there.
55

55

00:02:26,316  -->  00:02:27,595
So let's say I wanted to figure out
56

56

00:02:27,595  -->  00:02:30,262
what the index of that item was.
57

57

00:02:31,497  -->  00:02:32,713
I could put it in.
58

58

00:02:32,713  -->  00:02:34,817
So, to show you again, let's say
59

59

00:02:34,817  -->  00:02:37,462
I wanted to know the index of two there.
60

60

00:02:37,462  -->  00:02:39,240
It responds with one as the index.
61

61

00:02:39,240  -->  00:02:40,991
So that makes sense.
62

62

00:02:40,991  -->  00:02:44,269
Another method we can use is the dot count.
63

63

00:02:44,269  -->  00:02:49,019
So, that will count the number of times the value appears.
64

64

00:02:49,019  -->  00:02:52,328
So, you put in the element that you know
65

65

00:02:52,328  -->  00:02:54,754
is in the tuple, and it tells you
66

66

00:02:54,754  -->  00:02:57,002
how many times it appears in that tuple.
67

67

00:02:57,002  -->  00:02:59,599
So, for instance, if I make a tuple right now,
68

68

00:02:59,599  -->  00:03:01,932
that's one, one, two, three.
69

69

00:03:02,784  -->  00:03:06,867
So I know one appears twice, so if I say t.count,
70

70

00:03:07,797  -->  00:03:10,184
and I wanna count how many times one shows up,
71

71

00:03:10,184  -->  00:03:11,809
it responds with two.
72

72

00:03:11,809  -->  00:03:12,809
Okay, great.
73

73

00:03:16,093  -->  00:03:18,442
So, something that we're really gonna stress with tuples,
74

74

00:03:18,442  -->  00:03:20,325
and the thing that really makes tuples unique,
75

75

00:03:20,325  -->  00:03:22,030
is that they're immutable.
76

76

00:03:22,030  -->  00:03:25,451
So, that means you cannot change the items inside the tuple.
77

77

00:03:25,451  -->  00:03:28,777
You can't reassign the items inside a tuple.
78

78

00:03:28,777  -->  00:03:29,987
So, to show you what I mean, remember
79

79

00:03:29,987  -->  00:03:33,605
we have our list, l, which is two, two, three.
80

80

00:03:33,605  -->  00:03:36,855
I'm gonna change it to one, two, three.
81

81

00:03:39,416  -->  00:03:43,583
Okay, so, we have a list that's equal to one, two, three.
82

82

00:03:44,461  -->  00:03:46,983
Don't worry about this change to two, two, three.
83

83

00:03:46,983  -->  00:03:48,416
That occurred because I paused the video
84

84

00:03:48,416  -->  00:03:50,417
and was playing around with it.
85

85

00:03:50,417  -->  00:03:52,821
Anyways, so, right now I have a list
86

86

00:03:52,821  -->  00:03:54,636
that's equal to one, two, three.
87

87

00:03:54,636  -->  00:03:56,602
And let's go ahead and make our tuple t
88

88

00:03:56,602  -->  00:04:00,465
equal to a tuple that's one, two, three.
89

89

00:04:00,465  -->  00:04:03,307
So, if you remember, the list, since it's mutable,
90

90

00:04:03,307  -->  00:04:06,204
it will support object, or item, assignment.
91

91

00:04:06,204  -->  00:04:09,454
So I can say l of zero is now equal to,
92

92

00:04:10,465  -->  00:04:12,882
let's say, a string called s.
93

93

00:04:15,042  -->  00:04:16,486
And now, there's no problems there.
94

94

00:04:16,486  -->  00:04:18,236
It's been reassigned.
95

95

00:04:19,714  -->  00:04:21,649
Now, if you try to do the same thing
96

96

00:04:21,649  -->  00:04:24,071
with a tuple, it's not going to work.
97

97

00:04:24,071  -->  00:04:27,563
So, here, I have my tuple, which is one, two, three,
98

98

00:04:27,563  -->  00:04:29,808
and if I were to try to reassign
99

99

00:04:29,808  -->  00:04:33,479
the zero index there, which is a one,
100

100

00:04:33,479  -->  00:04:34,757
let's say I try to make that equal
101

101

00:04:34,757  -->  00:04:37,905
to something else, like that string s.
102

102

00:04:37,905  -->  00:04:39,469
It's gonna say, a tuple object
103

103

00:04:39,469  -->  00:04:41,127
does not support item assignment.
104

104

00:04:41,127  -->  00:04:43,964
So, this is really important to know.
105

105

00:04:43,964  -->  00:04:47,881
Tuples cannot be mutated, so they're immutable.
106

106

00:04:49,056  -->  00:04:50,878
So, you might be wondering, so,
107

107

00:04:50,878  -->  00:04:52,565
why would I bother using tuples
108

108

00:04:52,565  -->  00:04:55,592
when they have fewer available methods than a list?
109

109

00:04:55,592  -->  00:04:58,259
So, if we check out this list,
110

110

00:04:58,259  -->  00:05:00,103
and then check out all the methods on it,
111

111

00:05:00,103  -->  00:05:02,727
there's append, count, extend, pop, remove, sort.
112

112

00:05:02,727  -->  00:05:05,347
And we go over those in the advanced list lectures.
113

113

00:05:05,347  -->  00:05:08,120
But if I look at my tuple, and press tab,
114

114

00:05:08,120  -->  00:05:11,660
there's actually only two methods, count and index.
115

115

00:05:11,660  -->  00:05:14,307
So there's fewer supported methods in the tuple.
116

116

00:05:14,307  -->  00:05:16,233
So you might be wondering, well,
117

117

00:05:16,233  -->  00:05:18,243
why would I use that instead of using a list?
118

118

00:05:18,243  -->  00:05:20,477
And the key to that is their immutability.
119

119

00:05:20,477  -->  00:05:22,091
So, if you're in your programme,
120

120

00:05:22,091  -->  00:05:23,589
you're passing around an object,
121

121

00:05:23,589  -->  00:05:25,843
and need to make sure it doesn't get changed,
122

122

00:05:25,843  -->  00:05:28,693
so you've gotta make sure the sequence doesn't get changed,
123

123

00:05:28,693  -->  00:05:31,706
the tuple can be your solution for that.
124

124

00:05:31,706  -->  00:05:33,370
So, an example of that might be,
125

125

00:05:33,370  -->  00:05:34,468
if you have a tuple representing
126

126

00:05:34,468  -->  00:05:36,496
the dates of a calendar, which you know
127

127

00:05:36,496  -->  00:05:38,673
are not gonna change throughout your code,
128

128

00:05:38,673  -->  00:05:40,974
you might use a tuple in that sort of context.
129

129

00:05:40,974  -->  00:05:44,068
So, definitely keep tuples in mind
130

130

00:05:44,068  -->  00:05:46,786
when you want something to be immutable.
131

131

00:05:46,786  -->  00:05:48,021
Okay.
132

132

00:05:48,021  -->  00:05:49,907
So, that's it for this quick lecture.
133

133

00:05:49,907  -->  00:05:52,044
Let's just jump back to the Jupyter Notebook,
134

134

00:05:52,044  -->  00:05:53,809
so we can review everything.
135

135

00:05:53,809  -->  00:05:55,608
And we went over how to construct a tuple,
136

136

00:05:55,608  -->  00:05:58,492
so you just do that with parentheses and commas,
137

137

00:05:58,492  -->  00:05:59,637
just like a list, except instead of
138

138

00:05:59,637  -->  00:06:01,689
square brackets, you're using parentheses.
139

139

00:06:01,689  -->  00:06:04,639
You can check the length with the L-E-N function.
140

140

00:06:04,639  -->  00:06:06,783
You can also mix object types in a tuple.
141

141

00:06:06,783  -->  00:06:08,103
And you can use indexing, just like
142

142

00:06:08,103  -->  00:06:10,914
we did for strings and lists.
143

143

00:06:10,914  -->  00:06:14,914
There's only two tuple methods, index and count.
144

144

00:06:15,793  -->  00:06:18,043
And we went over their immutability.
145

145

00:06:18,043  -->  00:06:22,266
So, you can't support item assignment in a tuple.
146

146

00:06:22,266  -->  00:06:25,620
All right, so, that's actually it for tuples.
147

147

00:06:25,620  -->  00:06:27,282
And we'll see you at the next lecture.
148

148

00:06:27,282  -->  00:06:28,365
Thanks, guys.
