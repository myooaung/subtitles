1
1

00:00:01,876  -->  00:00:03,117
<v Instructor>Hello, everyone, and welcome</v>
2

2

00:00:03,117  -->  00:00:05,606
to the functions lecture.
3

3

00:00:05,606  -->  00:00:08,378
So, in this lecture, we're gonna be learning about functions
4

4

00:00:08,378  -->  00:00:09,651
and getting our first introduction
5

5

00:00:09,651  -->  00:00:12,146
how to actually make our own functions.
6

6

00:00:12,146  -->  00:00:13,854
So, we've seen a few functions in the past,
7

7

00:00:13,854  -->  00:00:16,886
such as L-E-N, remember that length function,
8

8

00:00:16,886  -->  00:00:19,561
and now we're gonna learn to build our own functions.
9

9

00:00:19,561  -->  00:00:20,394
So let's go ahead and get started
10

10

00:00:20,394  -->  00:00:23,127
with a quick introduction to functions.
11

11

00:00:23,127  -->  00:00:25,043
So, what are functions?
12

12

00:00:25,043  -->  00:00:27,310
So, formally speaking, a function
13

13

00:00:27,310  -->  00:00:31,051
is a useful device that groups together a set of statements
14

14

00:00:31,051  -->  00:00:33,460
so that they can be run more than once.
15

15

00:00:33,460  -->  00:00:35,740
And they can also let us specify parameters
16

16

00:00:35,740  -->  00:00:38,284
that can serve as inputs to the functions.
17

17

00:00:38,284  -->  00:00:39,795
So you can remember the range function
18

18

00:00:39,795  -->  00:00:41,207
allowed us to put in parameters
19

19

00:00:41,207  -->  00:00:44,124
such as start, stop, and step size.
20

20

00:00:45,263  -->  00:00:46,936
So, on a more fundamental level,
21

21

00:00:46,936  -->  00:00:48,578
the functions allow us to not have to
22

22

00:00:48,578  -->  00:00:51,474
repeatedly write the same code again and again.
23

23

00:00:51,474  -->  00:00:52,949
So, if you remember back to that lesson
24

24

00:00:52,949  -->  00:00:54,741
with strings and lists, when we were
25

25

00:00:54,741  -->  00:00:56,637
using the function L-E-N to check
26

26

00:00:56,637  -->  00:00:59,345
the length of a string or of a list,
27

27

00:00:59,345  -->  00:01:01,319
if that's something you're gonna wanna do a lot,
28

28

00:01:01,319  -->  00:01:02,644
you're gonna wanna create a function,
29

29

00:01:02,644  -->  00:01:03,923
so you don't have to repeatedly
30

30

00:01:03,923  -->  00:01:08,373
write out manually some sort of count for loop.
31

31

00:01:08,373  -->  00:01:12,485
Okay, and then, finally, these def, or D-E-F, statements.
32

32

00:01:12,485  -->  00:01:15,331
So, def is a built-in keyword telling Python
33

33

00:01:15,331  -->  00:01:17,592
that you're about to create a function.
34

34

00:01:17,592  -->  00:01:19,515
And, instead of going through the syntax
35

35

00:01:19,515  -->  00:01:21,222
here in a PowerPoint presentation,
36

36

00:01:21,222  -->  00:01:22,508
we're actually just gonna hop in
37

37

00:01:22,508  -->  00:01:25,179
straight to the code and check out the full syntax.
38

38

00:01:25,179  -->  00:01:29,345
So let's go ahead and hop over to the Jupyter Notebook.
39

39

00:01:29,345  -->  00:01:31,618
Okay, so, we're back at the Jupyter Notebook,
40

40

00:01:31,618  -->  00:01:33,023
and now, we're gonna go ahead and hop over
41

41

00:01:33,023  -->  00:01:36,380
to some live code to check out the syntax.
42

42

00:01:36,380  -->  00:01:39,220
So, how do you build out a function in Python?
43

43

00:01:39,220  -->  00:01:43,431
So you first start off with the D-E-F, the def keyword.
44

44

00:01:43,431  -->  00:01:46,442
And if you're using an IDE that highlights
45

45

00:01:46,442  -->  00:01:49,271
the correct syntax in Python, you should see it highlighted.
46

46

00:01:49,271  -->  00:01:50,901
And then, you do a space, and then
47

47

00:01:50,901  -->  00:01:53,216
you enter the name of your function.
48

48

00:01:53,216  -->  00:01:55,711
And the rules as far as naming your functions
49

49

00:01:55,711  -->  00:01:59,004
are gonna follow the same rules of naming variables.
50

50

00:01:59,004  -->  00:02:00,619
So, I'm gonna say
51

51

00:02:00,619  -->  00:02:02,036
name_of_function.
52

52

00:02:04,919  -->  00:02:06,392
So, space, the name of your function,
53

53

00:02:06,392  -->  00:02:08,423
you can name this whatever you want,
54

54

00:02:08,423  -->  00:02:10,840
and then, parenthesis, colon,
55

55

00:02:14,102  -->  00:02:15,401
enter, and right now, this is
56

56

00:02:15,401  -->  00:02:16,996
gonna be a super simple function.
57

57

00:02:16,996  -->  00:02:17,829
It's just gonna pass.
58

58

00:02:17,829  -->  00:02:20,634
It's not gonna do anything.
59

59

00:02:20,634  -->  00:02:23,181
And that's your very first function.
60

60

00:02:23,181  -->  00:02:24,141
Okay.
61

61

00:02:24,141  -->  00:02:28,141
So, now, I can actually call this function,
62

62

00:02:28,141  -->  00:02:29,474
and if you're using Jupyter Notebook,
63

63

00:02:29,474  -->  00:02:32,908
so you can do tab to autocomplete.
64

64

00:02:32,908  -->  00:02:34,319
And I won't pass anything, since
65

65

00:02:34,319  -->  00:02:35,423
it doesn't take any arguments.
66

66

00:02:35,423  -->  00:02:37,872
Shift + Enter, and nothing will happen.
67

67

00:02:37,872  -->  00:02:38,798
Okay.
68

68

00:02:38,798  -->  00:02:40,664
So let's start building on top of this.
69

69

00:02:40,664  -->  00:02:42,952
So, we began with that def, and then a space,
70

70

00:02:42,952  -->  00:02:44,749
followed by the name of the function.
71

71

00:02:44,749  -->  00:02:47,398
And, remember, we're gonna try to keep the names relevant.
72

72

00:02:47,398  -->  00:02:49,834
So, for example, L-E-N is a good name
73

73

00:02:49,834  -->  00:02:51,488
for that length function.
74

74

00:02:51,488  -->  00:02:53,161
But you also wanna be careful with names.
75

75

00:02:53,161  -->  00:02:54,314
You don't wanna call a function
76

76

00:02:54,314  -->  00:02:57,129
the same name as a built-in function in Python.
77

77

00:02:57,129  -->  00:02:59,195
And if you go to the Jupyter Notebook,
78

78

00:02:59,195  -->  00:03:01,583
I actually have a link here that goes
79

79

00:03:01,583  -->  00:03:03,505
to all the built-in functions.
80

80

00:03:03,505  -->  00:03:07,858
So if you open this link, let me zoom in a little more
81

81

00:03:07,858  -->  00:03:09,695
so you guys can see it, Python has
82

82

00:03:09,695  -->  00:03:11,352
a bunch of built-in functions,
83

83

00:03:11,352  -->  00:03:14,095
such as the L-E-N function right here, length.
84

84

00:03:14,095  -->  00:03:16,410
And we'll be exploring these as we continue on throughout
85

85

00:03:16,410  -->  00:03:19,965
the course, but you wanna avoid any of these names.
86

86

00:03:19,965  -->  00:03:24,132
So, instance, like abs, all, any, basestring, et cetera.
87

87

00:03:26,074  -->  00:03:28,707
Usually, just make your function name
88

88

00:03:28,707  -->  00:03:30,173
more specific than it has to be,
89

89

00:03:30,173  -->  00:03:32,622
and you'll be unlikely to overrwrite
90

90

00:03:32,622  -->  00:03:35,309
any of these built-in functions.
91

91

00:03:35,309  -->  00:03:39,230
Anyways, continuing on, we have our function,
92

92

00:03:39,230  -->  00:03:42,006
name of the function, then came a pair of parenthesis,
93

93

00:03:42,006  -->  00:03:44,567
and that's where you're going to input arguments.
94

94

00:03:44,567  -->  00:03:46,985
And you'll separate the arguments with a comma.
95

95

00:03:46,985  -->  00:03:49,422
So you remember, when we're using the range function,
96

96

00:03:49,422  -->  00:03:51,655
you inputted the start, the stop, and the step size,
97

97

00:03:51,655  -->  00:03:54,358
and they were separated by a comma.
98

98

00:03:54,358  -->  00:03:57,997
And then, finally, you have a colon there.
99

99

00:03:57,997  -->  00:04:01,980
And then, you start a next line, and you have to indent.
100

100

00:04:01,980  -->  00:04:05,319
So, this indentation is actually important for Python,
101

101

00:04:05,319  -->  00:04:06,845
since Python makes use of what's
102

102

00:04:06,845  -->  00:04:09,242
called a whitespace to organise code.
103

103

00:04:09,242  -->  00:04:11,617
A lot of other programming languages don't do this,
104

104

00:04:11,617  -->  00:04:13,720
so keep that in mind, that this whitespace
105

105

00:04:13,720  -->  00:04:16,253
and this spacing and indentation is actually
106

106

00:04:16,253  -->  00:04:19,153
one of the most important parts of
107

107

00:04:19,153  -->  00:04:21,445
organising your code in Python.
108

108

00:04:21,445  -->  00:04:23,541
Okay, so, let's build up on top of this.
109

109

00:04:23,541  -->  00:04:26,487
Let's actually pass in some arguments.
110

110

00:04:26,487  -->  00:04:28,201
And I have to label them here,
111

111

00:04:28,201  -->  00:04:31,534
so I'm just gonna label them arg1, arg2.
112

112

00:04:33,542  -->  00:04:34,506
And, again, pass.
113

113

00:04:34,506  -->  00:04:37,825
I'm not gonna do anything with those functions,
114

114

00:04:37,825  -->  00:04:39,242
or, excuse me, with those arguments.
115

115

00:04:39,242  -->  00:04:43,386
And if I run that cell again, notice now I get an error,
116

116

00:04:43,386  -->  00:04:44,577
that the name_of_function takes
117

117

00:04:44,577  -->  00:04:48,379
exactly two arguments, and I'm giving it zero.
118

118

00:04:48,379  -->  00:04:51,235
So it's required now that I input two arguments.
119

119

00:04:51,235  -->  00:04:55,051
So, if I input one and two, I don't get an error,
120

120

00:04:55,051  -->  00:04:57,819
but, again, nothing happens.
121

121

00:04:57,819  -->  00:05:01,402
So, let's build out the function even more.
122

122

00:05:02,268  -->  00:05:03,329
We wanna do something.
123

123

00:05:03,329  -->  00:05:06,547
So let's go ahead and rename this function.
124

124

00:05:06,547  -->  00:05:07,630
Let's call it
125

125

00:05:09,095  -->  00:05:10,512
my_addition_func.
126

126

00:05:14,521  -->  00:05:16,453
This is a really long name, but hopefully
127

127

00:05:16,453  -->  00:05:17,771
you can guess what we're gonna do.
128

128

00:05:17,771  -->  00:05:19,104
We're gonna say,
129

129

00:05:20,428  -->  00:05:21,845
print arg1, arg2.
130

130

00:05:25,205  -->  00:05:26,851
Whoops.
131

131

00:05:26,851  -->  00:05:29,053
We wanna print them being added together.
132

132

00:05:29,053  -->  00:05:30,320
And I'm gonna get rid of that pass now,
133

133

00:05:30,320  -->  00:05:32,704
since we actually wanna do something with them.
134

134

00:05:32,704  -->  00:05:36,468
So now, if I run that cell to save that function,
135

135

00:05:36,468  -->  00:05:40,777
name_of_function, now I'm gonna change this to
136

136

00:05:40,777  -->  00:05:42,194
my_addition_func.
137

137

00:05:45,190  -->  00:05:48,696
And notice how I use tab autcomplete for convenience there.
138

138

00:05:48,696  -->  00:05:51,671
And now, if I run this cell, it actually
139

139

00:05:51,671  -->  00:05:54,311
takes in the arguments and does the code
140

140

00:05:54,311  -->  00:05:58,404
that's indented beneath the colon there.
141

141

00:05:58,404  -->  00:06:02,005
So, something else you might see for functions
142

142

00:06:02,005  -->  00:06:04,193
is something called a docstring.
143

143

00:06:04,193  -->  00:06:07,443
So, if you remember the range function,
144

144

00:06:08,429  -->  00:06:12,596
if I clicked Shift + Tab, a docstring came out
145

145

00:06:13,532  -->  00:06:14,792
that had some information.
146

146

00:06:14,792  -->  00:06:16,601
Range stop, list of integers.
147

147

00:06:16,601  -->  00:06:17,753
So you might be thinking, well,
148

148

00:06:17,753  -->  00:06:20,287
where's that information actually saved?
149

149

00:06:20,287  -->  00:06:23,370
So, to create a docstring, you create
150

150

00:06:25,398  -->  00:06:26,231
a comment
151

151

00:06:29,491  -->  00:06:33,158
using triple quotations marks to enclose it.
152

152

00:06:34,444  -->  00:06:37,627
And then you say, here is whatever you wanna
153

153

00:06:37,627  -->  00:06:40,496
say in your docstring, since this is just a giant string.
154

154

00:06:40,496  -->  00:06:42,237
Here's my docstring.
155

155

00:06:42,237  -->  00:06:45,001
I'm gonna click Shift + Enter to run,
156

156

00:06:45,001  -->  00:06:49,168
and now you'll notice, if I click Shift + Tab here,
157

157

00:06:51,277  -->  00:06:54,784
my docstring is actually recorded in Python.
158

158

00:06:54,784  -->  00:06:56,790
So, if I call help on that function,
159

159

00:06:56,790  -->  00:06:58,714
that docstring's gonna help you.
160

160

00:06:58,714  -->  00:07:01,796
So, right now, we're gonna avoid docstrings,
161

161

00:07:01,796  -->  00:07:03,936
just so our code is a little cleaner,
162

162

00:07:03,936  -->  00:07:06,191
but as your functions get more and more complex,
163

163

00:07:06,191  -->  00:07:08,568
docstrings are gonna become increasingly important.
164

164

00:07:08,568  -->  00:07:12,295
So you remember what a function actually does.
165

165

00:07:12,295  -->  00:07:13,635
Okay.
166

166

00:07:13,635  -->  00:07:15,568
So let's go ahead and get rid of that.
167

167

00:07:15,568  -->  00:07:19,587
And we're gonna start off and back up a bit,
168

168

00:07:19,587  -->  00:07:23,277
and start with a really simple example of a function.
169

169

00:07:23,277  -->  00:07:25,867
So let's go ahead and make a function
170

170

00:07:25,867  -->  00:07:27,284
called say_hello,
171

171

00:07:29,185  -->  00:07:31,852
parentheses, colon, indentation.
172

172

00:07:33,901  -->  00:07:38,652
And then, all this is gonna do is this is gonna print
173

173

00:07:38,652  -->  00:07:39,485
hello.
174

174

00:07:40,680  -->  00:07:42,421
Now, if I, whoops.
175

175

00:07:42,421  -->  00:07:43,504
Now, if I run
176

176

00:07:45,048  -->  00:07:47,787
say_hello, I don't pass any arguments,
177

177

00:07:47,787  -->  00:07:49,399
because it doesn't take any.
178

178

00:07:49,399  -->  00:07:52,090
It goes ahead and says hello.
179

179

00:07:52,090  -->  00:07:53,802
So, now we're gonna create a function
180

180

00:07:53,802  -->  00:07:55,379
that greets people with their name.
181

181

00:07:55,379  -->  00:07:57,256
So what do we wanna do here?
182

182

00:07:57,256  -->  00:08:00,137
I wanna say D-E-F, space, and let's go ahead
183

183

00:08:00,137  -->  00:08:02,541
and make a function called greeting.
184

184

00:08:02,541  -->  00:08:04,527
And it's gonna take one argument,
185

185

00:08:04,527  -->  00:08:08,014
and I can actually call the arguments whatever I want,
186

186

00:08:08,014  -->  00:08:09,328
just like, if you remember, when you're
187

187

00:08:09,328  -->  00:08:10,531
iterating through a for loop, you can
188

188

00:08:10,531  -->  00:08:13,689
call those items whatever you want.
189

189

00:08:13,689  -->  00:08:17,609
I can call these arguments whatever I want.
190

190

00:08:17,609  -->  00:08:19,353
And I'm gonna say, def greeting name,
191

191

00:08:19,353  -->  00:08:23,270
and what I'm gonna do is I'm gonna print hello,
192

192

00:08:25,506  -->  00:08:28,909
space, and then I'm gonna concatenate,
193

193

00:08:28,909  -->  00:08:30,576
or add on that name.
194

194

00:08:32,786  -->  00:08:33,869
And let me...
195

195

00:08:34,751  -->  00:08:36,697
I should've used two double quotations,
196

196

00:08:36,697  -->  00:08:37,906
that's why that was being highlighted.
197

197

00:08:37,906  -->  00:08:39,910
Okay, so, what is this gonna do?
198

198

00:08:39,910  -->  00:08:41,542
It's a greeting function.
199

199

00:08:41,542  -->  00:08:45,118
I have def, space, greeting, and then it takes name
200

200

00:08:45,118  -->  00:08:49,415
as an input argument, colon, and the indented code
201

201

00:08:49,415  -->  00:08:52,928
is what's gonna run once we call that function.
202

202

00:08:52,928  -->  00:08:56,516
So it's gonna print hello, and then, plus name.
203

203

00:08:56,516  -->  00:08:58,691
So it's gonna concatenate the string
204

204

00:08:58,691  -->  00:09:01,816
that we put into the name into the whole phrase.
205

205

00:09:01,816  -->  00:09:04,346
So I'm gonna run that cell to save my function,
206

206

00:09:04,346  -->  00:09:07,346
and then I'm gonna say def greeting,
207

207

00:09:08,246  -->  00:09:11,023
and let's just put in a string, and I'm gonna put in Jose.
208

208

00:09:11,023  -->  00:09:14,585
So I should expect a hello Jose to come out.
209

209

00:09:14,585  -->  00:09:17,464
And notice I have invalid syntax.
210

210

00:09:17,464  -->  00:09:19,888
So what's going on here?
211

211

00:09:19,888  -->  00:09:23,022
Well, what's going on is I accidentally called D-E-F again.
212

212

00:09:23,022  -->  00:09:25,528
So, remember, when you're calling your function,
213

213

00:09:25,528  -->  00:09:27,184
you just call the function name.
214

214

00:09:27,184  -->  00:09:28,864
You don't actually call D-E-F.
215

215

00:09:28,864  -->  00:09:31,050
D-E-F is what you use to define
216

216

00:09:31,050  -->  00:09:32,947
your function when you're creating it.
217

217

00:09:32,947  -->  00:09:35,900
And then, later on in your code, you don't call D-E-F again.
218

218

00:09:35,900  -->  00:09:38,228
And so, that was just to throw that in there.
219

219

00:09:38,228  -->  00:09:39,775
So I'm actually just gonna call greeting,
220

220

00:09:39,775  -->  00:09:41,682
just like were using print hello.
221

221

00:09:41,682  -->  00:09:45,135
Greeting, Jose, hello Jose is the output.
222

222

00:09:45,135  -->  00:09:46,288
Okay.
223

223

00:09:46,288  -->  00:09:49,870
So now, we're gonna introduce the return statement.
224

224

00:09:49,870  -->  00:09:51,424
So let's go ahead and see an example
225

225

00:09:51,424  -->  00:09:53,304
of using a return statement, and then
226

226

00:09:53,304  -->  00:09:55,083
we'll break it down a little further.
227

227

00:09:55,083  -->  00:09:56,882
And what return is gonna allow us to do
228

228

00:09:56,882  -->  00:09:59,957
is return a result that can then be stored as a variable,
229

229

00:09:59,957  -->  00:10:03,677
or used in whatever manner the coder, or you, want.
230

230

00:10:03,677  -->  00:10:07,073
Okay, so let's head back and create
231

231

00:10:07,073  -->  00:10:08,281
an addition function again.
232

232

00:10:08,281  -->  00:10:10,448
I'm gonna call it add_num.
233

233

00:10:12,818  -->  00:10:15,892
And what it's gonna do is it's gonna take in two numbers.
234

234

00:10:15,892  -->  00:10:18,643
I'm gonna call it num1 as an argument,
235

235

00:10:18,643  -->  00:10:20,575
and num2 as an argument.
236

236

00:10:20,575  -->  00:10:23,099
Colon, click Enter, my indentation
237

237

00:10:23,099  -->  00:10:24,686
returns, or, it's automatic.
238

238

00:10:24,686  -->  00:10:28,071
And I'm gonna introduce a keyword called return.
239

239

00:10:28,071  -->  00:10:32,055
And what return does is whatever is put in front of return,
240

240

00:10:32,055  -->  00:10:35,661
that's what your function is going to output.
241

241

00:10:35,661  -->  00:10:38,406
So, remember, range outputted a list.
242

242

00:10:38,406  -->  00:10:41,489
And that's because it returns the list.
243

243

00:10:41,489  -->  00:10:44,822
So now, I'm gonna return num1 plus num2.
244

244

00:10:46,048  -->  00:10:49,154
So note, I am not printing the addition
245

245

00:10:49,154  -->  00:10:51,987
of these two numbers, I'm returning it.
246

246

00:10:51,987  -->  00:10:54,316
So now, what happens is I can say,
247

247

00:10:54,316  -->  00:10:55,399
x is equal to
248

248

00:10:58,633  -->  00:11:00,466
add_num, and let's say
249

249

00:11:01,861  -->  00:11:04,521
we'll pass in the arguments two and three.
250

250

00:11:04,521  -->  00:11:07,945
So two is that num1, three is that num2.
251

251

00:11:07,945  -->  00:11:10,862
And it's returning the sum of them.
252

252

00:11:11,785  -->  00:11:15,085
And now, I can set that sum to a variable.
253

253

00:11:15,085  -->  00:11:17,697
So let's go ahead and run this cell.
254

254

00:11:17,697  -->  00:11:22,438
And if I call x now, it's gonna be equal to that sum.
255

255

00:11:22,438  -->  00:11:26,281
I can also just say print that value,
256

256

00:11:26,281  -->  00:11:28,460
and it would work the same.
257

257

00:11:28,460  -->  00:11:30,347
Okay, excellent.
258

258

00:11:30,347  -->  00:11:32,462
So let's break it down a little further,
259

259

00:11:32,462  -->  00:11:33,992
and ask ourselves, what happens
260

260

00:11:33,992  -->  00:11:38,890
if we were to input two strings into this function?
261

261

00:11:38,890  -->  00:11:41,244
So we have our add_num, but remember,
262

262

00:11:41,244  -->  00:11:44,169
we're just specifying this with a plus sign.
263

263

00:11:44,169  -->  00:11:47,432
So if we were to put in two strings,
264

264

00:11:47,432  -->  00:11:49,682
let's say one and then two,
265

265

00:11:50,851  -->  00:11:52,750
what it's gonna return is
266

266

00:11:52,750  -->  00:11:57,502
one concatenated with two, since they're strings.
267

267

00:11:57,502  -->  00:11:58,886
Onetwo.
268

268

00:11:58,886  -->  00:12:02,052
And I can even set that equal to a variable.
269

269

00:12:02,052  -->  00:12:04,638
And then, if I print x, I get the concatenation
270

270

00:12:04,638  -->  00:12:08,172
of those two strings, basically them being stuck together.
271

271

00:12:08,172  -->  00:12:09,752
And why is that happening?
272

272

00:12:09,752  -->  00:12:13,223
It's because we don't declare variable types in Python.
273

273

00:12:13,223  -->  00:12:14,964
So, if you're familiar with other languages,
274

274

00:12:14,964  -->  00:12:17,906
a lot of times, you have to do something like
275

275

00:12:17,906  -->  00:12:20,172
call a V-A-R, and declare the variable
276

276

00:12:20,172  -->  00:12:24,044
to be some sort of integer, et cetera, et cetera.
277

277

00:12:24,044  -->  00:12:25,841
If you're learning Python as your first language,
278

278

00:12:25,841  -->  00:12:26,857
it's really nice, because you don't,
279

279

00:12:26,857  -->  00:12:28,454
actually, you don't have to worry about that.
280

280

00:12:28,454  -->  00:12:31,610
But one of the issues with that is,
281

281

00:12:31,610  -->  00:12:34,005
is, for this kind of function,
282

282

00:12:34,005  -->  00:12:36,798
we could pass in strings and integers
283

283

00:12:36,798  -->  00:12:39,048
or floating point numbers, et cetera,
284

284

00:12:39,048  -->  00:12:40,791
and still get results out, maybe even
285

285

00:12:40,791  -->  00:12:43,289
if we didn't want that to happen.
286

286

00:12:43,289  -->  00:12:45,154
So, later on, we're gonna learn about
287

287

00:12:45,154  -->  00:12:46,986
adding in checks to make sure a user
288

288

00:12:46,986  -->  00:12:50,388
puts in the correct arguments into a function.
289

289

00:12:50,388  -->  00:12:52,620
So, now we're also gonna start using break,
290

290

00:12:52,620  -->  00:12:55,337
continue, and pass statements into our code.
291

291

00:12:55,337  -->  00:12:56,768
Remember that we introduced these
292

292

00:12:56,768  -->  00:12:58,194
during the while lecture, and now
293

293

00:12:58,194  -->  00:13:00,288
they're gonna come back again.
294

294

00:13:00,288  -->  00:13:02,977
So, let's go ahead and go over a full example
295

295

00:13:02,977  -->  00:13:06,626
of creating a function that checks if a number is prime.
296

296

00:13:06,626  -->  00:13:09,312
And this is kind of a common interview exercise.
297

297

00:13:09,312  -->  00:13:12,491
So we're gonna head and go and break it down for you.
298

298

00:13:12,491  -->  00:13:15,158
So I'm going to clear this cell.
299

299

00:13:16,502  -->  00:13:18,198
I'll clear this cell as well.
300

300

00:13:18,198  -->  00:13:19,303
Clear this one as well.
301

301

00:13:19,303  -->  00:13:20,136
Okay.
302

302

00:13:21,228  -->  00:13:24,246
So, let's go ahead and start with D-E-F.
303

303

00:13:24,246  -->  00:13:26,635
That tells Python we're making a function.
304

304

00:13:26,635  -->  00:13:28,968
And I'm gonna say, is_prime.
305

305

00:13:31,896  -->  00:13:35,716
And there's my function, and I'm just gonna say pass.
306

306

00:13:35,716  -->  00:13:40,230
So right now, if I call is_prime, nothing happens.
307

307

00:13:40,230  -->  00:13:41,787
Okay, perfect.
308

308

00:13:41,787  -->  00:13:43,765
So let's start building on top of it.
309

309

00:13:43,765  -->  00:13:46,291
I want is_prime to take in a number, right,
310

310

00:13:46,291  -->  00:13:48,159
'cause we're gonna take in a number,
311

311

00:13:48,159  -->  00:13:50,126
and then check if it's prime.
312

312

00:13:50,126  -->  00:13:51,709
So, save that.
313

313

00:13:51,709  -->  00:13:54,472
And now, is_prime is going to take an error,
314

314

00:13:54,472  -->  00:13:57,551
or give out an error, since it needs an argument there.
315

315

00:13:57,551  -->  00:14:00,785
So I'm gonna go ahead and pass in a number, two,
316

316

00:14:00,785  -->  00:14:03,287
and we don't get an error, perfect.
317

317

00:14:03,287  -->  00:14:05,751
So now, let's keep building out a little more.
318

318

00:14:05,751  -->  00:14:07,896
So we'll start with that docstring,
319

319

00:14:07,896  -->  00:14:10,544
which, remember, is the triple quotes
320

320

00:14:10,544  -->  00:14:12,916
way of writing a comment.
321

321

00:14:12,916  -->  00:14:15,666
And I'm gonna say this is a quick
322

322

00:14:16,566  -->  00:14:17,764
description of this function.
323

323

00:14:17,764  -->  00:14:18,847
This function
324

324

00:14:21,451  -->  00:14:22,784
checks for prime
325

325

00:14:25,092  -->  00:14:26,186
numbers.
326

326

00:14:26,186  -->  00:14:30,143
That's one way of writing a docstring.
327

327

00:14:30,143  -->  00:14:32,805
Sometimes, some people write docstrings
328

328

00:14:32,805  -->  00:14:36,229
with kind of this sort of format.
329

329

00:14:36,229  -->  00:14:38,645
And they'll label it INPUT, OUTPUT
330

330

00:14:38,645  -->  00:14:41,635
so users know, let me zoom in a bit for you guys,
331

331

00:14:41,635  -->  00:14:45,802
so users know what's gonna be inputted and outputted.
332

332

00:14:48,422  -->  00:14:50,165
So, we know we're gonna input a number,
333

333

00:14:50,165  -->  00:14:53,248
so I'm gonna say input a number,
334

334

00:14:53,248  -->  00:14:55,415
and we are going to output
335

335

00:14:57,148  -->  00:14:58,565
a print statement
336

336

00:15:02,104  -->  00:15:03,271
whether or not
337

337

00:15:05,389  -->  00:15:07,056
the number is prime.
338

338

00:15:07,892  -->  00:15:11,579
Okay, so, let's zoom back out real quick, so you saw that.
339

339

00:15:11,579  -->  00:15:13,812
So now, we have this docstring.
340

340

00:15:13,812  -->  00:15:15,928
I'm gonna save it.
341

341

00:15:15,928  -->  00:15:18,278
Is_prime with that two runs fine,
342

342

00:15:18,278  -->  00:15:21,824
and if I click Shift + Tab, now
343

343

00:15:21,824  -->  00:15:23,794
my docstring is actually pretty clear.
344

344

00:15:23,794  -->  00:15:26,445
So, input a number, output a print statement
345

345

00:15:26,445  -->  00:15:29,659
whether or not that number is prime.
346

346

00:15:29,659  -->  00:15:31,295
Okay.
347

347

00:15:31,295  -->  00:15:34,866
So, I'm gonna dive into math a little bit,
348

348

00:15:34,866  -->  00:15:37,482
but we know a number is prime if that number
349

349

00:15:37,482  -->  00:15:41,373
is only evenly divisible by one and itself.
350

350

00:15:41,373  -->  00:15:43,047
So what we're gonna do is write a function
351

351

00:15:43,047  -->  00:15:46,750
to check all the numbers from one all the way to that number
352

352

00:15:46,750  -->  00:15:49,437
and then perform modulo checks.
353

353

00:15:49,437  -->  00:15:50,854
So I'm gonna say,
354

354

00:15:52,505  -->  00:15:53,755
for n in range,
355

355

00:15:57,103  -->  00:15:59,449
and let's start from two, since we know one
356

356

00:15:59,449  -->  00:16:01,866
will always go into a number.
357

357

00:16:03,602  -->  00:16:05,935
We can say, from two to num,
358

358

00:16:09,745  -->  00:16:11,662
if the number we put in
359

359

00:16:14,430  -->  00:16:18,014
divided by any of the numbers from two
360

360

00:16:18,014  -->  00:16:21,931
all the way up to that number is equal to zero,
361

361

00:16:24,858  -->  00:16:27,191
then we know it's not prime.
362

362

00:16:30,431  -->  00:16:33,137
And then, we're going to break out of this loop,
363

363

00:16:33,137  -->  00:16:35,745
because we don't need to check anymore.
364

364

00:16:35,745  -->  00:16:38,625
And I'm gonna head back one.
365

365

00:16:38,625  -->  00:16:43,123
So, let's say, after we go through all those numbers,
366

366

00:16:43,123  -->  00:16:45,284
none of them had a mod zero, that means,
367

367

00:16:45,284  -->  00:16:49,451
no numbers from two all the way up to the input number
368

368

00:16:50,527  -->  00:16:53,709
go evenly into that number itself.
369

369

00:16:53,709  -->  00:16:55,792
Then I'm gonna say, else,
370

370

00:16:57,382  -->  00:17:00,632
so if mod number zero occurred, whoops,
371

371

00:17:02,286  -->  00:17:03,786
I'm going to print
372

372

00:17:06,101  -->  00:17:07,768
the number is prime.
373

373

00:17:12,250  -->  00:17:14,281
Okay, now, let's see if this works.
374

374

00:17:14,281  -->  00:17:16,027
Let's go ahead and input a number
375

375

00:17:16,027  -->  00:17:18,494
we know is prime, 13, okay.
376

376

00:17:18,494  -->  00:17:22,166
And now let's input a number that we know is not prime, 12.
377

377

00:17:22,166  -->  00:17:24,876
Perfect, so we know this is working.
378

378

00:17:24,876  -->  00:17:29,043
So, there's other ways to do this exact same function.
379

379

00:17:30,017  -->  00:17:32,927
And there's actually better methods of checking for primes.
380

380

00:17:32,927  -->  00:17:33,796
And I'm gonna kind of leave it
381

381

00:17:33,796  -->  00:17:37,232
to you as a homework assignment to go ahead and try to use
382

382

00:17:37,232  -->  00:17:39,899
either the math module to check,
383

383

00:17:41,074  -->  00:17:43,741
or use your own Google abilities
384

384

00:17:45,016  -->  00:17:47,453
to check out what's a better method
385

385

00:17:47,453  -->  00:17:49,441
of checking for prime numbers.
386

386

00:17:49,441  -->  00:17:52,098
And, just to give you a quick hint,
387

387

00:17:52,098  -->  00:17:54,661
if you scroll down to the bottom of this Jupyter Notebook,
388

388

00:17:54,661  -->  00:17:57,770
the better version is the example for you there.
389

389

00:17:57,770  -->  00:17:59,176
But let's go ahead and break down
390

390

00:17:59,176  -->  00:18:01,745
exactly what happened here, so we understand
391

391

00:18:01,745  -->  00:18:04,464
all these various pieces that kind of
392

392

00:18:04,464  -->  00:18:08,447
really build out your first true function, that brings in
393

393

00:18:08,447  -->  00:18:11,194
a lot of what we've learned in the past together.
394

394

00:18:11,194  -->  00:18:13,767
So, let's break this down completely.
395

395

00:18:13,767  -->  00:18:17,122
So we're checking if a number is prime.
396

396

00:18:17,122  -->  00:18:20,176
So I'm making a function using the D-E-F
397

397

00:18:20,176  -->  00:18:22,671
to tell Python I'm about to make a function.
398

398

00:18:22,671  -->  00:18:25,889
I'm gonna say, is_prime is the name of my function,
399

399

00:18:25,889  -->  00:18:30,593
parenthesis, num, that's the argument it takes in, colon.
400

400

00:18:30,593  -->  00:18:32,770
And then I have my docstring, which is basically
401

401

00:18:32,770  -->  00:18:35,698
a description of what's going on in the function.
402

402

00:18:35,698  -->  00:18:40,253
After that, notice all the code is indented at least one,
403

403

00:18:40,253  -->  00:18:41,882
so it lines up with that name.
404

404

00:18:41,882  -->  00:18:43,510
That means all this code is going
405

405

00:18:43,510  -->  00:18:46,343
to run when I call that function.
406

406

00:18:46,343  -->  00:18:50,036
And now, what I'm doing is I'm going for
407

407

00:18:50,036  -->  00:18:52,548
every n, which is gonna be a number,
408

408

00:18:52,548  -->  00:18:57,540
from range two to num, and remember, since I'm in Python 2,
409

409

00:18:57,540  -->  00:19:00,853
I could've also done xrange to not create a list.
410

410

00:19:00,853  -->  00:19:03,119
If you're using Python 3, you can only use range,
411

411

00:19:03,119  -->  00:19:05,778
which is gonna be the same thing as xrange in Python 2.
412

412

00:19:05,778  -->  00:19:08,067
But that's a small detail, don't worry about it.
413

413

00:19:08,067  -->  00:19:12,234
So I'm saying for n in range from two to that num.
414

414

00:19:13,362  -->  00:19:14,717
So, what is that doing?
415

415

00:19:14,717  -->  00:19:18,142
If I were to just to check it outside of the function,
416

416

00:19:18,142  -->  00:19:20,841
let's say, two to 12, it's creating
417

417

00:19:20,841  -->  00:19:25,008
a list of all the integers from two up to that num.
418

418

00:19:26,683  -->  00:19:28,563
Actually, up to but not including that num,
419

419

00:19:28,563  -->  00:19:31,205
which is important, since we're checking for primes.
420

420

00:19:31,205  -->  00:19:34,471
And then, I'm gonna say, if the number itself,
421

421

00:19:34,471  -->  00:19:38,638
so, in this case, if 12, divided by any of these numbers
422

422

00:19:39,568  -->  00:19:41,799
leaves you with a remainder of zero,
423

423

00:19:41,799  -->  00:19:44,617
then I know it's not prime, right?
424

424

00:19:44,617  -->  00:19:47,504
So, if 12 is divisible by three,
425

425

00:19:47,504  -->  00:19:51,592
evenly, with no remainder, then I know it's not prime.
426

426

00:19:51,592  -->  00:19:53,587
And then I'm gonna print Not Prime,
427

427

00:19:53,587  -->  00:19:55,738
and I'm going to break, which is gonna
428

428

00:19:55,738  -->  00:20:00,493
break out of this for loop, and end my calculations.
429

429

00:20:00,493  -->  00:20:03,171
Else, if that never occurs, and then I know
430

430

00:20:03,171  -->  00:20:04,545
the number is prime, and I'm gonna
431

431

00:20:04,545  -->  00:20:06,839
print the number is prime.
432

432

00:20:06,839  -->  00:20:07,944
Okay.
433

433

00:20:07,944  -->  00:20:11,110
So, that's our first lesson in functions.
434

434

00:20:11,110  -->  00:20:13,005
And functions is gonna be something
435

435

00:20:13,005  -->  00:20:15,495
we come back to a lot during our code.
436

436

00:20:15,495  -->  00:20:16,704
And it's gonna be one of the basic
437

437

00:20:16,704  -->  00:20:18,162
building blocks of our code.
438

438

00:20:18,162  -->  00:20:20,902
So you'll see it over again and again.
439

439

00:20:20,902  -->  00:20:22,487
So, go ahead and check out the reading
440

440

00:20:22,487  -->  00:20:24,085
and this Jupyter Notebook, and make sure
441

441

00:20:24,085  -->  00:20:26,869
you fully understand at least how to read
442

442

00:20:26,869  -->  00:20:31,321
and understand how a function is built out in Python.
443

443

00:20:31,321  -->  00:20:34,562
Okay, so, thanks for watching this lecture,
444

444

00:20:34,562  -->  00:20:37,312
and I'll see you at the next one.
