WEBVTT
1
1

00:00:01.774  -->  00:00:02.791
<v Instructor>Hello everyone,</v>
2

2

00:00:02.791  -->  00:00:05.178
and welcome to the reduce function lecture.
3

3

00:00:05.178  -->  00:00:07.976
So reduce is another built-in function to Python
4

4

00:00:07.976  -->  00:00:10.146
that you're gonna find is also really useful
5

5

00:00:10.146  -->  00:00:12.450
in conjunction with lambda expressions.
6

6

00:00:12.450  -->  00:00:14.495
And you'll notice that the format is really similar
7

7

00:00:14.495  -->  00:00:17.051
to map , except what it actually does
8

8

00:00:17.051  -->  00:00:19.083
is quite a bit different.
9

9

00:00:19.083  -->  00:00:20.737
So, a lot of times students have difficulty
10

10

00:00:20.737  -->  00:00:22.808
understanding reduce , so go ahead and make sure you read
11

11

00:00:22.808  -->  00:00:25.291
the Jupyter Notebook before coming to this lecture,
12

12

00:00:25.291  -->  00:00:28.864
where I'll break it down for you.
13

13

00:00:28.864  -->  00:00:30.867
So what does the function actually look like?
14

14

00:00:30.867  -->  00:00:33.902
The function looks like this, it has a reduce statement,
15

15

00:00:33.902  -->  00:00:35.887
and then just like map , it takes in a function
16

16

00:00:35.887  -->  00:00:37.214
and a sequence.
17

17

00:00:37.214  -->  00:00:38.994
But instead of mapping the function
18

18

00:00:38.994  -->  00:00:41.052
to every single element in that sequence,
19

19

00:00:41.052  -->  00:00:44.323
it's gonna continually apply that function to the sequence.
20

20

00:00:44.323  -->  00:00:45.866
So what does that actually look like?
21

21

00:00:45.866  -->  00:00:48.540
It's gonna end up returning a single value.
22

22

00:00:48.540  -->  00:00:51.266
So let's go ahead and break down all the steps here.
23

23

00:00:51.266  -->  00:00:52.381
And I know this is a lot of text,
24

24

00:00:52.381  -->  00:00:55.038
but we'll go through it slowly.
25

25

00:00:55.038  -->  00:00:56.412
So if your sequence looks like this,
26

26

00:00:56.412  -->  00:00:59.051
let's say have a list, where it's s1, s2, s3,
27

27

00:00:59.051  -->  00:01:00.975
all the way to some sn,
28

28

00:01:00.975  -->  00:01:02.719
then calling the reduce
29

29

00:01:02.719  -->  00:01:04.430
works something like this:
30

30

00:01:04.430  -->  00:01:06.980
So you grab the first two elements of your sequence,
31

31

00:01:06.980  -->  00:01:09.946
s1 and s2, and then you apply the function.
32

32

00:01:09.946  -->  00:01:13.294
So it would look like func .
33

33

00:01:13.294  -->  00:01:16.605
Then you have that result, which is just some single number
34

34

00:01:16.605  -->  00:01:19.594
or single value, and you have now a list
35

35

00:01:19.594  -->  00:01:23.463
that looks like this: function, that result of s1 s2, s3,
36

36

00:01:23.463  -->  00:01:25.201
so on, so on, so on.
37

37

00:01:25.201  -->  00:01:27.586
And so the next step in the function will be to
38

38

00:01:27.586  -->  00:01:29.971
take your previous result, whatever the result of
39

39

00:01:29.971  -->  00:01:33.160
s1 s2 function would be, and then take that and apply it
40

40

00:01:33.160  -->  00:01:36.077
to function of that answer with s3.
41

41

00:01:38.899  -->  00:01:42.068
So the list keeps spilling in and reducing the functions
42

42

00:01:42.068  -->  00:01:43.687
that build into each other.
43

43

00:01:43.687  -->  00:01:46.979
And it keeps continuing like that until one element is left.
44

44

00:01:46.979  -->  00:01:49.307
So, that's a little hard to understand in words,
45

45

00:01:49.307  -->  00:01:52.356
let's go ahead and see an example.
46

46

00:01:52.356  -->  00:01:56.273
So I have my list, lst equal to 47, 11, 42, 13.
47

47

00:01:58.173  -->  00:02:00.675
And then I create a lambda expression that
48

48

00:02:00.675  -->  00:02:04.323
adds numbers together, so it takes in two inputs, x and y,
49

49

00:02:04.323  -->  00:02:07.306
and then returns a single value, x+y.
50

50

00:02:07.306  -->  00:02:10.285
And here at reduce, I'm inputting this lambda expression,
51

51

00:02:10.285  -->  00:02:14.477
that function, and then I'm also passing this list.
52

52

00:02:14.477  -->  00:02:16.304
And so what is reduce doing here?
53

53

00:02:16.304  -->  00:02:18.754
Well, it takes the first two elements, just like s1 s2
54

54

00:02:18.754  -->  00:02:22.448
in that last example we saw, 47 and 11,
55

55

00:02:22.448  -->  00:02:25.012
and it applies that function to it,
56

56

00:02:25.012  -->  00:02:29.272
and then you output 58 here, so 47+11 is 58.
57

57

00:02:29.272  -->  00:02:32.599
So now, it keeps going on throughout the list,
58

58

00:02:32.599  -->  00:02:35.543
and then the next sequence is gonna be that result
59

59

00:02:35.543  -->  00:02:39.739
passed to the function along with the third element, 42.
60

60

00:02:39.739  -->  00:02:43.067
So it's gonna do 42+58, which is 100.
61

61

00:02:43.067  -->  00:02:45.333
Then it's gonna take that result of these three,
62

62

00:02:45.333  -->  00:02:47.952
and pass it along to this lambda expression
63

63

00:02:47.952  -->  00:02:50.003
with the fourth value, 13.
64

64

00:02:50.003  -->  00:02:52.480
So 100+13 is 113.
65

65

00:02:52.480  -->  00:02:55.888
And then your output is just 113.
66

66

00:02:55.888  -->  00:02:58.210
So make sure you really understand what's going on here.
67

67

00:02:58.210  -->  00:03:00.450
You keep reducing the sequence
68

68

00:03:00.450  -->  00:03:04.052
until a single final value is obtained.
69

69

00:03:04.052  -->  00:03:07.417
Let's go ahead and look at another example
70

70

00:03:07.417  -->  00:03:10.167
by hopping over to the live code.
71

71

00:03:14.888  -->  00:03:17.749
So we're at our live code, and what we're gonna do is
72

72

00:03:17.749  -->  00:03:19.901
create a reduce function that finds
73

73

00:03:19.901  -->  00:03:22.747
the maximum of the sequence.
74

74

00:03:22.747  -->  00:03:24.997
So let's say I have a list,
75

75

00:03:26.060  -->  00:03:27.075
and let's just put in
76

76

00:03:27.075  -->  00:03:29.408
some random numbers in here.
77

77

00:03:33.109  -->  00:03:33.942
Two, okay.
78

78

00:03:35.670  -->  00:03:38.169
So I have this list with some random numbers in it.
79

79

00:03:38.169  -->  00:03:41.525
What I wanna do is find the maximum of the sequence,
80

80

00:03:41.525  -->  00:03:42.983
using reduce .
81

81

00:03:42.983  -->  00:03:47.606
So I could just use max of the list,
82

82

00:03:47.606  -->  00:03:48.949
and that would return the max of the list,
83

83

00:03:48.949  -->  00:03:50.536
that's another built-in function,
84

84

00:03:50.536  -->  00:03:51.646
but in this case we actually want to
85

85

00:03:51.646  -->  00:03:53.551
build that ourselves using reduce .
86

86

00:03:53.551  -->  00:03:56.162
So how can we do that?
87

87

00:03:56.162  -->  00:03:59.946
Well, I'm going to create an expression called max_find,
88

88

00:03:59.946  -->  00:04:01.319
and I'm actually going to make it
89

89

00:04:01.319  -->  00:04:03.860
as a lambda expression, not a function.
90

90

00:04:03.860  -->  00:04:07.360
It's gonna take in two arguments, a and b.
91

91

00:04:08.734  -->  00:04:10.651
And it's gonna return a
92

92

00:04:11.978  -->  00:04:13.895
if a is greater than b,
93

93

00:04:17.745  -->  00:04:18.995
else returns b.
94

94

00:04:21.372  -->  00:04:22.936
So that's what max_find looks like.
95

95

00:04:22.936  -->  00:04:24.453
Let's go ahead and make sure we really understand
96

96

00:04:24.453  -->  00:04:27.691
what's going on with that lambda expression by
97

97

00:04:27.691  -->  00:04:30.763
rewriting it as a normal function
98

98

00:04:30.763  -->  00:04:33.518
just so we really make sure what's going on here.
99

99

00:04:33.518  -->  00:04:36.578
So as a normal function, max_find would look like this,
100

100

00:04:36.578  -->  00:04:39.328
I take in two arguments, a and b,
101

101

00:04:40.626  -->  00:04:43.793
and I will say if a is greater than b,
102

102

00:04:48.955  -->  00:04:50.955
return a, else return b.
103

103

00:04:54.492  -->  00:04:55.865
So that's what's going on here,
104

104

00:04:55.865  -->  00:05:00.252
and let's go ahead and make sure it works; max_find,
105

105

00:05:00.252  -->  00:05:03.752
say 12 versus 100, so it returns 100 here.
106

106

00:05:04.852  -->  00:05:06.760
So the reason I am writing it as a lambda expression
107

107

00:05:06.760  -->  00:05:08.667
is just to have it in your mind that
108

108

00:05:08.667  -->  00:05:11.160
lambda expressions are used a lot with map , reduce ,
109

109

00:05:11.160  -->  00:05:14.396
and filter .
110

110

00:05:14.396  -->  00:05:18.396
Remember I have my list of these random numbers,
111

111

00:05:19.421  -->  00:05:21.921
and what max_find is gonna do,
112

112

00:05:23.851  -->  00:05:25.101
if I reduce it,
113

113

00:05:27.904  -->  00:05:29.354
is find the maximum of that list.
114

114

00:05:29.354  -->  00:05:32.264
So max_find, and my list,
115

115

00:05:32.264  -->  00:05:33.662
and notice it found the maximum.
116

116

00:05:33.662  -->  00:05:35.115
So what is it actually doing?
117

117

00:05:35.115  -->  00:05:38.197
It's taking these two numbers first and comparing them.
118

118

00:05:38.197  -->  00:05:42.301
It's gonna say, "which one's greater, 34 or 23? Well, 34."
119

119

00:05:42.301  -->  00:05:44.653
Then it's going to compare 34 and 24.
120

120

00:05:44.653  -->  00:05:47.612
34 still wins, and it's gonna keep doing that
121

121

00:05:47.612  -->  00:05:50.238
until it finally reaches the max number,
122

122

00:05:50.238  -->  00:05:54.081
and then it's gonna say, "Okay, 2333 is the max number,
123

123

00:05:54.081  -->  00:05:57.397
"so return that, compare that to 2, it's still the max,
124

124

00:05:57.397  -->  00:05:59.534
"compare that to 11, it's still the max,
125

125

00:05:59.534  -->  00:06:02.284
"well then finally, return 2333."
126

126

00:06:03.177  -->  00:06:06.797
And that's where we can find the max using reduce .
127

127

00:06:06.797  -->  00:06:11.375
So, just to reiterate, what reduce is doing
128

128

00:06:11.375  -->  00:06:15.091
is it's applying this function continuously
129

129

00:06:15.091  -->  00:06:16.718
throughout your sequence.
130

130

00:06:16.718  -->  00:06:18.626
And then it returns a single value,
131

131

00:06:18.626  -->  00:06:23.215
as it keeps reducing the sequence further and further.
132

132

00:06:23.215  -->  00:06:25.633
So go ahead and make sure you understand fully
133

133

00:06:25.633  -->  00:06:27.793
what this statement is saying here,
134

134

00:06:27.793  -->  00:06:31.515
how it's just reducing the function continually--
135

135

00:06:31.515  -->  00:06:33.672
excuse me, the sequence continually
136

136

00:06:33.672  -->  00:06:37.569
using whatever function you put into reduce .
137

137

00:06:37.569  -->  00:06:39.208
So that's it for this lecture,
138

138

00:06:39.208  -->  00:06:41.256
you can go ahead and check out more examples
139

139

00:06:41.256  -->  00:06:43.758
by just googling 'Python plus reduce',
140

140

00:06:43.758  -->  00:06:47.901
and there's more examples in the documentation of Python.
141

141

00:06:47.901  -->  00:06:52.068
Thanks everyone, and I'll see you at the next lecture.
