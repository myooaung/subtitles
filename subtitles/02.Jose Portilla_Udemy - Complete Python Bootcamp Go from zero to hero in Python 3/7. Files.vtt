WEBVTT
1
1

00:00:01.351  -->  00:00:02.300
<v Instructor>Hello, everyone.</v>
2

2

00:00:02.300  -->  00:00:04.629
And welcome to the files lecture.
3

3

00:00:04.629  -->  00:00:06.258
This is gonna be a pretty brief lecture.
4

4

00:00:06.258  -->  00:00:08.101
We're just gonna go over how to interact
5

5

00:00:08.101  -->  00:00:10.123
with external files in your computer.
6

6

00:00:10.123  -->  00:00:11.033
And in this case, we're gonna start
7

7

00:00:11.033  -->  00:00:14.953
with the very basics, the dot T-X-T, text files.
8

8

00:00:14.953  -->  00:00:17.161
So, in order to deal with other types of files,
9

9

00:00:17.161  -->  00:00:19.762
such is audio files or Excel documents,
10

10

00:00:19.762  -->  00:00:21.842
you'll most likely have to, either,
11

11

00:00:21.842  -->  00:00:24.342
download or import from its particular
12

12

00:00:24.342  -->  00:00:26.509
library or module for Python.
13

13

00:00:26.509  -->  00:00:30.276
And we discuss modules later on in the course.
14

14

00:00:30.276  -->  00:00:33.155
Okay, so, here's the Jupyter notebook
15

15

00:00:33.155  -->  00:00:34.513
that corresponds with this lecture.
16

16

00:00:34.513  -->  00:00:36.041
You can go ahead a look through it.
17

17

00:00:36.041  -->  00:00:36.884
But I'm just gonna go ahead
18

18

00:00:36.884  -->  00:00:39.727
and jump straight into the live coding.
19

19

00:00:39.727  -->  00:00:42.192
So, in order to work files, we need one.
20

20

00:00:42.192  -->  00:00:44.453
So, what I've gone ahead and done
21

21

00:00:44.453  -->  00:00:46.370
is I've created a file,
22

22

00:00:47.649  -->  00:00:50.700
a dot text file, called test
23

23

00:00:50.700  -->  00:00:52.033
.txt.
24

24

00:00:52.033  -->  00:00:53.890
And I've saved it to the same directory
25

25

00:00:53.890  -->  00:00:55.728
where my Juptyer notebooks are.
26

26

00:00:55.728  -->  00:00:58.417
So, if I say P-W-D,
27

27

00:00:58.417  -->  00:01:00.765
which stands for prints working directory,
28

28

00:01:00.765  -->  00:01:02.546
and run that cell,
29

29

00:01:02.546  -->  00:01:04.260
it gives you the location
30

30

00:01:04.260  -->  00:01:07.427
where your Jupyter notebooks are.
31

31

00:01:07.427  -->  00:01:10.977
So, go ahead and make a .txt file,
32

32

00:01:10.977  -->  00:01:12.539
and just print a simple line in it.
33

33

00:01:12.539  -->  00:01:15.162
So, if you're on Windows, you can use Notepad,
34

34

00:01:15.162  -->  00:01:16.417
which is built in.
35

35

00:01:16.417  -->  00:01:17.811
Just say anything here.
36

36

00:01:17.811  -->  00:01:19.061
This is a line.
37

37

00:01:20.350  -->  00:01:23.860
And then go ahead and save that as whatever name you want,
38

38

00:01:23.860  -->  00:01:27.193
in this case, I've saved it as test.txt.
39

39

00:01:28.293  -->  00:01:32.460
And save it into the directory, where the pwd tells you to.
40

40

00:01:33.897  -->  00:01:35.188
So, moving along.
41

41

00:01:35.188  -->  00:01:36.586
How do I open that file?
42

42

00:01:36.586  -->  00:01:39.420
So, I'm gonna create a variable, just called f.
43

43

00:01:39.420  -->  00:01:41.463
I'm gonna say that equals,
44

44

00:01:41.463  -->  00:01:43.699
and this is where the open function comes into play.
45

45

00:01:43.699  -->  00:01:45.990
So, we can open a file with the open function.
46

46

00:01:45.990  -->  00:01:48.123
And I'm gonna say
47

47

00:01:48.123  -->  00:01:48.956
test.txt.
48

48

00:01:52.074  -->  00:01:53.577
And I've opened the file.
49

49

00:01:53.577  -->  00:01:56.271
And now, if I wanna read the contents of the file,
50

50

00:01:56.271  -->  00:01:59.811
I can call the read method on that file.
51

51

00:01:59.811  -->  00:02:01.354
And I wrote, "This is a test line."
52

52

00:02:01.354  -->  00:02:02.212
Great.
53

53

00:02:02.212  -->  00:02:04.081
So, something interesting that happens,
54

54

00:02:04.081  -->  00:02:07.081
is if I try to read that file again,
55

55

00:02:07.922  -->  00:02:09.512
you'll notice nothing pops out.
56

56

00:02:09.512  -->  00:02:11.541
So, why is this happening?
57

57

00:02:11.541  -->  00:02:12.885
So, this reason this happens is
58

58

00:02:12.885  -->  00:02:15.569
'cause you can imagine that you have a cursor,
59

59

00:02:15.569  -->  00:02:19.032
kind of like the one I have blinking in this cell.
60

60

00:02:19.032  -->  00:02:21.812
So, remember, we've already read the file once.
61

61

00:02:21.812  -->  00:02:24.872
So, Python, in a sense, has a cursor
62

62

00:02:24.872  -->  00:02:26.654
at the very end of the file.
63

63

00:02:26.654  -->  00:02:29.834
So, you'll have to reset that cursor to the beginning.
64

64

00:02:29.834  -->  00:02:31.348
And the way you can do that
65

65

00:02:31.348  -->  00:02:33.909
is by using the seek method.
66

66

00:02:33.909  -->  00:02:36.094
And passed the argument in zero.
67

67

00:02:36.094  -->  00:02:38.112
So, that will send that cursor back
68

68

00:02:38.112  -->  00:02:40.391
to the beginning of the file.
69

69

00:02:40.391  -->  00:02:42.060
And if I say read again, now,
70

70

00:02:42.060  -->  00:02:44.294
it says, "This is a test line."
71

71

00:02:44.294  -->  00:02:46.443
So, one more time, I can press seek,
72

72

00:02:46.443  -->  00:02:49.223
to return to that beginning of the file.
73

73

00:02:49.223  -->  00:02:51.482
Another method you can do,
74

74

00:02:51.482  -->  00:02:55.649
to read the lines of a file, is the read lines method.
75

75

00:02:57.444  -->  00:02:58.625
And what that does
76

76

00:02:58.625  -->  00:03:00.609
is it goes through every line in the file
77

77

00:03:00.609  -->  00:03:02.864
and then treats it as an element
78

78

00:03:02.864  -->  00:03:04.323
and returns a list to you,
79

79

00:03:04.323  -->  00:03:06.891
with each line as a different element,
80

80

00:03:06.891  -->  00:03:09.973
a giant string in that list.
81

81

00:03:09.973  -->  00:03:10.973
Okay, great.
82

82

00:03:12.619  -->  00:03:16.722
So, I'm gonna go quickly, kind of a sneak peek,
83

83

00:03:16.722  -->  00:03:19.519
at iterating through a file.
84

84

00:03:19.519  -->  00:03:22.787
So, we've gone over magic functions,
85

85

00:03:22.787  -->  00:03:25.408
when we were introducing the Jupyter notebooks.
86

86

00:03:25.408  -->  00:03:27.190
And in this case, we're gonna use a magic function,
87

87

00:03:27.190  -->  00:03:29.023
called the write file.
88

88

00:03:31.151  -->  00:03:33.312
And what this is gonna allow us to do is,
89

89

00:03:33.312  -->  00:03:36.461
instead of having to open the notepad
90

90

00:03:36.461  -->  00:03:38.871

or any other sub line, text,
91

91

00:03:38.871  -->  00:03:40.620
or whatever you happen to choose,
92

92

00:03:40.620  -->  00:03:41.787
I can actually
93

93

00:03:43.418  -->  00:03:47.666
create a text file straight from the iPython cell.
94

94

00:03:47.666  -->  00:03:49.833
So, I can say, first line.
95

95

00:03:52.365  -->  00:03:53.682
Second line.
96

96

00:03:53.682  -->  00:03:55.938
So, what this cell has right now,
97

97

00:03:55.938  -->  00:03:58.043
is two percentage signs to let you know
98

98

00:03:58.043  -->  00:04:01.927
that this write file statement is a magic function.
99

99

00:04:01.927  -->  00:04:04.309
So, this only works in Jupyter notebooks.
100

100

00:04:04.309  -->  00:04:06.076
And the space and then whatever name
101

101

00:04:06.076  -->  00:04:07.446
I want that text file to have.
102

102

00:04:07.446  -->  00:04:10.193
In this case, it's gonna be new.txt.
103

103

00:04:10.193  -->  00:04:11.537
And then, I have two lines in my file.
104

104

00:04:11.537  -->  00:04:13.458
First line and second line.
105

105

00:04:13.458  -->  00:04:16.410
So, if I go ahead and run that cell,
106

106

00:04:16.410  -->  00:04:19.871
Jupyter notebooks has told me it's writing new.txt.
107

107

00:04:19.871  -->  00:04:21.063
Perfect.
108

108

00:04:21.063  -->  00:04:24.268
So, what if I want to iterate
109

109

00:04:24.268  -->  00:04:26.185
through this text file?
110

110

00:04:27.403  -->  00:04:28.469
Here's where I'm gonna give you
111

111

00:04:28.469  -->  00:04:31.477
a sneak peek at a for loop.
112

112

00:04:31.477  -->  00:04:33.560
So, what I can say is for
113

113

00:04:34.647  -->  00:04:35.480
line in
114

114

00:04:36.935  -->  00:04:39.893
and I'm gonna open that file.
115

115

00:04:39.893  -->  00:04:41.893
Which is called new.txt.
116

116

00:04:43.066  -->  00:04:44.954
Remember I pass on the entire file name,
117

117

00:04:44.954  -->  00:04:47.584
including the extension as a string.
118

118

00:04:47.584  -->  00:04:50.704
Colon, notice how there's a white space
119

119

00:04:50.704  -->  00:04:53.028
and indent here, that's gonna be important.
120

120

00:04:53.028  -->  00:04:53.977
Don't worry if you don't understand
121

121

00:04:53.977  -->  00:04:54.831
what's going on now.
122

122

00:04:54.831  -->  00:04:57.309
We go over for loops in much more detail in the future.
123

123

00:04:57.309  -->  00:04:59.476
This is kind of just a sneak peek.
124

124

00:04:59.476  -->  00:05:01.148
And then I can say prints line.
125

125

00:05:01.148  -->  00:05:04.159
So, the logic here is I'm saying for every line,
126

126

00:05:04.159  -->  00:05:07.459
in this object, this file object that I'm opening here,
127

127

00:05:07.459  -->  00:05:09.221
I want you to go ahead and print that line.
128

128

00:05:09.221  -->  00:05:11.083
So, let's see if this works.
129

129

00:05:11.083  -->  00:05:13.271
Perfect, so just as we expected,
130

130

00:05:13.271  -->  00:05:17.271
it's printed the first line and the second line.
131

131

00:05:18.524  -->  00:05:21.392
A couple things to note here,
132

132

00:05:21.392  -->  00:05:23.393
this is to get you to start thinking
133

133

00:05:23.393  -->  00:05:24.912
about different statements and for loops
134

134

00:05:24.912  -->  00:05:26.371
and stuff like that is,
135

135

00:05:26.371  -->  00:05:29.145
I could've called this anything.
136

136

00:05:29.145  -->  00:05:30.728
I could've said for
137

137

00:05:31.795  -->  00:05:32.962
words in open,
138

138

00:05:34.547  -->  00:05:35.784
print words.
139

139

00:05:35.784  -->  00:05:38.750
It still would've outputted the exact same thing,
140

140

00:05:38.750  -->  00:05:40.054
as I have here.
141

141

00:05:40.054  -->  00:05:42.546
So, you'll be able to have flexibility in
142

142

00:05:42.546  -->  00:05:47.511
what you call each of those elements in those iterables.
143

143

00:05:47.511  -->  00:05:51.102
Something, also, that's important to note is
144

144

00:05:51.102  -->  00:05:52.019
read lines,
145

145

00:05:53.045  -->  00:05:56.548
if you have a very large text file, could have problems.
146

146

00:05:56.548  -->  00:05:58.518
Because the Python is right now,
147

147

00:05:58.518  -->  00:06:01.126
storing this list, entirely in memory.
148

148

00:06:01.126  -->  00:06:02.429
If you call read lines.
149

149

00:06:02.429  -->  00:06:05.327
So, if you have an entire series of novels
150

150

00:06:05.327  -->  00:06:07.403
or something and you call read lines on it,
151

151

00:06:07.403  -->  00:06:08.734
that might be problematic.
152

152

00:06:08.734  -->  00:06:12.143
So, make sure you call just .read on the file,
153

153

00:06:12.143  -->  00:06:15.229
if you have a very, very large text file.
154

154

00:06:15.229  -->  00:06:18.146
Okay, so, that's actually about it.
155

155

00:06:19.152  -->  00:06:23.526
Remember we just briefly went over how to open .txt files
156

156

00:06:23.526  -->  00:06:26.467
and how to read the elements in them.
157

157

00:06:26.467  -->  00:06:28.463
If you wanna go over some more details
158

158

00:06:28.463  -->  00:06:29.656
that are in the Jupyter notebook,
159

159

00:06:29.656  -->  00:06:32.673
such as, reading and writing to a file, we go over that.
160

160

00:06:32.673  -->  00:06:34.512
You can go ahead and check that out.
161

161

00:06:34.512  -->  00:06:36.090
Reason we're not gonna go over that right now,
162

162

00:06:36.090  -->  00:06:37.623
is that we're not really gonna use this
163

163

00:06:37.623  -->  00:06:40.106
until much later on in the course.
164

164

00:06:40.106  -->  00:06:42.024
So, this is just a brief introduction
165

165

00:06:42.024  -->  00:06:44.851
and a little sneak peek into for loops.
166

166

00:06:44.851  -->  00:06:47.934
Okay, so, that's it for this lecture.
167

167

00:06:48.943  -->  00:06:50.898
Up next, we're gonna go through
168

168

00:06:50.898  -->  00:06:54.353
learning how sets and bullions work in Python.
169

169

00:06:54.353  -->  00:06:56.913
And that will be the last lecture in this section.
170

170

00:06:56.913  -->  00:06:59.122
And then we'll wrap it up with an assessment test.
171

171

00:06:59.122  -->  00:07:01.372
Okay, great job, everyone.
