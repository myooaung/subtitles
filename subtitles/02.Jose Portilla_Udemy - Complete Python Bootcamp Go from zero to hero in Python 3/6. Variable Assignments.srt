1
00:00:05,550 --> 00:00:06,540
Selamat datang kembali semuanya.

2
00:00:06,630 --> 00:00:10,990
Dalam kuliah ini kita akan membahas tugas variabel.

3
00:00:11,030 --> 00:00:12,750
Sekarang kami hanya melihat cara bekerja dengan angka.

4
00:00:12,770 --> 00:00:14,860
Tetapi apa yang sebenarnya mewakili angka-angka ini.

5
00:00:14,870 --> 00:00:16,780
Kami memiliki bilangan bulat dan angka floating point.

6
00:00:16,800 --> 00:00:19,720
Tetapi Anda sebenarnya memiliki nama variabel yang ditugaskan untuk mereka.

7
00:00:19,880 --> 00:00:24,650
Jadi alangkah baiknya jika kita dapat menetapkan tipe data tertentu ini nama variabel untuk dengan mudah mereferensikannya

8
00:00:24,650 --> 00:00:25,900
nanti dalam kode kita.

9
00:00:25,940 --> 00:00:33,110
Misalnya saya bisa mengatakan nama variabel anjing garis bawah saya sama dengan dua karena saya punya dua anjing.

10
00:00:33,190 --> 00:00:36,360
Sekarang ada beberapa aturan untuk memilih nama variabel dengan Python.

11
00:00:36,610 --> 00:00:39,460
Dan aturan ini adalah bahwa nama tidak dapat dimulai untuk suatu angka.

12
00:00:39,460 --> 00:00:44,110
Juga tidak boleh ada spasi dalam nama variabel sehingga Anda harus menggunakan garis bawah sebagai gantinya.

13
00:00:44,110 --> 00:00:46,590
Dan Anda juga dapat memiliki simbol-simbol ini dalam sebuah nama.

14
00:00:46,630 --> 00:00:51,220
Dan jika Anda benar-benar lupa daftar simbol ini jika Anda mengetik salah satu dari simbol-simbol ini dalam nama

15
00:00:51,220 --> 00:00:54,100
variabel Python akan dengan cepat mengeluh dan Anda akan memiliki kesalahan.

16
00:00:54,100 --> 00:00:55,990
Jadi Anda tidak perlu khawatir untuk menghafal semua ini.

17
00:00:55,990 --> 00:00:59,950
Anda akan mendapatkan udara saat Anda mengetik beberapa aturan tentang nama variabel.

18
00:00:59,950 --> 00:01:05,130
Ini umumnya dianggap praktik terbaik menurut pep delapan bahwa nama huruf kecil.

19
00:01:05,140 --> 00:01:08,350
Sekarang ada situasi ketika Anda menjadi programmer yang lebih maju.

20
00:01:08,470 --> 00:01:12,850
Di mana Anda ingin memiliki semacam nama variabel global dalam semua huruf besar yang digunakan untuk menulis

21
00:01:12,850 --> 00:01:13,390
kode Anda.

22
00:01:13,570 --> 00:01:19,000
Tetapi saat ini secara umum ingin mempertahankan nama huruf kecil dan kami juga ingin menghindari kata-kata

23
00:01:19,000 --> 00:01:24,460
yang memiliki arti khusus dalam Python dan ini dibangun dalam kata kunci seperti daftar atau untuk string.

24
00:01:24,460 --> 00:01:28,600
Anda mungkin bertanya-tanya dengan baik bagaimana sih saya seharusnya tahu apa kata kunci yang dibangun khusus.

25
00:01:28,600 --> 00:01:33,400
Untungnya setiap lingkungan pengembangan yang dirancang untuk bekerja dengan Python akan memiliki penyorotan sintaks yang

26
00:01:33,430 --> 00:01:38,440
akan mengingatkan Anda bahwa menggunakan kata kunci bawaan dengan menyorot warna yang berbeda dan kami akan

27
00:01:38,440 --> 00:01:40,330
melihat contohnya hanya dalam sedikit.

28
00:01:42,060 --> 00:01:46,710
Sebelum kita benar-benar melompat ke buku Jupiter meskipun saya ingin menyebutkan bahwa Python menggunakan dinamika hyping dan

29
00:01:47,130 --> 00:01:52,410
ini berarti Anda dapat menetapkan kembali variabel ke tipe data yang berbeda dan ini membuat Python sangat fleksibel dalam

30
00:01:52,410 --> 00:01:53,500
menetapkan tipe data.

31
00:01:53,520 --> 00:01:57,960
Dan itu sebenarnya berbeda dari banyak bahasa pemrograman lain yang diketik secara statis.

32
00:01:57,960 --> 00:02:04,110
Jadi izinkan saya menunjukkan kepada Anda sebuah contoh dari apa yang saya maksudkan dengan ini dalam python sesuatu seperti ini benar-benar OK.

33
00:02:04,310 --> 00:02:09,890
Di sini saya telah menetapkan nama variabel anjing saya sama dengan dua dan kemudian dalam kode saya, saya pergi ke

34
00:02:09,890 --> 00:02:14,720
depan dan menugaskan kembali nama variabel anjing saya ke daftar tipe data yang sama sekali berbeda.

35
00:02:14,750 --> 00:02:16,370
Sammy dan Frankie.

36
00:02:16,490 --> 00:02:20,850
Nah, itu benar-benar OK dalam Python tetapi dalam bahasa lain yang akan menghasilkan kesalahan.

37
00:02:20,920 --> 00:02:26,370
Dan itu karena bahasa-bahasa lain ini secara statis diketik artinya dalam bahasa lain seperti C plus plus

38
00:02:26,370 --> 00:02:32,190
yang harus Anda katakan I. SEBUAH. untuk integer dan katakan anjing saya sama dengan

39
00:02:32,220 --> 00:02:35,000
nilai integer apa pun yang diinginkan seperti 1 dan kemudian pada kode Anda.

40
00:02:35,030 --> 00:02:38,100
Anda tidak akan dapat menetapkan tipe data yang berbeda.

41
00:02:38,100 --> 00:02:42,850
Anda tidak akan bisa mengatakan anjing saya sama dengan Samie karena itu bukan lagi bilangan bulat.

42
00:02:42,870 --> 00:02:44,860
Sekarang untuk menghasilkan kesalahan.

43
00:02:44,910 --> 00:02:48,590
Jadi ada beberapa pro dan kontra untuk pengetikan dinamis dengan Python.

44
00:02:48,630 --> 00:02:52,600
Prosa adalah bahwa tidak harus menuliskan tipe data yang sebenarnya.

45
00:02:52,650 --> 00:02:57,150
Menghemat banyak waktu dan membuatnya sangat mudah untuk dengan cepat menghasilkan kode Python dan juga membuat

46
00:02:57,150 --> 00:03:00,720
kode Anda sangat mudah dibaca karena Anda hanya membaca nama variabel itu.

47
00:03:00,720 --> 00:03:05,820
Sekarang jenis pedang bermata dua di sini karena kekurangannya adalah hal ini dapat mengakibatkan bug untuk tipe data

48
00:03:05,820 --> 00:03:09,960
yang tidak terduga karena Anda tidak memiliki batasan tipe data ini terutama ketika Anda berurusan

49
00:03:09,960 --> 00:03:11,080
dengan input pengguna.

50
00:03:11,130 --> 00:03:16,660
Anda mungkin memiliki tipe data yang tidak terduga muncul dan yang dapat menyebabkan masalah di kemudian hari dalam operasi Anda.

51
00:03:17,100 --> 00:03:21,570
Jadi, Anda harus mengetahui tipe data saat Anda mengkode dan Anda dapat menggunakan fungsi tipe khusus yang dibangun

52
00:03:21,570 --> 00:03:26,000
ke Python untuk dengan cepat memeriksa jenis variabel apa pun dan akan menunjukkan kepada Anda cara menggunakannya.

53
00:03:26,010 --> 00:03:28,290
Dan sedikit saja.

54
00:03:28,500 --> 00:03:31,830
Baiklah mari kita jelajahi semua konsep ini dengan melompat ke buku yang berbeda.

55
00:03:32,730 --> 00:03:36,960
Oke sekarang kita telah melihat bagaimana menggunakan angka dalam Python sebagai kalkulator, mari kita lihat bagaimana kita

56
00:03:36,960 --> 00:03:38,520
dapat menetapkan nama dan membuat variabel.

57
00:03:38,520 --> 00:03:43,590
Pertama-tama kita akan membuat variabel yang sangat sederhana bernama A dan mengaturnya sama dengan 5.

58
00:03:43,980 --> 00:03:47,640
Dan sekarang saya sudah menjalankannya di mana saja dalam kode saya ketika saya menelepon a.

59
00:03:47,960 --> 00:03:53,820
Sekarang menetapkan variabel 5 dan saya dapat menugaskannya kembali hanya dengan mengatakan A kemudian sama dengan sesuatu yang

60
00:03:53,820 --> 00:03:54,810
lain seperti 10.

61
00:03:55,260 --> 00:04:02,940
Dan sekarang jika saya periksa ada 10 di sana dan saya juga bisa menambahkan objek sekarang bersama-sama saya bisa mengatakan plus A.

62
00:04:02,940 --> 00:04:07,420
Dan itu akan menghasilkan 20 karena 10 ditambah 10 sama dengan 20.

63
00:04:07,560 --> 00:04:13,260
Dan Python juga memungkinkan Anda untuk melakukan penugasan kembali dengan referensi ke objek yang sama.

64
00:04:13,260 --> 00:04:14,440
Mari saya tunjukkan apa yang saya maksud dengan itu.

65
00:04:14,580 --> 00:04:21,420
Saya bisa mengatakan A yang masih sama dengan 10 Saya bisa menugaskannya untuk mengatakan sesuatu seperti A

66
00:04:21,480 --> 00:04:23,140
sama dengan plus A.

67
00:04:23,400 --> 00:04:28,740
Jadi apa yang dikatakannya adalah ambil nilai saat ini dari A yaitu 10 dan tetapkan kembali ke nilai tambah A.

68
00:04:28,770 --> 00:04:30,200
Jadi itu 10 ditambah 10.

69
00:04:30,210 --> 00:04:34,660
Jadi setelah saya menjalankan ini sekarang akan sama dengan 20.

70
00:04:34,810 --> 00:04:38,010
Dan perlu diingat jika saya menjalankan sel ini untuk kedua kalinya.

71
00:04:38,140 --> 00:04:42,410
Jadi saya perhatikan operator di sini akan beralih dari 40 menjadi 42.

72
00:04:42,490 --> 00:04:49,570
Jika saya menjalankan lagi itu sekarang 40 dan Anda dapat terus melakukan ini lagi dan lagi dan Anda akan terus melihatnya pada dasarnya

73
00:04:49,810 --> 00:04:51,410
berlipat ganda setiap kali.

74
00:04:51,700 --> 00:04:52,960
Jadi ingatlah itu.

75
00:04:52,960 --> 00:04:57,040
Ini sedikit berbeda dari di lingkungan skrip jika Anda menjalankan skrip tinggi Anda tidak

76
00:04:57,040 --> 00:05:01,320
benar-benar melihat efek itu karena Anda hanya akan memiliki baris itu sekali di lingkungan sel.

77
00:05:01,330 --> 00:05:03,670
Anda harus menjalankan sel itu lagi dan lagi.

78
00:05:04,070 --> 00:05:04,500
BAIK.

79
00:05:04,750 --> 00:05:11,410
Jadi mari kita bayangkan bahwa kita tidak tahu jenis apa yang dapat Anda lakukan adalah menggunakan fungsi tipe

80
00:05:11,430 --> 00:05:17,200
bawaan sehingga kita harus membuka tanda kurung tutup dan kita akan belajar cara membuat fungsi kita

81
00:05:17,200 --> 00:05:18,130
sendiri nanti.

82
00:05:18,130 --> 00:05:24,010
Tapi pasand variabel di sana bergeser masuk dan Anda akan mendapatkan kembali kata kunci bawaan Python untuk apa

83
00:05:24,010 --> 00:05:24,630
jenisnya.

84
00:05:24,640 --> 00:05:27,410
Dan dalam hal ini saya. SEBUAH. karena itu bilangan bulat.

85
00:05:27,550 --> 00:05:30,310
Mari kita tetapkan kembali menjadi nomor floating point.

86
00:05:30,340 --> 00:05:32,070
Jadi kita akan mengatakan tiga koma satu.

87
00:05:32,110 --> 00:05:36,910
Mari kita periksa jenis jenis itu dan mengembalikan kembali float itu.

88
00:05:36,910 --> 00:05:41,980
Jadi ini adalah kata kunci yang sama yang kita lihat ketika kita membahas tabel tipe data dasar itu.

89
00:05:41,980 --> 00:05:47,320
Sekarang seperti yang Anda sebutkan sebelumnya Anda ingin menghindari menggunakan kata kunci Python sebagai nama variabel dan cara Anda bisa tahu apakah itu

90
00:05:47,320 --> 00:05:54,310
terjadi atau tidak adalah katakanlah saya ingin mulai menetapkan I. SEBUAH. sama dengan

91
00:05:54,310 --> 00:05:55,760
4.

92
00:05:55,810 --> 00:05:57,150
Jadi perhatikan apa yang terjadi di sini.

93
00:05:57,160 --> 00:06:01,610
Saya memiliki highlight sintaks pada I. SEBUAH. dan saya tidak mendapatkan itu sebelumnya dengan.

94
00:06:01,630 --> 00:06:07,150
Jadi itu berarti bahwa saya dan t di sini adalah kata kunci builtin khusus dan Anda tidak boleh menggunakannya untuk sesuatu

95
00:06:07,150 --> 00:06:07,750
seperti ini.

96
00:06:07,750 --> 00:06:13,390
Jadi jika Anda pernah melihat bahwa nama variabel Anda memiliki beberapa penyorotan khusus bahwa nama variabel normal

97
00:06:13,390 --> 00:06:15,810
tidak maka Anda harus menghindari menggunakan ini.

98
00:06:15,820 --> 00:06:18,130
Jadi pasti jangan pernah menjalankannya.

99
00:06:18,130 --> 00:06:20,590
Dan jika Anda benar-benar menjalankannya saat Anda mengikuti.

100
00:06:20,770 --> 00:06:22,930
Atau mungkin Anda melakukan kesalahan penugasan ulang lainnya.

101
00:06:22,930 --> 00:06:28,270
Anda selalu dapat datang ke sini untuk kernel dan memilih restart kernel dan itu akan me-restart kernel dan

102
00:06:28,270 --> 00:06:31,630
itu akan menghapus semua variabel sehingga semua variabel akan hilang.

103
00:06:31,660 --> 00:06:36,670
Jika Anda pernah mengalami kesalahan aneh karena Anda menetapkan ulang sesuatu seperti list atau I. SEBUAH.

104
00:06:37,030 --> 00:06:38,290
Anda dapat menekan restart di sini.

105
00:06:38,440 --> 00:06:41,430
Ini akan memulai ulang kernel dan kemudian Anda harus menjalankan sel lagi.

106
00:06:41,560 --> 00:06:47,170
Jika Anda ingin menemukan sesuatu karena jika kita katakan di sini mereka akan mengatakan hei saya tidak mendefinisikan Sin-Eater untuk

107
00:06:47,170 --> 00:06:49,980
menjalankan kembali sel dan kemudian Anda memiliki 5 lagi.

108
00:06:50,420 --> 00:06:56,570
OK jadi hal terakhir yang ingin saya ketahui adalah contoh sederhana menggunakan nama variabel.

109
00:06:56,830 --> 00:07:08,240
Jadi saya akan mengatakan penghasilan saya sama dengan 100 dan kemudian di sel saya akan mengatakan tarif pajak saya katakanlah saya memiliki tarif

110
00:07:08,240 --> 00:07:13,420
pajak 10 persen jadi 0. 1 dan saya ingin mengetahui berapa total pajak yang dibayarkan.

111
00:07:13,550 --> 00:07:18,130
Saya akan mengatakan pajak saya sama dengan penghasilan saya.

112
00:07:18,280 --> 00:07:24,600
Kali tarif pajak saya jadi saya punya itu dan Elish memeriksa apa pajak saya.

113
00:07:24,600 --> 00:07:25,750
Berapa banyak saya berhutang.

114
00:07:25,960 --> 00:07:27,240
Saya akan memeriksa pajak saya.

115
00:07:27,240 --> 00:07:29,040
Dan di sana kita punya 10. 0.

116
00:07:29,130 --> 00:07:35,880
Jadi sekarang saya dapat melakukan logika dengan nama variabel dan ini jauh lebih mudah dibaca daripada hanya menggunakan bilangan bulat atau angka

117
00:07:35,880 --> 00:07:36,770
floating point.

118
00:07:36,780 --> 00:07:42,540
Karena sekarang saya memiliki kalimat hampir Inggris yang bagus yang mengatakan pajak saya sama dengan penghasilan saya kali tarif

119
00:07:42,540 --> 00:07:43,320
pajak saya.

120
00:07:43,600 --> 00:07:45,990
OK jadi kami telah belajar beberapa angka dasar dalam Python.

121
00:07:45,990 --> 00:07:49,830
Kami telah belajar cara menangani centang dan kami membungkusnya dengan mempelajari cara melakukan

122
00:07:50,040 --> 00:07:51,300
tugas variabel dalam Python.

123
00:07:51,300 --> 00:07:53,420
Selanjutnya kita akan belajar tentang string.

124
00:07:53,430 --> 00:07:54,190
Sampai jumpa di sana.
