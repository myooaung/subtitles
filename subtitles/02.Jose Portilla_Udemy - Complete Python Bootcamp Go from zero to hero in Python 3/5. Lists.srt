1
1

00:00:01,681  -->  00:00:02,691
<v Instructor>Hello everyone,</v>
2

2

00:00:02,691  -->  00:00:06,052
and welcome to the lists lecture.
3

3

00:00:06,052  -->  00:00:08,183
So in this lecture we'll be learning about
4

4

00:00:08,183  -->  00:00:12,766
the list data structure in Python, and we discussed earlier
5

5

00:00:12,766  -->  00:00:16,634
that strings are a type of sequence in Python,
6

6

00:00:16,634  -->  00:00:18,177
and we're gonna learn now that lists
7

7

00:00:18,177  -->  00:00:19,130
can be thought as probably one of
8

8

00:00:19,130  -->  00:00:23,048
the most general versions of sequences in Python.
9

9

00:00:23,048  -->  00:00:25,469
So let's go ahead and get started.
10

10

00:00:25,469  -->  00:00:27,864
Here I have open the Jupyter Notebook
11

11

00:00:27,864  -->  00:00:29,667
and we're gonna learn about creating lists,
12

12

00:00:29,667  -->  00:00:33,274
indexing and slicing lists, some basic list methods,
13

13

00:00:33,274  -->  00:00:35,120
and then nesting lists, and we'll get
14

14

00:00:35,120  -->  00:00:38,363
a quick introduction to list comprehensions.
15

15

00:00:38,363  -->  00:00:41,412
So this is a quick overview of everything in
16

16

00:00:41,412  -->  00:00:44,085
this Jupyter Notebook, you can go ahead and check it out,
17

17

00:00:44,085  -->  00:00:47,370
but let's go ahead and dive into the live code.
18

18

00:00:47,370  -->  00:00:49,203
All right, here we go.
19

19

00:00:52,251  -->  00:00:54,773
So now in the live code let's go ahead
20

20

00:00:54,773  -->  00:00:57,604
and assign a list to a variable.
21

21

00:00:57,604  -->  00:01:01,771
So I'm gonna create a variable name called my_list,
22

22

00:01:02,754  -->  00:01:04,571
and I'm going to create a list.
23

23

00:01:04,571  -->  00:01:08,133
So lists are constructed with square brackets,
24

24

00:01:08,133  -->  00:01:09,639
and then they have commas separating
25

25

00:01:09,639  -->  00:01:12,114
every element in the list.
26

26

00:01:12,114  -->  00:01:13,350
So for instance if I wanted to make
27

27

00:01:13,350  -->  00:01:16,517
a list of the numbers one, two, three,
28

28

00:01:17,931  -->  00:01:20,301
so right now in this format my list
29

29

00:01:20,301  -->  00:01:22,698
is everything in-between these two brackets,
30

30

00:01:22,698  -->  00:01:25,357
and it allows me to keep track of this sequence of elements,
31

31

00:01:25,357  -->  00:01:28,898
one, two and three, and they're all separated by commas.
32

32

00:01:28,898  -->  00:01:30,733
Shift + Enter to run that cell.
33

33

00:01:30,733  -->  00:01:33,133
So we just created a list of integers,
34

34

00:01:33,133  -->  00:01:36,674
so if I say my_list, and I can remember
35

35

00:01:36,674  -->  00:01:40,841
to do Tab to autocomplete, there I have my list output.
36

36

00:01:42,892  -->  00:01:45,954
So as I mentioned, this is a list of integers,
37

37

00:01:45,954  -->  00:01:48,267
but what's nice about Python is lists
38

38

00:01:48,267  -->  00:01:51,825
can actually hold different object types.
39

39

00:01:51,825  -->  00:01:54,794
So for instance, I can create my list
40

40

00:01:54,794  -->  00:01:57,057
and I'll set it equal to a new list,
41

41

00:01:57,057  -->  00:02:01,224
and this list is going to contain a string, an integer, 23,
42

42

00:02:03,109  -->  00:02:06,161
and even like a floating-point number, so 1.2,
43

43

00:02:06,161  -->  00:02:09,798
and let's put another string in there for good measure.
44

44

00:02:09,798  -->  00:02:12,873
There we go, and now if I call my list again,
45

45

00:02:12,873  -->  00:02:16,196
you can see the list is holding different object types,
46

46

00:02:16,196  -->  00:02:18,784
so it's holding a string, it's holding integers,
47

47

00:02:18,784  -->  00:02:22,731
floating-points, so lists can hold different object types.
48

48

00:02:22,731  -->  00:02:26,205
You can go ahead and mix and match them within the list.
49

49

00:02:26,205  -->  00:02:30,274
So just like strings, there's a length function,
50

50

00:02:30,274  -->  00:02:33,101
and the len function also works for lists,
51

51

00:02:33,101  -->  00:02:37,268
so I can say len of my_list, remember Tab autocomplete,
52

52

00:02:39,145  -->  00:02:42,400
and there I get the list's length is four,
53

53

00:02:42,400  -->  00:02:43,722
and that's because there's four elements,
54

54

00:02:43,722  -->  00:02:47,639
there's the string, 23, 1.2, and that o string.
55

55

00:02:48,780  -->  00:02:50,183
Okay, so let's go ahead and jump
56

56

00:02:50,183  -->  00:02:51,576
to indexing and slicing.
57

57

00:02:51,576  -->  00:02:53,383
So indexing and slicing is gonna work
58

58

00:02:53,383  -->  00:02:57,625
just like we explored indexing and slicing in strings.
59

59

00:02:57,625  -->  00:03:01,023
So let's go ahead and make a new list,
60

60

00:03:01,023  -->  00:03:02,673
or just reassign that list label,
61

61

00:03:02,673  -->  00:03:06,945
so I'm gonna say, I'm gonna make a list of one,
62

62

00:03:06,945  -->  00:03:10,278
that's string one, two, let's say three,
63

63

00:03:12,192  -->  00:03:14,038
and then let's go ahead and put in some integers
64

64

00:03:14,038  -->  00:03:16,425
to mix it up, so one, two, three in strings,
65

65

00:03:16,425  -->  00:03:18,435
and then 4, 5, and remember each of
66

66

00:03:18,435  -->  00:03:21,785
the elements is separated by a comma.
67

67

00:03:21,785  -->  00:03:25,035
So since this is a sequence I can index
68

68

00:03:26,615  -->  00:03:28,867
and grab stuff in that sequence,
69

69

00:03:28,867  -->  00:03:31,700
so if I say my_list variable name,
70

70

00:03:33,213  -->  00:03:35,421
with brackets and then zero, that's gonna grab
71

71

00:03:35,421  -->  00:03:37,905
the element at index zero, and in this case,
72

72

00:03:37,905  -->  00:03:40,475
it's just that first one, it's that one.
73

73

00:03:40,475  -->  00:03:44,642
So just like in strings the notation is the same, so whoops.
74

74

00:03:46,020  -->  00:03:50,701
Let's say I wanna say my_list, and let's say I wanted
75

75

00:03:50,701  -->  00:03:54,146
to grab index one and everything past it,
76

76

00:03:54,146  -->  00:03:56,007
I can use that same colon notation,
77

77

00:03:56,007  -->  00:03:59,354
so my_list, grab everything in element one
78

78

00:03:59,354  -->  00:04:02,017
and then everything past it.
79

79

00:04:02,017  -->  00:04:04,157
So that's two, three, 4, 5, 'cause remember
80

80

00:04:04,157  -->  00:04:07,226
our index zero, that's the one string.
81

81

00:04:07,226  -->  00:04:11,943
So let's say I wanted to grab everything up to index three.
82

82

00:04:11,943  -->  00:04:15,693
I can say my_list, and I'll say everything up
83

83

00:04:18,763  -->  00:04:22,930
to element three, so :3, and that returns one, two, three.
84

84

00:04:28,500  -->  00:04:31,917
Great, so we can also use the plus symbol
85

85

00:04:32,830  -->  00:04:36,525
to concatenate lists, just like we did for strings.
86

86

00:04:36,525  -->  00:04:39,319
So if you remember from the string lecture,
87

87

00:04:39,319  -->  00:04:43,236
I could say hello plus, space, let's say world,
88

88

00:04:45,243  -->  00:04:47,387
and now it concatenated it into
89

89

00:04:47,387  -->  00:04:48,685
a single string, 'hello world'.
90

90

00:04:48,685  -->  00:04:50,960
So I can actually do the same with lists,
91

91

00:04:50,960  -->  00:04:54,043
so I can say my_list, and that's just
92

92

00:04:55,265  -->  00:04:57,502
that one, two, three, 4, 5 there,
93

93

00:04:57,502  -->  00:05:00,683
and I can concatenate it with another list.
94

94

00:05:00,683  -->  00:05:04,516
So I'll create a new list, and concatenate it.
95

95

00:05:06,774  -->  00:05:10,327
So what I have here right now is this variable,
96

96

00:05:10,327  -->  00:05:13,302
my list, my_list representing my list,
97

97

00:05:13,302  -->  00:05:15,615
and I'm gonna add, or concatenate
98

98

00:05:15,615  -->  00:05:17,760
this list consisting of a single item,
99

99

00:05:17,760  -->  00:05:19,088
which is just a string here,
100

100

00:05:19,088  -->  00:05:21,648
and that's denoted by those square brackets.
101

101

00:05:21,648  -->  00:05:24,709
There we go, and if you notice when you concatenate it,
102

102

00:05:24,709  -->  00:05:26,272
it basically kind of just appended it
103

103

00:05:26,272  -->  00:05:28,772
to the last item on that list.
104

104

00:05:30,488  -->  00:05:31,714
Now again, it's important to note,
105

105

00:05:31,714  -->  00:05:34,914
since we're not reassigning anything here,
106

106

00:05:34,914  -->  00:05:37,178
if I just copy and paste my list here,
107

107

00:05:37,178  -->  00:05:38,435
that list hasn't been changed,
108

108

00:05:38,435  -->  00:05:40,890
'cause I'm not reassigning it.
109

109

00:05:40,890  -->  00:05:45,057
Okay, so if I wanted to make the change permanent,
110

110

00:05:45,910  -->  00:05:47,036
I would have to reassign it.
111

111

00:05:47,036  -->  00:05:50,576
So I'd have to say my_list is equal to
112

112

00:05:50,576  -->  00:05:53,743
my_list plus, let's say permanent add,
113

113

00:06:01,088  -->  00:06:04,005
and now if I check what my list is,
114

114

00:06:05,265  -->  00:06:06,692
here I've added it permanently,
115

115

00:06:06,692  -->  00:06:10,038
because I've reassigned it using that equal sign.
116

116

00:06:10,038  -->  00:06:13,026
All right, so we can also use the multiplication
117

117

00:06:13,026  -->  00:06:15,818
or the asterisk symbol for duplication,
118

118

00:06:15,818  -->  00:06:18,948
just like we did in strings,
119

119

00:06:18,948  -->  00:06:22,198
so I can say my_list multiplied by two,
120

120

00:06:23,422  -->  00:06:25,453
and that's basically gonna just double my list,
121

121

00:06:25,453  -->  00:06:27,750
so one, two, three, 4, 5, permanent add,
122

122

00:06:27,750  -->  00:06:30,244
and then again, one, two, three, 4, 5, permanent add,
123

123

00:06:30,244  -->  00:06:31,361
and you'll notice the output is just
124

124

00:06:31,361  -->  00:06:34,944
a singular list of the elements twice over.
125

125

00:06:35,854  -->  00:06:38,293
So again, that's not permanent
126

126

00:06:38,293  -->  00:06:40,231
since I'm not reassigning anything.
127

127

00:06:40,231  -->  00:06:45,023
If I just call my list again I get that original list.
128

128

00:06:45,023  -->  00:06:48,500
Okay, so if you're familiar with
129

129

00:06:48,500  -->  00:06:50,801
another programming language you might start
130

130

00:06:50,801  -->  00:06:53,642
to draw parallels between arrays in another language
131

131

00:06:53,642  -->  00:06:57,241
and lists in Python, but lists in Python tend
132

132

00:06:57,241  -->  00:06:59,491
to be more flexible than arrays in other languages,
133

133

00:06:59,491  -->  00:07:02,234
and there's usually two good reasons for that.
134

134

00:07:02,234  -->  00:07:04,076
They have no fixed size constraint,
135

135

00:07:04,076  -->  00:07:08,185
so for instance this list, it can be as big as we want,
136

136

00:07:08,185  -->  00:07:11,317
and we can keep adding to it.
137

137

00:07:11,317  -->  00:07:15,200
So I don't have to set any restrictions beforehand,
138

138

00:07:15,200  -->  00:07:17,216
I don't have to say, "Hey, this list is gonna
139

139

00:07:17,216  -->  00:07:20,140
"be five elements long in the sequence."
140

140

00:07:20,140  -->  00:07:21,635
Python allows us to just keep adding
141

141

00:07:21,635  -->  00:07:24,491
and growing to that list, and like we saw
142

142

00:07:24,491  -->  00:07:25,995
what's nice about lists in Python
143

143

00:07:25,995  -->  00:07:27,910
is that they have no type constraint.
144

144

00:07:27,910  -->  00:07:29,623
So you saw earlier I was mixing strings,
145

145

00:07:29,623  -->  00:07:31,014
and integers, and floating-points,
146

146

00:07:31,014  -->  00:07:34,281
and different object types into that list.
147

147

00:07:34,281  -->  00:07:38,249
So let's go ahead and explore methods for lists.
148

148

00:07:38,249  -->  00:07:42,249
So I'm gonna say l is equal to the list [1,2,3],
149

149

00:07:45,816  -->  00:07:49,652
so here I have my list l equal to three elements,
150

150

00:07:49,652  -->  00:07:51,985
1, 2 and 3 in that sequence.
151

151

00:07:53,133  -->  00:07:56,330
So one method we can use is the append method.
152

152

00:07:56,330  -->  00:07:58,783
It's gonna be one of the most common methods you use
153

153

00:07:58,783  -->  00:08:01,478
on a list, so again, the way methods work
154

154

00:08:01,478  -->  00:08:03,708
is you take that variable or label name,
155

155

00:08:03,708  -->  00:08:08,418
put a dot, and then type in the method you use.
156

156

00:08:08,418  -->  00:08:10,957
So in this case the method I'm gonna use
157

157

00:08:10,957  -->  00:08:15,124
is called append, and then append looks like this,
158

158

00:08:16,682  -->  00:08:20,677
has closed parentheses, and the argument you pass into it
159

159

00:08:20,677  -->  00:08:23,613
is the item you wanna add to the end of the list.
160

160

00:08:23,613  -->  00:08:27,780
So for instance, I wanna add a string called append me!,
161

161

00:08:30,065  -->  00:08:32,351
and if I look at the list now, l,
162

162

00:08:32,351  -->  00:08:34,575
you'll notice I have appended to the end of
163

163

00:08:34,575  -->  00:08:37,325
that list that append me! String.
164

164

00:08:38,668  -->  00:08:41,076
So just to reiterate again, since we're using
165

165

00:08:41,076  -->  00:08:43,247
the Jupyter Notebook, and it's such a great tool
166

166

00:08:43,247  -->  00:08:47,247
for learning, if I say l. and then click on Tab,
167

167

00:08:50,404  -->  00:08:53,560
it'll give me a list of all the available methods.
168

168

00:08:53,560  -->  00:08:55,929
Go ahead and check out the advanced list lectures
169

169

00:08:55,929  -->  00:08:57,938
for a breakdown of a lot of these methods,
170

170

00:08:57,938  -->  00:08:59,691
but we're gonna go over a few of 'em
171

171

00:08:59,691  -->  00:09:03,098
in this lecture as well, and again,
172

172

00:09:03,098  -->  00:09:05,767
I can say l.append, and since we're using
173

173

00:09:05,767  -->  00:09:10,161
the Jupyter Notebooks, I can say Shift + Tab,
174

174

00:09:10,161  -->  00:09:11,925
and it will give you the Docstring
175

175

00:09:11,925  -->  00:09:14,146
and some additional information.
176

176

00:09:14,146  -->  00:09:17,986
So it'll tell us L.append, you put in the object,
177

177

00:09:17,986  -->  00:09:21,653
and you can append object to the end, great.
178

178

00:09:25,485  -->  00:09:29,652
So right now we have l is equal to 1, 2, 3, 'append me!'
179

179

00:09:30,976  -->  00:09:33,429
Another method that's commonly used in lists
180

180

00:09:33,429  -->  00:09:36,411
is the pop method, so you can use pop
181

181

00:09:36,411  -->  00:09:40,244
to basically "pop off" an item from that list.
182

182

00:09:42,137  -->  00:09:45,171
So by default, pop takes off the last index,
183

183

00:09:45,171  -->  00:09:48,346
but you can also specify which index to pop off.
184

184

00:09:48,346  -->  00:09:51,113
So what I'm gonna show you is just a quick example.
185

185

00:09:51,113  -->  00:09:55,280
So I can say l.pop , and that basically returns
186

186

00:09:57,676  -->  00:10:00,821
that last element in your list,
187

187

00:10:00,821  -->  00:10:04,207
and it also permanently affects your list.
188

188

00:10:04,207  -->  00:10:06,994
So it just says, "Okay, I'm gonna grab off
189

189

00:10:06,994  -->  00:10:11,161
"that last item, pop it off, and then return it back."
190

190

00:10:12,122  -->  00:10:16,122
So let's go ahead and say l., well I'm gonna say
191

191

00:10:18,029  -->  00:10:22,196
x is equal to l.pop, and I can also specify which index.
192

192

00:10:24,875  -->  00:10:29,173
So by default the index is negative one, which would be
193

193

00:10:29,173  -->  00:10:32,414
your last element in that list, but I can pop off
194

194

00:10:32,414  -->  00:10:34,873
whatever index I want by passing it through.
195

195

00:10:34,873  -->  00:10:37,298
So let's say I wanted to pop off the zero index item,
196

196

00:10:37,298  -->  00:10:40,690
which in this case would be one, that very first item.
197

197

00:10:40,690  -->  00:10:43,841
So here what I'm doing is I'm saying l is my list,
198

198

00:10:43,841  -->  00:10:47,189
call the pop method on it, that .pop,
199

199

00:10:47,189  -->  00:10:49,182
and then I'm passing the index I wanna pop off,
200

200

00:10:49,182  -->  00:10:52,705
which would be zero, which corresponds to that 1 element,
201

201

00:10:52,705  -->  00:10:54,420
and I'm using the equal sign to set
202

202

00:10:54,420  -->  00:10:57,959
that equal to a variable here, great.
203

203

00:10:57,959  -->  00:11:02,001
So if I check out what x equals now, x is equal to 1,
204

204

00:11:02,001  -->  00:11:05,011
and if I check out my original list l,
205

205

00:11:05,011  -->  00:11:08,938
I notice now it just consists of 2 and 3.
206

206

00:11:08,938  -->  00:11:09,938
Okay, great.
207

207

00:11:10,914  -->  00:11:14,460
So it should be noted that list indexing
208

208

00:11:14,460  -->  00:11:18,174
will return an error if there's no element at that index.
209

209

00:11:18,174  -->  00:11:21,310
So for instance, right now my list consists of
210

210

00:11:21,310  -->  00:11:24,921
the elements two and three, so let's say I call index
211

211

00:11:24,921  -->  00:11:26,680
at one, that should return 3,
212

212

00:11:26,680  -->  00:11:30,241
remember indexing starts at zero, so zero, one,
213

213

00:11:30,241  -->  00:11:32,991
but let's say I said index of 99.
214

214

00:11:34,396  -->  00:11:35,867
So that's gonna return an error,
215

215

00:11:35,867  -->  00:11:38,599
and if we read the error right here, it's an IndexError,
216

216

00:11:38,599  -->  00:11:40,655
and that's because the list index is out of range.
217

217

00:11:40,655  -->  00:11:43,469
So that makes sense, we can't index something
218

218

00:11:43,469  -->  00:11:46,664
that's out of range in that list.
219

219

00:11:46,664  -->  00:11:49,416
Okay, so let's go ahead and make a new list
220

220

00:11:49,416  -->  00:11:53,782
to explore two more methods, sort and reverse.
221

221

00:11:53,782  -->  00:11:57,134
So I'm gonna say new_list is equal to,
222

222

00:11:57,134  -->  00:12:01,761
in this case I'm gonna use strings, just letters,
223

223

00:12:01,761  -->  00:12:05,428
so I'm gonna say a, e, let's say x, b and c,
224

224

00:12:09,236  -->  00:12:10,985
and the reason I'm not just doing the straight alphabet
225

225

00:12:10,985  -->  00:12:11,984
is because I'm gonna show you how
226

226

00:12:11,984  -->  00:12:14,988
to sort and reverse some of this.
227

227

00:12:14,988  -->  00:12:18,033
So go ahead and make a new list that looks like that,
228

228

00:12:18,033  -->  00:12:19,716
let's go ahead and make sure everything worked.
229

229

00:12:19,716  -->  00:12:21,959
Okay, so here's my new list, remember we're just
230

230

00:12:21,959  -->  00:12:26,213
using square brackets, the elements are separated by commas.
231

231

00:12:26,213  -->  00:12:29,963
So what can I do is sort and reverse methods.
232

232

00:12:31,287  -->  00:12:34,204
So if I check out new_list. and Tab
233

233

00:12:35,918  -->  00:12:37,755
because I'm in Jupyter Notebook,
234

234

00:12:37,755  -->  00:12:41,127
I can see that there's a reverse method here.
235

235

00:12:41,127  -->  00:12:43,628
So let's go ahead and click Enter and see what happens.
236

236

00:12:43,628  -->  00:12:47,295
As you might suspect, it reverses the order,
237

237

00:12:48,160  -->  00:12:50,798
and it's a permanent change to the list,
238

238

00:12:50,798  -->  00:12:54,725
so now it's reversed the order of that list,
239

239

00:12:54,725  -->  00:12:57,440
and what if we wanted to sort that order,
240

240

00:12:57,440  -->  00:13:00,940
then I can say Tab, let's go down to sort,
241

241

00:13:03,990  -->  00:13:07,302
and now if we check out that list, it's been sorted
242

242

00:13:07,302  -->  00:13:11,135
into alphabetical order, a, b, c, e, x, great.
243

243

00:13:12,032  -->  00:13:14,404
So in the case of numbers, if that list
244

244

00:13:14,404  -->  00:13:18,640
was full of numbers it would sort them in ascending order.
245

245

00:13:18,640  -->  00:13:22,016
All right, so another great feature of
246

246

00:13:22,016  -->  00:13:24,733
this data structure in Python that is the list,
247

247

00:13:24,733  -->  00:13:26,943
is that they support nesting, and you'll notice
248

248

00:13:26,943  -->  00:13:30,516
a lot of data structures in Python support nesting,
249

249

00:13:30,516  -->  00:13:32,120
so that means you can have data structures
250

250

00:13:32,120  -->  00:13:34,603
within data structures, so for this example,
251

251

00:13:34,603  -->  00:13:37,056
we're gonna do a list inside of a list.
252

252

00:13:37,056  -->  00:13:41,323
So let's get a quick look at how this works.
253

253

00:13:41,323  -->  00:13:46,060
I'm gonna make three lists, I'm writing right now,
254

254

00:13:46,060  -->  00:13:49,477
well let's say l_1 is equal to [1, 2, 3],
255

255

00:13:53,717  -->  00:13:57,050
I'm gonna say l_2 is equal to [4, 5, 6],
256

256

00:14:01,217  -->  00:14:04,550
I'm gonna say l_3 is equal to [7, 8, 9].
257

257

00:14:09,142  -->  00:14:11,411
Okay, so I've created three lists,
258

258

00:14:11,411  -->  00:14:14,613
and I can actually make a list of lists.
259

259

00:14:14,613  -->  00:14:18,020
So I'm gonna make another object called matrix,
260

260

00:14:18,020  -->  00:14:21,853
and I'm gonna set it equal to a list of lists,
261

261

00:14:23,702  -->  00:14:27,457
so I'm gonna say this matrix is a list itself,
262

262

00:14:27,457  -->  00:14:29,901
but I'm gonna put in the elements as lists,
263

263

00:14:29,901  -->  00:14:32,651
so I'm gonna say [l_1, l_2, l_3].
264

264

00:14:37,575  -->  00:14:40,575
So now I can treat this as a matrix,
265

265

00:14:41,536  -->  00:14:45,844
because if you notice here I have my list,
266

266

00:14:45,844  -->  00:14:48,633
which is the matrix, and the elements inside of it
267

267

00:14:48,633  -->  00:14:50,718
are actually lists as well,
268

268

00:14:50,718  -->  00:14:54,188
and this is what we mean by nesting data structures.
269

269

00:14:54,188  -->  00:14:56,132
So I have a list inside of a list,
270

270

00:14:56,132  -->  00:14:58,350
and this can keep going deeper and deeper,
271

271

00:14:58,350  -->  00:14:59,669
as you can have a list inside of a list,
272

272

00:14:59,669  -->  00:15:01,973
which is inside of another list.
273

273

00:15:01,973  -->  00:15:05,760
So we can again use index to grab elements,
274

274

00:15:05,760  -->  00:15:08,537
but now there's gonna be two levels to that index.
275

275

00:15:08,537  -->  00:15:10,348
So the items in the matrix objects,
276

276

00:15:10,348  -->  00:15:12,718
and then the items inside of that list.
277

277

00:15:12,718  -->  00:15:15,871
So I'll show you what I mean by that.
278

278

00:15:15,871  -->  00:15:18,619
So let's say I have my matrix object,
279

279

00:15:18,619  -->  00:15:20,952
which is just that list of lists,
280

280

00:15:20,952  -->  00:15:24,426
and I say index zero, so what's that gonna return?
281

281

00:15:24,426  -->  00:15:26,397
That's gonna return the first element
282

282

00:15:26,397  -->  00:15:30,314
in that matrix object, which will be [1, 2, 3].
283

283

00:15:32,154  -->  00:15:35,843
All right, so now that I have this first item in
284

284

00:15:35,843  -->  00:15:38,426
the list, I can actually index it again
285

285

00:15:38,426  -->  00:15:40,739
because it is a list, so I can say grab
286

286

00:15:40,739  -->  00:15:42,987
the first item in that matrix object,
287

287

00:15:42,987  -->  00:15:47,849
and then grab the first item, or element in that list itself
288

288

00:15:47,849  -->  00:15:51,073
by putting another pair of brackets there.
289

289

00:15:51,073  -->  00:15:53,605
So you can see that I have multiple levels
290

290

00:15:53,605  -->  00:15:58,556
to this indexing, and I'm just kind of exploring them there.
291

291

00:15:58,556  -->  00:16:00,974
So I encourage you to kind of play around,
292

292

00:16:00,974  -->  00:16:05,660
see how I can get this number 5, how would I do that?
293

293

00:16:05,660  -->  00:16:09,887
So in matrix that's the second list, or element,
294

294

00:16:09,887  -->  00:16:12,304
so I'd have to say zero, one,
295

295

00:16:13,156  -->  00:16:15,216
and then within that one, that list,
296

296

00:16:15,216  -->  00:16:19,770
it's zero, one again, so that should return 5 there,
297

297

00:16:19,770  -->  00:16:20,952
and for another quick example,
298

298

00:16:20,952  -->  00:16:25,519
let's say I wanted to get 7, how would I get that?
299

299

00:16:25,519  -->  00:16:29,626
Well we note that it's the item at the second index, right,
300

300

00:16:29,626  -->  00:16:34,571
zero, one, two, so it's that third item at index two,
301

301

00:16:34,571  -->  00:16:38,885
and then 7, it's the first one so that's at index zero,
302

302

00:16:38,885  -->  00:16:43,244
and if we get that, there we have the 7, excellent.
303

303

00:16:43,244  -->  00:16:47,411
So I'm gonna give you one last topic in this lecture,
304

304

00:16:48,490  -->  00:16:50,840
and that's gonna be list comprehensions.
305

305

00:16:50,840  -->  00:16:52,775
So Python has a pretty advanced feature
306

306

00:16:52,775  -->  00:16:54,669
called List Comprehensions, and it allows
307

307

00:16:54,669  -->  00:16:57,408
for quick construction of these lists.
308

308

00:16:57,408  -->  00:17:00,145
So I'm just gonna give you kind of a quick sneak peek
309

309

00:17:00,145  -->  00:17:01,734
of what this looks like, but don't worry
310

310

00:17:01,734  -->  00:17:03,089
if you don't understand it because we have
311

311

00:17:03,089  -->  00:17:06,498
a whole entire lecture devoted to list comprehensions,
312

312

00:17:06,498  -->  00:17:08,676
but in case you're familiar with another language,
313

313

00:17:08,676  -->  00:17:11,946
or you've kind of gone through a tutorial with Python before
314

314

00:17:11,946  -->  00:17:14,816
I'll show you how we can build a list comprehension
315

315

00:17:14,816  -->  00:17:18,527
by basically deconstructing a for loop within brackets.
316

316

00:17:18,527  -->  00:17:20,888
Now I know we haven't gone over loops or anything,
317

317

00:17:20,888  -->  00:17:23,308
so if this doesn't make sense to you don't worry about it
318

318

00:17:23,308  -->  00:17:25,824
at all, we're gonna go over loop statements,
319

319

00:17:25,824  -->  00:17:28,394
list comprehensions in much more detail in the future.
320

320

00:17:28,394  -->  00:17:31,845
But just for a cool sneak peek, let's say I wanted
321

321

00:17:31,845  -->  00:17:35,672
to create that first column of that matrix.
322

322

00:17:35,672  -->  00:17:39,505
I could say, first_col, that's my object name,
323

323

00:17:40,882  -->  00:17:42,715
and set it equal to...
324

324

00:17:45,284  -->  00:17:47,284
[row for row in Matrix].
325

325

00:17:50,519  -->  00:17:52,920
Now I know if you haven't seen any for loops
326

326

00:17:52,920  -->  00:17:54,816
or any statements, this doesn't make too much sense,
327

327

00:17:54,816  -->  00:17:56,916
but don't worry about it.
328

328

00:17:56,916  -->  00:17:59,089
What this is basically breaking it down
329

329

00:17:59,089  -->  00:18:02,353
is I can create a list by kind of writing
330

330

00:18:02,353  -->  00:18:05,341
a flat for loop within the brackets.
331

331

00:18:05,341  -->  00:18:07,912
So we'll have lectures devoted to this
332

332

00:18:07,912  -->  00:18:10,373
in further detail, but just to give you kind of
333

333

00:18:10,373  -->  00:18:13,964
a sneak peek at what this is doing,
334

334

00:18:13,964  -->  00:18:16,062
I just created an object that consists of
335

335

00:18:16,062  -->  00:18:18,171
the first column of that matrix,
336

336

00:18:18,171  -->  00:18:20,421
that 1, that 4, and that 7.
337

337

00:18:21,684  -->  00:18:24,804
Okay, so what that basically did is just said, "Hey,
338

338

00:18:24,804  -->  00:18:28,221
"for every element or row in that matrix,
339

339

00:18:29,189  -->  00:18:32,752
"grab the zero index of that row,"
340

340

00:18:32,752  -->  00:18:34,628
and then, using this list comprehension,
341

341

00:18:34,628  -->  00:18:37,159
I can actually make a list out of it.
342

342

00:18:37,159  -->  00:18:38,954
Okay, so that's a little sneak peek,
343

343

00:18:38,954  -->  00:18:42,238
we'll hit that in much further detail in the future,
344

344

00:18:42,238  -->  00:18:44,615
but just a quick overview of what we've done,
345

345

00:18:44,615  -->  00:18:47,162
I'm gonna hop over back to the Jupyter Notebook.
346

346

00:18:47,162  -->  00:18:50,635
We've understood how to create a list using brackets
347

347

00:18:50,635  -->  00:18:53,582
and separating the elements by commas,
348

348

00:18:53,582  -->  00:18:56,091
we understand that a list can hold different object types,
349

349

00:18:56,091  -->  00:18:59,375
such as integers and strings all mixed together,
350

350

00:18:59,375  -->  00:19:02,989
we can use the len function to check the length of a list,
351

351

00:19:02,989  -->  00:19:05,118
we can use indexing and slicing just like we did
352

352

00:19:05,118  -->  00:19:07,771
for strings, because it's a sequence.
353

353

00:19:07,771  -->  00:19:11,970
So we can use those square brackets on that list variable
354

354

00:19:11,970  -->  00:19:14,742
to go ahead and grab things from that list.
355

355

00:19:14,742  -->  00:19:18,116
We can concatenate lists using the plus sign,
356

356

00:19:18,116  -->  00:19:20,574
we can use the multiplication or the asterisk sign
357

357

00:19:20,574  -->  00:19:23,856
to multiply, or duplicate lists,
358

358

00:19:23,856  -->  00:19:26,696
and then we went over some basic list methods,
359

359

00:19:26,696  -->  00:19:31,402
the append method, the pop method, sort and reverse,
360

360

00:19:31,402  -->  00:19:34,902
and then we saw a quick introduction to nesting lists.
361

361

00:19:34,902  -->  00:19:37,407
Okay, so that's it, you can go ahead
362

362

00:19:37,407  -->  00:19:39,332
and check out the advanced lists section later on in
363

363

00:19:39,332  -->  00:19:42,707
this course to go over some more details of those methods,
364

364

00:19:42,707  -->  00:19:45,155
but that's about it for lists for right now.
365

365

00:19:45,155  -->  00:19:47,072
All right, thanks guys!
