WEBVTT
1
1

00:00:01.155  -->  00:00:03.702
<v Narrator>Hello everyone, and welcome to the Iterators</v>
2

2

00:00:03.702  -->  00:00:06.409
and Generators Homework Solution lecture.
3

3

00:00:06.409  -->  00:00:08.547
So in this lecture, we'll be quickly going over some
4

4

00:00:08.547  -->  00:00:11.108
of the solutions for the iterators and generators
5

5

00:00:11.108  -->  00:00:12.469
homework assignment.
6

6

00:00:12.469  -->  00:00:15.462
So problem one, hopefully it was pretty simple.
7

7

00:00:15.462  -->  00:00:18.083
All you had to do was say for I in range N,
8

8

00:00:18.083  -->  00:00:20.583
and then yield that I squared.
9

9

00:00:22.127  -->  00:00:24.969
Problem two, little more complicated since we introduced
10

10

00:00:24.969  -->  00:00:26.978
this random library.
11

11

00:00:26.978  -->  00:00:31.145
But, pretty similarly, you just had to say for I in range N
12

12

00:00:32.053  -->  00:00:35.821
and then yield and then basically this line but with the
13

13

00:00:35.821  -->  00:00:37.238
inputs low, high.
14

14

00:00:38.520  -->  00:00:41.892
Okay, problem three, what I really wanted you to do
15

15

00:00:41.892  -->  00:00:46.059
was to convert the S to an iterator using the iter function
16

16

00:00:48.370  -->  00:00:51.303
and then be able to print next S, just like we did
17

17

00:00:51.303  -->  00:00:52.553
in the lecture.
18

18

00:00:53.522  -->  00:00:58.489
Problem four, one use case for a generator is when your
19

19

00:00:58.489  -->  00:01:00.773
output's gonna take, or has the potential to take up
20

20

00:01:00.773  -->  00:01:03.356
a large amount of memory, and you only intend to iterate
21

21

00:01:03.356  -->  00:01:05.377
through it, you'd want to use a generator.
22

22

00:01:05.377  -->  00:01:07.741
Obviously multiple answers are acceptable here,
23

23

00:01:07.741  -->  00:01:10.180
basically anything they mention in the lecture that you felt
24

24

00:01:10.180  -->  00:01:11.808
was appropriate.
25

25

00:01:11.808  -->  00:01:14.778
Then for the extra credit, basically this was a
26

26

00:01:14.778  -->  00:01:16.760
generator comprehension, just like there are
27

27

00:01:16.760  -->  00:01:19.474
list comprehensions and dictionary comprehensions.
28

28

00:01:19.474  -->  00:01:22.539
You can actually create a generator comprehension.
29

29

00:01:22.539  -->  00:01:26.010
So it's just a quick way of basically if we scroll up,
30

30

00:01:26.010  -->  00:01:30.033
a quick way of making these kind of generator functions,
31

31

00:01:30.033  -->  00:01:33.191
but instead of having to write this formal syntax,
32

32

00:01:33.191  -->  00:01:36.247
you just write this in parentheses.
33

33

00:01:36.247  -->  00:01:38.727
Okay, so you can google generator comprehension or
34

34

00:01:38.727  -->  00:01:40.399
check out the official documentation if you're
35

35

00:01:40.399  -->  00:01:43.956
interested in exploring that topic further.
36

36

00:01:43.956  -->  00:01:47.474
Other than that, that's it for the iterators and generators
37

37

00:01:47.474  -->  00:01:49.727
section of this course.
38

38

00:01:49.727  -->  00:01:52.776
Main takeaway is just to keep in mind, use generators
39

39

00:01:52.776  -->  00:01:55.302
when they're appropriate, and the yield statement
40

40

00:01:55.302  -->  00:01:59.485
is what makes a normal function into a generator function.
41

41

00:01:59.485  -->  00:02:03.652
Okay, thanks everyone, and I'll see you at the next lecture.
