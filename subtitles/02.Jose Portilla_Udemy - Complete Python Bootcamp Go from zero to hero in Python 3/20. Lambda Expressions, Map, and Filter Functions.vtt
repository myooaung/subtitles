WEBVTT
1
00:00:05.230 --> 00:00:07.180
Selamat datang kembali semua orang di kuliah ini.

2
00:00:07.180 --> 00:00:12.790
Kita akan membahas peta ekspresi lambda dan memfilter ekspresi lammed adalah cara untuk dengan cepat membuat

3
00:00:12.790 --> 00:00:15.220
apa yang dikenal sebagai fungsi anonim.

4
00:00:15.220 --> 00:00:19.660
Pada dasarnya hanya satu kali menggunakan fungsi yang Anda bahkan tidak benar-benar menyebutkan nama Anda hanya menggunakannya satu kali

5
00:00:19.660 --> 00:00:21.380
dan kemudian tidak pernah referensi lagi.

6
00:00:21.550 --> 00:00:26.200
Untuk memahami mengapa ini akan berguna dan dalam konteks apa Anda akan menggunakan ini, Anda

7
00:00:26.200 --> 00:00:31.320
harus terlebih dahulu berbicara tentang fungsi peta yang dibangun ke Python serta fungsi filter yang dibangun ke Python.

8
00:00:31.360 --> 00:00:36.670
Jadi mari kita buka, Anda tahu tetapi berbicara tentang MAP berbicara tentang filter dan kemudian kita akan membahas ekspresi lambda.

9
00:00:36.670 --> 00:00:37.650
Mari kita mulai.

10
00:00:37.870 --> 00:00:40.120
OK jadi kita kembali ke sini di notebook Jupiter kita.

11
00:00:40.120 --> 00:00:43.350
Hal pertama yang akan kita lakukan adalah memeriksa fungsi peta.

12
00:00:43.480 --> 00:00:48.220
Anda dapat melihat di sini tepat ketika saya mengetik peta saya mendapatkan beberapa penyorotan sintaks jadi hijau dan itu menunjukkan

13
00:00:48.220 --> 00:00:50.000
kepada saya bahwa ini adalah fungsi bawaan.

14
00:00:50.140 --> 00:00:53.710
Dan seperti yang kita tahu, kita dapat menggeser tab untuk memeriksa string dokumentasi.

15
00:00:53.790 --> 00:00:59.080
Sekarang Anda dapat melihat di sini ia mengharapkan funk dan itu kode pendek untuk fungsi dan kemudian semacam objek yang

16
00:00:59.080 --> 00:00:59.770
dapat diubah.

17
00:00:59.830 --> 00:01:02.890
Anda dapat memperluas ini akan menjelaskan sedikit lebih banyak tentang apa yang dilakukannya.

18
00:01:02.950 --> 00:01:07.690
Tetapi cara terbaik untuk benar-benar menyadari apa yang dilakukannya adalah hanya menunjukkan kepada Anda karena

19
00:01:07.690 --> 00:01:14.520
kami tahu ia mengharapkan fungsi. Mari kita cepat membuat fungsi, kita akan menggunakan kata kunci dan kita akan membuat fungsi sederhana

20
00:01:14.670 --> 00:01:17.230
yang hanya mengambil angka dan mengembalikannya persegi.

21
00:01:18.900 --> 00:01:25.560
Jadi kita akan mendefinisikan fungsi yang disebut Kuadrat mengambil angka dan mengembalikan angka itu ke kekuasaan

22
00:01:25.590 --> 00:01:27.810
ke tempat kuadrat angka itu.

23
00:01:27.810 --> 00:01:36.930
Sekarang mari kita bayangkan saya memiliki daftar angka dan jumlahnya 1 2 3 1 2 3 4 5 dan yang tidak ingin

24
00:01:36.930 --> 00:01:43.380
kita lakukan adalah saya ingin menerapkan fungsi kuadrat untuk setiap nomor dalam daftar nomor saya.

25
00:01:43.380 --> 00:01:48.640
Tapi yang bisa kita lakukan adalah menggunakan for loop tetapi itu mungkin memakan waktu cukup lama dan itu banyak kode.

26
00:01:48.930 --> 00:01:54.210
Alih-alih yang ingin saya lakukan adalah memanfaatkan fungsi peta itu sehingga

27
00:01:54.210 --> 00:02:03.620
fungsi peta yang akhirnya Anda lakukan adalah Anda meneruskan fungsi yang ingin Anda petakan ke setiap elemen atau item dalam daftar ini.

28
00:02:04.020 --> 00:02:06.510
Jadi kita dapat mengatakan minims.

29
00:02:06.600 --> 00:02:08.750
Sekarang perhatikan apa yang terjadi ketika saya menjalankannya seperti ini.

30
00:02:08.790 --> 00:02:15.940
Saya mendapatkan kembali pernyataan samar semacam ini yang mengatakan hei Anda memiliki peta di lokasi ini di komputer

31
00:02:15.970 --> 00:02:17.700
Anda adalah lokasi memori.

32
00:02:17.700 --> 00:02:20.100
Ini dengan sendirinya tidak sangat berguna.

33
00:02:20.100 --> 00:02:31.650
Apa yang perlu kita lakukan adalah benar-benar beralih melalui ini sehingga saya bisa lakukan sekarang adalah mengatakan untuk item dalam item peta cetak dan apa yang

34
00:02:32.120 --> 00:02:38.280
dilakukan adalah menghasilkan penerapan fungsi persegi ini untuk setiap item dalam daftar ini.

35
00:02:38.280 --> 00:02:43.800
Jadi satu untuk kekuatan dua adalah satu dan dua kekuatan untuk empat dan tiga persegi itu

36
00:02:43.800 --> 00:02:47.370
sembilan Foursquare ke 16 lima kotak 25 dan seterusnya.

37
00:02:47.370 --> 00:02:52.350
Jadi itu salah satu cara untuk dengan cepat beralih melalui ini dengan cara lain

38
00:02:52.350 --> 00:03:00.540
Anda mungkin ingin menggunakan adalah jika Anda benar-benar ingin daftar kembali Anda dapat memanggil fungsi daftar built-in pada peta Anda dan kemudian pasand square dan

39
00:03:00.620 --> 00:03:02.060
saya ada di sini.

40
00:03:02.130 --> 00:03:04.120
Dan kemudian ketika Anda menjalankan ini, Anda kembali ke daftar yang sebenarnya.

41
00:03:04.160 --> 00:03:12.490
1 4 9 16 25 dan fungsi-fungsi ini sebenarnya bisa menjadi jauh lebih kompleks daripada hanya fungsi persegi sederhana ini.

42
00:03:12.520 --> 00:03:19.800
Jadi itu benar-benar sebuah fungsi yang bekerja dengan string akan memanggil fungsi ini splicer dan butuh string

43
00:03:20.070 --> 00:03:26.520
mengatakan itu mengambil string saya dan apa yang akan dilakukan adalah akan mengatakan jika panjang

44
00:03:27.350 --> 00:03:29.960
string 2 sama dengan nol

45
00:03:30.240 --> 00:03:34.530
Nah itu berarti ia memiliki jumlah genap dalam string itu karena sisanya setelah membaginya

46
00:03:34.530 --> 00:03:36.260
dengan dua sama dengan nol.

47
00:03:36.690 --> 00:03:42.660
Dan dalam hal ini kita akan mengembalikan kata genap atau bahkan string.

48
00:03:42.660 --> 00:03:49.320
Lain kita sebenarnya hanya akan mengembalikan karakter pertama dari string yang akan mengatakan string saya 0.

49
00:03:49.320 --> 00:03:54.750
Jadi ini adalah fungsi yang sedikit lebih kompleks daripada yang kita lihat di sini tapi itu akan bekerja dengan cara yang

50
00:03:54.750 --> 00:03:55.240
sama.

51
00:03:55.440 --> 00:04:01.040
Ketika kita memetakannya maka itu membuat daftar nama yang akan kita

52
00:04:03.630 --> 00:04:14.190
katakan dan Yves dan katakanlah Sally dan kemudian kita akan pergi setelah kita memanggil daftar memetakan fungsi splicer kita ke nama

53
00:04:14.190 --> 00:04:15.090
kita.

54
00:04:15.450 --> 00:04:21.270
Kami menjalankan ini dan sekarang kami mendapatkan kembali bahkan untuk nama-nama yang memiliki jumlah huruf di dalamnya

55
00:04:21.270 --> 00:04:26.610
dan kami hanya mendapatkan kembali huruf pertama untuk nama-nama yang memiliki jumlah huruf ganjil

56
00:04:26.620 --> 00:04:32.340
kepada mereka dan mereka dapat melihat fleksibilitas yang dapat Anda lakukan fungsi yang Anda inginkan selama itu

57
00:04:32.370 --> 00:04:38.020
akan berhasil mengambil argumen atau parameter yang Anda sampaikan dengan daftar ini atau dengan objek iterable.

58
00:04:38.040 --> 00:04:40.240
Jadi begitulah cara Anda menggunakan fungsi peta.

59
00:04:40.380 --> 00:04:42.210
Sesuatu yang ingin saya jelaskan di sini.

60
00:04:42.240 --> 00:04:43.790
Saat Anda menggunakan fungsi peta.

61
00:04:43.860 --> 00:04:50.100
Perhatikan bagaimana saya melewati dan kuadrat dan bagaimana saya melewati di splicer Saya sebenarnya

62
00:04:50.340 --> 00:04:56.710
tidak memanggil mereka untuk mengeksekusi di dalam peta ini karena peta dengan sendirinya akan mengeksekusi mereka.

63
00:04:56.730 --> 00:04:59.020
Jadi itu berarti ketika Anda melewati fungsi di sini adalah peta.

64
00:04:59.130 --> 00:05:01.940
Anda tidak menambahkan tanda kurung buka dan tutup.

65
00:05:01.980 --> 00:05:05.760
Sebaliknya Anda hanya melewatkan fungsi itu sendiri sebagai argumen.

66
00:05:05.850 --> 00:05:08.000
Dan itu detail yang sangat penting untuk diperhatikan di sini.

67
00:05:08.020 --> 00:05:11.690
Kalau tidak, jika Anda melakukan ini, Anda akan mendapatkan semacam kesalahan ketik.

68
00:05:11.700 --> 00:05:17.010
Itu akan mengatakan hei Anda kehilangan satu atau argumen posisi atau itu akan mengatakan sesuatu

69
00:05:17.370 --> 00:05:21.110
seperti hei kita tidak dapat menerapkan panggilan splicer ke nama.

70
00:05:21.150 --> 00:05:24.270
Dan itu karena kami hanya ingin melewatkan fungsinya sendiri.

71
00:05:24.270 --> 00:05:26.240
Kami tidak ingin menjalankan fungsi itu.

72
00:05:26.250 --> 00:05:28.530
Peta lakukan itu untuk kita.

73
00:05:28.530 --> 00:05:29.970
Itulah fungsi peta.

74
00:05:29.970 --> 00:05:35.370
Dan sekarang untuk mempelajari tentang fungsi filter, fungsi filter mengembalikan iterator yang menghasilkan item-item

75
00:05:35.370 --> 00:05:39.650
iterable yang ketika Anda memasukkan item ke dalam fungsi itu benar.

76
00:05:39.990 --> 00:05:44.610
Dan itu hanya berarti Anda perlu memfilter berdasarkan fungsi yang mengembalikan benar atau salah.

77
00:05:44.610 --> 00:05:47.370
Mari kita membuat fungsi yang mengembalikan benar atau salah.

78
00:05:49.100 --> 00:05:56.180
Yah buat pemeriksaan panggilan fungsi bahkan dan dibutuhkan dalam jumlah dan semua fungsi ini kembali.

79
00:05:56.180 --> 00:06:01.050
Apakah angka ini genap atau tidak, maka kita akan mengatakan seperti yang telah kita lihat berkali-kali sebelumnya.

80
00:06:01.130 --> 00:06:05.010
Kembalikan mereka Mattu sama dengan nol.

81
00:06:05.330 --> 00:06:10.790
Karena ketika Anda membagi angka ini dengan 2 sisanya jika nol maka itu artinya bahkan jika tidak

82
00:06:10.790 --> 00:06:12.250
mereka akan mengembalikan false.

83
00:06:12.250 --> 00:06:17.170
Dan ini adalah angka ganjil yang akan saya buat daftar nomor saya.

84
00:06:18.190 --> 00:06:22.730
Sekarang akan menjadi satu dua tiga empat lima enam.

85
00:06:22.740 --> 00:06:23.630
Sekarang mari kita bayangkan.

86
00:06:23.670 --> 00:06:29.370
Saya hanya ingin mengambil angka genap dari daftar ini atau saya hanya ingin mengambil angka

87
00:06:29.370 --> 00:06:36.190
yang melewati semacam kondisi berdasarkan fungsi yang sebelumnya saya temukan adalah menggunakan fungsi filter dan sangat mirip dengan

88
00:06:36.230 --> 00:06:43.350
apa yang baru saja kita lihat map tetapi peta apa yang dipetakan menggunakan fungsi ini untuk setiap elemen dalam

89
00:06:43.800 --> 00:06:45.940
daftar filter itu sebagai gantinya.

90
00:06:45.960 --> 00:06:47.070
Apa yang akan dilakukan.

91
00:06:47.190 --> 00:06:50.620
Ini akan menyaring berdasarkan kondisi fungsi ini.

92
00:06:50.820 --> 00:06:55.620
Jadi fungsi ini ketika Anda menggunakan filter harus mengembalikan boolean harus mengembalikan benar atau salah.

93
00:06:55.680 --> 00:07:02.260
Dan kemudian kita akan lakukan di sini adalah katakan berlaku bahkan untuk norma-norma saya.

94
00:07:02.620 --> 00:07:07.890
Dan lagi seperti terakhir kali jika Anda menjalankan ini dengan sendirinya itu akan mengatakan hei Anda memiliki objek filter.

95
00:07:07.900 --> 00:07:14.050
Pada titik ini dalam ingatan Anda, alih-alih yang ingin Anda lakukan adalah mentransformasikannya ke

96
00:07:14.050 --> 00:07:22.000
daftar sehingga kami hanya mengembalikan angka genap di sini atau kami dapat mengulanginya sehingga kami dapat mengatakan untuk n dalam

97
00:07:22.030 --> 00:07:29.130
filter berlaku cek bahkan ke cetakan nama saya kita lihat di sini kita sudah mencetak 2 4 6.

98
00:07:29.190 --> 00:07:35.100
Jadi Anda bisa mengubahnya menjadi daftar atau beralih melalui hasil dari hasil yang dihasilkan

99
00:07:35.100 --> 00:07:36.850
fungsi filter ini.

100
00:07:36.990 --> 00:07:41.670
Sekarang kita telah belajar tentang fungsi peta dan fungsi filter kita dapat belajar tentang ekspresi

101
00:07:42.030 --> 00:07:45.150
lambda dan melihat dalam konteks mengapa mereka sangat berguna.

102
00:07:45.180 --> 00:07:50.850
Jadi yang akan kita lakukan adalah menunjukkan kepada Anda cara favorit saya untuk menjelaskan ekspresi lambda dan

103
00:07:50.880 --> 00:07:57.600
itu dengan mengubah fungsi langkah demi langkah menjadi ekspresi tanah dan kemudian kita akan benar-benar menjelaskan secara lebih formal apa

104
00:07:57.600 --> 00:07:58.520
ekspresi itu.

105
00:07:58.530 --> 00:08:01.180
Jadi saya akan mengambil fungsi persegi yang kita lakukan sebelumnya.

106
00:08:02.960 --> 00:08:04.860
Atau setidaknya fungsi yang sangat mirip dengannya.

107
00:08:08.930 --> 00:08:10.020
Dan mendefinisikannya di sini.

108
00:08:10.050 --> 00:08:13.230
Jadi perhatikan bagaimana saya memiliki kotak sekarang.

109
00:08:13.460 --> 00:08:18.250
Dan saya katakan hasilnya sama dengan mati rasa dengan kekuatan dua hasil kembali.

110
00:08:18.250 --> 00:08:21.940
Sekarang jika saya memanggil kuadrat, pastikan saya mengeja dengan benar.

111
00:08:22.150 --> 00:08:29.320
Jika saya memanggil Square pada nomor saya kembali ke titik awal yang akan saya lakukan sekarang perlahan-lahan selangkah demi selangkah.

112
00:08:29.320 --> 00:08:31.500
Ubah ini menjadi ekspresi.

113
00:08:31.840 --> 00:08:34.130
Jadi pertama mari kita lihat bagaimana kita bisa menyederhanakan ini.

114
00:08:34.150 --> 00:08:38.860
Saat ini saya menetapkan hasil yang sama dengan angka kekuatan dua dan kemudian mengembalikan hasil itu.

115
00:08:38.860 --> 00:08:45.720
Apa yang bisa dilakukan sebagai gantinya hanyalah menyingkirkan tugas ini dan mengembalikan mereka ke kekuatan dua.

116
00:08:45.860 --> 00:08:48.330
Dan jika saya menjalankan ini adalah hal yang persis sama.

117
00:08:48.910 --> 00:08:56.340
Dan tapi saya juga bisa lakukan adalah menulis ini semua dalam satu baris dan biasanya Anda tidak akan melakukan ini karena itu gaya yang

118
00:08:56.340 --> 00:09:01.560
buruk dan bukan oleh konvensi tetapi Python akan benar-benar mengeluh di sini dan itu akan membiarkan

119
00:09:01.560 --> 00:09:04.070
Anda menjalankan ini semua pada satu baris.

120
00:09:04.080 --> 00:09:07.540
Sekarang kita hampir dalam bentuk ekspresi tanah.

121
00:09:07.620 --> 00:09:11.750
Bahkan kita dapat dengan mudah mengubahnya menjadi ekspresi melalui cara berikut.

122
00:09:12.100 --> 00:09:17.920
Ekspresi Eelam juga dikenal sebagai fungsi anonim dan alasannya adalah karena beberapa fungsi yang Anda

123
00:09:17.940 --> 00:09:23.370
maksudkan hanya digunakan satu kali karena itu kami tidak benar-benar memberikan nama atau kami

124
00:09:23.370 --> 00:09:24.950
menggunakan kata kunci.

125
00:09:25.080 --> 00:09:29.890
Jadi alih-alih nama atau kata kunci DFA kami ganti dengan kata kunci lambda.

126
00:09:29.970 --> 00:09:34.460
Jadi saya akan menyingkirkan ini dan katakan saja lambda di sini.

127
00:09:36.370 --> 00:09:45.550
Dan kemudian kita katakan lambda numb colon dan kata kunci pengembalian pada dasarnya kita hilangkan itu karena diasumsikan bahwa kita akan mengembalikan apa pun

128
00:09:45.550 --> 00:09:49.180
yang ada di sisi lain dari usus besar ini.

129
00:09:49.480 --> 00:09:50.190
Dan di sana kita memilikinya.

130
00:09:50.200 --> 00:09:57.350
Ini sekarang ekspresi lambda dan bisa jika ia ingin menempatkannya ke kotak.

131
00:09:57.820 --> 00:09:58.510
Jalankan itu.

132
00:09:58.810 --> 00:10:00.730
Dan kemudian saya melihat Square masih berfungsi.

133
00:10:00.730 --> 00:10:06.970
Jadi izinkan saya membuat ini ke nomor lain yang kita lihat kekuatan lima adalah 25.

134
00:10:06.970 --> 00:10:10.650
Sekarang saya baru saja menyebutkan bahwa lambdas adalah fungsi anonim dan Anda biasanya tidak menyebutkannya.

135
00:10:10.660 --> 00:10:16.020
Jadi sering kali Anda tidak benar-benar melakukan kuadrat sama dengan ekspresi tanah.

136
00:10:16.020 --> 00:10:21.630
Alih-alih Anda akan menggunakannya bersama dengan fungsi lain seperti peta dan filter.

137
00:10:21.630 --> 00:10:29.660
Jadi lihat di sini dan kita melihat bahwa sebelumnya ketika saya menggunakan peta saya melewati fungsi persegi ini dan menerapkannya

138
00:10:29.870 --> 00:10:32.210
ke setiap item dalam daftar.

139
00:10:32.210 --> 00:10:37.460
Nama saya sekarang mengharuskan saya untuk benar-benar mendefinisikan Fula kuadrat di sini.

140
00:10:37.460 --> 00:10:40.970
Tetapi bagaimana jika saya hanya berniat menggunakan ini saja.

141
00:10:40.970 --> 00:10:47.240
Apakah saya ingin mengambil ruang dengan mendefinisikan fungsi ini di sini dan kemudian harus memanggilnya di sini yang dapat saya

142
00:10:47.240 --> 00:10:52.510
lakukan sebagai gantinya hanya memanggil ekspresi Alynda dan ini adalah di mana ekspresi tanah mulai bersinar.

143
00:10:52.520 --> 00:10:53.980
Dan inilah mengapa Anda akan menggunakannya.

144
00:10:54.440 --> 00:10:59.660
Saya bisa mengatakan peta Lamda mati rasa.

145
00:10:59.670 --> 00:11:01.400
Nomor dua kekuatan dua.

146
00:11:01.870 --> 00:11:08.770
Dan kemudian menerapkannya ke daftar nomor seperti nomor saya dan kemudian melemparkannya ke daftar dan kami mendapatkan kembali hal

147
00:11:08.770 --> 00:11:13.660
yang sama di sini setiap nomor dalam daftar nomor saya sekarang telah dikuadratkan.

148
00:11:13.720 --> 00:11:18.280
Sekarang kita telah melihat bagaimana kita dapat menggunakan lambda dengan fungsi peta. Mari kita cepat

149
00:11:18.280 --> 00:11:23.760
memeriksa bagaimana kita dapat menggunakan fungsi filter. Jadi di sini kita melihat bahwa kita memfilter menggunakan fungsi pemeriksa ini.

150
00:11:23.770 --> 00:11:27.010
Jadi mari kita mulai dengan mengonversi cek ini menjadi ekspresi yang akan kita

151
00:11:30.390 --> 00:11:31.250
datangi di sini.

152
00:11:31.260 --> 00:11:34.800
Kami akan menghapus nama dan DPF dan menggantinya dengan lampu.

153
00:11:34.800 --> 00:11:36.120
Kata kunci

154
00:11:36.490 --> 00:11:41.030
Hapus cetakan itu dan kemudian hapus kembali di sini dan letakkan semuanya dalam satu baris.

155
00:11:41.220 --> 00:11:47.400
Dan sekarang kita memiliki ekspresi Ahlam maka kita akan melewatkan filter ini bersama dengan angka terakhir

156
00:11:47.400 --> 00:11:50.740
yang ingin kita filter dan untuk mendapatkan hasilnya.

157
00:11:50.910 --> 00:11:57.890
Kita akan memasukkan ini ke dalam daftar dan kemudian kita jalankan kembali kita akan kembali ke 4: 6 hanya angka dalam

158
00:11:57.960 --> 00:12:00.320
ekspresi darat dapat digunakan untuk berbagai hal.

159
00:12:00.480 --> 00:12:04.260
Bayangkan Anda ingin mengambil karakter pertama dari sebuah string.

160
00:12:04.260 --> 00:12:06.300
Jadi mari kita buat daftar di sini.

161
00:12:07.480 --> 00:12:09.970
Sebenarnya kami memiliki daftar nama.

162
00:12:09.970 --> 00:12:12.520
Jadi kita punya Andy Eve Sally dan kita hanya ingin meraihnya.

163
00:12:12.790 --> 00:12:24.120
Katakanlah huruf-huruf pertama ini yang bisa saya lakukan adalah memetakan lambda dan saya dapat mengambil nama yang masuk

164
00:12:24.120 --> 00:12:30.900
dan saya ingin mengembalikan hanya indeks karakter pertama dari nama.

165
00:12:31.080 --> 00:12:32.580
Dan Anda dapat menyebutnya apa pun yang Anda inginkan.

166
00:12:32.580 --> 00:12:39.150
Tidak harus menamai itu bisa X di sini atau variabel lain seperti untuk fungsi normal dan daftar lolos

167
00:12:39.150 --> 00:12:41.880
ke daftar sehingga kita dapat melihat hasilnya.

168
00:12:42.030 --> 00:12:43.810
Dan di sana kita pergi a.

169
00:12:43.830 --> 00:12:46.840
Sekarang mari kita bayangkan saya ingin membalikkan nama sebenarnya.

170
00:12:46.980 --> 00:12:52.350
Apa yang bisa saya lakukan adalah mengatakan kolon negatif satu dan kemudian yang akan membalikkan nama

171
00:12:52.350 --> 00:12:56.660
hanya irisan sebelum Anda bahkan dapat melewatkan beberapa argumen menjadi ekspresi lambda.

172
00:12:56.670 --> 00:13:02.910
Namun perlu diingat bahwa tidak setiap fungsi yang telah kita lihat di sini misalnya cek

173
00:13:02.910 --> 00:13:05.110
ini atau splicer atau persegi.

174
00:13:05.160 --> 00:13:09.440
Setiap fungsi kompleks tunggal akan langsung diterjemahkan ke ekspresi lambda.

175
00:13:09.630 --> 00:13:13.980
Jadi Anda harus benar-benar hanya menggunakan ekspresi lambda ketika Anda masih dapat dengan mudah membacanya jika Anda akan

176
00:13:13.980 --> 00:13:15.440
kembali ke kode Anda nanti.

177
00:13:15.510 --> 00:13:19.890
Dan saat Anda mendapatkan pengalaman Python yang semakin banyak, Anda akan dapat dengan cepat menyadari apa yang

178
00:13:19.950 --> 00:13:20.900
dilakukan ekspresi lambda.

179
00:13:21.000 --> 00:13:23.590
Tetapi pada awalnya itu akan sedikit rumit pada awalnya.

180
00:13:23.730 --> 00:13:28.740
Jadi jika Anda pernah berjuang untuk mencoba mengubah fungsi normal ke ekspresi tanah, cobalah

181
00:13:28.740 --> 00:13:30.390
menggunakan fungsi normal saja.

182
00:13:30.780 --> 00:13:31.150
Baiklah.

183
00:13:31.200 --> 00:13:34.080
Itulah dasar-dasar ekspresi lambda filter peta.

184
00:13:34.080 --> 00:13:35.520
Sampai jumpa di kuliah berikutnya.
