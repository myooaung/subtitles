WEBVTT
1
1

00:00:01.412  -->  00:00:03.013
<v Instructor>Hello everyone and welcome to the</v>
2

2

00:00:03.013  -->  00:00:04.818
advanced dictionaries lecture.
3

3

00:00:04.818  -->  00:00:06.802
Unlike some of the other data structures
4

4

00:00:06.802  -->  00:00:09.482
we worked with, a lot of the useful methods
5

5

00:00:09.482  -->  00:00:11.730
available to us in dictionaries have actually
6

6

00:00:11.730  -->  00:00:13.775
have already been explored throughout this course.
7

7

00:00:13.775  -->  00:00:15.948
We're just gonna touch on a few methods
8

8

00:00:15.948  -->  00:00:17.501
for dictionaries in this lecture
9

9

00:00:17.501  -->  00:00:19.916
and also dictionary comprehensions.
10

10

00:00:19.916  -->  00:00:22.084
Let's go ahead and get started with the live code.
11

11

00:00:22.084  -->  00:00:23.539
As always the Jupyter Notebook's available
12

12

00:00:23.539  -->  00:00:27.025
for you if you wanna check it out as well.
13

13

00:00:27.025  -->  00:00:29.764
Let's start by creating a very simple dictionary.
14

14

00:00:29.764  -->  00:00:31.847
We'll just have two keys.
15

15

00:00:33.253  -->  00:00:36.420
K1 with a value of one and we'll also have
16

16

00:00:36.420  -->  00:00:38.337
K2 with a value of two.
17

17

00:00:39.933  -->  00:00:42.433
Okay, so here's a dictionary D
18

18

00:00:44.105  -->  00:00:47.807
and what we're gonna do is use that later on.
19

19

00:00:47.807  -->  00:00:49.311
So that's just to remind you for the syntax
20

20

00:00:49.311  -->  00:00:50.325
of a dictionary.
21

21

00:00:50.325  -->  00:00:53.832
If you remember from the list comprehension lecture,
22

22

00:00:53.832  -->  00:00:57.621
we were able to construct lists using list comprehension.
23

23

00:00:57.621  -->  00:01:00.069
So just like list comprehensions, dictionary data types
24

24

00:01:00.069  -->  00:01:03.085
also support their own version of comprehension.
25

25

00:01:03.085  -->  00:01:05.278
It's not super common to use it as much
26

26

00:01:05.278  -->  00:01:07.576
as list comprehension, but let's go ahead
27

27

00:01:07.576  -->  00:01:10.078
and still learn the syntax for it.
28

28

00:01:10.078  -->  00:01:12.789
So we'll start with a pair of brackets
29

29

00:01:12.789  -->  00:01:16.289
and then what you do is you define the key
30

30

00:01:18.567  -->  00:01:20.998
and then the value in the same colon notation
31

31

00:01:20.998  -->  00:01:23.148
you would for a normal dictionary,
32

32

00:01:23.148  -->  00:01:25.302
and then you write whatever conditions you want.
33

33

00:01:25.302  -->  00:01:28.219
So in this case, what I'm gonna do,
34

34

00:01:29.444  -->  00:01:31.444
is say have the key be X
35

35

00:01:33.609  -->  00:01:35.752
and the value be X squared
36

36

00:01:35.752  -->  00:01:38.169
for X in range zero up to 10.
37

37

00:01:40.464  -->  00:01:42.145
So if you noticed we've actually been able
38

38

00:01:42.145  -->  00:01:44.062
to create a dictionary through
39

39

00:01:44.062  -->  00:01:46.562
this dictionary comprehension.
40

40

00:01:48.798  -->  00:01:50.542
Another question that might come up is:
41

41

00:01:50.542  -->  00:01:52.771
what if you wanna assign keys that are not based
42

42

00:01:52.771  -->  00:01:53.938
on the values?
43

43

00:01:55.022  -->  00:01:58.407
Well you could use zip in a manner like so:
44

44

00:01:58.407  -->  00:02:01.639
so I can say, zip, maybe pass in a list,
45

45

00:02:01.639  -->  00:02:03.085
here I'll just write a short list so I don't
46

46

00:02:03.085  -->  00:02:04.985
have to write too much.
47

47

00:02:04.985  -->  00:02:07.582
And then zip it, let me close off that string,
48

48

00:02:07.582  -->  00:02:11.415
with a range, let's just do range of two here,
49

49

00:02:12.897  -->  00:02:16.953
and then we'll do [two-pole] [im-pack-ings] so we'll say,
50

50

00:02:16.953  -->  00:02:17.786
key value
51

51

00:02:20.275  -->  00:02:25.057
value squared key, and looks like I accidentally
52

52

00:02:25.057  -->  00:02:27.243
forgot parentheses there.
53

53

00:02:27.243  -->  00:02:28.533
And there you have it.
54

54

00:02:28.533  -->  00:02:30.607
So again, this really isn't as common
55

55

00:02:30.607  -->  00:02:31.764
as list comprehensions.
56

56

00:02:31.764  -->  00:02:33.799
List comprehensions you'll see all the time.
57

57

00:02:33.799  -->  00:02:36.592
Dictionary comprehensions it becomes hard to read,
58

58

00:02:36.592  -->  00:02:39.276
especially if you're trying to assign key names
59

59

00:02:39.276  -->  00:02:42.041
that are not based off values.
60

60

00:02:42.041  -->  00:02:44.421
So, it's good that you're aware of it
61

61

00:02:44.421  -->  00:02:47.219
but I wouldn't have it be your go-to
62

62

00:02:47.219  -->  00:02:48.880
throughout your coding.
63

63

00:02:48.880  -->  00:02:51.290
But who knows if it's called for and it makes sense,
64

64

00:02:51.290  -->  00:02:52.739
go for it.
65

65

00:02:52.739  -->  00:02:55.011
All right, so next up we're just gonna review
66

66

00:02:55.011  -->  00:02:57.612
iteration over keys, values and items.
67

67

00:02:57.612  -->  00:03:01.779
So dictionaries can be iterated using their iter methods.
68

68

00:03:03.178  -->  00:03:05.335
If you're using Python 2 so I can say,
69

69

00:03:05.335  -->  00:03:09.002
for K in D dot iter, and you have iteritems,
70

70

00:03:10.279  -->  00:03:12.029
itervalues, iterkeys.
71

71

00:03:13.696  -->  00:03:15.978
So here we have our iteritems.
72

72

00:03:15.978  -->  00:03:18.832
Let's just go ahead and see what that looks like.
73

73

00:03:18.832  -->  00:03:20.415
Print, we'll say K.
74

74

00:03:21.784  -->  00:03:24.177
And notice iteritems actually returns two poles
75

75

00:03:24.177  -->  00:03:26.784
of both the keys and the values.
76

76

00:03:26.784  -->  00:03:29.367
We can also do just the values.
77

77

00:03:31.947  -->  00:03:32.780
And there we have it.
78

78

00:03:32.780  -->  00:03:35.530
And we can also do just the keys.
79

79

00:03:37.001  -->  00:03:38.847
And there you have that.
80

80

00:03:38.847  -->  00:03:42.520
You can also use view methods to view the items,
81

81

00:03:42.520  -->  00:03:43.853
keys and values.
82

82

00:03:44.795  -->  00:03:47.783
If you're using Python 2 you can say,
83

83

00:03:47.783  -->  00:03:49.827
you can actually grab all delete it and just say,
84

84

00:03:49.827  -->  00:03:51.244
D dot view items.
85

85

00:03:53.305  -->  00:03:57.088
That's the function, so you have to close it off.
86

86

00:03:57.088  -->  00:04:00.744
And it'll show you this object that's a view items,
87

87

00:04:00.744  -->  00:04:03.661
and then we can also say view keys.
88

88

00:04:05.768  -->  00:04:07.592
And then you probably guessed already,
89

89

00:04:07.592  -->  00:04:09.592
you can say view values.
90

90

00:04:12.536  -->  00:04:13.635
And there you have that.
91

91

00:04:13.635  -->  00:04:16.144
So that's really all the other methods that
92

92

00:04:16.144  -->  00:04:17.097
are in dictionaries.
93

93

00:04:17.097  -->  00:04:21.160
So we haven't covered or seen throughout this course.
94

94

00:04:21.160  -->  00:04:23.648
So I wouldn't say dictionary comprehensions
95

95

00:04:23.648  -->  00:04:25.624
are super common,
96

96

00:04:25.624  -->  00:04:28.201
and depending which Python version you use,
97

97

00:04:28.201  -->  00:04:32.382
iteration over keys may be different for you.
98

98

00:04:32.382  -->  00:04:34.630
If you're using Python 3, you won't have to worry
99

99

00:04:34.630  -->  00:04:36.470
about the generation issues.
100

100

00:04:36.470  -->  00:04:37.620
And as far as view items,
101

101

00:04:37.620  -->  00:04:38.742
if you have a large dictionary,
102

102

00:04:38.742  -->  00:04:40.035
you're gonna wanna be careful calling this
103

103

00:04:40.035  -->  00:04:42.651
because you may just get a huge output.
104

104

00:04:42.651  -->  00:04:43.484
All right.
105

105

00:04:43.484  -->  00:04:46.673
Well that's it for the advanced dictionaries lecture.
106

106

00:04:46.673  -->  00:04:49.039
You should have been pretty familiar with some
107

107

00:04:49.039  -->  00:04:50.515
of these already.
108

108

00:04:50.515  -->  00:04:52.939
And we'll go ahead and stop the lecture here.
109

109

00:04:52.939  -->  00:04:54.851
As always you can check out the Jupyter Notebook
110

110

00:04:54.851  -->  00:04:57.372
for some more examples.
111

111

00:04:57.372  -->  00:04:58.516
Thank you everyone.
112

112

00:04:58.516  -->  00:05:01.266
I'll see you at the next lecture.
