1
00:00:05,490 --> 00:00:06,700
Selamat datang kembali semuanya.

2
00:00:06,930 --> 00:00:12,630
Dalam kuliah ini kita akan membahas pemrograman berorientasi objek pemrograman berorientasi

3
00:00:12,660 --> 00:00:17,690
objek atau O. P. memungkinkan pemrogram untuk membuat objek sendiri memiliki metode dan atribut.

4
00:00:17,820 --> 00:00:19,110
Dan itu cara yang hebat.

5
00:00:19,200 --> 00:00:22,230
Setelah Anda mulai menskala kode Anda untuk mengatur kode Anda.

6
00:00:22,680 --> 00:00:28,440
Jadi ingat bahwa setelah kita mendefinisikan hal-hal seperti kamus daftar string atau objek

7
00:00:28,770 --> 00:00:34,740
Python lain yang dibangun, kita dapat memanggil metode menawarkan kepada mereka sintaks nama metode

8
00:00:34,740 --> 00:00:40,980
seperti ketika kita dapat memanggil menambahkan metode dari objek daftar atau metode indeks dari tuple.

9
00:00:41,210 --> 00:00:46,940
Metode ini bertindak sebagai fungsi yang menggunakan informasi tentang objek serta objek itu sendiri untuk mengembalikan

10
00:00:46,940 --> 00:00:53,400
hasil atau menambah atau mengubah ke objek saat ini entah bagaimana seperti ketika Anda memanggil semacam itu pada daftar.

11
00:00:53,480 --> 00:00:56,570
Ia melanjutkan dan mengedit daftar saat ini.

12
00:00:56,570 --> 00:01:01,240
Misalnya ini termasuk menambahkan ke daftar atau menghitung kemunculan elemen dalam tupel.

13
00:01:01,280 --> 00:01:06,220
Jadi metode-metode itu menggunakan informasi tentang objek dan kemudian mengembalikan hasil atau mengedit dan

14
00:01:06,230 --> 00:01:13,860
mengubah objek terjadi dalam beberapa cara O. P. atau pemrograman berorientasi objek memungkinkan pengguna untuk membuat objek

15
00:01:13,860 --> 00:01:16,140
mereka sendiri dengan metode dan atribut mereka sendiri.

16
00:01:16,140 --> 00:01:21,000
Dan format umum sering membingungkan ketika pertama kali ditemukan terutama karena penggunaan

17
00:01:21,000 --> 00:01:24,790
kata kunci sendiri dan kegunaannya mungkin tidak sepenuhnya jelas.

18
00:01:24,810 --> 00:01:27,090
Pertama untuk pemula tetapi secara umum.

19
00:01:27,180 --> 00:01:32,280
Pemrograman berorientasi objek memungkinkan kita untuk membuat kode yang dapat diulang dan diatur dan

20
00:01:32,280 --> 00:01:37,350
pada skala tertentu Anda akan perlu memahami cara bekerja dengan pemrograman berorientasi objek

21
00:01:37,350 --> 00:01:43,020
untuk memastikan program Anda sendiri fleksibel dan ketika Anda bekerja perpustakaan luar Anda akan melihat

22
00:01:43,050 --> 00:01:45,510
bagaimana mereka menggunakan pemrograman berorientasi objek.

23
00:01:45,530 --> 00:01:51,920
Dan banyak kode mereka untuk skrip yang jauh lebih besar dari fungsi kode Python

24
00:01:51,920 --> 00:01:57,650
sendiri tidak benar-benar akan cukup pengulangan organisasi tugas dan objek yang diulangi dapat

25
00:01:57,650 --> 00:02:02,750
didefinisikan dengan O. P. untuk membuat kode yang lebih bermanfaat terutama di seluruh organisasi.

26
00:02:02,750 --> 00:02:07,160
Jadi mari kita periksa sintaks pemrograman berorientasi objek dan jangan khawatir tentang sepenuhnya memahami semua yang

27
00:02:07,160 --> 00:02:08,540
kami tunjukkan saat ini.

28
00:02:08,660 --> 00:02:12,920
Kami akan mengambil langkah demi langkah dan Anda tahu melalui serangkaian kuliah.

29
00:02:12,920 --> 00:02:18,050
Tetapi saat ini saya hanya ingin memberi Anda gambaran singkat tentang beberapa panggilan sintaksis khusus yang belum

30
00:02:18,050 --> 00:02:19,530
pernah kita lihat sebelumnya.

31
00:02:19,700 --> 00:02:22,040
Yang pertama adalah kata kunci kelas.

32
00:02:22,040 --> 00:02:26,060
Jadi cara dasar Anda mendefinisikan suatu objek menggunakan kata kunci kelas.

33
00:02:26,060 --> 00:02:29,230
Dan itu sebabnya terkadang objek juga disebut kelas dengan Python.

34
00:02:29,390 --> 00:02:34,280
Terkadang orang suka menukar kedua istilah itu tetapi pada dasarnya kami memiliki kata kunci kelas dan kemudian kami

35
00:02:34,280 --> 00:02:35,460
memiliki nama kelas tersebut.

36
00:02:35,510 --> 00:02:41,600
Dan perhatikan di sini bahwa nama kelas sekarang mengikuti apa yang disebut Camel casing di mana setiap kata memiliki

37
00:02:41,600 --> 00:02:46,520
huruf kapital pertama yang mengapa kami memberi tahu Anda sebelumnya untuk memiliki nama variabel dan

38
00:02:46,790 --> 00:02:48,450
nama fungsi dalam huruf kecil

39
00:02:48,560 --> 00:02:54,360
Karena kelas-kelas itu adalah kata-kata besar yang dicadangkan dan skema penamaan huruf besar.

40
00:02:54,470 --> 00:02:58,490
Jadi kami memiliki kelas dan kemudian kami mendefinisikan nama kelas.

41
00:02:58,510 --> 00:03:03,360
Hal berikutnya yang kita perhatikan di sini adalah hal ini yang sangat mirip fungsi tetapi sebenarnya disebut

42
00:03:03,360 --> 00:03:06,940
metode ketika itu di dalam suatu objek atau di dalam panggilan kelas.

43
00:03:07,210 --> 00:03:09,500
Dan di sini kita memiliki kiri sama seperti kita akan memiliki fungsi.

44
00:03:09,640 --> 00:03:15,280
Dan kami memiliki metode khusus yang disebut dalam metode dan garis bawahnya dan I-T dan ini memungkinkan

45
00:03:15,280 --> 00:03:18,230
Anda untuk membuat turunan dari objek yang sebenarnya.

46
00:03:18,310 --> 00:03:23,390
Anda akan kehilangan di sini kami memiliki kata kunci sendiri serta beberapa parameter untuk diteruskan.

47
00:03:23,470 --> 00:03:29,500
Jadi Paramo satu dan mungkin dua akan menjadi parameter yang Python mengharapkan Anda untuk lulus ketika Anda benar-benar

48
00:03:29,500 --> 00:03:31,550
membuat turunan dari objek ini.

49
00:03:31,630 --> 00:03:37,000
Dan kemudian apa yang dilakukannya adalah ketika Anda memberikannya parameter untuk parameter contoh untuk Anda

50
00:03:37,000 --> 00:03:39,340
lanjutkan dan menugaskannya ke atribut fungsi.

51
00:03:39,340 --> 00:03:45,100
Dengan cara itu Python tahu bahwa ketika Anda merujuk pada Paramo otodidak pada Anda merujuk pada atribut

52
00:03:45,220 --> 00:03:50,720
Paramo yang terhubung ke instance kelas yang sebenarnya, bukan variabel global yang disebut pram 2 dan

53
00:03:50,740 --> 00:03:55,900
kami akan menjelaskannya dalam lebih detail karena ini adalah langkah yang sangat membingungkan pada

54
00:03:55,900 --> 00:03:56,600
awalnya.

55
00:03:57,620 --> 00:04:02,630
Tetapi sekali lagi semua yang kita lakukan di sini adalah kita akan memasukkan parameter

56
00:04:02,630 --> 00:04:09,500
dan kemudian menghubungkan parameter itu dengan penggunaan diri itu yang argumen atau parameter otodidak untuk menghubungkannya ke objek aktual itu sendiri.

57
00:04:10,870 --> 00:04:15,270
Setelah itu maka kita dapat memiliki berbagai pemanggilan metode lain dan ini sangat mirip dengan fungsi dengan mengatakan

58
00:04:15,280 --> 00:04:17,870
E-F nama atau apa pun yang Anda inginkan metode Anda.

59
00:04:18,010 --> 00:04:23,680
Dan kemudian Anda memasukkan kata kunci mandiri itu lagi untuk membuat Python tahu bahwa ini bukan hanya beberapa fungsi

60
00:04:23,680 --> 00:04:28,120
itu adalah metode yang terhubung ke kelas ini dan di situlah kami menggunakan kata

61
00:04:28,180 --> 00:04:32,950
diri untuk menghubungkan metode ini ke kelas sehingga ketika Anda memanggil sesuatu seperti program otodidak yang

62
00:04:32,950 --> 00:04:37,090
tahu bahwa Anda mengacu pada program atribut yang terhubung ke kelas itu sendiri.

63
00:04:38,290 --> 00:04:42,000
OK jadi kita akan mengeksplorasi pemrograman berorientasi objek secara lebih detail.

64
00:04:42,040 --> 00:04:45,540
Ambillah langkah demi langkah dengan sangat lambat dalam seri kuliah berikutnya.

65
00:04:45,580 --> 00:04:50,410
Jadi, jika itu semua adalah blur cepat nyata bagi Anda jangan khawatir, kami akan pergi langkah demi langkah.

66
00:04:50,410 --> 00:04:52,120
Datang berikutnya kita akan melihat apakah mereka.
