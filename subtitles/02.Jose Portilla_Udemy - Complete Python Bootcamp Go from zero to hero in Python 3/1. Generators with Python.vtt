WEBVTT
1
00:00:05.600 --> 00:00:07.490
Selamat datang kembali semua orang di kuliah ini.

2
00:00:07.490 --> 00:00:10.530
Kita akan membahas generator.

3
00:00:10.600 --> 00:00:17.050
Kami telah belajar cara membuat fungsi menggunakan kata kunci DPF dan fungsi generator pernyataan pengembalian memungkinkan

4
00:00:17.050 --> 00:00:22.120
kami untuk menulis fungsi yang dapat mengirim kembali suatu nilai dan kemudian melanjutkan

5
00:00:22.120 --> 00:00:24.330
untuk mengambil kembali dari tempatnya.

6
00:00:24.340 --> 00:00:27.790
Jadi seperti yang saya sebutkan bahwa tipe fungsi adalah generator di Python.

7
00:00:27.790 --> 00:00:34.330
Ide dasarnya adalah bahwa generator memungkinkan kita untuk menghasilkan urutan nilai dari waktu ke waktu daripada harus

8
00:00:34.330 --> 00:00:37.570
membuat seluruh urutan dan menahannya di memori.

9
00:00:37.570 --> 00:00:44.540
Perbedaan utama dalam sintaksis saat pemrograman adalah penggunaan pernyataan kata kunci hasil.

10
00:00:44.630 --> 00:00:49.430
Jadi ketika fungsi generator dikompilasi, mereka menjadi objek yang mendukung semacam

11
00:00:49.430 --> 00:00:50.540
protokol iterasi.

12
00:00:50.540 --> 00:00:56.230
Itu berarti ketika mereka benar-benar dipanggil dalam kode Anda mereka tidak mengembalikan nilai dan kemudian keluar.

13
00:00:56.240 --> 00:01:00.110
Fungsi Generator akan secara otomatis menangguhkan dan melanjutkan eksekusi mereka.

14
00:01:00.120 --> 00:01:03.710
Mereka berada di sekitar titik terakhir dari generasi nilai.

15
00:01:03.710 --> 00:01:08.260
Keuntungannya di sini adalah bahwa alih-alih harus menghitung seluruh rangkaian nilai di

16
00:01:08.260 --> 00:01:13.390
muka dan menahannya dalam memori, generator menghitung satu nilai dan menunggu hingga nilai berikutnya dipanggil.

17
00:01:13.430 --> 00:01:17.740
Jadi bisa Anda bayangkan jika Anda ingin mendapatkan semua angka antara 1 dan 1 juta.

18
00:01:17.990 --> 00:01:19.240
Anda memiliki dua opsi di sini.

19
00:01:19.370 --> 00:01:24.930
Anda bisa mulai menghasilkan nilai 1 2 3 4 dan kemudian memberi mereka makan dengan cara itu.

20
00:01:24.950 --> 00:01:26.840
Misalnya dalam loop for.

21
00:01:27.010 --> 00:01:32.360
Atau Anda akan membuat daftar raksasa angka 1 hingga satu juta dan kemudian perlahan-lahan mengambil angka-angka itu

22
00:01:32.420 --> 00:01:33.200
dari memori.

23
00:01:35.170 --> 00:01:37.540
Jadi inilah yang sebenarnya dilakukan fungsi rentang.

24
00:01:37.540 --> 00:01:39.770
Cara pertama menghasilkan angka.

25
00:01:39.820 --> 00:01:43.430
Jadi, alih-alih menghasilkan daftar raksasa itu dari 1 hingga 1 juta dalam memori.

26
00:01:43.450 --> 00:01:47.890
Karena itu semacam pemborosan jika Anda menggunakan loop for bukan apa yang

27
00:01:47.890 --> 00:01:53.440
dilakukannya itu hanya melacak nomor terakhir yang Anda minta ukuran langkah yang secara default adalah satu

28
00:01:53.530 --> 00:01:59.170
untuk memberikan aliran angka yang stabil sehingga menghasilkan angka lebih waktu alih-alih membuat daftar raksasa di memori.

29
00:01:59.170 --> 00:02:03.580
Sekarang jika pengguna tidak memerlukan daftar yang harus mereka lakukan adalah mengubah generator menjadi daftar dengan rentang

30
00:02:03.580 --> 00:02:08.230
daftar dari 0 hingga 10 atau nol hingga satu juta atau apa pun nilai awal dan berhenti mereka.

31
00:02:08.530 --> 00:02:10.460
Jadi itu sebabnya ketika kami sedang mengerjakan range.

32
00:02:10.480 --> 00:02:15.220
Jika kami benar-benar ingin membawa Anda daftar angka kami harus melemparkan ke daftar karena rentang itu

33
00:02:15.220 --> 00:02:18.520
sendiri adalah generator dan itu hanya mengingat nomor terakhir yang dikirimkan.

34
00:02:18.640 --> 00:02:21.220
Dan kemudian ukuran langkah untuk menghasilkan nomor baru.

35
00:02:21.220 --> 00:02:25.770
Dengan begitu tidak perlu menyimpan daftar besar ini dalam memori dan itu membuat jauh lebih efisien.

36
00:02:26.110 --> 00:02:29.010
Jadi mari kita jelajahi sekarang bagaimana membuat generator kita sendiri.

37
00:02:29.020 --> 00:02:33.370
Kita akan membuka notebook Jupiter untuk mendapatkan pemahaman yang lebih baik dari generator.

38
00:02:33.370 --> 00:02:34.880
Kami akan membuat beberapa.

39
00:02:35.050 --> 00:02:42.900
Pertama saya akan membuat fungsi normal dan fungsi ini akan disebut create cubes.

40
00:02:43.120 --> 00:02:50.140
Dan apa fungsi ini adalah akan membuat daftar kubus dari 0 hingga dan berapa pun jumlah

41
00:02:50.140 --> 00:02:52.000
yang diminta pengguna.

42
00:02:52.000 --> 00:03:04.210
Jadi dalam hal ini kita akan mengatakan hasil sama dengan daftar dan kemudian kita akan mengatakan untuk x dalam rentang n mengambil

43
00:03:04.930 --> 00:03:08.360
hasil dan pena X pangkat tiga.

44
00:03:08.380 --> 00:03:11.740
Ini kubus dan pada akhirnya kita akan kembali.

45
00:03:11.740 --> 00:03:13.680
Hasil.

46
00:03:13.700 --> 00:03:21.210
Jadi jika saya ingin membuat kubus hingga 10 saya menjalankan ini dan saya mendapatkan kembali daftar ini.

47
00:03:21.260 --> 00:03:24.930
Jadi perhatikan apa yang terjadi ketika kita benar-benar bekerja dengan fungsi normal.

48
00:03:25.130 --> 00:03:29.740
Kita harus membuat daftar kosong dan kemudian kita pergi untuk setiap angka dari nol.

49
00:03:29.750 --> 00:03:34.210
Hingga nilai itu, kami menambahkan nilai cubed ke hasil ini.

50
00:03:34.250 --> 00:03:37.950
Jadi kami menyimpan seluruh daftar ini di memori.

51
00:03:37.950 --> 00:03:43.670
Sekarang mungkin berguna jika Anda benar-benar ingin daftar tetapi kadang-kadang mungkin Anda

52
00:03:43.760 --> 00:03:48.940
hanya ingin mengatakan untuk x di buat kubus cetak x.

53
00:03:49.150 --> 00:03:51.070
Sekarang perhatikan apa yang terjadi ketika kita mencetaknya.

54
00:03:51.070 --> 00:03:54.820
Kami sebenarnya hanya membutuhkan satu nilai pada satu waktu untuk mencetaknya.

55
00:03:54.820 --> 00:03:57.810
Kami tidak perlu seluruh daftar disimpan dalam memori.

56
00:03:57.820 --> 00:04:03.160
Sebenarnya kita hanya perlu nilai sebelumnya dan lalu rumus apa pun untuk mendapatkan

57
00:04:03.160 --> 00:04:06.140
nilai berikutnya untuk menghasilkan semua kubus ini.

58
00:04:06.190 --> 00:04:11.350
Jadi daripada benar-benar membuat daftar raksasa ini di memori, akan lebih baik jika kita hanya menghasilkan

59
00:04:11.350 --> 00:04:12.920
angka kubus yang sebenarnya.

60
00:04:13.000 --> 00:04:14.410
Jadi itulah yang akan kita lakukan sekarang.

61
00:04:15.810 --> 00:04:17.730
Jadi mari kita kembali ke fungsi create cubes ini.

62
00:04:17.730 --> 00:04:19.420
Saya akan memperbesar sini.

63
00:04:19.470 --> 00:04:22.980
Saya tidak perlu daftar lagi karena saya tidak akan menyimpan semua ini dalam memori.

64
00:04:22.980 --> 00:04:28.410
Alih-alih melakukan penghematan untuk kisaran x dan bukannya mengembalikan hasilnya.

65
00:04:28.410 --> 00:04:36.030
Pada akhirnya saya hanya akan memanggil hasil dan ini adalah kata kunci bibir y.

66
00:04:36.180 --> 00:04:38.130
Aku dan aku.

67
00:04:38.230 --> 00:04:43.350
Saya akan menghasilkan nilai x kubus dan kemudian jika saya menjalankan buat kubus.

68
00:04:43.350 --> 00:04:47.630
Sekarang saya mendapatkan kembali hasil yang sama seperti yang dikatakan untuk X dan membuat kubus.

69
00:04:47.700 --> 00:04:53.910
Cetak x lalu dapatkan kembali hal yang sama persis kecuali sekarang membuat kubus adalah cara yang lebih hemat memori.

70
00:04:53.910 --> 00:04:59.610
Cara pertama jika saya telah lulus maka angka yang sangat besar di sini harus membuat seluruh daftar dalam memori

71
00:04:59.610 --> 00:05:04.800
nomor kubus dari 0 hingga 10.000 dan kemudian dari sana jika kita ingin beralih melalui itu kita

72
00:05:04.890 --> 00:05:07.370
akan memiliki daftar itu dalam memori .

73
00:05:07.500 --> 00:05:12.610
Tapi sekarang saya tidak memiliki daftar ini di memori, bukan hanya menghasilkan nilai saat mereka datang.

74
00:05:12.780 --> 00:05:14.040
Jadi, buat kubus.

75
00:05:14.040 --> 00:05:18.510
Berikut adalah generator yang menghasilkan nilai-nilai tersebut sesuai kebutuhan Anda.

76
00:05:18.510 --> 00:05:19.320
Sekarang perlu diingat.

77
00:05:19.390 --> 00:05:21.160
Mari kita ubah ini menjadi 10.

78
00:05:21.300 --> 00:05:26.290
Jika saya hanya memanggil membuat kubus dengan sendirinya saya tidak lagi melihat daftar itu.

79
00:05:26.370 --> 00:05:26.930
Saya hanya melihat.

80
00:05:26.940 --> 00:05:32.130
Hei, Anda memiliki objek generator di sini di lokasi ini dalam memori dan Anda perlu mengulanginya.

81
00:05:32.250 --> 00:05:37.830
Jika Anda benar-benar menginginkan daftar angka jika akhirnya hanya menginginkan daftar aktualnya sendiri, Anda

82
00:05:37.830 --> 00:05:41.170
dapat memasukkannya ke daftar dan kembali ke daftar.

83
00:05:41.520 --> 00:05:47.980
Tetapi membuat kubus itu sendiri memiliki opsi hanya menghasilkannya agar lebih hemat memori.

84
00:05:48.040 --> 00:05:53.940
Jadi sekarang mari kita buat contoh lain yang menghitung urutan Fibonacci dan urutan Fibonacci.

85
00:05:53.940 --> 00:06:01.390
Semua itu adalah jika Anda memiliki angka yang diikuti oleh angka B maka B didefinisikan sebagai jumlah dari

86
00:06:01.390 --> 00:06:02.700
dua angka terakhir.

87
00:06:02.740 --> 00:06:05.530
Jadi mari kita tunjukkan apa yang saya maksud dengan itu.

88
00:06:05.620 --> 00:06:13.590
Kita akan mengatakan F menghasilkan fib untuk menghasilkan Fibonacci yang akan dihasilkan jika Anda benar-benar merangkai hingga

89
00:06:13.590 --> 00:06:17.990
sehingga kita bisa mulai dengan sama dengan 1.

90
00:06:18.100 --> 00:06:24.580
Karena satu urutan Fibonacci lainnya dimulai dengan nol yang sama dan karena 1 itu

91
00:06:24.580 --> 00:06:37.010
benar-benar terserah Anda dan kami akan mengatakan untuk saya dalam kisaran dan saya akan menghasilkan dan kemudian untuk benar-benar menghitung ulang dan B untuk urutan Fibonacci yang

92
00:06:37.010 --> 00:06:39.350
bisa saya lakukan pengikut.

93
00:06:39.590 --> 00:06:47.640
Saya dapat mengatakan melakukan sedikit tuple yang cocok di sini b akan sama dengan menjadi b plus.

94
00:06:47.780 --> 00:06:52.850
Dan ini memungkinkan saya untuk menghindari masalah dengan mencoba menugaskan kembali dan b semua mereka masih

95
00:06:52.850 --> 00:06:53.740
bermain-main dengan.

96
00:06:54.110 --> 00:06:55.800
Jadi mari kita telusuri apa yang terjadi di sini.

97
00:06:56.000 --> 00:07:02.780
Generasi urutan Fibonacci sama dengan 1 sama dengan 1 untuk Rentang Besi dan kita menghasilkan a

98
00:07:02.780 --> 00:07:10.760
dan kemudian kita akan mengatur ulang a menjadi sama dengan B dan kemudian B akan mengalahkan jumlah A-plus B. sebelumnya

99
00:07:10.760 --> 00:07:19.310
Jadi dalam kasus ini babak pertama kita memiliki 1 1 dan kemudian kita memiliki 1 2 dan kemudian

100
00:07:19.310 --> 00:07:30.460
dari sana kita memiliki 2 3 kemudian 3 5 5 8 13:21 kita akan dapat melihat ini ketika kita menjalankan ini kita akan mengatakan untuk

101
00:07:30.540 --> 00:07:39.870
angka dalam menghasilkan notchy hingga 10 persen jumlahnya dan kami berada di tempat kami dapat melihat Urutan Fibonacci ini terjadi.

102
00:07:39.880 --> 00:07:44.290
Jadi bagaimana jika ini adalah fungsi normal hanya untuk menunjukkan kepada Anda perbedaan antara menghasilkan

103
00:07:44.680 --> 00:07:46.240
sesuatu dan membuat fungsi normal.

104
00:07:46.330 --> 00:07:49.100
Dalam hal ini kita harus menyimpan semuanya.

105
00:07:49.100 --> 00:07:52.140
Jadi kita akan memiliki output yang sama dengan beberapa daftar kosong.

106
00:07:52.300 --> 00:07:59.110
Dan alih-alih menghasilkan semua yang kami katakan output pand A.

107
00:07:59.430 --> 00:08:03.630
Dan kemudian setelah kami melakukan itu seluruh empat loop saya akhirnya akan mengembalikan output.

108
00:08:03.870 --> 00:08:06.610
Dan jika saya menjalankan ini terlihat sama dengan hasilnya.

109
00:08:06.720 --> 00:08:12.210
Tapi ini jauh lebih sedikit mode ingatan karena saya memegang semua yang ada dalam daftar di

110
00:08:12.210 --> 00:08:14.630
memori alih-alih hanya menghasilkannya saat saya membutuhkannya.

111
00:08:14.640 --> 00:08:19.980
Jadi ketika Anda ingin mengulang melalui semacam urutan generasi menjadi jauh lebih baik untuk menggunakan

112
00:08:19.980 --> 00:08:23.520
kata kunci hasil ini daripada menyimpan hal dalam daftar.

113
00:08:23.520 --> 00:08:29.340
Terutama jika Anda mengharapkan angka itu menjadi sangat besar dan jika Anda membuat daftar besar.

114
00:08:29.490 --> 00:08:35.520
Jadi kunci untuk sepenuhnya memahami generator adalah fungsi selanjutnya dan seluruh fungsi.

115
00:08:35.520 --> 00:08:37.430
Jadi mari kita jelajahi konsep-konsep itu sekarang.

116
00:08:38.250 --> 00:08:40.360
Akan membuat beberapa sel kosong baru di sini.

117
00:08:40.770 --> 00:08:42.680
Yah pertama-tama mulailah dengan fungsi berikutnya.

118
00:08:42.990 --> 00:08:52.170
Jadi untuk melakukan itu saya akan membuat generator yang sangat sederhana dan semua generator ini melakukannya untuk x

119
00:08:52.860 --> 00:08:54.500
dalam kisaran 3.

120
00:08:54.600 --> 00:08:56.570
Jadi saya sudah menentukan rentang.

121
00:08:56.580 --> 00:08:58.330
Kami tidak akan memiliki ini atau menekan itu.

122
00:08:58.620 --> 00:09:03.340
Saya akan menghasilkan X jadi apa artinya itu sebenarnya.

123
00:09:03.340 --> 00:09:12.380
Itu berarti jika saya mengatakan untuk x dalam gen sederhana Prancis sebenarnya katakanlah angka sehingga kita tidak bingung dengan x di sana

124
00:09:12.380 --> 00:09:18.850
kita mengatakan untuk nomor dalam nomor cetak gen sederhana saya mendapatkan kembali 0 1 2.

125
00:09:18.870 --> 00:09:27.020
Jadi sekarang mari kita beri G sama dengan instance baru gen sederhana.

126
00:09:27.450 --> 00:09:30.520
Jadi di sini saya sebenarnya memanggil gen sederhana di sini.

127
00:09:32.260 --> 00:09:34.620
Dan mari kita lihat G.

128
00:09:34.740 --> 00:09:36.410
Apakah objek generator ini.

129
00:09:36.640 --> 00:09:42.970
Dan saya dapat meminta G berikutnya dan mari kita cetak hasilnya di sini.

130
00:09:44.310 --> 00:09:46.420
Dan saya kembali nol.

131
00:09:46.480 --> 00:09:53.910
Jadi, jika saya meminta yang berikutnya setelah itu saya kembali 1 dan ini adalah apa yang dilakukan objek generator secara internal

132
00:09:53.910 --> 00:09:56.640
ketika Anda memanggil kata kunci yang menghasilkan.

133
00:09:56.640 --> 00:10:01.490
Itu mengingat apa yang sebelumnya dan kemudian mengembalikan nilai berikutnya yang diberikan formula kemudian.

134
00:10:01.500 --> 00:10:02.280
Mengikuti.

135
00:10:02.370 --> 00:10:09.990
Itu tidak menyimpan semua dalam memori sehingga kita dapat mencetak Next G ketika kita kembali dan akhirnya

136
00:10:09.990 --> 00:10:14.520
Anda akan melihat karena kami hanya naik ke tiga.

137
00:10:14.580 --> 00:10:20.670
Itu akan mengatakan berhenti iterasi karena setelah menghasilkan semua nilai selanjutnya memanggil kesalahan iterasi berhenti.

138
00:10:20.940 --> 00:10:25.780
Dan apa yang dilakukan kesalahan ini adalah memberi tahu kami bahwa semua nilai telah dihasilkan.

139
00:10:25.800 --> 00:10:30.780
Sekarang Anda mungkin bertanya-tanya mengapa kami tidak mendapatkan kesalahan ini saat menggunakan for loop nets karena for

140
00:10:30.870 --> 00:10:34.220
for loop secara otomatis menangkap kesalahan ini dan berhenti memanggil berikutnya.

141
00:10:34.230 --> 00:10:38.940
Jadi ini hal lain yang menarik untuk dipikirkan ketika Anda benar-benar memanggil ini untuk loop pada

142
00:10:38.940 --> 00:10:39.720
generator ini.

143
00:10:39.750 --> 00:10:44.340
Apa yang dilakukan loop adalah mengatakan hei beri aku hal berikutnya, hei beri aku hal berikutnya, hei beri

144
00:10:44.340 --> 00:10:45.310
aku hal berikutnya.

145
00:10:45.570 --> 00:10:51.560
Jadi itulah yang dilakukan 4 ini secara internal pada objek generator ini.

146
00:10:51.580 --> 00:11:02.500
Akhirnya saya ingin menunjukkan kepada Anda seluruh fungsi jadi I T E R dan fungsi pada dasarnya memungkinkan kita untuk secara otomatis beralih melalui

147
00:11:02.500 --> 00:11:06.220
objek normal yang mungkin tidak Anda harapkan.

148
00:11:06.220 --> 00:11:13.000
Jadi saya benar-benar akan mengatakan pertama s sama dengan halo dan saya sudah tahu saya

149
00:11:13.000 --> 00:11:20.110
bisa beralih melalui string sehingga saya bisa mengatakan untuk surat dan mencetak surat dan saya kembali.

150
00:11:20.150 --> 00:11:22.010
H E L L O.

151
00:11:22.510 --> 00:11:28.310
Sekarang sayangnya itu tidak berarti string itu sendiri akan dapat beralih ke fungsi berikutnya.

152
00:11:28.310 --> 00:11:34.890
Bahkan jika saya katakan selanjutnya pada s mereka akan mengatakan hei objek string ini adalah iterator.

153
00:11:34.970 --> 00:11:40.190
Jadi maksudnya ini adalah bahwa objek string tidak mendukung iterasi karena kita telah

154
00:11:40.190 --> 00:11:45.620
melalui for for loop di atasnya tetapi kita tidak bisa secara langsung mengulanginya seperti yang

155
00:11:45.620 --> 00:11:51.570
kita lakukan jika generator menggunakan fungsi selanjutnya untuk melakukan itu pada dasarnya mengubah string ini. menjadi generator.

156
00:11:52.040 --> 00:11:58.790
Jadi kita bisa beralih lebih dari itu kita akan mengatakan mari kita menggarisbawahinya dan memanggil fungsi di atasnya.

157
00:11:58.790 --> 00:12:07.790
Dan kemudian sekarang kita dapat memanggil versi berikutnya untuk mendapatkan kembali h dan kemudian kita memanggil kembali berikutnya untuk

158
00:12:07.790 --> 00:12:08.820
versi berikutnya.

159
00:12:08.960 --> 00:12:10.190
Dan seterusnya.

160
00:12:10.190 --> 00:12:14.990
Jadi sekarang Anda tahu bahwa Anda tahu cara mengubah objek yang dapat diubah menjadi iterator sendiri.

161
00:12:15.170 --> 00:12:20.270
Dan saya tahu ada banyak jenis semantik aneh di sini bahwa iterators iterable dan generator tetapi

162
00:12:20.270 --> 00:12:24.680
takeaway utama dari kuliah ini benar-benar ada hubungannya dengan kata kunci hasil.

163
00:12:24.680 --> 00:12:28.580
Jadi jika Anda gulir ke belakang jika Anda benar-benar akan mengambil satu hal

164
00:12:28.580 --> 00:12:31.940
dari kuliah ini, itu benar-benar cara membuat generator sendiri dengan hasil.

165
00:12:32.030 --> 00:12:36.590
Biasanya ketika Anda bekerja dengan kode Anda tidak akan benar-benar menggunakan fungsi berikutnya yang sering

166
00:12:36.830 --> 00:12:39.140
Anda tidak akan sering menggunakan fungsi itu.

167
00:12:39.260 --> 00:12:42.880
Benar-benar mereka dipanggil di belakang layar untuk Anda yang sudah menggunakannya.

168
00:12:42.890 --> 00:12:47.050
Apakah ini kata kunci hasil ketika Anda akhirnya menemukan generator Anda sendiri.

169
00:12:47.060 --> 00:12:51.950
Anda dapat memeriksa buku catatan yang memiliki dua tautan di bagian bawah untuk jawaban Stack Overflow

170
00:12:52.280 --> 00:12:55.000
yang sangat berguna yang menjelaskan beberapa aspek generator.

171
00:12:55.160 --> 00:12:59.120
Selanjutnya, kita akan dengan cepat memeriksa pengetahuan Anda untuk memastikan bahwa apa yang kami bahas

172
00:12:59.120 --> 00:13:01.310
tentang kata kunci hasil terjebak dengan Anda.

173
00:13:01.310 --> 00:13:04.700
Jadi kita akan melihat Anda di kuliah berikutnya di mana kita membahas beberapa pertanyaan generator

174
00:13:04.760 --> 00:13:05.350
Kami akan melihat apakah ada.
