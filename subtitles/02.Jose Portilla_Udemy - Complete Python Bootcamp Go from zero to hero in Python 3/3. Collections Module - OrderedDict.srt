1
1

00:00:01,335  -->  00:00:02,168
<v Instructor>Hello everyone,</v>
2

2

00:00:02,168  -->  00:00:04,901
and welcome to the Ordered Dictionary lecture.
3

3

00:00:04,901  -->  00:00:07,671
In the last lecture we covered the default dictionary
4

4

00:00:07,671  -->  00:00:09,594
and now we're gonna cover the ordered dictionary.
5

5

00:00:09,594  -->  00:00:10,962
Which is a dictionary sub-class
6

6

00:00:10,962  -->  00:00:12,845
that actually remembers the order
7

7

00:00:12,845  -->  00:00:14,779
in which the contents are added.
8

8

00:00:14,779  -->  00:00:17,224
If you remember, one of the recovering dictionary,
9

9

00:00:17,224  -->  00:00:20,262
they were mappings and they didn't retain any order
10

10

00:00:20,262  -->  00:00:24,266
as to how you added the keys or values to the dictionary.
11

11

00:00:24,266  -->  00:00:27,507
Well, if the ordered dictionary, you will retain the order.
12

12

00:00:27,507  -->  00:00:29,018
Let's go ahead and check out what
13

13

00:00:29,018  -->  00:00:30,610
a normal dictionary looks like.
14

14

00:00:30,610  -->  00:00:33,287
So if I create a normal dictionary,
15

15

00:00:33,287  -->  00:00:36,635
using curly brackets and then let's assign
16

16

00:00:36,635  -->  00:00:39,385
a key, a, to have the value, one.
17

17

00:00:42,889  -->  00:00:46,398
We'll assign a key, b, to have the value,
18

18

00:00:46,398  -->  00:00:48,898
let's say, two, and close off.
19

19

00:00:51,961  -->  00:00:54,878
Finally, c, to have a value, three.
20

20

00:00:59,193  -->  00:01:01,131
If you take a look at that dictionary,
21

21

00:01:01,131  -->  00:01:03,881
we have a, b, c, one, two, three.
22

22

00:01:05,004  -->  00:01:08,921
I'll do couple more, just to make sure there is
23

23

00:01:11,482  -->  00:01:15,649
some mixing up of the order in the mapping eventually.
24

24

00:01:18,397  -->  00:01:19,897
So, five, alright.
25

25

00:01:21,686  -->  00:01:23,769
Now if I say, for k,v and
26

26

00:01:27,184  -->  00:01:28,851
d.items, prints k,v.
27

27

00:01:34,788  -->  00:01:38,242
Notice we don't get the order that we put the items in,
28

28

00:01:38,242  -->  00:01:41,155
so we get one, three, two, five, four.
29

29

00:01:41,155  -->  00:01:43,010
The order is being mixed up because
30

30

00:01:43,010  -->  00:01:45,223
a normal dictionary is just the mapping,
31

31

00:01:45,223  -->  00:01:46,924
it doesn't retain the order.
32

32

00:01:46,924  -->  00:01:51,441
But, if we import an ordered dictionary from the collection,
33

33

00:01:51,441  -->  00:01:55,441
so we say, from collections, import OrderedDict.
34

34

00:02:00,618  -->  00:02:04,451
We can say d is equal to an ordered dictionary
35

35

00:02:05,721  -->  00:02:10,016
and now we're gonna do the exact same thing.
36

36

00:02:10,016  -->  00:02:14,183
Copy, paste this here, add the elements in that order
37

37

00:02:15,040  -->  00:02:18,087
and you'll notice when we say,
38

38

00:02:18,087  -->  00:02:21,670
for key value and d.items, print key value,
39

39

00:02:26,327  -->  00:02:28,583
the order is retained.
40

40

00:02:28,583  -->  00:02:31,684
So something that's interesting with this sequence order
41

41

00:02:31,684  -->  00:02:33,492
is that since the regular dictionary
42

42

00:02:33,492  -->  00:02:36,537
only looks at contents when testing for equality,
43

43

00:02:36,537  -->  00:02:38,676
in ordered dictionary, we'll also consider
44

44

00:02:38,676  -->  00:02:41,099
the order of the items as they were added.
45

45

00:02:41,099  -->  00:02:44,766
For example, if I were to make a dictionary,
46

46

00:02:46,675  -->  00:02:48,925
let's say, dictionary is d1
47

47

00:02:52,534  -->  00:02:54,867
and let's put an a equal one
48

48

00:02:57,884  -->  00:03:00,884
and have b equal two, then I'm gonna
49

49

00:03:02,137  -->  00:03:04,804
make another ordered dictionary.
50

50

00:03:05,838  -->  00:03:08,505
It's gonna have b equal two, d2,
51

51

00:03:13,740  -->  00:03:17,073
of b equal one, whoops, excuse me, of a.
52

52

00:03:19,737  -->  00:03:21,314
Alright, so you notice these dictionaries,
53

53

00:03:21,314  -->  00:03:24,338
as far as the key value pairs are the same.
54

54

00:03:24,338  -->  00:03:28,088
So if I print d1 equal d2, it'll return true.
55

55

00:03:31,846  -->  00:03:35,293
But, if I make these dictionaries,
56

56

00:03:35,293  -->  00:03:39,025
not normal dictionaries, but ordered dictionaries,
57

57

00:03:39,025  -->  00:03:41,308
so I'll make d1, an ordered dictionary,
58

58

00:03:41,308  -->  00:03:43,746
I'll make d2, an ordered dictionary
59

59

00:03:43,746  -->  00:03:46,677
and then run this statement again,
60

60

00:03:46,677  -->  00:03:48,119
it's gonna be false because they
61

61

00:03:48,119  -->  00:03:49,805
were added in a different order.
62

62

00:03:49,805  -->  00:03:51,353
So it's definitely something to keep in mind
63

63

00:03:51,353  -->  00:03:53,408
as you work for ordered dictionaries.
64

64

00:03:53,408  -->  00:03:56,036
Technically speaking, these two ordered dictionaries
65

65

00:03:56,036  -->  00:03:58,703
are not true, or not equal to each other.
66

66

00:03:58,703  -->  00:04:00,396
But if they were just normal dictionaries,
67

67

00:04:00,396  -->  00:04:02,778
they would be equal to each other.
68

68

00:04:02,778  -->  00:04:06,376
Okay, so up next, the last thing we're gonna cover,
69

69

00:04:06,376  -->  00:04:10,930
as far as the collections module, will be the namedtuple.
70

70

00:04:10,930  -->  00:04:13,882
Alright, I'll see you at the next lecture.
