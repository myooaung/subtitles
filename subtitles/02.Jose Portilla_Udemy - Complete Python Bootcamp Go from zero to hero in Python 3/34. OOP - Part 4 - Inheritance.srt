1
1

00:00:01,797  -->  00:00:03,573
<v Instructor>Hello and welcome to part four</v>
2

2

00:00:03,573  -->  00:00:07,633
of the Object Oriented Programming section of this course.
3

3

00:00:07,633  -->  00:00:10,805
So now we're gonna learn about inheritance.
4

4

00:00:10,805  -->  00:00:13,811
And inheritance is a way to form new classes using classes
5

5

00:00:13,811  -->  00:00:15,525
that have already been defined.
6

6

00:00:15,525  -->  00:00:17,042
And then these newly formed classes
7

7

00:00:17,042  -->  00:00:19,334
are called derived classes.
8

8

00:00:19,334  -->  00:00:22,356
And the classes that we derive from are called base classes.
9

9

00:00:22,356  -->  00:00:23,575
So you have your base classes and
10

10

00:00:23,575  -->  00:00:26,360
then you can create the derive classes from them.
11

11

00:00:26,360  -->  00:00:28,443
So a lot of important benefits of inheritance
12

12

00:00:28,443  -->  00:00:31,773
is that you're able to use code again and reuse it.
13

13

00:00:31,773  -->  00:00:33,155
And then you can reduce the complexity
14

14

00:00:33,155  -->  00:00:35,892
of your overall programme code.
15

15

00:00:35,892  -->  00:00:39,460
Okay. So let's go ahead and break down this idea
16

16

00:00:39,460  -->  00:00:42,543
in the form of a live coding example.
17

17

00:00:43,826  -->  00:00:46,640
So what I'm gonna do is incorporate some of our previous
18

18

00:00:46,640  -->  00:00:48,184
work from the Dog class.
19

19

00:00:48,184  -->  00:00:51,493
But first, I'm gonna create a new class.
20

20

00:00:51,493  -->  00:00:52,743
Call it Animal.
21

21

00:00:53,787  -->  00:00:56,253
Hopefully you remember the syntax for creating class.
22

22

00:00:56,253  -->  00:00:57,879
So we use class key word,
23

23

00:00:57,879  -->  00:01:01,558
capitalise the name of your class, pass in the object.
24

24

00:01:01,558  -->  00:01:02,812
Key word.
25

25

00:01:02,812  -->  00:01:04,222
Okay. So now let's go ahead
26

26

00:01:04,222  -->  00:01:07,417
and create the initialization method,
27

27

00:01:07,417  -->  00:01:10,953
underscore underscore init underscore underscore,
28

28

00:01:10,953  -->  00:01:12,036
pass in self.
29

29

00:01:14,262  -->  00:01:15,095
And now what I'm going to say is just
30

30

00:01:15,095  -->  00:01:17,196
have it simply say print
31

31

00:01:17,196  -->  00:01:18,446
Animal created.
32

32

00:01:19,630  -->  00:01:24,042
So note, I am not actually passing in any attributes.
33

33

00:01:24,042  -->  00:01:25,696
It's just gonna be a basic
34

34

00:01:25,696  -->  00:01:28,224
print Animal created statement there.
35

35

00:01:28,224  -->  00:01:31,891
So that means if I say A is equal to Animal,
36

36

00:01:34,853  -->  00:01:36,315
Animal created is printed.
37

37

00:01:36,315  -->  00:01:37,980
But notice A.
38

38

00:01:37,980  -->  00:01:39,010
So I click dot tab.
39

39

00:01:39,010  -->  00:01:42,469
It actually has no attributes associated with it.
40

40

00:01:42,469  -->  00:01:45,356
So this is just a super simple example of a class.
41

41

00:01:45,356  -->  00:01:48,230
And usually when you have print statements like this
42

42

00:01:48,230  -->  00:01:51,203
within your initialization method,
43

43

00:01:51,203  -->  00:01:52,926
but this is just to show you later on
44

44

00:01:52,926  -->  00:01:55,424
how inheritance is actually working.
45

45

00:01:55,424  -->  00:01:57,287
So I'm gonna add two more methods.
46

46

00:01:57,287  -->  00:01:58,954
One called Who am I.
47

47

00:02:03,815  -->  00:02:05,603
And it's gonna take it to self.
48

48

00:02:05,603  -->  00:02:07,936
And it's gonna print Animal,
49

49

00:02:09,765  -->  00:02:11,159
and again these print statements,
50

50

00:02:11,159  -->  00:02:12,725
they're just to show later on
51

51

00:02:12,725  -->  00:02:15,616
how the inheritance is working.
52

52

00:02:15,616  -->  00:02:19,175
And then one more method called Eat.
53

53

00:02:19,175  -->  00:02:20,559
Again all methods within a class
54

54

00:02:20,559  -->  00:02:22,781
always take self as an argument.
55

55

00:02:22,781  -->  00:02:25,802
And then I'm going to print here,
56

56

00:02:25,802  -->  00:02:26,885
print Eating.
57

57

00:02:29,586  -->  00:02:32,896
Okay. So here I have my pretty basic animal class.
58

58

00:02:32,896  -->  00:02:36,229
And now, I'm going to create or recreate
59

59

00:02:37,231  -->  00:02:38,398
the Dog class.
60

60

00:02:39,816  -->  00:02:42,349
But if you notice, I'm not gonna pass objects.
61

61

00:02:42,349  -->  00:02:47,111
I'm going to pass in or inherit the Animal class.
62

62

00:02:47,111  -->  00:02:48,444
That base class.
63

63

00:02:49,334  -->  00:02:51,226
And so the syntax for this
64

64

00:02:51,226  -->  00:02:52,976
when I initialise it,
65

65

00:02:54,010  -->  00:02:56,384
I'm gonna have my init method
66

66

00:02:56,384  -->  00:02:58,467
gonna take in self again.
67

67

00:02:59,381  -->  00:03:03,338
Now what's going to happen is I'm actually going to
68

68

00:03:03,338  -->  00:03:05,755
initialise an Animal instance
69

69

00:03:09,756  -->  00:03:11,923
by calling the init method
70

70

00:03:13,466  -->  00:03:15,856
with self attached.
71

71

00:03:15,856  -->  00:03:18,439
And then I'm going to say print
72

72

00:03:19,458  -->  00:03:20,458
Dog created.
73

73

00:03:24,314  -->  00:03:27,509
And then I'm going to put in two more methods
74

74

00:03:27,509  -->  00:03:28,759
called who am I
75

75

00:03:32,052  -->  00:03:35,185
in this case for the Dog class self.
76

76

00:03:35,185  -->  00:03:36,852
I'm gonna print Dog.
77

77

00:03:38,652  -->  00:03:41,652
The one more I'm gonna say def bark.
78

78

00:03:42,825  -->  00:03:44,922
It's gonna take in self.
79

79

00:03:44,922  -->  00:03:47,422
And it's gonna print say woof.
80

80

00:03:51,299  -->  00:03:53,990
Okay. So I have my Animal class.
81

81

00:03:53,990  -->  00:03:55,178
And I'm going to zoom out of it
82

82

00:03:55,178  -->  00:03:57,400
so we can see both of them at the same time.
83

83

00:03:57,400  -->  00:04:00,774
My Animal class and my Dog class.
84

84

00:04:00,774  -->  00:04:03,978
And let's go ahead and create an instance
85

85

00:04:03,978  -->  00:04:07,190
of the Dog class or Dog object.
86

86

00:04:07,190  -->  00:04:08,319
So what do we think is actually going
87

87

00:04:08,319  -->  00:04:09,512
to happen when I click this?
88

88

00:04:09,512  -->  00:04:11,872
So let's kind of work backwards here.
89

89

00:04:11,872  -->  00:04:13,125
I have my Dog.
90

90

00:04:13,125  -->  00:04:15,318
Remember, it's inheriting from Animal.
91

91

00:04:15,318  -->  00:04:17,671
And when I initialise the Dog class,
92

92

00:04:17,671  -->  00:04:19,749
I call the initialised method on Animal,
93

93

00:04:19,749  -->  00:04:22,702
which prints Animal Created.
94

94

00:04:22,702  -->  00:04:26,084
But I also print Dog Created within the Dog class.
95

95

00:04:26,084  -->  00:04:28,487
So I should see the printed statements;
96

96

00:04:28,487  -->  00:04:31,382
Animal created, Dog created.
97

97

00:04:31,382  -->  00:04:33,764
And so that's what we get up there.
98

98

00:04:33,764  -->  00:04:36,847
Now what happens if I say d who am I?
99

99

00:04:40,122  -->  00:04:43,917
Is it gonna say Dog or is it gonna say Animal?
100

100

00:04:43,917  -->  00:04:45,385
Well something to note here is that
101

101

00:04:45,385  -->  00:04:49,252
since I'm calling Dog and Dog has it's own who am I method,
102

102

00:04:49,252  -->  00:04:52,390
that's gonna override any instances of
103

103

00:04:52,390  -->  00:04:54,275
the inherited who am I method.
104

104

00:04:54,275  -->  00:04:55,692
So we'll say Dog.
105

105

00:04:57,646  -->  00:05:01,256
But, if you notice, I don't have an Eat method
106

106

00:05:01,256  -->  00:05:02,929
within my Dog class.
107

107

00:05:02,929  -->  00:05:05,627
But I do have it within my Animal class.
108

108

00:05:05,627  -->  00:05:08,784
And since it inherited the Animal class,
109

109

00:05:08,784  -->  00:05:11,965
when I construct the Dog, it will still have
110

110

00:05:11,965  -->  00:05:14,823
the Eat method available to it.
111

111

00:05:14,823  -->  00:05:17,692
So I hit Eat and then it'll print Eating.
112

112

00:05:17,692  -->  00:05:20,897
But I can also have additional methods
113

113

00:05:20,897  -->  00:05:25,168
that I only have existent in the Dog class.
114

114

00:05:25,168  -->  00:05:26,412
So let's break this down again.
115

115

00:05:26,412  -->  00:05:29,996
In this example, we have two classes, Animal and Dog.
116

116

00:05:29,996  -->  00:05:31,453
The Animal is the base class
117

117

00:05:31,453  -->  00:05:33,568
and the Dog is the derived class.
118

118

00:05:33,568  -->  00:05:35,864
And the derive class inherit,
119

119

00:05:35,864  -->  00:05:38,728
inherits functionality of the base class.
120

120

00:05:38,728  -->  00:05:41,955
And this is shown primarily through this Eat method.
121

121

00:05:41,955  -->  00:05:44,893
And the derive class can modify existing behaviour
122

122

00:05:44,893  -->  00:05:47,162
of the base class.
123

123

00:05:47,162  -->  00:05:50,396
So I modified it by overriding using the who am I method
124

124

00:05:50,396  -->  00:05:52,466
within the Dog class.
125

125

00:05:52,466  -->  00:05:54,799
Okay. So that's inheritance.
126

126

00:05:56,094  -->  00:05:58,356
So remember it's a way to form new classes using classes
127

127

00:05:58,356  -->  00:06:00,010
that have already been defined.
128

128

00:06:00,010  -->  00:06:02,915
It's a bit of an advanced topic for a beginner to learn.
129

129

00:06:02,915  -->  00:06:06,248
But it'll help you be able to understand
130

130

00:06:07,084  -->  00:06:08,671
how inheritance works when you're reading
131

131

00:06:08,671  -->  00:06:09,984
someone else's code.
132

132

00:06:09,984  -->  00:06:11,397
And then as you progress more and more and
133

133

00:06:11,397  -->  00:06:14,889
start using classes and Object Oriented Programming more,
134

134

00:06:14,889  -->  00:06:17,053
you'll be able to see instances where
135

135

00:06:17,053  -->  00:06:19,448
Hey, I actually, I'm going to create a class
136

136

00:06:19,448  -->  00:06:22,207
that's very very similar to another class I just created,
137

137

00:06:22,207  -->  00:06:24,416
I might as well inherit it instead
138

138

00:06:24,416  -->  00:06:26,823
of creating an object again.
139

139

00:06:26,823  -->  00:06:30,766
All right, so lastly in this series of lectures,
140

140

00:06:30,766  -->  00:06:33,309
we're gonna learn about special methods.
141

141

00:06:33,309  -->  00:06:35,158
We've already gone over one special method,
142

142

00:06:35,158  -->  00:06:38,385
this init method, which initialises attributes
143

143

00:06:38,385  -->  00:06:40,570
and everything that's going on with your class.
144

144

00:06:40,570  -->  00:06:43,633
So we're gonna learn about some other special methods.
145

145

00:06:43,633  -->  00:06:47,668
Okay. Thanks. And I'll see you at the next lecture.
