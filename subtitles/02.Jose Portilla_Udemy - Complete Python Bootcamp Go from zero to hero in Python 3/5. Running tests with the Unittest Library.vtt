WEBVTT
1
00:00:05.170 --> 00:00:06.940
Selamat datang kembali semua orang di kuliah ini.

2
00:00:06.940 --> 00:00:11.890
Kami sebenarnya akan membahas pustaka tes unit sehingga unit test memungkinkan Anda untuk menulis program pengujian

3
00:00:11.890 --> 00:00:12.570
Anda sendiri.

4
00:00:12.610 --> 00:00:18.280
Dan tujuannya adalah untuk menetapkan set data tertentu untuk program Anda menganalisis hasil yang dikembalikan dan kemudian

5
00:00:18.370 --> 00:00:21.490
melihat apakah itu benar-benar memberi Anda hasil yang diharapkan.

6
00:00:21.490 --> 00:00:23.440
Jadi mari kita benar-benar membuat dua skrip di sini.

7
00:00:23.470 --> 00:00:28.780
Satu akan menjadi skrip sederhana yang mengkapitalisasi teks dan kemudian skrip lainnya akan menjadi skrip

8
00:00:28.780 --> 00:00:33.880
pengujian aktual untuk ini dan Anda akan perlu meninjau pemrograman berorientasi objek untuk memahami

9
00:00:33.880 --> 00:00:37.630
cara menggunakan unit test karena Anda membangun kelas tes.

10
00:00:37.630 --> 00:00:38.490
Mari kita mulai.

11
00:00:38.700 --> 00:00:40.750
OK di sini saya di Sublime Text Editor.

12
00:00:40.780 --> 00:00:46.990
Saya akan membuat dua skrip yang akan mengatakan file baru save as di desktop saya.

13
00:00:47.050 --> 00:00:50.780
Saya akan menyimpan yang pertama sebagai tutup pai itu.

14
00:00:50.980 --> 00:00:56.200
Jadi ini adalah skrip yang akan ditulis dengan huruf besar dan kemudian skrip

15
00:00:56.200 --> 00:01:05.870
berikutnya akan mengatakan file baru simpan file sebagai dan saya akan menyimpan ini dan secara teknis Anda dapat memanggil skrip pengujian Anda apa pun yang

16
00:01:05.900 --> 00:01:07.060
Anda inginkan.

17
00:01:07.290 --> 00:01:11.670
Yah kita akan menyebut ini satu garis bawah tes disimpan oleh Simpan itu.

18
00:01:11.700 --> 00:01:14.340
Dan keduanya disimpan sekarang di lokasi yang sama.

19
00:01:14.390 --> 00:01:17.630
Jadi file PI cap kami akan sangat sederhana.

20
00:01:17.780 --> 00:01:26.730
Kami hanya akan memiliki satu fungsi di dalamnya dan fungsi ini mengambil beberapa teks dan kemudian apa

21
00:01:26.860 --> 00:01:32.630
yang akan mengembalikan Tex dot dan kami akan mengkapitalisasi teks.

22
00:01:32.680 --> 00:01:39.450
Jadi, jika Anda tidak mengingat metode huruf besar pada string, gunakan huruf besar satu saja.

23
00:01:39.460 --> 00:01:41.510
Itu sebenarnya bukan huruf besar semuanya.

24
00:01:41.590 --> 00:01:45.780
Jadi, Anda dapat memeriksa sendiri dengan cepat di baris perintah, tetapi itulah yang dilakukan metode kapital.

25
00:01:45.790 --> 00:01:49.430
Kami berharap teks menjadi semacam string.

26
00:01:49.440 --> 00:02:01.190
Jadi pada dasarnya di sini kita akan menginput output string untuk mengkapitalisasi string dan dengan menggunakan huruf kapital kita hanya menggunakan huruf

27
00:02:01.190 --> 00:02:05.080
besar yang huruf pertama ingin katakan ini.

28
00:02:05.180 --> 00:02:11.510
Jadi batalkan simpan yang pergi ke uji garis bawah dan di sinilah kami benar-benar menggunakan unit test.

29
00:02:11.510 --> 00:02:16.850
Jadi, ketika menulis fungsi tes, yang terbaik adalah beralih dari sederhana ke rumit karena setiap fungsi akan

30
00:02:16.850 --> 00:02:17.770
menjalankan perintah.

31
00:02:17.810 --> 00:02:23.700
Jadi saya biasanya ingin menguji hal-hal sederhana dan kemudian menguji hal-hal yang lebih rumit hal

32
00:02:23.700 --> 00:02:30.830
pertama yang harus dilakukan adalah mengimpor unit test dan kemudian Anda akan perlu mengimpor semua file yang Anda inginkan.

33
00:02:30.870 --> 00:02:36.260
Dan karena file-file ini sama-sama aman di aplikasi desktop saya akan mengatakan tutup impor.

34
00:02:36.270 --> 00:02:37.530
Jadi itu sebenarnya impor.

35
00:02:37.530 --> 00:02:39.010
Catatan tambahan pikiran saya yang lain.

36
00:02:39.010 --> 00:02:42.390
Ini menjaga PI jadi impor unit test.

37
00:02:42.390 --> 00:02:43.450
Itu fungsi bawaan.

38
00:02:43.460 --> 00:02:45.330
Dan mari kita pastikan saya mengeja dengan benar.

39
00:02:45.330 --> 00:02:46.250
Itu harus menggoda.

40
00:02:46.260 --> 00:02:48.080
Jadi hati-hati dengan unit test itu.

41
00:02:48.090 --> 00:02:50.070
Dua kata dalam urutan impor.

42
00:02:50.100 --> 00:02:56.330
Itu file topi yang baru saja kita buat dan kemudian kita akan membuat kelas

43
00:02:56.420 --> 00:03:04.400
dan kita akan memanggil kelas ini Tutup tes dan kita akan mewarisi kelas kasus uji yang datang dengan unit test.

44
00:03:04.400 --> 00:03:09.050
Jadi kita katakan unit test dot test case.

45
00:03:09.050 --> 00:03:15.540
Jadi, jika sintaks ini aneh bagi Anda, Anda dapat meninjau kuliah pewarisan dalam Pemrograman Berorientasi Objek.

46
00:03:15.860 --> 00:03:20.540
Tapi di sini kita hanya akan memiliki daftar metode dan metode ini pada dasarnya akan dijalankan

47
00:03:21.350 --> 00:03:23.420
ketika kita menguji skrip yang sebenarnya.

48
00:03:23.430 --> 00:03:35.710
Jadi saya akan mengatakan jika menguji satu kata sendiri dan ini hanya akan mengatur teks sama dengan kata sederhana Python

49
00:03:37.430 --> 00:03:46.230
dan hasilnya adalah kita akan mengatakan Cap kita akan memanggil fungsi teks cap.

50
00:03:46.230 --> 00:03:52.250
Jadi yang saya lakukan di sini adalah mengimpor cap dan kemudian melanjutkan dengan mengimpor fungsi teks cap ini.

51
00:03:52.290 --> 00:03:56.560
Jadi saya katakan fungsi tutup teks dan saya akan mengirimkan teks.

52
00:03:56.580 --> 00:04:02.210
Jadi itu adalah Python huruf kecil dan saya berharap hasil saya sama dengan yang berikut ini.

53
00:04:02.340 --> 00:04:08.670
Kami mengatakan titik-titik sendiri dan kami menyebut pernyataan sama.

54
00:04:08.750 --> 00:04:13.580
Kami lulus dan hasil dan kemudian kami melewati Python dengan huruf P. besar

55
00:04:13.940 --> 00:04:15.970
Dan ini adalah struktur umum dari sebuah tes.

56
00:04:16.070 --> 00:04:18.980
Dan ketika Anda melihatnya sebenarnya sangat sederhana.

57
00:04:19.070 --> 00:04:26.120
Yang Anda lakukan adalah membuat kelas untuk dipanggil pada akhirnya Anda mewarisi dari unit test test case dan

58
00:04:27.020 --> 00:04:29.540
kemudian Anda memiliki fungsi untuk dipanggil.

59
00:04:29.540 --> 00:04:33.590
Dalam hal ini kami menyebutnya tes 1 dan biasanya Anda memberi angka seperti Tes 1 Uji 2.

60
00:04:33.620 --> 00:04:37.430
Atau Anda mungkin memiliki nama yang merujuk pada apa yang sebenarnya mereka lakukan.

61
00:04:37.430 --> 00:04:41.690
Jadi di sini kita bisa menguji satu kata dan kemudian kata berikutnya dapat menguji beberapa kata.

62
00:04:42.020 --> 00:04:44.110
Jadi di sini kita memiliki Texas ke Python.

63
00:04:44.330 --> 00:04:47.690
Dan kemudian Anda memanggil fungsi apa pun yang ingin Anda uji skrip Anda.

64
00:04:47.750 --> 00:04:52.280
Jadi seperti itu jika seseorang masuk dan mereka mulai mengedit terus PI dan Anda

65
00:04:52.280 --> 00:04:57.860
ingin memastikan bahwa fungsi ini selalu mengembalikan hal yang sama Anda sekarang memiliki tes ini yang akan menegaskan itu.

66
00:04:57.860 --> 00:05:05.120
Jadi Anda mendapatkan hasil dari sesuatu yang dilewatkan ke dalam fungsi itu dan kemudian Anda mengatakan dengan tegas

67
00:05:05.120 --> 00:05:12.530
menyatakan diri sendiri dan Anda mengatakan saya perlu bahwa ketika huruf kecil ini Python diteruskan ke fungsi teks yang

68
00:05:12.830 --> 00:05:16.410
selalu mengembalikan kembali versi huruf besar dari Python.

69
00:05:16.700 --> 00:05:22.360
Dan kemudian kita dapat menambahkan tes lain sehingga kita dapat mengatakan DPF dan kita dapat menyebut tes ini sesuatu yang berbeda.

70
00:05:22.370 --> 00:05:26.400
Anda dapat menghitungnya atau menemukan sejauh apa yang mereka uji.

71
00:05:26.640 --> 00:05:33.740
Jadi mungkin kita ingin menguji beberapa kata dengan baik katakan sendiri dan kemudian kita akan menambahkan beberapa teks di sini.

72
00:05:35.150 --> 00:05:38.970
Dan set itu sama dengan mari kita memiliki dua kata Monty Python.

73
00:05:39.680 --> 00:05:42.340
Dan pada dasarnya hal yang sama di sini kita katakan hasilnya.

74
00:05:44.650 --> 00:05:45.930
Jadi salin dan tempel.

75
00:05:46.060 --> 00:05:52.360
Jadi saya ingin hasil saya lewat di Monty Python ke teks dan kemudian saya akan mengatakan otodidak sama dengan

76
00:05:52.360 --> 00:05:53.860
menyalin garis itu juga.

77
00:05:54.680 --> 00:05:59.900
Ke baris baru kecuali dalam kasus ini ketika Anda menelepon memanfaatkan string apa yang harus dilakukan adalah memanfaatkan

78
00:05:59.900 --> 00:06:01.970
huruf pertama dari setiap kata ini.

79
00:06:02.030 --> 00:06:11.790
Jadi saya harus berharap untuk melihat Monty Python dan pada akhirnya semua ini dapat kita

80
00:06:12.860 --> 00:06:20.160
katakan jika Anda menggarisbawahi nama garis bawah sama dengan main.

81
00:06:20.170 --> 00:06:24.960
Tes unit utama Jadi simpan ini.

82
00:06:25.000 --> 00:06:28.080
Dan mari kita sekarang menjalankan Piala tes kami.

83
00:06:28.180 --> 00:06:34.390
Baiklah jadi apa yang akan kita lakukan di sini adalah menjalankan kode pengujian kita, kita akan mengatakan Python test

84
00:06:34.510 --> 00:06:38.670
underscore cap dan Anda dapat mengetuk secara lengkap yang akan masuk sekarang.

85
00:06:38.680 --> 00:06:40.320
Sepertinya kita benar-benar mengalami kegagalan.

86
00:06:40.330 --> 00:06:42.480
Jadi Anda mendapatkan laporan kegagalan ini yang agak menyenangkan.

87
00:06:42.480 --> 00:06:44.670
Ini gagal menguji beberapa kata.

88
00:06:44.730 --> 00:06:50.670
Dikatakan Monty Python tahu di sini bagaimana P menjadi huruf kecil tidak sama dengan Monty Python.

89
00:06:51.010 --> 00:06:53.170
Jadi sekarang kita menggaruk-garuk kepala dan berpikir dengan baik apa masalahnya.

90
00:06:53.170 --> 00:06:56.030
Apakah ini tes saya atau file saya yang sebenarnya.

91
00:06:56.160 --> 00:06:57.750
Dan itu tergantung pada situasinya.

92
00:06:57.760 --> 00:07:04.900
Tetapi biasanya Anda akan mengatakan hei, saya perlu menyesuaikan skrip utama saya sehingga saya memastikan pengujian saya

93
00:07:04.960 --> 00:07:05.570
berfungsi.

94
00:07:05.590 --> 00:07:08.720
Dan banyak kali perusahaan besar Anda akan memiliki seseorang dalam antrian.

95
00:07:08.740 --> 00:07:14.260
Jaminan kualitas apartemen benar-benar menulis tes ini untuk memastikan bahwa skrip Anda

96
00:07:14.260 --> 00:07:15.940
berfungsi sebagaimana mestinya.

97
00:07:16.050 --> 00:07:21.970
Dan jika kita berpikir tentang hal ini, masalah sebenarnya adalah seperti yang kita sebutkan sebelumnya menggunakan huruf kapital semua yang

98
00:07:21.970 --> 00:07:25.250
dilakukannya adalah huruf kapital pada huruf pertama dari sebuah string.

99
00:07:25.360 --> 00:07:30.370
Itu berarti bahwa jika kita melihat Monte Python dan Anda mungkin telah memperhatikannya ketika saya menulis

100
00:07:30.910 --> 00:07:35.980
bahwa ini sebenarnya tidak akan terjadi ketika kita memanggil huruf besar dan sebenarnya ada metode yang berbeda

101
00:07:35.980 --> 00:07:36.730
untuk ini.

102
00:07:36.730 --> 00:07:42.190
Jika saya ingin kedua huruf ini ditulis dengan huruf besar, maka yang perlu saya lakukan

103
00:07:42.520 --> 00:07:48.970
adalah alih-alih memanggil dengan huruf besar, sebenarnya ada metode yang disebut Judul dan kemudian akan menggunakan huruf besar setiap

104
00:07:48.970 --> 00:07:51.730
kata, bukan hanya huruf pertama dari string.

105
00:07:51.730 --> 00:07:57.370
Jadi sekarang mari kita simpan perubahan itu menggunakan Judul dan lihat apakah kita lulus tes ini.

106
00:07:57.370 --> 00:07:58.870
Jadi kita akan kembali ke baris perintah.

107
00:08:02.640 --> 00:08:07.800
Dan saya ingin saya akan lakukan adalah menjalankan hal yang sama seperti yang saya lakukan sebelum Python menguji garis bawah kita

108
00:08:07.830 --> 00:08:10.530
tekan enter dan dikatakan menjalankan dua tes dan semuanya OK.

109
00:08:10.680 --> 00:08:12.760
Itu berarti Anda lulus semua tes Anda.

110
00:08:12.840 --> 00:08:13.240
BAIK.

111
00:08:13.290 --> 00:08:16.190
Pada dasarnya itu semua yang perlu Anda ketahui tentang pengujian unit.

112
00:08:16.200 --> 00:08:18.230
Jadi mari kita kembali ke ikhtisar yang sangat cepat.

113
00:08:18.420 --> 00:08:20.160
Tapi ide sebenarnya sangat sederhana.

114
00:08:21.720 --> 00:08:26.820
Jadi Anda memiliki skrip Anda dan ini bisa jadi banyak skrip bisa menjadi skrip tunggal dan Anda memanggil

115
00:08:26.850 --> 00:08:29.380
fungsi atau kelas apa pun yang Anda inginkan.

116
00:08:29.790 --> 00:08:34.290
Dan kemudian di dalam skrip pengujian yang akan Anda miliki adalah Anda akan mengimpor Anda

117
00:08:34.650 --> 00:08:39.360
tahu pengujian impor skrip apa pun yang telah Anda kerjakan membuat kelas untuk pengujian yang akan Anda

118
00:08:39.420 --> 00:08:45.090
warisi dari unit uji kasus dan kemudian Anda dapat memiliki metode untuk menguji situasi apa pun yang dapat Anda pikirkan.

119
00:08:45.090 --> 00:08:49.950
Jadi Anda akan mengatur variabel apa pun yang Anda butuhkan dan kemudian pada akhirnya mereka

120
00:08:49.950 --> 00:08:55.490
entah bagaimana akan memanggil fungsi atau kelas lewat sesuatu yang Anda dapatkan hasilnya dan kemudian Anda hanya menyatakan sama.

121
00:08:55.740 --> 00:08:59.610
Jadi Anda mengatakan hei adalah hasil yang saya dapatkan dari skrip saya.

122
00:08:59.610 --> 00:09:01.000
Hasil yang diharapkan.

123
00:09:01.200 --> 00:09:02.270
Dan itu yang harus Anda lakukan.

124
00:09:02.370 --> 00:09:05.940
Jadi berhati-hatilah dengan pernyataan yang diajarkan secara otodidak ini.

125
00:09:05.940 --> 00:09:11.420
Perhatikan bagaimana itu casting diri sehingga benar-benar memanggilnya dari warisan test case itu.

126
00:09:11.460 --> 00:09:11.860
Baiklah.

127
00:09:11.910 --> 00:09:14.390
Itu untuk berbicara tentang unit test.

128
00:09:14.400 --> 00:09:15.630
Sebenarnya cukup mudah.

129
00:09:15.690 --> 00:09:20.610
Mudah-mudahan jika Anda memiliki pertanyaan jangan ragu untuk mengirim forum Q&amp;A tetapi hanya melihat dokumentasi

130
00:09:20.640 --> 00:09:21.860
untuk tes unit.

131
00:09:21.870 --> 00:09:26.700
Ada banyak lagi yang bisa dilakukan tetapi seringkali hanya memulai semua yang benar-benar perlu

132
00:09:26.910 --> 00:09:30.900
Anda lakukan adalah membuat pernyataan sederhana yang setara di kelas Anda.

133
00:09:30.900 --> 00:09:32.550
Terima kasih dan sampai jumpa di kuliah berikutnya.
