WEBVTT
1
1

00:00:02.074  -->  00:00:03.335
<v Voiceover>Hello everyone, and welcome to</v>
2

2

00:00:03.335  -->  00:00:05.823
the Python debugger lecture.
3

3

00:00:05.823  -->  00:00:09.393
So you've probably used a variety of print statements
4

4

00:00:09.393  -->  00:00:12.257
to find errors in your code, but a better way of doing this
5

5

00:00:12.257  -->  00:00:14.965
is by using Python's built-in debugger module,
6

6

00:00:14.965  -->  00:00:16.798
and it's known as PDB.
7

7

00:00:17.728  -->  00:00:21.895
So we can go ahead and say, import pdb, python debugger.
8

8

00:00:25.134  -->  00:00:27.557
So, the Python debugger module implements,
9

9

00:00:27.557  -->  00:00:30.101
basically, an interactive debugging environment
10

10

00:00:30.101  -->  00:00:31.788
for Python programmes.
11

11

00:00:31.788  -->  00:00:33.625
And it includes features to allow you
12

12

00:00:33.625  -->  00:00:36.803
to pause your programmes, look at the values of variables,
13

13

00:00:36.803  -->  00:00:40.274
and watch programme execution, step by step.
14

14

00:00:40.274  -->  00:00:41.660
That way, you can understand what your programme
15

15

00:00:41.660  -->  00:00:45.827
is actually doing, and then you can find bugs in the logic.
16

16

00:00:46.989  -->  00:00:48.954
Sometimes this is a bit difficult to show,
17

17

00:00:48.954  -->  00:00:50.585
because it's basically gonna require me
18

18

00:00:50.585  -->  00:00:52.662
to put an error into the code on purpose,
19

19

00:00:52.662  -->  00:00:55.346
but I'll use a simple example, that hopefully illustrates
20

20

00:00:55.346  -->  00:00:58.794
just how powerful the Python debugger module is.
21

21

00:00:58.794  -->  00:01:00.360
It's something that's sometimes not taught
22

22

00:01:00.360  -->  00:01:04.527
to beginners at all, but it's a really powerful tool to have
23

23

00:01:06.179  -->  00:01:08.180
at your side, whenever you need it.
24

24

00:01:08.180  -->  00:01:10.154
So let's go ahead and try to implement it
25

25

00:01:10.154  -->  00:01:12.257
by creating a bug on purpose.
26

26

00:01:12.257  -->  00:01:15.968
So what I'm gonna do is, I'm gonna go just make a list here.
27

27

00:01:15.968  -->  00:01:19.489
I'll just say x is equal to one, three, four.
28

28

00:01:19.489  -->  00:01:21.697
We'll say y is equal to two.
29

29

00:01:21.697  -->  00:01:23.697
And z is equal to three.
30

30

00:01:25.663  -->  00:01:29.330
Then I'm gonna set result equal to y plus z,
31

31

00:01:30.349  -->  00:01:32.192
so that makes sense.
32

32

00:01:32.192  -->  00:01:36.336
I will print result, and then, what I'm gonna try to do is,
33

33

00:01:36.336  -->  00:01:38.833
make another variable called result2,
34

34

00:01:38.833  -->  00:01:40.483
that is y plus x.
35

35

00:01:40.483  -->  00:01:42.585
Now note here, I'm trying to add an integer to a list,
36

36

00:01:42.585  -->  00:01:44.381
which doesn't make sense.
37

37

00:01:44.381  -->  00:01:46.372
But I'm gonna assume it worked,
38

38

00:01:46.372  -->  00:01:48.872
keep going, and print result2.
39

39

00:01:50.810  -->  00:01:52.741
So what do I get here?
40

40

00:01:52.741  -->  00:01:54.644
I get type error, unsupported operand type
41

41

00:01:54.644  -->  00:01:56.477
for plus int and list.
42

42

00:01:57.845  -->  00:01:59.905
Okay, that's actually pretty clear.
43

43

00:01:59.905  -->  00:02:03.902
But in a larger code base, it may not be clear
44

44

00:02:03.902  -->  00:02:05.958
what's actually going on.
45

45

00:02:05.958  -->  00:02:07.501
So what you can actually do is,
46

46

00:02:07.501  -->  00:02:10.533
with the Python debugger, set a trace.
47

47

00:02:10.533  -->  00:02:13.008
So what that would look like is,
48

48

00:02:13.008  -->  00:02:17.173
you'd come to the line where you saw your error,
49

49

00:02:17.173  -->  00:02:21.340
and say pdb dot set underscore trace, close parentheses.
50

50

00:02:24.038  -->  00:02:26.028
And now, let's take a look at what happens
51

51

00:02:26.028  -->  00:02:28.748
when we run this module,
52

52

00:02:28.748  -->  00:02:31.146
or, excuse me, this cell.
53

53

00:02:31.146  -->  00:02:34.487
So, notice, once the code runs up to where
54

54

00:02:34.487  -->  00:02:37.487
it hits that Python debug set trace,
55

55

00:02:38.410  -->  00:02:41.428
now I have an interactive debugging environment.
56

56

00:02:41.428  -->  00:02:44.511
And I can ask for values of variables,
57

57

00:02:44.511  -->  00:02:45.968
to see what's going on.
58

58

00:02:45.968  -->  00:02:48.684
So for instance, if I wanted to check what x was,
59

59

00:02:48.684  -->  00:02:50.965
I could hit x, enter,
60

60

00:02:50.965  -->  00:02:53.745
and it tells me that x is the list one, three, four.
61

61

00:02:53.745  -->  00:02:57.912
I could then check what y is, I could then check what z is.
62

62

00:02:58.899  -->  00:03:00.226
I can even do operations here.
63

63

00:03:00.226  -->  00:03:04.393
I can say, hey, what is y plus z, and I'll output five.
64

64

00:03:06.412  -->  00:03:08.542
So it actually tells me what's going on,
65

65

00:03:08.542  -->  00:03:12.452
and I can do whatever operations I want,
66

66

00:03:12.452  -->  00:03:16.285
since that's a list, so y to the power of two.
67

67

00:03:17.459  -->  00:03:19.507
It'll tell me an error if I try to do something
68

68

00:03:19.507  -->  00:03:23.561
that will pass in, err, throw an exception,
69

69

00:03:23.561  -->  00:03:27.193
but it will let me continue going on with the debugger.
70

70

00:03:27.193  -->  00:03:30.029
And then, if I finally figure out what the problem is,
71

71

00:03:30.029  -->  00:03:33.524
so, let's say, I was trying to do y plus x
72

72

00:03:33.524  -->  00:03:35.582
but it wasn't working, so I said,
73

73

00:03:35.582  -->  00:03:36.415
y plus...
74

74

00:03:38.225  -->  00:03:41.572
y plus x, and it outputted this error,
75

75

00:03:41.572  -->  00:03:44.070
and I say okay, that's strange, well what is x?
76

76

00:03:44.070  -->  00:03:47.037
And I figure out, oh, x is a list, now I have my error.
77

77

00:03:47.037  -->  00:03:49.336
Once I found it, I can then press q,
78

78

00:03:49.336  -->  00:03:52.086
and it will quit for me, alright.
79

79

00:03:53.739  -->  00:03:56.577
So that's just a pretty basic example.
80

80

00:03:56.577  -->  00:03:58.571
It's a little bit strange to use it in jupyter notebook,
81

81

00:03:58.571  -->  00:04:02.145
but it still works well for this simple example.
82

82

00:04:02.145  -->  00:04:04.089
For more general debugging purposes,
83

83

00:04:04.089  -->  00:04:05.978
and actually more techniques,
84

84

00:04:05.978  -->  00:04:08.229
you can go ahead and check out the jupyter notebook here.
85

85

00:04:08.229  -->  00:04:09.454
We break it down a little bit more,
86

86

00:04:09.454  -->  00:04:11.529
what's actually going on.
87

87

00:04:11.529  -->  00:04:14.636
And there's also a link here to the official documentation,
88

88

00:04:14.636  -->  00:04:16.248
which just give you more general advice
89

89

00:04:16.248  -->  00:04:17.856
on debugging techniques.
90

90

00:04:17.856  -->  00:04:22.023
But the key here is almost always just setting this trace to
91

91

00:04:22.949  -->  00:04:25.379
right before where you think the error is occurring.
92

92

00:04:25.379  -->  00:04:26.479
And then, when you run your code,
93

93

00:04:26.479  -->  00:04:30.312
use the debugger interactive environment there
94

94

00:04:31.798  -->  00:04:34.655
to try to find the source of your error.
95

95

00:04:34.655  -->  00:04:38.776
Okay, so that's it as far as the Python debugger.
96

96

00:04:38.776  -->  00:04:41.859
Remember, you have to say import pdb,
97

97

00:04:43.107  -->  00:04:45.554
and then say, pdb dot set trace,
98

98

00:04:45.554  -->  00:04:50.401
in order to start up this interactive debugging environment.
99

99

00:04:50.401  -->  00:04:52.349
Alright, thanks, everyone!
100

100

00:04:52.349  -->  00:04:55.599
And I will see you at the next lecture.
