WEBVTT
1
1

00:00:01.400  -->  00:00:04.020
<v Instructor>Hello everyone and welcome to part two</v>
2

2

00:00:04.020  -->  00:00:08.319
in the object oriented programming video series.
3

3

00:00:08.319  -->  00:00:11.139
So, in the last lecture we learned about objects
4

4

00:00:11.139  -->  00:00:13.270
and how everything in Python is an object
5

5

00:00:13.270  -->  00:00:16.919
and you can check the object type using the type function.
6

6

00:00:16.919  -->  00:00:19.428
So now we wanna know how do we make our own objects
7

7

00:00:19.428  -->  00:00:20.261
in Python?
8

8

00:00:21.389  -->  00:00:24.770
And that's where the class keyword is gonna come into play.
9

9

00:00:24.770  -->  00:00:26.320
So user defined objects are created
10

10

00:00:26.320  -->  00:00:27.989
using this class keyword.
11

11

00:00:27.989  -->  00:00:31.360
And you can think of class as almost as like a blueprint
12

12

00:00:31.360  -->  00:00:34.640
that defines the nature of a future object.
13

13

00:00:34.640  -->  00:00:37.580
And then from these classes, we can construct instances.
14

14

00:00:37.580  -->  00:00:39.859
And an instance is gonna be a specific object
15

15

00:00:39.859  -->  00:00:41.380
created from a particular class.
16

16

00:00:41.380  -->  00:00:44.009
So, if you remember in this above example here
17

17

00:00:44.009  -->  00:00:47.620
from the Jupyter notebook, we created a list called L,
18

18

00:00:47.620  -->  00:00:51.228
and so L was an instance of a list object.
19

19

00:00:51.228  -->  00:00:53.698
So let's go ahead and hop over to the live coding
20

20

00:00:53.698  -->  00:00:57.281
to create a very simple example of a class.
21

21

00:00:58.342  -->  00:01:02.681
So we put the class keyword, and then whatever your name
22

22

00:01:02.681  -->  00:01:05.139
of the class you want to be.
23

23

00:01:05.139  -->  00:01:07.337
So in this case we're gonna have a Sample be the name
24

24

00:01:07.337  -->  00:01:08.611
of our class.
25

25

00:01:08.611  -->  00:01:11.510
And by convention, class names are capitalised,
26

26

00:01:11.510  -->  00:01:14.590
unlike function names which are lowercase.
27

27

00:01:14.590  -->  00:01:18.090
And then we pass in this parameter object.
28

28

00:01:19.422  -->  00:01:20.952
And I'll explain that in a later lecture,
29

29

00:01:20.952  -->  00:01:22.544
because that actually has to do
30

30

00:01:22.544  -->  00:01:27.014
with how Python was developed to begin with.
31

31

00:01:27.014  -->  00:01:28.342
But for right now, just remember,
32

32

00:01:28.342  -->  00:01:30.071
whenever you're making the class,
33

33

00:01:30.071  -->  00:01:33.232
you have the keyword class, the name of the class,
34

34

00:01:33.232  -->  00:01:36.081
and then you type in object as a parameter
35

35

00:01:36.081  -->  00:01:38.029
that you pass through.
36

36

00:01:38.029  -->  00:01:40.313
As far as this white space syntax,
37

37

00:01:40.313  -->  00:01:43.932
it should look pretty familiar and similar to functions.
38

38

00:01:43.932  -->  00:01:48.042
And then all we're gonna do for class, is just pass.
39

39

00:01:48.042  -->  00:01:50.733
Okay, and that's our very first class.
40

40

00:01:50.733  -->  00:01:53.301
So let's go ahead and make an instance
41

41

00:01:53.301  -->  00:01:56.551
of our Sample class, by calling Sample.
42

42

00:01:59.671  -->  00:02:00.709
And there you have it.
43

43

00:02:00.709  -->  00:02:04.209
And so now X is, if we check it's type ...
44

44

00:02:05.553  -->  00:02:06.386
Whoops.
45

45

00:02:09.524  -->  00:02:13.422
It's type is main Sample, which basically tells you
46

46

00:02:13.422  -->  00:02:16.124
that it's a Sample class type.
47

47

00:02:16.124  -->  00:02:19.142
So, like I said about convention, we give classes a name
48

48

00:02:19.142  -->  00:02:21.111
that starts with a capital letter.
49

49

00:02:21.111  -->  00:02:23.063
And now right here we have X,
50

50

00:02:23.063  -->  00:02:25.831
which is a reference to a newest sense of a Sample class.
51

51

00:02:25.831  -->  00:02:29.194
In other words, we instantiate the Sample class.
52

52

00:02:29.194  -->  00:02:32.611
Inside the class, we currently have pass,
53

53

00:02:33.591  -->  00:02:36.723
but what we're gonna do now is define attributes
54

54

00:02:36.723  -->  00:02:38.452
and methods.
55

55

00:02:38.452  -->  00:02:41.562
So if we hop back over to the Jupyter notebook,
56

56

00:02:41.562  -->  00:02:43.505
there's two things we can do within a class:
57

57

00:02:43.505  -->  00:02:47.045
put in an attribute, and put in a method.
58

58

00:02:47.045  -->  00:02:49.344
An attribute is a characteristic of an object,
59

59

00:02:49.344  -->  00:02:52.795
and a method is an operation we can perform with the object.
60

60

00:02:52.795  -->  00:02:55.326
So we've already seen methods,
61

61

00:02:55.326  -->  00:02:57.051
and we've actually already dealt with attributes,
62

62

00:02:57.051  -->  00:02:59.251
you just didn't know it yet.
63

63

00:02:59.251  -->  00:03:01.453
And to show this, we're gonna create an example class
64

64

00:03:01.453  -->  00:03:02.975
called Dog.
65

65

00:03:02.975  -->  00:03:05.735
So for instance, an attribute of a dog may be its breed
66

66

00:03:05.735  -->  00:03:08.853
or its name, while a method of a dog may be defined
67

67

00:03:08.853  -->  00:03:11.636
by like a bark method, which returns some sort
68

68

00:03:11.636  -->  00:03:13.133
of printed sound out.
69

69

00:03:13.133  -->  00:03:16.195
Okay, so let's go ahead and get a better understanding
70

70

00:03:16.195  -->  00:03:18.573
of attributes through an example.
71

71

00:03:18.573  -->  00:03:20.474
And the syntax for attributes is gonna look
72

72

00:03:20.474  -->  00:03:22.444
a little something like this.
73

73

00:03:22.444  -->  00:03:26.332
It's gonna be self, dot, the name of the attribute,
74

74

00:03:26.332  -->  00:03:28.354
and then you set it equal to something.
75

75

00:03:28.354  -->  00:03:31.771
And there's a special method called init.
76

76

00:03:32.635  -->  00:03:34.724
Underscore, underscore, I-N-I-T,
77

77

00:03:34.724  -->  00:03:37.325
underscore, underscore, parentheses.
78

78

00:03:37.325  -->  00:03:39.452
And that's gonna allow us to basically initialise,
79

79

00:03:39.452  -->  00:03:43.694
or instantiate, the attributes of an object.
80

80

00:03:43.694  -->  00:03:47.153
So, the syntax is gonna look like this,
81

81

00:03:47.153  -->  00:03:48.535
what I have here in the cell.
82

82

00:03:48.535  -->  00:03:49.844
And I'm gonna go ahead and live code it
83

83

00:03:49.844  -->  00:03:51.602
and break it down for you.
84

84

00:03:51.602  -->  00:03:54.984
So let's go ahead and create a Dog class.
85

85

00:03:54.984  -->  00:03:59.151
So, I start with my class keyword, capital letter, Dog.
86

86

00:04:01.765  -->  00:04:03.932
And then I pass in object.
87

87

00:04:05.503  -->  00:04:08.794
Basically, you can think of that as Python telling it,
88

88

00:04:08.794  -->  00:04:10.263
"Oh, you're making an object."
89

89

00:04:10.263  -->  00:04:11.932
That's not exactly what's happening there,
90

90

00:04:11.932  -->  00:04:13.215
it's a little more complex than that,
91

91

00:04:13.215  -->  00:04:16.773
but for right now, you can just think of it that way.
92

92

00:04:16.773  -->  00:04:19.440
And now, we start with a method.
93

93

00:04:21.824  -->  00:04:24.433
And when you put a function inside of a class,
94

94

00:04:24.433  -->  00:04:26.850
you refer to them as methods.
95

95

00:04:28.436  -->  00:04:30.601
And this, underscore, underscore, I-N-I-T,
96

96

00:04:30.601  -->  00:04:33.422
is known as a special method.
97

97

00:04:33.422  -->  00:04:35.913
And that's because it's going to initialise
98

98

00:04:35.913  -->  00:04:38.003
the attributes of a class.
99

99

00:04:38.003  -->  00:04:41.253
And every single method within a class,
100

100

00:04:42.620  -->  00:04:45.870
is going to have the word "self" in it.
101

101

00:04:47.000  -->  00:04:48.833
S-E-L-F.
102

102

00:04:50.922  -->  00:04:51.755
Self.
103

103

00:04:54.091  -->  00:04:55.911
And something I want you to keep in mind,
104

104

00:04:55.911  -->  00:04:58.033
is we've already used the term method before.
105

105

00:04:58.033  -->  00:04:59.821
You can remember when we had lists,
106

106

00:04:59.821  -->  00:05:01.380
we had methods such as count,
107

107

00:05:01.380  -->  00:05:03.280
like we saw in the last lecture.
108

108

00:05:03.280  -->  00:05:04.642
So what's basically happening right now,
109

109

00:05:04.642  -->  00:05:07.480
is you're making methods for your own object
110

110

00:05:07.480  -->  00:05:09.262
that you're creating.
111

111

00:05:09.262  -->  00:05:12.101
Now, this underscore, underscore, I-N-I-T,
112

112

00:05:12.101  -->  00:05:15.379
underscore, underscore, is what's known as a special method,
113

113

00:05:15.379  -->  00:05:19.546
and it's gonna allow us to put in attributes for our class.
114

114

00:05:21.180  -->  00:05:25.902
So right now, I'm going to create this class, Dog,
115

115

00:05:25.902  -->  00:05:29.902
take an object, and I create this first method.
116

116

00:05:29.902  -->  00:05:31.472
And what I'm gonna do is create an attribute
117

117

00:05:31.472  -->  00:05:33.632
called breed for the Dog.
118

118

00:05:33.632  -->  00:05:37.799
Self dot breed, and I'm gonna set it equal to breed.
119

119

00:05:39.539  -->  00:05:41.372
Go ahead and run that.
120

120

00:05:42.580  -->  00:05:45.921
And then create an instance of Dog
121

121

00:05:45.921  -->  00:05:48.254
with the breed equal to Lab.
122

122

00:05:51.810  -->  00:05:55.522
And now if I check what Sam is, main dog, great.
123

123

00:05:55.522  -->  00:05:59.689
So now let's fully breakdown what we just did above.
124

124

00:06:01.461  -->  00:06:05.043
So we start with class, the name of the class
125

125

00:06:05.043  -->  00:06:07.350
and then we input object.
126

126

00:06:07.350  -->  00:06:09.942
After that, we start constructing our methods,
127

127

00:06:09.942  -->  00:06:12.302
which basically look like functions,
128

128

00:06:12.302  -->  00:06:15.013
but since they're within a class, we call them methods.
129

129

00:06:15.013  -->  00:06:17.181
And we have this special method,
130

130

00:06:17.181  -->  00:06:19.230
this underscore, underscore, I-N-I-T,
131

131

00:06:19.230  -->  00:06:22.382
underscore, underscore, and it's called automatically,
132

132

00:06:22.382  -->  00:06:25.581
right after the object has been created.
133

133

00:06:25.581  -->  00:06:29.081
So remember, this will always be your first method
134

134

00:06:29.081  -->  00:06:30.874
when you're creating your classes.
135

135

00:06:30.874  -->  00:06:33.291
And as you create classes, you'll see why.
136

136

00:06:33.291  -->  00:06:35.251
So each method in the class definition,
137

137

00:06:35.251  -->  00:06:38.790
begins for reference to the instance object.
138

138

00:06:38.790  -->  00:06:40.873
And what that means is you always start
139

139

00:06:40.873  -->  00:06:43.642
with this self reference.
140

140

00:06:43.642  -->  00:06:47.302
That's by convention that you use that self keyword.
141

141

00:06:47.302  -->  00:06:48.811
It actually doesn't have to be self,
142

142

00:06:48.811  -->  00:06:50.894
but it's never, not self.
143

143

00:06:52.721  -->  00:06:57.350
So always use self as the first argument for these methods.
144

144

00:06:57.350  -->  00:07:00.952
That basically tells you, "Hey, this method
145

145

00:07:00.952  -->  00:07:04.702
within your class, is referencing Dog first."
146

146

00:07:06.400  -->  00:07:09.442
Okay, and then when continuing off of that,
147

147

00:07:09.442  -->  00:07:11.540
each method in the class definition begins
148

148

00:07:11.540  -->  00:07:13.160
for reference in the instance object
149

149

00:07:13.160  -->  00:07:15.909
and like we said, by convention, that's self.
150

150

00:07:15.909  -->  00:07:19.710
So in this case, breed is the argument.
151

151

00:07:19.710  -->  00:07:23.731
And the value is passed during class instantiation.
152

152

00:07:23.731  -->  00:07:26.898
So we say self dot breed equals breed.
153

153

00:07:28.001  -->  00:07:31.812
So when I'm creating that instance of the Dog class,
154

154

00:07:31.812  -->  00:07:35.979
I can't just do dog, because init needs an argument.
155

155

00:07:38.731  -->  00:07:41.499
And notice how it says it takes exactly two arguments,
156

156

00:07:41.499  -->  00:07:43.761
only one was given.
157

157

00:07:43.761  -->  00:07:44.594
But you might be thinking,
158

158

00:07:44.594  -->  00:07:46.901
"Hey, I actually gave it zero arguments."
159

159

00:07:46.901  -->  00:07:49.691
Well, that's not true, because self by default,
160

160

00:07:49.691  -->  00:07:51.150
is given there because it lets
161

161

00:07:51.150  -->  00:07:54.602
that method know you're referencing that dog object.
162

162

00:07:54.602  -->  00:07:58.769
So then we say breed is equal to whatever you want it to be.
163

163

00:08:01.751  -->  00:08:03.042
And notice we're actually not checking
164

164

00:08:03.042  -->  00:08:05.533
that breed is a particular type of object.
165

165

00:08:05.533  -->  00:08:08.342
I could actually just pass a list there, or a number,
166

166

00:08:08.342  -->  00:08:10.980
but here it makes sense that I want a breed.
167

167

00:08:10.980  -->  00:08:14.141
So let's go ahead and do another breed.
168

168

00:08:14.141  -->  00:08:17.591
Another breed of dog we can do is like a Huskie.
169

169

00:08:17.591  -->  00:08:21.758
So now sam is an instance of this Dog object type,
170

170

00:08:22.930  -->  00:08:26.172
and it's breed, that attribute is equal to Huskie.
171

171

00:08:26.172  -->  00:08:30.671
And it's referencing that attribute with the self dot breed.
172

172

00:08:30.671  -->  00:08:33.110
And it's gonna be equal to whatever you put in
173

173

00:08:33.110  -->  00:08:35.071
as breed there.
174

174

00:08:35.071  -->  00:08:39.238
Okay, so let's go ahead and make that sam equal to Dog.
175

175

00:08:41.528  -->  00:08:45.695
So this object label, sam, references that Dog object.
176

176

00:08:47.352  -->  00:08:49.923
And now- and this is why I stressed method
177

177

00:08:49.923  -->  00:08:52.482
so much earlier in the course-
178

178

00:08:52.482  -->  00:08:54.712
so you can kinda draw the parallel here,
179

179

00:08:54.712  -->  00:08:56.994
I just did tab complete.
180

180

00:08:56.994  -->  00:09:00.827
And if I call breed on sam, it returns Huskie.
181

181

00:09:02.410  -->  00:09:04.211
And notice how I'm not putting parentheses,
182

182

00:09:04.211  -->  00:09:06.372
like we saw in some other methods.
183

183

00:09:06.372  -->  00:09:10.694
That's because this is an attribute of the object,
184

184

00:09:10.694  -->  00:09:12.563
not a method on the object.
185

185

00:09:12.563  -->  00:09:16.215
This init, or this def, and then whatever keywords
186

186

00:09:16.215  -->  00:09:18.146
you see here, those will be methods.
187

187

00:09:18.146  -->  00:09:20.145
But right now, self dot breed is an attribute
188

188

00:09:20.145  -->  00:09:21.645
of the Dog object.
189

189

00:09:23.286  -->  00:09:27.453
Okay, so in Python, there's also class object attributes,
190

190

00:09:29.576  -->  00:09:33.413
and those class object attributes are the same
191

191

00:09:33.413  -->  00:09:35.845
for any instance of the class.
192

192

00:09:35.845  -->  00:09:37.026
So I'll show you what I mean by that,
193

193

00:09:37.026  -->  00:09:40.443
by creating a new class object attribute.
194

194

00:09:43.975  -->  00:09:47.892
So I'm gonna place it right before any methods.
195

195

00:09:48.934  -->  00:09:50.851
Class object attribute.
196

196

00:09:56.056  -->  00:10:00.223
And I'm gonna make something called species mammal.
197

197

00:10:01.284  -->  00:10:02.117
Whoops.
198

198

00:10:04.934  -->  00:10:08.928
Okay, so notice right now I'm not saying,
199

199

00:10:08.928  -->  00:10:12.671
"self dot species," I'm saying just, "species."
200

200

00:10:12.671  -->  00:10:15.901
And that's because if I put this outside
201

201

00:10:15.901  -->  00:10:19.770
and before this init method, it's gonna treat it as,
202

202

00:10:19.770  -->  00:10:22.501
what's called a class object attribute.
203

203

00:10:22.501  -->  00:10:26.541
And that means no matter what kind of Dog object we make,
204

204

00:10:26.541  -->  00:10:29.200
it's species is always going to be mammal,
205

205

00:10:29.200  -->  00:10:31.400
which makes sense, right?
206

206

00:10:31.400  -->  00:10:33.412
No matter what the breed of a dog is,
207

207

00:10:33.412  -->  00:10:34.782
it's always gonna be a mammal.
208

208

00:10:34.782  -->  00:10:38.009
So if we go ahead and run that cell,
209

209

00:10:38.009  -->  00:10:40.092
now we have sam, the dog.
210

210

00:10:41.121  -->  00:10:42.619
It's breed is still Huskie,
211

211

00:10:42.619  -->  00:10:45.050
but you'll notice now if I put tab here,
212

212

00:10:45.050  -->  00:10:48.302
it also has a species attached to it, and it's mammal.
213

213

00:10:48.302  -->  00:10:52.301
And that's what's known as a class object attribute.
214

214

00:10:52.301  -->  00:10:55.538
So now let's create some more attributes for this dog.
215

215

00:10:55.538  -->  00:10:57.021
So what else can a dog have?
216

216

00:10:57.021  -->  00:10:58.854
A dog can have a name.
217

217

00:11:01.070  -->  00:11:05.571
So then I'll pass a name when I start making the dog
218

218

00:11:05.571  -->  00:11:09.621
and I'll say, "Okay, self dot name is equal to
219

219

00:11:09.621  -->  00:11:12.538
whatever name I pass for that dog."
220

220

00:11:13.849  -->  00:11:15.739
So now if you notice if I only pass Huskie,
221

221

00:11:15.739  -->  00:11:18.961
I'll get an error because that takes three arguments
222

222

00:11:18.961  -->  00:11:21.791
and only two were given: self and breed.
223

223

00:11:21.791  -->  00:11:24.360
So now I'll put a name for my dog.
224

224

00:11:24.360  -->  00:11:26.300
And I'll name it the same label I was using,
225

225

00:11:26.300  -->  00:11:27.133
I'll name it ...
226

226

00:11:27.133  -->  00:11:29.939
Well, I'll name it Sammy.
227

227

00:11:29.939  -->  00:11:31.782
There you go.
228

228

00:11:31.782  -->  00:11:34.782
And now, sam, which is a Dog object,
229

229

00:11:36.477  -->  00:11:38.992
is also gonna have a name: Sammy, that string
230

230

00:11:38.992  -->  00:11:40.902
that's attached to it.
231

231

00:11:40.902  -->  00:11:42.861
Okay, now what I want you again note,
232

232

00:11:42.861  -->  00:11:44.490
is that the class object attribute
233

233

00:11:44.490  -->  00:11:46.998
that species equals mammal, is defined outside
234

234

00:11:46.998  -->  00:11:49.639
of any methods in the class.
235

235

00:11:49.639  -->  00:11:51.958
And by convention, you always place them first
236

236

00:11:51.958  -->  00:11:53.958
before this init method.
237

237

00:11:55.950  -->  00:11:59.566
Okay, so I know we kinda went over a lot,
238

238

00:11:59.566  -->  00:12:03.607
and this is actually the end of this part two
239

239

00:12:03.607  -->  00:12:06.969
of object oriented programming, the class keyword.
240

240

00:12:06.969  -->  00:12:10.218
So let's really breakdown everything that we just did.
241

241

00:12:10.218  -->  00:12:12.491
I'll hop back over to the completed Jupyter notebook
242

242

00:12:12.491  -->  00:12:14.836
to make sure we understand what we did.
243

243

00:12:14.836  -->  00:12:18.148
So remember, when we wanna create a new object type,
244

244

00:12:18.148  -->  00:12:21.065
we use the class keyword, we space,
245

245

00:12:22.786  -->  00:12:24.675
then we capitalise whatever we want the name
246

246

00:12:24.675  -->  00:12:27.357
of the class to be, and we pass an object
247

247

00:12:27.357  -->  00:12:30.588
as a parameter argument there, colon,
248

248

00:12:30.588  -->  00:12:32.756
and in this case we just did pass,
249

249

00:12:32.756  -->  00:12:35.686
the simplest class or object type you can have.
250

250

00:12:35.686  -->  00:12:37.745
And then when you create an instance of it,
251

251

00:12:37.745  -->  00:12:40.378
you call the class no arguments
252

252

00:12:40.378  -->  00:12:42.683
and you can check its type and check
253

253

00:12:42.683  -->  00:12:46.276
that it's part of the class, that main sample.
254

254

00:12:46.276  -->  00:12:48.645
Okay, so that's how we create classes.
255

255

00:12:48.645  -->  00:12:51.596
And remember, classes can basically have attributes
256

256

00:12:51.596  -->  00:12:52.596
and methods.
257

257

00:12:53.465  -->  00:12:57.632
So we've already seen the ways we can create attributes.
258

258

00:12:58.965  -->  00:13:02.547
And there's a special method, which we'll always do
259

259

00:13:02.547  -->  00:13:03.967
when we're creating a class, called
260

260

00:13:03.967  -->  00:13:08.027
underscore, underscore, I-N-I-T, underscore, underscore.
261

261

00:13:08.027  -->  00:13:10.137
And that's gonna allow us to initialise the attributes
262

262

00:13:10.137  -->  00:13:11.304
of the object.
263

263

00:13:12.324  -->  00:13:16.697
So it's always gonna be first, as far as your first method.
264

264

00:13:16.697  -->  00:13:20.746
Now we also saw class object attributes,
265

265

00:13:20.746  -->  00:13:23.518
such as the species here and those come first
266

266

00:13:23.518  -->  00:13:26.998
if you decide to have them even before that init method.
267

267

00:13:26.998  -->  00:13:28.226
They're not always necessary,
268

268

00:13:28.226  -->  00:13:32.496
but if you do decide to have these class object attributes,
269

269

00:13:32.496  -->  00:13:34.617
then you will use them.
270

270

00:13:34.617  -->  00:13:38.784
Okay, so moving back up here, we say def, so it looks ...
271

271

00:13:39.827  -->  00:13:43.316
Basically it follows all the same syntax as a function.
272

272

00:13:43.316  -->  00:13:45.017
And you can almost think of it as a function
273

273

00:13:45.017  -->  00:13:48.835
except that since it's inside a class, it's called a method,
274

274

00:13:48.835  -->  00:13:51.286
because it's a method on that class object.
275

275

00:13:51.286  -->  00:13:55.146
Underscore, underscore, I-N-I-T, we pass in self,
276

276

00:13:55.146  -->  00:13:57.375
and then you start passing in whatever
277

277

00:13:57.375  -->  00:13:59.358
you want the attributes to be.
278

278

00:13:59.358  -->  00:14:02.176
So we saw breed in this particular example,
279

279

00:14:02.176  -->  00:14:04.963
and then back here, we also passed the name,
280

280

00:14:04.963  -->  00:14:07.508
and just to drive the point home a little further,
281

281

00:14:07.508  -->  00:14:09.091
maybe I say, "fur."
282

282

00:14:14.248  -->  00:14:17.188
And I can have fur be a Boolean or something.
283

283

00:14:17.188  -->  00:14:21.846
Maybe I always say, "Okay, in most cases dogs have fur."
284

284

00:14:21.846  -->  00:14:24.926
So I can actually set these just like we did for functions.
285

285

00:14:24.926  -->  00:14:27.176
I can set default argument.
286

286

00:14:30.115  -->  00:14:34.037
So I'll say, "self dot fur is then equal to fur."
287

287

00:14:34.037  -->  00:14:36.497
And by default, fur is actually always equal to true.
288

288

00:14:36.497  -->  00:14:38.707
So that means when I run this,
289

289

00:14:38.707  -->  00:14:40.666
I actually don't have to pass it.
290

290

00:14:40.666  -->  00:14:43.203
And if I check if my dog has fur,
291

291

00:14:43.203  -->  00:14:45.336
you'll notice that it equals true.
292

292

00:14:45.336  -->  00:14:49.826
Now I could have passed fur equals to false.
293

293

00:14:49.826  -->  00:14:52.656
Let's say for some reason this dog didn't have fur,
294

294

00:14:52.656  -->  00:14:54.245
and now fur is equal to false.
295

295

00:14:54.245  -->  00:14:57.318
So as far as the syntax and convention here,
296

296

00:14:57.318  -->  00:15:01.005
this should feel very similar to functions.
297

297

00:15:01.005  -->  00:15:04.086
The main difference being, this self.
298

298

00:15:04.086  -->  00:15:06.507
The fact that you're creating attributes off
299

299

00:15:06.507  -->  00:15:08.590
of these input arguments.
300

300

00:15:10.605  -->  00:15:12.774
And the reason we're using self here,
301

301

00:15:12.774  -->  00:15:15.357
instead of just like breed equals breed,
302

302

00:15:15.357  -->  00:15:18.236
is because due to scope, Python needs to know,
303

303

00:15:18.236  -->  00:15:19.258
"Hey are you actually referencing
304

304

00:15:19.258  -->  00:15:21.556
some global variable breed,
305

305

00:15:21.556  -->  00:15:25.347
or do you want me to set this dog's object attribute,
306

306

00:15:25.347  -->  00:15:28.758
self dot breed, equal to that breed input."
307

307

00:15:28.758  -->  00:15:32.008
Okay, so I encourage you to play around
308

308

00:15:33.773  -->  00:15:36.586
with this particular class, right here this dog,
309

309

00:15:36.586  -->  00:15:40.644
make up at least one or two more attributes.
310

310

00:15:40.644  -->  00:15:41.996
Make sure you fully understand,
311

311

00:15:41.996  -->  00:15:45.494
and I also want you to set a new class object attribute
312

312

00:15:45.494  -->  00:15:48.123
that would be true for all dogs.
313

313

00:15:48.123  -->  00:15:50.297
Okay, so make sure you fully understand
314

314

00:15:50.297  -->  00:15:54.683
how we set attributes using this special method,
315

315

00:15:54.683  -->  00:15:56.244
this init method.
316

316

00:15:56.244  -->  00:15:57.646
And coming up next,
317

317

00:15:57.646  -->  00:16:00.566
we'll look into methods more broadly,
318

318

00:16:00.566  -->  00:16:03.603
just as functions defined within the body of a class.
319

319

00:16:03.603  -->  00:16:07.770
Okay, thanks, and I'll see you at the next lecture.
