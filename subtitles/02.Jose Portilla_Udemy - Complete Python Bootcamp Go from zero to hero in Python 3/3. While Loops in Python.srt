1
00:00:05,360 --> 00:00:06,320
Selamat datang kembali semuanya.

2
00:00:06,350 --> 00:00:12,620
Jangan luangkan waktu untuk berbicara tentang loop liar sementara loop akan terus mengeksekusi blok kode sementara

3
00:00:12,770 --> 00:00:14,850
beberapa kondisi tetap benar.

4
00:00:15,140 --> 00:00:18,910
Jadi misalnya kita mencoba menghubungkan ini dengan semacam skenario kehidupan nyata.

5
00:00:19,250 --> 00:00:24,440
Sementara kolam saya tidak bodoh mungkin saya ingin program untuk tetap mengisi genangan air saya atau jika saya

6
00:00:24,440 --> 00:00:28,990
merancang robot beberapa kode sementara anjing saya masih lapar terus memberi makan anjing saya.

7
00:00:29,040 --> 00:00:32,770
Jadi mari kita menjelajahi sintaks dari bagian loop WHILE cukup sederhana.

8
00:00:32,780 --> 00:00:37,550
Kita akan mengatakan beberapa saat dan kemudian semacam kondisi berkedip sehingga kita biasanya

9
00:00:37,550 --> 00:00:42,910
akan memiliki semacam pemeriksaan operasi perbandingan dan banyak kali itu akan terjadi ketika beberapa variabel benar.

10
00:00:42,920 --> 00:00:48,510
Atau sama dengan sama dengan benar maka titik dua dan satu blok kode dan blok kode itu dalam

11
00:00:48,620 --> 00:00:52,620
hal ini diwakili oleh melakukan sesuatu akan terus dieksekusi sementara kondisinya benar.

12
00:00:53,780 --> 00:00:57,520
Sekarang kita juga bisa menggabungkan pernyataan with dengan statement else jika kita mau.

13
00:00:57,650 --> 00:00:59,980
Jadi bisa dikatakan sementara beberapa kondisi boolean benar.

14
00:01:00,050 --> 00:01:01,640
Lakukan sesuatu yang lain.

15
00:01:01,790 --> 00:01:05,870
Artinya sekali kondisi itu tidak lagi benar atau sejak awal itu tidak lagi benar.

16
00:01:05,960 --> 00:01:08,000
Kami melakukan sesuatu yang berbeda.

17
00:01:08,050 --> 00:01:10,600
Mari kita telusuri konsep-konsep ini dengan beberapa contoh.

18
00:01:10,760 --> 00:01:12,750
Mari kita lompat ke dalamnya dalam buku catatan.

19
00:01:12,760 --> 00:01:16,010
Baiklah jadi mari kita mulai dengan membangun loop sementara yang sangat mendasar.

20
00:01:16,020 --> 00:01:17,110
Saya akan membuat variabel.

21
00:01:17,110 --> 00:01:25,440
Katakanlah x sama dengan nol lalu katakan sementara X kurang dari katakanlah kurang dari lima.

22
00:01:25,510 --> 00:01:27,310
Jadi kami memiliki banyak sekali pencetakan.

23
00:01:27,340 --> 00:01:31,270
Kita akan mencetak nilai x saat ini atau kita akan mengatakan mencetak nilai x saat ini.

24
00:01:31,270 --> 00:01:32,550
Banyak cara berbeda yang bisa kita lakukan ini.

25
00:01:32,560 --> 00:01:35,320
Kami hanya akan melakukannya dengan cepat dengan string F literal.

26
00:01:35,320 --> 00:01:43,030
Nilai saat ini dari x adalah kurung kurawal bagian dalam akan lewat dan x.

27
00:01:43,030 --> 00:01:44,560
Sekarang mari kita bayangkan apa yang akan terjadi di sini.

28
00:01:44,560 --> 00:01:49,420
Jangan jalankan Sayliyah ini akan mengatakan x sama dengan nol sedangkan X kurang dari 5.

29
00:01:49,420 --> 00:01:54,490
Saya akan mencetak nilai x saat ini jadi jika saya hanya menjalankan ini pada dasarnya

30
00:01:54,490 --> 00:01:59,950
saya akan mengatakan nilai x saat ini adalah nol dan itu akan terjadi berulang-ulang karena X tidak berubah.

31
00:01:59,950 --> 00:02:07,210
Jadi mari kita perbarui x selama ini sementara loop akan mengatakan x sama dengan x plus 1.

32
00:02:07,210 --> 00:02:09,080
Jadi sekarang mari kita jalankan ini dan lihat apa yang terjadi.

33
00:02:10,340 --> 00:02:10,880
Saya kembali.

34
00:02:10,880 --> 00:02:14,950
Nilai x saat ini adalah 0 dari 1 dari 2 dari 3 dari 4.

35
00:02:15,120 --> 00:02:20,790
Dan pada yang terakhir ketika sama dengan 4 kita kemudian mengatakan OK X akan sama dengan 4 ditambah 1 yang membuat

36
00:02:20,880 --> 00:02:23,700
X sama dengan 5 dan 5 tidak kurang dari 5.

37
00:02:23,700 --> 00:02:24,620
Itu sama dengan itu.

38
00:02:24,630 --> 00:02:28,140
Jadi loop sementara berhenti berjalan karena hanya akan berjalan.

39
00:02:28,200 --> 00:02:34,440
Sementara kondisi ini benar sekarang jika Anda secara tidak sengaja memiliki semacam kondisi yang tidak pernah menjadi

40
00:02:34,440 --> 00:02:35,080
salah.

41
00:02:35,190 --> 00:02:39,530
Mungkin Anda lupa baris kode terakhir ini di sini dan itu hanya berulang-ulang.

42
00:02:39,780 --> 00:02:44,160
Jadi apa yang terjadi adalah Anda mendapatkan tak terbatas saat loop dan itu adalah kesalahan umum bagi pemula untuk membuat.

43
00:02:44,160 --> 00:02:48,720
Saya tahu jika saya membuatnya sendiri beberapa kali ketika saya belajar Python apa yang

44
00:02:48,810 --> 00:02:54,630
terjadi di notebook adalah Anda mendapatkan bintang kecil di sini di petunjuk bahwa sel masih terus berjalan untuk jenis

45
00:02:54,630 --> 00:03:00,300
hal reset hanya datang ke sini kernel dan interrupt baik dan jika itu tidak berhasil maka tekan restart

46
00:03:00,360 --> 00:03:05,610
dan restart kernel Anda kadang-kadang interupsi tidak akan berhasil karena pada dasarnya perintah untuk mengganggu tidak akan

47
00:03:05,670 --> 00:03:10,500
sampai di sana karena Python menggunakan semua komputasi Anda untuk jenis melanjutkan ini sementara loop.

48
00:03:10,710 --> 00:03:14,490
Jadi ingatlah bahwa jika Anda mendapatkan infinite ketika loop datang ke sini ke kernel dan

49
00:03:14,490 --> 00:03:17,180
kemudian tekan restart dan Anda harus membaca menemukan sendiri

50
00:03:17,190 --> 00:03:20,890
Tapi itulah dasar dari menghindari kesalahan.

51
00:03:20,900 --> 00:03:23,960
OK jadi kita memiliki loop sementara dengan sendirinya dan catatan cepat.

52
00:03:24,110 --> 00:03:27,150
Pernyataan x ini sama dengan x plus 1.

53
00:03:27,170 --> 00:03:33,030
Kita juga dapat menulis bahwa dengan cara berikut ini kita dapat mengatakan X plus sama dengan 1.

54
00:03:33,110 --> 00:03:35,900
Jadi baris ini dan baris ini adalah hal yang sama.

55
00:03:35,900 --> 00:03:37,790
Ini hanya cara penulisan yang lebih ringkas.

56
00:03:37,970 --> 00:03:41,110
Jadi jika Anda membaca kode orang lain dan mereka menulis ini sebagai gantinya.

57
00:03:41,210 --> 00:03:43,780
Itu semacam cara menulis kode yang sama lebih ramping ini.

58
00:03:43,790 --> 00:03:47,870
Biarkan saya menulis ini lagi karena mereka tahu untuk mendapatkan kembali nilai yang sama.

59
00:03:48,230 --> 00:03:52,180
Mari kita lampirkan pernyataan lain ke loop sementara ini sehingga kita dapat mengatakan.

60
00:03:52,190 --> 00:03:54,780
Kolon lain.

61
00:03:55,280 --> 00:03:56,830
Dan saya akan mencetak.

62
00:03:57,140 --> 00:04:05,140
X tidak kurang dari 5 Anda tahu kita menjalankan ini mari kita lihat apa yang terjadi Anda mendapatkan nilai saat ini sehingga semua

63
00:04:05,140 --> 00:04:06,250
pernyataan cetak lainnya.

64
00:04:06,400 --> 00:04:08,860
Dan kemudian saya melihat X tidak kurang dari lima.

65
00:04:08,920 --> 00:04:13,970
Jadi sekali kondisi sementara ini tidak benar karena ini berbaris dengan itu kami pergi ke depan dan mencetak

66
00:04:13,990 --> 00:04:15,670
X tidak kurang dari lima.

67
00:04:15,760 --> 00:04:22,220
Sekarang cepat tahu jika langsung dari kelelawar X lebih besar dari lima jadi mari kita membuat mantan kultus 50.

68
00:04:22,260 --> 00:04:27,200
Dan saya menjalankan ini maka loop sementara tidak pernah dijalankan karena kondisi ini tidak pernah benar.

69
00:04:27,260 --> 00:04:30,540
Maka kita memiliki kondisi lain mengeksekusi lagian.

70
00:04:30,640 --> 00:04:31,700
Itu tidak berarti saya membutuhkannya.

71
00:04:31,750 --> 00:04:34,700
Jadi jika saya tidak memilikinya di sana dan saya berlari ini tidak akan terjadi apa-apa.

72
00:04:34,720 --> 00:04:36,690
Karena ini tidak benar.

73
00:04:36,690 --> 00:04:36,970
Baiklah.

74
00:04:36,970 --> 00:04:41,350
Akhirnya saya ingin memperkenalkan tiga kata kunci yang sangat berguna dengan loop.

75
00:04:41,410 --> 00:04:45,670
Anda tidak akan menggunakannya setiap saat, tetapi terkadang Anda harus menggunakan kasingnya.

76
00:04:45,670 --> 00:04:47,130
Dan itu kata kunci istirahat.

77
00:04:47,170 --> 00:04:52,920
Kata kunci yang berlanjut dan pemutusan kata kunci yang lalu akan keluar dari loop terdekat saat

78
00:04:52,960 --> 00:04:54,240
ini yang terdekat.

79
00:04:54,310 --> 00:04:59,140
Pergi ke bagian atas tutup di loop tertutup dan kemudian lulus tidak melakukan apa pun.

80
00:04:59,590 --> 00:05:01,570
Jadi mari kita mulai sedikit mundur ke sini.

81
00:05:01,570 --> 00:05:06,220
Pergilah dengan pass dan kita dapat menunjukkan ini sebenarnya jika for for loop mungkin sedikit lebih sederhana di sini.

82
00:05:06,250 --> 00:05:17,290
Kita akan mengatakan untuk mari membuat daftar cepat akan mengatakan x sama dengan 1 sampai 3 dan kemudian mengatakan untuk item X usus besar dan katakanlah

83
00:05:17,380 --> 00:05:22,070
kita belum tahu apa yang ingin kita lakukan di sini.

84
00:05:22,090 --> 00:05:24,160
Kami pada dasarnya menginginkan beberapa pengisi.

85
00:05:24,250 --> 00:05:27,100
Jika saya punya komentar di sini dan saya coba jalankan ini.

86
00:05:27,130 --> 00:05:30,660
Jadi ketika Anda mencoba menjalankan ini, Anda sebenarnya mendapatkan kesalahan sintaks kesalahan.

87
00:05:30,700 --> 00:05:39,820
Akhir file yang tidak terduga saat parsing dan artinya adalah Python karena menggunakan lekukan dan spasi sebagai bagian

88
00:05:40,000 --> 00:05:41,850
penting dari kodenya.

89
00:05:41,890 --> 00:05:46,390
Pada dasarnya Anda mengharapkan Anda memiliki sesuatu di sini, bahkan komentar saja tidak cukup untuk mengisinya.

90
00:05:46,510 --> 00:05:52,900
Jadi seringkali yang dapat Anda lakukan adalah memiliki kata kunci masa lalu dan masa lalu hanya mengatakan tidak melakukan apa-apa

91
00:05:52,900 --> 00:05:59,500
sama sekali dan seringkali programmer menyimpannya sebagai pengganti untuk menghindari kesalahan sintaks karena Anda dapat membayangkan mengimplementasikan potongan kode yang lebih

92
00:05:59,590 --> 00:06:03,730
besar dan saya tahu akhirnya saya ingin datang dan mengisi ini untuk loop

93
00:06:03,730 --> 00:06:04,290
sekarang.

94
00:06:04,360 --> 00:06:05,620
Saya tidak ingin menghadapinya.

95
00:06:05,920 --> 00:06:10,620
Katakanlah saya ingin mencetak dan skrip saya di sini.

96
00:06:10,880 --> 00:06:15,830
Sekarang ketika saya menjalankan ini saya tidak mendapatkan kesalahan sintaks dan saya masih dapat mencetak skrip saya

97
00:06:15,830 --> 00:06:17,390
jika saya hanya memiliki komentar.

98
00:06:17,390 --> 00:06:21,160
Saya mendapatkan kesalahan karena mengharapkan sesuatu terjadi setelah usus besar ini.

99
00:06:21,200 --> 00:06:25,550
Jadi untuk menghindari hal itu Anda dapat menggunakan kata kunci pass dan Anda akan melihat

100
00:06:25,550 --> 00:06:31,580
kata kunci masa lalu menggunakan lot ketika kita mulai membangun fungsi dan metode sendiri karena sering kali ketika Anda memprogram Anda akan

101
00:06:31,640 --> 00:06:35,020
membuat sedikit pegangan untuk berfungsi tetapi Anda tidak ingin mengujinya segera.

102
00:06:35,150 --> 00:06:40,160
Jadi Anda menggunakan kata kunci sebelumnya sebagai sesuatu untuk ditempatkan di sana sehingga Anda menghindari kesalahan sintaks dan Anda juga

103
00:06:40,160 --> 00:06:44,540
aman karena Anda tahu pass tidak melakukan apa-apa, katanya baik saya akan melewati ini dan saya tidak

104
00:06:44,540 --> 00:06:45,590
akan lakukan apapun.

105
00:06:45,800 --> 00:06:50,080
Baiklah, jadi penyembuhan masa lalu itu tidak melanjutkan apa pun.

106
00:06:50,090 --> 00:06:52,550
Pergi ke bagian atas dari loop inclosing terdekat.

107
00:06:52,550 --> 00:06:54,120
Tunjukkan pada Anda contohnya.

108
00:06:54,280 --> 00:07:07,140
Secara intelektual seperti untuk loop lagi untuk ini kita akan mengatakan string saya sama dengan Sammy jadi mari kita memilikinya di

109
00:07:07,140 --> 00:07:07,790
sana.

110
00:07:07,900 --> 00:07:16,070
Saya akan mengatakan empat huruf di tali saya mencetak surat itu.

111
00:07:16,130 --> 00:07:18,240
Jadi di sini kita melihat Samie dicetak.

112
00:07:18,260 --> 00:07:23,090
Sekarang yang akan saya lakukan adalah mari kita bayangkan bahwa saya sebenarnya tidak ingin mencetak huruf A untuk alasan

113
00:07:23,090 --> 00:07:25,190
apa pun yang dapat saya lakukan sebagai berikut.

114
00:07:25,190 --> 00:07:36,150
Jika hurufnya sama dengan huruf kecil, lanjutkan dan saya ingin menjalankan ini, saya tidak benar-benar mencetak surat

115
00:07:36,150 --> 00:07:37,040
itu.

116
00:07:37,110 --> 00:07:39,460
Jadi apa yang terjadi di sini akan berlanjut.

117
00:07:39,690 --> 00:07:45,380
Pada dasarnya memberitahu program ini untuk kembali ke puncak terdekat dalam loop penutupan.

118
00:07:45,690 --> 00:07:47,400
Jadi begini terus.

119
00:07:47,400 --> 00:07:51,330
Dan kami memiliki loop di sini empat huruf di tali saya.

120
00:07:51,480 --> 00:07:57,690
Jadi, jika huruf itu sama dengan a kita melanjutkan makna kembali ke atas yang paling dekat di loop penutupan.

121
00:07:57,960 --> 00:08:02,940
Perhatikan bahwa kami secara khusus mengatakan loop tidak mengatakan semacam pernyataan di sini.

122
00:08:02,940 --> 00:08:04,840
Jadi di situlah semantik dapat berperan.

123
00:08:05,040 --> 00:08:11,620
Tapi apa yang dikatakannya adalah jika hurufnya adalah maju dan terus dan kembali ke loop sehingga Anda dapat menggunakan pernyataan

124
00:08:11,740 --> 00:08:16,000
terus jika Anda seorang pemula dalam pemrograman Python itu pasti bukan sesuatu yang

125
00:08:16,000 --> 00:08:18,980
banyak muncul dan Anda ' kembali kode awal.

126
00:08:19,000 --> 00:08:22,650
Ini akan terjadi yang lebih alami Anda akan mulai menggunakannya nanti.

127
00:08:22,780 --> 00:08:27,820
Jadi waspadai itu tetapi jangan khawatir tentang penggunaan case saat ini Anda tidak akan sering menggunakannya.

128
00:08:27,880 --> 00:08:32,130
Dan akhirnya break dari loop penutupan terdekat saat ini.

129
00:08:32,260 --> 00:08:37,360
Jadi mari kita lihat apa yang terjadi jika kita ganti melanjutkan di sini dengan istirahat saja.

130
00:08:37,390 --> 00:08:41,860
Sekarang ketika kita menjalankan ini apa yang terjadi adalah alih-alih kembali ke atas loop inclosing

131
00:08:42,190 --> 00:08:47,740
terdekat itu keluar dari loop inclosing terdekat saat ini yang berarti hanya merusak loop ini dan menghentikan loop

132
00:08:47,740 --> 00:08:48,350
ini.

133
00:08:48,730 --> 00:08:50,450
Jika surat itu sama dengan a.

134
00:08:50,530 --> 00:08:53,840
Jadi itu sebenarnya sangat berguna terutama dengan pernyataan liar.

135
00:08:53,920 --> 00:08:56,810
Jadi mari kita lihat contoh menggunakan pernyataan break untuk sementara.

136
00:08:56,840 --> 00:08:59,300
Zoom in di sini supaya kita bisa melihatnya dengan jelas.

137
00:08:59,430 --> 00:09:07,440
Saya akan melakukan hal yang sama seperti sebelumnya kita akan mengatakan x sama dengan 5 dan kemudian kita akan mengatakan sementara nexilis membuatnya sama

138
00:09:07,440 --> 00:09:08,230
dengan nol.

139
00:09:08,230 --> 00:09:20,310
Di sini sama seperti sebelumnya sementara X kurang dari lima cetakan X dan kemudian kita akan mengatakan x sama dengan x plus 1.

140
00:09:20,670 --> 00:09:23,510
Jadi ketika kita menjalankan itu seperti yang diharapkan, saya mendapatkan 0 1 2 3 4.

141
00:09:23,640 --> 00:09:30,600
Tapi mari kita bayangkan saya ingin memecahkan loop sementara ini jika X pernah maka saya bisa melakukan hal yang sama di sini.

142
00:09:30,600 --> 00:09:38,840
Saya katakan jika x sama dengan setiap momen, lanjutkan dan keluar dari loop sementara ini.

143
00:09:38,850 --> 00:09:42,280
Sekarang ketika kita menjalankan ini kita hanya mendapatkan kembali 0 dan 1.

144
00:09:42,750 --> 00:09:43,390
BAIK.

145
00:09:43,530 --> 00:09:48,120
Jadi itulah dasar-dasar dari terobosan ini lanjutkan dan lewati kata kunci.

146
00:09:48,150 --> 00:09:50,180
Jadi apa yang kita bahas dalam kuliah ini adalah loop sementara.

147
00:09:50,190 --> 00:09:53,730
Jadi sementara beberapa kondisi benar jalankan blok kode ini.

148
00:09:53,760 --> 00:09:58,590
Hati-hati di sini karena jika Anda secara tidak sengaja mengatakan sementara dan kondisi ini selalu

149
00:09:58,590 --> 00:10:03,240
benar, Anda mungkin harus me-restart kernel jika Anda menjalankan skrip Python dan Anda akhirnya

150
00:10:03,240 --> 00:10:06,030
mendapatkan kesalahan bahwa loop sementara tidak pernah ditutup.

151
00:10:06,030 --> 00:10:08,780
Anda harus mencoba Control-C yang biasanya menyela.

152
00:10:08,790 --> 00:10:14,120
Jadi Anda bahkan dapat melihat interupsi di sini mengatakan kursi kontrol yang masuk ke kernel.

153
00:10:14,350 --> 00:10:18,670
Baiklah kita istirahat terus beberapa kata terakhir lagi tidak akan menggunakan ini langsung dari

154
00:10:18,670 --> 00:10:22,820
kelelawar terutama hal-hal seperti melanjutkan tetapi mungkin akan menggunakan istirahat sedikit lebih.

155
00:10:22,840 --> 00:10:26,500
Dan setelah kita terbiasa dengan fungsi kita akan menggunakan pass sedikit lebih banyak dan kemudian nanti

156
00:10:26,500 --> 00:10:27,610
kita akan menggunakan continue

157
00:10:27,610 --> 00:10:32,160
Tetapi Anda harus menyadari kata kunci ini sekarang bahwa Anda mengerti sebelum loop dan sementara loop.

158
00:10:32,500 --> 00:10:34,840
OK terima kasih semuanya dan sampai jumpa di kuliah berikutnya.
