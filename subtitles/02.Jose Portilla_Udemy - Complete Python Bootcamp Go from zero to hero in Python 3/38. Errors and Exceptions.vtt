WEBVTT
1
1

00:00:01.608  -->  00:00:02.494
<v Instructor>Hello everyone</v>
2

2

00:00:02.494  -->  00:00:05.012
and welcome to errors and exception handling.
3

3

00:00:05.012  -->  00:00:07.439
This will be just a general overview
4

4

00:00:07.439  -->  00:00:09.555
of some of the keywords and concepts
5

5

00:00:09.555  -->  00:00:12.022
on exception handling in Python
6

6

00:00:12.022  -->  00:00:15.090
and how to deal with errors in your code.
7

7

00:00:15.090  -->  00:00:18.107
Let's take a quick look at an example error.
8

8

00:00:18.107  -->  00:00:21.061
Here I have a cell where I said, print single quote Hello
9

9

00:00:21.061  -->  00:00:24.239
and I forgot to put a single quote at the end of that.
10

10

00:00:24.239  -->  00:00:26.372
If I try to run that cell,
11

11

00:00:26.372  -->  00:00:29.319
I get this syntax error and it says,
12

12

00:00:29.319  -->  00:00:32.596
'EOL while scanning the string literal'.
13

13

00:00:32.596  -->  00:00:35.013
That stands for End Of Line error
14

14

00:00:35.013  -->  00:00:37.755
while scanning the string literal.
15

15

00:00:37.755  -->  00:00:40.933
This sort of syntax error is known as an exception
16

16

00:00:40.933  -->  00:00:43.018
and it's specific enough for me to see
17

17

00:00:43.018  -->  00:00:45.185
that I had an error there.
18

18

00:00:46.135  -->  00:00:48.127
What is an exception?
19

19

00:00:48.127  -->  00:00:51.064
It's a specific description of types of errors.
20

20

00:00:51.064  -->  00:00:54.506
Even if a statement or expression is syntactically correct,
21

21

00:00:54.506  -->  00:00:58.204
it may cause an error when you attempt to execute it.
22

22

00:00:58.204  -->  00:01:01.040
A lot of these errors that are detected during execution
23

23

00:01:01.040  -->  00:01:03.426
are called exceptions so if we go back,
24

24

00:01:03.426  -->  00:01:06.759
the syntax error is a type of exception.
25

25

00:01:07.925  -->  00:01:09.614
What's interesting to note here
26

26

00:01:09.614  -->  00:01:11.878
is that the errors detected during execution
27

27

00:01:11.878  -->  00:01:13.210
that are called exceptions,
28

28

00:01:13.210  -->  00:01:15.179
they're not unconditionally fatal.
29

29

00:01:15.179  -->  00:01:17.131
What that phrase means is that
30

30

00:01:17.131  -->  00:01:19.793
it won't have to break your entire code.
31

31

00:01:19.793  -->  00:01:22.158
You can have one of those exceptions occur
32

32

00:01:22.158  -->  00:01:24.698
and with the right syntax, with try and except,
33

33

00:01:24.698  -->  00:01:26.538
which we'll learn about in just a second,
34

34

00:01:26.538  -->  00:01:30.671
you can actually have the rest of your code run.
35

35

00:01:30.671  -->  00:01:34.227
This is where the try and except keywords come into play.
36

36

00:01:34.227  -->  00:01:36.543
The basic terminology and syntax used to handle errors
37

37

00:01:36.543  -->  00:01:40.869
in Python is known as this try and the except statements.
38

38

00:01:40.869  -->  00:01:43.634
The code which can cause an exception to occur
39

39

00:01:43.634  -->  00:01:46.195
can be put in a 'try' block and then the handling
40

40

00:01:46.195  -->  00:01:48.136
of that exception can be implemented
41

41

00:01:48.136  -->  00:01:50.330
into the 'except' block of code.
42

42

00:01:50.330  -->  00:01:52.484
As far as syntax, it looks a little something like this.
43

43

00:01:52.484  -->  00:01:56.370
You have a 'try' statement and then you have a block of code
44

44

00:01:56.370  -->  00:01:59.652
within that 'try' statement block
45

45

00:01:59.652  -->  00:02:01.147
and you do your operations here
46

46

00:02:01.147  -->  00:02:04.692
that you may suspect will throw up some sort of exception.
47

47

00:02:04.692  -->  00:02:08.388
Just like earlier, we could've had that syntax error.
48

48

00:02:08.388  -->  00:02:11.234
Let's say I said 'try' and I would've put,
49

49

00:02:11.234  -->  00:02:14.270
print single quote Hello with no end there
50

50

00:02:14.270  -->  00:02:16.165
and then I have an 'except' statement.
51

51

00:02:16.165  -->  00:02:18.104
This is 'except', and you can actually specify
52

52

00:02:18.104  -->  00:02:20.562
the specific exception you're looking out for,
53

53

00:02:20.562  -->  00:02:21.740
so in the last case it would've been
54

54

00:02:21.740  -->  00:02:24.466
syntax error, that phrase.
55

55

00:02:24.466  -->  00:02:27.127
You can say, Okay if a syntax error shows up
56

56

00:02:27.127  -->  00:02:29.695
then execute a certain block of code.
57

57

00:02:29.695  -->  00:02:31.443
You can also check for multiple exceptions,
58

58

00:02:31.443  -->  00:02:33.839
maybe some other sort of error.
59

59

00:02:33.839  -->  00:02:35.019
There's a whole list and there's a link
60

60

00:02:35.019  -->  00:02:38.168
in the Jupiter notebook, to all the official exceptions
61

61

00:02:38.168  -->  00:02:41.216
in Python but granted, you don't actually need to know
62

62

00:02:41.216  -->  00:02:43.065
the name of the exception, you can just say
63

63

00:02:43.065  -->  00:02:46.559
except, colon, and then in the case of any exception,
64

64

00:02:46.559  -->  00:02:48.255
it'll run this block of code.
65

65

00:02:48.255  -->  00:02:49.728
We'll go over this in more detail
66

66

00:02:49.728  -->  00:02:52.484
when we go to the live coding.
67

67

00:02:52.484  -->  00:02:53.803
After all your 'except' statements,
68

68

00:02:53.803  -->  00:02:55.419
what you can have is an 'else'.
69

69

00:02:55.419  -->  00:02:56.708
If there is no exception,
70

70

00:02:56.708  -->  00:03:00.731
then execute what's in the 'else' block.
71

71

00:03:00.731  -->  00:03:02.266
The 'finally' keyword.
72

72

00:03:02.266  -->  00:03:04.074
The 'finally' keyword allows us to place code
73

73

00:03:04.074  -->  00:03:07.418
that will always be run even if there are exceptions.
74

74

00:03:07.418  -->  00:03:09.267
The 'finally' block of code, like I said,
75

75

00:03:09.267  -->  00:03:10.595
will be run regardless of if
76

76

00:03:10.595  -->  00:03:13.076
there was an exception in the 'try' code block.
77

77

00:03:13.076  -->  00:03:15.971
So what that looks like, is I can say, try,
78

78

00:03:15.971  -->  00:03:19.457
some code block here, and due to any exception,
79

79

00:03:19.457  -->  00:03:22.550
you may skip this code such as that 'print' statement.
80

80

00:03:22.550  -->  00:03:24.347
There's an error here, it doesn't matter,
81

81

00:03:24.347  -->  00:03:27.223
finally I want you to execute the code block
82

82

00:03:27.223  -->  00:03:30.939
in the 'finally' section of your code.
83

83

00:03:30.939  -->  00:03:32.831
Now you can combine all three keywords,
84

84

00:03:32.831  -->  00:03:36.001
'try', 'except', 'finally' to make your code
85

85

00:03:36.001  -->  00:03:37.707
more robust to errors.
86

86

00:03:37.707  -->  00:03:39.525
You can have a 'try' block, where you try to run some
87

87

00:03:39.525  -->  00:03:41.742
code where you think there may be an error,
88

88

00:03:41.742  -->  00:03:44.810
'except' to check for certain exceptions
89

89

00:03:44.810  -->  00:03:47.397
and then 'finally' so even if there is an exception,
90

90

00:03:47.397  -->  00:03:51.564
I want you to run this code block, the 'finally' code block.
91

91

00:03:52.406  -->  00:03:54.095
I know that was quite a bit,
92

92

00:03:54.095  -->  00:03:55.921
but what we're gonna do now is go over
93

93

00:03:55.921  -->  00:03:59.752
all those topics through some live coding sessions.
94

94

00:03:59.752  -->  00:04:02.419
Thanks and I will see you there.
