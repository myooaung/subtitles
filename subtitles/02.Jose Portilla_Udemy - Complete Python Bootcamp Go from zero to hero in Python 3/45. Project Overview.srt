1
1

00:00:02,037  -->  00:00:02,952
<v Instructor>Hello everyone,</v>
2

2

00:00:02,952  -->  00:00:04,484
and in this video lecture,
3

3

00:00:04,484  -->  00:00:06,943
I'm just gonna be going over the second
4

4

00:00:06,943  -->  00:00:09,645
milestone project, the blackjack game.
5

5

00:00:09,645  -->  00:00:11,453
First of all, congratulations
6

6

00:00:11,453  -->  00:00:13,485
for making it this far into the course.
7

7

00:00:13,485  -->  00:00:15,183
I know object oriented programming
8

8

00:00:15,183  -->  00:00:17,458
is hard to learn, so you should
9

9

00:00:17,458  -->  00:00:21,360
be really proud of yourself to make it this far.
10

10

00:00:21,360  -->  00:00:22,242
And you've learned a lot,
11

11

00:00:22,242  -->  00:00:24,130
so it's time to put it to the test.
12

12

00:00:24,130  -->  00:00:25,676
So, in this milestone project,
13

13

00:00:25,676  -->  00:00:27,667
we're going to be creating a blackjack game,
14

14

00:00:27,667  -->  00:00:30,735
and I'm gonna have you do the following requirements.
15

15

00:00:30,735  -->  00:00:33,630
So, it's just a simple text-based blackjack game.
16

16

00:00:33,630  -->  00:00:35,196
You can click the link here in the
17

17

00:00:35,196  -->  00:00:36,403
Jupyter notebook in case you're
18

18

00:00:36,403  -->  00:00:37,744
not familiar with blackjack.
19

19

00:00:37,744  -->  00:00:39,827
The rules are right here.
20

20

00:00:40,679  -->  00:00:42,783
Hopefully a lot of, most people are familiar with it.
21

21

00:00:42,783  -->  00:00:45,883
It's basically, otherwise known as 21 sometimes.
22

22

00:00:45,883  -->  00:00:47,041
It's a card game.
23

23

00:00:47,041  -->  00:00:48,646
So what you're gonna do is
24

24

00:00:48,646  -->  00:00:50,646
learn blackjack if you don't know it,
25

25

00:00:50,646  -->  00:00:53,794
in order to construct the blackjack game in Python.
26

26

00:00:53,794  -->  00:00:55,237
And the game needs just to have
27

27

00:00:55,237  -->  00:00:57,645
one player versus an automated dealer.
28

28

00:00:57,645  -->  00:00:59,646
So the computer's going to deal out cards,
29

29

00:00:59,646  -->  00:01:03,649
and the player can either stand or hit,
30

30

00:01:03,649  -->  00:01:04,879
and the the player must be able to pick
31

31

00:01:04,879  -->  00:01:06,932
their betting amounts, and you need
32

32

00:01:06,932  -->  00:01:09,094
to keep track of the players money,
33

33

00:01:09,094  -->  00:01:10,894
how much they have and you also
34

34

00:01:10,894  -->  00:01:14,702
need to alert the player of wins, losses, busts, etc.
35

35

00:01:14,702  -->  00:01:16,144
So I'll give you a lot of freedom,
36

36

00:01:16,144  -->  00:01:18,562
in how much you wanna actually build
37

37

00:01:18,562  -->  00:01:19,984
out the blackjack game.
38

38

00:01:19,984  -->  00:01:21,827
But, those are the basic requirements.
39

39

00:01:21,827  -->  00:01:23,099
If you wanna keep building it out more,
40

40

00:01:23,099  -->  00:01:25,566
you can have multiple players versus the dealer.
41

41

00:01:25,566  -->  00:01:30,073
You can have double downs, additional blackjack rules, etc.
42

42

00:01:30,073  -->  00:01:31,957
So the most important thing throughout
43

43

00:01:31,957  -->  00:01:33,601
this milestone project is that you
44

44

00:01:33,601  -->  00:01:36,923
must use Object Oriented Programming and classes
45

45

00:01:36,923  -->  00:01:38,580
in some portion of your game.
46

46

00:01:38,580  -->  00:01:40,093
You cannot just use pure functions
47

47

00:01:40,093  -->  00:01:42,317
like you did for tic tac toe.
48

48

00:01:42,317  -->  00:01:44,179
So I want you to use classes
49

49

00:01:44,179  -->  00:01:47,620
to help you define the deck and the player's hand.
50

50

00:01:47,620  -->  00:01:49,741
There's a tonne of right ways to do this,
51

51

00:01:49,741  -->  00:01:52,324
so explore it however you feel.
52

52

00:01:53,361  -->  00:01:54,812
But to give you a quick example,
53

53

00:01:54,812  -->  00:01:58,062
I'm gonna hop over to the live coating.
54

54

00:01:59,209  -->  00:02:00,611
So in case it's unclear what I mean
55

55

00:02:00,611  -->  00:02:02,451
by using object oriented programming
56

56

00:02:02,451  -->  00:02:03,711
or classes to help you define
57

57

00:02:03,711  -->  00:02:05,752
the deck and the players' hands.
58

58

00:02:05,752  -->  00:02:09,867
Maybe start thinking of, we can have a class
59

59

00:02:09,867  -->  00:02:12,034
called, let's say, player,
60

60

00:02:14,813  -->  00:02:17,063
and it's gonna have object.
61

61

00:02:18,177  -->  00:02:21,143
And then let's say player, one of the attributes,
62

62

00:02:21,143  -->  00:02:23,476
we'll initialise him or her.
63

63

00:02:25,419  -->  00:02:30,225
And maybe one of the attributes of this player is
64

64

00:02:30,225  -->  00:02:33,810
possibly how much money they have, so their bankroll.
65

65

00:02:33,810  -->  00:02:36,727
So we can initialise their bankroll
66

66

00:02:39,233  -->  00:02:41,165
with, let's say the standard is 100,
67

67

00:02:41,165  -->  00:02:42,517
but you can choose.
68

68

00:02:42,517  -->  00:02:45,267
And then we can say self.bankroll
69

69

00:02:47,576  -->  00:02:50,659
is equal to the bank roll you put in.
70

70

00:02:52,421  -->  00:02:53,672
And then instead of having to write
71

71

00:02:53,672  -->  00:02:56,037
a lot of functions, you can write another method
72

72

00:02:56,037  -->  00:02:59,537
that might be called like adjust_bankroll,
73

73

00:03:03,595  -->  00:03:05,411
and then we can have, let's say,
74

74

00:03:05,411  -->  00:03:08,779
we'll always have to have a self argument.
75

75

00:03:08,779  -->  00:03:10,845
Let's say we can say if you're gonna
76

76

00:03:10,845  -->  00:03:14,308
add or subtract we can put in an
77

77

00:03:14,308  -->  00:03:15,649
argument for add or subtract.
78

78

00:03:15,649  -->  00:03:18,399
So, we'll put in add equals true.
79

79

00:03:23,523  -->  00:03:24,853
So I'm actually gonna say, I'm gonna
80

80

00:03:24,853  -->  00:03:26,925
call this add a bankroll not adjust_bankroll
81

81

00:03:26,925  -->  00:03:29,119
since this will only work for adding money.
82

82

00:03:29,119  -->  00:03:30,702
So add equals true.
83

83

00:03:31,718  -->  00:03:34,026
Actually we won't need that anymore.
84

84

00:03:34,026  -->  00:03:36,526
Let's say instead, the amount.
85

85

00:03:38,721  -->  00:03:39,764
And what this is gonna do is it's
86

86

00:03:39,764  -->  00:03:43,931
gonna take your bankroll, and add the amounts to it.
87

87

00:03:46,874  -->  00:03:49,791
Okay, so now let's create a player.
88

88

00:03:50,630  -->  00:03:52,880
Let's call this player Sam.
89

89

00:03:54,783  -->  00:03:57,541
And we'll have him with a bankroll
90

90

00:03:57,541  -->  00:03:59,124
initially of 1,000.
91

91

00:04:01,122  -->  00:04:03,885
So now Sam, I can check his bankroll
92

92

00:04:03,885  -->  00:04:06,112
by calling that method 1,000,
93

93

00:04:06,112  -->  00:04:09,052
but something else I can do is add to his bankroll, right?
94

94

00:04:09,052  -->  00:04:11,719
Add_bankroll, I'm just using tab complete here.
95

95

00:04:11,719  -->  00:04:14,410
Lets say I wanna add 10 dollars to his bankroll.
96

96

00:04:14,410  -->  00:04:18,250
Now if I check Sam's bankroll, he has 1010.
97

97

00:04:18,250  -->  00:04:19,387
So this is the kind of thinking
98

98

00:04:19,387  -->  00:04:23,593
I want you to have as you approach this milestone project.
99

99

00:04:23,593  -->  00:04:26,185
So I want you to make a class for players,
100

100

00:04:26,185  -->  00:04:28,237
a class for maybe a deck, a hand.
101

101

00:04:28,237  -->  00:04:29,099
This is where you can really get
102

102

00:04:29,099  -->  00:04:31,680
creative and see what works for you.
103

103

00:04:31,680  -->  00:04:35,012
Okay, so that's enough of hints or examples,
104

104

00:04:35,012  -->  00:04:37,145
and I'll let you go ahead and explore that.
105

105

00:04:37,145  -->  00:04:38,904
Remember, take your time with this project,
106

106

00:04:38,904  -->  00:04:40,894
really explore it.
107

107

00:04:40,894  -->  00:04:43,098
Another reason I chose blackjack in particular,
108

108

00:04:43,098  -->  00:04:45,210
is that this is kind of a common assignment,
109

109

00:04:45,210  -->  00:04:47,852
so you might even have this as a simple
110

110

00:04:47,852  -->  00:04:49,874
take home project, maybe for another
111

111

00:04:49,874  -->  00:04:53,980
course in school or even a basic interview position,
112

112

00:04:53,980  -->  00:04:57,820
and you can also find a lot of examples online.
113

113

00:04:57,820  -->  00:05:00,460
So, feel free to explore online and Google
114

114

00:05:00,460  -->  00:05:02,998
to answer your own questions,
115

115

00:05:02,998  -->  00:05:05,264
but don't Google blackjack game in Python,
116

116

00:05:05,264  -->  00:05:06,821
otherwise you might get an example
117

117

00:05:06,821  -->  00:05:08,834
of an entire solution.
118

118

00:05:08,834  -->  00:05:11,218
Okay, thanks everyone, and remember,
119

119

00:05:11,218  -->  00:05:12,500
have fun with it.
120

120

00:05:12,500  -->  00:05:15,647
Okay, I'll see you at the next lecture.
