1
1

00:00:02,149  -->  00:00:02,982
<v Instructor>Hello, everyone,</v>
2

2

00:00:02,982  -->  00:00:06,433
and welcome to this lecture on the datetime module.
3

3

00:00:06,433  -->  00:00:08,818
So Python has a datetime module that will help you deal
4

4

00:00:08,818  -->  00:00:10,775
with timestamps in your code.
5

5

00:00:10,775  -->  00:00:13,387
And the time values are represent of the time class,
6

6

00:00:13,387  -->  00:00:15,824
and they have attributes such as hour,
7

7

00:00:15,824  -->  00:00:18,048
minutes, second, and microsecond,
8

8

00:00:18,048  -->  00:00:20,881
and they can even include timezone informations.
9

9

00:00:20,881  -->  00:00:23,659
So the arguments to initialise time instance are optional,
10

10

00:00:23,659  -->  00:00:27,150
but the default of zero is unlikely to be what you want.
11

11

00:00:27,150  -->  00:00:31,317
So let's go ahead and explore the datetime module.
12

12

00:00:33,803  -->  00:00:36,638
Okay, so first thing we're gonna do is import datetime,
13

13

00:00:36,638  -->  00:00:38,508
and then let's go ahead and take a look at how we can
14

14

00:00:38,508  -->  00:00:41,909
extract time information from the datetime module.
15

15

00:00:41,909  -->  00:00:46,076
So we can create a timestamp by specifying datetime.time.
16

16

00:00:47,749  -->  00:00:49,166
So datetime.time.
17

17

00:00:52,110  -->  00:00:54,569
And the format goes like this,
18

18

00:00:54,569  -->  00:00:58,736
it goes hour first, so I'll put in a, let's say, five.
19

19

00:01:00,431  -->  00:01:01,780
Then it goes minutes.
20

20

00:01:01,780  -->  00:01:04,046
So let's say five, 25.
21

21

00:01:04,046  -->  00:01:05,061
Then seconds.
22

22

00:01:05,061  -->  00:01:06,272
So I'll just put one second.
23

23

00:01:06,272  -->  00:01:08,003
I won't put any microseconds.
24

24

00:01:08,003  -->  00:01:11,118
Next one would be microseconds.
25

25

00:01:11,118  -->  00:01:12,371
So I'm just gonna put that in,
26

26

00:01:12,371  -->  00:01:14,454
and call that my time, t.
27

27

00:01:15,662  -->  00:01:17,866
So I created this time, t.
28

28

00:01:17,866  -->  00:01:19,084
And then what I can actually do
29

29

00:01:19,084  -->  00:01:22,855
is say, print, t, and it prints the time,
30

30

00:01:22,855  -->  00:01:25,453
five, 25, and one second.
31

31

00:01:25,453  -->  00:01:27,823
And I can actually grab the separate components from it
32

32

00:01:27,823  -->  00:01:30,156
by calling those attributes.
33

33

00:01:32,347  -->  00:01:34,165
So I can pull out the hour.
34

34

00:01:34,165  -->  00:01:36,332
I can pull out the minute.
35

35

00:01:37,252  -->  00:01:40,502
I can pull out even those microseconds,
36

36

00:01:43,954  -->  00:01:46,786
which were zero in this case since I didn't supply any.
37

37

00:01:46,786  -->  00:01:47,619
And you notice there's a lot
38

38

00:01:47,619  -->  00:01:49,754
of different things you can pull out here.
39

39

00:01:49,754  -->  00:01:51,934
The resolution, the timezone info,
40

40

00:01:51,934  -->  00:01:55,333
timezone name, those are all things you can add in.
41

41

00:01:55,333  -->  00:01:57,833
So if I look at datetime.time,
42

42

00:01:59,066  -->  00:02:03,460
notice I can pass in hours, minutes, seconds, microseconds,
43

43

00:02:03,460  -->  00:02:06,100
and then even timezone information,
44

44

00:02:06,100  -->  00:02:08,997
which it belongs to a separate subclass.
45

45

00:02:08,997  -->  00:02:11,914
So something to note here is that a time instance
46

46

00:02:11,914  -->  00:02:14,490
only holds values of times,
47

47

00:02:14,490  -->  00:02:17,625
not a date associated with a time.
48

48

00:02:17,625  -->  00:02:20,702
So we can also check the min and max values,
49

49

00:02:20,702  -->  00:02:23,191
a time that they can have in the module.
50

50

00:02:23,191  -->  00:02:25,752
So for instance, I can say,
51

51

00:02:25,752  -->  00:02:27,252
datetime.time min.
52

52

00:02:30,708  -->  00:02:34,458
And so the minimum I have if I print this out
53

53

00:02:35,377  -->  00:02:38,070
is zero, zero, zero, zero, zero.
54

54

00:02:38,070  -->  00:02:38,993
Which makes sense, right?
55

55

00:02:38,993  -->  00:02:41,719
That's the earliest time you can possibly have.
56

56

00:02:41,719  -->  00:02:46,005
And I can also print out the maximum time.
57

57

00:02:46,005  -->  00:02:49,082
Which is basically right before the 24-hour mark,
58

58

00:02:49,082  -->  00:02:51,334
which would bring you back down to zero.
59

59

00:02:51,334  -->  00:02:54,667
And then I can also check the resolution
60

60

00:02:55,985  -->  00:02:57,818
of a datetime instance
61

61

00:02:58,793  -->  00:03:01,249
by calling the resolution attribute.
62

62

00:03:01,249  -->  00:03:04,561
And so it can get down up to this resolution
63

63

00:03:04,561  -->  00:03:06,478
as far as microseconds.
64

64

00:03:07,455  -->  00:03:10,013
So the min and max class attributes,
65

65

00:03:10,013  -->  00:03:14,180
these reflect here the valid range of times in a single day.
66

66

00:03:16,708  -->  00:03:18,636
So now that we've learned about times themselves,
67

67

00:03:18,636  -->  00:03:19,981
and timestamps,
68

68

00:03:19,981  -->  00:03:22,356
so hour, minutes, seconds, microseconds,
69

69

00:03:22,356  -->  00:03:24,272
and even timezone information,
70

70

00:03:24,272  -->  00:03:27,022
let's go ahead and look at dates.
71

71

00:03:29,349  -->  00:03:32,138
So we looked at the time part of datetime,
72

72

00:03:32,138  -->  00:03:35,051
and now let's go on on to dates.
73

73

00:03:35,051  -->  00:03:37,171
Datetime allows us to work with datetime stamps.
74

74

00:03:37,171  -->  00:03:41,063
So calendar date values are represented with a date class.
75

75

00:03:41,063  -->  00:03:45,285
And instances of the date class have attributes
76

76

00:03:45,285  -->  00:03:47,861
for year, month, and day.
77

77

00:03:47,861  -->  00:03:49,462
And it's pretty easy to create a date
78

78

00:03:49,462  -->  00:03:52,962
representing today's date using the today class method.
79

79

00:03:52,962  -->  00:03:56,762
So I can say, call a variable, today,
80

80

00:03:56,762  -->  00:03:58,444
call datetime,
81

81

00:03:58,444  -->  00:04:01,374
and now I'm calling date, not time, off of it.
82

82

00:04:01,374  -->  00:04:04,229
And I can call 'em attribute called today.
83

83

00:04:04,229  -->  00:04:06,812
And then if I say, print today,
84

84

00:04:07,759  -->  00:04:11,274
it'll say in this case, October 6th, 2015
85

85

00:04:11,274  -->  00:04:14,227
is the day I'm actually doing this lecture.
86

86

00:04:14,227  -->  00:04:17,023
Okay, so what else can we check out?
87

87

00:04:17,023  -->  00:04:20,106
We can check out today. a time tuple,
88

88

00:04:23,251  -->  00:04:26,596
which is just a different structure to have.
89

89

00:04:26,596  -->  00:04:29,641
And it basically is almost like a named tuple,
90

90

00:04:29,641  -->  00:04:33,589
and it gives you more information on the separate aspects
91

91

00:04:33,589  -->  00:04:35,839
or attributes of your date.
92

92

00:04:38,360  -->  00:04:39,193
What else can you do?
93

93

00:04:39,193  -->  00:04:41,603
You can actually call year, month, and day separately.
94

94

00:04:41,603  -->  00:04:43,853
So I could say, today.year,
95

95

00:04:46,924  -->  00:04:47,757
or .month,
96

96

00:04:50,673  -->  00:04:51,506
or .day.
97

97

00:04:51,506  -->  00:04:55,194
You can call all those attributes separately.
98

98

00:04:55,194  -->  00:04:58,903
So as with time, the range of date values supported
99

99

00:04:58,903  -->  00:05:02,067
can be determined by the min and max attributes.
100

100

00:05:02,067  -->  00:05:05,734
So for instance, I could call datetime.date,
101

101

00:05:08,393  -->  00:05:11,405
and then check the minimum date possible.
102

102

00:05:11,405  -->  00:05:12,380
And if I print that out,
103

103

00:05:12,380  -->  00:05:15,413
so we can see it in more layman's terms,
104

104

00:05:15,413  -->  00:05:17,933
there it is, one, one, one.
105

105

00:05:17,933  -->  00:05:20,274
And then the max date you can ever have
106

106

00:05:20,274  -->  00:05:22,607
is December 31st, year 9999.
107

107

00:05:24,778  -->  00:05:26,278
And the resolution
108

108

00:05:27,563  -->  00:05:31,263
for a datetime.date object is one day.
109

109

00:05:31,263  -->  00:05:33,096
That's its resolution.
110

110

00:05:34,136  -->  00:05:36,951
So another way to create new date instances
111

111

00:05:36,951  -->  00:05:39,636
uses the replace method of an existing date.
112

112

00:05:39,636  -->  00:05:41,735
So for example, you can change the year,
113

113

00:05:41,735  -->  00:05:44,134
leaving the day and month alone.
114

114

00:05:44,134  -->  00:05:45,644
So I'll show you what I mean by that.
115

115

00:05:45,644  -->  00:05:49,300
I can create a variable called, d1,
116

116

00:05:49,300  -->  00:05:50,883
call datetime.date,
117

117

00:05:54,937  -->  00:05:58,742
and then let's go ahead and pass in the year,
118

118

00:05:58,742  -->  00:06:00,659
the month, and the day.
119

119

00:06:01,906  -->  00:06:05,522
And I'm gonna go ahead and say, print d1.
120

120

00:06:05,522  -->  00:06:07,272
So here we have 2015,
121

121

00:06:09,780  -->  00:06:11,242
March 11th.
122

122

00:06:11,242  -->  00:06:14,866
And notice, I can use replace as such.
123

123

00:06:14,866  -->  00:06:17,699
I could say, d2 equals d1.replace.
124

124

00:06:20,114  -->  00:06:23,197
And I'm gonna say, woops, d1.replace.
125

125

00:06:25,801  -->  00:06:29,968
And let's just change this year to let's say, 1990.
126

126

00:06:31,703  -->  00:06:35,220
And now if I call d2, it's the exact same date as d1,
127

127

00:06:35,220  -->  00:06:38,373
except we replaced the year with 1990.
128

128

00:06:38,373  -->  00:06:40,138
So this is actually a pretty useful method
129

129

00:06:40,138  -->  00:06:41,891
in case you just wanna make adjustments
130

130

00:06:41,891  -->  00:06:45,125
on date objects that you already have.
131

131

00:06:45,125  -->  00:06:46,727
And real quick, what I'm gonna show you
132

132

00:06:46,727  -->  00:06:48,297
is that you can actually perform arithmetic
133

133

00:06:48,297  -->  00:06:50,978
on date objects to check for time differences.
134

134

00:06:50,978  -->  00:06:55,239
So for example, if we just check back again what d1 equals,
135

135

00:06:55,239  -->  00:06:57,822
d1 is datetime 2015, three, 11.
136

136

00:06:58,882  -->  00:07:02,222
D2 is datetime 1990, three, 11.
137

137

00:07:02,222  -->  00:07:03,885
So I can actually perform arithmetic,
138

138

00:07:03,885  -->  00:07:05,135
so d1 minus d2,
139

139

00:07:06,311  -->  00:07:08,279
and it gives you the time delta.
140

140

00:07:08,279  -->  00:07:10,043
So this gives us the difference in days
141

141

00:07:10,043  -->  00:07:11,945
between those two dates.
142

142

00:07:11,945  -->  00:07:13,544
And you can use the time delta method
143

143

00:07:13,544  -->  00:07:15,999
to specify various units of times.
144

144

00:07:15,999  -->  00:07:19,532
You can ask it for days, minutes, hours, et cetera.
145

145

00:07:19,532  -->  00:07:22,896
So that's all there is as far as the basics understandings
146

146

00:07:22,896  -->  00:07:25,485
of using timestamps in your code.
147

147

00:07:25,485  -->  00:07:28,128
And if you hop over to the Jupyter Notebook,
148

148

00:07:28,128  -->  00:07:30,283
you can go ahead and check out some more examples,
149

149

00:07:30,283  -->  00:07:33,368
and it laid out in a little more detail here.
150

150

00:07:33,368  -->  00:07:35,216
So again, just to go over it,
151

151

00:07:35,216  -->  00:07:38,654
import datetime if you ever wanna deal with timestamps.
152

152

00:07:38,654  -->  00:07:40,537
If you ever wanna deal with timestamps in the hour,
153

153

00:07:40,537  -->  00:07:42,850
minute, second range, or microseconds,
154

154

00:07:42,850  -->  00:07:47,017
go ahead and use the time class on the datetime module.
155

155

00:07:47,931  -->  00:07:51,481
If you wanna deal with dates, then you use datetime.date.
156

156

00:07:51,481  -->  00:07:53,308
And you can go ahead and read through the Jupyter Notebook,
157

157

00:07:53,308  -->  00:07:55,831
or even the Python documentation
158

158

00:07:55,831  -->  00:07:59,823
to get more information on the various methods available
159

159

00:07:59,823  -->  00:08:01,475
in the datetime module.
160

160

00:08:01,475  -->  00:08:02,624
But other than that,
161

161

00:08:02,624  -->  00:08:03,848
I hope it's given you a basic idea
162

162

00:08:03,848  -->  00:08:06,319
on how you can use this in your own code.
163

163

00:08:06,319  -->  00:08:07,345
Alright.
164

164

00:08:07,345  -->  00:08:10,586
Thanks everyone, and I'll see you at the next lecture.
