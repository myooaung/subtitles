1
1

00:00:00,275  -->  00:00:02,291
<v Instructor>Hello everyone and welcome</v>
2

2

00:00:02,291  -->  00:00:05,086
to the Sets and Booleans lecture.
3

3

00:00:05,086  -->  00:00:07,021
So in this lecture, we're gonna learn
4

4

00:00:07,021  -->  00:00:09,726
about two more other object types.
5

5

00:00:09,726  -->  00:00:11,666
One is the data structure sets
6

6

00:00:11,666  -->  00:00:13,898
and the Boolean object type which is basically
7

7

00:00:13,898  -->  00:00:17,515
just the true and false display in Python.
8

8

00:00:17,515  -->  00:00:19,683
This is the Jupyter notebook that corresponds
9

9

00:00:19,683  -->  00:00:21,402
with this lecture so let's just go ahead
10

10

00:00:21,402  -->  00:00:24,152
and start coding and go through it.
11

11

00:00:24,152  -->  00:00:26,985
Okay, so sets can be thought of as
12

12

00:00:27,980  -->  00:00:31,395
an unordered collection of unique elements.
13

13

00:00:31,395  -->  00:00:33,083
And that's the important part, the fact that
14

14

00:00:33,083  -->  00:00:36,020
those elements inside of that set are unique.
15

15

00:00:36,020  -->  00:00:38,454
So you can construct the sets using
16

16

00:00:38,454  -->  00:00:40,549
the Sets function notation.
17

17

00:00:40,549  -->  00:00:43,635
So it's gonna look something like this.
18

18

00:00:43,635  -->  00:00:45,467
So I'm gonna make a sets and I'm gonna call,
19

19

00:00:45,467  -->  00:00:48,144
I'm gonna label it with the variable X here.
20

20

00:00:48,144  -->  00:00:49,644
So now X is a set.
21

21

00:00:50,789  -->  00:00:51,682 line:15% 
Great.
22

22

00:00:51,682  -->  00:00:52,861 line:15% 
Right now, it's an empty set.
23

23

00:00:52,861  -->  00:00:56,550 line:15% 
So how do I add elements to that set?
24

24

00:00:56,550  -->  00:00:58,598 line:15% 
I use the add method which is gonna
25

25

00:00:58,598  -->  00:01:01,548 line:15% 
be X or whatever variable you decided
26

26

00:01:01,548  -->  00:01:04,421 line:15% 
to call your set dot add for add.
27

27

00:01:04,421  -->  00:01:07,239 line:15% 
And you can add whatever objects you want to it.
28

28

00:01:07,239  -->  00:01:11,198 line:15% 
I'm gonna say X dot add one and if I check
29

29

00:01:11,198  -->  00:01:14,037 line:15% 
now what my X is, it's gonna look
30

30

00:01:14,037  -->  00:01:16,620 line:15% 
and add that one into that set.
31

31

00:01:17,828  -->  00:01:19,249 line:15% 
So something interesting here.
32

32

00:01:19,249  -->  00:01:22,275 line:15% 
You notice that the notation is curly brackets.
33

33

00:01:22,275  -->  00:01:24,127 line:15% 
This actually does not indicate
34

34

00:01:24,127  -->  00:01:26,195 line:15% 
that it's a dictionary although
35

35

00:01:26,195  -->  00:01:28,563 line:15% 
you can draw analogies that it's a set almost
36

36

00:01:28,563  -->  00:01:31,777 line:15% 
like being a dictionary but with only the keys.
37

37

00:01:31,777  -->  00:01:33,416 line:15% 
'Cause remember in a dictionary you can't have
38

38

00:01:33,416  -->  00:01:35,401 line:15% 
multiple keys being the exact same thing.
39

39

00:01:35,401  -->  00:01:37,382 line:15% 
You can only have unique keys.
40

40

00:01:37,382  -->  00:01:39,231 line:15% 
You kind of think of a set as just
41

41

00:01:39,231  -->  00:01:42,932 line:15% 
a dictionary but only keys that are unique.
42

42

00:01:42,932  -->  00:01:45,515 line:15% 
Let's go ahead and add a different element
43

43

00:01:45,515  -->  00:01:47,267 line:15% 
to our set which is called X.
44

44

00:01:47,267  -->  00:01:50,727 line:15% 
Let's go ahead and add the number two to it.
45

45

00:01:50,727  -->  00:01:54,668 line:15% 
Now I checked that I have one and two in my set.
46

46

00:01:54,668  -->  00:01:58,624 line:15% 
What happens if I try to add the same elements
47

47

00:01:58,624  -->  00:02:00,902 line:15% 
that's already in there?
48

48

00:02:00,902  -->  00:02:03,058 line:15% 
So we know one is already in there.
49

49

00:02:03,058  -->  00:02:03,989 line:15% 
So what happens?
50

50

00:02:03,989  -->  00:02:05,808 line:15% 
So you realise there's actually no change.
51

51

00:02:05,808  -->  00:02:08,067 line:15% 
It won't place another one in there
52

52

00:02:08,067  -->  00:02:10,509 line:15% 
like it would if it was like a list or something
53

53

00:02:10,509  -->  00:02:11,925 line:15% 
and that's because the sets only
54

54

00:02:11,925  -->  00:02:14,270 line:15% 
concerned with the unique elements.
55

55

00:02:14,270  -->  00:02:16,518 line:15% 
You can actually use that set function
56

56

00:02:16,518  -->  00:02:19,571 line:15% 
to cast something like a list with multiple
57

57

00:02:19,571  -->  00:02:22,631 line:15% 
repeat elements to get the unique elements.
58

58

00:02:22,631  -->  00:02:24,976 line:15% 
I'll show you an example of what I mean by that.
59

59

00:02:24,976  -->  00:02:28,187 line:15% 
So I'm gonna say L is equal to a list
60

60

00:02:28,187  -->  00:02:30,990 line:15% 
and in this list I'm gonna have a couple ones,
61

61

00:02:30,990  -->  00:02:35,866 line:15% 
a couple twos, couple threes and then like a four.
62

62

00:02:35,866  -->  00:02:39,914 line:15% 
So notice how I have repeated items or elements
63

63

00:02:39,914  -->  00:02:42,609 line:15% 
in that list that have occurred more than once.
64

64

00:02:42,609  -->  00:02:45,480 line:15% 
If I take that list and cast it,
65

65

00:02:45,480  -->  00:02:47,085 line:15% 
remember we kind of use casting
66

66

00:02:47,085  -->  00:02:49,668 line:15% 
as a term back for using floats
67

67

00:02:50,539  -->  00:02:52,654 line:15% 
in casting numbers as floats.
68

68

00:02:52,654  -->  00:02:54,650 line:15% 
So if I use sets of L, notice that the set
69

69

00:02:54,650  -->  00:02:57,141 line:15% 
is gonna grab all those unique values.
70

70

00:02:57,141  -->  00:02:58,840 line:15% 
So one, two, three, and four are
71

71

00:02:58,840  -->  00:03:01,662 line:15% 
the unique values in that list.
72

72

00:03:01,662  -->  00:03:05,148 line:15% 
And that's basically the gist of sets.
73

73

00:03:05,148  -->  00:03:07,941
Remember sets are only concerned
74

74

00:03:07,941  -->  00:03:10,083
with the unique elements and you can
75

75

00:03:10,083  -->  00:03:12,205
create them by calling this empty
76

76

00:03:12,205  -->  00:03:14,103
set function and you can to them
77

77

00:03:14,103  -->  00:03:16,186
with this dot add method.
78

78

00:03:17,315  -->  00:03:19,314
Sets are gonna be a super useful tool
79

79

00:03:19,314  -->  00:03:21,615
and we'll come back to them later on
80

80

00:03:21,615  -->  00:03:23,548
throughout the course as a really unique
81

81

00:03:23,548  -->  00:03:26,236
tool because of this feature that they are only
82

82

00:03:26,236  -->  00:03:28,237
concerned with unique elements.
83

83

00:03:28,237  -->  00:03:29,454
Alright.
84

84

00:03:29,454  -->  00:03:32,954
Let's go ahead and move along to Booleans.
85

85

00:03:34,582  -->  00:03:37,212
Python comes with Booleans which are basically
86

86

00:03:37,212  -->  00:03:39,738
predefined true and false displays.
87

87

00:03:39,738  -->  00:03:42,626
Almost like integers one and zero.
88

88

00:03:42,626  -->  00:03:44,421
It also has a placeholder object
89

89

00:03:44,421  -->  00:03:46,787
called none and let's go ahead
90

90

00:03:46,787  -->  00:03:48,962
and walk-through a couple examples of this.
91

91

00:03:48,962  -->  00:03:51,962 line:15% 
So I'm gonna say A is equal to true.
92

92

00:03:54,388  -->  00:03:59,329 line:15% 
Run that cell and now if I show A it shows out true.
93

93

00:03:59,329  -->  00:04:03,722
And we can also use comparison operators to create Booleans.
94

94

00:04:03,722  -->  00:04:07,303
We haven't gone over specific comparison operators.
95

95

00:04:07,303  -->  00:04:08,656
We'll go over them.
96

96

00:04:08,656  -->  00:04:11,055
There's an entire section in this course for them.
97

97

00:04:11,055  -->  00:04:12,416
But I'm just gonna show you a quick example
98

98

00:04:12,416  -->  00:04:15,416 line:15% 
so I can ask is one greater than two
99

99

00:04:17,338  -->  00:04:19,609 line:15% 
and the output will be a Boolean which is false
100

100

00:04:19,609  -->  00:04:21,288 line:15% 
since one is not greater than two.
101

101

00:04:21,288  -->  00:04:24,000
And we'll go over all these different symbols
102

102

00:04:24,000  -->  00:04:27,344
and what they mean later on in the course.
103

103

00:04:27,344  -->  00:04:29,166 line:15% 
Let's go ahead and switch this.
104

104

00:04:29,166  -->  00:04:30,820 line:15% 
Let's say is 11 greater than two.
105

105

00:04:30,820  -->  00:04:33,122 line:15% 
Then the output of the Boolean is true.
106

106

00:04:33,122  -->  00:04:33,955 line:15% 
Okay.
107

107

00:04:33,955  -->  00:04:36,529
So we can also use none as a placeholder
108

108

00:04:36,529  -->  00:04:39,949
for an object that we don't want to reassign yet.
109

109

00:04:39,949  -->  00:04:41,918 line:15% 
And what I mean by none is the actual
110

110

00:04:41,918  -->  00:04:44,882 line:15% 
word None with a capital N there.
111

111

00:04:44,882  -->  00:04:46,756 line:15% 
And now B is gonna be a placeholder
112

112

00:04:46,756  -->  00:04:49,712 line:15% 
and you notice nothing popped out when I set
113

113

00:04:49,712  -->  00:04:53,295
that cell to run since it's literally none.
114

114

00:04:54,770  -->  00:04:57,782 line:15% 
And then I can reassign it to maybe a string.
115

115

00:04:57,782  -->  00:05:01,844 line:15% 
And now B is equal to A or the string of A.
116

116

00:05:01,844  -->  00:05:02,691
Okay.
117

117

00:05:02,691  -->  00:05:03,739
So that's it.
118

118

00:05:03,739  -->  00:05:07,693
It's just a super basic understanding of Sets and Booleans.
119

119

00:05:07,693  -->  00:05:11,263
We'll touch upon them later on throughout the course.
120

120

00:05:11,263  -->  00:05:12,505
So just a quick review.
121

121

00:05:12,505  -->  00:05:15,186
We hop over back to this Jupyter notebook.
122

122

00:05:15,186  -->  00:05:18,290
Sets are an unordered collection of unique elements.
123

123

00:05:18,290  -->  00:05:20,488
You construct them using this Set function
124

124

00:05:20,488  -->  00:05:23,578
and you can add to them with this add method.
125

125

00:05:23,578  -->  00:05:25,020
Remember they have curly brackets
126

126

00:05:25,020  -->  00:05:26,888
but that doesn't mean they're a dictionary.
127

127

00:05:26,888  -->  00:05:28,506
Although you can draw analogies as
128

128

00:05:28,506  -->  00:05:31,753
a set being a dictionary with only keys.
129

129

00:05:31,753  -->  00:05:34,839
Remember you can also use Set to cast
130

130

00:05:34,839  -->  00:05:37,495 line:15% 
another data structure such as a list
131

131

00:05:37,495  -->  00:05:40,113 line:15% 
to only get the unique values out of it.
132

132

00:05:40,113  -->  00:05:41,722
We went over Booleans which are basically
133

133

00:05:41,722  -->  00:05:43,523
just true and false and we went
134

134

00:05:43,523  -->  00:05:46,670 line:15% 
over none used as a placeholder.
135

135

00:05:46,670  -->  00:05:49,081
Okay, so we'll learn way more and see Booleans
136

136

00:05:49,081  -->  00:05:51,015
a lot more when it comes to comparison
137

137

00:05:51,015  -->  00:05:53,459
operations later on in the course.
138

138

00:05:53,459  -->  00:05:56,118
We'll also go over them throughout the course.
139

139

00:05:56,118  -->  00:06:00,220
They're gonna be super useful to have logic within our code.
140

140

00:06:00,220  -->  00:06:02,215
Okay, so that's about it and I'll
141

141

00:06:02,215  -->  00:06:03,814
see you at the next lecture.
142

142

00:06:03,814  -->  00:06:04,647
Thanks.
