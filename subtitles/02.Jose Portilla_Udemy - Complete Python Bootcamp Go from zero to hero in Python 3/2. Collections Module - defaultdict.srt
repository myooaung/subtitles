1
1

00:00:01,844  -->  00:00:02,677
<v Instructor>Hello everyone,</v>
2

2

00:00:02,677  -->  00:00:03,924
and welcome to the second lecture
3

3

00:00:03,924  -->  00:00:07,332
in the collections module part of this section.
4

4

00:00:07,332  -->  00:00:09,135
So what we're gonna be learning about now,
5

5

00:00:09,135  -->  00:00:11,482
is the defaultdict,
6

6

00:00:11,482  -->  00:00:12,975
which is a dictionary like object
7

7

00:00:12,975  -->  00:00:16,960
which provides all the methods that come from a dictionary,
8

8

00:00:16,960  -->  00:00:20,443
but also takes on a first argument as a default data type,
9

9

00:00:20,443  -->  00:00:22,946
and I'll show you what I mean by that in just a second.
10

10

00:00:22,946  -->  00:00:24,211
The most important thing to note,
11

11

00:00:24,211  -->  00:00:26,367
is when you're constructing a default dictionary,
12

12

00:00:26,367  -->  00:00:28,574
it will never raise a key error.
13

13

00:00:28,574  -->  00:00:30,112
If the key doesn't exist,
14

14

00:00:30,112  -->  00:00:31,900
then it will get the value returned
15

15

00:00:31,900  -->  00:00:35,331
by the default factory condition that you provide.
16

16

00:00:35,331  -->  00:00:36,962
So I'll show you what I mean.
17

17

00:00:36,962  -->  00:00:38,951
Let's go ahead and start by importing it,
18

18

00:00:38,951  -->  00:00:41,908
so we'll say from collections
19

19

00:00:41,908  -->  00:00:43,491
import defaultdict.
20

20

00:00:46,498  -->  00:00:48,624
There we have it.
21

21

00:00:48,624  -->  00:00:51,000
Alright, so let's see what happens if we start
22

22

00:00:51,000  -->  00:00:52,615
with the regular dictionary.
23

23

00:00:52,615  -->  00:00:54,854
So I'm gonna make just a normal dictionary,
24

24

00:00:54,854  -->  00:00:57,217
gonna have a k1 string key,
25

25

00:00:57,217  -->  00:00:59,543
with a value of one.
26

26

00:00:59,543  -->  00:01:01,198
So there's our normal dictionary.
27

27

00:01:01,198  -->  00:01:04,365
If I call k1, I get the value one out.
28

28

00:01:05,686  -->  00:01:08,271
Let's say I call a key that's not in there.
29

29

00:01:08,271  -->  00:01:11,382
Let's say I ask for key 2, or k2.
30

30

00:01:11,382  -->  00:01:13,039
Notice we get an error,
31

31

00:01:13,039  -->  00:01:14,821
and we get a key error.
32

32

00:01:14,821  -->  00:01:16,766
So now let's see how that would work
33

33

00:01:16,766  -->  00:01:19,679
with a default dictionary.
34

34

00:01:19,679  -->  00:01:21,667
So the way I would create a default dictionary,
35

35

00:01:21,667  -->  00:01:24,004
I'll again call it the variable d.
36

36

00:01:24,004  -->  00:01:25,587
I call defaultdict,
37

37

00:01:28,233  -->  00:01:31,813
and here I'm gonna pass in object.
38

38

00:01:31,813  -->  00:01:33,480
Whoops, defaultdict.
39

39

00:01:35,604  -->  00:01:37,937
Okay, so now, if you notice,
40

40

00:01:39,349  -->  00:01:41,091
if I were to put in a key
41

41

00:01:41,091  -->  00:01:43,378
that doesn't exist in this dictionary yet,
42

42

00:01:43,378  -->  00:01:44,746
and remember this dictionary d,
43

43

00:01:44,746  -->  00:01:46,238
for default dictionary d,
44

44

00:01:46,238  -->  00:01:47,322
doesn't have any keys.
45

45

00:01:47,322  -->  00:01:48,568
I haven't assigned it any.
46

46

00:01:48,568  -->  00:01:50,283
And I call one,
47

47

00:01:50,283  -->  00:01:52,533
it will assign whatever the factory condition
48

48

00:01:52,533  -->  00:01:53,987
here for that value is.
49

49

00:01:53,987  -->  00:01:56,230
And in this case, it's gonna be an object.
50

50

00:01:56,230  -->  00:01:58,313
So if I say for item in d
51

51

00:02:03,712  -->  00:02:05,263
print item,
52

52

00:02:05,263  -->  00:02:09,498
notice we do have a key there of one now.
53

53

00:02:09,498  -->  00:02:14,272
So we can also use this to initialise default values,
54

54

00:02:14,272  -->  00:02:16,487
and you can usually use that in conjunction
55

55

00:02:16,487  -->  00:02:17,617
with a Lambda function.
56

56

00:02:17,617  -->  00:02:20,450
So I can say d equals defaultdict.
57

57

00:02:22,841  -->  00:02:25,072
I'm gonna pass in a Lambda function
58

58

00:02:25,072  -->  00:02:27,739
that will take in any arguments,
59

59

00:02:28,650  -->  00:02:30,651
and just return zero.
60

60

00:02:30,651  -->  00:02:32,774
So it actually doesn't even really take in an argument,
61

61

00:02:32,774  -->  00:02:35,107
it just always returns zero.
62

62

00:02:36,464  -->  00:02:40,830
Okay, so that means, if I assign a one here,
63

63

00:02:40,830  -->  00:02:44,197
without actually putting an equal sign there,
64

64

00:02:44,197  -->  00:02:46,355
that will automatically assign,
65

65

00:02:46,355  -->  00:02:49,480
using the Lambda function, a zero there.
66

66

00:02:49,480  -->  00:02:54,096
And if I put in another key that says, let's say two,
67

67

00:02:54,096  -->  00:02:55,284
then that also works.
68

68

00:02:55,284  -->  00:02:57,648
So now, if I print out my default dictionary,
69

69

00:02:57,648  -->  00:02:59,719
I have a default dictionary,
70

70

00:02:59,719  -->  00:03:02,051
has this function, which is the Lambda expression,
71

71

00:03:02,051  -->  00:03:04,499
which always returns zero,
72

72

00:03:04,499  -->  00:03:08,403
if there is no assignment for that key.
73

73

00:03:08,403  -->  00:03:10,650
So two has two since I assigned it.
74

74

00:03:10,650  -->  00:03:13,881
Since I didn't assign one, instead of throwing a key error,
75

75

00:03:13,881  -->  00:03:16,667
it goes by the default that you pass,
76

76

00:03:16,667  -->  00:03:19,736
which in this case was just return a zero.
77

77

00:03:19,736  -->  00:03:20,738
I hope you can see now
78

78

00:03:20,738  -->  00:03:22,818
why the default dictionary is so powerful
79

79

00:03:22,818  -->  00:03:25,849
since it won't ever respond with a key error,
80

80

00:03:25,849  -->  00:03:27,008
it will just create one
81

81

00:03:27,008  -->  00:03:29,533
with whatever the default condition was
82

82

00:03:29,533  -->  00:03:31,741
when you passed it.
83

83

00:03:31,741  -->  00:03:33,412
Okay, so that's it.
84

84

00:03:33,412  -->  00:03:34,245
Go ahead and check out
85

85

00:03:34,245  -->  00:03:35,985
the documentation for default dictionary
86

86

00:03:35,985  -->  00:03:37,685
in case you wanna learn more,
87

87

00:03:37,685  -->  00:03:39,141
but the main takeaway here,
88

88

00:03:39,141  -->  00:03:40,977
is that it won't throw a key error.
89

89

00:03:40,977  -->  00:03:43,725
Instead it will initialise the default value
90

90

00:03:43,725  -->  00:03:46,834
that you place when you create the default dictionary.
91

91

00:03:46,834  -->  00:03:48,741
Okay, up next,
92

92

00:03:48,741  -->  00:03:51,908
we'll learn about order dictionaries.
