1
1

00:00:00,145  -->  00:00:02,890
<v Instructor>Hello and welcome to this Python tutorial.</v>
2

2

00:00:02,890  -->  00:00:06,140
Alright so time to create our first RBM object
3

3

00:00:06,140  -->  00:00:08,840
so this is going to be a very quick and easy tutorial
4

4

00:00:08,840  -->  00:00:11,470
because basically what we need to create this object
5

5

00:00:11,470  -->  00:00:15,330
is just call the class RBM with the two parameters
6

6

00:00:15,330  -->  00:00:18,730
NV and NH because basically when we create
7

7

00:00:18,730  -->  00:00:22,210
this first RBM object well only the init function
8

8

00:00:22,210  -->  00:00:25,610
will take action so basically only the parameters
9

9

00:00:25,610  -->  00:00:28,750
of the object will be created that is initialized.
10

10

00:00:28,750  -->  00:00:31,300
All the weight in the tensor of weights W
11

11

00:00:31,300  -->  00:00:34,900
will be initialized, then all the bias of the probabilities
12

12

00:00:34,900  -->  00:00:37,990
PH given V will also be initialized
13

13

00:00:37,990  -->  00:00:40,880
as well as the weight of the probabilities PV
14

14

00:00:40,880  -->  00:00:43,364
given H that will be initialized.
15

15

00:00:43,364  -->  00:00:47,830
Then the other functions sample H, sample V and train
16

16

00:00:47,830  -->  00:00:49,800
will be used during the training,
17

17

00:00:49,800  -->  00:00:51,500
they will not take any action right now
18

18

00:00:51,500  -->  00:00:54,070
when creating the object but we will use them
19

19

00:00:54,070  -->  00:00:58,090
when we train our RBM model over several epochs.
20

20

00:00:58,090  -->  00:01:00,880
And so why only the init function will take action,
21

21

00:01:00,880  -->  00:01:03,150
well that's because that's the default function.
22

22

00:01:03,150  -->  00:01:05,840
As soon as you create an object of a class
23

23

00:01:05,840  -->  00:01:08,770
the init function takes action automatically
24

24

00:01:08,770  -->  00:01:11,610
and then from the object that will be created
25

25

00:01:11,610  -->  00:01:14,370
we can use the different functions that are defined
26

26

00:01:14,370  -->  00:01:16,010
in the class and so that's exactly
27

27

00:01:16,010  -->  00:01:18,430
what we will do in the training phase.
28

28

00:01:18,430  -->  00:01:21,060
So let's create our RBM object.
29

29

00:01:21,060  -->  00:01:25,060
So to create this object we need NV and NH
30

30

00:01:25,060  -->  00:01:28,740
so NV is a fixed parameter, we already have NV
31

31

00:01:28,740  -->  00:01:31,680
and that is the number of movies because remember
32

32

00:01:31,680  -->  00:01:34,560
NV is the number of visible nodes and at the start
33

33

00:01:34,560  -->  00:01:36,600
the visible nodes are the ratings
34

34

00:01:36,600  -->  00:01:39,070
of all the movies by a specific user
35

35

00:01:39,070  -->  00:01:42,690
and so we have one visible node for each movie.
36

36

00:01:42,690  -->  00:01:45,370
And so now we have several ways of getting
37

37

00:01:45,370  -->  00:01:47,360
the number of visible nodes, well first
38

38

00:01:47,360  -->  00:01:50,650
we could say it is equal to NB movies
39

39

00:01:50,650  -->  00:01:52,572
1682
40

40

00:01:52,572  -->  00:01:55,430
or the other way and that is a safer way
41

41

00:01:55,430  -->  00:01:56,890
because we have to make sure
42

42

00:01:56,890  -->  00:01:59,130
it corresponds to the number of features
43

43

00:01:59,130  -->  00:02:01,610
in our matrix of features which is a training set
44

44

00:02:01,610  -->  00:02:03,970
that is actually a tensor of features
45

45

00:02:03,970  -->  00:02:08,480
and to make sure of that we can define NV as len
46

46

00:02:08,480  -->  00:02:11,940
training set end brackets
47

47

00:02:11,940  -->  00:02:16,370
and zero. Why is that? Because training set bracket 0
48

48

00:02:16,370  -->  00:02:18,970
corresponds to the first line of training set
49

49

00:02:18,970  -->  00:02:22,050
and len training set bracket zero is the number
50

50

00:02:22,050  -->  00:02:23,800
of elements in this first line.
51

51

00:02:23,800  -->  00:02:27,160
That is exactly the number of features we want for NV.
52

52

00:02:27,160  -->  00:02:29,830
So that's a safer way but you can directly
53

53

00:02:29,830  -->  00:02:31,940
take NB movies as well.
54

54

00:02:31,940  -->  00:02:35,790
Alright so NV equals len training set zero
55

55

00:02:35,790  -->  00:02:37,950
we have our first parameter that we need
56

56

00:02:37,950  -->  00:02:40,100
for the init function to take action.
57

57

00:02:40,100  -->  00:02:44,380
Then what we also need is NH, the number of hidden nodes
58

58

00:02:44,380  -->  00:02:46,780
and that is a parameter we choose.
59

59

00:02:46,780  -->  00:02:48,760
That's how we want to create the architecture
60

60

00:02:48,760  -->  00:02:50,070
of our newel network.
61

61

00:02:50,070  -->  00:02:54,040
So NH equals and here we can choose any number
62

62

00:02:54,040  -->  00:02:56,030
but let's try to choose a relevant number.
63

63

00:02:56,030  -->  00:03:00,833
We have 1682 movies so 1682 visible nodes
64

64

00:03:02,400  -->  00:03:05,270
and so well let's see the hidden nodes correspond
65

65

00:03:05,270  -->  00:03:07,900
to some features that are going to be detected
66

66

00:03:07,900  -->  00:03:10,240
by the RBM model and among these features
67

67

00:03:10,240  -->  00:03:13,854
we're gonna have some jars, some actors, some directors
68

68

00:03:13,854  -->  00:03:15,649
whether the movie's got an Oscar,
69

69

00:03:15,649  -->  00:03:18,180
whether the movie's rather old or new.
70

70

00:03:18,180  -->  00:03:20,760
Well we can detect many features
71

71

00:03:20,760  -->  00:03:24,450
in all our database of 1682 movies.
72

72

00:03:24,450  -->  00:03:26,890
So the number of hidden nodes corresponds
73

73

00:03:26,890  -->  00:03:29,350
to the number of features we want to detect.
74

74

00:03:29,350  -->  00:03:32,800
So let's say that we want to start by detecting
75

75

00:03:32,800  -->  00:03:36,180
100 features, maybe that's a good start
76

76

00:03:36,180  -->  00:03:38,260
and of course then you can practice,
77

77

00:03:38,260  -->  00:03:39,910
you can try some other models,
78

78

00:03:39,910  -->  00:03:42,210
create some other RBM objects you know
79

79

00:03:42,210  -->  00:03:45,070
to test several models and compare them
80

80

00:03:45,070  -->  00:03:47,750
and so you can try to detect some more features
81

81

00:03:47,750  -->  00:03:50,630
or even less features, it's actually hard to say right now
82

82

00:03:50,630  -->  00:03:52,660
what is the optimal number of features
83

83

00:03:52,660  -->  00:03:56,010
but this NH parameter is totally tunable.
84

84

00:03:56,010  -->  00:03:57,500
You will definitely improve your model
85

85

00:03:57,500  -->  00:04:01,116
by trying to tune this number of hidden nodes parameter.
86

86

00:04:01,116  -->  00:04:04,709
Alright so we have our NH and then what do we need?
87

87

00:04:04,709  -->  00:04:06,761
Well there is one more parameter
88

88

00:04:06,761  -->  00:04:10,740
that was not highlighted yet and that is the batch size.
89

89

00:04:10,740  -->  00:04:13,230
We already mentioned this concept of batch
90

90

00:04:13,230  -->  00:04:16,670
you know when we created this dimension here, one.
91

91

00:04:16,670  -->  00:04:18,310
That corresponds to the batch
92

92

00:04:18,310  -->  00:04:21,200
and that's because when we train our algorithm
93

93

00:04:21,200  -->  00:04:24,060
we will not update the weights after each observation,
94

94

00:04:24,060  -->  00:04:26,860
we will update the weights after several observations
95

95

00:04:26,860  -->  00:04:28,550
that will all go into a a batch
96

96

00:04:28,550  -->  00:04:30,410
and so the batches will have each one
97

97

00:04:30,410  -->  00:04:32,380
the same number of observations.
98

98

00:04:32,380  -->  00:04:36,150
So this additional parameter that we can tune as well
99

99

00:04:36,150  -->  00:04:38,360
to try to improve the model in the end
100

100

00:04:38,360  -->  00:04:41,080
is the batch size so right now
101

101

00:04:41,080  -->  00:04:44,420
I'm just creating a new variable that I'm calling batch size
102

102

00:04:44,420  -->  00:04:47,400
and again we have to start with something.
103

103

00:04:47,400  -->  00:04:50,410
We have to start with the batch size so that can be one,
104

104

00:04:50,410  -->  00:04:52,490
in that case you do online learning because you're updating
105

105

00:04:52,490  -->  00:04:55,720
the weights after each observation going to the network
106

106

00:04:55,720  -->  00:04:58,870
but let's get a fast training and to get a fast training
107

107

00:04:58,870  -->  00:05:02,000
we can take a rather large batch size and so let's start
108

108

00:05:02,000  -->  00:05:06,460
with 100 but this again is totally tunable.
109

109

00:05:06,460  -->  00:05:08,492
You will be able to try several batch sizes
110

110

00:05:08,492  -->  00:05:10,890
and one of them will definitely lead you
111

111

00:05:10,890  -->  00:05:12,830
to better performance results
112

112

00:05:12,830  -->  00:05:15,770
but here you can see we have a batch size of 100,
113

113

00:05:15,770  -->  00:05:19,680
we have 943 observations so the training will go
114

114

00:05:19,680  -->  00:05:22,098
very fast, which is good to start.
115

115

00:05:22,098  -->  00:05:24,976
So we're gonna start with that and then you will practice
116

116

00:05:24,976  -->  00:05:28,520
and tune your model to try to improve it.
117

117

00:05:28,520  -->  00:05:32,378
Alright and now good news, we are ready to create
118

118

00:05:32,378  -->  00:05:35,323
our RBM object because basically we have
119

119

00:05:35,323  -->  00:05:38,630
our two parameters we need that is the two parameters
120

120

00:05:38,630  -->  00:05:41,940
of the init method, NV and NH.
121

121

00:05:41,940  -->  00:05:45,060
So now that's very easy there is nothing more easy
122

122

00:05:45,060  -->  00:05:47,090
to create an object of a class
123

123

00:05:47,090  -->  00:05:49,430
we actually already did it many times
124

124

00:05:49,430  -->  00:05:51,180
in the first volume of this course.
125

125

00:05:51,180  -->  00:05:53,160
For example, remember when we created
126

126

00:05:53,160  -->  00:05:56,070
our class vary objects from the sequential class?
127

127

00:05:56,070  -->  00:05:59,210
Well we indeed created an object of a class
128

128

00:05:59,210  -->  00:06:02,220
but now the difference is that we made our own class
129

129

00:06:02,220  -->  00:06:05,370
so right now you are about to create the first object
130

130

00:06:05,370  -->  00:06:08,240
of your class, so congratulations in advance.
131

131

00:06:08,240  -->  00:06:11,550
Let's do this, so we're gonna call our object
132

132

00:06:11,550  -->  00:06:16,100
RBM then equals and then we just take our class
133

133

00:06:16,100  -->  00:06:20,450
RBM with capital letters and then some parenthesis
134

134

00:06:20,450  -->  00:06:22,720
and as you can see we can already see it,
135

135

00:06:22,720  -->  00:06:25,670
Python recognized the argument to input,
136

136

00:06:25,670  -->  00:06:28,620
that's NV and NH because Python recognized
137

137

00:06:28,620  -->  00:06:33,400
the init method that takes, as inputs, NV and NH.
138

138

00:06:33,400  -->  00:06:37,430
So here we go, we're all ready now to input NV first
139

139

00:06:37,430  -->  00:06:42,430
and then NH. Alright and that will create our RBM object.
140

140

00:06:42,800  -->  00:06:46,490
So let's do it, let's select these four lines here
141

141

00:06:46,490  -->  00:06:51,286
and execute, here we go, we have our RBM model created
142

142

00:06:51,286  -->  00:06:53,080
and now we just need to train it
143

143

00:06:53,080  -->  00:06:55,802
and that's exactly what we'll do in the next tutorial.
144

144

00:06:55,802  -->  00:06:57,553
Until then, enjoy the learning.
