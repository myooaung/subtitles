WEBVTT
1
1

00:00:00.000  -->  00:00:02.350
<v Instructor>Hello and welcome to this new tutorial.</v>
2

2

00:00:02.350  -->  00:00:04.739
Today we're gonna tackle the second step
3

3

00:00:04.739  -->  00:00:08.810
of data pre-processing, which is about feature scaling.
4

4

00:00:08.810  -->  00:00:11.570
So, to start with the step, let's first
5

5

00:00:11.570  -->  00:00:15.449
have a quick reminder of the two best ways
6

6

00:00:15.449  -->  00:00:17.450
of applying feature scaling.
7

7

00:00:17.450  -->  00:00:21.020
These are standardization and normalization.
8

8

00:00:21.020  -->  00:00:25.040
So, standardization, you subtract your observation
9

9

00:00:25.040  -->  00:00:28.170
by the mean of all your observations in one same column
10

10

00:00:28.170  -->  00:00:30.082
and you divide it by the standard deviation.
11

11

00:00:30.082  -->  00:00:33.173
And then normalization, you take your observation,
12

12

00:00:33.173  -->  00:00:37.020
you subtract it by the minimum of all your observations,
13

13

00:00:37.020  -->  00:00:38.719
that is the minimum stock price,
14

14

00:00:38.719  -->  00:00:41.360
and you divide it by the maximum of all the stock prices,
15

15

00:00:41.360  -->  00:00:43.828
minus the minimum of all the stock prices.
16

16

00:00:43.828  -->  00:00:45.900
And so according to you, what are we
17

17

00:00:45.900  -->  00:00:48.580
going to use this time for RNN?
18

18

00:00:48.580  -->  00:00:50.990
Well this time, it's actually recommended,
19

19

00:00:50.990  -->  00:00:54.299
it's actually more relevant to use normalization.
20

20

00:00:54.299  -->  00:00:56.820
Whenever you build an RNN and especially
21

21

00:00:56.820  -->  00:01:00.430
if there is a sigmoid function as the activation function
22

22

00:01:00.430  -->  00:01:03.460
in the output layer of you recurrent neural network,
23

23

00:01:03.460  -->  00:01:05.941
well I recommend to apply normalization.
24

24

00:01:05.941  -->  00:01:08.260
And therefore that's exactly what we're going to do.
25

25

00:01:08.260  -->  00:01:10.970
We're going to apply normalization and to do this
26

26

00:01:10.970  -->  00:01:13.790
we're going to use the min max K-load class
27

27

00:01:13.790  -->  00:01:17.004
from the pre-processing module of the Scikit learn library.
28

28

00:01:17.004  -->  00:01:21.180
So let's go back to Python, here we are
29

29

00:01:21.180  -->  00:01:23.970
and therefore let's start by importing
30

30

00:01:23.970  -->  00:01:26.140
this min max K-load class.
31

31

00:01:26.140  -->  00:01:29.410
So we import this class from,
32

32

00:01:29.410  -->  00:01:32.358
first the Scikit learn library, SK learn.
33

33

00:01:32.358  -->  00:01:35.340
Then from this Scikit learn library we're going to get
34

34

00:01:35.340  -->  00:01:40.340
into the pre-processing module, there we go.
35

35

00:01:40.550  -->  00:01:42.460
And from this pre-processing module of
36

36

00:01:42.460  -->  00:01:44.300
the Scikit learn library, we're gonna
37

37

00:01:44.300  -->  00:01:49.300
import the min ax scaler class.
38

38

00:01:50.200  -->  00:01:52.640
Alright, perfect, we have the right class.
39

39

00:01:52.640  -->  00:01:54.758
And now from this class, we're going to create
40

40

00:01:54.758  -->  00:01:57.540
an object of this class, which we're going
41

41

00:01:57.540  -->  00:02:00.380
to call SC for scale.
42

42

00:02:00.380  -->  00:02:02.430
And so Sc is gonna be an object
43

43

00:02:02.430  -->  00:02:07.430
of this min max scaler class.
44

44

00:02:08.205  -->  00:02:11.202
And now we have to input some arguments and as you can see,
45

45

00:02:11.202  -->  00:02:14.060
feature range equals zero one,
46

46

00:02:14.060  -->  00:02:17.670
that's the default feature range and copy equals through.
47

47

00:02:17.670  -->  00:02:19.920
So that's exactly what we're going to use,
48

48

00:02:19.920  -->  00:02:22.330
we're going to use the default argument.
49

49

00:02:22.330  -->  00:02:23.760
The default feature range
50

50

00:02:23.760  -->  00:02:26.120
but to make sure that we're applying
51

51

00:02:26.120  -->  00:02:28.810
this feature range, I'm gonna include it anyway.
52

52

00:02:28.810  -->  00:02:33.810
Feature underscore range equals zero and one.
53

53

00:02:34.800  -->  00:02:35.730
So why zero and one?
54

54

00:02:35.730  -->  00:02:38.900
That's because if we look at the formula again,
55

55

00:02:38.900  -->  00:02:40.760
well you can see that with this formula
56

56

00:02:40.760  -->  00:02:45.760
all the new scale stock prices will be between zero and one.
57

57

00:02:46.070  -->  00:02:48.680
Alright, because this max minus min
58

58

00:02:48.680  -->  00:02:51.410
is larger that X minus min.
59

59

00:02:51.410  -->  00:02:55.227
Alright, so all our scaled stock prices will be between
60

60

00:02:55.227  -->  00:02:58.380
zero and one and that's exactly what we want.
61

61

00:02:58.380  -->  00:03:01.150
And now the last thing we need to do, is of course
62

62

00:03:01.150  -->  00:03:05.859
to apply this SC object, which is the scaler on our data,
63

63

00:03:05.859  -->  00:03:09.450
to effectively apply this normalization.
64

64

00:03:09.450  -->  00:03:12.660
And to do this well, first I'm going to introduce
65

65

00:03:12.660  -->  00:03:16.600
a new variable, which will be this scale training set.
66

66

00:03:16.600  -->  00:03:18.720
And I'm going to give it a different name because
67

67

00:03:18.720  -->  00:03:22.800
it is recommended to keep your original datasets.
68

68

00:03:22.800  -->  00:03:24.710
So I'm going to keep this original training set
69

69

00:03:24.710  -->  00:03:26.383
with the non-scaled values,
70

70

00:03:26.383  -->  00:03:29.180
the original values of the stock prices.
71

71

00:03:29.180  -->  00:03:31.717
And therefore this new variable I'm going to introduce
72

72

00:03:31.717  -->  00:03:36.717
is going to be training set underscore scaled.
73

73

00:03:38.100  -->  00:03:41.880
Alright, and now to get this scaled training set,
74

74

00:03:41.880  -->  00:03:43.488
this normalized training set.
75

75

00:03:43.488  -->  00:03:46.746
Well I simply need to take my SC object
76

76

00:03:46.746  -->  00:03:51.580
and then apply the fit transform method.
77

77

00:03:51.580  -->  00:03:54.740
Which is a method of the min max scaler class,
78

78

00:03:54.740  -->  00:03:59.460
which will not only fit your object SC to the training set,
79

79

00:03:59.460  -->  00:04:01.400
which we will input as argument.
80

80

00:04:01.400  -->  00:04:04.500
And also transform it, that is scale it.
81

81

00:04:04.500  -->  00:04:06.440
So what does fit mean exactly?
82

82

00:04:06.440  -->  00:04:10.240
Well, fit means that it just going to get the min
83

83

00:04:10.240  -->  00:04:12.597
of the data, that is the minimum stock price
84

84

00:04:12.597  -->  00:04:14.055
and the maximum stock price,
85

85

00:04:14.055  -->  00:04:16.643
to be able to apply this formula.
86

86

00:04:16.643  -->  00:04:18.120
That's simply what it means.
87

87

00:04:18.120  -->  00:04:22.130
And then with the transform method, it's going to compute
88

88

00:04:22.130  -->  00:04:24.447
for each of the stock prices of the training set,
89

89

00:04:24.447  -->  00:04:28.830
the scaled stock prices according to this formula.
90

90

00:04:28.830  -->  00:04:31.060
Alright, so that's what it will do
91

91

00:04:31.060  -->  00:04:35.620
and now to specify that we want to fit our object
92

92

00:04:35.620  -->  00:04:38.333
to the training set and transform the scale
93

93

00:04:38.333  -->  00:04:40.370
to the training set, well of course
94

94

00:04:40.370  -->  00:04:42.593
we need to input here, training set.
95

95

00:04:43.940  -->  00:04:45.350
Alright, so let's have a look at our
96

96

00:04:45.350  -->  00:04:48.380
new scaled stock prices,
97

97

00:04:48.380  -->  00:04:51.710
so I'm selecting these three line and execute.
98

98

00:04:51.710  -->  00:04:55.641
And there we go, we obtained our training set scaled
99

99

00:04:55.641  -->  00:04:58.459
and if we have a look at it, well we can see that indeed,
100

100

00:04:58.459  -->  00:05:00.910
all the stock prices are now
101

101

00:05:00.910  -->  00:05:04.520
normalized between zero and one.
102

102

00:05:04.520  -->  00:05:07.147
Of course, everything seems to make perfect sense.
103

103

00:05:07.147  -->  00:05:10.670
The last values are close to one because remember,
104

104

00:05:10.670  -->  00:05:15.210
the stock price was going up between 2012 and 2016.
105

105

00:05:15.210  -->  00:05:18.881
So all good, we have now the right values for our future
106

106

00:05:18.881  -->  00:05:21.030
recurrent neural network that we're going to build.
107

107

00:05:21.030  -->  00:05:23.290
We're ready to move onto the next step,
108

108

00:05:23.290  -->  00:05:26.626
which will be about creating a specific data structure,
109

109

00:05:26.626  -->  00:05:29.180
that's the most important step actually of data
110

110

00:05:29.180  -->  00:05:31.074
pre-processing for recurrent neural networks.
111

111

00:05:31.074  -->  00:05:34.333
We're going to create a data structure specifying
112

112

00:05:34.333  -->  00:05:36.673
what the RNN will need to remember
113

113

00:05:36.673  -->  00:05:40.050
when predicting the next stock price.
114

114

00:05:40.050  -->  00:05:43.043
And this is called the number of time steps.
115

115

00:05:43.043  -->  00:05:45.820
This is super important to have the right number
116

116

00:05:45.820  -->  00:05:47.987
of time steps because a wrong number of time steps
117

117

00:05:47.987  -->  00:05:52.214
could lead to over fitting or nonsense predictions.
118

118

00:05:52.214  -->  00:05:54.530
Alright, so that's what we'll take care of
119

119

00:05:54.530  -->  00:05:57.553
in the next tutorial and until then, enjoy Deep Learning.
