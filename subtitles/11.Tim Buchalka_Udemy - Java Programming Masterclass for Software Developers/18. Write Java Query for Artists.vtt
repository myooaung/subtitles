WEBVTT
1
1

00:00:05.000  -->  00:00:07.850
alright so i ended the last video by
2

2

00:00:07.850  -->  00:00:10.190
mentioning that we don't want to return
3

3

00:00:10.190  -->  00:00:12.500
a result set and that's because we don't
4

4

00:00:12.500  -->  00:00:14.450
want classes that use methods in the
5

5

00:00:14.450  -->  00:00:16.730
model package to have to understand the
6

6

00:00:16.730  -->  00:00:19.730
implementation details of the model so
7

7

00:00:19.730  -->  00:00:20.570
in other words we need an alternative
8

8

00:00:20.570  -->  00:00:24.050
way to return the information and
9

9

00:00:24.050  -->  00:00:26.090
we're going to return a list of artists
10

10

00:00:26.090  -->  00:00:28.930
and to do that what that means is we're
11

11

00:00:28.930  -->  00:00:32.330
going to need classes for artists album
12

12

00:00:32.330  -->  00:00:34.580
and song so let's go ahead and create
13

13

00:00:34.580  -->  00:00:37.370
those with the model package and for
14

14

00:00:37.370  -->  00:00:38.270
each one we're just going to use
15

15

00:00:38.270  -->  00:00:40.370
IntelliJ to generate the setter
16

16

00:00:40.370  -->  00:00:42.980
and getter methods now we may not get to use all
17

17

00:00:42.980  -->  00:00:44.570
these classes immediately but will
18

18

00:00:44.570  -->  00:00:46.670
eventually use them all so going to
19

19

00:00:46.670  -->  00:00:49.300
open the project pane let's create a new
20

20

00:00:49.300  -->  00:00:52.300
class in the model packaged
21

21

00:00:52.300  -->  00:00:56.210
and we'll start with artist
22

22

00:00:56.210  -->  00:01:00.730
so artists we've got..
23

23

00:01:00.730  -->  00:01:04.850
....
24

24

00:01:04.850  -->  00:02:00.200
...
25

25

00:02:00.200  -->  00:02:02.860
alright so now that we've done that we
26

26

00:02:02.860  -->  00:02:05.090
can actually write the query artists
27

27

00:02:05.090  -->  00:02:06.790
method we're going to add that to the
28

28

00:02:06.790  -->  00:02:13.160
datasource class let's go back to their
29

29

00:02:13.160  -->  00:02:16.160
let's start by creating the class the
30

30

00:02:16.160  -->  00:02:19.100
method rather....
31

31

00:02:19.100  -->  00:02:37.550
...
32

32

00:02:37.550  -->  00:02:42.440
....
33

33

00:02:42.440  -->  00:03:13.940
...
34

34

00:03:13.940  -->  00:03:20.900
....
35

35

00:03:20.900  -->  00:03:30.020
...
36

36

00:03:30.020  -->  00:03:31.130
.... at the moment we're getting this
37

37

00:03:31.130  -->  00:03:33.230
error because we haven't thrown it we
38

38

00:03:33.230  -->  00:03:34.490
havent to put in the code that can
39

39

00:03:34.490  -->  00:03:38.180
potentially throw-in a sql exception let's
40

40

00:03:38.180  -->  00:03:41.090
add the code for that will start by
41

41

00:03:41.090  -->  00:03:45.320
putting statement....
42

42

00:03:45.320  -->  00:05:00.770
...
43

43

00:05:00.770  -->  00:05:04.660
....so we're creating a statement and
44

44

00:05:04.660  -->  00:05:06.350
then we execute the sql statement
45

45

00:05:06.350  -->  00:05:08.780
select start from artists and that's
46

46

00:05:08.780  -->  00:05:10.760
going to return all the artists records
47

47

00:05:10.760  -->  00:05:13.370
with all column values and you can see
48

48

00:05:13.370  -->  00:05:15.200
it that I'm looping through
49

49

00:05:15.200  -->  00:05:19.160
on line 64 through the result set and for
50

50

00:05:19.160  -->  00:05:21.080
each record we create a new artist
51

51

00:05:21.080  -->  00:05:23.690
object and we use the results set getter
52

52

00:05:23.690  -->  00:05:25.700
methods to get the values from the
53

53

00:05:25.700  -->  00:05:27.950
record and send them to the artist
54

54

00:05:27.950  -->  00:05:30.160
instance and then we add the instance to
55

55

00:05:30.160  -->  00:05:32.380
the list once were done looping we
56

56

00:05:32.380  -->  00:05:35.450
return the list to the caller well as we
57

57

00:05:35.450  -->  00:05:36.530
should do that i haven't written the code
58

58

00:05:36.530  -->  00:05:38.470
for that yet but lets add that now just before the
59

59

00:05:38.470  -->  00:05:42.680
catch so that we haven't got any more errors in
60

60

00:05:42.680  -->  00:05:46.220
this method now ok and this time I made a
61

61

00:05:46.220  -->  00:05:48.020
bit of a change we are using a finally block
62

62

00:05:48.020  -->  00:05:52.190
to close the statement and what I should have done
63

63

00:05:52.190  -->  00:05:55.580
was well to be precise here is I
64

64

00:05:55.580  -->  00:05:57.710
should also be closing off the result
65

65

00:05:57.710  -->  00:05:59.030
set at the moment closing of the
66

66

00:05:59.030  -->  00:06:01.780
statement i'm going to close that first we
67

67

00:06:01.780  -->  00:06:03.970
need to close the result set before the
68

68

00:06:03.970  -->  00:06:08.930
statement....
69

69

00:06:08.930  -->  00:06:11.450
....
70

70

00:06:11.450  -->  00:06:25.550
...
71

71

00:06:25.550  -->  00:06:27.800
...again we shouldn't get errors but what
72

72

00:06:27.800  -->  00:06:28.880
we're doing is we're just covering
73

73

00:06:28.880  -->  00:06:30.740
ourselves here in a worst-case scenario
74

74

00:06:30.740  -->  00:06:33.530
let's do the right thing here let's just
75

75

00:06:33.530  -->  00:06:36.020
print out a message we're gonna put....
76

76

00:06:36.020  -->  00:06:40.000
...I mean it
77

77

00:06:40.000  -->  00:06:41.590
doesn't take more than a second or so to
78

78

00:06:41.590  -->  00:06:45.590
or a few seconds to actually do it at
79

79

00:06:45.590  -->  00:06:48.280
we have some indication that there
80

80

00:06:48.280  -->  00:06:51.910
was a problem you can get yourself
81

81

00:06:51.910  -->  00:06:54.830
stuck sometimes if you don't
82

82

00:06:54.830  -->  00:06:56.090
put anything in a catch then you're
83

83

00:06:56.090  -->  00:06:57.910
crushing you may not realize that
84

84

00:06:57.910  -->  00:06:59.210
because there's no nothing on the screen
85

85

00:06:59.210  -->  00:07:02.150
to tell you that there's a crash so for
86

86

00:07:02.150  -->  00:07:04.000
the sake of you know a minute or do this
87

87

00:07:04.000  -->  00:07:05.530
its worth it
88

88

00:07:05.530  -->  00:07:08.360
alright so now we're trying
89

89

00:07:08.360  -->  00:07:10.970
independently to close the result set and
90

90

00:07:10.970  -->  00:07:13.030
the statement in case you're wondering
91

91

00:07:13.030  -->  00:07:15.500
why I've got 2 try catch methods in the
92

92

00:07:15.500  -->  00:07:18.220
finally block that's because either
93

93

00:07:18.220  -->  00:07:21.740
of those close could actually catch or
94

94

00:07:21.740  -->  00:07:24.220
could throw the sqlexception if that
95

95

00:07:24.220  -->  00:07:26.090
happens then the second one would be
96

96

00:07:26.090  -->  00:07:28.280
executed in other words we had it all in
97

97

00:07:28.280  -->  00:07:31.250
one to try catch block in the finally
98

98

00:07:31.250  -->  00:07:34.750
block and say the result set threw an
99

99

00:07:34.750  -->  00:07:36.620
exception then we wouldn't get to test
100

100

00:07:36.620  -->  00:07:38.150
these statement closing so it's best to
101

101

00:07:38.150  -->  00:07:40.070
do them both individually to make sure
102

102

00:07:40.070  -->  00:07:42.340
that ensuring that checking both
103

103

00:07:42.340  -->  00:07:44.090
of them and then ultimately closing both
104

104

00:07:44.090  -->  00:07:45.710
of them whether there's an error or not
105

105

00:07:45.710  -->  00:07:47.710
or whether there's an error
106

106

00:07:47.710  -->  00:07:50.590
we're trying to close one thing you have
107

107

00:07:50.590  -->  00:07:52.610
probably noticed though it does get a
108

108

00:07:52.610  -->  00:07:55.280
little bit messy here having a lot more
109

109

00:07:55.280  -->  00:07:57.250
multiple try catches in the final clause
110

110

00:07:57.250  -->  00:07:59.840
and then another catch above that
111

111

00:07:59.840  -->  00:08:02.380
for our normal processing can make the code
112

112

00:08:02.380  -->  00:08:04.780
a little bit messy remember that we
113

113

00:08:04.780  -->  00:08:06.650
could use the new form of try and declare
114

114

00:08:06.650  -->  00:08:08.750
the objects as part of this try
115

115

00:08:08.750  -->  00:08:10.720
statement or if you're not concerned
116

116

00:08:10.720  -->  00:08:12.400
about closing database resources
117

117

00:08:12.400  -->  00:08:14.960
immediately after we finish with them we
118

118

00:08:14.960  -->  00:08:17.360
could move the close method calls into
119

119

00:08:17.360  -->  00:08:19.090
the try block and not worry about the
120

120

00:08:19.090  -->  00:08:21.110
case when an exception is thrown and
121

121

00:08:21.110  -->  00:08:23.210
resources are still open because the
122

122

00:08:23.210  -->  00:08:25.360
runtime would close them eventually
123

123

00:08:25.360  -->  00:08:27.160
but generally speaking it's better that
124

124

00:08:27.160  -->  00:08:29.920
you cope with that intention in mind and
125

125

00:08:29.920  -->  00:08:31.900
to actually do this yourself either with
126

126

00:08:31.900  -->  00:08:34.990
a try with resources or you know the call to
127

127

00:08:34.990  -->  00:08:36.730
close is going to be executed
128

128

00:08:36.730  -->  00:08:38.290
while as what i've done here is i've
129

129

00:08:38.290  -->  00:08:39.670
actually put in the closed
130

130

00:08:39.670  -->  00:08:42.790
method calls myself
131

131

00:08:42.790  -->  00:08:44.380
alright so now that we've seen the code
132

132

00:08:44.380  -->  00:08:46.870
to close the object in all its glory
133

133

00:08:46.870  -->  00:08:48.730
lets actually modify the method to
134

134

00:08:48.730  -->  00:08:50.950
declare the resources as part of the tri
135

135

00:08:50.950  -->  00:08:54.340
statements used to try with resources i
136

136

00:08:54.340  -->  00:08:55.720
really do think generally that's the way
137

137

00:08:55.720  -->  00:08:58.150
to go because it's more concise and then
138

138

00:08:58.150  -->  00:09:00.820
we are sure that the close method is
139

139

00:09:00.820  -->  00:09:02.620
going to be called automatically for us
140

140

00:09:02.620  -->  00:09:05.020
so how do we do that in the tri finally
141

141

00:09:05.020  -->  00:09:07.660
we come up here first and what we're
142

142

00:09:07.660  -->  00:09:09.880
going to do is put the statement in the
143

143

00:09:09.880  -->  00:09:11.260
first parts let me just type....
144

144

00:09:11.260  -->  00:09:16.360
....
145

145

00:09:16.360  -->  00:09:38.860
...
146

146

00:09:38.860  -->  00:09:41.890
the other thing we need to do is delete
147

147

00:09:41.890  -->  00:09:43.900
these two references statement and
148

148

00:09:43.900  -->  00:09:46.510
result set because we are now declaring both
149

149

00:09:46.510  -->  00:09:49.150
of those objects in the try with
150

150

00:09:49.150  -->  00:09:53.890
resources block and of course what
151

151

00:09:53.890  -->  00:09:56.890
that now means is we can get to we can now
152

152

00:09:56.890  -->  00:10:00.250
do away with the entire finally clause so
153

153

00:10:00.250  -->  00:10:03.280
we're going to go ahead and delete that
154

154

00:10:03.280  -->  00:10:07.900
and again the reason we don't need that
155

155

00:10:07.900  -->  00:10:10.210
finally clause is when we used the try with
156

156

00:10:10.210  -->  00:10:12.520
resources as we're using up here with
157

157

00:10:12.520  -->  00:10:15.220
the new statement syntax both the
158

158

00:10:15.220  -->  00:10:17.200
statement and resultset will be closed
159

159

00:10:17.200  -->  00:10:19.090
automatically for us will be close method
160

160

00:10:19.090  -->  00:10:21.130
will be called for both whether there's
161

161

00:10:21.130  -->  00:10:23.020
an exception generated or not
162

162

00:10:23.020  -->  00:10:25.840
and obviously in this scenario callers
163

163

00:10:25.840  -->  00:10:28.090
of the method still have to handle a
164

164

00:10:28.090  -->  00:10:30.550
null return value however they see fit
165

165

00:10:30.550  -->  00:10:31.960
so in other words the process that's
166

166

00:10:31.960  -->  00:10:35.290
calling the query artists method has to
167

167

00:10:35.290  -->  00:10:36.790
actually check to see whether what we're
168

168

00:10:36.790  -->  00:10:38.510
getting back is null or not
169

169

00:10:38.510  -->  00:10:40.790
alright so let's go ahead and call the
170

170

00:10:40.790  -->  00:10:43.280
method now from the main method and print
171

171

00:10:43.280  -->  00:10:46.580
results to the console so we're going to
172

172

00:10:46.580  -->  00:10:48.290
do is add the code here just above the
173

173

00:10:48.290  -->  00:10:51.140
datasource . close going to put list
174

174

00:10:51.140  -->  00:10:57.530
....
175

175

00:10:57.530  -->  00:11:49.760
...
176

176

00:11:49.760  -->  00:11:52.730
...you can see here that we're
177

177

00:11:52.730  -->  00:11:54.530
checking the return value from the query
178

178

00:11:54.530  -->  00:11:57.080
artists if we get a null we're exiting
179

179

00:11:57.080  -->  00:11:58.820
with a message saying there's no artists
180

180

00:11:58.820  -->  00:12:00.620
otherwise we're printing at the artists
181

181

00:12:00.620  -->  00:12:01.520
in the list
182

182

00:12:01.520  -->  00:12:04.100
let's now just run this to see
183

183

00:12:04.100  -->  00:12:10.610
that it works and you can see we got
184

184

00:12:10.610  -->  00:12:13.790
a list back of all our artists
185

185

00:12:13.790  -->  00:12:19.220
total of 201 and note that the main method
186

186

00:12:19.220  -->  00:12:21.710
code doesn't make any assumptions about
187

187

00:12:21.710  -->  00:12:24.470
how or where the data is stored so the
188

188

00:12:24.470  -->  00:12:26.840
data could be coming from an xml file a
189

189

00:12:26.840  -->  00:12:29.180
spreadsheet a my sql database or
190

190

00:12:29.180  -->  00:12:32.150
even a flat file if we change how and
191

191

00:12:32.150  -->  00:12:34.400
where the data is stored as long as we
192

192

00:12:34.400  -->  00:12:36.560
don't have to change any of the method
193

193

00:12:36.560  -->  00:12:39.320
signatures in the datasource class then
194

194

00:12:39.320  -->  00:12:40.940
we won't have to change any classes that
195

195

00:12:40.940  -->  00:12:43.400
use it and obviously this case the main
196

196

00:12:43.400  -->  00:12:45.680
method will remain unchanged in that
197

197

00:12:45.680  -->  00:12:48.410
scenario a couple more things to note
198

198

00:12:48.410  -->  00:12:50.450
firstly the statement . close
199

199

00:12:50.450  -->  00:12:52.010
method closest the
200

200

00:12:52.010  -->  00:12:54.440
statement and any resultset objects
201

201

00:12:54.440  -->  00:12:57.200
associated with it so we don't have to
202

202

00:12:57.200  -->  00:12:59.660
explicitly close the result set that
203

203

00:12:59.660  -->  00:13:00.980
won't make a difference to the code we
204

204

00:13:00.980  -->  00:13:02.990
written but if we were explicitly
205

205

00:13:02.990  -->  00:13:05.360
closing resources closing the statement
206

206

00:13:05.360  -->  00:13:08.150
would in fact close the results set the
207

207

00:13:08.150  -->  00:13:10.370
second we can make a quick improvement
208

208

00:13:10.370  -->  00:13:13.430
to the existing code right now we're
209

209

00:13:13.430  -->  00:13:15.050
using column names to get the field
210

210

00:13:15.050  -->  00:13:17.450
values but we can use the column index
211

211

00:13:17.450  -->  00:13:19.550
instead and that's usually more
212

212

00:13:19.550  -->  00:13:21.920
efficient but with that said there is a
213

213

00:13:21.920  -->  00:13:25.280
trade-off if we use column names we
214

214

00:13:25.280  -->  00:13:26.900
won't have to change any code if the
215

215

00:13:26.900  -->  00:13:29.120
positions of the columns change within
216

216

00:13:29.120  -->  00:13:31.490
the table for example we might add a
217

217

00:13:31.490  -->  00:13:34.100
column to the artists table and position
218

218

00:13:34.100  -->  00:13:35.990
it between the existing_ID
219

219

00:13:35.990  -->  00:13:39.380
and name columns now if you use name
220

220

00:13:39.380  -->  00:13:42.710
columns we won't have to change any code but
221

221

00:13:42.710  -->  00:13:44.390
if we've used our column indices in our
222

222

00:13:44.390  -->  00:13:46.850
code and we would have to change them
223

223

00:13:46.850  -->  00:13:49.790
however this is easily handled if we use
224

224

00:13:49.790  -->  00:13:51.920
constants for our column indices which
225

225

00:13:51.920  -->  00:13:54.890
of course we will do now it's
226

226

00:13:54.890  -->  00:13:56.750
important to note that when working with
227

227

00:13:56.750  -->  00:13:59.480
result sets the index we pass to the
228

228

00:13:59.480  -->  00:14:01.820
results set getter method is the index of
229

229

00:14:01.820  -->  00:14:04.790
the column in the result set not in the
230

230

00:14:04.790  -->  00:14:08.690
table just so that again so the index
231

231

00:14:08.690  -->  00:14:11.090
we passed the result set getter methods
232

232

00:14:11.090  -->  00:14:13.490
is the index of the column in the result
233

233

00:14:13.490  -->  00:14:16.250
set not in the table now when we
234

234

00:14:16.250  -->  00:14:18.290
retrieve all the columns result set
235

235

00:14:18.290  -->  00:14:20.600
indices will be the same as the table
236

236

00:14:20.600  -->  00:14:23.000
indices but if we only retrieve a
237

237

00:14:23.000  -->  00:14:26.240
specific column or set of columns then
238

238

00:14:26.240  -->  00:14:27.920
the results indices may not actually
239

239

00:14:27.920  -->  00:14:30.650
match the table column indices and we'll
240

240

00:14:30.650  -->  00:14:32.150
see an example of this later
241

241

00:14:32.150  -->  00:14:35.720
alright so let's finish the video
242

242

00:14:35.720  -->  00:14:37.850
now in the next video we'll make those
243

243

00:14:37.850  -->  00:14:39.980
changes that we talked about going to
244

244

00:14:39.980  -->  00:14:42.110
start by adding column index constants
245

245

00:14:42.110  -->  00:14:44.810
for all the tables i'll see you in the
246

246

00:14:44.810  -->  00:14:50.290
next video
