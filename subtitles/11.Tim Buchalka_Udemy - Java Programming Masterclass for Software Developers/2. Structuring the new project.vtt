WEBVTT
1
1

00:00:05.340  -->  00:00:09.390
At this stage, we're now structuring this project for JDK 9.
2

2

00:00:09.520  -->  00:00:13.580
But let's start out with a mini challenge and then we're going to discuss the project structure with
3

3

00:00:13.580  -->  00:00:15.600
modules and finally moved aside
4

4

00:00:15.620  -->  00:00:22.600
how we going to split the purchase into multiple modules. So the challenge here is to think about how
5

5

00:00:22.600  -->  00:00:28.200
you split this project that was created in previous years in this course into multiple modules.
6

6

00:00:28.300  -->  00:00:30.670
So let's say three distinct modules.
7

7

00:00:30.880  -->  00:00:33.070
So you just need to think about the separation.
8

8

00:00:33.160  -->  00:00:39.590
You don't have to write any code at this stage but can you break down this project into three distinct areas.
9

9

00:00:39.760  -->  00:00:46.520
So you should be able to do that you can then write these areas which will effectively be muchall names on paper.
10

10

00:00:46.520  -->  00:00:52.390
Now take a good look at the code, run the program again etc. and think back classes that are there and
11

11

00:00:52.390  -->  00:00:58.340
what they used for and how they can be broken down into modules. So do the challenge, pause the video
12

12

00:00:58.600  -->  00:01:02.960
go away and write down three distinct areas and come back and we'll talk about it,
13

13

00:01:02.970  -->  00:01:03.960
pause the video now.
14

14

00:01:06.310  -->  00:01:10.790
Okay, I hope you managed to figure out how you come up with three distinct names.
15

15

00:01:10.920  -->  00:01:16.350
And it was a project so hopefully there wasn't too much of a problem for you figuring that out.
16

16

00:01:16.560  -->  00:01:17.840
So here's where I came up with
17

17

00:01:17.850  -->  00:01:24.580
in any event. You could see that I've spit things up into three modules and we've got common some common code.
18

18

00:01:24.690  -->  00:01:27.290
We've got the UI for the user interface,
19

19

00:01:27.480  -->  00:01:34.290
we've got the DB for the database. So you can see that they're the three modules and I've just prefix started
20

20

00:01:34.290  -->  00:01:38.670
with a academy dot learn programming to make a unique module name for each.
21

21

00:01:38.670  -->  00:01:43.800
So for me that was the breakdown with the user interface that was a distinct module.
22

22

00:01:43.920  -->  00:01:49.260
The database curve was another module and then finally a common area which was sort of for anything
23

23

00:01:49.260  -->  00:01:51.720
else that didn't fit in those other two areas.
24

24

00:01:51.720  -->  00:01:52.900
Now there are other solutions,
25

25

00:01:52.950  -->  00:01:56.500
you can actually in fact this easily separated into more modules.
26

26

00:01:56.670  -->  00:02:02.190
But since the project is pretty simple we're running a five classes I think it's three modules at this
27

27

00:02:02.190  -->  00:02:07.680
stage and we don't have any total packages for any of the modules.
28

28

00:02:07.800  -->  00:02:10.450
So what we're going to do is in the next video,
29

29

00:02:10.470  -->  00:02:12.250
we start by creating these modules.
30

30

00:02:12.330  -->  00:02:19.110
The first thing we'll do the academy dot learn programming dot common module and I'm calling that common because containing
31

31

00:02:19.240  -->  00:02:23.580
it does contain will contain common classes for the other two modules.
32

32

00:02:23.580  -->  00:02:29.430
So another good name instead of a common core, classes that will be another common module will be the
33

33

00:02:29.430  -->  00:02:31.050
album and the artist.
34

34

00:02:31.110  -->  00:02:36.790
So you started classes if you recall to read data from the database and display it on the user interface.
35

35

00:02:37.140  -->  00:02:43.590
So the next module of that identified was the DB module, academy dot learn programming dot DB,. Now DB of course
36

36

00:02:43.590  -->  00:02:44.900
is data base.
37

37

00:02:44.940  -->  00:02:49.930
So this module will have one class the data source that we use to get data from the database.
38

38

00:02:50.030  -->  00:02:55.040
As you can see, the common module doesn't know anything about the database module.
39

39

00:02:55.260  -->  00:02:59.430
So in other words it doesn't care how the artist or the app will be saved.
40

40

00:02:59.430  -->  00:03:02.590
Will it be a database, xml or something else.
41

41

00:03:02.940  -->  00:03:09.060
But the database module requires the common module to be able to convert the result from the database
42

42

00:03:09.420  -->  00:03:10.700
to an artist or an album.
43

43

00:03:10.710  -->  00:03:12.650
That goes is one way but not the other.
44

44

00:03:12.960  -->  00:03:18.960
Lastly the third module that I came up with was the UI module for user interface so that the academy
45

45

00:03:19.230  -->  00:03:21.560
dot learn programming dot UI.
46

46

00:03:22.080  -->  00:03:27.150
Now this module requires the database module, DB module and that's because of the results from the
47

47

00:03:27.150  -->  00:03:30.770
database are displayed on the user interface.
48

48

00:03:30.970  -->  00:03:37.270
You know the module UI will contain the classes mind and controller as well as how after effects effects
49

49

00:03:37.270  -->  00:03:38.680
and mail file.
50

50

00:03:38.700  -->  00:03:45.100
Keep in mind and remember that modules can contain source code but also resources like images and in
51

51

00:03:45.100  -->  00:03:47.600
her case, xml file. Alright, so
52

52

00:03:47.620  -->  00:03:49.260
that's what I came up for the challenge.
53

53

00:03:49.290  -->  00:03:52.500
But if you've come up with something similar, Congratulations.
54

54

00:03:52.500  -->  00:03:58.130
And even if you got something that wasn't quite right, that's fine because in the next video we start
55

55

00:03:58.320  -->  00:04:01.810
creating our first module. So see you in the next video.
