1
1

00:00:05,030  -->  00:00:07,930
ok so for challenge 8 what I've done
2

2

00:00:07,930  -->  00:00:10,160
is I've pasted in some code here
3

3

00:00:10,160  -->  00:00:12,230
and I've made it available in the
4

4

00:00:12,230  -->  00:00:14,410
resources section of this video so you
5

5

00:00:14,410  -->  00:00:16,940
can download it if needed and what
6

6

00:00:16,940  -->  00:00:18,820
this code does what's actually got a
7

7

00:00:18,820  -->  00:00:22,640
tutor and a student to class and lets
8

8

00:00:22,640  -->  00:00:24,260
have a look we've got the tutor
9

9

00:00:24,260  -->  00:00:28,070
here and the student
10

10

00:00:28,070  -->  00:00:31,270
so the idea is that the tutor thread calls
11

11

00:00:31,270  -->  00:00:35,060
the tutor. study time method and you can
12

12

00:00:35,060  -->  00:00:37,550
see the study time method here in tutor and
13

13

00:00:37,550  -->  00:00:38,750
in case you're wondering the threads are
14

14

00:00:38,750  -->  00:00:39,980
actually started here we got a
15

15

00:00:39,980  -->  00:00:42,140
thread here for tutor and a thread for
16

16

00:00:42,140  -->  00:00:44,750
student so the tutor thread calls the
17

17

00:00:44,750  -->  00:00:48,140
tutor.f study time method and it
18

18

00:00:48,140  -->  00:00:50,360
waits for the student to arrive and hand
19

19

00:00:50,360  -->  00:00:52,760
in assignment then the tutor and student
20

20

00:00:52,760  -->  00:00:56,600
study together so the student thread the
21

21

00:00:56,600  -->  00:00:58,280
we defined here you can see we're
22

22

00:00:58,280  -->  00:01:00,980
starting here on line 22 and defining
23

23

00:01:00,980  -->  00:01:04,370
on line 19 that call the tutor . in hand
24

24

00:01:04,370  -->  00:01:06,280
assignment method
25

25

00:01:06,280  -->  00:01:09,820
sorry the students hand in assignment
26

26

00:01:09,820  -->  00:01:11,920
method so they're handing assignment
27

27

00:01:11,920  -->  00:01:13,470
method actually calls a tutor. get
28

28

00:01:13,470  -->  00:01:15,880
progress report so can you spot the
29

29

00:01:15,880  -->  00:01:18,310
problem with this code and again just looking
30

30

00:01:18,310  -->  00:01:19,570
at it then we can see that we got a
31

31

00:01:19,570  -->  00:01:22,690
thread here tutor. study time is
32

32

00:01:22,690  -->  00:01:25,030
called automatically so you can see it's
33

33

00:01:25,030  -->  00:01:26,560
waiting for something to happen
34

34

00:01:26,560  -->  00:01:28,750
student.start study is called after
35

35

00:01:28,750  -->  00:01:32,400
the delay and the student thread is
36

36

00:01:32,400  -->  00:01:34,290
calling its hand in assignment method
37

37

00:01:34,290  -->  00:01:36,790
from the student class and you can see
38

38

00:01:36,790  -->  00:01:38,350
that is calling the tutor. get progress
39

39

00:01:38,350  -->  00:01:40,840
report so can you spot the problem with
40

40

00:01:40,840  -->  00:01:44,350
this code so what is the problem if you
41

41

00:01:44,350  -->  00:01:47,020
did find one call now this scenario
42

42

00:01:47,020  -->  00:01:48,340
just to be clear doesn't have a
43

43

00:01:48,340  -->  00:01:50,350
one-size-fits-all answer so we're not
44

44

00:01:50,350  -->  00:01:51,670
going to code the solution but we're
45

45

00:01:51,670  -->  00:01:53,170
going to think about at least one way to
46

46

00:01:53,170  -->  00:01:55,860
fix it so the goal is to fix it if you can
47

47

00:01:55,860  -->  00:01:58,600
at least try and come up with such a
48

48

00:01:58,600  -->  00:02:00,700
scenario where you understand what the
49

49

00:02:00,700  -->  00:02:02,530
problem is with the code and what that
50

50

00:02:02,530  -->  00:02:04,750
problem is called so pause the
51

51

00:02:04,750  -->  00:02:06,640
video here now and go away and see if you can
52

52

00:02:06,640  -->  00:02:08,110
figure that out and when you're ready to
53

53

00:02:08,110  -->  00:02:11,220
come back to see the solution start
54

54

00:02:11,220  -->  00:02:12,940
the video again so pause the video and
55

55

00:02:12,940  -->  00:02:18,590
I'll see you when you get back
56

56

00:02:18,590  -->  00:02:22,640
alright let's talk about the solution
57

57

00:02:22,640  -->  00:02:25,120
the problem was a deadlock let's look at
58

58

00:02:25,120  -->  00:02:26,750
a potential sequence to understand
59

59

00:02:26,750  -->  00:02:27,950
what's going on
60

60

00:02:27,950  -->  00:02:30,470
firstly you saw that the tutor
61

61

00:02:30,470  -->  00:02:34,310
thread called tutor .study time then the
62

62

00:02:34,310  -->  00:02:36,760
tutor thread gets the lock for the tutor
63

63

00:02:36,760  -->  00:02:38,870
object and that's because the study time
64

64

00:02:38,870  -->  00:02:40,760
method is synchronized and it prints
65

65

00:02:40,760  -->  00:02:42,760
tutor has arrived and wait for the
66

66

00:02:42,760  -->  00:02:45,040
student which we simulated by calling
67

67

00:02:45,040  -->  00:02:48,230
sleep now the student thread runs and
68

68

00:02:48,230  -->  00:02:50,810
calls the hand in assignment and since the
69

69

00:02:50,810  -->  00:02:53,150
method is synchronized it gets the lock
70

70

00:02:53,150  -->  00:02:55,450
for the student object and it calls
71

71

00:02:55,450  -->  00:02:57,730
get progress report but tutor
72

72

00:02:57,730  -->  00:02:59,540
thread is holding the lock for the tutor
73

73

00:02:59,540  -->  00:03:04,930
object so the student thread blocks
74

74

00:03:04,930  -->  00:03:08,040
now the tutor thread wakes up and runs and
75

75

00:03:08,040  -->  00:03:10,950
called student . start study but the
76

76

00:03:10,950  -->  00:03:13,000
method is synchronized and the student
77

77

00:03:13,000  -->  00:03:14,590
thread is holding a lock for the student
78

78

00:03:14,590  -->  00:03:17,460
object so the tutor thread blocks and at
79

79

00:03:17,460  -->  00:03:19,090
this point we've got a deadlock
80

80

00:03:19,090  -->  00:03:20,650
that's because neither thread will ever
81

81

00:03:20,650  -->  00:03:22,710
release the lock that the other thread is
82

82

00:03:22,710  -->  00:03:24,090
waiting for
83

83

00:03:24,090  -->  00:03:26,170
so essentially the threads are trying to
84

84

00:03:26,170  -->  00:03:28,590
acquire the same set of locks but in a
85

85

00:03:28,590  -->  00:03:30,930
different order and are often results in
86

86

00:03:30,930  -->  00:03:33,810
a deadlock the tutors thread gets the
87

87

00:03:33,810  -->  00:03:35,980
tutor lock and then wants the student
88

88

00:03:35,980  -->  00:03:38,370
lock the student thread gets the student
89

89

00:03:38,370  -->  00:03:43,440
lock and then wants the tutor lock
90

90

00:03:43,440  -->  00:03:45,540
now the fix will depend
91

91

00:03:45,540  -->  00:03:48,590
on the code now perhaps over synchronization is
92

92

00:03:48,590  -->  00:03:49,500
occuring
93

93

00:03:49,500  -->  00:03:51,120
do we really need to synchronize all the
94

94

00:03:51,120  -->  00:03:53,400
methods or can we isolate critical
95

95

00:03:53,400  -->  00:03:55,950
sections of code within the methods and
96

96

00:03:55,950  -->  00:03:58,620
use synchronized blocks instead in a
97

97

00:03:58,620  -->  00:04:00,710
real-world application we really would
98

98

00:04:00,710  -->  00:04:03,260
have to study the code now we might also
99

99

00:04:03,260  -->  00:04:05,730
consider rewriting some of the code to
100

100

00:04:05,730  -->  00:04:07,290
do the tutor and student objects really
101

101

00:04:07,290  -->  00:04:08,930
need to call each other in a circular
102

102

00:04:08,930  -->  00:04:10,700
fashion and can we make these two
103

103

00:04:10,700  -->  00:04:15,120
parameters in anyway
104

104

00:04:15,120  -->  00:04:17,790
so another potential solution would be
105

105

00:04:17,790  -->  00:04:19,880
to use reentrant lock objects and the
106

106

00:04:19,880  -->  00:04:22,940
try lock method with a timeout value if
107

107

00:04:22,940  -->  00:04:25,190
the try lock method times out the thread
108

108

00:04:25,190  -->  00:04:26,850
wouldn't be able to execute the critical
109

109

00:04:26,850  -->  00:04:28,710
section of code but at least the
110

110

00:04:28,710  -->  00:04:31,590
application wouldn't be deadlocked also
111

111

00:04:31,590  -->  00:04:33,720
a thread could release any locks it's
112

112

00:04:33,720  -->  00:04:36,060
holding when the try lock times out
113

113

00:04:36,060  -->  00:04:37,740
allowing any threads waiting for those
114

114

00:04:37,740  -->  00:04:42,650
locks to run successfully
115

115

00:04:42,650  -->  00:04:44,780
now they may will be other
116

116

00:04:44,780  -->  00:04:46,910
solutions when dealing with a deadlock
117

117

00:04:46,910  -->  00:04:49,610
situation look for the following firstly
118

118

00:04:49,610  -->  00:04:51,410
is a set of locks been obtained in a
119

119

00:04:51,410  -->  00:04:54,330
different order multiple threads and
120

120

00:04:54,330  -->  00:04:56,610
that was the case in the code samples
121

121

00:04:56,610  -->  00:04:59,060
showed in earlier in this video if so can we
122

122

00:04:59,060  -->  00:05:01,460
force all threads to obtain the locks in
123

123

00:05:01,460  -->  00:05:02,780
the same order
124

124

00:05:02,780  -->  00:05:05,930
are we over synchronizing the code can
125

125

00:05:05,930  -->  00:05:07,940
rewrite the code to break any circular
126

126

00:05:07,940  -->  00:05:10,460
call patents and finally would using
127

127

00:05:10,460  -->  00:05:12,530
reentrant lock objects help
128

128

00:05:12,530  -->  00:05:14,420
that's it that's the solution as i
129

129

00:05:14,420  -->  00:05:15,680
mentioned i'm not going to actually code
130

130

00:05:15,680  -->  00:05:17,570
that but it should really give you a
131

131

00:05:17,570  -->  00:05:19,160
good understanding of what you need to
132

132

00:05:19,160  -->  00:05:22,250
do to solve the situation like this
133

133

00:05:22,250  -->  00:05:23,550
I'm going to finish the video here
134

134

00:05:23,550  -->  00:05:25,820
now in the next video we'll do the last
135

135

00:05:25,820  -->  00:05:27,890
challenge challenge 9 and we'll see
136

136

00:05:27,890  -->  00:05:33,730
you in that videos
