1
1

00:00:05,150  -->  00:00:07,320
- [Tim] So we ended the
last video talking about
2

2

00:00:07,320  -->  00:00:09,880
deleting files, but at this point now
3

3

00:00:09,880  -->  00:00:12,110
you might be wondering
about creating files.
4

4

00:00:12,110  -->  00:00:14,040
We haven't actually really
done that at the moment.
5

5

00:00:14,040  -->  00:00:17,020
So the files class does have
methods for creating files
6

6

00:00:17,020  -->  00:00:19,300
and directories, but do keep in mind
7

7

00:00:19,300  -->  00:00:21,870
that you're usually creating a file
8

8

00:00:21,870  -->  00:00:23,940
because you want to write something to it.
9

9

00:00:23,940  -->  00:00:26,430
So, more often than not,
you want to open a stream
10

10

00:00:26,430  -->  00:00:30,540
or a channel, and doing that
will actually create the file.
11

11

00:00:30,540  -->  00:00:32,250
But with that said,
let's look at how to use
12

12

00:00:32,250  -->  00:00:34,030
the files class to do it anyway.
13

13

00:00:34,030  -->  00:00:37,400
Now we're gonna create a
file here called file2.txt
14

14

00:00:37,400  -->  00:00:39,830
in the Examples directory.
15

15

00:00:39,830  -->  00:00:42,620
So I'm just gonna copy,
or comment out rather,
16

16

00:00:42,620  -->  00:00:44,190
this code, and actually what I'll do is
17

17

00:00:44,190  -->  00:00:46,040
I'll comment that out,
18

18

00:00:46,040  -->  00:00:50,210
I'm gonna delete this old
code from the previous video.
19

19

00:00:53,910  -->  00:00:56,670
All right, so to create a file,
20

20

00:00:56,670  -->  00:01:00,080
Path fileToCreate is equal to FileSystems
21

21

00:01:03,440  -->  00:01:05,690
dot getDefault dot getPath,
22

22

00:01:07,000  -->  00:01:09,490
and we're going to use
the Examples directory
23

23

00:01:09,490  -->  00:01:11,590
as I mentioned, and the file name,
24

24

00:01:11,590  -->  00:01:13,590
let's go with file2.txt.
25

25

00:01:16,240  -->  00:01:18,970
We can see at the moment
looking at the directory
26

26

00:01:18,970  -->  00:01:21,880
structure there, that
there's not a file2.txt
27

27

00:01:21,880  -->  00:01:23,420
in the Examples folder.
28

28

00:01:23,420  -->  00:01:25,560
Now there's a file1.txt in that folder,
29

29

00:01:25,560  -->  00:01:29,330
and obviously file2.txt
in other subfolders
30

30

00:01:29,330  -->  00:01:30,760
from the Examples folder, but not actually
31

31

00:01:30,760  -->  00:01:32,750
in the Examples folder.
32

32

00:01:32,750  -->  00:01:34,610
All right, and then to
create it we just do
33

33

00:01:34,610  -->  00:01:37,440
Files dot createFile fileToCreate.
34

34

00:01:41,670  -->  00:01:45,580
Pretty straightforward,
so let's just run that.
35

35

00:01:46,930  -->  00:01:49,310
And you can see we've now got a file2.txt
36

36

00:01:49,310  -->  00:01:52,670
showing up in the Examples directory.
37

37

00:01:52,670  -->  00:01:55,100
And if you double-click
it, you can see that
38

38

00:01:55,100  -->  00:01:57,530
no surprises there, it's actually empty,
39

39

00:01:57,530  -->  00:01:59,470
and if you want to write anything to it,
40

40

00:01:59,470  -->  00:02:01,870
you'd have to create
a stream or a channel,
41

41

00:02:01,870  -->  00:02:03,840
so again, there's probably
no point explicitly
42

42

00:02:03,840  -->  00:02:06,430
creating the file using
the createFile method,
43

43

00:02:06,430  -->  00:02:08,070
but it is there if for some reason you
44

44

00:02:08,070  -->  00:02:10,540
want to create it that way.
45

45

00:02:10,540  -->  00:02:14,000
And the createFile method
is an exception to the rule,
46

46

00:02:14,000  -->  00:02:17,320
in that you can't use it
to create directories.
47

47

00:02:17,320  -->  00:02:20,270
So instead, let's actually
create a Dir4 directory
48

48

00:02:20,270  -->  00:02:23,260
under Examples using the
method you need to create
49

49

00:02:23,260  -->  00:02:26,520
directories, which is the
createDirectory method.
50

50

00:02:26,520  -->  00:02:30,350
So we're gonna do Path
DirToCreate is equal to
51

51

00:02:31,990  -->  00:02:35,990
FileSystems dot getDefault
dot getPath Examples,
52

52

00:02:39,310  -->  00:02:40,470
and then Dir4,
53

53

00:02:42,400  -->  00:02:46,570
then we just do a call to the
Files.createDirectory method,
54

54

00:02:48,490  -->  00:02:51,470
actually createDirectory,
which is a single method,
55

55

00:02:51,470  -->  00:02:53,850
a single directory, I should say,
56

56

00:02:53,850  -->  00:02:58,020
and that should be in lower
case, just change that,
57

57

00:02:59,620  -->  00:03:00,950
and dirToCreate.
58

58

00:03:02,480  -->  00:03:04,110
And actually what I'll do
now is I'll comment out
59

59

00:03:04,110  -->  00:03:07,780
the fileToCreate because
that's already been created.
60

60

00:03:07,780  -->  00:03:09,780
And let's just run this.
61

61

00:03:12,250  -->  00:03:15,810
Now we can see our Dir4
folder got created over there
62

62

00:03:15,810  -->  00:03:18,970
as a subfolder of the Examples folder.
63

63

00:03:19,990  -->  00:03:21,400
All right, now let's just try taking this
64

64

00:03:21,400  -->  00:03:23,040
to the next level, though.
65

65

00:03:23,040  -->  00:03:25,960
Let's try creating a directory called Dir6
66

66

00:03:25,960  -->  00:03:27,350
that has the following path.
67

67

00:03:27,350  -->  00:03:31,510
So Examples/Dir2/Dir3/Dir4/Dir5/Dir6.
68

68

00:03:36,080  -->  00:03:37,580
Now I can probably hear you groaning,
69

69

00:03:37,580  -->  00:03:39,150
you're thinking you're gonna have to
70

70

00:03:39,150  -->  00:03:41,710
call createDirectory multiple times.
71

71

00:03:41,710  -->  00:03:43,030
Now you could do it like that,
72

72

00:03:43,030  -->  00:03:45,370
but there's an easier way,
and you probably have got
73

73

00:03:45,370  -->  00:03:47,760
a hint of that when you
saw what I was typing
74

74

00:03:47,760  -->  00:03:50,060
when I typed createDirectory.
75

75

00:03:50,060  -->  00:03:52,610
There is actually a
createDirectories command
76

76

00:03:52,610  -->  00:03:53,890
or method I should say,
77

77

00:03:53,890  -->  00:03:57,140
so let's just see what that looks like.
78

78

00:03:58,840  -->  00:04:03,010
Path dirToCreate equals
FileSystems dot getDefault
79

79

00:04:05,920  -->  00:04:07,670
dot getPath Examples,
80

80

00:04:11,460  -->  00:04:12,670
and let me type in the path,
81

81

00:04:12,670  -->  00:04:14,550
it's gonna be, in the case of a Mac,
82

82

00:04:14,550  -->  00:04:18,720
it's gonna be Dir2/Dir3/Dir4/Dir5/Dir6.
83

83

00:04:22,980  -->  00:04:24,290
Let's just run that and then I'll give you
84

84

00:04:24,290  -->  00:04:26,670
the equivalent command for Windows.
85

85

00:04:26,670  -->  00:04:29,670
Files.createDirectories dirToCreate.
86

86

00:04:33,070  -->  00:04:34,320
Let's run that.
87

87

00:04:38,150  -->  00:04:42,230
And you can see we've got
Dir 2, Dir3, Dir4, Dir5
88

88

00:04:43,450  -->  00:04:46,660
and even Dir6, so pretty cool
that this particular method
89

89

00:04:46,660  -->  00:04:49,610
not only creates the last entry,
90

90

00:04:49,610  -->  00:04:52,290
the last path the Dir6 in this case,
91

91

00:04:52,290  -->  00:04:54,970
but it also creates any
non-existent parent directories
92

92

00:04:54,970  -->  00:04:57,190
as well, and basically
all in a line of code.
93

93

00:04:57,190  -->  00:04:59,690
Now if you're running on a PC,
94

94

00:05:01,680  -->  00:05:03,890
you would do something like,
I'll just comment this out
95

95

00:05:03,890  -->  00:05:04,900
'cause I'm not.
96

96

00:05:04,900  -->  00:05:06,290
Instead of the forward slashes,
97

97

00:05:06,290  -->  00:05:09,790
you'd put two double slashes for each one.
98

98

00:05:11,980  -->  00:05:13,640
Something like that.
99

99

00:05:15,180  -->  00:05:17,450
So that's an equivalent thing on a PC,
100

100

00:05:17,450  -->  00:05:19,750
so again we're escaping
the backslash there
101

101

00:05:19,750  -->  00:05:23,710
as we've done for all paths
in this section of the course.
102

102

00:05:23,710  -->  00:05:25,320
So that was one way of doing it.
103

103

00:05:25,320  -->  00:05:26,980
The other alternative we could have done,
104

104

00:05:26,980  -->  00:05:29,320
it was also something along these lines.
105

105

00:05:29,320  -->  00:05:31,260
I'll comment that one out now.
106

106

00:05:31,260  -->  00:05:35,430
We could have actually done
Path dirToCreate equals
107

107

00:05:37,410  -->  00:05:40,660
FileSystems dot getDefault dot getPath,
108

108

00:05:43,220  -->  00:05:45,250
and we could put Examples,
109

109

00:05:45,250  -->  00:05:49,420
in my case on a Mac
/Dir2/Dir3/Dir4/Dir5/Dir6,
110

110

00:05:52,980  -->  00:05:55,650
let's add one more now, seven.
111

111

00:05:55,650  -->  00:05:57,200
So that will equally work well,
112

112

00:05:57,200  -->  00:06:00,720
and actually if we try running
that to confirm that it works
113

113

00:06:00,720  -->  00:06:02,890
we should have a Dir7 now.
114

114

00:06:04,440  -->  00:06:06,440
And you can see we've not got Dir7,
115

115

00:06:06,440  -->  00:06:09,180
so that works as well, putting
it all in one line like that,
116

116

00:06:09,180  -->  00:06:12,930
which is pretty cool,
and again, and on a PC,
117

117

00:06:15,770  -->  00:06:19,270
change the forward slashes to backslashes,
118

118

00:06:23,390  -->  00:06:25,990
and you'll get the equivalent
result on a Windows machine.
119

119

00:06:25,990  -->  00:06:28,450
All right, so the last thing
that we're gonna look at
120

120

00:06:28,450  -->  00:06:31,470
in this video, is how to
get a file's attributes,
121

121

00:06:31,470  -->  00:06:34,530
things like the file size
when it was last modified,
122

122

00:06:34,530  -->  00:06:37,770
whether a path points to a
file or directory, et cetera.
123

123

00:06:37,770  -->  00:06:41,800
And this data is also referred
to as the file's metadata.
124

124

00:06:41,800  -->  00:06:45,210
So file attributes or file's metadata.
125

125

00:06:45,210  -->  00:06:48,130
Now using the files class
you can get the value
126

126

00:06:48,130  -->  00:06:50,700
of a single attribute or alternatively,
127

127

00:06:50,700  -->  00:06:52,800
you can retrieve all
the attributes at once.
128

128

00:06:52,800  -->  00:06:54,260
So let's actually look at getting
129

129

00:06:54,260  -->  00:06:57,200
a single attribute, the file size.
130

130

00:06:57,200  -->  00:07:01,840
So we're going to just
comment out that code now.
131

131

00:07:01,840  -->  00:07:04,370
And let's try and grab
the file size for the
132

132

00:07:04,370  -->  00:07:07,280
Examples Dir1/file1.txt.
133

133

00:07:08,480  -->  00:07:11,560
So it'll be Path filePath is equal to
134

134

00:07:12,480  -->  00:07:16,480
fileSystems dot getDefault
dot getPath Examples,
135

135

00:07:19,480  -->  00:07:22,630
and the second argument is gonna be Dir1
136

136

00:07:22,630  -->  00:07:24,070
forward slash because I'm on a Mac,
137

137

00:07:24,070  -->  00:07:26,030
two backslashes if you're on a PC,
138

138

00:07:26,030  -->  00:07:26,860
file1.txt.
139

139

00:07:29,570  -->  00:07:31,410
So we're pointing to
whatever file that we want to
140

140

00:07:31,410  -->  00:07:32,880
get the attributes from, then we do a
141

141

00:07:32,880  -->  00:07:36,720
long size is equal to
Files dot size filePath.
142

142

00:07:41,410  -->  00:07:43,090
And then let's just print that out.
143

143

00:07:43,090  -->  00:07:46,090
I'll put Size is equal to plus size.
144

144

00:07:48,280  -->  00:07:50,620
Let's just try running that.
145

145

00:07:54,030  -->  00:07:57,110
Size equals 151 as you can see there.
146

146

00:07:59,650  -->  00:08:03,820
And again on Windows, two
backslashes to do the same thing.
147

147

00:08:05,150  -->  00:08:06,790
All right, so that's the size.
148

148

00:08:06,790  -->  00:08:10,140
Let's try another one, let's
try the last modified date.
149

149

00:08:10,140  -->  00:08:11,700
Let's do that as a
shortcut, so I'm going to
150

150

00:08:11,700  -->  00:08:14,250
do a printout here, and we'll put
151

151

00:08:14,250  -->  00:08:18,350
Last modified equals
plus, then we're gonna do
152

152

00:08:18,350  -->  00:08:21,600
Files dot getLastModifiedTime filePath.
153

153

00:08:26,050  -->  00:08:26,880
Run that.
154

154

00:08:29,230  -->  00:08:30,240
And you can see we've got a time that
155

155

00:08:30,240  -->  00:08:32,480
that particular file was last modified.
156

156

00:08:32,480  -->  00:08:34,860
Noting that it contains
both the date and time.
157

157

00:08:34,860  -->  00:08:37,760
Now you may have to adjust
that time for your time zone.
158

158

00:08:37,760  -->  00:08:39,310
Now we're not gonna
cover the code to do that
159

159

00:08:39,310  -->  00:08:40,820
since it's really off topic,
160

160

00:08:40,820  -->  00:08:42,450
but there's certainly
lots of good information
161

161

00:08:42,450  -->  00:08:44,290
on the internet for that
if you want to do that
162

162

00:08:44,290  -->  00:08:46,650
to change the time zone
to whatever is appropriate
163

163

00:08:46,650  -->  00:08:48,420
for your part of the world.
164

164

00:08:48,420  -->  00:08:50,750
Now you can also check the file's class
165

165

00:08:50,750  -->  00:08:52,810
to see what other methods are available
166

166

00:08:52,810  -->  00:08:54,810
for getting the value
of a single attribute.
167

167

00:08:54,810  -->  00:08:58,970
So let's just quickly go
and open the documentation.
168

168

00:09:00,730  -->  00:09:02,170
Okay, the link's in the resources section
169

169

00:09:02,170  -->  00:09:04,010
that I've just pasted.
170

170

00:09:05,380  -->  00:09:08,630
And you can see that if we scroll down,
171

171

00:09:10,680  -->  00:09:14,590
getOwner, getLastModifiedTime,
which you've just seen,
172

172

00:09:14,590  -->  00:09:17,600
getFileStore, FileAttributes,
173

173

00:09:17,600  -->  00:09:19,850
isWritable, isSameFile, there's also
174

174

00:09:19,850  -->  00:09:22,130
lots of other ones there that you can use,
175

175

00:09:22,130  -->  00:09:24,770
so check that out if you want
to find out a little bit more.
176

176

00:09:24,770  -->  00:09:25,640
But the other thing you can do
177

177

00:09:25,640  -->  00:09:29,370
is you can get all the
attributes in a single shot.
178

178

00:09:29,370  -->  00:09:31,900
To do that, you'll retrieve
an instance of a class
179

179

00:09:31,900  -->  00:09:34,520
that implements an
interface containing methods
180

180

00:09:34,520  -->  00:09:37,170
that can retrieve each
individual attribute.
181

181

00:09:37,170  -->  00:09:40,270
Let's go and have a
look at how to do that.
182

182

00:09:40,270  -->  00:09:43,050
And it's actually the basic
file attribute interface
183

183

00:09:43,050  -->  00:09:45,020
that covers a basic set of attributes
184

184

00:09:45,020  -->  00:09:47,120
that are common to all operating systems.
185

185

00:09:47,120  -->  00:09:49,140
So we're gonna use it
here to get the attributes
186

186

00:09:49,140  -->  00:09:51,310
for the same file, and
consequently we'll be using
187

187

00:09:51,310  -->  00:09:53,620
the same file path.
188

188

00:09:53,620  -->  00:09:57,930
So to do that we're gonna
put BasicFileAttributes
189

189

00:09:57,930  -->  00:10:02,090
attributes is equal to Files
dot ReadAttributes filePath,
190

190

00:10:06,260  -->  00:10:10,430
and then the second argument
is BasicFileAttributes.class.
191

191

00:10:12,170  -->  00:10:14,480
And once we've got that,
192

192

00:10:14,480  -->  00:10:15,700
we can start printing out some things,
193

193

00:10:15,700  -->  00:10:19,870
so start off with size equals
plus attributes dot size,
194

194

00:10:25,660  -->  00:10:28,570
Last modified equal to, plus attrs,
195

195

00:10:30,360  -->  00:10:34,450
abbreviation for attributes
dot LastModifiedTime.
196

196

00:10:36,910  -->  00:10:38,820
Just try a few more,
197

197

00:10:38,820  -->  00:10:42,400
Created equals plus
attrs dot CreationTime.
198

198

00:10:46,610  -->  00:10:48,020
Do a couple more.
199

199

00:10:49,670  -->  00:10:53,840
Is directory equals plus
attributes dot isDirectory.
200

200

00:10:56,450  -->  00:11:00,590
And we'll do one more,
is it a regular file.
201

201

00:11:00,590  -->  00:11:04,760
Is regular file equals plus
attrs dot isRegularFile.
202

202

00:11:08,450  -->  00:11:10,110
And if you run that,
203

203

00:11:12,940  -->  00:11:14,920
we can see we've got our outputs there.
204

204

00:11:14,920  -->  00:11:17,330
In this case that file correctly
says it's not a directory
205

205

00:11:17,330  -->  00:11:19,300
but it is a regular file,
'cause of course we're
206

206

00:11:19,300  -->  00:11:21,140
pointing to file1.txt.
207

207

00:11:22,140  -->  00:11:24,360
So the important part is
this readAttributes method
208

208

00:11:24,360  -->  00:11:26,200
that we're calling from the Files class
209

209

00:11:26,200  -->  00:11:28,230
to get the basic set of attributes.
210

210

00:11:28,230  -->  00:11:31,430
So we tell the method which
sets you want to retrieve
211

211

00:11:31,430  -->  00:11:34,400
by this second argument,
BasicFileAttributes.class
212

212

00:11:34,400  -->  00:11:37,510
in this case, the readAttributes
method returns an instance
213

213

00:11:37,510  -->  00:11:41,300
that implements the basic
file attributes interface,
214

214

00:11:41,300  -->  00:11:44,580
and you have to actually pass
the BasicFileAttributes.class
215

215

00:11:44,580  -->  00:11:47,600
because there are
system-specific sub-interfaces
216

216

00:11:47,600  -->  00:11:51,010
of basic file attributes
in the java.nio package,
217

217

00:11:51,010  -->  00:11:54,020
that can also be retrieved
using this method.
218

218

00:11:54,020  -->  00:11:56,380
So you can then call methods
as you can see below that
219

219

00:11:56,380  -->  00:12:00,430
on lines 33 through 37, to get the values
220

220

00:12:00,430  -->  00:12:02,660
for the attributes that
you're interested in.
221

221

00:12:02,660  -->  00:12:05,030
Now in addition to getting the
size and last modified time,
222

222

00:12:05,030  -->  00:12:07,260
you can see here we're also
getting the creation time stamp,
223

223

00:12:07,260  -->  00:12:09,490
whether the path points to a directory,
224

224

00:12:09,490  -->  00:12:11,870
and whether it points to a file.
225

225

00:12:11,870  -->  00:12:14,250
And this is only a very small
subset of what's available
226

226

00:12:14,250  -->  00:12:16,490
for the BasicFileAttributes.class.
227

227

00:12:16,490  -->  00:12:18,570
If you go back to the documentation,
228

228

00:12:18,570  -->  00:12:21,570
and check that out, there's the link
229

229

00:12:22,460  -->  00:12:24,020
and it's in the resources section,
230

230

00:12:24,020  -->  00:12:26,170
and you can find out the other methods
231

231

00:12:26,170  -->  00:12:27,800
that you can get access to,
232

232

00:12:27,800  -->  00:12:30,110
to find out more information if needed.
233

233

00:12:30,110  -->  00:12:33,560
Now java.nio contains other
interfaces for file attributes
234

234

00:12:33,560  -->  00:12:36,340
by the way, that are
operating system specific,
235

235

00:12:36,340  -->  00:12:38,130
in that some of the
attributes they retrieve
236

236

00:12:38,130  -->  00:12:41,560
are only available on the
operating system they target.
237

237

00:12:41,560  -->  00:12:43,490
All right, so let's
finish the video here now.
238

238

00:12:43,490  -->  00:12:45,610
In the next video we're
gonna continue our look,
239

239

00:12:45,610  -->  00:12:48,630
looking at the file system using java.nio.
240

240

00:12:48,630  -->  00:12:50,790
See you in the next video.
