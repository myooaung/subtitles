WEBVTT
1
1

00:00:05.180  -->  00:00:09.080
so in this video what we gonna do is an
overall set challenge for what we've
2

2

00:00:09.080  -->  00:00:13.320
learned so gonna actually go about the or the
challenge is going to be all about the
3

3

00:00:13.320  -->  00:00:18.030
heavenly body class to be better
representation of the universe and along
4

4

00:00:18.030  -->  00:00:20.860
the lines of what I mentioned at the end
of the video lecture 112
5

5

00:00:20.860  -->  00:00:25.050
so my solution is to be cleared
is just gonna show one way to achieve the end
6

6

00:00:25.050  -->  00:00:28.480
results it is very likely that your solution
will be different and that's completely
7

7

00:00:28.480  -->  00:00:29.590
ok
8

8

00:00:29.590  -->  00:00:33.900
important thing with all challenges is that they passed the
9

9

00:00:33.900  -->  00:00:38.850
tests that I'm going to include the
challenge what I'm gonna do is create a new Java
10

10

00:00:38.850  -->  00:00:43.560
class and I've got the previous
projects still open you can see we
11

11

00:00:43.560  -->  00:00:47.190
got various classes including the
heavenly body and you need to have that
12

12

00:00:47.190  -->  00:00:51.120
heavenly body class for this challenge
so make sure that you got that project opened
13

13

00:00:51.120  -->  00:00:55.650
or you got that code in your class
in your projects so lets go ahead and create a new
14

14

00:00:55.650  -->  00:01:05.030
class and we call this the SetChallenge and we
need to create a main so I'm going to do
15

15

00:01:05.030  -->  00:01:06.220
psvm again.....
16

16

00:01:06.220  -->  00:01:14.070
...ok so their is our main method so what I'm going to
do is paste in the
17

17

00:01:14.070  -->  00:01:22.440
challenge I should say ok so
here is to challenge the challenge is to
18

18

00:01:22.440  -->  00:01:26.970
modify the previous heavenly body
example so that the heavenly body class
19

19

00:01:26.970  -->  00:01:32.160
also has a body type field now this
field will store a type of heavenly bodies such
20

20

00:01:32.160  -->  00:01:36.650
as a star planet moon etc you can
include as many types as you want but
21

21

00:01:36.650  -->  00:01:41.370
you must support at the very least
planet and moon now for each of the types that
22

22

00:01:41.370  -->  00:01:46.270
you support subclass a heavenly body
class so that your program can create
23

23

00:01:46.270  -->  00:01:52.250
objects of that appropriate type now although astronomers may shudder at this solar system
24

24

00:01:52.250  -->  00:01:56.850
will allow two bodies to have the same
name as long as they're not the same
25

25

00:01:56.850  -->  00:02:02.590
type of body so you can have a start called beta minor and asteroid called beta minor
26

26

00:02:02.590  -->  00:02:07.800
for example now the hint here is that
it's much easier to implement for the set than
27

27

00:02:07.800  -->  00:02:11.900
it is for the map because a map will need a key that uses both fields there is
28

28

00:02:11.900  -->  00:02:15.720
also a restriction that the only
satellites the planets can
29

29

00:02:15.720  -->  00:02:20.940
have must be moons so even if you don't
implement a star type your program
30

30

00:02:20.940  -->  00:02:25.120
shouldn't prevent one being added in the
future and a star satellite can be
31

31

00:02:25.120  -->  00:02:30.220
almost any kind of heavenly body now the
test case you want to be able to pass
32

32

00:02:30.220  -->  00:02:36.110
firstly 1 the planets and moons that we
added in the previous video should appear
33

33

00:02:36.110  -->  00:02:41.100
in the solar system collection and in
a sets of moon's for the appropriate
34

34

00:02:41.100  -->  00:02:46.780
planets test case 2 a.equals(b) as you
can see on the screen there must return
35

35

00:02:46.780  -->  00:02:51.760
the same result as b.equals(a) so in other word
equals is symmetric number three
36

36

00:02:51.760  -->  00:02:56.480
attempting to add a duplicate to
a set must result in no change to the
37

37

00:02:56.480  -->  00:03:01.190
set so that the original value is replace by the new one and
38

38

00:03:01.190  -->  00:03:06.150
number 4 attempting to add a duplicate
to a map results in the original been
39

39

00:03:06.150  -->  00:03:11.570
replaced by the new object 5 2 bodies
with the same name but different
40

40

00:03:11.570  -->  00:03:17.520
designations can be added to the same
set and finally two bodies with the same
41

41

00:03:17.520  -->  00:03:21.600
names as number 6 but different
designations can be added to the same
42

42

00:03:21.600  -->  00:03:26.480
map and can also be retrieved from the
map so that's it quite a meaty challenge
43

43

00:03:26.480  -->  00:03:30.950
for you to go away and work on the so go
and do that now pause this video and
44

44

00:03:30.950  -->  00:03:34.930
when you ready to come back and see the
solution that I have come up with start the video
45

45

00:03:34.930  -->  00:03:42.660
again so pause the video now and I'll see you
when you get back
46

46

00:03:42.660  -->  00:03:47.010
ok welcome back and hopefully you
manage to figure out the solution so
47

47

00:03:47.010  -->  00:03:51.690
let's now go through my version and as I
mentioned earlier this is just one way
48

48

00:03:51.690  -->  00:03:56.000
of doing it there's always pretty well
always with anything any code your writing
49

49

00:03:56.000  -->  00:04:02.040
multiple ways of achieving so 1st is go in to the heavenly body class and
50

50

00:04:02.040  -->  00:04:09.070
open it up what we need to do is add
another field to store the type of body
51

51

00:04:09.070  -->  00:04:13.500
and then in addition to that we should
define the types that the class knows about
52

52

00:04:13.500  -->  00:04:17.100
now there's a couple of ways to do this
I'm gonna show you one way then show
53

53

00:04:17.100  -->  00:04:24.450
you probably a second way of doing this as well
so that we are going to do is at add....
54

54

00:04:24.450  -->  00:04:30.740
....and its complaining of course because we haven't
55

55

00:04:30.740  -->  00:04:34.050
initialize it but will come back and do
that shortly because it's a final it
56

56

00:04:34.050  -->  00:04:38.370
wants to have the value either set
when you declare it or in the
57

57

00:04:38.370  -->  00:04:41.730
Constructors so I will come back and do
that so one way of doing it is to do something
58

58

00:04:41.730  -->  00:04:46.630
like this I'm gonna paste this code in
the various types the body types you
59

59

00:04:46.630  -->  00:04:49.250
could do something like this and it's
gonna be perfectly valid if you have
60

60

00:04:49.250  -->  00:04:53.290
done that so you have the various types defined like that public static final
61

61

00:04:53.290  -->  00:04:57.550
.....and basically have a
unique number for each of the various
62

62

00:04:57.550  -->  00:05:01.980
body types and again if you done that with your solution that's fine but the other
63

63

00:05:01.980  -->  00:05:05.840
thing is to keep in mind is that Java has as a way
of grouping constants together and
64

64

00:05:05.840  -->  00:05:10.180
in what's called an Enum I'm gonna cover those in more detail
later in the course because there's a
65

65

00:05:10.180  -->  00:05:14.140
lot more to them than we're going to be
using in this particular example but I wanted to show
66

66

00:05:14.140  -->  00:05:19.020
you how to use it in a case like this
where we've got multiple values because
67

67

00:05:19.020  -->  00:05:24.480
it can be a quite convenient and more intuitive to read so instead of having a different
68

68

00:05:24.480  -->  00:05:29.720
declaration for each we can define an enum like so and I'm gonna paste it over this code
69

69

00:05:29.720  -->  00:05:36.660
so we defined a type..... and the valid type or values
70

70

00:05:36.660  -->  00:05:41.510
for this body type are star planet or planet
moon comet or asteroid and one
71

71

00:05:41.510  -->  00:05:45.410
advantage of using an enum here is that enums are types and it means that when
72

72

00:05:45.410  -->  00:05:49.270
we change the constructor we can make sure
that it only accepts a valid body type
73

73

00:05:49.270  -->  00:05:54.930
but it also means that we changed this int here
to the body type
74

74

00:05:54.930  -->  00:05:59.750
and notice how it's come up as a
declaration these other types that are defined
75

75

00:05:59.750  -->  00:06:04.360
in the Java specification the one we want here is the body types that we specified so select that
76

76

00:06:04.360  -->  00:06:09.730
you can see now that body a body
type variable is of type body types and
77

77

00:06:09.730  -->  00:06:13.770
we can also do then at that point
is we can with a constructor change
78

78

00:06:13.770  -->  00:06:17.940
the constructor to also accept a parameter of
body type and come back here and type....
79

79

00:06:17.940  -->  00:06:27.880
.....
80

80

00:06:27.880  -->  00:06:35.360
...and once we do that the error up here goes away because
81

81

00:06:35.360  -->  00:06:38.780
we've now initialized it and the great
thing about it an enum is that it's only going
82

82

00:06:38.780  -->  00:06:44.560
to accept a variable or parameter that has got one of these types specified you
83

83

00:06:44.560  -->  00:06:46.050
see that in practice shortly
84

84

00:06:46.050  -->  00:06:51.580
ok so working through the heavenly body class their are requirements
that a planet satellite can only be moons
85

85

00:06:51.580  -->  00:06:55.710
so if you go back and have a look at the moon
method you might be tempted to write
86

86

00:06:55.710  -->  00:07:10.270
something like this....
87

87

00:07:10.270  -->  00:07:18.440
....and the other things is what I should probably
88

88

00:07:18.440  -->  00:07:25.500
talk about is a bit more is the the enum in case your unfamiliar with it so first with our integer
89

89

00:07:25.500  -->  00:07:30.010
constants that I added before I changed
the body to an enum their wouldn't be any
90

90

00:07:30.010  -->  00:07:33.550
compile time checking that the integer
body type was one of the values that the
91

91

00:07:33.550  -->  00:07:37.030
class knows about some in other words we
have to include code the constructor
92

92

00:07:37.030  -->  00:07:40.650
to check that the best we can do is a
runtime error but the advantage of using
93

93

00:07:40.650  -->  00:07:44.510
an enum here is that we get an error at
compile time if body type isn't valid so
94

94

00:07:44.510  -->  00:07:49.110
if someone tries to sort of
pass an invalid type their we are going to get
95

95

00:07:49.110  -->  00:07:53.400
an error so that's one series
advantage to using enums and you will see
96

96

00:07:53.400  -->  00:07:57.150
another advantage when it comes to
printing out the heavenly bodies now a nested
97

97

00:07:57.150  -->  00:08:01.730
enum is automatically static so
it's possible to refer to the enum
98

98

00:08:01.730  -->  00:08:04.990
values without creating an instance of a
heavenly body object
99

99

00:08:04.990  -->  00:08:09.810
and I'll explain further as we use this
in the solution but if you've use constants then again that's
100

100

00:08:09.810  -->  00:08:13.740
fine your solution works ultimately is the tests then if that does congratulations
101

101

00:08:13.740  -->  00:08:21.210
that's also fine but I just really want to show you that enum are quite useful and how to use those so we added our body
102

102

00:08:21.210  -->  00:08:25.870
type and with now converted it to an enum
and we've also added a getter let's go
103

103

00:08:25.870  -->  00:08:29.660
back to this moon code so as I
mentioned it might be at first glance
104

104

00:08:29.660  -->  00:08:34.810
thinking that we need to make sure
that the planets satellites that are pass are only
105

105

00:08:34.810  -->  00:08:38.550
moons maybe we can do it by
using the get types so we could put....
106

106

00:08:38.550  -->  00:08:49.730
.....
107

107

00:08:49.730  -->  00:08:50.580
....
108

108

00:08:50.580  -->  00:09:01.640
...at first glance you might think maybe I
could do something like that and it
109

109

00:09:01.640  -->  00:09:03.480
is checking for moon right
110

110

00:09:03.480  -->  00:09:07.700
this actually isn't a good idea and in
thinking about it further it really
111

111

00:09:07.700  -->  00:09:11.970
the name itself or the method is badly chosen heavenly bodies other than
112

112

00:09:11.970  -->  00:09:15.670
planets can have satellites and they
don't have to be moons now most of the
113

113

00:09:15.670  -->  00:09:20.200
objects in our solar system orbit the
Sun so if we restrict our moon like this
114

114

00:09:20.200  -->  00:09:25.200
it makes it impossible to
give a star satellites so we are going to put this
115

115

00:09:25.200  -->  00:09:30.220
back to how it was and also refactor it to be add satellite which better reflects what is happening in
116

116

00:09:30.220  -->  00:09:46.740
so undo those changes...went to far so I'll redo that change and I'll just
117

117

00:09:46.740  -->  00:09:52.950
returned that so it is back to how it was then we refactor the method name right click
118

118

00:09:52.950  -->  00:10:03.770
..so any type of heavenly
119

119

00:10:03.770  -->  00:10:08.120
body can now be added as a satellite of
the other of any other and if we want to
120

120

00:10:08.120  -->  00:10:12.160
restrict planets to only have moons
orbiting them we can override the add
121

121

00:10:12.160  -->  00:10:15.660
satellite method in the planet sub
class which i think is a much better
122

122

00:10:15.660  -->  00:10:18.040
design now the specification
123

123

00:10:18.040  -->  00:10:22.440
of the heavenly body class has changed
to require 2 fields used to
124

124

00:10:22.440  -->  00:10:28.330
identify body not just the name as previously now we added the body type field as you know and as a result we
125

125

00:10:28.330  -->  00:10:31.910
don't need to change the equals and
hashCode methods to reflect this change
126

126

00:10:31.910  -->  00:10:36.510
because it wouldn't be correct now without
that so the change to equals isn't complicated
127

127

00:10:36.510  -->  00:10:40.910
just need to add another test here to
see if the body type is the same with the
128

128

00:10:40.910  -->  00:10:45.980
two objects have the same name so lets go and do
so in the equals method
129

129

00:10:45.980  -->  00:10:49.910
we got this test here to check for null
but we are going to change the code so
130

130

00:10:49.910  -->  00:10:53.920
where as before we had the check for
null and the checking to see where the object
131

131

00:10:53.920  -->  00:10:56.160
of get class is not equal to get class we are
132

132

00:10:56.160  -->  00:10:59.360
gonna change that we're going to use
something called instance off and use that
133

133

00:10:59.360  -->  00:11:08.100
as a way of checking so here we are going to...
134

134

00:11:08.100  -->  00:11:27.590
.....
135

135

00:11:27.590  -->  00:11:33.660
.....because obviously we know we've done
136

136

00:11:33.660  -->  00:11:37.580
a check to see whether the object is an
instance of object and then we will
137

137

00:11:37.580  -->  00:11:42.620
create a new object casting it
correctly because we know that type and at
138

138

00:11:42.620  -->  00:11:51.680
that point we can now do a test we can put if...
139

139

00:11:51.680  -->  00:11:57.160
.....so if that's true
140

140

00:11:57.160  -->  00:12:00.990
which means the names the same then we can return....
141

141

00:12:00.990  -->  00:12:11.070
....and down here all we need to
142

142

00:12:11.070  -->  00:12:18.750
do is return false.....because we know that
there's been either the names is different or
143

143

00:12:18.750  -->  00:12:24.090
the body type is different again because we
intend to subclass heavenly body to create
144

144

00:12:24.090  -->  00:12:27.360
the planet moon and other objects and
that's why we're testing in this class
145

145

00:12:27.360  -->  00:12:31.390
we are now using instance off and also the
other important thing to
146

146

00:12:31.390  -->  00:12:35.070
do now is to avoid problems with the
equals not being symmetric we're going
147

147

00:12:35.070  -->  00:12:39.560
to mark the method as final and I talk
to you previously about that as to why we go
148

148

00:12:39.560  -->  00:12:48.110
about that doing that and you saw that at the previous video
actually so.....so if equals is final then
149

149

00:12:48.110  -->  00:12:55.480
hashCode should be as well so lets go ahead
and do that.....we are going to change our method
150

150

00:12:55.480  -->  00:13:01.140
I'm going to delete the output at the moment you can see we've got this.name.hashCode() + 57
151

151

00:13:01.140  -->  00:13:07.000
which is an arbitrary number if we had
used integer for our constants we could have just
152

152

00:13:07.000  -->  00:13:11.370
use the integer values just added that to the 57
but fortunately its not actually much
153

153

00:13:11.370  -->  00:13:14.890
harder with enum because enums
constants has a hashCode method as
154

154

00:13:14.890  -->  00:13:17.710
well so all we need to do there is put.....
155

155

00:13:17.710  -->  00:13:26.010
....and that gives us a
unique hash code now the final method to
156

156

00:13:26.010  -->  00:13:27.170
add is optional
157

157

00:13:27.170  -->  00:13:30.170
but it makes printing out the heavenly bodies easier we are going to
158

158

00:13:30.170  -->  00:13:34.900
override the toString method so that
displays the body type and orbital period
159

159

00:13:34.900  -->  00:13:42.140
as well as the name so.....
160

160

00:13:42.140  -->  00:13:53.310
.....
161

161

00:13:53.310  -->  00:13:59.410
.....makes it a bit easier for us to see that
162

162

00:13:59.410  -->  00:14:04.430
on screen and one thing you will find when we run this
is another advantage that i
163

163

00:14:04.430  -->  00:14:08.100
mentioned I was going to tell you about
with enums is when you go to print them
164

164

00:14:08.100  -->  00:14:12.410
out in this case we are going to print the toString
method that comes with the enum returns the
165

165

00:14:12.410  -->  00:14:16.210
name of the enum in other words will get whatever the names that we defined will get
166

166

00:14:16.210  -->  00:14:20.270
star planet moon comet and that
can be very useful for something like
167

167

00:14:20.270  -->  00:14:24.010
this we want to print out the body type
and not having to convert a number back
168

168

00:14:24.010  -->  00:14:27.410
to a description or something along
those lines and just in case it's not
169

169

00:14:27.410  -->  00:14:32.150
obvious is that when we use an object
in a string concatenation like this Java
170

170

00:14:32.150  -->  00:14:36.370
implicitly calls toString method to
obtain a string representation of the
171

171

00:14:36.370  -->  00:14:40.020
object you probably knew that but I just want to make that clear now we are going to cover toString in more
172

172

00:14:40.020  -->  00:14:42.050
detail in the section on debugging
173

173

00:14:42.050  -->  00:14:45.170
as it's really intended for use when
writing log files debugging rather than
174

174

00:14:45.170  -->  00:14:49.240
displaying text to use as we doing here
but for simple class such as this one
175

175

00:14:49.240  -->  00:14:54.330
it's really helpful shortcuts and useful
to add ok so that's pretty much it for
176

176

00:14:54.330  -->  00:14:59.370
the heavenly body class for
now we're almost ready to create the
177

177

00:14:59.370  -->  00:15:04.330
subclasses and we've made the class final
which means it can't be subclass so we need
178

178

00:15:04.330  -->  00:15:07.700
to change declaration to remove the
final
179

179

00:15:07.700  -->  00:15:13.240
so remove that because we want to sub classe it we are going to remove that so
it is not final anymore so we can
180

180

00:15:13.240  -->  00:15:14.760
actually do a subclass
181

181

00:15:14.760  -->  00:15:19.600
gonna finish this video here now when we
come back to the next video we are gonna start
182

182

00:15:19.600  -->  00:15:24.350
creating the sub classes and continue on
with the challenge solution so I'll see
183

183

00:15:24.350  -->  00:15:24.930
you in the next video
