1
1

00:00:05,490  -->  00:00:10,220
So in the previous video we started our
challenge for autoboxing and unboxing and
2

2

00:00:10,220  -->  00:00:14,500
we've implemented the customer and
branch classes.
3

3

00:00:14,500  -->  00:00:18,100
So let's go ahead now and implement the
bank class which is the third component.
4

4

00:00:18,100  -->  00:00:19,830
And just as a recap,
5

5

00:00:19,830  -->  00:00:23,240
what we're wanting to do with the bank is
we want the ability to add an new branch.
6

6

00:00:23,240  -->  00:00:25,850
We also want to add a customer
to that branch with the initial
7

7

00:00:25,850  -->  00:00:27,090
transaction amount.
8

8

00:00:27,090  -->  00:00:30,440
We also want the ability to add
transactions for an existing customer for
9

9

00:00:30,440  -->  00:00:31,240
that branch.
10

10

00:00:31,240  -->  00:00:35,380
And finally, we also wanna show a list
of customers for a particular branch and
11

11

00:00:35,380  -->  00:00:38,840
optionally display a list of
the transactions for those customers.
12

12

00:00:38,840  -->  00:00:41,630
So first things first,
let's create our class.
13

13

00:00:41,630  -->  00:00:44,090
So the class we're creating is bank.
14

14

00:00:44,090  -->  00:00:44,970
We're just gonna call it bank.
15

15

00:00:47,030  -->  00:00:50,810
And we need to assign a bank name, even
though we're probably not gonna use it.
16

16

00:00:50,810  -->  00:00:55,350
We'll actually just use that
as a name of the actual bank.
17

17

00:00:55,350  -->  00:00:58,900
And we need to create an array list,
in this case of branches,
18

18

00:00:58,900  -->  00:01:01,410
because a bank, of course,
can have multiple branches.
19

19

00:01:01,410  -->  00:01:03,090
So we're going to do
that with an array list.
20

20

00:01:03,090  -->  00:01:05,940
Right.
21

21

00:01:05,940  -->  00:01:07,440
An array list of branch.
22

22

00:01:07,440  -->  00:01:08,930
We're going to call that branches.
23

23

00:01:10,210  -->  00:01:12,680
So the constructor is
going to be a simple one.
24

24

00:01:12,680  -->  00:01:17,260
When we're creating a new bank,
it's literally just gonna be the name, but
25

25

00:01:17,260  -->  00:01:21,190
also, as you've seen in other
classes in the constructor,
26

26

00:01:21,190  -->  00:01:23,950
we're going to initialize the array list.
27

27

00:01:23,950  -->  00:01:28,030
So I'm going do branches
equals new ArrayList.
28

28

00:01:28,030  -->  00:01:31,330
So we're going to initialize that so
it's ready to be used.
29

29

00:01:31,330  -->  00:01:35,620
So the first method we need to create
is going to be the add branch.
30

30

00:01:35,620  -->  00:01:39,960
We're going to create that
very similar to how you saw
31

31

00:01:39,960  -->  00:01:44,110
me adding the code for
adding customers and so forth.
32

32

00:01:44,110  -->  00:01:47,180
It's something similar so
it's gonna return a boolean.
33

33

00:01:47,180  -->  00:01:52,020
It's called add branch and
the string parameter's
34

34

00:01:52,020  -->  00:01:54,900
going to be parsed out as a string and
it's gonna be called branch name.
35

35

00:01:54,900  -->  00:02:02,320
We're gonna do something similar
like if find branch branchName.
36

36

00:02:02,320  -->  00:02:09,280
If that is equal to null, and
we're gonna go ahead and then add it.
37

37

00:02:09,280  -->  00:02:16,540
So this.branches.add and
it's gonna be a new branch.
38

38

00:02:17,730  -->  00:02:18,470
And it's gonna be branchName.
39

39

00:02:21,630  -->  00:02:23,670
So we're gonna return true and
40

40

00:02:23,670  -->  00:02:26,130
if we don't get to this point
we're gonna return false.
41

41

00:02:26,130  -->  00:02:29,220
It's very similar to the code that
you saw in the previous video.
42

42

00:02:29,220  -->  00:02:31,700
We're testing to see
whether the branch exists.
43

43

00:02:31,700  -->  00:02:34,680
If it returns null, it means that
that name hasn't been used before,
44

44

00:02:34,680  -->  00:02:35,220
so in other words,
45

45

00:02:35,220  -->  00:02:40,420
the branch doesn't exist and we can safely
add that to our array list of branches.
46

46

00:02:40,420  -->  00:02:43,370
And obviously we're calling
the branch constructor, in that case,
47

47

00:02:43,370  -->  00:02:45,670
just parsing along the branch name.
48

48

00:02:45,670  -->  00:02:46,680
So that's add branch.
49

49

00:02:46,680  -->  00:02:48,880
Nothing complicated about that at all.
50

50

00:02:48,880  -->  00:02:52,890
Next thing we need to do is we'll need to
add the method, rather, for add customer.
51

51

00:02:52,890  -->  00:02:58,370
So that's going to actually need, because
we can potentially have multiple branches,
52

52

00:02:58,370  -->  00:03:01,870
every time we add a customer, we need to
specify the branch name, the customer
53

53

00:03:01,870  -->  00:03:04,860
name, and the initial transaction,
when we are adding a customer.
54

54

00:03:04,860  -->  00:03:08,470
And likewise for the customer
transactions, we need to do the same.
55

55

00:03:08,470  -->  00:03:13,110
So we are going to do
public boolean again,
56

56

00:03:13,110  -->  00:03:19,430
add customer, and
the parameters will be, branch name,
57

57

00:03:19,430  -->  00:03:26,140
customer name, and, of course,
the initial amount.
58

58

00:03:26,140  -->  00:03:30,850
This is when the customer walks in and
wants to open an account at this branch.
59

59

00:03:30,850  -->  00:03:33,900
So what we're going to do then is we're
going to test to see whether it's on file.
60

60

00:03:33,900  -->  00:03:39,550
So we'll do branch,
branch equals find branch.
61

61

00:03:40,880  -->  00:03:43,650
Branch name.
And because we're adding,
62

62

00:03:43,650  -->  00:03:46,890
we wanna put if branch name.
63

63

00:03:46,890  -->  00:03:48,050
So we can't find the branch name.
64

64

00:03:48,050  -->  00:03:49,290
There's a problem with the branch name.
65

65

00:03:50,810  -->  00:03:53,690
So if that returns null,
it means there's actually a problem, so
66

66

00:03:53,690  -->  00:03:55,510
we actually wanna do a test to
see if we're not equal to null.
67

67

00:03:55,510  -->  00:03:56,890
In other words,
68

68

00:03:56,890  -->  00:03:59,940
we're going to only be able to add
a customer if the branch name exists.
69

69

00:03:59,940  -->  00:04:03,880
So if we've got the branch name,
it means that we're able to proceed and
70

70

00:04:03,880  -->  00:04:04,880
actually add that.
71

71

00:04:04,880  -->  00:04:06,610
So at this point,
we can actually do a return.
72

72

00:04:06,610  -->  00:04:08,930
And I'll explain this shortly.
73

73

00:04:08,930  -->  00:04:15,200
But we're gonna return branch.newCustomer.
74

74

00:04:15,200  -->  00:04:21,040
And the parameters for that were
customer name and initial amount.
75

75

00:04:21,040  -->  00:04:23,830
So what we've done there is
we've just saved a line of code.
76

76

00:04:23,830  -->  00:04:26,310
We could have actually
stored here that boolean
77

77

00:04:26,310  -->  00:04:29,200
to return what the answer was to that.
78

78

00:04:29,200  -->  00:04:30,940
So we'll go back and
have a look at this code.
79

79

00:04:30,940  -->  00:04:33,920
Public we're calling the new
customer code, if you recall, and
80

80

00:04:33,920  -->  00:04:36,550
that's doing the text there
to see if it's equal to null.
81

81

00:04:36,550  -->  00:04:37,620
The customer wasn't on file.
82

82

00:04:37,620  -->  00:04:39,600
We're gonna add it and
then we're returning true.
83

83

00:04:39,600  -->  00:04:43,760
So what we've really done here,
by just doing a return branch.newCustomer.
84

84

00:04:43,760  -->  00:04:47,010
Not only are we executing
the code to add the customer, but
85

85

00:04:47,010  -->  00:04:50,650
we're also gonna return the status of
that, as well, to the calling process.
86

86

00:04:50,650  -->  00:04:52,670
And, obviously, it gets down to here.
87

87

00:04:52,670  -->  00:04:55,060
We got a return false,
88

88

00:04:55,060  -->  00:04:59,070
which means that we weren't able
to actually store the customer.
89

89

00:04:59,070  -->  00:05:01,210
So that's add customer and again,
90

90

00:05:01,210  -->  00:05:05,520
we're checking to see first whether
the branch exists and then we're leaving
91

91

00:05:05,520  -->  00:05:09,720
the check to see whether the customer
can be added to the appropriate class.
92

92

00:05:09,720  -->  00:05:12,370
So we're actually calling the branch
code to do the checking in there.
93

93

00:05:12,370  -->  00:05:16,550
So you can see how we're separating the
data validation into the right areas, so
94

94

00:05:16,550  -->  00:05:19,880
we're not putting huge amounts
of data validation in one spot.
95

95

00:05:19,880  -->  00:05:23,010
And this is one of the keys to
object-orientated programming, to make
96

96

00:05:23,010  -->  00:05:26,460
sure that you're trying to validate only
a specific thing in a specific area.
97

97

00:05:26,460  -->  00:05:31,270
And, therefore, your code is more compact
and more along the lines of a black
98

98

00:05:31,270  -->  00:05:36,080
box functionality and it's easy to
maintain cuz it's fewer lines of code and
99

99

00:05:36,080  -->  00:05:38,890
just really easy to understand as well.
100

100

00:05:38,890  -->  00:05:42,350
So that's adding a customer for the first
time and again, the point I want to
101

101

00:05:42,350  -->  00:05:45,510
make here is that you can see we're
actually calling the other code.
102

102

00:05:45,510  -->  00:05:48,330
So we're calling the branch code here for
the new customer.
103

103

00:05:48,330  -->  00:05:52,060
So it's going into the branch
class to perform that code.
104

104

00:05:52,060  -->  00:05:55,390
We're still calling the actual
code from the bank class.
105

105

00:05:55,390  -->  00:05:58,270
But the branch code has got the code
to do the processing of this
106

106

00:05:58,270  -->  00:05:59,750
case of the new customer and
107

107

00:05:59,750  -->  00:06:04,150
we're trying to keep the functionality
relating to each class separate.
108

108

00:06:04,150  -->  00:06:05,470
Okay, so that was add customer.
109

109

00:06:05,470  -->  00:06:07,740
The next one was for adding transactions.
110

110

00:06:07,740  -->  00:06:10,580
I'm gonna call that one add customer
transactions cuz it's gonna
111

111

00:06:10,580  -->  00:06:11,440
perform a similar role.
112

112

00:06:11,440  -->  00:06:17,070
So it'll be public boolean
addCustomerTransaction and
113

113

00:06:17,070  -->  00:06:22,360
we still need the branch name,
so it's branchName.
114

114

00:06:24,130  -->  00:06:28,080
And it's gonna be customerName again and
it's going to be an amount,
115

115

00:06:28,080  -->  00:06:30,030
which is the transaction amount.
116

116

00:06:31,660  -->  00:06:36,000
So we'll do the same thing,
we're gonna do a test to see whether
117

117

00:06:36,000  -->  00:06:40,520
the branch exists first, so
branch = findBranch, branchName.
118

118

00:06:42,060  -->  00:06:47,520
And likewise, in this case, if the branch
isn't found, there's a problem with it and
119

119

00:06:47,520  -->  00:06:49,810
we can't find the branch,
we obviously can't continue.
120

120

00:06:49,810  -->  00:06:55,930
So we can put if branch is not
equal to null, it means that it
121

121

00:06:55,930  -->  00:07:00,150
was able to be found and we can actually
go ahead and actually call the code.
122

122

00:07:00,150  -->  00:07:07,450
So to do that we can do return
branch.addCustomerTransaction,
123

123

00:07:07,450  -->  00:07:12,360
customerName and amount like so.
124

124

00:07:12,360  -->  00:07:14,340
And if we get down to here,
we can return false.
125

125

00:07:16,140  -->  00:07:20,690
So really is operating very much
similar to the add customer method.
126

126

00:07:20,690  -->  00:07:24,420
The only difference was we actually had a
separate method for a new customer and for
127

127

00:07:24,420  -->  00:07:25,680
adding in other transactions.
128

128

00:07:25,680  -->  00:07:28,790
So that's really the only difference
that those two methods are really doing.
129

129

00:07:28,790  -->  00:07:31,870
But again, we are using the branch code,
we're actually calling the code within
130

130

00:07:31,870  -->  00:07:33,980
that particular class,
which is the way we wanna do it.
131

131

00:07:33,980  -->  00:07:35,470
We wanna separate our
code wherever possible.
132

132

00:07:35,470  -->  00:07:38,590
Next, we need to implement
the find branch and
133

133

00:07:38,590  -->  00:07:42,290
to do that we can go back to our branch,
find customer.
134

134

00:07:42,290  -->  00:07:45,860
You can just really copy that and just
change a few things because, essentially,
135

135

00:07:45,860  -->  00:07:46,800
it's the same code.
136

136

00:07:48,010  -->  00:07:49,210
So we're just going to paste that in.
137

137

00:07:49,210  -->  00:07:53,820
And we're not gonna return a customer,
we're gonna return a branch.
138

138

00:07:53,820  -->  00:07:57,990
So it's gonna be branch, branch and
this should be branch as well.
139

139

00:08:01,790  -->  00:08:04,800
Branch, and it'll be branch.
140

140

00:08:04,800  -->  00:08:09,630
When we go through and check it for
branches in our find branch code,
141

141

00:08:09,630  -->  00:08:15,320
branches and would be a branch,
might actually be quicker to type it in.
142

142

00:08:15,320  -->  00:08:16,500
Check branch.
143

143

00:08:16,500  -->  00:08:22,220
Check branch, and then we're gonna
go copy and paste to fix that up.
144

144

00:08:22,220  -->  00:08:22,720
Oops.
145

145

00:08:24,910  -->  00:08:26,560
All right, so there's our find code.
146

146

00:08:26,560  -->  00:08:28,490
It's accepting and
I'll change that, as well.
147

147

00:08:28,490  -->  00:08:32,280
We'll call that branchName, and
148

148

00:08:32,280  -->  00:08:34,380
I think it would have been
quicker to type it in but anyway.
149

149

00:08:34,380  -->  00:08:38,890
So we've got our find branch method
accepting the branchName as parameter,
150

150

00:08:38,890  -->  00:08:42,850
going through all the entries in our array
list, checking to see whether there's
151

151

00:08:42,850  -->  00:08:45,440
a match with a branch name that
has been sent to this method.
152

152

00:08:45,440  -->  00:08:49,740
If there is, we return the branch record,
the object that's in the array list,
153

153

00:08:49,740  -->  00:08:50,300
in other words.
154

154

00:08:50,300  -->  00:08:53,390
Otherwise if we go right through
the loop and we can't find anything,
155

155

00:08:53,390  -->  00:08:56,240
then we're returning null,
which means there wasn't a match.
156

156

00:08:56,240  -->  00:08:57,800
So that's literally all that's doing.
157

157

00:08:57,800  -->  00:09:00,040
You've seen that in operation before.
158

158

00:09:00,040  -->  00:09:01,890
Now the next one that
we want to implement,
159

159

00:09:01,890  -->  00:09:05,080
going back to our main,
we wanna actually implement this one now.
160

160

00:09:05,080  -->  00:09:06,200
Show a list of customers for
161

161

00:09:06,200  -->  00:09:09,490
a particular branch and optionally,
a list of their transactions.
162

162

00:09:09,490  -->  00:09:13,580
So that's probably a more
meaty part of the code.
163

163

00:09:13,580  -->  00:09:15,590
So we're gonna make up this space here.
164

164

00:09:15,590  -->  00:09:16,350
Let's implement that.
165

165

00:09:17,890  -->  00:09:20,110
So to do that,
we're gonna create a method.
166

166

00:09:20,110  -->  00:09:21,580
We're just gonna call it list customers.
167

167

00:09:21,580  -->  00:09:22,670
So we're gonna call it public.
168

168

00:09:24,450  -->  00:09:26,760
We're still going to call it, even
though it's gonna just display a list,
169

169

00:09:26,760  -->  00:09:30,080
we're going to return a boolean in
case the branch wasn't found, so
170

170

00:09:30,080  -->  00:09:32,810
the calling processing will know that.
171

171

00:09:32,810  -->  00:09:37,360
So we're going to still parse the branch
name because we still need that branch
172

172

00:09:37,360  -->  00:09:44,590
name to search for and we're going to use
a boolean called showTransactions And
173

173

00:09:44,590  -->  00:09:48,370
showTransactions is gonna be set to true
if we want to list the transactions for
174

174

00:09:48,370  -->  00:09:51,570
customers and false if we only
wanna see the customer names.
175

175

00:09:51,570  -->  00:09:56,870
So again the same code at the start branch
176

176

00:09:56,870  -->  00:10:01,580
equals findBranch, branchName.
177

177

00:10:01,580  -->  00:10:05,490
Sorry, if branch is not equal to null,
that means we found a match.
178

178

00:10:05,490  -->  00:10:06,990
We can process it.
179

179

00:10:06,990  -->  00:10:09,530
Otherwise we're gonna put
a return false down here which
180

180

00:10:09,530  -->  00:10:13,190
means there was a problem finding,
in this case, the branch.
181

181

00:10:13,190  -->  00:10:15,150
Okay, so now that we've actually got that.
182

182

00:10:15,150  -->  00:10:18,160
So what we'll do at first is
we're gonna print out a message.
183

183

00:10:18,160  -->  00:10:24,120
And the message I'm gonna put is
customers for branch plus branch.
184

184

00:10:24,120  -->  00:10:25,550
Whoops.
185

185

00:10:25,550  -->  00:10:29,130
branch.getName.
186

186

00:10:29,130  -->  00:10:31,760
Now I could have just used
branchName there as well
187

187

00:10:31,760  -->  00:10:34,920
because obviously if there was a match,
it means that branchName was correct.
188

188

00:10:34,920  -->  00:10:39,610
But because we're using the branch object
and putting branch in there as well,
189

189

00:10:39,610  -->  00:10:43,880
just so it's really clear to the person
reading the code, I should say,
190

190

00:10:43,880  -->  00:10:45,710
that what we're trying to do.
191

191

00:10:45,710  -->  00:10:50,030
We put customer details for branch.
192

192

00:10:50,030  -->  00:10:53,560
So the next thing we actually we
need is a list of our customers,
193

193

00:10:53,560  -->  00:10:57,620
because we know which branch we're
dealing with, so we want to actually
194

194

00:10:57,620  -->  00:11:02,160
get a list of customers that are part of
the branch that we've just retrieved.
195

195

00:11:02,160  -->  00:11:05,180
So to do that,
we're gonna create a variable.
196

196

00:11:05,180  -->  00:11:09,340
And that's gonna be a list
of customer records.
197

197

00:11:09,340  -->  00:11:10,570
We're gonna call that branchCustomers.
198

198

00:11:12,950  -->  00:11:15,190
And we're gonna use branch.
199

199

00:11:15,190  -->  00:11:17,000
And at the moment we
haven't implemented that.
200

200

00:11:17,000  -->  00:11:21,370
So what we're really want to do here
is just use the create getter for
201

201

00:11:21,370  -->  00:11:23,640
the list of customers from
the branch effectively.
202

202

00:11:23,640  -->  00:11:25,640
We can go back here and
add a getter to that.
203

203

00:11:27,620  -->  00:11:31,520
Easiest thing to do would probably be
to just to add the getter there for
204

204

00:11:31,520  -->  00:11:33,370
a getCustomers and we can use that.
205

205

00:11:33,370  -->  00:11:38,170
And that's gonna return a list of
customers for that particular branch.
206

206

00:11:38,170  -->  00:11:41,110
So if we do that now .getCustomers.
207

207

00:11:41,110  -->  00:11:45,000
At this point, we've now got the list
of customers for the branch that we're
208

208

00:11:45,000  -->  00:11:49,050
looking for, so we need to go through
a for loop and print some of these out.
209

209

00:11:49,050  -->  00:11:54,940
So I've got for
int i equals zero, i less than,
210

210

00:11:54,940  -->  00:12:01,590
of course, it's branchCustomers.size, i++.
211

211

00:12:01,590  -->  00:12:06,020
We're gonna print a message out here,
and we'll put customer.
212

212

00:12:06,020  -->  00:12:07,980
This is the customer we're working on.
213

213

00:12:09,110  -->  00:12:12,890
So I'm put branchCustomers, which and
what well do there is we'll actually put
214

214

00:12:12,890  -->  00:12:20,260
customer branchCustomer equals, just to
stop us having to repeat ourselves here.
215

215

00:12:20,260  -->  00:12:21,290
BranchCustomers don't get i.
216

216

00:12:21,290  -->  00:12:26,980
So that's the current entry that
we're actually working on there now.
217

217

00:12:26,980  -->  00:12:30,640
So we're gonna put
branchCustomer don't get name.
218

218

00:12:31,910  -->  00:12:35,400
And the other we'll just put in square
brackets here, is just the number that
219

219

00:12:35,400  -->  00:12:39,020
we're working on, just sort of the loop
entry, which is just for our purposes.
220

220

00:12:39,020  -->  00:12:43,630
So we're gonna show that the customer, and
that's showing the name of the customer,
221

221

00:12:43,630  -->  00:12:46,800
and if you recall, we said optionally
show the transaction, so I'm gonna put if
222

222

00:12:46,800  -->  00:12:52,680
showTransactions, so this can only get
executed if showTransactions is true.
223

223

00:12:52,680  -->  00:12:54,500
Then what we're gonna do there, of course,
224

224

00:12:54,500  -->  00:12:57,540
we now need to get a list of
transactions for those customers.
225

225

00:12:57,540  -->  00:12:59,650
So first I'm gonna put
a message to put transactions.
226

226

00:13:02,170  -->  00:13:03,990
Transactions like so.
227

227

00:13:03,990  -->  00:13:08,670
Now we need an array list of our doubles,
of our transactions for that customer.
228

228

00:13:08,670  -->  00:13:10,400
So to do that we can put
an array list double.
229

229

00:13:10,400  -->  00:13:12,750
We'll call that transactions.
230

230

00:13:13,900  -->  00:13:18,980
And that's gonna be equal to our
branchCustomer.getTransactions.
231

231

00:13:18,980  -->  00:13:22,960
So we're gonna return that list
of transactions on file for
232

232

00:13:22,960  -->  00:13:24,180
that specific customer.
233

233

00:13:24,180  -->  00:13:27,440
Now, now that we've done that,
we need to actually do another loop now,
234

234

00:13:27,440  -->  00:13:30,510
a loop three because, of course,
they can be multiple transactions, and
235

235

00:13:30,510  -->  00:13:32,240
print each one of those out.
236

236

00:13:32,240  -->  00:13:34,830
So to do that we're gonna put for
int j equals 0, and
237

237

00:13:34,830  -->  00:13:38,080
you'll notice I'm doing j there
because if I try and put i there,
238

238

00:13:38,080  -->  00:13:41,730
because we're already within a loop,
above us you can see, we're going
239

239

00:13:41,730  -->  00:13:45,690
to get an error to say that i has already
been define in the scope, as you can see.
240

240

00:13:45,690  -->  00:13:50,690
So we need a j here, and I'll just go
through that again shortly so it's clear.
241

241

00:13:50,690  -->  00:13:51,370
It's gonna be j.
242

242

00:13:51,370  -->  00:13:56,350
It's gonna be less than, in this case,
it's transactions.size j++.
243

243

00:13:56,350  -->  00:13:58,040
And then we're just gonna print out, and
244

244

00:13:58,040  -->  00:14:01,150
what we'll do is we'll actually print
out the transaction number as well.
245

245

00:14:01,150  -->  00:14:04,780
So I'm just going to use
square brackets plus and
246

246

00:14:04,780  -->  00:14:09,500
we'll start counting from one,
like so, instead from zero.
247

247

00:14:09,500  -->  00:14:13,300
That's the transaction number and
248

248

00:14:13,300  -->  00:14:17,740
then we'll put amount plus, of course,
249

249

00:14:17,740  -->  00:14:22,960
this is gonna be transactions.get i,
sorry j.
250

250

00:14:22,960  -->  00:14:24,810
I nearly fell for that trap myself.
251

251

00:14:24,810  -->  00:14:27,330
Now I could put .doubleValue there.
252

252

00:14:27,330  -->  00:14:30,810
But we're using unboxing here, so
I'm just going to leave that like so, and
253

253

00:14:30,810  -->  00:14:32,240
I think I made a typo here.
254

254

00:14:33,460  -->  00:14:35,140
That definitely needs
another one there anyway.
255

255

00:14:35,140  -->  00:14:39,770
Oops, looks like a typo there.
256

256

00:14:39,770  -->  00:14:41,350
So that's what it should be.
257

257

00:14:41,350  -->  00:14:43,130
Okay, so
just gonna go through this again so
258

258

00:14:43,130  -->  00:14:45,220
you're clear on what
we're trying to do here.
259

259

00:14:45,220  -->  00:14:46,770
We're starting off on here and
260

260

00:14:46,770  -->  00:14:50,710
we're actually getting a list of all
the customers for the particular branch.
261

261

00:14:50,710  -->  00:14:53,730
So, therefore, the looping is
starting using the variable i and
262

262

00:14:53,730  -->  00:14:55,090
we're going through that.
263

263

00:14:55,090  -->  00:14:57,470
But then, optionally,
we had this showTransactions and
264

264

00:14:57,470  -->  00:15:01,130
if that was set to true when we call it,
the idea of that is
265

265

00:15:01,130  -->  00:15:05,240
to show a list of all the transactions for
a particular customer.
266

266

00:15:05,240  -->  00:15:08,190
Consequently, we need to
have a second loop, and
267

267

00:15:08,190  -->  00:15:12,210
because we're looping within a loop,
we need to use a different variable name.
268

268

00:15:12,210  -->  00:15:14,060
So the whole purpose of this method,
again,
269

269

00:15:14,060  -->  00:15:17,320
is to list all the customers for
a given branch.
270

270

00:15:17,320  -->  00:15:20,260
And optionally,
all the transactions for each customer.
271

271

00:15:20,260  -->  00:15:22,110
And that's technically
what we're doing here.
272

272

00:15:22,110  -->  00:15:24,450
The other thing I might do here is,
up here, I've put in this i,
273

273

00:15:24,450  -->  00:15:25,600
I'm gonna put i plus one here.
274

274

00:15:25,600  -->  00:15:30,950
And what that's doing, it's just gonna
show just the number starting from one and
275

275

00:15:30,950  -->  00:15:32,240
show the list of different customers so
276

276

00:15:32,240  -->  00:15:34,520
we can see those when we're actually
going through and outputting it.
277

277

00:15:34,520  -->  00:15:35,810
And the other thing we need to do,
278

278

00:15:35,810  -->  00:15:38,800
if we've successfully been
through the loop here.
279

279

00:15:38,800  -->  00:15:42,580
We actually want to return that point,
going to put an else here.
280

280

00:15:42,580  -->  00:15:43,080
Else.
281

281

00:15:46,150  -->  00:15:49,600
Return false.
282

282

00:15:49,600  -->  00:15:51,770
Because that would actually
indicate there was an error and
283

283

00:15:51,770  -->  00:15:54,020
what I'm gonna do is clear that up.
284

284

00:15:54,020  -->  00:15:55,650
And here I'm gonna put return true.
285

285

00:15:58,290  -->  00:16:01,380
So basically the code is here.
286

286

00:16:01,380  -->  00:16:05,700
Say if branch is not equal to null, we're
going to print out the customer names and
287

287

00:16:05,700  -->  00:16:07,680
optionally the transactions,
then return true.
288

288

00:16:07,680  -->  00:16:09,480
That's what this first line here's doing.
289

289

00:16:09,480  -->  00:16:12,970
Otherwise, if the branch in fact was null,
we're
290

290

00:16:12,970  -->  00:16:17,180
gonna return false which really signifies
to us that we couldn't find the branch.
291

291

00:16:17,180  -->  00:16:20,930
Now incidentally, these for loops,
and because we're using .size, and
292

292

00:16:20,930  -->  00:16:23,190
because we've got an array
list that's been initialized.
293

293

00:16:23,190  -->  00:16:28,720
If there no customers on file,
then it's still gonna work.
294

294

00:16:28,720  -->  00:16:30,280
It just won't actually
print any customers out.
295

295

00:16:30,280  -->  00:16:32,730
That's the beauty about
using these functions and
296

296

00:16:32,730  -->  00:16:35,490
making sure the array
lists are initialized.
297

297

00:16:35,490  -->  00:16:37,950
This will handle array lists of size zero.
298

298

00:16:37,950  -->  00:16:39,160
You're not going to get an error or
299

299

00:16:39,160  -->  00:16:41,670
anything like that because of the way
we've actually implemented it.
300

300

00:16:41,670  -->  00:16:43,920
All right, well this video has gone on and
on again, so
301

301

00:16:43,920  -->  00:16:47,690
we've now actually implemented the bank,
the branch, and the customer.
302

302

00:16:47,690  -->  00:16:50,920
So we're actually done with
the three major components.
303

303

00:16:50,920  -->  00:16:54,120
The only thing left for us to do,
which we'll now do in the next video,
304

304

00:16:54,120  -->  00:16:57,270
is just to write some test code to
actually make sure this all works,
305

305

00:16:57,270  -->  00:17:01,250
then add a bank, add some branches,
add some customers, and
306

306

00:17:01,250  -->  00:17:05,120
just check that the customer
transactions that we had will also work.
307

307

00:17:05,120  -->  00:17:06,360
So we'll do that in the next video.
