WEBVTT
1
1

00:00:03.250  -->  00:00:12.460
so lets actually run this again now and see what actually happens so when it
2

2

00:00:12.460  -->  00:00:16.000
runs we get actually nothing printed
and that's because there's no finally
3

3

00:00:16.000  -->  00:00:19.970
block to put a print statement in it
was only printing messages to show that
4

4

00:00:19.970  -->  00:00:23.640
the blocks are being executed anyways so you
wouldn't ordinarily do that anyway now you
5

5

00:00:23.640  -->  00:00:27.650
could still add a finally block if that's
what you wanted to do but don't try and
6

6

00:00:27.650  -->  00:00:31.430
close the resources in it because that's
unnecessary and closing some resources
7

7

00:00:31.430  -->  00:00:34.830
when they are not open can cause an
error so you leave it to the try
8

8

00:00:34.830  -->  00:00:39.200
resources block to do that for you
automatically so now you can see that
9

9

00:00:39.200  -->  00:00:43.070
what we've got here is and I'll just close down the run
window it's a lot tidier and a lot more
10

10

00:00:43.070  -->  00:00:47.140
concise we've only got a few lines of code there including the try so as much
11

11

00:00:47.140  -->  00:00:51.430
tidier and now we've done that let's add some
code to also write out the exits for each
12

12

00:00:51.430  -->  00:00:55.960
location now using the try with
resource forming the try block actually
13

13

00:00:55.960  -->  00:00:59.480
allows more than one resource to be
specified and as a result we can
14

14

00:00:59.480  -->  00:01:04.190
actually create a second file writer to write the exits data out now as the
15

15

00:01:04.190  -->  00:01:06.940
code already loops through the
locations what I'm going to do is add an
16

16

00:01:06.940  -->  00:01:10.740
inner loop to write the exits for
each location rather than
17

17

00:01:10.740  -->  00:01:15.140
having two separate blocks of code so let's go
ahead and make those changes so the
18

18

00:01:15.140  -->  00:01:19.590
first thing we need to do is add a
second file writer object in our try
19

19

00:01:19.590  -->  00:01:23.580
initial try and the way we do that is we
actually put a semicolon on the first one
20

20

00:01:23.580  -->  00:01:39.200
we go to a new line and put....
21

21

00:01:39.200  -->  00:01:47.110
....so that's how we actually put
22

22

00:01:47.110  -->  00:01:53.540
2 file writer objects in the initial try
resources section and what we are going to do
23

23

00:01:53.540  -->  00:01:57.610
after the initial write of the location
we are gonna cycle all through all the
24

24

00:01:57.610  -->  00:02:01.790
directions or the exits for this location and write those
25

25

00:02:01.790  -->  00:02:07.460
out so we can do that....
26

26

00:02:09.040  -->  00:02:12.220
...
27

27

00:02:12.220  -->  00:02:17.600
....
28

28

00:02:17.600  -->  00:02:21.820
...
29

29

00:02:22.460  -->  00:02:38.250
.....
30

30

00:02:38.250  -->  00:02:46.860
...so thee location has been written first
31

31

00:02:46.860  -->  00:02:49.390
and then we do a for loop for that
location going through all the
32

32

00:02:49.390  -->  00:02:54.050
exits for that given location and
actually saving those to the file as well
33

33

00:02:54.050  -->  00:02:58.430
which of course is the direction.txt file so let's actually run that now
34

34

00:02:58.430  -->  00:03:04.510
to see if it works in the left hand side you may have seen the directions.txt file
35

35

00:03:04.510  -->  00:03:08.700
getting created so there it is there and there's
our various directions now it looks like
36

36

00:03:08.700  -->  00:03:12.340
there is something that we need to fix
their we go back to our code and have a look
37

37

00:03:12.340  -->  00:03:18.100
at that again and actually there is
something I need to change what I need
38

38

00:03:18.100  -->  00:03:22.900
to do is to put another comma in their so looking at that code we really need to differentiate
39

39

00:03:22.900  -->  00:03:28.880
that and we got the original location then we got the direction in which exit which
40

40

00:03:28.880  -->  00:03:34.450
location it leads to and I didn't put a comma their so it's going to
lead to problems latest so I'll put
41

41

00:03:34.450  -->  00:03:43.600
another comma in their and that would make it correct this time and
also be bit easier to read so if we have a look
42

42

00:03:43.600  -->  00:03:49.610
at the directions.txt file now you can see we got commas between
them so that's good so that is all working
43

43

00:03:49.610  -->  00:03:54.200
so its simple way to write data out to the file now I should point out at this point that from
44

44

00:03:54.200  -->  00:03:58.010
a purely I/O point of view theirs probably
better ways to store the data for this
45

45

00:03:58.010  -->  00:04:03.440
game so writing it to a text file like
this really isn't very efficient but
46

46

00:04:03.440  -->  00:04:07.110
with that said their can be advantageous
to storing data in human-readable format
47

47

00:04:07.110  -->  00:04:10.670
like this and that's because we can edit
the data files directly if we wanted to
48

48

00:04:10.670  -->  00:04:16.070
like for example to add you new locations and
exits would be quite easy and just open
49

49

00:04:16.070  -->  00:04:20.100
this up in any text editor and making those
changes so at this point I'm now going to
50

50

00:04:20.100  -->  00:04:20.290
switch
51

51

00:04:20.290  -->  00:04:24.470
over to looking at reading data
so we've created the data files from
52

52

00:04:24.470  -->  00:04:28.340
the game needs and it's now time to use
them to initialize the games location
53

53

00:04:28.340  -->  00:04:33.250
and I'm gonna start by commenting
out the code that's currently in our static
54

54

00:04:33.250  -->  00:04:39.830
initialization block so open that up close that directions.txt so I'm in
55

55

00:04:39.830  -->  00:04:44.870
locations and what we need to do is make
some changes now to the static
56

56

00:04:44.870  -->  00:04:48.430
initialization blocked since its the code
that we place in here a few
57

57

00:04:48.430  -->  00:04:53.500
videos ago so what I'm gonna start by doing is going
to comment out all this code that's currently in
58

58

00:04:53.500  -->  00:04:57.090
here and we are going to ultimately
see if we can read this data back in
59

59

00:04:57.090  -->  00:05:00.870
these files that we've created so lets comment all these code out in this
60

60

00:05:00.870  -->  00:05:13.520
static initialization block so comment that out and go back to the top and start adding some code so we are gonna use file reader objects
61

61

00:05:13.520  -->  00:05:17.590
to get data from the two input streams namely
the locations and the directions
62

62

00:05:17.590  -->  00:05:21.940
text files that we have created and the
process is very similar to what we're
63

63

00:05:21.940  -->  00:05:27.410
just done we've written out the data just the other way
around the main difference is that we
64

64

00:05:27.410  -->  00:05:31.080
need to pass the data into the
individual strings and integers so we're
65

65

00:05:31.080  -->  00:05:35.130
going to use the familiar scanner to do
that for us now so that you can see how
66

66

00:05:35.130  -->  00:05:40.610
it's done before Java 7 I'm gonna start once
again by using try finally and then
67

67

00:05:40.610  -->  00:05:43.990
ultimately we are going to convert the code to using the new try resources method
68

68

00:05:43.990  -->  00:05:55.460
so lets do the long way first so let's
start with scanners....
69

69

00:05:55.460  -->  00:06:11.960
.....
70

70

00:06:12.670  -->  00:06:26.190
.....
71

71

00:06:26.190  -->  00:06:34.670
..and we are getting an error at the moment
because we haven't given the try block
72

72

00:06:34.670  -->  00:06:42.090
anything to throw an IOException so
let's change that now so....
73

73

00:06:42.090  -->  00:06:50.050
....
74

74

00:06:51.870  -->  00:07:02.710
...
75

75

00:07:02.710  -->  00:07:08.320
..this is our way to tell the scanner
that our information is separated by a comma
76

76

00:07:08.320  -->  00:07:11.320
so the key piece of information location etc the
77

77

00:07:11.900  -->  00:07:16.090
description of the location or wherever
it is that the actual fields are
78

78

00:07:16.090  -->  00:07:28.410
separated by a comma and we do a while loop....
79

79

00:07:28.410  -->  00:07:35.160
.....
80

80

00:07:35.160  -->  00:07:40.440
...so the first bit of information was the location so we are gonna
81

81

00:07:40.440  -->  00:07:44.940
retrieve it into an integer because of
course it was an integer next we are gonna do something
82

82

00:07:44.940  -->  00:07:51.750
you haven't seen before so...so you can
83

83

00:07:51.750  -->  00:07:55.870
guess what that's going to do that's
now gonna skip over the comma to move
84

84

00:07:55.870  -->  00:07:58.470
to the next section and again just very
quickly
85

85

00:07:58.470  -->  00:08:02.290
locations.txt you can see we've
got a location we've got a comma and we got the
86

86

00:08:02.290  -->  00:08:08.420
descriptions so we are retrieving the location we've now moved past the comma which
87

87

00:08:08.420  -->  00:08:13.630
was the delimiter we're going to
continue onto the actual description and
88

88

00:08:13.630  -->  00:08:16.880
the way we do that we just put....
89

89

00:08:18.970  -->  00:08:45.680
.....
90

90

00:08:45.680  -->  00:08:49.940
...just so we can see its importing it correctly we wouldn't normally
91

91

00:08:49.940  -->  00:08:55.320
put that in your code testing purposes that is fine and lets now create a locations
92

92

00:08:55.320  -->  00:09:07.660
object so.....
93

93

00:09:12.270  -->  00:09:19.850
.....
94

94

00:09:19.850  -->  00:09:22.390
....
95

95

00:09:22.390  -->  00:09:29.690
.....but for now
you could see that we've actually
96

96

00:09:29.690  -->  00:09:32.970
written some of this information so
basically the code looks very familiar
97

97

00:09:32.970  -->  00:09:37.260
and very much along the same lines as
writing data to an output stream as you
98

98

00:09:37.260  -->  00:09:41.560
can see there if you remember from a videos ago but of course instead of the file writer
99

99

00:09:41.560  -->  00:09:46.060
object we are using a file reader and
we are passing it the name of the file
100

100

00:09:46.060  -->  00:09:48.760
as constructor and that is the file that is
ultimately going to get the data from
101

101

00:09:48.760  -->  00:09:53.440
file reader stream is then
passed to the constructor of a scanner
102

102

00:09:53.440  -->  00:09:57.500
causing the scanner to work with the
data in the stream in the stream
103

103

00:09:57.500  -->  00:10:00.850
itself rather than system.in which
you have seen previously in the course to
104

104

00:10:00.850  -->  00:10:05.310
read for the keyboard so obviously it's
a different stream as though the scanner
105

105

00:10:05.310  -->  00:10:09.000
still operates the same in that its
retrieving data but we have set it this time
106

106

00:10:09.000  -->  00:10:14.660
grab it from a file instead of a keyboard now I could have declared a new file reader object variable and pass that
107

107

00:10:14.660  -->  00:10:18.440
to the scanner but you will find constructors chained together like this
108

108

00:10:18.440  -->  00:10:21.670
a lot when performing I/O operations in Java
109

109

00:10:21.670  -->  00:10:25.980
in fact the classes are designed to work
together in this fashion so creating a
110

110

00:10:25.980  -->  00:10:29.430
new file reader object like this
instead of actually creating separate
111

111

00:10:29.430  -->  00:10:30.450
variable and passing
112

112

00:10:30.450  -->  00:10:35.480
the variable now to see an example of how the they are designed to slot together will
113

113

00:10:35.480  -->  00:10:41.830
actually I'm not gonna tell you that right away because that is going to make a good mini challenged o here is your mini
114

114

00:10:41.830  -->  00:10:46.730
challenge why is the file reader object
not closed despite me saying that
115

115

00:10:46.730  -->  00:10:50.600
closing streams are very important and a
hint here is to remember that you can
116

116

00:10:50.600  -->  00:10:55.110
view the source code for Java objects
and methods by control or command
117

117

00:10:55.110  -->  00:10:58.640
clicking on the method see if you can
figure that out and come back come when
118

118

00:10:58.640  -->  00:11:03.880
you ready and we will go through and solve this mini
challenge so see you when you get back pause the video now
119

119

00:11:07.550  -->  00:11:10.770
ok so hopefully you figure out
what's going on
120

120

00:11:10.770  -->  00:11:15.830
or the reason why the file reader objects is not close despite me saying earlier
121

121

00:11:15.830  -->  00:11:19.540
that closing streams is very important for
the reason is that when the scanner is
122

122

00:11:19.540  -->  00:11:25.080
closed its close method also takes care
of closing any stream that it was using
123

123

00:11:25.080  -->  00:11:30.300
provided that the stream object
implements the closable interface and
124

124

00:11:30.300  -->  00:11:34.920
the file reader does do that so shouldn't
really have used to terms stream here
125

125

00:11:34.920  -->  00:11:39.510
it's probably more accurate to referred to
it as a readable because the source for
126

126

00:11:39.510  -->  00:11:43.940
a scanner must be an object that
implements the readable interface so if we
127

127

00:11:43.940  -->  00:11:51.870
have a look at this we are gonna look at the scanner close method so lets go into the scanner click on that
128

128

00:11:51.870  -->  00:11:54.870
and if we have a look at its close method
129

129

00:11:59.180  -->  00:12:07.390
do a search for close you can see that it test the source whether it's an
instance of closable you can see that
130

130

00:12:07.390  -->  00:12:11.120
on line 1091 and if it is it causes the automatic
131

131

00:12:11.120  -->  00:12:15.490
calls the sources close method if it
is so consequently we don't need to worry
132

132

00:12:15.490  -->  00:12:21.470
about closing this file reader object
because it's automatically handled by
133

133

00:12:21.470  -->  00:12:27.360
the scanner class itself when it's being
closed down and if we go back to the code and
134

134

00:12:27.360  -->  00:12:31.540
we are calling scanner.close on line 61 as you can
see there so its pretty cool how that's
135

135

00:12:31.540  -->  00:12:35.630
handled automatically for us so remember
that a class can implement more than one
136

136

00:12:35.630  -->  00:12:39.930
interface so an object can be an instance of a
close and a runnable at the same
137

137

00:12:39.930  -->  00:12:43.580
time and that sort of really really
important so reading the
138

138

00:12:43.580  -->  00:12:47.060
directions text file to build up the
exits for the location is very similar
139

139

00:12:47.060  -->  00:12:48.880
to reading the locations
140

140

00:12:48.880  -->  00:12:52.930
but I'm gonna do something slightly different
their and introduced Buffered Reader so lets
141

141

00:12:52.930  -->  00:12:54.330
look at doing that in the next video
