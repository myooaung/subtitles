WEBVTT
1
1

00:00:04.690  -->  00:00:06.880
Alright, so let's recap what we've
2

2

00:00:06.880  -->  00:00:09.340
learnt so far about arrays and discuss
3

3

00:00:09.340  -->  00:00:11.049
some of the common errors that occur
4

4

00:00:11.049  -->  00:00:14.379
with arrays. So an array is a data
5

5

00:00:14.379  -->  00:00:16.449
structure that allows us to store
6

6

00:00:16.449  -->  00:00:19.210
multiple values of the same type into a
7

7

00:00:19.210  -->  00:00:22.240
single variable. The default values of a
8

8

00:00:22.240  -->  00:00:24.370
numeric array elements are set to zero
9

9

00:00:24.370  -->  00:00:27.670
arrays are zero indexed, so an array with
10

10

00:00:27.670  -->  00:00:31.480
n elements is indexed from 0 to n take 1.
11

11

00:00:31.480  -->  00:00:34.059
So for example 10 elements the index
12

12

00:00:34.059  -->  00:00:36.879
range would be from 0 through 9. Now if
13

13

00:00:36.879  -->  00:00:39.489
we try to access an index that is out of range
14

14

00:00:39.489  -->  00:00:41.800
Java will give us an array index out of
15

15

00:00:41.800  -->  00:00:44.530
bounds exception that which indicates
16

16

00:00:44.530  -->  00:00:46.449
that the index is out of range in other
17

17

00:00:46.449  -->  00:00:47.829
words, out of bounds we're trying to
18

18

00:00:47.829  -->  00:00:51.399
access an element that is outside of
19

19

00:00:51.399  -->  00:00:53.589
what we've defined. To access array
20

20

00:00:53.589  -->  00:00:55.749
elements, we use square braces this is
21

21

00:00:55.749  -->  00:00:58.530
also known as the array access operator.
22

22

00:00:58.530  -->  00:01:00.999
So let's see an example of how to create
23

23

00:01:00.999  -->  00:01:04.120
an array, so we use square brackets after
24

24

00:01:04.120  -->  00:01:06.010
the type in this case it's an int array
25

25

00:01:06.010  -->  00:01:08.320
so we've got int square braces then the
26

26

00:01:08.320  -->  00:01:09.940
name of variable in this case array so
27

27

00:01:09.940  -->  00:01:13.030
it's in square brackets array then after
28

28

00:01:13.030  -->  00:01:15.850
the equal sign we type new int in this
29

29

00:01:15.850  -->  00:01:17.950
case since it's an int array and 5 and
30

30

00:01:17.950  -->  00:01:20.200
square braces representing the number of
31

31

00:01:20.200  -->  00:01:21.700
elements in the array, in other words the
32

32

00:01:21.700  -->  00:01:23.620
length of the array. So you can see in
33

33

00:01:23.620  -->  00:01:25.420
this scenario that the array contains
34

34

00:01:25.420  -->  00:01:28.030
the elements from array 0 through to
35

35

00:01:28.030  -->  00:01:30.970
array 4, it's got 5 elements and the
36

36

00:01:30.970  -->  00:01:33.190
index range in this example is 0 to 4
37

37

00:01:33.190  -->  00:01:35.440
the new operator or keyword is used to
38

38

00:01:35.440  -->  00:01:37.900
create the array and initialize the
39

39

00:01:37.900  -->  00:01:39.910
array elements to their default values,
40

40

00:01:39.910  -->  00:01:41.650
remembering that an int in this case
41

41

00:01:41.650  -->  00:01:44.380
will be defaulted to 0. Now for boolean
42

42

00:01:44.380  -->  00:01:46.990
type arrays if we use boolean instead of
43

43

00:01:46.990  -->  00:01:48.580
int they would all be initialized to
44

44

00:01:48.580  -->  00:01:51.340
false, if you use string or other objects
45

45

00:01:51.340  -->  00:01:53.620
they would be set to no but we'll be
46

46

00:01:53.620  -->  00:01:55.780
talking more about null and what that is
47

47

00:01:55.780  -->  00:01:59.200
later in the course. So this example here
48

48

00:01:59.200  -->  00:02:01.210
we've got int left to right square
49

49

00:02:01.210  -->  00:02:03.730
braces my numbers equals and we've went
50

50

00:02:03.730  -->  00:02:05.409
left to right curly braces with the
51

51

00:02:05.409  -->  00:02:07.960
numbers 5 4 3 2 1 in it then at the end
52

52

00:02:07.960  -->  00:02:09.819
as a semicolon. So this is a way to
53

53

00:02:09.819  -->  00:02:12.819
initialize an array inline using an
54

54

00:02:12.819  -->  00:02:15.160
array initializer block and that's what
55

55

00:02:15.160  -->  00:02:16.990
that is there the left and right curly
56

56

00:02:16.990  -->  00:02:18.100
braces with further
57

57

00:02:18.100  -->  00:02:20.140
contents in between and notice that
58

58

00:02:20.140  -->  00:02:21.910
we're defining the values for the array
59

59

00:02:21.910  -->  00:02:24.460
separated by a comma. So this way of
60

60

00:02:24.460  -->  00:02:26.020
initializing is also known as an
61

61

00:02:26.020  -->  00:02:28.390
anonymous array it's got five elements
62

62

00:02:28.390  -->  00:02:31.000
and the index range is 0 through 4 and
63

63

00:02:31.000  -->  00:02:33.070
in this example you've probably figured
64

64

00:02:33.070  -->  00:02:34.630
out that the array and the elements are
65

65

00:02:34.630  -->  00:02:38.500
initialized to 5 4 3 2 1. Alright,
66

66

00:02:38.500  -->  00:02:41.290
here's another example of our array in
67

67

00:02:41.290  -->  00:02:43.720
square braces my array equals new int 5
68

68

00:02:43.720  -->  00:02:45.640
and doubled in square braces and a
69

69

00:02:45.640  -->  00:02:47.890
semicolon you may recall that when we
70

70

00:02:47.890  -->  00:02:50.620
first used variables, a set of variable
71

71

00:02:50.620  -->  00:02:52.270
is a place in memory, so think of it like
72

72

00:02:52.270  -->  00:02:54.700
a box that you could store something and
73

73

00:02:54.700  -->  00:02:56.920
you can store something in that box, well
74

74

00:02:56.920  -->  00:02:59.740
the same goes for arrays but with arrays
75

75

00:02:59.740  -->  00:03:01.450
you can imagine an array it's a row of
76

76

00:03:01.450  -->  00:03:03.880
boxes of slots where each box can
77

77

00:03:03.880  -->  00:03:05.950
contain a value, so in other words we
78

78

00:03:05.950  -->  00:03:08.320
could store something into each box so
79

79

00:03:08.320  -->  00:03:10.720
in this example I mentioned we created
80

80

00:03:10.720  -->  00:03:12.760
an array with five elements so in other
81

81

00:03:12.760  -->  00:03:15.400
words five boxes and they are by default
82

82

00:03:15.400  -->  00:03:18.190
all initialized to zero, so every box in
83

83

00:03:18.190  -->  00:03:19.990
this example contains an integer value
84

84

00:03:19.990  -->  00:03:22.450
of zero, so every box or slots got an
85

85

00:03:22.450  -->  00:03:24.850
index so that we can access the values
86

86

00:03:24.850  -->  00:03:29.260
by an index using square braces, so in
87

87

00:03:29.260  -->  00:03:31.540
this example we've initialized the array
88

88

00:03:31.540  -->  00:03:33.520
with values in the same line using an
89

89

00:03:33.520  -->  00:03:35.830
array initializer as we talked about and
90

90

00:03:35.830  -->  00:03:37.450
that's also known as I mentioned as an
91

91

00:03:37.450  -->  00:03:39.970
anonymous array. Now each box or slot
92

92

00:03:39.970  -->  00:03:42.160
contains a value the array again has
93

93

00:03:42.160  -->  00:03:44.020
five elements, but we're putting the
94

94

00:03:44.020  -->  00:03:46.690
valley's into each box so each box has
95

95

00:03:46.690  -->  00:03:48.730
got a different value so the box or
96

96

00:03:48.730  -->  00:03:52.000
element index 0 contains number 10 the
97

97

00:03:52.000  -->  00:03:55.090
box at array element 1 contains 35 and
98

98

00:03:55.090  -->  00:03:57.220
so on. Alright, so let's see some of the
99

99

00:03:57.220  -->  00:03:59.080
common errors that occur when working
100

100

00:03:59.080  -->  00:04:02.440
with arrays, so here's an example of the
101

101

00:04:02.440  -->  00:04:04.960
first common error accessing index out
102

102

00:04:04.960  -->  00:04:07.030
of bounds, notice you can see we're
103

103

00:04:07.030  -->  00:04:09.790
trying to assign the element at index 5
104

104

00:04:09.790  -->  00:04:12.190
and that index doesn't exist in other
105

105

00:04:12.190  -->  00:04:14.560
words it's out of bounds and the same
106

106

00:04:14.560  -->  00:04:16.630
goes if you use a negative index arrays
107

107

00:04:16.630  -->  00:04:18.790
can't have a negative index, so in other
108

108

00:04:18.790  -->  00:04:20.680
words the number has to be 0 or higher
109

109

00:04:20.680  -->  00:04:22.960
but note that an array can hold a
110

110

00:04:22.960  -->  00:04:24.910
negative value, so in other words we can
111

111

00:04:24.910  -->  00:04:26.740
put a negative number into one of those
112

112

00:04:26.740  -->  00:04:28.990
boxes but we can't try and access a
113

113

00:04:28.990  -->  00:04:31.160
specific box or element using a
114

114

00:04:31.160  -->  00:04:32.870
negative number, but in this particular
115

115

00:04:32.870  -->  00:04:34.880
case you can see that we have to find
116

116

00:04:34.880  -->  00:04:37.430
the array on the first line int that the
117

117

00:04:37.430  -->  00:04:39.290
right square brackets my array equals
118

118

00:04:39.290  -->  00:04:42.050
then we've got the left and right curly
119

119

00:04:42.050  -->  00:04:45.050
braces 10 35 20 17 and 18 separated by
120

120

00:04:45.050  -->  00:04:47.570
commas and then semicolon on the end of
121

121

00:04:47.570  -->  00:04:49.750
the line. So that's a five element array
122

122

00:04:49.750  -->  00:04:52.460
but remembering that our array index
123

123

00:04:52.460  -->  00:04:54.860
starts at index zero, so therefore my
124

124

00:04:54.860  -->  00:04:57.230
element square brackets five in between
125

125

00:04:57.230  -->  00:04:59.060
trying to set that the fifty-five is
126

126

00:04:59.060  -->  00:05:00.230
giving us an error and you can see there
127

127

00:05:00.230  -->  00:05:01.280
on the screen in the bottom right hand
128

128

00:05:01.280  -->  00:05:03.320
corner and that's an error we're trying
129

129

00:05:03.320  -->  00:05:06.320
to basically update a box that doesn't
130

130

00:05:06.320  -->  00:05:08.270
exist in this particular array, so be
131

131

00:05:08.270  -->  00:05:09.830
careful when accessing array elements
132

132

00:05:09.830  -->  00:05:12.620
remember that array index positions
133

133

00:05:12.620  -->  00:05:15.110
start from zero and go up to the length
134

134

00:05:15.110  -->  00:05:17.150
take one in other words here we've got
135

135

00:05:17.150  -->  00:05:19.520
five elements and the valid range is two
136

136

00:05:19.520  -->  00:05:21.320
in to get access to those elements two
137

137

00:05:21.320  -->  00:05:24.230
zero three four. Alright, so our second
138

138

00:05:24.230  -->  00:05:25.940
common error happens when you loop
139

139

00:05:25.940  -->  00:05:27.890
through an array, now there's a logic
140

140

00:05:27.890  -->  00:05:29.480
error in other words we're starting here
141

141

00:05:29.480  -->  00:05:32.330
from element one but remember that the
142

142

00:05:32.330  -->  00:05:34.790
array index starts from zero, so if we
143

143

00:05:34.790  -->  00:05:36.050
printed out the elements of the array
144

144

00:05:36.050  -->  00:05:38.720
starting from index 1 the first element
145

145

00:05:38.720  -->  00:05:40.580
which is at index zero won't be printed
146

146

00:05:40.580  -->  00:05:42.770
in this scenario, so if this ever happens
147

147

00:05:42.770  -->  00:05:45.380
to you just change the variable in the
148

148

00:05:45.380  -->  00:05:47.900
for loop to start at zero, so you can see
149

149

00:05:47.900  -->  00:05:49.370
what's happened in this code we've
150

150

00:05:49.370  -->  00:05:50.960
assigned the values to the array of 10
151

151

00:05:50.960  -->  00:05:54.650
35 20 17 and 18 but the output as you
152

152

00:05:54.650  -->  00:05:57.410
can see has bypassed the value of 10 and
153

153

00:05:57.410  -->  00:06:00.380
that's our the value from index 0 in the
154

154

00:06:00.380  -->  00:06:02.840
array because the for loop as you can
155

155

00:06:02.840  -->  00:06:04.820
see in the red box we started from the
156

156

00:06:04.820  -->  00:06:07.040
value 1 and of course index position 1
157

157

00:06:07.040  -->  00:06:10.610
contains the value of 35 so the last
158

158

00:06:10.610  -->  00:06:12.470
common error that happens would again
159

159

00:06:12.470  -->  00:06:14.450
cause an index out of range exception
160

160

00:06:14.450  -->  00:06:17.180
now this is because the condition isn't
161

161

00:06:17.180  -->  00:06:19.580
correct, so here we're using the less
162

162

00:06:19.580  -->  00:06:21.440
than equal operator you can see that to
163

163

00:06:21.440  -->  00:06:23.180
highlight it in the red box but we
164

164

00:06:23.180  -->  00:06:24.520
should be using the less than operator
165

165

00:06:24.520  -->  00:06:27.320
the problem happens because the last
166

166

00:06:27.320  -->  00:06:29.990
iteration of the loop i variable will
167

167

00:06:29.990  -->  00:06:32.390
have the value 5 the length of this
168

168

00:06:32.390  -->  00:06:35.390
array is 5, so we've got 5 elements in
169

169

00:06:35.390  -->  00:06:37.550
the array but the index range is from 0
170

170

00:06:37.550  -->  00:06:41.210
through 4, so when i is equal to 5 the
171

171

00:06:41.210  -->  00:06:42.530
condition will be true because we've
172

172

00:06:42.530  -->  00:06:45.080
mentioned less than equal there
173

173

00:06:45.080  -->  00:06:47.030
five is less than equal to five is true
174

174

00:06:47.030  -->  00:06:49.430
there with five being the value of i and
175

175

00:06:49.430  -->  00:06:52.849
five being the length of the array, so
176

176

00:06:52.849  -->  00:06:54.050
this will cause an out of range
177

177

00:06:54.050  -->  00:06:56.419
exception, so most importantly remember
178

178

00:06:56.419  -->  00:06:58.400
that again that the index starts at zero
179

179

00:06:58.400  -->  00:07:00.590
and ends at least one
180

180

00:07:00.590  -->  00:07:03.289
so when looping it's easier to use the
181

181

00:07:03.289  -->  00:07:05.300
less than sign than having to use the
182

182

00:07:05.300  -->  00:07:07.189
length fake one, so here you can see that
183

183

00:07:07.189  -->  00:07:10.069
we could change the codes of it i list
184

184

00:07:10.069  -->  00:07:12.199
then my array dot length which would
185

185

00:07:12.199  -->  00:07:14.990
work just fine. Alright so that's a recap
186

186

00:07:14.990  -->  00:07:16.610
of arrays I hope you got a lot out of it
187

187

00:07:16.610  -->  00:07:20.560
and we'll move on now to the next video.
