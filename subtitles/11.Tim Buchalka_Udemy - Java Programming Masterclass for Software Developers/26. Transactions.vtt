WEBVTT
1
1

00:00:05.020  -->  00:00:07.540
ok so continuing on from the last video
2

2

00:00:07.540  -->  00:00:09.790
we ended up talking about the fact that
3

3

00:00:09.790  -->  00:00:12.430
a malicious user can't inject sql into
4

4

00:00:12.430  -->  00:00:14.020
the statement and that's because
5

5

00:00:14.020  -->  00:00:15.820
anything substituted for a placeholder
6

6

00:00:15.820  -->  00:00:18.400
is treated as a single literal value
7

7

00:00:18.400  -->  00:00:21.700
won't be interpreted as sql but moving
8

8

00:00:21.700  -->  00:00:22.570
on from that
9

9

00:00:22.570  -->  00:00:24.370
let's say that we wanted to use or
10

10

00:00:24.370  -->  00:00:26.320
within a prepared statement how we do
11

11

00:00:26.320  -->  00:00:29.350
that what I'm talking about is some sql
12

12

00:00:29.350  -->  00:00:33.580
code on these lines so select....
13

13

00:00:33.580  -->  00:00:40.980
....
14

14

00:00:40.980  -->  00:00:47.350
....
15

15

00:00:47.350  -->  00:00:49.870
think of it this way for each value we
16

16

00:00:49.870  -->  00:00:52.390
need a placeholder we can't substitute
17

17

00:00:52.390  -->  00:00:54.880
more than one value for one place holder
18

18

00:00:54.880  -->  00:00:58.750
and we can't inject sql and also we can
19

19

00:00:58.750  -->  00:01:01.870
only substitute values so we can't use
20

20

00:01:01.870  -->  00:01:04.360
placeholders for things like table and
21

21

00:01:04.360  -->  00:01:06.790
column names and that's because in order
22

22

00:01:06.790  -->  00:01:08.790
to pre compile the statements the
23

23

00:01:08.790  -->  00:01:10.680
database needs to know which table we
24

24

00:01:10.680  -->  00:01:13.950
are querying and which columns we want so the
25

25

00:01:13.950  -->  00:01:15.850
only information we can postpone until
26

26

00:01:15.850  -->  00:01:17.740
we want to perform the query are the
27

27

00:01:17.740  -->  00:01:20.970
values themselves also we can use
28

28

00:01:20.970  -->  00:01:23.250
prepared statements with insert update
29

29

00:01:23.250  -->  00:01:26.350
and delete we use placeholders for the
30

30

00:01:26.350  -->  00:01:27.930
values of the same way would use them
31

31

00:01:27.930  -->  00:01:31.240
within select statements and we'll
32

32

00:01:31.240  -->  00:01:32.950
actually see an example of using a search
33

33

00:01:32.950  -->  00:01:38.380
shortly so it is good practice to use
34

34

00:01:38.380  -->  00:01:41.020
prepared statements because of the
35

35

00:01:41.020  -->  00:01:43.500
potential performance benefit and also
36

36

00:01:43.500  -->  00:01:45.210
because they protect the database against
37

37

00:01:45.210  -->  00:01:47.850
sql injection attacks of course that
38

38

00:01:47.850  -->  00:01:49.740
doesn't mean that our database can't be hacked
39

39

00:01:49.740  -->  00:01:51.810
but just that it cannot be hacked using
40

40

00:01:51.810  -->  00:01:56.400
that particular type of attack so to
41

41

00:01:56.400  -->  00:01:58.410
recap we do the following to use a
42

42

00:01:58.410  -->  00:02:01.110
prepared statement we declare a constant
43

43

00:02:01.110  -->  00:02:03.360
for the sql statement that contains
44

44

00:02:03.360  -->  00:02:05.910
the placeholders we create a prepared
45

45

00:02:05.910  -->  00:02:08.100
statement instance using connection.
46

46

00:02:08.100  -->  00:02:10.140
prepared statement and we passed that
47

47

00:02:10.140  -->  00:02:13.500
the SQL statement in a string when we are
48

48

00:02:13.500  -->  00:02:15.850
ready to perform the query or the insert
49

49

00:02:15.850  -->  00:02:18.760
update or delete we call the appropriate
50

50

00:02:18.760  -->  00:02:21.060
setter methods to set the placeholders
51

51

00:02:21.060  -->  00:02:23.070
to the values we want to use in the
52

52

00:02:23.070  -->  00:02:25.360
statement we then run the statement
53

53

00:02:25.360  -->  00:02:28.000
using prepared statement . executes or
54

54

00:02:28.000  -->  00:02:29.700
prepared statement . execute query
55

55

00:02:29.700  -->  00:02:32.680
lastly we process the results the same
56

56

00:02:32.680  -->  00:02:34.870
way we do when using a regular old
57

57

00:02:34.870  -->  00:02:38.360
statement
58

58

00:02:38.360  -->  00:02:41.750
that's all for prepared statements now
59

59

00:02:41.750  -->  00:02:43.700
final topic for this particular video
60

60

00:02:43.700  -->  00:02:46.160
is going to be transactions now because
61

61

00:02:46.160  -->  00:02:48.740
the jdbc connection class autocommit
62

62

00:02:48.740  -->  00:02:51.530
changes by default every time we call
63

63

00:02:51.530  -->  00:02:54.080
execute to insert update or delete
64

64

00:02:54.080  -->  00:02:57.020
records those changes are saved to the
65

65

00:02:57.020  -->  00:02:58.760
database as soon as the sql statement
66

66

00:02:58.760  -->  00:03:01.580
completes now sometimes that's what we
67

67

00:03:01.580  -->  00:03:06.590
want but often it's not
68

68

00:03:06.590  -->  00:03:08.980
as an example let's just say that our
69

69

00:03:08.980  -->  00:03:11.950
application is a web portal that people
70

70

00:03:11.950  -->  00:03:14.390
used to do online banking now one of the
71

71

00:03:14.390  -->  00:03:15.890
things that they can do is transfer
72

72

00:03:15.890  -->  00:03:17.870
money from one account to another
73

73

00:03:17.870  -->  00:03:20.330
when they do this we have to run 2
74

74

00:03:20.330  -->  00:03:23.180
sql statements the first one we need
75

75

00:03:23.180  -->  00:03:25.160
to update the source account with the
76

76

00:03:25.160  -->  00:03:27.500
new balance and the second one is to
77

77

00:03:27.500  -->  00:03:29.480
update the destination account with the
78

78

00:03:29.480  -->  00:03:31.640
new balance now what would happen if we
79

79

00:03:31.640  -->  00:03:32.870
executed the first statement
80

80

00:03:32.870  -->  00:03:35.030
successfully but the second statement
81

81

00:03:35.030  -->  00:03:37.670
failed for some reason so let's say the
82

82

00:03:37.670  -->  00:03:39.310
source account had a balance of one
83

83

00:03:39.310  -->  00:03:40.840
thousand dollars and the destination
84

84

00:03:40.840  -->  00:03:44.320
account had a balance of $100 the
85

85

00:03:44.320  -->  00:03:46.090
customer wants to transfer two hundred
86

86

00:03:46.090  -->  00:03:51.080
dollars into the destination account
87

87

00:03:51.080  -->  00:03:53.900
now in step one we update the record for
88

88

00:03:53.900  -->  00:03:55.970
the source account so that now has a
89

89

00:03:55.970  -->  00:03:59.060
balance of 800 in step two we update the
90

90

00:03:59.060  -->  00:04:01.010
destination account so that it has a
91

91

00:04:01.010  -->  00:04:05.030
balance of 300 now step one completes but
92

92

00:04:05.030  -->  00:04:07.670
step two fails the two hundred dollars
93

93

00:04:07.670  -->  00:04:09.230
were transferring will effectively go
94

94

00:04:09.230  -->  00:04:11.450
missing now hopefully we would notice the
95

95

00:04:11.450  -->  00:04:13.490
failure but then we have to write
96

96

00:04:13.490  -->  00:04:15.890
code that would handle any failures by
97

97

00:04:15.890  -->  00:04:17.300
adding the money back to the source
98

98

00:04:17.300  -->  00:04:19.910
account but what happens if we can't do
99

99

00:04:19.910  -->  00:04:21.760
that because the second step failed
100

100

00:04:21.760  -->  00:04:24.010
because the database is down or it can't
101

101

00:04:24.010  -->  00:04:25.010
be reached
102

102

00:04:25.010  -->  00:04:29.810
what we do then and here's another scenario
103

103

00:04:29.810  -->  00:04:32.150
let's suppose we want to add a new
104

104

00:04:32.150  -->  00:04:34.010
song to the music database
105

105

00:04:34.010  -->  00:04:35.960
what do we have to do to achieve this
106

106

00:04:35.960  -->  00:04:37.880
firstly want to add the artist for the
107

107

00:04:37.880  -->  00:04:40.130
song to the artists table
108

108

00:04:40.130  -->  00:04:41.750
secondly we want to add the album the
109

109

00:04:41.750  -->  00:04:44.390
song is on to the album's table and
110

110

00:04:44.390  -->  00:04:45.980
third we want to add the song to the
111

111

00:04:45.980  -->  00:04:48.650
songs table but what happens if we
112

112

00:04:48.650  -->  00:04:51.260
complete step one but then steps two and
113

113

00:04:51.260  -->  00:04:53.570
three keep failing now maybe we're
114

114

00:04:53.570  -->  00:04:55.550
trying to do this over the internet and
115

115

00:04:55.550  -->  00:04:57.230
we lose an internet connection for some
116

116

00:04:57.230  -->  00:05:00.720
reason
117

117

00:05:00.720  -->  00:05:02.580
now this wouldn't be as bad a situation
118

118

00:05:02.580  -->  00:05:05.400
as the banking example but we would end
119

119

00:05:05.400  -->  00:05:07.440
up with records in the artists or albums
120

120

00:05:07.440  -->  00:05:10.680
table that aren't associated with any songs
121

121

00:05:10.680  -->  00:05:13.260
integrity of the data in the database
122

122

00:05:13.260  -->  00:05:16.410
could be compromised so it would be nice
123

123

00:05:16.410  -->  00:05:18.240
if one we wanted to accomplish something
124

124

00:05:18.240  -->  00:05:20.370
that requires multiple sql
125

125

00:05:20.370  -->  00:05:22.260
statements we could run all the
126

126

00:05:22.260  -->  00:05:24.660
statements as a single unit now either
127

127

00:05:24.660  -->  00:05:25.980
all the sql statement was
128

128

00:05:25.980  -->  00:05:27.810
successfully complete or none of them
129

129

00:05:27.810  -->  00:05:31.430
would
130

130

00:05:31.430  -->  00:05:33.110
and this is where transactions come in
131

131

00:05:33.110  -->  00:05:35.150
so think of a transaction as a
132

132

00:05:35.150  -->  00:05:37.750
sequence of sql statements that are
133

133

00:05:37.750  -->  00:05:40.720
treated as a single logical unit now if
134

134

00:05:40.720  -->  00:05:43.340
any of the statements fail the results of
135

135

00:05:43.340  -->  00:05:44.990
any previous statements in the
136

136

00:05:44.990  -->  00:05:47.810
transaction can be rolled back or just
137

137

00:05:47.810  -->  00:05:49.130
not saved
138

138

00:05:49.130  -->  00:05:51.620
it's as if they never happened now in
139

139

00:05:51.620  -->  00:05:54.710
the banking case if step 2 failed then
140

140

00:05:54.710  -->  00:05:56.630
the balance in the source account would
141

141

00:05:56.630  -->  00:05:59.210
be rolled back to its original value in
142

142

00:05:59.210  -->  00:06:01.160
the music case if steps one and two are
143

143

00:06:01.160  -->  00:06:04.310
successful but step three failes then step
144

144

00:06:04.310  -->  00:06:07.280
1 and 2 are rolled back so the artist and album
145

145

00:06:07.280  -->  00:06:09.280
are never saved in the artists and albums
146

146

00:06:09.280  -->  00:06:12.950
tables
147

147

00:06:12.950  -->  00:06:14.780
note that when we're speaking about
148

148

00:06:14.780  -->  00:06:17.600
databases we usually use the term commit
149

149

00:06:17.600  -->  00:06:20.060
rather than save when referring to
150

150

00:06:20.060  -->  00:06:22.730
making any changes permanent so we use
151

151

00:06:22.730  -->  00:06:25.100
commits from this point forward now
152

152

00:06:25.100  -->  00:06:27.020
database transactions must be acid
153

153

00:06:27.020  -->  00:06:29.030
compliant they must meet the following
154

154

00:06:29.030  -->  00:06:33.140
characteristics so the a in acid stands for
155

155

00:06:33.140  -->  00:06:36.050
atomicity and this relates to what we've
156

156

00:06:36.050  -->  00:06:38.420
just discussed if a series of sql
157

157

00:06:38.420  -->  00:06:40.970
statements change the database then
158

158

00:06:40.970  -->  00:06:43.130
either all the changes are committed or
159

159

00:06:43.130  -->  00:06:45.950
none of them are the second letter C
160

160

00:06:45.950  -->  00:06:48.500
stands for consistency before
161

161

00:06:48.500  -->  00:06:50.960
transaction begins the databases in a
162

162

00:06:50.960  -->  00:06:53.540
valid state when it completes the
163

163

00:06:53.540  -->  00:06:58.060
database is still in a valid state
164

164

00:06:58.060  -->  00:07:02.130
the I in acid stands for isolation so
165

165

00:07:02.130  -->  00:07:03.700
until the changes committed by a
166

166

00:07:03.700  -->  00:07:06.130
transaction are completed that won't be
167

167

00:07:06.130  -->  00:07:08.410
visible to other connections so
168

168

00:07:08.410  -->  00:07:10.240
transactions can't depend on each
169

169

00:07:10.240  -->  00:07:13.300
other and lastly the D in acid stands for
170

170

00:07:13.300  -->  00:07:16.240
durability once the change is performed
171

171

00:07:16.240  -->  00:07:18.130
by transaction are committed to the
172

172

00:07:18.130  -->  00:07:21.280
database their permanent if an
173

173

00:07:21.280  -->  00:07:23.260
application crashes or the database
174

174

00:07:23.260  -->  00:07:25.510
server goes down in the case of our
175

175

00:07:25.510  -->  00:07:27.580
client server database like my sql
176

176

00:07:27.580  -->  00:07:29.800
for example the changes made by the
177

177

00:07:29.800  -->  00:07:31.690
transactions are still there when the
178

178

00:07:31.690  -->  00:07:33.820
application runs again or the database
179

179

00:07:33.820  -->  00:07:34.990
comes back up
180

180

00:07:34.990  -->  00:07:36.910
so essentially transactions ensure the
181

181

00:07:36.910  -->  00:07:42.270
integrity of the data within a database
182

182

00:07:42.270  -->  00:07:44.720
now we only have to use transactions
183

183

00:07:44.720  -->  00:07:47.690
when we change the data in a database we
184

184

00:07:47.690  -->  00:07:48.960
don't need them when we are querying the
185

185

00:07:48.960  -->  00:07:51.090
database since we're not changing any
186

186

00:07:51.090  -->  00:07:53.780
data sqlite uses transactions by
187

187

00:07:53.780  -->  00:07:56.970
default and autocommit by default
188

188

00:07:56.970  -->  00:07:58.880
in fact no changes can be made to the
189

189

00:07:58.880  -->  00:08:02.220
database outside of transaction so when
190

190

00:08:02.220  -->  00:08:03.780
we were working with the contacts
191

191

00:08:03.780  -->  00:08:06.240
database every time we used update
192

192

00:08:06.240  -->  00:08:08.310
insert and delete sqlite was
193

193

00:08:08.310  -->  00:08:10.250
creating a transaction running the
194

194

00:08:10.250  -->  00:08:11.900
statement and then committing the
195

195

00:08:11.900  -->  00:08:14.660
changes for us so as we learned earlier
196

196

00:08:14.660  -->  00:08:18.360
the jdbc connection class also auto commits
197

197

00:08:18.360  -->  00:08:21.410
changes by default when we turned off
198

198

00:08:21.410  -->  00:08:23.810
auto commit sqlite stopped
199

199

00:08:23.810  -->  00:08:25.470
auto committing the changes but there was
200

200

00:08:25.470  -->  00:08:30.240
still made as part of a transaction
201

201

00:08:30.240  -->  00:08:32.520
now when working with sqlite the
202

202

00:08:32.520  -->  00:08:33.900
following commands are used for
203

203

00:08:33.900  -->  00:08:35.160
transactions
204

204

00:08:35.160  -->  00:08:38.040
firstly begin transaction now we use
205

205

00:08:38.040  -->  00:08:40.860
this to manually start transaction the
206

206

00:08:40.860  -->  00:08:43.620
second one is end transaction so use this
207

207

00:08:43.620  -->  00:08:45.810
to end the transaction now committing
208

208

00:08:45.810  -->  00:08:48.150
changes automatically ends a transaction
209

209

00:08:48.150  -->  00:08:51.180
also ending a transaction also commits
210

210

00:08:51.180  -->  00:08:52.440
any changes
211

211

00:08:52.440  -->  00:08:54.600
so in other words end transaction and
212

212

00:08:54.600  -->  00:08:57.240
commit are aliases we only have to use
213

213

00:08:57.240  -->  00:08:59.220
one when we want to enter transaction
214

214

00:08:59.220  -->  00:09:03.150
and commit the changes three commit so
215

215

00:09:03.150  -->  00:09:04.860
we use this to commit the changes made
216

216

00:09:04.860  -->  00:09:08.310
by a transaction as mentioned this end
217

217

00:09:08.310  -->  00:09:10.230
the transaction so we don't need to
218

218

00:09:10.230  -->  00:09:13.260
also run the end transaction command 4
219

219

00:09:13.260  -->  00:09:15.900
rollback so this rolls back any
220

220

00:09:15.900  -->  00:09:18.060
uncommitted changes and ends the
221

221

00:09:18.060  -->  00:09:20.580
transaction so note that it can only
222

222

00:09:20.580  -->  00:09:22.320
roll back changes that have occurred
223

223

00:09:22.320  -->  00:09:28.180
since the last commit or rollback
224

224

00:09:28.180  -->  00:09:30.390
note that if we close the connection
225

225

00:09:30.390  -->  00:09:33.130
before we commit any outstanding changes
226

226

00:09:33.130  -->  00:09:36.040
the changes are rolled back alright so
227

227

00:09:36.040  -->  00:09:37.210
let's take a look at how to use
228

228

00:09:37.210  -->  00:09:40.930
transactions within jdbc now when using
229

229

00:09:40.930  -->  00:09:43.020
jdbc we don't code the transaction
230

230

00:09:43.020  -->  00:09:45.390
related sql statements and use
231

231

00:09:45.390  -->  00:09:49.630
statement object to execute them
232

232

00:09:49.630  -->  00:09:52.180
what we do instead is called methods in
233

233

00:09:52.180  -->  00:09:54.460
the connection class to execute
234

234

00:09:54.460  -->  00:09:57.520
transaction related commands so we can
235

235

00:09:57.520  -->  00:09:59.200
perform the following steps
236

236

00:09:59.200  -->  00:10:01.390
firstly turn off the default autocommit
237

237

00:10:01.390  -->  00:10:03.850
behavior by calling connection . set
238

238

00:10:03.850  -->  00:10:06.580
autocommit with false as an argument 2
239

239

00:10:06.580  -->  00:10:09.370
we perform the sequel operations that
240

240

00:10:09.370  -->  00:10:12.340
form the transaction three if there are
241

241

00:10:12.340  -->  00:10:14.500
no errors call connection . commit
242

242

00:10:14.500  -->  00:10:17.380
to commit the changes now if there
243

243

00:10:17.380  -->  00:10:19.360
are errors we call connection . roll
244

244

00:10:19.360  -->  00:10:21.460
back to rollback any changes made since
245

245

00:10:21.460  -->  00:10:24.760
the transaction began and 4 we turn
246

246

00:10:24.760  -->  00:10:27.280
the default auto commit behavior back on by
247

247

00:10:27.280  -->  00:10:29.800
calling set autocommit this time passing
248

248

00:10:29.800  -->  00:10:33.680
true as the argument
249

249

00:10:33.680  -->  00:10:36.440
so to demonstrate a transaction we're
250

250

00:10:36.440  -->  00:10:38.390
going to add the code to insert a song
251

251

00:10:38.390  -->  00:10:40.760
into the songs table and that's got
252

252

00:10:40.760  -->  00:10:43.520
columns for the song title the ID the
253

253

00:10:43.520  -->  00:10:45.560
id for the album the song was on and
254

254

00:10:45.560  -->  00:10:47.140
the track number of the song on the
255

255

00:10:47.140  -->  00:10:50.060
album now what we want to add a song
256

256

00:10:50.060  -->  00:10:52.370
how do we get the underscore ID for the
257

257

00:10:52.370  -->  00:10:54.950
album as i pointed out earlier before
258

258

00:10:54.950  -->  00:10:57.580
adding a song you have to add the album
259

259

00:10:57.580  -->  00:11:00.200
that's actually on to the album's table
260

260

00:11:00.200  -->  00:11:02.330
which has columns for the underscore ID
261

261

00:11:02.330  -->  00:11:05.060
the name of the album and the underscore ID
262

262

00:11:05.060  -->  00:11:07.490
for the artist so how do we get the
263

263

00:11:07.490  -->  00:11:10.250
artist ID you guessed it we have to add
264

264

00:11:10.250  -->  00:11:13.070
the artist to the artists table before
265

265

00:11:13.070  -->  00:11:16.010
adding the album of course if it is already
266

266

00:11:16.010  -->  00:11:18.080
a record for the artist or album then we
267

267

00:11:18.080  -->  00:11:19.490
won't to add them again
268

268

00:11:19.490  -->  00:11:21.260
so we have to actually check for that
269

269

00:11:21.260  -->  00:11:24.980
case
270

270

00:11:24.980  -->  00:11:27.440
now to add a song the user has to
271

271

00:11:27.440  -->  00:11:29.830
provide us with the song title the album
272

272

00:11:29.830  -->  00:11:32.440
it's on the artist and the track number
273

273

00:11:32.440  -->  00:11:35.060
for the song so here's the sequence of
274

274

00:11:35.060  -->  00:11:36.640
steps we need to follow
275

275

00:11:36.640  -->  00:11:39.170
firstly we want to get the title album
276

276

00:11:39.170  -->  00:11:41.570
track number and artists and we'll just
277

277

00:11:41.570  -->  00:11:43.100
have the main method past as parameters
278

278

00:11:43.100  -->  00:11:45.130
rather than prompting for them
279

279

00:11:45.130  -->  00:11:47.080
secondly want to check to see if there's
280

280

00:11:47.080  -->  00:11:48.860
a record for the artists in the artists
281

281

00:11:48.860  -->  00:11:52.070
table if yes we're going to go to step 4
282

282

00:11:52.070  -->  00:11:53.720
if no we're going to proceed to step
283

283

00:11:53.720  -->  00:11:57.130
three step 3 would be to add the artists
284

284

00:11:57.130  -->  00:11:58.820
to the artists table
285

285

00:11:58.820  -->  00:12:00.700
step 4 we want to check to see if the
286

286

00:12:00.700  -->  00:12:03.110
album is in the album's table if it is
287

287

00:12:03.110  -->  00:12:04.670
we go to step 6
288

288

00:12:04.670  -->  00:12:08.180
otherwise we proceed to step 5 step 5 we
289

289

00:12:08.180  -->  00:12:10.220
add the album to the album's table
290

290

00:12:10.220  -->  00:12:12.560
step 6 we add the song to the songs
291

291

00:12:12.560  -->  00:12:15.650
table
292

292

00:12:15.650  -->  00:12:17.360
now we're going to want all the
293

293

00:12:17.360  -->  00:12:19.430
insertions to take place within a single
294

294

00:12:19.430  -->  00:12:22.100
transaction so that we don't end up with
295

295

00:12:22.100  -->  00:12:24.290
records in the artist table that aren't
296

296

00:12:24.290  -->  00:12:25.880
associated with any albums or songs
297

297

00:12:25.880  -->  00:12:28.760
or with albums that aren't associated with any
298

298

00:12:28.760  -->  00:12:30.950
songs so we should check for the
299

299

00:12:30.950  -->  00:12:32.630
existence of the song to before we
300

300

00:12:32.630  -->  00:12:34.880
add it but since more than one song can
301

301

00:12:34.880  -->  00:12:36.830
have the same title would have to check
302

302

00:12:36.830  -->  00:12:39.020
that the album was also the same that
303

303

00:12:39.020  -->  00:12:41.180
the artist is also the same which would
304

304

00:12:41.180  -->  00:12:46.490
that involve querying all three tables
305

305

00:12:46.490  -->  00:12:47.930
so we're going to assume the in the
306

306

00:12:47.930  -->  00:12:49.640
example that we know that the song
307

307

00:12:49.640  -->  00:12:51.890
doesn't already exist so we can focus on
308

308

00:12:51.890  -->  00:12:53.810
using a transaction when inserting a
309

309

00:12:53.810  -->  00:12:56.660
song but in a real world application of
310

310

00:12:56.660  -->  00:12:57.830
course you wouldn't want to be making that
311

311

00:12:57.830  -->  00:13:00.680
assumption also we're not going to worry
312

312

00:13:00.680  -->  00:13:02.300
about updating the artist_list
313

313

00:13:02.300  -->  00:13:03.800
view in a real world application
314

314

00:13:03.800  -->  00:13:06.110
would also have to update the view
315

315

00:13:06.110  -->  00:13:10.880
alright so we're going to need an insert
316

316

00:13:10.880  -->  00:13:13.450
statement for each table so let's now
317

317

00:13:13.450  -->  00:13:15.170
go back to intellij and start
318

318

00:13:15.170  -->  00:13:16.610
by adding constants for them to the
319

319

00:13:16.610  -->  00:13:18.680
datasource class we're going to use
320

320

00:13:18.680  -->  00:13:20.240
prepared statements for the following as
321

321

00:13:20.240  -->  00:13:22.160
you can see here we've got three
322

322

00:13:22.160  -->  00:13:24.050
different inserts there one for the artist
323

323

00:13:24.050  -->  00:13:26.270
table one for the albums and one for
324

324

00:13:26.270  -->  00:13:27.200
the songs
325

325

00:13:27.200  -->  00:13:29.140
let's go back there now and start creating
326

326

00:13:29.140  -->  00:13:32.830
some constants and actually given how
327

327

00:13:32.830  -->  00:13:35.140
long this video has gone for instead
328

328

00:13:35.140  -->  00:13:37.370
let's just end the video here now and we
329

329

00:13:37.370  -->  00:13:38.360
actually start working on those
330

330

00:13:38.360  -->  00:13:44.980
constants in the next video
