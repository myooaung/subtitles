WEBVTT
1
1

00:00:05.610  -->  00:00:08.650
So in the previous video we talked
about Scope for the first time.
2

2

00:00:08.650  -->  00:00:11.930
So what we will do is we'll actually
test that with a challenge at the end of
3

3

00:00:11.930  -->  00:00:15.500
this video or possibly the next depending
on how long the video goes for.
4

4

00:00:15.500  -->  00:00:17.390
But we'll be talking about visibility.
5

5

00:00:17.390  -->  00:00:21.930
In Java getting back to scope, things
can be a little bit more complicated and
6

6

00:00:21.930  -->  00:00:26.700
that's because objects themself also have
visibility but before I actually go about
7

7

00:00:26.700  -->  00:00:30.080
explaining that what we'll do is
we'll do a bit of refactoring so
8

8

00:00:30.080  -->  00:00:34.540
our private file variable names will
have different variables themselves.
9

9

00:00:34.540  -->  00:00:38.110
Have different names, which is going
to make them easy for us to refer to.
10

10

00:00:38.110  -->  00:00:40.040
So first the in scope check itself,
11

11

00:00:40.040  -->  00:00:44.010
what we're going to do is we're going to
refactor the private var, call it var one.
12

12

00:00:44.010  -->  00:00:47.890
So I'm just going to click on that,
right click, refactor 39,
13

13

00:00:47.890  -->  00:00:51.250
I'm gonna call that DAR 1R1.
14

14

00:00:51.250  -->  00:00:56.550
Noting all the places in the code
where that's being updated.
15

15

00:00:56.550  -->  00:01:00.840
Note down here Intuijay was smart enough
to figure out, okay you're using the field
16

16

00:01:00.840  -->  00:01:03.630
which is part of scope check,
and it's updating that as well.
17

17

00:01:03.630  -->  00:01:05.870
So I'm gonna press enter then,
to accept that.
18

18

00:01:05.870  -->  00:01:07.360
And I need to put a space there.
19

19

00:01:07.360  -->  00:01:09.400
Actually, what I'll do is I'll undo that.
20

20

00:01:09.400  -->  00:01:10.700
I'll try again.
21

21

00:01:10.700  -->  00:01:12.770
I'll right-click, refactor, rename.
22

22

00:01:12.770  -->  00:01:15.950
And I'll delete all this
extra stuff out this time.
23

23

00:01:17.580  -->  00:01:19.030
I wanna call this one var 1.
24

24

00:01:19.030  -->  00:01:19.930
Var 1.
25

25

00:01:19.930  -->  00:01:20.670
Press Enter.
26

26

00:01:21.740  -->  00:01:25.220
And, it's actually telling us, do we want
to actually rename the getter, as well.
27

27

00:01:25.220  -->  00:01:29.250
And that can be a good idea because at
the moment it's called getPrivateVar.
28

28

00:01:29.250  -->  00:01:31.170
So I would say yes to that.
29

29

00:01:31.170  -->  00:01:35.510
And down here, what we need to do is we
need to actually click on Do ReFactor.
30

30

00:01:35.510  -->  00:01:37.260
Basically, are we happy with the scope?
31

31

00:01:37.260  -->  00:01:41.260
ANd this is the way that Intellgioso
what's going to basically change.
32

32

00:01:41.260  -->  00:01:44.730
In this case, it's quite Quite simple
as you can see what can be changed.
33

33

00:01:44.730  -->  00:01:47.300
But in cases where you've got a lot of
code, you can actually come down here and
34

34

00:01:47.300  -->  00:01:50.630
actually see all the places where
the code's gonna be changed and
35

35

00:01:50.630  -->  00:01:51.420
it can be really useful.
36

36

00:01:51.420  -->  00:01:53.620
In this case, I'll click on do refactor.
37

37

00:01:53.620  -->  00:01:56.210
And you can see we've changed
all the variable names.
38

38

00:01:56.210  -->  00:01:59.450
And also note the getter has
now been changed as well.
39

39

00:01:59.450  -->  00:02:00.610
I'm gonna change this, actually.
40

40

00:02:03.490  -->  00:02:06.730
And then leave that as for now.
41

41

00:02:06.730  -->  00:02:07.560
So let's scope check.
42

42

00:02:07.560  -->  00:02:10.740
In the inner class what we
want to do is we actually want
43

43

00:02:10.740  -->  00:02:12.220
to rename the field to Val three.
44

44

00:02:12.220  -->  00:02:14.680
So I'm going to come down here,
45

45

00:02:14.680  -->  00:02:18.710
and rename that rather to Val
three with re-factor, re-name.
46

46

00:02:21.170  -->  00:02:22.760
Var three press Enter and
47

47

00:02:22.760  -->  00:02:25.200
then again we're gonna do the refractor
cuz there is more of a place.
48

48

00:02:25.200  -->  00:02:28.100
I'm just gonna accept that, that's being
updated and you're coming back here to
49

49

00:02:28.100  -->  00:02:31.610
the scope check method times two,
we're actually gonna rename that,
50

50

00:02:31.610  -->  00:02:34.240
I could just type it but
I'm just gonna refactor it again.
51

51

00:02:34.240  -->  00:02:37.100
Refactor, rename,
I could of pressed Shift+F6
52

52

00:02:37.100  -->  00:02:40.400
there as you can see on the screen
if I wanted to go directly to that.
53

53

00:02:40.400  -->  00:02:43.210
And you just hit Shift+F6
also in Win Linux.
54

54

00:02:43.210  -->  00:02:45.850
And delete that and we can change that and
we'll call it varTwo.
55

55

00:02:48.870  -->  00:02:51.830
Just so we're really clear now and
incidentally when I did the first
56

56

00:02:51.830  -->  00:02:55.970
refractor it also changed
what was in double quotes.
57

57

00:02:55.970  -->  00:02:58.820
So I could of actually got it
just to change the variables,
58

58

00:02:58.820  -->  00:03:02.840
just not make that other change but
in this case I just accepted it all so
59

59

00:03:02.840  -->  00:03:05.280
It actually has changed
the actual name of the variable,
60

60

00:03:05.280  -->  00:03:08.740
also in the double quotes as well,
the actual string representation.
61

61

00:03:08.740  -->  00:03:12.050
Lastly, going back to main,
then here what we'll do just, again,
62

62

00:03:12.050  -->  00:03:14.110
to be consistent we're gonna rename or
refactor that.
63

63

00:03:14.110  -->  00:03:18.200
I'm gonna call this file four.
64

64

00:03:21.290  -->  00:03:26.430
Notice I will say that when we rename
the getter it automatically changed that
65

65

00:03:26.430  -->  00:03:31.450
in main method so again pretty cool how
IntelliJ could do a lot of that work for
66

66

00:03:31.450  -->  00:03:33.000
you, making things a lot easier.
67

67

00:03:33.000  -->  00:03:34.540
Notice also what's happened here,
68

68

00:03:34.540  -->  00:03:38.300
this is probably not what we
wanted when I did the renaming of
69

69

00:03:39.380  -->  00:03:44.010
in scope check for the third variable,
I'll just go back and have a look.
70

70

00:03:44.010  -->  00:03:46.070
var3.
It actually renamed this as well and
71

71

00:03:46.070  -->  00:03:48.000
that's because the match on the name.
72

72

00:03:48.000  -->  00:03:52.410
I can actually rename that as well.
73

73

00:03:52.410  -->  00:03:54.250
I'm going to change that back.
74

74

00:03:54.250  -->  00:03:57.070
That should really be var1 now because
this is where we're getting it from.
75

75

00:03:57.070  -->  00:03:59.630
We're getting it from the scopeInstance
and it should match that.
76

76

00:03:59.630  -->  00:04:01.070
I'll just come back here.
77

77

00:04:01.070  -->  00:04:03.660
I actually made a typo there.
78

78

00:04:03.660  -->  00:04:04.460
I'll refactor that again.
79

79

00:04:04.460  -->  00:04:09.250
[SOUND].
80

80

00:04:09.250  -->  00:04:12.620
Let's call that bar three because
then you can see that and
81

81

00:04:13.660  -->  00:04:14.770
then you've got it working.
82

82

00:04:14.770  -->  00:04:16.940
I am going back to the inner class.
83

83

00:04:16.940  -->  00:04:20.460
What we're going to do there is we're
going to actually show the bar three and
84

84

00:04:20.460  -->  00:04:22.250
I actually bar three there.
85

85

00:04:22.250  -->  00:04:24.080
Because that's actually what it is now.
86

86

00:04:24.080  -->  00:04:27.350
So, I was showing the value
of the inner class.
87

87

00:04:27.350  -->  00:04:29.120
Let's also show value one as one.
88

88

00:04:29.120  -->  00:04:34.730
So, value one, one is plus value one.
89

89

00:04:35.980  -->  00:04:39.950
Plus in val three, and
90

90

00:04:39.950  -->  00:04:45.480
coming back here I'll delete that
method call which was an example.
91

91

00:04:45.480  -->  00:04:53.150
And I'm going to actually print out
file one is still available here.
92

92

00:04:57.110  -->  00:04:59.400
You can see that we
haven't got an error so
93

93

00:04:59.400  -->  00:05:02.650
as far as is concerned, it's actually
quite happy to put it in there.
94

94

00:05:02.650  -->  00:05:03.420
So, now that I've done that,
95

95

00:05:03.420  -->  00:05:07.260
the reason I was doing that is I want to
show the scope of each variable in turn.
96

96

00:05:07.260  -->  00:05:09.510
So, starting with varOne,
a variable varOne,
97

97

00:05:09.510  -->  00:05:11.370
the first one that we defined up here.
98

98

00:05:11.370  -->  00:05:14.540
So, that scope is the entire
class scope check,
99

99

00:05:14.540  -->  00:05:17.330
you can see that's used in
the constructor varOne.
100

100

00:05:17.330  -->  00:05:19.800
But I've also actually put it in the inner
class as well, you can see its in
101

101

00:05:19.800  -->  00:05:22.530
the inner class constructor as
well as the times two method.
102

102

00:05:22.530  -->  00:05:26.620
So the class and all the interclasses
have got access to varOne.
103

103

00:05:26.620  -->  00:05:28.530
And that's because it's
a field of scope check.
104

104

00:05:28.530  -->  00:05:32.060
And because we renamed it, it's no longer
shadowed by the inner class field,
105

105

00:05:32.060  -->  00:05:34.890
cuz the inner class field has got
a different name now, varThree.
106

106

00:05:34.890  -->  00:05:37.610
That's why we can actually print it out
without having to put a this prefix or
107

107

00:05:37.610  -->  00:05:38.640
anything like that.
108

108

00:05:38.640  -->  00:05:41.450
Let's fix that up there, but But
also here in the time [INAUDIBLE] method.
109

109

00:05:41.450  -->  00:05:43.490
We don't need to put this
dot prefix because it;s
110

110

00:05:43.490  -->  00:05:44.900
actually a different name now.
111

111

00:05:44.900  -->  00:05:47.750
So what this confirms is
that the object scope
112

112

00:05:47.750  -->  00:05:52.300
is the block in which it's declared
including any contained blocks.
113

113

00:05:52.300  -->  00:05:53.630
So looking.
Looking at varTwo,
114

114

00:05:53.630  -->  00:05:56.100
and of course varTwo is here.
115

115

00:05:56.100  -->  00:06:00.800
So looking at varTwo, that's defined
in the timesTwo method for scopeCheck.
116

116

00:06:00.800  -->  00:06:04.830
So that includes the for loop, and varTwo
is also in scope with that as well as you
117

117

00:06:04.830  -->  00:06:09.280
can see there, cuz it's defined above, and
it'll work within the next set of blocks,
118

118

00:06:09.280  -->  00:06:11.200
the enclosing blocks, if you will.
119

119

00:06:11.200  -->  00:06:14.640
varThree, which is was field in our
inner class, which is the inner class
120

120

00:06:14.640  -->  00:06:18.290
to ScopeCheck That's in scope
anywhere within the inner class, and
121

121

00:06:18.290  -->  00:06:20.340
we've got it printed in
the constructor as you can see.
122

122

00:06:20.340  -->  00:06:23.780
Val3 there, and also multiplied
in the times two method as well,
123

123

00:06:23.780  -->  00:06:24.510
down here as well.
124

124

00:06:24.510  -->  00:06:27.070
So that's [INAUDIBLE] those two places.
125

125

00:06:27.070  -->  00:06:29.790
And finally, coming back to main,
var4, the scope for
126

126

00:06:29.790  -->  00:06:33.260
that's anywhere inside the main class and
the main method,
127

127

00:06:33.260  -->  00:06:35.970
because it's a local variable for
the main method.
128

128

00:06:35.970  -->  00:06:39.830
So it's worth noting here that
at no time did any of our other
129

129

00:06:39.830  -->  00:06:42.620
Private val variables
shadow the one in main.
130

130

00:06:42.620  -->  00:06:44.390
So that's a different class essentially.
131

131

00:06:44.390  -->  00:06:48.450
So a variable can only shadow one
with the same name if it's declared
132

132

00:06:48.450  -->  00:06:50.010
in an enclosed block.
133

133

00:06:50.010  -->  00:06:52.760
So that brings us to the next topic,
which is visibility.
134

134

00:06:52.760  -->  00:06:57.800
So in Java, an object's visibility is
governed by the axis modifiers, and
135

135

00:06:57.800  -->  00:06:59.500
we'll be discussing
those in detail shortly.
136

136

00:06:59.500  -->  00:07:03.940
But the thing to point out is that
visibility is connected to scope, and
137

137

00:07:03.940  -->  00:07:06.760
we need to look at that aspect of
it first before covering the axis
138

138

00:07:06.760  -->  00:07:10.370
modifiers themselves, and
how they actually relate to axis control.
139

139

00:07:10.370  -->  00:07:15.000
So getting back to our scope check
If we look at the inner class
140

140

00:07:15.000  -->  00:07:19.430
down at the bottom, starting at line 25,
we've printed out the value 1 variable
141

141

00:07:19.430  -->  00:07:22.770
despite the fact that it was
the clearest private in the inner class.
142

142

00:07:22.770  -->  00:07:26.500
And the inner class has access to
all the inner class variables Or
143

143

00:07:26.500  -->  00:07:28.530
fields of its containing class.
144

144

00:07:28.530  -->  00:07:32.490
So not only is varOne in scope within
the inner class it's also visible.
145

145

00:07:32.490  -->  00:07:34.410
So the same is true the other way around.
146

146

00:07:34.410  -->  00:07:38.130
So the containing class,
you can also access all the methods and
147

147

00:07:38.130  -->  00:07:42.250
fields of a contained class even
if they're marked as private.
148

148

00:07:42.250  -->  00:07:43.150
So we can actually check that.
149

149

00:07:43.150  -->  00:07:45.820
But what we can do is create
a method in scope check
150

150

00:07:45.820  -->  00:07:49.390
to instantiate its inner class and
print the varThree.
151

151

00:07:49.390  -->  00:07:50.250
Variable.
152

152

00:07:50.250  -->  00:07:54.180
So I'm gonna go in here making sure
I'm actually within scope check,
153

153

00:07:54.180  -->  00:07:56.240
I'm not in the inner class at all, and
154

154

00:07:56.240  -->  00:08:00.700
I'm gonna do, create a method
called public void useInner.
155

155

00:08:02.330  -->  00:08:05.220
Within there I'm gonna type InnerClass,
noting how IntelliJ can see that.
156

156

00:08:05.220  -->  00:08:09.380
InnerClass InnerClass
equals new InnerClass.
157

157

00:08:10.420  -->  00:08:13.410
I can do system [INAUDIBLE]
print var three
158

158

00:08:16.220  -->  00:08:23.790
from outer class plus
inner class.var three.
159

159

00:08:23.790  -->  00:08:27.450
So now we've created the news inner,
what we want to do is go back to the main
160

160

00:08:27.450  -->  00:08:30.700
method and actually call that
method that used inner method.
161

161

00:08:30.700  -->  00:08:33.690
Up here, below the various print outs.
162

162

00:08:33.690  -->  00:08:37.590
I want to actually put scope instance,
dot, using R.
163

163

00:08:37.590  -->  00:08:38.850
Just touch and make sure that works.
164

164

00:08:38.850  -->  00:08:39.420
Going to run that.
165

165

00:08:43.290  -->  00:08:46.510
Far three from error class three's, so you
can see it's actually working fine there.
166

166

00:08:46.510  -->  00:08:51.460
But, now if I actually go back to scope
check, I can change this to a private.
167

167

00:08:53.780  -->  00:08:58.040
Run it again, and the code still works.
168

168

00:08:58.040  -->  00:09:03.650
So notice that the scope of our var
3 hasn't extended to the outer class.
169

169

00:09:03.650  -->  00:09:07.080
So we actually had to qualify
its name with the class instance
170

170

00:09:07.080  -->  00:09:07.920
in order to print it out.
171

171

00:09:07.920  -->  00:09:09.730
So, in a class.
172

172

00:09:09.730  -->  00:09:11.570
As you can see there.
173

173

00:09:11.570  -->  00:09:16.180
But the visibility does extend
into the outer class, but
174

174

00:09:16.180  -->  00:09:20.780
with that said the variable itself can't
be accessed with any class external
175

175

00:09:20.780  -->  00:09:25.540
to scope check and we can actually check
that Ourselves by going back to main and
176

176

00:09:25.540  -->  00:09:27.670
seeing if we can access it.
177

177

00:09:27.670  -->  00:09:29.690
So I'm going to comb out some
of these old lines for now.
178

178

00:09:33.250  -->  00:09:39.720
Okay so after that then, if we actually
set up here top scope, check.interclass.
179

179

00:09:41.350  -->  00:09:46.270
In a class equals scope
instance button new, in a class
180

180

00:09:47.670  -->  00:09:56.510
and try and print out var three
is not accessible here in
181

181

00:09:59.510  -->  00:10:04.360
a class dot noticing how IntelliJ
can't actually find the variable.
182

182

00:10:04.360  -->  00:10:06.230
Now the reason we can't do that,
we can't run it,
183

183

00:10:06.230  -->  00:10:09.920
we actually get an error, is because
var three's got private access and
184

184

00:10:09.920  -->  00:10:15.690
therefore has no visibility outside its
class or a containing class of its class.
185

185

00:10:15.690  -->  00:10:19.110
So in other words, from ScopeCheck or
ScopeCheck.InterClass.
186

186

00:10:19.110  -->  00:10:22.740
But if we went back and actually changed
this, changed that so it was a public.
187

187

00:10:25.470  -->  00:10:28.780
Notice that the arrow disappeared from
the, or the red disappeared from under
188

188

00:10:28.780  -->  00:10:33.730
main.java and the error actually goes away
because we've now given visibility for
189

189

00:10:33.730  -->  00:10:37.220
that variable by to any other class.
190

190

00:10:37.220  -->  00:10:38.620
So I'm just gonna undo that change.
191

191

00:10:39.770  -->  00:10:41.600
Let's go back to a private again.
192

192

00:10:41.600  -->  00:10:45.900
So this concept now is moving away from
scope and into visibility and access.
193

193

00:10:45.900  -->  00:10:49.770
But varOne and varThree's
visibility within the scope check
194

194

00:10:49.770  -->  00:10:52.580
is related to the scope of the variables,
and
195

195

00:10:52.580  -->  00:10:56.260
I think it's important to discuss that
before we move on to access modifiers
196

196

00:10:56.260  -->  00:10:59.690
Sort of properly, in particular,
the fact that both var one and
197

197

00:10:59.690  -->  00:11:02.740
var three are declared private,
as you can see on the screen there.
198

198

00:11:02.740  -->  00:11:04.140
Private on line eight, and
199

199

00:11:04.140  -->  00:11:08.710
also on line 31, but both can be
accessed from both the outer and inner.
200

200

00:11:08.710  -->  00:11:11.690
Classes can actually be surprising
when you're starting Java.
201

201

00:11:11.690  -->  00:11:16.010
So finally when we look at inheritance, we
often actually have a sub class override
202

202

00:11:16.010  -->  00:11:20.470
a method from the superclass, in other
words the class that it was extending.
203

203

00:11:20.470  -->  00:11:25.110
So the mechanism for this is very similar
into variable scope that we've discussed
204

204

00:11:25.110  -->  00:11:28.390
so Java will look for a method in
that case in the current class.
205

205

00:11:28.390  -->  00:11:30.780
Can use that if it finds it,
otherwise it's gonna look for
206

206

00:11:30.780  -->  00:11:32.500
it in the immediate super class and so
207

207

00:11:32.500  -->  00:11:37.300
on up the chain until it finds a class
that actually has the method but
208

208

00:11:37.300  -->  00:11:41.150
with that said it's not actually correct
to say the overriding method shatters
209

209

00:11:41.150  -->  00:11:46.010
the one in the superclass, override is
actually the correct term here not shadow.
210

210

00:11:46.010  -->  00:11:49.390
If though the method was static then
it can be shadow dot overridden but for
211

211

00:11:49.390  -->  00:11:51.010
now don't worry about that.
212

212

00:11:51.010  -->  00:11:53.660
Until we get to the lecture
on the static keyword.
213

213

00:11:53.660  -->  00:11:55.610
Because I want to talk
about that separately.
214

214

00:11:55.610  -->  00:11:56.880
So time is ticking on.
215

215

00:11:56.880  -->  00:11:59.910
I'm going to actually leave
the challenge to the next video.
216

216

00:11:59.910  -->  00:12:03.140
So the next video, we'll go through
a challenge of the various things that
217

217

00:12:03.140  -->  00:12:05.410
we've learnt in the last,
in this video and the previous one.
218

218

00:12:05.410  -->  00:12:06.710
So I'll see you in the next video.
