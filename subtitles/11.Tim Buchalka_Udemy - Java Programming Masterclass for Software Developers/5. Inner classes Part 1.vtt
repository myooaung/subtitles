WEBVTT
1
1

00:00:05.180  -->  00:00:09.120
So it's now time to talk about inner
classes because the thing is in Java,
2

2

00:00:09.120  -->  00:00:12.510
it's actually possible to nest
a class inside another class.
3

3

00:00:12.510  -->  00:00:16.260
So what I'm gonna do is start by outlining
the four types of nested classes, and
4

4

00:00:16.260  -->  00:00:18.280
then we'll go through some examples.
5

5

00:00:18.280  -->  00:00:20.860
So the four types of nested
classes that you can use
6

6

00:00:20.860  -->  00:00:22.720
in Java are static nested classes.
7

7

00:00:22.720  -->  00:00:27.790
We could use a nonstatic nested class and
we call that an inner class.
8

8

00:00:27.790  -->  00:00:31.830
We use a local class, now that's an inner
class that's defined inside of a scope
9

9

00:00:31.830  -->  00:00:33.550
block which is usually a method and
10

10

00:00:33.550  -->  00:00:37.020
also an anonymous class which is
a nested class without a class name.
11

11

00:00:37.020  -->  00:00:41.700
Now, the static nested class is mainly
used to associate a class with its
12

12

00:00:41.700  -->  00:00:42.790
outer class.
13

13

00:00:42.790  -->  00:00:46.890
So in terms of behavior, you'd think of it
as being identical to a top level class,
14

14

00:00:46.890  -->  00:00:50.530
but the difference is that it's packaged
in its outer class rather than in
15

15

00:00:50.530  -->  00:00:51.260
the package.
16

16

00:00:51.260  -->  00:00:55.130
So that really means that it cannot
access the nonstatic methods or
17

17

00:00:55.130  -->  00:00:59.650
members of its outer class without first
creating an instance of that class.
18

18

00:00:59.650  -->  00:01:02.020
So I know that sounds like a mouthful.
19

19

00:01:02.020  -->  00:01:05.670
But I think what we'll do is, we'll
start with a nonstatic nested class or
20

20

00:01:05.670  -->  00:01:08.090
the inner class,
because these are quite useful.
21

21

00:01:08.090  -->  00:01:12.260
And the reason that they're useful is when
it doesn't make sense to refer to a class
22

22

00:01:12.260  -->  00:01:13.590
without its outer class.
23

23

00:01:13.590  -->  00:01:17.100
So the example is if we're
actually modeling an engine.
24

24

00:01:17.100  -->  00:01:19.970
We might actually have a gearbox class and
a gear class.
25

25

00:01:19.970  -->  00:01:20.720
So let's go a head and
26

26

00:01:20.720  -->  00:01:23.040
actually create that to see how
this actually works in practice.
27

27

00:01:23.040  -->  00:01:26.630
So I'm going to go and create a new class.
28

28

00:01:27.860  -->  00:01:29.360
Gonna call the first one Gearbox.
29

29

00:01:32.420  -->  00:01:34.110
And we're gonna add a few
things to the Gearbox.
30

30

00:01:34.110  -->  00:01:35.560
We're going to have an array list for
31

31

00:01:35.560  -->  00:01:38.860
the gears, number of gears and
also the gear number.
32

32

00:01:38.860  -->  00:01:40.620
So we'll create those fields.
33

33

00:01:40.620  -->  00:01:45.040
Private ArrayList <Gear>.
34

34

00:01:45.040  -->  00:01:46.420
We haven't created that class yet.
35

35

00:01:46.420  -->  00:01:52.910
We're going to do that gears
private int maxGears and
36

36

00:01:52.910  -->  00:01:57.330
private int gearNumber,
and we'll set that to 0.
37

37

00:01:57.330  -->  00:02:02.260
We'll create constructor, and the only
parameter is gonna be the maxGears,
38

38

00:02:02.260  -->  00:02:02.870
like so.
39

39

00:02:02.870  -->  00:02:05.870
And set that to maxGears to maxGears.
40

40

00:02:05.870  -->  00:02:13.050
And then we'll also do
a this.gears = new ArrayList.
41

41

00:02:13.050  -->  00:02:17.360
So we'll just initialize it.
42

42

00:02:17.360  -->  00:02:22.800
But we also wanna do gear neutral = new
43

43

00:02:22.800  -->  00:02:27.740
Gear (0.0.0) that's so.
44

44

00:02:27.740  -->  00:02:32.220
And I think what I did there is, I didn't
specify the right level of Java for
45

45

00:02:32.220  -->  00:02:34.150
some reason so I had to fix that.
46

46

00:02:34.150  -->  00:02:36.490
If you ever do get that problem
just right-click this and
47

47

00:02:36.490  -->  00:02:37.570
go to open bunch setting.
48

48

00:02:37.570  -->  00:02:42.380
We're gonna make sure that we've
got project set to right version.
49

49

00:02:42.380  -->  00:02:43.840
So we'll change that
to version that eight.
50

50

00:02:43.840  -->  00:02:45.730
You can see Diamonds we're
introduced in version seven.
51

51

00:02:45.730  -->  00:02:48.550
I have actually said that in an earlier
video to make sure you're always using
52

52

00:02:48.550  -->  00:02:49.390
version eight there.
53

53

00:02:49.390  -->  00:02:52.800
After you select that,
that should fix that error.
54

54

00:02:52.800  -->  00:02:55.490
And what we need to do is we
need to add the Gear class,
55

55

00:02:55.490  -->  00:02:57.110
which we'll actually fix at shortly.
56

56

00:02:57.110  -->  00:03:00.710
So we're creating a new Gear
as you can see there, and
57

57

00:03:00.710  -->  00:03:05.460
we're going to add that to
the array this.gears.add(neutral).
58

58

00:03:05.460  -->  00:03:10.370
So that's the base class, and what we'll
actually do now is create an inner class.
59

59

00:03:10.370  -->  00:03:12.810
This is the inner class which is
sort of a class within a class.
60

60

00:03:12.810  -->  00:03:16.400
So to do that, making sure that you're
actually in the public class definition.
61

61

00:03:16.400  -->  00:03:20.310
So we're in the final bracket in between
any method, at the end of any method but
62

62

00:03:20.310  -->  00:03:23.130
before the closing brace that
where we can start typing.
63

63

00:03:23.130  -->  00:03:28.350
So we can type public class Gear,
just as you would normally do it and then
64

64

00:03:28.350  -->  00:03:34.270
we can actually add some private fields
just as you would normally create a class.
65

65

00:03:34.270  -->  00:03:38.320
So int gear number, your number and
66

66

00:03:38.320  -->  00:03:41.990
the same private double ratio.
67

67

00:03:41.990  -->  00:03:44.930
We can create a constructor and you can
see we'll be using a constructor in
68

68

00:03:44.930  -->  00:03:46.790
the gearbox constructor
to create a new gear.
69

69

00:03:46.790  -->  00:03:50.520
So we'll do that, and
the constructor will have two parameters,
70

70

00:03:50.520  -->  00:03:52.660
the gear number and the ratio like so.
71

71

00:03:52.660  -->  00:03:56.230
That should fix that other
error on the screen there now.
72

72

00:03:56.230  -->  00:03:58.990
And we'll just create a public method for
73

73

00:03:58.990  -->  00:04:03.120
drive speed which will basically accept
the number of revs as a parameter and
74

74

00:04:03.120  -->  00:04:05.030
multiply that by the ratio
to get the drive speed.
75

75

00:04:05.030  -->  00:04:08.980
So to do that, so we normally do,
we'll just actually create a method.
76

76

00:04:08.980  -->  00:04:17.600
So public double driveSpeed int revs.
77

77

00:04:17.600  -->  00:04:23.190
We could return revs multiplied by ratio.
78

78

00:04:23.190  -->  00:04:26.530
So there's a step list like a definition
for when you're in a class.
79

79

00:04:26.530  -->  00:04:30.100
So it doesn't actually make sense to
refer to a gear in this scenario,
80

80

00:04:30.100  -->  00:04:32.110
except when we're talking
about a gear box.
81

81

00:04:32.110  -->  00:04:33.560
So that's why we've modeled it like this.
82

82

00:04:33.560  -->  00:04:38.460
So the gear isn't something that
sort of is useful in its own right.
83

83

00:04:38.460  -->  00:04:40.550
It's coupled with a gearbox so
it makes it useful.
84

84

00:04:40.550  -->  00:04:43.100
So that's the idea of
using an inner class.
85

85

00:04:43.100  -->  00:04:46.360
As I said, when it doesn't make sense
to refer to something except within
86

86

00:04:46.360  -->  00:04:47.000
the context.
87

87

00:04:47.000  -->  00:04:50.850
In this case, it doesn't make sense to
talk about gears unless it's within
88

88

00:04:50.850  -->  00:04:52.610
the context of a gearbox.
89

89

00:04:52.610  -->  00:04:56.130
This one we borrow the gears using
an inner class of the gear box class.
90

90

00:04:56.130  -->  00:04:59.570
Now instances of the gear
class have got access to
91

91

00:04:59.570  -->  00:05:04.000
all the methods of fields of the outer
gearbox class, even those mark as private.
92

92

00:05:04.000  -->  00:05:07.340
So notice that the use of this in the
inner class refers to the inner class and
93

93

00:05:07.340  -->  00:05:08.100
not the outer one.
94

94

00:05:08.100  -->  00:05:09.970
So in other words this.gearNumber,
95

95

00:05:09.970  -->  00:05:13.860
the this is actually talking about this
actual class here, the public class.
96

96

00:05:13.860  -->  00:05:18.820
So the inner class in other words,
it's not referring to gearNumber.
97

97

00:05:18.820  -->  00:05:21.740
That's in this one here,
cuz that's actually in a different class.
98

98

00:05:21.740  -->  00:05:24.950
That's in the top level class,
the gearbox class.
99

99

00:05:24.950  -->  00:05:28.670
I keep that in mind that when you're using
this particularly with inner classes,
100

100

00:05:28.670  -->  00:05:31.770
that you're actually dealing with the
class that you're currently in this case
101

101

00:05:31.770  -->  00:05:33.660
we're talking about the gear class.
102

102

00:05:33.660  -->  00:05:35.890
And that probably brings up
an interesting point here.
103

103

00:05:35.890  -->  00:05:38.790
But they're using the same variable
name for two different things like this,
104

104

00:05:38.790  -->  00:05:39.370
is confusing.
105

105

00:05:39.370  -->  00:05:43.550
And of course, the reason why it's
confusing is that inside the gear,
106

106

00:05:43.550  -->  00:05:46.200
both this stock gear number and
gear number,
107

107

00:05:46.200  -->  00:05:49.940
refer to the gear number of the gear and
not the gearbox itself.
108

108

00:05:49.940  -->  00:05:54.290
So if you want refer to gearbox's gear
number from an instance of the gear class,
109

109

00:05:54.290  -->  00:05:57.830
you have to use gearbox.this.gearNumber.
110

110

00:05:57.830  -->  00:05:59.510
So if a word or variable or
111

111

00:05:59.510  -->  00:06:03.200
parameter name is the same one as
the one that's in the outer class,
112

112

00:06:03.200  -->  00:06:07.340
it's said to shadow the declaration of
the outer class or in the outer class.
113

113

00:06:07.340  -->  00:06:10.060
So here gearNumber in the gear class.
114

114

00:06:10.060  -->  00:06:13.080
This one here.
We can actually say that that is shadowing
115

115

00:06:13.080  -->  00:06:17.060
gearNumber in the gearbox
class which is that one there.
116

116

00:06:17.060  -->  00:06:18.110
So that's not a good thing.
117

117

00:06:18.110  -->  00:06:22.530
So we're gonna rename gearbox variable
to current gear to avoid confusion, and
118

118

00:06:22.530  -->  00:06:25.680
that's what I certainly recommend because
you're gonna get into all sorts of
119

119

00:06:25.680  -->  00:06:26.980
problems otherwise.
120

120

00:06:26.980  -->  00:06:30.510
So what we're gonna do is we're just
gonna right-click that Refactor > Rename,
121

121

00:06:30.510  -->  00:06:32.490
we'll actually change
that to current gear.
122

122

00:06:35.040  -->  00:06:38.160
CurrentGear.
123

123

00:06:38.160  -->  00:06:41.060
The center, that will actually make
a lot more sense to do it that way to
124

124

00:06:41.060  -->  00:06:43.670
avoid any confusion because obviously,
125

125

00:06:43.670  -->  00:06:46.400
you wanna make things as easy as
possible when you're developing.
126

126

00:06:46.400  -->  00:06:50.550
And anything you can do to
reduce this sort of confusion,
127

127

00:06:50.550  -->  00:06:52.920
particularly when you start
dealing with inner classes.
128

128

00:06:52.920  -->  00:06:54.140
It is very important to do that.
129

129

00:06:54.140  -->  00:06:55.000
So make sure you do keep that in mind.
130

130

00:06:55.000  -->  00:06:57.700
Now the gear class itself
is a member gearbox and
131

131

00:06:57.700  -->  00:07:00.370
it must be created within instance of it.
132

132

00:07:00.370  -->  00:07:03.400
And probably the best way to show you what
I mean by that is actually to show you
133

133

00:07:03.400  -->  00:07:03.940
the examples.
134

134

00:07:03.940  -->  00:07:07.190
So we'll go back to our main class and
create that so
135

135

00:07:07.190  -->  00:07:08.410
you can understand how that works.
136

136

00:07:08.410  -->  00:07:11.250
So go back to main.
We're gonna write some code here, so
137

137

00:07:11.250  -->  00:07:14.300
we're going to start while typing gearbox.
138

138

00:07:14.300  -->  00:07:21.330
So Gearbox we'll say,
mcLaren it's a nice car, = new Gearbox(6).
139

139

00:07:21.330  -->  00:07:23.550
The six gears, in other words.
140

140

00:07:23.550  -->  00:07:27.400
Now, to actually create a gear class,
141

141

00:07:27.400  -->  00:07:31.730
we have to use Gearbox box.gear, like so.
142

142

00:07:31.730  -->  00:07:38.310
First = mcLaren.new Gear 1,
143

143

00:07:38.310  -->  00:07:42.730
the ratio 12.3.
144

144

00:07:42.730  -->  00:07:49.300
Then we can do something like
System.out.println(first.driveSpeed and
145

145

00:07:49.300  -->  00:07:51.830
we can set that to say, 1000 revs like so.
146

146

00:07:51.830  -->  00:07:54.730
So it's important to
understand the declaration and
147

147

00:07:54.730  -->  00:07:58.670
because gear is an inner class to gearbox,
we need to specify like that,
148

148

00:07:58.670  -->  00:08:02.050
we need to specify the outer
class Gearbox., and then Gear.
149

149

00:08:02.050  -->  00:08:06.630
And then actually also here, you notice
that line there, we actually used
150

150

00:08:06.630  -->  00:08:11.390
the gear box instance that we created and
we did a .new there for the gear.
151

151

00:08:11.390  -->  00:08:14.660
So slightly different syntax when you're
creating an inner class like that when you
152

152

00:08:14.660  -->  00:08:16.290
probably seen in code before.
153

153

00:08:16.290  -->  00:08:18.080
So keep that in mind cuz
it's very important.
154

154

00:08:18.080  -->  00:08:21.210
You'll actually get an error if
you try to create a gear object
155

155

00:08:21.210  -->  00:08:24.150
without actually having an instance
of gearbox to created from.
156

156

00:08:24.150  -->  00:08:26.280
And just to show you what I mean by that
let's create a few more examples and
157

157

00:08:26.280  -->  00:08:27.670
you can sort of see the weird
areas that you get.
158

158

00:08:27.670  -->  00:08:32.410
So we've got the first one there,
mcLaren = new Gear.
159

159

00:08:32.410  -->  00:08:36.810
That one worked fine,
but if we tar topping
160

160

00:08:36.810  -->  00:08:41.600
Gearbox.Gear second = new Gearbox.Gear.
161

161

00:08:41.600  -->  00:08:45.780
Notice the syntax is different 2, 15.4.
162

162

00:08:45.780  -->  00:08:47.740
We actually get this
weird little error here.
163

163

00:08:47.740  -->  00:08:52.210
And the error is, conduct in the bracket
.Gearbox is not an enclosing class.
164

164

00:08:52.210  -->  00:08:53.030
So you can't actually do it that way.
165

165

00:08:53.030  -->  00:08:57.830
You basically need to use the .new
back referencing the outer class
166

166

00:08:57.830  -->  00:09:00.790
versus what you saw in the example above.
167

167

00:09:00.790  -->  00:09:04.640
We created the outer class which was
gearbox, created new instances of that and
168

168

00:09:04.640  -->  00:09:06.590
then we used the .new on
the end to get that to work.
169

169

00:09:06.590  -->  00:09:09.150
So that doesn't work like that,
but you also can't do this.
170

170

00:09:09.150  -->  00:09:14.460
You can't do Gearbox.Gear third
171

171

00:09:14.460  -->  00:09:21.090
= new mcLaren.Gear(3, 17.8).
172

172

00:09:21.090  -->  00:09:23.100
That also doesn't work, so
173

173

00:09:23.100  -->  00:09:26.570
you get an error that's you can't resolve
the simple gear and that's because again,
174

174

00:09:26.570  -->  00:09:30.270
we need to use the .new to create
a new instance of it like that.
175

175

00:09:30.270  -->  00:09:33.920
So keep that in mind that you
probably would think that
176

176

00:09:33.920  -->  00:09:37.360
with particularly with the third gear,
that it would actually work like that.
177

177

00:09:37.360  -->  00:09:40.070
But as you can see,
any attempt to create the third gear might
178

178

00:09:40.070  -->  00:09:43.260
look like how you'd expect it to look like
but it actually doesn't work as well.
179

179

00:09:43.260  -->  00:09:45.930
And again, just confirmation that
in the case of the second gear.
180

180

00:09:45.930  -->  00:09:49.670
It actually files with that error which is
always gearbox is not an enclosing class
181

181

00:09:49.670  -->  00:09:51.650
which is slightly confusing,
so if you look at that,
182

182

00:09:51.650  -->  00:09:53.680
you're probably thinking
why is it doing that?
183

183

00:09:53.680  -->  00:09:56.650
And that's because gearbox does
seem to be an enclosing class,
184

184

00:09:56.650  -->  00:09:59.770
in as much as the outer class for
gear for that call new to work.
185

185

00:09:59.770  -->  00:10:02.200
Gear would have to be
a static nested class.
186

186

00:10:02.200  -->  00:10:04.300
So it's just really a matter
of getting used to the syntax.
187

187

00:10:04.300  -->  00:10:09.120
The bottom line here is that
this is the correct way to
188

188

00:10:09.120  -->  00:10:12.000
actually create the outer class
which you would normally do anyway,
189

189

00:10:12.000  -->  00:10:15.290
there's nothing new about that,
but in terms of the inter class,
190

190

00:10:15.290  -->  00:10:20.220
you reference the outer class first dot
then whatever name the inner class is.
191

191

00:10:20.220  -->  00:10:21.490
And then you when you that's for
192

192

00:10:21.490  -->  00:10:25.110
declaration purposes and when you're
actually initializing it the name of
193

193

00:10:25.110  -->  00:10:28.450
the object you've created .new then
whatever the name of the unit class is.
194

194

00:10:28.450  -->  00:10:30.380
And then the normal parameters
you would have in a constructor.
195

195

00:10:30.380  -->  00:10:33.200
And so for this just run that to
see that it's actually working.
196

196

00:10:36.980  -->  00:10:39.180
You can see that I've actually
got some errors there.
197

197

00:10:39.180  -->  00:10:42.900
I'm not good at picking up typos
when I'm actually recording videos.
198

198

00:10:48.970  -->  00:10:52.400
Now if we actually run it, now that I've
actually fixed that other little typo,
199

199

00:10:52.400  -->  00:10:56.070
we should actually find that it works and
it comes up as you would expect it to.
200

200

00:10:56.070  -->  00:10:59.300
So bottom line is that the correct
syntax might be a bit clunky, but
201

201

00:10:59.300  -->  00:11:00.230
that's just how it's done.
202

202

00:11:00.230  -->  00:11:03.320
That's how the designers of
Java have implemented this, and
203

203

00:11:03.320  -->  00:11:04.710
we obviously have to work with that.
204

204

00:11:04.710  -->  00:11:07.810
Another thing to keep in mind is that
often though the inner class is gonna be
205

205

00:11:07.810  -->  00:11:08.790
private anyway.
206

206

00:11:08.790  -->  00:11:11.210
So in other words instances will
only be created by the outer class.
207

207

00:11:11.210  -->  00:11:14.380
So in other words you wouldn't normally,
if you got a gearbox here
208

208

00:11:14.380  -->  00:11:18.300
it's the outer class, the inner class is
probably in this case geared is probably
209

209

00:11:18.300  -->  00:11:22.110
something you don't want people don't
normally directly access anyway.
210

210

00:11:22.110  -->  00:11:25.950
So in other words, the instance is
gonna be created by the other class.
211

211

00:11:25.950  -->  00:11:29.780
So making this class gear
private makes sense here
212

212

00:11:29.780  -->  00:11:33.360
because we're not actually interested in
the individual gear objects we're driving.
213

213

00:11:33.360  -->  00:11:34.690
We wanna change the gear, but
214

214

00:11:34.690  -->  00:11:38.010
we do that by interacting with the gearbox
not with the individual gears.
215

215

00:11:38.010  -->  00:11:41.730
So in other words, your public
interface that you're exposing to your
216

216

00:11:41.730  -->  00:11:45.640
program here would be gearbox,
you wouldn't be exposing gear directly,
217

217

00:11:45.640  -->  00:11:48.990
you'd be exposing the fact that
you can actually change gears,
218

218

00:11:48.990  -->  00:11:52.940
you won't be interacting with
the gears itself, if that makes sense.
219

219

00:11:52.940  -->  00:11:55.400
So what we could actually do is
actually make some changes to that, so
220

220

00:11:55.400  -->  00:11:56.730
that's how it would actually work.
221

221

00:11:56.730  -->  00:12:00.460
And you're sort of going back
to the gearbox class anyway.
222

222

00:12:00.460  -->  00:12:01.860
Size that down.
223

223

00:12:01.860  -->  00:12:03.570
That we didn't actually
create a new gear anyway.
224

224

00:12:03.570  -->  00:12:07.970
And in the constructor we add a new
gear for neutral anyway by default.
225

225

00:12:07.970  -->  00:12:09.420
And that's how we could access that.
226

226

00:12:09.420  -->  00:12:11.340
So if we actually change this now and
change this so
227

227

00:12:11.340  -->  00:12:12.680
this is actually a private class.
228

228

00:12:12.680  -->  00:12:15.640
The inter class is now private,
so you can see there.
229

229

00:12:15.640  -->  00:12:17.040
We've still got a constructor and
the ratio,
230

230

00:12:17.040  -->  00:12:18.560
but we don't need to make
any other changes to it.
231

231

00:12:18.560  -->  00:12:21.640
But that will mean if you come back to
here, we actually get errors now and
232

232

00:12:21.640  -->  00:12:24.260
that's because we can't access
that directly anymore, but
233

233

00:12:24.260  -->  00:12:27.170
we'll need to make some changes to
the gearbox to actually do that.
234

234

00:12:27.170  -->  00:12:30.350
So what we're gonna do is
actually add a few functions.
235

235

00:12:30.350  -->  00:12:33.430
We're gonna add a function for
operating the clutch.
236

236

00:12:33.430  -->  00:12:36.880
We're gonna add the add a method
rather to actually add gears, so
237

237

00:12:36.880  -->  00:12:40.830
we can actually add gears to our gearbox
object which will be adding gears to
238

238

00:12:40.830  -->  00:12:42.540
the array list automatically.
239

239

00:12:42.540  -->  00:12:46.930
And to show you how to change gear as
well, all done from the outer class,
240

240

00:12:46.930  -->  00:12:48.580
in this case gearbox.
241

241

00:12:48.580  -->  00:12:51.060
So this is going to be
above the declaration for
242

242

00:12:51.060  -->  00:12:58.390
the private class gear now, so
we'll start off by operating clutch public
243

243

00:12:58.390  -->  00:13:07.550
void operateClutch(boolean_in),
in as you can see there.
244

244

00:13:07.550  -->  00:13:09.530
And I haven't created that variable yet,
but we can do that shortly.
245

245

00:13:09.530  -->  00:13:15.180
So ClutchIsIn = in,
whatever the status of that is.
246

246

00:13:15.180  -->  00:13:16.870
I will create a Boolean in here.
247

247

00:13:16.870  -->  00:13:21.550
So it'd be private boolean
clutchIsIn like so.
248

248

00:13:21.550  -->  00:13:24.510
So that's the ability to
operate the clutch as a method,
249

249

00:13:24.510  -->  00:13:29.760
we'll also add the other method which is
the ability to add gears to our gearbox,
250

250

00:13:29.760  -->  00:13:33.330
add public, void, add gear and
we'll pass a number,
251

251

00:13:33.330  -->  00:13:37.600
that should be the gear number and
the ratio, which you saw us using before.
252

252

00:13:37.600  -->  00:13:40.710
Now we'll just do some
basic checking here.
253

253

00:13:40.710  -->  00:13:45.040
We'll put if((number > 0 && (number <=
254

254

00:13:45.040  -->  00:13:51.040
maxGears) maxGears was
something we defined up above.
255

255

00:13:51.040  -->  00:13:52.780
MaxGears, if that's the case,
256

256

00:13:52.780  -->  00:13:59.720
this.gears.add creating a new gear class
which you remember is now private.
257

257

00:13:59.720  -->  00:14:03.340
So only the outer class, the gearbox
class can directly talk with it now, and
258

258

00:14:03.340  -->  00:14:05.260
we need a gear number and also the ratio.
259

259

00:14:05.260  -->  00:14:09.520
So that's the add gear method and then
the other thing we wanna do is we want
260

260

00:14:09.520  -->  00:14:13.800
the ability to change the gear as well,
and to do that we use a change gear.
261

261

00:14:13.800  -->  00:14:19.010
We'll create a change gear method,
262

262

00:14:19.010  -->  00:14:24.730
so public void change gear int newGear.
263

263

00:14:24.730  -->  00:14:28.990
We wanna make sure that it's valid.
264

264

00:14:28.990  -->  00:14:33.750
So we're gonna put if newGear >= 0,
265

265

00:14:33.750  -->  00:14:42.430
remember it can be 0 if it's
neutral & newGear <this.gear.size.
266

266

00:14:42.430  -->  00:14:45.530
So we are just validating that we
actually have got a gear of that number.
267

267

00:14:45.530  -->  00:14:46.770
That's the case.
268

268

00:14:46.770  -->  00:14:49.400
And also check ClutchIsIn
assuming it's a manual.
269

269

00:14:49.400  -->  00:14:57.730
But if this .clutchIsIn, if all that is
true we can go this.currentGear = newGear.
270

270

00:14:59.520  -->  00:15:04.950
We can do something,
we can print just a message out to say,
271

271

00:15:04.950  -->  00:15:12.250
gear + newGear selected else, what we're
gonna do is put out a message Grind.
272

272

00:15:12.250  -->  00:15:13.760
[LAUGH] Which would basically mean that,
273

273

00:15:13.760  -->  00:15:15.810
that is a problem with you
trying to change the gears and
274

274

00:15:15.810  -->  00:15:18.940
you're getting that weird sound you get
from a menu when you're trying to do that.
275

275

00:15:18.940  -->  00:15:22.810
And we'll set this .current here to 0
cuz we weren't successful in actually
276

276

00:15:22.810  -->  00:15:25.930
sending the or
changing the gears essentially.
277

277

00:15:25.930  -->  00:15:26.710
And what we'll also do,
278

278

00:15:26.710  -->  00:15:30.860
is we'll actually add a wheel speed
method as well to determine the speed.
279

279

00:15:30.860  -->  00:15:34.360
So I'm gonna create one,
public double wheelSpeed.
280

280

00:15:36.380  -->  00:15:41.450
And the parameter will be revs,
if(clutchIsIn).
281

281

00:15:44.990  -->  00:15:48.220
Scream [LAUGH] like so,
and we'll return 0.0, so
282

282

00:15:48.220  -->  00:15:52.410
we're not returning any
calculation at this point in time.
283

283

00:15:52.410  -->  00:15:55.530
Otherwise, if the clutch is set in,
in other words the car can move,
284

284

00:15:55.530  -->  00:16:00.900
you're gonna return revs * gears.get
285

285

00:16:00.900  -->  00:16:07.010
(currentGear).getRatio.
286

286

00:16:07.010  -->  00:16:11.570
And what we haven't done, is we
haven't actually exposed the getRatio.
287

287

00:16:11.570  -->  00:16:14.710
So we need to do that,
that's a method of the inner class.
288

288

00:16:14.710  -->  00:16:17.990
Or we can just end this and just getter,
so we're gonna do a getter for
289

289

00:16:17.990  -->  00:16:21.110
our ratio like so, and
that should fix that other error up.
290

290

00:16:21.110  -->  00:16:24.670
So you could see how now,
we've written the gearBox class
291

291

00:16:24.670  -->  00:16:28.940
to perform all the functionality
it needs in the gear class itself.
292

292

00:16:28.940  -->  00:16:33.960
We're creating new instances of the gear
and saving it in our array list up here,
293

293

00:16:33.960  -->  00:16:37.360
but we're also using various functions
within the gear to get the ratio and for
294

294

00:16:37.360  -->  00:16:38.510
other sorts of calculations.
295

295

00:16:38.510  -->  00:16:40.450
In this case here,
you can see in the wheelSpeed,
296

296

00:16:40.450  -->  00:16:42.740
if the clutchIsIn obviously
we're not actually moving.
297

297

00:16:42.740  -->  00:16:44.100
There's gonna be a problem.
298

298

00:16:44.100  -->  00:16:46.080
[LAUGH] So we're screaming,
we're turning zero.
299

299

00:16:46.080  -->  00:16:49.840
Otherwise though, it's the revs multiplied
by the gear or the current gear.
300

300

00:16:49.840  -->  00:16:52.420
The current gear that we've actually
set in the changeGear method.
301

301

00:16:52.420  -->  00:16:56.650
And then we're using the dot ratio which
is actually called from the inner class
302

302

00:16:56.650  -->  00:16:57.310
itself.
303

303

00:16:57.310  -->  00:16:58.880
Now that's how you would
actually go about doing it.
304

304

00:16:58.880  -->  00:17:01.310
So what I'm gonna do,
this video is getting a bit long.
305

305

00:17:01.310  -->  00:17:04.670
I'm gonna stop here and in the next video,
I will come back and will actually
306

306

00:17:04.670  -->  00:17:08.870
put some of this code into the main method
and start seeing how this actually works.
307

307

00:17:08.870  -->  00:17:10.040
So I'll see you in the next video.
