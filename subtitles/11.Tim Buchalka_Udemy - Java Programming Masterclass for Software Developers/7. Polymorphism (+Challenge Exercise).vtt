WEBVTT
1
1

00:00:05.430  -->  00:00:08.470
So this is
the Polymorphism Challenge video,
2

2

00:00:08.470  -->  00:00:11.630
and we're continuing on
from the previous video.
3

3

00:00:11.630  -->  00:00:15.880
So, let's now talk about what we're
actually going to have included in this
4

4

00:00:15.880  -->  00:00:16.610
challenge.
5

5

00:00:16.610  -->  00:00:18.450
So I'm gonna type out what
we're proposing to do.
6

6

00:00:32.610  -->  00:00:34.690
Okay, so here is the challenge.
7

7

00:00:34.690  -->  00:00:37.610
So, we're gonna go back and
use the car analogy.
8

8

00:00:37.610  -->  00:00:40.970
We did that, of course,
in previous videos.
9

9

00:00:40.970  -->  00:00:43.500
So, create a basic class called Car.
10

10

00:00:43.500  -->  00:00:49.180
Now this is a generic class that
other classes are going to subclass.
11

11

00:00:49.180  -->  00:00:52.450
So, this base class should have a few
fields that would be appropriate for
12

12

00:00:52.450  -->  00:00:54.440
a generic car class.
13

13

00:00:54.440  -->  00:00:58.550
Engine, true or false, cylinders, as in
the number of cylinders in the engine,
14

14

00:00:58.550  -->  00:01:00.160
number of wheels, those types of things.
15

15

00:01:00.160  -->  00:01:02.920
And you can certainly come up with
some more, that's just three examples.
16

16

00:01:02.920  -->  00:01:05.480
The constructor should
accept two parameters.
17

17

00:01:05.480  -->  00:01:07.800
The parameters would be the number
of cylinders of the car and
18

18

00:01:07.800  -->  00:01:09.350
the name of the car.
19

19

00:01:09.350  -->  00:01:13.650
Then you should also initialize the other
parameters as well in that constructor.
20

20

00:01:13.650  -->  00:01:16.700
You'll also want to create
appropriate getters for
21

21

00:01:16.700  -->  00:01:19.470
those fields so
that they can be accessed elsewhere.
22

22

00:01:19.470  -->  00:01:24.030
And you need to create a few methods like,
startEngine, accelerate, and break.
23

23

00:01:24.030  -->  00:01:27.360
Putting a simple message to
output to the screen, just so
24

24

00:01:27.360  -->  00:01:32.220
you can confirm which class you are in,
and which method is being invoked.
25

25

00:01:32.220  -->  00:01:35.990
And show a message, as we've said,
for each of those in your base class.
26

26

00:01:35.990  -->  00:01:38.280
Now, after that,
create three subclasses for
27

27

00:01:38.280  -->  00:01:42.990
your favorite vehicles, and they're gonna
subclass the Car class, essentially.
28

28

00:01:42.990  -->  00:01:46.350
So, you then want to override
the appropriate methods that you
29

29

00:01:46.350  -->  00:01:49.540
created in the Car class to
demonstrate polymorphism,
30

30

00:01:49.540  -->  00:01:52.010
so you understand what that's doing and
how it works.
31

31

00:01:52.010  -->  00:01:54.740
And you'll also want to put
the same messages that you put
32

32

00:01:54.740  -->  00:01:57.310
in the base class in each
of those other classes, but
33

33

00:01:57.310  -->  00:02:01.130
make the message different, so
that you can see where it's being called.
34

34

00:02:01.130  -->  00:02:03.210
And, as I showed you in the last video,
35

35

00:02:03.210  -->  00:02:07.480
also put all classes in this one
Java file, just for this example.
36

36

00:02:07.480  -->  00:02:10.230
And that Java file will be the one that
we're reading in the main package, or
37

37

00:02:10.230  -->  00:02:11.730
the main Java file, I should say.
38

38

00:02:11.730  -->  00:02:13.930
All right, so
see if you can figure that out.
39

39

00:02:13.930  -->  00:02:17.080
Go away and
do your best to complete the challenge.
40

40

00:02:17.080  -->  00:02:21.180
And when you're ready to come back and
see what I've done, resume the video.
41

41

00:02:21.180  -->  00:02:23.620
So pause the video now, and
I'll see you when you come back.
42

42

00:02:26.210  -->  00:02:27.020
Okay, how did you go?
43

43

00:02:27.020  -->  00:02:28.820
Did you figure out the challenge?
44

44

00:02:28.820  -->  00:02:30.680
Let me show you my solution.
45

45

00:02:30.680  -->  00:02:34.230
So what I'm gonna do is start
off first with our Car class, so
46

46

00:02:34.230  -->  00:02:35.880
we had to create a base car class.
47

47

00:02:35.880  -->  00:02:40.160
So I'll just call it class Car, like so.
48

48

00:02:40.160  -->  00:02:41.610
We need to create a few fields.
49

49

00:02:41.610  -->  00:02:43.740
So I'll do private boolean engine.
50

50

00:02:43.740  -->  00:02:47.280
That's whether it actually
has got an engine.
51

51

00:02:47.280  -->  00:02:54.230
private int cylinders.
52

52

00:02:54.230  -->  00:03:00.260
We have a name, private String name.
53

53

00:03:00.260  -->  00:03:07.480
And lastly, we also want to set the number
of wheels, so private int wheels, like so.
54

54

00:03:07.480  -->  00:03:12.050
We need to create a constructor,
which should initialize the cylinders
55

55

00:03:12.050  -->  00:03:14.570
in the name,
which are passed to it as a parameter.
56

56

00:03:14.570  -->  00:03:17.420
And then to just set those other
ones to those values that we've got
57

57

00:03:17.420  -->  00:03:18.470
indicated below.
58

58

00:03:18.470  -->  00:03:22.980
Okay, so I'm gonna create a constructor,
and I'm going to use the two
59

59

00:03:22.980  -->  00:03:27.710
parameters which we talked about
were cylinders and also the name.
60

60

00:03:27.710  -->  00:03:28.850
They're the only two parameters.
61

61

00:03:28.850  -->  00:03:31.080
The other two, we're gonna set
the values manually, like so.
62

62

00:03:32.240  -->  00:03:35.060
And so it'll be this.wheels equals = 4.
63

63

00:03:35.060  -->  00:03:40.040
And this.engine, we're just gonna set
to true, in case it's all the cars that
64

64

00:03:40.040  -->  00:03:44.880
we're using, this Car class and
all the subclasses will be set to true.
65

65

00:03:44.880  -->  00:03:45.950
We need to create a getter.
66

66

00:03:45.950  -->  00:03:49.380
So let's create a getter for each of
those, in case we need to access them.
67

67

00:03:49.380  -->  00:03:52.950
Actually, we won't create one for
engines seeing as though it's a little bit
68

68

00:03:52.950  -->  00:03:55.390
meaningless because we've
actually got that set to true.
69

69

00:03:55.390  -->  00:03:59.070
And actually the same for wheels, because
wheels are set to 4 no matter what anyway.
70

70

00:03:59.070  -->  00:04:01.400
So we'll just leave those out and
do the other two.
71

71

00:04:01.400  -->  00:04:03.570
Next, we need to create
a few extra methods,
72

72

00:04:03.570  -->  00:04:05.590
simple methods that will
show some basic features.
73

73

00:04:05.590  -->  00:04:08.640
So we're gonna use startEngine,
accelerate, and brake, so
74

74

00:04:08.640  -->  00:04:10.320
I'm gonna create those methods.
75

75

00:04:10.320  -->  00:04:18.690
public, they're gonna return a String for
each, startEngine, no parameters.
76

76

00:04:18.690  -->  00:04:23.240
And we're just gonna put return, and what
I'm gonna do is just put the word car and
77

77

00:04:23.240  -->  00:04:25.090
a dash and a greater-than sign,
78

78

00:04:25.090  -->  00:04:29.810
just to signify that we're actually in
the Car class, and we'll put startEngine.
79

79

00:04:34.900  -->  00:04:41.350
Then likewise for the accelerate method,
80

80

00:04:41.350  -->  00:04:46.360
public String accelerate(),
81

81

00:04:46.360  -->  00:04:53.000
return Car -> accelerate(), like so.
82

82

00:04:53.000  -->  00:04:59.710
And lastly, we'll do the brake one,
83

83

00:04:59.710  -->  00:05:06.210
if I can type, public String brake,
84

84

00:05:06.210  -->  00:05:11.270
return Car -> break().
85

85

00:05:11.270  -->  00:05:14.530
So there's our basic class now,
pretty basic as you can see.
86

86

00:05:14.530  -->  00:05:18.050
So just confirming, we've set the fields
up, we've initialized the constructor,
87

87

00:05:18.050  -->  00:05:19.790
and we've set the other values.
88

88

00:05:19.790  -->  00:05:22.290
We've hard-coded wheels and
engine as well, and
89

89

00:05:22.290  -->  00:05:26.440
we've created appropriate getters,
and we've created our three methods.
90

90

00:05:26.440  -->  00:05:30.110
And we're also showing a message for
each of those classes, so that's good.
91

91

00:05:30.110  -->  00:05:33.700
So now what we need to do is create three
subclasses for your favorite vehicles,
92

92

00:05:33.700  -->  00:05:36.540
one for each vehicle,
then override those other methods, and
93

93

00:05:36.540  -->  00:05:37.820
put some prints in there.
94

94

00:05:37.820  -->  00:05:40.880
And then we just want to show
them working in the main method.
95

95

00:05:40.880  -->  00:05:42.490
So to do that, let's create one first.
96

96

00:05:42.490  -->  00:05:45.790
So, I'm gonna create a class for
Mitsubishi.
97

97

00:05:45.790  -->  00:05:53.630
So, class Mitsubishi extends Car, like so.
98

98

00:05:53.630  -->  00:05:55.860
And we're getting that error now,
and the error is,
99

99

00:05:55.860  -->  00:05:57.760
There is no default constructor available.
100

100

00:05:59.330  -->  00:06:00.050
And the reason for that,
101

101

00:06:00.050  -->  00:06:04.700
of course, is that we've actually created
a constructor up here with parameters.
102

102

00:06:04.700  -->  00:06:07.500
And because we're doing that,
we now need to specify a parameter.
103

103

00:06:07.500  -->  00:06:12.550
So, what we're gonna do there is create
our constructor, Constructor, and you
104

104

00:06:12.550  -->  00:06:16.500
can see it's automatically accepting those
two parameters cylinders and the name.
105

105

00:06:16.500  -->  00:06:19.070
And it's calling the super,
which is gonna call, of course,
106

106

00:06:19.070  -->  00:06:24.780
the superclass's constructor to
initialize it there and save our values.
107

107

00:06:24.780  -->  00:06:26.610
So that's the constructor done.
108

108

00:06:26.610  -->  00:06:29.570
Next, we need to override
those three methods so
109

109

00:06:29.570  -->  00:06:32.690
we can just use our override function,
Override.
110

110

00:06:32.690  -->  00:06:35.630
So let's go through, and
we now need to override three of them, and
111

111

00:06:35.630  -->  00:06:37.470
note that you can also override getters.
112

112

00:06:37.470  -->  00:06:40.310
We're not going to do that, but you
could actually do that if you wanted to.
113

113

00:06:40.310  -->  00:06:44.130
I'm gonna select those three methods,
startEngine, accelerate, and brake, and
114

114

00:06:44.130  -->  00:06:44.890
override those.
115

115

00:06:46.080  -->  00:06:48.870
You notice the default option
that IntelliJ gives us there is
116

116

00:06:48.870  -->  00:06:53.830
super.startEngine, and that's a way
to call the super functions, so
117

117

00:06:53.830  -->  00:06:56.020
in some cases, you may wanna do that.
118

118

00:06:56.020  -->  00:07:02.510
You might want to do some processing in
that base class for here, for startEngine,
119

119

00:07:02.510  -->  00:07:05.910
and then provide your functionality
after that, over and above that.
120

120

00:07:05.910  -->  00:07:09.270
So I'm gonna leave that out, but
that would be how you would call it if
121

121

00:07:09.270  -->  00:07:12.290
you wanted to call that before
actually adding your own code.
122

122

00:07:12.290  -->  00:07:17.550
So what we're gonna do there, though,
is I'm just gonna take a copy of this.
123

123

00:07:17.550  -->  00:07:21.490
And I'm gonna paste it there.
124

124

00:07:21.490  -->  00:07:27.950
But I'm gonna change that, and
I'm going to call that Mitsubishi.
125

125

00:07:27.950  -->  00:07:31.740
And I'll do the same for the other two.
126

126

00:07:31.740  -->  00:07:33.720
We'll just move the screen a little bit so
127

127

00:07:33.720  -->  00:07:36.460
the little messages down at
the bottom don't impact us.
128

128

00:07:37.650  -->  00:07:40.480
And of course I need to change
then the name of the method, so
129

129

00:07:40.480  -->  00:07:42.320
it's gonna be accelerate and brake.
130

130

00:07:45.840  -->  00:07:49.160
Okay, so if we just do a test run of that
there just to make sure that it's working.
131

131

00:07:49.160  -->  00:07:54.580
So firstly, we could put,
Car car = new Car().
132

132

00:07:54.580  -->  00:08:00.480
And we can just put, (8, "Base car").
133

133

00:08:00.480  -->  00:08:06.380
And then we can put, car.startEngine(),
134

134

00:08:06.380  -->  00:08:13.210
car.accelerate(), car.brake(), like so.
135

135

00:08:13.210  -->  00:08:15.110
Move it up a little bit.
136

136

00:08:15.110  -->  00:08:20.820
If we run that now, we should just see the
basic messages from the base Car class.
137

137

00:08:20.820  -->  00:08:22.440
And we're actually doing a return there.
138

138

00:08:22.440  -->  00:08:25.900
The reason that's not working is
we should probably change that.
139

139

00:08:25.900  -->  00:08:28.900
That's got a return, probably should have
changed that to output then in that method
140

140

00:08:28.900  -->  00:08:30.750
just to save us a bit of time,
but that's all right.
141

141

00:08:30.750  -->  00:08:32.810
What we'll do, we can fix that,
we can go like this.
142

142

00:08:32.810  -->  00:08:37.610
We can put System.out.println and
wrap that around the method, and
143

143

00:08:37.610  -->  00:08:42.830
what that will do is actually print
whatever was returned from that method.
144

144

00:08:42.830  -->  00:08:47.380
In this case, will be our message,
so if you do the same for
145

145

00:08:47.380  -->  00:08:51.390
that one, and then the same for
this one, like so.
146

146

00:08:51.390  -->  00:08:55.880
So now we've wrapped the actual method
call inside of System.out.println,
147

147

00:08:55.880  -->  00:08:59.900
so we're actually just printing out
whatever the result is coming back
148

148

00:08:59.900  -->  00:09:01.170
from that method.
149

149

00:09:01.170  -->  00:09:02.860
So, I'm gonna click on Run again.
150

150

00:09:02.860  -->  00:09:04.220
We should see that now on the screen.
151

151

00:09:05.430  -->  00:09:09.380
We can now see that that's working,
Car -> startEngine(), Car -> accelerate(),
152

152

00:09:09.380  -->  00:09:10.420
Car -> brake().
153

153

00:09:10.420  -->  00:09:13.910
So likewise, for Mitsubishi,
154

154

00:09:13.910  -->  00:09:19.230
Mitsubishi mitsubishi = new Mitsubishi().
155

155

00:09:19.230  -->  00:09:20.660
Then we can put the number of cylinders.
156

156

00:09:20.660  -->  00:09:25.350
With that one,
we might say it's a 6 cylinder,
157

157

00:09:25.350  -->  00:09:29.600
and we'll say it's an Outlander VRX 4WD.
158

158

00:09:31.810  -->  00:09:36.330
And we can do something similar to that,
we could call those methods.
159

159

00:09:38.550  -->  00:09:43.400
And we'll just change the mitsubishi
there, sort of the car to mitsubishi,
160

160

00:09:43.400  -->  00:09:46.370
so we're actually calling
the right method.
161

161

00:09:46.370  -->  00:09:50.060
We'll run that.
162

162

00:09:50.060  -->  00:09:53.710
And we can see now we're now calling the
mitsubishi method, mitsubishi.startEngine,
163

163

00:09:53.710  -->  00:09:55.800
mitsubishi.accelerate, mitsubishi.brake.
164

164

00:09:55.800  -->  00:09:59.310
So that's good, so we can now do
the same for our two other cars.
165

165

00:09:59.310  -->  00:10:01.470
So what we could actually do,
we should be able to do this,
166

166

00:10:01.470  -->  00:10:05.460
we can actually click on that and
click on Refactor > Copy.
167

167

00:10:07.010  -->  00:10:08.620
We can actually copy an entire class.
168

168

00:10:08.620  -->  00:10:11.380
So, it's asking us what
the name of the old class is.
169

169

00:10:11.380  -->  00:10:13.690
We've already selected,
I should say, the old class.
170

170

00:10:13.690  -->  00:10:15.010
What is the new name going to be?
171

171

00:10:15.010  -->  00:10:17.330
And it's gonna create
a copy of that class, and
172

172

00:10:17.330  -->  00:10:20.070
it's also asking where
the destination is going to be.
173

173

00:10:20.070  -->  00:10:24.750
So I'm gonna click on Ford, or
type Ford, I should say, and OK.
174

174

00:10:24.750  -->  00:10:27.150
Now you see what this has done by default?
175

175

00:10:27.150  -->  00:10:29.220
It's actually pretty well done
everything that we wanted it to do.
176

176

00:10:29.220  -->  00:10:31.020
And we can actually add
a bit more code here.
177

177

00:10:34.310  -->  00:10:37.950
So it's actually working, but
it's created a separate class.
178

178

00:10:37.950  -->  00:10:42.070
By default, it's created a separate class,
which I won't go back and change that now.
179

179

00:10:42.070  -->  00:10:45.560
But this is a quick way to copy and
create a new class,
180

180

00:10:45.560  -->  00:10:47.640
as you can see,
instead of doing all that typing.
181

181

00:10:47.640  -->  00:10:48.860
So, just another way of doing it.
182

182

00:10:48.860  -->  00:10:53.740
We can actually then go back to our
Main class, down on the bottom here.
183

183

00:10:53.740  -->  00:10:55.670
We should be able to do
exactly the same with that.
184

184

00:11:00.220  -->  00:11:04.760
But this time, what we're going to do,
we're going to just rename this by
185

185

00:11:04.760  -->  00:11:08.390
selecting the variable,
clicking on Refactor > Rename.
186

186

00:11:08.390  -->  00:11:13.260
And if I change that now to ford,
you can see as I'm pressing delete,
187

187

00:11:13.260  -->  00:11:15.720
that's working, which is good.
188

188

00:11:15.720  -->  00:11:17.410
That's a quick way of changing it.
189

189

00:11:17.410  -->  00:11:20.250
Then we'll change this to Ford as well,
190

190

00:11:20.250  -->  00:11:24.870
and change the constructor name,
the class name, I should say.
191

191

00:11:24.870  -->  00:11:31.520
So, and obviously change the actual
car name as well, Ford Falcon.
192

192

00:11:31.520  -->  00:11:33.060
That's about the only one I
know off the top of my head.
193

193

00:11:34.200  -->  00:11:34.700
Run that.
194

194

00:11:37.970  -->  00:11:40.350
Ford is now working, as you can see.
195

195

00:11:40.350  -->  00:11:43.050
And if we didn't want to, I think there
might be an option to do this, but
196

196

00:11:43.050  -->  00:11:46.760
just click on, right-click Refactor,
197

197

00:11:46.760  -->  00:11:52.070
I think we can click on Inline > Inline
all references and remove the class.
198

198

00:11:52.070  -->  00:11:53.510
So, let's just try that and
see what that does,
199

199

00:11:53.510  -->  00:11:55.220
because we can always undo it, Refactor.
200

200

00:11:56.270  -->  00:11:58.350
Interesting, that's done something,
you can see what it's done there.
201

201

00:11:58.350  -->  00:12:02.700
It's actually created a class
within the constructor.
202

202

00:12:02.700  -->  00:12:04.370
So, you can see this part
here is being created.
203

203

00:12:04.370  -->  00:12:07.210
That spot's called an inline class, so
it looks like it's actually a parameter.
204

204

00:12:07.210  -->  00:12:10.150
You might be wondering, well,
why isn't it separate to this one here?
205

205

00:12:10.150  -->  00:12:12.940
Like this class for
Mitsubishi is completely separate, and
206

206

00:12:12.940  -->  00:12:14.390
we've typed it all in there.
207

207

00:12:14.390  -->  00:12:16.770
That's another way to create a class.
208

208

00:12:16.770  -->  00:12:18.610
It's called creating an inline class, and
209

209

00:12:18.610  -->  00:12:22.350
we're creating it right at the point
where we're actually initializing it.
210

210

00:12:22.350  -->  00:12:26.210
So, I wouldn't recommend that in many
cases, but one place you'll see that
211

211

00:12:26.210  -->  00:12:31.040
quite often is in Android applications for
things like click listeners.
212

212

00:12:31.040  -->  00:12:33.690
In other words,
when you're wanting to create an event or
213

213

00:12:33.690  -->  00:12:36.830
actually place a listener on a particular
button on the screen and for
214

214

00:12:36.830  -->  00:12:40.460
it to actually do some action, perform
some action when that button is tapped,
215

215

00:12:40.460  -->  00:12:42.930
that's very common for
that, but we'll save that.
216

216

00:12:42.930  -->  00:12:44.760
Later in the course,
we'll talk more about inline,
217

217

00:12:44.760  -->  00:12:47.330
but that was just another thing I wanted
to show, another way of doing it.
218

218

00:12:47.330  -->  00:12:51.510
So I'm going to undo that, and I'll just
press, in this case, Cmd+Z, and say,
219

219

00:12:51.510  -->  00:12:52.310
do you wanna undo that?
220

220

00:12:52.310  -->  00:12:55.990
So I'm gonna click on Yes, and you can
see down at the bottom what it's done.
221

221

00:12:55.990  -->  00:13:00.690
And probably now, if we have a look at
our classes, we've actually got our
222

222

00:13:00.690  -->  00:13:06.130
classes back there again, so it's undone
that change, which is pretty nice.
223

223

00:13:06.130  -->  00:13:07.560
So, I'm gonna leave that in there anyway.
224

224

00:13:07.560  -->  00:13:10.110
Now anyway, that was just another
way I wanted to show you of
225

225

00:13:10.110  -->  00:13:11.720
how to quickly change something.
226

226

00:13:11.720  -->  00:13:16.060
So, let's just go back here again
up to our Mitsubishi class, and
227

227

00:13:16.060  -->  00:13:20.190
this time we're gonna do a copy,
Refactor, we'll do a Copy.
228

228

00:13:20.190  -->  00:13:22.210
And this time we'll create
a class called Holden.
229

229

00:13:25.250  -->  00:13:28.050
Like so.
And now we're gonna do a right-click.
230

230

00:13:28.050  -->  00:13:31.570
I will right-click that,
click on Refactor, and
231

231

00:13:31.570  -->  00:13:36.180
try Move, Move to package, and
let's try this Make in a class of.
232

232

00:13:36.180  -->  00:13:37.660
Let's choose our Main class.
233

233

00:13:40.690  -->  00:13:42.470
This is another way to create one.
234

234

00:13:42.470  -->  00:13:44.660
And click on Refactor.
235

235

00:13:44.660  -->  00:13:47.440
And you can see by doing that,
it's largely got this right.
236

236

00:13:47.440  -->  00:13:51.420
But it's actually created the class, and
it's moved it from what was external back
237

237

00:13:51.420  -->  00:13:55.100
into this particular Java file, which
is a good step in the right direction.
238

238

00:13:55.100  -->  00:13:57.560
And we could do the same
thing with IntelliJ.
239

239

00:13:57.560  -->  00:14:01.900
We're going back to our Ford class,
right-click that,
240

240

00:14:01.900  -->  00:14:07.230
Refactor > Move > Make inner class of,
and we'll choose Main again.
241

241

00:14:08.390  -->  00:14:10.690
And notice that says Holden in Main now,
so
242

242

00:14:10.690  -->  00:14:15.960
it's telling us it's actually a class
within the Main class, and click on OK.
243

243

00:14:15.960  -->  00:14:19.060
Click on Refactor, and then we're
going to have Ford class in there.
244

244

00:14:19.060  -->  00:14:22.060
And what we can do then, just to change
this a little bit, we'll go back here.
245

245

00:14:22.060  -->  00:14:24.590
And we'll copy them both,
take them out of there, and
246

246

00:14:24.590  -->  00:14:26.480
actually I'll make a bit of space here.
247

247

00:14:26.480  -->  00:14:27.440
You can see what we're doing.
248

248

00:14:28.980  -->  00:14:31.480
If you go back up to the top
again there now, and
249

249

00:14:31.480  -->  00:14:34.980
just below that second definition,
250

250

00:14:34.980  -->  00:14:39.230
I'm gonna paste the classes in there now
and get rid of the word static, which now
251

251

00:14:39.230  -->  00:14:42.120
are not appropriate because we're not
actually in the Main class anymore.
252

252

00:14:43.210  -->  00:14:46.410
And I'll take it back out
of there again as well.
253

253

00:14:46.410  -->  00:14:50.630
So now we should have our three classes
like I originally was going to do,
254

254

00:14:50.630  -->  00:14:52.940
Mitsubishi, Holden, and also Ford.
255

255

00:14:52.940  -->  00:14:54.050
And we can just do lastly,
256

256

00:14:54.050  -->  00:14:57.090
I think the last thing we could do
there is just copy that and paste that.
257

257

00:14:59.390  -->  00:15:05.200
Do a rename, right-clicking on
the variable for Ford, Refactor > Rename.
258

258

00:15:05.200  -->  00:15:06.060
We'll call that Holden.
259

259

00:15:07.600  -->  00:15:09.640
Press Enter to accept the change.
260

260

00:15:09.640  -->  00:15:15.290
And then we'll just change this one,
Holden.
261

261

00:15:19.390  -->  00:15:22.980
And we'll put Holden Commodore,
262

262

00:15:22.980  -->  00:15:27.890
which is a model within
the Holden car class.
263

263

00:15:27.890  -->  00:15:28.390
Run that.
264

264

00:15:30.710  -->  00:15:31.610
Whoops, and we did we do?
265

265

00:15:31.610  -->  00:15:32.520
We made a mistake here.
266

266

00:15:32.520  -->  00:15:35.690
We copied the class, and we didn't change
267

267

00:15:35.690  -->  00:15:38.590
the actual messages that are showing
on the screen for the last one.
268

268

00:15:38.590  -->  00:15:39.420
So if we go back and have a look,
269

269

00:15:39.420  -->  00:15:43.300
we can probably see that we've got
Mitsubishi in the Holden class.
270

270

00:15:43.300  -->  00:15:47.930
We didn't actually update that, so I need
to click on that and paste that in because
271

271

00:15:47.930  -->  00:15:52.310
obviously we want the word to appear to
tell us which class we're actually in.
272

272

00:15:52.310  -->  00:15:53.860
So I can click on Run that.
273

273

00:15:55.640  -->  00:15:57.710
We can now see that
that's working as well.
274

274

00:15:57.710  -->  00:15:59.640
So, that's our polymorphism challenge.
275

275

00:15:59.640  -->  00:16:02.630
And just one last thing I want to show you
is there's actually a way within Java,
276

276

00:16:02.630  -->  00:16:06.650
instead of having to remember the class,
if you want to output the class,
277

277

00:16:06.650  -->  00:16:09.250
you can actually retrieve the class name.
278

278

00:16:09.250  -->  00:16:15.020
So we can do something
like getClass.getName.
279

279

00:16:15.020  -->  00:16:18.320
getSimpleName is the way to do it.
280

280

00:16:18.320  -->  00:16:22.080
And then we can put +, like so, and
281

281

00:16:22.080  -->  00:16:27.120
that would be another way
of actually doing it.
282

282

00:16:27.120  -->  00:16:29.950
So, we could then just do the similar
thing for the rest of them.
283

283

00:16:29.950  -->  00:16:32.830
We can go just copy up into that part.
284

284

00:16:32.830  -->  00:16:36.590
And we'll just do this just for
the Holden class, just to show you.
285

285

00:16:36.590  -->  00:16:40.030
It's just another function within Java
to actually get it to do the work for
286

286

00:16:40.030  -->  00:16:42.090
you instead of you having to hard-code it.
287

287

00:16:42.090  -->  00:16:44.970
So what that's doing now is getting
the class, and that's looking
288

288

00:16:44.970  -->  00:16:48.960
at where the code is executing,
which class it's currently executing in.
289

289

00:16:48.960  -->  00:16:52.930
getSimpleName is a way just to
retrieve the actual class name.
290

290

00:16:52.930  -->  00:16:58.630
So if we do that, we should find that it
should still say Holden -> startEngine for
291

291

00:16:58.630  -->  00:17:02.530
each of those things, so run that.
292

292

00:17:02.530  -->  00:17:05.990
And you can see that it still says Holden,
so that's another feature that's built in.
293

293

00:17:05.990  -->  00:17:08.480
And you might be wondering,
where did that getClass come from,
294

294

00:17:08.480  -->  00:17:10.640
because that's obviously a method.
295

295

00:17:10.640  -->  00:17:12.560
And where is that coming from?
296

296

00:17:12.560  -->  00:17:14.530
So, we can actually click on that to see.
297

297

00:17:14.530  -->  00:17:16.250
I'm holding down Cmd on my Mac.
298

298

00:17:16.250  -->  00:17:19.420
And notice that straightaway
it's showing you Object,
299

299

00:17:19.420  -->  00:17:22.060
remembering that all
classes that you create in
300

300

00:17:22.060  -->  00:17:25.760
Java are actually extended
automatically from the Object class.
301

301

00:17:25.760  -->  00:17:28.630
So that's one of the purposes
of the Object class is to give
302

302

00:17:28.630  -->  00:17:30.800
you functionality like this,
among other things,
303

303

00:17:30.800  -->  00:17:35.770
to do some base things like returning
the name of the class and so forth.
304

304

00:17:35.770  -->  00:17:38.940
And Java uses that internally
to figure things out.
305

305

00:17:38.940  -->  00:17:42.830
So, that's another good way of
figuring out which class you're in.
306

306

00:17:42.830  -->  00:17:46.050
And in later videos, we'll actually
be talking more about that and
307

307

00:17:46.050  -->  00:17:47.870
how you can actually write some code.
308

308

00:17:47.870  -->  00:17:51.190
You can actually check
the top of Object and
309

309

00:17:51.190  -->  00:17:55.530
do a comparison to say,
is this class of type whatever?
310

310

00:17:55.530  -->  00:17:58.730
So it's just another way of giving you
more flexibility in your programming.
311

311

00:17:58.730  -->  00:18:00.780
But we'll be doing that
later on in the course.
312

312

00:18:00.780  -->  00:18:02.720
Okay, so
that's the polymorphism challenge, and
313

313

00:18:02.720  -->  00:18:06.540
that's actually the end of
the object-oriented programming section.
314

314

00:18:06.540  -->  00:18:10.410
But what I've got coming up in
the next videos is I'm going to
315

315

00:18:10.410  -->  00:18:12.650
create a big challenge for you.
316

316

00:18:12.650  -->  00:18:16.250
Because the last two sections we've
learned a lot about object-oriented
317

317

00:18:16.250  -->  00:18:19.650
programming, but it's time to put
your skills to use because what we're
318

318

00:18:19.650  -->  00:18:23.900
going to do is create a much larger
application than we've created before.
319

319

00:18:23.900  -->  00:18:26.740
We're going to use all
the concepts of object-oriented
320

320

00:18:26.740  -->  00:18:29.650
programing that we've learned
in the last two sections.
321

321

00:18:29.650  -->  00:18:32.340
So we're going to use all
those major aspects and
322

322

00:18:32.340  -->  00:18:36.690
create a bigger application to hopefully
really solidify your understanding
323

323

00:18:36.690  -->  00:18:38.770
of object-oriented programming.
324

324

00:18:38.770  -->  00:18:42.540
So, we'll see you in that next
set of videos where we start
325

325

00:18:42.540  -->  00:18:44.380
our big object-oriented challenge.
