WEBVTT
1
1

00:00:05.163  -->  00:00:07.410
<v Tim>All right, so it's time for a challenge.</v>
2

2

00:00:07.410  -->  00:00:09.650
So your challenge is to create some variables.
3

3

00:00:09.650  -->  00:00:12.310
First on is a variable of type byte,
4

4

00:00:12.310  -->  00:00:14.020
where you can set it to any valid
5

5

00:00:14.020  -->  00:00:15.920
type byte number, doesn't matter.
6

6

00:00:15.920  -->  00:00:18.240
Also then do the same for a short variable,
7

7

00:00:18.240  -->  00:00:20.390
setting it to any valid short number,
8

8

00:00:20.390  -->  00:00:22.370
and then create an int variable,
9

9

00:00:22.370  -->  00:00:24.850
setting to any valid int number.
10

10

00:00:24.850  -->  00:00:28.840
Lastly, then create a variable of type long,
11

11

00:00:28.840  -->  00:00:32.300
and make that equal to 50,000 plus 10 times
12

12

00:00:32.300  -->  00:00:34.490
the sum of the byte plus the short
13

13

00:00:34.490  -->  00:00:36.220
plus the integer values.
14

14

00:00:36.220  -->  00:00:37.160
So that's your challenge.
15

15

00:00:37.160  -->  00:00:38.810
See how you go, pause the video,
16

16

00:00:38.810  -->  00:00:39.643
go away and do that.
17

17

00:00:39.643  -->  00:00:40.476
And when you get back,
18

18

00:00:40.476  -->  00:00:41.960
I'll go through it and show you how to do that.
19

19

00:00:41.960  -->  00:00:43.903
Pause now, see you when you get back.
20

20

00:00:45.410  -->  00:00:46.243
Right, so how did it go?
21

21

00:00:46.243  -->  00:00:47.560
Did you manage to figure it out?
22

22

00:00:47.560  -->  00:00:48.880
Well, let's make a start on that.
23

23

00:00:48.880  -->  00:00:50.920
So what we're gonna do, firstly,
24

24

00:00:50.920  -->  00:00:52.150
is I'm gonna create a new project.
25

25

00:00:52.150  -->  00:00:54.130
So we're not going to use the existing one.
26

26

00:00:54.130  -->  00:00:55.973
The code's available if you need to get access to that one.
27

27

00:00:55.973  -->  00:00:57.560
I create a new project.
28

28

00:00:57.560  -->  00:00:59.110
I'm just gonna call this one...
29

29

00:01:02.010  -->  00:01:03.230
I'm clicking a create project.
30

30

00:01:03.230  -->  00:01:05.250
We're gonna call this one Primitive Type
31

31

00:01:06.440  -->  00:01:08.363
or Primitive Types Challenge.
32

32

00:01:09.940  -->  00:01:10.773
We are gonna put the code in there.
33

33

00:01:10.773  -->  00:01:12.140
Just so it's separate from the code
34

34

00:01:12.140  -->  00:01:15.683
they've been working on, right.
35

35

00:01:17.348  -->  00:01:18.181
All right, so we're gonna start off
36

36

00:01:18.181  -->  00:01:19.440
by creating our variables.
37

37

00:01:19.440  -->  00:01:21.680
If you remember, there was three that we needed to create.
38

38

00:01:21.680  -->  00:01:23.070
We've got a byte,
39

39

00:01:23.070  -->  00:01:25.140
we'll call that one byte value,
40

40

00:01:25.140  -->  00:01:26.490
we'll set that equal to 10.
41

41

00:01:27.494  -->  00:01:28.780
And again it could be any value.
42

42

00:01:28.780  -->  00:01:32.640
Short value equals 20.
43

43

00:01:32.640  -->  00:01:36.583
An int, int value, set that equal to 50.
44

44

00:01:37.610  -->  00:01:40.100
There now a long variable, long,
45

45

00:01:40.100  -->  00:01:43.500
long total is equal to 50,000.
46

46

00:01:43.500  -->  00:01:46.820
I'm gonna put an l there to signify that it's a long,
47

47

00:01:46.820  -->  00:01:48.010
but baring in mind that we don't
48

48

00:01:48.010  -->  00:01:50.770
have to do that because Java will assume,
49

49

00:01:50.770  -->  00:01:51.603
and it just as you're typing
50

50

00:01:51.603  -->  00:01:53.280
it'll automatically convert that to a long.
51

51

00:01:53.280  -->  00:01:54.113
But I'm gonna put it in anyway.
52

52

00:01:54.113  -->  00:01:58.760
Plus 10 l multiplied by, then we need to multiply
53

53

00:01:58.760  -->  00:02:01.403
the sum of byte value plus short value plus int value.
54

54

00:02:01.403  -->  00:02:03.240
So byte value in parenthesis
55

55

00:02:03.240  -->  00:02:06.853
plus short value plus int value.
56

56

00:02:07.820  -->  00:02:10.740
Closing parenthesis, and a semicolon to make the line valid.
57

57

00:02:10.740  -->  00:02:12.520
So that's actually the solution.
58

58

00:02:12.520  -->  00:02:13.680
And just to confirm this,
59

59

00:02:13.680  -->  00:02:17.510
let's actually just print out the value long total.
60

60

00:02:17.510  -->  00:02:18.943
Okay, we'll run the programme.
61

61

00:02:20.500  -->  00:02:24.040
Can you see, we got the result 50,800?
62

62

00:02:24.040  -->  00:02:26.110
There we didn't need to do any casting,
63

63

00:02:26.110  -->  00:02:27.520
and again we've talked about the reasoning
64

64

00:02:27.520  -->  00:02:30.060
for that is an integer value which these results
65

65

00:02:30.060  -->  00:02:32.060
are assumed, to the right-hand side,
66

66

00:02:32.060  -->  00:02:33.920
this is assumed to be an int value,
67

67

00:02:33.920  -->  00:02:37.120
but we've established that longs work quite nicely with ints
68

68

00:02:37.120  -->  00:02:38.480
so we don't need to do any casting,
69

69

00:02:38.480  -->  00:02:41.250
but we wanted to do something similar with, say, a short.
70

70

00:02:41.250  -->  00:02:42.580
And I know this isn't part of the challenge,
71

71

00:02:42.580  -->  00:02:44.350
but we just are going through it anyway.
72

72

00:02:44.350  -->  00:02:46.050
And would be something like short,
73

73

00:02:47.730  -->  00:02:52.460
short total is equal to parenthesis 1,000 plus 10
74

74

00:02:52.460  -->  00:02:56.040
multiplied by in parenthesis byte value
75

75

00:02:56.040  -->  00:02:58.993
plus short value plus int value.
76

76

00:03:01.230  -->  00:03:03.240
Now clearly we've got an error doing that,
77

77

00:03:03.240  -->  00:03:04.440
and the reason we've got an error is,
78

78

00:03:04.440  -->  00:03:06.140
now we do have to cast.
79

79

00:03:06.140  -->  00:03:07.487
And if we hover over it,
80

80

00:03:07.487  -->  00:03:09.200
"Required a short and found an int."
81

81

00:03:09.200  -->  00:03:11.060
So we need to be specific here,
82

82

00:03:11.060  -->  00:03:14.793
and put a short at the front of the expression there,
83

83

00:03:15.837  -->  00:03:16.670
put it specifically.
84

84

00:03:16.670  -->  00:03:17.900
And I'll just press enter there.
85

85

00:03:17.900  -->  00:03:19.320
This is something else you can do with Java,
86

86

00:03:19.320  -->  00:03:21.900
by the way, you can actually go over multiple lines,
87

87

00:03:21.900  -->  00:03:24.220
and Java is smart enough to determine
88

88

00:03:24.220  -->  00:03:26.800
that this statement is over two lines.
89

89

00:03:26.800  -->  00:03:28.630
We've got a semicolon on the end of the second line,
90

90

00:03:28.630  -->  00:03:31.100
and it quite happily accepts that.
91

91

00:03:31.100  -->  00:03:32.080
So the point of all this,
92

92

00:03:32.080  -->  00:03:33.190
after solving the challenge,
93

93

00:03:33.190  -->  00:03:36.336
was just to suggest that integer is the best
94

94

00:03:36.336  -->  00:03:39.420
primitive data type for whole numbers to use generally,
95

95

00:03:39.420  -->  00:03:41.430
but even if you're using type long,
96

96

00:03:41.430  -->  00:03:44.590
you saw that Java handles a lot of the complexity for you,
97

97

00:03:44.590  -->  00:03:47.100
and you don't have to do this casting with a long,
98

98

00:03:47.100  -->  00:03:48.570
and the reason for that was because the long
99

99

00:03:48.570  -->  00:03:50.070
will happily accept an integer
100

100

00:03:50.070  -->  00:03:52.210
because, of course, a maximum integer value
101

101

00:03:52.210  -->  00:03:54.920
will always fit within a long value.
102

102

00:03:54.920  -->  00:03:58.500
So that's bytes, shorts, integers, and longs.
103

103

00:03:58.500  -->  00:04:00.210
Four primitive types.
104

104

00:04:00.210  -->  00:04:01.530
So we still got four to go.
105

105

00:04:01.530  -->  00:04:03.920
Into the next video, we are going to start
106

106

00:04:03.920  -->  00:04:05.600
talking about decimal numbers.
107

107

00:04:05.600  -->  00:04:06.870
Because, of course, today we've only been
108

108

00:04:06.870  -->  00:04:08.350
dealing with whole numbers.
109

109

00:04:08.350  -->  00:04:10.990
But can be very common requirement for you to wanna
110

110

00:04:10.990  -->  00:04:12.360
use decimal points.
111

111

00:04:12.360  -->  00:04:14.060
For example, you might wanna convert pounds
112

112

00:04:14.060  -->  00:04:16.170
to kilogrammes, or something of that nature,
113

113

00:04:16.170  -->  00:04:18.540
and in that scenario, having the ability to use
114

114

00:04:18.540  -->  00:04:19.560
decimal points in the number,
115

115

00:04:19.560  -->  00:04:20.700
would be really useful.
116

116

00:04:20.700  -->  00:04:23.150
So let's start working on that in the next video.
