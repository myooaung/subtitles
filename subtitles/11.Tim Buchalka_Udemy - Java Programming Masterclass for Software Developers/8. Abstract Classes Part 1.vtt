WEBVTT
1
1

00:00:05.480  -->  00:00:08.970
So in this set of videos we're gonna
start talking about Abstractions.
2

2

00:00:08.970  -->  00:00:11.910
So abstraction is when you define
the required functionality for
3

3

00:00:11.910  -->  00:00:14.460
something without actually
implementing the data house.
4

4

00:00:14.460  -->  00:00:17.000
In other words we're focusing
on what needs to be done,
5

5

00:00:17.000  -->  00:00:18.610
not on the how it's to be done.
6

6

00:00:18.610  -->  00:00:21.450
So, interface is, as you saw,
a purely abstract,
7

7

00:00:21.450  -->  00:00:25.480
and I don't specify any actual
aspect of the implementation.
8

8

00:00:25.480  -->  00:00:26.990
The actual implementation, of course,
9

9

00:00:26.990  -->  00:00:29.550
was left to the classes that
implement the interface, and
10

10

00:00:29.550  -->  00:00:32.730
that's why we use the word implements
when we're using an interface.
11

11

00:00:32.730  -->  00:00:36.740
And as you can see, I've got the challenge
from the interfaces set of videos.
12

12

00:00:36.740  -->  00:00:38.740
And I'm just gonna go through and
just confirm that again.
13

13

00:00:38.740  -->  00:00:40.800
So you can see that we've
got our interface here.
14

14

00:00:40.800  -->  00:00:43.420
Now this was the interface that
originally had the ArrayList.
15

15

00:00:43.420  -->  00:00:46.350
And if you remember I changed it
back to a list, and I changed it
16

16

00:00:46.350  -->  00:00:49.420
back to ArrayList here just to actually
talk about this a little bit more.
17

17

00:00:49.420  -->  00:00:51.220
But again, getting back to the interface,
18

18

00:00:51.220  -->  00:00:53.600
the interface defines
what needs to be done.
19

19

00:00:53.600  -->  00:00:55.380
It doesn't define how it's done.
20

20

00:00:55.380  -->  00:00:57.510
The how,
we actually have to go into the class.
21

21

00:00:57.510  -->  00:01:00.310
In this case say Monster, and
that's actually implements that's
22

22

00:01:00.310  -->  00:01:04.010
implementing the savable interface meaning
that it's actually gonna do the work.
23

23

00:01:04.010  -->  00:01:05.760
And we're getting that
error right now by the way,
24

24

00:01:05.760  -->  00:01:09.000
because as you remember we
actually changed this into a list.
25

25

00:01:09.000  -->  00:01:12.290
But I'll purposely change the interface
back to an ArrayList because I wanna
26

26

00:01:12.290  -->  00:01:13.080
talk about that.
27

27

00:01:13.080  -->  00:01:16.970
So the ISaveable interface,
as you can see onscreen, provided,
28

28

00:01:16.970  -->  00:01:20.260
or specified that there must be
a right method that returned
29

29

00:01:20.260  -->  00:01:23.370
an ArrayList of values to be saved,
and also the read method.
30

30

00:01:23.370  -->  00:01:24.640
As you can see on the screen then,
31

31

00:01:24.640  -->  00:01:27.830
there that was provided with
an ArrayList of values to be restored.
32

32

00:01:27.830  -->  00:01:31.010
So there weren't any other details
of how the class should populate,
33

33

00:01:31.010  -->  00:01:33.100
or write the ArrayList.
34

34

00:01:33.100  -->  00:01:35.540
No details on what the class should
do with the read values either,
35

35

00:01:35.540  -->  00:01:38.560
that's left entirely up
to each individual class.
36

36

00:01:38.560  -->  00:01:42.930
You could really if you wanted to, set it
up so that each class implemented this
37

37

00:01:42.930  -->  00:01:46.960
interface might do completely different
things with the right and read methods.
38

38

00:01:46.960  -->  00:01:50.030
There's no rules of what's to be done
with those methods and interface.
39

39

00:01:50.030  -->  00:01:53.580
And that those methods have to be
implemented in a particular class.
40

40

00:01:53.580  -->  00:01:57.430
But strictly speaking, if you look at this
interface, it's not complete abstraction.
41

41

00:01:57.430  -->  00:01:59.910
And the reason is in this particular case,
42

42

00:01:59.910  -->  00:02:03.070
there's a specification that
ArrayLists must be used.
43

43

00:02:03.070  -->  00:02:06.690
But in a typed language like Java it's
hard to avoid doing that sometimes.
44

44

00:02:06.690  -->  00:02:07.990
But in this particular case, and
45

45

00:02:07.990  -->  00:02:11.100
I explained this a little bit in
the challenge, in the previous challenge,
46

46

00:02:11.100  -->  00:02:14.630
the interface challenge,
we can abstract this and use just a List.
47

47

00:02:14.630  -->  00:02:16.360
So what we could've done
is we could've changed,
48

48

00:02:16.360  -->  00:02:19.550
and what we did do is we changed it,
so we actually removed the need for
49

49

00:02:19.550  -->  00:02:23.990
an ArrayList, and actually just changed
it so in actual fact it was just a list.
50

50

00:02:25.550  -->  00:02:27.890
And by doing that, we abstracted again,
51

51

00:02:27.890  -->  00:02:32.300
because we then didn't force the Monster
class or the Player class or
52

52

00:02:32.300  -->  00:02:35.950
any other class that implemented this
interface to have to use an ArrayList.
53

53

00:02:35.950  -->  00:02:37.770
They could use any type of list for
that matter.
54

54

00:02:37.770  -->  00:02:41.850
And that can be really useful and they'll
help made a recommendation that you should
55

55

00:02:41.850  -->  00:02:45.080
do that whenever you are using a list
of some type in your programs.
56

56

00:02:45.080  -->  00:02:47.640
Generally speaking in
terms of the declaration,
57

57

00:02:47.640  -->  00:02:51.470
it's good to write it like that and
that leaves your implementation open to
58

58

00:02:51.470  -->  00:02:54.630
actually use any type of that
is anything that implements that
59

59

00:02:54.630  -->  00:02:58.850
particular interface in which case this
is the list interface which part of Java.
60

60

00:02:58.850  -->  00:03:03.020
And just as a recap, we can see that if we
actually click on this, I'm holding down
61

61

00:03:03.020  -->  00:03:07.030
command, I believe it's Alt on your
control, sorry, on a Windows machine.
62

62

00:03:07.030  -->  00:03:10.550
Click on it, we can go into the actual
list interface, which is part of Java,
63

63

00:03:10.550  -->  00:03:13.760
is quite interesting, actually
reading some of the code sometimes.
64

64

00:03:13.760  -->  00:03:18.010
And you can say that this is actually
the public interface for the list,
65

65

00:03:18.010  -->  00:03:21.760
which the other classes such as
ArrayLists within Java etc.,
66

66

00:03:21.760  -->  00:03:24.460
actually have to implement
to actually use.
67

67

00:03:25.690  -->  00:03:29.410
Now obviously by definition,
being an interface is abstract, so
68

68

00:03:29.410  -->  00:03:31.990
you can't use a new ISavable or
a new list.
69

69

00:03:31.990  -->  00:03:35.440
What you need to do is instantiate
a class that implements the interface.
70

70

00:03:35.440  -->  00:03:37.980
And you obviously saw that
in the interface challenge.
71

71

00:03:37.980  -->  00:03:40.320
Now Java also allows abstract classes.
72

72

00:03:40.320  -->  00:03:43.550
Now, before we get too much into that,
I just wanna go one step further and
73

73

00:03:43.550  -->  00:03:46.600
just mention that with this interface,
we could've actually taken it
74

74

00:03:46.600  -->  00:03:49.940
one step further, because we
specified the type three string.
75

75

00:03:49.940  -->  00:03:53.750
But again, if we wanted to be really
flexible, we could even remove that and
76

76

00:03:53.750  -->  00:03:55.760
made that a really generic list.
77

77

00:03:55.760  -->  00:04:00.190
And left that up to the user, of
the class that implemented this interface
78

78

00:04:00.190  -->  00:04:02.560
to actually decide what
type to actually use.
79

79

00:04:02.560  -->  00:04:05.780
So I could have quite happily done that,
and we could have then gone back
80

80

00:04:05.780  -->  00:04:09.380
to our monster class, and actually look
to change, we would have to change a few
81

81

00:04:09.380  -->  00:04:12.350
little things around a little bit
with terms of the definitions.
82

82

00:04:12.350  -->  00:04:15.770
But ultimately you could have
given that extra functionality, or
83

83

00:04:15.770  -->  00:04:17.720
the extra flexibility I should say for
84

84

00:04:17.720  -->  00:04:21.090
the actual classes that we're
implementing in this interface.
85

85

00:04:21.090  -->  00:04:24.180
So keep that in mind that you can take it
one step further if you wanna go to that
86

86

00:04:24.180  -->  00:04:26.170
level and
leave yourself maximum flexibility.
87

87

00:04:26.170  -->  00:04:30.340
But sometimes there's a bit of a fine
line as to how generic you make it and
88

88

00:04:30.340  -->  00:04:31.100
how specific.
89

89

00:04:31.100  -->  00:04:34.270
Sometimes, somewhere just in
the middle might be the way to go.
90

90

00:04:34.270  -->  00:04:38.410
So as I mentioned, interfaces are by
definition, in Java, Abstract.
91

91

00:04:38.410  -->  00:04:41.730
So you can't use the new ISavable or
new list.
92

92

00:04:41.730  -->  00:04:45.180
You have to, instantiate a class that
interface, that implements I should say,
93

93

00:04:45.180  -->  00:04:46.020
the interface.
94

94

00:04:46.020  -->  00:04:48.070
And what I'm gonna do is I'm
gonna close this one down now,
95

95

00:04:48.070  -->  00:04:52.640
I'm gonna swap over because I've created
a new Project in IntelliJ or Abstraction.
96

96

00:04:52.640  -->  00:04:54.130
We are gonna actually
start talking some code.
97

97

00:04:54.130  -->  00:04:57.360
Because as I mentioned,
Java also allows abstract classes.
98

98

00:04:57.360  -->  00:04:59.490
And these are classes that define methods,
but
99

99

00:04:59.490  -->  00:05:02.280
do not provide an implementation
of those methods.
100

100

00:05:02.280  -->  00:05:05.560
The implementation itself is left
to the classes that inherit from
101

101

00:05:05.560  -->  00:05:06.780
the abstract class.
102

102

00:05:06.780  -->  00:05:09.650
So this is different from
inheriting from an interface.
103

103

00:05:09.650  -->  00:05:13.010
You can also inherit from
an actual class as well.
104

104

00:05:13.010  -->  00:05:17.060
So in the videos in inheritance we
created a very basic animal class, and
105

105

00:05:17.060  -->  00:05:19.220
then we extended it to create a dog.
106

106

00:05:19.220  -->  00:05:23.540
let's see if we can do something
similar now, using an abstract class.
107

107

00:05:23.540  -->  00:05:28.000
So I'm going to actually open up
this now and create a new class.
108

108

00:05:28.000  -->  00:05:30.960
New > Java class, and
I'm going to call it Animal.
109

109

00:05:33.550  -->  00:05:36.320
And what I'm gonna do is I'm gonna
make this an abstract class.
110

110

00:05:36.320  -->  00:05:40.430
So to do that we type in the word
abstract after our modifiers.
111

111

00:05:40.430  -->  00:05:45.740
So, public abstract class Animal,
and we can define the variable.
112

112

00:05:45.740  -->  00:05:53.290
So we just type private String name,
113

113

00:05:53.290  -->  00:05:58.470
we can have a constructor, which
we'll pass us the name of the animal.
114

114

00:05:58.470  -->  00:06:01.240
And let's also add a couple of
extra abstract methods, and
115

115

00:06:01.240  -->  00:06:03.860
this is the part I wanna show you for
eating and breathing.
116

116

00:06:03.860  -->  00:06:07.510
So we can put public abstract,
117

117

00:06:07.510  -->  00:06:11.630
give the abstract keyword after
the modifier, void, eat, and
118

118

00:06:11.630  -->  00:06:15.370
notice we'll just put a semicolon there,
so we haven't implemented this at all.
119

119

00:06:15.370  -->  00:06:19.490
And public abstract void breath.
120

120

00:06:21.300  -->  00:06:23.150
And we can also add a constructor.
121

121

00:06:23.150  -->  00:06:25.800
Sorry, we can also add a get or
I should say, to name.
122

122

00:06:25.800  -->  00:06:28.950
So there's an abstract class, and
you can see here what we are doing is,
123

123

00:06:28.950  -->  00:06:32.890
as we're about to see, we're gonna
inherit from this abstract class.
124

124

00:06:32.890  -->  00:06:35.940
And it's gonna let us define
behaviors that are necessary,
125

125

00:06:35.940  -->  00:06:38.460
without specifying how
they are to be performed.
126

126

00:06:38.460  -->  00:06:41.540
And this really ensures that
the subclasses, such as the dog,
127

127

00:06:41.540  -->  00:06:45.710
must actually implement them, because of
course, normally, in the normal class,
128

128

00:06:45.710  -->  00:06:49.500
if you're extending from a class,
you can create a base method in the class.
129

129

00:06:49.500  -->  00:06:52.500
But there's no requirement for
the other class,
130

130

00:06:52.500  -->  00:06:56.650
the class that is subclassing to
actually implement those methods.
131

131

00:06:56.650  -->  00:06:58.770
But by creating abstract methods,
132

132

00:06:58.770  -->  00:07:02.240
we actually are forcing the class that
is ultimately gonna implement from this
133

133

00:07:02.240  -->  00:07:04.950
abstract class to create those methods for
us.
134

134

00:07:04.950  -->  00:07:06.940
And that's why we've actually
marked them as abstract.
135

135

00:07:06.940  -->  00:07:10.870
The other methods and the other fuel
to this case are quite okay, and
136

136

00:07:10.870  -->  00:07:12.560
they work as normal Java code.
137

137

00:07:12.560  -->  00:07:13.710
But we're actually specifying and
138

138

00:07:13.710  -->  00:07:16.570
saying there's some abstract methods
here that have to be implemented.
139

139

00:07:16.570  -->  00:07:20.060
So if you did actually refer
back to the inheritance videos,
140

140

00:07:20.060  -->  00:07:21.960
you'll see that this is
very similar to that.
141

141

00:07:21.960  -->  00:07:24.430
Really the only difference is we've
actually marked it as abstract,
142

142

00:07:24.430  -->  00:07:27.210
the actual class definition
at the top there.
143

143

00:07:27.210  -->  00:07:30.030
And also we included those
abstract methods as well.
144

144

00:07:30.030  -->  00:07:34.180
So to keep things simple in this example,
I've actually removed the member variables
145

145

00:07:34.180  -->  00:07:37.010
like brain, weight, etc.,
just to keep things really simple.
146

146

00:07:37.010  -->  00:07:40.690
Now if we actually tried extend from this
I wanna show you what actually happens.
147

147

00:07:40.690  -->  00:07:43.780
So I'm gonna create a new class,
I'm gonna call it Dog.
148

148

00:07:45.680  -->  00:07:51.090
I'm gonna extends Animal.
149

149

00:07:51.090  -->  00:07:52.650
And I think I've put
Animal in the wrong place,
150

150

00:07:52.650  -->  00:07:55.020
Animal should have been in that package,
so I'm just gonna move that.
151

151

00:07:55.020  -->  00:07:58.330
Drag it and
it's asking where I want to move it to?
152

152

00:07:58.330  -->  00:08:00.710
I want to move it to that package,
so I'm gonna click on Refactor.
153

153

00:08:00.710  -->  00:08:03.650
And that should fix it up now, so
we're actually in the right place.
154

154

00:08:03.650  -->  00:08:05.070
But now you can see we've got
a different type of error.
155

155

00:08:05.070  -->  00:08:06.350
And if we have a look at that,
156

156

00:08:06.350  -->  00:08:09.690
it's actually telling us that class
must either been declared abstract or
157

157

00:08:09.690  -->  00:08:12.570
it needs to implement the abstract
method eight in animal.
158

158

00:08:12.570  -->  00:08:15.930
An actual fact there was two methods
there that needed there to implement, but
159

159

00:08:15.930  -->  00:08:18.140
this little error message is
only popping up the first one.
160

160

00:08:18.140  -->  00:08:19.160
So you can see that now,
161

161

00:08:19.160  -->  00:08:23.700
in order to be able to create a valid
class, we have to implement those methods.
162

162

00:08:23.700  -->  00:08:28.840
So we can do something like create
a constructor first, the Dog like so,
163

163

00:08:28.840  -->  00:08:32.180
and we'll just use the default
super to save the actual name,
164

164

00:08:32.180  -->  00:08:33.600
which is in the animal class.
165

165

00:08:35.180  -->  00:08:36.480
And we can do some overrides now.
166

166

00:08:36.480  -->  00:08:40.620
So we can do O10 and we can actually
go to implement or override,
167

167

00:08:40.620  -->  00:08:42.850
they'll both actually
pop up the same things.
168

168

00:08:42.850  -->  00:08:44.420
And you can see now we've
got two options here.
169

169

00:08:44.420  -->  00:08:48.440
We've got the two options there and
notice the little descriptions here or
170

170

00:08:48.440  -->  00:08:50.110
the little icons,
they were a little bit different.
171

171

00:08:50.110  -->  00:08:53.620
So getName you can see that's like
a method, but this one is also a method.
172

172

00:08:53.620  -->  00:08:55.930
But notice how it's got
a chunk taken out of it.
173

173

00:08:55.930  -->  00:08:59.220
Let's intelligize why I'm telling
you that this is an abstract method.
174

174

00:08:59.220  -->  00:09:01.990
So I can actually select both of those and
override them,
175

175

00:09:03.220  -->  00:09:06.630
which then makes the class valid and
I can just put something in the code.
176

176

00:09:07.640  -->  00:09:10.080
GetName + is eating.
177

177

00:09:11.650  -->  00:09:16.640
And for breath, Breath in,
178

178

00:09:16.640  -->  00:09:22.670
breath out, repeat, revise it.
179

179

00:09:22.670  -->  00:09:25.280
So that's no matter the developed
class that you can see.
180

180

00:09:25.280  -->  00:09:26.240
And also keep in mind that,
181

181

00:09:26.240  -->  00:09:30.750
because we did implement the get off
the name, getName in the Animal class it's
182

182

00:09:30.750  -->  00:09:33.790
a valuable class that I actually
used here in the eight method.
183

183

00:09:33.790  -->  00:09:36.740
And likewise from the constructor I
mentioned that we actually called,
184

184

00:09:36.740  -->  00:09:39.210
the constructor using the super keyword,
185

185

00:09:39.210  -->  00:09:42.300
which calls the constructor that's
actually in the animal class as well.
186

186

00:09:42.300  -->  00:09:45.610
So the important thing here is that
not all methods have to be abstract.
187

187

00:09:45.610  -->  00:09:48.600
This is one of the differences between
an abstract class and an interface,
188

188

00:09:48.600  -->  00:09:49.850
you can actually mix these up.
189

189

00:09:49.850  -->  00:09:52.390
An interface, if you recall,
if you go back and have a look.
190

190

00:09:52.390  -->  00:09:53.660
Actually it looks like
I closed the project,
191

191

00:09:53.660  -->  00:09:54.890
I probably should have just switched over.
192

192

00:09:54.890  -->  00:09:58.950
But with the previous interface which
you saw earlier in the video, the entire
193

193

00:09:58.950  -->  00:10:03.330
interface was completely abstract, and
there's no implementation whatsoever.
194

194

00:10:03.330  -->  00:10:06.070
So there's no opportunity for
us to enter fields.
195

195

00:10:06.070  -->  00:10:09.120
There wasn't any opportunity for
us to enter any other code.
196

196

00:10:09.120  -->  00:10:13.320
We purely were able just to specify
the methods that were gonna be used for
197

197

00:10:13.320  -->  00:10:17.510
that interface, that a class that was
implementing that particular interface
198

198

00:10:17.510  -->  00:10:19.970
had to actually fulfil in
order to make it valid.
199

199

00:10:19.970  -->  00:10:24.120
But as you can see in the case of Animal,
we can actually mix it up.
200

200

00:10:24.120  -->  00:10:25.800
We can actually add fields.
201

201

00:10:25.800  -->  00:10:28.390
We can add regular methods, or
a constructor in this case.
202

202

00:10:28.390  -->  00:10:31.010
But also a regular method as you
can see there with the constructor.
203

203

00:10:31.010  -->  00:10:35.450
But then we can also specify that certain
methods are abstract as you can see there.
204

204

00:10:35.450  -->  00:10:38.550
So in terms of actually using this,
it works now as you would expect.
205

205

00:10:38.550  -->  00:10:44.880
So if you go to write some code,
we could do something like
206

206

00:10:44.880  -->  00:10:50.160
Dog_dog = new Dog, Yorkie, dog.Breathe.
207

207

00:10:50.160  -->  00:10:53.580
Again, it behave,
you would think it would work, dog.eat.
208

208

00:10:53.580  -->  00:10:54.520
And I've actually run that.
209

209

00:10:58.600  -->  00:10:59.910
Breathe in, breathe out, repeat.
210

210

00:10:59.910  -->  00:11:02.700
Yorkie is eating, so
you can say that it's all working nicely,
211

211

00:11:02.700  -->  00:11:05.200
as you would think that it would be.
212

212

00:11:05.200  -->  00:11:08.290
Okay, so that's working as you think it
would but let's take this now to the next
213

213

00:11:08.290  -->  00:11:12.960
step and actually create another class,
which in this case is going to be bird.
214

214

00:11:14.400  -->  00:11:17.500
New > Java class, and
we're gonna call that Bird.
215

215

00:11:20.160  -->  00:11:23.910
Bird and we need to extend, cuz like
obviously, using the extends keyword,
216

216

00:11:23.910  -->  00:11:25.890
because it's a class, and Animal.
217

217

00:11:27.920  -->  00:11:32.830
And you create a constructor,
which works as you think it would, and
218

218

00:11:32.830  -->  00:11:34.250
let's also override those methods.
219

219

00:11:35.810  -->  00:11:36.700
Eat and Breathe, again.
220

220

00:11:38.030  -->  00:11:42.770
And we'll put for eating,
getName + is picking.
221

221

00:11:44.380  -->  00:11:48.520
And for breathing, well,
let's look at the sign, so
222

222

00:11:48.520  -->  00:11:52.720
it's breathe in, breathe out, repeat.
223

223

00:11:52.720  -->  00:11:57.340
Like so, and of course, we can link that
back to our main class, main method.
224

224

00:11:57.340  -->  00:11:59.630
Bird, bird = new Bird.
225

225

00:12:03.080  -->  00:12:03.880
Bird.breathe.
226

226

00:12:05.470  -->  00:12:07.010
Bird.eat.
227

227

00:12:07.010  -->  00:12:07.560
You can run that.
228

228

00:12:10.140  -->  00:12:11.790
We get the results, as you can see.
229

229

00:12:11.790  -->  00:12:14.260
Birds breathing, and
parrot is pecking, Yorkie's eating.
230

230

00:12:14.260  -->  00:12:15.480
So it's doing the right thing there.
231

231

00:12:15.480  -->  00:12:16.890
Now birds can also fly, so
232

232

00:12:16.890  -->  00:12:20.570
it could be a good idea to add
a fly method to our bird class.
233

233

00:12:20.570  -->  00:12:22.260
But, not all birds can fly,
234

234

00:12:22.260  -->  00:12:25.490
so implementing a fly method in
the bird class is not a good idea.
235

235

00:12:25.490  -->  00:12:29.460
Better idea would be to create an abstract
Bird class that extends Animal, and
236

236

00:12:29.460  -->  00:12:32.490
also has an abstract fly method
that individual Bird objects can
237

237

00:12:32.490  -->  00:12:33.680
implement as they're able to.
238

238

00:12:33.680  -->  00:12:35.080
So let's go ahead and
see how that would work.
239

239

00:12:35.080  -->  00:12:37.280
So we'll go through now and
modify our Bird class.
240

240

00:12:37.280  -->  00:12:40.390
Close this down to give us a bit of space.
241

241

00:12:40.390  -->  00:12:43.250
Now I'm gonna change this up here,
now we had public class Bird,
242

242

00:12:43.250  -->  00:12:44.450
I'm gonna make that abstract.
243

243

00:12:46.910  -->  00:12:51.670
Leave the constructor as it was and also
leave the two methods as they were, but
244

244

00:12:51.670  -->  00:12:54.380
also down the bottom,
let's add another abstract method.
245

245

00:12:54.380  -->  00:12:59.030
So public abstract void_fly.
246

246

00:13:00.150  -->  00:13:02.010
So that's another abstract
class at this point.
247

247

00:13:02.010  -->  00:13:07.660
So this is an abstract class that itself
is extending from another abstract class.
248

248

00:13:07.660  -->  00:13:11.700
It's implementing the required methods
that the Animal class requires it to,
249

249

00:13:11.700  -->  00:13:12.800
namely eat and breathe.
250

250

00:13:12.800  -->  00:13:15.650
But it's also defining
an abstract method fly.
251

251

00:13:15.650  -->  00:13:18.760
That ultimately has to be overridden
by another class as well.
252

252

00:13:18.760  -->  00:13:20.840
And of course we made this class abstract,
253

253

00:13:20.840  -->  00:13:23.120
which it needs to be in
order to do this anyway.
254

254

00:13:23.120  -->  00:13:26.080
So now that we've done that,
of course we go back to the main class
255

255

00:13:26.080  -->  00:13:30.060
we'll get an error because, hold on so
we can see what the error is.
256

256

00:13:30.060  -->  00:13:31.070
So Bird is abstract.
257

257

00:13:31.070  -->  00:13:32.370
It cannot be instantiated.
258

258

00:13:32.370  -->  00:13:33.870
Remember, we said that
earlier in the video,
259

259

00:13:33.870  -->  00:13:39.440
that you can't directly instantiate
a class that is abstract in anyway.
260

260

00:13:39.440  -->  00:13:41.540
So what we need to do is
actually create another class.
261

261

00:13:41.540  -->  00:13:45.750
So to do that, we'll change this, and
we'll actually create a Parrot class.
262

262

00:13:45.750  -->  00:13:48.350
Back here, and create a new class, Parrot.
263

263

00:13:50.990  -->  00:13:56.670
We can extend, extends Bird,
without a constructor.
264

264

00:13:58.200  -->  00:14:01.410
And all we need to do here,
is because the other methods are already
265

265

00:14:01.410  -->  00:14:04.230
overridden in the Bird class,
we only really need to do one.
266

266

00:14:04.230  -->  00:14:05.460
So if we go back there and have a look,
267

267

00:14:05.460  -->  00:14:09.260
and go to override, we can still override
Eat and Breath if we wanted to, if for
268

268

00:14:09.260  -->  00:14:13.380
some reason this type of bird had
a different way of eating or breathing.
269

269

00:14:13.380  -->  00:14:15.650
But really, all we wanna do
is override fly in this case,
270

270

00:14:15.650  -->  00:14:17.190
to make this class valid.
271

271

00:14:17.190  -->  00:14:18.190
So I'm gonna do that, and
272

272

00:14:18.190  -->  00:14:24.820
I'm gonna put something like
Flitting from branch to branch.
273

273

00:14:24.820  -->  00:14:27.920
So it's actually flying
effectively from branch to branch.
274

274

00:14:27.920  -->  00:14:32.490
And again parrots is automatically eat and
breath from the, and breath,
275

275

00:14:32.490  -->  00:14:35.730
I should say from bird, so we don't have
to re implement those methods again.
276

276

00:14:35.730  -->  00:14:38.200
That now has its own implementation for
fly.
277

277

00:14:38.200  -->  00:14:40.090
So if you go back to the main method now.
278

278

00:14:40.090  -->  00:14:43.470
We'll actually change this is
actually parrot, instead of a bird.
279

279

00:14:43.470  -->  00:14:45.090
Remembering that Parrot is
now extending from Bird.
280

280

00:14:46.830  -->  00:14:52.670
Parrot was set to new Parrot, and
now instead of typing Parrot as a name,
281

281

00:14:52.670  -->  00:14:59.430
we'll say it's an Australian ringneck,
and it's gonna be Parrot.breathe.
282

282

00:14:59.430  -->  00:15:00.230
That will still work.
283

283

00:15:01.730  -->  00:15:03.230
Parrot.eat.
284

284

00:15:03.230  -->  00:15:05.680
But we're also gonna do parrot.fly now.
285

285

00:15:06.680  -->  00:15:09.330
So if you run that, you can see
that there's no errors anymore.
286

286

00:15:11.850  -->  00:15:13.340
You can see now it's trying to ring that.
287

287

00:15:13.340  -->  00:15:16.230
It's pecking,
fitting from branch to branch.
288

288

00:15:16.230  -->  00:15:19.680
And just as another example to show
that we can do something different,
289

289

00:15:19.680  -->  00:15:21.840
let's create one more class.
290

290

00:15:21.840  -->  00:15:24.590
New > Java Class and
we'll call this one Penguin.
291

291

00:15:26.900  -->  00:15:30.790
And we got to extend from Bird again,
extends from bird.
292

292

00:15:32.720  -->  00:15:33.670
Create a constructor.
293

293

00:15:36.070  -->  00:15:39.140
And let's just override fly again.
294

294

00:15:40.880  -->  00:15:47.170
And we can put I'm not very good at that.
295

295

00:15:49.110  -->  00:15:50.650
Can I go for a swim instead.
296

296

00:15:54.350  -->  00:15:56.190
And that's our implementation of penguin.
297

297

00:15:56.190  -->  00:16:00.670
So going back to the main method again,
298

298

00:16:00.670  -->  00:16:05.690
we can just come down
here I can put Penguin,
299

299

00:16:05.690  -->  00:16:11.810
pengion = new Pengion,
Emperor and penguin.fly.
300

300

00:16:11.810  -->  00:16:13.150
And now, if we actually run that.
301

301

00:16:16.890  -->  00:16:20.490
You can see, we actually get the message
quite correctly, still, that in the case
302

302

00:16:20.490  -->  00:16:23.970
of the bird is straying, ringneck is
pecking, flitting from branch to branch,
303

303

00:16:23.970  -->  00:16:26.690
that we only printed out
the fly method for penguin.
304

304

00:16:26.690  -->  00:16:28.410
I'm not very good at that,
can I go for a swim instead?
305

305

00:16:28.410  -->  00:16:30.240
So, you can see that's
working quite nicely.
306

306

00:16:30.240  -->  00:16:31.650
So I'm gonna end this video here.
307

307

00:16:31.650  -->  00:16:35.010
In the next video what we're
gonna do is start talking about
308

308

00:16:35.010  -->  00:16:37.070
how this is different
from an interface and
309

309

00:16:37.070  -->  00:16:40.170
how to decide whether to use
an interface or an abstract class.
310

310

00:16:40.170  -->  00:16:41.690
So, I'll see you in the next video.
