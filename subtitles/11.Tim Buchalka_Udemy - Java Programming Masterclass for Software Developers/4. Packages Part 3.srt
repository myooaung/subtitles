1
1

00:00:05,390  -->  00:00:08,550
So continuing on with our
discussions about packages.
2

2

00:00:08,550  -->  00:00:12,010
The other thing you can actually
do what you're creating a class
3

3

00:00:12,010  -->  00:00:16,450
is you can actually specify a package and
will actually make that package for
4

4

00:00:16,450  -->  00:00:19,820
you automatically at the same
time as creating the class.
5

5

00:00:19,820  -->  00:00:23,710
Come up here to file,
new, create Java class.
6

6

00:00:23,710  -->  00:00:28,400
Normally I would just type player And
that should carry that
7

7

00:00:28,400  -->  00:00:31,440
to org.example.mypackage,
because I'm actually in that area.
8

8

00:00:31,440  -->  00:00:33,830
I've got clicked, so I click OK.
9

9

00:00:33,830  -->  00:00:36,790
You can see it's automatically
created that class in that folder,
10

10

00:00:36,790  -->  00:00:37,780
in that package.
11

11

00:00:37,780  -->  00:00:39,210
I'm gonna undo that.
12

12

00:00:40,840  -->  00:00:43,100
I can actually do that again, though.
13

13

00:00:43,100  -->  00:00:47,690
File -> New -> Java Class, and
this time, if I type a package name,
14

14

00:00:47,690  -->  00:00:51,550
com.example .game.Player for
arguments sake.
15

15

00:00:51,550  -->  00:00:52,450
Click on OK with that.
16

16

00:00:53,580  -->  00:00:57,050
And notice it's actually created
a package sort of within a package
17

17

00:00:57,050  -->  00:01:00,830
org.example.mypackage.com.example.game.
18

18

00:01:00,830  -->  00:01:04,140
That's clearly not what we want
in this particular case because
19

19

00:01:04,140  -->  00:01:07,870
we wanted to create a package Which
was just com dot example dot game.
20

20

00:01:07,870  -->  00:01:10,930
So it's important to, if you have got
something clicked here to the left,
21

21

00:01:10,930  -->  00:01:13,330
to probably click or
to definitely click source.
22

22

00:01:13,330  -->  00:01:17,670
So I'm going to undo that again, and
then come back to source this time or
23

23

00:01:17,670  -->  00:01:20,400
I can make sure, that's probably
the easiest way is to do that.
24

24

00:01:20,400  -->  00:01:25,500
And then click on file, new,
java class, and now if we type com dot
25

25

00:01:25,500  -->  00:01:31,160
example dot game dot player It
correctly creates the new package
26

26

00:01:31,160  -->  00:01:36,270
com.example.game and puts the new player
in there, the new player class in there.
27

27

00:01:36,270  -->  00:01:39,370
So what we're going to do now is we're
going to use a few classes from our
28

28

00:01:39,370  -->  00:01:40,430
interfaces challenge.
29

29

00:01:40,430  -->  00:01:43,840
So we're going to specifically use
the player class, and I know I've already
30

30

00:01:43,840  -->  00:01:48,970
created the player class, but also the
monsters class in the isaliable interface.
31

31

00:01:48,970  -->  00:01:51,040
We're gonna overwrite
the Player class as well.
32

32

00:01:51,040  -->  00:01:55,150
So we're gonna go back to the source
code for the InterfacesChallenge and
33

33

00:01:55,150  -->  00:01:56,230
if you haven't got this already.
34

34

00:01:56,230  -->  00:01:58,910
If you haven't typed it in yourself,
go back and
35

35

00:01:58,910  -->  00:02:02,070
you can actually download the source
code from the course itself.
36

36

00:02:02,070  -->  00:02:04,730
There's actually links there so
you can grab this source code.
37

37

00:02:04,730  -->  00:02:06,520
So I'm going into InterfacesChallenge.
38

38

00:02:06,520  -->  00:02:11,430
Go into my source folder, and down to and
the first one I'm gonna select is monster.
39

39

00:02:11,430  -->  00:02:15,490
Now you might think you can actually just
select it and drag, and it does seem like
40

40

00:02:15,490  -->  00:02:19,390
it's going to work, and you can see it's
highlighting in red the package it's going
41

41

00:02:19,390  -->  00:02:22,750
to put it to, going to place it,
but the thing is that's a move.
42

42

00:02:22,750  -->  00:02:25,570
And by moving something you're actually
deleting it from the source folder.
43

43

00:02:25,570  -->  00:02:27,770
So, probably don't want to do that.
44

44

00:02:27,770  -->  00:02:32,060
You don't want to delete the code that's
in the current interfaces challenge.
45

45

00:02:32,060  -->  00:02:33,570
Because that code will
then no longer work.
46

46

00:02:33,570  -->  00:02:35,170
Because that file won't be there anymore.
47

47

00:02:35,170  -->  00:02:38,740
So, a better option is to
come back to the finder.
48

48

00:02:38,740  -->  00:02:42,440
And again, you'd Windows explorer or
whatever your explorer is for
49

49

00:02:42,440  -->  00:02:44,220
your operating system.
50

50

00:02:44,220  -->  00:02:48,120
Select Copy, and Copy will be same for
all operating systems.
51

51

00:02:48,120  -->  00:02:49,170
There's a version there for you.
52

52

00:02:49,170  -->  00:02:52,470
So select Copy, come back to
the package you want and paste.
53

53

00:02:53,630  -->  00:02:56,800
This time you can see the message is Copy,
the name.
54

54

00:02:56,800  -->  00:02:57,990
It's giving us the full name and
55

55

00:02:57,990  -->  00:02:59,880
ultimately that'll be
the class name as well.
56

56

00:02:59,880  -->  00:03:04,080
And you can see that the folder it's
pointing it to matches the package com
57

57

00:03:04,080  -->  00:03:06,460
example game, com example game.
58

58

00:03:06,460  -->  00:03:08,010
And we click on OK.
59

59

00:03:09,050  -->  00:03:10,910
And it's been added successfully.
60

60

00:03:10,910  -->  00:03:12,430
We getting an error here because,
of course,
61

61

00:03:12,430  -->  00:03:16,380
we haven't yet got the savable interface,
but we're going to do that next.
62

62

00:03:16,380  -->  00:03:20,650
So I'm gonna go back and do the same
thing for that, our savable copy.
63

63

00:03:22,520  -->  00:03:24,210
Back to here, select the package.
64

64

00:03:24,210  -->  00:03:28,490
Right-click, paste, and
we're gonna click on OK.
65

65

00:03:28,490  -->  00:03:30,010
That's now added the interface.
66

66

00:03:30,010  -->  00:03:31,830
And that leaves us with the Player class.
67

67

00:03:31,830  -->  00:03:34,070
Now currently that's however empty.
68

68

00:03:34,070  -->  00:03:37,340
And what we're going to do is do the same
thing, we're gonna go back to Player.
69

69

00:03:37,340  -->  00:03:38,800
Right click, copy.
70

70

00:03:40,190  -->  00:03:42,420
Back here to com,
go to example.game, paste.
71

71

00:03:42,420  -->  00:03:45,460
And yes, we're going to use the same name.
72

72

00:03:45,460  -->  00:03:48,870
This time we get a dialog pop up
to tell us that it already exists.
73

73

00:03:48,870  -->  00:03:49,690
Do we want to overwrite it?
74

74

00:03:49,690  -->  00:03:51,100
Or do we want to skip it?
75

75

00:03:51,100  -->  00:03:53,920
We want to override it because we
want the version that came from
76

76

00:03:53,920  -->  00:03:57,780
the interface challenge so click on
okay and now we've got our three files.
77

77

00:03:57,780  -->  00:04:00,900
Just confirming, when it's doing this it
will actually fix the package name so
78

78

00:04:00,900  -->  00:04:04,980
if the old source code has a different
Package, when you're actually
79

79

00:04:04,980  -->  00:04:09,110
copying it into here IntelliJ is actually
changing the package in this code for you.
80

80

00:04:09,110  -->  00:04:11,030
So it's quite handy how
it's doing that for you.
81

81

00:04:11,030  -->  00:04:14,140
So what I'm about to do is create
a package for these three files,
82

82

00:04:14,140  -->  00:04:19,040
the Player.javamonster.java and
[INAUDIBLE] .java, So that we can
83

83

00:04:19,040  -->  00:04:22,760
actually use those in another project,
but before we do that we should actually
84

84

00:04:22,760  -->  00:04:27,160
update our main class and put in the test
code that comes back from the challenge,
85

85

00:04:27,160  -->  00:04:30,910
so that we can actually test to make sure
that things are working as they should.
86

86

00:04:30,910  -->  00:04:33,980
It's always a good idea before you create
a jar file, which is what we're doing,
87

87

00:04:33,980  -->  00:04:38,040
a library, Is to make sure that the code
is obviously working and tested.
88

88

00:04:38,040  -->  00:04:41,360
So, we'll go back one
more time to our finder.
89

89

00:04:41,360  -->  00:04:43,710
I'm going to select main,
I'm going to copy that.
90

90

00:04:45,290  -->  00:04:48,100
And we basically are gonna go in here
to [INAUDIBLE] example.game, and
91

91

00:04:48,100  -->  00:04:50,040
I'm gonna paste it in there.
92

92

00:04:50,040  -->  00:04:51,950
And I'm going to overwrite
the existing main.java.
93

93

00:04:51,950  -->  00:04:53,660
Actually, there wasn't a main.java.
94

94

00:04:53,660  -->  00:04:56,110
Cuz, of course,
I was thinking of the main.java down here,
95

95

00:04:56,110  -->  00:04:58,360
on org.example.mypackage.
96

96

00:04:58,360  -->  00:05:01,690
So if Dale got four classes
in our common.example.game.
97

97

00:05:01,690  -->  00:05:03,960
And what I am going to do now is
just remove this other package,
98

98

00:05:03,960  -->  00:05:07,670
this org.example.mypackage because
we no longer need that anymore.
99

99

00:05:07,670  -->  00:05:10,330
So I am going to right click that, delete.
100

100

00:05:12,780  -->  00:05:15,920
And I'm just going to double click
mine which is already selected.
101

101

00:05:15,920  -->  00:05:20,940
And it will just run that to
make sure that it's actually And
102

102

00:05:22,150  -->  00:05:24,710
you can see we got the same
output we got from the challenge.
103

103

00:05:24,710  -->  00:05:28,730
The interface challenge so the codes
obviously okay, there's no problems.
104

104

00:05:28,730  -->  00:05:31,490
We're not getting any compile errors and
you would
105

105

00:05:31,490  -->  00:05:35,120
obviously do your normal testing at this
point to make sure that actually worked.
106

106

00:05:35,120  -->  00:05:39,110
Assuming that's working, what we're
gonna do now is delete the main class.
107

107

00:05:40,640  -->  00:05:44,680
We're going to delete that and the reason
we're doing that is we're going to be
108

108

00:05:44,680  -->  00:05:48,680
importing this project, these three files,
effectively into a [INAUDIBLE] file
109

109

00:05:48,680  -->  00:05:52,350
that will then be imported into
another project all together and
110

110

00:05:52,350  -->  00:05:54,590
that project will have its own main class.
111

111

00:05:54,590  -->  00:05:57,840
So, we're specifically trying
to include only the code
112

112

00:05:57,840  -->  00:05:59,750
relating to the actual game itself.
113

113

00:05:59,750  -->  00:06:03,440
So now that we've actually removed the
other examples I'll actually remove this
114

114

00:06:03,440  -->  00:06:04,540
[INAUDIBLE] As well,
115

115

00:06:04,540  -->  00:06:07,830
that shows up for you to delete that as
well because we don't need that anymore.
116

116

00:06:09,190  -->  00:06:12,420
We're left now just with the content
example dot game, package, and
117

117

00:06:12,420  -->  00:06:13,570
the three files.
118

118

00:06:13,570  -->  00:06:17,230
So, what I wanna do next is go into
file and select project structure.
119

119

00:06:18,850  -->  00:06:21,020
What I wanna select is artifacts.
120

120

00:06:21,020  -->  00:06:24,200
We're going to create a new artifact so
we're gonna click on the plus button.
121

121

00:06:24,200  -->  00:06:28,610
We're gonna click on jar,
cuz jar stands for java archive and
122

122

00:06:28,610  -->  00:06:31,510
that's sort of like a zip file but
for java code.
123

123

00:06:31,510  -->  00:06:35,750
We're gonna select that and come over here
and select from modules with dependencies.
124

124

00:06:35,750  -->  00:06:38,890
When I do that, you should see that
package demo came up automatically
125

125

00:06:38,890  -->  00:06:40,070
as the module.
126

126

00:06:40,070  -->  00:06:42,810
Module is basically
the project in this case.
127

127

00:06:42,810  -->  00:06:46,670
The package [INAUDIBLE] although you can't
have moddable modules in a single project.
128

128

00:06:46,670  -->  00:06:48,550
In our case, we've only got just the one.
129

129

00:06:48,550  -->  00:06:52,880
Now if you wanted to make the Java file
executable, you'll specify main class.
130

130

00:06:52,880  -->  00:06:54,990
But we don't want to do that so
we're going to leave that blank.
131

131

00:06:54,990  -->  00:06:57,290
We're also going to extract
to the target Java as well.
132

132

00:06:57,290  -->  00:06:58,690
I'm going to click on okay to that.
133

133

00:07:00,720  -->  00:07:02,330
This actually gives us a folder.
134

134

00:07:02,330  -->  00:07:04,590
If you have a look in
this to the end of that.
135

135

00:07:04,590  -->  00:07:09,550
This actually shows us that this current
project slash out slash artifacts slash
136

136

00:07:09,550  -->  00:07:12,550
package demo underscore jar
which is the folder name.
137

137

00:07:12,550  -->  00:07:16,450
That's where it's going to actually
create this jar or PackageDemo.jar.
138

138

00:07:16,450  -->  00:07:19,830
So make sure you actually know where it's
gonna be creating that while having a look
139

139

00:07:19,830  -->  00:07:21,270
at the app directory.
140

140

00:07:21,270  -->  00:07:23,410
Once you've done that, click on OK.
141

141

00:07:23,410  -->  00:07:26,340
That's now specified the folder and
we can actually just go ahead and
142

142

00:07:26,340  -->  00:07:27,710
we can actually make the project.
143

143

00:07:31,050  -->  00:07:34,270
We could also at any time build artifacts.
144

144

00:07:34,270  -->  00:07:37,050
And build artifacts enables
you to actually build this.
145

145

00:07:37,050  -->  00:07:41,210
So I've packaged You can see that
we got just a clean, edit, rebuild.
146

146

00:07:41,210  -->  00:07:42,590
I'm just gonna click on build.
147

147

00:07:42,590  -->  00:07:45,890
And very quick process, you probably saw
something briefly down at the bottom
148

148

00:07:45,890  -->  00:07:49,510
left hand corner of the screen,
that jar file has now been created.
149

149

00:07:49,510  -->  00:07:52,440
And just to confirm if you go back now
to our finder, to our navigator and
150

150

00:07:52,440  -->  00:07:55,620
actually have a look, and
look now in package demo,
151

151

00:07:55,620  -->  00:07:59,480
because we finished with interfaces
challenge for now, Package demo out.
152

152

00:07:59,480  -->  00:08:02,950
It's no in the artifacts
folder that's been created.
153

153

00:08:02,950  -->  00:08:05,570
Package demo I'm just going to go draft,
folder, and
154

154

00:08:05,570  -->  00:08:09,480
there's our package demo dot Java there
has been created by that build prices.
155

155

00:08:09,480  -->  00:08:12,330
At this point, what we're going to do now
is we're going to actually create a new
156

156

00:08:12,330  -->  00:08:16,610
project and we're import that lobry and
make sure it still runs.
157

157

00:08:16,610  -->  00:08:19,850
So I'm going to click on file,
new, select project.
158

158

00:08:21,240  -->  00:08:24,640
Click Java and
next do what we normally do.
159

159

00:08:24,640  -->  00:08:26,450
Create a command like that.
160

160

00:08:26,450  -->  00:08:27,860
We'll call this one Game Test.
161

161

00:08:27,860  -->  00:08:33,470
[NOISE]
Into the base package line.
162

162

00:08:33,470  -->  00:08:38,330
Click on finish until it's asking us
do we want to close this project down?
163

163

00:08:38,330  -->  00:08:41,160
We'll have two away because
when we click on this window.
164

164

00:08:41,160  -->  00:08:43,200
Because we don't need
the package demo anymore.
165

165

00:08:43,200  -->  00:08:44,000
So I click on that.
166

166

00:08:45,200  -->  00:08:47,450
I've now got a very base
packages as you can see there.
167

167

00:08:48,580  -->  00:08:49,580
Base project I should say.
168

168

00:08:49,580  -->  00:08:53,270
Now at this point what we can now
do is we can actually import that.
169

169

00:08:53,270  -->  00:08:56,100
We'll take a look at the external
libraries, you can see there's
170

170

00:08:56,100  -->  00:08:59,390
a heap of libraries that are piled with
the Java ones that we have talked about.
171

171

00:08:59,390  -->  00:09:00,840
But our library's not in there yet,
obviously,
172

172

00:09:00,840  -->  00:09:02,660
because we haven't actually imported it.
173

173

00:09:02,660  -->  00:09:04,600
So what we're gonna do
now in this new project,
174

174

00:09:04,600  -->  00:09:08,420
where we want to actually use
the Java that we've created.
175

175

00:09:08,420  -->  00:09:10,980
Click on file, go into project structure.
176

176

00:09:10,980  -->  00:09:13,300
Then we want to go into libraries.
177

177

00:09:13,300  -->  00:09:14,230
And click on plus.
178

178

00:09:14,230  -->  00:09:17,220
And we're gonna specify that's
a new project library, a Java one.
179

179

00:09:18,630  -->  00:09:20,250
And we need to specify where that is.
180

180

00:09:20,250  -->  00:09:22,310
I'm gonna go down to our folder.
181

181

00:09:22,310  -->  00:09:27,480
We created it which wa in PackageDemo
> out > artifacts, and that one there.
182

182

00:09:27,480  -->  00:09:31,910
You can see it's a PackageDemo.jar, which
is in the PackageDemo_jar folder that was
183

183

00:09:31,910  -->  00:09:34,840
created when we had
the other project open.
184

184

00:09:34,840  -->  00:09:38,720
Click on OK And it actually tells us that
the library PackageDemo will be added to
185

185

00:09:38,720  -->  00:09:44,630
the selected modules, GameTest, which is
the name over here of our current project.
186

186

00:09:44,630  -->  00:09:47,080
We do want that, so we're gonna click
on OK to that, then we click on OK.
187

187

00:09:47,080  -->  00:09:51,670
So now that we've actually done that,
we External Libraries,
188

188

00:09:51,670  -->  00:09:54,730
we've now got another option here, we've
got PackageDemo showing as a library.
189

189

00:09:54,730  -->  00:10:00,840
And if we expand to that, you can see
we've got our package com.example.game And
190

190

00:10:00,840  -->  00:10:03,030
i've also got two classes there.
191

191

00:10:03,030  -->  00:10:06,270
Once in player, and
we need to face our savable.
192

192

00:10:06,270  -->  00:10:08,990
So, now that we've actually done that
you can presume the code is there
193

193

00:10:08,990  -->  00:10:11,100
executable code to actually run this so
194

194

00:10:11,100  -->  00:10:14,800
what we can actually do is add
some code to our actual java.
195

195

00:10:14,800  -->  00:10:17,280
And we should be able to run this now and
196

196

00:10:17,280  -->  00:10:20,930
instead of the previous interface has
changed, when we're running the code that
197

197

00:10:20,930  -->  00:10:24,890
was part of this project, we'll be running
the code that's really embedded or
198

198

00:10:24,890  -->  00:10:29,930
included in that packaged mo.jar so the
easiest way to do that is just to go back
199

199

00:10:29,930  -->  00:10:34,130
to our interface challenge and
what I'm going to do is copy the main.
200

200

00:10:37,030  -->  00:10:39,090
And I'm going to actually paste it.
201

201

00:10:39,090  -->  00:10:43,680
Actually I'm going to close down the
external libraries, open up our project.
202

202

00:10:43,680  -->  00:10:49,730
I'm going to paste it in com.timbuchalka,
which will overwrite the existing one.
203

203

00:10:49,730  -->  00:10:53,690
I'm going to do that, and confirming yes,
we do want to override it.
204

204

00:10:55,050  -->  00:10:56,350
Now did you see what happened there?
205

205

00:10:56,350  -->  00:10:59,870
There was a brief delay where
the import statements weren't there and
206

206

00:10:59,870  -->  00:11:01,830
then they actually
showed up automatically.
207

207

00:11:01,830  -->  00:11:05,930
And again, they're automatically coming up
because of the way we've configured our
208

208

00:11:05,930  -->  00:11:09,650
preferences, which I showed in, not
the last video, I think it might have been
209

209

00:11:09,650  -->  00:11:12,530
the video before, but an earlier
video in this section, in any case.
210

210

00:11:12,530  -->  00:11:17,450
It's automatically found these three
classes this time in the external library,
211

211

00:11:17,450  -->  00:11:19,300
packaged demo as you can see there.
212

212

00:11:19,300  -->  00:11:20,560
And that's why that we're able to run it.
213

213

00:11:20,560  -->  00:11:29,310
So if we actually then run this,
we're still getting the same results.
214

214

00:11:29,310  -->  00:11:31,650
The code is being executed, but of course,
215

215

00:11:31,650  -->  00:11:36,090
looking at our project We've only
got a main class, in [INAUDIBLE].
216

216

00:11:36,090  -->  00:11:37,690
We haven't got those other classes,
217

217

00:11:37,690  -->  00:11:40,800
because they're actually
coming from this package.
218

218

00:11:40,800  -->  00:11:43,210
So that's how to go about
actually adding a library,
219

219

00:11:43,210  -->  00:11:46,000
or creating a library as you saw,
and then adding it to your code.
220

220

00:11:46,000  -->  00:11:49,150
And that's a good idea if you want
to have some code that you reuse for
221

221

00:11:49,150  -->  00:11:49,910
multiple projects.
222

222

00:11:49,910  -->  00:11:52,180
You create a library
like we've done there.
223

223

00:11:52,180  -->  00:11:54,320
Then you import it using
the mechanism that I showed you.
224

224

00:11:54,320  -->  00:11:57,980
And then [INAUDIBLE] will actually do
the rest for you, as you saw there.
225

225

00:11:57,980  -->  00:11:59,780
So that's it for the package discussion.
226

226

00:11:59,780  -->  00:12:02,930
In the next video we'll go ahead and
actually do a package challenge.
227

227

00:12:02,930  -->  00:12:04,190
So I'll see you in the next video.
