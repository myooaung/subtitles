1
1

00:00:05,460  -->  00:00:08,940
In the last video, we started talking
about object oriented programming and
2

2

00:00:08,940  -->  00:00:09,810
classes.
3

3

00:00:09,810  -->  00:00:11,360
Let's continue with that in this video.
4

4

00:00:12,700  -->  00:00:15,670
Okay, moving forward,
let's create our method and
5

5

00:00:15,670  -->  00:00:19,610
what we want to do is allow
the method to update the model.
6

6

00:00:19,610  -->  00:00:21,250
So how do we do that?
7

7

00:00:21,250  -->  00:00:24,290
Well, we start by typing public and
again that's the excess modifier.
8

8

00:00:24,290  -->  00:00:27,760
So what we're doing is we're
saying we wanna create.
9

9

00:00:27,760  -->  00:00:31,810
We wanna make this method that I'm
about to create publicly accessible,
10

10

00:00:31,810  -->  00:00:33,500
much as we've done
the same with the class.
11

11

00:00:33,500  -->  00:00:36,370
So we're gonna put public void,
cuz it's not gonna return any data.
12

12

00:00:36,370  -->  00:00:39,900
We're gonna call it set model.
13

13

00:00:39,900  -->  00:00:43,330
Now notice how I started typing,
IntelliJ came up automatically and
14

14

00:00:43,330  -->  00:00:47,180
said, oh do you mean set, and it's got
automatically created the start of
15

15

00:00:47,180  -->  00:00:52,610
a method for all five of our variables,
our fields in this class.
16

16

00:00:52,610  -->  00:00:55,670
I can come down here and just press model,
and press enter over model,
17

17

00:00:55,670  -->  00:00:58,380
over set model,
to say that's the one I want.
18

18

00:00:58,380  -->  00:01:01,360
Then we're gonna introduce a parameter,
and
19

19

00:01:01,360  -->  00:01:06,210
the parameter we want is gonna be a string
because we want the other class to
20

20

00:01:06,210  -->  00:01:10,540
send the string that they want to be
created and for it to be updated in here.
21

21

00:01:10,540  -->  00:01:12,890
So we're gonna call that string model.
22

22

00:01:21,530  -->  00:01:22,950
That introduces another problem.
23

23

00:01:22,950  -->  00:01:27,770
Now the problem here is we've got
two different types of variables.
24

24

00:01:27,770  -->  00:01:31,970
If you think about it, we've got the field
that we have to find up here called model,
25

25

00:01:31,970  -->  00:01:33,890
but we've also got another
one in here called model.
26

26

00:01:33,890  -->  00:01:35,980
Now obviously this one
here is a parameter,
27

27

00:01:35,980  -->  00:01:37,520
that's been passed to this method.
28

28

00:01:38,590  -->  00:01:40,410
And this first one up here is a field.
29

29

00:01:40,410  -->  00:01:44,150
So how do we distinguish between the two,
because as far as IntelliJ or
30

30

00:01:44,150  -->  00:01:48,610
Java's concerned, we need to be specific
to say which one we want to update.
31

31

00:01:48,610  -->  00:01:52,830
What we want to do here is we want
to actually update this field,
32

32

00:01:52,830  -->  00:01:56,250
with the contents of the parameter that
was passed to us and updated in here.
33

33

00:01:56,250  -->  00:01:57,280
So how do we do that?
34

34

00:01:57,280  -->  00:02:02,130
Well, it turns out there's a way to do
that, and the way to do it is you type
35

35

00:02:02,130  -->  00:02:06,600
the word, this, when you're
referring to the field of the class.
36

36

00:02:06,600  -->  00:02:10,280
So in other words, if we're to update or
access this particular field.
37

37

00:02:10,280  -->  00:02:13,980
We put this,
the keyword this before the definition.
38

38

00:02:13,980  -->  00:02:18,330
So we type this dot,
you notice when I type model,
39

39

00:02:18,330  -->  00:02:22,580
it automatically comes up for
us from IntelliJ.
40

40

00:02:22,580  -->  00:02:23,180
Press Enter.
41

41

00:02:24,790  -->  00:02:28,150
Equals, then if you type model,
you notice here to the left,
42

42

00:02:28,150  -->  00:02:32,380
IntelliJ is showing you the little
p which stands for parameter.
43

43

00:02:32,380  -->  00:02:34,390
So it's saying now,
this is gonna be the model.
44

44

00:02:34,390  -->  00:02:38,520
Because we haven't specified this dot for
the second component,
45

45

00:02:38,520  -->  00:02:42,010
IntelliJ is gonna default to that for
us automatically, like so.
46

46

00:02:42,010  -->  00:02:46,230
So what that's done now it's said,
update this variable here
47

47

00:02:46,230  -->  00:02:50,080
with the contents of the parameter
model that was passed to us.
48

48

00:02:50,080  -->  00:02:53,100
So, that's a way of updating the model
49

49

00:02:53,100  -->  00:02:56,450
using a method instead of
trying to access it directly.
50

50

00:02:56,450  -->  00:02:59,530
So, just to show you how that would work,
we go back to our main class again.
51

51

00:02:59,530  -->  00:03:02,370
You notice we're getting
an error here now, and
52

52

00:03:02,370  -->  00:03:06,810
that's because I changed the definition,
which was the access modifier,
53

53

00:03:06,810  -->  00:03:09,190
which was public back to private again.
54

54

00:03:09,190  -->  00:03:11,120
So it's saying it can't access it.
55

55

00:03:11,120  -->  00:03:15,960
So if we actually want to update that
model, the better way of doing it,
56

56

00:03:15,960  -->  00:03:20,390
we put porsche dot and
notice how set models come up.
57

57

00:03:20,390  -->  00:03:20,890
Set model.
58

58

00:03:22,940  -->  00:03:25,160
Then what we do, we pass a parameter,
59

59

00:03:25,160  -->  00:03:28,660
the same parameters passed
with methods before, like so.
60

60

00:03:28,660  -->  00:03:32,910
And that is a way of then calling
the set model method for our object and
61

61

00:03:32,910  -->  00:03:35,200
updating it with the value Carrera.
62

62

00:03:35,200  -->  00:03:39,190
Now if we run that, it'll seem to work,
but we won't get any output.
63

63

00:03:39,190  -->  00:03:42,080
And of course the reason we won't get any
output is because we haven't anywhere
64

64

00:03:42,080  -->  00:03:42,820
outputted anything.
65

65

00:03:42,820  -->  00:03:45,820
So we just got a message to say that
it completed with exit code zero.
66

66

00:03:45,820  -->  00:03:49,840
Another thing I want to show you is what
happens if we don't do this first line
67

67

00:03:49,840  -->  00:03:50,700
here the new car.
68

68

00:03:50,700  -->  00:03:54,720
If I comment that first bit out there,
so we've just got a variable.
69

69

00:03:54,720  -->  00:03:56,380
So comment that out.
70

70

00:03:56,380  -->  00:03:57,720
So just define the variable.
71

71

00:03:57,720  -->  00:03:58,790
We haven't initialized it.
72

72

00:03:58,790  -->  00:04:00,810
We haven't put equals new car.
73

73

00:04:00,810  -->  00:04:04,660
Already, InteliJ is saying, variable
porsche may not have been initialized, so
74

74

00:04:04,660  -->  00:04:06,190
it's sort of saying there
could be a problem there.
75

75

00:04:06,190  -->  00:04:10,430
Cuz unlike data types,
there isn't default values with classes,
76

76

00:04:10,430  -->  00:04:15,280
you normally you have to initialize
them using the new keyword.
77

77

00:04:15,280  -->  00:04:16,860
If I don't do that, this is what happens.
78

78

00:04:18,100  -->  00:04:21,070
We get an error to say that it may
not have been initialized properly.
79

79

00:04:22,220  -->  00:04:25,490
So that's a compile error, but
also if we don't initialize it,
80

80

00:04:25,490  -->  00:04:26,860
we can actually get it to crash.
81

81

00:04:26,860  -->  00:04:30,440
For example, if I undo that change,
this is like for, more or
82

82

00:04:30,440  -->  00:04:32,220
less forcing it to crash.
83

83

00:04:33,780  -->  00:04:37,130
Lets sort of trick IntelliJ now and
run it.
84

84

00:04:37,130  -->  00:04:39,280
We actually get an exception which
you can't see too much there,
85

85

00:04:39,280  -->  00:04:41,250
but it's basically got an error.
86

86

00:04:41,250  -->  00:04:43,180
No point of exception.
87

87

00:04:43,180  -->  00:04:47,000
And what that essentially means is,
you have to find a type.
88

88

00:04:47,000  -->  00:04:51,430
Type code porsche, but hasn't been
initialized so in other words we haven't
89

89

00:04:51,430  -->  00:04:56,070
created an object from the template,
which of course is the class.
90

90

00:04:56,070  -->  00:04:58,870
So that's why you need to make
sure that new is always executed.
91

91

00:04:58,870  -->  00:04:59,720
And again, I sort of more or
92

92

00:04:59,720  -->  00:05:03,090
less just fudged this to actually
cause that error to come up anyway.
93

93

00:05:03,090  -->  00:05:06,500
The bottom line is I'm trying to
say here is that make sure when
94

94

00:05:06,500  -->  00:05:10,850
you're creating classes, you always
have to use this new, the keyword new,
95

95

00:05:10,850  -->  00:05:14,670
and then pass the name of the class,
and then the brackets.
96

96

00:05:14,670  -->  00:05:17,310
You need to initialize it with
the new keyword as I've shown there.
97

97

00:05:18,590  -->  00:05:20,010
So run that again to see what it does.
98

98

00:05:22,540  -->  00:05:24,890
And that works but
of course it's still not doing anything.
99

99

00:05:24,890  -->  00:05:28,910
So let's go back and add the ability for
us to print something out.
100

100

00:05:28,910  -->  00:05:30,300
So I go back to our Car class.
101

101

00:05:32,070  -->  00:05:33,620
Let's create a getter.
102

102

00:05:33,620  -->  00:05:35,980
So we've created what's called a setter.
103

103

00:05:35,980  -->  00:05:38,000
And again, these are standard methods.
104

104

00:05:38,000  -->  00:05:41,530
But it's just the word set and you see
that I'm about to use the word get.
105

105

00:05:41,530  -->  00:05:44,100
These are known as setters and
getters in Java.
106

106

00:05:44,100  -->  00:05:48,750
So I'm gonna create a getter
now called public String.
107

107

00:05:48,750  -->  00:05:51,790
We wanna return the type, and we wanna
return the type getModel this time.
108

108

00:05:54,790  -->  00:06:00,750
Then we return this.model, like so.
109

109

00:06:00,750  -->  00:06:04,710
And just to be clear there, when I type
that, this.model, notice that little f.
110

110

00:06:04,710  -->  00:06:08,460
Little f by IntelliJ is saying
this is a field, just so you know.
111

111

00:06:08,460  -->  00:06:12,630
So if ever you're unsure of the type of
variable or of the type of anything you
112

112

00:06:12,630  -->  00:06:17,070
can see on the screen here, IntelliJ is
really quite smart at showing you, so f,
113

113

00:06:17,070  -->  00:06:20,240
in that case for field, m for
method, so on and so forth.
114

114

00:06:20,240  -->  00:06:22,800
And there's also other things here,
the little padlock,
115

115

00:06:22,800  -->  00:06:25,640
is telling you that is a private
method because the padlock is on.
116

116

00:06:25,640  -->  00:06:29,120
But in the case of method,
the padlock is open.
117

117

00:06:29,120  -->  00:06:30,850
Which is saying, this is a public method.
118

118

00:06:30,850  -->  00:06:32,810
Which is accessible to other classes.
119

119

00:06:32,810  -->  00:06:37,340
So you'll get to know these various
graphics in IntelliJ which are really
120

120

00:06:37,340  -->  00:06:42,230
there to help you at a glance, see what
particular variable or method is set as.
121

121

00:06:42,230  -->  00:06:45,770
So this case you wanna return models,
so I'm gonna do, like so.
122

122

00:06:45,770  -->  00:06:48,250
And we've now got a method
123

123

00:06:48,250  -->  00:06:51,230
that can be call else where to
return what the current model is.
124

124

00:06:51,230  -->  00:06:53,030
So I go back to Main java.
125

125

00:06:54,050  -->  00:06:57,870
And if we now do our system output and
126

126

00:06:57,870  -->  00:07:03,740
we put model is +, and
we can type porsche dot,
127

127

00:07:03,740  -->  00:07:08,970
notice how there's two now there's get and
there's also set so we got to get now.
128

128

00:07:08,970  -->  00:07:12,160
Get model is the method we just created.
129

129

00:07:12,160  -->  00:07:12,680
So now if we run that.
130

130

00:07:16,080  -->  00:07:17,810
Model is Carrera.
131

131

00:07:17,810  -->  00:07:19,180
And just to show you what happens there,
132

132

00:07:19,180  -->  00:07:23,830
let's try also putting a print
before we've actually set the model.
133

133

00:07:23,830  -->  00:07:24,870
So obviously, this line here,
134

134

00:07:24,870  -->  00:07:28,930
this first line, is executed before
we've actually set the model to Carrera.
135

135

00:07:28,930  -->  00:07:30,150
So let's see what happens when we do that.
136

136

00:07:31,480  -->  00:07:33,770
You can see it says, model is null.
137

137

00:07:33,770  -->  00:07:39,230
Null is the eternal default state for
a class and also for a string, and
138

138

00:07:39,230  -->  00:07:45,710
if you recall we go back to Car.java,
String is actually a class.
139

139

00:07:45,710  -->  00:07:48,640
A string is a class,
it's actually a special class and
140

140

00:07:48,640  -->  00:07:52,820
we'll be talking more about string and
how it sort of bends the rules.
141

141

00:07:52,820  -->  00:07:57,690
And it doesn't need to be created in
the same way that we're creating this car.
142

142

00:07:57,690  -->  00:07:58,800
So it's early days yet but
143

143

00:07:58,800  -->  00:08:02,450
you can see the functionality of
Java is allowing us effectively,
144

144

00:08:02,450  -->  00:08:07,280
because string is a class we can have a
class within a class if that makes sense.
145

145

00:08:07,280  -->  00:08:11,710
So the model, model, engine, and
color are all classes in their own
146

146

00:08:11,710  -->  00:08:16,050
right because their of top string and
that's stored in a class of the name Car.
147

147

00:08:16,050  -->  00:08:20,320
So you can see how this concept of
a user defined data type is coming back,
148

148

00:08:20,320  -->  00:08:24,620
because we've introduced really
a super data type of type Car,
149

149

00:08:24,620  -->  00:08:27,870
that has got five fields.
150

150

00:08:27,870  -->  00:08:30,660
Doors, wheels, model, engine, and color.
151

151

00:08:30,660  -->  00:08:33,470
But we've also assigned
some methods to it as well.
152

152

00:08:33,470  -->  00:08:36,510
So both the state and
the behavior are part of the class.
153

153

00:08:36,510  -->  00:08:38,370
Very, very powerful as you can see.
154

154

00:08:38,370  -->  00:08:43,570
So let's talk about the concept of why
would we want to use getters and setters?
155

155

00:08:43,570  -->  00:08:46,930
So we'll get rid of that first
one cuz we don't need it anymore.
156

156

00:08:46,930  -->  00:08:48,290
But why are we doing this set model?
157

157

00:08:48,290  -->  00:08:50,130
What is the advantage to that?
158

158

00:08:50,130  -->  00:08:54,490
What that means, by using the .setmodel,
what we could do is, for example,
159

159

00:08:54,490  -->  00:08:56,700
we could go back to our car.java.
160

160

00:08:56,700  -->  00:08:59,050
And we can have a look in
this set model method.
161

161

00:08:59,050  -->  00:09:02,280
Our setter, and
we could do some validation.
162

162

00:09:02,280  -->  00:09:08,100
So what we could do is we could put
String validModel = model.toLowerCase,
163

163

00:09:08,100  -->  00:09:13,940
so we're gonna convert whatever was
passed to us to lower case for starters.
164

164

00:09:13,940  -->  00:09:19,090
Then let's introduce a test to make
sure that the only values we're
165

165

00:09:19,090  -->  00:09:24,260
gonna accept for this method are gonna
be a type Porsche and Holden.
166

166

00:09:24,260  -->  00:09:30,520
So what we could do in here,
we could put if(validModel.equals.
167

167

00:09:30,520  -->  00:09:35,420
Now .equals like this is a way to
test that a particular value of
168

168

00:09:35,420  -->  00:09:38,020
String is equal to another type.
169

169

00:09:38,020  -->  00:09:41,940
So we can, by typing validModel, which
is again of type String, .equals, and
170

170

00:09:41,940  -->  00:09:44,620
typing in what we wanna search
it against in brackets.
171

171

00:09:47,660  -->  00:09:50,690
We can actually test that, and that will
return true or false if they're equal.
172

172

00:09:50,690  -->  00:09:55,680
So what we're saying is if
the model equals a porsche, and
173

173

00:09:55,680  -->  00:10:05,040
then we can put the or operator,
or validModel.equals (holden).
174

174

00:10:05,040  -->  00:10:11,390
If that's the case, then what we can do,
is we can assign that value.
175

175

00:10:12,430  -->  00:10:16,570
So only if, what was passed to
us equals a porsche or a holden.
176

176

00:10:16,570  -->  00:10:19,670
Will we allow our internal state,
177

177

00:10:19,670  -->  00:10:23,640
our internal model field to be assigned
the value that's been passed to us.
178

178

00:10:23,640  -->  00:10:27,230
And that might because we've actually got
a role when we're creating our class to
179

179

00:10:27,230  -->  00:10:29,190
only define those two types.
180

180

00:10:29,190  -->  00:10:34,950
So maybe you want to put something
like else this.model = Unknown.
181

181

00:10:36,930  -->  00:10:39,740
So now also that I'm
putting this.model = model.
182

182

00:10:39,740  -->  00:10:42,550
So, I'm still saving
what was passed to us.
183

183

00:10:42,550  -->  00:10:43,630
But I'm actually testing it.
184

184

00:10:43,630  -->  00:10:46,980
When I'm testing it, I'm testing it
in lower case so we're testing for
185

185

00:10:46,980  -->  00:10:47,990
all scenarios.
186

186

00:10:47,990  -->  00:10:50,440
But we're actually testing
the lower case version.
187

187

00:10:50,440  -->  00:10:51,460
So we've now got that set up, so
188

188

00:10:51,460  -->  00:10:55,180
if we go back here to our main
java again and have a look.
189

189

00:10:55,180  -->  00:10:57,130
Actually, I've got that wrong.
190

190

00:10:57,130  -->  00:11:00,810
I'll change that to it'll be porsche cuz
it's the top, we'll say it's a carrera,
191

191

00:11:00,810  -->  00:11:04,310
instead of the porsche,
cuz that was the name of the car,
192

192

00:11:04,310  -->  00:11:09,640
and we'll put commodore
which is a type of old car.
193

193

00:11:09,640  -->  00:11:12,990
So we're now actually testing the model
to see whether it's carrera or commodore.
194

194

00:11:12,990  -->  00:11:13,780
Sorry about that.
195

195

00:11:13,780  -->  00:11:15,740
So we go back here now and do a test.
196

196

00:11:15,740  -->  00:11:18,440
Now, at the moment, we're passing Carrera,
which should be a valid one.
197

197

00:11:18,440  -->  00:11:18,940
So if we run that.
198

198

00:11:22,060  -->  00:11:23,520
Model is Carrera.
199

199

00:11:23,520  -->  00:11:24,560
So that accepted it.
200

200

00:11:24,560  -->  00:11:27,900
The fact that we're actually displaying
them, that the model was Carrera and
201

201

00:11:27,900  -->  00:11:29,180
have a look at our code again.
202

202

00:11:29,180  -->  00:11:34,760
We're only saving it to this type model
if it's a valid carrera or commodore.
203

203

00:11:34,760  -->  00:11:37,030
Otherwise, we're setting it to Unknown and
204

204

00:11:37,030  -->  00:11:40,040
then this is imprinting that
out with a get model, getter.
205

205

00:11:40,040  -->  00:11:44,130
So if we actually change that say to
a 911, which is another type of Porsche,
206

206

00:11:44,130  -->  00:11:44,820
we run that.
207

207

00:11:50,400  -->  00:11:54,860
We get, Model is Unknown, and that's
because in our validation, in our set
208

208

00:11:54,860  -->  00:11:59,460
model method, which is our setter,
we're actually explicitly only allowing
209

209

00:11:59,460  -->  00:12:04,080
Carreras and Commodores to be valid
models, that are created for this object.
210

210

00:12:04,080  -->  00:12:07,820
So you can see how it's very useful
to have this type of functionality,
211

211

00:12:07,820  -->  00:12:08,950
the validation.
212

212

00:12:08,950  -->  00:12:12,350
Not done at this point, but
done within the Car object itself
213

213

00:12:12,350  -->  00:12:15,090
via the methods that we're
setting up in our class.
214

214

00:12:15,090  -->  00:12:18,930
So it means when you're creating a class,
what you're doing is you can set up
215

215

00:12:18,930  -->  00:12:22,850
all the rules related to that class,
what is valid, what is not valid.
216

216

00:12:22,850  -->  00:12:26,710
And have it all set up, all that
functionality set up within the car
217

217

00:12:26,710  -->  00:12:30,670
class itself, so that is inherited
when we create the object.
218

218

00:12:30,670  -->  00:12:33,670
What that means is the code
that is creating objects,
219

219

00:12:33,670  -->  00:12:35,820
can't make invalid objects so to speak.
220

220

00:12:35,820  -->  00:12:39,460
In other words, it can't create in this
case, for example, it can't assign a model
221

221

00:12:39,460  -->  00:12:42,830
number, that we haven't defined
as being valid in our car class.
222

222

00:12:42,830  -->  00:12:47,790
So that's the reason, so that's really the
whole concept of encapsulation is that,
223

223

00:12:47,790  -->  00:12:51,180
we're not allowing people to
access the field directly
224

224

00:12:51,180  -->  00:12:54,720
by forcing in this case
to assign the model.
225

225

00:12:54,720  -->  00:12:59,220
Using a method, we can really make
sure that the data within our
226

226

00:12:59,220  -->  00:13:03,310
objects are more valid and
have been validated and are correct.
227

227

00:13:03,310  -->  00:13:06,690
So that's enough now about
the basics of classes.
228

228

00:13:06,690  -->  00:13:09,480
In the next video, what we're going to
do is we're gonna start talking about
229

229

00:13:09,480  -->  00:13:12,330
constructors, which is
this component here.
230

230

00:13:12,330  -->  00:13:16,210
So when we actually issued
that command new Car,
231

231

00:13:16,210  -->  00:13:20,370
you actually used a constructor
to create the car object.
232

232

00:13:20,370  -->  00:13:23,060
So we're gonna talk about
constructors what they are, and
233

233

00:13:23,060  -->  00:13:25,580
how to create our own
constructors in the next video.
