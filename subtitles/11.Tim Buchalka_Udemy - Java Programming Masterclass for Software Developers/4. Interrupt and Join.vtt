WEBVTT
1
1

00:00:05.210  -->  00:00:08.870
ok so we're talking about getting
another thread to interrupt
2

2

00:00:08.870  -->  00:00:13.610
another thread and we talked about using
the interrupt method to do that so means
3

3

00:00:13.610  -->  00:00:17.240
that we need to have a reference to the
thread instance and the easiest way that
4

4

00:00:17.240  -->  00:00:22.040
we can test this is to go back to our
main class and interrupt the another
5

5

00:00:22.040  -->  00:00:24.980
thread class because we've got a
reference to the another thread instance
6

6

00:00:24.980  -->  00:00:29.590
their so let's go back and do that and
what will do is so will call the
7

7

00:00:29.590  -->  00:00:32.480
interrupt method just before printing the second
line from the main thread
8

8

00:00:32.480  -->  00:00:39.460
so just after the my runnable thread and .start
come down here and we will put another thread...
9

9

00:00:39.460  -->  00:00:44.750
....and then on line 32 we got our regular second
10

10

00:00:44.750  -->  00:00:49.010
print out from the main thread but let's
also go back and change the run method
11

11

00:00:49.010  -->  00:00:53.390
in another thread because we wanted to
terminate if it does get interrupted and
12

12

00:00:53.390  -->  00:00:53.980
to do that
13

13

00:00:53.980  -->  00:00:57.490
it's quite simple all we really need to
do is return from the run method so we
14

14

00:00:57.490  -->  00:01:00.580
wanted do a return straight after we printed the message to say another
15

15

00:01:00.580  -->  00:01:04.940
thread wake me up so we add the return
there which would immediately terminate
16

16

00:01:04.940  -->  00:01:08.780
the another thread instance let's go
back to the main method and run this and
17

17

00:01:08.780  -->  00:01:09.740
see what happens
18

18

00:01:09.740  -->  00:01:17.500
and you can see that it finished quickly
and we got the message here and
19

19

00:01:17.500  -->  00:01:19.100
another thread woke me up
20

20

00:01:19.100  -->  00:01:24.860
and of course that message came from the
interrupted exception that was thrown the
21

21

00:01:24.860  -->  00:01:29.090
message their on line 17 and that came
about because we're used another thread
22

22

00:01:29.090  -->  00:01:33.250
.interrupt on line 30 and just to
confirm let's delete that line again now
23

23

00:01:33.250  -->  00:01:37.700
and just check that it still does do the interrupt correctly so run again
24

24

00:01:37.700  -->  00:01:43.610
now we should find that it works as it did
before pause their for three seconds three
25

25

00:01:43.610  -->  00:01:46.640
seconds have passed and we see the
regular output because this time it
26

26

00:01:46.640  -->  00:01:50.420
didn't get interrupted and it didn't
terminate at least up until the point of
27

27

00:01:50.420  -->  00:01:53.240
printing that second message then of
course it terminates because it's
28

28

00:01:53.240  -->  00:01:54.250
finished the run method
29

29

00:01:54.250  -->  00:01:58.360
so we see that we can put a thread to
sleep and it's possible to get it to
30

30

00:01:58.360  -->  00:02:02.680
wake up periodically to see if there's
any work for the thread to do so let's
31

31

00:02:02.680  -->  00:02:05.920
say we've got a situation where we know
that a thread can't continue to execute
32

32

00:02:05.920  -->  00:02:10.780
until another thread is terminated for
example we might know that there won't
33

33

00:02:10.780  -->  00:02:14.990
be any data to process until the thread
that's fetching the data
34

34

00:02:14.990  -->  00:02:19.970
has completed executing so in that
scenario rather than wake up the
35

35

00:02:19.970  -->  00:02:25.040
thread periodically to see if there's
any data we can join the thread to the
36

36

00:02:25.040  -->  00:02:29.330
thread that's fetching the data and when
we join a thread to a second thread
37

37

00:02:29.330  -->  00:02:33.320
what happens is the first ever thread
will wait for the second threat to terminate and
38

38

00:02:33.320  -->  00:02:35.150
then it will continue to execute
39

39

00:02:35.150  -->  00:02:38.240
so let's join the thread that we
assigned to the my runnable thread
40

40

00:02:38.240  -->  00:02:41.270
variable in the main class to the
another thread instance
41

41

00:02:41.810  -->  00:02:45.950
so the thread will then stop executing
until another thread is terminated at
42

42

00:02:45.950  -->  00:02:49.670
which point is gonna wake up and
continue executing now the code that runs
43

43

00:02:49.670  -->  00:02:53.960
on the my runnable threads contained in
an anonymous runnable object and that's
44

44

00:02:53.960  -->  00:02:55.070
perfectly okay
45

45

00:02:55.070  -->  00:02:58.730
it doesn't matter whether we join from a
thread instance we created using a
46

46

00:02:58.730  -->  00:03:03.980
runnable or a thread instance we created
using a subclass of the thread class
47

47

00:03:03.980  -->  00:03:08.090
all we really need is a reference to the
thread that ultimately want to join with
48

48

00:03:08.090  -->  00:03:13.850
so if you come back here and in the
my runnable thread and after the first
49

49

00:03:13.850  -->  00:03:14.960
print out
50

50

00:03:14.960  -->  00:03:20.060
we need to add a try-catch so....and as we're going to type in here
51

51

00:03:20.060  -->  00:03:26.150
another thread.....and we need to
catch interrupted exception again.....
52

52

00:03:26.150  -->  00:03:33.620
....i'm going to print
out in the same color for this
53

53

00:03:33.620  -->  00:03:36.980
particular thread which ANSI red....
54

54

00:03:40.100  -->  00:03:45.950
....
55

55

00:03:45.950  -->  00:03:48.890
and of course that will only happen if
indeed it was interrupted for some
56

56

00:03:48.890  -->  00:03:49.820
reason
57

57

00:03:49.820  -->  00:03:57.950
so again what we're doing here is
we are calling the join method of the thread
58

58

00:03:57.950  -->  00:04:00.620
that we want to join the current thread
to
59

59

00:04:00.620  -->  00:04:04.610
in this case we want to join to another
thread so we called a joint method using
60

60

00:04:04.610  -->  00:04:08.450
the another thread instance and you saw me do
that on line 27 and will notice that
61

61

00:04:08.450  -->  00:04:12.680
again as I mentioned join can throw the
interrupted exception and that's because
62

62

00:04:12.680  -->  00:04:15.680
just like with the sleep method join can terminate prematurely
63

63

00:04:16.460  -->  00:04:20.480
if this thread is interrupted by another
thread so when working with threads we
64

64

00:04:20.480  -->  00:04:23.570
already know we can't guarantee in which
all the threads will execute
65

65

00:04:24.260  -->  00:04:28.010
we also can't make assumptions about how
long threads will sleep or wait
66

66

00:04:28.010  -->  00:04:30.830
so really what we're getting at here
what I'm getting at here is really never
67

67

00:04:30.830  -->  00:04:32.060
any guarantees
68

68

00:04:32.060  -->  00:04:35.690
now when we run this code which we will about to
shortly another thread will
69

69

00:04:35.690  -->  00:04:39.560
put itself to sleep because of that we
should see the code running in the my
70

70

00:04:39.560  -->  00:04:41.300
runnable instance print hello
71

71

00:04:41.300  -->  00:04:45.530
then we hear it from again until another threads woken up we
72

72

00:04:45.530  -->  00:04:47.120
should be around three seconds
73

73

00:04:47.120  -->  00:04:50.060
at that point the my runnable thread is going to wake up and continue
74

74

00:04:50.060  -->  00:04:53.720
execution and we'll see that it will print that its running again
75

75

00:04:53.720  -->  00:04:58.970
of course what I need to do is to print that
message....
76

76

00:04:58.970  -->  00:05:06.710
...so i'm going to do that...
77

77

00:05:06.710  -->  00:05:10.820
....
78

78

00:05:10.820  -->  00:05:17.690
....so again what should happen is when we
run the main method another thread going
79

79

00:05:17.690  -->  00:05:21.080
to pull itself to sleep because of that
will see the code running on the my
80

80

00:05:21.080  -->  00:05:25.610
runnable thread instance print hello
the first part before the try then
81

81

00:05:25.610  -->  00:05:28.220
we wait here from again until another thread is
woken up
82

82

00:05:28.220  -->  00:05:32.420
we should be around three seconds at
that point then hopefully the my runnable
83

83

00:05:32.420  -->  00:05:32.870
thread
84

84

00:05:32.870  -->  00:05:36.200
wake up and continue execution then
we'll see that print that i've just
85

85

00:05:36.200  -->  00:05:38.480
added on line 28 showing on the screen
86

86

00:05:38.480  -->  00:05:45.950
so let's run this now and we can see
that that did work you can see that
87

87

00:05:45.950  -->  00:05:50.370
we have obviously the 3 seconds where
the another thread was sleeping
88

88

00:05:50.370  -->  00:05:54.630
and we also had the my runnable thread
printed out the first message hello from
89

89

00:05:54.630  -->  00:05:58.620
the anonymous classes implementation it
then pause and you notice that didn't
90

90

00:05:58.620  -->  00:06:04.380
then continue and show the second
message on line 28 up until we had seen
91

91

00:06:04.380  -->  00:06:06.870
that the another threads three seconds
have elapsed
92

92

00:06:06.870  -->  00:06:10.360
so in other words it did correctly wait
for that to terminate before it finished
93

93

00:06:10.360  -->  00:06:14.130
itself off and obviously this is quite a
simple scenario so we didn't really have
94

94

00:06:14.130  -->  00:06:17.400
any problems running this because we're
not interrupting any of the threads
95

95

00:06:17.400  -->  00:06:22.300
what would happen and if we go join
thread a to thread b and thread b
96

96

00:06:22.300  -->  00:06:23.430
never terminates
97

97

00:06:23.430  -->  00:06:27.000
well what happened is our application
wouldn't terminate and it would probably
98

98

00:06:27.000  -->  00:06:31.240
look as if it had actually died or
crashed so to prevent this
99

99

00:06:31.240  -->  00:06:35.220
situation we can pass a timeout value to
the joint method and you may have seen
100

100

00:06:35.220  -->  00:06:40.110
when I was typing in this method here
this method here on line 27 there was an
101

101

00:06:40.110  -->  00:06:41.860
overloaded method their
102

102

00:06:41.860  -->  00:06:45.000
so when you add a time out value thread a
is gonna wait for thread b to
103

103

00:06:45.000  -->  00:06:48.840
terminate or for the timeout period
whichever happens first so in other
104

104

00:06:48.840  -->  00:06:51.630
words if the thread b has been
terminated when the time out periods
105

105

00:06:51.630  -->  00:06:55.800
has pass and thread a will stop
waiting for that to happen so let's try
106

106

00:06:55.800  -->  00:07:00.180
this when we get back and we'll put in
another thread to sleep for five seconds
107

107

00:07:00.180  -->  00:07:01.680
so go back and make that change
108

108

00:07:01.680  -->  00:07:06.780
so make it five thousand milliseconds so 5 seconds then go back to main
109

109

00:07:06.780  -->  00:07:13.300
and in the join method on line 27 would
use the overloaded method and we'll get
110

110

00:07:13.300  -->  00:07:18.030
it to wait for two seconds and it uses a
millisecond just as the sleep method does
111

111

00:07:18.030  -->  00:07:22.110
so again 2000 being two
seconds and just to be consistent if I
112

112

00:07:22.110  -->  00:07:25.770
close the run window and probably
wouldn't hurt to put here another thread
113

113

00:07:25.770  -->  00:07:32.370
terminated or timed out , start running
again
114

114

00:07:32.910  -->  00:07:39.150
so if we do that we'll run that we'll
see what happens and we saw that the
115

115

00:07:39.150  -->  00:07:43.920
another thread terminated or timed out
and so it finished early and then we
116

116

00:07:43.920  -->  00:07:47.110
actually changed the text for this
at five seconds has pass and I'm awake
117

117

00:07:47.110  -->  00:07:51.630
remember we change that to
five seconds in the another thread if we
118

118

00:07:51.630  -->  00:07:59.010
go back there again now and change it
back to 3,000 and go ahead and remove
119

119

00:07:59.010  -->  00:08:01.030
the parameter from join again
120

120

00:08:01.030  -->  00:08:06.730
we should find it operates like it did
before 3 seconds have pass and i'm awake and
121

121

00:08:06.730  -->  00:08:09.970
another threads terminated or timed out
which is what we expect to happen
122

122

00:08:10.660  -->  00:08:14.530
so obviously when we join one thread to
another thread and the join
123

123

00:08:14.530  -->  00:08:15.430
times out
124

124

00:08:15.430  -->  00:08:19.000
we have to handle that case in a real
world application for example if the
125

125

00:08:19.000  -->  00:08:22.300
thread was waiting for data and the
join times out then we wouldn't have
126

126

00:08:22.300  -->  00:08:26.320
any data to process and we have to
somehow report that to the user you know error
127

127

00:08:26.320  -->  00:08:28.210
downloading or something like that
128

128

00:08:28.210  -->  00:08:30.910
now there are other methods in the
thread class we can use but we've
129

129

00:08:30.910  -->  00:08:33.190
covered the ones that we will use the
most
130

130

00:08:33.190  -->  00:08:36.640
the only other one i want to mention is
the set priority method and we can use
131

131

00:08:36.640  -->  00:08:40.390
that to try to influence the order in
which threads are run but they should
132

132

00:08:40.390  -->  00:08:43.830
really regard setting a threads
priority is more of a suggestion to the
133

133

00:08:43.830  -->  00:08:46.470
jvm in the operating system rather than
a command
134

134

00:08:46.470  -->  00:08:50.200
in fact some operating systems don't
support this set priority at all and
135

135

00:08:50.200  -->  00:08:54.490
will ignore it as usual never assume that
setting priorities will force threads to
136

136

00:08:54.490  -->  00:08:58.060
run in a particular order it's really
ultimately up to the jvm and the
137

137

00:08:58.060  -->  00:09:01.540
operating system is to how that runs
and just out of interest to learn more
138

138

00:09:01.540  -->  00:09:04.270
about the set priority method and the
other methods available in the thread
139

139

00:09:04.270  -->  00:09:05.170
class
140

140

00:09:05.170  -->  00:09:08.110
check out the documentation and I'm just
going to bring up on the screen so you
141

141

00:09:08.110  -->  00:09:09.250
can have a look
142

142

00:09:09.250  -->  00:09:17.580
....and there's the link on the screen
143

143

00:09:17.580  -->  00:09:21.400
so do check that out to find out
more about some of these other methods
144

144

00:09:21.400  -->  00:09:26.200
and also about the set priority method quite
useful information there for you to find
145

145

00:09:26.200  -->  00:09:28.720
a little bit more about to the thread
class
146

146

00:09:28.720  -->  00:09:32.920
ok so that ends our introduction to
threads and concurrency in the next
147

147

00:09:32.920  -->  00:09:36.250
video moving forward we're going to look
at how working with threads can lead to
148

148

00:09:36.250  -->  00:09:40.960
nasty bugs that can be very difficult to
debug and ultimately show you how to get
149

149

00:09:40.960  -->  00:09:43.080
around those as well so see you in the
next video
