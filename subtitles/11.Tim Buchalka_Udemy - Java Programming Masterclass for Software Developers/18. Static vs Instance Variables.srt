1
1

00:00:04,720  -->  00:00:06,730
Let's discuss the differences now
2

2

00:00:06,730  -->  00:00:09,490
between static variables and instance
3

3

00:00:09,490  -->  00:00:13,209
variables so firstly static variables by
4

4

00:00:13,209  -->  00:00:15,369
using the keyword static the static
5

5

00:00:15,369  -->  00:00:17,320
variables are also known as static
6

6

00:00:17,320  -->  00:00:20,260
member variables every instance of the
7

7

00:00:20,260  -->  00:00:23,920
class shares the same static variable so
8

8

00:00:23,920  -->  00:00:26,320
if changes made to that variable all
9

9

00:00:26,320  -->  00:00:28,090
other instances of that class will see
10

10

00:00:28,090  -->  00:00:30,700
the effect of that change static
11

11

00:00:30,700  -->  00:00:33,070
variables aren't used very often but can
12

12

00:00:33,070  -->  00:00:35,110
sometimes be very useful for example
13

13

00:00:35,110  -->  00:00:37,870
when reading user input using scat the
14

14

00:00:37,870  -->  00:00:39,850
ER scanner class we can declare scanner
15

15

00:00:39,850  -->  00:00:42,909
as a static variable and that way all
16

16

00:00:42,909  -->  00:00:45,010
the static methods can access that
17

17

00:00:45,010  -->  00:00:48,190
scanner directly now in the following
18

18

00:00:48,190  -->  00:00:51,280
example we've got a class called dog and
19

19

00:00:51,280  -->  00:00:53,670
it's got a static variable called name
20

20

00:00:53,670  -->  00:00:56,949
now there's a constructor that sets the
21

21

00:00:56,949  -->  00:00:59,589
static variable to the parameter value
22

22

00:00:59,589  -->  00:01:01,839
passed to the constructor and we've got
23

23

00:01:01,839  -->  00:01:03,399
a method there called print name which
24

24

00:01:03,399  -->  00:01:05,620
isn't static so that's a pretty simple
25

25

00:01:05,620  -->  00:01:08,980
class and inside main we're creating two
26

26

00:01:08,980  -->  00:01:11,440
instances of the dog class with the line
27

27

00:01:11,440  -->  00:01:13,930
dog Rex equals new dog in parentheses
28

28

00:01:13,930  -->  00:01:15,970
double quotes Rex we're creating an
29

29

00:01:15,970  -->  00:01:17,230
instance of the dog class and then we're
30

30

00:01:17,230  -->  00:01:18,610
passing the string Rex as a parameter
31

31

00:01:18,610  -->  00:01:20,950
and that'll be the name of the dog in
32

32

00:01:20,950  -->  00:01:21,970
the next line we've got a similar
33

33

00:01:21,970  -->  00:01:24,550
situation just passing the parameter at
34

34

00:01:24,550  -->  00:01:27,130
the parameter which will be used as the
35

35

00:01:27,130  -->  00:01:30,280
name as fluffy so they'll be calling the
36

36

00:01:30,280  -->  00:01:31,600
print name method on both of the
37

37

00:01:31,600  -->  00:01:33,310
instances so they're just regular
38

38

00:01:33,310  -->  00:01:35,590
instance methods because they aren't so
39

39

00:01:35,590  -->  00:01:37,930
defined using static so both method
40

40

00:01:37,930  -->  00:01:39,460
calls will print
41

41

00:01:39,460  -->  00:01:41,920
fluffy so you might be wondering why is
42

42

00:01:41,920  -->  00:01:43,540
that the case why would both methods
43

43

00:01:43,540  -->  00:01:45,580
here print fluffy well remember that
44

44

00:01:45,580  -->  00:01:47,620
static variables are shared between
45

45

00:01:47,620  -->  00:01:50,020
instances so in other words once we
46

46

00:01:50,020  -->  00:01:52,780
change the static variable all instances
47

47

00:01:52,780  -->  00:01:55,390
will see that change we made so what we
48

48

00:01:55,390  -->  00:01:57,010
call a constructor with parameters
49

49

00:01:57,010  -->  00:01:59,800
fluffy it modified the static variable
50

50

00:01:59,800  -->  00:02:02,290
name and because both instances are
51

51

00:02:02,290  -->  00:02:03,880
sharing that variable that's why it
52

52

00:02:03,880  -->  00:02:06,520
prints fluffy twice so you could also
53

53

00:02:06,520  -->  00:02:09,159
say that all dogs have the same name but
54

54

00:02:09,159  -->  00:02:11,409
that's logically incorrect in real life
55

55

00:02:11,409  -->  00:02:12,819
of course every dog has a different name
56

56

00:02:12,819  -->  00:02:14,800
it's going to breed and so on so
57

57

00:02:14,800  -->  00:02:16,180
hopefully now you can see how static
58

58

00:02:16,180  -->  00:02:18,580
variables can be used in a
59

59

00:02:18,580  -->  00:02:20,800
really sometimes as in this example when
60

60

00:02:20,800  -->  00:02:24,100
perhaps you were assuming that the dog's
61

61

00:02:24,100  -->  00:02:26,410
name would change with each instance of
62

62

00:02:26,410  -->  00:02:27,760
the class so that would be a scenario
63

63

00:02:27,760  -->  00:02:31,000
where using a static variable probably
64

64

00:02:31,000  -->  00:02:32,590
wouldn't be a good idea using a regular
65

65

00:02:32,590  -->  00:02:34,600
instance variable would make a lot more
66

66

00:02:34,600  -->  00:02:36,940
sense in this particular example all
67

67

00:02:36,940  -->  00:02:38,440
right so let's move on now to instance
68

68

00:02:38,440  -->  00:02:41,800
variables so firstly they don't use the
69

69

00:02:41,800  -->  00:02:43,420
static keyword when you're defining them
70

70

00:02:43,420  -->  00:02:45,370
now they're also known as fields or
71

71

00:02:45,370  -->  00:02:48,160
member variables unlike a static
72

72

00:02:48,160  -->  00:02:50,680
variable instance variables belong to a
73

73

00:02:50,680  -->  00:02:53,770
specific instance of a class each
74

74

00:02:53,770  -->  00:02:56,800
instance has its own copy of an instance
75

75

00:02:56,800  -->  00:02:58,990
variable so every instance can have a
76

76

00:02:58,990  -->  00:03:02,380
different value or state and instance
77

77

00:03:02,380  -->  00:03:04,990
variables represent the state of a
78

78

00:03:04,990  -->  00:03:07,810
specific instance of a class let's see
79

79

00:03:07,810  -->  00:03:11,470
an example using instance variables so
80

80

00:03:11,470  -->  00:03:13,300
in this example we've again we've got a
81

81

00:03:13,300  -->  00:03:14,920
very similar code to what we looked at
82

82

00:03:14,920  -->  00:03:17,230
earlier in the video but this time the
83

83

00:03:17,230  -->  00:03:19,690
variable name in the dog class isn't
84

84

00:03:19,690  -->  00:03:21,760
static so it's just a regular instance
85

85

00:03:21,760  -->  00:03:24,070
variable so once again the constructor
86

86

00:03:24,070  -->  00:03:26,320
is setting the value from the parameter
87

87

00:03:26,320  -->  00:03:28,690
passed to that constructor so now the
88

88

00:03:28,690  -->  00:03:30,580
card will print Rex and on the next line
89

89

00:03:30,580  -->  00:03:32,470
fluffy and that's because we're using
90

90

00:03:32,470  -->  00:03:35,080
instance variables and each instance of
91

91

00:03:35,080  -->  00:03:38,110
the class has its own state or own
92

92

00:03:38,110  -->  00:03:41,260
values for any very variables that have
93

93

00:03:41,260  -->  00:03:43,269
been defined so in other words now there
94

94

00:03:43,269  -->  00:03:44,920
be dogs got its own copy of the name
95

95

00:03:44,920  -->  00:03:48,100
variable we can also say that it's
96

96

00:03:48,100  -->  00:03:49,959
basically not shared like it was before
97

97

00:03:49,959  -->  00:03:51,820
in the earlier example he's using a
98

98

00:03:51,820  -->  00:03:54,280
static variable so in most cases you'd
99

99

00:03:54,280  -->  00:03:56,380
probably want to use instance variables
100

100

00:03:56,380  -->  00:03:58,720
but there will be scenarios when it can
101

101

00:03:58,720  -->  00:04:01,450
be useful to use a static variable and
102

102

00:04:01,450  -->  00:04:03,670
in the earlier example and previously we
103

103

00:04:03,670  -->  00:04:06,550
talked about using a scanner as a static
104

104

00:04:06,550  -->  00:04:07,989
variable so that it could be shared
105

105

00:04:07,989  -->  00:04:10,120
across any static methods when you're
106

106

00:04:10,120  -->  00:04:11,260
reading user input
107

107

00:04:11,260  -->  00:04:13,690
so that's instance and static variables
108

108

00:04:13,690  -->  00:04:17,820
let's move on now to the next video.
