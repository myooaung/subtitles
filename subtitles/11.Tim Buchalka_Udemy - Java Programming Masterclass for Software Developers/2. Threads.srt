1
1

00:00:05,200  -->  00:00:10,390
so I've created a new IntelliJ
project and I've called it threads so go
2

2

00:00:10,390  -->  00:00:15,490
ahead and do that and of course this is
just a basic console application so we
3

3

00:00:15,490  -->  00:00:28,090
just put in a simple print out....and we run that of
4

4

00:00:28,090  -->  00:00:33,340
course you've seen something similar
million times so far in the course and
5

5

00:00:33,340  -->  00:00:37,600
we see the output and this is the
application running our code on the main
6

6

00:00:37,600  -->  00:00:41,410
thread and obviously that includes the
code in the main method that we would
7

7

00:00:41,410  -->  00:00:44,200
just to add it to with our system.out.printline
8

8

00:00:44,200  -->  00:00:48,570
so let's make this a little bit more
exciting let's go ahead and create a
9

9

00:00:48,570  -->  00:00:49,320
thread
10

10

00:00:49,320  -->  00:00:53,680
so this that we can do this in two ways
the first way is to create an instance
11

11

00:00:53,680  -->  00:00:55,750
of the thread class
12

12

00:00:55,750  -->  00:00:59,710
let's think about what we want to do
first what we try to do here is to kick
13

13

00:00:59,710  -->  00:01:04,870
off a thread that's going to run some
code so we need a way to tell the thread
14

14

00:01:04,870  -->  00:01:09,130
what code we want to run and we're gonna
do that by creating a subclass of the
15

15

00:01:09,130  -->  00:01:12,310
thread class and then overriding the run
method
16

16

00:01:12,310  -->  00:01:15,540
so rather than creating a thread
instance we're going to create an
17

17

00:01:15,540  -->  00:01:20,790
instance of a subclass so let's create
the subclass first so come over here to
18

18

00:01:20,790  -->  00:01:26,130
our source folder and i right click that
and create a new class
19

19

00:01:26,130  -->  00:01:29,130
i'm going to call that one another
thread....
20

20

00:01:31,820  -->  00:01:38,750
we need to override the run class but
before I do that I need to extend from
21

21

00:01:38,750  -->  00:01:43,700
the thread class so we can access to
those methods we type....
22

22

00:01:43,700  -->  00:01:48,860
....and now we
can override we get the additional
23

23

00:01:48,860  -->  00:01:52,220
options so we're going to select the run
method that is the one we want to
24

24

00:01:52,220  -->  00:01:58,610
override and we're going to remove the
super....because what we want to do
25

25

00:01:58,610  -->  00:02:02,150
is put the code that we want to be executed
so in this case we're just going to
26

26

00:02:02,150  -->  00:02:03,800
print out another console message
27

27

00:02:03,800  -->  00:02:09,860
.....so now that we've done that let's switch
28

28

00:02:09,860  -->  00:02:11,630
back to our main class
29

29

00:02:11,630  -->  00:02:16,100
so after the main thread runs the console
we are going to create an instance of the
30

30

00:02:16,100  -->  00:02:19,430
another thread class based on the class
we just created
31

31

00:02:19,430  -->  00:02:28,130
so to do that we type....
32

32

00:02:28,640  -->  00:02:35,630
....and when we do
33

33

00:02:35,630  -->  00:02:36,700
that and run it
34

34

00:02:36,700  -->  00:02:43,480
you still only see the output from the
main class and that's because we have
35

35

00:02:43,480  -->  00:02:47,200
defined a thread but we haven't invoke
the run method yet so we need to
36

36

00:02:47,200  -->  00:02:51,650
actually invoke the run method so that
it execute for us
37

37

00:02:51,650  -->  00:02:56,630
you might be thinking ok how do
we execute this do we used the run method
38

38

00:02:56,630  -->  00:02:59,450
well in actual fact we use the start
method
39

39

00:02:59,450  -->  00:03:05,780
so....and what
that does is it enables to jvm to run
40

40

00:03:05,780  -->  00:03:12,200
the run method for the thread and if you
run that you can see hello from another
41

41

00:03:12,200  -->  00:03:15,860
thread so clearly the thread has now
run and executed the code that we
42

42

00:03:15,860  -->  00:03:20,690
defined in the run method so again it is
important here to remember that we have
43

43

00:03:20,690  -->  00:03:24,170
to create an instance of the thread
which we did on line 8
44

44

00:03:24,170  -->  00:03:26,900
but then we also have to start the
thread independent of that which we did
45

45

00:03:26,900  -->  00:03:30,650
an on line 9 so lets now print
something from the main thread after
46

46

00:03:30,650  -->  00:03:34,400
we've started the other thread so after
line 9
47

47

00:03:34,400  -->  00:03:37,400
we want to send a message....
48

48

00:03:38,050  -->  00:03:41,050
.....
49

49

00:03:43,570  -->  00:03:49,120
so let's run that you can see we've got
the output on the screen
50

50

00:03:49,120  -->  00:03:53,650
remember at this point that when we run
we might see the second line from the
51

51

00:03:53,650  -->  00:03:57,160
main thread printed before the line of
the other thread and this is going to
52

52

00:03:57,160  -->  00:04:01,120
vary so we might have to run a few
times just to see that this happens but if we run
53

53

00:04:01,120  -->  00:04:02,020
it again
54

54

00:04:02,020  -->  00:04:05,020
running a few more times
55

55

00:04:06,970  -->  00:04:15,340
we can never assume it's going to run in
the same order and it really does depend
56

56

00:04:15,340  -->  00:04:18,310
on the timings how long a particular
thread takes to run
57

57

00:04:18,310  -->  00:04:22,450
so in this case it's fairly consistent
given that it's just outputting but what we
58

58

00:04:22,450  -->  00:04:27,040
can do here is when we are dealing with
threads is keep in mind that it's up to
59

59

00:04:27,040  -->  00:04:31,630
the system to schedule when the threads
will run and in relation to that we can
60

60

00:04:31,630  -->  00:04:35,860
influence the order of execution by
setting a particular threads priority
61

61

00:04:35,860  -->  00:04:39,610
but even with that said we can never
assume that threads are going to run in a
62

62

00:04:39,610  -->  00:04:40,720
particular order
63

63

00:04:40,720  -->  00:04:44,320
so keep that in mind that although here
it seems to be very consistent with when
64

64

00:04:44,320  -->  00:04:47,770
running at each time and we're getting
the same output each time that isn't
65

65

00:04:47,770  -->  00:04:52,510
guaranteed because ultimately the
decision for the priority in terms of
66

66

00:04:52,510  -->  00:04:56,680
which threads are running even though we
can influence that to a degree by setting
67

67

00:04:56,680  -->  00:04:57,700
the threads priority
68

68

00:04:57,700  -->  00:05:01,810
it's up to the system itself to schedule
when those threads will ultimately run
69

69

00:05:01,810  -->  00:05:05,710
now rather than creating a named class
for the other thread
70

70

00:05:05,710  -->  00:05:09,790
we could also have created an anonymous
class and this is useful if you only
71

71

00:05:09,790  -->  00:05:14,080
ever going to want to run the code once
in that situation and anonymous
72

72

00:05:14,080  -->  00:05:18,970
class would work and is probably easy to
configure but if you intend to run on the same code
73

73

00:05:18,970  -->  00:05:22,900
several times and creating a
class for the thread like we did with the
74

74

00:05:22,900  -->  00:05:26,110
another thread class would make more
sense and have a better result
75

75

00:05:26,110  -->  00:05:29,890
but notice here that I said run the code
several times and not start the thread
76

76

00:05:29,890  -->  00:05:34,030
several times things to keep in mind
here is we're not allowed to start the
77

77

00:05:34,030  -->  00:05:35,950
same instance of a thread
78

78

00:05:35,950  -->  00:05:40,300
more than once so in other words if you
create a subclass of thread you want to
79

79

00:05:40,300  -->  00:05:42,910
execute the code in the run method more
than once
80

80

00:05:42,910  -->  00:05:47,050
then what you have to do is create a new
instance of the subclass every time you
81

81

00:05:47,050  -->  00:05:47,920
want to run it
82

82

00:05:47,920  -->  00:05:52,510
main method to execute you cannot start
a thread instance that is already run in
83

83

00:05:52,510  -->  00:05:53,770
other words
84

84

00:05:53,770  -->  00:05:57,340
so let's try starting the instance of
another thread again just to show that
85

85

00:05:57,340  -->  00:05:58,510
it won't work
86

86

00:05:58,510  -->  00:06:01,630
we should actually see an exception if
we try and do that so we'll go ahead and
87

87

00:06:01,630  -->  00:06:06,640
add the code to do that so we type....
88

88

00:06:07,300  -->  00:06:11,920
we should see there's an exception when
we do that and you can see we have got
89

89

00:06:11,920  -->  00:06:15,280
an exception on the screen the legal
thread state exception
90

90

00:06:16,000  -->  00:06:20,830
so again using a subclass of thread
means that we have to define the run
91

91

00:06:20,830  -->  00:06:24,220
method once but we can't reuse the same
instance
92

92

00:06:24,220  -->  00:06:27,640
so will delete the second start so we
don't see the exception again so let's
93

93

00:06:27,640  -->  00:06:29,440
do that now delete line 13....
94

94

00:06:29,440  -->  00:06:34,300
but getting back to anonymous classes
when we use an anonymous class we have
95

95

00:06:34,300  -->  00:06:36,130
to start to the thread immediately
96

96

00:06:36,130  -->  00:06:39,490
so that's another consideration when
deciding whether to use a named or an
97

97

00:06:39,490  -->  00:06:43,540
anonymous class of course the name class
is the one that we already defined
98

98

00:06:43,540  -->  00:06:47,380
using the another thread class here so
let's create another thread as an
99

99

00:06:47,380  -->  00:06:50,950
anonymous class and have it print a line
to the console before the main thread
100

100

00:06:50,950  -->  00:06:54,790
prints its hello text again or hello again
text so come down here after the first
101

101

00:06:54,790  -->  00:06:58,420
start and then we'll type.....
102

102

00:06:59,560  -->  00:07:04,510
this is the way to create an anonymous class and it's gonna be public....
103

103

00:07:04,510  -->  00:07:10,150
.....
104

104

00:07:11,410  -->  00:07:21,250
....
105

105

00:07:21,250  -->  00:07:31,360
...so if you run that now you can see that's now
106

106

00:07:31,360  -->  00:07:34,990
working with the anonymous class and
again just a note that the only thing
107

107

00:07:34,990  -->  00:07:38,800
we know for sure is that the first line
we see in the console will be the first
108

108

00:07:38,800  -->  00:07:40,390
line printed by the main thread
109

109

00:07:40,390  -->  00:07:45,550
we can't guarantee that execution orders
if we try running it again and you can
110

110

00:07:45,550  -->  00:07:49,330
see what happened here hello from the
anonymous class thread that's outputted
111

111

00:07:49,330  -->  00:07:52,480
after the hello again from the main
thread and this is what's happening with
112

112

00:07:52,480  -->  00:07:58,180
the thread so we've created a thread and
we've used .start to run it immediately
113

113

00:07:58,180  -->  00:08:01,240
but because the thread that runs in the
background
114

114

00:08:01,240  -->  00:08:05,530
the way that the system my
computer is scheduled things is that it
115

115

00:08:05,530  -->  00:08:09,370
outputted the hello again from the main
thread before the new thread from the
116

116

00:08:09,370  -->  00:08:13,060
anonymous class got to execute and that
will depend on your computer you may get
117

117

00:08:13,060  -->  00:08:15,730
a similar result we might get a
different result of all together
118

118

00:08:15,730  -->  00:08:20,470
so basically i'm saying is that may vary
from time to time even though it seems
119

119

00:08:20,470  -->  00:08:24,070
to be pretty consistent with them running here now is likely that on other
120

120

00:08:24,070  -->  00:08:25,870
computers you'll get different results
121

121

00:08:25,870  -->  00:08:30,820
and obviously in this case it's a short
very trivial example and it's possible
122

122

00:08:30,820  -->  00:08:33,910
as a result because we're really not
doing much in the way of processing in
123

123

00:08:33,910  -->  00:08:38,650
these threads that really creating that the order is
124

124

00:08:38,650  -->  00:08:41,380
pretty much gonna be the same each time
you run it on your computer
125

125

00:08:41,380  -->  00:08:45,280
but the point is that may not be the
order in which that we created the
126

126

00:08:45,280  -->  00:08:49,000
threads and indeed that is the case here
because in my example we created the
127

127

00:08:49,000  -->  00:08:54,250
anonymous class on line 11 and yet that
code was executed after the system
128

128

00:08:54,250  -->  00:09:00,580
output was printed out on line 17 and
again this may be completely different
129

129

00:09:00,580  -->  00:09:04,330
when it runs on your computer so we
can't guarantee the order that the
130

130

00:09:04,330  -->  00:09:07,720
threads are going to be executed or in
which you know the print statement
131

131

00:09:07,720  -->  00:09:11,440
ultimately appear here again I'm
hammering on this a little bit but I
132

132

00:09:11,440  -->  00:09:14,170
want to hammer home that we can't
guarantee the order in which threads
133

133

00:09:14,170  -->  00:09:19,450
will execute and that's one of the main
reasons why working with threads can be
134

134

00:09:19,450  -->  00:09:21,500
tricky for you to work with
135

135

00:09:21,500  -->  00:09:25,040
especially initially to get your head
around the concept here so let's now
136

136

00:09:25,040  -->  00:09:28,160
adapt what we've done to make it a
little bit easier to see at a glance
137

137

00:09:28,160  -->  00:09:32,000
where the output in the consoles are
coming from a good way to do that is to
138

138

00:09:32,000  -->  00:09:35,160
give each it is to give each thread
its own color
139

139

00:09:35,660  -->  00:09:40,430
now the methods are we going to use
works with IntelliJ console but it might
140

140

00:09:40,430  -->  00:09:43,820
not work with another IE console or
within the windows native console
141

141

00:09:43,820  -->  00:09:48,050
because we're going to be using unix
xscape code so if you're using something
142

142

00:09:48,050  -->  00:09:51,830
the other IntelliJ you may not see
the coloring but just try and see what
143

143

00:09:51,830  -->  00:09:55,070
happens anyway but in any event you'll
see the colors on the screen this video
144

144

00:09:55,070  -->  00:10:00,320
anyway i'm going to create a new class
here i'm going to call this class thread
145

145

00:10:00,320  -->  00:10:10,280
color and i'm going to paste in some
code now I'm not going to type this code
146

146

00:10:10,280  -->  00:10:14,480
in because it's really only some
constants and you can grab this text
147

147

00:10:14,480  -->  00:10:17,390
file in the resources section of this
video and be able to do the same thing
148

148

00:10:17,390  -->  00:10:20,060
you did see something similar
149

149

00:10:20,060  -->  00:10:24,440
in the file input output section in any
event so in order to use these cars we
150

150

00:10:24,440  -->  00:10:27,560
need to append the color code that we
want to use before the texts that were
151

151

00:10:27,560  -->  00:10:32,360
outputting and once we set a color that
color will remain in effect until we use
152

152

00:10:32,360  -->  00:10:34,130
another color escape code
153

153

00:10:34,130  -->  00:10:39,260
so if you want to return to the default
code we use or append rather the ansi_
154

154

00:10:39,260  -->  00:10:42,260
reset which will set it back to
the default color
155

155

00:10:42,260  -->  00:10:47,970
so let's have the main thread use purple
the name one use blue and the anonymous
156

156

00:10:47,970  -->  00:10:52,640
thread to use red and if you want to you
can change it to black but bearing in mind
157

157

00:10:52,640  -->  00:10:56,220
depending if you're using the dark them
or not you might find that it's not
158

158

00:10:56,220  -->  00:10:59,750
view able so I'm choosing colors that
should work on whether you're using the
159

159

00:10:59,750  -->  00:11:04,040
dark theme or just a regular theme that comes with IntelliJ so
160

160

00:11:04,040  -->  00:11:08,180
looking at the another thread coloring
first click into that and I'm going to
161

161

00:11:08,180  -->  00:11:15,690
add here.....
162

162

00:11:15,690  -->  00:11:19,260
hello from another thread you can see
that automatically added the import
163

163

00:11:19,260  -->  00:11:21,120
there for the class we just created
164

164

00:11:21,120  -->  00:11:26,790
let's go back to our main class again
then we're going to add again depending on
165

165

00:11:26,790  -->  00:11:29,670
whether you're running a white
background or the dark background
166

166

00:11:29,670  -->  00:11:31,980
if your on the white background you might want
to do it in black but i'm running the
167

167

00:11:31,980  -->  00:11:38,070
dark one so I'm going to use purple so
ANSI....you can see
168

168

00:11:38,070  -->  00:11:42,390
that was added automatically and then
with the anonymous class we're going to
169

169

00:11:42,390  -->  00:11:48,390
here we are going to use....
170

170

00:11:49,050  -->  00:11:51,660
doesn't really matter which one you use
so long as you've got a different one
171

171

00:11:51,660  -->  00:11:55,320
for each of the sections so again we
have defined looking back in another
172

172

00:11:55,320  -->  00:12:01,590
thread we have defined blue for our regular named thread and for the regular
173

173

00:12:01,590  -->  00:12:06,210
main method were using purple and we are using
green for our anonymous class thread
174

174

00:12:06,210  -->  00:12:10,140
so if we run that we can now see the output
with a blue
175

175

00:12:10,710  -->  00:12:14,190
you might be wondering why I got blue
twice there but what I didn't do is down
176

176

00:12:14,190  -->  00:12:14,970
here
177

177

00:12:14,970  -->  00:12:18,480
I didn't specify color and by not
specifying a color
178

178

00:12:18,480  -->  00:12:21,990
it's used the color of the last thing
that was the output so this was hello
179

179

00:12:21,990  -->  00:12:25,590
from another thread if we go back to
another thread that was in blue
180

180

00:12:25,590  -->  00:12:29,040
as you can see up there so
consequently use that because that was
181

181

00:12:29,040  -->  00:12:30,780
the next thing that happened to execute
in order
182

182

00:12:30,780  -->  00:12:34,890
so what I should really be doing here is
making it....
183

183

00:12:34,890  -->  00:12:39,090
to guarantee that's going to output it in
the right colors so now we should see the
184

184

00:12:39,090  -->  00:12:40,200
right result
185

185

00:12:40,200  -->  00:12:45,990
so you can see that we've got now
purple showing for our main method the
186

186

00:12:45,990  -->  00:12:50,370
output from their blue from the other
thread the name thread and then a yellow
187

187

00:12:50,370  -->  00:12:53,700
from the anonymous class read what it's
actually green but to me it looks a bit
188

188

00:12:53,700  -->  00:12:54,960
more yellow than green
189

189

00:12:54,960  -->  00:12:59,130
the bottom line here is it snow a lot
easy to see which statements are coming
190

190

00:12:59,130  -->  00:13:02,520
from which thread so we don't have to
read the thread we can just look at it a
191

191

00:13:02,520  -->  00:13:05,370
glance and look at the colors and know
that that output has come from that
192

192

00:13:05,370  -->  00:13:08,940
particular thread so change those colors
as appropriate if they are a little bit hard to
193

193

00:13:08,940  -->  00:13:12,600
read so long as you choose a different
color for each section you'll be
194

194

00:13:12,600  -->  00:13:13,440
good to go
195

195

00:13:13,440  -->  00:13:17,040
ok so I'm going to finish the video here
now in the next video we're going to
196

196

00:13:17,040  -->  00:13:21,600
talk about implementing runnable which
is a way to create threads using another
197

197

00:13:21,600  -->  00:13:26,370
method so the runnable interface is
another way of creating a thread which
198

198

00:13:26,370  -->  00:13:27,890
really requires us to implement
199

199

00:13:27,890  -->  00:13:30,950
one method but in the event we look at
doing that in the next video
