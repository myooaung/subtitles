1
1

00:00:04,670  -->  00:00:07,279
Alright so let's discuss parsing
2

2

00:00:07,279  -->  00:00:10,850
values from a string in many cases you
3

3

00:00:10,850  -->  00:00:12,880
have to pass the value from a string
4

4

00:00:12,880  -->  00:00:15,380
meaning that you have to convert the
5

5

00:00:15,380  -->  00:00:17,810
string into some other data type such as
6

6

00:00:17,810  -->  00:00:20,869
a number string into an int now one news
7

7

00:00:20,869  -->  00:00:23,119
case where we might need to convert a
8

8

00:00:23,119  -->  00:00:25,550
number string is when reading input from
9

9

00:00:25,550  -->  00:00:26,150
the user
10

10

00:00:26,150  -->  00:00:28,640
perhaps after it's been entered into a
11

11

00:00:28,640  -->  00:00:31,039
console or after being retrieved
12

12

00:00:31,039  -->  00:00:33,680
from a user interface in later videos in
13

13

00:00:33,680  -->  00:00:35,090
this course you'll see this in action
14

14

00:00:35,090  -->  00:00:37,430
when you learn how to read values from
15

15

00:00:37,430  -->  00:00:40,370
the user using the scanner class but
16

16

00:00:40,370  -->  00:00:42,589
let's first discuss how we can convert a
17

17

00:00:42,589  -->  00:00:45,620
string value into some other primitive
18

18

00:00:45,620  -->  00:00:47,989
data type so we're going to begin by
19

19

00:00:47,989  -->  00:00:50,360
typing some code and you can see I've
20

20

00:00:50,360  -->  00:00:51,830
created a new project here and I've
21

21

00:00:51,830  -->  00:00:55,129
called it parsing values from string so
22

22

00:00:55,129  -->  00:00:56,780
the code we want to type in there now is
23

23

00:00:56,780  -->  00:01:04,909
string number a string equals 2018 in
24

24

00:01:04,909  -->  00:01:07,010
double quotes then on the next line
25

25

00:01:07,010  -->  00:01:10,700
we're going to print out number in
26

26

00:01:10,700  -->  00:01:14,450
double quotes s string equals the space
27

27

00:01:14,450  -->  00:01:18,159
ending double quote plus number a string
28

28

00:01:18,159  -->  00:01:20,990
alright so this is a string that we've
29

29

00:01:20,990  -->  00:01:23,299
defined on line six meaning that it's
30

30

00:01:23,299  -->  00:01:26,600
interpreted as text and not as a number
31

31

00:01:26,600  -->  00:01:29,840
value so the goal here is to convert
32

32

00:01:29,840  -->  00:01:32,329
this piece of text into a number and
33

33

00:01:32,329  -->  00:01:37,549
firstly let's just quickly run this you
34

34

00:01:37,549  -->  00:01:38,749
can see we've got the output down the
35

35

00:01:38,749  -->  00:01:39,920
bottom of the screen there number as
36

36

00:01:39,920  -->  00:01:43,009
string because 2018 so again the goal
37

37

00:01:43,009  -->  00:01:45,740
here is to convert this piece of text in
38

38

00:01:45,740  -->  00:01:49,009
our string into a number now one way to
39

39

00:01:49,009  -->  00:01:51,409
convert a string into a number is by
40

40

00:01:51,409  -->  00:01:53,749
means of a parsing method now with these
41

41

00:01:53,749  -->  00:01:56,899
methods we can convert a string into
42

42

00:01:56,899  -->  00:01:59,719
various primitive types depending on the
43

43

00:01:59,719  -->  00:02:03,049
specific pars we choose to use now in
44

44

00:02:03,049  -->  00:02:04,700
this case since we want to convert our
45

45

00:02:04,700  -->  00:02:08,060
our string into an integer let's type
46

46

00:02:08,060  -->  00:02:09,470
this out I'm gonna do it on the line
47

47

00:02:09,470  -->  00:02:12,530
after the output line and I'm going to
48

48

00:02:12,530  -->  00:02:16,430
type int make a space there line space
49

49

00:02:16,430  -->  00:02:18,069
between lines so int
50

50

00:02:18,069  -->  00:02:21,459
number is equal to an integer with a
51

51

00:02:21,459  -->  00:02:23,829
capital i dot and I'm going to select
52

52

00:02:23,829  -->  00:02:26,739
parse int then in parentheses I'm going
53

53

00:02:26,739  -->  00:02:28,840
to put our string we defined on line six
54

54

00:02:28,840  -->  00:02:31,439
number a string
55

55

00:02:31,439  -->  00:02:34,840
alright so line nine contains some code
56

56

00:02:34,840  -->  00:02:36,459
that we haven't yet seen in the code in
57

57

00:02:36,459  -->  00:02:39,670
the course so first off we're using a
58

58

00:02:39,670  -->  00:02:42,040
class called integer and you can see if
59

59

00:02:42,040  -->  00:02:43,599
it's a class because I'm using a capital
60

60

00:02:43,599  -->  00:02:47,200
either now this is a wrapper class for
61

61

00:02:47,200  -->  00:02:49,959
the primitive type int now don't worry
62

62

00:02:49,959  -->  00:02:51,879
too much about wrapper classes at the
63

63

00:02:51,879  -->  00:02:53,799
moment because we will be discussing
64

64

00:02:53,799  -->  00:02:55,439
them in more detail later in the course
65

65

00:02:55,439  -->  00:02:58,329
one thing to note though is that the
66

66

00:02:58,329  -->  00:03:00,430
wrapper class integer contains some
67

67

00:03:00,430  -->  00:03:02,889
useful static methods like the one that
68

68

00:03:02,889  -->  00:03:05,709
we're using parse int now this method
69

69

00:03:05,709  -->  00:03:08,650
parseint will try to convert the string
70

70

00:03:08,650  -->  00:03:11,109
that we're passing as an argument it's a
71

71

00:03:11,109  -->  00:03:13,180
number of string here into an integer
72

72

00:03:13,180  -->  00:03:16,120
now if it's successful the number is
73

73

00:03:16,120  -->  00:03:17,439
converted from a string to an integer
74

74

00:03:17,439  -->  00:03:20,500
but if the conversion fails we'll get an
75

75

00:03:20,500  -->  00:03:22,359
error now you may also notice that we
76

76

00:03:22,359  -->  00:03:24,729
typed integer dot followed by the method
77

77

00:03:24,729  -->  00:03:27,879
name parse int in order to convert type
78

78

00:03:27,879  -->  00:03:30,939
string into some other data type in
79

79

00:03:30,939  -->  00:03:32,769
other words parse the string we need to
80

80

00:03:32,769  -->  00:03:35,560
include the type we're converting to so
81

81

00:03:35,560  -->  00:03:37,599
that we're able to get the parsing
82

82

00:03:37,599  -->  00:03:40,720
method associated with that type so in
83

83

00:03:40,720  -->  00:03:43,269
our case the result is integer then dot
84

84

00:03:43,269  -->  00:03:45,009
and then the method name in this case
85

85

00:03:45,009  -->  00:03:47,739
parse int but later on we're going to
86

86

00:03:47,739  -->  00:03:50,290
see similar methods to this so simply
87

87

00:03:50,290  -->  00:03:53,079
put this parse method is a static method
88

88

00:03:53,079  -->  00:03:55,870
that we can use to convert or to parse a
89

89

00:03:55,870  -->  00:03:58,930
string type into a number all right so
90

90

00:03:58,930  -->  00:04:00,370
let's actually print that out just to
91

91

00:04:00,370  -->  00:04:02,290
confirm that it does work on the next
92

92

00:04:02,290  -->  00:04:05,829
line I'm going to do a print out in a
93

93

00:04:05,829  -->  00:04:06,849
double quotes I'm going to tighten
94

94

00:04:06,849  -->  00:04:11,430
number equals double quote plus number
95

95

00:04:11,430  -->  00:04:14,169
but this time I go to output number and
96

96

00:04:14,169  -->  00:04:15,609
not a number of string so we want to
97

97

00:04:15,609  -->  00:04:18,190
print out the variable number which is
98

98

00:04:18,190  -->  00:04:20,320
an int that we have hopefully got the
99

99

00:04:20,320  -->  00:04:24,940
value for the string value 2018 in it so
100

100

00:04:24,940  -->  00:04:28,559
let's run that
101

101

00:04:28,559  -->  00:04:30,089
and you can see down the bottom of the
102

102

00:04:30,089  -->  00:04:33,839
screen we've got number equals 2018 so
103

103

00:04:33,839  -->  00:04:36,749
pausing is useful but we need to convert
104

104

00:04:36,749  -->  00:04:39,029
a string into a number in order to use
105

105

00:04:39,029  -->  00:04:41,639
that number to calculate something so
106

106

00:04:41,639  -->  00:04:43,409
let's test this by adding 1 to both
107

107

00:04:43,409  -->  00:04:46,949
number of string and also two number so
108

108

00:04:46,949  -->  00:04:48,779
what we can do you're going to come down
109

109

00:04:48,779  -->  00:04:50,579
here and we're going to type number a
110

110

00:04:50,579  -->  00:04:53,729
string then we're going to type plus
111

111

00:04:53,729  -->  00:04:57,269
equals 1 then on the following line I'm
112

112

00:04:57,269  -->  00:05:01,069
going to type the number plus equals 1
113

113

00:05:01,069  -->  00:05:04,469
now when we add the integer 1 to number
114

114

00:05:04,469  -->  00:05:07,769
a string Java will automatically convert
115

115

00:05:07,769  -->  00:05:09,859
the number 1 into a string and then
116

116

00:05:09,859  -->  00:05:13,109
concatenate these two strings so that
117

117

00:05:13,109  -->  00:05:14,879
number string will now have the value 2
118

118

00:05:14,879  -->  00:05:18,089
0 1 8 1 and that's really not what we
119

119

00:05:18,089  -->  00:05:20,879
were hoping for but by using number plus
120

120

00:05:20,879  -->  00:05:24,419
equals 1 on the next line line 13 we're
121

121

00:05:24,419  -->  00:05:26,219
actually incrementing number by 1
122

122

00:05:26,219  -->  00:05:28,229
because it's an int value and not a
123

123

00:05:28,229  -->  00:05:30,419
string so therefore the value of number
124

124

00:05:30,419  -->  00:05:33,959
should be 2019 so to confirm this let's
125

125

00:05:33,959  -->  00:05:36,299
print out both to see that it is
126

126

00:05:36,299  -->  00:05:38,249
actually correct so I'm going to start
127

127

00:05:38,249  -->  00:05:41,849
by printing out a number a string and
128

128

00:05:41,849  -->  00:05:43,049
double quotes off what number a string
129

129

00:05:43,049  -->  00:05:48,469
again equals in plus number of string
130

130

00:05:48,469  -->  00:05:51,419
and on the next line let's print out the
131

131

00:05:51,419  -->  00:05:56,849
value of number so number equals plus
132

132

00:05:56,849  -->  00:06:02,149
number all right so let's run this
133

133

00:06:02,149  -->  00:06:03,989
alright see you now see the difference
134

134

00:06:03,989  -->  00:06:06,269
that we've discussed when we use the
135

135

00:06:06,269  -->  00:06:08,909
plus operator with a string type and a
136

136

00:06:08,909  -->  00:06:11,459
number the number is concatenated to the
137

137

00:06:11,459  -->  00:06:13,379
string it's appended in other words to
138

138

00:06:13,379  -->  00:06:15,239
the end of the string so Java is
139

139

00:06:15,239  -->  00:06:17,999
converting that number to a string in
140

140

00:06:17,999  -->  00:06:20,399
joining it to that string and you can
141

141

00:06:20,399  -->  00:06:23,929
see the result here 2 0 1 8 1
142

142

00:06:23,929  -->  00:06:26,279
however after converting a string type
143

143

00:06:26,279  -->  00:06:29,039
to an N type we can then use the number
144

144

00:06:29,039  -->  00:06:31,829
as in perform operations with it so in
145

145

00:06:31,829  -->  00:06:34,259
our case number is originally defined up
146

146

00:06:34,259  -->  00:06:36,959
here as an int on line 9 and by
147

147

00:06:36,959  -->  00:06:39,300
incrementing it by 1 which we did on
148

148

00:06:39,300  -->  00:06:41,309
line 13 and outputting it we have now
149

149

00:06:41,309  -->  00:06:42,390
got the value tooth
150

150

00:06:42,390  -->  00:06:46,860
19 alright so moving on let's pretend
151

151

00:06:46,860  -->  00:06:50,550
now that a user entered in some data in
152

152

00:06:50,550  -->  00:06:53,640
this case they entered 2018 which is a
153

153

00:06:53,640  -->  00:06:55,740
valid number but what would happen if
154

154

00:06:55,740  -->  00:06:57,960
the user typed something by accident so
155

155

00:06:57,960  -->  00:06:59,310
they added a letter to the number
156

156

00:06:59,310  -->  00:07:01,560
sequence so let's see the result of that
157

157

00:07:01,560  -->  00:07:03,360
by changing our number of string up here
158

158

00:07:03,360  -->  00:07:07,170
on line 6 to 2018 we're going to add an
159

159

00:07:07,170  -->  00:07:10,470
A on the end of it so what will happen
160

160

00:07:10,470  -->  00:07:11,790
when we actually run this well let's
161

161

00:07:11,790  -->  00:07:16,680
actually run it to see what happens then
162

162

00:07:16,680  -->  00:07:17,760
you can see that we've actually got an
163

163

00:07:17,760  -->  00:07:19,770
error down the bottom left-hand corner
164

164

00:07:19,770  -->  00:07:22,020
of the screen so it didn't work as
165

165

00:07:22,020  -->  00:07:24,720
expected so I've got this error which is
166

166

00:07:24,720  -->  00:07:27,090
also known as an exception and you can
167

167

00:07:27,090  -->  00:07:28,470
see on the screen there it says Java
168

168

00:07:28,470  -->  00:07:31,260
ranked number format exception for input
169

169

00:07:31,260  -->  00:07:34,800
string 201 8a in double quotes so the
170

170

00:07:34,800  -->  00:07:37,080
problem here is our string since its
171

171

00:07:37,080  -->  00:07:40,950
value is 2018 a it cannot be converted
172

172

00:07:40,950  -->  00:07:43,110
to an int because that's not a valid
173

173

00:07:43,110  -->  00:07:45,810
number and so Java throws this or gives
174

174

00:07:45,810  -->  00:07:48,060
us this number format exception to
175

175

00:07:48,060  -->  00:07:50,660
indicate that the format isn't correct
176

176

00:07:50,660  -->  00:07:53,280
now there are a couple of ways to handle
177

177

00:07:53,280  -->  00:07:56,040
this problem one way is to handle the
178

178

00:07:56,040  -->  00:07:58,290
actual exception but we're going to be
179

179

00:07:58,290  -->  00:08:00,090
covering handling exceptions later in
180

180

00:08:00,090  -->  00:08:02,700
the course we could also create our own
181

181

00:08:02,700  -->  00:08:05,160
method as an alternative but that too
182

182

00:08:05,160  -->  00:08:07,230
will come up later on in the course so
183

183

00:08:07,230  -->  00:08:08,970
instead let's just revert this change by
184

184

00:08:08,970  -->  00:08:10,320
removing the letter from the string for
185

185

00:08:10,320  -->  00:08:13,230
now so coming back to the original value
186

186

00:08:13,230  -->  00:08:17,850
of 2018 now so a similar process for
187

187

00:08:17,850  -->  00:08:19,680
conversion can be done with other number
188

188

00:08:19,680  -->  00:08:22,950
types for example the double type so
189

189

00:08:22,950  -->  00:08:24,780
let's try adding a decimal value to our
190

190

00:08:24,780  -->  00:08:27,570
string we're going to change number to
191

191

00:08:27,570  -->  00:08:29,910
be of type double and we're going to use
192

192

00:08:29,910  -->  00:08:31,980
the double class and the past double
193

193

00:08:31,980  -->  00:08:34,140
mithun so it's gonna be very similar to
194

194

00:08:34,140  -->  00:08:37,110
how the intrusion works but with a
195

195

00:08:37,110  -->  00:08:39,330
double so to do that I'm gonna come up
196

196

00:08:39,330  -->  00:08:41,550
here first they in type or change rather
197

197

00:08:41,550  -->  00:08:45,540
the in type to double so it's no double
198

198

00:08:45,540  -->  00:08:47,460
number then we're going to change the
199

199

00:08:47,460  -->  00:08:48,990
word integer here to double so it's
200

200

00:08:48,990  -->  00:08:51,630
going to be double again and then we're
201

201

00:08:51,630  -->  00:08:53,670
going to change the word int here to
202

202

00:08:53,670  -->  00:08:55,600
double since we weren't wanting to convert
203

203

00:08:55,600  -->  00:08:59,290
to the double primitive time now let's
204

204

00:08:59,290  -->  00:09:01,600
run our application again and see what
205

205

00:09:01,600  -->  00:09:07,569
happens so far so good but let's
206

206

00:09:07,569  -->  00:09:10,240
actually now change this valley 2018
207

207

00:09:10,240  -->  00:09:12,819
we're going to change that to 2018
208

208

00:09:12,819  -->  00:09:15,610
dot one to five which of course is a
209

209

00:09:15,610  -->  00:09:18,339
decimal number just to make sure that
210

210

00:09:18,339  -->  00:09:20,170
our double calculations are working I
211

211

00:09:20,170  -->  00:09:21,730
mean we've got an idea that it is
212

212

00:09:21,730  -->  00:09:23,290
working here given that we had a dot
213

213

00:09:23,290  -->  00:09:26,230
zero the period zero added to the end of
214

214

00:09:26,230  -->  00:09:27,910
the number but let's run it now that's
215

215

00:09:27,910  -->  00:09:32,139
the value is 2018 0.125 and see what
216

216

00:09:32,139  -->  00:09:36,730
happens so he's here we've got number a
217

217

00:09:36,730  -->  00:09:40,569
string equals 2018 dot one two five one
218

218

00:09:40,569  -->  00:09:42,790
and that's what we would expect because
219

219

00:09:42,790  -->  00:09:44,920
it's of type string remembering that if
220

220

00:09:44,920  -->  00:09:47,649
we try to add a number to a string Java
221

221

00:09:47,649  -->  00:09:50,110
automatically converts the type back
222

222

00:09:50,110  -->  00:09:52,750
tostring and appends it to the end of
223

223

00:09:52,750  -->  00:09:54,610
the string but in the case of the number
224

224

00:09:54,610  -->  00:09:56,800
or we've defined it as a double and we
225

225

00:09:56,800  -->  00:09:58,870
did that on line nine adding one to that
226

226

00:09:58,870  -->  00:10:01,569
we started off with the value of 2018
227

227

00:10:01,569  -->  00:10:02,829
point one two five
228

228

00:10:02,829  -->  00:10:04,569
that's the value we got on line nine
229

229

00:10:04,569  -->  00:10:06,970
we've added one to it and the final
230

230

00:10:06,970  -->  00:10:11,279
value there is number equals 2019 0.125
231

231

00:10:11,279  -->  00:10:13,779
and just to be consistent and check this
232

232

00:10:13,779  -->  00:10:15,670
if we added an A on the end of that and
233

233

00:10:15,670  -->  00:10:18,069
run it we'll find that will get the same
234

234

00:10:18,069  -->  00:10:20,410
type of exception in other words error
235

235

00:10:20,410  -->  00:10:22,930
trying to convert what is now not a
236

236

00:10:22,930  -->  00:10:25,720
valid number to a number right so I'll
237

237

00:10:25,720  -->  00:10:28,779
delete that now there's a similar
238

238

00:10:28,779  -->  00:10:30,670
parsing process that can be used for
239

239

00:10:30,670  -->  00:10:34,720
other types like float or long but keep
240

240

00:10:34,720  -->  00:10:36,550
in mind that when we call methods such
241

241

00:10:36,550  -->  00:10:39,610
as pars double the associated class they
242

242

00:10:39,610  -->  00:10:41,350
must be used before calling the method
243

243

00:10:41,350  -->  00:10:44,079
so in this case obviously I changed what
244

244

00:10:44,079  -->  00:10:46,660
was originally the integer dot parse int
245

245

00:10:46,660  -->  00:10:49,870
and I changed that to double dot pass
246

246

00:10:49,870  -->  00:10:52,540
double and again notice how it begins
247

247

00:10:52,540  -->  00:10:53,709
with a capital letter
248

248

00:10:53,709  -->  00:10:56,860
while primitive types such as this one
249

249

00:10:56,860  -->  00:10:58,899
here on line nine this start of the line
250

250

00:10:58,899  -->  00:11:01,360
starts with a lowercase letter as in
251

251

00:11:01,360  -->  00:11:03,540
double something like uppercase here
252

252

00:11:03,540  -->  00:11:07,089
first letter and a lowercase over here
253

253

00:11:07,089  -->  00:11:09,370
so keep that distinction in mind
254

254

00:11:09,370  -->  00:11:10,779
but again we'll be covering these
255

255

00:11:10,779  -->  00:11:12,460
wrapper classes which is what this
256

256

00:11:12,460  -->  00:11:15,550
double entry here is this class will be
257

257

00:11:15,550  -->  00:11:18,730
covering that later in the course so
258

258

00:11:18,730  -->  00:11:20,950
that's it for converting a string to a
259

259

00:11:20,950  -->  00:11:25,290
number type I'll see you in the next video.
