1
1

00:00:05,480  -->  00:00:10,400
So far this course we've only dealt with
data structures that hold a single value,
2

2

00:00:10,400  -->  00:00:12,180
in other words, the standard variable.
3

3

00:00:12,180  -->  00:00:16,990
An integer variable holds any one number
for example, an integer whole number and
4

4

00:00:16,990  -->  00:00:21,190
a string, as you've seen holds only
one long sort of sequence of text.
5

5

00:00:21,190  -->  00:00:23,710
But in this video what we're
gonna be talking about is a way
6

6

00:00:23,710  -->  00:00:26,040
to store multiple values of the same type.
7

7

00:00:26,040  -->  00:00:28,000
And what we're talking
about is using arrays.
8

8

00:00:28,000  -->  00:00:30,070
So, an array allows you to do just that.
9

9

00:00:30,070  -->  00:00:33,710
It's really a data structure that
allows you to store sequence of values,
10

10

00:00:33,710  -->  00:00:35,170
that are all of the same type.
11

11

00:00:35,170  -->  00:00:38,300
So for example,
you can create an array of integers,
12

12

00:00:38,300  -->  00:00:41,380
an array of characters,
an array of strings, etc.
13

13

00:00:41,380  -->  00:00:45,110
This actually works for all primitive
types and even objects like the string.
14

14

00:00:45,110  -->  00:00:50,700
So declaring an array initially is
similar to declaring a regular variable.
15

15

00:00:50,700  -->  00:00:53,160
Let's just have a look at how to do that.
16

16

00:00:53,160  -->  00:00:54,580
So as you no doubt recall by now,
17

17

00:00:54,580  -->  00:00:58,920
you can define and
regulate integer variables like so.
18

18

00:00:58,920  -->  00:01:03,090
So in this case we're defining a variable
called myVariable of type int and
19

19

00:01:03,090  -->  00:01:04,830
assign the value of 50 to it.
20

20

00:01:04,830  -->  00:01:09,270
Now to go and create an array or
to define an array, just after the type,
21

21

00:01:09,270  -->  00:01:13,190
the primitive type, or the object,
the class in other words,
22

22

00:01:13,190  -->  00:01:15,880
we put square brackets like that.
23

23

00:01:15,880  -->  00:01:20,090
That actually tells the Java compiler that
we're not dealing with a regular variable.
24

24

00:01:20,090  -->  00:01:21,360
We're dealing with an array.
25

25

00:01:21,360  -->  00:01:25,000
So number one we'll do that, and by doing
that we've actually now invalidated this
26

26

00:01:25,000  -->  00:01:30,390
line of code, because we're trying to
store a regular value into an array,
27

27

00:01:30,390  -->  00:01:32,420
and that's illegal now with Java syntax.
28

28

00:01:32,420  -->  00:01:34,040
So I'm gonna delete that.
29

29

00:01:34,040  -->  00:01:37,760
Now that's the standard definition and
what we can then do, is on the next line
30

30

00:01:37,760  -->  00:01:42,990
if we wanted to we could put myVariable
= new, then we repeat the top again.
31

31

00:01:42,990  -->  00:01:45,590
So we put int and the square brackets
32

32

00:01:45,590  -->  00:01:49,170
we type in the number of elements
we want to assign to this array.
33

33

00:01:49,170  -->  00:01:51,940
So for example, if we wanted
to add space for ten elements,
34

34

00:01:51,940  -->  00:01:55,660
ten individual integers in this array,
we'd use the number ten there like so.
35

35

00:01:55,660  -->  00:01:57,590
So that's actually assigned ten elements,
and
36

36

00:01:57,590  -->  00:02:01,250
of course the other thing we can
do much like our regular variable.
37

37

00:02:01,250  -->  00:02:03,470
We can actually compile this
all on to one line like so.
38

38

00:02:03,470  -->  00:02:07,200
So in this case,
we've defined an array called myVariable.
39

39

00:02:07,200  -->  00:02:09,990
We've told it that it's of type integer.
40

40

00:02:09,990  -->  00:02:11,700
And we've assigned ten elements to it.
41

41

00:02:11,700  -->  00:02:14,620
So to be more precise,
let's put myIntArray.
42

42

00:02:14,620  -->  00:02:15,950
We'll call it myIntArray so
43

43

00:02:15,950  -->  00:02:19,250
it actually makes more sense, cuz that's
what it actually is, an array of integers.
44

44

00:02:19,250  -->  00:02:21,160
Now this number here again
is the number of elements,
45

45

00:02:21,160  -->  00:02:23,680
that's the number of slots or
the number in this case
46

46

00:02:23,680  -->  00:02:27,010
of separate integers that we
want to assign to this array.
47

47

00:02:27,010  -->  00:02:29,560
So accessing these array elements,
how do we access them?
48

48

00:02:29,560  -->  00:02:33,320
Well we do something like this,
we can actually, for example,
49

49

00:02:33,320  -->  00:02:36,600
to save a value we could put
something like myIntValue,
50

50

00:02:36,600  -->  00:02:39,700
square bracket with a number,
so 5, equals 50.
51

51

00:02:39,700  -->  00:02:43,700
So that's actually saving
the value 50 into element.
52

52

00:02:43,700  -->  00:02:47,350
Now you look at that, you think maybe,
well that's obviously saving it into
53

53

00:02:47,350  -->  00:02:50,060
element 5, but
it's actually saving in to element 6.
54

54

00:02:50,060  -->  00:02:53,600
Now, the reason for
that is with all arrays in Java,
55

55

00:02:53,600  -->  00:02:57,570
they always start the count at position 0,
at number 0.
56

56

00:02:57,570  -->  00:03:00,760
So, in other words, if you want to access
the very first element of an array,
57

57

00:03:00,760  -->  00:03:02,930
you start from position 0.
58

58

00:03:02,930  -->  00:03:07,530
So, in this case, new int 10, so the first
element you could use number 0 and
59

59

00:03:07,530  -->  00:03:12,290
right up until the last element you would
actually use number 9 to allocate that.
60

60

00:03:12,290  -->  00:03:15,570
So in other word instead of starting
from 1 and finishing on 10,
61

61

00:03:15,570  -->  00:03:17,560
you start from 0 and finish on 9.
62

62

00:03:17,560  -->  00:03:20,170
Sounds confusing but
you'll soon get used to that.
63

63

00:03:20,170  -->  00:03:24,000
If you just remember that you always start
counting from 0 in Java with arrays,
64

64

00:03:24,000  -->  00:03:25,190
it will make a lot of sense.
65

65

00:03:25,190  -->  00:03:28,810
So in this case,
what we've done looking at this code line,
66

66

00:03:28,810  -->  00:03:33,640
I want you to write the number 5 in
square brackets, and it's 0, 1, 2, 3,
67

67

00:03:33,640  -->  00:03:36,650
4, 5, so that's actually element 6 = 50.
68

68

00:03:36,650  -->  00:03:38,490
So that's how we're actually
assigning that value.
69

69

00:03:38,490  -->  00:03:43,590
In terms of arrays, again, it's very
similar with syntax for other data types.
70

70

00:03:43,590  -->  00:03:44,610
We could change this to a double, for
71

71

00:03:44,610  -->  00:03:49,000
example, if we wanted to, And come back
here and change this also to a double.
72

72

00:03:51,020  -->  00:03:54,310
And change the name, variable name.
73

73

00:03:54,310  -->  00:03:58,810
And that will actually assign an array
called myDoubleArray with 10 elements.
74

74

00:03:58,810  -->  00:04:00,650
And each of those
elements could be stored,
75

75

00:04:00,650  -->  00:04:01,900
could have stored in them a double.
76

76

00:04:01,900  -->  00:04:06,510
So that's how we go about defining
the array and how we go about defining or
77

77

00:04:06,510  -->  00:04:08,640
storing a value in the array elements.
78

78

00:04:08,640  -->  00:04:11,220
The other thing that you might want to
do is actually retrieve a value from
79

79

00:04:11,220  -->  00:04:12,300
a particular element.
80

80

00:04:12,300  -->  00:04:14,980
And to do that we can actually
do something very similar.
81

81

00:04:14,980  -->  00:04:18,130
We can just put,
I'll just output this just to show you.
82

82

00:04:18,130  -->  00:04:20,830
myIntArray, and we'll put 5 there.
83

83

00:04:20,830  -->  00:04:26,270
And that's going to now dump out,
or print to the screen, element 6.
84

84

00:04:26,270  -->  00:04:31,000
If you run that, again, we're starting the
count from 0 in case you wanna run at 6.
85

85

00:04:31,000  -->  00:04:33,980
We're getting the value 50, which we
actually stored in this line here.
86

86

00:04:33,980  -->  00:04:37,360
That's how you go about actually
retrieving the values as well.
87

87

00:04:37,360  -->  00:04:40,700
Just remember,
whatever you define the variable to be,
88

88

00:04:40,700  -->  00:04:43,680
that's the type of data that
will fit in that array.
89

89

00:04:43,680  -->  00:04:47,170
So you can't, for example,
put a double into an integer array,
90

90

00:04:47,170  -->  00:04:51,560
in much the same way you can't assign a
double variable into an integer variable,
91

91

00:04:51,560  -->  00:04:52,850
it won't work either.
92

92

00:04:52,850  -->  00:04:57,790
So that was one way to initialize,
you could go through, in this case,
93

93

00:04:57,790  -->  00:05:01,490
if you wanted to initialize
every value in the array,
94

94

00:05:01,490  -->  00:05:07,200
we could go right through it, we could
sort of start from myIntArray, 0 = 45.
95

95

00:05:07,200  -->  00:05:12,470
myIntArray, 1 = 476, etc.
96

96

00:05:12,470  -->  00:05:14,330
That could become quite tedious.
97

97

00:05:14,330  -->  00:05:17,100
So actually there's another
shortcut that Java gives us.
98

98

00:05:17,100  -->  00:05:20,900
If we know ahead of time the values
we want to actually save in an array,
99

99

00:05:20,900  -->  00:05:22,660
we can do something like this.
100

100

00:05:22,660  -->  00:05:27,890
I could put myIntArray = we could put 1,
2,
101

101

00:05:27,890  -->  00:05:32,600
3, 4, 5, 6, 7, 8, 9 and 10.
102

102

00:05:37,970  -->  00:05:41,350
But the reason we're getting an error
there is we need to actually copy
103

103

00:05:41,350  -->  00:05:45,360
this into this, at this place here because
this is only applicable the first time we
104

104

00:05:45,360  -->  00:05:46,960
define the variable.
105

105

00:05:46,960  -->  00:05:49,350
So I'm gonna do something like that and
then delete this out.
106

106

00:05:49,350  -->  00:05:52,810
So what we've actually done here is we've
actually defined, we've actually told
107

107

00:05:52,810  -->  00:05:55,860
Java, these are the numbers we
want you to assign into the array.
108

108

00:05:55,860  -->  00:06:00,210
But we've also indirectly told Java
how many elements are in that array
109

109

00:06:00,210  -->  00:06:06,070
by the actual number of values that are in
this curly brace initializer block here,
110

110

00:06:06,070  -->  00:06:07,000
separated by commas.
111

111

00:06:07,000  -->  00:06:09,020
So the fact is,
there's actually ten elements in there.
112

112

00:06:09,020  -->  00:06:10,990
1, 2, 3, 4, 5, 6, 7, 8, 9, 10.
113

113

00:06:10,990  -->  00:06:15,150
Javas look at that and it automatically
assigns ten elements to this integer array
114

114

00:06:15,150  -->  00:06:18,230
and then it also goes through and
actually adds the values for
115

115

00:06:18,230  -->  00:06:20,510
each of those into each array element.
116

116

00:06:20,510  -->  00:06:23,360
Just to confirm that we could
actually print a couple of these out.
117

117

00:06:23,360  -->  00:06:26,140
Get rid of this double now
cuz we're not using that.
118

118

00:06:26,140  -->  00:06:30,180
And we'll just do a couple,
say, position 6 and position 8.
119

119

00:06:30,180  -->  00:06:37,670
If we run that, And you can see we've got
position element 0 is value number 1.
120

120

00:06:37,670  -->  00:06:42,120
Position 6 or element 6 is 1, 2,
3, 4, 5, 6, as you can see there.
121

121

00:06:42,120  -->  00:06:44,140
Starting from 0 so
it's actually element 0.
122

122

00:06:44,140  -->  00:06:48,230
So that's 0, 1, 2, 3, 4, 5, 6.
123

123

00:06:48,230  -->  00:06:49,660
That's why we've got seven.
124

124

00:06:49,660  -->  00:06:52,680
And again, the element 8 is
actually the ninth element,
125

125

00:06:52,680  -->  00:06:54,830
which would be this one here,
which is the number 9.
126

126

00:06:54,830  -->  00:06:56,100
And that's why the numbers 1, 7, and
127

127

00:06:56,100  -->  00:06:58,120
9 match up like you can
see here on the screen.
128

128

00:06:58,120  -->  00:07:01,830
And finally there's also a third way
to initialize, so if we go back now and
129

129

00:07:01,830  -->  00:07:03,460
actually just comment that out for now.
130

130

00:07:03,460  -->  00:07:07,370
I'm just gonna set that up and
comment that out like so.
131

131

00:07:07,370  -->  00:07:12,270
Actually, what I'll do is,
I'll just create a new integer outright.
132

132

00:07:12,270  -->  00:07:16,730
= newInt, tell again so
back to our ten elements.
133

133

00:07:16,730  -->  00:07:18,210
Type them up, they haven't got any values.
134

134

00:07:18,210  -->  00:07:21,620
And I would delete these output lines
now because they don't look appropriate.
135

135

00:07:21,620  -->  00:07:23,700
We can actually use a for
loop to initialize them.
136

136

00:07:23,700  -->  00:07:28,240
So we could put something like this,
we could put for
137

137

00:07:28,240  -->  00:07:31,560
int i = 0, i less than 10, i++.
138

138

00:07:32,730  -->  00:07:36,780
They we can actually
put myIntValue i = and
139

139

00:07:36,780  -->  00:07:40,840
lets just say the form is gonna be i*10.
140

140

00:07:40,840  -->  00:07:43,740
So what we're doing there is we're
actually going through each element of
141

141

00:07:43,740  -->  00:07:45,910
the array starting from element
zero with our for loop.
142

142

00:07:45,910  -->  00:07:48,230
And you can see myIntArray[i].
143

143

00:07:48,230  -->  00:07:50,560
i in brackets means access element, so
144

144

00:07:50,560  -->  00:07:53,440
in this case 0 will be the first time
it's called through in the loop.
145

145

00:07:53,440  -->  00:07:55,150
We're assigning i times 10 to it.
146

146

00:07:55,150  -->  00:08:00,870
We're going right through for the entire
array, and going through so in the values.
147

147

00:08:00,870  -->  00:08:02,820
And just to confirm that
we can do a second loop.
148

148

00:08:02,820  -->  00:08:08,000
For int, i=0, i<10, i++.
149

149

00:08:08,000  -->  00:08:12,670
And we can do an port, we'll put element
zero, or element + i, I should say.
150

150

00:08:12,670  -->  00:08:18,290
Plus, value is myIntArray should I say I.
151

151

00:08:18,290  -->  00:08:20,120
So run that now,
we should actually get some output.
152

152

00:08:21,820  -->  00:08:22,390
Element zero.
153

153

00:08:22,390  -->  00:08:24,740
And you can see the first time we
went through, the value was 0.
154

154

00:08:24,740  -->  00:08:27,130
10, 20, 30, 40, and so on.
155

155

00:08:27,130  -->  00:08:32,020
And again, the calculation for that is,
it's whatever the index entry for
156

156

00:08:32,020  -->  00:08:35,000
the four loop that we're going through,
multiplying that by ten.
157

157

00:08:35,000  -->  00:08:39,830
So the first time we go through this,
we're accessing element 0, because i is 0.
158

158

00:08:39,830  -->  00:08:42,050
Zero times ten of course is gonna be zero.
159

159

00:08:42,050  -->  00:08:45,200
And i is set to zero, so
that's our element zero.
160

160

00:08:45,200  -->  00:08:47,430
Next time I go through i
is gonna be set to one.
161

161

00:08:47,430  -->  00:08:51,170
So we're using element one in our array.
162

162

00:08:51,170  -->  00:08:55,240
So in of when my inter ray is one
equals one times 10 which is 10.
163

163

00:08:55,240  -->  00:08:58,980
And so on as you can see right up
until nine where the value is 90.
164

164

00:08:58,980  -->  00:09:01,020
So that's a great way to initialize it,
165

165

00:09:01,020  -->  00:09:04,750
if you've got some sort of formula to
let you know ahead of time that you can
166

166

00:09:04,750  -->  00:09:07,970
actually use to assign to
the particular element in the array.
167

167

00:09:07,970  -->  00:09:09,880
One of the other quick things
I recommend you do though,
168

168

00:09:09,880  -->  00:09:14,130
is rather than hard coding numbers here,
it could be a good idea to use a method
169

169

00:09:14,130  -->  00:09:17,170
that actually is given to you
automatically with arrays.
170

170

00:09:17,170  -->  00:09:19,050
And the, it's called the length.
171

171

00:09:19,050  -->  00:09:22,240
So we do the array name,
my int value.length.
172

172

00:09:22,240  -->  00:09:24,180
I think I said it's a method but
it's actually a property.
173

173

00:09:24,180  -->  00:09:27,780
So it's actually a field that's stored
in the, well that comes as part and
174

174

00:09:27,780  -->  00:09:29,360
parcel of the array.
175

175

00:09:29,360  -->  00:09:31,260
And length gives us
the length automatically so
176

176

00:09:31,260  -->  00:09:34,080
Java will actually look into the array and
decide.
177

177

00:09:34,080  -->  00:09:36,650
It will tell you what
the length of that is.
178

178

00:09:36,650  -->  00:09:39,040
So the good thing about that
is if we change that here and
179

179

00:09:39,040  -->  00:09:46,140
we also go back in here, and
we put my int.length as well.
180

180

00:09:46,140  -->  00:09:48,720
And we run that,
we should get exactly the same result.
181

181

00:09:48,720  -->  00:09:51,200
As you can see,
exactly the same as it was before.
182

182

00:09:51,200  -->  00:09:55,080
But the good thing also is we can
change this so we can make this say 25.
183

183

00:09:55,080  -->  00:09:59,940
And run it and you can see we got
184

184

00:09:59,940  -->  00:10:04,620
the values from zero to 24 and that's
because we've used the lengths field,
185

185

00:10:04,620  -->  00:10:08,340
the value that comes back from
the array automatically from Java.
186

186

00:10:08,340  -->  00:10:12,160
Java is determined okay, you've changed
the length to 25 elements and you've
187

187

00:10:12,160  -->  00:10:15,610
automatically set it up so we didn't need
to change the code for that to work.
188

188

00:10:15,610  -->  00:10:20,190
So it's a good idea to use .length with
arrays whenever you wanna actually
189

189

00:10:20,190  -->  00:10:23,470
cycle through or figure out what the
length is rather than hard-coding a value.
190

190

00:10:23,470  -->  00:10:27,740
Because you can see there in this example,
I would argue that it's easy to read, but
191

191

00:10:27,740  -->  00:10:32,730
certainly also it's less work for you to
maintain because literally it otherwise,
192

192

00:10:32,730  -->  00:10:34,660
you'd actually have to change 25.
193

193

00:10:34,660  -->  00:10:37,230
In this case,
we changed from ten to 25 elements,
194

194

00:10:37,230  -->  00:10:39,000
where we've had to change
that code as well.
195

195

00:10:39,000  -->  00:10:42,560
Which doesn't say much now, but as you
start producing more and more Java code,
196

196

00:10:42,560  -->  00:10:45,890
you'll find that you'll be needing to make
these changes in a lot more places and
197

197

00:10:45,890  -->  00:10:48,540
you'll just be opening
yourself up to causing errors,
198

198

00:10:48,540  -->  00:10:49,980
because one of the things
you'll actually get,
199

199

00:10:49,980  -->  00:10:53,500
you'll actually get a problem if you try
and access an element that's not there.
200

200

00:10:53,500  -->  00:10:57,980
So if we change this and we put 30,
we'll actually get an error.
201

201

00:10:57,980  -->  00:10:59,860
So, if we run this, so
202

202

00:10:59,860  -->  00:11:02,800
you can see what's happening is
we've actually got an exception.
203

203

00:11:02,800  -->  00:11:05,530
And the exception is array
index out of bounds.
204

204

00:11:05,530  -->  00:11:08,320
And the reason that it's out of bounds
is we've actually used a number
205

205

00:11:08,320  -->  00:11:09,770
that's actually too high.
206

206

00:11:09,770  -->  00:11:11,780
So we've only actually got 25 elements and
207

207

00:11:11,780  -->  00:11:14,050
we've tried to access
an element greater than 25.
208

208

00:11:14,050  -->  00:11:15,900
You'll get an error if you do that.
209

209

00:11:15,900  -->  00:11:19,910
You can only access as many
elements as you created.
210

210

00:11:19,910  -->  00:11:22,680
So if we just undo that change and
go back to here and do it,
211

211

00:11:22,680  -->  00:11:23,930
you probably see it a little bit better.
212

212

00:11:24,980  -->  00:11:28,930
Cuz is should actually still output
the first 25 elements before it crashes in
213

213

00:11:28,930  -->  00:11:29,530
this case.
214

214

00:11:33,460  -->  00:11:37,000
So again, the problem here is, that number
of elements that were actually defining,
215

215

00:11:37,000  -->  00:11:37,550
is invalid.
216

216

00:11:37,550  -->  00:11:39,600
So, we have to go back and change that.
217

217

00:11:39,600  -->  00:11:41,290
So it's just easy, as you could see,
218

218

00:11:41,290  -->  00:11:43,320
to make sure that how we
use the right number.
219

219

00:11:43,320  -->  00:11:48,550
But we wanna actually assign the actual
number in as few places as possible cuz
220

220

00:11:48,550  -->  00:11:52,090
that then prevents any weird errors coming
up as you can see it came up before.
221

221

00:11:52,090  -->  00:11:54,920
We started trying to override what
we knew were the correct values.
222

222

00:11:54,920  -->  00:11:58,030
So that's how to go about,
in this case, printing out the number.
223

223

00:11:58,030  -->  00:12:02,740
Now the other thing you can use,
of course, is with any variable in Java,
224

224

00:12:02,740  -->  00:12:06,400
including arrays,
is we can those two methods.
225

225

00:12:06,400  -->  00:12:08,920
So what we can do is,
we're gonna take this bit of code here.
226

226

00:12:08,920  -->  00:12:11,740
We're gonna create a method from it
then we're gonna call that method.
227

227

00:12:11,740  -->  00:12:16,620
So we're gonna do, create a new one,
228

228

00:12:16,620  -->  00:12:21,810
called public static void printarray.
229

229

00:12:21,810  -->  00:12:25,780
We're actually gonna send it, our array,
and to define that as a parameter,
230

230

00:12:25,780  -->  00:12:29,520
as an argument, we put int same
definition before the square brackets and
231

231

00:12:29,520  -->  00:12:30,680
we'll call it array.
232

232

00:12:33,830  -->  00:12:38,440
So, if we paste in our code and what
we'll need to do is we'll need to just
233

233

00:12:38,440  -->  00:12:41,940
change the definition to
match the parameter like so.
234

234

00:12:43,080  -->  00:12:46,560
And then now we should just be able
to call our method print array, and
235

235

00:12:46,560  -->  00:12:49,680
pass our array that we've
defined called modprintarray.
236

236

00:12:49,680  -->  00:12:52,730
So it's doing a very similar thing,
but we're just passing the array.
237

237

00:12:52,730  -->  00:12:55,870
Notice on the definition that it's
actually the code that's calling
238

238

00:12:55,870  -->  00:12:59,060
the method, we don't put square
breakfast in there, if we do that,
239

239

00:12:59,060  -->  00:13:01,400
we'll get weird things happening,
we'll get an error.
240

240

00:13:01,400  -->  00:13:05,230
We only define the type in the parameter,
as you can see there.
241

241

00:13:05,230  -->  00:13:08,120
If we run that we should get
identical results printing out,
242

242

00:13:08,120  -->  00:13:08,930
if you can see we're getting.
243

243

00:13:09,980  -->  00:13:13,180
That's how to go about actually
showing it all printing out and
244

244

00:13:13,180  -->  00:13:15,420
passing it array as a method.
245

245

00:13:15,420  -->  00:13:18,100
Okay, so what I'm going to do it
delete this on the screen now.
246

246

00:13:18,100  -->  00:13:20,240
I'm gonna show you another use.
247

247

00:13:20,240  -->  00:13:22,260
So what we're going to do is
just delete all that out.
248

248

00:13:22,260  -->  00:13:25,810
I'm gonna actually show you a real life
use of using an array where it would
249

249

00:13:25,810  -->  00:13:27,010
become valuable.
250

250

00:13:27,010  -->  00:13:30,720
What we're going to do is we're going
to accept some input from the consults.
251

251

00:13:30,720  -->  00:13:33,860
In other words, allow the user of
the program to type in some numbers.
252

252

00:13:33,860  -->  00:13:35,840
We're gonna sum up those total numbers,
and
253

253

00:13:35,840  -->  00:13:39,290
figure out the averages of those
numbers that were typed in.
254

254

00:13:39,290  -->  00:13:42,450
This could be a good use of an array, this
we're dealing with multiple numbers, and
255

255

00:13:42,450  -->  00:13:44,340
that's where arrays are really great.
256

256

00:13:44,340  -->  00:13:48,060
So firstly,
let's talk something called about scanner.
257

257

00:13:48,060  -->  00:13:50,970
And we'll talk about that shortly what
it is but private static scanner.
258

258

00:13:52,980  -->  00:13:54,140
Case is important here.
259

259

00:13:54,140  -->  00:13:56,490
You can see java.util is
coming up automatically.
260

260

00:13:56,490  -->  00:14:00,650
Any time you see something that starts
with java., in this case .util,
261

261

00:14:00,650  -->  00:14:02,270
that's something that comes with Java.
262

262

00:14:02,270  -->  00:14:03,870
And we're gonna call that Scan.
263

263

00:14:03,870  -->  00:14:06,300
And, let's call it Scanner.
264

264

00:14:06,300  -->  00:14:08,750
You can see it's asking to accept
the import so I'm gonna do that.
265

265

00:14:08,750  -->  00:14:11,020
And we'll call it Scanner.
266

266

00:14:11,020  -->  00:14:13,110
And equals new Scanner.
267

267

00:14:14,790  -->  00:14:17,830
And we pass a parameter called system.in.
268

268

00:14:17,830  -->  00:14:21,420
Now, you've seen system.out before
where we've actually dumped code.
269

269

00:14:21,420  -->  00:14:24,330
We do that all the time, you can actually
see that to the right on the screen now,
270

270

00:14:24,330  -->  00:14:25,410
we used system out for that.
271

271

00:14:25,410  -->  00:14:28,090
System.in is the opposite
in that it allows
272

272

00:14:28,090  -->  00:14:31,370
you to type input into the console that
gets returned back to the program.
273

273

00:14:31,370  -->  00:14:34,980
So that's what we're doing there is
we're defining the static variable,
274

274

00:14:34,980  -->  00:14:36,350
or called scanner.
275

275

00:14:36,350  -->  00:14:39,250
And we're gonna be using that in
the code to actually retrieve that.
276

276

00:14:39,250  -->  00:14:42,640
So what we're going to do is we're going
to start off, we're gonna put int,
277

277

00:14:42,640  -->  00:14:43,530
array int.
278

278

00:14:43,530  -->  00:14:49,220
We're gonna call it my integers,
equals get integers, five.
279

279

00:14:49,220  -->  00:14:51,810
So what that means is we're
gonna actually create a method.
280

280

00:14:51,810  -->  00:14:56,970
And that methods is gonna automatically
allow us to type in five numbers and
281

281

00:14:56,970  -->  00:14:59,860
to then return those five
numbers in the form of an array.
282

282

00:14:59,860  -->  00:15:03,730
And those contents will be
stored in my integers arrays.
283

283

00:15:03,730  -->  00:15:08,570
To do that, public.static.int[] array int,
284

284

00:15:08,570  -->  00:15:11,790
two square brackets means
we're returning an array.
285

285

00:15:11,790  -->  00:15:17,720
Getintegers[int number] and
the number in this case is the number
286

286

00:15:17,720  -->  00:15:22,730
of array elements we that we
wanted to find for our array.
287

287

00:15:22,730  -->  00:15:27,260
So we're gonna print
out a message first and
288

288

00:15:27,260  -->  00:15:34,170
the message is going to put Enter,
plus number, integer values.
289

289

00:15:34,170  -->  00:15:37,260
We're gonna put backslash R there,
so it goes to the next line and
290

290

00:15:37,260  -->  00:15:39,490
you'll see why shortly
when we're running it.
291

291

00:15:39,490  -->  00:15:41,020
Next we need to define our array.
292

292

00:15:42,510  -->  00:15:47,030
We're gonna call it values
equals new int number.
293

293

00:15:48,120  -->  00:15:52,230
So I would pass, except using the number
that was passed source in this case
294

294

00:15:52,230  -->  00:15:56,040
number, and that's how many elements
were assigned to this array.
295

295

00:15:56,040  -->  00:15:58,680
By doing it this way we've got some
flexibility in that this will be able
296

296

00:15:58,680  -->  00:15:59,520
to accept any number.
297

297

00:15:59,520  -->  00:16:01,490
We can chop and change that as needed.
298

298

00:16:01,490  -->  00:16:05,700
Then we just need to create a for
loop for int, i = 0,
299

299

00:16:05,700  -->  00:16:10,670
i less than values.length i++,
then we assign the value now
300

300

00:16:10,670  -->  00:16:15,010
we put values,
which you've seen before, values i.
301

301

00:16:15,010  -->  00:16:20,810
So starting on element 0, we're going to
go through the entire array equals and
302

302

00:16:20,810  -->  00:16:23,380
it's gonna be scanner.nextInt.
303

303

00:16:23,380  -->  00:16:27,600
And the scanner.nextInt automatically
accepts an integer from the console and
304

304

00:16:27,600  -->  00:16:31,900
that then returns an integer, and
that's going to be stored in our array.
305

305

00:16:31,900  -->  00:16:37,180
And finally, it's going to return
the array back to the calling process.
306

306

00:16:37,180  -->  00:16:40,570
So in this case, what we're doing is we're
defining an array called myIntegers, and
307

307

00:16:40,570  -->  00:16:44,840
the actual value of the array is
being passed back from this method
308

308

00:16:44,840  -->  00:16:47,320
automatically, and
it's gonna be assigned to myIntegers.
309

309

00:16:47,320  -->  00:16:51,100
So at the end of this, after it's made
this call, not only have we defined
310

310

00:16:51,100  -->  00:16:54,450
the length of the array, but
we've also got the contents of it as well.
311

311

00:16:54,450  -->  00:16:59,720
Just to confirm that then,
we're going to put a for let there for
312

312

00:16:59,720  -->  00:17:04,140
int = 0,
i less than myIntegers.length, i ++.
313

313

00:17:17,130  -->  00:17:19,860
And we're just gonna print that message
out to see what the top value was.
314

314

00:17:19,860  -->  00:17:22,040
Let's just run this and see that it works.
315

315

00:17:23,270  -->  00:17:24,490
First, it's asking us
to enter five values.
316

316

00:17:24,490  -->  00:17:26,460
You'll notice when I
clicked my mouse in there,
317

317

00:17:26,460  -->  00:17:28,340
it automatically went to the next line.
318

318

00:17:28,340  -->  00:17:31,110
If I didn't put the \r here,
it would be actually asking for
319

319

00:17:31,110  -->  00:17:33,070
input as the first one there,
which we didn't want.
320

320

00:17:33,070  -->  00:17:36,840
We actually wanted it on this line,
that's the reason I put that \r there.
321

321

00:17:36,840  -->  00:17:43,580
So let's enter five values, so 10,
26, 52, 66, and the last one 23.
322

322

00:17:43,580  -->  00:17:48,540
You can see element 0,
type value was 10, 22, 52, 66, 23.
323

323

00:17:48,540  -->  00:17:51,060
So you can see that this
has returned this array and
324

324

00:17:51,060  -->  00:17:53,100
we've got the correct values in there.
325

325

00:17:53,100  -->  00:17:55,990
So we're nearly done, so
we've actually got the values.
326

326

00:17:55,990  -->  00:17:58,680
The next thing we need to do is
actually create another method.
327

327

00:17:58,680  -->  00:18:01,260
And this method we're gonna
pass the array again.
328

328

00:18:01,260  -->  00:18:05,070
And we're gonna get it to return what
the actual average of the numbers are.
329

329

00:18:05,070  -->  00:18:08,250
So again the average is
calculated by determining the sum
330

330

00:18:08,250  -->  00:18:12,070
of all the values in the array and
dividing that by the actual length.
331

331

00:18:12,070  -->  00:18:12,960
So let's do that.
332

332

00:18:12,960  -->  00:18:17,010
We're gonna do public, static, double.
333

333

00:18:19,110  -->  00:18:20,380
We'll call this one getAverage.
334

334

00:18:21,550  -->  00:18:22,880
And then we need to pass our array.
335

335

00:18:22,880  -->  00:18:24,970
So it's going to be our,
we'll call this one array.
336

336

00:18:26,450  -->  00:18:30,010
And we're returning a double because
with an average we may actually
337

337

00:18:30,010  -->  00:18:32,790
get a number that's not
a whole number as the result.
338

338

00:18:32,790  -->  00:18:36,330
So, we're going to make sure that the
number that we return can cope with whole
339

339

00:18:36,330  -->  00:18:39,340
numbers or, in the case of an average
being another whole number,
340

340

00:18:39,340  -->  00:18:42,970
show that correct value as well and
we'll see that in operations shortly.
341

341

00:18:42,970  -->  00:18:46,000
We need to define a local
variable that is the sum total.
342

342

00:18:46,000  -->  00:18:49,860
I'm gonna call that sum and set that to 0.
343

343

00:18:49,860  -->  00:18:53,820
We're gonna create a for loop again,
344

344

00:18:53,820  -->  00:18:59,040
for(int i=0; i< array.length, i++).
345

345

00:18:59,040  -->  00:19:00,860
We're gonna go through the entire array.
346

346

00:19:00,860  -->  00:19:04,710
Then we need to assign whatever
the current value is of the current array
347

347

00:19:04,710  -->  00:19:07,430
element, as we cycle through using the for
loop.
348

348

00:19:07,430  -->  00:19:12,980
Need to add that to sum so we have a +=
array and you know the element, the +=.
349

349

00:19:12,980  -->  00:19:16,170
We didn't put a +=, of course we
wouldn't be recording the other values,
350

350

00:19:16,170  -->  00:19:20,160
we'd be overwriting it each time,
+= means that we're actually adding to it.
351

351

00:19:20,160  -->  00:19:20,940
So that's good.
352

352

00:19:20,940  -->  00:19:25,300
So we now got the total sum is now
stored in the variable called sum.
353

353

00:19:25,300  -->  00:19:26,650
Now to figure out the,
354

354

00:19:26,650  -->  00:19:30,210
to return the average is simply
dividing sum by the length.
355

355

00:19:30,210  -->  00:19:35,200
But then we wanna convert
the result to a double, so
356

356

00:19:35,200  -->  00:19:42,300
we're gonna put return double sum,
divided by double array.length.
357

357

00:19:42,300  -->  00:19:46,800
Again using doubles to make sure that
we're actually returning a double, it's
358

358

00:19:46,800  -->  00:19:51,200
just dividing the total sum of all the
values in the array by the actual length.
359

359

00:19:51,200  -->  00:19:55,900
The last thing we should need to do
is just update our main method and
360

360

00:19:55,900  -->  00:19:59,010
print out a message,
to what time you like.
361

361

00:19:59,010  -->  00:20:05,370
The average is getAverage and
pass our array.
362

362

00:20:05,370  -->  00:20:09,960
So if we run that, And
363

363

00:20:09,960  -->  00:20:14,500
we store our three values,
something like 3, 4, 5, 6, 7.
364

364

00:20:14,500  -->  00:20:15,990
And put the average is,
we should have put a space there.
365

365

00:20:18,790  -->  00:20:19,470
Let's roll that again.
366

366

00:20:19,470  -->  00:20:25,280
3, 4, 5, 6, 7, the average is 5.0.
367

367

00:20:25,280  -->  00:20:30,520
So 7 plus 6 is 13 plus 5 is
18 plus 4 is 22 plus 3 is 25.
368

368

00:20:30,520  -->  00:20:32,020
So that's 25 is our sum there.
369

369

00:20:32,020  -->  00:20:35,220
And the five elements,
25 divided by 5 is 5.
370

370

00:20:35,220  -->  00:20:39,540
And notice also, that IntelliJ, is showing
you these numbers in green, which is its
371

371

00:20:39,540  -->  00:20:43,260
way of saying that these numbers were
actually typed in from the console,
372

372

00:20:43,260  -->  00:20:44,660
which is pretty handy.
373

373

00:20:44,660  -->  00:20:46,720
So that's our function, getAverage,
374

374

00:20:46,720  -->  00:20:50,200
which actually returns an average
of the total number of elements.
375

375

00:20:50,200  -->  00:20:54,130
And just one last example just to show
the definition of why we needed a double,
376

376

00:20:54,130  -->  00:20:55,670
so enter one more number.
377

377

00:20:55,670  -->  00:20:58,420
Let's use a number that we know
is not gonna evenly divide.
378

378

00:20:58,420  -->  00:21:03,330
So we'll say 100 + 50,
15, so 5 and a 2 and
379

379

00:21:03,330  -->  00:21:09,920
that would give us 34.4,
cuz that's 150, 165, 172.
380

380

00:21:09,920  -->  00:21:13,120
172 divided by 5 is 34.4.
381

381

00:21:13,120  -->  00:21:15,570
So that's why we needed
to use the double there.
382

382

00:21:15,570  -->  00:21:18,850
So this video has gone way longer then
I had hoped it [LAUGH] would go for.
383

383

00:21:18,850  -->  00:21:20,300
So I hope you got a lot out of that.
384

384

00:21:20,300  -->  00:21:23,520
In the next video, what we're gonna do is
we'll do our challenge for arrays, and
385

385

00:21:23,520  -->  00:21:25,590
we'll talk about that and
see you in the next video.
