1
1

00:00:05,170  -->  00:00:10,000
so let's now go through and give an example to
demonstrate a race condition
2

2

00:00:10,000  -->  00:00:13,840
now we could easily have both threads
count down to one without skipping
3

3

00:00:13,840  -->  00:00:18,130
numbers by not passing the same count down
object to both threads
4

4

00:00:18,130  -->  00:00:22,860
so instead what we're going to do is
create two count down objects and pass 1 to
5

5

00:00:22,860  -->  00:00:26,830
thread one and the other to thread 2 because of course at the moment as you
6

6

00:00:26,830  -->  00:00:29,140
can see on lines 8 and 10
7

7

00:00:29,140  -->  00:00:34,440
we're passing the same object so by
doing it this way by creating an object
8

8

00:00:34,440  -->  00:00:39,390
for each and passing a different one to
each of our threads both objects are
9

9

00:00:39,390  -->  00:00:44,280
stored in the heap and are shared but
since thread 1 would only work on count down
10

10

00:00:44,280  -->  00:00:47,350
object one and thread 2 on count down object 2
11

11

00:00:48,120  -->  00:00:51,150
there wouldn't be any interference so
let's change the code just to
12

12

00:00:51,150  -->  00:00:55,200
demonstrate that now so i'm going to change
that we're going to use...
13

13

00:00:55,200  -->  00:01:02,070
...and lets also create a second one....and then we're going to
14

14

00:01:02,070  -->  00:01:07,620
pass....
15

15

00:01:08,370  -->  00:01:13,500
so let's run that and see what happens
going to run it a few times just to
16

16

00:01:13,500  -->  00:01:18,150
confirm what you should be seeing here is
that there's no interference
17

17

00:01:18,150  -->  00:01:21,880
we're still getting objects running or
the results rather printed out in a
18

18

00:01:21,880  -->  00:01:22,780
different order
19

19

00:01:22,780  -->  00:01:26,710
and that's because the operating system
is suspending the threads and starting
20

20

00:01:26,710  -->  00:01:27,340
them again
21

21

00:01:27,340  -->  00:01:30,600
but what you can see here this is now
there's no interference so we've got
22

22

00:01:30,600  -->  00:01:35,490
each number or each thread rather is
successfully counting down from ten to
23

23

00:01:35,490  -->  00:01:36,130
one
24

24

00:01:36,130  -->  00:01:40,600
but unfortunately this solution often
wont work in a real world applications
25

25

00:01:40,600  -->  00:01:45,850
so as an example imagine if the objects
represented here were bank accounts or
26

26

00:01:45,850  -->  00:01:47,670
employee records
27

27

00:01:47,670  -->  00:01:50,770
we can't provide each thread with a
different object it wouldn't make sense
28

28

00:01:50,770  -->  00:01:51,750
to do that
29

29

00:01:51,750  -->  00:01:56,400
so every time a bank manager or employee
file is accessed and changed
30

30

00:01:56,400  -->  00:02:00,700
we have to use the same object to
maintain integrity of the data in
31

31

00:02:00,700  -->  00:02:04,680
other words how do we know what the bank
balance should be after several threads
32

32

00:02:04,680  -->  00:02:07,530
have changed it so in the case of bank
accounts
33

33

00:02:07,530  -->  00:02:11,220
there could be several threads waiting
to change the bank balance at the same
34

34

00:02:11,220  -->  00:02:15,150
time there could be a thread making an
automatic deposit
35

35

00:02:15,150  -->  00:02:17,670
perhaps a thread making a schedule build payment
36

36

00:02:17,670  -->  00:02:22,530
and the owner of the account doing some
online banking so in order to ensure the
37

37

00:02:22,530  -->  00:02:27,420
integrity of the bank balance value we
need to allow multiple threads to change
38

38

00:02:27,420  -->  00:02:32,090
it but we also need to prevent a race
condition which is thread interference
39

39

00:02:32,090  -->  00:02:34,680
which we talked about and went through
in the previous video
40

40

00:02:34,680  -->  00:02:40,110
now fortunately Java provides us with the
way to control when a thread can change
41

41

00:02:40,110  -->  00:02:41,480
a value in the heap
42

42

00:02:41,480  -->  00:02:47,450
the process of controlling when threads
execute code and therefore when they can
43

43

00:02:47,450  -->  00:02:50,790
access the heap is called
synchronization
44

44

00:02:50,790  -->  00:02:55,140
so we can synchronize methods and
statements now when a method is
45

45

00:02:55,140  -->  00:02:58,920
synchronized only one thread can execute
that at a time
46

46

00:02:58,920  -->  00:03:03,360
so when the thread is executing the
method all other threads that want to
47

47

00:03:03,360  -->  00:03:08,880
call the method or any other synchronized
method in that class will suspend until
48

48

00:03:08,880  -->  00:03:13,170
the thread running the method exits it
then another thread can run a
49

49

00:03:13,170  -->  00:03:18,510
synchronized method then another etc to
be clear if a class has three
50

50

00:03:18,510  -->  00:03:23,280
synchronize methods then only one of
these methods can ever run at a time and
51

51

00:03:23,280  -->  00:03:28,850
only on one thread now since only one
thread can execute a synchronized method
52

52

00:03:28,850  -->  00:03:30,030
at a time
53

53

00:03:30,030  -->  00:03:33,660
threads can't interleave when running a
synchronized method
54

54

00:03:33,660  -->  00:03:38,760
so what that does is it prevents thread
interference within synchronized
55

55

00:03:38,760  -->  00:03:41,730
methods but not outside of those methods
56

56

00:03:41,730  -->  00:03:46,650
so if the same instance variables
reference within a synchronized method
57

57

00:03:46,650  -->  00:03:52,350
are also reference outside it you know coded in
multiple threads can run and that a
58

58

00:03:52,350  -->  00:03:57,030
particular code isn't synchronized then
we may still see thread interference
59

59

00:03:57,030  -->  00:04:02,910
when working with threads we have to
synchronize all areas where we think all
60

60

00:04:02,910  -->  00:04:07,530
you know where interference can happen
so let's change our example back now to
61

61

00:04:07,530  -->  00:04:10,950
only using one count down objects since we have
established a real world application
62

62

00:04:10,950  -->  00:04:15,290
couldn't have separate
objects as such it wouldn't work
63

63

00:04:15,870  -->  00:04:18,870
I'm just going to undo those changes
64

64

00:04:19,600  -->  00:04:22,450
and just to confirm when we run it we should
see that the threads are now
65

65

00:04:22,450  -->  00:04:23,860
skipping numbers again
66

66

00:04:23,860  -->  00:04:28,420
so we are getting that interference
again so to synchronize a method all we
67

67

00:04:28,420  -->  00:04:31,210
really have to do is add the
synchronized keyword to a method
68

68

00:04:31,210  -->  00:04:32,380
declaration
69

69

00:04:32,380  -->  00:04:37,780
so it seems though the work is being done in
the do count down method we just need to
70

70

00:04:37,780  -->  00:04:46,150
change this by adding synchronized now when we run it you can see that
71

71

00:04:46,150  -->  00:04:50,410
thread 1 count downs without
skipping any numbers and then thread 2
72

72

00:04:50,410  -->  00:04:52,540
does the same and notice when i run it
again
73

73

00:04:52,540  -->  00:04:57,130
we're getting the same results every
time I run this and that's because
74

74

00:04:57,130  -->  00:05:00,310
by adding the
synchronized keyword
75

75

00:05:00,820  -->  00:05:05,170
we are now saying that we want this
whole method to run before another
76

76

00:05:05,170  -->  00:05:09,310
thread gets access to and that's why you
can see thread 1 finishes in the entire
77

77

00:05:09,310  -->  00:05:13,990
thread or the entire method and then
thread 2 get its chance to do the same
78

78

00:05:13,990  -->  00:05:17,680
so in this scenario they're never going
to interleave because only one of them
79

79

00:05:17,680  -->  00:05:21,010
can execute the do count down method at
a time
80

80

00:05:21,730  -->  00:05:25,600
now unfortunately we can't synchronize
constructors and if you think about it
81

81

00:05:25,600  -->  00:05:28,480
it wouldn't really make sense if we could
do that
82

82

00:05:28,480  -->  00:05:32,710
only one thread can construct an
instance and until the constructor has
83

83

00:05:32,710  -->  00:05:36,790
finished executing the instants won't be
available for other threads to use
84

84

00:05:36,790  -->  00:05:40,180
anyway but what we can do is
synchronized any other method
85

85

00:05:40,690  -->  00:05:43,690
so that's one way to prevent a race
condition
86

86

00:05:43,690  -->  00:05:47,050
the second way we can do that we can
prevent a race condition is to
87

87

00:05:47,050  -->  00:05:52,450
synchronize a block of statements rather
than an entire method so every java
88

88

00:05:52,450  -->  00:05:57,940
object has what's called it's our call
and its intrinsic lock and will also
89

89

00:05:57,940  -->  00:06:00,760
see this reference to as a monitor
90

90

00:06:00,760  -->  00:06:05,080
so we can synchronize a block of
statements that work with an object by
91

91

00:06:05,080  -->  00:06:09,970
forcing threads to acquire the objects
lock before they execute the statement
92

92

00:06:09,970  -->  00:06:15,640
block now only one thread can hold the
lock at a time so other threads that want
93

93

00:06:15,640  -->  00:06:20,950
the lock will be suspended until the
running thread releases it then 1 and
94

94

00:06:20,950  -->  00:06:25,930
only one of the waiting threads can get
the lock and continue executing so
95

95

00:06:25,930  -->  00:06:28,990
looking at our code in the do count down method
96

96

00:06:28,990  -->  00:06:32,130
the only code we really have to
synchronize is the for loop
97

97

00:06:32,130  -->  00:06:36,630
thread interference doesn't affect the
rest of the code since we're setting a
98

98

00:06:36,630  -->  00:06:38,580
color based on the thread name
99

99

00:06:38,580  -->  00:06:42,960
so what objects will we used to
synchronize the for loop
100

100

00:06:42,960  -->  00:06:46,800
we can't use the counter variable I
because it's a primitive type not an
101

101

00:06:46,800  -->  00:06:53,040
object and primitive types don't have
intrinsic locks so at first glance the
102

102

00:06:53,040  -->  00:06:58,500
first thought might be to use the color
object to synchronize the for loop so
103

103

00:06:58,500  -->  00:07:03,060
let's try that and see what happens so to
the synchronize a set of statements we
104

104

00:07:03,060  -->  00:07:07,050
just put them inside a synchronized
block so let's look at doing that so I'm
105

105

00:07:07,050  -->  00:07:09,930
going to add some code here on line 36
106

106

00:07:09,930  -->  00:07:19,200
we're going to type....we're going to use color....
107

107

00:07:19,200  -->  00:07:22,620
....
108

108

00:07:23,130  -->  00:07:28,710
so let's run that and see what happens
109

109

00:07:28,710  -->  00:07:34,860
and what we'll do is we'll remove the
synchronized key word from our method
110

110

00:07:34,860  -->  00:07:38,220
now because we no longer want to
synchronize the entire method we are
111

111

00:07:38,220  -->  00:07:42,180
now doing the alternative approach to just
synchronizing a block of code so remove
112

112

00:07:42,180  -->  00:07:47,190
that and run that you can see we've got
a different result
113

113

00:07:47,190  -->  00:07:50,430
and clearly there's now some
interference again so why is this
114

114

00:07:50,430  -->  00:07:54,510
happening because you know only one
thread can hold the color object lock at
115

115

00:07:54,510  -->  00:07:55,350
a time
116

116

00:07:55,350  -->  00:07:59,610
the only one thread should be able to
execute the for statement that's in the
117

117

00:07:59,610  -->  00:08:04,590
synchronized block on line 36 the
other thread should have to wait until
118

118

00:08:04,590  -->  00:08:09,210
the first thread has finished its
count down but as you can clearly see
119

119

00:08:09,210  -->  00:08:13,740
by me running this example we're seeing
the same type of result we got when we
120

120

00:08:13,740  -->  00:08:15,180
weren't synchronizing at all
121

121

00:08:15,180  -->  00:08:20,280
the problem here is that we're using a
local variable to synchronize and you
122

122

00:08:20,280  -->  00:08:26,340
recall that local variables are stored
in the thread stack each thread will
123

123

00:08:26,340  -->  00:08:31,380
create its own copy of the local
variable and each copy is an object that
124

124

00:08:31,380  -->  00:08:36,060
has its own lock thread one gets the
lock for its copy and continues
125

125

00:08:36,060  -->  00:08:42,390
executing and thread 2 gets locked for
its copy and it continues executing when
126

126

00:08:42,390  -->  00:08:44,650
we want a synchronize using an object
127

127

00:08:44,650  -->  00:08:48,610
we have to use an object that threads
will share so that they're both
128

128

00:08:48,610  -->  00:08:54,070
competing for the same lock using local
variables as a result won't work
129

129

00:08:54,070  -->  00:08:57,790
the only exception to this is using a
string variable and the reason for that
130

130

00:08:57,790  -->  00:09:02,650
is string objects are reused within the
jvm in other words the jvm use a string
131

131

00:09:02,650  -->  00:09:05,860
pools for allocation of string objects
132

132

00:09:06,430  -->  00:09:10,180
I'm only mentioning this now because you
may see examples of a local string
133

133

00:09:10,180  -->  00:09:14,650
variable being used to synchronize code
and you'll be wondering why that works
134

134

00:09:14,650  -->  00:09:18,520
in the synchronize code we've got here
using the color local variable doesn't
135

135

00:09:18,520  -->  00:09:19,120
work
136

136

00:09:19,120  -->  00:09:23,410
so that's really the only exception to
the rule as a general rule it's easy to
137

137

00:09:23,410  -->  00:09:29,590
just remember not to use local variables
to synchronize full stop now before we fix our
138

138

00:09:29,590  -->  00:09:35,620
example I really should reiterate that
when using a local object variable the
139

139

00:09:35,620  -->  00:09:41,410
object references stored in the thread
stack but the object values are stored
140

140

00:09:41,410  -->  00:09:42,940
on the heap
141

141

00:09:42,940  -->  00:09:47,620
now since the threads will each create
their own copy of the object
142

142

00:09:47,620  -->  00:09:51,100
so the object references will then be
different there won't be any
143

143

00:09:51,100  -->  00:09:51,910
interference
144

144

00:09:51,910  -->  00:09:57,250
even though the object values are in the
heap essentially the thread stack will
145

145

00:09:57,250  -->  00:10:02,920
only ever contain primitive values and
object references and to be fair
146

146

00:10:02,920  -->  00:10:06,520
function references but that's really
outside the scope of this lecture and
147

147

00:10:06,520  -->  00:10:08,440
not related to race conditions
148

148

00:10:08,440  -->  00:10:12,280
so let's fix our example so we
work out that color doesn't work here
149

149

00:10:12,280  -->  00:10:16,270
because it's a local variable so it
would actually make sense to synchronize
150

150

00:10:16,270  -->  00:10:19,480
using the count down object that the
thread share
151

151

00:10:19,480  -->  00:10:24,580
so we can do this by synchronizing on
this so let's try it by removing the
152

152

00:10:24,580  -->  00:10:27,580
reference to the color and changing it
to this....
153

153

00:10:29,170  -->  00:10:35,890
and we try running it and just run a few
times and as you can see that at this
154

154

00:10:35,890  -->  00:10:41,440
point the threads no longer interleave
or skip numbers only one thread can run
155

155

00:10:41,440  -->  00:10:46,960
the for loop at a time and you can also
synchronize static methods and you can
156

156

00:10:46,960  -->  00:10:52,210
also use static objects when you do that
the lock that use is owned by the class
157

157

00:10:52,210  -->  00:10:55,300
object associated with the objects class
158

158

00:10:55,300  -->  00:10:59,740
so I'm going to finish the video here in
the next video will continue our
159

159

00:10:59,740  -->  00:11:01,720
discussion about synchronization
160

160

00:11:01,720  -->  00:11:04,950
we're going to a bit more detail about
that see you in the next video
