1
1

00:00:04,900  -->  00:00:07,090
so at the end of the last video I alluded
2

2

00:00:07,090  -->  00:00:09,130
to the fact that when writing regular
3

3

00:00:09,130  -->  00:00:11,310
expressions there's a few logical
4

4

00:00:11,310  -->  00:00:14,980
operators we can use and or and not
5

5

00:00:14,980  -->  00:00:16,830
and it turns out we've already been
6

6

00:00:16,830  -->  00:00:18,900
using the and operator and that's
7

7

00:00:18,900  -->  00:00:21,360
because it's implicit so when we write
8

8

00:00:21,360  -->  00:00:24,460
regular expressions like for example
9

9

00:00:24,460  -->  00:00:28,590
i just put this in a comment we write a
10

10

00:00:28,590  -->  00:00:30,780
regular expression like ABC and actually
11

11

00:00:30,780  -->  00:00:36,190
means A and B technically and C
12

12

00:00:36,190  -->  00:00:39,310
so in a sense here and means and
13

13

00:00:39,310  -->  00:00:41,710
followed by so A is followed by B
14

14

00:00:41,710  -->  00:00:45,700
followed by C so lets actually take a
15

15

00:00:45,700  -->  00:00:48,430
look at the or operator so if you recall
16

16

00:00:48,430  -->  00:00:50,980
a few videos ago actually gave the
17

17

00:00:50,980  -->  00:00:53,710
example of a match a regular expression
18

18

00:00:53,710  -->  00:00:58,390
...that
19

19

00:00:58,390  -->  00:01:00,220
would match the case on Harry whether
20

20

00:01:00,220  -->  00:01:02,950
it's uppercase h or lower or lowercase H
21

21

00:01:02,950  -->  00:01:05,260
basically the regular special match both
22

22

00:01:05,260  -->  00:01:07,860
cases but we can actually use the or
23

23

00:01:07,860  -->  00:01:10,780
operator to achieve the same results so
24

24

00:01:10,780  -->  00:01:13,300
we could do something like...
25

25

00:01:13,300  -->  00:01:15,940
...
26

26

00:01:15,940  -->  00:01:19,510
...and we could put
27

27

00:01:19,510  -->  00:01:21,640
or create a regular expression with
28

28

00:01:21,640  -->  00:01:24,460
the left square bracket capital h and
29

29

00:01:24,460  -->  00:01:28,030
the pipe character and lowercase H n
30

30

00:01:28,030  -->  00:01:30,520
square bracket and....
31

31

00:01:30,520  -->  00:01:32,710
let's say we wanted to replace that with
32

32

00:01:32,710  -->  00:01:37,120
the word Larry we could run that and
33

33

00:01:37,120  -->  00:01:39,520
that should actually find or convert
34

34

00:01:39,520  -->  00:01:41,800
that to Larry see its converted to Larry
35

35

00:01:41,800  -->  00:01:44,080
because it's replaced the first h so
36

36

00:01:44,080  -->  00:01:45,310
you can also just take a copy of that
37

37

00:01:45,310  -->  00:01:48,820
and then just convert the first letter
38

38

00:01:48,820  -->  00:01:50,200
to an uppercase h just to confirm
39

39

00:01:50,200  -->  00:01:51,900
that they always working in both
40

40

00:01:51,900  -->  00:01:55,780
scenarios
41

41

00:01:55,780  -->  00:01:57,280
and you can see it's working there as
42

42

00:01:57,280  -->  00:02:00,100
well so basically what we're saying here
43

43

00:02:00,100  -->  00:02:02,220
is that if the h or characters is a H
44

44

00:02:02,220  -->  00:02:05,140
capital H or a lowercase H considered a
45

45

00:02:05,140  -->  00:02:07,960
match again as you saw that converted it
46

46

00:02:07,960  -->  00:02:10,030
actually worked and match the regular
47

47

00:02:10,030  -->  00:02:11,950
expression for both harry with a capital
48

48

00:02:11,950  -->  00:02:15,130
H and harry with a lowercase H now we've
49

49

00:02:15,130  -->  00:02:16,810
actually already seen how to use not
50

50

00:02:16,810  -->  00:02:19,390
when working with a set of characters so
51

51

00:02:19,390  -->  00:02:23,860
for example the regular expression....
52

52

00:02:23,860  -->  00:02:29,350
...
53

53

00:02:29,350  -->  00:02:31,950
....so the carrot character here
54

54

00:02:31,950  -->  00:02:34,360
means not when it's the first character
55

55

00:02:34,360  -->  00:02:37,120
within square braces now this regular
56

56

00:02:37,120  -->  00:02:39,940
expression matches all characters except
57

57

00:02:39,940  -->  00:02:43,450
a B and C so that's one version of not
58

58

00:02:43,450  -->  00:02:46,030
but there's also another not operator
59

59

00:02:46,030  -->  00:02:49,090
and that's the ! character but this
60

60

00:02:49,090  -->  00:02:51,100
character has to be used in what's
61

61

00:02:51,100  -->  00:02:53,530
called a negative look ahead expression
62

62

00:02:53,530  -->  00:02:55,260
so let's look at an example of that
63

63

00:02:55,260  -->  00:02:59,080
we're going to start off assuming we've
64

64

00:02:59,080  -->  00:03:02,920
got a string called TV test I'm going to
65

65

00:03:02,920  -->  00:03:07,690
assign that....so what we want to
66

66

00:03:07,690  -->  00:03:10,750
do is find all ts that aren't followed by
67

67

00:03:10,750  -->  00:03:13,450
v so our first attempt to the regular
68

68

00:03:13,450  -->  00:03:14,530
expression might be something like
69

69

00:03:14,530  -->  00:03:20,980
string...
70

70

00:03:20,980  -->  00:04:26,320
...
71

71

00:04:26,320  -->  00:04:34,470
...so that's our first attempt so
72

72

00:04:34,470  -->  00:04:35,770
we're using a regular expression that
73

73

00:04:35,770  -->  00:04:37,360
says we want to match occurences of t
74

74

00:04:37,360  -->  00:04:40,300
that aren't followed by the character v
75

75

00:04:40,300  -->  00:04:44,860
there should be three occurrences TS TK
76

76

00:04:44,860  -->  00:04:47,050
and also the final t in string that
77

77

00:04:47,050  -->  00:04:49,000
isn't followed by anything so we
78

78

00:04:49,000  -->  00:04:53,650
actually run this and see what it does
79

79

00:04:53,650  -->  00:04:55,570
so you can see we've got two scenarios
80

80

00:04:55,570  -->  00:04:58,360
covered here we got occurrence 1 which is
81

81

00:04:58,360  -->  00:05:01,510
the character 0 to 2 an occurrence 2 which
82

82

00:05:01,510  -->  00:05:04,810
is the characters 4 to 6 so the first two
83

83

00:05:04,810  -->  00:05:07,240
occurrences were found but the
84

84

00:05:07,240  -->  00:05:10,360
third one the final t wasn't and
85

85

00:05:10,360  -->  00:05:11,890
there's a reason for that and that's
86

86

00:05:11,890  -->  00:05:14,860
because when we use the carrot in square
87

87

00:05:14,860  -->  00:05:17,080
brackets regular expression we actually
88

88

00:05:17,080  -->  00:05:19,330
match a character or we must match a
89

89

00:05:19,330  -->  00:05:21,190
character in order for the regular
90

90

00:05:21,190  -->  00:05:23,770
expression to match so we're saying that
91

91

00:05:23,770  -->  00:05:25,720
the t must be followed by any
92

92

00:05:25,720  -->  00:05:27,550
character other than v
93

93

00:05:27,550  -->  00:05:29,680
but in this case there's no character
94

94

00:05:29,680  -->  00:05:32,530
following the final T and so our carrot
95

95

00:05:32,530  -->  00:05:34,090
v in brackets doesn't actually
96

96

00:05:34,090  -->  00:05:36,580
match anything so another way of saying
97

97

00:05:36,580  -->  00:05:38,770
this is that the left square bracket
98

98

00:05:38,770  -->  00:05:42,030
carrot expression right square bracket
99

99

00:05:42,030  -->  00:05:43,930
assumes a character
100

100

00:05:43,930  -->  00:05:45,430
so in other words it requires a
101

101

00:05:45,430  -->  00:05:48,580
character to be instead of using the
102

102

00:05:48,580  -->  00:05:50,770
square bracket version carrot we can
103

103

00:05:50,770  -->  00:05:53,140
actually use the not operator which is
104

104

00:05:53,140  -->  00:05:55,870
the ! in a negative look ahead
105

105

00:05:55,870  -->  00:05:58,300
expression now look ahead doesn't
106

106

00:05:58,300  -->  00:06:00,610
consume characters it can actually match
107

107

00:06:00,610  -->  00:06:03,130
nothing so let's go ahead and change our
108

108

00:06:03,130  -->  00:06:04,660
regular expression as follows
109

109

00:06:04,660  -->  00:06:06,880
so instead of the word is at the moment
110

110

00:06:06,880  -->  00:06:09,820
with t left square bracket carrot v and a
111

111

00:06:09,820  -->  00:06:11,120
right square bracket
112

112

00:06:11,120  -->  00:06:13,400
we can actually use this negative look
113

113

00:06:13,400  -->  00:06:16,160
ahead expression so to do that we're
114

114

00:06:16,160  -->  00:06:17,390
going to take a copy of this on
115

115

00:06:17,390  -->  00:06:19,400
the original version to duplicate that
116

116

00:06:19,400  -->  00:06:20,600
line
117

117

00:06:20,600  -->  00:06:23,270
comment that out and the regular
118

118

00:06:23,270  -->  00:06:25,550
expression we're going to use will t
119

119

00:06:25,550  -->  00:06:27,200
still but this time we're going to use
120

120

00:06:27,200  -->  00:06:32,600
parentheses here parentheses ? then our
121

121

00:06:32,600  -->  00:06:37,070
negative operator and then v then
122

122

00:06:37,070  -->  00:06:39,680
right parenthesis so what we're saying
123

123

00:06:39,680  -->  00:06:42,650
here is we want t that isn't followed by
124

124

00:06:42,650  -->  00:06:45,290
a v now the question mark inside the
125

125

00:06:45,290  -->  00:06:47,270
parentheses is part of the look-ahead
126

126

00:06:47,270  -->  00:06:49,790
syntax and look ahead always start with
127

127

00:06:49,790  -->  00:06:54,290
a left parenthesis and a ? now the not
128

128

00:06:54,290  -->  00:06:57,530
operator the ! here doesn't consume a
129

129

00:06:57,530  -->  00:06:59,960
character so it will match instances of
130

130

00:06:59,960  -->  00:07:02,450
t at the end of a string so if we run
131

131

00:07:02,450  -->  00:07:04,250
this now we should actually get three
132

132

00:07:04,250  -->  00:07:06,560
lines of output from our clearances we
133

133

00:07:06,560  -->  00:07:09,350
should get the final matching t
134

134

00:07:09,350  -->  00:07:11,990
as well as a result you can see we've got
135

135

00:07:11,990  -->  00:07:13,910
the third one showing there as well so
136

136

00:07:13,910  -->  00:07:15,920
all three occurrences have now been
137

137

00:07:15,920  -->  00:07:19,460
found now note that when we use a look
138

138

00:07:19,460  -->  00:07:21,440
ahead the characters in the look-ahead
139

139

00:07:21,440  -->  00:07:24,410
aren't part of the match and also note that
140

140

00:07:24,410  -->  00:07:27,830
the indices indicate that our matches are
141

141

00:07:27,830  -->  00:07:29,990
one character in length and if you
142

142

00:07:29,990  -->  00:07:32,720
recall that the end method returns the
143

143

00:07:32,720  -->  00:07:34,490
index after the match
144

144

00:07:34,490  -->  00:07:36,740
so then no longer matching the t followed
145

145

00:07:36,740  -->  00:07:38,930
by another character in other words now
146

146

00:07:38,930  -->  00:07:41,330
once again look aheds don't consume
147

147

00:07:41,330  -->  00:07:43,940
the characters they match or putting it
148

148

00:07:43,940  -->  00:07:46,040
another way they don't actually include
149

149

00:07:46,040  -->  00:07:48,200
the characters they match in the match
150

150

00:07:48,200  -->  00:07:51,230
text so that's negative look at
151

151

00:07:51,230  -->  00:07:53,840
expressions but we can also use positive
152

152

00:07:53,840  -->  00:07:57,200
look aheads using the equal sign rather
153

153

00:07:57,200  -->  00:07:59,210
than the not operator which was
154

154

00:07:59,210  -->  00:08:02,330
the exclamation mark so if we wanted to
155

155

00:08:02,330  -->  00:08:04,580
find all matches of T followed by v
156

156

00:08:04,580  -->  00:08:07,130
but we didn't want to include the v in
157

157

00:08:07,130  -->  00:08:08,810
the match would use a regular expression
158

158

00:08:08,810  -->  00:08:12,710
like so we do regular expression here
159

159

00:08:12,710  -->  00:08:19,370
would be...
160

160

00:08:19,370  -->  00:08:22,100
...so that's the
161

161

00:08:22,100  -->  00:08:24,620
positive look ahead and again that's it
162

162

00:08:24,620  -->  00:08:26,780
if we want to find all matches of T followed
163

163

00:08:26,780  -->  00:08:29,150
by v but we didn't want to include the
164

164

00:08:29,150  -->  00:08:31,460
V in the match
165

165

00:08:31,460  -->  00:08:33,350
alright so before we leave the subject
166

166

00:08:33,350  -->  00:08:35,570
of regular expressions let's look at a
167

167

00:08:35,570  -->  00:08:38,300
couple of real-world examples now
168

168

00:08:38,300  -->  00:08:40,190
regular expressions are often used to
169

169

00:08:40,190  -->  00:08:42,500
validate user input now here's an
170

170

00:08:42,500  -->  00:08:45,620
example i'm going to copy and paste that
171

171

00:08:45,620  -->  00:08:48,620
has or is a regular expression for you
172

172

00:08:48,620  -->  00:08:50,770
to validate a US phone number
173

173

00:08:50,770  -->  00:08:52,790
I'm just gonna put into a comment for
174

174

00:08:52,790  -->  00:08:56,060
now so you can get a look at it now
175

175

00:08:56,060  -->  00:08:57,380
let's actually have a look at what this
176

176

00:08:57,380  -->  00:08:59,570
does now obviously we know that it's it's
177

177

00:08:59,570  -->  00:09:01,850
validating a US phone number but it
178

178

00:09:01,850  -->  00:09:03,770
starts out by indicating that the line
179

179

00:09:03,770  -->  00:09:06,830
has to start with the entire pattern in
180

180

00:09:06,830  -->  00:09:08,480
other words if anything occurs before
181

181

00:09:08,480  -->  00:09:10,610
this pattern in the string then it's not
182

182

00:09:10,610  -->  00:09:14,020
a phone number so next in this version
183

183

00:09:14,020  -->  00:09:15,740
we're expecting the area code to be
184

184

00:09:15,740  -->  00:09:18,560
within parentheses so the first
185

185

00:09:18,560  -->  00:09:20,180
character we expect is the open
186

186

00:09:20,180  -->  00:09:23,420
parentheses so we have to escape it
187

187

00:09:23,420  -->  00:09:25,250
that's because as we've seen the
188

188

00:09:25,250  -->  00:09:28,010
parentheses is a character class used to
189

189

00:09:28,010  -->  00:09:30,520
indicate a group now in this case we
190

190

00:09:30,520  -->  00:09:32,240
want to match the parentheses character
191

191

00:09:32,240  -->  00:09:34,730
literal and when we want to match the
192

192

00:09:34,730  -->  00:09:36,950
character literal that can also be used
193

193

00:09:36,950  -->  00:09:38,600
as a character class in a regular
194

194

00:09:38,600  -->  00:09:40,580
expression we have to escape it in this
195

195

00:09:40,580  -->  00:09:43,370
way so following the parentheses is a
196

196

00:09:43,370  -->  00:09:45,620
quantifier indicating that there should
197

197

00:09:45,620  -->  00:09:48,950
only be one opening parenthesis so
198

198

00:09:48,950  -->  00:09:52,190
moving on next we expect the area code
199

199

00:09:52,190  -->  00:09:54,470
which will be three numbers between 0
200

200

00:09:54,470  -->  00:09:56,900
and 9 inclusive and again we're using a
201

201

00:09:56,900  -->  00:09:58,730
quantifier after the range of characters
202

202

00:09:58,730  -->  00:10:01,880
to specify how many numbers we actually
203

203

00:10:01,880  -->  00:10:05,630
expect for a match so following that we
204

204

00:10:05,630  -->  00:10:08,810
expect the closing parenthesis then we
205

205

00:10:08,810  -->  00:10:10,550
want to see a blank before we see the
206

206

00:10:10,550  -->  00:10:12,520
rest of the phone number and we only
207

207

00:10:12,520  -->  00:10:15,410
want to see one blank moving on we
208

208

00:10:15,410  -->  00:10:17,270
expect three numbers from 0 to 9
209

209

00:10:17,270  -->  00:10:20,870
inclusive followed by dash followed by
210

210

00:10:20,870  -->  00:10:23,300
four numbers between 0 and 9 inclusive
211

211

00:10:23,300  -->  00:10:26,510
and finally we expect the string to end
212

212

00:10:26,510  -->  00:10:28,580
with the entire pattern which means that
213

213

00:10:28,580  -->  00:10:30,950
if anything follows the phone number the
214

214

00:10:30,950  -->  00:10:33,350
regular expression won't match so now
215

215

00:10:33,350  -->  00:10:34,570
that we've seen that
216

216

00:10:34,570  -->  00:10:37,540
let's actually try this out so going to
217

217

00:10:37,540  -->  00:10:42,270
type in a few examples here's so....
218

218

00:10:42,270  -->  00:10:49,180
....now based on that
219

219

00:10:49,180  -->  00:10:53,940
regular expression that should match the
220

220

00:10:53,940  -->  00:11:04,950
...
221

221

00:11:04,950  -->  00:11:08,350
well that should match because we're
222

222

00:11:08,350  -->  00:11:10,020
using the right format for the phone
223

223

00:11:10,020  -->  00:11:10,870
number
224

224

00:11:10,870  -->  00:11:33,630
...
225

225

00:11:33,630  -->  00:11:35,310
obviously that should match either
226

226

00:11:35,310  -->  00:11:38,190
because we haven't space after the area
227

227

00:11:38,190  -->  00:11:41,520
code right parenthesis so let's actually
228

228

00:11:41,520  -->  00:11:43,360
try this out i'm going to do a system
229

229

00:11:43,360  -->  00:11:50,520
...
230

230

00:11:50,520  -->  00:11:51,610
because we're actually matching the
231

231

00:11:51,610  -->  00:11:53,560
entire string and we'll just paste
232

232

00:11:53,560  -->  00:11:55,480
shortly the regular expression into
233

233

00:11:55,480  -->  00:11:57,430
there and i'll just do the same thing
234

234

00:11:57,430  -->  00:12:06,390
for the other 3....
235

235

00:12:06,390  -->  00:12:09,250
and just come back up here and we'll
236

236

00:12:09,250  -->  00:12:10,770
take a copy of our entire regular
237

237

00:12:10,770  -->  00:12:13,020
expression will just naturally just
238

238

00:12:13,020  -->  00:12:19,990
paste this in here the same one for all 4 alright
239

239

00:12:19,990  -->  00:12:24,880
so let's just try running that we can
240

240

00:12:24,880  -->  00:12:26,580
see phone 1 is false and the reason that
241

241

00:12:26,580  -->  00:12:27,930
false is of courses that hasn't
242

242

00:12:27,930  -->  00:12:30,570
parentheses hasn't got a space and
243

243

00:12:30,570  -->  00:12:32,820
hasn't got a dash between the first part
244

244

00:12:32,820  -->  00:12:34,660
of the number and the second part phone
245

245

00:12:34,660  -->  00:12:36,390
two is true so that matches because it
246

246

00:12:36,390  -->  00:12:38,760
fulfills the regular expression phone
247

247

00:12:38,760  -->  00:12:40,060
three doesn't match because it hasn't
248

248

00:12:40,060  -->  00:12:42,570
got parentheses around the area code and
249

249

00:12:42,570  -->  00:12:44,310
phone 4 doesn't match because it
250

250

00:12:44,310  -->  00:12:45,760
hasn't got a space after the right
251

251

00:12:45,760  -->  00:12:47,980
parenthesis just before the start of the
252

252

00:12:47,980  -->  00:12:48,790
phone number
253

253

00:12:48,790  -->  00:12:51,220
now there are many ways to write a
254

254

00:12:51,220  -->  00:12:52,810
regular expression that matches a phone
255

255

00:12:52,810  -->  00:12:55,500
number for example might not expect
256

256

00:12:55,500  -->  00:12:57,790
parentheses around the area code in a
257

257

00:12:57,790  -->  00:12:59,860
real-world application would probably
258

258

00:12:59,860  -->  00:13:01,990
remove punctuation and white space from
259

259

00:13:01,990  -->  00:13:03,940
the phone number before processing it
260

260

00:13:03,940  -->  00:13:06,000
and we might require the country code
261

261

00:13:06,000  -->  00:13:07,870
but these are details that would depend
262

262

00:13:07,870  -->  00:13:12,130
on your specific case another example of
263

263

00:13:12,130  -->  00:13:14,050
a regular expression would be checking
264

264

00:13:14,050  -->  00:13:17,520
for a visa card so visa card numbers start
265

265

00:13:17,520  -->  00:13:19,020
visa credit card numbers start with the
266

266

00:13:19,020  -->  00:13:21,940
4 new accounts have 16 numbers but older
267

267

00:13:21,940  -->  00:13:24,000
cards have 13 so the regular
268

268

00:13:24,000  -->  00:13:26,580
expression i'll just copy and paste to
269

269

00:13:26,580  -->  00:13:30,000
validate a visa number will be like so
270

270

00:13:30,000  -->  00:13:33,100
now we start by using the beginning of a
271

271

00:13:33,100  -->  00:13:34,950
beginning of line character class just
272

272

00:13:34,950  -->  00:13:37,080
as we did for the phone number then we
273

273

00:13:37,080  -->  00:13:39,310
expect the character 4 that's because
274

274

00:13:39,310  -->  00:13:40,660
I mentioned that all visa card
275

275

00:13:40,660  -->  00:13:42,430
numbers start with the four following
276

276

00:13:42,430  -->  00:13:44,680
the four we expect at least 12 numbers
277

277

00:13:44,680  -->  00:13:47,440
next comes the optional three characters
278

278

00:13:47,440  -->  00:13:49,870
that occur in the newer cards which will put
279

279

00:13:49,870  -->  00:13:51,790
into a group and followed with the
280

280

00:13:51,790  -->  00:13:53,820
question mark at the end which will
281

281

00:13:53,820  -->  00:13:55,320
match 0 or more occurrences of the
282

282

00:13:55,320  -->  00:13:58,000
group which is what we want here now
283

283

00:13:58,000  -->  00:13:59,380
there will be zero occurrences of the
284

284

00:13:59,380  -->  00:14:00,910
final three numbers for older card
285

285

00:14:00,910  -->  00:14:02,880
numbers and one occurrence for new
286

286

00:14:02,880  -->  00:14:03,850
card numbers
287

287

00:14:03,850  -->  00:14:05,380
hence the reason we're using the group
288

288

00:14:05,380  -->  00:14:07,420
finally there's the dollar boundary
289

289

00:14:07,420  -->  00:14:08,880
matcher which means that if anything
290

290

00:14:08,880  -->  00:14:10,930
occurs after this pattern then there's
291

291

00:14:10,930  -->  00:14:11,700
no match
292

292

00:14:11,700  -->  00:14:14,310
so let's actually try this with a few
293

293

00:14:14,310  -->  00:14:16,020
sample numbers and what I'm going to do just to save
294

294

00:14:16,020  -->  00:14:18,250
as bit of time here because I'm just going to copy
295

295

00:14:18,250  -->  00:14:21,450
this block of code in because the video is
296

296

00:14:21,450  -->  00:14:22,540
getting quite long
297

297

00:14:22,540  -->  00:14:26,230
I'll just paste that in and I've got 4
298

298

00:14:26,230  -->  00:14:28,810
example here you can see the first two
299

299

00:14:28,810  -->  00:14:31,300
shouldn't match the last one should
300

300

00:14:31,300  -->  00:14:33,040
match either and the third one is the one
301

301

00:14:33,040  -->  00:14:35,680
that's the right length should match and
302

302

00:14:35,680  -->  00:14:37,810
obviously the first one as well was
303

303

00:14:37,810  -->  00:14:40,360
13 that should match as well so
304

304

00:14:40,360  -->  00:14:41,620
basically we've got 2 here that should
305

305

00:14:41,620  -->  00:14:43,380
match the other two visa 2 shouldn't
306

306

00:14:43,380  -->  00:14:44,860
match because it starts with a
307

307

00:14:44,860  -->  00:14:47,170
five and visa start with the four and
308

308

00:14:47,170  -->  00:14:48,850
visa 4 shouldn't match because it's
309

309

00:14:48,850  -->  00:14:51,370
only four digits so lets actually just
310

310

00:14:51,370  -->  00:14:55,630
run that and confirm and you can see
311

311

00:14:55,630  -->  00:14:58,560
visa 1 and Visa three-match as
312

312

00:14:58,560  -->  00:15:00,760
they should and visa 2 and visa 4
313

313

00:15:00,760  -->  00:15:02,080
don't for the reasons that I outlined
314

314

00:15:02,080  -->  00:15:04,900
now note that this is a comprehensivr
315

315

00:15:04,900  -->  00:15:07,870
check for valid visa card number some 13
316

316

00:15:07,870  -->  00:15:09,850
and 16 digit strings would match this
317

317

00:15:09,850  -->  00:15:11,590
regular expression but fail other steps
318

318

00:15:11,590  -->  00:15:14,290
required to validate a card number
319

319

00:15:14,290  -->  00:15:16,000
alright so that's it for our whirlwind
320

320

00:15:16,000  -->  00:15:19,180
whirlwind tour of regular expressions i
321

321

00:15:19,180  -->  00:15:20,560
hope you've got a lot out of this
322

322

00:15:20,560  -->  00:15:22,090
so in the next video will actually start
323

323

00:15:22,090  -->  00:15:23,770
looking at the challenge for this i'll
324

324

00:15:23,770  -->  00:15:29,820
see you in the next video
