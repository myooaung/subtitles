WEBVTT
1
1

00:00:05.400  -->  00:00:08.710
So in the previous two videos
we've been talking about classes.
2

2

00:00:08.710  -->  00:00:09.860
It's now time to continue and
3

3

00:00:09.860  -->  00:00:13.900
talk about constructors which
are an important part of using classes.
4

4

00:00:13.900  -->  00:00:16.360
But before that it's challenge time.
5

5

00:00:16.360  -->  00:00:20.110
I'm gonna challenge your understanding
of the previous two videos.
6

6

00:00:20.110  -->  00:00:22.010
So here's what I want you to do.
7

7

00:00:37.080  -->  00:00:41.090
So the challenge is to create a new
class which is going to be used for
8

8

00:00:41.090  -->  00:00:42.780
a bank account.
9

9

00:00:42.780  -->  00:00:47.360
So the fields for the class will be
the account number, the balance.
10

10

00:00:47.360  -->  00:00:50.010
In other words,
how much money is in the account?
11

11

00:00:50.010  -->  00:00:53.570
The customer name,
the email address and the phone number.
12

12

00:00:53.570  -->  00:00:57.220
So you want to also create getters and
setters for each field.
13

13

00:00:57.220  -->  00:01:00.870
And in addition create two
additional methods for this class.
14

14

00:01:00.870  -->  00:01:04.910
The first method should allow
the customer to deposit funds.
15

15

00:01:04.910  -->  00:01:08.560
So that method should then increment
the balance field with the amount.
16

16

00:01:08.560  -->  00:01:12.340
But also you should allow the customer
to withdraw funds with another method.
17

17

00:01:12.340  -->  00:01:15.140
And that method should deduct
from the balance field but
18

18

00:01:15.140  -->  00:01:19.370
also not allow the withdrawal to complete
if there are insufficient funds, and
19

19

00:01:19.370  -->  00:01:21.290
I think I spelled there wrong there.
20

20

00:01:21.290  -->  00:01:24.760
And what you wanna do is also create
various code in the main class,
21

21

00:01:24.760  -->  00:01:27.860
I'm talking about the one
created initially by IntelliJ,
22

22

00:01:27.860  -->  00:01:30.090
just to confirm that your code is working.
23

23

00:01:30.090  -->  00:01:34.290
And you might also wanna add some
system tied up print lines to the two
24

24

00:01:34.290  -->  00:01:39.330
methods above as well to determine
how much was deposited or withdrawn.
25

25

00:01:39.330  -->  00:01:42.200
So pause the video and try that out, and
26

26

00:01:42.200  -->  00:01:47.680
when you're ready to see my solution,
come back and we'll go through it.
27

27

00:01:47.680  -->  00:01:48.410
How did you get on?
28

28

00:01:48.410  -->  00:01:49.840
Did you figure it out?
29

29

00:01:49.840  -->  00:01:51.130
Let me show you my solution.
30

30

00:01:51.130  -->  00:01:54.770
So what we're going to do is
create firstly, a new class.
31

31

00:01:54.770  -->  00:01:58.940
I'm gonna go into my package as before,
and select New.
32

32

00:01:58.940  -->  00:02:04.090
And I'm just going to call
this Java class Account.
33

33

00:02:04.090  -->  00:02:08.060
Now we also need some fields,
so we need the account number.
34

34

00:02:12.120  -->  00:02:15.620
I'm gonna use a String.
35

35

00:02:15.620  -->  00:02:17.510
You could use a number if you wanted to.
36

36

00:02:17.510  -->  00:02:21.020
And we also need the balance, so
I'm gonna use a double for the balance.
37

37

00:02:22.190  -->  00:02:23.510
And we'll put accountBalance.
38

38

00:02:25.700  -->  00:02:26.870
And the customer's name.
39

39

00:02:33.140  -->  00:02:34.530
Email address.
40

40

00:02:39.970  -->  00:02:45.560
And their phone number
are all gonna be strings.
41

41

00:02:45.560  -->  00:02:47.340
And probably there,
I'll get the name right.
42

42

00:02:47.340  -->  00:02:54.150
I'm just gonna actually put balance and
number.
43

43

00:02:54.150  -->  00:02:59.330
You could use either, but
44

44

00:02:59.330  -->  00:03:02.800
because the class name is called Account.
45

45

00:03:02.800  -->  00:03:06.040
We know that it's based on an account, so
46

46

00:03:06.040  -->  00:03:11.940
therefore when we're creating a field
called number it's for the account class.
47

47

00:03:11.940  -->  00:03:14.610
We don't really need to put
the word account there in twice.
48

48

00:03:14.610  -->  00:03:17.790
Next, create getters and setters.
49

49

00:03:17.790  -->  00:03:21.830
And I'm gonna show you a trick to quickly
create getters and setters using IntelliJ,
50

50

00:03:21.830  -->  00:03:25.450
cuz it's such a common thing
that you do regularly.
51

51

00:03:25.450  -->  00:03:29.090
There's a way to automate that and
that's to go into the Code menu and
52

52

00:03:29.090  -->  00:03:33.800
click on Generate, where you can see on
my computer Cmd+N does the same thing.
53

53

00:03:33.800  -->  00:03:37.330
So click on Generate, and
you can click on either Getter or
54

54

00:03:37.330  -->  00:03:39.140
Setter, Getter and Setter.
55

55

00:03:39.140  -->  00:03:43.560
So I'm gonna click on both, then you
need to select which fields you want.
56

56

00:03:43.560  -->  00:03:48.120
So I can select one or more, and you can
see the f indicated these are private
57

57

00:03:48.120  -->  00:03:50.530
fields and the f of course, if fields.
58

58

00:03:50.530  -->  00:03:51.040
Click on OK.
59

59

00:03:51.040  -->  00:03:55.070
Once I do that,
IntelliJ creates all the code for us.
60

60

00:03:55.070  -->  00:03:55.770
How nice is that?
61

61

00:03:55.770  -->  00:03:58.870
Saves you a lot of typing,
heck a lot of typing.
62

62

00:03:58.870  -->  00:04:02.590
So that's a pretty cool way to very
quickly get us setters created.
63

63

00:04:02.590  -->  00:04:03.660
So make sure you check that out.
64

64

00:04:03.660  -->  00:04:06.920
We'll be referring to that for
other types of code generation later.
65

65

00:04:06.920  -->  00:04:10.050
So that's our getters and setters created.
66

66

00:04:10.050  -->  00:04:13.900
Next, we need to create two methods,
a deposit and a withdrawal.
67

67

00:04:13.900  -->  00:04:18.310
So we can start off by creating
the one for the deposit.
68

68

00:04:18.310  -->  00:04:19.910
So it's gonna be a void method.
69

69

00:04:19.910  -->  00:04:22.700
So that's public void deposit and
70

70

00:04:22.700  -->  00:04:27.230
we're gonna pass the parameter
of the depositAmount.
71

71

00:04:30.940  -->  00:04:32.870
And then to add to the balance,
72

72

00:04:32.870  -->  00:04:36.080
we wouldn't want to do
balance = depositAmount.
73

73

00:04:36.080  -->  00:04:37.710
That's going to replace the amount,
74

74

00:04:37.710  -->  00:04:39.970
the amount that's currently
set from the balance.
75

75

00:04:39.970  -->  00:04:43.850
What we wanna do is add to the balance
by using the plus equal operator.
76

76

00:04:43.850  -->  00:04:47.470
So that will then add to that balance and
for clarification,
77

77

00:04:47.470  -->  00:04:52.520
we can use this to make sure that this
is the field that we're updating.
78

78

00:04:52.520  -->  00:04:54.490
So that's deposit function.
79

79

00:04:54.490  -->  00:04:58.780
And for the withdrawal one,
we'll do public void withdrawal.
80

80

00:05:02.400  -->  00:05:04.840
And we're also gonna find the amount, and
81

81

00:05:04.840  -->  00:05:09.590
we're gonna pass the amount that we wanna
withdrawal, so we'll put withdrawal.
82

82

00:05:12.780  -->  00:05:16.220
So what we can do now is test to see
whether there was sufficient funds
83

83

00:05:16.220  -->  00:05:18.730
available to process the withdrawal.
84

84

00:05:18.730  -->  00:05:23.160
So the easiest way to do that
would be to put if balance,
85

85

00:05:23.160  -->  00:05:29.730
the current balance in the bank account
minus the amount that we wanna withdraw.
86

86

00:05:29.730  -->  00:05:33.180
If the balance of those two
is less than or equal to 0,
87

87

00:05:33.180  -->  00:05:35.730
it means they have a good enough money.
88

88

00:05:35.730  -->  00:05:40.100
So we're gonna put that message and
89

89

00:05:40.100  -->  00:05:43.750
put Only balance available.
90

90

00:05:48.230  -->  00:05:50.000
Withdrawal not processed".
91

91

00:05:52.240  -->  00:05:55.100
now I'm adding this bit of video after
92

92

00:05:55.100  -->  00:05:57.050
this original video was recorded and
93

93

00:05:57.050  -->  00:05:58.730
that's to let you know that there's a
94

94

00:05:58.730  -->  00:06:00.730
slight bug with the withdrawal method
95

95

00:06:00.730  -->  00:06:03.410
you can see that I've actually got
96

96

00:06:03.410  -->  00:06:05.810
balanced take withdrawal amount less
97

97

00:06:05.810  -->  00:06:08.660
than or equal to zero and in fact what
98

98

00:06:08.660  -->  00:06:11.270
it should be is balanced take withdrawal
99

99

00:06:11.270  -->  00:06:13.100
amount less than zero and you can see
100

100

00:06:13.100  -->  00:06:15.050
the equivalent or the correct code on
101

101

00:06:15.050  -->  00:06:17.600
the screen now now the reasons for that
102

102

00:06:17.600  -->  00:06:19.340
is going to be explained fully in the
103

103

00:06:19.340  -->  00:06:20.090
next video
104

104

00:06:20.090  -->  00:06:21.410
where we actually go through the code to
105

105

00:06:21.410  -->  00:06:23.210
change it but I'm bringing it up here
106

106

00:06:23.210  -->  00:06:25.220
now just in case you're looking at that
107

107

00:06:25.220  -->  00:06:27.170
and wondering what's going on now the
108

108

00:06:27.170  -->  00:06:28.670
reason that we want to do in less then
109

109

00:06:28.670  -->  00:06:31.250
instead of less than equal is because we
110

110

00:06:31.250  -->  00:06:33.020
only want to check to see if we're going
111

111

00:06:33.020  -->  00:06:34.370
into the red in other words if we're
112

112

00:06:34.370  -->  00:06:36.260
going into the minus it's quite
113

113

00:06:36.260  -->  00:06:37.910
possible if you had ten dollars in the
114

114

00:06:37.910  -->  00:06:40.970
bank account to withdraw ten dollars and
115

115

00:06:40.970  -->  00:06:43.160
leaving a balance of zero so that's
116

116

00:06:43.160  -->  00:06:44.960
quite possible and you would do that
117

117

00:06:44.960  -->  00:06:47.270
anytime you close the bank account so
118

118

00:06:47.270  -->  00:06:49.220
consequently the less than or equal to
119

119

00:06:49.220  -->  00:06:51.740
is actually wrong here because we're
120

120

00:06:51.740  -->  00:06:53.990
actually showing an error we can a print
121

121

00:06:53.990  -->  00:06:56.600
out an error if the withdrawal is unable
122

122

00:06:56.600  -->  00:06:58.610
to be processed if the balance is less
123

123

00:06:58.610  -->  00:07:00.980
than zero not if it's equal to zero but
124

124

00:07:00.980  -->  00:07:02.510
again this will be fully explained in
125

125

00:07:02.510  -->  00:07:04.760
the next video I'm just bringing it to
126

126

00:07:04.760  -->  00:07:09.010
your attention here
127

127

00:07:09.010  -->  00:07:13.660
Else, so what's happened in this
case is we were able to process it.
128

128

00:07:13.660  -->  00:07:17.910
We're going to put balance
-= withdrawalAmount.
129

129

00:07:17.910  -->  00:07:21.160
So we're going to deduct the withdrawal
amount from the balance, and
130

130

00:07:21.160  -->  00:07:22.050
we're gonna put.
131

131

00:07:25.990  -->  00:07:32.270
Withdrawal of withdrawalAmount processed,
132

132

00:07:32.270  -->  00:07:36.620
Remaining balance = balance.
133

133

00:07:36.620  -->  00:07:41.470
So that's it,
that's the withdrawal method.
134

134

00:07:41.470  -->  00:07:47.230
And here we might just put
135

135

00:07:47.230  -->  00:07:53.280
deposit of depositAmount
136

136

00:07:53.280  -->  00:08:01.260
made New balance is pass balance.
137

137

00:08:01.260  -->  00:08:04.540
And to be consistent,
I should really be putting this dot.
138

138

00:08:04.540  -->  00:08:09.130
Obviously it hasn't got a problem because
the parameter that we're passing isn't
139

139

00:08:09.130  -->  00:08:10.420
the same name.
140

140

00:08:10.420  -->  00:08:13.150
But one thing I'd like to tell you to do,
is to try and
141

141

00:08:13.150  -->  00:08:16.830
be consistent with your naming and
your code.
142

142

00:08:16.830  -->  00:08:20.410
So if you're gonna do it sometimes, you
should be actually doing it all the time.
143

143

00:08:20.410  -->  00:08:27.330
So in this case, I'm gonna use this dot
when referring to fields in our classes.
144

144

00:08:27.330  -->  00:08:30.450
So that's our functionality for
our account class.
145

145

00:08:30.450  -->  00:08:33.230
We've now written everything and
we've got our deposit and
146

146

00:08:33.230  -->  00:08:34.840
withdrawal functions working.
147

147

00:08:34.840  -->  00:08:38.480
So what we now need to do is
go back to our main class and
148

148

00:08:38.480  -->  00:08:40.310
test that this is working.
149

149

00:08:40.310  -->  00:08:44.190
What we're gonna do is go there, and
we're going to create a new one first.
150

150

00:08:44.190  -->  00:08:50.190
We'll call it Account
bobsAccount = new account.
151

151

00:08:53.530  -->  00:08:56.590
And I'm going to do a test first,
152

152

00:08:56.590  -->  00:09:02.160
I'm going to put
bobsAccount.withdraw(100.0).
153

153

00:09:02.160  -->  00:09:03.740
Let's try running that and
see what happens.
154

154

00:09:10.800  -->  00:09:14.650
Only 0.0 available,
withdrawal not processed.
155

155

00:09:14.650  -->  00:09:16.760
So that's good,
it's doing what it should be doing.
156

156

00:09:20.000  -->  00:09:20.640
So that's good.
157

157

00:09:20.640  -->  00:09:26.510
Next, we'll do a bobsAccount.deposit,
let's deposit $50.
158

158

00:09:28.220  -->  00:09:30.890
And then we'll try and
do the same withdrawal again.
159

159

00:09:30.890  -->  00:09:34.500
And that should still file, but
it should give us a different balance.
160

160

00:09:34.500  -->  00:09:35.390
Let's try running that.
161

161

00:09:38.700  -->  00:09:41.620
And your 50.0 available
withdraw not process.
162

162

00:09:41.620  -->  00:09:43.030
That's good.
163

163

00:09:43.030  -->  00:09:44.600
So now we'll type, bobsAccount.
164

164

00:09:46.020  -->  00:09:51.100
Let's do another deposit, deposit of $51.
165

165

00:09:51.100  -->  00:09:56.260
And with bobsAccount.withdrawal from 100,
which should now succeed because
166

166

00:09:56.260  -->  00:10:01.400
we've got $101 at this point, so
we should have a remaining balance of $1.
167

167

00:10:01.400  -->  00:10:04.100
Let's run that.
168

168

00:10:04.100  -->  00:10:05.510
Deposit of $51 made.
169

169

00:10:05.510  -->  00:10:06.830
New balance is 101.
170

170

00:10:06.830  -->  00:10:08.380
Withdrawal of $100 processed.
171

171

00:10:08.380  -->  00:10:12.740
Remaining balance is $1.0.
172

172

00:10:12.740  -->  00:10:13.360
So that's it.
173

173

00:10:13.360  -->  00:10:14.060
That's the challenge.
174

174

00:10:14.060  -->  00:10:16.820
Hopefully you got something
along those lines.
175

175

00:10:16.820  -->  00:10:19.330
And you've now really
created your own class for
176

176

00:10:19.330  -->  00:10:21.090
the first time which is fantastic.
177

177

00:10:21.090  -->  00:10:23.740
Now of course, we didn't actually
set any other values there.
178

178

00:10:23.740  -->  00:10:28.000
If we wanted to set the other values
what we would've had to do is done
179

179

00:10:28.000  -->  00:10:32.790
is something like bobsAccount.set(the
set number, 12345') for
180

180

00:10:32.790  -->  00:10:35.460
argument's sake, the account number.
181

181

00:10:35.460  -->  00:10:41.420
Now, bobsAccount.setBalance(0.00).
182

182

00:10:41.420  -->  00:10:50.060
BobsAccount.setCustomerName("Bob Brown").
183

183

00:10:50.060  -->  00:10:58.040
BobsAccount.setCustomerEmailAddress
("myemail@bob.com").
184

184

00:10:58.040  -->  00:11:06.110
And
bobsAccount.setCustomerPhoneNumber("(087)
185

185

00:11:06.110  -->  00:11:09.520
123-4567").
186

186

00:11:09.520  -->  00:11:14.580
So you can see there's lots typing there
if we wanted to set the field values for
187

187

00:11:14.580  -->  00:11:16.390
the first time.
188

188

00:11:16.390  -->  00:11:18.310
And you mentioned if you had 10 or 20 or
189

189

00:11:18.310  -->  00:11:22.620
30 fields can be quite a bit
to code to actually do that.
190

190

00:11:22.620  -->  00:11:25.620
There is another way of doing this
when you're creating an object for
191

191

00:11:25.620  -->  00:11:29.640
the first time using a class,
and that's using constructors.
192

192

00:11:29.640  -->  00:11:33.300
So what you can do with a constructor is
you can essentially do all these commands
193

193

00:11:33.300  -->  00:11:36.660
here to set the initial parameters or
the initial values of the fields and
194

194

00:11:36.660  -->  00:11:41.710
any other initialization you wanna
perform in the one hit using constructor.
195

195

00:11:41.710  -->  00:11:46.100
So let's see if whether we can replace
this by editing our account on Java and
196

196

00:11:46.100  -->  00:11:47.530
adding a constructor.
197

197

00:11:47.530  -->  00:11:51.410
Well first, it turns out that
a constructor is actually created for
198

198

00:11:51.410  -->  00:11:53.060
you automatically by Java.
199

199

00:11:53.060  -->  00:11:57.440
And when you actually type new and
the name of the class in brackets.
200

200

00:11:57.440  -->  00:11:59.200
This is actually calling the constructor.
201

201

00:11:59.200  -->  00:12:03.170
So this actually calling that special
method that creates the class.
202

202

00:12:03.170  -->  00:12:08.100
So it's purpose is to physically create
the object from the class for us.
203

203

00:12:08.100  -->  00:12:11.170
So I'm gonna go into our account class,
and
204

204

00:12:11.170  -->  00:12:14.330
we're going to create our own constructor.
205

205

00:12:14.330  -->  00:12:18.710
So what we're going to do is do public and
you have to type the actual name,
206

206

00:12:18.710  -->  00:12:20.520
the exact name of the class.
207

207

00:12:20.520  -->  00:12:23.620
Notice how I didn't put a void or
a type there, a return type.
208

208

00:12:23.620  -->  00:12:25.420
Constructor is something special.
209

209

00:12:25.420  -->  00:12:29.060
It has only the access modifier and
the name of the class.
210

210

00:12:29.060  -->  00:12:31.890
And also has the number
of parameters like so.
211

211

00:12:31.890  -->  00:12:36.430
What I'm going to do just to show that
this is working I'm gonna put ("Empty
212

212

00:12:36.430  -->  00:12:42.090
constructor called"), sometime Nothing
else there, I've created the constructor.
213

213

00:12:42.090  -->  00:12:44.000
This is normally created for
you automatically, but
214

214

00:12:44.000  -->  00:12:46.250
what I've done is I've
physically typed it in.
215

215

00:12:46.250  -->  00:12:48.410
So what will happen is when
we go to compile this Java,
216

216

00:12:48.410  -->  00:12:53.060
we'll look at that and go okay, you're own
constructor, I won't try and overwrite it.
217

217

00:12:53.060  -->  00:12:54.540
So if we run this now,
218

218

00:12:54.540  -->  00:12:59.180
what we should see at the top is
that message that I've just added.
219

219

00:12:59.180  -->  00:13:02.120
You can see here at the top now,
Empty constructor called.
220

220

00:13:02.120  -->  00:13:06.870
So when we type new Account with
brackets with no parameters,
221

221

00:13:06.870  -->  00:13:11.420
that actually executed this
constructor for us automatically.
222

222

00:13:11.420  -->  00:13:14.080
So that's what the purpose
of the constructor is for
223

223

00:13:14.080  -->  00:13:17.530
you to essentially initialize
the object that you're creating and
224

224

00:13:17.530  -->  00:13:21.050
do whatever else you wanna do at
the time the object is being created.
225

225

00:13:21.050  -->  00:13:26.050
So it's only ever called once at
the start when we're creating the object.
226

226

00:13:26.050  -->  00:13:30.210
So let's add on a constructor and
set some parameters up, so
227

227

00:13:30.210  -->  00:13:33.910
we can set these values in the constructor
instead of using the setters.
228

228

00:13:33.910  -->  00:13:38.350
So to do that, they come back here and
can create another constructor
229

229

00:13:38.350  -->  00:13:41.300
because like methods
constructors can be overloaded.
230

230

00:13:41.300  -->  00:13:44.750
We can have more than one constructor
provided we change the number of
231

231

00:13:44.750  -->  00:13:45.840
parameters.
232

232

00:13:45.840  -->  00:13:47.120
We're gonna change
the number of parameters,
233

233

00:13:47.120  -->  00:13:50.470
I'm gonna go with public account.
234

234

00:13:53.350  -->  00:13:58.240
Now what we're gonna do here,
is we're going to
235

235

00:13:58.240  -->  00:14:03.960
initialize the numbers we're
gonna put String Number,
236

236

00:14:03.960  -->  00:14:07.450
double balance, string custom.
237

237

00:14:07.450  -->  00:14:09.170
And you'll notice IntelliJ
is trying to help us now,
238

238

00:14:09.170  -->  00:14:12.510
it's going clearly you're
creating a constructor
239

239

00:14:12.510  -->  00:14:15.990
which fields do you wanna be included
as parameters in this constructor?
240

240

00:14:15.990  -->  00:14:18.650
So it's quite handy, so
I'm gonna specify all of them.
241

241

00:14:18.650  -->  00:14:22.380
So String customerEmailAddress and String,
242

242

00:14:22.380  -->  00:14:25.310
go down to the next line,
customerPhoneNumber.
243

243

00:14:28.210  -->  00:14:34.340
Then what we do, we just do this
we've seen this before in the setter,
244

244

00:14:34.340  -->  00:14:39.130
this.number = number,
this.balance = balance,
245

245

00:14:39.130  -->  00:14:42.670
this.customerName = customerName,
246

246

00:14:42.670  -->  00:14:47.980
this.customerEmailAddress =
customerEmailAddress and
247

247

00:14:47.980  -->  00:14:53.010
this.customerPhoneNumber +
customerPhoneNumber.
248

248

00:14:53.010  -->  00:14:57.600
That's now setting the field
values in the constructor.
249

249

00:14:57.600  -->  00:15:00.450
What we now need to do is
call that constructor, and
250

250

00:15:00.450  -->  00:15:02.060
we're creating the object.
251

251

00:15:02.060  -->  00:15:10.270
So to call a constructor what we do
is instead of having no parameters,
252

252

00:15:10.270  -->  00:15:15.560
we pass parameters like ("12345",
253

253

00:15:15.560  -->  00:15:22.240
0.00, "Bob Brown", "myemail @bob.com" and
254

254

00:15:22.240  -->  00:15:26.740
"(087) 1234567").
255

255

00:15:26.740  -->  00:15:31.410
Let me close off the bracket and
we fix the top of might there.
256

256

00:15:31.410  -->  00:15:34.540
I forgot a quite the looks of it.
257

257

00:15:34.540  -->  00:15:35.480
So that's the line.
258

258

00:15:35.480  -->  00:15:37.850
Now that we've done that,
these are now redundant.
259

259

00:15:37.850  -->  00:15:41.400
We don't need to do that because
the constructor has done that for us.
260

260

00:15:41.400  -->  00:15:45.310
And just to confirm that that works,
we can go back here and we can put.
261

261

00:15:48.870  -->  00:15:56.350
Account constructor
with parameters called.
262

262

00:15:56.350  -->  00:15:57.370
If you try run that now.
263

263

00:16:00.870  -->  00:16:04.340
I can't construct that parameters called
because we specified you account and
264

264

00:16:04.340  -->  00:16:06.080
then the parameters.
265

265

00:16:06.080  -->  00:16:11.070
And the values have been automatically
updated in the constructor.
266

266

00:16:11.070  -->  00:16:12.920
And we can confirm that
by just typing a few out.
267

267

00:16:12.920  -->  00:16:18.710
We can do (bobsAccount.getnumber());
268

268

00:16:18.710  -->  00:16:24.500
(bobsAccount.getbalance()); let's
269

269

00:16:24.500  -->  00:16:28.360
just do those two and run that.
270

270

00:16:30.210  -->  00:16:35.370
And we can see 12345 and 0.00, so they
were actually updated by the constructor.
271

271

00:16:35.370  -->  00:16:38.850
Now I mentioned before that
constructors can be overloaded, so
272

272

00:16:38.850  -->  00:16:40.280
we can have more than one.
273

273

00:16:40.280  -->  00:16:44.930
So in line with that,
what we can do is we can call one
274

274

00:16:44.930  -->  00:16:48.730
constructor from another constructor.
275

275

00:16:48.730  -->  00:16:53.240
And that sounds a little bit confusing but
the idea of that would be, if let's say,
276

276

00:16:53.240  -->  00:16:55.450
that if an empty constructor is called.
277

277

00:16:55.450  -->  00:16:58.390
In other words one without any parameters,
278

278

00:16:58.390  -->  00:17:02.760
perhaps we want to create the object
with some default values.
279

279

00:17:02.760  -->  00:17:03.830
So what do I mean by that.
280

280

00:17:03.830  -->  00:17:04.660
So in this scenario,
281

281

00:17:04.660  -->  00:17:10.070
what we could do is say okay,
if the empty constructor is called.
282

282

00:17:10.070  -->  00:17:13.250
We want to actually call the constructor
with all these parameters, and
283

283

00:17:13.250  -->  00:17:17.440
we want to issue some default values for
the five fields.
284

284

00:17:17.440  -->  00:17:22.270
So to do that we type this is
a special case of the word this.
285

285

00:17:22.270  -->  00:17:27.890
We type brackets and
we pass our parameters so
286

286

00:17:27.890  -->  00:17:31.890
we might put "56789" and
287

287

00:17:31.890  -->  00:17:38.850
the balance 2.50 customer
name "Default name",
288

288

00:17:38.850  -->  00:17:44.960
"Default address", "default phone".
289

289

00:17:44.960  -->  00:17:49.910
So what we're doing there with
this is a special use of this you
290

290

00:17:49.910  -->  00:17:51.520
won't see anywhere else.
291

291

00:17:51.520  -->  00:17:55.040
This is calling another
constructor within a constructor.
292

292

00:17:55.040  -->  00:17:58.470
So what we're saying here is look,
if you try and
293

293

00:17:58.470  -->  00:18:02.010
create an object form this class and
you don't get me any parameters,
294

294

00:18:02.010  -->  00:18:06.170
these are the parameters that I'm going
to use when creating this object.
295

295

00:18:06.170  -->  00:18:08.580
This is optional,
it's not something you have to do but
296

296

00:18:08.580  -->  00:18:11.120
there can be situations
where you wanna do that.
297

297

00:18:11.120  -->  00:18:16.070
When you wanna make sure that the class
is created with all the field set and
298

298

00:18:16.070  -->  00:18:18.960
you could issue some default
constructors to do that.
299

299

00:18:18.960  -->  00:18:23.930
Now one other thing to keep in mind is
using this to call another constructor
300

300

00:18:23.930  -->  00:18:28.120
is what you need to do is make sure that's
the very first line that's executed.
301

301

00:18:28.120  -->  00:18:32.960
In other words, we couldn't paste in the
system.out.printIn as the first line in
302

302

00:18:32.960  -->  00:18:34.050
the constructor.
303

303

00:18:34.050  -->  00:18:35.830
Cuz it's gonna actually come and say,
304

304

00:18:35.830  -->  00:18:39.340
call to 'this() must be the first
statement in constructor body.
305

305

00:18:39.340  -->  00:18:41.670
This is just constructors
we're talking about.
306

306

00:18:41.670  -->  00:18:43.950
It has to be the very
first line that's code.
307

307

00:18:43.950  -->  00:18:45.090
Let me set that back.
308

308

00:18:45.090  -->  00:18:47.150
So we go back to our main class and
run it again.
309

309

00:18:49.620  -->  00:18:52.850
Now it's both doing exactly the same as
you can see, but let's change that now.
310

310

00:18:53.970  -->  00:18:56.900
And we'll set it to new account,
and I'll just comment out the rest.
311

311

00:18:56.900  -->  00:19:03.780
So empty again, like so and
we'll just comment the next line as well.
312

312

00:19:03.780  -->  00:19:05.850
Now if we run it using
the empty constructor,
313

313

00:19:05.850  -->  00:19:09.780
we should actually get the right
values from our default constructor.
314

314

00:19:09.780  -->  00:19:10.850
And you can see what's happened here.
315

315

00:19:11.880  -->  00:19:16.110
The account constructor with
parameters was called and
316

316

00:19:16.110  -->  00:19:17.270
the empty constructor was called.
317

317

00:19:17.270  -->  00:19:20.830
So they're actually both
called as you can see there.
318

318

00:19:20.830  -->  00:19:23.690
The reason why you see it in that
order of course makes sense.
319

319

00:19:23.690  -->  00:19:26.490
If you come back here to the account.Java,
320

320

00:19:26.490  -->  00:19:32.160
the very first line of the account
constructor called the other constructor.
321

321

00:19:32.160  -->  00:19:35.640
Because then after that was finished
that we actually printed this out.
322

322

00:19:35.640  -->  00:19:38.980
So you can say that what happened was the
default constructor the empty constructor
323

323

00:19:38.980  -->  00:19:40.580
was called first.
324

324

00:19:40.580  -->  00:19:44.300
It's first line called the other one
which then printed out that message.
325

325

00:19:44.300  -->  00:19:45.790
So if you're looking at that and
326

326

00:19:45.790  -->  00:19:49.210
think well why is the account constructor
with parameters called first.
327

327

00:19:49.210  -->  00:19:52.940
It wasn't actually called first, it's just
displayed that way with our messages.
328

328

00:19:54.240  -->  00:19:58.670
So as you can see, 56789,
and 2.5 was actually passed.
329

329

00:19:58.670  -->  00:20:02.130
So it's obviously working,
the default constructor was working.
330

330

00:20:02.130  -->  00:20:05.350
I'm gonna pause the video here, and
let's come back in the next video and
331

331

00:20:05.350  -->  00:20:07.490
finish off our discussion
about constructors.
