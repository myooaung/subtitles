WEBVTT
1
1

00:00:05.220  -->  00:00:10.700
ok so moving on lets just see if we
can actually get the no such element
2

2

00:00:10.700  -->  00:00:16.190
exception to actually kick to basically
be invoked as an exception in our error as an
3

3

00:00:16.190  -->  00:00:20.890
exception in our program so firstly if we run the program we enter something
4

4

00:00:20.890  -->  00:00:23.730
invalid
5

5

00:00:23.730  -->  00:00:28.270
we get the input mismatch exception but
that's not the error the one we
6

6

00:00:28.270  -->  00:00:31.970
actually want is no such element
exception so could we do that well
7

7

00:00:31.970  -->  00:00:37.260
let's just try running again instead of
typing in some something that we know
8

8

00:00:37.260  -->  00:00:42.270
that isn't a number theirs another command you can type you can press Ctrl D on a PC or Linux
9

9

00:00:42.270  -->  00:00:47.130
machine while your in the run window on a Mac I'm going to press Command D I wanna do
10

10

00:00:47.130  -->  00:00:51.960
that that's going to actually send
the ASCII EOT end of transmission
11

11

00:00:51.960  -->  00:00:57.120
character to the program and then
abruptly terminates any input so just do that
12

12

00:00:57.120  -->  00:01:02.890
to confirm that works we can see their
command D has been showing and I'll
13

13

00:01:02.890  -->  00:01:08.650
just run that again so its clear what's happening and look
at the green little output that when I
14

14

00:01:08.650  -->  00:01:12.360
actually click on I'm pressing
command D again you do control D on a
15

15

00:01:12.360  -->  00:01:18.470
Windows or Linux machine you will now send a EOF file command d and its control + d for
16

16

00:01:18.470  -->  00:01:22.840
windows and linux was sent through but the point is
we've now got the no such element
17

17

00:01:22.840  -->  00:01:27.970
exception thrown because of that so by
subclassing the no such element
18

18

00:01:27.970  -->  00:01:32.750
exception the creators of the scanner
class allowed programs find the control
19

19

00:01:32.750  -->  00:01:36.640
of how they respond to the exception
so we got multiple exceptions actually happening
20

20

00:01:36.640  -->  00:01:42.150
here so again going back into the
scanner class and we go and click on the
21

21

00:01:42.150  -->  00:01:51.060
no such elements exception notice how it
extends the runtime exception and click
22

22

00:01:51.060  -->  00:01:53.670
on super
23

23

00:01:53.670  -->  00:01:57.970
we are now in the runtime exception and notice how the super is being called if I click on super
24

24

00:01:57.970  -->  00:02:01.990
again we should get straight to
exception which is sort of the the base
25

25

00:02:01.990  -->  00:02:07.030
class it actually action extends throw but not
another exception so we can go through again
26

26

00:02:07.030  -->  00:02:10.030
into exception by clicking on the super
27

27

00:02:10.750  -->  00:02:15.700
we get to throw-able and you can see now that the throw-able is actually got a method in to
28

28

00:02:15.700  -->  00:02:20.230
fill in stack trace so as a result as
long as the subclass exceptions
29

29

00:02:20.230  -->  00:02:24.780
constructor calls super the stack traces
automatically gonna be available and
30

30

00:02:24.780  -->  00:02:28.700
output like you can see on the screen there
now there are other constructors for
31

31

00:02:28.700  -->  00:02:31.660
most of these exceptions and you may have caught a glimpse of that as I was quickly
32

32

00:02:31.660  -->  00:02:36.680
clicking through and these can allow method
to add more information to the exception
33

33

00:02:36.680  -->  00:02:41.450
before throwing it to its calling method but
really getting ahead of myself here
34

34

00:02:41.450  -->  00:02:45.590
so lets just go back and modify the program
to start catching the exceptions and
35

35

00:02:45.590  -->  00:02:49.420
look at the options we have for dealing
with them so close this run window
36

36

00:02:49.420  -->  00:02:54.140
down and will close throw-able for we don't need half of
these so close all these other ones
37

37

00:02:54.140  -->  00:03:03.810
down they are part of Java and just get back to our Code ok so we're back in our example.java now so let's look
38

38

00:03:03.810  -->  00:03:08.540
at getInt method starting at the
this lowest level of the program the
39

39

00:03:08.540  -->  00:03:13.370
getInt method can get an exception when theirs no more
input available or when the input
40

40

00:03:13.370  -->  00:03:18.950
doesn't represent a valid integer now we could
catch the exception but if we did what will
41

41

00:03:18.950  -->  00:03:21.040
we do with it
42

42

00:03:21.040  -->  00:03:24.910
generally speaking there's no point
catching an exception unless your code can do
43

43

00:03:24.910  -->  00:03:29.090
something sensible with it as a result
and here theirs really no action that can be
44

44

00:03:29.090  -->  00:03:34.310
taken if theirs more input available so
catching the no such element exception
45

45

00:03:34.310  -->  00:03:37.940
is therefore really a waste of time in
this method the only really sensible
46

46

00:03:37.940  -->  00:03:42.430
thing to do with it is to allow it to
propagate to the calling method and that
47

47

00:03:42.430  -->  00:03:46.660
would happen automatically if we don't catch it now a
little later and I'm going to discuss the two
48

48

00:03:46.660  -->  00:03:50.980
different types of exceptions and will
see that sometimes you may want a deal
49

49

00:03:50.980  -->  00:03:55.500
with the exception in some way even if
you only want to propagate it now as I
50

50

00:03:55.500  -->  00:03:59.040
mentioned IO is a good source of
potential errors so it makes more sense
51

51

00:03:59.040  -->  00:04:02.590
to discuss checked and unchecked
exceptions using more realistic
52

52

00:04:02.590  -->  00:04:08.220
examples but our exceptions here are unchecked
and we can just allow them to propagate
53

53

00:04:08.220  -->  00:04:12.560
automatically if we can't handle them
sensibly in a particular method now theirs
54

54

00:04:12.560  -->  00:04:16.790
a possible action that we could take
if we get an input mismatch exception we
55

55

00:04:16.790  -->  00:04:21.180
could request another integer from the
user so let's make some changes to the
56

56

00:04:21.180  -->  00:04:22.780
getInt method to do that
57

57

00:04:22.780  -->  00:04:30.460
so we're going to instead of just returning s.nextInt lets have a method to continually
58

58

00:04:30.460  -->  00:04:33.780
asked for input until we got
something valid so the way to do
59

59

00:04:33.780  -->  00:04:39.500
that's pretty straightforward we put...so basically that means we talked about
60

60

00:04:39.500  -->  00:04:43.440
this before but it's going to continue
executing until we specially break out of
61

61

00:04:43.440  -->  00:04:43.960
it
62

62

00:04:43.960  -->  00:04:51.070
then we are going to put...
63

63

00:04:51.070  -->  00:05:01.860
....
64

64

00:05:01.860  -->  00:05:09.820
....so we need to do a s.nextLine which we talked about in
65

65

00:05:09.820  -->  00:05:14.160
previous videos to basically read
passing the lines so we can actually
66

66

00:05:14.160  -->  00:05:22.780
start fresh and put...
67

67

00:05:22.780  -->  00:05:34.220
.....
68

68

00:05:35.260  -->  00:05:39.620
....and that's gonna be
invoke the code on line
69

69

00:05:39.620  -->  00:05:43.900
28 if its valid if they have
typed a number in and the code basically
70

70

00:05:43.900  -->  00:05:48.640
from line 30 to 32 is only going to
be invoked in used if their was actually an
71

71

00:05:48.640  -->  00:05:55.220
error so lets run that first and check the
it does work ok and you can see on line
72

72

00:05:55.220  -->  00:06:00.400
17 and 18 its asking for 2 integers so we can enter the first one correctly second one
73

73

00:06:00.400  -->  00:06:07.560
correctly x is 123 y is 124 so that's
working out ok and if we check it again
74

74

00:06:07.560  -->  00:06:11.820
put something invalid in ABC
75

75

00:06:14.460  -->  00:06:27.660
its continually asking that we entered something invalid....again its working quite nicely...and answers ultimately to so bear in mind that you know
76

76

00:06:27.660  -->  00:06:31.960
I'm explaining about exception handling here but it is very difficult to be able to
77

77

00:06:31.960  -->  00:06:36.590
guarantee an exception dividing by
zero in scanner.nextInt method is two ways I
78

78

00:06:36.590  -->  00:06:40.590
can be sure I'm generating an error which
is why I'm using them in this example
79

79

00:06:40.590  -->  00:06:45.870
but this get.newInt method is very
wrong for several reasons so please do
80

80

00:06:45.870  -->  00:06:47.320
not use this as an example
81

81

00:06:47.320  -->  00:06:51.900
of how to get input from a users in a real program the
later examples is gonna do that much
82

82

00:06:51.900  -->  00:06:56.740
better and just to confirm if we run it one more time
will see what happens with valid and invalid
83

83

00:06:56.740  -->  00:07:01.590
input I can do the command D which is
CTRL D on PC running Windows or
84

84

00:07:01.590  -->  00:07:06.630
Linux we can exit we get the no such element
exception and note how that wasn't
85

85

00:07:06.630  -->  00:07:09.750
trapped with our exception here because
we already caught the input mismatch
86

86

00:07:09.750  -->  00:07:13.610
exception and we've put some code in automatically but the no such
87

87

00:07:13.610  -->  00:07:17.500
elements exception wasn't caught and
went back up to chain as we talked about
88

88

00:07:17.500  -->  00:07:21.820
before and the reason we did that we
decided to it will be left for the calling
89

89

00:07:21.820  -->  00:07:27.800
method to handle that error rather than actually handle it in the getInt class itself now the calling method is
90

90

00:07:27.800  -->  00:07:33.490
divide and as well as receiving an
exception from getInt it can also get one by
91

91

00:07:33.490  -->  00:07:37.400
attempting division by zero and once
again there's really nothing sensible
92

92

00:07:37.400  -->  00:07:41.090
that this method could do with either
exception because if a method can't
93

93

00:07:41.090  -->  00:07:45.030
perform the function that it's supposed
to perform then the only thing it can you know
94

94

00:07:45.030  -->  00:07:49.940
realistically do is inform its caller
about the error so the first attempt
95

95

00:07:49.940  -->  00:07:53.460
earlier returns 0 but this was
part of I say an aircraft navigation
96

96

00:07:53.460  -->  00:07:59.330
system and it return 0 when it really meant I did something and it got on fire and my sensors burnt out
97

97

00:07:59.330  -->  00:08:03.680
you can see that the consequences could be
quite serious but in this case we are
98

98

00:08:03.680  -->  00:08:07.690
looking at exception so I'm going to press
on so lets really annoy the user at this
99

99

00:08:07.690  -->  00:08:10.910
point by attempting to catch the no such
exception
100

100

00:08:10.910  -->  00:08:14.800
and insisting that they enter number so the
first attempt to this could be something
101

101

00:08:14.800  -->  00:08:19.070
along those lines lets look at the divide method again add a try.....
102

102

00:08:21.610  -->  00:08:40.950
...
103

103

00:08:42.260  -->  00:08:45.740
now this is very common when adding a try
block to code because you can see now
104

104

00:08:45.740  -->  00:08:51.820
that x has suddenly become a declared on
line 21 and 24 it happens because a try block
105

105

00:08:51.820  -->  00:08:56.380
is the same as any other java block as far as scope is concerned so what would
106

106

00:08:56.380  -->  00:09:05.660
really need to do is to declare x outside of the try so we need to put.....
107

107

00:09:05.660  -->  00:09:10.230
....
108

108

00:09:10.230  -->  00:09:17.490
...so if we run this firstly checking that
it works correctly for the valid inputs
109

109

00:09:17.490  -->  00:09:21.940
and running again and this time if I try
and exit
110

110

00:09:21.940  -->  00:09:28.570
with my command D well it still crashed
that's because although we caught the
111

111

00:09:28.570  -->  00:09:32.390
first exception our exception handler
then attempts to retry the operation
112

112

00:09:32.390  -->  00:09:37.230
that caused the problem by calling getInt again and this results in a second exception
113

113

00:09:37.230  -->  00:09:42.050
which isn't actually caught so that's
why its crashed the second time so you know it
114

114

00:09:42.050  -->  00:09:46.660
is valid for an exception handler to try
and recover from an error condition but
115

115

00:09:46.660  -->  00:09:50.040
it's important to make sure that any
code in the exception handler the catch
116

116

00:09:50.040  -->  00:09:54.500
block in other words doesn't actually
cause exceptions itself so control D is
117

117

00:09:54.500  -->  00:09:59.690
close the programs Input Stream so even though
getInt creates a new scanner any attempt
118

118

00:09:59.690  -->  00:10:03.760
to read from it will continue to raise no
such element exceptions in this case thats
119

119

00:10:03.760  -->  00:10:08.890
just a feature of scanner essentially so
the upshot is that we really shouldn't have
120

120

00:10:08.890  -->  00:10:12.910
tried to do that their in the catch
block and of course we already decided it
121

121

00:10:12.910  -->  00:10:16.560
was a bad idea for other reasons but I
went ahead and did it anyway really just to
122

122

00:10:16.560  -->  00:10:20.820
demonstrate the importance of ensuring
that exceptions are not raised in New
123

123

00:10:20.820  -->  00:10:25.020
exception handler code itself a catch
block is there to catch one or more
124

124

00:10:25.020  -->  00:10:29.410
exceptions and as the name implies exceptions are things you should not
125

125

00:10:29.410  -->  00:10:30.640
normally happened
126

126

00:10:30.640  -->  00:10:34.990
in the general scheme of things but we should
guard against them in case they do keep
127

127

00:10:34.990  -->  00:10:38.370
them simple to try to make sure that
they won't cause more exception is
128

128

00:10:38.370  -->  00:10:43.730
really the rule here so it is possible to nest a try
catch block inside a catch block and
129

129

00:10:43.730  -->  00:10:47.610
you know sometimes it can be useful to
do so but the best advice I can give you
130

130

00:10:47.610  -->  00:10:52.600
is to keep your catch blocks as simple as
possible the less code their is that a catch
131

131

00:10:52.600  -->  00:10:57.790
block the less chance of it theirs another
exception being thrown so its pretty
132

132

00:10:57.790  -->  00:11:01.580
obvious that we can't do anything
sensible inside the divide method if
133

133

00:11:01.580  -->  00:11:05.050
we get an exception for getting it and we
already decided that there's nothing we
134

134

00:11:05.050  -->  00:11:10.100
can do with an attempt to divide by 0 either
so we could let both the no such element
135

135

00:11:10.100  -->  00:11:14.520
and arithmetic exceptions automatically
propagate up the call stack and let the
136

136

00:11:14.520  -->  00:11:18.700
main method handle them both but what we
can do is make life easy for us by
137

137

00:11:18.700  -->  00:11:23.800
throwing a single exception in both
cases so this is a good opportunity for you
138

138

00:11:23.800  -->  00:11:27.320
to see how the throw exceptions anyway so to throw an exception
139

139

00:11:27.940  -->  00:11:32.810
we create a new exception object and use
the throw statement generally you should try
140

140

00:11:32.810  -->  00:11:36.910
to be specific as possible and use an
appropriate subclasses exception rather
141

141

00:11:36.910  -->  00:11:41.260
than throwing exception itself now as our divide function performs integer
142

142

00:11:41.260  -->  00:11:41.990
division
143

143

00:11:41.990  -->  00:11:47.090
throwing arithmetic exceptions seems like a good
choice so we can also use the overloaded
144

144

00:11:47.090  -->  00:11:50.550
constructor that takes a string for the
exception so that we can provide a bit
145

145

00:11:50.550  -->  00:11:54.390
more information on what actually
happened now this is not really intended
146

146

00:11:54.390  -->  00:11:58.320
for the calling method but its useful in
log files when a human has to work out
147

147

00:11:58.320  -->  00:12:02.190
what happened so we should also include the
second call to getInt inside the try
148

148

00:12:02.190  -->  00:12:06.100
block so to do that would have to
declare y the same way we've declared x
149

149

00:12:06.100  -->  00:12:15.230
so lets just go ahead and clean up
our divide method so....
150

150

00:12:15.230  -->  00:12:35.200
.....
151

151

00:12:35.200  -->  00:12:42.270
and obviously whatever you want to put their
that's going to be will be able to see on
152

152

00:12:42.270  -->  00:12:47.210
the screen so that's the first when
retrieving the data and also after
153

153

00:12:47.210  -->  00:12:55.760
outputting the result the input we
got another try block so.....
154

154

00:12:55.760  -->  00:13:11.690
....
155

155

00:13:11.690  -->  00:13:26.600
...and run this first we try exit so do a command D now notice how we got an exception
156

156

00:13:26.600  -->  00:13:31.420
thrown exception in thread main no suitable inputs so that's our first
157

157

00:13:31.420  -->  00:13:35.920
exception now being generated which is
good so you can see it's working and we close it
158

158

00:13:35.920  -->  00:13:44.790
down again and run it again and this time will put in a
valid number but make sure the second on is 0 and we get
159

159

00:13:44.790  -->  00:13:51.020
our arithmetic exception attempt divide by zero so that is clearly that's working as well so
160

160

00:13:51.020  -->  00:13:54.620
when the programs run and either the 2 exceptions are true as you saw the stack traces is then
161

161

00:13:54.620  -->  00:14:03.100
much simpler actually I'm not sure if you've notice that so ill do it again so you can see it but noticed the stack
162

162

00:14:03.100  -->  00:14:07.330
traces is a lot simpler now its really only
referring to our code and that's because
163

163

00:14:07.330  -->  00:14:11.340
the exception originated in the
divide method so Java doesn't need to
164

164

00:14:11.340  -->  00:14:15.250
show any other methods that
were being invoked the code we've written though
165

165

00:14:15.250  -->  00:14:19.400
looks clumsy and will look at fixing that up
in the next video
