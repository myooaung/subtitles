1
1

00:00:05,490  -->  00:00:08,820
In the previous video, we started
working with objects and classes.
2

2

00:00:08,820  -->  00:00:11,130
You got up to speed with that.
3

3

00:00:11,130  -->  00:00:15,070
It's now time to talk about Inheritance,
what that is and
4

4

00:00:15,070  -->  00:00:17,080
how that applies to objects.
5

5

00:00:18,310  -->  00:00:21,000
To do that, the best way to
get started is to go back and
6

6

00:00:21,000  -->  00:00:25,460
talk about physical objects again because,
the thing is,
7

7

00:00:25,460  -->  00:00:29,550
different kinds of objects have a certain
amount in common with each other.
8

8

00:00:29,550  -->  00:00:34,190
Using an example of computers,
you could say that an iMac computer,
9

9

00:00:34,190  -->  00:00:38,890
an Android Nexus 9 tablet, and
a Dell PC all share the characteristics of
10

10

00:00:38,890  -->  00:00:44,530
computers, in that they've got RAM, random
access memory, ROM, read-only memory, and
11

11

00:00:44,530  -->  00:00:48,630
they've got a current state as to whether
the device is on or off, and so on.
12

12

00:00:49,640  -->  00:00:53,100
They share common characteristics,
but yet each of these devices
13

13

00:00:53,100  -->  00:00:58,180
add additional features that collectively
make them different to each other.
14

14

00:00:58,180  -->  00:01:02,260
For example,
an iMac runs the OSX operating system,
15

15

00:01:02,260  -->  00:01:06,360
it's got an intel CPU,
got a hard drive, USB ports.
16

16

00:01:06,360  -->  00:01:11,090
An Android Next 9 tablet, for example,
runs on the Android operating system, and
17

17

00:01:11,090  -->  00:01:13,110
it's got a touch screen for input.
18

18

00:01:13,110  -->  00:01:17,570
A Dell PC runs Windows, it's also
got an Intel but maybe an AMD CPU,
19

19

00:01:17,570  -->  00:01:21,400
it's got a hard drive, a mouse, and so on.
20

20

00:01:21,400  -->  00:01:25,820
You can see that, while objects
can share similar characteristics,
21

21

00:01:25,820  -->  00:01:28,290
they can also be different as well.
22

22

00:01:28,290  -->  00:01:32,840
What object oriented program really
allows us to do is to create classes
23

23

00:01:32,840  -->  00:01:37,060
to inherit commonly used standard
behavior from other classes.
24

24

00:01:37,060  -->  00:01:39,690
One of the best ways to
actually show inheritance,
25

25

00:01:39,690  -->  00:01:42,690
rather than giving you a heap
of slides discussing it,
26

26

00:01:42,690  -->  00:01:46,910
is to actually immediately go into some
code and actually start working through
27

27

00:01:46,910  -->  00:01:51,950
some scenarios in showing you what
inheritance looks like in Java code.
28

28

00:01:51,950  -->  00:01:55,020
What I'm going to do is, I'm gonna
start with the analogy of an animal.
29

29

00:01:56,100  -->  00:01:57,910
If you think of any animal,
30

30

00:01:57,910  -->  00:02:02,400
perhaps certain behaviors that
are shared across all types of animals.
31

31

00:02:02,400  -->  00:02:06,600
For example, animals all eat,
they all are able to move in some way,
32

32

00:02:06,600  -->  00:02:10,230
they've all got a body so
that's some of the basic things,
33

33

00:02:10,230  -->  00:02:14,290
but what about things like,
for example, legs?
34

34

00:02:14,290  -->  00:02:17,750
Well, no, not all animals
have legs because snakes and
35

35

00:02:17,750  -->  00:02:20,470
worms are an example of
an animal without legs.
36

36

00:02:20,470  -->  00:02:21,320
Eyes?
37

37

00:02:21,320  -->  00:02:25,500
Well, no, not all animals have eyes
because there's varieties of spiders, for
38

38

00:02:25,500  -->  00:02:27,630
example, that have no eyes.
39

39

00:02:27,630  -->  00:02:28,530
Do they all have a brain?
40

40

00:02:28,530  -->  00:02:32,710
Well, yes, actually they do, although it
does depend on the definition of a brain,
41

41

00:02:32,710  -->  00:02:35,730
but essentially, yes,
they've all got that basic mechanism.
42

42

00:02:35,730  -->  00:02:40,050
They've also got size, and
also they've got a weight as well.
43

43

00:02:40,050  -->  00:02:41,260
What we could say was,
44

44

00:02:41,260  -->  00:02:46,650
we could create a very basic class that
we could actually apply to each and
45

45

00:02:46,650  -->  00:02:52,330
every animal out there, and that we know
that any animal would have these traits.
46

46

00:02:52,330  -->  00:02:55,730
We're gonna create a new class now and
call it Animal, and we're gonna add some
47

47

00:02:55,730  -->  00:02:59,700
state and behavior, in other words,
field and methods to model that.
48

48

00:02:59,700  -->  00:03:02,960
Let's do that now, and
I've created a new class.
49

49

00:03:02,960  -->  00:03:06,200
I've created a new project
here called Inheritance, so
50

50

00:03:06,200  -->  00:03:09,990
I'm gonna create a new Java class,
and I'm gonna call it Animal.
51

51

00:03:12,760  -->  00:03:17,560
We talked about those states, so
we've got brain, we've got a body, a size,
52

52

00:03:17,560  -->  00:03:21,970
and a weight, are gonna be our four
fields that we're going to apply.
53

53

00:03:21,970  -->  00:03:27,320
I'm going to create a private field for
each of those,
54

54

00:03:27,320  -->  00:03:33,660
and we're just gonna have an integer,
private int brain,
55

55

00:03:33,660  -->  00:03:38,490
private int body, private int size,
56

56

00:03:38,490  -->  00:03:43,120
private int weight.
57

57

00:03:43,120  -->  00:03:46,420
We'll also add another one,
and a name because, of course,
58

58

00:03:46,420  -->  00:03:49,510
every animal has got a name, so
we're gonna create a string for that.
59

59

00:03:50,660  -->  00:03:54,230
We're not gonna be too worried at this
stage as to what the contents of these
60

60

00:03:54,230  -->  00:03:55,630
fields are.
61

61

00:03:55,630  -->  00:03:59,970
I've designed, as you can see, an integer
data type for the brain, body size, and
62

62

00:03:59,970  -->  00:04:02,740
weight, and
likewise a string for the name.
63

63

00:04:02,740  -->  00:04:05,560
Doesn't really matter too much at
the moment as to what type of data we're
64

64

00:04:05,560  -->  00:04:06,640
going to put in there.
65

65

00:04:06,640  -->  00:04:09,450
The main thing is what we're trying to
do is just come up with characteristics,
66

66

00:04:09,450  -->  00:04:13,820
state, in this case,
of things that all animals have got.
67

67

00:04:13,820  -->  00:04:16,140
We're also gonna create a constructor so
68

68

00:04:16,140  -->  00:04:18,870
that we can construct
an animal class easily.
69

69

00:04:18,870  -->  00:04:22,880
I'm going to just use my command
to create a constructor, and
70

70

00:04:22,880  -->  00:04:26,550
I'm going to specify all
five as parameters, like so,
71

71

00:04:26,550  -->  00:04:31,030
and the other thing we'll do is,
we'll create a getter for
72

72

00:04:31,030  -->  00:04:36,260
each of those fields, as well,
in case we need to access that later.
73

73

00:04:37,380  -->  00:04:39,850
That's the basic definition of an animal.
74

74

00:04:39,850  -->  00:04:45,270
That would be the base class, if you will,
that all our other classes that
75

75

00:04:45,270  -->  00:04:49,930
we're going to create, sort of subtypes
of animals, will base themselves off.
76

76

00:04:49,930  -->  00:04:53,550
Another example of an animal is going to
be a dog, so what we're gonna do is create
77

77

00:04:53,550  -->  00:04:57,620
a class called Dog, but we're gonna
inherit from this animal class.
78

78

00:04:57,620  -->  00:05:01,190
We're gonna go create a new class,
call it dog.
79

79

00:05:01,190  -->  00:05:07,180
In Java terminology,
if you want to inherit from another class,
80

80

00:05:07,180  -->  00:05:11,100
in other words, you wanna be
able to access, in some fashion,
81

81

00:05:11,100  -->  00:05:15,270
the state of behavior that's in that
other class, you use the extends keyword.
82

82

00:05:15,270  -->  00:05:18,300
We type extends, and we type animal.
83

83

00:05:18,300  -->  00:05:20,940
You can see that IntelliJ has come up and
given us choice of animal.
84

84

00:05:22,370  -->  00:05:26,390
By doing that,
we're able to use the state of behavior
85

85

00:05:26,390  -->  00:05:29,980
that's been defined in the animal class
in this new dog class we created.
86

86

00:05:29,980  -->  00:05:33,290
Now, you notice straight away that I've
got an error, so the error that's on
87

87

00:05:33,290  -->  00:05:38,330
the screen is saying, there's no default
constructor available in the animal class.
88

88

00:05:38,330  -->  00:05:42,360
What that's saying is, look, I'm trying
to use the animal class, and to do that,
89

89

00:05:42,360  -->  00:05:45,240
I need to be able to call
the constructor for that class.
90

90

00:05:45,240  -->  00:05:48,240
That's what we need to do when we're
creating a new class that extends
91

91

00:05:48,240  -->  00:05:49,260
from another one.
92

92

00:05:49,260  -->  00:05:53,330
We need to be able to call that other
constructor class to initialize it, and
93

93

00:05:53,330  -->  00:05:55,920
if you'll recall,
if we go back to the animal class,
94

94

00:05:55,920  -->  00:05:58,640
we've got a constructor there, so
we can initialize those five parameters.
95

95

00:05:59,940  -->  00:06:02,600
What we really need to do is make
sure that we've got a constructor for
96

96

00:06:02,600  -->  00:06:06,170
the dog class that calls that other class,
in other words,
97

97

00:06:06,170  -->  00:06:08,880
calls the constructor for
that other class.
98

98

00:06:08,880  -->  00:06:14,660
To do that, generate, and just in case you
aren't sure how I'm generating that again,
99

99

00:06:14,660  -->  00:06:16,780
click on Code and Generate.
100

100

00:06:16,780  -->  00:06:19,340
You can see to the right, in my case,
on a Mac, it's Command+N.
101

101

00:06:19,340  -->  00:06:24,520
You'll go to your operating system, and
there'll be a shortcut for your platform,
102

102

00:06:24,520  -->  00:06:27,080
so choose that to generate a constructor.
103

103

00:06:28,270  -->  00:06:31,300
You can see that I just literally
selected constructor, and
104

104

00:06:31,300  -->  00:06:33,740
intelliJ actually filled in the rest.
105

105

00:06:33,740  -->  00:06:37,740
What's happened here is, you can see
that automatically, there's those
106

106

00:06:37,740  -->  00:06:42,410
five parameters that actually are dealing
with the animal class, name, brain,
107

107

00:06:42,410  -->  00:06:47,440
body size, and weight, have been
created as parameters to the Dog class,
108

108

00:06:47,440  -->  00:06:49,650
to the Dog constructor, in other words.
109

109

00:06:49,650  -->  00:06:54,100
Then this keyword super has come up,
so what super means
110

110

00:06:54,100  -->  00:06:59,200
is to call the constructor that is for
the class that we're extending from.
111

111

00:06:59,200  -->  00:07:01,130
In this case the, superclass.
112

112

00:07:01,130  -->  00:07:06,300
The super class, or sort of the big
class that this class is extending from,
113

113

00:07:06,300  -->  00:07:10,790
using the extends keyword, or
inheriting from, to be more precise.
114

114

00:07:10,790  -->  00:07:15,560
What this allows us to do is to initialize
the Animal class, and if you recall,
115

115

00:07:15,560  -->  00:07:20,300
the dog is actually part of an animal
class, so we've defined an animal class.
116

116

00:07:20,300  -->  00:07:23,500
We're saying it's based on the animal
class, but what we can also do is,
117

117

00:07:23,500  -->  00:07:26,090
we can add more features
to this Dog class.
118

118

00:07:26,090  -->  00:07:28,390
Things that are unique to a dog and
119

119

00:07:28,390  -->  00:07:31,490
not just a very generic animal,
if that makes sense.
120

120

00:07:31,490  -->  00:07:32,950
That first line there, what that's done,
121

121

00:07:32,950  -->  00:07:37,810
it's initialized the base characteristics
of an animal, namely the name, the brain,
122

122

00:07:37,810  -->  00:07:40,400
the body, the size, and
the weight, in a constructor.
123

123

00:07:41,670  -->  00:07:45,690
What we can also do at this point, because
we're now working in the Dog class,
124

124

00:07:45,690  -->  00:07:49,430
is we can assign extra state,
extra fields, in other words, and
125

125

00:07:49,430  -->  00:07:52,620
extra behavior, that is,
methods that are unique for
126

126

00:07:52,620  -->  00:07:56,270
a dog and aren't necessarily
applicable for an animal.
127

127

00:07:56,270  -->  00:08:01,410
For example, we could create some fields,
private int eyes
128

128

00:08:02,870  -->  00:08:07,930
because remembering that not all animals
have eyes, but all dogs do have eyes.
129

129

00:08:07,930  -->  00:08:13,170
Private int legs, not all animals
have legs, but dogs do have legs.
130

130

00:08:13,170  -->  00:08:14,550
All dogs have legs.
131

131

00:08:14,550  -->  00:08:18,640
Private int tail, all dogs have a tail.
132

132

00:08:20,080  -->  00:08:22,620
Private int teeth, dogs have teeth.
133

133

00:08:24,020  -->  00:08:28,760
Maybe another one would be private String
coat, would be the type of coat, where
134

134

00:08:28,760  -->  00:08:33,740
they've got sort of a long silky coat or a
short coat and fur, those types of things.
135

135

00:08:33,740  -->  00:08:38,460
There are unique characteristics relating
to a dog that we're adding in addition to
136

136

00:08:38,460  -->  00:08:39,600
the animals there.
137

137

00:08:39,600  -->  00:08:44,260
You can see, really, what we're saying is,
the dog has got these fields here,
138

138

00:08:44,260  -->  00:08:48,450
these characteristics, but in addition,
they've also got these base
139

139

00:08:48,450  -->  00:08:53,190
characteristics, but we've defined those
in the base animal class because they
140

140

00:08:53,190  -->  00:08:57,740
aren't specific to a dog, and that's
why we're extending from that class.
141

141

00:08:57,740  -->  00:09:02,010
This is what Java and other object
oriented programming languages allow you
142

142

00:09:02,010  -->  00:09:06,540
to do, is to create a base class that's
got the basic information to work on, and
143

143

00:09:06,540  -->  00:09:10,450
then you can extend from that class,
which indeed is very powerful.
144

144

00:09:10,450  -->  00:09:15,420
Cuz what that also means is not
only with the fields, we can also
145

145

00:09:15,420  -->  00:09:19,730
add specific methods, like, for example,
going back to our animal class now,
146

146

00:09:19,730  -->  00:09:23,090
we could introduce some behaviors, and
we could add some methods for those.
147

147

00:09:23,090  -->  00:09:27,650
For example, all animals have to eat,
so we could create a method called eat,
148

148

00:09:29,030  -->  00:09:34,190
and we won't worry about the functionality
for now, but it's there anyway.
149

149

00:09:34,190  -->  00:09:35,210
Another one might be move.
150

150

00:09:37,770  -->  00:09:40,590
That's two methods that
are unique to all animals.
151

151

00:09:40,590  -->  00:09:45,280
All animals have some mechanism, some way,
to move, and all animals eat in some way,
152

152

00:09:45,280  -->  00:09:46,840
shape, or form.
153

153

00:09:46,840  -->  00:09:51,660
By doing that and making it public, if we
go back to the Dog class, what that means
154

154

00:09:51,660  -->  00:09:56,580
straight away is that function, that
method, is now available to the Dog class.
155

155

00:09:56,580  -->  00:09:57,600
The base class we've defined.
156

156

00:09:57,600  -->  00:10:00,870
We've said, all animals are able to eat
157

157

00:10:00,870  -->  00:10:05,700
because we specified that
method in the Animal class.
158

158

00:10:05,700  -->  00:10:08,930
This method is inherited
from Dog automatically, and
159

159

00:10:08,930  -->  00:10:12,910
we'll be able to use that, and
I'm gonna show how to do that shortly.
160

160

00:10:12,910  -->  00:10:15,650
Let's look now at this
constructor cuz there's two
161

161

00:10:15,650  -->  00:10:18,210
components that we need to do
now if you think about it.
162

162

00:10:18,210  -->  00:10:22,710
When we're creating a dog, and
we're modeling a dog in computer terms,
163

163

00:10:22,710  -->  00:10:26,570
we've got those parameters that have
been defined there, namely the name,
164

164

00:10:26,570  -->  00:10:29,790
whether it's got a brain,
the body, the size, and the weight.
165

165

00:10:29,790  -->  00:10:33,030
But we also need to initialize those
other characteristics as well,
166

166

00:10:33,030  -->  00:10:36,740
namely the eyes, legs,
tail, teeth, and coat.
167

167

00:10:36,740  -->  00:10:38,770
Really what we'd need to do is,
168

168

00:10:38,770  -->  00:10:41,910
we would need to initialize
that in our constructor, and
169

169

00:10:41,910  -->  00:10:47,580
not just the fields that we've defined
that initialize just the animal class.
170

170

00:10:47,580  -->  00:10:51,190
Cuz we're now in the Dog class,
we're creating a constructor for the dog.
171

171

00:10:51,190  -->  00:10:54,200
We need to work with
these extra parameters.
172

172

00:10:54,200  -->  00:10:59,190
One of the things we can do is,
we can be a little bit smart with our
173

173

00:10:59,190  -->  00:11:02,690
first definition here with
the parameters that need to be passed.
174

174

00:11:02,690  -->  00:11:06,830
For argument's sake, we're gonna say that
all dogs have got brains, so instead of
175

175

00:11:06,830  -->  00:11:09,950
having to use it as a parameter,
I'm gonna remove that parameter there.
176

176

00:11:12,080  -->  00:11:13,420
I'm just gonna put past the number one,
177

177

00:11:13,420  -->  00:11:18,290
which really is just our way of saying,
all dogs have got a brain.
178

178

00:11:18,290  -->  00:11:20,400
Likewise, for the body,
we're going to do the same thing.
179

179

00:11:20,400  -->  00:11:24,500
We're not going to put it there as
a parameter cuz we're gonna say,
180

180

00:11:24,500  -->  00:11:25,560
all dogs have got a body.
181

181

00:11:28,100  -->  00:11:28,820
You can see, we're not done.
182

182

00:11:28,820  -->  00:11:31,950
I've still initialized the animal class.
183

183

00:11:31,950  -->  00:11:35,870
It's still got the five parameters
it needs, but what we've said is,
184

184

00:11:35,870  -->  00:11:39,990
we know that all dogs have got a brain and
a body, so we're not going to force
185

185

00:11:39,990  -->  00:11:43,870
the programmer who's creating the Dog
class to have to define those.
186

186

00:11:43,870  -->  00:11:49,780
Well, what we will do is,,
we will add these as extra parameters,
187

187

00:11:49,780  -->  00:11:54,340
so we'll actually add a parameter for
the eyes, for
188

188

00:11:54,340  -->  00:11:59,140
the legs, for the tail, for
the teeth, and the coat.
189

189

00:12:02,210  -->  00:12:05,620
You can see we've used some of
those parameters already, and
190

190

00:12:05,620  -->  00:12:09,370
those parameters that are in
the Animal class have been sent on, and
191

191

00:12:09,370  -->  00:12:14,460
we've executed this constructor, and
those fields have been initialized.
192

192

00:12:14,460  -->  00:12:16,240
What we now need to do is
initialize the other ones.
193

193

00:12:16,240  -->  00:12:20,800
To do that, and you've seen this before,
194

194

00:12:20,800  -->  00:12:24,980
we'll just do a this.eyes = eyes;,
195

195

00:12:24,980  -->  00:12:30,050
this.legs = legs;, this.tail = tail;,
196

196

00:12:30,050  -->  00:12:35,780
this.teeth = teeth;,
and this.coat = coat;.
197

197

00:12:37,120  -->  00:12:41,810
Effectively now we've initialized all
of the fields relating to this dog.
198

198

00:12:42,950  -->  00:12:47,030
Of course, some of those fields were the
basic fields that were part of the Animal
199

199

00:12:47,030  -->  00:12:50,570
class, and the rest were part of
the Dog class because they were unique
200

200

00:12:50,570  -->  00:12:54,480
characteristics related to a dog and
not necessarily an animal, which may,
201

201

00:12:54,480  -->  00:12:57,990
as we've talked about before,
may not have some of these features.
202

202

00:12:57,990  -->  00:13:01,150
Okay, so
let's try starting some of this code now,
203

203

00:13:01,150  -->  00:13:05,610
start using some of this code, creating
a new class to see how this works.
204

204

00:13:05,610  -->  00:13:08,340
What you're going to do first is,
205

205

00:13:08,340  -->  00:13:12,770
we're going to create an animal,
basic animal class.
206

206

00:13:12,770  -->  00:13:15,170
As you've seen us create
new classes before,
207

207

00:13:15,170  -->  00:13:18,580
we're just going to create that
to confirm that it does work.
208

208

00:13:18,580  -->  00:13:22,980
We'll be creating a new animal class,
we've just got the one constructor, and
209

209

00:13:22,980  -->  00:13:26,630
you can see we need to do a name,
so we'll just call it Animal.
210

210

00:13:29,430  -->  00:13:29,990
Animal.
211

211

00:13:29,990  -->  00:13:32,320
Then we need a body, so we'll say.
212

212

00:13:32,320  -->  00:13:38,100
Then we need a brain, so put 1,1,.
213

213

00:13:38,100  -->  00:13:43,510
We need a size, so we'll just say as
the default five and weight five.
214

214

00:13:43,510  -->  00:13:44,320
You've seen that before.
215

215

00:13:44,320  -->  00:13:45,920
There's nothing particularly new there,
but
216

216

00:13:45,920  -->  00:13:47,990
that's just the definition for
base animal.
217

217

00:13:47,990  -->  00:13:50,790
It doesn't really make a lot of sense
because we want to be specific.
218

218

00:13:50,790  -->  00:13:54,670
We want to work, in this case,
with a dog, so to do that,
219

219

00:13:54,670  -->  00:13:59,130
to create a Dog class,
we're gonna type Dog, dog = new Dog, and
220

220

00:13:59,130  -->  00:14:03,210
remember the parameters will change,
and it'll be here.
221

221

00:14:03,210  -->  00:14:05,140
So, we might call this dog a Yorkie.
222

222

00:14:09,030  -->  00:14:14,550
We might say the size is 8,
the weight might be 20, 2 eyes,
223

223

00:14:14,550  -->  00:14:19,540
4 legs, 1 tail, 20 teeth for
argument's sake, and
224

224

00:14:19,540  -->  00:14:25,280
we might say it's a long silky,
would be the type of coat.
225

225

00:14:25,280  -->  00:14:27,500
That's now initializing a dog.
226

226

00:14:27,500  -->  00:14:28,480
Nothing particularly new there.
227

227

00:14:28,480  -->  00:14:30,170
You've seen that before, and
I'll just fix that typo.
228

228

00:14:33,430  -->  00:14:37,430
One of the things we can do, this is where
inheritance really starts making sense,
229

229

00:14:37,430  -->  00:14:39,890
is we can start using some of
these functions because, remember,
230

230

00:14:39,890  -->  00:14:44,840
we defined these two public functions,
eat and move.
231

231

00:14:44,840  -->  00:14:50,570
What we could do, we could type dog.,
232

232

00:14:50,570  -->  00:14:55,450
and notice the eats come up, so we're able
to use the method eat, even though if we
233

233

00:14:55,450  -->  00:14:59,530
look at our Dog class, you can see
there's no method definition for eat.
234

234

00:15:00,850  -->  00:15:01,880
Where's the eat defined?
235

235

00:15:01,880  -->  00:15:06,750
Well, remember the eat was defined
in this class, in the animal class,
236

236

00:15:06,750  -->  00:15:11,070
so this is one of the features of
inheriting from another class.
237

237

00:15:11,070  -->  00:15:14,970
Because we've defined
the method eat as public,
238

238

00:15:14,970  -->  00:15:18,880
we've said this method
is publicly accessible,
239

239

00:15:18,880  -->  00:15:23,340
the dog class can see that,
and it's extending animal.
240

240

00:15:23,340  -->  00:15:28,140
In other words, it's inheriting from the
animal class, and as a result, we're able
241

241

00:15:28,140  -->  00:15:33,050
to use the eat method, even though it's
not actually part of the Dog class.
242

242

00:15:33,050  -->  00:15:37,860
And just to confirm that,
we'll go to the animal class, and
243

243

00:15:37,860  -->  00:15:42,680
we'll let a System.out.print
animal.eat() called,
244

244

00:15:42,680  -->  00:15:47,120
just so we know that is where
it has actually come from and
245

245

00:15:47,120  -->  00:15:50,430
which part of the code is being executed.
246

246

00:15:50,430  -->  00:15:51,360
If we run that.
247

247

00:15:56,520  -->  00:16:00,000
You can see animal.eat() called,
so just by that process,
248

248

00:16:00,000  -->  00:16:04,210
even though we're accessing the Dog class,
it knows that the dog is a type of
249

249

00:16:04,210  -->  00:16:08,150
an animal because we've
inherited from the class animal.
250

250

00:16:08,150  -->  00:16:12,660
As a result of doing that, we're able to
access the functionality that's part and
251

251

00:16:12,660  -->  00:16:16,220
parcel of the animal class, and
we are able to use the eat method.
252

252

00:16:16,220  -->  00:16:20,460
But it does get better than that
because what we can also do,
253

253

00:16:20,460  -->  00:16:24,890
going back to the Dog class,
we can override this eat method.
254

254

00:16:24,890  -->  00:16:29,850
What we can say is, well, like a dog eats
in a particular fashion, for example,
255

255

00:16:29,850  -->  00:16:31,340
the dog chews its food.
256

256

00:16:31,340  -->  00:16:35,140
All animals don't necessarily chew food,
but the dog does chew its food, so
257

257

00:16:35,140  -->  00:16:40,640
what we might want to do here is,
we might want to create a private method
258

258

00:16:40,640  -->  00:16:43,840
called chew, and
this is something unique to a dog.
259

259

00:16:45,050  -->  00:16:50,760
We'll put something
like dog.chew() called,
260

260

00:16:50,760  -->  00:16:54,830
but then also what we can do is,
we can use a generate command again.
261

261

00:16:55,890  -->  00:16:58,440
I can come over here and
I can put in override methods.
262

262

00:16:59,580  -->  00:17:02,540
Now, what override does, and I'm gonna
select that, you can see straight away,
263

263

00:17:02,540  -->  00:17:06,880
it's given us a list of methods,
including the constructor,
264

264

00:17:06,880  -->  00:17:09,150
that are available in the Animal class.
265

265

00:17:09,150  -->  00:17:12,730
In other words, it says, okay, I know that
you're extending from the Animal class.
266

266

00:17:13,800  -->  00:17:16,520
These are the methods
that can be overridden.
267

267

00:17:16,520  -->  00:17:20,380
In other words, we can create
a version of that same method
268

268

00:17:20,380  -->  00:17:23,840
that exists in the Animal class,
but make it unique for
269

269

00:17:23,840  -->  00:17:27,970
the Dog class, and that's something
that is inherently very powerful.
270

270

00:17:27,970  -->  00:17:32,850
The other thing I want to point out here
is, you notice this java.lang.Object,
271

271

00:17:32,850  -->  00:17:36,850
I'm going to talk about that in
the next video, but what that is,
272

272

00:17:36,850  -->  00:17:40,460
is that every single class you create,
even though it doesn't come up and
273

273

00:17:40,460  -->  00:17:44,400
show you by the use of the extends
keyword, it does actually get extended.
274

274

00:17:44,400  -->  00:17:49,190
You are extending this object class, which
is a special class created by Java, but
275

275

00:17:49,190  -->  00:17:50,600
more on that in the next video.
276

276

00:17:50,600  -->  00:17:53,860
For now, let's override the eat method,
which is part of the Animal class.
277

277

00:17:53,860  -->  00:17:57,620
We're gonna create a special method for
the dog for eating, so
278

278

00:17:57,620  -->  00:17:58,320
we're gonna click on that.
279

279

00:18:00,450  -->  00:18:03,780
Java will come up automatically and
give you this @Override symbol, and
280

280

00:18:03,780  -->  00:18:08,640
that's to remind you that we're overriding
a method that is in the superclass.
281

281

00:18:08,640  -->  00:18:10,770
In this case, it's in the animal class.
282

282

00:18:10,770  -->  00:18:15,030
Now, both the Dog class has
got its own eat method, and
283

283

00:18:15,030  -->  00:18:18,550
also the Animal class
has got its eat method.
284

284

00:18:18,550  -->  00:18:19,980
What we can then do here is,
285

285

00:18:19,980  -->  00:18:23,480
we can just put something to
indicate that we're calling in here.
286

286

00:18:23,480  -->  00:18:28,250
We'll put Dog.eat() called,
and let's also put chew, and
287

287

00:18:28,250  -->  00:18:33,100
we'll say the process of a dog
eating food is that it's chewing,
288

288

00:18:33,100  -->  00:18:38,050
so we're gonna call our method that
is unique to the dog class, and
289

289

00:18:38,050  -->  00:18:40,720
then we're gonna use super.eat.
290

290

00:18:40,720  -->  00:18:45,340
What super means is call the super
equivalent of that class, a super., and
291

291

00:18:45,340  -->  00:18:46,940
the name of the function.
292

292

00:18:46,940  -->  00:18:50,540
Java will automatically come up here and
go, okay, the superclass for
293

293

00:18:50,540  -->  00:18:53,730
this current class is animal, so
it's gonna go back to here and
294

294

00:18:53,730  -->  00:18:56,370
look at the eat method and call that.
295

295

00:18:56,370  -->  00:18:57,860
Let's run that and see what happens.
296

296

00:19:02,040  -->  00:19:04,970
What's happened is the Dog.eat
method was called.
297

297

00:19:04,970  -->  00:19:09,030
If you recall previously, when we called
Dog.eat, it went automatically into
298

298

00:19:09,030  -->  00:19:14,010
the animal method, and it called this
method here in the Animal class because,
299

299

00:19:14,010  -->  00:19:17,300
of course, we did not have
an eat method in our Dog class.
300

300

00:19:17,300  -->  00:19:20,590
Now, we've added an eat
method to the dog class.
301

301

00:19:20,590  -->  00:19:23,170
Dog.eat method has been called first.
302

302

00:19:23,170  -->  00:19:27,520
We then use chew, which called the private
method chew in the Dog class, but
303

303

00:19:27,520  -->  00:19:31,130
then we use super.eat,
which called the animal.eat class.
304

304

00:19:31,130  -->  00:19:33,720
So, that's using inheritance.
305

305

00:19:33,720  -->  00:19:35,230
This video is getting quite long.
306

306

00:19:35,230  -->  00:19:37,600
Let's continue this in the next video.
