WEBVTT
1
1

00:00:04.820  -->  00:00:09.440
in this video we will continue looking
at querying the data in a sql lite
2

2

00:00:09.440  -->  00:00:14.500
database now we've seen a basic sql
queries using the Select statement in
3

3

00:00:14.500  -->  00:00:19.490
the previous video and it's time to look
at that in more detail now once we've
4

4

00:00:19.490  -->  00:00:22.760
used some more queries we're
going to look at how to store commonly
5

5

00:00:22.760  -->  00:00:27.740
used queries in what's called a view now the idea of views is common in most
6

6

00:00:27.740  -->  00:00:34.000
relational databases and also going to
introduce the sql join clause and show
7

7

00:00:34.000  -->  00:00:38.960
how that's used to link tables together
and that can result in quite complicated
8

8

00:00:38.960  -->  00:00:44.840
queries so we'll also use views as a way
to store a query so that we can reuse it
9

9

00:00:44.840  -->  00:00:49.940
to whatever we need to do our previous
contacts example only had a few records
10

10

00:00:49.940  -->  00:00:54.230
and using a database to store a handful
of row is probably overkill
11

11

00:00:54.770  -->  00:00:59.230
it's probably quickly to scan three rows
manual to find tim's phone number
12

12

00:00:59.230  -->  00:01:04.190
than it is to type in a query but once
you get a lot of rows though our database
13

13

00:01:04.190  -->  00:01:09.170
becomes really useful now to save typing
what I've done is I've created a database
14

14

00:01:09.170  -->  00:01:14.570
containing details of a music collection
so download the file music.zip from
15

15

00:01:14.570  -->  00:01:19.580
the resources section for this video and
you can see that I've downloaded that
16

16

00:01:19.580  -->  00:01:22.180
zip file onto my desktop
17

17

00:01:22.180  -->  00:01:25.900
once you've done that you want to
extract the database file which is music
18

18

00:01:25.900  -->  00:01:30.950
.DB and save it to a suitable location on
your computer's hard drive so I'm just
19

19

00:01:30.950  -->  00:01:34.220
going to double-click this which will
extract the file and you can see that
20

20

00:01:34.220  -->  00:01:38.290
i've got a file music.DB and
what I'm going to do is I'm going to
21

21

00:01:38.290  -->  00:01:42.710
change the directory to go to that folder which in this case is my desktop so
22

22

00:01:42.710  -->  00:01:48.920
that we can access that database so the
command for me is....
23

23

00:01:48.920  -->  00:01:55.820
....and you can do a similar thing
on linux to navigate to the folder and
24

24

00:01:55.820  -->  00:02:00.610
on Windows you can do a CD space and
just navigate to the folder typing in
25

25

00:02:00.610  -->  00:02:04.880
whatever the directory structures is and on
the windows you generally have to use
26

26

00:02:04.880  -->  00:02:09.610
backslashes instead of forward slashes
in any event moved to that folder on my case
27

27

00:02:09.610  -->  00:02:13.790
i can do now an LS and I can see that
I've got a couple of files in their
28

28

00:02:13.790  -->  00:02:15.850
music.db is the one I want
29

29

00:02:15.850  -->  00:02:20.980
and that command also work on linux and
windows you type dir to see the files
30

30

00:02:22.090  -->  00:02:27.130
alright so let's now go ahead and open
that file remember we've put the sql
31

31

00:02:27.130  -->  00:02:31.000
lite in the path so with a command
prompt or terminal session already
32

32

00:02:31.000  -->  00:02:34.480
opened as you can see I've got mine open
on the screen I've change into the
33

33

00:02:34.480  -->  00:02:43.690
directory and now going to type...now
34

34

00:02:43.690  -->  00:02:47.770
incidentally I've given the file a DB
extension but sql lite doesn't
35

35

00:02:47.770  -->  00:02:52.120
actually care how your name the database
file its usual to use something like .
36

36

00:02:52.120  -->  00:02:58.240
DB or . SQLite but it really doesn't
matter it is a good idea though to avoid
37

37

00:02:58.240  -->  00:03:03.610
using . SQL that's usually used to
indicate that the file contains as a
38

38

00:03:03.610  -->  00:03:09.130
sql script we will talk about sql scripts
a little later okay so we should now be
39

39

00:03:09.130  -->  00:03:12.250
running sql lite with the music
database loaded as I've got on the
40

40

00:03:12.250  -->  00:03:15.610
screen now so let's start by reviewing
the structure of the database
41

41

00:03:21.240  -->  00:03:25.560
so the mini challenge is to remember
what the appropriate sql lite command is
42

42

00:03:25.560  -->  00:03:29.910
to display the structure of the database
so type that in so you can actually see
43

43

00:03:29.910  -->  00:03:34.860
what the structure of this particular
databases so pause the video now and i
44

44

00:03:34.860  -->  00:03:36.840
will come back and I'll show you what it
is
45

45

00:03:36.840  -->  00:03:46.740
ok so the solution to the challenges is the
command to type is . schema....
46

46

00:03:46.740  -->  00:03:52.050
....and you can see that
gives us a list of all the tables and
47

47

00:03:52.050  -->  00:03:56.940
the sql source code that was used to
create them now you may have used the .
48

48

00:03:56.940  -->  00:04:01.020
dump as well that's a fine but there's
quite a lot of data in the table so you
49

49

00:04:01.020  -->  00:04:03.810
have to scroll up a long way to see the
structure of the tables if you did that
50

50

00:04:03.810  -->  00:04:08.490
so generally speaking . schema is a
better command to use here when we just
51

51

00:04:08.490  -->  00:04:12.660
interested in the tables rather than
their contents so I won't use the .dump
52

52

00:04:12.660  -->  00:04:16.020
but you could do that if you want to
now incidentally you're not too
53

53

00:04:16.020  -->  00:04:19.890
familiar with command lines you can
repeat previous commands using the up
54

54

00:04:19.890  -->  00:04:24.230
and down arrow keys to recall them but
with that said it doesn't always work it
55

55

00:04:24.230  -->  00:04:28.100
depends on your version because with a
mac I can't actually use an up arrow
56

56

00:04:28.100  -->  00:04:32.670
here but I can use it when i'm outside
of sql lite but sql lite for some
57

57

00:04:32.670  -->  00:04:36.540
reason is mapping my arrow keys and not
allowing me to actually use a previous
58

58

00:04:36.540  -->  00:04:38.850
command but if your on
59

59

00:04:38.850  -->  00:04:42.270
linux that will certainly work or will
certainly work on the arrow keys and
60

60

00:04:42.270  -->  00:04:47.310
it's also work on windows as well
basically how you normally do just press
61

61

00:04:47.310  -->  00:04:50.220
the up and down arrow keys to get to the
command you want
62

62

00:04:50.220  -->  00:04:52.980
and you can even use the left and right arrow keys to move around on the line if you
63

63

00:04:52.980  -->  00:04:58.100
need to to edit the command before
pressing enter again to executed now the
64

64

00:04:58.100  -->  00:05:01.560
left and right arrow keys may not work
if you're using ssh to connect on a
65

65

00:05:01.560  -->  00:05:04.380
remote computer if you're doing that
then you probably already know how to
66

66

00:05:04.380  -->  00:05:08.670
move around the terminal so i'll have to be
typing in the commands but just
67

67

00:05:08.670  -->  00:05:12.510
bear in mind that you can probably use
the up and down arrow keys to navigate
68

68

00:05:12.510  -->  00:05:15.480
to a command to save you having to typing it
multiple times
69

69

00:05:15.480  -->  00:05:19.200
alright so looking at the schema
command of the output on the screen
70

70

00:05:19.200  -->  00:05:24.810
there we can see that the database
contains three tables songs albums and
71

71

00:05:24.810  -->  00:05:29.430
artists now each table actually contains
an ID column which you can see there's
72

72

00:05:29.430  -->  00:05:34.860
the first field and have called that
_ID you don't have
73

73

00:05:34.860  -->  00:05:39.120
to call it that but some of the java
classes than users to handle
74

74

00:05:39.120  -->  00:05:41.800
databases actually require an ID column
called and _ID so it's probably
75

75

00:05:41.800  -->  00:05:47.290
a good habit to get into to actually do
that but in fact that's the database is
76

76

00:05:47.290  -->  00:05:51.850
at the moment the _ID column
is just an integer field and we do have
77

77

00:05:51.850  -->  00:05:54.910
to update it manually but i'll be
changing that a little bit later in the
78

78

00:05:54.910  -->  00:05:59.380
course for now _ID
holds a number that uniquely identifies
79

79

00:05:59.380  -->  00:06:05.650
the rows in the table so we can actually
check this out by typing.....
80

80

00:06:05.650  -->  00:06:13.690
....and you can see we got quite a few their we
81

81

00:06:13.690  -->  00:06:17.980
ended up with the total of 201 artists and
you can see the number on the left there
82

82

00:06:17.980  -->  00:06:23.560
to the left of the artist name is
uniquely identifying each one and the
83

83

00:06:23.560  -->  00:06:30.940
same is true we do a search for albums...you can see we've
84

84

00:06:30.940  -->  00:06:37.090
got a total 439 albums there and again
the id is unique for each album now
85

85

00:06:37.090  -->  00:06:42.190
the third column in the album's table is
the ID of the artists so that we can see
86

86

00:06:42.190  -->  00:06:48.610
that the last album that was created was
created by a artist 133 now if you read the
87

87

00:06:48.610  -->  00:06:51.970
screen very quickly when all the artists
scroll past you may remember that this
88

88

00:06:51.970  -->  00:06:56.170
was the black keys but we can actually
check that to confirm that by typing
89

89

00:06:56.170  -->  00:07:07.720
select.....and
90

90

00:07:07.720  -->  00:07:12.700
you can see that the variety 133 from
the artist table the name is black keys
91

91

00:07:12.700  -->  00:07:20.230
and finally the song so.....
92

92

00:07:20.230  -->  00:07:27.610
.....and you can see there's quite
a few songs here over 5,000 in fact once
93

93

00:07:27.610  -->  00:07:31.750
again each song has got a unique ID the
second number is the position of the
94

94

00:07:31.750  -->  00:07:36.580
song in its album and the final number
is the id of the album so permanent
95

95

00:07:36.580  -->  00:07:41.650
vacation which you can see the second to
last one there is the tenth track in
96

96

00:07:41.650  -->  00:07:44.650
album 367
97

97

00:07:46.260  -->  00:07:49.220
another mini challenge
98

98

00:07:49.220  -->  00:07:49.260
find the title of album 367 so type in
the sql command necessary to return
another mini challenge
99

99

00:07:49.260  -->  00:07:55.570
find the title of album 367 so type in
the sql command necessary to return
100

100

00:07:55.570  -->  00:08:00.440
that title of album 367 pause the
video now and figure that out and when
101

101

00:08:00.440  -->  00:08:04.310
you're ready to see me type in the
solution start the video pause the video
102

102

00:08:04.310  -->  00:08:07.310
now
103

103

00:08:08.540  -->  00:08:13.760
alright so how do we actually find the
title for album 367 we type select
104

104

00:08:13.760  -->  00:08:24.530
....
105

105

00:08:24.530  -->  00:08:30.010
....and we can see permanent vacation
so the album in other words is also
106

106

00:08:30.010  -->  00:08:36.230
called permanent vacation now we could
also use select star as theirs is only three
107

107

00:08:36.230  -->  00:08:42.430
columns in the album's table that's fine
as well so....
108

108

00:08:42.430  -->  00:08:49.670
....and that would
have given the same result and obviously
109

109

00:08:49.670  -->  00:08:51.830
it's returning the other two fields as
well
110

110

00:08:51.830  -->  00:08:56.660
now one thing I forgot to do was turn
headers on and it's not a big deal but
111

111

00:08:56.660  -->  00:09:00.800
it's helpful to see what the columns are
called so let's do that now . headers
112

112

00:09:00.800  -->  00:09:06.250
...see I can't use my up arrow
113

113

00:09:06.250  -->  00:09:09.370
normally I'd be able to press the up arrow
and get .headers to come back on the
114

114

00:09:09.370  -->  00:09:11.540
screen again then just type in the rest
115

115

00:09:11.540  -->  00:09:16.810
it's not letting me for some reason so
headers....and now if I did command
116

116

00:09:16.810  -->  00:09:26.420
again so.....you can see we've got the
117

117

00:09:26.420  -->  00:09:31.640
field names at the top as well as the actual
answer so the ID field can be used to
118

118

00:09:31.640  -->  00:09:36.830
relate the songs and albums tables so we
can easily see which album the song
119

119

00:09:36.830  -->  00:09:42.290
belongs to now having to perform two
queries to do that is a bit tedious but
120

120

00:09:42.290  -->  00:09:45.250
I want to look a bit more at the
structure of the tables and do some more
121

121

00:09:45.250  -->  00:09:50.120
queering before we talk about how we can
join the tables together before moving
122

122

00:09:50.120  -->  00:09:53.480
on now I'm going to back up the database
in case i do something silly with my
123

123

00:09:53.480  -->  00:09:59.500
updates or deletes we're going to type
in....
124

124

00:10:00.070  -->  00:10:05.530
.....and you can see on my
desktop the file music-back up 1
125

125

00:10:05.530  -->  00:10:09.010
appeared and because it's on my desktop
you can see the file that gets created
126

126

00:10:09.010  -->  00:10:12.010
their so we can see that the file was
successfully backed up
127

127

00:10:12.790  -->  00:10:15.850
alright so let's have a look at the
table structures again because there's a
128

128

00:10:15.850  -->  00:10:19.420
couple of things in there that i didn't
mention in the previous video and type
129

129

00:10:19.420  -->  00:10:27.220
in . schema now the first thing is that
the ID column is set to be the primary
130

130

00:10:27.220  -->  00:10:33.340
key now a key in a table is an index
which provides a way to really speed up
131

131

00:10:33.340  -->  00:10:39.070
searches and joins on a column now when
columns are indexed they can be searched
132

132

00:10:39.070  -->  00:10:43.120
much faster than if they are not
basically index columns are sorted so
133

133

00:10:43.120  -->  00:10:46.930
that they can be searched through much
faster now one thing I should mention
134

134

00:10:46.930  -->  00:10:53.410
about relational databases is that the
ordering of the rows is undefined so in
135

135

00:10:53.410  -->  00:10:58.570
that respect they're very similar to java
maps or to set in fact relational
136

136

00:10:58.570  -->  00:11:03.730
database theory is heavily based on set
theory so by defining a key
137

137

00:11:04.300  -->  00:11:07.300
what you're doing is you're saying that
the data should be ordered on that
138

138

00:11:07.300  -->  00:11:12.400
column or group of columns and searches
etc work far more efficiently as a
139

139

00:11:12.400  -->  00:11:18.280
result of doing that now they can be
lots of keys on a table but there can
140

140

00:11:18.280  -->  00:11:23.230
only be one primary key now usually this
is the ID column but if you don't have
141

141

00:11:23.230  -->  00:11:27.010
an ID column in your table then you can
choose another column to be the primary
142

142

00:11:27.010  -->  00:11:31.150
key if you want now one important thing
about the primary key though is that it
143

143

00:11:31.150  -->  00:11:32.560
must be unique
144

144

00:11:32.560  -->  00:11:39.460
let's try to add another artist using an
insert statement......
145

145

00:11:39.460  -->  00:11:48.430
....
146

146

00:11:48.430  -->  00:11:53.230
....and when we do that we should
147

147

00:11:53.230  -->  00:11:57.310
get an error you can see we've got an
error their unique constraint failed
148

148

00:11:57.310  -->  00:12:02.470
artists . _ID now personally
I'm not actually too unhappy that i
149

149

00:12:02.470  -->  00:12:06.760
could not add beoncy to my record
collection but it failed because there's
150

150

00:12:06.760  -->  00:12:12.640
already a record with a value 201 for its
primary key so we get an error we try to
151

151

00:12:12.640  -->  00:12:13.580
use that id
152

152

00:12:13.580  -->  00:12:18.530
again now keys don't have to be unique
and often you want to index a column
153

153

00:12:18.530  -->  00:12:21.950
that doesn't have a unique value it
doesn't have unique values a surname
154

154

00:12:21.950  -->  00:12:26.050
column in our context database for
example would benefit from being indexed
155

155

00:12:26.050  -->  00:12:29.170
but many people can have the same
surname
156

156

00:12:29.170  -->  00:12:34.040
so you can have keys that aren't unique
but the primary key must be unique
157

157

00:12:34.040  -->  00:12:41.290
so type in schema again now the other
thing to mention is the not null for the
158

158

00:12:41.290  -->  00:12:46.040
text fields the name column of the
artists and album tables is marked as
159

159

00:12:46.040  -->  00:12:51.730
not null and the title column of songs
is also not null and that means that the
160

160

00:12:51.730  -->  00:12:55.750
columns must contain a value if you try
to leave them blank when inserting new
161

161

00:12:55.750  -->  00:12:59.960
record you'll actually get an error and
if you think about it in this case it
162

162

00:12:59.960  -->  00:13:03.710
really doesn't make much sense to store
an artist without a name in the same for
163

163

00:13:03.710  -->  00:13:08.920
an album so creating those columns as not null
ensures that all albums and artists have
164

164

00:13:08.920  -->  00:13:14.800
got a name and the same goes for song
titles now sometimes a null value does
165

165

00:13:14.800  -->  00:13:20.360
make sense a middle name column in a
contacts table may you know well often be
166

166

00:13:20.360  -->  00:13:25.420
null so it's fine in that situation to
allow nulls but when designing a tables
167

167

00:13:25.420  -->  00:13:29.620
have a think about the data and if it
wouldn't make sense to have a null value
168

168

00:13:29.620  -->  00:13:35.540
then use not null when creating the
column now the primary key column in our
169

169

00:13:35.540  -->  00:13:40.930
tables is automatically not null because
integer primary key columns in sql
170

170

00:13:40.930  -->  00:13:45.470
lite are treated in a special way and
we can see that by having another go at
171

171

00:13:45.470  -->  00:13:51.950
inserting Beyonce into the table so we
come back and type insert into artist's
172

172

00:13:51.950  -->  00:14:00.710
.....and this time
we just type....
173

173

00:14:00.710  -->  00:14:06.830
.....so this time we're
174

174

00:14:06.830  -->  00:14:12.370
not providing an ID as a result we must
explicitly specify the name column so
175

175

00:14:12.370  -->  00:14:17.110
that's sql lite knows which column we
want to have the value Beyonce so now i
176

176

00:14:17.110  -->  00:14:25.610
do a select...so now beyonce is appeared at the table
177

177

00:14:25.610  -->  00:14:26.800
right at the bottom
178

178

00:14:26.800  -->  00:14:32.170
and note how it's how she has been
automatically given the ID 202 an
179

179

00:14:32.170  -->  00:14:37.120
integer primary key column can't contain
null values and sql lite automatically
180

180

00:14:37.120  -->  00:14:42.340
generates a unique number for the column
if one isn't provided now this is
181

181

00:14:42.340  -->  00:14:46.330
slightly different from the behavior of
other databases other sql databases
182

182

00:14:46.330  -->  00:14:51.370
such as Microsoft sql server where you
have to specify autoincrement when
183

183

00:14:51.370  -->  00:14:55.660
creating the column if you want the
values to be automatically generated now
184

184

00:14:55.660  -->  00:14:59.080
there's a description of this behavior
and why you would normally use auto
185

185

00:14:59.080  -->  00:15:03.250
increment in sql lite databases in
the documentation so quickly take
186

186

00:15:03.250  -->  00:15:08.080
you to that page particularly we've got
some experience in other databases that
187

187

00:15:08.080  -->  00:15:13.720
will be good to know this if you're
going to be working with databases a lot
188

188

00:15:13.720  -->  00:15:17.410
it's worth reading that but really all
we need to know is that a sql lite
189

189

00:15:17.410  -->  00:15:20.920
will create the ids for us and we
don't have to worry about making sure
190

190

00:15:20.920  -->  00:15:24.520
that we don't reuse an integer ID in a
primary key field
191

191

00:15:25.390  -->  00:15:29.110
alright so that's all I'm going to say
about keys in this course database
192

192

00:15:29.110  -->  00:15:33.130
administration is a very complex topic
in its own right and the aim of this
193

193

00:15:33.130  -->  00:15:36.700
section is to give you the basics so
that's you can use databases to
194

194

00:15:36.700  -->  00:15:41.140
store your programs data if you are
going to be doing a lot of work with
195

195

00:15:41.140  -->  00:15:44.650
databases and you'll probably need to
know about keys and how they affect
196

196

00:15:44.650  -->  00:15:49.390
performance both positively and
negatively and stuff like that but we
197

197

00:15:49.390  -->  00:15:52.870
don't really need anymore for what
we're doing here so i'm going to end the
198

198

00:15:52.870  -->  00:15:57.580
video here now in the next video will
continue on with sql lite and we'll
199

199

00:15:57.580  -->  00:16:01.210
start looking at the order by Clause
i'll see you in the next video
