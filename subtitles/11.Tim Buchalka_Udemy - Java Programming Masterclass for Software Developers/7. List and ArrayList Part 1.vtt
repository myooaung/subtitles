WEBVTT
1
1

00:00:05.370  -->  00:00:05.910
In this video,
2

2

00:00:05.910  -->  00:00:09.620
we're gonna start talking about
the concept of lists and array lists.
3

3

00:00:09.620  -->  00:00:11.680
But before I do that,
I just wanna go through and
4

4

00:00:11.680  -->  00:00:15.700
show you something else relating to the
arrays that we've talked about previously.
5

5

00:00:15.700  -->  00:00:18.800
If you recall, we've gone through
the process of creating arrays,
6

6

00:00:18.800  -->  00:00:23.320
defining what they are, accessing elements
with in a array and so on and so forth.
7

7

00:00:23.320  -->  00:00:27.090
But I also did was showed you how
to copy the contents of one array
8

8

00:00:27.090  -->  00:00:29.370
to another array using
a couple of different methods.
9

9

00:00:29.370  -->  00:00:32.040
One thing we haven't talked about yet
is resizing an array.
10

10

00:00:32.040  -->  00:00:36.930
And that's the scenario just say that
you've actually got an array defined, and
11

11

00:00:36.930  -->  00:00:41.130
it's got ten elements and you decide that
you wanna change it to say I have twelve
12

12

00:00:41.130  -->  00:00:45.480
elements and you wanna preserve the data
that's actually in the existing array.
13

13

00:00:45.480  -->  00:00:49.210
Now obviously it's very easy
to create a new array for
14

14

00:00:49.210  -->  00:00:53.540
the existing array or
just doing the int command in this case.
15

15

00:00:53.540  -->  00:00:56.380
So you can see on the screen
demo code that I've got and
16

16

00:00:56.380  -->  00:00:59.650
you can just create a new array but
that wouldn't preserve the data so,
17

17

00:00:59.650  -->  00:01:03.200
what I've done is I've just created
a simple simple program which I'm gonna
18

18

00:01:03.200  -->  00:01:07.300
walk you through now, and this source
code is available for download as well.
19

19

00:01:07.300  -->  00:01:11.010
And just wanna show you the concept of
actually changing an array while it's
20

20

00:01:11.010  -->  00:01:14.750
preserving the data in the situation where
you wanna change the size of that array.
21

21

00:01:14.750  -->  00:01:18.280
Let's going through the code, we've got
the scanner field there and that's for
22

22

00:01:18.280  -->  00:01:21.910
accepting console input, we've got
our base data which is an array so
23

23

00:01:21.910  -->  00:01:23.620
you can see there are ten elements and
24

24

00:01:23.620  -->  00:01:27.450
you'll come back to the main method and
we'll just talk about the methods.
25

25

00:01:27.450  -->  00:01:31.830
We've got a get input and its purpose
is to get the data from the console and
26

26

00:01:31.830  -->  00:01:33.210
save it into the array.
27

27

00:01:33.210  -->  00:01:36.790
Now note that I'm actually using basedata,
28

28

00:01:36.790  -->  00:01:39.700
which is the variable we've
defined in the class.
29

29

00:01:39.700  -->  00:01:42.260
So it's actually updating that directly,
and that method.
30

30

00:01:42.260  -->  00:01:45.220
And also, there's a print array,
which you've seen before.
31

31

00:01:45.220  -->  00:01:48.930
Its purpose is just to print
out the array contents.
32

32

00:01:48.930  -->  00:01:52.010
There's also a resize array,
this is the interesting one,
33

33

00:01:52.010  -->  00:01:54.830
where it actually takes
a copy of the original array,
34

34

00:01:54.830  -->  00:01:58.840
the base data at that point and time,
which again is our array from up here.
35

35

00:01:58.840  -->  00:02:03.600
Then creates a new array that changes the
size, in this case it's going to twelve
36

36

00:02:03.600  -->  00:02:06.900
elements, and of course, at the top here,
originally it was ten elements.
37

37

00:02:06.900  -->  00:02:10.050
And then, what it does,
it goes through a loop and
38

38

00:02:10.050  -->  00:02:13.280
gets each element from the original
array that we took a copy of.
39

39

00:02:13.280  -->  00:02:18.020
And then stores it back into the new array
or the array that we've created again,
40

40

00:02:18.020  -->  00:02:19.610
in this case a new integer array.
41

41

00:02:19.610  -->  00:02:23.720
So that's really how you go about resizing
an array that you save the original.
42

42

00:02:23.720  -->  00:02:26.790
A base way of doing it
is you save the original
43

43

00:02:26.790  -->  00:02:30.070
array first into another variable which
you can see there called original.
44

44

00:02:30.070  -->  00:02:33.360
You then initialize the variable
with a new integer, or a new array,
45

45

00:02:33.360  -->  00:02:36.350
I should say in this case,
of integer with 12 elements.
46

46

00:02:36.350  -->  00:02:39.640
And then you go through a loop and
actually copy the original values,
47

47

00:02:39.640  -->  00:02:41.580
in this case from the array,
into the new array.
48

48

00:02:41.580  -->  00:02:42.740
So let's just run that.
49

49

00:02:42.740  -->  00:02:44.830
So we can just get a sense
of what this is doing.
50

50

00:02:49.060  -->  00:02:51.700
Okay, and let's pull it over a little bit,
so we can see what we're doing here.
51

51

00:02:51.700  -->  00:02:53.240
So we know into ten integers.
52

52

00:02:57.670  -->  00:02:58.550
Ten.
53

53

00:02:58.550  -->  00:03:04.010
And you can see it's just repeated the ten
numbers there, 3 4 5 6 6 1 2 3 4 90.
54

54

00:03:04.010  -->  00:03:05.880
And then if we enter 12 integers.
55

55

00:03:11.710  -->  00:03:16.330
And we've now got the 12 array elements
stored overriding the previous values.
56

56

00:03:16.330  -->  00:03:20.420
So the important part to note was that
these lines here to store firstly,
57

57

00:03:20.420  -->  00:03:23.370
store the original array and
then create a new one and
58

58

00:03:23.370  -->  00:03:26.670
then we copy the original
elements into the old one again.
59

59

00:03:26.670  -->  00:03:29.730
And of course what I did was then I
accepted input the second time and
60

60

00:03:29.730  -->  00:03:33.290
over wrote the values so, what I could
have done is actually changed it just to
61

61

00:03:33.290  -->  00:03:35.370
make sure it that it was working.
62

62

00:03:35.370  -->  00:03:36.850
Could've done this.
63

63

00:03:36.850  -->  00:03:42.180
Not done input the second time when we
could instead have done phase data,
64

64

00:03:42.180  -->  00:03:45.880
ten equals 67 and
base data, 11 equals 34 and
65

65

00:03:45.880  -->  00:03:49.140
done that will save those
tertiary limits and
66

66

00:03:49.140  -->  00:03:54.920
if you run that again you'll get a bit
of representation of what's happening.
67

67

00:04:00.290  -->  00:04:04.160
So you can see now we've got the original
array which was ten elements, then a new
68

68

00:04:04.160  -->  00:04:08.050
array which has now got an extra two
elements which we're actually saving here.
69

69

00:04:08.050  -->  00:04:13.200
We're saving the value 67 into the tenth
element and another in the 11th element,
70

70

00:04:13.200  -->  00:04:16.360
effective at the twelfth element because
of course it can't start subzero,
71

71

00:04:16.360  -->  00:04:18.220
number 34 we're saving in there.
72

72

00:04:18.220  -->  00:04:21.460
So that's one concept of
actually resizing an array.
73

73

00:04:21.460  -->  00:04:27.000
So you could see that would get quite
unwieldy if you have to continually
74

74

00:04:27.000  -->  00:04:31.300
resize that array, it would be quite
tedious to implement all the time you'd
75

75

00:04:31.300  -->  00:04:35.220
be continually having to copy all those
elements so, it wouldn't be in the case
76

76

00:04:35.220  -->  00:04:38.620
where you've got lots of elements,
it wouldn't be very productive to do that.
77

77

00:04:38.620  -->  00:04:40.970
So there has to be a better way
of actually accessing arrays.
78

78

00:04:40.970  -->  00:04:43.370
This is the point that I
was trying to bring up and
79

79

00:04:43.370  -->  00:04:45.370
Java has got your back
when it comes to that.
80

80

00:04:45.370  -->  00:04:49.580
And I'm gonna talk to you now about the
concept of a list and also an array list.
81

81

00:04:49.580  -->  00:04:53.990
So it's just a general thing, a list but
intuitively we all know a list is.
82

82

00:04:53.990  -->  00:04:57.820
In our everyday lives, we're using lists
all the time, we're going to the grocery
83

83

00:04:57.820  -->  00:05:00.050
store, you've got a list,
a list of things you need to do,
84

84

00:05:00.050  -->  00:05:02.800
a list of addresses,
a list of contact numbers, etcetera.
85

85

00:05:02.800  -->  00:05:05.750
So, basically the same applies
in computer applications.
86

86

00:05:05.750  -->  00:05:09.770
You can create lists which another way of
looking at an array effectively because
87

87

00:05:09.770  -->  00:05:14.230
you can arguably say that an array is a
list in that, it's a sequence of numbers.
88

88

00:05:14.230  -->  00:05:16.910
So what I wanna do is
just copy something and
89

89

00:05:16.910  -->  00:05:22.000
paste it into a browser just to show
you some output from Oracle's website.
90

90

00:05:22.000  -->  00:05:24.930
What we're gonna be talking about
first is the concept of a list.
91

91

00:05:24.930  -->  00:05:29.070
Now you can see here the list in
terms of what Java was talking about,
92

92

00:05:29.070  -->  00:05:33.150
it's an ordered collection, also known as
a sequence and the user of this interface
93

93

00:05:33.150  -->  00:05:36.100
and a list is an interface and I know
we haven't talked about interfaces yet
94

94

00:05:36.100  -->  00:05:39.540
but, we'll go ahead in future videos and
talk about that.
95

95

00:05:39.540  -->  00:05:42.200
But really the concept I wanna
talk about is just what a list is.
96

96

00:05:42.200  -->  00:05:44.530
And then we're gonna talk
about the array list,
97

97

00:05:44.530  -->  00:05:47.660
because the array list in this
case inherits from the list.
98

98

00:05:47.660  -->  00:05:51.620
So you don't really need to know a lot
about this other than the fact that in
99

99

00:05:51.620  -->  00:05:54.690
Java, the list interface is pretty much
like the list we've mentioned earlier.
100

100

00:05:54.690  -->  00:05:59.010
It's very much like arrays if you will,
in that it's an old collection and
101

101

00:05:59.010  -->  00:06:01.970
allows you to have items in
a respective positions in
102

102

00:06:01.970  -->  00:06:05.320
other words the sequence numbers
are very much like we've
103

103

00:06:05.320  -->  00:06:09.530
used before in our code when we specify
the number to access a particular element.
104

104

00:06:09.530  -->  00:06:13.540
So, the list interface extends
the collection interface in collection and
105

105

00:06:13.540  -->  00:06:14.530
let me click in there and have a look.
106

106

00:06:15.660  -->  00:06:17.320
You can see we've got all this concept and
107

107

00:06:17.320  -->  00:06:19.750
you don't really need to
understand a lot of this now.
108

108

00:06:19.750  -->  00:06:24.360
The point I'm trying to make here is that
all this code has been built into Java
109

109

00:06:24.360  -->  00:06:28.670
to handle the facility or the way for you
to get access to this list functionality.
110

110

00:06:28.670  -->  00:06:31.650
You see you can access a lot of
this functionality to process and
111

111

00:06:31.650  -->  00:06:34.160
manipulate lists which we're
gonna go through the code and
112

112

00:06:34.160  -->  00:06:36.920
shortly to do and that's built into Java.
113

113

00:06:36.920  -->  00:06:40.800
So, for now don't worry too much about
interfaces and lists and collections.
114

114

00:06:40.800  -->  00:06:44.210
The thing that we wanna do is we
wanna talk about array list, so
115

115

00:06:44.210  -->  00:06:45.890
that's what we're gonna start from now.
116

116

00:06:45.890  -->  00:06:48.100
And the array list is something
you'll actually use in your code.
117

117

00:06:48.100  -->  00:06:52.350
This is the, as I mentioned,
array list inherits from a list or
118

118

00:06:52.350  -->  00:06:55.170
actually inherit,
to be precise from an abstract list.
119

119

00:06:55.170  -->  00:06:57.250
If you actually click on abstract lists,
120

120

00:06:57.250  -->  00:06:59.810
you can see it actually
uses a list interface.
121

121

00:06:59.810  -->  00:07:02.520
So again if this sounds like mumbo jumbo,
don't worry too much.
122

122

00:07:02.520  -->  00:07:05.640
We're gonna get into define
it makes a lot more sense,
123

123

00:07:05.640  -->  00:07:08.640
but the concept we're gonna be
talking about is ArrayList.
124

124

00:07:08.640  -->  00:07:11.340
So what the ArrayList is,
it's a resizable-array.
125

125

00:07:11.340  -->  00:07:14.300
So, in other words,
it handles the resizing automatically.
126

126

00:07:14.300  -->  00:07:15.500
This is the cool part.
127

127

00:07:15.500  -->  00:07:18.500
You won't have to be writing code that
you just seen me write on the screen
128

128

00:07:18.500  -->  00:07:19.840
to do that manipulation.
129

129

00:07:19.840  -->  00:07:25.480
It handles it all internally, not only
maintains a size of how many elements but
130

130

00:07:25.480  -->  00:07:28.060
also the capacity,
the amount of memory that is reserved.
131

131

00:07:28.060  -->  00:07:32.460
And as elements are added to an array
list, its capacity grows automatically.
132

132

00:07:32.460  -->  00:07:35.320
So in other words you don't need to
worry about any of that resizing.
133

133

00:07:35.320  -->  00:07:37.650
You don't need to really
worry about any of that code.
134

134

00:07:37.650  -->  00:07:41.800
It all actually happens automatically and
that's a cool thing about array lists.
135

135

00:07:41.800  -->  00:07:45.850
And what I'm gonna do now is create some
code and walk you through a demonstration,
136

136

00:07:45.850  -->  00:07:49.890
actually for
an application that creates a for us.
137

137

00:07:49.890  -->  00:07:51.750
So it's gonna be using the array list and
138

138

00:07:51.750  -->  00:07:54.540
then we are going to add some methods
to be able to add items to the list,
139

139

00:07:54.540  -->  00:07:56.910
to modify an item on the list and
to remove items from it.
140

140

00:07:56.910  -->  00:07:58.820
Let's go back to our code.
141

141

00:07:58.820  -->  00:08:01.730
What I'm going to do now,
I'm going to just remove this code,
142

142

00:08:01.730  -->  00:08:03.640
just going to clean it up a little bit.
143

143

00:08:03.640  -->  00:08:06.510
And again if you wanted to run that disk
program you could actually go ahead and
144

144

00:08:06.510  -->  00:08:10.150
download that, but
I'm just going to clean it all up,
145

145

00:08:10.150  -->  00:08:13.990
cuz were going to use that for
something else in a minute.
146

146

00:08:13.990  -->  00:08:17.870
So, what i'm gonna do first is create
a new class and called it a grocery list.
147

147

00:08:19.530  -->  00:08:21.780
So, a new class we're gonna
call it grocery list.
148

148

00:08:21.780  -->  00:08:26.280
And what we're going to do
is we're going to create
149

149

00:08:26.280  -->  00:08:29.330
a private variable in here for
our array list.
150

150

00:08:29.330  -->  00:08:32.670
So, to access our array list we talked,
it's very similar in text.
151

151

00:08:32.670  -->  00:08:35.370
We need to define the type and
then the variable name.
152

152

00:08:35.370  -->  00:08:38.070
So I'm gonna call it, it's an array list.
153

153

00:08:38.070  -->  00:08:41.830
You can see top array list, making
sure you get capitalization correct.
154

154

00:08:41.830  -->  00:08:45.350
Now you notice when we do this it's
got this little E, the less than sign,
155

155

00:08:45.350  -->  00:08:46.690
and the rather than sign there.
156

156

00:08:46.690  -->  00:08:48.830
What that means is with an array list,
157

157

00:08:48.830  -->  00:08:51.220
it's a little bit different in
that we're not defining the type.
158

158

00:08:51.220  -->  00:08:54.770
If you recall with an array, when we type
an array, I'm just going back and do that.
159

159

00:08:54.770  -->  00:08:58.320
We type something like private int,
my numbers.
160

160

00:09:00.110  -->  00:09:02.940
And so we actually define
the top at this point here.
161

161

00:09:02.940  -->  00:09:03.930
And so therefore,
162

162

00:09:03.930  -->  00:09:08.000
Java actually knew that it was actually
an array in this case of integers.
163

163

00:09:08.000  -->  00:09:12.130
But this is different to an array list,
because an ArrayLists can hold objects so,
164

164

00:09:12.130  -->  00:09:15.910
we need to actually tell it now what type
of data is going into the ArrayList.
165

165

00:09:15.910  -->  00:09:18.370
So the way we do that is,
we don't create a different type,
166

166

00:09:18.370  -->  00:09:22.390
we don't call it, there's not a concept,
for example of string ArrayLists.
167

167

00:09:23.650  -->  00:09:24.830
That's not how we do it.
168

168

00:09:24.830  -->  00:09:28.690
What we do it, was actually define that
we say we're gonna be using an array list
169

169

00:09:28.690  -->  00:09:30.300
then we actually put a less than sign and
170

170

00:09:30.300  -->  00:09:33.390
we type in the type of object we
want to be saved in the array list.
171

171

00:09:33.390  -->  00:09:36.400
In this case we're gonna use a string and
a greater than sign.
172

172

00:09:36.400  -->  00:09:40.230
So what that tells Java is okay,
you're creating an array list and
173

173

00:09:40.230  -->  00:09:44.130
the elements that are in the array list in
this case are going to be of type string.
174

174

00:09:44.130  -->  00:09:45.700
So I'm just gonna accept that import.
175

175

00:09:45.700  -->  00:09:48.110
So then we say, we'll call it grocerylist.
176

176

00:09:49.390  -->  00:09:52.560
So to create a new one,
we just pop equals new array list, and
177

177

00:09:52.560  -->  00:09:57.790
notice how now string is in the less than
equal then space between the list and
178

178

00:09:57.790  -->  00:09:59.590
the equal than sign, I should say.
179

179

00:09:59.590  -->  00:10:02.980
So, Java now knows, because you actually
specified string here, okay, you want me
180

180

00:10:02.980  -->  00:10:06.170
to specify a string there, so I can just
click that and it'll add it automatically.
181

181

00:10:06.170  -->  00:10:09.130
Now notice it's also
added the brackets and
182

182

00:10:09.130  -->  00:10:12.900
the reason we're doing that is
the array list is actually a class.
183

183

00:10:12.900  -->  00:10:17.710
And like the integer with the array,
integer was just a primitive type.
184

184

00:10:17.710  -->  00:10:19.330
The array list is actually a class and
185

185

00:10:19.330  -->  00:10:21.830
we'll be talking more about that
as we go through this video.
186

186

00:10:21.830  -->  00:10:23.880
So therefore it can have
it's own constructor.
187

187

00:10:23.880  -->  00:10:27.420
In this case what we're gonna be doing
is calling an empty constructor so,
188

188

00:10:27.420  -->  00:10:28.340
it's just the two brackets.
189

189

00:10:28.340  -->  00:10:31.010
So that's how we go about
defining a new array list.
190

190

00:10:31.010  -->  00:10:32.970
So let's go ahead and
create some functions there.
191

191

00:10:32.970  -->  00:10:35.990
We're gonna create a function to
actually add a grocery item and
192

192

00:10:35.990  -->  00:10:39.580
our grocery items are gonna be a string
with whatever the grocery item is that
193

193

00:10:39.580  -->  00:10:40.830
we're actually saving.
194

194

00:10:40.830  -->  00:10:45.030
So, to add something, public void,
195

195

00:10:45.030  -->  00:10:48.830
we'll call it add grocery item and
196

196

00:10:48.830  -->  00:10:52.660
we pass the parameter of the item.
197

197

00:10:52.660  -->  00:10:56.350
So we're gonna call this method with
an item that's stored in a string that we
198

198

00:10:56.350  -->  00:10:57.780
wanna save to the array list.
199

199

00:10:57.780  -->  00:10:58.980
So how do we go about doing it?
200

200

00:10:58.980  -->  00:11:03.320
Note that there's no numbers here
unlike when we created an array,
201

201

00:11:03.320  -->  00:11:05.600
we put something like it was new.
202

202

00:11:05.600  -->  00:11:11.760
int(50), so
we defined how many elements we wanted.
203

203

00:11:11.760  -->  00:11:14.130
Then we started addressing each
element by a particular number.
204

204

00:11:14.130  -->  00:11:19.140
That's how we put some of
that MyNumbers(5) equals
205

205

00:11:19.140  -->  00:11:23.610
the value 4 and that won't work there
because we're actually not in a method,
206

206

00:11:23.610  -->  00:11:28.120
but just to go back in here,
you do something like that normally.
207

207

00:11:28.120  -->  00:11:31.200
So that's how we go about saving
a value into a particular element
208

208

00:11:31.200  -->  00:11:34.490
with a normal array, but
of course with an ArrayList, we ask for
209

209

00:11:34.490  -->  00:11:36.880
the definition we didn't
actually specify a number.
210

210

00:11:36.880  -->  00:11:38.730
We didn't say how many
elements there were.
211

211

00:11:38.730  -->  00:11:41.070
And that's because the array
handles that for us automatically.
212

212

00:11:41.070  -->  00:11:42.460
So what we instead need to do,
213

213

00:11:42.460  -->  00:11:45.960
is we need to call a method that is
part of the array's class to our.
214

214

00:11:45.960  -->  00:11:48.110
So, to do that we used
the name of the variable.
215

215

00:11:48.110  -->  00:11:51.470
In this case, grocery list.
216

216

00:11:51.470  -->  00:11:55.660
We add item, like so, and what that does,
217

217

00:11:55.660  -->  00:11:58.910
it automatically adds
the item into the array list.
218

218

00:11:58.910  -->  00:12:02.060
And the array list has got all
the functionality to actually
219

219

00:12:02.060  -->  00:12:05.770
would determine where to save it,
the amount of space to allocate and so on.
220

220

00:12:05.770  -->  00:12:08.650
That's abstracted away from you,
you don't need to worry about that.
221

221

00:12:08.650  -->  00:12:10.950
That's one of the cool things
about using the array list,
222

222

00:12:10.950  -->  00:12:12.030
by using the power of Java.
223

223

00:12:12.030  -->  00:12:15.700
And getting it to do all the hard work and
where to say them.
224

224

00:12:15.700  -->  00:12:19.140
I'll just get rid of the old integer
array cuz we don't need it anymore.
225

225

00:12:19.140  -->  00:12:21.140
So that's it, so
that's how we actually add an element.
226

226

00:12:21.140  -->  00:12:22.320
Pretty simple as you can see.
227

227

00:12:22.320  -->  00:12:24.350
The next thing would be to print out.
228

228

00:12:24.350  -->  00:12:27.820
To print out the elements,
we can do printGroceryList.
229

229

00:12:29.030  -->  00:12:30.110
There has to be a way, obviously,
230

230

00:12:30.110  -->  00:12:33.240
to go through all the items that are in
an array list to retrieve them, so
231

231

00:12:33.240  -->  00:12:37.410
to do that, we can start off and
we can put something like you have.
232

232

00:12:37.410  -->  00:12:40.130
Now remember with an array,
233

233

00:12:40.130  -->  00:12:43.350
we use the .length property to
determine how many elements.
234

234

00:12:43.350  -->  00:12:44.480
But this one, there's actually a method.
235

235

00:12:44.480  -->  00:12:47.830
So its grocerylist.size.
236

236

00:12:47.830  -->  00:12:52.580
Size will return how many elements I've
currently stored in the array list.
237

237

00:12:52.580  -->  00:12:54.710
So we can put similar thing,
238

238

00:12:54.710  -->  00:12:58.730
grocerylist.size plus items
in your grocery list.
239

239

00:13:01.240  -->  00:13:05.210
And then when we loop through, we can
put something like int i equals zero,
240

240

00:13:05.210  -->  00:13:06.370
i less than grocery.
241

241

00:13:06.370  -->  00:13:11.260
Grocerylist.size, i++ and
242

242

00:13:11.260  -->  00:13:15.540
we can do something like, what we're gonna
do is you can put i+1, so our counting on
243

243

00:13:15.540  -->  00:13:20.060
screen starts from the number one
plus put a dot there and a space.
244

244

00:13:20.060  -->  00:13:23.600
And have a groceryList, now here's
how to access a particular element,
245

245

00:13:23.600  -->  00:13:24.810
we use the .get method.
246

246

00:13:24.810  -->  00:13:28.350
So .get, and we pass i.
247

247

00:13:28.350  -->  00:13:32.050
So that's going to output all
the elements that are currently stored in
248

248

00:13:32.050  -->  00:13:33.330
the array list.
249

249

00:13:33.330  -->  00:13:36.950
We know how many is in there because we've
used the size method to return the number.
250

250

00:13:36.950  -->  00:13:39.870
Then we're just iterating through as
you've seen before in previous code.
251

251

00:13:39.870  -->  00:13:42.900
But we're doing it by an array
list instead of using
252

252

00:13:42.900  -->  00:13:44.930
the traditional array that
we've used previously.
253

253

00:13:44.930  -->  00:13:45.780
So that's how to print.
254

254

00:13:45.780  -->  00:13:48.510
And of course, the next method
we want is how to modify it.
255

255

00:13:48.510  -->  00:13:51.810
So in other words, how to replace
an item as opposed to adding it.
256

256

00:13:51.810  -->  00:13:53.560
Adding it will always add a new item.
257

257

00:13:53.560  -->  00:13:56.220
So let's just say we've got a particular
item and you want to update it.
258

258

00:13:56.220  -->  00:13:57.530
So perhaps you've got the name wrong,
259

259

00:13:57.530  -->  00:14:00.800
you'd want to replace that item
at that position, so to speak.
260

260

00:14:00.800  -->  00:14:02.360
So to do that, it's actually quite easy.
261

261

00:14:02.360  -->  00:14:06.760
We can put public void_modifyGroceryItem.
262

262

00:14:09.400  -->  00:14:11.640
In position that's going
to be the element.
263

263

00:14:11.640  -->  00:14:15.950
The position where we wanted
to modify a new item.
264

264

00:14:15.950  -->  00:14:20.470
So all we need to do is put grocery list I
265

265

00:14:20.470  -->  00:14:25.430
should say .sit, position, new item.
266

266

00:14:25.430  -->  00:14:28.450
So that effectively replaces
that item in that position,
267

267

00:14:28.450  -->  00:14:30.930
very similar to how we
used arrays previously.
268

268

00:14:30.930  -->  00:14:36.500
We could put something like,
if you wanted to, grocery item.
269

269

00:14:42.260  -->  00:14:43.480
Has been modified.
270

270

00:14:45.710  -->  00:14:49.360
Here I'm using position + 1 when we're
printing it out to the screen because
271

271

00:14:49.360  -->  00:14:52.730
humans obviously start counting from 1,
but obviously the computer,
272

272

00:14:52.730  -->  00:14:56.280
as I mentioned in previous videos,
always starts at 0 with its count.
273

273

00:14:56.280  -->  00:14:58.220
So that's how to modify
an existing item and
274

274

00:14:58.220  -->  00:15:00.810
the last thing we need to know
how to do is to remove an item.
275

275

00:15:00.810  -->  00:15:06.480
So to remove an item,
public_void removeGroceryItem.
276

276

00:15:14.080  -->  00:15:15.010
String the item.
277

277

00:15:15.010  -->  00:15:18.670
What we're going to do is we're
going to retrieve the item first so
278

278

00:15:18.670  -->  00:15:22.930
we can actually output it and tell people
what item has actually been modified, and
279

279

00:15:22.930  -->  00:15:30.520
we do that with
groceryLlists.get position.
280

280

00:15:30.520  -->  00:15:32.610
At that position,
I'm returning into a string.
281

281

00:15:32.610  -->  00:15:36.380
Then we just type
groceryList.remove(position).
282

282

00:15:36.380  -->  00:15:42.060
That removes that item first
automatically at that position so,
283

283

00:15:42.060  -->  00:15:48.800
essentially if we had five elements and
we have one, milk, cheese, bread.
284

284

00:15:48.800  -->  00:15:50.030
Those three elements in the array.
285

285

00:15:50.030  -->  00:15:51.070
If we call this and
286

286

00:15:51.070  -->  00:15:54.430
we actually called it with position
one which would be the second element.
287

287

00:15:54.430  -->  00:15:57.310
What happens is automatically
the array list gets changed like this.
288

288

00:15:57.310  -->  00:15:58.270
So we've now got two items.
289

289

00:15:58.270  -->  00:16:03.190
And it's effectively moved the bread item
up into the position where previously we
290

290

00:16:03.190  -->  00:16:04.070
had cheese.
291

291

00:16:04.070  -->  00:16:07.220
So that's again the good part about
this is the array list is doing this for
292

292

00:16:07.220  -->  00:16:07.920
us automatically.
293

293

00:16:07.920  -->  00:16:11.220
It's not code that we need to
create to handle that complexity.
294

294

00:16:11.220  -->  00:16:12.550
So I'll just remove that.
295

295

00:16:12.550  -->  00:16:15.500
So what I'm gonna do, this video
is starting to get a bit long so,
296

296

00:16:15.500  -->  00:16:17.190
I'm just gonna pause the video here.
297

297

00:16:17.190  -->  00:16:20.280
And we'll come back to the next video and
what I'm going to do is just finish off
298

298

00:16:20.280  -->  00:16:23.600
this and show this application running,
then I'm gonna issue with a challenge so
299

299

00:16:23.600  -->  00:16:26.400
that you can actually start checking
out array list for yourself.
300

300

00:16:26.400  -->  00:16:28.230
So, I'll see you in that next video.
