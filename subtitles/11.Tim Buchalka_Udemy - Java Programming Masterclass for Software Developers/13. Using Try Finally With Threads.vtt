WEBVTT
1
1

00:00:05.090  -->  00:00:11.180
so as I mentioned in the last part of
the last video by having to issue these
2

2

00:00:11.180  -->  00:00:16.430
.lock and .unlock calls and have them
scattered throughout the code it could
3

3

00:00:16.430  -->  00:00:21.980
end up being quite messy so our code
could be error prone and frankly
4

4

00:00:21.980  -->  00:00:23.440
difficult to maintain
5

5

00:00:23.440  -->  00:00:28.520
but the reason for that is because we're
not using locks in the recommended way
6

6

00:00:28.520  -->  00:00:33.610
want to show you this so that you can
see why we always want to enclose the
7

7

00:00:33.610  -->  00:00:39.070
critical sections of code within a try
finally block now one reason for doing
8

8

00:00:39.070  -->  00:00:44.030
so is that we only need to call unlock
in one place
9

9

00:00:44.030  -->  00:00:48.290
the other reason is that it would be
possible for code within a critical
10

10

00:00:48.290  -->  00:00:53.030
section to throw an exception that we're
not explicitly handling using a catch
11

11

00:00:53.030  -->  00:00:57.950
statement and we want to make sure that we have released any locks were
12

12

00:00:57.950  -->  00:01:01.190
holding when that scenario plays out
13

13

00:01:01.190  -->  00:01:06.370
so let's go ahead now and update the
producer and the consumer to use the try
14

14

00:01:06.370  -->  00:01:09.130
try finally block
15

15

00:01:09.130  -->  00:01:13.780
firstly the producer code so I've got
that on the screen now I'm going to come
16

16

00:01:13.780  -->  00:01:18.020
down here after the lock and then the
actual code
17

17

00:01:18.020  -->  00:01:23.090
the buffer the code that basically
the code that is in the
18

18

00:01:23.090  -->  00:01:26.240
synchronization block or what would have
been in the synchronization block
19

19

00:01:26.810  -->  00:01:33.740
we're going to put a try around it...going to
paste that code in the try block
20

20

00:01:34.450  -->  00:01:37.450
we're not going to have a catch rather
we are only going to have a finally
21

21

00:01:42.430  -->  00:01:48.970
and I'm going to put the unlock in
the finally clause likewise down here
22

22

00:01:48.970  -->  00:01:52.390
after the .lock we're gonna put a try there
as well
23

23

00:01:52.390  -->  00:02:00.460
we'll put a finally and we'll add the
code that updates the arraylist put
24

24

00:02:00.460  -->  00:02:07.600
that in the try block and the unlock
method call we will put in the finally ok
25

25

00:02:07.600  -->  00:02:13.500
so that's the producer updated let's go
ahead now and update the consumer and
26

26

00:02:13.500  -->  00:02:16.690
hopefully you've got a grasp of what
I've done their now so again just to
27

27

00:02:16.690  -->  00:02:20.830
confirm by adding a try finally there's
two advantages
28

28

00:02:20.830  -->  00:02:25.570
firstly we've only got to put the unlock
in one place in the finally clause but
29

29

00:02:25.570  -->  00:02:31.000
secondly if we had another exception
that somehow we weren't processing or
30

30

00:02:31.000  -->  00:02:35.650
dealing with in the try block the finally clause code is going to be executed no
31

31

00:02:35.650  -->  00:02:39.850
matter so that means we can keep
pretty much guarantee that our unlock is
32

32

00:02:39.850  -->  00:02:42.970
going to be called no matter what
happens in the try block
33

33

00:02:42.970  -->  00:02:50.290
ok so on to the consumer code and i put
this in after the buffer lock try in their
34

34

00:02:50.290  -->  00:02:57.700
and put our finally and we put our
regular code up to but not including the
35

35

00:02:57.700  -->  00:03:05.470
unlock put that in the try accept that
import and then the buffer unlock we're
36

36

00:03:05.470  -->  00:03:10.090
going to put in the finally code block and you can see that we only
37

37

00:03:10.090  -->  00:03:15.040
need 1 unlock call now because unless an
application crashes in a really bad way
38

38

00:03:15.040  -->  00:03:20.830
we know that when a try block exits the
code in the finally block will always
39

39

00:03:20.830  -->  00:03:25.900
run and notice again I mentioned that
but just to clarify that the call to
40

40

00:03:25.900  -->  00:03:28.750
lock is outside the try catch block
41

41

00:03:28.750  -->  00:03:33.220
we don't have to worry about the lock
being released until we actually own it
42

42

00:03:33.220  -->  00:03:37.450
so that's the reason we haven't got that
in the try block and in fact if we
43

43

00:03:37.450  -->  00:03:41.070
try to release a lock we don't own you
will actually get an illegal monitors
44

44

00:03:41.070  -->  00:03:45.070
state exception when we blocked we don't
own the lock as such
45

45

00:03:45.070  -->  00:03:52.730
so let's now run this and see if it
works and we actually got
46

46

00:03:52.730  -->  00:03:56.810
an error there and the error is because
i haven't actually fixed the code
47

47

00:03:56.810  -->  00:04:00.040
completely what I've done and I'm just
going to close this run window down
48

48

00:04:00.680  -->  00:04:06.440
now I mentioned that the idea of the try
finally is to ensure that the buffer
49

49

00:04:06.440  -->  00:04:11.420
lock.unlock is called each time and of
course what i've done is i've also left
50

50

00:04:11.420  -->  00:04:15.700
in the code in line 83 and on line 88
51

51

00:04:15.700  -->  00:04:19.600
so consequently we're getting at an
exception because we're calling an
52

52

00:04:19.600  -->  00:04:24.790
unlock when we don't own the lock and
this is because if we try to release the
53

53

00:04:24.790  -->  00:04:28.580
lock that we don't own will get an
illegal monitor state exception and
54

54

00:04:28.580  -->  00:04:32.470
that's what you saw popping up on the
screen so i need to remove this code
55

55

00:04:32.470  -->  00:04:37.660
here and the code here as well
because we know that no matter what
56

56

00:04:37.660  -->  00:04:38.780
throughout his whole loop
57

57

00:04:38.780  -->  00:04:43.820
anytime this code is process we're
always going to unlock the code of
58

58

00:04:43.820  -->  00:04:47.810
course in the try block doesn't get
executed unless we've already got a lock
59

59

00:04:47.810  -->  00:04:51.220
here on line 80 so in other words we
guaranteed
60

60

00:04:51.740  -->  00:04:55.490
we've got a lock when this code is
executing and the finally code block
61

61

00:04:55.490  -->  00:04:58.370
make sure that we only unlock once
62

62

00:04:58.370  -->  00:05:02.450
so now that I've removed those and run
it again we should find that it works as
63

63

00:05:02.450  -->  00:05:09.910
we would expect and their you go the
programs now working fine so let's have
64

64

00:05:09.910  -->  00:05:14.360
a look at what else we can do with the
locks i'm going to close down this window now
65

65

00:05:14.360  -->  00:05:18.770
a thread can actually test to see whether
a lock is available using the try lock
66

66

00:05:18.770  -->  00:05:19.700
method
67

67

00:05:19.700  -->  00:05:24.620
so if lock is available the thread will
acquire the lock and continue executing if
68

68

00:05:24.620  -->  00:05:25.880
it's not available
69

69

00:05:25.880  -->  00:05:30.050
the thread won't block and
alternatively can execute some
70

70

00:05:30.050  -->  00:05:33.590
different code now for our particular
application
71

71

00:05:33.590  -->  00:05:36.880
there's no advantage to using try lock
over lock
72

72

00:05:36.880  -->  00:05:40.070
but let's change the code to use try lock
anyway just to see what it actually
73

73

00:05:40.070  -->  00:05:40.780
does
74

74

00:05:40.780  -->  00:05:45.710
so I'm going to change the consumer code
and specifically on line 80 where we've got
75

75

00:05:45.710  -->  00:05:47.330
buffer lock.lock
76

76

00:05:47.330  -->  00:05:51.590
I'm going to change that instead of
saying bufferlock.lock I'm
77

77

00:05:51.590  -->  00:05:56.570
going to put and if there so if...
78

78

00:05:57.220  -->  00:05:58.930
....
79

79

00:05:58.930  -->  00:06:05.330
if that's the case then and only
then we want to execute the code and i'm going
80

80

00:06:05.330  -->  00:06:08.740
to put all the try code in that block now
81

81

00:06:08.740  -->  00:06:15.880
now so the scenario now is that only if
that returns true the .trylock
82

82

00:06:15.880  -->  00:06:21.220
which means that a lock is available
then at that point because the lock was
83

83

00:06:21.220  -->  00:06:22.120
available
84

84

00:06:22.120  -->  00:06:25.180
we get the lock automatically and then
we'll proceed to going through and
85

85

00:06:25.180  -->  00:06:28.000
executing the code in the try block
86

86

00:06:28.000  -->  00:06:31.610
so essentially try lock returns true then
we'll execute the critical section of
87

87

00:06:31.610  -->  00:06:32.230
code
88

88

00:06:32.230  -->  00:06:37.390
if not we could do something else now we
could put a print out to the console but
89

89

00:06:37.390  -->  00:06:41.320
since our loop could execute hundreds of
thousands of times we really don't want
90

90

00:06:41.320  -->  00:06:45.340
to print anything to the console so an
alternative thing to do would be to
91

91

00:06:45.340  -->  00:06:50.200
count how many times try lock returns
false and when we finally get the lock
92

92

00:06:50.200  -->  00:06:54.640
and theirs data in the buffer will print
the counter to the console then reset it
93

93

00:06:54.640  -->  00:06:58.390
now we don't want to print the value of
counter when the buffer is empty because
94

94

00:06:58.390  -->  00:07:03.610
that could also happen thousands of
times due to producer thread sleeping
95

95

00:07:03.610  -->  00:07:05.020
after it adds each value
96

96

00:07:05.020  -->  00:07:10.990
let's go ahead and change that so we
need to introduce a variable....
97

97

00:07:10.990  -->  00:07:18.520
.....and what
we're going to do is down here after
98

98

00:07:18.520  -->  00:07:22.810
this code is executed so in other words
and we've done a test to see whether the
99

99

00:07:22.810  -->  00:07:24.010
buffer is empty
100

100

00:07:24.010  -->  00:07:27.730
if the buffer is empty and of course
the loop exits and starts again
101

101

00:07:27.730  -->  00:07:30.820
so if we get to this line 88 we know
that we have got something in the
102

102

00:07:30.820  -->  00:07:32.950
buffer at that point
103

103

00:07:32.950  -->  00:07:37.840
let's print out the contents of the
counter so we're going to print out....
104

104

00:07:37.840  -->  00:07:46.780
.....and then we'll also reset it back to 0
105

105

00:07:46.780  -->  00:07:52.720
then the other thing we can do outside
of the block down here after the if
106

106

00:07:52.720  -->  00:07:57.010
so in other words if you if try lock
return false meaning we weren't able to
107

107

00:07:57.010  -->  00:07:59.320
get a lock in there
108

108

00:07:59.320  -->  00:08:04.240
we simply going to just increment the
counter....so let's now run it and see
109

109

00:08:04.240  -->  00:08:07.240
how high this count can go
110

110

00:08:09.790  -->  00:08:13.300
look at the values of some of those
numbers there they can actually go up
111

111

00:08:13.300  -->  00:08:15.190
into the millions believe it or not
112

112

00:08:15.190  -->  00:08:18.730
so you can see now why we wouldn't wanted to print anything to the console
113

113

00:08:18.730  -->  00:08:23.230
we could have got potentially millions
of lines of output and might have
114

114

00:08:23.230  -->  00:08:25.300
crashed the program as well
115

115

00:08:25.300  -->  00:08:30.280
what we can also do when we use try lock
is we can set a time out period so if the
116

116

00:08:30.280  -->  00:08:34.510
thread still waiting for the lock when
the timeout expires it interrupted and
117

117

00:08:34.510  -->  00:08:39.700
continues executing so to do that we
just have to pass the time out period and the
118

118

00:08:39.700  -->  00:08:44.260
time unit that were using to the
method but i'll leave that as an
119

119

00:08:44.260  -->  00:08:47.380
exercise for you to add it's not
particularly hard to do
120

120

00:08:47.380  -->  00:08:50.620
now we might want to see how many
threads are waiting for a lock before we
121

121

00:08:50.620  -->  00:08:51.820
try to acquire it
122

122

00:08:51.820  -->  00:08:54.910
if they're our you know already a lot of
threads waiting
123

123

00:08:54.910  -->  00:08:58.180
we can run other code instead of
blocking and wait for the lock
124

124

00:08:58.180  -->  00:08:59.320
...
125

125

00:08:59.320  -->  00:09:03.880
now I mentioned that one drawback to
using synchronize blocks is that they
126

126

00:09:03.880  -->  00:09:05.950
aren't first come first served
127

127

00:09:05.950  -->  00:09:10.480
the lock interface doesn't dictate this
behavior either but some implementations
128

128

00:09:10.480  -->  00:09:16.510
do now the re-entrant lock
constructor accepts a fairness parameter
129

129

00:09:16.510  -->  00:09:20.410
when it's set to true the reentrant lock class will try to be fair
130

130

00:09:21.010  -->  00:09:24.940
by giving them the lock 2 whichever
thread has been waiting for it the
131

131

00:09:24.940  -->  00:09:30.250
longest again if the thread comes along
and finds out that a hundred threads are
132

132

00:09:30.250  -->  00:09:34.900
already waiting and it knows the lock is
a fair lock it might choose to terminate
133

133

00:09:34.900  -->  00:09:39.490
instead of blocking on the lock when
using a re-entrant lock
134

134

00:09:39.490  -->  00:09:42.760
we can also check for the number of
threads waiting for the lock
135

135

00:09:42.760  -->  00:09:48.190
by calling the get queued length method now
in our application the producer thread
136

136

00:09:48.190  -->  00:09:52.180
spends most of its time sleeping and the
critical sections of code for the
137

137

00:09:52.180  -->  00:09:56.050
consumers are executed very quickly so
there wouldn't be any threads waiting
138

138

00:09:56.050  -->  00:09:59.440
for the lock most of the time and get
zero but that is how we go about
139

139

00:09:59.440  -->  00:10:04.420
checking using the get queued length
method and just as an aside
140

140

00:10:04.420  -->  00:10:08.440
you can check out more and find out more
information about locks by having a look
141

141

00:10:08.440  -->  00:10:14.260
again at the Oracle documentation and I'll
paste the link on the browser
142

142

00:10:14.260  -->  00:10:16.360
and it's also available as a resource
143

143

00:10:16.360  -->  00:10:19.960
in this video make sure you check out the
documentation it is very useful
144

144

00:10:20.680  -->  00:10:22.960
there's also some other implementations
145

145

00:10:22.960  -->  00:10:26.890
on the interface that are link
to from the lock documentation as you
146

146

00:10:26.890  -->  00:10:27.910
can see down here
147

147

00:10:27.910  -->  00:10:32.050
all right we're going to finish this
video now in the next video we are gonna start
148

148

00:10:32.050  -->  00:10:34.840
taking a look at the executive service
interface
