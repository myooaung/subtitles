1
1

00:00:05,580  -->  00:00:06,940
- [Tim] Alright, so at
the end of the last video
2

2

00:00:06,940  -->  00:00:08,520
I talked about the fact
that we need to write
3

3

00:00:08,520  -->  00:00:11,090
two applications to demonstrate how to do
4

4

00:00:11,090  -->  00:00:12,300
network coding.
5

5

00:00:12,300  -->  00:00:14,200
One application's gonna be the server
6

6

00:00:14,200  -->  00:00:16,140
and the other will be the client.
7

7

00:00:16,140  -->  00:00:17,710
So I've created a new project here
8

8

00:00:17,710  -->  00:00:19,360
and I've called it Echo Server.
9

9

00:00:19,360  -->  00:00:21,750
So we're gonna start work
on the server application
10

10

00:00:21,750  -->  00:00:23,920
and it's purpose is
just going to be to echo
11

11

00:00:23,920  -->  00:00:27,710
back to the client whatever
text the client sends it.
12

12

00:00:27,710  -->  00:00:29,970
So the main method in the new projects,
13

13

00:00:29,970  -->  00:00:33,430
I'm going to start by
creating the server socket
14

14

00:00:33,430  -->  00:00:36,040
using a try with resources statement.
15

15

00:00:36,040  -->  00:00:37,240
Let's go ahead and do that.
16

16

00:00:37,240  -->  00:00:39,780
(typing)
17

17

00:00:39,780  -->  00:00:41,880
So it's gonna be server socket
18

18

00:00:41,880  -->  00:00:43,320
from the the java.net
19

19

00:00:43,320  -->  00:00:46,400
server socket equal new server socket
20

20

00:00:47,610  -->  00:00:49,610
and I'm gonna use 5,000.
21

21

00:00:51,630  -->  00:00:54,710
I'm gonna need to catch an IO xcepsn.
22

22

00:00:56,230  -->  00:00:58,260
And we'll just do one
in e.prints (mumbles)
23

23

00:00:58,260  -->  00:01:01,300
if we get an error
exception for some reason.
24

24

00:01:01,300  -->  00:01:02,340
Now the port number itself,
25

25

00:01:02,340  -->  00:01:04,560
that I've allocated here, 5000
26

26

00:01:04,560  -->  00:01:05,580
well that can be an integer
27

27

00:01:05,580  -->  00:01:08,410
between zero and 65,535 inclusive.
28

28

00:01:09,880  -->  00:01:12,140
Now some port numbers are already reserved
29

29

00:01:12,140  -->  00:01:14,690
or may already been used
by other applications.
30

30

00:01:14,690  -->  00:01:17,120
The way to find out is
to assign a port number
31

31

00:01:17,120  -->  00:01:18,580
and see if the socket instance
32

32

00:01:18,580  -->  00:01:20,490
is successfully created.
33

33

00:01:20,490  -->  00:01:21,350
Now of course, depending
34

34

00:01:21,350  -->  00:01:23,510
on the application, you
can do some research
35

35

00:01:23,510  -->  00:01:26,730
on the internet and find
what specific applications
36

36

00:01:26,730  -->  00:01:29,510
or which port numbers
specific applications used
37

37

00:01:29,510  -->  00:01:30,950
but for now we're just going to assign
38

38

00:01:30,950  -->  00:01:33,880
the port number 5000 in our example here.
39

39

00:01:33,880  -->  00:01:35,100
So now that we've done that,
40

40

00:01:35,100  -->  00:01:36,910
we want the server to listen to clients
41

41

00:01:36,910  -->  00:01:38,590
on the port that we've assigned.
42

42

00:01:38,590  -->  00:01:39,940
So to do that, we're gonna call
43

43

00:01:39,940  -->  00:01:42,760
the server socket.accept method
44

44

00:01:42,760  -->  00:01:44,740
and that returns a socket instance.
45

45

00:01:44,740  -->  00:01:45,970
And note that that's a socket instance
46

46

00:01:45,970  -->  00:01:47,680
and not a server socket.
47

47

00:01:47,680  -->  00:01:49,360
Now this will be the socket used
48

48

00:01:49,360  -->  00:01:51,320
to communicate with the client.
49

49

00:01:51,320  -->  00:01:52,480
Keep in mind that every client
50

50

00:01:52,480  -->  00:01:54,600
that connects to a server will do so
51

51

00:01:54,600  -->  00:01:58,450
using the same port but
through it's own socket.
52

52

00:01:58,450  -->  00:02:01,530
So the code for that will
be the try (mumbles) block
53

53

00:02:01,530  -->  00:02:03,160
and it's gonna be socket,
54

54

00:02:03,160  -->  00:02:06,490
socket is equal to server socket.accept.
55

55

00:02:08,620  -->  00:02:10,840
Now the accept method's
gonna block into a client
56

56

00:02:10,840  -->  00:02:12,720
that connects to the server.
57

57

00:02:12,720  -->  00:02:13,820
So to show that,
58

58

00:02:13,820  -->  00:02:16,540
what we're gonna do is
add a print line statement
59

59

00:02:16,540  -->  00:02:18,310
after the code to accept.
60

60

00:02:18,310  -->  00:02:20,080
So if we do that,
61

61

00:02:20,080  -->  00:02:21,560
we'll put client connected.
62

62

00:02:21,560  -->  00:02:24,010
(typing)
63

63

00:02:24,010  -->  00:02:25,590
Now if we run this,
64

64

00:02:32,430  -->  00:02:35,060
move this down to the bottom.
65

65

00:02:35,060  -->  00:02:36,250
We get the wording there relating
66

66

00:02:36,250  -->  00:02:39,030
to the bug (mumbles) have
got with the current version
67

67

00:02:39,030  -->  00:02:41,230
of the JDK but we don't see the message
68

68

00:02:41,230  -->  00:02:42,800
client connected.
69

69

00:02:42,800  -->  00:02:44,710
And that's because the
application which in this case
70

70

00:02:44,710  -->  00:02:48,720
is our server is waiting for
a client to connect to it.
71

71

00:02:48,720  -->  00:02:50,180
So, we obviously haven't got a client
72

72

00:02:50,180  -->  00:02:51,800
a bit of code written yet
73

73

00:02:51,800  -->  00:02:54,320
so I'm gonna have to disconnect manually
74

74

00:02:54,320  -->  00:02:55,710
while closing down the app.
75

75

00:02:55,710  -->  00:02:57,610
(mumbles) side.
76

76

00:02:57,610  -->  00:02:59,520
Now when a client does connect
77

77

00:02:59,520  -->  00:03:01,290
the server we use input and output
78

78

00:03:01,290  -->  00:03:03,590
strings to send data to the client
79

79

00:03:03,590  -->  00:03:05,980
and receive data from the client.
80

80

00:03:05,980  -->  00:03:08,280
Now the socket.getinputstring
81

81

00:03:08,280  -->  00:03:10,590
and socket.getoutputstring methods
82

82

00:03:10,590  -->  00:03:12,260
will return the input and output strings
83

83

00:03:12,260  -->  00:03:15,100
associated with the
server socket instance.
84

84

00:03:15,100  -->  00:03:16,940
So let's write some code for that.
85

85

00:03:16,940  -->  00:03:20,380
That will be after the
client connected message.
86

86

00:03:20,380  -->  00:03:22,790
So we're do a buffered reader
87

87

00:03:23,880  -->  00:03:25,630
input is equal to new
88

88

00:03:27,060  -->  00:03:30,280
buffered reader and I'm gonna put a new
89

89

00:03:30,280  -->  00:03:34,450
input string reader and it's
gonna be socket.getinputstring.
90

90

00:03:42,240  -->  00:03:45,280
And I'm gonna do a print writer
91

91

00:03:45,280  -->  00:03:48,200
output is equal to new print writer
92

92

00:03:49,810  -->  00:03:53,140
and it's gonna be socket.getoutputstring
93

93

00:03:55,070  -->  00:03:57,260
and true is the second argument.
94

94

00:03:57,260  -->  00:03:59,800
So a common practise here
is to wrap the input string
95

95

00:03:59,800  -->  00:04:02,340
with a buffered reader
and to string this output
96

96

00:04:02,340  -->  00:04:03,870
string with a print writer and you can see
97

97

00:04:03,870  -->  00:04:06,640
that I've done that on line 16 and 18.
98

98

00:04:06,640  -->  00:04:08,270
Now the second parameter I've adhered
99

99

00:04:08,270  -->  00:04:11,000
to the print writer constructor,
100

100

00:04:11,000  -->  00:04:13,640
that's specifies whether you
want to automatically flush
101

101

00:04:13,640  -->  00:04:16,790
the output string the
print writer is using.
102

102

00:04:16,790  -->  00:04:18,670
Now if you don't specify true
103

103

00:04:18,670  -->  00:04:20,020
then you'll have to go
with the flush method
104

104

00:04:20,020  -->  00:04:23,230
after every string to the
right to ensure the data
105

105

00:04:23,230  -->  00:04:24,930
is actually sent.
106

106

00:04:24,930  -->  00:04:26,950
Alright, so now it's time to read the data
107

107

00:04:26,950  -->  00:04:28,470
from the client.
108

108

00:04:28,470  -->  00:04:31,050
So at this point, we can
use the buffered reader
109

109

00:04:31,050  -->  00:04:32,360
as you normally would.
110

110

00:04:32,360  -->  00:04:34,120
Now there's nothing special
about a buffered reader
111

111

00:04:34,120  -->  00:04:35,470
attached to a socket.
112

112

00:04:35,470  -->  00:04:37,410
You want the server to
remain alive until the client
113

113

00:04:37,410  -->  00:04:39,230
doesn't need it anymore,
114

114

00:04:39,230  -->  00:04:40,790
so this is one time
where you will actually
115

115

00:04:40,790  -->  00:04:43,420
intensely use an Infinite loop.
116

116

00:04:43,420  -->  00:04:46,270
So let's go ahead and write that.
117

117

00:04:46,270  -->  00:04:47,970
So while true,
118

118

00:04:47,970  -->  00:04:49,540
so that's our Infinite loop
119

119

00:04:49,540  -->  00:04:52,520
and then we'll do string echo string
120

120

00:04:52,520  -->  00:04:54,600
is equal to input.redline
121

121

00:04:57,120  -->  00:04:57,960
and then we're gonna put
122

122

00:04:57,960  -->  00:04:58,900
if echo string (mumbles)
123

123

00:04:58,900  -->  00:05:00,890
to actually exit out of this
124

124

00:05:00,890  -->  00:05:01,980
.equals exit,
125

125

00:05:05,730  -->  00:05:06,680
then we're gonna go break
126

126

00:05:06,680  -->  00:05:08,820
to break out of the Y loop
127

127

00:05:08,820  -->  00:05:09,840
but then outside of that
128

128

00:05:09,840  -->  00:05:13,010
if we're going to put output.printline
129

129

00:05:14,560  -->  00:05:17,220
we're gonna put echo from server
130

130

00:05:18,340  -->  00:05:19,760
pass echo string.
131

131

00:05:20,630  -->  00:05:22,000
And we must just change this a little bit
132

132

00:05:22,000  -->  00:05:23,320
to instead of putting a stack trace,
133

133

00:05:23,320  -->  00:05:26,330
let's actually change that to drive.
134

134

00:05:26,330  -->  00:05:28,580
We'll put server exception.
135

135

00:05:29,970  -->  00:05:32,400
(mumbles) get message.
136

136

00:05:32,400  -->  00:05:34,950
For that we'll need a stack trace.
137

137

00:05:34,950  -->  00:05:36,440
Alright so now that we've done that
138

138

00:05:36,440  -->  00:05:39,370
we've got our infinite
loop part on line 20.
139

139

00:05:39,370  -->  00:05:40,710
Now within the loop we call in the
140

140

00:05:40,710  -->  00:05:43,420
buffered reader.readline method.
141

141

00:05:43,420  -->  00:05:44,630
Line 21.
142

142

00:05:44,630  -->  00:05:46,220
Now when the server receives this string,
143

143

00:05:46,220  -->  00:05:47,440
exit from the client.
144

144

00:05:47,440  -->  00:05:49,490
We're doing a test for that on line 22.
145

145

00:05:49,490  -->  00:05:51,470
It's gonna terminate so that's the code
146

146

00:05:51,470  -->  00:05:52,300
that's gonna check for that
147

147

00:05:52,300  -->  00:05:54,460
and break out of our Infinite loop.
148

148

00:05:54,460  -->  00:05:56,210
But if it's not exit,
than what we're doing
149

149

00:05:56,210  -->  00:05:58,550
is we are just gonna echo
the string back to the client
150

150

00:05:58,550  -->  00:06:01,000
with a prefix echo from
server and you can see me
151

151

00:06:01,000  -->  00:06:03,420
doing that on line 25.
152

152

00:06:03,420  -->  00:06:05,210
And we're writing the string to the socket
153

153

00:06:05,210  -->  00:06:08,370
using the print writer.print
method on that line.
154

154

00:06:08,370  -->  00:06:10,790
So that's all there is to the
first version of the server.
155

155

00:06:10,790  -->  00:06:12,000
Now we're gonna make some improvements
156

156

00:06:12,000  -->  00:06:14,830
to this server in later videos.
157

157

00:06:14,830  -->  00:06:15,830
But now it's actually time
158

158

00:06:15,830  -->  00:06:18,580
to create the client application.
159

159

00:06:19,500  -->  00:06:20,490
Now what we're gonna do here
160

160

00:06:20,490  -->  00:06:24,880
is we're going to have two
intelli J projects open
161

161

00:06:24,880  -->  00:06:26,320
so that we can actually
see them both running
162

162

00:06:26,320  -->  00:06:27,620
at the same time.
163

163

00:06:27,620  -->  00:06:29,550
So I'm going to create a new project here
164

164

00:06:29,550  -->  00:06:30,960
File new project.
165

165

00:06:32,990  -->  00:06:34,240
Java obviously.
166

166

00:06:35,190  -->  00:06:37,040
And we'll create project from template.
167

167

00:06:37,040  -->  00:06:40,620
And I'm going to call
this one Echo client.
168

168

00:06:42,600  -->  00:06:43,980
And I'm gonna click on New Window
169

169

00:06:43,980  -->  00:06:46,210
so I can have them both open at any time
170

170

00:06:46,210  -->  00:06:49,100
and I can just switch
between whichever one
171

171

00:06:49,100  -->  00:06:50,600
I wanna work with.
172

172

00:06:54,230  -->  00:06:55,060
Okay.
173

173

00:07:02,270  -->  00:07:03,530
Alright.
174

174

00:07:03,530  -->  00:07:05,550
Now the main method's gonna start
175

175

00:07:05,550  -->  00:07:08,790
in the same way that the
one for the server did
176

176

00:07:08,790  -->  00:07:10,770
except we're gonna create a socket,
177

177

00:07:10,770  -->  00:07:12,140
not a server socket.
178

178

00:07:12,140  -->  00:07:15,080
So going back to our Echo server
you can see we're creating
179

179

00:07:15,080  -->  00:07:17,510
a server socket on Line 13
180

180

00:07:17,510  -->  00:07:19,370
but for our client programme
181

181

00:07:19,370  -->  00:07:20,910
we're gonna do something similar
182

182

00:07:20,910  -->  00:07:22,000
but again we're creating a socket
183

183

00:07:22,000  -->  00:07:23,810
not a server socket.
184

184

00:07:23,810  -->  00:07:27,640
So I'm still going to have a try in there.
185

185

00:07:27,640  -->  00:07:29,810
Try three sources, that's gonna be socket,
186

186

00:07:29,810  -->  00:07:33,890
socket equals new socket
jave.net and the address
187

187

00:07:35,210  -->  00:07:37,710
is going to be local host 5000
188

188

00:07:39,440  -->  00:07:41,470
is the port number.
189

189

00:07:41,470  -->  00:07:43,960
And we'll send it to catch our exception.
190

190

00:07:43,960  -->  00:07:46,460
Our exception E then we'll do,
191

191

00:07:51,490  -->  00:07:52,320
okay.
192

192

00:07:52,320  -->  00:07:54,700
That's what I tried to do the first time.
193

193

00:07:54,700  -->  00:07:55,540
Then we'll do it here.
194

194

00:07:55,540  -->  00:07:58,150
We'll just print out an error.
195

195

00:07:58,150  -->  00:08:01,070
We'll print out to our client error
196

196

00:08:01,070  -->  00:08:03,330
(typing)
197

197

00:08:03,330  -->  00:08:04,410
e.getmessage.
198

198

00:08:06,210  -->  00:08:08,290
(typing)
199

199

00:08:11,090  -->  00:08:12,510
Okay.
200

200

00:08:12,510  -->  00:08:14,090
So difference here is
201

201

00:08:14,090  -->  00:08:16,070
for our socket, on Line nine
202

202

00:08:16,070  -->  00:08:17,990
we need to specify two parameters.
203

203

00:08:17,990  -->  00:08:20,130
The address of the host
we want to connect to
204

204

00:08:20,130  -->  00:08:21,570
and the port number.
205

205

00:08:21,570  -->  00:08:23,890
Now if you used a local
host as you can see there
206

206

00:08:23,890  -->  00:08:25,530
because you want to connect to a server
207

207

00:08:25,530  -->  00:08:27,040
running on the same host,
208

208

00:08:27,040  -->  00:08:28,830
which in this case is your computer.
209

209

00:08:28,830  -->  00:08:30,820
Now if a local host doesn't work
210

210

00:08:30,820  -->  00:08:34,480
you can try passing the
IP address 127.0.0.1
211

211

00:08:37,340  -->  00:08:38,870
which is an IP address that resolves
212

212

00:08:38,870  -->  00:08:40,680
to this computer as well
213

213

00:08:40,680  -->  00:08:42,460
but the string, the local host is actually
214

214

00:08:42,460  -->  00:08:45,880
an alias for the computer's
IP address as well.
215

215

00:08:45,880  -->  00:08:46,920
So both of those should generally
216

216

00:08:46,920  -->  00:08:48,780
work on your computer.
217

217

00:08:48,780  -->  00:08:51,260
So we have to specify
the same port number.
218

218

00:08:51,260  -->  00:08:54,350
Again going back to our
server right, port number 5000
219

219

00:08:54,350  -->  00:08:57,660
we need to specify the same for our client
220

220

00:08:57,660  -->  00:08:59,230
because that's the port
number that the server's
221

221

00:08:59,230  -->  00:09:00,740
listing on.
222

222

00:09:00,740  -->  00:09:03,090
So how do we know which
port number to use?
223

223

00:09:03,090  -->  00:09:04,580
Well if you're writing by client
224

224

00:09:04,580  -->  00:09:06,120
and the server, you'll know.
225

225

00:09:06,120  -->  00:09:07,340
But if you're writing a client
226

226

00:09:07,340  -->  00:09:08,380
that wants to connect to a server that
227

227

00:09:08,380  -->  00:09:12,090
you didn't write, the
documentation for the API
228

228

00:09:12,090  -->  00:09:13,620
you're using all the server application
229

229

00:09:13,620  -->  00:09:15,100
you're trying to connect to
230

230

00:09:15,100  -->  00:09:16,220
should tell you the port number that
231

231

00:09:16,220  -->  00:09:18,320
your code has to use.
232

232

00:09:18,320  -->  00:09:19,750
Alright, so next we
need to create the input
233

233

00:09:19,750  -->  00:09:22,120
and output strings in the same way
234

234

00:09:22,120  -->  00:09:23,850
we did for the server.
235

235

00:09:23,850  -->  00:09:24,820
So let's go ahead and do that
236

236

00:09:24,820  -->  00:09:26,280
in our try block.
237

237

00:09:26,280  -->  00:09:28,490
So buffered reader.
238

238

00:09:28,490  -->  00:09:29,440
(typing)
239

239

00:09:29,440  -->  00:09:30,840
Echos, we'll call this one
240

240

00:09:30,840  -->  00:09:33,690
is equal to new buffered reader.
241

241

00:09:33,690  -->  00:09:37,390
That's gonna be new input string reader.
242

242

00:09:37,390  -->  00:09:41,100
That's gonna be socket.getinputstring.
243

243

00:09:41,100  -->  00:09:43,180
(typing)
244

244

00:09:45,740  -->  00:09:49,110
Now we want to do a print
writer, string to echo
245

245

00:09:49,110  -->  00:09:51,180
we'll call this one
246

246

00:09:51,180  -->  00:09:55,350
is equal to new print writer
socket.getoutputstring
247

247

00:09:58,860  -->  00:10:00,830
and true it's a second argument.
248

248

00:10:00,830  -->  00:10:01,900
And that's obviously very similar.
249

249

00:10:01,900  -->  00:10:03,420
We've got the true argument
250

250

00:10:03,420  -->  00:10:05,370
being sent for our print writer
251

251

00:10:05,370  -->  00:10:07,130
so it flushes the output automatically
252

252

00:10:07,130  -->  00:10:09,230
to save us having to manually do that
253

253

00:10:09,230  -->  00:10:10,750
every time we send the data.
254

254

00:10:10,750  -->  00:10:12,200
Now we could hard code strings
255

255

00:10:12,200  -->  00:10:14,430
to send to the server,
but let's actually ask
256

256

00:10:14,430  -->  00:10:16,030
for strings instead.
257

257

00:10:16,030  -->  00:10:17,700
So I'm gonna use the scanner to read input
258

258

00:10:17,700  -->  00:10:20,190
from the console and
once you have the string,
259

259

00:10:20,190  -->  00:10:21,780
we're gonna write it to the socket.
260

260

00:10:21,780  -->  00:10:23,410
And we have to also add the check here
261

261

00:10:23,410  -->  00:10:24,850
for the exit string.
262

262

00:10:24,850  -->  00:10:26,250
When the user types in Exit,
263

263

00:10:26,250  -->  00:10:27,430
that means that they want to quit.
264

264

00:10:27,430  -->  00:10:30,050
So let's go ahead and do that.
265

265

00:10:30,050  -->  00:10:32,150
So we're gonna start with scanner,
266

266

00:10:32,150  -->  00:10:33,730
scanner is equal to
267

267

00:10:37,140  -->  00:10:38,180
it's a java (mumbles) scanner
268

268

00:10:38,180  -->  00:10:40,400
that we've used before in the course.
269

269

00:10:40,400  -->  00:10:42,400
New scanner and system.m
270

270

00:10:44,880  -->  00:10:47,440
we want to string the echo string.
271

271

00:10:47,440  -->  00:10:50,610
We want another string for the response.
272

272

00:10:50,610  -->  00:10:51,690
And this time we're gonna credit
273

273

00:10:51,690  -->  00:10:52,530
do Y loop.
274

274

00:10:52,530  -->  00:10:54,860
So do and we want to do our,
275

275

00:10:56,030  -->  00:10:57,130
print out a message here.
276

276

00:10:57,130  -->  00:10:58,060
We're gonna start by saying
277

277

00:10:58,060  -->  00:11:00,230
enter string to be echoed.
278

278

00:11:01,420  -->  00:11:03,760
(typing)
279

279

00:11:03,760  -->  00:11:04,590
Okay, then when we're gonna
280

280

00:11:04,590  -->  00:11:08,010
echo string is equal to scanner.nextline.
281

281

00:11:11,420  -->  00:11:15,590
Now I'm gonna do string to
echo.printlineechostring.
282

282

00:11:19,350  -->  00:11:20,270
Then we'll do our test here.
283

283

00:11:20,270  -->  00:11:22,440
If not, echo string.equals
284

284

00:11:25,520  -->  00:11:28,110
(typing) exit.
285

285

00:11:30,980  -->  00:11:31,820
Now what we're going to do
286

286

00:11:31,820  -->  00:11:32,650
when it's not exit
287

287

00:11:32,650  -->  00:11:36,070
we're gonna do a response.response equals
288

288

00:11:37,450  -->  00:11:38,790
echoes.readline.
289

289

00:11:40,290  -->  00:11:42,090
And we're gonna do our print out
290

290

00:11:42,090  -->  00:11:44,340
system out of our response.
291

291

00:11:45,180  -->  00:11:46,560
(mumbles) and then we're gonna finish
292

292

00:11:46,560  -->  00:11:48,560
our (mumbles) Y loop with a (mumbles)
293

293

00:11:48,560  -->  00:11:53,290
and then print the season
not echo string.equals
294

294

00:11:53,290  -->  00:11:55,590
exit in double quotes.
295

295

00:11:55,590  -->  00:11:56,790
(typing)
296

296

00:11:56,790  -->  00:11:59,040
Alright, so we're using a dual Y loop here
297

297

00:11:59,040  -->  00:12:00,160
and that's because we want the loop
298

298

00:12:00,160  -->  00:12:02,010
to execute at least once
299

299

00:12:02,010  -->  00:12:03,890
because we haven't got
any idea how many times
300

300

00:12:03,890  -->  00:12:05,600
it'll execute.
301

301

00:12:05,600  -->  00:12:07,320
First we're asking the user for a string
302

302

00:12:07,320  -->  00:12:08,810
and then we're sending the string
303

303

00:12:08,810  -->  00:12:10,400
to the server.
304

304

00:12:10,400  -->  00:12:12,550
So you can see we're asking that
305

305

00:12:12,550  -->  00:12:14,050
for a string there for our scanner object
306

306

00:12:14,050  -->  00:12:15,010
and then we're using the string
307

307

00:12:15,010  -->  00:12:17,180
to echo to send that to the server
308

308

00:12:17,180  -->  00:12:18,200
and you can just say we're using that
309

309

00:12:18,200  -->  00:12:19,960
to print writer to do that.
310

310

00:12:19,960  -->  00:12:21,490
The print writer object.
311

311

00:12:21,490  -->  00:12:22,500
And after that we're just checking whether
312

312

00:12:22,500  -->  00:12:23,980
the string equals exit.
313

313

00:12:23,980  -->  00:12:26,260
If it does and the loop's gonna terminate
314

314

00:12:26,260  -->  00:12:27,840
and if a string isn't,
315

315

00:12:27,840  -->  00:12:29,350
the echo string's not equal to exit
316

316

00:12:29,350  -->  00:12:30,950
then we're reading the dialect coming back
317

317

00:12:30,950  -->  00:12:32,060
from the server,
318

318

00:12:32,060  -->  00:12:33,240
then we're outputting what we got back
319

319

00:12:33,240  -->  00:12:34,260
from the server.
320

320

00:12:34,260  -->  00:12:35,710
And Y loop continues
321

321

00:12:35,710  -->  00:12:38,350
until we receive an exit.
322

322

00:12:38,350  -->  00:12:40,560
Alright, so hopefully that seems pretty
323

323

00:12:40,560  -->  00:12:41,920
straightforward now.
324

324

00:12:41,920  -->  00:12:43,400
We've got our server and our client
325

325

00:12:43,400  -->  00:12:46,160
so it's now time to run both applications.
326

326

00:12:46,160  -->  00:12:48,000
So we're gonna start
by running the E under
327

327

00:12:48,000  -->  00:12:49,270
the echo server project.
328

328

00:12:49,270  -->  00:12:51,870
So I'm gonna switch over to that
329

329

00:12:51,870  -->  00:12:54,030
and I'm going to run that.
330

330

00:12:58,560  -->  00:13:00,450
You can say that's running away now.
331

331

00:13:00,450  -->  00:13:02,740
Now going back to our echo client project
332

332

00:13:02,740  -->  00:13:04,410
and if you run this,
333

333

00:13:09,300  -->  00:13:10,270
and I'll just move the output down
334

334

00:13:10,270  -->  00:13:11,440
to the bottom.
335

335

00:13:12,820  -->  00:13:14,810
Now we have a look at that echo server
336

336

00:13:14,810  -->  00:13:16,630
you can say we've now got client connected
337

337

00:13:16,630  -->  00:13:17,690
and what I might do is actually just
338

338

00:13:17,690  -->  00:13:20,290
try and switch this so we can see
339

339

00:13:20,290  -->  00:13:22,020
both at once.
340

340

00:13:22,020  -->  00:13:25,140
This might be a better
way of actually doing it.
341

341

00:13:25,140  -->  00:13:26,670
Alright, so let's actually
just stop both again
342

342

00:13:26,670  -->  00:13:30,090
so we can see there's more in real time.
343

343

00:13:30,090  -->  00:13:32,800
(clicking)
344

344

00:13:32,800  -->  00:13:35,400
So going back to our server
345

345

00:13:35,400  -->  00:13:36,510
and what I might do is just use a bit more
346

346

00:13:36,510  -->  00:13:38,630
of that screen real estate.
347

347

00:13:38,630  -->  00:13:39,720
And run that.
348

348

00:13:42,150  -->  00:13:42,990
That's over there.
349

349

00:13:42,990  -->  00:13:45,650
Now as soon as we run our client
350

350

00:13:46,590  -->  00:13:47,970
you can see we've got client connected
351

351

00:13:47,970  -->  00:13:50,160
appearing immediately and
probably didn't make sense
352

352

00:13:50,160  -->  00:13:51,260
to use that screen real estate,
353

353

00:13:51,260  -->  00:13:52,260
so I'll put it over here so I can see it
354

354

00:13:52,260  -->  00:13:54,290
a little bit easier.
355

355

00:13:54,290  -->  00:13:55,710
Alright, so clearly the
client's connected there
356

356

00:13:55,710  -->  00:13:57,120
as you can see.
357

357

00:13:57,120  -->  00:13:59,260
So I go back to the client now.
358

358

00:13:59,260  -->  00:14:01,820
At this point the client's
connected to the server
359

359

00:14:01,820  -->  00:14:04,070
so the accept method
in the echoserver.main
360

360

00:14:04,070  -->  00:14:05,200
is no longer blocked.
361

361

00:14:05,200  -->  00:14:07,020
And the code continues executing.
362

362

00:14:07,020  -->  00:14:10,440
So we're executing this Y loop right now.
363

363

00:14:12,210  -->  00:14:14,510
So basically it's
sitting there now waiting
364

364

00:14:14,510  -->  00:14:15,830
on the read line line,
365

365

00:14:15,830  -->  00:14:18,590
so Line 21 here's basically
waiting to receive
366

366

00:14:18,590  -->  00:14:20,590
some input from the client.
367

367

00:14:20,590  -->  00:14:22,060
So switching back to the client over here
368

368

00:14:22,060  -->  00:14:23,650
and the string to be echoed,
369

369

00:14:23,650  -->  00:14:26,320
and if we type in Hello, server.
370

370

00:14:27,860  -->  00:14:29,900
And press Enter,
371

371

00:14:29,900  -->  00:14:32,660
we've got an echo from
the server, Hello Server.
372

372

00:14:32,660  -->  00:14:33,490
(typing)
373

373

00:14:33,490  -->  00:14:35,480
Another Hello.
374

374

00:14:35,480  -->  00:14:36,730
Then we're getting the
echo back from the server
375

375

00:14:36,730  -->  00:14:38,560
again and if I type in Exit,
376

376

00:14:38,560  -->  00:14:40,640
(typing)
377

377

00:14:42,320  -->  00:14:43,670
you can see that both applications
378

378

00:14:43,670  -->  00:14:44,630
have now closed.
379

379

00:14:44,630  -->  00:14:47,360
The server closed as well as the client.
380

380

00:14:47,360  -->  00:14:48,520
So at this point you've now written
381

381

00:14:48,520  -->  00:14:51,290
your first client and
also your first server.
382

382

00:14:51,290  -->  00:14:53,470
But the server you've
written isn't very useful
383

383

00:14:53,470  -->  00:14:55,680
because it can only connect to one client.
384

384

00:14:55,680  -->  00:14:56,540
So on the next video,
385

385

00:14:56,540  -->  00:14:58,390
we're gonna start
modifying it so that we can
386

386

00:14:58,390  -->  00:15:00,970
accept connexions from audible clients.
387

387

00:15:00,970  -->  00:15:02,900
See you in the next video.
