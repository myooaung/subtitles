WEBVTT
1
1

00:00:04.750  -->  00:00:06.879
So let's now discuss the difference
2

2

00:00:06.879  -->  00:00:09.219
between the this and the super key words,
3

3

00:00:09.219  -->  00:00:11.830
in depth, we'll also find out about the
4

4

00:00:11.830  -->  00:00:13.869
differences between the this and super
5

5

00:00:13.869  -->  00:00:15.609
method calls, as you can see by adding
6

6

00:00:15.609  -->  00:00:18.550
parentheses on the end. Alright, so let's
7

7

00:00:18.550  -->  00:00:20.500
start with the super and the this key
8

8

00:00:20.500  -->  00:00:23.199
words first. You know, the keyword super
9

9

00:00:23.199  -->  00:00:26.409
is used to access or call the parent
10

10

00:00:26.409  -->  00:00:29.829
class members, variables and methods.
11

11

00:00:29.829  -->  00:00:31.630
Now the keyword this on the other hand
12

12

00:00:31.630  -->  00:00:33.520
is used to call the current class members
13

13

00:00:33.520  -->  00:00:36.130
variables and methods, so this is
14

14

00:00:36.130  -->  00:00:38.980
required when we have a parameter with
15

15

00:00:38.980  -->  00:00:41.170
the same name as an instance variable or
16

16

00:00:41.170  -->  00:00:44.440
field. Now note that we can use both of
17

17

00:00:44.440  -->  00:00:47.320
them anywhere in a class except in
18

18

00:00:47.320  -->  00:00:49.720
static areas which is the static block
19

19

00:00:49.720  -->  00:00:52.030
or a static method, any attempt to do so
20

20

00:00:52.030  -->  00:00:53.710
there will lead to compile time errors
21

21

00:00:53.710  -->  00:00:56.260
but don't worry too much about static
22

22

00:00:56.260  -->  00:00:58.330
we'll be talking more about that later
23

23

00:00:58.330  -->  00:01:01.780
in the course. So the keyword this is
24

24

00:01:01.780  -->  00:01:04.180
commonly used with constructors and
25

25

00:01:04.180  -->  00:01:06.939
setters and optionally used in getters,
26

26

00:01:06.939  -->  00:01:09.840
it's particularly useful for beginners
27

27

00:01:09.840  -->  00:01:13.060
using it in getters. Now in the example
28

28

00:01:13.060  -->  00:01:15.430
below, we're using that this keyword in
29

29

00:01:15.430  -->  00:01:17.860
the constructor and setter and that's
30

30

00:01:17.860  -->  00:01:19.630
because there's a parameter with the
31

31

00:01:19.630  -->  00:01:22.930
same name as the instance or field.
32

32

00:01:22.930  -->  00:01:24.760
Now, in the getter we don't have any
33

33

00:01:24.760  -->  00:01:26.860
parameters so there's no conflict so
34

34

00:01:26.860  -->  00:01:29.380
therefore the this keyword is optional
35

35

00:01:29.380  -->  00:01:34.120
there. Now, the keyword super is commonly
36

36

00:01:34.120  -->  00:01:36.760
used with a method overriding when we
37

37

00:01:36.760  -->  00:01:39.820
call a method with the same name from
38

38

00:01:39.820  -->  00:01:42.460
the parent class. Now in the example
39

39

00:01:42.460  -->  00:01:44.380
below, we have a method called print'
40

40

00:01:44.380  -->  00:01:48.760
method that calls super .print method in
41

41

00:01:48.760  -->  00:01:50.979
other words it's calling the method with
42

42

00:01:50.979  -->  00:01:54.010
the same name from the parent class.
43

43

00:01:54.010  -->  00:01:55.720
Now, without adding the keyword super in this
44

44

00:01:55.720  -->  00:01:58.090
case, it would end up being a recursive
45

45

00:01:58.090  -->  00:02:00.549
call what that means is that the method
46

46

00:02:00.549  -->  00:02:03.490
would call itself forever or actually
47

47

00:02:03.490  -->  00:02:04.810
until memory is fully used on your
48

48

00:02:04.810  -->  00:02:07.330
computer. So that's why we need the super
49

49

00:02:07.330  -->  00:02:09.429
keyword so that we can call a method
50

50

00:02:09.429  -->  00:02:14.050
with the same name from a parent class.
51

51

00:02:14.050  -->  00:02:16.160
Alright, so in Java we've got this this
52

52

00:02:16.160  -->  00:02:19.310
call and the super call, so notice of
53

53

00:02:19.310  -->  00:02:22.160
braces but it's known as a call since it
54

54

00:02:22.160  -->  00:02:24.800
looks like a regular method call,
55

55

00:02:24.800  -->  00:02:26.750
so you'll use this parenthesis to call a
56

56

00:02:26.750  -->  00:02:29.240
constructor from another overloaded
57

57

00:02:29.240  -->  00:02:30.950
constructor in the same class.
58

58

00:02:30.950  -->  00:02:33.590
You know the call to this parentheses
59

59

00:02:33.590  -->  00:02:37.070
can only be used in a constructor and it
60

60

00:02:37.070  -->  00:02:38.900
must be the first statement in a
61

61

00:02:38.900  -->  00:02:40.910
constructor. Now it's used with
62

62

00:02:40.910  -->  00:02:43.670
constructor chaining, in other words when
63

63

00:02:43.670  -->  00:02:45.530
one constructor calls another
64

64

00:02:45.530  -->  00:02:47.960
constructor and it helps to reduce
65

65

00:02:47.960  -->  00:02:51.080
duplicated code. Now the only way to call
66

66

00:02:51.080  -->  00:02:53.570
a parent constructor is by calling super
67

67

00:02:53.570  -->  00:02:55.580
parentheses so that actually calls the
68

68

00:02:55.580  -->  00:02:58.280
parent constructor. So the Java compiler
69

69

00:02:58.280  -->  00:02:59.570
puts a default called as super
70

70

00:02:59.570  -->  00:03:01.580
parentheses if we don't add it and it's
71

71

00:03:01.580  -->  00:03:03.530
always a call to the no argument super
72

72

00:03:03.530  -->  00:03:05.120
which is inserted by the compiler,
73

73

00:03:05.120  -->  00:03:07.280
in other words a call to the constructor
74

74

00:03:07.280  -->  00:03:10.220
that hasn't got any arguments and keep
75

75

00:03:10.220  -->  00:03:11.510
in mind that the call to super
76

76

00:03:11.510  -->  00:03:14.120
parentheses must be the first statement
77

77

00:03:14.120  -->  00:03:17.360
in each constructor. Now even abstract
78

78

00:03:17.360  -->  00:03:19.910
classes have constructors, although you
79

79

00:03:19.910  -->  00:03:21.920
can never instantiate an abstract class
80

80

00:03:21.920  -->  00:03:24.440
using the new keyword, an abstract class
81

81

00:03:24.440  -->  00:03:26.630
by the way is still a superclass so its
82

82

00:03:26.630  -->  00:03:29.540
constructors run when someone makes an
83

83

00:03:29.540  -->  00:03:31.610
instance of a concrete class. We will be
84

84

00:03:31.610  -->  00:03:32.990
talking a lot more about abstract
85

85

00:03:32.990  -->  00:03:34.520
classes later in the in the course,
86

86

00:03:34.520  -->  00:03:35.990
I'm just mentioning here now
87

87

00:03:35.990  -->  00:03:39.280
to be complete and importantly a
88

88

00:03:39.280  -->  00:03:41.270
constructor can have a call to super
89

89

00:03:41.270  -->  00:03:43.430
parenthesis or this parenthesis but it
90

90

00:03:43.430  -->  00:03:47.090
can have both. Alright, so let's look at
91

91

00:03:47.090  -->  00:03:49.400
an example what I would consider a bad
92

92

00:03:49.400  -->  00:03:52.100
constructor example, so here you can see
93

93

00:03:52.100  -->  00:03:54.680
we've got three constructors there all
94

94

00:03:54.680  -->  00:03:56.570
three constructors initialized variables
95

95

00:03:56.570  -->  00:03:58.880
but there's repeated code in each
96

96

00:03:58.880  -->  00:04:00.350
constructor as you can see there,
97

97

00:04:00.350  -->  00:04:03.050
so we're initializing variables in each of
98

98

00:04:03.050  -->  00:04:04.850
the constructors with some default
99

99

00:04:04.850  -->  00:04:06.980
values, then you should never write
100

100

00:04:06.980  -->  00:04:09.590
constructors like this, instead you
101

101

00:04:09.590  -->  00:04:10.940
should look at doing it another way,
102

102

00:04:10.940  -->  00:04:12.530
so let's have a look at how to do that
103

103

00:04:12.530  -->  00:04:16.250
by using that this parenthesis call, so
104

104

00:04:16.250  -->  00:04:18.320
this example it's very similar to the
105

105

00:04:18.320  -->  00:04:20.480
example on the previous page, but the
106

106

00:04:20.480  -->  00:04:22.310
difference is that the first constructor
107

107

00:04:22.310  -->  00:04:25.580
calls the second constructor, the second
108

108

00:04:25.580  -->  00:04:27.680
constructor calls the third construct
109

109

00:04:27.680  -->  00:04:29.810
and then the third constructor actually
110

110

00:04:29.810  -->  00:04:32.150
does the initialization of the instance
111

111

00:04:32.150  -->  00:04:34.250
variables. So in other words the third
112

112

00:04:34.250  -->  00:04:36.400
constructor is doing all the work here.
113

113

00:04:36.400  -->  00:04:38.420
So now that we've done this no matter
114

114

00:04:38.420  -->  00:04:41.150
what constructor we call, the variables
115

115

00:04:41.150  -->  00:04:43.190
will always be initialized in the third
116

116

00:04:43.190  -->  00:04:46.070
constructor and only there, so this is
117

117

00:04:46.070  -->  00:04:48.530
known as constructor chaining and what
118

118

00:04:48.530  -->  00:04:49.610
we're doing is we're giving the last
119

119

00:04:49.610  -->  00:04:52.670
constructor the responsibility to do the
120

120

00:04:52.670  -->  00:04:56.770
actual initialization of the instance variables.
121

121

00:04:56.770  -->  00:04:59.660
Alright, so looking at both examples on
122

122

00:04:59.660  -->  00:05:01.930
screen now, so on the left-hand side
123

123

00:05:01.930  -->  00:05:04.040
again this is the bad example of
124

124

00:05:04.040  -->  00:05:05.870
constructors, on the right hand side
125

125

00:05:05.870  -->  00:05:08.210
we've got a good example. So again the
126

126

00:05:08.210  -->  00:05:10.190
problem with the left hand side is the
127

127

00:05:10.190  -->  00:05:13.040
duplicated code, so as you can see all
128

128

00:05:13.040  -->  00:05:14.660
three constructors on the left hand side
129

129

00:05:14.660  -->  00:05:17.150
are initializing the variables, contrast
130

130

00:05:17.150  -->  00:05:18.740
that to the solution on the right hand
131

131

00:05:18.740  -->  00:05:21.350
side, so there we've got one constructor
132

132

00:05:21.350  -->  00:05:23.930
that initializes variables and the other
133

133

00:05:23.930  -->  00:05:25.670
constructors are just calling each other
134

134

00:05:25.670  -->  00:05:28.010
so that ultimately we end up in the
135

135

00:05:28.010  -->  00:05:30.260
third constructor and that's again the
136

136

00:05:30.260  -->  00:05:32.300
constructor chaining so with that
137

137

00:05:32.300  -->  00:05:34.790
constructor chaining, we can and do avoid
138

138

00:05:34.790  -->  00:05:37.270
code duplication and by the way
139

139

00:05:37.270  -->  00:05:39.590
duplicated code can lead to many bugs
140

140

00:05:39.590  -->  00:05:41.780
and a lot more work on your behalf and
141

141

00:05:41.780  -->  00:05:44.030
it's also bad practice as a rule to
142

142

00:05:44.030  -->  00:05:46.040
write duplicate code which of course we
143

143

00:05:46.040  -->  00:05:49.340
did in the bad example. Alright, let's
144

144

00:05:49.340  -->  00:05:50.810
have a quick look at the super
145

145

00:05:50.810  -->  00:05:53.510
parentheses call example, so in this
146

146

00:05:53.510  -->  00:05:56.690
example, we've got a class shape with X Y
147

147

00:05:56.690  -->  00:05:58.880
variables instance variables and the
148

148

00:05:58.880  -->  00:06:02.120
class rectangle that extends shape with
149

149

00:06:02.120  -->  00:06:05.510
variables width and height, so in the
150

150

00:06:05.510  -->  00:06:07.880
rectangle class, the first constructor is
151

151

00:06:07.880  -->  00:06:10.610
calling the second constructor, now the
152

152

00:06:10.610  -->  00:06:13.100
second constructor is calling the parent
153

153

00:06:13.100  -->  00:06:16.130
constructor with parameters x and y.
154

154

00:06:16.130  -->  00:06:18.260
Now, the parent constructor will initialize
155

155

00:06:18.260  -->  00:06:21.050
the X Y variables while the second
156

156

00:06:21.050  -->  00:06:22.910
rectangle constructor will initialize
157

157

00:06:22.910  -->  00:06:26.150
the width and height variables, so as you
158

158

00:06:26.150  -->  00:06:27.590
can see in this code, we've got both the
159

159

00:06:27.590  -->  00:06:30.170
super parenthesis and this parenthesis
160

160

00:06:30.170  -->  00:06:33.410
calls. Now you may want to watch this
161

161

00:06:33.410  -->  00:06:35.540
video a few times or you may also want
162

162

00:06:35.540  -->  00:06:37.730
to then continue through to the rest of
163

163

00:06:37.730  -->  00:06:39.919
this section and then come back to this
164

164

00:06:39.919  -->  00:06:41.240
one to see if that actually makes sense.
165

165

00:06:41.240  -->  00:06:43.370
It's very important as a Java
166

166

00:06:43.370  -->  00:06:44.960
developer to understand the differences
167

167

00:06:44.960  -->  00:06:47.120
with these calls to be able to use them
168

168

00:06:47.120  -->  00:06:49.759
properly. Alright, so let's move on now
169

169

00:06:49.759  -->  00:06:52.630
to the next video.
