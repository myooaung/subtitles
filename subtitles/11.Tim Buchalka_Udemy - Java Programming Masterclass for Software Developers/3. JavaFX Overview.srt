1
1

00:00:04,670  -->  00:00:06,650
All right so we're at the stage now where
2

2

00:00:06,650  -->  00:00:08,600
we've created our first project, we've
3

3

00:00:08,600  -->  00:00:10,549
configured it to work with either JDK
4

4

00:00:10,549  -->  00:00:13,250
we've or JDK 11 so let's start talking more
5

5

00:00:13,250  -->  00:00:14,480
about JavaFX.
6

6

00:00:14,480  -->  00:00:17,599
So JavaFX was designed with the MVC
7

7

00:00:17,599  -->  00:00:20,480
or Model-View-Controller pattern in mind.
8

8

00:00:20,480  -->  00:00:22,730
In a nutshell this pattern keeps the code
9

9

00:00:22,730  -->  00:00:24,320
that handles an application's data
10

10

00:00:24,320  -->  00:00:27,740
separate from the UI code. Because of
11

11

00:00:27,740  -->  00:00:29,359
this, when we're using the MVC pattern,
12

12

00:00:29,359  -->  00:00:31,880
we shouldn't mix the code that deals
13

13

00:00:31,880  -->  00:00:33,470
with the UI and the code that
14

14

00:00:33,470  -->  00:00:35,989
manipulates the application data in the
15

15

00:00:35,989  -->  00:00:38,600
same class. The controller is sort of
16

16

00:00:38,600  -->  00:00:40,820
a middleman between the UI and the data.
17

17

00:00:40,820  -->  00:00:43,070
Now when working with Java effects the
18

18

00:00:43,070  -->  00:00:45,019
model corresponds to the application's
19

19

00:00:45,019  -->  00:00:47,900
data model, the view is the FXML and the
20

20

00:00:47,900  -->  00:00:49,549
controller is the code that determines
21

21

00:00:49,549  -->  00:00:51,559
what happens when the user interacts
22

22

00:00:51,559  -->  00:00:54,409
with the UI. Essentially the controller
23

23

00:00:54,409  -->  00:00:56,629
handles events which we'll cover in a
24

24

00:00:56,629  -->  00:00:59,239
later video. Now that's a bit of a
25

25

00:00:59,239  -->  00:01:01,640
simplification of the MVC pattern but
26

26

00:01:01,640  -->  00:01:03,019
it's enough for us to understand why
27

27

00:01:03,019  -->  00:01:05,840
IntelliJ generates a controller dot Java
28

28

00:01:05,840  -->  00:01:08,840
file for us. If I open up the project,
29

29

00:01:08,840  -->  00:01:11,060
you can see we've got a controller, a Main
30

30

00:01:11,060  -->  00:01:14,600
sample dot FXML as well. I'm gonna close
31

31

00:01:14,600  -->  00:01:16,219
down the module-info.java because we
32

32

00:01:16,219  -->  00:01:18,469
won't be needing that anymore and just a
33

33

00:01:18,469  -->  00:01:20,090
note to keep in mind that Java effects
34

34

00:01:20,090  -->  00:01:22,039
doesn't actually enforce the MVC pattern
35

35

00:01:22,039  -->  00:01:25,250
but it is a good practice to follow.
36

36

00:01:25,250  -->  00:01:27,109
So for this simple hello world
37

37

00:01:27,109  -->  00:01:28,969
application that we are going to generate
38

38

00:01:28,969  -->  00:01:31,310
there isn't any data. Also the code generated
39

39

00:01:31,310  -->  00:01:33,799
by IntelliJ doesn't create any Java
40

40

00:01:33,799  -->  00:01:36,350
effects UI controls apart from the usual
41

41

00:01:36,350  -->  00:01:38,270
Windows controls, the minimize, maximize
42

42

00:01:38,270  -->  00:01:40,609
and close there's nothing to interact
43

43

00:01:40,609  -->  00:01:42,229
with and so therefore if we have a look
44

44

00:01:42,229  -->  00:01:43,939
at the control of a Java file
45

45

00:01:43,939  -->  00:01:46,159
it's actually empty. But going back to the
46

46

00:01:46,159  -->  00:01:48,770
main dot Java file the structure should
47

47

00:01:48,770  -->  00:01:50,929
look familiar because it's still a Java
48

48

00:01:50,929  -->  00:01:53,270
class just like any other. Firstly they
49

49

00:01:53,270  -->  00:01:55,880
were on line 9. We can see that the class
50

50

00:01:55,880  -->  00:01:58,219
extends application. An application
51

51

00:01:58,219  -->  00:01:59,869
actually comes from javafx dot
52

52

00:01:59,869  -->  00:02:02,479
application. JavaFX applications must
53

53

00:02:02,479  -->  00:02:03,829
have a class that extends this
54

54

00:02:03,829  -->  00:02:06,139
application class and this class will be
55

55

00:02:06,139  -->  00:02:08,690
the entry point for the application. The
56

56

00:02:08,690  -->  00:02:10,280
application class manages the
57

57

00:02:10,280  -->  00:02:13,670
lifecycle of a JavaFX application.
58

58

00:02:13,670  -->  00:02:15,830
The methods in the application class that
59

59

00:02:15,830  -->  00:02:17,930
we really care most about are the init
60

60

00:02:17,930  -->  00:02:18,560
method,
61

61

00:02:18,560  -->  00:02:21,530
the start method and the stop method. When
62

62

00:02:21,530  -->  00:02:23,810
we run the application, application dot
63

63

00:02:23,810  -->  00:02:25,970
launch will be called from the main
64

64

00:02:25,970  -->  00:02:28,280
method. This method launches the JavaFX
65

65

00:02:28,280  -->  00:02:30,800
application and doesn't return until the
66

66

00:02:30,800  -->  00:02:33,770
application has exited. When a Java
67

67

00:02:33,770  -->  00:02:35,990
FX application is launched the
68

68

00:02:35,990  -->  00:02:39,050
init method runs first. In the application
69

69

00:02:39,050  -->  00:02:41,420
class, this method is empty so unless we
70

70

00:02:41,420  -->  00:02:43,610
override it, it won't do anything. The
71

71

00:02:43,610  -->  00:02:45,770
start method runs right after the init
72

72

00:02:45,770  -->  00:02:47,780
method. We have to override this class
73

73

00:02:47,780  -->  00:02:50,870
because start is an abstract method
74

74

00:02:50,870  -->  00:02:53,570
in the application class. We create the UI
75

75

00:02:53,570  -->  00:02:55,700
in the start method as you'll see in a
76

76

00:02:55,700  -->  00:02:56,120
moment.
77

77

00:02:56,120  -->  00:02:58,070
Now when the application finishes which
78

78

00:02:58,070  -->  00:02:59,810
usually happens because the users closed
79

79

00:02:59,810  -->  00:03:03,020
the applications main window, the stop
80

80

00:03:03,020  -->  00:03:04,760
method runs just like the init
81

81

00:03:04,760  -->  00:03:07,489
method. This method is empty in the application
82

82

00:03:07,489  -->  00:03:09,920
class so unless we override it, it won't
83

83

00:03:09,920  -->  00:03:12,230
do anything. So to start off though let's
84

84

00:03:12,230  -->  00:03:13,880
start looking at this start method that
85

85

00:03:13,880  -->  00:03:15,800
IntelliJ generated starting on line 12.
86

86

00:03:15,800  -->  00:03:18,410
This method takes a stage parameter as
87

87

00:03:18,410  -->  00:03:20,660
you can see. So a stage is a top-level
88

88

00:03:20,660  -->  00:03:23,060
JavaFX container that extends
89

89

00:03:23,060  -->  00:03:25,070
the window class so essentially it's a main
90

90

00:03:25,070  -->  00:03:28,370
window . The JavaFX runtime constructs
91

91

00:03:28,370  -->  00:03:31,010
the initial stage and passes it into the
92

92

00:03:31,010  -->  00:03:32,870
start method. We can't create other
93

93

00:03:32,870  -->  00:03:34,610
stages but most applications will only
94

94

00:03:34,610  -->  00:03:37,340
have one top-level window. Too many
95

95

00:03:37,340  -->  00:03:38,750
windows can lead to a bad user
96

96

00:03:38,750  -->  00:03:40,880
experience. In this version of Java
97

97

00:03:40,880  -->  00:03:42,860
FX, dialogues are presented within a
98

98

00:03:42,860  -->  00:03:45,980
stage but we don't explicitly create the
99

99

00:03:45,980  -->  00:03:48,470
stage. We use the dialog class which
100

100

00:03:48,470  -->  00:03:50,989
wraps the dialogue into a stage forest.
101

101

00:03:50,989  -->  00:03:53,269
The Java FX developers have said
102

102

00:03:53,269  -->  00:03:55,070
that in a future version of Java FX
103

103

00:03:55,070  -->  00:03:57,260
they may provide a lightweight container
104

104

00:03:57,260  -->  00:03:59,510
for dialogues rather than using a stage.
105

105

00:03:59,510  -->  00:04:01,790
So note that the dialog class was
106

106

00:04:01,790  -->  00:04:04,400
introduced in Java version 8u40.
107

107

00:04:04,400  -->  00:04:07,100
Before then, creating dialogues was a
108

108

00:04:07,100  -->  00:04:07,790
real pain.
109

109

00:04:07,790  -->  00:04:09,860
So we'll probably use the dialog class
110

110

00:04:09,860  -->  00:04:11,870
at some point but if anyone's got a
111

111

00:04:11,870  -->  00:04:13,549
problem compiling classes that reference
112

112

00:04:13,549  -->  00:04:15,860
dialogue most likely it'll be because
113

113

00:04:15,860  -->  00:04:18,410
they're using a JDK version earlier
114

114

00:04:18,410  -->  00:04:20,720
than supported, the dialog class
115

115

00:04:20,720  -->  00:04:22,850
which was again, version 8. But in this case
116

116

00:04:22,850  -->  00:04:24,500
if you're using JDK 11 you really shouldn't
117

117

00:04:24,500  -->  00:04:27,050
have any problems. Alright so that's
118

118

00:04:27,050  -->  00:04:30,169
the first law, talking about the method
119

119

00:04:30,169  -->  00:04:31,740
signature, the parameter
120

120

00:04:31,740  -->  00:04:35,400
state, the next line of code line 13 that
121

121

00:04:35,400  -->  00:04:38,940
loads the UI from the FXML file. So it's
122

122

00:04:38,940  -->  00:04:40,530
probably a good opportunity now to have
123

123

00:04:40,530  -->  00:04:42,210
a look at this FXML file and this
124

124

00:04:42,210  -->  00:04:47,430
is the sample dot FXML file. So FXML
125

125

00:04:47,430  -->  00:04:50,160
is a flavor of XML. If you're familiar with
126

126

00:04:50,160  -->  00:04:52,770
the AirDraw UI programming, FXML
127

127

00:04:52,770  -->  00:04:54,330
will be old hat to you. But in this
128

128

00:04:54,330  -->  00:04:56,190
particular application this default one,
129

129

00:04:56,190  -->  00:04:58,259
all we have is a grid pane which is one
130

130

00:04:58,259  -->  00:05:01,380
of the JavaFX layouts. The FX colon
131

131

00:05:01,380  -->  00:05:04,139
controller attribute tells the runtime
132

132

00:05:04,139  -->  00:05:06,360
which class is the controller for this
133

133

00:05:06,360  -->  00:05:08,400
window. You can see there, there's package
134

134

00:05:08,400  -->  00:05:10,949
name and dot class name so sample being
135

135

00:05:10,949  -->  00:05:13,050
the package name controller being our
136

136

00:05:13,050  -->  00:05:15,810
controller class. The GridPane doesn't
137

137

00:05:15,810  -->  00:05:17,370
have any child elements and so when we
138

138

00:05:17,370  -->  00:05:20,130
run the application as you saw it in a
139

139

00:05:20,130  -->  00:05:22,710
previous video, the window's going to be
140

140

00:05:22,710  -->  00:05:25,949
empty and it's empty here now.
141

141

00:05:25,949  -->  00:05:28,889
Now depending on your version of the
142

142

00:05:28,889  -->  00:05:31,560
JDK, you'll find that there's probably a few
143

143

00:05:31,560  -->  00:05:34,380
leftover imports that aren't used .
144

144

00:05:34,380  -->  00:05:35,729
For some reason, they're generated with those
145

145

00:05:35,729  -->  00:05:37,560
unnecessary imports. Right now we only
146

146

00:05:37,560  -->  00:05:39,840
need the GridPane import but later
147

147

00:05:39,840  -->  00:05:42,419
on we'll be using a label as well
148

148

00:05:42,419  -->  00:05:43,500
but I'll leave them there for now but you
149

149

00:05:43,500  -->  00:05:44,639
could actually delete them if you wanted
150

150

00:05:44,639  -->  00:05:49,979
to. So going back to Main dot Java, when we
151

151

00:05:49,979  -->  00:05:52,020
load the ethics of a file which we do on
152

152

00:05:52,020  -->  00:05:54,690
line 13 all of the UI objects defined in
153

153

00:05:54,690  -->  00:05:57,150
the file are constructed so we'll come
154

154

00:05:57,150  -->  00:05:58,919
back to the parent root part of the code
155

155

00:05:58,919  -->  00:06:02,610
in a moment but moving on to line 14,
156

156

00:06:02,610  -->  00:06:05,310
we set the title of the stage. Since the
157

157

00:06:05,310  -->  00:06:07,259
window class is the parent of the stage
158

158

00:06:07,259  -->  00:06:09,719
class and as we learned previously the
159

159

00:06:09,719  -->  00:06:11,490
stage is the top-level Java FX
160

160

00:06:11,490  -->  00:06:13,440
container this essentially means
161

161

00:06:13,440  -->  00:06:15,180
that the window title will be set to in this
162

162

00:06:15,180  -->  00:06:16,650
case "Hello World".
163

163

00:06:16,650  -->  00:06:19,560
In line 15, we're setting the stage as
164

164

00:06:19,560  -->  00:06:21,960
Scene. If you haven't already guessed, the
165

165

00:06:21,960  -->  00:06:23,550
Java FX developers we're going for a
166

166

00:06:23,550  -->  00:06:26,400
theater metaphor. Each stage requires a
167

167

00:06:26,400  -->  00:06:28,889
scene and backing each scene is a scene
168

168

00:06:28,889  -->  00:06:31,740
graph a tree which each node corresponds
169

169

00:06:31,740  -->  00:06:34,229
to a UI control or an area of the scene,
170

170

00:06:34,229  -->  00:06:36,690
for example a rectangle. So let's take
171

171

00:06:36,690  -->  00:06:39,120
a look at this line, line 15 in more detail.
172

172

00:06:39,120  -->  00:06:42,449
When we load at the FXML we assign it
173

173

00:06:42,449  -->  00:06:44,760
to a variable of type parent
174

174

00:06:44,760  -->  00:06:47,550
with the name root. The parent class
175

175

00:06:47,550  -->  00:06:50,160
descends directly from the node class
176

176

00:06:50,160  -->  00:06:52,560
which is in taking this from the Java
177

177

00:06:52,560  -->  00:06:55,590
dot the base class for scene graph nodes.
178

178

00:06:55,590  -->  00:06:58,200
Nodes that descend from parent can
179

179

00:06:58,200  -->  00:07:00,870
have children in the scene graph. Now for the
180

180

00:07:00,870  -->  00:07:02,940
Hello World application, the top level
181

181

00:07:02,940  -->  00:07:05,130
and in fact only node is the GridPane.
182

182

00:07:05,130  -->  00:07:07,950
So the GridPane node will be the root
183

183

00:07:07,950  -->  00:07:10,380
of the scene graph and that's what was
184

184

00:07:10,380  -->  00:07:12,750
returned from the FXMLLoader dot
185

185

00:07:12,750  -->  00:07:16,080
load call on line 13. When we construct
186

186

00:07:16,080  -->  00:07:18,270
the scene we have to pass in the root of
187

187

00:07:18,270  -->  00:07:20,120
the scene graph that will back the scene
188

188

00:07:20,120  -->  00:07:22,920
which we do here. We're also setting
189

189

00:07:22,920  -->  00:07:25,050
the width and height of the scene which in
190

190

00:07:25,050  -->  00:07:26,430
turn will become the width and height
191

191

00:07:26,430  -->  00:07:28,830
of the main window. So why do we have to
192

192

00:07:28,830  -->  00:07:31,200
have a scene at a stage? Well let's go
193

193

00:07:31,200  -->  00:07:33,630
back to the theater metaphor and imagine
194

194

00:07:33,630  -->  00:07:35,640
that you're watching a play. The curtain
195

195

00:07:35,640  -->  00:07:37,230
rises and we watched the first scene
196

196

00:07:37,230  -->  00:07:38,940
then the curtain falls
197

197

00:07:38,940  -->  00:07:40,710
stagehands run around and change the
198

198

00:07:40,710  -->  00:07:42,510
furniture and backdrop and then the
199

199

00:07:42,510  -->  00:07:44,670
curtain rises again. We may see
200

200

00:07:44,670  -->  00:07:46,020
a different looking set of different
201

201

00:07:46,020  -->  00:07:49,050
actors but it's still the same stage.
202

202

00:07:49,050  -->  00:07:51,090
So if you go back to JavaFX remember
203

203

00:07:51,090  -->  00:07:53,070
that a stage corresponds to a top level
204

204

00:07:53,070  -->  00:07:55,800
UI container like a window and a
205

205

00:07:55,800  -->  00:07:58,350
scene is backed by a scene graph
206

206

00:07:58,350  -->  00:08:00,930
which contains the UI nodes. If you want to
207

207

00:08:00,930  -->  00:08:02,550
change what's shown in a stage,
208

208

00:08:02,550  -->  00:08:04,560
the window all we have to do is change the
209

209

00:08:04,560  -->  00:08:06,990
scene, the UI. We don't have to construct
210

210

00:08:06,990  -->  00:08:09,510
a new stage object. In practice we would
211

211

00:08:09,510  -->  00:08:11,700
load a different FXML file into a
212

212

00:08:11,700  -->  00:08:13,970
new scene and then call stage dot set scene.
213

213

00:08:13,970  -->  00:08:16,710
For example if we had a wizard so we
214

214

00:08:16,710  -->  00:08:18,540
want the user to step through using next
215

215

00:08:18,540  -->  00:08:20,340
and previous buttons, we could use the
216

216

00:08:20,340  -->  00:08:22,650
same window stage and just change the
217

217

00:08:22,650  -->  00:08:24,450
scene everytime they clicked next
218

218

00:08:24,450  -->  00:08:26,460
or previous or when we wanted to change
219

219

00:08:26,460  -->  00:08:28,350
parts of the UI in response to a user
220

220

00:08:28,350  -->  00:08:30,510
action we don't have to remove UI
221

221

00:08:30,510  -->  00:08:32,190
components or make them invisible
222

222

00:08:32,190  -->  00:08:34,729
and add new ones, we just switch the scene.
223

223

00:08:34,729  -->  00:08:36,900
Sometimes it makes more sense to just hide
224

224

00:08:36,900  -->  00:08:38,460
a few controls or something like that
225

225

00:08:38,460  -->  00:08:40,410
but other times switching the entire
226

226

00:08:40,410  -->  00:08:42,690
scene is the better option. It will
227

227

00:08:42,690  -->  00:08:43,919
depend on what you want to do.
228

228

00:08:43,919  -->  00:08:45,990
Essentially those scenes make it easy
229

229

00:08:45,990  -->  00:08:49,380
to reuse a container. Alright so back to our
230

230

00:08:49,380  -->  00:08:51,390
Main Java class, at this point we've
231

231

00:08:51,390  -->  00:08:53,580
instantiated all the UI objects
232

232

00:08:53,580  -->  00:08:56,250
associated with our scene and we've set
233

233

00:08:56,250  -->  00:08:58,560
the stage so we're ready now to show the
234

234

00:08:58,560  -->  00:09:01,380
UI and we do this by calling the show
235

235

00:09:01,380  -->  00:09:03,029
method on our stage and we're doing that
236

236

00:09:03,029  -->  00:09:05,910
on line 16. From the code of the FXML
237

237

00:09:05,910  -->  00:09:07,710
file we know that when we run the
238

238

00:09:07,710  -->  00:09:09,300
application we should see an empty
239

239

00:09:09,300  -->  00:09:12,000
window with a title Hello World. So we'll
240

240

00:09:12,000  -->  00:09:13,170
just run the application again and
241

241

00:09:13,170  -->  00:09:17,520
confirm that. No surprises, empty window
242

242

00:09:17,520  -->  00:09:19,140
and we can see Hello World is the title
243

243

00:09:19,140  -->  00:09:21,330
on the top of the window. So as you can
244

244

00:09:21,330  -->  00:09:23,100
see the stage cast provides all the
245

245

00:09:23,100  -->  00:09:25,170
window decorations such as close,
246

246

00:09:25,170  -->  00:09:30,360
resize and the minimize button. All right
247

247

00:09:30,360  -->  00:09:31,830
so that's a bit of an overview of how
248

248

00:09:31,830  -->  00:09:34,230
Java FX works. Let's finish the video
249

249

00:09:34,230  -->  00:09:36,300
here and in the next one we're going to
250

250

00:09:36,300  -->  00:09:38,370
start making some modifications to our
251

251

00:09:38,370  -->  00:09:39,570
application. We're going to change the
252

252

00:09:39,570  -->  00:09:41,880
title and look at how to code some of
253

253

00:09:41,880  -->  00:09:43,800
this stuff manually as opposed to
254

254

00:09:43,800  -->  00:09:45,630
getting it done automatically for us. So
255

255

00:09:45,630  -->  00:09:48,740
we'll see you in the next video.
