1
1

00:00:04,770  -->  00:00:05,770
- [Tim] So in the last video,
2

2

00:00:05,770  -->  00:00:07,850
we ended up talking about the file class
3

3

00:00:07,850  -->  00:00:09,530
and some of the limitations.
4

4

00:00:09,530  -->  00:00:10,360
So in this video,
5

5

00:00:10,360  -->  00:00:14,610
we're gonna talk about how
java.nio solves these problems
6

6

00:00:14,610  -->  00:00:16,560
and also how it splits the functionality
7

7

00:00:16,560  -->  00:00:18,240
that was in the file class
8

8

00:00:18,240  -->  00:00:20,880
into several classes and interfaces.
9

9

00:00:20,880  -->  00:00:24,010
Now, the java.nio.file
class contains methods
10

10

00:00:24,010  -->  00:00:25,650
for pointing to files
11

11

00:00:25,650  -->  00:00:29,650
and also for performing
file operations like delete.
12

12

00:00:29,650  -->  00:00:34,140
Now in java.nio, the path
interface sticks to file paths.
13

13

00:00:34,140  -->  00:00:36,280
So file operations have been moved
14

14

00:00:36,280  -->  00:00:39,030
to the java.nio.file.files class.
15

15

00:00:40,840  -->  00:00:43,190
Now we saw this class in an earlier video
16

16

00:00:43,190  -->  00:00:45,180
when we used it to read text files,
17

17

00:00:45,180  -->  00:00:46,520
but now we're gonna actually look at it
18

18

00:00:46,520  -->  00:00:48,560
at a little bit more detail.
19

19

00:00:48,560  -->  00:00:50,940
So the files class contains
methods that perform
20

20

00:00:50,940  -->  00:00:55,670
a file system operation such
as copy, move, delete, etc.
21

21

00:00:55,670  -->  00:00:57,550
Now all its methods are static
22

22

00:00:57,550  -->  00:00:59,160
so you don't need an instance of the class
23

23

00:00:59,160  -->  00:01:00,780
to call its methods.
24

24

00:01:00,780  -->  00:01:02,980
So we're gonna start off by
looking at how we can check
25

25

00:01:02,980  -->  00:01:04,860
whether a file or directory exists
26

26

00:01:04,860  -->  00:01:07,460
which you may wanna do before
you attempt other operations
27

27

00:01:07,460  -->  00:01:09,710
on that particular file or directory.
28

28

00:01:09,710  -->  00:01:12,950
Now it is important to understand
that the path interface
29

29

00:01:12,950  -->  00:01:15,630
doesn't actually know anything
about the file system.
30

30

00:01:15,630  -->  00:01:18,190
It merely understands paths.
31

31

00:01:18,190  -->  00:01:20,990
So in a previous video,
we got an exception
32

32

00:01:20,990  -->  00:01:23,390
when we deliberately didn't
pass enough information
33

33

00:01:23,390  -->  00:01:27,720
to build a path to the
subdirectory file.text
34

34

00:01:27,720  -->  00:01:32,010
and if you recall, we saw that
the exception didn't occur
35

35

00:01:32,010  -->  00:01:33,450
when we created the path,
36

36

00:01:33,450  -->  00:01:36,480
but rather when we tried to
create the BufferedReader.
37

37

00:01:36,480  -->  00:01:38,680
So what this demonstrates
is that you can successfully
38

38

00:01:38,680  -->  00:01:41,910
create paths to files
that don't actually exist.
39

39

00:01:41,910  -->  00:01:44,360
So to confirm that, let's
actually give that a go.
40

40

00:01:44,360  -->  00:01:47,680
So we're gonna create a path
to a file that doesn't exist
41

41

00:01:47,680  -->  00:01:51,260
so I'm gonna start
typing Path path3 equals
42

42

00:01:52,520  -->  00:01:55,020
FileSystems.getDefault.getPath
43

43

00:01:58,770  -->  00:02:01,580
and we're gonna put a file
that clearly doesn't exist
44

44

00:02:01,580  -->  00:02:03,750
so thisfiledoesntexist.txt
45

45

00:02:05,730  -->  00:02:07,230
and clearly that doesn't exist over here
46

46

00:02:07,230  -->  00:02:10,930
because we're gonna be using
the IntelliJ project by default
47

47

00:02:10,930  -->  00:02:14,050
and then we're going to
print out a message there
48

48

00:02:14,050  -->  00:02:15,800
path3.toAbsolutePath.
49

49

00:02:18,030  -->  00:02:22,200
All right, so we'll just run
this and see what happens.
50

50

00:02:23,350  -->  00:02:26,530
So we can see here we got the output
51

51

00:02:26,530  -->  00:02:27,750
so happily it's printing out
52

52

00:02:27,750  -->  00:02:30,550
the absolute path to a
file that doesn't exist.
53

53

00:02:30,550  -->  00:02:33,960
Now the java.nio.file
class operates the same way
54

54

00:02:33,960  -->  00:02:35,050
by the way,
55

55

00:02:35,050  -->  00:02:37,940
until you actually try to
access a file with a path,
56

56

00:02:37,940  -->  00:02:40,260
and file is actually abstract.
57

57

00:02:40,260  -->  00:02:41,370
Now in our application,
58

58

00:02:41,370  -->  00:02:44,090
the rubber only really meets the road
59

59

00:02:44,090  -->  00:02:46,920
when we try to create a
BufferedReader using the path
60

60

00:02:46,920  -->  00:02:50,420
and that's why the exception
is thrown at that point.
61

61

00:02:50,420  -->  00:02:51,920
Only then does it matter
62

62

00:02:51,920  -->  00:02:55,440
if the file pointed to by
the path actually exists.
63

63

00:02:55,440  -->  00:02:57,550
Now of course if you're creating a file,
64

64

00:02:57,550  -->  00:02:59,890
then it doesn't matter if it does exist,
65

65

00:02:59,890  -->  00:03:02,660
but to create a file with
a directory you specify
66

66

00:03:02,660  -->  00:03:04,130
has to exist.
67

67

00:03:04,130  -->  00:03:07,470
To confirm that, let's actually
try the following code.
68

68

00:03:07,470  -->  00:03:11,470
So I'm gonna type in Path
path4 equals Paths.get
69

69

00:03:14,410  -->  00:03:16,820
and we're gonna enter a path
that we know doesn't exist
70

70

00:03:16,820  -->  00:03:19,680
so on my Mac I'm going
to put a fictitious path
71

71

00:03:19,680  -->  00:03:22,930
Volumes/Test/ING,
72

72

00:03:23,950  -->  00:03:25,660
something clearly that doesn't exist.
73

73

00:03:25,660  -->  00:03:26,500
And if we wanted to
74

74

00:03:26,500  -->  00:03:30,660
we could add in a second
part of that path, abcdf,
75

75

00:03:32,410  -->  00:03:35,400
and we'll finish with a
filename whatever.txt.
76

76

00:03:35,400  -->  00:03:36,370
Now if you're on a PC,
77

77

00:03:36,370  -->  00:03:39,000
you might wanna do something instead like
78

78

00:03:39,000  -->  00:03:43,160
%://, abddf and whatever.txt.
79

79

00:03:46,600  -->  00:03:49,780
Basically you wanna specify
a series of parameters
80

80

00:03:49,780  -->  00:03:51,870
to make sure that we're pointing to a path
81

81

00:03:51,870  -->  00:03:53,680
that doesn't exist.
82

82

00:03:53,680  -->  00:03:55,830
All right, once we do that,
we're going to just output it
83

83

00:03:55,830  -->  00:03:58,910
so output path4.toAbsolutePath again.
84

84

00:04:02,460  -->  00:04:03,890
And obviously we're not
doing anything different
85

85

00:04:03,890  -->  00:04:06,760
to the previous example
other than specify the path
86

86

00:04:06,760  -->  00:04:07,770
so we should just get it
87

87

00:04:07,770  -->  00:04:10,590
quite happily printing out that path
88

88

00:04:10,590  -->  00:04:13,690
as you can see it's doing down here.
89

89

00:04:13,690  -->  00:04:15,640
So in other words, no
exceptions are thrown.
90

90

00:04:15,640  -->  00:04:18,350
Now because of this, depending
on what you wanna do,
91

91

00:04:18,350  -->  00:04:19,690
it can well be a good idea
92

92

00:04:19,690  -->  00:04:22,300
to check for the existence
of a file or directory
93

93

00:04:22,300  -->  00:04:24,240
before you try to use it.
94

94

00:04:24,240  -->  00:04:25,090
Now let's check to see
95

95

00:04:25,090  -->  00:04:28,890
that the files directory actually exists.
96

96

00:04:28,890  -->  00:04:32,920
So I can do that by typing filePath equals
97

97

00:04:32,920  -->  00:04:35,330
FileSytems.getDefault.getPath
98

98

00:04:37,530  -->  00:04:39,420
and we're gonna type in files
99

99

00:04:39,420  -->  00:04:42,190
and we know here that
files is the subfolder
100

100

00:04:42,190  -->  00:04:45,670
that we created in a previous video
101

101

00:04:45,670  -->  00:04:47,210
and let's actually see whether it exists.
102

102

00:04:47,210  -->  00:04:51,380
We're gonna print out Exists
= + File.exists(filePath).
103

103

00:04:57,960  -->  00:05:00,370
We're gonna actually run that
104

104

00:05:02,700  -->  00:05:05,110
and you can see we've
got Exists = true there
105

105

00:05:05,110  -->  00:05:06,550
so it's telling us that that folder
106

106

00:05:06,550  -->  00:05:07,850
or that directory rather,
107

107

00:05:07,850  -->  00:05:11,570
the files directory or the
subdirectory does actually exist.
108

108

00:05:11,570  -->  00:05:13,890
So let's actually check
our bogus folder here,
109

109

00:05:13,890  -->  00:05:15,170
either one of those.
110

110

00:05:15,170  -->  00:05:17,710
We'll actually select the second one.
111

111

00:05:17,710  -->  00:05:19,370
We'll actually select the file there,
112

112

00:05:19,370  -->  00:05:21,110
but it could be a folder
113

113

00:05:21,110  -->  00:05:25,270
and we can do print out Exists
= + Files.exists(path4).
114

114

00:05:31,630  -->  00:05:33,720
So if we try that, we should get a false
115

115

00:05:33,720  -->  00:05:36,100
because that path, whatever
we've chosen there,
116

116

00:05:36,100  -->  00:05:37,200
shouldn't exist.
117

117

00:05:37,200  -->  00:05:39,960
We made sure earlier
that it doesn't exist.
118

118

00:05:39,960  -->  00:05:43,860
And we get Exists = false
there which is what we expect.
119

119

00:05:43,860  -->  00:05:46,730
Now this exists method
has an overloaded method
120

120

00:05:46,730  -->  00:05:49,000
that accepts a second parameter
121

121

00:05:49,000  -->  00:05:52,340
that specifies how you
wanna handle symbolic links.
122

122

00:05:52,340  -->  00:05:54,610
So you can choose to follow
them or not follow them.
123

123

00:05:54,610  -->  00:05:56,310
By default though, they're followed.
124

124

00:05:56,310  -->  00:05:57,650
And if they're unfollowed,
125

125

00:05:57,650  -->  00:05:59,740
then if the path contains
the symbolic link
126

126

00:05:59,740  -->  00:06:01,810
that points to an existing file,
127

127

00:06:01,810  -->  00:06:03,790
the method will return false.
128

128

00:06:03,790  -->  00:06:06,660
And there's also a files.notExist method
129

129

00:06:06,660  -->  00:06:10,170
which returns true when the
file or directory pointed to
130

130

00:06:10,170  -->  00:06:12,610
by the path doesn't exist.
131

131

00:06:12,610  -->  00:06:14,230
Now in a real world application,
132

132

00:06:14,230  -->  00:06:16,240
you could check for the path's permission
133

133

00:06:16,240  -->  00:06:17,820
in the print file method
134

134

00:06:17,820  -->  00:06:20,290
and throw an exception
if the file doesn't exist
135

135

00:06:20,290  -->  00:06:22,890
or perhaps just let the
IO exception be thrown
136

136

00:06:22,890  -->  00:06:25,500
when you try to create the BufferedReader.
137

137

00:06:25,500  -->  00:06:27,350
Now even if a file exists of course,
138

138

00:06:27,350  -->  00:06:30,900
your application may not
have permission to use it,
139

139

00:06:30,900  -->  00:06:32,050
but you can actually check that
140

140

00:06:32,050  -->  00:06:34,480
by using the files.isReadable method,
141

141

00:06:34,480  -->  00:06:36,490
the files.isWritable method,
142

142

00:06:36,490  -->  00:06:39,350
and the files.isExecutable method.
143

143

00:06:39,350  -->  00:06:42,350
All right, so let's move on
now on how to copy a file.
144

144

00:06:42,350  -->  00:06:47,200
So we've set up a folder
previously that contains that file.
145

145

00:06:47,200  -->  00:06:49,750
Now let's actually
create another folder now
146

146

00:06:49,750  -->  00:06:51,400
that's got a few other directories
147

147

00:06:51,400  -->  00:06:54,090
and the folder structure
that we're trying to create
148

148

00:06:54,090  -->  00:06:56,780
should look something like this.
149

149

00:06:56,780  -->  00:06:58,090
All right, so this is the folder structure
150

150

00:06:58,090  -->  00:06:59,210
that I'm about to create.
151

151

00:06:59,210  -->  00:07:03,440
You can see we've got an
example subfolder Dir1, Dir2,
152

152

00:07:03,440  -->  00:07:05,020
and we've got a Dir3 here.
153

153

00:07:05,020  -->  00:07:08,170
We've got various files in
each one of those structures.
154

154

00:07:08,170  -->  00:07:09,230
So that's the folder structure
155

155

00:07:09,230  -->  00:07:10,140
we're going to try and create.
156

156

00:07:10,140  -->  00:07:14,610
You'll see me creating that
when we go back to IntelliJ.
157

157

00:07:14,610  -->  00:07:15,770
All right, so let's go ahead
158

158

00:07:15,770  -->  00:07:19,090
and we'll start by creating
that new directory.
159

159

00:07:19,090  -->  00:07:22,920
I'm gonna call that
Examples with a capital E.
160

160

00:07:25,660  -->  00:07:27,110
Then within the Examples folder,
161

161

00:07:27,110  -->  00:07:28,850
we wanna create two directories
162

162

00:07:28,850  -->  00:07:30,850
so it's going to be Dir1
163

163

00:07:35,460  -->  00:07:36,630
and also Dir2.
164

164

00:07:41,390  -->  00:07:43,480
Then in the Dir2 folder,
165

165

00:07:43,480  -->  00:07:46,900
we're going to have a Dir3 folder like so
166

166

00:07:51,260  -->  00:07:54,220
and then we need some files
in each one of those folders.
167

167

00:07:54,220  -->  00:07:56,420
So I'm just gonna take a copy of that
168

168

00:07:56,420  -->  00:07:59,370
and paste it into the first folder,
169

169

00:07:59,370  -->  00:08:03,530
but I'm actually change the
name and call it file1.txt.
170

170

00:08:04,840  -->  00:08:06,240
Then we'll take a copy of that
171

171

00:08:06,240  -->  00:08:08,300
and that file also needs to exist
172

172

00:08:08,300  -->  00:08:10,630
in the Dir2 and Dir3 folders
173

173

00:08:12,300  -->  00:08:16,980
so Dir2 I'm gonna paste it
into there, same filename,
174

174

00:08:16,980  -->  00:08:18,480
and also the Dir3,
175

175

00:08:19,690  -->  00:08:21,160
paste it in there.
176

176

00:08:21,160  -->  00:08:23,370
And we also want that file to appear
177

177

00:08:23,370  -->  00:08:24,990
in the top level Examples folder
178

178

00:08:24,990  -->  00:08:27,250
so I'm gonna paste it in there.
179

179

00:08:27,250  -->  00:08:31,540
All right, so we've got
file.txt in the Examples folder,
180

180

00:08:31,540  -->  00:08:35,290
in the Dir1, in the
Dir2, as well as the Dir3
181

181

00:08:36,710  -->  00:08:39,540
and let's take a copy of the file1
182

182

00:08:40,730  -->  00:08:43,980
and we're gonna call this one file2.txt
183

183

00:08:45,490  -->  00:08:49,030
and we're gonna copy
that into the Dir3 folder
184

184

00:08:49,030  -->  00:08:51,260
as well as the Dir2.
185

185

00:08:51,260  -->  00:08:54,760
Okay, so I'll paste it into Dir2 and Dir3.
186

186

00:08:58,390  -->  00:09:00,020
All right, so there's
our folder structure.
187

187

00:09:00,020  -->  00:09:01,460
We've got Examples.
188

188

00:09:01,460  -->  00:09:05,190
We've got file1.txt in
the Examples folder.
189

189

00:09:05,190  -->  00:09:09,650
We've got a Dir1 folder that
contains file1 and file2.txt.
190

190

00:09:09,650  -->  00:09:13,450
The Dir2 folder contains
file1, file2, and file3
191

191

00:09:13,450  -->  00:09:15,790
which we haven't had a three
yet but we'll do that shortly
192

192

00:09:15,790  -->  00:09:19,730
and then the Dir3 subfolder
contains file1 and file2.
193

193

00:09:19,730  -->  00:09:22,890
So let's just take a copy
of this and paste that
194

194

00:09:22,890  -->  00:09:26,480
and we'll call that file3.txt
and then we'll be good to go.
195

195

00:09:26,480  -->  00:09:28,870
And again, the contents really
don't matter of the file.
196

196

00:09:28,870  -->  00:09:30,030
It's more the directory structure
197

197

00:09:30,030  -->  00:09:31,970
and the fact that there are files there.
198

198

00:09:31,970  -->  00:09:36,130
So let's close off some of
these files that I've opened.
199

199

00:09:39,610  -->  00:09:41,150
Okay.
200

200

00:09:41,150  -->  00:09:43,350
So we've basically now
built up a file tree
201

201

00:09:43,350  -->  00:09:45,910
and a few files that we can work with.
202

202

00:09:45,910  -->  00:09:49,970
So let's start off by running some code
203

203

00:09:49,970  -->  00:09:53,810
to copy examples.file1, this one here,
204

204

00:09:53,810  -->  00:09:55,170
in the Examples folder,
205

205

00:09:55,170  -->  00:09:58,500
to copy that to Examples, file1copy.txt,
206

206

00:10:00,300  -->  00:10:02,360
and what we're going to do is comment out
207

207

00:10:02,360  -->  00:10:04,530
some of this code that we no longer need
208

208

00:10:04,530  -->  00:10:06,380
so I'm just going to just
comment all that out.
209

209

00:10:06,380  -->  00:10:08,960
And I'm also gonna comment
out the print file method
210

210

00:10:08,960  -->  00:10:12,000
'cause we no longer need that.
211

211

00:10:12,000  -->  00:10:15,670
And we'll just add
another curly brace there
212

212

00:10:17,330  -->  00:10:19,040
to make the code valid
213

213

00:10:19,040  -->  00:10:22,740
and we're gonna start by
typing path sourceFile,
214

214

00:10:22,740  -->  00:10:25,240
we need to accept that import,
215

215

00:10:26,920  -->  00:10:30,670
that's equal to
FileSytems.getDefault.getPath
216

216

00:10:33,790  -->  00:10:37,100
and we're gonna use Examples
as the subfolder name
217

217

00:10:37,100  -->  00:10:39,610
then the file, file1.txt.
218

218

00:10:39,610  -->  00:10:42,210
So make sure you get your
capitalization correct there
219

219

00:10:42,210  -->  00:10:44,520
and that you're using
exactly the same case
220

220

00:10:44,520  -->  00:10:47,240
as you used for your folder
names and your filenames
221

221

00:10:47,240  -->  00:10:49,610
so that's the source
file we wanna copy from.
222

222

00:10:49,610  -->  00:10:53,770
Then the copyFile is equal to
FileSystems.getDefault.getPath
223

223

00:10:59,120  -->  00:11:01,720
and it's gonna be Examples,
224

224

00:11:01,720  -->  00:11:04,550
I'm gonna call this file1copy.txt.
225

225

00:11:06,150  -->  00:11:06,980
And then we just wanna do
226

226

00:11:06,980  -->  00:11:11,150
a Files.copy(sourceFile, copyFile)
227

227

00:11:14,310  -->  00:11:17,960
and what we need to do is
wrap this with a try catch
228

228

00:11:17,960  -->  00:11:20,380
so I'm going to do that so try,
229

229

00:11:20,380  -->  00:11:22,960
let's move the code into there,
230

230

00:11:25,070  -->  00:11:27,660
and we'll catch an IO exception
231

231

00:11:29,240  -->  00:11:32,050
and we'll print a stack
trace if we get an error.
232

232

00:11:32,050  -->  00:11:34,100
So let's just try running
that to see that it does work
233

233

00:11:34,100  -->  00:11:38,270
and we should see that the
file1copy.txt gets created
234

234

00:11:41,660  -->  00:11:44,610
and you can see we get
this file1copy.txt file
235

235

00:11:44,610  -->  00:11:47,100
that was created from the copy.
236

236

00:11:47,100  -->  00:11:48,990
All right, so let's finish the video here.
237

237

00:11:48,990  -->  00:11:50,430
In the next video, we'll continue on.
238

238

00:11:50,430  -->  00:11:52,640
We'll start looking at how to move a file,
239

239

00:11:52,640  -->  00:11:54,200
how to rename a file,
240

240

00:11:54,200  -->  00:11:56,990
how to delete a file, so on and so forth.
241

241

00:11:56,990  -->  00:11:58,680
So I'll see you in the next video.
