1
1

00:00:04,850  -->  00:00:07,600
<v ->So let's have our discussion now about arithmetic</v>
2

2

00:00:07,600  -->  00:00:09,670
with these different data types.
3

3

00:00:09,670  -->  00:00:10,503
Previous videos,
4

4

00:00:10,503  -->  00:00:12,480
we did some basic arithmetic using integers,
5

5

00:00:12,480  -->  00:00:14,078
and we can do something similar
6

6

00:00:14,078  -->  00:00:16,250
with these other data types, as I've mentioned.
7

7

00:00:16,250  -->  00:00:17,160
And just as a recap,
8

8

00:00:17,160  -->  00:00:19,140
let's start by going back here
9

9

00:00:19,140  -->  00:00:22,550
and typing int myTotal is equal to,
10

10

00:00:22,550  -->  00:00:24,063
and in parentheses,
11

11

00:00:24,063  -->  00:00:28,713
myMinIntValue divided by two using the slash operator.
12

12

00:00:30,410  -->  00:00:32,120
So that's just a simple bit of arithmetic
13

13

00:00:32,120  -->  00:00:34,460
that takes the value of myMinIntValue,
14

14

00:00:34,460  -->  00:00:38,360
which of course is the minus 2.147 billion number
15

15

00:00:38,360  -->  00:00:39,500
divided by two.
16

16

00:00:39,500  -->  00:00:41,060
No problems with that.
17

17

00:00:41,060  -->  00:00:43,910
Let's try the same thing with the byte data type.
18

18

00:00:43,910  -->  00:00:48,263
So byte, myNewByteValue is equal to,
19

19

00:00:50,040  -->  00:00:55,003
then parentheses, myMinByteValue divided by two.
20

20

00:00:56,640  -->  00:00:58,050
Now suddenly we've got an error.
21

21

00:00:58,050  -->  00:00:59,600
So why have we got an error?
22

22

00:00:59,600  -->  00:01:03,260
We know that if we use a literal value and the number fits,
23

23

00:01:03,260  -->  00:01:04,460
then there's no problem,
24

24

00:01:04,460  -->  00:01:05,430
and clearly here now,
25

25

00:01:05,430  -->  00:01:07,410
we now that we're using the minimum byte value
26

26

00:01:07,410  -->  00:01:08,610
divided by two,
27

27

00:01:08,610  -->  00:01:12,541
which clearly would fit normally in a byte data type.
28

28

00:01:12,541  -->  00:01:14,960
But here we've got an expression that uses a variable
29

29

00:01:14,960  -->  00:01:16,330
that's been divided by two.
30

30

00:01:16,330  -->  00:01:18,929
That's the difference compared to what we've done previously
31

31

00:01:18,929  -->  00:01:21,810
when we've used a literal value.
32

32

00:01:21,810  -->  00:01:22,900
Well, the problem comes about
33

33

00:01:22,900  -->  00:01:26,390
because the default whole number used by Java is an int,
34

34

00:01:26,390  -->  00:01:27,902
and that's why I've got an error here.
35

35

00:01:27,902  -->  00:01:29,634
And to see that, if we hover over it,
36

36

00:01:29,634  -->  00:01:31,190
that really gives it away.
37

37

00:01:31,190  -->  00:01:32,820
It says required byte.
38

38

00:01:32,820  -->  00:01:35,142
So it's looking for a byte to store the value
39

39

00:01:35,142  -->  00:01:36,770
into our byte variable,
40

40

00:01:36,770  -->  00:01:38,180
but it's found an int.
41

41

00:01:38,180  -->  00:01:40,480
So basically what's in parentheses
42

42

00:01:40,480  -->  00:01:43,040
is treated as an int by the computer,
43

43

00:01:43,040  -->  00:01:45,040
and that's why we're getting this error.
44

44

00:01:45,040  -->  00:01:46,920
But we know the expression will result
45

45

00:01:46,920  -->  00:01:48,460
in a number that fits,
46

46

00:01:48,460  -->  00:01:50,490
so how do we tell Java that?
47

47

00:01:50,490  -->  00:01:53,683
Well, we do that by using a concept called casting.
48

48

00:01:55,360  -->  00:01:57,610
So casting means to treat or convert a number
49

49

00:01:57,610  -->  00:01:59,300
from one type to another.
50

50

00:01:59,300  -->  00:02:02,709
So we put the type we want the number to be in parentheses,
51

51

00:02:02,709  -->  00:02:04,260
like you can see on screen.
52

52

00:02:04,260  -->  00:02:08,270
So we've got byte in parentheses in front of our expression,
53

53

00:02:08,270  -->  00:02:09,990
which in this case was parentheses
54

54

00:02:09,990  -->  00:02:12,595
myMinByteValue divided by two.
55

55

00:02:12,595  -->  00:02:13,640
And I'll note there
56

56

00:02:13,640  -->  00:02:16,010
that other programming languages have casting.
57

57

00:02:16,010  -->  00:02:17,510
This is not just a Java thing.
58

58

00:02:18,460  -->  00:02:19,300
So to do that, then,
59

59

00:02:19,300  -->  00:02:20,250
we'd look at like 40.
60

60

00:02:20,250  -->  00:02:24,770
We'll come in here and we'll put our left parentheses byte,
61

61

00:02:24,770  -->  00:02:26,820
right parentheses and a space,
62

62

00:02:26,820  -->  00:02:29,320
and you can see the error has now disappeared.
63

63

00:02:29,320  -->  00:02:31,510
And because we've used this cast,
64

64

00:02:31,510  -->  00:02:34,540
we've told Java treat this value
65

65

00:02:34,540  -->  00:02:39,137
following the parentheses byte parentheses as a byte,
66

66

00:02:39,137  -->  00:02:40,870
and the error then disappears.
67

67

00:02:40,870  -->  00:02:43,240
And we're really being specific here in telling Java
68

68

00:02:43,240  -->  00:02:44,580
that this is a byte,
69

69

00:02:44,580  -->  00:02:46,940
so treat it as a byte instead of the default,
70

70

00:02:46,940  -->  00:02:48,600
which was an integer.
71

71

00:02:48,600  -->  00:02:50,817
And we can do this, exactly the same thing from short.
72

72

00:02:50,817  -->  00:02:52,840
So I'm gonna come down here,
73

73

00:02:52,840  -->  00:02:53,920
and I'll just scroll up a bit.
74

74

00:02:53,920  -->  00:02:57,247
So I can type short myNewShortValue is equal to,
75

75

00:03:00,120  -->  00:03:04,418
we can start by putting myMinShortValue divided by two.
76

76

00:03:04,418  -->  00:03:06,406
That gives us the same type of error,
77

77

00:03:06,406  -->  00:03:09,450
but this time it's required a short and found an int again.
78

78

00:03:09,450  -->  00:03:14,150
Using a cast we can do left parentheses short,
79

79

00:03:14,150  -->  00:03:16,260
right parentheses and space,
80

80

00:03:16,260  -->  00:03:17,760
and the error then disappears.
81

81

00:03:18,720  -->  00:03:20,180
So generally speaking,
82

82

00:03:20,180  -->  00:03:23,500
an integer is the whole number you probably wanna use,
83

83

00:03:23,500  -->  00:03:24,890
and you can probably guess that now
84

84

00:03:24,890  -->  00:03:27,161
because Java is using an int by default,
85

85

00:03:27,161  -->  00:03:28,930
and that's more or less telling us
86

86

00:03:28,930  -->  00:03:31,600
that that's what it's expecting to use most of the time.
87

87

00:03:31,600  -->  00:03:33,074
So if you don't specify a type
88

88

00:03:33,074  -->  00:03:34,836
that you actually wanna convert to,
89

89

00:03:34,836  -->  00:03:38,450
then the integer is assumed automatically by Java,
90

90

00:03:38,450  -->  00:03:39,627
and you saw that in these cases,
91

91

00:03:39,627  -->  00:03:42,360
we got an error because of that.
92

92

00:03:42,360  -->  00:03:44,363
In the case of the code on line 38,
93

93

00:03:44,363  -->  00:03:46,110
we are using an int variable,
94

94

00:03:46,110  -->  00:03:47,430
and that's why I didn't have any problem
95

95

00:03:47,430  -->  00:03:50,080
with the result also being an int.
96

96

00:03:50,080  -->  00:03:53,180
So in general, my advice is to always use an integer
97

97

00:03:53,180  -->  00:03:56,140
unless you've got a really good reason to not do that.
98

98

00:03:56,140  -->  00:03:57,480
All right, so let's end the video here,
99

99

00:03:57,480  -->  00:03:58,313
and in the next one,
100

100

00:03:58,313  -->  00:04:01,120
it's time for a challenge to solidify
101

101

00:04:01,120  -->  00:04:02,380
some of the information you've learned
102

102

00:04:02,380  -->  00:04:03,680
in the last few videos.
103

103

00:04:03,680  -->  00:04:05,380
So I'll see you in the next video.
