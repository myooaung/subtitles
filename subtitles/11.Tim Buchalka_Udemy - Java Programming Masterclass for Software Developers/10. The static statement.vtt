WEBVTT
1
1

00:00:05.410  -->  00:00:08.750
So we've been using the static
keyword when declaring variables and
2

2

00:00:08.750  -->  00:00:10.890
methods throughout this course.
3

3

00:00:10.890  -->  00:00:15.160
So it's now time to look at what static
actually means and why we used it and
4

4

00:00:15.160  -->  00:00:17.860
why we had to use it in particular places.
5

5

00:00:17.860  -->  00:00:21.770
So what I've done is I've created
a new class as you can see and
6

6

00:00:21.770  -->  00:00:24.670
I've actually called
the package static using a new.
7

7

00:00:24.670  -->  00:00:27.850
Naming conventions for packages which we
talked about earlier in this section.
8

8

00:00:27.850  -->  00:00:31.450
So let's go ahead now and
create a new class.
9

9

00:00:31.450  -->  00:00:32.860
I'm gonna create a new class,
10

10

00:00:32.860  -->  00:00:36.670
we're gonna come down here as
I normally do into source.
11

11

00:00:36.670  -->  00:00:40.970
And then right click it, new Java class,
we're gonna call it static test.
12

12

00:00:43.630  -->  00:00:45.260
Like so.
And what we're going to do,
13

13

00:00:45.260  -->  00:00:50.640
it's going to be a public class and
we're gonna put private int which
14

14

00:00:50.640  -->  00:00:54.190
is gonna be num instances,
and set that equal to zero.
15

15

00:00:54.190  -->  00:00:58.320
Row, private string, nine.
16

16

00:00:58.320  -->  00:01:03.900
We're gonna create a constructor, and
we're gonna use the name as a constructor.
17

17

00:01:03.900  -->  00:01:08.390
What we're also going to do is every time
a constructor is used We're gonna talk
18

18

00:01:08.390  -->  00:01:13.370
numinstances plus plus, so we're gonna
increment that variable numinstances.
19

19

00:01:13.370  -->  00:01:17.910
And then also, we need a getter for
the two, so we want
20

20

00:01:19.180  -->  00:01:24.630
a getter for both numinstances and
for the name as well, like so.
21

21

00:01:24.630  -->  00:01:27.010
So that's it, very basic class.
22

22

00:01:27.010  -->  00:01:31.020
And so we'll go back now to main and
create two instances of the class.
23

23

00:01:31.020  -->  00:01:31.920
And print out the value.
24

24

00:01:31.920  -->  00:01:37.790
So I go back to there,
and so let's start and
25

25

00:01:37.790  -->  00:01:46.060
type StaticTest firstInstance
= new StaticTest.
26

26

00:01:46.060  -->  00:01:49.320
And we'll call this one,
unsurprisingly, 1st Instance.
27

27

00:01:50.820  -->  00:01:52.030
Put down original.
28

28

00:01:52.030  -->  00:01:52.860
So we'll print it out.
29

29

00:01:52.860  -->  00:01:58.680
We'll go firstInstance.getName()
30

30

00:01:58.680  -->  00:02:02.500
+ " is instance number
31

31

00:02:02.500  -->  00:02:10.860
Plus FirstInstance.getNumInstances.
32

32

00:02:10.860  -->  00:02:14.540
So, and then we'll do static test,
33

33

00:02:14.540  -->  00:02:21.420
second instance, Equals new static test.
34

34

00:02:22.670  -->  00:02:29.490
Second instance and
print out second instance.
35

35

00:02:31.270  -->  00:02:38.060
Tuck it name plus is instance
36

36

00:02:38.060  -->  00:02:44.640
number plus second instance
dot get num instances.
37

37

00:02:47.250  -->  00:02:54.240
So now, if you run this, You
38

38

00:02:54.240  -->  00:02:57.460
probably may have expected each instance
to think it was instance number one,
39

39

00:02:57.460  -->  00:03:00.760
cuz both have a copy of
the number of instances filled.
40

40

00:03:00.760  -->  00:03:03.540
So when we increment it to the
constructor, it becomes one in each case,
41

41

00:03:03.540  -->  00:03:06.800
because the course We started
with numbers is equal zero but
42

42

00:03:08.220  -->  00:03:11.780
a static field which is also
known as a class variable
43

43

00:03:11.780  -->  00:03:16.520
is associated with the class rather than
e with any particular instance of it, so
44

44

00:03:16.520  -->  00:03:19.810
it's only ever one copy of
the variable in memory.
45

45

00:03:19.810  -->  00:03:22.910
All instances of the class
share that one class variable.
46

46

00:03:22.910  -->  00:03:26.640
So this mean we can get the behavior we
originally wanted where this instance
47

47

00:03:26.640  -->  00:03:32.850
number was incremented every time we
instantiated a new object from this class,
48

48

00:03:32.850  -->  00:03:38.010
by coming back here and changing
the variable num instances to static.
49

49

00:03:38.010  -->  00:03:42.380
So we make that a static num
instance is equal to 0 and
50

50

00:03:42.380  -->  00:03:44.150
not changing any other code.
51

51

00:03:44.150  -->  00:03:45.620
Go back to Main and we run that again.
52

52

00:03:47.430  -->  00:03:50.820
You can see now on the screen that we've
got numInstances is number one for
53

53

00:03:50.820  -->  00:03:52.400
the first instance.
54

54

00:03:52.400  -->  00:03:55.030
And Incident number two is now for
second instance.
55

55

00:03:55.030  -->  00:03:57.860
And just to confirm, we can also
create a third one if we wanted to.
56

56

00:03:59.940  -->  00:04:02.830
[SOUND]
57

57

00:04:02.830  -->  00:04:07.970
Third instance and
58

58

00:04:07.970  -->  00:04:12.160
third instance.
59

59

00:04:12.160  -->  00:04:13.230
Guys, if you run that now.
60

60

00:04:15.210  -->  00:04:17.850
And we currently get first instance
is set instance number one,
61

61

00:04:17.850  -->  00:04:19.590
second is second, third to third.
62

62

00:04:19.590  -->  00:04:21.170
So I'm still working as you can see.
63

63

00:04:21.170  -->  00:04:24.560
We've got a single variable with
static variable numInstances and
64

64

00:04:24.560  -->  00:04:27.700
any one version of that exists
in memory at any given time.
65

65

00:04:27.700  -->  00:04:31.780
Now, you may or may not have noticed,
if you're pretty sharp, that I didn't
66

66

00:04:31.780  -->  00:04:36.280
change this variable here, the second
instance, yet the program still worked?
67

67

00:04:36.280  -->  00:04:39.000
So, why, if we're leaving that
the second instance when we're calling
68

68

00:04:39.000  -->  00:04:43.260
the third instance, does it still record
or return, rather, the correct value?
69

69

00:04:43.260  -->  00:04:46.470
Well, the reason it returned it is
because they're all sharing the same
70

70

00:04:46.470  -->  00:04:48.900
copy of instances, so it doesn't matter.
71

71

00:04:48.900  -->  00:04:52.210
Which instance of the class we
use to access a static field,
72

72

00:04:52.210  -->  00:04:55.220
it's always going to return that
what is then the valid number.
73

73

00:04:55.220  -->  00:04:58.460
So one, two, and three, again, and
likewise I could have changed that to
74

74

00:04:58.460  -->  00:05:02.990
third instance which would've been
technically correct, and run that, and
75

75

00:05:02.990  -->  00:05:06.890
again, we still get the same numbers
coming back and that's because we're still
76

76

00:05:06.890  -->  00:05:11.220
only sharing one copy of that variable
with all instances of the class.
77

77

00:05:11.220  -->  00:05:13.110
Now it's a little bit
odd that we can do that.
78

78

00:05:13.110  -->  00:05:16.940
And if you come across code like that
you probably have to stop and think for
79

79

00:05:16.940  -->  00:05:18.390
awhile just to make sure it isn't a bug.
80

80

00:05:18.390  -->  00:05:20.710
It's really bad practice,
81

81

00:05:20.710  -->  00:05:25.940
leaving that error there is I I
think it's really bad practice and
82

82

00:05:25.940  -->  00:05:29.610
it's not something you'd really want
to do even though it's perfectly valid.
83

83

00:05:29.610  -->  00:05:31.220
It's much better to use the class time and
84

84

00:05:31.220  -->  00:05:34.980
make it clear because what
you're accessing is a so
85

85

00:05:34.980  -->  00:05:38.310
in other words changing this to what
should have been third instance.
86

86

00:05:38.310  -->  00:05:41.780
Now, if you're using a method
that only works on static fields,
87

87

00:05:41.780  -->  00:05:45.880
it makes far more sense to make that
method also static, and that means that we
88

88

00:05:45.880  -->  00:05:50.380
can then access the method without having
to use a classes instance to do so at all.
89

89

00:05:50.380  -->  00:05:54.150
So what we're gonna do is we'll go back
in to change the class On a static test
90

90

00:05:54.150  -->  00:05:58.920
class, and we'll change get num instances
to static, and we'll put static there.
91

91

00:05:58.920  -->  00:06:02.940
So that's now public static
int getNumInstances.
92

92

00:06:02.940  -->  00:06:05.580
Still returning the same variable,
numInstances.
93

93

00:06:05.580  -->  00:06:10.070
But what that means is by doing that,
we can go back to our main class, and
94

94

00:06:10.070  -->  00:06:13.060
instead of having this instance name,
we can do something like this.
95

95

00:06:13.060  -->  00:06:15.990
We can put static Test.
96

96

00:06:15.990  -->  00:06:21.460
[SOUND]
Static test.
97

97

00:06:21.460  -->  00:06:25.170
[SOUND]
Static test like so,
98

98

00:06:25.170  -->  00:06:29.500
and it makes it clear now, because you're
saying that it's the class name, and
99

99

00:06:29.500  -->  00:06:32.500
it's not using the instance name,
[INAUDIBLE] instance.
100

100

00:06:32.500  -->  00:06:34.780
That this is a static method, and
101

101

00:06:34.780  -->  00:06:37.310
incidentally you have used
static methods before.
102

102

00:06:37.310  -->  00:06:41.090
When we use the integer.pass int method
from the interface's challenge, for
103

103

00:06:41.090  -->  00:06:45.280
example, pass int is a static
method of the integer class.
104

104

00:06:45.280  -->  00:06:46.080
And as a result,
105

105

00:06:46.080  -->  00:06:48.960
we can use that without having
a particular integer to call it from.
106

106

00:06:48.960  -->  00:06:53.320
So just as a recap, static methods and
fields belong to the class,
107

107

00:06:53.320  -->  00:06:57.820
not to instances of the class, and
as a result, can be called by referencing
108

108

00:06:57.820  -->  00:07:02.090
the class name, as you see here,
rather than a class instance.
109

109

00:07:02.090  -->  00:07:04.850
This explains why the main method
we've used throughout the course has
110

110

00:07:04.850  -->  00:07:05.700
to be static.
111

111

00:07:05.700  -->  00:07:09.620
This red on line five, because when we
want to run a Java program there has to be
112

112

00:07:09.620  -->  00:07:13.480
an entry point, in other words a method
that is executed when the program runs.
113

113

00:07:13.480  -->  00:07:17.640
However, until the program runs there's no
classed instances to call methods on, so
114

114

00:07:17.640  -->  00:07:22.250
Java has to use this static method that
can be called from the class name rather
115

115

00:07:22.250  -->  00:07:26.450
than from a class instance, so that's
a reason, again, why Of the main methods.
116

116

00:07:26.450  -->  00:07:28.770
The main method is marked as static.
117

117

00:07:28.770  -->  00:07:30.750
So when we run our sample
program in IntelliJ,
118

118

00:07:30.750  -->  00:07:34.530
what IntelliJ does is
invokes a Java executable and
119

119

00:07:34.530  -->  00:07:38.250
passes to it the name of the class that
contains the public study board main.
120

120

00:07:38.250  -->  00:07:41.900
So provided you actually build
the project, you can run the program from
121

121

00:07:41.900  -->  00:07:45.400
the command line by changing it into
the project production directory.
122

122

00:07:45.400  -->  00:07:51.250
And then typing something
like from a command line,
123

123

00:07:51.250  -->  00:07:55.830
you type Javacom.company,
company._static.main.
124

124

00:07:55.830  -->  00:07:59.430
The Java will then expect main to
have a static method called main with
125

125

00:07:59.430  -->  00:08:03.020
the exact signature that we have
been using throughout the course.
126

126

00:08:03.020  -->  00:08:06.650
Now the main method doesn't have to be
Class code main, it can exist in any of
127

127

00:08:06.650  -->  00:08:09.280
the classes, but the convention is
to put it in a class code main.
128

128

00:08:09.280  -->  00:08:13.460
And if we're given a project containing
hundreds of classes to work on,
129

129

00:08:13.460  -->  00:08:15.850
you will at least know where
the program starts by looking for
130

130

00:08:15.850  -->  00:08:19.160
the main class rather than having to check
every other on to find the main method,
131

131

00:08:19.160  -->  00:08:21.150
and that's why it's sort
of a standard convention.
132

132

00:08:21.150  -->  00:08:24.160
So this example would be just running it
from the command line we're not gonna do
133

133

00:08:24.160  -->  00:08:25.170
that now But
134

134

00:08:25.170  -->  00:08:28.030
that's how you would invoke it if you
wanted to do it from the command line.
135

135

00:08:28.030  -->  00:08:30.920
So now that we understand
static methods and fields, and
136

136

00:08:30.920  -->  00:08:34.370
these are sometimes referred to as
class methods and class variables,
137

137

00:08:34.370  -->  00:08:38.460
we can work out why all the methods we've
created in main have also been static.
138

138

00:08:38.460  -->  00:08:41.420
So what we're gonna do is use
another example to discuss what's
139

139

00:08:41.420  -->  00:08:42.870
happening and why.
140

140

00:08:42.870  -->  00:08:45.100
Let's go ahead now and change this code.
141

141

00:08:45.100  -->  00:08:46.900
I'm gonna cover this code out for now.
142

142

00:08:46.900  -->  00:08:51.790
[NOISE]
And let's come down here and
143

143

00:08:52.950  -->  00:08:57.730
we'll put public int multiplier = 7.
144

144

00:08:57.730  -->  00:09:03.540
Actually we'll make that
a field in this class.
145

145

00:09:03.540  -->  00:09:04.540
So put this at the top.
146

146

00:09:05.950  -->  00:09:12.040
Like so and then we'll create a method
called multiply so in public int
147

147

00:09:12.040  -->  00:09:19.740
multiply and
that accepts a parameter of a number,
148

148

00:09:21.430  -->  00:09:26.220
returns the number times the multiplier.
149

149

00:09:28.010  -->  00:09:31.180
So, and
this is a slightly contrived example
150

150

00:09:31.180  -->  00:09:32.410
that doesn't really do anything useful.
151

151

00:09:32.410  -->  00:09:36.120
What it will do is help you to show what
we can and can't do with static methods.
152

152

00:09:36.120  -->  00:09:40.010
So as you can see, the public
method multiply takes a number and
153

153

00:09:40.010  -->  00:09:43.030
returns the result of multiplying
it with the public multiplier field
154

154

00:09:43.030  -->  00:09:44.250
that we defined on line five.
155

155

00:09:44.250  -->  00:09:46.530
Now we've made multiplier public so
156

156

00:09:46.530  -->  00:09:49.690
there's no confusion stemming
from its visibility.
157

157

00:09:49.690  -->  00:09:51.650
So let's call the method now in Main.
158

158

00:09:51.650  -->  00:09:53.770
Here and see what 6 times 7 is.
159

159

00:09:53.770  -->  00:10:01.970
So I'm going to do something like
int answer equals multiply 6.
160

160

00:10:01.970  -->  00:10:05.870
[SOUND] And Put down a message,
161

161

00:10:05.870  -->  00:10:12.370
the answer answer.
162

162

00:10:12.370  -->  00:10:16.300
No in theory, that code looks good,
but intellij's showing an error.
163

163

00:10:16.300  -->  00:10:17.990
And if we look at that,
I'll call up the error.
164

164

00:10:17.990  -->  00:10:22.330
Non-static method multiply int can't
be referenced from a static context.
165

165

00:10:23.470  -->  00:10:25.780
And we get a similar error if we
try to do something like this.
166

166

00:10:35.240  -->  00:10:36.250
Similar error,
167

167

00:10:36.250  -->  00:10:40.150
non static field multiplier can't be
referenced from a static con Context.
168

168

00:10:40.150  -->  00:10:44.590
So if multiply is public, then why can't
we access it from our main method?
169

169

00:10:44.590  -->  00:10:48.410
Well as we've seen, normal class fields
require an instance of the class
170

170

00:10:48.410  -->  00:10:51.660
that don't actually exist until
an instance has been created.
171

171

00:10:51.660  -->  00:10:54.150
Now the main method Is
static as we can see.
172

172

00:10:54.150  -->  00:10:56.550
And it can be called
with the class instance.
173

173

00:10:56.550  -->  00:11:01.910
So as a result, Java can't allow a static
method to access non-static fields or
174

174

00:11:01.910  -->  00:11:06.380
methods because frankly they don't
exist when the static Methods called.
175

175

00:11:06.380  -->  00:11:08.160
So in many of our examples
in earlier lectures,
176

176

00:11:08.160  -->  00:11:11.130
what we did was we created methods for
main to call.
177

177

00:11:11.130  -->  00:11:14.630
And in order for that to work,
we had to make the methods static.
178

178

00:11:14.630  -->  00:11:17.490
And we're gonna do that here now, so
that your program can actually work.
179

179

00:11:17.490  -->  00:11:19.910
So the way we would get around that.
180

180

00:11:19.910  -->  00:11:23.410
First we would make our variable,
our field, static.
181

181

00:11:23.410  -->  00:11:27.650
And also down here,
we can make our method static as well.
182

182

00:11:27.650  -->  00:11:30.600
So now that we've done that,
we're calling a static method and
183

183

00:11:30.600  -->  00:11:35.090
accessing a static field,
everything should work fine.
184

184

00:11:35.090  -->  00:11:38.120
And when we run it, we correctly get
the answer 42, and we can see we're
185

185

00:11:38.120  -->  00:11:41.670
now able to access multiplier because
we've set it as static as well.
186

186

00:11:42.920  -->  00:11:46.180
So note that the reverse is not true,
and there's no reason why it should be.
187

187

00:11:46.180  -->  00:11:49.380
So there's no problem at all
with a nonstatic instructor
188

188

00:11:49.380  -->  00:11:51.980
of the StaticTest class like here.
189

189

00:11:51.980  -->  00:11:54.670
There's no problem with that accessing
the static NumInstances field.
190

190

00:11:54.670  -->  00:11:59.680
And we can also call the static methods
from nonstatic ones With no problems.
191

191

00:11:59.680  -->  00:12:02.310
You note that there's nothing
to prevent a static method
192

192

00:12:02.310  -->  00:12:07.030
from accessing nonstatic fields and
methods in another class
193

193

00:12:07.030  -->  00:12:09.630
because it creates in instance
of a class in order to do so.
194

194

00:12:09.630  -->  00:12:14.770
Now the restriction is purely on a static
method Access non-static methods and
195

195

00:12:14.770  -->  00:12:16.490
fields in it's own class.
196

196

00:12:16.490  -->  00:12:19.360
So there's one more aspect of
static that we need to look at, and
197

197

00:12:19.360  -->  00:12:20.920
that's static initializers.
198

198

00:12:20.920  -->  00:12:24.250
Now in the discussion of these,
also need to consider final fields.
199

199

00:12:24.250  -->  00:12:27.590
So we'll come back to static
initializers in the next lecture
200

200

00:12:27.590  -->  00:12:29.980
after we've discussed the final keyword.
201

201

00:12:29.980  -->  00:12:31.200
So we'll see you in that next video.
