WEBVTT
1
1

00:00:05.490  -->  00:00:08.240
So in the Previous few video
we talked about scope and
2

2

00:00:08.240  -->  00:00:12.040
also about visibility in Java so
now it's actually time for a challenge.
3

3

00:00:12.040  -->  00:00:15.130
So I'm gonna paste a challenge in
here then we'll just discuss it.
4

4

00:00:15.130  -->  00:00:16.780
And then you can make a start on that.
5

5

00:00:16.780  -->  00:00:19.320
now just before we start talking
6

6

00:00:19.320  -->  00:00:21.020
about the challenge and going into the
7

7

00:00:21.020  -->  00:00:22.800
details of it I want to make something
8

8

00:00:22.800  -->  00:00:25.560
really clear here this is not good
9

9

00:00:25.560  -->  00:00:27.750
coding technique what I've attempted to
10

10

00:00:27.750  -->  00:00:29.970
do here with this challenge is to help
11

11

00:00:29.970  -->  00:00:32.910
teach you scope so by going through the
12

12

00:00:32.910  -->  00:00:34.890
challenge and completing it I believe
13

13

00:00:34.890  -->  00:00:36.210
you'll come up with a firm understanding
14

14

00:00:36.210  -->  00:00:38.120
a much better understanding of what
15

15

00:00:38.120  -->  00:00:41.370
scope is and how it actually works but
16

16

00:00:41.370  -->  00:00:43.350
going through the challenge and doing
17

17

00:00:43.350  -->  00:00:44.800
things like I'm telling you to do
18

18

00:00:44.800  -->  00:00:47.210
creating variables of the same name of
19

19

00:00:47.210  -->  00:00:49.530
the letter X and a class with the same
20

20

00:00:49.530  -->  00:00:51.960
name also with the letter X would be
21

21

00:00:51.960  -->  00:00:54.230
very bad programming practice and you
22

22

00:00:54.230  -->  00:00:55.410
would never do that in a production
23

23

00:00:55.410  -->  00:00:57.260
environment I just wanted to make this
24

24

00:00:57.260  -->  00:00:58.580
really clear that the challenge is
25

25

00:00:58.580  -->  00:01:01.230
designed to help you understand scope do
26

26

00:01:01.230  -->  00:01:03.230
not assume that the coding standards
27

27

00:01:03.230  -->  00:01:05.190
here are standards that you would use
28

28

00:01:05.190  -->  00:01:07.380
with the short variable names in this
29

29

00:01:07.380  -->  00:01:09.450
case with the letter X that there again
30

30

00:01:09.450  -->  00:01:11.540
purely to help you understand scope
31

31

00:01:11.540  -->  00:01:13.040
alright so let's get back to discussing
32

32

00:01:13.040  -->  00:01:15.290
what the challenge is
33

33

00:01:15.290  -->  00:01:16.590
So here is the challenge.
34

34

00:01:16.590  -->  00:01:20.820
It's to write a small program to read an
integer from the keyboard using Scanner.
35

35

00:01:20.820  -->  00:01:24.290
And of course we've used that
many times in the course today.
36

36

00:01:24.290  -->  00:01:26.770
And also to print out the times table for
that number,
37

37

00:01:26.770  -->  00:01:30.220
whatever the number was
entered the keyboard.
38

38

00:01:30.220  -->  00:01:32.260
And the table should run from 1 to 12.
39

39

00:01:32.260  -->  00:01:36.510
Now you're allowed to use one variable
called scan for your scanner instance.
40

40

00:01:36.510  -->  00:01:41.740
And you can use as many other variables as
you need, but they must all be called x.
41

41

00:01:41.740  -->  00:01:44.010
So that includes any class instances and
42

42

00:01:44.010  -->  00:01:47.430
loop control variables that
you may decide to use.
43

43

00:01:47.430  -->  00:01:52.560
Now if you use a class, the class
should be called the X with a capital,
44

44

00:01:52.560  -->  00:01:56.500
but any instances of it must
be called x with a lower case.
45

45

00:01:56.500  -->  00:02:01.860
So any methods, there's many methods
you create must also be called x.
46

46

00:02:01.860  -->  00:02:04.800
And as an optional extra,
change a program so
47

47

00:02:04.800  -->  00:02:08.800
that all variables including
the scan instance are called x.
48

48

00:02:08.800  -->  00:02:12.100
So what we're trying to do here
Here is learn what scope is and
49

49

00:02:12.100  -->  00:02:15.010
to use the appropriate
scope to make this happen.
50

50

00:02:15.010  -->  00:02:18.540
So by actually having you go
through calling everything x,
51

51

00:02:18.540  -->  00:02:21.400
you're going to really have to
understand where to use things and
52

52

00:02:21.400  -->  00:02:24.080
where the scope is appropriate
to use to be able to do that.
53

53

00:02:24.080  -->  00:02:27.030
So that's the challenge,
now's the time to pause this video and
54

54

00:02:27.030  -->  00:02:30.470
go away and have a go and see if you
can come up with a solution to that.
55

55

00:02:30.470  -->  00:02:32.680
And so when you're ready to
see my solution come back and
56

56

00:02:32.680  -->  00:02:33.670
we'll go through that.
57

57

00:02:39.110  -->  00:02:41.500
Okay, so I gave you a minute or
two to figure it out.
58

58

00:02:41.500  -->  00:02:43.870
So let's go ahead now and
implement the solution.
59

59

00:02:43.870  -->  00:02:47.980
So the first thing we're going to
do is we're going to create a class
60

60

00:02:47.980  -->  00:02:51.620
image there that If you use a class,
the class can be called x.
61

61

00:02:51.620  -->  00:02:52.720
So we need that.
62

62

00:02:52.720  -->  00:02:53.900
So I'm gonna create that.
63

63

00:02:53.900  -->  00:02:56.190
I'm gonna go into our package.
64

64

00:02:56.190  -->  00:02:58.900
Right click, new class.
65

65

00:02:58.900  -->  00:03:01.770
X with a capital X.
66

66

00:03:01.770  -->  00:03:06.780
And we're gonna create a field,
int x [INAUDIBLE].
67

67

00:03:06.780  -->  00:03:09.660
We're gonna create a constructor.
68

68

00:03:09.660  -->  00:03:13.460
Which is going to accept that parameter
and update the field we're using this so
69

69

00:03:13.460  -->  00:03:15.600
dot x equals x as you can see there.
70

70

00:03:15.600  -->  00:03:19.870
We're gonna create our function which
actually does the times table and
71

71

00:03:19.870  -->  00:03:24.160
it's gonna be public, void x,
72

72

00:03:24.160  -->  00:03:32.210
four int x equals one, x less than 13.
73

73

00:03:32.210  -->  00:03:38.060
X plus plus and I'm gonna print out x plus
74

74

00:03:38.060  -->  00:03:43.680
times plus this dot x plus
75

75

00:03:43.680  -->  00:03:48.850
equals plus x times this dot x and
76

76

00:03:50.570  -->  00:03:54.840
what we need to do is go back to our main
class now and actually call this so.
77

77

00:03:54.840  -->  00:03:56.280
Back to my and
78

78

00:03:56.280  -->  00:04:00.500
actually first things first we're
going to imput the from the keyboard.
79

79

00:04:00.500  -->  00:04:06.550
The actually number we're going to process
so scanner scanner, equals new scanner.
80

80

00:04:09.010  -->  00:04:09.620
System dot N,
81

81

00:04:09.620  -->  00:04:14.570
and they're going to print out a message
that says please enter number.
82

82

00:04:19.830  -->  00:04:23.080
And X x = new
83

83

00:04:23.080  -->  00:04:32.480
X(scanner.nextInt()); in
84

84

00:04:32.480  -->  00:04:36.700
x.x So if we run that just to confirm
that its actually going to work.
85

85

00:04:39.930  -->  00:04:40.710
Trial two and
86

86

00:04:40.710  -->  00:04:46.150
you can see we've got two work from
one to 12 and that's working fine.
87

87

00:04:46.150  -->  00:04:49.810
So you can see what we've done there,
we've used x everywhere.
88

88

00:04:49.810  -->  00:04:52.770
But we've managed to by
using the appropriate scope
89

89

00:04:52.770  -->  00:04:56.770
to get the program to work without
it actually coming up with a problem
90

90

00:04:56.770  -->  00:05:00.340
with the X being considered
like a duplicate.
91

91

00:05:00.340  -->  00:05:05.060
Of course the way we've done that
is in the X class we've created
92

92

00:05:05.060  -->  00:05:09.060
a field I've got them in a constructor
that accepts that parameter and
93

93

00:05:09.060  -->  00:05:16.140
updates the field in the mythadex we're
using the integer x for the for loop but
94

94

00:05:16.140  -->  00:05:20.500
we're using this x instead of obviously
the x in the for loop to get it to work.
95

95

00:05:21.710  -->  00:05:25.490
Now, as the optional extra,
change program so that all variables,
96

96

00:05:25.490  -->  00:05:28.200
including the scanner instance,
are codecs.
97

97

00:05:28.200  -->  00:05:33.270
And the way we can do that is we
can go back here to our x-class,
98

98

00:05:33.270  -->  00:05:36.970
and instead of having this dot x equals x,
and having a parameter,
99

99

00:05:36.970  -->  00:05:41.830
we'll change this so I'll actually
pass a parameter of scanner, and
100

100

00:05:41.830  -->  00:05:45.840
we'll accept that import And
then we'll actually put a message here.
101

101

00:05:48.930  -->  00:05:49.640
Please enter a number.
102

102

00:05:49.640  -->  00:05:55.330
And we're going to accept the input.
103

103

00:05:55.330  -->  00:06:01.860
Let's start I say, x start next int
[INAUDIBLE] So now if we go back to mine.
104

104

00:06:01.860  -->  00:06:06.590
We can change this a little bit and we can
copy this new part cuz we're going to need
105

105

00:06:06.590  -->  00:06:11.570
that, delete out those first two parts and
x, x equals new x and
106

106

00:06:11.570  -->  00:06:18.190
this time it's going to be new scanner
dot system in like so and just x dot x.
107

107

00:06:18.190  -->  00:06:21.890
So now we've literally got everything
using x and we run that again.
108

108

00:06:25.870  -->  00:06:27.420
Confirming that it works fine.
109

109

00:06:27.420  -->  00:06:29.430
So I know it's a contrived example and
110

110

00:06:29.430  -->  00:06:32.080
it's certainly not a way
you'd normally code.
111

111

00:06:33.150  -->  00:06:37.940
Cuz it's very hard to read with all
the variables and even the methods and
112

112

00:06:37.940  -->  00:06:42.780
the class being called X, but
the point is by understanding scope and
113

113

00:06:42.780  -->  00:06:46.480
visibility, we're actually able to
achieve our goal of doing that.
114

114

00:06:46.480  -->  00:06:49.680
So I hope that's actually helped, and
I hope you did well on the challenge.
115

115

00:06:49.680  -->  00:06:51.050
And we'll see you in the next section.
