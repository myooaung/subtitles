WEBVTT
1

00:00:06.500  -->  00:00:09.500
so in the previous videos in this section
of the course we looked at reading
2

2

00:00:09.500  -->  00:00:14.250
and writing data using characters streams to
write out the data we used the file writer
3

3

00:00:14.250  -->  00:00:18.800
class and to read it back again we
created file reader objects we then
4

4

00:00:18.800  -->  00:00:23.230
discuss the idea of buffering the stream
so that a large chunks the data are read into
5

5

00:00:23.230  -->  00:00:28.000
memory by buffered Reader now this prevents excessive access to disk because
6

6

00:00:28.000  -->  00:00:31.360
the data is only read from the disk
when the buffer is empty
7

7

00:00:32.090  -->  00:00:36.020
otherwise the file reader continues to take
data from memory buffer so its much
8

8

00:00:36.020  -->  00:00:39.810
more optimized compared to just
reading a character at time now you
9

9

00:00:39.810  -->  00:00:43.130
can also buffer data when it's
written to disk
10

10

00:00:43.130  -->  00:00:48.240
not surprisingly this makes use of a buffered writer class the concept is the
11

11

00:00:48.240  -->  00:00:52.680
same the file writer puts the data into the
buffed and the data is only written to disk
12

12

00:00:52.680  -->  00:00:57.060
when the buffers is full and once again this
prevents writing small amounts of data to
13

13

00:00:57.060  -->  00:01:00.900
the disc which is very efficient because
a disk drive generally speaking
14

14

00:01:00.900  -->  00:01:05.860
is much slower than you know your computer
can process so your computer applications is going to be
15

15

00:01:05.860  -->  00:01:10.330
slowed down waiting for that disk drive
to write data so by doing it this way
16

16

00:01:10.330  -->  00:01:14.400
using a buffered writer data is written
in sizable chunks rather than sort of
17

17

00:01:14.400  -->  00:01:18.640
a character at a time now I didn't actually
use a buffered writer in the previous
18

18

00:01:18.640  -->  00:01:22.820
example and I only used the buffered reader to write the directions file the
19

19

00:01:22.820  -->  00:01:27.080
data from the locations file was read
from disk line by line and that
20

20

00:01:27.080  -->  00:01:31.350
resulted in many accesses to the
locations.txt file so in the next
21

21

00:01:31.350  -->  00:01:35.080
few videos I'm gonna cover bytes streams
which write binary data rather than
22

22

00:01:35.080  -->  00:01:38.650
the character data to the streams and
that would make sense to have an
23

23

00:01:38.650  -->  00:01:42.970
efficient program to modify so I'm going to
start off with a challenge so first we
24

24

00:01:42.970  -->  00:01:47.510
are gonna remove all the commented out code to
help tidy things up so got a good base
25

25

00:01:47.510  -->  00:01:51.630
to start with so lets start commenting some
of the stuff out so
26

26

00:01:51.630  -->  00:01:57.520
and remember that in the locations file just above the static
27

27

00:01:57.520  -->  00:02:02.390
initialization block we had this code here so let's just delete that clean
28

28

00:02:02.390  -->  00:02:06.670
things up a little bit and scrolling
down we also have this code here
29

29

00:02:06.670  -->  00:02:12.640
when reading the exits lets delete that as well
to make things cleaner
30

30

00:02:12.640  -->  00:02:15.640
and I've also got this code down here which we
can also remove
31

31

00:02:16.690  -->  00:02:21.960
and that was our initial code to have
directions locations and exits before we
32

32

00:02:21.960  -->  00:02:28.930
decided to start writing that to a file....ok so that is looking better
33

33

00:02:29.470  -->  00:02:34.510
ok so here is to challenge and I'm going to make it bigger so you can see what this is
34

34

00:02:34.510  -->  00:02:38.970
all about and theirs two parts to this
challenge so part 1....
35

35

00:02:38.970  -->  00:02:44.950
....so
36

36

00:02:44.950  -->  00:02:49.100
...so that is part 1 of our challenge
37

37

00:02:49.100  -->  00:02:54.440
...now part 2...
38

38

00:02:54.440  -->  00:02:59.680
....
39

39

00:02:59.680  -->  00:03:03.940
...
40

40

00:03:03.940  -->  00:03:24.110
....
41

41

00:03:24.110  -->  00:03:30.500
...and the reason for the 0 quit is when the data was
42

42

00:03:30.500  -->  00:03:34.660
originally written to the files it's
been hard coded in the locations class
43

43

00:03:34.660  -->  00:03:36.870
and their were no locations 0
44

44

00:03:36.870  -->  00:03:41.680
because this is added by the location class constructor
but now that we're writing the contents
45

45

00:03:41.680  -->  00:03:47.760
of the class to the directions.txt file the 0 locations will also be save and
46

46

00:03:47.760  -->  00:03:51.390
that's why a change will be needed to
allow for this and this is that part
47

47

00:03:51.390  -->  00:03:56.060
here I'm talking about the 0 quite exits before using the newly created files alright so
48

48

00:03:56.060  -->  00:04:00.370
that is your challenge go away and see if you can figure that out now for this code and
49

49

00:04:00.370  -->  00:04:04.510
once you have a got at it and you think you ready to
see what we've come up with come back and
50

50

00:04:04.510  -->  00:04:07.510
will go through that code so pause the video now
51

51

00:04:10.800  -->  00:04:15.660
ok so how did you do hopefully you manage to get it working
or go at it with a good go so lets go back
52

52

00:04:15.660  -->  00:04:22.370
now and get this working so part 1 and
just as a recap part 1 was to modify the
53

53

00:04:22.370  -->  00:04:26.530
program so that it uses a Buffered Reader
to read in the locations data and we're
54

54

00:04:26.530  -->  00:04:29.480
gonna make that change and we are just gonna run to
make sure things are working before we
55

55

00:04:29.480  -->  00:04:34.500
move onto part 2 of the challenge so to
implement the first part we really just
56

56

00:04:34.500  -->  00:04:38.650
need to make a relatively simple change
in the static initialization block in the
57

57

00:04:38.650  -->  00:04:45.450
locations.java file so where we've go this try scanner new file reader
58

58

00:04:45.450  -->  00:04:50.650
we really just need to change file reader to buffered Reader but we put the new
59

59

00:04:50.650  -->  00:04:55.720
Buffered Reader here so...
60

60

00:04:55.720  -->  00:05:00.650
.....so that's really all we need to
61

61

00:05:00.650  -->  00:05:05.360
so we're now just change it so we added the new BufferedReader which
62

62

00:05:05.360  -->  00:05:10.800
still takes to file reader as input but now the data will be read using the buffered
63

63

00:05:10.800  -->  00:05:14.430
reader which is obviously more
optimized to reading chunks rather
64

64

00:05:14.430  -->  00:05:19.160
than reading a character at a time so lets go back to main and will run this to make
65

65

00:05:19.160  -->  00:05:32.800
sure that it still works and theirs our locations so we can try typing up down east west west east
66

66

00:05:32.800  -->  00:05:37.100
west north east north and quit
67

67

00:05:39.250  -->  00:05:42.430
so that seems to be working right now
68

68

00:05:42.430  -->  00:05:48.930
so lets move on to part 2 of the challenge so part 2 we want to modify the main method of the locations class so
69

69

00:05:48.930  -->  00:05:52.610
that it uses a buffered writer to write
the data and then we want to check the
70

70

00:05:52.610  -->  00:05:56.740
locations text and txt and directions.txt to check the data has
71

71

00:05:56.740  -->  00:06:00.960
has been written successfully and as I
mentioned we need to make these changes to
72

72

00:06:00.960  -->  00:06:06.680
allow for the 0 the quit exits before using the
newly created file ok so how do we go about that
73

73

00:06:06.680  -->  00:06:11.900
well let's look at location now at the moment you can see that we are using
74

74

00:06:11.900  -->  00:06:16.800
a map a definition for map for exits
for example here on line 12 and you can
75

75

00:06:16.800  -->  00:06:23.860
see that we're using for the exits we are using a hash map so part 2 its gonna be really useful I think to
76

76

00:06:23.860  -->  00:06:28.550
compare the newly written files with
big locations and directions files and
77

77

00:06:28.550  -->  00:06:32.280
to that end it would be really useful
and helpful with the data was written
78

78

00:06:32.280  -->  00:06:37.280
out in the same order as we read it in although this
is not really necessary for populating
79

79

00:06:37.280  -->  00:06:38.860
our locations and exits
80

80

00:06:38.860  -->  00:06:43.370
map it will make comparing the files a
lot easier now at the moment we
81

81

00:06:43.370  -->  00:06:47.180
are using hash maps as you can see on the screen
there which they have no guarantee
82

82

00:06:47.180  -->  00:06:50.180
ordering of their keys and that is why in the hint
83

83

00:06:51.560  -->  00:06:56.810
I sort of mentioned linked hash map in suggesting that you use those and the reason for that is the ordering in
84

84

00:06:56.810  -->  00:07:01.190
will be the order that the keys were added to the
map instead of just hash map which is
85

85

00:07:01.190  -->  00:07:06.390
again no guaranteed ordering of the keys
so to achieve that it's relatively
86

86

00:07:06.390  -->  00:07:20.650
simple still we come back up here where we got this code if(exits != null so we change this.exits = new and we change this to linked hash map...
87

87

00:07:20.650  -->  00:07:23.440
and we'll do the same for the next line as well...
88

88

00:07:23.440  -->  00:07:27.430
and going down to the getter instead of
returning a new HashMap
89

89

00:07:28.050  -->  00:07:32.660
we want to return a new linked hash map as well so that's really the only change we need
90

90

00:07:32.660  -->  00:07:37.360
to make in location but we also have to
go back to locations.java so lets go and have a
91

91

00:07:37.360  -->  00:07:40.840
look in there and we need to make a
change in there as well
92

92

00:07:40.840  -->  00:07:45.190
to use a linked hash map so at the moment you can see here
on line 12 we're using hash map so
93

93

00:07:45.190  -->  00:07:51.630
lets change that to a linked hash map and now
within the main for the locations class
94

94

00:07:51.630  -->  00:07:57.250
we need to make some changes in here as
well but they are fairly simple as well so
95

95

00:07:57.250  -->  00:08:00.420
the change we need to make here is we are going to create a buffered writer so....
96

96

00:08:00.420  -->  00:08:26.700
....
97

97

00:08:26.700  -->  00:08:35.160
......and that should be all
98

98

00:08:35.160  -->  00:08:38.810
we need to do it all the other code their is going to be the same as it was before
99

99

00:08:38.810  -->  00:08:42.340
we don't really need to make any other
changes so we want to run this program
100

100

00:08:42.340  -->  00:08:47.820
making sure by running the main within
locations so let's just do that
101

101

00:08:47.820  -->  00:08:57.360
run location.main ok so that is finish and then what we wanted to do is make sure that the locations and locations_
102

102

00:08:57.360  -->  00:09:02.460
big.text are now identical so lets have a look
at that so locations.txt
103

103

00:09:02.460  -->  00:09:08.160
the one we have just written out and locations_big...
104

104

00:09:08.160  -->  00:09:13.360
so theirs locations_big which are
existed and then locations.txt which was
105

105

00:09:13.360  -->  00:09:18.130
the one we just created and we scroll down randomly to have a look...it seems to
106

106

00:09:18.130  -->  00:09:21.130
be pretty good but just double check
107

107

00:09:23.890  -->  00:09:57.240
...look pretty identical and if we scroll down to the bottom....location 140 is the last one....locations 140 dead end....so I think that is pretty much identical...now if we close the locations file and look at locations_big
108

108

00:09:57.240  -->  00:10:03.680
and directions.txt there are extra
109

109

00:10:03.680  -->  00:10:10.240
entries for the quit option and we've added those with
this code and now they've been added so direction_big
110

110

00:10:10.240  -->  00:10:15.170
starts on location 1 but directions.txt we talked about that
111

111

00:10:15.170  -->  00:10:19.760
0 extra entries for the quit options one for
each location now there's two ways to
112

112

00:10:19.760  -->  00:10:23.720
deal with this we could either stop the
location constructor from automatically
113

113

00:10:23.720  -->  00:10:27.520
adding the quit exit or we can change
the code that writes out the data
114

114

00:10:27.520  -->  00:10:32.990
so it doesn't write any q keys and as usually the case when programming theirs pros and
115

115

00:10:32.990  -->  00:10:37.270
cons to both approaches here so if we
prevent the location class from
116

116

00:10:37.270  -->  00:10:41.700
automatically adding the quit option we are cluttering the data file with entries
117

117

00:10:41.700  -->  00:10:45.440
that aren't really part of the game and there's
a risk that someone editing the files
118

118

00:10:45.440  -->  00:10:49.950
may forget to add the quit options for any
locations they create but if instead
119

119

00:10:49.950  -->  00:10:53.970
we change the program so it doesn't
right out the quit exits then there's
120

120

00:10:53.970  -->  00:10:58.070
really no need to remember to include
them in the data file but we
121

121

00:10:58.070  -->  00:11:01.040
lose the ability to have quit
something slightly different certain
122

122

00:11:01.040  -->  00:11:06.520
locations for example now if we wanted to
add that function so the player had been lost in a
123

123

00:11:06.520  -->  00:11:10.050
maze for long time for example you might
want to offer them the chance to take them
124

124

00:11:10.050  -->  00:11:14.100
out of it in exchange for some of their
treasure if they quit so for my solution
125

125

00:11:14.100  -->  00:11:17.730
what I'm gonna do is change the main method so
that it doesn't write out locations 0
126

126

00:11:17.730  -->  00:11:20.730
so lets go back and do that
127

127

00:11:21.390  -->  00:11:25.900
so back in locations.java so at the moment we got the code their and you can see that
128

128

00:11:25.900  -->  00:11:28.520
we are looping through
129

129

00:11:28.520  -->  00:11:32.880
and we are using the for loop for the directions that we are just
writing out everything but what we need to do
130

130

00:11:32.880  -->  00:11:38.170
to ensure that we're going to miss this
the quit option we basically add an if comparison
131

131

00:11:38.170  -->  00:11:41.650
we are gonna put...
132

132

00:11:42.710  -->  00:11:54.700
....
133

133

00:11:54.700  -->  00:12:02.370
....so once we do that we
134

134

00:12:02.370  -->  00:12:07.550
should now find that the directions file is identical so run this again and
135

135

00:12:07.550  -->  00:12:15.050
just have a look at directions.txt we are now starting with one this
136

136

00:12:15.050  -->  00:12:22.860
time and that's identical to that so if we scroll down to the bottom 396 is the last
137

137

00:12:22.860  -->  00:12:30.360
line 396 so basically we got identical outputs from both
by so that's good that we fixed that now
138

138

00:12:30.360  -->  00:12:33.270
there's actually a third way that we
could do with that issue and what we could
139

139

00:12:33.270  -->  00:12:37.770
have done as we could have completely
removed location 0 from the exits maps
140

140

00:12:37.770  -->  00:12:41.370
and dealt with the quit option by then
checking the user input in the main game
141

141

00:12:41.370  -->  00:12:45.520
that would slightly complicate the code but it would save the memory used to store all
142

142

00:12:45.520  -->  00:12:48.960
those extra exits now the memory of
courses isn't a big issue with our hundred
143

143

00:12:48.960  -->  00:12:53.080
forty locations but its always
a good idea to consider all the options
144

144

00:12:53.080  -->  00:12:58.550
before settling on a particular solution
so that's the end of this challenge we've
145

145

00:12:58.550  -->  00:13:03.150
now seen how to buffer both input and
output in the next video we will start
146

146

00:13:03.150  -->  00:13:07.090
looking at writing binary data using byte streams rather than the character
147

147

00:13:07.090  -->  00:13:09.490
streams that we've been talking about
today so see you in 
