1
1

00:00:03,900  -->  00:00:06,560
ok so next challenge challenge number
2

2

00:00:06,560  -->  00:00:12,080
three so the idea here is to come up
3

3

00:00:12,080  -->  00:00:14,310
with two more tests for the remove pairs
4

4

00:00:14,310  -->  00:00:17,010
method now normally wouldn't stop with
5

5

00:00:17,010  -->  00:00:19,470
the two tests that we've run now
6

6

00:00:19,470  -->  00:00:20,840
time for you to come up with two more
7

7

00:00:20,840  -->  00:00:22,470
tests that don't test the same
8

8

00:00:22,470  -->  00:00:25,920
functionality as those 2 existing tests so
9

9

00:00:25,920  -->  00:00:27,830
take a look at the code and see if you
10

10

00:00:27,830  -->  00:00:29,700
can think of another string that we
11

11

00:00:29,700  -->  00:00:31,670
could pass to test a specific part of
12

12

00:00:31,670  -->  00:00:33,780
the code and there's also another
13

13

00:00:33,780  -->  00:00:36,290
special input value that we would want to
14

14

00:00:36,290  -->  00:00:38,880
test and testing that would reveal
15

15

00:00:38,880  -->  00:00:41,160
another bug in our code so you don't
16

16

00:00:41,160  -->  00:00:42,630
actually have to write the tests for
17

17

00:00:42,630  -->  00:00:44,760
this part for this challenge
18

18

00:00:44,760  -->  00:00:46,770
if you don't want to at least just think of
19

19

00:00:46,770  -->  00:00:48,680
what the inputs and expected outputs
20

20

00:00:48,680  -->  00:00:51,660
would be for these scenarios so
21

21

00:00:51,660  -->  00:00:53,490
pause the video now and i'll see you
22

22

00:00:53,490  -->  00:00:54,540
when you get back
23

23

00:00:54,540  -->  00:00:58,770
ok so let's have a look at our remove
24

24

00:00:58,770  -->  00:01:04,200
pairs method again on screen so what
25

25

00:01:04,200  -->  00:01:06,660
actual tests could we have here so first we
26

26

00:01:06,660  -->  00:01:08,400
want to test input string that has a
27

27

00:01:08,400  -->  00:01:11,070
length less than two obviously doing it
28

28

00:01:11,070  -->  00:01:13,580
test here if sources less than 2 i'm
29

29

00:01:13,580  -->  00:01:14,690
going to put a test and we'll do that
30

30

00:01:14,690  -->  00:01:16,760
shortly so that test could be an empty
31

31

00:01:16,760  -->  00:01:18,780
string or it could be string with a
32

32

00:01:18,780  -->  00:01:20,760
length of one or even both scenarios
33

33

00:01:20,760  -->  00:01:23,370
there but to the other one would also
34

34

00:01:23,370  -->  00:01:25,370
want to do is add a test that passes
35

35

00:01:25,370  -->  00:01:27,930
null as the string now if we want to
36

36

00:01:27,930  -->  00:01:30,030
run that null test it would
37

37

00:01:30,030  -->  00:01:32,120
currently file since we're not checking
38

38

00:01:32,120  -->  00:01:34,550
for null in the removes pairs
39

39

00:01:34,550  -->  00:01:36,420
method on screen as you can see that
40

40

00:01:36,420  -->  00:01:39,030
let's make a few quick changes now to
41

41

00:01:39,030  -->  00:01:40,170
cope with that
42

42

00:01:40,170  -->  00:01:45,050
so we're going to put...
43

43

00:01:45,050  -->  00:01:52,010
...
44

44

00:01:52,010  -->  00:01:53,670
let's actually try that and go back
45

45

00:01:53,670  -->  00:01:58,220
add a test for that we could do test
46

46

00:01:58,220  -->  00:02:00,470
here and again normally as I have mentioned
47

47

00:02:00,470  -->  00:02:02,510
you would create do one test only
48

48

00:02:02,510  -->  00:02:04,550
per method but the simplicity of this
49

49

00:02:04,550  -->  00:02:06,030
challenge I'm going to put them all in
50

50

00:02:06,030  -->  00:02:11,030
this one method we do...
51

51

00:02:11,030  -->  00:02:17,510
...
52

52

00:02:17,510  -->  00:02:22,240
...you can see
53

53

00:02:22,240  -->  00:02:25,240
their so we're passing null and we
54

54

00:02:25,240  -->  00:02:27,320
should be getting back the value of null
55

55

00:02:27,320  -->  00:02:29,740
and what what I did there was this is again where
56

56

00:02:29,740  -->  00:02:31,100
this new feature of intellij is
57

57

00:02:31,100  -->  00:02:32,660
quite handy that was actually the
58

58

00:02:32,660  -->  00:02:35,350
message not expected value and of course
59

59

00:02:35,350  -->  00:02:36,830
because we're using these sir
60

60

00:02:36,830  -->  00:02:38,510
null we don't need to test for expected
61

61

00:02:38,510  -->  00:02:40,700
value the actual method is testing for
62

62

00:02:40,700  -->  00:02:47,740
null so message would be...
63

63

00:02:47,740  -->  00:02:54,020
...let's just
64

64

00:02:54,020  -->  00:02:59,510
run that that's pass and that's because
65

65

00:02:59,510  -->  00:03:01,520
we've got this test here if source is
66

66

00:03:01,520  -->  00:03:03,590
equal to null or its less than 2
67

67

00:03:03,590  -->  00:03:06,490
return source because source was null and
68

68

00:03:06,490  -->  00:03:13,550
you got return null fix that as well and the other
69

69

00:03:13,550  -->  00:03:18,100
we're going to test there was a...
70

70

00:03:18,100  -->  00:03:33,100
...
71

71

00:03:33,100  -->  00:03:35,090
so basically that's going to give me the
72

72

00:03:35,090  -->  00:03:38,710
tests less than two you should get back
73

73

00:03:38,710  -->  00:03:39,940
what we pass which in this case should just
74

74

00:03:39,940  -->  00:03:46,820
be an a so we'll run that test and do
75

75

00:03:46,820  -->  00:03:49,660
one more test just duplicate that and
76

76

00:03:49,660  -->  00:03:53,150
pass an empty string to make sure we
77

77

00:03:53,150  -->  00:04:01,850
get an empty string back okay
78

78

00:04:01,850  -->  00:04:04,070
so that's it that's that test test
79

79

00:04:04,070  -->  00:04:06,380
scenario we just made a revision to our
80

80

00:04:06,380  -->  00:04:08,630
code now to cater for or to test for
81

81

00:04:08,630  -->  00:04:10,550
that null and this would be something that
82

82

00:04:10,550  -->  00:04:11,840
you'll find does happen when you're
83

83

00:04:11,840  -->  00:04:14,090
creating unit tests will be thinking of
84

84

00:04:14,090  -->  00:04:15,440
conditions and then you'll realize that
85

85

00:04:15,440  -->  00:04:16,630
you haven't tested for a particular
86

86

00:04:16,630  -->  00:04:18,560
scenario you'll end up making
87

87

00:04:18,560  -->  00:04:20,560
modifications as we did here to our
88

88

00:04:20,560  -->  00:04:22,870
method to make sure that still works and
89

89

00:04:22,870  -->  00:04:24,850
again the good thing here is that with
90

90

00:04:24,850  -->  00:04:27,050
added these extra tests but the original
91

91

00:04:27,050  -->  00:04:28,850
test system in there and the fact that
92

92

00:04:28,850  -->  00:04:31,060
there's still succeeding tells us that
93

93

00:04:31,060  -->  00:04:32,620
the changes that we've made to the
94

94

00:04:32,620  -->  00:04:35,240
method haven't broken anything which is
95

95

00:04:35,240  -->  00:04:38,000
obviously the whole point of a unit test
96

96

00:04:38,000  -->  00:04:38,900
to make sure you're not breaking
97

97

00:04:38,900  -->  00:04:40,760
anything when you're changing or adding
98

98

00:04:40,760  -->  00:04:42,710
functionality as well as testing
99

99

00:04:42,710  -->  00:04:44,000
everything in that method
100

100

00:04:44,000  -->  00:04:45,680
alright let's move on to the next
101

101

00:04:45,680  -->  00:04:53,090
challenge challenge 4
102

102

00:04:53,090  -->  00:04:55,520
going to add a test for every for
103

103

00:04:55,520  -->  00:04:58,430
the every ninth char method so you want
104

104

00:04:58,430  -->  00:05:00,050
to test the following scenario so the
105

105

00:05:00,050  -->  00:05:02,120
input the char containing the
106

106

00:05:02,120  -->  00:05:05,390
letters hello in order as well as
107

107

00:05:05,390  -->  00:05:08,270
n equals 2 and the output should be the
108

108

00:05:08,270  -->  00:05:10,250
char array containing the letters E and
109

109

00:05:10,250  -->  00:05:13,670
L in that order so see how you go with that add a
110

110

00:05:13,670  -->  00:05:16,550
unit test for that pause the video and
111

111

00:05:16,550  -->  00:05:20,870
I'll see you when you get back alright
112

112

00:05:20,870  -->  00:05:23,510
so since we're testing in an array result we
113

113

00:05:23,510  -->  00:05:25,430
need to use the insert array equals
114

114

00:05:25,430  -->  00:05:28,130
method so let's do that in the equal nth char
115

115

00:05:28,130  -->  00:05:32,420
so going to delete that....
116

116

00:05:32,420  -->  00:05:33,980
....
117

117

00:05:33,980  -->  00:06:09,950
...
118

118

00:06:09,950  -->  00:06:13,340
...now to test this
119

119

00:06:13,340  -->  00:06:15,170
we actually need to use these certs
120

120

00:06:15,170  -->  00:06:17,630
array equals method and that's because
121

121

00:06:17,630  -->  00:06:19,700
when testing arrays the cert equals
122

122

00:06:19,700  -->  00:06:22,880
method only returns true if the if
123

123

00:06:22,880  -->  00:06:24,770
the arrays are the exact same instance
124

124

00:06:24,770  -->  00:06:26,600
so it's the wrong method to use in this
125

125

00:06:26,600  -->  00:06:28,790
case just to confirm that lets actually
126

126

00:06:28,790  -->  00:06:31,250
test the array to see that it works so we're
127

127

00:06:31,250  -->  00:06:37,760
going to use an assert....
128

128

00:06:37,760  -->  00:06:38,990
and if that doesn't come up for you just like for me go over here
129

129

00:06:38,990  -->  00:06:41,330
here click on import
130

130

00:06:41,330  -->  00:06:44,480
static method you can see up there and
131

131

00:06:44,480  -->  00:06:46,100
then what we want to test in here is
132

132

00:06:46,100  -->  00:06:48,650
we need to create a new char array
133

133

00:06:48,650  -->  00:06:50,540
which would be what would be expected
134

134

00:06:50,540  -->  00:06:52,190
output is so we're going to do...
135

135

00:06:52,190  -->  00:07:08,150
...
136

136

00:07:08,150  -->  00:07:12,280
if we run that method that should work
137

137

00:07:12,280  -->  00:07:15,740
you can see that's worked ok and just to
138

138

00:07:15,740  -->  00:07:18,200
confirm if we do changes to use cert
139

139

00:07:18,200  -->  00:07:29,420
equals and try to run that we do get
140

140

00:07:29,420  -->  00:07:31,760
that failure and that's because the two
141

141

00:07:31,760  -->  00:07:33,830
char arrays are actually different and
142

142

00:07:33,830  -->  00:07:35,900
assert equals is only checking to see if
143

143

00:07:35,900  -->  00:07:37,610
the arrays are the exact same instance
144

144

00:07:37,610  -->  00:07:39,200
that's the reason that we're using that
145

145

00:07:39,200  -->  00:07:43,810
so let's undo that change now we're back
146

146

00:07:43,810  -->  00:07:45,550
to where we were which was these cert
147

147

00:07:45,550  -->  00:07:50,480
arrays equals running that and we are good
148

148

00:07:50,480  -->  00:07:51,340
to go again
149

149

00:07:51,340  -->  00:07:52,640
alright so let's move on to the next
150

150

00:07:52,640  -->  00:08:00,980
challenge challenge number five so add a
151

151

00:08:00,980  -->  00:08:04,640
test for the case when n is greater than
152

152

00:08:04,640  -->  00:08:06,800
the length of the array they can add a
153

153

00:08:06,800  -->  00:08:08,390
new test case or you can actually add
154

154

00:08:08,390  -->  00:08:10,640
the test to the existing test case method
155

155

00:08:10,640  -->  00:08:11,990
it's up to you as to which way you want
156

156

00:08:11,990  -->  00:08:12,890
to go
157

157

00:08:12,890  -->  00:08:14,560
so again write that test that tests the
158

158

00:08:14,560  -->  00:08:16,460
case when the value of n is greater than
159

159

00:08:16,460  -->  00:08:19,210
the length of the string and you can add
160

160

00:08:19,210  -->  00:08:21,650
you test case or you can add the test to
161

161

00:08:21,650  -->  00:08:24,110
the existing test case up to you pause the
162

162

00:08:24,110  -->  00:08:26,330
video and I'll see you when you get back
163

163

00:08:26,330  -->  00:08:29,480
ok so for this one we're just going to
164

164

00:08:29,480  -->  00:08:32,840
put the test on the next line up here so
165

165

00:08:32,840  -->  00:08:37,160
i'm going to do...
166

166

00:08:37,160  -->  00:08:48,590
...
167

167

00:08:48,590  -->  00:08:54,170
..
168

168

00:08:54,170  -->  00:09:17,940
...
169

169

00:09:17,940  -->  00:09:23,700
ok let's run that ok that passes you can
170

170

00:09:23,700  -->  00:09:24,930
see that time we've got the right
171

171

00:09:24,930  -->  00:09:27,240
response there next challenge
172

172

00:09:27,240  -->  00:09:34,300
challenge number six
173

173

00:09:34,300  -->  00:09:36,580
that's to add a test for the null if odd
174

174

00:09:36,580  -->  00:09:39,490
length method so in actual facts the
175

175

00:09:39,490  -->  00:09:41,200
challenge is to write two tests for that
176

176

00:09:41,200  -->  00:09:43,780
method you want to include both tests in
177

177

00:09:43,780  -->  00:09:45,490
the null if odd length test
178

178

00:09:45,490  -->  00:09:48,160
method in one of them passed a string its going
179

179

00:09:48,160  -->  00:09:50,200
to even length and in the second test
180

180

00:09:50,200  -->  00:09:52,630
passes string that's got an odd length so
181

181

00:09:52,630  -->  00:09:53,650
that's the challenge
182

182

00:09:53,650  -->  00:09:55,720
pause the video I'll see you when you
183

183

00:09:55,720  -->  00:09:58,090
get back
184

184

00:09:58,090  -->  00:10:00,910
ok so when testing for null and not null
185

185

00:10:00,910  -->  00:10:03,160
we want to use the acert null and acert not null
186

186

00:10:03,160  -->  00:10:04,750
methods
187

187

00:10:04,750  -->  00:10:06,850
let's go down to our null if odd length
188

188

00:10:06,850  -->  00:10:11,440
method test...
189

189

00:10:11,440  -->  00:10:52,510
...
190

190

00:10:52,510  -->  00:10:54,430
...so lets
191

191

00:10:54,430  -->  00:11:02,470
actually run that test passes challenge
192

192

00:11:02,470  -->  00:11:07,640
number seven
193

193

00:11:07,640  -->  00:11:08,990
you want to add a test now for the
194

194

00:11:08,990  -->  00:11:11,360
converter method so test the converter
195

195

00:11:11,360  -->  00:11:12,830
method with the following input and
196

196

00:11:12,830  -->  00:11:16,130
output the input should be a equals 10 b equals 5
197

197

00:11:16,130  -->  00:11:18,080
and the output we should be getting
198

198

00:11:18,080  -->  00:11:21,260
back is 300 so add that test
199

199

00:11:21,260  -->  00:11:22,910
pause the video and I'll see you when
200

200

00:11:22,910  -->  00:11:25,730
you get back
201

201

00:11:25,730  -->  00:11:28,550
ok so let's add that test will
202

202

00:11:28,550  -->  00:11:31,160
remove this fail call first
203

203

00:11:31,160  -->  00:11:33,980
from our converter test and then we
204

204

00:11:33,980  -->  00:11:37,670
want to do....
205

205

00:11:37,670  -->  00:12:05,420
...
206

206

00:12:05,420  -->  00:12:07,760
...lets actually run that
207

207

00:12:07,760  -->  00:12:11,960
and you see that that's worked
208

208

00:12:11,960  -->  00:12:15,440
successfully alright I'm going to end
209

209

00:12:15,440  -->  00:12:17,660
the video here in the next video we'll
210

210

00:12:17,660  -->  00:12:18,860
finish off the challenges with the
211

211

00:12:18,860  -->  00:12:20,780
remaining 3 i'll see you in the next
212

212

00:12:20,780  -->  00:12:26,170
video
