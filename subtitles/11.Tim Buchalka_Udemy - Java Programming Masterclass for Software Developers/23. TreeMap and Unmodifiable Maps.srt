1
1

00:00:05,720  -->  00:00:06,810
- [Tim] So continuing on now,
2

2

00:00:06,810  -->  00:00:08,630
before we actually sell some stock
3

3

00:00:08,630  -->  00:00:12,030
let's check what happens if
we add an existing item again.
4

4

00:00:12,030  -->  00:00:13,420
If you remember, we've
actually built in the
5

5

00:00:13,420  -->  00:00:15,380
mechanism for that, for adding stock
6

6

00:00:15,380  -->  00:00:17,530
to see if there's already stock in them,
7

7

00:00:17,530  -->  00:00:18,910
it should add to the quantity.
8

8

00:00:18,910  -->  00:00:20,700
So let's go back to our Main.java
9

9

00:00:20,700  -->  00:00:23,230
and we'll go through and we'll
10

10

00:00:23,230  -->  00:00:25,650
try and add some additional cups.
11

11

00:00:25,650  -->  00:00:28,830
So I'm gonna go back
here and add this code.
12

12

00:00:28,830  -->  00:00:29,930
And let's actually add some more.
13

13

00:00:29,930  -->  00:00:31,290
So you can see on line 19 we've
14

14

00:00:31,290  -->  00:00:33,160
added 200, a quantity of 200.
15

15

00:00:33,160  -->  00:00:36,070
Let's do temp equals new StockItem.
16

16

00:00:37,750  -->  00:00:41,670
We'll do a cup again,
0.45 this time and seven,
17

17

00:00:43,230  -->  00:00:44,350
so that should give us a total
18

18

00:00:44,350  -->  00:00:46,930
of 207 with the 200 on line 19.
19

19

00:00:49,460  -->  00:00:50,770
And obviously, I need to add that as well,
20

20

00:00:50,770  -->  00:00:54,440
so I do the stockList.add
again, paste that code in there,
21

21

00:00:54,440  -->  00:00:57,110
and let's just try running that.
22

22

00:01:01,470  -->  00:01:02,630
So that seems to be working nicely.
23

23

00:01:02,630  -->  00:01:05,170
So let's try selling some.
24

24

00:01:05,170  -->  00:01:08,190
So we're going to create
a static method in here,
25

25

00:01:08,190  -->  00:01:10,170
in this main class, to do that.
26

26

00:01:10,170  -->  00:01:12,840
So let's go through and do that.
27

27

00:01:17,610  -->  00:01:21,360
So I'm gonna do a public
static int sellItem.
28

28

00:01:23,290  -->  00:01:27,460
It's going to accept a basket,
the string being the item
29

29

00:01:30,010  -->  00:01:32,640
we're going to be
selling and the quantity.
30

30

00:01:32,640  -->  00:01:34,140
Quantity, like so.
31

31

00:01:36,720  -->  00:01:38,640
And retrieve the item
from the stock list first,
32

32

00:01:38,640  -->  00:01:42,800
from stock list, StockItem
equals stockList.get item,
33

33

00:01:50,990  -->  00:01:52,890
and then we're gonna
check whether it's a null,
34

34

00:01:52,890  -->  00:01:55,270
and if it is, it means obviously
it's not in our stock list.
35

35

00:01:55,270  -->  00:01:57,720
So if it's equal to null.
36

36

00:01:57,720  -->  00:02:00,090
Then we're gonna print an error message,
37

37

00:02:00,090  -->  00:02:02,380
We don't sell plus item, because
38

38

00:02:02,380  -->  00:02:04,460
obviously, it's not in our stock list.
39

39

00:02:04,460  -->  00:02:06,290
And we'll return zero.
40

40

00:02:06,290  -->  00:02:09,430
So we're returning zero as
the quantity for this method.
41

41

00:02:09,430  -->  00:02:11,250
And that will tell us, it will tell
42

42

00:02:11,250  -->  00:02:12,670
the calling process that the item
43

43

00:02:12,670  -->  00:02:14,130
was invalid, and it didn't actually
44

44

00:02:14,130  -->  00:02:16,300
exist, because the quantity was zero.
45

45

00:02:16,300  -->  00:02:17,790
So next, we wanna do a test to
46

46

00:02:17,790  -->  00:02:21,100
see that we can sell the stock.
47

47

00:02:21,100  -->  00:02:22,230
So the way we do that, we're gonna
48

48

00:02:22,230  -->  00:02:26,400
put if stockList.sellStock(itemQuantity),
49

49

00:02:31,460  -->  00:02:34,300
if that is not equal to zero, then
50

50

00:02:37,310  -->  00:02:41,480
we're going to do
basket.addToBasket(stockItemQuantity).
51

51

00:02:44,510  -->  00:02:46,540
So again, just looking at cell stock,
52

52

00:02:46,540  -->  00:02:47,650
we can go back in there and just
53

53

00:02:47,650  -->  00:02:49,950
see what that was doing again.
54

54

00:02:49,950  -->  00:02:51,480
You can see that it's actually literally
55

55

00:02:51,480  -->  00:02:52,640
selling the stock, so it's actually
56

56

00:02:52,640  -->  00:02:54,700
deducting it from the stock at that point.
57

57

00:02:54,700  -->  00:02:56,950
So, we've done a test then.
58

58

00:02:59,080  -->  00:03:00,600
To make sure it's not equal to zero,
59

59

00:03:00,600  -->  00:03:02,160
which means we have got a valid quantity.
60

60

00:03:02,160  -->  00:03:03,570
So at that point, it's been taken out
61

61

00:03:03,570  -->  00:03:05,460
of stock, so the next line of code
62

62

00:03:05,460  -->  00:03:07,640
on line 55 has to add it to the basket.
63

63

00:03:07,640  -->  00:03:08,700
Then one other thing we need to do
64

64

00:03:08,700  -->  00:03:10,330
is we need to return the quantity,
65

65

00:03:10,330  -->  00:03:14,450
so we know how many were effectively sold.
66

66

00:03:14,450  -->  00:03:16,450
Return quantity like so.
67

67

00:03:17,610  -->  00:03:21,210
And we'll just put a final return 0 here.
68

68

00:03:21,210  -->  00:03:22,480
Which means there was a problem.
69

69

00:03:22,480  -->  00:03:23,530
If it gets down to that line of code, it
70

70

00:03:23,530  -->  00:03:26,850
means it didn't have sufficient
stock to be able to sell.
71

71

00:03:26,850  -->  00:03:29,270
So that should pretty well make sense,
72

72

00:03:29,270  -->  00:03:30,530
you should be self-documenting.
73

73

00:03:30,530  -->  00:03:33,690
Sort of understand what's
happening now with the sellItem.
74

74

00:03:33,690  -->  00:03:34,890
So what we should be able to do now
75

75

00:03:34,890  -->  00:03:37,290
is create a basket and sell some items.
76

76

00:03:37,290  -->  00:03:38,510
So let's go and look at doing that.
77

77

00:03:38,510  -->  00:03:40,930
So here, I'm gonna put Basket
78

78

00:03:42,250  -->  00:03:46,250
timsBasket equals new Basket().
79

79

00:03:47,680  -->  00:03:49,680
That's my name.
80

80

00:03:49,680  -->  00:03:51,030
And let's try selling some items.
81

81

00:03:51,030  -->  00:03:54,590
So sellItem, and the name of the basket.
82

82

00:03:54,590  -->  00:03:55,510
timsBasket.
83

83

00:03:56,580  -->  00:03:58,050
So the car that we know that we've got,
84

84

00:03:58,050  -->  00:04:00,080
one of those in our list of items
85

85

00:04:00,080  -->  00:04:04,070
that we added above, and one, quantity
86

86

00:04:04,070  -->  00:04:04,900
of one, and we're going to print
87

87

00:04:04,900  -->  00:04:06,630
out timsBasket, remembering it's
88

88

00:04:06,630  -->  00:04:10,040
got a toString(), so that
should enable us to see it.
89

89

00:04:10,040  -->  00:04:11,700
And just to confirm, car did have stock.
90

90

00:04:11,700  -->  00:04:14,340
They had two in stock.
91

91

00:04:14,340  -->  00:04:15,180
All right.
92

92

00:04:15,180  -->  00:04:16,050
And let's try another one.
93

93

00:04:16,050  -->  00:04:16,880
We're gonna try it on a separate line.
94

94

00:04:16,880  -->  00:04:20,460
So sellItem(timsBasket) again.
95

95

00:04:20,460  -->  00:04:24,930
Car 1, that's basically
selling another one.
96

96

00:04:24,930  -->  00:04:27,260
And we'll print out timsBasket again.
97

97

00:04:27,260  -->  00:04:29,030
Just check the quantity is two,
98

98

00:04:29,030  -->  00:04:31,070
and now we should get an error.
99

99

00:04:31,070  -->  00:04:33,550
So if we do a sellItem, try and do it
100

100

00:04:33,550  -->  00:04:34,680
for a third time, we know that
101

101

00:04:34,680  -->  00:04:37,260
the car's quantity is only two.
102

102

00:04:38,100  -->  00:04:41,610
So we're going to do timsBasket car again,
103

103

00:04:41,610  -->  00:04:43,640
the third time, and one, when that should
104

104

00:04:43,640  -->  00:04:45,830
fail, so we'll see what
happens when we do that.
105

105

00:04:45,830  -->  00:04:47,410
And also let's try doing the same thing,
106

106

00:04:47,410  -->  00:04:50,870
but with a product we know doesn't exist.
107

107

00:04:50,870  -->  00:04:54,640
Say a spinner, which we know
that we haven't got five.
108

108

00:04:54,640  -->  00:04:57,070
And then print out timsBasket, just
109

109

00:04:57,070  -->  00:04:58,710
to confirm that those two extra items
110

110

00:04:58,710  -->  00:05:00,670
on line 52 and 53 weren't added.
111

111

00:05:00,670  -->  00:05:02,990
And obviously, spinner
isn't in the list of
112

112

00:05:02,990  -->  00:05:07,520
our stock items, so that
should fail for that reason.
113

113

00:05:07,520  -->  00:05:08,760
And let's just do a couple more.
114

114

00:05:08,760  -->  00:05:13,180
So we'll do a sellItem,
let's try timsBasket
115

115

00:05:13,180  -->  00:05:16,140
again, juice, which we know we've got.
116

116

00:05:16,140  -->  00:05:17,700
Oops.
117

117

00:05:17,700  -->  00:05:18,530
Juice.
118

118

00:05:19,820  -->  00:05:20,650
And four.
119

119

00:05:22,540  -->  00:05:27,230
sellItem(timsBasket) again, cup.
120

120

00:05:27,230  -->  00:05:28,060
12 cups.
121

121

00:05:29,470  -->  00:05:33,640
sellItem(timsBasket, "Bread", 1).
122

122

00:05:35,680  -->  00:05:40,090
And we'll do a print
out again of timsBasket.
123

123

00:05:40,090  -->  00:05:41,490
And then let's finish it off with
124

124

00:05:41,490  -->  00:05:44,520
a print out of the stock list.
125

125

00:05:44,520  -->  00:05:46,140
Stock list like so.
126

126

00:05:46,140  -->  00:05:48,110
So that should be that, so let's
127

127

00:05:48,110  -->  00:05:52,020
actually run this and
see whether it does work.
128

128

00:05:52,880  -->  00:05:54,970
Okay, so looking at the output, the
129

129

00:05:54,970  -->  00:05:56,620
output up here is starting from
130

130

00:05:56,620  -->  00:05:59,200
what we've executed on line 46.
131

131

00:05:59,200  -->  00:06:01,310
Shopping basket Tim contains one item.
132

132

00:06:01,310  -->  00:06:02,230
We should probably fix that so it
133

133

00:06:02,230  -->  00:06:05,270
says item if it's less than two.
134

134

00:06:05,270  -->  00:06:09,270
You can say zero items
or one item or two items,
135

135

00:06:10,110  -->  00:06:11,560
so basically if it's one, we should change
136

136

00:06:11,560  -->  00:06:15,250
that perhaps so it shows item,
but we can do that later.
137

137

00:06:15,250  -->  00:06:17,570
So car purchased, total cost.
138

138

00:06:17,570  -->  00:06:19,430
Shopping basket contains one item.
139

139

00:06:19,430  -->  00:06:21,430
Noting that it still contains one item
140

140

00:06:21,430  -->  00:06:23,240
the next time around
because it's still only
141

141

00:06:23,240  -->  00:06:24,830
one item which is a car, but now we've
142

142

00:06:24,830  -->  00:06:26,570
purchased two of them, and the total cost
143

143

00:06:26,570  -->  00:06:29,500
there is now 25, two times $12.50.
144

144

00:06:29,500  -->  00:06:30,880
And we've got an error here saying
145

145

00:06:30,880  -->  00:06:33,030
we don't -- oh, I misspelt that.
146

146

00:06:33,030  -->  00:06:36,950
We don't actually sell
spinner, which is correct.
147

147

00:06:36,950  -->  00:06:38,940
And notice that it also the third time,
148

148

00:06:38,940  -->  00:06:42,650
it didn't add the car
to the shopping basket,
149

149

00:06:42,650  -->  00:06:45,480
which is what we want, basically, because
150

150

00:06:45,480  -->  00:06:46,650
obviously at that point, it didn't
151

151

00:06:46,650  -->  00:06:48,610
have any in stock and we can confirm that
152

152

00:06:48,610  -->  00:06:50,280
there were zero in stock here for
153

153

00:06:50,280  -->  00:06:51,530
the stock list and the bottom nerve,
154

154

00:06:51,530  -->  00:06:53,830
value zero, because it's because
we've sold the two of them.
155

155

00:06:53,830  -->  00:06:56,410
And the shopping basket, we know that
156

156

00:06:56,410  -->  00:06:57,690
we've added those other things.
157

157

00:06:57,690  -->  00:07:00,100
We've added the juice, four of them.
158

158

00:07:00,100  -->  00:07:02,320
We've added the cup, twelve of them.
159

159

00:07:02,320  -->  00:07:04,560
And we've added the bread, one of them.
160

160

00:07:04,560  -->  00:07:06,240
So we've got four items in total.
161

161

00:07:06,240  -->  00:07:09,440
Two cars, four juice,
12 cups, and four bread.
162

162

00:07:09,440  -->  00:07:12,870
Total cost is $41.26,
and a new stock list.
163

163

00:07:12,870  -->  00:07:16,010
Bread was 100 initially, that's now 99.
164

164

00:07:16,010  -->  00:07:18,050
Cars, it was 0 in stock as I mentioned.
165

165

00:07:18,050  -->  00:07:22,110
Juices, 32, so I think we had 44 first.
166

166

00:07:22,110  -->  00:07:24,260
Sorry, we sold four juice, so that's 32.
167

167

00:07:24,260  -->  00:07:26,440
There was 36 for starters on line 27.
168

168

00:07:26,440  -->  00:07:28,770
There's now 32 in stock
as you can see, so that's
169

169

00:07:28,770  -->  00:07:31,470
correct, and the other one was cup.
170

170

00:07:31,470  -->  00:07:33,600
We had 207 of those.
171

171

00:07:33,600  -->  00:07:36,320
So there should now be 195 left.
172

172

00:07:36,320  -->  00:07:37,540
Because remembering that we had
173

173

00:07:37,540  -->  00:07:39,610
200, then we added another seven.
174

174

00:07:39,610  -->  00:07:41,730
So the code seems to be working nicely.
175

175

00:07:41,730  -->  00:07:43,820
Let's just fix that typo.
176

176

00:07:45,970  -->  00:07:47,040
And we'll fix that, we don't.
177

177

00:07:47,040  -->  00:07:49,390
That's my typo there, so
we'll just fix that up.
178

178

00:07:49,390  -->  00:07:51,810
"We don't sell " + item.
179

179

00:07:52,740  -->  00:07:55,240
And looking at our stock list,
180

180

00:07:58,800  -->  00:08:01,200
and here's the line in the basket.
181

181

00:08:01,200  -->  00:08:04,360
We can change this, where it
said it contains one item.
182

182

00:08:04,360  -->  00:08:06,640
So if we've got zero items or greater
183

183

00:08:06,640  -->  00:08:09,110
than one item, then we should show the
184

184

00:08:09,110  -->  00:08:11,160
word "items", but if it's actually one,
185

185

00:08:11,160  -->  00:08:15,080
list size is exactly one, then what we
186

186

00:08:15,080  -->  00:08:17,360
should really do is just
show the word items.
187

187

00:08:17,360  -->  00:08:19,840
So we could do something like plus,
188

188

00:08:19,840  -->  00:08:24,010
and we can go list.size() is equal to one,
189

189

00:08:35,080  -->  00:08:38,630
is equal to one, we're gonna print item.
190

190

00:08:38,630  -->  00:08:42,210
Item otherwise, we're
going to print items.
191

191

00:08:45,060  -->  00:08:48,390
Then we're gonna add the last backslash,
192

192

00:08:50,180  -->  00:08:54,350
so if we do that, so if we
do something like that now.
193

193

00:09:06,470  -->  00:09:07,600
So basically, if the list size
194

194

00:09:07,600  -->  00:09:09,100
is equal to one, we're gonna print out
195

195

00:09:09,100  -->  00:09:10,420
the word "item", otherwise we're
196

196

00:09:10,420  -->  00:09:12,170
gonna print out the word "items".
197

197

00:09:12,170  -->  00:09:13,280
Then in both cases, we're still
198

198

00:09:13,280  -->  00:09:16,460
gonna end the line with a new line.
199

199

00:09:16,460  -->  00:09:17,590
So we'll just go back and just check that
200

200

00:09:17,590  -->  00:09:21,760
that's actually fixed that
other little bit of output.
201

201

00:09:22,700  -->  00:09:25,370
It now contains one item,
it contains four items.
202

202

00:09:25,370  -->  00:09:27,650
So that's fixed -- made that work a little
203

203

00:09:27,650  -->  00:09:29,040
bit nicer for us, so that's good.
204

204

00:09:29,040  -->  00:09:30,810
And just confirmation that we don't
205

205

00:09:30,810  -->  00:09:33,320
sell spinner, we get that message now,
206

206

00:09:33,320  -->  00:09:35,800
that's correctly --
fixed the typo as well.
207

207

00:09:35,800  -->  00:09:38,020
There's no spinners in stock,
so we do get that message.
208

208

00:09:38,020  -->  00:09:40,070
And obviously, we attempt to sell the
209

209

00:09:40,070  -->  00:09:44,040
third car also failed because
we've only got two in stock.
210

210

00:09:44,040  -->  00:09:45,450
Probably ideally there, we probably
211

211

00:09:45,450  -->  00:09:48,980
wanna put to a message out to
say what's actually happened.
212

212

00:09:48,980  -->  00:09:53,310
So we could come down to the
sellItem, close this down.
213

213

00:09:53,310  -->  00:09:56,540
And we could've done something
along the lines here.
214

214

00:09:56,540  -->  00:10:00,120
That third one, we
could put if sellItem --
215

215

00:10:05,210  -->  00:10:06,240
actually, what I'll do
is I'll just read on
216

216

00:10:06,240  -->  00:10:07,540
the code from the previous line.
217

217

00:10:07,540  -->  00:10:09,840
So if store.sellItem, and if that
218

218

00:10:09,840  -->  00:10:12,340
is not equal to one, I can do,
219

219

00:10:18,800  -->  00:10:21,870
"There are no more cars in stock."
220

220

00:10:21,870  -->  00:10:24,900
Just to verify that it's actually working.
221

221

00:10:24,900  -->  00:10:25,740
So if we run that again, we should
222

222

00:10:25,740  -->  00:10:27,660
now get an error message, or a message
223

223

00:10:27,660  -->  00:10:32,070
on the screen to confirm
that it didn't work.
224

224

00:10:32,070  -->  00:10:33,290
"There are no more cars in stock."
225

225

00:10:33,290  -->  00:10:34,970
As you can see.
226

226

00:10:34,970  -->  00:10:36,320
So I've done that for that
one line, but probably
227

227

00:10:36,320  -->  00:10:38,140
that would be a good idea to do for
228

228

00:10:38,140  -->  00:10:40,340
every call to sellItem, checking that
229

229

00:10:40,340  -->  00:10:41,940
the return value was either equal
230

230

00:10:41,940  -->  00:10:43,430
to the number requested or not
231

231

00:10:43,430  -->  00:10:44,920
equal to zero, and it doesn't
232

232

00:10:44,920  -->  00:10:46,460
matter which condition we use there.
233

233

00:10:46,460  -->  00:10:47,590
And then putting a message there
234

234

00:10:47,590  -->  00:10:48,780
if there's not enough in stock, just
235

235

00:10:48,780  -->  00:10:49,750
be a little bit nicer than just not
236

236

00:10:49,750  -->  00:10:53,260
printing anything in the
case of it not working.
237

237

00:10:53,260  -->  00:10:54,520
Now in the contents of the shopping basket
238

238

00:10:54,520  -->  00:10:57,790
are printed, they actually
appear in a random order.
239

239

00:10:57,790  -->  00:10:59,230
And you can see here that that's just
240

240

00:10:59,230  -->  00:11:00,800
sort of all over the place.
241

241

00:11:00,800  -->  00:11:01,970
It's not sorted it all.
242

242

00:11:01,970  -->  00:11:03,210
Now we could have them
printed in the order
243

243

00:11:03,210  -->  00:11:04,210
they're added in the basket by
244

244

00:11:04,210  -->  00:11:06,520
changing the Basket class HashMap to a
245

245

00:11:06,520  -->  00:11:08,210
linked HashMap, but this is a good
246

246

00:11:08,210  -->  00:11:11,010
opportunity to see a TreeMap in use.
247

247

00:11:11,010  -->  00:11:12,290
Now because we've already implemented the
248

248

00:11:12,290  -->  00:11:14,660
compare interface in Basket, the only
249

249

00:11:14,660  -->  00:11:16,370
change we really need to make is to the
250

250

00:11:16,370  -->  00:11:19,920
constructor itself to get this to work.
251

251

00:11:19,920  -->  00:11:22,290
So let me go back to Basket.
252

252

00:11:22,290  -->  00:11:23,770
I'll just close this down.
253

253

00:11:23,770  -->  00:11:24,600
Now at the moment, you can see the
254

254

00:11:24,600  -->  00:11:26,620
constructor, we're using a HashMap.
255

255

00:11:26,620  -->  00:11:28,020
All we really need to
do to get that to work
256

256

00:11:28,020  -->  00:11:30,360
is change that to a TreeMap.
257

257

00:11:32,430  -->  00:11:34,090
So if we do that now, and just accept
258

258

00:11:34,090  -->  00:11:37,090
the import, like so, and we can just
259

259

00:11:41,540  -->  00:11:42,710
comment out -- I'll just delete the
260

260

00:11:42,710  -->  00:11:44,260
HashMap now, TreeMap's in there.
261

261

00:11:44,260  -->  00:11:45,690
If we run that again, we should find the
262

262

00:11:45,690  -->  00:11:48,690
Basket is now in alphabetical order.
263

263

00:11:50,500  -->  00:11:51,340
And you notice down here, now the shopping
264

264

00:11:51,340  -->  00:11:52,840
basket is in alphabetical order,
265

265

00:11:52,840  -->  00:11:54,340
and notice this output here.
266

266

00:11:54,340  -->  00:11:56,730
The compareTo is now being called,
267

267

00:11:56,730  -->  00:11:58,260
and that's because we're using a TreeMap
268

268

00:11:58,260  -->  00:12:00,990
and it's sorting it for us automatically.
269

269

00:12:00,990  -->  00:12:03,530
Which is seriously pretty cool.
270

270

00:12:03,530  -->  00:12:05,230
So the point with this
now is as you can see
271

271

00:12:05,230  -->  00:12:08,380
is that adding items to a TreeMap
272

272

00:12:08,380  -->  00:12:11,890
results in far more work for your code
273

273

00:12:11,890  -->  00:12:13,350
than using a HashMap, and that's because
274

274

00:12:13,350  -->  00:12:15,550
each time we're entering a stock item,
275

275

00:12:15,550  -->  00:12:19,270
it's using the .compareTo method to check.
276

276

00:12:19,270  -->  00:12:23,090
Basically, with the order,
comparing that in other words.
277

277

00:12:23,090  -->  00:12:24,550
Now the reason for that
is because the TreeMap
278

278

00:12:24,550  -->  00:12:27,030
has to actually check through its list to
279

279

00:12:27,030  -->  00:12:29,840
find the correct place
to insert the new item,
280

280

00:12:29,840  -->  00:12:31,520
and of course it does
that by comparing the
281

281

00:12:31,520  -->  00:12:34,190
items it finds with the item being added.
282

282

00:12:34,190  -->  00:12:36,180
Now although the TreeMap implementation is
283

283

00:12:36,180  -->  00:12:41,170
quite efficient, this is the
one created by Java, by Oracle.
284

284

00:12:41,170  -->  00:12:42,820
Keep in mind that there is a performance
285

285

00:12:42,820  -->  00:12:44,980
cost to having the
items ordered and that's
286

286

00:12:44,980  -->  00:12:47,110
something to consider
when trying to decide
287

287

00:12:47,110  -->  00:12:49,640
between a TreeMap and one of the unsorted
288

288

00:12:49,640  -->  00:12:52,180
Map classes like HashMap
and LinkedHashMap,
289

289

00:12:52,180  -->  00:12:53,950
which is always gonna be faster
290

290

00:12:53,950  -->  00:12:56,500
because it doesn't need to
execute that extra code.
291

291

00:12:56,500  -->  00:12:58,210
Now before we move onto
the challenge in the
292

292

00:12:58,210  -->  00:13:00,940
next video, let's talk about a couple of
293

293

00:13:00,940  -->  00:13:02,400
other things that we should
294

294

00:13:02,400  -->  00:13:04,620
really look at in a bit more detail.
295

295

00:13:04,620  -->  00:13:06,330
Firstly, let's attempt to
use the StockList class
296

296

00:13:06,330  -->  00:13:10,310
items() method to bypass the
correct way to add stock.
297

297

00:13:10,310  -->  00:13:13,600
So what I mean by that is
let's just close this down,
298

298

00:13:13,600  -->  00:13:16,250
and right down here, let's try and
299

299

00:13:16,250  -->  00:13:20,300
do -- get access to a product
that we know doesn't exist.
300

300

00:13:20,300  -->  00:13:21,510
So temp equals -- well, actually what
301

301

00:13:21,510  -->  00:13:22,860
we're gonna do is try and save it.
302

302

00:13:22,860  -->  00:13:25,140
So new StockItem(), remembering that
303

303

00:13:25,140  -->  00:13:28,610
it's a unmodifiable Map, so we should
304

304

00:13:28,610  -->  00:13:30,020
actually get a message
if we try and actually
305

305

00:13:30,020  -->  00:13:33,360
put some data in there, but
let's confirm that works.
306

306

00:13:33,360  -->  00:13:35,500
So new StockItem(), let's
make a new StockItem().
307

307

00:13:35,500  -->  00:13:37,420
We'll call it pen, $12.
308

308

00:13:38,920  -->  00:13:40,320
And let's try and add it.
309

309

00:13:40,320  -->  00:13:44,150
So StockList.items, remembering that
310

310

00:13:44,150  -->  00:13:47,230
returns this unmodifiable Map.
311

311

00:13:47,230  -->  00:13:50,040
Dot put, we're gonna try and save it,
312

312

00:13:50,040  -->  00:13:54,450
so we're gonna put temp.getName,
name obviously being
313

313

00:13:54,450  -->  00:13:58,400
pen, and then the actual StockItem itself.
314

314

00:13:58,400  -->  00:14:02,400
So let's actually run
that and see what happens.
315

315

00:14:04,010  -->  00:14:05,430
And you can see we do
actually get an error.
316

316

00:14:05,430  -->  00:14:08,040
We get an UnsupportedOperationException.
317

317

00:14:08,040  -->  00:14:09,920
And that's good, because that's confirming
318

318

00:14:09,920  -->  00:14:11,730
that it's working fine, because we
319

319

00:14:11,730  -->  00:14:13,720
know that we setup the items,
320

320

00:14:13,720  -->  00:14:16,390
and just to go back and confirm.
321

321

00:14:18,850  -->  00:14:19,810
Going to StockList.
322

322

00:14:19,810  -->  00:14:22,710
Let's close this down
and look at our items.
323

323

00:14:22,710  -->  00:14:25,180
Return collections.unmodifyableMap,
324

324

00:14:25,180  -->  00:14:27,250
remembering that our list of items
325

325

00:14:27,250  -->  00:14:29,460
and obviously that should've returned an
326

326

00:14:29,460  -->  00:14:31,200
error, and we do actually get an error.
327

327

00:14:31,200  -->  00:14:32,750
That's because it's obviously an
328

328

00:14:32,750  -->  00:14:34,590
unmodifiable map, so you can see
329

329

00:14:34,590  -->  00:14:36,800
that's a good security mechanism in place
330

330

00:14:36,800  -->  00:14:39,000
to ensure that there's no other way
331

331

00:14:39,000  -->  00:14:41,130
that items can be added
to our basket other
332

332

00:14:41,130  -->  00:14:44,080
than using the methods that
we've actually defined.
333

333

00:14:44,080  -->  00:14:45,660
With that said, there's
one thing to be aware
334

334

00:14:45,660  -->  00:14:47,620
of, though, when allowing calling
335

335

00:14:47,620  -->  00:14:49,740
code to access your collections.
336

336

00:14:49,740  -->  00:14:51,060
And this is even if you've
337

337

00:14:51,060  -->  00:14:53,900
provided with an unmodifiable object.
338

338

00:14:53,900  -->  00:14:56,230
Although the collection
itself can't be changed,
339

339

00:14:56,230  -->  00:14:58,450
in other words, items
can't be added or removed,
340

340

00:14:58,450  -->  00:15:01,680
it's only the collection
itself that is unmodifiable.
341

341

00:15:01,680  -->  00:15:03,510
Now the individual
objects in the collection
342

342

00:15:03,510  -->  00:15:05,710
can be accessed and modified, and I'll
343

343

00:15:05,710  -->  00:15:07,300
show you what I mean by that.
344

344

00:15:07,300  -->  00:15:09,530
So it's a little bit of a gotcha there.
345

345

00:15:09,530  -->  00:15:10,700
So what we can do is we'll just comment
346

346

00:15:10,700  -->  00:15:12,150
out these now 'cause we're not gonna
347

347

00:15:12,150  -->  00:15:15,510
run those and we don't want
to get the exception anymore.
348

348

00:15:15,510  -->  00:15:20,090
So if we do something like
StockList.items again,
349

349

00:15:20,090  -->  00:15:22,410
.getCar(), so we're getting an existing
350

350

00:15:22,410  -->  00:15:24,560
car, we know that object exists.
351

351

00:15:24,560  -->  00:15:28,360
.adjustStock(2000), try it, give or take,
352

352

00:15:28,360  -->  00:15:31,360
and then do a printout of StockList.
353

353

00:15:35,630  -->  00:15:37,950
You can see that that has actually worked,
354

354

00:15:37,950  -->  00:15:42,560
so even though the Map returned,
the list is unmodifiable.
355

355

00:15:42,560  -->  00:15:44,790
With the unmodifiable Map, we're able
356

356

00:15:44,790  -->  00:15:48,600
to change an individual item
there, so is that a problem?
357

357

00:15:48,600  -->  00:15:51,490
Well, the answer is that it depends.
358

358

00:15:51,490  -->  00:15:54,180
So in this case, the calling
programme can't do anything.
359

359

00:15:54,180  -->  00:15:56,280
With the StockItems via
the items() method that
360

360

00:15:56,280  -->  00:15:58,180
we hadn't allowed it do anyway.
361

361

00:15:58,180  -->  00:15:59,760
We can see this by using the adjustStock()
362

362

00:15:59,760  -->  00:16:03,050
method, so we'll just do that
and show you what I mean.
363

363

00:16:03,050  -->  00:16:07,600
Probably do something
like -- let's try this.
364

364

00:16:07,600  -->  00:16:11,760
So
StockList.items.get("Car").adjustStock(-1000).
365

365

00:16:17,280  -->  00:16:19,780
If we do that and then run it.
366

366

00:16:22,530  -->  00:16:23,750
You can see that we've now got only 1000
367

367

00:16:23,750  -->  00:16:26,310
cars in stock, and the adjustment of
368

368

00:16:26,310  -->  00:16:27,930
2000 is something that the calling
369

369

00:16:27,930  -->  00:16:29,700
programme could have done anyway, so
370

370

00:16:29,700  -->  00:16:31,210
there's no problem in this case because
371

371

00:16:31,210  -->  00:16:34,340
we had the functionality
available to do that anyway.
372

372

00:16:34,340  -->  00:16:36,110
So in other words, the
point I'm making here
373

373

00:16:36,110  -->  00:16:37,630
is that there's no problem in this
374

374

00:16:37,630  -->  00:16:39,050
particular case with having access
375

375

00:16:39,050  -->  00:16:41,820
to the objects via the
read-only collection.
376

376

00:16:41,820  -->  00:16:44,630
But if you design a system
so that the StockList
377

377

00:16:44,630  -->  00:16:46,800
didn't have a get()
method, though, then you
378

378

00:16:46,800  -->  00:16:48,630
wouldn't want the code
to use the get() method
379

379

00:16:48,630  -->  00:16:50,820
or the unmodifiable collection either.
380

380

00:16:50,820  -->  00:16:53,230
So remember that it's
the collection itself
381

381

00:16:53,230  -->  00:16:55,220
that is unmodifiable, and not the
382

382

00:16:55,220  -->  00:16:56,780
objects within it, so it's really
383

383

00:16:56,780  -->  00:16:58,180
an important distinction there.
384

384

00:16:58,180  -->  00:17:01,080
By providing the items()
method, the StockList
385

385

00:17:01,080  -->  00:17:02,910
class allows callers
to retrieve individual
386

386

00:17:02,910  -->  00:17:05,570
items, and if you don't
want this to happen,
387

387

00:17:05,570  -->  00:17:07,630
then consider another
way to provide a list
388

388

00:17:07,630  -->  00:17:09,940
of items, if indeed you
provide that list at all.
389

389

00:17:09,940  -->  00:17:12,550
That mechanism to
provide that list at all.
390

390

00:17:12,550  -->  00:17:14,650
Now let's see one possible option.
391

391

00:17:14,650  -->  00:17:17,040
We're gonna add a price list
method to the StockList.
392

392

00:17:17,040  -->  00:17:19,870
So we'll go back to our StockList.
393

393

00:17:21,640  -->  00:17:22,570
I come down here, we'll
394

394

00:17:22,570  -->  00:17:25,250
actually do it before the toString().
395

395

00:17:25,250  -->  00:17:29,640
We'll try public, so
just to be consistent.
396

396

00:17:29,640  -->  00:17:31,050
It's just to be brought up here.
397

397

00:17:31,050  -->  00:17:35,130
Public Map<s>
priceList, we're gonna</s>
398

398

00:17:41,800  -->  00:17:45,210
do Map<s> prices = new,</s>
399

399

00:17:48,200  -->  00:17:51,070
let's use a linked HashMap.
400

400

00:17:51,070  -->  00:17:52,250
Then we're going to write a loop
401

401

00:17:52,250  -->  00:17:53,930
to actually put all the items in there.
402

402

00:17:53,930  -->  00:17:58,100
So for map.entry, and it's
gonna be String stockItem
403

403

00:17:59,880  -->  00:18:03,880
this time, item, should
have been a comma there.
404

404

00:18:08,550  -->  00:18:11,770
And list.entrySet, and we're gonna do
405

405

00:18:11,770  -->  00:18:15,940
a prices.put, item.getKey()
and item.getValue().getPrice().
406

406

00:18:23,570  -->  00:18:25,370
And then from there, we'll do a return
407

407

00:18:25,370  -->  00:18:28,620
collections.unmodifyableMap for prices.
408

408

00:18:34,680  -->  00:18:39,340
All right, so going back to
main, let's print that out.
409

409

00:18:39,340  -->  00:18:42,760
Go down the bottom here, so we'll put for
410

410

00:18:43,850  -->  00:18:46,350
map.entry, String double price
411

411

00:18:53,220  -->  00:18:57,390
StockList.priceList().entrySet(),
412

412

00:19:01,680  -->  00:19:05,850
and we'll print out price.getKey()
+ costsPrice.getValue().
413

413

00:19:11,850  -->  00:19:15,520
And I'm missing a single
-- a bracket there.
414

414

00:19:16,840  -->  00:19:18,000
That's better.
415

415

00:19:18,000  -->  00:19:19,650
So here, we're providing
an unmodifiable map
416

416

00:19:19,650  -->  00:19:22,270
of names and prices for the caller to use.
417

417

00:19:22,270  -->  00:19:23,760
Now the entries in the map consist
418

418

00:19:23,760  -->  00:19:25,510
of pairs of strings and double.
419

419

00:19:25,510  -->  00:19:27,240
Now both of these are immutable.
420

420

00:19:27,240  -->  00:19:29,250
So not only can't the map be modified,
421

421

00:19:29,250  -->  00:19:32,260
but the individual entries
in it can't be either.
422

422

00:19:32,260  -->  00:19:33,400
So if it's important that access
423

423

00:19:33,400  -->  00:19:35,250
to your objects in your collection is
424

424

00:19:35,250  -->  00:19:36,950
restricted, then avoid returning any sort
425

425

00:19:36,950  -->  00:19:40,230
of collection that contains
the actual objects.
426

426

00:19:40,230  -->  00:19:44,400
And then let me just run this
to make sure it does work.
427

427

00:19:45,540  -->  00:19:48,020
And you can see down here
that it's worked just fine.
428

428

00:19:48,020  -->  00:19:49,620
So I realised once this video was recorded
429

429

00:19:49,620  -->  00:19:51,210
that I actually missed out a step.
430

430

00:19:51,210  -->  00:19:53,770
Looking at the code on line 70 to 71,
431

431

00:19:53,770  -->  00:19:56,140
you might be wondering
earlier in the video
432

432

00:19:56,140  -->  00:19:57,760
when I was talking about that, why did
433

433

00:19:57,760  -->  00:19:59,900
I type both lines of code the same?
434

434

00:19:59,900  -->  00:20:00,940
So I was trying to actually show
435

435

00:20:00,940  -->  00:20:04,370
you that there's two different
ways of accessing this.
436

436

00:20:04,370  -->  00:20:06,060
And what I did was I actually made
437

437

00:20:06,060  -->  00:20:08,130
a mistake and typed it the same way.
438

438

00:20:08,130  -->  00:20:12,290
So the second example, the
second line 71, works like so.
439

439

00:20:15,530  -->  00:20:16,590
I just wanted to show you both ways.
440

440

00:20:16,590  -->  00:20:18,480
The first way is returning it, the items,
441

441

00:20:18,480  -->  00:20:20,520
and using the get() from there.
442

442

00:20:20,520  -->  00:20:23,850
But the second way is just
using the get() directly.
443

443

00:20:23,850  -->  00:20:25,810
So I just wanted to point out that there's
444

444

00:20:25,810  -->  00:20:28,680
two differences there, and again,
445

445

00:20:28,680  -->  00:20:30,760
if you design a system so the StockList
446

446

00:20:30,760  -->  00:20:32,470
didn't have a get() method, then you
447

447

00:20:32,470  -->  00:20:34,350
wouldn't want code using the get() method
448

448

00:20:34,350  -->  00:20:35,990
of the unmodifiable collection either.
449

449

00:20:35,990  -->  00:20:37,150
That's the point I wanted to make.
450

450

00:20:37,150  -->  00:20:38,230
But I just wanted to show you that
451

451

00:20:38,230  -->  00:20:41,760
there was two sort of
ways of accessing this.
452

452

00:20:41,760  -->  00:20:42,600
So that's it.
453

453

00:20:42,600  -->  00:20:43,990
That's the end of this video.
454

454

00:20:43,990  -->  00:20:45,510
In the next video, we're
gonna do a challenge
455

455

00:20:45,510  -->  00:20:48,190
to help you understand
what we've just learned.
456

456

00:20:48,190  -->  00:20:50,520
So, see you in that next video.
