WEBVTT
1
1

00:00:04.930  -->  00:00:09.890
so in this section we are going to be building
some GUI applications in Java now Java
2

2

00:00:09.890  -->  00:00:13.280
applications can obviously have
graphical user interfaces and we haven't
3

3

00:00:13.280  -->  00:00:17.750
used that at all in this course to date
we've use everything from a main console
4

4

00:00:17.750  -->  00:00:21.000
and done all our output and we've really has
concentrated on the Java language
5

5

00:00:21.000  -->  00:00:25.260
itself rather than producing sort of
GUI type graphical user interfaces
6

6

00:00:25.260  -->  00:00:29.740
thing is that Java applications can
as I said have graphical user interfaces
7

7

00:00:29.740  -->  00:00:36.840
that contain things such as buttons
lists checkboxes menus toolbars and many
8

8

00:00:36.840  -->  00:00:40.280
other controls that allow users to
interact with rich client applications
9

9

00:00:40.280  -->  00:00:45.990
now JavaFX is what we're going to be
using here and that's a set of API's
10

10

00:00:45.990  -->  00:00:51.100
that can be used to build interfaces in Java tnen what it is it's really
11

11

00:00:51.100  -->  00:00:56.390
essentially a set of Java packages and
it's the successor to swing which you may
12

12

00:00:56.390  -->  00:00:59.210
heard of which was Java's UI toolkit
13

13

00:00:59.210  -->  00:01:03.350
of choice and recommended for many years but
that's actually been deprecated now and
14

14

00:01:03.350  -->  00:01:08.640
Oracle's direction is to use JavaFX
and that's why we've chosen or why I've
15

15

00:01:08.640  -->  00:01:13.210
chosens that for this course now we can use JavaFX to
develop the UI for desktop applications
16

16

00:01:13.210  -->  00:01:17.730
Internet applications and mobile devices
but what I'm going to do is focus
17

17

00:01:17.730  -->  00:01:22.040
on desktop applications because
obviously to really give justice to
18

18

00:01:22.040  -->  00:01:25.010
JavaFX we need a complete course we
haven't got that we just got this
19

19

00:01:25.010  -->  00:01:29.550
section so we need to focus on that so we are gonna focus on desktop applications
20

20

00:01:29.550  -->  00:01:33.500
now the other thing to keep in mind is
that the latest version of JavaFX is
21

21

00:01:33.500  -->  00:01:37.240
JavaFX 8 and it's packaged with the
Java 8
22

22

00:01:37.240  -->  00:01:42.030
JDK Java runtime Edition Java
Development Kit so if you want to make
23

23

00:01:42.030  -->  00:01:46.530
sure that you using the Java 8 SDK
when you're building a JavaFX application
24

24

00:01:46.530  -->  00:01:50.750
and if you followed the information in
this course in through the installation
25

25

00:01:50.750  -->  00:01:56.420
setup I did actually recommend that you
downloaded the Java 8 SDK so if you
26

26

00:01:56.420  -->  00:02:00.590
haven't done if you are using an older
version JDK 7 or earlier
27

27

00:02:00.590  -->  00:02:03.520
make sure you update it because you
won't be able to use this
28

28

00:02:03.520  -->  00:02:07.850
you will be finding you weill be getting all sorts of errors now IntelliJ has got a plugin that supports Java
29

29

00:02:07.850  -->  00:02:12.010
FX applications which is pretty cool
and when we installed IntelliJ earlier in the
30

30

00:02:12.010  -->  00:02:15.760
course that plugin was installed and
enabled by default at least it should
31

31

00:02:15.760  -->  00:02:17.250
have been so what we going to do
32

32

00:02:17.250  -->  00:02:20.930
is we are going to create our first JavaFX project and we are going to do
33

33

00:02:20.930  -->  00:02:24.750
something very simple as a familiar
hello world example cuz we need to start
34

34

00:02:24.750  -->  00:02:29.070
on the basic so you can click on file new
project or you can come over here and
35

35

00:02:29.070  -->  00:02:33.580
click on Create new project and I'm
going to choose JavaFX you can see I've
36

36

00:02:33.580  -->  00:02:38.370
already got it selected I'm gonna choose that so
normally we have been choosing Java up here and
37

37

00:02:38.370  -->  00:02:43.620
I'm gonna choose JavaFX the other thing is I've
actually invalidated my project SDK
38

38

00:02:43.620  -->  00:02:47.420
because I wanted to bring
something to your attention in that in
39

39

00:02:47.420  -->  00:02:51.910
later parts of this section their is going to
be some features that were using that
40

40

00:02:51.910  -->  00:02:56.280
require a more up-to-date version of JDK 8
so I've mentioned that we actually
41

41

00:02:56.280  -->  00:03:01.400
need JDK 8 but their is particular
class for example that uses a particular
42

42

00:03:01.400  -->  00:03:05.080
version of the JDK so it's a good
opportunity to make sure you are up to date
43

43

00:03:05.080  -->  00:03:10.130
as possible so what I'm going to do I've downloaded a new
version of the JDK and installed it so I
44

44

00:03:10.130  -->  00:03:13.680
just wanted to show you again how to
do that and I deleted my old version that's
45

45

00:03:13.680  -->  00:03:16.590
why it's now complaining because that
was the version that I was using earlier
46

46

00:03:16.590  -->  00:03:21.780
so gonna click on here and take this
opportunity click on new JDK and what
47

47

00:03:21.780  -->  00:03:24.510
IntelliJ should do is it shouldn't go to the
48

48

00:03:24.510  -->  00:03:29.500
latest version anyway and depending on
whether your on a Mac which I am I will
49

49

00:03:29.500  -->  00:03:32.980
get that path and if your in windows you get a
different paths and likewise for Linux
50

50

00:03:32.980  -->  00:03:37.320
and possible you might need
to go and find those folders manually
51

51

00:03:37.320  -->  00:03:41.540
and if you need any help with that go
back to the installation
52

52

00:03:41.540  -->  00:03:42.180
videos
53

53

00:03:42.180  -->  00:03:45.530
you know the first section of the course on
how to do that so I'm gonna select the
54

54

00:03:45.530  -->  00:03:50.720
latest version i download which is 1.8.0_73 click on OK and
55

55

00:03:50.720  -->  00:03:55.610
that's version we are going to be using for the JavaFX application and click on Next we
56

56

00:03:55.610  -->  00:03:58.160
need a name and I'm gonna call this
one hello
57

57

00:03:58.160  -->  00:04:07.190
world FX click on finish and that will then create a
basic project and we have a look at that
58

58

00:04:07.190  -->  00:04:13.170
and you can see it has created some other code here now before I get into that I just
59

59

00:04:13.170  -->  00:04:18.590
want to also point out a few other
things firstly to check if you got that plugins so if
60

60

00:04:18.590  -->  00:04:23.070
you didn't see that JavaFX come up as an
option on the screen you can come up into
61

61

00:04:23.070  -->  00:04:27.560
IntelliJ coming into preferences and
then select plugins
62

62

00:04:28.500  -->  00:04:34.910
and typed in FX and it should come up automatically with JavaFX there and you
63

63

00:04:34.910  -->  00:04:39.270
can see it's actually clicked and it's
ready to go and basically it's installed and if
64

64

00:04:39.270  -->  00:04:43.610
you click on enable you can see that it's actually
installed so that should happen and by
65

65

00:04:43.610  -->  00:04:48.280
chance it didn't happen and you couldn't
see JavaFX you download the JavaFX
66

66

00:04:48.280  -->  00:04:54.550
plugin like so and select it and their will be an option here to install it and then you need to restart IntelliJ and
67

67

00:04:54.550  -->  00:04:58.080
then you'd have the version so  if
you find you didn't see that JavaFX
68

68

00:04:58.080  -->  00:05:02.160
selection go back and install the
plugin that way alright so let's return
69

69

00:05:02.160  -->  00:05:05.860
back to our project again you can see that
we've got some files here we've got
70

70

00:05:05.860  -->  00:05:09.330
Controller.java Main.java
71

71

00:05:09.330  -->  00:05:15.470
we've also got sample.fxml now JavaFX itself was
designed with the MVC
72

72

00:05:15.470  -->  00:05:20.500
which is multiple-view-controller patent in mind
and what that is is in a nutshell is
73

73

00:05:20.500  -->  00:05:24.250
that it's the patent that keeps the code
that handles and applications data
74

74

00:05:24.250  -->  00:05:28.740
separate from the UI or user interface code because of this when we are using the
75

75

00:05:28.740  -->  00:05:32.840
MVC patent we wouldn't mix the code that
deals with the UI and the
76

76

00:05:32.840  -->  00:05:38.880
code that manipulates the application
data in the same class so the controller is the
77

77

00:05:38.880  -->  00:05:42.050
sort of middle man between the UI and the
data so it sort of hands off the
78

78

00:05:42.050  -->  00:05:45.950
requests to each and sort of manages
that process now when you're working
79

79

00:05:45.950  -->  00:05:52.260
with JavaFX the model corresponds to the
applications data model the view is the
80

80

00:05:52.260  -->  00:05:56.960
fxml and the controller is the code
that determines what happens when a user
81

81

00:05:56.960  -->  00:06:01.240
interacts with the UI now essentially
the controller handles events and will
82

82

00:06:01.240  -->  00:06:05.840
cover those in a later lesson and I guess
what I've done their is I've over
83

83

00:06:05.840  -->  00:06:10.120
simplified the MVC patent but it's enough
for you right now to understand why
84

84

00:06:10.120  -->  00:06:15.810
IntelliJ generates a controller Java file and a
fxml file when we create a JavaFX
85

85

00:06:15.810  -->  00:06:21.060
project now just to be clear JavaFX
doesn't enforce the MVC patent but it's
86

86

00:06:21.060  -->  00:06:25.100
absolutely a good idea and I really
recommend that you do follow that now
87

87

00:06:25.100  -->  00:06:28.830
for the simple hello world application there
obviously isn't any data and also the
88

88

00:06:28.830  -->  00:06:33.570
code generated by IntelliJ doesn't
create any Java UI controls by default so
89

89

00:06:33.570  -->  00:06:38.260
apart from the usual window
controls you know minimize maximize and close
90

90

00:06:38.260  -->  00:06:40.550
their is really nothing to interact with
91

91

00:06:40.550  -->  00:06:44.760
and as a results if we open the controller code
you can see quite literally that it's
92

92

00:06:44.760  -->  00:06:48.300
actually empty at this stage so and that's
because again we haven't actually
93

93

00:06:48.300  -->  00:06:54.510
added any controls so we go back and open the main
class and have a look at that and you can see
94

94

00:06:54.510  -->  00:06:58.210
that there is some code their and obviously
it should look pretty family because the
95

95

00:06:58.210  -->  00:07:03.050
basic concept is very similar to what
we've dealt with before we've got imports
96

96

00:07:03.050  -->  00:07:07.400
and you notice there's a heap of imports
on lines 3 to 7 and are added automatically
97

97

00:07:07.400  -->  00:07:12.240
we've got a public class main extends
application and we've also got a public
98

98

00:07:12.240  -->  00:07:16.280
static void main down here and you can
see that's little bit different we haven't seen
99

99

00:07:16.280  -->  00:07:20.560
that before because that is actually launching
something and we've got this start method
100

100

00:07:20.560  -->  00:07:23.820
as you can see there and the start
method has really got all the mechanisms
101

101

00:07:23.820  -->  00:07:29.630
to kick-start our JavaFX application so to
start with looking at line 9 you can
102

102

00:07:29.630  -->  00:07:34.770
see that the class extends the the
JavaFX .Application class
103

103

00:07:35.270  -->  00:07:40.740
now JavaFX applications have to have a class
that extends the application class and
104

104

00:07:40.740  -->  00:07:45.090
this class will be the entry point
for the application similar to the
105

105

00:07:45.090  -->  00:07:48.680
classes we've created before the main
classes in other projects it need to
106

106

00:07:48.680  -->  00:07:52.620
have a main class and needed to have a main
method in this case a JavaFX
107

107

00:07:52.620  -->  00:07:57.830
application also needs to extend the
application classes as were doing on line
108

108

00:07:57.830  -->  00:08:03.800
9 now the application class manages the
life cycle of a JavaFX application
109

109

00:08:03.800  -->  00:08:07.440
the methods in the application class
that we care about most are the init
110

110

00:08:07.440  -->  00:08:11.620
method the start method and the stop
method and at the moment you can see
111

111

00:08:11.620  -->  00:08:16.160
we've got a start method in their when we run
the application application.launch will
112

112

00:08:16.160  -->  00:08:20.680
be called from the main method you can
see that on line 21 that we were invoking
113

113

00:08:20.680  -->  00:08:24.740
launch passing on the arguments that are
passed to the main method that method
114

114

00:08:24.740  -->  00:08:29.150
launches the JavaFX application and doesn't
return until the application has exited
115

115

00:08:29.150  -->  00:08:33.750
so in other words until we closed our UI so lets look at
the start method in more detail that
116

116

00:08:33.750  -->  00:08:37.870
starting on line 12 that was generated
automatically by IntelliJ now the
117

117

00:08:37.870  -->  00:08:40.080
method takes a stage parameter
118

118

00:08:40.080  -->  00:08:45.190
now what a stage is a top level JavaFX
container that extends the window class
119

119

00:08:45.190  -->  00:08:50.640
so think of it essentially as a main
window now the JavaFX runtime constructs
120

120

00:08:50.640  -->  00:08:53.990
the initial stage and passes it into
121

121

00:08:53.990  -->  00:08:57.980
to the start method itself so its passing
that as a parameter you not having to do
122

122

00:08:57.980  -->  00:09:01.830
that that's happening automatically with
JavaFX you can see that again on line 12
123

123

00:09:01.830  -->  00:09:06.430
so in the current version of JavaFX dialog
are presented within the stage but we
124

124

00:09:06.430  -->  00:09:11.130
don't explicitly create the stage now we
used to dialog class which wraps the
125

125

00:09:11.130  -->  00:09:15.770
dialogue in a stage for us and the
JavaFX developers have said that in a
126

126

00:09:15.770  -->  00:09:19.420
future version of JavaFX they
might provide a light weight container for
127

127

00:09:19.420  -->  00:09:23.380
dialogues rather than using a stage and
you'll understand more about dialogues as we continue
128

128

00:09:23.380  -->  00:09:28.850
moving forward but note that the dialog
class was introduced in JavaFX or Java
129

129

00:09:28.850  -->  00:09:34.850
version 8u40 so before then creating
dialogues was a real pain so with the
130

130

00:09:34.850  -->  00:09:38.850
later versions of Java the JDK it's a lot
easier now because of what they've
131

131

00:09:38.850  -->  00:09:43.580
introduced so we will use that dialog class
at some point in the future but if you
132

132

00:09:43.580  -->  00:09:44.660
have any issues
133

133

00:09:44.660  -->  00:09:49.720
compiling these classes that reference
dialog make sure that you've got a JDK
134

134

00:09:49.720  -->  00:09:55.810
that is later than 8u40 and you saw that
earlier I showed you when I was running
135

135

00:09:55.810  -->  00:10:01.620
version 73 if in doubt go and download the latest JDK and make sure your using that
136

136

00:10:01.620  -->  00:10:04.870
and you can either select that when you have
chosen your project that's probably the
137

137

00:10:04.870  -->  00:10:08.500
easiest thing to do but if you want to
change it and you didn't get a chance to
138

138

00:10:08.500  -->  00:10:13.940
change it lets say you've already created the project and you want to figure out how do I change my JDK you
139

139

00:10:13.940  -->  00:10:16.770
can do that easy enough you can
right-click the project and then come
140

140

00:10:16.770  -->  00:10:21.740
down and select open module settings and
you come down here into SDK and you
141

141

00:10:21.740  -->  00:10:26.940
make sure you've got the right version selected you can see I've got 2 versions now the second one I created was
142

142

00:10:26.940  -->  00:10:32.770
version 73 and I've also got the 1.8 which was the
incorrect version so you would select
143

143

00:10:32.770  -->  00:10:36.880
the new version after creating it so what
you can also do here is you can also
144

144

00:10:36.880  -->  00:10:40.000
click on the + button and that's how you go
about setting up a new version of the
145

145

00:10:40.000  -->  00:10:45.020
JDK for an application that you've already created but in this
case I'm gonna leave it selected on
146

146

00:10:45.020  -->  00:10:47.450
version 1.8
147

147

00:10:47.450  -->  00:10:53.170
.0_73 click on ok because it is valid and I will give
you a reminder when we used to dialog
148

148

00:10:53.170  -->  00:10:57.330
class in later lectures about this but if you are having problems
149

149

00:10:57.330  -->  00:11:02.820
make sure you're using the latest or
fairly recent JDK version 8 so the
150

150

00:11:02.820  -->  00:11:06.790
next line of code on line 13 is loading
the UI from the fxml
151

151

00:11:07.290  -->  00:11:12.690
file so what we'll do is we'll take a look at the fxml file now so I'm going to open that first and then
152

152

00:11:12.690  -->  00:11:20.070
talk about it so think of fxml as a flavor xml which it is you could probably noticed some of
153

153

00:11:20.070  -->  00:11:25.130
these that its got an XML look and feel now if
you're part of my android course then
154

154

00:11:25.130  -->  00:11:28.820
you'll be familiar with some of the
XML but we haven't really touched
155

155

00:11:28.820  -->  00:11:33.690
on XML much in this course to date but
it's really just a mechanism a way
156

156

00:11:33.690  -->  00:11:39.100
to described data so if your familiar with Android UI
programming then fxml will probably
157

157

00:11:39.100  -->  00:11:44.940
be old hat to you so in this application what we
have is a grid pane and that's one of
158

158

00:11:44.940  -->  00:11:50.520
the JavaFX layouts and you can see that
on line 6 of the sample fxml
159

159

00:11:50.520  -->  00:11:56.700
the fx:controller attribute tells the
run time which classes the controller for this
160

160

00:11:56.700  -->  00:12:00.450
window now the grid pane doesn't have
any child elements and so when we run
161

161

00:12:00.450  -->  00:12:04.880
the application the window is going to be empty
will run it in a minute just to confirm and
162

162

00:12:04.880  -->  00:12:08.740
for some reason the generated fxml contains a few
163

163

00:12:08.740  -->  00:12:09.980
unnecessary imports
164

164

00:12:09.980  -->  00:12:15.560
and we know they are unnecessary ones on line 1 4 and 5 because they are in gray but right now we only need
165

165

00:12:15.560  -->  00:12:20.300
the grid pane because that is all we actually got in this
file and you can see that on line 2
166

166

00:12:20.300  -->  00:12:25.010
that the import is in green which tells us
that it actually is in use so but later
167

167

00:12:25.010  -->  00:12:28.160
on we are gonna actually add a label to this
is well and as we progress through
168

168

00:12:28.160  -->  00:12:33.810
you'll see that how this takes affect and
how this gets change for us automatically so let's
169

169

00:12:33.810  -->  00:12:39.250
now go back to start method again in main so
again looking at line 13 when we
170

170

00:12:39.250  -->  00:12:43.630
load the fxml file which we
doing at line 13 all the UI objects defined in the
171

171

00:12:43.630  -->  00:12:47.370
file are constructed to that point in time
so we'll come back to the parent
172

172

00:12:47.370  -->  00:12:52.940
root component on line 13 in a moment but
on line 14 we set the title of the stage
173

173

00:12:52.940  -->  00:12:55.380
and actually what I'll do before I
go any further let us run this to see
174

174

00:12:55.380  -->  00:12:57.930
what it actually does just to confirm
that we've actually got something that
175

175

00:12:57.930  -->  00:13:02.810
works we will run this and there's our little
application and that's what this by
176

176

00:13:02.810  -->  00:13:06.760
default is actually doing a simple GUI
is just drawing this window there's the
177

177

00:13:06.760  -->  00:13:11.010
title which we can see we are setting on
line 14 and we've got three buttons I've
178

178

00:13:11.010  -->  00:13:17.010
talking about earlier which are their by default minimize
closed maximize and click on Close to close
179

179

00:13:17.010  -->  00:13:19.240
the application down and notice by  doing
that
180

180

00:13:19.240  -->  00:13:24.430
it then exited the app so getting back to line 14 when we set the
title on the stage as
181

181

00:13:24.430  -->  00:13:28.270
you can see there and since the window
class is the parent of the stage class
182

182

00:13:28.270  -->  00:13:33.550
and as we learned previously the stages
is the top-level JavaFX container what this
183

183

00:13:33.550  -->  00:13:36.910
essentially means is the window  title will be set to hello world so
184

184

00:13:36.910  -->  00:13:41.610
what we do is this .setTitle using primary stage that is setting the title and you saw
185

185

00:13:41.610  -->  00:13:46.410
that when I just ran the app in the short time ago
next we are gonna look at line 15 and you can see
186

186

00:13:46.410  -->  00:13:50.700
it's got their primaryStage.setScene and we're doing just that we are setting
187

187

00:13:50.700  -->  00:13:54.700
the stage as Scene now if you haven't already
guessed the JavaFX developers were
188

188

00:13:54.700  -->  00:14:00.260
going for a theater metaphor here so every
stage requires a scene and backing every
189

189

00:14:00.260  -->  00:14:06.020
scene is a scene graph and that's a tree in
which each node corresponding to a UI
190

190

00:14:06.020  -->  00:14:11.300
control or an area of the scene in this
case for example a rectangle so let's take
191

191

00:14:11.300  -->  00:14:15.670
a look at this code in more detail so again
looking at line 15 when we load the
192

192

00:14:15.670  -->  00:14:21.970
fxml we assign it to a variable of type parent
with a name route now the parent class
193

193

00:14:21.970  -->  00:14:28.070
descends directly from the node class and which is based class for the scene
194

194

00:14:28.070  -->  00:14:34.500
graph nodes and that is taken exactly from
the java doc itself so nodes that descend from
195

195

00:14:34.500  -->  00:14:39.240
parent can have children in the scene
graph now for the hello world application
196

196

00:14:39.240  -->  00:14:43.410
the top level and in fact the only node
is the grid pane which we saw in the
197

197

00:14:43.410  -->  00:14:48.870
fxml file so the grid pane node will be the root of the scene graph and
198

198

00:14:48.870  -->  00:14:54.010
as a result that's what was returned
from the fxml loader.load method
199

199

00:14:54.010  -->  00:14:59.690
which were used on line 13 now when we
construct a scene we have to pass in the
200

200

00:14:59.690  -->  00:15:04.260
root of that scene graph back
the scene and will do that here on
201

201

00:15:04.260  -->  00:15:08.580
line 15 we're talking about so we also
set the width and the height of the scene
202

202

00:15:08.580  -->  00:15:12.320
which in turn then becomes the width and
height of the main window now you might be
203

203

00:15:12.320  -->  00:15:17.290
asking why do we have to have a scene and
a stage so to understand that lets go
204

204

00:15:17.290  -->  00:15:21.760
back to the theater metaphor so just
imagine that you are watching a play so the
205

205

00:15:21.760  -->  00:15:27.380
curtain rises and we watched the first
scene then the curtain falls stagehands
206

206

00:15:27.380  -->  00:15:30.560
run around and change the furniture
and backdrop and then the
207

207

00:15:30.560  -->  00:15:35.360
curtain rises again so we might you know
we may see a different looking set
208

208

00:15:35.360  -->  00:15:39.090
and different actors but it's still
essentially the same stage so if you go
209

209

00:15:39.090  -->  00:15:43.950
back to JavaFX remember that a stage
corresponds to a top-level UI container
210

210

00:15:43.950  -->  00:15:49.510
like a window and a scene is backed by
a scene graph and that essentially
211

211

00:15:49.510  -->  00:15:54.420
contains the UI nodes so if you want to
change what was shown in a stage the window
212

212

00:15:54.420  -->  00:15:59.490
effectively is what a stage is then all we
have to do is change the scene which is
213

213

00:15:59.490  -->  00:16:03.970
the UI for that to happen so we don't
have to construct a new stage object now in
214

214

00:16:03.970  -->  00:16:07.890
practice you would load a different fxml file into a new scene and then just
215

215

00:16:07.890  -->  00:16:13.740
call Stage.setScene like we did on line 15 now for
216

216

00:16:13.740  -->  00:16:18.000
example if we had a wizard that we want
to use it to step through using Next and
217

217

00:16:18.000  -->  00:16:21.890
Previous buttons we could use the same
window the stage in other words and just
218

218

00:16:21.890  -->  00:16:26.930
change the scene each time they clicked
next or previous or when we want to
219

219

00:16:26.930  -->  00:16:31.050
change parts of the UI in response to user
action and we don't have we don't
220

220

00:16:31.050  -->  00:16:34.770
actually have to remove UI components
or even make them invisible and add new
221

221

00:16:34.770  -->  00:16:39.100
ones so we can just switch the scene in that scenario and that's what is particularly
222

222

00:16:39.100  -->  00:16:42.810
a cool feature of  JavaFX and that was to
do that and sometimes it makes more
223

223

00:16:42.810  -->  00:16:46.020
sense to just hide a few controls or
something like that but other times
224

224

00:16:46.020  -->  00:16:49.680
switching the entire scene is a better
option it really depends on what we're
225

225

00:16:49.680  -->  00:16:54.700
trying to do and what you trying to achieve
essentially though scene make it easy to
226

226

00:16:54.700  -->  00:16:59.190
reuse a container so just getting back
to finish off this overview before we
227

227

00:16:59.190  -->  00:17:03.330
start making changes let's have a look
now at line sixteen and at this point
228

228

00:17:03.330  -->  00:17:05.200
when it gets to this code
229

229

00:17:05.200  -->  00:17:09.470
we have instantiated all the UI objects
associated with our scene we've set the
230

230

00:17:09.470  -->  00:17:15.000
stage so at this point we're ready to show
the UI and by calling the .show method that
231

231

00:17:15.000  -->  00:17:18.870
actually does that that's the code that launches the application well that's
232

232

00:17:18.870  -->  00:17:21.720
the first video in the section I'm gonna
stop this video here now in the next
233

233

00:17:21.720  -->  00:17:25.420
video will continue on and will start
looking at changing the code a little
234

234

00:17:25.420  -->  00:17:29.770
bit and furthering our knowledge on
JavaFX so see you in the next video
