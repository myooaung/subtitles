1
1

00:00:05,620  -->  00:00:07,110
- [Instructor] All right, so we talked
2

2

00:00:07,110  -->  00:00:09,380
about random access in the last video.
3

3

00:00:09,380  -->  00:00:11,720
So let's get started on
changing our application
4

4

00:00:11,720  -->  00:00:14,120
to use a random access file,
5

5

00:00:14,120  -->  00:00:15,710
and then to load these locations
6

6

00:00:15,710  -->  00:00:17,920
for the game on demand.
7

7

00:00:17,920  -->  00:00:19,000
Now because we're going to have
8

8

00:00:19,000  -->  00:00:21,460
to change quite a bit of existing code,
9

9

00:00:21,460  -->  00:00:22,800
and also because it'd be nice
10

10

00:00:22,800  -->  00:00:24,490
to keep your existing project,
11

11

00:00:24,490  -->  00:00:26,980
the one we've worked on here
to date, as a reference,
12

12

00:00:26,980  -->  00:00:29,680
what we're going to do
is use a new project.
13

13

00:00:29,680  -->  00:00:31,200
Or rather, we're going
to copy this project
14

14

00:00:31,200  -->  00:00:34,560
and create a back-up version of it.
15

15

00:00:34,560  -->  00:00:36,340
The easiest way to do that is
16

16

00:00:36,340  -->  00:00:38,940
to have the project open, which I've got,
17

17

00:00:38,940  -->  00:00:41,000
just to select the project up here,
18

18

00:00:41,000  -->  00:00:44,350
and right click, and under
Mac I can reveal in Finder,
19

19

00:00:44,350  -->  00:00:47,570
and on Windows or Linux
there should be an option,
20

20

00:00:47,570  -->  00:00:50,710
something like Open and
Explore or Open Folder,
21

21

00:00:50,710  -->  00:00:51,680
or something like that.
22

22

00:00:51,680  -->  00:00:52,890
So click on that.
23

23

00:00:52,890  -->  00:00:55,720
That takes you to the folder
where that project is.
24

24

00:00:55,720  -->  00:00:58,720
So I'm going to copy and paste that,
25

25

00:01:00,330  -->  00:01:01,910
and you can see in my case, on a Mac,
26

26

00:01:01,910  -->  00:01:03,700
it's duplicated the folder.
27

27

00:01:03,700  -->  00:01:06,080
So you'll do something similar
for your operating system.
28

28

00:01:06,080  -->  00:01:07,510
And I'm actually going to
change the name of this,
29

29

00:01:07,510  -->  00:01:09,510
instead of Input Output Copy.
30

30

00:01:09,510  -->  00:01:11,120
I'm going to change that.
31

31

00:01:11,120  -->  00:01:13,280
And I'm going to call it
something completely different,
32

32

00:01:13,280  -->  00:01:14,700
Adventure Random.
33

33

00:01:16,100  -->  00:01:17,550
Because it really is the adventure game
34

34

00:01:17,550  -->  00:01:21,220
that we've been talking about
and working on recently.
35

35

00:01:21,220  -->  00:01:22,830
And you can see that's been renamed.
36

36

00:01:22,830  -->  00:01:23,700
Now that I've done that,
37

37

00:01:23,700  -->  00:01:26,400
I'm going to close this project down,
38

38

00:01:26,400  -->  00:01:28,150
and then I'm going to
navigate to that folder
39

39

00:01:28,150  -->  00:01:30,540
and open the new project.
40

40

00:01:30,540  -->  00:01:31,560
And again, we're doing this
41

41

00:01:31,560  -->  00:01:35,580
so that we can make changes
to this code freely,
42

42

00:01:35,580  -->  00:01:37,280
and we don't have to worry about losing
43

43

00:01:37,280  -->  00:01:39,370
the original code we had.
44

44

00:01:47,650  -->  00:01:49,290
And Adventure Random is
the name of the project,
45

45

00:01:49,290  -->  00:01:51,460
so I'm going to open that.
46

46

00:01:52,970  -->  00:01:54,510
All right, so you can
see now that I've got
47

47

00:01:54,510  -->  00:01:56,550
the adventure random
project that I just copied
48

48

00:01:56,550  -->  00:01:59,830
and duplicated from our
previous project open,
49

49

00:01:59,830  -->  00:02:04,000
and we're going to work on
that moving forward now.
50

50

00:02:05,340  -->  00:02:06,800
Just before we start, let's just make sure
51

51

00:02:06,800  -->  00:02:08,760
that it still works.
52

52

00:02:08,760  -->  00:02:10,430
Right click and Run.
53

53

00:02:11,760  -->  00:02:15,260
I'm running the main, classes main method.
54

54

00:02:17,120  -->  00:02:18,740
And it looks to me that it's
still going to work okay.
55

55

00:02:18,740  -->  00:02:21,500
But we'll just test this out a little bit.
56

56

00:02:21,500  -->  00:02:22,720
I'm just going to move
this up a little bit
57

57

00:02:22,720  -->  00:02:24,780
so I can see this a little bit better.
58

58

00:02:24,780  -->  00:02:28,780
North, Southeast, and
quit, that's working fine.
59

59

00:02:33,060  -->  00:02:37,360
Now we're going to use the
locations dot main method
60

60

00:02:37,360  -->  00:02:40,090
to use random access file
to write out the locations.
61

61

00:02:40,090  -->  00:02:41,590
So our first step is going to be
62

62

00:02:41,590  -->  00:02:44,420
to write the number of
locations to the file.
63

63

00:02:44,420  -->  00:02:47,440
So I'm going to open our locations class,
64

64

00:02:47,440  -->  00:02:51,290
and again, we're making the
change in the main method
65

65

00:02:51,290  -->  00:02:55,000
in our locations dot java, so up here.
66

66

00:02:55,000  -->  00:02:56,150
Our first step, as I mentioned,
67

67

00:02:56,150  -->  00:02:59,260
is to write out the number
of locations to the file.
68

68

00:02:59,260  -->  00:03:02,860
Now since the file pointer
is positioned at byte zero,
69

69

00:03:02,860  -->  00:03:05,220
when a file is first created or opened,
70

70

00:03:05,220  -->  00:03:07,480
we don't have the call the sync method
71

71

00:03:07,480  -->  00:03:09,350
that I talked about in the previous video.
72

72

00:03:09,350  -->  00:03:11,780
Consequently, it's
pretty straight forward.
73

73

00:03:11,780  -->  00:03:14,890
All you really need to
do is with this try,
74

74

00:03:14,890  -->  00:03:16,800
and we'll change this.
75

75

00:03:16,800  -->  00:03:17,780
Instead of an object applet stream
76

76

00:03:17,780  -->  00:03:20,530
it's gonna be random access file.
77

77

00:03:22,850  -->  00:03:24,630
And of course RAO is equal
78

78

00:03:24,630  -->  00:03:26,790
to new random access file.
79

79

00:03:28,560  -->  00:03:29,420
We're going to change the name
80

80

00:03:29,420  -->  00:03:30,250
of the file as well.
81

81

00:03:30,250  -->  00:03:33,810
So locations, I'll just call rand dot dat
82

82

00:03:33,810  -->  00:03:36,000
the second parameter is rwd,
83

83

00:03:36,000  -->  00:03:38,450
which we'll talk about shortly.
84

84

00:03:38,450  -->  00:03:41,540
And we'll get rid of this other code.
85

85

00:03:44,810  -->  00:03:47,560
And the code is raw dot writeInt,
86

86

00:03:50,590  -->  00:03:53,920
and it's going to be locations dot size.
87

87

00:03:54,920  -->  00:03:56,630
So again, it's the number of locations
88

88

00:03:56,630  -->  00:03:58,060
that we've got at the moment
89

89

00:03:58,060  -->  00:04:00,130
we're writing that to
our random access file
90

90

00:04:00,130  -->  00:04:03,360
locations underscore rand dot dat.
91

91

00:04:03,360  -->  00:04:05,920
Now code it to RAO here,
92

92

00:04:05,920  -->  00:04:07,590
because we're going to be
loading location on demand
93

93

00:04:07,590  -->  00:04:08,920
when we run the game.
94

94

00:04:08,920  -->  00:04:10,660
Now the locations data file
95

95

00:04:10,660  -->  00:04:13,100
will have to remain open
while the application runs.
96

96

00:04:13,100  -->  00:04:15,530
We're going to call the variable we use
97

97

00:04:15,530  -->  00:04:17,370
to read the files something different,
98

98

00:04:17,370  -->  00:04:19,910
so we don't confuse it with
the one we're using here,
99

99

00:04:19,910  -->  00:04:23,380
which is the one that we're
writing the locations with.
100

100

00:04:23,380  -->  00:04:24,450
All right, so the first argument
101

101

00:04:24,450  -->  00:04:26,580
to random access file is locations
102

102

00:04:26,580  -->  00:04:28,180
underscore rand dot dat
103

103

00:04:28,180  -->  00:04:31,460
and clearly that's the name of the file
104

104

00:04:31,460  -->  00:04:32,850
that we're writing it to,
105

105

00:04:32,850  -->  00:04:34,670
but this second option here,
106

106

00:04:34,670  -->  00:04:36,210
well that indicates that we want
107

107

00:04:36,210  -->  00:04:38,330
to open the file for reading and writing
108

108

00:04:38,330  -->  00:04:41,790
and also that we want writes
to occur synchronously.
109

109

00:04:41,790  -->  00:04:44,240
Now you can open a file that's read only,
110

110

00:04:44,240  -->  00:04:46,260
you can also not specify that updates
111

111

00:04:46,260  -->  00:04:48,980
to the file have to occur synchronously,
112

112

00:04:48,980  -->  00:04:51,300
but if we do that, and modable threads
113

113

00:04:51,300  -->  00:04:52,730
can't access the file,
114

114

00:04:52,730  -->  00:04:54,300
you would actually be responsible
115

115

00:04:54,300  -->  00:04:55,820
for synchronising the code yourself.
116

116

00:04:55,820  -->  00:04:57,160
So in this case, it doesn't matter
117

117

00:04:57,160  -->  00:04:59,670
since only one thread
will access the file.
118

118

00:04:59,670  -->  00:05:01,550
But generally speaking, it's good practise
119

119

00:05:01,550  -->  00:05:04,120
to have the random access file class
120

120

00:05:04,120  -->  00:05:06,740
handle the synchronisation,
when it does matter.
121

121

00:05:06,740  -->  00:05:09,720
So, using RWD's, we've
used here on line 14.
122

122

00:05:09,720  -->  00:05:12,750
That's the second
argument, is a good idea.
123

123

00:05:12,750  -->  00:05:14,200
All right, so I've written out the number
124

124

00:05:14,200  -->  00:05:16,550
of locations, so far, to the file.
125

125

00:05:16,550  -->  00:05:17,910
What we'll do now is gonna write
126

126

00:05:17,910  -->  00:05:20,720
the start off set of
the locations section.
127

127

00:05:20,720  -->  00:05:22,610
And once again, since the file pointer
128

128

00:05:22,610  -->  00:05:24,770
is already positioned correctly,
129

129

00:05:24,770  -->  00:05:28,220
we can just go ahead and use WriteInt.
130

130

00:05:28,220  -->  00:05:31,200
So we're gonna type Int index size
131

131

00:05:31,200  -->  00:05:34,700
is equal to locations dot size times three
132

132

00:05:37,690  -->  00:05:39,690
times integer dot bytes.
133

133

00:05:42,790  -->  00:05:46,130
Then we're gonna do int location start
134

134

00:05:46,130  -->  00:05:48,960
equals int index size plus RAO dot
135

135

00:05:53,920  -->  00:05:57,260
int file pointer plus integer dot bytes.
136

136

00:06:02,310  -->  00:06:05,510
Then we're gonna do RAO dot writeInt
137

137

00:06:05,510  -->  00:06:08,260
and it's gonna be location start.
138

138

00:06:09,090  -->  00:06:10,850
All right, so each index record,
139

139

00:06:10,850  -->  00:06:13,700
will contain three integers.
140

140

00:06:13,700  -->  00:06:17,320
The location ID, the
offset for the location,
141

141

00:06:17,320  -->  00:06:20,630
and the size or length
of the location record.
142

142

00:06:20,630  -->  00:06:22,760
Now we're calculating the index size,
143

143

00:06:22,760  -->  00:06:24,810
by multiplying the number of locations
144

144

00:06:24,810  -->  00:06:27,790
by the number of ints
contained in each record,
145

145

00:06:27,790  -->  00:06:29,350
in this case three.
146

146

00:06:29,350  -->  00:06:32,230
By the number of bytes
contained in an integer.
147

147

00:06:32,230  -->  00:06:33,190
So you can see that we've done that
148

148

00:06:33,190  -->  00:06:34,240
here on line 16.
149

149

00:06:34,240  -->  00:06:35,620
So location dot size gives us
150

150

00:06:35,620  -->  00:06:36,990
the number of locations.
151

151

00:06:36,990  -->  00:06:39,100
We're multiplying it by three.
152

152

00:06:39,100  -->  00:06:40,830
And again, the reason we're doing three
153

153

00:06:40,830  -->  00:06:43,690
is because our index is going to store
154

154

00:06:43,690  -->  00:06:45,020
the location ID.
155

155

00:06:45,890  -->  00:06:47,820
Also the offset for the location.
156

156

00:06:47,820  -->  00:06:50,540
And then the size and length
of the location record.
157

157

00:06:50,540  -->  00:06:51,930
And then we're multiplying that
158

158

00:06:51,930  -->  00:06:53,790
by the size of an integer.
159

159

00:06:53,790  -->  00:06:54,740
And we're getting that by using
160

160

00:06:54,740  -->  00:06:57,430
the integer class dot bytes.
161

161

00:06:57,430  -->  00:06:58,710
So once we've done that,
162

162

00:06:58,710  -->  00:07:00,050
on the next line, we then calculate
163

163

00:07:00,050  -->  00:07:02,410
the current position of the file pointer
164

164

00:07:02,410  -->  00:07:03,730
to the index size.
165

165

00:07:03,730  -->  00:07:05,370
To account for the value that we've
166

166

00:07:05,370  -->  00:07:07,160
already written to the file.
167

167

00:07:07,160  -->  00:07:08,520
And we also have to account
168

168

00:07:08,520  -->  00:07:10,740
for the integer, we're
about to write to the file,
169

169

00:07:10,740  -->  00:07:14,940
the location section
offset, we just calculated.
170

170

00:07:14,940  -->  00:07:17,140
So we also have to add the number of bytes
171

171

00:07:17,140  -->  00:07:17,980
to an integer.
172

172

00:07:17,980  -->  00:07:19,120
So we're doing that down here, on the end,
173

173

00:07:19,120  -->  00:07:21,240
the end of that line.
174

174

00:07:21,240  -->  00:07:23,890
So this will give us the offset
for the location section.
175

175

00:07:23,890  -->  00:07:26,940
Now as an alternative,
we could have also added
176

176

00:07:26,940  -->  00:07:29,730
the index size, to the size of two bytes.
177

177

00:07:29,730  -->  00:07:32,570
But I like to use the file
pointer, wherever possible.
178

178

00:07:32,570  -->  00:07:33,670
And I suggest that you should probably
179

179

00:07:33,670  -->  00:07:35,450
do that as well.
180

180

00:07:35,450  -->  00:07:37,980
And over here, we had cast to an int.
181

181

00:07:37,980  -->  00:07:40,470
And that's because the file
pointer is a long value.
182

182

00:07:40,470  -->  00:07:42,000
Now we could have written a long,
183

183

00:07:42,000  -->  00:07:44,910
but we're gonna write
ints wherever possible.
184

184

00:07:44,910  -->  00:07:46,070
And I suggest you do that.
185

185

00:07:46,070  -->  00:07:48,500
And if you were working
with an application
186

186

00:07:48,500  -->  00:07:50,980
with lots of data, such
that the file offsets
187

187

00:07:50,980  -->  00:07:53,330
could be larger than an int, could hold,
188

188

00:07:53,330  -->  00:07:55,010
then of course, you'd have to stick
189

189

00:07:55,010  -->  00:07:55,930
to using longs to make sure you
190

190

00:07:55,930  -->  00:07:58,550
didn't exceed the maximum size of an int.
191

191

00:07:58,550  -->  00:08:01,810
All right so we've written
out that location start now.
192

192

00:08:01,810  -->  00:08:04,570
Now the next section in
the file is the index.
193

193

00:08:04,570  -->  00:08:06,890
But before we can write the index,
194

194

00:08:06,890  -->  00:08:08,870
we have to write the locations.
195

195

00:08:08,870  -->  00:08:10,890
And that's because each index record
196

196

00:08:10,890  -->  00:08:12,990
requires the offset for the location.
197

197

00:08:12,990  -->  00:08:14,560
And, of course, we don't know the offset
198

198

00:08:14,560  -->  00:08:17,150
until we've written the location.
199

199

00:08:17,150  -->  00:08:19,020
Now I guess we could write a location
200

200

00:08:19,020  -->  00:08:20,890
and then write the index record for it.
201

201

00:08:20,890  -->  00:08:22,380
And then write the next location
202

202

00:08:22,380  -->  00:08:24,190
and write the index record for it.
203

203

00:08:24,190  -->  00:08:25,340
And so on, and so forth.
204

204

00:08:25,340  -->  00:08:26,260
But that would actually involve
205

205

00:08:26,260  -->  00:08:28,990
a lot of jumping back
and forth in the file.
206

206

00:08:28,990  -->  00:08:31,170
Now a disc access is expensive,
207

207

00:08:31,170  -->  00:08:32,980
and it's even more expensive
208

208

00:08:32,980  -->  00:08:34,520
when it's not sequential.
209

209

00:08:34,520  -->  00:08:35,930
So, instead, what we're gonna do
210

210

00:08:35,930  -->  00:08:37,750
is write all the locations and then
211

211

00:08:37,750  -->  00:08:40,260
we'll write the index as a whole.
212

212

00:08:40,260  -->  00:08:41,560
Now to do that, what we have to do
213

213

00:08:41,560  -->  00:08:43,150
is build the index in memory
214

214

00:08:43,150  -->  00:08:45,290
as we write the locations.
215

215

00:08:45,290  -->  00:08:47,350
Now because we wanna jump back to the file
216

216

00:08:47,350  -->  00:08:49,080
when we finished writing the locations,
217

217

00:08:49,080  -->  00:08:51,980
we'll save the current
position of the file pointer,
218

218

00:08:51,980  -->  00:08:54,060
so that we can jump back to it
219

219

00:08:54,060  -->  00:08:56,070
when we want to write the index,
220

220

00:08:56,070  -->  00:08:57,260
since we'll write the index after the two
221

221

00:08:57,260  -->  00:08:58,730
integers we've already written.
222

222

00:08:58,730  -->  00:09:00,830
We'd be writing it to offset eight.
223

223

00:09:00,830  -->  00:09:03,200
Which is where the file pointer
is currently positioned,
224

224

00:09:03,200  -->  00:09:05,160
after writing the number of locations
225

225

00:09:05,160  -->  00:09:08,080
in the location section offset.
226

226

00:09:08,080  -->  00:09:10,490
All right, we'll do it there,
227

227

00:09:10,490  -->  00:09:13,370
some code long, index start,
228

228

00:09:13,370  -->  00:09:16,460
is equal to RAO dot get file pointer.
229

229

00:09:17,510  -->  00:09:18,600
All right, at this point,
230

230

00:09:18,600  -->  00:09:21,470
we're ready to write the locations.
231

231

00:09:21,470  -->  00:09:23,200
Now we've already calculated the offset
232

232

00:09:23,200  -->  00:09:25,360
of the locations data section.
233

233

00:09:25,360  -->  00:09:27,560
And we're gonna assign that to a variable
234

234

00:09:27,560  -->  00:09:29,840
called start pointer, which will update
235

235

00:09:29,840  -->  00:09:31,770
after writing each location.
236

236

00:09:31,770  -->  00:09:33,410
And then we'll look through the locations,
237

237

00:09:33,410  -->  00:09:35,270
write out each location.
238

238

00:09:35,270  -->  00:09:36,890
Create an index for it.
239

239

00:09:36,890  -->  00:09:39,380
And add an index record to a map.
240

240

00:09:39,380  -->  00:09:41,320
Now to do all this, we really need
241

241

00:09:41,320  -->  00:09:42,900
an index record class.
242

242

00:09:42,900  -->  00:09:44,220
So we're gonna add a new Java class
243

243

00:09:44,220  -->  00:09:46,710
called index record to our project.
244

244

00:09:46,710  -->  00:09:48,910
So let's go ahead and do that.
245

245

00:09:48,910  -->  00:09:50,910
New class, index record.
246

246

00:09:55,340  -->  00:09:57,110
So we're going to have two fields here,
247

247

00:09:57,110  -->  00:10:00,860
the private int stop
byte, which I mentioned.
248

248

00:10:01,820  -->  00:10:03,730
And private int length.
249

249

00:10:05,860  -->  00:10:07,730
We want a constructor, and the constructor
250

250

00:10:07,730  -->  00:10:09,790
should accept both parameters,
251

251

00:10:09,790  -->  00:10:11,820
and save those to the fields.
252

252

00:10:11,820  -->  00:10:15,570
Now let's also set up
parse getters and setters
253

253

00:10:15,570  -->  00:10:17,500
for this, as well, on both of them.
254

254

00:10:17,500  -->  00:10:21,490
All right, so there's
our class, pretty simple.
255

255

00:10:21,490  -->  00:10:22,480
Now we said that an index record
256

256

00:10:22,480  -->  00:10:24,240
could contain the location ID,
257

257

00:10:24,240  -->  00:10:26,250
start offset, and length.
258

258

00:10:26,250  -->  00:10:28,310
And when we load the
index records into memory,
259

259

00:10:28,310  -->  00:10:30,770
the location ID will act as a map key.
260

260

00:10:30,770  -->  00:10:33,720
And that's why we don't have
to store it in the class.
261

261

00:10:33,720  -->  00:10:35,400
In case you're wondering.
262

262

00:10:35,400  -->  00:10:36,940
All right, so in this cell, go back
263

263

00:10:36,940  -->  00:10:38,850
to our locations class.
264

264

00:10:38,850  -->  00:10:40,850
And write out each location.
265

265

00:10:40,850  -->  00:10:42,490
Now I'm gonna type in all the code first
266

266

00:10:42,490  -->  00:10:44,990
and then we'll discuss it.
267

267

00:10:44,990  -->  00:10:46,580
So we're gonna start with our,
268

268

00:10:46,580  -->  00:10:48,450
and I'll just cut up a little bit
269

269

00:10:48,450  -->  00:10:49,690
so it's easy to read.
270

270

00:10:49,690  -->  00:10:50,970
I'll start with an int.
271

271

00:10:50,970  -->  00:10:52,470
Int start pointer,
272

272

00:10:55,420  -->  00:10:59,170
and that's equal to location start.
273

273

00:10:59,170  -->  00:11:01,670
And RAO dot seek stop pointer.
274

274

00:11:04,850  -->  00:11:07,300
And we're gonna do four location,
275

275

00:11:07,300  -->  00:11:10,220
location, and locations dot values.
276

276

00:11:13,920  -->  00:11:16,950
Then we're gonna do RAO dot write int.
277

277

00:11:16,950  -->  00:11:20,870
And it's gonna be location
dot get location ID.
278

278

00:11:21,830  -->  00:11:23,330
RAO dot write utf.
279

279

00:11:25,750  -->  00:11:27,420
And that's gonna be descriptions,
280

280

00:11:27,420  -->  00:11:30,090
so location dot get description.
281

281

00:11:32,090  -->  00:11:33,640
Then we wanna create a string buddha.
282

282

00:11:33,640  -->  00:11:36,310
So string buddha buddha is equal to
283

283

00:11:36,310  -->  00:11:37,810
new string buddha.
284

284

00:11:40,900  -->  00:11:45,130
And there are gonna be
four string direction.
285

285

00:11:45,130  -->  00:11:48,290
And location dot get exits dot keyset.
286

286

00:11:51,730  -->  00:11:55,310
If not direction is equal to quit
287

287

00:11:55,310  -->  00:11:57,310
or equals ignore case Q.
288

288

00:12:00,000  -->  00:12:01,410
So if it's not quit,
we're gonna do builder
289

289

00:12:01,410  -->  00:12:03,160
dot append direction.
290

290

00:12:06,470  -->  00:12:10,130
Then we're gonna do
builder dot append comma
291

291

00:12:11,780  -->  00:12:15,200
builder dot append location dot get exits
292

292

00:12:18,450  -->  00:12:19,950
dot get direction.
293

293

00:12:23,430  -->  00:12:26,520
And then builder dot append no comma.
294

294

00:12:30,230  -->  00:12:34,520
Okay, and then just move
this up a little bit.
295

295

00:12:34,520  -->  00:12:37,690
And that's gonna be RAO dot write utf.
296

296

00:12:40,400  -->  00:12:44,230
And in this case, it'll
be builder two string.
297

297

00:12:46,770  -->  00:12:48,230
And obviously, I'm one level too deep.
298

298

00:12:48,230  -->  00:12:50,370
That actually should have
been there, of course.
299

299

00:12:50,370  -->  00:12:53,900
We still wanna stay in the four loop.
300

300

00:12:53,900  -->  00:12:55,380
And we also need to
create our index records.
301

301

00:12:55,380  -->  00:12:57,940
So index record, remember we're writing
302

302

00:12:57,940  -->  00:12:59,340
the indexes later, but we need to build up
303

303

00:12:59,340  -->  00:13:01,670
this index in memory, first.
304

304

00:13:02,950  -->  00:13:04,720
And, so new index record.
305

305

00:13:04,720  -->  00:13:07,980
The first parameter's
gonna be stop pointer.
306

306

00:13:07,980  -->  00:13:09,760
Then we also wanna store an int.
307

307

00:13:09,760  -->  00:13:11,930
We'll cast that as an int.
308

308

00:13:13,140  -->  00:13:16,270
Which will be the RAO dot get file pointer
309

309

00:13:16,270  -->  00:13:17,860
take start pointer.
310

310

00:13:23,520  -->  00:13:27,060
Index dot put, we're gonna need to create
311

311

00:13:27,060  -->  00:13:27,940
that in a minute.
312

312

00:13:27,940  -->  00:13:30,690
So, location dot get location ID.
313

313

00:13:31,860  -->  00:13:36,460
And then the actual record,
the index record itself.
314

314

00:13:36,460  -->  00:13:38,300
Then we need to update start pointer.
315

315

00:13:38,300  -->  00:13:40,090
So start pointer will then equal
316

316

00:13:40,090  -->  00:13:43,270
cast as an int RAO dot get file pointer,
317

317

00:13:43,270  -->  00:13:45,850
whatever the current file pointer is.
318

318

00:13:45,850  -->  00:13:46,680
All right, so let's actually just
319

319

00:13:46,680  -->  00:13:48,350
add our index field.
320

320

00:13:51,060  -->  00:13:52,650
I'm gonna go ahead and do that up here.
321

321

00:13:52,650  -->  00:13:55,970
So that's gonna be private static.
322

322

00:13:55,970  -->  00:13:59,140
It's gonna be map integer index record
323

323

00:14:03,600  -->  00:14:05,180
index equal to new.
324

324

00:14:06,140  -->  00:14:08,720
And it's gonna be linked pash map.
325

325

00:14:08,720  -->  00:14:11,830
Which obviously makes
sense for our application.
326

326

00:14:11,830  -->  00:14:14,370
Given it's a list of rooms that
327

327

00:14:14,370  -->  00:14:16,170
are all linked to each other in some way.
328

328

00:14:16,170  -->  00:14:18,820
So I'll initialise it like that.
329

329

00:14:18,820  -->  00:14:21,800
And that should mean that
the code's ready to go.
330

330

00:14:21,800  -->  00:14:22,760
And now, we've still got a bit of work
331

331

00:14:22,760  -->  00:14:23,600
to do on this.
332

332

00:14:23,600  -->  00:14:25,000
The video's getting a
little bit long, here.
333

333

00:14:25,000  -->  00:14:26,450
So let's pause the video
334

334

00:14:26,450  -->  00:14:29,430
and continue on this in the next video.
