WEBVTT
1
1

00:00:05.150  -->  00:00:09.160
In the previous video, we started our
object orientated programming master test
2

2

00:00:09.160  -->  00:00:11.620
and we got the basic
hamburger class up and going.
3

3

00:00:11.620  -->  00:00:13.580
So let's now finish this off and
4

4

00:00:13.580  -->  00:00:17.750
create the healthy burger class as
well as the deluxe burger class.
5

5

00:00:17.750  -->  00:00:20.730
So firstly,
let's create the healthy burger.
6

6

00:00:20.730  -->  00:00:22.740
I'm gonna create a new class.
7

7

00:00:22.740  -->  00:00:24.560
I'm gonna call that healthy burger.
8

8

00:00:24.560  -->  00:00:29.290
Now what we need to do is
we need to extend from
9

9

00:00:29.290  -->  00:00:34.290
our basic burger class,
which is hamburger,
10

10

00:00:34.290  -->  00:00:39.020
so we need some of that functionality.
11

11

00:00:39.020  -->  00:00:42.820
And if you recall,
we need to add two additional extras.
12

12

00:00:42.820  -->  00:00:46.040
We've got the ability with
the healthy burger to
13

13

00:00:46.040  -->  00:00:48.880
add two additions to that burger.
14

14

00:00:48.880  -->  00:00:50.870
Just to go back and confirm that.
15

15

00:00:50.870  -->  00:00:53.050
Now, healthy burger, this part here.
16

16

00:00:53.050  -->  00:00:55.630
Healthy burger on a brown,
red, brown rye, I should say,
17

17

00:00:55.630  -->  00:00:57.970
bread roll plus two additional
items could be added.
18

18

00:00:57.970  -->  00:00:59.950
Healthy burger can have
a total of six items.
19

19

00:00:59.950  -->  00:01:03.550
And there was a hint that I gave you to
say you probably wanna process the two
20

20

00:01:03.550  -->  00:01:07.220
additional items in this new healthy
burger class, not in the base class,
21

21

00:01:07.220  -->  00:01:11.440
since the two additional items are really
only available in this healthy burger.
22

22

00:01:11.440  -->  00:01:12.610
So let's do that.
23

23

00:01:12.610  -->  00:01:17.860
So consequently, we need to add two
fields I should say to this class,
24

24

00:01:17.860  -->  00:01:20.990
and they're going to be private string.
25

25

00:01:20.990  -->  00:01:26.970
And we'll call them healthy Extra and
26

26

00:01:26.970  -->  00:01:33.150
we'll call it healthyExtra1Name and
27

27

00:01:33.150  -->  00:01:37.270
private double healthy.
28

28

00:01:41.090  -->  00:01:42.550
Extra1Price.
29

29

00:01:45.670  -->  00:01:49.630
And we'll do the same for those two for
30

30

00:01:49.630  -->  00:01:53.350
the second edition for the burger.
31

31

00:01:53.350  -->  00:01:57.210
And incidentally, the error on the screen
is because we haven't implemented
32

32

00:01:57.210  -->  00:02:01.660
a constructor yet, no default constructor,
and that's because the only constructor we
33

33

00:02:01.660  -->  00:02:04.540
created in the Hamburger class
actually had parameters.
34

34

00:02:04.540  -->  00:02:07.110
As you can see there,
we didn't have an empty one, so
35

35

00:02:07.110  -->  00:02:09.950
consequently we need a way to
actually call that method.
36

36

00:02:09.950  -->  00:02:11.940
Now, we're gonna do things
a little bit different here,
37

37

00:02:11.940  -->  00:02:16.580
oops I topped that topper there,
healthy, healthy.
38

38

00:02:16.580  -->  00:02:19.310
Now what were going to do
is with the constructor,
39

39

00:02:19.310  -->  00:02:22.560
we know the type of burger that
we're actually working on.
40

40

00:02:22.560  -->  00:02:23.670
We've got a healthy burger.
41

41

00:02:23.670  -->  00:02:26.320
We know the name of it and
we know the type of bread.
42

42

00:02:26.320  -->  00:02:28.950
So consequently,
when we're creating constructor,
43

43

00:02:28.950  -->  00:02:33.730
the only two parameters we want in
the constructor is the meat and the price.
44

44

00:02:33.730  -->  00:02:36.820
Because we're actually gonna hard
code the values for the name and
45

45

00:02:36.820  -->  00:02:39.210
the type of brown bread, in this case,
46

46

00:02:39.210  -->  00:02:42.230
the type of roll, because that's
what's in this healthy burger.
47

47

00:02:42.230  -->  00:02:43.600
That's what we're selling.
48

48

00:02:43.600  -->  00:02:47.400
So creating a constructor, now I'm not
actually going to choose any of these
49

49

00:02:47.400  -->  00:02:50.200
extras because none of these extras
are actually going to the constructor.
50

50

00:02:50.200  -->  00:02:54.450
But I click on okay, I actually get the
parameters that are built into the base
51

51

00:02:54.450  -->  00:02:59.030
class automatically because they're needed
to make this healthy burger class valid.
52

52

00:02:59.030  -->  00:03:02.030
What I'm going to do, as I mentioned,
I'm going to delete some of these.
53

53

00:03:02.030  -->  00:03:03.810
Firstly, the healthy one,
I should have selected none there.
54

54

00:03:03.810  -->  00:03:06.800
I obviously selected the healthy
extra one name by mistake, so
55

55

00:03:06.800  -->  00:03:08.110
I'm gonna leave that out.
56

56

00:03:08.110  -->  00:03:11.080
Delete that, and really the only
parameters I actually want,
57

57

00:03:11.080  -->  00:03:12.590
as I mentioned, are the meat and
58

58

00:03:12.590  -->  00:03:15.620
the price, because the other two
we're going to add manually.
59

59

00:03:15.620  -->  00:03:18.650
So we're gonna delete those like so.
60

60

00:03:18.650  -->  00:03:24.440
And our super call, we still need to
actually pass those two parameters,
61

61

00:03:24.440  -->  00:03:30.710
but I'm going to actually change that and
now we're gonna call it our healthy.
62

62

00:03:30.710  -->  00:03:35.030
And the bread roll type, we mentioned
before that was going to be brown rye,
63

63

00:03:35.030  -->  00:03:36.790
so we're gonna say brown rye.
64

64

00:03:36.790  -->  00:03:41.510
So that's us creating a valid healthy
burger class now based on those
65

65

00:03:41.510  -->  00:03:46.760
parameters, because we know the top
burger that we're creating.
66

66

00:03:46.760  -->  00:03:52.070
For the two additions, we need to do, very
similar to what we did for the other ones.
67

67

00:03:52.070  -->  00:03:58.160
So we wanna put public,
we'll put addhealthedition1, and
68

68

00:03:58.160  -->  00:04:03.540
that's gonna have the 9 and
the double for the price,
69

69

00:04:03.540  -->  00:04:08.580
and it'll be
this.healthy1ExtraName = name,
70

70

00:04:08.580  -->  00:04:12.580
this.healthy1ExtraPrice = price.
71

71

00:04:14.780  -->  00:04:18.840
And do the same for
the second healthy additional item.
72

72

00:04:21.800  -->  00:04:22.800
Like so.
73

73

00:04:25.820  -->  00:04:28.060
Okay, I'll make a bit of space here.
74

74

00:04:28.060  -->  00:04:31.100
So that's our basic setup for
the healthy burger.
75

75

00:04:31.100  -->  00:04:33.870
The other thing we wanna
do now is we need to
76

76

00:04:33.870  -->  00:04:35.930
have a look at that
itemized hamburger method.
77

77

00:04:35.930  -->  00:04:38.720
So we go back to our hamburger class.
78

78

00:04:38.720  -->  00:04:42.160
We have this itemized hamburger method.
79

79

00:04:42.160  -->  00:04:43.460
And that of course create, or
80

80

00:04:43.460  -->  00:04:47.080
will actually summed up the total for
the hamburger.
81

81

00:04:47.080  -->  00:04:48.320
But if you think about it now,
82

82

00:04:48.320  -->  00:04:50.860
we've got two additional items
that we can optionally add.
83

83

00:04:50.860  -->  00:04:55.440
So right now if we run this healthy
burger, it'll actually work.
84

84

00:04:55.440  -->  00:05:00.610
So if we change this, and
we'll put healthy burger, and
85

85

00:05:00.610  -->  00:05:05.470
we'll call it healthyBurger
= new healthyBurger.
86

86

00:05:05.470  -->  00:05:07.960
And remembering that we've only
got two items to add here.
87

87

00:05:07.960  -->  00:05:12.940
That's the meat, and
we'll say this one's got bacon,
88

88

00:05:12.940  -->  00:05:16.880
and let's just say the price is $5.67.
89

89

00:05:16.880  -->  00:05:21.090
So if we do our
healthyburger.itemizehamburger,
90

90

00:05:21.090  -->  00:05:25.870
if we run this, you can see
we've got a healthy hamburger on
91

91

00:05:25.870  -->  00:05:29.990
a brown rye roll with bacon,
price is $5.67.
92

92

00:05:29.990  -->  00:05:33.770
So it's accepted our parameters,
obviously the name and
93

93

00:05:33.770  -->  00:05:36.470
the top of bread roll in our constructor.
94

94

00:05:36.470  -->  00:05:40.630
That's all working fine and we'll be able
to add an item to that quite nicely as
95

95

00:05:40.630  -->  00:05:43.360
well, healthyBurger.add
additional item one.
96

96

00:05:43.360  -->  00:05:46.740
And let's just say that was egg, and
97

97

00:05:46.740  -->  00:05:52.540
we're a greedy restaurant,
so we'll say it was $5.43.
98

98

00:05:52.540  -->  00:05:55.610
And actually what I'll do is I'll
remove that out of there and
99

99

00:05:55.610  -->  00:05:57.260
just paste it into there like so.
100

100

00:05:57.260  -->  00:06:00.400
So then if we run that,
we should see that that is still working.
101

101

00:06:00.400  -->  00:06:04.420
And the reason that it's working is
our base functionality built into
102

102

00:06:04.420  -->  00:06:08.130
the application is,
built into the base class, I should say,
103

103

00:06:08.130  -->  00:06:10.200
the hamburger class, is working.
104

104

00:06:10.200  -->  00:06:14.330
So those methods that we created in the
base hamburger class are still there and
105

105

00:06:14.330  -->  00:06:15.630
worked quite nicely.
106

106

00:06:15.630  -->  00:06:16.500
But the issue, of course,
107

107

00:06:16.500  -->  00:06:19.800
now is we haven't got a mechanism
to tally up the price.
108

108

00:06:19.800  -->  00:06:23.490
We can actually add an item to the
hamburger, to the healthy hamburger, so
109

109

00:06:23.490  -->  00:06:27.210
a healthyburger.add additional price,
let's just say it's lentils.
110

110

00:06:27.210  -->  00:06:32.200
No way you'd put lentils with a hamburger,
but anyway, $3.41, bracket and save,
111

111

00:06:32.200  -->  00:06:33.190
just hit the one.
112

112

00:06:33.190  -->  00:06:36.480
But there's no mechanism at
the moment to add that to the cost,
113

113

00:06:36.480  -->  00:06:38.530
the total price for the hamburger, and
114

114

00:06:38.530  -->  00:06:43.210
the reason is we haven't got an itemized
hamburger method for this class here.
115

115

00:06:43.210  -->  00:06:45.910
So let's go back to
the healthy burger class and
116

116

00:06:45.910  -->  00:06:48.350
actually add an itemized
hamburger method so
117

117

00:06:48.350  -->  00:06:52.830
that we can actually tally up the price
for these additional health items as well.
118

118

00:06:52.830  -->  00:06:56.830
So to do that, what we wanna do
is we wanna override that method.
119

119

00:06:56.830  -->  00:06:59.460
So we're gonna click on override,
or select override.
120

120

00:06:59.460  -->  00:07:04.440
We're gonna go to hamburger, and
go to the itemized hamburger method and
121

121

00:07:04.440  -->  00:07:06.620
we're going to override that.
122

122

00:07:06.620  -->  00:07:11.330
Click OK, so by default that's come back
with the super.itemizedHamburger, and
123

123

00:07:11.330  -->  00:07:13.410
returning that as the price.
124

124

00:07:13.410  -->  00:07:16.850
We wanna change that, cuz what we wanna
do is we want to actually put a double,
125

125

00:07:16.850  -->  00:07:18.450
we'll put hamburger price again.
126

126

00:07:22.830  -->  00:07:27.170
Price equals, so what this is doing now,
it's actually calling
127

127

00:07:27.170  -->  00:07:32.250
the itemized hamburger method
that's in our hamburger class.
128

128

00:07:32.250  -->  00:07:36.250
It's calling that, and that's coming
back with the itemized price for
129

129

00:07:36.250  -->  00:07:39.270
the basic hamburger and
the four additions.
130

130

00:07:39.270  -->  00:07:41.230
So that's what we got to start with, but
131

131

00:07:41.230  -->  00:07:44.000
now what we need to do is we
need to figure out how to
132

132

00:07:44.000  -->  00:07:48.490
add the extra items to that price,
which turns out that that's quite simple.
133

133

00:07:48.490  -->  00:07:52.330
We can actually just do the similar
test that we did in the hamburger class,
134

134

00:07:52.330  -->  00:07:54.790
this.healthyExtraName is
not equal to null.
135

135

00:07:57.260  -->  00:08:04.880
Then we do a hamburgerPrice
+=_this.healthyExtra1Price.
136

136

00:08:04.880  -->  00:08:10.290
And then I think we put Added
137

137

00:08:10.290  -->  00:08:14.260
extra one name plus for
138

138

00:08:14.260  -->  00:08:18.650
an extra, for an extra,
139

139

00:08:18.650  -->  00:08:25.980
this.healthyExtraPrice1, like so.
140

140

00:08:25.980  -->  00:08:29.460
And I'll just cancel that so we get a bit
more space to see what we're doing here.
141

141

00:08:29.460  -->  00:08:30.240
So that was number one.
142

142

00:08:30.240  -->  00:08:32.780
We've added that, and
then of course we do the same for
143

143

00:08:32.780  -->  00:08:34.680
the second healthy additional option.
144

144

00:08:35.820  -->  00:08:39.980
So extra two is not equal to null,
which means there is one,
145

145

00:08:39.980  -->  00:08:42.460
there has been one passed to us.
146

146

00:08:42.460  -->  00:08:46.020
Actually output the second name,
the second price, and
147

147

00:08:46.020  -->  00:08:48.690
then at this point we can do
a return hamburger price.
148

148

00:08:50.750  -->  00:08:54.030
This should be the price
including the healthy extras.
149

149

00:08:54.030  -->  00:08:57.790
So now if you go back and what we'll
do is we'll actually change this.
150

150

00:08:57.790  -->  00:09:00.830
We'll actually put the itemized
hamburger at the end there, so
151

151

00:09:00.830  -->  00:09:02.480
you don't need to display it twice.
152

152

00:09:02.480  -->  00:09:05.940
So we're now actually adding a normal
item, an additional normal item,
153

153

00:09:05.940  -->  00:09:07.500
then we're also adding
a healthy addition as well.
154

154

00:09:07.500  -->  00:09:10.610
Well, we're itemizing, and then let's
actually just put an output here
155

155

00:09:10.610  -->  00:09:12.820
just to make sure that
the price seems to be working.
156

156

00:09:12.820  -->  00:09:18.530
Total healthy burger price is plus healthy
157

157

00:09:18.530  -->  00:09:23.920
burger price, and fix the brackets up.
158

158

00:09:23.920  -->  00:09:28.380
So now if we run that, we can see now
we've got healthy hamburger on rye,
159

159

00:09:28.380  -->  00:09:33.200
price is $5.67, added an egg for
an extra $5.43, added lentils for
160

160

00:09:33.200  -->  00:09:38.630
an extra $3.41, which you can see is
now working, and the price is $14.51.
161

161

00:09:38.630  -->  00:09:43.330
And if we just use our calculator
to make sure that's working,
162

162

00:09:43.330  -->  00:09:51.190
5.67 plus 5.43 plus 3.41 equals 14.51,
so our processing is working great.
163

163

00:09:51.190  -->  00:09:55.320
So you can see now that we've actually
got our healthy burger working nicely and
164

164

00:09:55.320  -->  00:09:57.350
calling the appropriate functions, so
165

165

00:09:57.350  -->  00:10:00.680
what we now need to do is
implement the deluxe burger.
166

166

00:10:00.680  -->  00:10:03.050
And if you recall,
the deluxe burger, we'll go back and
167

167

00:10:03.050  -->  00:10:04.900
just have a look at our notes for
that again.
168

168

00:10:06.510  -->  00:10:09.560
The deluxe burger comes with chips and
drinks as additions,
169

169

00:10:09.560  -->  00:10:11.510
but no extra additions are allowed.
170

170

00:10:11.510  -->  00:10:15.370
So you need to find a way to automatically
add these two new additions at the time
171

171

00:10:15.370  -->  00:10:18.380
the deluxe burger is created,
or the object is created,
172

172

00:10:18.380  -->  00:10:21.140
and then to prevent other
additions being made.
173

173

00:10:21.140  -->  00:10:22.480
So let's go ahead and do that.
174

174

00:10:22.480  -->  00:10:26.170
What we're going to do is
create another class and
175

175

00:10:26.170  -->  00:10:33.010
call that DeluxeBurger, and
we're going to extend from hamburger.
176

176

00:10:36.020  -->  00:10:40.180
Now we don't actually need any new fields
for this, because we're not processing any
177

177

00:10:40.180  -->  00:10:43.000
new additions for this like we did for
the healthy burger.
178

178

00:10:43.000  -->  00:10:46.750
But what we wanna do is create a default
constructor with no parameters.
179

179

00:10:46.750  -->  00:10:50.060
We're gonna put everything in the one
constructor, so we're gonna create that.
180

180

00:10:50.060  -->  00:10:53.160
And, again, by default it adds those,
but we're going to remove those.
181

181

00:10:55.130  -->  00:10:57.360
Instead, what we're going to do is
we're going to do these manually.
182

182

00:10:57.360  -->  00:10:58.750
So we're gonna call it the deluxe.
183

183

00:11:01.460  -->  00:11:07.930
For the meat let's say it's got
sausage and bacon, cuz it is a deluxe.
184

184

00:11:11.710  -->  00:11:17.030
Price, let's just say it's $14.53,
185

185

00:11:17.030  -->  00:11:23.490
54, and we'll say white for
the bread roll top.
186

186

00:11:23.490  -->  00:11:27.520
So that's now created our deluxe burger,
and we also mention
187

187

00:11:27.520  -->  00:11:30.460
that we needed to add two additions,
which were the chips and the drink.
188

188

00:11:30.460  -->  00:11:34.310
Now we don't want to enable
those methods later, but
189

189

00:11:34.310  -->  00:11:38.340
what we can do is we can put
those in the constructor, and
190

190

00:11:38.340  -->  00:11:43.180
we can do that by putting super.add
hamburgeraddition1 Chips.
191

191

00:11:43.180  -->  00:11:47.250
Let's just say they were $2.75, and
192

192

00:11:47.250  -->  00:11:50.990
super.addhamburgeraddition2, or
193

193

00:11:50.990  -->  00:11:55.870
put drink, whatever the drink was, $1.81.
194

194

00:11:55.870  -->  00:11:58.760
So that's our way of
creating the deluxe burger
195

195

00:11:58.760  -->  00:12:02.220
with the additions at the time
the object is created.
196

196

00:12:02.220  -->  00:12:05.580
Now the other thing we wanna do, because
by default, if we actually go to run this,
197

197

00:12:05.580  -->  00:12:06.920
we should find that it'll work.
198

198

00:12:06.920  -->  00:12:11.340
And we'll call this the DeluxeBurger
db = new DeluxeBurger(); no
199

199

00:12:11.340  -->  00:12:12.920
parameters are needed.
200

200

00:12:12.920  -->  00:12:17.110
And if we then do a db.itemizeHamburger(),
201

201

00:12:17.110  -->  00:12:21.000
if we run that,
you should find that works.
202

202

00:12:21.000  -->  00:12:25.250
A deluxe hamburger on a white roll with
sausage and bacon, price is $14.54,
203

203

00:12:25.250  -->  00:12:29.020
add a chips for an extra $2.75,
add a drink for an extra $1.81.
204

204

00:12:29.020  -->  00:12:31.690
And notice how they were
added in the constructor, but
205

205

00:12:31.690  -->  00:12:35.060
the problem we've got now is,
again going back to the code up above.
206

206

00:12:35.060  -->  00:12:38.250
We needed a way to make sure that,
actually I'll delete that so
207

207

00:12:38.250  -->  00:12:41.650
I got a little bit more space, but
no extra additions are allowed.
208

208

00:12:41.650  -->  00:12:44.560
So in other words, we can't add anything
else other than what's already in there.
209

209

00:12:44.560  -->  00:12:48.130
But, at the moment, if we go back here and
have a look, we can actually add those.
210

210

00:12:48.130  -->  00:12:53.940
We can put db.add additional item 1,
should not do this.
211

211

00:12:57.550  -->  00:12:59.470
So we can actually do that, and
212

212

00:12:59.470  -->  00:13:02.190
of course that bar that's the rule
that we've set for ourselves.
213

213

00:13:02.190  -->  00:13:04.830
Actually what I should have done
was made that additional item 3,
214

214

00:13:04.830  -->  00:13:08.160
then should also display that
in the right place like that.
215

215

00:13:08.160  -->  00:13:11.090
So if you run that,
we've got this line here,
216

216

00:13:11.090  -->  00:13:12.950
which shouldn't have been able to do that.
217

217

00:13:12.950  -->  00:13:16.660
So the question is how do we prevent
those methods from being called just for
218

218

00:13:16.660  -->  00:13:18.030
the deluxe burger method?
219

219

00:13:18.030  -->  00:13:20.070
Well it turns out that's
actually quite easy.
220

220

00:13:20.070  -->  00:13:21.490
We can actually override.
221

221

00:13:21.490  -->  00:13:25.680
So what we can do is we can go back
here to our deluxe burger class, and
222

222

00:13:25.680  -->  00:13:27.010
we can put override.
223

223

00:13:28.410  -->  00:13:30.690
And we can go back to our hamburger class,
and
224

224

00:13:30.690  -->  00:13:35.220
I can select the add additional item 1,
2, 3, and 4, and
225

225

00:13:35.220  -->  00:13:39.480
I can actually prevent those from being
called by overriding those methods.
226

226

00:13:39.480  -->  00:13:40.410
So I can click on okay.
227

227

00:13:41.610  -->  00:13:45.530
That's added those, and what we're going
to do is just change the code, we're not
228

228

00:13:45.530  -->  00:13:48.590
gonna call the super, we're actually
just going to put a message there.
229

229

00:13:48.590  -->  00:13:53.580
The message is going to be, can not add
230

230

00:13:53.580  -->  00:13:59.830
additional Items to a deluxe burger,
like so.
231

231

00:14:02.240  -->  00:14:03.570
So if you had added that one for
232

232

00:14:03.570  -->  00:14:07.640
each of the four additional methods
in the base hamburger class.
233

233

00:14:07.640  -->  00:14:12.860
We've overridden those functions, those
methods, just in the deluxe burger class,
234

234

00:14:12.860  -->  00:14:16.540
so consequently now if I go back
to our main and run this again,
235

235

00:14:16.540  -->  00:14:18.750
you can see what's happened there.
236

236

00:14:18.750  -->  00:14:22.340
We've still being able to create
the class and to add the chips and
237

237

00:14:22.340  -->  00:14:26.380
the drinks initially, and the reason
that that works is if you look back at
238

238

00:14:26.380  -->  00:14:31.370
our deluxe burger code, we're calling the
super.addHamburgerAddition item method.
239

239

00:14:31.370  -->  00:14:35.130
So that's why that's working, so we're
actually calling the methods that are in
240

240

00:14:35.130  -->  00:14:38.100
the hamburger class,
in the base hamburger class, these here.
241

241

00:14:38.100  -->  00:14:42.710
And it's quite happily adding those,
because we're calling that
242

242

00:14:42.710  -->  00:14:45.980
from the super dot and
whatever the name of the method is.
243

243

00:14:45.980  -->  00:14:48.890
But in this case what we're saying
is we're actually overriding
244

244

00:14:48.890  -->  00:14:52.970
the add hamburger addition one method for
the deluxe burger class, but
245

245

00:14:52.970  -->  00:14:55.570
we're actually not enabling
that code to be called.
246

246

00:14:55.570  -->  00:14:59.300
So consequently, when we try to do this,
this should not do this.
247

247

00:14:59.300  -->  00:15:03.240
It's calling this code here from our
deluxe burger, the add additional item 1,
248

248

00:15:03.240  -->  00:15:05.240
cannot add additional items
to a deluxe burger, and
249

249

00:15:05.240  -->  00:15:08.100
that's what's coming
up on the screen here.
250

250

00:15:08.100  -->  00:15:10.030
So that's how you go
about overriding it and
251

251

00:15:10.030  -->  00:15:13.860
preventing functionality from being
processed, as you can see in that example.
252

252

00:15:13.860  -->  00:15:16.890
So that's our application,
that's our base hamburger application.
253

253

00:15:16.890  -->  00:15:19.950
I hope you've got a lot out of
these two videos, and actually for
254

254

00:15:19.950  -->  00:15:22.430
these last two sections of
the object orientated course
255

255

00:15:22.430  -->  00:15:23.780
alright so now that you've seen that
256

256

00:15:23.780  -->  00:15:25.670
solution I just want to make a point
257

257

00:15:25.670  -->  00:15:26.900
that it's certainly not a hundred
258

258

00:15:26.900  -->  00:15:29.230
perfect but I think it's a good solution
259

259

00:15:29.230  -->  00:15:31.520
by using the knowledge that we've
260

260

00:15:31.520  -->  00:15:34.520
learned in previous sections now in an
261

261

00:15:34.520  -->  00:15:36.140
ideal world you'd use something like a
262

262

00:15:36.140  -->  00:15:38.780
list or an array but lists and arrays
263

263

00:15:38.780  -->  00:15:41.000
are explained later in the course so
264

264

00:15:41.000  -->  00:15:43.580
this was designed for you to take this
265

265

00:15:43.580  -->  00:15:45.260
challenge based on the information
266

266

00:15:45.260  -->  00:15:47.870
already shown in the course so what you
267

267

00:15:47.870  -->  00:15:49.700
can do though is revisit this challenge
268

268

00:15:49.700  -->  00:15:51.560
later once you've learnt these other
269

269

00:15:51.560  -->  00:15:53.630
things this is an arrays armed with that
270

270

00:15:53.630  -->  00:15:55.340
new knowledge and look at improving your
271

271

00:15:55.340  -->  00:15:57.800
solution now you may also notice that
272

272

00:15:57.800  -->  00:15:59.750
there's some repeated code but that's
273

273

00:15:59.750  -->  00:16:02.060
actually okay for now later you're going
274

274

00:16:02.060  -->  00:16:03.980
to learn more and how to remove repeated
275

275

00:16:03.980  -->  00:16:07.310
code also very importantly keep in mind
276

276

00:16:07.310  -->  00:16:08.900
that you don't have to match the code
277

277

00:16:08.900  -->  00:16:11.330
100% as your solution it's great if it
278

278

00:16:11.330  -->  00:16:13.670
works the same as mine but your code can
279

279

00:16:13.670  -->  00:16:15.620
and probably will be different and
280

280

00:16:15.620  -->  00:16:17.720
perhaps vastly different than the
281

281

00:16:17.720  -->  00:16:19.340
solution I've shown there and that's
282

282

00:16:19.340  -->  00:16:20.630
because in programming there's almost
283

283

00:16:20.630  -->  00:16:22.760
always many solutions to a particular
284

284

00:16:22.760  -->  00:16:24.650
challenge and in this case that's
285

285

00:16:24.650  -->  00:16:26.030
certainly true and I think that's what
286

286

00:16:26.030  -->  00:16:28.220
makes this a good challenge and lastly
287

287

00:16:28.220  -->  00:16:29.720
again many students have shared their
288

288

00:16:29.720  -->  00:16:31.790
solutions in the Q&A section of the
289

289

00:16:31.790  -->  00:16:33.140
course so it's a good idea to check the
290

290

00:16:33.140  -->  00:16:35.300
Q&A and see their solutions once you've
291

291

00:16:35.300  -->  00:16:37.230
attempted it yourself
292

292

00:16:37.230  -->  00:16:39.040
and I hope you did well with our challenge,
as well.
293

293

00:16:39.040  -->  00:16:41.460
In the next section of the course we're
going to be talking about arrays,
294

294

00:16:41.460  -->  00:16:43.550
which I'm sure you're
gonna find very useful.
295

295

00:16:43.550  -->  00:16:45.000
So I'll see you in that next section.
