1
1

00:00:04,990  -->  00:00:10,240
ok so let's look a bit more at querying
the data including how we can make sure
2

2

00:00:10,240  -->  00:00:14,760
that we get the data back in a sensible
order if as I mentioned ordering of rows
3

3

00:00:14,760  -->  00:00:20,080
is undefined in a relational database so
when we display all the artists records
4

4

00:00:20,080  -->  00:00:25,170
actually come out in the same order each
time i can do that again select....
5

5

00:00:25,170  -->  00:00:32,320
.....so we get the same every time
we do we get the same order and that's
6

6

00:00:32,320  -->  00:00:36,940
because we have a primary key so the
records will automatically be selected
7

7

00:00:36,940  -->  00:00:41,860
based on the ordering of the primary key
note that the actual order of the record
8

8

00:00:41,860  -->  00:00:46,750
in the database is undefined and if we
didn't have a primary key that will be coming
9

9

00:00:46,750  -->  00:00:51,460
out in an undefined order now we can
actually specify a different order in
10

10

00:00:51,460  -->  00:00:57,250
our select statement by using an order
by clause so we can type.....
11

11

00:00:57,250  -->  00:01:07,930
....you can see now that the
12

12

00:01:07,930  -->  00:01:12,850
records have appeared in alphabetical
order and I can do exactly the same for
13

13

00:01:12,850  -->  00:01:24,420
the album's.....and you notice right down the bottom
14

14

00:01:24,420  -->  00:01:27,070
the two black beards Tea Party albums
15

15

00:01:27,070  -->  00:01:30,180
heavens to Betsy and whip jamboree are
out of order
16

16

00:01:30,720  -->  00:01:35,100
that's because they start with lowercase
letters now you can actually ignore case
17

17

00:01:35,100  -->  00:01:43,530
by using the collate no case clause so we
can do.....
18

18

00:01:43,530  -->  00:01:55,470
....and you can see
there are the ID 430 about 80% towards
19

19

00:01:55,470  -->  00:01:58,600
the bottom of the screen which is
whipped jamboree in that appears with
20

20

00:01:58,600  -->  00:02:02,560
the other albums beginning with W in
other words instead now ignoring case
21

21

00:02:02,560  -->  00:02:07,740
when it's actually returning results now
it is also possible to specify ascending
22

22

00:02:07,740  -->  00:02:14,050
or descending order using the keys
keywords asc desc or ASC or desc
23

23

00:02:14,050  -->  00:02:16,880
respectively which stands for ascending
or descending order
24

24

00:02:16,880  -->  00:02:23,960
so we can do select....
25

25

00:02:24,740  -->  00:02:27,920
....
26

26

00:02:27,920  -->  00:02:33,860
.....that's fine but
what if we want to group albums together
27

27

00:02:33,860  -->  00:02:39,080
so that all the albums by each artist
appear together well the order by clause
28

28

00:02:39,080  -->  00:02:42,530
can actually contain more than one
column so we can do something like
29

29

00:02:42,530  -->  00:02:52,490
....
30

30

00:02:53,120  -->  00:03:02,810
....and what that does it sorts
first by artist ID and then by album
31

31

00:03:02,810  -->  00:03:08,570
name so all the deep purple albums
artists 196 you can see a group of them
32

32

00:03:08,570  -->  00:03:14,120
here with the number 196 at the end of
the list of data they appear together near the
33

33

00:03:14,120  -->  00:03:18,290
end of the list you can see it also
starting with burn this one up here
34

34

00:03:18,290  -->  00:03:23,270
starting burn their and ending right
down here with who do we think we are
35

35

00:03:23,270  -->  00:03:26,370
remastered edition
36

36

00:03:26,370  -->  00:03:29,300
ok time for another mini challenge
37

37

00:03:29,300  -->  00:03:34,520
the challenges is to list all the songs so
that songs from the same album appear
38

38

00:03:34,520  -->  00:03:38,830
together in track order so that's the
challenge have a go at doing that by
39

39

00:03:38,830  -->  00:03:43,040
type in the sql code that
necessary to achieve that pause the
40

40

00:03:43,040  -->  00:03:46,720
video and when you're ready to see me
type it in start the video again so pause
41

41

00:03:46,720  -->  00:03:52,690
the video and I'll see you when you get
back alright so to achieve that what we
42

42

00:03:52,690  -->  00:03:56,630
need to do to list all the songs so that
song from the same album appear together
43

43

00:03:56,630  -->  00:04:08,360
in track order we type....
44

44

00:04:08,360  -->  00:04:10,910
....there you go
45

45

00:04:10,910  -->  00:04:15,530
so now the 11 songs from The Black Keys
albums attack and release appear together
46

46

00:04:15,530  -->  00:04:19,340
as you can see right at the end of the
list and you can check that you wanted
47

47

00:04:19,340  -->  00:04:27,590
to by typing.....
48

48

00:04:27,590  -->  00:04:35,330
.....and then we could do
something like....
49

49

00:04:35,330  -->  00:04:40,610
....
50

50

00:04:42,680  -->  00:04:47,000
....there you go you can see with a quick
scan up to the list shows that the records
51

51

00:04:47,000  -->  00:04:51,200
are grouped by album ID the last column
and in track order within an album the
52

52

00:04:51,200  -->  00:04:56,000
second column now having to run separate
queries like that is a bit grubby though
53

53

00:04:56,000  -->  00:05:00,620
let's see how to relate the tables
together so that we can get a list of
54

54

00:05:00,620  -->  00:05:04,900
songs that include the album the appear on
as well as the artist that produce them
55

55

00:05:06,010  -->  00:05:11,410
now to do this we need to use the SQL
join clause that used to join tables
56

56

00:05:11,410  -->  00:05:16,210
together now keeping data normalized
so the tables only contain information
57

57

00:05:16,210  -->  00:05:21,390
that relates to a single thing song
album or artist in our example is a
58

58

00:05:21,390  -->  00:05:26,380
fundamental part of relational databases
and by doing that and then joining the
59

59

00:05:26,380  -->  00:05:30,730
tables back together you get a great
deal of flexibility in how you can query
60

60

00:05:30,730  -->  00:05:35,610
and manipulate the data now remember
that the songs table contains a column
61

61

00:05:35,610  -->  00:05:41,080
holding the album ID and the album table
has an artist ID field and these are
62

62

00:05:41,080  -->  00:05:44,080
used to provide a link between the
tables
63

63

00:05:44,620  -->  00:05:48,520
don't worry about how those ids got into
the tables at this stage we just
64

64

00:05:48,520  -->  00:05:51,520
interested in using them to join the
tables at the moment
65

65

00:05:52,570  -->  00:05:57,310
so you can see here on screen how the
album column in the songs table provides
66

66

00:05:57,310  -->  00:06:02,710
a link to the album table the first 10
songs all belong to the album whose ID
67

67

00:06:02,710  -->  00:06:07,600
is one tales of the crown and the next
set of songs belong to the masquerade
68

68

00:06:07,600  -->  00:06:10,870
ball
69

69

00:06:10,870  -->  00:06:16,240
the artist column in the album's links
to the artist table so those first two
70

70

00:06:16,240  -->  00:06:21,310
albums are by axel rudi pell and the
album crimes of passion is by pat
71

71

00:06:21,310  -->  00:06:27,280
benatar and night flight is by band called
budgie alright so with that said let's
72

72

00:06:27,280  -->  00:06:32,410
actually join the tables in sql and
see how this is going to look so I'm
73

73

00:06:32,410  -->  00:06:36,790
going to do I'm actually just going to
do a . quit and then I'm just going to
74

74

00:06:36,790  -->  00:06:41,650
clear the screen and see notice how the
up arrow is working from here it's just in
75

75

00:06:41,650  -->  00:06:46,540
sql lite three for some reason it's
not working maybe it was weird characters but
76

76

00:06:46,540  -->  00:06:51,130
so I've gone back into the database again
and just so starting off with a clean
77

77

00:06:51,130  -->  00:06:56,320
slate so let's let's now use this select
statement and add a joint clause to link
78

78

00:06:56,320  -->  00:07:04,000
the songs and albums i'm going to do is
type....
79

79

00:07:04,000  -->  00:07:27,220
....
80

80

00:07:27,220  -->  00:07:32,040
....press enter their so the first thing to note
is that have specified which table the
81

81

00:07:32,040  -->  00:07:36,630
columns are in when selecting them and
probably what I should have done is explained that
82

82

00:07:36,630  -->  00:07:40,000
while that select statement was
on screen because of course now i can't
83

83

00:07:40,000  -->  00:07:43,000
bring back or can i I can scroll up
84

84

00:07:44,900  -->  00:07:50,660
so what I do is I just type it again and
again you shouldn't have this scenario
85

85

00:07:50,660  -->  00:07:54,740
should be able to do an up arrow and it
should work but for some reason my Mac
86

86

00:07:54,740  -->  00:08:06,440
is not doing what i wanted to do so
albums....
87

87

00:08:06,440  -->  00:08:13,600
....
88

88

00:08:13,600  -->  00:08:18,790
alright so leave that on before I press enter
this time getting back to that statement
89

89

00:08:18,790  -->  00:08:22,250
the first thing to note is that i've
specified which table the columns are in
90

90

00:08:22,250  -->  00:08:27,130
when selecting them so track and title are in the song table and you notice how
91

91

00:08:27,130  -->  00:08:32,740
I use songs . track and songs . title now
name comes from the album's table so
92

92

00:08:32,740  -->  00:08:37,300
specified that as albums . name if
there's no ambiguity you can actually
93

93

00:08:37,300  -->  00:08:41,740
leave off the table name so what I could
have done I will just press this to see the
94

94

00:08:41,740  -->  00:08:49,360
results again so i could have also
written this as select track title name from
95

95

00:08:49,360  -->  00:08:57,710
songs join album on
song.albums
96

96

00:08:57,710  -->  00:09:03,610
...so I could have done it that way if there's no ambiguity
97

97

00:09:03,610  -->  00:09:09,680
with the names but it is a
good habit to always specify the table
98

98

00:09:09,680  -->  00:09:14,600
name especially in code now living in
it off is a useful shortcut to save
99

99

00:09:14,600  -->  00:09:19,820
typing when working interactively like
this but i'd say always prefix the field
100

100

00:09:19,820  -->  00:09:24,650
with the table name in your code now
some albums have a sort of subtitle so
101

101

00:09:24,650  -->  00:09:28,580
if the table was modified to include a
title column then that query will no
102

102

00:09:28,580  -->  00:09:32,780
longer work because it would know which
table the title column should come from
103

103

00:09:32,780  -->  00:09:38,030
and note though that we can't leave the
table name off when using the ID column
104

104

00:09:38,030  -->  00:09:42,410
so we just went back hear the end of it
instead of putting albums.id if I
105

105

00:09:42,410  -->  00:09:48,230
just put _ID there and press
semicolon press enter we get error no
106

106

00:09:48,230  -->  00:09:53,150
such song and and sorry no such
column song . album now that was
107

107

00:09:53,150  -->  00:09:57,100
actually different message that was
because i accidentally type song their
108

108

00:09:57,100  -->  00:09:58,200
so just going but I shoudl
109

109

00:09:58,200  -->  00:10:02,280
be able to copy and paste i might do it that way it save a bit of time so
110

110

00:10:02,280  -->  00:10:07,440
the original request was songs should be
have been songs.album because of course songs is
111

111

00:10:07,440  -->  00:10:12,870
the name of the table was going to show
you as if I just type it like that without
112

112

00:10:12,870  -->  00:10:19,320
actually putting the albums . before the
ID and press enter now we get the error
113

113

00:10:19,320  -->  00:10:22,980
that i wanted to show you the first time
error ambiguous column name
114

114

00:10:22,980  -->  00:10:27,900
_ID and that's because both tables have
a column of that same name _ID
115

115

00:10:27,900  -->  00:10:30,600
and then sql lite doesn't know which
one you mean
116

116

00:10:30,600  -->  00:10:37,020
so you need to specify it there and just
going to copy that again paste it so i
117

117

00:10:37,020  -->  00:10:42,150
would go back and make that songs and
make that album I should say . _ID
118

118

00:10:42,150  -->  00:10:49,830
and get our data back there are different
types of joins the most common being an
119

119

00:10:49,830  -->  00:10:55,230
inner join and join as I have used here is
really a shorthand for inner join what
120

120

00:10:55,230  -->  00:10:58,230
I'll do is I'll retrieve the full
command that included the table names
121

121

00:10:58,230  -->  00:11:06,240
then used include the word inner so i'm
going to type....
122

122

00:11:06,240  -->  00:11:16,230
....
123

123

00:11:16,230  -->  00:11:27,000
....now
124

124

00:11:27,000  -->  00:11:30,510
keep in mind that not all database
systems will allow you to leave off the
125

125

00:11:30,510  -->  00:11:35,100
word inner so it's worth always using it
and i'll just run this to make sure it
126

126

00:11:35,100  -->  00:11:41,130
works now looking at the result of that
query we can see that the song just walk
127

127

00:11:41,130  -->  00:11:46,470
in my shoes is from the album super
lungs and permanent vacation is from an
128

128

00:11:46,470  -->  00:11:53,220
album of the same name and so on so just
paste this code back in again so again
129

129

00:11:53,220  -->  00:11:57,180
this select statement follows the same
pattern as we've been using up until now
130

130

00:11:57,180  -->  00:12:02,880
instead of select from songs we're doing
select from songs inner join albums
131

131

00:12:02,880  -->  00:12:07,140
we then have to tell sql lite which
columns are involved in the join which
132

132

00:12:07,140  -->  00:12:11,970
is what the on part does it says to
relate the rows and songs
133

133

00:12:11,970  -->  00:12:18,120
to those in albums where the songs
tables album column equals the album
134

134

00:12:18,120  -->  00:12:23,760
tables ID column and if you really want
to we can actually tact the order by
135

135

00:12:23,760  -->  00:12:28,110
clause on the end of that if we want to
sort the data so i could come to the end
136

136

00:12:28,110  -->  00:12:39,240
here and I could type.....
137

137

00:12:39,240  -->  00:12:46,980
.....that's actually
138

138

00:12:46,980  -->  00:12:50,880
returned a heck of a lot of results
as you can see there but it actually
139

139

00:12:50,880  -->  00:12:55,530
went through and do it really quickly if
I wanted to I could just scroll back up
140

140

00:12:55,530  -->  00:13:00,030
and have a look at some of the other
data that has been returned but you can see
141

141

00:13:00,030  -->  00:13:04,110
there's a lot of data and sql lite has
manipulated that and returned it very
142

142

00:13:04,110  -->  00:13:05,370
quickly
143

143

00:13:05,370  -->  00:13:09,210
alright so I'm going to finish the video
here now we'll continue on working with
144

144

00:13:09,210  -->  00:13:10,860
sql lite in the next video
