WEBVTT
1
1

00:00:04.930  -->  00:00:10.100
alright so continuing on with streams
now we wouldn't be able to use a map method
2

2

00:00:10.100  -->  00:00:14.080
with a method that expects 2 arguments i'm talking about the code on line
3

3

00:00:14.590  -->  00:00:20.240
30 because that method can be mapped to
a function now the map method wants a
4

4

00:00:20.240  -->  00:00:25.580
function not a by function and of course
we don't want to have to pass a method
5

5

00:00:25.580  -->  00:00:29.720
reference and we can also pass a
lambda that matches the function pattern
6

6

00:00:29.720  -->  00:00:34.970
accepts one argument returns one value in
this case it just happens to be a method
7

7

00:00:34.970  -->  00:00:39.550
in the string class that does what we
want to do obviously the method that we
8

8

00:00:39.550  -->  00:00:44.170
use has to work with the item types in
the stream now we couldn't use a string
9

9

00:00:44.170  -->  00:00:48.730
method if the items in the stream weren't strings for example so the map
10

10

00:00:48.730  -->  00:00:53.140
method ultimately returns a stream the
stream will contain all the uppercase
11

11

00:00:53.140  -->  00:00:57.940
bingo numbers in other words it will
contain all the results of calling the
12

12

00:00:57.940  -->  00:01:02.230
two upper case method on the input
stream now it's called map by the way
13

13

00:01:02.230  -->  00:01:07.330
because it's essentially mapping each
item in the input stream to the results
14

14

00:01:07.330  -->  00:01:12.350
returned by the function argument now
the resulting stream will have the same
15

15

00:01:12.350  -->  00:01:17.450
number of items as the source stream in
this case the source stream is the
16

16

00:01:17.450  -->  00:01:22.940
result of the some bingo number . stream
call now remember when we chained
17

17

00:01:22.940  -->  00:01:26.750
together functions and a function in the
chain would operate on the result from the
18

18

00:01:26.750  -->  00:01:28.280
last function in the chain
19

19

00:01:28.280  -->  00:01:33.740
essentially this is what's happening
here each stream operation operates on
20

20

00:01:33.740  -->  00:01:38.900
the stream result from the last step now
so far we've created a stream from our
21

21

00:01:38.900  -->  00:01:43.370
collection and passed it to the next
operation in the chain map in this case
22

22

00:01:43.370  -->  00:01:48.410
and now we have a stream containing
uppercase bingo numbers next thing we
23

23

00:01:48.410  -->  00:01:52.250
want to filter the stream so that we end
up with a string that contains only
24

24

00:01:52.250  -->  00:01:57.380
those numbers that start with g so we're
going to use the filter method that's
25

25

00:01:57.380  -->  00:02:00.380
the code on line 31 to accomplish this
26

26

00:02:00.380  -->  00:02:05.300
now the filter method wants a predicate
not a function so in this case we're
27

27

00:02:05.300  -->  00:02:10.130
passing a lambda expression that takes
one parameter and returns a true false
28

28

00:02:10.130  -->  00:02:15.140
value resulting stream will then contain
only those items for which the predicate
29

29

00:02:15.140  -->  00:02:18.500
return true so at the end of this
operation
30

30

00:02:18.500  -->  00:02:21.560
will have a stream that contains ultimately
the 5 g numbers
31

31

00:02:22.460  -->  00:02:26.690
alright so moving on in the next step we
sort the items by calling the sorted
32

32

00:02:26.690  -->  00:02:31.760
method so this method sorts based on the
natural ordering of the items in the
33

33

00:02:31.760  -->  00:02:35.930
stream now there's also a version of the
sorted method that accepts the
34

34

00:02:35.930  -->  00:02:40.250
comparator parameter but we don't need
to provide one in this case the natural
35

35

00:02:40.250  -->  00:02:44.480
ordering would suffice but again the
options is their if you choose to do that then
36

36

00:02:44.480  -->  00:02:50.090
finally on line 33 we're printing out the
results using the for each method but
37

37

00:02:50.090  -->  00:02:54.730
important note here this for each method
isn't the same one that we previously
38

38

00:02:54.730  -->  00:03:00.140
used with the iterable interface in this
case we're using the for each method
39

39

00:03:00.140  -->  00:03:05.060
from the stream class and in fact all
the steps have used methods from the
40

40

00:03:05.060  -->  00:03:08.870
stream class which if you think about it
should make sense and that's because the
41

41

00:03:08.870  -->  00:03:12.980
object type return from the stream
method is a stream and therefore from
42

42

00:03:12.980  -->  00:03:18.230
that point forward every method we call
operates on a stream namely the stream
43

43

00:03:18.230  -->  00:03:20.420
returned from the previous step
44

44

00:03:20.420  -->  00:03:25.040
so the stream for each method does what
the iterator one does essentially it
45

45

00:03:25.040  -->  00:03:30.170
accepts a consumer as a parameter and
evaluate the consumer for each item in
46

46

00:03:30.170  -->  00:03:34.400
the stream now since the system . out
dot print line method accepts an argument
47

47

00:03:34.400  -->  00:03:38.900
and doesn't return a value we can map
that to consumer that's what we're doing
48

48

00:03:38.900  -->  00:03:43.760
on line 33 we can then pass it to the for
each method and we've done so using a
49

49

00:03:43.760  -->  00:03:47.930
method references you can see so in
previous videos in this section we saw
50

50

00:03:47.930  -->  00:03:52.790
that the iterator . for each method
takes a consumer argument so you might
51

51

00:03:52.790  -->  00:03:56.180
be wondering could we have passed in a
method reference so it's not something
52

52

00:03:56.180  -->  00:04:01.370
like this like a code like this something
we worked on previously so...
53

53

00:04:01.370  -->  00:04:07.070
so my question could we have done
this system....
54

54

00:04:07.070  -->  00:04:09.760
.....could we have done something like
that
55

55

00:04:09.760  -->  00:04:14.570
absolutely we would have but we needed to
learn how lambda expressions map to the
56

56

00:04:14.570  -->  00:04:19.040
interfaces in the java.util.
function package before we started to
57

57

00:04:19.040  -->  00:04:22.570
use shortcuts which is why we did
something along these lines
58

58

00:04:25.920  -->  00:04:34.380
...which is sort of the longer version of what we
got on the previous line rather than
59

59

00:04:34.380  -->  00:04:37.170
doing what we can essentially do now that we have learned how to do it which is....
60

60

00:04:37.170  -->  00:04:47.310
.....and using a method
reference.....now since the for each
61

61

00:04:47.310  -->  00:04:51.300
method doesn't return a value the chain
has to end here because we're on the
62

62

00:04:51.300  -->  00:04:52.620
last line
63

63

00:04:52.620  -->  00:04:56.670
there's nothing to pass on to another
step at this point again because the for
64

64

00:04:56.670  -->  00:05:00.420
each method doesn't return a value so
basically there's nothing to
65

65

00:05:00.420  -->  00:05:05.670
pass on to another step now because of
that the for each method is called a terminal
66

66

00:05:05.670  -->  00:05:10.650
operation so a terminal operation
returns either void or non stream
67

67

00:05:10.650  -->  00:05:15.120
result now since every operation in
a chain requires a source stream
68

68

00:05:15.120  -->  00:05:20.160
ultimately the chain has to end when we
use a terminal operation now operations
69

69

00:05:20.160  -->  00:05:24.570
that return a stream are called intermediate
operations because they don't force the end
70

70

00:05:24.570  -->  00:05:25.620
of the chain
71

71

00:05:25.620  -->  00:05:32.070
alright so let's have a recap on what
our string chain does and look at the results
72

72

00:05:32.070  -->  00:05:37.200
of each step so firstly when the
chain is evaluated a stream pipeline is
73

73

00:05:37.200  -->  00:05:38.460
created
74

74

00:05:38.460  -->  00:05:42.390
now the stream pipeline consists of a
source zero or more intermediate
75

75

00:05:42.390  -->  00:05:47.850
operations and then a terminal operation
now in our example we use the collection
76

76

00:05:47.850  -->  00:05:52.200
as the source but we could also have been
or it could have been an array or an
77

77

00:05:52.200  -->  00:05:55.500
input output channel and we can build
streams from scratch
78

78

00:05:58.610  -->  00:06:03.310
the items in the source enter the
pipeline and the chain result emerges as
79

79

00:06:03.310  -->  00:06:08.030
the other end or at the other end of the
pipe now as we've seen elements may be
80

80

00:06:08.030  -->  00:06:11.330
removed from the stream as a result of
the operation
81

81

00:06:11.330  -->  00:06:15.250
so the set of elements that comes out at
the other end of the pipe doesn't have
82

82

00:06:15.250  -->  00:06:18.250
to match the number that entered the
pipe
83

83

00:06:20.120  -->  00:06:25.910
also notice that when we weren't using
streams our g64 number is printed with a
84

84

00:06:25.910  -->  00:06:31.970
lowercase g but when we use streams it
was printed with an uppercase G in the
85

85

00:06:31.970  -->  00:06:36.320
non stream case we didn't use the result
of the to uppercase call and that was
86

86

00:06:36.320  -->  00:06:40.040
the reason for that and when an item
passed the test we assign the original
87

87

00:06:40.040  -->  00:06:43.040
string with the lowercase g to the new list
88

88

00:06:45.740  -->  00:06:51.280
but in the stream case the map method
maps each source string to the function
89

89

00:06:51.280  -->  00:06:56.270
result so therefore the uppercase string
is added to the resulting stream and
90

90

00:06:56.270  -->  00:07:00.680
ultimately passed to the next step in
the chain so that's why the non stream
91

91

00:07:00.680  -->  00:07:05.500
case prints a lowercase g and the
stream case prints and uppercase G
92

92

00:07:05.500  -->  00:07:12.340
alright so let's have a look at what
else we can actually do with streams so
93

93

00:07:12.340  -->  00:07:16.630
rather than creating a stream based on a
collection we can create one from
94

94

00:07:16.630  -->  00:07:20.690
scratch so let's actually look at doing
that now we are going to be using a stream .
95

95

00:07:20.690  -->  00:07:25.610
of method to create a stream comprised
of some numbers from our bingo numbers
96

96

00:07:25.610  -->  00:07:30.050
list now we could do it by changing the
stream chain we've just discussed but i
97

97

00:07:30.050  -->  00:07:33.710
want to show you how to use the of
method instead let's look at doing that
98

98

00:07:33.710  -->  00:07:48.220
I'm gonna type...
99

99

00:07:48.220  -->  00:08:04.370
.....so that gives us a
100

100

00:08:04.370  -->  00:08:09.530
stream of string objects now we can
create streams composed of any type of
101

101

00:08:09.530  -->  00:08:14.240
object but we can't create a stream of
mixed types so for example we couldn't
102

102

00:08:14.240  -->  00:08:18.590
have a stream of string and
employee objects right so let's create
103

103

00:08:18.590  -->  00:08:29.330
another stream that contains the i and n
bingo numbers...
104

104

00:08:29.330  -->  00:08:32.480
....
105

105

00:08:32.480  -->  00:08:55.910
...
106

106

00:08:55.910  -->  00:09:04.280
....so let's now concatonate this streams together and we
107

107

00:09:04.280  -->  00:09:06.950
can use the concat method to actually
achieve that
108

108

00:09:06.950  -->  00:09:18.560
so we can type....
109

109

00:09:18.560  -->  00:09:27.830
.....note that the concat method
110

110

00:09:27.830  -->  00:09:29.060
is static
111

111

00:09:29.060  -->  00:09:33.230
so we can't use it in the chain but we
can use the result as the source for a
112

112

00:09:33.230  -->  00:09:37.400
chain so lets actually print out the
number of items in the concatenated
113

113

00:09:37.400  -->  00:09:42.770
stream we can do that with a print out system . out . print ln and we can do....
114

114

00:09:42.770  -->  00:09:50.360
.....now since count
returns a long value it's a terminal
115

115

00:09:50.360  -->  00:09:54.950
operation when we run we should see the  number 10 printed on the console
116

116

00:09:54.950  -->  00:10:01.640
which is the total count of both streams
you can see 10 showing alright so right now
117

117

00:10:01.640  -->  00:10:05.540
our stream contains duplicate numbers
but we can remove them using the
118

118

00:10:05.540  -->  00:10:09.770
distinct method which uses the equals
method to determine which objects are
119

119

00:10:09.770  -->  00:10:14.720
duplicates so in this case the stream
contains string objects so the methods
120

120

00:10:14.720  -->  00:10:18.680
going to use the string . equals
method for comparison purposes we're
121

121

00:10:18.680  -->  00:10:22.460
going to change the distinct and the count
operations together so that we are
122

122

00:10:22.460  -->  00:10:26.240
printing at the number of items that
remain after the duplicates are removed
123

123

00:10:26.240  -->  00:10:31.820
so going back in here to this concat stream . count i'm going to put .
124

124

00:10:31.820  -->  00:10:39.050
.....and if we run that we
125

125

00:10:39.050  -->  00:10:43.880
should get the number of unique elements
you can see we've got the result there
126

126

00:10:43.880  -->  00:10:44.690
of 6
127

127

00:10:44.690  -->  00:10:48.650
because it's removed the duplicates
essentially the four items have been
128

128

00:10:48.650  -->  00:10:53.870
removed in this case so question here
can we print out the items in a stream
129

129

00:10:53.870  -->  00:10:58.220
but without ending the chain so let's
just say that we're trying to debug a
130

130

00:10:58.220  -->  00:11:02.210
long chain we wanted to print the
results of each operation in the chain
131

131

00:11:02.210  -->  00:11:06.620
now we know that we can use the for each
method that's actually a terminal
132

132

00:11:06.620  -->  00:11:12.260
operation so instead we could use the
peak method which accepts a consumer
133

133

00:11:12.260  -->  00:11:17.330
argument now it evaluates the consumer
for each item in the source stream and
134

134

00:11:17.330  -->  00:11:22.250
then adds the item to a new stream which
then returns now since it returns a
135

135

00:11:22.250  -->  00:11:26.210
stream value it's an intermediate
operation in other words the chain
136

136

00:11:26.210  -->  00:11:31.010
doesn't have to end so let's try it so
right now we're printing at the number
137

137

00:11:31.010  -->  00:11:35.300
of distinct items so lets actually
print the items out before we call
138

138

00:11:35.300  -->  00:11:38.900
count so that we can verify that the
items in the stream are actually
139

139

00:11:38.900  -->  00:11:43.280
distinct we're going to print out also a
dividing line so that we can separate
140

140

00:11:43.280  -->  00:11:47.540
what's being printed from this chain
from any other output let's try that
141

141

00:11:48.110  -->  00:11:55.340
so here I'm going to just put.....
142

142

00:11:55.340  -->  00:11:58.640
....
143

143

00:11:58.640  -->  00:12:01.460
.....
144

144

00:12:01.460  -->  00:12:04.760
....
145

145

00:12:04.760  -->  00:12:15.500
...
146

146

00:12:15.500  -->  00:12:19.160
.....
147

147

00:12:19.160  -->  00:12:22.160
....
148

148

00:12:25.740  -->  00:12:29.970
....
149

149

00:12:29.970  -->  00:12:32.190
.....
150

150

00:12:32.190  -->  00:12:38.190
alright so let's actually try running
that you can see we've got the six
151

151

00:12:38.190  -->  00:12:43.170
distinct items in the stream that was
returned from distinct followed by the
152

152

00:12:43.170  -->  00:12:48.240
count now the documentation states for
the peak method it mainly exists to
153

153

00:12:48.240  -->  00:12:51.810
support debugging and that's obviously
what we're using it for here to be able to
154

154

00:12:51.810  -->  00:12:55.520
print that out as  we go through and show the
elements that actually remain after the
155

155

00:12:55.520  -->  00:13:00.480
distinct it was called alright I'm going
to finish the video here now in the next
156

156

00:13:00.480  -->  00:13:04.700
video will continue and will actually
look at the flat map method i'll see you
157

157

00:13:04.700  -->  00:13:05.330
in the next video
