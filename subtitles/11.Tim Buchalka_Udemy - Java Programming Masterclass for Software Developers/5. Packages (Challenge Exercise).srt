1
1

00:00:04,770  -->  00:00:08,030
So in this video we're going to actually
talk about the Package Challenge.
2

2

00:00:08,030  -->  00:00:12,470
So I've already actually pasted in
the challenge for you to actually do.
3

3

00:00:12,470  -->  00:00:16,820
And, going through it we need to
create a suitably named package
4

4

00:00:16,820  -->  00:00:18,950
containing a class called Series.
5

5

00:00:18,950  -->  00:00:22,430
And that class should have
the following static methods.
6

6

00:00:22,430  -->  00:00:26,070
First one's nSum, which is actually
going to end in parameter And
7

7

00:00:26,070  -->  00:00:29,490
that actually returns the sum
of all numbers from zero to n.
8

8

00:00:29,490  -->  00:00:32,100
So the first ten numbers to give you
9

9

00:00:32,100  -->  00:00:33,040
an idea of 0, 1, 3, 6, 10,
15, 21, 28, 36, 45 and 55.
10

10

00:00:33,040  -->  00:00:38,440
The second static method
is vectorial which
11

11

00:00:38,440  -->  00:00:43,480
also accepts an interject and
that should return the product
12

12

00:00:43,480  -->  00:00:46,890
of all numbers from one to n and
being the perimeter of course.
13

13

00:00:46,890  -->  00:00:49,570
So here one times two
times three times four.
14

14

00:00:49,570  -->  00:00:53,720
Brought up into intake one times in.
15

15

00:00:53,720  -->  00:00:58,510
As you can see on the screen there,
multiplied.
16

16

00:00:58,510  -->  00:01:01,790
So the first 10 factorials are 0, 1, 2, 6,
24, 120, 720, 540, and so on, and the last
17

17

00:01:01,790  -->  00:01:07,780
one fibanache, the fibnache static method
Return say the nth [INAUDIBLE] number.
18

18

00:01:07,780  -->  00:01:10,610
These are defined,
as you can see there with an algorithm.
19

19

00:01:10,610  -->  00:01:13,290
F0 equals 0, F1 equals 1.
20

20

00:01:13,290  -->  00:01:16,150
Then FN equals FN take
one plus FN take two.
21

21

00:01:16,150  -->  00:01:20,310
So there's actually the algorithm for
the [INAUDIBLE] in the screen there.
22

22

00:01:20,310  -->  00:01:22,970
And you can see in that case there,
F2 is also one.
23

23

00:01:22,970  -->  00:01:25,360
So the first ten [INAUDIBLE] numbers,
24

24

00:01:25,360  -->  00:01:27,600
zero, one, one Then it's 2, 3,
5, 8, 13, 21, 34, 55, and so on.
25

25

00:01:27,600  -->  00:01:31,890
So once you've actually
tested your functions,
26

26

00:01:31,890  -->  00:01:35,930
delete the main class and
actually produce a jar file.
27

27

00:01:35,930  -->  00:01:39,820
You want to create a new project and
add to series library, to that project,
28

28

00:01:39,820  -->  00:01:43,180
and then test the 3 methods in
the main method of your new project.
29

29

00:01:43,180  -->  00:01:46,990
And what you want to do is actually use
this code which I'm gonna paste in,
30

30

00:01:46,990  -->  00:01:49,290
when you actually test it.
31

31

00:01:49,290  -->  00:01:50,050
That'll be the code there.
32

32

00:01:50,050  -->  00:01:51,900
But that obviously won't
work at the moment,
33

33

00:01:51,900  -->  00:01:55,900
because I haven't actually created and
added the series library yet.
34

34

00:01:55,900  -->  00:01:59,500
But that would be how you actually
go about actually testing your code.
35

35

00:01:59,500  -->  00:02:01,770
And this, you can see, again,
they are static methods.
36

36

00:02:01,770  -->  00:02:02,730
So that's the challenge.
37

37

00:02:02,730  -->  00:02:06,640
So now it's your turn to actually
see if you can solve this challenge.
38

38

00:02:06,640  -->  00:02:10,730
Go away and actually create the series
class and the three static methods, and
39

39

00:02:10,730  -->  00:02:11,790
do some testing.
40

40

00:02:11,790  -->  00:02:14,750
Create a library and when you're
ready to actually come back and
41

41

00:02:14,750  -->  00:02:18,830
actually see the solution, start
the video again and I'll go through it.
42

42

00:02:18,830  -->  00:02:19,720
So pause the video now.
43

43

00:02:23,570  -->  00:02:26,860
Okay so
[INAUDIBLE] That you figure it out.
44

44

00:02:26,860  -->  00:02:28,180
So let's actually go through that.
45

45

00:02:28,180  -->  00:02:32,910
So, the first part was we needed to create
this package, or this class I should say
46

46

00:02:32,910  -->  00:02:38,760
called series, and with the three static
methods in some factorial, and Fibonacci.
47

47

00:02:38,760  -->  00:02:41,210
So what I'm going to do
is create a new package.
48

48

00:02:41,210  -->  00:02:42,500
I won't actually create it.
49

49

00:02:42,500  -->  00:02:48,030
I'm going to come up to my source,
and do right click it, new Java class,
50

50

00:02:48,030  -->  00:02:55,830
and I'm going to actually call this
[INAUDIBLE] Dot dot my library dot series.
51

51

00:02:55,830  -->  00:03:00,360
So the class name is series and
the package is come dot dot my library.
52

52

00:03:00,360  -->  00:03:05,050
Click on ok, and you can see we've
got the new package created and
53

53

00:03:05,050  -->  00:03:06,130
the class also created.
54

54

00:03:06,130  -->  00:03:09,590
So let's actually go back now
creating the three methods.
55

55

00:03:09,590  -->  00:03:12,730
So the first one we're gonna
start with is the end sum.
56

56

00:03:12,730  -->  00:03:15,850
And in sums a matter of it's
the easiest of the three.
57

57

00:03:15,850  -->  00:03:21,970
So it's public, static,
turning along, in sum, int.
58

58

00:03:21,970  -->  00:03:24,970
And returning a long because
it's basically gotta accommodate
59

59

00:03:24,970  -->  00:03:27,290
a larger number if we want to go higher.
60

60

00:03:27,290  -->  00:03:31,540
And the actual method, let me go back
to our current again, to our example.
61

61

00:03:31,540  -->  00:03:35,640
In some [INAUDIBLE] sum of all
numbers from zero to inter
62

62

00:03:35,640  -->  00:03:38,940
to whatever was actually
past in being the parameter.
63

63

00:03:38,940  -->  00:03:46,330
So to turn that all we need to do is
turn N mode applied by N plus one.
64

64

00:03:47,990  -->  00:03:50,380
divided by 2,
that should actually give us the answer.
65

65

00:03:50,380  -->  00:03:51,790
And we'll test that shortly.
66

66

00:03:51,790  -->  00:03:54,450
We'll actually write the 3 methods,
test them, and
67

67

00:03:54,450  -->  00:03:57,780
then we'll actually create
the actual library.
68

68

00:03:57,780  -->  00:04:02,620
So going back to our main, the second one
was the, Factorial, return the product of
69

69

00:04:02,620  -->  00:04:07,890
all numbers from one to n, I one time two
times three times four etc right up until
70

70

00:04:07,890  -->  00:04:12,000
intake one or modified by intake one times
n as you can see there on the screen and
71

71

00:04:12,000  -->  00:04:15,750
it gives you some examples
of the first ten factorials.
72

72

00:04:15,750  -->  00:04:18,670
So the code for
that still pretty straightforward.
73

73

00:04:20,210  -->  00:04:23,380
Public static.
74

74

00:04:23,380  -->  00:04:28,870
Long factorial int in,
cuz that's the parameter, of course.
75

75

00:04:28,870  -->  00:04:30,440
Now first, we need to do a test for zero.
76

76

00:04:30,440  -->  00:04:35,580
So if n is equal to zero,
we can actually just return zero,
77

77

00:04:35,580  -->  00:04:38,700
cuz obviously we can't calculate anymore.
78

78

00:04:38,700  -->  00:04:41,620
and just a quick video edit here I'm
79

79

00:04:41,620  -->  00:04:43,150
making a change after the original
80

80

00:04:43,150  -->  00:04:45,880
recording and I made a change because
81

81

00:04:45,880  -->  00:04:47,020
there's an error here
82

82

00:04:47,020  -->  00:04:50,170
and the issue here is a factorial at 0
83

83

00:04:50,170  -->  00:04:53,860
is actually 1 and not 0 and you can see
84

84

00:04:53,860  -->  00:04:56,320
that in the code here I'm returning 0
85

85

00:04:56,320  -->  00:04:58,480
which is wrong so the correct code you
86

86

00:04:58,480  -->  00:05:00,250
can see on the screen now should be
87

87

00:05:00,250  -->  00:05:03,100
returning 1 and not returning 0 so you
88

88

00:05:03,100  -->  00:05:04,360
might want to make the change to return
89

89

00:05:04,360  -->  00:05:06,610
1 in that scenario and the code will
90

90

00:05:06,610  -->  00:05:09,070
then work properly
91

91

00:05:09,070  -->  00:05:13,360
Otherwise, we're going to actually
start with the value one And
92

92

00:05:13,360  -->  00:05:16,740
then we're gonna do a full loop and
actually go through and multiple that.
93

93

00:05:16,740  -->  00:05:19,670
Add to that the multiplication
to each one.
94

94

00:05:19,670  -->  00:05:28,740
So to do that we're going
to do four int I equals 1.
95

95

00:05:28,740  -->  00:05:29,920
NR++.
96

96

00:05:29,920  -->  00:05:37,030
And then we just do fact
equals fact multiplied by I.
97

97

00:05:37,030  -->  00:05:42,000
And then, we return fact and save it.
98

98

00:05:42,000  -->  00:05:42,780
That's actually it.
99

99

00:05:42,780  -->  00:05:47,000
That's the factorial And the last one
we need to do now is the Fibonacci.
100

100

00:05:47,000  -->  00:05:51,580
We're just going back to our overview,
turns the [INAUDIBLE] Fibonacci number and
101

101

00:05:51,580  -->  00:05:54,930
you can see there
the [INAUDIBLE] calculator.
102

102

00:05:54,930  -->  00:06:00,410
So fn equals fn take one plus fn take
two [INAUDIBLE] F2 in this example
103

103

00:06:00,410  -->  00:06:04,030
is also one and we've got the example of
the first ten Fibonacci numbers then.
104

104

00:06:04,030  -->  00:06:09,890
So, lets go ahead and
do that Public static
105

105

00:06:09,890  -->  00:06:17,340
long Fibonacci(int n).
106

106

00:06:17,340  -->  00:06:22,760
So we start off doing a test for
zero, so if n is equal to zero.
107

107

00:06:24,130  -->  00:06:27,080
Just like the factorial,
we can actually return zero.
108

108

00:06:29,560  -->  00:06:30,450
Sorry return zero.
109

109

00:06:32,160  -->  00:06:35,680
But else, if it's one,
we can actually also return one.
110

110

00:06:38,090  -->  00:06:41,240
So basically if it's zero or one,
we're returning those hard coded numbers,
111

111

00:06:41,240  -->  00:06:41,790
zero or one.
112

112

00:06:41,790  -->  00:06:45,220
But if we get to here, we know that
the number has to be two or higher.
113

113

00:06:45,220  -->  00:06:49,800
So I'm going to put long and minus one.
114

114

00:06:49,800  -->  00:06:50,630
One equals one.
115

115

00:06:50,630  -->  00:06:58,460
Long n minus two equals zero so
116

116

00:06:58,460  -->  00:07:02,250
that's the initial values because we're
going to take the number minus one will be
117

117

00:07:02,250  -->  00:07:05,440
one because we are going to get a number
that is at least two or higher.
118

118

00:07:05,440  -->  00:07:06,000
In n minus two.
119

119

00:07:06,000  -->  00:07:07,630
It's going to start off zero.
120

120

00:07:07,630  -->  00:07:12,000
Because of course n being two,
n take two is going to be zero.
121

121

00:07:12,000  -->  00:07:14,740
So, basically we're initializing
that with the two values.
122

122

00:07:14,740  -->  00:07:15,780
Assuming the number was two.
123

123

00:07:15,780  -->  00:07:17,470
And then we run through our format.
124

124

00:07:17,470  -->  00:07:21,250
So, we put four INT, i equals one.
125

125

00:07:23,040  -->  00:07:26,230
i less than n, i plus plus.
126

126

00:07:29,490  -->  00:07:32,600
In the case I have this
fib equals m minus.
127

127

00:07:32,600  -->  00:07:36,860
And I need to create a variable long for
fib equals zero.
128

128

00:07:38,240  -->  00:07:43,440
Fib equals n minus two plus n minus one.
129

129

00:07:45,690  -->  00:07:50,810
And then we put mMinus2 = mMinus1
because we're incrementing the loop.
130

130

00:07:50,810  -->  00:07:56,170
Then mMinus1 = fib.
131

131

00:07:56,170  -->  00:08:01,340
So basically we're setting fib
initially to mMinus2 + mMinus1,
132

132

00:08:01,340  -->  00:08:04,870
then we're setting mMinus2 = mMinus1 And
you can see in the last line,
133

133

00:08:04,870  -->  00:08:07,560
nMinus1 then becomes
the current value of fib.
134

134

00:08:07,560  -->  00:08:08,390
And that's it.
135

135

00:08:08,390  -->  00:08:11,900
So we let the for loop go through and
complete, and then we return.
136

136

00:08:11,900  -->  00:08:12,860
Fib.
137

137

00:08:12,860  -->  00:08:14,820
So that should be our Fibonacci method.
138

138

00:08:14,820  -->  00:08:18,950
So now we've actually done that, it's time
to actually create the actual package.
139

139

00:08:18,950  -->  00:08:21,830
So what I'm actually gonna do now
is actually remove the main method.
140

140

00:08:21,830  -->  00:08:28,160
'Cuz we dont want that in our file,
our file, so delete that.
141

141

00:08:29,340  -->  00:08:30,840
So then you're left with series.
142

142

00:08:30,840  -->  00:08:33,110
And come up here now to file,
project structure.
143

143

00:08:35,050  -->  00:08:37,590
We're gonna choose artifacts,
we're gonna add.
144

144

00:08:37,590  -->  00:08:39,110
We'll click on plus.
145

145

00:08:39,110  -->  00:08:42,280
We're gonna select from
modules with dependencies.
146

146

00:08:42,280  -->  00:08:43,560
We're gonna just leave the default set.
147

147

00:08:43,560  -->  00:08:46,520
There's no main class, which is correct,
cuz we're gonna write the main class and
148

148

00:08:46,520  -->  00:08:47,630
do the testing.
149

149

00:08:47,630  -->  00:08:49,530
And the Java file's okay.
150

150

00:08:49,530  -->  00:08:52,660
Click on OK.
And you can see it gives us a default
151

151

00:08:52,660  -->  00:08:56,830
location,
JavaProgramsPackageChallenge_Java.
152

152

00:08:56,830  -->  00:08:59,360
And we're looking at this
shortly to get the Java file so
153

153

00:08:59,360  -->  00:09:02,630
we can actually include it in the new
project we're going to create.
154

154

00:09:02,630  -->  00:09:03,730
Click on OK to that.
155

155

00:09:03,730  -->  00:09:07,310
And that's actually created,
Then we can go up to Build,
156

156

00:09:07,310  -->  00:09:09,870
and Build Artifacts to make sure
that the jar file is built.
157

157

00:09:09,870  -->  00:09:11,340
We're gonna select Build.
158

158

00:09:11,340  -->  00:09:12,660
So that's now built.
159

159

00:09:12,660  -->  00:09:15,050
And we'll just go back and check that.
160

160

00:09:21,220  -->  00:09:24,980
So let's have a look
now Package challenge.
161

161

00:09:24,980  -->  00:09:25,540
Out.
162

162

00:09:25,540  -->  00:09:26,700
Artifacts.
163

163

00:09:26,700  -->  00:09:28,870
Package challenge I'm just going
jar on there is a Java file so
164

164

00:09:28,870  -->  00:09:30,430
that was built successfully.
165

165

00:09:30,430  -->  00:09:33,220
Now what we want to do is create a new
project that we're going to actually
166

166

00:09:33,220  -->  00:09:37,470
import this series class
are the package challenge Java file.
167

167

00:09:37,470  -->  00:09:38,400
Into that new project.
168

168

00:09:38,400  -->  00:09:43,640
So, I'm gonna back into here, File >
New > New Project, a new Java project.
169

169

00:09:47,400  -->  00:09:49,530
And we're gonna call this Series Test, but
170

170

00:09:49,530  -->  00:09:50,820
you can call it obviously
whatever you like.
171

171

00:09:50,820  -->  00:09:53,960
But Series Test, com.timbuchalka.
172

172

00:09:53,960  -->  00:09:59,070
So, what I'm going to do Is create
something completely different.
173

173

00:09:59,070  -->  00:10:05,950
[INAUDIBLE] let's actually try comm dot
example dot series dot test like so.
174

174

00:10:05,950  -->  00:10:07,390
It's a completely different base package.
175

175

00:10:07,390  -->  00:10:09,880
Click on okay and
we're going to use this one there so
176

176

00:10:09,880  -->  00:10:12,560
we can let the other one close since
we're finished with that project.
177

177

00:10:12,560  -->  00:10:13,910
So we know about this one.
178

178

00:10:13,910  -->  00:10:17,070
And the next one we want to do then is
we want to we've got our main method.
179

179

00:10:17,070  -->  00:10:19,270
Which we're going to
write our test code in.
180

180

00:10:19,270  -->  00:10:21,690
We want to actually go
to project structures.
181

181

00:10:21,690  -->  00:10:22,410
Lobberies.
182

182

00:10:24,230  -->  00:10:25,160
Lobberies.
183

183

00:10:25,160  -->  00:10:27,140
And we want to actually
add our artifact file.
184

184

00:10:27,140  -->  00:10:28,950
So I'm going to click on Java.
185

185

00:10:28,950  -->  00:10:31,040
And we'll go back to our challenge.
186

186

00:10:31,040  -->  00:10:31,970
Package challenge.
187

187

00:10:33,010  -->  00:10:35,050
Out folder, artifacts folder.
188

188

00:10:35,050  -->  00:10:36,870
Package challenge forward,
[INAUDIBLE] score,
189

189

00:10:36,870  -->  00:10:39,420
then there it is our package
challenge [INAUDIBLE] jar.
190

190

00:10:39,420  -->  00:10:41,530
[INAUDIBLE] On OK for that.
191

191

00:10:41,530  -->  00:10:45,390
And it's gonna be added to the series,
to the selected modules,
192

192

00:10:45,390  -->  00:10:48,410
that's click,
click on OK to that, that's fine.
193

193

00:10:48,410  -->  00:10:49,470
And click on OK.
194

194

00:10:49,470  -->  00:10:52,070
So now we've got that, we can go into
external libraries, and we can see we've
195

195

00:10:52,070  -->  00:10:55,160
got package challenge, and
you can see we've got our series class.
196

196

00:10:55,160  -->  00:10:57,000
That's obviously [INAUDIBLE] so
that's good.
197

197

00:10:57,000  -->  00:10:59,280
So now we should be able
to write some test code and
198

198

00:10:59,280  -->  00:11:04,520
if you remember I actually had
that test code from before.
199

199

00:11:04,520  -->  00:11:12,110
Let's actually check this out so
we're gonna go for(int i=0; i <=10; i++).
200

200

00:11:12,110  -->  00:11:14,080
Now let's try the in sum first.
201

201

00:11:14,080  -->  00:11:15,840
So that's gonna be System.out.
202

202

00:11:15,840  -->  00:11:17,690
And I'll put series.nsumi.
203

203

00:11:17,690  -->  00:11:23,260
[INAUDIBLE] actually found
our class automatically,
204

204

00:11:23,260  -->  00:11:26,060
and input to the imports
that we started using, and
205

205

00:11:26,060  -->  00:11:28,480
you can see now it's
a different input altogether.
206

206

00:11:28,480  -->  00:11:31,070
[INAUDIBLE] .mylibrary.series.
207

207

00:11:31,070  -->  00:11:31,700
So I'm gonna run that.
208

208

00:11:35,650  -->  00:11:39,710
And we've got the numbers, and at
the start of the video, I mentioned that,
209

209

00:11:39,710  -->  00:11:44,490
the numbers we're looking for, is, 0, 1,
3, 6, 10, 15, 21, 29, [INAUDIBLE], 45, 55.
210

210

00:11:44,490  -->  00:11:47,890
So that's working correctly which is good.
211

211

00:11:47,890  -->  00:11:49,820
The next one, factorial, let's do that.
212

212

00:11:51,250  -->  00:11:56,910
And before int i=0, i<=10, i++.
213

213

00:11:56,910  -->  00:12:05,800
And it'll print out
the Series.factorial for i.
214

214

00:12:05,800  -->  00:12:06,470
If you run that.
215

215

00:12:10,120  -->  00:12:15,000
And actually what I might do there is
just print out some asterisks there,
216

216

00:12:15,000  -->  00:12:20,360
just to indicate that this is
[INAUDIBLE] a separator between one
217

217

00:12:20,360  -->  00:12:23,950
method's output and the next.
218

218

00:12:23,950  -->  00:12:27,210
Obviously, what we're looking for was
012624 127, 25000, 40, 40320 and so on.
219

219

00:12:27,210  -->  00:12:32,810
So that's obviously working for
the factorial as well.
220

220

00:12:32,810  -->  00:12:38,440
That's good, so let's go and
do the last one now.
221

221

00:12:38,440  -->  00:12:44,390
The last one,
of course is going to be int I = 0.
222

222

00:12:44,390  -->  00:12:50,060
[INAUDIBLE] equal to 10 I plus plus,
and we're gonna
223

223

00:12:50,060  -->  00:12:55,230
print out series.fibonocci for I.
224

224

00:12:55,230  -->  00:12:59,100
The output we'll be wanting for Fibonacci
0, 1, 1, 2, 3,, 5, 8, 13, 21, 34, and
225

225

00:12:59,100  -->  00:13:01,340
55 so let's run that.
226

226

00:13:03,780  -->  00:13:06,110
And then we got 0, 1, 1, 2,
3, 5, 8, 13, 21, 34, 55.
227

227

00:13:06,110  -->  00:13:08,060
So that's actually it.
228

228

00:13:08,060  -->  00:13:11,760
So that's the actual solution.
229

229

00:13:11,760  -->  00:13:15,900
So you're now able to, if you followed
along, create your own Packages and
230

230

00:13:15,900  -->  00:13:17,270
use them in other Java projects.
231

231

00:13:17,270  -->  00:13:19,000
So, I hope you did well
with that challenge.
232

232

00:13:19,000  -->  00:13:22,200
It's now time to move on to
the next part of this section and
233

233

00:13:22,200  -->  00:13:24,890
that's all to do with scope and
visibility.
234

234

00:13:24,890  -->  00:13:26,140
So, I'll see you in the next video.
