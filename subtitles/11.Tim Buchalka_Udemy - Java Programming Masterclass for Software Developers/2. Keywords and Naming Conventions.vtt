WEBVTT
1
1

00:00:05.380  -->  00:00:07.480
<v Tim>So we talked briefly about Java keywords</v>
2

2

00:00:07.480  -->  00:00:09.250
in the previous section.
3

3

00:00:09.250  -->  00:00:11.380
And we saw some common keywords,
4

4

00:00:11.380  -->  00:00:13.410
as you can see showing in this new project file
5

5

00:00:13.410  -->  00:00:15.600
that I've created to in IntelliJ.
6

6

00:00:15.600  -->  00:00:18.526
And I've called it KeywordsAndExpressions.
7

7

00:00:18.526  -->  00:00:19.690
So you can see some keywords here
8

8

00:00:19.690  -->  00:00:23.260
public, static, void, class, and so on.
9

9

00:00:23.260  -->  00:00:26.570
Now notice how IntelliJ helpfully colours those keywords
10

10

00:00:26.570  -->  00:00:28.440
in a different colour to make it clear
11

11

00:00:28.440  -->  00:00:30.210
that they are indeed keywords.
12

12

00:00:30.210  -->  00:00:33.053
But to be clear, again, what are Java keywords?
13

13

00:00:34.910  -->  00:00:37.650
Well, a keyword is one of around 57 keywords
14

14

00:00:37.650  -->  00:00:40.180
in the Java language that have a specific meaning.
15

15

00:00:40.180  -->  00:00:42.660
Now I say around because from time to time
16

16

00:00:42.660  -->  00:00:46.620
new keywords are added to a new version of Java.
17

17

00:00:46.620  -->  00:00:49.380
You can't use a keyword as a variable name.
18

18

00:00:49.380  -->  00:00:52.380
And the same rule applies to methods, class names,
19

19

00:00:52.380  -->  00:00:54.330
or other identifiers in Java.
20

20

00:00:54.330  -->  00:00:55.470
In other words, you can't use them
21

21

00:00:55.470  -->  00:00:57.510
to name any of those things.
22

22

00:00:57.510  -->  00:00:59.420
And, as I mentioned a few times,
23

23

00:00:59.420  -->  00:01:01.380
we're gonna be discussing methods, class names
24

24

00:01:01.380  -->  00:01:04.610
and other identifiers later in the course.
25

25

00:01:04.610  -->  00:01:06.580
So keywords are reserved words,
26

26

00:01:06.580  -->  00:01:08.910
not to be used for any other purpose.
27

27

00:01:08.910  -->  00:01:11.730
And there's a list of Java keywords available
28

28

00:01:11.730  -->  00:01:13.940
at the link I'm showing on the screen there below.
29

29

00:01:13.940  -->  00:01:15.210
But let's swing back to our browser
30

30

00:01:15.210  -->  00:01:18.060
and go to that link and check out some of these keywords.
31

31

00:01:19.490  -->  00:01:22.455
All right, so scrolling down on this list over here,
32

32

00:01:22.455  -->  00:01:24.620
we can see a list of the various keywords.
33

33

00:01:24.620  -->  00:01:26.130
And if go down and have a look,
34

34

00:01:26.130  -->  00:01:28.030
we can see some of the keywords we've used before,
35

35

00:01:28.030  -->  00:01:32.403
we've got boolean, byte, we've seen class before.
36

36

00:01:34.680  -->  00:01:38.183
Here's float, the if, so on and so forth.
37

37

00:01:39.070  -->  00:01:40.730
Now there's a lot more and by the end of the course,
38

38

00:01:40.730  -->  00:01:41.840
you'll know what pretty well,
39

39

00:01:41.840  -->  00:01:44.230
all of these keywords are used for
40

40

00:01:44.230  -->  00:01:46.390
and more importantly, how to use them.
41

41

00:01:46.390  -->  00:01:48.440
All right, so let's get back to IntelliJ.
42

42

00:01:49.640  -->  00:01:52.560
So we've established that we can't use a Java keyword
43

43

00:01:52.560  -->  00:01:54.400
as a variable name.
44

44

00:01:54.400  -->  00:01:57.450
But let's try to do that anyway, just to see what happens.
45

45

00:01:57.450  -->  00:01:59.500
So I'm gonna come into this code,
46

46

00:01:59.500  -->  00:02:01.310
on line six I'm going to type double
47

47

00:02:02.650  -->  00:02:07.650
int equals 50.00d, semi-colon.
48

48

00:02:07.720  -->  00:02:08.560
Now ignoring the fact
49

49

00:02:08.560  -->  00:02:10.770
that trying to declare a variable called int
50

50

00:02:10.770  -->  00:02:13.290
as a double, being extremely confusing,
51

51

00:02:13.290  -->  00:02:14.700
you can see that we actually get flagged
52

52

00:02:14.700  -->  00:02:16.550
with an error when I try and do that.
53

53

00:02:18.120  -->  00:02:21.660
We've got identifier expected Unexpected token.
54

54

00:02:21.660  -->  00:02:26.070
So we can't use a Java keyword as a variable name there.
55

55

00:02:26.070  -->  00:02:27.820
But we can use a partial name.
56

56

00:02:27.820  -->  00:02:31.220
So I could change int to, say, int2.
57

57

00:02:31.220  -->  00:02:34.210
And that's perfectly acceptable as a name.
58

58

00:02:34.210  -->  00:02:35.990
So you've seen me use variable names
59

59

00:02:35.990  -->  00:02:38.810
like myInt earlier in the course.
60

60

00:02:38.810  -->  00:02:40.107
So I think right here is a good time
61

61

00:02:40.107  -->  00:02:43.083
to start discussing naming conventions.
62

62

00:02:44.130  -->  00:02:45.680
So what is a naming convention?
63

63

00:02:46.610  -->  00:02:48.030
Well think of a naming convention
64

64

00:02:48.030  -->  00:02:51.250
as generally a great scheme for naming things.
65

65

00:02:51.250  -->  00:02:53.350
If you follow a convention it means
66

66

00:02:53.350  -->  00:02:56.340
that you're using a consistent approach to naming things.
67

67

00:02:56.340  -->  00:02:58.340
And if other programmers did the same,
68

68

00:02:58.340  -->  00:03:00.660
it then makes the code easy to read
69

69

00:03:00.660  -->  00:03:03.410
because everyone is using a similar way to name things.
70

70

00:03:04.670  -->  00:03:06.880
So Java naming conventions.
71

71

00:03:06.880  -->  00:03:09.700
So Java is a flexible language and it does allow you
72

72

00:03:09.700  -->  00:03:11.670
to use a range of naming conventions,
73

73

00:03:11.670  -->  00:03:13.610
or in fact, no convention at all
74

74

00:03:13.610  -->  00:03:17.410
for your variables, methods, class names, and so on.
75

75

00:03:17.410  -->  00:03:20.680
However, not following a convention is a bad idea though.
76

76

00:03:20.680  -->  00:03:21.890
You should follow a convention
77

77

00:03:21.890  -->  00:03:23.920
and get into good habits from day one
78

78

00:03:23.920  -->  00:03:26.640
when learning Java or any language for that matter.
79

79

00:03:26.640  -->  00:03:28.490
But since we haven't really discussed methods
80

80

00:03:28.490  -->  00:03:30.810
and class names yet, let's just start here
81

81

00:03:30.810  -->  00:03:32.360
by discussing naming conventions
82

82

00:03:32.360  -->  00:03:34.403
for variables at this time in Java.
83

83

00:03:35.270  -->  00:03:38.514
So while you can use names like myInt or variable1,
84

84

00:03:38.514  -->  00:03:42.830
or even MYNUMBER6, in uppercase, they're not great names.
85

85

00:03:42.830  -->  00:03:44.810
Java does have naming conventions.
86

86

00:03:44.810  -->  00:03:47.170
And it's a good idea to adopt these conventions,
87

87

00:03:47.170  -->  00:03:49.510
since employers will assume you know them
88

88

00:03:49.510  -->  00:03:51.790
and will use them in practise.
89

89

00:03:51.790  -->  00:03:53.010
So I've got a video on YouTube
90

90

00:03:53.010  -->  00:03:55.370
which talks more about code conventions,
91

91

00:03:55.370  -->  00:03:57.870
so check out the YouTube link in the resources section
92

92

00:03:57.870  -->  00:03:59.770
for this video for a discussion
93

93

00:03:59.770  -->  00:04:01.530
on code conventions in general,
94

94

00:04:01.530  -->  00:04:03.130
which is useful for you to know.
95

95

00:04:04.498  -->  00:04:06.680
Right, so let's swing back to our browser,
96

96

00:04:06.680  -->  00:04:09.323
we're gonna do a search for Java code conventions.
97

97

00:04:16.090  -->  00:04:18.730
Now, there's lots of different conventions or companies
98

98

00:04:18.730  -->  00:04:20.650
that have put out their own conventions
99

99

00:04:20.650  -->  00:04:21.940
in various languages.
100

100

00:04:21.940  -->  00:04:23.930
I think a good one for you to look at,
101

101

00:04:23.930  -->  00:04:25.250
would be to use this one down here,
102

102

00:04:25.250  -->  00:04:28.673
this Google Java Style Guide, so let's click on that.
103

103

00:04:29.530  -->  00:04:31.870
I found this in general to be a pretty good guide,
104

104

00:04:31.870  -->  00:04:34.570
even if it's not the official Oracle resource.
105

105

00:04:34.570  -->  00:04:35.520
And what I suggest you do
106

106

00:04:35.520  -->  00:04:37.660
is bookmark this page and come back to it.
107

107

00:04:37.660  -->  00:04:40.490
And we will be coming back to it in future videos as well.
108

108

00:04:40.490  -->  00:04:41.690
And keep in mind that right now,
109

109

00:04:41.690  -->  00:04:43.620
a lot of it won't make sense
110

110

00:04:43.620  -->  00:04:45.990
because you haven't used a lot of the Java language.
111

111

00:04:45.990  -->  00:04:47.670
But as you progress through the course,
112

112

00:04:47.670  -->  00:04:50.670
more and more of what you're seeing here, will make sense.
113

113

00:04:50.670  -->  00:04:53.730
For now though, have a look under Naming to the right there.
114

114

00:04:53.730  -->  00:04:56.333
And let's click on rules common to all identifies.
115

115

00:04:57.750  -->  00:05:01.810
So identifies can only use ASCII letters and digits,
116

116

00:05:01.810  -->  00:05:05.630
and in small number of cases, noted below, underscores.
117

117

00:05:05.630  -->  00:05:07.420
So you've got package names there, class names,
118

118

00:05:07.420  -->  00:05:09.620
method names, local variable names,
119

119

00:05:09.620  -->  00:05:11.110
we're gonna ignore all of those for now.
120

120

00:05:11.110  -->  00:05:13.613
I wanna come down here where it says lowerCamelCase.
121

121

00:05:14.710  -->  00:05:16.520
In fact, what I can do is click any of those references
122

122

00:05:16.520  -->  00:05:18.863
to lowerCamelCase.
123

123

00:05:19.740  -->  00:05:22.030
So I'm not gonna go through and read section 5.3,
124

124

00:05:22.030  -->  00:05:23.280
you can do that at your leisure.
125

125

00:05:23.280  -->  00:05:26.350
But the ones that you really want to pay attention to
126

126

00:05:26.350  -->  00:05:28.880
is just the examples down the bottom of the screen there.
127

127

00:05:28.880  -->  00:05:31.440
I'd like move it up a bit so we can see it a bit better.
128

128

00:05:31.440  -->  00:05:33.670
So we've got, to the left-hand side,
129

129

00:05:33.670  -->  00:05:36.330
for example, new Customer ID in double quotes.
130

130

00:05:36.330  -->  00:05:38.060
Notice how the word new is in lowercase
131

131

00:05:38.060  -->  00:05:41.260
and then each word after that has got a capitalised letter.
132

132

00:05:41.260  -->  00:05:45.670
Likewise for inner stopwatch, supports IPv6 on iOS
133

133

00:05:45.670  -->  00:05:47.450
or YouTube importer.
134

134

00:05:47.450  -->  00:05:48.880
Now the YouTube importer example
135

135

00:05:48.880  -->  00:05:50.930
is actually got an uppercase first letter.
136

136

00:05:50.930  -->  00:05:53.140
So that's using uppercaseCamelCase,
137

137

00:05:53.140  -->  00:05:54.090
but other ones we're interested
138

138

00:05:54.090  -->  00:05:56.430
in at least three examples here, as you can see.
139

139

00:05:56.430  -->  00:05:57.700
So let's swing back to our slide
140

140

00:05:57.700  -->  00:05:59.250
and talk about this a bit more.
141

141

00:06:00.900  -->  00:06:03.590
So essentially you want to use proper LowerCamelCase
142

142

00:06:03.590  -->  00:06:05.930
when naming variables in Java.
143

143

00:06:05.930  -->  00:06:08.810
Ensure the variable name also gives an idea
144

144

00:06:08.810  -->  00:06:10.560
on the variables purpose,
145

145

00:06:10.560  -->  00:06:12.270
that's really quite important there.
146

146

00:06:12.270  -->  00:06:14.050
So let's look at some examples here.
147

147

00:06:14.050  -->  00:06:18.160
So a bad name example would be int myInt equal 50.
148

148

00:06:18.160  -->  00:06:20.750
Now this does follow the lowerCamelCase,
149

149

00:06:20.750  -->  00:06:23.170
which again is the first word is in lowercase,
150

150

00:06:23.170  -->  00:06:25.320
then each subsequent word is in lowercase
151

151

00:06:25.320  -->  00:06:27.690
other than the first letter, which is capitalised,
152

152

00:06:27.690  -->  00:06:29.000
so it does follow that.
153

153

00:06:29.000  -->  00:06:30.690
However, it doesn't signify
154

154

00:06:30.690  -->  00:06:32.620
what the variable is being used for.
155

155

00:06:32.620  -->  00:06:35.030
Now you might be clear on its intent right now,
156

156

00:06:35.030  -->  00:06:36.650
but imagine coming back to this code,
157

157

00:06:36.650  -->  00:06:38.480
looking at this in 12 months time,
158

158

00:06:38.480  -->  00:06:40.570
will you still remember what its purpose was?
159

159

00:06:40.570  -->  00:06:43.410
And worse would be if you're looking at someone else's code,
160

160

00:06:43.410  -->  00:06:45.490
that variable name really gives no clue
161

161

00:06:45.490  -->  00:06:49.090
as to the purpose of what that variable was being used for.
162

162

00:06:49.090  -->  00:06:49.940
So it makes it harder
163

163

00:06:49.940  -->  00:06:52.820
for you to get up to speed with the code.
164

164

00:06:52.820  -->  00:06:54.820
So contrast that bad example
165

165

00:06:54.820  -->  00:06:59.150
to a better naming example, int studentsAge equals 50.
166

166

00:06:59.150  -->  00:07:00.420
So note here we're still following
167

167

00:07:00.420  -->  00:07:03.980
lowerCamelCase convention, but now we can see at a glance
168

168

00:07:03.980  -->  00:07:06.950
that the variable is used to record the student's age.
169

169

00:07:06.950  -->  00:07:09.370
So make sure you do get into a habit of doing this,
170

170

00:07:09.370  -->  00:07:12.860
habits, good or bad, are formed when learning something new.
171

171

00:07:12.860  -->  00:07:15.920
So it's definitely worth the time to learn a good habit.
172

172

00:07:15.920  -->  00:07:18.460
So we'll talk more about code conventions
173

173

00:07:18.460  -->  00:07:20.750
for methods, classes, etc.,
174

174

00:07:20.750  -->  00:07:22.620
when we start to exploring them in more detail
175

175

00:07:22.620  -->  00:07:24.440
later in the course.
176

176

00:07:24.440  -->  00:07:25.970
So let's finish the video here.
177

177

00:07:25.970  -->  00:07:29.020
And in the next video, I've got a quick challenge for you.
178

178

00:07:29.020  -->  00:07:30.523
See you in the next video.
