1
1

00:00:04,940  -->  00:00:09,400
So in the previous video, we actually
got most of our challenge working.
2

2

00:00:09,400  -->  00:00:12,160
We got the ability to actually
go forward to the playlist,
3

3

00:00:12,160  -->  00:00:16,060
to the next song on the playlist that is,
and also to go back to the previous one.
4

4

00:00:16,060  -->  00:00:19,550
So let's now hopefully finish off
the rest of the challenge in this video.
5

5

00:00:19,550  -->  00:00:24,200
So what we need to do is, firstly we
didn't actually print a menu option.
6

6

00:00:24,200  -->  00:00:27,810
The actual correct options that
are available for the menu selection.
7

7

00:00:27,810  -->  00:00:30,510
So we'll do that first, so
we can see what the relevant options are.
8

8

00:00:30,510  -->  00:00:33,890
So I'm going to first put in here,
in the play method,
9

9

00:00:33,890  -->  00:00:37,240
once we have determined there
are some songs in the playList.
10

10

00:00:37,240  -->  00:00:39,150
We're going to actually print out a menu.
11

11

00:00:39,150  -->  00:00:42,180
So we're just gonna create
a print menu method.
12

12

00:00:42,180  -->  00:00:44,070
Call that print menu.
13

13

00:00:44,070  -->  00:00:44,690
Print that there for
14

14

00:00:44,690  -->  00:00:48,240
the first time and also going down the
list we've actually commented that out.
15

15

00:00:48,240  -->  00:00:52,740
So actually uncommented it there as
well and once you create that method and
16

16

00:00:52,740  -->  00:00:56,980
of course that method is only going
to literally print a menu, so
17

17

00:00:56,980  -->  00:00:59,910
private standing void print menu.
18

18

00:00:59,910  -->  00:01:05,810
No parameters, and
we'll just put available actions.
19

19

00:01:08,610  -->  00:01:12,970
Press and the option are going to be
are we talked about some of these,
20

20

00:01:12,970  -->  00:01:14,580
zero to quit.
21

21

00:01:14,580  -->  00:01:19,460
So it's actually to leave.
22

22

00:01:19,460  -->  00:01:26,250
And one is to play the next song which
we saw working in the previous video.
23

23

00:01:26,250  -->  00:01:29,270
And two of course of
to play previous song.
24

24

00:01:30,990  -->  00:01:32,800
Song.
25

25

00:01:32,800  -->  00:01:38,310
Option three is gonna be
to replay the current song.
26

26

00:01:41,380  -->  00:01:42,830
We haven't developed that method yet.
27

27

00:01:47,650  -->  00:01:48,350
Whoops.
28

28

00:01:48,350  -->  00:01:54,960
And option four,
is going to be to actually list the songs.
29

29

00:01:54,960  -->  00:01:57,910
4- List songs in the playlist.
30

30

00:02:01,050  -->  00:02:03,380
And option five is going to print this,
31

31

00:02:03,380  -->  00:02:07,000
this is essentially going to
be this menu option itself.
32

32

00:02:07,000  -->  00:02:13,080
So 5 print available actions like so.
33

33

00:02:16,260  -->  00:02:16,960
And that's gonna tree it.
34

34

00:02:16,960  -->  00:02:18,270
That's that method now.
35

35

00:02:18,270  -->  00:02:19,100
So let's fix that up.
36

36

00:02:19,100  -->  00:02:20,710
So, that's good.
37

37

00:02:20,710  -->  00:02:22,100
So again we've got it working so
38

38

00:02:22,100  -->  00:02:25,170
it's actually showing the next
song in the playlist.
39

39

00:02:25,170  -->  00:02:28,280
And also, well not only to go forward,
but also to go back as well.
40

40

00:02:28,280  -->  00:02:30,560
So the next thing we actually want
to implement is we wanna implement
41

41

00:02:30,560  -->  00:02:33,400
the ability to actually
show a list of songs.
42

42

00:02:33,400  -->  00:02:35,940
We're gonna actually print
the list of available songs.
43

43

00:02:35,940  -->  00:02:36,530
That's easy.
44

44

00:02:36,530  -->  00:02:37,260
Print list command.
45

45

00:02:37,260  -->  00:02:39,160
So we'll do that one first.
46

46

00:02:39,160  -->  00:02:41,360
That's menu selection four or case four.
47

47

00:02:41,360  -->  00:02:44,230
So the code for
that is going to be private.
48

48

00:02:45,770  -->  00:02:46,950
Static void.
49

49

00:02:46,950  -->  00:02:50,560
And it's print list of course.
50

50

00:02:50,560  -->  00:02:57,930
And the perimeter pass is going to
be linked list of song objects.
51

51

00:02:57,930  -->  00:02:59,000
And, we'll call that playList.
52

52

00:03:01,050  -->  00:03:02,690
So, firstly,
we need to create an iterator.
53

53

00:03:05,680  -->  00:03:11,600
Iterator = playList.iterator.
54

54

00:03:11,600  -->  00:03:13,880
And, because we're not going backwards and
forwards,
55

55

00:03:13,880  -->  00:03:15,780
we don't actually need
to use a list iterator.
56

56

00:03:15,780  -->  00:03:19,510
So, I'm just gonna show you how to use
a regular iterator, which works for
57

57

00:03:19,510  -->  00:03:21,840
lots of different types
of objects as well.
58

58

00:03:21,840  -->  00:03:22,860
That's very much the same,
59

59

00:03:22,860  -->  00:03:25,540
but it doesn't give you
the capability of going backwards.
60

60

00:03:25,540  -->  00:03:28,920
You really just need to continually go
through forward and it's perfect for
61

61

00:03:28,920  -->  00:03:32,090
sort of looping through something once,
which is what we're doing this case.
62

62

00:03:32,090  -->  00:03:36,860
So, let's then print out some equals signs
here just to make it clear in the output
63

63

00:03:36,860  -->  00:03:38,670
that this is the start of the output.
64

64

00:03:38,670  -->  00:03:41,630
And then we'll just put
while iterator.hasNext,
65

65

00:03:41,630  -->  00:03:45,010
so while there is another
song to be displayed, and
66

66

00:03:45,010  -->  00:03:49,340
we simply put System.out.println,
and it's going to be Iterator.next.
67

67

00:03:49,340  -->  00:03:53,640
Now note that I could have
also put .toString, but
68

68

00:03:53,640  -->  00:03:55,160
that is actually the default option.
69

69

00:03:55,160  -->  00:03:58,640
In the previous video, I actually
put .string, but that is optional.
70

70

00:03:58,640  -->  00:04:01,220
Sometimes it can be a good
idea to put that in, so
71

71

00:04:01,220  -->  00:04:03,790
it's clear in your code
what you're trying to do.
72

72

00:04:03,790  -->  00:04:07,340
But as you can see, it actually accepts
it and works quite nicely without it.
73

73

00:04:07,340  -->  00:04:09,340
The only thing we need to
do at the end of that,
74

74

00:04:09,340  -->  00:04:11,890
is actually just print out
another set of equal signs, so
75

75

00:04:11,890  -->  00:04:15,040
that we can clearly see that the list
is available and actually there.
76

76

00:04:15,040  -->  00:04:15,660
So that's good.
77

77

00:04:15,660  -->  00:04:17,850
So that's actually working nicely.
78

78

00:04:17,850  -->  00:04:22,020
Really the other main thing we need to
do now is, the last thing is case three.
79

79

00:04:22,020  -->  00:04:26,620
And that's actually in the situation where
we wanna actually play or replay the song.
80

80

00:04:26,620  -->  00:04:29,740
So what we can do is by being
able to replay the current song,
81

81

00:04:29,740  -->  00:04:33,210
we can take advantage of
the fact that the ListIterator is
82

82

00:04:33,210  -->  00:04:35,670
actually somewhere between
the previous and the next.
83

83

00:04:35,670  -->  00:04:37,260
So in other words,
it's somewhere in the middle.
84

84

00:04:37,260  -->  00:04:40,710
So one of those will give us
the track we last started playing and
85

85

00:04:40,710  -->  00:04:43,170
from there we can work
out which one to use.
86

86

00:04:43,170  -->  00:04:46,990
All we really need to know is which
direction we were moving in at the time.
87

87

00:04:46,990  -->  00:04:51,000
So for example if we're moving forward, we
just after the currently playing song, so
88

88

00:04:51,000  -->  00:04:53,270
we need to go back because
we're in a forward position.
89

89

00:04:53,270  -->  00:04:56,590
But if we're actually going backwards
we would be going to the previous one.
90

90

00:04:56,590  -->  00:04:59,250
Then we're just before the current song so
we need to go forward.
91

91

00:04:59,250  -->  00:05:01,220
So in both cases we've
changed the direction.
92

92

00:05:01,220  -->  00:05:04,600
So we need to set forward appropriately
so, if we're going forward and
93

93

00:05:04,600  -->  00:05:07,870
go back to play the same track again,
and then forward, vice versa.
94

94

00:05:07,870  -->  00:05:10,470
So it sounds a little bit confusing but
let's put the code in and
95

95

00:05:10,470  -->  00:05:13,490
hopefully we're looking for
code it'll actually make more sense.
96

96

00:05:13,490  -->  00:05:15,950
So the first thing we need to
do is determine the direction so
97

97

00:05:15,950  -->  00:05:19,730
we'll put an if forward, and
we'll do the code firstly for
98

98

00:05:19,730  -->  00:05:21,820
the situation where we
were moving forward.
99

99

00:05:21,820  -->  00:05:23,730
Then we need to check
if there's a previous.
100

100

00:05:23,730  -->  00:05:28,500
So listIterator.hasprevious.
101

101

00:05:28,500  -->  00:05:34,740
We can put a message now,
replaying + listIterator.previous and,
102

102

00:05:34,740  -->  00:05:37,190
we could put .toString
there if you wanted to.
103

103

00:05:37,190  -->  00:05:40,350
Remembering that, that is optional because
that's the default method, anyway.
104

104

00:05:40,350  -->  00:05:43,290
So, we could actually take that
out ourself, if we wanted to, but
105

105

00:05:43,290  -->  00:05:44,170
I'll put that in there for now.
106

106

00:05:45,520  -->  00:05:46,060
else.
107

107

00:05:47,990  -->  00:05:51,070
If it didn't have a previous entry,
we can just put we are.
108

108

00:05:52,470  -->  00:05:55,150
At the start of the list.
109

109

00:05:56,570  -->  00:05:59,050
Then so
at that point we need to do an else and
110

110

00:05:59,050  -->  00:06:00,920
an option to determine if
we're going backwards.
111

111

00:06:00,920  -->  00:06:05,650
So we put an else, here we put else,
so if we weren't going forward,
112

112

00:06:05,650  -->  00:06:08,210
we do our list interator.hasnext.
113

113

00:06:13,410  -->  00:06:17,370
And we're replaying plus
114

114

00:06:17,370  -->  00:06:22,430
listIterator.next.string.
115

115

00:06:22,430  -->  00:06:26,780
And what I didn't put there, I should
have actually made a topper there, but
116

116

00:06:26,780  -->  00:06:30,690
also we do also need to set the status,
cuz we're actually putting,
117

117

00:06:30,690  -->  00:06:34,840
we've done the check for previous, and
we've gone into a forward direction.
118

118

00:06:34,840  -->  00:06:38,110
We now need to set forward,
equal to false.
119

119

00:06:38,110  -->  00:06:40,480
So, we've checked to see if
there was a previous one,
120

120

00:06:40,480  -->  00:06:43,370
we've gone to the previous one, but
then we've set forward to false,
121

121

00:06:43,370  -->  00:06:46,430
because of course we're telling the
system, we're keeping track of the fact
122

122

00:06:46,430  -->  00:06:49,450
that we're now going back,
which we had to do to replay that song.
123

123

00:06:49,450  -->  00:06:52,000
So, contrasting that and
the other situation,
124

124

00:06:52,000  -->  00:06:55,310
where we were going backwards,
we need to actually set forward to true.
125

125

00:06:56,500  -->  00:06:58,320
Forward equals true,
126

126

00:06:58,320  -->  00:07:01,910
because we've had to go forward in order
to actually replay the song again.
127

127

00:07:01,910  -->  00:07:05,390
So, hopefully that actually makes sense,
and we just need an else here as well.
128

128

00:07:05,390  -->  00:07:11,790
The else is just going to say else
We have reached the end of the list.
129

129

00:07:14,990  -->  00:07:18,520
So that's essentially the code there and
that's again, so if we count when we
130

130

00:07:18,520  -->  00:07:22,260
are moving forward we then check to see
whether there is a previous record.
131

131

00:07:22,260  -->  00:07:25,270
If there is, we actually move
to the previous record and
132

132

00:07:25,270  -->  00:07:28,960
actually show the name of the actual
song as it currently is before moving.
133

133

00:07:28,960  -->  00:07:31,940
Else, we just put a message to say that
we're actually at the start of the list.
134

134

00:07:31,940  -->  00:07:35,640
And then the opposite applies in the case
where we actually weren't moving forward.
135

135

00:07:35,640  -->  00:07:38,590
We actually go to the next record,
replay it and set forward,
136

136

00:07:38,590  -->  00:07:40,540
the forward direction to forward,
no to true,
137

137

00:07:40,540  -->  00:07:42,970
it'll say which is,
means that we're actually going forward.
138

138

00:07:42,970  -->  00:07:47,230
At this point, all options are now working
and we have a fully operational playlist.
139

139

00:07:47,230  -->  00:07:49,850
So let's actually just
check that it does work.
140

140

00:07:49,850  -->  00:07:50,350
Gonna run that.
141

141

00:07:54,260  -->  00:07:57,760
Okay we'll make a bit of space here,
we probably need more space.
142

142

00:07:57,760  -->  00:08:03,120
So this is just option one, so top it in
the source code, we're going to here.
143

143

00:08:03,120  -->  00:08:05,770
One playing sort of in a previous video.
144

144

00:08:05,770  -->  00:08:06,610
That's working fine.
145

145

00:08:09,460  -->  00:08:14,010
See the list I can't go any further,
that's good, now let's go back, going just
146

146

00:08:14,010  -->  00:08:18,650
back to the front, to the first entry, so
forwards and backwards is working nicely.
147

147

00:08:19,750  -->  00:08:23,040
Let's actually replay the song
at the start of the list.
148

148

00:08:23,040  -->  00:08:24,720
We can't do anything because
we haven't played one so
149

149

00:08:24,720  -->  00:08:29,090
if we play a song, first one, and now if
we actually replay, we're replaying it.
150

150

00:08:30,420  -->  00:08:34,950
And if we go to the next record or the
next entry in the playlist I should say,
151

151

00:08:34,950  -->  00:08:35,860
and replay it.
152

152

00:08:35,860  -->  00:08:36,620
That's working.
153

153

00:08:36,620  -->  00:08:39,220
If you go back in the previous direction,
number three.
154

154

00:08:40,510  -->  00:08:41,750
That's also working as well.
155

155

00:08:41,750  -->  00:08:44,450
And we can go back again at
the start of the playlist and
156

156

00:08:44,450  -->  00:08:46,640
of course we'll get the fact that
we're at the start of the list.
157

157

00:08:46,640  -->  00:08:48,110
So that's all working correctly.
158

158

00:08:48,110  -->  00:08:50,610
And if we do option four
that should be our printout.
159

159

00:08:50,610  -->  00:08:52,160
That's a list of the songs
in the playlist.
160

160

00:08:52,160  -->  00:08:53,320
You could see that's working.
161

161

00:08:53,320  -->  00:08:55,450
That's all the entries that
were added to the playlist.
162

162

00:08:55,450  -->  00:08:57,510
And option five should be our menu option.
163

163

00:08:57,510  -->  00:09:00,570
Which of course just repeats
the available menu options.
164

164

00:09:00,570  -->  00:09:01,560
So that's now working fine.
165

165

00:09:01,560  -->  00:09:03,530
But there is actually another option.
166

166

00:09:03,530  -->  00:09:07,330
Remember that we also have a case we
talked about optionally in the challenge.
167

167

00:09:07,330  -->  00:09:09,860
And as this closes down,
we'll go back and look at that.
168

168

00:09:12,270  -->  00:09:15,460
As an optional extra, this is right
down the bottom here, provide an option
169

169

00:09:15,460  -->  00:09:20,320
to remove the current song from the
playlist, a hint was listIterator.remove.
170

170

00:09:20,320  -->  00:09:22,120
So we'll allocate for that.
171

171

00:09:23,640  -->  00:09:24,670
It'll be case six here.
172

172

00:09:26,520  -->  00:09:27,320
Case six.
173

173

00:09:28,630  -->  00:09:31,690
We can do something like playlist.size.
174

174

00:09:31,690  -->  00:09:34,810
That's greater than zero.
175

175

00:09:34,810  -->  00:09:38,800
The top list operator.remove.
176

176

00:09:38,800  -->  00:09:42,210
And we're doing the check to see whether
the playlist is greater than zero.
177

177

00:09:42,210  -->  00:09:46,830
Probably don't need that anyway because
up here, we actually did a test
178

178

00:09:46,830  -->  00:09:50,760
to see whether the play list was greater
than zero or if it was equal to zero.
179

179

00:09:50,760  -->  00:09:53,140
So you think at first glance
we would need to test again.
180

180

00:09:53,140  -->  00:09:57,470
But because we've now introduced
the capability of deleting entries,
181

181

00:09:57,470  -->  00:09:58,630
we do actually want to keep that.
182

182

00:09:58,630  -->  00:10:02,410
We do actually want to keep that
facility in there to be able to
183

183

00:10:02,410  -->  00:10:05,140
test each time to see whether there's
still some records in there because we
184

184

00:10:05,140  -->  00:10:06,880
could have actually
deleted all the records.
185

185

00:10:06,880  -->  00:10:10,030
If that's the case, we don't want it to
throw up with an error automatically but
186

186

00:10:10,030  -->  00:10:11,500
there's actually a potential
issue with this.
187

187

00:10:11,500  -->  00:10:13,220
Well firstly,
we'll just check that it does work.
188

188

00:10:16,080  -->  00:10:19,180
So if we actually try and delete one,
well firstly we'll need to go to a song.
189

189

00:10:19,180  -->  00:10:20,840
So we're now playing Holy Man.
190

190

00:10:20,840  -->  00:10:22,490
If we try and actually delete it.
191

191

00:10:22,490  -->  00:10:26,270
The option 6.
And we actually have a look at the songs.
192

192

00:10:26,270  -->  00:10:27,410
We could see it's actually there.
193

193

00:10:27,410  -->  00:10:28,390
It seems to have worked.
194

194

00:10:28,390  -->  00:10:31,210
It's actually removed that song,
correctly the current song we're playing.
195

195

00:10:31,210  -->  00:10:34,620
But if we do a 6 again,
we actually get an error.
196

196

00:10:34,620  -->  00:10:39,750
So, the actual issue here is to do
with the way that the ListIterator is
197

197

00:10:39,750  -->  00:10:40,610
actually set up.
198

198

00:10:40,610  -->  00:10:41,630
The link list.
199

199

00:10:41,630  -->  00:10:45,580
So it can only be made once
per call to next or previous.
200

200

00:10:45,580  -->  00:10:49,100
So it actually throws an exception
if neither the .next or
201

201

00:10:49,100  -->  00:10:51,550
the .previous has been called.
202

202

00:10:51,550  -->  00:10:54,970
So in other words, each time you delete
a record you then have to do a .next or
203

203

00:10:54,970  -->  00:10:58,120
a .previous to avoid getting
an error if you try and do it again.
204

204

00:10:58,120  -->  00:10:59,480
So we need to actually guard against that.
205

205

00:10:59,480  -->  00:11:02,940
And that's actually built into
the actual linked list code itself.
206

206

00:11:02,940  -->  00:11:05,290
And you notice I talked
about an exception.
207

207

00:11:05,290  -->  00:11:07,050
We haven't actually dealt
with exceptions yet, but
208

208

00:11:07,050  -->  00:11:09,550
that's actually a way to
actually trap an error.
209

209

00:11:09,550  -->  00:11:12,620
By default Java will give you an error
like you can see on the screen here legal
210

210

00:11:12,620  -->  00:11:13,690
state exception.
211

211

00:11:13,690  -->  00:11:16,990
We can actually trap those
using a try catch block and
212

212

00:11:16,990  -->  00:11:18,930
we'll be doing that later in the course.
213

213

00:11:18,930  -->  00:11:19,890
So for now what we want to do,
214

214

00:11:19,890  -->  00:11:23,400
is we want to just change our code
to avoid this, exception coming up.
215

215

00:11:23,400  -->  00:11:25,560
And generally speaking it's
a good idea to do that.
216

216

00:11:25,560  -->  00:11:27,200
If you can code something so
217

217

00:11:27,200  -->  00:11:29,980
that you're not actually getting
these exceptions, that's good.
218

218

00:11:29,980  -->  00:11:32,680
But later on if you do get exceptions,
you can guard against that.
219

219

00:11:32,680  -->  00:11:35,210
And we'll be doing that in
later parts of the course.
220

220

00:11:35,210  -->  00:11:36,970
Let's go back and actually fix this so
221

221

00:11:36,970  -->  00:11:39,960
we can delete remove records
without any ramifications.
222

222

00:11:39,960  -->  00:11:43,040
And firstly what I'll do is I'll
quickly add this to the list.
223

223

00:11:44,710  -->  00:11:52,980
The menu option for six,
which will be six delete.
224

224

00:11:52,980  -->  00:12:00,110
Current song from playlist, like so.
225

225

00:12:00,110  -->  00:12:01,740
Okay so
we can now see what that option is.
226

226

00:12:01,740  -->  00:12:03,300
So the actual code, so what we'll do is.
227

227

00:12:03,300  -->  00:12:04,900
There's actually two
ways we could handle it.
228

228

00:12:04,900  -->  00:12:07,060
The one would probably be to use
the exception which I talked about.
229

229

00:12:07,060  -->  00:12:08,090
So we could actually try and
230

230

00:12:08,090  -->  00:12:12,410
catch that error if it come through
in that code and perform some action.
231

231

00:12:12,410  -->  00:12:14,990
But because we haven't actually
talked about exceptions yet
232

232

00:12:14,990  -->  00:12:16,060
we're going to leave that.
233

233

00:12:16,060  -->  00:12:19,850
So what the other alternative is is at
this point is to ensure we call either
234

234

00:12:19,850  -->  00:12:23,710
next or previous immediately after
removing a song and that ensures that if
235

235

00:12:23,710  -->  00:12:27,410
you try to delete the next record we
don't actually get an error again.
236

236

00:12:27,410  -->  00:12:29,470
So it's actually not really
that difficult to do.
237

237

00:12:29,470  -->  00:12:33,050
What we really need to do here
is just after this remove
238

238

00:12:33,050  -->  00:12:37,930
we put if ListIterator.hasNext, so
if it's going to the next record.
239

239

00:12:41,250  -->  00:12:43,350
Now playing.
240

240

00:12:43,350  -->  00:12:45,940
ListIterator.next, so in other words and
241

241

00:12:45,940  -->  00:12:51,370
we're just automatically gonna move to
the next record if there is one available.
242

242

00:12:51,370  -->  00:12:56,360
We'll put else if
listIterator.hasPrevious,
243

243

00:12:56,360  -->  00:13:02,780
Now playing,
ListIterator.previous, like so.
244

244

00:13:02,780  -->  00:13:04,820
And obviously,
245

245

00:13:04,820  -->  00:13:07,740
you still need a break here as well
which I didn't actually have before.
246

246

00:13:07,740  -->  00:13:09,800
Okay, so at that point,
that should actually work.
247

247

00:13:09,800  -->  00:13:11,470
So what we're now doing
is we're actually doing,
248

248

00:13:11,470  -->  00:13:15,180
if there are still some entries
available in the playlist, so
249

249

00:13:15,180  -->  00:13:17,110
we're checking to see whether
the size is greater than zero.
250

250

00:13:17,110  -->  00:13:18,830
If there is,
we're going to remove the current one.
251

251

00:13:18,830  -->  00:13:22,750
But then what we're doing is that really
I'm ensuring that either there's a next
252

252

00:13:22,750  -->  00:13:27,640
available entry or there's a previous and
one of those will have to be true in order
253

253

00:13:27,640  -->  00:13:31,440
for this to have succeeded, playList.size,
because if that was equal to zero.
254

254

00:13:31,440  -->  00:13:34,040
We wouldn't have gotten into
AB executing this code anyway.
255

255

00:13:34,040  -->  00:13:37,200
So what we're doing is we're making sure
that one of these is actually executed,
256

256

00:13:37,200  -->  00:13:39,410
and that's going to avoid the error.
257

257

00:13:39,410  -->  00:13:41,940
In the future, because it means that
we actually move to the next record or
258

258

00:13:41,940  -->  00:13:43,170
the previous record,
259

259

00:13:43,170  -->  00:13:47,750
depending whether there's a song that's
actually available going forward or
260

260

00:13:47,750  -->  00:13:51,100
backwards, and that'll actually stop
that error from actually happening.
261

261

00:13:51,100  -->  00:13:54,300
And really I guess what we're saying we're
doing here is if we do actually delete
262

262

00:13:54,300  -->  00:13:57,400
a song from the playList, the next
song automatically starts playing.
263

263

00:13:57,400  -->  00:13:59,180
And that's really what
we're trying to say here.
264

264

00:13:59,180  -->  00:14:01,510
So it automatically by default
it'll go to the next song.
265

265

00:14:01,510  -->  00:14:03,780
But if we happen to be
at the end of the list,
266

266

00:14:03,780  -->  00:14:05,250
then it would go back
to the previous song.
267

267

00:14:05,250  -->  00:14:08,910
So it would just continue on in this case
playing and that's why it's automatic.
268

268

00:14:08,910  -->  00:14:10,560
So let's just run that and
make sure it works.
269

269

00:14:10,560  -->  00:14:11,460
And we should be done.
270

270

00:14:13,590  -->  00:14:16,860
So, again, we'll actually just
look at our list of songs, and so
271

271

00:14:16,860  -->  00:14:18,480
next, we'll actually go forward a song.
272

272

00:14:18,480  -->  00:14:19,990
Play next song.
273

273

00:14:19,990  -->  00:14:20,860
Playing Holy Man.
274

274

00:14:20,860  -->  00:14:23,680
So, we now do a delete.
275

275

00:14:23,680  -->  00:14:24,910
Now playing Soldier of Fortune.
276

276

00:14:24,910  -->  00:14:26,180
You'll notice that was deleted as well.
277

277

00:14:26,180  -->  00:14:27,700
We could delete that.
278

278

00:14:27,700  -->  00:14:30,210
We could delete that, and so on and
so forth, and we go back and
279

279

00:14:30,210  -->  00:14:32,570
have a look at the list of
entries that are there.
280

280

00:14:32,570  -->  00:14:33,550
We could go to the next one.
281

281

00:14:35,110  -->  00:14:37,090
Next, we're at the start of our list now.
282

282

00:14:37,090  -->  00:14:38,390
Sorry, that was previous I was selecting.
283

283

00:14:38,390  -->  00:14:39,550
And to go to the next one.
284

284

00:14:39,550  -->  00:14:44,180
Next, next, next, next, and
we reach the end of the playlist.
285

285

00:14:44,180  -->  00:14:45,680
And we do a delete there.
286

286

00:14:45,680  -->  00:14:46,370
Now playing let's go.
287

287

00:14:46,370  -->  00:14:47,020
It's actually.
288

288

00:14:47,020  -->  00:14:49,170
Automatically figured out,
even though we're at the end of the list.
289

289

00:14:49,170  -->  00:14:52,150
It went back, because it couldn't go
forward, and then deleted an entry.
290

290

00:14:52,150  -->  00:14:53,830
And we're not getting those
exception errors anymore.
291

291

00:14:53,830  -->  00:14:55,230
And again,
looking at the list that's remaining,
292

292

00:14:55,230  -->  00:14:57,030
we've only got two songs
left in our playlist.
293

293

00:14:57,030  -->  00:14:58,080
So that should be it.
294

294

00:14:58,080  -->  00:14:59,680
That should actually be the challenge now.
295

295

00:14:59,680  -->  00:15:01,190
We've actually finished everything.
296

296

00:15:01,190  -->  00:15:03,210
Okay.
So that's the end of this section.
297

297

00:15:03,210  -->  00:15:04,910
We've now looked at linked lists data,
298

298

00:15:04,910  -->  00:15:07,340
we went through the theory,
behind their implementation.
299

299

00:15:07,340  -->  00:15:10,030
And of course, we worked on
the java implementation of it.
300

300

00:15:10,030  -->  00:15:13,200
And then we actually created
the first the program.
301

301

00:15:13,200  -->  00:15:14,660
And obviously there's challenge as well.
302

302

00:15:14,660  -->  00:15:16,700
Hopefully you can get an idea
of what a linked list does.
303

303

00:15:16,700  -->  00:15:20,200
There's actually, linked lists is just one
example of many different data structures.
304

304

00:15:20,200  -->  00:15:23,170
I've got trees, queues,
hash tables and maps and many more.
305

305

00:15:23,170  -->  00:15:26,490
And we'll be dealing with some of
those as we go through the course.
306

306

00:15:26,490  -->  00:15:31,210
So just keep in mind that there's lots
of different ways to go about resolving
307

307

00:15:31,210  -->  00:15:34,740
common computer issues by
using a variety of tools that
308

308

00:15:34,740  -->  00:15:37,980
are actually built into the Java software
development kit which is pretty cool, and
309

309

00:15:37,980  -->  00:15:40,400
link lister is obviously just one of them.
310

310

00:15:40,400  -->  00:15:41,270
So, thanks for watching.
311

311

00:15:41,270  -->  00:15:43,980
And it's now time to move on to
the next section of the course.
