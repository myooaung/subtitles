1
1

00:00:05,010  -->  00:00:11,180
alright so moving on now let's actually
update the code to do our sorting to use
2

2

00:00:11,180  -->  00:00:15,270
a lambda expression i'm going to just
come down here and what I'm going to do
3

3

00:00:15,270  -->  00:00:21,450
is I'm actually just going to comment
that out for simplicity and also just
4

4

00:00:21,450  -->  00:00:24,720
so we got the other code to
compare it against so to do that we're
5

5

00:00:24,720  -->  00:00:29,310
going to do.....
6

6

00:00:29,310  -->  00:00:32,400
.....
7

7

00:00:32,400  -->  00:00:35,480
this is where it's going to get a bit
different so in brackets now we're going
8

8

00:00:35,480  -->  00:00:47,510
to put.....
9

9

00:00:47,510  -->  00:00:59,030
.....
10

10

00:00:59,030  -->  00:01:07,290
.....that's actually it
11

11

00:01:07,290  -->  00:01:12,720
so you can see this is a lot more
concise now the lambda is being passed
12

12

00:01:12,720  -->  00:01:18,690
as the second parameter instead of an
anonymous comparator and we split the
13

13

00:01:18,690  -->  00:01:23,700
lambda over 2 lines which we can do
and if we run it we should see we
14

14

00:01:23,700  -->  00:01:28,140
get the same results as we saw in
the previous video you can see we still
15

15

00:01:28,140  -->  00:01:32,250
got the same output and just to clear
things up a little bit I'm comment that out
16

16

00:01:32,250  -->  00:01:38,310
at the top and just run it again
and you can see we've got our results
17

17

00:01:38,310  -->  00:01:41,940
and clearly its sorting and working very
well
18

18

00:01:41,940  -->  00:01:47,130
alright so let's look at this lambda
expression that we've just added so the
19

19

00:01:47,130  -->  00:01:52,620
three parts that the lambda consists of
are firstly the argument list so in
20

20

00:01:52,620  -->  00:01:58,260
this case the argument list is these
here the two parameters employee
21

21

00:01:58,260  -->  00:02:03,540
employee one employee employee 2 the
second part of lambda is our arrow token again
22

22

00:02:03,540  -->  00:02:08,580
which is this one here and the third
part of course is the body which is the
23

23

00:02:08,580  -->  00:02:13,250
code on the next line which is
basically that code that I'm
24

24

00:02:13,250  -->  00:02:14,480
highlighting
25

25

00:02:14,480  -->  00:02:19,640
so how does this actually work well when
the sort method needs to compare two
26

26

00:02:19,640  -->  00:02:24,620
objects in the list instead of calling
the compare method of our comparator and
27

27

00:02:24,620  -->  00:02:29,180
passing it in the two objects it will
instead evaluate the lambda expression
28

28

00:02:29,180  -->  00:02:33,700
using the two objects it wants to
compare as the parameters to the lambda
29

29

00:02:33,700  -->  00:02:39,200
now one nice thing about lambdas is so
that it's easy to see what code will be
30

30

00:02:39,200  -->  00:02:44,840
run and this is especially true when
dealing with shorter methods when one or
31

31

00:02:44,840  -->  00:02:48,310
two lines of code are buried within an
anonymous class as we've seen previously
32

32

00:02:48,310  -->  00:02:53,000
that can actually be hard to see or
spot very quickly but the good news is
33

33

00:02:53,000  -->  00:02:57,370
we can actually even simplify this
lambda expression even further with the
34

34

00:02:57,370  -->  00:03:01,280
compiler can infer the parameter types and
we don't actually need to include the
35

35

00:03:01,280  -->  00:03:06,040
types in a lambda in our case the
compiler can infer from the first
36

36

00:03:06,040  -->  00:03:11,390
parameter employees that the objects to
be compared were both be of type employee
37

37

00:03:11,390  -->  00:03:15,230
and because of that we can actually
leave the types out and just rewrite it
38

38

00:03:15,230  -->  00:03:23,870
like this and come back here actually
delete the type and just wrote it to
39

39

00:03:23,870  -->  00:03:30,040
confirm that its still working and that's
still working as well now if there's
40

40

00:03:30,040  -->  00:03:33,730
only one parameter we don't actually
need the parentheses in the argument
41

41

00:03:33,730  -->  00:03:38,480
list so let's take a look at a common
use of lambdas now for this we're going
42

42

00:03:38,480  -->  00:03:43,130
to need a java FX application let's go
ahead and create a new project so i'm
43

43

00:03:43,130  -->  00:03:47,150
going to go to file new project as
we've done countless times i'm going to
44

44

00:03:47,150  -->  00:03:51,950
call this one select java fx first
will call this one button fx
45

45

00:03:51,950  -->  00:04:00,730
to keep it simple.....and what
we will do is will keep the lambda
46

46

00:04:00,730  -->  00:04:05,290
expressions project open and we're going
to come back to it so click on new
47

47

00:04:05,290  -->  00:04:10,480
window so that both projects are open
just make this a bit larger so we can
48

48

00:04:10,480  -->  00:04:13,430
see it better
49

49

00:04:13,430  -->  00:04:17,620
alright so first we want to add a button
to the grid pane so going to open up our
50

50

00:04:17,620  -->  00:04:22,700
source and and go to sample . fxml so
we're going to go and open to create a
51

51

00:04:22,700  -->  00:04:26,110
button or add a button....
52

52

00:04:26,110  -->  00:04:36,400
....
53

53

00:04:36,400  -->  00:04:50,110
.....
54

54

00:04:50,110  -->  00:04:59,770
....ok now we could add an action handler
55

55

00:04:59,770  -->  00:05:03,630
here in the fxml we've done that
before in the javafx section of this
56

56

00:05:03,630  -->  00:05:08,520
course and I accidentally deleted the
closing grid pane so I will fix that up....
57

57

00:05:08,520  -->  00:05:11,460
.....
58

58

00:05:11,460  -->  00:05:15,660
ok so we've seen how we add action
handlers here let's suppose we want to
59

59

00:05:15,660  -->  00:05:20,940
do the controller instead or in the fxml
file so we are gonna need FX ID which
60

60

00:05:20,940  -->  00:05:24,960
is why we're added that so we can access
that and actually assign the action
61

61

00:05:24,960  -->  00:05:28,590
handler in the initialize method back
in controller and let's go back and do that
62

62

00:05:28,590  -->  00:05:35,130
so what we're going to do first is well add
the version of the code that doesn't use
63

63

00:05:35,130  -->  00:05:42,330
a lambda and we need firstly a private
button......
64

64

00:05:42,330  -->  00:05:51,250
.....
65

65

00:05:51,250  -->  00:05:59,680
.....so let's do it
66

66

00:05:59,680  -->  00:06:05,860
the first way that doesn't use a lambda
expression to set an action so we'll do
67

67

00:06:05,860  -->  00:06:13,060
that with click me button.....
68

68

00:06:13,060  -->  00:06:21,660
....
69

69

00:06:21,660  -->  00:06:29,160
.....and using an
70

70

00:06:29,160  -->  00:06:32,400
anonymous class for the event handler like I did there is very common in ui
71

71

00:06:32,400  -->  00:06:37,240
programming especially actually in javas
old tool kit swing which didn't actually
72

72

00:06:37,240  -->  00:06:39,610
have anything like fxml
73

73

00:06:39,610  -->  00:06:45,630
everything actually had to be done using
code so when we run this application let's do
74

74

00:06:45,630  -->  00:06:51,180
that you should see that we got a button
on the screen and were able to click it and
75

75

00:06:51,180  -->  00:06:55,090
see the output on the console down the
bottom you can see the run window you can see click
76

76

00:06:55,090  -->  00:07:00,340
me so clearly that's working so we got our action handler added via code
77

77

00:07:00,340  -->  00:07:05,590
that's working nicely but now we
actually know about lambda expressions
78

78

00:07:05,590  -->  00:07:09,720
whenever we see an anonymous class
definition that only overrides one
79

79

00:07:09,720  -->  00:07:14,500
method we can consider using a lambda so lets
actually change the code to do that now
80

80

00:07:14,500  -->  00:07:19,770
we're going to do first is delete
the anonymous class parameter i'm going
81

81

00:07:19,770  -->  00:07:28,180
to just delete all that code and
set on action will actually be.....
82

82

00:07:28,180  -->  00:07:34,440
....
83

83

00:07:34,440  -->  00:07:41,830
....and again because i've
84

84

00:07:41,830  -->  00:07:45,660
created a new classes its defaulting to the
wrong language level i'm just going to
85

85

00:07:45,660  -->  00:07:46,590
change that
86

86

00:07:46,590  -->  00:07:52,960
clicking over here and change it back to
8 again the language level project
87

87

00:07:52,960  -->  00:08:05,940
lambdas click on ok alright so when we
run this now and we got the
88

88

00:08:05,940  -->  00:08:11,860
same result but this time using a lambda
and the point here is just closing out
89

89

00:08:11,860  -->  00:08:16,900
the run window when we only have one
parameter we don't have to put that one
90

90

00:08:16,900  -->  00:08:19,810
parameter inside parentheses and that's
why we just type that there without
91

91

00:08:19,810  -->  00:08:24,180
parentheses this time we only have to use
parentheses when their are no parameters
92

92

00:08:24,180  -->  00:08:28,270
or more than one parameter when we ran
the application you saw that it worked
93

93

00:08:28,270  -->  00:08:32,130
like I did before you've probably seen
enough now to know that we map a method
94

94

00:08:32,130  -->  00:08:34,930
to a lambda expression and as follows
95

95

00:08:34,930  -->  00:08:39,210
number one the method parameters become
the argument list number 2 the error
96

96

00:08:39,210  -->  00:08:40,770
token is always there
97

97

00:08:40,770  -->  00:08:44,280
number three the body of the method
becomes the body of the lambda
98

98

00:08:44,280  -->  00:08:49,510
expression but what about interfaces
with a single method that returns a
99

99

00:08:49,510  -->  00:08:50,500
value
100

100

00:08:50,500  -->  00:08:55,150
now we've only use one in the comparator
example but the sort method handled the
101

101

00:08:55,150  -->  00:08:56,380
return value
102

102

00:08:56,380  -->  00:08:58,870
let's take a closer look with a
different example i'm going to go back
103

103

00:08:58,870  -->  00:09:05,620
to the lambda expressions project we're
going to add a new interface to the main
104

104

00:09:05,620  -->  00:09:09,700
files let's go ahead and do that go down the
bottom here going to add interface
105

105

00:09:09,700  -->  00:09:24,970
....
106

106

00:09:25,600  -->  00:09:31,510
.....so this
interface contains a method that upper
107

107

00:09:31,510  -->  00:09:35,200
case two strings and then concatenates
them all joins them or pins the second one
108

108

00:09:35,200  -->  00:09:39,820
to the first one so now that we've
added the interface lets add a
109

109

00:09:39,820  -->  00:09:44,020
static method to the main class that
uses an up concat instance to create
110

110

00:09:44,020  -->  00:09:50,830
new string and come back up here just
below the last class there the end of
111

111

00:09:50,830  -->  00:10:01,570
the class and put....
112

112

00:10:01,570  -->  00:10:19,900
....
113

113

00:10:19,900  -->  00:10:26,020
....so the method accepts an
object that implements upper concat and
114

114

00:10:26,020  -->  00:10:29,920
the two strings that we want uppercase
and concatenated it calls the upper
115

115

00:10:29,920  -->  00:10:34,720
concat method in the upper concat
interface to do the work now inside the
116

116

00:10:34,720  -->  00:10:39,190
main method what we need to do is create
a new method we're going to pass an
117

117

00:10:39,190  -->  00:10:43,240
anonymous classes as the first parameter
and the first two employees in the list
118

118

00:10:43,240  -->  00:10:47,620
as the second or three parameters so lets
go and do that just up here just after
119

119

00:10:47,620  -->  00:10:55,600
the for loop it is going to be....
120

120

00:10:55,600  -->  00:11:18,850
....
121

121

00:11:18,850  -->  00:11:26,430
.....
122

122

00:11:26,430  -->  00:11:38,310
....
123

123

00:11:38,310  -->  00:11:51,510
.....
124

124

00:11:51,510  -->  00:12:00,750
.....so when we run this we can see
125

125

00:12:00,750  -->  00:12:06,120
we get jack hill John doe so hopefully this
point you might be thinking we're using
126

126

00:12:06,120  -->  00:12:10,380
an anonymous class that overrides the
only method in interface let's use a
127

127

00:12:10,380  -->  00:12:14,580
lambda expression instead now we still
have to define the interface we can't
128

128

00:12:14,580  -->  00:12:18,630
get away from doing that when using
lambdas but we can definitely simplify
129

129

00:12:18,630  -->  00:12:23,170
the rest of the code by passing a lambda
instead of an anonymous class and
130

130

00:12:23,170  -->  00:12:28,120
remembering the three parts to a lambda
parameters arrow taken and body so to
131

131

00:12:28,120  -->  00:12:32,550
start with lets define the lambda on a
separate line and assign it to a variable
132

132

00:12:32,550  -->  00:12:38,110
of type upper concat so we're going to just
comment out the code we just added so we
133

133

00:12:38,110  -->  00:12:48,510
still got it there to refer to so let's go ahead
and define so it's going to be....
134

134

00:12:48,510  -->  00:13:01,930
.....
135

135

00:13:01,930  -->  00:13:09,060
.....notice here that we haven't included the return
136

136

00:13:09,060  -->  00:13:12,930
keyword in fact if we try to add it
doing something like
137

137

00:13:14,620  -->  00:13:25,060
....we get a compile error when the lambda body consists of a
138

138

00:13:25,060  -->  00:13:30,040
single statement that evaluates to a
value return keyword is assumed and the
139

139

00:13:30,040  -->  00:13:34,770
return value is in third to be the type
of the evaluated value which in this
140

140

00:13:34,770  -->  00:13:39,460
case is string so going to undo those
changes but we can go one step further
141

141

00:13:39,460  -->  00:13:43,870
the compiler can infer the types of the
parameters so don't need to
142

142

00:13:43,870  -->  00:13:47,800
include those either so you can come
back here and delete those to make more
143

143

00:13:47,800  -->  00:13:53,680
concise and likewise for the second
string as well so you can see that now is
144

144

00:13:53,680  -->  00:13:58,210
fairly concise and now that we have a
lambda we can use it as the first
145

145

00:13:58,210  -->  00:14:05,170
parameter in our call to do string stuff
so we just type in that code again....
146

146

00:14:05,170  -->  00:14:12,220
....
147

147

00:14:12,220  -->  00:14:18,940
.....
148

148

00:14:18,940  -->  00:14:31,630
....
149

149

00:14:31,630  -->  00:14:38,740
...so if we run that that also works well as you
150

150

00:14:38,740  -->  00:14:41,320
can see we got our Jack Hill and John
Doe output again
151

151

00:14:41,320  -->  00:14:45,880
alright I'm going to finish the video
here now in the next video will continue
152

152

00:14:45,880  -->  00:14:49,630
on with our journey with lambda
expressions see you in the next video
