1
1

00:00:05,580  -->  00:00:07,040
- [Instructor] In the
video, we're gonna start
2

2

00:00:07,040  -->  00:00:08,980
learning about Java networking.
3

3

00:00:08,980  -->  00:00:11,690
Now, firstly we're gonna start
off with some terminology
4

4

00:00:11,690  -->  00:00:14,750
just to make sure that
you're on the same page.
5

5

00:00:14,750  -->  00:00:16,740
Now, a network is a system of computers
6

6

00:00:16,740  -->  00:00:19,840
connected together so that
they can share resources
7

7

00:00:19,840  -->  00:00:22,200
and communicate with each other.
8

8

00:00:22,200  -->  00:00:24,720
Now, networking refers to
how the connected computers
9

9

00:00:24,720  -->  00:00:26,370
communicate.
10

10

00:00:26,370  -->  00:00:29,130
Now, when using Java, the java.net package
11

11

00:00:29,130  -->  00:00:31,970
contains the classes you'll
generally want to use
12

12

00:00:31,970  -->  00:00:34,460
to establish connexions between computers,
13

13

00:00:34,460  -->  00:00:37,270
and then send messages
between those computers.
14

14

00:00:37,270  -->  00:00:39,790
Now, when writing networking code,
15

15

00:00:39,790  -->  00:00:42,000
you need to be familiar with threads
16

16

00:00:42,000  -->  00:00:44,460
and input/output streams,
and I've covered those
17

17

00:00:44,460  -->  00:00:46,440
in other sections of this course already.
18

18

00:00:46,440  -->  00:00:48,100
So if you haven't watched those sections,
19

19

00:00:48,100  -->  00:00:49,890
I suggest you do that before moving on
20

20

00:00:49,890  -->  00:00:52,540
with networking in this section.
21

21

00:00:52,540  -->  00:00:55,080
Now, these days networking
is usually discussed
22

22

00:00:55,080  -->  00:00:56,830
in the context of the Internet,
23

23

00:00:56,830  -->  00:00:58,990
but computers may also communicate
24

24

00:00:58,990  -->  00:01:02,090
across a private network,
also known as an intranet.
25

25

00:01:02,090  -->  00:01:04,290
In fact, that's where
networking actually began,
26

26

00:01:04,290  -->  00:01:06,800
and intranets are still
common today in business.
27

27

00:01:06,800  -->  00:01:09,880
For example, office computers
don't usually have a printer
28

28

00:01:09,880  -->  00:01:12,420
at their desks, they share a printer.
29

29

00:01:12,420  -->  00:01:14,560
When the print a file or document,
30

30

00:01:14,560  -->  00:01:16,840
the document is sent to the printer
31

31

00:01:16,840  -->  00:01:18,280
over the business's intranet.
32

32

00:01:18,280  -->  00:01:20,490
Now sometimes a single business
will have multiple intranets
33

33

00:01:20,490  -->  00:01:23,030
one for each department.
34

34

00:01:23,030  -->  00:01:25,380
Most software teams use version control,
35

35

00:01:25,380  -->  00:01:27,980
meaning that developers
have to check files
36

36

00:01:27,980  -->  00:01:30,790
into a central repository,
and other developers can
37

37

00:01:30,790  -->  00:01:33,160
then check out the files and work on them.
38

38

00:01:33,160  -->  00:01:35,990
Now, some teams use version
control applications
39

39

00:01:35,990  -->  00:01:38,810
available in the cloud, such as GitHub.
40

40

00:01:38,810  -->  00:01:40,820
But others use version
control that's in-house,
41

41

00:01:40,820  -->  00:01:43,380
running on the business's intranet.
42

42

00:01:43,380  -->  00:01:45,220
And as you'll see, you
can also use networking
43

43

00:01:45,220  -->  00:01:48,100
when you want applications
running on the same machine
44

44

00:01:48,100  -->  00:01:50,000
to communicate with each other.
45

45

00:01:50,000  -->  00:01:52,670
So networking can be
involved even when only one
46

46

00:01:52,670  -->  00:01:54,370
machine is involved.
47

47

00:01:54,370  -->  00:01:55,880
But, let's stop saying machine.
48

48

00:01:55,880  -->  00:01:57,440
When discussing networking,
49

49

00:01:57,440  -->  00:02:00,960
a machine is usually
referred to as a host.
50

50

00:02:00,960  -->  00:02:03,100
Now a common networking configuration
51

51

00:02:03,100  -->  00:02:06,030
that you've probably
heard of is client/server,
52

52

00:02:06,030  -->  00:02:08,640
meaning that one or more
hosts on the network
53

53

00:02:08,640  -->  00:02:11,960
are acting as servers, and
the other hosts are clients
54

54

00:02:11,960  -->  00:02:14,140
that connect to the server.
55

55

00:02:14,140  -->  00:02:17,000
Now, at a high level, that's
how the Internet operates.
56

56

00:02:17,000  -->  00:02:19,970
The browser is the client,
and when you type in
57

57

00:02:19,970  -->  00:02:22,460
a web address, it connects to the server
58

58

00:02:22,460  -->  00:02:25,920
that has the files for the
website at that address.
59

59

00:02:25,920  -->  00:02:27,890
Now, of course, that's overly simplified,
60

60

00:02:27,890  -->  00:02:31,320
but essentially, that's
how the internet works.
61

61

00:02:31,320  -->  00:02:33,580
Now, as I mentioned, you
can have a client/server
62

62

00:02:33,580  -->  00:02:35,550
interaction on the same host.
63

63

00:02:35,550  -->  00:02:38,250
For example, the MySQL
database comes with software
64

64

00:02:38,250  -->  00:02:40,000
called workbench that you can use
65

65

00:02:40,000  -->  00:02:42,220
to perform database operations.
66

66

00:02:42,220  -->  00:02:44,550
So the workbench is the client,
67

67

00:02:44,550  -->  00:02:47,020
and it connects to the
MySQL database server
68

68

00:02:47,020  -->  00:02:48,610
on that local host.
69

69

00:02:48,610  -->  00:02:50,420
And of course, it could
also connect remotely
70

70

00:02:50,420  -->  00:02:52,550
to another server if needed as well.
71

71

00:02:52,550  -->  00:02:55,130
Now, another example is
local web development.
72

72

00:02:55,130  -->  00:02:59,460
It's possible to run an
apache IIS web server
73

73

00:02:59,460  -->  00:03:01,370
on your computer, and connect to it
74

74

00:03:01,370  -->  00:03:03,260
using a browser on that same computer.
75

75

00:03:03,260  -->  00:03:05,830
And in fact, that's often
what web developers do
76

76

00:03:05,830  -->  00:03:07,950
when they're working on
a website for a client.
77

77

00:03:07,950  -->  00:03:11,690
So, computers on a network,
which includes the Internet,
78

78

00:03:11,690  -->  00:03:15,380
communicate with each other
using a transport protocol.
79

79

00:03:15,380  -->  00:03:18,770
Now, we'll use the TCP and UDP protocols
80

80

00:03:18,770  -->  00:03:21,550
moving forward in this section.
81

81

00:03:21,550  -->  00:03:24,780
Now generally a computer will
have one physical connexion
82

82

00:03:24,780  -->  00:03:27,160
to a network, and anything
sent to the computer
83

83

00:03:27,160  -->  00:03:28,890
from other hosts on the network
84

84

00:03:28,890  -->  00:03:30,840
will arrive through that connexion.
85

85

00:03:30,840  -->  00:03:33,520
But, sometimes the same
computer will be running
86

86

00:03:33,520  -->  00:03:36,350
multiple application that
want data from the network.
87

87

00:03:36,350  -->  00:03:39,500
For example, at any one time
you might have a browser open,
88

88

00:03:39,500  -->  00:03:43,230
a chat application open, and
you might be streaming music
89

89

00:03:43,230  -->  00:03:45,080
and so on and so forth.
90

90

00:03:45,080  -->  00:03:47,790
So when data arrives at
the one physical connexion
91

91

00:03:47,790  -->  00:03:49,430
to the network, how does it get routed
92

92

00:03:49,430  -->  00:03:51,630
to the target application?
93

93

00:03:51,630  -->  00:03:53,260
Well that's where ports come in.
94

94

00:03:53,260  -->  00:03:56,090
Each application that
needs data from the network
95

95

00:03:56,090  -->  00:03:58,600
is assigned a port, this includes clients
96

96

00:03:58,600  -->  00:04:01,290
connecting to a server
that's on the same machine.
97

97

00:04:01,290  -->  00:04:05,000
And when data arrives,
the port number is used
98

98

00:04:05,000  -->  00:04:07,480
to route the data for
the specific application
99

99

00:04:07,480  -->  00:04:09,790
that's waiting for it.
100

100

00:04:09,790  -->  00:04:11,810
So every host connected to the Internet
101

101

00:04:11,810  -->  00:04:14,300
has a unique IP address, including yours.
102

102

00:04:14,300  -->  00:04:17,070
Now to find our what your IP address is,
103

103

00:04:17,070  -->  00:04:19,150
you can run a command from
your operating system's
104

104

00:04:19,150  -->  00:04:22,360
command line, but it's
also often just as easy
105

105

00:04:22,360  -->  00:04:24,890
just to do a search for what is my IP.
106

106

00:04:24,890  -->  00:04:29,320
So if we do that,
(clicking)
107

107

00:04:29,320  -->  00:04:31,970
and do a search for what is my IP,
108

108

00:04:31,970  -->  00:04:34,730
now I'm gonna block my public IP address
109

109

00:04:34,730  -->  00:04:36,940
so you can't see it, but
that's a way to find out
110

110

00:04:36,940  -->  00:04:39,990
what the IP address is on your computer.
111

111

00:04:39,990  -->  00:04:41,280
And you can also do a similar search
112

112

00:04:41,280  -->  00:04:44,350
on Bing and other search engines.
113

113

00:04:44,350  -->  00:04:45,870
Now the four numbers that will come back
114

114

00:04:45,870  -->  00:04:50,460
are in the form X.X.X.X, or
you might also see a series
115

115

00:04:50,460  -->  00:04:53,560
of eight segments separated by colons.
116

116

00:04:53,560  -->  00:04:56,040
And that's because
there are IPv4 addresses
117

117

00:04:56,040  -->  00:04:57,620
and IPv6 addresses.
118

118

00:04:58,710  -->  00:05:02,420
Now, IPv4 stands for
Internet Protocol Version 4,
119

119

00:05:02,420  -->  00:05:06,420
and IPv6 stands for
Internet Protocol Version 6.
120

120

00:05:07,350  -->  00:05:10,740
So, once upon a time there
were only IPv4 addresses.
121

121

00:05:10,740  -->  00:05:13,940
Now, IPv4 uses a 32-bit address scheme
122

122

00:05:13,940  -->  00:05:18,490
that allows for over 4
billion unique addresses.
123

123

00:05:18,490  -->  00:05:20,270
But now that we've got computers, tablets,
124

124

00:05:20,270  -->  00:05:23,750
game consoles, smart TVs, smartphones,
125

125

00:05:23,750  -->  00:05:27,070
smart appliances, et cetera,
now that we've got those
126

126

00:05:27,070  -->  00:05:29,420
all connected to the Internet,
and each device has to
127

127

00:05:29,420  -->  00:05:31,030
have a unique IP address.
128

128

00:05:31,030  -->  00:05:33,220
As a result, 4 billion IP
addresses wasn't really enough,
129

129

00:05:33,220  -->  00:05:34,970
and so IPv6 was born.
130

130

00:05:36,820  -->  00:05:40,530
Now, it actually uses a
128-bit address scheme,
131

131

00:05:40,530  -->  00:05:43,530
which allows for many,
many more IP addresses
132

132

00:05:43,530  -->  00:05:45,500
than IPv4 does.
133

133

00:05:45,500  -->  00:05:48,720
Now, IPv4 addresses are
written as four integers
134

134

00:05:48,720  -->  00:05:51,370
separated by dots, and
I'm sure you've seen that
135

135

00:05:51,370  -->  00:05:52,740
probably before.
136

136

00:05:52,740  -->  00:05:55,310
And IPv6 addresses are
written in hexadecimal
137

137

00:05:55,310  -->  00:05:57,310
and separated by colons.
138

138

00:05:58,300  -->  00:06:00,070
Right now we're in a transition period,
139

139

00:06:00,070  -->  00:06:02,210
so when you ask for IP addresses,
140

140

00:06:02,210  -->  00:06:04,700
you may see the IPv4 address returned,
141

141

00:06:04,700  -->  00:06:08,060
or you may actually see the IPv6 address.
142

142

00:06:08,060  -->  00:06:10,820
And while we're here, IP
stands for Internet Protocol,
143

143

00:06:10,820  -->  00:06:14,430
you may have heard the term TCPIP.
144

144

00:06:14,430  -->  00:06:17,570
Now that refers to using the TCP protocol
145

145

00:06:17,570  -->  00:06:21,160
with IP addresses, and it
doesn't necessarily mean
146

146

00:06:21,160  -->  00:06:23,360
the host is connected to the Internet.
147

147

00:06:23,360  -->  00:06:25,140
Two applications running on the same host
148

148

00:06:25,140  -->  00:06:28,780
can use TCPIP to
communicate with each other.
149

149

00:06:28,780  -->  00:06:31,310
Now when the client are
server are on the same host,
150

150

00:06:31,310  -->  00:06:34,140
usually the IP address, 127.0.0.1,
151

151

00:06:35,520  -->  00:06:38,170
which is also referred to as local host,
152

152

00:06:38,170  -->  00:06:41,200
is used to identify the host.
153

153

00:06:41,200  -->  00:06:43,870
Alright, so with that brief
introduction to networking
154

154

00:06:43,870  -->  00:06:46,530
terms out of the way, let's
actually start our tour
155

155

00:06:46,530  -->  00:06:49,000
of the java.net package.
156

156

00:06:49,000  -->  00:06:51,740
So the package contains two sets of APIs.
157

157

00:06:51,740  -->  00:06:56,550
Firstly, the low level API,
and then the high level API.
158

158

00:06:56,550  -->  00:06:58,830
Now when using the low level API,
159

159

00:06:58,830  -->  00:07:01,400
you have to be more aware
of networking concepts.
160

160

00:07:01,400  -->  00:07:04,090
Still, when using Java
to do network coding,
161

161

00:07:04,090  -->  00:07:06,390
you're always working with abstractions
162

162

00:07:06,390  -->  00:07:08,470
regardless of whether
you're using the high
163

163

00:07:08,470  -->  00:07:09,890
or low level API.
164

164

00:07:10,910  -->  00:07:13,230
Java actually makes
network coding much easier
165

165

00:07:13,230  -->  00:07:15,630
than it could have been,
by letting developers write
166

166

00:07:15,630  -->  00:07:18,350
code using abstract
concepts, and taking care
167

167

00:07:18,350  -->  00:07:21,970
of the implementation
details under the hood.
168

168

00:07:21,970  -->  00:07:24,690
Now because it's so common,
we're go to use client/server
169

169

00:07:24,690  -->  00:07:27,160
examples in these networking
videos in this section.
170

170

00:07:27,160  -->  00:07:29,400
But you often want a reliable
two-way communication link
171

171

00:07:29,400  -->  00:07:32,690
between the client and the server.
172

172

00:07:32,690  -->  00:07:35,750
Now this is where the
TCP protocol comes in.
173

173

00:07:35,750  -->  00:07:40,010
Now TCP, which stands for
Transmission Control Protocol,
174

174

00:07:40,010  -->  00:07:43,540
establishes a two-way
connexion between hosts,
175

175

00:07:43,540  -->  00:07:45,720
and this connexion is reliable
176

176

00:07:45,720  -->  00:07:47,840
in the sense that the two
hosts talk to each other.
177

177

00:07:47,840  -->  00:07:49,330
When used with internet addresses,
178

178

00:07:49,330  -->  00:07:53,500
you get TCPIP, which uses
the client/server model.
179

179

00:07:55,100  -->  00:07:57,400
So, when communicating using TCPIP,
180

180

00:07:57,400  -->  00:07:59,650
the sequence of events are as follows,
181

181

00:07:59,650  -->  00:08:02,810
firstly, the client opens
a connexion to the server,
182

182

00:08:02,810  -->  00:08:06,410
secondly, the client sends
a request to the server,
183

183

00:08:06,410  -->  00:08:10,680
third, the server sends a
response back to the client,
184

184

00:08:10,680  -->  00:08:13,220
and step four, the client
closes the connexion
185

185

00:08:13,220  -->  00:08:14,480
to the server.
186

186

00:08:14,480  -->  00:08:16,290
Now, steps two and three may be repeated
187

187

00:08:16,290  -->  00:08:19,860
multiple times before
the connection's closed.
188

188

00:08:19,860  -->  00:08:22,160
Now, when using the low
level networking API,
189

189

00:08:22,160  -->  00:08:24,470
you'll use sockets to establish connexion,
190

190

00:08:24,470  -->  00:08:27,620
send requests, and receive responses.
191

191

00:08:27,620  -->  00:08:31,510
Now a socket is one end point
of the two-way connexion.
192

192

00:08:31,510  -->  00:08:32,980
The client will have a socket,
193

193

00:08:32,980  -->  00:08:34,840
and the server will have a socket.
194

194

00:08:34,840  -->  00:08:36,760
Now when you have multiple
clients connecting
195

195

00:08:36,760  -->  00:08:38,930
to the same server,
they'll use the same port,
196

196

00:08:38,930  -->  00:08:41,490
but each client will have its own socket.
197

197

00:08:41,490  -->  00:08:44,850
Now, you'll use the socket
class for the client socket,
198

198

00:08:44,850  -->  00:08:48,420
and the server socket class
for the server socket.
199

199

00:08:48,420  -->  00:08:50,010
Now what's wonderful about Java
200

200

00:08:50,010  -->  00:08:52,390
is that all you have to do
is provide the IP address
201

201

00:08:52,390  -->  00:08:54,640
and port when you create the socket.
202

202

00:08:54,640  -->  00:08:58,350
You don't have to
understand how TCPIP works.
203

203

00:08:58,350  -->  00:09:00,260
So underneath the
covers, specific messages
204

204

00:09:00,260  -->  00:09:02,510
have to be sent to establish a connexion
205

205

00:09:02,510  -->  00:09:04,000
between the client and a server,
206

206

00:09:04,000  -->  00:09:07,150
and this is a process
that's called handshaking.
207

207

00:09:07,150  -->  00:09:08,850
And the data has to be sent as packets,
208

208

00:09:08,850  -->  00:09:10,640
which must be in a specific format.
209

209

00:09:10,640  -->  00:09:13,640
But you don't have to take a
course in computer networking
210

210

00:09:13,640  -->  00:09:15,540
when you write network code using Java,
211

211

00:09:15,540  -->  00:09:17,590
and that's because it takes
care of all these details
212

212

00:09:17,590  -->  00:09:19,650
under the covers.
213

213

00:09:19,650  -->  00:09:21,260
Now since we're talking about networking,
214

214

00:09:21,260  -->  00:09:23,230
we're gonna have to write two applications
215

215

00:09:23,230  -->  00:09:25,200
to demonstrate how to
do networking coding.
216

216

00:09:25,200  -->  00:09:27,240
So once application will be the server,
217

217

00:09:27,240  -->  00:09:29,250
and the other will be the client.
218

218

00:09:29,250  -->  00:09:31,190
So in the next video, we're gonna start
219

219

00:09:31,190  -->  00:09:32,800
by writing a server application
220

220

00:09:32,800  -->  00:09:34,640
that just echoes back to the client,
221

221

00:09:34,640  -->  00:09:36,210
whatever text the client sends to it.
222

222

00:09:36,210  -->  00:09:38,980
So I'll see you in the next video.
