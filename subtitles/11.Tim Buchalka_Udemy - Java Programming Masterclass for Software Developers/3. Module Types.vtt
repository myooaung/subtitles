WEBVTT
1
00:00:04.660 --> 00:00:12.320
All right let's talk about the various Marchal tops in Project cheek's or so project so far.

2
00:00:12.360 --> 00:00:17.710
Two types of modules namely named mojos and unnamed modules.

3
00:00:17.910 --> 00:00:25.320
So I see a breakdown of each top so I can say that we've got named modules and nine modules now nine

4
00:00:25.320 --> 00:00:33.240
modules can be automatic or normal modules and still further we can break down normal modules which

5
00:00:33.240 --> 00:00:36.370
can be basic modules or modules.

6
00:00:36.630 --> 00:00:39.900
So let's discuss some named modules in more detail.

7
00:00:41.150 --> 00:00:45.740
All right so firstly if a named modules each night module has a nine.

8
00:00:46.000 --> 00:00:52.090
No nine modules can be normal or automatic you know nine modules A module is declared in the module

9
00:00:52.110 --> 00:00:56.010
Deitsch in Feydeau Java fall which is the module descriptor file.

10
00:00:56.290 --> 00:01:04.810
So that's actually a requirement for nine modules and old platform modules are named modules no noble

11
00:01:04.810 --> 00:01:13.030
modules don't officially exist in the in JDK 9 we just used the term normal for a named module that

12
00:01:13.120 --> 00:01:15.230
isn't an automatic module.

13
00:01:15.550 --> 00:01:18.860
And again a normal module has a module descriptor fault.

14
00:01:19.030 --> 00:01:24.720
In other words the module dash in Java fall while an automatic module doesn't have a module descriptor

15
00:01:24.770 --> 00:01:28.970
fall and a normal module is declared using the keyword module.

16
00:01:29.170 --> 00:01:32.860
A normal module doesn't export any of its packages by default.

17
00:01:32.860 --> 00:01:38.930
And finally a normal module is divided into basic and open modules or so.

18
00:01:38.950 --> 00:01:41.410
Contrast that to automatic modules.

19
00:01:41.640 --> 00:01:47.380
So an automatic module was created after reading a file to the module path.

20
00:01:47.380 --> 00:01:54.040
Now I'd like a nine much all an automatic module is not explicitly declared by the developer inside

21
00:01:54.040 --> 00:02:01.160
the module descriptor rather it's automatically created when a jar file is placed into the module lbf.

22
00:02:01.180 --> 00:02:09.010
Now it requires by default all platform modules all around modules and all other automatic modules and

23
00:02:09.010 --> 00:02:12.030
part of what it exports all its packages.

24
00:02:12.100 --> 00:02:14.860
Now these are useful for third party code.

25
00:02:14.890 --> 00:02:16.460
Are we talking more about that Lydda.

26
00:02:16.870 --> 00:02:22.390
And they're also used for migrating existing applications to Java 9 and you'll see that in practice

27
00:02:22.420 --> 00:02:25.240
in the next section in this course.

28
00:02:25.560 --> 00:02:29.300
Now basic modules to artificially exist in JDK 9.

29
00:02:29.320 --> 00:02:35.020
Ada we just use the term basic for a module that is not an open module.

30
00:02:35.020 --> 00:02:39.080
Now in other words these are not automatic and not open.

31
00:02:39.430 --> 00:02:46.630
So it's got the same characteristics as a normal module except that it's not an open module.

32
00:02:46.660 --> 00:02:48.610
So let's talk about open modules.

33
00:02:48.680 --> 00:02:51.960
You know many third party libraries like spring and harp tonight.

34
00:02:52.120 --> 00:02:57.350
He's refl. to access the internals of JDK of the irradicate run taught.

35
00:02:57.570 --> 00:03:03.760
Now they slobbers won't work unless we have an open module now and open much of to find using the open

36
00:03:03.760 --> 00:03:10.630
Keywood now and I pretty much will make all packages in sort of Mudgal accessible for deep reflection.

37
00:03:10.660 --> 00:03:16.930
Have a case where open can be used to declare an open module or to the class specific packages as open

38
00:03:17.770 --> 00:03:22.370
now you will get to see this in action later in the course of the Java ethics application.

39
00:03:22.390 --> 00:03:30.370
We kind to say how to open some packages so yet the ethics of Milada and the Application class write

40
00:03:30.490 --> 00:03:31.500
so much less.

41
00:03:31.510 --> 00:03:33.880
But we talked about earlier in this video.

42
00:03:34.090 --> 00:03:35.440
I don't have a name.

43
00:03:35.550 --> 00:03:41.610
And also we don't declare them now they export all their packages and it actually reads old machos in

44
00:03:41.610 --> 00:03:49.490
the JDK and on the Mudgal lbf now an unnamed module is a module made up of files from the classpath

45
00:03:49.980 --> 00:03:58.170
and all these files for the nind muchall and we do latter is discuss the difference between the Mudgal

46
00:03:58.170 --> 00:04:07.650
path and classpath and importantly a name module can't require an unnamed module or Let's talk now about

47
00:04:07.710 --> 00:04:09.320
aggregate modules.

48
00:04:09.360 --> 00:04:12.200
Now these exist for convenience.

49
00:04:12.420 --> 00:04:14.880
Now usually they have no code of their own.

50
00:04:14.970 --> 00:04:20.930
They just have a module descriptor and they collected export the contents of other modules.

51
00:04:20.940 --> 00:04:25.290
This is the reason why the ninth as an aggregator as an example here.

52
00:04:25.440 --> 00:04:32.550
When a few modules depend on that size three modules what we can do is create an aggregate module for

53
00:04:32.550 --> 00:04:33.950
those three modules.

54
00:04:34.140 --> 00:04:39.970
And that way and Macho's can depend on only a single module which would be that newly created aggregated

55
00:04:39.990 --> 00:04:46.290
model and then if you want to see an example of that in the JDK 9 is several aggregated modules.

56
00:04:46.410 --> 00:04:50.630
Take a look in Java don't say that module for starters.

57
00:04:51.270 --> 00:04:53.480
So much reporting classpath.

58
00:04:53.640 --> 00:05:01.920
JDK 9 introduced a module path module path can represent path to a sequence of folders that contain

59
00:05:01.920 --> 00:05:08.760
modules it can represent a path to a much older Jafa how it can represent a path to much follow which

60
00:05:08.760 --> 00:05:13.860
if you're unfamiliar is an extended version of a jar file and then we will discuss what follows later

61
00:05:13.860 --> 00:05:14.890
in the course.

62
00:05:15.110 --> 00:05:22.080
Now a module path is used by the compiler here to find and resolve modules every module from a module

63
00:05:22.080 --> 00:05:27.560
path needs to have a module declaration and I can use the module Desch in for Java.

64
00:05:27.930 --> 00:05:33.510
So contrasting that the muchall path to a class path the class path of course is represents a sequence

65
00:05:33.510 --> 00:05:35.280
of JAF files.

66
00:05:35.300 --> 00:05:39.320
All right so let's finish this video here and we'll continue our discussion in the next video.
