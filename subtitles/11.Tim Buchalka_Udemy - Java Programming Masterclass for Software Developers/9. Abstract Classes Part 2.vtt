WEBVTT
1
1

00:00:05.710  -->  00:00:09.600
Okay, so we're continuing on from
the previous video on abstraction,
2

2

00:00:09.600  -->  00:00:12.740
and we created various
examples of abstract classes.
3

3

00:00:12.740  -->  00:00:16.130
And it's now actually a good time
to bring up what is the difference
4

4

00:00:16.130  -->  00:00:17.990
between using an abstract class and
5

5

00:00:17.990  -->  00:00:21.830
an interface, and how do you actually
go about deciding which one to use.
6

6

00:00:21.830  -->  00:00:24.820
Once again as we've done in previous
videos, we need to consider
7

7

00:00:24.820  -->  00:00:29.090
the relationships, the relationships
is our, versus has our, or can.
8

8

00:00:29.090  -->  00:00:32.860
For example a dog is an animal,
and a bird is an animal.
9

9

00:00:32.860  -->  00:00:35.360
That makes sense to inherit
from an animal class,
10

10

00:00:35.360  -->  00:00:38.190
rather than implementing
an actual animal interface.
11

11

00:00:38.190  -->  00:00:42.220
A parrot is a bird, so
can you inherent from a bird based class?
12

12

00:00:42.220  -->  00:00:43.530
We've actually done that.
13

13

00:00:43.530  -->  00:00:45.810
There's a problem with
this example though.
14

14

00:00:45.810  -->  00:00:48.660
If you think about it, birds aren't
the only animals that can fly.
15

15

00:00:48.660  -->  00:00:51.780
Bats are extremely good at it, for
example, and even dragonflies are and
16

16

00:00:51.780  -->  00:00:53.140
that's just two examples.
17

17

00:00:53.140  -->  00:00:55.430
But a bat is not a bird though.
18

18

00:00:55.430  -->  00:00:58.950
To get around that we could rename
our bird class flying animals, and
19

19

00:00:58.950  -->  00:01:01.280
have bats and bird both inherit from that.
20

20

00:01:01.280  -->  00:01:04.600
But it should be easy to see the problems
that could potentially cause.
21

21

00:01:04.600  -->  00:01:07.490
Now, bats give birth to young
rather than laying eggs.
22

22

00:01:07.490  -->  00:01:10.480
This may lead to having flying
animals being inherited by
23

23

00:01:10.480  -->  00:01:12.310
classes called mammals and birds.
24

24

00:01:12.310  -->  00:01:13.970
But not all animals can fly, [LAUGH] and
25

25

00:01:13.970  -->  00:01:16.630
you can see we rapidly start
to run into difficulties.
26

26

00:01:16.630  -->  00:01:19.000
All because we actually got
it wrong at the base level.
27

27

00:01:19.000  -->  00:01:21.830
Where we actually went wrong here
was actually putting the fly
28

28

00:01:21.830  -->  00:01:23.160
method in the bird class.
29

29

00:01:23.160  -->  00:01:24.380
We come back here and have a look.
30

30

00:01:24.380  -->  00:01:27.960
It says we added an abstract
method of fly in the bird class.
31

31

00:01:27.960  -->  00:01:30.360
A bird can fly and a bat can fly.
32

32

00:01:30.360  -->  00:01:35.070
A better design would be to have created
a can fly interface, which both bats and
33

33

00:01:35.070  -->  00:01:36.690
birds can implement.
34

34

00:01:36.690  -->  00:01:38.990
Lets go ahead and actually do that now.
35

35

00:01:38.990  -->  00:01:40.870
Create a new class.
36

36

00:01:40.870  -->  00:01:44.350
It's actually interface, but
we specify that and select Interface.
37

37

00:01:45.390  -->  00:01:47.630
We're gonna call this can fly.
38

38

00:01:47.630  -->  00:01:48.990
[SOUND].
39

39

00:01:48.990  -->  00:01:49.570
That's our interface.
40

40

00:01:49.570  -->  00:01:54.290
And the interface is going to only
have one method [SOUND], void fly.
41

41

00:01:54.290  -->  00:01:59.310
Now just a quick note on
talking about interfaces.
42

42

00:01:59.310  -->  00:02:02.460
I know in the past I've sort of pushed
the fact that they should be called,
43

43

00:02:02.460  -->  00:02:04.950
the standard is to call them I can fly.
44

44

00:02:04.950  -->  00:02:08.900
But you will actually see examples
of that, certainly in Java code, but
45

45

00:02:08.900  -->  00:02:12.630
you see a lot of examples where they don't
actually have that same naming convention.
46

46

00:02:12.630  -->  00:02:16.380
And one might think of an interface,
is to name it what it is.
47

47

00:02:16.380  -->  00:02:19.130
So in other words in this case
it's the can fly interface,
48

48

00:02:19.130  -->  00:02:22.130
is not the i can fly interface,
if that makes sense.
49

49

00:02:22.130  -->  00:02:25.510
One of the reasons that programmers in
the past prefixed things with an i for
50

50

00:02:25.510  -->  00:02:28.310
an interface, for example,
was for easy identification.
51

51

00:02:28.310  -->  00:02:31.800
But these days, with IntelliJ you
can see there it's clearly shown in
52

52

00:02:31.800  -->  00:02:34.550
green to the left hand side
there that it's an interface.
53

53

00:02:34.550  -->  00:02:36.520
You don't really have to guess that.
54

54

00:02:36.520  -->  00:02:37.120
For that reason,
55

55

00:02:37.120  -->  00:02:40.370
it's probably better that's a rule,
to not actually put the i there.
56

56

00:02:40.370  -->  00:02:44.510
Because in many cases, it's just adding
extra sort of fluff to your code.
57

57

00:02:44.510  -->  00:02:46.460
It's not adding anything productive and
58

58

00:02:46.460  -->  00:02:48.880
it could potentially be
making code harder to read.
59

59

00:02:48.880  -->  00:02:52.500
Probably go against what I said before and
don't use i in
60

60

00:02:52.500  -->  00:02:55.090
front of interfaces unless you've got
a really good reason for doing it.
61

61

00:02:55.090  -->  00:02:57.890
Okay so
created that interface now called can fly.
62

62

00:02:57.890  -->  00:03:00.800
I would guess you go back
to our bird abstract class.
63

63

00:03:00.800  -->  00:03:01.920
Extending animals still.
64

64

00:03:01.920  -->  00:03:02.760
That stays the same.
65

65

00:03:02.760  -->  00:03:07.600
But we now implements [SOUND], can fly.
66

66

00:03:07.600  -->  00:03:08.860
Like so.
67

67

00:03:08.860  -->  00:03:12.120
And what we do is we get rid of
the abstract method for fly.
68

68

00:03:12.120  -->  00:03:13.640
[SOUND].
69

69

00:03:13.640  -->  00:03:16.680
And instead we actually override that or
we actually implement that.
70

70

00:03:16.680  -->  00:03:18.250
[SOUND].
71

71

00:03:18.250  -->  00:03:19.940
From the can fly interface like so.
72

72

00:03:19.940  -->  00:03:27.640
And we would implement it, we put
get name plus is flapping its wings.
73

73

00:03:27.640  -->  00:03:29.180
[SOUND].
74

74

00:03:29.180  -->  00:03:31.810
Getting back to our parrot class,
we go back there again,
75

75

00:03:31.810  -->  00:03:35.140
we can actually delete this method now,
flitting from branch to branch,
76

76

00:03:35.140  -->  00:03:38.110
because it's now gonna be
inherited from bird automatically.
77

77

00:03:38.110  -->  00:03:39.820
[SOUND].
78

78

00:03:39.820  -->  00:03:43.850
And also then looking at penguin, it
actually makes sense to override that and
79

79

00:03:43.850  -->  00:03:45.490
leave that overridden.
80

80

00:03:45.490  -->  00:03:49.150
And the reason for that is we wanna
implement some specific functionality for
81

81

00:03:49.150  -->  00:03:50.220
the penguin class.
82

82

00:03:50.220  -->  00:03:54.200
Now if we wanted to [SOUND], we could
also call the super dot fly as well.
83

83

00:03:54.200  -->  00:03:56.660
And we go back to our main class and
run this.
84

84

00:04:00.790  -->  00:04:04.490
You can see the emperor is flapping its
wings, I'm not very good at that kind of
85

85

00:04:04.490  -->  00:04:08.360
reference instead, and the argument for
actually leaving the super dot fly in for
86

86

00:04:08.360  -->  00:04:11.830
the penguin is that the penguin has
actually got those little wings that it
87

87

00:04:11.830  -->  00:04:14.230
can flap, but
obviously it can't actually fly.
88

88

00:04:14.230  -->  00:04:17.010
It doesn't get very far, so
we can have a bat class, and
89

89

00:04:17.010  -->  00:04:20.070
a dragon fly class that inherit
from a suitable base class, and
90

90

00:04:20.070  -->  00:04:22.670
both could then implement
the can fly interface.
91

91

00:04:22.670  -->  00:04:24.940
They can say that by adding
the interface in this case,
92

92

00:04:24.940  -->  00:04:29.200
the can fly interface, we're actually
adding more flexibility into the design,
93

93

00:04:29.200  -->  00:04:33.170
to enable us to create other classes,
and we're not gonna fall.
94

94

00:04:33.170  -->  00:04:35.970
Victim to the potential problems
you would have had trying to get
95

95

00:04:35.970  -->  00:04:38.570
everything to fit into the one
class as we did earlier
96

96

00:04:38.570  -->  00:04:40.840
in this video as i discussed
early in this video.
97

97

00:04:40.840  -->  00:04:45.030
Now looking at animal you might actually
argue that an animal can breath and
98

98

00:04:45.030  -->  00:04:46.060
can eat.
99

99

00:04:46.060  -->  00:04:48.080
That they should be
implemented as interfaces.
100

100

00:04:48.080  -->  00:04:49.790
And absolutely that could actually work.
101

101

00:04:49.790  -->  00:04:53.260
You could actually do that but as these
methods are really common to all animals
102

102

00:04:53.260  -->  00:04:57.100
it makes sense to include them
in the base abstract class.
103

103

00:04:57.100  -->  00:04:58.940
And let later classes implement them.
104

104

00:04:58.940  -->  00:05:01.420
In other words an official implement
behave differently to a dog, so
105

105

00:05:01.420  -->  00:05:02.850
they remain as abstract methods.
106

106

00:05:02.850  -->  00:05:05.030
That's the reason why I
suggest you leave that there.
107

107

00:05:05.030  -->  00:05:08.580
It really comes down to each
sort of function of your class,
108

108

00:05:08.580  -->  00:05:11.310
as to deciding whether you
created an interface for it.
109

109

00:05:11.310  -->  00:05:15.830
Or whether it should be an abstract method
as the case here is for both the eat and
110

110

00:05:15.830  -->  00:05:17.790
breathe methods in the animal class.
111

111

00:05:17.790  -->  00:05:20.730
And just to summarize the differences
again between an abstract class and
112

112

00:05:20.730  -->  00:05:21.650
an interface.
113

113

00:05:21.650  -->  00:05:25.730
An abstract class can have member
variables that are inherited,
114

114

00:05:25.730  -->  00:05:27.730
something that can't be done in interface.
115

115

00:05:27.730  -->  00:05:32.390
Now interfaces can have variables, but
they're all public static final variables,
116

116

00:05:32.390  -->  00:05:34.990
which essentially are gonna be constant
values that should never change,
117

117

00:05:34.990  -->  00:05:36.420
with a static scope.
118

118

00:05:36.420  -->  00:05:40.660
They have to be static, because non
static variables require an instance, and
119

119

00:05:40.660  -->  00:05:43.260
of course,
you can't instantiate an interface.
120

120

00:05:43.260  -->  00:05:47.300
Interfaces also cannot have constructors,
but abstract classes can, as you've
121

121

00:05:47.300  -->  00:05:50.310
actually seen in this example, and you can
see it in the example on the screen now.
122

122

00:05:50.310  -->  00:05:52.020
We've got a constructor there.
123

123

00:05:52.020  -->  00:05:55.300
Now, all methods over the interface
are automatically public.
124

124

00:05:55.300  -->  00:05:58.960
Whereas the methods of an abstract
class can have any visibility.
125

125

00:05:58.960  -->  00:06:00.790
Private, protected, etcetera.
126

126

00:06:00.790  -->  00:06:04.770
Abstract classes can have defined methods,
ie methods with an implementation.
127

127

00:06:04.770  -->  00:06:07.270
And you can see that on the screen
there with the get name.
128

128

00:06:07.270  -->  00:06:09.410
Whereas all methods in
an interface are abstract.
129

129

00:06:09.410  -->  00:06:13.820
Of course there's no codes in
abstract methods, all the actual code
130

130

00:06:13.820  -->  00:06:17.320
has to be actually written in the class
that implements the particular interface.
131

131

00:06:17.320  -->  00:06:20.820
As you can see, the animal class
implemented the get name method.
132

132

00:06:20.820  -->  00:06:23.600
And as a result, that code does
not have to be reproduced in all
133

133

00:06:23.600  -->  00:06:26.280
classes that inherit
from this abstract class.
134

134

00:06:26.280  -->  00:06:29.000
Okay, so It's time for a challenge, what
I'm going to do is I'm going to copy and
135

135

00:06:29.000  -->  00:06:30.770
paste in the challenge,
because it's quite a big one.
136

136

00:06:30.770  -->  00:06:33.940
And then we'll actually pause the video,
and then we'll actually come back and
137

137

00:06:33.940  -->  00:06:36.420
implement the challenge
itself in the next video.
138

138

00:06:36.420  -->  00:06:38.670
I'm going to go to my main method and
I'm going to paste some coding.
139

139

00:06:39.920  -->  00:06:42.390
Okay, so
I'm going to past the coding okay.
140

140

00:06:42.390  -->  00:06:44.050
Let's go ahead and look at this, now.
141

141

00:06:44.050  -->  00:06:45.350
This is the challenge.
142

142

00:06:45.350  -->  00:06:49.720
I'm gonna get you to create an abstract
class which is gonna define items that can
143

143

00:06:49.720  -->  00:06:51.360
be stored in a list.
144

144

00:06:51.360  -->  00:06:54.560
Now the class should contain two
references to items, which are gonna
145

145

00:06:54.560  -->  00:06:58.510
represent the next and previous items,
which is the case for a linked list.
146

146

00:06:58.510  -->  00:07:01.960
So if you call your abstract class list
item, then it will have two member
147

147

00:07:01.960  -->  00:07:06.950
variables of type list item that will hold
references to the next, or right, and
148

148

00:07:06.950  -->  00:07:08.640
previous, which is left, list items.
149

149

00:07:08.640  -->  00:07:12.200
Now, the abstract class will
also need to hold a value.
150

150

00:07:12.200  -->  00:07:15.670
Try and be as flexible as possible when
defining the type of this value and
151

151

00:07:15.670  -->  00:07:18.620
the class loss [INAUDIBLE] methods
to move to the next item and
152

152

00:07:18.620  -->  00:07:22.870
back to the previous item and also methods
to set the next and the previous items.
153

153

00:07:22.870  -->  00:07:27.120
Now you should also specify,
compare two method that takes a parameter
154

154

00:07:27.120  -->  00:07:30.010
of the same type of the class and
returns zero.
155

155

00:07:30.010  -->  00:07:34.300
If the values are equal, greater than
zero, if the value sorts greater than
156

156

00:07:34.300  -->  00:07:38.230
the parameter and less than zero,
you've got sorts less than the parameter.
157

157

00:07:38.230  -->  00:07:41.930
Create a concrete class from your
abstract list item class and
158

158

00:07:41.930  -->  00:07:46.600
use it in a link list class to implement
a linked list that will add items in order
159

159

00:07:46.600  -->  00:07:48.730
so that they are sorted alphabetically.
160

160

00:07:48.730  -->  00:07:50.260
Duplicate values are not added.
161

161

00:07:50.260  -->  00:07:53.070
Now, note that you're creating
your own linked list class here,
162

162

00:07:53.070  -->  00:07:54.920
not using the built in Java one.
163

163

00:07:54.920  -->  00:07:59.200
The rules for actually adding an item to
the link list here are if the head of
164

164

00:07:59.200  -->  00:08:02.670
the list is nul make the head
refer to the item to be added.
165

165

00:08:02.670  -->  00:08:06.010
If the item to be added is less
than the current item in the list,
166

166

00:08:06.010  -->  00:08:08.170
add the item before the current item.
167

167

00:08:08.170  -->  00:08:10.680
In other words,
make the previous items next.
168

168

00:08:10.680  -->  00:08:11.920
Refer to the new item.
169

169

00:08:11.920  -->  00:08:14.870
And the new item's next to
refer to the current item.
170

170

00:08:14.870  -->  00:08:17.930
And if the item to be added is
greater than the current item,
171

171

00:08:17.930  -->  00:08:20.280
move on to the next item and
compare it again.
172

172

00:08:20.280  -->  00:08:23.900
If there is no next item,
then that is where the new item belongs.
173

173

00:08:23.900  -->  00:08:27.680
Care needs to be taken when inserting
an item before the first item in the list.
174

174

00:08:27.680  -->  00:08:29.770
Because this obviously
won't have a previous item,
175

175

00:08:29.770  -->  00:08:31.530
so you'll need to actually test for
that scenario.
176

176

00:08:31.530  -->  00:08:34.850
And you'll also need a method
to remove an item from the list.
177

177

00:08:34.850  -->  00:08:35.930
And just as a hint here,
178

178

00:08:35.930  -->  00:08:40.590
if you're creating classes with names such
as list, linked list, and node etcetera,
179

179

00:08:40.590  -->  00:08:43.770
make sure you create your classes
before referring to them.
180

180

00:08:43.770  -->  00:08:47.460
In previous videos we've often
referred to classes we create later.
181

181

00:08:47.460  -->  00:08:51.060
But for use names that InteliJ
recognizes as Java classes,
182

182

00:08:51.060  -->  00:08:55.030
such as link list, then it will create
imports for them automatically and
183

183

00:08:55.030  -->  00:08:57.160
possibly cause you problems later, so.
184

184

00:08:57.160  -->  00:09:00.570
Probably a better way is to actually don't
use identical names to list the link
185

185

00:09:00.570  -->  00:09:01.120
list, etcetera.
186

186

00:09:01.120  -->  00:09:02.390
Then you won't run into that scenario.
187

187

00:09:02.390  -->  00:09:05.890
But if you aren't going to do that make
sure you create to avoid that problem.
188

188

00:09:05.890  -->  00:09:10.870
Now an optional task is to create a class
that uses your concrete class to implement
189

189

00:09:10.870  -->  00:09:12.460
a binary search tree.
190

190

00:09:12.460  -->  00:09:14.370
When adding items to a binary search tree,
191

191

00:09:14.370  -->  00:09:17.990
if the item to be added is less than the
current item, then move to the left, and
192

192

00:09:17.990  -->  00:09:20.630
if it's greater than the current item,
move to the right.
193

193

00:09:20.630  -->  00:09:24.490
The new item itself is added when an
attempt to move in the required direction
194

194

00:09:24.490  -->  00:09:26.650
would involve following a nul reference.
195

195

00:09:26.650  -->  00:09:28.270
Once again, duplicates aren't allowed.
196

196

00:09:28.270  -->  00:09:31.820
And another hint here is to avoid
typing lots of add item lines.
197

197

00:09:31.820  -->  00:09:35.040
Split a string into an array,
and create your list in a loop
198

198

00:09:35.040  -->  00:09:37.490
as in the example below,
which I'm about to paste in.
199

199

00:09:37.490  -->  00:09:41.010
And just a note about binary search trees,
we've only talked about that a little bit.
200

200

00:09:41.010  -->  00:09:44.180
This would be your case to actually
go away and actually research
201

201

00:09:44.180  -->  00:09:48.350
binary search trees, which are very
similar to linked lists, but they've
202

202

00:09:48.350  -->  00:09:52.240
got a couple of key differences if you
wanna actually take up the optional task.
203

203

00:09:52.240  -->  00:09:53.670
You'll actually learn
a lot in the process,
204

204

00:09:53.670  -->  00:09:56.240
but in any event you'll actually
see the answer to that with
205

205

00:09:56.240  -->  00:09:58.930
the solution to the challenge
that I've actually created.
206

206

00:09:58.930  -->  00:10:00.920
So let me just paste in that code now,
207

207

00:10:00.920  -->  00:10:04.740
which will help you from
typing lots of add item lines.
208

208

00:10:04.740  -->  00:10:07.380
And you can see in this scenario here
we've got a string containing all of
209

209

00:10:07.380  -->  00:10:09.550
the data we want added separated by space.
210

210

00:10:09.550  -->  00:10:12.230
We can use this dot split
function of a string.
211

211

00:10:12.230  -->  00:10:16.960
In which case the delimiter the character
that we want to split is with a space.
212

212

00:10:16.960  -->  00:10:20.700
What will happen is automatically we'll
actually get an array of strings which
213

213

00:10:20.700  -->  00:10:21.950
contain an entry for each item.
214

214

00:10:21.950  -->  00:10:25.500
And then we can just use a folic to
just go through the actual list,
215

215

00:10:25.500  -->  00:10:29.280
we can go through all the strings
in that array and process them,
216

216

00:10:29.280  -->  00:10:30.280
whatever you wanna do, one at a time.
217

217

00:10:30.280  -->  00:10:32.030
That's just a bit of a shortcut there.
218

218

00:10:32.030  -->  00:10:35.060
All right, so I know that sounds like a
lot of work, but a lot of this stuff we've
219

219

00:10:35.060  -->  00:10:38.460
actually worked on or pretty well all
of it we've worked on previous videos.
220

220

00:10:38.460  -->  00:10:42.770
It's building on the knowledge that
you've built up over this course.
221

221

00:10:42.770  -->  00:10:44.740
So, go away and see how you get on, and
222

222

00:10:44.740  -->  00:10:47.500
see if you can come up with
a solution to this In the next video,
223

223

00:10:47.500  -->  00:10:50.610
I'll actually show you the solution,
my solution that I've come up with it.
224

224

00:10:50.610  -->  00:10:52.270
And you can compare it to yours then.
225

225

00:10:52.270  -->  00:10:53.630
So, I'll see you in that next video.
