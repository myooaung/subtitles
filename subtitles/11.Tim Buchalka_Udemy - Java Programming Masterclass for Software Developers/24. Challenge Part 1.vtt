WEBVTT
1
1

00:00:05.170  -->  00:00:10.610
so in this video we are gonna go through now with
a challenge so what I've got loaded is
2

2

00:00:10.610  -->  00:00:16.170
the project as we finished in the last video the sorted collections so we are
3

3

00:00:16.170  -->  00:00:20.180
going to be making use of the project
that we've created with a basket the
4

4

00:00:20.180  -->  00:00:25.780
stock items and stock list etc so what I'm
gonna do first is create a new class and
5

5

00:00:25.780  -->  00:00:36.640
put the code in there so I'm gonna call I'm gonna right click here new Java class i'm gonna call it main challenged because main is already use and I'm gonna paste in
6

6

00:00:36.640  -->  00:00:43.560
what the challenge is ok so here is the challenge
challenge is to modify the program so
7

7

00:00:43.560  -->  00:00:47.280
that adding items to the shopping basket
doesn't actually reduce the stock
8

8

00:00:47.280  -->  00:00:53.290
count but instead reserves the requested
number of items so what you'll need is to
9

9

00:00:53.290  -->  00:00:54.320
add a reserved
10

10

00:00:54.320  -->  00:00:58.320
field to the stock item class to store
the number of items reserved
11

11

00:00:59.060  -->  00:01:03.740
now items can continue to be added to the
basket but it should not be possible to
12

12

00:01:03.740  -->  00:01:06.860
reserve more than the available stock
of any item
13

13

00:01:07.850  -->  00:01:13.880
now an item's available stock is to start count
less than the reserved amount the stock count
14

14

00:01:13.880  -->  00:01:18.320
for each item is reduced when a basket
is checked out at which point
15

15

00:01:18.320  -->  00:01:23.590
all reserved items in the basket have their
actual stock count reduced so works much
16

16

00:01:23.590  -->  00:01:27.640
like a real shopping cart would on a
website and also once checkout is
17

17

00:01:27.640  -->  00:01:31.470
complete the contents of the basket are
cleared because obviously the transactions
18

18

00:01:31.470  -->  00:01:36.380
completed at that point in time you
should also possible to unreserved
19

19

00:01:36.380  -->  00:01:40.990
items that were added to the basket by
mistake the program should prevent any
20

20

00:01:40.990  -->  00:01:48.100
attempt unreserve more items than
were reserved for basket now add code to main that will
21

21

00:01:48.100  -->  00:01:51.650
unreserve items now main here can be main
challenge because we already got code in
22

22

00:01:51.650  -->  00:01:56.930
main so you can put it in there or this one so add that code
and that's gonna unreserve items after they have been
23

23

00:01:56.930  -->  00:02:02.700
added to the basket and in addition it
will also end up and un-reserving items that
24

24

00:02:02.700  -->  00:02:06.460
have not been added to make sure that
the code can cope with invalid
25

25

00:02:06.460  -->  00:02:10.890
requests like that and finally after
checking out the baskets display the full
26

26

00:02:10.890  -->  00:02:15.010
stock list and also the contents of each
basket that you created
27

27

00:02:15.680  -->  00:02:19.950
that's it that's the challenge hopefully that make
sense it's now time to go away and have a
28

28

00:02:19.950  -->  00:02:22.750
go with that challenge and see what you can
come up with when you ready to come back
29

29

00:02:22.750  -->  00:02:24.510
and see me go through my version
30

30

00:02:24.510  -->  00:02:29.290
of the challenge start the video again but for now pause that video and I'll see you soon
31

31

00:02:32.830  -->  00:02:38.450
ok so hopefully you manage to get the
challenge done and gave it a good go so lets go through now
32

32

00:02:38.450  -->  00:02:43.610
and what I'll do is go through now and show you what
my solution would be the first thing
33

33

00:02:43.610  -->  00:02:53.680
we want to do is go to the stock item class to
the top and we want to add a new field add one that's got quantity stock
34

34

00:02:53.680  -->  00:02:56.900
want to change or add to it another field....
35

35

00:02:58.040  -->  00:03:06.030
....and the quantity in stock we
need to change that method now because
36

36

00:03:06.030  -->  00:03:10.550
if you recall the challenge we need a reserved
field which we've done item
37

37

00:03:10.550  -->  00:03:13.680
continue to be added to the basket but
it shouldn't be possible to reserve more
38

38

00:03:13.680  -->  00:03:17.280
than the current amount which is correct
so the stock count for each item is reduced when
39

39

00:03:17.280  -->  00:03:20.590
a basket is checked out but we know that but
the point here is items can
40

40

00:03:20.590  -->  00:03:24.110
continue to be added to the basket but
shouldn't be possible to reserve more
41

41

00:03:24.110  -->  00:03:27.760
than the available stock so therefore we
need to track every time that's reserved
42

42

00:03:27.760  -->  00:03:32.310
and the way we're going to do that going back to
stock item is adjust the quantity in
43

43

00:03:32.310  -->  00:03:33.080
stock
44

44

00:03:33.080  -->  00:03:37.590
whereas in the past that was just returning
quantity in stock we are gonna make a small
45

45

00:03:37.590  -->  00:03:39.160
change.....
46

46

00:03:39.160  -->  00:03:44.330
...because the actual
quantity that's available for sale
47

47

00:03:44.330  -->  00:03:50.140
effectively is the quantity that we got on hand less
anything that is being reserved now at the moment the only way to
48

48

00:03:50.140  -->  00:03:55.320
manipulate stock levels is to use the
adjust stock method now you probably
49

49

00:03:55.320  -->  00:04:00.350
recall that allows positive and negative
quantities to be used the only checking
50

50

00:04:00.350  -->  00:04:03.840
it does is to make sure that stock
levels will not be negative after the
51

51

00:04:03.840  -->  00:04:08.070
adjustment now to allow stocks to be
reserved my solutions going to add a new
52

52

00:04:08.070  -->  00:04:14.180
method called reserve stock and also an unreserved stock that is going to change the quantity reserved so let's go
53

53

00:04:14.180  -->  00:04:20.480
ahead and do that so we are not gonna touch adjust stock
now so let's start with reserves stock
54

54

00:04:20.480  -->  00:04:28.460
....
55

55

00:04:31.370  -->  00:04:37.820
....
56

56

00:04:39.380  -->  00:04:42.970
.....
57

57

00:04:44.410  -->  00:04:50.130
...so we are gonna add to the reserve count because obviously it's
58

58

00:04:50.130  -->  00:04:51.820
enough quantity in stock
59

59

00:04:51.820  -->  00:04:56.070
available for us to do that and then we are going to
return the quantity in that case
60

60

00:04:56.070  -->  00:04:59.720
otherwise if the execution of the
code gets down to here we know that there
61

61

00:04:59.720  -->  00:05:03.800
was a problem we didn't have enough quantity and we are going to return 0 so that's how you go about
62

62

00:05:03.800  -->  00:05:08.720
reserving the stock in terms of on
un-reserving it because that was also a requirement
63

63

00:05:08.720  -->  00:05:17.630
...its is going to be slight different we need to quantities as well to know
64

64

00:05:17.630  -->  00:05:24.010
how many times it was reserved we put.....so we are looking at the reserved
65

65

00:05:24.010  -->  00:05:31.520
variable this time so that's the case
we are going to put...
66

66

00:05:31.520  -->  00:05:40.910
...and if execution comes to down to here then we know of course
67

67

00:05:40.910  -->  00:05:44.050
we didn't have enough reserved to
unreserved
68

68

00:05:44.050  -->  00:05:49.530
we are gonna return 0 so that handle that quite nicely and again reserved in stock check that their is enough items are
69

69

00:05:49.530  -->  00:05:53.620
available before increasing the reserved
amount and the check could have been
70

70

00:05:53.620  -->  00:05:55.970
written as if quantities is less than equal
quantity in
71

71

00:05:55.970  -->  00:06:01.410
brackets take reserved but
we already created a method called quantity in stock
72

72

00:06:01.410  -->  00:06:07.150
and the one I just made a small change to
earlier this one here in line 32 so it made sense
73

73

00:06:07.150  -->  00:06:12.250
to actually perform the subtraction
using that method instead and un-reserved stock as I
74

74

00:06:12.250  -->  00:06:15.910
mentioned reduces the number of
items that are reserved so obviously
75

75

00:06:15.910  -->  00:06:18.070
checks the quantity being reserved
76

76

00:06:18.070  -->  00:06:22.690
is not greater that the quantity that
are currently reserved in both cases the methods
77

77

00:06:22.690  -->  00:06:26.590
either return the quantity that were
reserved or unreserved if it's
78

78

00:06:26.590  -->  00:06:33.340
successful it is or 0 if not if it is unsuccessful performing the operation and the reason we are doing is that it allows
79

79

00:06:33.340  -->  00:06:37.810
the calling code to check that the
reservation request was successful and
80

80

00:06:37.810  -->  00:06:41.020
obviously that's important because we
shouldn't update the customer's shopping
81

81

00:06:41.020  -->  00:06:41.920
basket
82

82

00:06:41.920  -->  00:06:45.980
if all the requested items couldn't be
reserved now before I move on we should really
83

83

00:06:45.980  -->  00:06:49.410
have a look at the quantity in stock
field and the quantity in stock method
84

84

00:06:49.410  -->  00:06:54.910
in Java this league will have a field and a method with the same name so this
85

85

00:06:54.910  -->  00:06:56.580
code actually works fine
86

86

00:06:56.580  -->  00:07:02.910
and what I'm referring to is here we've got quantity in
stock on line 9 we also got a method
87

87

00:07:02.910  -->  00:07:07.160
quantity in stock on line 32 thing to
remember there is that wouldn't be legal
88

88

00:07:07.160  -->  00:07:11.690
code in some other languages such as C++
but the Java compiler can work out which
89

89

00:07:11.690  -->  00:07:15.270
one has been referenced and can cope quite
happily with this that's probably not
90

90

00:07:15.270  -->  00:07:20.010
a good idea to do this though users of the stock item class you know will not be
91

91

00:07:20.010  -->  00:07:24.220
confused because if it was private so any
code using a stock item will only see
92

92

00:07:24.220  -->  00:07:28.790
the method because of course the field itself is the access modifiers
93

93

00:07:28.790  -->  00:07:32.610
private but it's a very good way to
confuse ourselve when we come back to working
94

94

00:07:32.610  -->  00:07:37.160
on the code that is in our stock item class so what we could probably do for starters is comeback
95

95

00:07:37.160  -->  00:07:45.370
to our reserved method do something like
this just two remind us this one here.....
96

96

00:07:45.370  -->  00:07:52.060
...so that would obviously confirm so that we don't get confuse as to whether we are accessing a
97

97

00:07:52.060  -->  00:07:56.210
variable or method because obviously for
access the variable quantity in stock
98

98

00:07:56.840  -->  00:08:00.910
we get a different result because the
quantity in stock method is performing
99

99

00:08:00.910  -->  00:08:05.140
that additional calculation taking reserved
into amount with that said even with that
100

100

00:08:05.140  -->  00:08:09.500
comment there's a possibility for errors
pretty great be quite easy to make that
101

101

00:08:09.500  -->  00:08:13.100
mistake in a particular if you are in a hurry
for argument sake and what I'm talking about is we
102

102

00:08:13.100  -->  00:08:17.980
could if we actually change that and lets just say we forgot to use a method and we just change it here to use the
103

103

00:08:17.980  -->  00:08:19.810
variable
104

104

00:08:19.810  -->  00:08:24.740
quantity in stock lets just
assume I have renamed this to be
105

105

00:08:24.740  -->  00:08:28.270
exactly the same things so you can see in this
case an actual fact lets just change that
106

106

00:08:28.270  -->  00:08:32.900
because that's really what it should
have been anyway so refactor that....
107

107

00:08:32.900  -->  00:08:43.090
....that should always been quantity in
stock anyway....ok so lets assume
108

108

00:08:43.090  -->  00:08:49.760
if that was a case along with the field on line 9
was quantity in stock and on line 32
109

109

00:08:49.760  -->  00:08:53.940
we had quantity in stock method so the point
here that was that we could use the same
110

110

00:08:53.940  -->  00:09:01.690
variable name and looking at the code it is obviously
111

111

00:09:01.690  -->  00:09:05.060
going to compile its accepted by Java
but what happens then it's going to
112

112

00:09:05.060  -->  00:09:08.390
allow more stock to be reserved than it is
available because of course not looking
113

113

00:09:08.390  -->  00:09:10.500
at the reserved
114

114

00:09:10.500  -->  00:09:13.870
field when taking into account the
calculation in other words it's not
115

115

00:09:13.870  -->  00:09:17.750
processing on line 33 anymore so that's
obviously an gonna lead to dissatisfied
116

116

00:09:17.750  -->  00:09:21.420
customers so the point is that using the same name was acceptable when the new
117

117

00:09:21.420  -->  00:09:24.640
method was just returning the value of
the field it was named after but now
118

118

00:09:24.640  -->  00:09:27.810
that's actually doing something
different it's actually performing an extra step
119

119

00:09:27.810  -->  00:09:31.730
it's taking in reserved the value of
the reserved field into account we should
120

120

00:09:31.730  -->  00:09:36.750
really give it a different name so lets go back
and change quantity in stock refactor
121

121

00:09:36.750  -->  00:09:41.430
that and rename it to what it really is
which is now available quantities
122

122

00:09:41.430  -->  00:09:50.630
so we call it....and that is much clearer then and we come back here
123

123

00:09:50.630  -->  00:09:58.410
we know that we're going to be using the available quantity method and as a result I'm able to get rid of that comment
124

124

00:09:58.410  -->  00:10:02.470
so reserve stock method now now that its using methods
a lot clearer and we're not going to run
125

125

00:10:02.470  -->  00:10:06.750
into any difficulties accidentally using
a field in instead of a method now
126

126

00:10:06.750  -->  00:10:10.670
the last function change for the stock item class is to provide the method for
127

127

00:10:10.670  -->  00:10:15.130
finalizing the stock level where items
are actually sold so in other words when
128

128

00:10:15.130  -->  00:10:18.720
the customer checks out the shopping
basket because of course prior to that
129

129

00:10:18.720  -->  00:10:22.720
they were only reserving the items now this
is just a case of reducing the quantity
130

130

00:10:22.720  -->  00:10:27.490
in stock by the amount sold and also
reducing the reserve quantity because of
131

131

00:10:27.490  -->  00:10:31.370
course the goods are no longer reserved
they are being sold so what we're going to do is
132

132

00:10:31.920  -->  00:10:35.630
create a new method called finalized stock
down here
133

133

00:10:35.630  -->  00:10:55.300
.......
134

134

00:10:55.300  -->  00:10:57.880
.....
135

135

00:10:57.880  -->  00:11:01.960
....and note now
that there is no ambiguity here now
136

136

00:11:01.960  -->  00:11:08.600
we are using the field quantity in stock.....so we are deducting the quantity to be
137

137

00:11:08.600  -->  00:11:13.430
finalists and of course you also have to
change re“served drop that by the same amount so.....
138

138

00:11:13.430  -->  00:11:19.540
...so we are reducing the quantity in stock and reducing the
139

139

00:11:19.540  -->  00:11:24.610
quantity reserved and I'm gonna return quantity to indicate to the calling process that
140

140

00:11:24.610  -->  00:11:28.390
we've succeeded in how many items
141

141

00:11:29.180  -->  00:11:33.600
that had their quantity that's has been
specified has actually been reduced in
142

142

00:11:33.600  -->  00:11:34.460
stock
143

143

00:11:34.460  -->  00:11:39.710
so now we've done that we then return quantity and
of course quantity was the number of stock items that
144

144

00:11:39.710  -->  00:11:45.610
were reduced and also the reserve cap was reduced as well again if code execution gets down to here we
145

145

00:11:45.610  -->  00:11:48.010
know there's a problem so we return 0
146

146

00:11:48.010  -->  00:11:51.980
so we know the operation didn't work so again the finalize stock method check if there's
147

147

00:11:51.980  -->  00:11:56.750
enough items are reserved to satisfy the
request and of course it then reduces
148

148

00:11:56.750  -->  00:12:00.200
as I mentioned both the stock level fields by
the required amount as well as the
149

149

00:12:00.200  -->  00:12:04.210
reserved field and again returning quantity
if successful the original quantity that was
150

150

00:12:04.210  -->  00:12:09.530
passed to the method was 0 if its not ok the last step isn't necessary but because we've added
151

151

00:12:09.530  -->  00:12:13.030
another field to a class lets change our
toString method to take that into
152

152

00:12:13.030  -->  00:12:18.450
account pretty minor change but at the moment our toString
method for stock item has only really listed
153

153

00:12:18.450  -->  00:12:21.450
the name and the prices lets change this......
154

154

00:12:26.280  -->  00:12:29.360
....
155

155

00:12:29.360  -->  00:12:34.260
so we got that now in the output alright I'm gonna finish the video here now in
the next video we'll come back and continue
156

156

00:12:34.260  -->  00:12:39.100
and make some code changes to the
stock list class so you see in that video
