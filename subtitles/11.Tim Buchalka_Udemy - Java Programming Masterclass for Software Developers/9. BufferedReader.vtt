WEBVTT
1
1

00:00:05.420  -->  00:00:10.670
so as I mentioned in the previous video we are going to read in the directions.txt file
2

2

00:00:10.670  -->  00:00:15.490
that we've written and it's a very
similar process to reading the locations
3

3

00:00:15.490  -->  00:00:20.130
but the difference is I am going to introduce a BufferedReader now a
4

4

00:00:20.130  -->  00:00:24.430
BufferedReader reads texts from the
input stream and buffers the characters
5

5

00:00:24.430  -->  00:00:30.280
into a character array so for our example we are going to still create a file reader we're
6

6

00:00:30.280  -->  00:00:35.310
going to use it as an input stream for
the BufferedReader to use now reading
7

7

00:00:35.310  -->  00:00:39.760
chunks of data from a stream such as a
file is more efficient than reading just
8

8

00:00:39.760  -->  00:00:44.750
a few characters at a time and the reason for that is that things like the
9

9

00:00:44.750  -->  00:00:49.690
overheard of seeking to the correct track and
sector on your disk drive are
10

10

00:00:49.690  -->  00:00:53.790
significant so it takes awhile to
find the correct place on the disk drive
11

11

00:00:53.790  -->  00:00:57.410
to read from and if you have to do that
many times because only a few bits have
12

12

00:00:57.410  -->  00:01:01.650
been read at a time then the seek times for this really do add up so
13

13

00:01:01.650  -->  00:01:06.910
consequently BufferedReaders can be a lot more
streamlined you know faster in other words in
14

14

00:01:06.910  -->  00:01:11.790
you know more efficient now you can specify the
size of the buffer but the default is
15

15

00:01:11.790  -->  00:01:15.320
8k bytes and that's enough really for
most purposes
16

16

00:01:15.890  -->  00:01:19.610
now our files here are both smaller than 8k so what that means is the entire
17

17

00:01:19.610  -->  00:01:23.830
contents of the file will be read into
the buffer in a single read and be
18

18

00:01:23.830  -->  00:01:28.180
available from there for the scanner to
use it as it needs more data so let's go ahead
19

19

00:01:28.180  -->  00:01:33.150
and look at implementing that now so I've already
read in the locations as you can see
20

20

00:01:33.150  -->  00:01:38.120
here starting on lines 48 or actually starting on lines 46 to be
21

21

00:01:38.120  -->  00:01:42.960
precise so let's go ahead and as I
mentioned read the directions in so
22

22

00:01:42.960  -->  00:01:47.170
we are gonna actually put that in its own
try block come right down here and actually add a
23

23

00:01:47.170  -->  00:01:50.570
separate try block and bearing in mind we
are going to change this to a try with
24

24

00:01:50.570  -->  00:01:56.490
resources later so let's start
with that so...
25

25

00:01:56.490  -->  00:02:05.130
....
26

26

00:02:06.440  -->  00:02:09.440
....
27

27

00:02:11.200  -->  00:02:22.740
....which is the name of
28

28

00:02:22.740  -->  00:02:27.330
the file that we used to store our
directions.txt I am gonna accept those
29

29

00:02:27.330  -->  00:02:36.320
import and set our delimiter so...
30

30

00:02:36.320  -->  00:02:52.790
....
31

31

00:02:52.790  -->  00:03:03.670
....and we
32

32

00:03:03.670  -->  00:03:08.290
need to get the destination so....but before we do that
33

33

00:03:08.290  -->  00:03:17.380
we need to actually skipped so...
34

34

00:03:17.380  -->  00:03:21.170
and of course we are doing that to go to the next.....
35

35

00:03:21.170  -->  00:03:25.100
...we are doing that to go to the
next comma because we have read in the
36

36

00:03:25.100  -->  00:03:30.020
first one which is the location and we
are going to read in the directions and I should have a
37

37

00:03:30.020  -->  00:03:34.730
delimiter their as well because obviously each piece of data if you recall looking at the directions.txt
38

38

00:03:34.730  -->  00:03:39.050
we've got them separated by
commas so consequently of course we need to
39

39

00:03:39.050  -->  00:03:45.160
use that linescanner.delimiter to
skip for each one of those so I've
40

40

00:03:45.160  -->  00:03:50.170
got the location I'm reading on line 67 I'm
skipping the direction I'm skipping the
41

41

00:03:50.170  -->  00:03:56.970
last one is going to be the destination so...
42

42

00:03:56.970  -->  00:04:02.380
..so we are going to read on the end of the line now because that's really the only data their and
43

43

00:04:02.380  -->  00:04:04.000
then let's...
44

44

00:04:04.000  -->  00:04:14.770
create an integer.....and we are converting it into an integer because that is what it is going to
45

45

00:04:14.770  -->  00:04:21.990
be use for then we are going to print them out so...
46

46

00:04:21.990  -->  00:04:27.040
....
47

47

00:04:30.590  -->  00:04:42.250
....
48

48

00:04:42.250  -->  00:04:50.820
.....and then we need add an exit to it so....
49

49

00:04:50.820  -->  00:04:58.690
...so we are building up the destination object and we haven't written that
50

50

00:04:58.690  -->  00:05:02.260
code for add exits so it's
normal to expect an error their and we
51

51

00:05:02.260  -->  00:05:11.830
need to catch our potential errors
which is IOException....
52

52

00:05:11.830  -->  00:05:21.970
.....
53

53

00:05:21.970  -->  00:05:31.200
...and we're also gonna
54

54

00:05:31.200  -->  00:05:40.050
add a finally.....
55

55

00:05:40.050  -->  00:05:48.200
...so what we are doing
here is that the file reader is passed to
56

56

00:05:48.200  -->  00:05:52.550
the buffered readers constructor this is
on line 64 then the
57

57

00:05:52.550  -->  00:05:56.740
BufferedReader itself has passed to the
scanners constructor and once again
58

58

00:05:56.740  -->  00:06:00.990
I just want to point out the classes are designed to be used in this way and closing the scanner
59

59

00:06:01.610  -->  00:06:04.960
will actually close to BufferedReader and
that's of course because it implements the
60

60

00:06:04.960  -->  00:06:08.940
close interface that we talk about in the last video so you can check
61

61

00:06:08.940  -->  00:06:16.780
the buffered readers close method if you want
to now look for close so you can see
62

62

00:06:16.780  -->  00:06:21.850
that it calls the Close method it and it calls
the Close method of the reader and we
63

63

00:06:21.850  -->  00:06:26.060
just have a look at that you can see in is
actually a private reader in so
64

64

00:06:26.060  -->  00:06:30.040
basically again what it's doing is it's
it's implementing the closable interface
65

65

00:06:30.040  -->  00:06:34.310
and therefore that closes
automatically gonna be called for the
66

66

00:06:34.310  -->  00:06:41.090
buffered reader and if we just go up and have a
look at the buffered reader you can see that
67

67

00:06:41.090  -->  00:06:45.560
it's an abstract class that implements
readable and closable so again for that
68

68

00:06:45.560  -->  00:06:49.650
reason its going to basically be auto
closed once the processing has been
69

69

00:06:49.650  -->  00:06:54.710
completed for it so again closing it down
and just looking at the code that we've just
70

70

00:06:54.710  -->  00:07:01.590
written we basically going through in one
field at a time and extracting that field
71

71

00:07:01.590  -->  00:07:05.230
from the scanner because obviously we've used
commas as delimiters as I mentioned
72

72

00:07:05.230  -->  00:07:06.290
earlier in this video
73

73

00:07:06.290  -->  00:07:10.870
so to read it back we tell the scanner that it
needs to use a comma as a
74

74

00:07:10.870  -->  00:07:14.120
delimiter so of course it knows when to
stop reading each piece of information
75

75

00:07:14.120  -->  00:07:18.260
and most of the body of the while loop has
taken up in getting the integer string
76

76

00:07:18.260  -->  00:07:22.900
and that integer data from each line of the
buffer and reading data into numerical
77

77

00:07:22.900  -->  00:07:26.550
values from a text file can be
problematic and I have to read the final
78

78

00:07:26.550  -->  00:07:29.850
number as a string using the next line method this is the code on line
79

79

00:07:29.850  -->  00:07:34.030
line 71 because there's no comma delimited
to tell the scanner to reading in int
80

80

00:07:34.030  -->  00:07:35.940
because that's really at the end of the
81

81

00:07:35.940  -->  00:07:41.850
that particular line and in fact the scanner may not be the best way to pass this data the thing
82

82

00:07:41.850  -->  00:07:45.980
to remember with scanner is that they can
be notoriously difficult to use and
83

83

00:07:45.980  -->  00:07:50.010
really can take some trial and error to
get to behave properly with a particular
84

84

00:07:50.010  -->  00:07:54.830
data set now in this example we had to skip
over the delimiter while reading strings as
85

85

00:07:54.830  -->  00:07:58.760
otherwise the delimiter is included in
the string and you can see I skipped on
86

86

00:07:58.760  -->  00:08:04.600
line 68 and line 70 then the other thing is
we got an error when trying to call the
87

87

00:08:04.600  -->  00:08:09.320
location object add exit method and
that's because we remove the
88

88

00:08:09.320  -->  00:08:13.530
method when trying to make the class immutable in previous videos so lets add
89

89

00:08:13.530  -->  00:08:19.870
the add exit method back to the location class
but we are gonna changed it just to protect ourselves
90

90

00:08:19.870  -->  00:08:27.880
so come down here into location we are gonna add it but we are gonna add it as protected so its only available to classes in our
91

91

00:08:27.880  -->  00:08:31.200
package and of course subclasses
of locations as well
92

92

00:08:31.200  -->  00:08:41.980
so...
93

93

00:08:41.980  -->  00:08:46.720
...
94

94

00:08:47.300  -->  00:08:56.600
....
95

95

00:08:56.600  -->  00:09:02.170
...if we go back now that error should disappear on line 75 and we are good to go so before I change anything else lets
96

96

00:09:02.170  -->  00:09:07.490
actually run the program and make sure it works so lets have a look at it and you can
97

97

00:09:07.490  -->  00:09:10.840
see we've got our comments and if you recall in our code I added
98

98

00:09:10.840  -->  00:09:15.040
some output on line 49 to say we have imported the various locations and we got
99

99

00:09:15.040  -->  00:09:20.450
the location and number and the
actual descriptions and we have also got our
100

100

00:09:20.450  -->  00:09:26.840
exits data as well so that seems
to have read that and working ok which is good so
101

101

00:09:26.840  -->  00:09:30.750
we've done that so lets actually go now and run the
code from the main class so we can
102

102

00:09:30.750  -->  00:09:34.650
run the program to make sure it's still
actually runs and works so will do that
103

103

00:09:34.650  -->  00:09:40.730
we can actually just move around to
different locations in our game ok so we are starting at
104

104

00:09:40.730  -->  00:09:45.870
the end of the road so lets go north again go south
again
105

105

00:09:45.870  -->  00:09:56.450
go east go west go east again go say north can't go in that direction lets quit so that
106

106

00:09:56.450  -->  00:10:01.220
seems to be working very well which is
fantastic and obviously you can see that
107

107

00:10:01.220  -->  00:10:04.900
the code at the top there was actually
printing out the locations data that was
108

108

00:10:04.900  -->  00:10:08.380
coming through when it was imported so we can see that its actually being read
109

109

00:10:08.380  -->  00:10:14.070
successfully from both locations.txt file as well as the directions.txt
110

110

00:10:14.070  -->  00:10:18.710
file now another way to pass this data is to read it line by line and then we could
111

111

00:10:18.710  -->  00:10:23.190
actually use the String class split
method to get each part of the line into a
112

112

00:10:23.190  -->  00:10:28.260
string array its then quite simple to parse the values that really should be integers
113

113

00:10:28.260  -->  00:10:32.090
so lets actually look at another way of
doing that's I am gonna close this down
114

114

00:10:32.090  -->  00:10:40.440
and go back to locations and I'm going to comment out the code
that we actually add in their so comment out this code
115

115

00:10:40.440  -->  00:10:48.150
up until that destination line they're
comment that out and will do something using the string.split...
116

116

00:10:48.150  -->  00:10:55.650
so the way to do that would be string.....
117

117

00:10:55.650  -->  00:10:59.170
that has read the entire line this time rather
than reading sort of 1 of 3 field which we've
118

118

00:10:59.170  -->  00:11:03.200
done on lines 67 to 72 which I've commented out now so we've read
119

119

00:11:03.200  -->  00:11:11.470
basically the entire line and then we can do.....
120

120

00:11:11.470  -->  00:11:17.480
....and that creates a
121

121

00:11:17.480  -->  00:11:21.690
string array which has now got each
one of these fields from that line in
122

122

00:11:21.690  -->  00:11:31.070
for us...
123

123

00:11:31.070  -->  00:11:34.070
....
124

124

00:11:34.630  -->  00:11:52.090
....
125

125

00:11:53.460  -->  00:11:59.980
then these lines here on line 79 to 81 their
unchanged because they are still taking the
126

126

00:11:59.980  -->  00:12:04.170
same variable names and being processed
so we just run this to make sure that it works
127

127

00:12:04.170  -->  00:12:13.310
again and we can still run our game so that is still working
which is good so that code there it's
128

128

00:12:13.310  -->  00:12:18.030
probably a bit easy to understand and
also I can be easy to implement when
129

129

00:12:18.030  -->  00:12:23.920
we're dealing with data that separated in some way at this point  you might be thinking we are back where
130

130

00:12:23.920  -->  00:12:27.720
we started and we actually have more code than
we had before so what is the actual
131

131

00:12:27.720  -->  00:12:32.940
advantage well with the small number of locations that we have at the moment the advantage is
132

132

00:12:32.940  -->  00:12:36.310
not really obvious but I've actually in
the next video
133

133

00:12:36.900  -->  00:12:41.100
I've got a download for you in the Resources
section of the video and we are going to use
134

134

00:12:41.100  -->  00:12:45.310
those files instead because I got a lot
more locations and as a result you wll
135

135

00:12:45.310  -->  00:12:49.880
sort of see the advantages you know when
you're dealing with larger text files so lets end
136

136

00:12:49.880  -->  00:12:52.920
the video here now and the next one
will go ahead and look at implementing
137

137

00:12:52.920  -->  00:12:57.080
that data so that we can actually run the
game with more locations see you in
138

138

00:12:57.080  -->  00:12:57.420
the next video
