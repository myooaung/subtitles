WEBVTT
1
1

00:00:04.410  -->  00:00:08.770
in the previous video we finished the
changes to the stock item. class and
2

2

00:00:08.770  -->  00:00:12.910
obviously got that on the screen now but
in the stock list class we also need
3

3

00:00:12.910  -->  00:00:19.930
methods to reserve and unreserved stock
and if we open up stock list we already got
4

4

00:00:19.930  -->  00:00:25.630
some code on starting on line 32 there's
a method their for selling stock but that would
5

5

00:00:25.630  -->  00:00:30.080
need to be changed to use a new stock
item.finalized stock method rather
6

6

00:00:30.080  -->  00:00:34.340
than performing a stock adjustment now
before we make those changes lets have a look
7

7

00:00:34.340  -->  00:00:39.200
at the add stock method which you can also
see on the screen starting on line 17 now at
8

8

00:00:39.200  -->  00:00:44.140
the moment if you look on line 23 the
add stock method adjusts the stock level
9

9

00:00:44.140  -->  00:00:49.320
of the new stock item that's being added
and it does that while making sure that any
10

10

00:00:49.320  -->  00:00:55.460
existing stock levels are also included
and how it does that is by calling
11

11

00:00:55.460  -->  00:00:59.710
the quantity in stock method now had we
modify this method rather than creating
12

12

00:00:59.710  -->  00:01:05.440
the new available quantity method then
it now be a bug in add stock and it could be
13

13

00:01:05.440  -->  00:01:09.710
a very difficult bug that would take a
lot of research figuring out to
14

14

00:01:09.710  -->  00:01:13.040
find out and that's because anyone
reading the code would naturally expect
15

15

00:01:13.040  -->  00:01:17.720
the quantity in stock method to return
the value of the corresponding field in
16

16

00:01:17.720  -->  00:01:21.720
stock item now when we get to the end of
this solution you probably noticed that
17

17

00:01:21.720  -->  00:01:27.020
I only actually use the available quantity
method inside stock item so it's
18

18

00:01:27.020  -->  00:01:32.190
reasonable to ask why I didn't make it
private or just performed a subtraction in
19

19

00:01:32.190  -->  00:01:36.680
the stock item.reserve stock method and do away with available quantity the
20

20

00:01:36.680  -->  00:01:40.580
method altogether now that would have
removed the potential for bug that
21

21

00:01:40.580  -->  00:01:44.200
I have just discussed but the thing to
remember is that in a real world
22

22

00:01:44.200  -->  00:01:49.000
application it would be necessary to
show the customers how many of each item
23

23

00:01:49.000  -->  00:01:54.400
are available before they try adding them to
the basket so although we don't use it
24

24

00:01:54.400  -->  00:01:59.260
outside of the stock item class in this
example it would be unnecessary method
25

25

00:01:59.260  -->  00:02:03.830
in practice and I thought it'd be worth
pointing out the
26

26

00:02:03.830  -->  00:02:09.530
potential for error that you can actually
produce so lets go  ahead and add some methods
27

27

00:02:09.530  -->  00:02:12.530
the first is gonna be reserved stocks
so I'm going to come down and add that
28

28

00:02:13.920  -->  00:02:17.690
I'm just gonna add it here below actually I'll add it below sales stocks so....
29

29

00:02:17.690  -->  00:02:27.090
the reserve stock do that one first so....
30

30

00:02:27.090  -->  00:02:36.390
.....
31

31

00:02:36.390  -->  00:02:45.520
....and just a recap both the reserves
stock and unreserve stocks attempt to retrieved
32

32

00:02:45.520  -->  00:02:49.500
the stock item from the list and they then call the items reserve stock or unreserved
33

33

00:02:49.500  -->  00:02:53.720
stock as appropriate so let's go ahead
and write that finish the code for this so.....
34

34

00:02:53.720  -->  00:03:20.000
.....
35

35

00:03:20.620  -->  00:03:27.100
.....
36

36

00:03:27.100  -->  00:03:38.700
.....so that's
37

37

00:03:38.700  -->  00:03:45.560
the reserve stock and let's also code the unreserve stock so....
38

38

00:03:49.310  -->  00:03:59.830
....
39

39

00:03:59.830  -->  00:04:05.870
lets just copy this code to save a bit of time copying all the code
40

40

00:04:05.870  -->  00:04:10.630
that's come out of the reserve stock
method and the code is largely the same all
41

41

00:04:10.630  -->  00:04:15.310
the retrieval of the stock item codes
is the same testing for null and
42

42

00:04:15.310  -->  00:04:18.030
testing the see if the quantities
is greater than 0 is still the same
43

43

00:04:18.030  -->  00:04:21.500
the only thing we need to do is reserved in
stock
44

44

00:04:21.500  -->  00:04:30.020
.unreserve stock instead of reserve stock so in here will change this to unreserve stock ok so that's
45

45

00:04:30.020  -->  00:04:34.780
reserves stock and unreserve stock now as you can see above on line 32
46

46

00:04:34.780  -->  00:04:39.080
the stock list class already has a cell
stock method but now instead of
47

47

00:04:39.080  -->  00:04:43.060
adjusting the item stock level
directly it just calls the
48

48

00:04:43.060  -->  00:04:47.550
finalize stock method or basically that's the change we're about to make their we are changing from
49

49

00:04:47.550  -->  00:04:51.660
existing functionally as you can see at
the moment what it's doing its using this
50

50

00:04:51.660  -->  00:04:54.870
adjust stock but I've talked about that
before we are changing the code for that
51

51

00:04:54.870  -->  00:04:59.710
so let's go ahead and adjust the code for this and what I'm going to do just to say
52

52

00:04:59.710  -->  00:05:04.250
you've got a record of it I'm going to comment out all the existing code for
53

53

00:05:04.250  -->  00:05:10.940
sell stock and what I'm going to do it then is just type it in again so.....
54

54

00:05:10.940  -->  00:05:20.820
.....
55

55

00:05:20.820  -->  00:05:27.100
....
56

56

00:05:30.530  -->  00:05:38.460
....and if you get
57

57

00:05:38.460  -->  00:05:42.690
down to here it means there was a problem we
weren't able to sell the stock we return 0 I've left
58

58

00:05:42.690  -->  00:05:47.740
obviously the code in their as it is so again confirmation that instead of
59

59

00:05:47.740  -->  00:05:51.550
adjusting the item stock level directly we just calling the finalize
60

60

00:05:51.550  -->  00:05:55.140
stock method with a positive
quantity rather than negative when it
61

61

00:05:55.140  -->  00:05:59.150
was adjusting the stock and you can see
that on line 42 that's commented out
62

62

00:05:59.150  -->  00:06:02.240
there that was the negative quantity
that was being called previously but
63

63

00:06:02.240  -->  00:06:07.200
now that we are calling finalize stock with the positive quantity we don't need to do that
64

64

00:06:07.200  -->  00:06:11.390
anymore all checks for sufficient stock
levels are performed in finalize stock
65

65

00:06:11.390  -->  00:06:14.050
so that condition can be simplified as
well
66

66

00:06:14.050  -->  00:06:18.620
really sell stock only needs to check the
item exists in the list or in its list
67

67

00:06:18.620  -->  00:06:24.550
and that the quantity being sold is
greater than 0 and it was also abusing
68

68

00:06:24.550  -->  00:06:26.150
that get or default
69

69

00:06:26.150  -->  00:06:31.610
option as well so we remove that and just
made a purely a list.get so we're
70

70

00:06:31.610  -->  00:06:38.330
guaranteed to retrieve an item if
one exists for that item name instead of getting null back
71

71

00:06:38.330  -->  00:06:42.860
and the finalize method returns to quantity sold
or 0 if their weren't enough so instead of
72

72

00:06:42.860  -->  00:06:46.750
returning quantity the sell stock method
can now return the result of finalizing the
73

73

00:06:46.750  -->  00:06:51.160
sale and obviously I have done that
on line 36 so we are nearly done at this point but
74

74

00:06:51.160  -->  00:06:56.410
what we do need to do now is provide the
basket case not basket case
75

75

00:06:56.410  -->  00:07:01.450
basket class with a way to remove items
from the basket now this could be
76

76

00:07:01.450  -->  00:07:05.080
because the customers chose there mind
completely and no longer wants the item at
77

77

00:07:05.080  -->  00:07:08.740
all or alternatively could be because
they want to reduce the number they
78

78

00:07:08.740  -->  00:07:16.120
originally added either way we've got to provide that function so lets go ahaed  and have a look at basket.java so we are gonna add
79

79

00:07:16.120  -->  00:07:23.340
a remove from basket option remembering we got an add we haven't got a remove so lets go ahead and type that in
80

80

00:07:23.340  -->  00:07:30.700
and described it as we go
through so.....
81

81

00:07:30.700  -->  00:07:37.260
.....
82

82

00:07:38.120  -->  00:07:45.470
.....so we need to do a test first to make sure
that its a valid item so.....
83

83

00:07:45.470  -->  00:07:55.040
....
84

84

00:07:55.040  -->  00:08:06.550
.....
85

85

00:08:06.550  -->  00:08:11.390
....and it is
appropriate to use get or default here
86

86

00:08:11.390  -->  00:08:15.990
because if it is already in the basket we want to
return the current quantity for this
87

87

00:08:15.990  -->  00:08:16.600
item
88

88

00:08:16.600  -->  00:08:21.820
otherwise we want to return 0 so bottom line is after line 32
is executed we got the current
89

89

00:08:21.820  -->  00:08:27.420
quantity that has already been allocated
by the customer or added to the
90

90

00:08:27.420  -->  00:08:33.570
basket I should say or 0 and we need to figure out
the new quantity and that's a case of
91

91

00:08:33.570  -->  00:08:40.360
adding in basket plus the quantity that
was passed to this method then we need to do a
92

92

00:08:40.360  -->  00:08:45.060
check to make sure that we have actually
got a change here so...
93

93

00:08:45.060  -->  00:09:00.680
....
94

94

00:09:00.680  -->  00:09:04.970
.....
95

95

00:09:04.970  -->  00:09:09.580
....
96

96

00:09:09.580  -->  00:09:10.470
.....
97

97

00:09:10.470  -->  00:09:22.710
.....so basically the quantity
98

98

00:09:22.710  -->  00:09:25.890
has now been reduced to zero it means
basically we want to remove it from the
99

99

00:09:25.890  -->  00:09:30.000
basket because obviously an item should only
be in the basket if their is a quantity of
100

100

00:09:30.000  -->  00:09:34.470
1 or more and that's why we're doing a
test for 0 here exactly and less than
101

101

00:09:34.470  -->  00:09:37.650
zero would mean there's a problem so we
don't want to include that we wanted that
102

102

00:09:37.650  -->  00:09:41.710
to fall through and to return an error
in this case to return 0 to indicate
103

103

00:09:41.710  -->  00:09:45.480
that it haven't done anything because it
was an invalid quantity
104

104

00:09:47.050  -->  00:09:55.830
down here outside of the if we will just put a return 0 which is our fall through code if there was a problem so that
105

105

00:09:55.830  -->  00:09:59.520
should be pretty straightforward how
we calculated the new quantity we've
106

106

00:09:59.520  -->  00:10:05.320
updated the item in the basket if their was still
like at least 1 or more items after doing
107

107

00:10:05.320  -->  00:10:09.930
our calculations to determine the
quantity and if the quantity was 0 then
108

108

00:10:09.930  -->  00:10:15.190
we're going to remove it from the basket all together and even in that case we are going to still return quantity which
109

109

00:10:15.190  -->  00:10:19.490
was a quantity of that was originally
sent through to this method and if that all fails
110

110

00:10:19.490  -->  00:10:24.190
through and either the quantity
basically was less than zero we return 0
111

111

00:10:24.190  -->  00:10:31.450
or to be more precise if new quantity ends up being less than 0 alright so we basically
112

112

00:10:31.450  -->  00:10:35.290
getting to the stage now where we are going to be
ready to test the new functionality so
113

113

00:10:35.290  -->  00:10:40.140
what I'll do is I'm going to stop the video now
and in the next video will go back to our
114

114

00:10:40.140  -->  00:10:45.020
main method our main challenge method and will
start putting some code in their to check out
115

115

00:10:45.020  -->  00:10:48.870
or to test rather these changes that we
made in this video and the previous one so
116

116

00:10:49.640  -->  00:10:51.420
see you as always in the next video
