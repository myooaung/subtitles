WEBVTT
1
1

00:00:04.530  -->  00:00:07.130
ok as I mentioned I just want to go through a few
2

2

00:00:07.130  -->  00:00:09.960
other things to do with debugging the
3

3

00:00:09.960  -->  00:00:12.660
you probably find useful what I'm going
4

4

00:00:12.660  -->  00:00:15.710
to do is turn off this field or watch we
5

5

00:00:15.710  -->  00:00:17.450
don't need that anymore and i'm going to
6

6

00:00:17.450  -->  00:00:20.970
just stop the debugger for now and what
7

7

00:00:20.970  -->  00:00:23.820
we want to do is add a few more methods
8

8

00:00:23.820  -->  00:00:25.350
to the string utilities class i'm in the
9

9

00:00:25.350  -->  00:00:27.660
string utilities class and we're going
10

10

00:00:27.660  -->  00:00:30.180
to create another one...
11

11

00:00:30.180  -->  00:01:02.670
...
12

12

00:01:02.670  -->  00:01:08.070
....ok two very simple methods here
13

13

00:01:08.070  -->  00:01:10.610
let's get back to our main method to add
14

14

00:01:10.610  -->  00:01:13.770
a bit of code to actually run that so
15

15

00:01:13.770  -->  00:01:19.380
...
16

16

00:01:19.380  -->  00:01:36.180
....
17

17

00:01:36.180  -->  00:01:40.530
....alright so
18

18

00:01:40.530  -->  00:01:42.500
let's set a breakpoint in main on the
19

19

00:01:42.500  -->  00:01:43.950
line containing the call to upper
20

20

00:01:43.950  -->  00:01:45.500
prefix so this line here so set a
21

21

00:01:45.500  -->  00:01:51.860
breakpoint there we run the debugger and
22

22

00:01:51.860  -->  00:01:54.210
so far so good we can see here that the
23

23

00:01:54.210  -->  00:01:56.070
string value is what we expect
24

24

00:01:56.070  -->  00:01:59.150
abcdefg which is course the one that's
25

25

00:01:59.150  -->  00:02:02.520
been defined on line 30 but then we want
26

26

00:02:02.520  -->  00:02:04.100
to see what's happening inside the upper
27

27

00:02:04.100  -->  00:02:06.210
and prefix method I'm going to press the
28

28

00:02:06.210  -->  00:02:09.090
step into button over here so click on
29

29

00:02:09.090  -->  00:02:12.840
step into but instead of stepping into
30

30

00:02:12.840  -->  00:02:15.780
the upper and prefix method the debugger
31

31

00:02:15.780  -->  00:02:18.060
steps into the ad suffix method
32

32

00:02:18.060  -->  00:02:19.860
that's because it's called first on the
33

33

00:02:19.860  -->  00:02:22.860
line back in the main method we can have
34

34

00:02:22.860  -->  00:02:25.720
a look there and see
35

35

00:02:25.720  -->  00:02:29.860
I'm gonna go back to where we where we
36

36

00:02:29.860  -->  00:02:32.800
currently pause here and this trivial
37

37

00:02:32.800  -->  00:02:34.990
example it doesn't matter but if you
38

38

00:02:34.990  -->  00:02:36.190
think that we had a line of code that
39

39

00:02:36.190  -->  00:02:39.100
contains calls to 4 or 5 methods so imagine a
40

40

00:02:39.100  -->  00:02:41.230
long string chain for example and we're
41

41

00:02:41.230  -->  00:02:43.240
interested in only that last method it
42

42

00:02:43.240  -->  00:02:44.830
can get rather tedious to step inside
43

43

00:02:44.830  -->  00:02:47.710
and out of all the methods and worse if
44

44

00:02:47.710  -->  00:02:48.790
we accidentally hit the wrong button
45

45

00:02:48.790  -->  00:02:50.680
like step over we then would have to
46

46

00:02:50.680  -->  00:02:53.410
start the debugger again let's stop the
47

47

00:02:53.410  -->  00:02:55.240
debugger and run it again going to stop it
48

48

00:02:55.240  -->  00:03:01.300
run it again so the application
49

49

00:03:01.300  -->  00:03:02.830
is suspended on the upper and prefix
50

50

00:03:02.830  -->  00:03:04.990
statement again but this time instead of
51

51

00:03:04.990  -->  00:03:06.970
pressing step into we're going to use
52

52

00:03:06.970  -->  00:03:09.220
what something is called Smart step into
53

53

00:03:09.220  -->  00:03:11.650
this is actually feature of the IntelliJ
54

54

00:03:11.650  -->  00:03:13.750
debugger other debuggers may not actually
55

55

00:03:13.750  -->  00:03:15.970
have this feature now there are two ways
56

56

00:03:15.970  -->  00:03:18.070
we can actually tell intelliJ which
57

57

00:03:18.070  -->  00:03:20.350
method we want to step into so if you
58

58

00:03:20.350  -->  00:03:22.510
actually press press the shift f seven
59

59

00:03:22.510  -->  00:03:24.250
will bring up a dialog and you can
60

60

00:03:24.250  -->  00:03:25.660
select which method we want to step into
61

61

00:03:25.660  -->  00:03:29.320
we can also go into the run menu click
62

62

00:03:29.320  -->  00:03:31.300
on this smart step into you can see
63

63

00:03:31.300  -->  00:03:32.920
that's shift f7 on a mac as
64

64

00:03:32.920  -->  00:03:36.010
well click on that we get this little
65

65

00:03:36.010  -->  00:03:38.760
option showing so either with the
66

66

00:03:38.760  -->  00:03:40.780
shortcut on the keyboard shortcut or
67

67

00:03:40.780  -->  00:03:42.190
selecting the option for the run menu
68

68

00:03:42.190  -->  00:03:43.810
you get the same option here which
69

69

00:03:43.810  -->  00:03:46.510
method to step into so now we can
70

70

00:03:46.510  -->  00:03:48.280
actually select the upper and prefix
71

71

00:03:48.280  -->  00:03:50.950
once we do that you can see without
72

72

00:03:50.950  -->  00:03:52.930
doing anything else it's actually now
73

73

00:03:52.930  -->  00:03:55.480
executed the code in the ad suffix and
74

74

00:03:55.480  -->  00:03:57.040
move to the upper and prefix which is
75

75

00:03:57.040  -->  00:03:59.260
where we actually wanted to check what
76

76

00:03:59.260  -->  00:04:00.190
was going on
77

77

00:04:00.190  -->  00:04:02.760
the point here is that the debugger just won't
78

78

00:04:02.760  -->  00:04:05.790
suspend the application inside it now
79

79

00:04:05.790  -->  00:04:07.420
of course the ad suffix method will
80

80

00:04:07.420  -->  00:04:09.670
execute first and did execute but in
81

81

00:04:09.670  -->  00:04:11.170
this case because we're using this smart
82

82

00:04:11.170  -->  00:04:13.630
step into the debugger just didn't
83

83

00:04:13.630  -->  00:04:15.220
suspend the application at that point
84

84

00:04:15.220  -->  00:04:18.010
now another thing we can actually do is
85

85

00:04:18.010  -->  00:04:21.370
set variable values on the fly so let's
86

86

00:04:21.370  -->  00:04:23.140
just say that we found our bug and it's
87

87

00:04:23.140  -->  00:04:25.660
due to a value being wrong now we can set
88

88

00:04:25.660  -->  00:04:27.970
the value to what we expect to see if
89

89

00:04:27.970  -->  00:04:30.160
the rest of the code executed correctly
90

90

00:04:30.160  -->  00:04:31.930
let's try this out we're going to stop
91

91

00:04:31.930  -->  00:04:36.840
here we're gonna go back to the the add
92

92

00:04:36.840  -->  00:04:38.710
char method we're going to actually set
93

93

00:04:38.710  -->  00:04:39.130
a break
94

94

00:04:39.130  -->  00:04:42.190
point on line 12 where it's actually
95

95

00:04:42.190  -->  00:04:44.900
updating the the chars added variable
96

96

00:04:44.900  -->  00:04:50.270
and lets actually run this when i say run I mean
97

97

00:04:50.270  -->  00:04:51.740
debug so we actually stopped there on
98

98

00:04:51.740  -->  00:04:52.430
that line
99

99

00:04:52.430  -->  00:04:54.490
let's resume the program a couple of
100

100

00:04:54.490  -->  00:04:56.120
times just so the value the variable
101

101

00:04:56.120  -->  00:04:58.520
gets updated and see that's one and now
102

102

00:04:58.520  -->  00:04:59.440
it's 2
103

103

00:04:59.440  -->  00:05:00.940
let's just say that we want to change
104

104

00:05:00.940  -->  00:05:05.020
the value of this variable while we are running so
105

105

00:05:05.020  -->  00:05:06.050
theirs couple of ways we can do this we
106

106

00:05:06.050  -->  00:05:08.590
can actually right click over here from
107

107

00:05:08.590  -->  00:05:11.120
chars added and set value and set the
108

108

00:05:11.120  -->  00:05:14.300
value to 5 press ENTER and see that is
109

109

00:05:14.300  -->  00:05:17.360
updated here to 5 and 5 and obviously five
110

110

00:05:17.360  -->  00:05:18.400
down here
111

111

00:05:18.400  -->  00:05:20.710
alternatively we can open up here and
112

112

00:05:20.710  -->  00:05:21.460
list the
113

113

00:05:21.460  -->  00:05:22.750
variables here we can actually do
114

114

00:05:22.750  -->  00:05:23.930
the same thing we can actually set
115

115

00:05:23.930  -->  00:05:25.780
value within there and there's
116

116

00:05:25.780  -->  00:05:27.340
the keyboard shortcut over there to the
117

117

00:05:27.340  -->  00:05:30.400
right and we can even change the s
118

118

00:05:30.400  -->  00:05:32.330
variable as well
119

119

00:05:32.330  -->  00:05:33.800
down here under the sbuilder i can
120

120

00:05:33.800  -->  00:05:36.190
actually click on that click into value
121

121

00:05:36.190  -->  00:05:38.410
if I wanted to come down here and click
122

122

00:05:38.410  -->  00:05:41.470
on say this second char right-click that
123

123

00:05:41.470  -->  00:05:44.210
set value you have to enter it in the
124

124

00:05:44.210  -->  00:05:45.740
similar things i could put a single
125

125

00:05:45.740  -->  00:05:49.580
....noting
126

126

00:05:49.580  -->  00:05:50.990
that is added the 98 for it
127

127

00:05:50.990  -->  00:05:52.840
automatically which is the ascii
128

128

00:05:52.840  -->  00:05:55.580
equivalent of a lowercase B the point is
129

129

00:05:55.580  -->  00:05:56.890
that we can actually change these values
130

130

00:05:56.890  -->  00:05:59.530
on the fly without actually restarting our
131

131

00:05:59.530  -->  00:06:01.490
program so we can test different things
132

132

00:06:01.490  -->  00:06:02.960
based on the value that's seriously
133

133

00:06:02.960  -->  00:06:04.330
pretty cool I think to be able to do that
134

134

00:06:04.330  -->  00:06:06.640
and obviously now we come back and click
135

135

00:06:06.640  -->  00:06:10.030
on resume again you can see the values
136

136

00:06:10.030  -->  00:06:12.310
are still going up and the changes that
137

137

00:06:12.310  -->  00:06:14.770
we made here are still being used so the
138

138

00:06:14.770  -->  00:06:16.580
char is added the count is started from the
139

139

00:06:16.580  -->  00:06:18.740
last value until six and seven and
140

140

00:06:18.740  -->  00:06:20.650
obviously the rest of the chars are
141

141

00:06:20.650  -->  00:06:22.900
being added to the char array without
142

142

00:06:22.900  -->  00:06:24.620
affecting the change that we actually
143

143

00:06:24.620  -->  00:06:28.000
made which is a pretty cool now one
144

144

00:06:28.000  -->  00:06:30.560
last thing that I want to cover is i
145

145

00:06:30.560  -->  00:06:32.440
mentioned earlier that we need the source
146

146

00:06:32.440  -->  00:06:35.440
code to debug a method if we're using a
147

147

00:06:35.440  -->  00:06:37.630
third-party library then we need to tell
148

148

00:06:37.630  -->  00:06:40.150
IntelliJ where it can find the source now we are
149

149

00:06:40.150  -->  00:06:41.410
not actually going to use a third-party
150

150

00:06:41.410  -->  00:06:43.690
library but let's download a library and
151

151

00:06:43.690  -->  00:06:45.050
its source so you can see how to
152

152

00:06:45.050  -->  00:06:46.930
associate the source code with the
153

153

00:06:46.930  -->  00:06:49.630
library so I'm going to get a link here
154

154

00:06:49.630  -->  00:06:52.490
and open a browser
155

155

00:06:52.490  -->  00:06:56.930
paste it in and its in the resources
156

156

00:06:56.930  -->  00:06:59.330
section of this video we're going to do
157

157

00:06:59.330  -->  00:07:00.680
is just go down to the bottom of this
158

158

00:07:00.680  -->  00:07:04.660
package and we're going to download
159

159

00:07:04.660  -->  00:07:11.440
both the binary i'm going to save that my
160

160

00:07:11.440  -->  00:07:14.030
desktop and going to download
161

161

00:07:14.030  -->  00:07:20.240
the sources same thing save their only
162

162

00:07:20.240  -->  00:07:21.620
small file so it shouldn't take too long
163

163

00:07:21.620  -->  00:07:22.610
at all
164

164

00:07:22.610  -->  00:07:26.330
let's go back to intelliJ now what you
165

165

00:07:26.330  -->  00:07:27.560
want to do I'll just close the window down
166

166

00:07:27.560  -->  00:07:30.830
disconnect the debugger and what we want
167

167

00:07:30.830  -->  00:07:32.500
to do now is come over here to click on
168

168

00:07:32.500  -->  00:07:37.090
file and select project structure wanna
169

169

00:07:37.090  -->  00:07:39.710
come to libraries and want to click on
170

170

00:07:39.710  -->  00:07:43.940
the + select java want to navigate to
171

171

00:07:43.940  -->  00:07:46.490
the folder that contains that file
172

172

00:07:46.490  -->  00:07:49.370
the two libraries we have downloaded and
173

173

00:07:49.370  -->  00:07:51.220
go to my home folder is going to be in my
174

174

00:07:51.220  -->  00:07:53.440
desktop so the first one we want to add
175

175

00:07:53.440  -->  00:07:55.190
here is the j transforms the width
176

176

00:07:55.190  -->  00:07:57.050
dependencies one so we click on that first
177

177

00:07:57.050  -->  00:08:00.320
then click on OK to say yes that's ok
178

178

00:08:00.320  -->  00:08:01.690
that's going to be added to this current
179

179

00:08:01.690  -->  00:08:05.090
project to this module so that's added
180

180

00:08:05.090  -->  00:08:06.190
the first one now we're going to add the
181

181

00:08:06.190  -->  00:08:08.840
source code to that library so what I'm
182

182

00:08:08.840  -->  00:08:10.130
going to do here is make sure that we
183

183

00:08:10.130  -->  00:08:12.800
use this little plus button here and if
184

184

00:08:12.800  -->  00:08:13.900
your on a windows machine the plus
185

185

00:08:13.900  -->  00:08:16.430
maybe here but the point is we want to make
186

186

00:08:16.430  -->  00:08:18.400
sure that the actual library selected to
187

187

00:08:18.400  -->  00:08:19.880
so I click OK to close it down
188

188

00:08:19.880  -->  00:08:23.210
then click on file project structure
189

189

00:08:23.210  -->  00:08:25.940
again click on library if it was not selected
190

190

00:08:25.940  -->  00:08:29.030
already then select on the actual library if
191

191

00:08:29.030  -->  00:08:30.830
you've got more than one don't click this
192

192

00:08:30.830  -->  00:08:31.880
button again we want to click this
193

193

00:08:31.880  -->  00:08:33.910
button here to associate to this
194

194

00:08:33.910  -->  00:08:35.770
existing library but again that button
195

195

00:08:35.770  -->  00:08:37.030
maybe at the top depending on your
196

196

00:08:37.030  -->  00:08:40.150
operating system and click on that and
197

197

00:08:40.150  -->  00:08:41.510
saying select file directions in which
198

198

00:08:41.510  -->  00:08:43.430
library classes sources documentation
199

199

00:08:43.430  -->  00:08:45.280
etc located but we want to
200

200

00:08:45.280  -->  00:08:47.200
select the sources this time click on
201

201

00:08:47.200  -->  00:08:49.070
that click ok
202

202

00:08:49.070  -->  00:08:50.690
and notice now when it's done here
203

203

00:08:50.690  -->  00:08:52.760
it's actually put the classes and
204

204

00:08:52.760  -->  00:08:54.920
also listed the sources there as well so
205

205

00:08:54.920  -->  00:08:57.410
we now associated the source code
206

206

00:08:57.410  -->  00:08:59.750
for a particular library with the actual
207

207

00:08:59.750  -->  00:09:02.320
library itself the actual class files
208

208

00:09:02.320  -->  00:09:04.930
now having said that
209

209

00:09:04.930  -->  00:09:07.510
the j transforms classes don't actually
210

210

00:09:07.510  -->  00:09:09.850
contain debug information so therefore
211

211

00:09:09.850  -->  00:09:11.580
even though we have the source we
212

212

00:09:11.580  -->  00:09:12.580
wouldn't be able to see much in the
213

213

00:09:12.580  -->  00:09:14.170
debugger it does really depend on the
214

214

00:09:14.170  -->  00:09:16.420
library but i'm just using this as an
215

215

00:09:16.420  -->  00:09:18.100
example to show you how to associate
216

216

00:09:18.100  -->  00:09:20.290
source with a third-party library
217

217

00:09:20.290  -->  00:09:22.140
because lots of libraries do have that
218

218

00:09:22.140  -->  00:09:24.390
debug information and this is just a
219

219

00:09:24.390  -->  00:09:25.600
great way that you can get the source
220

220

00:09:25.600  -->  00:09:26.770
code and you can then start debugging
221

221

00:09:26.770  -->  00:09:29.380
and stepping through source code for a
222

222

00:09:29.380  -->  00:09:31.630
particular library that you're using keep in
223

223

00:09:31.630  -->  00:09:32.860
mind that if you don't have the source
224

224

00:09:32.860  -->  00:09:35.200
code then usually the debugger can show
225

225

00:09:35.200  -->  00:09:37.300
us the method declarations because it
226

226

00:09:37.300  -->  00:09:38.700
can figure those out from the java
227

227

00:09:38.700  -->  00:09:41.290
binary file but that's all It can show us we
228

228

00:09:41.290  -->  00:09:42.790
won't be able to see individual lines of
229

229

00:09:42.790  -->  00:09:44.860
code unless you actually got that source
230

230

00:09:44.860  -->  00:09:48.790
code so that's it for using
231

231

00:09:48.790  -->  00:09:51.190
the IntelliJ debugger now other java
232

232

00:09:51.190  -->  00:09:53.560
IDs also have debuggers the concepts are
233

233

00:09:53.560  -->  00:09:55.890
the same but how you use the features
234

234

00:09:55.890  -->  00:09:57.760
such as setting breakpoints and watch
235

235

00:09:57.760  -->  00:09:59.980
points may be different but for now
236

236

00:09:59.980  -->  00:10:01.660
you've got a solid basis to start with
237

237

00:10:01.660  -->  00:10:02.800
and you should be able to use any
238

238

00:10:02.800  -->  00:10:05.140
debugger to debug your applications now
239

239

00:10:05.140  -->  00:10:06.520
you know the basics and what to look out
240

240

00:10:06.520  -->  00:10:07.180
for
241

241

00:10:07.180  -->  00:10:08.580
alright so that's that that's the
242

242

00:10:08.580  -->  00:10:10.060
debugging finished in the next video we're
243

243

00:10:10.060  -->  00:10:11.860
going to start looking at j unit testing
244

244

00:10:11.860  -->  00:10:18.360
so we'll see you in the next video
