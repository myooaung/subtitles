0
1
00:00:05,500 --> 00:00:09,290
In the previous video we finished
off our encapsulation challenge,
1

2
00:00:09,290 --> 00:00:11,580
let's make a start at one polymorphism.
2

3
00:00:11,580 --> 00:00:14,440
So I'm gonna go through and
give you an overview of what it is and
3

4
00:00:14,440 --> 00:00:15,940
show you how it works.
4

5
00:00:15,940 --> 00:00:18,000
And then in the video following this one,
5

6
00:00:18,000 --> 00:00:20,420
we're going to give you a challenge for
it.
6

7
00:00:20,420 --> 00:00:23,720
Now, incidentally,
this is take two of my polymorphism video.
7

8
00:00:23,720 --> 00:00:27,100
You can see at the top of the screen
there it says polymorphism two.
8

9
00:00:27,100 --> 00:00:30,380
And that's because I recorded
the entire lecture and
9

10
00:00:30,380 --> 00:00:34,680
went to edit the video and
found the sound was corrupted.
10

11
00:00:34,680 --> 00:00:36,550
Very frustrating having to do it twice.
11

12
00:00:36,550 --> 00:00:37,910
So anyway.
Let's get started.
12

13
00:00:37,910 --> 00:00:42,810
So, polymorphism is really the method or
the mechanism in object oriented
13

14
00:00:42,810 --> 00:00:47,480
programming, that allows actions to
act differently based on the actual
14

15
00:00:47,480 --> 00:00:52,250
object that the object, or sorry,
that the action is being performed on.
15

16
00:00:52,250 --> 00:00:55,760
Now that probably doesn't make a lot
of sense, so the easiest way is,
16

17
00:00:55,760 --> 00:01:00,050
as is the case with a lot of programming
things, is to show you an example.
17

18
00:01:00,050 --> 00:01:03,670
So what I'm going to do to
actually demonstrate polymorphism.
18

19
00:01:03,670 --> 00:01:06,250
You need to create a number of classes.
19

20
00:01:06,250 --> 00:01:09,350
And what I'm going to do is
I'm gonna create the classes.
20

21
00:01:09,350 --> 00:01:16,110
All within this main public class that, or
this main.java source file I should say.
21

22
00:01:16,110 --> 00:01:20,480
Which is another way of creating
classes that aren't going to be reused.
22

23
00:01:20,480 --> 00:01:25,720
The advantage of doing this,
it's really only useful to create classes,
23

24
00:01:25,720 --> 00:01:31,000
usually, in the same Java source files
if they are quite small and compact.
24

25
00:01:31,000 --> 00:01:33,740
If you start creating big classes and.
25

26
00:01:33,740 --> 00:01:36,580
Here, you've got moddable
classes in a single Java file,
26

27
00:01:36,580 --> 00:01:38,860
you can find it gets quite confusing.
27

28
00:01:38,860 --> 00:01:42,420
And bear in mind also,
that when you're creating these classes,
28

29
00:01:42,420 --> 00:01:46,150
they're usually are actual,
depending on the modifiers you're using,
29

30
00:01:46,150 --> 00:01:50,590
they may or may not be accessible
outside of the package.
30

31
00:01:50,590 --> 00:01:54,300
So, we'll talk more about scope in
a future video but suffice to say now
31

32
00:01:54,300 --> 00:01:58,300
that the reason that I'm doing this is, is
just to save a bit of time in the videos.
32

33
00:01:58,300 --> 00:02:02,420
So what we're going to do is we're gonna
create a basic class called movie, and
33

34
00:02:02,420 --> 00:02:05,860
then we're gonna create a number of
classes that relate to a specific
34

35
00:02:05,860 --> 00:02:07,300
movie that's coming out of the pass.
35

36
00:02:07,300 --> 00:02:08,420
I'm just gonna inherit from that.
36

37
00:02:08,420 --> 00:02:11,470
I'm gonna show you how polymorphism works.
37

38
00:02:11,470 --> 00:02:17,380
So, firstly, I've got this main.java
created, which is our standard template.
38

39
00:02:17,380 --> 00:02:24,730
I'm gonna create a new class, class movie,
and it's going to have one field.
39

40
00:02:24,730 --> 00:02:27,820
We're gonna have a private
string which is going to be
40

41
00:02:30,340 --> 00:02:32,860
the name of the movie,
we're going to have a constructor and
41

42
00:02:34,790 --> 00:02:39,420
it's purpose is just to set the value for
our field.
42

43
00:02:39,420 --> 00:02:42,600
We're also going to
have another method and
43

44
00:02:42,600 --> 00:02:48,440
that method is going to be called plot and
that's going to be plot on a film itself,
44

45
00:02:48,440 --> 00:02:52,090
in other words a synopsis
of what the movie is about.
45

46
00:02:52,090 --> 00:02:55,780
So public string plot is the method name,
as you can see there.
46

47
00:02:55,780 --> 00:03:02,910
And the default string I'm going to
return is going to be no plot here.
47

48
00:03:02,910 --> 00:03:06,560
And that will make sense shortly
48

49
00:03:06,560 --> 00:03:08,880
when we start creating some
of these other classes.
49

50
00:03:08,880 --> 00:03:10,630
So, let's have base class.
50

51
00:03:10,630 --> 00:03:13,120
And we're gonna create five
additional classes now.
51

52
00:03:13,120 --> 00:03:19,880
And they're all going to inherit
from this base movie class,
52

53
00:03:19,880 --> 00:03:25,090
first one, Class Jaws,
[NOISE] extends Movie.
53

54
00:03:25,090 --> 00:03:27,720
I'm not sure if you've seen it,
but Jaws was a classic movie.
54

55
00:03:27,720 --> 00:03:29,630
For you to create a constructor for that,
55

56
00:03:29,630 --> 00:03:33,100
we're gonna do constructors in a slightly
different way for these sub classes.
56

57
00:03:33,100 --> 00:03:38,160
We're going to do a public Jaws.
57

58
00:03:38,160 --> 00:03:43,860
We're gonna put super Jaws so
I'm going to initialize that.
58

59
00:03:43,860 --> 00:03:46,530
And you can see that using inheritance,
59

60
00:03:46,530 --> 00:03:50,950
we're actually initializing
the name field from the base class.
60

61
00:03:50,950 --> 00:03:54,190
Which is in this case is the movie class.
61

62
00:03:54,190 --> 00:03:56,370
So that's our constructor,
pretty straightforward.
62

63
00:03:56,370 --> 00:03:59,990
But we're also gonna create
a method called plot.
63

64
00:03:59,990 --> 00:04:03,180
It's gonna have exactly the same
parameters and return type,
64

65
00:04:03,180 --> 00:04:05,950
in other words no parameters and
the same return type,
65

66
00:04:05,950 --> 00:04:09,160
which is string as the base movie
class we're gonna call plot.
66

67
00:04:10,280 --> 00:04:16,520
We're actually gonna now return the plot
of Jaws, shark eats lots of people.
67

68
00:04:21,200 --> 00:04:24,310
I'm sure there's more to it than that,
but that's a little summary.
68

69
00:04:24,310 --> 00:04:29,310
Okay, so let's have jaws class and notice
how the method is exactly the same as
69

70
00:04:29,310 --> 00:04:33,750
the method that's in movie,
so we're overriding that.
70

71
00:04:33,750 --> 00:04:36,950
So, probably what I should have done
more correctly is use the override but
71

72
00:04:36,950 --> 00:04:40,250
either way the same process applies,
method has been overwritten.
72

73
00:04:40,250 --> 00:04:42,830
The next one we're gonna
create is Independence Day.
73

74
00:04:42,830 --> 00:04:43,890
Another one of the movies that I like.
74

75
00:04:47,380 --> 00:04:50,880
And then also extends Movie.
75

76
00:04:50,880 --> 00:04:52,670
We're gonna have a public constructor.
76

77
00:04:52,670 --> 00:04:56,190
Incidentally, if we uses
the automatic constructor creation.
77

78
00:04:57,550 --> 00:05:00,680
Actually gets it a little bit wrong,
cuz it assumes that we want to initialize
78

79
00:05:00,680 --> 00:05:04,930
the class using a parameter, but we don't
actually wanna do that in this case, so
79

80
00:05:04,930 --> 00:05:08,260
we're gonna actually delete that and
just type it in there.
80

81
00:05:08,260 --> 00:05:13,290
For our polymorphism example,
it makes more sense to do it this way.
81

82
00:05:13,290 --> 00:05:16,190
Independence Day, and
what I was saying was, we can override it.
82

83
00:05:16,190 --> 00:05:20,370
We could also use override method,
which is the same as typing it manually.
83

84
00:05:20,370 --> 00:05:23,980
And you can see there it's got the two,
the construct that we can override but
84

85
00:05:23,980 --> 00:05:27,760
it's also it's got the method plot we
can override, so I'm gonna select that,
85

86
00:05:27,760 --> 00:05:28,450
press enter.
86

87
00:05:29,600 --> 00:05:32,420
But I'm not gonna use the super,
I'm just gonna do a return.
87

88
00:05:35,090 --> 00:05:40,330
Aliens attempt to take over planet earth.
88

89
00:05:44,550 --> 00:05:45,390
And I spell that wrong.
89

90
00:05:47,410 --> 00:05:49,480
Independence Day.
90

91
00:05:49,480 --> 00:05:50,380
That's right.
91

92
00:05:50,380 --> 00:05:52,290
Okay.
So we've got a few more to create.
92

93
00:05:52,290 --> 00:05:57,170
So, let's create another one now for
Maze Runner,
93

94
00:05:57,170 --> 00:06:01,730
another movie that I liked
[SOUND] extends movie.
94

95
00:06:01,730 --> 00:06:02,870
And let's make a bit of space, so
95

96
00:06:02,870 --> 00:06:04,830
we can see this with all these
extra messages popping up.
96

97
00:06:05,950 --> 00:06:08,240
Same deal with the constructor.
97

98
00:06:08,240 --> 00:06:09,140
I'll just change that.
98

99
00:06:16,580 --> 00:06:20,820
Like so, and override the method.
99

100
00:06:20,820 --> 00:06:25,070
The plot and
100

101
00:06:25,070 --> 00:06:28,900
we'll put
101

102
00:06:28,900 --> 00:06:34,430
escape a maze.
102

103
00:06:34,430 --> 00:06:40,120
Okay, let's create another one that's
stored in my memory as a child, Star Wars.
103

104
00:06:40,120 --> 00:06:42,100
This, you can tell I'm a bit of a geek.
104

105
00:06:42,100 --> 00:06:44,180
Star Wars extends movie.
105

106
00:06:49,720 --> 00:06:55,800
Same deal with that construct and
we call it Star Wars.
106

107
00:06:58,640 --> 00:07:02,520
Just capitalize that and
107

108
00:07:02,520 --> 00:07:07,510
over at the method, the plot and
108

109
00:07:07,510 --> 00:07:12,490
the plot's going to be imperial
109

110
00:07:12,490 --> 00:07:18,420
forces try to take over the universe.
110

111
00:07:21,090 --> 00:07:24,330
The last one we're gonna create
is a little bit different.
111

112
00:07:24,330 --> 00:07:28,200
We're gonna create a class called,
forgettable movie.
112

113
00:07:28,200 --> 00:07:33,070
So it's not actually a specific movie.
113

114
00:07:33,070 --> 00:07:34,950
It's still going to extend
from the movie though.
114

115
00:07:36,620 --> 00:07:38,590
Like so, same constructor
115

116
00:07:48,670 --> 00:07:54,480
Now, importantly, we're not going to
override the plot method for this one.
116

117
00:07:54,480 --> 00:07:58,720
This will make sense and actually show you
how polymorphism works by not doing that,
117

118
00:07:58,720 --> 00:08:00,890
so you'll see that later on in this video.
118

119
00:08:00,890 --> 00:08:01,490
So okay.
119

120
00:08:01,490 --> 00:08:03,030
We've now got a base class.
120

121
00:08:03,030 --> 00:08:05,730
Just looking back at and
reviewing what we've done.
121

122
00:08:05,730 --> 00:08:07,500
We've got our class movie.
122

123
00:08:07,500 --> 00:08:09,100
Which has got a field code name.
123

124
00:08:09,100 --> 00:08:12,540
We've got a constructor
that initializes that name.
124

125
00:08:12,540 --> 00:08:13,980
We've got a method called plot.
125

126
00:08:13,980 --> 00:08:17,600
Then we've got a title of
five classes that extend, or
126

127
00:08:17,600 --> 00:08:19,670
inherit, from that movie class.
127

128
00:08:19,670 --> 00:08:23,590
They all initialize via the constructor,
their own constructor,
128

129
00:08:23,590 --> 00:08:27,070
passing the parameter of
the name of the particular movie.
129

130
00:08:27,070 --> 00:08:30,740
And that gets obviously
saved in the base class, and
130

131
00:08:30,740 --> 00:08:36,290
most of the four of the five classes
have got their own plot method.
131

132
00:08:36,290 --> 00:08:38,670
Which gives what the plot is,
132

133
00:08:38,670 --> 00:08:42,160
a very brief summary of the plot for
each of those movies.
133

134
00:08:42,160 --> 00:08:45,940
Then we've also created a fifth
class called Forgetable, and
134

135
00:08:45,940 --> 00:08:50,630
it hasn't got the plot method, which we'll
understand why it hasn't got that shortly.
135

136
00:08:50,630 --> 00:08:54,600
So moving on, what we want to do
now is we want to create a method,
136

137
00:08:54,600 --> 00:09:00,710
a static method because it's part of this
main.java and not a separate class and
137

138
00:09:00,710 --> 00:09:05,010
the purpose of this method will
be to return a random movie.
138

139
00:09:05,010 --> 00:09:08,220
So it's going to return one of those
five classes, one of those five movies,
139

140
00:09:08,220 --> 00:09:12,180
and you'll see why we're doing that
shortly, so let's create that method.
140

141
00:09:12,180 --> 00:09:15,660
Now we're gonna do that
with public static.
141

142
00:09:16,690 --> 00:09:21,570
Actually, what I'll do is,
we need to actually put it into the class,
142

143
00:09:21,570 --> 00:09:23,450
so I'm gonna actually delete
that to make a bit of space,
143

144
00:09:24,940 --> 00:09:26,200
then make a bit of space up here.
144

145
00:09:27,830 --> 00:09:29,640
So, we need to go and create this method.
145

146
00:09:29,640 --> 00:09:32,810
The method is going to be
part of the main class.
146

147
00:09:32,810 --> 00:09:36,190
And it's going to be public static.
147

148
00:09:36,190 --> 00:09:38,210
We're going to return Movie.
148

149
00:09:38,210 --> 00:09:40,190
So, our return type is
gonna be the object Movie.
149

150
00:09:40,190 --> 00:09:42,520
And we're gonna call this randomMovie.
150

151
00:09:45,030 --> 00:09:48,500
So, its purpose is to
return a random movie.
151

152
00:09:48,500 --> 00:09:50,750
In other words, one of those five movies.
152

153
00:09:50,750 --> 00:09:53,000
So, in order to able to
return a random movie.
153

154
00:09:53,000 --> 00:09:55,620
We need to generate a random number.
154

155
00:09:55,620 --> 00:09:58,290
So that each time that
this method is called,
155

156
00:09:58,290 --> 00:09:59,980
obviously a random movie is selected.
156

157
00:09:59,980 --> 00:10:01,110
So how do we do that?
157

158
00:10:01,110 --> 00:10:03,390
We use a math function.
158

159
00:10:03,390 --> 00:10:07,170
That comes with Java, right which
will generate a random number for us.
159

160
00:10:07,170 --> 00:10:12,930
So, we're gonna type,
int Random number equals.
160

161
00:10:12,930 --> 00:10:15,900
And we need to cast it to int,
you'll see why shortly.
161

162
00:10:15,900 --> 00:10:19,240
Int, then we need to meth.
162

163
00:10:19,240 --> 00:10:21,000
Capital M, math.random.
163

164
00:10:21,000 --> 00:10:24,390
And you can see there that by default,
this method,
164

165
00:10:24,390 --> 00:10:27,000
you can see on the right hand side there,
it returns a double.
165

166
00:10:27,000 --> 00:10:29,830
That's why we're doing a cast of
int because we want to convert this
166

167
00:10:29,830 --> 00:10:30,760
to an integer.
167

168
00:10:30,760 --> 00:10:34,900
So, by default, which you'll see,
I'll take you into that method shortly,
168

169
00:10:34,900 --> 00:10:39,190
this will return a random number,
a double between 0 and 1.
169

170
00:10:40,260 --> 00:10:43,130
So, what we're then doing is we're
converting that to an integer,
170

171
00:10:43,130 --> 00:10:45,450
and then we're multiplying it,
in this case, by 5.
171

172
00:10:45,450 --> 00:10:50,490
So, by doing that, that's going to return
a random number in the range 0 to 4.
172

173
00:10:50,490 --> 00:10:52,080
And what we're gonna do
then is add 1 to that.
173

174
00:10:52,080 --> 00:10:56,630
So in other words we're going to
return a number between 1 and 5.
174

175
00:10:56,630 --> 00:10:59,830
So if we just go into that message and
have a look, we can click into there,
175

176
00:10:59,830 --> 00:11:02,890
and you can see that this is
a method pseudo number generator,
176

177
00:11:02,890 --> 00:11:06,300
and it returns the number greater than or
equal to 0 and less than 1.
177

178
00:11:06,300 --> 00:11:10,430
So what we're doing is,
we're casting that as a integer as I said,
178

179
00:11:10,430 --> 00:11:13,080
returning whatever the number is and
multiplying the answer by 5.
179

180
00:11:13,080 --> 00:11:17,220
And that will give us an integer,
in this case, between 0 and
180

181
00:11:17,220 --> 00:11:20,800
4 and then we're adding 1 to that answer.
181

182
00:11:20,800 --> 00:11:22,550
And that's so
it will make more sense shortly,
182

183
00:11:22,550 --> 00:11:25,810
while we're doing that it just makes our
current a little bit easier to read.
183

184
00:11:25,810 --> 00:11:27,940
And then what we need to do is
well actually what we'll do first
184

185
00:11:27,940 --> 00:11:29,430
is we'll print out what the number was.
185

186
00:11:29,430 --> 00:11:34,890
What random number
186

187
00:11:34,890 --> 00:11:40,690
generated was plus random number.
187

188
00:11:40,690 --> 00:11:42,780
So we'll know what the number is,
so we can actually check that and
188

189
00:11:42,780 --> 00:11:44,500
see that on the screen.
189

190
00:11:44,500 --> 00:11:48,760
So next what we're going to do is we need
to do it using the switch statement.
190

191
00:11:48,760 --> 00:11:52,180
We're going to actually create
one of these movie classes.
191

192
00:11:52,180 --> 00:11:57,480
So, I'm gonna do switch (randomNumber).
192

193
00:11:57,480 --> 00:12:01,260
Then I've got case 1, so
if the random number generator was 1,
193

194
00:12:01,260 --> 00:12:06,940
we wanna return a new, and
of course, the first one was Jaws.
194

195
00:12:06,940 --> 00:12:08,180
So we're gonna return Jaws.
195

196
00:12:08,180 --> 00:12:10,670
Case two.
196

197
00:12:10,670 --> 00:12:13,880
Return new.
197

198
00:12:13,880 --> 00:12:16,140
The second one that we
created was Independence Day.
198

199
00:12:16,140 --> 00:12:19,330
And you notice that I'm
not adding a break there.
199

200
00:12:19,330 --> 00:12:20,230
The reason that I don't need
200

201
00:12:20,230 --> 00:12:22,740
to add a break is that we've got
a return in there as the first line.
201

202
00:12:22,740 --> 00:12:25,410
So it would be redundant to actually
go back here and put a break in there.
202

203
00:12:27,280 --> 00:12:28,320
Can put it in there if you wanted to but
203

204
00:12:28,320 --> 00:12:31,260
we actually are returning from this method
anyway, so there's no need to do that.
204

205
00:12:31,260 --> 00:12:32,880
Case three.
205

206
00:12:32,880 --> 00:12:39,670
Return new,
the third maybe was MazeRunner ().
206

207
00:12:39,670 --> 00:12:41,140
Case four.
207

208
00:12:41,140 --> 00:12:44,090
Return new StarWars().
208

209
00:12:46,390 --> 00:12:48,530
And lastly case five.
209

210
00:12:48,530 --> 00:12:52,820
We're going to return new Forgettable ();.
210

211
00:12:52,820 --> 00:12:53,540
Our forgettable movie.
211

212
00:12:53,540 --> 00:12:58,040
And then what we need to do
here is we put a return null.
212

213
00:12:58,040 --> 00:13:02,510
And the reason we need to do that
is technically as far as the switch
213

214
00:13:02,510 --> 00:13:07,150
statements were concerned,
we tested for the numbers 1 through 5.
214

215
00:13:07,150 --> 00:13:09,790
But as far as it was concerned
it could have other values.
215

216
00:13:09,790 --> 00:13:13,510
So we could have actually put another
default in here to processe based on that.
216

217
00:13:13,510 --> 00:13:14,900
So in other words we're gotta put default.
217

218
00:13:17,900 --> 00:13:18,550
Return null.
218

219
00:13:19,910 --> 00:13:23,860
Which then makes this return null down
here void or we can just leave that out.
219

220
00:13:25,260 --> 00:13:29,040
Either way, we need to actually handle the
fact that it could be outside that range.
220

221
00:13:29,040 --> 00:13:31,920
But the way we've defined random
number that shouldn't happen anyway.
221

222
00:13:31,920 --> 00:13:35,610
So what it's doing now as you can see,
depending on the number, whether it's 1,
222

223
00:13:35,610 --> 00:13:36,930
2, 3, 4,or 5.
223

224
00:13:36,930 --> 00:13:40,310
We're gonna return one
of those Movie classes.
224

225
00:13:40,310 --> 00:13:44,220
So each time we call this
random movie method now,
225

226
00:13:44,220 --> 00:13:46,760
we should actually get
a random movie returned to us.
226

227
00:13:46,760 --> 00:13:50,200
Just take a look at the fact that
we're actually returning the movies or
227

228
00:13:50,200 --> 00:13:52,100
we're returning a base class.
228

229
00:13:52,100 --> 00:13:53,980
The super class in this case,
229

230
00:13:53,980 --> 00:13:58,500
Movie, because of course all these
classes actually inherit from Movie.
230

231
00:13:58,500 --> 00:14:01,920
And that's why we can use that once
to apply to all these classes.
231

232
00:14:01,920 --> 00:14:06,870
Because of course the way inheritance
works we can use that is a relationship.
232

233
00:14:06,870 --> 00:14:08,580
We can say that Jaws is a movie.
233

234
00:14:08,580 --> 00:14:10,210
Independence day is a movie.
234

235
00:14:10,210 --> 00:14:14,090
Maze runner is a movie and so on,
that's the basic concept of inheritance.
235

236
00:14:14,090 --> 00:14:17,240
But let's now have a look
at the polymorphism aspect.
236

237
00:14:17,240 --> 00:14:21,070
So what we're going to do now is we're
going to go back to our main method up
237

238
00:14:21,070 --> 00:14:25,530
here and we're going to create a for loop
that actually goes through a number of
238

239
00:14:25,530 --> 00:14:30,770
times retrieving a random movie and then
actually start using that polymorphism.
239

240
00:14:30,770 --> 00:14:34,670
To actually call the relevant
plot method for that class,
240

241
00:14:34,670 --> 00:14:37,940
so the way we do that is we create a for
loop first.
241

242
00:14:37,940 --> 00:14:43,090
We're going to put for int = 1,
int < 11, i++ so we're
242

243
00:14:43,090 --> 00:14:48,560
going to cycle through a total of ten
times and I need to put a variable there.
243

244
00:14:50,160 --> 00:14:52,680
So to call the method,
we're gonna create a variable.
244

245
00:14:52,680 --> 00:14:59,230
Movie movie = random movie.
245

246
00:14:59,230 --> 00:15:01,880
So we've now got our movie
in our movie object.
246

247
00:15:01,880 --> 00:15:03,180
Now let's print something out.
247

248
00:15:03,180 --> 00:15:10,900
We're gonna go to print, movie#, so
that's the movie that we're working on.
248

249
00:15:10,900 --> 00:15:11,980
Next we're going to put a +.
249

250
00:15:11,980 --> 00:15:14,000
So let's type over here, we'll put.
250

251
00:15:15,900 --> 00:15:17,940
Let's display what the movie name is.
251

252
00:15:19,030 --> 00:15:23,500
Notice there's no get name yet, and
of course the reason for that is up here,
252

253
00:15:23,500 --> 00:15:27,530
when I created the movie class,
I didn't create a getter.
253

254
00:15:27,530 --> 00:15:29,690
I'm going to create a getter now.
254

255
00:15:29,690 --> 00:15:32,840
Getter for the name field, and
255

256
00:15:32,840 --> 00:15:36,140
we'll now be able to use that to actually
retrieve what the name of the movie is.
256

257
00:15:36,140 --> 00:15:37,790
So looking back down at our code again,
257

258
00:15:37,790 --> 00:15:40,820
we should now have that getter
available which you can see it's there.
258

259
00:15:40,820 --> 00:15:45,210
And a
, and what that does it
actually generates a new line.
259

260
00:15:45,210 --> 00:15:49,380
So in other words it starts
the output on the next line.
260

261
00:15:49,380 --> 00:15:51,990
So we're adding that class, and
we'll just tab over again, and
261

262
00:15:51,990 --> 00:15:54,550
this time, we're going to actually
do the interesting thing,
262

263
00:15:54,550 --> 00:15:56,510
which really shows you
how polymorphism works.
263

264
00:15:56,510 --> 00:16:02,220
We're gonna put "Plot:
" + movie.plot() + and
264

265
00:16:02,220 --> 00:16:05,330
we'll just create another.
265

266
00:16:05,330 --> 00:16:07,280
New line so
it will move onto the next line.
266

267
00:16:07,280 --> 00:16:10,050
So that's that one little part here,
267

268
00:16:10,050 --> 00:16:15,240
this movie.plot is really the definition
in how polymorphism works.
268

269
00:16:15,240 --> 00:16:19,420
This is going to be better explained
if I actually show you it running.
269

270
00:16:19,420 --> 00:16:24,080
So what I'm going to do is just close
that side view, like so and we'll run it.
270

271
00:16:25,550 --> 00:16:26,710
And then I'll explain when it's done.
271

272
00:16:29,180 --> 00:16:30,720
And drag this over a little bit.
272

273
00:16:30,720 --> 00:16:31,920
You can see what's happened there.
273

274
00:16:31,920 --> 00:16:35,610
Random number generator pulls one,
we got movie number 2.
274

275
00:16:35,610 --> 00:16:39,550
So the random number generator pulls one,
if you look at our code again.
275

276
00:16:39,550 --> 00:16:42,370
Case 1,
which should be returning the Jaws movie.
276

277
00:16:42,370 --> 00:16:44,420
Next time, random number generator was 3,
277

278
00:16:44,420 --> 00:16:47,340
movie number three should be maze runner,
which it is there.
278

279
00:16:48,480 --> 00:16:51,070
Well you've got lots of two's and
three's there as well as you can see, but
279

280
00:16:51,070 --> 00:16:52,750
we've got Independence Day there as well.
280

281
00:16:52,750 --> 00:16:55,800
So can you see what's happening here,
this is the beauty about polymorphism.
281

282
00:16:55,800 --> 00:16:58,080
Because if you're looking at that code,
movie.plot,
282

283
00:16:58,080 --> 00:17:00,790
that's actually doing quite a bit of work.
283

284
00:17:00,790 --> 00:17:04,160
What it's actually doing, what Java is
doing is it's looking at the object called
284

285
00:17:04,160 --> 00:17:10,060
movie, the variable that we created, that
was returned from the random movie method.
285

286
00:17:10,060 --> 00:17:12,700
And then it's going down and
looking into that object and seeing,
286

287
00:17:12,700 --> 00:17:14,000
has it got a plot method?
287

288
00:17:14,000 --> 00:17:18,130
And you can see in this case,
if you look at the first example for Jaws,
288

289
00:17:18,130 --> 00:17:20,020
going back up to our Jaws class.
289

290
00:17:21,300 --> 00:17:23,800
Yes, we have got a method called plot.
290

291
00:17:23,800 --> 00:17:25,240
So therefore, it's smart enough to go,
291

292
00:17:25,240 --> 00:17:29,870
okay,I'm going to execute this method
plot here in the jaws class, and
292

293
00:17:29,870 --> 00:17:33,910
automatically it returns that
a shark eats lots of people.
293

294
00:17:33,910 --> 00:17:35,070
And likewise for maize runner,
294

295
00:17:35,070 --> 00:17:38,620
you can see that we've got a completely
different output for maize runner.
295

296
00:17:38,620 --> 00:17:40,950
We actually got,
Kids try and escape a maze.
296

297
00:17:40,950 --> 00:17:45,140
So you can see what's happening is, with
that one line of code this movie.plot,
297

298
00:17:45,140 --> 00:17:46,740
this is what polymorphism is.
298

299
00:17:46,740 --> 00:17:49,390
We're actually assigning
different functionality,
299

300
00:17:49,390 --> 00:17:51,940
depending on the type of
object that we've created.
300

301
00:17:51,940 --> 00:17:56,610
Bearing in mind that, all these objects
are inherited from the base movie class,
301

302
00:17:56,610 --> 00:17:59,590
but we've assigned a unique
bit of functionality in
302

303
00:17:59,590 --> 00:18:03,260
each of those plot methods,
for each of those classes.
303

304
00:18:03,260 --> 00:18:05,480
Now, in this case, it's a very,
very simple method.
304

305
00:18:05,480 --> 00:18:07,280
It only outputs the name.
305

306
00:18:07,280 --> 00:18:09,020
Are the plot, I should say, for the movie.
306

307
00:18:09,020 --> 00:18:11,720
But you can imagine that
we could have far more
307

308
00:18:11,720 --> 00:18:15,210
complex functionality built into that,
if we wanted to.
308

309
00:18:15,210 --> 00:18:18,570
Now just going to run this again,
because this is a random number generator.
309

310
00:18:18,570 --> 00:18:22,220
It's purely random, and we've got would
seem to be a pattern there of the same
310

311
00:18:22,220 --> 00:18:23,950
number, three, a number of times.
311

312
00:18:23,950 --> 00:18:25,090
Is that a random thing?
312

313
00:18:25,090 --> 00:18:28,120
So let's just run that again,
and get some different results.
313

314
00:18:28,120 --> 00:18:30,320
Cuz I wanted to come up with number five.
314

315
00:18:30,320 --> 00:18:32,460
And we can see that we've got
different results this time.
315

316
00:18:32,460 --> 00:18:34,960
And we have actually got the results,
we got a four this time,
316

317
00:18:34,960 --> 00:18:36,060
which we didn't have last time.
317

318
00:18:36,060 --> 00:18:38,240
Which is good.
But we've also got the number five, and
318

319
00:18:38,240 --> 00:18:40,980
this is the other point about
polymorphism that I wanna make.
319

320
00:18:40,980 --> 00:18:42,860
The random number generator was five.
320

321
00:18:42,860 --> 00:18:45,700
And that equates to return in
the new class called forgettable.
321

322
00:18:45,700 --> 00:18:49,860
So the movie number three,
in the loop, was called forgettable.
322

323
00:18:49,860 --> 00:18:51,610
The plot, no plot here.
323

324
00:18:51,610 --> 00:18:54,140
So if you go back and
have a look at our forgettable class.
324

325
00:18:54,140 --> 00:18:58,190
If you recall we didn't actually
create a plot method for that class.
325

326
00:18:58,190 --> 00:19:00,950
So what's happened again,
using polymorphism,
326

327
00:19:00,950 --> 00:19:04,750
is that Java's looked at that and said,
okay, there's no plot method here,
327

328
00:19:04,750 --> 00:19:08,990
that has been overwritten,
in this forgettable class.
328

329
00:19:08,990 --> 00:19:12,030
So as a result, I think it looks and
says, okay, I can see that
329

330
00:19:12,030 --> 00:19:15,910
we're extending from the movie class, and
if we go back up to the movie class, and
330

331
00:19:15,910 --> 00:19:20,030
it then finds the method called plot,
which is the movie class.
331

332
00:19:20,030 --> 00:19:22,520
And that's where this code that's
been executed as coming from.
332

333
00:19:22,520 --> 00:19:26,720
No plot here, which is pretty cool, so
you can see how polymorphism works now.
333

334
00:19:26,720 --> 00:19:31,060
It will automatically, if you're
inheriting from another class, and
334

335
00:19:31,060 --> 00:19:36,200
you've got a method, and you override
that method, that's what polymorphism is.
335

336
00:19:36,200 --> 00:19:39,260
It's giving unique functionality, for
336

337
00:19:39,260 --> 00:19:42,770
the class that has inherited
from a base class.
337

338
00:19:42,770 --> 00:19:43,350
So, there you go.
338

339
00:19:43,350 --> 00:19:46,010
So, that's the concept of polymorphism.
339

340
00:19:46,010 --> 00:19:47,730
I hope that makes a lot of sense to you.
340

341
00:19:47,730 --> 00:19:52,460
You'll find this as incredibly useful
once you start developing more Java
341

342
00:19:52,460 --> 00:19:56,400
applications, because it really enables
you to write quite generic code.
342

343
00:19:56,400 --> 00:19:59,980
Again, can you imagine if you didn't
have the ability to do polymorphism?
343

344
00:19:59,980 --> 00:20:02,960
Looking at something like this one line,
movie.plot,
344

345
00:20:02,960 --> 00:20:06,740
you would have to figure out a way to
decide what the type of class was, and
345

346
00:20:06,740 --> 00:20:09,110
then to somehow call
the appropriate class.
346

347
00:20:09,110 --> 00:20:14,820
So, you'd probably have a large switch
statement with, If class equals this name,
347

348
00:20:14,820 --> 00:20:18,730
then actually, you know,
call this particular method.
348

349
00:20:18,730 --> 00:20:22,140
So it'll be a lot more work in other
words, but Java really makes it easy for
349

350
00:20:22,140 --> 00:20:25,190
you by adding this polymorphism
capability automatically.
350

351
00:20:25,190 --> 00:20:26,380
So, that's polymorphism.
351

352
00:20:26,380 --> 00:20:28,220
So, I'm going to end this video here.
352

353
00:20:28,220 --> 00:20:32,300
In the next video, we'll go ahead and
start our polymorphism challenge, so
353

354
00:20:32,300 --> 00:20:33,820
I'll see you in that video.
