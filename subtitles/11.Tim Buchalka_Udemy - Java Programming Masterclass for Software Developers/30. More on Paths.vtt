WEBVTT
1
1

00:00:05.240  -->  00:00:06.710
- [Tim] All right, so
we ended the last video
2

2

00:00:06.710  -->  00:00:09.400
by running the application,
and we saw the contents
3

3

00:00:09.400  -->  00:00:12.190
of the three files printed to the console.
4

4

00:00:12.190  -->  00:00:15.350
Now, you can always use
the Paths.get method,
5

5

00:00:15.350  -->  00:00:17.920
and an example of that is on line 17.
6

6

00:00:17.920  -->  00:00:20.520
You could have used it for
WorkingDirectoryFile.txt
7

7

00:00:20.520  -->  00:00:23.420
and also as a SubdirectoryFile.txt files.
8

8

00:00:23.420  -->  00:00:24.920
Either one of those
would have worked fine,
9

9

00:00:24.920  -->  00:00:28.290
but when you know the
file's path will be relative
10

10

00:00:28.290  -->  00:00:31.230
to your working directory,
it's actually more convenient
11

11

00:00:31.230  -->  00:00:34.440
and, in fact, better practise
to get the working directory
12

12

00:00:34.440  -->  00:00:38.150
using the FileSystems.Getdefault
method, and then
13

13

00:00:38.150  -->  00:00:41.790
tacking on the filename using
the getPath method call.
14

14

00:00:41.790  -->  00:00:44.050
Now, you have no way of
knowing which directory
15

15

00:00:44.050  -->  00:00:46.620
a user will instal your application into,
16

16

00:00:46.620  -->  00:00:48.880
so when you want to instal
files and store them
17

17

00:00:48.880  -->  00:00:51.130
within your application
or with your application,
18

18

00:00:51.130  -->  00:00:54.850
you can't specify absolute
paths in your code.
19

19

00:00:54.850  -->  00:00:57.280
So you have to rely on
getting the working directory
20

20

00:00:57.280  -->  00:00:58.860
for the application.
21

21

00:00:58.860  -->  00:01:01.380
Now, you could have installed
or stored InstallPath
22

22

00:01:01.380  -->  00:01:03.610
somewhere, but it's still better
23

23

00:01:03.610  -->  00:01:05.760
to get the working
directory using methods,
24

24

00:01:05.760  -->  00:01:08.100
because it's a foolproof way to do it.
25

25

00:01:08.100  -->  00:01:10.230
Now, if a user created files,
26

26

00:01:10.230  -->  00:01:12.220
absolute paths may make sense,
27

27

00:01:12.220  -->  00:01:14.700
because usually, when the
user wants to open them,
28

28

00:01:14.700  -->  00:01:17.150
they'll navigate to
them in the file system,
29

29

00:01:17.150  -->  00:01:20.200
and in that case, you'll
have the absolute path.
30

30

00:01:20.200  -->  00:01:22.860
Now, in addition to
FileSystems.Getdefault,
31

31

00:01:22.860  -->  00:01:25.700
there's also another way to
get the working directory
32

32

00:01:25.700  -->  00:01:28.440
for an application,
and you can use the dot
33

33

00:01:28.440  -->  00:01:31.030
to represent the current
working directory.
34

34

00:01:31.030  -->  00:01:33.570
Now, if you know your way
around the terminal or command
35

35

00:01:33.570  -->  00:01:36.640
prompt, you'll now that the dot
always refers to the current
36

36

00:01:36.640  -->  00:01:40.270
directory and both Windows
and Unix-based systems.
37

37

00:01:40.270  -->  00:01:42.590
So let's actually print
out the working directory
38

38

00:01:42.590  -->  00:01:45.230
using the code, so we're
gonna come down here
39

39

00:01:45.230  -->  00:01:47.560
and start typing, and we'll do
40

40

00:01:47.560  -->  00:01:50.150
filePath is equal to Paths.get,
41

41

00:01:54.040  -->  00:01:56.550
and then parentheses and
double quote and the dot
42

42

00:01:56.550  -->  00:01:58.830
or the period as they call it.
43

43

00:01:58.830  -->  00:02:01.050
Dot it what we call it in Australia,
44

44

00:02:01.050  -->  00:02:04.800
and we'll do a Sout,
filePath.toAbsolutePath.
45

45

00:02:08.490  -->  00:02:12.590
So I'll run this, and
then I'll talk about that.
46

46

00:02:12.590  -->  00:02:14.980
You can see we've got
the output showing here
47

47

00:02:14.980  -->  00:02:16.810
right down the bottom
in the console output.
48

48

00:02:16.810  -->  00:02:20.380
So I'm using the
Path.toAbsolutePath method call
49

49

00:02:20.380  -->  00:02:24.720
to get the absolute path
represented by the path instance,
50

50

00:02:24.720  -->  00:02:26.960
and you saw that we can see
the AbsolutePath printed
51

51

00:02:26.960  -->  00:02:31.170
to the console, noting that
it also appends the full stop
52

52

00:02:31.170  -->  00:02:34.430
to the path, and that'll
be a backslash, full stop
53

53

00:02:34.430  -->  00:02:36.640
or period, if you're running on Windows.
54

54

00:02:36.640  -->  00:02:38.530
Now, we're gonna come
back to this in a minute.
55

55

00:02:38.530  -->  00:02:41.880
So what we can try and do
is use this dot or period
56

56

00:02:41.880  -->  00:02:44.550
to build a path rather than calling
57

57

00:02:44.550  -->  00:02:47.440
the FileSystems.Getdefault method.
58

58

00:02:47.440  -->  00:02:50.220
So let's change the way
that we're building the path
59

59

00:02:50.220  -->  00:02:53.120
to the SubdirectoryFile.txt file.
60

60

00:02:53.120  -->  00:02:53.990
So we come back here.
61

61

00:02:53.990  -->  00:02:55.950
At the moment, we've got this
62

62

00:02:55.950  -->  00:03:00.010
Path filePath =
FileSystems.getDefault().getPath,
63

63

00:03:00.010  -->  00:03:01.690
so in fact, we can actually change that.
64

64

00:03:01.690  -->  00:03:04.860
I'm gonna take a copy of
that, duplicate the line
65

65

00:03:04.860  -->  00:03:06.820
by Command + D or Control + D,
66

66

00:03:06.820  -->  00:03:08.530
and I'm gonna comment one copy out,
67

67

00:03:08.530  -->  00:03:12.360
and what I'm going to
do is change this method
68

68

00:03:14.000  -->  00:03:16.670
or the method call to Paths.get,
69

69

00:03:18.740  -->  00:03:20.450
and in terms of the folder it's going to,
70

70

00:03:20.450  -->  00:03:23.160
we're going to start by putting a period
71

71

00:03:23.160  -->  00:03:26.530
in double quotes there first,
comma, and then we've got
72

72

00:03:26.530  -->  00:03:30.010
our files and then the
SubdirectoryFile.txt.
73

73

00:03:30.010  -->  00:03:32.040
So here, we're actually passing three path
74

74

00:03:32.040  -->  00:03:35.210
segments to the get method on line 16.
75

75

00:03:36.350  -->  00:03:38.180
First, we're passing
the current directory,
76

76

00:03:38.180  -->  00:03:41.660
which will resolve to the
IntelliJ project directory.
77

77

00:03:41.660  -->  00:03:43.630
Then we're passing the files directory,
78

78

00:03:43.630  -->  00:03:46.030
which is the subfolder, and then finally,
79

79

00:03:46.030  -->  00:03:47.930
we're passing the filename itself.
80

80

00:03:47.930  -->  00:03:50.190
So you do have to pass
them in the correct order.
81

81

00:03:50.190  -->  00:03:52.500
So if you were to pass the
filename before the files
82

82

00:03:52.500  -->  00:03:55.020
directory, then we'd get
something completely different.
83

83

00:03:55.020  -->  00:03:57.760
We might get something on
Windows along the lines
84

84

00:03:57.760  -->  00:04:01.930
of D:\\SubdirectoryFile.txt\files
or something like that.
85

85

00:04:06.100  -->  00:04:08.670
So it obviously would be
wrong, because the actual
86

86

00:04:08.670  -->  00:04:10.890
filename is appearing before the files.
87

87

00:04:10.890  -->  00:04:12.770
So again, this order is very important
88

88

00:04:12.770  -->  00:04:16.140
as to how you go about calling that.
89

89

00:04:16.140  -->  00:04:17.040
And just to confirm this,
90

90

00:04:17.040  -->  00:04:21.210
let's run this to make sure
we get the same results.
91

91

00:04:23.010  -->  00:04:24.500
So we've still got our working directory.
92

92

00:04:24.500  -->  00:04:26.640
We've got our files
within the subdirectory.
93

93

00:04:26.640  -->  00:04:28.730
That's still working as
well, and obviously we've got
94

94

00:04:28.730  -->  00:04:31.820
the file in some random
location in the file system, so
95

95

00:04:31.820  -->  00:04:36.640
clearly the change that's been
made on 16 is still working.
96

96

00:04:36.640  -->  00:04:38.340
Now, of course you can build paths
97

97

00:04:38.340  -->  00:04:40.180
relative to any directory.
98

98

00:04:40.180  -->  00:04:42.730
It doesn't actually have to
be the current directory,
99

99

00:04:42.730  -->  00:04:46.240
but keep in mind that a root
node has to be included.
100

100

00:04:46.240  -->  00:04:48.970
So when we use this path here on line 18
101

101

00:04:48.970  -->  00:04:52.260
to get access to the OutThere.txt file,
102

102

00:04:52.260  -->  00:04:55.860
we actually specify the absolute
path as a single string,
103

103

00:04:55.860  -->  00:04:58.400
and obviously that's
the complete path there,
104

104

00:04:58.400  -->  00:05:01.570
in my case, on a Mac, but
we can also split that up
105

105

00:05:01.570  -->  00:05:04.740
into pieces too if we want to do that.
106

106

00:05:04.740  -->  00:05:09.070
So if we're doing something
on a PC, we could...
107

107

00:05:09.070  -->  00:05:10.480
I'll comment this out.
108

108

00:05:10.480  -->  00:05:12.900
We could do something like...
109

109

00:05:16.910  -->  00:05:21.070
We could try D:\\ as the first argument.
110

110

00:05:22.120  -->  00:05:24.370
Then we could put Examples,
111

111

00:05:27.530  -->  00:05:29.700
and then the OutThere.txt.
112

112

00:05:30.690  -->  00:05:32.580
And that would build the path that way,
113

113

00:05:32.580  -->  00:05:35.910
and from a Mac point of view,
we could do something like,
114

114

00:05:35.910  -->  00:05:38.000
if we wanted to do three arguments,
115

115

00:05:38.000  -->  00:05:39.980
we could do Programmes,
that's the first...
116

116

00:05:39.980  -->  00:05:43.570
The /Volumes/Production/Courses/Programs,
then a comma.
117

117

00:05:43.570  -->  00:05:48.250
As the second one, we could put
/JavaPrograms, and the third
118

118

00:05:48.250  -->  00:05:52.080
argument would be the name
of the file, OutThere.txt.
119

119

00:05:52.080  -->  00:05:54.030
So if we run that, we should
find that that still works
120

120

00:05:54.030  -->  00:05:58.860
for us, and you can see, we've
still got the example here,
121

121

00:05:58.860  -->  00:06:01.340
File in some random
location on the file system,
122

122

00:06:01.340  -->  00:06:02.570
so that's clearly still working.
123

123

00:06:02.570  -->  00:06:05.820
So we've just broken it up into
three distinct areas there,
124

124

00:06:05.820  -->  00:06:08.220
and we could have broken that
up even more if we wanted to,
125

125

00:06:08.220  -->  00:06:12.980
and again, on line 19, that's
the Windows equivalent.
126

126

00:06:12.980  -->  00:06:16.070
And getting back to down here
where we printed out the path,
127

127

00:06:16.070  -->  00:06:18.040
the absolute path of
the working directory,
128

128

00:06:18.040  -->  00:06:20.340
and then there's this slash dot
129

129

00:06:20.340  -->  00:06:22.500
or slash period that was appended to it.
130

130

00:06:22.500  -->  00:06:25.990
As I mentioned previously,
that period or dot,
131

131

00:06:25.990  -->  00:06:27.840
full stop, means the directory,
132

132

00:06:27.840  -->  00:06:31.590
so appending the slash
dot is actually redundant.
133

133

00:06:31.590  -->  00:06:33.340
We don't actually need that in the path,
134

134

00:06:33.340  -->  00:06:36.100
so depending on how you
built paths, you could then
135

135

00:06:36.100  -->  00:06:37.880
end up with something
weird, so we could end up
136

136

00:06:37.880  -->  00:06:39.960
with something like in Windows terms...
137

137

00:06:39.960  -->  00:06:41.820
If we come back up here,
if we left that in there,
138

138

00:06:41.820  -->  00:06:45.980
it'd be something like D:\Examples\,
139

139

00:06:46.910  -->  00:06:50.670
dot, slash, and if there's a subfolder.
140

140

00:06:50.670  -->  00:06:51.750
So clearly, that wouldn't be right
141

141

00:06:51.750  -->  00:06:52.760
with that extra dot there.
142

142

00:06:52.760  -->  00:06:54.800
It's just actually redundant.
143

143

00:06:54.800  -->  00:06:58.430
And by the way, if I
change that to dot, dot,
144

144

00:06:58.430  -->  00:07:01.260
to subfolder, and slash, dot, dot,
145

145

00:07:03.440  -->  00:07:05.130
and then directory,
146

146

00:07:05.130  -->  00:07:07.310
well, that's actually still a valid path,
147

147

00:07:07.310  -->  00:07:09.410
two dots with two periods.
148

148

00:07:09.410  -->  00:07:11.230
That means the parent directory.
149

149

00:07:11.230  -->  00:07:13.370
So, in this particular
case, in that example,
150

150

00:07:13.370  -->  00:07:17.540
the path ends up being
D:\Examples\directory.
151

151

00:07:19.440  -->  00:07:20.280
Now, the reason for that is,
152

152

00:07:20.280  -->  00:07:24.600
so we've got D:\Examples\subfolder,
153

153

00:07:24.600  -->  00:07:28.040
and the two dots means move
up to the previous subfolder,
154

154

00:07:28.040  -->  00:07:30.570
in this case, moving back
to the examples folder,
155

155

00:07:30.570  -->  00:07:31.560
then directory.
156

156

00:07:31.560  -->  00:07:32.430
We'd then navigate down
157

157

00:07:32.430  -->  00:07:35.470
to the directory subfolder from Examples.
158

158

00:07:35.470  -->  00:07:37.840
So it's just a way to
move back up one level
159

159

00:07:37.840  -->  00:07:41.240
to wherever the parent folder
was for the current folder.
160

160

00:07:41.240  -->  00:07:43.360
A little bit confusing, but in practise,
161

161

00:07:43.360  -->  00:07:47.860
it's easier than probably
how I'm describing it.
162

162

00:07:47.860  -->  00:07:49.670
But I think you'd agree,
looking at that example
163

163

00:07:49.670  -->  00:07:53.490
with the two dots, it's actually
better and more readable
164

164

00:07:53.490  -->  00:07:55.700
to not have those dots, the period,
165

165

00:07:55.700  -->  00:07:57.480
or the two periods in them.
166

166

00:07:57.480  -->  00:07:58.980
You can remove these path segments
167

167

00:07:58.980  -->  00:08:01.090
using the path.normalize method.
168

168

00:08:01.090  -->  00:08:03.080
Let's actually see how that
would work in practise,
169

169

00:08:03.080  -->  00:08:05.910
so we could do something like Path
170

170

00:08:07.210  -->  00:08:08.630
path2 is equal to
171

171

00:08:10.250  -->  00:08:12.830
FileSystems.getDefault.getPath,
172

172

00:08:15.350  -->  00:08:16.310
and we're going to navigate
173

173

00:08:16.310  -->  00:08:19.980
to the same folder for
SubdirectoryFile.txt,
174

174

00:08:19.980  -->  00:08:23.580
so I'm going to use the
period in double quotes,
175

175

00:08:23.580  -->  00:08:25.500
files in double quotes,
176

176

00:08:28.280  -->  00:08:30.830
two periods in double quotes,
177

177

00:08:30.830  -->  00:08:34.080
and then the file SubdirectoryFile.txt.
178

178

00:08:37.100  -->  00:08:38.260
And actually, I want another one in there.
179

179

00:08:38.260  -->  00:08:40.830
I want to put another
files in there like so.
180

180

00:08:40.830  -->  00:08:42.770
So now we've done that, believe it or not,
181

181

00:08:42.770  -->  00:08:47.450
that entire path will still
get us to SubdirectoryFile.txt.
182

182

00:08:47.450  -->  00:08:50.900
So we're starting on the
current working directory.
183

183

00:08:50.900  -->  00:08:53.050
So the single period
there in double quotes,
184

184

00:08:53.050  -->  00:08:56.200
on line 27, that returns
the working directory,
185

185

00:08:56.200  -->  00:08:58.490
so effectively, that's
redundant, and does nothing.
186

186

00:08:58.490  -->  00:09:01.370
Then we move to the files subdirectory.
187

187

00:09:01.370  -->  00:09:03.190
Moving on, we move back up a level,
188

188

00:09:03.190  -->  00:09:05.010
because we're using the two periods there,
189

189

00:09:05.010  -->  00:09:06.780
which navigates back to the parent,
190

190

00:09:06.780  -->  00:09:10.120
which will be back to the
working directory in this case.
191

191

00:09:10.120  -->  00:09:12.900
Then we move down again
to the files subfolder,
192

192

00:09:12.900  -->  00:09:16.280
and then we've got the
actually SubdirectoryFile.txt
193

193

00:09:16.280  -->  00:09:19.930
path, which is the actual filename itself.
194

194

00:09:19.930  -->  00:09:22.370
So let's just confirm that that works.
195

195

00:09:22.370  -->  00:09:26.540
So we're going to do a printout
path2.normalize method call,
196

196

00:09:28.010  -->  00:09:31.840
dot, toAbsolutePath, so we can do that,
197

197

00:09:31.840  -->  00:09:34.780
and let's also do a printFile
just to make sure it works,
198

198

00:09:34.780  -->  00:09:36.110
path2.normalize.
199

199

00:09:38.120  -->  00:09:39.620
So let's run that.
200

200

00:09:44.650  -->  00:09:46.790
You can see there,
that's now the full path,
201

201

00:09:46.790  -->  00:09:47.920
that's the path to our file,
202

202

00:09:47.920  -->  00:09:49.810
and you can see that that still worked,
203

203

00:09:49.810  -->  00:09:51.510
and obviously file is within subdirectory,
204

204

00:09:51.510  -->  00:09:53.810
that's the text which is
actually within that programme,
205

205

00:09:53.810  -->  00:09:56.270
so clearly that's worked okay.
206

206

00:09:56.270  -->  00:09:58.540
So basically, the point here
is that when you're getting
207

207

00:09:58.540  -->  00:10:02.000
a path from a user or some
other source, it's generally
208

208

00:10:02.000  -->  00:10:05.770
a good idea to normalise
the path before using it.
209

209

00:10:05.770  -->  00:10:07.090
All right, so now that you've got an idea
210

210

00:10:07.090  -->  00:10:10.100
of how to build paths to files
in the current directory,
211

211

00:10:10.100  -->  00:10:12.570
in a path relative to another directory
212

212

00:10:12.570  -->  00:10:15.740
or to anywhere on the file
system using an absolute path,
213

213

00:10:15.740  -->  00:10:20.310
let's now briefly discuss why
the path interface came about.
214

214

00:10:20.310  -->  00:10:22.440
So the java.io.File class
215

215

00:10:22.440  -->  00:10:25.460
also points to files on the file system.
216

216

00:10:25.460  -->  00:10:28.610
So why did the Java developers
introduce another class
217

217

00:10:28.610  -->  00:10:31.440
that effectively does
the same thing in Java 7?
218

218

00:10:31.440  -->  00:10:35.250
So the file class, while useful,
though, has a few problems.
219

219

00:10:35.250  -->  00:10:38.260
And specifically, those
problems are firstly,
220

220

00:10:38.260  -->  00:10:40.990
many methods in that class
don't throw exceptions
221

221

00:10:40.990  -->  00:10:44.420
or don't provide specific
error messages when they fail.
222

222

00:10:44.420  -->  00:10:47.060
An example would be
the File.delete method,
223

223

00:10:47.060  -->  00:10:48.810
which returns a boolean.
224

224

00:10:48.810  -->  00:10:51.620
If the deletion fails,
you can't actually tell
225

225

00:10:51.620  -->  00:10:53.800
if it was because the file didn't exist
226

226

00:10:53.800  -->  00:10:55.920
or the application doesn't have permission
227

227

00:10:55.920  -->  00:10:58.610
to delete the file or some other reason.
228

228

00:10:58.610  -->  00:11:00.500
So unfortunately, the
method doesn't provide
229

229

00:11:00.500  -->  00:11:02.430
that level of information.
230

230

00:11:02.430  -->  00:11:04.020
Now, the File.rename method
231

231

00:11:04.020  -->  00:11:06.090
works differently on different platforms.
232

232

00:11:06.090  -->  00:11:08.090
And Java's supported to
be portable, as you know,
233

233

00:11:08.090  -->  00:11:10.740
across platforms, meaning
that the code shouldn't have
234

234

00:11:10.740  -->  00:11:14.070
to worry about which operating
system it's running on.
235

235

00:11:14.070  -->  00:11:17.290
Another problem, there's no
support for symbolic links,
236

236

00:11:17.290  -->  00:11:19.750
and a symbolic link is a
kind of file that points
237

237

00:11:19.750  -->  00:11:21.900
to another file, sort of
like a shortcut in Windows,
238

238

00:11:21.900  -->  00:11:23.340
if you're familiar with that.
239

239

00:11:23.340  -->  00:11:24.870
Now, they're often used with networks
240

240

00:11:24.870  -->  00:11:27.230
to point to a remote location.
241

241

00:11:27.230  -->  00:11:28.830
Unfortunately, the file class
242

242

00:11:28.830  -->  00:11:32.040
doesn't understand those symbolic links.
243

243

00:11:32.040  -->  00:11:34.070
The file class doesn't provide a way
244

244

00:11:34.070  -->  00:11:36.190
to get metadata about a file,
245

245

00:11:36.190  -->  00:11:38.880
information such as its
permissions, its owner,
246

246

00:11:38.880  -->  00:11:41.060
or other security information.
247

247

00:11:41.060  -->  00:11:42.650
The metadata that it does provide
248

248

00:11:42.650  -->  00:11:45.090
is retrieved inefficiently as well.
249

249

00:11:45.090  -->  00:11:47.010
Now, many of the methods
don't perform well
250

250

00:11:47.010  -->  00:11:48.860
when working with lots of data.
251

251

00:11:48.860  -->  00:11:50.380
For example, if you use the file class
252

252

00:11:50.380  -->  00:11:51.930
to request a list of all the files
253

253

00:11:51.930  -->  00:11:54.230
in a directory and there
are a lot of files,
254

254

00:11:54.230  -->  00:11:56.320
the method can actually
hang, believe it or not.
255

255

00:11:56.320  -->  00:11:57.770
And lastly, the last error,
256

256

00:11:57.770  -->  00:12:00.630
since the file class doesn't
understand symbolic links,
257

257

00:12:00.630  -->  00:12:04.220
walking through a directory
tree is therefore problematic.
258

258

00:12:04.220  -->  00:12:05.570
So I'll end the video here.
259

259

00:12:05.570  -->  00:12:08.970
In the next video, let's have
a talk about how java.nio
260

260

00:12:08.970  -->  00:12:11.140
solves these problems,
and also how it splits
261

261

00:12:11.140  -->  00:12:13.410
the functionality that
was in the file class
262

262

00:12:13.410  -->  00:12:15.690
into several different
classes and interfaces.
263

263

00:12:15.690  -->  00:12:17.710
See you in the next video.
