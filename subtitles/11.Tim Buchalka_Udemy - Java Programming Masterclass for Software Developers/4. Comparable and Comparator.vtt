WEBVTT
1
1

00:00:05.200  -->  00:00:07.160
Before we continue looking
at the interfaces and
2

2

00:00:07.160  -->  00:00:12.330
classes in the collections framework,
it's worth covering the comparable and
3

3

00:00:12.330  -->  00:00:16.050
comparator interfaces or
comparator interfaces.
4

4

00:00:16.050  -->  00:00:20.500
Now the collections framework includes
classes that sort the relevance,
5

5

00:00:20.500  -->  00:00:24.110
to really use those properly we need to
understand how that works in order to
6

6

00:00:24.110  -->  00:00:28.920
create our own classes that we can use or
we could store in sorted collections Now,
7

7

00:00:28.920  -->  00:00:32.080
in the previous videos,
we implemented the comparable interface,
8

8

00:00:32.080  -->  00:00:36.110
so that we could experiment with
the collections.sort and reverse methods.
9

9

00:00:36.110  -->  00:00:40.240
So you've already seen how easy it is
to create the one required method of
10

10

00:00:40.240  -->  00:00:41.200
the interface.
11

11

00:00:41.200  -->  00:00:43.220
Which, of course,
was the compare to method.
12

12

00:00:43.220  -->  00:00:45.660
So we'll continue using
the theater example,
13

13

00:00:45.660  -->  00:00:49.200
because the seats give us a reasonably
sized data set to play with.
14

14

00:00:49.200  -->  00:00:53.210
And secondly, because it's regenerated
next to theater's class constructor.
15

15

00:00:53.210  -->  00:00:55.660
So it's actually less typing.
16

16

00:00:55.660  -->  00:00:59.780
Now we've left a lot of unnecessary
code in there though so what we'll do is
17

17

00:00:59.780  -->  00:01:03.260
we'll start cleaning things up a little
bit to make these a little bit tidier and
18

18

00:01:03.260  -->  00:01:06.470
I have to say that I've been guilty
of bad practice in the past so
19

19

00:01:06.470  -->  00:01:11.960
we've made the seat collections object
public, I talked about the reasons why.
20

20

00:01:11.960  -->  00:01:15.300
We did that in the previous video and
of course that was because it's easier to
21

21

00:01:15.300  -->  00:01:18.570
see what we're dealing with, whether the
actual seats collection without confusing
22

22

00:01:18.570  -->  00:01:21.710
things by having to get a get or
return the list of seats, etc.
23

23

00:01:21.710  -->  00:01:24.640
But that's really bad practice so
for the remaining examples we'll
24

24

00:01:24.640  -->  00:01:27.420
set it back to private and
we'll use a proper get seats.
25

25

00:01:27.420  -->  00:01:28.510
Method to do so.
26

26

00:01:28.510  -->  00:01:30.900
So we go back to the theater class now and
27

27

00:01:30.900  -->  00:01:34.740
firstly we're going to make sure
that seats variable is private.
28

28

00:01:34.740  -->  00:01:38.830
So down here we're gonna change or up here
the public definition back to private.
29

29

00:01:40.660  -->  00:01:43.170
And we should still be using
an array list, which we are.
30

30

00:01:43.170  -->  00:01:43.720
And yeah.
31

31

00:01:43.720  -->  00:01:45.630
The thing we could do,
if you remember, we copied and
32

32

00:01:45.630  -->  00:01:51.570
paste the code from the Java sort method
itself from the collections framework.
33

33

00:01:51.570  -->  00:01:56.560
We're gonna take it back and put back in
it our original binary search code again
34

34

00:01:56.560  -->  00:01:59.790
that we originally came up with even
though it wasn't terribly efficient.
35

35

00:01:59.790  -->  00:02:01.860
But we'll put that back in,
replacing this code there.
36

36

00:02:04.540  -->  00:02:07.840
And what I did was I introduced another
variable here, so consequently,
37

37

00:02:07.840  -->  00:02:11.800
that constructor's not working, so what
we're going to do is introduce a field
38

38

00:02:11.800  -->  00:02:16.130
called price, and we'll modify the
constructor to allow that to work as well.
39

39

00:02:16.130  -->  00:02:17.780
So we're going to go down
to our seat definition,
40

40

00:02:17.780  -->  00:02:23.040
and we'll make that private as well,
and we set that to public and So
41

41

00:02:23.040  -->  00:02:28.990
we're going to also add the variable
price probably double price.
42

42

00:02:28.990  -->  00:02:31.120
Then we'll change the constructor as well.
43

43

00:02:31.120  -->  00:02:35.270
So the constructor accepts that as
the primary as well it's a double price.
44

44

00:02:36.420  -->  00:02:37.350
Oops wrong method.
45

45

00:02:37.350  -->  00:02:41.250
Of course it's a constructor
I was trying to do.
46

46

00:02:41.250  -->  00:02:45.960
So double price and we'll do this
stop price equals price Like so.
47

47

00:02:45.960  -->  00:02:49.430
The other thing we're going to do is
to add that getter we talked about.
48

48

00:02:49.430  -->  00:02:53.120
The getter for the seats because
we haven't got tha public anymore.
49

49

00:02:53.120  -->  00:02:57.950
So we do getter and we've already got
one of course because we called this
50

50

00:02:57.950  -->  00:02:59.840
get seats which was for our testing.
51

51

00:02:59.840  -->  00:03:02.920
What we'll do is we'll
change this definition now.
52

52

00:03:02.920  -->  00:03:04.190
We'll change it to a collection.
53

53

00:03:05.500  -->  00:03:11.250
Seat and then we're gonna just return,
instead of doing that loop we will
54

54

00:03:11.250  -->  00:03:17.220
return seats, like so.
55

55

00:03:17.220  -->  00:03:22.160
And down on the bottom we've also
of the inner class, the seat class.
56

56

00:03:22.160  -->  00:03:26.490
You come together for
C number that's also add together for
57

57

00:03:26.490  -->  00:03:31.600
our pross what we just added pross sp
clean up code on the bottom we move
58

58

00:03:31.600  -->  00:03:35.730
all those extra spaces down okay so
finally lets go back and
59

59

00:03:35.730  -->  00:03:39.790
look at the theater class again
which is the constructor.
60

60

00:03:39.790  -->  00:03:41.220
Cuz we've got an error
there as you can see there.
61

61

00:03:41.220  -->  00:03:45.280
Now the constructor at the moment
doesn't deal with price at all.
62

62

00:03:45.280  -->  00:03:46.750
So let's look at changing that.
63

63

00:03:46.750  -->  00:03:48.150
So what we're going to do is,
64

64

00:03:48.150  -->  00:03:50.930
we've got the same code in
here that does the generation.
65

65

00:03:50.930  -->  00:03:55.450
So the first bit of code here We're gonna
charge a different price depending on what
66

66

00:03:55.450  -->  00:03:59.470
level, so we're gonna set a price of
$12 for seats but if the seats are near
67

67

00:03:59.470  -->  00:04:03.170
the middle of the first three rows
the price increases to 14 and seats in
68

68

00:04:03.170  -->  00:04:08.140
the back two rows are on the edges of the
theater only cost $7 so let's go ahead and
69

69

00:04:08.140  -->  00:04:12.100
change that code so when we go through
our four loop like we've done there.
70

70

00:04:12.100  -->  00:04:16.150
And then we need to put
a few tests in here so
71

71

00:04:16.150  -->  00:04:21.350
we're gonna start off with a price
of 12 so double price equals $12.
72

72

00:04:21.350  -->  00:04:25.740
12.00 and we'll put an if test in there so
if If((row
73

73

00:04:25.740  -->  00:04:30.320
less than 'D') and remember the first
3 rows says A, B and C and
74

74

00:04:30.320  -->  00:04:35.450
we're gonna charge a separate
price of 14 for, we're gonna put
75

75

00:04:35.450  -->  00:04:40.790
&&(seatnum >= 4) And
76

76

00:04:42.100  -->  00:04:46.140
seat num is less than equal to nine,
sorry, less than equal to nine,
77

77

00:04:46.140  -->  00:04:52.000
and we're going to make price equals 14,
so let's those first three rose,
78

78

00:04:52.000  -->  00:04:55.580
and obviously ignore Or
in the three seats on the edges.
79

79

00:04:55.580  -->  00:04:58.410
If you're on those first few rows and
you're not on the edges, then you're going
80

80

00:04:58.410  -->  00:05:01.770
to pay $4 million, because that's
considered a premium sort of seat, and
81

81

00:05:01.770  -->  00:05:09.100
otherwise, getting towards the back,
so if row is greater than F,
82

82

00:05:09.100  -->  00:05:14.290
the F row, or the seat num < 4,
83

83

00:05:14.290  -->  00:05:18.490
so again we're on an edge, or seatNum > 9.
84

84

00:05:18.490  -->  00:05:23.360
So in those cases you're
gonna get a discount.
85

85

00:05:23.360  -->  00:05:25.410
The price is going to be $7.
86

86

00:05:25.410  -->  00:05:29.330
Then what we need to do then is for
our constructor
87

87

00:05:29.330  -->  00:05:33.830
because we changed the constructor for
seat we need to add the price to it and
88

88

00:05:33.830  -->  00:05:36.620
parse that through which ultimately
is gonna be saved in the seat object.
89

89

00:05:36.620  -->  00:05:40.350
So you can see what we've done there,
we've again what we've done is we've set
90

90

00:05:40.350  -->  00:05:44.690
the base price of $12 for
the seats as you can see that on line 18.
91

91

00:05:44.690  -->  00:05:48.930
But if the seats near the middle of the
first three rows, the price increases 214.
92

92

00:05:48.930  -->  00:05:53.120
And you can see that we
started doing that on line 20.
93

93

00:05:53.120  -->  00:05:58.090
However, seats in the back two rows or on
the edges of the theater only cost seven.
94

94

00:05:58.090  -->  00:06:00.470
So edges is defined as
the first three seats.
95

95

00:06:00.470  -->  00:06:03.420
Actually the first three
seats on the left hand side.
96

96

00:06:03.420  -->  00:06:05.850
Remembering that their
numbers have 012 and
97

97

00:06:05.850  -->  00:06:07.690
the last three seats on
the right-hand side.
98

98

00:06:07.690  -->  00:06:09.260
If that's the case then
you pay only $7 for it.
99

99

00:06:09.260  -->  00:06:11.020
So now that we've done all that,
100

100

00:06:11.020  -->  00:06:13.020
we should be able to start
experimenting with our changes.
101

101

00:06:13.020  -->  00:06:15.360
So what I'm gonna do,
we've got a lot of coding here.
102

102

00:06:15.360  -->  00:06:18.880
The main class does contain a lot
from our earlier experimentation.
103

103

00:06:18.880  -->  00:06:22.860
So what I'm gonna do is delete all but
the initial reservations part, and
104

104

00:06:22.860  -->  00:06:24.950
then the printList method
itself is gonna stay there.
105

105

00:06:24.950  -->  00:06:27.900
So I'm gonna delete the sortList,
which we don't need.
106

106

00:06:28.970  -->  00:06:33.370
I'm also gonna delete some
of this extra code up here.
107

107

00:06:33.370  -->  00:06:36.350
Really, the only things we wanna
keep is the initial reservations.
108

108

00:06:40.860  -->  00:06:43.380
And we'll change this
reference from the rail list.
109

109

00:06:43.380  -->  00:06:44.660
We're not going to be using that anymore.
110

110

00:06:46.060  -->  00:06:49.970
And we're gonna change this seat copy,
because that doesn't exist anymore.
111

111

00:06:49.970  -->  00:06:53.950
Instead, we're going to do theater, or
if, actually, delete that entire line,
112

112

00:06:53.950  -->  00:06:57.380
because the other code is
actually already there.
113

113

00:06:57.380  -->  00:06:59.580
And change that to private.
114

114

00:06:59.580  -->  00:07:00.360
I should really go back and
115

115

00:07:00.360  -->  00:07:03.250
change that because we're gonna still be
using that print list to public again.
116

116

00:07:03.250  -->  00:07:06.260
That's the seat in a class.
117

117

00:07:06.260  -->  00:07:10.890
So I'll change that to a public,
but not the seat objects or
118

118

00:07:10.890  -->  00:07:13.370
list of objects in the array list
that's still going to be private.
119

119

00:07:13.370  -->  00:07:17.880
So this one's going to be public, so
we can access that class From main,
120

120

00:07:17.880  -->  00:07:20.680
like so, and just to be different,
we'll do another seat number, D12.
121

121

00:07:20.680  -->  00:07:28.540
D12, and
we'll put another one there as well.
122

122

00:07:28.540  -->  00:07:33.340
Now, let's just do, say, B 3rd N.
123

123

00:07:33.340  -->  00:07:38.640
Okay, it's going to kink,
give us an error, B 3rd N.
124

124

00:07:41.470  -->  00:07:44.030
Okay, so that's our basic code now.
125

125

00:07:44.030  -->  00:07:45.900
Let's also now change the price.
126

126

00:07:45.900  -->  00:07:48.280
For the print what we'll do is
we'll add a price in there.
127

127

00:07:48.280  -->  00:07:50.940
At the moment we've got it printing
the seat number let's also
128

128

00:07:50.940  -->  00:07:51.590
print our the price.
129

129

00:07:51.590  -->  00:07:58.830
So it'll be plus space plus,
and it will be seat.getprice.
130

130

00:07:58.830  -->  00:08:02.390
So let's just run a couple
of these scenarios and
131

131

00:08:02.390  -->  00:08:04.000
check that the price is
going to be correct.
132

132

00:08:06.350  -->  00:08:10.520
And I've got an extra bracket in there,
probably from some of the code I was
133

133

00:08:10.520  -->  00:08:12.180
deleting when I was
cleaning up a little bit.
134

134

00:08:12.180  -->  00:08:15.070
Okay, so we can just run that
to confirm it's working.
135

135

00:08:15.070  -->  00:08:16.070
Please pay for D12.
136

136

00:08:16.070  -->  00:08:17.130
There's no seat D13.
137

137

00:08:17.130  -->  00:08:19.150
And obviously if we run this again,
138

138

00:08:22.620  -->  00:08:27.760
copy that again, the second time it should
come up and say that's already reserved.
139

139

00:08:29.090  -->  00:08:29.820
See it already reserved.
140

140

00:08:29.820  -->  00:08:33.660
So, it's working back again how it
should have worked in the past.
141

141

00:08:33.660  -->  00:08:36.850
And, in terms of how it worked,
because the seat class itself implements
142

142

00:08:36.850  -->  00:08:39.700
comparable, we have to override
the compare to method.
143

143

00:08:39.700  -->  00:08:42.260
And that's often a very
simple thing to do.
144

144

00:08:42.260  -->  00:08:45.280
So a compare to method should
return a number less than zero
145

145

00:08:45.280  -->  00:08:48.920
if the object should sort less than
the object that is being compared to.
146

146

00:08:48.920  -->  00:08:55.200
And if we have a look back at our theater
code Looking at the compareTo method
147

147

00:08:55.200  -->  00:08:59.670
there on line 63, it's seat in our example
which was passed to this method and
148

148

00:08:59.670  -->  00:09:02.470
then it should return a number
greater than zero if we should sort
149

149

00:09:02.470  -->  00:09:04.990
greater than the objects
that's being compared to, and
150

150

00:09:04.990  -->  00:09:09.280
of course if the two objects are equal,
the method needs to return zero.
151

151

00:09:09.280  -->  00:09:12.700
And because this is exactly what
the string doc compare to function
152

152

00:09:12.700  -->  00:09:16.600
method does and the string doc compare to
ignore case methods does as well because
153

153

00:09:16.600  -->  00:09:17.500
that's just the same.
154

154

00:09:17.500  -->  00:09:22.240
But it's just ignoring the case in letters
of the alphabet we can use that to
155

155

00:09:22.240  -->  00:09:26.990
implement our comparison You know if you
were creating a compare to method for
156

156

00:09:26.990  -->  00:09:30.640
a class that's got more than one key
field such as people's names for
157

157

00:09:30.640  -->  00:09:35.360
example and where you probably wanna sort
first on surname then on first name and
158

158

00:09:35.360  -->  00:09:39.390
people share the same surname,
you just perform a test of surnames.
159

159

00:09:39.390  -->  00:09:41.930
And return a negative or
positive number as appropriate.
160

160

00:09:41.930  -->  00:09:45.900
Then if the surnames are equal, instead of
returning 0 you then test the first name
161

161

00:09:45.900  -->  00:09:49.700
and return negative, 0, or positive,
depending on how the first names compared.
162

162

00:09:49.700  -->  00:09:52.210
So in other words, as long as
the Comparator method works as we've
163

163

00:09:52.210  -->  00:09:56.250
described, the objects implementing
it can be sorted, as we saw.
164

164

00:09:56.250  -->  00:10:00.630
And again if you go back to our code
just to verify that we can put list
165

165

00:10:03.090  -->  00:10:05.680
and it's gonna be theater.seats.
166

166

00:10:05.680  -->  00:10:09.850
Seat I should say reverse seats.
167

167

00:10:09.850  -->  00:10:15.140
[NOISE]
Your array list of theater.get seats.
168

168

00:10:15.140  -->  00:10:19.820
Remember we did this previously and
then do collections.reverse.
169

169

00:10:21.600  -->  00:10:23.250
Reverse seats.
170

170

00:10:23.250  -->  00:10:26.580
And we're able to printList(reverseSeats).
171

171

00:10:26.580  -->  00:10:29.490
And by doing that.
172

172

00:10:32.210  -->  00:10:34.660
We can obviously see now that I've
got the pricing there as well.
173

173

00:10:34.660  -->  00:10:39.420
We can obviously see now
That the sort is working.
174

174

00:10:39.420  -->  00:10:42.370
Cuz in this case it's starting now
from the basically the opposite
175

175

00:10:42.370  -->  00:10:43.220
of the standard sort.
176

176

00:10:43.220  -->  00:10:46.630
We've done a reversal starting at the
highest element first and working down.
177

177

00:10:46.630  -->  00:10:49.370
So clearly then what I'm saying is
that the compare to method that's been
178

178

00:10:49.370  -->  00:10:52.100
implemented currently
is working just fine.
179

179

00:10:52.100  -->  00:10:56.150
Now with that said, there's also
another way to use the sort method.
180

180

00:10:56.150  -->  00:10:58.160
And that's [INAUDIBLE] comparator, or
181

181

00:10:58.160  -->  00:10:59.770
comparator depending on
how you pronounce it.
182

182

00:10:59.770  -->  00:11:01.920
So it's similar to a comparable.
183

183

00:11:01.920  -->  00:11:06.740
The comparator interface defines
a single method called compare.
184

184

00:11:06.740  -->  00:11:12.530
Unlike comparable the objects to be sorted
don't have to implement comparator.
185

185

00:11:12.530  -->  00:11:17.480
Instead an object of type comparator
can be created with a compare method
186

186

00:11:17.480  -->  00:11:19.950
that can sort the objects
that we're interested in.
187

187

00:11:19.950  -->  00:11:22.400
In this case it's seats of course.
188

188

00:11:22.400  -->  00:11:24.990
And more than one comparator can
be created and it allows for
189

189

00:11:24.990  -->  00:11:27.930
objects to be sorted in different
ways which is pretty cool.
190

190

00:11:27.930  -->  00:11:32.200
So we can either create a comparator
object within an existing class.
191

191

00:11:32.200  -->  00:11:35.910
Or we could create a new class of
implements that compare at our interface.
192

192

00:11:35.910  -->  00:11:39.850
So let's have a go at the first way using
anonymous in a class within theatre.
193

193

00:11:39.850  -->  00:11:43.290
So we're gonna go back to our theatre
class which we're already on and
194

194

00:11:43.290  -->  00:11:51.340
just up here right at the top I'm
going to add static final comparator.
195

195

00:11:53.250  -->  00:11:58.670
This is going to be sate and
procc is what we're going to call it and
196

196

00:11:58.670  -->  00:12:03.470
its new compritor and you can see
it automatically come out the cole.
197

197

00:12:03.470  -->  00:12:05.300
And show us what we need to override and
198

198

00:12:05.300  -->  00:12:09.800
what we're going to do is change
the references there from 0 1 to S 1 its
199

199

00:12:09.800  -->  00:12:14.400
a little bit more reading we're now c1
lets actually call it C it should be C1.
200

200

00:12:15.720  -->  00:12:19.790
C2.
Instead of returning zero,
201

201

00:12:19.790  -->  00:12:23.710
we need to actually add this
to check particular field,
202

202

00:12:23.710  -->  00:12:26.210
so what we're gonna do in this one
is we're gonna check the price so
203

203

00:12:26.210  -->  00:12:32.140
we're gonna sort another In other
words by the price of the tickets or
204

204

00:12:34.010  -->  00:12:40.690
the seats, so we're gonna put if
S1.get price is less than S2.getprice.
205

205

00:12:40.690  -->  00:12:44.420
seat two I should say,
then we're gonna return negative one.
206

206

00:12:44.420  -->  00:12:51.100
Else if s one dot get price
207

207

00:12:51.100  -->  00:12:57.330
is greater than s two or
c two dot get price, we're
208

208

00:12:57.330  -->  00:13:01.890
going to return one otherwise of course
they're equal so we're gonna return zero.
209

209

00:13:01.890  -->  00:13:06.160
So that's how simple that
compared method can be.
210

210

00:13:06.160  -->  00:13:08.490
Now, just to be clear what
we're doing on line 12.
211

211

00:13:08.490  -->  00:13:12.650
It may look like we're instantiating
the compare router interface.
212

212

00:13:12.650  -->  00:13:18.070
But remember from section ten that it's
an anonymous inner class implementing
213

213

00:13:18.070  -->  00:13:18.710
compare writer,
214

214

00:13:18.710  -->  00:13:22.750
and it's providing an implementation
of the single compare method.
215

215

00:13:22.750  -->  00:13:25.180
And as you saw the compare method
itself is fairly straight forward.
216

216

00:13:25.180  -->  00:13:28.920
It has to return the same
results as the method does
217

217

00:13:28.920  -->  00:13:31.220
as we've previous
discussed in other words.
218

218

00:13:31.220  -->  00:13:35.180
Negative if seed one is less than
seed two, zero if the recall, and
219

219

00:13:35.180  -->  00:13:37.710
of course Was positive is seat
1 is greater than seat 2.
220

220

00:13:37.710  -->  00:13:42.130
Now is that said meth is a serious
problem with this method and
221

221

00:13:42.130  -->  00:13:46.870
contenti comparator please make
sure you finish this lecture first
222

222

00:13:46.870  -->  00:13:48.840
because I'm gonna be discussing
the problem soon because.
223

223

00:13:48.840  -->  00:13:50.950
If it was something major,
you need to be aware of.
224

224

00:13:50.950  -->  00:13:54.570
So to see this in action, what we'll
need to do is create a new array.
225

225

00:13:54.570  -->  00:13:57.420
This was seats, and we need to
add a couple of seats to list and
226

226

00:13:57.420  -->  00:14:00.620
then we need to sort them price,
with the cheapest seats first.
227

227

00:14:00.620  -->  00:14:04.220
By parsing our new added
to collections.sort method.
228

228

00:14:04.220  -->  00:14:05.280
So let's go and do that.
229

229

00:14:05.280  -->  00:14:06.610
So we;ll go back to main.
230

230

00:14:07.610  -->  00:14:12.800
And just down here,
what we'll do is we'll add a new
231

231

00:14:12.800  -->  00:14:17.850
list here and a new list of seats and
new list theater dot seat.
232

232

00:14:17.850  -->  00:14:22.130
It's going to be price
seat equals URA list, and
233

233

00:14:22.130  -->  00:14:26.570
it's going to be theater dot get
seats which we've done before.
234

234

00:14:26.570  -->  00:14:29.500
So we've got a copy of our elements now.
235

235

00:14:29.500  -->  00:14:32.390
So what we're going to do is
actually add a couple of seats.
236

236

00:14:32.390  -->  00:14:39.540
We move priceSeats.add, you'll see
why in a minute, .theatre.new Seat.
237

237

00:14:39.540  -->  00:14:43.470
And remember the weird syntax
to instantiate an class.
238

238

00:14:43.470  -->  00:14:47.470
"b00" and we'll call it 13.00 for
the price.
239

239

00:14:47.470  -->  00:14:51.000
And then priceSeats.add.
240

240

00:14:51.000  -->  00:14:55.900
theatre.new making it Seat using that
241

241

00:14:55.900  -->  00:15:00.940
weird inner class to make a constructor
A zero zero and thirteen as well.
242

242

00:15:03.310  -->  00:15:04.850
Next we'll do the sort.
243

243

00:15:04.850  -->  00:15:09.050
So we can do that by
typing collections .sort,
244

244

00:15:09.050  -->  00:15:14.210
and it's gonna be priceSeats, which is
obviously the list we wanna sort on.
245

245

00:15:14.210  -->  00:15:17.760
And it's gonna be Theatre.PRICE_ORDER.
246

246

00:15:17.760  -->  00:15:20.490
So we're passing in again, just to go
back to make sure that it was clear.
247

247

00:15:22.260  -->  00:15:24.880
Comparator as well, and that's our
Comparator in there which we created,
248

248

00:15:24.880  -->  00:15:27.580
which of course was PRICE_ORDER.
249

249

00:15:27.580  -->  00:15:31.450
And now if we print the list after that,
priceSeats.
250

250

00:15:31.450  -->  00:15:32.670
You can see what's happened.
251

251

00:15:32.670  -->  00:15:34.430
Just to make this clear
with the readability,
252

252

00:15:34.430  -->  00:15:36.600
I'll put a dollar sign just so
we know that that is a price.
253

253

00:15:36.600  -->  00:15:39.060
Let us now try running that.
254

254

00:15:39.060  -->  00:15:43.410
And actually I'm gonna be paying
attention so we'll try that again.
255

255

00:15:45.800  -->  00:15:47.680
And obviously another problem here.
256

256

00:15:47.680  -->  00:15:49.050
Actually that should've been a semicolon.
257

257

00:15:50.100  -->  00:15:52.240
Because we've got now, Comparator,
258

258

00:15:52.240  -->  00:15:55.490
and I need to have a semicolon
to finish off that definition.
259

259

00:15:55.490  -->  00:15:57.400
The third time lucky,
we'll try running that again now.
260

260

00:15:59.960  -->  00:16:01.320
And you can see that's
a little bit better now.
261

261

00:16:01.320  -->  00:16:03.860
And we'll just give myself a bit of space.
262

262

00:16:03.860  -->  00:16:04.770
Looking at the last entry.
263

263

00:16:04.770  -->  00:16:07.610
Now the seats are listed in price order.
264

264

00:16:07.610  -->  00:16:11.860
And it's worth noting that sort routines
used is guaranteed to be stable.
265

265

00:16:11.860  -->  00:16:15.100
What that means is that the elements won't
be swapped if they don't need to be.
266

266

00:16:15.100  -->  00:16:18.640
So that all seats with the same
price appear in seat number order.
267

267

00:16:18.640  -->  00:16:24.160
And that's because how they're in to you
C also appeared in the original order so
268

268

00:16:24.160  -->  00:16:27.060
B is your 0 before it
becomes 8 0 0 because
269

269

00:16:27.060  -->  00:16:30.680
that's the order it adds to the list so
if we go back and have a look.
270

270

00:16:30.680  -->  00:16:31.760
Again this is in price order.
271

271

00:16:31.760  -->  00:16:34.320
So we need to arrive to
the end to see those entries.
272

272

00:16:35.470  -->  00:16:37.990
Which has a price of 13.
273

273

00:16:37.990  -->  00:16:40.770
And then you can see b then a 13.
274

274

00:16:40.770  -->  00:16:43.980
And again b00 comes before a00
because that's the order they're added
275

275

00:16:43.980  -->  00:16:45.020
to in the list.
276

276

00:16:45.020  -->  00:16:46.480
So going back to the code.
277

277

00:16:46.480  -->  00:16:51.400
We added that entry first line 36,
B before A, and again the way
278

278

00:16:51.400  -->  00:16:56.070
this sort routine works, elements aren't
swapped if they don't need to be.
279

279

00:16:56.070  -->  00:17:00.420
So in this case, we're looking in the
comparator which is purely based on price.
280

280

00:17:00.420  -->  00:17:02.230
We go back and check that out again.
281

281

00:17:02.230  -->  00:17:05.960
We're just doing a comparison just on
price, which of course is why Is not
282

282

00:17:05.960  -->  00:17:10.250
looking at the seat number to determine
any sort of sort criteria and again
283

283

00:17:10.250  -->  00:17:15.070
the way it works is, if they are equal,
the price was equal, they don't get moved
284

284

00:17:15.070  -->  00:17:18.460
of course that helps performance by not
moving things unless you really have to.
285

285

00:17:18.460  -->  00:17:20.100
So it's.
We've still got a lot to talk about.
286

286

00:17:20.100  -->  00:17:24.030
Now we can add as many
comparators as we want and so
287

287

00:17:24.030  -->  00:17:27.020
we could include one to list the highest
price seats first, for arguments sake.
288

288

00:17:27.020  -->  00:17:29.060
So the comparator doesn't
have to be static but
289

289

00:17:29.060  -->  00:17:33.360
it makes it easy to use if we don’t need
a class instance In order to use it.
290

290

00:17:33.360  -->  00:17:35.160
Now, this example,
as you can see on line 38,
291

291

00:17:35.160  -->  00:17:38.960
we made the comparator study
variable with the theater class,
292

292

00:17:38.960  -->  00:17:42.290
and that's because the theater class
is controlling all excess seats.
293

293

00:17:42.290  -->  00:17:43.220
But thinking about it,
294

294

00:17:43.220  -->  00:17:46.640
it could have made more sense to
include it in the seat class itself.
295

295

00:17:46.640  -->  00:17:50.390
Now, instead,
especially if seat was now an inter class.
296

296

00:17:50.390  -->  00:17:53.250
But had we done that there would have
been no seat in sense available in main
297

297

00:17:53.250  -->  00:17:54.320
to call on.
298

298

00:17:54.320  -->  00:17:57.640
So static would for
that reason be a lot more convenient.
299

299

00:17:57.640  -->  00:18:01.710
And just as a digression before we look
at the problem with our compare adders
300

300

00:18:01.710  -->  00:18:04.410
compare method there's
an interesting suggestion IntelliJ
301

301

00:18:04.410  -->  00:18:06.110
makes about the compare adder.
302

302

00:18:06.110  -->  00:18:08.670
So clicking on its definition
in the theater class
303

303

00:18:08.670  -->  00:18:10.480
Intellij will show you how
to suggest a lock popped.
304

304

00:18:10.480  -->  00:18:13.150
So if we go back and do that so
if we click the definition
305

305

00:18:14.250  -->  00:18:16.770
You can see that Intellijay's
coming out with a couple of ideas.
306

306

00:18:16.770  -->  00:18:21.510
The one here that is interesting is split
into declaration and initialization so
307

307

00:18:21.510  -->  00:18:24.840
we'll go ahead and accept that
suggestion just to see what happens.
308

308

00:18:24.840  -->  00:18:27.610
We'll click on that and
you can see what's happened there.
309

309

00:18:27.610  -->  00:18:32.460
Declaration of price order becomes
a standard final declaration.
310

310

00:18:32.460  -->  00:18:35.680
But Intellijay then inserts
a static initialization block.
311

311

00:18:35.680  -->  00:18:38.230
Into the code that initializes
the price order comparator.
312

312

00:18:38.230  -->  00:18:41.320
And we only recently discussed
static initialization blocks so
313

313

00:18:41.320  -->  00:18:45.170
it's quite good to see a practical use on
it as you can see in this scenario here.
314

314

00:18:45.170  -->  00:18:46.540
Okay so I'm gonna end the video here.
315

315

00:18:46.540  -->  00:18:49.930
I was gonna talk about the final
issue with the compare method but
316

316

00:18:49.930  -->  00:18:52.580
we'll leave that to the next video
given how long this video has gone for.
317

317

00:18:52.580  -->  00:18:53.850
So we'll see you in the next video.
