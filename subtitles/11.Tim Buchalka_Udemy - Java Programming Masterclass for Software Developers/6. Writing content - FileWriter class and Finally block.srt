1
1

00:00:05,180  -->  00:00:10,140
so in the previous video we started work on
remapping our code and we manage to
2

2

00:00:10,140  -->  00:00:14,590
create a locationsp class and we using a
static initialization block to make sure
3

3

00:00:14,590  -->  00:00:19,800
that our data as ypu can see their on line
15 and down to line 41 is only
4

4

00:00:19,800  -->  00:00:23,980
actually created once and again we're
taking the functionality under the main class
5

5

00:00:23,980  -->  00:00:28,100
in terms of creating our locations and
put it into this locations class
6

6

00:00:28,100  -->  00:00:33,100
but it would make more sense to read
from a file rather than hard coding this
7

7

00:00:33,100  -->  00:00:37,360
in Java like this and there's only a few
locations in this sample but the full
8

8

00:00:37,360  -->  00:00:41,550
games actually got a 140 locations and the
exits connecting then together are actually
9

9

00:00:41,550  -->  00:00:46,820
quite complex so storing that information in
a file is a better solution so the first
10

10

00:00:46,820  -->  00:00:51,750
step we need here to do this is to write the
data out to a file now the code in the static
11

11

00:00:51,750  -->  00:00:57,350
initialization block is executed when the
class is loaded and that means that all
12

12

00:00:57,350  -->  00:01:01,680
the data is gonna be available by the time
we are able to execute any methods in the
13

13

00:01:01,680  -->  00:01:06,430
class as a result that means that we can
create a main method to write
14

14

00:01:06,430  -->  00:01:11,440
out the locations and exits data to files
now one of the simplest ways to do that
15

15

00:01:11,440  -->  00:01:15,840
is using a file writer object so let's
give that a go so in the locations
16

16

00:01:15,840  -->  00:01:21,200
class itself I'm gonna create a
static method a main method as we've done
17

17

00:01:21,200  -->  00:01:27,820
before.....and let's
start by writing some code so....
18

18

00:01:27,820  -->  00:01:41,900
....
19

19

00:01:41,900  -->  00:01:47,650
....and we'll
just call the text....
20

20

00:01:47,650  -->  00:01:58,770
...and will look at that error
shortly so for.....
21

21

00:01:59,900  -->  00:02:19,230
....
22

22

00:02:21,930  -->  00:02:29,090
..so the code here again we're gonna fix those
23

23

00:02:29,090  -->  00:02:33,450
errors shortly the code at the moment is quite
simple so it creates a file writer object
24

24

00:02:33,450  -->  00:02:39,380
passes the file name as a parameter to the
constructor then uses the right method to
25

25

00:02:39,380  -->  00:02:43,210
write data to a file then of course once all
the data has been written to a file the
26

26

00:02:43,210  -->  00:02:47,820
file is close as you can see on line
21 now that last step is actually
27

27

00:02:47,820  -->  00:02:52,490
very important and failing to close
streams can really cause problems such as
28

28

00:02:52,490  -->  00:02:58,150
resource leaks rather than and loc files so
if an output file is not closed then the
29

29

00:02:58,150  -->  00:03:03,330
data can become corrupted or the file remain
locked so that no other process is able to
30

30

00:03:03,330  -->  00:03:06,930
use it in actual fact it's so important
that Java 7
31

31

00:03:06,930  -->  00:03:10,770
has introduced a much neater way of dealing
with stream to ensure that they're
32

32

00:03:10,770  -->  00:03:15,210
actually correctly closed and will be
getting to that and using that soon for
33

33

00:03:15,210  -->  00:03:18,210
know we need to understand why
they're actually are errors in the code
34

34

00:03:19,040  -->  00:03:24,460
each line that involves our file writer was showing the same error and If I just hover over it unhandled
35

35

00:03:24,460  -->  00:03:28,710
exception java.io.IOException so I mentioned that theirs two
36

36

00:03:28,710  -->  00:03:33,120
categories of exceptions in Java checked and unchecked exceptions they
37

37

00:03:33,120  -->  00:03:37,760
work in the same way exactly the
same way the difference is that you can't
38

38

00:03:37,760  -->  00:03:42,830
ignore checked exceptions so IOexception is a checked exception so in
39

39

00:03:42,830  -->  00:03:46,350
other words our code is not allowed to
just ignore it so we really have to deal
40

40

00:03:46,350  -->  00:03:51,220
with it in some way and until we do the
program's not even going to compile so
41

41

00:03:51,220  -->  00:03:54,180
now we know how to handle exceptions we
could just catch
42

42

00:03:54,180  -->  00:03:56,540
the exception which will fix the problem
43

43

00:03:56,540  -->  00:04:01,810
so lets start by doing that we are just going to
create a try block after the file writer
44

44

00:04:01,810  -->  00:04:04,710
variable is initialise for first time....
45

45

00:04:04,710  -->  00:04:11,430
....
46

46

00:04:11,430  -->  00:04:17,000
.....
47

47

00:04:19,220  -->  00:04:26,930
....
48

48

00:04:26,930  -->  00:04:33,980
....so that actually fixes the error and for
49

49

00:04:33,980  -->  00:04:39,000
now and the program will actually run now so I'm
gonna have to right click this time to
50

50

00:04:39,000  -->  00:04:43,320
make sure we are running the locations.main and not running the other main.java
51

51

00:04:43,320  -->  00:04:48,270
in the the actual main class so we are
actually running the main method within
52

52

00:04:48,270  -->  00:04:57,570
our locations.java so running that
notice now that locations.text has been created
53

53

00:04:57,570  -->  00:05:04,960
and we can open it in Java in IntelliJ
rather to examine the contents and if I close down the
54

54

00:05:04,960  -->  00:05:09,370
windows so we can see more you noticed
its got a location ID a comma and
55

55

00:05:09,370  -->  00:05:13,460
then the actual description that
continues on we got another location ID
56

56

00:05:13,460  -->  00:05:16,790
another command and another description
and so on and so forth
57

57

00:05:16,790  -->  00:05:21,610
that's pretty much all there is to
writing data to the stream one thing I
58

58

00:05:21,610  -->  00:05:25,330
didn't do which I should really fix now
before we go too much further I should
59

59

00:05:25,330  -->  00:05:28,850
actually have an end of line character so we're I actually write the code here
60

60

00:05:28,850  -->  00:05:33,380
after the get description you really
want to go and put and end of line so I'm gonna
61

61

00:05:33,380  -->  00:05:38,970
add a plus...and run again that should overwrite the existing
62

62

00:05:38,970  -->  00:05:43,560
file we've got and make it a little bit
easier to look at so now that its finished
63

63

00:05:43,560  -->  00:05:44,730
executing
64

64

00:05:44,730  -->  00:05:49,110
close that down and have a look at our location.txt file and
their you go its a lot easier to read this time
65

65

00:05:49,110  -->  00:05:53,590
location i'd command and the actual
description that moves to a new lines and
66

66

00:05:53,590  -->  00:05:55,570
then we can see the other
locations
67

67

00:05:55,570  -->  00:05:59,730
that's it that's pretty much all their is to writing data to to stream the
68

68

00:05:59,730  -->  00:06:04,760
stream is opened in this case by passing
a file name to the file writers constructor
69

69

00:06:04,760  -->  00:06:11,310
you can see on line 19 the data is then written on line
21 using the for loop to go through each
70

70

00:06:11,310  -->  00:06:14,840
location that we've got and then the stream
is closed on line 23
71

71

00:06:16,190  -->  00:06:20,570
there is a problem with this code though and we
have to add a little bit more complexity
72

72

00:06:20,570  -->  00:06:25,680
so the problem is that the error in the
loop that writes the data will cause the catch
73

73

00:06:25,680  -->  00:06:29,890
block to be entered skipping over the call
to the close method so in other words you can
74

74

00:06:29,890  -->  00:06:35,400
see on line 21 if we had some errors
there its going to skip this line 23 which
75

75

00:06:35,400  -->  00:06:38,800
means the files isn't going to be closed and its
gonna skip straight to the catch block
76

76

00:06:38,800  -->  00:06:43,490
on line 25 which we may not want and
ordinarily when dealing with files we would
77

77

00:06:43,490  -->  00:06:48,560
not want to skip leaving a file open like
that even if there was an error so basically
78

78

00:06:48,560  -->  00:06:53,580
as a result the file was not gonna be handled
or properly closed so to handle
79

79

00:06:53,580  -->  00:06:58,060
situations like this you know when
there's clean up code that absolutely must be
80

80

00:06:58,060  -->  00:07:03,460
executed no matter what the Java
exception handy mechanism also has a
81

81

00:07:03,460  -->  00:07:08,660
finally block and theirs an exception raise
in the try block the code in the catch
82

82

00:07:08,660  -->  00:07:13,950
block will for that exception will be executed but then
regardless of what happened the finally
83

83

00:07:13,950  -->  00:07:17,800
block is also executed so you can be
certain by using the finally block that the
84

84

00:07:17,800  -->  00:07:20,140
code in their is always gonna be executed
85

85

00:07:20,140  -->  00:07:23,160
you know as long as the JVM itself
doesn't crash which of course is very
86

86

00:07:23,160  -->  00:07:28,700
unlikely so a try block itself must have
either have a catch or a finally block
87

87

00:07:28,700  -->  00:07:33,370
and it need not have both but it must have at least
one or the other so in fact soon I'm
88

88

00:07:33,370  -->  00:07:37,320
gonna be removing that catch blocks so we can just have try and finally and that is
89

89

00:07:37,320  -->  00:07:41,530
actually quite common when  dealing
with I/O operations so better way to code this then
90

90

00:07:41,530  -->  00:07:45,930
would be to call the close method
in a finally block so let's have a look at
91

91

00:07:45,930  -->  00:07:53,300
doing that so under the catch we can put....
92

92

00:07:54,350  -->  00:08:00,350
....
93

93

00:08:00,350  -->  00:08:07,990
...but that then introduces
94

94

00:08:07,990  -->  00:08:11,940
another error and if hover over it that error and have a look we got a java.ioexception error
95

95

00:08:11,940  -->  00:08:17,570
so unfortunately closed itself also
throws an IOException so we once again
96

96

00:08:17,570  -->  00:08:21,640
get an unhandled exception error and then
we have to wrap the call to close in its
97

97

00:08:21,640  -->  00:08:25,090
own try catch block so we want to be
very careful not to cause more
98

98

00:08:25,090  -->  00:08:28,460
exceptions in the try block so will also
checked that the loc
99

99

00:08:28,460  -->  00:08:32,840
file variables is not null before attempting to
call its close method so go ahead and do
100

100

00:08:32,840  -->  00:08:33,880
that
101

101

00:08:33,880  -->  00:08:45,370
so add a try here so...
102

102

00:08:50,310  -->  00:08:53,520
...and what will do here is just to make sure that we're
not going to potentially have other
103

103

00:08:53,520  -->  00:08:58,300
problems we are gonna put a test here just
to make sure that the loc file...
104

104

00:08:58,300  -->  00:09:05,260
...then and only then we are gonna try
and close it...this type of defensive program
105

105

00:09:05,260  -->  00:09:09,190
really makes programming really make
sense particularly in situations like this
106

106

00:09:09,190  -->  00:09:12,560
when you really don't want something to crash
really want to be sort of a fairly sure
107

107

00:09:12,560  -->  00:09:16,630
and fairly certain that the code is going to
be as resilient as possible so it
108

108

00:09:16,630  -->  00:09:21,170
doesn't crash will actually put a message in their...
109

109

00:09:21,170  -->  00:09:24,170
...
110

110

00:09:26,680  -->  00:09:36,350
then the IOException we just are gonna do an e.printStacktracke we don't do anything else we have finally seen how
111

111

00:09:36,350  -->  00:09:39,970
to write data to an output stream in
java which is good so we will just run this
112

112

00:09:39,970  -->  00:09:46,070
again just to make sure that it does
work and finally block as you can see attempting to close
113

113

00:09:46,070  -->  00:09:49,990
loc file we didn't get any errors and we still got our locations file here
114

114

00:09:49,990  -->  00:09:53,620
still being written to disk which is good so it seems to be working
115

115

00:09:53,620  -->  00:09:58,980
so I've actually covered quite a lot
their including introducing the finally
116

116

00:09:58,980  -->  00:10:02,520
block as I mentioned that is really an
essential part of exception handling
117

117

00:10:03,240  -->  00:10:08,080
now up until Java 7 the code in our locations
main class was pretty much the standard
118

118

00:10:08,080  -->  00:10:11,640
template for writing data to a stream and reading from a stream looks very
119

119

00:10:11,640  -->  00:10:16,600
similar to that but Java 7 introduced an
improvement that actually makes the
120

120

00:10:16,600  -->  00:10:20,500
code quite a bit neater but before looking at that i'm gonna actually gonna cause an
121

121

00:10:20,500  -->  00:10:23,690
exception just so we can see the exception handling in action
122

122

00:10:23,690  -->  00:10:29,200
now there's quite a few ways to break IO Code but all 3 operating systems we could
123

123

00:10:29,200  -->  00:10:33,680
set locations.txt to read only son Linux and OSX we could change
124

124

00:10:33,680  -->  00:10:37,670
ownership to root you can also specify
an invalid path to a file
125

125

00:10:38,180  -->  00:10:42,500
attempting to create a file on disk drive that does not exist on Windows or in an invalid
126

126

00:10:42,500  -->  00:10:49,210
volume in Linux and also the OSX thre easiest way
here is to just delete the file we have written and
127

127

00:10:49,210  -->  00:10:52,980
created a directory with the same name
before running the program
128

128

00:10:52,980  -->  00:10:57,740
again and that will actually work on
all three operating system so let's
129

129

00:10:57,740  -->  00:11:00,880
look at doing that so we can actually
purposely get it to actually come up
130

130

00:11:00,880  -->  00:11:04,670
with an error first is come up here and
just right click that and click on
131

131

00:11:04,670  -->  00:11:09,910
reveal in finder go into their take a note of the location where this is, I'm going to
132

132

00:11:09,910  -->  00:11:14,250
delete it actually what I'm going to do is
just going to copy the file name and I'm gonna
133

133

00:11:14,250  -->  00:11:16,300
need that shortly
134

134

00:11:16,300  -->  00:11:21,950
and delete the location.txt in my case I'm gonna move to trash you just do whatever
135

135

00:11:21,950  -->  00:11:27,760
is equivalent to your operating system
and just to make this real and a bit weird
136

136

00:11:27,760  -->  00:11:33,480
we are gonna click on file new folder and it will be a similar thing for your operating system and call the folder
137

137

00:11:33,480  -->  00:11:38,830
locations.txt so in this case OSX is saying are you sure you want to
138

138

00:11:38,830  -->  00:11:45,670
make the folder.txt sort of recognises that's a problem so click on add because we do
139

139

00:11:45,670  -->  00:11:50,900
want it to be in txt we want to be exactly the same and it is actually a folder as you can see so you want
140

140

00:11:50,900  -->  00:11:55,660
to make sure when you're creating this on Windows or Linux that you actually are
141

141

00:11:55,660  -->  00:11:59,660
creating a folder not just another
file so definitely create a folder as you can see their
142

142

00:11:59,660  -->  00:12:04,520
so when we run the program we should actually
get an error because of course it won't be
143

143

00:12:04,520  -->  00:12:08,820
able to create a file because it's
already folder their with the same name
144

144

00:12:08,820  -->  00:12:17,220
so run that and yes we did actually managed to get an error and you can see it tells us
145

145

00:12:17,220  -->  00:12:22,310
quite clearly java.io file not found
exception locations.txt is a
146

146

00:12:22,310  -->  00:12:26,200
directory so you make it something so similar you should get something
147

147

00:12:26,200  -->  00:12:29,990
very similar in your operating system if
you're not running Mac OS X
148

148

00:12:30,490  -->  00:12:33,510
the bottom line here is that its
telling us that it can't create the file
149

149

00:12:33,510  -->  00:12:36,990
and you can see that it was in the catch
block and also went to the finally block
150

150

00:12:36,990  -->  00:12:42,270
as well so obviously both our bits of
code we're actually triggered when it
151

151

00:12:42,270  -->  00:12:47,800
came up with an error so you might be
wondering why is the file not found exception why is that
152

152

00:12:47,800  -->  00:12:49,540
been caught
153

153

00:12:49,540  -->  00:12:55,070
when we've actually only look for IOExceptions in our code
well the reason for that file not found exception
154

154

00:12:55,070  -->  00:13:00,520
is actually a subclass of IOException
and as a results its caught by our catch block
155

155

00:13:00,520  -->  00:13:03,750
and we can see the message as can see in
the run window to the right hand side
156

156

00:13:04,570  -->  00:13:08,880
in catch block printed and of course we can also see the final block code as well which
157

157

00:13:08,880  -->  00:13:12,350
I mentioned now you may see the message
from the finally block appeared before
158

158

00:13:12,350  -->  00:13:16,190
the stack trace rather than after it that's
really result of the way of the result
159

159

00:13:16,190  -->  00:13:20,260
of the way that the stack traces
is generated the finally block is executed
160

160

00:13:20,260  -->  00:13:25,250
after catch you may also send a message
from the catch block in amongst a stack
161

161

00:13:25,250  -->  00:13:28,700
trace but the programs output will be
printed in the order it happens but the
162

162

00:13:28,700  -->  00:13:32,630
stack trace will appear when its good and
ready basically so notice here that
163

163

00:13:32,630  -->  00:13:36,380
there's no attempt to close the file because remember we had this message here
164

164

00:13:36,380  -->  00:13:40,480
attempting to close location file or loc file that doesn't appear anywhere so
165

165

00:13:40,480  -->  00:13:44,370
that actually wasn't attempted and the
reason that wasn't attempted was because
166

166

00:13:44,370  -->  00:13:48,610
loc file was set to NULL on line 19
then we got this code on line 21
167

167

00:13:48,610  -->  00:13:53,060
trying to create a new object that failed
so therefore loc file was still null
168

168

00:13:53,060  -->  00:13:57,760
and consequently we didn't try and close
the file and of course was never created in
169

169

00:13:57,760  -->  00:14:01,880
the first place so you can see why it can be
very useful to have this code here to test
170

170

00:14:01,880  -->  00:14:05,940
for null before trying to actually do
something because of course if we hadn't done
171

171

00:14:05,940  -->  00:14:12,970
that we would have got a null pointer exception because the loc file wasn't a valid object so before moving on it's
172

172

00:14:12,970  -->  00:14:19,440
going to go back to that folder again so come
up to the project and click on
173

173

00:14:19,440  -->  00:14:26,160
reveal in finder again I'm going to go in to my folder and then delete the folder locations.txt
174

174

00:14:26,160  -->  00:14:31,330
so we can use that
again move to trash do whatever the equivalent is
175

175

00:14:31,330  -->  00:14:35,610
for Windows and Linux if you're on one of
those machines if we run it again we should
176

176

00:14:35,610  -->  00:14:41,290
find it is now working again now our code is working again normally you can see locations.txt on the
177

177

00:14:41,290  -->  00:14:46,860
screen alright I'm gonna actually finished this
video here in the next video we are gonna
178

178

00:14:46,860  -->  00:14:50,910
start out with a mini challenge and
then we are gonna look at enhancing our code and
179

179

00:14:50,910  -->  00:14:56,170
using some other functions built into
Java for reading and writing file so see you
180

180

00:14:56,170  -->  00:14:56,630
in the next video
