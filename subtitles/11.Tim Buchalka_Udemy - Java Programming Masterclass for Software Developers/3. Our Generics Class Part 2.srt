1
1

00:00:05,290  -->  00:00:08,510
Continuing on from our generic
class from the last video, so
2

2

00:00:08,510  -->  00:00:10,220
we actually started this code.
3

3

00:00:10,220  -->  00:00:11,380
We didn't actually run it.
4

4

00:00:11,380  -->  00:00:12,320
So I'll just run it now.
5

5

00:00:13,840  -->  00:00:16,240
Just to confirm that we've actually
got the right number of players,
6

6

00:00:16,240  -->  00:00:18,830
we should get the answer three cuz
we've actually added three there.
7

7

00:00:18,830  -->  00:00:22,170
And you can see we've
got the answer three.
8

8

00:00:22,170  -->  00:00:24,240
But it does actually bring
up interesting issue.
9

9

00:00:24,240  -->  00:00:27,140
There's an obvious problem
which I started talking about.
10

10

00:00:27,140  -->  00:00:31,190
And that's that the first time in this
case, our baseball player, and that's Pat,
11

11

00:00:31,190  -->  00:00:34,460
the first time he actually runs onto the
field and tries to hit the football with
12

12

00:00:34,460  -->  00:00:37,350
his bat, he's probably gonna be
red carded and sent off the field.
13

13

00:00:37,350  -->  00:00:38,350
So in other words,
14

14

00:00:38,350  -->  00:00:42,470
our team class is actually allowing this
to add any kind of player to the team and
15

15

00:00:42,470  -->  00:00:46,550
there's no actual check to see whether
they're the correct type of player.
16

16

00:00:46,550  -->  00:00:50,420
Cuz obviously in the case of the Adelaide
Crows, we've decided that that's
17

17

00:00:50,420  -->  00:00:54,050
a football team so there should be
some way of ensuring that only people,
18

18

00:00:54,050  -->  00:00:57,290
only players who are football
players can be added to that team.
19

19

00:00:57,290  -->  00:01:00,960
And likewise for a baseball player,
only baseball players should be able to
20

20

00:01:00,960  -->  00:01:04,010
be added to a team for that baseball,
and likewise for soccer.
21

21

00:01:04,010  -->  00:01:07,430
So we need some sort of mechanism to
actually make sure that happens so
22

22

00:01:07,430  -->  00:01:10,340
that only the right types of
players can be added to teams.
23

23

00:01:10,340  -->  00:01:12,280
Now there's a few solutions to this.
24

24

00:01:12,280  -->  00:01:16,350
One solution would be to create three
different team classes, so in other words,
25

25

00:01:16,350  -->  00:01:19,300
a football team, a baseball team and
a soccer team are three
26

26

00:01:19,300  -->  00:01:23,140
different classes and ensure that they
only accept the correct player type.
27

27

00:01:23,140  -->  00:01:26,170
But in that case,
the code's gonna be largely identical.
28

28

00:01:26,170  -->  00:01:30,710
So we're gonna be duplicating code and
it's usually never an efficient way to
29

29

00:01:30,710  -->  00:01:34,010
code to actually duplicate codes so
I don't recommend that.
30

30

00:01:34,010  -->  00:01:37,640
And of course that's not to say we
couldn't extend the team class to create
31

31

00:01:37,640  -->  00:01:39,280
three different team types within there,
so
32

32

00:01:39,280  -->  00:01:42,550
sort of have sort of private classes for
each of those team types.
33

33

00:01:42,550  -->  00:01:45,980
But then if we did that, we need to
implement functionality that's unique
34

34

00:01:45,980  -->  00:01:48,570
to each team type in that code as well.
35

35

00:01:48,570  -->  00:01:50,570
So a common code to do
things like add a player,
36

36

00:01:50,570  -->  00:01:54,180
play a game, record a score et cetera
would be in the base team class.
37

37

00:01:54,180  -->  00:01:56,640
But fortunately, Java's got generics,
38

38

00:01:56,640  -->  00:01:58,760
which we're talking about
obviously in this section.
39

39

00:01:58,760  -->  00:02:02,540
And it enables to really specify
type when we're creating our class.
40

40

00:02:02,540  -->  00:02:04,510
And this is exactly what we want here.
41

41

00:02:04,510  -->  00:02:06,840
So what we wanna do is modify
team to be a generic class.
42

42

00:02:06,840  -->  00:02:09,300
So let's go ahead and actually do that,
and we'll see that working.
43

43

00:02:09,300  -->  00:02:11,730
So we're gonna go to our team class.
44

44

00:02:11,730  -->  00:02:12,370
We're gonna come up here.
45

45

00:02:12,370  -->  00:02:14,040
We're gonna start making
some changes to it.
46

46

00:02:14,040  -->  00:02:16,670
So at the moment, obviously,
it's accepting a generic player there.
47

47

00:02:16,670  -->  00:02:18,200
This is in the array list.
48

48

00:02:18,200  -->  00:02:19,310
Also in the addPlayer method.
49

49

00:02:19,310  -->  00:02:21,340
So let's actually make some changes.
50

50

00:02:21,340  -->  00:02:25,470
First so we're going to modify the class
declaration to include the top parameter.
51

51

00:02:25,470  -->  00:02:29,960
So to do that, we use a diamond as we did
before but we put a T in the middle and
52

52

00:02:29,960  -->  00:02:31,920
that's to indicate that
there's gonna be a type there.
53

53

00:02:31,920  -->  00:02:34,400
We also come down here to ArrayList and
we do a similar thing.
54

54

00:02:34,400  -->  00:02:38,160
So instead of player we delete that and
make that T as well.
55

55

00:02:38,160  -->  00:02:40,880
T was all can see it comes up,
and IntelliJ comes up and
56

56

00:02:40,880  -->  00:02:44,970
says this is a type parameter of
com.timbuchalka.t, which is correct.
57

57

00:02:44,970  -->  00:02:48,970
And the third area you wanna change is our
addPlayer, so instead of allowing a player
58

58

00:02:48,970  -->  00:02:52,540
class, we're basically adding the type
parameter again for addPlayer.
59

59

00:02:52,540  -->  00:02:56,000
So again we're changing the type so
we can make this more generic and
60

60

00:02:56,000  -->  00:02:58,210
it's going to work for any type of player.
61

61

00:02:58,210  -->  00:03:02,390
And how this basically works is when we
actually instantiate a class the T will be
62

62

00:03:02,390  -->  00:03:06,020
replaced automatically by Java
with the actual class we're using,
63

63

00:03:06,020  -->  00:03:10,290
with the real type in other words when
we're actually instantiating the class.
64

64

00:03:10,290  -->  00:03:13,080
And that's why we've actually
changed the addPlayer and
65

65

00:03:13,080  -->  00:03:16,390
the ArrayList as well, so
all three changed so that we can actually,
66

66

00:03:16,390  -->  00:03:19,020
we're able to actually do
that sort of type checking.
67

67

00:03:19,020  -->  00:03:21,240
So notice that we're actually
getting an error in our player.
68

68

00:03:21,240  -->  00:03:23,950
And the reason is that we
specify that its type is T,
69

69

00:03:23,950  -->  00:03:27,020
which is a parameterized
type as we've said before.
70

70

00:03:27,020  -->  00:03:31,030
And because this type's not known until
we actually instantiate a class in other
71

71

00:03:31,030  -->  00:03:35,090
words at run time, there's actually no way
for Java to know that an object of type
72

72

00:03:35,090  -->  00:03:38,170
T in this case really does
have a get nine method.
73

73

00:03:38,170  -->  00:03:41,710
So the only sensible thing that
a compiler can do in this situation is to
74

74

00:03:41,710  -->  00:03:43,420
flag an error which is actually
showing on the screen.
75

75

00:03:43,420  -->  00:03:45,120
Now we can't get around that for
the moment.
76

76

00:03:45,120  -->  00:03:49,680
So what we're going to do is we're gonna
cast player the player parameterize type
77

77

00:03:49,680  -->  00:03:53,800
to make that a player type before
attempting to evoke its getName method.
78

78

00:03:53,800  -->  00:03:55,740
So we're not gonna change
the parameter here.
79

79

00:03:55,740  -->  00:03:58,320
We're going to actually change it
when we're actually referencing it.
80

80

00:03:58,320  -->  00:03:59,000
So we're just gonna do this.
81

81

00:03:59,000  -->  00:04:03,260
We're going to cast that to player
cuz we know ultimately it is going to
82

82

00:04:03,260  -->  00:04:05,080
be a player object, like so.
83

83

00:04:05,080  -->  00:04:08,060
We need to actually put two
brackets there for that to work.
84

84

00:04:08,060  -->  00:04:11,210
Player and then put another bracket
there and that should fix that up.
85

85

00:04:11,210  -->  00:04:15,270
And likewise with this one,
you need to the cast as well,
86

86

00:04:15,270  -->  00:04:19,510
player, player and bracket to fix it.
87

87

00:04:20,780  -->  00:04:21,630
And that fixes it as well.
88

88

00:04:21,630  -->  00:04:24,790
Now it is a solution but
it's a pretty ugly cast,
89

89

00:04:24,790  -->  00:04:28,720
in the sense that we're invoking
a method on a cast object and
90

90

00:04:28,720  -->  00:04:32,810
we need parenthesis around the cast
before we can use getName.
91

91

00:04:32,810  -->  00:04:35,190
But do not fear, it's only temporary,
very soon we can see.
92

92

00:04:35,190  -->  00:04:38,020
I'll actually show you how you
can remove the need to do this.
93

93

00:04:38,020  -->  00:04:40,070
But this is okay,
that's out of trouble for now.
94

94

00:04:40,070  -->  00:04:41,530
Or yes working through our code.
95

95

00:04:41,530  -->  00:04:44,230
So getting back to our main method now,
to our main class and
96

96

00:04:44,230  -->  00:04:48,080
then to our main method, you can see that
there's actually no errors at the moment.
97

97

00:04:48,080  -->  00:04:52,810
But if we actually have a look at some of
these warnings, we're getting an uncheck
98

98

00:04:52,810  -->  00:04:56,790
call to add player T as a member
of raw type com.timbuchalka.team.
99

99

00:04:56,790  -->  00:05:00,180
So I talked about raw types in
the previous video and what they were and
100

100

00:05:00,180  -->  00:05:04,130
how to get around them and you also
saw why we shouldn't be using them.
101

101

00:05:04,130  -->  00:05:08,260
So with that said the program is still
going to run, but poor old pat will still
102

102

00:05:08,260  -->  00:05:12,530
be given a red card, so in other words
we're not validating the type of player.
103

103

00:05:12,530  -->  00:05:14,330
It gives the particular type of team.
104

104

00:05:14,330  -->  00:05:18,330
But we can actually fix that quite easily
by specifying what type of team our
105

105

00:05:18,330  -->  00:05:20,240
football team variable should be.
106

106

00:05:20,240  -->  00:05:22,600
So team now has the ability to
accept the type of argument.
107

107

00:05:22,600  -->  00:05:24,720
That's what we've just
changed in the team class.
108

108

00:05:24,720  -->  00:05:26,420
So what we have to do
is provide it with one.
109

109

00:05:26,420  -->  00:05:29,560
So we're gonna go back to our
declaration for the adelaideCrows.
110

110

00:05:29,560  -->  00:05:30,540
We're gonna change that.
111

111

00:05:30,540  -->  00:05:32,440
So we're gonna add
the type argument to that.
112

112

00:05:32,440  -->  00:05:35,230
That's going to be FootballPlayer.
113

113

00:05:35,230  -->  00:05:38,550
So once we've done that, we still actually
got an error here, unchecked assignment,
114

114

00:05:38,550  -->  00:05:40,670
because what we haven't done is
we haven't added the diamond.
115

115

00:05:40,670  -->  00:05:43,100
So we need to add
the diamond after the team.
116

116

00:05:43,100  -->  00:05:45,710
Now they're actually using it to
the left in the declaration section, so
117

117

00:05:45,710  -->  00:05:48,890
I'm going to put the diamond in there now,
and that now removes that error.
118

118

00:05:48,890  -->  00:05:52,610
So we've got a proper assignment
about generic class now.
119

119

00:05:52,610  -->  00:05:56,240
So we've actually indicated that we're
gonna be using the FootballPlayer, and
120

120

00:05:56,240  -->  00:05:59,190
there's a sequence that during that
you can see now Joe was added.
121

121

00:05:59,190  -->  00:06:04,180
And the reason that Joe was valid and it's
not telling us that there's a problem is
122

122

00:06:04,180  -->  00:06:06,790
that he was assigned as a football player.
123

123

00:06:06,790  -->  00:06:10,430
But in here, the other two, Pat and
Beckham, cuz our baseball players and
124

124

00:06:10,430  -->  00:06:13,600
soccer players, that ain't meet
the criteria for this top now,
125

125

00:06:13,600  -->  00:06:15,870
and it's actually being
flagged as an error.
126

126

00:06:15,870  -->  00:06:17,980
So it's actually an error
not just a warning.
127

127

00:06:17,980  -->  00:06:21,560
It's telling us that it physically can't
add those to this class anymore based on
128

128

00:06:21,560  -->  00:06:22,340
the definition.
129

129

00:06:22,340  -->  00:06:25,810
So in other words this particular
instance of team is now only going to
130

130

00:06:25,810  -->  00:06:27,240
accept football players and
131

131

00:06:27,240  -->  00:06:30,660
attempts to add Pat and Beckham,
and there was showing [INAUDIBLE].
132

132

00:06:30,660  -->  00:06:32,980
So let's give good old
Pat a chance to shine.
133

133

00:06:32,980  -->  00:06:36,690
So what we're going to do is we're
gonna accommodate these first, tab,
134

134

00:06:36,690  -->  00:06:37,590
get rid of those.
135

135

00:06:37,590  -->  00:06:40,270
And let's actually add another class.
136

136

00:06:40,270  -->  00:06:42,840
We're gonna call it team BaseballPlayer.
137

137

00:06:44,280  -->  00:06:45,830
We'll call it baseballTeam.
138

138

00:06:45,830  -->  00:06:50,650
I'll get rid of player team,
we'll call it baseballTeam = new Team.
139

139

00:06:50,650  -->  00:06:55,150
Yeah, we need to add the diamonds if we're
actually using that on the left-hand side
140

140

00:06:55,150  -->  00:06:59,460
which we are for your type assignment and
that's the type of team like Chicago Cubs
141

141

00:06:59,460  -->  00:07:02,840
which is a baseball team in America,
for those who don't know.
142

142

00:07:02,840  -->  00:07:08,500
And we can now successfully do
baseballTeam.addPlayer(pat).
143

143

00:07:08,500  -->  00:07:11,300
Now that will work quite nicely,
because again Pat is,
144

144

00:07:11,300  -->  00:07:14,320
he's been defined up here
as a baseball player.
145

145

00:07:14,320  -->  00:07:18,690
He's a type baseball player, and
we've defined that as the team of being of
146

146

00:07:18,690  -->  00:07:22,630
type baseball player, so consequently he's
able to be added without any problems.
147

147

00:07:22,630  -->  00:07:25,100
But with that said,
there's still some problems here.
148

148

00:07:25,100  -->  00:07:28,750
And at the moment, the top parameter T,
in our team class can be applied,
149

149

00:07:28,750  -->  00:07:32,470
can be supplied rather, any type,
except primitive types such as int, so
150

150

00:07:32,470  -->  00:07:34,140
in other words, any object.
151

151

00:07:34,140  -->  00:07:35,670
So we're not doing any validation of that.
152

152

00:07:35,670  -->  00:07:42,440
So we can actually do something like,
for example,
153

153

00:07:42,440  -->  00:07:47,840
Team<s> brokenTeam = new Team.</s>
154

154

00:07:47,840  -->  00:07:52,640
And this might work
which it won't work and
155

155

00:07:52,640  -->  00:07:58,250
if we do something like
brokenTeam.addPlayer,
156

156

00:07:58,250  -->  00:08:02,800
no-one, the string's in valid type.
157

157

00:08:02,800  -->  00:08:04,930
And as you can see,
there's no compilation errors.
158

158

00:08:04,930  -->  00:08:06,070
We're just getting a warning up here,
159

159

00:08:06,070  -->  00:08:08,540
because Beckham's actually
not in use at the moment.
160

160

00:08:08,540  -->  00:08:12,330
But the problem with this is, is gonna be
the cast when we actually go to run this.
161

161

00:08:12,330  -->  00:08:18,070
So if we actually run this code
we actually get an exception.
162

162

00:08:18,070  -->  00:08:22,150
An exception has got to do with the fact
that java.lang.String cannot be cast to
163

163

00:08:22,150  -->  00:08:23,710
com.timbuchalka.Player.
164

164

00:08:23,710  -->  00:08:26,770
And of course if you remember
going back to our team class,
165

165

00:08:26,770  -->  00:08:28,580
we actually defined that in here.
166

166

00:08:28,580  -->  00:08:32,460
We actually added this ugly cast
to get the .getName to work.
167

167

00:08:32,460  -->  00:08:37,290
So what we really need is some sort of way
to validate the type of class actually
168

168

00:08:37,290  -->  00:08:39,780
when we're using it for this team.
169

169

00:08:39,780  -->  00:08:44,550
So in other words, we need the ability to
restrict the type that can be provided for
170

170

00:08:44,550  -->  00:08:48,710
this T argument from the T
from the team blast.
171

171

00:08:48,710  -->  00:08:52,220
Now the good thing about that is that
Java also provides a mechanism for
172

172

00:08:52,220  -->  00:08:55,010
restricting the types that can
be used as type arguments.
173

173

00:08:55,010  -->  00:08:57,600
They actually call these
bounded type parameters.
174

174

00:08:57,600  -->  00:09:00,280
By using those you can provide
them with an upper bound.
175

175

00:09:00,280  -->  00:09:03,160
So I'm gonna explain these terms and more
data once we've seen them in action, but
176

176

00:09:03,160  -->  00:09:07,150
let's actually change the declaration
of our team class first, and
177

177

00:09:07,150  -->  00:09:08,040
then we'll go through it.
178

178

00:09:08,040  -->  00:09:11,600
So at the moment we've got team, and
then we've got the type in diamond,
179

179

00:09:11,600  -->  00:09:12,640
as you can see there.
180

180

00:09:12,640  -->  00:09:16,060
But we can actually change
this to put extends Player,
181

181

00:09:16,060  -->  00:09:19,640
noting that I'm actually
typing it within the diamond.
182

182

00:09:19,640  -->  00:09:21,800
So T extends player now.
183

183

00:09:21,800  -->  00:09:26,000
If you go back now to our main class, cuz
we've done that we're now actually getting
184

184

00:09:26,000  -->  00:09:27,440
an error here and
notice it's not a warning.
185

185

00:09:27,440  -->  00:09:31,550
It's actually an error to say
java.lang.String is not within its bound.
186

186

00:09:31,550  -->  00:09:35,790
It should extend com.timbuchalka.Player,
so that's our way of actually
187

187

00:09:35,790  -->  00:09:39,700
restricting the type of class that
we can actually use for team.
188

188

00:09:39,700  -->  00:09:43,710
Now just wrapping that up again, so
basically what we've said is that we've
189

189

00:09:43,710  -->  00:09:48,090
told Java that the type parameter we'll
accept for this class when using generics,
190

190

00:09:48,090  -->  00:09:51,620
is gonna be any type that extends
from player or subclass of player.
191

191

00:09:51,620  -->  00:09:54,990
So in other words by typing it like
this with this extends Player,
192

192

00:09:54,990  -->  00:09:57,030
Player is set to be the upper bound of T.
193

193

00:09:57,030  -->  00:10:01,060
And of course T as I've mentioned
earlier is a bounded type parameter.
194

194

00:10:01,060  -->  00:10:04,860
So if we attempt to use any class in other
words that is not derived from Player,
195

195

00:10:04,860  -->  00:10:07,610
we're gonna get that error which
was seen here in main now.
196

196

00:10:07,610  -->  00:10:10,140
And as a consequence of that
cuz we've actually done that,
197

197

00:10:10,140  -->  00:10:12,780
the good news is we can go back to
our code again, go back to team,
198

198

00:10:12,780  -->  00:10:15,080
and we can actually get rid of this cast.
199

199

00:10:15,080  -->  00:10:17,090
So we can actually remove that and
200

200

00:10:17,090  -->  00:10:20,360
go back to what it was before
which is just player.getName.
201

201

00:10:20,360  -->  00:10:23,330
So I'm gonna do that, like so.
202

202

00:10:23,330  -->  00:10:24,640
And for the next one.
203

203

00:10:27,280  -->  00:10:31,350
And again the reason why I want to do
that is because of the bounded top
204

204

00:10:31,350  -->  00:10:33,210
parameter we've put up here,
205

205

00:10:33,210  -->  00:10:37,590
we've said that all valid upper bounds
of T have to extend from players.
206

206

00:10:37,590  -->  00:10:39,710
Or as a consequence Java then knows that,
okay,
207

207

00:10:39,710  -->  00:10:44,020
so in other words Java now knows that the
top T in that player extends from player.
208

208

00:10:44,020  -->  00:10:46,580
So it's gonna have all its methods
including getName of player.
209

209

00:10:46,580  -->  00:10:48,410
So basically there's no longer
an error and there's no need for
210

210

00:10:48,410  -->  00:10:50,250
you to actually add that cast anymore.
211

211

00:10:50,250  -->  00:10:52,350
Now going back to our main method again,
so
212

212

00:10:52,350  -->  00:10:55,020
let's actually change now this team here.
213

213

00:10:55,020  -->  00:10:57,110
We're at the moment the brokenTeam
to be a soccer team, so
214

214

00:10:57,110  -->  00:11:02,260
we can type SoccerPlayer,
brokenTeam = new Team, this won't work.
215

215

00:11:02,260  -->  00:11:04,800
And notice how it's still
going to come up okay.
216

216

00:11:04,800  -->  00:11:08,000
We've defined a new team even
though we haven't changed the name.
217

217

00:11:08,000  -->  00:11:12,200
But the important part here is this next
declaration is brokenTeam.addPlayer,
218

218

00:11:12,200  -->  00:11:14,140
we're passing the string.
219

219

00:11:14,140  -->  00:11:15,410
Java's also showing an error for
220

220

00:11:15,410  -->  00:11:17,840
that when we try to pass
a string to the addPlayer method.
221

221

00:11:17,840  -->  00:11:21,040
And again this is exactly what we want
because we've defined the addPlayer method
222

222

00:11:21,040  -->  00:11:26,780
and the class to require us to use the
player class or a subclass of player and
223

223

00:11:26,780  -->  00:11:29,830
obviously string isn't there and
that's why we're actually seeing an error.
224

224

00:11:29,830  -->  00:11:33,840
So if we actually replace that string
with our soccer player Beckham we
225

225

00:11:33,840  -->  00:11:35,630
actually see that the error goes away,
226

226

00:11:35,630  -->  00:11:39,360
and we've got a tick in the top
right-hand corner and no warnings either.
227

227

00:11:39,360  -->  00:11:41,950
So before going on to
the challenge in the next video
228

228

00:11:41,950  -->  00:11:44,580
just wanna discuss a few other points.
229

229

00:11:44,580  -->  00:11:46,290
Firstly an argument passed for
230

230

00:11:46,290  -->  00:11:48,910
a type parameter can either be a class or
an interface.
231

231

00:11:48,910  -->  00:11:50,520
So you can actually use
interfaces as well.
232

232

00:11:50,520  -->  00:11:52,770
So although we use the player
of class in these examples,
233

233

00:11:52,770  -->  00:11:54,270
this is going back to team.
234

234

00:11:54,270  -->  00:11:55,740
We use the player class there.
235

235

00:11:55,740  -->  00:11:58,190
You could've declared team to
accept an interface instead.
236

236

00:11:58,190  -->  00:12:00,500
And that's certainly
valid to do that in Java.
237

237

00:12:00,500  -->  00:12:03,350
And the other thing to note is that
interfaces themselves can also
238

238

00:12:03,350  -->  00:12:04,960
specify type parameters.
239

239

00:12:04,960  -->  00:12:08,860
So in other words you can create instances
of a class that implement an interface,
240

240

00:12:08,860  -->  00:12:11,670
and then you can ensure that
the interface methods you implement
241

241

00:12:11,670  -->  00:12:14,650
act on a specific type of object or
objects.
242

242

00:12:14,650  -->  00:12:17,670
And we've seen that in previous examples
when we used the list string for
243

243

00:12:17,670  -->  00:12:21,890
example, this was an interface that
takes a generic type parameter.
244

244

00:12:21,890  -->  00:12:24,420
And the usage is the same as it is for
class.
245

245

00:12:24,420  -->  00:12:28,130
Now we also used a single bound when
we specify the team top parameter, so
246

246

00:12:28,130  -->  00:12:30,670
restricting teams to being created for
247

247

00:12:30,670  -->  00:12:34,590
objects that we'll inherit from the player
class or some class of player only.
248

248

00:12:34,590  -->  00:12:36,830
Now Java does allow multiple bounds,
249

249

00:12:36,830  -->  00:12:40,700
although say you can have class T extends
Player in coach and manager, for example,
250

250

00:12:40,700  -->  00:12:44,270
to allow multiple instances of player
coach or manager to be added to the team.
251

251

00:12:44,270  -->  00:12:47,700
But with that in mind, the normal
inheritance implements rules still apply.
252

252

00:12:47,700  -->  00:12:50,690
So in other words, you can only
extend from the single class but
253

253

00:12:50,690  -->  00:12:51,830
multiple interfaces.
254

254

00:12:51,830  -->  00:12:54,920
So basically if you wanna do this with
more than one class you'll need to use
255

255

00:12:54,920  -->  00:12:56,690
interfaces for those other types as well.
256

256

00:12:56,690  -->  00:12:59,920
And the other thing to keep in mind is
if you're specifying multiple bounds,
257

257

00:12:59,920  -->  00:13:03,160
then the class must be listed first cuz
otherwise Java's gonna raise an error
258

258

00:13:03,160  -->  00:13:04,730
when you try to actually compile it.
259

259

00:13:04,730  -->  00:13:07,010
In other words class first and
then interfaces.
260

260

00:13:07,010  -->  00:13:09,400
And the way you do that just briefly
we're not gonna actually add the code.
261

261

00:13:09,400  -->  00:13:16,180
They'll enable you put something like &
Coach, & Manager for argument's sake.
262

262

00:13:16,180  -->  00:13:19,600
That would be the syntax
you would actually use.
263

263

00:13:19,600  -->  00:13:21,510
But obviously you can only have one class,
so
264

264

00:13:21,510  -->  00:13:25,330
these two here with this scenario
will actually have to be interfaces.
265

265

00:13:25,330  -->  00:13:28,160
So I just wanna confirm that that is
actually the syntax if you're wanting to
266

266

00:13:28,160  -->  00:13:29,070
use multiple bounds.
267

267

00:13:29,070  -->  00:13:32,630
So you put the player,
in this case the class first,
268

268

00:13:32,630  -->  00:13:35,320
then you actually put the interfaces
after that if you wanted to do that.
269

269

00:13:35,320  -->  00:13:37,130
Obviously, we're not doing
that in this example so
270

270

00:13:37,130  -->  00:13:38,970
I'm going to actually remove those.
271

271

00:13:38,970  -->  00:13:42,440
And obviously in the case of moddable
types, you have to then include code to
272

272

00:13:42,440  -->  00:13:46,240
check what type of objects you're dealing
with before in breaking these methods,
273

273

00:13:46,240  -->  00:13:49,830
because it wouldn't be just in this case
just the one class which was player and
274

274

00:13:49,830  -->  00:13:52,080
we need a little more code
to actually to do that.
275

275

00:13:52,080  -->  00:13:53,500
And finally SoccerPlayer and
276

276

00:13:53,500  -->  00:13:56,570
also FootballPlayer are both some
classes of player as we know.
277

277

00:13:56,570  -->  00:13:58,830
So obviously there is
a relationship between them, so
278

278

00:13:58,830  -->  00:14:02,370
either can be used when calling a method
that expects a player for example.
279

279

00:14:02,370  -->  00:14:06,280
But the important thing here to remember
is that there's no relationship between
280

280

00:14:06,280  -->  00:14:06,880
something like this.
281

281

00:14:06,880  -->  00:14:11,490
So if you'd look at the list manager,
List<s>,</s>
282

282

00:14:11,490  -->  00:14:13,810
and List<FootballPlayer>,
283

283

00:14:13,810  -->  00:14:19,640
now I'll just add those even though we're
not gonna do anything more with them.
284

284

00:14:20,660  -->  00:14:23,980
So there's basically no relationship
in this case between those two.
285

285

00:14:23,980  -->  00:14:27,250
And the reason is because neither of
them are a subtype of this player.
286

286

00:14:27,250  -->  00:14:31,050
I do have a common parent, but
the common parent in this case is List.
287

287

00:14:31,050  -->  00:14:32,220
So I hope that makes sense.
288

288

00:14:32,220  -->  00:14:35,920
The bottom line is for a code,
probably a lot of the time with generics,
289

289

00:14:35,920  -->  00:14:39,070
you'll probably be doing something like
this where you'll only be extending or
290

290

00:14:39,070  -->  00:14:41,270
using one class and maybe an interface.
291

291

00:14:41,270  -->  00:14:45,410
But if you do need to use multiple bounds,
you'll need to specify the ampersand and
292

292

00:14:45,410  -->  00:14:48,070
then obviously also
the interfaces as well.
293

293

00:14:48,070  -->  00:14:51,370
And just one more thing we need to look at
before we actually get to the challenge,
294

294

00:14:51,370  -->  00:14:54,720
so the team class has got fields, check
how many games were won, tied or lost, but
295

295

00:14:54,720  -->  00:14:56,490
we haven't actually made use of them yet.
296

296

00:14:56,490  -->  00:14:58,390
So we do include a match result method.
297

297

00:14:58,390  -->  00:15:00,320
So let's make some calls
on it now in main,
298

298

00:15:00,320  -->  00:15:03,660
just to record the game results
before we discuss the method ball.
299

299

00:15:03,660  -->  00:15:05,740
So I'm just going to actually copy and
paste some code here.
300

300

00:15:05,740  -->  00:15:10,550
And we'll go back to main, paste this team
in, paste this code and it should say,
301

301

00:15:10,550  -->  00:15:11,120
like so.
302

302

00:15:11,120  -->  00:15:13,290
And you're gonna change
that to adelaideCrows.
303

303

00:15:15,060  -->  00:15:18,840
Then I'm also gonna go
adelaideCrows.matchResult.
304

304

00:15:18,840  -->  00:15:22,940
And I'm gonna type fremantle, 2, 1,
305

305

00:15:22,940  -->  00:15:26,580
and adelaideCrows.matchResult,
306

306

00:15:26,580  -->  00:15:31,160
.matchResult(baseballTeam, 1, 1).
307

307

00:15:31,160  -->  00:15:35,010
So, if we actually run that, basically
it does seem to be doing something but
308

308

00:15:35,010  -->  00:15:37,740
we're not actually getting
a lot of feedback from it.
309

309

00:15:37,740  -->  00:15:41,310
Now, the matchResult method,
if we go back to that and have a look,
310

310

00:15:41,310  -->  00:15:45,000
you can see that it does actually take
a team object called opponent and
311

311

00:15:45,000  -->  00:15:47,330
two ints which is our score and
their score.
312

312

00:15:47,330  -->  00:15:50,370
If our score is greater than their
score and then we've won, so we've won,
313

313

00:15:50,370  -->  00:15:52,790
as incremented as you can
see in this code here.
314

314

00:15:52,790  -->  00:15:55,550
Similarly for tied and lost,
we actually go through that process.
315

315

00:15:55,550  -->  00:15:58,390
The scores are equal, tied,
otherwise we indicate that it's lost.
316

316

00:15:58,390  -->  00:16:00,960
And that takes care of the team
that matchResult's called from, but
317

317

00:16:00,960  -->  00:16:02,700
the opponent also needs
its fields updating.
318

318

00:16:02,700  -->  00:16:05,270
And that's why we've actually
got this additional call here.
319

319

00:16:05,270  -->  00:16:07,910
So we do that by invoking the opponent's
matchResult method as well.
320

320

00:16:07,910  -->  00:16:11,750
And this time obviously we're passing
null for the opponent argument.
321

321

00:16:11,750  -->  00:16:15,130
And only when invoking the opponent's
matchResult method, if opponent is not
322

322

00:16:15,130  -->  00:16:18,610
null, otherwise it would end up calling
the matchResult of the first team again,
323

323

00:16:18,610  -->  00:16:19,580
on and on and on again.
324

324

00:16:19,580  -->  00:16:21,600
We'll get into an infinite loop.
325

325

00:16:21,600  -->  00:16:23,810
So let's actually just print and
aug message here so
326

326

00:16:23,810  -->  00:16:26,640
we'll put something like this, just to so
we've got a bit more feedback.
327

327

00:16:26,640  -->  00:16:30,350
We'll add a variable
called the message string.
328

328

00:16:30,350  -->  00:16:35,050
Message, and let's set that up
329

329

00:16:35,050  -->  00:16:39,920
to be message = beat, if a tied,
330

330

00:16:39,920  -->  00:16:45,320
we're gonna add message = whoops,
331

331

00:16:45,320  -->  00:16:52,630
drew with, and
last message = lost to, like so.
332

332

00:16:52,630  -->  00:16:58,290
And if opponent is not equal to null we're
actually gonna put the result there so
333

333

00:16:58,290  -->  00:17:04,560
we're gonna put System.out, this.getName,
+ message, + opponent.getName.
334

334

00:17:04,560  -->  00:17:07,210
Just so we've got that bit
of output on the screen.
335

335

00:17:07,210  -->  00:17:09,190
And notice here that we're also
only printing the message for
336

336

00:17:09,190  -->  00:17:11,730
the initial team, so we're doing that
test for its null equal to null.
337

337

00:17:11,730  -->  00:17:15,250
This makes sense, but because we're
printing the name of the opponent,
338

338

00:17:15,250  -->  00:17:17,940
we get an error if we take this part
of the message outside of the check for
339

339

00:17:17,940  -->  00:17:19,140
opponent be null.
340

340

00:17:19,140  -->  00:17:21,780
So let's actually run this.
341

341

00:17:21,780  -->  00:17:24,040
And you see we're getting some output now.
342

342

00:17:24,040  -->  00:17:27,380
And drew, we've got a problem there
with the way that I've typed in drew.
343

343

00:17:27,380  -->  00:17:28,880
I need to put a space there.
344

344

00:17:28,880  -->  00:17:30,940
So I'll go back to there and run it again.
345

345

00:17:33,780  -->  00:17:36,330
And you can see it seems we're
getting better feedback now.
346

346

00:17:36,330  -->  00:17:37,550
Hawthorn beat Fremantle.
347

347

00:17:37,550  -->  00:17:39,580
Hawthorn lost to Adelaide Crows.
348

348

00:17:39,580  -->  00:17:40,680
Adelaide Crows beat Fremantle.
349

349

00:17:40,680  -->  00:17:42,320
Adelaide Crows drew with Chicago Cubs.
350

350

00:17:42,320  -->  00:17:45,590
Now, can you spot a problem
with matchResult yet?
351

351

00:17:45,590  -->  00:17:48,330
So the Adelaide Crows drew
against the Chicago Cubs.
352

352

00:17:48,330  -->  00:17:49,660
What's going on there?
353

353

00:17:49,660  -->  00:17:52,760
But the Adelaide Crows played football,
and of course Cubs played baseball.
354

354

00:17:52,760  -->  00:17:54,300
So that's rather an odd match result.
355

355

00:17:54,300  -->  00:17:57,900
So what we really wanna do here is make
sure that only the correct team type
356

356

00:17:57,900  -->  00:18:00,490
can be passed to the matchResult
method as well, yeah, and
357

357

00:18:00,490  -->  00:18:02,400
sort of any object of type team.
358

358

00:18:02,400  -->  00:18:04,440
So you can probably figure
out how to do that now.
359

359

00:18:04,440  -->  00:18:06,290
So if we go back to our code again and
360

360

00:18:06,290  -->  00:18:10,210
I'll just bring up the project window
again and close down a run window.
361

361

00:18:10,210  -->  00:18:11,520
Go back to team again.
362

362

00:18:12,520  -->  00:18:13,500
So we need to do something in here.
363

363

00:18:13,500  -->  00:18:16,380
We can probably figure out what we
need to do to make sure that happens.
364

364

00:18:16,380  -->  00:18:19,800
We need to make use of its generic type
essentially which we haven't been doing.
365

365

00:18:19,800  -->  00:18:23,630
So we're gonna change that to use
the generic type which we've defined for
366

366

00:18:23,630  -->  00:18:25,040
this class.
367

367

00:18:25,040  -->  00:18:28,970
So now if we do that and go back to our
main method, it should say we're now
368

368

00:18:28,970  -->  00:18:32,820
correctly getting this error,
and saying that Adelaide Crows,
369

369

00:18:32,820  -->  00:18:36,480
well it's best to only be using football
players cuz that's how we've defined
370

370

00:18:36,480  -->  00:18:40,330
the Adelaide Crows up here as
to be of team football player.
371

371

00:18:40,330  -->  00:18:44,330
So Java's quite correctly indicating
that it's now a compile time error.
372

372

00:18:44,330  -->  00:18:45,400
So this video's gone on for long enough.
373

373

00:18:45,400  -->  00:18:47,820
So what I'm going to do
is stop the video here.
374

374

00:18:47,820  -->  00:18:49,640
In the next video we'll continue on, and
375

375

00:18:49,640  -->  00:18:53,020
we'll just finish off a few other things
to do with the way we've set this up.
376

376

00:18:53,020  -->  00:18:54,790
And then we'll move on to the challenge.
377

377

00:18:54,790  -->  00:18:56,250
So, I'll see you in that next video.
