WEBVTT
1
1

00:00:04.700  -->  00:00:08.000
So continuing on from the last video
when we're talking about Final
2

2

00:00:08.000  -->  00:00:09.960
we've created this base class and
3

3

00:00:09.960  -->  00:00:13.940
we've created some base code to
store passwords and to encrypt it.
4

4

00:00:13.940  -->  00:00:17.070
So far so good but
the problem could exist if someone
5

5

00:00:17.070  -->  00:00:20.200
overrides the store password
method in a subclass.
6

6

00:00:20.200  -->  00:00:22.570
So what could potentially happen
we'll just go back to the class.
7

7

00:00:23.780  -->  00:00:27.800
So as you can see in a store password
method, we've got just a message saying
8

8

00:00:27.800  -->  00:00:31.010
saving password as this
starting encrypted password and
9

9

00:00:31.010  -->  00:00:36.040
obviously encrypted password was encrypted
when we call the encryptDecrypt.
10

10

00:00:36.040  -->  00:00:39.100
But we're actually just quite we're
just using the this starting encrypt
11

11

00:00:39.100  -->  00:00:40.470
password variable.
12

12

00:00:40.470  -->  00:00:43.560
But what would prevent us for
someone from extending this class and
13

13

00:00:43.560  -->  00:00:45.710
then changing that Method itself.
14

14

00:00:45.710  -->  00:00:48.960
So, to show you how to do that,
I'm going to create a new class.
15

15

00:00:48.960  -->  00:00:51.820
I'm going to call it extended password.
16

16

00:00:54.070  -->  00:01:01.500
And what we are going to do with that,
is we're going to extend from password.
17

17

00:01:01.500  -->  00:01:04.120
And we are going to do
something like private ent.
18

18

00:01:06.030  -->  00:01:08.610
Decrypted password.
19

19

00:01:08.610  -->  00:01:10.430
>> [NOISE]
>> And
20

20

00:01:10.430  -->  00:01:14.930
then we're going to create the constructor
and the constructor is going to.
21

21

00:01:14.930  -->  00:01:17.520
Actually we'll select none from that.
22

22

00:01:17.520  -->  00:01:19.130
Then we'll add one manually, password.
23

23

00:01:19.130  -->  00:01:20.970
But it's gonna draw a super password but
24

24

00:01:20.970  -->  00:01:26.000
then we're gonna do this dot
decrypted password equals password.
25

25

00:01:26.000  -->  00:01:29.500
Noting when I'm saying password and
not the encrypted one.
26

26

00:01:29.500  -->  00:01:32.220
And then just to show that
we're going to override
27

27

00:01:35.110  -->  00:01:40.020
the store password method and then instead
of calling super what we're going to do
28

28

00:01:40.020  -->  00:01:44.340
which of course we can do in any
method that we override Print out
29

29

00:01:46.120  -->  00:01:52.460
site and password S past dot
encrypted password, like so.
30

30

00:01:52.460  -->  00:01:54.890
So you can see we're done there and
31

31

00:01:54.890  -->  00:01:58.480
we can then run that going back to
our main class and we just change
32

32

00:01:58.480  -->  00:02:01.860
the reference there from password to
password to make that extended password.
33

33

00:02:01.860  -->  00:02:07.170
Extend the password when they all have
the same settings there other than that.
34

34

00:02:07.170  -->  00:02:12.310
And when we run it, and
we get the sam results
35

35

00:02:12.310  -->  00:02:17.120
as seen all the options file when we're
actually, when we're trying to get access.
36

36

00:02:17.120  -->  00:02:20.460
So the let me in method two files and
exceeds on the last time.
37

37

00:02:20.460  -->  00:02:25.350
But the important point now is seven
password as 674312 which of course was
38

38

00:02:25.350  -->  00:02:27.880
The original password that
we passed in this method on
39

39

00:02:27.880  -->  00:02:29.110
line 18 as you can see there.
40

40

00:02:29.110  -->  00:02:33.790
So consequently you can see how this
is completely changed the security
41

41

00:02:33.790  -->  00:02:36.090
of the original password class.
42

42

00:02:36.090  -->  00:02:39.790
And it's compromised it effectively
because we've now got a decrypted password
43

43

00:02:39.790  -->  00:02:41.550
that's potentially out in the wild.
44

44

00:02:41.550  -->  00:02:44.150
Now this is where something like
would be really, really useful.
45

45

00:02:44.150  -->  00:02:46.630
We could close down the wrong window.
46

46

00:02:46.630  -->  00:02:48.850
We go back to password And
47

47

00:02:48.850  -->  00:02:51.650
all we'd need to do there is
put a final on storePassword.
48

48

00:02:51.650  -->  00:02:55.460
So public final void password.
49

49

00:02:55.460  -->  00:02:58.950
And once we do that,
if we have a look in ExtendedPassword,
50

50

00:02:58.950  -->  00:03:00.890
suddenly we've got an error
there as you can see.
51

51

00:03:00.890  -->  00:03:01.970
In the error if we highlight it.
52

52

00:03:03.320  -->  00:03:07.020
So looking at the error it cannot override
store password because method is final.
53

53

00:03:07.020  -->  00:03:08.290
I have it written method is final.
54

54

00:03:08.290  -->  00:03:11.800
So you can see how it's
very useful to selectively
55

55

00:03:11.800  -->  00:03:15.480
make some methods final in your classes if
you know they're gonna be overwritten or
56

56

00:03:15.480  -->  00:03:17.470
there's a chance they're
gonna be overwritten and
57

57

00:03:17.470  -->  00:03:20.500
that's really also a reminder for
you when you're looking at the code.
58

58

00:03:20.500  -->  00:03:22.720
"That you've made final for a reason.
59

59

00:03:22.720  -->  00:03:25.990
In this particular case, with a method
would normally store a password, what
60

60

00:03:25.990  -->  00:03:29.350
we're saying is it's important that this
is the final the message in all our code.
61

61

00:03:29.350  -->  00:03:31.140
Saving is going to be at that point,
62

62

00:03:31.140  -->  00:03:33.300
and we're not allowing
that to being overwritten.
63

63

00:03:33.300  -->  00:03:36.960
So at the end of the previous lecture,
I said that there's more than one aspect
64

64

00:03:36.960  -->  00:03:40.170
aesthetic that we needed to look at, and
we needed to understand final to do so.
65

65

00:03:40.170  -->  00:03:43.360
So now that we've looked at final"
We want to look at the static
66

66

00:03:43.360  -->  00:03:45.010
equivalent of constructors.
67

67

00:03:45.010  -->  00:03:47.760
So we've obviously got a standard
constructor that you've seen throughout
68

68

00:03:47.760  -->  00:03:49.370
the course quite a few times.
69

69

00:03:49.370  -->  00:03:52.680
What I'm talking about now again is the
static equivalent of those constructors
70

70

00:03:52.680  -->  00:03:55.770
and they're called static
equivalization blocks.
71

71

00:03:55.770  -->  00:03:58.960
So constructors, as you probably know,
because I've used them so
72

72

00:03:58.960  -->  00:04:01.580
much through this course,
are instance constructors.
73

73

00:04:01.580  -->  00:04:02.880
So they're not static,
74

74

00:04:02.880  -->  00:04:06.720
they'll be executed every time we
create a new instance of a class.
75

75

00:04:06.720  -->  00:04:09.920
And we've seen that in operation,
as I mentioned, countless times.
76

76

00:04:09.920  -->  00:04:14.070
Now the static equivalent of that is
a static initialization block, as I said.
77

77

00:04:14.070  -->  00:04:17.800
The difference there is that
block is only executed once
78

78

00:04:17.800  -->  00:04:20.310
when the class is first
loaded into the project.
79

79

00:04:20.310  -->  00:04:24.470
So it's not often at all that you'd
need to create a class constructor which
80

80

00:04:24.470  -->  00:04:27.340
is sort of what a static
initialization block is
81

81

00:04:27.340  -->  00:04:30.020
even though that's not really
the correct term for it.
82

82

00:04:30.020  -->  00:04:33.510
Now the reason that I'm mentioning it is
because the static final variable must be
83

83

00:04:33.510  -->  00:04:39.000
initialized by the time or
static initialization blocks terminate.
84

84

00:04:39.000  -->  00:04:43.370
So in the same way that we can set the
value of a final field in the constructor
85

85

00:04:43.370  -->  00:04:47.260
we can also assign the value
of a static final variable
86

86

00:04:47.260  -->  00:04:49.630
in the static initialization block.
87

87

00:04:49.630  -->  00:04:52.500
And I just want to confirm that
static initialization blocks
88

88

00:04:52.500  -->  00:04:56.540
are an advanced feature and
there's rarely a case for you to use them.
89

89

00:04:56.540  -->  00:04:59.550
So for an example I'm not gonna
create a program that uses them.
90

90

00:04:59.550  -->  00:05:02.750
What we'll do is we'll just print out
some text showing the program flow.
91

91

00:05:02.750  -->  00:05:06.170
So you can see that when each
part of the program is executed.
92

92

00:05:06.170  -->  00:05:09.140
So what I'll also do is assign
a value to the static final
93

93

00:05:09.140  -->  00:05:12.550
variable using an initialization block and
we'll just see how this will work.
94

94

00:05:12.550  -->  00:05:15.750
So what I'm going to do,
let's come back here to this class and
95

95

00:05:15.750  -->  00:05:18.790
I'll just comment that out so we don't
have any errors in our code any more.
96

96

00:05:18.790  -->  00:05:24.610
We're gonna create a new
class We can call it SIB for
97

97

00:05:24.610  -->  00:05:26.770
static initialization block test.
98

98

00:05:28.380  -->  00:05:34.480
Okay and we're gonna do a public static
final stream and we'll call that owner.
99

99

00:05:36.620  -->  00:05:38.910
Now we're gonna type this weird syntax
that you've probably never seen before.
100

100

00:05:38.910  -->  00:05:42.950
Static owner equals Tim.
101

101

00:05:42.950  -->  00:05:51.960
And we're gonna print out
SIBTest static initialization.
102

102

00:05:51.960  -->  00:05:55.410
block called, like so.
103

103

00:05:55.410  -->  00:05:58.330
And we can also create a constructor.
104

104

00:05:58.330  -->  00:06:00.440
And that's going to be, whoops.
105

105

00:06:02.830  -->  00:06:05.830
SIB constructor called.
106

106

00:06:08.230  -->  00:06:10.510
Down here.
107

107

00:06:10.510  -->  00:06:15.900
Static I put two equals there for
some reason.
108

108

00:06:15.900  -->  00:06:20.820
And then static will print out second
109

109

00:06:20.820  -->  00:06:29.550
initialization block called And public.
110

110

00:06:29.550  -->  00:06:31.430
We'll just create a method.
111

111

00:06:31.430  -->  00:06:32.240
Call it some method.
112

112

00:06:35.980  -->  00:06:38.450
And we'll put some method called.
113

113

00:06:40.160  -->  00:06:40.920
Like so.
114

114

00:06:40.920  -->  00:06:45.610
And that is aesthetic initialization
blocks at using aesthetic keyword.
115

115

00:06:45.610  -->  00:06:47.920
And follow up on the actual code
block as you can see there.
116

116

00:06:47.920  -->  00:06:51.070
So there can be as many aesthetic
initialization blocks as you like.
117

117

00:06:51.070  -->  00:06:54.530
And I've got two in this
test Class to show you and
118

118

00:06:54.530  -->  00:06:57.940
they're called in the order
they're declared in the class.
119

119

00:06:57.940  -->  00:07:00.030
So as you can see I've put
one in the constructor and
120

120

00:07:00.030  -->  00:07:02.940
one after it but that's not really
good practice because it could lead
121

121

00:07:02.940  -->  00:07:07.120
people to expect the constructor to
be called before the second block
122

122

00:07:07.120  -->  00:07:11.080
which isn't the case as I'm about to
show you so let's go back to main now.
123

123

00:07:11.080  -->  00:07:13.010
Let's just comment out this class,
124

124

00:07:13.010  -->  00:07:15.260
this other class code which
we don't need any more.
125

125

00:07:16.550  -->  00:07:20.330
I'll inclement the last
brace which we do need that,
126

126

00:07:20.330  -->  00:07:23.940
and those two are Brought some code here.
127

127

00:07:23.940  -->  00:07:25.560
So probably start with main method call.
128

128

00:07:29.250  -->  00:07:35.100
Now with an test,
test equals view this IP test.
129

129

00:07:35.100  -->  00:07:37.820
Test.submethod.
130

130

00:07:40.750  -->  00:07:45.970
Then we can put owner is
pass SRP test .owner.
131

131

00:07:45.970  -->  00:07:48.300
You can see what we're doing there.
132

132

00:07:48.300  -->  00:07:49.480
So now if we run this.
133

133

00:07:52.240  -->  00:07:56.530
I can see that the SIB study
initialization block was called first.
134

134

00:07:56.530  -->  00:07:59.120
Then the second initialization
block was called.
135

135

00:07:59.120  -->  00:08:00.410
Then the constructor was called.
136

136

00:08:00.410  -->  00:08:01.770
Then the sub method was called.
137

137

00:08:01.770  -->  00:08:07.290
And then obviously the last line was
system.outSIBtest.owner The owners is Tim,
138

138

00:08:07.290  -->  00:08:08.540
airport was actually called.
139

139

00:08:08.540  -->  00:08:11.560
So and again,
I'm surprised was called first, but
140

140

00:08:11.560  -->  00:08:14.440
the interesting thing here is that
both the static initialization
141

141

00:08:14.440  -->  00:08:17.690
blocks were called before the constructor,
and in fact, they're called before any
142

142

00:08:17.690  -->  00:08:21.010
non-static methods including
the constructor are called to be correct.
143

143

00:08:21.010  -->  00:08:23.740
And finally, you saw that when we
checked that the string owner does have
144

144

00:08:23.740  -->  00:08:29.200
the expected value Tim that was set in the
initialization block Now on line ten so
145

145

00:08:29.200  -->  00:08:31.580
you can see that that
static code was executed.
146

146

00:08:32.790  -->  00:08:36.370
So now you've seen, again, static and
final before in this course.
147

147

00:08:36.370  -->  00:08:39.650
I didn't really discuss what they
meant in the past, so look out for
148

148

00:08:39.650  -->  00:08:42.890
the use now in all the Subsequent
examples as you work through the course.
149

149

00:08:42.890  -->  00:08:46.980
And now that you've been through this
section you'll have a much better idea of
150

150

00:08:46.980  -->  00:08:51.390
why they're used and what the implications
of using them actually are.
151

151

00:08:51.390  -->  00:08:55.260
So that's it,
that's the end of the final videos.
152

152

00:08:55.260  -->  00:08:56.530
It's also the end of this section,
153

153

00:08:56.530  -->  00:08:58.940
so we'll move on to a new
section in the next video.
