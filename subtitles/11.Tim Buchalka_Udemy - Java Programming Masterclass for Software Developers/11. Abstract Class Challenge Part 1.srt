1
1

00:00:05,530  -->  00:00:07,660
Okay so
here's my solution to the challenge.
2

2

00:00:07,660  -->  00:00:10,560
And if you haven't watched the previous
video, be sure to do that,
3

3

00:00:10,560  -->  00:00:14,040
because towards the end, I typed out the
challenge and actually talked about it.
4

4

00:00:14,040  -->  00:00:16,390
And actually went through and
sort of said what the challenge was.
5

5

00:00:16,390  -->  00:00:17,970
And here it is again,
repeated on the screen.
6

6

00:00:17,970  -->  00:00:20,490
But if you wanna hear more about that,
certainly go back and do that.
7

7

00:00:20,490  -->  00:00:23,230
And of course the other thing to
make sure you've done is to actually
8

8

00:00:23,230  -->  00:00:24,370
have attempted the challenge.
9

9

00:00:24,370  -->  00:00:25,420
And hopefully you've done that, and
10

10

00:00:25,420  -->  00:00:27,800
you're actually watching this
video to check your results.
11

11

00:00:27,800  -->  00:00:29,240
So, let's actually get started.
12

12

00:00:29,240  -->  00:00:32,510
So I'm going to create, firstly,
13

13

00:00:32,510  -->  00:00:35,970
the first base abstract class and
we're going to do this.
14

14

00:00:35,970  -->  00:00:38,930
So we're going to right click new as
we've done now hundreds of times.
15

15

00:00:38,930  -->  00:00:40,610
And I'm gonna call this ListItem.
16

16

00:00:42,840  -->  00:00:44,910
And we're going to make
that an abstract class.
17

17

00:00:44,910  -->  00:00:51,570
So abstract class, for starters.
18

18

00:00:51,570  -->  00:00:54,860
Okay, so we need, firstly,
we want a list item for the rightLink.
19

19

00:00:54,860  -->  00:01:01,650
So we'll do protected ListItem rightLink
20

20

00:01:01,650  -->  00:01:05,770
= null Cuz by default
it won't have a link.
21

21

00:01:05,770  -->  00:01:09,930
protected ListItem leftLink = null.
22

22

00:01:09,930  -->  00:01:12,690
And notice how we're actually putting
references to ourselves in the class.
23

23

00:01:12,690  -->  00:01:17,870
We're creating instances of this
very same class within a class.
24

24

00:01:18,920  -->  00:01:23,360
And we want a protected Object value.
25

25

00:01:23,360  -->  00:01:27,890
Then we need a public constructor which
is going to accept the Object parameter.
26

26

00:01:27,890  -->  00:01:30,850
So adjust the object parameter,
which will be that one there.
27

27

00:01:30,850  -->  00:01:32,660
And we'll click OK to that.
28

28

00:01:32,660  -->  00:01:33,770
So we're setting the value.
29

29

00:01:33,770  -->  00:01:36,690
Now next we need to actually start
talking about the actual abstract
30

30

00:01:36,690  -->  00:01:38,030
classes that we want in.
31

31

00:01:38,030  -->  00:01:41,100
So we need firstly an abstract class for
next.
32

32

00:01:41,100  -->  00:01:42,440
So we'll turn to list items.
33

33

00:01:42,440  -->  00:01:44,240
ListItem.
34

34

00:01:44,240  -->  00:01:45,660
That's abstract ListItem next.
35

35

00:01:49,780  -->  00:01:53,740
Abstract ListItem setNext, as well.
36

36

00:01:55,020  -->  00:01:56,770
Which obviously saves the item.
37

37

00:01:58,710  -->  00:02:02,090
We also because we've done a Next,
we also need a Previous.
38

38

00:02:02,090  -->  00:02:06,400
So we do abstract ListItem previous.
39

39

00:02:07,660  -->  00:02:12,290
Which returns the previous entry, and of
course we want a set previous as well so
40

40

00:02:12,290  -->  00:02:16,530
we can actually set that previous link
as well to the previous list item.
41

41

00:02:16,530  -->  00:02:20,470
So setPrevious (ListItem item).
42

42

00:02:20,470  -->  00:02:25,240
We actually also want that
compare to method that we talked
43

43

00:02:25,240  -->  00:02:29,450
about abstract int
compareTo (ListItem item).
44

44

00:02:29,450  -->  00:02:34,730
So we can compare and see whether or
an object is the same based
45

45

00:02:34,730  -->  00:02:40,880
on not just a simple comparison but
actually a rather in depth one.
46

46

00:02:40,880  -->  00:02:42,420
Field by field.
47

47

00:02:42,420  -->  00:02:44,300
Then we just want a getter and setter for
48

48

00:02:44,300  -->  00:02:47,040
value itself even though
that's set in the constructor.
49

49

00:02:47,040  -->  00:02:49,900
And that's not gonna be abstract methods,
it's just gonna be overridden, so
50

50

00:02:49,900  -->  00:02:53,070
the getters and
setters are just for value as well.
51

51

00:02:53,070  -->  00:02:56,300
So that should be our base
ListItem class there.
52

52

00:02:56,300  -->  00:02:58,100
So again we've got two variables and
53

53

00:02:58,100  -->  00:03:00,620
they hold references to
objects of type ListItem.
54

54

00:03:00,620  -->  00:03:02,030
The right link and the left link.
55

55

00:03:02,030  -->  00:03:05,480
Thus you can say that each list item
object can hold a link to the previous and
56

56

00:03:05,480  -->  00:03:08,820
next items in the list that we're
actually gonna be ultimately be saving.
57

57

00:03:08,820  -->  00:03:12,470
And notice that to find a constructor for
the abstract class as well, any concrete
58

58

00:03:12,470  -->  00:03:15,740
class that inherits from list item will
need a constructor that sets the value.
59

59

00:03:15,740  -->  00:03:19,310
So it really makes sense in that case
because it needs to be done each time
60

60

00:03:19,310  -->  00:03:22,770
to put the constructor in
this ListItem abstract class.
61

61

00:03:22,770  -->  00:03:25,230
We also defined a getter
as you can see there, and
62

62

00:03:25,230  -->  00:03:29,600
just a confirmation of the abstract
methods defined, what must be implemented
63

63

00:03:29,600  -->  00:03:33,410
by any concrete class it inherits from,
this ListItem class.
64

64

00:03:33,410  -->  00:03:36,660
So again, next returns a reference
to the next ListItem in the list.
65

65

00:03:36,660  -->  00:03:39,440
setNext where we're passing
the parameter list items sets
66

66

00:03:39,440  -->  00:03:43,580
the reference to the next item to refer
to in the parameter, which is courseItem.
67

67

00:03:43,580  -->  00:03:45,670
And previous and
setPrevious does the opposite,
68

68

00:03:45,670  -->  00:03:48,180
it actually sets the reference to
the previous item in the list.
69

69

00:03:48,180  -->  00:03:51,900
And then sets the reference to
the setPrevious to the previous item
70

70

00:03:51,900  -->  00:03:54,320
to refer to the parameter item,
which is passed.
71

71

00:03:54,320  -->  00:03:56,810
And again, compareTo,
compares an object to the item.
72

72

00:03:56,810  -->  00:04:00,140
Whatever has been passed through the
parameter and returned zero with or equal,
73

73

00:04:00,140  -->  00:04:03,860
and also returns a number if the item
parameter should sort before the object,
74

74

00:04:03,860  -->  00:04:04,560
which would be negative.
75

75

00:04:04,560  -->  00:04:06,840
Otherwise it is gonna
return a positive number.
76

76

00:04:06,840  -->  00:04:07,400
And incidentally,
77

77

00:04:07,400  -->  00:04:11,300
the reason that I've actually declared
the fields to be protected rather
78

78

00:04:11,300  -->  00:04:15,260
than private is because we need to be able
to access them from our concrete subclass.
79

79

00:04:15,260  -->  00:04:17,740
Now, we could have left
the access modifier off,
80

80

00:04:17,740  -->  00:04:20,660
which would have meant that the member
variables are packaged private.
81

81

00:04:20,660  -->  00:04:24,300
So in other words, subclasses in the same
package would be able to access them.
82

82

00:04:24,300  -->  00:04:28,160
But not subclasses in other packages,
as that's why we've made it protected.
83

83

00:04:28,160  -->  00:04:30,280
Okay so in order to create list items,
84

84

00:04:30,280  -->  00:04:32,390
we need to actually have this
concrete class we've talked about.
85

85

00:04:32,390  -->  00:04:34,140
So one that actually
implements all those methods.
86

86

00:04:34,140  -->  00:04:36,510
And as a result,
can therefore be instantiated.
87

87

00:04:36,510  -->  00:04:37,620
So let's go and create that.
88

88

00:04:38,940  -->  00:04:40,180
That's gonna be a new Java class.
89

89

00:04:40,180  -->  00:04:41,320
And we're gonna call that Node.
90

90

00:04:42,960  -->  00:04:48,400
So the first thing we need to do
is we need to extends ListItem.
91

91

00:04:48,400  -->  00:04:51,000
And of course we're gonna get a complaint
that we haven't implemented those
92

92

00:04:51,000  -->  00:04:52,570
abstract methods yet.
93

93

00:04:52,570  -->  00:04:53,680
We'll start with the constructor.
94

94

00:04:55,080  -->  00:04:58,630
It just uses the abstract
classes constructed to set that
95

95

00:04:58,630  -->  00:05:01,580
value of that object, and then next
needs to start overriding some objects.
96

96

00:05:01,580  -->  00:05:03,680
So we're gonna start with next.
97

97

00:05:03,680  -->  00:05:07,520
Actually what we'll do is, the ones we
needs are next, previous, setNext, and
98

98

00:05:07,520  -->  00:05:09,110
previous, and also compareTo.
99

99

00:05:09,110  -->  00:05:12,500
So what I'm gonna have to do is
just create the stubs for those,
100

100

00:05:12,500  -->  00:05:14,570
by just going in here and overriding.
101

101

00:05:14,570  -->  00:05:18,420
And we're gonna select all of one,
two, three, four,
102

102

00:05:18,420  -->  00:05:19,610
five, all five of those there.
103

103

00:05:19,610  -->  00:05:24,030
There the ones we need to override, and by
doing that, we've now got a valid class,
104

104

00:05:24,030  -->  00:05:26,670
but of course we now need to add
the actually functionality itself.
105

105

00:05:26,670  -->  00:05:30,780
So we're gonna start with the next method,
and all that really needs to do,
106

106

00:05:30,780  -->  00:05:32,630
this is the next item.
107

107

00:05:32,630  -->  00:05:38,390
To the right, so we return this.rightLink.
108

108

00:05:38,390  -->  00:05:43,470
Which is of course a field
within the abstract class.
109

109

00:05:43,470  -->  00:05:47,400
And with setNext, what we're gonna
do is a little bit different.
110

110

00:05:47,400  -->  00:05:55,250
So I'm gonna do this.rightLink = item,
one that was passed to us.
111

111

00:05:56,800  -->  00:06:00,340
And we go to actually return that very
thing that was actually saved, so
112

112

00:06:00,340  -->  00:06:02,620
this.rightLink.
113

113

00:06:02,620  -->  00:06:03,960
Okay, and likewise for previous.
114

114

00:06:03,960  -->  00:06:05,340
But of course previous
pretty straightforward,
115

115

00:06:05,340  -->  00:06:08,110
we're gonna return the leftLink
cuz it's the entry previous.
116

116

00:06:08,110  -->  00:06:11,450
So this.leftLink and
117

117

00:06:11,450  -->  00:06:15,230
from a setPrevious, null points were
actually deciding what this is gonna be.
118

118

00:06:15,230  -->  00:06:21,090
It's gonna return,
it's going to be this.leftLink = item.
119

119

00:06:21,090  -->  00:06:26,700
Then we actually return
this.leftLink as well.
120

120

00:06:26,700  -->  00:06:28,580
That brings us down now to the compareTo,
121

121

00:06:28,580  -->  00:06:31,860
and what we need to do there is return
that value, which was negative 1,
122

122

00:06:31,860  -->  00:06:34,400
if the item parameter should
sort before the object.
123

123

00:06:34,400  -->  00:06:37,490
Otherwise, we're gonna return
a positive 1, if that's not the case.
124

124

00:06:37,490  -->  00:06:40,390
And of course we return 0 if
they're considered to be equal.
125

125

00:06:40,390  -->  00:06:44,000
So, first thing we're gonna do,
test for null.
126

126

00:06:44,000  -->  00:06:50,110
So, we put if(item != null).
127

127

00:06:51,850  -->  00:06:55,890
Then we're gonna return ( (String)
128

128

00:06:55,890  -->  00:07:03,740
super.getValue)).compare.((String)
item.getValue()).
129

129

00:07:03,740  -->  00:07:08,670
Otherwise we do an else return a -1,
130

130

00:07:08,670  -->  00:07:12,840
because it's actually null and
131

131

00:07:12,840  -->  00:07:18,320
therefore has to be in that sort order.
132

132

00:07:18,320  -->  00:07:21,100
Negative because any value is gonna
be greater than null, effectively.
133

133

00:07:21,100  -->  00:07:23,800
So you can see that we're actually
using the getValue method
134

134

00:07:23,800  -->  00:07:27,280
to actually figure out we're using the
compareTo in comparing that to each item.
135

135

00:07:27,280  -->  00:07:30,220
And in case you're wondering, we're going
to be actually using strings as our
136

136

00:07:30,220  -->  00:07:32,840
values, even though we've
defined it as type Object.
137

137

00:07:32,840  -->  00:07:36,710
So looking at that ListItem,
we've defined it as type Object there.
138

138

00:07:36,710  -->  00:07:39,470
In the node we're actually going
to be passing this as string, so
139

139

00:07:39,470  -->  00:07:42,020
that's why I can actually use
string here for a comparison.
140

140

00:07:42,020  -->  00:07:44,700
And .compareTo works nicely
with string as well.
141

141

00:07:44,700  -->  00:07:47,650
And again the next and previous methods
are basically just getters, and
142

142

00:07:47,650  -->  00:07:50,910
the setNext and setPrevious methods
are very similar to setters and
143

143

00:07:50,910  -->  00:07:54,370
what they're doing, but they're also
returning the values as well and
144

144

00:07:54,370  -->  00:07:56,380
returning any appropriate
reference variable as well.
145

145

00:07:56,380  -->  00:07:58,290
You might be wondering why we're
doing that, but don't worry.
146

146

00:07:58,290  -->  00:08:00,360
Later on, we'll actually talk about that.
147

147

00:08:00,360  -->  00:08:02,300
It's not going to actually
affect your solution.
148

148

00:08:02,300  -->  00:08:06,010
It's done more for convenience rather than
being actually essential to the program.
149

149

00:08:06,010  -->  00:08:07,430
If you haven't returned it that's okay.
150

150

00:08:07,430  -->  00:08:11,310
And just a confirmation that the compareTo
method looks actually like a lot but
151

151

00:08:11,310  -->  00:08:12,500
it's actually quite easy.
152

152

00:08:12,500  -->  00:08:15,510
It's easy to implement here because
we're storing strings as our value as I
153

153

00:08:15,510  -->  00:08:18,700
mentioned, and the string class
already has its own compareTo.
154

154

00:08:18,700  -->  00:08:23,890
So if you were writing your own class and
not using a string class in this
155

155

00:08:23,890  -->  00:08:26,670
particular scenario, you'd have to
write your own compareTo operator.
156

156

00:08:26,670  -->  00:08:31,110
But in this case because the string
class itself has got that built in,
157

157

00:08:31,110  -->  00:08:33,200
all we really need to do
is use the .compare and
158

158

00:08:33,200  -->  00:08:37,570
that's going to return the 0, the -1,
or the 1 depending on the actual value.
159

159

00:08:37,570  -->  00:08:41,540
And the other thing we're doing is if
a null was passed we are returning -1
160

160

00:08:41,540  -->  00:08:45,940
automatically, because we can't test that,
but negative is always gonna be,
161

161

00:08:45,940  -->  00:08:49,150
that any value is gonna be greater than
null, that's why we're returning -1.
162

162

00:08:49,150  -->  00:08:53,090
At this point now, we've got a concrete
class that extends our abstract ListItem.
163

163

00:08:53,090  -->  00:08:54,900
And we can create objects of type node,
and
164

164

00:08:54,900  -->  00:08:59,130
build structures by making the nodes next
and previous links point to each other.
165

165

00:08:59,130  -->  00:09:00,890
Probably a good idea at this
point before we go ahead and
166

166

00:09:00,890  -->  00:09:03,190
actually do that,
before we actually create a link list,
167

167

00:09:03,190  -->  00:09:07,740
to define an interface that any structure
using a node objects will implement.
168

168

00:09:07,740  -->  00:09:09,980
And we can actually use
that interface later on.
169

169

00:09:09,980  -->  00:09:12,550
So let's actually go ahead and do that.
170

170

00:09:12,550  -->  00:09:16,690
So I'm going to do a new
Java class Interface.
171

171

00:09:16,690  -->  00:09:18,140
And we'll call this one NodeList.
172

172

00:09:19,900  -->  00:09:21,000
We're going to start off.
173

173

00:09:21,000  -->  00:09:24,420
We're going to have a getRoot, which
is gonna be the actual ListItem itself.
174

174

00:09:24,420  -->  00:09:29,870
So ListItem getRoot and
another function we need
175

175

00:09:29,870  -->  00:09:36,120
is obviously the addItem
that's going to be ListItem.
176

176

00:09:36,120  -->  00:09:40,580
We need a removeItem which is
also going to pass the ListItem.
177

177

00:09:42,570  -->  00:09:45,360
And we need a void traverse.
178

178

00:09:45,360  -->  00:09:48,060
So this is some way of actually
going through the list.
179

179

00:09:48,060  -->  00:09:51,560
transverse(ListItem root) like so.
180

180

00:09:51,560  -->  00:09:52,870
That should be it,
181

181

00:09:52,870  -->  00:09:56,090
because any data structure that we
create must have a starting node,
182

182

00:09:56,090  -->  00:09:59,450
we know about that, and that's what we're
putting in the ListItem, the getRoot.
183

183

00:09:59,450  -->  00:10:02,390
In the case of the LinkList, this is
often called the head of the list but
184

184

00:10:02,390  -->  00:10:06,130
using the term root is also used a lot and
actually applies to
185

185

00:10:06,130  -->  00:10:09,740
binary search trees if you researched
on that, you've probably noticed that.
186

186

00:10:09,740  -->  00:10:12,760
We also needed methods to add and
remove items to the structure.
187

187

00:10:12,760  -->  00:10:14,420
And that so
we've done that in the interface.
188

188

00:10:14,420  -->  00:10:16,210
That's why we used addItem to removeItem.
189

189

00:10:16,210  -->  00:10:18,520
And finally we have that traverse method,
which I mentioned,
190

190

00:10:18,520  -->  00:10:21,490
which will start at the root and print in
the values of each item in the structure.
191

191

00:10:21,490  -->  00:10:23,920
Traverse is through the list, if you will.
192

192

00:10:23,920  -->  00:10:26,850
And I spelled traverse wrong, traverse.
193

193

00:10:26,850  -->  00:10:30,170
Okay, so
let's now create a linked list class, and
194

194

00:10:30,170  -->  00:10:33,900
I mentioned before about
actually using the right names.
195

195

00:10:33,900  -->  00:10:36,920
And getting confused with what is
the linked list from Java in our own
196

196

00:10:36,920  -->  00:10:40,650
interpretation of linked lists, so I'm
actually gonna call this My Linked List.
197

197

00:10:42,350  -->  00:10:45,720
Just so there's no confusion with
the linked list that's actually built
198

198

00:10:45,720  -->  00:10:49,460
into Java and the linked list class
that we're actually creating here.
199

199

00:10:49,460  -->  00:10:54,540
So, public class MyLinkedList
implements NodeList.
200

200

00:10:54,540  -->  00:10:56,870
And obviously we're gonna
get error because we haven't
201

201

00:10:56,870  -->  00:10:57,700
implemented everything yet.
202

202

00:10:57,700  -->  00:11:01,630
So I'm gonna start with
private ListItem root = null.
203

203

00:11:01,630  -->  00:11:04,870
That's gonna be our basic,
our head record or our root record.
204

204

00:11:04,870  -->  00:11:05,940
And we need this constructor.
205

205

00:11:05,940  -->  00:11:09,090
It's gonna be just that root item.
206

206

00:11:09,090  -->  00:11:12,890
And we're gonna set the value for
the root item to start off.
207

207

00:11:14,240  -->  00:11:17,930
And next we'll need to override those
other methods as well that were part in
208

208

00:11:17,930  -->  00:11:20,320
parcel of the interface,
so I'm gonna do that.
209

209

00:11:20,320  -->  00:11:21,380
So we'll click implement.
210

210

00:11:21,380  -->  00:11:25,170
And we've got four there you as can
see that we actually must override
211

211

00:11:25,170  -->  00:11:26,700
to make it valid, so
we're just gonna do that.
212

212

00:11:26,700  -->  00:11:30,930
Now some of these are easy,
the getRoot will be just this.root,
213

213

00:11:30,930  -->  00:11:32,670
gonna return the root.
214

214

00:11:32,670  -->  00:11:35,610
So what we need to do for that, for
an addItem we need to check for the empty
215

215

00:11:35,610  -->  00:11:39,920
ListItem first, then add a new item as
the head of the list if it was empty.
216

216

00:11:39,920  -->  00:11:42,830
But if the list wasn't empty,
then what we need to do is compare each
217

217

00:11:42,830  -->  00:11:46,550
item in the list with a new item to work
out where the new item should be inserted.
218

218

00:11:46,550  -->  00:11:48,690
Because remember,
we're sorting it in a particular order.
219

219

00:11:48,690  -->  00:11:53,540
So the way we'll do that would be,
you'll change the return for now, and
220

220

00:11:53,540  -->  00:11:57,160
we'll start by putting
if(this.root == null).
221

221

00:11:57,160  -->  00:12:02,880
Well that's easy, so that's going
to be just as a comment, the list
222

222

00:12:05,280  -->  00:12:10,490
was empty, so
this item becomes the head of the list.
223

223

00:12:11,960  -->  00:12:16,010
If that's been the case,
we could just put this.root = item,
224

224

00:12:16,010  -->  00:12:18,060
which was actually passed.
225

225

00:12:18,060  -->  00:12:23,050
Actually call that newItem, just so we're
really clear what we're trying to do here.
226

226

00:12:23,050  -->  00:12:24,950
So this new item is passed to us.
227

227

00:12:24,950  -->  00:12:28,550
So in that case, because the root,
we didn't have any other entries,
228

228

00:12:28,550  -->  00:12:30,470
this is the first time it's been used.
229

229

00:12:30,470  -->  00:12:33,280
We're setting this to become
the head of the list, effectively.
230

230

00:12:33,280  -->  00:12:36,160
And at that point we can also
return true because we've
231

231

00:12:36,160  -->  00:12:37,260
succeeded in adding the item.
232

232

00:12:37,260  -->  00:12:39,400
Then we'll put an else, or
we don't even need to put an else,
233

233

00:12:39,400  -->  00:12:41,910
because we're gonna start with the code,
because the code then is only gonna get
234

234

00:12:41,910  -->  00:12:45,590
down to here if that first if block
of code wasn't actually called.
235

235

00:12:45,590  -->  00:12:47,030
So now what we need to
do at this point is,
236

236

00:12:47,030  -->  00:12:48,920
we need to start comparing
from the head of the list.
237

237

00:12:48,920  -->  00:12:54,010
So we're gonna type ListItem
currentItem = this.root.
238

238

00:12:54,010  -->  00:12:57,920
So that's our first head item,
head of the list.
239

239

00:12:57,920  -->  00:13:02,250
while(currentItem != null).
240

240

00:13:02,250  -->  00:13:05,540
So while we've still got the ability
to actually link through our items,
241

241

00:13:05,540  -->  00:13:07,890
cuz we're gonna be going through and
comparing them one by one.
242

242

00:13:07,890  -->  00:13:10,490
And going through to the next and
the next, so on.
243

243

00:13:10,490  -->  00:13:13,890
If we reach a null, that basically
means that there's no more entries
244

244

00:13:13,890  -->  00:13:15,490
to actually go through in the list.
245

245

00:13:15,490  -->  00:13:17,440
So first I'm going to
then is do a comparison.
246

246

00:13:17,440  -->  00:13:23,020
So int comparison = (currentItem.compareTo
247

247

00:13:23,020  -->  00:13:28,450
(newItem), the item that has
been passed to this method.
248

248

00:13:28,450  -->  00:13:29,350
Now we start doing our tests.
249

249

00:13:29,350  -->  00:13:34,120
So we do if(comparison), remembering
that returns a negative number, a 0, or
250

250

00:13:34,120  -->  00:13:37,630
a number that's greater than 0,
if(comparison < 0).
251

251

00:13:37,630  -->  00:13:39,480
So we'll do that one first.
252

252

00:13:39,480  -->  00:13:44,020
And less than 0 is if
the newItem is greater, so
253

253

00:13:44,020  -->  00:13:45,780
we need to move right if possible.
254

254

00:13:47,990  -->  00:13:53,200
So we'll put if(currentItem.next != null).
255

255

00:13:53,200  -->  00:13:55,760
So if there's some way we
can actually go forward,
256

256

00:13:55,760  -->  00:14:01,240
in other words go to the next item, you're
gonna go currentItem = currentItem.next.
257

257

00:14:01,240  -->  00:14:06,040
You need to continue processing, otherwise
we've reached the end, we can't actually
258

258

00:14:06,040  -->  00:14:10,010
go to any other records, so we've
actually reached the end of that list.
259

259

00:14:10,010  -->  00:14:14,460
So what we can do is we can put,
there is no next, so
260

260

00:14:14,460  -->  00:14:20,610
insert at the end of the list which
effectively is where we are at now,
261

261

00:14:20,610  -->  00:14:25,200
so we can put
currentItem.setNext(newItem).
262

262

00:14:25,200  -->  00:14:31,980
And then newItem.setPrevious(currentItem).
263

263

00:14:31,980  -->  00:14:35,160
And then return true.
264

264

00:14:35,160  -->  00:14:36,630
So you can see what we've done there.
265

265

00:14:36,630  -->  00:14:38,990
We pointed to the current
item that we can reach.
266

266

00:14:38,990  -->  00:14:40,270
Basically, we've got as far as we can.
267

267

00:14:40,270  -->  00:14:41,690
There's no other entries.
268

268

00:14:41,690  -->  00:14:44,860
And we go to .next because we
actually received a null, so
269

269

00:14:44,860  -->  00:14:47,160
we set the next null to the new item,
where it was null.
270

270

00:14:47,160  -->  00:14:51,390
The new item that we've just inserted
currently can go back to that,
271

271

00:14:51,390  -->  00:14:53,070
to the previous item, if that makes sense.
272

272

00:14:53,070  -->  00:14:56,440
So, just as a recap, the current item,
we're at the last entry in the list.
273

273

00:14:56,440  -->  00:14:58,980
We're setting the next, so there's
another record, which is a new item,
274

274

00:14:58,980  -->  00:15:00,480
which was passed to this method.
275

275

00:15:00,480  -->  00:15:04,380
But they were also setting
the setPrevious entry for
276

276

00:15:04,380  -->  00:15:08,950
the new item to point back to
what was then the current item,
277

277

00:15:08,950  -->  00:15:11,490
if that makes sense, so
it can traverse and go back.
278

278

00:15:11,490  -->  00:15:15,420
So if you didn't do that, the newItem
previous would be set currently to null.
279

279

00:15:15,420  -->  00:15:17,900
And it would be sort of like an record and
couldn't go anywhere.
280

280

00:15:17,900  -->  00:15:18,920
So that's why we're doing it that way.
281

281

00:15:18,920  -->  00:15:22,120
So that's the first comparison if
the answer you got was less than 0.
282

282

00:15:22,120  -->  00:15:23,420
But we also need to do another one.
283

283

00:15:23,420  -->  00:15:29,820
We need to come back here and
put else if(comparison > 0).
284

284

00:15:31,560  -->  00:15:37,020
So in other words newItem is less and
we need to try and insert before.
285

285

00:15:37,020  -->  00:15:40,210
So we need to do the other thing,
we need to go through and do a test for
286

286

00:15:40,210  -->  00:15:41,960
null but going backwards this time.
287

287

00:15:41,960  -->  00:15:43,050
Going to previous entries.
288

288

00:15:43,050  -->  00:15:49,890
So if(currentItem.previous() != null),
289

289

00:15:49,890  -->  00:15:58,010
then we do currentItem.previous
.setNext(newItem).
290

290

00:15:58,010  -->  00:16:03,820
We also do then
newItem.setPrevious.
291

291

00:16:03,820  -->  00:16:10,090
Whoops I put an extra
bracket in there by mistake.
292

292

00:16:11,670  -->  00:16:13,250
(currentItem.previous()).
293

293

00:16:15,590  -->  00:16:20,650
Then newItem.setNext(currentItem) and
294

294

00:16:20,650  -->  00:16:26,370
your currentItem.setPrevious = (newItem).
295

295

00:16:26,370  -->  00:16:32,300
So, again, what we're doing is, we know
that we have to insert this before,
296

296

00:16:32,300  -->  00:16:35,020
so if currentItem.previous returns
something that wasn't null, so
297

297

00:16:35,020  -->  00:16:36,230
if it still returned a record.
298

298

00:16:36,230  -->  00:16:38,210
Then what we're doing is,
we're setting the currentItem.previous,
299

299

00:16:38,210  -->  00:16:43,500
what was the previous entry, pointing
to the .setNext from there from there,
300

300

00:16:43,500  -->  00:16:46,430
to set that to set that to the value of
newItem, which of course is the item that
301

301

00:16:46,430  -->  00:16:50,160
we've actually added to this, or
we've passed, to this addItem.
302

302

00:16:50,160  -->  00:16:54,090
And then we go on to the newItem and set
the setPrevious link for that to point to
303

303

00:16:54,090  -->  00:16:57,680
what was the curtentItem.previous,
if that actually make sense.
304

304

00:16:57,680  -->  00:17:01,530
And then we've done the same for .Next, so
we're actually pointing with the .Next for
305

305

00:17:01,530  -->  00:17:04,220
the current item, and
then currentItem.setPreviousItem.
306

306

00:17:04,220  -->  00:17:07,400
So, I know that sounds confusing, but
essentially, what we're doing is,
307

307

00:17:07,400  -->  00:17:12,440
we're inserting the new item, basically,
before what was the current item,
308

308

00:17:12,440  -->  00:17:14,920
and then the other thing we
need to test here is the else.
309

309

00:17:14,920  -->  00:17:19,460
Which would be else In this scenario,
310

310

00:17:19,460  -->  00:17:22,860
the node without a previous is the root.
311

311

00:17:24,170  -->  00:17:27,070
So, if we got to this point, it means that
we've got to the very first record, and
312

312

00:17:27,070  -->  00:17:28,420
there is no previous.
313

313

00:17:28,420  -->  00:17:29,650
So if that's the case,
314

314

00:17:29,650  -->  00:17:33,350
we need to actually make this new
item effectively become the new root.
315

315

00:17:33,350  -->  00:17:39,650
So, we're doing
newItem.setNext(this.root).
316

316

00:17:39,650  -->  00:17:45,210
Then we do this.root.setPrevious(newItem).
317

317

00:17:47,110  -->  00:17:50,230
And then this.root = newItem.
318

318

00:17:50,230  -->  00:17:52,460
So you can see what we've done there.
319

319

00:17:52,460  -->  00:17:55,610
So in that case, what we've done
is we're setting newItem.next to
320

320

00:17:55,610  -->  00:17:57,480
point to what is currently
the root record.
321

321

00:17:57,480  -->  00:17:59,400
And that's because we're
inserting ourselves.
322

322

00:17:59,400  -->  00:18:00,540
We're becoming the root.
323

323

00:18:00,540  -->  00:18:02,400
So we need to point to what was the root.
324

324

00:18:02,400  -->  00:18:04,240
So we need another gate in traverse.
325

325

00:18:04,240  -->  00:18:05,360
It actually goes to that entry.
326

326

00:18:05,360  -->  00:18:09,000
And then obviously, the set root we're
setting the set previous to point back to
327

327

00:18:09,000  -->  00:18:11,600
the new item, because it's now
not going to be the root anymore.
328

328

00:18:11,600  -->  00:18:13,390
It's gonna be sort of the second item, and
329

329

00:18:13,390  -->  00:18:17,170
needs to have a previous link to the new
record that we're adding, the new item.
330

330

00:18:17,170  -->  00:18:20,260
And last thing, we're setting
the this.root, which is our head,
331

331

00:18:20,260  -->  00:18:23,030
the head of the list to
become this new item.
332

332

00:18:23,030  -->  00:18:26,280
So that's the comparison for
greater than 0 when newItem was less.
333

333

00:18:26,280  -->  00:18:29,680
And then the other thing was, in the last
scenario, is actually quite easy.
334

334

00:18:31,640  -->  00:18:34,260
Because we've already tested,
and then they're equal.
335

335

00:18:34,260  -->  00:18:37,090
At this point, they're equal and
336

336

00:18:37,090  -->  00:18:42,560
we actually don't want to actually
add them if they're equal, so
337

337

00:18:42,560  -->  00:18:49,520
we're gonna put newItem.getValue()
+ "is already present, not added").
338

338

00:18:49,520  -->  00:18:51,480
Because we decided we didn't
actually want duplicates.
339

339

00:18:51,480  -->  00:18:52,690
And we're gonna return false here.
340

340

00:18:53,800  -->  00:18:55,800
And incidentally here,
we're gonna return true.
341

341

00:18:57,120  -->  00:19:01,930
Because in both cases, whether we found
the record at the head or whether we
342

342

00:19:01,930  -->  00:19:05,530
actually just inserted it previously and
fixed all the other links up.
343

343

00:19:05,530  -->  00:19:09,570
In both cases, we were success there,
so we're actually gonna return true.
344

344

00:19:09,570  -->  00:19:13,090
And outside of all this code here,
which we shouldn't hit anyway,
345

345

00:19:13,090  -->  00:19:14,490
outside of the wall loop as well.
346

346

00:19:14,490  -->  00:19:16,900
We're actually going there to put,
347

347

00:19:16,900  -->  00:19:20,570
return false, just to fulfill the methods
and the method is happy with that.
348

348

00:19:21,930  -->  00:19:25,590
And that's it, so that's the addItem,
which is quite a bit of code there, but
349

349

00:19:25,590  -->  00:19:28,800
hopefully you understood that also based
on linked lists which we talked about
350

350

00:19:28,800  -->  00:19:30,530
in previous videos as well.
351

351

00:19:30,530  -->  00:19:34,250
All right, so I'm gonna stop this video
here, and in the next method we're gonna
352

352

00:19:34,250  -->  00:19:36,900
actually look at some of
the code we've actually typed and
353

353

00:19:36,900  -->  00:19:40,420
I'm gonna show you some of the shortcuts
you can actually use to reduce a bit of
354

354

00:19:40,420  -->  00:19:43,480
code in scenarios where you're
actually doing things like this.
355

355

00:19:43,480  -->  00:19:45,450
So I'll see you in that next video.
