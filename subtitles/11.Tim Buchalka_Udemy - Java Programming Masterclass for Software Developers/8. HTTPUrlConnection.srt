1
1

00:00:05,620  -->  00:00:06,640
- [Tim] So, I ended the last video
2

2

00:00:06,640  -->  00:00:08,780
by saying you can do a lot more
3

3

00:00:08,780  -->  00:00:11,550
with the URL connects than
just reading a webpage.
4

4

00:00:11,550  -->  00:00:14,430
You can also get header
information from the webpage
5

5

00:00:14,430  -->  00:00:17,090
without having to read it in its entirety.
6

6

00:00:17,090  -->  00:00:19,480
Let's have a go at doing that now.
7

7

00:00:19,480  -->  00:00:22,150
So I'm gonna make some
changes to the code.
8

8

00:00:22,150  -->  00:00:23,250
So what I'm going to do for the time being
9

9

00:00:23,250  -->  00:00:24,510
is comment out this code here,
10

10

00:00:24,510  -->  00:00:27,180
relating to reading the webpage,
11

11

00:00:28,360  -->  00:00:30,560
and just below the inputStream,
12

12

00:00:30,560  -->  00:00:32,660
we're going to retrieve the headers.
13

13

00:00:32,660  -->  00:00:36,590
We're gonna start with a
Map, creating a Map. Map.
14

14

00:00:36,590  -->  00:00:38,420
It's gonna be a string.
15

15

00:00:38,420  -->  00:00:40,760
That's the key, and the values are going
16

16

00:00:40,760  -->  00:00:43,340
to be a list of String objects.
17

17

00:00:45,940  -->  00:00:49,270
Import java.util.List and java.util.Map,
18

18

00:00:50,940  -->  00:00:54,030
and we'll call this one headerFields,
19

19

00:00:55,470  -->  00:00:59,300
and it's gonna be
reconnection.getHeaderFields
20

20

00:01:01,420  -->  00:01:03,990
So that actually retrieves all the headers
21

21

00:01:03,990  -->  00:01:06,140
for the webpage automatically,
which is pretty cool
22

22

00:01:06,140  -->  00:01:07,670
and let's now print those out.
23

23

00:01:07,670  -->  00:01:10,500
So we're gonna do a for, Map.Entry
24

24

00:01:11,830  -->  00:01:15,400
and it's String, same
definition as the previous line
25

25

00:01:15,400  -->  00:01:18,990
so it's String then
List of String objects,
26

26

00:01:19,840  -->  00:01:23,170
entry, and it'd be headerFields.entrySet
27

27

00:01:28,330  -->  00:01:29,980
Then retrieve the key for each one,
28

28

00:01:29,980  -->  00:01:33,230
so String key is equal to entry.getKey.
29

29

00:01:35,110  -->  00:01:38,000
Then we wanna retrieve the
individual headers for that key
30

30

00:01:38,000  -->  00:01:40,790
so a List of String object we're creating,
31

31

00:01:40,790  -->  00:01:44,200
we'll call it value equals entry.getValue
32

32

00:01:46,790  -->  00:01:49,740
and print out a message here.
33

33

00:01:49,740  -->  00:01:53,910
Key, just so it's stands out
a little bit, equals plus key.
34

34

00:01:55,840  -->  00:01:57,450
Then we need to go through, loop through,
35

35

00:01:57,450  -->  00:02:01,320
and get all the header values
from the particular key.
36

36

00:02:01,320  -->  00:02:03,480
So for string colon value,
37

37

00:02:11,500  -->  00:02:15,660
and we're gonna print out
the value equals plus value.
38

38

00:02:18,280  -->  00:02:20,390
Alright so there's our code.
39

39

00:02:20,390  -->  00:02:22,000
So you can see that we're actually
40

40

00:02:22,000  -->  00:02:25,160
retrieving the headers on line 24
41

41

00:02:25,160  -->  00:02:26,540
and once we've retrieved that,
42

42

00:02:26,540  -->  00:02:28,350
we're going through and
iterating through the Map
43

43

00:02:28,350  -->  00:02:30,660
and we're printing at each key and value.
44

44

00:02:30,660  -->  00:02:32,990
And if we actually run this,
45

45

00:02:37,300  -->  00:02:41,940
and you can see there's
quite a few key values there.
46

46

00:02:41,940  -->  00:02:44,820
Scroll through the list there.
47

47

00:02:44,820  -->  00:02:48,820
So, we've got the version
the HTTP connection is using,
48

48

00:02:48,820  -->  00:02:51,460
when the page was last modified.
49

49

00:02:51,460  -->  00:02:53,460
Last modified down here.
50

50

00:02:54,390  -->  00:02:58,140
Expiry date, we've got the content length
51

51

00:02:58,140  -->  00:03:00,170
and so on and so forth.
52

52

00:03:00,170  -->  00:03:03,720
Now, you can use the
reconnection.getHeaderField
53

53

00:03:03,720  -->  00:03:08,180
as opposed to getHeaderFields
here, that we used on line 24.
54

54

00:03:08,180  -->  00:03:09,850
So use the .getHeaderField method
55

55

00:03:09,850  -->  00:03:12,050
to retrieve each of these
values individually,
56

56

00:03:12,050  -->  00:03:14,300
if you're only interested in one or two.
57

57

00:03:14,300  -->  00:03:16,940
Now, I probably didn't make
it clear in the last video,
58

58

00:03:16,940  -->  00:03:19,880
but probably you've realised
this is the case anyway,
59

59

00:03:19,880  -->  00:03:23,830
but we can't actually write
to the example.org page.
60

60

00:03:23,830  -->  00:03:25,630
The reason I am saying that is I set
61

61

00:03:25,630  -->  00:03:28,960
this option here on line
18 to setDoOutput to true.
62

62

00:03:28,960  -->  00:03:31,660
So there's no forms on the
page that accept input.
63

63

00:03:31,660  -->  00:03:33,850
When you want to write to URL,
64

64

00:03:33,850  -->  00:03:35,560
you could use the reconnection class,
65

65

00:03:35,560  -->  00:03:38,380
but as I've mentioned the reconnection
66

66

00:03:38,380  -->  00:03:40,430
is a generic connection class.
67

67

00:03:40,430  -->  00:03:43,950
When reading webpages or
content created in feeds,
68

68

00:03:43,950  -->  00:03:45,510
essentially anything that can be reached
69

69

00:03:45,510  -->  00:03:47,520
over the internet using a URL,
70

70

00:03:47,520  -->  00:03:51,070
then you'll want to use
the HttpURLConnection class
71

71

00:03:51,070  -->  00:03:54,150
which is a subclass of reconnection.
72

72

00:03:54,150  -->  00:03:56,090
Now, the reason that you want to use that
73

73

00:03:56,090  -->  00:04:00,150
is that it contains, this is
the HttpURLConnection class,
74

74

00:04:00,150  -->  00:04:03,060
support for HTTP specific features.
75

75

00:04:04,360  -->  00:04:06,750
Let's just go over quickly,
76

76

00:04:06,750  -->  00:04:08,780
what happens when your browser
77

77

00:04:08,780  -->  00:04:11,710
requests a webpage or
when you press submit,
78

78

00:04:11,710  -->  00:04:13,970
the submit button on a form.
79

79

00:04:13,970  -->  00:04:16,430
I'm gonna speak of this
only at a very high level,
80

80

00:04:16,430  -->  00:04:18,340
because I wanna to give
you just enough information
81

81

00:04:18,340  -->  00:04:19,810
to help you understand how
82

82

00:04:19,810  -->  00:04:22,720
to use the HttpURLConnection class.
83

83

00:04:24,380  -->  00:04:26,420
So when your browser asks for a webpage,
84

84

00:04:26,420  -->  00:04:28,890
it does what's called a GET request.
85

85

00:04:28,890  -->  00:04:31,740
Now the server that hosts
the page will then respond,
86

86

00:04:31,740  -->  00:04:34,590
and the response will include a code.
87

87

00:04:34,590  -->  00:04:37,050
For example, the code 200 means okay.
88

88

00:04:37,050  -->  00:04:39,210
And that means the
server found the webpage,
89

89

00:04:39,210  -->  00:04:42,490
and was able to return it to
the browser with no problems.
90

90

00:04:42,490  -->  00:04:44,520
And a code 404 is returned,
91

91

00:04:44,520  -->  00:04:47,790
when the server can't find
the requested webpage.
92

92

00:04:47,790  -->  00:04:49,300
And you may have seen this one yourself,
93

93

00:04:49,300  -->  00:04:51,970
the web, your browser returns a 404 error,
94

94

00:04:51,970  -->  00:04:55,050
and in fact some sites will
return a nice error page,
95

95

00:04:55,050  -->  00:04:57,680
but others don't handle
404 errors very well,
96

96

00:04:57,680  -->  00:04:59,640
and you just see a sort of
standard generic message
97

97

00:04:59,640  -->  00:05:03,460
in the browser telling you
that the page can't be found.
98

98

00:05:03,460  -->  00:05:06,090
Moving on, a code of
500 means that something
99

99

00:05:06,090  -->  00:05:08,280
critically went wrong at the server side.
100

100

00:05:08,280  -->  00:05:09,790
For example, the database the webpage
101

101

00:05:09,790  -->  00:05:11,840
needs to access could be down.
102

102

00:05:11,840  -->  00:05:14,400
So all of these are
examples of a return code,
103

103

00:05:14,400  -->  00:05:18,680
and we refer to that as the response code.
104

104

00:05:18,680  -->  00:05:21,510
Now when we want to provide
information to a URL,
105

105

00:05:21,510  -->  00:05:23,840
we use a POST operation.
106

106

00:05:23,840  -->  00:05:25,630
Now I'm not gonna be
demonstrating POST here,
107

107

00:05:25,630  -->  00:05:27,520
because the most common use of POST
108

108

00:05:27,520  -->  00:05:29,550
is to post values to a form,
109

109

00:05:29,550  -->  00:05:31,910
and we don't have a form to practise on.
110

110

00:05:31,910  -->  00:05:33,690
In other words, we haven't
got the server side
111

111

00:05:33,690  -->  00:05:36,560
setup for this, and it wouldn't really
112

112

00:05:36,560  -->  00:05:40,600
be very nice to use a
form on an existing site.
113

113

00:05:40,600  -->  00:05:43,110
In any event, you'll see some
sample code about how to POST,
114

114

00:05:43,110  -->  00:05:45,040
but you won't be able
to run an application
115

115

00:05:45,040  -->  00:05:49,210
that does so unless you've got
a website to put the code on.
116

116

00:05:49,210  -->  00:05:50,820
Alright, so with that really brief,
117

117

00:05:50,820  -->  00:05:53,220
and simplified overview out
of the way, let's actually
118

118

00:05:53,220  -->  00:05:57,140
start working with the
HttpURLConnection class.
119

119

00:05:58,070  -->  00:05:59,070
So what I'm going to do
120

120

00:05:59,070  -->  00:06:02,340
is comment out all this code now.
121

121

00:06:02,340  -->  00:06:04,180
Or actually, what I'll do
is I'll just comment out
122

122

00:06:04,180  -->  00:06:07,860
everything other than the
first two lines there.
123

123

00:06:07,860  -->  00:06:10,140
So we've still got our URL example.org,
124

124

00:06:10,140  -->  00:06:14,760
and we've got our connection
that we've setup on line 13.
125

125

00:06:14,760  -->  00:06:17,540
I'll just change the name
of that to connection,
126

126

00:06:17,540  -->  00:06:19,340
make it a bit easier.
127

127

00:06:19,340  -->  00:06:20,830
Alright.
128

128

00:06:20,830  -->  00:06:22,670
So by now you're familiar
with how to create
129

129

00:06:22,670  -->  00:06:25,080
a URL instance, because we've
done that in the course.
130

130

00:06:25,080  -->  00:06:27,680
After doing that, we call the
url.open Connection method
131

131

00:06:27,680  -->  00:06:29,340
to open a connection.
132

132

00:06:29,340  -->  00:06:30,330
And in addition to that,
133

133

00:06:30,330  -->  00:06:31,980
instead of using the URL as I mentioned,
134

134

00:06:31,980  -->  00:06:35,700
we're gonna be using
the HttpURLConnection.
135

135

00:06:35,700  -->  00:06:37,530
So, HttpURLConnection.
136

136

00:06:41,570  -->  00:06:45,520
Then we need to then cast
that as a HttpURLConnection.
137

137

00:06:45,520  -->  00:06:48,450
That's the call to the
url.open Connection.
138

138

00:06:48,450  -->  00:06:52,270
So cast that like that,
and we're good to go.
139

139

00:06:52,270  -->  00:06:54,060
So you can see that we've
revised that a little bit.
140

140

00:06:54,060  -->  00:06:56,550
Now for our connection, we're returning
141

141

00:06:56,550  -->  00:06:59,300
a HttpURLConnection object this time
142

142

00:06:59,300  -->  00:07:02,520
with a call to the url.open Connection.
143

143

00:07:02,520  -->  00:07:04,520
And basically, the method is smart enough
144

144

00:07:04,520  -->  00:07:09,000
as you can see, to return
a HttpURLConnection.
145

145

00:07:09,000  -->  00:07:10,400
It was actually doing the same thing
146

146

00:07:10,400  -->  00:07:12,480
with the previous code, we just didn't use
147

147

00:07:12,480  -->  00:07:14,670
any of the methods that were specific
148

148

00:07:14,670  -->  00:07:17,580
to the HttpURLConnection class.
149

149

00:07:17,580  -->  00:07:18,960
In fact, we only used methods from
150

150

00:07:18,960  -->  00:07:21,810
the parent reconnection class.
151

151

00:07:21,810  -->  00:07:23,770
And out of interest, another type of URL
152

152

00:07:23,770  -->  00:07:27,150
that the method recognises, is a jar URL.
153

153

00:07:27,150  -->  00:07:29,470
So if you provide a URL for a jar file,
154

154

00:07:29,470  -->  00:07:32,720
the method will return a
JarURLConnection instance,
155

155

00:07:32,720  -->  00:07:34,860
and you do this when
you wanna read or write
156

156

00:07:34,860  -->  00:07:36,510
to a jar file.
157

157

00:07:36,510  -->  00:07:39,720
And because the method
recognises the HTTP protocol
158

158

00:07:39,720  -->  00:07:42,280
and returns the appropriate
connection instance,
159

159

00:07:42,280  -->  00:07:44,370
it's safe to cast the return value
160

160

00:07:44,370  -->  00:07:47,960
to a HttpURLConnection
object in this case.
161

161

00:07:48,820  -->  00:07:51,760
Alright, and if you've
been paying attention
162

162

00:07:51,760  -->  00:07:53,120
in previous videos I mentioned
163

163

00:07:53,120  -->  00:07:55,170
that calling the open Connection method
164

164

00:07:55,170  -->  00:07:58,690
doesn't actually open the
connection to the destination.
165

165

00:07:58,690  -->  00:08:00,080
You can configure the connection
166

166

00:08:00,080  -->  00:08:03,930
before calling the connect
method to actually connect.
167

167

00:08:03,930  -->  00:08:05,400
Now we wanna read the webpage,
168

168

00:08:05,400  -->  00:08:08,030
so we're gonna be using a GET connection.
169

169

00:08:08,030  -->  00:08:10,050
So we've made the call
to open the connection,
170

170

00:08:10,050  -->  00:08:13,970
next we wanna do a
connection.setRequestMethod,
171

171

00:08:16,700  -->  00:08:19,930
with GET, and GET should
be in uppercase as well.
172

172

00:08:19,930  -->  00:08:21,560
Now because the default method is GET
173

173

00:08:21,560  -->  00:08:23,610
you don't actually have
to call this method
174

174

00:08:23,610  -->  00:08:26,220
when you want to do a GET operation.
175

175

00:08:26,220  -->  00:08:28,330
But to make it clear, we've done this here
176

176

00:08:28,330  -->  00:08:30,140
so it's really abundantly
clear with your code
177

177

00:08:30,140  -->  00:08:31,950
and I recommend that you do add that
178

178

00:08:31,950  -->  00:08:34,510
even though it's potentially
an optional thing.
179

179

00:08:34,510  -->  00:08:36,510
And in addition to GET and POST,
180

180

00:08:36,510  -->  00:08:38,050
you can also set the request method
181

181

00:08:38,050  -->  00:08:41,860
to HEAD, OPTIONS, PUT, DELETE and TRACE.
182

182

00:08:41,860  -->  00:08:43,330
And if you're interested in what they are
183

183

00:08:43,330  -->  00:08:45,170
and what they actually mean,
184

184

00:08:45,170  -->  00:08:47,730
I'm gonna give you a link to find out
185

185

00:08:47,730  -->  00:08:49,110
more information about those, because
186

186

00:08:49,110  -->  00:08:51,240
we won't be covering many of those.
187

187

00:08:51,240  -->  00:08:53,320
Let's paste that link in.
188

188

00:08:54,730  -->  00:08:55,890
So you can actually read up on those
189

189

00:08:55,890  -->  00:08:57,230
to see what these other options are.
190

190

00:08:57,230  -->  00:08:59,130
Options GET, HEAD...
191

191

00:08:59,130  -->  00:09:00,190
Well GET we're obviously gonna be using,
192

192

00:09:00,190  -->  00:09:03,220
but POST, PUT, DELETE, so on and so forth.
193

193

00:09:03,220  -->  00:09:07,420
So refer to that for specific information.
194

194

00:09:07,420  -->  00:09:08,580
Now it's important to note here,
195

195

00:09:08,580  -->  00:09:11,380
that each HttpURLConnection instance
196

196

00:09:11,380  -->  00:09:14,890
can only be used to make one request.
197

197

00:09:14,890  -->  00:09:17,070
However, the underlying connection
198

198

00:09:17,070  -->  00:09:20,120
may actually persist
across connection objects.
199

199

00:09:20,120  -->  00:09:21,920
Remember that Java is doing a lot of work
200

200

00:09:21,920  -->  00:09:23,490
under the covers here.
201

201

00:09:23,490  -->  00:09:26,250
Now, when working with a high level API,
202

202

00:09:26,250  -->  00:09:28,380
you're dealing with abstractions.
203

203

00:09:28,380  -->  00:09:30,970
So when you call the connect
method for the first time,
204

204

00:09:30,970  -->  00:09:33,290
Java has to create a socket, and do
205

205

00:09:33,290  -->  00:09:34,910
all the handshaking, et cetera,
206

206

00:09:34,910  -->  00:09:36,380
that we saw in earlier videos,
207

207

00:09:36,380  -->  00:09:38,740
when we're dealing with a low level API.
208

208

00:09:38,740  -->  00:09:41,400
But because we're dealing
with the high level API,
209

209

00:09:41,400  -->  00:09:43,700
this is handled for us automatically.
210

210

00:09:43,700  -->  00:09:45,920
And because the application
you're creating here
211

211

00:09:45,920  -->  00:09:48,090
might wanna perform more requests,
212

212

00:09:48,090  -->  00:09:50,000
the underlying connection may persist,
213

213

00:09:50,000  -->  00:09:54,850
even if you close the
HttpURLConnection connection.
214

214

00:09:54,850  -->  00:09:57,330
So having to create the
socket for each request
215

215

00:09:57,330  -->  00:09:58,490
would actually be inefficient,
216

216

00:09:58,490  -->  00:10:01,540
which is the reason that Java
does that under the covers.
217

217

00:10:01,540  -->  00:10:04,030
So it keeps the connection open.
218

218

00:10:04,030  -->  00:10:07,610
Now at this point, you wanna
set some request properties.
219

219

00:10:07,610  -->  00:10:10,110
I'm not gonna be able to go
through everything you can set,
220

220

00:10:10,110  -->  00:10:12,890
but what you're doing is
setting the header fields,
221

221

00:10:12,890  -->  00:10:17,080
which contain information
about a request or a response.
222

222

00:10:17,080  -->  00:10:19,380
Now as you saw earlier
when getting a webpage,
223

223

00:10:19,380  -->  00:10:22,700
the header fields contain
information about that webpage.
224

224

00:10:22,700  -->  00:10:25,130
And the good link here
that I'm gonna show you,
225

225

00:10:25,130  -->  00:10:28,670
that you can use to see
a list of header fields.
226

226

00:10:28,670  -->  00:10:32,510
So let's just quickly
go to that page as well.
227

227

00:10:34,150  -->  00:10:36,150
So you can actually read
up on what the various
228

228

00:10:36,150  -->  00:10:39,180
header field names are,
and what they actually do
229

229

00:10:39,180  -->  00:10:41,180
and an example of usage of them as well,
230

230

00:10:41,180  -->  00:10:42,920
what they'll come back as.
231

231

00:10:42,920  -->  00:10:44,470
And you've probably seen some of those
232

232

00:10:44,470  -->  00:10:48,640
when we printed out the header
fields earlier in this video.
233

233

00:10:49,940  -->  00:10:51,840
Now in this case, we're
setting the header fields
234

234

00:10:51,840  -->  00:10:54,480
for the request we're
making, which will provide
235

235

00:10:54,480  -->  00:10:57,530
the server with information
about the request.
236

236

00:10:57,530  -->  00:11:01,430
So we're gonna set the user
agent property as an example.
237

237

00:11:01,430  -->  00:11:03,210
Now this tells the server what browser
238

238

00:11:03,210  -->  00:11:05,910
or script that you're using.
239

239

00:11:05,910  -->  00:11:09,790
We're just gonna set it to
a random value of Chrome.
240

240

00:11:09,790  -->  00:11:10,890
So I'm gonna show you how to do that,
241

241

00:11:10,890  -->  00:11:13,560
so connection.setRequestProperty
242

242

00:11:16,860  -->  00:11:18,650
we're gonna type in User-Agent,
243

243

00:11:18,650  -->  00:11:21,340
making sure you get your
capitalization correct,
244

244

00:11:21,340  -->  00:11:25,770
User-Agent, and we're gonna
set it to the value of Chrome.
245

245

00:11:25,770  -->  00:11:27,890
Now don't worry if that's not
what you're using by the way.
246

246

00:11:27,890  -->  00:11:29,990
It's not the string that Chrome would use,
247

247

00:11:29,990  -->  00:11:31,730
and some webpages would
reject the request,
248

248

00:11:31,730  -->  00:11:33,570
because hackers and spammers sometimes
249

249

00:11:33,570  -->  00:11:35,960
use questionable user agents.
250

250

00:11:35,960  -->  00:11:38,990
But the server hosting the
example.org page doesn't baulk,
251

251

00:11:38,990  -->  00:11:42,710
and if for some reason it
does, you can just comment out
252

252

00:11:42,710  -->  00:11:44,810
this particular line of code on line 15,
253

253

00:11:44,810  -->  00:11:46,920
but it should accept it quite nicely.
254

254

00:11:46,920  -->  00:11:49,940
So we set the user agent here to Chrome.
255

255

00:11:49,940  -->  00:11:51,590
Now the setRequestProperty method
256

256

00:11:51,590  -->  00:11:54,040
is in the reconnection parent class,
257

257

00:11:54,040  -->  00:11:56,020
the first parameter is the key,
258

258

00:11:56,020  -->  00:11:58,300
and the second parameter is the value.
259

259

00:11:58,300  -->  00:11:59,700
Now if the property you're setting
260

260

00:11:59,700  -->  00:12:01,360
can accept multiple values,
261

261

00:12:01,360  -->  00:12:05,120
you can only use one
setRequestProperty call.
262

262

00:12:05,120  -->  00:12:07,050
You use commas to separate the values
263

263

00:12:07,050  -->  00:12:09,230
you pass as a second parameter.
264

264

00:12:09,230  -->  00:12:11,040
Now if you wanna do a
POST on the other hand
265

265

00:12:11,040  -->  00:12:15,240
at this point you'd wanna call
connection.setDoOutput true,
266

266

00:12:15,240  -->  00:12:16,840
as you saw previously I set to
267

267

00:12:16,840  -->  00:12:19,120
so that you can actually
write to the connection.
268

268

00:12:19,120  -->  00:12:21,530
But obviously we're not
doing that in this case.
269

269

00:12:21,530  -->  00:12:22,820
Alright, so moving on.
270

270

00:12:22,820  -->  00:12:26,580
We're gonna call the
HttpURLConnection.getResponseCode
271

271

00:12:26,580  -->  00:12:28,390
method, and that's gonna tell us whether
272

272

00:12:28,390  -->  00:12:31,130
we'll be able to
successfully read the page.
273

273

00:12:31,130  -->  00:12:34,530
So we'd type something
like, int responseCode
274

274

00:12:34,530  -->  00:12:37,690
is equal to connection.getResponseCode
275

275

00:12:40,460  -->  00:12:42,190
And let's output that.
276

276

00:12:42,190  -->  00:12:45,980
We'll put response code plus responseCode
277

277

00:12:45,980  -->  00:12:48,490
just to see what that code was.
278

278

00:12:48,490  -->  00:12:50,390
And just as with sockets,
279

279

00:12:50,390  -->  00:12:52,540
you can also set a timeout value.
280

280

00:12:52,540  -->  00:12:54,020
So if a website is down,
281

281

00:12:54,020  -->  00:12:55,670
or the server is slow for some reason,
282

282

00:12:55,670  -->  00:12:59,590
your application won't hang
waiting for a response.
283

283

00:12:59,590  -->  00:13:01,290
So let's actually set a timeout.
284

284

00:13:01,290  -->  00:13:04,460
I'm gonna do connection.setReadTimeout
285

285

00:13:05,330  -->  00:13:09,910
We'll set that to 30,000
here, which is 30 seconds.
286

286

00:13:09,910  -->  00:13:11,920
And obviously that's far too generous,
287

287

00:13:11,920  -->  00:13:14,310
normally you wouldn't
want to wait 30 seconds,
288

288

00:13:14,310  -->  00:13:17,030
but in this case it's probably okay,
289

289

00:13:17,030  -->  00:13:18,610
and you'd certainly expect a server
290

290

00:13:18,610  -->  00:13:20,550
to respond more quickly
than within 30 seconds,
291

291

00:13:20,550  -->  00:13:23,440
but don't make the
timeout too small though,
292

292

00:13:23,440  -->  00:13:24,950
or you'll constantly time out.
293

293

00:13:24,950  -->  00:13:26,430
So 10 or 15 seconds would probably
294

294

00:13:26,430  -->  00:13:28,470
be a reasonable number there.
295

295

00:13:28,470  -->  00:13:29,960
Alright, and as you can see that...
296

296

00:13:29,960  -->  00:13:31,400
I've got that in the wrong place,
297

297

00:13:31,400  -->  00:13:33,560
I'm gonna move that back,
298

298

00:13:33,560  -->  00:13:36,630
and put that just before the initial call
299

299

00:13:36,630  -->  00:13:38,930
to connection.getResponseCode.
300

300

00:13:38,930  -->  00:13:40,140
And what we can actually do is check
301

301

00:13:40,140  -->  00:13:42,680
to see whether the response code we've got
302

302

00:13:42,680  -->  00:13:43,880
is the correct value.
303

303

00:13:43,880  -->  00:13:48,340
So we can put, if responseCode
is not equal to 200,
304

304

00:13:48,340  -->  00:13:51,130
then you can put something like,
305

305

00:13:51,130  -->  00:13:53,710
error reading web page, return.
306

306

00:13:55,630  -->  00:13:58,560
So we could sort of
exit from that point on.
307

307

00:13:58,560  -->  00:14:01,310
So let's actually continue while I'm here,
308

308

00:14:01,310  -->  00:14:04,830
and we're going to uncomment
the code we had previously
309

309

00:14:04,830  -->  00:14:06,920
so that we can actually
read from the connection.
310

310

00:14:06,920  -->  00:14:11,000
So I'm gonna come back
here and comment that out.
311

311

00:14:13,850  -->  00:14:16,780
So I'm going to just get rid
of some of that code there.
312

312

00:14:16,780  -->  00:14:18,140
Actually, what I'll do is I'll take a copy
313

313

00:14:18,140  -->  00:14:19,730
of that line first,
314

314

00:14:22,190  -->  00:14:23,960
uncomment that,
315

315

00:14:23,960  -->  00:14:24,800
then what we're going to do is
316

316

00:14:24,800  -->  00:14:28,960
get this code here that
actually retrieves the data.
317

317

00:14:32,120  -->  00:14:34,620
Paste that in, uncomment that.
318

318

00:14:36,030  -->  00:14:37,390
And we'll just fix this up a little bit.
319

319

00:14:37,390  -->  00:14:38,240
So what we're gonna do is,
320

320

00:14:38,240  -->  00:14:40,310
we've got a BufferedReader inputReader,
321

321

00:14:40,310  -->  00:14:44,480
we're gonna change this here,
switch to an inputReader.
322

322

00:14:45,690  -->  00:14:48,600
It goes, new BufferedReader,
new InputStreamReader
323

323

00:14:48,600  -->  00:14:50,250
which is still correct, but in this case
324

324

00:14:50,250  -->  00:14:54,450
it's going to be
connection, not reconnection
325

325

00:14:54,450  -->  00:14:56,620
connection.getInputStream.
326

326

00:14:57,820  -->  00:15:01,110
Then we're gonna start by
assigning an empty string,
327

327

00:15:01,110  -->  00:15:02,120
and we'll do a check while,
328

328

00:15:02,120  -->  00:15:04,790
we're gonna change that a
little bit, the while loop,
329

329

00:15:04,790  -->  00:15:08,710
it's gonna be while, two
left parentheses, line
330

330

00:15:09,820  -->  00:15:10,730
is equal to
331

331

00:15:11,720  -->  00:15:12,630
inputReader
332

332

00:15:14,030  -->  00:15:14,860
.readLine,
333

333

00:15:16,920  -->  00:15:18,420
not equal to null.
334

334

00:15:21,650  -->  00:15:25,230
And I'm just gonna print
out the line there.
335

335

00:15:25,230  -->  00:15:28,900
Then we're going to do
an inputReader.close.
336

336

00:15:29,810  -->  00:15:31,800
And we needed another parentheses there,
337

337

00:15:31,800  -->  00:15:34,030
to fix that up so it's happy.
338

338

00:15:34,030  -->  00:15:34,880
And we'll get rid of that there,
339

339

00:15:34,880  -->  00:15:36,410
we can just start with an empty string
340

340

00:15:36,410  -->  00:15:39,290
that's defaulting to null.
341

341

00:15:39,290  -->  00:15:40,120
So all we're really doing here
342

342

00:15:40,120  -->  00:15:41,770
is we're setting the response codes,
343

343

00:15:41,770  -->  00:15:43,190
as you can see there, for Chrome,
344

344

00:15:43,190  -->  00:15:44,580
and we're setting a timeout,
345

345

00:15:44,580  -->  00:15:46,840
we're checking to see
what the response code is,
346

346

00:15:46,840  -->  00:15:48,520
if it's not equal to
200 we're printing out
347

347

00:15:48,520  -->  00:15:50,810
a message that there's an
error reading the webpage,
348

348

00:15:50,810  -->  00:15:52,410
and we're gonna return.
349

349

00:15:52,410  -->  00:15:53,750
Otherwise, what we're
gonna do here is we're
350

350

00:15:53,750  -->  00:15:55,980
then going to go through and read
351

351

00:15:55,980  -->  00:15:58,100
the contents of the actual website.
352

352

00:15:58,100  -->  00:16:00,100
And this line here, line 33, may not be
353

353

00:16:00,100  -->  00:16:02,310
something that's familiar to you.
354

354

00:16:02,310  -->  00:16:04,770
What we're doing is, we're
actually doing a test there,
355

355

00:16:04,770  -->  00:16:06,830
we're both assigning the value
356

356

00:16:06,830  -->  00:16:07,880
of whatever we've read from
357

357

00:16:07,880  -->  00:16:10,930
the inputReader.readLine method into line,
358

358

00:16:10,930  -->  00:16:14,570
then we're also checking to
see whether that value is null.
359

359

00:16:14,570  -->  00:16:15,960
While it's not equal to null,
360

360

00:16:15,960  -->  00:16:17,730
we're gonna continue outputting it,
361

361

00:16:17,730  -->  00:16:19,550
and we'll loop through to
the next line and so on
362

362

00:16:19,550  -->  00:16:22,100
until we eventually find
that line is set to null
363

363

00:16:22,100  -->  00:16:24,040
in which case it'll exit the while loop
364

364

00:16:24,040  -->  00:16:25,830
and move on to the next line,
365

365

00:16:25,830  -->  00:16:28,910
which will close the BufferedReader.
366

366

00:16:28,910  -->  00:16:32,570
Alright, so let's
actually try running that.
367

367

00:16:34,880  -->  00:16:35,970
And you can see there that we've
368

368

00:16:35,970  -->  00:16:39,300
successfully read the page okay.
369

369

00:16:39,300  -->  00:16:42,060
We got a response code
of 200 there as well,
370

370

00:16:42,060  -->  00:16:43,770
and that's obviously why in this case
371

371

00:16:43,770  -->  00:16:46,540
we didn't get this
block of code executing,
372

372

00:16:46,540  -->  00:16:50,570
because you actually got
the response code of 200.
373

373

00:16:50,570  -->  00:16:51,980
Now you might be thinking at this point,
374

374

00:16:51,980  -->  00:16:55,250
"wait a minute Tim, I didn't
call the connect method,
375

375

00:16:55,250  -->  00:16:57,330
so how is this working?"
376

376

00:16:57,330  -->  00:16:58,960
Well the thing to keep
in mind here is that
377

377

00:16:58,960  -->  00:17:02,810
some methods implicitly
perform the connection step.
378

378

00:17:02,810  -->  00:17:03,890
Now when we actually call,
379

379

00:17:03,890  -->  00:17:08,150
the getResponseCode method
down here on line 20,
380

380

00:17:08,150  -->  00:17:10,040
it performed the connection.
381

381

00:17:10,040  -->  00:17:14,310
In fact, the
HttpURLConnection.getInputStream method
382

382

00:17:14,310  -->  00:17:16,220
also implicitly connects.
383

383

00:17:16,220  -->  00:17:19,530
So all the calls to connect
have been unnecessary.
384

384

00:17:19,530  -->  00:17:21,050
Essentially, if an operation depends
385

385

00:17:21,050  -->  00:17:23,410
on being connected to work, it'll actually
386

386

00:17:23,410  -->  00:17:26,310
perform the connection where necessary.
387

387

00:17:26,310  -->  00:17:28,340
Now if you call connect when a connection
388

388

00:17:28,340  -->  00:17:30,480
has already been established, the method
389

389

00:17:30,480  -->  00:17:33,430
doesn't do anything, so
there's no performance hit.
390

390

00:17:33,430  -->  00:17:35,340
So in other words,
explicitly calling connect
391

391

00:17:35,340  -->  00:17:38,340
can make the code clearer
for anyone reading it,
392

392

00:17:38,340  -->  00:17:40,230
but feel free to leave it
out when the code calls
393

393

00:17:40,230  -->  00:17:44,200
another method that implicitly
performs a connection.
394

394

00:17:44,200  -->  00:17:45,820
Alright, so let's end the video here.
395

395

00:17:45,820  -->  00:17:47,100
In the next video, we'll continue on
396

396

00:17:47,100  -->  00:17:49,180
and we'll actually see what happens
397

397

00:17:49,180  -->  00:17:51,810
when we try reading a
webpage that doesn't exist,
398

398

00:17:51,810  -->  00:17:55,250
to see whether we get the 404
response code back or not.
399

399

00:17:55,250  -->  00:17:57,150
So I'll see you in the next video.
