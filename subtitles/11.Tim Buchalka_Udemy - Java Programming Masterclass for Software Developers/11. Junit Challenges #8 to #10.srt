1
1

00:00:04,000  -->  00:00:07,090
ok so let's work on the last three
2

2

00:00:07,090  -->  00:00:08,560
challenges this is challenge number
3

3

00:00:08,560  -->  00:00:11,240
8
4

4

00:00:11,240  -->  00:00:13,010
so the challenge here is to write another
5

5

00:00:13,010  -->  00:00:15,880
test for the converted method that tests
6

6

00:00:15,880  -->  00:00:18,460
the following scenario now by the way
7

7

00:00:18,460  -->  00:00:20,450
you can add the test to the existing test
8

8

00:00:20,450  -->  00:00:23,680
method or create a new one now the input
9

9

00:00:23,680  -->  00:00:26,770
here is a equals 10 b equals 0 the
10

10

00:00:26,770  -->  00:00:30,670
output arithmetic exception / 0 so
11

11

00:00:30,670  -->  00:00:32,240
that's the test see how you go with that
12

12

00:00:32,240  -->  00:00:34,250
pause the video and I'll see you when
13

13

00:00:34,250  -->  00:00:35,170
you get back
14

14

00:00:35,170  -->  00:00:39,680
ok so part of this challenge was a trick
15

15

00:00:39,680  -->  00:00:42,110
question i'm sorry to say that's because
16

16

00:00:42,110  -->  00:00:43,970
we can't really put the test in the same
17

17

00:00:43,970  -->  00:00:46,720
test method because in this case we're
18

18

00:00:46,720  -->  00:00:49,510
expecting an exception to be thrown now if
19

19

00:00:49,510  -->  00:00:51,370
we were to put both tests in the same
20

20

00:00:51,370  -->  00:00:53,470
method it's possible that the test
21

21

00:00:53,470  -->  00:00:55,670
method as a whole would pass even though
22

22

00:00:55,670  -->  00:00:57,610
one of its or one of the asserts was
23

23

00:00:57,610  -->  00:00:59,780
failing so consequently we going to use a
24

24

00:00:59,780  -->  00:01:02,650
new test method and will modify the org
25

25

00:01:02,650  -->  00:01:05,960
.junit test annotation to let junit
26

26

00:01:05,960  -->  00:01:08,210
know that we're expecting an exception
27

27

00:01:08,210  -->  00:01:09,110
to be thrown
28

28

00:01:09,110  -->  00:01:11,390
let's go ahead and do that i'm just
29

29

00:01:11,390  -->  00:01:14,000
going to add this code below the first
30

30

00:01:14,000  -->  00:01:16,070
converter test method and.....
31

31

00:01:16,070  -->  00:02:06,670
...
32

32

00:02:06,670  -->  00:02:08,340
alright so we'll run that and see what
33

33

00:02:08,340  -->  00:02:15,840
happens and you can see that successfully
34

34

00:02:15,840  -->  00:02:18,450
passes and just to confirm that
35

35

00:02:18,450  -->  00:02:20,310
obviously will pass 0 which is causing
36

36

00:02:20,310  -->  00:02:22,900
the arithmetic exception change that to
37

37

00:02:22,900  -->  00:02:25,290
1 should run that again this should
38

38

00:02:25,290  -->  00:02:27,540
now fail because the exception isn't
39

39

00:02:27,540  -->  00:02:29,230
being thrown you can see we are getting
40

40

00:02:29,230  -->  00:02:31,450
expected exception to be thrown and we
41

41

00:02:31,450  -->  00:02:33,600
didn't receive once so put that back to zero
42

42

00:02:33,600  -->  00:02:38,530
it's working fine
43

43

00:02:38,530  -->  00:02:41,620
alright next challenge challenge number
44

44

00:02:41,620  -->  00:02:46,880
nine
45

45

00:02:46,880  -->  00:02:49,700
now this challenge we want to reduce
46

46

00:02:49,700  -->  00:02:52,060
some repetition all of our test methods
47

47

00:02:52,060  -->  00:02:54,010
are now implement and our tests are
48

48

00:02:54,010  -->  00:02:56,690
passing would want to write more test
49

49

00:02:56,690  -->  00:02:59,150
cases to cover scenarios that the
50

50

00:02:59,150  -->  00:03:01,280
existing ones don't test but I will
51

51

00:03:01,280  -->  00:03:02,540
pretend that we're actually done and we
52

52

00:03:02,540  -->  00:03:05,120
have covered all scenarios now we could stop
53

53

00:03:05,120  -->  00:03:07,310
here but every one of the test cases
54

54

00:03:07,310  -->  00:03:09,700
starts by creating an instance of
55

55

00:03:09,700  -->  00:03:12,700
utilities class so the challenges is to
56

56

00:03:12,700  -->  00:03:15,200
modify the utilities test class so it
57

57

00:03:15,200  -->  00:03:17,540
doesn't have this repetitive code so
58

58

00:03:17,540  -->  00:03:19,400
that's challenge pause the video and
59

59

00:03:19,400  -->  00:03:21,310
I'll see you when you get back
60

60

00:03:21,310  -->  00:03:25,970
ok so for the solution what we're going
61

61

00:03:25,970  -->  00:03:27,310
to do is we're going to add a method to
62

62

00:03:27,310  -->  00:03:30,170
utilities test that's annotated with the
63

63

00:03:30,170  -->  00:03:32,930
at before annotation and that method
64

64

00:03:32,930  -->  00:03:34,610
will create an instance of the utilities
65

65

00:03:34,610  -->  00:03:37,130
class and will also have to add
66

66

00:03:37,130  -->  00:03:38,980
utilities instance field to the class as
67

67

00:03:38,980  -->  00:03:41,510
well so that the test methods can access
68

68

00:03:41,510  -->  00:03:44,180
the utilities instance now since the app
69

69

00:03:44,180  -->  00:03:45,950
before method will run before every test
70

70

00:03:45,950  -->  00:03:48,380
case every test method will start with a
71

71

00:03:48,380  -->  00:03:50,560
fresh instance of the utilities class
72

72

00:03:50,560  -->  00:03:53,540
let's go ahead and do that so I'm going
73

73

00:03:53,540  -->  00:03:56,950
to start by adding this field....
74

74

00:03:56,950  -->  00:04:23,810
...
75

75

00:04:23,810  -->  00:04:27,800
...and we have to do now is change the code now that
76

76

00:04:27,800  -->  00:04:31,030
is creating a new instance just by
77

77

00:04:31,030  -->  00:04:33,110
deleting that line i call that util
78

78

00:04:33,110  -->  00:04:35,090
and call it util here so
deleting that line i call that util
79

79

00:04:35,090  -->  00:04:37,090
just change the references called
80

80

00:04:37,090  -->  00:04:39,800
to utils in the method so that's
81

81

00:04:39,800  -->  00:04:42,200
every nth character method or test
82

82

00:04:42,200  -->  00:04:44,810
method to fixed same for the remove pairs
83

83

00:04:44,810  -->  00:04:49,310
converter...
84

84

00:04:49,310  -->  00:04:55,280
...
85

85

00:04:55,280  -->  00:04:58,490
....so we've now
86

86

00:04:58,490  -->  00:05:01,960
got no code that actually creates that
87

87

00:05:01,960  -->  00:05:04,780
utilities class instance other than the
88

88

00:05:04,780  -->  00:05:07,060
code on line 15 and eventually removed
89

89

00:05:07,060  -->  00:05:09,250
all that repetitive code and removing
90

90

00:05:09,250  -->  00:05:10,660
repetitive code is always a good thing
91

91

00:05:10,660  -->  00:05:14,860
when your developer let's now run
92

92

00:05:14,860  -->  00:05:16,210
the entire test suite because I think
93

93

00:05:16,210  -->  00:05:17,500
we've done that yet so make sure that
94

94

00:05:17,500  -->  00:05:20,590
it's all working
95

95

00:05:20,590  -->  00:05:22,030
actually what we need to do here is just
96

96

00:05:22,030  -->  00:05:25,090
come up here and see that we haven't
97

97

00:05:25,090  -->  00:05:26,710
actually got an individual tests for the
98

98

00:05:26,710  -->  00:05:28,930
entire suite now so i actually click on
99

99

00:05:28,930  -->  00:05:31,870
that right click and run utilities tests
100

100

00:05:31,870  -->  00:05:34,930
to run the entire suite you can see that
101

101

00:05:34,930  -->  00:05:37,030
all five tests are now running
102

102

00:05:37,030  -->  00:05:39,610
successfully of course now with done that
103

103

00:05:39,610  -->  00:05:41,320
we've got a configuration to be able to
104

104

00:05:41,320  -->  00:05:43,360
run all our tests everything is working
105

105

00:05:43,360  -->  00:05:43,960
fine
106

106

00:05:43,960  -->  00:05:49,210
alright next challenge challenge number
107

107

00:05:49,210  -->  00:05:53,630
10
108

108

00:05:53,630  -->  00:05:55,610
so we want to actually test the following
109

109

00:05:55,610  -->  00:05:57,320
five scenarios is going to be seeing on
110

110

00:05:57,320  -->  00:05:59,510
the next slide with the removed pairs
111

111

00:05:59,510  -->  00:06:01,370
method so we're going to test the
112

112

00:06:01,370  -->  00:06:03,440
following inputs and outputs now you
113

113

00:06:03,440  -->  00:06:04,910
could add all these tests to the
114

114

00:06:04,910  -->  00:06:07,130
existing test method or write a method
115

115

00:06:07,130  -->  00:06:09,290
for each set of input output but that
116

116

00:06:09,290  -->  00:06:10,610
probably wouldn't be the best way to do
117

117

00:06:10,610  -->  00:06:14,310
it
118

118

00:06:14,310  -->  00:06:15,840
I want to do it in such a way that you
119

119

00:06:15,840  -->  00:06:17,490
only have to write one test method
120

120

00:06:17,490  -->  00:06:20,220
that's as a hint you have to create a new
121

121

00:06:20,220  -->  00:06:22,020
class that's using a particular j unit
122

122

00:06:22,020  -->  00:06:24,900
annotation you can see the inputs and
123

123

00:06:24,900  -->  00:06:27,810
the outputs on the screen so taken out
124

124

00:06:27,810  -->  00:06:29,730
of those you'll be testing those to make
125

125

00:06:29,730  -->  00:06:32,130
sure that your matching the input
126

126

00:06:32,130  -->  00:06:35,010
and output and that all your tests work
127

127

00:06:35,010  -->  00:06:37,410
alright so see how you go with that pause the
128

128

00:06:37,410  -->  00:06:39,090
video and I'll see you when you get back
129

129

00:06:39,090  -->  00:06:43,770
alright so the solution really called
130

130

00:06:43,770  -->  00:06:45,840
here for a parameterised test
131

131

00:06:45,840  -->  00:06:47,250
so what we're going to do is create a
132

132

00:06:47,250  -->  00:06:49,170
new class called utilities test
133

133

00:06:49,170  -->  00:06:51,480
parameterised and annotate it with the
134

134

00:06:51,480  -->  00:06:54,090
at runs with annotation let's go ahead
135

135

00:06:54,090  -->  00:06:57,930
and do that new Java class utilities
136

136

00:06:57,930  -->  00:07:08,100
test parameterised going to annotate it
137

137

00:07:08,100  -->  00:07:12,510
with the @....
138

138

00:07:12,510  -->  00:07:14,970
...
139

139

00:07:14,970  -->  00:07:18,420
...now declared some
140

140

00:07:18,420  -->  00:07:21,090
variables for the utilities instance the
141

141

00:07:21,090  -->  00:07:23,370
input value for each test as well as the
142

142

00:07:23,370  -->  00:07:25,920
expected value for each test and we also
143

143

00:07:25,920  -->  00:07:27,510
declare a constructor that will accept
144

144

00:07:27,510  -->  00:07:30,510
the accepted expected value the output
145

145

00:07:30,510  -->  00:07:32,460
in other words and the string parameter
146

146

00:07:32,460  -->  00:07:34,890
the input remember that for each set
147

147

00:07:34,890  -->  00:07:37,380
of test data junit will create a new
148

148

00:07:37,380  -->  00:07:39,420
instance of the class and pass the
149

149

00:07:39,420  -->  00:07:41,580
expected and actual values to the
150

150

00:07:41,580  -->  00:07:42,510
constructor
151

151

00:07:42,510  -->  00:07:48,390
ok so we want...
152

152

00:07:48,390  -->  00:08:02,510
...
153

153

00:08:02,510  -->  00:08:07,430
...so we now add the
154

154

00:08:07,430  -->  00:08:10,580
method that contains our expected and
155

155

00:08:10,580  -->  00:08:13,130
actual values we have to annotate this
156

156

00:08:13,130  -->  00:08:14,930
method with the at parameterised
157

157

00:08:14,930  -->  00:08:17,600
. parameters annotation and also if you
158

158

00:08:17,600  -->  00:08:19,010
recall it must return the collection
159

159

00:08:19,010  -->  00:08:21,650
so its going to be public static...
160

160

00:08:21,650  -->  00:08:30,110
...
161

161

00:08:30,110  -->  00:08:33,230
....
162

162

00:08:33,230  -->  00:09:33,680
...
163

163

00:09:33,680  -->  00:09:36,680
....
164

164

00:09:36,680  -->  00:09:40,160
...so that's our collection now our
165

165

00:09:40,160  -->  00:09:43,070
test conditions and now we need to also
166

166

00:09:43,070  -->  00:09:45,470
add a setup method that's annotated with
167

167

00:09:45,470  -->  00:09:48,830
that before and also a test method to
168

168

00:09:48,830  -->  00:09:50,080
actually do the testing
169

169

00:09:50,080  -->  00:09:52,610
let's go ahead and do that...
170

170

00:09:52,610  -->  00:10:11,040
...
171

171

00:10:11,040  -->  00:10:15,360
and then as i mentioned on the bottom we
172

172

00:10:15,360  -->  00:10:17,160
want to test so it's going to be....
173

173

00:10:17,160  -->  00:10:50,270
...
174

174

00:10:50,270  -->  00:10:53,060
let's just run this to confirm that it
175

175

00:10:53,060  -->  00:11:02,330
does work and what I forgot to do was
176

176

00:11:02,330  -->  00:11:04,410
add the annotation for the test
177

177

00:11:04,410  -->  00:11:06,500
conditions line so let's go ahead and do
178

178

00:11:06,500  -->  00:11:06,890
that
179

179

00:11:06,890  -->  00:11:16,170
...
180

180

00:11:16,170  -->  00:11:17,570
so now if we go back here actually run
181

181

00:11:17,570  -->  00:11:24,540
this
182

182

00:11:24,540  -->  00:11:25,500
so you can see there now we've got
183

183

00:11:25,500  -->  00:11:28,500
these 40 1 2 & 3 so we actually have
184

184

00:11:28,500  -->  00:11:30,900
four tests and they all past separately
185

185

00:11:30,900  -->  00:11:32,700
and then we're good to go
186

186

00:11:32,700  -->  00:11:35,460
and you also saw that created a new
187

187

00:11:35,460  -->  00:11:38,340
run configuration for that method if we
188

188

00:11:38,340  -->  00:11:39,900
wanted to we can just right-click even
189

189

00:11:39,900  -->  00:11:41,550
though we've just got the one test and
190

190

00:11:41,550  -->  00:11:45,270
run the utilities test parameterised and
191

191

00:11:45,270  -->  00:11:47,610
that would create the run configuration
192

192

00:11:47,610  -->  00:11:50,100
setting the only future tests will also run and we
193

193

00:11:50,100  -->  00:11:51,390
would just have to click on the one in
194

194

00:11:51,390  -->  00:11:54,690
the gutter to run the individual one
195

195

00:11:54,690  -->  00:11:56,340
so that's it you've now completed the j
196

196

00:11:56,340  -->  00:11:58,260
unit challenges and that's the end of
197

197

00:11:58,260  -->  00:11:59,070
this section
198

198

00:11:59,070  -->  00:12:00,480
hopefully they've got a much more solid
199

199

00:12:00,480  -->  00:12:02,430
understanding of the basics of j unit
200

200

00:12:02,430  -->  00:12:04,710
you can start applying that to into your
201

201

00:12:04,710  -->  00:12:10,670
java projects
