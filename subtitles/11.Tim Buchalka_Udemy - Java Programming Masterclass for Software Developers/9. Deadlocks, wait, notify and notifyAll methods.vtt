WEBVTT
1
1

00:00:04.610  -->  00:00:10.670
so continuing on we now need to write
our reader class our reader or consumer
2

2

00:00:10.670  -->  00:00:11.590
class
3

3

00:00:11.590  -->  00:00:14.920
so let's go ahead and do that its going to be....
4

4

00:00:14.920  -->  00:00:26.870
....and we need
a private message object...
5

5

00:00:26.870  -->  00:00:39.920
....
6

6

00:00:39.920  -->  00:00:47.660
and then we need to create our run method....we are going to be doing
7

7

00:00:47.660  -->  00:00:52.160
something very similar to what we did in
the write object or writer object the
8

8

00:00:52.160  -->  00:00:56.270
run method up above but instead we're
going to be just reading the message and
9

9

00:00:56.270  -->  00:01:00.800
just printing it out and then we still
going to delay for a random period of
10

10

00:01:00.800  -->  00:01:01.520
time
11

11

00:01:01.520  -->  00:01:07.750
so do....
12

12

00:01:07.750  -->  00:01:17.330
....
13

13

00:01:17.330  -->  00:01:22.580
....and we're
gonna wait for the message to say that its
14

14

00:01:22.580  -->  00:01:32.150
finished to be received so.....and
15

15

00:01:32.150  -->  00:01:37.490
this finished here has to be identical
to the finish that with defined their so
16

16

00:01:37.490  -->  00:01:41.420
make sure you get the case
sensitivity identical to avoid any weird
17

17

00:01:41.420  -->  00:01:52.130
errors and then latest message...so that is our for loop
18

18

00:01:52.130  -->  00:01:56.290
and we're going to print out the latest
message
19

19

00:01:58.350  -->  00:02:06.720
we're going to pause for that period of
time that i mentioned....
20

20

00:02:07.610  -->  00:02:15.270
....so after
two seconds we're going to sleep for two
21

21

00:02:15.270  -->  00:02:21.560
parentheses to close it off and we need
to catch the exception which is going to
22

22

00:02:21.560  -->  00:02:26.130
be the same exception as per the writer
class which will be the interrupted
23

23

00:02:26.130  -->  00:02:31.560
exception and for now we won't do any
coding in there and we're not returning
24

24

00:02:31.560  -->  00:02:35.850
anything so that is the end of the
method so as you can see we're looping
25

25

00:02:35.850  -->  00:02:38.100
through the messages received
26

26

00:02:38.100  -->  00:02:43.700
we're looking for the last message which
is finished and when the processing each
27

27

00:02:43.700  -->  00:02:44.400
message
28

28

00:02:44.400  -->  00:02:48.750
printing it out to the console then
waiting randomly up to 2
29

29

00:02:48.750  -->  00:02:52.920
seconds depending on what the random
instance returns it will be up to two
30

30

00:02:52.920  -->  00:02:57.330
seconds and then exiting once we
printed out all the messages
31

31

00:02:57.330  -->  00:03:03.030
so now we need to add the code to create
and run these threads going to do this
32

32

00:03:03.030  -->  00:03:07.730
from our main method at the top and
incidentally you might find that
33

33

00:03:07.730  -->  00:03:12.720
when you type this in that IntelliJ
will add imports for java.io.reader
34

34

00:03:12.720  -->  00:03:18.950
and java.io.writer because of these
classes that were created so they have
35

35

00:03:18.950  -->  00:03:23.130
been added up here in the import section
make sure you remove those imports
36

36

00:03:23.130  -->  00:03:28.010
otherwise you'll get compiler errors ok
so i'm going to now create that code
37

37

00:03:28.010  -->  00:03:37.680
that's going to be message.....and then we're
38

38

00:03:37.680  -->  00:03:51.660
going to put.....to start it we're
39

39

00:03:51.660  -->  00:03:56.790
going to do the same for the reader
class as well
40

40

00:03:56.790  -->  00:03:59.790
....
41

41

00:04:00.460  -->  00:04:06.400
......so let's run this now
and just see what happens
42

42

00:04:08.080  -->  00:04:13.780
remember that we've got delays built
into this you can see that it does seem to
43

43

00:04:13.780  -->  00:04:15.190
be a problem
44

44

00:04:15.190  -->  00:04:19.510
and this does depend on the timing but
it is very likely when you run it you get
45

45

00:04:19.510  -->  00:04:23.620
a situation like this on my computer
when you won't see all the messages and
46

46

00:04:23.620  -->  00:04:28.390
the application appears to have hung so we
need to terminate it now because clearly
47

47

00:04:28.390  -->  00:04:31.810
two seconds has elapsed and we've only
got that very first message
48

48

00:04:32.320  -->  00:04:36.220
so I'm going to click on the stop button
to stop the process the process is now
49

49

00:04:36.220  -->  00:04:38.560
finished as you can see and I'll closed
down the run window
50

50

00:04:38.560  -->  00:04:42.880
so looking at this one well look we
synchronized obviously the read method
51

51

00:04:42.880  -->  00:04:46.300
and also the write method in our message
class
52

52

00:04:46.300  -->  00:04:49.900
so what's actually going on if you think
about it
53

53

00:04:49.900  -->  00:04:52.990
hopefully become pretty obvious as to
what the problem is
54

54

00:04:52.990  -->  00:04:57.160
and in fact you might have spotted the
error while I was writing the code and
55

55

00:04:57.160  -->  00:05:01.600
the problem is that - once one of the
threads starts looping the other one
56

56

00:05:01.600  -->  00:05:06.310
can't change the value of empty because
the thread is blocked
57

57

00:05:06.310  -->  00:05:12.430
remember that only one synchronized
method can run at a time so the thread
58

58

00:05:12.430  -->  00:05:17.710
that's looping is holding the lock for
the message object and the other one is
59

59

00:05:17.710  -->  00:05:18.520
blocked
60

60

00:05:18.520  -->  00:05:22.930
waiting for the other thread to release
the lock now this is what is know or what's
61

61

00:05:22.930  -->  00:05:27.340
called a deadlock and we're going to
look at this situation in more detail in
62

62

00:05:27.340  -->  00:05:32.440
a later part of this section of the
course so we absolutely did need to
63

63

00:05:32.440  -->  00:05:34.510
synchronize both methods
64

64

00:05:34.510  -->  00:05:38.200
so how do we actually get around this
problem well this is where the wait
65

65

00:05:38.200  -->  00:05:41.560
the notify and notify all methods
66

66

00:05:41.560  -->  00:05:46.660
come into play so when a thread calls
the wait method it will suspend
67

67

00:05:46.660  -->  00:05:52.540
execution and release whatever locks
it's holding until another thread issues
68

68

00:05:52.540  -->  00:05:55.480
a notification that something important
has happened
69

69

00:05:55.480  -->  00:05:59.980
so you can probably guess that the other
thread issues the notification by
70

70

00:05:59.980  -->  00:06:02.980
calling the notify or notify all methods
71

71

00:06:03.490  -->  00:06:08.290
i'm going to call the wait method
inside the message classes read and
72

72

00:06:08.290  -->  00:06:12.790
write methods now we'll also have each
thread called notify all
73

73

00:06:13.410  -->  00:06:18.370
after its change the value of the empty
variable so let's go ahead and do that
74

74

00:06:18.370  -->  00:06:23.520
so we'll go back to our loop here in
message and you can see while empty so
75

75

00:06:23.520  -->  00:06:28.020
so what we want to do here is in this
first loop this while empty for our read
76

76

00:06:28.020  -->  00:06:30.780
method in our message class
77

77

00:06:30.780  -->  00:06:37.990
we need to introduce a try then we're
going to call the wait method as i
78

78

00:06:37.990  -->  00:06:45.060
mentioned and we're needing a try block
because we're calling thread code and it
79

79

00:06:45.060  -->  00:06:51.000
catches or we need to catch the
interrupted exception so that's for the
80

80

00:06:51.000  -->  00:06:53.160
read and also for the write
81

81

00:06:53.160  -->  00:06:59.460
we need to do exactly the same thing
going to try then within their we're
82

82

00:06:59.460  -->  00:07:01.240
going to call wait
83

83

00:07:01.240  -->  00:07:06.780
we're going to catch the exception like
so
84

84

00:07:06.780  -->  00:07:11.370
but there is one other thing we need to
do and that is call the notify
85

85

00:07:11.370  -->  00:07:15.750
method well notify all in this case
after we've exited the while loop so down
86

86

00:07:15.750  -->  00:07:17.970
here for the read method
87

87

00:07:17.970  -->  00:07:25.470
....and
after we've set the field to a
88

88

00:07:25.470  -->  00:07:30.660
message in the write method we're going
to call notify all so that should be it
89

89

00:07:30.660  -->  00:07:35.680
now but before we test it let's just go through and discuss a few
90

90

00:07:35.680  -->  00:07:37.360
things about this code
91

91

00:07:37.360  -->  00:07:42.780
first of all we're still looping now you
might be wondering why do we have to
92

92

00:07:42.780  -->  00:07:43.620
loop
93

93

00:07:43.620  -->  00:07:47.160
why not use an if statement and if that
fails call wait
94

94

00:07:47.160  -->  00:07:52.470
well the answer is that we always want
to call weight within a for loop that's
95

95

00:07:52.470  -->  00:07:56.520
testing for whatever condition we're
waiting on because when a thread is
96

96

00:07:56.520  -->  00:07:58.300
notified to wake up
97

97

00:07:58.300  -->  00:08:02.190
there's no guarantee that it's being
woken up because the condition is
98

98

00:08:02.190  -->  00:08:07.140
waiting on has changed so it's possible
the operating system has woken it up
99

99

00:08:07.140  -->  00:08:08.310
for another reason
100

100

00:08:08.310  -->  00:08:13.360
or it could have woken up because wait
through and interrupted exception so we
101

101

00:08:13.360  -->  00:08:18.930
always want to call wait within a loop
so that when it returns because there's
102

102

00:08:18.930  -->  00:08:21.120
been a notification of some sort
103

103

00:08:21.120  -->  00:08:25.140
we'll go back to the beginning of the
loop we check whatever condition we're
104

104

00:08:25.140  -->  00:08:26.270
interested in
105

105

00:08:26.270  -->  00:08:29.930
and then we call wait again if the
condition hasn't changed
106

106

00:08:30.620  -->  00:08:34.970
so in other words never assume that a
thread has been woken up because the
107

107

00:08:34.970  -->  00:08:39.740
condition that it's waiting on has
changed now the next thing here is you
108

108

00:08:39.740  -->  00:08:42.500
probably noticed i called notify all
109

109

00:08:42.500  -->  00:08:47.750
so why are we calling notify all rather
than notify well because we can't notify
110

110

00:08:47.750  -->  00:08:52.010
a specific thread and that's because the
notify thread doesn't accept any
111

111

00:08:52.010  -->  00:08:52.970
parameters
112

112

00:08:52.970  -->  00:08:57.560
it's conventional to use notify all
unless we're dealing with a situation
113

113

00:08:57.560  -->  00:09:02.200
when there are you know a significant
number of threads that all perform a
114

114

00:09:02.200  -->  00:09:04.850
similar task waiting for a lock
115

115

00:09:04.850  -->  00:09:10.270
so in that case we don't want to wake up
every thread because when there's a lot
116

116

00:09:10.270  -->  00:09:15.410
of them that could result in a huge
performance here so we call notify so
117

117

00:09:15.410  -->  00:09:19.430
that only one thread is woken up since
all the threads are waiting to do a
118

118

00:09:19.430  -->  00:09:20.630
similar task
119

119

00:09:20.630  -->  00:09:23.990
whichever thread is woken up should be
able to proceed
120

120

00:09:23.990  -->  00:09:29.200
so now that we've implemented or made
changes to our code to use wait and notify
121

121

00:09:29.200  -->  00:09:29.930
all
122

122

00:09:29.930  -->  00:09:37.040
let's run our application and see what
happens and this was the error that i was
123

123

00:09:37.040  -->  00:09:38.200
talking about earlier
124

124

00:09:38.200  -->  00:09:43.730
sometimes IntelliJ will add
this extra import for some reason so you
125

125

00:09:43.730  -->  00:09:47.300
just need to delete that to avoid the
compilation errors and it's got to do
126

126

00:09:47.300  -->  00:09:51.380
with the fact that were using the class
names writer and reader
127

127

00:09:51.380  -->  00:09:54.380
let's just run that again
128

128

00:09:59.160  -->  00:10:02.910
and their you go you can see that we've got
four messages printed and the codes
129

129

00:10:02.910  -->  00:10:03.840
working fine
130

130

00:10:03.840  -->  00:10:07.950
you also saw that there was a round
about a two-second delay or up to a two-second
131

131

00:10:07.950  -->  00:10:09.990
delay between each message
132

132

00:10:09.990  -->  00:10:15.420
so each thread now waits and releases
its lock on the message object when the
133

133

00:10:15.420  -->  00:10:21.900
loop condition passes and that gives the
other thread the opportunity to run so
134

134

00:10:21.900  -->  00:10:26.490
it can now process a message and change
the value of the empty variable when it
135

135

00:10:26.490  -->  00:10:30.600
calls the notify all method the thread
that's waiting can now proceed
136

136

00:10:31.470  -->  00:10:35.100
so the two threads go back and forth
like this until all the messages have
137

137

00:10:35.100  -->  00:10:36.150
been printed
138

138

00:10:36.150  -->  00:10:40.530
so before we move on to the next video
let's briefly touch on two more points
139

139

00:10:41.100  -->  00:10:44.220
firstly when synchronizing code
140

140

00:10:44.220  -->  00:10:49.590
always keep in mind that threads can be
suspended while executing a single line
141

141

00:10:49.590  -->  00:10:50.550
of code
142

142

00:10:50.550  -->  00:10:55.530
so a single line of code may will call a
method that contains hundreds of lines
143

143

00:10:55.530  -->  00:11:01.080
of code or a single line of code can
contain many operations and a thread can
144

144

00:11:01.080  -->  00:11:04.800
be suspended before or after each
operation
145

145

00:11:04.800  -->  00:11:09.150
so in the count down example you saw that
the parameter we passed to the println
146

146

00:11:09.150  -->  00:11:15.270
method contains two method calls and
three concatenation operations as we saw
147

147

00:11:15.270  -->  00:11:21.000
a thread can be suspended before or
after performing any of these operations
148

148

00:11:21.000  -->  00:11:25.290
and also while executing the println
method itself so having said that
149

149

00:11:25.290  -->  00:11:31.260
there's a few atomic operations in Java
that happen all at once a thread can't
150

150

00:11:31.260  -->  00:11:33.300
be suspended in the middle of doing them
151

151

00:11:33.300  -->  00:11:39.060
here are the atomic operations in Java
reading writing reference variables for
152

152

00:11:39.060  -->  00:11:40.260
example the statement
153

153

00:11:40.260  -->  00:11:45.480
my object 1 equals my object 2 would be
atomic so with thread can't be
154

154

00:11:45.480  -->  00:11:50.550
suspended in the middle of executing
that statement also a thread can't be
155

155

00:11:50.550  -->  00:11:51.690
suspended
156

156

00:11:51.690  -->  00:11:56.220
if reading and writing primitive
variables except those of type long and
157

157

00:11:56.220  -->  00:11:57.150
double
158

158

00:11:57.150  -->  00:12:02.640
so the jvm may require 2 operations to
read the writew long and doubles and a
159

159

00:12:02.640  -->  00:12:07.530
thread can be suspended between each
operation for example a thread can't be
160

160

00:12:07.530  -->  00:12:11.180
suspended in the middle of executing my
int equals 10
161

161

00:12:11.180  -->  00:12:16.220
but it can be suspended in the middle of
executing my double equals 1.
162

162

00:12:16.220  -->  00:12:21.410
2 3 4 from argument sake and the
third scenario was reading writing all
163

163

00:12:21.410  -->  00:12:26.080
variables declared volatile but we will be
looking at volatile variables in a
164

164

00:12:26.080  -->  00:12:27.920
future video in this section
165

165

00:12:27.920  -->  00:12:31.370
now the second point I want to make is
that in relation to the collection
166

166

00:12:31.370  -->  00:12:35.120
classes some collections aren't thread safe
167

167

00:12:35.120  -->  00:12:39.410
in other words they're not synchronized
for example array list is not thread-safe
168

168

00:12:39.410  -->  00:12:45.020
when we read the documentation which I will put up on the screen in a second we see
169

169

00:12:45.020  -->  00:12:50.080
that states that the implementations not
synchronized what that means is if we're
170

170

00:12:50.080  -->  00:12:55.010
using an array list in our application
and multiple threads can access that at
171

171

00:12:55.010  -->  00:12:59.480
the same time then we have to be
responsible for synchronizing the code
172

172

00:12:59.480  -->  00:13:06.620
that uses the array list alternatively
after creating the array list we can call
173

173

00:13:06.620  -->  00:13:08.990
collections.synchronize list
174

174

00:13:08.990  -->  00:13:13.310
the method and pass it to the array list
so we still have to synchronize
175

175

00:13:13.310  -->  00:13:17.000
iterating over the list though so for more
information you can check the
176

176

00:13:17.000  -->  00:13:25.940
documentation at this link which will
also be in the resources section you can
177

177

00:13:25.940  -->  00:13:29.390
find out more about that very
interesting read here talking about
178

178

00:13:29.390  -->  00:13:34.220
synchronization in the collections
classes on Oracle's
179

179

00:13:34.220  -->  00:13:39.020
documentation and out of interest on the
other hand the vector class is
180

180

00:13:39.020  -->  00:13:43.130
synchronized so if we use the vector
class in our application we wouldn't
181

181

00:13:43.130  -->  00:13:46.910
have to worry about multiple threads
accessing the vector object at the same
182

182

00:13:46.910  -->  00:13:47.540
time
183

183

00:13:47.540  -->  00:13:52.250
so in other words the java developers
have synchronized the vector code so
184

184

00:13:52.250  -->  00:13:55.250
that its thread-safe so that's all for
synchronization
185

185

00:13:55.760  -->  00:13:59.270
I hope you got a lot out of that in the
next lecture we're going to take a look
186

186

00:13:59.270  -->  00:14:01.520
at classes in the java.util..
187

187

00:14:01.520  -->  00:14:03.980
concurrent package see you in the
next video
