WEBVTT
1
1

00:00:04.009  -->  00:00:06.210
alright says now time for another
2

2

00:00:06.210  -->  00:00:08.130
challenge this is the minimum element
3

3

00:00:08.130  -->  00:00:10.620
challenge so to start with write a
4

4

00:00:10.620  -->  00:00:12.809
method called read integers that's got a
5

5

00:00:12.809  -->  00:00:15.240
parameter called count that represents
6

6

00:00:15.240  -->  00:00:17.279
how many integers the user needs to
7

7

00:00:17.279  -->  00:00:19.650
enter so the method needs to read from
8

8

00:00:19.650  -->  00:00:21.960
the console until all the numbers have
9

9

00:00:21.960  -->  00:00:23.939
been entered and then return an array
10

10

00:00:23.939  -->  00:00:25.769
containing those numbers that were
11

11

00:00:25.769  -->  00:00:29.189
entered secondly write a method find min
12

12

00:00:29.189  -->  00:00:32.550
that uses the array as a parameter so
13

13

00:00:32.550  -->  00:00:34.230
the method needs to return the minimum
14

14

00:00:34.230  -->  00:00:36.899
value in that array so in the main
15

15

00:00:36.899  -->  00:00:38.399
method then read the count from the
16

16

00:00:38.399  -->  00:00:40.260
console and call the method read
17

17

00:00:40.260  -->  00:00:42.809
integers with the count as parameter the
18

18

00:00:42.809  -->  00:00:45.510
account variable as the parameter and
19

19

00:00:45.510  -->  00:00:48.329
then call the find min method passing
20

20

00:00:48.329  -->  00:00:51.600
the array returned from the call to the
21

21

00:00:51.600  -->  00:00:53.820
read integers method and finally print
22

22

00:00:53.820  -->  00:00:56.160
the minimum element in the array which
23

23

00:00:56.160  -->  00:00:58.109
should be returned from the find min
24

24

00:00:58.109  -->  00:01:01.230
method and a few tips here assume that
25

25

00:01:01.230  -->  00:01:03.449
the user will only enter numbers so in
26

26

00:01:03.449  -->  00:01:04.530
other words you don't need to do any
27

27

00:01:04.530  -->  00:01:06.720
validation for your console important
28

28

00:01:06.720  -->  00:01:08.939
for simplicity I recommend you create a
29

29

00:01:08.939  -->  00:01:11.729
scanner as a static private field to
30

30

00:01:11.729  -->  00:01:13.650
help with that are important and thirdly
31

31

00:01:13.650  -->  00:01:16.259
use the project name min element
32

32

00:01:16.259  -->  00:01:18.000
challenge when creating a new console
33

33

00:01:18.000  -->  00:01:21.060
project in IntelliJ so that's it pause
34

34

00:01:21.060  -->  00:01:22.950
the video now and try out your challenge
35

35

00:01:22.950  -->  00:01:24.450
and when you're ready to come back and
36

36

00:01:24.450  -->  00:01:26.549
see my solution you can restart the
37

37

00:01:26.549  -->  00:01:28.140
video at that point so pause the video
38

38

00:01:28.140  -->  00:01:32.180
now and I'll see you when you get back
39

39

00:01:32.180  -->  00:01:34.680
all right so welcome back I hope you I
40

40

00:01:34.680  -->  00:01:36.270
managed to do well with that challenge
41

41

00:01:36.270  -->  00:01:39.330
let's go through my solution to it so
42

42

00:01:39.330  -->  00:01:40.680
I'm going to start by creating this
43

43

00:01:40.680  -->  00:01:42.480
static field that I mentioned that T
44

44

00:01:42.480  -->  00:01:46.880
should do by typing private static
45

45

00:01:46.880  -->  00:01:52.370
scanner scanner and it's equal to new
46

46

00:01:52.370  -->  00:01:57.750
scanner it's going to be system dot end
47

47

00:01:57.750  -->  00:01:59.940
that's what I've usually defined it and
48

48

00:01:59.940  -->  00:02:01.680
in terms of the input there I'm going to
49

49

00:02:01.680  -->  00:02:03.270
make sure that I've selected Java dot
50

50

00:02:03.270  -->  00:02:05.490
util and again that's what we've done
51

51

00:02:05.490  -->  00:02:11.790
each time now by setting the scan it was
52

52

00:02:11.790  -->  00:02:13.920
a static field as I've done there what
53

53

00:02:13.920  -->  00:02:15.180
we needed to do that so that the other
54

54

00:02:15.180  -->  00:02:17.010
static methods like the existing main
55

55

00:02:17.010  -->  00:02:18.840
method and the read integers method that
56

56

00:02:18.840  -->  00:02:20.370
we're going to create they'll then be
57

57

00:02:20.370  -->  00:02:22.440
able to access this field directly in
58

58

00:02:22.440  -->  00:02:23.940
other words the static methods can use
59

59

00:02:23.940  -->  00:02:25.500
scanner without creating separate
60

60

00:02:25.500  -->  00:02:28.350
instances of that class now since we've
61

61

00:02:28.350  -->  00:02:30.450
only got this one main class the methods
62

62

00:02:30.450  -->  00:02:32.310
in main can also be static and should be
63

63

00:02:32.310  -->  00:02:34.410
and you can see by default the main
64

64

00:02:34.410  -->  00:02:36.660
method has got that static keyword there
65

65

00:02:36.660  -->  00:02:38.880
on line 9 now additionally offset
66

66

00:02:38.880  -->  00:02:41.370
scanner to private so that other classes
67

67

00:02:41.370  -->  00:02:43.440
can't access it even though this doesn't
68

68

00:02:43.440  -->  00:02:45.780
necessarily matter for this program
69

69

00:02:45.780  -->  00:02:47.160
since we don't have any other classes
70

70

00:02:47.160  -->  00:02:48.630
it's a good idea to keep all fields
71

71

00:02:48.630  -->  00:02:51.840
private to encapsulate the data all
72

72

00:02:51.840  -->  00:02:53.459
right so let's now break this down into
73

73

00:02:53.459  -->  00:02:55.890
smaller pieces first we need to write
74

74

00:02:55.890  -->  00:02:58.739
the method read integers that's got the
75

75

00:02:58.739  -->  00:03:01.190
integer count or the integer with the
76

76

00:03:01.190  -->  00:03:03.600
parameter name count so let's create
77

77

00:03:03.600  -->  00:03:05.730
that I'm going to put that just below
78

78

00:03:05.730  -->  00:03:08.070
the main method so then use private here
79

79

00:03:08.070  -->  00:03:12.000
as well so private static and we're
80

80

00:03:12.000  -->  00:03:13.860
going to return an int array of int and
81

81

00:03:13.860  -->  00:03:16.080
left or right square brackets read
82

82

00:03:16.080  -->  00:03:17.989
integers is the name of the method
83

83

00:03:17.989  -->  00:03:22.610
parentheses int count the left to right
84

84

00:03:22.610  -->  00:03:26.070
curly braces to create the method now
85

85

00:03:26.070  -->  00:03:27.720
this method needs to return an int array
86

86

00:03:27.720  -->  00:03:29.910
and it contains the parameter count as
87

87

00:03:29.910  -->  00:03:32.519
we've defined on line 13 now the
88

88

00:03:32.519  -->  00:03:34.590
parameter represents how many numbers
89

89

00:03:34.590  -->  00:03:37.680
we're going to read from the console so
90

90

00:03:37.680  -->  00:03:39.570
let's now implement the method firstly
91

91

00:03:39.570  -->  00:03:41.910
we have to create and enter a and then
92

92

00:03:41.910  -->  00:03:43.799
populate the array with the users input
93

93

00:03:43.799  -->  00:03:46.000
which will be retrieved obviously
94

94

00:03:46.000  -->  00:03:48.070
the console so to create this array
95

95

00:03:48.070  -->  00:03:50.200
first I'm going to type int left or
96

96

00:03:50.200  -->  00:03:53.710
right square brackets array equals new
97

97

00:03:53.710  -->  00:03:59.200
int in left square brackets count now as
98

98

00:03:59.200  -->  00:04:00.940
we've loaded previously this code
99

99

00:04:00.940  -->  00:04:03.459
creates an array and initializes all the
100

100

00:04:03.459  -->  00:04:05.980
elements to 0 so that every slot or
101

101

00:04:05.980  -->  00:04:07.840
element if you will in the array
102

102

00:04:07.840  -->  00:04:10.240
contains the value of 0 so moving
103

103

00:04:10.240  -->  00:04:11.500
forward we're going to assume that the
104

104

00:04:11.500  -->  00:04:13.959
user will always enter numbers only so
105

105

00:04:13.959  -->  00:04:15.220
in other words we don't need to validate
106

106

00:04:15.220  -->  00:04:17.739
the input at all so with that in mind
107

107

00:04:17.739  -->  00:04:19.840
we're going to use the next int method
108

108

00:04:19.840  -->  00:04:22.270
so we need a for loop know to read the
109

109

00:04:22.270  -->  00:04:24.460
numbers so for the for loop we're going
110

110

00:04:24.460  -->  00:04:28.660
to type 4 in parentheses int I equals 0
111

111

00:04:28.660  -->  00:04:34.630
I less than a ray dot length semicolon I
112

112

00:04:34.630  -->  00:04:38.830
plus plus then I'm going to type a
113

113

00:04:38.830  -->  00:04:41.700
system output line we're going to put
114

114

00:04:41.700  -->  00:04:46.600
enter a number the colon on the end of
115

115

00:04:46.600  -->  00:04:47.980
that just so the app the screen is
116

116

00:04:47.980  -->  00:04:49.690
actually showing what the user should do
117

117

00:04:49.690  -->  00:04:52.690
and we're going to type into number
118

118

00:04:52.690  -->  00:04:57.490
equals scanner dot next int you've seen
119

119

00:04:57.490  -->  00:04:58.780
that before we just retrieving an
120

120

00:04:58.780  -->  00:05:00.760
integer from the console and storing in
121

121

00:05:00.760  -->  00:05:03.280
this case into a variable called
122

122

00:05:03.280  -->  00:05:05.290
number which is of type int of course
123

123

00:05:05.290  -->  00:05:07.780
then we need to call at the next line
124

124

00:05:07.780  -->  00:05:10.419
method from scanner so scanner dot next
125

125

00:05:10.419  -->  00:05:13.840
line and we're doing it to make sure we
126

126

00:05:13.840  -->  00:05:15.430
handle the enter key being pressed once
127

127

00:05:15.430  -->  00:05:16.990
we've entered the number and they can
128

128

00:05:16.990  -->  00:05:18.580
then continue to enter more numbers so
129

129

00:05:18.580  -->  00:05:19.630
we're avoiding the problem that will
130

130

00:05:19.630  -->  00:05:22.390
happen if we don't do that we don't need
131

131

00:05:22.390  -->  00:05:24.550
to record the number that's been entered
132

132

00:05:24.550  -->  00:05:26.560
in other words populated into the array
133

133

00:05:26.560  -->  00:05:29.890
we do that by typing array left or right
134

134

00:05:29.890  -->  00:05:32.080
square brackets I'm gonna put I in that
135

135

00:05:32.080  -->  00:05:34.540
left or right square brackets equals and
136

136

00:05:34.540  -->  00:05:36.850
the value entered on the console which
137

137

00:05:36.850  -->  00:05:39.760
was number and then finally what we want
138

138

00:05:39.760  -->  00:05:42.490
to do is just return the entire array so
139

139

00:05:42.490  -->  00:05:43.750
we do that by just typing at the turn
140

140

00:05:43.750  -->  00:05:46.720
array right so that completes the method
141

141

00:05:46.720  -->  00:05:49.240
read integers our next step in it is to
142

142

00:05:49.240  -->  00:05:51.760
call this method from the main method
143

143

00:05:51.760  -->  00:05:53.650
but before that we need to read the
144

144

00:05:53.650  -->  00:05:56.169
count from the console using the next
145

145

00:05:56.169  -->  00:05:57.520
int method in other words we need to
146

146

00:05:57.520  -->  00:05:58.760
determine
147

147

00:05:58.760  -->  00:06:01.490
how many elements are to be entered so
148

148

00:06:01.490  -->  00:06:02.750
to do that I'm going to come back to our
149

149

00:06:02.750  -->  00:06:04.340
main method I'm going to start with a
150

150

00:06:04.340  -->  00:06:10.760
message in top inter count then I'm
151

151

00:06:10.760  -->  00:06:13.540
going to top int count is equal to
152

152

00:06:13.540  -->  00:06:17.420
scanner dot next int so retrieving how
153

153

00:06:17.420  -->  00:06:19.490
many elements and then we're going to do
154

154

00:06:19.490  -->  00:06:21.890
scanner dot next line so again process
155

155

00:06:21.890  -->  00:06:25.220
the enter key and now we need to make a
156

156

00:06:25.220  -->  00:06:28.640
call to the read integers method and we
157

157

00:06:28.640  -->  00:06:30.290
need to save the value that was returned
158

158

00:06:30.290  -->  00:06:32.870
the array in this case tool variable so
159

159

00:06:32.870  -->  00:06:34.100
I'm going to type int left in white
160

160

00:06:34.100  -->  00:06:36.110
square brackets I'm gonna call this one
161

161

00:06:36.110  -->  00:06:40.580
returned array equals read integers and
162

162

00:06:40.580  -->  00:06:42.050
we're gonna pass count which was the
163

163

00:06:42.050  -->  00:06:43.970
number entered from the keyboard or on
164

164

00:06:43.970  -->  00:06:46.520
the keyboard the basic we're signing the
165

165

00:06:46.520  -->  00:06:49.220
return value which is the array from the
166

166

00:06:49.220  -->  00:06:50.870
read integers method and saving it into
167

167

00:06:50.870  -->  00:06:53.600
a new local variable called return array
168

168

00:06:53.600  -->  00:06:56.660
which is itself an integer array so next
169

169

00:06:56.660  -->  00:06:59.210
step now is been only to write the find
170

170

00:06:59.210  -->  00:07:01.940
min method which will find the minimum
171

171

00:07:01.940  -->  00:07:04.070
number in the array so let's go and
172

172

00:07:04.070  -->  00:07:07.040
below the last curly brace closing off
173

173

00:07:07.040  -->  00:07:09.620
the read integers method and create a
174

174

00:07:09.620  -->  00:07:11.270
new method in there or blow that I
175

175

00:07:11.270  -->  00:07:13.550
should say and we're going to start by
176

176

00:07:13.550  -->  00:07:19.310
typing private static int find min in
177

177

00:07:19.310  -->  00:07:21.170
parentheses we're going to have an array
178

178

00:07:21.170  -->  00:07:22.730
some arguments as in to left and right
179

179

00:07:22.730  -->  00:07:27.350
square brackets all right and I'm going
180

180

00:07:27.350  -->  00:07:29.660
to start by setting a local variable
181

181

00:07:29.660  -->  00:07:31.700
called min to the highest number that an
182

182

00:07:31.700  -->  00:07:33.560
integer can hold so I'm going to type
183

183

00:07:33.560  -->  00:07:38.600
int min is equal to integer dot I'm
184

184

00:07:38.600  -->  00:07:42.470
going to select Max and score value now
185

185

00:07:42.470  -->  00:07:45.230
we use that previously in the minimum
186

186

00:07:45.230  -->  00:07:46.910
and maximum challenge earlier in the
187

187

00:07:46.910  -->  00:07:49.040
course I refer back to that if you're
188

188

00:07:49.040  -->  00:07:51.290
unsure what the max Allen score value is
189

189

00:07:51.290  -->  00:07:53.300
all about but a question you might be
190

190

00:07:53.300  -->  00:07:54.710
asking at this point is why am I
191

191

00:07:54.710  -->  00:07:57.350
actually setting the min variable here
192

192

00:07:57.350  -->  00:07:59.240
to the maximum value that and an integer
193

193

00:07:59.240  -->  00:08:01.430
can actually hold well every number the
194

194

00:08:01.430  -->  00:08:03.800
user enters must be equal or less than
195

195

00:08:03.800  -->  00:08:05.840
the maximum value an integer can contain
196

196

00:08:05.840  -->  00:08:08.450
so if we were to set the this min
197

197

00:08:08.450  -->  00:08:11.150
variable to zero and the user would
198

198

00:08:11.150  -->  00:08:12.529
enter for example all
199

199

00:08:12.529  -->  00:08:14.479
positive numbers then the method will
200

200

00:08:14.479  -->  00:08:17.299
return zero as the minimum since all
201

201

00:08:17.299  -->  00:08:18.829
positive numbers were greater than zero
202

202

00:08:18.829  -->  00:08:21.229
even if the user never actually entered
203

203

00:08:21.229  -->  00:08:23.779
zero so by starting with the maximum

204

204

00:08:23.779  -->  00:08:25.759
integer value what we're doing is
205

205

00:08:25.759  -->  00:08:28.639
ensuring that the minimum value returned
206

206

00:08:28.639  -->  00:08:30.949
was actually input received from the
207

207

00:08:30.949  -->  00:08:31.429
user
208

208

00:08:31.429  -->  00:08:33.499
now another approach would be to set min
209

209

00:08:33.499  -->  00:08:35.629
to the first element of the array and
210

210

00:08:35.629  -->  00:08:37.129
then compare it with each of the others
211

211

00:08:37.129  -->  00:08:39.680
but you can see an example of that if
212

212

00:08:39.680  -->  00:08:40.969
you go back and check out again the
213

213

00:08:40.969  -->  00:08:43.189
minimum and maximum challenge earlier in
214

214

00:08:43.189  -->  00:08:44.569
the course because I discussed that in
215

215

00:08:44.569  -->  00:08:46.610
detail and in fact shows some of that as
216

216

00:08:46.610  -->  00:08:48.920
a potential solution the point here is
217

217

00:08:48.920  -->  00:08:51.290
that there's many different ways to code
218

218

00:08:51.290  -->  00:08:53.269
a particular challenge solution but in
219

219

00:08:53.269  -->  00:08:54.800
any event we've gone here with the max
220

220

00:08:54.800  -->  00:08:56.660
underscore value version for an integer
221

221

00:08:56.660  -->  00:08:58.639
all right so the next thing we now need
222

222

00:08:58.639  -->  00:09:01.040
to do is we need to cycle through the
223

223

00:09:01.040  -->  00:09:03.319
array and find the smallest number the
224

224

00:09:03.319  -->  00:09:05.389
minimum value so we're going to create
225

225

00:09:05.389  -->  00:09:07.790
another for loop that does the same as
226

226

00:09:07.790  -->  00:09:09.170
what we did with the for loop in the
227

227

00:09:09.170  -->  00:09:11.720
reading digis method so for int I equals
228

228

00:09:11.720  -->  00:09:16.279
0 I less than array darlinks then I plus
229

229

00:09:16.279  -->  00:09:17.990
plus obviously separating both with
230

230

00:09:17.990  -->  00:09:21.709
semicolons and open the code block with
231

231

00:09:21.709  -->  00:09:24.230
a left-to-right curly braces so to start
232

232

00:09:24.230  -->  00:09:26.059
with we need to retrieve the value of
233

233

00:09:26.059  -->  00:09:29.120
the element at position I and we do that
234

234

00:09:29.120  -->  00:09:33.889
by typing int value equals array and
235

235

00:09:33.889  -->  00:09:36.439
left or right square brackets I so we've
236

236

00:09:36.439  -->  00:09:38.000
got the element from the array to
237

237

00:09:38.000  -->  00:09:40.269
compare and now with each loop iteration
238

238

00:09:40.269  -->  00:09:42.439
we want to compare the element we've
239

239

00:09:42.439  -->  00:09:44.540
just retrieved with the current value of
240

240

00:09:44.540  -->  00:09:47.089
min so the test if value is less than
241

241

00:09:47.089  -->  00:09:49.970
men we can use an if statement if
242

242

00:09:49.970  -->  00:09:55.220
parentheses value is less than min we'll
243

243

00:09:55.220  -->  00:09:57.800
open another code block then I just type
244

244

00:09:57.800  -->  00:10:03.050
min equals value
245

245

00:10:03.050  -->  00:10:06.080
so if value is less than min meaning our
246

246

00:10:06.080  -->  00:10:08.240
condition is true then we've found a
247

247

00:10:08.240  -->  00:10:10.580
number lower than the current minimum so
248

248

00:10:10.580  -->  00:10:12.950
we then assign its value to the min
249

249

00:10:12.950  -->  00:10:15.500
variable and finally after the for loop
250

250

00:10:15.500  -->  00:10:17.810
ends we can add a return statement
251

251

00:10:17.810  -->  00:10:19.850
return min which will then be the
252

252

00:10:19.850  -->  00:10:23.920
smallest or minimum number in the array
253

253

00:10:23.920  -->  00:10:28.760
okay so that's our find min method so we
254

254

00:10:28.760  -->  00:10:30.050
don't need to place a call to that
255

255

00:10:30.050  -->  00:10:32.030
inside our main method so let's go back
256

256

00:10:32.030  -->  00:10:33.950
up to the main method and we're going to
257

257

00:10:33.950  -->  00:10:35.900
put that on the line after our call to
258

258

00:10:35.900  -->  00:10:37.550
the read integers method we're going to
259

259

00:10:37.550  -->  00:10:41.720
save the valley return int returned min
260

260

00:10:41.720  -->  00:10:45.140
is equal to find min and we're going to
261

261

00:10:45.140  -->  00:10:47.600
pass us an argument returned array to
262

262

00:10:47.600  -->  00:10:49.430
that find and min method so we're
263

263

00:10:49.430  -->  00:10:51.410
passing the array that the users entered
264

264

00:10:51.410  -->  00:10:53.930
from the read integers method to the
265

265

00:10:53.930  -->  00:10:56.720
find min method some of the minimum
266

266

00:10:56.720  -->  00:10:59.420
value can be calculated and then finally
267

267

00:10:59.420  -->  00:11:01.910
let's print out the minimum values and
268

268

00:11:01.910  -->  00:11:05.720
min equals double quotes plus returned
269

269

00:11:05.720  -->  00:11:09.110
min so that should complete the
270

270

00:11:09.110  -->  00:11:11.090
challenge but let's actually run the
271

271

00:11:11.090  -->  00:11:15.830
application to confirm that it works all
272

272

00:11:15.830  -->  00:11:17.390
right so first this asking is to enter
273

273

00:11:17.390  -->  00:11:19.340
count so I'm going to enter the number 8
274

274

00:11:19.340  -->  00:11:22.040
8 elements there were nearly 10 nearly
275

275

00:11:22.040  -->  00:11:23.300
to enter a number so I'm going to enter
276

276

00:11:23.300  -->  00:11:35.600
some numbers 11 55 7 4 3 99 22 9 we can
277

277

00:11:35.600  -->  00:11:36.890
see down the bottom there it's got min
278

278

00:11:36.890  -->  00:11:39.620
equals 3 and since the number 3 is the
279

279

00:11:39.620  -->  00:11:41.450
lowest of all the numbers we entered we
280

280

00:11:41.450  -->  00:11:42.920
know that our application is working
281

281

00:11:42.920  -->  00:11:44.930
correctly all right so that was my
282

282

00:11:44.930  -->  00:11:46.700
solution to the challenge I hope you
283

283

00:11:46.700  -->  00:11:48.110
enjoyed it and managed to learn a few
284

284

00:11:48.110  -->  00:11:50.540
new things let's move on now to the next
285

285

00:11:50.540  -->  00:11:52.870
video
