WEBVTT
1
1

00:00:04.650  -->  00:00:07.790
ok so moving on now let's actually
2

2

00:00:07.790  -->  00:00:09.810
run this db browser program we
3

3

00:00:09.810  -->  00:00:11.310
started to do that at the end of the
4

4

00:00:11.310  -->  00:00:13.530
last video so I'm just going to start it
5

5

00:00:13.530  -->  00:00:17.120
started up on your operating system this
6

6

00:00:17.120  -->  00:00:19.730
is what it looks like now it won't display
7

7

00:00:19.730  -->  00:00:22.050
anything obviously until we connect to
8

8

00:00:22.050  -->  00:00:23.490
a database
9

9

00:00:23.490  -->  00:00:25.650
one thing to note about the DB browser
10

10

00:00:25.650  -->  00:00:27.860
is that if you use it to make changes to
11

11

00:00:27.860  -->  00:00:29.910
the database will actually locked the
12

12

00:00:29.910  -->  00:00:31.910
database file and you'll no longer be
13

13

00:00:31.910  -->  00:00:34.340
able to access the database from a java
14

14

00:00:34.340  -->  00:00:37.020
application so if that happens you can
15

15

00:00:37.020  -->  00:00:38.820
actually come up here and go to file
16

16

00:00:38.820  -->  00:00:42.150
close database and that will be enabled
17

17

00:00:42.150  -->  00:00:43.980
if you've got a database open and that
18

18

00:00:43.980  -->  00:00:45.600
will release the lock so you'll be able
19

19

00:00:45.600  -->  00:00:47.310
to use it again so keep that in mind
20

20

00:00:47.310  -->  00:00:48.690
that if you're getting some weird errors
21

21

00:00:48.690  -->  00:00:50.790
in your java code it could be because
22

22

00:00:50.790  -->  00:00:52.980
you got the database opened in DB
23

23

00:00:52.980  -->  00:00:54.450
browser and you need to close it so
24

24

00:00:54.450  -->  00:00:57.300
you're releasing the lock
25

25

00:00:57.300  -->  00:00:59.700
it's time to write some java code we're
26

26

00:00:59.700  -->  00:01:01.680
going to start by creating the same test
27

27

00:01:01.680  -->  00:01:03.840
database we created from the command
28

28

00:01:03.840  -->  00:01:05.550
line to see how to connect to a
29

29

00:01:05.550  -->  00:01:09.720
database using jdbc so let's go ahead now
30

30

00:01:09.720  -->  00:01:13.590
and open IntelliJ and create a new
31

31

00:01:13.590  -->  00:01:23.460
project will call this one test db
32

32

00:01:23.460  -->  00:01:30.420
....in my case i'm going to save
33

33

00:01:30.420  -->  00:01:32.310
it into the folder where I got my
34

34

00:01:32.310  -->  00:01:38.790
other java programs click on finish and
35

35

00:01:38.790  -->  00:01:47.070
wait for that to start
36

36

00:01:47.070  -->  00:01:50.900
alright so one of the first things that
37

37

00:01:50.900  -->  00:01:52.560
we need to do is we need to add the
38

38

00:01:52.560  -->  00:01:56.000
sqlite jdbc driver to the project
39

39

00:01:56.000  -->  00:01:58.830
so let's do that by going to file and
40

40

00:01:58.830  -->  00:02:02.910
project structure we need to select
41

41

00:02:02.910  -->  00:02:04.280
libraries over here from the left-hand
42

42

00:02:04.280  -->  00:02:06.960
side we need to press the green button
43

43

00:02:06.960  -->  00:02:10.890
which green on Windows but may or may
44

44

00:02:10.890  -->  00:02:13.320
not be on the mac which it isn't here or
45

45

00:02:13.320  -->  00:02:14.880
on linux but in any case we want to click on
46

46

00:02:14.880  -->  00:02:17.190
this plus button here and select java
47

47

00:02:17.190  -->  00:02:21.090
from the pop-up then we need to
48

48

00:02:21.090  -->  00:02:23.640
navigate to the sqlite jdbc jar file
49

49

00:02:23.640  -->  00:02:26.880
that we downloaded and add it my cases in
50

50

00:02:26.880  -->  00:02:29.400
the downloads folder we have the sqlite
51

51

00:02:29.400  -->  00:02:32.340
jdbc .jar so i'm going to open
52

52

00:02:32.340  -->  00:02:35.940
that confirms that is going to be added
53

53

00:02:35.940  -->  00:02:37.320
to the selected modules which is this
54

54

00:02:37.320  -->  00:02:40.590
currently open project click on ok it's
55

55

00:02:40.590  -->  00:02:42.180
now showing as you can see your screen
56

56

00:02:42.180  -->  00:02:44.790
as a library we can click on OK will be
57

57

00:02:44.790  -->  00:02:47.070
able to access that in our application
58

58

00:02:47.070  -->  00:02:49.440
so the first thing we want to do
59

59

00:02:49.440  -->  00:02:52.140
at this point is create the database now
60

60

00:02:52.140  -->  00:02:53.820
in a real-world application often
61

61

00:02:53.820  -->  00:02:55.650
a database will ship with the application
62

62

00:02:55.650  -->  00:02:57.810
or the database will exist on a server
63

63

00:02:57.810  -->  00:02:59.540
somewhere but sometimes you might want
64

64

00:02:59.540  -->  00:03:01.170
the application to create the database
65

65

00:03:01.170  -->  00:03:03.900
the first time it runs or perhaps the
66

66

00:03:03.900  -->  00:03:06.420
first time you use it does something now
67

67

00:03:06.420  -->  00:03:08.450
when using sqlite connecting to a
68

68

00:03:08.450  -->  00:03:10.890
database that doesn't exist will create
69

69

00:03:10.890  -->  00:03:13.380
the database so we don't have to create
70

70

00:03:13.380  -->  00:03:15.750
the database in a separate step we just
71

71

00:03:15.750  -->  00:03:16.920
have to try and connect to the database
72

72

00:03:16.920  -->  00:03:19.850
if it doesn't exist sqlite will
73

73

00:03:19.850  -->  00:03:23.730
create it for us now all jdbc drivers
74

74

00:03:23.730  -->  00:03:26.250
need a connection string that are used
75

75

00:03:26.250  -->  00:03:29.130
to connect to the database now the exact
76

76

00:03:29.130  -->  00:03:30.630
format of the connection string will
77

77

00:03:30.630  -->  00:03:33.600
vary from database to database for one
78

78

00:03:33.600  -->  00:03:35.430
thing they always have in common is that
79

79

00:03:35.430  -->  00:03:37.190
it starts with jdbc
80

80

00:03:37.190  -->  00:03:40.010
colon now for sqlite we followed
81

81

00:03:40.010  -->  00:03:43.430
jdbc colon with sqlite colon and
82

82

00:03:43.430  -->  00:03:45.620
then we specify the location of the
83

83

00:03:45.620  -->  00:03:48.560
database now other databases may well
84

84

00:03:48.560  -->  00:03:50.840
require just additional information for
85

85

00:03:50.840  -->  00:03:52.700
example they might require user and
86

86

00:03:52.700  -->  00:03:55.010
password and we can also specify
87

87

00:03:55.010  -->  00:03:57.650
databases attributes with the connection
88

88

00:03:57.650  -->  00:04:00.980
string for example we may specify
89

89

00:04:00.980  -->  00:04:03.110
that we want to sqlite database to
90

90

00:04:03.110  -->  00:04:05.510
be stored in memory so to find out
91

91

00:04:05.510  -->  00:04:07.340
what's required a connection string for
92

92

00:04:07.340  -->  00:04:09.560
a given database you can check out the
93

93

00:04:09.560  -->  00:04:13.040
jdbc drivers documentation as I have
94

94

00:04:13.040  -->  00:04:14.540
previously mentioned nothing is a
95

95

00:04:14.540  -->  00:04:16.730
hundred percent portable and this is one
96

96

00:04:16.730  -->  00:04:18.830
area that varies from database to
97

97

00:04:18.830  -->  00:04:22.070
database now we don't want to connect to
98

98

00:04:22.070  -->  00:04:24.010
the databases we created in the earlier
99

99

00:04:24.010  -->  00:04:26.060
videos so let's actually call this
100

100

00:04:26.060  -->  00:04:30.080
database test java dot DB so let's start
101

101

00:04:30.080  -->  00:04:32.000
the program i'm going to put in what you
102

102

00:04:32.000  -->  00:04:34.550
typically do on a Windows platform then
103

103

00:04:34.550  -->  00:04:36.140
change it to a mac going to start with a
104

104

00:04:36.140  -->  00:04:40.130
try...
105

105

00:04:40.130  -->  00:04:45.710
....
106

106

00:04:45.710  -->  00:05:15.620
...
107

107

00:05:15.620  -->  00:05:19.820
...and you had a
108

108

00:05:19.820  -->  00:05:22.550
...file in windows which was...
109

109

00:05:22.550  -->  00:05:25.070
....and you want that file to be
110

110

00:05:25.070  -->  00:05:27.980
access you do something like....
111

111

00:05:27.980  -->  00:05:32.690
...
112

112

00:05:32.690  -->  00:05:35.240
....
113

113

00:05:35.240  -->  00:05:41.840
...
114

114

00:05:41.840  -->  00:05:44.180
how you typically access it if your
115

115

00:05:44.180  -->  00:05:45.680
database is going to be on the d drive
116

116

00:05:45.680  -->  00:05:48.160
in the databases folder
117

117

00:05:48.160  -->  00:05:50.140
I'm just going to leave copy of that
118

118

00:05:50.140  -->  00:05:55.150
line for windows and mac equivalent what
119

119

00:05:55.150  -->  00:05:56.470
I'm going to do is put it in the path
120

120

00:05:56.470  -->  00:05:58.180
you can see at the top here and put this in
121

121

00:05:58.180  -->  00:06:01.150
the actual root path of this project for
122

122

00:06:01.150  -->  00:06:02.500
one of a better place
123

123

00:06:02.500  -->  00:06:03.760
so what I'm going to do is just
124

124

00:06:03.760  -->  00:06:06.580
duplicate that path on the top there for
125

125

00:06:06.580  -->  00:06:11.020
the map....
126

126

00:06:11.020  -->  00:06:18.760
....
127

127

00:06:18.760  -->  00:06:21.100
...making sure I've got my case
128

128

00:06:21.100  -->  00:06:23.290
hopefully correct so that's going to
129

129

00:06:23.290  -->  00:06:25.720
create the database in this folder
130

130

00:06:25.720  -->  00:06:28.150
depending on what version of
131

131

00:06:28.150  -->  00:06:29.560
IntelliJ your running have mentioned this
132

132

00:06:29.560  -->  00:06:31.450
before in the course but the most recent
133

133

00:06:31.450  -->  00:06:33.010
versions are starting to add this
134

134

00:06:33.010  -->  00:06:36.070
helpful although annoying
135

135

00:06:36.070  -->  00:06:38.620
annoying feature that prefixes all the
136

136

00:06:38.620  -->  00:06:41.320
method parameters with their names now
137

137

00:06:41.320  -->  00:06:43.330
it's turned on by default but luckily
138

138

00:06:43.330  -->  00:06:45.640
can turn this off fairly easily by just
139

139

00:06:45.640  -->  00:06:47.110
coming into setting so let's actually go
140

140

00:06:47.110  -->  00:06:48.400
and do that now because i'm not
141

141

00:06:48.400  -->  00:06:50.650
sure about you but I find it a little
142

142

00:06:50.650  -->  00:06:52.570
bit frustrating so guarantees
143

143

00:06:52.570  -->  00:06:54.160
settings or preferences in this case
144

144

00:06:54.160  -->  00:06:58.000
you want to select editor in general
145

145

00:06:58.000  -->  00:07:02.320
and then under appearance their this show
146

146

00:07:02.320  -->  00:07:04.390
parameter name hints i'm going to take
147

147

00:07:04.390  -->  00:07:06.430
the check box off for that to turn off
148

148

00:07:06.430  -->  00:07:08.620
that quote unquote feature so we're not
149

149

00:07:08.620  -->  00:07:10.240
bother with that anymore you can see
150

150

00:07:10.240  -->  00:07:12.250
that now remove that and I personally thinks
151

151

00:07:12.250  -->  00:07:13.750
more readable with it removed but it's
152

152

00:07:13.750  -->  00:07:16.410
up to you as to which way you want to go
153

153

00:07:16.410  -->  00:07:17.620
alright so what are we doing here well
154

154

00:07:17.620  -->  00:07:19.870
with we setup a connection string
155

155

00:07:19.870  -->  00:07:21.790
we called driver manager . get
156

156

00:07:21.790  -->  00:07:23.770
connection and that accepts the
157

157

00:07:23.770  -->  00:07:25.480
connection string and returns the
158

158

00:07:25.480  -->  00:07:28.060
connection instance now the method may
159

159

00:07:28.060  -->  00:07:29.650
throw s sql exception
160

160

00:07:29.650  -->  00:07:30.880
that's why we're trying to catch that
161

161

00:07:30.880  -->  00:07:32.910
just putting out an exception message
162

162

00:07:32.910  -->  00:07:36.070
now if the jdbc driver isn't on the
163

163

00:07:36.070  -->  00:07:37.810
classpath then you actually get a
164

164

00:07:37.810  -->  00:07:40.930
classnotfoundexception so this is the
165

165

00:07:40.930  -->  00:07:43.360
new way of connecting to a database when
166

166

00:07:43.360  -->  00:07:46.990
using jdbc 4.0 and above when using
167

167

00:07:46.990  -->  00:07:48.790
earlier versions we actually had to
168

168

00:07:48.790  -->  00:07:51.370
register and load jdbc drivers by
169

169

00:07:51.370  -->  00:07:53.140
calling the class . for name method
170

170

00:07:53.140  -->  00:07:56.110
with the driver class name so you'll see
171

171

00:07:56.110  -->  00:07:57.660
lots of older examples around the
172

172

00:07:57.660  -->  00:07:59.950
internet that uses for name method and
173

173

00:07:59.950  -->  00:08:01.560
that's just why I'm mentioning it here now
174

174

00:08:01.560  -->  00:08:05.050
so the older version we would have to do
175

175

00:08:05.050  -->  00:08:11.250
something like...
176

176

00:08:11.250  -->  00:08:16.110
...
177

177

00:08:16.110  -->  00:08:18.000
....so just
178

178

00:08:18.000  -->  00:08:21.630
commented out so there's actually two
179

179

00:08:21.630  -->  00:08:23.740
ways of establishing connection using
180

180

00:08:23.740  -->  00:08:27.580
jdbc 4.0 so one is using the driver
181

181

00:08:27.580  -->  00:08:29.640
manager as we've done here and the other
182

182

00:08:29.640  -->  00:08:32.830
is using data source objects now the
183

183

00:08:32.830  -->  00:08:35.400
later is sometimes the preferred way and
184

184

00:08:35.400  -->  00:08:36.840
that's because it allows advanced
185

185

00:08:36.840  -->  00:08:38.910
features like connection pooling and
186

186

00:08:38.910  -->  00:08:41.310
distributed transactions and it's also
187

187

00:08:41.310  -->  00:08:43.000
more portable because of the way
188

188

00:08:43.000  -->  00:08:45.510
connections are established now we don't
189

189

00:08:45.510  -->  00:08:47.190
need these features when using sqlite
190

190

00:08:47.190  -->  00:08:49.480
and they require that database
191

191

00:08:49.480  -->  00:08:51.690
administrators set up the database to
192

192

00:08:51.690  -->  00:08:54.490
enable use of these features also a lot
193

193

00:08:54.490  -->  00:08:56.350
more complicated to use data source
194

194

00:08:56.350  -->  00:08:58.420
objects and they're really only needed
195

195

00:08:58.420  -->  00:08:59.980
when working with large enterprise
196

196

00:08:59.980  -->  00:09:02.860
applications particularly jee or java
197

197

00:09:02.860  -->  00:09:05.440
enterprise edition applications now
198

198

00:09:05.440  -->  00:09:06.610
we're not going to cover using data
199

199

00:09:06.610  -->  00:09:08.410
source objects for that reason we're
200

200

00:09:08.410  -->  00:09:10.500
gonna stick to using driver manager but
201

201

00:09:10.500  -->  00:09:12.730
I'm just mentioning data source objects in
202

202

00:09:12.730  -->  00:09:15.270
case you come across them although you
203

203

00:09:15.270  -->  00:09:16.600
shouldn't unless you're actually working
204

204

00:09:16.600  -->  00:09:19.380
on enterprise applications
205

205

00:09:19.380  -->  00:09:20.620
alright so let's go ahead now run the
206

206

00:09:20.620  -->  00:09:22.830
application to make sure we're picking
207

207

00:09:22.830  -->  00:09:24.330
up the sqlite library that we've
208

208

00:09:24.330  -->  00:09:27.220
added that it's working okay and we'll
209

209

00:09:27.220  -->  00:09:33.570
just right click this and run it you can
210

210

00:09:33.570  -->  00:09:35.380
see that it's completed ok we've got
211

211

00:09:35.380  -->  00:09:37.180
no errors no exceptions
212

212

00:09:37.180  -->  00:09:41.230
I'll just put this down the bottom but
213

213

00:09:41.230  -->  00:09:43.380
more to the point down here over here
214

214

00:09:43.380  -->  00:09:44.620
to the left of the project pane you can
215

215

00:09:44.620  -->  00:09:47.380
see this test java dot bdb that's the
216

216

00:09:47.380  -->  00:09:49.260
file the database automatically
217

217

00:09:49.260  -->  00:09:51.570
created mean obviously got the path
218

218

00:09:51.570  -->  00:09:54.330
correct and it's been successfully
219

219

00:09:54.330  -->  00:09:56.860
created for us because it didn't exist
220

220

00:09:56.860  -->  00:09:59.880
and again if you recall I said that when
221

221

00:09:59.880  -->  00:10:01.440
you try to connect to a database in
222

222

00:10:01.440  -->  00:10:03.690
sqlite if it doesn't exist
223

223

00:10:03.690  -->  00:10:05.680
it tries or it actually creates the
224

224

00:10:05.680  -->  00:10:09.060
database for you if you're getting
225

225

00:10:09.060  -->  00:10:10.720
errors at this point make sure the
226

226

00:10:10.720  -->  00:10:12.880
sqlite jdbc driver has been added
227

227

00:10:12.880  -->  00:10:15.270
to the project and also check for typos
228

228

00:10:15.270  -->  00:10:17.050
in the connection string so in the
229

229

00:10:17.050  -->  00:10:18.330
case of windows make sure you are
230

230

00:10:18.330  -->  00:10:21.040
escaping your backslashes and you've got
231

231

00:10:21.040  -->  00:10:23.430
the exact path and also just as a
232

232

00:10:23.430  -->  00:10:25.200
general rule is going to make sure you
233

233

00:10:25.200  -->  00:10:26.880
got the exact case and don't rely on
234

234

00:10:26.880  -->  00:10:28.720
your operating system to figure out
235

235

00:10:28.720  -->  00:10:29.980
whether you meant the upper or lowercase
236

236

00:10:29.980  -->  00:10:31.200
version of a letter
237

237

00:10:31.200  -->  00:10:34.240
alright so next we're going to create
238

238

00:10:34.240  -->  00:10:36.990
the contacts table that we created when
239

239

00:10:36.990  -->  00:10:38.430
we were working with the test db
240

240

00:10:38.430  -->  00:10:40.560
database from the command line in this
241

241

00:10:40.560  -->  00:10:42.990
section now whenever we want to use
242

242

00:10:42.990  -->  00:10:45.550
sql with jdbc we use what's called
243

243

00:10:45.550  -->  00:10:48.750
statement objects so to create a table
244

244

00:10:48.750  -->  00:10:50.880
going to call the connection . create
245

245

00:10:50.880  -->  00:10:52.800
statement method and then we'll use the
246

246

00:10:52.800  -->  00:10:54.990
statement executes method to run a
247

247

00:10:54.990  -->  00:10:57.000
sql statement so let's look at
248

248

00:10:57.000  -->  00:10:58.720
the code will type that in and will
249

249

00:10:58.720  -->  00:11:00.910
talk about it i'm going to start on
250

250

00:11:00.910  -->  00:11:03.220
the line after the connection going to
251

251

00:11:03.220  -->  00:11:07.600
type in a statement....
252

252

00:11:07.600  -->  00:11:09.930
....
253

253

00:11:09.930  -->  00:11:22.500
...
254

254

00:11:22.500  -->  00:11:24.870
....in this case we're creating the
255

255

00:11:24.870  -->  00:11:28.050
table...
256

256

00:11:28.050  -->  00:11:43.690
...
257

257

00:11:43.690  -->  00:11:46.160
ok so after getting a connection
258

258

00:11:46.160  -->  00:11:48.130
instance we creating this statement
259

259

00:11:48.130  -->  00:11:50.890
instance and we are then calling the execute
260

260

00:11:50.890  -->  00:11:55.160
method on line 17 and we're passing
261

261

00:11:55.160  -->  00:11:56.320
the sql commands that we want to
262

262

00:11:56.320  -->  00:11:58.360
execute in this case the sql to
263

263

00:11:58.360  -->  00:12:01.180
create contacts table so basically
264

264

00:12:01.180  -->  00:12:02.680
passing the same sql statement we've
265

265

00:12:02.680  -->  00:12:04.810
used in the past when we created that
266

266

00:12:04.810  -->  00:12:07.570
table using the command line now notice
267

267

00:12:07.570  -->  00:12:10.600
that I didn't need to add the semicolon
268

268

00:12:10.600  -->  00:12:12.700
to the end of the statement and that's
269

269

00:12:12.700  -->  00:12:14.410
because the driver understands that when
270

270

00:12:14.410  -->  00:12:16.790
we call execute we've passed a complete
271

271

00:12:16.790  -->  00:12:19.330
sql statement and it's also important
272

272

00:12:19.330  -->  00:12:21.160
to note that we created the statement
273

273

00:12:21.160  -->  00:12:24.310
object by calling a connection method so
274

274

00:12:24.310  -->  00:12:26.410
the statement as such as associated with
275

275

00:12:26.410  -->  00:12:28.600
the connection and can only be running
276

276

00:12:28.600  -->  00:12:30.230
against the database we connected to
277

277

00:12:30.230  -->  00:12:32.620
when we created the connection instance
278

278

00:12:32.620  -->  00:12:34.970
so let's actually run this to make
279

279

00:12:34.970  -->  00:12:40.040
sure that it actually works and we don't
280

280

00:12:40.040  -->  00:12:41.320
get any errors and we're not getting any
281

281

00:12:41.320  -->  00:12:42.130
errors there
282

282

00:12:42.130  -->  00:12:43.930
notice that the database there has
283

283

00:12:43.930  -->  00:12:45.190
changed to the picture of a database
284

284

00:12:45.190  -->  00:12:48.070
icon that indicates their is some data in
285

285

00:12:48.070  -->  00:12:50.020
there and intelliJ is smart enough to
286

286

00:12:50.020  -->  00:12:51.410
figure out that that's relating to a
287

287

00:12:51.410  -->  00:12:54.370
database so let's go swing back
288

288

00:12:54.370  -->  00:12:58.780
over to the DB browser let's go ahead
289

289

00:12:58.780  -->  00:13:00.490
and open the database i'm going to open
290

290

00:13:00.490  -->  00:13:04.480
it so there's my test db file I'm going to select
291

291

00:13:04.480  -->  00:13:08.830
test javad . DB and click on open you
292

292

00:13:08.830  -->  00:13:10.120
can see there that we now got a
293

293

00:13:10.120  -->  00:13:13.030
contacts table and i can expand that now
294

294

00:13:13.030  -->  00:13:14.260
you can see that we've got the various
295

295

00:13:14.260  -->  00:13:16.180
fields we've got the name of the phone
296

296

00:13:16.180  -->  00:13:17.110
and the email
297

297

00:13:17.110  -->  00:13:19.970
alright so that's good now the
298

298

00:13:19.970  -->  00:13:21.490
connection on statement objects used
299

299

00:13:21.490  -->  00:13:23.980
database resources so when we finish
300

300

00:13:23.980  -->  00:13:25.420
with them we should actually close them
301

301

00:13:25.420  -->  00:13:28.030
if we don't the java runtime will
302

302

00:13:28.030  -->  00:13:30.040
eventually closed them for us but it is
303

303

00:13:30.040  -->  00:13:31.570
actually good programming practice to
304

304

00:13:31.570  -->  00:13:33.790
close a resource as soon as we finish
305

305

00:13:33.790  -->  00:13:35.350
using it and we're sure that we don't
306

306

00:13:35.350  -->  00:13:37.450
need it again now in Trivial
307

307

00:13:37.450  -->  00:13:38.890
applications like this one it doesn't
308

308

00:13:38.890  -->  00:13:41.140
matter but in large applications that
309

309

00:13:41.140  -->  00:13:43.270
use multiple database connections if
310

310

00:13:43.270  -->  00:13:44.950
you're not closing resources that you
311

311

00:13:44.950  -->  00:13:46.910
don't need is possible that you're
312

312

00:13:46.910  -->  00:13:48.610
running out of resources and the
313

313

00:13:48.610  -->  00:13:50.320
application would no longer be able to
314

314

00:13:50.320  -->  00:13:52.570
work with the database or perhaps the
315

315

00:13:52.570  -->  00:13:53.950
performance of the application will
316

316

00:13:53.950  -->  00:13:57.130
degrade so it's obviously very important
317

317

00:13:57.130  -->  00:13:59.380
make sure that you are closing the
318

318

00:13:59.380  -->  00:14:00.670
connections once you're finished using
319

319

00:14:00.670  -->  00:14:03.170
them now one of the things you could do
320

320

00:14:03.170  -->  00:14:04.330
we've talked about this earlier in the
321

321

00:14:04.330  -->  00:14:06.230
course using the newest style of the tri
322

322

00:14:06.230  -->  00:14:09.310
statement and we can get that too close
323

323

00:14:09.310  -->  00:14:11.830
for us automatically so let's just
324

324

00:14:11.830  -->  00:14:12.980
change the code so you can see that
325

325

00:14:12.980  -->  00:14:16.120
syntax is going to be try i'm just going
326

326

00:14:16.120  -->  00:14:20.540
to copy the connection line to so you recall
327

327

00:14:20.540  -->  00:14:22.660
the syntax that the newest style try
328

328

00:14:22.660  -->  00:14:25.180
and paste in the connection with driver
329

329

00:14:25.180  -->  00:14:28.360
manager semicolon then on the next line
330

330

00:14:28.360  -->  00:14:40.480
also add a statement line....
331

331

00:14:40.480  -->  00:14:45.610
....
332

332

00:14:45.610  -->  00:14:52.160
...
333

333

00:14:52.160  -->  00:14:53.500
....
334

334

00:14:53.500  -->  00:14:54.910
...
335

335

00:14:54.910  -->  00:14:57.040
...I'm going to just change that
336

336

00:14:57.040  -->  00:15:00.850
going to file project structure click on
337

337

00:15:00.850  -->  00:15:03.760
project i'm going to choose version 8
338

338

00:15:03.760  -->  00:15:08.620
click on ok so I used the
339

339

00:15:08.620  -->  00:15:11.860
new try with resources connection here
340

340

00:15:11.860  -->  00:15:14.380
and the advantage of this is that the
341

341

00:15:14.380  -->  00:15:16.100
resources will be closed when the try
342

342

00:15:16.100  -->  00:15:19.060
catch block is exited so that's an
343

343

00:15:19.060  -->  00:15:20.560
alternate way of actually doing it that
344

344

00:15:20.560  -->  00:15:22.660
i recommend but for now what I'm going
345

345

00:15:22.660  -->  00:15:24.490
to do is stick with explicitly closing
346

346

00:15:24.490  -->  00:15:26.720
any resource we no longer need to drive
347

347

00:15:26.720  -->  00:15:28.510
home that must be done this way
348

348

00:15:28.510  -->  00:15:30.010
so what I'm going to do is take a copy
349

349

00:15:30.010  -->  00:15:34.850
of this duplicate it and commented those
350

350

00:15:34.850  -->  00:15:36.700
three lines and i'm just going to revert
351

351

00:15:36.700  -->  00:15:42.370
back to the old format
352

352

00:15:42.370  -->  00:15:50.950
and I got a problem here which I just fix
353

353

00:15:50.950  -->  00:15:53.800
as well and this is reformat the code
354

354

00:15:53.800  -->  00:16:00.330
so we'll just stick to that
355

355

00:16:00.330  -->  00:16:01.830
version by leaving it in the comments
356

356

00:16:01.830  -->  00:16:03.670
anyway so you can know that you can
357

357

00:16:03.670  -->  00:16:05.320
actually do the try with resources if
358

358

00:16:05.320  -->  00:16:07.330
you want to automatically be closed but
359

359

00:16:07.330  -->  00:16:08.520
I want to get us to get into the
360

360

00:16:08.520  -->  00:16:10.120
habit of just closing this manually
361

361

00:16:10.120  -->  00:16:11.980
because it's a good habit to get into as
362

362

00:16:11.980  -->  00:16:15.640
a rule so basically after the execute we
363

363

00:16:15.640  -->  00:16:19.060
want do a statement....
364

364

00:16:19.060  -->  00:16:23.950
...
365

365

00:16:23.950  -->  00:16:25.360
just a final note before i finish this video
366

366

00:16:25.360  -->  00:16:28.020
the order in which we close database
367

367

00:16:28.020  -->  00:16:30.730
resources is important you should close
368

368

00:16:30.730  -->  00:16:33.160
any statement instances before we close
369

369

00:16:33.160  -->  00:16:35.230
the connection if you think about it
370

370

00:16:35.230  -->  00:16:37.150
that's logical because if we close the
371

371

00:16:37.150  -->  00:16:39.580
connection first then the database has
372

372

00:16:39.580  -->  00:16:41.230
been closed and actually what will
373

373

00:16:41.230  -->  00:16:42.880
happen is the sql exception will be
374

374

00:16:42.880  -->  00:16:45.100
thrown with a message sql error or
375

375

00:16:45.100  -->  00:16:46.660
missing database and again that's
376

376

00:16:46.660  -->  00:16:48.880
because the connections is close so
377

377

00:16:48.880  -->  00:16:50.520
remember that a statement is associated
378

378

00:16:50.520  -->  00:16:52.630
with a connection so it's sort of
379

379

00:16:52.630  -->  00:16:54.700
hanging on using that connection so if your closing
380

380

00:16:54.700  -->  00:16:56.620
the connection we can't actually
381

381

00:16:56.620  -->  00:16:58.240
use any statements that were associated
382

382

00:16:58.240  -->  00:16:59.170
with it
383

383

00:16:59.170  -->  00:17:01.720
alright so now that we're close the
384

384

00:17:01.720  -->  00:17:03.270
database resources in our code let's
385

385

00:17:03.270  -->  00:17:10.750
just run it again and oops we actually
386

386

00:17:10.750  -->  00:17:13.000
got an error here now the message
387

387

00:17:13.000  -->  00:17:14.580
printed to the console down the bottom
388

388

00:17:14.580  -->  00:17:16.720
says that the contacts table already
389

389

00:17:16.720  -->  00:17:19.320
exists now we're trying to create the
390

390

00:17:19.320  -->  00:17:20.860
table again which is an error
391

391

00:17:20.860  -->  00:17:23.020
let's start looking at that and how to
392

392

00:17:23.020  -->  00:17:29.490
fix this in the next video
