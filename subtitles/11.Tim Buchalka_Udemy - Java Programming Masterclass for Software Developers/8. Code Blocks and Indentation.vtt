WEBVTT
1
1

00:00:04.663  -->  00:00:06.900
<v ->We're gonna talk about indentation in this video,</v>
2

2

00:00:06.900  -->  00:00:09.210
but firstly, let's recap and go into
3

3

00:00:09.210  -->  00:00:11.713
a bit more detail about code blocks.
4

4

00:00:12.690  -->  00:00:13.840
So a code block in Java,
5

5

00:00:13.840  -->  00:00:15.670
and actually most programming languages,
6

6

00:00:15.670  -->  00:00:17.310
is one or more statements within left
7

7

00:00:17.310  -->  00:00:18.930
and right curly braces.
8

8

00:00:18.930  -->  00:00:21.260
All the code within the curly brace is a part
9

9

00:00:21.260  -->  00:00:23.260
of a logical unit.
10

10

00:00:23.260  -->  00:00:25.310
So when we define a class like this,
11

11

00:00:25.310  -->  00:00:27.070
and you've seen this before in the course,
12

12

00:00:27.070  -->  00:00:28.690
that's a code block.
13

13

00:00:28.690  -->  00:00:30.260
The code block is the part in between
14

14

00:00:30.260  -->  00:00:31.860
the left and right curly braces.
15

15

00:00:32.880  -->  00:00:34.770
And code blocks can be nested within
16

16

00:00:34.770  -->  00:00:36.220
other code blocks, as well.
17

17

00:00:36.220  -->  00:00:37.720
So in this example here, we can see
18

18

00:00:37.720  -->  00:00:40.460
that we've got our public static void main declaration
19

19

00:00:40.460  -->  00:00:42.000
in the left and right curly braces.
20

20

00:00:42.000  -->  00:00:43.130
Well that's a method,
21

21

00:00:43.130  -->  00:00:46.520
and that also is a separate logical unit
22

22

00:00:46.520  -->  00:00:48.620
or a code block in its own right, as well.
23

23

00:00:50.130  -->  00:00:53.020
And taking that to the next level, after the declaration
24

24

00:00:53.020  -->  00:00:55.220
of our int variable salary,
25

25

00:00:55.220  -->  00:00:56.710
we've got an if statement there,
26

26

00:00:56.710  -->  00:00:59.470
and that if statement is also got its own code block
27

27

00:00:59.470  -->  00:01:02.040
as well with the left and right curly braces.
28

28

00:01:02.040  -->  00:01:05.340
So this simplistic little programme has three code blocks.
29

29

00:01:05.340  -->  00:01:07.090
The first one's here,
30

30

00:01:07.090  -->  00:01:09.190
the second code block is here,
31

31

00:01:09.190  -->  00:01:10.853
and the third one is here.
32

32

00:01:13.110  -->  00:01:16.170
So code block one, this one, contains code block two
33

33

00:01:16.170  -->  00:01:17.910
and code block three.
34

34

00:01:17.910  -->  00:01:20.700
Code block two contains code block three.
35

35

00:01:20.700  -->  00:01:23.350
So we say that code block three is a nested code block
36

36

00:01:23.350  -->  00:01:25.800
of code block two, and code block two
37

37

00:01:25.800  -->  00:01:28.400
and code block three are nested code blocks
38

38

00:01:28.400  -->  00:01:29.333
of code block one.
39

39

00:01:31.160  -->  00:01:33.120
So this will become important later
40

40

00:01:33.120  -->  00:01:35.270
when we discuss variable scope,
41

41

00:01:35.270  -->  00:01:36.860
but for now just keep in mind that each
42

42

00:01:36.860  -->  00:01:40.060
of these code blocks are logical units in their own right.
43

43

00:01:40.060  -->  00:01:42.100
All right, so I mentioned indentation.
44

44

00:01:42.100  -->  00:01:43.470
So let's discuss that
45

45

00:01:43.470  -->  00:01:46.070
and then see what that's got to do with code blocks.
46

46

00:01:47.600  -->  00:01:48.700
So in computer programming,
47

47

00:01:48.700  -->  00:01:51.010
indentation is a convention of adding spaces
48

48

00:01:51.010  -->  00:01:55.090
to typed code to convey programme structure.
49

49

00:01:55.090  -->  00:01:57.240
So here's our code block sample code again.
50

50

00:01:59.380  -->  00:02:00.710
So notice how there are spaces
51

51

00:02:00.710  -->  00:02:02.190
to the left of the word public,
52

52

00:02:02.190  -->  00:02:04.000
in the main method declaration.
53

53

00:02:04.000  -->  00:02:05.810
Note also that there's spaces to the left
54

54

00:02:05.810  -->  00:02:10.000
of the declaration of our salary int variable.
55

55

00:02:10.000  -->  00:02:11.760
And there's also spaces to the if statement
56

56

00:02:11.760  -->  00:02:13.300
and then finally there's spaces to the left
57

57

00:02:13.300  -->  00:02:16.570
of the system.out.println statement.
58

58

00:02:16.570  -->  00:02:18.023
So this is indentation.
59

59

00:02:20.270  -->  00:02:22.870
So if we contrast that to the same code,
60

60

00:02:22.870  -->  00:02:24.400
without any indentation,
61

61

00:02:24.400  -->  00:02:26.130
as you can see here on the screen,
62

62

00:02:26.130  -->  00:02:28.880
this code works identically to the indented code
63

63

00:02:28.880  -->  00:02:32.270
but Java ignores indentation when it scans your programme.
64

64

00:02:32.270  -->  00:02:35.440
So just like white space, indentation is for humans only.
65

65

00:02:35.440  -->  00:02:37.063
It makes code easier to read,
66

66

00:02:37.063  -->  00:02:39.850
and for you to see at a glance which code blocks
67

67

00:02:39.850  -->  00:02:41.373
specific code is part of.
68

68

00:02:42.910  -->  00:02:44.160
So looking at both samples
69

69

00:02:44.160  -->  00:02:45.460
of code at the same time,
70

70

00:02:45.460  -->  00:02:46.880
to left we've got the indented code
71

71

00:02:46.880  -->  00:02:49.310
and to the right the code that's not indented.
72

72

00:02:49.310  -->  00:02:51.180
One's a lot easier to read than the other.
73

73

00:02:51.180  -->  00:02:52.013
I think you'd agree
74

74

00:02:52.013  -->  00:02:54.060
that the indented code's a lot easier to read.
75

75

00:02:55.880  -->  00:02:58.730
So in terms of conveying programme structure
76

76

00:02:58.730  -->  00:03:00.661
we can see at a glance because we're indenting
77

77

00:03:00.661  -->  00:03:03.890
that the public static void main block is part
78

78

00:03:03.890  -->  00:03:05.130
of the main block,
79

79

00:03:05.130  -->  00:03:08.440
and we can see that within the public static void main
80

80

00:03:08.440  -->  00:03:11.430
code block, there's a declaration of a variable there
81

81

00:03:11.430  -->  00:03:12.570
and also the if statement.
82

82

00:03:12.570  -->  00:03:13.830
It's very easy to see
83

83

00:03:13.830  -->  00:03:15.870
because we're using indentation
84

84

00:03:15.870  -->  00:03:18.950
that that is part of the main method part
85

85

00:03:18.950  -->  00:03:19.990
of that code block in other words.
86

86

00:03:19.990  -->  00:03:21.780
So that's what we're trying to do is
87

87

00:03:21.780  -->  00:03:24.440
whilst you don't have to indent code,
88

88

00:03:24.440  -->  00:03:26.060
certainly from Java's perspective it'll work
89

89

00:03:26.060  -->  00:03:27.480
quite happily without it,
90

90

00:03:27.480  -->  00:03:30.350
it's much easier to write code for humans,
91

91

00:03:30.350  -->  00:03:32.750
and they can see at a glance which particular code
92

92

00:03:32.750  -->  00:03:33.970
is part of which code block.
93

93

00:03:33.970  -->  00:03:35.240
And that becomes important later
94

94

00:03:35.240  -->  00:03:36.930
when we start talking about variable scope
95

95

00:03:36.930  -->  00:03:38.773
and methods, and so on.
96

96

00:03:41.030  -->  00:03:43.690
So again, as a recap, looking at both slides, again,
97

97

00:03:43.690  -->  00:03:46.730
the code works identically in both cases.
98

98

00:03:46.730  -->  00:03:49.630
Java ignores indentation when it scans your programme
99

99

00:03:49.630  -->  00:03:53.340
and we're only indenting code using white space in general
100

100

00:03:53.340  -->  00:03:55.293
to make it easier for humans to read.
101

101

00:03:56.466  -->  00:03:58.320
All right, so to find out more information about
102

102

00:03:58.320  -->  00:04:00.950
block indentation code conventions,
103

103

00:04:00.950  -->  00:04:02.600
I'll go back to the browser here.
104

104

00:04:04.350  -->  00:04:06.980
This is the link we've been using for our code conventions.
105

105

00:04:06.980  -->  00:04:09.360
And you can see down in section four down here
106

106

00:04:09.360  -->  00:04:10.600
there's an option for formatting.
107

107

00:04:10.600  -->  00:04:12.670
And if we click into there,
108

108

00:04:12.670  -->  00:04:14.600
there's a bit of a discussion there on block indentation
109

109

00:04:14.600  -->  00:04:16.370
and using spaces.
110

110

00:04:16.370  -->  00:04:19.080
And their example is using two spaces.
111

111

00:04:19.080  -->  00:04:20.590
That's one way of doing things.
112

112

00:04:20.590  -->  00:04:22.220
Another example is four spaces.
113

113

00:04:22.220  -->  00:04:24.410
So there's multiple code conventions out there.
114

114

00:04:24.410  -->  00:04:26.320
The point is that there is a convention here
115

115

00:04:26.320  -->  00:04:28.290
telling you what you can do.
116

116

00:04:28.290  -->  00:04:29.930
So let's swing back to IntelliJ now
117

117

00:04:29.930  -->  00:04:32.230
and look at how indentation works in practise.
118

118

00:04:33.870  -->  00:04:34.770
All right, so as you can see
119

119

00:04:34.770  -->  00:04:38.193
I've created a new project called indentation.
120

120

00:04:38.193  -->  00:04:40.200
Now this time I chose not to use the template
121

121

00:04:40.200  -->  00:04:42.980
to create our class and method automatically
122

122

00:04:42.980  -->  00:04:44.560
so that we can type some stuff in manually
123

123

00:04:44.560  -->  00:04:48.190
to see how IntelliJ adds indentation for us automatically.
124

124

00:04:48.190  -->  00:04:50.160
So if you're following along using another IDE
125

125

00:04:50.160  -->  00:04:52.520
or a text editor, most will do a similar thing
126

126

00:04:52.520  -->  00:04:53.790
to what you see here.
127

127

00:04:53.790  -->  00:04:55.010
So what I'm gonna do first is
128

128

00:04:55.010  -->  00:04:58.100
right click the src folder there.
129

129

00:04:58.100  -->  00:05:01.550
I'm gonna click on new, select class, java class,
130

130

00:05:01.550  -->  00:05:04.290
and I'm gonna go with the same boring name we've been using
131

131

00:05:04.290  -->  00:05:05.270
throughout the course so far.
132

132

00:05:05.270  -->  00:05:07.260
Main, a capital M,
133

133

00:05:07.260  -->  00:05:09.010
making sure class is select there.
134

134

00:05:09.010  -->  00:05:10.133
We can press enter,
135

135

00:05:10.980  -->  00:05:12.670
and you can see automatically
136

136

00:05:12.670  -->  00:05:15.310
that IntelliJ has created that class for us now.
137

137

00:05:15.310  -->  00:05:16.890
I'm gonna close down that project pane
138

138

00:05:16.890  -->  00:05:18.900
to give us a bit more space.
139

139

00:05:18.900  -->  00:05:21.390
So we've got an initial code block as you can see there.
140

140

00:05:21.390  -->  00:05:22.280
The lines one and two,
141

141

00:05:22.280  -->  00:05:24.785
or basically the code in between the left
142

142

00:05:24.785  -->  00:05:25.618
and right curly braces
143

143

00:05:25.618  -->  00:05:26.987
of which there isn't any code at the moment.
144

144

00:05:26.987  -->  00:05:29.720
And at the moment, we can't actually see any example
145

145

00:05:29.720  -->  00:05:30.810
of indentation,
146

146

00:05:30.810  -->  00:05:32.760
so let's actually add our main method
147

147

00:05:32.760  -->  00:05:34.050
so that we can execute a programme.
148

148

00:05:34.050  -->  00:05:36.360
And we've seen that and talked about that previously.
149

149

00:05:36.360  -->  00:05:38.040
I'm gonna come down to that end of line one
150

150

00:05:38.040  -->  00:05:39.600
and press Enter.
151

151

00:05:39.600  -->  00:05:42.200
Now notice what happened when I pressed Enter there.
152

152

00:05:42.200  -->  00:05:44.310
IntelliJ's automatically indented
153

153

00:05:44.310  -->  00:05:46.410
but it hasn't indented to two characters,
154

154

00:05:46.410  -->  00:05:49.980
as the code convention stated, it's indented by four.
155

155

00:05:49.980  -->  00:05:51.600
And we'll talk more about that a little bit later.
156

156

00:05:51.600  -->  00:05:53.260
The point is though it's done the indentation
157

157

00:05:53.260  -->  00:05:54.120
for you automatically.
158

158

00:05:54.120  -->  00:05:57.300
And you'll find that most IDEs will do this for you
159

159

00:05:57.300  -->  00:05:58.890
which is a good thing, saving you having
160

160

00:05:58.890  -->  00:06:00.403
to remember to do it yourself.
161

161

00:06:01.450  -->  00:06:02.840
All right, so what I'm gonna do now is type in
162

162

00:06:02.840  -->  00:06:06.463
the IntelliJ shortcut which we've seen before, psvm,
163

163

00:06:07.370  -->  00:06:08.880
and press Tab,
164

164

00:06:08.880  -->  00:06:10.860
and that just types in the whole line for us.
165

165

00:06:10.860  -->  00:06:13.400
And the point of that is that it's created
166

166

00:06:13.400  -->  00:06:15.390
the method declaration for main,
167

167

00:06:15.390  -->  00:06:17.230
and it's added another code block for us,
168

168

00:06:17.230  -->  00:06:19.890
and note that it's automatically indented again
169

169

00:06:19.890  -->  00:06:21.860
by yet another four spaces.
170

170

00:06:21.860  -->  00:06:23.470
And being pedantic like I am,
171

171

00:06:23.470  -->  00:06:24.303
I'm just gonna press enter there
172

172

00:06:24.303  -->  00:06:26.120
just to give it a bit more space.
173

173

00:06:26.120  -->  00:06:27.500
Now I can press tab to go over
174

174

00:06:27.500  -->  00:06:29.920
to the position I was in before.
175

175

00:06:29.920  -->  00:06:32.220
All right, so let's type in now our declaration statement
176

176

00:06:32.220  -->  00:06:34.440
for our variable salary that we saw on the slides.
177

177

00:06:34.440  -->  00:06:35.600
I'm gonna press Enter there again
178

178

00:06:35.600  -->  00:06:37.690
and notice when I press Enter,
179

179

00:06:37.690  -->  00:06:40.700
that the indentation level is kept automatically by IntelliJ
180

180

00:06:40.700  -->  00:06:43.440
so it hasn't gone back to the start of the like like that,
181

181

00:06:43.440  -->  00:06:46.100
but rather it knows, okay,
182

182

00:06:46.100  -->  00:06:47.160
he wants to separate a line,
183

183

00:06:47.160  -->  00:06:49.270
but he also wants to keep it at the same indentation level.
184

184

00:06:49.270  -->  00:06:51.770
So basically IntelliJ is knowing
185

185

00:06:51.770  -->  00:06:55.180
and it's been configured to work to use indentation.
186

186

00:06:55.180  -->  00:06:57.710
So I'm gonna type int salary
187

187

00:06:57.710  -->  00:07:00.470
equal zero, sorry equals 60
188

188

00:07:00.470  -->  00:07:01.950
semicolon to end the line.
189

189

00:07:01.950  -->  00:07:03.080
So I'm pressing Enter,
190

190

00:07:03.080  -->  00:07:04.740
you can see that IntelliJ's maintained
191

191

00:07:04.740  -->  00:07:06.520
the indentation level again,
192

192

00:07:06.520  -->  00:07:08.380
and if we type our if statement from the slides,
193

193

00:07:08.380  -->  00:07:11.310
if parentheses salary
194

194

00:07:11.310  -->  00:07:13.190
is greater than 60
195

195

00:07:13.190  -->  00:07:14.970
this time we're gonna add a code block,
196

196

00:07:14.970  -->  00:07:16.400
we add our left curly brace,
197

197

00:07:16.400  -->  00:07:17.263
press Enter,
198

198

00:07:18.220  -->  00:07:20.780
you can see that IntelliJ has added the right curly brace
199

199

00:07:20.780  -->  00:07:23.860
on line eight, and automatically indented again
200

200

00:07:23.860  -->  00:07:26.580
ready for you to type some statement within that code block.
201

201

00:07:26.580  -->  00:07:28.720
And I'll quickly type in the statement
202

202

00:07:28.720  -->  00:07:30.050
sytem.out.println
203

203

00:07:30.050  -->  00:07:32.293
You are rich exclamation mark.
204

204

00:07:33.230  -->  00:07:35.450
All right, so that's indentation at work.
205

205

00:07:35.450  -->  00:07:38.990
And you can see that that code is much easier to read,
206

206

00:07:38.990  -->  00:07:40.860
and another way of looking at it would be,
207

207

00:07:40.860  -->  00:07:41.810
if I come down here
208

208

00:07:42.690  -->  00:07:44.280
and I remove the indentation,
209

209

00:07:44.280  -->  00:07:46.030
I'm holding Shift and pressing Tab,
210

210

00:07:47.750  -->  00:07:50.870
now if you look at that same code without indentation,
211

211

00:07:50.870  -->  00:07:52.070
yes it still will work,
212

212

00:07:52.070  -->  00:07:55.070
and if we run this, we see that this will still work for us.
213

213

00:07:57.677  -->  00:07:59.410
In this case we've got no output
214

214

00:07:59.410  -->  00:08:01.060
because I've used if salary greater than 60,
215

215

00:08:01.060  -->  00:08:02.970
I'll change that to 50 which it should have been.
216

216

00:08:02.970  -->  00:08:03.803
Run it again.
217

217

00:08:06.140  -->  00:08:07.700
So I can see that's working okay
218

218

00:08:07.700  -->  00:08:08.860
and if I code down the code window
219

219

00:08:08.860  -->  00:08:10.910
and actually undo the changes again,
220

220

00:08:10.910  -->  00:08:12.160
go back to where we were.
221

221

00:08:13.640  -->  00:08:16.020
Like so, and I'll just change that back to 50 again.
222

222

00:08:16.020  -->  00:08:17.730
That's the original code as I typed it
223

223

00:08:17.730  -->  00:08:19.753
and obviously that'll still work as well.
224

224

00:08:21.026  -->  00:08:22.770
You can see that one version of the code is a lot easier
225

225

00:08:22.770  -->  00:08:24.490
to read than the other.
226

226

00:08:24.490  -->  00:08:27.490
What I wanna do now is just show you some of the settings
227

227

00:08:27.490  -->  00:08:29.700
within IntelliJ, so if you're using another IDE
228

228

00:08:29.700  -->  00:08:32.830
you'll probably have to find the equivalent settings
229

229

00:08:32.830  -->  00:08:34.630
in that IDE or text editor.
230

230

00:08:34.630  -->  00:08:36.383
I'm on a Windows machine at the moment
231

231

00:08:36.383  -->  00:08:37.633
so I'm gonna go into file
232

232

00:08:38.590  -->  00:08:39.710
and select settings,
233

233

00:08:39.710  -->  00:08:41.920
on a Mac it'll be preferences,
234

234

00:08:41.920  -->  00:08:43.960
go into preferences and click on preferences
235

235

00:08:43.960  -->  00:08:45.740
and get into there that way.
236

236

00:08:45.740  -->  00:08:47.930
Next I'm gonna go into editor.
237

237

00:08:47.930  -->  00:08:49.660
And when I come down to code style
238

238

00:08:49.660  -->  00:08:50.750
I'm gonna close down that.
239

239

00:08:50.750  -->  00:08:54.487
So I've got editor, code style down here.
240

240

00:08:54.487  -->  00:08:56.063
And I'm gonna select Java.
241

241

00:08:57.070  -->  00:08:59.310
And that should be the same on all three operating systems.
242

242

00:08:59.310  -->  00:09:00.830
You'll really use preferences on a Mac
243

243

00:09:00.830  -->  00:09:03.200
or settings for Windows or a Linux machine.
244

244

00:09:03.200  -->  00:09:05.920
Then go down to editor, code style, and Java.
245

245

00:09:05.920  -->  00:09:07.980
So there's a few things to note here.
246

246

00:09:07.980  -->  00:09:12.290
So note that the use tab character checkbox isn't checked.
247

247

00:09:12.290  -->  00:09:13.420
And that's a good thing,
248

248

00:09:13.420  -->  00:09:15.600
and what that means is when you press Tab
249

249

00:09:15.600  -->  00:09:18.400
which is the indent key in most text editors
250

250

00:09:18.400  -->  00:09:20.250
it doesn't add a Tab character
251

251

00:09:20.250  -->  00:09:22.010
but instead it adds a number of spaces.
252

252

00:09:22.010  -->  00:09:23.790
And the number of spaces that it adds is based
253

253

00:09:23.790  -->  00:09:26.390
on the contents of the tab size
254

254

00:09:26.390  -->  00:09:29.150
which you can see is currently set to four in IntelliJ.
255

255

00:09:29.150  -->  00:09:30.500
So in general it's a good idea not
256

256

00:09:30.500  -->  00:09:33.940
to use any special characters in a raw text file
257

257

00:09:33.940  -->  00:09:35.760
and a raw text file is a Java source file
258

258

00:09:35.760  -->  00:09:37.870
that we've been using so far in the course.
259

259

00:09:37.870  -->  00:09:40.180
The general recommendation is certainly to use spaces
260

260

00:09:40.180  -->  00:09:41.360
instead of tab characters
261

261

00:09:41.360  -->  00:09:43.170
and that's why this is the default option
262

262

00:09:43.170  -->  00:09:44.480
that's turned off.
263

263

00:09:44.480  -->  00:09:45.870
So that's what that option does
264

264

00:09:45.870  -->  00:09:48.130
and as I mentioned, tab size indicates the number
265

265

00:09:48.130  -->  00:09:50.620
of spaces that are gonna be used when you press tab
266

266

00:09:50.620  -->  00:09:52.030
but also have the indent
267

267

00:09:52.030  -->  00:09:54.350
and that's the automatic indent that IntelliJ's doing
268

268

00:09:54.350  -->  00:09:55.990
for us which you've seen in this video.
269

269

00:09:55.990  -->  00:09:57.728
That's set to four as well
270

270

00:09:57.728  -->  00:09:58.561
and that can be changed.
271

271

00:09:58.561  -->  00:09:59.970
Now I'm not gonna go over all these other settings,
272

272

00:09:59.970  -->  00:10:01.920
other than to say that IntelliJ allows you
273

273

00:10:01.920  -->  00:10:03.870
to do a lot of customization here
274

274

00:10:03.870  -->  00:10:06.120
to work with different styles of code conventions.
275

275

00:10:06.120  -->  00:10:08.030
So if you end up working for an organisation
276

276

00:10:08.030  -->  00:10:09.880
that needs and has a different policy,
277

277

00:10:09.880  -->  00:10:12.230
then you can actually change the sizes here
278

278

00:10:12.230  -->  00:10:14.430
and basically work within their conventions.
279

279

00:10:15.620  -->  00:10:17.000
All right, so I'm gonna close that down for now.
280

280

00:10:17.000  -->  00:10:20.133
And we'll go back and remove the indentation again.
281

281

00:10:20.133  -->  00:10:20.966
Cause I wanna show you another way
282

282

00:10:20.966  -->  00:10:22.340
of just clearing up code if you get into
283

283

00:10:22.340  -->  00:10:24.760
a situation where your code's messy.
284

284

00:10:24.760  -->  00:10:26.840
I'm just gonna kill some of these spaces.
285

285

00:10:26.840  -->  00:10:27.990
I'm gonna do the same thing I did before.
286

286

00:10:27.990  -->  00:10:29.520
Select all and Shift + Tab
287

287

00:10:29.520  -->  00:10:31.570
and remove the indentation again like so.
288

288

00:10:33.100  -->  00:10:34.070
Again, I'll just run it again
289

289

00:10:34.070  -->  00:10:36.810
and it should work as it worked before.
290

290

00:10:36.810  -->  00:10:38.270
No dramas there, but another way,
291

291

00:10:38.270  -->  00:10:40.420
instead of undoing which may not be
292

292

00:10:40.420  -->  00:10:41.550
an option for you,
293

293

00:10:41.550  -->  00:10:43.850
you can reformat your code at any time
294

294

00:10:43.850  -->  00:10:45.670
taking into account any changes you've made
295

295

00:10:45.670  -->  00:10:48.150
in the editor settings that I've just shown you,
296

296

00:10:48.150  -->  00:10:52.096
by coming up to code and clicking on reformat code.
297

297

00:10:52.096  -->  00:10:53.039
And there's a shortcut there
298

298

00:10:53.039  -->  00:10:55.320
you can see it's Control + Alt + L on a Windows machine,
299

299

00:10:55.320  -->  00:10:57.120
so you can just go into the relevant menu
300

300

00:10:57.120  -->  00:10:59.230
for your other operating system if you're on Mac
301

301

00:10:59.230  -->  00:11:01.080
or Linux and see what the shortcut is for you.
302

302

00:11:01.080  -->  00:11:02.390
If you click on that,
303

303

00:11:02.390  -->  00:11:04.770
that will then reformat your code based on the settings.
304

304

00:11:04.770  -->  00:11:06.920
So it's taking into account the indentation settings
305

305

00:11:06.920  -->  00:11:09.200
that were in that pane for you automatically.
306

306

00:11:09.200  -->  00:11:10.033
That's pretty neat.
307

307

00:11:10.033  -->  00:11:11.160
Anytime you get into trouble
308

308

00:11:11.160  -->  00:11:13.360
or your code's starting to look messy
309

309

00:11:13.360  -->  00:11:15.273
that's a good way to quickly clean it.
310

310

00:11:16.240  -->  00:11:18.250
All right, so one last thing that I want to show you now
311

311

00:11:18.250  -->  00:11:19.790
before we finish the video.
312

312

00:11:19.790  -->  00:11:22.570
IntelliJ helpfully shows you code blocks
313

313

00:11:22.570  -->  00:11:23.800
the start and where they end.
314

314

00:11:23.800  -->  00:11:26.350
And that can be useful if you miss a right curly brace.
315

315

00:11:26.350  -->  00:11:28.920
So if you look carefully you can see there's a line
316

316

00:11:28.920  -->  00:11:33.360
to the left of the second keyword public on line three.
317

317

00:11:33.360  -->  00:11:34.270
There's a line going down
318

318

00:11:34.270  -->  00:11:37.020
to the right curly brace on line nine.
319

319

00:11:37.020  -->  00:11:39.220
And what that's telling you is that the left curly brace
320

320

00:11:39.220  -->  00:11:41.080
on line three,
321

321

00:11:41.080  -->  00:11:43.100
that the start of the code block ends,
322

322

00:11:43.100  -->  00:11:46.700
or is part of the closing code block on line nine.
323

323

00:11:46.700  -->  00:11:49.030
So basically at a glance it's confirming which is which
324

324

00:11:49.030  -->  00:11:51.300
and you can see that there's also another one
325

325

00:11:51.300  -->  00:11:54.510
showing for line six through line eight.
326

326

00:11:54.510  -->  00:11:55.440
So that's the other code block.
327

327

00:11:55.440  -->  00:11:56.830
It's not showing the very first one,
328

328

00:11:56.830  -->  00:11:59.450
the outer most code block on line on to eleven
329

329

00:11:59.450  -->  00:12:01.750
because there's really no need to do that
330

330

00:12:01.750  -->  00:12:04.140
because that's the outer most code block.
331

331

00:12:04.140  -->  00:12:05.640
So this is kinda useful if you've missed
332

332

00:12:05.640  -->  00:12:07.280
a right curly brace somewhere
333

333

00:12:07.280  -->  00:12:08.480
you can just check those lines
334

334

00:12:08.480  -->  00:12:10.970
and see whether what you thinks is actually lined up
335

335

00:12:10.970  -->  00:12:13.740
with the right thing and a combination of you doing
336

336

00:12:13.740  -->  00:12:16.930
that and actually looking at reformatting your code can be a
337

337

00:12:16.930  -->  00:12:20.050
good way to actually fix general bugs when you're first
338

338

00:12:20.050  -->  00:12:21.410
starting out learning to programme.
339

339

00:12:21.410  -->  00:12:22.700
All right, so this video's gone on well
340

340

00:12:22.700  -->  00:12:23.533
and truly long enough,
341

341

00:12:23.533  -->  00:12:24.730
so I'm gonna end the video here
342

342

00:12:24.730  -->  00:12:26.130
and see you on the next one.
