WEBVTT
1
1

00:00:05.400  -->  00:00:09.240
In this video we're gonna talk about a
fundamental object orientated programming
2

2

00:00:09.240  -->  00:00:11.430
concept, which is encapsulation.
3

3

00:00:11.430  -->  00:00:14.900
Now, encapsulation is the mechanism
that allows you to restrict
4

4

00:00:14.900  -->  00:00:19.390
access to certain components in
the objects that you are creating.
5

5

00:00:19.390  -->  00:00:23.530
So, you're able to protect the members
of a class from external access
6

6

00:00:23.530  -->  00:00:27.310
in order to really guard
against unauthorized access.
7

7

00:00:27.310  -->  00:00:29.140
Now, we're not talking security here.
8

8

00:00:29.140  -->  00:00:34.100
But we're stopping outsiders,
in other words classes or code outside
9

9

00:00:34.100  -->  00:00:38.540
of the class that you're working on, from
accessing the inner workings of a class.
10

10

00:00:38.540  -->  00:00:43.980
So, it can be very useful to hide
that inner working from another class
11

11

00:00:43.980  -->  00:00:46.360
to sort of give you more control and
12

12

00:00:46.360  -->  00:00:50.540
to be able to enable you to change
things without breaking code elsewhere.
13

13

00:00:50.540  -->  00:00:53.390
So let's go through
an example of encapsulation.
14

14

00:00:53.390  -->  00:00:57.140
So what we're gonna do first is
we're gonna create a class that
15

15

00:00:57.140  -->  00:01:01.770
doesn't use encapsulation to show
why encapsulation is a good thing.
16

16

00:01:01.770  -->  00:01:04.070
So we're gonna start off with
the class that doesn't use it,
17

17

00:01:04.070  -->  00:01:07.900
and then we're gonna create
an enhanced class that does use it.
18

18

00:01:07.900  -->  00:01:10.190
So let's go and create our class.
19

19

00:01:10.190  -->  00:01:12.700
And we're going to create
a class called player.
20

20

00:01:12.700  -->  00:01:18.270
And we're going to model a player class,
as in a player in a computer game.
21

21

00:01:18.270  -->  00:01:21.090
So we're gonna call this class player.
22

22

00:01:21.090  -->  00:01:23.420
It's a standard public class.
23

23

00:01:24.680  -->  00:01:30.350
Let's create a couple of variables,
24

24

00:01:30.350  -->  00:01:37.120
public string name, public string health.
25

25

00:01:37.120  -->  00:01:38.920
So these three fields.
26

26

00:01:38.920  -->  00:01:41.310
Public string weapon.
27

27

00:01:41.310  -->  00:01:44.660
We'll just say that in this
game these are the three fields
28

28

00:01:44.660  -->  00:01:45.970
that relate to the player's name,
29

29

00:01:45.970  -->  00:01:50.940
the player's health, any hit points,
in other words, and player weapon.
30

30

00:01:50.940  -->  00:01:53.580
Now, you may have noticed,
you may not have realized,
31

31

00:01:53.580  -->  00:01:55.870
I've actually used a public scope there.
32

32

00:01:55.870  -->  00:01:59.090
And we haven't gone into
great detail about scope, but
33

33

00:01:59.090  -->  00:02:01.130
we have discussed it before.
34

34

00:02:01.130  -->  00:02:03.300
But we normally use private.
35

35

00:02:03.300  -->  00:02:07.340
But we're using public for a reason there,
and that'll all become clear shortly.
36

36

00:02:07.340  -->  00:02:09.490
Now, we're not gonna create a constructor,
but
37

37

00:02:09.490  -->  00:02:12.340
what we are going to do is we're
going to create two other methods.
38

38

00:02:12.340  -->  00:02:13.790
The first one's called lose health.
39

39

00:02:16.170  -->  00:02:19.550
And this would be called if
the player lost some health for
40

40

00:02:19.550  -->  00:02:23.580
some reason and then fell off a cliff or
they got damaged in some way.
41

41

00:02:23.580  -->  00:02:26.750
So we're gonna parse
a parameter called damage.
42

42

00:02:26.750  -->  00:02:32.380
And we're gonna very
simply put this.health
43

43

00:02:32.380  -->  00:02:36.850
equals this.health minus damage.
44

44

00:02:36.850  -->  00:02:39.440
Then we'll just do a simple bit of output.
45

45

00:02:39.440  -->  00:02:41.760
And I accidentally made that a string,
that should have been an image.
46

46

00:02:41.760  -->  00:02:42.570
So I'll just fix that.
47

47

00:02:44.590  -->  00:02:51.770
Actually, what I'll do there
is I'll put if damage, sorry,
48

48

00:02:51.770  -->  00:02:56.790
if this.health is less than equal to zero,
49

49

00:02:56.790  -->  00:03:02.790
then we'll put something
like player knocked out.
50

50

00:03:02.790  -->  00:03:06.720
And then here, which we're not
gonna do now, I would put, and
51

51

00:03:06.720  -->  00:03:10.150
then reduce number of lives remaining for
the player.
52

52

00:03:14.220  -->  00:03:15.210
That's what we'd normally do.
53

53

00:03:15.210  -->  00:03:16.030
So that's one method.
54

54

00:03:16.030  -->  00:03:19.870
And we're gonna create another one which
is just going to return the amount of
55

55

00:03:19.870  -->  00:03:22.700
health that is available or
that is remaining.
56

56

00:03:22.700  -->  00:03:31.070
We'll call that public
int health remaining.
57

57

00:03:31.070  -->  00:03:34.750
And that's purely gonna return
our variable, this.health,
58

58

00:03:34.750  -->  00:03:36.680
which is our field in this class.
59

59

00:03:36.680  -->  00:03:38.220
Pretty simple class, as you can see there.
60

60

00:03:38.220  -->  00:03:39.180
There's a name.
61

61

00:03:39.180  -->  00:03:42.070
There's the health, and
there's a weapon that we can assign.
62

62

00:03:42.070  -->  00:03:43.580
Got a simple method there,
63

63

00:03:43.580  -->  00:03:47.300
lose health, which would pass
the amount of damage to it.
64

64

00:03:47.300  -->  00:03:51.130
Then if the total amount of health
falls equal to or below zero,
65

65

00:03:51.130  -->  00:03:55.620
we would just kind of print out a message
to say the player's knocked out.
66

66

00:03:55.620  -->  00:03:59.010
And that's where we would normally put
the code to reduce the number of lives and
67

67

00:03:59.010  -->  00:04:00.530
to check whether the game's over.
68

68

00:04:00.530  -->  00:04:02.720
So let's go back to our main class.
69

69

00:04:05.200  -->  00:04:07.920
And we'll access or create a new class.
70

70

00:04:07.920  -->  00:04:11.900
So we're gonna start off by putting,
you've seen this before,
71

71

00:04:11.900  -->  00:04:14.020
player player equals new player.
72

72

00:04:17.660  -->  00:04:19.780
We haven't created
the constructor in here.
73

73

00:04:19.780  -->  00:04:23.480
And because we haven't created
a constructor, if you recall a default
74

74

00:04:23.480  -->  00:04:27.830
constructor with no parameters had
been passed, has been created for us.
75

75

00:04:27.830  -->  00:04:33.130
So we now need to now manually set those
fields, set the values for those fields.
76

76

00:04:33.130  -->  00:04:39.860
So let's try player.name equals Tim.
77

77

00:04:39.860  -->  00:04:43.800
Player.health, let's say it's 20.
78

78

00:04:43.800  -->  00:04:46.930
Player dot weapon, let's say it's a sword.
79

79

00:04:46.930  -->  00:04:49.440
So that's a way to
initialize those fields.
80

80

00:04:49.440  -->  00:04:52.290
And of course, as you can see even though
we're not in that class we're able to
81

81

00:04:52.290  -->  00:04:55.100
access those fields directly.
82

82

00:04:55.100  -->  00:04:58.930
That's because we've set the scope
here and the public, or as public,
83

83

00:04:58.930  -->  00:05:00.520
for those fields.
84

84

00:05:00.520  -->  00:05:03.570
If we hadn't set those to private
we wouldn't be able to do that.
85

85

00:05:03.570  -->  00:05:09.350
And just to test it's working, let's put
something like int damage equals 10.
86

86

00:05:09.350  -->  00:05:13.160
Player.losehealth damage.
87

87

00:05:13.160  -->  00:05:20.590
And if we print that out we'll
put remaining health equals,
88

88

00:05:20.590  -->  00:05:26.150
and it should be player.healthRemaining.
89

89

00:05:26.150  -->  00:05:29.710
So looking at that code, if we'd
started off with a player health of 20,
90

90

00:05:29.710  -->  00:05:30.910
we've got 10 damage.
91

91

00:05:31.960  -->  00:05:35.980
We've called the player.loseHealth method
which actually reduces the damage.
92

92

00:05:35.980  -->  00:05:38.420
We should get some output here to
say the remaining health is 10.
93

93

00:05:38.420  -->  00:05:39.300
So let's run that.
94

94

00:05:44.100  -->  00:05:46.360
And you can see remaining health is 10.
95

95

00:05:46.360  -->  00:05:48.700
So let's just make a bit more space here.
96

96

00:05:48.700  -->  00:05:51.460
And, if we do another call,
we'll put damage equals 11.
97

97

00:05:53.560  -->  00:05:58.540
And if we just copy these here,
paste those in.
98

98

00:05:58.540  -->  00:06:06.600
And if you run this remaining health was
10, then that was for the first call.
99

99

00:06:06.600  -->  00:06:08.800
The second call,
the player got knocked out and
100

100

00:06:08.800  -->  00:06:11.880
that was the code that was called
from within the player class, and
101

101

00:06:11.880  -->  00:06:14.090
remaining health is now
equal to negative one.
102

102

00:06:14.090  -->  00:06:17.620
It was 20 take 21 is minus one.
103

103

00:06:17.620  -->  00:06:19.280
So that's obviously working, but
104

104

00:06:19.280  -->  00:06:22.660
I'm wondering whether you can
see a possible problem here.
105

105

00:06:22.660  -->  00:06:27.330
We've created a method in here,
lose health, which is our
106

106

00:06:27.330  -->  00:06:30.850
code that is going to manage the whole
process of the player losing health.
107

107

00:06:30.850  -->  00:06:33.250
So this is where we put
in all our formulas for
108

108

00:06:33.250  -->  00:06:36.680
making sure that we're
calculating damage correctly.
109

109

00:06:36.680  -->  00:06:39.720
And you can see here there's a special
message that comes out if the player's
110

110

00:06:39.720  -->  00:06:40.880
knocked out.
111

111

00:06:40.880  -->  00:06:43.700
We might update something on
the screen in a complex application.
112

112

00:06:43.700  -->  00:06:47.100
We'd want all our functionality
to lose health to be called from
113

113

00:06:47.100  -->  00:06:48.710
that component in there.
114

114

00:06:48.710  -->  00:06:52.680
But the problem then becomes, first of
all, we've got the ability to change
115

115

00:06:52.680  -->  00:06:54.990
the player health, but
we could actually change the rules here.
116

116

00:06:54.990  -->  00:07:00.000
So we could put, just before the call to
lose damage, we can put something like
117

117

00:07:00.000  -->  00:07:05.170
player.health equals 100,
or say, 200 there.
118

118

00:07:05.170  -->  00:07:07.710
So we're overriding that.
119

119

00:07:08.760  -->  00:07:13.410
So we're taking the control
out of the player class.
120

120

00:07:13.410  -->  00:07:16.320
You can see there that it was meant
to have been cooked to negative one.
121

121

00:07:16.320  -->  00:07:20.550
But we've changed it, and consequently,
the player's got 189 health.
122

122

00:07:20.550  -->  00:07:26.240
So by being able to access those fields
directly you're really potentially
123

123

00:07:26.240  -->  00:07:30.630
opening up your application to be accessed
in ways that you didn't want it to do.
124

124

00:07:30.630  -->  00:07:33.990
Because you may not ever want the player
to be able to change the health like that.
125

125

00:07:33.990  -->  00:07:36.120
You might want to control that process.
126

126

00:07:36.120  -->  00:07:38.690
And a good way of controlling the amount
of health that we assign is with
127

127

00:07:38.690  -->  00:07:39.960
a constructor, for example.
128

128

00:07:39.960  -->  00:07:41.740
That's something that
was seen in the past.
129

129

00:07:41.740  -->  00:07:44.800
So that's one potential problem,
is the class that's
130

130

00:07:44.800  -->  00:07:50.070
calling the player class is able
to change those fields directly.
131

131

00:07:50.070  -->  00:07:51.110
There's also another issue.
132

132

00:07:51.110  -->  00:07:53.120
So if we go back to our
player class again.
133

133

00:07:53.120  -->  00:07:57.310
Now let's just say that we've decided
that we want to change the name here,
134

134

00:07:57.310  -->  00:07:57.960
the internal name.
135

135

00:07:57.960  -->  00:08:00.100
We think the name doesn't
make a lot of sense to us,
136

136

00:08:00.100  -->  00:08:01.770
we want to be a bit more clearer.
137

137

00:08:01.770  -->  00:08:03.500
We're gonna change the name to fullName,
138

138

00:08:03.500  -->  00:08:05.490
that's gonna be the name that we're
gonna use from this point on.
139

139

00:08:05.490  -->  00:08:10.030
So this is an internal change, and
in theory it shouldn't really affect any
140

140

00:08:10.030  -->  00:08:15.150
other class because it's just internal
field name that we've defined that
141

141

00:08:15.150  -->  00:08:18.200
we think is a good name for
this field in this class.
142

142

00:08:18.200  -->  00:08:21.460
But if we go back to our other class now,
suddenly we've got an error.
143

143

00:08:21.460  -->  00:08:25.250
And it's quite rightly saying that
it can't find that field anymore.
144

144

00:08:25.250  -->  00:08:28.310
Because we're trying to access these
fields directly, we've got an error here.
145

145

00:08:28.310  -->  00:08:29.670
Now, it's not the end of the world.
146

146

00:08:29.670  -->  00:08:32.770
But what it means is that anytime
that we change a function or
147

147

00:08:32.770  -->  00:08:37.040
something in here, change our name I
should say, field contains the field name.
148

148

00:08:37.040  -->  00:08:38.790
Or something along those lines.
149

149

00:08:38.790  -->  00:08:41.000
We have to also make the change here.
150

150

00:08:41.000  -->  00:08:44.010
And in a small application like this,
of course, it's not gonna be a problem.
151

151

00:08:44.010  -->  00:08:45.400
It's quite a quick change.
152

152

00:08:45.400  -->  00:08:49.660
But when you're talking about big
applications it does become a problem.
153

153

00:08:49.660  -->  00:08:54.520
Because the first thing here looking
at the main.Java thinking, okay,
154

154

00:08:54.520  -->  00:08:58.790
it's name has changed, you have to
figure out what's the new name.
155

155

00:08:58.790  -->  00:09:02.150
So you need to go back into the code and
have a look in define and
156

156

00:09:02.150  -->  00:09:03.770
see what the new name is.
157

157

00:09:03.770  -->  00:09:05.760
So it's not really a problem as
much when it's your code, but
158

158

00:09:05.760  -->  00:09:09.250
when you start using other
commercial code it's very normal for
159

159

00:09:09.250  -->  00:09:15.150
you to get given a library, a set of Java
classes and you're meant to use them.
160

160

00:09:15.150  -->  00:09:19.230
So it becomes a case of you with
this sort of design having to
161

161

00:09:19.230  -->  00:09:22.460
figure out how that class works which
may not be something you want to do.
162

162

00:09:22.460  -->  00:09:25.710
The third issue with this approach is,
we might actually have forgotten
163

163

00:09:25.710  -->  00:09:29.770
to do this because we've actually
put these names in manually,
164

164

00:09:29.770  -->  00:09:33.050
we might actually forget to actually
initialize this all together.
165

165

00:09:33.050  -->  00:09:35.820
And consequentially,
when the class is called for
166

166

00:09:35.820  -->  00:09:37.190
the first time it hasn't got any health.
167

167

00:09:38.260  -->  00:09:41.280
So, in other words,
we're not guaranteeing and ensuring
168

168

00:09:41.280  -->  00:09:45.850
that to access the player class you can
only access it when the data is valid.
169

169

00:09:45.850  -->  00:09:49.250
Now we can do that with a constructor,
we can actually make sure that the data is
170

170

00:09:49.250  -->  00:09:51.760
valid and
that you've actually got a valid class.
171

171

00:09:51.760  -->  00:09:56.840
But when you're giving control and getting
people to manually get access to fields
172

172

00:09:56.840  -->  00:10:00.270
there's no real way of us guaranteeing
that the player health is set.
173

173

00:10:00.270  -->  00:10:03.970
And the other thing is, of course,
we might want to have a method
174

174

00:10:03.970  -->  00:10:08.960
that is in our player class to define
the maximum amount of health for a player.
175

175

00:10:08.960  -->  00:10:10.400
So we might want to have some validation.
176

176

00:10:10.400  -->  00:10:14.540
So we might want to go through a method,
for example, called now add health
177

177

00:10:14.540  -->  00:10:17.950
to make sure that they haven't selected
a health that's greater than 100,
178

178

00:10:17.950  -->  00:10:20.700
or some other form of validation.
179

179

00:10:20.700  -->  00:10:24.540
And by allowing access at this level for
people to
180

180

00:10:24.540  -->  00:10:29.140
actually just type in that directly,
we can't actually call that validation.
181

181

00:10:29.140  -->  00:10:32.430
So this what encapsulation
actually does for us.
182

182

00:10:32.430  -->  00:10:34.650
This is why we don't
want to code like this.
183

183

00:10:34.650  -->  00:10:38.740
We want the ability to be able
to override these things so that
184

184

00:10:38.740  -->  00:10:42.600
we can make sure that the class that we're
giving for access, that we're using for
185

185

00:10:42.600  -->  00:10:47.390
access, is actually valid and that we've
got more control over these things.
186

186

00:10:47.390  -->  00:10:50.880
So now you've seen of the bad things,
the bad ways of doing it.
187

187

00:10:50.880  -->  00:10:53.940
Let's actually comment this code out, and
what we're going to do is we're going to
188

188

00:10:53.940  -->  00:10:57.990
create a class that actually has
got proper encapsulation and
189

189

00:10:57.990  -->  00:10:59.470
show you the right way of doing it.
190

190

00:10:59.470  -->  00:11:01.050
So we're going to create a new class.
191

191

00:11:05.630  -->  00:11:12.330
And I'm going to need to
call it enhanced player.
192

192

00:11:12.330  -->  00:11:17.440
So, the difference is, here we're
gonna create our fields as private.
193

193

00:11:17.440  -->  00:11:22.130
A private string name,
194

194

00:11:22.130  -->  00:11:26.350
private int health,
195

195

00:11:26.350  -->  00:11:31.280
private string weapon.
196

196

00:11:32.480  -->  00:11:33.910
Next we're gonna create our constructor.
197

197

00:11:35.820  -->  00:11:39.440
And we're gonna create a constructor
with three perimeters.
198

198

00:11:39.440  -->  00:11:40.900
Click on OK.
And
199

199

00:11:40.900  -->  00:11:45.650
what we're gonna do is we're gonna define
a default value of 100 for our health.
200

200

00:11:45.650  -->  00:11:48.800
And what we're going to do
here in our constructor,
201

201

00:11:48.800  -->  00:11:50.600
we're gonna put a bit of code in.
202

202

00:11:50.600  -->  00:11:53.730
We're going to put if health,
203

203

00:11:53.730  -->  00:11:59.170
this is the parameter health,
is greater than zero,
204

204

00:11:59.170  -->  00:12:04.360
and health is less than or
equal to 100, then and
205

205

00:12:04.360  -->  00:12:10.910
only then are we going to actually
assign the value to our field.
206

206

00:12:10.910  -->  00:12:14.320
So we've got some basic validation in
there to ensure that the value of health
207

207

00:12:14.320  -->  00:12:17.540
cannot, actually, I put 200 there,
that should've been 100.
208

208

00:12:19.580  -->  00:12:23.190
So, in other words,
a value of between 1 and 100 inclusive,
209

209

00:12:23.190  -->  00:12:26.160
is the only values that
we're accepting for health.
210

210

00:12:27.260  -->  00:12:30.530
So you can see that now we've
created just one constructor.
211

211

00:12:30.530  -->  00:12:34.740
So, in other words, we're guaranteeing
now that the name, the health, and
212

212

00:12:34.740  -->  00:12:38.420
the weapon are initialized
when the class is created.
213

213

00:12:38.420  -->  00:12:41.360
Now, we could put some more validation in
there to check the length of the name for
214

214

00:12:41.360  -->  00:12:43.900
argument's sake to make sure
there's some characters in there,
215

215

00:12:43.900  -->  00:12:46.680
that it wasn't null for argument's sake,
and likewise for the weapon.
216

216

00:12:46.680  -->  00:12:49.320
So in other words, we could do some other
validation to make sure that it's valid.
217

217

00:12:49.320  -->  00:12:51.120
And we can still create our lose health.
218

218

00:12:51.120  -->  00:12:53.770
That can still be the same
method it was before.
219

219

00:12:53.770  -->  00:12:56.010
So, public, and
the actual fact is to show that.
220

220

00:12:56.010  -->  00:12:59.300
We'll just create, or just copy rather,
the exact same method.
221

221

00:13:02.920  -->  00:13:04.520
Exactly the same as it was before.
222

222

00:13:04.520  -->  00:13:08.060
We can also create a getter.
223

223

00:13:08.060  -->  00:13:10.040
Let's just create a getter for our health.
224

224

00:13:11.920  -->  00:13:13.830
Very similar to before, but
we're just using a getter this time.
225

225

00:13:13.830  -->  00:13:18.140
So you can see already
we're restricting access
226

226

00:13:18.140  -->  00:13:22.430
because now if we go back to here and
we do enhance,
227

227

00:13:22.430  -->  00:13:27.370
player, we'll call up player again,
player equals new.
228

228

00:13:27.370  -->  00:13:28.940
Enhance player.
229

229

00:13:28.940  -->  00:13:32.220
Well, now that we've got this we
have to define some parameters.
230

230

00:13:32.220  -->  00:13:39.040
We're going to put something like Tim,
50, sword.
231

231

00:13:39.040  -->  00:13:44.200
And just to make sure that's
working we're going to do
232

232

00:13:44.200  -->  00:13:49.690
an initial health is player dot,
233

233

00:13:49.690  -->  00:13:54.200
and notice we cannot access
the field names directly,
234

234

00:13:54.200  -->  00:13:58.140
the fields directly, because we've
assigned them as a scope of private.
235

235

00:13:58.140  -->  00:13:59.230
So we need to use the getter.
236

236

00:13:59.230  -->  00:14:02.900
So the getter isthe only way that's gonna
give us that mechanism to actually give
237

237

00:14:02.900  -->  00:14:04.330
us direct access to the health.
238

238

00:14:04.330  -->  00:14:07.700
So obviously if we run that now
we should get the value of 50.
239

239

00:14:07.700  -->  00:14:13.860
Looking again at the code, we started with
a default of 100 so when the field health
240

240

00:14:13.860  -->  00:14:18.940
is created for this class, when an object
is created, the default value is 100.
241

241

00:14:18.940  -->  00:14:23.970
And if and only if the health has
passed with a value between 1 and
242

242

00:14:23.970  -->  00:14:25.860
100 inclusive, we update that.
243

243

00:14:25.860  -->  00:14:30.390
So, first time we run this we
should get the value of 50 because
244

244

00:14:30.390  -->  00:14:31.880
it is a valid value in that range.
245

245

00:14:33.120  -->  00:14:33.920
Initial health is 50.
246

246

00:14:33.920  -->  00:14:40.420
But if we try to make something like 200,
we should actually get 100.
247

247

00:14:40.420  -->  00:14:44.740
We're getting a 100, and
that's because this validation has failed.
248

248

00:14:44.740  -->  00:14:46.000
Because health was,
249

249

00:14:46.000  -->  00:14:49.640
health parameter was outside of
the values that we've assigned there.
250

250

00:14:49.640  -->  00:14:54.040
In other words, it was greater than
zero but it was also greater than 100 so
251

251

00:14:54.040  -->  00:14:55.540
that's why that condition failed.
252

252

00:14:55.540  -->  00:14:58.610
So you can see straightaway by doing
it this way, we've got more control.
253

253

00:14:58.610  -->  00:14:59.920
We've got some validation,
254

254

00:14:59.920  -->  00:15:03.240
which we weren't able to do if
we weren't using encapsulation.
255

255

00:15:03.240  -->  00:15:05.330
And just to be clear,
this is encapsulation.
256

256

00:15:05.330  -->  00:15:09.090
This is what we're doing is,
by making our fields private,
257

257

00:15:09.090  -->  00:15:13.670
we're making sure that our class is
not accessible, or the fields within
258

258

00:15:13.670  -->  00:15:17.590
the class aren't accessible to
any classes that are outside.
259

259

00:15:17.590  -->  00:15:21.620
So lets just say I wanted to change
now the internal name for health.
260

260

00:15:21.620  -->  00:15:24.560
I could do that, I could click on that and
actually what I can do is show
261

261

00:15:24.560  -->  00:15:28.420
you a feature of intelligi that's really
cool and enables you to do a quick rename.
262

262

00:15:28.420  -->  00:15:30.700
So you can actually click
on what you want to rename.
263

263

00:15:30.700  -->  00:15:34.160
Right click, go to refactor,
then choose rename.
264

264

00:15:35.270  -->  00:15:39.230
And now if I go back and change this,
the part that's in red, I change that to
265

265

00:15:39.230  -->  00:15:43.030
hit points, notice how everything's
changing on the screen as I type.
266

266

00:15:45.090  -->  00:15:47.410
I'm gonna press Enter.
267

267

00:15:47.410  -->  00:15:49.220
Pretty cool feature.
268

268

00:15:49.220  -->  00:15:52.250
And it's actually saying get a method
found for the field hit points,
269

269

00:15:52.250  -->  00:15:53.450
rename the getter as well.
270

270

00:15:53.450  -->  00:15:55.250
I'm gonna actually put no there.
271

271

00:15:55.250  -->  00:15:56.270
And I'll explain why shortly.
272

272

00:15:56.270  -->  00:15:58.110
So we click on no.
273

273

00:15:58.110  -->  00:16:02.240
And the other thing that actually comes
up and says, oh, I've noticed you're now
274

274

00:16:02.240  -->  00:16:05.430
using the word health,
do you want to change that to hit points?
275

275

00:16:05.430  -->  00:16:08.820
If I wanted to change it I could just
click on that and click on okay, and that
276

276

00:16:08.820  -->  00:16:11.740
would actually change these references
that are showing on the screen there.
277

277

00:16:11.740  -->  00:16:13.840
But I'm not going to do that
just to keep it consistent and
278

278

00:16:13.840  -->  00:16:15.070
just to explain more shortly.
279

279

00:16:15.070  -->  00:16:16.150
Click on OK.
280

280

00:16:16.150  -->  00:16:20.620
The point is I've now changed
the field name which was originally
281

281

00:16:20.620  -->  00:16:21.870
called health to hit points.
282

282

00:16:21.870  -->  00:16:25.960
So internally we're now using the name
hit points instead of health.
283

283

00:16:25.960  -->  00:16:30.260
But if we go back to our main class, we
notice now we can still run this code and
284

284

00:16:30.260  -->  00:16:31.560
nothing's changed.
285

285

00:16:34.130  -->  00:16:39.030
Still it comes up with 100, and the reason
is we're using the dot get health method.
286

286

00:16:39.030  -->  00:16:43.370
And we have got no idea what the internal
naming was for that particular field.
287

287

00:16:43.370  -->  00:16:46.720
We don't even know that,
we don't know anything about that and
288

288

00:16:46.720  -->  00:16:48.440
we don't need to know anything about it.
289

289

00:16:48.440  -->  00:16:51.900
We're just calling this get health
method and it's doing the rest for us.
290

290

00:16:51.900  -->  00:16:55.870
So this is another cool feature
encapsulation, is we can make all these
291

291

00:16:55.870  -->  00:17:00.350
changes to this enhanced player class,
we can create private fields and
292

292

00:17:00.350  -->  00:17:05.740
private functions that we don't want to
be exposed to any other class, and we
293

293

00:17:05.740  -->  00:17:11.010
can change those names at any time in this
code without affecting any other code.
294

294

00:17:11.010  -->  00:17:14.290
That's really one of the huge
benefits of encapsulation,
295

295

00:17:14.290  -->  00:17:16.700
is that you're not actually
affecting any other code.
296

296

00:17:16.700  -->  00:17:19.200
It's sort of like a black
box in many ways.
297

297

00:17:19.200  -->  00:17:24.250
What we're saying here is the only
way to create an enhanced player
298

298

00:17:24.250  -->  00:17:27.420
object is to call the constructor
with these parameters.
299

299

00:17:27.420  -->  00:17:28.950
And we've also got some
validation in there.
300

300

00:17:28.950  -->  00:17:32.800
But the other thing is we can't also
fake it now with the lose health.
301

301

00:17:32.800  -->  00:17:37.240
Cuz you've got no mechanism to actually
increase the health by any other means.
302

302

00:17:37.240  -->  00:17:40.930
We can pass the initial amount of
health in the constructor, but
303

303

00:17:40.930  -->  00:17:45.100
we can't then fudge it like we did in the
other class when we called that, when we
304

304

00:17:45.100  -->  00:17:49.060
set the value and then we actually changed
the value midpoint when we shouldn't have.
305

305

00:17:49.060  -->  00:17:53.510
So we're giving all the control to
the enhanced player class in this case.
306

306

00:17:53.510  -->  00:17:56.760
And in the case of losing health,
we've insured that no matter what,
307

307

00:17:56.760  -->  00:18:01.150
the only way with this class to
reduce the amount of health for
308

308

00:18:01.150  -->  00:18:02.780
a player is to use this function.
309

309

00:18:02.780  -->  00:18:04.370
And there's no other way for
310

310

00:18:04.370  -->  00:18:08.590
a class that's outside of this
enhanced player class to access that.
311

311

00:18:08.590  -->  00:18:11.610
So this is why we want you to
be dealing with encapsulation.
312

312

00:18:11.610  -->  00:18:15.630
We really want to keep things confined and
313

313

00:18:15.630  -->  00:18:18.330
sort of reduce access, or
protect is a better word.
314

314

00:18:18.330  -->  00:18:22.460
We protect the members of the class,
and some methods, from external access.
315

315

00:18:22.460  -->  00:18:26.050
So we're doing that to prevent
unauthorized set up or access.
316

316

00:18:26.050  -->  00:18:30.190
In this case, as I said, we're using it
to make sure that the enhanced player,
317

317

00:18:30.190  -->  00:18:33.300
when we create a new object from
the class, that it is valid.
318

318

00:18:33.300  -->  00:18:36.480
It's got the right amount of
parameters and they are initialized.
319

319

00:18:36.480  -->  00:18:40.160
But likewise, we're also making sure
that there's no unauthorized access to
320

320

00:18:40.160  -->  00:18:41.330
the fields directly.
321

321

00:18:41.330  -->  00:18:43.460
So that's why you want to
always use encapsulation.
322

322

00:18:43.460  -->  00:18:45.670
It's something that you
should really get used to.
323

323

00:18:45.670  -->  00:18:49.370
You definitely don't want to be creating
code like this when you're creating
324

324

00:18:49.370  -->  00:18:50.310
public fields.
325

325

00:18:50.310  -->  00:18:52.370
It's very rare that you
would need to do that.
326

326

00:18:52.370  -->  00:18:54.450
There are situations
where you will want to,
327

327

00:18:54.450  -->  00:18:56.660
but generally speaking you
don't want to do that.
328

328

00:18:56.660  -->  00:19:01.180
You don't want to give that, expose
that access to other classes because,
329

329

00:19:01.180  -->  00:19:04.680
as you saw, it's more work to make
those changes when you create or
330

330

00:19:04.680  -->  00:19:08.350
when you change a field name, or something
of that nature, there's just more work for
331

331

00:19:08.350  -->  00:19:10.980
you to go back to all the other places,
all the other codes that's using it,
332

332

00:19:10.980  -->  00:19:12.800
to make sure that's changed as well.
333

333

00:19:12.800  -->  00:19:14.630
So, that's encapsulation.
334

334

00:19:14.630  -->  00:19:17.770
In the next video we'll go ahead and
I'll issue with a challenge.
335

335

00:19:17.770  -->  00:19:20.620
And you can have a go at solving
the challenge I come up with.
336

336

00:19:20.620  -->  00:19:22.350
So I'll see you in that next video.
