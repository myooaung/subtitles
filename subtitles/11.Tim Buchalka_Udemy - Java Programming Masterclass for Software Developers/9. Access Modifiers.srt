1
1

00:00:05,600  -->  00:00:09,280
Okay, so it's time to start
talking about Access Modifiers and
2

2

00:00:09,280  -->  00:00:14,430
in particular private, public and
protected as well as package private so
3

3

00:00:14,430  -->  00:00:19,100
what we're going to do is Why you would
want to restrict access to the field and
4

4

00:00:19,100  -->  00:00:20,460
methods in your classes.
5

5

00:00:20,460  -->  00:00:24,970
What we are going to do is implement
a very simple and seriously flawed
6

6

00:00:24,970  -->  00:00:29,810
bank account to demonstrated that and just
before I go on one thing about the color
7

7

00:00:29,810  -->  00:00:33,650
You've probably noticed if you've been
following on, the last few videos have
8

8

00:00:33,650  -->  00:00:37,180
been--look a little bit weird with some
of the buttons and so forth not fitting.
9

9

00:00:37,180  -->  00:00:43,880
There's currently an issue with 15, when
you're trying to size up fonts, and for
10

10

00:00:43,880  -->  00:00:48,080
some reason, when I select darkular, which
is the dark theme, it doesn't happen, so.
11

11

00:00:48,080  -->  00:00:51,780
I'm just gonna leave it in this mode now,
let me know what you think of this and
12

12

00:00:51,780  -->  00:00:54,830
I find it better to work in this mode but
generally,
13

13

00:00:54,830  -->  00:00:58,940
the white background is better for videos,
but we'll see how we go with this anyway.
14

14

00:00:58,940  -->  00:01:02,290
Okay so,
first thing we wanna do is create a class.
15

15

00:01:02,290  -->  00:01:05,900
We're gonna create a class called account
so I'm just gonna do what we normally do.
16

16

00:01:07,130  -->  00:01:11,240
Select the package and
create a new class, and
17

17

00:01:11,240  -->  00:01:16,880
call it Account OK, so that class is
going to have, firstly, a string.
18

18

00:01:16,880  -->  00:01:22,140
Private string account name.
19

19

00:01:22,140  -->  00:01:24,450
So, it's still going to
have a balance...actually,
20

20

00:01:24,450  -->  00:01:27,130
what we're going to
do...we'll change that to
21

21

00:01:27,130  -->  00:01:32,300
a public, because we were
talking about axis modifiers.
22

22

00:01:32,300  -->  00:01:36,080
It's important to understand this,
so We'll also make the balance zero.
23

23

00:01:36,080  -->  00:01:39,640
That's also public, and public array list.
24

24

00:01:39,640  -->  00:01:45,400
[NOISE]
Array list,
25

25

00:01:45,400  -->  00:01:48,810
integer, for transactions.
26

26

00:01:48,810  -->  00:01:52,960
And transactions on the account,
and then create a constructor.
27

27

00:01:52,960  -->  00:01:55,570
And the constructor will
accept the account name.
28

28

00:01:57,170  -->  00:01:59,950
So we set the field account
name to whatever's past,
29

29

00:01:59,950  -->  00:02:02,160
and we also initialize the transactions.
30

30

00:02:02,160  -->  00:02:04,790
So, this dot transactions equals new.
31

31

00:02:06,200  -->  00:02:08,160
Array list integer so, so
32

32

00:02:08,160  -->  00:02:12,610
it's just creating an empty array list
ready for us to start adding records.
33

33

00:02:12,610  -->  00:02:14,140
And, we also need a get R for the balance.
34

34

00:02:14,140  -->  00:02:16,180
So, get R balance.
35

35

00:02:16,180  -->  00:02:19,900
So, that's our basic counts class.
36

36

00:02:19,900  -->  00:02:23,970
And, the, just to confirm
the transactions, very, very basic.
37

37

00:02:23,970  -->  00:02:26,880
What we're going to do is store the
amounts as a positive number where it's
38

38

00:02:26,880  -->  00:02:31,620
a deposit, and a negative number for
withdraw, and put those in the right list.
39

39

00:02:31,620  -->  00:02:33,250
Okay.
So, next what we need is some methods
40

40

00:02:33,250  -->  00:02:35,240
to support deposits and withdraws.
41

41

00:02:35,240  -->  00:02:37,830
So what we're going to do
is implement those and
42

42

00:02:37,830  -->  00:02:40,840
then we're going to get the can't class
to calculate the balance as well.
43

43

00:02:40,840  -->  00:02:45,570
So firstly, the deposit,
public_void deposit,
44

44

00:02:47,000  -->  00:02:49,480
and pass a parameter of
the amount I want to deposit.
45

45

00:02:49,480  -->  00:02:53,360
We check if the amount > 0.
46

46

00:02:54,440  -->  00:02:57,910
And if it is, we're going to add
that transaction.add(amount) and
47

47

00:02:57,910  -->  00:03:01,790
we also want to add that to the balance.
48

48

00:03:01,790  -->  00:03:05,100
Now the balance gets incremented by
the amount that pass this method.
49

49

00:03:05,100  -->  00:03:11,900
And we'll put a message in the effect
to say (amount + "deposited.
50

50

00:03:11,900  -->  00:03:17,210
Balance is now") Plus this dot balance.
51

51

00:03:18,750  -->  00:03:23,600
Else, what we're going to do, if it wasn't
>0, we'll print out a message just to
52

52

00:03:23,600  -->  00:03:28,670
say cannot deposit negative sums.
53

53

00:03:28,670  -->  00:03:32,410
OK, so
that's our very basic deposit method.
54

54

00:03:32,410  -->  00:03:34,540
So let's now write the withdraw one.
55

55

00:03:34,540  -->  00:03:36,700
Similar But
obviously the money's coming out or
56

56

00:03:36,700  -->  00:03:38,810
it's been deducting from the balance.
57

57

00:03:38,810  -->  00:03:44,080
So public void withdraw,
pass an amount as well.
58

58

00:03:44,080  -->  00:03:50,650
Int withdrawal = -amount.
59

59

00:03:50,650  -->  00:03:53,260
So converting it to a minus,
60

60

00:03:53,260  -->  00:03:57,000
remember member because a negative number
we're gonna assume is a withdrawal.
61

61

00:03:57,000  -->  00:03:59,810
And I'll put if withdrawal is <0, you'll
62

62

00:04:02,110  -->  00:04:05,930
start transactions dot add withdrawal,
63

63

00:04:08,090  -->  00:04:12,820
and stop balance equals, we're adding
withdrawal remembering it's gonna be
64

64

00:04:12,820  -->  00:04:14,650
a minus number,
we can still use a plus there.
65

65

00:04:16,200  -->  00:04:20,560
And we can say amount [SOUND]
withdrawn,
66

66

00:04:22,740  -->  00:04:26,840
Balance is now, + this.balance.
67

67

00:04:26,840  -->  00:04:31,300
Else, [SOUND]
message,
68

68

00:04:31,300  -->  00:04:39,560
Cannot withdraw Cannot
withdraw on negative sums.
69

69

00:04:39,560  -->  00:04:42,710
So that's our basic withdraw method.
70

70

00:04:42,710  -->  00:04:46,730
Again it's checking, converting it to a
minus because we're gonna pass a positive
71

71

00:04:46,730  -->  00:04:49,090
amount and then we're setting
it to a minus amount and
72

72

00:04:49,090  -->  00:04:52,180
then we're checking to see if it's less
than zero, which means we can withdraw.
73

73

00:04:52,180  -->  00:04:53,770
We're gonna add that to the transactions,
74

74

00:04:53,770  -->  00:04:57,390
bearing in mind a negative number
we're considering to be withdraw.
75

75

00:04:57,390  -->  00:04:59,520
We're adding the balance.
76

76

00:04:59,520  -->  00:05:01,750
We're adding withdrawal, I should say
to the balance comparing a minus,
77

77

00:05:01,750  -->  00:05:03,420
it's going to be a minus number.
78

78

00:05:03,420  -->  00:05:07,820
We can still do that and give a reflect to
the updated balance and then updating and
79

79

00:05:07,820  -->  00:05:12,460
how much is, you know, what the current
balance is after the withdrawal, and
80

80

00:05:12,460  -->  00:05:15,050
we're just showing an error
message if there was a problem.
81

81

00:05:15,050  -->  00:05:19,280
So, next, the last method
we're going to create here.
82

82

00:05:19,280  -->  00:05:27,470
It is going to be a bank like balance,
a public void calculate dot,
83

83

00:05:27,470  -->  00:05:32,880
so start with a balance of zero and
we put four into I,
84

84

00:05:33,950  -->  00:05:37,590
start transactions and
we go through all the entries and list.
85

85

00:05:37,590  -->  00:05:41,850
Now this .balance add to that,
86

86

00:05:41,850  -->  00:05:44,360
bearing in mind that will work for
plus or minus numbers.
87

87

00:05:44,360  -->  00:05:51,180
And then we'll just print out a message
to say, calculated balance is .balance.
88

88

00:05:51,180  -->  00:05:52,180
Like I said.
89

89

00:05:52,180  -->  00:05:54,960
So that's our method there.
90

90

00:05:54,960  -->  00:05:58,620
Now for calculating the balance where we
start on zero and we can go through and
91

91

00:05:58,620  -->  00:06:00,800
tally up all the transactions.
92

92

00:06:00,800  -->  00:06:03,270
To come up with what the balance
is after all of those.
93

93

00:06:03,270  -->  00:06:07,460
Okay, so to do some testing we're
gonna go back to our main class and
94

94

00:06:07,460  -->  00:06:11,870
then into our main method and
we'll start with Account, then
95

95

00:06:13,420  -->  00:06:17,790
we'll call it timsAccount = new Account
96

96

00:06:17,790  -->  00:06:24,330
("Tim"), let's do some entry,
do some transactions at timsAccount.
97

97

00:06:24,330  -->  00:06:31,780
Deposit 1000,
Tim's account withdrawal 500,
98

98

00:06:31,780  -->  00:06:38,470
Tim's withdrawal minus 200,
99

99

00:06:38,470  -->  00:06:43,570
Tim's account deposit Minus 20.
100

100

00:06:43,570  -->  00:06:47,800
Some of these are obviously wrong,
"timsAccount"
101

101

00:06:49,980  -->  00:06:53,760
dot calculate balance,
102

102

00:06:53,760  -->  00:06:57,980
and we'll print out a message.
103

103

00:07:00,610  -->  00:07:09,440
Balance on account,
account is past two down dot balance.
104

104

00:07:09,440  -->  00:07:13,420
Very very straight forward as you can
see there, text at the top pull out and
105

105

00:07:13,420  -->  00:07:14,270
we will run this.
106

106

00:07:18,290  -->  00:07:22,270
All right, you can see that we started
out 1000 deposits, balance is now 1000,
107

107

00:07:22,270  -->  00:07:23,600
500 withdrawn, bank is now 50,
108

108

00:07:23,600  -->  00:07:27,480
we get an on the next line because we're
trying to withdraw a negative sum.
109

109

00:07:27,480  -->  00:07:30,510
And we can't deposit a negative
sum either as you can see there.
110

110

00:07:30,510  -->  00:07:34,210
So our calculated balance
500 which is correct.
111

111

00:07:34,210  -->  00:07:36,610
And the balance account using
the getter is also 500.
112

112

00:07:36,610  -->  00:07:38,560
So everything works, and
113

113

00:07:38,560  -->  00:07:43,110
probably in a real application, the
withdraw and deposit methods would also
114

114

00:07:43,110  -->  00:07:46,400
log somewhere to provide an auto-trailer
activity on the account.
115

115

00:07:46,400  -->  00:07:48,380
But notice that we've declared
everything as public,
116

116

00:07:48,380  -->  00:07:52,100
this is the thing I wanted to point out,
so, go back to account.
117

117

00:07:52,100  -->  00:07:55,220
You can see that everything's public,
the account name, balance and
118

118

00:07:55,220  -->  00:08:00,010
transactions and what that means is this
allows any program using the account class
119

119

00:08:00,010  -->  00:08:02,060
to modify the balance directly.
120

120

00:08:02,060  -->  00:08:04,920
And we can do that by inserting
the following code into main.
121

121

00:08:06,050  -->  00:08:09,710
So, under this line here
if I added another entry,
122

122

00:08:09,710  -->  00:08:13,390
timsAccount.balance=5000 and run that
123

123

00:08:16,070  -->  00:08:19,220
We've no changed the account balance,
the balance on the account being 5,000.
124

124

00:08:19,220  -->  00:08:22,170
Now, that's obviously not
good being able to do that.
125

125

00:08:22,170  -->  00:08:26,520
But, the bank would spot the attempt at
fraud, by checking the transaction list.
126

126

00:08:26,520  -->  00:08:28,950
Except we can also modify that as well.
127

127

00:08:28,950  -->  00:08:35,940
So, we could do something like Tim's
account dot transactions, dot add.
128

128

00:08:35,940  -->  00:08:37,530
Forty-five hundred.
129

129

00:08:39,090  -->  00:08:42,210
And we can do timsAccount
dot calculate balance again.
130

130

00:08:42,210  -->  00:08:42,820
So I can run that.
131

131

00:08:44,490  -->  00:08:47,590
We now have a match you can
see of the account balance but
132

132

00:08:47,590  -->  00:08:51,420
also there's now an entry in
the transaction ArrayList as well.
133

133

00:08:51,420  -->  00:08:54,890
So, in a well designed system,
the transactions list, in this case
134

134

00:08:54,890  -->  00:08:59,090
the ArrayList Should only be modified
by the deposit and withdrawal methods.
135

135

00:08:59,090  -->  00:09:02,820
So by allowing access to the transactions
list from outside the class and
136

136

00:09:02,820  -->  00:09:05,590
the balance for that matter,
we're introducing the potential for
137

137

00:09:05,590  -->  00:09:06,790
errors in the program.
138

138

00:09:06,790  -->  00:09:09,530
Or in this case, for fraud.
139

139

00:09:09,530  -->  00:09:12,930
So obviously, here the fraud would
be a deliberate act on the power of
140

140

00:09:12,930  -->  00:09:17,480
a programmer but it's also the case that
objects can be altered by mistake because
141

141

00:09:17,480  -->  00:09:19,470
the implications of doing so.
142

142

00:09:19,470  -->  00:09:22,440
Unapparent, in other words the programmer
didn't really understand the ramifications
143

143

00:09:22,440  -->  00:09:23,980
of what they are doing.
144

144

00:09:23,980  -->  00:09:28,000
Point is if you expose fields of your
classes, then anyone using the class
145

145

00:09:28,000  -->  00:09:32,500
will reasonably assume that they can
manipulate the values of those fields.
146

146

00:09:32,500  -->  00:09:36,620
And because this bypasses the methods
you've written to use those fields, as you
147

147

00:09:36,620  -->  00:09:40,990
can see in this case, your classes may no
longer behave as you intended them to.
148

148

00:09:40,990  -->  00:09:42,800
So you may lose control over them.
149

149

00:09:42,800  -->  00:09:46,300
So in other words, by making me count name
balance and transaction fields public,
150

150

00:09:46,300  -->  00:09:50,410
what we've done is we've allowed them to
be modified outside of the account class.
151

151

00:09:50,410  -->  00:09:52,880
And it's a simple fix, all we need
to do is change them to public.
152

152

00:09:52,880  -->  00:09:55,320
So, I'll come back here and
change these to private.
153

153

00:09:58,710  -->  00:10:01,230
Private, private.
154

154

00:10:01,230  -->  00:10:02,850
So after we do that, we go back to main.
155

155

00:10:02,850  -->  00:10:06,680
We actually now get errors as
you can see on the screen, so
156

156

00:10:06,680  -->  00:10:10,610
really the only way we can access those
directly is by using in this case
157

157

00:10:10,610  -->  00:10:14,540
the deposit and withdrawal methods
which means it's a lot more secure.
158

158

00:10:14,540  -->  00:10:17,990
So let's now have a look at the four
access modifiers and we'll discuss their
159

159

00:10:17,990  -->  00:10:21,880
effects and we'll produce some
code to put these into practice.
160

160

00:10:21,880  -->  00:10:25,650
So access control is granted by
the top level or at the member level.
161

161

00:10:25,650  -->  00:10:26,880
So at the top level.
162

162

00:10:26,880  -->  00:10:28,430
What you can do is you
can make your classes and
163

163

00:10:28,430  -->  00:10:31,310
interfaces public or packaged private.
164

164

00:10:31,310  -->  00:10:34,820
You can't define a private class at
the top level as you can see if we try.
165

165

00:10:34,820  -->  00:10:36,800
So let's try and do that.
166

166

00:10:36,800  -->  00:10:41,890
So we try and create a new class and
we'll call it private class.
167

167

00:10:45,170  -->  00:10:46,560
So I come along and try him.
168

168

00:10:48,010  -->  00:10:49,180
First, you add a constructor,
that'll work.
169

169

00:10:49,180  -->  00:10:54,900
But if I change this public to private,
we got an error.
170

170

00:10:56,130  -->  00:10:57,500
Modify private is not allowed here.
171

171

00:10:57,500  -->  00:11:01,480
And that's telling us we can't have
a private class at this level,
172

172

00:11:01,480  -->  00:11:03,660
at sort of the top level of this file.
173

173

00:11:03,660  -->  00:11:05,780
And let me just show
down to this slide now,
174

174

00:11:05,780  -->  00:11:07,380
we'll just talk about
this a little bit more.
175

175

00:11:07,380  -->  00:11:09,700
Just to confirm what can
happen at the top level.
176

176

00:11:11,620  -->  00:11:14,690
So basically, at a top level,
only classes, interfaces and
177

177

00:11:14,690  -->  00:11:16,950
enums can exist at the top level.
178

178

00:11:16,950  -->  00:11:19,960
Everything else must be
included within one of these.
179

179

00:11:19,960  -->  00:11:24,310
So public means that the object is visible
to all classes everywhere, whether they
180

180

00:11:24,310  -->  00:11:27,900
are in the same package or have imported
the package containing the public class.
181

181

00:11:27,900  -->  00:11:32,070
Package-private, what that means
is the object is only available
182

182

00:11:32,070  -->  00:11:36,660
Within its own package and is visible
to every class within the same package.
183

183

00:11:36,660  -->  00:11:40,620
So package-private is specified by
not specifying, if that makes sense.
184

184

00:11:40,620  -->  00:11:43,850
In other words, instead of default,
if you do not specify public
185

185

00:11:43,850  -->  00:11:46,340
it's not actually
a package-private key word as such.
186

186

00:11:46,340  -->  00:11:49,480
You just remove public and
leave it as a class and
187

187

00:11:49,480  -->  00:11:52,270
then you get package-private for
doing that.
188

188

00:11:54,660  -->  00:11:58,270
This is an example of a top level public
class as you can see on the screen there.
189

189

00:11:58,270  -->  00:12:02,750
It's a standard public class definition
there, and it's a public constructor.
190

190

00:12:06,670  -->  00:12:09,230
Top level public interface,
very similar as you can see there.
191

191

00:12:09,230  -->  00:12:11,950
But again the public keyword
The word interface, and
192

192

00:12:11,950  -->  00:12:14,250
then obviously the name of
the interface in this case.
193

193

00:12:18,440  -->  00:12:20,550
Now our top level package-private class,
194

194

00:12:20,550  -->  00:12:23,590
I mentioned that you remove the public,
identify you can see on line three,
195

195

00:12:23,590  -->  00:12:25,650
there's no public there
it just says class.
196

196

00:12:25,650  -->  00:12:27,800
Doesn't say define
a package-private class.
197

197

00:12:30,770  -->  00:12:33,330
And likewise for
interface Package Private Interface,
198

198

00:12:33,330  -->  00:12:34,710
we're moving the word Public again.
199

199

00:12:38,680  -->  00:12:42,210
Now member level, this is once
we're actually in the class itself.
200

200

00:12:42,210  -->  00:12:44,080
Public, so
you're seeing public at that level,
201

201

00:12:44,080  -->  00:12:47,360
the member level Has the same
meaning as the top level.
202

202

00:12:47,360  -->  00:12:51,330
So in other words the public class
member or field and public method
203

203

00:12:51,330  -->  00:12:55,690
can be accessed from any other class
anywhere, even in a different package.
204

204

00:12:55,690  -->  00:12:58,290
And we saw that when we
were using the main method.
205

205

00:12:58,290  -->  00:13:01,280
To update the balance manually instead
of going through the withdrawal and
206

206

00:13:01,280  -->  00:13:02,070
deposit methods.
207

207

00:13:03,310  -->  00:13:07,210
The package private also has the same
meaning, it does at the top level.
208

208

00:13:07,210  -->  00:13:10,810
An object with no access modifier is
visible to every class within the same
209

209

00:13:10,810  -->  00:13:15,060
package but
not to classes in external packages.
210

210

00:13:15,060  -->  00:13:19,250
And lastly private and we saw that when we
changed the fields in the example code.
211

211

00:13:19,250  -->  00:13:22,180
The object is only visible within
the class it's declared in.
212

212

00:13:22,180  -->  00:13:25,590
It's not visible anywhere else
including in subclasses of its class,
213

213

00:13:25,590  -->  00:13:26,920
that's very important to know as well.
214

214

00:13:28,170  -->  00:13:33,100
Lastly, protected the object is visible
anywhere in its own package, sort of like
215

215

00:13:33,100  -->  00:13:37,790
package-private but Also in subclasses,
even if they were in another package.
216

216

00:13:37,790  -->  00:13:40,960
So that's you'd wanna use
protected instead of private.
217

217

00:13:40,960  -->  00:13:44,260
Okay, so let's go back and
look at doing some more coding now.
218

218

00:13:44,260  -->  00:13:47,760
So we've been using our access
modifiers throughout this course.
219

219

00:13:47,760  -->  00:13:51,080
And I briefly discussed the use of
private in earlier lectures, but
220

220

00:13:51,080  -->  00:13:53,970
now you've got an almost complete
definition what they all mean.
221

221

00:13:53,970  -->  00:13:55,430
Now I said almost complete,
222

222

00:13:55,430  -->  00:13:58,700
because there's one case that
was not specifically mentioned.
223

223

00:13:58,700  -->  00:14:01,170
Although it was covered in
the lecture on interfaces.
224

224

00:14:01,170  -->  00:14:03,460
That case is part of the solution
to our mini-challenge.
225

225

00:14:03,460  -->  00:14:06,390
So what we're gonna do is I'm just
going to delete this private class,
226

226

00:14:06,390  -->  00:14:07,350
cuz we're not going to need that.
227

227

00:14:07,350  -->  00:14:13,250
Now I'm gonna create an interface.
228

228

00:14:13,250  -->  00:14:17,570
Gonna go New, Class, select Class,
choose Interface, and
229

229

00:14:17,570  -->  00:14:19,240
I'm gonna call this Accessible.
230

230

00:14:22,730  -->  00:14:24,330
And we'll close the run window down.
231

231

00:14:24,330  -->  00:14:27,360
So what I'm going to do
now is paste in some code.
232

232

00:14:27,360  -->  00:14:30,090
Now note I'm actually deleting this
first part of the interface as well.
233

233

00:14:30,090  -->  00:14:31,790
So I'm gonna paste it all in.
234

234

00:14:31,790  -->  00:14:35,290
Okay, so the challenge is,
in the following interface declaration,
235

235

00:14:35,290  -->  00:14:39,420
what's the visibility of One,
the accessible interface.
236

236

00:14:39,420  -->  00:14:42,330
Two, the int variable constant.
237

237

00:14:42,330  -->  00:14:44,220
Three, method A.
238

238

00:14:44,220  -->  00:14:45,830
And four, method B and method C.
239

239

00:14:45,830  -->  00:14:48,390
And what you might want to do
is think back to the lecture
240

240

00:14:48,390  -->  00:14:50,570
on interfaces before answering this.
241

241

00:14:50,570  -->  00:14:52,060
So, pause the video at this point,
242

242

00:14:52,060  -->  00:14:55,100
and when you come back, we'll go through
and give you the answer to them all.
243

243

00:15:00,360  -->  00:15:01,200
OK, how's it going?
244

244

00:15:01,200  -->  00:15:02,910
Hopefully, you've figured it out.
245

245

00:15:02,910  -->  00:15:05,000
So, firstly,
let's talk about uncertain, number 1,
246

246

00:15:05,000  -->  00:15:07,940
the accessible interface,
what's the visibility of that?
247

247

00:15:07,940  -->  00:15:11,260
Well, it's set to package private,
so, in other words,
248

248

00:15:11,260  -->  00:15:16,610
it's accessible to all classes, in this
case, in the com dot timber package.
249

249

00:15:16,610  -->  00:15:17,780
Because that's what I've defined above.
250

250

00:15:17,780  -->  00:15:19,310
The second one, the int,
251

251

00:15:19,310  -->  00:15:23,270
variable some underscore constant,
the visibility was set to public,
252

252

00:15:23,270  -->  00:15:26,870
and what that means is all interface
variables are public static final.
253

253

00:15:26,870  -->  00:15:28,880
And again that was
the hint I gave back in,
254

254

00:15:28,880  -->  00:15:33,870
I'll check the lecture on interfaces
method C, or, sorry, number 3,
255

255

00:15:33,870  -->  00:15:37,720
step 3, method A, On line 19,
what's the visibility of that?
256

256

00:15:37,720  -->  00:15:39,630
Well, it's public; it's
just a standard public.
257

257

00:15:39,630  -->  00:15:40,630
And we talked about that.
258

258

00:15:40,630  -->  00:15:41,380
And method B and
259

259

00:15:41,380  -->  00:15:46,240
method C are public because all interface
methods are automatically public, so
260

260

00:15:46,240  -->  00:15:50,400
the lack of an axis modifier here
does not imply package private.
261

261

00:15:50,400  -->  00:15:51,840
So that was a little bit
of a trick question there,
262

262

00:15:51,840  -->  00:15:55,640
and that's why I suggested you
went back and check on interfaces.
263

263

00:15:55,640  -->  00:15:58,550
So again, with method b and method c,
264

264

00:15:58,550  -->  00:16:01,150
they're still public because
this is an interface.
265

265

00:16:01,150  -->  00:16:02,470
I was a little bit sneaky.
266

266

00:16:02,470  -->  00:16:03,390
Sorry about that.
267

267

00:16:03,390  -->  00:16:07,750
But it's not possible to have anything
except public methods in an interface.
268

268

00:16:07,750  -->  00:16:10,710
Now this does make sense, if you think
about it, because the whole point of
269

269

00:16:10,710  -->  00:16:14,540
declaring interface is to provide
methods that have to be implemented.
270

270

00:16:14,540  -->  00:16:17,930
So if you hide those methods in any
class implementing the interface it will
271

271

00:16:17,930  -->  00:16:20,910
struggle to implement the hidden methods
which sort of defeats the whole purpose.
272

272

00:16:20,910  -->  00:16:22,470
Purpose of using interface.
273

273

00:16:22,470  -->  00:16:25,700
You can make the methods
effectively package private
274

274

00:16:25,700  -->  00:16:28,830
by ensuring that the interface itself
is package private as we've done here.
275

275

00:16:28,830  -->  00:16:32,570
And although all three methods are public,
if the interface itself is not visible
276

276

00:16:32,570  -->  00:16:36,450
outside the current package, then those
methods obviously won't be visible either.
277

277

00:16:36,450  -->  00:16:38,750
So that's it,
you've now got the complete picture.
278

278

00:16:38,750  -->  00:16:42,290
The lack of an axis modifier
means the default of package
279

279

00:16:42,290  -->  00:16:46,520
except with interface methods and
variables, which arise public.
280

280

00:16:46,520  -->  00:16:48,820
So that's it, I hope you've got
a lot out of this video and
281

281

00:16:48,820  -->  00:16:49,870
I'll see you in the next one.
