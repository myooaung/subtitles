1
1

00:00:05,130  -->  00:00:07,090
In the last video we started work
2

2

00:00:07,090  -->  00:00:09,090
on defining what methods were and
3

3

00:00:09,090  -->  00:00:11,770
we started work on creating the methods.
4

4

00:00:11,770  -->  00:00:14,280
So let's continue on with methods.
5

5

00:00:14,280  -->  00:00:17,060
Okay so we've defined the type of information
6

6

00:00:17,060  -->  00:00:19,430
coming back, and we've also defined
7

7

00:00:19,430  -->  00:00:21,040
the actual value to be returned back.
8

8

00:00:21,040  -->  00:00:23,210
So next what we need to do is I'm going to
9

9

00:00:23,210  -->  00:00:27,360
take out the print line there,
10

10

00:00:27,360  -->  00:00:28,670
and I'm going to put:
11

11

00:00:28,670  -->  00:00:33,490
'int highScore =', because the other thing you can do
12

12

00:00:33,490  -->  00:00:37,690
is you can assign a variable to a method result.
13

13

00:00:37,690  -->  00:00:39,690
So what we're doing is saying, take the value
14

14

00:00:39,690  -->  00:00:43,490
that is returned from the method 'calculateScore'
15

15

00:00:43,490  -->  00:00:46,480
and put that into the variable called 'highScore'.
16

16

00:00:46,480  -->  00:00:50,900
We can then do our system output, but the final score
17

17

00:00:50,900  -->  00:00:53,540
will actually be the variable 'highScore'.
18

18

00:00:55,570  -->  00:00:58,040
and likewise for here, what we could do
19

19

00:01:05,240  -->  00:01:07,920
I'll delete that out.
20

20

00:01:07,920  -->  00:01:10,220
The same deal there. So we can 'Run' that,
21

21

00:01:10,220  -->  00:01:12,990
just to confirm that it's working.
22

22

00:01:13,410  -->  00:01:14,950
We've still got the same scores,
23

23

00:01:14,950  -->  00:01:16,780
but now what happened is, as you can see
24

24

00:01:16,780  -->  00:01:19,370
there's no print out in this entire method.
25

25

00:01:19,600  -->  00:01:23,700
So the result of our calculations is being sent back
26

26

00:01:23,700  -->  00:01:26,080
automatically from our 'calculateScore' method,
27

27

00:01:26,080  -->  00:01:28,620
and because we've put 'int highScore ='
28

28

00:01:28,620  -->  00:01:30,550
and then the name of the method and then the
29

29

00:01:30,550  -->  00:01:32,760
various arguments that we've sent to it,
30

30

00:01:32,760  -->  00:01:36,100
that value that we return, in this case 'finalScore'
31

31

00:01:36,100  -->  00:01:38,490
is being sent back and placed
32

32

00:01:38,490  -->  00:01:40,490
into the 'highScore' variable.
33

33

00:01:40,490  -->  00:01:42,440
Pretty cool as you can see, because it really
34

34

00:01:42,440  -->  00:01:44,870
means that you can create methods to do
35

35

00:01:44,870  -->  00:01:47,550
calculations and just to send back the result of the
36

36

00:01:47,550  -->  00:01:49,570
calculations, making your code a lot
37

37

00:01:49,570  -->  00:01:51,440
easier to read. Rather than having
38

38

00:01:51,440  -->  00:01:53,440
to put all this calculation code
39

39

00:01:53,440  -->  00:01:55,760
in perhaps an area you didn't want it to be in.
40

40

00:01:56,540  -->  00:01:58,680
Okay, so it's time for a challenge.
41

41

00:01:58,680  -->  00:02:18,990
I'll make a bit more space. So here's the challenge.
42

42

00:02:18,990  -->  00:02:20,990
So that's it, you need to create
43

43

00:02:20,990  -->  00:02:23,550
a method called displayHighScorePosition,
44

44

00:02:23,550  -->  00:02:25,550
so it should receive a player's name
45

45

00:02:25,550  -->  00:02:27,830
name as parameter and a second
46

46

00:02:27,830  -->  00:02:29,780
parameter should be defined as a position in the
47

47

00:02:29,780  -->  00:02:31,110
highScore table,
48

48

00:02:31,110  -->  00:02:33,110
so what you need to do in this method is
49

49

00:02:33,110  -->  00:02:34,860
display the player's name,
50

50

00:02:34,860  -->  00:02:37,220
along with the message,
51

51

00:02:37,220  -->  00:02:40,420
'player's name managed to get in position...'
52

52

00:02:40,420  -->  00:02:42,400
and then display the number they
53

53

00:02:42,400  -->  00:02:45,060
receive, the position number.
54

54

00:02:45,060  -->  00:02:47,620
Then a further message on the highScore table,
55

55

00:02:48,180  -->  00:02:50,670
and create a second method called
56

56

00:02:50,670  -->  00:02:52,670
calculateHighScorePosition,
57

57

00:02:52,670  -->  00:02:54,670
it should be sent one argument only.
58

58

00:02:54,670  -->  00:02:56,670
In other words only have one parameter which
59

59

00:02:56,670  -->  00:02:58,460
is the player's score,
60

60

00:02:58,460  -->  00:03:00,150
it should return an int.
61

61

00:03:00,150  -->  00:03:02,150
And the return data should be
62

62

00:03:02,150  -->  00:03:05,250
'1 if the score is >1000',
63

63

00:03:05,250  -->  00:03:09,360
'2 if the score is >500 and <1000',
64

64

00:03:09,360  -->  00:03:13,440
'3 if the score is >100 and <500'
65

65

00:03:13,440  -->  00:03:16,730
and in all other circumstances return '4'.
66

66

00:03:16,730  -->  00:03:19,510
So you need to call both methods and display the results.
67

67

00:03:19,510  -->  00:03:21,550
You can come up with any player name,
68

68

00:03:21,550  -->  00:03:24,880
but the score of 1500, 900, 400 and 50.
69

69

00:03:24,880  -->  00:03:27,900
So in other words, you would call the various
70

70

00:03:27,900  -->  00:03:29,900
methods four times to come up with this,
71

71

00:03:30,180  -->  00:03:33,020
and to be clear the displayHighScorePosition
72

72

00:03:33,020  -->  00:03:35,540
is a void method, so it doesn't have to
73

73

00:03:35,540  -->  00:03:37,540
return any data,
74

74

00:03:37,540  -->  00:03:39,970
and incidentally as I remember it, a void
75

75

00:03:39,970  -->  00:03:42,670
method can also be known as a procedure
76

76

00:03:42,670  -->  00:03:44,670
and a method generally speaking can also
77

77

00:03:44,670  -->  00:03:46,670
known as a function. So you may hear me
78

78

00:03:46,670  -->  00:03:48,780
using those terms interchangeably throughout the
79

79

00:03:48,780  -->  00:03:52,190
course. Procedure would generally mean a method
80

80

00:03:52,190  -->  00:03:54,190
returning type void.
81

81

00:03:54,190  -->  00:03:56,190
Okay, so see how you go with this challenge,
82

82

00:03:56,190  -->  00:03:58,600
go away and try and see how you get on
83

83

00:03:58,600  -->  00:04:00,600
and once you're ready come back
84

84

00:04:00,600  -->  00:04:05,750
and I'll show you my solution.
PAUSE NOW â€“ TRY TO SOLVE â€“ PRESS PLAY!
85

85

00:04:05,750  -->  00:04:07,650
Okay so let's have a go with a solution.
86

86

00:04:07,650  -->  00:04:11,490
So firstly display highscore position,
87

87

00:04:11,870  -->  00:04:13,690
players name as a parameter and a second
88

88

00:04:13,690  -->  00:04:16,420
parameter as the position in the high score table,
89

89

00:04:16,420  -->  00:04:17,700
So we can create something like:
90

90

00:04:17,700  -->  00:04:22,220
public static and there's no return type so that's
91

91

00:04:22,220  -->  00:04:24,470
going to be void.
92

92

00:04:24,470  -->  00:04:31,600
So the method name is displayHighScorePosition,
93

93

00:04:31,600  -->  00:04:34,010
the parameters are going to be the
94

94

00:04:34,010  -->  00:04:35,500
first name being the player's name.
95

95

00:04:35,500  -->  00:04:37,710
We're going to be using a string data type for that
96

96

00:04:37,710  -->  00:04:40,850
and we'll just call that playerName.
97

97

00:04:40,850  -->  00:04:43,690
Second parameter is a position in the highscore table,
98

98

00:04:43,690  -->  00:04:45,690
let's use an integer for that,
99

99

00:04:45,690  -->  00:04:47,550
it wouldn't really matter what you use but
100

100

00:04:47,550  -->  00:04:49,550
probably integer would be the most efficient,
101

101

00:04:49,550  -->  00:04:56,790
and we'll call that highScorePosition.
102

102

00:04:56,790  -->  00:04:59,130
And what we need to do is display the message,
103

103

00:04:59,130  -->  00:05:03,880
so it will be display the player name firstly,
104

104

00:05:03,880  -->  00:05:14,360
+ "managed to get into position +,
105

105

00:05:16,890  -->  00:05:20,940
and the highscore position;
106

106

00:05:20,940  -->  00:05:23,070
and notice also how with the variables
107

107

00:05:23,070  -->  00:05:25,730
if they're being used they're in dark black,
108

108

00:05:25,730  -->  00:05:28,330
if they're not being used they're in a light gray.
109

109

00:05:28,330  -->  00:05:30,330
It's a great way of figuring out
110

110

00:05:30,330  -->  00:05:33,720
if you're variables are being used properly or not.
111

111

00:05:33,720  -->  00:05:37,040
So I'm going to type in + the highscore
112

112

00:05:37,040  -->  00:05:43,590
+ "on the high score table".
113

113

00:05:45,590  -->  00:05:48,490
So for the second method calculateHighScorePosition
114

114

00:05:48,490  -->  00:05:51,080
we need to do a public static.
115

115

00:05:52,130  -->  00:05:54,380
Now this one needs to return some data,
116

116

00:05:54,380  -->  00:05:56,910
so the return should be returning an integer,
117

117

00:05:56,910  -->  00:05:58,830
therefore it won't be void, but it will be int,
118

118

00:05:58,830  -->  00:06:00,170
which is the data type.
119

119

00:06:00,170  -->  00:06:09,910
calculateHighScorePosition, and needs one parameter
120

120

00:06:09,910  -->  00:06:11,870
which is an integer, the players score,
121

121

00:06:11,870  -->  00:06:17,530
so we're going to call that int playerScore,
122

122

00:06:17,530  -->  00:06:19,900
and we need to have some calculations here
123

123

00:06:19,900  -->  00:06:21,360
to know what to return, so we're going to put.
124

124

00:06:21,360  -->  00:06:31,670
if(playerScore > 1000) (code block)
125

125

00:06:31,670  -->  00:06:34,740
we're going to put return 1;
126

126

00:06:34,740  -->  00:06:45,920
else if (playerScore >500 &&(AND) playerScore <1000)
127

127

00:06:45,920  -->  00:06:49,010
we need just to return 2;
128

128

00:06:49,010  -->  00:06:59,130
else if (playerScore >100 && playerScore <500),
129

129

00:06:59,130  -->  00:07:00,840
return 3;
130

130

00:07:00,840  -->  00:07:03,080
Then in all other cases we need to return 4
131

131

00:07:03,080  -->  00:07:09,500
so that'll just be an else without an if. return 4;
132

132

00:07:09,500  -->  00:07:11,500
So that should be that method.
133

133

00:07:11,500  -->  00:07:14,450
So we've now fulfilled I think all of that,
134

134

00:07:14,450  -->  00:07:16,020
What we need to do is we actually
135

135

00:07:16,020  -->  00:07:19,220
call these methods with various parameter's.
136

136

00:07:19,220  -->  00:07:23,440
So what we're going to do is start off with 'int'.
137

137

00:07:23,440  -->  00:07:24,850
we'll call it
138

138

00:07:24,850  -->  00:07:34,290
highScorePosition = calculateHighScorePosition,
139

139

00:07:34,290  -->  00:07:38,600
we're going to pass the first one which was 1500
140

140

00:07:38,600  -->  00:07:40,630
and then we actually want to execute
141

141

00:07:40,630  -->  00:07:41,630
the second method which is.
142

142

00:07:41,630  -->  00:07:52,050
displayHighScorePosition("Tim", highScorePosition);
143

143

00:07:52,050  -->  00:07:54,640
So next, we're not going to redefine the data type,
144

144

00:07:54,640  -->  00:07:57,290
so I'm just going to copy that,
145

145

00:07:57,290  -->  00:08:00,540
and the second one we want to pass
146

146

00:08:00,540  -->  00:08:06,280
900  with the name bob.
147

147

00:08:06,280  -->  00:08:11,140
For the third one we need to use 400
148

148

00:08:11,800  -->  00:08:16,260
and we'll put Percy,
149

149

00:08:16,260  -->  00:08:27,460
and fourth one 50, Gilbert.
150

150

00:08:27,460  -->  00:08:29,270
So that should be our four arguments,
151

151

00:08:29,270  -->  00:08:32,330
1500, 900, 400 and 50.
152

152

00:08:32,330  -->  00:08:34,470
So you can see what we're doing is on the first line we're
153

153

00:08:34,470  -->  00:08:37,180
figuring out, we're calling the calculateHighScorePosition
154

154

00:08:37,180  -->  00:08:39,180
method to return the number
155

155

00:08:39,180  -->  00:08:41,180
and then we're executing the second
156

156

00:08:41,180  -->  00:08:43,400
method and notice how we haven't got a
157

157

00:08:43,400  -->  00:08:44,670
type as we're not setting it
158

158

00:08:44,670  -->  00:08:46,580
to a variable or anything like that
159

159

00:08:46,580  -->  00:08:47,900
because it's of type void, we're just
160

160

00:08:48,420  -->  00:08:49,900
physically calling the method
161

161

00:08:49,900  -->  00:08:51,900
like you can see there on the screen.
162

162

00:08:51,900  -->  00:08:54,420
So now if we 'Run' that we should hopefully,
163

163

00:08:54,420  -->  00:08:56,630
get 1,2,3,4 showing because we've
164

164

00:08:57,100  -->  00:08:58,610
put these in the right order,
165

165

00:08:58,610  -->  00:09:01,020
of 1500, 900, 400 and 50
166

166

00:09:01,020  -->  00:09:02,720
which should be the 1,2,3,4,
167

167

00:09:02,720  -->  00:09:05,890
so let's try that.
168

168

00:09:05,890  -->  00:09:07,930
Tim managed to get into position 1 on
169

169

00:09:07,930  -->  00:09:09,170
the high score table.
170

170

00:09:09,170  -->  00:09:11,170
Bob managed to get into position 2
171

171

00:09:11,170  -->  00:09:13,080
and Percy managed to get into position 3
172

172

00:09:13,080  -->  00:09:15,110
and Gilbert managed to get into position 4
173

173

00:09:15,110  -->  00:09:16,840
on the high score table. So it seems
174

174

00:09:16,840  -->  00:09:18,760
that our code worked.
175

175

00:09:18,760  -->  00:09:20,580
So what I want to do is just correct
176

176

00:09:20,580  -->  00:09:22,860
what was actually a flaw in the original
177

177

00:09:22,860  -->  00:09:25,220
code that I've developed for this lecture
178

178

00:09:25,220  -->  00:09:27,480
and just tab over to a discussion
179

179

00:09:27,480  -->  00:09:30,180
that student left, and you can see
180

180

00:09:31,030  -->  00:09:32,880
Julian Brown left a message to say that
181

181

00:09:32,880  -->  00:09:34,880
there's a logic hole in your challenge code,
182

182

00:09:34,880  -->  00:09:36,720
and he's actually quite correct
183

183

00:09:36,720  -->  00:09:38,700
so, ... what he goes on to say is
184

184

00:09:38,700  -->  00:09:40,720
after the first if statement, the second one
185

185

00:09:40,720  -->  00:09:42,720
does not need to test for less than a 1000,
186

186

00:09:42,720  -->  00:09:45,160
by doing so a score of l1000 would slip through
187

187

00:09:45,160  -->  00:09:46,740
and return a 4.
188

188

00:09:46,740  -->  00:09:48,760
So in other words, what I've done, and
189

189

00:09:48,760  -->  00:09:50,280
if we go back to the code and have a look,
190

190

00:09:50,280  -->  00:09:51,960
Well I actually replied here and said
191

191

00:09:51,960  -->  00:09:53,960
"The challenge as I wrote it
192

192

00:09:53,960  -->  00:09:56,470
in the lecture was as follows: To return 1 if the score
193

193

00:09:56,470  -->  00:09:59,810
was greater than 1000, return 2 if the score was
194

194

00:09:59,810  -->  00:10:01,810
was greater than 500 and less than 1000
195

195

00:10:01,960  -->  00:10:04,220
and return 3 if score was greater than 100
196

196

00:10:04,220  -->  00:10:07,240
and less than 500 and otherwise return 4."
197

197

00:10:07,240  -->  00:10:11,650
So my code actually works, as per the challenge,
198

198

00:10:11,650  -->  00:10:14,250
but what is quite correct that Julian
199

199

00:10:14,250  -->  00:10:17,060
points out and also Michael's pointed out a little bit
200

200

00:10:17,060  -->  00:10:19,620
further down as well is that there is
201

201

00:10:19,620  -->  00:10:21,820
actually a logic hole, because if we
202

202

00:10:21,820  -->  00:10:23,970
to pass a score of exactly 1000
203

203

00:10:23,970  -->  00:10:26,150
to this routine, or a score of 500 or even a
204

204

00:10:26,150  -->  00:10:28,580
score of 100, we get the wrong results.
205

205

00:10:28,580  -->  00:10:30,650
So there's actually a bug in the code.
206

206

00:10:30,650  -->  00:10:32,650
So let's just go back to the code,
207

207

00:10:32,650  -->  00:10:34,800
and I'm just going to 'Run' it so you can actually see
208

208

00:10:34,800  -->  00:10:37,230
what the bug is and then we'll actually fix it
209

209

00:10:37,230  -->  00:10:39,140
just so you just know how to go about doing that.
210

210

00:10:39,140  -->  00:10:41,260
So these examples have all worked
211

211

00:10:41,260  -->  00:10:43,410
without any problems, and that's
212

212

00:10:43,410  -->  00:10:45,610
because they're working within the constraints
213

213

00:10:45,610  -->  00:10:47,860
of the 'if' and the 'else if's' that are here.
214

214

00:10:47,860  -->  00:10:50,040
But what we haven't done is try to actually
215

215

00:10:50,040  -->  00:10:52,250
pass a score that is exactly 1000,
216

216

00:10:52,250  -->  00:10:55,170
that's exactly 500 or exactly 100.
217

217

00:10:55,170  -->  00:10:59,170
So for example, let's do one that's exactly 1000.
218

218

00:10:59,170  -->  00:11:04,530
highScorePosition = calculateHighScorePosition(1000);
219

219

00:11:04,530  -->  00:11:05,150
We'll do:
220

220

00:11:05,150  -->  00:11:11,910
displayHighScorePosition("Louise, highScorePosition);
221

221

00:11:11,910  -->  00:11:14,090
So what should happen in theory
222

222

00:11:14,090  -->  00:11:16,410
is that the way we've set it out is
223

223

00:11:16,410  -->  00:11:18,070
if the score is greater than 1000,
224

224

00:11:18,070  -->  00:11:21,600
that should really be greater than or equal to 1000,
225

225

00:11:21,600  -->  00:11:23,410
and likewise for this one it should be greater than
226

226

00:11:23,410  -->  00:11:25,280
or equal to 500 and less than 1000.
227

227

00:11:25,280  -->  00:11:27,160
should be grater than or equal to
228

228

00:11:27,160  -->  00:11:29,030
Because in reality we don't really want
229

229

00:11:29,030  -->  00:11:32,130
a score of 1000 to be number 4,
230

230

00:11:32,130  -->  00:11:35,650
we'd want to say that okay the score of a 1000 or more,
231

231

00:11:35,650  -->  00:11:37,200
that should really be in position 1.
232

232

00:11:37,200  -->  00:11:39,200
But if we run this code as it is now,
233

233

00:11:39,200  -->  00:11:42,000
we'll find that a 1000 will actually be returning
234

234

00:11:42,000  -->  00:11:45,290
to position 4. So Louise, even though she managed
235

235

00:11:45,290  -->  00:11:48,820
to score a 1000 points has got to position 4,
236

236

00:11:48,820  -->  00:11:50,820
and just confirming the reason for that
237

237

00:11:50,820  -->  00:11:52,770
is in the actual
238

238

00:11:52,770  -->  00:11:54,770
calculateHighScorePosition method,
239

239

00:11:54,770  -->  00:11:59,480
I've got 'if(playerScore > 1000) [to] return 1;'
240

240

00:11:59,480  -->  00:12:00,790
and the next condition is:
241

241

00:12:00,790  -->  00:12:06,860
'if(playerScore is > 500 && playerScore < 1000) return 2; '
242

242

00:12:06,860  -->  00:12:08,340
So you can see the logic there,
243

243

00:12:08,340  -->  00:12:10,480
The first test is actually checking to see
244

244

00:12:10,480  -->  00:12:12,480
whether the score is greater than 1000,
245

245

00:12:12,800  -->  00:12:15,030
the second test is checking to see
246

246

00:12:15,030  -->  00:12:18,900
whether it's '> 500 and it's < 1000'.
247

247

00:12:18,900  -->  00:12:22,570
So consequently, if the score is exactly 1000
248

248

00:12:22,570  -->  00:12:24,570
it actually bypasses all of these and just
249

249

00:12:24,570  -->  00:12:27,100
goes down to the final else and returns '4'.
250

250

00:12:27,100  -->  00:12:30,520
So what we should really have done there, ... is put
251

251

00:12:30,520  -->  00:12:34,420
equals (=) there, so if the playerScore >= 1000
252

252

00:12:34,420  -->  00:12:36,580
that's going to be position '1' in the high score table,
253

253

00:12:36,580  -->  00:12:38,270
So it's just that change,
254

254

00:12:38,270  -->  00:12:40,370
and likewise in 'Player 2', if the score is
255

255

00:12:40,370  -->  00:12:46,290
'>= 500 && it's < 1000 to return 2'.
256

256

00:12:46,290  -->  00:12:47,840
And the last test will be:
257

257

00:12:47,840  -->  00:12:52,070
'if(playerScore >= 100 && playerScore <500)'.
258

258

00:12:52,070  -->  00:12:53,710
So if we do that, that should actually fix
259

259

00:12:53,710  -->  00:12:55,740
all our logic problems. So if we just actually 'Run' that,
260

260

00:12:55,740  -->  00:12:59,730
again we find that Louise
261

261

00:12:59,730  -->  00:13:01,880
managed to get into position 1 on the highscore
262

262

00:13:01,880  -->  00:13:03,700
table now, and that's now because we're now
263

263

00:13:03,700  -->  00:13:06,030
correctly checking to see whether the score is
264

264

00:13:06,030  -->  00:13:07,860
greater than or equal to 1000,
265

265

00:13:07,860  -->  00:13:15,780
and likewise if I do a couple more copies here,
266

266

00:13:16,380  -->  00:13:19,410
And the next one will be a test for 500.
267

267

00:13:19,590  -->  00:13:21,410
In the previous version of the test,
268

268

00:13:21,410  -->  00:13:23,290
we were only testing for greater than 500
269

269

00:13:23,290  -->  00:13:24,870
and then less than 500 in the next one,
270

270

00:13:24,870  -->  00:13:26,870
so that would have slipped to position 4.
271

271

00:13:26,870  -->  00:13:27,890
That should now work.
272

272

00:13:27,890  -->  00:13:34,170
So if we change that to 500, Carol.
273

273

00:13:34,820  -->  00:13:37,750
And the last test that also had a similar problem.
274

274

00:13:37,750  -->  00:13:39,540
We're only checking whether the value is
275

275

00:13:39,540  -->  00:13:41,590
greater than 100, so we should really put
276

276

00:13:41,590  -->  00:13:43,540
'>= 100' which we've done there, so that
277

277

00:13:43,540  -->  00:13:45,540
should now work okay.
278

278

00:13:45,540  -->  00:13:49,150
So we put Frank. So now if we 'Run' those,
279

279

00:13:49,150  -->  00:13:51,950
they should all be in their correct positions as well.
280

280

00:13:53,150  -->  00:13:54,800
So we now have Louise managed to get into
281

281

00:13:54,800  -->  00:13:56,570
into position 1 on the high score table.
282

282

00:13:56,570  -->  00:13:58,570
Carol managed to get into position 2
283

283

00:13:58,570  -->  00:14:00,730
and Frank managed to get into position 3.
284

284

00:14:00,730  -->  00:14:02,510
And just as a recap,
285

285

00:14:02,510  -->  00:14:04,490
if I actually remove the equals (=) on all
286

286

00:14:04,490  -->  00:14:07,500
of these to see, to have the code as it was,
287

287

00:14:07,500  -->  00:14:09,690
before I made the change,
288

288

00:14:09,690  -->  00:14:12,880
you'll find that they're actually in a different order.
289

289

00:14:12,880  -->  00:14:15,400
They all, the last three went into position
290

290

00:14:15,400  -->  00:14:17,750
'4' automatically. Louise, Carol and Frank,
291

291

00:14:17,750  -->  00:14:19,700
when really they shouldn't have because of
292

292

00:14:19,700  -->  00:14:22,010
the bug that I had in the code.
293

293

00:14:24,010  -->  00:14:26,120
I'll put the equals back in and 'Run' it again,
294

294

00:14:28,770  -->  00:14:31,130
and we've now got them correctly in the right positions.
295

295

00:14:31,280  -->  00:14:33,160
So thanks to Julian and Michael for
296

296

00:14:33,160  -->  00:14:35,210
pointing that out, and that's
297

297

00:14:35,210  -->  00:14:37,180
the correct code now, that's fixed that logic
298

298

00:14:37,180  -->  00:14:39,180
problem that they found and hopefully
299

299

00:14:39,180  -->  00:14:41,270
your code's now a lot better as a result of that.
300

300

00:14:41,270  -->  00:14:43,420
So keep that in mind, that is actually
301

301

00:14:43,420  -->  00:14:45,420
a really important thing to make sure when your
302

302

00:14:45,420  -->  00:14:47,550
testing your ranges, that you
303

303

00:14:47,550  -->  00:14:49,430
include everything. Now clearly it was a
304

304

00:14:49,430  -->  00:14:51,430
but here that I actually didn't check
305

305

00:14:51,430  -->  00:14:53,530
to see whether the score that you know
306

306

00:14:53,530  -->  00:14:55,410
all scores within that particular
307

307

00:14:55,410  -->  00:14:58,120
range were actually correctly being identified
308

308

00:14:58,120  -->  00:14:59,860
and they weren't in this case. There was
309

309

00:14:59,860  -->  00:15:02,410
3 scores that were slipping through the cracks.
310

310

00:15:02,410  -->  00:15:04,240
Alright, so far we've got a working
311

311

00:15:04,240  -->  00:15:07,320
solution but I'm going to end the video here, in the
312

312

00:15:07,320  -->  00:15:09,320
next one there was actually a bug fix
313

313

00:15:09,320  -->  00:15:11,320
that I want to fix, I want to talk to you about that
314

314

00:15:11,320  -->  00:15:13,320
and show you where the bug is
315

315

00:15:13,320  -->  00:15:15,320
but also, I want to show you an alternative
316

316

00:15:15,320  -->  00:15:17,320
way to write the calculate
317

317

00:15:17,320  -->  00:15:19,320
high score position method
318

318

00:15:19,320  -->  00:15:21,320
and the reason I'm showing you that is just
319

319

00:15:21,320  -->  00:15:23,320
to confirm that there's always almost
320

320

00:15:23,320  -->  00:15:25,320
always multiple ways to create
321

321

00:15:25,320  -->  00:15:27,320
a given solution
322

322

00:15:27,320  -->  00:15:29,320
in a programming language, so I want to show you
323

323

00:15:29,320  -->  00:15:31,320
an alternative way to create that method.
324

324

00:15:31,320  -->  00:15:33,320
So let's start working on that in the next video.
