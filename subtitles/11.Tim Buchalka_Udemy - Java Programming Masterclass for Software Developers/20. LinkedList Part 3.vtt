WEBVTT
1
1

00:00:05.620  -->  00:00:09.660
So in the previous video we actually
implemented our add-in order method,
2

2

00:00:09.660  -->  00:00:14.870
which was a way to iterate through the
list of rare entries in our linked list.
3

3

00:00:14.870  -->  00:00:19.500
And we found out that the list iterator
is great for actually going through
4

4

00:00:19.500  -->  00:00:24.000
linked lists and actually going
through the actual entries one by one.
5

5

00:00:24.000  -->  00:00:27.850
But I just wanna make a point before we
move on and enhance this a little bit,
6

6

00:00:27.850  -->  00:00:31.940
is the first time you actually create
the list iterator, like on this first line
7

7

00:00:31.940  -->  00:00:36.050
here, line 40, that's not actually yet
pointing to the first record.
8

8

00:00:36.050  -->  00:00:40.270
So you actually have to use
a stringListIterator.next
9

9

00:00:40.270  -->  00:00:42.000
to go to the first record.
10

10

00:00:42.000  -->  00:00:44.370
So it's important to know that
the first one is just a set up.
11

11

00:00:44.370  -->  00:00:46.840
It's not automatically
pointing to the first entry.
12

12

00:00:46.840  -->  00:00:51.850
You need to use that .next first to
actually get to the first entry.
13

13

00:00:51.850  -->  00:00:56.420
And one thing I didn't do down here,
was I needed to return true as well.
14

14

00:00:56.420  -->  00:01:01.510
Return true, because at that point,
we know that
15

15

00:01:01.510  -->  00:01:04.820
things have been ordered correctly because
we've been through these other tests here.
16

16

00:01:04.820  -->  00:01:05.990
So, that's why I'm returning true there.
17

17

00:01:05.990  -->  00:01:07.750
Then, obviously,
it makes the method valid.
18

18

00:01:07.750  -->  00:01:09.260
So, that's ListIterator.
19

19

00:01:09.260  -->  00:01:14.600
That's just one method of actually going
through and sorting our capital cities.
20

20

00:01:14.600  -->  00:01:18.270
Now I just wanna make a point that
writing methods with side effects
21

21

00:01:18.270  -->  00:01:20.880
such as using .next is
generally to be avoided.
22

22

00:01:20.880  -->  00:01:22.230
So unless you really
know what you're doing,
23

23

00:01:22.230  -->  00:01:26.080
it's not a good idea to write a method
that both returns a value and
24

24

00:01:26.080  -->  00:01:27.740
changes the object that it's called from.
25

25

00:01:27.740  -->  00:01:29.230
And that's what's
happening in this method.
26

26

00:01:29.230  -->  00:01:32.150
So we're returning the fact
that it's true or false.
27

27

00:01:32.150  -->  00:01:35.310
But we're also modifying the link
list that was parsed by it.
28

28

00:01:35.310  -->  00:01:37.400
We're actually changing
the actual entries.
29

29

00:01:37.400  -->  00:01:39.840
So generally speaking,
you don't wanna do it that way.
30

30

00:01:39.840  -->  00:01:40.830
But the Java people,
31

31

00:01:40.830  -->  00:01:45.690
people who actually created Java, they do
have a pretty good idea of these things,
32

32

00:01:45.690  -->  00:01:48.610
and that's the way they've implemented
iterators to work like that.
33

33

00:01:48.610  -->  00:01:51.380
But generally speaking, again you
probably wouldn't wanna do it that way.
34

34

00:01:51.380  -->  00:01:53.530
So let's get back to our main class,
I should say.
35

35

00:01:53.530  -->  00:01:54.600
And we'll put some code in.
36

36

00:01:54.600  -->  00:01:56.820
And this well test it to
see if it actually works.
37

37

00:01:56.820  -->  00:01:59.400
And if you can actually see
the code all order in there.
38

38

00:01:59.400  -->  00:02:01.390
So we'll come back in here,
because we're gonna code in here already.
39

39

00:02:01.390  -->  00:02:05.080
We got Sydney, Melbourne, Brisbane,
Perth, Canberra, Adelaide and Darwin.
40

40

00:02:05.080  -->  00:02:06.880
So what we need to do to implement this,
41

41

00:02:06.880  -->  00:02:09.340
is we need to change
this code a little bit.
42

42

00:02:09.340  -->  00:02:13.610
We need to add the method
call to our addInOrder, and
43

43

00:02:13.610  -->  00:02:18.780
we need to pass the actual linked list as
well as the entry that we want to save.
44

44

00:02:18.780  -->  00:02:25.260
So we want to do something like
addInOrder, placesToVisit.
45

45

00:02:25.260  -->  00:02:28.300
So that's the linked list that
we're sending to it, in Sydney.
46

46

00:02:29.730  -->  00:02:31.130
So we're going to be calling that method.
47

47

00:02:31.130  -->  00:02:33.710
And I'll just delete some of this so
we can see what we're doing.
48

48

00:02:33.710  -->  00:02:38.680
We're going to be calling the method at an
order when passing the linked list toward,
49

49

00:02:38.680  -->  00:02:42.150
and also the name of the city,
in this case Capital City we want to add.
50

50

00:02:42.150  -->  00:02:43.690
So I'm gonna do that for each one.
51

51

00:02:43.690  -->  00:02:47.670
I'm gonna do one for Melbourne, Brisbane,
Perth, Canberra, Adelaide and Darwin.
52

52

00:02:47.670  -->  00:02:50.750
So I'm gonna go and change these.
53

53

00:02:50.750  -->  00:02:51.370
Melbourne.
54

54

00:02:53.580  -->  00:02:54.290
Brisbane.
55

55

00:02:57.500  -->  00:02:58.170
Perth.
56

56

00:03:02.420  -->  00:03:07.440
Incidentally, this wouldn't be a good
order of actually visiting states, capitol
57

57

00:03:07.440  -->  00:03:12.510
cities in Australia because we're going
sort of left to right of the country.
58

58

00:03:12.510  -->  00:03:16.240
So a lot of extra traveling but it's
purely there for demonstration purposes.
59

59

00:03:16.240  -->  00:03:20.270
Okay, so there's some, so what we then
want to do now that that's been added,
60

60

00:03:20.270  -->  00:03:21.500
we just want to do our printList again.
61

61

00:03:21.500  -->  00:03:24.360
So I printList and
we're passing places to visit.
62

62

00:03:24.360  -->  00:03:28.940
So if we execute that, what should
actually happen is we should get these,
63

63

00:03:28.940  -->  00:03:31.930
actually added, or shown we should say,
in an alphabetical order.
64

64

00:03:31.930  -->  00:03:33.720
So let's just try that.
65

65

00:03:33.720  -->  00:03:34.460
Going to run that.
66

66

00:03:36.830  -->  00:03:38.720
And you can see that is
working quite nicely.
67

67

00:03:38.720  -->  00:03:43.040
You've got Adelaide, Brisbane, Canberra,
Darwin, Melbourne, Perth, and Sydney.
68

68

00:03:43.040  -->  00:03:45.840
So it's actually in the correct order,
which is fantastic.
69

69

00:03:45.840  -->  00:03:48.560
And just to verify that because
the other thing we put in there,
70

70

00:03:48.560  -->  00:03:52.790
we actually put in this comparison
down here if comparison
71

71

00:03:52.790  -->  00:03:57.330
equal is equal to zero to not allow
a destination city to be added twice.
72

72

00:03:57.330  -->  00:03:59.620
So let's just test that
that actually works.
73

73

00:03:59.620  -->  00:04:03.910
So i've put something like addInOrder,
placesToVisit and
74

74

00:04:03.910  -->  00:04:08.290
if we try say Alice Springs,
well of course that should work.
75

75

00:04:08.290  -->  00:04:09.900
Cuz Alice Springs is not on the list.
76

76

00:04:09.900  -->  00:04:10.910
But if we do addInOrder.
77

77

00:04:12.260  -->  00:04:12.890
Places to visit.
78

78

00:04:13.910  -->  00:04:18.000
Darwin, that should actually fail
because it's already in the list.
79

79

00:04:18.000  -->  00:04:21.250
So when we rerun this again we should
find the Alice Springs has been added,
80

80

00:04:21.250  -->  00:04:22.920
but Darwin hasn't been added again.
81

81

00:04:22.920  -->  00:04:26.050
And we should see a message on the screen
indicating that Darwin was not added
82

82

00:04:26.050  -->  00:04:27.480
because it's already included.
83

83

00:04:27.480  -->  00:04:28.930
So we'll paste that in there now.
84

84

00:04:28.930  -->  00:04:31.720
So we can reprint that after
that of those two extra entries.
85

85

00:04:31.720  -->  00:04:34.150
So we tried to add the second one,
run it again.
86

86

00:04:35.860  -->  00:04:38.330
You can see Darwin is already
included as a destination.
87

87

00:04:38.330  -->  00:04:42.510
Now the reason that that message is coming
up earlier than all the is of course
88

88

00:04:42.510  -->  00:04:46.000
is calling the add in order method
first before printing it out.
89

89

00:04:46.000  -->  00:04:48.040
So you can see the Darwin
wasn't duplicated but
90

90

00:04:48.040  -->  00:04:50.080
Alice Springs was correctly
added to the list.
91

91

00:04:50.080  -->  00:04:54.010
So you can see the link lists
are extremely powerful.
92

92

00:04:54.010  -->  00:04:56.410
And it's perfect for the type of data.
93

93

00:04:56.410  -->  00:05:00.660
This scenario I'm actually showing you
where we want to inserting records at
94

94

00:05:00.660  -->  00:05:04.340
a regular basis, when you're needing
to sort things or things like that.
95

95

00:05:04.340  -->  00:05:08.650
This is a great way that we have to do
that, to use linked list for that scenario.
96

96

00:05:08.650  -->  00:05:12.080
So, let's actually now enhance
this a little bit more.
97

97

00:05:12.080  -->  00:05:14.270
So, what we're gonna do is
we're gonna include a menu and
98

98

00:05:14.270  -->  00:05:16.930
it's gonna allow us to decide
when to move onto the next city.
99

99

00:05:16.930  -->  00:05:20.370
And, we can also look at how to go back
to a city we've already visited because
100

100

00:05:20.370  -->  00:05:22.600
that's something we haven't
talked about with linked lists.
101

101

00:05:22.600  -->  00:05:25.020
We've got this .next, which we had.
102

102

00:05:25.020  -->  00:05:26.730
I'll just close that down.
103

103

00:05:26.730  -->  00:05:30.690
The .next which we had in our main,
or our addInOrder method.
104

104

00:05:30.690  -->  00:05:32.480
Of course that went to the next entry.
105

105

00:05:32.480  -->  00:05:35.150
And we saw that on the slides that
I showed in the previous video.
106

106

00:05:35.150  -->  00:05:37.860
But the way that this actually works, and
107

107

00:05:37.860  -->  00:05:41.330
the way that Java has implemented it is
seriously pretty cool because what they've
108

108

00:05:41.330  -->  00:05:45.730
done is I've given you the option to
actually go back in both directions.
109

109

00:05:45.730  -->  00:05:49.000
So you can actually go the next
record in a forward motion.
110

110

00:05:49.000  -->  00:05:50.860
The next, in this case, capital city.
111

111

00:05:50.860  -->  00:05:53.190
But you can also go backwards as well.
112

112

00:05:53.190  -->  00:05:57.110
So in other words, we could, if we're at
Canberra, we could go back to Brisbane.
113

113

00:05:57.110  -->  00:06:00.470
And this is possible because Java
have implemented the link list
114

114

00:06:00.470  -->  00:06:01.730
as a double link list.
115

115

00:06:01.730  -->  00:06:05.500
So in other words it stores a reference
to the previous item as well as a link,
116

116

00:06:05.500  -->  00:06:09.170
a reference I should say,
to the entry that's next as well.
117

117

00:06:09.170  -->  00:06:11.780
So that's pretty cool that it
actually handles both of those.
118

118

00:06:11.780  -->  00:06:13.870
So let's actually add some code and
implement that.
119

119

00:06:13.870  -->  00:06:17.630
We're going to add a method called visit,
which gives you the option of specifying
120

120

00:06:17.630  -->  00:06:20.440
whether you want to go forward or
back when you're actually searching.
121

121

00:06:20.440  -->  00:06:22.580
You'll come down here and
create that method.
122

122

00:06:22.580  -->  00:06:26.320
You're gonna call it
as I mentioned visits.
123

123

00:06:26.320  -->  00:06:29.210
So I private static void visit.
124

124

00:06:31.990  -->  00:06:34.090
And it's going to require
of course the link list.
125

125

00:06:35.850  -->  00:06:37.580
Linked List and
that's going to be to house cities.
126

126

00:06:41.490  -->  00:06:43.660
So we've seen this before,
you can add some Scanner for
127

127

00:06:43.660  -->  00:06:48.710
some inputs, scanner = new Scanner.
128

128

00:06:48.710  -->  00:06:53.370
Scanner is going to be System.in.
129

129

00:06:53.370  -->  00:06:55.410
And we'll put boolean quit = false so
130

130

00:06:55.410  -->  00:06:58.100
we can set that to true if
we want to actually exit.
131

131

00:07:00.600  -->  00:07:07.700
I want a ListIterator of String cuz
that says our data type for our cities.
132

132

00:07:07.700  -->  00:07:12.460
ListIterator = cities.listed Iterator.
133

133

00:07:12.460  -->  00:07:14.790
So, okay, so
the first thing that we have to do.
134

134

00:07:14.790  -->  00:07:17.000
We wanna do a test to see
whether there's no cities.
135

135

00:07:17.000  -->  00:07:21.710
So we can put in cities.getfirst.
136

136

00:07:21.710  -->  00:07:26.700
And that's a way to actually retrieve the
very first entry link in the link list.
137

137

00:07:26.700  -->  00:07:29.830
So if that is equal to nothing.
138

138

00:07:29.830  -->  00:07:32.460
That should be of course,
not setting a value.
139

139

00:07:32.460  -->  00:07:33.810
We're actually comparing it.
140

140

00:07:33.810  -->  00:07:37.500
So it's equal to an entry,
a null entry if that's the case.
141

141

00:07:37.500  -->  00:07:40.090
We're gonna do a system out.
142

142

00:07:40.090  -->  00:07:42.840
No cities in the itinerary.
143

143

00:07:45.700  -->  00:07:46.590
Like so.
144

144

00:07:46.590  -->  00:07:47.960
Then we go to return at that point.
145

145

00:07:47.960  -->  00:07:50.070
We don't wanna do anymore processing
cuz there's nothing to show.
146

146

00:07:52.350  -->  00:07:55.970
And I'm adding this part to the video
after I actually recorded the first bit.
147

147

00:07:55.970  -->  00:07:58.840
I'm not actually too sure why I
actually did this first piece of code
148

148

00:07:58.840  -->  00:08:00.730
here cuz this is not actually right.
149

149

00:08:00.730  -->  00:08:02.900
So .getFirst does actually get the entry.
150

150

00:08:02.900  -->  00:08:03.660
There's no problems there.
151

151

00:08:03.660  -->  00:08:08.440
But the == and the "" is no way
ever to check for a string anyway.
152

152

00:08:08.440  -->  00:08:11.200
And actually, in this case,
it will return an error.
153

153

00:08:11.200  -->  00:08:15.860
So if we actually send this an empty link
list, it will actually return an error.
154

154

00:08:15.860  -->  00:08:19.550
The correct way to actually test this
is to actually to check is empty.
155

155

00:08:19.550  -->  00:08:21.750
So we want isEmpty.
156

156

00:08:23.010  -->  00:08:27.730
So again, I'm inserting this into
the video after so use .isEmpty.
157

157

00:08:27.730  -->  00:08:30.770
So when this little component stops,
we go back to the other video again,
158

158

00:08:30.770  -->  00:08:32.310
you'll see the old code.
159

159

00:08:32.310  -->  00:08:36.420
But ignore that and
use cities.isEmpty in its place.
160

160

00:08:36.420  -->  00:08:39.430
And I'll also make sure I update
that in the source code as well,
161

161

00:08:39.430  -->  00:08:43.490
which you can download if you ever
want to check the code for any reason.
162

162

00:08:43.490  -->  00:08:44.940
Okay, back to the main video.
163

163

00:08:46.790  -->  00:08:51.900
Else, we'll actually put the name that
we're visiting, we'll put so Now Visiting.
164

164

00:08:55.010  -->  00:08:58.970
+ listIterator.next, so we're actually
moving to that first entry again.
165

165

00:08:58.970  -->  00:09:03.030
So getFirst allows you to get
the first entry without actually
166

166

00:09:03.030  -->  00:09:04.220
changing the pointer.
167

167

00:09:04.220  -->  00:09:07.300
But .next actually physically
moves that next entry.
168

168

00:09:07.300  -->  00:09:08.500
At that point we want to print the menu.
169

169

00:09:08.500  -->  00:09:11.740
To get some options,
we're gonna create that method shortly.
170

170

00:09:11.740  -->  00:09:16.190
And then the actual loop
is gonna be while Not quit.
171

171

00:09:16.190  -->  00:09:18.290
So, we're gonna keep going
until quit is set to true.
172

172

00:09:18.290  -->  00:09:24.760
int action = scanner.nextInt, and
we've seen a lot of this code before.
173

173

00:09:24.760  -->  00:09:26.740
So, I'm not gonna spend
any time going through it.
174

174

00:09:26.740  -->  00:09:28.940
We've done this quite a few times.
175

175

00:09:28.940  -->  00:09:32.040
nextLine is gonna clear
the input line after that.
176

176

00:09:32.040  -->  00:09:34.300
I'm gonna go through now and
actually add a few switches.
177

177

00:09:34.300  -->  00:09:36.990
And what we're going to do is,
firstly, case 0.
178

178

00:09:36.990  -->  00:09:41.320
So, if I enter 0,
we're gonna put Holiday over.
179

179

00:09:41.320  -->  00:09:46.770
We'll put Holiday (Vacation).
180

180

00:09:46.770  -->  00:09:50.970
In Australia, we call them holidays, but I
know overseas, it's often called vacation.
181

181

00:09:50.970  -->  00:09:52.100
And we'll put quit = true.
182

182

00:09:54.010  -->  00:09:55.920
Break.
And I've actually forgot,
183

183

00:09:55.920  -->  00:09:59.140
in my haste to type ahead,
to actually put a switch on action.
184

184

00:09:59.140  -->  00:10:00.370
Of course we need to do that.
185

185

00:10:03.980  -->  00:10:06.990
And I'll just paste the case in there,
we can continue going.
186

186

00:10:08.140  -->  00:10:09.600
Okay.
That's what I should have done right
187

187

00:10:09.600  -->  00:10:10.660
the first time.
188

188

00:10:10.660  -->  00:10:14.680
Okay, so that if you enter 0,
then the vacation's over.
189

189

00:10:14.680  -->  00:10:17.980
If we enter 1,
we're going to do the following.
190

190

00:10:17.980  -->  00:10:22.760
We're gonna go Now visiting,
gotta move to the next one,
191

191

00:10:22.760  -->  00:10:26.400
"Now visiting" = listIterator.next.
192

192

00:10:26.400  -->  00:10:28.860
What I need to actually put,
is actually put a test there or
193

193

00:10:28.860  -->  00:10:30.470
course to actually check we can do it.
194

194

00:10:30.470  -->  00:10:32.340
So if(listIterator.hasNext), so
195

195

00:10:32.340  -->  00:10:35.520
we can only go to the next one
if there is an entry there.
196

196

00:10:35.520  -->  00:10:36.400
Then we need to do it that way.
197

197

00:10:38.480  -->  00:10:45.140
Else, wanna print some output to say,
Reached the end of the list.
198

198

00:10:45.140  -->  00:10:47.920
So in other words, we've got to the last
city in the list at that point.
199

199

00:10:47.920  -->  00:10:51.070
So we're gonna keep on going if
I select one to do just that.
200

200

00:10:51.070  -->  00:10:53.280
And of course, importantly,
I need to add a break as well.
201

201

00:10:53.280  -->  00:10:55.340
I'm just going to move
this up a little bit, so
202

202

00:10:55.340  -->  00:10:56.970
I can see the top a little bit better.
203

203

00:10:56.970  -->  00:10:58.450
Okay?
So that's case 1.
204

204

00:10:58.450  -->  00:11:00.750
In case 2, we're gonna do
something we haven't seen before.
205

205

00:11:00.750  -->  00:11:03.110
We're gonna go back to
the previous entries.
206

206

00:11:03.110  -->  00:11:09.210
Case 2, if(listIterator.hasPrevious),
previous goes to the back,
207

207

00:11:09.210  -->  00:11:13.510
as you would suggest, or
goes to the previous entry.
208

208

00:11:13.510  -->  00:11:16.370
We're gonna put, Now visiting.
209

209

00:11:20.550  -->  00:11:23.820
This is rator.previous.
210

210

00:11:23.820  -->  00:11:24.730
Else.
211

211

00:11:27.160  -->  00:11:28.720
We are at the start of the list.
212

212

00:11:32.910  -->  00:11:33.800
So, you can see what we've done there.
213

213

00:11:33.800  -->  00:11:36.090
So, 0 is typed.
214

214

00:11:36.090  -->  00:11:38.510
We're going to end the holiday so
that's our way of exiting out.
215

215

00:11:38.510  -->  00:11:43.840
If 1's typed, we're going to go to
the next entry, the next city in our list.
216

216

00:11:43.840  -->  00:11:47.210
But, if 2 is typed, we're going
to go back to the previous entry.
217

217

00:11:47.210  -->  00:11:50.620
So, in other words, then, we also need
to do a test to see whether there's
218

218

00:11:50.620  -->  00:11:54.250
Previous and we also have to do
listIterator.previous as well.
219

219

00:11:54.250  -->  00:11:58.470
And just to be clear, because we're
doing the .next, you might be wondering,
220

220

00:11:58.470  -->  00:12:00.290
well, how does it know it's a string?
221

221

00:12:00.290  -->  00:12:05.110
Well if you recall, when we actually,
at the start, we defined the listIterator,
222

222

00:12:05.110  -->  00:12:07.560
we actually said it was
on top string here.
223

223

00:12:07.560  -->  00:12:12.240
So consequently, when we're actually going
to print this out, system.out.print line,
224

224

00:12:12.240  -->  00:12:15.750
it knows .next, it looks at that and
says oh okay, that's a string.
225

225

00:12:15.750  -->  00:12:17.440
And that's why it can
actually print that out.
226

226

00:12:17.440  -->  00:12:20.940
That, of course, is the same for
next and also for previous.
227

227

00:12:20.940  -->  00:12:24.850
And then case 3, we're just going
to add our only data break there.
228

228

00:12:24.850  -->  00:12:25.750
Case 3,
229

229

00:12:25.750  -->  00:12:28.880
we're going to add just to redraw the menu
in case it's going off the screen.
230

230

00:12:28.880  -->  00:12:33.870
You've forgotten the option, so
we'll printMenu and break on that as well.
231

231

00:12:33.870  -->  00:12:35.270
Of course,
we haven't implemented that yet.
232

232

00:12:35.270  -->  00:12:39.450
Okay, so that's the basic visit class.
233

233

00:12:39.450  -->  00:12:42.590
What we need to do is now
implement that printMenu as well.
234

234

00:12:42.590  -->  00:12:44.470
And that's gonna be very basic as well.
235

235

00:12:44.470  -->  00:12:48.160
So we're going to just go into here, and
236

236

00:12:48.160  -->  00:12:53.590
we're going to just do our
private static void printMenu.
237

237

00:12:56.300  -->  00:12:58.530
Available actions.
238

238

00:13:01.360  -->  00:13:03.710
Press.
239

239

00:13:03.710  -->  00:13:05.030
Then we'll do.
240

240

00:13:07.450  -->  00:13:09.540
Row 0 to quit.
241

241

00:13:15.680  -->  00:13:20.530
1, go to, oops,
242

242

00:13:20.530  -->  00:13:24.770
go to next city.
243

243

00:13:24.770  -->  00:13:27.560
2, go to previous city.
244

244

00:13:31.700  -->  00:13:35.400
And 3, print menu options.
245

245

00:13:37.600  -->  00:13:39.580
So that's our print menu.
246

246

00:13:39.580  -->  00:13:40.480
So let's now try this.
247

247

00:13:40.480  -->  00:13:43.860
Let's now add the code to
actually start the visit command.
248

248

00:13:43.860  -->  00:13:49.180
So we're going to just actually call
the visit method, I should say command.
249

249

00:13:49.180  -->  00:13:51.330
And check that it does, and
we'll just see what happens.
250

250

00:13:51.330  -->  00:13:55.400
So we're gonna put visit(placesToVisit).
251

251

00:13:55.400  -->  00:13:56.750
So if we run that now.
252

252

00:13:58.870  -->  00:14:03.130
Okay, so available actions,
it now says, Now visiting Adelaide.
253

253

00:14:03.130  -->  00:14:05.590
So if you go to the next city, type 1.
254

254

00:14:05.590  -->  00:14:07.040
Now visiting Alice Springs.
255

255

00:14:07.040  -->  00:14:08.510
Go to the next entry.
256

256

00:14:08.510  -->  00:14:09.680
Visiting Brisbane.
257

257

00:14:09.680  -->  00:14:11.500
Next entry, visiting Canberra.
258

258

00:14:11.500  -->  00:14:13.500
If you try to go back
to the previous city.
259

259

00:14:15.590  -->  00:14:16.880
You notice there's a problem.
260

260

00:14:16.880  -->  00:14:18.110
You notice what's happening?
261

261

00:14:18.110  -->  00:14:19.780
Why did it actually double up there?
262

262

00:14:19.780  -->  00:14:21.660
Actually notice that it
seemed to not work, and
263

263

00:14:21.660  -->  00:14:23.690
then it actually started going
back in the right order.
264

264

00:14:23.690  -->  00:14:26.770
Well the problem is that Java does not
implement the link list in quite the way
265

265

00:14:26.770  -->  00:14:28.340
that we've actually described.
266

266

00:14:28.340  -->  00:14:32.170
Now there's actually an explanation of
the listIterator I wanted to you show you
267

267

00:14:32.170  -->  00:14:35.630
on the screen to help you sort of
understand how this actually works.
268

268

00:14:35.630  -->  00:14:40.050
So let's just open a browser,
gonna paste this link in.
269

269

00:14:40.050  -->  00:14:42.540
There we go, that's the listIterator,
and if you actually go through here and
270

270

00:14:42.540  -->  00:14:43.720
actually have a look,
271

271

00:14:43.720  -->  00:14:47.960
you see that the problem actually is that
there's no current position as such.
272

272

00:14:47.960  -->  00:14:50.880
So the listIterator actually hovers
between the items that would be
273

273

00:14:50.880  -->  00:14:54.190
returned when you go to previous or
you go to next.
274

274

00:14:54.190  -->  00:14:57.850
So if you go forward with one and
then go back with two, then go forward
275

275

00:14:57.850  -->  00:15:00.820
with one etc, you never actually leave
the city that you're actually in.
276

276

00:15:00.820  -->  00:15:02.230
So this is actually a problem.
277

277

00:15:02.230  -->  00:15:04.100
But there actually is a good reason for
this.
278

278

00:15:04.100  -->  00:15:07.720
So, it's ahead of actually allowed
access to the item at .next or
279

279

00:15:07.720  -->  00:15:09.020
previous in the normal way.
280

280

00:15:09.020  -->  00:15:12.350
Then an error would actually
lead to loops in the list.
281

281

00:15:12.350  -->  00:15:14.900
For example, if it made a mistake where
we're moving Perth from the list,
282

282

00:15:14.900  -->  00:15:16.570
we'd end up with something like this.
283

283

00:15:16.570  -->  00:15:17.660
And I'll just show this on the screen.
284

284

00:15:17.660  -->  00:15:19.520
And we'll just go to that entry.
285

285

00:15:20.680  -->  00:15:24.370
So in this scenario, if again, if I had
left it how you would think it would
286

286

00:15:24.370  -->  00:15:28.670
normally work, then traversing in this
would then return Sidney, Alice Springs,
287

287

00:15:28.670  -->  00:15:32.480
Melbourne, Brisbane, Alice Springs,
Melbourne, Brisbane, Alice Springs,
288

288

00:15:32.480  -->  00:15:33.280
Melbourne, Brisbane.
289

289

00:15:33.280  -->  00:15:37.110
So it's sort of like an infinite loop, and
of course, we don't want that to happen.
290

290

00:15:37.110  -->  00:15:40.490
So this is like a really sufficiently
serious problem in the past that
291

291

00:15:40.490  -->  00:15:42.830
algorithms have been developed for
detecting and
292

292

00:15:42.830  -->  00:15:45.050
fixing loops in structures
like linked lists.
293

293

00:15:45.050  -->  00:15:46.980
So you can Google
something like Tortoise and
294

294

00:15:46.980  -->  00:15:49.410
the Hare Algorithm if you wanna
do that in your own time.
295

295

00:15:49.410  -->  00:15:51.810
You'll see that there's actually
a big issue with that, and
296

296

00:15:51.810  -->  00:15:54.670
that's about this linked list
sort of looping over itself.
297

297

00:15:54.670  -->  00:15:58.050
But the great thing is that Java
have it set up in such a way,
298

298

00:15:58.050  -->  00:15:59.730
that that is not going to happen to you.
299

299

00:15:59.730  -->  00:16:02.050
So it doesn't really allow you to make
that type of mistake where you'll
300

300

00:16:02.050  -->  00:16:02.590
get into a loop.
301

301

00:16:02.590  -->  00:16:06.250
What it does mean, is we need to keep
tracking of which direction we're going,
302

302

00:16:06.250  -->  00:16:08.690
and allow for
the in between nature of the iterater.
303

303

00:16:08.690  -->  00:16:09.380
>> So in other words,
304

304

00:16:09.380  -->  00:16:11.890
there's a little bit more work that
you need to do to get that to work.
305

305

00:16:11.890  -->  00:16:13.890
But in the scheme of things,
it's not really that hard.
306

306

00:16:13.890  -->  00:16:17.980
So let's just go back and modify that
code, to get it working correctly.
307

307

00:16:17.980  -->  00:16:20.520
What we actually really need to do is,
go back to our visit method.
308

308

00:16:20.520  -->  00:16:22.610
And I'll close down this
to make a bit of space, or
309

309

00:16:22.610  -->  00:16:24.380
disconnect to close the program down.
310

310

00:16:25.930  -->  00:16:27.570
Going to go back here now, to our visit.
311

311

00:16:27.570  -->  00:16:29.790
And we need to add another variable.
312

312

00:16:29.790  -->  00:16:32.890
We need to put a variable
to track the direction.
313

313

00:16:32.890  -->  00:16:37.630
So then we'll call it goingForward,
we'll set that to true.
314

314

00:16:37.630  -->  00:16:40.410
And what we need to do is,
when we're going forward or backwards,
315

315

00:16:40.410  -->  00:16:42.990
we'll need to do a test and
we need to set that direction.
316

316

00:16:42.990  -->  00:16:46.370
We'll start off with the first one,
which is goingForward, case one.
317

317

00:16:46.370  -->  00:16:49.580
So we're going to put if(!goingForward),
so
318

318

00:16:49.580  -->  00:16:52.790
in other words, that the user has
previously selected going back.
319

319

00:16:52.790  -->  00:16:56.930
Then we need to do for test input,
if (listIterator.hasNext()
320

320

00:16:59.330  -->  00:17:06.510
listIterator.next() and
then, goingForward=true.
321

321

00:17:06.510  -->  00:17:09.440
If we're doing that additional
check to actually make sure,
322

322

00:17:09.440  -->  00:17:12.380
that we actually can go,
that there is the ability to go next.
323

323

00:17:12.380  -->  00:17:14.340
And then actually go to
the next entry again, so
324

324

00:17:14.340  -->  00:17:16.360
that we can actually
continue where we left off.
325

325

00:17:16.360  -->  00:17:19.320
So it's actually let that extra step
that I talked about to make sure that
326

326

00:17:19.320  -->  00:17:21.320
[INAUDIBLE] scenario where
you're doing a loop.
327

327

00:17:21.320  -->  00:17:23.120
And likewise if we're going backwards.
328

328

00:17:23.120  -->  00:17:30.530
If it's actually going forward currently,
then we put if (listIterator.has,
329

329

00:17:30.530  -->  00:17:36.370
if it's got a previous record,
we go then to the previous entry.
330

330

00:17:36.370  -->  00:17:37.350
Like so.
331

331

00:17:37.350  -->  00:17:41.130
And of course we set
going forward = false.
332

332

00:17:41.130  -->  00:17:45.190
So just as a recap, again what we're
doing is, we're actually setting this up.
333

333

00:17:45.190  -->  00:17:49.270
If the user has selected to go forward and
if we count it not going forward,
334

334

00:17:49.270  -->  00:17:52.710
we check to see whether there's
an entry we can go forward to.
335

335

00:17:52.710  -->  00:17:53.970
We set it to go there.
336

336

00:17:53.970  -->  00:17:57.700
That sets it up in the right direction so
that the following code actually works.
337

337

00:17:57.700  -->  00:18:02.560
And the other thing I'll need to do
here is the end, going forward = false.
338

338

00:18:02.560  -->  00:18:05.840
Because we reached the end of the list,
so there's no more way to go forward.
339

339

00:18:05.840  -->  00:18:10.060
So, we're gonna set that to false, once we
actually have reached the end of the list.
340

340

00:18:10.060  -->  00:18:14.620
And likewise, if we get to the start
of the list., to the very first entry,
341

341

00:18:14.620  -->  00:18:16.420
we need to do a similar thing.
342

342

00:18:16.420  -->  00:18:21.260
We need to set goingForward,
need to set that to true.
343

343

00:18:21.260  -->  00:18:25.090
Because that's the only direction we can
go now, cuz we've reached the first entry.
344

344

00:18:25.090  -->  00:18:27.880
So we automatically change the direction,
in pointing forward again.
345

345

00:18:27.880  -->  00:18:30.540
So you can see what we're doing there,
so we're just controlling the state.
346

346

00:18:30.540  -->  00:18:33.140
We're just doing a little
bit more house keeping,
347

347

00:18:33.140  -->  00:18:36.930
to make sure that in the event that
we're going in a particular direction,
348

348

00:18:36.930  -->  00:18:40.580
once we reach either the start,
in this case, with the going forward.
349

349

00:18:40.580  -->  00:18:44.430
So in this case, if we actually are going
forward, what we're doing is we're doing
350

350

00:18:44.430  -->  00:18:48.270
a test to make sure that if we weren't
going forward, prior to the actual menu
351

351

00:18:48.270  -->  00:18:51.540
option being selected, we need to point
in that direction to be going forward.
352

352

00:18:51.540  -->  00:18:55.080
But also, if we get to the end of
the list, we need to set going forward to
353

353

00:18:55.080  -->  00:18:59.370
false, which means from now on we'll
actually be navigating going backwards.
354

354

00:18:59.370  -->  00:19:02.240
And we're doing the reverse in
this scenario with case two.
355

355

00:19:02.240  -->  00:19:05.930
If we were going forward, but
the user has selected to go previous,
356

356

00:19:05.930  -->  00:19:08.200
then we need to check
whether we can go previous.
357

357

00:19:08.200  -->  00:19:11.570
If we can, we go to that previous entry
to point it in the right direction.
358

358

00:19:11.570  -->  00:19:14.300
Then we set our flag to the fact
that we actually are going
359

359

00:19:14.300  -->  00:19:16.570
in a backwards direction,
going to the previous entry.
360

360

00:19:16.570  -->  00:19:20.870
And likewise when we reach the start
of the list, the very first entry.
361

361

00:19:20.870  -->  00:19:24.430
We can't actually go to any other previous
records cuz we're at the first one, so
362

362

00:19:24.430  -->  00:19:25.790
we're set going forward to true.
363

363

00:19:25.790  -->  00:19:28.690
So hopefully that sort of makes sense,
of what we've actually done.
364

364

00:19:28.690  -->  00:19:32.430
So there's actually an extra check,
there's an extra .next you need to
365

365

00:19:32.430  -->  00:19:36.740
actually use, and the .previous if you're
moving from one direction to another.
366

366

00:19:36.740  -->  00:19:39.190
So just to confirm that's working,
lets actually run it.
367

367

00:19:41.990  -->  00:19:42.830
So let's just try it now.
368

368

00:19:42.830  -->  00:19:44.470
So we can see we're now visiting Adelaide.
369

369

00:19:44.470  -->  00:19:48.030
We're gonna got to the next city,
Alice Springs, Brisbane.
370

370

00:19:48.030  -->  00:19:52.910
So let's go back to the previous city now,
Alice Springs, Adelaide.
371

371

00:19:52.910  -->  00:19:54.550
We're at the start of the list, so
we're not getting an error there.
372

372

00:19:54.550  -->  00:19:58.960
So now if we go back, I'll go to the next
entry, or next city I should say.
373

373

00:19:58.960  -->  00:20:01.300
We're back to Adelaide again,
cuz that's the first one in the list.
374

374

00:20:01.300  -->  00:20:03.540
One, one, we can keep on going.
375

375

00:20:03.540  -->  00:20:07.310
We've reached the end of the list.
376

376

00:20:07.310  -->  00:20:08.590
It's not actually letting us do a thing.
377

377

00:20:08.590  -->  00:20:11.390
It's not gonna let us go further and
it's not crashing.
378

378

00:20:11.390  -->  00:20:14.010
And go back again, and
it goes backwards just fine.
379

379

00:20:14.010  -->  00:20:16.690
So that's actually it,
that's how to actually achieve that, and
380

380

00:20:16.690  -->  00:20:17.870
to get our link list working.
381

381

00:20:17.870  -->  00:20:19.150
So I hope you actually enjoyed that.
382

382

00:20:19.150  -->  00:20:22.360
It can take a little while to get
your head around link lists, but
383

383

00:20:22.360  -->  00:20:23.910
they are extremely powerful.
384

384

00:20:23.910  -->  00:20:26.730
And especially with the way that
Java have implemented them,
385

385

00:20:26.730  -->  00:20:30.100
to avoid you having to get in this
scenario where there's an infinite loop
386

386

00:20:30.100  -->  00:20:32.320
that we talked about in
the Power Point slide.
387

387

00:20:32.320  -->  00:20:35.000
So you don't need to worry about that,
you just need to do a little bit more
388

388

00:20:35.000  -->  00:20:38.070
housekeeping, if you do want your lists to
have the capability of going into the next
389

389

00:20:38.070  -->  00:20:40.490
entry and the previous entry,
but you've never seen that code.
390

390

00:20:40.490  -->  00:20:42.990
So in the next video,
it's time for a challenge.
391

391

00:20:42.990  -->  00:20:45.000
So, I will see you in that next video.
