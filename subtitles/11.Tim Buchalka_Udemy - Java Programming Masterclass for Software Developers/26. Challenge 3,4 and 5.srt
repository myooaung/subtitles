1
1

00:00:04,270  -->  00:00:07,090
ok so let's set a few more methods to
2

2

00:00:07,090  -->  00:00:09,190
the bank account class we're going to
3

3

00:00:09,190  -->  00:00:11,830
need those for the next challenge we're
4

4

00:00:11,830  -->  00:00:13,290
going to add one method that gets the
5

5

00:00:13,290  -->  00:00:15,360
bank account number and a second method
6

6

00:00:15,360  -->  00:00:18,070
that prints the bank account number
7

7

00:00:18,070  -->  00:00:19,860
i'm going to start at the bottom of the
8

8

00:00:19,860  -->  00:00:23,680
class...
9

9

00:00:23,680  -->  00:00:29,620
...
10

10

00:00:29,620  -->  00:00:49,660
...
11

11

00:00:49,660  -->  00:00:54,570
alright so let's move on to the
12

12

00:00:54,570  -->  00:01:03,310
challenge and see what that's all about
13

13

00:01:03,310  -->  00:01:05,830
alright so challenge three is to make
14

14

00:01:05,830  -->  00:01:07,900
the bank account class thread-safe again
15

15

00:01:07,900  -->  00:01:11,200
using the synchronized keyword so we added
16

16

00:01:11,200  -->  00:01:12,760
those two new methods that you saw me
17

17

00:01:12,760  -->  00:01:14,620
add you want to update the code so that
18

18

00:01:14,620  -->  00:01:16,690
the bank account class is thread-safe
19

19

00:01:16,690  -->  00:01:19,570
and actually use the synchronized
20

20

00:01:19,570  -->  00:01:22,090
keyword when necessary so that's a
21

21

00:01:22,090  -->  00:01:22,840
challenge
22

22

00:01:22,840  -->  00:01:24,580
pause the video now and go away and
23

23

00:01:24,580  -->  00:01:26,170
complete the challenge and when you're
24

24

00:01:26,170  -->  00:01:28,150
ready to come back and see what I've
25

25

00:01:28,150  -->  00:01:29,980
come up with for the solution you can
26

26

00:01:29,980  -->  00:01:31,960
play the video again so pause the video
27

27

00:01:31,960  -->  00:01:40,240
and I'll see you when you get back okay
28

28

00:01:40,240  -->  00:01:41,970
so here's the solution to challenge
29

29

00:01:41,970  -->  00:01:44,700
three
30

30

00:01:44,700  -->  00:01:47,150
and sorry to tell you that was a bit of
31

31

00:01:47,150  -->  00:01:49,250
a trick challenge we'd actually don't
32

32

00:01:49,250  -->  00:01:52,020
have to make any changes to the code and
33

33

00:01:52,020  -->  00:01:53,820
that's because both threads only read the
34

34

00:01:53,820  -->  00:01:55,770
account number so therefore thread
35

35

00:01:55,770  -->  00:01:58,610
interference isn't an issue now it would
36

36

00:01:58,610  -->  00:02:00,500
actually be a mistake to synchronize the
37

37

00:02:00,500  -->  00:02:02,390
get account number and print account number
38

38

00:02:02,390  -->  00:02:04,640
methods in this scenario and that's
39

39

00:02:04,640  -->  00:02:06,470
because would be over synchronizing the
40

40

00:02:06,470  -->  00:02:09,030
code and applications with a large
41

41

00:02:09,030  -->  00:02:10,710
number of threads that can have a
42

42

00:02:10,710  -->  00:02:12,530
noticeably negative impact on
43

43

00:02:12,530  -->  00:02:15,290
performance sorry for the trick but it's
44

44

00:02:15,290  -->  00:02:17,090
important to understand where and when
45

45

00:02:17,090  -->  00:02:19,260
not to synchronize code this was a
46

46

00:02:19,260  -->  00:02:20,730
situation where we didn't need to
47

47

00:02:20,730  -->  00:02:22,530
actually synchronize anything else
48

48

00:02:22,530  -->  00:02:24,590
ok so let's move on to the next
49

49

00:02:24,590  -->  00:02:34,590
challenge challenge 4
50

50

00:02:34,590  -->  00:02:37,050
so challenge 4 now is to use a
51

51

00:02:37,050  -->  00:02:40,340
re-entrant lock so instead of using the
52

52

00:02:40,340  -->  00:02:42,450
synchronized keyword that we've done so
53

53

00:02:42,450  -->  00:02:44,700
far in the bank account class we want to
54

54

00:02:44,700  -->  00:02:46,800
use the reentrant lock to make the bank
55

55

00:02:46,800  -->  00:02:49,860
account class thread safe so that your
56

56

00:02:49,860  -->  00:02:51,420
challenges is write implement the
57

57

00:02:51,420  -->  00:02:54,290
reentrant lock class into the bank
58

58

00:02:54,290  -->  00:02:56,510
account class so have go with that challenge
59

59

00:02:56,510  -->  00:02:58,700
and i'll see you when you get back
60

60

00:02:58,700  -->  00:03:05,380
so pause the video now
61

61

00:03:05,380  -->  00:03:07,570
alright challenge 4 let's talk about
62

62

00:03:07,570  -->  00:03:09,400
the solution before we go into writing
63

63

00:03:09,400  -->  00:03:13,310
some code
64

64

00:03:13,310  -->  00:03:15,120
so we need to create a lock
65

65

00:03:15,120  -->  00:03:17,700
object and to use the lock method in the
66

66

00:03:17,700  -->  00:03:20,120
withdraw and deposits methods 2 things
67

67

00:03:20,120  -->  00:03:21,650
to keep in mind here
68

68

00:03:21,650  -->  00:03:24,900
firstly both threads need to compete for
69

69

00:03:24,900  -->  00:03:27,590
the same lock so we create only one lock
70

70

00:03:27,590  -->  00:03:29,510
object that we use in all the methods
71

71

00:03:29,510  -->  00:03:32,400
that have critical sections of code
72

72

00:03:32,400  -->  00:03:34,470
secondly want to put the critical
73

73

00:03:34,470  -->  00:03:36,290
section of code within a try finally
74

74

00:03:36,290  -->  00:03:38,340
block to ensure that the lock will be
75

75

00:03:38,340  -->  00:03:42,120
released no matter what and to set aside
76

76

00:03:42,120  -->  00:03:44,120
don't forget to create the lock instance
77

77

00:03:44,120  -->  00:03:46,140
in the bank account constructor
78

78

00:03:46,140  -->  00:03:48,320
alright so on to actually implementing this
79

79

00:03:48,320  -->  00:03:50,220
in code let's go back to IntelliJ
80

80

00:03:50,220  -->  00:03:54,840
alright so firstly to the
81

81

00:03:54,840  -->  00:03:57,690
bank account class and let's go and add
82

82

00:03:57,690  -->  00:04:00,780
a field for our lock to the class so we're
83

83

00:04:00,780  -->  00:04:06,480
going to create a private lock....
84

84

00:04:06,480  -->  00:04:08,250
....
85

85

00:04:08,250  -->  00:04:10,950
...
86

86

00:04:10,950  -->  00:04:26,190
...
87

87

00:04:26,190  -->  00:04:27,380
....
88

88

00:04:27,380  -->  00:04:30,810
...
89

89

00:04:30,810  -->  00:05:17,310
...
90

90

00:05:17,310  -->  00:05:18,810
....
91

91

00:05:18,810  -->  00:05:24,210
...
92

92

00:05:24,210  -->  00:05:38,810
...
93

93

00:05:38,810  -->  00:05:39,620
so that's actually it
94

94

00:05:39,620  -->  00:05:41,660
so we've converted that rentrant
95

95

00:05:41,660  -->  00:05:44,180
lock now and we've initialized the
96

96

00:05:44,180  -->  00:05:46,430
renteran lock in the constructor obviously
97

97

00:05:46,430  -->  00:05:48,130
we added the the field on line fourteen
98

98

00:05:48,130  -->  00:05:50,410
as well to be able to do that if you
99

99

00:05:50,410  -->  00:05:52,370
recall we wanted to compete for the same
100

100

00:05:52,370  -->  00:05:55,220
lock which is why we've created that in
101

101

00:05:55,220  -->  00:05:56,510
the bank account class and we are
102

102

00:05:56,510  -->  00:05:58,760
initializing it to the bank account
103

103

00:05:58,760  -->  00:06:01,010
constructor then were using the lock
104

104

00:06:01,010  -->  00:06:02,750
. lock in both the deposit and
105

105

00:06:02,750  -->  00:06:05,360
withdraw methods and having a try-catch
106

106

00:06:05,360  -->  00:06:07,790
or not so much a catch but a
107

107

00:06:07,790  -->  00:06:10,310
try finally so that we can guarantee the
108

108

00:06:10,310  -->  00:06:11,990
lock is unlocked and then we're just
109

109

00:06:11,990  -->  00:06:13,910
putting the critical section of code
110

110

00:06:13,910  -->  00:06:16,490
within the try to either add the amount
111

111

00:06:16,490  -->  00:06:18,280
or deduct the amount based on whether
112

112

00:06:18,280  -->  00:06:19,850
we're calling the deposit or withdrawal
113

113

00:06:19,850  -->  00:06:22,190
method so that's it that's challenge 4
114

114

00:06:22,190  -->  00:06:24,050
completed so let's move on now to
115

115

00:06:24,050  -->  00:06:32,440
challenge 5
116

116

00:06:32,440  -->  00:06:35,710
ok so challenge 5 is to use a try lock
117

117

00:06:35,710  -->  00:06:39,160
with a timeout value instead of using
118

118

00:06:39,160  -->  00:06:41,230
the lock method which we just seen i'm
119

119

00:06:41,230  -->  00:06:43,510
going to use try lock or I am asking you to
120

120

00:06:43,510  -->  00:06:46,720
implement try lock with a timeout value of
121

121

00:06:46,720  -->  00:06:47,800
one second
122

122

00:06:47,800  -->  00:06:50,230
now if the waiting period times out we want
123

123

00:06:50,230  -->  00:06:51,490
to print the message could not get the
124

124

00:06:51,490  -->  00:06:54,760
lock to the console and it's a hint here
125

125

00:06:54,760  -->  00:06:56,380
use the form of the try lock method
126

126

00:06:56,380  -->  00:06:59,020
that accepts two parameters the first
127

127

00:06:59,020  -->  00:07:01,150
parameter is the timeout value and the
128

128

00:07:01,150  -->  00:07:03,430
second parameter is the time unit of the
129

129

00:07:03,430  -->  00:07:05,620
first parameter and I suggest you use
130

130

00:07:05,620  -->  00:07:07,450
time-out . milliseconds for that
131

131

00:07:07,450  -->  00:07:09,910
second parameter alright so go ahead and
132

132

00:07:09,910  -->  00:07:13,120
have a go at implementing try lock in this
133

133

00:07:13,120  -->  00:07:15,400
code and pause the video now and i'll
134

134

00:07:15,400  -->  00:07:21,100
see you when you get back alright so
135

135

00:07:21,100  -->  00:07:23,860
onto the solution for challenge five so
136

136

00:07:23,860  -->  00:07:26,410
the only real wrinkle here with using
137

137

00:07:26,410  -->  00:07:28,540
the try lock method is that it can
138

138

00:07:28,540  -->  00:07:31,180
throw an interruptedexception so we also
139

139

00:07:31,180  -->  00:07:33,550
have to handle that and also if you
140

140

00:07:33,550  -->  00:07:34,990
think about it we're going to call
141

141

00:07:34,990  -->  00:07:37,000
unlock only if the try lock call
142

142

00:07:37,000  -->  00:07:39,310
returns true and the thread gets the
143

143

00:07:39,310  -->  00:07:41,470
lock so the try lock method
144

144

00:07:41,470  -->  00:07:43,630
times out then the method will return
145

145

00:07:43,630  -->  00:07:45,940
false and the thread won't get the lock
146

146

00:07:45,940  -->  00:07:47,890
so obviously in that case we don't want
147

147

00:07:47,890  -->  00:07:50,500
to try and unlock it and also that's
148

148

00:07:50,500  -->  00:07:52,480
scenario its going to execute the
149

149

00:07:52,480  -->  00:07:53,980
else code that we're going to put in
150

150

00:07:53,980  -->  00:07:56,980
there instead and you might be tempted
151

151

00:07:56,980  -->  00:07:59,200
to put the finally block after the catch
152

152

00:07:59,200  -->  00:08:01,660
for interruptedexception or rearrange
153

153

00:08:01,660  -->  00:08:03,220
the try-catch block in some other way
154

154

00:08:03,220  -->  00:08:05,650
that's problematic but I suggest you
155

155

00:08:05,650  -->  00:08:07,000
don't do it that way but you do it the
156

156

00:08:07,000  -->  00:08:08,320
way that I'm going to show you now
157

157

00:08:08,320  -->  00:08:10,270
alright so let's have a look at the
158

158

00:08:10,270  -->  00:08:12,850
deposit record first so again it's
159

159

00:08:12,850  -->  00:08:14,260
probably quicker if I just delete the
160

160

00:08:14,260  -->  00:08:15,660
method since its
161

161

00:08:15,660  -->  00:08:17,710
so small rather than trying to sort of
162

162

00:08:17,710  -->  00:08:20,740
adapt it first we need that outer try
163

163

00:08:20,740  -->  00:08:22,300
so....
164

164

00:08:22,300  -->  00:08:23,770
...
165

165

00:08:23,770  -->  00:08:28,360
...and the reason
166

166

00:08:28,360  -->  00:08:29,950
we're catching that is the try lock
167

167

00:08:29,950  -->  00:08:33,340
actually catches or throws can
168

168

00:08:33,340  -->  00:08:35,020
potentially throw a
169

169

00:08:35,020  -->  00:08:37,240
interruptedexception so we need to
170

170

00:08:37,240  -->  00:08:39,610
handle that i'm not going to actually do
171

171

00:08:39,610  -->  00:08:41,580
anything in there i'm just going to do
172

172

00:08:41,580  -->  00:08:43,030
something here you would normally handle
173

173

00:08:43,030  -->  00:08:43,750
that in the case have been
174

174

00:08:43,750  -->  00:08:45,210
interruptedexception
175

175

00:08:45,210  -->  00:08:47,740
the next to use the try lock we're going to
176

176

00:08:47,740  -->  00:08:52,770
put.....
177

177

00:08:52,770  -->  00:08:54,730
....
178

178

00:08:54,730  -->  00:08:56,820
...
179

179

00:08:56,820  -->  00:09:43,720
...
180

180

00:09:43,720  -->  00:09:45,910
....so let's just
181

181

00:09:45,910  -->  00:09:47,620
go through and type the same thing in for
182

182

00:09:47,620  -->  00:09:51,000
withdraw is going to be identical other
183

183

00:09:51,000  -->  00:09:52,660
than the fact we deducting the amount and
184

184

00:09:52,660  -->  00:09:55,440
not adding it but it's good practice to
185

185

00:09:55,440  -->  00:09:57,160
type this again just to go through it
186

186

00:09:57,160  -->  00:10:00,390
again again we're setting up a try with
187

187

00:10:00,390  -->  00:10:02,410
a catch of the....
188

188

00:10:02,410  -->  00:10:09,100
interruptedexception and the reason
189

189

00:10:09,100  -->  00:10:10,420
we're doing that is the try lock which
190

190

00:10:10,420  -->  00:10:12,910
were about to type in actually throws
191

191

00:10:12,910  -->  00:10:17,860
interruptedexception....
192

192

00:10:17,860  -->  00:10:23,070
....
193

193

00:10:23,070  -->  00:10:25,500
...
194

194

00:10:25,500  -->  00:10:28,750
....
195

195

00:10:28,750  -->  00:10:30,930
...
196

196

00:10:30,930  -->  00:10:33,430
...
197

197

00:10:33,430  -->  00:10:37,320
....
198

198

00:10:37,320  -->  00:10:53,050
....
199

199

00:10:53,050  -->  00:10:55,050
...
200

200

00:10:55,050  -->  00:10:56,090
....
201

201

00:10:56,090  -->  00:11:01,970
....
202

202

00:11:01,970  -->  00:11:05,570
alright so that's challenge 5 solution
203

203

00:11:05,570  -->  00:11:08,180
completed so let's end the video here
204

204

00:11:08,180  -->  00:11:10,640
now in the next video we'll move on that
205

205

00:11:10,640  -->  00:11:12,620
and have a look at challenge six so
206

206

00:11:12,620  -->  00:11:18,580
we'll see you next video
