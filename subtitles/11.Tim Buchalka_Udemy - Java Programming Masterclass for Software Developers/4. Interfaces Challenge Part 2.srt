0
1
00:00:05,510 --> 00:00:09,270
So in the previous video,
we started work on our challenge solution.
1

2
00:00:09,270 --> 00:00:12,820
So I went through and we've introduced the
basic concept of the ISaveable interface,
2

3
00:00:12,820 --> 00:00:15,210
as well as creating a class,
3

4
00:00:15,210 --> 00:00:18,090
a player class that actually
implemented that interface.
4

5
00:00:18,090 --> 00:00:21,550
And as you saw that the actual
methods that we created will take
5

6
00:00:21,550 --> 00:00:24,670
any class that implements
the ISaveable interface.
6

7
00:00:24,670 --> 00:00:28,350
So, player was one example, but
we can actually create a monster class for
7

8
00:00:28,350 --> 00:00:32,230
the game and persist that data, the data
relating to that, in the same way.
8

9
00:00:32,230 --> 00:00:34,740
Monsters are very similar to the players,
but they don't have weapons,
9

10
00:00:34,740 --> 00:00:36,960
just their natural claws and
fangs as we're gonna do here.
10

11
00:00:36,960 --> 00:00:38,160
So, the point about this is,
11

12
00:00:38,160 --> 00:00:42,350
by creating this other class,
you can still use these other methods and
12

13
00:00:42,350 --> 00:00:46,640
create some pretty cool code that
actually saves the state of the monsters.
13

14
00:00:46,640 --> 00:00:47,530
So, lets do that now.
14

15
00:00:47,530 --> 00:00:53,680
So I'm going to create a new class,
Monster, and it's going to implement.
15

16
00:00:56,300 --> 00:01:00,830
Implements the ISaveable interface.
16

17
00:01:00,830 --> 00:01:04,950
And we're gonna start off having a name,
private String name,
17

18
00:01:04,950 --> 00:01:09,700
private int hitPoints,
how strong the creature is in other words.
18

19
00:01:09,700 --> 00:01:14,210
private int strength, like so,
and I'm going to create a public
19

20
00:01:14,210 --> 00:01:17,450
constructor that's going to
accept those three parameters.
20

21
00:01:17,450 --> 00:01:19,010
And so we can set them like so.
21

22
00:01:19,010 --> 00:01:21,580
And we're going to create some getters,
actually we don't need getters, we
22

23
00:01:21,580 --> 00:01:25,200
actually need setters, because we're gonna
do the setting setup in the constructor.
23

24
00:01:25,200 --> 00:01:27,970
So, I'll create the getters for
each of those.
24

25
00:01:27,970 --> 00:01:29,470
So we can access those.
25

26
00:01:29,470 --> 00:01:32,080
Okay, so let's create the toString.
26

27
00:01:32,080 --> 00:01:34,650
So I've selected that and
there's different options here,
27

28
00:01:34,650 --> 00:01:36,370
the one I normally use is this one here.
28

29
00:01:36,370 --> 00:01:39,450
The first one string [INAUDIBLE] which was
the one that was selected originally, but
29

30
00:01:39,450 --> 00:01:41,740
I just wanted to point out that
you can actually experiment and
30

31
00:01:41,740 --> 00:01:43,350
try some other things
if you wanna do that.
31

32
00:01:43,350 --> 00:01:45,870
But that will be the working fine for this
example, so we're gonna click on that.
32

33
00:01:45,870 --> 00:01:48,470
And that's our toString,
which we'll see and use later.
33

34
00:01:48,470 --> 00:01:52,720
And of course, the last two things
we need to create now in this class,
34

35
00:01:52,720 --> 00:01:56,050
or override, is the two methods,
the write and read.
35

36
00:01:56,050 --> 00:01:57,540
So we're gonna go down
to Implement Methods,
36

37
00:01:57,540 --> 00:01:59,990
in our Generate, select both of them.
37

38
00:01:59,990 --> 00:02:03,640
And we've now got the list, and you can
see it's using the generic lists now,
38

39
00:02:03,640 --> 00:02:04,380
which is good.
39

40
00:02:04,380 --> 00:02:07,890
So let's actually start off by
creating the write method, so
40

41
00:02:07,890 --> 00:02:10,680
that's going to be
arrayList of strings again.
41

42
00:02:10,680 --> 00:02:15,840
values = new ArrayList,
42

43
00:02:15,840 --> 00:02:21,710
like so, values.add(0,
43

44
00:02:21,710 --> 00:02:25,000
this.name).
44

45
00:02:25,000 --> 00:02:29,470
I could have used a getter
there if I wanted to,
45

46
00:02:29,470 --> 00:02:32,930
.add(1, this.hitPoints).
46

47
00:02:32,930 --> 00:02:40,720
values.add(2, this.strength).
47

48
00:02:42,400 --> 00:02:43,720
And return values.
48

49
00:02:46,970 --> 00:02:48,430
Like so, so that's our write method.
49

50
00:02:48,430 --> 00:02:52,550
Very similar to the other method we wrote
in the player class with the same name,
50

51
00:02:52,550 --> 00:02:54,330
but of course, we've got one less full.
51

52
00:02:54,330 --> 00:02:55,950
We haven't got a weapon for the monster.
52

53
00:02:55,950 --> 00:02:57,620
And likewise,
the read is gonna be pretty much the same.
53

54
00:02:57,620 --> 00:03:01,690
If savedValues is not equal to null, and
54

55
00:03:01,690 --> 00:03:06,720
savedValues.size is > 0,
then and only then,
55

56
00:03:06,720 --> 00:03:12,610
we're going to actually try and
retrieve the [INAUDIBLE].
56

57
00:03:12,610 --> 00:03:17,830
So this time, .name = savedValues.get(0).
57

58
00:03:17,830 --> 00:03:23,300
this.hitPoints = Integer.parseInt().
58

59
00:03:23,300 --> 00:03:28,060
And that's going to be savedValues.get(1),
and
59

60
00:03:28,060 --> 00:03:34,400
this.strength =
Integer.parseInt(savedValues.get(2)).
60

61
00:03:35,860 --> 00:03:37,420
So, and that's truly it.
61

62
00:03:37,420 --> 00:03:40,450
So again, we are still implementing
the write and read methods for
62

63
00:03:40,450 --> 00:03:42,790
this class because we
implemented the interface.
63

64
00:03:42,790 --> 00:03:46,140
This code could be completely
different if we wanted it to be.
64

65
00:03:46,140 --> 00:03:49,460
But in this case, it's pretty identical
to what was in the player class.
65

66
00:03:49,460 --> 00:03:52,090
I mean, there's one less field to
actually save and then ultimately load.
66

67
00:03:52,090 --> 00:03:55,600
And then intents of going back and running
this, we can go back to our main method.
67

68
00:03:55,600 --> 00:04:00,110
And we could do something like Saveable,
68

69
00:04:00,110 --> 00:04:06,160
ISaveable werewolf = new
Monster("Werewolf"),
69

70
00:04:06,160 --> 00:04:11,710
and hit points, 20, strength, 40, maybe?
70

71
00:04:11,710 --> 00:04:14,050
We can print out the werewolf.
71

72
00:04:15,380 --> 00:04:17,720
And we can also save the object.
72

73
00:04:17,720 --> 00:04:19,930
saveObject(werewolf), just to
see what actually happens.
73

74
00:04:19,930 --> 00:04:23,170
And I'll take out this load here now,
so we don't go through that again.
74

75
00:04:23,170 --> 00:04:25,670
So we can actually check it, cuz we
did that at the end of the last video.
75

76
00:04:25,670 --> 00:04:26,660
And we'll actually run this.
76

77
00:04:31,450 --> 00:04:34,140
And you can see now we've got monster now
because werewolf hit points equal 20,
77

78
00:04:34,140 --> 00:04:34,930
strength equals 40.
78

79
00:04:34,930 --> 00:04:39,070
Saving werewolf to storage device, saving
20 to storage device cuz werewolf was
79

80
00:04:39,070 --> 00:04:42,750
obviously the name, 20 was the hit points,
and 40 was the strength.
80

81
00:04:42,750 --> 00:04:46,780
So that's working as well, so you can say
that there are obvious advantages to this
81

82
00:04:46,780 --> 00:04:50,750
ISaveable interface, in that we're
guaranteeing what's a contract to confirm
82

83
00:04:50,750 --> 00:04:54,630
that if a class is implementing this
interface, it has to implement that code.
83

84
00:04:54,630 --> 00:04:58,530
So it's a way for you to make sure that
those particular methods are overwritten,
84

85
00:04:58,530 --> 00:05:00,970
so that the actual functionality
that is needed for
85

86
00:05:00,970 --> 00:05:04,640
that class is actually written, and
it doesn't fall back to the super code,
86

87
00:05:04,640 --> 00:05:07,900
the code that would be in a base
class if you were using Inheritance.
87

88
00:05:07,900 --> 00:05:10,710
The other thing I wanna point out,
just close this down.
88

89
00:05:10,710 --> 00:05:14,950
If you go back up here to where we
were with printing out the object,
89

90
00:05:14,950 --> 00:05:19,350
what we can't really do here so
I'll actually create a new object but
90

91
00:05:19,350 --> 00:05:23,090
what we can't do is we can't
do werewolf.getStrength.
91

92
00:05:23,090 --> 00:05:27,430
Obviously, we get an error and of course
going back here though to monster,
92

93
00:05:27,430 --> 00:05:29,200
we actually have got a method.
93

94
00:05:29,200 --> 00:05:32,980
We've got a getter, we set up a getter for
get.strength, but it's not working.
94

95
00:05:32,980 --> 00:05:34,040
It's not working in there.
95

96
00:05:34,040 --> 00:05:37,230
Now if you want to actually, if you
know that this is the monster class, and
96

97
00:05:37,230 --> 00:05:39,480
we know that because we've
implemented that here.
97

98
00:05:39,480 --> 00:05:43,740
We've actually used that when
we're instantiating a new object.
98

99
00:05:43,740 --> 00:05:46,310
And you actually want to use the
get.strength, and what you have to do is
99

100
00:05:46,310 --> 00:05:48,660
do something a little bit different
to what you've done before.
100

101
00:05:48,660 --> 00:05:52,590
But you're actually printing it out, we'll
do something like this, we'd actually do,
101

102
00:05:52,590 --> 00:05:55,440
let's just assume that line there
we wanted to print it out, and so
102

103
00:05:55,440 --> 00:05:56,420
we got to print it out.
103

104
00:05:56,420 --> 00:06:00,080
That's obviously still not gonna work
like the way it is there now, but
104

105
00:06:00,080 --> 00:06:04,000
what we can actually do, is actually
do this, we can actually put monster.
105

106
00:06:07,570 --> 00:06:11,790
Werewolf, but get.strength like so,
we need to put a bracket there as well.
106

107
00:06:11,790 --> 00:06:15,820
Once we do that, it's now valid, because
what we're doing is we're casting it,
107

108
00:06:15,820 --> 00:06:17,310
we're actually saying this,
108

109
00:06:17,310 --> 00:06:20,540
yes we know that this base class
will use the ISaveable interface.
109

110
00:06:20,540 --> 00:06:24,150
But when it comes time to print it out,
what we're saying is now this is actually
110

111
00:06:24,150 --> 00:06:27,830
the monster class, and remembering that
we're implementing the interface but
111

112
00:06:27,830 --> 00:06:29,680
it still actually is the monster class.
112

113
00:06:29,680 --> 00:06:33,010
So we're doing that when we run this,
it's the code is now valid and
113

114
00:06:33,010 --> 00:06:34,380
we can actually go ahead and do that.
114

115
00:06:34,380 --> 00:06:36,430
So I can actually change that now and
just confirm.
115

116
00:06:36,430 --> 00:06:36,970
We can put something like.
116

117
00:06:40,860 --> 00:06:41,960
Like so, and if we run it.
117

118
00:06:44,810 --> 00:06:47,050
You can see it's actually working there,
Strength = 40.
118

119
00:06:47,050 --> 00:06:48,490
So that's how you get around that,
119

120
00:06:48,490 --> 00:06:50,950
the fact that you actually
declared to this in an interface.
120

121
00:06:50,950 --> 00:06:53,930
But if you still wanna get access
to it and get access to specific
121

122
00:06:53,930 --> 00:06:57,830
methods that are actually in the actual
class, in this case, the monster class.
122

123
00:06:57,830 --> 00:06:59,020
That's actually how you'll
do it with a class.
123

124
00:06:59,020 --> 00:06:59,770
Remember again,
124

125
00:06:59,770 --> 00:07:03,230
the other thing you can do if you wanted
to, you can actually just come back here.
125

126
00:07:03,230 --> 00:07:07,480
We can literally just put the code in
there in which case we can then do
126

127
00:07:07,480 --> 00:07:11,430
werewolf.getstrength, and
that would actually work.
127

128
00:07:11,430 --> 00:07:15,780
So it all depends on how you actually go
ahead with the declaration, whether you
128

129
00:07:15,780 --> 00:07:18,930
decide to actually do as I'm showing on
the screen there, if I just undo this now.
129

130
00:07:20,100 --> 00:07:21,990
Okay, back to the ISaveable interface.
130

131
00:07:21,990 --> 00:07:26,060
So it can be a little bit confusing in
deciding when to declare an instance as
131

132
00:07:26,060 --> 00:07:26,850
the class.
132

133
00:07:26,850 --> 00:07:32,070
In this case, play, in this case, monster
or player or when you know using ISaveable
133

134
00:07:32,070 --> 00:07:35,890
interface when actually declaring
the instance like here is the interface.
134

135
00:07:35,890 --> 00:07:39,090
Generally speaking, it depends on what
you're going to do with the instance.
135

136
00:07:39,090 --> 00:07:42,670
So if you wanted to declare a variable
that can hold objects of different types,
136

137
00:07:42,670 --> 00:07:45,360
then it would have to be
the type of the common interface.
137

138
00:07:45,360 --> 00:07:48,670
But if you want to access methods that
exist in the class like we wanted to do in
138

139
00:07:48,670 --> 00:07:52,220
the case of monster, we wanted to
get access to get.strength, but
139

140
00:07:52,220 --> 00:07:53,870
they're not part of the interface itself.
140

141
00:07:53,870 --> 00:07:57,290
Cuz obviously you go back to interface,
there's no get.strength in there.
141

142
00:07:57,290 --> 00:08:01,070
So if we wanted to do something
like you saw me do here,
142

143
00:08:01,070 --> 00:08:04,170
then the object will have to be
declared as the class type itself,
143

144
00:08:04,170 --> 00:08:07,220
unless you wanna get around it by
using a class like you saw there.
144

145
00:08:07,220 --> 00:08:10,540
Generally speaking, where there's no
strong reason for using the class type, so
145

146
00:08:10,540 --> 00:08:14,650
in this case there isn't really a strong
need for us to use the monster class type.
146

147
00:08:14,650 --> 00:08:17,320
Because we've got these generic
methods for reading and writing, and
147

148
00:08:17,320 --> 00:08:19,040
we can access those in a similar way.
148

149
00:08:19,040 --> 00:08:20,480
So that being the case, generally,
149

150
00:08:20,480 --> 00:08:23,420
you'll probably wanna declare
it using the interface.
150

151
00:08:23,420 --> 00:08:26,830
And that really is, I do anyway, because
that keeps your code more generic and
151

152
00:08:26,830 --> 00:08:29,720
makes sure you're getting the best
out of using the interfaces.
152

153
00:08:29,720 --> 00:08:33,240
You can always cast the instance to the interface or class type as necessary.
153

154
00:08:33,240 --> 00:08:34,380
Keep that in mind as well.
154

155
00:08:34,380 --> 00:08:37,880
Also notice that parameters to methods
that have been declared as the interface
155

156
00:08:37,880 --> 00:08:41,350
type are automatically cast from the class
type for us, which is pretty cool.
156

157
00:08:41,350 --> 00:08:45,760
So, Java does some of that work for you,
to make sure that that's actually there so
157

158
00:08:45,760 --> 00:08:49,550
you can sort of move to and fro with
the declaration being an ISaveable.
158

159
00:08:49,550 --> 00:08:51,710
Or if you're actually doing an,
in this case,
159

160
00:08:51,710 --> 00:08:53,940
actually using the Monster class itself.
160

161
00:08:53,940 --> 00:08:55,370
Okay, so that's interfaces.
161

162
00:08:55,370 --> 00:08:56,710
I hope you got a lot out of that.
162

163
00:08:56,710 --> 00:08:59,130
And I'll end the video here now,
and I'll see you in the next video.
