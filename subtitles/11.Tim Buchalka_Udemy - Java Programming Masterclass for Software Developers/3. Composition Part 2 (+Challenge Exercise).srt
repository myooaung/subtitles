our Bedroom object.
187
1

00:12:41,590  -->  00:12:46,670
We created a method called make bed,
which then itself called the method,
188

2

00:12:46,670  -->  00:12:48,060
bed from the bed object.
189

3

00:12:49,150  -->  00:12:53,690
So all we have to do there
is put bedroom.makebed.
190

4

00:12:53,690  -->  00:12:57,060
That's how we make the bed.
191

5

00:12:57,060  -->  00:13:02,240
And the other way of accessing it,
which was by the getter, bedroom.
192

6

00:13:02,240  -->  00:13:08,750
.getLamp.turnOn.
193

7

00:13:08,750  -->  00:13:09,690
Let's try running that.
194

8

00:13:14,440  -->  00:13:18,630
So you can see the bedroom class was
called first, making the bed which it then
195

9

00:13:18,630  -->  00:13:22,750
in turn called the method make from
the bed object that was, that's part and
196

10

00:13:22,750  -->  00:13:26,490
parcel of this class, and then of
course the other way of accessing it
197

11

00:13:26,490  -->  00:13:29,200
which is by the getter,
use that to access the lamp
198

12

00:13:29,200  -->  00:13:33,890
object which again is part of our
bedroom object and turned on the light.
199

13

00:13:33,890  -->  00:13:37,120
So you can see that composition is very
very powerful, and as we progress through
200

14

00:13:37,120  -->  00:13:42,010
this course you will see examples of
Composition and, as I mentioned earlier,
201

15

00:13:42,010  -->  00:13:46,720
you'll understand more where to use
inheritance and where to use composition.
202

16

00:13:46,720  -->  00:13:49,480
As a general rule,
you would aim for composition.
203

17

00:13:49,480  -->  00:13:52,830
Generally, that's what a lot of object
orientation programming experts suggest
204

18

00:13:52,830  -->  00:13:55,150
you do, is at least look at that first.
205

19

00:13:55,150  -->  00:13:57,410
So hopefully you did
well on your challenge,
206

20

00:13:57,410  -->  00:14:00,370
in the next video we're going
to talk about encapsulation,
207

21

00:14:00,370  -->  00:14:03,370
which is another component of
object orientated programming.
208

22

00:14:03,370  -->  00:14:06,620
And something that you've actually
been using for some time now but
209

23

00:14:06,620  -->  00:14:10,130
probably weren't aware
that you were using it.
210

24

00:14:10,130  -->  00:14:13,480
So I'm going to explain that in
more detail in the next video.
50
50, "yellow"), whatever you want it to do.
28

25

00:01:49,430  -->  00:01:56,020
Using the getter or we could access it
directly, accessing the variable directly.
29

26

00:01:56,020  -->  00:01:58,420
It really depends the way
you're setting yourself up.
30

27

00:01:58,420  -->  00:02:00,970
Probably the better way of doing it
would be the way that I'm showing you
31

28

00:02:00,970  -->  00:02:03,820
now with the monitor on the screen because
we don't really need those getters,
32

29

00:02:03,820  -->  00:02:05,550
they're not actually
adding anything you us.
33

30

00:02:05,550  -->  00:02:06,060
They're not adding,
34

31

00:02:06,060  -->  00:02:10,330
they're really just making the code
a little more complex than what we need.
35

32

00:02:10,330  -->  00:02:12,600
If we needed to do something else,
36

33

00:02:12,600  -->  00:02:16,510
in other words if we had needed to
check whether the case had been.
37

34

00:02:16,510  -->  00:02:20,120
If we needed to check whether the objects
had been initialized, we're looking for
38

35

00:02:20,120  -->  00:02:22,510
something else,
some other sort of form of validation or
39

36

00:02:22,510  -->  00:02:26,300
verification, we might wanna
leave those getters in there.
40

37

00:02:26,300  -->  00:02:29,130
What we could actually do is actually
get rid of those altogether.
41

38

00:02:29,130  -->  00:02:32,780
To make our code look
a bit more streamlined and
42

39

00:02:32,780  -->  00:02:36,350
then just access those variables directly.
43

40

00:02:36,350  -->  00:02:38,750
Of course, that's the case.
44

41

00:02:38,750  -->  00:02:41,150
So we've now got public
function called powerUp and
45

42

00:02:41,150  -->  00:02:44,690
a private function called drawLogo,
and of course, the powerUp function of
46

43

00:02:44,690  -->  00:02:48,100
the PC will draw that logo on the screen,
as I mentioned before.
47

44

00:02:48,100  -->  00:02:50,530
We go back to our main class.
48

45

00:02:50,530  -->  00:02:54,800
Obviously these methods won't work anymore
because we've actually deleted them, so
49

46

00:02:54,800  -->  00:02:56,070
I'm gonna delete those.
50

47

00:02:56,070  -->  00:03:02,110
But what we could do is put
thePC.powerUp(), if we run that,
51

48

00:03:07,990  -->  00:03:12,060
You'll see that the power button
was pressed drawing pixels at 1250
52

49

00:03:12,060  -->  00:03:16,610
in color yellow, so obviously to access
that we access thePC.powerUp method.
53

50

00:03:16,610  -->  00:03:21,960
So I went to our PC, powerUp method,
which calls theCase.pressPowerButton,
54

51

00:03:21,960  -->  00:03:27,990
which then references the case objective
that's been created for this class.
55

52

00:03:27,990  -->  00:03:33,140
And if you have a look at case code,
it's calling the pressPowerButton" method,
56

53

00:03:33,140  -->  00:03:36,700
to show that message on the screen,
and of course the second thing it did
57

54

00:03:36,700  -->  00:03:42,140
was it actually drew the logo and
it used the monitor.drawPixelAt method.
58

55

00:03:42,140  -->  00:03:45,550
And of course the monitor method
does the system output there.
59

56

00:03:45,550  -->  00:03:47,890
So that, in essence,
is what composition is.
60

57

00:03:47,890  -->  00:03:51,090
It's actually creating
objects within objects.
61

58

00:03:51,090  -->  00:03:54,730
So you're having like a master object,
in this case the PC is managing and
62

59

00:03:54,730  -->  00:03:59,080
looking after, and
this is using composition to achieve that,
63

60

00:03:59,080  -->  00:04:02,280
as opposed to inheritance that we
looked at in the previous video.
64

61

00:04:02,280  -->  00:04:05,460
So in our future video,
what I'm going to do is explain
65

62

00:04:05,460  -->  00:04:09,340
where you should be using inheritance and
where you should be using composition.
66

63

00:04:09,340  -->  00:04:12,710
As a general rule, when you're
designing your programs in Java,
67

64

00:04:12,710  -->  00:04:16,010
you probably wanna look
at composition first.
68

65

00:04:16,010  -->  00:04:19,210
So if you do any sort of research on the
Internet, most of the experts will tell
69

66

00:04:19,210  -->  00:04:23,830
you that as a rule, to look at using
composition before inheritance.
70

67

00:04:23,830  -->  00:04:27,550
And it does give you the added
advantages and more flexibility.
71

68

00:04:27,550  -->  00:04:31,250
But with that said, it does depend on the
solution what you're trying to achieve.
72

69

00:04:31,250  -->  00:04:32,510
Okay, so it's challenge time.
73

70

00:04:52,910  -->  00:04:57,810
So the challenge is to create a single
room of a house using composition.
74

71

00:04:57,810  -->  00:05:00,850
So think about the things that
should be included in this room.
75

72

00:05:00,850  -->  00:05:03,090
Maybe some physical parts of the house.
76

73

00:05:03,090  -->  00:05:04,970
Maybe some physical parts of the room.
77

74

00:05:04,970  -->  00:05:06,510
But also furniture as well if you like.
78

75

00:05:06,510  -->  00:05:10,250
Anything you think should
be included in the room.
79

76

00:05:10,250  -->  00:05:12,760
You can create as many objects as you want
80

77

00:05:12,760  -->  00:05:16,590
to compose this add until whatever
level of detail you wanna get into.
81

78

00:05:16,590  -->  00:05:20,730
Make sure you add at least one method
to access an object that is composed
82

79

00:05:20,730  -->  00:05:25,440
which is part of that main class to
be accessing that var getter and
83

80

00:05:25,440  -->  00:05:29,650
then access via a public method that
object that was returned from the getter.
84

81

00:05:29,650  -->  00:05:32,460
And you saw me do that
in the previous video.
85

82

00:05:32,460  -->  00:05:36,060
And also then has at least one method
to hide the object completely.
86

83

00:05:36,060  -->  00:05:37,700
In other words, not using the getter.
87

84

00:05:37,700  -->  00:05:41,210
Basically exits that object
from another public class, and
88

85

00:05:41,210  -->  00:05:43,030
you saw me do that in this video.
89

86

00:05:43,030  -->  00:05:45,360
So go ahead and do that and
see what you can come back with.
90

87

00:05:45,360  -->  00:05:49,300
And when you're ready, come back and
check out my solution.
91

88

00:05:49,300  -->  00:05:51,570
So pause the video now and
I'll see you back shortly.
92

89

00:05:54,430  -->  00:05:58,730
Okay, hopefully you managed to figure it
out, and you had some fun along the way.
93

90

00:05:58,730  -->  00:06:02,390
Let's go ahead and
now implement one possible scenario, so
94

91

00:06:02,390  -->  00:06:04,940
what I'm going to do is
implement a bedroom.
95

92

00:06:04,940  -->  00:06:08,170
So I'm gonna create first the main class.
96

93

00:06:08,170  -->  00:06:09,010
We'll call it Bedroom.
97

94

00:06:11,490  -->  00:06:15,690
And I'm going to have a bedroom and
it's gonna first have a name.
98

95

00:06:15,690  -->  00:06:17,600
Even though we know it's a bedroom,
it's gonna have a name anyway.
99

96

00:06:17,600  -->  00:06:20,360
Like team's bedroom or
something like that.
100

97

00:06:20,360  -->  00:06:23,720
And I'm going to create
an object called wall.
101

98

00:06:23,720  -->  00:06:26,340
I'm gonna have wall one through four.
102

99

00:06:29,380  -->  00:06:32,760
Obviously there's four walls.
103

100

00:06:32,760  -->  00:06:33,740
I'm gonna have a ceiling.
104

101

00:06:39,320  -->  00:06:43,980
Going to have a bed cuz it's a bedroom.
105

102

00:06:43,980  -->  00:06:47,360
And I just want accessory,
let's go for the lamp.
106

103

00:06:49,960  -->  00:06:53,000
Okay, I'm now gonna create the
constructor, which is gonna be everything.
107

104

00:06:53,000  -->  00:06:54,580
There are quite a few things there.
108

105

00:06:54,580  -->  00:06:59,170
And just to keep things simple,
I'm gonna create a getter for lamp,
109

106

00:06:59,170  -->  00:07:01,300
I'll just create it manually.
110

107

00:07:08,700  -->  00:07:12,760
And let's create a public method for
making the bed.
111

108

00:07:15,860  -->  00:07:19,090
And I'm going to put a note there
to indicate what we're doing.
112

109

00:07:19,090  -->  00:07:23,730
We're in the bedroom class making bed.
113

110

00:07:23,730  -->  00:07:27,110
And then we're going to drop bed.make.
114

111

00:07:27,110  -->  00:07:29,810
Okay, so I'm going to just breeze
through these other classes,
115

112

00:07:29,810  -->  00:07:31,510
cuz they're gonna be pretty basic.
116

113

00:07:31,510  -->  00:07:33,150
Let's create the wall class first.
117

114

00:07:34,270  -->  00:07:37,980
We'll call it wall, and
we're just gonna have one field.
118

115

00:07:40,050  -->  00:07:42,270
We'll call it direction, where's facing.
119

116

00:07:44,820  -->  00:07:46,060
And let's just create a constructor.
120

117

00:07:46,060  -->  00:07:50,250
And let's create a getter.
121

118

00:07:52,160  -->  00:07:52,950
Very simple wall.
122

119

00:07:54,450  -->  00:07:55,840
With a ceiling.
123

120

00:07:55,840  -->  00:07:59,690
Let's do something similar so we're gonna
do create a ceiling, class ceiling.
124

121

00:08:02,830  -->  00:08:04,210
This one I'm going to have a height.
125

122

00:08:06,380  -->  00:08:07,250
With a ceiling start.
126

123

00:08:07,250  -->  00:08:10,120
So let's just go with, say, painted color.
127

124

00:08:10,120  -->  00:08:12,260
What the current color of the ceiling is.
128

125

00:08:12,260  -->  00:08:12,890
Constructor.
129

126

00:08:15,240  -->  00:08:16,800
And also getter as well.
130

127

00:08:21,810  -->  00:08:24,790
And you can see now as I'm correcting
that some of these errors are going away
131

128

00:08:24,790  -->  00:08:27,080
because I'm creating the classes.
132

129

00:08:27,080  -->  00:08:32,360
Next I'm gonna create the bed class.
133

130

00:08:32,360  -->  00:08:36,710
The bed starts with Install.
134

131

00:08:36,710  -->  00:08:41,780
Installer bed, how many pillows?
135

132

00:08:43,890  -->  00:08:48,320
What the height is of the bed from
the ground, maybe the number of sheets,
136

133

00:08:49,460  -->  00:08:52,310
and whether it has a quilt,
or how many quilts.
137

134

00:08:55,130  -->  00:08:56,130
Create a constructor.
138

135

00:08:58,830  -->  00:09:04,960
And we'll create our getters.
139

136

00:09:04,960  -->  00:09:07,130
But then we also need to
create our make method,
140

137

00:09:07,130  -->  00:09:09,730
because if you recall we're
using bed.make over here.
141

138

00:09:11,150  -->  00:09:16,800
So let's create that as well, and
we'll call that it's a void method and
142

139

00:09:16,800  -->  00:09:20,520
we'll call it make, and
we'll just have a simple message there.
143

140

00:09:20,520  -->  00:09:25,730
Puts this timer in the bed class, making.
144

141

00:09:28,880  -->  00:09:30,730
Okay, so we've now created that as well.
145

142

00:09:30,730  -->  00:09:33,200
And our bedroom class is looking good.
146

143

00:09:33,200  -->  00:09:34,860
Now we've just got
the lamp to implement now.
147

144

00:09:36,130  -->  00:09:37,070
Gonna create that now.
148

145

00:09:39,020  -->  00:09:39,850
Lamp.
149

146

00:09:39,850  -->  00:09:44,940
Let's try private String style;
150

147

00:09:44,940  -->  00:09:49,350
private boolean battery;.
151

148

00:09:49,350  -->  00:09:51,260
Is it a battery powered lamp, yes or no?
152

149

00:09:51,260  -->  00:09:59,830
And globRating; perhaps.
153

150

00:09:59,830  -->  00:10:00,580
Rate the Constructor.
154

151

00:10:02,220  -->  00:10:03,470
And let's create the getters.
155

152

00:10:06,870  -->  00:10:09,260
Let's create a method
here to turn on the lamp.
156

153

00:10:09,260  -->  00:10:11,710
So public void turn on.
157

154

00:10:22,910  -->  00:10:24,910
Turning on.
158

155

00:10:24,910  -->  00:10:28,960
So it shouldn't have gotten rid of all
that error so now a valid class there,
159

156

00:10:28,960  -->  00:10:29,790
which is good.
160

157

00:10:29,790  -->  00:10:34,210
So let's go back to our main
method now and implement this.
161

158

00:10:34,210  -->  00:10:38,410
So what I'm going to do is start by
creating our walls, I'm gonna put wall.
162

159

00:10:42,010  -->  00:10:44,890
Wall1= new wall
163

160

00:10:46,910  -->  00:10:54,250
type ("West") create four walls.
164

161

00:10:59,850  -->  00:11:03,430
South and North.
165

162

00:11:03,430  -->  00:11:04,930
I'll make them more unique.
166

163

00:11:09,830  -->  00:11:10,890
We need a ceiling.
167

164

00:11:16,540  -->  00:11:19,960
If you recall,
we said it's a 12-foot ceiling.
168

165

00:11:19,960  -->  00:11:24,260
Painted color, just an integer, 55.
169

166

00:11:24,260  -->  00:11:25,550
We need to create a bed.
170

167

00:11:25,550  -->  00:11:32,220
We can write bed = new Bed.
171

168

00:11:32,220  -->  00:11:37,340
Modern, four pillows, three foot perhaps,
172

169

00:11:37,340  -->  00:11:40,230
two sheets, and a quilt.
173

170

00:11:40,230  -->  00:11:41,610
So there's our bed.
174

171

00:11:41,610  -->  00:11:47,830
Lastly we need to create a lamp so
lamp equals new lamp.
175

172

00:11:50,050  -->  00:11:53,450
That's classic, false no battery.
176

173

00:11:53,450  -->  00:11:55,590
And we'll say 75 is the globe rating.
177

174

00:11:58,520  -->  00:12:02,840
So, we've now got the base objects
that we can now pass to our
178

175

00:12:02,840  -->  00:12:05,640
bedroom to create this new bedroom.
179

176

00:12:05,640  -->  00:12:10,580
So, to do that, we need bedroom equals
new bedroom_bedroom equals new bedroom.
180

177

00:12:13,000  -->  00:12:14,960
Of course the parameters it
needs is the bedroom name.
181

178

00:12:14,960  -->  00:12:20,100
We'll call it Tim's room, or
just Tim's will be enough
182

179

00:12:20,100  -->  00:12:27,080
because we know it's Tim's bedroom,
wall1, wall2, wall3, wall4.
183

180

00:12:27,080  -->  00:12:32,510
ceiling, bed, and of course, lamp.
184

181

00:12:33,730  -->  00:12:37,250
So we've now got our valid
object Bedroom created.
185

182

00:12:37,250  -->  00:12:38,640
So how do we make the bed?
186

183

00:12:38,640  -->  00:12:41,590
Well i
