1
1

00:00:04,710  -->  00:00:07,259
Alright, so this is the bonus solution
2

2

00:00:07,259  -->  00:00:08,910
the optional part from the challenge
3

3

00:00:08,910  -->  00:00:11,490
that introduced two videos ago. So this
4

4

00:00:11,490  -->  00:00:12,660
is the solution we're going to go
5

5

00:00:12,660  -->  00:00:14,850
through and show you that bonus part so
6

6

00:00:14,850  -->  00:00:16,859
the bonus part was the display a leading
7

7

00:00:16,859  -->  00:00:19,619
0 if we only have one number for minutes
8

8

00:00:19,619  -->  00:00:22,470
seconds or hours and we can use an if
9

9

00:00:22,470  -->  00:00:24,090
statement to check if we've only got the
10

10

00:00:24,090  -->  00:00:26,789
one digit but when do we actually have one digit,
11

11

00:00:26,789  -->  00:00:28,410
well there's one digit for the number is
12

12

00:00:28,410  -->  00:00:30,600
less than 10 so the number 10 is the
13

13

00:00:30,600  -->  00:00:33,660
first number with 2 digits. Now there are
14

14

00:00:33,660  -->  00:00:35,850
many ways to format or in other words to
15

15

00:00:35,850  -->  00:00:37,920
add leading zeros but we're going to use
16

16

00:00:37,920  -->  00:00:40,230
only the knowledge presented so far in
17

17

00:00:40,230  -->  00:00:42,060
the course with this solution, so the
18

18

00:00:42,060  -->  00:00:44,370
easy way is to use an if statement so
19

19

00:00:44,370  -->  00:00:46,110
what we're going to do is split the
20

20

00:00:46,110  -->  00:00:48,870
return string into 3 parts namely the
21

21

00:00:48,870  -->  00:00:51,570
hours, the minutes and the seconds so
22

22

00:00:51,570  -->  00:00:53,489
let's go ahead and start that and we're
23

23

00:00:53,489  -->  00:00:54,719
going to come down here after the
24

24

00:00:54,719  -->  00:00:56,790
calculation this is in the first method
25

25

00:00:56,790  -->  00:00:59,100
with minutes and seconds and we're going
26

26

00:00:59,100  -->  00:01:00,390
to start after we've defined that we're
27

27

00:01:00,390  -->  00:01:05,309
going to put string hours stream is
28

28

00:01:05,309  -->  00:01:13,320
equal to hours + H and double quotes
29

29

00:01:13,320  -->  00:01:14,670
so that's the first step, so we've
30

30

00:01:14,670  -->  00:01:16,229
converted the number of hours to a
31

31

00:01:16,229  -->  00:01:19,229
string with the word the letter H on the
32

32

00:01:19,229  -->  00:01:21,240
end of it now and edit that to a
33

33

00:01:21,240  -->  00:01:23,280
variable called our string. Now there's
34

34

00:01:23,280  -->  00:01:24,689
also some methods that we can call
35

35

00:01:24,689  -->  00:01:26,670
instead of appending the letter H but
36

36

00:01:26,670  -->  00:01:27,810
we're going to be covering those methods
37

37

00:01:27,810  -->  00:01:30,180
later in the course, so what we now have
38

38

00:01:30,180  -->  00:01:31,680
to do is check if the hours are less
39

39

00:01:31,680  -->  00:01:33,630
than 10 and in that case we have to
40

40

00:01:33,630  -->  00:01:36,630
prepend the leading 0 to the existing
41

41

00:01:36,630  -->  00:01:39,299
hour string, so what we can do there is we
42

42

00:01:39,299  -->  00:01:43,950
can put if parentheses hours if they're
43

43

00:01:43,950  -->  00:01:47,909
less than 10 and a code block and we're
44

44

00:01:47,909  -->  00:01:52,259
gonna put hour string equals double
45

45

00:01:52,259  -->  00:01:56,880
quotes 0 plus hour string, so let's go
46

46

00:01:56,880  -->  00:01:59,610
add a leading 0 to the hours if the
47

47

00:01:59,610  -->  00:02:01,829
hours the total hours is less than 10.
48

48

00:02:01,829  -->  00:02:03,899
Now for minutes and the seconds we can do
49

49

00:02:03,899  -->  00:02:05,729
the same, so what I'm going to do is
50

50

00:02:05,729  -->  00:02:08,849
paste in the code and we'll do the same
51

51

00:02:08,849  -->  00:02:09,989
for both I'm going to take this down
52

52

00:02:09,989  -->  00:02:14,879
here copy copy those lines well paste it
53

53

00:02:14,879  -->  00:02:17,579
once and we'll do this for the minutes
54

54

00:02:17,579  -->  00:02:18,520
so we'll call 1 minute
55

55

00:02:18,520  -->  00:02:24,130
string in a string and the test error is
56

56

00:02:24,130  -->  00:02:26,230
going to be remaining minutes, so if it's
57

57

00:02:26,230  -->  00:02:27,220
not hours anymore it's going to be
58

58

00:02:27,220  -->  00:02:29,770
remaining minutes that's less than 10
59

59

00:02:29,770  -->  00:02:34,120
I'm going to add 0, so then we're going
60

60

00:02:34,120  -->  00:02:36,280
to paste in minutes string for both of
61

61

00:02:36,280  -->  00:02:37,900
these so in other words we're adding the
62

62

00:02:37,900  -->  00:02:39,490
zero to the minute string if that's the
63

63

00:02:39,490  -->  00:02:41,530
case. So we need to do the same
64

64

00:02:41,530  -->  00:02:44,650
it's a seconds and what I need to do is
65

65

00:02:44,650  -->  00:02:46,390
just take a copy of this again and the
66

66

00:02:46,390  -->  00:02:47,320
other thing I need to change their
67

67

00:02:47,320  -->  00:02:48,520
course before I do that
68

68

00:02:48,520  -->  00:02:50,650
it's remaining it's who they're dealing
69

69

00:02:50,650  -->  00:02:52,480
with remaining minutes there so I'm
70

70

00:02:52,480  -->  00:02:55,000
going to copy this next line paste it
71

71

00:02:55,000  -->  00:02:56,920
down I mean now at the stage of doing
72

72

00:02:56,920  -->  00:03:00,970
seconds, so seconds string that's gonna
73

73

00:03:00,970  -->  00:03:07,390
be equal to seconds plus s the other
74

74

00:03:07,390  -->  00:03:09,220
thing I didn't do here was change the H
75

75

00:03:09,220  -->  00:03:11,320
to an M there for minutes, so let's do
76

76

00:03:11,320  -->  00:03:14,640
that then we're going to do if seconds
77

77

00:03:14,640  -->  00:03:17,920
if seconds is less than 10 then we're
78

78

00:03:17,920  -->  00:03:22,420
going to do 2nd string equals 0 plus 2nd
79

79

00:03:22,420  -->  00:03:23,950
string so you can see what we've done
80

80

00:03:23,950  -->  00:03:25,959
there we've got hours calculated here
81

81

00:03:25,959  -->  00:03:27,550
then we've got minutes calculated and
82

82

00:03:27,550  -->  00:03:30,400
then we've got seconds calculated. So the
83

83

00:03:30,400  -->  00:03:31,570
last thing we now need to do now that
84

84

00:03:31,570  -->  00:03:33,700
we've done those calculations is use
85

85

00:03:33,700  -->  00:03:35,890
those in our return, so I'm going to come
86

86

00:03:35,890  -->  00:03:37,750
down here instead of hours we're gonna
87

87

00:03:37,750  -->  00:03:40,600
be returning the our strength so hours
88

88

00:03:40,600  -->  00:03:43,510
stream and now the other thing is
89

89

00:03:43,510  -->  00:03:45,760
because we've already added the H we no
90

90

00:03:45,760  -->  00:03:47,380
longer need to do that so we just need
91

91

00:03:47,380  -->  00:03:48,850
to add space, so I'm going to delete the
92

92

00:03:48,850  -->  00:03:51,370
H and leave the space so with this style
93

93

00:03:51,370  -->  00:03:53,740
a gap between them I'm gonna change
94

94

00:03:53,740  -->  00:03:58,120
minutes now to a minute string and get
95

95

00:03:58,120  -->  00:04:00,550
rid of the M there and for seconds
96

96

00:04:00,550  -->  00:04:04,000
that's going to be second string and get
97

97

00:04:04,000  -->  00:04:05,080
rid of the S on the end there because
98

98

00:04:05,080  -->  00:04:07,030
it's already added by our code here on
99

99

00:04:07,030  -->  00:04:09,670
line 28. So that's joined the three three
100

100

00:04:09,670  -->  00:04:12,070
three strings now with spaces.
101

101

00:04:12,070  -->  00:04:13,720
Now there's a method called join in Java
102

102

00:04:13,720  -->  00:04:15,459
that we could use for this but again
103

103

00:04:15,459  -->  00:04:16,870
what we're doing is we're using the
104

104

00:04:16,870  -->  00:04:18,940
knowledge and what has been taught so
105

105

00:04:18,940  -->  00:04:20,230
far in this course I just want to make
106

106

00:04:20,230  -->  00:04:21,669
it clear that there are more optimal
107

107

00:04:21,669  -->  00:04:24,100
ways of doing this but I'm trying to
108

108

00:04:24,100  -->  00:04:26,290
show you challenge solutions based on
109

109

00:04:26,290  -->  00:04:28,240
what you've learnt so far, so you're not
110

110

00:04:28,240  -->  00:04:29,650
getting introduced to things in my
111

111

00:04:29,650  -->  00:04:31,879
solutions that you haven't already.
112

112

00:04:31,879  -->  00:04:33,679
Alright, so now that we've done that
113

113

00:04:33,679  -->  00:04:35,719
let's run the application and see if it
114

114

00:04:35,719  -->  00:04:40,219
works. Alright ,so you can see there in
115

115

00:04:40,219  -->  00:04:42,889
that case we've got zero one A for the
116

116

00:04:42,889  -->  00:04:44,439
hours now because the hours less than
117

117

00:04:44,439  -->  00:04:46,819
1005 for the minutes because the minutes
118

118

00:04:46,819  -->  00:04:48,619
were less than 10 and we've got 45
119

119

00:04:48,619  -->  00:04:50,330
seconds we're working and showing
120

120

00:04:50,330  -->  00:04:52,129
correctly and that's hasn't got a
121

121

00:04:52,129  -->  00:04:54,469
leading 0 which we would expect because
122

122

00:04:54,469  -->  00:04:56,029
there's no leading zero because we're
123

123

00:04:56,029  -->  00:04:57,679
using a number that's greater than 9
124

124

00:04:57,679  -->  00:05:00,409
in other words 10 or higher. Alright so
125

125

00:05:00,409  -->  00:05:02,179
this code can be even more optimized
126

126

00:05:02,179  -->  00:05:04,909
we've still got some repeating code so
127

127

00:05:04,909  -->  00:05:06,860
notice how those if statements are
128

128

00:05:06,860  -->  00:05:10,580
almost the same, so what we could do is
129

129

00:05:10,580  -->  00:05:12,619
create a method to somehow deal with
130

130

00:05:12,619  -->  00:05:13,759
that so we didn't have that code that
131

131

00:05:13,759  -->  00:05:15,769
looked almost the same but we won't do
132

132

00:05:15,769  -->  00:05:17,179
that for now with the knowledge that
133

133

00:05:17,179  -->  00:05:18,499
we've learnt so far in the course what
134

134

00:05:18,499  -->  00:05:19,909
we've got here is a pretty good solution
135

135

00:05:19,909  -->  00:05:22,159
but before I end the video, I just want
136

136

00:05:22,159  -->  00:05:24,499
to show you how to use constants.
137

137

00:05:24,499  -->  00:05:25,909
Now keep in mind that this wasn't part of
138

138

00:05:25,909  -->  00:05:27,529
the challenge I just want to show you
139

139

00:05:27,529  -->  00:05:29,509
another way of solving it so firstly
140

140

00:05:29,509  -->  00:05:31,639
though what is a constant well think of
141

141

00:05:31,639  -->  00:05:33,979
a constant like a variable but a
142

142

00:05:33,979  -->  00:05:35,899
variable that we cannot change the value
143

143

00:05:35,899  -->  00:05:38,029
of once we've assigned it, so it's got a
144

144

00:05:38,029  -->  00:05:40,519
constant value. Now constants can be very
145

145

00:05:40,519  -->  00:05:42,919
useful, we repeated the same string twice
146

146

00:05:42,919  -->  00:05:44,689
this string if we come over here and
147

147

00:05:44,689  -->  00:05:46,339
have a look invalid value for this get
148

148

00:05:46,339  -->  00:05:48,889
duration string there and also we reuse
149

149

00:05:48,889  -->  00:05:51,439
that again up here. So it's used in both
150

150

00:05:51,439  -->  00:05:53,509
methods we're returning the same string
151

151

00:05:53,509  -->  00:05:56,569
when the parameters aren't valid instead
152

152

00:05:56,569  -->  00:05:58,339
of typing the same string twice we can
153

153

00:05:58,339  -->  00:06:01,129
create a constant instead you know to
154

154

00:06:01,129  -->  00:06:02,659
use this constant in both methods it
155

155

00:06:02,659  -->  00:06:04,909
needs to be declared outside of the
156

156

00:06:04,909  -->  00:06:06,529
method. Now later in the course we're
157

157

00:06:06,529  -->  00:06:08,059
going to talk more about variables that
158

158

00:06:08,059  -->  00:06:09,860
are just that are declared outside of
159

159

00:06:09,860  -->  00:06:12,229
methods but for now let's just focus on
160

160

00:06:12,229  -->  00:06:13,969
constants so as I've said previously
161

161

00:06:13,969  -->  00:06:16,669
constants can't be changed once they're
162

162

00:06:16,669  -->  00:06:20,059
assigned so to assign one we come up
163

163

00:06:20,059  -->  00:06:22,490
here to the top we're going to type in
164

164

00:06:22,490  -->  00:06:25,039
here after main and I'm going to type
165

165

00:06:25,039  -->  00:06:26,300
private remembering that we're gonna be
166

166

00:06:26,300  -->  00:06:27,829
talking about what private means later
167

167

00:06:27,829  -->  00:06:31,849
in the course a new static or an all I'm
168

168

00:06:31,849  -->  00:06:33,740
gonna put in uppercase noticing how I'm
169

169

00:06:33,740  -->  00:06:35,059
typing in uppercase and invalid
170

170

00:06:35,059  -->  00:06:38,169
underscore value underscore message
171

171

00:06:38,169  -->  00:06:40,759
equals and it's going to be equal to
172

172

00:06:40,759  -->  00:06:43,460
invalid value
173

173

00:06:43,460  -->  00:06:45,450
and what didn't do there was put the
174

174

00:06:45,450  -->  00:06:49,020
type that's public static final string
175

175

00:06:49,020  -->  00:06:51,360
invalid unless value on its core message
176

176

00:06:51,360  -->  00:06:53,010
equals than the value that we want to
177

177

00:06:53,010  -->  00:06:55,050
sign it in this case is invalid
178

178

00:06:55,050  -->  00:06:57,450
underscore value so that's how constant
179

179

00:06:57,450  -->  00:07:00,240
and notice the key word here final that
180

180

00:07:00,240  -->  00:07:01,530
key word is used to make a variable
181

181

00:07:01,530  -->  00:07:03,960
final so in other words once we've
182

182

00:07:03,960  -->  00:07:05,250
assigned the value which we've done on
183

183

00:07:05,250  -->  00:07:06,450
the same line here
184

184

00:07:06,450  -->  00:07:09,270
we can't change its value and then we've
185

185

00:07:09,270  -->  00:07:11,250
got after final we've got string which
186

186

00:07:11,250  -->  00:07:12,630
was the type that I missed originally
187

187

00:07:12,630  -->  00:07:14,280
when I typed it in that's the type of
188

188

00:07:14,280  -->  00:07:15,630
the constant which in this case is a
189

189

00:07:15,630  -->  00:07:17,670
string and then our value is typed in
190

190

00:07:17,670  -->  00:07:19,520
after the name on the right-hand side
191

191

00:07:19,520  -->  00:07:21,810
then we've also got the keyword static
192

192

00:07:21,810  -->  00:07:23,700
here and that's because we're using this
193

193

00:07:23,700  -->  00:07:26,880
variable in static methods. Now later
194

194

00:07:26,880  -->  00:07:28,020
we're going to talk more about the
195

195

00:07:28,020  -->  00:07:29,940
static keyword but for the time being
196

196

00:07:29,940  -->  00:07:31,500
just remember if we need to use this
197

197

00:07:31,500  -->  00:07:34,110
variable in a static method remembering
198

198

00:07:34,110  -->  00:07:36,390
that a static method has a method that's
199

199

00:07:36,390  -->  00:07:38,910
using the static keyword and by default
200

200

00:07:38,910  -->  00:07:40,230
that's all we've been using so far in
201

201

00:07:40,230  -->  00:07:41,850
the course, so if you want to use a
202

202

00:07:41,850  -->  00:07:44,250
variable that's been declared outside of
203

203

00:07:44,250  -->  00:07:46,710
a method you need to it needs to also be
204

204

00:07:46,710  -->  00:07:48,690
aesthetic which it is in this case but
205

205

00:07:48,690  -->  00:07:50,000
again more on that later in the course
206

206

00:07:50,000  -->  00:07:52,320
and just to confirm that if we come down
207

207

00:07:52,320  -->  00:07:54,810
here and we try and change the value so
208

208

00:07:54,810  -->  00:07:57,180
let's try and say invalid value better
209

209

00:07:57,180  -->  00:07:58,890
invalid underscore message equals
210

210

00:07:58,890  -->  00:08:03,540
equals hello notice we've got a red
211

211

00:08:03,540  -->  00:08:05,160
underline by intelliJ hover over it
212

212

00:08:05,160  -->  00:08:07,170
cannot assign a value to the final
213

213

00:08:07,170  -->  00:08:09,150
variable invalid value message so
214

214

00:08:09,150  -->  00:08:10,950
IntelliJ helpfully prevents you from
215

215

00:08:10,950  -->  00:08:14,280
doing that and the other thing you might
216

216

00:08:14,280  -->  00:08:15,600
be wondering is why's has topped in
217

217

00:08:15,600  -->  00:08:18,900
uppercase constants are usually topped
218

218

00:08:18,900  -->  00:08:20,400
in uppercase so that they're easily
219

219

00:08:20,400  -->  00:08:22,830
identified as constants in your program
220

220

00:08:22,830  -->  00:08:24,210
code, that's because they're not going to
221

221

00:08:24,210  -->  00:08:26,160
be changed. Alright so I've established
222

222

00:08:26,160  -->  00:08:28,730
that at a constant cannot be changed
223

223

00:08:28,730  -->  00:08:31,260
let's go ahead and use this in our code
224

224

00:08:31,260  -->  00:08:33,540
and to use it you can just return and
225

225

00:08:33,540  -->  00:08:35,790
use that constant belly so invalid
226

226

00:08:35,790  -->  00:08:38,370
let's call value underscore message you
227

227

00:08:38,370  -->  00:08:39,570
use it there then we can come down to
228

228

00:08:39,570  -->  00:08:42,540
the second occurrence of it and also use
229

229

00:08:42,540  -->  00:08:46,200
it down here invalid that's what value
230

230

00:08:46,200  -->  00:08:48,090
underscore message so now we're
231

231

00:08:48,090  -->  00:08:50,820
returning the value of the invalid and
232

232

00:08:50,820  -->  00:08:52,620
score value on score message which we
233

233

00:08:52,620  -->  00:08:55,230
defined up here as invalid value so when
234

234

00:08:55,230  -->  00:08:57,270
we run our code you should give the same as
235

235

00:08:57,270  -->  00:08:59,490
that we got last time you can see the
236

236

00:08:59,490  -->  00:09:01,110
same results on the screen everything's
237

237

00:09:01,110  -->  00:09:03,300
working as it should the other reason
238

238

00:09:03,300  -->  00:09:05,460
for using a constant here is it can be
239

239

00:09:05,460  -->  00:09:07,800
really useful in case you're making a
240

240

00:09:07,800  -->  00:09:09,840
typo so when you're typing the same
241

241

00:09:09,840  -->  00:09:11,550
string multiple times into a program
242

242

00:09:11,550  -->  00:09:13,740
it's easy to make a typo for example if
243

243

00:09:13,740  -->  00:09:14,970
you're giving a letter or typing a
244

244

00:09:14,970  -->  00:09:17,070
letter in uppercase and so on and that's
245

245

00:09:17,070  -->  00:09:19,470
where constants can really help us we
246

246

00:09:19,470  -->  00:09:20,880
will talk more deeply about constants
247

247

00:09:20,880  -->  00:09:22,740
later in the course but as you can see
248

248

00:09:22,740  -->  00:09:25,170
they can be very useful, they help us
249

249

00:09:25,170  -->  00:09:26,940
with changing code so for example if we
250

250

00:09:26,940  -->  00:09:28,860
change the constant to some other string
251

251

00:09:28,860  -->  00:09:31,110
both methods would be affected since
252

252

00:09:31,110  -->  00:09:33,180
they both had the same change in other
253

253

00:09:33,180  -->  00:09:34,410
words both methods use the same
254

254

00:09:34,410  -->  00:09:36,210
constants. So now that I've said that
255

255

00:09:36,210  -->  00:09:37,680
let's actually test this out to make
256

256

00:09:37,680  -->  00:09:39,240
sure that it's still working and we can
257

257

00:09:39,240  -->  00:09:42,600
do that by adding one more solution to
258

258

00:09:42,600  -->  00:09:44,400
our main one more call to our get
259

259

00:09:44,400  -->  00:09:46,560
duration string and I'm going to pass
260

260

00:09:46,560  -->  00:09:49,190
a value of negative 41 here for the long
261

261

00:09:49,190  -->  00:09:53,820
let's run that you can see that we've
262

262

00:09:53,820  -->  00:09:55,200
got invalid value there so that's
263

263

00:09:55,200  -->  00:09:57,180
clearly working as well. The other thing
264

264

00:09:57,180  -->  00:09:58,500
we didn't test which we probably should
265

265

00:09:58,500  -->  00:10:01,350
have is test to make sure that the
266

266

00:10:01,350  -->  00:10:03,840
seconds also work if the valleys under
267

267

00:10:03,840  -->  00:10:06,900
10, so let's save one more for that I've
268

268

00:10:06,900  -->  00:10:09,650
got a return get duration string again
269

269

00:10:09,650  -->  00:10:14,970
I'm gonna return 65:9 instead of 45 we
270

270

00:10:14,970  -->  00:10:16,230
know that that's a number less than 10
271

271

00:10:16,230  -->  00:10:17,820
so we should get a leading zero for
272

272

00:10:17,820  -->  00:10:20,880
seconds you can see seconds is now
273

273

00:10:20,880  -->  00:10:23,100
correctly showing us 9 9 seconds which
274

274

00:10:23,100  -->  00:10:25,140
is what were you passed so that too is
275

275

00:10:25,140  -->  00:10:28,260
correct. Alright so as you can see
276

276

00:10:28,260  -->  00:10:29,610
everything's working and our constants
277

277

00:10:29,610  -->  00:10:30,900
printing out the word invalid value
278

278

00:10:30,900  -->  00:10:33,090
which we expected to do and the changes
279

279

00:10:33,090  -->  00:10:35,040
we've made have now meant that we've got
280

280

00:10:35,040  -->  00:10:37,230
a leading 0 for hours and minutes and
281

281

00:10:37,230  -->  00:10:39,690
seconds if the value of those are less
282

282

00:10:39,690  -->  00:10:42,060
than 10 and just a confirmation here
283

283

00:10:42,060  -->  00:10:44,190
that there's still space for improving
284

284

00:10:44,190  -->  00:10:47,430
the solution but again some indicated a
285

285

00:10:47,430  -->  00:10:49,560
number of times the challenge solutions
286

286

00:10:49,560  -->  00:10:51,390
that I'm coming up with are based on
287

287

00:10:51,390  -->  00:10:52,740
what you've learnt so far in the course
288

288

00:10:52,740  -->  00:10:54,840
so that I'm not putting something in the
289

289

00:10:54,840  -->  00:10:57,450
solution in my solution of the code that
290

290

00:10:57,450  -->  00:10:59,760
you haven't already seen or used so far
291

291

00:10:59,760  -->  00:11:00,330
in the course.
292

292

00:11:00,330  -->  00:11:01,800
So you'll find later in the course that
293

293

00:11:01,800  -->  00:11:03,390
once you've got some more knowledge you
294

294

00:11:03,390  -->  00:11:05,730
would probably approach the solution to
295

295

00:11:05,730  -->  00:11:07,140
this in a different way than what we've
296

296

00:11:07,140  -->  00:11:09,090
done here so far. So that's it, I hope
297

297

00:11:09,090  -->  00:11:10,480
you've got a lot out of that and
298

298

00:11:10,480  -->  00:11:13,920
let's move on now to the next video.
