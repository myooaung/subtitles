WEBVTT
1
00:00:05.310 --> 00:00:10.240
Gut, ich möchte über eine Namenskonvention sprechen, die sich auf boolesche Variablen bezieht.

2
00:00:10.380 --> 00:00:15.780
Jetzt habe ich dies in einem früheren Video erwähnt, aber wenn eine boolesche

3
00:00:15.780 --> 00:00:21.780
Variable als gute Namenskonvention deklariert wird, ist es eine andere Faustregel, den Teil des

4
00:00:21.780 --> 00:00:26.840
booleschen Variablennamens wie folgt zu benennen, damit die Variable verwendet wird.

5
00:00:26.850 --> 00:00:28.500
Wählen Sie auch den Namen, der positiv sein soll.

6
00:00:28.500 --> 00:00:32.060
Beachten Sie also, dass dieser Boolesche Wert gültig gleich wahr ist.

7
00:00:32.130 --> 00:00:36.750
Nun, das ist bevorzugt gegenüber booleschen ist ungültig gleich falsch.

8
00:00:36.750 --> 00:00:41.940
Der Grund dafür ist nun, dass Sie versuchen möchten, Ihren Code so lesbar wie möglich zu machen, sodass das

9
00:00:41.940 --> 00:00:44.530
Fortfahren mit "gültig" im Vergleich zu "ungültig" ist.

10
00:00:44.610 --> 00:00:49.690
Wenn Sie gesehen haben, dass der Code, den Sie überprüfen, nicht ungültig ist, wird das Ausrufezeichen verwendet, das dann kein

11
00:00:49.700 --> 00:00:50.480
Operator ist.

12
00:00:50.490 --> 00:00:57.000
Nun, das erfordert, dass der Leser aufhört und die wahre Absicht entschlüsselt. Wo gültig ist, ist viel klarer.

13
00:00:57.000 --> 00:00:57.240
Gut.

14
00:00:57.240 --> 00:00:58.270
Also zurück zum Code.

15
00:00:58.290 --> 00:01:04.960
Jetzt werde ich den Anfangswert der Punktzahl in Zeile 6 auf 800 ändern, um dies zuerst zu tun, und dann in Zeile 8.

16
00:01:04.970 --> 00:01:05.750
Was werden wir tun?

17
00:01:06.650 --> 00:01:11.310
Ich werde drei neue Variablen hinzufügen, also lasst uns fortfahren und das tun.

18
00:01:11.490 --> 00:01:22.490
Beginn mit Berlin ist gekommen, entweder ist es gleich der wahren gemischten Zeile int Level abgeschlossen ist gleich 5 Semikolon 2 in der Zeile und schließlich ist

19
00:01:22.490 --> 00:01:29.160
der int Bonus gleich 100 Semikolon, also werde ich diesen Code in Zeile 12 auskommentieren bis 18,

20
00:01:29.180 --> 00:01:35.240
also lassen Sie uns weitermachen und tun, dass ich die Umschalttaste gedrückt halte, um "roll"

21
00:01:35.240 --> 00:01:41.750
auszuwählen. Auf einem Windows-Computer wird ein Schrägstrich verwendet, und auf einem Mac ein Schrägstrich, um das

22
00:01:41.750 --> 00:01:43.480
Gleiche zu tun.

23
00:01:43.490 --> 00:01:49.070
Also, was wollen wir jetzt tun und ich werde dies unter diesen Code von Committed Out für den Moment stellen, der

24
00:01:49.070 --> 00:01:52.840
im Grunde genommen in Zeile 19 beginnt, wenn Sie hier einen Test durchführen möchten.

25
00:01:52.900 --> 00:01:58.170
Also werde ich sagen, wenn Klammern das Spiel beendet haben, ist es gleich wahr.

26
00:01:58.190 --> 00:02:02.310
Wir verwenden also Gleichheitszeichen für die logische Gleichheit.

27
00:02:02.710 --> 00:02:07.070
Ich werde einen Codeblock öffnen, den wir oben aufführen, und ich werde das nur ein wenig

28
00:02:07.100 --> 00:02:09.970
erfinden, damit wir sehen können, ob Sie Untertitel darauf haben.

29
00:02:10.010 --> 00:02:19.370
Die endgültige Punktzahl und das Problem beim Sprechen von heute entsprechen der Punktzahl plus und der

30
00:02:19.370 --> 00:02:26.540
abgeschlossenen Stufe in Klammern multipliziert mit dem Bonus. In der nächsten

31
00:02:26.540 --> 00:02:37.420
Zeile geben wir die Druckzeile des Laptops und die doppelten Anführungszeichen in Klammern aus Doppelte Anführungszeichen plus Endergebnis.

32
00:02:37.550 --> 00:02:41.240
Darum möchte ich vorstellen, dass auf Ihr Endergebnis das berechnete Endergebnis folgt, das wir in

33
00:02:41.240 --> 00:02:42.520
Zeile 20 definiert haben.

34
00:02:42.620 --> 00:02:43.640
Lasst uns also tatsächlich

35
00:02:48.770 --> 00:02:51.440
so weitermachen, dass wir sagen können, dass die endgültige Punktzahl 1300 ausgegeben wurde.

36
00:02:51.440 --> 00:02:55.870
Und das liegt daran, dass die endgültige Punktzahl der Punktzahl entspricht, die erzielt wurde, wenn Sie nach oben scrollen und einen Blick darauf werfen,

37
00:02:55.880 --> 00:02:57.470
ist sie im Moment nur außerhalb des Bildschirms.

38
00:02:57.470 --> 00:03:03.740
Das abschließende Ergebnis war über achthundert, was fünf ergibt. Unser Bonus ist einhundertfünfunddreißig

39
00:03:03.740 --> 00:03:06.320
mal einhundert ist fünfhundert.

40
00:03:06.320 --> 00:03:11.090
Daher ist es achthundert plus fünfhundert und die endgültige Punktzahl im Ausgabebereich

41
00:03:11.180 --> 00:03:12.440
ist dreizehnhundert.

42
00:03:12.440 --> 00:03:17.690
Also kann ich diesen Codeblock sagen, aber wieder auf dem Bildschirm zu sein, mit dem Code, der darin enthalten ist, wurde ausgeführt,

43
00:03:17.810 --> 00:03:22.840
weil die Variable "game over" ist, ein Kurs, der auf "true" gesetzt ist, und wir haben das in Zeile 8 getan.

44
00:03:22.880 --> 00:03:30.170
Wie Sie sehen, haben wir eine Variable in der Endnote im Codeblock erstellt. Beachten Sie bei Codeblöcken,

45
00:03:30.170 --> 00:03:35.150
dass sie auf Variablen zugreifen können, die außerhalb des Codeblocks erstellt

46
00:03:35.240 --> 00:03:40.590
wurden Sehen Sie, dass wir hier auf die Variable score in Zeile 20

47
00:03:40.600 --> 00:03:41.200
zugreifen.

48
00:03:41.350 --> 00:03:43.810
Und das wurde dort im Code definiert.

49
00:03:44.180 --> 00:03:45.480
In Zeile 6.

50
00:03:45.500 --> 00:03:48.520
Grundsätzlich verwenden wir dort eine Reihe von Variablen.

51
00:03:48.530 --> 00:03:54.040
Wir haben die Bewertungsstufe abgeschlossen und alle Variablen, die wir außerhalb des Codeblocks erstellt haben, als Bonus vergeben.

52
00:03:54.770 --> 00:03:59.630
Die endgültige Bewertung unterscheidet sich jedoch darin, dass sie in unserem Codeblock erstellt wurde.

53
00:03:59.630 --> 00:04:04.560
Der Grund, warum wir das ansprechen, ist, dass es etwas gibt, was wir nicht tun

54
00:04:04.570 --> 00:04:12.240
können. Wir können hier nicht mit einer Art Code-Block runterkommen, um Code hier zu übersteigen und zu versuchen, ihn zu übersteigen, der gespeichert wurde.

55
00:04:12.310 --> 00:04:18.740
Die Endpunktzahl entspricht der Endpunktzahl.

56
00:04:18.740 --> 00:04:21.670
Semikolon und schön, ich habe dort einen Fehler.

57
00:04:21.670 --> 00:04:24.930
Die endgültige Punktzahl des Symbols kann jedoch nicht aufgelöst werden.

58
00:04:25.000 --> 00:04:31.540
Der Grund dafür ist nun, dass, sobald die Ausführung innerhalb eines Codeblocks abgeschlossen ist, jede Variable innerhalb dieses Codes

59
00:04:31.630 --> 00:04:32.500
erstellt wird.

60
00:04:32.500 --> 00:04:35.870
Schauen Sie sich gelöscht, aber das Gegenteil ist nicht wahr.

61
00:04:35.890 --> 00:04:40.450
Während Sie also von innerhalb des Codeblocks auf Variablen zugreifen können, die außerhalb des Codeblocks erstellt wurden, haben Sie gesehen,

62
00:04:40.450 --> 00:04:41.700
dass wir das getan haben.

63
00:04:41.770 --> 00:04:47.450
Was Sie nicht tun können, ist auf Variablen zuzugreifen, die im Codeblock von außerhalb des Codeblocks erstellt wurden.

64
00:04:47.500 --> 00:04:52.780
Wie Sie in diesem Szenario sehen können, versuchen wir es in Zeile 23, also lassen

65
00:04:52.800 --> 00:05:00.800
Sie uns fortfahren und Zeile 23 entfernen. Ich glaube, ich habe darüber kurz gesprochen, aber es gibt eine Abkürzung für die Verwendung der beiden Gleichheitszeichen.

66
00:05:00.800 --> 00:05:06.590
Der logische Operator, mit dem ermittelt wird, ob eine Milliarde Variablen verwendet werden und nicht, ob das Spiel

67
00:05:06.590 --> 00:05:08.570
vorbei ist, ist gleichermaßen wahr.

68
00:05:08.570 --> 00:05:12.290
Wir können eigentlich nur das Gleiche gleich wahr entfernen, damit wir weitermachen und das löschen

69
00:05:15.120 --> 00:05:17.190
und es einfach zum Spielende machen können.

70
00:05:17.190 --> 00:05:22.740
Wenn also Klammern das Spiel beendet haben, handelt es sich um eine Abkürzung, und der Ausführende ist im Wesentlichen derselbe wie beim Tippen,

71
00:05:22.770 --> 00:05:24.660
wenn Klammern das Spiel genauso wahr haben.

72
00:05:24.760 --> 00:05:27.840
Denken Sie also daran, da dies eine gute Möglichkeit ist, Ihren Code abzukürzen.

73
00:05:27.840 --> 00:05:32.760
Sie werden feststellen, dass der im Java-Code gebräuchliche Code nur eine Abkürzung ist, um zu testen,

74
00:05:32.760 --> 00:05:36.180
ob eine boolesche Variable in diesem Fall den Wert true hat.

75
00:05:36.180 --> 00:05:40.170
Nun, wenn Sie mit anderen Worten auf falsch testen wollten, ist das Spiel genauso falsch.

76
00:05:40.290 --> 00:05:44.510
Die Abkürzung dazu ist nur, ein Ausrufezeichen am Anfang der Variablen zu verwenden.

77
00:05:44.520 --> 00:05:48.350
Also kommen Sie herauf, wir setzen ein Ausrufezeichen, das nicht so ist.

78
00:05:48.360 --> 00:05:55.360
Wenn dies nicht der Fall ist, wird getestet, ob das Ende des Spiels gleich Falsch ist. Lassen Sie uns einen kurzen Überblick über

79
00:05:55.360 --> 00:06:00.400
den Gültigkeitsbereich geben, damit sich der Gültigkeitsbereich darauf bezieht, wann auf eine Variable zugegriffen werden kann.

80
00:06:00.580 --> 00:06:04.450
Der Umfang ist ein weiteres Thema, für das ein eigenes Video erforderlich ist. Darauf werden wir

81
00:06:04.450 --> 00:06:05.500
später im Kurs eingehen.

82
00:06:05.920 --> 00:06:10.870
Aber denken Sie vorerst daran, dass job connect Variablen aus äußeren Codeblöcken enthält, die noch

83
00:06:10.870 --> 00:06:11.760
ausgeführt werden.

84
00:06:11.950 --> 00:06:18.490
Java kann nicht auf Variablen in Codeblöcken zugreifen, deren Ausführung beendet ist, und Java kann nicht

85
00:06:18.490 --> 00:06:26.530
auf Variablen in Codeblöcken zugreifen, deren Ausführung noch nicht begonnen hat, sodass der Gültigkeitsbereich die Zugänglichkeit von Variablen in bestimmten

86
00:06:26.530 --> 00:06:32.060
Situationen oder an bestimmten Stellen im Code, beispielsweise in einem Codeblock, tatsächlich behandelt.

87
00:06:32.080 --> 00:06:34.940
Die Quintessenz für den Moment ist es in einem Codeblock.

88
00:06:34.990 --> 00:06:40.110
Wenn Sie eine Variable erstellen, können Sie nicht auf die Variable zugreifen, die Sie außerhalb dieses Codeblocks erstellt haben, und es ist

89
00:06:40.110 --> 00:06:43.870
ein Fehler im Video aufgetreten, als wir dies versucht haben, aber Sie können es natürlich.

90
00:06:43.870 --> 00:06:49.270
Wie Sie gesehen haben, greifen Sie immer noch auf Variablen zu, die zuvor außerhalb des Codeblocks und vor dem Aufrufen des Codeblocks

91
00:06:49.270 --> 00:06:53.680
erstellt wurden, während Sie sich im Codeblock selbst befinden. Wieder haben Sie gesehen, dass der Code tatsächlich noch

92
00:06:53.680 --> 00:06:56.740
auf dem Bildschirm angezeigt wird. Es gibt Zeilen 20 und 21.

93
00:06:56.740 --> 00:07:02.740
Wir verwenden Score Level Completed und Bonus 3 Variablen, die wir außerhalb des Codeblocks erstellt haben.

94
00:07:02.860 --> 00:07:06.610
Okay, das haben wir im Video hier gut gesagt und was wir im nächsten Video machen werden.

95
00:07:06.610 --> 00:07:10.050
Ich habe eine Herausforderung für dich, also sehe ich dich im nächsten Video.
