WEBVTT
1
1

00:00:04.750  -->  00:00:07.540
so one of the important phases in the
2

2

00:00:07.540  -->  00:00:09.750
application development lifecycle is the
3

3

00:00:09.750  -->  00:00:12.070
testing phase now there are several
4

4

00:00:12.070  -->  00:00:14.710
types of testing the first line of
5

5

00:00:14.710  -->  00:00:16.690
defense when testing code is called unit
6

6

00:00:16.690  -->  00:00:19.380
testing which is typically performed by
7

7

00:00:19.380  -->  00:00:22.390
the developer or development team now
8

8

00:00:22.390  -->  00:00:24.820
when working with java a unit usually
9

9

00:00:24.820  -->  00:00:27.820
refers to a method now a developer could
10

10

00:00:27.820  -->  00:00:29.800
run tests on his or her code manually
11

11

00:00:29.800  -->  00:00:32.230
for example if we wanted to test the
12

12

00:00:32.230  -->  00:00:34.660
method that performs the calculation and
13

13

00:00:34.660  -->  00:00:36.850
displays the result to the user we could
14

14

00:00:36.850  -->  00:00:38.680
manually run the method with a set of
15

15

00:00:38.680  -->  00:00:41.320
test values and verify that we get the
16

16

00:00:41.320  -->  00:00:44.070
expected result back but that's tedious
17

17

00:00:44.070  -->  00:00:45.850
and what would happen when we made
18

18

00:00:45.850  -->  00:00:48.010
changes to the method we have to run the
19

19

00:00:48.010  -->  00:00:50.440
tests all over again and perhaps add
20

20

00:00:50.440  -->  00:00:53.070
even more test values now instead of
21

21

00:00:53.070  -->  00:00:55.390
running tests manually developers can
22

22

00:00:55.390  -->  00:00:57.550
use a unit testing framework to write
23

23

00:00:57.550  -->  00:00:59.460
tests that will run in an automated
24

24

00:00:59.460  -->  00:01:02.070
fashion now when working on a team
25

25

00:01:02.070  -->  00:01:04.320
that's coding a large application
26

26

00:01:04.320  -->  00:01:06.070
the build process for the application
27

27

00:01:06.070  -->  00:01:08.530
will typically run a unit test suite
28

28

00:01:08.530  -->  00:01:11.790
after each successful build and if a
29

29

00:01:11.790  -->  00:01:13.150
hundred percent of the tests are
30

30

00:01:13.150  -->  00:01:13.960
successful
31

31

00:01:13.960  -->  00:01:16.270
that's great but if not then the fail
32

32

00:01:16.270  -->  00:01:18.430
tests will tell the developers what
33

33

00:01:18.430  -->  00:01:20.500
recent changes to the code may have
34

34

00:01:20.500  -->  00:01:23.680
broken a part of the application for
35

35

00:01:23.680  -->  00:01:25.330
smaller applications with a single
36

36

00:01:25.330  -->  00:01:27.400
developer the developer can still run
37

37

00:01:27.400  -->  00:01:29.170
the tests right after changing any code
38

38

00:01:29.170  -->  00:01:32.610
j unit is a popular testing framework
39

39

00:01:32.610  -->  00:01:35.200
that we can use to run unit tests and
40

40

00:01:35.200  -->  00:01:36.460
starting in this video we're going to
41

41

00:01:36.460  -->  00:01:38.970
learn how to use j unit to run automated
42

42

00:01:38.970  -->  00:01:42.150
tests on our code what we need to get
43

43

00:01:42.150  -->  00:01:45.700
started is to create a class that we can
44

44

00:01:45.700  -->  00:01:48.750
use to write some unit tests for let's
45

45

00:01:48.750  -->  00:01:56.040
create a new project....
46

46

00:01:56.040  -->  00:01:57.220
....
47

47

00:01:57.220  -->  00:02:04.220
...
48

48

00:02:04.220  -->  00:02:06.800
alright i'm just going to create a class
49

49

00:02:06.800  -->  00:02:11.330
new class will call this one bank
50

50

00:02:11.330  -->  00:02:13.820
account
51

51

00:02:13.820  -->  00:02:20.180
ok so let's add a couple of field....
52

52

00:02:20.180  -->  00:04:26.110
....
53

53

00:04:26.110  -->  00:04:29.680
...obviously this isn't a
54

54

00:04:29.680  -->  00:04:31.660
robust implementation of a bank account
55

55

00:04:31.660  -->  00:04:33.970
class but the methods that we've
56

56

00:04:33.970  -->  00:04:36.250
created will do for our purposes here
57

57

00:04:36.250  -->  00:04:39.700
alright so we want to use j unit which
58

58

00:04:39.700  -->  00:04:41.590
is the testing framework that is going
59

59

00:04:41.590  -->  00:04:44.220
to be automating our tests the
60

60

00:04:44.220  -->  00:04:46.270
first step that we need to do is to add
61

61

00:04:46.270  -->  00:04:48.640
the j unit library to our project
62

62

00:04:48.640  -->  00:04:51.250
now intelliJ ships with the j
63

63

00:04:51.250  -->  00:04:54.760
unit 3 and j unit 4 libraries but it
64

64

00:04:54.760  -->  00:04:56.020
doesn't actually add them to the
65

65

00:04:56.020  -->  00:04:58.750
projects by default so we have to add
66

66

00:04:58.750  -->  00:05:00.730
the version of j unit would like to use
67

67

00:05:00.730  -->  00:05:03.250
now junit 4 is the latest
68

68

00:05:03.250  -->  00:05:05.620
version i recommend going for that one
69

69

00:05:05.620  -->  00:05:06.820
so we're going to use that one in this
70

70

00:05:06.820  -->  00:05:09.490
section of the course and in fact all
71

71

00:05:09.490  -->  00:05:11.020
the code of this lecture will be based
72

72

00:05:11.020  -->  00:05:13.420
on junit four so if you are using an
73

73

00:05:13.420  -->  00:05:15.370
earlier version of j unit some of the
74

74

00:05:15.370  -->  00:05:17.920
code won't compile and the tests won't work
75

75

00:05:17.920  -->  00:05:20.140
because the enhancements that made
76

76

00:05:20.140  -->  00:05:23.110
to j unit 4 and again intelliJ
77

77

00:05:23.110  -->  00:05:24.790
includes j unit three so that
78

78

00:05:24.790  -->  00:05:26.590
projects build in intellij that use
79

79

00:05:26.590  -->  00:05:28.690
junit three will still work without
80

80

00:05:28.690  -->  00:05:30.790
having to switch to junit 4 but it
81

81

00:05:30.790  -->  00:05:33.280
is recommended to use junit 4 for all
82

82

00:05:33.280  -->  00:05:36.430
new projects right now how do we go
83

83

00:05:36.430  -->  00:05:39.520
about adding the j unit 4 library to
84

84

00:05:39.520  -->  00:05:42.610
our project we could add the library to
85

85

00:05:42.610  -->  00:05:44.560
the project in the normal way that we've
86

86

00:05:44.560  -->  00:05:48.730
done before file project structure going
87

87

00:05:48.730  -->  00:05:50.680
into libraries and then adding the
88

88

00:05:50.680  -->  00:05:53.440
library and actually navigating into
89

89

00:05:53.440  -->  00:05:55.900
where the IntelliJ installation folder
90

90

00:05:55.900  -->  00:05:58.540
where you find it in the lib subfolder
91

91

00:05:58.540  -->  00:06:01.120
of the intellij root directory but
92

92

00:06:01.120  -->  00:06:02.920
theirs actually a more convenient way
93

93

00:06:02.920  -->  00:06:05.770
to add it to our project so let's just
94

94

00:06:05.770  -->  00:06:08.980
cancel out of that now we want to write
95

95

00:06:08.980  -->  00:06:11.650
unit tests for the bank account class so
96

96

00:06:11.650  -->  00:06:13.750
what we need to do to get this add it is
97

97

00:06:13.750  -->  00:06:17.350
put out cursor on the public class bank
98

98

00:06:17.350  -->  00:06:19.600
account line within the bank account
99

99

00:06:19.600  -->  00:06:23.170
file and once we've done that we
100

100

00:06:23.170  -->  00:06:25.630
press alt enter the cursor on that line
101

101

00:06:25.630  -->  00:06:27.910
we get this option that pops up here
102

102

00:06:27.910  -->  00:06:33.220
click on create test and this pop up
103

103

00:06:33.220  -->  00:06:34.780
will pop up the first time you do this
104

104

00:06:34.780  -->  00:06:37.720
it's actually asking where we're going
105

105

00:06:37.720  -->  00:06:39.910
to put the test code because what
106

106

00:06:39.910  -->  00:06:41.950
actually happens is j unit will create
107

107

00:06:41.950  -->  00:06:44.200
for each class in your
108

108

00:06:44.200  -->  00:06:47.260
project and equivalent test class so
109

109

00:06:47.260  -->  00:06:50.080
i'll have the same name as the class but
110

110

00:06:50.080  -->  00:06:52.090
with the word test in it in this case
111

111

00:06:52.090  -->  00:06:53.950
we've got a class called bank account
112

112

00:06:53.950  -->  00:06:57.610
dot java so junit will want to create a
113

113

00:06:57.610  -->  00:06:59.710
file called bank account test . java
114

114

00:06:59.710  -->  00:07:02.020
i'm going to click OK to
115

115

00:07:02.020  -->  00:07:03.810
enable the tests to be added into the
116

116

00:07:03.810  -->  00:07:06.160
same root in the same source root
117

117

00:07:06.160  -->  00:07:08.470
so will see that when I open the
118

118

00:07:08.470  -->  00:07:09.750
project pane shortly so i'm gonna click
119

119

00:07:09.750  -->  00:07:13.000
OK to that now once I do that will
120

120

00:07:13.000  -->  00:07:15.190
get this pop up as well but we want to
121

121

00:07:15.190  -->  00:07:16.560
do here as you can see that it's for me it's
122

122

00:07:16.560  -->  00:07:19.330
pop and said or was shown test
123

123

00:07:19.330  -->  00:07:22.000
library previous as the default and may or
124

124

00:07:22.000  -->  00:07:23.470
may not do that for you but what you
125

125

00:07:23.470  -->  00:07:25.090
want to do is come down here click on the
126

126

00:07:25.090  -->  00:07:29.310
drop-down and select j unit 4 and at
127

127

00:07:29.310  -->  00:07:30.720
the moment it's coming up saying junit 4
128

128

00:07:30.720  -->  00:07:32.970
library not found in the module we can
129

129

00:07:32.970  -->  00:07:36.280
click on fix and get this little pop-up
130

130

00:07:36.280  -->  00:07:38.650
and you can see the options are we can
131

131

00:07:38.650  -->  00:07:41.050
either copy of the j unit 4 library or
132

132

00:07:41.050  -->  00:07:43.300
we can use the J unit 4 from the
133

133

00:07:43.300  -->  00:07:46.410
IntelliJ IDEA distribution so select the
134

134

00:07:46.410  -->  00:07:47.680
first option because it makes more sense
135

135

00:07:47.680  -->  00:07:49.840
to use the in built one that comes bundled
136

136

00:07:49.840  -->  00:07:51.780
with intellij click on OK
137

137

00:07:51.780  -->  00:07:54.400
we now no longer get that error about the j unit
138

138

00:07:54.400  -->  00:07:58.240
library at the bottom down here we've
139

139

00:07:58.240  -->  00:08:00.720
got the options of the methods that are
140

140

00:08:00.720  -->  00:08:02.940
in this particular class and we can
141

141

00:08:02.940  -->  00:08:05.400
create an equivalent test for that that
142

142

00:08:05.400  -->  00:08:06.960
method for each of those methods so
143

143

00:08:06.960  -->  00:08:08.650
let's click on the checkbox next to each
144

144

00:08:08.650  -->  00:08:12.280
one click on click ok I'm going to open the
145

145

00:08:12.280  -->  00:08:14.460
project pane here just to show you what
146

146

00:08:14.460  -->  00:08:16.380
happened and you can see now that
147

147

00:08:16.380  -->  00:08:19.060
intellij is actually added this
148

148

00:08:19.060  -->  00:08:22.180
extra class this bank account test class
149

149

00:08:22.180  -->  00:08:24.490
and put it in the same source folder as
150

150

00:08:24.490  -->  00:08:27.430
the regular package so basically you can
151

151

00:08:27.430  -->  00:08:29.880
differentiate between the two by the
152

152

00:08:29.880  -->  00:08:33.000
word test on the end their and its
153

153

00:08:33.000  -->  00:08:34.710
conventional for the unit testing class
154

154

00:08:34.710  -->  00:08:36.960
to have the same name as the class that it will
155

155

00:08:36.960  -->  00:08:37.990
test
156

156

00:08:37.990  -->  00:08:40.180
so the test the suffix make sense here
157

157

00:08:40.180  -->  00:08:41.820
that tells you where the glance that
158

158

00:08:41.820  -->  00:08:43.710
these are the tests relating to the bank
159

159

00:08:43.710  -->  00:08:45.900
account class which is what we want to
160

160

00:08:45.900  -->  00:08:48.640
do in this particular case and by the
161

161

00:08:48.640  -->  00:08:50.440
way the new class is created for our
162

162

00:08:50.440  -->  00:08:51.220
tests
163

163

00:08:51.220  -->  00:08:52.810
that's because we don't mix any test
164

164

00:08:52.810  -->  00:08:54.640
code with the application code that's
165

165

00:08:54.640  -->  00:08:56.350
why they are separate and distinct from
166

166

00:08:56.350  -->  00:08:59.200
each other so notice here that there's
167

167

00:08:59.200  -->  00:09:01.600
one test method for each method in the
168

168

00:09:01.600  -->  00:09:04.200
bank account class now remember that a
169

169

00:09:04.200  -->  00:09:07.240
unit is typically a method and so a unit
170

170

00:09:07.240  -->  00:09:10.480
test will typically test one method this
171

171

00:09:10.480  -->  00:09:13.950
....annotation tells the j
172

172

00:09:13.950  -->  00:09:15.350
unit framework
173

173

00:09:15.350  -->  00:09:18.070
that the method is a test method now
174

174

00:09:18.070  -->  00:09:19.670
right now the j unit references are
175

175

00:09:19.670  -->  00:09:21.800
unresolved even though we added the
176

176

00:09:21.800  -->  00:09:24.470
library to our project that's because when
177

177

00:09:24.470  -->  00:09:26.750
we click the Fix button and IntelliJ
178

178

00:09:26.750  -->  00:09:29.600
added the library to the class path it set the
179

179

00:09:29.600  -->  00:09:32.180
usage of the library to testing which
180

180

00:09:32.180  -->  00:09:33.700
means that the library will only be
181

181

00:09:33.700  -->  00:09:36.380
included when we run tests but not when
182

182

00:09:36.380  -->  00:09:38.500
we compile them to fix this we need to
183

183

00:09:38.500  -->  00:09:39.980
go to the project structured dialogue
184

184

00:09:39.980  -->  00:09:45.350
up here file project structure we need
185

185

00:09:45.350  -->  00:09:46.570
to click on it over here two modules
186

186

00:09:46.570  -->  00:09:50.600
over here to click on junit and want
187

187

00:09:50.600  -->  00:09:51.580
to come over here to the right where
188

188

00:09:51.580  -->  00:09:54.520
it's got tests and change that and
189

189

00:09:54.520  -->  00:09:57.470
select compile once we do that we click
190

190

00:09:57.470  -->  00:10:01.370
on ok you can see that the intellij
191

191

00:10:01.370  -->  00:10:04.040
had a brief think about it and now those
192

192

00:10:04.040  -->  00:10:06.740
annotations are now resolving and
193

193

00:10:06.740  -->  00:10:08.240
working fine and we no longer got any
194

194

00:10:08.240  -->  00:10:10.880
errors now if you want to avoid the
195

195

00:10:10.880  -->  00:10:12.500
extra step of going to the project
196

196

00:10:12.500  -->  00:10:14.380
structure dialogues i just did you can
197

197

00:10:14.380  -->  00:10:16.160
do so by not clicking fix when we add
198

198

00:10:16.160  -->  00:10:18.290
the library so lets actually just go
199

199

00:10:18.290  -->  00:10:19.330
through that just so for future
200

200

00:10:19.330  -->  00:10:21.760
reference you can see what to do their so
201

201

00:10:21.760  -->  00:10:23.200
go back into the project structure again
202

202

00:10:23.200  -->  00:10:28.690
come here to j unit i'm going to remove
203

203

00:10:28.690  -->  00:10:30.680
that by clicking on the minues but
204

204

00:10:30.680  -->  00:10:32.300
bearing in mind that the plus and minus
205

205

00:10:32.300  -->  00:10:34.670
maybe a different location might be the
206

206

00:10:34.670  -->  00:10:35.720
top of the screen but in any event
207

207

00:10:35.720  -->  00:10:38.660
selected click on minus click on ok
208

208

00:10:38.660  -->  00:10:41.560
and obviously we've not got those errors
209

209

00:10:41.560  -->  00:10:44.260
again because we have removed the j unit
210

210

00:10:44.260  -->  00:10:49.390
library from our project so come across
211

211

00:10:49.390  -->  00:10:51.620
here to one of these and resolved
212

212

00:10:51.620  -->  00:10:53.360
annotations putting cursor to the right
213

213

00:10:53.360  -->  00:10:55.910
of the j unit where they were in red and
214

214

00:10:55.910  -->  00:10:59.540
hold on alt and press Enter or return we
215

215

00:10:59.540  -->  00:11:03.980
click on this add j unit 4 to classpath the
216

216

00:11:03.980  -->  00:11:05.140
same deal here we want to click on
217

217

00:11:05.140  -->  00:11:08.240
or select the use j unit 4 from
218

218

00:11:08.240  -->  00:11:10.550
IntelliJ IDEA distribution click ok
219

219

00:11:10.550  -->  00:11:14.000
and also fixes the annotations and
220

220

00:11:14.000  -->  00:11:16.630
we now no longer get any errors so i
221

221

00:11:16.630  -->  00:11:18.680
personally prefer this method because we
222

222

00:11:18.680  -->  00:11:19.750
don't have to go into the project
223

223

00:11:19.750  -->  00:11:21.470
structured dialogue at all to set the
224

224

00:11:21.470  -->  00:11:23.600
value to compile just a few just a few
225

225

00:11:23.600  -->  00:11:24.800
more steps and get you up to speed
226

226

00:11:24.800  -->  00:11:25.630
quicker
227

227

00:11:25.630  -->  00:11:29.070
alright so next we're going to create
228

228

00:11:29.070  -->  00:11:30.990
a separate run configuration for all our
229

229

00:11:30.990  -->  00:11:33.720
tests because we want to test a class in
230

230

00:11:33.720  -->  00:11:35.580
our application we don't actually want
231

231

00:11:35.580  -->  00:11:38.100
to run the application itself we want to
232

232

00:11:38.100  -->  00:11:40.740
run the unit tests so within these
233

233

00:11:40.740  -->  00:11:42.600
classes that I've got open on the screen that
234

234

00:11:42.600  -->  00:11:45.090
bank account tester class adjust to
235

235

00:11:45.090  -->  00:11:47.550
the fullscreen going to right click
236

236

00:11:47.550  -->  00:11:49.740
anywhere outside of a method so down
237

237

00:11:49.740  -->  00:11:51.750
here we can right-click you see this
238

238

00:11:51.750  -->  00:11:53.760
option here create bank account test
239

239

00:11:53.760  -->  00:11:55.410
that's going to be the one that wanna
240

240

00:11:55.410  -->  00:11:57.570
click but if you're in a method and you're
241

241

00:11:57.570  -->  00:11:59.580
right click that notice that we've only
242

242

00:11:59.580  -->  00:12:01.110
got one option for create withdraw
243

243

00:12:01.110  -->  00:12:02.850
that's not what we want so just
244

244

00:12:02.850  -->  00:12:04.950
basically move outside of a method right
245

245

00:12:04.950  -->  00:12:07.680
click click on create bank account test
246

246

00:12:07.680  -->  00:12:11.190
that brings up this create run flash
247

247

00:12:11.190  -->  00:12:13.830
debug configuration screen all the
248

248

00:12:13.830  -->  00:12:16.560
options by default are correct click on OK
249

249

00:12:16.560  -->  00:12:19.650
and you may have notice at the top right hand
250

250

00:12:19.650  -->  00:12:23.100
corner here this little while dialog box
251

251

00:12:23.100  -->  00:12:25.740
change we now got an option for main and we also got
252

252

00:12:25.740  -->  00:12:27.570
an option here for bank account test
253

253

00:12:27.570  -->  00:12:28.350
which is the one that's currently
254

254

00:12:28.350  -->  00:12:32.160
selected so basically got this now to
255

255

00:12:32.160  -->  00:12:34.920
run the tests within this bank account
256

256

00:12:34.920  -->  00:12:36.780
test java we're still got our regular
257

257

00:12:36.780  -->  00:12:39.240
main which would run the code that in
258

258

00:12:39.240  -->  00:12:40.980
the main method which is currently
259

259

00:12:40.980  -->  00:12:43.260
nothing in their to process
260

260

00:12:43.260  -->  00:12:45.900
it's an empty method and move this
261

261

00:12:45.900  -->  00:12:49.110
down to the bottom
262

262

00:12:49.110  -->  00:12:50.670
let's go back to main and just put a
263

263

00:12:50.670  -->  00:12:53.550
simple print line there in that they're
264

264

00:12:53.550  -->  00:12:54.600
so we can see that it's doing something
265

265

00:12:54.600  -->  00:13:02.250
...click on
266

266

00:13:02.250  -->  00:13:03.570
run over here again
267

267

00:13:03.570  -->  00:13:08.190
ok that's working but now the moment of
268

268

00:13:08.190  -->  00:13:09.480
truth has arrived
269

269

00:13:09.480  -->  00:13:12.210
lets actually run our tests just to
270

270

00:13:12.210  -->  00:13:13.830
bring the file back on screen again the
271

271

00:13:13.830  -->  00:13:15.420
bank account test
272

272

00:13:15.420  -->  00:13:18.180
come over here select bank account test
273

273

00:13:18.180  -->  00:13:20.190
click on run
274

274

00:13:20.190  -->  00:13:23.280
alright so you can see something's
275

275

00:13:23.280  -->  00:13:25.470
happened on the bottom of the screen the
276

276

00:13:25.470  -->  00:13:27.180
console panel at the bottom has been
277

277

00:13:27.180  -->  00:13:29.640
split into two parts on the left you can
278

278

00:13:29.640  -->  00:13:31.230
see there's a list of all the tests we
279

279

00:13:31.230  -->  00:13:33.180
ran so you can see that there are three
280

280

00:13:33.180  -->  00:13:35.550
there corresponds to the method names
281

281

00:13:35.550  -->  00:13:37.260
that are in our bank account test
282

282

00:13:37.260  -->  00:13:39.750
class and actually shows you the name
283

283

00:13:39.750  -->  00:13:41.820
and how long in milliseconds it took to
284

284

00:13:41.820  -->  00:13:42.770
actually execute
285

285

00:13:42.770  -->  00:13:44.990
that test on the right is the normal
286

286

00:13:44.990  -->  00:13:48.240
console that we used to see there's
287

287

00:13:48.240  -->  00:13:50.870
also a toolbar that only appears when we are
288

288

00:13:50.870  -->  00:13:53.060
running tests for now though you will notice
289

289

00:13:53.060  -->  00:13:54.620
that there's a message after the green
290

290

00:13:54.620  -->  00:13:56.910
bar the reports that all our tests
291

291

00:13:56.910  -->  00:13:59.490
were successful over here all three
292

292

00:13:59.490  -->  00:14:02.510
tests passed but this is actually bad
293

293

00:14:02.510  -->  00:14:05.000
and the reason it's bad as we haven't
294

294

00:14:05.000  -->  00:14:07.820
actually written any tests all we have
295

295

00:14:07.820  -->  00:14:10.230
in our bank account to test class are
296

296

00:14:10.230  -->  00:14:12.720
stubs which is another word
297

297

00:14:12.720  -->  00:14:14.850
for empty methods but if you want to
298

298

00:14:14.850  -->  00:14:17.100
look at the test report we could forget
299

299

00:14:17.100  -->  00:14:20.240
that the tests were only stubs I think
300

300

00:14:20.240  -->  00:14:21.890
that we tested our application and then
301

301

00:14:21.890  -->  00:14:24.830
all the tests have pass so make sure we
302

302

00:14:24.830  -->  00:14:26.990
don't make this mistake before we end the
303

303

00:14:26.990  -->  00:14:28.760
video we're going to have all our tests
304

304

00:14:28.760  -->  00:14:31.880
call junit fail method and that
305

305

00:14:31.880  -->  00:14:34.010
method does what it says it says it
306

306

00:14:34.010  -->  00:14:36.800
reports that a test has failed so accepts
307

307

00:14:36.800  -->  00:14:38.750
a string parameter that it will report
308

308

00:14:38.750  -->  00:14:41.910
when the test fails so lets actually add
309

309

00:14:41.910  -->  00:14:43.410
that to each one of these methods so
310

310

00:14:43.410  -->  00:14:46.740
it's going to be...
311

311

00:14:46.740  -->  00:14:51.930
...
312

312

00:14:51.930  -->  00:14:55.170
....
313

313

00:14:55.170  -->  00:15:04.070
...
314

314

00:15:04.070  -->  00:15:06.950
now that i've done that if i run our
315

315

00:15:06.950  -->  00:15:12.180
test again we get three errors
316

316

00:15:12.180  -->  00:15:15.380
so we can see that is now completed in
317

317

00:15:15.380  -->  00:15:17.160
the amount of time that's taken but
318

318

00:15:17.160  -->  00:15:20.060
we're getting these assertions now j
319

319

00:15:20.060  -->  00:15:22.010
unit framework assertion failed error
320

320

00:15:22.010  -->  00:15:23.670
with messages this test is yet to be
321

321

00:15:23.670  -->  00:15:25.820
completed we can see looking down there
322

322

00:15:25.820  -->  00:15:28.290
we've got 1 for each of our methods so basically
323

323

00:15:28.290  -->  00:15:31.500
all three methods are now failing so
324

324

00:15:31.500  -->  00:15:33.680
hopefully now you can see that how
325

325

00:15:33.680  -->  00:15:35.040
getting into the habit of adding a
326

326

00:15:35.040  -->  00:15:37.980
call to fail to any new test method will
327

327

00:15:37.980  -->  00:15:39.950
ensure that we aren't running tests stubs
328

328

00:15:39.950  -->  00:15:41.930
and that we know that these can
329

329

00:15:41.930  -->  00:15:43.580
ultimately be replaced with our tests
330

330

00:15:43.580  -->  00:15:45.140
when we get to writing that bit of code
331

331

00:15:45.140  -->  00:15:48.050
so when the tests failed through
332

332

00:15:48.050  -->  00:15:50.420
these java . lang assertion error
333

333

00:15:50.420  -->  00:15:52.820
exceptions and the message reported for
334

334

00:15:52.820  -->  00:15:54.720
each exception again you see on the
335

335

00:15:54.720  -->  00:15:55.690
screen there
336

336

00:15:55.690  -->  00:15:57.070
is a message we pass to the fail
337

337

00:15:57.070  -->  00:16:00.520
method now when we use j unit what we
338

338

00:16:00.520  -->  00:16:02.230
essentially do is test the output of a
339

339

00:16:02.230  -->  00:16:04.730
method against an assertion that we've
340

340

00:16:04.730  -->  00:16:07.480
made about the expected output so test
341

341

00:16:07.480  -->  00:16:10.040
fails if the assertion isn't met that's
342

342

00:16:10.040  -->  00:16:12.940
why j unit Reports tests stubs passes
343

343

00:16:12.940  -->  00:16:15.370
they don't assert anything and so no
344

344

00:16:15.370  -->  00:16:17.830
assertions fail this will become clearer
345

345

00:16:17.830  -->  00:16:24.160
when we continue in the next video
