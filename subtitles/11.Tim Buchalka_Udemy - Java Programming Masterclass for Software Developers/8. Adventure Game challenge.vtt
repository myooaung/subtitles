WEBVTT
1
1

00:00:05.210  -->  00:00:08.560
so continue on from our previous
video where we learnt that about the split
2

2

00:00:08.560  -->  00:00:13.620
method so we know now how to use that to
split down the string to individual parts
3

3

00:00:13.620  -->  00:00:18.800
which is great for you know sort of enabling you to actually pass a string
4

4

00:00:18.800  -->  00:00:23.150
and to grab each individual elements in
that string so what we gonna do now is
5

5

00:00:23.150  -->  00:00:29.200
we going to comment out this bit of code because we
don't need any more, actually I’ll just delete that
6

6

00:00:29.200  -->  00:00:34.570
now and we'll come back here to this loop because we want to uncomment that because of all this is going to be part of
7

7

00:00:34.570  -->  00:00:37.820
our challenge so we got the code back in
there again that we worked on in the
8

8

00:00:37.820  -->  00:00:38.980
previous video
9

9

00:00:38.980  -->  00:00:50.920
so what we want to do is clean it up a
little bit and I'll come up here and
10

10

00:00:50.920  -->  00:00:52.530
type in what the challenge
11

11

00:00:52.530  -->  00:01:08.230
actually is
12

12

00:01:08.230  -->  00:01:11.260
ok so here is the challenge
13

13

00:01:11.260  -->  00:01:17.200
so what I want you to do is to change the
program to allow players to type in full
14

14

00:01:17.200  -->  00:01:22.010
words or phrases and then to move to the
correct location based upon that input
15

15

00:01:22.010  -->  00:01:26.390
so you need to pass that input and grab the key parts
so the player should be able to type
16

16

00:01:26.390  -->  00:01:31.150
commands such as go west or run
south, or just type east obviously without
17

17

00:01:31.150  -->  00:01:35.050
the double quotes and the program will move to the appropriate location
18

18

00:01:35.050  -->  00:01:39.540
if there is one now as at present an
attempt to move in an invalid direction
19

19

00:01:39.540  -->  00:01:43.290
one that doesn't exist for a given
location should print that message about
20

20

00:01:43.290  -->  00:01:47.680
you can't move in that direction and
player should remain in the same location
21

21

00:01:47.680  -->  00:01:52.720
of that event and the single letter
commands north,west,south,east and q
22

22

00:01:52.720  -->  00:01:58.400
for the first letters of those N,W,S,E,Q
they should still be available as well
23

23

00:01:58.400  -->  00:02:03.100
so thats your challenged go away now and
see whether you can get that working based
24

24

00:02:03.100  -->  00:02:07.000
on the code you see below and when
you're ready to come back and check
25

25

00:02:07.000  -->  00:02:15.220
your solution against mine, comeback and will go through it
26

26

00:02:15.220  -->  00:02:17.000
ok hopefully
27

27

00:02:17.000  -->  00:02:22.710
you figure it out and able to get it going
so as it turns out there is only two
28

28

00:02:22.710  -->  00:02:28.200
changes that need to be made for this
challenge the first thing we need to
29

29

00:02:28.200  -->  00:02:32.900
create a map that containing
the words that will be recognized and
30

30

00:02:32.900  -->  00:02:37.280
the locations that will result then add a bit
of code to split the players input a bit
31

31

00:02:37.280  -->  00:02:41.770
more than the single characters entered
now after splitting the words in the players
32

32

00:02:41.770  -->  00:02:45.740
input will each have to be checked to see if
they are keyed in the map and if they
33

33

00:02:45.740  -->  00:02:50.010
are the single value was returned and
otherwise no action is taken and then
34

34

00:02:50.010  -->  00:02:54.120
the next word is checked and if none of
the words match then the loop will terminate and
35

35

00:02:54.120  -->  00:02:59.230
of course the attempt to look at the input
in the exits map will fail
36

36

00:02:59.230  -->  00:03:03.860
so what we need to do is come down here after our locations so after we add the exits
37

37

00:03:03.860  -->  00:03:08.450
as well and what we want to do is put in
some extra commands and equivalent
38

38

00:03:08.450  -->  00:03:16.010
command is going to be so what we want
to do is create a map so its going to be…
39

39

00:03:16.010  -->  00:03:28.540
and will call this… and now we need put our command so we gonna put
40

40

00:03:28.540  -->  00:03:40.100
vocabulary… so the word quit gets converted to Q and…
41

41

00:04:05.670  -->  00:04:09.980
…so thats our vocabulary, the extra words that we're now going to support
42

42

00:04:09.980  -->  00:04:14.050
that we are going to be looking for and what we need
to do then is coming down
43

43

00:04:14.050  -->  00:04:20.840
here to our code, after we got the direction on line 65
44

44

00:04:20.840  -->  00:04:25.220
we need to add a checking here so what we
need to do then is specifically check
45

45

00:04:25.220  -->  00:04:31.340
the direction which is the variable that’s
accepted the data from the player and see if
46

46

00:04:31.340  -->  00:04:37.440
the link is greater than one, so if direction…
47

47

00:04:37.440  -->  00:04:40.340
if its greater that one that means not a single character
commands and therefore we need to do
48

48

00:04:40.340  -->  00:04:43.970
some extra processing and of course if
it's not then we just ignore it
49

49

00:04:43.970  -->  00:04:48.800
all together we just continue on, but in this
case it is greater then what we need to
50

50

00:04:48.800  -->  00:04:57.280
do is we need to split the contents of
the input so its going to be…
51

51

00:04:57.280  -->  00:05:04.400
…we are gonna split on a space so that we can get it into
52

52

00:05:04.400  -->  00:05:09.940
our words string array and we’re going
to loop through those words so…
53

53

00:05:09.940  -->  00:05:21.200
…and now we do our test, so now we need to do a test here to
54

54

00:05:21.200  -->  00:05:26.880
see whether a particular word is in the
vocabulary so…
55

55

00:05:26.880  -->  00:05:33.940
so if it does find that word then we just set our direction…
56

56

00:05:36.830  -->  00:05:42.610
so you can see what we're
doing effectively is were ignoring all
57

57

00:05:42.610  -->  00:05:47.990
the other words , so if I type run south
go south or please go south were
58

58

00:05:47.990  -->  00:05:51.590
ignoring the other words other than the
word that is existing in our vocabulary
59

59

00:05:51.590  -->  00:05:56.470
map in which case it would only be south
and if that's the case if it finds that
60

60

00:05:56.470  -->  00:06:00.520
that word has been typed remember
were converting it to upper case
61

61

00:06:00.520  -->  00:06:03.930
so were going to accept upper or
lower case automatically cause its going to be converted
62

62

00:06:03.930  -->  00:06:08.760
then you can say it's using the get to
retrieve the value from the map based
63

63

00:06:08.760  -->  00:06:13.030
on the key value and thats gonna be the abbreviated
single letter command and so
64

64

00:06:13.030  -->  00:06:16.120
consequently once we break out
directions going to contain a single
65

65

00:06:16.120  -->  00:06:17.990
the single letter command and we should be able to
go
66

66

00:06:17.990  -->  00:06:23.840
to that direction and obviously the direction
length wasn't greater one the alls this code gets ignored
67

67

00:06:23.840  -->  00:06:27.970
and move down to line 76 and of course that
still process it as if it was a
68

68

00:06:27.970  -->  00:06:37.720
single letter command as well so let's give this
a go and see whether it works like
69

69

00:06:37.720  -->  00:06:43.250
first we want to check if our single letter commands still works so S, north
70

70

00:06:43.250  -->  00:06:52.060
that was good and we should be able to type in north…Your in the forest, south, your standing at the
71

71

00:06:52.060  -->  00:06:55.530
end of the road, please sir can I go
72

72

00:06:55.530  -->  00:07:05.440
west immediately and you can see
its gone west which is good as we want to
73

73

00:07:05.440  -->  00:07:21.530
do, and how about north right now, you are in the forest, and I
really need to quit this game, and it actually
74

74

00:07:21.530  -->  00:07:25.080
work so you can see that it's almost
like an attempted to for someone who
75

75

00:07:25.080  -->  00:07:29.530
didn't know better at artificial intelligence
they look at that and go from there and say wow from there you
76

76

00:07:29.530  -->  00:07:34.120
figured out I want to go west but of
course the reason that worked was we are
77

77

00:07:34.120  -->  00:07:38.530
looking for the key west and only for
that keyword and ignore everything else and did a look
78

78

00:07:38.530  -->  00:07:45.210
up in our map and worked out, that if I
typed in West that means a W and we already know from up here that a W is
79

79

00:07:45.210  -->  00:07:49.160
for a particular room that is valid and that's
our location are indicated to go in a
80

80

00:07:49.160  -->  00:07:53.030
particular direction in west in this
case so that's it that's the solution I
81

81

00:07:53.030  -->  00:07:57.690
hope you enjoyed that and got a lot out
of it and the next day we gonna move on
82

82

00:07:57.690  -->  00:08:02.130
to creating immutable classes we are going
to talk about why you want to do that
83

83

00:08:02.130  -->  00:08:06.830
and the advantages and why can be a
good technique and we're going to base
84

84

00:08:06.830  -->  00:08:11.400
this some more on this particular game that
we're putting together so see you in the
85

85

00:08:11.400  -->  00:08:11.650
next video
