1
1

00:00:04,600  -->  00:00:05,970
- [Tim] All right, so at this point
2

2

00:00:05,970  -->  00:00:09,010
you've written your
first client and server,
3

3

00:00:09,010  -->  00:00:12,640
but the server that we've
written so far isn't very useful,
4

4

00:00:12,640  -->  00:00:15,330
and that's because it can
only connect to one client.
5

5

00:00:15,330  -->  00:00:17,360
So let's modify it so
that it can now accept
6

6

00:00:17,360  -->  00:00:19,930
connexions from multiple clients.
7

7

00:00:19,930  -->  00:00:22,220
So to do that, what we need to do is,
8

8

00:00:22,220  -->  00:00:25,630
firstly I'll maximise the server edition.
9

9

00:00:26,960  -->  00:00:30,320
So for the server what we
need to do is change the call
10

10

00:00:30,320  -->  00:00:33,520
to accept how it takes
place within the loop,
11

11

00:00:33,520  -->  00:00:35,420
and that's because if
it's only called once,
12

12

00:00:35,420  -->  00:00:37,710
it can only ever accept one connexion,
13

13

00:00:37,710  -->  00:00:40,060
but if it's inside the
loop, the server will accept
14

14

00:00:40,060  -->  00:00:42,950
a connexion, create a new
socket for the client,
15

15

00:00:42,950  -->  00:00:45,850
create the input and output
streams for that client socket,
16

16

00:00:45,850  -->  00:00:47,790
and then loop around
and call accept again,
17

17

00:00:47,790  -->  00:00:49,290
and that's what we want to do so
18

18

00:00:49,290  -->  00:00:51,690
that we can support multiple clients.
19

19

00:00:51,690  -->  00:00:53,950
So to do that, we need to move
things around a little bit,
20

20

00:00:53,950  -->  00:00:56,840
so I'm going to grab this
code here, the socket,
21

21

00:00:56,840  -->  00:00:58,770
socket line right down to and including
22

22

00:00:58,770  -->  00:01:02,100
the print buffer, the print output line.
23

23

00:01:03,450  -->  00:01:05,880
K, you're gonna cut that and then paste
24

24

00:01:05,880  -->  00:01:07,800
it into the while loop.
25

25

00:01:09,450  -->  00:01:10,720
So basically all I've done at this point
26

26

00:01:10,720  -->  00:01:13,570
is move everything inside
the while(true) loop,
27

27

00:01:13,570  -->  00:01:15,500
again, so that the server could loop back
28

28

00:01:15,500  -->  00:01:17,800
and accept more client connexions.
29

29

00:01:17,800  -->  00:01:19,820
So let's now try this out, so we're going
30

30

00:01:19,820  -->  00:01:23,990
to exit our fullscreen mode,
and I'm gonna run the server,
31

31

00:01:29,350  -->  00:01:30,710
and that's still working
like it did before,
32

32

00:01:30,710  -->  00:01:31,990
and this time I'm gonna come over here to
33

33

00:01:31,990  -->  00:01:35,240
the client, let's start a copy of that.
34

34

00:01:37,830  -->  00:01:39,000
Client Connected as you can see,
35

35

00:01:39,000  -->  00:01:43,160
we can put a test in there,
Test, that's working correctly.
36

36

00:01:45,210  -->  00:01:46,700
Let's now run another client while
37

37

00:01:46,700  -->  00:01:48,120
the first one's still running.
38

38

00:01:48,120  -->  00:01:51,890
So I come over here
and click on run again,
39

39

00:01:51,890  -->  00:01:53,370
and you see I've got
Client Connected showing on
40

40

00:01:53,370  -->  00:01:56,170
the left-hand side, and
we've got two tabs here now,
41

41

00:01:56,170  -->  00:01:59,800
so the two copies of
the client running now.
42

42

00:01:59,800  -->  00:02:02,070
The word Demo there just
to make sure it's working,
43

43

00:02:02,070  -->  00:02:03,310
and you can see that's
working as well now,
44

44

00:02:03,310  -->  00:02:07,040
so we've got two clients
connecting to our server.
45

45

00:02:07,040  -->  00:02:08,570
All right, great, so at this point we've
46

46

00:02:08,570  -->  00:02:11,380
got multiple clients that
can connect to the server,
47

47

00:02:11,380  -->  00:02:14,610
but the server code still
has got, has problems.
48

48

00:02:14,610  -->  00:02:16,700
Now can you see what those problems are?
49

49

00:02:16,700  -->  00:02:18,470
Just take a minute to think about
50

50

00:02:18,470  -->  00:02:22,460
what problems there could
exist in the server code.
51

51

00:02:22,460  -->  00:02:24,580
All right, so let's now
demonstrate the problem.
52

52

00:02:24,580  -->  00:02:26,480
Well actually, what I'll
do first is I'll go back
53

53

00:02:26,480  -->  00:02:30,650
and exit from both clients,
so let's do that first.
54

54

00:02:32,640  -->  00:02:34,180
Now depending on the order that I do this,
55

55

00:02:34,180  -->  00:02:37,720
the server may not shut down,
so I'm gonna click on exit,
56

56

00:02:37,720  -->  00:02:40,570
or type exit rather, and then back here
57

57

00:02:40,570  -->  00:02:43,880
and do the second one like so,
58

58

00:02:43,880  -->  00:02:45,830
and you can see that
I've actually closed down
59

59

00:02:45,830  -->  00:02:48,840
both clients here, both exited,
60

60

00:02:48,840  -->  00:02:51,980
but the server hasn't closed down.
61

61

00:02:51,980  -->  00:02:53,730
Now in a real-world situation,
62

62

00:02:53,730  -->  00:02:56,690
that wouldn't be a problem
because usually you want
63

63

00:02:56,690  -->  00:02:59,620
the server to be running
24/7, but if you ever wanted
64

64

00:02:59,620  -->  00:03:01,460
to bring down, or terminate the server,
65

65

00:03:01,460  -->  00:03:03,720
you'd then do so manually
in that scenario.
66

66

00:03:03,720  -->  00:03:06,100
So we don't worry about
this particular problem,
67

67

00:03:06,100  -->  00:03:09,330
if necessary we can terminate
the server manually.
68

68

00:03:09,330  -->  00:03:10,680
So to terminate manually we can just close
69

69

00:03:10,680  -->  00:03:14,180
it down, Terminate, and close it down
70

70

00:03:14,180  -->  00:03:17,220
as we would any programme
that was in a loop.
71

71

00:03:17,220  -->  00:03:18,800
All right, so let's try this again,
72

72

00:03:18,800  -->  00:03:22,220
I'm gonna run the server again this time.
73

73

00:03:24,000  -->  00:03:26,590
Okay, I'm gonna come back over,
74

74

00:03:27,550  -->  00:03:30,800
and I'm going to run this client again.
75

75

00:03:32,040  -->  00:03:34,820
This time I'm not gonna type
anything into the console,
76

76

00:03:34,820  -->  00:03:37,110
now I'm gonna go back and run it again,
77

77

00:03:37,110  -->  00:03:39,010
run a second copy of it.
78

78

00:03:39,010  -->  00:03:41,690
Now we should have seen two
Client Connected messages there
79

79

00:03:41,690  -->  00:03:45,170
but there's only one, now because
we didn't type anything in
80

80

00:03:45,170  -->  00:03:48,300
the first client, the server
code is actually blocked,
81

81

00:03:48,300  -->  00:03:50,450
waiting for input, it's actually blocked.
82

82

00:03:50,450  -->  00:03:54,010
If we come back and have a look over here,
83

83

00:03:54,010  -->  00:03:57,940
at the input.readLine(), line 21 there.
84

84

00:03:57,940  -->  00:03:59,620
So basically the first iteration
85

85

00:03:59,620  -->  00:04:01,560
of the loop hasn't completed, and so
86

86

00:04:01,560  -->  00:04:04,160
the server hasn't called accept again.
87

87

00:04:04,160  -->  00:04:06,740
So we go back now and, back to our client,
88

88

00:04:06,740  -->  00:04:09,320
and actually type something for
89

89

00:04:10,790  -->  00:04:14,040
the first one, and we can then see that
90

90

00:04:15,730  -->  00:04:18,640
the second client connect,
two Client Connected messages
91

91

00:04:18,640  -->  00:04:21,050
are now showing in the left-hand window.
92

92

00:04:21,050  -->  00:04:22,670
Also keep in mind that each client
93

93

00:04:22,670  -->  00:04:26,240
will only ever see one
message echoed back to it.
94

94

00:04:26,240  -->  00:04:29,210
To see that in action, if
we actually close down,
95

95

00:04:29,210  -->  00:04:30,840
well just to confirm before
I do that, by the way,
96

96

00:04:30,840  -->  00:04:33,800
that the other one was still working.
97

97

00:04:33,800  -->  00:04:37,960
That's now working, but if we
close down both of these...
98

98

00:04:41,640  -->  00:04:46,250
And then we start it up
again, we got Client Connected
99

99

00:04:46,250  -->  00:04:49,330
as you can see there, and you can see
100

100

00:04:51,740  -->  00:04:54,180
that when we type the
second one this time,
101

101

00:04:54,180  -->  00:04:56,600
we actually didn't get that response back.
102

102

00:04:56,600  -->  00:04:58,880
So in other words, the second message
103

103

00:04:58,880  -->  00:05:00,560
wasn't echoed back, and that's because
104

104

00:05:00,560  -->  00:05:03,320
the server's now blocked
all the accept calls.
105

105

00:05:03,320  -->  00:05:06,160
So if you run the second client...
106

106

00:05:13,100  -->  00:05:14,840
We've got the same scenario there,
107

107

00:05:14,840  -->  00:05:16,720
that it only accepts, or echoes rather,
108

108

00:05:16,720  -->  00:05:19,490
back the first message,
and not the second one,
109

109

00:05:19,490  -->  00:05:22,610
'cause the server's now blocked
on the accept call again.
110

110

00:05:22,610  -->  00:05:26,780
All right, so let's terminate
everything here now,
111

111

00:05:30,610  -->  00:05:33,360
and terminate the server as well.
112

112

00:05:37,370  -->  00:05:38,870
What we're gonna do
now is make a change to
113

113

00:05:38,870  -->  00:05:42,850
the server code to simulate
a long-running task.
114

114

00:05:42,850  -->  00:05:44,510
Now because you need time to switch to
115

115

00:05:44,510  -->  00:05:47,630
a second client and type
something into its console,
116

116

00:05:47,630  -->  00:05:50,100
we're gonna have the
server sleep for 30 seconds
117

117

00:05:50,100  -->  00:05:52,490
every time it receives
input from the client,
118

118

00:05:52,490  -->  00:05:53,670
and we can change the sleep time
119

119

00:05:53,670  -->  00:05:55,760
if that's too long, or too short.
120

120

00:05:55,760  -->  00:05:57,050
I'll show you how to do that.
121

121

00:05:57,050  -->  00:05:58,970
So I'm gonna update the
server as following,
122

122

00:05:58,970  -->  00:06:00,360
so we're gonna come up here after
123

123

00:06:00,360  -->  00:06:03,370
the string, echo equals input.readLine(),
124

124

00:06:03,370  -->  00:06:05,520
and we're gonna put a try/catch there.
125

125

00:06:05,520  -->  00:06:08,270
try, we're gonna go Thread.sleep,
126

126

00:06:11,240  -->  00:06:15,020
I'm gonna make this 15 seconds, 15000,
127

127

00:06:15,020  -->  00:06:17,190
but you can make it any
length of time you'd like.
128

128

00:06:17,190  -->  00:06:21,360
catch(InterruptedException
e), and we'll print out
129

129

00:06:23,220  -->  00:06:27,380
if we do get that exception,
"Thread interrupted."
130

130

00:06:33,730  -->  00:06:34,750
All right, so what we're gonna do now
131

131

00:06:34,750  -->  00:06:37,740
is run the server, then
run the first client,
132

132

00:06:37,740  -->  00:06:39,220
but then we're not going
to type anything in
133

133

00:06:39,220  -->  00:06:41,060
the console for the first client,
134

134

00:06:41,060  -->  00:06:42,840
then we're gonna run the second client
135

135

00:06:42,840  -->  00:06:44,070
and find that the second client
136

136

00:06:44,070  -->  00:06:46,080
won't be able to respond,
or connect rather,
137

137

00:06:46,080  -->  00:06:48,710
until the server reads
data from the first client.
138

138

00:06:48,710  -->  00:06:50,520
So we're gonna go back to
the first client and type in
139

139

00:06:50,520  -->  00:06:53,280
a string, and then switch
back and see what happens.
140

140

00:06:53,280  -->  00:06:55,940
So let's see how all this works.
141

141

00:06:57,410  -->  00:07:00,250
So I'm gonna run the server, okay,
142

142

00:07:01,920  -->  00:07:05,800
I'm going to run a copy of the first.
143

143

00:07:05,800  -->  00:07:06,920
K, Client Connected, but I'm now going
144

144

00:07:06,920  -->  00:07:09,720
to click on run again to
run a second copy of it,
145

145

00:07:09,720  -->  00:07:11,430
but then I'm gonna switch
back to the first one
146

146

00:07:11,430  -->  00:07:15,600
because at the moment we need
to go back to the first one.
147

147

00:07:16,980  -->  00:07:20,700
Type something in there, nothing's working
148

148

00:07:20,700  -->  00:07:22,180
for there at the moment.
149

149

00:07:22,180  -->  00:07:25,430
Let's switch back to the second client,
150

150

00:07:27,020  -->  00:07:28,660
Client's Connected as
you can see there now,
151

151

00:07:28,660  -->  00:07:30,520
but we haven't got anything echoing.
152

152

00:07:30,520  -->  00:07:34,520
Go back to the first one,
we've now got an echo.
153

153

00:07:36,580  -->  00:07:39,480
Second one, finally we got the echo back,
154

154

00:07:39,480  -->  00:07:43,160
and that's got to do with
this delay, this Thread.sleep.
155

155

00:07:43,160  -->  00:07:45,070
So there's basically a delay there
156

156

00:07:45,070  -->  00:07:46,790
before we get the echo back.
157

157

00:07:46,790  -->  00:07:49,580
So what's actually the
cause of all these problems?
158

158

00:07:49,580  -->  00:07:50,740
Well if you guessed that it's because
159

159

00:07:50,740  -->  00:07:53,590
the server's doing everything
on a single thread,
160

160

00:07:53,590  -->  00:07:55,650
I'm gonna give you a gold star.
161

161

00:07:55,650  -->  00:07:57,160
So I mentioned in the previous video
162

162

00:07:57,160  -->  00:07:59,220
that when writing networking code,
163

163

00:07:59,220  -->  00:08:01,220
you need to be familiar with threads,
164

164

00:08:01,220  -->  00:08:03,600
and this is actually the reason why.
165

165

00:08:03,600  -->  00:08:06,140
Servers that can connect
to multiple clients
166

166

00:08:06,140  -->  00:08:08,550
will run multiple threads.
167

167

00:08:08,550  -->  00:08:10,500
So what we're gonna do now
is we're going to update
168

168

00:08:10,500  -->  00:08:12,740
the code so that the server handles
169

169

00:08:12,740  -->  00:08:15,280
each client on a separate thread,
170

170

00:08:15,280  -->  00:08:17,320
and this is gonna do two things.
171

171

00:08:17,320  -->  00:08:19,820
Firstly, it's gonna let the
server be more responsive
172

172

00:08:19,820  -->  00:08:21,680
to client connexion requests,
173

173

00:08:21,680  -->  00:08:24,100
and secondly it's gonna prevent one client
174

174

00:08:24,100  -->  00:08:26,760
from hogging the server
for too long a period.
175

175

00:08:26,760  -->  00:08:30,930
So I'm gonna close down
the client and the servers,
176

176

00:08:33,130  -->  00:08:36,160
or client and server I should say.
177

177

00:08:36,160  -->  00:08:40,570
Okay, and we'll have a look
at our server code again.
178

178

00:08:40,570  -->  00:08:43,070
All right, so on the server's Main thread
179

179

00:08:43,070  -->  00:08:44,880
we're going to call the accept method,
180

180

00:08:44,880  -->  00:08:47,010
but whenever it accepts a connexion,
181

181

00:08:47,010  -->  00:08:49,160
what we're gonna do this time
is kick off a new thread for
182

182

00:08:49,160  -->  00:08:52,530
the client, and then call
the accept method again.
183

183

00:08:52,530  -->  00:08:54,630
So each client thread will be responsible
184

184

00:08:54,630  -->  00:08:56,940
for creating the input/output streams,
185

185

00:08:56,940  -->  00:08:58,950
listening for requests on the client,
186

186

00:08:58,950  -->  00:09:01,100
and then responding to those events.
187

187

00:09:01,100  -->  00:09:05,250
So what we're going to
do is create a new class,
188

188

00:09:05,250  -->  00:09:08,840
new Java class, we'll
call this one Echoer,
189

189

00:09:10,160  -->  00:09:13,490
and the class is going to extend Thread,
190

190

00:09:15,070  -->  00:09:18,330
that's java.lang.Thread,
and we're gonna need
191

191

00:09:18,330  -->  00:09:22,500
a private Socket socket,
and we want a constructor,
192

192

00:09:24,750  -->  00:09:28,450
and the constructor is going
to just initialise the sockets,
193

193

00:09:28,450  -->  00:09:31,870
so it's public Echoer accepting a socket,
194

194

00:09:34,040  -->  00:09:36,960
and this.socket is equal to socket.
195

195

00:09:38,460  -->  00:09:40,550
So now what we're gonna
do is add the run method,
196

196

00:09:40,550  -->  00:09:43,260
and that's gonna be called
when the thread is started.
197

197

00:09:43,260  -->  00:09:45,130
Now the code here is gonna
be very familiar since it's
198

198

00:09:45,130  -->  00:09:48,430
the same as what we're currently
doing in the main method.
199

199

00:09:48,430  -->  00:09:50,030
What is gonna be a bit different is
200

200

00:09:50,030  -->  00:09:52,680
that we're not gonna use a
try with resources statement,
201

201

00:09:52,680  -->  00:09:55,340
and that's because the method
doesn't create the socket
202

202

00:09:55,340  -->  00:09:57,310
when the server connects to a client.
203

203

00:09:57,310  -->  00:09:58,630
So you have to explicitly close
204

204

00:09:58,630  -->  00:10:00,870
the socket when we're finished with it.
205

205

00:10:00,870  -->  00:10:04,200
So let's go ahead and type this code in.
206

206

00:10:05,390  -->  00:10:09,560
So I'll @Override run, and we're
gonna change the super.run.
207

207

00:10:15,280  -->  00:10:18,570
We'll put a try in here,
then we're gonna catch
208

208

00:10:18,570  -->  00:10:21,660
an IOException, and if we do get one,
209

209

00:10:25,720  -->  00:10:26,840
then we're just gonna print out a message,
210

210

00:10:26,840  -->  00:10:30,350
"Oops: " plus e.getMessage(),
211

211

00:10:30,350  -->  00:10:33,930
and we also want a
finally in here as well,
212

212

00:10:35,130  -->  00:10:36,520
and finally needs to have a try,
213

213

00:10:36,520  -->  00:10:38,350
'cause we're not using try with resources,
214

214

00:10:38,350  -->  00:10:40,980
it's gonna be socket.close,
215

215

00:10:40,980  -->  00:10:45,660
then we wanna catch an
IOException on that as well,
216

216

00:10:45,660  -->  00:10:49,320
at the moment we won't
flag that in any way,
217

217

00:10:51,780  -->  00:10:53,400
but we could log that if we wanted to.
218

218

00:10:53,400  -->  00:10:56,970
All right, so in terms of the code,
219

219

00:10:56,970  -->  00:11:01,130
BufferedReader input is
equal to new BufferedReader,
220

220

00:11:03,550  -->  00:11:07,710
new
InputStreamReader(socket.getInputStream()),
221

221

00:11:09,120  -->  00:11:11,290
same as we did previously.
222

222

00:11:13,610  -->  00:11:16,450
All right, then we
wanna PrintWriter writer
223

223

00:11:16,450  -->  00:11:21,450
is equal to new
PrintWriter(socket.getOutputStream(),
224

224

00:11:21,450  -->  00:11:24,510
passing true as the second
argument for flushing reasons,
225

225

00:11:24,510  -->  00:11:25,340
then we're gonna add a while loop,
226

226

00:11:25,340  -->  00:11:29,510
while(true) String echoString
is equal to input.readLine().
227

227

00:11:35,490  -->  00:11:39,660
if(echoString. is equal
to, or equals "exit",
228

228

00:11:42,400  -->  00:11:44,120
we're gonna break out of the while loop,
229

229

00:11:44,120  -->  00:11:46,510
'cause of course it's an infinite loop,
230

230

00:11:46,510  -->  00:11:48,020
otherwise we're still in the loop,
231

231

00:11:48,020  -->  00:11:52,190
output.println, instead of
writer we'll call that output,
232

232

00:11:57,160  -->  00:11:59,320
and let's echo the string.
233

233

00:12:00,190  -->  00:12:03,040
All right, so that's our Echoer class,
234

234

00:12:03,040  -->  00:12:04,080
so what we wanna now do is go back
235

235

00:12:04,080  -->  00:12:07,170
to our main method from our Main class,
236

236

00:12:07,170  -->  00:12:08,690
we're gonna change the code to this now.
237

237

00:12:08,690  -->  00:12:10,820
We're gonna leave our try
with resources in there,
238

238

00:12:10,820  -->  00:12:13,550
but we're getting rid
of this code in here.
239

239

00:12:13,550  -->  00:12:15,480
I perhaps could have
copied all that instead
240

240

00:12:15,480  -->  00:12:17,500
of typing it out again, but in any event,
241

241

00:12:17,500  -->  00:12:20,010
we're getting rid of all that code.
242

242

00:12:20,010  -->  00:12:22,490
That's now going to be
while(true) still, but let's go
243

243

00:12:22,490  -->  00:12:26,650
to the new
Echoer(serverSocket.accept().start()).
244

244

00:12:34,170  -->  00:12:38,340
There should have been an extra
parentheses there, like so.
245

245

00:12:40,770  -->  00:12:43,050
We're still catching an IOException,
246

246

00:12:43,050  -->  00:12:44,580
and we'll show that server exception
247

247

00:12:44,580  -->  00:12:46,690
if we actually get one there now.
248

248

00:12:46,690  -->  00:12:48,040
So basically now we're creating
249

249

00:12:48,040  -->  00:12:50,380
the server socket as before,
250

250

00:12:51,240  -->  00:12:53,400
and still writing an infinite loop.
251

251

00:12:53,400  -->  00:12:55,010
We're creating a new server socket,
252

252

00:12:55,010  -->  00:12:56,690
while(true) infinite loop,
253

253

00:12:56,690  -->  00:12:58,340
but this time we're
kicking off a new thread
254

254

00:12:58,340  -->  00:13:00,010
every time we accept a connexion,
255

255

00:13:00,010  -->  00:13:03,760
so new Echoer(serverSocket.accept()),
256

256

00:13:03,760  -->  00:13:07,290
then .start(), we're kicking
off the Echoer run method,
257

257

00:13:07,290  -->  00:13:08,880
and recall that the accept method returns
258

258

00:13:08,880  -->  00:13:10,770
a socket for the client, and that's what
259

259

00:13:10,770  -->  00:13:13,020
the serverSocket.accept() does,
260

260

00:13:13,020  -->  00:13:15,370
and we're returning that,
or sending that if you like,
261

261

00:13:15,370  -->  00:13:17,330
to the Echoer in the constructor,
262

262

00:13:17,330  -->  00:13:19,400
and then calling the start() method.
263

263

00:13:19,400  -->  00:13:20,980
So I guess we could've
changed the code there,
264

264

00:13:20,980  -->  00:13:24,790
we could've written it instead, like this,
265

265

00:13:24,790  -->  00:13:28,960
a Socket socket is equal
to serverSocket.accept(),
266

266

00:13:30,690  -->  00:13:34,860
Echoer echoer = new Echoer(socket),
267

267

00:13:37,490  -->  00:13:40,640
echoer.start(), so we could've,
268

268

00:13:40,640  -->  00:13:42,020
that's basically the
equivalent code there.
269

269

00:13:42,020  -->  00:13:44,750
I'll comment that out so
you've got a copy of that
270

270

00:13:44,750  -->  00:13:46,460
if you need to download the source code,
271

271

00:13:46,460  -->  00:13:47,610
but the line that I've got here
272

272

00:13:47,610  -->  00:13:49,410
on line 14 is basically doing exactly
273

273

00:13:49,410  -->  00:13:52,770
what those three lines of code are doing.
274

274

00:13:52,770  -->  00:13:55,310
I'll paste that at the top there.
275

275

00:13:55,310  -->  00:13:56,640
All right, so let's finish the video here
276

276

00:13:56,640  -->  00:13:57,790
because it's getting quite long.
277

277

00:13:57,790  -->  00:13:59,220
In the next video we'll start testing
278

278

00:13:59,220  -->  00:14:01,920
this multi-threaded
server that we've written,
279

279

00:14:01,920  -->  00:14:04,420
so I'll see you in the next video.
