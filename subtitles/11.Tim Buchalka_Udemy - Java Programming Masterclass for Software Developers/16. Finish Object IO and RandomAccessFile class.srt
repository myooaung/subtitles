1
1

00:00:04,970  -->  00:00:06,110
- [Tim] All right, so
in the previous video
2

2

00:00:06,110  -->  00:00:07,890
we wrote this code and made some changes
3

3

00:00:07,890  -->  00:00:12,060
and talked about catching
this ClassNotFoundException.
4

4

00:00:13,170  -->  00:00:14,660
So let's actually now try running this
5

5

00:00:14,660  -->  00:00:17,010
to make sure that our main method,
6

6

00:00:17,010  -->  00:00:20,730
again, this is in Locations.main,
and in the main class,
7

7

00:00:20,730  -->  00:00:22,780
making sure this still actually runs.
8

8

00:00:22,780  -->  00:00:25,530
So we'll actually run this again.
9

9

00:00:30,660  -->  00:00:32,360
And we can scroll up there.
10

10

00:00:32,360  -->  00:00:33,280
You can see that all the
11

11

00:00:33,280  -->  00:00:34,910
locations are printed to the console,
12

12

00:00:34,910  -->  00:00:36,370
so that means we're still reading the
13

13

00:00:36,370  -->  00:00:38,510
objects from the file correctly.
14

14

00:00:38,510  -->  00:00:40,710
So now that we can see that
that's still working okay
15

15

00:00:40,710  -->  00:00:43,120
with our Locations.java main method,
16

16

00:00:43,120  -->  00:00:45,460
let's go back and run the
application's main method
17

17

00:00:45,460  -->  00:00:48,630
to make sure the game's still working.
18

18

00:00:56,320  -->  00:00:58,790
It seems to be working fine still.
19

19

00:00:58,790  -->  00:01:00,210
Quit out of that.
20

20

00:01:01,430  -->  00:01:02,670
The game's still working, and our code,
21

21

00:01:02,670  -->  00:01:04,080
I think you'd agree, looking at
22

22

00:01:04,080  -->  00:01:06,610
it now, is a lot easier to read.
23

23

00:01:06,610  -->  00:01:08,450
And because I've saved this in the
24

24

00:01:08,450  -->  00:01:10,380
previous video, now,
and commented that code,
25

25

00:01:10,380  -->  00:01:12,660
I'll remove this from the source code
26

26

00:01:12,660  -->  00:01:16,180
and likewise for this commented out code
27

27

00:01:16,180  -->  00:01:18,850
in our static initializer block.
28

28

00:01:19,900  -->  00:01:22,030
Let's also remove that code as well
29

29

00:01:22,030  -->  00:01:24,530
just to clear things up a bit.
30

30

00:01:29,250  -->  00:01:31,200
The point is, though,
looking at that code now,
31

31

00:01:31,200  -->  00:01:33,790
is our main method and locations class
32

32

00:01:33,790  -->  00:01:35,530
and the static initializer block
33

33

00:01:35,530  -->  00:01:37,470
and it's far more concise, I think
34

34

00:01:37,470  -->  00:01:41,310
you'd agree, and also easier to read.
35

35

00:01:41,310  -->  00:01:43,250
Now, for fun, let's actually temporarily
36

36

00:01:43,250  -->  00:01:45,380
comment out the declaration of the
37

37

00:01:45,380  -->  00:01:49,250
serial version UID in the location class.
38

38

00:01:49,250  -->  00:01:52,500
Come up here and just comment that out.
39

39

00:01:53,530  -->  00:01:57,530
You go back to the main
method and run it again.
40

40

00:02:01,890  -->  00:02:03,880
You see, we've now got an error.
41

41

00:02:03,880  -->  00:02:05,620
In this case, we've got, originally, an
42

42

00:02:05,620  -->  00:02:07,730
IOException, and then ultimately
43

43

00:02:07,730  -->  00:02:11,050
we've got a NullPointerException
as a result of that one.
44

44

00:02:11,050  -->  00:02:14,560
And so that's coming back
from the other class,
45

45

00:02:14,560  -->  00:02:15,900
and that's because we didn't
46

46

00:02:15,900  -->  00:02:19,340
explicitly set the serial version ID.
47

47

00:02:19,340  -->  00:02:20,970
Because we didn't do that, the compiler
48

48

00:02:20,970  -->  00:02:23,890
assigned one when it
recompiled the location
49

49

00:02:23,890  -->  00:02:25,810
class, but this means that it no
50

50

00:02:25,810  -->  00:02:29,000
longer matches the value
we wrote to the file.
51

51

00:02:29,000  -->  00:02:30,640
Which, if you recall, was 1L.
52

52

00:02:30,640  -->  00:02:32,800
Now because of that,
the exception is thrown
53

53

00:02:32,800  -->  00:02:36,120
when we try to read objects from the file.
54

54

00:02:36,120  -->  00:02:37,810
So in order to get this to work again,
55

55

00:02:37,810  -->  00:02:38,980
and if I just run it again, we'll
56

56

00:02:38,980  -->  00:02:40,900
get the same result, it'll crash.
57

57

00:02:40,900  -->  00:02:42,520
We actually have to then uncomment
58

58

00:02:42,520  -->  00:02:45,270
it from the Location class to get
59

59

00:02:46,640  -->  00:02:49,590
our application to run again.
60

60

00:02:49,590  -->  00:02:53,010
And here's our application running again.
61

61

00:02:54,530  -->  00:02:55,410
But actually, what I should do
62

62

00:02:55,410  -->  00:02:56,670
is just show you something else.
63

63

00:02:56,670  -->  00:03:00,410
I'm gonna go back and just
comment that out again.
64

64

00:03:00,410  -->  00:03:01,580
Now, in the previous video, I talked about
65

65

00:03:01,580  -->  00:03:03,610
the fact that an InvalidCLassException
66

66

00:03:03,610  -->  00:03:07,770
would be thrown when the serial
version UIDs don't match.
67

67

00:03:07,770  -->  00:03:09,880
InvalidClassException is a subclass
68

68

00:03:09,880  -->  00:03:12,530
of IOException, and so the existing
69

69

00:03:12,530  -->  00:03:17,210
catch block also catches
the InvalidClassException.
70

70

00:03:17,210  -->  00:03:18,320
So let's actually go back and add
71

71

00:03:18,320  -->  00:03:22,070
the InvalidClassException to the static
72

72

00:03:22,070  -->  00:03:24,930
initializer code in the Locations class.
73

73

00:03:24,930  -->  00:03:27,480
We'll catch that, so we've
got IOException here,
74

74

00:03:27,480  -->  00:03:31,090
so let's actually catch that first.
75

75

00:03:31,090  -->  00:03:34,180
Catch InvalidClassException, and then
76

76

00:03:37,320  -->  00:03:41,320
we can just do a print
out InvalidClassException
77

77

00:03:45,070  -->  00:03:47,950
plus e.getMessage(),
and then I'll just put a
78

78

00:03:47,950  -->  00:03:49,140
space there, 'cause that didn't
79

79

00:03:49,140  -->  00:03:51,170
have one in the output before.
80

80

00:03:51,170  -->  00:03:54,000
So now if we run that, we actually
81

81

00:03:58,290  -->  00:04:00,530
see the InvalidClassException's showing
82

82

00:04:00,530  -->  00:04:05,480
up there because the serial
version UIDs no longer match.
83

83

00:04:05,480  -->  00:04:06,740
Right, and again we'll just go back
84

84

00:04:06,740  -->  00:04:08,550
to the Location class and we'll uncomment
85

85

00:04:08,550  -->  00:04:11,050
the serial version UID, run it
86

86

00:04:12,890  -->  00:04:15,890
again, we should find that it works.
87

87

00:04:17,390  -->  00:04:18,220
Okay.
88

88

00:04:21,180  -->  00:04:22,680
Now before we leave this topic,
89

89

00:04:22,680  -->  00:04:24,150
let's touch on what happens when
90

90

00:04:24,150  -->  00:04:28,850
two objects that we serialise
point to the same object.
91

91

00:04:28,850  -->  00:04:29,940
And as an example, let's say we want
92

92

00:04:29,940  -->  00:04:33,350
to serialise a class called Foo, which
93

93

00:04:33,350  -->  00:04:36,350
contains a field for a Bar object.
94

94

00:04:36,350  -->  00:04:37,980
Now if two Foo instances point
95

95

00:04:37,980  -->  00:04:40,290
to the exact same Bar instance,
96

96

00:04:40,290  -->  00:04:42,670
and we serializer the two Foo instances
97

97

00:04:42,670  -->  00:04:44,830
to a file, the question is, will
98

98

00:04:44,830  -->  00:04:48,420
the file contain two
Bar objects or just one?
99

99

00:04:48,420  -->  00:04:51,000
Well, the answer is that
it'll only contain one.
100

100

00:04:51,000  -->  00:04:53,600
Since both Foo instances
referred to the same
101

101

00:04:53,600  -->  00:04:57,320
Bar instance, only one Bar
instance is serialised.
102

102

00:04:57,320  -->  00:04:58,850
So in other words, a serialised file will
103

103

00:04:58,850  -->  00:05:02,700
only ever contain one
copy of the same instance.
104

104

00:05:02,700  -->  00:05:04,210
So that's pretty cool.
105

105

00:05:04,210  -->  00:05:05,280
But now imagine that we want to do the
106

106

00:05:05,280  -->  00:05:06,750
same thing, but for some reason,
107

107

00:05:06,750  -->  00:05:08,790
we want to create two files.
108

108

00:05:08,790  -->  00:05:10,400
So we write both Foo instances
109

109

00:05:10,400  -->  00:05:13,660
to file 1, and then both to file 2.
110

110

00:05:13,660  -->  00:05:17,250
So how many instances of Bar
will be written this time?
111

111

00:05:17,250  -->  00:05:19,360
Well, the answer in that case is two.
112

112

00:05:19,360  -->  00:05:20,990
Object instances will be unique
113

113

00:05:20,990  -->  00:05:23,580
within a file, but not across files.
114

114

00:05:23,580  -->  00:05:25,310
So in this case, when the two files
115

115

00:05:25,310  -->  00:05:27,070
are read back into an application,
116

116

00:05:27,070  -->  00:05:31,040
two distinct instances
of Bar would be created.
117

117

00:05:31,040  -->  00:05:32,280
Now this may not matter, but it
118

118

00:05:32,280  -->  00:05:35,020
could, which is why it's important
119

119

00:05:35,020  -->  00:05:37,940
to understand that that
can happen in this case.
120

120

00:05:37,940  -->  00:05:40,070
Of course, in the two file case,
121

121

00:05:40,070  -->  00:05:41,630
there could also be two instances
122

122

00:05:41,630  -->  00:05:44,840
of each Foo object read back in as well.
123

123

00:05:44,840  -->  00:05:45,820
All right, so to close the section
124

124

00:05:45,820  -->  00:05:48,300
on the Java.IO package, we're gonna
125

125

00:05:48,300  -->  00:05:52,790
take a look at the
Java.IO.RandomAccessFile class.
126

126

00:05:52,790  -->  00:05:54,480
Now so far, we've been reading
127

127

00:05:54,480  -->  00:05:56,330
and writing files sequentially.
128

128

00:05:56,330  -->  00:06:00,620
We start at byte 0 and
we read or write bytes,
129

129

00:06:00,620  -->  00:06:02,260
one after the other until we reach
130

130

00:06:02,260  -->  00:06:05,580
the end of the file, or until
we finish writing the data.
131

131

00:06:05,580  -->  00:06:07,760
So we don't jump around in
the file, in other words.
132

132

00:06:07,760  -->  00:06:10,030
For example, we don't read bytes 20 to 35
133

133

00:06:10,030  -->  00:06:12,330
in the file, and then read bytes 50
134

134

00:06:12,330  -->  00:06:15,170
to 100 and then bytes 10 to 15.
135

135

00:06:15,170  -->  00:06:16,310
And likewise, we don't write out bytes
136

136

00:06:16,310  -->  00:06:19,570
100 to 150 and then bytes 20 to 30.
137

137

00:06:19,570  -->  00:06:21,610
So far, we've only moved forward and we've
138

138

00:06:21,610  -->  00:06:24,430
done so without skipping any bytes.
139

139

00:06:24,430  -->  00:06:26,110
Now, let's actually say that we have
140

140

00:06:26,110  -->  00:06:28,620
thousands of locations in our file,
141

141

00:06:28,620  -->  00:06:29,880
so many that we don't want to store
142

142

00:06:29,880  -->  00:06:31,730
the locations in memory because
143

143

00:06:31,730  -->  00:06:33,800
they'd take up too much room.
144

144

00:06:33,800  -->  00:06:36,780
So instead, every time a
player moved to a new location,
145

145

00:06:36,780  -->  00:06:39,870
we'd read that location from the file.
146

146

00:06:39,870  -->  00:06:41,990
So to do that, we'd need
to jump to the place
147

147

00:06:41,990  -->  00:06:44,080
in the file where the information
148

148

00:06:44,080  -->  00:06:46,450
for that location is stored, rather
149

149

00:06:46,450  -->  00:06:48,370
than reading the file sequentially,
150

150

00:06:48,370  -->  00:06:51,070
we'd need to read it in a
random fashion in other words.
151

151

00:06:51,070  -->  00:06:54,500
So this is where the random
access file class comes in.
152

152

00:06:54,500  -->  00:06:56,500
Now honestly, it would
be far more efficient
153

153

00:06:56,500  -->  00:06:58,420
if in that scenario to use an embedded
154

154

00:06:58,420  -->  00:07:01,390
database like SQLite, especially
155

155

00:07:01,390  -->  00:07:03,380
when we've got two
datasets that are related
156

156

00:07:03,380  -->  00:07:05,650
to each other, as we do in this case
157

157

00:07:05,650  -->  00:07:07,590
with the locations and the exits.
158

158

00:07:07,590  -->  00:07:09,960
'Cause, of course, every
location has a set of exits.
159

159

00:07:09,960  -->  00:07:11,510
But let's just pretend that for
160

160

00:07:11,510  -->  00:07:14,490
whatever reason, we
have to use a flat file.
161

161

00:07:14,490  -->  00:07:17,000
Now when accessing a
file in a random fashion,
162

162

00:07:17,000  -->  00:07:20,610
it's important to understand
the concept of a file pointer.
163

163

00:07:20,610  -->  00:07:22,230
Now the file pointer is an offset
164

164

00:07:22,230  -->  00:07:26,930
in the file where the next
read or write will start from.
165

165

00:07:26,930  -->  00:07:28,330
Now for example, if the file pointer
166

166

00:07:28,330  -->  00:07:30,430
is set to 100, then the next time
167

167

00:07:30,430  -->  00:07:32,480
we call a read or write method,
168

168

00:07:32,480  -->  00:07:33,770
the read or write will start at
169

169

00:07:33,770  -->  00:07:36,770
byte position 100 in the file.
170

170

00:07:36,770  -->  00:07:38,090
Now if we were reading an int,
171

171

00:07:38,090  -->  00:07:40,810
the byte set positions 100 to 103 would
172

172

00:07:40,810  -->  00:07:43,450
be read, since an int is 4 bytes.
173

173

00:07:43,450  -->  00:07:45,730
The byte position is zero-based.
174

174

00:07:45,730  -->  00:07:48,770
So the first byte in the
file is at position 0.
175

175

00:07:48,770  -->  00:07:51,450
Whenever we read or write the file, the
176

176

00:07:51,450  -->  00:07:53,570
file pointer is advanced by the
177

177

00:07:53,570  -->  00:07:56,210
number of bytes we read or wrote.
178

178

00:07:56,210  -->  00:07:58,350
So for example, if the file pointer is
179

179

00:07:58,350  -->  00:08:01,140
equal to 100, and we read five bytes,
180

180

00:08:01,140  -->  00:08:03,550
then the file pointer will be equal to
181

181

00:08:03,550  -->  00:08:07,540
105 after the read/write has taken place.
182

182

00:08:07,540  -->  00:08:09,510
Now also we use the term offset
183

183

00:08:09,510  -->  00:08:12,460
when randomly accessing files.
184

184

00:08:12,460  -->  00:08:15,730
So an offset is a byte
location in the file.
185

185

00:08:15,730  -->  00:08:18,770
So for example, if the
value has an offset of 100,
186

186

00:08:18,770  -->  00:08:20,480
that would mean that the value is
187

187

00:08:20,480  -->  00:08:23,160
located at byte 100 in the file,
188

188

00:08:23,160  -->  00:08:25,070
so we would want the file pointer
189

189

00:08:25,070  -->  00:08:29,090
to be set to 100 when
we read/write the value.
190

190

00:08:29,090  -->  00:08:31,490
Now the value could, of course,
occupy more than one byte.
191

191

00:08:31,490  -->  00:08:34,320
But the offset is
whether the value's first
192

192

00:08:34,320  -->  00:08:36,960
byte is located -- the remaining bytes
193

193

00:08:36,960  -->  00:08:40,110
would follow that first byte sequentially.
194

194

00:08:40,110  -->  00:08:42,490
Now when using random access files,
195

195

00:08:42,490  -->  00:08:46,210
we refer to each set of
related data as a record.
196

196

00:08:46,210  -->  00:08:48,470
In our application, the location ID,
197

197

00:08:48,470  -->  00:08:53,130
description, and exits, make
up the record for a location.
198

198

00:08:53,130  -->  00:08:55,170
When the user moves to a location,
199

199

00:08:55,170  -->  00:08:58,070
how will we know which bytes
to be read from the file?
200

200

00:08:58,070  -->  00:09:01,270
Well, if all of the locations
occupy the same links,
201

201

00:09:01,270  -->  00:09:03,050
and we wrote them out in order,
202

202

00:09:03,050  -->  00:09:05,430
the location one followed by location two
203

203

00:09:05,430  -->  00:09:08,540
followed by location three,
etc., well that would be easy.
204

204

00:09:08,540  -->  00:09:11,020
We could figure out a location's offset
205

205

00:09:11,020  -->  00:09:15,500
from its location ID and
the fixed location length.
206

206

00:09:15,500  -->  00:09:17,300
For example, let's say every location
207

207

00:09:17,300  -->  00:09:20,230
occupied 30 bytes of our file.
208

208

00:09:20,230  -->  00:09:22,560
So the first location's offset would be
209

209

00:09:22,560  -->  00:09:26,700
zero, and its data would
occupy bytes 0 through 29,
210

210

00:09:26,700  -->  00:09:28,270
and the second location would begin
211

211

00:09:28,270  -->  00:09:31,440
at byte zero, and end at byte 59, etc.
212

212

00:09:32,410  -->  00:09:34,550
Then when a played moved to location end,
213

213

00:09:34,550  -->  00:09:36,750
we'd figure out which bytes to read
214

214

00:09:36,750  -->  00:09:38,690
using a formula, assuming
locations IDs were
215

215

00:09:38,690  -->  00:09:40,420
one based, so the formula would be
216

216

00:09:40,420  -->  00:09:42,840
something like -- let's
put this in a comment.
217

217

00:09:42,840  -->  00:09:46,920
Start byte equals, and
it'd be intake 1 times 30.
218

218

00:09:49,900  -->  00:09:53,600
Again, that assumes that
each location occupied 30
219

219

00:09:53,600  -->  00:09:57,060
bytes in the file and
end its location here.
220

220

00:09:57,060  -->  00:09:58,820
So that would be great if we knew that
221

221

00:09:58,820  -->  00:10:02,230
each location was of a fixed length.
222

222

00:10:02,230  -->  00:10:06,230
But unfortunately, our records
don't have the same length.
223

223

00:10:06,230  -->  00:10:08,670
The length for each location is different,
224

224

00:10:08,670  -->  00:10:10,370
and that's because their description
225

225

00:10:10,370  -->  00:10:11,870
length and the number of X's differ
226

226

00:10:11,870  -->  00:10:14,480
from location to location.
227

227

00:10:14,480  -->  00:10:17,770
So because of that, we have to
include an index in our file.
228

228

00:10:17,770  -->  00:10:20,470
So I'm just gonna delete that comment.
229

229

00:10:20,470  -->  00:10:23,030
And that index stores the offset and
230

230

00:10:23,030  -->  00:10:25,620
record length for each location.
231

231

00:10:25,620  -->  00:10:28,460
Now we also have to include
the location ID in the index.
232

232

00:10:28,460  -->  00:10:30,930
Now, given that, reading a location's
233

233

00:10:30,930  -->  00:10:33,010
going to be a two step process.
234

234

00:10:33,010  -->  00:10:34,930
Firstly, we're gonna get the index
235

235

00:10:34,930  -->  00:10:37,440
record for the location, and secondly,
236

236

00:10:37,440  -->  00:10:41,260
we're gonna use the index values
and read the location data.
237

237

00:10:41,260  -->  00:10:43,360
Now I'm gonna go through
a bit more theory in a bit
238

238

00:10:43,360  -->  00:10:45,030
what we're going to do here, and then
239

239

00:10:45,030  -->  00:10:47,170
we'll end this video and in the next one,
240

240

00:10:47,170  -->  00:10:48,600
we'll actually start the coding.
241

241

00:10:48,600  -->  00:10:50,200
So getting back to what we're trying to do
242

242

00:10:50,200  -->  00:10:51,900
here with this two step process.
243

243

00:10:51,900  -->  00:10:53,290
Firstly, we're going to get the index
244

244

00:10:53,290  -->  00:10:55,280
record for the location, and secondly,
245

245

00:10:55,280  -->  00:10:58,650
use the index values to
read the location data.
246

246

00:10:58,650  -->  00:11:01,450
So, every index record
has to be the same length.
247

247

00:11:01,450  -->  00:11:04,460
We wouldn't want to have an
index for the index, after all.
248

248

00:11:04,460  -->  00:11:06,390
Now, typically, an index contains a unique
249

249

00:11:06,390  -->  00:11:09,580
identifier for each data record, the
250

250

00:11:09,580  -->  00:11:11,480
offset of the record in the file,
251

251

00:11:11,480  -->  00:11:12,970
and the length of the record.
252

252

00:11:12,970  -->  00:11:15,260
Now in Java, that's 12 bytes.
253

253

00:11:15,260  -->  00:11:16,890
The index for our application's going
254

254

00:11:16,890  -->  00:11:19,180
to contain the location ID, the location's
255

255

00:11:19,180  -->  00:11:21,820
offset, and its record length,
256

256

00:11:21,820  -->  00:11:24,410
which matches the typical case.
257

257

00:11:24,410  -->  00:11:25,850
Now because of the description, the
258

258

00:11:25,850  -->  00:11:27,510
location record will always be longer
259

259

00:11:27,510  -->  00:11:29,280
than 12 bytes, so the index will
260

260

00:11:29,280  -->  00:11:32,600
be much smaller than the location's data.
261

261

00:11:32,600  -->  00:11:34,410
Now, we can access the index record
262

262

00:11:34,410  -->  00:11:36,610
we need by reading it from the file
263

263

00:11:36,610  -->  00:11:39,170
when the user moves to a new location,
264

264

00:11:39,170  -->  00:11:41,000
or we could load the entire index
265

265

00:11:41,000  -->  00:11:43,360
into memory when the application starts.
266

266

00:11:43,360  -->  00:11:47,250
Ideally, we'd want to load
the index into memory.
267

267

00:11:47,250  -->  00:11:48,910
And the obvious reason for that is that
268

268

00:11:48,910  -->  00:11:51,430
accessing memory is much
faster than accessing
269

269

00:11:51,430  -->  00:11:53,540
files on disc, so loading the index
270

270

00:11:53,540  -->  00:11:56,630
into memory will always
provide better performance.
271

271

00:11:56,630  -->  00:11:58,950
Now usually, the size of each index record
272

272

00:11:58,950  -->  00:12:01,220
will be smaller than the
size of the data records.
273

273

00:12:01,220  -->  00:12:03,490
But when that isn't the
case, then of course
274

274

00:12:03,490  -->  00:12:05,630
it wouldn't make sense to load the index
275

275

00:12:05,630  -->  00:12:07,750
into memory if we're using a random
276

276

00:12:07,750  -->  00:12:10,150
access file, because memory's tight.
277

277

00:12:10,150  -->  00:12:11,880
So if we're using a random access
278

278

00:12:11,880  -->  00:12:13,790
file for other reasons, then it'll
279

279

00:12:13,790  -->  00:12:16,050
really depend on the specific case.
280

280

00:12:16,050  -->  00:12:18,550
Another important point.
281

281

00:12:18,550  -->  00:12:20,110
I've been saying that the first data
282

282

00:12:20,110  -->  00:12:22,290
record starts at byte 0, but that
283

283

00:12:22,290  -->  00:12:23,810
actually won't be the case if you
284

284

00:12:23,810  -->  00:12:26,540
write the index before the data.
285

285

00:12:26,540  -->  00:12:27,700
We have to save the offset of the
286

286

00:12:27,700  -->  00:12:30,000
data section, which in our case
287

287

00:12:30,000  -->  00:12:32,340
is the locations, to the file.
288

288

00:12:32,340  -->  00:12:35,220
And that's typically saved
near the top of the file.
289

289

00:12:35,220  -->  00:12:36,310
Now sometimes, the number of data
290

290

00:12:36,310  -->  00:12:39,140
records could also be saved there.
291

291

00:12:39,140  -->  00:12:40,960
Now for our application, we're actually
292

292

00:12:40,960  -->  00:12:42,920
gonna load the index into memory.
293

293

00:12:42,920  -->  00:12:46,120
So our file format will
look like the following,
294

294

00:12:46,120  -->  00:12:49,130
and I'm just going to put
some comments in here as well.
295

295

00:12:49,130  -->  00:12:53,050
So first thing, gonna
have the first four bytes
296

296

00:12:53,930  -->  00:12:57,350
is gonna contain the number of locations.
297

297

00:13:01,000  -->  00:13:03,340
So that's bytes 0 through 3.
298

298

00:13:05,540  -->  00:13:07,070
And notice I put this in the right place,
299

299

00:13:07,070  -->  00:13:10,580
so I'm just comment at the
moment to in the main class.
300

300

00:13:10,580  -->  00:13:13,510
Let's go back to locations
and put it in there.
301

301

00:13:13,510  -->  00:13:15,770
And we'll just put it -- the comment just
302

302

00:13:15,770  -->  00:13:18,690
above the static initializer block.
303

303

00:13:20,190  -->  00:13:22,750
So firstly, the first fourt bytes are
304

304

00:13:22,750  -->  00:13:25,870
gonna contain the number
of locations in their game.
305

305

00:13:25,870  -->  00:13:29,830
Secondly, the next four
bytes, we are going to --
306

306

00:13:29,830  -->  00:13:33,990
it's gonna contain the staff
offset of the location section.
307

307

00:13:45,210  -->  00:13:47,290
That's bytes 4 through 7.
308

308

00:13:49,640  -->  00:13:50,880
Thirdly, the next section of the
309

309

00:13:50,880  -->  00:13:52,800
file's gonna contain the index.
310

310

00:13:52,800  -->  00:13:55,980
Now the index is 1,692 bytes long,
311

311

00:13:55,980  -->  00:13:59,820
so it'll start at byte
8 and end at byte 1699.
312

312

00:14:24,310  -->  00:14:26,920
Okay, and then lastly, the final
313

313

00:14:26,920  -->  00:14:28,400
section of the file is gonna contain
314

314

00:14:28,400  -->  00:14:32,570
the location records, the
actual data from the game.
315

315

00:14:41,220  -->  00:14:44,220
And that's gonna start at byte 1700.
316

316

00:14:48,680  -->  00:14:50,920
So when we want to move
to a specific offset,
317

317

00:14:50,920  -->  00:14:52,040
what we'll do is we'll use the random
318

318

00:14:52,040  -->  00:14:56,070
access file dot sink method
to move the file pointer.
319

319

00:14:56,070  -->  00:14:58,170
Now we won't always have to do this.
320

320

00:14:58,170  -->  00:15:00,060
When we do, we want to do a bunch
321

321

00:15:00,060  -->  00:15:02,120
of sequential read/writes, we'll
322

322

00:15:02,120  -->  00:15:03,890
start by positioning the file pointer
323

323

00:15:03,890  -->  00:15:08,490
to the offset of where the first
read/write will take place.
324

324

00:15:08,490  -->  00:15:10,730
Now if the next read/write
we wanna do will
325

325

00:15:10,730  -->  00:15:12,610
immediately follow the previous one,
326

326

00:15:12,610  -->  00:15:15,980
we can just use the
readInt, the readLong, the
327

327

00:15:15,980  -->  00:15:19,310
readUTF etc. and the
corresponding functions,
328

328

00:15:19,310  -->  00:15:22,230
writeInt, writeLong,
writeUTF etc. and we've
329

329

00:15:22,230  -->  00:15:24,170
seen those methods that everyone will
330

330

00:15:24,170  -->  00:15:26,140
be using those, that's where
we've used them before.
331

331

00:15:26,140  -->  00:15:28,270
The file pointer is always
advanced by the number
332

332

00:15:28,270  -->  00:15:30,580
of bytes read or written, so if the next
333

333

00:15:30,580  -->  00:15:32,770
piece of data we want to read/write
334

334

00:15:32,770  -->  00:15:34,590
immediately followed the last piece that
335

335

00:15:34,590  -->  00:15:36,750
we read or wrote, then the file pointer
336

336

00:15:36,750  -->  00:15:39,590
will be already positioned correctly.
337

337

00:15:39,590  -->  00:15:43,080
So in that case, we wouldn't
need to call seek() first.
338

338

00:15:43,080  -->  00:15:44,670
So we only really have
to call the seek() method
339

339

00:15:44,670  -->  00:15:48,180
when we wanna jump to a
different offset in the file.
340

340

00:15:48,180  -->  00:15:50,970
And we'll see examples of
this as we move forward.
341

341

00:15:50,970  -->  00:15:53,080
All right, so let's
finish the video here now.
342

342

00:15:53,080  -->  00:15:55,430
In the next video, we're
gonna start by changing
343

343

00:15:55,430  -->  00:15:59,300
our application to use
a random access file and
344

344

00:15:59,300  -->  00:16:01,450
to load these locations on demand.
345

345

00:16:01,450  -->  00:16:03,780
So I'll see you in the next video.
