1
1

00:00:04,970  -->  00:00:07,100
so we ended the previous video
2

2

00:00:07,100  -->  00:00:09,520
performing a simple select query and
3

3

00:00:09,520  -->  00:00:11,930
getting the results to the in the run
4

4

00:00:11,930  -->  00:00:14,270
window down the bottom but there's
5

5

00:00:14,270  -->  00:00:15,830
actually an easier way to perform
6

6

00:00:15,830  -->  00:00:18,500
queries and to get the results so
7

7

00:00:18,500  -->  00:00:20,110
instead of having to use the execute
8

8

00:00:20,110  -->  00:00:22,400
method we can use the execute query
9

9

00:00:22,400  -->  00:00:24,980
method which actually returns results set
10

10

00:00:24,980  -->  00:00:27,490
so lets just update the code to use
11

11

00:00:27,490  -->  00:00:30,470
that instead what we can do is here
12

12

00:00:30,470  -->  00:00:32,920
we've got results with these two lines
13

13

00:00:32,920  -->  00:00:35,770
here we can actually do is comment those
14

14

00:00:35,770  -->  00:00:37,910
out and the replacement line for that
15

15

00:00:37,910  -->  00:00:42,380
would be...
16

16

00:00:42,380  -->  00:00:52,730
...
17

17

00:00:52,730  -->  00:00:57,560
if we run that you can see we get the same
18

18

00:00:57,560  -->  00:01:00,410
results but the advantage here is were
19

19

00:01:00,410  -->  00:01:03,440
using less code now what we can also do
20

20

00:01:03,440  -->  00:01:05,840
is retrieve the values from a record
21

21

00:01:05,840  -->  00:01:08,260
using the column indices rather than the
22

22

00:01:08,260  -->  00:01:11,150
column names in fact using the column
23

23

00:01:11,150  -->  00:01:13,490
indices is faster and so it's the
24

24

00:01:13,490  -->  00:01:15,680
preferred way to do it now we won't
25

25

00:01:15,680  -->  00:01:17,570
change the code in this application but
26

26

00:01:17,570  -->  00:01:20,540
we'll use column indices in a future
27

27

00:01:20,540  -->  00:01:22,400
video in this section of the course we
28

28

00:01:22,400  -->  00:01:23,900
start working with the music database
29

29

00:01:23,900  -->  00:01:26,990
but what we do know now is how to do the
30

30

00:01:26,990  -->  00:01:29,570
basic crud operations create replace
31

31

00:01:29,570  -->  00:01:33,170
update delete using jdbc but frankly the
32

32

00:01:33,170  -->  00:01:35,650
code we written can be improved quite a
33

33

00:01:35,650  -->  00:01:38,060
bit now when we were working from the
34

34

00:01:38,060  -->  00:01:38,930
command line
35

35

00:01:38,930  -->  00:01:40,880
it was ok to hard-code everything in
36

36

00:01:40,880  -->  00:01:43,640
fact we had to each sql statement was
37

37

00:01:43,640  -->  00:01:46,100
executed in oscillation so we didn't
38

38

00:01:46,100  -->  00:01:47,990
have to worry about commenting out lines
39

39

00:01:47,990  -->  00:01:49,880
of code because only the sql
40

40

00:01:49,880  -->  00:01:51,590
statement we just type was executed
41

41

00:01:51,590  -->  00:01:54,290
working with the database from within an
42

42

00:01:54,290  -->  00:01:55,970
application though means that our
43

43

00:01:55,970  -->  00:01:59,110
statements aren't run in oscillation so we
44

44

00:01:59,110  -->  00:02:00,590
shouldn't have to type in the table of
45

45

00:02:00,590  -->  00:02:02,390
column  names every single time
46

46

00:02:02,390  -->  00:02:06,110
in fact it's bad practice to do so just
47

47

00:02:06,110  -->  00:02:07,430
imagine that with completed the
48

48

00:02:07,430  -->  00:02:09,020
application that works with the contacts
49

49

00:02:09,020  -->  00:02:12,010
table in the test javadb and our
50

50

00:02:12,010  -->  00:02:13,970
manager or client tells us that we've
51

51

00:02:13,970  -->  00:02:16,190
decided to rename the name column to
52

52

00:02:16,190  -->  00:02:17,410
first_name
53

53

00:02:17,410  -->  00:02:19,870
so since we hard-coded everything
54

54

00:02:19,870  -->  00:02:21,700
would have to find every instance of
55

55

00:02:21,700  -->  00:02:23,950
name and updated to first underscore
56

56

00:02:23,950  -->  00:02:26,440
name now that would be trivial in a tiny
57

57

00:02:26,440  -->  00:02:28,360
application but there's still the
58

58

00:02:28,360  -->  00:02:31,090
possibility for typos or accidentally
59

59

00:02:31,090  -->  00:02:32,860
updating the wrong column name in a
60

60

00:02:32,860  -->  00:02:35,980
statement now using hard-coded strings
61

61

00:02:35,980  -->  00:02:37,750
for our sql statements also makes our
62

62

00:02:37,750  -->  00:02:39,610
application vulnerable to what's called
63

63

00:02:39,610  -->  00:02:42,580
a sql injection attack now we'll come
64

64

00:02:42,580  -->  00:02:44,260
back to this security problem in a later
65

65

00:02:44,260  -->  00:02:46,930
video in this section of the course so
66

66

00:02:46,930  -->  00:02:48,910
what do we usually do when we're using a
67

67

00:02:48,910  -->  00:02:50,530
hard-coded string in more than one place
68

68

00:02:50,530  -->  00:02:53,290
in our application code well we create
69

69

00:02:53,290  -->  00:02:55,570
constants for the strings and use those
70

70

00:02:55,570  -->  00:02:57,790
constants in if you want to rename
71

71

00:02:57,790  -->  00:02:59,200
something then we only have to change
72

72

00:02:59,200  -->  00:03:02,200
the name in one place but we can also
73

73

00:03:02,200  -->  00:03:04,570
improve the code in another way when
74

74

00:03:04,570  -->  00:03:06,790
we're adding records to the database we
75

75

00:03:06,790  -->  00:03:10,300
repeated the same code several times now
76

76

00:03:10,300  -->  00:03:12,100
repetitive code should always provoke
77

77

00:03:12,100  -->  00:03:13,930
the thought that maybe we should
78

78

00:03:13,930  -->  00:03:16,750
write and use a method instead let's go
79

79

00:03:16,750  -->  00:03:18,700
ahead and update the code to use
80

80

00:03:18,700  -->  00:03:22,300
constants and a method for insertions now
81

81

00:03:22,300  -->  00:03:23,950
we could create a separate class for the
82

82

00:03:23,950  -->  00:03:26,170
string constants we define so that any
83

83

00:03:26,170  -->  00:03:27,640
class in the application will be able
84

84

00:03:27,640  -->  00:03:29,380
to access them just to keep things
85

85

00:03:29,380  -->  00:03:30,370
simple
86

86

00:03:30,370  -->  00:03:31,390
we're just going to go ahead and define
87

87

00:03:31,390  -->  00:03:34,150
them within the main class we're going
88

88

00:03:34,150  -->  00:03:35,590
to use a separate class when we work
89

89

00:03:35,590  -->  00:03:37,480
with the music database in a future
90

90

00:03:37,480  -->  00:03:38,890
video in this section of the course
91

91

00:03:38,890  -->  00:03:41,590
though so what we are going to do is add
92

92

00:03:41,590  -->  00:03:43,090
constants for the database name
93

93

00:03:43,090  -->  00:03:46,600
connection string tablename and column
94

94

00:03:46,600  -->  00:03:48,850
names and also update the code to use
95

95

00:03:48,850  -->  00:03:49,480
them
96

96

00:03:49,480  -->  00:03:51,550
we're also going to drop the table when
97

97

00:03:51,550  -->  00:03:53,650
the application runs and uncomment all
98

98

00:03:53,650  -->  00:03:56,440
the code so every time the application
99

99

00:03:56,440  -->  00:03:58,450
runs will recreate the table from
100

100

00:03:58,450  -->  00:04:00,520
scratch and then perform the insert
101

101

00:04:00,520  -->  00:04:03,280
update delete and select statements at
102

102

00:04:03,280  -->  00:04:05,140
the end of it all the goal is to see three
103

103

00:04:05,140  -->  00:04:07,720
rows printed to the console for Tim
104

104

00:04:07,720  -->  00:04:11,230
jane and fido note that we're using if
105

105

00:04:11,230  -->  00:04:13,090
exists when we drop the table or we will
106

106

00:04:13,090  -->  00:04:15,430
be using that to avoid an exception
107

107

00:04:15,430  -->  00:04:17,500
being thrown if the table doesn't exist
108

108

00:04:17,500  -->  00:04:19,060
I'll show you how to do that shortly
109

109

00:04:19,060  -->  00:04:20,830
let's go ahead and now and actually make
110

110

00:04:20,830  -->  00:04:24,760
all those changes
111

111

00:04:24,760  -->  00:04:27,820
going to start right at the top we're
112

112

00:04:27,820  -->  00:04:28,960
going to start now creating some
113

113

00:04:28,960  -->  00:04:31,510
constant so just below the class
114

114

00:04:31,510  -->  00:04:36,040
definition gonna start with....
115

115

00:04:36,040  -->  00:05:15,220
...
116

116

00:05:15,220  -->  00:05:20,680
ok so next we want to do create a
117

117

00:05:20,680  -->  00:05:23,320
constant for our table going to be...
118

118

00:05:23,320  -->  00:05:59,260
...
119

119

00:05:59,260  -->  00:06:01,600
...so let's now continue I'm going to
120

120

00:06:01,600  -->  00:06:04,270
just as I mentioned and remove some of
121

121

00:06:04,270  -->  00:06:07,180
these comments and remove those as we go
122

122

00:06:07,180  -->  00:06:10,510
through so firstly we're going to start
123

123

00:06:10,510  -->  00:06:12,100
now with the....
124

124

00:06:12,100  -->  00:06:14,050
....
125

125

00:06:14,050  -->  00:06:36,580
...
126

126

00:06:36,580  -->  00:06:37,770
....
127

127

00:06:37,770  -->  00:06:59,040
...
128

128

00:06:59,040  -->  00:07:01,800
alright so we drop the table if it exists
129

129

00:07:01,800  -->  00:07:03,420
next you want to go ahead and create the
130

130

00:07:03,420  -->  00:07:06,030
table so we can change this statement
131

131

00:07:06,030  -->  00:07:09,240
...
132

132

00:07:09,240  -->  00:07:10,890
....
133

133

00:07:10,890  -->  00:07:30,870
...
134

134

00:07:30,870  -->  00:07:33,150
alright so the lines we want to add here
135

135

00:07:33,150  -->  00:07:38,430
and we're going to add...
136

136

00:07:38,430  -->  00:08:21,360
...
137

137

00:08:21,360  -->  00:08:24,150
..
138

138

00:08:24,150  -->  00:08:27,210
...
139

139

00:08:27,210  -->  00:08:30,030
that's the code to create the table
140

140

00:08:30,030  -->  00:08:31,440
now doesn't
141

141

00:08:31,440  -->  00:08:32,280
exist
142

142

00:08:32,280  -->  00:08:34,680
next we want to write some code to
143

143

00:08:34,680  -->  00:08:36,960
insert an entry so it's going to be....
144

144

00:08:36,960  -->  00:08:39,780
....
145

145

00:08:39,780  -->  00:11:30,940
...
146

146

00:11:30,940  -->  00:11:35,060
....so that's our 4
147

147

00:11:35,060  -->  00:11:36,820
rows that we are going to be adding to the
148

148

00:11:36,820  -->  00:11:39,880
database shortly now what we want to do
149

149

00:11:39,880  -->  00:11:42,820
is do the update for Jane's phone number
150

150

00:11:42,820  -->  00:11:46,130
that we originally did when we were working in
151

151

00:11:46,130  -->  00:11:47,360
the previous video so...
152

152

00:11:47,360  -->  00:12:36,680
...
153

153

00:12:36,680  -->  00:12:39,860
....
154

154

00:12:39,860  -->  00:13:47,910
...
155

155

00:13:47,910  -->  00:13:51,260
....so at this point
156

156

00:13:51,260  -->  00:13:52,550
we should have removed all the
157

157

00:13:52,550  -->  00:13:54,120
hard-coding they shouldn't be no
158

158

00:13:54,120  -->  00:13:56,570
sql code that's got hard code
159

159

00:13:56,570  -->  00:13:58,550
database names connection string
160

160

00:13:58,550  -->  00:14:02,120
tablename or column names i think it
161

161

00:14:02,120  -->  00:14:07,760
looks pretty good so note I've written
162

162

00:14:07,760  -->  00:14:10,190
sort of spaced out some sql statements here
163

163

00:14:10,190  -->  00:14:12,540
over multiple lines the intention
164

164

00:14:12,540  -->  00:14:14,100
is to make it easy-to-read
165

165

00:14:14,100  -->  00:14:16,170
rather than sort of going from left to
166

166

00:14:16,170  -->  00:14:18,300
right across the page as you start building
167

167

00:14:18,300  -->  00:14:19,920
up long lines like these
168

168

00:14:19,920  -->  00:14:22,190
inserts for example it can become quite
169

169

00:14:22,190  -->  00:14:24,870
difficult to read so by spacing that out
170

170

00:14:24,870  -->  00:14:26,970
putting in multiple lines and trying
171

171

00:14:26,970  -->  00:14:29,990
to line up the columns does I feel make
172

172

00:14:29,990  -->  00:14:32,750
it a lot easier to read it does get
173

173

00:14:32,750  -->  00:14:34,550
worse when you're creating sql
174

174

00:14:34,550  -->  00:14:36,680
statements by appending constants and
175

175

00:14:36,680  -->  00:14:38,120
strings together so it's really easy to
176

176

00:14:38,120  -->  00:14:39,870
miss adding a blank between two words
177

177

00:14:39,870  -->  00:14:41,910
for example or miss a single quotation
178

178

00:14:41,910  -->  00:14:45,140
mark so this will help but also when we
179

179

00:14:45,140  -->  00:14:47,270
got to run this the exception message we
180

180

00:14:47,270  -->  00:14:49,620
get will usually gives a good idea of
181

181

00:14:49,620  -->  00:14:51,800
where in the statement to look for an error
182

182

00:14:51,800  -->  00:14:54,300
let's actually try running this now just
183

183

00:14:54,300  -->  00:14:59,790
to see whether it does work and here's
184

184

00:14:59,790  -->  00:15:01,920
an example of this that does sql error
185

185

00:15:01,920  -->  00:15:03,770
or missing database now what we've got
186

186

00:15:03,770  -->  00:15:06,020
is for a sql statement we've actually
187

187

00:15:06,020  -->  00:15:08,790
got a message there but we should
188

188

00:15:08,790  -->  00:15:09,990
probably do a stack trace
189

189

00:15:09,990  -->  00:15:11,610
as well so we can actually see the exact
190

190

00:15:11,610  -->  00:15:13,410
line where it crash to help sort of us figure
191

191

00:15:13,410  -->  00:15:14,670
out where the problem is
192

192

00:15:14,670  -->  00:15:16,410
so we can actually do a.....
193

193

00:15:16,410  -->  00:15:20,190
...if we do that now then
194

194

00:15:20,190  -->  00:15:24,750
run it again we actually got some more
195

195

00:15:24,750  -->  00:15:27,200
errors more information here now and
196

196

00:15:27,200  -->  00:15:28,500
we can come down here and eventually it
197

197

00:15:28,500  -->  00:15:30,720
tells us that the main dot java line 23
198

198

00:15:30,720  -->  00:15:32,880
is the problem and we've got as trace
199

199

00:15:32,880  -->  00:15:36,080
of the other code DB dot java so
200

200

00:15:36,080  -->  00:15:37,770
that code is all part of sql
201

201

00:15:37,770  -->  00:15:39,870
lites drivers but let's go back to
202

202

00:15:39,870  -->  00:15:43,050
line 23 by clicking this we can see the
203

203

00:15:43,050  -->  00:15:44,610
problems like to be here you can see
204

204

00:15:44,610  -->  00:15:45,890
what I've done there put a left
205

205

00:15:45,890  -->  00:15:47,520
parenthesis instead of the right
206

206

00:15:47,520  -->  00:15:50,190
parenthesis let's fix that up will try
207

207

00:15:50,190  -->  00:15:56,160
running it again this time we've got the
208

208

00:15:56,160  -->  00:15:57,510
required result we've actually gotten
209

209

00:15:57,510  -->  00:15:59,730
three records again which is good and if we go
210

210

00:15:59,730  -->  00:16:01,560
back in just do a refresh
211

211

00:16:01,560  -->  00:16:04,620
nothing's changed because of course we
212

212

00:16:04,620  -->  00:16:05,820
still ended up with the same three
213

213

00:16:05,820  -->  00:16:07,200
entries we did previously
214

214

00:16:07,200  -->  00:16:10,740
alright so at the moment will
215

215

00:16:10,740  -->  00:16:12,180
notice that looking at this code
216

216

00:16:12,180  -->  00:16:13,470
we've actually got some duplication of
217

217

00:16:13,470  -->  00:16:15,630
code here these statement . execute
218

218

00:16:15,630  -->  00:16:19,620
these 4 inserts are duplicated so
219

219

00:16:19,620  -->  00:16:21,180
what I'm going to do first is show you the
220

220

00:16:21,180  -->  00:16:23,190
obvious way to do it but it won't be the
221

221

00:16:23,190  -->  00:16:25,070
best way we're going to revisit running
222

222

00:16:25,070  -->  00:16:26,550
the same sql statement but with
223

223

00:16:26,550  -->  00:16:29,130
different values in a later video
224

224

00:16:29,130  -->  00:16:31,440
for the moment though add the
225

225

00:16:31,440  -->  00:16:33,200
method to main.java so
226

226

00:16:33,200  -->  00:16:35,220
down the bottom i'm going to add that
227

227

00:16:35,220  -->  00:16:40,950
will make it a bit of a space here and...
228

228

00:16:40,950  -->  00:16:42,890
...
229

229

00:16:42,890  -->  00:16:44,790
....
230

230

00:16:44,790  -->  00:18:06,140
...
231

231

00:18:06,140  -->  00:18:08,840
...that should be it
232

232

00:18:08,840  -->  00:18:12,290
so now were basically put in here the
233

233

00:18:12,290  -->  00:18:14,360
three values that are called or pass as
234

234

00:18:14,360  -->  00:18:16,160
parameters to this and we're using the
235

235

00:18:16,160  -->  00:18:18,620
statement object as pass to this method as
236

236

00:18:18,620  -->  00:18:21,170
well to update it and now what should we
237

237

00:18:21,170  -->  00:18:24,470
be able to do is change our insert here to
238

238

00:18:24,470  -->  00:18:26,630
abbreviate them and it's going to be
239

239

00:18:26,630  -->  00:18:28,820
much easier to just be...
240

240

00:18:28,820  -->  00:18:51,140
...
241

241

00:18:51,140  -->  00:18:53,810
alright so that's going to be the
242

242

00:18:53,810  -->  00:18:56,210
equivalent of that first line so let's
243

243

00:18:56,210  -->  00:18:57,290
go ahead and change the other ones and
244

244

00:18:57,290  -->  00:18:58,190
what I'm just going to do is probably
245

245

00:18:58,190  -->  00:19:01,130
going to be quicker for me just to paste
246

246

00:19:01,130  -->  00:19:06,500
it like that and put in....
247

247

00:19:06,500  -->  00:19:27,920
...
248

248

00:19:27,920  -->  00:19:31,100
....
249

249

00:19:31,100  -->  00:19:52,970
...
250

250

00:19:52,970  -->  00:19:54,380
lets actually try running this is to make
251

251

00:19:54,380  -->  00:19:55,580
sure it still works
252

252

00:19:55,580  -->  00:20:00,140
ok you can see we've got the same
253

253

00:20:00,140  -->  00:20:00,830
results
254

254

00:20:00,830  -->  00:20:03,110
as i mentioned this isn't the
255

255

00:20:03,110  -->  00:20:04,670
best way to do it but i'm going to cover
256

256

00:20:04,670  -->  00:20:07,580
a better way in an upcoming video but at
257

257

00:20:07,580  -->  00:20:08,780
least for now we don't have all that
258

258

00:20:08,780  -->  00:20:12,380
repetitive code and if we did have to
259

259

00:20:12,380  -->  00:20:14,690
make a change to say a column name we
260

260

00:20:14,690  -->  00:20:15,770
could just come up here and change the
261

261

00:20:15,770  -->  00:20:18,500
column once and that would then change
262

262

00:20:18,500  -->  00:20:19,850
and be reflected throughout the rest of
263

263

00:20:19,850  -->  00:20:21,410
the code without us having to change
264

264

00:20:21,410  -->  00:20:22,370
anything else
265

265

00:20:22,370  -->  00:20:23,840
alright so that's it for the
266

266

00:20:23,840  -->  00:20:26,900
introduction to jdbc next we're going to
267

267

00:20:26,900  -->  00:20:28,280
switch to working with the music
268

268

00:20:28,280  -->  00:20:30,170
database and start performing some more
269

269

00:20:30,170  -->  00:20:32,630
interesting queries and also start
270

270

00:20:32,630  -->  00:20:34,160
taking a look at more features offered
271

271

00:20:34,160  -->  00:20:37,010
by the jdbc API see you in the next
272

272

00:20:37,010  -->  00:20:42,370
video
