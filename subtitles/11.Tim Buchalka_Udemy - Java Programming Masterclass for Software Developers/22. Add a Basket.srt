1
1

00:00:05,200  -->  00:00:11,430
so in this video what we are going to do is continue
on with our setup and we're going to set
2

2

00:00:11,430  -->  00:00:14,710
up a shopping basket because of course
the real aim of this example which i
3

3

00:00:14,710  -->  00:00:19,370
mentioned a few videos ago is to provide
a shopping basket now I've used a map
4

4

00:00:19,370  -->  00:00:22,680
for the stock list as you saw in the
previous video and the reason I did that
5

5

00:00:22,680  -->  00:00:26,640
was because this section is about the
Java Collections Framework but the actual stock
6

6

00:00:26,640  -->  00:00:29,900
list could be stored in a number of
different ways and with the database
7

7

00:00:29,900  -->  00:00:34,270
probably been the most likely one you go for when customers come to buy the
8

8

00:00:34,270  -->  00:00:38,360
goods we need some way to store the
items they're buying and of course the
9

9

00:00:38,360  -->  00:00:42,720
quantity of each one so we store the
quantity in stock in a field of the stock
10

10

00:00:42,720  -->  00:00:49,390
item class that's fine because
it only one stock level for each item
11

11

00:00:49,390  -->  00:00:53,750
but when we come to the shopping basket
though the program will have to keep track of
12

12

00:00:53,750  -->  00:00:58,140
the quantities for each customer and their
could be thousands of customers so
13

13

00:00:58,140  -->  00:01:02,160
having a field for each one of the stock
item classes is obviously not an option a
14

14

00:01:02,160  -->  00:01:05,550
map is designed to store key value
pairs so it makes a good candidate for
15

15

00:01:05,550  -->  00:01:10,720
associating a quantity with a stock item and
by creating a new shopping basket
16

16

00:01:10,720  -->  00:01:15,270
for each customer the program can track
how many of each item that the customers
17

17

00:01:15,270  -->  00:01:19,710
are actually buying now the stock item is the
key in the map in this situation and the
18

18

00:01:19,710  -->  00:01:24,170
quantity purchased is stored as the
value for the relevant key now I could have
19

19

00:01:24,170  -->  00:01:28,630
just used the items name as the key but then
the baseket class will have to look up
20

20

00:01:28,630  -->  00:01:32,990
the items in the stock list to update
the stock count or get the price so by
21

21

00:01:32,990  -->  00:01:37,310
storing the actual items the basket
class can retrieve any information that it
22

22

00:01:37,310  -->  00:01:40,960
needs directly from the item which
obviously is pretty convenient so let's go ahead
23

23

00:01:40,960  -->  00:01:50,700
and create that baske class now so I'm going
to create a new class basket just call it basket
24

24

00:01:50,700  -->  00:02:00,240
need the name first.......
25

25

00:02:00,240  -->  00:02:09,450
......
26

26

00:02:09,450  -->  00:02:13,900
.....so we're setting up a
27

27

00:02:13,900  -->  00:02:16,010
constructor
28

28

00:02:16,010  -->  00:02:20,650
we are going to pass just the name or
use that as a parameter I should say
29

29

00:02:20,650  -->  00:02:30,000
and we are also going to initialize the map
so that we remove that error so....
30

30

00:02:30,000  -->  00:02:38,000
...so the next we need an
add to basket and that's going to accept
31

31

00:02:38,000  -->  00:02:42,200
the stock item or be past as parameters
as a stock item in the quantity and
32

32

00:02:42,200  -->  00:02:48,620
bit of checking to make sure that the
parameters are valid so.....
33

33

00:02:48,620  -->  00:02:55,510
....that is how many there actually ordering the
34

34

00:02:55,510  -->  00:03:04,040
customers ordering some basic validation....
35

35

00:03:04,040  -->  00:03:12,750
.....then we going to do check if we already have this
36

36

00:03:12,750  -->  00:03:17,680
item in the basket I might actually be
adding another one so.....
37

37

00:03:17,680  -->  00:03:28,010
......
38

38

00:03:28,010  -->  00:03:32,510
so we are actually checking to see whether that specific stock item is in
39

39

00:03:32,510  -->  00:03:37,660
the basket already remembering that the key
is the stock item that we are searching on
40

40

00:03:37,660  -->  00:03:44,430
and that's passed to this method by the
parameter and we are defaulting to 0 if in fact there
41

41

00:03:44,430  -->  00:03:47,810
wasn't any previous item so that we
don't sort of trying to tally up
42

42

00:03:47,810  -->  00:03:49,200
incorrectly ok then
43

43

00:03:49,200  -->  00:03:52,540
we also need to do.....
44

44

00:03:52,540  -->  00:03:57,840
.....
45

45

00:03:57,840  -->  00:04:03,870
....if their was a value remembering that it will default to 0 if their wasn't one otherwise it will be whatever
46

46

00:04:03,870  -->  00:04:08,790
quantities already sort of the shopping
basket for this customer.....
47

47

00:04:08,790  -->  00:04:15,010
so that we can keep adding items if we
choose to and we.....
48

48

00:04:15,010  -->  00:04:23,260
...hope that its pretty self explanatory
49

49

00:04:23,260  -->  00:04:32,440
and we now also want an item's method again as we
did for the stock list so......
50

50

00:04:32,440  -->  00:04:44,570
....and we returned that un-modifiable map again so....
51

51

00:04:44,570  -->  00:04:57,690
......now we're going
52

52

00:04:57,690  -->  00:05:03,010
to also write a toString method which is
pretty similar to what we did for
53

53

00:05:03,010  -->  00:05:14,300
stock list so we are going to override that
during......
54

54

00:05:14,300  -->  00:05:18,400
....
55

55

00:05:18,400  -->  00:05:36,340
......
56

56

00:05:36,340  -->  00:05:53,240
.....
57

57

00:05:53,240  -->  00:06:14,720
......
58

58

00:06:14,720  -->  00:06:31,940
.....
59

59

00:06:31,940  -->  00:06:41,000
......and
60

60

00:06:41,000  -->  00:06:45,940
that's our basic basket class so again
the items in the basket are stores as a map
61

61

00:06:45,940  -->  00:06:51,690
and the actual item is the key that we are using and the quantity purchased is the value in the
62

62

00:06:51,690  -->  00:06:55,530
map add to basket check the list
of items to see if an item is already
63

63

00:06:55,530  -->  00:06:59,800
present in the shopping basket when  a new one is being added a you saw me do
64

64

00:06:59,800  -->  00:07:07,300
that on line 21 and by using get or default 0 we either get the quantity already present or 0
65

65

00:07:07,300  -->  00:07:11,580
so this amount is added to the continuity
you could say if you do that and handle the
66

66

00:07:11,580  -->  00:07:15,680
scenario whether it's a new item or there is
already a quantity in there now when the
67

67

00:07:15,680  -->  00:07:19,740
item is put in the map obviously it replaces
any quantity that may already be present
68

68

00:07:19,740  -->  00:07:22,010
and that's of course reason we have
to
69

69

00:07:22,010  -->  00:07:26,170
potentially add whatever quantity was
already existing
70

70

00:07:26,170  -->  00:07:30,070
if there was any the items method is the same as the stock list class very
71

71

00:07:30,070  -->  00:07:32,630
similar its the same actually
72

72

00:07:32,630  -->  00:07:38,480
returning the un-modifiable map for our map for this
particular class the basket class and of
73

73

00:07:38,480  -->  00:07:43,250
course we overrode toString again ok so
let's now go to our main method
74

74

00:07:43,250  -->  00:07:48,220
and add some stock add some item to our stock and start selling them so go back main
75

75

00:07:48,220  -->  00:08:00,440
we haven't been here before for this set of videos and we are going to create a stock item so....
76

76

00:08:00,440  -->  00:08:17,420
......
77

77

00:08:17,420  -->  00:08:29,130
.....
78

78

00:08:29,130  -->  00:09:00,280
......
79

79

00:09:00,280  -->  00:09:03,540
.....
80

80

00:09:03,540  -->  00:09:24,750
......
81

81

00:09:24,750  -->  00:09:36,210
.....
82

82

00:09:36,210  -->  00:09:49,340
......
83

83

00:09:49,340  -->  00:10:16,820
.....
84

84

00:10:16,820  -->  00:10:19,820
......
85

85

00:10:19,820  -->  00:10:30,450
.....
86

86

00:10:30,450  -->  00:10:35,020
......
87

87

00:10:35,020  -->  00:10:45,340
....now we should be able to do......
88

88

00:10:45,340  -->  00:10:49,360
that should use our toString method that
we overrode to give us an
89

89

00:10:49,360  -->  00:10:53,730
overview of the actual stock list so all
the items we've got so lets
90

90

00:10:53,730  -->  00:10:59,930
go ahead and run that and see what happens
91

91

00:10:59,930  -->  00:11:07,980
ok we see door, bread, car, phone, towel, cake, etc and total stock value is 5157 we also got issues here
92

92

00:11:07,980  -->  00:11:12,060
with the values notice how the decimal points you get that sometimes with
93

93

00:11:12,060  -->  00:11:14,190
doubles we can fix that
94

94

00:11:14,190  -->  00:11:18,580
to fix up so that the output its a bit
nicer lets go ahead and do that just
95

95

00:11:18,580  -->  00:11:22,220
to be complete and and the simplest
way of doing is a go back to the
96

96

00:11:22,220  -->  00:11:29,720
stock item class or actually we are not using toString for that one we using the stock list so we are going stock list class
97

97

00:11:29,720  -->  00:11:34,040
so we got item value in here but we can do if we want to format so its a bit nicer we
98

98

00:11:34,040  -->  00:11:44,190
can put string .format do something like.....
99

99

00:11:44,190  -->  00:11:48,310
if you do that we should find that they will only showing any with two decimal
100

100

00:11:48,310  -->  00:11:54,380
points the .2f with the . means
just to use 2 decimal points two
101

101

00:11:54,380  -->  00:11:58,480
decimal places I should say and the
f is just sort of saying it's a real
102

102

00:11:58,480  -->  00:12:02,270
number a floating number that we're
going to be using so if we go back to main of mine and run
103

103

00:12:02,270  -->  00:12:06,810
this
104

104

00:12:06,810  -->  00:12:11,160
you can see we are now nicely formatted now
with just two decimal points so that's that
105

105

00:12:11,160  -->  00:12:15,010
done so obviously that's working and
we can see that its outputting and if you wantted to we
106

106

00:12:15,010  -->  00:12:18,660
can go back to the individual
prices here as well and format those but I
107

107

00:12:18,660  -->  00:12:22,830
haven't done that I just worked on formatting the final values but note
108

108

00:12:22,830  -->  00:12:27,610
looking at these here that the items
themselves are in pretty random order so
109

109

00:12:27,610  -->  00:12:31,880
even though we added them alphabetically
so you will notice here these were actually typed in
110

110

00:12:31,880  -->  00:12:36,070
alphabetical the actual items are still
stored at the moment in a pretty random
111

111

00:12:36,070  -->  00:12:39,940
order and the reason is because the stock
list classes is using a HashMap to store the
112

112

00:12:39,940  -->  00:12:44,580
items the orderings undefined for that
reason so to maintain alphabetical order
113

113

00:12:44,580  -->  00:12:49,730
that we added the items we are gonna change stock list to use the linked hash map instead easily test and
114

114

00:12:49,730  -->  00:12:55,010
this is how easy it is to change so go back
there now go back to stock list
115

115

00:12:55,010  -->  00:13:01,670
obviously up here we had it defined fin our
constructor as a Hash Map if I change that to
116

116

00:13:01,670  -->  00:13:13,280
link to hash map just accept the import and obviously there be an extra one here we could probably delete that import because we aren't using
117

117

00:13:13,280  -->  00:13:19,120
that anymore but that's the only change we made and if we go back down run our code we should find that
118

118

00:13:19,120  -->  00:13:22,040
everything is now showing in
alphabetical order
119

119

00:13:22,040  -->  00:13:25,310
pretty cool as you can see that's
working nicely and that's one of the big
120

120

00:13:25,310  -->  00:13:30,220
advantages of when your coding just to use generic set ups like using maps that I've
121

121

00:13:30,220  -->  00:13:35,230
used here because that's the interface we are able to specify the actual class we are
122

122

00:13:35,230  -->  00:13:38,720
using here in our constructor and as you saw there's really only one line
123

123

00:13:38,720  -->  00:13:43,080
of code that I needed to change and we have change the entire implementation pretty cool as
124

124

00:13:43,080  -->  00:13:47,900
you can see and just in case you're
wondering if I close this down
125

125

00:13:47,900  -->  00:13:51,560
you might be wondering do we need to change
something for our items method
126

126

00:13:51,560  -->  00:13:56,070
well there is no need to change the map return by that
method in fact there's no such thing as a
127

127

00:13:56,070  -->  00:14:00,860
un-modifiable link hash map so remember that the
un-modifiable collections objects and
128

128

00:14:00,860  -->  00:14:05,470
just a view into the underlying
collection so the map return by the items
129

129

00:14:05,470  -->  00:14:09,700
method will have the same ordering a
our main list and just out of interest
130

130

00:14:09,700  -->  00:14:12,730
you can actually check this
printing out the keys in main
131

131

00:14:12,730  -->  00:14:24,800
if you go back to do that if we have added this code......
132

132

00:14:24,800  -->  00:14:31,250
.....
133

133

00:14:31,250  -->  00:14:38,760
so if we run this you can see that the
items are stored the same way
134

134

00:14:38,760  -->  00:14:43,220
as our map was actually stored the way its been
configured then we can confirm that by
135

135

00:14:43,220  -->  00:14:55,770
going back to our stock list changing it
back to a hash map running that again
136

136

00:14:55,770  -->  00:14:56,990
you can see
137

137

00:14:56,990  -->  00:15:00,510
we got that unspecified order we are not
necessarily in a alphabetical order but the
138

138

00:15:00,510  -->  00:15:05,970
order specified returned by the modified map the un-modifiable map
139

139

00:15:05,970  -->  00:15:10,880
is identical to the map order that's been
returned by default so it's
140

140

00:15:10,880  -->  00:15:14,470
basically just a view into the
underlying collection and as a result
141

141

00:15:14,470  -->  00:15:18,760
you have the same ordering from the
un-modifiable map as you are from a
142

142

00:15:18,760  -->  00:15:28,260
standard map so go back and change this back
to a linked hash map again ok so I'm gonna stop
143

143

00:15:28,260  -->  00:15:29,640
the video here
144

144

00:15:29,640  -->  00:15:34,090
because time is ticking on the next video we are going to
continue we're going to try selling some
145

145

00:15:34,090  -->  00:15:39,190
items and just to check and make
sure that adding an existing items works with a
146

146

00:15:39,190  -->  00:15:43,420
different price point and just basically
confirm that these other methods that
147

147

00:15:43,420  -->  00:15:47,890
we have written are handing the stock in
quantities correctly so I'll see you in the next
148

148

00:15:47,890  -->  00:15:48,140
video
