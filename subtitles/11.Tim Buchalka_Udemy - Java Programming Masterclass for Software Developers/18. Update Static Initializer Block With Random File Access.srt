1
1

00:00:05,070  -->  00:00:06,670
Alright, so at the end of the last video,
2

2

00:00:06,670  -->  00:00:08,860
we typed in this code and
we didn't really go through
3

3

00:00:08,860  -->  00:00:12,490
what it's all about, so
let's look at doing that now.
4

4

00:00:12,490  -->  00:00:17,420
So we start off here, on
line 23 and we set the offset
5

5

00:00:17,420  -->  00:00:19,930
for the first location into
a variable we can see there,
6

6

00:00:19,930  -->  00:00:21,570
called startPointer.
7

7

00:00:21,570  -->  00:00:22,760
Now we need to use this value
8

8

00:00:22,760  -->  00:00:25,970
to calculate the location's record length
9

9

00:00:25,970  -->  00:00:28,180
after we've written it to the file.
10

10

00:00:28,180  -->  00:00:29,090
Alright, so once we've done that,
11

11

00:00:29,090  -->  00:00:32,260
we then use the seek method on line 24
12

12

00:00:33,260  -->  00:00:37,690
to move the file pointer to
the first location's offset.
13

13

00:00:37,690  -->  00:00:40,570
Now we only have to do this
for the first location,
14

14

00:00:40,570  -->  00:00:44,130
because after that, we write
all the data sequentially.
15

15

00:00:44,130  -->  00:00:46,380
Now for each location,
you can see down here,
16

16

00:00:46,380  -->  00:00:50,350
we're actually writing the
location ID on line 27,
17

17

00:00:50,350  -->  00:00:54,290
the description on line
28 and also then the exits
18

18

00:00:54,290  -->  00:00:58,210
for each location and you can
see the code for the exits,
19

19

00:00:58,210  -->  00:01:00,840
basically, on line 30, right down here to,
20

20

00:01:00,840  -->  00:01:03,010
finishing off, on line 37.
21

21

00:01:04,210  -->  00:01:05,040
Now that's the same manner
22

22

00:01:05,040  -->  00:01:07,660
that we've written them out in the past.
23

23

00:01:07,660  -->  00:01:11,090
Now one drawback to using
the RandomAccessFile is
24

24

00:01:11,090  -->  00:01:14,190
that we can't read, write objects.
25

25

00:01:14,190  -->  00:01:17,060
The RandomAccessFile class
doesn't contain read object
26

26

00:01:17,060  -->  00:01:19,540
and write object methods, unfortunately,
27

27

00:01:19,540  -->  00:01:22,950
so it's back to writing each
piece of data individually.
28

28

00:01:22,950  -->  00:01:26,380
Now also notice that we're
not using a buffered stream.
29

29

00:01:26,380  -->  00:01:29,590
It wouldn't make sense when
accessing a file randomly,
30

30

00:01:29,590  -->  00:01:31,920
because buffering is just like a cue.
31

31

00:01:31,920  -->  00:01:34,960
What goes in first is
read or written first,
32

32

00:01:34,960  -->  00:01:37,300
so, in other words, it's sequential.
33

33

00:01:37,300  -->  00:01:39,730
So, RandomAccessFile can't be chained
34

34

00:01:39,730  -->  00:01:41,790
with other types of IO classes.
35

35

00:01:41,790  -->  00:01:43,180
Also, unlike the stream
36

36

00:01:43,180  -->  00:01:46,330
and file classes we've previously used,
37

37

00:01:46,330  -->  00:01:49,790
it can be used for both
reading and writing.
38

38

00:01:49,790  -->  00:01:52,070
So when we actually write a location,
39

39

00:01:52,070  -->  00:01:55,070
we build an exit string that
looks like the following.
40

40

00:01:55,070  -->  00:01:56,930
This is the code here that you can see
41

41

00:01:56,930  -->  00:01:59,520
that we've used with the string builder.
42

42

00:01:59,520  -->  00:02:01,700
So it's basically what we're trying
43

43

00:02:01,700  -->  00:02:03,560
to do there is something along these lines
44

44

00:02:03,560  -->  00:02:04,480
that we're writing out.
45

45

00:02:04,480  -->  00:02:07,480
It's gonna be direction, locationId,
46

46

00:02:09,950  -->  00:02:11,790
direction, locationId.
47

47

00:02:13,850  -->  00:02:15,740
So as an example of what
we'd be writing out,
48

48

00:02:15,740  -->  00:02:18,580
it'd be something like N, one,
49

49

00:02:18,580  -->  00:02:22,270
U, two, for north and
the location ID of one
50

50

00:02:22,270  -->  00:02:25,500
and then up would be the location ID two.
51

51

00:02:25,500  -->  00:02:27,400
So that's actually what
this is trying to do,
52

52

00:02:27,400  -->  00:02:29,860
when we're actually writing that out.
53

53

00:02:29,860  -->  00:02:31,710
Now the string ends with a trailing comma,
54

54

00:02:31,710  -->  00:02:34,510
you might be wondering
about that on line 35,
55

55

00:02:34,510  -->  00:02:38,270
which we don't need and if
we wanted to be diligent,
56

56

00:02:38,270  -->  00:02:40,680
we'd not write it for the last location,
57

57

00:02:40,680  -->  00:02:42,380
but it doesn't actually harm anything
58

58

00:02:42,380  -->  00:02:44,560
and this space isn't a
problem for this file,
59

59

00:02:44,560  -->  00:02:46,680
so we're not gonna check
for the last exit case
60

60

00:02:46,680  -->  00:02:49,700
and try and remove that last comma.
61

61

00:02:49,700  -->  00:02:52,410
Alright, so, after we've written the data
62

62

00:02:52,410  -->  00:02:53,990
and, obviously, that is where
we're writing the exits,
63

63

00:02:53,990  -->  00:02:55,450
on line 38.
64

64

00:02:55,450  -->  00:02:57,780
So after we've done that, we've
come down here to this code,
65

65

00:02:57,780  -->  00:03:02,060
starting on line 40 and we
create the IndexRecord for it.
66

66

00:03:02,060  -->  00:03:04,460
Now the start part, for this location,
67

67

00:03:04,460  -->  00:03:08,740
is equal to the startPointer
value and the record length on
68

68

00:03:08,740  -->  00:03:10,330
and that's what we've got the value there,
69

69

00:03:10,330  -->  00:03:12,660
in the IndexRecord that
we're actually passing
70

70

00:03:12,660  -->  00:03:15,210
and the record length
is the current position
71

71

00:03:15,210  -->  00:03:16,730
of the file pointer,
which we're getting here
72

72

00:03:16,730  -->  00:03:19,010
with rao.getFilePointer,
73

73

00:03:19,010  -->  00:03:20,750
but then we're deducting the startPointer,
74

74

00:03:20,750  -->  00:03:22,710
so it's the current position
75

75

00:03:22,710  -->  00:03:25,160
of the file pointer minus the startPointer
76

76

00:03:25,160  -->  00:03:28,450
and we're then adding the
IndexRecord for the location,
77

77

00:03:28,450  -->  00:03:32,690
using the location ID
as the key, on line 41
78

78

00:03:32,690  -->  00:03:36,610
and then we update the
startPointer for the next location,
79

79

00:03:36,610  -->  00:03:37,440
line 43.
80

80

00:03:39,680  -->  00:03:42,280
Alright, so that's actually the code.
81

81

00:03:42,280  -->  00:03:45,830
So at this point, we've now
written the location to the file
82

82

00:03:45,830  -->  00:03:48,290
and we can now write our index,
'cause we've got the fullest
83

83

00:03:48,290  -->  00:03:50,350
of indexes available.
84

84

00:03:50,350  -->  00:03:53,180
So let's go ahead and do that now.
85

85

00:03:54,740  -->  00:03:56,140
And the code for that'll be down here,
86

86

00:03:56,140  -->  00:03:56,970
because we wanna make sure
87

87

00:03:56,970  -->  00:03:58,570
that we've written out all the locations,
88

88

00:03:58,570  -->  00:04:00,730
which we have there from the for each
89

89

00:04:00,730  -->  00:04:02,760
that we've got on line 26.
90

90

00:04:02,760  -->  00:04:03,840
So down here,
91

91

00:04:05,710  -->  00:04:08,630
what we wanna do is do an rao.seek.
92

92

00:04:09,620  -->  00:04:12,290
We're gonna seek the indexStart.
93

93

00:04:14,340  -->  00:04:17,840
Then we're gonna do for Integer locationID
94

94

00:04:21,410  -->  00:04:23,990
and it's gonna be index.keySet,
95

95

00:04:25,930  -->  00:04:27,010
rao.writeInt,
96

96

00:04:29,460  -->  00:04:30,290
locationID
97

97

00:04:32,010  -->  00:04:33,430
and rao.WriteInt.
98

98

00:04:34,470  -->  00:04:37,310
It's gonna be index.get locationID
99

99

00:04:38,690  -->  00:04:40,020
dot getStartByte
100

100

00:04:42,260  -->  00:04:46,110
and then, finally, rao.writeInt again,
101

101

00:04:46,110  -->  00:04:50,460
index.get and it's going
to be locationID again
102

102

00:04:50,460  -->  00:04:52,650
this time and the
pointer is dot getLength,
103

103

00:04:52,650  -->  00:04:56,260
or the result, rather, is getLength.
104

104

00:04:56,260  -->  00:04:57,540
Alright.
105

105

00:04:57,540  -->  00:04:58,660
So, hopefully, you look at that code
106

106

00:04:58,660  -->  00:05:00,740
and think it's fairly straightforward.
107

107

00:05:00,740  -->  00:05:03,070
So we're seeking to the offset
108

108

00:05:03,070  -->  00:05:06,110
that we've saved previously, on line 46.
109

109

00:05:06,110  -->  00:05:07,790
So that's where we're doing the seek
110

110

00:05:07,790  -->  00:05:10,140
and indexStart was
actually defined up here.
111

111

00:05:10,140  -->  00:05:13,240
So we set that to the offset previously,
112

112

00:05:13,240  -->  00:05:14,780
so we knew what that would be.
113

113

00:05:14,780  -->  00:05:17,060
So we're going back to
that location again.
114

114

00:05:17,060  -->  00:05:19,030
Then we're just looping
through all the index records,
115

115

00:05:19,030  -->  00:05:21,820
using the index.keySet
and actually writing them
116

116

00:05:21,820  -->  00:05:23,400
to the file.
117

117

00:05:23,400  -->  00:05:27,680
Right, so let's actually
run, now, the locations.main
118

118

00:05:27,680  -->  00:05:30,110
and actually just conform
that it actually works
119

119

00:05:30,110  -->  00:05:32,830
and we might check out the
file that it's created as well,
120

120

00:05:32,830  -->  00:05:35,580
just to see what that looks like.
121

121

00:05:36,840  -->  00:05:39,520
Alright, you can see we've got
something written out there.
122

122

00:05:39,520  -->  00:05:42,320
We've also got this locations_rand.dat,
123

123

00:05:42,320  -->  00:05:44,290
so double-click on that.
124

124

00:05:44,290  -->  00:05:46,720
So you can see at the
top of the file, here,
125

125

00:05:46,720  -->  00:05:49,830
this is a part where
we're saving lots of ints.
126

126

00:05:49,830  -->  00:05:51,890
You can see that it isn't really readable,
127

127

00:05:51,890  -->  00:05:53,680
but, if you look down here, you can see
128

128

00:05:53,680  -->  00:05:56,610
that we've got some strings
in the location section
129

129

00:05:56,610  -->  00:05:58,820
that do appear to make a bit more sense
130

130

00:05:58,820  -->  00:06:01,280
and you can see the actual exits there,
131

131

00:06:01,280  -->  00:06:04,540
east, 12, west, 14, comma, et cetera.
132

132

00:06:04,540  -->  00:06:06,340
So, it doesn't all make sense, but,
133

133

00:06:06,340  -->  00:06:08,360
again, it's not a human readable file,
134

134

00:06:08,360  -->  00:06:11,470
but you can hopefully see
the gist of what we've done
135

135

00:06:11,470  -->  00:06:13,580
with this random file now.
136

136

00:06:13,580  -->  00:06:15,780
Right, so let's close that down
137

137

00:06:15,780  -->  00:06:20,370
and what we wanna do now is
change the static initializer,
138

138

00:06:20,370  -->  00:06:23,260
so that it reads the index from the file.
139

139

00:06:23,260  -->  00:06:24,270
So we'll go back and have a look
140

140

00:06:24,270  -->  00:06:26,610
at our static initializer here.
141

141

00:06:26,610  -->  00:06:30,110
Now, remember that we won't
be loading the locations
142

142

00:06:30,110  -->  00:06:31,750
into memory anymore.
143

143

00:06:31,750  -->  00:06:33,900
We load locations on demand.
144

144

00:06:33,900  -->  00:06:34,780
Now what that means, is
145

145

00:06:34,780  -->  00:06:38,780
that our locations.main
method will no longer work,
146

146

00:06:38,780  -->  00:06:41,240
because it depends on all
the locations being loaded
147

147

00:06:41,240  -->  00:06:44,790
into memory, so if we wanted
to run the method again,
148

148

00:06:44,790  -->  00:06:47,210
we'd have to change the static initializer
149

149

00:06:47,210  -->  00:06:49,130
to load all the locations, but then
150

150

00:06:49,130  -->  00:06:51,200
that would defeat the purpose.
151

151

00:06:51,200  -->  00:06:53,320
So, because of that, what
I'm gonna recommend here is
152

152

00:06:53,320  -->  00:06:56,530
that, if you need to run
the locations.main again,
153

153

00:06:56,530  -->  00:06:58,960
you copy the static initializer that uses
154

154

00:06:58,960  -->  00:07:01,490
that buffered reader, or input stream,
155

155

00:07:01,490  -->  00:07:06,330
from the older project into
this project's locations class
156

156

00:07:06,330  -->  00:07:07,580
and this'll read the locations
157

157

00:07:07,580  -->  00:07:11,970
from locations_big.txt
into the locations map.
158

158

00:07:11,970  -->  00:07:12,810
Once you've done that,
159

159

00:07:12,810  -->  00:07:13,640
you then comment
160

160

00:07:13,640  -->  00:07:16,580
out the RandomAccessFile
static initializer,
161

161

00:07:16,580  -->  00:07:18,330
run the locations main method
162

162

00:07:18,330  -->  00:07:21,040
and then comment out the
old static initializer
163

163

00:07:21,040  -->  00:07:22,780
and, finally, un-comment the old one
164

164

00:07:22,780  -->  00:07:25,430
that uses the RandomAccessFile.
165

165

00:07:25,430  -->  00:07:27,440
Now, because you may have to do that,
166

166

00:07:27,440  -->  00:07:29,710
if something goes wrong
and you wanna write
167

167

00:07:29,710  -->  00:07:31,460
out the locations file again,
168

168

00:07:31,460  -->  00:07:33,110
we'll actually leave the class as is,
169

169

00:07:33,110  -->  00:07:36,820
in terms of extending map and
declaring a locations map.
170

170

00:07:36,820  -->  00:07:38,180
So, hopefully that makes sense.
171

171

00:07:38,180  -->  00:07:40,800
So, if you do need to access that again,
172

172

00:07:40,800  -->  00:07:43,170
go through the process
that I've just outlined
173

173

00:07:43,170  -->  00:07:45,560
and that will work,
but with a bit of luck,
174

174

00:07:45,560  -->  00:07:47,110
you won't need to do that anymore, anyway,
175

175

00:07:47,110  -->  00:07:48,970
now that we've got it working.
176

176

00:07:48,970  -->  00:07:52,820
Alright, so let's now write
the static initializer
177

177

00:07:52,820  -->  00:07:55,210
that uses the RandomAccessFile.
178

178

00:07:55,210  -->  00:07:58,150
First we have to declare a
field for the RandomAccessFile,
179

179

00:07:58,150  -->  00:08:00,320
so let's go up and do that
180

180

00:08:00,320  -->  00:08:03,810
and I'll declare it just
below the index, here,
181

181

00:08:03,810  -->  00:08:07,970
that we set up, so we're gonna
call this one private static,
182

182

00:08:10,250  -->  00:08:13,310
it's gonna be a
RandomAccessFile, call it ra.
183

183

00:08:13,310  -->  00:08:15,980
Okay, back to our static
initializer block.
184

184

00:08:15,980  -->  00:08:19,370
Alright, so let's go
through and type the code in
185

185

00:08:19,370  -->  00:08:20,600
and then we'll discuss it.
186

186

00:08:20,600  -->  00:08:21,950
Now what I'll do, is for now,
187

187

00:08:21,950  -->  00:08:26,580
is I'm just going to
comment out the old code,
188

188

00:08:26,580  -->  00:08:27,490
'cause probably make more sense
189

189

00:08:27,490  -->  00:08:29,710
to see me type it from scratch.
190

190

00:08:29,710  -->  00:08:31,100
Right, so we'll start with a try
191

191

00:08:31,100  -->  00:08:34,270
and then we wanna catch an IOException
192

192

00:08:37,590  -->  00:08:38,430
and we'll just print out a message,
193

193

00:08:38,430  -->  00:08:41,180
if we happen to get an exception.
194

194

00:08:49,620  -->  00:08:52,680
Okay and, in terms of the actual code,
195

195

00:08:52,680  -->  00:08:56,600
we'll start with ra equals
new RandomAccessFile
196

196

00:08:58,390  -->  00:09:00,920
and, of course, it's
gonna locations_rand.dat,
197

197

00:09:00,920  -->  00:09:03,240
the file we just created
198

198

00:09:03,240  -->  00:09:05,240
and rwd, for the access,
199

199

00:09:06,920  -->  00:09:08,260
int numLocations
200

200

00:09:09,810  -->  00:09:11,230
equals ra.readInt
201

201

00:09:13,290  -->  00:09:15,960
and then long locationStartPoint
202

202

00:09:17,640  -->  00:09:19,550
is equal to ra.readInt,
203

203

00:09:22,960  -->  00:09:27,290
then we're gonna do a
while rao.getFilePointer
204

204

00:09:27,290  -->  00:09:29,880
is less than locationStartPoint
205

205

00:09:31,930  -->  00:09:35,850
and then int locationId
is equal to ra.readInt,
206

206

00:09:38,920  -->  00:09:40,340
int locationStart
207

207

00:09:42,450  -->  00:09:44,280
is equal to ra.readInt
208

208

00:09:45,790  -->  00:09:47,630
and int locationLength
209

209

00:09:49,160  -->  00:09:50,990
is equal to ra.readInt
210

210

00:09:53,600  -->  00:09:55,050
and then create our index records,
211

211

00:09:55,050  -->  00:09:56,300
so IndexRecord,
212

212

00:09:57,940  -->  00:10:01,110
record is equal to new IndexRecord
213

213

00:10:01,110  -->  00:10:04,320
and the two arguments
will be locationStart
214

214

00:10:04,320  -->  00:10:05,820
and locationLength
215

215

00:10:07,350  -->  00:10:08,520
and index.put,
216

216

00:10:10,000  -->  00:10:11,750
locationId and record
217

217

00:10:13,400  -->  00:10:15,290
and that's our code.
218

218

00:10:15,290  -->  00:10:17,770
So we open the file, as you can see here,
219

219

00:10:17,770  -->  00:10:21,500
on line 66 and then we read
the number of locations
220

220

00:10:21,500  -->  00:10:24,250
into a variable on line 67 and, also,
221

221

00:10:24,250  -->  00:10:28,970
the offset of the location
section, on line 68.
222

222

00:10:28,970  -->  00:10:31,250
Then we load the index into memory.
223

223

00:10:31,250  -->  00:10:32,930
Now to read the index,
we're looping through,
224

224

00:10:32,930  -->  00:10:36,150
until the file pointer
reaches the location's offset,
225

225

00:10:36,150  -->  00:10:38,430
so we've doing the code, the while loop
226

226

00:10:38,430  -->  00:10:41,020
that we've typed in here
and we're reading the index
227

227

00:10:41,020  -->  00:10:43,230
and creating the records as we go
228

228

00:10:43,230  -->  00:10:44,430
and I think that's
pretty straight forward,
229

229

00:10:44,430  -->  00:10:48,640
as you can see there, we're
creating a new IndexRecord
230

230

00:10:48,640  -->  00:10:50,770
and then just saving that.
231

231

00:10:50,770  -->  00:10:52,530
So we're not actually using
the number of locations,
232

232

00:10:52,530  -->  00:10:56,000
but it's a good practise to
write the number of records
233

233

00:10:56,000  -->  00:10:59,310
in each file section at
the beginning of a file
234

234

00:10:59,310  -->  00:11:02,110
that will be accessed in a random fashion.
235

235

00:11:02,110  -->  00:11:03,370
So we might need this later on,
236

236

00:11:03,370  -->  00:11:05,320
if we were to modify the application,
237

237

00:11:05,320  -->  00:11:07,580
so, 'case you're wondering
why that wasn't used,
238

238

00:11:07,580  -->  00:11:09,250
that's the reason there, so that's really
239

239

00:11:09,250  -->  00:11:11,490
for future reference and,
again, it's good practise
240

240

00:11:11,490  -->  00:11:13,460
to do that, in my opinion.
241

241

00:11:13,460  -->  00:11:15,140
Alright, so at this point,
we're actually done,
242

242

00:11:15,140  -->  00:11:17,300
we've written the static
initializer block.
243

243

00:11:17,300  -->  00:11:18,860
Well actually, no we're not done.
244

244

00:11:18,860  -->  00:11:20,910
Our application won't work and remember,
245

245

00:11:20,910  -->  00:11:23,040
the way that it's currently written,
246

246

00:11:23,040  -->  00:11:26,220
it assumes that the locations
are all available in memory,
247

247

00:11:26,220  -->  00:11:28,050
but of course, that's
no longer true anymore.
248

248

00:11:28,050  -->  00:11:30,080
When a player moves to a location,
249

249

00:11:30,080  -->  00:11:33,950
we have to load that
location from the data file.
250

250

00:11:33,950  -->  00:11:37,800
So let's start working on
that in the next video.
