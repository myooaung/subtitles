1
1

00:00:05,640  -->  00:00:10,410
in this lecture we are going to cover a few
loose ends related to threads that
2

2

00:00:10,410  -->  00:00:13,380
didn't sort of quite fit into the
previous lectures
3

3

00:00:13,380  -->  00:00:17,570
firstly let's talk about what an atomic
action means or remind ourselves what
4

4

00:00:17,570  -->  00:00:18,320
that is
5

5

00:00:18,320  -->  00:00:23,220
as we've seen in the section when a
threads running it can be suspended when
6

6

00:00:23,220  -->  00:00:27,480
it's in the middle of doing something
for example if a thread calls the system.out
7

7

00:00:27,480  -->  00:00:31,890
.println method it can be
suspended in the middle of executing the
8

8

00:00:31,890  -->  00:00:36,080
method it may have evaluated the
argument that's been passed but it's
9

9

00:00:36,080  -->  00:00:39,080
suspended before it can print the result
10

10

00:00:40,540  -->  00:00:44,790
alternatively it might be part way
through evaluating the argument when
11

11

00:00:44,790  -->  00:00:49,150
it's suspended so essentially system.out.println isn't an atomic
12

12

00:00:49,150  -->  00:00:53,920
action so an atomic action can't be
suspended in the middle of being
13

13

00:00:53,920  -->  00:00:59,230
executed it either completes or it
doesn't happen at all once the thread
14

14

00:00:59,230  -->  00:01:03,760
start to run an atomic action we can be
confident that it won't be suspended
15

15

00:01:03,760  -->  00:01:10,390
until it is completed that action now
in Java we mentioned that the following
16

16

00:01:10,390  -->  00:01:15,730
operations are atomic number one reading
and writing reference variables for
17

17

00:01:15,730  -->  00:01:21,120
example the statement my object 1 equals
my object 2 would be atomic a thread
18

18

00:01:21,120  -->  00:01:25,030
can't be suspended in the middle of
executing this statement number two
19

19

00:01:25,030  -->  00:01:30,930
reading and writing primitive variables
except those of type long and double the
20

20

00:01:30,930  -->  00:01:35,620
jvm may required 2 operations to read and
write longs and doubles and a thread can
21

21

00:01:35,620  -->  00:01:40,750
be suspended between each operation for
example a thread can't be suspended in
22

22

00:01:40,750  -->  00:01:44,740
the middle of executing my int = 10
but it could be suspended in the middle
23

23

00:01:44,740  -->  00:01:49,780
of executing my double =1.234 and number three reading and
24

24

00:01:49,780  -->  00:01:52,780
writing all variables declared volatile
25

25

00:01:53,890  -->  00:02:00,370
so let's take a look at this third item
volatile variables you may think that
26

26

00:02:00,370  -->  00:02:03,820
since we don't have to worry about
thread interference with atomic actions
27

27

00:02:03,820  -->  00:02:08,790
that we don't need to synchronize them
but that isn't true because of the way
28

28

00:02:08,790  -->  00:02:14,200
that java managers memory it's possible
to get memory inconsistency errors when
29

29

00:02:14,200  -->  00:02:19,150
multiple threads can read and write the
same variable javas memory management
30

30

00:02:19,150  -->  00:02:23,530
model is outside the scope of this
lecture all we need to really know here
31

31

00:02:23,530  -->  00:02:29,770
though is that each thread has a cpu
cache which can contain copies of values
32

32

00:02:29,770  -->  00:02:32,070
that are in the main memory
33

33

00:02:32,070  -->  00:02:38,670
since it's faster to read from the cache
this can improve the performance of an
34

34

00:02:38,670  -->  00:02:43,620
application now this wouldn't be a
problem if there's only one cpu but
35

35

00:02:43,620  -->  00:02:47,960
these days most computers have more
than one cpu when running an application
36

36

00:02:47,960  -->  00:02:53,430
each thread may be running on a
different cpu and each CPU has its own
37

37

00:02:53,430  -->  00:02:58,440
cache therefore it's possible for the
values in the caches to become out of
38

38

00:02:58,440  -->  00:03:02,880
sync with each other and with the value
in main memory therefore getting a
39

39

00:03:02,880  -->  00:03:05,880
memory consistency error
40

40

00:03:07,480  -->  00:03:12,700
and as an example let's suppose we've got two threads that use the same
41

41

00:03:12,700  -->  00:03:18,370
int counter now thread one reads and
writes the counter thread 2 only
42

42

00:03:18,370  -->  00:03:19,840
reads the counter
43

43

00:03:19,840  -->  00:03:25,000
as we know reading and writing to an int isn't an atomic action a thread won't be
44

44

00:03:25,000  -->  00:03:29,350
suspended in the middle of reading or
writing the value to memory but let's
45

45

00:03:29,350  -->  00:03:34,450
suppose that thread one is running on CPU 1 and thread 2  is running on CPU 2
46

46

00:03:34,450  -->  00:03:39,880
because of cpu caching the following
can happen one the value from the
47

47

00:03:39,880  -->  00:03:45,370
counter is zero in main memory 2 thread
one reads the value of zero from main
48

48

00:03:45,370  -->  00:03:52,060
memory 3 thread one adds one to the
value 4 thread one writes the value of
49

49

00:03:52,060  -->  00:03:59,170
1 to its CPU cache 5 thread 2 reads the value
of counter from main memory and get zero
50

50

00:03:59,170  -->  00:04:02,170
rather than the latest value which is
one
51

51

00:04:03,460  -->  00:04:11,230
this is where volatile variables come in
when we use a nonvolatile variable the
52

52

00:04:11,230  -->  00:04:16,180
jvm doesn't guarantee when it writes an
updated value back to main memory but
53

53

00:04:16,180  -->  00:04:20,100
when we use a volatile variable the jvm
writes the value back to main memory
54

54

00:04:20,100  -->  00:04:26,110
immediately after thread updates the
value in its CPU cache and it also
55

55

00:04:26,110  -->  00:04:30,810
guarantees that every time a variable
reads from a volatile variable it will
56

56

00:04:30,810  -->  00:04:35,860
get the latest value so to make a
variable volatile we simply use the
57

57

00:04:35,860  -->  00:04:39,250
volatile keyword as you can see on
the image below
58

58

00:04:41,060  -->  00:04:46,430
you might be thinking that we don't
have to synchronize code that uses
59

59

00:04:46,430  -->  00:04:48,140
volatile variables
60

60

00:04:48,140  -->  00:04:53,090
unfortunately that's not entirely true
in our example only one thread is
61

61

00:04:53,090  -->  00:04:58,430
updating the variable in that case we
wouldn't need synchronization but if more
62

62

00:04:58,430  -->  00:05:02,520
than one thread can update the value of
a volatile variable we can still get a
63

63

00:05:02,520  -->  00:05:06,990
race condition so lets assume that we
have two threads that share a volatile
64

64

00:05:06,990  -->  00:05:11,520
int counter and each thread can run the
following code counter ++ as you
65

65

00:05:11,520  -->  00:05:13,520
can see in the image
66

66

00:05:13,520  -->  00:05:19,610
now this or that wasn't an atomic operation
so with thread would have to do the
67

67

00:05:19,610  -->  00:05:26,120
following 1 read the value of counter
for memory 2 add one to counter then
68

68

00:05:26,120  -->  00:05:29,750
3 write the new value of counter
back to memory
69

69

00:05:31,720  -->  00:05:37,240
now a thread can be suspended after any of
these steps as a result of that the
70

70

00:05:37,240  -->  00:05:39,250
following can actually happen
71

71

00:05:39,250  -->  00:05:45,190
1 the value of the counter is one in main
memory in thread 1 and thread 2 cpu
72

72

00:05:45,190  -->  00:05:52,600
caches 2 thread one reads the value of
counter and gets 1 3 thread 2 reads the value of
73

73

00:05:52,600  -->  00:05:58,660
counter and also get 1 4 thread one
increments the value and gets 2 and
74

74

00:05:58,660  -->  00:05:59,200
then it writes
75

75

00:05:59,200  -->  00:06:04,870
2 to its cache the jvm immediately writes
2 to main memory thread 2 increment
76

76

00:06:04,870  -->  00:06:10,150
the value and gets 2 it writes 2 to
its case the jvm immediately writes 2
77

77

00:06:10,150  -->  00:06:14,770
to main memory and 6 oops at this point because the counter has been
78

78

00:06:14,770  -->  00:06:18,010
incremented twice so its value should
now be three
79

79

00:06:19,440  -->  00:06:24,930
a memory consistency error like this can
occur when a thread can update the value
80

80

00:06:24,930  -->  00:06:30,000
of a variable in a way that depends on
the existing value of that variable in
81

81

00:06:30,000  -->  00:06:34,740
the counter + + case the result of the
increment depends on the existing value
82

82

00:06:34,740  -->  00:06:38,730
of the variable in other words the
thread has to read the value of the
83

83

00:06:38,730  -->  00:06:43,620
counter variable in order to generate a
new value for counter by the time the
84

84

00:06:43,620  -->  00:06:47,790
thread operates on the value its read
the value could be stale as it was in
85

85

00:06:47,790  -->  00:06:50,640
the example that I've just highlighted
86

86

00:06:50,640  -->  00:06:56,340
so whether to synchronize when using a
volatile variable will depend on the
87

87

00:06:56,340  -->  00:07:01,590
code and what the thread we'll
be doing now common use of volatile is
88

88

00:07:01,590  -->  00:07:05,700
with variables of type long and double
reading and writing longs and doubles isn't
89

89

00:07:05,700  -->  00:07:11,120
an atomic as I've mentioned using volatile
makes them atomic but i would still have
90

90

00:07:11,120  -->  00:07:15,450
to use synchronization in the situation
we just described when the thread reads
91

91

00:07:15,450  -->  00:07:20,280
the value of a variable and then uses
the value which maybe stale to generate
92

92

00:07:20,280  -->  00:07:23,130
a new value for the variable
93

93

00:07:23,130  -->  00:07:29,100
however when only one thread can change
the value of a shared variable or none
94

94

00:07:29,100  -->  00:07:32,760
of the threads update the value of
a shared variable in a way that depends on
95

95

00:07:32,760  -->  00:07:37,710
its existing value then using the
volatile keyword does mean that we don't
96

96

00:07:37,710  -->  00:07:41,760
need to synchronize the code we can be
confident that the value in main memory
97

97

00:07:41,760  -->  00:07:47,250
is always the latest value that's great
and we can see that there will be times
98

98

00:07:47,250  -->  00:07:51,270
when using the volatile keyword will
eliminate the need for synchronization
99

99

00:07:51,270  -->  00:07:55,710
but it would be nice if we could read
and write variables without having to
100

100

00:07:55,710  -->  00:07:59,340
worry about thread interference or
memory consistency errors
101

101

00:07:59,340  -->  00:08:03,750
now fortunately Java does provide classes
that allow us to do just that in
102

102

00:08:03,750  -->  00:08:06,300
specific cases
103

103

00:08:06,300  -->  00:08:12,560
in an earlier lecture we took a look at
a few of the classes in the java.util
104

104

00:08:12,560  -->  00:08:16,860
.concurrency package which was
introduced with java 1.5
105

105

00:08:16,860  -->  00:08:22,530
now there's another sub package
called java.util.concurrent.atomic
106

106

00:08:22,530  -->  00:08:27,180
that package provides us with classes
that we can use to ensure that reading
107

107

00:08:27,180  -->  00:08:31,710
and writing variables is atomic now it's
difficult to create an example that
108

108

00:08:31,710  -->  00:08:35,610
illustrates how the classes in the
package are useful like most thread
109

109

00:08:35,610  -->  00:08:39,230
concepts the benefits are seen when
there are multiple threads performing
110

110

00:08:39,230  -->  00:08:42,960
non trivial tasks so going to have a
look at some code but we're not actually
111

111

00:08:42,960  -->  00:08:45,740
going to run anything
112

112

00:08:45,740  -->  00:08:49,620
starting off lets suppose we've got
multiple threads using the following
113

113

00:08:49,620  -->  00:08:53,460
counter class so you can see that we've
got a private int there
114

114

00:08:53,460  -->  00:08:58,830
this class counter called counter and we've got a couple of methods as you can
115

115

00:08:58,830  -->  00:09:03,350
see there and I have also got a getter that
returns the value of the counter so the
116

116

00:09:03,350  -->  00:09:08,880
public method inc increments the counter
and the public method dec decrements
117

117

00:09:08,880  -->  00:09:11,880
the counter variable value
118

118

00:09:13,350  -->  00:09:17,130
we've learned enough now to know that
their would be the potential for thread
119

119

00:09:17,130  -->  00:09:22,950
interference because the increment and
decrements operations aren't atomic so
120

120

00:09:22,950  -->  00:09:26,610
once again an increment involves the
following steps number one read the
121

121

00:09:26,610  -->  00:09:31,470
value of counter number 2 add one to
that value number 3 write the new
122

122

00:09:31,470  -->  00:09:34,470
value back to counter
123

123

00:09:35,450  -->  00:09:40,250
a thread can be suspended between any of
those three steps and as a result the
124

124

00:09:40,250  -->  00:09:41,750
following could happen
125

125

00:09:41,750  -->  00:09:46,520
number one thread one reads the value of
counter and gets five number 2 thread
126

126

00:09:46,520  -->  00:09:51,850
one spends number 3 thread 2 read
the value of counter and gets five it
127

127

00:09:51,850  -->  00:09:56,870
adds one to the value and write six to
the counter and suspense 4 thread
128

128

00:09:56,870  -->  00:10:02,000
three reads the value of counter and get six
it adds one to the value and writes 7 to
129

129

00:10:02,000  -->  00:10:05,450
the counter and suspends thread one runs
again
130

130

00:10:05,450  -->  00:10:11,270
it adds one to the value of five and
then write six to counter and step 6
131

131

00:10:11,270  -->  00:10:14,270
well basically oops we're actually in a
bad position at that point in time
132

132

00:10:16,920  -->  00:10:21,390
of course we can't come up with more
runs sequences that would lead to the
133

133

00:10:21,390  -->  00:10:23,580
value of counter being compromised as well
134

134

00:10:23,580  -->  00:10:28,230
declaring the counter variable as
volatile as one potential solution but
135

135

00:10:28,230  -->  00:10:32,010
we've learned that memory consistency
errors can still be possible which would
136

136

00:10:32,010  -->  00:10:35,760
be true here for the increment and
or the inc and dec methods that
137

137

00:10:35,760  -->  00:10:40,320
increment and decrements the value now since
the thread changes the value of counter
138

138

00:10:40,320  -->  00:10:44,670
in a way that depends on the existing
value of counter the values within the
139

139

00:10:44,670  -->  00:10:48,540
thread cpu caches make it out of sync
with the value in main memory
140

140

00:10:51,400  -->  00:10:56,230
now instead of using a counter we are going
to update the code to use an atomic
141

141

00:10:56,230  -->  00:11:00,520
integer object when using one of the
atomic types we don't have to worry about
142

142

00:11:00,520  -->  00:11:05,650
thread interference now as the java
documentation states the classes in the
143

143

00:11:05,650  -->  00:11:11,080
java.util.concurrent.atomic
package support lock-free thread-safe
144

144

00:11:11,080  -->  00:11:16,270
programming on single variables and I've got a link to the documentation there and
145

145

00:11:16,270  -->  00:11:22,240
that will be in the resources section
for this video so we declare the
146

146

00:11:22,240  -->  00:11:28,420
counter as type atomic integer as you can
see in the example below we passed 0 as
147

147

00:11:28,420  -->  00:11:34,930
the initial value now in the inc method we
use increment and get this atomically
148

148

00:11:34,930  -->  00:11:39,640
increases the value by one now the
method decrementing get decreases the
149

149

00:11:39,640  -->  00:11:45,130
value of by 1 to get the value we call the
get method so the advantage of this is
150

150

00:11:45,130  -->  00:11:48,100
we don't have to synchronize the
increment or decrement operations in
151

151

00:11:48,100  -->  00:11:53,050
anyway that's obviously using that to
revise using that atomic
152

152

00:11:53,050  -->  00:11:59,590
package that i mentioned on the previous
slide we can't use atomic integer as a
153

153

00:11:59,590  -->  00:12:04,960
substitute for an integer object atomic
integers are meant to be used in specific
154

154

00:12:04,960  -->  00:12:09,340
situations like the one mentioned on the
previous slide where thread interference
155

155

00:12:09,340  -->  00:12:13,690
can take place because of threads
changing the value of the variable in a
156

156

00:12:13,690  -->  00:12:17,500
way that depends on the existing value
if you take a look at the documentation
157

157

00:12:17,500  -->  00:12:22,090
for the atomic integer class you'll see
that there are a limited
158

158

00:12:22,090  -->  00:12:25,720
number of methods and most allow us to
operate on the existing value of the
159

159

00:12:25,720  -->  00:12:30,550
atomic variable and as before there's a
link in the resources section of this video
160

160

00:12:30,550  -->  00:12:33,880
where you can actually go and check that
your leisure
161

161

00:12:33,880  -->  00:12:42,250
there are atomic classes for the
following types Boolean integer integer
162

162

00:12:42,250  -->  00:12:44,950
array long long array
163

163

00:12:44,950  -->  00:12:49,960
object reference and double now remember
that I said reading and writing long
164

164

00:12:49,960  -->  00:12:54,190
and double variables isn't atomic well we
could use the atomic long and atomic
165

165

00:12:54,190  -->  00:12:59,380
double classes to make those operations
atomic the atomic classes have a set
166

166

00:12:59,380  -->  00:13:03,410
and get methods that allow us to set of
value and to get the current
167

167

00:13:03,410  -->  00:13:07,490
value but the atomic classes are really
meant to be used in situations where
168

168

00:13:07,490  -->  00:13:11,150
value is being incremented or
decremented they're really intended to
169

169

00:13:11,150  -->  00:13:15,980
be used used when the code is using a
loop counter for generating a sequence
170

170

00:13:15,980  -->  00:13:18,980
of numbers for some other reason
171

171

00:13:21,710  -->  00:13:26,540
and lastly one other method will briefly
mention for the atomic classes is the
172

172

00:13:26,540  -->  00:13:32,540
compare and set method this method takes
two parameters the expected value and
173

173

00:13:32,540  -->  00:13:36,380
the new value that you want to set if
the current value doesn't equal the
174

174

00:13:36,380  -->  00:13:41,600
expected value the method returns false and
the set then doesn't take place but if
175

175

00:13:41,600  -->  00:13:46,100
the current value equals the expected
value than the set goes ahead and the
176

176

00:13:46,100  -->  00:13:49,880
method returns true and if you think
about it you can probably see how this
177

177

00:13:49,880  -->  00:13:53,900
would be really useful when a thread
knows that might be suspended between
178

178

00:13:53,900  -->  00:13:56,240
getting a value and updating it
179

179

00:13:56,240  -->  00:13:59,840
alright so that's the end of this video
and the next one will go back to writing
180

180

00:13:59,840  -->  00:14:02,720
some code on threads so we'll see you in
that video
