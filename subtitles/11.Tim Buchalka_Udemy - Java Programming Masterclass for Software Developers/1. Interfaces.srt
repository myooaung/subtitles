1
1

00:00:05,400  -->  00:00:08,180
In this video we're gonna start
talking about interfaces.
2

2

00:00:08,180  -->  00:00:13,110
So an interface, in Java terms, specifies
methods that a particular class that
3

3

00:00:13,110  -->  00:00:15,810
implements the interface must implement.
4

4

00:00:15,810  -->  00:00:19,970
Now the interface itself that
you're creating is abstract, and
5

5

00:00:19,970  -->  00:00:21,940
that means if there's no actual code for
6

6

00:00:21,940  -->  00:00:25,900
any of the methods, you only supply the
actual method names and the parameters.
7

7

00:00:25,900  -->  00:00:29,480
The actual code still goes in
the actual class that you're creating.
8

8

00:00:29,480  -->  00:00:33,370
But the idea is to use an interface
to provide a common behavior that
9

9

00:00:33,370  -->  00:00:36,830
can be used by several classes by having
them all implement the same interface.
10

10

00:00:36,830  -->  00:00:42,300
So it's really a way to standardize the
way a particular set of classes is used.
11

11

00:00:42,300  -->  00:00:45,890
So looking at an example, if we have a
look at a simple class that I've created,
12

12

00:00:45,890  -->  00:00:46,960
called GearBox,
13

13

00:00:46,960  -->  00:00:49,910
you can see that there's a private
boolean field there called clutchIsIn.
14

14

00:00:49,910  -->  00:00:53,980
And there's a simple public method there
called operateClutch, which is sent
15

15

00:00:53,980  -->  00:00:59,530
a parameter called in or out and if the
string value is set to the value in then
16

16

00:00:59,530  -->  00:01:03,780
clutch is in boolean field is actually
set to true otherwise it's set to false.
17

17

00:01:03,780  -->  00:01:07,210
So that's just one way of implementing
a particular method to decide whether
18

18

00:01:07,210  -->  00:01:09,530
the clutch is in, in a GearBox class, but
19

19

00:01:09,530  -->  00:01:11,200
that's probably not
the best way of doing it.
20

20

00:01:11,200  -->  00:01:12,530
It's a little bit untidy.
21

21

00:01:12,530  -->  00:01:14,990
So if we wanted to actually
do something different,
22

22

00:01:14,990  -->  00:01:18,420
we might decide that we wanted to
actually change this here to boolean.
23

23

00:01:18,420  -->  00:01:20,880
Like so, boolean in or out and
24

24

00:01:20,880  -->  00:01:26,130
then we can do something like this
clutches in equals in or out.
25

25

00:01:26,130  -->  00:01:28,860
And that's certainly valid code and
it does work, but
26

26

00:01:28,860  -->  00:01:31,530
the problem would be then
that the actual signature,
27

27

00:01:31,530  -->  00:01:35,450
in other words this component of
the public method, has been changed.
28

28

00:01:35,450  -->  00:01:39,730
And if you've got some other code
that is reliant on the fact that this
29

29

00:01:39,730  -->  00:01:43,040
first parameter was a string,
that's what it originally was, and
30

30

00:01:43,040  -->  00:01:44,790
we've tramped it to a boolean code.
31

31

00:01:44,790  -->  00:01:47,080
It means we've broken that
other code in the sense that,
32

32

00:01:47,080  -->  00:01:48,640
that then has to be changed.
33

33

00:01:48,640  -->  00:01:50,380
That code has to be changed as well.
34

34

00:01:50,380  -->  00:01:54,820
And if you're using a very
popular framework or
35

35

00:01:54,820  -->  00:01:56,920
your code is used in
a lot of other places,
36

36

00:01:56,920  -->  00:02:01,720
this could be a serious problem and it's
not something that becomes immediately
37

37

00:02:01,720  -->  00:02:05,910
aware if other programs are actually using
your GearBox classes, class in example.
38

38

00:02:05,910  -->  00:02:10,210
The problem actually is that although
we've created this GearBox class,
39

39

00:02:10,210  -->  00:02:14,250
we haven't really made a sort of
commitment that won't be changed.
40

40

00:02:14,250  -->  00:02:18,750
In other words we haven't said that once
we create this particular public method,
41

41

00:02:18,750  -->  00:02:20,290
we aren't going to change it.
42

42

00:02:20,290  -->  00:02:22,500
So what the interface is is just that.
43

43

00:02:22,500  -->  00:02:27,160
It's actually a commitment, a contract if
you will, that the method's signatures and
44

44

00:02:27,160  -->  00:02:30,510
that those variables in the interface
constants if you defined any
45

45

00:02:30,510  -->  00:02:31,590
will not change.
46

46

00:02:31,590  -->  00:02:34,000
So consequently,
you can create an interface and
47

47

00:02:34,000  -->  00:02:38,940
use it and you'll know that provided
you stick to what's in that interface,
48

48

00:02:38,940  -->  00:02:42,000
the code isn't going to change and you're
not gonna be breaking code anywhere.
49

49

00:02:42,000  -->  00:02:43,320
So let's actually go ahead and
50

50

00:02:43,320  -->  00:02:46,390
create an interface and
talk more about how it actually works.
51

51

00:02:46,390  -->  00:02:50,130
But we're now going to create an interface
to define the behavior of a telephone.
52

52

00:02:50,130  -->  00:02:52,440
So I'm gonna come up here to my
package is normal click on new.
53

53

00:02:54,500  -->  00:02:57,180
I'm actually going to select class, but
then I'm going to come down here and
54

54

00:02:57,180  -->  00:02:57,960
select interface.
55

55

00:02:57,960  -->  00:03:00,690
So I'm going to actually
type the interface name and
56

56

00:03:00,690  -->  00:03:04,840
by convention you normally type I
as the first letter, capital I for
57

57

00:03:04,840  -->  00:03:06,240
the fact that it's interface.
58

58

00:03:06,240  -->  00:03:13,090
So we're going to say I telephone, which
means it's an interface named telephone.
59

59

00:03:13,090  -->  00:03:17,270
And you notice there's a slight variation,
GearBox the class has got public
60

60

00:03:17,270  -->  00:03:21,490
class GearBox, but in interface uses
the word interface instead of class.
61

61

00:03:21,490  -->  00:03:24,750
Then what we actually do is we
want to define just the methods,
62

62

00:03:24,750  -->  00:03:28,690
in this case that we're going to be or
that are gonna be used in this interface
63

63

00:03:28,690  -->  00:03:32,970
that a class that implements this
interface needs to actually implement.
64

64

00:03:32,970  -->  00:03:34,370
So let's move ahead and actually do that.
65

65

00:03:34,370  -->  00:03:39,090
So I'm gonna type public void power on,
66

66

00:03:39,090  -->  00:03:42,080
that would be a function of
a telephone to power it on.
67

67

00:03:42,080  -->  00:03:45,880
Public Void Dial.
68

68

00:03:45,880  -->  00:03:49,350
We're going to dial, we're going to
set the parameter, phone number and
69

69

00:03:49,350  -->  00:03:51,670
notice how I'm not
actually creating classes.
70

70

00:03:51,670  -->  00:03:54,440
I'm creating what's called the signature.
71

71

00:03:54,440  -->  00:03:59,210
So this is the parameters, the name,
the return type and any parameters, but
72

72

00:03:59,210  -->  00:04:02,900
we're not actually defining
the actual actual code itself.
73

73

00:04:02,900  -->  00:04:06,770
That still goes into the class
that inherits this interface.
74

74

00:04:06,770  -->  00:04:12,080
So we're just defining the actual
methods that form this interface.
75

75

00:04:12,080  -->  00:04:13,120
So answer would be another one.
76

76

00:04:15,710  -->  00:04:16,950
We'll try another one.
77

77

00:04:16,950  -->  00:04:19,890
Public boolean call phone.
78

78

00:04:19,890  -->  00:04:23,110
Number two in the status to see
whether we're successful or not.
79

79

00:04:23,110  -->  00:04:25,980
Boolean phone number
would be the parameter.
80

80

00:04:27,050  -->  00:04:32,570
Let's do another one just to determine
whether the phone is ringing, IsRinging.
81

81

00:04:32,570  -->  00:04:34,710
So that's a simple interface.
82

82

00:04:34,710  -->  00:04:39,200
So again, all we've done here, we've said,
for a class that is going to implement
83

83

00:04:39,200  -->  00:04:43,760
them from this interface, these
are the methods that it has to implement.
84

84

00:04:43,760  -->  00:04:46,360
So you don't write code
in the interface as such.
85

85

00:04:46,360  -->  00:04:49,310
You still write that in the class,
which you're about to see, but
86

86

00:04:49,310  -->  00:04:51,320
we've just defined here the contract.
87

87

00:04:51,320  -->  00:04:55,330
In other words, the contract and the
actual parameters and return types that
88

88

00:04:55,330  -->  00:05:01,080
are valid for each method, that overall
will make this a valid class, effectively.
89

89

00:05:01,080  -->  00:05:04,010
And notice also that public
actually appears, and
90

90

00:05:04,010  -->  00:05:06,870
it actually says it's redundant for
interface methods.
91

91

00:05:06,870  -->  00:05:08,910
And that actually makes
sense if you think about it.
92

92

00:05:08,910  -->  00:05:12,550
And that's because we're actually
implementing the interface in a class, so
93

93

00:05:12,550  -->  00:05:15,940
the interface exists to define
the methods that must be implemented.
94

94

00:05:15,940  -->  00:05:20,040
So in other words, private or
public is really useless, in essence,
95

95

00:05:20,040  -->  00:05:22,190
because you're gonna be doing
that in the actual class.
96

96

00:05:22,190  -->  00:05:25,730
So you could actually, if you wanted to,
remove this altogether because we don't
97

97

00:05:25,730  -->  00:05:30,400
actually need, whoops, we don't
actually need that access modifier.
98

98

00:05:30,400  -->  00:05:33,050
So that's quite valid to do that as well.
99

99

00:05:33,050  -->  00:05:34,650
So now that we've actually done that,
100

100

00:05:34,650  -->  00:05:37,030
how would we go about
implementing this interface?
101

101

00:05:37,030  -->  00:05:39,860
In other words,
how do we go about to finding a class and
102

102

00:05:39,860  -->  00:05:43,210
saying our class is going
to be using this interface?
103

103

00:05:43,210  -->  00:05:45,330
Well to do that we're going
to create a new class first.
104

104

00:05:45,330  -->  00:05:47,990
I'm going to create a new
class called desk phone and
105

105

00:05:47,990  -->  00:05:50,500
this will be a regular class,
so just call it desk phone.
106

106

00:05:53,170  -->  00:05:55,910
And the way you actually get
it to use the interface is,
107

107

00:05:55,910  -->  00:05:57,860
you use the implements keyword.
108

108

00:05:57,860  -->  00:06:00,050
So you type implements, now type in R and
109

109

00:06:00,050  -->  00:06:03,050
it should automatically
find the interface.
110

110

00:06:03,050  -->  00:06:06,150
You can see the I telephone
interface is found for us.
111

111

00:06:06,150  -->  00:06:07,310
So we've done that now.
112

112

00:06:07,310  -->  00:06:10,470
As soon as we've actually typed that in,
we're getting a red error.
113

113

00:06:10,470  -->  00:06:14,880
And the error actually is class deskphone
must either be declared abstract or
114

114

00:06:14,880  -->  00:06:16,660
implement the abstract method powerOn, and
115

115

00:06:16,660  -->  00:06:18,700
it's actually the those
other methods as well.
116

116

00:06:18,700  -->  00:06:22,360
So what it's actually saying is we need to
start implementing some of these things
117

117

00:06:22,360  -->  00:06:24,000
in order for this to become a valid class.
118

118

00:06:24,000  -->  00:06:25,810
So there's a couple of ways forward,
119

119

00:06:25,810  -->  00:06:29,220
you can actually do this automatically
you can create the basic methods.
120

120

00:06:29,220  -->  00:06:33,580
You can create stubs for these methods,
which means you can create empty methods
121

121

00:06:33,580  -->  00:06:36,160
and implement these if you want or
you can type them manually.
122

122

00:06:36,160  -->  00:06:37,380
So I'm going to actually type a few.
123

123

00:06:40,520  -->  00:06:44,310
So I'm going to type MyNumber for starters
which will be the phone number and
124

124

00:06:44,310  -->  00:06:46,880
let's do another one
private boolean IsRinging.
125

125

00:06:49,670  -->  00:06:50,630
IsRinging.
126

126

00:06:52,350  -->  00:06:55,080
So to go ahead and actually create them,
you're going to actually go up and do,
127

127

00:06:56,320  -->  00:06:58,830
notice here implement methods we haven't
actually used that before but if we
128

128

00:06:58,830  -->  00:07:03,500
actually click on that, it automatically
went into the interface for our telephone,
129

129

00:07:03,500  -->  00:07:06,660
and its found all these methods that
says do you want to implement these.
130

130

00:07:06,660  -->  00:07:10,090
I'm gonna click on, yes I'm just gonna
leave the option to select forall of them,
131

131

00:07:10,090  -->  00:07:14,040
click on okay, and you notice it's now
overrode each one of those functions, and
132

132

00:07:14,040  -->  00:07:17,620
suddenly the class is now quite happy
because we've actually done them all.
133

133

00:07:17,620  -->  00:07:20,080
Just to confirm,
if we delete say the second one,
134

134

00:07:21,780  -->  00:07:25,160
we'll get an error again because not
all the methods have been implemented.
135

135

00:07:25,160  -->  00:07:27,700
So again, what we're trying to do
here is we're trying to say that
136

136

00:07:27,700  -->  00:07:30,500
in order to be a valid class,
we're saying that for
137

137

00:07:30,500  -->  00:07:34,160
a telephone class that is in our
application, these are the five methods
138

138

00:07:34,160  -->  00:07:37,270
that must be implemented with
the appropriate parameters.
139

139

00:07:37,270  -->  00:07:40,740
And where appropriate, with
the appropriate return types being void or
140

140

00:07:40,740  -->  00:07:41,930
an actual Type.
141

141

00:07:43,320  -->  00:07:46,300
And at that point we can think our way and
actually create some code if we wanted to.
142

142

00:07:46,300  -->  00:07:49,540
We could do something simple, for example
with a desktop phone there's probably no
143

143

00:07:49,540  -->  00:07:53,500
one button that's probably always on,
so we could type something in there.
144

144

00:07:53,500  -->  00:07:55,330
No action taken.
145

145

00:07:55,330  -->  00:07:59,910
Desk phone does not have a power button.
146

146

00:08:02,300  -->  00:08:07,720
For the dial now ringing.
147

147

00:08:14,500  -->  00:08:17,980
So recording the functionality for
this particular type of phone.
148

148

00:08:17,980  -->  00:08:21,490
For answer, we want to check first
to see whether it was ringing, so
149

149

00:08:21,490  -->  00:08:22,600
we put if is ringing.
150

150

00:08:28,320  -->  00:08:29,760
Answering the dis phone.
151

151

00:08:32,770  -->  00:08:35,090
And we will set his ringing to
false because we answered it.
152

152

00:08:35,090  -->  00:08:36,590
Pretty simple.
153

153

00:08:36,590  -->  00:08:43,640
And say a call phone if phone
number is equal to my number.
154

154

00:08:47,770  -->  00:08:51,770
IsRinging equals true.
155

155

00:08:57,620  -->  00:08:59,130
IsRinging equals false.
156

156

00:09:01,330  -->  00:09:02,820
And we'll return isRinging.
157

157

00:09:02,820  -->  00:09:07,230
Just a very simple concocted example here
just to show the concept of the interface.
158

158

00:09:07,230  -->  00:09:11,670
And lastly, isRinging, we're gonna
actually return the variable isRinging
159

159

00:09:11,670  -->  00:09:13,400
to see whether that's true or false.
160

160

00:09:13,400  -->  00:09:16,430
So although the interface
relies on all these methods
161

161

00:09:16,430  -->  00:09:17,500
even if you don't want to use it.
162

162

00:09:17,500  -->  00:09:20,840
So for example, with the desktop phone,
you might have decided
163

163

00:09:20,840  -->  00:09:25,000
that we're not going to have a power
button, you still need to implement it.
164

164

00:09:25,000  -->  00:09:28,940
The implementation can be simple,
in other words overriding that function
165

165

00:09:28,940  -->  00:09:31,480
that's actually just putting an error
message to say not supported or
166

166

00:09:31,480  -->  00:09:34,070
not needed for this type of
telephone if that makes sense.
167

167

00:09:34,070  -->  00:09:37,340
So you can't sort of decide if an
interface that you only want to implement
168

168

00:09:37,340  -->  00:09:38,650
some of the methods.
169

169

00:09:38,650  -->  00:09:42,560
In this case, if you're implementing
this interface you have to
170

170

00:09:42,560  -->  00:09:44,640
actually implement all
the methods that's part and
171

171

00:09:44,640  -->  00:09:48,030
parcel of the contract of ensuring
that that's actually implemented.
172

172

00:09:48,030  -->  00:09:51,360
So now let's go ahead and create
an instance of the desktop class, so
173

173

00:09:51,360  -->  00:09:55,070
we can do that by going into out main.
174

174

00:09:55,070  -->  00:10:00,780
So we can go ahead on type Itelephone,
and let's say Tim's phone.
175

175

00:10:02,740  -->  00:10:07,010
And we could put Tim's phone = new.
176

176

00:10:07,010  -->  00:10:10,500
Desk phone 123456, being the phone number.
177

177

00:10:10,500  -->  00:10:13,050
Now the point I want to make here,
now we actually got an arrow there.
178

178

00:10:14,380  -->  00:10:15,750
I didn't create a constructor.
179

179

00:10:15,750  -->  00:10:18,740
So I'll go ahead and actually create that
constructor because we'll actually use
180

180

00:10:18,740  -->  00:10:20,450
that so that should be handy to use.
181

181

00:10:20,450  -->  00:10:22,560
And the constructor will
actually just store the numbers.
182

182

00:10:22,560  -->  00:10:23,830
So we'll do constructor.
183

183

00:10:23,830  -->  00:10:25,860
We'll accept the actual number.
184

184

00:10:25,860  -->  00:10:28,830
Can actually store that in our variable,
in our field.
185

185

00:10:28,830  -->  00:10:30,690
And back to main again, so that's okay.
186

186

00:10:30,690  -->  00:10:32,200
And let's just call some of the functions.
187

187

00:10:32,200  -->  00:10:35,120
So Tim's phone, .poweron.
188

188

00:10:36,250  -->  00:10:40,300
Tim's phone dot call phone, let's just
call the phone number the same number.
189

189

00:10:42,260  -->  00:10:44,520
And Tim's phone.answer.
190

190

00:10:44,520  -->  00:10:47,020
Now the point I want to make here is,
191

191

00:10:47,020  -->  00:10:51,610
you can define the actual type to
be the type of the interface, but
192

192

00:10:51,610  -->  00:10:56,620
what you couldn't do we can't actually
do a equals new our telephone.
193

193

00:11:00,420  -->  00:11:04,820
That's not actually valid and Topic.
194

194

00:11:04,820  -->  00:11:09,200
Not actually valid to do that because
by doing that it knows automatically
195

195

00:11:09,200  -->  00:11:13,260
what I did was it added an override
order to create a class
196

196

00:11:13,260  -->  00:11:16,120
within the implementation which we don't
obviously want so I'm gonna undo that.
197

197

00:11:16,120  -->  00:11:17,470
And if you think about that for a minute,
198

198

00:11:17,470  -->  00:11:19,430
that actually makes sense
why you can't do that.
199

199

00:11:19,430  -->  00:11:25,010
[INAUDIBLE] And the reason that makes
sense is we have to find an interface,
200

200

00:11:25,010  -->  00:11:27,520
but the actual class
implementation in this case desk
201

201

00:11:27,520  -->  00:11:31,820
phone is the specific functionality for
a certain type of telephone.
202

202

00:11:31,820  -->  00:11:35,490
So the interface is there at
an abstract level to tell you
203

203

00:11:35,490  -->  00:11:39,770
what methods are valid and have to be
actually overridden in an actual class.
204

204

00:11:39,770  -->  00:11:42,680
So that's why you can't actually
instantiate it using the I
205

205

00:11:42,680  -->  00:11:43,590
telephone interface,
206

206

00:11:43,590  -->  00:11:47,730
you have to actually use the actual class
that has overridden that functionality.
207

207

00:11:47,730  -->  00:11:49,700
So we could have actually also done this.
208

208

00:11:49,700  -->  00:11:53,140
We could have changed this to desk phone.
209

209

00:11:53,140  -->  00:11:54,890
That's certainly valid as well and
that will work.
210

210

00:11:54,890  -->  00:11:58,100
And I'll actually show you later on why
you might actually need to do that in
211

211

00:11:58,100  -->  00:11:59,800
certain circumstances.
212

212

00:11:59,800  -->  00:12:03,260
But it is also valid to
do it as I've done there,
213

213

00:12:03,260  -->  00:12:08,480
to actually use the data type of type I
telephoned this example in a definition,
214

214

00:12:08,480  -->  00:12:11,240
provided you use
the appropriate class that has
215

215

00:12:11,240  -->  00:12:15,880
implemented the interface in a class,
in a case rather, it was desk phone.
216

216

00:12:15,880  -->  00:12:17,230
All right, so
I'm going to end the video there.
217

217

00:12:17,230  -->  00:12:20,370
In the next video we're going to
actually continue on where we're at.
218

218

00:12:20,370  -->  00:12:22,320
We're going to actually
Implement a mobile phone class.
219

219

00:12:22,320  -->  00:12:24,770
And then we are actually gonna go back
to some of the code that we've done
220

220

00:12:24,770  -->  00:12:28,270
previously in the course,
specifically with the link list and
221

221

00:12:28,270  -->  00:12:31,860
talk about an alternative way of
doing that using the interface.
222

222

00:12:31,860  -->  00:12:33,340
So I'll see you in the next video.
