WEBVTT
1
1

00:00:05.470  -->  00:00:07.900
- [Tim] So far you've
learned how to create,
2

2

00:00:07.900  -->  00:00:12.110
read and write files and
data sources using Java.nio.
3

3

00:00:12.110  -->  00:00:14.070
Now sometimes you don't
want to read from a file,
4

4

00:00:14.070  -->  00:00:17.580
or write to a file, you
might want to copy files,
5

5

00:00:17.580  -->  00:00:20.830
delete files, move them,
so on and so forth.
6

6

00:00:20.830  -->  00:00:23.310
In other words, you wanna
work with the file system.
7

7

00:00:23.310  -->  00:00:26.240
In this case, Java.nio has you covered,
8

8

00:00:26.240  -->  00:00:28.450
in fact there's a whole package dedicated
9

9

00:00:28.450  -->  00:00:32.620
to working with the file
system, called java.nio.file.
10

10

00:00:34.370  -->  00:00:36.080
So what we're gonna do is start by taking
11

11

00:00:36.080  -->  00:00:38.560
a look at the path interface, which is
12

12

00:00:38.560  -->  00:00:42.700
what you'll use to identify
a file on the file system.
13

13

00:00:42.700  -->  00:00:45.340
Now we've already used paths,
previously in this section of
14

14

00:00:45.340  -->  00:00:48.230
the course, if you recall we created them
15

15

00:00:48.230  -->  00:00:51.100
when we wanted to use Java.io classes
16

16

00:00:51.100  -->  00:00:54.080
to read and write files,
but we called a method,
17

17

00:00:54.080  -->  00:00:57.890
such as files.newBufferedWriter
so that the buffered writer
18

18

00:00:57.890  -->  00:01:01.280
would be backed by a
Java.nio buffer and channel.
19

19

00:01:01.280  -->  00:01:03.420
So what actually is a path?
20

20

00:01:03.420  -->  00:01:04.950
Well now that you're
familiar with the concept
21

21

00:01:04.950  -->  00:01:08.140
of a file path, because
you use them all the time.
22

22

00:01:08.140  -->  00:01:10.280
Now if you open the file
explorer on your system,
23

23

00:01:10.280  -->  00:01:12.080
you'll see a bunch of root folders,
24

24

00:01:12.080  -->  00:01:14.630
usually hard drives,
peripheral drives like DVD
25

25

00:01:14.630  -->  00:01:16.840
or Blu-ray drives, external drives,
26

26

00:01:16.840  -->  00:01:18.960
you know, thumb drives, et cetera.
27

27

00:01:18.960  -->  00:01:22.570
Each of these top-level drives
is a root node in a path.
28

28

00:01:22.570  -->  00:01:26.360
For example, in Windows,
the directory C:\ is
29

29

00:01:26.360  -->  00:01:28.860
the root node for the C drive.
30

30

00:01:30.810  -->  00:01:34.190
Now each folder, which is also
referred to as a directory,
31

31

00:01:34.190  -->  00:01:37.010
is also a node in a
path, and then of course,
32

32

00:01:37.010  -->  00:01:38.560
there's the file itself.
33

33

00:01:38.560  -->  00:01:40.360
Now if you've downloaded
a file and placed it in
34

34

00:01:40.360  -->  00:01:44.260
the C:\downloads directory,
again on Windows,
35

35

00:01:44.260  -->  00:01:46.380
then the file path has three nodes.
36

36

00:01:46.380  -->  00:01:49.730
One for C:\, one for
the downloads directory,
37

37

00:01:49.730  -->  00:01:51.960
and then one for the file itself.
38

38

00:01:51.960  -->  00:01:55.080
So this path is unique, you
can't have two files with
39

39

00:01:55.080  -->  00:01:57.750
the same name in the same directory,
40

40

00:01:57.750  -->  00:02:00.560
because each file is
identified by its path.
41

41

00:02:00.560  -->  00:02:02.220
For the downloads example, if you named
42

42

00:02:02.220  -->  00:02:05.460
the file you downloaded
data.txt, then the path
43

43

00:02:05.460  -->  00:02:09.630
would be C:\downloads\file.txt,
again, on Windows.
44

44

00:02:11.570  -->  00:02:13.640
So you wouldn't be able
to place a second file
45

45

00:02:13.640  -->  00:02:17.060
called file.txt into that same directory.
46

46

00:02:19.440  -->  00:02:22.280
So the character used to
separate the directory names
47

47

00:02:22.280  -->  00:02:24.850
in a path is called the delimiter,
48

48

00:02:24.850  -->  00:02:27.440
and it can differ between
operating systems.
49

49

00:02:27.440  -->  00:02:31.120
For example, in Windows the
delimiter is the backslash,
50

50

00:02:31.120  -->  00:02:35.200
but on Unix and Mac the
delimiter is the forward slash.
51

51

00:02:35.200  -->  00:02:38.050
So everything we discuss
about paths applies
52

52

00:02:38.050  -->  00:02:40.250
to files and directories.
53

53

00:02:40.250  -->  00:02:43.000
To keep things simple, we
won't always refer to both,
54

54

00:02:43.000  -->  00:02:46.650
but you can create a path
for a file or a directory.
55

55

00:02:46.650  -->  00:02:48.700
Now sometimes it won't
make sense to use a path
56

56

00:02:48.700  -->  00:02:52.300
to a directory for example,
when you wanna create a file,
57

57

00:02:52.300  -->  00:02:54.110
but other times it'll only make sense
58

58

00:02:54.110  -->  00:02:55.940
to use a path to a directory.
59

59

00:02:55.940  -->  00:02:58.080
It will depend on what you want to do.
60

60

00:02:58.080  -->  00:03:00.060
Now just keep in mind that paths can refer
61

61

00:03:00.060  -->  00:03:02.730
to either a file or a directory.
62

62

00:03:05.530  -->  00:03:09.020
Now file paths can be
absolute or relative.
63

63

00:03:09.020  -->  00:03:14.010
So the path C:\downloads\file.txt,
64

64

00:03:14.010  -->  00:03:15.960
well that's an absolute path
65

65

00:03:15.960  -->  00:03:18.190
because it starts at a root node,
66

66

00:03:18.190  -->  00:03:22.360
but the path photos\vacation\mountain.jpg,
67

67

00:03:23.310  -->  00:03:25.070
well that's a relative path
68

68

00:03:25.070  -->  00:03:28.050
because it doesn't specify
a root node at the start.
69

69

00:03:28.050  -->  00:03:29.790
In other words, it doesn't
contain enough information
70

70

00:03:29.790  -->  00:03:32.080
to identify the file, so in other words,
71

71

00:03:32.080  -->  00:03:34.020
it would have to be
combined with another path
72

72

00:03:34.020  -->  00:03:36.240
that does contain a root node.
73

73

00:03:36.240  -->  00:03:38.940
Now when using relative
paths in applications,
74

74

00:03:38.940  -->  00:03:40.990
there's usually the concept of a current,
75

75

00:03:40.990  -->  00:03:42.730
or working directory, that you
76

76

00:03:42.730  -->  00:03:44.740
can combine with a relative path.
77

77

00:03:44.740  -->  00:03:46.470
For example, when you
are running applications
78

78

00:03:46.470  -->  00:03:50.010
that used path, we didn't
specify the entire path,
79

79

00:03:50.010  -->  00:03:54.670
we did something like the
following, on the next slide.
80

80

00:03:54.670  -->  00:03:56.740
You can see there we
didn't actually specify
81

81

00:03:56.740  -->  00:03:59.700
the root node, so the string data.txt in
82

82

00:03:59.700  -->  00:04:02.230
that current example doesn't
give enough information
83

83

00:04:02.230  -->  00:04:04.490
about where the file is located,
84

84

00:04:04.490  -->  00:04:05.590
but you will notice that we're calling
85

85

00:04:05.590  -->  00:04:08.310
the FileSystems.getDefault method first,
86

86

00:04:08.310  -->  00:04:10.150
and then the getPath method.
87

87

00:04:10.150  -->  00:04:13.600
So what's happening here is
that the getDefault method call
88

88

00:04:13.600  -->  00:04:15.640
returns a file system object with
89

89

00:04:15.640  -->  00:04:19.810
a working directory set to
the current user directory.
90

90

00:04:21.190  -->  00:04:24.250
So when running an application
from within IntelliJ,
91

91

00:04:24.250  -->  00:04:28.220
the current user directory is
the IntelliJ project directory
92

92

00:04:28.220  -->  00:04:30.040
and so that's the working directory
93

93

00:04:30.040  -->  00:04:31.940
for the file system object.
94

94

00:04:31.940  -->  00:04:34.480
Now the working directory
is then combined with
95

95

00:04:34.480  -->  00:04:37.190
the path that you pass
to the getPath call,
96

96

00:04:37.190  -->  00:04:39.020
and that's why the files are created then
97

97

00:04:39.020  -->  00:04:41.940
in the IntelliJ projects directory.
98

98

00:04:44.790  -->  00:04:46.770
So instead of what we did
in the previous example,
99

99

00:04:46.770  -->  00:04:48.100
we could have done something similar
100

100

00:04:48.100  -->  00:04:50.030
to what you can see on
the screen there now,
101

101

00:04:50.030  -->  00:04:51.280
and we've got two backslashes there,
102

102

00:04:51.280  -->  00:04:52.430
because we're using a backslash,
103

103

00:04:52.430  -->  00:04:56.290
we have to escape that so
that Java actually knows
104

104

00:04:56.290  -->  00:04:57.860
we're referring to a backslash.
105

105

00:04:57.860  -->  00:04:59.880
But the point is here
though, we could have changed
106

106

00:04:59.880  -->  00:05:01.710
the scenario and used
Paths, and then called
107

107

00:05:01.710  -->  00:05:04.470
the .get method with
an absolute path call,
108

108

00:05:04.470  -->  00:05:07.820
instead of what we did there
in the previous example.
109

109

00:05:07.820  -->  00:05:10.510
But notice here that we're
using the Paths class,
110

110

00:05:10.510  -->  00:05:13.480
which has got an s at the end
when we call the get method.
111

111

00:05:13.480  -->  00:05:15.890
So there's only two
methods in the Paths class,
112

112

00:05:15.890  -->  00:05:18.610
and both of them return
a path based on a string.
113

113

00:05:18.610  -->  00:05:20.500
But anyway, enough talk,
let's now jump back in
114

114

00:05:20.500  -->  00:05:24.090
to IntelliJ, and we can play
around with paths a bit.
115

115

00:05:24.090  -->  00:05:25.150
All right, so what I'm gonna do first
116

116

00:05:25.150  -->  00:05:28.320
is create a new project, New, Project,
117

117

00:05:30.320  -->  00:05:33.660
and I'm gonna click on Java, Next,
118

118

00:05:33.660  -->  00:05:36.640
and we'll create the
template like we normally do,
119

119

00:05:36.640  -->  00:05:40.510
and I'm gonna call this
one, unsurprisingly, Paths,
120

120

00:05:40.510  -->  00:05:44.680
and I'll just save it in the
right place on my computer,
121

121

00:05:48.990  -->  00:05:50.360
and I'm just gonna replace
the current project
122

122

00:05:50.360  -->  00:05:51.860
with this new one.
123

123

00:05:56.660  -->  00:05:58.890
Okay, get a bit more screen real estate.
124

124

00:05:58.890  -->  00:06:01.950
All right, so what we're gonna
do is create three files.
125

125

00:06:01.950  -->  00:06:03.890
All right, so let's go ahead
and create the first one.
126

126

00:06:03.890  -->  00:06:06.650
So we're actually gonna do
this in the current path.
127

127

00:06:06.650  -->  00:06:09.000
At the moment you can see
the path here is set to
128

128

00:06:09.000  -->  00:06:11.970
the Paths folder on my Mac,
so just within that path,
129

129

00:06:11.970  -->  00:06:13.880
making a right-click on the Paths itself,
130

130

00:06:13.880  -->  00:06:16.830
click on New, and click on File.
131

131

00:06:16.830  -->  00:06:21.000
We're gonna call this first
one WorkingDirectory.txt,
132

132

00:06:23.900  -->  00:06:25.710
and I'm gonna copy some text in there
133

133

00:06:25.710  -->  00:06:28.040
that we're going to use, and this text
134

134

00:06:28.040  -->  00:06:31.390
is available in the resources
section in this video.
135

135

00:06:31.390  -->  00:06:34.090
That'll do for that, so
that's the first one.
136

136

00:06:34.090  -->  00:06:35.980
Next we wanna create a directory within
137

137

00:06:35.980  -->  00:06:37.980
the project directory called Files.
138

138

00:06:37.980  -->  00:06:39.800
So I'm gonna come back
here to the Paths again,
139

139

00:06:39.800  -->  00:06:43.470
right-click, click on New,
this time select Folder,
140

140

00:06:43.470  -->  00:06:47.880
and I'm gonna call the
new folder name files,
141

141

00:06:47.880  -->  00:06:50.420
and then I'm going to
right-click on the files folder,
142

142

00:06:50.420  -->  00:06:52.930
click on New, click on File,
143

143

00:06:52.930  -->  00:06:57.100
and we're gonna call this
new file, Subdirectory.txt,
144

144

00:06:58.730  -->  00:07:01.450
and you can see we've now got
a file within that folder,
145

145

00:07:01.450  -->  00:07:04.910
and I'm going to paste some text,
146

146

00:07:04.910  -->  00:07:07.250
again, in the resources
section, and by the way,
147

147

00:07:07.250  -->  00:07:09.870
folder and directory are
interchangeable terms.
148

148

00:07:09.870  -->  00:07:11.630
Depending on your operating
system you might be used
149

149

00:07:11.630  -->  00:07:14.250
to calling it directory, or a folder,
150

150

00:07:14.250  -->  00:07:15.270
essentially it's the same thing,
151

151

00:07:15.270  -->  00:07:17.100
which you're probably already aware of.
152

152

00:07:17.100  -->  00:07:18.360
All right, now in the third example
153

153

00:07:18.360  -->  00:07:21.580
what we're going to do is
we're gonna create a file,
154

154

00:07:21.580  -->  00:07:23.650
but this time we're gonna
create it in another folder
155

155

00:07:23.650  -->  00:07:27.930
that's outside of the entire
path for our current project,
156

156

00:07:27.930  -->  00:07:31.680
and to do that I'm going
to go to the folder,
157

157

00:07:32.740  -->  00:07:35.420
click on Reveal in
Finder again, and again,
158

158

00:07:35.420  -->  00:07:37.700
that would be something different
on your operating system,
159

159

00:07:37.700  -->  00:07:41.070
but essentially that's the
folder that's containing
160

160

00:07:41.070  -->  00:07:43.500
our files, and you can see
we've got WorkingDirectory,
161

161

00:07:43.500  -->  00:07:45.310
we've also got this files directory.
162

162

00:07:45.310  -->  00:07:48.870
So I'm gonna actually move up
one level into my folder there
163

163

00:07:48.870  -->  00:07:51.400
and I'm gonna put the file in
there, but the way to do that,
164

164

00:07:51.400  -->  00:07:53.530
I'm gonna take a copy of
this WorkingDirectory.
165

165

00:07:53.530  -->  00:07:56.250
You do something similar on your computer,
166

166

00:07:56.250  -->  00:07:59.230
and I will go up a level
and I'm gonna copy that.
167

167

00:07:59.230  -->  00:08:01.760
So I've now got this WorkingDirectory.txt,
168

168

00:08:01.760  -->  00:08:02.990
but I'm gonna call it something else.
169

169

00:08:02.990  -->  00:08:07.160
I'm gonna click on that, and
I'm gonna call it OutThere.txt.
170

170

00:08:08.320  -->  00:08:11.330
So it's actually not in the
path at all for IntelliJ,
171

171

00:08:11.330  -->  00:08:12.330
and I've just double-clicked that,
172

172

00:08:12.330  -->  00:08:15.160
you'll open that in whatever
editor you've actually got,
173

173

00:08:15.160  -->  00:08:18.030
and I'm going to copy some text, again,
174

174

00:08:18.030  -->  00:08:20.070
that's available in the resources section,
175

175

00:08:20.070  -->  00:08:23.000
paste that in there,
and then I'll save it.
176

176

00:08:23.000  -->  00:08:24.850
So again, you'll just save
it in whatever text editor
177

177

00:08:24.850  -->  00:08:26.900
if you're not using a Mac.
178

178

00:08:26.900  -->  00:08:28.580
So at this point now we've
got three files, we've got
179

179

00:08:28.580  -->  00:08:32.630
this OutThere.txt that's
outside of the project path.
180

180

00:08:32.630  -->  00:08:34.860
You can see in this case,
it's one folder above
181

181

00:08:34.860  -->  00:08:36.630
the Paths folder, and we'll go into
182

182

00:08:36.630  -->  00:08:39.180
the Paths folder for our IntelliJ project.
183

183

00:08:39.180  -->  00:08:43.060
We've got WorkingDirectory,
then the files subdirectory,
184

184

00:08:43.060  -->  00:08:46.050
and then the file Subdirectory.txt.
185

185

00:08:46.050  -->  00:08:47.780
All right, so back to IntelliJ,
186

186

00:08:47.780  -->  00:08:51.040
and obviously we can't
see the OutThere.txt
187

187

00:08:51.040  -->  00:08:53.570
because it's outside of the project path.
188

188

00:08:53.570  -->  00:08:55.110
So how do we access these?
189

189

00:08:55.110  -->  00:08:58.000
Well let's close down these files first,
190

190

00:08:58.000  -->  00:09:01.310
and let's actually
start writing some code.
191

191

00:09:01.310  -->  00:09:03.670
So I've gotta build some paths
now to access these files,
192

192

00:09:03.670  -->  00:09:05.620
we'll start with a try with resources,
193

193

00:09:05.620  -->  00:09:08.620
so it's gonna be try BufferedReader,
194

194

00:09:09.870  -->  00:09:12.290
fileReader is equal to Files.
195

195

00:09:13.910  -->  00:09:16.270
Actually what we'll do
instead of doing that there,
196

196

00:09:16.270  -->  00:09:19.700
let's actually create a static method.
197

197

00:09:19.700  -->  00:09:23.370
So I would go private
static void printFile,
198

198

00:09:26.430  -->  00:09:30.950
it'll accept a parameter
for a path, Path path,
199

199

00:09:30.950  -->  00:09:31.790
and I'll make sure we're using
200

200

00:09:31.790  -->  00:09:34.770
the Java.nio import, which we are,
201

201

00:09:34.770  -->  00:09:36.750
and we'll run it through our
try with resources in there.
202

202

00:09:36.750  -->  00:09:40.200
So try with resources,
with a left parenthesis,
203

203

00:09:40.200  -->  00:09:43.870
BufferedReader fileReader
is equal to Files,
204

204

00:09:46.980  -->  00:09:50.980
java.nio.file,
.newBufferedReader and path being
205

205

00:09:52.410  -->  00:09:56.760
the argument that was
passed to this method.
206

206

00:09:56.760  -->  00:09:59.920
In terms of the code, we're
gonna start with a String line,
207

207

00:09:59.920  -->  00:10:02.520
then we'll do while, two parentheses,
208

208

00:10:02.520  -->  00:10:05.190
line equals fileReader.readLine.
209

209

00:10:08.410  -->  00:10:11.730
All that's not equal to null,
and we want one parentheses
210

210

00:10:11.730  -->  00:10:15.550
here, after the readLine method,
one extra one I should say,
211

211

00:10:15.550  -->  00:10:18.420
and one to close off the statement.
212

212

00:10:18.420  -->  00:10:19.260
Then we're just going to print out
213

213

00:10:19.260  -->  00:10:23.520
the output, so print line,
and then outside of this,
214

214

00:10:23.520  -->  00:10:25.480
we're gonna catch any IOExceptions we get.
215

215

00:10:25.480  -->  00:10:28.310
IOException e, print e.getMessage,
216

216

00:10:32.760  -->  00:10:35.570
and then let's do an e.printStackTrace.
217

217

00:10:35.570  -->  00:10:37.580
And I'm getting this error
about Try-with-resources
218

218

00:10:37.580  -->  00:10:39.610
not supported at this language level.
219

219

00:10:39.610  -->  00:10:41.440
Let's kind of right-click that,
220

220

00:10:41.440  -->  00:10:45.110
click on Open Module
Settings, go to Project
221

221

00:10:47.180  -->  00:10:51.380
and make sure that I've
got JDK 8 selected there,
222

222

00:10:51.380  -->  00:10:53.810
click on OK, and that
should keep things happy,
223

223

00:10:53.810  -->  00:10:56.010
keeps Java happy now.
224

224

00:10:56.010  -->  00:10:57.390
All right, so that's the
method now that's going
225

225

00:10:57.390  -->  00:10:59.890
to basically read the contents of a file
226

226

00:10:59.890  -->  00:11:01.880
and output them on the screen.
227

227

00:11:01.880  -->  00:11:03.530
Nothing particularly
hard to understand there,
228

228

00:11:03.530  -->  00:11:04.970
that's all pretty straightforward.
229

229

00:11:04.970  -->  00:11:06.960
So the method opens with a BufferedReader,
230

230

00:11:06.960  -->  00:11:08.790
then uses the
BufferedReader.readLine method
231

231

00:11:08.790  -->  00:11:10.380
to read and print each line until
232

232

00:11:10.380  -->  00:11:12.200
it reaches the end of the file.
233

233

00:11:12.200  -->  00:11:14.170
So let's try this now, we'll try this with
234

234

00:11:14.170  -->  00:11:17.050
the WorkingDirectory file first,
235

235

00:11:17.050  -->  00:11:18.010
and I should actually rename that,
236

236

00:11:18.010  -->  00:11:19.600
because it's not WorkingDirectory.txt,
237

237

00:11:19.600  -->  00:11:21.970
WorkingDirectoryFile
would be more appropriate,
238

238

00:11:21.970  -->  00:11:23.750
so let's just rename
that while we're here.
239

239

00:11:23.750  -->  00:11:27.920
Refactor, Rename,
WorkingDirectoryFile.txt, that's better,
240

240

00:11:30.190  -->  00:11:32.310
and the same for this one,
just while I remember it.
241

241

00:11:32.310  -->  00:11:35.730
Refactor, Rename, SubdirectoryFile, okay.
242

242

00:11:38.500  -->  00:11:39.790
All right, so let's start with trying
243

243

00:11:39.790  -->  00:11:42.590
to read this WorkingDirectoryFile.
244

244

00:11:42.590  -->  00:11:47.260
So to do that we're just gonna
type Path path is equal to,
245

245

00:11:47.260  -->  00:11:51.420
that's gonna be
FileSystems.getDefault().getPath,
246

246

00:11:55.370  -->  00:11:57.110
this is a relative path, and that's gonna
247

247

00:11:57.110  -->  00:12:01.280
be WorkingDirectoryFile.txt,
so we wanna get it exactly
248

248

00:12:02.880  -->  00:12:07.030
the file name we've got stored
in our root project folder.
249

249

00:12:07.030  -->  00:12:11.020
Then let's actually call
our method printFile(path).
250

250

00:12:11.020  -->  00:12:12.760
So what we're doing
here is creating a path
251

251

00:12:12.760  -->  00:12:14.750
the same way we've done previously,
252

252

00:12:14.750  -->  00:12:16.690
and then calling the
printFile method with it.
253

253

00:12:16.690  -->  00:12:19.010
Now since this file is
in the working directory,
254

254

00:12:19.010  -->  00:12:21.940
we only have to pass the file
name to the getPath method.
255

255

00:12:21.940  -->  00:12:24.570
So in other words, we're just
specifying a relative path
256

256

00:12:24.570  -->  00:12:28.740
but we'll run the application
to confirm it works,
257

257

00:12:30.550  -->  00:12:34.140
and I'll just move this
down to the bottom,
258

258

00:12:36.820  -->  00:12:38.450
and you can just ignore
this warning on the screen
259

259

00:12:38.450  -->  00:12:41.540
by the way, that's an issue at the moment
260

260

00:12:41.540  -->  00:12:46.060
with the Mac and the
particular version of the JDK.
261

261

00:12:46.060  -->  00:12:47.450
I'm hoping that they'll correct that soon,
262

262

00:12:47.450  -->  00:12:48.970
the research that I've done has told me
263

263

00:12:48.970  -->  00:12:50.510
that they are working on a fix for
264

264

00:12:50.510  -->  00:12:52.740
that in a future version of the JDK,
265

265

00:12:52.740  -->  00:12:54.850
but the moment in time,
that's not actually fixed.
266

266

00:12:54.850  -->  00:12:56.350
So it just gives you a
bit of a warning here
267

267

00:12:56.350  -->  00:13:00.520
when you run a programme, on Mac
only, but we can ignore that.
268

268

00:13:01.360  -->  00:13:02.250
But the point here is though,
269

269

00:13:02.250  -->  00:13:05.540
file with the working
directory is output, and that's
270

270

00:13:05.540  -->  00:13:08.050
the same content, so clearly
that's actually working,
271

271

00:13:08.050  -->  00:13:10.790
and it's read that file successfully.
272

272

00:13:10.790  -->  00:13:12.160
All right, so far so good, we're able
273

273

00:13:12.160  -->  00:13:13.880
to read that file correctly.
274

274

00:13:13.880  -->  00:13:15.460
Let's now try putting the contents of
275

275

00:13:15.460  -->  00:13:18.380
the file in the files subdirectory.
276

276

00:13:19.350  -->  00:13:23.520
I'm gonna start by typing
Path, call this one filePath
277

277

00:13:26.220  -->  00:13:30.380
is equal to FileSystems,
again, .getDefault().getPath,
278

278

00:13:35.010  -->  00:13:38.660
and let's type in the name Subdirectory,
279

279

00:13:38.660  -->  00:13:40.980
and get your capitalization correct there,
280

280

00:13:40.980  -->  00:13:43.270
and actually what I've done is, I now got
281

281

00:13:43.270  -->  00:13:45.740
that exactly the same, that's
good, and then we'll do
282

282

00:13:45.740  -->  00:13:49.910
a printFile filePath, and
if we actually run that...
283

283

00:13:54.840  -->  00:13:57.090
You can see that we've
got an exception there,
284

284

00:13:57.090  -->  00:13:58.770
and you can see the error's telling us,
285

285

00:13:58.770  -->  00:14:02.410
"NoSuchFileException:
SubdirectoryFile.txt."
286

286

00:14:02.410  -->  00:14:04.130
So that's thrown when
the line that creates
287

287

00:14:04.130  -->  00:14:07.040
the BufferedReader in the
printFile method was executed.
288

288

00:14:07.040  -->  00:14:10.110
In this case the file wasn't
found, or couldn't be found
289

289

00:14:10.110  -->  00:14:12.210
because we didn't build
the path correctly.
290

290

00:14:12.210  -->  00:14:14.830
When we only specify a file
name as we've done here,
291

291

00:14:14.830  -->  00:14:17.200
the string you provide
to the getPath method
292

292

00:14:17.200  -->  00:14:19.690
is combined with the
FileSystems object's default,
293

293

00:14:19.690  -->  00:14:22.870
or working directory, to come
up with an absolute path.
294

294

00:14:22.870  -->  00:14:24.430
In this case though,
the working directory is
295

295

00:14:24.430  -->  00:14:27.030
the project directory, which
of course isn't the folder,
296

296

00:14:27.030  -->  00:14:30.080
or directory that contains the
file we're trying to look at.
297

297

00:14:30.080  -->  00:14:33.380
So since the file isn't located
in the working directory,
298

298

00:14:33.380  -->  00:14:36.610
we have to provide more
information to the getPath method,
299

299

00:14:36.610  -->  00:14:38.950
and we can do that by
passing a second parameter
300

300

00:14:38.950  -->  00:14:41.890
to the overloaded getPath
method to achieve that.
301

301

00:14:41.890  -->  00:14:43.570
So the way to do that
is we come back here to
302

302

00:14:43.570  -->  00:14:47.780
the getPath call, and the
first argument will be files,
303

303

00:14:47.780  -->  00:14:49.560
being the name of the subfolder,
304

304

00:14:49.560  -->  00:14:52.160
then the second argument
we leave as it is,
305

305

00:14:52.160  -->  00:14:54.100
which is the name of the file.
306

306

00:14:54.100  -->  00:14:58.270
All right, so we try running
that, and this time we're able
307

307

00:14:59.380  -->  00:15:00.840
to get it, "File within subdirectory,"
308

308

00:15:00.840  -->  00:15:03.470
as you can see here, this output.
309

309

00:15:03.470  -->  00:15:04.410
And that obviously corresponds to
310

310

00:15:04.410  -->  00:15:08.110
the output that's in the
file, so far so good.
311

311

00:15:08.110  -->  00:15:10.970
Now if the file has two or
three subdirectories deep,
312

312

00:15:10.970  -->  00:15:13.760
then you'll add each
subdirectory as a parameter
313

313

00:15:13.760  -->  00:15:16.220
in the order that you want
them to appear in the path,
314

314

00:15:16.220  -->  00:15:18.770
and you can also pass
everything as a single string,
315

315

00:15:18.770  -->  00:15:21.440
and we'll see an example
of that a little bit later.
316

316

00:15:21.440  -->  00:15:23.460
All right, so now just
before I end the video,
317

317

00:15:23.460  -->  00:15:27.330
let's print the contents
of the OutThere.txt file.
318

318

00:15:27.330  -->  00:15:29.290
Now since the file is located outside
319

319

00:15:29.290  -->  00:15:31.430
the working directory, we can't call
320

320

00:15:31.430  -->  00:15:34.560
the FileSystems.getDefault
and then getPath method,
321

321

00:15:34.560  -->  00:15:36.410
instead what we're gonna do is use
322

322

00:15:36.410  -->  00:15:40.440
the Paths.get method and
specify the absolute path.
323

323

00:15:40.440  -->  00:15:42.270
So we can do that by typing,
324

324

00:15:42.270  -->  00:15:45.790
or we use the filePath,
let's just reuse that again.
325

325

00:15:45.790  -->  00:15:48.290
So filePath is equal to Paths,
326

326

00:15:50.000  -->  00:15:52.050
notice it's Paths and not Path this time,
327

327

00:15:52.050  -->  00:15:54.580
.get, and you'll need to actually put in
328

328

00:15:54.580  -->  00:15:57.750
the exact location where that file is.
329

329

00:15:58.620  -->  00:16:02.530
In my case, if I go back
to my Finder, we can see
330

330

00:16:02.530  -->  00:16:05.220
that I have to actually
specify quite a long path,
331

331

00:16:05.220  -->  00:16:06.350
but I've also got the path up here
332

332

00:16:06.350  -->  00:16:08.660
that I can actually use as well.
333

333

00:16:08.660  -->  00:16:10.090
So I'm gonna do that, knowing that I need
334

334

00:16:10.090  -->  00:16:13.040
to specify the folder, JavaPrograms,
335

335

00:16:13.040  -->  00:16:14.360
and then the name of the file,
336

336

00:16:14.360  -->  00:16:15.700
but you'll substitute it to whatever
337

337

00:16:15.700  -->  00:16:17.710
is appropriate for your operating system.
338

338

00:16:17.710  -->  00:16:21.880
So in my case, it's gonna be
/Volumes/Production/Courses
339

339

00:16:26.720  -->  00:16:30.790
/Programs/JavaPrograms, so we're now at
340

340

00:16:30.790  -->  00:16:32.640
the folder where that file is,
341

341

00:16:32.640  -->  00:16:35.350
and then I need to also
put another slash there,
342

342

00:16:35.350  -->  00:16:37.210
and put in the name of the actual file.
343

343

00:16:37.210  -->  00:16:40.180
So in my case, we called it,
344

344

00:16:40.180  -->  00:16:43.420
if you go back to that
folder, JavaPrograms,
345

345

00:16:43.420  -->  00:16:45.380
and that's the name of the
file there you'll just take
346

346

00:16:45.380  -->  00:16:49.550
a copy of, and I'm gonna
paste that to the end there.
347

347

00:16:51.230  -->  00:16:53.350
So that's the path on a Mac, if you're on
348

348

00:16:53.350  -->  00:16:55.350
a Windows machine, if you put the file,
349

349

00:16:55.350  -->  00:16:58.190
say, in the examples folder,
you might do something
350

350

00:16:58.190  -->  00:17:02.910
like D:\\, remember you've gotta escape
351

351

00:17:02.910  -->  00:17:05.350
if you're using backslashes,
so you put two backslashes
352

352

00:17:05.350  -->  00:17:09.630
for the path on Windows,
and it might be D:\\
353

353

00:17:09.630  -->  00:17:13.730
as you can see there, Examples\\,
354

354

00:17:13.730  -->  00:17:15.650
and then OutThere.txt, that was the name.
355

355

00:17:15.650  -->  00:17:17.630
So that would be if you got your file on
356

356

00:17:17.630  -->  00:17:20.420
the D drive in the Examples subfolder,
357

357

00:17:20.420  -->  00:17:21.660
and the file's called OutThere.txt.
358

358

00:17:21.660  -->  00:17:23.510
That's how you do it on
Windows, but in my case I'm on
359

359

00:17:23.510  -->  00:17:26.270
a Mac so that's the right format for me.
360

360

00:17:26.270  -->  00:17:28.410
All right, so now that we've got that,
361

361

00:17:28.410  -->  00:17:33.160
then we just wanna print it
out, so printFile filePath,
362

362

00:17:33.160  -->  00:17:37.490
so let's actually run
that and see if it works.
363

363

00:17:37.490  -->  00:17:38.380
And you can see, here we've got,
364

364

00:17:38.380  -->  00:17:41.120
"File in some random
location on the file system,"
365

365

00:17:41.120  -->  00:17:43.120
which is exactly what we want there,
366

366

00:17:43.120  -->  00:17:46.300
and if I go back and have a look at that,
367

367

00:17:46.300  -->  00:17:48.080
File in some random
location on the file system,
368

368

00:17:48.080  -->  00:17:51.230
so clearly it's reading
from the right file.
369

369

00:17:51.230  -->  00:17:52.630
All right, so let's finish the video here,
370

370

00:17:52.630  -->  00:17:53.990
in the next video we'll talk a bit more
371

371

00:17:53.990  -->  00:17:57.820
about alternatives to
retrieving the working directory
372

372

00:17:57.820  -->  00:18:00.720
and the subdirectory using
the Paths.get method.
373

373

00:18:00.720  -->  00:18:02.720
I'll see you in the next video.
