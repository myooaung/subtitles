WEBVTT
1
1

00:00:05.010  -->  00:00:07.590
so it's now time to start practicing what
2

2

00:00:07.590  -->  00:00:09.990
we learned about j unit we're going to
3

3

00:00:09.990  -->  00:00:12.840
do that the series of challenges so what
4

4

00:00:12.840  -->  00:00:14.490
I'm going to do is start off by creating
5

5

00:00:14.490  -->  00:00:18.180
a utilities class that we're going
6

6

00:00:18.180  -->  00:00:20.820
to be using so create a new project as I've
7

7

00:00:20.820  -->  00:00:22.980
already done in this case i've called it
8

8

00:00:22.980  -->  00:00:24.660
j unit challenge but you can of course
9

9

00:00:24.660  -->  00:00:27.330
call it whatever you like and let's
10

10

00:00:27.330  -->  00:00:29.850
create this new package this new class
11

11

00:00:29.850  -->  00:00:32.780
rather going to call it utilities
12

12

00:00:32.780  -->  00:00:37.280
ok so let's create a few methods now
13

13

00:00:37.280  -->  00:00:39.960
i'm going to start off by creating a
14

14

00:00:39.960  -->  00:00:42.920
method...
15

15

00:00:42.920  -->  00:00:47.690
....
16

16

00:00:47.690  -->  00:00:55.970
...
17

17

00:00:55.970  -->  00:01:13.860
....
18

18

00:01:13.860  -->  00:01:16.620
....that's basically the overview of
19

19

00:01:16.620  -->  00:01:18.060
what this particular function
20

20

00:01:18.060  -->  00:01:20.730
does
21

21

00:01:20.730  -->  00:01:23.520
ok so in terms of the code now there may
22

22

00:01:23.520  -->  00:01:25.470
be bugs in this code as I type it so if you
23

23

00:01:25.470  -->  00:01:27.810
do spot any keep them to the back of
24

24

00:01:27.810  -->  00:01:30.030
your mind for now remember remembering
25

25

00:01:30.030  -->  00:01:31.650
that we're going to be testing all the
26

26

00:01:31.650  -->  00:01:34.380
methods in this class using j unit
27

27

00:01:34.380  -->  00:01:37.410
alright so if...
28

28

00:01:37.410  -->  00:02:32.630
...
29

29

00:02:32.630  -->  00:02:38.270
ok that's the first method and again the
30

30

00:02:38.270  -->  00:02:41.000
idea of this one return a char array
31

31

00:02:41.000  -->  00:02:43.340
containing every nth character and nth
32

32

00:02:43.340  -->  00:02:45.560
is a parameter that we pass and when
33

33

00:02:45.560  -->  00:02:47.180
the source array . length is less than
34

34

00:02:47.180  -->  00:02:49.220
n we just returned the entire array
35

35

00:02:49.220  -->  00:02:51.830
that was the purpose of that function
36

36

00:02:51.830  -->  00:02:54.320
the next function we're going to call
37

37

00:02:54.320  -->  00:02:57.470
this one public...
38

38

00:02:57.470  -->  00:03:26.300
...
39

39

00:03:26.300  -->  00:03:55.000
....
40

40

00:03:55.000  -->  00:03:57.400
alright so that's the purpose of this
41

41

00:03:57.400  -->  00:04:01.630
function right so let's write the code
42

42

00:04:01.630  -->  00:04:03.340
for it....
43

43

00:04:03.340  -->  00:06:44.160
...
44

44

00:06:44.160  -->  00:06:47.560
ok so that's the utilities class is
45

45

00:06:47.560  -->  00:06:49.930
going to be used as a basis for our unit
46

46

00:06:49.930  -->  00:06:52.120
testing so this is available in the
47

47

00:06:52.120  -->  00:06:53.500
resources section if you don't want to
48

48

00:06:53.500  -->  00:06:56.260
type it in let's go ahead now and look at
49

49

00:06:56.260  -->  00:06:57.820
our first challenge
50

50

00:06:57.820  -->  00:07:04.400
alright so challenge number one
51

51

00:07:04.400  -->  00:07:06.240
to set up the test
52

52

00:07:06.240  -->  00:07:08.940
Stubs you want to create a J unit test
53

53

00:07:08.940  -->  00:07:11.430
class that contains a test method for
54

54

00:07:11.430  -->  00:07:13.710
each method in the utilities class that
55

55

00:07:13.710  -->  00:07:15.390
is being created in this video
56

56

00:07:15.390  -->  00:07:17.550
now don't add any test code to the
57

57

00:07:17.550  -->  00:07:20.010
method yet when you run the tests they
58

58

00:07:20.010  -->  00:07:22.620
should all fail so use the naming
59

59

00:07:22.620  -->  00:07:24.090
conventions we discussed in previous
60

60

00:07:24.090  -->  00:07:26.100
videos in this part of the course
61

61

00:07:26.100  -->  00:07:28.380
remembering that you have to have the j
62

62

00:07:28.380  -->  00:07:31.470
unit 4 library to this project
63

63

00:07:31.470  -->  00:07:33.420
so that is challenge one see how you go with
64

64

00:07:33.420  -->  00:07:35.280
that one pause the video and I'll see
65

65

00:07:35.280  -->  00:07:36.600
you when you get back
66

66

00:07:36.600  -->  00:07:41.310
ok so how did you go with that first
67

67

00:07:41.310  -->  00:07:42.870
challenge hopefully managed to get that
68

68

00:07:42.870  -->  00:07:45.930
working so what we need to do is
69

69

00:07:45.930  -->  00:07:49.410
using IntelliJ junit support to create
70

70

00:07:49.410  -->  00:07:51.300
that test class and then add the j unit
71

71

00:07:51.300  -->  00:07:53.790
4 library and you can do all of this
72

72

00:07:53.790  -->  00:07:55.320
manually by adding the methods yourself
73

73

00:07:55.320  -->  00:07:58.350
and also adding the j 4 library by
74

74

00:07:58.350  -->  00:07:59.790
using the project structured dialogue
75

75

00:07:59.790  -->  00:08:01.350
that you saw earlier in this
76

76

00:08:01.350  -->  00:08:03.690
section but what I'm going to do is place my
77

77

00:08:03.690  -->  00:08:06.390
cursor on the utilities class
78

78

00:08:06.390  -->  00:08:08.490
declaration line and hold down alt and
79

79

00:08:08.490  -->  00:08:09.270
press enter
80

80

00:08:09.270  -->  00:08:12.180
and going to click on create test
81

81

00:08:12.180  -->  00:08:14.310
from the pop-up dialog press ENTER
82

82

00:08:14.310  -->  00:08:17.910
their going to select j unit 4 from
83

83

00:08:17.910  -->  00:08:21.870
the testing library and the dialog box
84

84

00:08:21.870  -->  00:08:24.240
reports the j unit 4 libraries is not found
85

85

00:08:24.240  -->  00:08:26.100
in the module however we're not going to
86

86

00:08:26.100  -->  00:08:28.440
click on that fixed button and
87

87

00:08:28.440  -->  00:08:30.570
reason for that is were avoiding the step of
88

88

00:08:30.570  -->  00:08:32.100
having to go into the project structure
89

89

00:08:32.100  -->  00:08:35.010
dialogue and selecting compile will fix
90

90

00:08:35.010  -->  00:08:37.230
the library problem in a minute so the class
91

91

00:08:37.230  -->  00:08:39.420
name is set to utilities test
92

92

00:08:39.420  -->  00:08:41.070
automatically and that follows the
93

93

00:08:41.070  -->  00:08:42.960
naming convention for test classes the
94

94

00:08:42.960  -->  00:08:44.790
word test in it so we can keep that the
95

95

00:08:44.790  -->  00:08:47.250
same and notice that the create
96

96

00:08:47.250  -->  00:08:48.900
test dialogue has options for at
97

97

00:08:48.900  -->  00:08:52.020
before-and at-after so now you can see what
98

98

00:08:52.020  -->  00:08:54.030
they mean because of the last time I
99

99

00:08:54.030  -->  00:08:55.800
went through this earlier in the course we
100

100

00:08:55.800  -->  00:08:57.540
hadn't discussed what those sections what
101

101

00:08:57.540  -->  00:08:59.010
what they're actually used for what they
102

102

00:08:59.010  -->  00:09:01.200
meant but we won't actually add those at
103

103

00:09:01.200  -->  00:09:03.240
this time and then of course we need to
104

104

00:09:03.240  -->  00:09:06.120
select all the methods by checking all
105

105

00:09:06.120  -->  00:09:08.340
the boxes at the bottom of the dialog to
106

106

00:09:08.340  -->  00:09:09.990
the left of each method we want a unit
107

107

00:09:09.990  -->  00:09:14.010
test for this case is all 4 of them and
108

108

00:09:14.010  -->  00:09:16.590
then we click on OK you see that
109

109

00:09:16.590  -->  00:09:18.540
intellij has now created these units
110

110

00:09:18.540  -->  00:09:19.500
test class
111

111

00:09:19.500  -->  00:09:22.650
in the same package as our utilities class
112

112

00:09:22.650  -->  00:09:25.500
which is of course what we wanted and we
113

113

00:09:25.500  -->  00:09:27.840
still got this problem here tho of the
114

114

00:09:27.840  -->  00:09:31.440
references to j unit being unresolve so
115

115

00:09:31.440  -->  00:09:32.970
all we need to do to fix that is place the
116

116

00:09:32.970  -->  00:09:35.370
cursor on one of these annotation lines
117

117

00:09:35.370  -->  00:09:37.680
so the first ones as good as any
118

118

00:09:37.680  -->  00:09:39.750
make sure you click actually where it's
119

119

00:09:39.750  -->  00:09:43.650
unresolved the j unit part alt enter
120

120

00:09:43.650  -->  00:09:48.330
click on add j unit 4 to test path and we
121

121

00:09:48.330  -->  00:09:50.100
want to use j unit 4 from intellij
122

122

00:09:50.100  -->  00:09:52.800
ide distribution click okay that should
123

123

00:09:52.800  -->  00:09:54.870
resolve all the errors as you see now we no
124

124

00:09:54.870  -->  00:09:57.750
longer have any errors showing now at
125

125

00:09:57.750  -->  00:09:59.430
this point if you were to run the tests
126

126

00:09:59.430  -->  00:10:02.220
that all pass but if you recall part of
127

127

00:10:02.220  -->  00:10:04.650
the challenge was to make it fail so
128

128

00:10:04.650  -->  00:10:06.330
what we need to do is add a call to j units
129

129

00:10:06.330  -->  00:10:08.610
fail method to each test method
130

130

00:10:08.610  -->  00:10:11.700
let's go ahead and do that so...
131

131

00:10:11.700  -->  00:10:44.640
...
132

132

00:10:44.640  -->  00:10:50.970
you can see we've got out 4 j unit test
133

133

00:10:50.970  -->  00:10:52.980
methods now which are all failing and
134

134

00:10:52.980  -->  00:10:54.330
obviously all got that same error that
135

135

00:10:54.330  -->  00:10:56.220
same failure message which was just added
136

136

00:10:56.220  -->  00:10:57.600
to each method
137

137

00:10:57.600  -->  00:11:00.060
ok so that is challenge number one
138

138

00:11:00.060  -->  00:11:01.680
completed let's have a look at the next
139

139

00:11:01.680  -->  00:11:04.030
challenge
140

140

00:11:04.030  -->  00:11:11.200
challenge number two challenges is to add
141

141

00:11:11.200  -->  00:11:13.510
test code to the removed pairs test method
142

142

00:11:13.510  -->  00:11:15.910
to test the utilities . remove pairs
143

143

00:11:15.910  -->  00:11:18.520
method so this challenge the idea is to
144

144

00:11:18.520  -->  00:11:20.890
create tests for the utilities .
145

145

00:11:20.890  -->  00:11:23.170
remove pairs method now this method
146

146

00:11:23.170  -->  00:11:25.600
accepts a string and removes any pairs
147

147

00:11:25.600  -->  00:11:27.940
that contains by removing one half of
148

148

00:11:27.940  -->  00:11:30.280
the pair and you saw when i was typing
149

149

00:11:30.280  -->  00:11:32.620
in the code some of the examples but
150

150

00:11:32.620  -->  00:11:34.000
you can see on the screen there the
151

151

00:11:34.000  -->  00:11:35.680
first input has got multiple a's
152

152

00:11:35.680  -->  00:11:38.770
multiple d's and multiple f's and the
153

153

00:11:38.770  -->  00:11:40.630
output has stripped those to leave only
154

154

00:11:40.630  -->  00:11:43.750
the ABCDEF and in the second scenario
155

155

00:11:43.750  -->  00:11:46.450
we've got some duplicates c's  and
156

156

00:11:46.450  -->  00:11:48.640
some duplicate e's and strip those to
157

157

00:11:48.640  -->  00:11:53.570
leave only one of each
158

158

00:11:53.570  -->  00:11:55.670
so you want to write the test code the
159

159

00:11:55.670  -->  00:11:57.380
test the above two scenarios that I've
160

160

00:11:57.380  -->  00:11:59.780
shown and start by writing a test for
161

161

00:11:59.780  -->  00:12:02.330
the first set of input output and once
162

162

00:12:02.330  -->  00:12:04.940
that test passes add a test for the second
163

163

00:12:04.940  -->  00:12:08.000
input output pair to keep things
164

164

00:12:08.000  -->  00:12:08.690
simple
165

165

00:12:08.690  -->  00:12:10.310
you can add the second test to the same
166

166

00:12:10.310  -->  00:12:12.050
test method but if you want to be strict
167

167

00:12:12.050  -->  00:12:13.940
about it you could create another test
168

168

00:12:13.940  -->  00:12:14.990
method for it
169

169

00:12:14.990  -->  00:12:16.670
alright so that is challenge number to see
170

170

00:12:16.670  -->  00:12:18.740
how you go with it and pause the video
171

171

00:12:18.740  -->  00:12:20.210
now and i'll see you when you get back
172

172

00:12:20.210  -->  00:12:24.620
alright so for this particular
173

173

00:12:24.620  -->  00:12:27.230
challenge we want to use the assert
174

174

00:12:27.230  -->  00:12:29.540
equals method and that's because we want
175

175

00:12:29.540  -->  00:12:31.820
to test the actual value the output from
176

176

00:12:31.820  -->  00:12:34.130
the method against the expected value
177

177

00:12:34.130  -->  00:12:36.440
remember that the expected value is the
178

178

00:12:36.440  -->  00:12:38.300
first parameter so let's look at the
179

179

00:12:38.300  -->  00:12:40.880
remove paris first i'm going to delete
180

180

00:12:40.880  -->  00:12:43.700
that failure call now because
181

181

00:12:43.700  -->  00:12:45.710
we're now implementing the test so we're
182

182

00:12:45.710  -->  00:12:49.190
....
183

183

00:12:49.190  -->  00:13:14.480
...
184

184

00:13:14.480  -->  00:13:18.170
...and
185

185

00:13:18.170  -->  00:13:20.330
we can run the test in two ways we can
186

186

00:13:20.330  -->  00:13:21.800
run all the tests which we do by
187

187

00:13:21.800  -->  00:13:23.960
clicking on a run right over here in the
188

188

00:13:23.960  -->  00:13:26.090
bottom left hand corner or up here now that
189

189

00:13:26.090  -->  00:13:28.130
units utilities test has been
190

190

00:13:28.130  -->  00:13:29.840
selected because we've run it at least
191

191

00:13:29.840  -->  00:13:32.120
once we could also do it by clicking
192

192

00:13:32.120  -->  00:13:33.470
over here in the gutter
193

193

00:13:33.470  -->  00:13:36.050
so let's run this test only by just
194

194

00:13:36.050  -->  00:13:37.040
clicking on this little button over here
195

195

00:13:37.040  -->  00:13:40.520
to run just to remove pairs test run
196

196

00:13:40.520  -->  00:13:41.960
that and see what we get
197

197

00:13:41.960  -->  00:13:46.040
you can see that we've got a comparison
198

198

00:13:46.040  -->  00:13:48.950
failure here so we actually got a failure
199

199

00:13:48.950  -->  00:13:50.930
so you can see that expected to
200

200

00:13:50.930  -->  00:13:54.710
get ABCDEF but the actual response we
201

201

00:13:54.710  -->  00:13:57.500
got was nothing it was actually empty sp did
202

202

00:13:57.500  -->  00:13:58.820
you figure out why thats actually done that
203

203

00:13:58.820  -->  00:14:01.040
yet what i suggest you do is take some
204

204

00:14:01.040  -->  00:14:02.390
time now to see if you can figure out
205

205

00:14:02.390  -->  00:14:04.670
the bug and fix the method before we
206

206

00:14:04.670  -->  00:14:06.770
proceed so pause the video now
207

207

00:14:06.770  -->  00:14:08.390
you can fix and figure out why this
208

208

00:14:08.390  -->  00:14:10.340
method is now failing and then come back
209

209

00:14:10.340  -->  00:14:13.850
and I'll go through the solution so
210

210

00:14:13.850  -->  00:14:15.920
did you figure it out when debugging
211

211

00:14:15.920  -->  00:14:17.870
it can be useful sometimes to run the
212

212

00:14:17.870  -->  00:14:20.360
code outside a test case let's actually
213

213

00:14:20.360  -->  00:14:23.150
go back to main dot java and put some
214

214

00:14:23.150  -->  00:14:25.310
code in there to test....
215

215

00:14:25.310  -->  00:14:40.790
...
216

216

00:14:40.790  -->  00:14:43.790
...well that is actually print the
217

217

00:14:43.790  -->  00:14:45.800
value of each character were examining
218

218

00:14:45.800  -->  00:14:48.410
in the loop in the removed pairs method
219

219

00:14:48.410  -->  00:14:51.860
in the utilities class coming down here
220

220

00:14:51.860  -->  00:14:53.870
remove pairs so when we are going through it
221

221

00:14:53.870  -->  00:14:57.740
...
222

222

00:14:57.740  -->  00:14:59.630
let's print out the character their...
223

223

00:14:59.630  -->  00:15:06.110
....so added a
224

224

00:15:06.110  -->  00:15:08.150
simple print out there now guess
225

225

00:15:08.150  -->  00:15:10.010
we could have used the debugger instead to
226

226

00:15:10.010  -->  00:15:12.170
set a breakpoint inside the loop and
227

227

00:15:12.170  -->  00:15:14.660
examine string I in this case so I think
228

228

00:15:14.660  -->  00:15:17.090
print line is easier but you may will
229

229

00:15:17.090  -->  00:15:19.550
prefer to use the debugger it's
230

230

00:15:19.550  -->  00:15:22.430
literally up to you here some developers
231

231

00:15:22.430  -->  00:15:24.260
prefer using logging or print line when
232

232

00:15:24.260  -->  00:15:26.330
they know the general area where the bug
233

233

00:15:26.330  -->  00:15:28.250
must be and then if the prints don't help
234

234

00:15:28.250  -->  00:15:30.290
then go back into start using an
235

235

00:15:30.290  -->  00:15:31.910
alternative which would be the debug
236

236

00:15:31.910  -->  00:15:34.010
there's really no right or wrong way here
237

237

00:15:34.010  -->  00:15:36.020
to bug a problem just use whatever
238

238

00:15:36.020  -->  00:15:37.490
method works for you
239

239

00:15:37.490  -->  00:15:39.560
note however that you'll often need to
240

240

00:15:39.560  -->  00:15:41.840
use a debugger when working on non trivial
241

241

00:15:41.840  -->  00:15:42.920
applications
242

242

00:15:42.920  -->  00:15:44.990
alright so we got a print line
243

243

00:15:44.990  -->  00:15:46.490
added now and we should expect to see
244

244

00:15:46.490  -->  00:15:48.680
all the characters in the input array
245

245

00:15:48.680  -->  00:15:50.030
printed to the console
246

246

00:15:50.030  -->  00:15:53.150
let's get back to our main method and
247

247

00:15:53.150  -->  00:15:54.950
run it right click to make sure we're
248

248

00:15:54.950  -->  00:15:56.210
running the main and not the tests
249

249

00:15:56.210  -->  00:16:00.320
anymore
250

250

00:16:00.320  -->  00:16:01.580
alright when you see the output they're
251

251

00:16:01.580  -->  00:16:03.560
clearly something isn't working right
252

252

00:16:03.560  -->  00:16:05.390
that's because we only see the letters a
253

253

00:16:05.390  -->  00:16:08.990
B D E and F so no Cs you can see
254

254

00:16:08.990  -->  00:16:11.600
now we're using a classic for loop if
255

255

00:16:11.600  -->  00:16:14.150
you go back to our utility test again and
256

256

00:16:14.150  -->  00:16:15.890
we're incrementing one I by one on each
257

257

00:16:15.890  -->  00:16:18.260
loop iteration so how can this be so how
258

258

00:16:18.260  -->  00:16:20.450
can we have actually missed out c in
259

259

00:16:20.450  -->  00:16:22.550
this case looking at this code now
260

260

00:16:22.550  -->  00:16:23.990
can you see where the bug is
261

261

00:16:23.990  -->  00:16:25.700
well here's a hint since we seem to be
262

262

00:16:25.700  -->  00:16:27.890
skipping letters when we loop code
263

263

00:16:27.890  -->  00:16:29.930
inside the loop must also be
264

264

00:16:29.930  -->  00:16:32.540
incrementing I bet you can actually see
265

265

00:16:32.540  -->  00:16:36.200
it now so the if statement is using the
266

266

00:16:36.200  -->  00:16:39.350
increment operator which is wrong so the
267

267

00:16:39.350  -->  00:16:41.240
if condition is comparing the character
268

268

00:16:41.240  -->  00:16:44.090
position I with a character at position
269

269

00:16:44.090  -->  00:16:47.270
i plus 1 but instead of writing i plus 1
270

270

00:16:47.270  -->  00:16:50.810
we used i plus plus which not only
271

271

00:16:50.810  -->  00:16:53.510
increments i but assigns the result back
272

272

00:16:53.510  -->  00:16:55.250
to i and that's why we're actually
273

273

00:16:55.250  -->  00:16:57.650
skipping over characters so let's
274

274

00:16:57.650  -->  00:16:59.480
actually change that instead of putting
275

275

00:16:59.480  -->  00:17:05.570
i+ + which change to i + 1
276

276

00:17:05.570  -->  00:17:06.380
you can see there
277

277

00:17:06.380  -->  00:17:10.450
let's go back and run our main method
278

278

00:17:10.450  -->  00:17:16.930
again we can see now that we're actually
279

279

00:17:16.930  -->  00:17:18.860
getting the entire output the source
280

280

00:17:18.860  -->  00:17:22.450
string AABCDDEEFF
281

281

00:17:22.450  -->  00:17:24.560
however we are getting an array index
282

282

00:17:24.560  -->  00:17:27.680
out of bounds exception so now that we
283

283

00:17:27.680  -->  00:17:30.020
fix one bug another bug is detected
284

284

00:17:30.020  -->  00:17:32.870
so one bug masking another bug is
285

285

00:17:32.870  -->  00:17:35.030
actually a very common scenario in
286

286

00:17:35.030  -->  00:17:36.950
development and we didn't see this bug
287

287

00:17:36.950  -->  00:17:39.410
before because we're incrementing i by 2
288

288

00:17:39.410  -->  00:17:42.350
on each iteration of the loop and
289

289

00:17:42.350  -->  00:17:44.330
because of that we were never examining
290

290

00:17:44.330  -->  00:17:47.060
the last character in the array but
291

291

00:17:47.060  -->  00:17:48.590
now that we're not skipping characters
292

292

00:17:48.590  -->  00:17:50.900
we try to test the last character in the
293

293

00:17:50.900  -->  00:17:53.360
array against the next character of
294

294

00:17:53.360  -->  00:17:55.220
course there isn't a next character so
295

295

00:17:55.220  -->  00:17:56.270
we're getting an index out of bounds
296

296

00:17:56.270  -->  00:17:58.940
exception so what we need to do there
297

297

00:17:58.940  -->  00:18:01.490
looking back at our utilities class and
298

298

00:18:01.490  -->  00:18:04.190
remove pairs method we need to stop at
299

299

00:18:04.190  -->  00:18:06.980
string length minus one but that's not
300

300

00:18:06.980  -->  00:18:09.650
all we have to do we also need to add
301

301

00:18:09.650  -->  00:18:11.930
the last character to our stringbuilder
302

302

00:18:11.930  -->  00:18:13.120
because
303

303

00:18:13.120  -->  00:18:15.610
that character is always safe it's part
304

304

00:18:15.610  -->  00:18:18.370
of a pair already handled the pair by not
305

305

00:18:18.370  -->  00:18:19.870
adding the first character of the pair
306

306

00:18:19.870  -->  00:18:23.050
to the stringbuilder wow that cide was
307

307

00:18:23.050  -->  00:18:24.700
really really buggy so its a good thing
308

308

00:18:24.700  -->  00:18:25.870
we're testing it
309

309

00:18:25.870  -->  00:18:27.610
alright so let's actually go and change
310

310

00:18:27.610  -->  00:18:29.800
that make those changes now that we can
311

311

00:18:29.800  -->  00:18:31.990
hopefully fix these errors and
312

312

00:18:31.990  -->  00:18:33.550
hopefully our unit tests will then
313

313

00:18:33.550  -->  00:18:34.930
start working and we won't get any more
314

314

00:18:34.930  -->  00:18:37.930
errors so the first thing we need to do
315

315

00:18:37.930  -->  00:18:40.120
is instead of testing here for string .
316

316

00:18:40.120  -->  00:18:42.280
length...
317

317

00:18:42.280  -->  00:18:49.240
....
318

318

00:18:49.240  -->  00:19:13.750
...
319

319

00:19:13.750  -->  00:19:17.500
...alright so let's go back to our
320

320

00:19:17.500  -->  00:19:22.870
main and run that we've got the right output
321

321

00:19:22.870  -->  00:19:26.740
and if we go back to our unit tests and
322

322

00:19:26.740  -->  00:19:27.970
actually just before we do that
323

323

00:19:27.970  -->  00:19:30.130
in case you're wondering where's
324

324

00:19:30.130  -->  00:19:32.410
the second f we're not actually printing
325

325

00:19:32.410  -->  00:19:34.390
that out not actually getting to the
326

326

00:19:34.390  -->  00:19:35.830
stage of actually outputting that last
327

327

00:19:35.830  -->  00:19:37.390
character we really wanted to be precise
328

328

00:19:37.390  -->  00:19:39.280
about it we can actually print out here
329

329

00:19:39.280  -->  00:19:43.600
so we could do print...
330

330

00:19:43.600  -->  00:19:53.270
....run that
331

331

00:19:53.270  -->  00:19:59.580
...
332

332

00:19:59.580  -->  00:20:05.870
....we're seeing the second f alright
333

333

00:20:05.870  -->  00:20:07.610
so now that we've got all that we should
334

334

00:20:07.610  -->  00:20:09.050
be able to go back to our removed
335

335

00:20:09.050  -->  00:20:15.210
pairs test and run that we get success
336

336

00:20:15.210  -->  00:20:17.240
we finally got our second challenge
337

337

00:20:17.240  -->  00:20:20.210
complete and working but there was one
338

338

00:20:20.210  -->  00:20:22.080
other thing we need to do if you recall we need to
339

339

00:20:22.080  -->  00:20:23.960
test our second input
340

340

00:20:23.960  -->  00:20:25.910
let's just do that before we end this
341

341

00:20:25.910  -->  00:20:30.110
megavideo so....
342

342

00:20:30.110  -->  00:20:41.750
...
343

343

00:20:41.750  -->  00:20:48.110
...by the way
344

344

00:20:48.110  -->  00:20:49.640
you notice now this is now changing little bit
345

345

00:20:49.640  -->  00:20:51.980
with this source unexpected this is
346

346

00:20:51.980  -->  00:20:55.100
actually a new feature of IntelliJ and
347

347

00:20:55.100  -->  00:20:56.840
we're not actually typing that in but
348

348

00:20:56.840  -->  00:20:59.240
it's just showing what the proposed
349

349

00:20:59.240  -->  00:21:01.610
inputs and expected values so its really
350

350

00:21:01.610  -->  00:21:04.200
quite useful that a new
351

351

00:21:04.200  -->  00:21:06.330
feature that intellij added and here
352

352

00:21:06.330  -->  00:21:07.610
its actually making a lot of sense is
353

353

00:21:07.610  -->  00:21:09.380
telling us at a glance this is expected
354

354

00:21:09.380  -->  00:21:10.710
value we're going to get back
355

355

00:21:10.710  -->  00:21:12.380
this is the source value being past to the
356

356

00:21:12.380  -->  00:21:14.360
method and you'll see that in all
357

357

00:21:14.360  -->  00:21:16.340
aspects of java development in this
358

358

00:21:16.340  -->  00:21:19.250
version onward of intellij just
359

359

00:21:19.250  -->  00:21:20.960
confirming our output we went back to be
360

360

00:21:20.960  -->  00:21:24.650
...and that's because we're
361

361

00:21:24.650  -->  00:21:28.340
passing...so lets test that
362

362

00:21:28.340  -->  00:21:34.080
we've got that passing as well
363

363

00:21:34.080  -->  00:21:36.210
alright so let's finish this video here
364

364

00:21:36.210  -->  00:21:38.150
now and we'll move on to challenge three
365

365

00:21:38.150  -->  00:21:44.140
in the next video
