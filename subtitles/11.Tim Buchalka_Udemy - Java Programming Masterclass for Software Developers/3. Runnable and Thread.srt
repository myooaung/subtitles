1
1

00:00:05,210  -->  00:00:09,100
so as I mentioned their is a second way of
creating a thread and that's to use the
2

2

00:00:09,100  -->  00:00:12,920
runnable interface and the advantage
of using that is that it only requires us to
3

3

00:00:12,920  -->  00:00:16,880
implement a single method wondering
can you guess what the name of that
4

4

00:00:16,880  -->  00:00:20,720
method would be for using the runnable
interface well very similar to the
5

5

00:00:20,720  -->  00:00:24,470
previous way of creating threads we
need to implement the run method
6

6

00:00:25,000  -->  00:00:28,430
so instead of implementing the run
method of a class that sub classes
7

7

00:00:28,430  -->  00:00:32,480
thread we can have any class implements
runnable interface and then all we have
8

8

00:00:32,480  -->  00:00:37,390
to do is add run method to
that class of course will then want to
9

9

00:00:37,390  -->  00:00:40,870
write the code in the run method to
execute on a thread that we created
10

10

00:00:40,870  -->  00:00:44,510
but we'll get to that in a minute so
first let's create a new class is going
11

11

00:00:44,510  -->  00:00:46,190
to implement the runnable interface
12

12

00:00:46,190  -->  00:00:54,230
go ahead and do that and call the class.....and this time we are going to do a
13

13

00:00:54,230  -->  00:01:00,620
implements instead of an extends....
14

14

00:01:00,620  -->  00:01:05,120
....and you can see its complaining because it
was saying it must be declared abstract
15

15

00:01:05,120  -->  00:01:09,320
or implement the abstract method run so
we obviously need to do just that we're
16

16

00:01:09,320  -->  00:01:11,600
going to override or implement that
method
17

17

00:01:11,600  -->  00:01:15,610
so come down here to implement the
method which is going to be run
18

18

00:01:19,150  -->  00:01:25,540
we're going to use another color lets use red for this one so....
19

19

00:01:25,540  -->  00:01:33,670
.....
20

20

00:01:33,670  -->  00:01:41,810
.....so we go
back to main now
21

21

00:01:41,810  -->  00:01:45,850
so to run this code on it a new thread we create an instance of the thread class
22

22

00:01:45,850  -->  00:01:50,890
not a subclass but this time we pass an
instance of the my runnable class to
23

23

00:01:50,890  -->  00:01:55,640
the thread constructor and we can call
the threads instances start method just
24

24

00:01:55,640  -->  00:01:57,500
like we did before
25

25

00:01:57,500  -->  00:02:01,180
so let's add this code just before
the second output here so we're on line
26

26

00:02:01,180  -->  00:02:10,520
20 so....
27

27

00:02:10,520  -->  00:02:19,310
....and this time we pass a
parameter of the new object which we
28

28

00:02:19,310  -->  00:02:21,170
create by typing....
29

29

00:02:21,170  -->  00:02:25,810
so we have now created a new thread
based on the my runnable class that
30

30

00:02:25,810  -->  00:02:28,250
we just created a short while ago
31

31

00:02:28,250  -->  00:02:32,260
then from there we can type...
32

32

00:02:33,380  -->  00:02:39,590
so if we run that we get hello from my runnables implementation of run which
33

33

00:02:39,590  -->  00:02:45,230
obviously was in red which we selected
for that class so just when creating
34

34

00:02:45,230  -->  00:02:47,750
threads by subclassing the thread class
35

35

00:02:47,750  -->  00:02:51,410
we can also have an anonymous class
implements runnable and pass an instance
36

36

00:02:51,410  -->  00:02:53,180
of it to the thread constructor
37

37

00:02:53,180  -->  00:02:56,380
so let's change the code that we just
write on line 20 to do something like
38

38

00:02:56,380  -->  00:03:03,230
that so I'm going to.....
39

39

00:03:03,230  -->  00:03:06,440
....and let's create
anonymous class
40

40

00:03:06,440  -->  00:03:12,310
so do that by putting.....and then we can override so I can do
41

41

00:03:12,310  -->  00:03:16,250
an override and notice how its come up with
com.timbuchalka.myrunnable
42

42

00:03:16,250  -->  00:03:19,760
so it knows where overriding
that particular run
43

43

00:03:20,260  -->  00:03:23,260
select that
44

44

00:03:24,080  -->  00:03:32,180
close off the brace and instead of the super.run need another bracket we can leave
45

45

00:03:32,180  -->  00:03:35,510
the my runnable thread.start their first
of all if we do that and run that
46

46

00:03:36,080  -->  00:03:41,450
notice how we still get the same output
because we use super.run
47

47

00:03:41,450  -->  00:03:46,880
so its running the run method from the my
runnable class so we close that down and
48

48

00:03:46,880  -->  00:03:55,220
instead if we get rid of the super you put
something like.....
49

49

00:03:55,220  -->  00:03:56,990
....
50

50

00:03:56,990  -->  00:04:11,630
....when we do
51

51

00:04:11,630  -->  00:04:14,690
that we should see that we get the
output from the anonymous classes this time
52

52

00:04:14,690  -->  00:04:18,680
because we have overridden the run
method hello from the anonymous class
53

53

00:04:18,680  -->  00:04:20,480
implementation of run
54

54

00:04:20,480  -->  00:04:26,360
so question now you may have is why
should we use runnable vs sub classing
55

55

00:04:26,360  -->  00:04:30,380
the thread class in other words which
you know when should you be using the way
56

56

00:04:30,380  -->  00:04:33,500
well most of the time developers use the
runnable way of doing things
57

57

00:04:34,040  -->  00:04:37,370
now the reason is that - it's more
convenient and
58

58

00:04:37,370  -->  00:04:41,570
there's also many methods in the Java
API that when a runnable for instance
59

59

00:04:41,570  -->  00:04:42,740
passed to them
60

60

00:04:42,740  -->  00:04:45,800
for example since the introduction of
lambda expressions it's become even more
61

61

00:04:45,800  -->  00:04:48,770
convenient to use anonymous runnable
instances
62

62

00:04:48,770  -->  00:04:52,940
so when we have a choice because we're
not calling a method that requires one
63

63

00:04:52,940  -->  00:04:53,840
or the other
64

64

00:04:53,840  -->  00:04:57,710
there isn't really a right or wrong answer but
most developers use a runnable because
65

65

00:04:57,710  -->  00:05:01,370
it's more flexible so that would be my
recommendation is to consider doing that
66

66

00:05:01,370  -->  00:05:03,710
but when we read code written by others
67

67

00:05:03,710  -->  00:05:07,430
you'll probably see that more often than
not that we're using a runnable version
68

68

00:05:08,300  -->  00:05:11,780
so one thing we haven't mentioned is
that a thread will terminate when it
69

69

00:05:11,780  -->  00:05:15,320
returns from its run method either
implicitly because it reaches the
70

70

00:05:15,320  -->  00:05:20,150
methods end or explicitly because it
executes a return state now a common
71

71

00:05:20,150  -->  00:05:23,870
mistake when creating and running
threads is to call the threads instance run
72

72

00:05:23,870  -->  00:05:26,150
method instead of the start method
73

73

00:05:26,150  -->  00:05:29,570
so remember that we have to implement
the run method but we don't call it
74

74

00:05:29,570  -->  00:05:30,440
directly
75

75

00:05:30,440  -->  00:05:31,610
the jvm
76

76

00:05:31,610  -->  00:05:35,650
actually call that for us what happens
if we make this mistake well our
77

77

00:05:35,650  -->  00:05:39,800
application won't crash but instead of
running the code in the run method on a
78

78

00:05:39,800  -->  00:05:44,780
new thread the code is going to be run on the same thread that called
79

79

00:05:44,780  -->  00:05:48,020
the run method that sounds a little bit
confusing but lets see this in action
80

80

00:05:48,560  -->  00:05:52,550
another good thing that we can do is we
can set the name of the thread by using
81

81

00:05:52,550  -->  00:05:53,900
the set name method
82

82

00:05:53,900  -->  00:05:58,120
let's do that for the thread that we
created earlier to distinguish should
83

83

00:05:58,120  -->  00:06:02,530
from another so we know exactly where
our code is running so i will change the
84

84

00:06:02,530  -->  00:06:07,250
another thread here in line 12 and let's
set it to another name so...
85

85

00:06:07,250  -->  00:06:14,810
.....will call
that something like....
86

86

00:06:14,810  -->  00:06:18,250
....just so it's clear and you will see why
shortly
87

87

00:06:18,250  -->  00:06:24,130
and if we go back to the another thread
class hello from another thread but
88

88

00:06:24,130  -->  00:06:30,620
instead of putting from another thread
lets change this and put...
89

89

00:06:30,620  -->  00:06:36,970
....return the name of the current thread
90

90

00:06:36,970  -->  00:06:39,580
that's being executing or being
executed
91

91

00:06:39,580  -->  00:06:46,090
so if we run the code now back in main
you can see hello from another thread
92

92

00:06:46,090  -->  00:06:50,930
because we set the another thread
instance to set name to another thread
93

93

00:06:50,930  -->  00:06:54,400
there that's doing is we thought it
would it's creating and running the code
94

94

00:06:54,400  -->  00:07:00,050
in that thread so if we close this down but if
we make the common mistake now of
95

95

00:07:00,050  -->  00:07:04,150
calling the run method directly rather
than start method will see something
96

96

00:07:04,150  -->  00:07:08,500
different pop-ups so will change now
on line 14 .start to .run
97

97

00:07:08,500  -->  00:07:16,870
....and then we run it you can see
we've got an entirely different result
98

98

00:07:16,870  -->  00:07:21,310
we've got hello from main so clearly
its now not running in the same thread
99

99

00:07:21,310  -->  00:07:24,740
it's running on the main thread which
the main method is actually running on
100

100

00:07:24,740  -->  00:07:28,270
so that's a very important reason why
you don't want to be calling the run
101

101

00:07:28,270  -->  00:07:32,620
method directly what you want to be
called the start method instead let's
102

102

00:07:32,620  -->  00:07:35,620
change that back now to start
103

103

00:07:36,170  -->  00:07:40,070
run it again and we should see the blue
output is now running which it is on the
104

104

00:07:40,070  -->  00:07:41,210
other thread
105

105

00:07:41,210  -->  00:07:45,230
so now that we know how to create and
start threads let's look at - what else
106

106

00:07:45,230  -->  00:07:49,040
we can do with threads when they're
running now we can ask them to sleep or
107

107

00:07:49,040  -->  00:07:52,940
to stop executing for a specific amount
of time now you might want to do that to
108

108

00:07:52,940  -->  00:07:56,990
give other threads the opportunity to
run and you might also want the thread to
109

109

00:07:56,990  -->  00:07:59,810
do something every time a specific
amount of time has passed
110

110

00:07:59,810  -->  00:08:03,980
for example we might want to write
something to file every 15 seconds or
111

111

00:08:03,980  -->  00:08:07,370
we might want to check for data and
requested every two seconds
112

112

00:08:07,370  -->  00:08:10,850
we might also want to thread to sleep when
we know that it's gotta wait for another
113

113

00:08:10,850  -->  00:08:13,910
thread to do something and we know
that the other thread and only does it
114

114

00:08:13,910  -->  00:08:15,590
every 10 seconds for example
115

115

00:08:15,590  -->  00:08:19,430
so what we could do is put the first
thread to sleep for 10 seconds rather
116

116

00:08:19,430  -->  00:08:22,310
than having it continued to run we know
it's going to be at least ten seconds
117

117

00:08:22,310  -->  00:08:26,690
before it gets any results from the
second thread so that all sounds a
118

118

00:08:26,690  -->  00:08:30,890
little bit like hocus-pocus let's go
back to the another thread and put some
119

119

00:08:30,890  -->  00:08:33,980
code in practice and we going to put
some code in the run method for the another
120

120

00:08:33,980  -->  00:08:39,020
thread so let's add a try block and get
it to sleep for 3 seconds so i'm going to type....
121

121

00:08:39,020  -->  00:08:47,630
....and notice how the input the arguments looking for
122

122

00:08:47,630  -->  00:08:50,690
is in milliseconds so three seconds will
be three thousand milliseconds
123

123

00:08:51,470  -->  00:08:57,080
we need to catch the exception here
which is interrupted exception which the
124

124

00:08:57,080  -->  00:09:01,520
exception we need to catch and we're
using a thread.sleep and i'm going to
125

125

00:09:01,520  -->  00:09:08,360
put that message there...
126

126

00:09:10,140  -->  00:09:16,300
...because that will be
executed if another thread did just that
127

127

00:09:17,550  -->  00:09:21,730
then after that we can put in some
message here to say
128

128

00:09:21,730  -->  00:09:29,640
....
129

129

00:09:30,300  -->  00:09:35,310
ok so you can see we've done their we've
added a try catch and we've got the
130

130

00:09:35,310  -->  00:09:39,220
thread or told the thread to sleep for
three seconds and the exceptionally
131

131

00:09:39,220  -->  00:09:39,930
will only thrown
132

132

00:09:39,930  -->  00:09:44,190
if there are another thread did wake us
up so if that's the case we're printing out a
133

133

00:09:44,190  -->  00:09:47,670
message just to indicate that that
doesn't happen we come down here after
134

134

00:09:47,670  -->  00:09:50,700
three seconds have elapsed to say that
we are now awake
135

135

00:09:50,700  -->  00:09:54,390
so to see this let's just have a look at
main we're gonna run main and just watch
136

136

00:09:54,390  -->  00:10:03,060
the output when we run this you notice that
it printed the initial message and that's
137

137

00:10:03,060  -->  00:10:06,180
because we had the initial message
message going back to our
138

138

00:10:06,180  -->  00:10:09,570
another thread the first message printed
immediately then there was a pause there for
139

139

00:10:09,570  -->  00:10:13,020
three seconds and then it finally came
back and said three seconds have passed
140

140

00:10:13,020  -->  00:10:17,370
and i'm awake and just out of interest
we just go back and have a look
141

141

00:10:17,370  -->  00:10:21,930
where we added the .sleep show that briefly before sleep has
142

142

00:10:21,930  -->  00:10:27,370
got two options their we got the
first method we used was just had a
143

143

00:10:27,370  -->  00:10:31,440
parameter of milliseconds and we use
that for 3,000 but the overloaded method
144

144

00:10:31,440  -->  00:10:36,180
also accepts the milliseconds but
also in nanoseconds so that seconds an
145

145

00:10:36,180  -->  00:10:39,160
hour it's gonna add two together to
determine what the sleeping interval is
146

146

00:10:39,160  -->  00:10:44,110
we want to be a bit more precise in other
words in our case we just used the first
147

147

00:10:44,110  -->  00:10:47,110
method and specify exactly three seconds
or three thousand milliseconds
148

148

00:10:47,670  -->  00:10:51,910
so as i alluded to it's possible
for our thread to wake up prematurely
149

149

00:10:51,910  -->  00:10:55,740
because another thread interrupts 'it
which we talking about in a moment
150

150

00:10:56,350  -->  00:10:59,580
and of course when that happens as i
mentioned the interrupted exception is
151

151

00:10:59,580  -->  00:11:03,750
thrown you know if the thread isn't
interrupted as you saw it woke up after 3
152

152

00:11:03,750  -->  00:11:07,660
seconds and then print the line about
being awake and that worked
153

153

00:11:07,660  -->  00:11:11,860
obviously because at this stage none of
the other threads we created has got
154

154

00:11:11,860  -->  00:11:16,020
got any code that interrupts this thread
and so of course we didn't get the
155

155

00:11:16,020  -->  00:11:17,070
exceptions thrown
156

156

00:11:17,070  -->  00:11:21,030
it's important to note that it is never
guaranteed that the thread will sleep for
157

157

00:11:21,030  -->  00:11:26,280
the interval that was specified it could be
interrupted just as we discussed also the
158

158

00:11:26,280  -->  00:11:30,720
jvm has to call the underlying operating
system to put the thread to sleep and
159

159

00:11:30,720  -->  00:11:35,280
it's possible that the operating system
may not support the granularity that is
160

160

00:11:35,280  -->  00:11:38,580
asking for so for example it may not
support nano seconds
161

161

00:11:38,580  -->  00:11:43,200
so its really operating system dependent
and operating system and JVM
162

162

00:11:43,200  -->  00:11:46,830
independent as to how long it will be
again as you saw there was clearly a
163

163

00:11:46,830  -->  00:11:49,320
delayed their and if i run it again
164

164

00:11:49,320  -->  00:11:52,110
see the first mention is output and we wait
for three seconds and we'll see the
165

165

00:11:52,110  -->  00:11:56,340
second come on the screen after the
three seconds had elapsed
166

166

00:11:56,340  -->  00:12:00,780
so just before we finish this video
let's talk a bit more about interrupts
167

167

00:12:00,780  -->  00:12:05,040
so we interrupt a thread when we
want it to stop what it was doing and to do
168

168

00:12:05,040  -->  00:12:06,120
something else
169

169

00:12:06,120  -->  00:12:09,090
no more often than not when you do that
you need interrupt a thread because we
170

170

00:12:09,090  -->  00:12:10,560
want it to terminate
171

171

00:12:10,560  -->  00:12:14,400
so as an example suppose we've got a
thread that is monitoring a buffer for data
172

172

00:12:14,400  -->  00:12:16,440
that another thread is fetching
173

173

00:12:16,440  -->  00:12:19,890
so when the other thread determines
that there are will never by any more data to
174

174

00:12:19,890  -->  00:12:24,420
fetch for whatever reason we can interrupt
the monitoring thread and then it will
175

175

00:12:24,420  -->  00:12:25,350
terminate
176

176

00:12:25,350  -->  00:12:29,070
so there's two ways for threads to
notice that they've been interrupted the
177

177

00:12:29,070  -->  00:12:32,040
first ways to catch the
interrupted exception and we're at the
178

178

00:12:32,040  -->  00:12:36,570
code for that in the run method for the
another thread class we saw that will
179

179

00:12:36,570  -->  00:12:40,830
be throw within the sleep method there
when the run method doesn't call any
180

180

00:12:40,830  -->  00:12:44,730
methods that thorwn interrupted exception
it should call the interrupted method
181

181

00:12:44,730  -->  00:12:49,200
periodically to check whether it's been
interrupted and that method will return true when
182

182

00:12:49,200  -->  00:12:54,330
another thread has interrupted it or has
interrupted it but how does one thread
183

183

00:12:54,330  -->  00:12:58,350
interrupt another when it calls the
interrupt method on the thread instance
184

184

00:12:58,350  -->  00:13:00,030
that it wants to interrupt
185

185

00:13:00,030  -->  00:13:03,300
now of course that means that it will need
a reference to the thread instance to be
186

186

00:13:03,300  -->  00:13:06,660
able to do that to be able to call the
interrupt method on the other thread so
187

187

00:13:06,660  -->  00:13:09,000
we're gonna end the video here in the next
video what we're going to do is we're
188

188

00:13:09,000  -->  00:13:10,700
gonna modify our code to have
189

189

00:13:10,700  -->  00:13:14,540
one of our other threads interrupt the
another thread instance when it's
190

190

00:13:14,540  -->  00:13:16,790
sleeping just to see how that works
191

191

00:13:16,790  -->  00:13:18,650
so let's work on that in the next video
