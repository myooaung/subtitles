WEBVTT
1
1

00:00:05.660  -->  00:00:08.400
- [Tim] All right, so let's
now code the copy case.
2

2

00:00:08.400  -->  00:00:11.360
What we're going to try and
do here is copy everything
3

3

00:00:11.360  -->  00:00:14.530
in the Dir2 folder to a Dir2 directory
4

4

00:00:15.490  -->  00:00:18.180
that's within the Dir4 directory.
5

5

00:00:18.180  -->  00:00:19.600
So to do this, we wanna override
6

6

00:00:19.600  -->  00:00:23.110
the VisitFile method, the
visitFileFailed method
7

7

00:00:23.110  -->  00:00:25.390
and the preVisitDirectory methods.
8

8

00:00:25.390  -->  00:00:28.240
Now the visitFileFailed
method will be the same
9

9

00:00:28.240  -->  00:00:30.520
as it is for the print example.
10

10

00:00:30.520  -->  00:00:34.690
Alright, so let's start
creating a new class for this.
11

11

00:00:35.650  -->  00:00:38.150
We'll call this one CopyFiles.
12

12

00:00:41.250  -->  00:00:43.990
Okay, we're going to extend
simple file visitor again,
13

13

00:00:43.990  -->  00:00:48.160
so extends SimpleFileVisitor=Path,
accept that import.
14

14

00:00:55.780  -->  00:00:59.280
Alright we start with the visitFileFailed,
15

15

00:01:02.360  -->  00:01:05.530
and for that one we're
just going to pint out
16

16

00:01:05.530  -->  00:01:09.280
Error accessing file
plus file.toAbsolutePath
17

17

00:01:13.060  -->  00:01:15.640
plus a space plus e.getMessage.
18

18

00:01:17.170  -->  00:01:20.540
And then we'll return
continue which will be
19

19

00:01:20.540  -->  00:01:22.630
FileVisitResult.CONTINUE.
20

20

00:01:23.710  -->  00:01:26.600
Alright, so that's our
visitFileFailed method,
21

21

00:01:26.600  -->  00:01:30.310
nothing new there, we now add
the preVisitDirectory method,
22

22

00:01:30.310  -->  00:01:34.010
or override that, so let's do that.
23

23

00:01:34.010  -->  00:01:38.690
preVisitDirectory, now in
order to figure out the path
24

24

00:01:38.690  -->  00:01:42.920
for the CopyFile, we're going
to use path.reletivize method,
25

25

00:01:42.920  -->  00:01:46.100
now this method constructs a relative path
26

26

00:01:46.100  -->  00:01:48.990
that resolves to a given path, for example
27

27

00:01:48.990  -->  00:01:53.310
with a path to relativize
against is c:\path1
28

28

00:01:53.310  -->  00:01:57.480
and the given path is
c:\path1\path2\path3,
29

29

00:01:59.700  -->  00:02:03.870
then the relativized path
would be \path2\path3
30

30

00:02:04.800  -->  00:02:08.830
which is the given path
relative to c:\path1
31

31

00:02:08.830  -->  00:02:10.620
if that makes sense.
32

32

00:02:10.620  -->  00:02:12.770
So once we've got the relative path,
33

33

00:02:12.770  -->  00:02:14.640
we then need to resolve it against
34

34

00:02:14.640  -->  00:02:17.240
the copied directories location by calling
35

35

00:02:17.240  -->  00:02:20.210
the path.resolve method and that will turn
36

36

00:02:20.210  -->  00:02:23.310
the relative path we got
from the relativize method
37

37

00:02:23.310  -->  00:02:26.320
into the full path for the copied file.
38

38

00:02:26.320  -->  00:02:29.260
Now what I said there may have
sounded like gobbledygook,
39

39

00:02:29.260  -->  00:02:31.860
so let's actually look
at a concrete example.
40

40

00:02:31.860  -->  00:02:34.060
Now one of the files
that's gonna be copied
41

41

00:02:34.060  -->  00:02:37.730
is located over here in the FileTree,
42

42

00:02:37.730  -->  00:02:41.390
Dir2, in the Dir3
subfolder, it's file1.txt.
43

43

00:02:43.510  -->  00:02:47.550
Now this file is gonna be
copied into the FileTree,
44

44

00:02:47.550  -->  00:02:50.540
into the Dir4 folder and
it's gonna be a subfolder
45

45

00:02:50.540  -->  00:02:53.070
called Dir2Copy then we're going to have
46

46

00:02:53.070  -->  00:02:55.470
a subfolder of that called Dir3
47

47

00:02:55.470  -->  00:02:57.100
and then that will be File1.txt,
48

48

00:02:57.100  -->  00:03:00.240
so that automatically is
gonna be the destination path.
49

49

00:03:00.240  -->  00:03:05.080
So the root of the source
path is the FileTree, Dir2,
50

50

00:03:05.080  -->  00:03:06.800
that's where we're starting and the root
51

51

00:03:06.800  -->  00:03:09.500
of the destination path is going to be
52

52

00:03:09.500  -->  00:03:13.660
the FileTree, Dir4 and it's
going to be the Dir2Copy folder
53

53

00:03:15.120  -->  00:03:17.290
which at the moment doesn't exist.
54

54

00:03:17.290  -->  00:03:18.750
So the relative path of the file in both
55

55

00:03:18.750  -->  00:03:22.820
the source and destination
roots will be Dir3,
56

56

00:03:22.820  -->  00:03:27.060
the subfolder, subdirectory \file1.txt.
57

57

00:03:27.060  -->  00:03:29.380
So you call the relativized method to get
58

58

00:03:29.380  -->  00:03:32.440
the relative path to the source root.
59

59

00:03:32.440  -->  00:03:34.030
And you can see I've got
an example on the screen,
60

60

00:03:34.030  -->  00:03:37.740
they're now for Windows to
how show you the extra paths,
61

61

00:03:37.740  -->  00:03:40.140
the various paths, now when doing a copy,
62

62

00:03:40.140  -->  00:03:42.750
this would also be equal
to the relative path
63

63

00:03:42.750  -->  00:03:46.290
in the destination root, so
you then call the result method
64

64

00:03:46.290  -->  00:03:49.880
to get the full path of a copy location.
65

65

00:03:49.880  -->  00:03:51.920
So basically the steps as
you can see on the screen
66

66

00:03:51.920  -->  00:03:54.730
as follows is the sourcePath
as you can see there
67

67

00:03:54.730  -->  00:03:58.900
FileTree\Dir2\Dir3\file1.txt
and you can see
68

68

00:04:00.700  -->  00:04:05.230
the sourceRoot then is going
to be the FileTree\Dir2,
69

69

00:04:05.230  -->  00:04:07.390
the targetRoot which
we've talked about will be
70

70

00:04:07.390  -->  00:04:11.560
FileTree\Dir4\Dir2Copy and
Dir2Copy will be a new folder,
71

71

00:04:13.790  -->  00:04:15.620
the relativizedPath will be
72

72

00:04:15.620  -->  00:04:19.080
sourceRoot.relativize(sourcePath)
so that will be
73

73

00:04:19.080  -->  00:04:21.280
the call to actually get that path,
74

74

00:04:21.280  -->  00:04:24.700
so that will give us Dir3\file1.txt
75

75

00:04:24.700  -->  00:04:26.540
and the resolvedPathforCopy is gonna be
76

76

00:04:26.540  -->  00:04:30.610
the targetRoot.resolve(relativizedPath)
77

77

00:04:30.610  -->  00:04:32.100
and you can see there the path
78

78

00:04:32.100  -->  00:04:36.270
is gonna be
FileTree\Dir4\Dir2Copy\Dir3\file1.txt.
79

79

00:04:40.100  -->  00:04:42.570
So hopefully that's clearer
now, but we're essentially
80

80

00:04:42.570  -->  00:04:46.030
figuring out the relative
path to the sourceRoot
81

81

00:04:46.030  -->  00:04:48.380
and then appending it to the targetRoot,
82

82

00:04:48.380  -->  00:04:50.140
because when doing a
copy the relative path
83

83

00:04:50.140  -->  00:04:54.490
to both the source and target
roots will be the same.
84

84

00:04:54.490  -->  00:04:57.420
You actually may have noticed
you need the sourceRoot path
85

85

00:04:57.420  -->  00:05:00.060
and destination root path
to figure out the path
86

86

00:05:00.060  -->  00:05:02.950
for the copy, but the
preVisitDirectory method
87

87

00:05:02.950  -->  00:05:05.100
and the VisitFile methods are only passed
88

88

00:05:05.100  -->  00:05:08.800
a reference to the directory
or file that's being visited.
89

89

00:05:08.800  -->  00:05:11.780
So you have to save the
source and destination roots
90

90

00:05:11.780  -->  00:05:14.990
as instance variables
in the CopyFiles class
91

91

00:05:14.990  -->  00:05:16.820
so consequently we're
gonna add those fields
92

92

00:05:16.820  -->  00:05:20.210
in the Constructor to handle that.
93

93

00:05:20.210  -->  00:05:23.710
Alright, so we want a firstly private Path
94

94

00:05:25.510  -->  00:05:29.680
that's gonna be sourceRoot
and private Path targetRoot.
95

95

00:05:33.040  -->  00:05:36.290
Let's create a Constructor
and the constructor's
96

96

00:05:36.290  -->  00:05:39.580
going to accept both the
source and the target
97

97

00:05:39.580  -->  00:05:42.550
and assign the fields or assign
the parameters I should say
98

98

00:05:42.550  -->  00:05:45.520
to the Constructor, to
the appropriate fields.
99

99

00:05:45.520  -->  00:05:47.270
So now that we've done that, we can the
100

100

00:05:47.270  -->  00:05:49.630
preVisitDirectory method
to get this working
101

101

00:05:49.630  -->  00:05:52.730
and that will include some
printlns in there as well.
102

102

00:05:52.730  -->  00:05:55.570
So we started work on
the preVisitDirectory
103

103

00:05:55.570  -->  00:05:57.120
or we overrode it at
least, but let's actually
104

104

00:05:57.120  -->  00:05:59.280
write the code now.
105

105

00:05:59.280  -->  00:06:01.950
We're gonna start by typing Path
106

106

00:06:02.940  -->  00:06:07.110
that's relativizedPath
= sourceRoot.relativize,
107

107

00:06:11.150  -->  00:06:14.460
that's gonna be dir, then we're gonna do,
108

108

00:06:14.460  -->  00:06:15.590
we're just gonna print out for that
109

109

00:06:15.590  -->  00:06:16.710
so we can see what's happening,
110

110

00:06:16.710  -->  00:06:20.630
so RelativizedPath = plus relativizedPath.
111

111

00:06:23.880  -->  00:06:25.420
Next we wanna do the copyDirectory,
112

112

00:06:25.420  -->  00:06:29.250
so it's path copyDir = targetRoot.resolve
113

113

00:06:32.090  -->  00:06:35.110
and it's gonna be relativizedPath
114

114

00:06:35.110  -->  00:06:36.170
and let's just print that out as well,
115

115

00:06:36.170  -->  00:06:40.760
so it's gonna be Resolved path for copy =
116

116

00:06:40.760  -->  00:06:43.260
plus copyDirectory or copyDir,
117

117

00:06:44.110  -->  00:06:46.390
let's add a try to this
now and we're gonna do
118

118

00:06:46.390  -->  00:06:48.890
Files.copydir and then copyDir
119

119

00:06:52.990  -->  00:06:57.150
and we have to catch an
IOException if there is one
120

120

00:06:59.250  -->  00:07:01.540
and the code of that we're just
gonna print out the message
121

121

00:07:01.540  -->  00:07:05.120
e.getMessage for the exception
and then we'll return
122

122

00:07:05.120  -->  00:07:07.870
if that does happen SKIP_SUBTREE.
123

123

00:07:10.660  -->  00:07:14.830
Assuming we get past that,
we're gonna return continue,
124

124

00:07:15.670  -->  00:07:18.980
which will be FileVisitResult.CONTINUE.
125

125

00:07:18.980  -->  00:07:20.600
Alright, so you get the
relative path or we're getting
126

126

00:07:20.600  -->  00:07:23.660
the relative path to
the sourceRoot using the
127

127

00:07:23.660  -->  00:07:27.740
relativized or relativize
method here at line 32.
128

128

00:07:28.830  -->  00:07:31.610
Then we're calling the
result method to get the path
129

129

00:07:31.610  -->  00:07:35.880
for the copy, this is
on line 34, after that
130

130

00:07:35.880  -->  00:07:39.870
we call in the copy method
to make the copy, line 38,
131

131

00:07:39.870  -->  00:07:41.630
and if an exception occurs as you saw,
132

132

00:07:41.630  -->  00:07:43.670
we're gonna skip the subtree by returning
133

133

00:07:43.670  -->  00:07:47.010
FileVisitResult.SKIP_SUBTREE
and that means
134

134

00:07:47.010  -->  00:07:50.020
that you stop processing
entries for that directory.
135

135

00:07:50.020  -->  00:07:52.350
Alright so that's the
preVisitDirectory method,
136

136

00:07:52.350  -->  00:07:54.530
overridden and working,
we'll hope it'll work
137

137

00:07:54.530  -->  00:07:58.700
when we test it, let's now
override the visitFile method.
138

138

00:08:01.590  -->  00:08:03.860
So for this one, just as with directories,
139

139

00:08:03.860  -->  00:08:06.220
we're gonna use the
relativize and result methods
140

140

00:08:06.220  -->  00:08:08.580
to figure out the path
for the copied file.
141

141

00:08:08.580  -->  00:08:11.200
And once we've go the
resolved destinationPath
142

142

00:08:11.200  -->  00:08:15.230
we can call the copy method
to do the actual copy.
143

143

00:08:15.230  -->  00:08:18.480
And it's probably just as
quick if I just delete that
144

144

00:08:18.480  -->  00:08:21.820
and copy this code from
the preVisitDirectory
145

145

00:08:21.820  -->  00:08:24.100
and just change a few things rather than
146

146

00:08:24.100  -->  00:08:27.280
just typing all that again,
so let's go ahead and do that.
147

147

00:08:27.280  -->  00:08:30.080
We do need to change a few
things as I mentioned here.
148

148

00:08:30.080  -->  00:08:31.760
For starters, we're
gonna change instead of
149

149

00:08:31.760  -->  00:08:36.000
this being directory,
we'll make that file,
150

150

00:08:36.000  -->  00:08:38.160
this will be file as well.
151

151

00:08:40.830  -->  00:08:43.560
In the case of an exception
what we're going to do
152

152

00:08:43.560  -->  00:08:45.930
is just print out the exception,
153

153

00:08:45.930  -->  00:08:49.510
we're not gonna return
anything at that point.
154

154

00:08:49.510  -->  00:08:51.170
But we will return a continue down here
155

155

00:08:51.170  -->  00:08:52.520
once the method is finished.
156

156

00:08:52.520  -->  00:08:56.590
So very similar as I mentioned
to the preVisitDirectory,
157

157

00:08:56.590  -->  00:08:58.630
we're using the relativize
method and the result methods
158

158

00:08:58.630  -->  00:09:01.380
to figure out the path for the copied file
159

159

00:09:01.380  -->  00:09:03.860
and once we've got the
result destination path,
160

160

00:09:03.860  -->  00:09:06.860
we call in the copy method,
you can there on line 55
161

161

00:09:06.860  -->  00:09:09.790
to do the actual copying and fluff.
162

162

00:09:09.790  -->  00:09:12.930
Alright so at this point now,
we need to kick off the copy
163

163

00:09:12.930  -->  00:09:15.410
in the same way we did when
we printed the FileTree
164

164

00:09:15.410  -->  00:09:20.290
in the previous video, so let's
go back to the main method.
165

165

00:09:20.290  -->  00:09:24.890
And we come down here and let's
print out a message first.
166

166

00:09:24.890  -->  00:09:29.050
And we'll go Copy Dir2 to Dir4/Dir2Copy,
167

167

00:09:31.970  -->  00:09:33.840
so we know what's going on.
168

168

00:09:33.840  -->  00:09:38.010
And Path copyPath =
FileSystems.getDefault().getPath
169

169

00:09:44.720  -->  00:09:48.880
and the path is gonna be
FileTree plus File.separator
170

170

00:09:50.460  -->  00:09:53.070
we'll do that so we can
do this across platform
171

171

00:09:53.070  -->  00:09:55.400
plus it's gonna be Dir4 plus
172

172

00:09:57.040  -->  00:09:58.470
and we'll do the separator again,
173

173

00:09:58.470  -->  00:10:02.750
File.separator plus and the
folder name is gonna be,
174

174

00:10:02.750  -->  00:10:05.340
or the directory name Dir2Copy.
175

175

00:10:06.740  -->  00:10:09.760
So basically the path that
we're gonna be copying to
176

176

00:10:09.760  -->  00:10:13.930
is going to be FileTree/Dir4/Dir2Copy
177

177

00:10:16.450  -->  00:10:18.330
and obviously backslashes
if you're on windows.
178

178

00:10:18.330  -->  00:10:20.610
But by using the File.separator we can
179

179

00:10:20.610  -->  00:10:23.130
get this working for both platforms.
180

180

00:10:23.130  -->  00:10:25.690
Alright, so that's the path
that we're gonna be copying to
181

181

00:10:25.690  -->  00:10:29.860
so let's actually invoke some
code, so what we'll try here
182

182

00:10:30.860  -->  00:10:33.310
and we'll put a catch in
there for any IOExceptions
183

183

00:10:33.310  -->  00:10:35.810
that might be raised or thrown
184

184

00:10:36.740  -->  00:10:38.370
and we'll print out e.getMessage
185

185

00:10:38.370  -->  00:10:40.940
if we find there is an exception,
186

186

00:10:40.940  -->  00:10:42.420
then the actual code itself is gonna be
187

187

00:10:42.420  -->  00:10:46.580
Files.walkFileTree(dir2Path) and dir2Path
188

188

00:10:52.040  -->  00:10:55.330
is still assigned from line
57 which is our source folder
189

189

00:10:55.330  -->  00:10:59.410
and then we're going to do new CopyFiles
190

190

00:10:59.410  -->  00:11:01.500
and then we're going to do dir2Path again,
191

191

00:11:01.500  -->  00:11:06.140
which is our source and the
destination which is copyPath.
192

192

00:11:06.140  -->  00:11:07.830
And that should be it.
193

193

00:11:07.830  -->  00:11:11.460
Okay looking at Dir4 at the
moment, there is no Dir2Copy.
194

194

00:11:11.460  -->  00:11:15.620
So let's actually try running
this and see if it works.
195

195

00:11:20.450  -->  00:11:24.200
Okay so you can see that the
Dir2Copy directory has appeared
196

196

00:11:24.200  -->  00:11:26.240
if you open that up and
have a look you can see
197

197

00:11:26.240  -->  00:11:29.950
there's a Dir3 folder in the
Dir2Copy, we open that up
198

198

00:11:29.950  -->  00:11:34.480
there's file1 and file2 and
also file1, 2 and 3 as well
199

199

00:11:34.480  -->  00:11:36.850
still sitting there in the Dir subfolder,
200

200

00:11:36.850  -->  00:11:38.340
we can close that down and see that
201

201

00:11:38.340  -->  00:11:40.670
that seems to work quite nicely.
202

202

00:11:40.670  -->  00:11:43.400
So looking back at our path, we had Dir2,
203

203

00:11:43.400  -->  00:11:47.570
we had a Dir3 folder, we
had file1.txt, file2,txt,
204

204

00:11:48.980  -->  00:11:51.960
file3.dat that was in the Dir2 folder,
205

205

00:11:51.960  -->  00:11:56.930
then in the Dir3 subfolder
we had file1 and file2.txt
206

206

00:11:56.930  -->  00:11:58.150
so we can see we've got a mirror copy
207

207

00:11:58.150  -->  00:12:02.320
or mirror image of that in
our Dir4\Dir2Copy folder
208

208

00:12:03.860  -->  00:12:07.030
and the Dir3 folder has
also got those two files.
209

209

00:12:07.030  -->  00:12:09.560
So that's pretty cool, we've
been able to actually copy
210

210

00:12:09.560  -->  00:12:13.140
that entire tree now, now
in a real world application
211

211

00:12:13.140  -->  00:12:15.300
you'd probably want to beef up the code
212

212

00:12:15.300  -->  00:12:17.100
to handle situations for example
213

213

00:12:17.100  -->  00:12:20.930
like the destination file or
directory already existing.
214

214

00:12:20.930  -->  00:12:23.160
What you could do perhaps
is prompt the user
215

215

00:12:23.160  -->  00:12:26.270
and ask whether the existing
file should be overwritten,
216

216

00:12:26.270  -->  00:12:29.200
for directories you'd then have
to decide if it was an error
217

217

00:12:29.200  -->  00:12:32.100
when the directory you're
copying to already exists.
218

218

00:12:32.100  -->  00:12:33.790
In addition you can pass more parameters
219

219

00:12:33.790  -->  00:12:37.150
to the copy method to
specify what should happen
220

220

00:12:37.150  -->  00:12:39.430
if the destination path already exists.
221

221

00:12:39.430  -->  00:12:41.020
So you have to consider
all these scenarios
222

222

00:12:41.020  -->  00:12:42.770
in a real world app.
223

223

00:12:42.770  -->  00:12:44.480
Alright so you've learned
quite a lot about using
224

224

00:12:44.480  -->  00:12:47.450
Java.NIO with the file system.
225

225

00:12:47.450  -->  00:12:49.250
Alright, so let's finish the video here,
226

226

00:12:49.250  -->  00:12:51.210
in the next video we're
gonna actually start talking
227

227

00:12:51.210  -->  00:12:54.810
a little bit about mapping
common Java.IO operations
228

228

00:12:54.810  -->  00:12:58.060
to Java.NIO, see you in the next video.
