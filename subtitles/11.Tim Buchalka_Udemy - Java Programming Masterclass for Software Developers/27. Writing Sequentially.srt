1
1

00:00:05,860  -->  00:00:07,520
- [Tim] All right, so at
the end of the last video
2

2

00:00:07,520  -->  00:00:09,480
we finished off consolidating this code
3

3

00:00:09,480  -->  00:00:11,190
to make it a bit more streamlined.
4

4

00:00:11,190  -->  00:00:13,330
And then we went through setting it up
5

5

00:00:13,330  -->  00:00:15,790
and reading the information back.
6

6

00:00:15,790  -->  00:00:19,090
But let's actually try
reading the integers back
7

7

00:00:19,090  -->  00:00:21,720
in the reverse order that we wrote them.
8

8

00:00:21,720  -->  00:00:24,600
So in other words you wanna
read the thousand first
9

9

00:00:24,600  -->  00:00:26,980
followed by negative 98765.
10

10

00:00:26,980  -->  00:00:28,640
And then followed by
245 so you can see here,
11

11

00:00:28,640  -->  00:00:30,500
it's obviously the reverse.
12

12

00:00:30,500  -->  00:00:32,440
Now if you're feeling ambitious,
13

13

00:00:32,440  -->  00:00:34,460
you can try this you
solve as a mini challenge.
14

14

00:00:34,460  -->  00:00:36,230
That being the case, pause the video now
15

15

00:00:36,230  -->  00:00:38,200
and give it a go and see
if you can figure out
16

16

00:00:38,200  -->  00:00:41,390
how to actually read
the integers in reverse.
17

17

00:00:41,390  -->  00:00:42,870
So pause the video now
if you're gonna do that.
18

18

00:00:42,870  -->  00:00:45,990
Otherwise, we'll continue on now.
19

19

00:00:45,990  -->  00:00:47,530
What we're going to do
is we're going to use
20

20

00:00:47,530  -->  00:00:50,460
the channels position method
to set the far position
21

21

00:00:50,460  -->  00:00:51,980
before each read.
22

22

00:00:51,980  -->  00:00:54,290
And remember that you also
need to call the flip method
23

23

00:00:54,290  -->  00:00:55,880
when you have to as well
24

24

00:00:55,880  -->  00:00:58,090
for that to be able to work.
25

25

00:00:58,090  -->  00:00:59,330
All right, so let's look at the code
26

26

00:00:59,330  -->  00:01:01,970
to read things in reverse order.
27

27

00:01:01,970  -->  00:01:03,590
So I'll come up here.
28

28

00:01:03,590  -->  00:01:04,960
We're going to leave the,
29

29

00:01:04,960  -->  00:01:06,530
actually what we're gonna do,
30

30

00:01:06,530  -->  00:01:07,550
it'll take a bit longer
31

31

00:01:07,550  -->  00:01:11,710
but let's actually just comment
out this code all together.
32

32

00:01:13,920  -->  00:01:16,990
So we've got our channel defined.
33

33

00:01:16,990  -->  00:01:19,670
We're going to create our byteBuffer.
34

34

00:01:19,670  -->  00:01:23,050
Call up the readBuffer is equal to
35

35

00:01:23,050  -->  00:01:26,730
it's going to be byteBuffer.allocate.
36

36

00:01:26,730  -->  00:01:28,380
And we just need enough for an integer.
37

37

00:01:28,380  -->  00:01:29,790
So integer.bytes.
38

38

00:01:33,230  -->  00:01:35,330
Channel.position.
39

39

00:01:35,330  -->  00:01:37,720
We want to start without int3Pos
40

40

00:01:37,720  -->  00:01:39,470
'cause it's the last number.
41

41

00:01:39,470  -->  00:01:40,830
You're reading backwards.
42

42

00:01:40,830  -->  00:01:42,190
And I'll just put this up
so you can see the code
43

43

00:01:42,190  -->  00:01:43,690
that we wrote out.
44

44

00:01:45,040  -->  00:01:46,330
So were' starting at int three position
45

45

00:01:46,330  -->  00:01:48,150
which we calculated in the previous video
46

46

00:01:48,150  -->  00:01:51,960
as being the location
for the third integer.
47

47

00:01:51,960  -->  00:01:52,970
Then we wanna do a read.
48

48

00:01:52,970  -->  00:01:55,310
So channel.read, readBuffer.
49

49

00:01:58,470  -->  00:02:01,550
Then we need to know readBuffer.flip.
50

50

00:02:05,070  -->  00:02:06,930
Then just to confirm
it, we'll print it out.
51

51

00:02:06,930  -->  00:02:10,930
So we'll try int3 equals
plus readBuffer.getint.
52

52

00:02:16,240  -->  00:02:17,660
All right, so we'll continue on.
53

53

00:02:17,660  -->  00:02:20,720
So we'll do readBuffer.flip again.
54

54

00:02:20,720  -->  00:02:23,290
Then we're gonna do a channel.position.
55

55

00:02:23,290  -->  00:02:25,870
This time no surprises int2Pos.
56

56

00:02:27,980  -->  00:02:31,810
Then we're going to read
that into our buffer.
57

57

00:02:32,840  -->  00:02:35,460
Buffer, and we're gonna do a flip
58

58

00:02:35,460  -->  00:02:38,290
so readBuffer.flip after the read.
59

59

00:02:40,810  -->  00:02:41,670
And we'll print it out.
60

60

00:02:41,670  -->  00:02:44,140
So it's going to be int2
61

61

00:02:44,140  -->  00:02:47,560
is equal to plus readBuffer.getint again.
62

62

00:02:49,030  -->  00:02:50,040
Then we need to,
63

63

00:02:50,040  -->  00:02:52,080
well I'll just pull this
guy up a little bit now.
64

64

00:02:52,080  -->  00:02:53,080
Read buffer.
65

65

00:02:55,250  -->  00:02:57,110
Top position.
66

66

00:02:57,110  -->  00:02:59,700
And that's going to be int1Pos.
67

67

00:03:00,850  -->  00:03:03,600
Then we can do a readBuffer.flip.
68

68

00:03:07,820  -->  00:03:10,990
Now of course that should be channel.
69

69

00:03:10,990  -->  00:03:13,290
So I readBuffer.flip again.
70

70

00:03:13,290  -->  00:03:14,790
Then channel.read.
71

71

00:03:16,880  -->  00:03:17,790
ReadBuffer.
72

72

00:03:20,650  -->  00:03:21,980
ReadBuffer.flip.
73

73

00:03:23,580  -->  00:03:26,860
And then let's print out the last one.
74

74

00:03:26,860  -->  00:03:29,770
Int1 equals plus readBuffer.getint.
75

75

00:03:34,240  -->  00:03:36,880
All right, so that's ultimately the code.
76

76

00:03:36,880  -->  00:03:39,520
So for each integer, we're first
calling the position method
77

77

00:03:39,520  -->  00:03:42,210
to specify the start position in the file.
78

78

00:03:42,210  -->  00:03:44,850
And we then call the read
method with the buffer.
79

79

00:03:44,850  -->  00:03:47,130
Now if you want to write
the result to the console
80

80

00:03:47,130  -->  00:03:49,560
as this code is doing,
you have to then call flip
81

81

00:03:49,560  -->  00:03:51,900
before calling the get method.
82

82

00:03:51,900  -->  00:03:53,670
And also after writing the value,
83

83

00:03:53,670  -->  00:03:56,410
you have to call flip again
before reading the next integer
84

84

00:03:56,410  -->  00:03:57,780
into the buffer.
85

85

00:03:57,780  -->  00:04:00,920
We then repeat that process
for all three integers.
86

86

00:04:00,920  -->  00:04:03,670
So we can actually just run that.
87

87

00:04:06,990  -->  00:04:09,080
We've got the integers returning
in the right order there
88

88

00:04:09,080  -->  00:04:12,330
from the last one int3 through to int1.
89

89

00:04:13,340  -->  00:04:14,760
So just to clarify.
90

90

00:04:14,760  -->  00:04:16,530
I'm just going to make
a bit more space here,
91

91

00:04:16,530  -->  00:04:17,860
try to be more clear.
92

92

00:04:17,860  -->  00:04:20,540
So we're doing a flip before the printout.
93

93

00:04:20,540  -->  00:04:22,940
Which we're doing in all three cases here.
94

94

00:04:22,940  -->  00:04:25,900
Then we're doing, before
we're doing a channel.position
95

95

00:04:25,900  -->  00:04:27,590
to go to the relevant position
96

96

00:04:27,590  -->  00:04:28,940
and we're reading it into the buffer.
97

97

00:04:28,940  -->  00:04:31,640
We're doing a flip after
reading it from the buffer.
98

98

00:04:31,640  -->  00:04:33,790
So technically there's an extra flip here
99

99

00:04:33,790  -->  00:04:36,270
with the channel.position from int1.
100

100

00:04:36,270  -->  00:04:39,140
So we could probably remove that.
101

101

00:04:39,140  -->  00:04:40,410
Maybe consistent with our code
102

102

00:04:40,410  -->  00:04:42,840
and do it exactly what same each time.
103

103

00:04:42,840  -->  00:04:46,420
And also I haven't got a readBuffer.flip
104

104

00:04:46,420  -->  00:04:49,580
after the printout here from the int2.
105

105

00:04:50,990  -->  00:04:52,120
But it would be good to be consistent
106

106

00:04:52,120  -->  00:04:53,700
to do that as well.
107

107

00:04:57,910  -->  00:04:58,990
So basically,
108

108

00:05:00,280  -->  00:05:03,280
(keyboard clacking)
109

109

00:05:05,820  -->  00:05:06,830
Oh sorry, sorry.
110

110

00:05:06,830  -->  00:05:10,370
Again we just run it to make
sure that's going to work.
111

111

00:05:10,370  -->  00:05:12,960
And we still get our same results.
112

112

00:05:12,960  -->  00:05:15,170
Now when reading in a random manner,
113

113

00:05:15,170  -->  00:05:17,640
probably you would
normally create a buffer
114

114

00:05:17,640  -->  00:05:19,950
for each read that matches
the size of the data.
115

115

00:05:19,950  -->  00:05:21,440
So for example, let's think back
116

116

00:05:21,440  -->  00:05:23,600
to the adventure application.
117

117

00:05:23,600  -->  00:05:25,600
Now if we wanted to use java.nio
118

118

00:05:25,600  -->  00:05:28,110
to load a location on demand,
119

119

00:05:28,110  -->  00:05:30,530
then we already know the
link that the location record
120

120

00:05:30,530  -->  00:05:32,040
from the index.
121

121

00:05:32,040  -->  00:05:34,630
So therefore for each read,
we'd create a new buffer
122

122

00:05:34,630  -->  00:05:36,620
of that exact link.
123

123

00:05:36,620  -->  00:05:38,440
Now you might think it'd be more efficient
124

124

00:05:38,440  -->  00:05:40,250
to create a buffer that's long enough
125

125

00:05:40,250  -->  00:05:42,300
or large enough to hold
the longest location record
126

126

00:05:42,300  -->  00:05:43,830
and reuse it.
127

127

00:05:43,830  -->  00:05:46,330
But you may never need to
load the longest record.
128

128

00:05:46,330  -->  00:05:49,070
And Java's garbage
collector will take care
129

129

00:05:49,070  -->  00:05:50,830
of the buffers you're creating.
130

130

00:05:50,830  -->  00:05:53,100
So they won't actually clog up memory.
131

131

00:05:53,100  -->  00:05:54,170
So now that we've done this,
132

132

00:05:54,170  -->  00:05:56,890
now let's write data in a random fashion.
133

133

00:05:56,890  -->  00:05:58,770
So instead of writing it sequentially,
134

134

00:05:58,770  -->  00:06:00,340
we're gonna write all the integers first
135

135

00:06:00,340  -->  00:06:02,820
into the same position as
they've always occupied
136

136

00:06:02,820  -->  00:06:05,290
and then the two strings.
137

137

00:06:05,290  -->  00:06:06,390
So let's have a look at the code
138

138

00:06:06,390  -->  00:06:08,610
and how about to go about doing that.
139

139

00:06:08,610  -->  00:06:10,920
And I'm going to leave the
code that I've got in there
140

140

00:06:10,920  -->  00:06:12,720
for reading integers as is.
141

141

00:06:12,720  -->  00:06:14,770
But you can comment
that out if you want to.
142

142

00:06:14,770  -->  00:06:19,230
And actually I might just
delete this other code here now.
143

143

00:06:19,230  -->  00:06:20,260
All right.
144

144

00:06:20,260  -->  00:06:21,250
So let's start this.
145

145

00:06:21,250  -->  00:06:23,690
We're gonna start with
a byte, a byte array.
146

146

00:06:23,690  -->  00:06:25,860
I put string equals hello.
147

147

00:06:30,690  -->  00:06:32,550
What I'll actually do just
to save a bit of time.
148

148

00:06:32,550  -->  00:06:34,860
Let me just grab this again.
149

149

00:06:34,860  -->  00:06:36,610
So I'll just start again,
I think that'll be quicker.
150

150

00:06:36,610  -->  00:06:38,610
So hello world.Getbytes.
151

151

00:06:41,880  -->  00:06:44,150
Then we wanna start with long.
152

152

00:06:44,150  -->  00:06:46,560
str1Pos, string one position.
153

153

00:06:47,680  -->  00:06:49,450
Make that equal to zero.
154

154

00:06:49,450  -->  00:06:52,240
Long equal int1Pos equals,
155

155

00:06:52,240  -->  00:06:55,080
it's gonna be outputString.length.
156

156

00:06:56,510  -->  00:06:58,010
Then long int2Pos.
157

157

00:06:59,430  -->  00:07:02,930
We'll call this newint1Pos and newint2Pos.
158

158

00:07:08,270  -->  00:07:11,770
That equals newint1Pos plus integer.bytes.
159

159

00:07:16,480  -->  00:07:20,590
Then we want byte, it's
gonna be outputString2,
160

160

00:07:20,590  -->  00:07:22,390
byte array, that is.
161

161

00:07:22,390  -->  00:07:26,230
And that's equal to nice
to meet you.getbytes.
162

162

00:07:28,640  -->  00:07:32,140
So we have long, str2Pos equals newint2Pos
163

163

00:07:35,760  -->  00:07:37,350
plus integer.bytes.
164

164

00:07:39,870  -->  00:07:42,370
Then we've got long newint3Pos
165

165

00:07:43,350  -->  00:07:47,190
is equal to str2Pos plus
outputstring2.length.
166

166

00:07:53,280  -->  00:07:55,130
All right, so that's our start.
167

167

00:07:55,130  -->  00:07:57,180
And I'll just move this up.
168

168

00:07:57,180  -->  00:07:58,500
Then we're gonna create a byte buffer.
169

169

00:07:58,500  -->  00:08:02,670
ByteBuffer intbuffer is
equal to bytebuffer.allocate.
170

170

00:08:05,810  -->  00:08:08,480
And we start with integer.bytes.
171

171

00:08:09,610  -->  00:08:13,140
Then we want to do intbuffer, dot,
172

172

00:08:13,140  -->  00:08:16,560
and we'll start with putting an int, 245.
173

173

00:08:18,930  -->  00:08:21,850
Then we're gonna do intBuffer.flip.
174

174

00:08:23,360  -->  00:08:27,360
Then we're gonna do
binChannel.position int1Pos.
175

175

00:08:30,290  -->  00:08:32,270
That actually should be newint1Pos,
176

176

00:08:32,270  -->  00:08:35,350
that we've defined above, newint1Pos.
177

177

00:08:37,030  -->  00:08:41,030
Then one again,
binChannel.right, go int buffer.
178

178

00:08:43,910  -->  00:08:46,820
Then we're gonna do intbuffer.flip.
179

179

00:08:48,230  -->  00:08:50,290
Then write our negative integer now.
180

180

00:08:50,290  -->  00:08:53,200
So intbuffer.putint negative 98765.
181

181

00:08:59,330  -->  00:09:02,560
Then we're doing buffer.flip again.
182

182

00:09:02,560  -->  00:09:06,560
And then we do a
binChannel.position, newint2Pos
183

183

00:09:10,290  -->  00:09:12,620
and binChannel.right buffer.
184

184

00:09:16,140  -->  00:09:18,110
All right, that's two numbers done.
185

185

00:09:18,110  -->  00:09:21,670
And next we're going to
do intbuffer.flip again.
186

186

00:09:21,670  -->  00:09:23,180
No surprises there.
187

187

00:09:23,180  -->  00:09:24,930
And intbuffer.putint.
188

188

00:09:28,140  -->  00:09:31,700
And we're gonna put there our value 1000.
189

189

00:09:31,700  -->  00:09:33,450
IntBuffer.flip again.
190

190

00:09:35,100  -->  00:09:37,190
Then binChannel.position.
191

191

00:09:38,710  -->  00:09:42,870
(mumbling) gonna be position
to newint3Pos, third integer.
192

192

00:09:44,720  -->  00:09:47,470
Then we're gonna write
out binChannel.write.
193

193

00:09:47,470  -->  00:09:50,320
And that'll be the intBuffer again.
194

194

00:09:50,320  -->  00:09:52,760
So that's our three integers.
195

195

00:09:52,760  -->  00:09:54,780
And now we need to write the two strings.
196

196

00:09:54,780  -->  00:09:58,440
So to do that,
binChannel.position, str1Pos.
197

197

00:10:02,230  -->  00:10:06,390
BinChannel.right, and it's
going to be byteBuffer.wrap.
198

198

00:10:09,500  -->  00:10:12,340
And it's going to be outputString.
199

199

00:10:13,370  -->  00:10:17,540
And then we want to do
binChannel.position to str2Pos.
200

200

00:10:22,910  -->  00:10:26,080
And binChannel.right, byteBuffer.wrap.
201

201

00:10:29,790  -->  00:10:32,290
That's gonna be outputString2.
202

202

00:10:34,830  -->  00:10:37,220
I'll close it up so we
could see a bit better.
203

203

00:10:37,220  -->  00:10:39,100
So that's actually the code.
204

204

00:10:39,100  -->  00:10:41,530
Now there are other
ways to write this code.
205

205

00:10:41,530  -->  00:10:44,290
But doing it this way
does make each step clear.
206

206

00:10:44,290  -->  00:10:47,250
So firstly, we're calculating
all the start positions.
207

207

00:10:47,250  -->  00:10:49,290
And we're doing this
all up here from line 73
208

208

00:10:49,290  -->  00:10:50,630
down to line 79.
209

209

00:10:51,520  -->  00:10:53,510
And it should be fairly familiar with how
210

210

00:10:53,510  -->  00:10:54,960
these are being calculated by now.
211

211

00:10:54,960  -->  00:10:56,490
So I won't go through them again.
212

212

00:10:56,490  -->  00:10:57,930
And then with each chunk of code here,
213

213

00:10:57,930  -->  00:11:01,510
we're actually writing the three integers.
214

214

00:11:01,510  -->  00:11:03,490
And for each integer,
we're writing the value
215

215

00:11:03,490  -->  00:11:06,710
to the buffer after flipping
the buffer if necessary.
216

216

00:11:06,710  -->  00:11:08,830
Then you flip the buffer
to prepare it for writing
217

217

00:11:08,830  -->  00:11:09,950
to the channel.
218

218

00:11:09,950  -->  00:11:11,780
And you then set the channel
to the start position
219

219

00:11:11,780  -->  00:11:13,200
for the integer.
220

220

00:11:13,200  -->  00:11:15,420
And then you write the value to the file.
221

221

00:11:15,420  -->  00:11:17,170
And for the second and third integers,
222

222

00:11:17,170  -->  00:11:19,230
you have to then flip the buffer
223

223

00:11:19,230  -->  00:11:20,910
before writing the values to it.
224

224

00:11:20,910  -->  00:11:22,370
Now the strings are simpler.
225

225

00:11:22,370  -->  00:11:23,920
Let me get down to this code down here
226

226

00:11:23,920  -->  00:11:25,480
from lines 99 onwards.
227

227

00:11:25,480  -->  00:11:28,390
Because we're using the wrap method.
228

228

00:11:28,390  -->  00:11:29,840
And that takes care of creating
229

229

00:11:29,840  -->  00:11:32,150
and flipping the buffer for us.
230

230

00:11:32,150  -->  00:11:34,650
So if I actually run this now.
231

231

00:11:38,560  -->  00:11:39,910
And we see that the
numbers were printed out
232

232

00:11:39,910  -->  00:11:40,990
just the way before.
233

233

00:11:40,990  -->  00:11:42,270
Nothing's changed there.
234

234

00:11:42,270  -->  00:11:46,580
But if we take a look
at the file, data.dat,
235

235

00:11:46,580  -->  00:11:47,950
you see that it pretty much looks the way
236

236

00:11:47,950  -->  00:11:49,210
that it's always looked.
237

237

00:11:49,210  -->  00:11:52,630
We just didn't write the
values sequentially this time.
238

238

00:11:52,630  -->  00:11:55,020
So again the point here is
that you have to understand
239

239

00:11:55,020  -->  00:11:57,130
how important it is to make sure
240

240

00:11:57,130  -->  00:11:59,310
you call the flip method when changing
241

241

00:11:59,310  -->  00:12:03,710
from reading the buffer to
writing it and vice versa.
242

242

00:12:03,710  -->  00:12:05,970
Now often the reads and
writes aren't intuitive.
243

243

00:12:05,970  -->  00:12:08,140
For example, when writing
a buffer to a channel,
244

244

00:12:08,140  -->  00:12:09,900
the buffer is being read.
245

245

00:12:09,900  -->  00:12:12,970
Now if you haven't called
flip when you're supposed to,
246

246

00:12:12,970  -->  00:12:15,730
you'll usually get a
buffer underflow exception
247

247

00:12:15,730  -->  00:12:17,410
when reading from the buffer.
248

248

00:12:17,410  -->  00:12:19,600
So in the case of writing values,
249

249

00:12:19,600  -->  00:12:22,670
you won't actually see the
value appear in the file.
250

250

00:12:22,670  -->  00:12:24,430
And that's because you
didn't flip the buffer
251

251

00:12:24,430  -->  00:12:26,300
and the buffer's position
will still be positioned
252

252

00:12:26,300  -->  00:12:28,280
after the value put.
253

253

00:12:28,280  -->  00:12:30,390
And thus, so the channel
goes to read the buffer
254

254

00:12:30,390  -->  00:12:32,830
so it can write the value to the file
255

255

00:12:32,830  -->  00:12:35,170
and it thinks there's nothing to read.
256

256

00:12:35,170  -->  00:12:37,400
So if you only take one
thing away from these videos
257

257

00:12:37,400  -->  00:12:40,260
about doing io with java.nio,
258

258

00:12:40,260  -->  00:12:42,660
and that is to remember to flip the buffer
259

259

00:12:42,660  -->  00:12:46,160
when switching from reading
to writing and vice versa.
260

260

00:12:46,160  -->  00:12:47,440
All right, that's all there is
261

261

00:12:47,440  -->  00:12:49,650
to randomly accessing a data source.
262

262

00:12:49,650  -->  00:12:51,670
We've learned the concept
in a previous video
263

263

00:12:51,670  -->  00:12:53,340
and you know the methods available now
264

264

00:12:53,340  -->  00:12:55,590
when using java.nio.
265

265

00:12:55,590  -->  00:12:56,930
In the next video, we're gonna move on
266

266

00:12:56,930  -->  00:12:58,300
to another topic.
267

267

00:12:58,300  -->  00:13:00,290
And that's how you can use a file channel
268

268

00:13:00,290  -->  00:13:01,890
to copy one file to another.
269

269

00:13:01,890  -->  00:13:04,050
So I'll see you in the next video.
