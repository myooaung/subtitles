WEBVTT
1
1

00:00:05.360  -->  00:00:11.690
so far the threads we've created don't
use any variables all they do currently
2

2

00:00:11.690  -->  00:00:13.990
is print text to the console
3

3

00:00:13.990  -->  00:00:18.110
so let's create a couple of threads to
do something a little more interesting
4

4

00:00:18.650  -->  00:00:23.480
so we'll start by creating a new console
project clicking on create new project
5

5

00:00:23.480  -->  00:00:30.200
as we've done probably hundreds of times
now selecting java next and creating
6

6

00:00:30.200  -->  00:00:34.340
command line app and i'm going to call
this one counter
7

7

00:00:34.340  -->  00:00:38.990
....ok
8

8

00:00:38.990  -->  00:00:42.410
and moves this a little bit so we
got a bit more space for our source
9

9

00:00:42.410  -->  00:00:43.190
code
10

10

00:00:43.190  -->  00:00:47.210
so what we're going to do is have two
threads counting down from ten using a
11

11

00:00:47.210  -->  00:00:52.280
count down object so will add two more
classes to our application count down
12

12

00:00:52.280  -->  00:00:53.390
and count down thread
13

13

00:00:53.390  -->  00:00:58.040
now we could put them in their own files
but since this is just a simple demo
14

14

00:00:58.040  -->  00:01:00.770
we're going to add them to the main java
file
15

15

00:01:00.770  -->  00:01:04.300
so let's write the code to do that and
then we'll discuss it as we work through
16

16

00:01:04.300  -->  00:01:04.880
it
17

17

00:01:04.880  -->  00:01:08.440
first we're going to copy the thread
color class we used in the last lecture
18

18

00:01:08.440  -->  00:01:13.850
in this project so i'm just going to
copy that and i'm going to create the
19

19

00:01:13.850  -->  00:01:23.210
new class and if you recall it was
called thread color....and i'm
20

20

00:01:23.210  -->  00:01:26.360
just going to paste that code in save a bit
of typing
21

21

00:01:26.360  -->  00:01:32.150
like so so it's just the very basic
codes that we used in the previous
22

22

00:01:32.150  -->  00:01:39.320
lecture so let's now go back to our main
class and in our main method will put some
23

23

00:01:39.320  -->  00:01:43.280
code in it so we'll come down actually
what we will do first is will create
24

24

00:01:43.280  -->  00:01:46.610
these classes and i mentioned we're just
going to do that because this is a
25

25

00:01:46.610  -->  00:01:51.350
simple demo we're going to create these
classes in main.java
26

26

00:01:51.920  -->  00:01:56.110
so the first one is going to be....
27

27

00:01:56.110  -->  00:02:02.210
....
28

28

00:02:03.300  -->  00:02:13.440
.....and we need string for the color....
29

29

00:02:13.440  -->  00:02:19.890
....
30

30

00:02:19.890  -->  00:02:28.050
....and if you get this
error here what that means is we haven't
31

31

00:02:28.050  -->  00:02:33.210
got jdk 8 set up so we need to go
back into preferences
32

32

00:02:33.900  -->  00:02:40.110
sorry into the project right click the
project and click on open module
33

33

00:02:40.110  -->  00:02:40.890
settings
34

34

00:02:40.890  -->  00:02:46.470
we need to make sure under project
that our project language level i think
35

35

00:02:46.470  -->  00:02:49.230
I said JDK but
project language level is set to 8
36

36

00:02:49.230  -->  00:02:56.400
and if we do that the error then goes away
because we're able to use a string in a
37

37

00:02:56.400  -->  00:02:59.610
switch statement which is only introduced in a later version then our default
38

38

00:02:59.610  -->  00:03:00.990
which was set to 6
39

39

00:03:00.990  -->  00:03:08.550
so the first one here now is we're going
to do....
40

40

00:03:08.550  -->  00:03:12.450
....and we're going
to be having two threads running so
41

41

00:03:12.450  -->  00:03:16.290
that's the case we're going to change
the colors....
42

42

00:03:16.290  -->  00:03:19.700
....
43

43

00:03:19.700  -->  00:03:24.120
...
44

44

00:03:24.120  -->  00:03:29.910
....and we'll break
out of that....
45

45

00:03:29.910  -->  00:03:40.700
....
46

46

00:03:40.700  -->  00:03:47.820
....and the default is going to be....
47

47

00:03:47.820  -->  00:03:54.630
....
48

48

00:03:54.630  -->  00:04:00.090
ok so all the it has that done is set
the color
49

49

00:04:00.090  -->  00:04:04.590
so now we want to do some output so put
something on the screen so we put....
50

50

00:04:04.590  -->  00:04:08.160
....
51

51

00:04:09.750  -->  00:04:13.620
...so we're
counting down from ten
52

52

00:04:14.590  -->  00:04:20.440
I'm going to print out of the color which
sets the color when we print it out
53

53

00:04:20.940  -->  00:04:30.630
....and we need to add the number as well so
54

54

00:04:30.630  -->  00:04:33.630
it's going to be....
55

55

00:04:34.270  -->  00:04:41.770
....so that should be all we need for
56

56

00:04:41.770  -->  00:04:46.440
count down now we're going to create a
second class and this class will be will
57

57

00:04:46.440  -->  00:04:48.700
extend the threads so its going to be...
58

58

00:04:48.700  -->  00:04:54.550
....
59

59

00:04:54.550  -->  00:05:03.370
...
60

60

00:05:03.370  -->  00:05:08.860
....
61

61

00:05:08.860  -->  00:05:17.740
....then we want a
constructor so...
62

62

00:05:17.740  -->  00:05:23.500
....
63

63

00:05:23.500  -->  00:05:32.830
....and all of the\constructor will do is assign a value to
64

64

00:05:32.830  -->  00:05:37.120
our fields so...
65

65

00:05:37.120  -->  00:05:49.530
and then we need a run method so....
66

66

00:05:49.530  -->  00:05:56.650
...which
is executing that method that we
67

67

00:05:56.650  -->  00:06:00.700
created on line 13 then the other thing
we'll do is we'll come back here to the
68

68

00:06:00.700  -->  00:06:05.950
main method now that we've created
those two classes and we'll put some
69

69

00:06:05.950  -->  00:06:11.970
code in here to set the names and to
s the threads to do that will create
70

70

00:06:11.970  -->  00:06:18.130
a new object first.....
71

71

00:06:21.090  -->  00:06:24.690
then we'll create the two threads so....
72

72

00:06:24.690  -->  00:06:32.400
....
73

73

00:06:32.400  -->  00:06:38.550
...once we've created that lets assign the name so...
74

74

00:06:38.550  -->  00:06:42.390
....bearing in mind that
these need to be identical to what we
75

75

00:06:42.390  -->  00:06:49.560
have defined on line 21 and 24
below rather and the second one....
76

76

00:06:49.560  -->  00:07:02.220
....
77

77

00:07:02.860  -->  00:07:09.360
and all that's left for us to do now is
to execute it so we want to start to be
78

78

00:07:09.360  -->  00:07:13.050
more correct so...
79

79

00:07:13.050  -->  00:07:16.080
ok so that's the code....
80

80

00:07:16.080  -->  00:07:20.220
....
81

81

00:07:20.220  -->  00:07:24.120
so let's just go through what we
typed in so looking at the count
82

82

00:07:24.120  -->  00:07:28.140
down class first which we've got to defined
on line 18 is one method there the
83

83

00:07:28.140  -->  00:07:32.430
do count down method and this method is
called the code counts down from ten
84

84

00:07:32.430  -->  00:07:33.060
to one
85

85

00:07:33.060  -->  00:07:36.150
at which point the for loop then exits
because it's obviously finished
86

86

00:07:36.840  -->  00:07:41.800
we're using the color trick that we've used in previous videos and we can see
87

87

00:07:41.800  -->  00:07:45.960
from the switch statement that we've got
one thread named thread one which will
88

88

00:07:45.960  -->  00:07:50.520
print the text in cyan and second thread
called thread 2 which is going to print
89

89

00:07:50.520  -->  00:07:55.770
the text in purple and we also have count down thread class that we created on
90

90

00:07:55.770  -->  00:08:00.490
line 39 and extends thread obviously
because we need to do that so that we
91

91

00:08:00.490  -->  00:08:02.160
can execute it we can start it
92

92

00:08:02.160  -->  00:08:05.670
so when an instance of that classes
is started the run method will call to do
93

93

00:08:05.670  -->  00:08:08.640
count down method in the count down class
94

94

00:08:08.640  -->  00:08:12.570
so all instances of this thread will
count down from ten to one
95

95

00:08:12.570  -->  00:08:18.210
so we create the threads in the main
method as you saw at the top here we
96

96

00:08:18.210  -->  00:08:23.400
gave each of them a name and pass the
same count down object to both threads and
97

97

00:08:23.400  -->  00:08:27.870
lastly we start the threads so lets now
run this and see what happens
98

98

00:08:28.830  -->  00:08:35.030
so you can see what happen there
there was a thread one running which
99

99

00:08:35.030  -->  00:08:41.190
count down from ten to one in cyan
and thread 2 did the same thing but in
100

100

00:08:41.190  -->  00:08:45.810
purple and you can see nearby looking at
this how the system switching between the
101

101

00:08:45.810  -->  00:08:50.970
two threads so we can't predict
when each thread is run and will be
102

102

00:08:50.970  -->  00:08:54.950
suspended so every time we run we going
to see a different result here so let's
103

103

00:08:54.950  -->  00:08:58.920
run a few times just to see what I mean so
if we run this again noting the order
104

104

00:08:58.920  -->  00:09:04.950
that was showing there you can see that
one was entirely different we actually
105

105

00:09:04.950  -->  00:09:09.060
got the complete results in cyan for
thread one running it again
106

106

00:09:09.060  -->  00:09:16.010
and there's another results sometimes it's
the same but as you can see by if I keep
107

107

00:09:16.010  -->  00:09:20.430
running it it does change and we can see
we've got purple their the thread 2
108

108

00:09:20.430  -->  00:09:25.200
coming up a couple of times so we really
can't guarantee the order or can't
109

109

00:09:25.200  -->  00:09:28.500
predict when each thread will run and
when it will be suspended so that the other
110

110

00:09:28.500  -->  00:09:31.760
thread can run because that's based on
the operating system and what it's doing
111

111

00:09:31.760  -->  00:09:36.320
so now that we've done that let's make a
small bit of change to the code instead
112

112

00:09:36.320  -->  00:09:38.850
of using a local variable in the for
loop
113

113

00:09:38.850  -->  00:09:44.570
let's use an instance variable so to see what I mean going to come back up here to our
114

114

00:09:44.570  -->  00:09:48.600
count down method we're going to introduce
an instance variable or field for this
115

115

00:09:48.600  -->  00:09:56.790
class so....and then for the for loop instead
116

116

00:09:56.790  -->  00:10:00.990
of creating the variable we're going to
use the instance variable instead i'm
117

117

00:10:00.990  -->  00:10:05.760
going to get rid of the initial
definition and just put....
118

118

00:10:05.760  -->  00:10:10.190
which is now going to obviously use the
instance variable so all we've really done
119

119

00:10:10.190  -->  00:10:14.570
here has changed the local variable to an
instance variable so you think that the
120

120

00:10:14.570  -->  00:10:18.390
code should still count down from ten to
one and if we run it
121

121

00:10:18.390  -->  00:10:21.440
we should expect the same thing will
probably you would expect the same thing
122

122

00:10:21.440  -->  00:10:24.770
each thread counting down from ten to
one but let's just run the application
123

123

00:10:24.770  -->  00:10:26.450
to confirm that
124

124

00:10:26.450  -->  00:10:30.770
and notice how we've got something
different this time
125

125

00:10:31.320  -->  00:10:35.690
we didn't see what we expected to see
instead of each thread counting down to
126

126

00:10:35.690  -->  00:10:37.980
10 both threads seemingly
127

127

00:10:37.980  -->  00:10:39.790
have seemed to skip numbers
128

128

00:10:39.790  -->  00:10:43.540
so it's possible that some numbers here
are even duplicated and you can see that
129

129

00:10:43.540  -->  00:10:47.200
in the case of 10 thread 2 and
thread 1
130

130

00:10:47.200  -->  00:10:51.400
the numbers are duplicated and since
every time we run the application we get
131

131

00:10:51.400  -->  00:10:52.630
a different result
132

132

00:10:52.630  -->  00:10:56.680
we're going to discuss the following
results that i got for one run of this
133

133

00:10:56.680  -->  00:10:57.790
application
134

134

00:10:57.790  -->  00:11:00.940
so here's an example image just to make
it easy so that we're all on the
135

135

00:11:00.940  -->  00:11:06.520
same page you can see their so we can see in
136

136

00:11:06.520  -->  00:11:10.570
this particular example the number 10 is
duplicated and we got that when we run
137

137

00:11:10.570  -->  00:11:15.130
this live as well but after that in this
particular example each number only
138

138

00:11:15.130  -->  00:11:21.340
appears once so thread 2 Skip's all the
numbers that thread one prints and vice
139

139

00:11:21.340  -->  00:11:26.170
versa and also interestingly enough
thread 1 prints 3 after thread 2
140

140

00:11:26.170  -->  00:11:29.500
prints 2 so what's going on here so
141

141

00:11:29.500  -->  00:11:34.030
I mean after all we did was change the
local variable to a private variable
142

142

00:11:34.750  -->  00:11:39.010
other than that we didn't really touch
the code but as you can see the results
143

143

00:11:39.010  -->  00:11:41.230
have now changed drastically
144

144

00:11:41.230  -->  00:11:44.830
compared to when we originally ran it in
both threads were happily printing out
145

145

00:11:44.830  -->  00:11:45.880
the full numbers
146

146

00:11:45.880  -->  00:11:50.860
so let's talk about what's going on and
gain an understanding of that in the
147

147

00:11:50.860  -->  00:11:51.400
next video
