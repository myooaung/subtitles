1
1

00:00:04,730  -->  00:00:06,950
So let's discuss a new feature of this
2

2

00:00:06,950  -->  00:00:12,500
course added in 2018, coding exercises.
3

3

00:00:12,500  -->  00:00:14,540
So coding exercises are a feature added by
4

4

00:00:14,540  -->  00:00:16,550
udemy to allow instructors to add
5

5

00:00:16,550  -->  00:00:19,730
exercises that students can complete to
6

6

00:00:19,730  -->  00:00:21,349
help reinforce concepts they've actually
7

7

00:00:21,349  -->  00:00:23,119
been taught. So the cool thing is that
8

8

00:00:23,119  -->  00:00:24,710
you can literally click a button and
9

9

00:00:24,710  -->  00:00:26,050
have your solution checked immediately.
10

10

00:00:26,050  -->  00:00:28,340
So in other words I'll give you a coding
11

11

00:00:28,340  -->  00:00:30,290
exercise to complete and you can type
12

12

00:00:30,290  -->  00:00:32,210
in your solution to it interactively
13

13

00:00:32,210  -->  00:00:34,489
onto the screen and click a button and
14

14

00:00:34,489  -->  00:00:37,460
see if the solution is correct. So this
15

15

00:00:37,460  -->  00:00:38,780
is different to the challenges that
16

16

00:00:38,780  -->  00:00:40,280
you've seen so far in the course,
17

17

00:00:40,280  -->  00:00:42,440
challenges will win, okay your challenge
18

18

00:00:42,440  -->  00:00:44,000
and type some text on the screen and
19

19

00:00:44,000  -->  00:00:46,460
then allow you to go ahead and try and
20

20

00:00:46,460  -->  00:00:47,840
solve it and then I'll show you the
21

21

00:00:47,840  -->  00:00:50,570
solution in a video. Coding exercises are
22

22

00:00:50,570  -->  00:00:51,470
different in that I give you the
23

23

00:00:51,470  -->  00:00:53,989
exercise then you do them without seeing
24

24

00:00:53,989  -->  00:00:56,239
a solution in a video, but you do have
25

25

00:00:56,239  -->  00:00:58,060
that button to click to check the answer.
26

26

00:00:58,060  -->  00:01:00,320
So there's still are plenty of upcoming
27

27

00:01:00,320  -->  00:01:02,180
challenges in this course as well as
28

28

00:01:02,180  -->  00:01:04,189
coding exercises that are meant to
29

29

00:01:04,189  -->  00:01:06,409
complement those challenges, so this is
30

30

00:01:06,409  -->  00:01:07,700
new material I've added to help
31

31

00:01:07,700  -->  00:01:09,920
reinforce the concepts being taught in
32

32

00:01:09,920  -->  00:01:12,259
the course. Now the thing about coding
33

33

00:01:12,259  -->  00:01:13,939
exercises is it can be a bit tricky to
34

34

00:01:13,939  -->  00:01:16,159
understand initially, so in this video
35

35

00:01:16,159  -->  00:01:18,200
let me go through a sample coding
36

36

00:01:18,200  -->  00:01:20,240
exercise just so that you can get a
37

37

00:01:20,240  -->  00:01:21,950
taste for it and when you get to the
38

38

00:01:21,950  -->  00:01:23,840
next video where you start your first
39

39

00:01:23,840  -->  00:01:25,759
coding exercise in the course, you'll be
40

40

00:01:25,759  -->  00:01:28,369
well-equipped to go about it. So let's go
41

41

00:01:28,369  -->  00:01:30,590
over to you udemy's website now and open
42

42

00:01:30,590  -->  00:01:32,560
up a coding exercise and get started.
43

43

00:01:32,560  -->  00:01:34,670
Alright so as you can see in the browser,
44

44

00:01:34,670  -->  00:01:36,709
we've got the exercise text or the
45

45

00:01:36,709  -->  00:01:39,020
coding so the text here or description
46

46

00:01:39,020  -->  00:01:41,359
showing, this is the problem that we need
47

47

00:01:41,359  -->  00:01:43,939
to solve. Now below that down here and
48

48

00:01:43,939  -->  00:01:45,740
the right part bottom of the screen
49

49

00:01:45,740  -->  00:01:48,079
we've got an area where we can type our
50

50

00:01:48,079  -->  00:01:49,759
source code in, so that's one way of
51

51

00:01:49,759  -->  00:01:51,229
doing it just typing the code in there
52

52

00:01:51,229  -->  00:01:53,479
or alternatively we can now switch over
53

53

00:01:53,479  -->  00:01:55,759
to IntelliJ and copy and paste the code
54

54

00:01:55,759  -->  00:01:58,039
from IntelliJ into this text area,
55

55

00:01:58,039  -->  00:01:59,209
the bottom left-hand corners got a browser
56

56

00:01:59,209  -->  00:02:02,090
Q&A section which we can click and then
57

57

00:02:02,090  -->  00:02:03,590
enables you to leave any questions you
58

58

00:02:03,590  -->  00:02:05,810
may have about the coding exercise but
59

59

00:02:05,810  -->  00:02:08,539
also check a student's response to this
60

60

00:02:08,539  -->  00:02:10,759
particular coding exercise, so this will
61

61

00:02:10,759  -->  00:02:12,319
be a list our questions and answers
62

62

00:02:12,319  -->  00:02:14,689
related to this specific coding exercise.
63

63

00:02:14,689  -->  00:02:16,400
See now guess this is all new there's
64

64

00:02:16,400  -->  00:02:18,560
none at the moment so we'll close it down
65

65

00:02:18,560  -->  00:02:20,630
so as I mentioned you can either type
66

66

00:02:20,630  -->  00:02:23,390
your results here, your solution here
67

67

00:02:23,390  -->  00:02:25,310
directly or you can go back to IntelliJ
68

68

00:02:25,310  -->  00:02:27,560
and test your code in, then paste it
69

69

00:02:27,560  -->  00:02:29,540
back in here. We're going to do a little
70

70

00:02:29,540  -->  00:02:30,940
bit of both as we go through this video,
71

71

00:02:30,940  -->  00:02:33,319
so you can see in terms of this solution
72

72

00:02:33,319  -->  00:02:35,060
that's asking you to write a method
73

73

00:02:35,060  -->  00:02:36,950
called check number with an int
74

74

00:02:36,950  -->  00:02:39,800
parameter number it talks about does
75

75

00:02:39,800  -->  00:02:40,940
some more information there but let's
76

76

00:02:40,940  -->  00:02:42,650
just start that, I'm going to come down
77

77

00:02:42,650  -->  00:02:45,980
here, I'll type over and they're going to
78

78

00:02:45,980  -->  00:02:47,510
create the definition I'm going to type
79

79

00:02:47,510  -->  00:02:53,380
public static void check number
80

80

00:02:53,380  -->  00:02:55,940
parentheses and within the parentheses
81

81

00:02:55,940  -->  00:02:58,700
I'm going to type int number I'm going
82

82

00:02:58,700  -->  00:03:00,860
to add a left curly brace and press enter.
83

83

00:03:00,860  -->  00:03:02,420
When I do that, you can see the right
84

84

00:03:02,420  -->  00:03:04,790
curly brace is added automatically,
85

85

00:03:04,790  -->  00:03:05,750
I'm just gonna go to the end of line that
86

86

00:03:05,750  -->  00:03:07,040
press enter now just to give us a bit
87

87

00:03:07,040  -->  00:03:09,800
more space and note that towards the
88

88

00:03:09,800  -->  00:03:12,080
bottom up here check number method needs
89

89

00:03:12,080  -->  00:03:13,850
to be defined as public static so I've
90

90

00:03:13,850  -->  00:03:15,530
defined it that way as public static to
91

91

00:03:15,530  -->  00:03:17,180
make sure that this will work there's
92

92

00:03:17,180  -->  00:03:18,800
also another note here about not adding
93

93

00:03:18,800  -->  00:03:21,470
a main method to use solution code but
94

94

00:03:21,470  -->  00:03:23,510
more on that shortly though. Notice the
95

95

00:03:23,510  -->  00:03:26,090
file name here positive negative zero dot
96

96

00:03:26,090  -->  00:03:28,310
java that's important because that's
97

97

00:03:28,310  -->  00:03:30,350
going to be the name that you need to
98

98

00:03:30,350  -->  00:03:33,230
make sure that you use and that's
99

99

00:03:33,230  -->  00:03:34,579
what gets through the course you'll find
100

100

00:03:34,579  -->  00:03:37,070
that you may need more than one file to
101

101

00:03:37,070  -->  00:03:38,840
solve a particular coding exercise but
102

102

00:03:38,840  -->  00:03:40,820
in this case we've just got the one file,
103

103

00:03:40,820  -->  00:03:43,430
so we're going to deal with that and
104

104

00:03:43,430  -->  00:03:45,380
notice that there is some smart team is
105

105

00:03:45,380  -->  00:03:47,600
automatically highlighting Java keywords
106

106

00:03:47,600  -->  00:03:50,150
and that you saw I added a left
107

107

00:03:50,150  -->  00:03:52,700
parenthesis and the right one and
108

108

00:03:52,700  -->  00:03:54,620
added the right curly brace so it does
109

109

00:03:54,620  -->  00:03:57,049
recognize the Java language, so you can
110

110

00:03:57,049  -->  00:03:58,730
do your entire solution in here if you
111

111

00:03:58,730  -->  00:04:00,650
like or if you prefer to do it in
112

112

00:04:00,650  -->  00:04:02,660
IntelliJ and test it and then paste your
113

113

00:04:02,660  -->  00:04:04,700
final version in here, you can do that as
114

114

00:04:04,700  -->  00:04:06,590
well. So to do that we're going to go
115

115

00:04:06,590  -->  00:04:08,480
through and create an intelligent
116

116

00:04:08,480  -->  00:04:11,540
project, so I'm going to select the Java
117

117

00:04:11,540  -->  00:04:13,100
select a new project before I come back
118

118

00:04:13,100  -->  00:04:15,200
and I'm going to click on Java click on
119

119

00:04:15,200  -->  00:04:18,019
next, click on next and I'm going to call
120

120

00:04:18,019  -->  00:04:20,359
this one all those boys want sample
121

121

00:04:20,359  -->  00:04:23,030
coding exercise of course you would name
122

122

00:04:23,030  -->  00:04:24,890
it whatever the name of this particular
123

123

00:04:24,890  -->  00:04:26,990
exercise coding exercise you're trying
124

124

00:04:26,990  -->  00:04:29,419
to solve then what I'm going to do is
125

125

00:04:29,419  -->  00:04:32,270
I'm going to add a new class
126

126

00:04:32,270  -->  00:04:33,830
and I'm going to call this class
127

127

00:04:33,830  -->  00:04:40,220
positive negative zero and that's
128

128

00:04:40,220  -->  00:04:42,979
created positive negative zero dot java if
129

129

00:04:42,979  -->  00:04:46,280
you recall that was the file name we
130

130

00:04:46,280  -->  00:04:47,479
need to have the same file name there.
131

131

00:04:47,479  -->  00:04:49,370
Now the other thing here is I'm going to
132

132

00:04:49,370  -->  00:04:53,330
copy this declaration, I'll save a bit of
133

133

00:04:53,330  -->  00:04:56,150
time I'm going to paste that back in
134

134

00:04:56,150  -->  00:04:59,080
IntelliJ, I'll go ahead and do that
135

135

00:04:59,080  -->  00:05:01,669
and we've now got a method called check
136

136

00:05:01,669  -->  00:05:05,539
number and at the moment in IntelliJ we
137

137

00:05:05,539  -->  00:05:07,370
haven't got a main method now there was
138

138

00:05:07,370  -->  00:05:10,669
a note on the coding exercise saying
139

139

00:05:10,669  -->  00:05:12,770
that we weren't to add a main method to
140

140

00:05:12,770  -->  00:05:14,690
there but obviously if we want to test
141

141

00:05:14,690  -->  00:05:16,069
this code that we're creating in
142

142

00:05:16,069  -->  00:05:18,830
IntelliJ, we'll need a main method so I'm
143

143

00:05:18,830  -->  00:05:20,180
gonna go back up to the top here and
144

144

00:05:20,180  -->  00:05:24,590
type psvm press tab to create our main
145

145

00:05:24,590  -->  00:05:26,060
method that we're going to use for
146

146

00:05:26,060  -->  00:05:28,639
testing, so I can only be using the main
147

147

00:05:28,639  -->  00:05:30,440
method here to test our check number
148

148

00:05:30,440  -->  00:05:33,080
method when we're in IntelliJ. Alright so,
149

149

00:05:33,080  -->  00:05:35,030
let's go back to the exercise again and
150

150

00:05:35,030  -->  00:05:36,949
see what we're meant to be doing so it
151

151

00:05:36,949  -->  00:05:38,090
says here that the method shouldn't
152

152

00:05:38,090  -->  00:05:39,979
return any values and we've met that
153

153

00:05:39,979  -->  00:05:42,830
criteria by specifying void here, so
154

154

00:05:42,830  -->  00:05:43,400
that's correct
155

155

00:05:43,400  -->  00:05:45,440
it's just specifying void after static
156

156

00:05:45,440  -->  00:05:47,479
but what we need to do is print out the
157

157

00:05:47,479  -->  00:05:50,240
word positive if the parameter number is
158

158

00:05:50,240  -->  00:05:52,310
greater than 0 so let's go back to
159

159

00:05:52,310  -->  00:05:53,889
IntelliJ and write the code for that,
160

160

00:05:53,889  -->  00:05:57,050
this is within the check number method
161

161

00:05:57,050  -->  00:06:01,610
so to do that we do if number is greater
162

162

00:06:01,610  -->  00:06:05,090
than 0, put a code block and I'm going
163

163

00:06:05,090  -->  00:06:09,289
to type positive in double quotes and
164

164

00:06:09,289  -->  00:06:10,729
obviously in curly braces so basically
165

165

00:06:10,729  -->  00:06:13,669
were outputting the word positive if a
166

166

00:06:13,669  -->  00:06:15,530
number that has been passed as an
167

167

00:06:15,530  -->  00:06:17,300
argument to check number is greater than
168

168

00:06:17,300  -->  00:06:21,530
0 and by the way notice that the results
169

169

00:06:21,530  -->  00:06:23,120
that they're looking at for there are in
170

170

00:06:23,120  -->  00:06:25,009
a lower case so we should be printing
171

171

00:06:25,009  -->  00:06:26,630
out whatever they're asking for here and
172

172

00:06:26,630  -->  00:06:28,190
the double quotes is just an example
173

173

00:06:28,190  -->  00:06:29,930
there we don't include the double quotes
174

174

00:06:29,930  -->  00:06:31,659
when we're actually returning the value.
175

175

00:06:31,659  -->  00:06:35,509
Alright, so back to IntelliJ so just to
176

176

00:06:35,509  -->  00:06:36,469
test that this is working correctly,
177

177

00:06:36,469  -->  00:06:38,479
we're going to call the method check
178

178

00:06:38,479  -->  00:06:40,310
number from the main method let's go
179

179

00:06:40,310  -->  00:06:42,020
ahead and do that so I'm gonna come down
180

180

00:06:42,020  -->  00:06:45,390
here and we're gonna put check number,
181

181

00:06:45,390  -->  00:06:47,370
pass the value of five, so we're going to
182

182

00:06:47,370  -->  00:06:48,930
meet the first condition if your number
183

183

00:06:48,930  -->  00:06:50,760
is greater than zero, so we're passing five.
184

184

00:06:50,760  -->  00:06:52,710
So let's actually run that and see
185

185

00:06:52,710  -->  00:06:54,660
whether this works, they're gonna run our
186

186

00:06:54,660  -->  00:06:57,890
application so you would normally run it
187

187

00:06:57,890  -->  00:07:00,000
you see you've got the valley positive
188

188

00:07:00,000  -->  00:07:02,190
and I'm just going to push this down to
189

189

00:07:02,190  -->  00:07:03,480
the bottom of the screen so we can see
190

190

00:07:03,480  -->  00:07:05,640
it a bit easier. So we can see we've got
191

191

00:07:05,640  -->  00:07:08,160
the valley positive showing there now,
192

192

00:07:08,160  -->  00:07:08,940
so far so good
193

193

00:07:08,940  -->  00:07:10,560
Alright so the next part of the
194

194

00:07:10,560  -->  00:07:12,540
training exercise we need to print the
195

195

00:07:12,540  -->  00:07:14,730
word negative if the parameter number is
196

196

00:07:14,730  -->  00:07:16,350
less than zero, let's get back to
197

197

00:07:16,350  -->  00:07:22,040
IntelliJ and do that we can put else if
198

198

00:07:22,040  -->  00:07:28,620
number is less than zero, we're going to
199

199

00:07:28,620  -->  00:07:30,210
do this out there and in parentheses
200

200

00:07:30,210  -->  00:07:31,950
double quotes we're going to print out
201

201

00:07:31,950  -->  00:07:35,490
negative all right and there's a check
202

202

00:07:35,490  -->  00:07:36,810
that we're going to put check number
203

203

00:07:36,810  -->  00:07:40,160
let's pass a value and say if negative, ten
204

204

00:07:40,160  -->  00:07:45,560
so we're going to check that and run up,
205

205

00:07:45,560  -->  00:07:47,580
you can see we've got positive and
206

206

00:07:47,580  -->  00:07:49,290
negative working so so far our testing
207

207

00:07:49,290  -->  00:07:51,840
and IntelliJ is working well they can
208

208

00:07:51,840  -->  00:07:53,280
see we're getting positive and negative
209

209

00:07:53,280  -->  00:07:54,900
showing, so let's take the opportunity
210

210

00:07:54,900  -->  00:07:58,440
now to finish off this exercise if
211

211

00:07:58,440  -->  00:08:00,120
you're not working back in the udemy
212

212

00:08:00,120  -->  00:08:01,290
interface so I'm going to take a copy
213

213

00:08:01,290  -->  00:08:03,420
and noticing that I'm only copying at
214

214

00:08:03,420  -->  00:08:05,970
the moment the code in between the check
215

215

00:08:05,970  -->  00:08:07,740
number method, so I'm not copying any
216

216

00:08:07,740  -->  00:08:08,970
other code I'm going to take a copy of
217

217

00:08:08,970  -->  00:08:11,880
that, I'm going to go back to our coding
218

218

00:08:11,880  -->  00:08:13,950
exercise making sure my cursor is in the
219

219

00:08:13,950  -->  00:08:16,470
right place so type over here I'm going
220

220

00:08:16,470  -->  00:08:18,240
to paste it in to the check number
221

221

00:08:18,240  -->  00:08:20,820
method that's the code again that we've
222

222

00:08:20,820  -->  00:08:23,730
worked on in IntelliJ. Now we know that
223

223

00:08:23,730  -->  00:08:25,440
we haven't finished the challenge yet
224

224

00:08:25,440  -->  00:08:27,180
because we haven't checked or tried to
225

225

00:08:27,180  -->  00:08:29,640
output zero but anytime that you want to
226

226

00:08:29,640  -->  00:08:31,410
check your solution, you can come over
227

227

00:08:31,410  -->  00:08:34,800
here and click on check solution and the
228

228

00:08:34,800  -->  00:08:37,099
computer will actually check that
229

229

00:08:37,099  -->  00:08:39,860
and tell you if something's wrong they
230

230

00:08:39,860  -->  00:08:42,229
can see here that method call check
231

231

00:08:42,229  -->  00:08:44,269
number with a value of zero past in
232

232

00:08:44,269  -->  00:08:46,370
parentheses was returned and says
233

233

00:08:46,370  -->  00:08:48,259
returned this value and in double quotes
234

234

00:08:48,259  -->  00:08:50,089
so in other words an empty value but
235

235

00:08:50,089  -->  00:08:52,940
zero was expected, in other words you can
236

236

00:08:52,940  -->  00:08:54,769
see that the test was automatically
237

237

00:08:54,769  -->  00:08:57,079
trying to check for a value of zero and
238

238

00:08:57,079  -->  00:08:59,269
was expecting the word zero to be
239

239

00:08:59,269  -->  00:09:01,339
returned but it didn't get anything and
240

240

00:09:01,339  -->  00:09:02,509
I didn't get anything because of course
241

241

00:09:02,509  -->  00:09:03,800
we haven't added that part of the test
242

242

00:09:03,800  -->  00:09:05,959
yet so you can see how this solution is
243

243

00:09:05,959  -->  00:09:06,949
working for you
244

244

00:09:06,949  -->  00:09:09,199
in testing your code, the other thing to
245

245

00:09:09,199  -->  00:09:10,880
keep in mind is if we add something like
246

246

00:09:10,880  -->  00:09:13,490
we forget to put a last closing right
247

247

00:09:13,490  -->  00:09:17,120
brace we check the solution it is smart
248

248

00:09:17,120  -->  00:09:18,560
enough to determine that your code isn't
249

249

00:09:18,560  -->  00:09:20,149
invalid java and we see we get a
250

250

00:09:20,149  -->  00:09:22,220
compilation error there I'll go back and
251

251

00:09:22,220  -->  00:09:22,790
edit again.
252

252

00:09:22,790  -->  00:09:25,819
so basic Java will actually be checked
253

253

00:09:25,819  -->  00:09:29,000
so we know that the code is working, give
254

254

00:09:29,000  -->  00:09:30,139
them a moment to check in which should
255

255

00:09:30,139  -->  00:09:32,420
get the same problem of zero so it's a
256

256

00:09:32,420  -->  00:09:33,829
matter of really over here of reading
257

257

00:09:33,829  -->  00:09:35,300
what this says because they're still
258

258

00:09:35,300  -->  00:09:36,589
keeping an indication of what you
259

259

00:09:36,589  -->  00:09:38,079
haven't completed if the challenge or
260

260

00:09:38,079  -->  00:09:40,100
show you if you've actually got some
261

261

00:09:40,100  -->  00:09:41,899
errors in your code in this case it's
262

262

00:09:41,899  -->  00:09:43,819
telling us we now need to check for the
263

263

00:09:43,819  -->  00:09:46,100
value of zero so I'm going to do
264

264

00:09:46,100  -->  00:09:47,029
something a little bit different than
265

265

00:09:47,029  -->  00:09:49,970
unimportant else, with these the arrows
266

266

00:09:49,970  -->  00:09:52,550
they go out there but it also if number
267

267

00:09:52,550  -->  00:09:55,750
is equal to zero the two equal signs
268

268

00:09:55,750  -->  00:09:58,610
either left or right curly brace now
269

269

00:09:58,610  -->  00:09:59,959
when you're in here we can't type this
270

270

00:09:59,959  -->  00:10:01,880
out and press tab that doesn't work
271

271

00:10:01,880  -->  00:10:03,920
because that's an intelligent feature so
272

272

00:10:03,920  -->  00:10:05,420
in here we have to type in our code in
273

273

00:10:05,420  -->  00:10:07,550
full, so that's one of the reasons why
274

274

00:10:07,550  -->  00:10:09,680
you might consider using IntelliJ to
275

275

00:10:09,680  -->  00:10:12,589
save you bit of typing but here let's do
276

276

00:10:12,589  -->  00:10:14,480
something different we going to put in
277

277

00:10:14,480  -->  00:10:18,800
the number or zero I'll put a semicolon
278

278

00:10:18,800  -->  00:10:20,959
in the line to make it valid. So now if
279

279

00:10:20,959  -->  00:10:24,259
we check that again check solution
280

280

00:10:24,259  -->  00:10:25,910
you can see we've got a different result
281

281

00:10:25,910  -->  00:10:28,249
here method call check number zero in
282

282

00:10:28,249  -->  00:10:30,979
parentheses returned this value then the
283

283

00:10:30,979  -->  00:10:34,369
number was zero but zero was expected so
284

284

00:10:34,369  -->  00:10:35,749
you need to get the output to be
285

285

00:10:35,749  -->  00:10:37,970
returned identically to what's being
286

286

00:10:37,970  -->  00:10:41,089
asked for in the coding exercise we're
287

287

00:10:41,089  -->  00:10:43,639
going to change that, so I come up here
288

288

00:10:43,639  -->  00:10:48,109
with some changes and we'll try putting
289

289

00:10:48,109  -->  00:10:49,519
the value of zero but with a capital Z
290

290

00:10:49,519  -->  00:10:54,679
check that solution again notice here
291

291

00:10:54,679  -->  00:10:56,660
that we've got the output of zero but
292

292

00:10:56,660  -->  00:10:58,669
it's expecting zero and learning that
293

293

00:10:58,669  -->  00:11:00,139
it's basically telling you that the
294

294

00:11:00,139  -->  00:11:02,660
codes correct but for capitalization is
295

295

00:11:02,660  -->  00:11:04,519
different so you can see that it's smart
296

296

00:11:04,519  -->  00:11:05,419
enough to know that you've got the
297

297

00:11:05,419  -->  00:11:06,739
answer correct but you've got in this
298

298

00:11:06,739  -->  00:11:09,289
case an uppercase zero and you weren't
299

299

00:11:09,289  -->  00:11:10,970
asked to do an uppercase one so I'm
300

300

00:11:10,970  -->  00:11:12,319
going to change that back to a lowercase
301

301

00:11:12,319  -->  00:11:15,499
yet another I've done that our solution
302

302

00:11:15,499  -->  00:11:16,279
should be correct,
303

303

00:11:16,279  -->  00:11:20,010
Let's check the solution again
304

304

00:11:20,010  -->  00:11:21,810
and you can see at this point of time
305

305

00:11:21,810  -->  00:11:23,730
now we've now solved the coding exercise
306

306

00:11:23,730  -->  00:11:25,620
correctly we've got well done your
307

307

00:11:25,620  -->  00:11:26,580
solution is correct
308

308

00:11:26,580  -->  00:11:28,410
and the code that's been placed in there
309

309

00:11:28,410  -->  00:11:31,230
is correct a couple of other last things
310

310

00:11:31,230  -->  00:11:33,030
to note if we go ahead and we try and
311

311

00:11:33,030  -->  00:11:37,440
add another method I'll try another one
312

312

00:11:37,440  -->  00:11:43,770
here public static void we'll call that
313

313

00:11:43,770  -->  00:11:50,340
Tim test and check that solution we get
314

314

00:11:50,340  -->  00:11:52,710
a problem e we get an arrow return extra
315

315

00:11:52,710  -->  00:11:54,840
methods are detected please add only the
316

316

00:11:54,840  -->  00:11:58,110
required methods expected one method but
317

317

00:11:58,110  -->  00:11:59,940
that was - so we've got two methods back
318

318

00:11:59,940  -->  00:12:01,920
so make sure that till you only have
319

319

00:12:01,920  -->  00:12:03,480
methods in there that are needed and
320

320

00:12:03,480  -->  00:12:05,070
that's one of the reasons why you don't
321

321

00:12:05,070  -->  00:12:07,830
include the main method, so the other
322

322

00:12:07,830  -->  00:12:09,420
thing is it's important to get the
323

323

00:12:09,420  -->  00:12:10,740
definitions correct if we remove the
324

324

00:12:10,740  -->  00:12:12,270
word static from here so we've just got
325

325

00:12:12,270  -->  00:12:17,030
public void and we check that solution
326

326

00:12:17,030  -->  00:12:19,440
we've now got a compilation error here
327

327

00:12:19,440  -->  00:12:21,690
and the area he is relating to the fact
328

328

00:12:21,690  -->  00:12:23,640
we're trying to access something from a
329

329

00:12:23,640  -->  00:12:25,740
non-static method, so the point of the
330

330

00:12:25,740  -->  00:12:28,890
exercise here is that the description is
331

331

00:12:28,890  -->  00:12:30,930
said to use static so we need to use
332

332

00:12:30,930  -->  00:12:32,370
what they're suggesting and make sure we
333

333

00:12:32,370  -->  00:12:34,320
do exactly that to get this to work
334

334

00:12:34,320  -->  00:12:37,910
properly. I set this back to static again
335

335

00:12:37,910  -->  00:12:40,170
click on check solution and we should be
336

336

00:12:40,170  -->  00:12:43,230
correct again. Alright so that's it we've
337

337

00:12:43,230  -->  00:12:45,690
got our solution to the coding exercise
338

338

00:12:45,690  -->  00:12:48,420
correct. Now keep in mind with is that
339

339

00:12:48,420  -->  00:12:50,460
there's no universal solution for the
340

340

00:12:50,460  -->  00:12:52,860
coding exercise the most important part
341

341

00:12:52,860  -->  00:12:55,320
is that it works as per these training
342

342

00:12:55,320  -->  00:12:57,030
exercises text in other words it's
343

343

00:12:57,030  -->  00:12:59,580
giving the outputs that as being asked
344

344

00:12:59,580  -->  00:13:01,770
in the coding description you can write
345

345

00:13:01,770  -->  00:13:03,510
every coding exercise in many different
346

346

00:13:03,510  -->  00:13:05,880
ways, so some exercises might require
347

347

00:13:05,880  -->  00:13:08,340
more testing in IntelliJ first so it
348

348

00:13:08,340  -->  00:13:09,660
might be a good idea to test the code
349

349

00:13:09,660  -->  00:13:11,880
inside the main method as I started
350

350

00:13:11,880  -->  00:13:13,770
doing earlier in this video before
351

351

00:13:13,770  -->  00:13:15,990
transferring and pasting your code back
352

352

00:13:15,990  -->  00:13:18,060
here into the coding exercise itself
353

353

00:13:18,060  -->  00:13:20,040
some other was testing it in IntelliJ.
354

354

00:13:20,040  -->  00:13:22,110
Alright, so that's coding exercises.
355

355

00:13:22,110  -->  00:13:26,060
Let's now move on to the next video.
