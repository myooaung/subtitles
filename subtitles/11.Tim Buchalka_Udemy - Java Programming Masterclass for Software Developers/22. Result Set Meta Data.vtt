WEBVTT
1
1

00:00:04.930  -->  00:00:07.960
alright so it's now time to write our
2

2

00:00:07.960  -->  00:00:09.870
method which will be very similar to the
3

3

00:00:09.870  -->  00:00:11.530
method that queries the albums for an
4

4

00:00:11.530  -->  00:00:12.370
artist
5

5

00:00:12.370  -->  00:00:13.690
except in this case we're going to be
6

6

00:00:13.690  -->  00:00:15.490
returning a list of songs artists
7

7

00:00:15.490  -->  00:00:18.940
objects now also we can't use our column
8

8

00:00:18.940  -->  00:00:20.980
index constants and that's because
9

9

00:00:20.980  -->  00:00:22.660
they're returning columns from different
10

10

00:00:22.660  -->  00:00:25.530
tables now we're ok to hard code indices
11

11

00:00:25.530  -->  00:00:27.730
because we can be sure that the order of
12

12

00:00:27.730  -->  00:00:29.710
the columns return for this query will
13

13

00:00:29.710  -->  00:00:31.810
always be the same even if the
14

14

00:00:31.810  -->  00:00:33.970
column position has change within the tables
15

15

00:00:33.970  -->  00:00:36.730
now we specified the columns we want and
16

16

00:00:36.730  -->  00:00:38.950
they are all in query alright so let's
17

17

00:00:38.950  -->  00:00:40.780
go ahead and now add the query artist for
18

18

00:00:40.780  -->  00:00:43.390
song method
19

19

00:00:43.390  -->  00:00:50.500
down here at the bottom so we're going
20

20

00:00:50.500  -->  00:00:55.480
to do...
21

21

00:00:55.480  -->  00:01:04.930
....
22

22

00:01:04.930  -->  00:01:40.960
...
23

23

00:01:40.960  -->  00:01:46.140
....
24

24

00:01:46.140  -->  00:01:54.880
...
25

25

00:01:54.880  -->  00:02:03.100
....
26

26

00:02:03.100  -->  00:02:12.420
...
27

27

00:02:12.420  -->  00:02:17.440
...so this is a new feature of
28

28

00:02:17.440  -->  00:02:18.940
intelliJ a relatively new feature
29

29

00:02:18.940  -->  00:02:21.040
which telling us its found duplicated code
30

30

00:02:21.040  -->  00:02:23.500
in this file so what is looking at is that
31

31

00:02:23.500  -->  00:02:26.040
code and also the code is in the
32

32

00:02:26.040  -->  00:02:29.350
previous method query artists actually
33

33

00:02:29.350  -->  00:02:32.110
got the query albums for artists got
34

34

00:02:32.110  -->  00:02:35.560
that same code i'll leave that for now
35

35

00:02:35.560  -->  00:02:38.410
but that would be a good exercise to put
36

36

00:02:38.410  -->  00:02:40.120
this in a separate method somehow
37

37

00:02:40.120  -->  00:02:42.400
we won't do that now because we are focusing on
38

38

00:02:42.400  -->  00:02:45.100
the sql so next we're going to print
39

39

00:02:45.100  -->  00:02:46.660
out the sql statement so let's do
40

40

00:02:46.660  -->  00:02:48.880
that so....
41

41

00:02:48.880  -->  00:05:10.010
....
42

42

00:05:10.010  -->  00:05:14.780
ok alright so that's our query artist for
43

43

00:05:14.780  -->  00:05:15.980
song method
44

44

00:05:15.980  -->  00:05:17.630
let's now go over and add our code to
45

45

00:05:17.630  -->  00:05:19.460
the main method to get the artist
46

46

00:05:19.460  -->  00:05:22.760
for one of these songs so we're just
47

47

00:05:22.760  -->  00:05:25.520
gonna get into the bottom actually what
48

48

00:05:25.520  -->  00:05:28.610
i do is i just put it down here on line 33
49

49

00:05:28.610  -->  00:05:34.940
and make it more space and we want to do
50

50

00:05:34.940  -->  00:05:39.980
a list....
51

51

00:05:39.980  -->  00:05:42.740
....
52

52

00:05:42.740  -->  00:06:22.340
...
53

53

00:06:22.340  -->  00:06:25.040
...so if we get down to here we're going to go
54

54

00:06:25.040  -->  00:06:27.500
through our for each to print out the
55

55

00:06:27.500  -->  00:06:34.820
results so for....
56

56

00:06:34.820  -->  00:06:50.990
....
57

57

00:06:50.990  -->  00:06:56.180
...
58

58

00:06:56.180  -->  00:07:05.210
....
59

59

00:07:05.210  -->  00:07:09.650
ok let's just run this and see what
60

60

00:07:09.650  -->  00:07:10.370
happens
61

61

00:07:10.370  -->  00:07:18.470
you can see artist name equals heart album
62

62

00:07:18.470  -->  00:07:20.000
name equals dog and butterfly track equals
63

63

00:07:20.000  -->  00:07:22.280
nine and we can see the sql code
64

64

00:07:22.280  -->  00:07:25.070
that was generated when we print
65

65

00:07:25.070  -->  00:07:27.530
that out from the actual method in the
66

66

00:07:27.530  -->  00:07:30.950
data source class that's working nicely
67

67

00:07:30.950  -->  00:07:33.320
just to confirm that let's
68

68

00:07:33.320  -->  00:07:35.600
actually try one of those other songs
69

69

00:07:35.600  -->  00:07:36.620
will try the other one
70

70

00:07:36.620  -->  00:07:41.630
and remembering it was she's on fire....
71

71

00:07:41.630  -->  00:07:43.760
....
72

72

00:07:43.760  -->  00:07:49.580
....will run that artist name equals
73

73

00:07:49.580  -->  00:07:51.340
aerosmith album name equals done with
74

74

00:07:51.340  -->  00:07:53.870
mirrors track equals seven so that's good
75

75

00:07:53.870  -->  00:07:56.120
lastly we'll check out the third one
76

76

00:07:56.120  -->  00:07:57.530
things are looking good
77

77

00:07:57.530  -->  00:08:02.000
go your own way
78

78

00:08:02.000  -->  00:08:09.500
run that this time you can see we've got
79

79

00:08:09.500  -->  00:08:11.090
four results there because it's four
80

80

00:08:11.090  -->  00:08:13.280
albums with that particular song exists
81

81

00:08:13.280  -->  00:08:15.920
for fleetwood Mac and you can see there
82

82

00:08:15.920  -->  00:08:18.890
thats also sorted now in ascending order
83

83

00:08:18.890  -->  00:08:20.990
so there are all the queries we're
84

84

00:08:20.990  -->  00:08:23.150
going to code for now doing the others
85

85

00:08:23.150  -->  00:08:24.380
would just be a matter of defining the
86

86

00:08:24.380  -->  00:08:26.570
static constants and then building up
87

87

00:08:26.570  -->  00:08:28.880
the string in a new method depending on
88

88

00:08:28.880  -->  00:08:30.620
the query we may have to create a new
89

89

00:08:30.620  -->  00:08:33.050
class to hold the results now we didn't
90

90

00:08:33.050  -->  00:08:35.060
do any queries that contain wild cards
91

91

00:08:35.060  -->  00:08:36.910
but as we've seen when we wanted do a
92

92

00:08:36.910  -->  00:08:38.990
query is just a matter of writing the
93

93

00:08:38.990  -->  00:08:41.410
sql statement testing it against the
94

94

00:08:41.410  -->  00:08:43.460
database and then building the query
95

95

00:08:43.460  -->  00:08:45.220
string using a stringbuilder and
96

96

00:08:45.220  -->  00:08:47.180
Constance and we didn't have to do
97

97

00:08:47.180  -->  00:08:49.100
anything special when we use wildcards
98

98

00:08:49.100  -->  00:08:51.380
or any other valid SQL we haven't
99

99

00:08:51.380  -->  00:08:53.630
touched on we just build a query string
100

100

00:08:53.630  -->  00:08:55.700
then we pass it to the statement
101

101

00:08:55.700  -->  00:08:59.090
execute query or statement . executes and
102

102

00:08:59.090  -->  00:09:00.590
if you've been coding along with me and
103

103

00:09:00.590  -->  00:09:03.110
I hope you have hang on to these classes
104

104

00:09:03.110  -->  00:09:05.090
that's because starting with the
105

105

00:09:05.090  -->  00:09:06.350
next video we're going to be using them
106

106

00:09:06.350  -->  00:09:08.830
again but also where we use the music
107

107

00:09:08.830  -->  00:09:10.940
database from the GUI application later
108

108

00:09:10.940  -->  00:09:12.890
in this section because we've been
109

109

00:09:12.890  -->  00:09:15.050
diligent about hiding the implementation
110

110

00:09:15.050  -->  00:09:16.940
details from the callers of the
111

111

00:09:16.940  -->  00:09:19.670
datasource class and because we've done
112

112

00:09:19.670  -->  00:09:21.260
that we're gonna be able to just drop
113

113

00:09:21.260  -->  00:09:23.630
the classes in a model package into our
114

114

00:09:23.630  -->  00:09:25.640
GUI applications project and use the
115

115

00:09:25.640  -->  00:09:28.430
as is now if we had mixed databases code
116

116

00:09:28.430  -->  00:09:30.200
with the code in the main method we
117

117

00:09:30.200  -->  00:09:31.580
wouldn't have been able to do that at
118

118

00:09:31.580  -->  00:09:34.190
least not as easy when we get to the the
119

119

00:09:34.190  -->  00:09:36.350
GUI application will code a few more
120

120

00:09:36.350  -->  00:09:38.630
of the queries at that point just before
121

121

00:09:38.630  -->  00:09:42.020
i finish this video let's touch on one
122

122

00:09:42.020  -->  00:09:44.810
more topic when we're working
123

123

00:09:44.810  -->  00:09:46.430
from the command line we were able to
124

124

00:09:46.430  -->  00:09:48.500
query the schema from the tables in the
125

125

00:09:48.500  -->  00:09:52.640
database but when using jdbc this is one
126

126

00:09:52.640  -->  00:09:54.800
area where the support for this and
127

127

00:09:54.800  -->  00:09:56.750
sometimes the way we do it can be
128

128

00:09:56.750  -->  00:09:59.270
different depending on the database now
129

129

00:09:59.270  -->  00:10:01.550
unfortunately sqlite doesn't have
130

130

00:10:01.550  -->  00:10:03.020
good support for querying the database
131

131

00:10:03.020  -->  00:10:05.420
schema now the connection class has a
132

132

00:10:05.420  -->  00:10:07.850
get metadata method that is supposed to
133

133

00:10:07.850  -->  00:10:09.410
return information about the database
134

134

00:10:09.410  -->  00:10:11.420
tables but when using this method from
135

135

00:10:11.420  -->  00:10:13.520
with a sqlite database
136

136

00:10:13.520  -->  00:10:14.900
unfortunately the returned object
137

137

00:10:14.900  -->  00:10:15.800
doesn't have any
138

138

00:10:15.800  -->  00:10:18.440
it's fieldset they're all null what we
139

139

00:10:18.440  -->  00:10:20.660
can do though is we can query meta data
140

140

00:10:20.660  -->  00:10:23.950
using the result set from a query now
141

141

00:10:23.950  -->  00:10:26.080
often this is sufficient because we
142

142

00:10:26.080  -->  00:10:27.740
usually interested in the definition of
143

143

00:10:27.740  -->  00:10:30.640
a specific table for example we may want
144

144

00:10:30.640  -->  00:10:32.930
to get the column index for value will
145

145

00:10:32.930  -->  00:10:34.430
find out what the column names are for a
146

146

00:10:34.430  -->  00:10:36.950
table just to see how this works lets
147

147

00:10:36.950  -->  00:10:38.630
just add a quick method to the datasource
148

148

00:10:38.630  -->  00:10:41.120
class to do a general query of the songs
149

149

00:10:41.120  -->  00:10:42.760
table and then we'll look at the meta
150

150

00:10:42.760  -->  00:10:46.040
data that comes back so we click on data
151

151

00:10:46.040  -->  00:10:47.060
source
152

152

00:10:47.060  -->  00:10:50.480
let's write that method that's going to
153

153

00:10:50.480  -->  00:10:56.810
be....
154

154

00:10:56.810  -->  00:11:36.620
...
155

155

00:11:36.620  -->  00:11:41.830
....
156

156

00:11:41.830  -->  00:11:48.350
...
157

157

00:11:48.350  -->  00:12:52.330
....
158

158

00:12:52.330  -->  00:12:55.480
alright so that's our method so we're
159

159

00:12:55.480  -->  00:12:57.430
performing the query and then we call
160

160

00:12:57.430  -->  00:12:58.840
the results set . get metadata
161

161

00:12:58.840  -->  00:13:00.790
method to get the schema information
162

162

00:13:00.790  -->  00:13:03.220
from the table now we get the column
163

163

00:13:03.220  -->  00:13:05.380
count and then use the loop to print
164

164

00:13:05.380  -->  00:13:08.050
each column name you notice at that we
165

165

00:13:08.050  -->  00:13:10.570
initialized I to 1 the loop because the
166

166

00:13:10.570  -->  00:13:12.190
first column is at position one not
167

167

00:13:12.190  -->  00:13:14.980
position 0 now using the results set meta
168

168

00:13:14.980  -->  00:13:16.630
data we can get information such as the
169

169

00:13:16.630  -->  00:13:17.890
column names and types and the
170

170

00:13:17.890  -->  00:13:19.510
attributes in other words you know
171

171

00:13:19.510  -->  00:13:21.850
whether the nullable etc let's just run
172

172

00:13:21.850  -->  00:13:25.690
this first so we can just do...
173

173

00:13:25.690  -->  00:13:32.260
....we
174

174

00:13:32.260  -->  00:13:38.380
just run that you can see there columns in
175

175

00:13:38.380  -->  00:13:40.900
the song table we've got ID track titled
176

176

00:13:40.900  -->  00:13:43.480
and album so relation to the other types of
177

177

00:13:43.480  -->  00:13:45.370
information that we can look at let's
178

178

00:13:45.370  -->  00:13:46.930
just go to oracles documentation
179

179

00:13:46.930  -->  00:13:57.020
results set metadata
180

180

00:13:57.020  -->  00:13:58.190
you can see there's quite a few
181

181

00:13:58.190  -->  00:14:00.140
methods that do various things so its
182

182

00:14:00.140  -->  00:14:02.630
worthwhile checking that out and for
183

183

00:14:02.630  -->  00:14:04.190
example if you're in the situation where
184

184

00:14:04.190  -->  00:14:05.550
we didn't know the names of the columns
185

185

00:14:05.550  -->  00:14:08.120
in the table or how many they were we
186

186

00:14:08.120  -->  00:14:09.660
can do a query that doesn't require that
187

187

00:14:09.660  -->  00:14:11.270
information and then get it from the
188

188

00:14:11.270  -->  00:14:12.140
results set
189

189

00:14:12.140  -->  00:14:14.040
of course we need to at least know the
190

190

00:14:14.040  -->  00:14:15.440
name of the table which we've done in
191

191

00:14:15.440  -->  00:14:17.930
this scenario that we just created up as
192

192

00:14:17.930  -->  00:14:19.410
i mentioned that this is one area that
193

193

00:14:19.410  -->  00:14:22.050
getting schema info where the support
194

194

00:14:22.050  -->  00:14:23.850
and the way of getting it can differ
195

195

00:14:23.850  -->  00:14:25.110
across databases
196

196

00:14:25.110  -->  00:14:27.420
alright so that's it for this video I'm
197

197

00:14:27.420  -->  00:14:29.160
going to finish it here now in the next
198

198

00:14:29.160  -->  00:14:30.360
video we're going to start looking at
199

199

00:14:30.360  -->  00:14:33.830
creating views using functions in our
200

200

00:14:33.830  -->  00:14:35.870
statements prepared statements and
201

201

00:14:35.870  -->  00:14:37.700
transactions so see you in the next
202

202

00:14:37.700  -->  00:14:43.060
video
