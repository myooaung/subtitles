WEBVTT
1
1

00:00:05.016  -->  00:00:06.470
<v Tim>All right, so it's time to talk about</v>
2

2

00:00:06.470  -->  00:00:09.020
Java statements in a bit more detail,
3

3

00:00:09.020  -->  00:00:11.960
so I've created a new projected called Statements.
4

4

00:00:11.960  -->  00:00:16.090
So let's start off by typing in a statement in Java.
5

5

00:00:16.090  -->  00:00:19.040
So I'm going to start with int finalScore
6

6

00:00:21.190  -->  00:00:22.343
is equal to 50.
7

7

00:00:23.720  -->  00:00:26.170
So this is a statement in Java.
8

8

00:00:26.170  -->  00:00:27.490
Now we know from previous videos
9

9

00:00:27.490  -->  00:00:31.090
that finalScore equals 50 is an expression.
10

10

00:00:31.090  -->  00:00:34.420
The statement is the entire line including the data type,
11

11

00:00:34.420  -->  00:00:36.170
int in this example at the start,
12

12

00:00:36.170  -->  00:00:38.490
and the semicolon at the end.
13

13

00:00:38.490  -->  00:00:41.570
Now it turns out there's three types of statements in Java,
14

14

00:00:41.570  -->  00:00:42.790
so this is the first type,
15

15

00:00:42.790  -->  00:00:45.430
and it's known as the declaration statement.
16

16

00:00:45.430  -->  00:00:46.930
So let us swing over and take a look
17

17

00:00:46.930  -->  00:00:49.433
at the three types of statements in Java.
18

18

00:00:51.020  -->  00:00:53.240
So statements can be compared to sentences
19

19

00:00:53.240  -->  00:00:54.670
in natural languages.
20

20

00:00:54.670  -->  00:00:57.710
A statement forms a complete unit of execution,
21

21

00:00:57.710  -->  00:00:59.240
and as I mentioned, there's three types
22

22

00:00:59.240  -->  00:01:01.240
of statements in Java.
23

23

00:01:01.240  -->  00:01:03.520
Firstly, we've got a declaration statement.
24

24

00:01:03.520  -->  00:01:04.730
So the declaration part
25

25

00:01:04.730  -->  00:01:06.610
means the statement declares something,
26

26

00:01:06.610  -->  00:01:08.280
a variable in this case,
27

27

00:01:08.280  -->  00:01:10.820
and we've seen numerous examples so far in the course
28

28

00:01:10.820  -->  00:01:12.410
of a declaration statement.
29

29

00:01:12.410  -->  00:01:14.030
We just didn't know what it was called.
30

30

00:01:14.030  -->  00:01:16.860
So int finalScore equals 50 semicolon,
31

31

00:01:16.860  -->  00:01:20.120
well, the data type at the front and semicolon at the end
32

32

00:01:20.120  -->  00:01:22.370
make it a declaration statement in Java,
33

33

00:01:22.370  -->  00:01:24.920
and obviously, finalScore equals 50 was the expression
34

34

00:01:24.920  -->  00:01:26.390
which then ultimately has converted
35

35

00:01:26.390  -->  00:01:28.173
into a declaration statement.
36

36

00:01:29.110  -->  00:01:33.230
So the second type of statement is an expression statement.
37

37

00:01:33.230  -->  00:01:34.350
So as the name suggests,
38

38

00:01:34.350  -->  00:01:37.240
expression statements have a lot to do with expressions.
39

39

00:01:37.240  -->  00:01:38.730
Some but not all expressions
40

40

00:01:38.730  -->  00:01:41.390
can become expression statements in Java
41

41

00:01:41.390  -->  00:01:44.990
just by adding a semicolon to the end of the line.
42

42

00:01:44.990  -->  00:01:46.430
Now there's four expression groups
43

43

00:01:46.430  -->  00:01:48.990
that can become expression statements in Java,
44

44

00:01:48.990  -->  00:01:50.490
and let's go through each one.
45

45

00:01:51.740  -->  00:01:53.360
First one, assignment expressions,
46

46

00:01:53.360  -->  00:01:55.170
and we know from earlier in the course
47

47

00:01:55.170  -->  00:01:57.250
that assignment expressions just basically
48

48

00:01:57.250  -->  00:01:59.610
assign a value to a variable.
49

49

00:01:59.610  -->  00:02:00.720
Got three examples there,
50

50

00:02:00.720  -->  00:02:03.470
assigning the value five to groupAge.
51

51

00:02:03.470  -->  00:02:04.870
The second example, we're multiplying
52

52

00:02:04.870  -->  00:02:06.990
the current value of salary by two,
53

53

00:02:06.990  -->  00:02:08.630
and the third example, we're adding 10
54

54

00:02:08.630  -->  00:02:11.670
to the current value of profitMade.
55

55

00:02:11.670  -->  00:02:13.170
So they're assignment expressions,
56

56

00:02:13.170  -->  00:02:16.240
but adding a semicolon to these expressions
57

57

00:02:16.240  -->  00:02:18.463
convert them into expression statements.
58

58

00:02:20.520  -->  00:02:23.543
The second type of expression or the expression groups
59

59

00:02:23.543  -->  00:02:25.730
that can become an expression statement
60

60

00:02:25.730  -->  00:02:28.360
is anytime you use the ++, the increment,
61

61

00:02:28.360  -->  00:02:31.110
or the --, decrement, operator,
62

62

00:02:31.110  -->  00:02:33.270
and an example there, numberStudents++
63

63

00:02:33.270  -->  00:02:35.540
or surveyResults--.
64

64

00:02:35.540  -->  00:02:37.690
So these can be used in an expression,
65

65

00:02:37.690  -->  00:02:40.260
but adding a semicolon at the end of these
66

66

00:02:40.260  -->  00:02:42.510
will convert them into expression statements.
67

67

00:02:44.010  -->  00:02:46.270
Now the third and fourth groups of expressions
68

68

00:02:46.270  -->  00:02:48.780
that can become expression statements are method calls,
69

69

00:02:48.780  -->  00:02:51.300
we've got an example there of System.out.println,
70

70

00:02:51.300  -->  00:02:54.560
parentheses and Testing within double quotes,
71

71

00:02:54.560  -->  00:02:58.597
and also the last type, object creation expressions.
72

72

00:02:58.597  -->  00:03:01.490
Now I'm putting c and d here for completeness,
73

73

00:03:01.490  -->  00:03:03.840
but we haven't discussed them much at all,
74

74

00:03:03.840  -->  00:03:05.730
but we will be doing that later in the course,
75

75

00:03:05.730  -->  00:03:07.010
and for that reason, we can't really go
76

76

00:03:07.010  -->  00:03:09.630
into much more detail about these two groups,
77

77

00:03:09.630  -->  00:03:12.540
but just know there are two other expression groups
78

78

00:03:12.540  -->  00:03:15.870
that can ultimately become expression statements.
79

79

00:03:15.870  -->  00:03:19.300
All right, so that's the second type, expression statements.
80

80

00:03:19.300  -->  00:03:22.410
The third type is control flow statements,
81

81

00:03:22.410  -->  00:03:24.720
the third type of statements within Java.
82

82

00:03:24.720  -->  00:03:27.430
So statements inside your source files in Java
83

83

00:03:27.430  -->  00:03:29.690
are generally executed from top to bottom
84

84

00:03:29.690  -->  00:03:31.430
in the order that they appear.
85

85

00:03:31.430  -->  00:03:33.410
Control flow statements, however,
86

86

00:03:33.410  -->  00:03:35.290
they break up the flow of execution
87

87

00:03:35.290  -->  00:03:38.730
by employing decision making, looping, and branching,
88

88

00:03:38.730  -->  00:03:41.550
enabling your programme to conditionally execute
89

89

00:03:41.550  -->  00:03:43.003
particular blocks of code,
90

90

00:03:44.510  -->  00:03:46.820
and we've already talked briefly about conditional logic,
91

91

00:03:46.820  -->  00:03:50.300
and you've seen the if-then statement earlier in the course.
92

92

00:03:50.300  -->  00:03:54.010
Now control flow statements also include the if-then-else,
93

93

00:03:54.010  -->  00:03:55.260
looping statements,
94

94

00:03:55.260  -->  00:03:57.470
which is the for, the while, and the do while,
95

95

00:03:57.470  -->  00:04:01.080
and then branching statements, break, continue, and return,
96

96

00:04:01.080  -->  00:04:02.640
and most of those, we haven't talked about yet,
97

97

00:04:02.640  -->  00:04:04.450
but we will be covering all of these topics
98

98

00:04:04.450  -->  00:04:06.230
in future videos.
99

99

00:04:06.230  -->  00:04:08.010
All right, so let's swing back through to IntelliJ
100

100

00:04:08.010  -->  00:04:08.843
and have a quick look
101

101

00:04:08.843  -->  00:04:10.600
at these different types of statements.
102

102

00:04:11.640  -->  00:04:12.680
So looking at line seven,
103

103

00:04:12.680  -->  00:04:14.700
this is the first type of statement.
104

104

00:04:14.700  -->  00:04:16.870
This is the declaration statement.
105

105

00:04:16.870  -->  00:04:18.200
Nothing complicated here.
106

106

00:04:18.200  -->  00:04:21.630
We're declaring a variable with an optional initial value,
107

107

00:04:21.630  -->  00:04:23.270
which we've set to 50 in this case,
108

108

00:04:23.270  -->  00:04:25.540
so that's a declaration statement.
109

109

00:04:25.540  -->  00:04:27.450
There's another form of a declaration statement
110

110

00:04:27.450  -->  00:04:29.600
where we can come along and we can type int
111

111

00:04:30.500  -->  00:04:34.730
playersHighScore semicolon.
112

112

00:04:34.730  -->  00:04:35.707
So this is another declaration statement,
113

113

00:04:35.707  -->  00:04:39.160
but we're just not setting playersHighScore
114

114

00:04:39.160  -->  00:04:41.280
to a specific initial value.
115

115

00:04:41.280  -->  00:04:43.050
So declaration statements, I'm sure you'll agree,
116

116

00:04:43.050  -->  00:04:44.610
are pretty straightforward.
117

117

00:04:44.610  -->  00:04:47.190
Let's now have a look at the second type of statement,
118

118

00:04:47.190  -->  00:04:49.020
the expression statement.
119

119

00:04:49.020  -->  00:04:51.050
Now remember that there's four groups of expressions
120

120

00:04:51.050  -->  00:04:52.960
that can become expression statements,
121

121

00:04:52.960  -->  00:04:54.630
and let's go through them all.
122

122

00:04:54.630  -->  00:04:57.460
Firstly, we'll look at assignment expressions.
123

123

00:04:57.460  -->  00:04:59.170
So I'm gonna start by typing
124

124

00:05:00.140  -->  00:05:03.053
finalScore is equal to 60.
125

125

00:05:03.950  -->  00:05:05.780
Now as you know from earlier in the course,
126

126

00:05:05.780  -->  00:05:07.750
this is an assignment expression.
127

127

00:05:07.750  -->  00:05:10.520
In this case, it assigns the literal value 60
128

128

00:05:10.520  -->  00:05:11.870
to our variable finalScore,
129

129

00:05:12.740  -->  00:05:15.380
and we can make this a statement by adding a semicolon
130

130

00:05:15.380  -->  00:05:16.530
to the end of the line,
131

131

00:05:17.560  -->  00:05:19.860
and that's now an expression statement.
132

132

00:05:19.860  -->  00:05:22.940
However, it was a expression before I did that,
133

133

00:05:22.940  -->  00:05:25.500
and just to prove that it was an expression,
134

134

00:05:25.500  -->  00:05:28.590
let's assign the value of this assignment expression,
135

135

00:05:28.590  -->  00:05:30.130
finalScore equals 60,
136

136

00:05:30.130  -->  00:05:33.120
to a new variable and then print it out.
137

137

00:05:33.120  -->  00:05:34.410
I'm gonna come back to the start of the line.
138

138

00:05:34.410  -->  00:05:35.460
I'm going to type int
139

139

00:05:36.430  -->  00:05:39.440
calculatedScore is equal to,
140

140

00:05:39.440  -->  00:05:41.800
and I've left the finalScore equals 60
141

141

00:05:41.800  -->  00:05:43.460
to the right-hand side of the equals sign,
142

142

00:05:43.460  -->  00:05:46.930
but clearly, finalScore equals 60 is an expression there,
143

143

00:05:46.930  -->  00:05:47.840
and what we've done there is
144

144

00:05:47.840  -->  00:05:50.210
we've created a declaration statement
145

145

00:05:50.210  -->  00:05:54.000
for int calculatedScore equals finalScore equals 60.
146

146

00:05:54.000  -->  00:05:57.310
Now looking at that line, you might that it looks a bit odd
147

147

00:05:57.310  -->  00:05:59.430
'cause we've got two equals signs there,
148

148

00:05:59.430  -->  00:06:01.460
but what we're doing is we're storing the value
149

149

00:06:01.460  -->  00:06:05.020
of the expression finalScore equals 60
150

150

00:06:05.020  -->  00:06:07.960
into the variable calculatedScore.
151

151

00:06:07.960  -->  00:06:10.500
So the expression finalScore equals 60,
152

152

00:06:10.500  -->  00:06:11.963
we know from earlier in the course
153

153

00:06:11.963  -->  00:06:14.270
that that returns the value that,
154

154

00:06:14.270  -->  00:06:16.080
the literal value in this case, 60,
155

155

00:06:16.080  -->  00:06:18.640
and let's confirm that by printing calculatedScore
156

156

00:06:19.670  -->  00:06:20.503
on the next line,
157

157

00:06:20.503  -->  00:06:21.890
just to confirm that it does actually give
158

158

00:06:21.890  -->  00:06:23.650
what you think it should give.
159

159

00:06:23.650  -->  00:06:25.240
So I'm just going do an output
160

160

00:06:25.240  -->  00:06:27.979
and type Calculated Score is equal to,
161

161

00:06:27.979  -->  00:06:30.603
and I'm going to just do a plus calculatedScore.
162

162

00:06:31.630  -->  00:06:33.040
Let's run this,
163

163

00:06:33.040  -->  00:06:35.260
and we should see the result 60
164

164

00:06:35.260  -->  00:06:38.010
output in the Output pane down the bottom.
165

165

00:06:38.010  -->  00:06:40.440
All right, you can see that Calculated Score equals 60,
166

166

00:06:40.440  -->  00:06:42.030
so clearly, looking at line 10,
167

167

00:06:42.030  -->  00:06:44.500
finalScore equals 60 was an expression.
168

168

00:06:44.500  -->  00:06:46.970
It returned the result 60
169

169

00:06:46.970  -->  00:06:50.130
because that's what was assigned to the variable finalScore,
170

170

00:06:50.130  -->  00:06:52.290
and we confirmed that that was an expression
171

171

00:06:52.290  -->  00:06:54.110
by printing out the value,
172

172

00:06:54.110  -->  00:06:56.320
and as I mentioned, on line 10,
173

173

00:06:56.320  -->  00:06:59.220
by adding the data type and the variable at the start,
174

174

00:06:59.220  -->  00:07:01.380
we've made that a declaration statement.
175

175

00:07:01.380  -->  00:07:05.500
So just to confirm what the expression statement looks like,
176

176

00:07:05.500  -->  00:07:07.640
we come down here to line 13,
177

177

00:07:07.640  -->  00:07:09.570
and I can just type in an expression statement,
178

178

00:07:09.570  -->  00:07:12.133
finalScore equals 70.
179

179

00:07:15.570  -->  00:07:17.780
So again, that's now an expression statement
180

180

00:07:17.780  -->  00:07:20.500
and not an expression because you've got the semicolon
181

181

00:07:20.500  -->  00:07:21.603
on the end of the line.
182

182

00:07:21.603  -->  00:07:23.700
All right, so let's end the video here.
183

183

00:07:23.700  -->  00:07:25.660
We've still got some other expression groups
184

184

00:07:25.660  -->  00:07:28.060
to go through for our expression statement,
185

185

00:07:28.060  -->  00:07:30.683
so we'll continue working on that in the next video.
