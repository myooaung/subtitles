WEBVTT
1
1

00:00:04.750  -->  00:00:07.689
So let's discuss reference types value
2

2

00:00:07.689  -->  00:00:09.580
types and the main differences between
3

3

00:00:09.580  -->  00:00:12.459
those so far we've seen primitive types
4

4

00:00:12.459  -->  00:00:15.549
like int double and ball new all the
5

5

00:00:15.549  -->  00:00:18.160
primitive types are value types in other
6

6

00:00:18.160  -->  00:00:21.070
words they hold a value now unlike
7

7

00:00:21.070  -->  00:00:23.230
primitive types an array is a reference
8

8

00:00:23.230  -->  00:00:25.720
type and string is also a reference type
9

9

00:00:25.720  -->  00:00:26.949
but we're going to talk more about
10

10

00:00:26.949  -->  00:00:28.419
string in later videos
11

11

00:00:28.419  -->  00:00:30.669
so let's now start though by going
12

12

00:00:30.669  -->  00:00:32.650
through this to make sense of it and we
13

13

00:00:32.650  -->  00:00:34.420
can just start and why main method that
14

14

00:00:34.420  -->  00:00:35.800
I've created and by the way I've created
15

15

00:00:35.800  -->  00:00:37.840
a new project that you can see here in
16

16

00:00:37.840  -->  00:00:40.030
IntelliJ called references vs. value
17

17

00:00:40.030  -->  00:00:42.730
types I'm gonna start by a topical code
18

18

00:00:42.730  -->  00:00:46.320
in the main method int my int value
19

19

00:00:46.320  -->  00:00:50.440
equals 10 then we're going to do the
20

20

00:00:50.440  -->  00:00:54.340
second line int another int value equals
21

21

00:00:54.340  -->  00:00:58.720
my int value okay so I've got two
22

22

00:00:58.720  -->  00:01:01.420
variables there my int value and another
23

23

00:01:01.420  -->  00:01:03.910
int value and we've assigned the value
24

24

00:01:03.910  -->  00:01:06.310
10 to my interfere the my into value
25

25

00:01:06.310  -->  00:01:08.290
variable and on the next line we're
26

26

00:01:08.290  -->  00:01:10.210
assigning the value of my into value
27

27

00:01:10.210  -->  00:01:12.610
which is 10 in this case to another int
28

28

00:01:12.610  -->  00:01:15.010
value so in other words both variables
29

29

00:01:15.010  -->  00:01:17.320
now I've got the value of 10 let's just
30

30

00:01:17.320  -->  00:01:19.360
quickly confirm that or just do a simple
31

31

00:01:19.360  -->  00:01:25.659
output might value equals plus might
32

32

00:01:25.659  -->  00:01:29.229
value which is the same for the another
33

33

00:01:29.229  -->  00:01:33.870
int value so another in family equals
34

34

00:01:33.870  -->  00:01:36.810
plus another in fali
35

35

00:01:36.810  -->  00:01:38.890
let's just run that to make sure that it
36

36

00:01:38.890  -->  00:01:40.990
works I'm course it there's no reason
37

37

00:01:40.990  -->  00:01:44.380
one that won't work so I've got the
38

38

00:01:44.380  -->  00:01:46.720
value of 10 there let's put the window
39

39

00:01:46.720  -->  00:01:51.670
down the bottom move alright so next
40

40

00:01:51.670  -->  00:01:53.710
what we're going to do let's increment
41

41

00:01:53.710  -->  00:01:55.229
another in Feli
42

42

00:01:55.229  -->  00:01:57.340
there you go down there's a line and are
43

43

00:01:57.340  -->  00:01:58.930
there your printing statements and do
44

44

00:01:58.930  -->  00:02:01.090
another value another in valley plus
45

45

00:02:01.090  -->  00:02:04.450
plus and a semicolon let's print out
46

46

00:02:04.450  -->  00:02:06.670
both valleys again I'll just copy that
47

47

00:02:06.670  -->  00:02:08.679
and then paste the code in again so
48

48

00:02:08.679  -->  00:02:10.869
you've got it before and after there or
49

49

00:02:10.869  -->  00:02:16.480
run the code you can see the second time
50

50

00:02:16.480  -->  00:02:18.069
that I've run up this time another
51

51

00:02:18.069  -->  00:02:20.170
invalid with the value 11 and of course
52

52

00:02:20.170  -->  00:02:22.630
my int value is and is unchanged and
53

53

00:02:22.630  -->  00:02:25.300
still has the value of 10 so that's not
54

54

00:02:25.300  -->  00:02:26.890
fairly straightforward and I'm sure that
55

55

00:02:26.890  -->  00:02:29.830
you understand how that's working given
56

56

00:02:29.830  -->  00:02:30.880
what we've been through the course so
57

57

00:02:30.880  -->  00:02:34.120
far so that's value types so when we
58

58

00:02:34.120  -->  00:02:36.910
created a an int variable this value top
59

59

00:02:36.910  -->  00:02:40.030
a single space in memory is allocated to
60

60

00:02:40.030  -->  00:02:42.220
store the value and that variable
61

61

00:02:42.220  -->  00:02:44.380
directly holds a value now if you'll
62

62

00:02:44.380  -->  00:02:46.930
sign it to another variable the value is
63

63

00:02:46.930  -->  00:02:49.720
copied directly and then both variables
64

64

00:02:49.720  -->  00:02:51.520
work independently as you can see and of
65

65

00:02:51.520  -->  00:02:53.800
each have their own copy of a specific
66

66

00:02:53.800  -->  00:02:55.569
value in the case of might value it's 10
67

67

00:02:55.569  -->  00:02:59.170
and another in value 11 now reference
68

68

00:02:59.170  -->  00:03:02.200
types like a raised or classes work
69

69

00:03:02.200  -->  00:03:04.180
differently you have already discussed
70

70

00:03:04.180  -->  00:03:06.099
what a reference is how it works and the
71

71

00:03:06.099  -->  00:03:08.500
new operator so whenever you see the new
72

72

00:03:08.500  -->  00:03:10.870
keyword that means that we're creating a
73

73

00:03:10.870  -->  00:03:13.770
new object so let's create a new array
74

74

00:03:13.770  -->  00:03:16.030
and then come to come down here after
75

75

00:03:16.030  -->  00:03:18.900
the second print house and type int int
76

76

00:03:18.900  -->  00:03:21.310
array so enter left and right square
77

77

00:03:21.310  -->  00:03:26.340
braces my int array is equal to new int
78

78

00:03:26.340  -->  00:03:30.340
and in square brackets 5 semicolon on
79

79

00:03:30.340  -->  00:03:32.620
the end so this array has got five
80

80

00:03:32.620  -->  00:03:34.900
elements and we have a variable or in
81

81

00:03:34.900  -->  00:03:38.170
other words a reference Wyant array now
82

82

00:03:38.170  -->  00:03:40.959
arrays again are reference types so what
83

83

00:03:40.959  -->  00:03:43.150
does this mean again all reference types
84

84

00:03:43.150  -->  00:03:45.970
are used by a reference so we're
85

85

00:03:45.970  -->  00:03:47.410
reference holds of reference or an
86

86

00:03:47.410  -->  00:03:50.860
address to the object but not the object
87

87

00:03:50.860  -->  00:03:53.170
itself so again a reference holds a
88

88

00:03:53.170  -->  00:03:55.120
reference or an address to the object
89

89

00:03:55.120  -->  00:03:57.790
but not the object itself so in other
90

90

00:03:57.790  -->  00:03:59.739
words the variable here my eat array
91

91

00:03:59.739  -->  00:04:02.560
holds a reference or address to an array
92

92

00:04:02.560  -->  00:04:04.840
in memory with reference to
93

93

00:04:04.840  -->  00:04:06.760
we're using a reference to control the
94

94

00:04:06.760  -->  00:04:09.310
object in memory so we can access the
95

95

00:04:09.310  -->  00:04:11.739
object directly so a reference is like
96

96

00:04:11.739  -->  00:04:13.690
an address some of some object in memory
97

97

00:04:13.690  -->  00:04:16.299
in this case again my int array is
98

98

00:04:16.299  -->  00:04:18.729
actually a reference to the array in
99

99

00:04:18.729  -->  00:04:20.380
memory now this might sound a bit
100

100

00:04:20.380  -->  00:04:22.030
confusing I'm going to show you some
101

101

00:04:22.030  -->  00:04:23.229
slides in a little while that should
102

102

00:04:23.229  -->  00:04:25.270
hopefully make things a bit clearer but
103

103

00:04:25.270  -->  00:04:26.470
let's see what happens if you write
104

104

00:04:26.470  -->  00:04:28.210
cement some code that was similar to
105

105

00:04:28.210  -->  00:04:30.580
what we've done with the int so far in
106

106

00:04:30.580  -->  00:04:32.020
the program what I'm going to do is
107

107

00:04:32.020  -->  00:04:34.780
create another array here on the next
108

108

00:04:34.780  -->  00:04:38.470
line int int array again it left or
109

109

00:04:38.470  -->  00:04:40.060
right square brackets and we'll call
110

110

00:04:40.060  -->  00:04:43.180
this one another array is equal to Y int
111

111

00:04:43.180  -->  00:04:46.750
array so what have we done on this line
112

112

00:04:46.750  -->  00:04:48.820
line 19 well here we're declaring
113

113

00:04:48.820  -->  00:04:51.310
another reference to the same array in
114

114

00:04:51.310  -->  00:04:53.950
memory so now we've got two references
115

115

00:04:53.950  -->  00:04:57.460
pointing to the same array in memory so
116

116

00:04:57.460  -->  00:04:59.440
in other words both my inter a and
117

117

00:04:59.440  -->  00:05:03.130
another array hold the same address so
118

118

00:05:03.130  -->  00:05:04.690
as you can see one way to know it's a
119

119

00:05:04.690  -->  00:05:06.610
reference type is the new operator
120

120

00:05:06.610  -->  00:05:08.650
because that creates a new object in
121

121

00:05:08.650  -->  00:05:09.669
memory and we're using the new operator
122

122

00:05:09.669  -->  00:05:12.250
on line 18 and we created an array of
123

123

00:05:12.250  -->  00:05:14.229
five elements on line 18
124

124

00:05:14.229  -->  00:05:16.990
so basically new here means new object
125

125

00:05:16.990  -->  00:05:19.300
and the second line we haven't used the
126

126

00:05:19.300  -->  00:05:21.610
new keyword we've just used the equal
127

127

00:05:21.610  -->  00:05:24.370
sign you have to print them out we're
128

128

00:05:24.370  -->  00:05:26.289
going to use a useful static method from
129

129

00:05:26.289  -->  00:05:28.539
the class arrays which is built into
130

130

00:05:28.539  -->  00:05:32.020
Java it's a method called to string so
131

131

00:05:32.020  -->  00:05:33.490
hopefully from the name as I type the
132

132

00:05:33.490  -->  00:05:34.870
code you'll probably understand what
133

133

00:05:34.870  -->  00:05:37.120
this will do let's try sorry in double
134

134

00:05:37.120  -->  00:05:41.440
quotes every equals and I can type plus
135

135

00:05:41.440  -->  00:05:45.880
a rice dot two string then parenthesis
136

136

00:05:45.880  -->  00:05:49.210
I'm going to type by int array again
137

137

00:05:49.210  -->  00:05:50.889
that's a useful command built-in to Java
138

138

00:05:50.889  -->  00:05:52.389
that will print out the contents of an
139

139

00:05:52.389  -->  00:05:55.020
entire array so this method to string
140

140

00:05:55.020  -->  00:05:57.520
which you'll see or frequently as we go
141

141

00:05:57.520  -->  00:05:59.440
through the course joins multiple
142

142

00:05:59.440  -->  00:06:01.840
strings or objects into a string using a
143

143

00:06:01.840  -->  00:06:04.180
comma as a separator so in this case
144

144

00:06:04.180  -->  00:06:07.180
we've got an array of integers so the to
145

145

00:06:07.180  -->  00:06:08.680
string method is going to convert every
146

146

00:06:08.680  -->  00:06:11.800
element in the array to a string and
147

147

00:06:11.800  -->  00:06:13.719
then return a new string where every
148

148

00:06:13.719  -->  00:06:15.490
element is separated nicely and we can
149

149

00:06:15.490  -->  00:06:18.070
print the whole array on one line
150

150

00:06:18.070  -->  00:06:19.900
so it's pretty useful method and you'll
151

151

00:06:19.900  -->  00:06:21.430
soon see how nicely it prints out our
152

152

00:06:21.430  -->  00:06:23.890
array so let's do the same for the
153

153

00:06:23.890  -->  00:06:26.980
another array variable as well rip that
154

154

00:06:26.980  -->  00:06:32.350
out another array equals plus it's
155

155

00:06:32.350  -->  00:06:35.320
arrays dr. string in parentheses is
156

156

00:06:35.320  -->  00:06:39.400
going to be another array the two right
157

157

00:06:39.400  -->  00:06:42.040
parentheses to close it off we'll just
158

158

00:06:42.040  -->  00:06:46.960
run that and you can see that it's
159

159

00:06:46.960  -->  00:06:49.390
nicely printed at the values we've got
160

160

00:06:49.390  -->  00:06:50.890
zero because so all we've done is
161

161

00:06:50.890  -->  00:06:53.860
defined the int in the array they're
162

162

00:06:53.860  -->  00:06:55.720
initialized cause it's an int to 0 by
163

163

00:06:55.720  -->  00:06:57.850
default we've also got the same output
164

164

00:06:57.850  -->  00:06:59.500
for another array there
165

165

00:06:59.500  -->  00:07:01.690
so let's actually see what happens if we
166

166

00:07:01.690  -->  00:07:04.570
make a change to one array so I'm going
167

167

00:07:04.570  -->  00:07:07.270
to come down to the code below here and
168

168

00:07:07.270  -->  00:07:10.840
I'm going to type another array and in
169

169

00:07:10.840  -->  00:07:14.800
square brackets 0 equals 1 so 0 in the
170

170

00:07:14.800  -->  00:07:19.270
square brackets equals 1 semicolon and
171

171

00:07:19.270  -->  00:07:20.560
let's just take a copy of that line
172

172

00:07:20.560  -->  00:07:24.970
again paste at it but just to make it
173

173

00:07:24.970  -->  00:07:26.860
really clear I'm going to change the
174

174

00:07:26.860  -->  00:07:33.990
text to what after change after change
175

175

00:07:33.990  -->  00:07:36.160
that way we can see the change hopefully
176

176

00:07:36.160  -->  00:07:38.080
easily so what do you think is going to
177

177

00:07:38.080  -->  00:07:40.000
happen at this point will it change just
178

178

00:07:40.000  -->  00:07:42.220
another array or will it in fact change
179

179

00:07:42.220  -->  00:07:45.370
both variables well let's run this and
180

180

00:07:45.370  -->  00:07:50.260
see what happens you can see what's
181

181

00:07:50.260  -->  00:07:51.340
happened down the bottom left-hand
182

182

00:07:51.340  -->  00:07:53.680
corner of the screen there both were
183

183

00:07:53.680  -->  00:07:56.380
actually changed so both variables in
184

184

00:07:56.380  -->  00:07:58.450
other words again a references to an
185

185

00:07:58.450  -->  00:08:01.090
array and because we've updated another
186

186

00:08:01.090  -->  00:08:04.510
array to one it automatically updated
187

187

00:08:04.510  -->  00:08:06.010
the other array because that's because
188

188

00:08:06.010  -->  00:08:08.800
both variables are referencing the same
189

189

00:08:08.800  -->  00:08:10.720
array in memory so there's only one copy
190

190

00:08:10.720  -->  00:08:13.030
of the array that both variables are
191

191

00:08:13.030  -->  00:08:15.100
pointing to and that's why the array has
192

192

00:08:15.100  -->  00:08:17.950
been updated as it has now this might
193

193

00:08:17.950  -->  00:08:19.300
look a bit weird but that's how
194

194

00:08:19.300  -->  00:08:21.850
references work and you'll soon see on
195

195

00:08:21.850  -->  00:08:23.530
the slides that I'm about to bring up on
196

196

00:08:23.530  -->  00:08:25.990
the screen and it's because reference
197

197

00:08:25.990  -->  00:08:28.000
types represent the address of the
198

198

00:08:28.000  -->  00:08:31.319
variable rather than the data itself
199

199

00:08:31.319  -->  00:08:33.570
so in our case again both variables
200

200

00:08:33.570  -->  00:08:36.539
represent the address pointing to the
201

201

00:08:36.539  -->  00:08:39.300
same array in memory so in in effect
202

202

00:08:39.300  -->  00:08:41.940
we've only got one array in memory that
203

203

00:08:41.940  -->  00:08:44.579
both are pointing to well so let's check
204

204

00:08:44.579  -->  00:08:45.899
out those slides to hopefully make
205

205

00:08:45.899  -->  00:08:48.029
things have been easier to understand
206

206

00:08:48.029  -->  00:08:50.730
what's going on so here we've got the
207

207

00:08:50.730  -->  00:08:52.709
same code from IntelliJ when the line
208

208

00:08:52.709  -->  00:08:54.690
int left right square bracket by array
209

209

00:08:54.690  -->  00:08:57.209
equals new in five in square brackets
210

210

00:08:57.209  -->  00:08:59.940
execute the line creates a new array in
211

211

00:08:59.940  -->  00:09:01.759
memory with five elements and
212

212

00:09:01.759  -->  00:09:04.110
initializes all elements to zero and
213

213

00:09:04.110  -->  00:09:06.300
that's because by default numeric arrays
214

214

00:09:06.300  -->  00:09:07.740
are initialized to zero because they
215

215

00:09:07.740  -->  00:09:09.899
have type int in this case so now we've
216

216

00:09:09.899  -->  00:09:12.600
got a reference that points to the array
217

217

00:09:12.600  -->  00:09:15.029
address in memory and on the image you
218

218

00:09:15.029  -->  00:09:16.550
can see an arrow from the reference
219

219

00:09:16.550  -->  00:09:19.350
pointing to the array in memory going to
220

220

00:09:19.350  -->  00:09:22.110
ray pointing to that array so in the
221

221

00:09:22.110  -->  00:09:23.610
next line we're creating another
222

222

00:09:23.610  -->  00:09:25.949
reference to the same array then notice
223

223

00:09:25.949  -->  00:09:27.269
on the image we've still only got the
224

224

00:09:27.269  -->  00:09:29.310
one array but we've now got two
225

225

00:09:29.310  -->  00:09:31.350
references that point to that same array
226

226

00:09:31.350  -->  00:09:33.269
in memory so in other words to the same
227

227

00:09:33.269  -->  00:09:35.279
address in memory each reference or
228

228

00:09:35.279  -->  00:09:38.130
variable has a different name but that
229

229

00:09:38.130  -->  00:09:39.180
doesn't mean there's two different
230

230

00:09:39.180  -->  00:09:41.490
arrays you've got two references but
231

231

00:09:41.490  -->  00:09:43.649
both as you can see clearly point to the
232

232

00:09:43.649  -->  00:09:47.010
same one array the next two lines while
233

233

00:09:47.010  -->  00:09:48.360
that is printing up the array to the
234

234

00:09:48.360  -->  00:09:50.370
console we're printing the same array
235

235

00:09:50.370  -->  00:09:51.959
again because there's only the one array
236

236

00:09:51.959  -->  00:09:54.420
in memory every element has the value 0
237

237

00:09:54.420  -->  00:09:57.019
and that's exactly what's printed out
238

238

00:09:57.019  -->  00:10:00.360
the next slide another array 0 in square
239

239

00:10:00.360  -->  00:10:02.310
brackets equals 1 so we're assigning the
240

240

00:10:02.310  -->  00:10:04.620
value of 1 to the first element of the
241

241

00:10:04.620  -->  00:10:06.779
array you can see that that in red in
242

242

00:10:06.779  -->  00:10:08.819
the bottom left-hand corner that puts
243

243

00:10:08.819  -->  00:10:11.089
the value 1 into the element at index 0
244

244

00:10:11.089  -->  00:10:13.260
so in other words we're setting the
245

245

00:10:13.260  -->  00:10:15.660
element at index 0 the first element of
246

246

00:10:15.660  -->  00:10:17.790
the array to hold the value 1
247

247

00:10:17.790  -->  00:10:20.370
now since another array and my enter a
248

248

00:10:20.370  -->  00:10:22.410
are two references pointing to the same
249

249

00:10:22.410  -->  00:10:24.689
array we could say that both references
250

250

00:10:24.689  -->  00:10:26.910
can see the change so in other words
251

251

00:10:26.910  -->  00:10:28.860
we've got one array in memory so
252

252

00:10:28.860  -->  00:10:30.029
whatever reference to the array we use
253

253

00:10:30.029  -->  00:10:32.100
the other references are still pointing
254

254

00:10:32.100  -->  00:10:33.750
to the same address and we're getting
255

255

00:10:33.750  -->  00:10:35.639
the same output back as a result of
256

256

00:10:35.639  -->  00:10:38.639
making that change all right so we're
257

257

00:10:38.639  -->  00:10:40.889
putting out the other last two lines and
258

258

00:10:40.889  -->  00:10:42.089
again since we're printing the same
259

259

00:10:42.089  -->  00:10:43.860
array out and since we changed a right
260

260

00:10:43.860  -->  00:10:45.130
element at index you
261

261

00:10:45.130  -->  00:10:48.430
to one we see the change for both lines
262

262

00:10:48.430  -->  00:10:50.860
for the first element in element zero
263

263

00:10:50.860  -->  00:10:53.950
now showing the value 1 instead of 0 so
264

264

00:10:53.950  -->  00:10:55.540
both references again see the change
265

265

00:10:55.540  -->  00:10:57.580
that we made and we get 1 is the first
266

266

00:10:57.580  -->  00:10:59.770
element in the array in the same
267

267

00:10:59.770  -->  00:11:01.810
behavior happens when we pass reference
268

268

00:11:01.810  -->  00:11:04.690
types to methods let's jump back to
269

269

00:11:04.690  -->  00:11:07.150
IntelliJ to see another example using
270

270

00:11:07.150  -->  00:11:10.600
methods what I'm going to do now is
271

271

00:11:10.600  -->  00:11:13.000
close down the run window for now and
272

272

00:11:13.000  -->  00:11:14.350
we're going to create another method
273

273

00:11:14.350  -->  00:11:21.370
here and type private static void modify
274

274

00:11:21.370  -->  00:11:25.060
array in parentheses int at the right
275

275

00:11:25.060  -->  00:11:28.150
square brackets array then we have an
276

276

00:11:28.150  -->  00:11:30.490
echo block and what we're going to do is
277

277

00:11:30.490  -->  00:11:34.720
change the array position the contents
278

278

00:11:34.720  -->  00:11:36.970
of the array element 0 to a value of 2
279

279

00:11:36.970  -->  00:11:39.310
so I'm going to stop array with square
280

280

00:11:39.310  -->  00:11:43.860
brackets 0 right square bracket equals 2
281

281

00:11:43.860  -->  00:11:46.690
very simple as you can see then what
282

282

00:11:46.690  -->  00:11:48.690
we're going to do now is call this array
283

283

00:11:48.690  -->  00:11:51.010
this modifier array method we're going
284

284

00:11:51.010  -->  00:11:54.630
to type what if I write we're gonna pass
285

285

00:11:54.630  -->  00:11:59.680
my int array so we're passing a
286

286

00:11:59.680  -->  00:12:01.870
reference type to the method so in this
287

287

00:12:01.870  -->  00:12:03.610
case we're using their reference to my
288

288

00:12:03.610  -->  00:12:05.800
into a so what if it's going to happen
289

289

00:12:05.800  -->  00:12:07.480
when we pass the reference type to the
290

290

00:12:07.480  -->  00:12:09.940
method well the address is copied to a
291

291

00:12:09.940  -->  00:12:11.950
parameter so in other words now we've
292

292

00:12:11.950  -->  00:12:14.500
got three references to the same array
293

293

00:12:14.500  -->  00:12:17.860
the parameter is the third reference to
294

294

00:12:17.860  -->  00:12:19.780
the array and just to confirm that let's
295

295

00:12:19.780  -->  00:12:22.450
actually print both references after the
296

296

00:12:22.450  -->  00:12:25.000
modify array method call so I'm just
297

297

00:12:25.000  -->  00:12:26.350
going to copy and paste the two lines
298

298

00:12:26.350  -->  00:12:29.710
the pub paste that below the modify
299

299

00:12:29.710  -->  00:12:33.040
array our changes have to change too
300

300

00:12:33.040  -->  00:12:39.520
after modify so that's run this and see
301

301

00:12:39.520  -->  00:12:42.940
what happens you can see what's happened
302

302

00:12:42.940  -->  00:12:44.290
down there by the output on the bottom
303

303

00:12:44.290  -->  00:12:46.120
left-hand corner of the screen the first
304

304

00:12:46.120  -->  00:12:47.860
element in both cases now holds the
305

305

00:12:47.860  -->  00:12:50.140
value of two and this is because all
306

306

00:12:50.140  -->  00:12:52.690
references point to the same array we've
307

307

00:12:52.690  -->  00:12:54.550
just had the one arraign memory still in
308

308

00:12:54.550  -->  00:12:56.290
this scenario so you may think that a
309

309

00:12:56.290  -->  00:12:58.880
method can modify a reference itself but
310

310

00:12:58.880  -->  00:13:01.880
we can only dereference it but let's see
311

311

00:13:01.880  -->  00:13:03.649
what happens if we do dereference or in
312

312

00:13:03.649  -->  00:13:06.350
other words reinitialize the array that
313

313

00:13:06.350  -->  00:13:08.480
we received by our parameter to our
314

314

00:13:08.480  -->  00:13:11.420
method what we're going to do is in our
315

315

00:13:11.420  -->  00:13:13.550
modifier a row method after that line
316

316

00:13:13.550  -->  00:13:17.829
we're going to type array equals new int
317

317

00:13:17.829  -->  00:13:20.509
just to write square brackets then we're
318

318

00:13:20.509  -->  00:13:22.579
going to initialize it by using a
319

319

00:13:22.579  -->  00:13:24.529
left-to-right curly braces you know put
320

320

00:13:24.529  -->  00:13:29.240
one two three four five so in this case
321

321

00:13:29.240  -->  00:13:31.579
we're creating a new array so we have to
322

322

00:13:31.579  -->  00:13:33.139
use the new inter square brackets and
323

323

00:13:33.139  -->  00:13:35.209
then initialize the array with the
324

324

00:13:35.209  -->  00:13:36.620
contents in the left-to-right curly
325

325

00:13:36.620  -->  00:13:38.779
braces now you may think that references
326

326

00:13:38.779  -->  00:13:41.269
in the main method may enter a and
327

327

00:13:41.269  -->  00:13:43.730
another array will be able to see this
328

328

00:13:43.730  -->  00:13:46.250
change but you see that they're not able
329

329

00:13:46.250  -->  00:13:49.130
to see it because we D referencing the
330

330

00:13:49.130  -->  00:13:51.019
reference in other words this parameter
331

331

00:13:51.019  -->  00:13:53.089
is a reference that points now to a
332

332

00:13:53.089  -->  00:13:55.279
different array since we used a new
333

333

00:13:55.279  -->  00:13:57.440
keyword so now it points to a new array
334

334

00:13:57.440  -->  00:14:00.350
with the elements 1 2 3 4 5 to see what
335

335

00:14:00.350  -->  00:14:04.370
I mean let's run this so you can see in
336

336

00:14:04.370  -->  00:14:06.620
the case of my entering another array
337

337

00:14:06.620  -->  00:14:09.800
they've still got the values to which
338

338

00:14:09.800  -->  00:14:13.250
was set on line 39 again the reason for
339

339

00:14:13.250  -->  00:14:15.439
that is because the parameter reference
340

340

00:14:15.439  -->  00:14:18.050
the one that has the name array points
341

341

00:14:18.050  -->  00:14:20.360
nearer to a different array once we use
342

342

00:14:20.360  -->  00:14:22.269
the equal sign we're effectively
343

343

00:14:22.269  -->  00:14:24.769
dereferencing that reference and an
344

344

00:14:24.769  -->  00:14:26.600
array has been created in a new area of
345

345

00:14:26.600  -->  00:14:30.079
memory than array points to however I
346

346

00:14:30.079  -->  00:14:33.230
enter a and another array are still
347

347

00:14:33.230  -->  00:14:35.089
referencing the original array and
348

348

00:14:35.089  -->  00:14:37.069
nothing's changed they're still pointing
349

349

00:14:37.069  -->  00:14:39.949
to that original array now the same
350

350

00:14:39.949  -->  00:14:42.290
would be if we change the other array so
351

351

00:14:42.290  -->  00:14:43.639
let's just see one more example before
352

352

00:14:43.639  -->  00:14:45.980
finishing this video with dereferencing
353

353

00:14:45.980  -->  00:14:48.709
so just before they modify array method
354

354

00:14:48.709  -->  00:14:51.110
call up here I'm going to change the
355

355

00:14:51.110  -->  00:14:52.639
another array let's try and do that so
356

356

00:14:52.639  -->  00:14:57.740
another array equals new int that's the
357

357

00:14:57.740  -->  00:14:59.509
right square braces then we're going to
358

358

00:14:59.509  -->  00:15:06.710
put the values there 4 5 6 7 8
359

359

00:15:06.710  -->  00:15:08.810
so now we're creating a new object in
360

360

00:15:08.810  -->  00:15:11.540
memory and monterrey and another array
361

361

00:15:11.540  -->  00:15:13.970
they point now to a different object in
362

362

00:15:13.970  -->  00:15:16.160
memory so now we've got two references
363

363

00:15:16.160  -->  00:15:19.190
and two different arrays in memory so
364

364

00:15:19.190  -->  00:15:21.020
let's run it once more and see what
365

365

00:15:21.020  -->  00:15:26.450
happens so you can see now we've got
366

366

00:15:26.450  -->  00:15:28.370
different results here you can see now
367

367

00:15:28.370  -->  00:15:30.530
that the another array no longer gets to
368

368

00:15:30.530  -->  00:15:32.450
change from the modifier array method
369

369

00:15:32.450  -->  00:15:34.880
call because before calling the method
370

370

00:15:34.880  -->  00:15:38.150
modify array when dereferencing the
371

371

00:15:38.150  -->  00:15:40.010
another array reference and it Neal
372

372

00:15:40.010  -->  00:15:41.510
points to a different array in memory
373

373

00:15:41.510  -->  00:15:44.570
and again the hint for that is the fact
374

374

00:15:44.570  -->  00:15:47.060
that we used a new keyword again alive
375

375

00:15:47.060  -->  00:15:49.010
for anyone now this was hard to grasp
376

376

00:15:49.010  -->  00:15:51.140
try to re-watch the video and play
377

377

00:15:51.140  -->  00:15:53.450
around with these examples because it's
378

378

00:15:53.450  -->  00:15:55.220
a very important concept to understand
379

379

00:15:55.220  -->  00:15:57.050
but once you get it you'll see that it
380

380

00:15:57.050  -->  00:15:59.360
does make complete sense so that was it
381

381

00:15:59.360  -->  00:16:01.580
that's reference in value types they
382

382

00:16:01.580  -->  00:16:04.010
can't be sometimes hard to grasp but
383

383

00:16:04.010  -->  00:16:05.360
we're going to use references in the
384

384

00:16:05.360  -->  00:16:07.040
course more often and it'll become
385

385

00:16:07.040  -->  00:16:08.810
easier over time the more you continue
386

386

00:16:08.810  -->  00:16:10.790
to work with it let's finish the video
387

387

00:16:10.790  -->  00:16:14.710
now and move on to the next one.
