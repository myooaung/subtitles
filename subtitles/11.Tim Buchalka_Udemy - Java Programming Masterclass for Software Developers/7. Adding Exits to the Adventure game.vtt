WEBVTT
1
1

00:00:05.210  -->  00:00:08.690
in the previous video we started off
on our adventure game and we had a very
2

2

00:00:08.690  -->  00:00:14.570
simple mechanism that when we ran it were able
to type in a number corresponding to a
3

3

00:00:14.570  -->  00:00:18.460
location and it would actually the
program would print out the location and
4

4

00:00:18.460  -->  00:00:22.820
description by retrieving it from our map
which we defined on line 8 and of course
5

5

00:00:22.820  -->  00:00:26.840
entering in zero would break out of the
loop and ultimately quit the program
6

6

00:00:26.840  -->  00:00:30.610
and the other thing we had some very basic
validation in there
7

7

00:00:30.610  -->  00:00:36.410
on line 28, on line 27 we accepted the input
for the particular location on line
8

8

00:00:36.410  -->  00:00:40.460
28 we did a check to see
whether that key existed in our
9

9

00:00:40.460  -->  00:00:44.160
map which the key was just the
number of this case at this stage for
10

10

00:00:44.160  -->  00:00:48.100
our location and we get an error message
saying you cannot go in that direction
11

11

00:00:48.100  -->  00:00:53.960
if we couldn't that location in the map
12

12

00:00:53.960  -->  00:00:57.230
but we have a problem and this
what happens
13

13

00:00:57.230  -->  00:01:08.300
If we run it, and clear a bit ofe space to the
left side, like so, will open up the
14

14

00:01:08.300  -->  00:01:13.710
project window if we need to and you can see that
was got our start here now, we can enter a valid
15

15

00:01:13.710  -->  00:01:20.290
location, 2, thats working ok, but if we enter something like 25 we actually
16

16

00:01:20.290  -->  00:01:23.740
get an exception so it kinda does quite
helpful telling us that we can't go in that
17

17

00:01:23.740  -->  00:01:28.700
direction then what happens is that it loops
back and tries to retrieve that location
18

18

00:01:28.700  -->  00:01:31.960
and obviously gets itself into
difficulty on line 22 when trying to
19

19

00:01:31.960  -->  00:01:37.420
print out the location based on our get
for that particular location now we
20

20

00:01:37.420  -->  00:01:41.030
won't fix that bug and the reason for
that is we are going to extend the program
21

21

00:01:41.030  -->  00:01:46.570
anyway and if you look back at the
locations classic again, remember that
22

22

00:01:46.570  -->  00:01:52.430
on line 12 we definded an exits field and
that's also a map and
23

23

00:01:52.430  -->  00:01:56.390
that also contains a string for the key and
integer value, so sorts of other way round
24

24

00:01:56.390  -->  00:02:03.740
so getting back to the main of course we
had integer and location, but in location here
25

25

00:02:03.740  -->  00:02:08.130
for the map its string and an integer so the idea here is that the keys is going to
26

26

00:02:08.130  -->  00:02:12.200
be the direction, where we will start by
using the initial letters north-south
27

27

00:02:12.200  -->  00:02:16.990
N,S,E,W to signify north, south, east and west and q to quit
28

28

00:02:16.990  -->  00:02:20.600
and the value will be the number of the
location where we will get to if we go in that
29

29

00:02:20.600  -->  00:02:24.980
direction which will be sort of the
location ID, and just to help you
30

30

00:02:24.980  -->  00:02:28.540
understand what we're trying to do here, I’m going to open up an image on the screen
31

31

00:02:28.540  -->  00:02:33.780
here’s an image on the screen here now and you
can see that the various like locations
32

32

00:02:33.780  -->  00:02:38.350
are indicated as you can see on the screen
and there's also the valid directions
33

33

00:02:38.350  -->  00:02:43.630
the valid exits in other words you can go
to, from each particular location so this is
34

34

00:02:43.630  -->  00:02:49.820
a map but an adventure map not a Java map of the locations that are going to be valid for our game
35

35

00:02:49.820  -->  00:02:55.230
and just to confirm starting from location one which is the road you can
36

36

00:02:55.230  -->  00:02:59.000
see that from there we can go in on all 4
compass directions and the arrow show
37

37

00:02:59.000  -->  00:03:03.630
the locations linked as you can see there, so some links only go 1 way for example
38

38

00:03:03.630  -->  00:03:08.420
from the valley you can only go one way going
west to the hill you can't go back
39

39

00:03:08.420  -->  00:03:13.660
directly from the hill back to the valley thats the way this mapping works in our adventure
40

40

00:03:13.660  -->  00:03:18.010
game and so consequently what we're
going to do is for example with Valley
41

41

00:03:18.010  -->  00:03:22.430
what will do is for our map will add an entry W
42

42

00:03:22.430  -->  00:03:25.400
that standing for west and in the room number in
this case is 2 so that would indicate
43

43

00:03:25.400  -->  00:03:32.000
that room location 4, it's
44

44

00:03:32.000  -->  00:03:39.030
only exit in this case is to the west which
is going to go to location 2, so lets go ahead
45

45

00:03:39.030  -->  00:03:45.730
and put some code in there now and we go back to main
to do that and what we're going to do
46

46

00:03:45.730  -->  00:03:50.870
here is just below the initial set of locations you can see that we've added
47

47

00:03:50.870  -->  00:03:56.460
the locations but what we wanna do now is add the
exits for each location and
48

48

00:03:56.460  -->  00:03:59.670
unfortunately map literals is still not
available in Java which is a bit
49

49

00:03:59.670  -->  00:04:02.840
annoying there was talk of including
them in Java 8 but it didn't happen
50

50

00:04:02.840  -->  00:04:06.990
so as a result we really have to use
repeated calls to add exit for each location
51

51

00:04:06.990  -->  00:04:09.950
which is a little painful but it does
get the job done
52

52

00:04:09.950  -->  00:04:18.080
so type locations…so we are getting room one… and locations one, if we go
53

53

00:04:18.080  -->  00:04:22.590
back here, location 1 is the road so now we are going to map out the available exits and
54

54

00:04:22.590  -->  00:04:23.780
you can see that we've got
55

55

00:04:23.780  -->  00:04:28.950
west, north, east, and south, as valid
directions from location 1 so what we
56

56

00:04:28.950  -->  00:04:35.660
gonna do is add exits… and add the key W
57

57

00:04:35.660  -->  00:04:46.270
and what I’ll do is just copy the following line, and paste it 3 times, so on the west we went to room 2
58

58

00:04:46.270  -->  00:04:56.780
east and of course we went to room 3, South was room
4…and north to room 5
59

59

00:04:56.780  -->  00:05:07.520
north…and we need one more and thats quit… Q is our quit keywords, so
60

60

00:05:07.520  -->  00:05:12.260
just to refresh that so you can understand
what we're doing here so from room one
61

61

00:05:12.260  -->  00:05:21.010
west 2 on line 20 where west goes to room 2, and on line 21
east goes to room 3 south goes
62

62

00:05:21.010  -->  00:05:25.970
to room 4 and finally north goes to
room 5 and of course q is our quit
63

63

00:05:25.970  -->  00:05:32.390
which goes too location zero which is the special location too indicate that we are finishing the game
64

64

00:05:32.390  -->  00:05:35.950
so that’s what we're mapping each room, so let's go
ahead now and map the rest of the rooms
65

65

00:05:35.950  -->  00:05:43.720
out and we can continue on, to the next one be for room 2, and for that one
66

66

00:05:43.720  -->  00:05:58.070
the two options were to go north to room 5 then
the only other one was to quit… and the
67

67

00:05:58.070  -->  00:06:05.590
next one is three and 3 and had
a West which went to room one…
68

68

00:06:08.830  -->  00:06:11.480
and we have to add a quit as well
69

69

00:06:11.480  -->  00:06:22.730
qui which goes to room 0, next for room 4 we got a north and
west option so 4, and that goesto north which goes to room
70

70

00:06:22.730  -->  00:06:28.670
one which happens to be correct and the
next one is still room 4 which goes to
71

71

00:06:28.670  -->  00:06:36.750
west, we’re going to go to room 2 and of course we
need a quit as always which goes to
72

72

00:06:36.750  -->  00:06:58.520
room 0 ok so were getting through them now, we just got room 5 left, and room 5 has got… and two more for location 5, west is going
73

73

00:06:58.520  -->  00:07:06.350
to go to room 2… and quit is going to go to room 0… so that should be it so very briefly going back
74

74

00:07:06.350  -->  00:07:11.140
and looking at our image again, for example
location for room 4 which is the
75

75

00:07:11.140  -->  00:07:15.010
value down here you can see north goes
up to
76

76

00:07:15.010  -->  00:07:21.560
location 1 correctly which is Road and
West for locations for on line 33 goes to
77

77

00:07:21.560  -->  00:07:26.970
hill in location 2 and from the hills
78

78

00:07:26.970  -->  00:07:33.940
perspective you can see that
location two, there are two exits from one to four but
79

79

00:07:33.940  -->  00:07:35.910
there's no way to go back to them
80

80

00:07:35.910  -->  00:07:39.970
we’ve got these arrows going multiple ways if
there is a case to go back that way so in
81

81

00:07:39.970  -->  00:07:43.860
other words you can only get to the hill
from the road you can't go back from the
82

82

00:07:43.860  -->  00:07:47.880
hill to the road and likewise you can’t go
back from the hill to the valley and
83

83

00:07:47.880  -->  00:07:52.610
that's why for location two the only exit
is to go north to the forest ok so we've
84

84

00:07:52.610  -->  00:07:58.380
map our exits now for each location and to get this working so that we
85

85

00:07:58.380  -->  00:08:03.180
can actually used those indicators
those directions for our program, don’t need a
86

86

00:08:03.180  -->  00:08:08.230
lot of changes so what we do is instead
of reading and integer, were going to
87

87

00:08:08.230  -->  00:08:11.100
read a character which we then
convert to uppercase to match the keys
88

88

00:08:11.100  -->  00:08:17.050
in the maps and will also print out the keys on our locations exits map using the key set, a set
89

89

00:08:17.050  -->  00:08:21.970
that we saw earlier, and we need to do is look up the new location matching the chosen
90

90

00:08:21.970  -->  00:08:23.760
direction and set the lock
91

91

00:08:23.760  -->  00:08:28.230
if the direction exists in the map, if
the direction isn't a key in the exits then the
92

92

00:08:28.230  -->  00:08:33.060
locations not changed and consequently its not
going to be bugged, and thats why we didn’t bother
93

93

00:08:33.060  -->  00:08:36.660
fixing this bug that came up previously
because we are going to fix it in this version of
94

94

00:08:36.660  -->  00:08:41.550
the code anyway so the code we need to
change, where going to leave the code here after the while that prints out
95

95

00:08:41.550  -->  00:08:46.760
the description that still valid and
the if location equals to 0 to exit if
96

96

00:08:46.760  -->  00:08:48.700
that's been entered thats still correct
97

97

00:08:48.700  -->  00:08:54.550
where we are going change it though, is just after that we are going to indicate the directions, so were gonna
98

98

00:08:54.550  -->  00:09:06.640
put our map in there so its map…
99

99

00:09:09.980  -->  00:09:15.200
so we are getting the exit that are valid for
this particular location and then we are
100

100

00:09:15.200  -->  00:09:34.280
going to print out… and I’ll get red of that print line for that… and were going to use a for loop
101

101

00:09:34.280  -->  00:09:37.800
using the keys as I mentioned to go through
all the keys which indicate the
102

102

00:09:37.800  -->  00:09:44.600
directions that are valid for this
particular location and we are gonna use exits…
103

103

00:09:44.600  -->  00:09:55.990
we are gonna point exit…so we can show the
104

104

00:09:55.990  -->  00:10:01.050
different exits if there is multiple ones and after
all of that we need to print line
105

105

00:10:01.050  -->  00:10:07.040
and there should have been a print line because we want to print that one the same line
106

106

00:10:07.040  -->  00:10:11.550
so printing line afterwards heart goes to a new line, so what we need to do is we need to
107

107

00:10:11.550  -->  00:10:18.700
change our scanner and we need to grab a
character instead of a numbers so were going to do
108

108

00:10:18.700  -->  00:10:24.130
string…
109

109

00:10:24.130  -->  00:10:31.220
…so that you can type
110

110

00:10:31.220  -->  00:10:36.450
different directions in upper or
lower case and then we're going to do we’re
111

111

00:10:36.450  -->  00:10:39.870
still gonna update the lock variable but
we're going to put a test in there first so if
112

112

00:10:39.870  -->  00:10:42.930
exits…
113

113

00:10:42.930  -->  00:10:49.820
…then and only then we set the
114

114

00:10:49.820  -->  00:10:53.840
lock variable and that's no longer going to be a scanner anymore
115

115

00:10:53.840  -->  00:11:00.280
what that's going to be is exit…so were getting the integer
116

116

00:11:00.280  -->  00:11:04.600
corresponding to the valid directions
that's been hinted based on the key that
117

117

00:11:04.600  -->  00:11:12.960
has been typed in then we put an
else in there…
118

118

00:11:12.960  -->  00:11:22.880
… and just to confirm on line 47 we’re using our
119

119

00:11:22.880  -->  00:11:26.010
get access method to retrieve the
map of valid exits from the current
120

120

00:11:26.010  -->  00:11:31.570
location and as get exits returns a copy
if we did make any changes to that map it wouldn't
121

121

00:11:31.570  -->  00:11:35.790
effect the map field in the location instance
so now if we run this we should be able to
122

122

00:11:35.790  -->  00:11:38.170
do walk around a little bit
123

123

00:11:38.170  -->  00:11:43.200
so there we are we started off in the end of a road with a small brick building
124

124

00:11:43.200  -->  00:11:48.900
and thats this location so we're in location 1 so valid exits are to quit obviously the south, east,
125

125

00:11:48.900  -->  00:11:54.320
north, west we can to any of them so let's go north
which would take us to the forest, type in
126

126

00:11:54.320  -->  00:12:01.230
north, in the forest, and just to confirm
the forest now, available options quit or
127

127

00:12:01.230  -->  00:12:05.330
we can go south back to the road or we can go west
back to the hill so let's just go back
128

128

00:12:05.330  -->  00:12:11.060
west first, take us to the hill, and the top of the
hill, and the available exits for the
129

129

00:12:11.060  -->  00:12:15.400
hill are obviously back north again and
north should take us back to the forest so
130

130

00:12:15.400  -->  00:12:20.310
we will go back to the forest again and obviously if we entered a location east
131

131

00:12:20.310  -->  00:12:25.600
we cannot go to that direction, we're on top of a hill again, so we go back north and if I go back south It  should take
132

132

00:12:25.600  -->  00:12:32.390
us back to the road again and then lets go east
we are inside a building, a well house for small spring
133

133

00:12:32.390  -->  00:12:34.520
ok and just to confirm that
134

134

00:12:34.520  -->  00:12:38.750
work there's our building again and maybe
just to make sure we've done
135

135

00:12:38.750  -->  00:12:46.610
all the locations will go back west now and then
south, so west and south, south takes us to a
136

136

00:12:46.610  -->  00:12:51.760
value we can go north or west from their and that equates to north back to the road or west back to the
137

137

00:12:51.760  -->  00:12:58.950
hills so let's go back to the hill again, west, and q to quit, so you can see that our
138

138

00:12:58.950  -->  00:13:03.580
basic game is working and obviously it's
got very little functionality but we
139

139

00:13:03.580  -->  00:13:08.510
were able to navigate and successfully
add the valid exits for each location
140

140

00:13:08.510  -->  00:13:13.150
and it didn't really take much code as you
saw there the majority of the code here was
141

141

00:13:13.150  -->  00:13:15.200
the initialization aspect
142

142

00:13:15.200  -->  00:13:18.850
setting up the locations and setting up the valid
exits for each
143

143

00:13:18.850  -->  00:13:24.790
location as well now one
observation that i’ll make here
144

144

00:13:24.790  -->  00:13:31.610
is that the entry q and 0 in other words
on line 24, line  27 and line 30 etc.
145

145

00:13:31.610  -->  00:13:36.120
appears in every locations exit map, so what we could do is
we can remove it from main and add it to the
146

146

00:13:36.120  -->  00:13:40.240
location constructor and that would
probably be better way of doing it so you
147

147

00:13:40.240  -->  00:13:46.760
go back here and just remove this, and ill comment those out, because if we know if there is going to be a location
148

148

00:13:46.760  -->  00:13:55.200
added each time its best not to put it in there, because its redundant, so I’m commenting all of this out and we'll go back now
149

149

00:13:55.200  -->  00:14:02.070
to the location and because the location
class has got a constructor and we defined
150

150

00:14:02.070  -->  00:14:06.630
the new HashMap for the
particular exits that are valid for this location
151

151

00:14:06.630  -->  00:14:11.920
we can actually put that in there so we
could type in this…
152

152

00:14:11.920  -->  00:14:18.360
… and its a good idea to do that because that means, for each location thats added
153

153

00:14:18.360  -->  00:14:22.330
we automatically adding the ability to quit
out of the program and that saves a bit of
154

154

00:14:22.330  -->  00:14:26.050
code obviously, those five lines that were there now have been replaced
155

155

00:14:26.050  -->  00:14:32.010
with one in the location constructor
just to confirm that it still works, we still got our
156

156

00:14:32.010  -->  00:14:34.210
quit their
157

157

00:14:34.210  -->  00:14:40.870
we can go south, and we can quit still, so obviously the quit is still working, lets
158

158

00:14:40.870  -->  00:14:46.350
fix that typo, ok so we are using some of the same map
methods that we discussed earlier in the
159

159

00:14:46.350  -->  00:14:50.700
previous video the main difference now is
that the locations.getMethod
160

160

00:14:50.700  -->  00:14:54.950
returns an instance of the location
class rather than string so in other words just
161

161

00:14:54.950  -->  00:15:00.830
to be clear when using locations.get
this method here that's what returning the
162

162

00:15:00.830  -->  00:15:05.250
actual location object that
has been set up that we have define here
163

163

00:15:05.250  -->  00:15:10.660
when we created the new class for each one of
our map entries so that's the beauty
164

164

00:15:10.660  -->  00:15:17.450
there we got a key now which is the location ID and the value for our locations map is
165

165

00:15:17.450  -->  00:15:21.370
a location class and from there we
can then get the appropriate information
166

166

00:15:21.370  -->  00:15:28.080
which you can see there on line 47 we are using .exits which gets a copy of the
167

167

00:15:28.080  -->  00:15:35.300
map of the available exits for that particular
location now we got a pretty basic interface, at the moment
168

168

00:15:35.300  -->  00:15:39.420
you can type end and just like single abbreviations, we can make an
169

169

00:15:39.420  -->  00:15:43.170
improvement to the user interface to
allow the player to type the full words
170

170

00:15:43.170  -->  00:15:48.520
like north, south, east, and west if they wish
and short phrases such as go west an
171

171

00:15:48.520  -->  00:15:52.330
interesting enough here in our interface
that lets you to type go west and have
172

172

00:15:52.330  -->  00:15:57.050
the computer understand was literally
state of the art back in 1976 when the
173

173

00:15:57.050  -->  00:16:01.070
colossal cave adventure game which is
based on was actually written initially
174

174

00:16:01.070  -->  00:16:05.240
the only thing you need over and above
what we've been discussing in order to
175

175

00:16:05.240  -->  00:16:11.500
implement such an interface as i’ve just
mentioned is the String class split method and if that
176

176

00:16:11.500  -->  00:16:15.150
sounds like this task is going to be
your next challenge you are spot on but
177

177

00:16:15.150  -->  00:16:19.700
first let's just briefly talked about
the split method and how to use it and then we
178

178

00:16:19.700  -->  00:16:23.270
get moving to the next video and start
talking about the challenge so we're
179

179

00:16:23.270  -->  00:16:29.680
going to do is temporarily comment the entire while loop, so I’m just going to comment out this entire while loop code, comment that out
180

180

00:16:29.680  -->  00:16:34.810
I want to demonstrate the split
method so that you get an understanding, I’m gonna copy
181

181

00:16:34.810  -->  00:16:40.200
and paste the code in to save a bit of time as this video is getting long, I’m pasting the code there and
182

182

00:16:40.200  -->  00:16:46.670
closing the run window so you can see it, so the
first use of split on line 64 creates a
183

183

00:16:46.670  -->  00:16:51.980
string with 14 items containing each of
the 14 words in the locations string so
184

184

00:16:51.980  -->  00:16:52.690
the split
185

185

00:16:52.690  -->  00:16:56.800
method breaks up the string into
individual items separated by the string
186

186

00:16:56.800  -->  00:17:01.790
we pass parameters as a split which of course is this text here probably easier if I run this rather
187

187

00:17:01.790  -->  00:17:07.780
that explain it, so you can see what happened
there, on the first code on line 64
188

188

00:17:07.780  -->  00:17:13.420
it’s gone through and split up each word based
on a delimiter which was the space
189

189

00:17:13.420  -->  00:17:16.860
so if I just close that again and you
can see there we've got a little space
190

190

00:17:16.860  -->  00:17:21.230
character so essentially that’s used as a
delimiter so each word that is separated
191

191

00:17:21.230  -->  00:17:28.400
by space has been added and available to
you now as a string in the array on line 64
192

192

00:17:28.400  -->  00:17:31.910
and the second example it does something
very similar but it uses the comma
193

193

00:17:31.910  -->  00:17:36.010
followed by space and as a
consequence we end up with something
194

194

00:17:36.010  -->  00:17:39.390
containing only two entries this
time you're inside a house and a well
195

195

00:17:39.390  -->  00:17:43.820
house for a small spring and that's
because we look up here, we look at the
196

196

00:17:43.820  -->  00:17:47.670
delimiter that using that to limit which is a comma and a space
197

197

00:17:47.670  -->  00:17:52.270
so you can see that the split method is very useful for
splitting down
198

198

00:17:52.270  -->  00:17:54.900
a large string into smaller pieces
199

199

00:17:54.900  -->  00:17:57.400
so I’m going to end the video here in the
next video we are going to go through a
200

200

00:17:57.400  -->  00:18:02.130
challenge to enhance our application
so will talk about that challenge in
201

201

00:18:02.130  -->  00:18:02.630
the next video
