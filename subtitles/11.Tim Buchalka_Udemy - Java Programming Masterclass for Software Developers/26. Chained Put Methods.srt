1
1

00:00:05,810  -->  00:00:06,660
- [Tim] All right so in the last video
2

2

00:00:06,660  -->  00:00:11,350
we talked about or we
consolidated the code now
3

3

00:00:11,350  -->  00:00:13,690
to make it a bit more efficient
4

4

00:00:13,690  -->  00:00:15,110
by actually putting a punch of data
5

5

00:00:15,110  -->  00:00:17,660
putting that into the bugger
before we actually wrote it out
6

6

00:00:17,660  -->  00:00:18,880
so let's actually just run this
7

7

00:00:18,880  -->  00:00:21,050
to make sure it does work.
8

8

00:00:24,000  -->  00:00:27,010
And we look at our data.dat file.
9

9

00:00:27,010  -->  00:00:29,070
We can see there that obviously
10

10

00:00:29,070  -->  00:00:30,700
we can't read the numeric values
11

11

00:00:30,700  -->  00:00:31,930
but we can see that the Hello World
12

12

00:00:31,930  -->  00:00:35,280
and Nice to meet you are
actually showing there.
13

13

00:00:35,280  -->  00:00:37,260
Let's put down this data.txt.
14

14

00:00:37,260  -->  00:00:39,260
So so far so good there.
15

15

00:00:40,830  -->  00:00:42,270
And I think you'll agree that the code's
16

16

00:00:42,270  -->  00:00:44,360
a little bit cleaner than
the previous version was
17

17

00:00:44,360  -->  00:00:46,950
when we used modable buffers.
18

18

00:00:46,950  -->  00:00:49,590
So for fun now, and
perhaps a mini challenge,
19

19

00:00:49,590  -->  00:00:51,040
I'm gonna remove the flip call here
20

20

00:00:51,040  -->  00:00:52,430
and see what happens.
21

21

00:00:52,430  -->  00:00:54,720
So I'm gonna take that out.
22

22

00:00:54,720  -->  00:00:56,030
And can you guess what's gonna happen
23

23

00:00:56,030  -->  00:00:58,430
when I remove the flip?
24

24

00:00:58,430  -->  00:01:00,420
Right, and let's try running
it to see what happens
25

25

00:01:00,420  -->  00:01:03,850
with the removal of the flip method call.
26

26

00:01:03,850  -->  00:01:07,300
And look at that data.dat file again.
27

27

00:01:07,300  -->  00:01:09,490
And you can see it's
dramatically different.
28

28

00:01:09,490  -->  00:01:10,870
So effectively there's nothing in there.
29

29

00:01:10,870  -->  00:01:13,180
There's this strange character
showing up on the screen.
30

30

00:01:13,180  -->  00:01:14,690
But obviously the output that we saw
31

31

00:01:14,690  -->  00:01:17,760
prior to having the flip method removed
32

32

00:01:17,760  -->  00:01:20,820
has changed dramatically
what the output would be.
33

33

00:01:20,820  -->  00:01:22,730
And the point is if you
don't use the flip method,
34

34

00:01:22,730  -->  00:01:25,430
the buffer's position will be set to after
35

35

00:01:25,430  -->  00:01:27,420
the last value you wrote to it
36

36

00:01:27,420  -->  00:01:29,690
when you call up in channel.write.
37

37

00:01:29,690  -->  00:01:32,040
So we'll close that down again.
38

38

00:01:32,040  -->  00:01:34,180
But since there's nothing to
write beyond that position,
39

39

00:01:34,180  -->  00:01:35,980
nothing's actually written to the file.
40

40

00:01:35,980  -->  00:01:38,220
So calling the flip
method resets the buffer's
41

41

00:01:38,220  -->  00:01:39,210
position to zero.
42

42

00:01:39,210  -->  00:01:40,990
Which is why we actually need that.
43

43

00:01:40,990  -->  00:01:43,590
So obviously we've got
to uncomment that again.
44

44

00:01:43,590  -->  00:01:44,420
Run it.
45

45

00:01:48,210  -->  00:01:50,120
We get our result back.
46

46

00:01:52,330  -->  00:01:55,650
So I'm just gonna move this
code that we commented out
47

47

00:01:55,650  -->  00:01:58,010
in previous videos.
48

48

00:01:58,010  -->  00:02:00,180
Okay, it's a little bit tidier.
49

49

00:02:00,180  -->  00:02:01,010
All right.
50

50

00:02:02,770  -->  00:02:04,380
So now that we've written things out
51

51

00:02:04,380  -->  00:02:07,470
in a single buffer,
let's use single buffer
52

52

00:02:07,470  -->  00:02:10,250
to read the contents of
the file in one shot.
53

53

00:02:10,250  -->  00:02:14,420
So we'll come down here right
after the binWrite buffer.
54

54

00:02:15,330  -->  00:02:19,080
And with our RandomAccessFile
ra equals new.
55

55

00:02:19,080  -->  00:02:22,380
RandomAccessFile, data.dat
being the filename
56

56

00:02:22,380  -->  00:02:24,300
and rwd being the mode.
57

57

00:02:26,110  -->  00:02:29,940
And FileChannel, channel
equals ra.getChannel.
58

58

00:02:35,010  -->  00:02:38,590
Then we're gonna do a
byteBuffer readbuffer
59

59

00:02:39,910  -->  00:02:42,910
is equal to byteBuffer.allocate 100.
60

60

00:02:45,710  -->  00:02:48,130
And channel.read, readBuffer.
61

61

00:02:51,120  -->  00:02:52,870
Then readBuffer.flip.
62

62

00:02:54,750  -->  00:02:57,670
And then we're gonna do byte array.
63

63

00:02:58,610  -->  00:03:02,450
Of course on inputString
is equal to new byte.
64

64

00:03:03,840  -->  00:03:07,540
And we're gonna pass the outputBytes
65

65

00:03:07,540  -->  00:03:11,100
that we actually used
previously, dot length.
66

66

00:03:11,100  -->  00:03:13,080
So we're getting the
right size byte array,
67

67

00:03:13,080  -->  00:03:15,580
having them to readBuffer.get.
68

68

00:03:16,420  -->  00:03:19,010
And it's going to be inputString.
69

69

00:03:19,010  -->  00:03:20,540
And let's do some output here.
70

70

00:03:20,540  -->  00:03:23,040
So we can put inputString
71

71

00:03:23,040  -->  00:03:25,950
equals plus new String inputString.
72

72

00:03:28,430  -->  00:03:29,750
Then we're gonna do another one.
73

73

00:03:29,750  -->  00:03:33,910
We're going to put int1
equals plus readBuffer.getint.
74

74

00:03:38,070  -->  00:03:42,230
Another printout for int2
equals plus readBuffer.getint.
75

75

00:03:46,890  -->  00:03:50,470
Then we want byte, byte
array, inputString2
76

76

00:03:51,830  -->  00:03:53,580
is equal to new byte.
77

77

00:03:54,930  -->  00:03:58,090
And it's gonna be outputBytes2.length.
78

78

00:04:00,120  -->  00:04:03,670
Then we want to do a readBuffer.get.
79

79

00:04:03,670  -->  00:04:05,580
This time inputString2.
80

80

00:04:07,160  -->  00:04:09,270
And it will print out.
81

81

00:04:09,270  -->  00:04:13,440
inputString2 equals plus new
string called inputString2.
82

82

00:04:17,290  -->  00:04:19,390
And let's print out int3.
83

83

00:04:19,390  -->  00:04:22,970
So int3 is equal to
plus readBuffer.getint.
84

84

00:04:25,880  -->  00:04:27,910
Now we could reuse the buffer that we used
85

85

00:04:27,910  -->  00:04:29,890
to write the data here by the way.
86

86

00:04:29,890  -->  00:04:31,890
But then the buffer's
contents would already be set
87

87

00:04:31,890  -->  00:04:33,660
to the contents of the file.
88

88

00:04:33,660  -->  00:04:35,280
So you're starting fresh.
89

89

00:04:35,280  -->  00:04:37,550
That way you can be sure that
the file was actually read.
90

90

00:04:37,550  -->  00:04:38,990
That's why we're doing it
this way with a new buffer
91

91

00:04:38,990  -->  00:04:40,890
using readBuffer.
92

92

00:04:40,890  -->  00:04:43,510
So we're declaring a buffer
at the same size as before
93

93

00:04:43,510  -->  00:04:47,300
using the allocate method call on line 31.
94

94

00:04:47,300  -->  00:04:48,860
And then we're actually
doing a channel.read
95

95

00:04:48,860  -->  00:04:50,870
for the readBuffer.
96

96

00:04:50,870  -->  00:04:52,670
Now the readBuffer is smart enough
97

97

00:04:52,670  -->  00:04:54,570
to stop reading, by the way when it hits
98

98

00:04:54,570  -->  00:04:55,680
the end of the file.
99

99

00:04:55,680  -->  00:04:57,400
And next we're calling flip on line 33
100

100

00:04:57,400  -->  00:05:00,880
because we kind of now switch
from writing to the buffer
101

101

00:05:00,880  -->  00:05:02,410
to reading from the buffer.
102

102

00:05:02,410  -->  00:05:04,030
So at this point it's just a matter
103

103

00:05:04,030  -->  00:05:06,100
of calling the appropriate get methods
104

104

00:05:06,100  -->  00:05:07,710
as we go through.
105

105

00:05:07,710  -->  00:05:10,400
So I'm using get here
to get the first string.
106

106

00:05:10,400  -->  00:05:12,540
Then we're getting the two ints
107

107

00:05:12,540  -->  00:05:14,210
and printing those out at the same time.
108

108

00:05:14,210  -->  00:05:16,120
Moving down to get the second string
109

109

00:05:16,120  -->  00:05:17,800
or the second set of bytes.
110

110

00:05:17,800  -->  00:05:20,390
And then the final int as well.
111

111

00:05:21,430  -->  00:05:22,420
All right, let's actually check
112

112

00:05:22,420  -->  00:05:26,570
to see whether that's worked or will work.
113

113

00:05:26,570  -->  00:05:27,840
So you can see here we've got Hello World,
114

114

00:05:27,840  -->  00:05:29,300
Nice to meet you showing.
115

115

00:05:29,300  -->  00:05:33,220
245, negative 98765 and int3 is 1000.
116

116

00:05:33,220  -->  00:05:35,220
And that's obviously corresponding exactly
117

117

00:05:35,220  -->  00:05:37,430
with what we've actually output here
118

118

00:05:37,430  -->  00:05:39,370
when we've written the buffer to our file,
119

119

00:05:39,370  -->  00:05:41,100
to our data.dat file.
120

120

00:05:41,100  -->  00:05:43,860
So clearly that's actually
working which is nice.
121

121

00:05:43,860  -->  00:05:44,910
Yeah one last thing,
122

122

00:05:44,910  -->  00:05:47,670
the put methods overturn the byteBuffer.
123

123

00:05:47,670  -->  00:05:49,340
And that's great because that means
124

124

00:05:49,340  -->  00:05:51,350
we can chain multiple puts together.
125

125

00:05:51,350  -->  00:05:53,440
But I'm gonna show you an example of that.
126

126

00:05:53,440  -->  00:05:57,040
So I'm going to come up
to where we're writing.
127

127

00:05:57,040  -->  00:06:00,290
So I'll just take a copy of this first.
128

128

00:06:02,830  -->  00:06:04,950
We just need the various variables there
129

129

00:06:04,950  -->  00:06:06,740
'cause we're gonna use those shortly.
130

130

00:06:06,740  -->  00:06:08,030
So I'm taking a copy of that
131

131

00:06:08,030  -->  00:06:10,090
then I'm gonna comment that
entire block of code out
132

132

00:06:10,090  -->  00:06:12,790
other than the buffer up here on line 16.
133

133

00:06:12,790  -->  00:06:14,500
And don't comment it out
because we're gonna need
134

134

00:06:14,500  -->  00:06:18,160
that code again in a minute
to use the unchained version.
135

135

00:06:18,160  -->  00:06:19,290
But let me show you a chained version
136

136

00:06:19,290  -->  00:06:20,640
of these method calls.
137

137

00:06:20,640  -->  00:06:23,100
So I'm just going to
change the position here
138

138

00:06:23,100  -->  00:06:26,590
and put the string up at the top.
139

139

00:06:26,590  -->  00:06:27,620
Then we can now do this.
140

140

00:06:27,620  -->  00:06:30,370
We can do buffer.put outputBytes.
141

141

00:06:31,290  -->  00:06:35,120
Then dot putInt 245 dot
putInt negative 98765.
142

142

00:06:39,310  -->  00:06:41,060
Dot put outputBytes2,
143

143

00:06:45,140  -->  00:06:46,810
and dot putInt 1000.
144

144

00:06:49,830  -->  00:06:53,420
Then we can just do a buffer.flip.
145

145

00:06:53,420  -->  00:06:56,170
And then as we did before,
the binChannel call.
146

146

00:06:56,170  -->  00:06:57,290
But that's actually going to be
147

147

00:06:57,290  -->  00:06:59,560
still called down on line 37.
148

148

00:06:59,560  -->  00:07:01,860
And I'll delete that other code.
149

149

00:07:01,860  -->  00:07:04,090
You can see, we're
chaining method calls here.
150

150

00:07:04,090  -->  00:07:05,650
And the reason again we can do that
151

151

00:07:05,650  -->  00:07:08,290
is with these put methods,
152

152

00:07:08,290  -->  00:07:10,370
we actually return the byteBuffer.
153

153

00:07:10,370  -->  00:07:12,630
Thus consequently we can chain
those put methods together
154

154

00:07:12,630  -->  00:07:14,860
as you've seen me do now in line 20.
155

155

00:07:14,860  -->  00:07:17,190
So we actually run this now.
156

156

00:07:19,690  -->  00:07:22,060
We get exactly the same
results as we did before.
157

157

00:07:22,060  -->  00:07:24,050
And obviously the reading has returned
158

158

00:07:24,050  -->  00:07:25,410
the right information there.
159

159

00:07:25,410  -->  00:07:29,050
But we can confirm that also
by checking the data.dat file.
160

160

00:07:29,050  -->  00:07:31,670
And see it's still what the data in there.
161

161

00:07:31,670  -->  00:07:34,130
So you can see it's exactly the
same as before, the results.
162

162

00:07:34,130  -->  00:07:36,760
And the code's a little bit more compact.
163

163

00:07:36,760  -->  00:07:38,250
For that reason, less lines.
164

164

00:07:38,250  -->  00:07:40,710
And you might well come
across code in your travels
165

165

00:07:40,710  -->  00:07:43,240
that's written that way as well.
166

166

00:07:43,240  -->  00:07:44,740
Now we've been using a random access file
167

167

00:07:44,740  -->  00:07:45,940
to read the file.
168

168

00:07:45,940  -->  00:07:49,050
But only because it was convenient
to get a channel from it.
169

169

00:07:49,050  -->  00:07:50,410
Now since you're always reading
170

170

00:07:50,410  -->  00:07:52,010
and writing data sequentially,
171

171

00:07:52,010  -->  00:07:54,610
you could also have used an inputString.
172

172

00:07:54,610  -->  00:07:56,580
Now other than creating the string,
173

173

00:07:56,580  -->  00:07:58,580
the code will then be the same.
174

174

00:07:58,580  -->  00:07:59,670
But moving on.
175

175

00:07:59,670  -->  00:08:01,690
Now let's learn how to use random access
176

176

00:08:01,690  -->  00:08:03,410
using java.nio.
177

177

00:08:03,410  -->  00:08:05,250
So to jump around in a file,
178

178

00:08:05,250  -->  00:08:07,310
you have to use a seekable byte channel
179

179

00:08:07,310  -->  00:08:10,010
which has the notion
of a current position.
180

180

00:08:10,010  -->  00:08:12,070
Now a seekable byte channel only has
181

181

00:08:12,070  -->  00:08:13,610
a small number of methods.
182

182

00:08:13,610  -->  00:08:15,960
And it had actually been
available since Java seven.
183

183

00:08:15,960  -->  00:08:17,280
Before then, random access file
184

184

00:08:17,280  -->  00:08:19,050
was the only game in town when it came
185

185

00:08:19,050  -->  00:08:20,590
to non-sequential io.
186

186

00:08:20,590  -->  00:08:23,610
And seekable byte channel
was actually an interface.
187

187

00:08:23,610  -->  00:08:26,980
And there's a couple, there's
quite a few methods there.
188

188

00:08:26,980  -->  00:08:28,600
And there's actually six methods
189

189

00:08:28,600  -->  00:08:30,440
that I want to bring to your attention.
190

190

00:08:30,440  -->  00:08:33,630
What I'm going to do, I've
actually got them written out.
191

191

00:08:33,630  -->  00:08:36,990
So let's just put them on
the screen so you can see.
192

192

00:08:36,990  -->  00:08:40,760
So I'm just gonna paste that in there.
193

193

00:08:40,760  -->  00:08:43,590
And I'm just gonna comment it out.
194

194

00:08:46,630  -->  00:08:48,300
So you can sort of see
what they're all about.
195

195

00:08:48,300  -->  00:08:50,410
So there's six methods from the seekable
196

196

00:08:50,410  -->  00:08:51,790
byte channel interface.
197

197

00:08:51,790  -->  00:08:53,880
You've got a read ByteBuffer, reads bytes
198

198

00:08:53,880  -->  00:08:56,530
beginning at the channel's
current position.
199

199

00:08:56,530  -->  00:08:59,560
And after read, so let's just
put that to the next line
200

200

00:08:59,560  -->  00:09:03,250
so that you can read it a bit better.
201

201

00:09:03,250  -->  00:09:04,450
Okay, we'll start again.
202

202

00:09:04,450  -->  00:09:06,520
So read, the first read method
203

203

00:09:06,520  -->  00:09:08,110
from the seekable byte channel
204

204

00:09:08,110  -->  00:09:10,700
accepts an argument of byteBuffer.
205

205

00:09:10,700  -->  00:09:12,120
And it reads bytes beginning
206

206

00:09:12,120  -->  00:09:13,790
at the channel's current position
207

207

00:09:13,790  -->  00:09:17,030
and after the read, updates
the position accordingly.
208

208

00:09:17,030  -->  00:09:19,820
And note that now we're talking
about the channel's position
209

209

00:09:19,820  -->  00:09:21,690
not the byte buffer's position.
210

210

00:09:21,690  -->  00:09:22,740
So that's important there.
211

211

00:09:22,740  -->  00:09:24,200
And of course the bytes will be placed
212

212

00:09:24,200  -->  00:09:27,060
into the buffer starting
at its current position.
213

213

00:09:27,060  -->  00:09:28,710
So that's the read method.
214

214

00:09:28,710  -->  00:09:31,060
The interface also defines a write method.
215

215

00:09:31,060  -->  00:09:33,380
It also accepts a
byteBuffer as an argument.
216

216

00:09:33,380  -->  00:09:35,060
And ultimately it's the same as read
217

217

00:09:35,060  -->  00:09:36,540
except that it writes.
218

218

00:09:36,540  -->  00:09:38,040
But one exception to note.
219

219

00:09:38,040  -->  00:09:40,640
And that's if the data source
is opened in a pin mode
220

220

00:09:40,640  -->  00:09:43,110
then the first write will take place
221

221

00:09:43,110  -->  00:09:45,070
starting at the end of the data source
222

222

00:09:45,070  -->  00:09:46,400
rather than at position zero
223

223

00:09:46,400  -->  00:09:48,590
which you would expect
from a pinned operation.
224

224

00:09:48,590  -->  00:09:50,410
And after the write, the position
225

225

00:09:50,410  -->  00:09:52,550
will be updated accordingly in both cases.
226

226

00:09:52,550  -->  00:09:53,870
We've got position.
227

227

00:09:53,870  -->  00:09:57,810
Now that method is meant to
return the channel's position.
228

228

00:09:57,810  -->  00:10:00,090
And there's a second
method that's overloaded
229

229

00:10:00,090  -->  00:10:03,510
for position which
accepts a long argument.
230

230

00:10:03,510  -->  00:10:06,180
And that sets the channel's
position to the passed value.
231

231

00:10:06,180  -->  00:10:09,470
We've got a truncate
method that has an argument
232

232

00:10:09,470  -->  00:10:10,810
of type long.
233

233

00:10:10,810  -->  00:10:12,810
Truncates the size of
the attached data source
234

234

00:10:12,810  -->  00:10:14,500
to the passed value.
235

235

00:10:14,500  -->  00:10:17,080
And finally a size method returns the size
236

236

00:10:17,080  -->  00:10:19,210
of the attached data source.
237

237

00:10:19,210  -->  00:10:20,810
So that's actually all the methods
238

238

00:10:20,810  -->  00:10:23,230
in the seekable byte channel interface.
239

239

00:10:23,230  -->  00:10:24,810
And here's the good news about that.
240

240

00:10:24,810  -->  00:10:26,600
You've been using one all along
241

241

00:10:26,600  -->  00:10:28,470
because the file channel class
242

242

00:10:28,470  -->  00:10:31,780
implements the seekable
byte channel interface.
243

243

00:10:31,780  -->  00:10:34,070
So let's modify the code we have
244

244

00:10:34,070  -->  00:10:36,630
so that reads the integers
in backwards order.
245

245

00:10:36,630  -->  00:10:38,900
So to do so, when we write the data,
246

246

00:10:38,900  -->  00:10:41,940
we're gonna save the start
position for each value.
247

247

00:10:41,940  -->  00:10:43,830
Now as you saw previously
when we're working
248

248

00:10:43,830  -->  00:10:46,570
with RandomAccessFile,
normally you'd have to have
249

249

00:10:46,570  -->  00:10:48,480
something like an index in the file
250

250

00:10:48,480  -->  00:10:51,000
that would enable you to
read values on demand.
251

251

00:10:51,000  -->  00:10:53,210
But you've already learned how to do that
252

252

00:10:53,210  -->  00:10:55,210
and so we're gonna keep
things simple here.
253

253

00:10:55,210  -->  00:10:57,610
We're gonna go back to
using the unchained version
254

254

00:10:57,610  -->  00:10:58,990
of the write code.
255

255

00:10:58,990  -->  00:11:00,730
Because you'll need to
store the file position
256

256

00:11:00,730  -->  00:11:02,060
after every write.
257

257

00:11:02,060  -->  00:11:04,390
Now in this simple case,
you know what the data is
258

258

00:11:04,390  -->  00:11:06,170
and the order in which it's written.
259

259

00:11:06,170  -->  00:11:07,800
And you could calculate the positions
260

260

00:11:07,800  -->  00:11:09,190
before you do each read,
261

261

00:11:09,190  -->  00:11:11,620
but in this case just
to save us a bit of time
262

262

00:11:11,620  -->  00:11:13,700
we're gonna pretend that we can't do that.
263

263

00:11:13,700  -->  00:11:15,310
So let's have a look at doing that.
264

264

00:11:15,310  -->  00:11:17,070
So I'm going to comment out now
265

265

00:11:17,070  -->  00:11:19,820
the chained versions of our code.
266

266

00:11:21,070  -->  00:11:23,220
And we're gonna uncomment down here
267

267

00:11:23,220  -->  00:11:25,780
the longer version that we originally had
268

268

00:11:25,780  -->  00:11:29,760
that we commented out
earlier in the video.
269

269

00:11:29,760  -->  00:11:32,580
And now we need to add those
extra pieces of information
270

270

00:11:32,580  -->  00:11:34,300
in terms of the length.
271

271

00:11:34,300  -->  00:11:35,920
So we're gonna start by coming down here
272

272

00:11:35,920  -->  00:11:37,760
after the outputBytes.
273

273

00:11:37,760  -->  00:11:40,580
So outputting outputBytes,
okay, that's fine.
274

274

00:11:40,580  -->  00:11:43,660
But then we need to do a long int1Pos
275

275

00:11:46,090  -->  00:11:48,670
is equal to outputBytes.length.
276

276

00:11:50,190  -->  00:11:54,790
We're going to put the int on
line 39, leave that as it is.
277

277

00:11:54,790  -->  00:11:56,300
Then after that, what we're going to do
278

278

00:11:56,300  -->  00:11:57,960
is create a second variable.
279

279

00:11:57,960  -->  00:12:02,130
It's a long int2Pos now equals
int1Pos plus integer.bytes.
280

280

00:12:08,760  -->  00:12:10,860
And then outputting our second int
281

281

00:12:10,860  -->  00:12:13,570
which is our negative 98765.
282

282

00:12:13,570  -->  00:12:15,030
Coming on down, we're going to define,
283

283

00:12:15,030  -->  00:12:16,890
we're defining outputBytes2.
284

284

00:12:16,890  -->  00:12:20,970
Then we'll go ahead and
output that below that.
285

285

00:12:20,970  -->  00:12:22,530
We're gonna calculate intPos3.
286

286

00:12:22,530  -->  00:12:25,030
So long int3Pos equals int2Pos
287

287

00:12:28,830  -->  00:12:32,490
plus integer.bytes plus
outputBytes2.length.
288

288

00:12:38,920  -->  00:12:41,690
Then we're putting our putInt 1000.
289

289

00:12:41,690  -->  00:12:43,180
We're doing our buffer.flip.
290

290

00:12:43,180  -->  00:12:45,610
And we're still doing the writeBuffer.
291

291

00:12:45,610  -->  00:12:46,640
So what have we done here?
292

292

00:12:46,640  -->  00:12:48,480
Well, it's the same code as we had before
293

293

00:12:48,480  -->  00:12:50,750
as you saw me uncomment.
294

294

00:12:50,750  -->  00:12:52,970
Except we're now saving the start position
295

295

00:12:52,970  -->  00:12:55,910
of each integer that we wrote to the file.
296

296

00:12:55,910  -->  00:12:59,910
So we wrote the first
integer, 235 here on line 39
297

297

00:12:59,910  -->  00:13:01,320
right after the string.
298

298

00:13:01,320  -->  00:13:03,950
So its start position will
be the number of bytes
299

299

00:13:03,950  -->  00:13:05,580
in the string.
300

300

00:13:05,580  -->  00:13:07,450
Now the second time we define one
301

301

00:13:07,450  -->  00:13:10,810
is here on line 40 when
we're defining the position
302

302

00:13:10,810  -->  00:13:12,310
for the next int.
303

303

00:13:12,310  -->  00:13:13,760
And we're then writing the int,
304

304

00:13:13,760  -->  00:13:16,030
negative 98765 after that.
305

305

00:13:16,030  -->  00:13:17,850
So the start position for that int
306

306

00:13:17,850  -->  00:13:20,790
is the length of the string plus the int
307

307

00:13:20,790  -->  00:13:23,240
of an integer in terms of bytes.
308

308

00:13:23,240  -->  00:13:26,120
Now the third integer, 1000.
309

309

00:13:26,120  -->  00:13:27,950
Well that's actually written last.
310

310

00:13:27,950  -->  00:13:29,830
So its position will be
the starting position
311

311

00:13:29,830  -->  00:13:30,900
of the second int.
312

312

00:13:30,900  -->  00:13:33,980
You can see me defining
it here on line 44.
313

313

00:13:33,980  -->  00:13:35,790
And then to that we're adding
the size of the integer
314

314

00:13:35,790  -->  00:13:38,690
in bytes, integer.bytes plus the size
315

315

00:13:38,690  -->  00:13:40,360
of the second string.
316

316

00:13:40,360  -->  00:13:42,380
And then we're writing out
the value and doing a flip
317

317

00:13:42,380  -->  00:13:44,940
and then writing the
contents to the buffer.
318

318

00:13:44,940  -->  00:13:47,640
All right, so now that
we've got that defined,
319

319

00:13:47,640  -->  00:13:49,740
we want to start reading the ints back
320

320

00:13:49,740  -->  00:13:51,950
in the reverse order we wrote them.
321

321

00:13:51,950  -->  00:13:55,060
But let's start working
on that in the next video.
