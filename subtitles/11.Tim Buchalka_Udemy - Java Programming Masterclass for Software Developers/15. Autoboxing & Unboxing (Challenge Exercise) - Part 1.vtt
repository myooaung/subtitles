WEBVTT
1
1

00:00:05.480  -->  00:00:07.410
Okay, so it's time for a challenge.
2

2

00:00:07.410  -->  00:00:11.120
In the previous video we went
through auto boxing and unboxing and
3

3

00:00:11.120  -->  00:00:14.520
what we're gonna do now is start our
challenge which is going to be for
4

4

00:00:14.520  -->  00:00:16.310
a simple banking application.
5

5

00:00:16.310  -->  00:00:19.040
So I'm just gonna type out
what is actually needed.
6

6

00:00:32.420  -->  00:00:34.090
Okay, so here is the task, so
7

7

00:00:34.090  -->  00:00:37.830
your job is to create a simple
banking application as I mentioned.
8

8

00:00:37.830  -->  00:00:39.880
So there should be a Bank class.
9

9

00:00:39.880  -->  00:00:41.850
Now that Bank class should
have the bank name, but
10

10

00:00:41.850  -->  00:00:45.210
also an ArrayList of branches,
which is a class.
11

11

00:00:45.210  -->  00:00:49.760
And each branch should itself have
an ArrayList of customers which is another
12

12

00:00:49.760  -->  00:00:53.540
class, now the customer class itself
should have the customer name and
13

13

00:00:53.540  -->  00:00:55.570
also an array list of doubles.
14

14

00:00:55.570  -->  00:00:59.650
Doubles being the object
replica version of
15

15

00:00:59.650  -->  00:01:03.230
the primitive top double which is the list
of transactions for that customer.
16

16

00:01:03.230  -->  00:01:06.800
So, in other words what we are doing is we
are tracking transactions that a customer
17

17

00:01:06.800  -->  00:01:07.860
would make.
18

18

00:01:07.860  -->  00:01:09.630
The customer class would have the name and
19

19

00:01:09.630  -->  00:01:11.840
the array list of doubles of
that code as I mentioned.
20

20

00:01:11.840  -->  00:01:14.880
So for the branch, the functionality
you need is to be able to
21

21

00:01:14.880  -->  00:01:18.850
add a new customer to that branch and
for the initial transaction amount.
22

22

00:01:18.850  -->  00:01:22.120
So that would be in the scenario where
it's a brand new customer whose walked
23

23

00:01:22.120  -->  00:01:23.550
into the bank.
24

24

00:01:23.550  -->  00:01:25.160
And oneâ€™s to open an account.
25

25

00:01:25.160  -->  00:01:29.490
So in other words, you need to add them
to the branch, and add their name and
26

26

00:01:29.490  -->  00:01:30.360
also the amount.
27

27

00:01:30.360  -->  00:01:33.100
Also when I add a transaction for
an existing customer.
28

28

00:01:33.100  -->  00:01:36.380
So in other words, if they come back and
then wanna add additional transactions.
29

29

00:01:36.380  -->  00:01:39.950
So they should be able to process
an unlimited number of transactions for
30

30

00:01:39.950  -->  00:01:40.970
a given customer.
31

31

00:01:40.970  -->  00:01:43.210
But still be attached to that branch.
32

32

00:01:43.210  -->  00:01:46.360
So the customer that's should
still be part of that branch.
33

33

00:01:46.360  -->  00:01:49.280
And also we want to be able to
show a list of customers for
34

34

00:01:49.280  -->  00:01:51.960
a particular branch as well,
that's very important.
35

35

00:01:51.960  -->  00:01:54.110
And optionally a list
of their transactions,
36

36

00:01:54.110  -->  00:01:57.820
so you can decide to show their
transactions as well or not show them.
37

37

00:01:57.820  -->  00:02:01.940
And what you should be doing is using
a demonstration of autoboxing and
38

38

00:02:01.940  -->  00:02:05.960
unboxing in your code, and
my hint for that is the transaction,
39

39

00:02:05.960  -->  00:02:07.680
is probably a good place to look for that.
40

40

00:02:07.680  -->  00:02:10.250
Also be sure to add data validation.
41

41

00:02:10.250  -->  00:02:13.100
So in other words if you're adding
a new customer to a branch,
42

42

00:02:13.100  -->  00:02:17.500
you wanna check that, that name wasn't
used previously for that branch and
43

43

00:02:17.500  -->  00:02:21.050
likewise if you were adding an additional
transaction for an already existing
44

44

00:02:21.050  -->  00:02:25.040
customer for a branch you'd wanna check
then in fact they did exist first.
45

45

00:02:25.040  -->  00:02:28.300
We'll say think about where you're
going to be adding this code.
46

46

00:02:28.300  -->  00:02:30.820
Where you're adding code
to perform certain actions.
47

47

00:02:30.820  -->  00:02:34.070
Making sure that you think you're
putting it in the right class.
48

48

00:02:34.070  -->  00:02:36.960
For example, if your doing something
to do with branches should probably
49

49

00:02:36.960  -->  00:02:40.060
be in the branches class and
that sort of thing.
50

50

00:02:40.060  -->  00:02:44.000
But there may be scenarios you'll find
that you're calling the functionality for
51

51

00:02:44.000  -->  00:02:48.340
a particular class from another class, so
the hint with that one will be the bank.
52

52

00:02:48.340  -->  00:02:52.850
Nearly all your transactions that you're
gonna be running in your main class,
53

53

00:02:52.850  -->  00:02:56.560
your main method, that's going
to be probably just using bank.
54

54

00:02:56.560  -->  00:02:59.580
So that's going to have to a lot
of methods as you can see on
55

55

00:02:59.580  -->  00:03:01.760
the screen there, adding a new branch,
adding a customer,
56

56

00:03:01.760  -->  00:03:03.970
adding a transaction showing
a list of customers.
57

57

00:03:03.970  -->  00:03:08.180
But probably what you'd be finding
is that bank class would be calling
58

58

00:03:08.180  -->  00:03:09.380
code from other classes.
59

59

00:03:09.380  -->  00:03:10.380
So that's where I'm getting it, so
60

60

00:03:10.380  -->  00:03:12.100
think about where you're
gonna be adding that code.
61

61

00:03:12.100  -->  00:03:14.310
All right, so I'm gonna pause
the video here, so go away and
62

62

00:03:14.310  -->  00:03:16.610
see if you can create something like this.
63

63

00:03:16.610  -->  00:03:19.200
And remember, it doesn't have
to be terribly complicated,
64

64

00:03:19.200  -->  00:03:20.280
just keep it pretty basic.
65

65

00:03:20.280  -->  00:03:23.660
The customer's literally only the name and
the transactions at this stage.
66

66

00:03:23.660  -->  00:03:25.890
You don't need to store addresses or
anything like that.
67

67

00:03:25.890  -->  00:03:29.290
The main thing is the relationship
between the various classes, and
68

68

00:03:29.290  -->  00:03:31.570
also the autoboxing and unboxing.
69

69

00:03:31.570  -->  00:03:33.830
So I'm gonna pause the video here,
so come back and
70

70

00:03:33.830  -->  00:03:36.740
start the video when you're ready
to see what I've come up with.
71

71

00:03:38.700  -->  00:03:39.760
Okay, how did you get on?
72

72

00:03:39.760  -->  00:03:40.870
Did you figure it out?
73

73

00:03:40.870  -->  00:03:44.610
So let's go through with my
implementation, what I'm gonna do first is
74

74

00:03:44.610  -->  00:03:47.810
just open a project window so we can
see what we're doing here a little bit.
75

75

00:03:47.810  -->  00:03:52.520
And the first class that I'm going
to create is the customer class.
76

76

00:03:52.520  -->  00:03:56.230
So in a design like this, when you're
thinking about where do I start,
77

77

00:03:56.230  -->  00:03:58.440
I would always start from the bottom rung.
78

78

00:03:58.440  -->  00:04:01.200
So in this case we know that
the customer is a major
79

79

00:04:01.200  -->  00:04:04.610
part of this application because
it's pretty well used everywhere.
80

80

00:04:04.610  -->  00:04:07.000
So we need to have a customer
before we can run any other code.
81

81

00:04:07.000  -->  00:04:10.590
So I'm gonna create that new class,
so I said customer, and
82

82

00:04:10.590  -->  00:04:13.620
in terms of functionality,
we're going to just have a name.
83

83

00:04:13.620  -->  00:04:18.480
So private string name,
which will be of course the customer name.
84

84

00:04:18.480  -->  00:04:23.770
And we also want our ArrayList of Doubles.
85

85

00:04:23.770  -->  00:04:27.560
And this is going to be the transactions,
so we're gonna call that transactions.
86

86

00:04:28.830  -->  00:04:30.960
Next we need a constructor.
87

87

00:04:30.960  -->  00:04:33.720
So the constructor is going
to accept two parameters.
88

88

00:04:33.720  -->  00:04:37.310
So the first one is going to be the name,
so we're just gonna store the name.
89

89

00:04:37.310  -->  00:04:40.310
But the second parameter
is the initial transaction.
90

90

00:04:40.310  -->  00:04:44.960
So this is when a customer is opening
a new account for a particular branch.
91

91

00:04:44.960  -->  00:04:47.890
We want to have that initial amount,
so we're gonna put a double there.
92

92

00:04:47.890  -->  00:04:53.640
We're just gonna send a regular double and
we're gonna call that initialAmount.
93

93

00:04:53.640  -->  00:04:57.120
So it'll be the initial transaction,
ultimately it's gonna be,
94

94

00:04:57.120  -->  00:04:59.010
we'll call it initialAmount.
95

95

00:04:59.010  -->  00:05:01.890
So have to think about how we're
gonna store that initial amount.
96

96

00:05:01.890  -->  00:05:04.020
We'll come back to that and
add that shortly.
97

97

00:05:04.020  -->  00:05:07.030
But the other thing we need here is we'll
need a mechanism to add transactions.
98

98

00:05:07.030  -->  00:05:11.330
So as customers come back to the bank or
to the branch, whatever the case may be,
99

99

00:05:11.330  -->  00:05:14.970
and actually add another transaction
we need to be able to store those
100

100

00:05:14.970  -->  00:05:16.470
in our array list.
101

101

00:05:16.470  -->  00:05:17.610
So we want another method.
102

102

00:05:17.610  -->  00:05:21.480
The public, void, add transaction.
103

103

00:05:22.980  -->  00:05:24.870
We're gonna accept an amend at double.
104

104

00:05:24.870  -->  00:05:29.610
Now it sets the primitive top and
not the object wrapper.
105

105

00:05:29.610  -->  00:05:33.800
And this will be this
.transactions.add amount.
106

106

00:05:35.530  -->  00:05:38.350
And obviously that's converting
from a primitive to the object
107

107

00:05:38.350  -->  00:05:41.490
wrapper which we've got in our array
list so that's demonstrating boxing.
108

108

00:05:41.490  -->  00:05:46.540
So getting back now to the constructor in
this class to add that initial amount,
109

109

00:05:46.540  -->  00:05:49.950
what we can do is we can actually
just call that add transaction.
110

110

00:05:49.950  -->  00:05:51.240
Literally that's all we need to do.
111

111

00:05:51.240  -->  00:05:54.560
So to do that, before we actually do that,
what we need to do is one other step.
112

112

00:05:54.560  -->  00:05:59.260
And we need to actually initialize
the transactions because we have to find
113

113

00:05:59.260  -->  00:06:02.930
the array list of double transactions
at the top here in the private field,
114

114

00:06:02.930  -->  00:06:04.420
but we haven't initialized it.
115

115

00:06:04.420  -->  00:06:07.110
So we need to initialize that first
before we try and add anything to it.
116

116

00:06:07.110  -->  00:06:09.990
And of course the constructors
are great place for initializing.
117

117

00:06:09.990  -->  00:06:14.050
So we're gonna do this .trail
transactions equals new.
118

118

00:06:14.050  -->  00:06:19.090
Of course that's gonna be
the array list of doubles.
119

119

00:06:19.090  -->  00:06:21.110
So then the next line is there,
we're gonna initialize that, and
120

120

00:06:21.110  -->  00:06:22.480
we saved the name.
121

121

00:06:22.480  -->  00:06:23.850
We can just do add transaction.
122

122

00:06:23.850  -->  00:06:28.090
Add transaction and
pass the initial amount, and
123

123

00:06:28.090  -->  00:06:33.530
that's gonna add that to our
array list of transactions.
124

124

00:06:33.530  -->  00:06:38.440
So we're now handling the initial amount
and also subsequent amounts as well.
125

125

00:06:38.440  -->  00:06:41.870
Next what we wanna do is we
want to create some getters,
126

126

00:06:41.870  -->  00:06:46.870
and the getters are going to be, we'll do
both the name and by the transactions,
127

127

00:06:46.870  -->  00:06:48.850
because we might need
those in another class.
128

128

00:06:48.850  -->  00:06:50.980
So that's our base customer class.
129

129

00:06:50.980  -->  00:06:54.580
There's not really a lot of processing
there because a lot of the processing
130

130

00:06:54.580  -->  00:06:56.170
is in other places.
131

131

00:06:56.170  -->  00:06:59.680
So the next class I'm
gonna now is the branch.
132

132

00:06:59.680  -->  00:07:01.740
So we create the new class branch.
133

133

00:07:03.230  -->  00:07:08.610
Now, with this one, if you recall,
going back to the main with the branch,
134

134

00:07:08.610  -->  00:07:12.140
we need to be able to add a new customer
and initial transaction amount.
135

135

00:07:12.140  -->  00:07:16.290
We also need to add additional
transactions for that customer.
136

136

00:07:16.290  -->  00:07:20.270
Because we're actually adding a customer
to a branch, we need to, obviously,
137

137

00:07:20.270  -->  00:07:23.330
store a list of customers in the branch.
138

138

00:07:23.330  -->  00:07:26.130
So to do that, coming back here, firstly
we're going to assign the name, and
139

139

00:07:26.130  -->  00:07:28.340
that going to be,
in this case, the branch name.
140

140

00:07:29.400  -->  00:07:32.680
Private string, well call that name again.
141

141

00:07:32.680  -->  00:07:34.580
And we also need to add
that list of customers.
142

142

00:07:35.640  -->  00:07:39.250
So what this means is we can have
a separate list of customers for
143

143

00:07:39.250  -->  00:07:40.730
each branch.
144

144

00:07:40.730  -->  00:07:42.810
So it's using the ArrayList.
145

145

00:07:42.810  -->  00:07:45.980
Problem is some customers,
we'll call that customers.
146

146

00:07:47.640  -->  00:07:51.060
Substitute fields we need
the constructor is gonna be very simple,
147

147

00:07:51.060  -->  00:07:54.660
it's going to be initializing the string
to whatever has been passed to it.
148

148

00:07:54.660  -->  00:07:59.560
Then we also need to initialize the array
list just to make sure it's ready to
149

149

00:07:59.560  -->  00:08:01.210
be any records.
150

150

00:08:01.210  -->  00:08:06.520
So I've got customers equals new Array
list customers, as you can see there.
151

151

00:08:06.520  -->  00:08:07.820
So initializing that for the first time.
152

152

00:08:07.820  -->  00:08:12.260
We're also going to need the getter for
the name.
153

153

00:08:12.260  -->  00:08:13.840
We'll probably implement that now,
154

154

00:08:13.840  -->  00:08:16.860
because we wanna be able to show the
branch name on the screen at some point.
155

155

00:08:16.860  -->  00:08:19.730
So we're just gonna used the getter for
that.
156

156

00:08:19.730  -->  00:08:22.050
The next one we want is the new customer.
157

157

00:08:22.050  -->  00:08:26.560
So if you recall back in the main
method when I talked it out.
158

158

00:08:26.560  -->  00:08:28.720
For branch, we need to be able
to add a new customer and
159

159

00:08:28.720  -->  00:08:30.130
an initial transaction amount.
160

160

00:08:30.130  -->  00:08:33.580
But we also need to add additional
transactions for customer branch as well.
161

161

00:08:33.580  -->  00:08:35.210
So going back to our branch,
162

162

00:08:35.210  -->  00:08:38.720
first one we're going to do is
we're going to create a method.
163

163

00:08:38.720  -->  00:08:42.260
Public, and we'll use a boolean and
I'll explain why shortly.
164

164

00:08:42.260  -->  00:08:43.410
We'll call this one newCustomer.
165

165

00:08:45.070  -->  00:08:48.030
And the parameters that are going
to be passed to this are the name,
166

166

00:08:48.030  -->  00:08:50.640
we'll type it out properly,
customerName in this case.
167

167

00:08:51.690  -->  00:08:55.990
And also the initial amount,
so initialAmount.
168

168

00:08:57.440  -->  00:09:00.270
The reason that we're gonna use
boolean is because this could file.
169

169

00:09:00.270  -->  00:09:03.370
If we pass a customer
name that already exists,
170

170

00:09:03.370  -->  00:09:07.420
we wanna actually return false
to say that this transaction, or
171

171

00:09:07.420  -->  00:09:10.170
this customer wasn't added
because it was already on file.
172

172

00:09:10.170  -->  00:09:11.490
That's why we're using a boolean.
173

173

00:09:11.490  -->  00:09:14.650
So to do that of course we need
to add a find customer class so
174

174

00:09:14.650  -->  00:09:17.570
that we can actually test to see whether
that class is actually being used or not.
175

175

00:09:17.570  -->  00:09:20.360
So the logic of the code
will be something like this.
176

176

00:09:20.360  -->  00:09:24.200
Find customer and it'll be customer name.
177

177

00:09:26.520  -->  00:09:31.690
If it equals null and that's telling
us that it's not already on file so
178

178

00:09:31.690  -->  00:09:34.760
because this is a new customer method,
179

179

00:09:34.760  -->  00:09:38.060
if it's not on file that's a good
thing because it means we can add it.
180

180

00:09:38.060  -->  00:09:42.530
So if that's the case we're going to put
our list.customers.add so, adding a new
181

181

00:09:42.530  -->  00:09:46.450
record and you can see there on the screen
it's looking for a customer object.
182

182

00:09:46.450  -->  00:09:51.440
So we're gonna do a new customer,
creating a new class and we're
183

183

00:09:51.440  -->  00:09:54.610
just gonna pass those two parameters,
customerName and initialAmount.
184

184

00:09:56.580  -->  00:09:59.310
So obviously in that case
with the new customer,
185

185

00:09:59.310  -->  00:10:03.420
we're actually calling the constructor
code in the customer class which of
186

186

00:10:03.420  -->  00:10:05.230
course would be the right way of doing it.
187

187

00:10:05.230  -->  00:10:07.020
This is all we need to do for
the new customer so
188

188

00:10:07.020  -->  00:10:09.560
we just need to do a return
true at that point.
189

189

00:10:09.560  -->  00:10:15.130
A true bit, and meaning in this
case we successfully added it.
190

190

00:10:15.130  -->  00:10:17.480
And so
therefore if the code gets down to here,
191

191

00:10:17.480  -->  00:10:20.790
it means that findCustomer
actually returns a customer.
192

192

00:10:20.790  -->  00:10:24.050
And that means that we can't add
the new customer at that point,
193

193

00:10:24.050  -->  00:10:24.970
because they already exist.
194

194

00:10:24.970  -->  00:10:26.580
So if that was the case,
we wanna return false.
195

195

00:10:27.680  -->  00:10:29.660
That's what return false is there.
196

196

00:10:29.660  -->  00:10:34.350
Okay, and next what we wanna do is we need
to actually add the add transactions.
197

197

00:10:34.350  -->  00:10:37.870
The add transactions is much
the same as the new customer, but
198

198

00:10:37.870  -->  00:10:41.530
the test here is we're actually
checking to make sure it is on file.
199

199

00:10:41.530  -->  00:10:45.070
And if it's not on file, we actually
return false because it means that we
200

200

00:10:45.070  -->  00:10:48.440
can't, obviously, add another transaction
to a customer that doesn't exist.
201

201

00:10:48.440  -->  00:10:50.890
So the code is that would be public.
202

202

00:10:53.510  -->  00:10:59.500
Berlin at transaction is
cut customer transaction.
203

203

00:10:59.500  -->  00:11:01.210
Type it out so it makes sense.
204

204

00:11:01.210  -->  00:11:08.150
Transaction and it'll be string customer
name and it would be double amount.
205

205

00:11:08.150  -->  00:11:11.420
This time it's not an initial amount
because I've already that so,
206

206

00:11:11.420  -->  00:11:16.490
our logic would be if find customer
207

207

00:11:16.490  -->  00:11:21.950
customerName, if it's not equal to null,
208

208

00:11:21.950  -->  00:11:26.300
so in other words, something has
been returned, so it is on file.
209

209

00:11:26.300  -->  00:11:30.240
So if that is the case, then what we wanna
do there is we simply want to make sure we
210

210

00:11:30.240  -->  00:11:32.300
grab the existing customer record and
211

211

00:11:32.300  -->  00:11:35.280
update that by adding that
amount to the transaction.
212

212

00:11:35.280  -->  00:11:41.700
So to do that we've gotta do
Customer existingCustomer
213

213

00:11:41.700  -->  00:11:49.110
Equals findCustomer, and what I might
do is just clean this up a little bit.
214

214

00:11:49.110  -->  00:11:51.160
Cuz we've actually added a extra code.
215

215

00:11:51.160  -->  00:11:53.310
And we don't code called
findCustomer twice there.
216

216

00:11:53.310  -->  00:11:56.620
So what I'm gonna do is
actually put this code like.
217

217

00:11:56.620  -->  00:11:58.950
Calling it once and
we're gonna just do a test there.
218

218

00:11:58.950  -->  00:12:01.480
And we're just gonna change this
code just to existing customer.
219

219

00:12:04.470  -->  00:12:07.630
And by doing it this way, we're actually
only calling findCustomer once.
220

220

00:12:07.630  -->  00:12:11.800
So instead of before, we've just used that
one line which was cool because we didn't
221

221

00:12:11.800  -->  00:12:14.860
actually need to use that object cuz
we're actually testing for null.
222

222

00:12:14.860  -->  00:12:17.020
In this case with addCustomerTransaction,
223

223

00:12:17.020  -->  00:12:20.630
we actually are gonna use that to update
to therefore it makes sense to save
224

224

00:12:20.630  -->  00:12:23.950
the object here and then use it within
here when we actually get a result back.
225

225

00:12:24.970  -->  00:12:29.660
Okay, so if that's the case, so
the customer is actually on file, so
226

226

00:12:29.660  -->  00:12:34.610
all we need to do is put
existingCustomer.addTransaction(amount).
227

227

00:12:34.610  -->  00:12:39.090
And obviously, the addTransaction method
is from the customer, so we're actually
228

228

00:12:39.090  -->  00:12:44.080
executing the addTransaction method,
which is actually this method here.
229

229

00:12:44.080  -->  00:12:46.940
So obviously that's good because it's
actually calling a method that's actually
230

230

00:12:46.940  -->  00:12:47.830
in the class.
231

231

00:12:47.830  -->  00:12:51.120
And what we could do there,
the reason that's a good idea,
232

232

00:12:51.120  -->  00:12:54.130
getting back to a customer class, we could
actually add some validation in here.
233

233

00:12:54.130  -->  00:12:58.270
We could print a message, to output,
to log or do some other sort of checking
234

234

00:12:58.270  -->  00:13:01.590
to make sure the transaction was an
acceptable range as those types of things.
235

235

00:13:01.590  -->  00:13:04.500
In other words what we're doing is making
sure that we're calling the functionality
236

236

00:13:04.500  -->  00:13:06.150
that's appropriate for this class.
237

237

00:13:06.150  -->  00:13:08.140
If we're adding
a transaction to a customer,
238

238

00:13:08.140  -->  00:13:11.220
this would be the logical place to do it,
because anytime I want to make a change to
239

239

00:13:11.220  -->  00:13:13.240
the customer class we would
actually do it in that class.
240

240

00:13:13.240  -->  00:13:14.300
So that's why we're putting that there.
241

241

00:13:14.300  -->  00:13:15.050
So that's good.
242

242

00:13:15.050  -->  00:13:17.350
So we're just about done
now with our branch.
243

243

00:13:17.350  -->  00:13:20.470
What we haven't done yet though, is we
haven't actually implemented the find.
244

244

00:13:20.470  -->  00:13:23.340
So let's just add that find so
we can fix up that error.
245

245

00:13:23.340  -->  00:13:25.870
And actually what I haven't done yet
is updated this here.
246

246

00:13:25.870  -->  00:13:27.340
So let's return the statuses.
247

247

00:13:27.340  -->  00:13:31.700
So I return true because that
did succeed at that point.
248

248

00:13:31.700  -->  00:13:36.630
And then it gets down to here where it's
returning false it means that we were
249

249

00:13:36.630  -->  00:13:41.060
unable to find a customer, so we should
actually return false if that's the case.
250

250

00:13:41.060  -->  00:13:45.520
Okay, so the next one is find customer,
so we're gonna make it a private.
251

251

00:13:45.520  -->  00:13:49.630
Because this is only a method that's
used internally in this branch class, so
252

252

00:13:49.630  -->  00:13:51.510
we shouldn't be exposing it publicly.
253

253

00:13:51.510  -->  00:13:55.260
Anytime you're creating a class,
you wanna take care and
254

254

00:13:55.260  -->  00:13:59.400
consider each of your methods to see
whether they need to be public or private.
255

255

00:13:59.400  -->  00:14:02.880
And usually, in a lot of the case, they
can be private and that makes it a lot
256

256

00:14:02.880  -->  00:14:07.120
easier from the point of view of someone
using your class because they don't have
257

257

00:14:07.120  -->  00:14:09.630
to worry about anything that's private
because they won't see that when they're
258

258

00:14:09.630  -->  00:14:12.110
looking in the list of methods
that they need to work with.
259

259

00:14:12.110  -->  00:14:15.280
It just makes it a lot easier and it means
that you can change a lot of things around
260

260

00:14:15.280  -->  00:14:17.140
which we've talked about
in previous videos.
261

261

00:14:17.140  -->  00:14:20.940
So we're going to return
a customer in this case, so
262

262

00:14:20.940  -->  00:14:23.630
private customer, find customer.
263

263

00:14:23.630  -->  00:14:25.550
String customerName.
264

264

00:14:28.870  -->  00:14:32.360
And to do this we need to go through our
list of customer records that are in
265

265

00:14:32.360  -->  00:14:33.180
the array list.
266

266

00:14:33.180  -->  00:14:38.800
So for int I equals zero.I
less than customers.size so
267

267

00:14:38.800  -->  00:14:41.230
you'll never get through all the records.
268

268

00:14:41.230  -->  00:14:48.390
I++ then the test that we're
going to actually check for
269

269

00:14:48.390  -->  00:14:53.210
is we're gonna put ifthis.customers
270

270

00:14:53.210  -->  00:14:58.050
.get i.getname.=customername.
271

271

00:14:58.050  -->  00:15:02.490
Then we want to return
this .customers.geti.
272

272

00:15:02.490  -->  00:15:06.290
Otherwise all the way down here,
we actually want to return null.
273

273

00:15:08.450  -->  00:15:11.040
And what I'll do also with this, I'm
gonna clean this up a little bit as well,
274

274

00:15:11.040  -->  00:15:14.320
because you can see there's a problem.
275

275

00:15:14.320  -->  00:15:16.570
This line here was actually
retrieving the object,
276

276

00:15:16.570  -->  00:15:18.780
and then actually we
were retrieving it again.
277

277

00:15:18.780  -->  00:15:21.040
So that's just really double processing,
so
278

278

00:15:21.040  -->  00:15:23.960
let's just do that by something
like this with a customer.
279

279

00:15:26.150  -->  00:15:31.340
Check to customer equals
this.customs.dot get(i).
280

280

00:15:31.340  -->  00:15:37.440
And then we're gonna change the slot
late to put if customers, like so.
281

281

00:15:37.440  -->  00:15:39.800
And weâ€™re gonna return to customer.
282

282

00:15:39.800  -->  00:15:42.460
So that just makes it a little bit more
efficient looking at the code there now.
283

283

00:15:42.460  -->  00:15:45.000
So basically what weâ€™re doing is
weâ€™re going through the list of all
284

284

00:15:45.000  -->  00:15:48.870
the customers that weâ€™ve got stored for
this branch, and weâ€™re testing it.
285

285

00:15:48.870  -->  00:15:53.330
Firstly weâ€™re retrieving the the one
that's in the array list
286

286

00:15:53.330  -->  00:15:54.790
as we go through each and every element.
287

287

00:15:54.790  -->  00:15:58.870
Then what we're doing is checking to see
if the name for that customer is the same,
288

288

00:15:58.870  -->  00:16:04.140
in other words is a match to the customer
name that's been passed to this method,
289

289

00:16:04.140  -->  00:16:06.600
and if you recall the new customer and
290

290

00:16:06.600  -->  00:16:09.900
add customer transaction methods
are actually using this.
291

291

00:16:09.900  -->  00:16:14.220
They're actually passing the name of the
customer so, if there's a match there then
292

292

00:16:14.220  -->  00:16:18.600
we're going to return the customer entry
that matched that from the array list.
293

293

00:16:18.600  -->  00:16:20.540
Otherwise we're gonna return null, and
294

294

00:16:20.540  -->  00:16:24.570
null actually means that there was no
matches and that customers not on file.
295

295

00:16:24.570  -->  00:16:28.170
So lets define customer, and
I think we're actually done with that now.
296

296

00:16:28.170  -->  00:16:32.710
So what we've got to do next is the bank
class and then what we need to do is wrap
297

297

00:16:32.710  -->  00:16:35.910
that up a little bit and
add some code to actually test on this.
298

298

00:16:35.910  -->  00:16:38.750
So time is ticking on so,
I'm gonna end this video here and
299

299

00:16:38.750  -->  00:16:42.920
we'll come back in the next video we'll
implement the bank classes in and
300

300

00:16:42.920  -->  00:16:46.330
then we'll go through and start running
some test code in our main class.
301

301

00:16:46.330  -->  00:16:47.480
So I'll see you in the next video.
