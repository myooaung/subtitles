1
1

00:00:04,680  -->  00:00:09,330
so continuing on from the previous video
and we went through an example showing
2

2

00:00:09,330  -->  00:00:13,590
how by just changing the instance
variable we got a completely
3

3

00:00:13,590  -->  00:00:18,210
different result with our multiple
threads and probably at first glance you
4

4

00:00:18,210  -->  00:00:21,330
think that it wasn't doing what it should
be doing
5

5

00:00:21,330  -->  00:00:25,080
so when i introduced terminology
relating to threads i briefly mentioned
6

6

00:00:25,080  -->  00:00:30,860
the heap and that's the applications
memory that all threads share now I also
7

7

00:00:30,860  -->  00:00:36,390
said that every thread has a thread
stack and that's memory that only that
8

8

00:00:36,390  -->  00:00:37,800
thread can access
9

9

00:00:37,800  -->  00:00:42,890
so in other words thread one can't
access threads 2's thread stack
10

10

00:00:42,890  -->  00:00:49,710
and vice versa but they can both access
the heap now local variables are stored
11

11

00:00:49,710  -->  00:00:54,540
in the thread stack that means that each
thread has its own copy of a local
12

12

00:00:54,540  -->  00:01:00,840
variable in contrast the memory required
to store an object instance value is
13

13

00:01:00,840  -->  00:01:02,390
allocated on the heap
14

14

00:01:02,390  -->  00:01:07,790
in other words when multiple threads are
working with the same object they in
15

15

00:01:07,790  -->  00:01:12,470
fact share the same object or share that
object so they don't have their own copy
16

16

00:01:12,470  -->  00:01:17,580
as such and so when one thread changes
the value of one of the objects instance
17

17

00:01:17,580  -->  00:01:21,540
variables the other threads will see the
new value from that point forward
18

18

00:01:22,170  -->  00:01:25,470
so how does that relate back to our
application
19

19

00:01:25,470  -->  00:01:30,270
well we're passing the same count down object to both threads and you saw that
20

20

00:01:30,270  -->  00:01:35,100
defined on line 8 and 10 on
the screen when we used a local variable
21

21

00:01:35,100  -->  00:01:41,000
for i that was ok because when the
jvm allocated the space for the local
22

22

00:01:41,000  -->  00:01:44,900
variable it used each threads stack
23

23

00:01:44,900  -->  00:01:49,650
consequently each thread has their own
copy of i on their respective thread
24

24

00:01:49,650  -->  00:01:50,520
stacks
25

25

00:01:50,520  -->  00:01:56,070
however when we switched to using an
instance variable the jvm allocated the
26

26

00:01:56,070  -->  00:01:56,900
space
27

27

00:01:56,900  -->  00:02:03,450
for i when it created the count down object
and it did so at that point on the heap
28

28

00:02:04,040  -->  00:02:09,240
now threads share the heap so in that
case or in this case the two threads
29

29

00:02:09,240  -->  00:02:14,000
don't then have their own copy of the
variable I but in fact share the
30

30

00:02:14,000  -->  00:02:15,900
variable that's on the heap
31

31

00:02:15,900  -->  00:02:17,610
so what that means is that
32

32

00:02:17,610  -->  00:02:23,430
so when thread one executes and change
changes the the value of i and then get
33

33

00:02:23,430  -->  00:02:24,720
suspended
34

34

00:02:24,720  -->  00:02:29,340
so that thread 2 can execute thread 2 will then see the new value of I
35

35

00:02:29,340  -->  00:02:32,220
as it has been updated from thread one
36

36

00:02:32,220  -->  00:02:37,470
it won't see the value of I that it had
when it was last suspended and that's
37

37

00:02:37,470  -->  00:02:43,500
why each thread is sometimes skipping a
number and why numbers can appear out of
38

38

00:02:43,500  -->  00:02:44,220
order
39

39

00:02:44,220  -->  00:02:48,480
so let's take a closer look at the
output above in this screenshot that
40

40

00:02:48,480  -->  00:02:51,270
I've got there and try and make some
sense of it
41

41

00:02:51,270  -->  00:02:55,620
now we have to keep in mind that a for
loop is actually several statements
42

42

00:02:56,130  -->  00:03:01,350
i'm talking about the for loop on line 36
the first time it's executed it assigns
43

43

00:03:01,350  -->  00:03:07,200
the initial value to the variable it
then checks to see whether the for
44

44

00:03:07,200  -->  00:03:08,670
condition is met
45

45

00:03:08,670  -->  00:03:13,500
if it is the code within the loop is executed and I'm sure you
46

46

00:03:13,500  -->  00:03:17,130
understand that because we have been
for loops throughout this course
47

47

00:03:17,130  -->  00:03:22,260
but when we return to the for statement
it will then decrement I in this case
48

48

00:03:22,260  -->  00:03:24,630
and then check the condition again
49

49

00:03:24,630  -->  00:03:28,980
so basically a for loop consists of
several steps and a thread can be
50

50

00:03:28,980  -->  00:03:33,450
suspended between each step this is the
key point i'm making here so a thread can
51

51

00:03:33,450  -->  00:03:40,140
be suspended between steps as an example
a thread could be suspended after the for
52

52

00:03:40,140  -->  00:03:44,640
has decremented the I variable but
before the condition has been checked
53

53

00:03:44,640  -->  00:03:50,190
again another example it could also be
suspended after executing all the code
54

54

00:03:50,190  -->  00:03:54,180
associated with the for loop but before
executing the print line
55

55

00:03:54,180  -->  00:03:58,170
so let's thinking about that let's list our some potential suspension
56

56

00:03:58,170  -->  00:03:59,040
points here
57

57

00:03:59,040  -->  00:04:02,820
so in the for loop a thread could be
suspended just before decrementing I
58

58

00:04:02,820  -->  00:04:08,280
just before the condition or just before
printing out the value so three spots
59

59

00:04:08,280  -->  00:04:13,380
there and thinking about it theirs actually
more suspension points in this because
60

60

00:04:13,380  -->  00:04:17,640
the print line statement involves
concatenation and IO and effectively
61

61

00:04:17,640  -->  00:04:21,600
calls multiple things but this is
really a good enough
62

62

00:04:21,600  -->  00:04:23,570
understanding of what's happening
63

63

00:04:23,570  -->  00:04:28,860
the point here is that there's multiple
points where the thread the current
64

64

00:04:28,860  -->  00:04:29,950
thread could be suspend
65

65

00:04:29,950  -->  00:04:35,080
so when we analyze the output all we can
really be sure of is what the value of
66

66

00:04:35,080  -->  00:04:38,080
I was when each thread printed it
at that point in time
67

67

00:04:38,710  -->  00:04:43,810
so both threads thought the value of I
was ten the first time they executed the
68

68

00:04:43,810  -->  00:04:48,580
print statement that means that thread
one was suspended before it could
69

69

00:04:48,580  -->  00:04:50,380
decrement I from 10
70

70

00:04:50,380  -->  00:04:54,670
in other words reducing it to nine
because when thread 2 print the value
71

71

00:04:54,670  -->  00:04:57,190
it still had the value of 10
72

72

00:04:57,190  -->  00:05:00,700
now when thread one gets the chance to
print the line again
73

73

00:05:00,700  -->  00:05:05,560
the value is 9 so from this we can
guess that thread one decremented value
74

74

00:05:05,560  -->  00:05:07,750
from 10 to 9
75

75

00:05:07,750  -->  00:05:12,940
so how do we know that well if the
thread 2 had beaten thread 1 to it
76

76

00:05:12,940  -->  00:05:17,950
and decremented the value from ten to
nine when thread one had the chance to
77

77

00:05:17,950  -->  00:05:23,080
run again it would have decremented the
value from nine to eight so it would
78

78

00:05:23,080  -->  00:05:26,890
never have printed the value 9 at
all but because it does
79

79

00:05:26,890  -->  00:05:31,810
we know that thread one decremented it and
by the same reasoning we know that the
80

80

00:05:31,810  -->  00:05:36,010
thread one was suspended before iti could
decrement the value from 9 to 8
81

81

00:05:36,010  -->  00:05:40,270
thread 2 then decrement the value from
nine to 8 and then prints
82

82

00:05:40,270  -->  00:05:44,200
8 so the 2 threads go back and
forth like this for a bit
83

83

00:05:44,200  -->  00:05:49,120
with thread one decrementing the value
printing it and suspending and then
84

84

00:05:49,120  -->  00:05:53,950
thread 2 decrementing the value
printing it and suspending now
85

85

00:05:53,950  -->  00:05:58,300
rather than each thread being able to
count down from ten to one that keeps
86

86

00:05:58,300  -->  00:06:03,040
skipping numbers because of the
interference from the other thread in
87

87

00:06:03,040  -->  00:06:07,780
fact when problems arise because threads
are inter leaving and accessing the same
88

88

00:06:07,780  -->  00:06:08,920
resources
89

89

00:06:08,920  -->  00:06:13,810
the situation has a name its known as
thread interference and we can see why
90

90

00:06:13,810  -->  00:06:16,900
it's called thatp now from what was
shown here on the screen
91

91

00:06:16,900  -->  00:06:21,640
these two threads keep interfering with
each other because whenever they get a
92

92

00:06:21,640  -->  00:06:26,650
chance to run the other thread has
changed the value of i and as a result
93

93

00:06:26,650  -->  00:06:32,560
each thread can no longer count down from
ten to one and hit all the numbers will
94

94

00:06:32,560  -->  00:06:37,510
also see this situation referred to as a
race condition which is the more common
95

95

00:06:37,510  -->  00:06:40,330
term for when two or more threads are
writing a share
96

96

00:06:40,330  -->  00:06:45,460
resource it is important to note that
there wouldn't be a problem if both
97

97

00:06:45,460  -->  00:06:50,020
threads are only reading the shared
resource problem will only arise when at
98

98

00:06:50,020  -->  00:06:53,740
least one other threads is writing or
updating the resource
99

99

00:06:55,090  -->  00:06:58,180
so let's think about what might have
happened when the numbers two and three
100

100

00:06:58,180  -->  00:07:03,060
were printed out of order from the
pattern we've seen before we could guess
101

101

00:07:03,060  -->  00:07:08,500
that each thread was decrementing the value
checking the four condition executing
102

102

00:07:08,500  -->  00:07:14,050
the print statement and then suspending
so they're going back and forth
103

103

00:07:14,050  -->  00:07:18,720
except on the numbers four and two were
printed by thread 2
104

104

00:07:18,720  -->  00:07:23,680
so we can guess from the output that the
two threads still interleaved but thread
105

105

00:07:23,680  -->  00:07:28,690
1 didn't get a chance to print the value
3 before it was suspended
106

106

00:07:29,190  -->  00:07:32,860
so you might wonder you know why it printed the value 3 when it got the
107

107

00:07:32,860  -->  00:07:38,740
chance to run again after all wouldn't
thread 1 have decremented the value to 2
108

108

00:07:38,740  -->  00:07:42,150
so why didn't thread one print the value
of three
109

109

00:07:42,150  -->  00:07:47,160
so in this case our over simplification
of the possible suspension points
110

110

00:07:47,160  -->  00:07:52,380
don't work now I mentioned that there are
potential suspension points within the
111

111

00:07:52,380  -->  00:07:57,810
print statement itself and that's what's
actually happening here so let's take a
112

112

00:07:57,810  -->  00:08:03,870
stab at how these threads are executed
thread two prints the value of 4 and
113

113

00:08:03,870  -->  00:08:08,500
has then been suspended thread one which has
printed the value 5 previously and then
114

114

00:08:08,500  -->  00:08:09,630
suspended
115

115

00:08:09,630  -->  00:08:15,030
decrements the value to 3 thread 1
starts to execute the print statement
116

116

00:08:15,720  -->  00:08:19,410
it builds the string that it's going to
print and at that point in time the
117

117

00:08:19,410  -->  00:08:26,560
value of i is still 3 thread one calls
println and then is suspended while the
118

118

00:08:26,560  -->  00:08:30,750
printlns method is executing but
before the string is output to the
119

119

00:08:30,750  -->  00:08:37,020
console thread 2 decrements the value to
2 and prints it and then it suspends
120

120

00:08:37,020  -->  00:08:41,520
thread 1 continues to execute the println method and print out the string
121

121

00:08:41,520  -->  00:08:48,550
it created when the value of i was still
3 then suspends thread 2 decrements
122

122

00:08:48,550  -->  00:08:51,110
the value of i to 1 then prints it out
123

123

00:08:51,110  -->  00:08:56,660
now that the value of i is 1 by threads
at this point exits the for loop and terminates
124

124

00:08:56,660  -->  00:09:01,330
now I know that is a bit of a mouthful or
bit of a little bit to get your head
125

125

00:09:01,330  -->  00:09:04,910
around but you can see that every time
we run this we going to get a different
126

126

00:09:04,910  -->  00:09:05,890
result
127

127

00:09:05,890  -->  00:09:09,860
and there really is just no way to
predict which thread is going to print
128

128

00:09:09,860  -->  00:09:13,760
out which numbers and obviously in the
case when i run this previously we've
129

129

00:09:13,760  -->  00:09:15,320
got a completely different result
130

130

00:09:15,320  -->  00:09:19,880
to my example image here so hopefully you
can see now that threads are deceptively
131

131

00:09:19,880  -->  00:09:21,520
simple to work with
132

132

00:09:21,520  -->  00:09:26,180
we just have to create an object
subclass from thread and call the start
133

133

00:09:26,180  -->  00:09:29,890
method or create an instance of the
thread class with a runnable object
134

134

00:09:29,890  -->  00:09:31,760
which we've done in this section
135

135

00:09:31,760  -->  00:09:34,940
but even when we have only two threads
that are doing something
136

136

00:09:34,940  -->  00:09:39,560
you know really simple like in this case you can
see how problems and come about because
137

137

00:09:39,560  -->  00:09:44,200
object instances are stored in the heap
which is shared across threads in an
138

138

00:09:44,200  -->  00:09:45,320
application
139

139

00:09:45,320  -->  00:09:48,890
so I'm going to finish the video here
now in the next video will continue our
140

140

00:09:48,890  -->  00:09:51,320
discussion about race conditions
141

141

00:09:51,320  -->  00:09:52,310
see you in the next video
