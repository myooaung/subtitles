1
1

00:00:05,100  -->  00:00:09,590
so in the previous video we added our
tool tip that popped up automatically
2

2

00:00:09,590  -->  00:00:12,830
when we hovered over the toolbar button
for a few seconds
3

3

00:00:12,830  -->  00:00:17,600
so the cool thing about that was adding
the toolbar as well as the button adding
4

4

00:00:17,600  -->  00:00:23,580
both of those to the UI only requires us
to change the fxml we didn't have to
5

5

00:00:23,580  -->  00:00:26,340
touch a single line of java code which
is pretty cool
6

6

00:00:26,340  -->  00:00:32,190
so let's just move on now and look at
enhancing our UI in another way the
7

7

00:00:32,190  -->  00:00:36,510
right now we're coloring items in the
list view based on their deadline values
8

8

00:00:36,510  -->  00:00:42,830
instead of this or perhaps in addition
to what we could do is display the items
9

9

00:00:42,830  -->  00:00:47,600
in the order in which there due so that
items due sooner or near to the top of
10

10

00:00:47,600  -->  00:00:51,830
the list view and items due later are
near the bottom
11

11

00:00:52,350  -->  00:00:58,100
now javafx has got a sorted list class
that will make implementation of this
12

12

00:00:58,100  -->  00:01:03,440
you know really quite easy because our
list contained to do instances and not
13

13

00:01:03,440  -->  00:01:04,440
strings
14

14

00:01:04,440  -->  00:01:08,580
what we'll need to do is provide the
sorted list with the comparator now the
15

15

00:01:08,580  -->  00:01:12,780
comparotr will tell the list how the
items should be ordered
16

16

00:01:12,780  -->  00:01:16,920
so we need to write the code for that to
happen the sorted list will call the
17

17

00:01:16,920  -->  00:01:22,250
comparators compare method when
it's comparing one item one to do
18

18

00:01:22,250  -->  00:01:26,600
item with another so in our case we want
the comparotor to look at the deadline
19

19

00:01:26,600  -->  00:01:31,920
of the two instances when it's comparing
the two instances that it is comparing i
20

20

00:01:31,920  -->  00:01:36,750
should say so to do this we need to open
our controller class because we could be
21

21

00:01:36,750  -->  00:01:41,340
making all the changes in there so we
don't actually have to change or touch
22

22

00:01:41,340  -->  00:01:44,780
the to do data class at all to implement
this
23

23

00:01:44,780  -->  00:01:49,670
so go back up to the code in
the initialize method we're going to
24

24

00:01:49,670  -->  00:01:53,820
come down to the code just before the
first set items to do there to do data get
25

25

00:01:53,820  -->  00:01:58,530
instance.get to do items just hear on
line 69
26

26

00:01:58,530  -->  00:02:02,540
now we're still going to use an
observable arraylist to store the to do
27

27

00:02:02,540  -->  00:02:07,890
list items but instead of using it to
populate the list view what we'll do is
28

28

00:02:07,890  -->  00:02:12,570
we'll wrap it in a sorted list instance
and then use the sorted list itself to
29

29

00:02:12,570  -->  00:02:17,580
populate the list view once we've done
that any changes to our observable
30

30

00:02:17,580  -->  00:02:18,430
arraylist
31

31

00:02:18,430  -->  00:02:21,430
will be reflected in the listview just
as they were before
32

32

00:02:22,060  -->  00:02:26,890
and what's more the item their in the list view will remain sorted so let's
33

33

00:02:26,890  -->  00:02:29,290
add the code and see this in action
34

34

00:02:29,290  -->  00:02:32,530
so start off creating a sorted list so...
35

35

00:02:35,800  -->  00:02:44,200
....
36

36

00:02:45,400  -->  00:02:49,930
we need a couple of parameters here the
first is the observable array list that
37

37

00:02:49,930  -->  00:02:53,680
contains our to-do items and the second
one is gonna be the comparator which
38

38

00:02:53,680  -->  00:02:57,700
will write as an anonymous class and in
order to do that then we'll have to
39

39

00:02:57,700  -->  00:02:59,500
override the compare method
40

40

00:02:59,500  -->  00:03:09,070
so first parameter to....
41

41

00:03:09,070  -->  00:03:13,900
....
42

42

00:03:13,900  -->  00:03:20,500
.....and press enter
and it should implement the method for
43

43

00:03:20,500  -->  00:03:20,830
us
44

44

00:03:20,830  -->  00:03:26,410
you can see it's done there...
45

45

00:03:26,410  -->  00:03:32,140
....
46

46

00:03:32,650  -->  00:03:38,680
so in terms of how this compare method
works we pass the to-do items to
47

47

00:03:38,680  -->  00:03:43,990
be compared as the parameters o1 and o2
as you can see in the compare method on
48

48

00:03:43,990  -->  00:03:45,220
line 74
49

49

00:03:45,220  -->  00:03:49,900
so this has to return a negative value
if object o1 is considered to be
50

50

00:03:49,900  -->  00:03:54,970
less than object o2 so it must return 0
if the two objects are considered to be
51

51

00:03:54,970  -->  00:04:00,160
equal and then it must also return a
positive value if object o1 is
52

52

00:04:00,160  -->  00:04:02,520
considered to be greater than o2
53

53

00:04:02,520  -->  00:04:07,570
so usually we return negative 1 0
or 1 depending on the object that is pass
54

54

00:04:07,570  -->  00:04:14,610
to us so in our case o1 and o23 again
our to-do item drop objects and we want
55

55

00:04:14,610  -->  00:04:19,300
to compare their deadline values the
deadlines if you recall are instances
56

56

00:04:19,300  -->  00:04:24,040
of the local date class so i'm going to
use that class as compared to method to
57

57

00:04:24,040  -->  00:04:25,600
compare the two deadlines
58

58

00:04:25,600  -->  00:04:29,230
now since that returns a negative
value when the first date is less the
59

59

00:04:29,230  -->  00:04:31,930
second date 0 and the two dates are equal
60

60

00:04:31,930  -->  00:04:35,970
and a positive value when the first date
is greater than the second date
61

61

00:04:35,970  -->  00:04:40,630
it actually does exactly what we want so
our comparators compare method can just
62

62

00:04:40,630  -->  00:04:45,190
return the value that they compared to
method returns when we compared both our
63

63

00:04:45,190  -->  00:04:46,030
dates
64

64

00:04:46,030  -->  00:04:50,280
so to write that code it's really just
one line of code changing the return
65

65

00:04:50,280  -->  00:04:53,530
line to be o1 which was the first
argument....
66

66

00:04:54,030  -->  00:05:04,470
....and that does all the work of
67

67

00:05:04,470  -->  00:05:07,000
using the local dates
68

68

00:05:07,000  -->  00:05:11,190
compare to method and we return that in
our compare method so that will
69

69

00:05:11,190  -->  00:05:11,440
come
70

70

00:05:11,440  -->  00:05:15,160
we've got away now to order our to do
items by the deadline date
71

71

00:05:15,160  -->  00:05:24,310
so let's run that and see what happens
and everything seems to be exactly the
72

72

00:05:24,310  -->  00:05:28,690
same but that's because we're still
populating the list view using the
73

73

00:05:28,690  -->  00:05:31,630
observable arraylist so let's look at
changing that now so i'm going to close
74

74

00:05:31,630  -->  00:05:32,560
it down
75

75

00:05:32,560  -->  00:05:39,220
moving down to this line here we're
currently doing an on line 79 going to
76

76

00:05:39,220  -->  00:05:40,290
commit that out now
77

77

00:05:40,290  -->  00:05:49,200
instead what we're going to do is put....
78

78

00:05:49,200  -->  00:05:52,350
....
79

79

00:05:52,350  -->  00:05:55,350
....and let's have a look
80

80

00:05:55,350  -->  00:06:00,840
run it and see what happens we should
now see that they're ordered in the
81

81

00:06:00,840  -->  00:06:04,530
right date we can see in the first
entry on march 23rd april
82

82

00:06:04,530  -->  00:06:09,940
20 22 25th may 10 and obviously that's in order now
83

83

00:06:09,940  -->  00:06:13,870
as you can see which is good right down
to the last entry in may the 23rd
84

84

00:06:13,870  -->  00:06:20,010
and just confirming that if I re comment in line 79 again comment out our
85

85

00:06:20,010  -->  00:06:22,650
sorted list line and run it
86

86

00:06:22,650  -->  00:06:27,090
we should see that the order was as it
was before we now got an entry in
87

87

00:06:27,090  -->  00:06:32,470
april may April March so clearly the ordering is working nicely
88

88

00:06:33,070  -->  00:06:38,160
we closed it down and comment it again
and put back our sorted list which we're
89

89

00:06:38,160  -->  00:06:39,230
going to leave in
90

90

00:06:39,230  -->  00:06:43,160
so that's good we can now see that our
to-do items are now sorted with the
91

91

00:06:43,160  -->  00:06:46,160
ones due sooner at the top and the
ones due later at the bottom
92

92

00:06:46,670  -->  00:06:50,960
so lets run it we did see that it was
working let's just add a new entry just
93

93

00:06:50,960  -->  00:06:54,860
to be sure that this is working as we think it should work so we got the first
94

94

00:06:54,860  -->  00:06:59,360
entry there on march 23rd that's the
is the earliest entries that I've got on file
95

95

00:06:59,360  -->  00:07:02,360
i'm going to set a deadline prior to
that date and just see what happens...
96

96

00:07:04,400  -->  00:07:14,660
....and i'll just make it earlier as I said
97

97

00:07:14,660  -->  00:07:19,280
I will put it to January the 13th
98

98

00:07:20,240  -->  00:07:25,340
click ok and you can see immediately that's been
added to the top of the list and
99

99

00:07:25,340  -->  00:07:28,610
it done it automatically without us having
to write any code beyond what's already
100

100

00:07:28,610  -->  00:07:34,940
there so let's just add another item and
we'll add one would lets say around...
101

101

00:07:34,940  -->  00:07:40,670
let's add one on may 19 in my
case I've got may 18 and may
102

102

00:07:40,670  -->  00:07:50,150
19 so let's check that so we'll call
this one....
103

103

00:07:50,150  -->  00:07:55,040
....okay
104

104

00:07:55,610  -->  00:08:01,670
you saw that got out of there so we got the 18 and the 17 and 20 may 19
105

105

00:08:01,670  -->  00:08:03,410
that's clearly working which is good
106

106

00:08:03,410  -->  00:08:07,100
alright so let's delete an item so
what we do is say will delete
107

107

00:08:07,100  -->  00:08:10,100
we got to the 18th lets delete that one
108

108

00:08:10,100  -->  00:08:17,630
you can see our order is still being
maintained so that's good
109

109

00:08:18,290  -->  00:08:22,280
so when we first thought of this
enhancement maybe you thought that you'd
110

110

00:08:22,280  -->  00:08:25,580
have to add a lot you know like a ton of
code that would manage the sorting for
111

111

00:08:25,580  -->  00:08:29,960
us and keep the list sorted when items
are added and deleted but as you can see
112

112

00:08:29,960  -->  00:08:32,210
here that's clearly not the case
113

113

00:08:32,210  -->  00:08:35,330
so it's always best not to reinvent the
wheel where possible
114

114

00:08:35,870  -->  00:08:40,370
so we're going to try something new what
you should really do is check the javafx
115

115

00:08:40,370  -->  00:08:45,830
documentation will search the internet
to see if javafx has got classes already
116

116

00:08:45,830  -->  00:08:50,030
to support what it is you're trying to
do in this case is as you saw it was really
117

117

00:08:50,030  -->  00:08:51,770
a simple matter of wrapping our data
118

118

00:08:51,770  -->  00:08:56,730
in a sorted list encoding comparator
and everything else just work for us
119

119

00:08:56,730  -->  00:09:00,420
so sorting is the type of
functionality that we might offer us an
120

120

00:09:00,420  -->  00:09:01,130
option
121

121

00:09:01,130  -->  00:09:05,570
we could also give the user you
know the choice of sorting based on a
122

122

00:09:05,570  -->  00:09:10,250
short description perhaps in which case
would assign a different comparator when
123

123

00:09:10,250  -->  00:09:12,930
we actually created a sorted list
124

124

00:09:12,930  -->  00:09:18,020
that's another option we can offer the user i should say is
125

125

00:09:18,020  -->  00:09:19,050
filtering
126

126

00:09:19,050  -->  00:09:23,840
so let's actually go ahead and try and
do that so let's add a toggle button to
127

127

00:09:23,840  -->  00:09:28,310
the toolbar and that's going to let the
user hide to-do items that aren't due
128

128

00:09:28,310  -->  00:09:33,020
today so let's start by adding the
toggle button to our effort fxml file
129

129

00:09:33,020  -->  00:09:42,710
.....so let's add the toggle
button to the toolbar as i mentioned and
130

130

00:09:42,710  -->  00:09:44,120
we'll add it after the button
131

131

00:09:44,120  -->  00:09:50,490
so let's go ahead and do that.....
132

132

00:09:50,490  -->  00:10:16,580
....
133

133

00:10:17,330  -->  00:10:25,190
....ok so that's our toggle
button and you saw that i gave it the
134

134

00:10:25,190  -->  00:10:28,980
text and when it's selected we're going
to show items with a deadline of today
135

135

00:10:28,980  -->  00:10:32,960
when it's not selected going to show all
items now in a real world application
136

136

00:10:32,960  -->  00:10:37,680
the button would probably display an
icon but for this example just stick
137

137

00:10:37,680  -->  00:10:41,450
with text will also be a good idea for
the toggle button to have a tooltip as
138

138

00:10:41,450  -->  00:10:43,190
you can see a valid one
139

139

00:10:43,190  -->  00:10:46,920
and we could have the tool tip actually
change depending on the state of the
140

140

00:10:46,920  -->  00:10:50,450
toggle button but to keep things simple
what I've just added is the text for
141

141

00:10:50,450  -->  00:10:54,950
both up and down and the user can read
that irrespective of whether they've got
142

142

00:10:54,950  -->  00:10:56,060
the button pressed or not
143

143

00:10:56,060  -->  00:11:00,200
so to implement this we need an event
handler that adds or removes the
144

144

00:11:00,200  -->  00:11:03,060
filtering when that toggle button is
pressed
145

145

00:11:03,060  -->  00:11:05,440
so let's actually add our ID to our
146

146

00:11:05,440  -->  00:11:11,710
toggle button....
147

147

00:11:11,710  -->  00:11:24,070
....
148

148

00:11:24,070  -->  00:11:28,210
so we're going to put a hash....
149

149

00:11:28,210  -->  00:11:34,780
of course we have written it yet so
let's go back to our controller and we
150

150

00:11:34,780  -->  00:11:38,110
need to add an instant for the
toggle button first so we will add that
151

151

00:11:38,110  -->  00:11:44,320
at the top and will annotate it as well....
152

152

00:11:44,320  -->  00:11:50,620
....
153

153

00:11:50,620  -->  00:11:55,240
...
154

154

00:11:55,240  -->  00:12:02,380
....
155

155

00:12:02,380  -->  00:12:12,190
.....and we need some
generic code we need some code
156

156

00:12:12,190  -->  00:12:16,590
if the button is selected and then we
have an else if the button isn't selected
157

157

00:12:16,590  -->  00:12:20,340
and based on either one of those
conditions we need to perform some code
158

158

00:12:20,340  -->  00:12:26,400
so the skeleton code will be if....
159

159

00:12:26,400  -->  00:12:30,010
....
160

160

00:12:30,010  -->  00:12:34,720
...so I'm going
161

161

00:12:34,720  -->  00:12:35,920
to end the video here
162

162

00:12:35,920  -->  00:12:40,540
the next video we'll come back and we'll
implement this code to filter items
163

163

00:12:40,540  -->  00:12:42,040
depending on the state of the button
164

164

00:12:42,040  -->  00:12:42,900
see you in the next video
