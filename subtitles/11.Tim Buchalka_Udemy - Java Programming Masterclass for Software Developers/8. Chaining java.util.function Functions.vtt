WEBVTT
1
1

00:00:05.000  -->  00:00:10.460
so continuing on with functions just as
with consumer supplier and predicate
2

2

00:00:10.460  -->  00:00:14.690
there are more specific function
interfaces that include the type of the
3

3

00:00:14.690  -->  00:00:19.490
argument and return value for example
long to int function accepts a long
4

4

00:00:19.490  -->  00:00:24.430
argument and returns an int value int to
double function accepts an int argument and
5

5

00:00:24.430  -->  00:00:29.390
returns a double value now we can also
chain functions together just as we
6

6

00:00:29.390  -->  00:00:34.220
could with predicates now the chain
functions we use the and then method in
7

7

00:00:34.220  -->  00:00:39.170
the function interface that method takes
a function as a parameter so let's
8

8

00:00:39.170  -->  00:00:40.760
actually look at an example
9

9

00:00:40.760  -->  00:00:45.200
now remember that we had a lambda in a
previous video that upper case the first
10

10

00:00:45.200  -->  00:00:48.800
and last names and then concatenated
them together so let's actually do
11

11

00:00:48.800  -->  00:00:51.890
something similar by chaining functions
12

12

00:00:51.890  -->  00:00:55.070
we're going to uppercase the employee
named in one function and when they will
13

13

00:00:55.070  -->  00:00:59.620
get the uppercase first name in another
function so first let's go ahead and
14

14

00:00:59.620  -->  00:01:05.960
actually add the function that upper
cases the name so function....
15

15

00:01:05.960  -->  00:01:24.040
....
16

16

00:01:24.040  -->  00:01:28.580
....that just accept an employee argument
gets the name and returns an uppercase
17

17

00:01:28.580  -->  00:01:34.700
but what about the second one well we want to
get a substring of the uppercase name in
18

18

00:01:34.700  -->  00:01:38.360
other words we want to operate on the on
the value returned from the first
19

19

00:01:38.360  -->  00:01:43.040
function which is exactly how the and
then method works when you chain
20

20

00:01:43.040  -->  00:01:48.560
functions together the return value of
each function is operated on by the next
21

21

00:01:48.560  -->  00:01:53.000
function in the chain so with that in
mind here is the function that gets the
22

22

00:01:53.000  -->  00:02:00.970
first name so....
23

23

00:02:00.970  -->  00:02:03.970
....
24

24

00:02:05.580  -->  00:02:15.630
....so
25

25

00:02:15.630  -->  00:02:20.550
that our concat and concatenate function
so lets now chain them together and
26

26

00:02:20.550  -->  00:02:25.770
print out the result so we do another
function....
27

27

00:02:25.770  -->  00:02:52.980
....
28

28

00:02:52.980  -->  00:02:57.510
so basically the upper case function is
getting the entire employee name
29

29

00:02:57.510  -->  00:03:02.190
converting it to uppercase the first name function is accepting that as a
30

30

00:03:02.190  -->  00:03:05.700
parameter or will be passing it as a
parameter and it's returning just the
31

31

00:03:05.700  -->  00:03:11.220
first name and as you can see chaining
functions together requires two steps
32

32

00:03:11.220  -->  00:03:15.750
first we have to create what's called a
composed function the function that
33

33

00:03:15.750  -->  00:03:20.340
calls the and then method will run first
and then the function pass as the
34

34

00:03:20.340  -->  00:03:25.350
argument to and then we'll operate on
its result so we can actually chain as
35

35

00:03:25.350  -->  00:03:29.370
many functions together as we want each
function in the chain will operate on
36

36

00:03:29.370  -->  00:03:34.290
the last produced result and as with
any function we call the apply method to
37

37

00:03:34.290  -->  00:03:39.690
run the compose function so when we do
that will run it and we'll see what
38

38

00:03:39.690  -->  00:03:40.350
happens
39

39

00:03:40.350  -->  00:03:44.070
well actually I haven't added that line yet have I so i need to add that line
40

40

00:03:44.070  -->  00:03:48.330
let's just print out what's going to
happen so we're going to....
41

41

00:03:48.330  -->  00:04:00.120
....
42

42

00:04:00.120  -->  00:04:06.150
....so let's just try that and you
can see we've got John showing as the
43

43

00:04:06.150  -->  00:04:11.910
output the function interface also
contains a compose method that works in
44

44

00:04:11.910  -->  00:04:16.470
the opposite direction to the and then
method now the function that calls the
45

45

00:04:16.470  -->  00:04:18.100
method is runs second
46

46

00:04:18.100  -->  00:04:21.370
the function is passed as the argument
runs first
47

47

00:04:21.370  -->  00:04:26.230
personally I think it's easier to think
in terms of the and then method but the
48

48

00:04:26.230  -->  00:04:29.770
compose method is there for you
to use if you prefer it
49

49

00:04:31.090  -->  00:04:35.950
alright so let's actually change the
example we just coded so instead of
50

50

00:04:35.950  -->  00:04:39.280
printing out the first name lets
actually suppose we want to concatenate
51

51

00:04:39.280  -->  00:04:44.890
the employees name and age instead and print the
result we're going to change the second
52

52

00:04:44.890  -->  00:04:49.300
function to do that but hang on wait a
minute will need the employee object in
53

53

00:04:49.300  -->  00:04:54.100
a second step so that we can get the age
but we also need the uppercase name
54

54

00:04:54.100  -->  00:04:59.260
from the first step so we actually need
two arguments but function only accepts
55

55

00:04:59.260  -->  00:05:00.070
one
56

56

00:05:00.070  -->  00:05:04.330
well this is where the biinterface
comes in for all the interfaces we've
57

57

00:05:04.330  -->  00:05:08.710
discussed except supplier there
are versions of the interfaces that
58

58

00:05:08.710  -->  00:05:13.210
accept two arguments so in this case we
want to use the bifunction interface
59

59

00:05:13.210  -->  00:05:18.160
instead of just function so that in mind lets create the function for the second
60

60

00:05:18.160  -->  00:05:29.380
step and then we're going to type....
61

61

00:05:29.380  -->  00:05:43.780
....
62

62

00:05:43.780  -->  00:05:52.720
.....
63

63

00:05:52.720  -->  00:05:58.150
.....so question now is can we chain this
64

64

00:05:58.150  -->  00:06:03.310
function to the uppercase function well no we can't when we change functions
65

65

00:06:03.310  -->  00:06:08.200
result of one function becomes the
argument for the next function but a bi
66

66

00:06:08.200  -->  00:06:12.730
function has two arguments so it can't
be the second or subsequent function in
67

67

00:06:12.730  -->  00:06:13.570
the chain
68

68

00:06:13.570  -->  00:06:18.580
however if the bi function was the first
step then we could do it using bi
69

69

00:06:18.580  -->  00:06:22.480
functions and then method for the same
reason that bi function has to be the
70

70

00:06:22.480  -->  00:06:26.470
first function in the chain the bi
function interface doesn't have a
71

71

00:06:26.470  -->  00:06:31.530
compose method so instead of chaining we
have to uppercase and
72

72

00:06:31.530  -->  00:06:39.000
concatenate the age in two steps i'm going to
do that with string.....
73

73

00:06:39.000  -->  00:06:56.020
....
74

74

00:06:56.020  -->  00:07:03.180
....so we run that we should see
75

75

00:07:03.180  -->  00:07:10.860
our first entry John Doe in uppercase
and of course also 30 being the age that
76

76

00:07:10.860  -->  00:07:17.280
we assigned when we set up John Doe here
in line 13 now there are also
77

77

00:07:17.280  -->  00:07:22.240
consumer and predicate interfaces that
accepts two arguments but none for
78

78

00:07:22.240  -->  00:07:26.910
supplier because the supplier doesn't
actually accept any arguments so now
79

79

00:07:26.910  -->  00:07:30.120
we're going to look at the unary
operator interface this is a more
80

80

00:07:30.120  -->  00:07:34.860
specific type of function that accepts a
single argument and returns a value of
81

81

00:07:34.860  -->  00:07:39.690
the same type as the argument so for
example long unary operator accepts
82

82

00:07:39.690  -->  00:07:44.860
a long and returns a long all the unary
variants extend the function interface
83

83

00:07:44.860  -->  00:07:49.330
so therefore they can be chain
together just like functions can so
84

84

00:07:49.330  -->  00:07:52.890
let's actually create an int unary
operator that always increments its
85

85

00:07:52.890  -->  00:08:00.300
argument by five so to do that we would
do something like....
86

86

00:08:00.300  -->  00:08:17.490
....
87

87

00:08:17.490  -->  00:08:18.720
....so lets see if it works
88

88

00:08:18.720  -->  00:08:24.270
there's the answer 15 showing so notice
that rather than calling apply we are
89

89

00:08:24.270  -->  00:08:29.080
called applies as int when using the
int unary operator so we now been
90

90

00:08:29.080  -->  00:08:33.090
through the five groups of interfaces in
the java.util.function package
91

91

00:08:33.090  -->  00:08:38.910
now the beginning of this walkthrough of
the java.util.function i said
92

92

00:08:38.910  -->  00:08:42.960
that the interfaces in this package the
java.util.function package don't
93

93

00:08:42.960  -->  00:08:44.460
have any meaning in and
94

94

00:08:44.460  -->  00:08:48.250
of themselves so hopefully at this point
you now got a better idea of what that
95

95

00:08:48.250  -->  00:08:53.370
means the interfaces represent
structures the lambda expressions when
96

96

00:08:53.370  -->  00:08:57.810
we want to use a lambda expression that
tests a value and returns true false we
97

97

00:08:57.810  -->  00:09:01.720
can use a predicate when we want to use
a lambda expression in place for method
98

98

00:09:01.720  -->  00:09:06.930
that accepts an argument and returns a
value we can use function the interfaces
99

99

00:09:06.930  -->  00:09:09.570
don't dictate what the lambdas must do
100

100

00:09:09.570  -->  00:09:12.970
they're not like interfaces such as
runnable which we know represents an
101

101

00:09:12.970  -->  00:09:17.070
object with a block of executable code
or an event handler which we know
102

102

00:09:17.070  -->  00:09:20.920
contains code that will run when the
user interacts with the user interface
103

103

00:09:20.920  -->  00:09:25.660
component the java.util.function
interfaces describe the arguments and
104

104

00:09:25.660  -->  00:09:30.100
return value but not actually what the
implementations must do I'm going to
105

105

00:09:30.100  -->  00:09:33.100
load up a little image on the screen
now showing a summary of the five
106

106

00:09:33.100  -->  00:09:36.850
groups of interfaces in the java.util.function package
107

107

00:09:40.040  -->  00:09:44.810
can be chained column is yes for consumer
now we didn't actually cover this but we
108

108

00:09:44.810  -->  00:09:49.670
can chain consumers together with the
consumer . and then method consumers
109

109

00:09:49.670  -->  00:09:54.080
don't return a value so how does that
actually work or rather than working on
110

110

00:09:54.080  -->  00:09:58.880
the result of the previous consumer each
consumer in the chain runs using the
111

111

00:09:58.880  -->  00:10:02.930
arguments that is passed to the accept method so
let's actually go back to java and just
112

112

00:10:02.930  -->  00:10:05.930
look at a quick example of this
113

113

00:10:06.980  -->  00:10:14.720
alright so we can actually type
something like.....
114

114

00:10:14.720  -->  00:10:37.040
....
115

115

00:10:37.040  -->  00:10:44.120
....so we run this we should see hello world
showing on the screen on the console
116

116

00:10:44.120  -->  00:10:49.250
their is hello world down at the bottom so
remember that consumers don't return
117

117

00:10:49.250  -->  00:10:53.660
anything so the result of the uppercase
call in consumers c1 is actually lost
118

118

00:10:53.660  -->  00:10:59.330
each consumer in the chain is evaluated
independently of the others so there's
119

119

00:10:59.330  -->  00:11:02.720
no real advantage in this case to chain
them together but it can be done as you
120

120

00:11:02.720  -->  00:11:06.170
saw so what do we do if we need more
than two arguments in a lambda
121

121

00:11:06.170  -->  00:11:10.160
expression well we can write lambda
expressions that takes many arguments
122

122

00:11:10.160  -->  00:11:15.080
as you liked but we you can't then use
those that take more than two with any
123

123

00:11:15.080  -->  00:11:19.070
of the interfaces in the java.util.function package the only time
124

124

00:11:19.070  -->  00:11:23.270
it is maybe a problem is when we want to
use an API that perhaps takes one of the
125

125

00:11:23.270  -->  00:11:27.590
interfaces as a parameter so in that
case you probably want to message you
126

126

00:11:27.590  -->  00:11:33.860
code so that you can use a lambda that
matches the required interface alright
127

127

00:11:33.860  -->  00:11:38.330
so that concludes our look at the java.util.function package to
128

128

00:11:38.330  -->  00:11:41.810
see all the interfaces in the package
and the methods available in each one
129

129

00:11:41.810  -->  00:11:45.560
just check out the documentation here
just put that on the screen there's
130

130

00:11:45.560  -->  00:11:47.630
lots of information for you to check out
there
131

131

00:11:47.630  -->  00:11:52.580
alright so that's the end of the video
in the next video we're going to take a
132

132

00:11:52.580  -->  00:11:53.330
look at
133

133

00:11:53.330  -->  00:11:55.350
streams so see you in the next video
