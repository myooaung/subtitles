WEBVTT
1
1

00:00:05.460  -->  00:00:08.240
So we talked about
the if keyword before to
2

2

00:00:08.240  -->  00:00:12.210
perform certain statements based on
an expression that you typed in brackets.
3

3

00:00:12.210  -->  00:00:15.050
I wanna talk to you now
about the switch statements.
4

4

00:00:15.050  -->  00:00:15.920
So let's get started.
5

5

00:00:15.920  -->  00:00:16.420
On that.
6

6

00:00:17.600  -->  00:00:21.490
The first is, you just want to ensure
that you configured IntelliJ correctly.
7

7

00:00:21.490  -->  00:00:24.120
So go into configure in this
opening screen of IntelliJ,
8

8

00:00:24.120  -->  00:00:26.080
before you've got a project open.
9

9

00:00:26.080  -->  00:00:31.080
Click on configure go to project
defaults and click on project structure.
10

10

00:00:31.080  -->  00:00:34.250
And you want to make sure this
override is set to eight.
11

11

00:00:36.010  -->  00:00:38.590
And that's because we're actually going
to be using features that were introduced
12

12

00:00:38.590  -->  00:00:40.860
into the version seven.
13

13

00:00:40.860  -->  00:00:42.850
You can see on the screen there,
but for future reference,
14

14

00:00:42.850  -->  00:00:46.350
because we are ultimately going
to be using java eight features.
15

15

00:00:46.350  -->  00:00:49.760
We're going to set that to eight, so
make sure that's set to eight, and
16

16

00:00:49.760  -->  00:00:50.720
create a new project.
17

17

00:00:50.720  -->  00:00:52.020
We're going to call it Switch, so
18

18

00:00:52.020  -->  00:00:53.700
I'm going to select
the standard defaults here.
19

19

00:00:57.170  -->  00:00:59.000
We're gonna call it switch as I mentioned.
20

20

00:01:05.360  -->  00:01:09.370
Incidentally, if you've already created
a project you want to know how to set so
21

21

00:01:09.370  -->  00:01:12.930
it uses that JDK eight feature that
I showed you in the project default.
22

22

00:01:12.930  -->  00:01:14.630
I'll show you how to do that now.
23

23

00:01:14.630  -->  00:01:16.260
So go to the file menu.
24

24

00:01:16.260  -->  00:01:22.380
Click on Project Structure, and
you'll set that to version eight.
25

25

00:01:22.380  -->  00:01:23.630
Click on OK.
26

26

00:01:23.630  -->  00:01:28.020
Okay, so
let's make a bit of space as we always do.
27

27

00:01:28.020  -->  00:01:31.760
So the switch statement.
28

28

00:01:31.760  -->  00:01:36.160
So again talking about this,
we've seen the if statement used before.
29

29

00:01:36.160  -->  00:01:40.100
We can start off with an integer,
value equals one.
30

30

00:01:40.100  -->  00:01:44.360
You've seen something like
this if value double equals
31

31

00:01:44.360  -->  00:01:49.090
one, One.
32

32

00:01:49.090  -->  00:01:53.320
Or else if value equals two.
33

33

00:01:58.200  -->  00:02:02.140
Else was not one or two.
34

34

00:02:02.140  -->  00:02:04.770
So you see in a simple example there and
35

35

00:02:04.770  -->  00:02:09.160
if we run that,
in this case we should get the value one.
36

36

00:02:09.160  -->  00:02:12.530
And we can change that to a two,
run it again.
37

37

00:02:18.090  -->  00:02:19.520
Through the value of the two.
38

38

00:02:19.520  -->  00:02:22.470
In the value two as you can see there of
course when we specify three which we
39

39

00:02:22.470  -->  00:02:23.120
get neither.
40

40

00:02:23.120  -->  00:02:24.620
While it was not one or two.
41

41

00:02:24.620  -->  00:02:27.570
So, nothing K unique about that.
42

42

00:02:27.570  -->  00:02:31.900
Now this can get a little bit messy, you
got ten values to test or a large number
43

43

00:02:31.900  -->  00:02:36.260
of values you want to test and perform
different code for based on that value.
44

44

00:02:36.260  -->  00:02:39.850
There is an alternative and
that's using the switch statement.
45

45

00:02:39.850  -->  00:02:42.940
So let's do something equivalent to the
equivalent to what we've done above but
46

46

00:02:42.940  -->  00:02:44.160
using a switch statements.
47

47

00:02:44.160  -->  00:02:48.770
We're gonna put int, we call it switch
value and we'll set that to one again.
48

48

00:02:50.220  -->  00:02:53.870
The switch statement is comprised
of the switch keywords, so
49

49

00:02:53.870  -->  00:02:57.330
it's switch and
the value that we wanna test.
50

50

00:02:57.330  -->  00:03:00.450
The actual variable name or
expression, so put switch value.
51

51

00:03:02.370  -->  00:03:04.930
And then we put,
start a code block, like so.
52

52

00:03:04.930  -->  00:03:08.920
And what we do then,
we then type the word case.
53

53

00:03:10.160  -->  00:03:12.790
And what we want to test for, so
in this case, we want to test for
54

54

00:03:12.790  -->  00:03:16.810
the literal value of one, so
I put one and then put colon.
55

55

00:03:18.900  -->  00:03:24.450
So that's testing now for the value of
one, so that's equivalent of doing,
56

56

00:03:24.450  -->  00:03:29.320
if switch value equals, equals one,
we then type in the code that we
57

57

00:03:29.320  -->  00:03:34.280
want to execute if the value is one,
so I can put value was one.
58

58

00:03:34.280  -->  00:03:34.780
Like so.
59

59

00:03:35.840  -->  00:03:37.340
We then type in the break keyword.
60

60

00:03:37.340  -->  00:03:42.900
And what break does, is it terminates
the enclosing switch statement, and
61

61

00:03:42.900  -->  00:03:45.410
control continues at the line
after the switch block.
62

62

00:03:45.410  -->  00:03:47.570
So I'll type break, like so.
63

63

00:03:49.030  -->  00:03:52.770
Based on that, what's gonna happen is
when the code is executed for one,
64

64

00:03:52.770  -->  00:03:56.390
it's gonna print out System.out.printline,
value was one, break,
65

65

00:03:56.390  -->  00:03:59.140
which means it's then gonna come down
to here and start executing any other
66

66

00:03:59.140  -->  00:04:02.140
code that we had sort of after
here from this point onwards.
67

67

00:04:03.240  -->  00:04:03.880
More code here.
68

68

00:04:08.390  -->  00:04:11.940
So in other words it would break, would
come down to here and continue processing.
69

69

00:04:11.940  -->  00:04:15.430
Now we can use modable cases, we can
put another one, we can talk case two.
70

70

00:04:18.860  -->  00:04:20.050
Value was two.
71

71

00:04:20.050  -->  00:04:22.620
And we're talking break again.
72

72

00:04:22.620  -->  00:04:28.530
Underr that circumstance, we also wanna
break out of that switch statement.
73

73

00:04:30.000  -->  00:04:33.200
And the final equivalent to
the L statement, which is, but
74

74

00:04:33.200  -->  00:04:35.860
we want to do a test for
all other circumstances.
75

75

00:04:35.860  -->  00:04:39.350
We don't type else,
we type another keyword, default.
76

76

00:04:40.770  -->  00:04:43.720
And default means at any other case
that's not been covered above,
77

77

00:04:43.720  -->  00:04:45.030
this is what I want you to do.
78

78

00:04:45.030  -->  00:04:53.870
So in that case we would put,
Was not one or two.
79

79

00:04:53.870  -->  00:04:57.170
Then we do a final break as well.
80

80

00:04:57.170  -->  00:04:58.670
So that's the switch statement.
81

81

00:04:58.670  -->  00:04:59.760
And we can run that.
82

82

00:05:01.970  -->  00:05:03.580
I'm sure you can see here, value was one.
83

83

00:05:03.580  -->  00:05:06.540
And just to confirm it, we'll actually
comment out this other code for now,
84

84

00:05:06.540  -->  00:05:08.820
because we don't need
the int code anymore.
85

85

00:05:08.820  -->  00:05:11.810
Just so we know, we're getting
the values from the right place.
86

86

00:05:11.810  -->  00:05:14.660
Valuables one.
87

87

00:05:14.660  -->  00:05:17.510
Valuables was two.
88

88

00:05:17.510  -->  00:05:21.630
We do a test for valuables two and
of course valuables three.
89

89

00:05:24.390  -->  00:05:26.020
That's good so
you can see that's all working.
90

90

00:05:26.020  -->  00:05:27.640
So that's a switch statement.
91

91

00:05:27.640  -->  00:05:31.810
Now it's often a matter of style
to choose the if statement or
92

92

00:05:31.810  -->  00:05:35.270
the switch statement because both
can really achieve the same thing.
93

93

00:05:35.270  -->  00:05:39.180
You can see that we used if the value
equals, equals one effectively is
94

94

00:05:39.180  -->  00:05:42.640
equivalent to using a switch statement and
putting case one.
95

95

00:05:42.640  -->  00:05:47.040
The if statement is a little bit more
flexible in that each time we do a test
96

96

00:05:47.040  -->  00:05:50.240
here, we don't have to use
the same Test criteria.
97

97

00:05:50.240  -->  00:05:55.210
So we could put if value equals one,
else if cat equals four.
98

98

00:05:55.210  -->  00:05:56.470
In other words,
a different variable altogether.
99

99

00:05:56.470  -->  00:06:02.000
In the case of the switch statement,
we're testing only the switch value here.
100

100

00:06:02.000  -->  00:06:05.460
And we're testing different values for
that same value.
101

101

00:06:05.460  -->  00:06:08.690
So we can actually then introduce
a different variable type to test for
102

102

00:06:08.690  -->  00:06:09.340
argument's sake.
103

103

00:06:09.340  -->  00:06:13.210
We're just testing this one variable
here with this switch statement.
104

104

00:06:13.210  -->  00:06:17.820
So a switch is good to use if you're
actually testing the same variable
105

105

00:06:17.820  -->  00:06:20.150
you wanna test different values for
that variable.
106

106

00:06:20.150  -->  00:06:23.250
Now you can see that there would
be situations where if you had
107

107

00:06:23.250  -->  00:06:27.390
20 values to test for,
this could get a little bit tedious so
108

108

00:06:27.390  -->  00:06:29.130
there is actually a bit of a shortcut.
109

109

00:06:29.130  -->  00:06:35.040
What we can do is we can type case three,
case four,
110

110

00:06:35.040  -->  00:06:40.530
case five and
then we could put something like,
111

111

00:06:40.530  -->  00:06:44.250
was a three, or four, or five.
112

112

00:06:46.170  -->  00:06:47.640
Right?
113

113

00:06:49.410  -->  00:06:52.310
So it was assigned three to
the value of switch value.
114

114

00:06:52.310  -->  00:06:56.710
Previously, that was not one or two but
now, it shouldn't hit this default because
115

115

00:06:56.710  -->  00:06:59.140
we've added a case here for
the number three.
116

116

00:06:59.140  -->  00:07:00.510
So it should actually execute in there.
117

117

00:07:00.510  -->  00:07:04.750
So if you're on that,
was it three, or four, or five?
118

118

00:07:04.750  -->  00:07:07.960
And of course, you wanted to know what
the value was if you wanted to do some
119

119

00:07:07.960  -->  00:07:09.780
calculation in here,
we can put something like.
120

120

00:07:12.550  -->  00:07:14.480
Actually it was,
121

121

00:07:14.480  -->  00:07:19.230
I switch value because we know what
the switch value is so we can run that.
122

122

00:07:21.790  -->  00:07:24.350
So you could still actually process
that so you could have a case here for
123

123

00:07:24.350  -->  00:07:26.720
case three, four, five, six,
seven, eight, nine, or ten.
124

124

00:07:26.720  -->  00:07:30.300
We could still do some calculation based
on the actual value of switch value.
125

125

00:07:30.300  -->  00:07:34.360
The important thing is here,
we're grouping model
126

126

00:07:34.360  -->  00:07:38.470
case tests together in the one line
effectively which makes it a lot easier.
127

127

00:07:38.470  -->  00:07:44.280
Now one of the important things to note
here is the use of the break keyword.
128

128

00:07:44.280  -->  00:07:47.650
If you don't have this break,
you don't create a break statement.
129

129

00:07:47.650  -->  00:07:50.640
In other words,
you'll get unpredictable results.
130

130

00:07:50.640  -->  00:07:52.900
Now just to show what will
happen is I'm gonna remove or
131

131

00:07:52.900  -->  00:07:54.780
we're going to comment
out this break here.
132

132

00:07:56.600  -->  00:07:59.190
And if I run this,
bearing in mind what happened before.
133

133

00:07:59.190  -->  00:08:00.710
We saw two lines of output.
134

134

00:08:00.710  -->  00:08:05.910
If we run this now,
now can you see what's happened there?
135

135

00:08:05.910  -->  00:08:07.200
So it was a three, or four, or five.
136

136

00:08:07.200  -->  00:08:08.340
Actually was a three.
137

137

00:08:08.340  -->  00:08:09.680
Was not one or two.
138

138

00:08:09.680  -->  00:08:11.090
So why has that happened?
139

139

00:08:11.090  -->  00:08:14.920
Well the reason it's happened is,
we've taken out this break statement, so
140

140

00:08:14.920  -->  00:08:17.830
what's happened is
the processing got to here.
141

141

00:08:17.830  -->  00:08:21.850
Based on the fact that the switch
value was set to three in this case.
142

142

00:08:21.850  -->  00:08:24.910
So I executed those two lines and
printed those both out.
143

143

00:08:24.910  -->  00:08:29.950
But then there wasn't a break statement,
so it continued on to this line here.
144

144

00:08:29.950  -->  00:08:32.850
And then eventually did a break
to get out of the code.
145

145

00:08:32.850  -->  00:08:37.290
Consequently you can see that breaks are
vital to close off your case comparison,
146

146

00:08:37.290  -->  00:08:39.210
your case test if you will.
147

147

00:08:39.210  -->  00:08:43.140
If you don't do that the output will
fall through to the next case and
148

148

00:08:43.140  -->  00:08:45.840
continue on until it finds another break,
if any, or
149

149

00:08:45.840  -->  00:08:47.750
until it finishes off
the switch statement.
150

150

00:08:47.750  -->  00:08:51.780
So this is a common error that you'll find
in code, that forgetting to put a break.
151

151

00:08:51.780  -->  00:08:53.980
You might have everything else correct and
152

152

00:08:53.980  -->  00:08:56.930
you'll find you get really
weird unpredictable results.
153

153

00:08:56.930  -->  00:09:00.050
You might be assuming in this case
it's only gonna execute this code, but
154

154

00:09:00.050  -->  00:09:03.420
it's moved down and
executed that other code.
155

155

00:09:03.420  -->  00:09:08.990
And in a worse case scenario, see that,
we'll get rid of it, so we'll comment
156

156

00:09:08.990  -->  00:09:14.430
out that break, and that one, and
we'll the switch value to one, run that.
157

157

00:09:16.670  -->  00:09:19.400
You can see we've got all these values,
that's process one,
158

158

00:09:19.400  -->  00:09:22.290
process two, process case three,
four and five and the default.
159

159

00:09:22.290  -->  00:09:25.870
So its' processed everything
because there were no breaks.
160

160

00:09:25.870  -->  00:09:30.090
So make sure that you do introduce to
add those breaks, it's very important.
161

161

00:09:30.090  -->  00:09:31.330
So I'll just add those back.
162

162

00:09:32.530  -->  00:09:34.430
And we'll run it again to
confirm it's working again.
163

163

00:09:35.740  -->  00:09:40.070
Oops and I undid that, so
I should make it a one again.
164

164

00:09:40.070  -->  00:09:41.160
It was one second in.
165

165

00:09:41.160  -->  00:09:43.440
It's now working with the break statement.
166

166

00:09:43.440  -->  00:09:46.410
Technically speaking, this last break,
167

167

00:09:46.410  -->  00:09:49.840
cuz at the end it's the last thing we're
testing for, we could take that out.
168

168

00:09:52.730  -->  00:09:56.770
And to be precise we can put here
what's now one, two, three, or
169

169

00:09:56.770  -->  00:09:59.690
five since we're testing for
those above now.
170

170

00:10:02.030  -->  00:10:03.390
That will work.
171

171

00:10:03.390  -->  00:10:03.930
Oops.
172

172

00:10:03.930  -->  00:10:05.600
Three, four, or five.
173

173

00:10:05.600  -->  00:10:10.390
That will now work because it's
174

174

00:10:10.390  -->  00:10:13.400
the last line of the switch statement
anyway, and then it will breakout.
175

175

00:10:13.400  -->  00:10:15.630
So, technically,
you don't need that one there.
176

176

00:10:15.630  -->  00:10:19.590
But it's always good to be precise in your
code, so I recommend you leave that in
177

177

00:10:19.590  -->  00:10:23.650
that circumstance because it's very clear,
that what you're trying to achieve.
178

178

00:10:23.650  -->  00:10:27.420
And possibly a programmer, who's perhaps
new, or doesn't know a lot about your
179

179

00:10:27.420  -->  00:10:30.800
system might look at that and go,
I wonder why he didn't add a break there.
180

180

00:10:30.800  -->  00:10:33.650
So just introducing a question you
don't need to be introduced, so
181

181

00:10:33.650  -->  00:10:36.750
I would suggest you
always add breaks anyway.
182

182

00:10:36.750  -->  00:10:41.120
So with older versions of Java, we were
able to use here for this switch value,
183

183

00:10:41.120  -->  00:10:45.450
we were able to use the primitive
types byte, short, char, and
184

184

00:10:45.450  -->  00:10:47.630
as you can see I've used int here as well.
185

185

00:10:47.630  -->  00:10:50.150
Okay, so that's the switch statement.
186

186

00:10:50.150  -->  00:10:53.500
And what I'm gonna do now is
just set you a challenge.
187

187

00:10:53.500  -->  00:10:55.640
You'll go through that challenge,
and I'm just gonna finish off and
188

188

00:10:55.640  -->  00:10:58.620
just show you another little
scenario with a switch.
189

189

00:10:58.620  -->  00:11:02.430
I just mentioned that the switch statement
can be used with four primitive types,
190

190

00:11:02.430  -->  00:11:04.400
byte, short, char, and int.
191

191

00:11:04.400  -->  00:11:07.160
So let's do a challenge based on that.
192

192

00:11:07.160  -->  00:11:08.050
Here's the challenge.
193

193

00:11:25.250  -->  00:11:30.010
Okay, so your test is to create a new
switch statement using char primitive type
194

194

00:11:30.010  -->  00:11:31.160
instead of an int.
195

195

00:11:31.160  -->  00:11:34.720
So you need to create a new char
variable and set it to some value.
196

196

00:11:34.720  -->  00:11:37.550
Then you need to create
the switch statement, but
197

197

00:11:37.550  -->  00:11:43.370
this time you'll be testing for
the values a, b, c, d, or e in the cases.
198

198

00:11:43.370  -->  00:11:46.530
Display a message if any of
these are found, and then break.
199

199

00:11:46.530  -->  00:11:51.250
And add a default or something in which
displays a message saying that a, b,
200

200

00:11:51.250  -->  00:11:53.010
c, d or e was not typed.
201

201

00:11:53.010  -->  00:11:57.530
All right, go ahead and
do that and pause the video now.
202

202

00:11:57.530  -->  00:12:00.090
And when you're finished, come back and
you can check out my solution.
203

203

00:12:02.560  -->  00:12:03.380
Okay how did you get on?
204

204

00:12:03.380  -->  00:12:04.620
Did you figure it out?
205

205

00:12:04.620  -->  00:12:07.600
But actually the code is very
similar to what you've got above but
206

206

00:12:07.600  -->  00:12:09.030
we've just really changing data type.
207

207

00:12:09.030  -->  00:12:12.210
So it's really just a case
of putting char and
208

208

00:12:12.210  -->  00:12:16.250
we'll call it marchar value and
let's set it to an initial value of a.
209

209

00:12:18.320  -->  00:12:20.330
So the switch statement.
210

210

00:12:20.330  -->  00:12:21.940
I mentioned that's compatible with char.
211

211

00:12:21.940  -->  00:12:23.320
So we can talk char value.
212

212

00:12:23.320  -->  00:12:26.720
So that's exactly the same, but
it's just specifying the char value,
213

213

00:12:26.720  -->  00:12:29.240
instead of the switch value we used above,
which was an int.
214

214

00:12:30.250  -->  00:12:34.180
And the case, will be case single quote a,
because that's how we define a char,
215

215

00:12:34.180  -->  00:12:35.230
with single quotes.
216

216

00:12:35.230  -->  00:12:41.100
column and out.
217

217

00:12:41.100  -->  00:12:42.800
A was found, add a break.
218

218

00:12:45.280  -->  00:12:47.690
And then we can do the same with b for
example.
219

219

00:12:55.810  -->  00:13:01.640
And if one or two,
we can also input case c,
220

220

00:13:01.640  -->  00:13:05.220
d, or e in single quotes.
221

221

00:13:05.220  -->  00:13:06.350
We could put
222

222

00:13:12.470  -->  00:13:16.480
We're just going to put what it
actually was found, and print it.
223

223

00:13:16.480  -->  00:13:19.530
You're gonna break.
224

224

00:13:19.530  -->  00:13:21.770
And whoops,
we need to use the case keyword again,
225

225

00:13:21.770  -->  00:13:23.320
which I forgot to add there.
226

226

00:13:23.320  -->  00:13:26.310
Case, case like so.
227

227

00:13:26.310  -->  00:13:29.290
And we'll put a break there.
228

228

00:13:29.290  -->  00:13:30.320
Then the default will be,
229

229

00:13:35.570  -->  00:13:42.080
Something like I could not find a,
b, c, d, or e.
230

230

00:13:42.080  -->  00:13:43.640
And break.
231

231

00:13:47.200  -->  00:13:48.480
All right so let's give that a go.
232

232

00:13:48.480  -->  00:13:50.400
We've got the value a that we've defined,
so
233

233

00:13:50.400  -->  00:13:52.030
we should get a message
saying a was found.
234

234

00:13:54.040  -->  00:13:57.230
A was found so
we can change the value to b.
235

235

00:14:01.020  -->  00:14:05.430
B was found and let's just try d, knowing
that that's part of the c, d and e test.
236

236

00:14:07.740  -->  00:14:11.600
d was found, and we can put
something like a, like a g there.
237

237

00:14:15.310  -->  00:14:16.960
Could not find a, b, c, d, or e.
238

238

00:14:16.960  -->  00:14:21.930
So that's how they use char, the primitive
type char in a switch statement.
239

239

00:14:21.930  -->  00:14:26.900
The last thing before we finished,
in JDK version seven, java version seven.
240

240

00:14:26.900  -->  00:14:30.350
They added the capability of using
the switch statement with strings.
241

241

00:14:30.350  -->  00:14:33.340
And that's why at the start of the video I
wanted you to check to make sure that you
242

242

00:14:33.340  -->  00:14:36.480
selected the right type there
because if you haven't,
243

243

00:14:36.480  -->  00:14:38.220
you'll get an error at this point.
244

244

00:14:38.220  -->  00:14:41.320
So do refer back to the start of the video
if you get an error at this point trying
245

245

00:14:41.320  -->  00:14:42.420
to get a switch statement to work.
246

246

00:14:42.420  -->  00:14:49.730
So we can also do something like
switch month equals January.
247

247

00:14:49.730  -->  00:14:50.710
You can do switch.
248

248

00:14:53.680  -->  00:15:02.390
Month, Like so.
249

249

00:15:02.390  -->  00:15:03.360
And we can do a case.
250

250

00:15:11.800  -->  00:15:13.420
Break, so we'll just do one more.
251

251

00:15:13.420  -->  00:15:14.700
We won't go through all 12 months.
252

252

00:15:14.700  -->  00:15:16.420
We'll just say June, my birthday month.
253

253

00:15:21.250  -->  00:15:24.130
Jun, abbreviate, Okay, and
then we'll just do a break
254

254

00:15:28.630  -->  00:15:35.210
Default is, we'll just put not sure.
255

255

00:15:35.210  -->  00:15:36.270
Okay, so we run that.
256

256

00:15:39.470  -->  00:15:42.690
January report being returned there.
257

257

00:15:42.690  -->  00:15:46.580
Then we can do a search for
June, winter June I should say.
258

258

00:15:46.580  -->  00:15:50.620
Here we get June,
let me put something else,
259

259

00:15:50.620  -->  00:15:56.350
some random characters, Not sure,
okay, so that's working.
260

260

00:15:56.350  -->  00:15:57.440
But there's another problem here.
261

261

00:15:57.440  -->  00:15:59.810
What happens if we type, January.
262

262

00:15:59.810  -->  00:16:03.740
And you noticed I've typed all
in lower case, we run that.
263

263

00:16:05.270  -->  00:16:05.770
Not sure.
264

264

00:16:07.060  -->  00:16:12.020
This is because technically the string
January with a lower case j as
265

265

00:16:12.020  -->  00:16:16.100
the first letter is different to
the string January with an upper case J.
266

266

00:16:16.100  -->  00:16:19.070
We saw this a little bit earlier on with
primitive types when we're looking at ints
267

267

00:16:19.070  -->  00:16:22.100
and doubles and so
forth how there are differences, so
268

268

00:16:22.100  -->  00:16:24.320
you need to be precise here.
269

269

00:16:24.320  -->  00:16:25.070
Computers are precise.
270

270

00:16:25.070  -->  00:16:28.230
So you really need to make
sure you test this correctly.
271

271

00:16:28.230  -->  00:16:33.590
So how do we get around this
problem while making sure,
272

272

00:16:33.590  -->  00:16:38.720
cuz obviously we wouldn't
wanna do a case statement
273

273

00:16:38.720  -->  00:16:44.560
to put something like case January,
case January, case.
274

274

00:16:47.590  -->  00:16:48.830
January and so on.
275

275

00:16:48.830  -->  00:16:52.320
We don't wanna be doing that test for
every possible scenario,
276

276

00:16:52.320  -->  00:16:55.520
every possible combination of upper and
lower case letters that we type.
277

277

00:16:55.520  -->  00:16:59.530
That would be like a crazy amount of work
and would really blow out the code and
278

278

00:16:59.530  -->  00:17:01.330
wouldn't be a good solution.
279

279

00:17:01.330  -->  00:17:06.120
The way we get around that Is we
use the method that's included with
280

280

00:17:06.120  -->  00:17:08.750
a string called two, lower.
281

281

00:17:08.750  -->  00:17:11.690
So what we do is we change our test,
we put two, lower case.
282

282

00:17:11.690  -->  00:17:17.200
I'm typing dot two lowercase you
can see there's a two lowercase.
283

283

00:17:17.200  -->  00:17:18.640
I enter that there.
284

284

00:17:18.640  -->  00:17:22.300
That's actually a method that
is part of the string class.
285

285

00:17:22.300  -->  00:17:25.490
I know I've talked a few times about
class and said that it is coming and
286

286

00:17:25.490  -->  00:17:26.980
it is certainly coming.
287

287

00:17:26.980  -->  00:17:30.150
But we really need to go through some of
these basic points first before we start
288

288

00:17:30.150  -->  00:17:34.500
looking at classes which is some of
the more advanced features of Java so for
289

289

00:17:34.500  -->  00:17:38.280
now just think that two lower case
is a method that is part of Java
290

290

00:17:38.280  -->  00:17:42.920
attached to the string class which
enables to perform some functionality.
291

291

00:17:42.920  -->  00:17:47.610
So what that two lowercase does, it just
converts the entire string to lower case
292

292

00:17:47.610  -->  00:17:50.510
so if we enter something like January.
293

293

00:17:52.200  -->  00:17:55.450
So if we enter that and actually run this,
and then we make sure that our tests,
294

294

00:17:55.450  -->  00:17:57.350
we're actually testing for
the lowercase version now.
295

295

00:17:57.350  -->  00:17:59.890
And the reason we wanna test for
296

296

00:17:59.890  -->  00:18:03.640
the lowercase is, in this line here
we've converted it to lowercase.
297

297

00:18:03.640  -->  00:18:07.860
So we actually said, from this point on,
I want the switch statement to be whatever
298

298

00:18:07.860  -->  00:18:10.350
was typed into month,
but all in lowercase.
299

299

00:18:10.350  -->  00:18:13.480
So therefore, the cases are only
gonna work If everything's
300

300

00:18:13.480  -->  00:18:14.930
entered in lower case.
301

301

00:18:14.930  -->  00:18:16.320
So first we'll confirm it works, and
302

302

00:18:16.320  -->  00:18:18.000
I'll just show you what
happened if we didn't do that.
303

303

00:18:18.000  -->  00:18:23.870
You can see that January is now working,
and I can put something like,
304

304

00:18:23.870  -->  00:18:27.610
really any combination of letters, it's
going to convert everything to lower case.
305

305

00:18:27.610  -->  00:18:29.230
So you can see that's working.
306

306

00:18:29.230  -->  00:18:30.980
But if we didn't put
a lower case test here.
307

307

00:18:35.710  -->  00:18:37.240
We run it,
we'll find that that doesn't work.
308

308

00:18:37.240  -->  00:18:40.640
And that's because this has
got an uppercase letter, but
309

309

00:18:40.640  -->  00:18:44.180
this test is all in lowercase.
310

310

00:18:44.180  -->  00:18:45.470
We've converted that all to lowercase.
311

311

00:18:45.470  -->  00:18:50.110
Obviously need to make sure that
you're actually testing the lowercase.
312

312

00:18:50.110  -->  00:18:53.790
So that's a method that's part of
the string class, as I mentioned.
313

313

00:18:53.790  -->  00:18:56.030
And we'll be talking
more about that later.
314

314

00:18:56.030  -->  00:18:58.290
And it's got lots of actually
different methods to string class.
315

315

00:18:58.290  -->  00:18:59.450
it's really very versatile.
316

316

00:18:59.450  -->  00:19:00.920
We can put two upper.
317

317

00:19:00.920  -->  00:19:05.910
Two upper case in which case we'd
have to do a test on upper case.
318

318

00:19:05.910  -->  00:19:08.600
So run that.
319

319

00:19:11.240  -->  00:19:13.260
You can see that it's working.
320

320

00:19:13.260  -->  00:19:14.940
So that's the switch statement.
321

321

00:19:14.940  -->  00:19:17.910
I suspect you'll use that
reasonably often, in your code.
322

322

00:19:17.910  -->  00:19:20.150
It's something that you'll
see in a lot of java code,
323

323

00:19:20.150  -->  00:19:22.860
it's very common to use, very versatile.
324

324

00:19:22.860  -->  00:19:24.050
So that's it for this video.
325

325

00:19:24.050  -->  00:19:27.050
In the next video we're going to
talk about the for statement, and
326

326

00:19:27.050  -->  00:19:30.320
figure out how to provide looping
capabilities for our java code.
