1
1

00:00:05,470  -->  00:00:06,670
<v Tim>In this video I want to show you</v>
2

2

00:00:06,670  -->  00:00:09,060
how to approach and solve exercises
3

3

00:00:09,060  -->  00:00:11,040
and also show you some common errors
4

4

00:00:11,040  -->  00:00:13,650
when dealing with code exercises.
5

5

00:00:13,650  -->  00:00:15,430
What I'll actually do is I'll go through and solve one
6

6

00:00:15,430  -->  00:00:18,200
exercise for you in this video and the next one.
7

7

00:00:18,200  -->  00:00:19,560
So what we need to do first is
8

8

00:00:19,560  -->  00:00:22,770
create a new empty project in IntelliJ.
9

9

00:00:22,770  -->  00:00:24,140
This time without a template.
10

10

00:00:24,140  -->  00:00:26,000
So with IntelliJ open,
11

11

00:00:26,000  -->  00:00:27,190
create a new project
12

12

00:00:28,720  -->  00:00:31,630
and I'm going to select Java if it's not already selected.
13

13

00:00:31,630  -->  00:00:33,903
And I'm not going to use to project option.
14

14

00:00:35,070  -->  00:00:37,543
And we're gonna call this one SpeedConverter.
15

15

00:00:43,452  -->  00:00:45,020
Alright and I'll finish that
16

16

00:00:45,020  -->  00:00:46,270
and that'll give us a basically,
17

17

00:00:46,270  -->  00:00:47,883
an empty project to start with.
18

18

00:00:50,474  -->  00:00:52,420
Alright, so let's now look at the exercise.
19

19

00:00:52,420  -->  00:00:53,720
I'll just close this down.
20

20

00:00:55,360  -->  00:00:57,623
We'll swing over and check out the exercise.
21

21

00:00:59,430  -->  00:01:01,840
This is the speed converter exercise.
22

22

00:01:01,840  -->  00:01:06,840
And this is coming up in our lesson after these two videos.
23

23

00:01:07,450  -->  00:01:08,680
So what I would suggest you do is
24

24

00:01:08,680  -->  00:01:10,640
you leave this open in another tab
25

25

00:01:10,640  -->  00:01:12,760
while watching this video, so you can come back to it.
26

26

00:01:12,760  -->  00:01:14,680
So in terms of what we're trying to do here,
27

27

00:01:14,680  -->  00:01:17,240
we wanna write a method called toMilesPerHour
28

28

00:01:17,240  -->  00:01:19,961
that has one parameter of type double
29

29

00:01:19,961  -->  00:01:23,070
and that parameter should have the name kilometersPerHour.
30

30

00:01:23,070  -->  00:01:24,560
Now the method needs to return
31

31

00:01:24,560  -->  00:01:29,020
the rounded value of the calculation of type long.
32

32

00:01:29,020  -->  00:01:32,140
Now if the parameter kilometersPerHour is less than zero,
33

33

00:01:32,140  -->  00:01:36,020
the method toMilesPerHour needs to return minus one
34

34

00:01:36,020  -->  00:01:38,090
and that indicates that the value passed
35

35

00:01:38,090  -->  00:01:39,500
was an invalid value.
36

36

00:01:39,500  -->  00:01:41,160
Otherwise, if it is a positive,
37

37

00:01:41,160  -->  00:01:43,890
this is the parameter value passed to the method.
38

38

00:01:43,890  -->  00:01:47,150
Then we need to calculate the value of miles per hour,
39

39

00:01:47,150  -->  00:01:50,450
we need to round that value and then return it.
40

40

00:01:50,450  -->  00:01:52,000
And for conversion and rounding,
41

41

00:01:52,000  -->  00:01:53,460
check the notes in the text below
42

42

00:01:53,460  -->  00:01:54,940
which we'll talk about shortly.
43

43

00:01:54,940  -->  00:01:58,150
So that's one method that we have to write.
44

44

00:01:58,150  -->  00:01:58,983
And then below that,
45

45

00:01:58,983  -->  00:02:00,450
if you scroll down here,
46

46

00:02:00,450  -->  00:02:03,370
above the window where we put in our code,
47

47

00:02:03,370  -->  00:02:06,663
you got some examples there of the input and output.
48

48

00:02:07,570  -->  00:02:09,350
Basically what happens when we call the method,
49

49

00:02:09,350  -->  00:02:12,260
the argument or the parameter that we're passing to that
50

50

00:02:12,260  -->  00:02:13,910
and what the result should be.
51

51

00:02:13,910  -->  00:02:15,460
Now I'm not gonna read all those examples,
52

52

00:02:15,460  -->  00:02:17,470
but you should actually read them carefully.
53

53

00:02:17,470  -->  00:02:21,230
Now as you can see, the class name is SpeedConverter
54

54

00:02:21,230  -->  00:02:22,410
and that's also the file name.
55

55

00:02:22,410  -->  00:02:24,220
So let's jump back to IntelliJ.
56

56

00:02:24,220  -->  00:02:27,250
We're gonna create some files for this exercise.
57

57

00:02:27,250  -->  00:02:28,263
So we'll go back.
58

58

00:02:30,070  -->  00:02:33,220
So the first thing we need to do now is create a new class,
59

59

00:02:33,220  -->  00:02:35,480
and again the name is going to be SpeedConverter,
60

60

00:02:35,480  -->  00:02:38,030
and we do that by right-clicking on the src folder,
61

61

00:02:39,170  -->  00:02:43,163
New, Java Class, we're gonna call this one SpeedConverter,
62

62

00:02:47,330  -->  00:02:50,180
and we're also gonna create another class called Main
63

63

00:02:50,180  -->  00:02:52,240
and in that class we can put out main method
64

64

00:02:52,240  -->  00:02:54,760
so that we can test our code in IntelliJ
65

65

00:02:54,760  -->  00:02:56,460
before submitting the solution back on
66

66

00:02:56,460  -->  00:02:59,480
the code exercises web browser screen.
67

67

00:02:59,480  -->  00:03:02,270
So I'm gonna right-click on the source folder again,
68

68

00:03:02,270  -->  00:03:05,190
New, Java Class again, and as I mentioned
69

69

00:03:05,190  -->  00:03:07,323
I'm gonna call it Main with a capital M,
70

70

00:03:09,303  -->  00:03:10,640
and you can see we've now got our two classes
71

71

00:03:10,640  -->  00:03:12,580
showing in the left hand corner.
72

72

00:03:12,580  -->  00:03:15,210
Alright, so let's start working on the SpeedConverter class.
73

73

00:03:15,210  -->  00:03:16,710
We're gonna add that first method.
74

74

00:03:16,710  -->  00:03:17,980
So I'm gonna double-click that
75

75

00:03:17,980  -->  00:03:19,630
to bring that back on the screen.
76

76

00:03:20,570  -->  00:03:23,100
And if you recall the first sentence in the exercise said
77

77

00:03:23,100  -->  00:03:26,690
write a method called toMilesPerHour that has one parameter
78

78

00:03:26,690  -->  00:03:29,820
of type double with the name kilometersPerHour
79

79

00:03:29,820  -->  00:03:31,860
and needs to return a rounded value
80

80

00:03:31,860  -->  00:03:33,650
of the calculation of type long.
81

81

00:03:33,650  -->  00:03:37,670
So to create the method signature, we're gonna type
82

82

00:03:37,670  -->  00:03:40,913
public static long,
83

83

00:03:42,000  -->  00:03:45,163
and toMilesPerHour is the name of the method,
84

84

00:03:47,180  -->  00:03:50,890
and the parameter is of type double,
85

85

00:03:50,890  -->  00:03:53,203
and it's called kilometersPerHour,
86

86

00:03:57,520  -->  00:03:58,900
and we'll add our left and right curly braces
87

87

00:03:58,900  -->  00:04:00,383
as normal for a method.
88

88

00:04:01,270  -->  00:04:04,480
Alright, so firstly we need to check that invalid value.
89

89

00:04:04,480  -->  00:04:06,440
And if you recall what we said that the,
90

90

00:04:06,440  -->  00:04:09,920
if the kilometersPerHour is less than zero,
91

91

00:04:09,920  -->  00:04:11,960
then the method, this method toMilesPerHour
92

92

00:04:11,960  -->  00:04:14,330
needs to return a minus one to indicate that
93

93

00:04:14,330  -->  00:04:16,760
that value that was passed to this method
94

94

00:04:16,760  -->  00:04:18,100
was an invalid value.
95

95

00:04:18,100  -->  00:04:19,950
Otherwise if it is positive,
96

96

00:04:19,950  -->  00:04:22,427
we need to calculate the value of that
97

97

00:04:22,427  -->  00:04:25,534
toMilesPerHour argument, round it and return it.
98

98

00:04:25,534  -->  00:04:27,500
So let's start with writing the code
99

99

00:04:27,500  -->  00:04:28,810
to test for invalid values.
100

100

00:04:28,810  -->  00:04:33,810
So I'm going to type if, parentheses, kilometersPerHour,
101

101

00:04:33,910  -->  00:04:36,440
closing parentheses, and we'll add a code block there,
102

102

00:04:36,440  -->  00:04:38,740
left and right curly braces.
103

103

00:04:38,740  -->  00:04:40,500
Actually what I'll do is I'll finish that off first.
104

104

00:04:40,500  -->  00:04:41,690
We didn't finish the expression,
105

105

00:04:41,690  -->  00:04:44,600
it should be less than zero.
106

106

00:04:44,600  -->  00:04:46,270
So if it's less than zero,
107

107

00:04:46,270  -->  00:04:47,103
then what we wanna do is
108

108

00:04:47,103  -->  00:04:49,543
return in the next line minus one.
109

109

00:04:51,313  -->  00:04:52,410
Alright, so that's handling the fact now
110

110

00:04:52,410  -->  00:04:54,250
that we've got an invalid value.
111

111

00:04:54,250  -->  00:04:55,410
Now looking back at the text,
112

112

00:04:55,410  -->  00:04:57,353
if we go back and check that out again.
113

113

00:04:59,680  -->  00:05:01,940
The text didn't specifically mention yet
114

114

00:05:01,940  -->  00:05:06,060
how to convert kilometres per hour into miles per hour.
115

115

00:05:06,060  -->  00:05:07,680
Now you could use a Google converter
116

116

00:05:07,680  -->  00:05:09,060
to find out the conversion,
117

117

00:05:09,060  -->  00:05:11,410
but let's first move on to the next sentence.
118

118

00:05:11,410  -->  00:05:12,510
We're gonna scroll down a little bit,
119

119

00:05:12,510  -->  00:05:14,950
you can see that the second step here
120

120

00:05:14,950  -->  00:05:18,440
is to write another method called printConversion
121

121

00:05:18,440  -->  00:05:20,650
with one parameter of type double
122

122

00:05:20,650  -->  00:05:22,930
with the name kilometersPerHour.
123

123

00:05:22,930  -->  00:05:24,530
Now that method shouldn't return anything.
124

124

00:05:24,530  -->  00:05:25,430
In other words, void.
125

125

00:05:25,430  -->  00:05:29,037
It's void and it needs to calculate the milesPerHour
126

126

00:05:29,037  -->  00:05:29,870
from the kilometersPerHour parameter.
127

127

00:05:31,650  -->  00:05:33,620
And you can see then it needs to print a message
128

128

00:05:33,620  -->  00:05:37,540
in the format XX km/h = YY mi/h.
129

129

00:05:40,080  -->  00:05:43,130
And XX represents the original value passed
130

130

00:05:43,130  -->  00:05:44,869
to the method kilometersPerHour,
131

131

00:05:44,869  -->  00:05:47,950
YY represents the rounded milesPerHour
132

132

00:05:47,950  -->  00:05:49,790
from the kilometersPerHour parameter.
133

133

00:05:49,790  -->  00:05:51,210
And we've got to test there as well
134

134

00:05:51,210  -->  00:05:54,770
if the parameter kilometersPerHour is less than zero,
135

135

00:05:54,770  -->  00:05:59,220
then we want to print the test or text rather Invalid Value.
136

136

00:05:59,220  -->  00:06:00,520
And scrolling down a bit further,
137

137

00:06:00,520  -->  00:06:03,440
we've got some examples of input and output
138

138

00:06:03,440  -->  00:06:04,520
for that second method,
139

139

00:06:04,520  -->  00:06:05,810
and I won't read these examples
140

140

00:06:05,810  -->  00:06:07,710
but I certainly suggest you do that.
141

141

00:06:07,710  -->  00:06:08,970
And moving on down a little bit further.
142

142

00:06:08,970  -->  00:06:12,320
After that, you can see there's text and an example
143

143

00:06:12,320  -->  00:06:14,040
of how to use the round method,
144

144

00:06:14,040  -->  00:06:16,990
this is the Math.round method I'm talking about.
145

145

00:06:16,990  -->  00:06:20,040
And basically Math is an in-built class
146

146

00:06:20,040  -->  00:06:21,920
that comes with Java and enables us to
147

147

00:06:21,920  -->  00:06:24,580
perform various mathematical calculations,
148

148

00:06:24,580  -->  00:06:26,900
and in this scenario here, you can see how
149

149

00:06:26,900  -->  00:06:28,150
it rounds the number 1.5,
150

150

00:06:29,006  -->  00:06:31,190
go down and have a look at the usage there,
151

151

00:06:31,190  -->  00:06:32,217
that's the sample usage of it,
152

152

00:06:32,217  -->  00:06:34,410
and if we scroll down, we can see the output.
153

153

00:06:34,410  -->  00:06:36,630
So getting the input up here of 1.5,
154

154

00:06:37,638  -->  00:06:39,770
we can see we're defining that on line one,
155

155

00:06:39,770  -->  00:06:42,570
and long rounded equals on line two,
156

156

00:06:42,570  -->  00:06:43,960
and if we come down here and look at the output,
157

157

00:06:43,960  -->  00:06:45,270
rounded equals two.
158

158

00:06:45,270  -->  00:06:47,990
So basically what I'm saying there is we pass 1.5,
159

159

00:06:47,990  -->  00:06:50,620
the round function will round it up to two,
160

160

00:06:50,620  -->  00:06:52,380
3.9 is another example there,
161

161

00:06:52,380  -->  00:06:54,170
you can see it's rounded up to four,
162

162

00:06:54,170  -->  00:06:56,760
4.5 is rounded up to five and so on.
163

163

00:06:56,760  -->  00:06:58,637
So we'll go back, shortly, to IntelliJ
164

164

00:06:58,637  -->  00:07:00,460
and we'll see that in operation.
165

165

00:07:00,460  -->  00:07:02,540
And just going down a little bit further
166

166

00:07:02,540  -->  00:07:04,400
to read these tips here,
167

167

00:07:04,400  -->  00:07:05,720
in the method printConversion,
168

168

00:07:05,720  -->  00:07:07,480
call the method toMilesPerHour
169

169

00:07:07,480  -->  00:07:09,290
instead of duplicating the code.
170

170

00:07:09,290  -->  00:07:11,610
And we'll see that working and what that means shortly.
171

171

00:07:11,610  -->  00:07:12,560
And as a note there,
172

172

00:07:12,560  -->  00:07:15,000
all the methods should be defined as public static,
173

173

00:07:15,000  -->  00:07:17,237
and you saw me define that first method like that
174

174

00:07:17,237  -->  00:07:19,220
and that's because we've been using public static
175

175

00:07:19,220  -->  00:07:20,760
so far in the course.
176

176

00:07:20,760  -->  00:07:23,093
And a note here that one mile per hour is
177

177

00:07:23,093  -->  00:07:26,790
1.609 kilometres per hour.
178

178

00:07:26,790  -->  00:07:27,623
And finally note there,
179

179

00:07:27,623  -->  00:07:31,180
do not add a main method to the solution code.
180

180

00:07:31,180  -->  00:07:33,760
Alright, so this part we now know how to convert
181

181

00:07:33,760  -->  00:07:36,220
kilometres per hour into miles per hour
182

182

00:07:36,220  -->  00:07:38,470
and then also how to round the result.
183

183

00:07:38,470  -->  00:07:39,303
All we have to do is
184

184

00:07:39,303  -->  00:07:43,640
divide the parameter kilometersPerHour by 1.609.
185

185

00:07:43,640  -->  00:07:45,530
So let's jump back now into IntelliJ
186

186

00:07:45,530  -->  00:07:46,930
and finish the first method.
187

187

00:07:49,182  -->  00:07:50,470
Alright, so I'm gonna come down
188

188

00:07:50,470  -->  00:07:52,470
and add some code here on the next line.
189

189

00:07:53,820  -->  00:07:57,220
Add some code here, I'm gonna type long milesPerHour
190

190

00:07:59,620  -->  00:08:03,200
is equal to, and I'm gonna type Math with a capital M,
191

191

00:08:03,200  -->  00:08:05,070
and notice you can see that's in-built to Java,
192

192

00:08:05,070  -->  00:08:08,310
it's a Math class, for type the period or the dot,
193

193

00:08:08,310  -->  00:08:10,440
you can see that IntelliJ has helpfully popped up
194

194

00:08:10,440  -->  00:08:13,320
or shown a pop-up with all the available methods.
195

195

00:08:13,320  -->  00:08:15,050
Now all these methods you can see
196

196

00:08:15,050  -->  00:08:17,230
are built-in methods that we can use
197

197

00:08:17,230  -->  00:08:18,830
and we know now by looking at the notes
198

198

00:08:18,830  -->  00:08:20,670
that we wanna use the round function,
199

199

00:08:20,670  -->  00:08:23,110
so I'm gonna type in the first few letters of round,
200

200

00:08:23,110  -->  00:08:25,400
noting you can see that there's two versions of that,
201

201

00:08:25,400  -->  00:08:26,830
one that accepts the float
202

202

00:08:26,830  -->  00:08:28,830
and also one that accepts the double.
203

203

00:08:28,830  -->  00:08:30,590
So I'm gonna select the second one
204

204

00:08:30,590  -->  00:08:33,470
but it doesn't really matter which one you choose there.
205

205

00:08:33,470  -->  00:08:35,670
Then within the parameters, I'm gonna type,
206

206

00:08:35,670  -->  00:08:36,970
sorry, within the parentheses I'm gonna type
207

207

00:08:36,970  -->  00:08:41,970
kilometersPerHour and divided by 1.609,
208

208

00:08:42,390  -->  00:08:45,740
which is the calculation to convert kilometres
209

209

00:08:45,740  -->  00:08:47,960
back to miles, and I'm going to close off that line,
210

210

00:08:47,960  -->  00:08:50,100
so I'll normally do with a right parentheses
211

211

00:08:50,100  -->  00:08:51,730
and then semi-colon.
212

212

00:08:51,730  -->  00:08:54,107
Then I'm gonna type return milesPerHour.
213

213

00:08:58,400  -->  00:08:59,340
Alright, so you can see that there
214

214

00:08:59,340  -->  00:09:01,330
we're using the round method,
215

215

00:09:01,330  -->  00:09:03,740
Math again is a class that contains many useful
216

216

00:09:03,740  -->  00:09:06,280
mathematical methods that you can use in your code,
217

217

00:09:06,280  -->  00:09:08,500
it's in-built and comes as part of Java,
218

218

00:09:08,500  -->  00:09:10,470
the round method that we're using here
219

219

00:09:10,470  -->  00:09:13,947
will round the double that we're passing into this method
220

220

00:09:13,947  -->  00:09:17,820
and, as a note, we're saying it's gonna return a long
221

221

00:09:17,820  -->  00:09:19,820
and we obviously define the long on line nine
222

222

00:09:19,820  -->  00:09:22,550
and we can get a value of the Math.round function
223

223

00:09:22,550  -->  00:09:25,340
returned into the milesPerHour variable.
224

224

00:09:25,340  -->  00:09:28,490
So as you can see here, to call a method from another class,
225

225

00:09:28,490  -->  00:09:31,260
we have to write the class name, in this case Math,
226

226

00:09:31,260  -->  00:09:32,940
and then the dot method name
227

227

00:09:32,940  -->  00:09:34,660
as we've done that on line nine.
228

228

00:09:34,660  -->  00:09:36,060
Now you'll learn more about classes
229

229

00:09:36,060  -->  00:09:39,630
and how you can create your own classes later in the course.
230

230

00:09:39,630  -->  00:09:42,490
But at this point, that completes our first method.
231

231

00:09:42,490  -->  00:09:45,210
Now, if you are eagle-eyed,
232

232

00:09:45,210  -->  00:09:47,430
you probably noticed that IntelliJ's showing a warning
233

233

00:09:47,430  -->  00:09:49,430
on our variable milesPerHour.
234

234

00:09:49,430  -->  00:09:50,960
You can see it's highlighted on line nine,
235

235

00:09:50,960  -->  00:09:53,180
if I hover over that, you can see there
236

236

00:09:53,180  -->  00:09:54,760
it's saying that the local variable
237

237

00:09:54,760  -->  00:09:56,620
milesPerHour is redundant.
238

238

00:09:56,620  -->  00:09:59,280
Now, that's because we're only using this local variable
239

239

00:09:59,280  -->  00:10:01,780
that we've defined on line nine for returning
240

240

00:10:01,780  -->  00:10:03,660
the result of our calculation.
241

241

00:10:03,660  -->  00:10:07,010
Instead of using a variable, we can use the return statement
242

242

00:10:07,010  -->  00:10:10,090
right away with a calculation or an expression.
243

243

00:10:10,090  -->  00:10:13,380
Now that will also return the result but the code is shorter
244

244

00:10:13,380  -->  00:10:16,020
and we also don't then need a local variable.
245

245

00:10:16,020  -->  00:10:18,800
So let's remove the variable and just use return
246

246

00:10:18,800  -->  00:10:21,600
on the same line as the calculation and that will also,
247

247

00:10:21,600  -->  00:10:23,880
by definition, remove this warning.
248

248

00:10:23,880  -->  00:10:26,560
So I'm just going to delete that first part of the code
249

249

00:10:26,560  -->  00:10:29,130
and just change that so it says return
250

250

00:10:29,130  -->  00:10:31,010
and the next line is no longer needed,
251

251

00:10:31,010  -->  00:10:32,840
I'm going to delete that and you can see
252

252

00:10:32,840  -->  00:10:34,800
the warning has now disappeared.
253

253

00:10:34,800  -->  00:10:38,100
In this case, the code will work exactly the same as before,
254

254

00:10:38,100  -->  00:10:41,380
first the calculation or the expression is executed.
255

255

00:10:41,380  -->  00:10:42,640
So this is the part that's,
256

256

00:10:42,640  -->  00:10:47,030
basically, is to the right of the return keyword.
257

257

00:10:47,030  -->  00:10:49,140
That's still gonna be calculated first,
258

258

00:10:49,140  -->  00:10:50,830
once it's calculated, it will then
259

259

00:10:50,830  -->  00:10:53,070
automatically be returned, whatever the value is
260

260

00:10:53,070  -->  00:10:55,480
of that calculation to the method that
261

261

00:10:55,480  -->  00:10:57,710
calls this toMilesPerHour method,
262

262

00:10:57,710  -->  00:10:59,890
and you'll see that in the next video.
263

263

00:10:59,890  -->  00:11:01,140
Alright, so that's the first method.
264

264

00:11:01,140  -->  00:11:02,520
So I'll end the video here.
265

265

00:11:02,520  -->  00:11:04,150
In the next video, we'll continue on
266

266

00:11:04,150  -->  00:11:06,090
and we'll write our second method.
267

267

00:11:06,090  -->  00:11:07,703
See you in the next video.
