1
1

00:00:05,170  -->  00:00:09,910
we've already learned a lot about thread
second with concurrency and we've seen how easy
2

2

00:00:09,910  -->  00:00:14,860
it is for an application to experience
race conditions or thread interference
3

3

00:00:14,860  -->  00:00:20,170
when multiple threads are running so to
help developers write code that involves
4

4

00:00:20,170  -->  00:00:24,360
multiple threads the java developers
introduce the java.util.
5

5

00:00:24,360  -->  00:00:30,160
concurrent package in Java 1.5 along
with several other sub packages
6

6

00:00:30,160  -->  00:00:33,930
now these classes and interfaces in this
package tree
7

7

00:00:33,930  -->  00:00:39,190
are there to help developers properly
synchronized code and that also make it
8

8

00:00:39,190  -->  00:00:42,030
easier to work with multiple threads as
well
9

9

00:00:42,030  -->  00:00:45,480
there are a large number of classes in
this package and we're going to
10

10

00:00:45,480  -->  00:00:47,170
touch on a few of them
11

11

00:00:47,170  -->  00:00:50,940
so to start with we're going to create a
new project going to call that one
12

12

00:00:50,940  -->  00:00:53,940
producer consumer....
13

13

00:01:07,540  -->  00:01:18,580
ok obviously it's a console application
and i'm going to create a new class the
14

14

00:01:18,580  -->  00:01:23,590
class will be called thread color and
that will be the same thread color code
15

15

00:01:23,590  -->  00:01:28,690
that we've used previously that will be
available in the resources section of
16

16

00:01:28,690  -->  00:01:34,270
this video and i'm just going to paste
in those code definitions which are
17

17

00:01:34,270  -->  00:01:35,470
unchanged
18

18

00:01:35,470  -->  00:01:40,930
so in this application their will be a
thread that adds data to a buffer
19

19

00:01:40,930  -->  00:01:45,220
in other words the producer as well as
two threads that can read data from the
20

20

00:01:45,220  -->  00:01:46,960
buffer the consumers
21

21

00:01:46,960  -->  00:01:51,820
so let's start by adding the code for
the producer class and as we've done
22

22

00:01:51,820  -->  00:01:52,960
previously
23

23

00:01:52,960  -->  00:01:56,380
we're just going to add this class to
the main java files so go back to that
24

24

00:01:56,380  -->  00:01:58,300
one
25

25

00:01:58,300  -->  00:02:03,190
just add the classes down to the bottom
so start off by calling this class that
26

26

00:02:03,190  -->  00:02:06,190
we're creating producer....
27

27

00:02:07,110  -->  00:02:14,860
....by the way i'm
28

28

00:02:14,860  -->  00:02:18,700
calling it my producer because if we try
just call it producer Intellij
29

29

00:02:18,700  -->  00:02:19,750
will helpfully or
30

30

00:02:19,750  -->  00:02:23,790
perhaps not so hopefully in this case
trying to import from one of the many
31

31

00:02:23,790  -->  00:02:28,600
producer classes that are already in the
jdk so we just keep this one simple by
32

32

00:02:28,600  -->  00:02:32,320
calling it my producer and we're
implementing runnable because we want to
33

33

00:02:32,320  -->  00:02:37,690
run it on a background thread so let's
start by creating space for our buffer...
34

34

00:02:37,690  -->  00:02:41,290
....
35

35

00:02:41,980  -->  00:02:51,040
and will call it buffer.....
36

36

00:02:51,040  -->  00:02:54,610
....
37

37

00:02:54,610  -->  00:03:00,190
....we are going to accept the
two parameters of the product buffer and
38

38

00:03:00,190  -->  00:03:05,700
the color.....
39

39

00:03:06,980  -->  00:03:15,010
and let's implement our run method as
well so....
40

40

00:03:15,010  -->  00:03:19,450
....
41

41

00:03:19,450  -->  00:03:21,830
...
42

42

00:03:21,830  -->  00:03:42,920
....
43

43

00:03:42,920  -->  00:03:47,090
...
44

44

00:03:48,010  -->  00:03:53,260
....
45

45

00:03:53,260  -->  00:04:19,840
...
46

46

00:04:20,350  -->  00:04:27,880
....and then we need to catch that
47

47

00:04:27,880  -->  00:04:35,410
exception so...
48

48

00:04:35,410  -->  00:04:52,970
....
49

49

00:04:56,640  -->  00:05:01,980
....so the constructor
50

50

00:05:01,980  -->  00:05:03,270
accepts the buffer
51

51

00:05:03,270  -->  00:05:07,650
that's going to be shared by the
consumers and also the color that will
52

52

00:05:07,650  -->  00:05:12,150
be used when it prints to the console
and in the run method you saw that the
53

53

00:05:12,150  -->  00:05:16,980
producer will write the numbers one to
five as a buffer or to the buffer as
54

54

00:05:16,980  -->  00:05:21,570
strings before writing into the buffer it
separates a message to the console with
55

55

00:05:21,570  -->  00:05:25,530
the right color so we can see what it's
doing and after running a number go
56

56

00:05:25,530  -->  00:05:27,210
to sleep for up to one second
57

57

00:05:27,210  -->  00:05:31,530
using the random class to generate that
interval and when it's finished writing
58

58

00:05:31,530  -->  00:05:34,350
the numbers we going to write an eof
which is an end of file
59

59

00:05:34,350  -->  00:05:38,310
string to the buffer to let the
consumers know that there won't be any
60

60

00:05:38,310  -->  00:05:42,630
more data coming or is no more data to
process and we'll talk about the value of
61

61

00:05:42,630  -->  00:05:43,830
eof in a minute
62

62

00:05:43,830  -->  00:05:47,250
ok so the next class - right now is
63

63

00:05:47,250  -->  00:05:57,690
unsurprisingly the consumer class
let's go ahead and write that....
64

64

00:05:57,690  -->  00:06:15,960
....
65

65

00:06:15,960  -->  00:06:18,960
...
66

66

00:06:23,810  -->  00:06:26,810
....
67

67

00:06:29,030  -->  00:06:31,770
this is going to be a little bit
different because we will be processing
68

68

00:06:31,770  -->  00:06:35,550
the buffer instead of effectively
creating it so it's going to be...
69

69

00:06:35,550  -->  00:06:44,060
....
70

70

00:06:44,060  -->  00:06:54,990
we're going to continue and we will be talking
about it shortly....
71

71

00:06:54,990  -->  00:07:05,270
...and I'm going to come back
to eof shortly
72

72

00:07:05,780  -->  00:07:13,130
we're going to print a message color....so if we found our f and we defined
73

73

00:07:13,130  -->  00:07:15,830
that shortly because we're not going to
accept that default import
74

74

00:07:15,830  -->  00:07:19,760
so we have found that then were going
to break out of a loop effectively
75

75

00:07:19,760  -->  00:07:25,800
otherwise if it wasn't any eof then
we're going to put in a message
76

76

00:07:25,800  -->  00:07:36,930
....so you can see there that the my
77

77

00:07:36,930  -->  00:07:41,450
consumer class also implements runnable
so that it can run its code on the
78

78

00:07:41,450  -->  00:07:45,440
thread and accepts the buffer shared
from the producer and the color its going
79

79

00:07:45,440  -->  00:07:49,550
to use when it prints to the console
when the run method the consumer will
80

80

00:07:49,550  -->  00:07:53,720
loop until it reads the eof the
end of file string from the buffer which
81

81

00:07:53,720  -->  00:07:55,010
we will define shortly
82

82

00:07:55,010  -->  00:08:00,110
inside the loop we first check to see if
there's anything to read you know if
83

83

00:08:00,110  -->  00:08:01,220
there isn't
84

84

00:08:01,220  -->  00:08:05,120
we loop back around and check again and
then keep checking until the buffer
85

85

00:08:05,120  -->  00:08:09,930
isn't empty when that's the case it then
looks at the first element in the buffer
86

86

00:08:09,930  -->  00:08:15,380
to see if it's that end of file the eof if it is it prints that its exiting
87

87

00:08:15,380  -->  00:08:18,620
to the console and then breaks
out of the loop
88

88

00:08:18,620  -->  00:08:24,410
it doesn't remove the eof string because
if it did that other consumer threads
89

89

00:08:24,410  -->  00:08:27,180
would loop indefinitely so that's an
important point there
90

90

00:08:27,180  -->  00:08:32,030
if eof is removed the condition
that checks for eof would never be true for
91

91

00:08:32,030  -->  00:08:34,970
the other consumer threads and we
wouldn't want that so that's why were
92

92

00:08:34,970  -->  00:08:39,510
specifically exiting without removing
that particular entry that last entry
93

93

00:08:40,050  -->  00:08:44,550
so therefore consumer threads have to
leave eof from the buffer which
94

94

00:08:44,550  -->  00:08:47,940
is fine because the producer is
indicated that there won't be any more
95

95

00:08:47,940  -->  00:08:52,680
data at that point anyway so if the
first element is an eof it reads from
96

96

00:08:52,680  -->  00:08:56,490
the buffer and print it to the console
and then goes back to the beginning of
97

97

00:08:56,490  -->  00:09:01,860
the loop now in a real world application
we wouldn't loop like that we would have
98

98

00:09:01,860  -->  00:09:06,000
the consumer sleep for a while before
checking the buffer again or we have a
99

99

00:09:06,000  -->  00:09:10,700
system that manages threads and uses the
waitp and notify all methods that we
100

100

00:09:10,700  -->  00:09:14,070
looked at in the previous videos
101

101

00:09:14,070  -->  00:09:17,850
keep in mind that this example is a
contrived one and we're keeping things
102

102

00:09:17,850  -->  00:09:18,830
simple
103

103

00:09:18,830  -->  00:09:22,470
so that we can focus on what we're
learning in this lecture but that's the
104

104

00:09:22,470  -->  00:09:26,130
gist of what we're trying to do in them
in the my consumer class at this point now
105

105

00:09:26,130  -->  00:09:30,440
let's add the code for the main method
and that eof constant that's sitting
106

106

00:09:30,440  -->  00:09:34,410
there so go back up to our main
class
107

107

00:09:34,410  -->  00:09:39,540
let's add it firstly the eof
that's going to be public...
108

108

00:09:39,540  -->  00:09:49,520
...and down here
109

109

00:09:50,240  -->  00:09:55,910
we can accept the import which was
the import for the one we just created
110

110

00:09:55,910  -->  00:10:03,520
...ok then going back up to
our code in our main method class
111

111

00:10:03,520  -->  00:10:12,080
going to start with a creating a buffer
so it's going to be list....
112

112

00:10:12,080  -->  00:10:15,770
....
113

113

00:10:18,080  -->  00:10:21,140
....
114

114

00:10:23,390  -->  00:10:26,690
....
115

115

00:10:26,690  -->  00:10:36,350
...
116

116

00:10:36,350  -->  00:10:40,450
....
117

117

00:10:40,450  -->  00:10:46,760
.....
118

118

00:10:46,760  -->  00:11:18,770
....
119

119

00:11:19,330  -->  00:11:24,260
then all that's left for us to do now is
just to start the three threads so its going to
120

120

00:11:24,260  -->  00:11:36,500
be...
121

121

00:11:36,500  -->  00:11:44,540
....and
incidentally notices on line 7 this
122

122

00:11:44,540  -->  00:11:49,520
static import that's there so that the
my consumer and my producer classes
123

123

00:11:49,520  -->  00:11:54,470
can use it without having to qualify it
with the package in class name and
124

124

00:11:54,470  -->  00:11:57,580
obviously in your case you're import will
match whatever package name you're using
125

125

00:11:57,580  -->  00:12:00,640
and eof is of course the string constant
that we defined
126

126

00:12:00,640  -->  00:12:05,500
so let's finish this video here now in
the next one will continue on and we'll
127

127

00:12:05,500  -->  00:12:07,630
start running this and see what
happens
128

128

00:12:07,630  -->  00:12:08,530
see you in the next video
