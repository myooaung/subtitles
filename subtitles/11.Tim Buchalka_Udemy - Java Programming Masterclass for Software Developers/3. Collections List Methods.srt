1
1

00:00:05,340  -->  00:00:08,340
So I continued on with our
discussion of collections and
2

2

00:00:08,340  -->  00:00:10,490
specifically bond research.
3

3

00:00:10,490  -->  00:00:14,470
You saw in the last video we ended up
with this bond research code that came
4

4

00:00:14,470  -->  00:00:18,870
straight out of the java collections,
the source code comes with Java itself.
5

5

00:00:18,870  -->  00:00:23,020
So I just wanted to reinforce that it's
interesting how this does work and
6

6

00:00:23,020  -->  00:00:28,440
you saw how efficient it was when this
little white dot in there to see,
7

7

00:00:28,440  -->  00:00:31,790
How many iterations were required
compared to our version, and
8

8

00:00:31,790  -->  00:00:34,270
it was significantly more efficient.
9

9

00:00:34,270  -->  00:00:35,290
So essentially the code,
10

10

00:00:35,290  -->  00:00:37,890
the algorithms in general that
come with java are very efficient.
11

11

00:00:37,890  -->  00:00:40,820
They have spent a lot of time with it,
they've worked hard on it And
12

12

00:00:40,820  -->  00:00:43,370
it's good to know as a result that
we don't have to write our own
13

13

00:00:43,370  -->  00:00:45,900
versions of these algorithms
that are included.
14

14

00:00:45,900  -->  00:00:48,790
Rather, we can take use of that
functionality that's included.
15

15

00:00:48,790  -->  00:00:53,730
And just to recap that a binary search
relies on the list that you're searching,
16

16

00:00:53,730  -->  00:00:54,680
being sorted.
17

17

00:00:54,680  -->  00:00:57,240
Now, we saw in an earlier lecture
how to use the collections.sort
18

18

00:00:57,240  -->  00:01:00,870
method to sort a list, but
that was providing the items in that list.
19

19

00:01:00,870  -->  00:01:03,210
Implement the comparable interface.
20

20

00:01:03,210  -->  00:01:06,130
Now we generated our seat
numbers at assorted order, so
21

21

00:01:06,130  -->  00:01:10,550
there's no need to sort before performing
the search, but with that said,
22

22

00:01:10,550  -->  00:01:13,640
the collection and
sort method is available if needed.
23

23

00:01:13,640  -->  00:01:17,330
And interestingly enough,
it uses a very efficient merge sort.
24

24

00:01:17,330  -->  00:01:18,830
This is the collection sort, and
25

25

00:01:18,830  -->  00:01:22,470
that performs much better than the bubble
sort we used in an earlier challenge Now
26

26

00:01:22,470  -->  00:01:25,640
as we have already used the sort method
we're gonna have a look at the reverse
27

27

00:01:25,640  -->  00:01:29,960
sort method that the collection class
provides sort a list in reverse order.
28

28

00:01:29,960  -->  00:01:32,330
Now so
that we don't mess up the seats list for
29

29

00:01:32,330  -->  00:01:35,950
our theatre we have to really look
at a way to use the lists wireless.
30

30

00:01:35,950  -->  00:01:39,300
Instructor to copy one list into another.
31

31

00:01:39,300  -->  00:01:42,350
The collections framework does
provide a method to copy lists and
32

32

00:01:42,350  -->  00:01:47,260
other collections objects, but
it doesn't really work as you may expect.
33

33

00:01:47,260  -->  00:01:51,760
In fact, it'll only copy a list into an
existing one, but at least the same size.
34

34

00:01:51,760  -->  00:01:56,370
We're going to demonstrate the problem
after the next few examples Now, so
35

35

00:01:56,370  -->  00:01:59,870
that we can look at these methods
easily in the main method.
36

36

00:01:59,870  -->  00:02:02,350
What we're gonna do is change the theater
class so that seats filled is public, and
37

37

00:02:02,350  -->  00:02:06,260
the seat class itself is always public And
the seat class itself if also public.
38

38

00:02:06,260  -->  00:02:07,300
So I'm just gonna make that charge.
39

39

00:02:07,300  -->  00:02:09,230
So I'm gonna change this to public.
40

40

00:02:09,230  -->  00:02:12,080
So again you wouldn't normally
do this will a real program.
41

41

00:02:12,080  -->  00:02:14,920
But it's just gonna make our
testing of these concepts that come
42

42

00:02:14,920  -->  00:02:16,060
through a bit easier.
43

43

00:02:16,060  -->  00:02:19,140
So made that public, and
also our seats we're going to create that,
44

44

00:02:19,140  -->  00:02:22,900
convert that I should say,
to public instead of it being private.
45

45

00:02:22,900  -->  00:02:25,100
So that's now an array list as well.
46

46

00:02:25,100  -->  00:02:28,060
So let's go back now
to our main method and
47

47

00:02:28,060  -->  00:02:30,630
we're just going to delete
this content out for now.
48

48

00:02:32,840  -->  00:02:34,590
And let's add some code so
we're gonna put four.
49

49

00:02:34,590  -->  00:02:37,870
Actually what we'll do is we'll
write the print list method first.
50

50

00:02:37,870  -->  00:02:39,890
So we're gonna create
a method that does just that.
51

51

00:02:39,890  -->  00:02:40,700
Prints out the list.
52

52

00:02:40,700  -->  00:02:46,190
It's gonna be public static void print
53

53

00:02:46,190  -->  00:02:51,720
list list as theater .seat.
54

54

00:02:51,720  -->  00:02:53,950
We're gonna accept the import for
Java util list.
55

55

00:02:55,860  -->  00:02:58,610
That's gonna be list.
56

56

00:02:58,610  -->  00:03:06,640
Then we'll have a simple 4H
list theater.seat seat list.
57

57

00:03:08,420  -->  00:03:13,720
I'm gonna print out without a space +
58

58

00:03:13,720  -->  00:03:19,640
seat.getSeatNumber() like so.
59

59

00:03:19,640  -->  00:03:23,480
Then you're gonna print a line
60

60

00:03:24,590  -->  00:03:29,890
go to next line then we're going to
also put some equal signs there.
61

61

00:03:33,120  -->  00:03:36,260
To end the line like so.
62

62

00:03:36,260  -->  00:03:39,260
So what we can now do is create
a new array of seat objects and
63

63

00:03:39,260  -->  00:03:42,090
if we parse in the existing
seats from our theater object,
64

64

00:03:42,090  -->  00:03:44,890
we're going to get a new list
containing all the seats.
65

65

00:03:44,890  -->  00:03:47,650
So the way to do that is
we're going to type lists.
66

66

00:03:47,650  -->  00:03:52,420
Theatre.Seat
67

67

00:03:52,420  -->  00:03:58,090
> seatCopy = new ArrayList.
68

68

00:03:58,090  -->  00:04:03,290
And then we do theatre.seats.
69

69

00:04:03,290  -->  00:04:08,150
And just to confirm that,
we now do a print List(seatCopy).
70

70

00:04:08,150  -->  00:04:11,580
That should confirm that
we've got a new list, so
71

71

00:04:11,580  -->  00:04:13,410
let's try running that
to confirm it does work.
72

72

00:04:13,410  -->  00:04:21,530
And you can see that we've now
successfully managed to get our copy.
73

73

00:04:21,530  -->  00:04:24,740
And scroll right over to the right
hand side, but clearly it's gonna go
74

74

00:04:24,740  -->  00:04:29,730
through and list all the ones How all
the entries seats in our array list.
75

75

00:04:30,740  -->  00:04:34,150
So the seat copy list contains all of
the elements that were in the original.
76

76

00:04:34,150  -->  00:04:37,700
Now, the method that we use
to create seat copy and
77

77

00:04:37,700  -->  00:04:41,690
populate it in all the elements on
theater.seats is called a shallow copy.
78

78

00:04:41,690  -->  00:04:45,750
So what that does is creates an array list
containing all the elements from the list
79

79

00:04:45,750  -->  00:04:48,590
that were passed to the constructor,
as you can see.
80

80

00:04:48,590  -->  00:04:50,510
On this line up here, on line 10.
81

81

00:04:50,510  -->  00:04:54,270
No note it's very important here
to know that these aren't copied.
82

82

00:04:54,270  -->  00:04:55,570
Hence the term shallow copy.
83

83

00:04:55,570  -->  00:04:58,850
Now if we modify one of the seats,
say by reserving it, for
84

84

00:04:58,850  -->  00:05:02,530
example,, then that seat will be reserved,
which ever list we check for it.
85

85

00:05:02,530  -->  00:05:03,590
So we may have a new list, but
86

86

00:05:03,590  -->  00:05:07,220
the contents are a same objects
as exists in the theater seats.
87

87

00:05:07,220  -->  00:05:12,170
So we're taking a copy, a shallow
copy Of the same data if you will,
88

88

00:05:12,170  -->  00:05:13,970
putting that into another array list but
89

89

00:05:13,970  -->  00:05:17,610
they are effectively the same shared
objects and just to demonstrate that is
90

90

00:05:17,610  -->  00:05:20,730
the case what we're gonna do is
we'll add a reservation after here.
91

91

00:05:20,730  -->  00:05:27,290
So we're going to after the print we'll
do something like c copy dot get.
92

92

00:05:27,290  -->  00:05:31,900
>And we'll just get the second element
from your right, docu serve and
93

93

00:05:31,900  -->  00:05:35,610
we'll just reserve that and
obviously that should be the second seat
94

94

00:05:35,610  -->  00:05:40,350
A1 is the first one A02 would be
the second one then we'll do if.
95

95

00:05:40,350  -->  00:05:48,580
(Theatre.reserveSeat("A02")).
96

96

00:05:48,580  -->  00:05:54,150
("Please pay for A02").
97

97

00:05:54,150  -->  00:06:01,060
Else ("Seat already reserved").
98

98

00:06:01,060  -->  00:06:02,730
So you can see what we've done there,
99

99

00:06:02,730  -->  00:06:07,500
we've used our copy of the Array
list on line 13 to reserve the seat,
100

100

00:06:07,500  -->  00:06:10,240
the second entry in the array list
which should be seat A02, and
101

101

00:06:10,240  -->  00:06:14,370
then we're going back, reserving
the seat from the other array list,
102

102

00:06:14,370  -->  00:06:17,420
which ordinarily if there was distinct and
separate versions of
103

103

00:06:17,420  -->  00:06:20,160
the objects that should also work,
but let's just run it and
104

104

00:06:20,160  -->  00:06:25,390
confirm what happens You can see, it's
come up and said seat already reserved.
105

105

00:06:25,390  -->  00:06:28,510
So clearly, in fact, even now we've
got two separate array lists,
106

106

00:06:28,510  -->  00:06:31,140
it's very clear that we're sharing
the same data because otherwise,
107

107

00:06:31,140  -->  00:06:35,670
of course, the second reservation would
also have worked on the other array lists.
108

108

00:06:35,670  -->  00:06:38,300
This is an important concept
which was also covered
109

109

00:06:38,300  -->  00:06:42,080
when we discussed link lists which
was of course earlier in the course.
110

110

00:06:42,080  -->  00:06:45,720
So the two separate lists here
Each containing references
111

111

00:06:45,720  -->  00:06:49,220
to the same 96 c object so
that's the important thing there.
112

112

00:06:49,220  -->  00:06:52,540
Separate references but
same objects effectively.
113

113

00:06:52,540  -->  00:06:57,010
So two separate array lists but
the references are to the same 96 c type.
114

114

00:06:57,010  -->  00:07:00,720
To objects that we initially created
when we created the theater object
115

115

00:07:00,720  -->  00:07:01,790
on line nine.
116

116

00:07:01,790  -->  00:07:03,500
And just to prove that
they are separate lists,
117

117

00:07:03,500  -->  00:07:06,620
we haven't already proved
that with what we've done.
118

118

00:07:06,620  -->  00:07:10,840
Let's just sort one with reverse order
then print the other array list out and
119

119

00:07:10,840  -->  00:07:11,750
see what happens.
120

120

00:07:11,750  -->  00:07:13,520
So down here, we can do collections.
121

121

00:07:15,360  -->  00:07:20,570
Collections.reverse and
that reverses the order of any list.
122

122

00:07:20,570  -->  00:07:22,700
So we'll do that for the seatCopy.
123

123

00:07:25,300  -->  00:07:29,200
And now if I print out, I'll print
a message say we're Printing seatCopy.
124

124

00:07:29,200  -->  00:07:34,960
We're gonna printList().
125

125

00:07:34,960  -->  00:07:35,510
Seat copy.
126

126

00:07:37,000  -->  00:07:43,140
Then we'll do another one,
printing theater.seats.
127

127

00:07:43,140  -->  00:07:43,710
The other one.
128

128

00:07:45,190  -->  00:07:50,970
And for that one,
we'll do print list theater.seats.
129

129

00:07:50,970  -->  00:07:53,840
Clearly, there's two separate array
lists that we've got working there.
130

130

00:07:53,840  -->  00:07:55,980
So let's just run that and
confirm what happens.
131

131

00:07:57,830  -->  00:08:01,950
And you can see here what's happened is,
we've got the C copy we'll reverse that.
132

132

00:08:01,950  -->  00:08:05,800
And we can see now that C copy is
in reverse order with starting from
133

133

00:08:05,800  -->  00:08:09,980
what was the last seat that we
created is now in the first position.
134

134

00:08:09,980  -->  00:08:13,670
But theater.C has still got
the original order that was set.
135

135

00:08:13,670  -->  00:08:17,960
So again, clearly, they are separate array
lists But the only thing is that they
136

136

00:08:17,960  -->  00:08:22,070
refer to the same objects that were
initially created on line ten.
137

137

00:08:22,070  -->  00:08:24,920
There's also a shuffle method in
the collections class and that
138

138

00:08:24,920  -->  00:08:29,180
shuffles the elements of the latest in
a random or sort of a pseudo-random order.
139

139

00:08:29,180  -->  00:08:30,570
So we could go back and try that.
140

140

00:08:30,570  -->  00:08:32,190
Close that down the run window.
141

141

00:08:32,190  -->  00:08:33,760
It's a bit of a reverse here.
142

142

00:08:33,760  -->  00:08:35,070
We can change that to shuffle.
143

143

00:08:37,280  -->  00:08:38,600
Shuffle.
144

144

00:08:38,600  -->  00:08:44,570
And if you run that you can see we've got
seemingly random order there, T07, E02.
145

145

00:08:44,570  -->  00:08:48,090
Run that again, AF4, F08, F11, so
146

146

00:08:48,090  -->  00:08:53,960
that's a Is a good way
of pseudo randomization
147

147

00:08:53,960  -->  00:08:58,830
of a list using the shuffle method that's
part of the collections framework.
148

148

00:08:58,830  -->  00:09:05,050
Obviously there are a lot of other useful
methods that form the collections class.
149

149

00:09:05,050  -->  00:09:07,030
A couple of other useful ones are min and
max.
150

150

00:09:07,030  -->  00:09:08,880
And what they do is
return the smallest and
151

151

00:09:08,880  -->  00:09:12,040
highest elements recorded into
their natural sort order.
152

152

00:09:12,040  -->  00:09:15,290
In other words the sort order that
their compare to method maintains.
153

153

00:09:15,290  -->  00:09:19,320
So we could do something
along those lines.
154

154

00:09:19,320  -->  00:09:20,290
Theatre.
155

155

00:09:20,290  -->  00:09:24,140
Seat, min seat equals
156

156

00:09:24,140  -->  00:09:29,590
collections.min seat copy.
157

157

00:09:29,590  -->  00:09:35,110
Then we can do theater.seat max seat
158

158

00:09:35,110  -->  00:09:40,480
equals collections.max seat copy.
159

159

00:09:40,480  -->  00:09:46,730
I could print out a message
then min Seat number
160

160

00:09:46,730  -->  00:09:52,310
is husband seat.get seat number.
161

161

00:09:52,310  -->  00:09:55,550
Now that it's returning a seat.
162

162

00:09:55,550  -->  00:10:00,650
And the other one is max
seat number is plus max
163

163

00:10:00,650  -->  00:10:06,020
seat.get seat number.
164

164

00:10:07,140  -->  00:10:08,140
So if we run this code now.
165

165

00:10:11,740  -->  00:10:15,430
And predictably the minimum seat is
aisle one which was the first element.
166

166

00:10:15,430  -->  00:10:20,350
And H12 is the max, which of course is
the last element in the sorted list.
167

167

00:10:20,350  -->  00:10:24,900
And obviously it's taking into account
that's not necessarily the last element,
168

168

00:10:24,900  -->  00:10:26,260
it's the one with the high sort order.
169

169

00:10:26,260  -->  00:10:30,010
And again it uses the compare to
method to determine that sort order.
170

170

00:10:30,010  -->  00:10:34,280
Basing the results on that natural
order from the compare to method for
171

171

00:10:34,280  -->  00:10:35,350
a given list.
172

172

00:10:35,350  -->  00:10:39,250
And incidentally, these work even
if the lister hasn't been sorted.
173

173

00:10:39,250  -->  00:10:40,810
So we can go about changing that.
174

174

00:10:40,810  -->  00:10:45,310
So we could change the reference
here to theater.seatCopy and
175

175

00:10:45,310  -->  00:10:47,030
just running that again.
176

176

00:10:48,660  -->  00:10:52,440
So you can see that is still working
even though as you saw with seed copy,
177

177

00:10:52,440  -->  00:10:53,530
it wasn't sorted.
178

178

00:10:53,530  -->  00:10:56,980
We used a shuffle method, but it's still
going through that entire list and
179

179

00:10:56,980  -->  00:11:00,090
determining the minimum and the maximum
based on the compare to sort order
180

180

00:11:00,090  -->  00:11:03,410
because that of course will still
work out the natural order.
181

181

00:11:03,410  -->  00:11:06,270
It's just that we haven't
sorted the list at this time.
182

182

00:11:06,270  -->  00:11:09,060
We've used the shuffle method, so
minimum maximum will always work,
183

183

00:11:09,060  -->  00:11:12,460
and is pretty handy if you want to
quickly find the minimum and maximum.
184

184

00:11:12,460  -->  00:11:17,070
Elements in using their natural sort
order based on the compare to method.
185

185

00:11:17,070  -->  00:11:20,590
Now if you'll want to implement your
own sort or for any other reason,
186

186

00:11:20,590  -->  00:11:24,480
the collections class provides a swap
method to swap two elements in a list.
187

187

00:11:24,480  -->  00:11:26,210
So we pass the name on the list and
188

188

00:11:26,210  -->  00:11:28,760
the index position of the two
elements that we wanna swap.
189

189

00:11:28,760  -->  00:11:31,770
And what happens is the swap method
swaps their position in a list.
190

190

00:11:31,770  -->  00:11:35,440
So what we'll do is we'll create
a variation on the bubble sort method from
191

191

00:11:35,440  -->  00:11:36,770
the arrays challenge.
192

192

00:11:36,770  -->  00:11:40,720
But this time, we're going to use
nested foreloops, and the reason for
193

193

00:11:40,720  -->  00:11:44,220
that is we had a student in the course
ask if that was also acceptable.
194

194

00:11:44,220  -->  00:11:47,310
Notice that when we start typing this
code, actually, I'll type it in first,
195

195

00:11:47,310  -->  00:11:50,620
then we'll talk about it a little
bit more So let's put the code in,
196

196

00:11:50,620  -->  00:11:51,660
the top of the code in.
197

197

00:11:55,860  -->  00:11:56,550
It will be public.
198

198

00:11:56,550  -->  00:12:01,260
Static, void,
199

199

00:12:01,260  -->  00:12:05,040
sort list.
200

200

00:12:05,040  -->  00:12:12,280
It's going to be list,
extends theater .seat,
201

201

00:12:12,280  -->  00:12:17,500
list, and we start with a for loop,
202

202

00:12:17,500  -->  00:12:23,350
for(int i = 0, i < this.size -1,
203

203

00:12:23,350  -->  00:12:27,950
sorry, and I'll explain this shortly.
204

204

00:12:27,950  -->  00:12:31,710
i++, and then we put another loop.
205

205

00:12:31,710  -->  00:12:37,830
The next inner loop is going to
be int j = i+1, j < list.size(),
206

206

00:12:37,830  -->  00:12:46,550
j++ and
we put if(list.get(i).compareTo()),
207

207

00:12:46,550  -->  00:12:51,520
so we're using the compareTo
method to determine or
208

208

00:12:51,520  -->  00:12:53,870
to get a result in integer but.
209

209

00:12:53,870  -->  00:12:57,660
Back depending whether the entries
are less than, the same, or
210

210

00:12:57,660  -->  00:12:59,350
sort of greater than in the sort order.
211

211

00:12:59,350  -->  00:13:01,970
They're compared to list.getj.
212

212

00:13:01,970  -->  00:13:05,310
So we're comparing the two elements.
213

213

00:13:05,310  -->  00:13:08,980
And if the result of that is greater than
zero Zero that means we can swap them,
214

214

00:13:08,980  -->  00:13:13,930
we wanna swap them to our sorter, that'd
be collections.swap, this is how we use
215

215

00:13:13,930  -->  00:13:18,550
that swap method, list and we need to
parse the two elements we wanna swap and
216

216

00:13:18,550  -->  00:13:20,700
their element positions which is I and j.
217

217

00:13:20,700  -->  00:13:23,620
Now, just to confirm what we've
done there, and again we're using
218

218

00:13:23,620  -->  00:13:27,480
a variation of the bubble saw method
we wrote in the erase challenge.
219

219

00:13:27,480  -->  00:13:29,550
But again we're using
nested four loops and
220

220

00:13:29,550  -->  00:13:32,790
that's because we had a student ask
whether that was also acceptable.
221

221

00:13:32,790  -->  00:13:36,370
I want you to first notice that
the end loop doesn't start at zero But
222

222

00:13:36,370  -->  00:13:41,720
it actually starts after the current
position that the outer loop has reached.
223

223

00:13:41,720  -->  00:13:43,780
So in other words,
the inner loop is changing fewer and
224

224

00:13:43,780  -->  00:13:45,770
fewer elements each time around.
225

225

00:13:45,770  -->  00:13:48,780
That's still very much slower
than the built in merge sort, but
226

226

00:13:48,780  -->  00:13:52,800
this could be useful in situations where,
for example, speed wasn't so important but
227

227

00:13:52,800  -->  00:13:54,210
memory was at a premium.
228

228

00:13:54,210  -->  00:13:56,940
So merge sort requires far more
memory than a bubble sort,
229

229

00:13:56,940  -->  00:14:00,250
and this could be an issue
with extremely large lists.
230

230

00:14:00,250  -->  00:14:03,330
Even so, that said, we'd probably be very
rare that you'd want to use your own sort
231

231

00:14:03,330  -->  00:14:08,800
routine rather than the ones that
are built into the collections framework.
232

232

00:14:08,800  -->  00:14:12,110
Now, like the print list method,
which was the method directly above,
233

233

00:14:12,110  -->  00:14:15,560
by starting on line 34 That had to
access the get number seat getter and
234

234

00:14:15,560  -->  00:14:17,790
therefore only works on c-lists.
235

235

00:14:17,790  -->  00:14:21,730
What we've done on line 42 is
we've made the method generic,
236

236

00:14:21,730  -->  00:14:23,230
the sort list method generic.
237

237

00:14:23,230  -->  00:14:26,770
So that can sort any kind of list of
theater seats so as long as they implement
238

238

00:14:26,770  -->  00:14:30,220
the comparable interface and obviously
that should be pretty familiar from
239

239

00:14:30,220  -->  00:14:34,390
the lectures on GenerX where we went
through that concept in great detail.
240

240

00:14:34,390  -->  00:14:37,160
So to call this sort list method,
sort list method so
241

241

00:14:37,160  -->  00:14:42,450
we can see swap in action, we're going
to add some code to our main method.
242

242

00:14:42,450  -->  00:14:44,820
And bearing in mind, we're going
to sort the same copy method, and
243

243

00:14:44,820  -->  00:14:47,360
if you recall on line 21,
we shuffled it so
244

244

00:14:47,360  -->  00:14:50,300
we We know that it's out of order,
so let's now try and sort it again.
245

245

00:14:50,300  -->  00:14:52,870
So we'll go sort list, and
it's gonna be sit copy.
246

246

00:14:54,920  -->  00:14:57,970
Then we'll do a print out, printing.
247

247

00:14:59,590  -->  00:15:00,590
Sorted seat copy.
248

248

00:15:02,840  -->  00:15:07,150
And print list so copy so we've sorted it,
249

249

00:15:07,150  -->  00:15:13,410
we've sent the list to this method to line
46 and we're printing it out, the actual
250

250

00:15:13,410  -->  00:15:16,310
results and they should then be ordered
again so let's go and run that and see.
251

251

00:15:17,990  -->  00:15:22,740
So I can see that on this line here,
below printing copy, at the top,
252

252

00:15:22,740  -->  00:15:23,470
that we're out of order.
253

253

00:15:23,470  -->  00:15:25,560
But then down at the bottom,
printing sorted order,
254

254

00:15:25,560  -->  00:15:28,170
you can see clearly now that
we're actually sorted correctly.
255

255

00:15:28,170  -->  00:15:31,080
So our mini sort method worked fine on it.
256

256

00:15:31,080  -->  00:15:34,700
I'm going to finish this video with
a look at a rather odd copy method that
257

257

00:15:34,700  -->  00:15:37,110
is provided by the collections class.
258

258

00:15:37,110  -->  00:15:39,450
And what that does is it
takes two parameters.
259

259

00:15:39,450  -->  00:15:41,810
The destination and the source list.
260

260

00:15:41,810  -->  00:15:46,520
Now the destination has to be of a generic
type I there's a super set of the source
261

261

00:15:46,520  -->  00:15:51,520
list I should say and it basically means
it can be collection an iterable or
262

262

00:15:51,520  -->  00:15:54,420
a list and the source must be a list.
263

263

00:15:54,420  -->  00:15:57,650
Now the problem that tends to arise
with the collections copy method,
264

264

00:15:57,650  -->  00:16:00,830
is that people either expect to use it
as we just did when we used the list
265

265

00:16:00,830  -->  00:16:05,070
constructor to create
our copy of our seats.
266

266

00:16:05,070  -->  00:16:07,150
We did that all the way
up here on line 11.
267

267

00:16:07,150  -->  00:16:13,340
Or what happens is the people may
expect to create a deep copy of list.
268

268

00:16:13,340  -->  00:16:17,890
As opposed to a shallow copy, a deep copy
is a copy where the elements are not just
269

269

00:16:17,890  -->  00:16:21,990
references To the same elements as in the
original list, but are themselves copied.
270

270

00:16:21,990  -->  00:16:25,840
And of course, that's unlocked
the shallow copy that we produced earlier
271

271

00:16:25,840  -->  00:16:29,420
because we determined when we printed out
the results that was the same elements in
272

272

00:16:29,420  -->  00:16:32,640
the array list that were
being effectively duplicated.
273

273

00:16:32,640  -->  00:16:34,240
In the second array list.
274

274

00:16:34,240  -->  00:16:39,620
Now I'm gonna copy a collections copy
method is gonna file as the destination
275

275

00:16:39,620  -->  00:16:42,270
is big enough to hold all
the elements to be copied into it.
276

276

00:16:42,270  -->  00:16:43,620
So that actually leads to a problem.
277

277

00:16:43,620  -->  00:16:46,960
That's pretty typical to see people
try to do something like this.
278

278

00:16:46,960  -->  00:16:50,000
Then knowing that you need to
have the same amount of elements,
279

279

00:16:50,000  -->  00:16:55,780
people will actually type
something like list theater.seat
280

280

00:16:55,780  -->  00:17:02,150
newList = new Array(list).
281

281

00:17:02,150  -->  00:17:07,210
That would be something
like theater.seats.size.
282

282

00:17:07,210  -->  00:17:13,160
And then collections.copy
283

283

00:17:13,160  -->  00:17:17,870
ulisttheater.seats.
284

284

00:17:17,870  -->  00:17:20,960
So in theory, you'd look at that and
link it's very common for
285

285

00:17:20,960  -->  00:17:21,660
people to look out and think.
286

286

00:17:21,660  -->  00:17:25,040
Well, I've allocated the amount of size
for the array list, so I should be able to
287

287

00:17:25,040  -->  00:17:31,420
run that, but what actually happens is
you get an error Source destination.
288

288

00:17:31,420  -->  00:17:33,200
A source does not fit into destination.
289

289

00:17:33,200  -->  00:17:37,480
Now, the reason that's fouled
is the code on line 37,
290

290

00:17:37,480  -->  00:17:42,510
what that does,
it only sets the capacity of the railist,
291

291

00:17:42,510  -->  00:17:46,350
giving it the potential to hold that many
elements but initially containing none.
292

292

00:17:46,350  -->  00:17:48,360
So it still doesn't actually
create a number of elements.
293

293

00:17:48,360  -->  00:17:52,510
So to get this to work get the copy
to work you actually need to
294

294

00:17:52,510  -->  00:17:55,450
have 96 seed objects in
that new list in that
295

295

00:17:55,450  -->  00:17:59,510
list that we created on line 37
before we can attempt to copy.
296

296

00:17:59,510  -->  00:18:02,580
So with that said it's really hard
to think of an actual use for
297

297

00:18:02,580  -->  00:18:05,600
the collections copy method would that
would allow all of the elements of a list
298

298

00:18:05,600  -->  00:18:08,980
to be copied into another collections
object providing the object had been
299

299

00:18:08,980  -->  00:18:12,760
initialized by enough elements first And I
guess that's probably why it was included.
300

300

00:18:12,760  -->  00:18:14,400
Okay.
So I'm going to finish the video now,
301

301

00:18:14,400  -->  00:18:16,980
because we've covered most of the
collection's methods that can be used on
302

302

00:18:16,980  -->  00:18:17,960
lists.
303

303

00:18:17,960  -->  00:18:18,740
So in the next video,
304

304

00:18:18,740  -->  00:18:21,400
what I'm going to do is take a look
at the other collection types.
305

305

00:18:21,400  -->  00:18:22,300
See you in that video.
