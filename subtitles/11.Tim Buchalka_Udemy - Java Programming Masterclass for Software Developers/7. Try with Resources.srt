1
1

00:00:05,200  -->  00:00:09,170
ok so its now time just for a mini challenge we have another challenge to
2

2

00:00:09,170  -->  00:00:16,010
will be coming up in a later video but for this one now looking at the code what why did I actually declare
3

3

00:00:16,010  -->  00:00:21,100
loc file at the start of the method
that's the code that its on line 19 why
4

4

00:00:21,100  -->  00:00:24,770
did I declare it there's instead of saying coming into here on line  21 and
5

5

00:00:24,770  -->  00:00:30,930
doing something like file writer....and doing it their and obviously
6

6

00:00:30,930  -->  00:00:35,680
we got an error here because we already defined it but what's the reason that I chose to
7

7

00:00:35,680  -->  00:00:39,130
put it in here on line 19 instead of
actually doing it within the try block
8

8

00:00:39,130  -->  00:00:43,110
os have a think about that and if you know
the reason well when you figure out the
9

9

00:00:43,110  -->  00:00:47,930
reason come back and un-pause the video
and I'll show you or tell you what it
10

10

00:00:47,930  -->  00:00:50,930
was so pause the video now
11

11

00:00:51,930  -->  00:00:56,420
ok so did you figure out why we want
to do that well the reason we had
12

12

00:00:56,420  -->  00:00:57,910
to do that was that
13

13

00:00:57,910  -->  00:01:03,630
try catch and finally blocks introduce new
scope so file writer declared inside a try
14

14

00:01:03,630  -->  00:01:04,820
block would not be available in the finally
15

15

00:01:04,820  -->  00:01:12,540
block so if I deleted this code on line
19 we find we get errors on line 30 and 33
16

16

00:01:12,540  -->  00:01:17,930
and that's because try is a block in its own right and the finally and the
17

17

00:01:17,930  -->  00:01:22,860
catch are also their own blocks and
consequently any variables defined are given
18

18

00:01:22,860  -->  00:01:28,720
block that is available to another block or inside another block so that's why we did it that way to get
19

19

00:01:28,720  -->  00:01:34,220
that to overcome that and we did it
outside basically the first block now
20

20

00:01:34,220  -->  00:01:38,030
looking at this code and thinking
there's quite a lot of code in that
21

21

00:01:38,030  -->  00:01:41,940
method to write our data and most of its
concern with catching the exceptions
22

22

00:01:41,940  -->  00:01:46,020
that the file writer might actually
throw so I mentioned in the videos on
23

23

00:01:46,020  -->  00:01:49,390
exceptions in the section that there
really isn't much point catching an
24

24

00:01:49,390  -->  00:01:53,500
exception unless your going to do
something about it all with it in all
25

25

00:01:53,500  -->  00:01:57,560
this code is doing at the moment is
printing out a stack trace so what going
26

26

00:01:57,560  -->  00:02:03,490
to do is we are going to use very similar card to read the
data back in when the game starts and if the
27

27

00:02:03,490  -->  00:02:07,900
game data can't be loaded then the rest of the
game isn't going to work very well so
28

28

00:02:07,900  -->  00:02:11,390
there's really not much that can be done
when a file can't be opened so the best
29

29

00:02:11,390  -->  00:02:15,780
thing we can do here in that situation
is to send the exception back to the
30

30

00:02:15,780  -->  00:02:20,690
calling program and alert the program or
the user I should say to the error now
31

31

00:02:20,690  -->  00:02:24,540
I actually said at the start of the
program that Java insists that we handle
32

32

00:02:24,540  -->  00:02:29,160
checked exceptions but there are two
ways to handle them now as we saw doing
33

33

00:02:29,160  -->  00:02:29,680
nothing
34

34

00:02:29,680  -->  00:02:33,070
wasn't an option but the alternative to catching them is to throw them
35

35

00:02:33,070  -->  00:02:37,890
back up the call stack obviously as this
main method is the entry point for this
36

36

00:02:37,890  -->  00:02:41,560
part of the program we don't actually have any
calling code that can handle the
37

37

00:02:41,560  -->  00:02:45,760
exception but the idea of throwing the
exception instead of catching it is very
38

38

00:02:45,760  -->  00:02:50,390
useful so we're gonna have a look at now on how to do that though the Java
39

39

00:02:50,390  -->  00:02:54,560
documentation uses the term catch or
specify for dealing with checked
40

40

00:02:54,560  -->  00:02:58,050
exceptions this means the
method must either
41

41

00:02:58,050  -->  00:03:03,040
catch the exception or specify that it's
going throw that it throws it now often
42

42

00:03:03,040  -->  00:03:06,890
it'll make more sense to specify rather
catch so we are going to do that with our main method
43

43

00:03:06,890  -->  00:03:11,430
so lets actually have a look at doing that now so what we do is we come to our main
44

44

00:03:11,430  -->  00:03:15,340
method and we adjust this and the end after the arguments and after the closing
45

45

00:03:15,340  -->  00:03:23,590
bracket we type.....so we
basically specifying the main method
46

46

00:03:23,590  -->  00:03:28,810
throws an exception and now we've done that the caller knows
47

47

00:03:28,810  -->  00:03:32,470
the exception can be thrown from this method
and because IOException is a
48

48

00:03:32,470  -->  00:03:36,300
checked exception the caller then must
either catch the exception or also
49

49

00:03:36,300  -->  00:03:40,420
specify that it's going to throw it so
well actually at that point now we can also
50

50

00:03:40,420  -->  00:03:45,970
remove this part of the try catch block
because we're not actually dealing with
51

51

00:03:45,970  -->  00:03:49,500
the IOException of such anymore were
actually just throwing the error will
52

52

00:03:49,500  -->  00:03:53,410
leave the finally block in because we
still want to actually process the correct
53

53

00:03:53,410  -->  00:03:58,030
closing of the file so you can close that one
but we can also closed the second one as
54

54

00:03:58,030  -->  00:04:07,720
well because we are throwing the
IOException so will come down here and get rid of that one....so if we close
55

55

00:04:07,720  -->  00:04:12,510
the try block and again we've got no catch as
a result we can actually change our
56

56

00:04:12,510  -->  00:04:19,230
block now to remove the try all together
because we've thrown that exceptions so you can
57

57

00:04:19,230  -->  00:04:22,370
see the code has been made easier now
because if there is an IOException
58

58

00:04:22,370  -->  00:04:27,180
that's thrown in the finally block it is
actually going to be thrown back to the
59

59

00:04:27,180  -->  00:04:31,730
or thrown up the call stack because of the
reference we made on line 18 that
60

60

00:04:31,730  -->  00:04:36,250
throws IOException so we still want that finally closed because we do want to
61

61

00:04:36,250  -->  00:04:40,450
test to see whether we closing it properly
and if you've got a loc file reference
62

62

00:04:40,450  -->  00:04:43,770
we do want to try and close it so that's
why I'm leaving that finally close
63

63

00:04:43,770  -->  00:04:47,460
in there but in some scenarios
with the way we've defined this
64

64

00:04:47,460  -->  00:04:54,740
now if you throw the IOException you can probably do without a try block altogether because you're
65

65

00:04:54,740  -->  00:04:58,130
basically passing the responsibility for
dealing with the IOException and in this
66

66

00:04:58,130  -->  00:05:01,700
case to another method but in this
particular example we're actually
67

67

00:05:01,700  -->  00:05:04,770
leaving the finally clause in because we're actually doing some
68

68

00:05:04,770  -->  00:05:07,880
processing just to check to see whether we
can close the file
69

69

00:05:07,880  -->  00:05:14,090
alright so let's actually delete locations.txt again so delete that delete it before we
70

70

00:05:14,090  -->  00:05:23,220
gonna break it yet again so click ok click on do refactor which will delete it now you can see IntelliJ
71

71

00:05:23,220  -->  00:05:27,220
is smart enough to know that that file
was being referenced on line 21 but we removed it so that is
72

72

00:05:27,220  -->  00:05:28,430
fine
73

73

00:05:28,430  -->  00:05:32,380
now I mentioned a few ways of this code could break
including insufficient permissions on
74

74

00:05:32,380  -->  00:05:37,210
the file or its containing directory in
the file being read only but we can
75

75

00:05:37,210  -->  00:05:41,210
actually also break the code by
deliberately throwing an exception to
76

76

00:05:41,210  -->  00:05:45,620
simulate somethings has gone wrong and that can be something that's
77

77

00:05:45,620  -->  00:05:50,520
very useful to be able to do so we saw
how to throw exceptions in earlier
78

78

00:05:50,520  -->  00:05:55,860
videos and as a result I'm gonna throw on in the loop that
actually writes out the data so lets come down
79

79

00:05:55,860  -->  00:06:01,030
to the line after line 23 that's
writing the data and we are gonna throw an exception
80

80

00:06:01,030  -->  00:06:08,330
their so type...
81

81

00:06:08,330  -->  00:06:17,900
...and leave everything as it is and doing this
82

82

00:06:17,900  -->  00:06:21,910
actually throwing your own exceptions
can be a really useful technique while
83

83

00:06:21,910  -->  00:06:25,340
testing but obviously you wouldn't want to leave the
throw statement in the code when the
84

84

00:06:25,340  -->  00:06:27,080
code went into production
85

85

00:06:27,080  -->  00:06:31,120
now you can place throw statement in code
that you want to test to make sure that
86

86

00:06:31,120  -->  00:06:34,830
your catch and finally blocks do actually
work but make sure again that you
87

87

00:06:34,830  -->  00:06:38,800
actually delete them immediately after
you've actually tested to avoid this
88

88

00:06:38,800  -->  00:06:42,590
situation where they're actually in
production code I have seen scenarios where
89

89

00:06:42,590  -->  00:06:47,960
that has been done by mistake in the
past so we actually run this now so do that
90

90

00:06:47,960  -->  00:06:55,580
you should find it creates a location file and it still
successfully closes it so we get a text exception
91

91

00:06:55,580  -->  00:07:00,930
their you can see locations.txt was actually created and if open it up
92

92

00:07:00,930  -->  00:07:05,380
and have a look at it we can see we've got the
first entry the first location and
93

93

00:07:05,380  -->  00:07:09,740
that's consistent with going through
the for loop and writing the first
94

94

00:07:09,740  -->  00:07:15,270
location and then actually throwing the
exception then the not that the finally claus or
95

95

00:07:15,270  -->  00:07:20,000
the block got invoked and we're able to
successfully close the file because that
96

96

00:07:20,000  -->  00:07:20,810
was invoked first
97

97

00:07:20,810  -->  00:07:24,300
before basically after the
IOException was actually raise so it's
98

98

00:07:24,300  -->  00:07:27,820
in other words it still actually
processed the finally clause to close
99

99

00:07:27,820  -->  00:07:29,370
down the file
100

100

00:07:29,370  -->  00:07:33,510
so you can see this is a very useful technique and
we are going to be using it again as I look at
101

101

00:07:33,510  -->  00:07:36,180
different ways of performing IO operations
102

102

00:07:36,180  -->  00:07:40,030
for now though I'm gonna delete the throw statements so that our code works again and again if you are
103

103

00:07:40,030  -->  00:07:44,960
testing this make sure as soon as you tested it you just commented out or just delete it so I'm gonna
104

104

00:07:44,960  -->  00:07:47,200
deleted in this case
105

105

00:07:47,200  -->  00:07:52,940
so we've now successfully written the locations data to a file so its actually time to also write the
106

106

00:07:52,940  -->  00:07:57,630
exits know the old way before Java 7
would involve creating a new file writer
107

107

00:07:57,630  -->  00:08:02,510
object for the exits file then writing the exits for each location in a
108

108

00:08:02,510  -->  00:08:07,850
loop similar to what we've done with the
loop for locations and finally
109

109

00:08:07,850  -->  00:08:11,250
checking that the file writer object is not null and closing with a
110

110

00:08:11,250  -->  00:08:15,870
finally block now the code has already been
messy and that would make it worse
111

111

00:08:15,870  -->  00:08:20,360
slightly worse but Java 7 added a try with
resource statement that at actually makes
112

112

00:08:20,360  -->  00:08:24,100
everything look cleaner and I just
wanted to allude you to the documentation
113

113

00:08:24,100  -->  00:08:27,500
for this its quite useful to have those
resources so let's just go in there quickly
114

114

00:08:27,500  -->  00:08:33,360
paste that in you can see the link on the screen in there I suggest you
do have a look at that so the try
115

115

00:08:33,360  -->  00:08:38,970
resources statement again introduced with Java
7 so let's go ahead and actually change
116

116

00:08:38,970  -->  00:08:43,330
the code that we already written to use this
try with resources just to see how much
117

117

00:08:43,330  -->  00:08:48,070
easier it makes it streamlined it our code but the way we
118

118

00:08:48,070  -->  00:08:54,710
do it is I'm just going to comment this code for now so that you still got access to it in the source code at the
119

119

00:08:54,710  -->  00:08:58,850
last lecture of this course iso the
format we will now use is try....
120

120

00:09:04,940  -->  00:09:15,980
....
121

121

00:09:15,980  -->  00:09:19,670
you can see the format is different with having the file writer
122

122

00:09:19,670  -->  00:09:28,060
object being created in brackets then we
put our loop so....
123

123

00:09:28,060  -->  00:09:31,730
.....
124

124

00:09:32,240  -->  00:09:41,680
.....
125

125

00:09:41,680  -->  00:09:51,700
....
126

126

00:09:51,700  -->  00:10:00,370
..and I'm getting this error here and if you do get this
127

127

00:10:00,370  -->  00:10:04,860
that means that we haven't got the right
language level set for our project and you
128

128

00:10:04,860  -->  00:10:08,500
can see its saying try with resources are not
supported on this language level so if you get
129

129

00:10:08,500  -->  00:10:11,820
that just right click you project here at the
top
130

130

00:10:11,820  -->  00:10:21,280
go down to open module settings flash out briefly and here
you will see it selected version 6 so
131

131

00:10:21,280  -->  00:10:26,020
we will select version 8 version 7.0 would have been enough in that case multi catch etc but which is
132

132

00:10:26,020  -->  00:10:31,530
using version 8 because you know this course is all
about Java 8 so giving an ok to that should remove
133

133

00:10:31,530  -->  00:10:36,890
that error and you can see the error is now gone so the code is a lot neater and finally block has been
134

134

00:10:36,890  -->  00:10:40,820
removed because of the good things with
this try with resources it introduced with
135

135

00:10:40,820  -->  00:10:46,660
Java 7 it automatically ensures that the
file writer stream is closed wether the code
136

136

00:10:46,660  -->  00:10:50,550
executes normally or an exception occurs which is pretty cool and especially in this
137

137

00:10:50,550  -->  00:10:55,890
case now when we are writing data it's
actually perfect for that so the documentation
138

138

00:10:55,890  -->  00:10:58,440
that I just called up has a section on
the differences in the way that
139

139

00:10:58,440  -->  00:11:03,120
exceptions can be thrown so it's worth
noting that this code does behave
140

140

00:11:03,120  -->  00:11:07,920
differently to the code we just tried out
previously the try finally version
141

141

00:11:07,920  -->  00:11:12,760
and the differences occur if an
exception is thrown when closing the
142

142

00:11:12,760  -->  00:11:15,290
stream in addition to an error in the
try block
143

143

00:11:15,290  -->  00:11:18,510
so in the try finally example it
would have been exception that was
144

144

00:11:18,510  -->  00:11:22,990
thrown by the close method that was
thrown up to stack but writing the code this
145

145

00:11:22,990  -->  00:11:26,470
way causes the exception to be
suppressed and the exception from the
146

146

00:11:26,470  -->  00:11:31,420
try block is the one that is thrown
back up the stack so that does make
147

147

00:11:31,420  -->  00:11:36,450
sense as it's very likely that you know
whatever problem occurred while opening or writing
148

148

00:11:36,450  -->  00:11:41,070
to the stream is probably more interest
than the error closing the stream so in
149

149

00:11:41,070  -->  00:11:44,750
fact the first error is probably the root
cause of the error when closing if you
150

150

00:11:44,750  -->  00:11:48,720
think about it so using try finally
the first error would be hidden by the
151

151

00:11:48,720  -->  00:11:52,860
exception when closing the stream
whereas this method ensures that the
152

152

00:11:52,860  -->  00:11:56,830
first error is the one being thrown back and that's
highly likely to be the error that you
153

153

00:11:56,830  -->  00:12:00,610
actually want to be working with so its a
subtle difference but definitely worth
154

154

00:12:00,610  -->  00:12:04,950
bearing in mind if you are converting
existing code to use try with resources
155

155

00:12:05,930  -->  00:12:09,160
so I'm gonna end the video here now in the next
video we are gonna run this version and just
156

156

00:12:09,160  -->  00:12:11,520
go through what we've done so we'll see
you in the next video
