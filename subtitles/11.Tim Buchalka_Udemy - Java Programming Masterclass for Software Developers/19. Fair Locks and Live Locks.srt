1
1

00:00:05,180  -->  00:00:09,020
so in this video we're going to use an
alternative to synchronize blocks
2

2

00:00:10,060  -->  00:00:15,260
we're going to use a fair lock now fair
locks try to be first come first served
3

3

00:00:15,260  -->  00:00:20,600
in a previous section in this course we
learned about using the re entrant lock
4

4

00:00:20,600  -->  00:00:23,210
class which implements the lock interface
5

5

00:00:23,210  -->  00:00:28,100
now they re-entrant lock implementation
allows us to create fair locks
6

6

00:00:28,100  -->  00:00:31,340
not all lock implementations do
that
7

7

00:00:31,340  -->  00:00:34,760
the interface doesn't dictate that locks
have to be fair
8

8

00:00:34,760  -->  00:00:38,230
so always make sure to read the
documentation for any lock
9

9

00:00:38,230  -->  00:00:42,710
implementation you want to use to see
what type of lock it is so let's
10

10

00:00:42,710  -->  00:00:47,960
actually change our examples so it uses a fair re-entrant lock object rather
11

11

00:00:47,960  -->  00:00:49,850
than a synchronized block
12

12

00:00:49,850  -->  00:00:53,800
so first we're going to uncomment the
code that sets the priorities so that
13

13

00:00:53,800  -->  00:00:59,420
becomes active again i'm going to change
the type of lock will use and will do
14

14

00:00:59,420  -->  00:01:05,620
that up here on on line 4 so i'm going
to set that to be instead of a static
15

15

00:01:05,620  -->  00:01:09,560
object we're gonna make a static
re-entrant lock
16

16

00:01:11,390  -->  00:01:18,740
it's going to be an equal to a new
re entrant lock with a parameter of true and
17

17

00:01:18,740  -->  00:01:21,860
the parameter for true is whether it's a
fair lock
18

18

00:01:21,860  -->  00:01:25,460
so first come first served or not so
true means that we are doing it that way
19

19

00:01:25,460  -->  00:01:30,430
we want it to be set up to be a first
come first served or to use a first-come
20

20

00:01:30,430  -->  00:01:36,740
first-served order now a few important
notes about using a fair re entrant lock only
21

21

00:01:36,740  -->  00:01:41,110
fairness in acquiring the lock is
guaranteed not fairness in threads
22

22

00:01:41,110  -->  00:01:44,990
scheduling so it's possible that the
thread that gets the lock will execute a
23

23

00:01:44,990  -->  00:01:47,110
task that takes a long time
24

24

00:01:47,110  -->  00:01:51,430
so when using fair locks it's possible
for threads to still have to wait a long
25

25

00:01:51,430  -->  00:01:56,750
time to run the only thing a fair lock
guarantees is the first come first
26

26

00:01:56,750  -->  00:01:59,450
served ordering for getting the lock
27

27

00:01:59,450  -->  00:02:04,880
secondly the try lock method doesn't
honor the fairness settings so it will not be
28

28

00:02:04,880  -->  00:02:06,500
first come first served
29

29

00:02:06,500  -->  00:02:09,500
and lastly when using fair locks with a
lot of threads
30

30

00:02:10,100  -->  00:02:13,870
keep in mind that performance will be
impacted to ensure fairness
31

31

00:02:14,450  -->  00:02:18,170
there has to be an extra layer of
processing that manages
32

32

00:02:18,170  -->  00:02:21,500
which thread gets the lock so that can
ultimately slow things down
33

33

00:02:22,160  -->  00:02:26,120
when there's a lot of threads competing
for that lock so with that in mind let's
34

34

00:02:26,120  -->  00:02:29,510
change our worker class to use the
re-entrant lock
35

35

00:02:30,260  -->  00:02:34,940
so what we need to do is we'll keep in
the basic run and the part we have to
36

36

00:02:34,940  -->  00:02:38,840
change is within the for loop down here
instead of synchronized lock
37

37

00:02:39,470  -->  00:02:44,390
what we're going to do is we're going to
put a try block but before that will
38

38

00:02:44,390  -->  00:02:52,400
put lock....
39

39

00:02:52,400  -->  00:02:56,660
....and if we had some
other code the execution of
40

40

00:02:56,660  -->  00:02:57,620
critical
41

41

00:02:57,620  -->  00:03:03,590
which I can't spell critical section of code is going to be in there as well and i will remove
42

42

00:03:03,590  -->  00:03:07,220
the synchronized code block because we
won't be using that what we do need to
43

43

00:03:07,220  -->  00:03:08,840
do is after the try
44

44

00:03:08,840  -->  00:03:14,060
we need to put a finally put a lock.unlock
45

45

00:03:14,690  -->  00:03:18,110
because no matter what happens we want
to make sure that the lock is released
46

46

00:03:18,110  -->  00:03:22,910
at the end so we have to use a try
finally block to guarantee that that unlock
47

47

00:03:22,910  -->  00:03:26,840
method is actually called so that we
can be sure that the lock will
48

48

00:03:26,840  -->  00:03:31,280
ultimately be released at some point so we just try running this now we should
49

49

00:03:31,280  -->  00:03:34,790
be able to see that the threads
will now interleave much more than they
50

50

00:03:34,790  -->  00:03:37,190
did before and you can notice the colors
right away
51

51

00:03:37,190  -->  00:03:40,570
that's completely different to what we
saw last time and you have a look now
52

52

00:03:40,570  -->  00:03:45,140
you can see that we're really getting
what is a far more fair result and
53

53

00:03:45,140  -->  00:03:49,280
notice also the priorities are actually
in order if we run this again
54

54

00:03:49,280  -->  00:03:54,230
we should get a far more consistent
approach a result rather than what we
55

55

00:03:54,230  -->  00:03:54,920
did last time
56

56

00:03:54,920  -->  00:03:58,940
occasionally they'll be a bit of a blip
where priority 10 doesn't sort of get
57

57

00:03:58,940  -->  00:04:03,530
there first time but you can see no
doubt looking at this that
58

58

00:04:03,530  -->  00:04:06,590
the threads are really interleaving much
more than they did before
59

59

00:04:07,250  -->  00:04:10,510
so in other words we no longer have a
starvation problem
60

60

00:04:10,510  -->  00:04:14,690
no thread has to twiddle his thumbs
waiting for another thread to count all
61

61

00:04:14,690  -->  00:04:15,950
the way to a hundred
62

62

00:04:15,950  -->  00:04:19,100
so you might be wondering at this point
why you'd want to use synchronized
63

63

00:04:19,100  -->  00:04:20,380
blocks in that case
64

64

00:04:20,380  -->  00:04:23,930
well this is when knowing what you want
to accomplish and knowing the
65

65

00:04:23,930  -->  00:04:29,060
application is very important now
if your application only uses say two or
66

66

00:04:29,060  -->  00:04:31,210
three threads or the task
67

67

00:04:31,210  -->  00:04:35,130
that you run each thread compete very
quickly or you know from the
68

68

00:04:35,130  -->  00:04:39,030
applications architecture that it will
be rare for more than one thread to be
69

69

00:04:39,030  -->  00:04:43,060
blocked on a lock at a time then
starvation may not actually be an issue
70

70

00:04:43,060  -->  00:04:48,880
for your code in that particular
application also since using fair locks
71

71

00:04:48,880  -->  00:04:50,590
can impact performance
72

72

00:04:50,590  -->  00:04:53,830
you might actually decide that
starvation will be the lesser of two
73

73

00:04:53,830  -->  00:04:54,630
evils
74

74

00:04:54,630  -->  00:04:58,630
so depending on the tasks that the
threads are performing it might actually
75

75

00:04:58,630  -->  00:05:01,930
not matter if a thread is waiting for
a long time
76

76

00:05:01,930  -->  00:05:06,520
for example you might have multiple
threads pulling data of the same queue
77

77

00:05:06,520  -->  00:05:10,330
and you don't actually care which
threads pull up the data as long as it's
78

78

00:05:10,330  -->  00:05:15,280
done quickly so in that situation using
synchronize blocks would be preferable
79

79

00:05:15,280  -->  00:05:20,130
alright so let's now move on to the next
potential problem we can encounter when
80

80

00:05:20,130  -->  00:05:25,720
working with threads live lock a live lock
is similar to a deadlock
81

81

00:05:26,400  -->  00:05:30,780
but instead of the threads been blocked
they're actually constantly active and
82

82

00:05:30,780  -->  00:05:34,440
usually waiting for all the other
threads to complete their tasks
83

83

00:05:34,440  -->  00:05:38,220
now since all the threads are
waiting for others to complete
84

84

00:05:38,220  -->  00:05:43,060
none of them can actually progress so
let's say that the thread a will loop
85

85

00:05:43,060  -->  00:05:48,430
until thread b complete its task and
thread b will loop until thread a
86

86

00:05:48,430  -->  00:05:53,740
complete its task thread a and thread b
can get into a state in which they're
87

87

00:05:53,740  -->  00:05:56,830
both looping and waiting for the other
to complete
88

88

00:05:57,460  -->  00:06:01,410
that's actually what's called a live
lock the threads will never progress but
89

89

00:06:01,410  -->  00:06:03,490
they're not actually blocked
90

90

00:06:03,490  -->  00:06:07,240
I think an example would suffice here to
make things a lot clearer
91

91

00:06:07,240  -->  00:06:12,340
we're going to start are creating a by
creating a new project
92

92

00:06:12,340  -->  00:06:14,560
and will call this one
93

93

00:06:14,560  -->  00:06:24,880
polite worker and as normal
94

94

00:06:24,880  -->  00:06:31,030
choose my command line up and now I'm going to type...and
95

95

00:06:31,030  -->  00:06:34,710
i'm going to use this window to close
this close the other one down because we
96

96

00:06:34,710  -->  00:06:35,680
don't need that anymore
97

97

00:06:35,680  -->  00:06:40,570
alright so we're going to create 2
worker threads that share a resource
98

98

00:06:40,570  -->  00:06:43,960
when they see that the other threads
active
99

99

00:06:43,960  -->  00:06:44,650
they're going to give the
100

100

00:06:44,650  -->  00:06:49,690
resource to the other thread and wait
for it to finish using that resource so
101

101

00:06:49,690  -->  00:06:52,750
we need to start by creating a
couple of classes
102

102

00:06:52,750  -->  00:07:00,610
the first one is going to be the shared
resource i'm going to create that that's
103

103

00:07:00,610  -->  00:07:04,180
going to be a new Java class and it's
going to be called shared resource
104

104

00:07:04,900  -->  00:07:11,880
this will be quite a simple class we're
going to have a private instance
105

105

00:07:11,880  -->  00:07:15,520
a private field for worker which we
haven't created that class yet will be doing
106

106

00:07:15,520  -->  00:07:19,630
that shortly so I won't accept that import
because we'll be creating the class
107

107

00:07:19,630  -->  00:07:21,940
called worker in this project
108

108

00:07:21,940  -->  00:07:26,560
actually what I might do just to save those
imports is create that now so file new
109

109

00:07:26,560  -->  00:07:32,590
Java class worker and let's put the
code in for that because it's going to be
110

110

00:07:32,590  -->  00:07:34,660
pretty straightforward
111

111

00:07:34,660  -->  00:07:38,470
so we need a private....
112

112

00:07:39,520  -->  00:07:47,020
....and the constructor
113

113

00:07:47,020  -->  00:07:54,030
should accept both those and we
want a getter for both
114

114

00:07:54,030  -->  00:08:00,820
so let's just do that as well and we
actually want our task
115

115

00:08:01,330  -->  00:08:04,470
we're going to synchronize that we're
going to call that task work so it's
116

116

00:08:04,470  -->  00:08:12,150
going to be public.....and that's going to accept a shared
117

117

00:08:12,150  -->  00:08:17,880
resource as well as a worker object.....
118

118

00:08:18,400  -->  00:08:27,520
and the code is going to be while......
119

119

00:08:27,520  -->  00:08:31,300
we haven't created that method yet so
we'll get an error
120

120

00:08:31,300  -->  00:08:39,940
....
121

121

00:08:41,970  -->  00:08:45,190
which you won't bother putting any code in
there for now and then we'll put a
122

122

00:08:45,190  -->  00:08:48,190
continue in their and still within the
while loop
123

123

00:08:48,880  -->  00:08:52,990
we're going to put if...and I'll make a
space down here so we can see what we're doing
124

124

00:08:53,500  -->  00:09:01,510
.....
125

125

00:09:04,870  -->  00:09:18,010
....
126

126

00:09:18,010  -->  00:09:24,270
....and then we going to
do shared resource....
127

127

00:09:24,270  -->  00:09:31,810
....and then we'll do a continue....
128

128

00:09:31,810  -->  00:09:33,940
gets down to here we're going to do a print
out
129

129

00:09:33,940  -->  00:09:45,250
of.....
130

130

00:09:45,850  -->  00:09:52,300
....
131

131

00:09:52,300  -->  00:09:57,910
alright so lets just swing over now to shared resource and write the
132

132

00:09:57,910  -->  00:10:01,990
rest of the code for that then we can
sort of go through what this is all doing so
133

133

00:10:01,990  -->  00:10:08,680
we need a constructor and the
constructor is going to accept a
134

134

00:10:08,680  -->  00:10:09,850
worker object
135

135

00:10:09,850  -->  00:10:13,540
we're going to set that and we
want a getter
136

136

00:10:13,540  -->  00:10:17,290
we want a getter and setter actually
so getter and setter
137

137

00:10:19,510  -->  00:10:23,310
so we got our get owner which returns the
owner and a set owner which actually
138

138

00:10:23,310  -->  00:10:26,800
sets the owner to what has been passed
to that method and that should now
139

139

00:10:26,800  -->  00:10:32,940
fixed up our compile errors in worker.java as you can see now the only other
140

140

00:10:32,940  -->  00:10:35,520
thing we want to do here for set owner
is we want to make sure that its a
141

141

00:10:35,520  -->  00:10:40,810
synchronized method so synchronized we
don't need to do that for getter but
142

142

00:10:40,810  -->  00:10:45,610
because we're changing some data we want
that the set owner method to be
143

143

00:10:45,610  -->  00:10:46,540
synchronized
144

144

00:10:46,540  -->  00:10:50,410
basically we don't want any thread
interference when we are setting which
145

145

00:10:50,410  -->  00:10:52,490
thread is currently using the resource
146

146

00:10:52,490  -->  00:10:57,020
so now to the worker class this is also fairly
147

147

00:10:57,020  -->  00:11:01,670
straightforward the interesting bit here
is the work method so the threads going
148

148

00:11:01,670  -->  00:11:06,170
to check to see whether it owns the
shared resource if it doesn't it's gonna
149

149

00:11:06,170  -->  00:11:10,450
wait for 10 milliseconds loop back and
try again and that's what this code here
150

150

00:11:10,450  -->  00:11:16,670
does from lines of 27 through 33 so this is
waiting to see whether it's acquired the
151

151

00:11:16,670  -->  00:11:20,830
resource and whether it basically whether
it owns the shared resource now when the
152

152

00:11:20,830  -->  00:11:25,550
condition evaluates to true meaning that
it owns the shared resource it then
153

153

00:11:25,550  -->  00:11:29,660
checks to see whether the other threads
active you can see that on line 36
154

154

00:11:29,660  -->  00:11:35,810
if it is its going to politely give the
shared resource to the other thread then
155

155

00:11:35,810  -->  00:11:38,450
return back to the beginning of the loop
156

156

00:11:38,450  -->  00:11:41,870
now if the other thread is an
active it  will actually use the shared
157

157

00:11:41,870  -->  00:11:44,660
resource and then loop back to the
beginning again
158

158

00:11:44,660  -->  00:11:49,130
so really the only time this thread will
complete a loop iteration is when it
159

159

00:11:49,130  -->  00:11:52,880
owns a shared resource and the other
thread isn't active
160

160

00:11:52,880  -->  00:11:58,670
alright so let's now add the code for
the main method for their what we're
161

161

00:11:58,670  -->  00:12:00,770
going to do is create a couple of
objects
162

162

00:12:00,770  -->  00:12:09,580
so.....
163

163

00:12:09,580  -->  00:12:17,450
......and if you
remember going back to our worker object
164

164

00:12:17,450  -->  00:12:19,550
true was whether it's active or not
165

165

00:12:19,550  -->  00:12:28,160
and first parameter is the actual name.....
166

166

00:12:28,160  -->  00:12:32,080
.....and we'll call that one worker
2 and also set that to active
167

167

00:12:36,520  -->  00:12:41,810
ok worker two and what I might do this video
is getting a little bit long so I will
168

168

00:12:41,810  -->  00:12:45,880
pause the video here or stop the video
here in the next video will continue on
169

169

00:12:45,880  -->  00:12:49,120
we'll finish off the rest of the main
method and start running this and
170

170

00:12:49,120  -->  00:12:52,550
looking at some of the issues that will
come up i'll see you in the next video
