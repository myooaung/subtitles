WEBVTT
1
1

00:00:05.170  -->  00:00:10.590
so what we need to do in this video is
we need to go back to our main class
2

2

00:00:10.590  -->  00:00:15.970
main.java we need to just adjust the main
method a little bit to clean up some
3

3

00:00:15.970  -->  00:00:19.320
things and then we need to go through
and obviously test this challenge because we
4

4

00:00:19.320  -->  00:00:23.420
typed a lot of code in we now want to run
it and make sure that it all works as it
5

5

00:00:23.420  -->  00:00:28.480
should be working so we finished off in
the last video just starting to talk
6

6

00:00:28.480  -->  00:00:33.410
about that so I am at main.java now and scroll down and start
7

7

00:00:33.410  -->  00:00:39.030
we need to start looking at code starting from line 47 I will put that on the screen
8

8

00:00:39.030  -->  00:00:43.760
there and lets just adjust this a little bit
so that we can actually go through and
9

9

00:00:43.760  -->  00:00:48.670
fix this and have the right output and add a new basket etc and just sort
10

10

00:00:48.670  -->  00:00:53.670
of test everything else out so make a space their ok that first one can stay in
11

11

00:00:53.670  -->  00:00:59.440
there then we got through a second car and we print out again so that is ok and we still doing
12

12

00:00:59.440  -->  00:01:02.900
a test to see whether there's no
more cars in stock that's ok the spanner
13

13

00:01:02.900  -->  00:01:08.250
we're testing a product that
doesn't exist so that should work but
14

14

00:01:08.250  -->  00:01:12.600
there isn't any point putting a basket out
in that case because obviously the inventory
15

15

00:01:12.600  -->  00:01:17.420
count isn't adjusted because the product
doesn't exist so comment it out we don't
16

16

00:01:17.420  -->  00:01:23.360
need that the 3 lines there the juice
the cup and the bread they can stay in their and I might
17

17

00:01:23.360  -->  00:01:25.710
just comment that out that basket as
18

18

00:01:25.710  -->  00:01:30.590
well there are also comment out that
stock list which we don't probably need
19

19

00:01:30.590  -->  00:01:43.490
right their so let's add a new basket here now
so put.....
20

20

00:01:43.490  -->  00:01:48.310
it is our second basket we really had Tim's
basket defined and will add some items their so....
21

21

00:01:48.310  -->  00:02:18.390
.....
22

22

00:02:18.390  -->  00:02:23.870
....lets also then removes some items to
23

23

00:02:23.870  -->  00:02:28.780
test that is working so.......
24

24

00:02:34.120  -->  00:02:46.420
.....
25

25

00:02:46.420  -->  00:02:55.470
...and with the code line
72 let's actually change that lets try
26

26

00:02:55.470  -->  00:02:57.730
and remove something from the basket as well so....
27

27

00:02:57.730  -->  00:03:05.860
......so basically we are going to be
28

28

00:03:05.860  -->  00:03:08.620
testing to see that the quantities are
actually working adding an item and
29

29

00:03:08.620  -->  00:03:13.130
then removing it to see if that that works
ok so we remove those three items and
30

30

00:03:13.130  -->  00:03:23.750
print out down here will do something like....
31

31

00:03:23.750  -->  00:03:25.940
......
32

32

00:03:25.940  -->  00:03:38.900
.....and that shouldn't
actually work os it should not remove any at that point alright let's
33

33

00:03:38.900  -->  00:03:46.070
print out tim's basket again.......ok
let's actually removed the items now from
34

34

00:03:46.070  -->  00:03:52.190
tim's baskets so do....
35

35

00:03:52.190  -->  00:03:59.730
...we will remove everything so it should end up being
having nothing in it...so we would do that
36

36

00:03:59.730  -->  00:04:02.730
for all of so I'm gonna copy and
paste
37

37

00:04:03.600  -->  00:04:11.170
....and will do the same for cup juice
and also bread which I've already done so
38

38

00:04:11.170  -->  00:04:20.560
the second bread we removed one cup lets removed 3 this should take it if my calculations are correct
39

39

00:04:20.560  -->  00:04:32.070
to 0 cup juice to 4 and cup again will do a second one.... take that three of that that
40

40

00:04:32.070  -->  00:04:40.100
should be zero so again what we doing
here is.....
41

41

00:04:40.100  -->  00:04:51.140
....and let's print out the basket to confirm
its empty which it should be if I've done to my
42

42

00:04:51.140  -->  00:04:55.400
calculations correct and lets display the
stock list before and after checkout
43

43

00:04:55.400  -->  00:05:04.490
so......
44

44

00:05:04.490  -->  00:05:14.340
....okay then we'll print out the basket because the
45

45

00:05:14.340  -->  00:05:23.040
basket is the one we are using for our checkout then will also print out the stocklist will also then
46

46

00:05:23.040  -->  00:05:26.690
check out cause you remember we write the
check out function which takes it out of
47

47

00:05:26.690  -->  00:05:31.520
shopping basket and takes it and sorts of updates the quantity so.....
48

48

00:05:31.520  -->  00:05:32.200
.....
49

49

00:05:32.200  -->  00:05:38.270
....then we'll print out the basket which should be empty again and then we print our
50

50

00:05:38.270  -->  00:05:45.770
stock lists that should hopefully be
correct ok that should all we need to do I think and
51

51

00:05:45.770  -->  00:05:51.350
lets clean up some of this code down the bottom as well so what we got down here we
52

52

00:05:51.350  -->  00:05:55.330
can probably leave it in there this for loop
we can probably take that out becaus that's
53

53

00:05:55.330  -->  00:05:59.480
just going to muddy the waters a little
bit we don't really need that anymore so lets just
54

54

00:05:59.480  -->  00:06:06.240
take that our comment that out and lastly down here in the bottom lets do a checkout
55

55

00:06:06.240  -->  00:06:12.740
for Tim's basket which again was empty
so nothing should happen and will print
56

56

00:06:12.740  -->  00:06:14.360
out tim's basket
57

57

00:06:14.360  -->  00:06:19.620
ok so let's first is run this to see
whether it works and we'll take it from
58

58

00:06:19.620  -->  00:06:34.510
there so we will run this ok so lets look at the output ok so we got a stock list that we will ignore
59

59

00:06:34.510  -->  00:06:37.660
we'll have a look at the shopping
basket items Tim contains one item that
60

60

00:06:37.660  -->  00:06:41.500
our first shopping list I'm gonna move that over a
little bit so we can see the code
61

61

00:06:41.500  -->  00:06:45.420
then we can roughly sort of follow along
with the code so we created a new
62

62

00:06:45.420  -->  00:06:52.670
basket tim's basket and added a car to it so
reserved one the purchased one then we added
63

63

00:06:52.670  -->  00:06:59.340
another car so reserved 2 purchase
2 that's correct so far the spanner
64

64

00:06:59.340  -->  00:07:04.070
we got another option here there are no
more cars stocks so that's working this one here
65

65

00:07:04.070  -->  00:07:07.960
we don't sell spenders so that's good we
didn't do another print of the basket their and
66

66

00:07:07.960  -->  00:07:09.110
that's correct
67

67

00:07:09.110  -->  00:07:15.690
ok then we added juice cup and bread juice
cup and bread which is correct we haven't
68

68

00:07:15.690  -->  00:07:20.240
gotten an output their so that's the output in case your wondering why that is a 111 we didn't actually
69

69

00:07:20.240  -->  00:07:22.740
printed out that point so moving on down
70

70

00:07:22.740  -->  00:07:28.870
we have now sold another hundred cups then we
removed a cup so that's a hundred take
71

71

00:07:28.870  -->  00:07:33.970
one is 99 + the 12 allocated from the other
basket so that's a hundred and eleven
72

72

00:07:33.970  -->  00:07:36.880
so why we got a 111 reserved
73

73

00:07:36.880  -->  00:07:41.220
overall that's reserved for all baskets
but a 101 purchase that's actually
74

74

00:07:41.220  -->  00:07:47.700
interesting that on their 101 purchased i think
is wrong because what that should have
75

75

00:07:47.700  -->  00:07:52.690
been was a hundred actually what that should have been is 99 because there was a hundred this is one
76

76

00:07:52.690  -->  00:07:57.780
I'm looking on line 70 here sell
item basket cup a hundred that
77

77

00:07:57.780  -->  00:07:59.080
allocating a hundred
78

78

00:07:59.080  -->  00:08:05.540
and we removed an item which should have taken it down to 99 so it is a 101 so that seems to be
79

79

00:08:05.540  -->  00:08:11.840
a bug their so let's just check that out that's probably
or its remove item I'm guessing that could be
80

80

00:08:11.840  -->  00:08:15.170
that's where I would look first to see if
there's a problem on that's and that been basket
81

81

00:08:15.170  -->  00:08:18.810
lets have a look at that add to basket
82

82

00:08:19.550  -->  00:08:22.200
and remove from basket
83

83

00:08:22.200  -->  00:08:26.700
and yes that's the problem on line 32 if
your recall I actually copied pasted add
84

84

00:08:26.700  -->  00:08:31.500
to basket to make remove from basket
at least I think I did and what I've done I've added the
85

85

00:08:31.500  -->  00:08:36.240
quantity so obviously if removing an item
form a basket we should be taking
86

86

00:08:36.240  -->  00:08:39.460
the quantity what's in there and
deducting the quantity because we're
87

87

00:08:39.460  -->  00:08:44.020
actually removing items so that should
have been minus so that's a bug that I introduced
88

88

00:08:44.020  -->  00:08:49.860
when I was typing that in so I would think that
would fix it so let's just run again to get
89

89

00:08:49.860  -->  00:08:58.190
were up to before then continue ok their we got you can see now
90

90

00:08:58.190  -->  00:09:04.360
if you look at the output so we down to
basically this part here now the cup so where
91

91

00:09:04.360  -->  00:09:08.400
we had a hundred and one before we have now correctly got 99 purchase so it is
92

92

00:09:08.400  -->  00:09:13.260
deducting their now so that is good ok cars
removed we got that indication their cars
93

93

00:09:13.260  -->  00:09:18.140
removed remove item tim's basket shouldn't work shouldn't remove any and the
94

94

00:09:18.140  -->  00:09:21.430
reason why the third one didn't work was
of course we've removed an item on
95

95

00:09:21.430  -->  00:09:26.060
line 75 that deducted or reduced the
quantity down to 1 the on line 77
96

96

00:09:26.060  -->  00:09:31.710
now we remove it to 0 so just doing another testing on line 78 which shouldn't work because we
97

97

00:09:31.710  -->  00:09:35.350
haven't got any any left in the basket to remove and that's why we correctly got that
98

98

00:09:35.350  -->  00:09:40.740
message up here to say cars removed 0 so
that's also working then we printed
99

99

00:09:40.740  -->  00:09:45.480
out Tim's basket again here below that so
we've got three items bread now a
100

100

00:09:45.480  -->  00:09:49.780
reserve 1 and 1 purchase reserved a 102 cups remembering that's the total
101

101

00:09:49.780  -->  00:09:54.340
count of cups for all customers and three
of them have actually been purchased
102

102

00:09:54.340  -->  00:10:03.550
and I'll look again to make sure that's correct so the Shopping Basket Tim we've allocated bread again just going back up
103

103

00:10:03.550  -->  00:10:10.550
to the top here we have bread 1
cups 12 so we're starting off with 12
104

104

00:10:10.550  -->  00:10:14.870
cups we have added a hundred here so
that's a hundred and twelve so looking
105

105

00:10:14.870  -->  00:10:19.960
at cups for customers just to make sure that
the cups count is correct their should
106

106

00:10:19.960  -->  00:10:25.300
be 99 purchased for shopping for
customer cups or when I say purchased ones
107

107

00:10:25.300  -->  00:10:28.300
that are actually in the item ok so here we are now we are at the
108

108

00:10:28.830  -->  00:10:32.980
stage now where we wanted to confirm that
our counts are right so bread
109

109

00:10:32.980  -->  00:10:38.870
reserved 1 purchase 1 for Tim so  we saw above that that
that was correct so you can see their
110

110

00:10:38.870  -->  00:10:44.890
Tim's basket we added one  to it tim's basket also
had 12 cups and then we actually down
111

111

00:10:44.890  -->  00:10:48.980
here we actually removed 9 cups
so that should leave 3 you can see
112

112

00:10:48.980  -->  00:10:51.180
cups 3 have been purchased
113

113

00:10:51.180  -->  00:10:55.770
reserved should still be hundred and two and the
calculations for that for the cups is basically
114

114

00:10:55.770  -->  00:10:59.880
if you go through and type this up manually we got 12 that was started with
115

115

00:10:59.880  -->  00:11:06.470
another hundred that have been allocated so that's a hundred and twelve removed an items that is a 111 and we
116

116

00:11:06.470  -->  00:11:10.070
removed 9 which would leave a 102 so we got amongst the two shopping baskets a
117

117

00:11:10.070  -->  00:11:15.220
102 and the other ones look to
be ok as well and shopping basket Tim
118

118

00:11:15.220  -->  00:11:20.830
where we removed all the items from tim's basket this is right down here and we removed
119

119

00:11:20.830  -->  00:11:24.890
the rest of the items because we had three left
of the cup and the other items there and
120

120

00:11:24.890  -->  00:11:28.070
the second remove I've added in well that shouldn't work obviously because
121

121

00:11:28.070  -->  00:11:34.740
the 3 took the 0 anyway and we print out tim's basket
shopping basket tim contains 0 items so
122

122

00:11:34.740  -->  00:11:35.950
there's nothing left
123

123

00:11:35.950  -->  00:11:40.370
basically we've removed all the items and looking at the final display in the stock list
124

124

00:11:40.370  -->  00:11:44.490
we got a Shopping Basket customer
contains two items have now got the
125

125

00:11:44.490  -->  00:11:49.850
99 that they have allocated for cup and juice they did 5 so go back and
126

126

00:11:49.850  -->  00:11:54.450
confirm that was 5 juice was 5 as you can see
there and obviously this transaction
127

127

00:11:54.450  -->  00:11:57.490
deducted from cups so we really have 2 items in that basket
128

128

00:11:58.490  -->  00:12:03.260
that's correct looking down at the stock
lists now with our final print out
129

129

00:12:03.260  -->  00:12:09.570
we got this before hand we got cup we got a 108 stock and we know we are about to reduce that
130

130

00:12:09.570  -->  00:12:12.570
by 99
131

131

00:12:13.710  -->  00:12:20.230
ok so looking at this we just scroll down again so
basically we've got to this last part now
132

132

00:12:20.230  -->  00:12:25.190
this displaying stock list and that
should be correct because if you recall with I am just looking at
133

133

00:12:25.190  -->  00:12:32.260
the cup 99 reserved and 108 in stock which is the
available count because we started
134

134

00:12:32.260  -->  00:12:36.470
off with cup up here at the top with 217 in stock so
135

135

00:12:36.470  -->  00:12:42.530
consequently what we looking for now in this final checkout is....
136

136

00:12:42.530  -->  00:12:47.540
that one so we've got basically cup
99 reserved a 108 in
137

137

00:12:47.540  -->  00:12:52.840
stock and the check out basically
removed them from reserved and the in stock
138

138

00:12:52.840  -->  00:12:56.300
doesn't change that is still a 108 because that is how many that are actually
139

139

00:12:56.300  -->  00:13:00.990
available for sale from other customers
effectively so that's correct at this
140

140

00:13:00.990  -->  00:13:04.670
point we are good to go we've
actually done pretty well
141

141

00:13:04.670  -->  00:13:09.940
full test here and juice had the same scenario
where 5 is reserved and 31 in stock is now reserved
142

142

00:13:09.940  -->  00:13:15.420
to 31 in stock so again we deducted it from
the inventory at the time it was reserved
143

143

00:13:15.420  -->  00:13:20.020
so we don't need to deducted it again at
that point so at this point the solution
144

144

00:13:20.020  -->  00:13:24.970
seems to work part fine so items can be added too or
removed from the shopping baskets and the
145

145

00:13:24.970  -->  00:13:29.110
stock levels correctly reflect this
activity now checking out a basket
146

146

00:13:29.110  -->  00:13:34.000
updates the stock level by removing it
from the Reserve count as we saw and any
147

147

00:13:34.000  -->  00:13:38.190
attempt to add or remove qualities that are
not available are actually handled correctly as you
148

148

00:13:38.190  -->  00:13:42.690
saw in this little run through so that
components working fine what we haven't
149

149

00:13:42.690  -->  00:13:46.680
done we haven't really tested some of
the boundary conditions such as how the
150

150

00:13:46.680  -->  00:13:50.940
program behaves before any items are
added to the stock list now the main
151

151

00:13:50.940  -->  00:13:55.940
functionality of the program works fine
if we did that but we'll actually get a
152

152

00:13:55.940  -->  00:14:00.230
error down here on lines 98 to 99 where we attempt to
153

153

00:14:00.230  -->  00:14:04.030
adjust the stock cars but where we actually
haven't got any stock of it that's because
154

154

00:14:04.030  -->  00:14:08.190
we've failed to test the return value of
the GET method to ensure that we do have
155

155

00:14:08.190  -->  00:14:13.120
a valid item object before calling its adjust stock so obviously you can see its a stock list.items
156

156

00:14:13.120  -->  00:14:16.730
.getcar.AdjustStock so
157

157

00:14:16.730  -->  00:14:20.120
if that returns null that's obviously going to
cause an error so we can actually show
158

158

00:14:20.120  -->  00:14:26.470
that or simulate that error by just
briefly commenting out all these additions
159

159

00:14:26.470  -->  00:14:31.450
so that we haven't got any stock you
will find that we actually will get an error
160

160

00:14:31.450  -->  00:14:42.450
so I'm going to comment that out and run it again we notice we do get the error on line 98 and
161

161

00:14:42.450  -->  00:14:48.230
and again line 98 is
because we tried to adjust this without
162

162

00:14:48.230  -->  00:14:52.830
determining whether it's null or not so what we
should really do there is you would
163

163

00:14:52.830  -->  00:15:00.950
actually do a proper tests so we would put
something like....
164

164

00:15:00.950  -->  00:15:39.880
.....
165

165

00:15:39.880  -->  00:15:42.880
...so that should prevent any errors
166

166

00:15:44.320  -->  00:15:49.800
....you can see now we don't get any error because obviously we don't get any processing because we've taken all these
167

167

00:15:49.800  -->  00:15:55.250
things out so they haven't got stock for those items
but the main point here is that we're
168

168

00:15:55.250  -->  00:16:00.100
now testing boundary conditions and
preventing errors if we haven't got the stock
169

169

00:16:00.100  -->  00:16:03.040
so that's a good thing to do in your
programs to check things like this
170

170

00:16:03.040  -->  00:16:08.120
obviously we were running it with inventory
but without actually having any inventory in their to make
171

171

00:16:08.120  -->  00:16:12.690
sure for you to be doing some tests to
make sure that that is still going to work so I
172

172

00:16:12.690  -->  00:16:15.510
just put those back in again now so to confirm it is gonna work which is
173

173

00:16:15.510  -->  00:16:26.050
their is no reason it won't but we will do that anyway so make sure our code is still working we got a correct
174

174

00:16:26.050  -->  00:16:33.460
results back again now so closing that down that is good but I just wanna go back to stock item and their is
175

175

00:16:33.460  -->  00:16:37.900
2 warnings here firstly stock item you can see the constructor that takes the
176

176

00:16:37.900  -->  00:16:43.080
double stock item name isn't being used but we did discuss how this
177

177

00:16:43.080  -->  00:16:45.960
could be useful so for that reason we would
leave it in there for sort of future
178

178

00:16:45.960  -->  00:16:49.610
purposes so it could be useful in that scenario to call that we didn't want to
179

179

00:16:49.610  -->  00:16:55.570
actually passed the initial quantity in stock if there is no quantity in stock and also the
180

180

00:16:55.570  -->  00:17:02.370
other warning is that set price doubles
on line 36 isn't used so changing the
181

181

00:17:02.370  -->  00:17:06.850
price items is a very crude operation that
as our example stands it is not something we
182

182

00:17:06.850  -->  00:17:10.070
need it so we should probably consider
removing so as a general rule
183

183

00:17:10.070  -->  00:17:15.390
with getters and setters the advice would
be don't add them unless your going to
184

184

00:17:15.390  -->  00:17:18.970
use them so that's probably something you
would probably want to remove in your
185

185

00:17:18.970  -->  00:17:24.780
program and if the situation came up if your wanting to set the price other than the
186

186

00:17:24.780  -->  00:17:29.160
constructor then you would add it back
again and just before I finish off stock list
187

187

00:17:29.160  -->  00:17:34.390
you can see it's got one warning here it is saying price list method isn't used
188

188

00:17:34.390  -->  00:17:38.190
we did use it if you remember when we
commented out the call to remove clutter from
189

189

00:17:38.190  -->  00:17:42.530
the outputs so we only included it to demonstrate
running or returning rather a list of
190

190

00:17:42.530  -->  00:17:47.110
items in a way that wouldn't compromise the
stock list class though so again that one should
191

191

00:17:47.110  -->  00:17:48.940
probably be removed
192

192

00:17:48.940  -->  00:17:52.920
and basket we haven't got any warnings there
193

193

00:17:52.920  -->  00:17:58.560
and that's actually it so our challenge is completed
and that is the end of the challenge and also the
194

194

00:17:58.560  -->  00:18:02.180
end of this section on the Java
Collections Framework I'll see you in the
195

195

00:18:02.180  -->  00:18:03.820
next section cheers for now
