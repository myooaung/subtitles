1
1

00:00:04,980  -->  00:00:07,220
- [Tutor] Alright, so let's
move on to the next topic now
2

2

00:00:07,220  -->  00:00:10,960
and that's using a FileChannel
to copy one file to another.
3

3

00:00:10,960  -->  00:00:13,230
So we're gonna try and
copy the data.dat file
4

4

00:00:13,230  -->  00:00:15,010
that we've been reading and writing
5

5

00:00:15,010  -->  00:00:17,260
to a file called datacopy.dat.
6

6

00:00:17,260  -->  00:00:20,470
So to do so, we're gonna use
a method called transferFrom,
7

7

00:00:20,470  -->  00:00:22,900
which is from the FileChannel class.
8

8

00:00:22,900  -->  00:00:25,400
So I'm at the code that
I'm about to go through
9

9

00:00:25,400  -->  00:00:27,250
after the code that
reads the three integers
10

10

00:00:27,250  -->  00:00:28,720
in reverse order.
11

11

00:00:28,720  -->  00:00:33,030
So looking up here, we've
got the three integers
12

12

00:00:33,030  -->  00:00:36,790
and I'm gonna put the
code there, right after
13

13

00:00:36,790  -->  00:00:39,730
that last call, that
retrieves the first integer,
14

14

00:00:39,730  -->  00:00:43,380
first of the three
backwards in reverse order,
15

15

00:00:43,380  -->  00:00:47,550
so we're going to create
a RandomAccessFile class.
16

16

00:00:48,480  -->  00:00:52,650
We're gonna call this one
copyFile = new RandomAccessFile
17

17

00:00:54,780  -->  00:00:57,550
and we're gonna call this one datacopy.dat
18

18

00:00:57,550  -->  00:00:59,800
and rw is gonna be the mode
19

19

00:01:05,480  -->  00:01:08,930
and we're gonna do a FileChannel,
20

20

00:01:08,930  -->  00:01:12,100
CopyChannel = CopyFile.getchannel
21

21

00:01:14,650  -->  00:01:18,820
and then we're gonna put long
numTransferred = copyChannel.
22

22

00:01:22,840  -->  00:01:25,410
This is the transferFrom method,
23

23

00:01:25,410  -->  00:01:28,490
then we pass channel, 0, channel.size
24

24

00:01:33,980  -->  00:01:36,250
and then we can print out a message
25

25

00:01:36,250  -->  00:01:39,830
to put numTransferred = numTransferred
26

26

00:01:46,910  -->  00:01:49,320
and actually what we'll do is
27

27

00:01:50,530  -->  00:01:53,130
put some closed commands
here, so we're gonna put
28

28

00:01:53,130  -->  00:01:55,050
channel.close, ra.close
29

29

00:01:58,230  -->  00:02:00,390
and also copyChannel.close
30

30

00:02:01,690  -->  00:02:03,730
and we'll just comment
out that rest of the code,
31

31

00:02:03,730  -->  00:02:07,740
that we were working on
in the previous video.
32

32

00:02:07,740  -->  00:02:10,600
Alright, so you can see
that when we're using
33

33

00:02:10,600  -->  00:02:13,310
the transferFrom method on line 75,
34

34

00:02:13,310  -->  00:02:14,840
we pass the source channel,
35

35

00:02:14,840  -->  00:02:17,060
that's the one we're copying from
36

36

00:02:17,060  -->  00:02:19,210
and you can see channel is the source,
37

37

00:02:19,210  -->  00:02:21,980
which is being defined on line 74
38

38

00:02:21,980  -->  00:02:25,190
and spaced on the filename datacopy.dat,
39

39

00:02:25,190  -->  00:02:29,580
which we've acrowded around
a file access for in line 73.
40

40

00:02:29,580  -->  00:02:32,220
Now we also need to specify
the number of bytes,
41

41

00:02:32,220  -->  00:02:35,260
that we wanna copy, so here
we've chosen the start,
42

42

00:02:35,260  -->  00:02:37,330
which is zero and channel.size
43

43

00:02:37,330  -->  00:02:40,640
to get the complete number of
bytes, that are in that file
44

44

00:02:40,640  -->  00:02:42,330
and notice that I'm calling the method
45

45

00:02:42,330  -->  00:02:44,190
using the destination channel,
46

46

00:02:44,190  -->  00:02:48,020
so obviously datacopy.dat,
which is our RandomAccessFile
47

47

00:02:48,020  -->  00:02:51,310
and then the copyChannel,
that's based from that,
48

48

00:02:51,310  -->  00:02:53,830
a channel has been created from that,
49

49

00:02:53,830  -->  00:02:56,020
so that's our destination,
so we're calling
50

50

00:02:56,020  -->  00:02:59,090
the transferFrom on
that destination channel
51

51

00:02:59,090  -->  00:03:03,100
and we're using a
channel.size here on line 75
52

52

00:03:03,100  -->  00:03:05,650
to get the number of bytes to copy.
53

53

00:03:05,650  -->  00:03:08,200
And the transferFrom
method, as you can see there
54

54

00:03:08,200  -->  00:03:11,700
is storing the number of transferred,
55

55

00:03:11,700  -->  00:03:13,350
or returning the number
of bytes transferred,
56

56

00:03:13,350  -->  00:03:17,180
and we're saving that
numTransferred variable
57

57

00:03:17,180  -->  00:03:20,360
and then printing that out on line 76.
58

58

00:03:20,360  -->  00:03:24,530
So, let's just try running
it and see what happens.
59

59

00:03:26,820  -->  00:03:28,640
Alright, number of bytes
transferred equals 24.
60

60

00:03:28,640  -->  00:03:32,000
We've got datacopy.dat,
let's have a look at it
61

61

00:03:32,000  -->  00:03:33,420
and something weird went wrong.
62

62

00:03:33,420  -->  00:03:35,780
So obviously something went wrong there.
63

63

00:03:35,780  -->  00:03:38,090
What is the problem here?
64

64

00:03:38,090  -->  00:03:39,360
Well, from the source channel,
65

65

00:03:39,360  -->  00:03:41,710
we're using the same channel
we used to read the integers
66

66

00:03:41,710  -->  00:03:42,540
in reverse order,
67

67

00:03:42,540  -->  00:03:45,910
so we'll go back and have a look.
68

68

00:03:45,910  -->  00:03:49,310
We're using it here on line 75.
69

69

00:03:49,310  -->  00:03:51,670
Now the position you pass
to the transfer method
70

70

00:03:51,670  -->  00:03:53,500
isn't an absolute position,
71

71

00:03:53,500  -->  00:03:56,040
it's actually a relative position,
72

72

00:03:56,040  -->  00:03:58,500
so in this case, the channel's
position is currently set
73

73

00:03:58,500  -->  00:04:01,710
to one byte after the last
integer you've actually read.
74

74

00:04:01,710  -->  00:04:03,380
If you wanna copy the file standing
75

75

00:04:03,380  -->  00:04:05,940
at absolute position
zero, then you need to set
76

76

00:04:05,940  -->  00:04:09,900
the file position before
calling the transferFrom method,
77

77

00:04:09,900  -->  00:04:12,900
so what we'll do is before that line
78

78

00:04:13,820  -->  00:04:15,650
that does the transfer
from from our course,
79

79

00:04:15,650  -->  00:04:17,200
the transferFrom method,
80

80

00:04:17,200  -->  00:04:20,230
we're gonna put channel, channel.position.
81

81

00:04:20,230  -->  00:04:22,350
We're gonna set that to zero.
82

82

00:04:22,350  -->  00:04:24,600
And now if we run it again,
83

83

00:04:27,230  -->  00:04:29,910
number of bytes
transferred this time is 40
84

84

00:04:29,910  -->  00:04:31,230
and if we have a look there now,
85

85

00:04:31,230  -->  00:04:33,860
that's much like we would expect it to be,
86

86

00:04:33,860  -->  00:04:38,020
which is pretty well a mirror
copy of our data.net file now.
87

87

00:04:39,230  -->  00:04:41,610
So that's demonstrating that
when working with methods
88

88

00:04:41,610  -->  00:04:44,670
that accept channel and buffer
positions as parameters,
89

89

00:04:44,670  -->  00:04:46,760
you have to actually be careful to read
90

90

00:04:46,760  -->  00:04:50,170
the methods documentation to
see if it uses the position
91

91

00:04:50,170  -->  00:04:53,460
as an absolute value, or a relative value.
92

92

00:04:53,460  -->  00:04:55,000
So in this particular case,
93

93

00:04:55,000  -->  00:04:57,980
the transferFrom method
is using a relative value,
94

94

00:04:57,980  -->  00:05:00,240
which means whatever you pass is treated
95

95

00:05:00,240  -->  00:05:03,350
as an index relative to
the current position.
96

96

00:05:03,350  -->  00:05:05,640
And note also, there's
a transferTo method,
97

97

00:05:05,640  -->  00:05:08,400
that does exactly the same
thing as transferFrom,
98

98

00:05:08,400  -->  00:05:10,930
except you call it using
the source channel,
99

99

00:05:10,930  -->  00:05:13,530
rather than the destination channel.
100

100

00:05:13,530  -->  00:05:16,020
So let's actually change the
code to use that instead.
101

101

00:05:16,020  -->  00:05:18,690
So the difference here would
be instead of this line there,
102

102

00:05:18,690  -->  00:05:21,740
which I'm gonna comment out,
103

103

00:05:21,740  -->  00:05:25,220
we would do long numTransferred =
104

104

00:05:25,220  -->  00:05:28,550
this time we'll do channel.transferredTo
105

105

00:05:30,190  -->  00:05:33,280
and then we would do 0, channel.size,
106

106

00:05:37,020  -->  00:05:38,270
and copyChannel
107

107

00:05:40,430  -->  00:05:42,820
and I'll leave the print
out there on the next line.
108

108

00:05:42,820  -->  00:05:46,980
Just to confirm, we'll actually
delete the datacopy.dat.
109

109

00:05:49,250  -->  00:05:50,160
Delete that
110

110

00:05:52,080  -->  00:05:56,700
and run our method again,
or run our code again,
111

111

00:05:56,700  -->  00:05:59,230
and have a look at our datacopy.dat
112

112

00:05:59,230  -->  00:06:01,080
and you can see that it's still there
113

113

00:06:01,080  -->  00:06:03,170
and it has worked nicely.
114

114

00:06:05,220  -->  00:06:08,080
Now usually you use a
method in the files class
115

115

00:06:08,080  -->  00:06:09,400
to copy one file to another,
116

116

00:06:09,400  -->  00:06:11,740
but if you've already got
one of the files open,
117

117

00:06:11,740  -->  00:06:14,290
using transferFrom or transferTo
118

118

00:06:14,290  -->  00:06:16,950
may actually be a more
efficient way to do it,
119

119

00:06:16,950  -->  00:06:19,070
depending on the operating system.
120

120

00:06:19,070  -->  00:06:21,600
Now, we're gonna see how to
do it using the files class
121

121

00:06:21,600  -->  00:06:23,000
in an upcoming video.
122

122

00:06:23,000  -->  00:06:25,940
Now before we leave the
topic of reading and writing
123

123

00:06:25,940  -->  00:06:29,720
using Java.devIO, we're gonna
take a brief look at pipes.
124

124

00:06:29,720  -->  00:06:32,920
Now pipes are used to
transfer data between threads
125

125

00:06:32,920  -->  00:06:35,460
and they're actually a one way connexion,
126

126

00:06:35,460  -->  00:06:37,930
so the data can only flow one way.
127

127

00:06:37,930  -->  00:06:39,620
Now a pipe's got two channels,
128

128

00:06:39,620  -->  00:06:42,280
the sink channel and the source channel.
129

129

00:06:42,280  -->  00:06:44,820
One or more threads can write,
130

130

00:06:44,820  -->  00:06:45,650
or writes to the sink channel
131

131

00:06:45,650  -->  00:06:47,090
and the other thread, or threads
132

132

00:06:47,090  -->  00:06:49,170
read from the source channel.
133

133

00:06:49,170  -->  00:06:50,810
So let's actually have
a look at an example.
134

134

00:06:50,810  -->  00:06:52,610
And what we're going to do now
135

135

00:06:52,610  -->  00:06:55,370
is we're just going to
comment out all this code.
136

136

00:06:55,370  -->  00:06:58,450
I'll actually comment out everything.
137

137

00:07:00,970  -->  00:07:02,620
Actually, what I'll do is I'll just delete
138

138

00:07:02,620  -->  00:07:05,260
some of this stuff,
that we've got copies of
139

139

00:07:05,260  -->  00:07:07,980
in previous videos source code.
140

140

00:07:07,980  -->  00:07:10,420
To clean things up a little
bit, requires for this,
141

141

00:07:10,420  -->  00:07:12,610
I'll just clean all that up.
142

142

00:07:12,610  -->  00:07:15,830
Then I'll just comment
out everything else here.
143

143

00:07:15,830  -->  00:07:20,000
A lot shorter now, right down
to and including ending catch.
144

144

00:07:21,070  -->  00:07:23,580
Alright, so we're gonna try and have a go
145

145

00:07:23,580  -->  00:07:25,370
at one of these pipes.
146

146

00:07:25,370  -->  00:07:27,830
I'll do try, and it's gonna be pipe,
147

147

00:07:27,830  -->  00:07:31,130
noticing it's coming fromm Java.nio,
148

148

00:07:31,130  -->  00:07:32,880
Pipe = Pipe.open
149

149

00:07:35,630  -->  00:07:38,550
and then we can catch an exception,
150

150

00:07:40,660  -->  00:07:42,580
and just an IOException
151

151

00:07:44,600  -->  00:07:46,970
and we'll just printStackTrace
if we we get an error.
152

152

00:07:46,970  -->  00:07:48,530
Now, you'll need two threads,
153

153

00:07:48,530  -->  00:07:50,510
one that will write to the sink channel
154

154

00:07:50,510  -->  00:07:52,960
and the other that will read
from the source channel.
155

155

00:07:52,960  -->  00:07:56,180
So, let's actually add
the writer thread first.
156

156

00:07:56,180  -->  00:07:59,760
So, I'm going to put
some more code in here
157

157

00:08:02,310  -->  00:08:03,480
and we'll type
158

158

00:08:05,450  -->  00:08:09,020
Runnable writer = new Runnable,
159

159

00:08:09,020  -->  00:08:11,310
press enter there so it
creates the method for us
160

160

00:08:11,310  -->  00:08:15,050
and within the run, we're gonna do a try
161

161

00:08:15,050  -->  00:08:18,800
and we're just going to
catch any exceptions.
162

162

00:08:20,530  -->  00:08:24,300
If we do get one, we'll
just print a StackTrace.
163

163

00:08:24,300  -->  00:08:25,660
For the actual code, we're gonna type
164

164

00:08:25,660  -->  00:08:27,000
Pipe.SinkChannel
165

165

00:08:29,430  -->  00:08:31,760
sinkChannel = pipe.sink
166

166

00:08:34,630  -->  00:08:36,390
and we're gonna do a ByteBuffer
167

167

00:08:36,390  -->  00:08:39,140
buffer = ByteBuffer.allocate
168

168

00:08:42,490  -->  00:08:44,250
and we're using the number 56 there.
169

169

00:08:44,250  -->  00:08:48,360
We're gonna create a loop for int i=0
170

170

00:08:48,360  -->  00:08:49,860
i<10 i++
171

171

00:08:50,960  -->  00:08:54,880
then we're gonna do a String currentTime =
172

172

00:08:56,240  -->  00:08:57,740
The time is +
173

173

00:09:00,110  -->  00:09:04,200
System.CurrentTimeMillis,
short for milliseconds,
174

174

00:09:05,600  -->  00:09:07,790
so we'll assign that to the string.
175

175

00:09:07,790  -->  00:09:11,960
Then we're gonna do buffer.put
currentTime.getBytes,
176

176

00:09:14,490  -->  00:09:17,080
then we're gonna do buffer.flip
177

177

00:09:18,480  -->  00:09:20,510
and then we're gonna move down and do
178

178

00:09:20,510  -->  00:09:22,510
whilebuffer.hasremaining
179

179

00:09:24,830  -->  00:09:29,000
and we're gonna do
sinkChannel.write(buffer)
180

180

00:09:29,960  -->  00:09:33,460
and outside of the while loop, buffer.flip
181

181

00:09:36,830  -->  00:09:40,330
and then Thread.sleep, we'll add 100 there
182

182

00:09:41,350  -->  00:09:44,320
and then our semi-colon down here.
183

183

00:09:44,320  -->  00:09:47,310
Now we could have used a lander
expression for the runnable,
184

184

00:09:47,310  -->  00:09:49,890
but we've spelt it out here for clarity.
185

185

00:09:49,890  -->  00:09:53,640
So the write method is
calling the Pipe.Sink method
186

186

00:09:53,640  -->  00:09:57,340
over here on line 18,
to get the SinkChannel.
187

187

00:09:57,340  -->  00:09:59,470
It then allocates a
buffer on the next line
188

188

00:09:59,470  -->  00:10:01,590
and we've then got a loop here
189

189

00:10:01,590  -->  00:10:04,380
starting from lines 21 down to lines 33,
190

190

00:10:04,380  -->  00:10:07,080
because we want the thread
to terminate at some point.
191

191

00:10:07,080  -->  00:10:09,990
Now inside the loop, you
know, we're creating a string
192

192

00:10:09,990  -->  00:10:12,420
that includes the current time.
193

193

00:10:12,420  -->  00:10:13,720
So we're creating it there
194

194

00:10:13,720  -->  00:10:16,060
and then putting it into the buffer,
195

195

00:10:16,060  -->  00:10:17,590
so writing the string to the buffer
196

196

00:10:17,590  -->  00:10:19,180
and then we're flipping the buffer,
197

197

00:10:19,180  -->  00:10:20,830
we're then writing the string
198

198

00:10:20,830  -->  00:10:23,360
from the buffer into the SinkChannel.
199

199

00:10:23,360  -->  00:10:25,260
Now at this point, you have
to flip the buffer again,
200

200

00:10:25,260  -->  00:10:26,710
once we've finished that,
201

201

00:10:26,710  -->  00:10:28,570
for the next iteration of the loop.
202

202

00:10:28,570  -->  00:10:30,960
Then the thread sleeps for a
hundred, as you can see here,
203

203

00:10:30,960  -->  00:10:33,050
to give the reader thread the chance
204

204

00:10:33,050  -->  00:10:35,300
to read the source channel.
205

205

00:10:35,300  -->  00:10:36,900
So let's go ahead now and add the code
206

206

00:10:36,900  -->  00:10:38,650
for the reader thread.
207

207

00:10:38,650  -->  00:10:40,590
Right, so let's do that,
so we come down here
208

208

00:10:40,590  -->  00:10:42,800
and put it in our loop.
209

209

00:10:42,800  -->  00:10:45,210
We're going to create our reader,
210

210

00:10:45,210  -->  00:10:49,380
so that's gonna be Runnable
reader = new Runnable,
211

211

00:10:50,720  -->  00:10:51,970
same deal there
212

212

00:10:53,190  -->  00:10:56,190
and put the semi-colon
down there for starters,
213

213

00:10:56,190  -->  00:10:58,470
then we wanna try,
214

214

00:10:58,470  -->  00:11:02,640
and we're going to add
catch there for an exception
215

215

00:11:03,520  -->  00:11:06,700
and we'll just print a
StackTrace, if we do get an error.
216

216

00:11:06,700  -->  00:11:08,450
So the code for the reader is going to be
217

217

00:11:08,450  -->  00:11:09,950
Pipe.SourceChannel
218

218

00:11:11,960  -->  00:11:14,630
sourceChannel = pipe.source
219

219

00:11:18,370  -->  00:11:21,260
and we're gonna do a ByteBuffer buffer =
220

220

00:11:21,260  -->  00:11:22,840
ByteBuffer.allocate
221

221

00:11:25,320  -->  00:11:26,150
56 again,
222

222

00:11:26,150  -->  00:11:27,900
then for int i=0
223

223

00:11:31,140  -->  00:11:32,340
i<10 i++
224

224

00:11:32,340  -->  00:11:34,010
int bytesRead =
225

225

00:11:36,310  -->  00:11:40,260
sourceChannel.read(buffer)
226

226

00:11:40,260  -->  00:11:43,600
a byte array timesString = new byte
227

227

00:11:47,170  -->  00:11:49,590
and we set that to bytesRead,
228

228

00:11:50,540  -->  00:11:53,690
right number of characters, so
it'll fit in our byte array,
229

229

00:11:53,690  -->  00:11:55,770
then we do a buffer.flip,
230

230

00:11:56,880  -->  00:12:01,040
then we do a buffer.get(timeString),
231

231

00:12:03,280  -->  00:12:06,090
then we're gonna do a printout,
232

232

00:12:06,090  -->  00:12:08,140
System.out.println and we'll put
233

233

00:12:08,140  -->  00:12:12,310
Reader Thread = + new String(timeString)
234

234

00:12:16,680  -->  00:12:18,720
then we do a buffer.flip
235

235

00:12:18,720  -->  00:12:21,970
and Thread.sleep(100).
236

236

00:12:24,380  -->  00:12:25,860
So, this is very similar to the writer,
237

237

00:12:25,860  -->  00:12:28,710
except here we're calling
the pipe.source method
238

238

00:12:28,710  -->  00:12:32,070
to get the source channel,
get to the source channel.
239

239

00:12:32,070  -->  00:12:33,850
You can see that on line 51.
240

240

00:12:33,850  -->  00:12:35,870
Otherwise, it's pretty much the same code,
241

241

00:12:35,870  -->  00:12:38,050
except this time it's
reading from the channel
242

242

00:12:38,050  -->  00:12:41,630
using the buffer.get, line 54 there
243

243

00:12:41,630  -->  00:12:45,800
and it writes what it then
gets to the console, line 55.
244

244

00:12:47,210  -->  00:12:48,310
So finally now we've done that,
245

245

00:12:48,310  -->  00:12:50,130
we need to start both threads,
246

246

00:12:50,130  -->  00:12:52,140
first the writer, then the reader.
247

247

00:12:52,140  -->  00:12:55,240
So if we come down and do that, down here,
248

248

00:12:55,240  -->  00:12:57,660
so we're gonna do new Thread,
249

249

00:12:59,210  -->  00:13:03,150
and we'll start with the (writer).start,
250

250

00:13:03,150  -->  00:13:07,060
then new Thread(reader).start.
251

251

00:13:09,510  -->  00:13:11,760
Alright, so let's actually
try running this now
252

252

00:13:11,760  -->  00:13:13,510
and see what happens.
253

253

00:13:16,760  -->  00:13:19,040
And you can see that
that worked away there
254

254

00:13:19,040  -->  00:13:22,380
and we got the time reader
thread reading what the time was
255

255

00:13:22,380  -->  00:13:26,320
an it went through 10
times, as per the for loop
256

256

00:13:26,320  -->  00:13:29,840
and then stopped, so we can try that again
257

257

00:13:29,840  -->  00:13:32,650
and obviously that's still working nicely.
258

258

00:13:32,650  -->  00:13:34,860
Now if a timing problem
crops up for any reason,
259

259

00:13:34,860  -->  00:13:37,510
you could actually try
increasing this number here
260

260

00:13:37,510  -->  00:13:40,930
and here as well, if you find
that there's some problem
261

261

00:13:40,930  -->  00:13:43,190
not working on your
computer, but you can see
262

262

00:13:43,190  -->  00:13:47,580
in the case of my computer,
it's actually worked fine.
263

263

00:13:47,580  -->  00:13:50,500
So that was how to go about using a pipe
264

264

00:13:50,500  -->  00:13:52,780
to send data from one thread to another.
265

265

00:13:52,780  -->  00:13:54,520
Now, there are other ways for threads
266

266

00:13:54,520  -->  00:13:57,680
to communicate and pass data,
so it would be a good idea
267

267

00:13:57,680  -->  00:13:58,980
to benchmark the different ways
268

268

00:13:58,980  -->  00:14:01,550
and then choose the one
that's the most efficient
269

269

00:14:01,550  -->  00:14:05,180
for an application, so
sometimes using a java.nio pipe
270

270

00:14:05,180  -->  00:14:06,980
may not actually make sense
271

271

00:14:06,980  -->  00:14:10,650
and because of the nature of
the content of this course,
272

272

00:14:10,650  -->  00:14:13,060
I've actually added this particular video.
273

273

00:14:13,060  -->  00:14:15,850
At a later point, after
I've actually created
274

274

00:14:15,850  -->  00:14:17,520
the thread section of this course,
275

275

00:14:17,520  -->  00:14:21,530
which confusingly isn't
until later in the course.
276

276

00:14:21,530  -->  00:14:23,160
So it's a long story that the reason
277

277

00:14:23,160  -->  00:14:24,380
that's been designed that way,
278

278

00:14:24,380  -->  00:14:26,190
but the point I'm making here is
279

279

00:14:26,190  -->  00:14:28,310
if you're not understanding
these thread concepts,
280

280

00:14:28,310  -->  00:14:31,090
there's a separate section of this course
281

281

00:14:31,090  -->  00:14:32,420
dealing with threads,
282

282

00:14:32,420  -->  00:14:34,390
so you might well want to
actually go and check that out
283

283

00:14:34,390  -->  00:14:36,580
and once you've been through
that, you could come back
284

284

00:14:36,580  -->  00:14:38,340
and look at this particular video again
285

285

00:14:38,340  -->  00:14:41,240
and it would probably
make a lot more sense.
286

286

00:14:41,240  -->  00:14:43,840
The point is though, that I
wanted to make this section
287

287

00:14:43,840  -->  00:14:46,150
fairly complete in that it is important
288

288

00:14:46,150  -->  00:14:48,220
to be able to know how you can use a pipe
289

289

00:14:48,220  -->  00:14:50,380
to send data from one thread to another.
290

290

00:14:50,380  -->  00:14:52,430
Alright, so that's it, that's all there is
291

291

00:14:52,430  -->  00:14:55,220
for reading and writing, using java.nio.
292

292

00:14:55,220  -->  00:14:57,070
In the next video, what we're gonna do
293

293

00:14:57,070  -->  00:14:59,130
is take a look at how to use java.nio
294

294

00:14:59,130  -->  00:15:01,220
to work with the file system.
295

295

00:15:01,220  -->  00:15:04,140
So, I'll see you in the next video.
