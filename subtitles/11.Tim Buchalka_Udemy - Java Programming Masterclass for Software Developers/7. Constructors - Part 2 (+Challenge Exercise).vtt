WEBVTT
1
1

00:00:05.450  -->  00:00:08.420
In the previous video we
talked about constructors.
2

2

00:00:08.420  -->  00:00:11.290
So let's now finish off our
discussion about constructors and
3

3

00:00:11.290  -->  00:00:12.910
come up with a constructor challenge.
4

4

00:00:14.060  -->  00:00:16.850
So the other thing you may have
notice looking at this coding is
5

5

00:00:18.300  -->  00:00:22.260
that I've actually updated
the fields directly.
6

6

00:00:22.260  -->  00:00:23.810
I haven't used the setters.
7

7

00:00:23.810  -->  00:00:27.550
So there is an alternative,
what we could have done,
8

8

00:00:27.550  -->  00:00:31.650
is we actually could have done
something like set number.
9

9

00:00:35.500  -->  00:00:38.190
And the advantage of that would be,
of course, if we had some
10

10

00:00:38.190  -->  00:00:42.190
validation in here that was testing for
valid numbers and those types of things.
11

11

00:00:42.190  -->  00:00:44.750
We could actually execute
that code as well.
12

12

00:00:44.750  -->  00:00:49.130
Now in Java there is conflicting opinions
as to which is the best approach.
13

13

00:00:49.130  -->  00:00:52.450
Cuz you'll find out in the next video
when we start talking about sub classing,
14

14

00:00:52.450  -->  00:00:56.410
in other words talking about inheritance,
this won't always work.
15

15

00:00:56.410  -->  00:01:00.510
So the general rule of thumb is it's
always better to save the values of
16

16

00:01:00.510  -->  00:01:04.590
the constructor directly to the field
rather than calling the setter.
17

17

00:01:04.590  -->  00:01:05.810
Cuz as you'll see in the next video,
18

18

00:01:05.810  -->  00:01:11.580
there can be scenarios where this code
that's in this setter isn't executed.
19

19

00:01:11.580  -->  00:01:15.970
So by going back and actually doing
the code directly, in other words,
20

20

00:01:15.970  -->  00:01:19.330
going back and setting it to this dot and
whatever the field name is,
21

21

00:01:19.330  -->  00:01:22.330
you're guaranteed that the field
values will be initialized.
22

22

00:01:22.330  -->  00:01:27.070
So that's my general rule of thumb with
constructors is don't call setters or
23

23

00:01:27.070  -->  00:01:31.320
any other method other than another
constructor within those constructors.
24

24

00:01:31.320  -->  00:01:33.520
And the other reason for that is,
25

25

00:01:33.520  -->  00:01:37.170
this is the point in the constructor
where the object is being created.
26

26

00:01:37.170  -->  00:01:41.790
So consequentially, some aspects of the
initialization may not have been finished
27

27

00:01:41.790  -->  00:01:42.700
while you're in the constructor.
28

28

00:01:42.700  -->  00:01:46.370
And that's the other reason there's an
opinion out there that suggests that you
29

29

00:01:46.370  -->  00:01:51.710
shouldn't be calling other methods or even
the setters within the constructor code.
30

30

00:01:51.710  -->  00:01:54.570
But we can talk more about
that later if needed.
31

31

00:01:54.570  -->  00:01:57.210
For now I can go with what
I've suggested which is just
32

32

00:01:57.210  -->  00:02:01.470
saving the field values directly rather
than calling setters or any other method.
33

33

00:02:01.470  -->  00:02:05.180
Now the other thing I wanna show you is
another shortcut that IntelliJack got.
34

34

00:02:05.180  -->  00:02:10.150
Let's just assume that we wanted to
create another constructor that we only
35

35

00:02:10.150  -->  00:02:14.260
parsed the customer name, email addresses,
instructor phone number and
36

36

00:02:14.260  -->  00:02:18.440
we want the other two parameters to be
created automatically by the computer.
37

37

00:02:18.440  -->  00:02:20.570
So we could do that by
creating another constructor.
38

38

00:02:20.570  -->  00:02:23.960
But we could also come up here and
do that with IntelliJack.
39

39

00:02:23.960  -->  00:02:25.190
It's got the capability for
40

40

00:02:25.190  -->  00:02:28.320
adding constructors as well
in that generate option.
41

41

00:02:28.320  -->  00:02:32.320
Click on generate and we're gonna select
the first option which is constructor, and
42

42

00:02:32.320  -->  00:02:35.230
it asks which field do you want
to include in the constructor?
43

43

00:02:35.230  -->  00:02:37.870
So which ones ae we gonna have
passed to us, in other words,
44

44

00:02:37.870  -->  00:02:39.460
which of the parameters to be used.
45

45

00:02:39.460  -->  00:02:43.820
So I'm gonna select those three, customer
name, email address and the phone number.
46

46

00:02:43.820  -->  00:02:45.460
Had those.
47

47

00:02:45.460  -->  00:02:47.510
So there's our third constructor, now.
48

48

00:02:47.510  -->  00:02:50.470
And you can see it's only
updating the three fields.
49

49

00:02:50.470  -->  00:02:51.960
So that's one way of doing it.
50

50

00:02:51.960  -->  00:02:54.840
But, of course, the disadvantage,
there, is that our number and
51

51

00:02:54.840  -->  00:02:57.080
our balance haven't been
automatically updated.
52

52

00:02:57.080  -->  00:03:00.260
So what we could do,
is we could put this, and
53

53

00:03:00.260  -->  00:03:04.260
we can assume it's gonna be
the default account number,
54

54

00:03:04.260  -->  00:03:09.120
we might say is 99999 and
the default balance is 100.55.
55

55

00:03:09.120  -->  00:03:11.300
Then we'll pass the customerName,
56

56

00:03:11.300  -->  00:03:14.980
the customerEmailAddress,
and the customerPhoneNumber.
57

57

00:03:18.770  -->  00:03:21.400
So you see what we've done there
is we've defaulted two parameters.
58

58

00:03:21.400  -->  00:03:24.670
So we've come up with what the default
is because they weren't specified.
59

59

00:03:24.670  -->  00:03:27.560
And we've still gone back and
called our major constructor.
60

60

00:03:27.560  -->  00:03:30.800
This is the one that actually
updates all the fields.
61

61

00:03:30.800  -->  00:03:32.870
So you will find as you start creating and
62

62

00:03:32.870  -->  00:03:37.260
writing more complex code It's not unusual
to see multiple constructors like this.
63

63

00:03:37.260  -->  00:03:41.790
And in that situation, often you do
all your initialization in the one
64

64

00:03:41.790  -->  00:03:44.250
constructor, like you can see here.
65

65

00:03:44.250  -->  00:03:47.660
And the other constructor it should
just call that major constructor.
66

66

00:03:47.660  -->  00:03:49.990
That's a good way of doing things and
67

67

00:03:49.990  -->  00:03:53.910
it often leads to really good coding cuz
you're not having to duplicate code or
68

68

00:03:53.910  -->  00:03:58.470
duplicating initialization in more
than one place, so on and so forth.
69

69

00:03:58.470  -->  00:03:59.220
So how would we call that?
70

70

00:03:59.220  -->  00:04:02.410
We would call that very much
the same as we've been doing before.
71

71

00:04:02.410  -->  00:04:05.050
We could do, create an E class here.
72

72

00:04:05.050  -->  00:04:10.280
Account, Tim's account equals new account.
73

73

00:04:16.430  -->  00:04:19.110
Now you can see what's happened there
is you've got three options now.
74

74

00:04:19.110  -->  00:04:20.130
IntelliJ's saying,
75

75

00:04:20.130  -->  00:04:24.250
okay there's three constructors that
have been created for this class.
76

76

00:04:24.250  -->  00:04:28.340
So we'll start typing,
you can type, you can put Tim,
77

77

00:04:28.340  -->  00:04:33.330
tim@email.com.
78

78

00:04:35.810  -->  00:04:38.320
And one, two, three, four,
five for the phone number.
79

79

00:04:40.090  -->  00:04:41.400
I've got a 1950s phone number.
80

80

00:04:42.460  -->  00:04:44.760
Okay, so you can see how that
constructor was created, and of course,
81

81

00:04:44.760  -->  00:04:45.860
we can confirm that's working.
82

82

00:04:45.860  -->  00:04:51.600
timsAccount.getNumber, to
make sure it's a number,
83

83

00:04:51.600  -->  00:04:59.020
and we'll just timsAccount.get.
84

84

00:04:59.020  -->  00:05:01.270
And just make sure
the name is actually set.
85

85

00:05:01.270  -->  00:05:03.220
Let's just run that to make
sure that it's working.
86

86

00:05:06.000  -->  00:05:09.980
99999 which was the default
account number here.
87

87

00:05:09.980  -->  00:05:15.060
So you can see and the name was Tim
which of course was what we parsed here.
88

88

00:05:15.060  -->  00:05:16.580
So, that's constructors.
89

89

00:05:16.580  -->  00:05:18.840
You'll see those used extensively in Java.
90

90

00:05:18.840  -->  00:05:22.600
And of course, we'll be using that a lot
in this course as we move forward,
91

91

00:05:22.600  -->  00:05:26.940
because they are a very important part
of creating objects from classes.
92

92

00:05:26.940  -->  00:05:28.120
Okay.
So, it's time for a challenge.
93

93

00:05:28.120  -->  00:05:31.400
I'm going to carve that code out.
94

94

00:05:48.230  -->  00:05:52.370
Okay, so the challenge is to create
a new class called VipCustomer.
95

95

00:05:52.370  -->  00:05:57.180
So, it should have three fields, the name,
the credit limit, and the email address.
96

96

00:05:57.180  -->  00:05:59.900
So, what you want to do is
create three constructors.
97

97

00:05:59.900  -->  00:06:01.820
The first constructor should be empty.
98

98

00:06:01.820  -->  00:06:05.800
And that should call the constructor with
three parameters that we're gonna create.
99

99

00:06:05.800  -->  00:06:07.380
Passing on any default values.
100

100

00:06:07.380  -->  00:06:12.860
The second constructor should pass on the
two values it receives as parameters and
101

101

00:06:12.860  -->  00:06:14.930
then default the third value.
102

102

00:06:14.930  -->  00:06:18.540
And the third constructor should just
save all the fields that it receives,
103

103

00:06:18.540  -->  00:06:22.080
cuz it's gonna have the three
parameters one for each field.
104

104

00:06:22.080  -->  00:06:23.910
Create getters, and so
105

105

00:06:23.910  -->  00:06:28.500
so you don't need setters because we're saving
the field values using the constructor.
106

106

00:06:28.500  -->  00:06:32.010
And see if you can figure out how to
create getters only using the code generation
107

107

00:06:32.010  -->  00:06:35.290
feature of IntelliJ, and
of course then test and
108

108

00:06:35.290  -->  00:06:39.850
confirm it works by writing code in the
main class that was generated by IntelliJ.
109

109

00:06:39.850  -->  00:06:42.290
So, pause the video now,
go away, and give that a go.
110

110

00:06:42.290  -->  00:06:44.680
And when you're ready to see what
my solution is, come back, and
111

111

00:06:44.680  -->  00:06:45.700
we'll take it from there.
112

112

00:06:47.830  -->  00:06:48.620
Okay, how did you get on?
113

113

00:06:48.620  -->  00:06:49.900
Did you figure it out?
114

114

00:06:49.900  -->  00:06:51.000
Now, let's get started.
115

115

00:06:51.000  -->  00:06:55.250
Need to bring up my project window.
116

116

00:06:55.250  -->  00:06:56.750
Now, it's command 1 a Mac.
117

117

00:06:56.750  -->  00:07:00.780
If you wanna know what it is on
your system, go to Tools>Window and
118

118

00:07:00.780  -->  00:07:02.150
look at the shortcut.
119

119

00:07:02.150  -->  00:07:05.380
So, we're gonna create a new
class called VIP person.
120

120

00:07:14.820  -->  00:07:16.320
Need to have three fields.
121

121

00:07:30.610  -->  00:07:35.550
Okay like so, and the first contractor
should be empty the second one
122

122

00:07:35.550  -->  00:07:38.290
should pass through the two valleys.
123

123

00:07:38.290  -->  00:07:40.680
The third contractor
should save all the fuels.
124

124

00:07:40.680  -->  00:07:46.080
So what we can do, is we can use
the generational features of Intelli J,
125

125

00:07:46.080  -->  00:07:47.890
create a constructor.
126

126

00:07:47.890  -->  00:07:50.840
The first one we're gonna do is create
the constructor with the three values.
127

127

00:07:53.460  -->  00:07:57.420
And this is why you'll start getting used
to IntelliJ code generation features,
128

128

00:07:57.420  -->  00:08:01.720
because it's really a much quicker
way of creating stuff than typing it.
129

129

00:08:01.720  -->  00:08:02.790
Really handy for this little stuff.
130

130

00:08:02.790  -->  00:08:05.850
So the second constructor
only needed two parameters,
131

131

00:08:05.850  -->  00:08:09.100
so let's default the email address.
132

132

00:08:09.100  -->  00:08:11.290
and just save the first tooth.
133

133

00:08:11.290  -->  00:08:12.550
Dot save.
134

134

00:08:12.550  -->  00:08:13.890
It will come back to that in a second.
135

135

00:08:13.890  -->  00:08:15.310
And the third constructor, of course,
136

136

00:08:15.310  -->  00:08:19.520
is just going to be VIP person
without any parameters.
137

137

00:08:19.520  -->  00:08:22.050
And that's gonna call this, so
we'll set that one up first.
138

138

00:08:22.050  -->  00:08:26.640
It's going to be default to
139

139

00:08:26.640  -->  00:08:31.830
default name 50,000 and
140

140

00:08:31.830  -->  00:08:38.450
email address default @email.com.
141

141

00:08:38.450  -->  00:08:41.390
This one here we don't want to
save the fuels we want to call
142

142

00:08:41.390  -->  00:08:42.960
the other constructor.
143

143

00:08:42.960  -->  00:08:46.880
So what we want to do there is we've
got the name of the credit limit, so
144

144

00:08:46.880  -->  00:08:49.340
we're gonna put this name, creditLimit.
145

145

00:08:52.510  -->  00:08:55.250
And we're gonna default and
we'll call it unknown, just so
146

146

00:08:55.250  -->  00:08:56.660
we know that it's different.
147

147

00:09:00.210  -->  00:09:03.530
So that's our three constructors
now that are created.
148

148

00:09:03.530  -->  00:09:07.220
You can see the first two constructors
call the third constructor.
149

149

00:09:07.220  -->  00:09:11.670
The third constructor is the only one
that does save valleys into our fuels.
150

150

00:09:12.680  -->  00:09:17.190
And using our code generation
I'm using the shortcut but
151

151

00:09:17.190  -->  00:09:21.890
if you don't know what that is go
into the code menu, generate and
152

152

00:09:21.890  -->  00:09:25.060
look at the code shortcut for
your platform.
153

153

00:09:26.500  -->  00:09:28.300
Now this is the one I wanted to show you,
"getter" only.
154

154

00:09:28.300  -->  00:09:31.230
You don't have to do "getters and
setters," just type getter,
155

155

00:09:31.230  -->  00:09:34.700
type the three- or select the three
that you want to create getters for,
156

156

00:09:34.700  -->  00:09:37.470
press enter, and
there's our three getters created.
157

157

00:09:37.470  -->  00:09:38.020
Very nice.
158

158

00:09:39.380  -->  00:09:41.540
Okay so what we now need to do
is confirm that this works.
159

159

00:09:41.540  -->  00:09:44.720
So we just go back to our main class.
160

160

00:09:44.720  -->  00:09:50.700
We're going to do VipPerson.
161

161

00:09:50.700  -->  00:09:55.450
And we'll just put person1
= new VipPerson and
162

162

00:09:55.450  -->  00:09:59.750
we should be able to do person1.getname,
163

163

00:09:59.750  -->  00:10:04.630
just to confirm that
something's worked there.
164

164

00:10:04.630  -->  00:10:06.300
We show the ones that k
that all of them are.
165

165

00:10:06.300  -->  00:10:12.620
So VRP person,
person two equals VIP person.
166

166

00:10:12.620  -->  00:10:15.780
And of course we've got one there with
two parameters which are the names.
167

167

00:10:15.780  -->  00:10:19.880
So we'll put Bob and 25,000.
168

168

00:10:21.330  -->  00:10:23.770
And the third parameter should
be created for us automatically.
169

169

00:10:23.770  -->  00:10:26.670
And we'll do similar thing,
170

170

00:10:26.670  -->  00:10:32.700
person2.getname which will be
Bob because we parsed that.
171

171

00:10:32.700  -->  00:10:37.520
And VipPerson person3
172

172

00:10:37.520  -->  00:10:42.110
= new VipPerson Tim.
173

173

00:10:42.110  -->  00:10:43.200
$100.00.
174

174

00:10:43.200  -->  00:10:46.770
tim@email.com.
175

175

00:10:46.770  -->  00:10:54.410
And print out person3.getName().
176

176

00:10:54.410  -->  00:11:00.700
So that should be our code now
to test that this is working.
177

177

00:11:00.700  -->  00:11:01.240
Let's run that.
178

178

00:11:04.390  -->  00:11:07.300
Default name was the first
one with no parameters.
179

179

00:11:07.300  -->  00:11:09.070
So we just go back and check our code.
180

180

00:11:11.480  -->  00:11:15.220
We can see that the default code was
Default name 50000.00 and default@email so
181

181

00:11:15.220  -->  00:11:16.030
that's working.
182

182

00:11:17.040  -->  00:11:19.870
And for the second one, I run that again.
183

183

00:11:23.300  -->  00:11:24.960
Bob was the second one,
so that's good for him.
184

184

00:11:24.960  -->  00:11:27.980
That's worked, and the third one was Tim
which we've confirmed is also working.
185

185

00:11:29.320  -->  00:11:31.030
What we can do there,
if we really wanted to be sure,
186

186

00:11:31.030  -->  00:11:36.940
we could actually just do a printout of
the also of the person3.getEmailAddress
187

187

00:11:36.940  -->  00:11:40.990
just to make sure that it
is set to tim@email.com.
188

188

00:11:40.990  -->  00:11:41.690
Run that.
189

189

00:11:41.690  -->  00:11:44.610
Tim@email.com which,
190

190

00:11:44.610  -->  00:11:49.780
of course, hasn't been used anywhere
else here as the other constructor.
191

191

00:11:49.780  -->  00:11:51.410
So that's it, that's constructors.
192

192

00:11:51.410  -->  00:11:52.890
Hopefully you've got a lot out of that.
193

193

00:11:52.890  -->  00:11:57.330
We actually had a student
who actually looked at
194

194

00:11:57.330  -->  00:11:59.740
this particular lecture
after it went live.
195

195

00:11:59.740  -->  00:12:01.130
And notice the small problem.
196

196

00:12:01.130  -->  00:12:04.730
So I just want to go over and show you,
the discussion in the course first.
197

197

00:12:05.940  -->  00:12:06.930
This is from Brian N.
198

198

00:12:06.930  -->  00:12:11.230
and he actually said that when creating
the withdrawal method's "if statement,"
199

199

00:12:11.230  -->  00:12:15.300
the operator, which is less than equal
should be a strict inequality (<).
200

200

00:12:15.300  -->  00:12:19.670
And that's because if you deduct
the withdrawal amount from the balance
201

201

00:12:19.670  -->  00:12:22.630
a valid amount is still
having a zero balance.
202

202

00:12:22.630  -->  00:12:25.760
And the way I've coded it in the example
203

203

00:12:25.760  -->  00:12:29.260
is that it's less than equal
rather than less than.
204

204

00:12:29.260  -->  00:12:32.750
So what I'm gonna just show you what
I mean and make the change just so
205

205

00:12:32.750  -->  00:12:34.170
you can see.
206

206

00:12:34.170  -->  00:12:37.960
How the code was meant to look, so
we'll go back to the code and have a look.
207

207

00:12:37.960  -->  00:12:40.820
The problem is, if we go into account, and
208

208

00:12:40.820  -->  00:12:45.210
specifically the withdraw method, at the
moment, you can see the withdraw method.
209

209

00:12:45.210  -->  00:12:47.090
The test is, if the current balance,
210

210

00:12:47.090  -->  00:12:52.030
this.Balance take the withdrawal
amount is less than or equal to zero
211

211

00:12:52.030  -->  00:12:56.480
then we're coming up with an error,
that the withdrawal won't be processed.
212

212

00:12:56.480  -->  00:13:00.050
When in actual fact, it's quite valid, say
if you've got a hundred dollars in your
213

213

00:13:00.050  -->  00:13:03.680
bank account, to withdraw a hundred and
to leave a balance of zero.
214

214

00:13:03.680  -->  00:13:04.770
That's quite valid.
215

215

00:13:04.770  -->  00:13:06.120
But this code as it's written,
216

216

00:13:06.120  -->  00:13:09.850
because we're using less than or
equal to zero, won't actually work.
217

217

00:13:09.850  -->  00:13:11.450
It won't actually process that.
218

218

00:13:11.450  -->  00:13:15.940
If you're entering an amount, a withdrawal
amount, that's once deducted off
219

219

00:13:15.940  -->  00:13:20.920
the balance, it leaves you with
exactly zero money in your account.
220

220

00:13:20.920  -->  00:13:23.990
So, to get this to work, what we need to
do is add comments to some of this code
221

221

00:13:23.990  -->  00:13:26.740
cuz the problem is in the account class.
222

222

00:13:26.740  -->  00:13:29.590
So I'm going to actually
briefly comment this out.
223

223

00:13:29.590  -->  00:13:33.240
Cuz we're not using that for this part
of the video, comment that out and
224

224

00:13:33.240  -->  00:13:35.160
actually uncomment this component here.
225

225

00:13:35.160  -->  00:13:39.900
If we go back and
just have a look at our constructor again,
226

226

00:13:39.900  -->  00:13:41.780
just to familiarize ourselves with again.
227

227

00:13:43.400  -->  00:13:47.920
We've actually got a balance of 100.55
which is given to us by default if
228

228

00:13:47.920  -->  00:13:50.580
we're actually using this
particular constructor.
229

229

00:13:50.580  -->  00:13:55.860
Now just to confirm that, if you go
back and go into the main class again.
230

230

00:13:55.860  -->  00:14:01.570
And we'll put [SOUND] current balance
231

231

00:14:01.570  -->  00:14:06.550
is timsaccount.getbalance.
232

232

00:14:06.550  -->  00:14:10.660
And if we run that, just to verify
with- that's still the amount
233

233

00:14:10.660  -->  00:14:14.680
of money that's in there
current balance is $100.55.
234

234

00:14:14.680  -->  00:14:16.880
Okay, so far so good.
235

235

00:14:16.880  -->  00:14:21.880
So now if we try to
withdraw that exact amount,
236

236

00:14:21.880  -->  00:14:25.860
so we put timsAccount.withdraw and
237

237

00:14:25.860  -->  00:14:30.750
the exact amount, which was 100.55.
238

238

00:14:30.750  -->  00:14:32.600
So we try and do that and process it.
239

239

00:14:37.190  -->  00:14:42.340
Current balance is 155, only 155
available, withdrawn, not processed.
240

240

00:14:42.340  -->  00:14:45.360
Well that's clearly an error and
we should be able
241

241

00:14:45.360  -->  00:14:49.490
to withdraw $100.55 because that's
what the amount is in the bank.
242

242

00:14:49.490  -->  00:14:52.070
So we go back to our account clause and
243

243

00:14:52.070  -->  00:14:57.590
the problem is in this withdrawal
method where it's got less than equal,
244

244

00:14:57.590  -->  00:15:00.160
less than is the appropriate
operand which to add here.
245

245

00:15:00.160  -->  00:15:04.750
We only actually want to cause it to
come up with an error if deducting
246

246

00:15:04.750  -->  00:15:09.430
an amount off of the balance leaves us
with an amount that is less than zero,
247

247

00:15:09.430  -->  00:15:11.480
instead of less than or equal to zero.
248

248

00:15:11.480  -->  00:15:13.830
So now if we go back, and run this again.
249

249

00:15:17.660  -->  00:15:20.530
We actually withdrawal
of $100.55 processed.
250

250

00:15:20.530  -->  00:15:23.530
Remaining balance is 0.0, which,
of course, is quite valid.
251

251

00:15:23.530  -->  00:15:24.270
So that's it.
252

252

00:15:24.270  -->  00:15:29.500
I just wanted to add this little part in
here just to be correct with the code.
253

253

00:15:29.500  -->  00:15:33.400
Thanks again to Brian for pointing that
on, pointing that out, I should say.
254

254

00:15:33.400  -->  00:15:35.780
And just to let you know I've
also updated the source code.
255

255

00:15:35.780  -->  00:15:39.020
So if you do download the source
code you'll actually see that
256

256

00:15:39.020  -->  00:15:40.110
fix in the code as well.
257

257

00:15:41.690  -->  00:15:45.760
So in the next video what we're going to
do is we're gonna talk about inheritance,
258

258

00:15:45.760  -->  00:15:50.700
because each time you create a class,
what's happening is Java is actually
259

259

00:15:50.700  -->  00:15:54.810
giving you those extra fields and
methods that we talked about previously.
260

260

00:15:54.810  -->  00:15:57.840
So we're gonna talk about inheritance and
how that works in the next video.
