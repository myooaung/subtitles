WEBVTT
1
1

00:00:03.250  -->  00:00:07.090
so we've covered quite a bit in this
2

2

00:00:07.090  -->  00:00:09.460
section so let's actually practice what
3

3

00:00:09.460  -->  00:00:10.420
we've learned
4

4

00:00:10.420  -->  00:00:12.160
now if you want to type in and run
5

5

00:00:12.160  -->  00:00:14.010
this code bear in mind that I when
6

6

00:00:14.010  -->  00:00:16.480
working with threads as was shown in
7

7

00:00:16.480  -->  00:00:18.210
this section continually timing will
8

8

00:00:18.210  -->  00:00:20.380
affect what you see so you may have to
9

9

00:00:20.380  -->  00:00:22.600
run a few times to see the problems
10

10

00:00:22.600  -->  00:00:24.760
we're discussing but we're gonna be
11

11

00:00:24.760  -->  00:00:26.430
doing first is working with this bank
12

12

00:00:26.430  -->  00:00:28.480
account class and this code is available
13

13

00:00:28.480  -->  00:00:30.400
for you to copy and paste in or you can
14

14

00:00:30.400  -->  00:00:35.700
just type it in and follow along
15

15

00:00:35.700  -->  00:00:38.400
and obviously being a bank account this
16

16

00:00:38.400  -->  00:00:41.160
code is really simplified a real world
17

17

00:00:41.160  -->  00:00:42.960
bank account class will have many more
18

18

00:00:42.960  -->  00:00:45.150
methods and the deposit and withdraw
19

19

00:00:45.150  -->  00:00:47.370
methods would also be a lot more complex
20

20

00:00:47.370  -->  00:00:49.770
but we want to focus on concurrency so
21

21

00:00:49.770  -->  00:00:54.270
we are actually keeping it simple
22

22

00:00:54.270  -->  00:00:56.790
alright so onto the challenge the first
23

23

00:00:56.790  -->  00:00:57.930
quite a few challenges
24

24

00:00:57.930  -->  00:01:02.630
coming up
25

25

00:01:02.630  -->  00:01:05.390
so the challenge 1 is to create and start
26

26

00:01:05.390  -->  00:01:07.760
threads now we could have two people
27

27

00:01:07.760  -->  00:01:10.010
using a joint bank account at the same
28

28

00:01:10.010  -->  00:01:12.530
time you want to create and start 2
29

29

00:01:12.530  -->  00:01:14.810
threads that use the same bank
30

30

00:01:14.810  -->  00:01:16.940
account instance and an initial balance
31

31

00:01:16.940  -->  00:01:19.250
of a thousand dollars now one will
32

32

00:01:19.250  -->  00:01:21.590
deposit 300 into the bank account and
33

33

00:01:21.590  -->  00:01:23.750
then withdraw 50 the others going to
34

34

00:01:23.750  -->  00:01:26.570
deposit 203.75 dollars and then
35

35

00:01:26.570  -->  00:01:29.540
withdraw 100 so that's the challenge and
36

36

00:01:29.540  -->  00:01:31.040
it's going to be bit of a start in code
37

37

00:01:31.040  -->  00:01:32.090
just to get you going
38

38

00:01:32.090  -->  00:01:34.880
as you can see on the screen there so
39

39

00:01:34.880  -->  00:01:36.800
that's it go away and see if you can
40

40

00:01:36.800  -->  00:01:38.300
solve that challenge and when you're
41

41

00:01:38.300  -->  00:01:40.340
ready to come back and see what we've
42

42

00:01:40.340  -->  00:01:42.320
done start the video so at this point
43

43

00:01:42.320  -->  00:01:43.430
pause the video and complete the
44

44

00:01:43.430  -->  00:01:44.660
challenge and i'll see you when you get
45

45

00:01:44.660  -->  00:01:47.890
back
46

46

00:01:47.890  -->  00:01:49.930
ok so how did you get on hopefully you
47

47

00:01:49.930  -->  00:01:52.060
manage to solve the challenge so let's
48

48

00:01:52.060  -->  00:01:53.380
talk about to how we would actually
49

49

00:01:53.380  -->  00:01:56.020
solve this challenge now just to be
50

50

00:01:56.020  -->  00:01:58.750
clear I've created this new project
51

51

00:01:58.750  -->  00:02:00.970
concurrency challenges and I've got the
52

52

00:02:00.970  -->  00:02:03.010
files here I've got the starter code
53

53

00:02:03.010  -->  00:02:05.020
that i talked about in the slides and
54

54

00:02:05.020  -->  00:02:07.270
also the bank account class and again
55

55

00:02:07.270  -->  00:02:09.640
these resources are available for you to
56

56

00:02:09.640  -->  00:02:11.610
download in the resources section of
57

57

00:02:11.610  -->  00:02:12.490
this video
58

58

00:02:12.490  -->  00:02:14.830
alright so what do we need to do well
59

59

00:02:14.830  -->  00:02:16.750
there are two ways we can create and
60

60

00:02:16.750  -->  00:02:17.920
start the threads
61

61

00:02:17.920  -->  00:02:20.290
the first is to extend the thread class
62

62

00:02:20.290  -->  00:02:23.650
and implement the run method it wouldn't
63

63

00:02:23.650  -->  00:02:25.150
make sense to have the bank account
64

64

00:02:25.150  -->  00:02:27.430
class extend thread because each
65

65

00:02:27.430  -->  00:02:29.080
transaction on a bank account will be
66

66

00:02:29.080  -->  00:02:30.970
different if we want to create the
67

67

00:02:30.970  -->  00:02:33.550
threads by extending thread we use
68

68

00:02:33.550  -->  00:02:35.290
anonymous thread classes
69

69

00:02:35.290  -->  00:02:37.200
let's go and have a go at that can be
70

70

00:02:37.200  -->  00:02:39.850
putting this code in the main class in
71

71

00:02:39.850  -->  00:02:42.160
the main method here we're going to type....
72

72

00:02:42.160  -->  00:02:47.890
...
73

73

00:02:47.890  -->  00:03:00.640
...
74

74

00:03:00.640  -->  00:03:04.290
...and we are getting a warning saying
75

75

00:03:04.290  -->  00:03:06.340
that the variable account is accessed
76

76

00:03:06.340  -->  00:03:07.980
from within the inner class needs to be
77

77

00:03:07.980  -->  00:03:10.840
declared final so let's do that make it
78

78

00:03:10.840  -->  00:03:16.150
a final....
79

79

00:03:16.150  -->  00:03:19.450
....
80

80

00:03:19.450  -->  00:03:23.890
...
81

81

00:03:23.890  -->  00:03:34.750
...
82

82

00:03:34.750  -->  00:03:37.420
alright so that's the first one and the
83

83

00:03:37.420  -->  00:03:43.170
second thread tr thread 2
84

84

00:03:43.170  -->  00:03:49.800
...
85

85

00:03:49.800  -->  00:04:01.620
...
86

86

00:04:01.620  -->  00:04:05.010
alright so that's the two threads and we
87

87

00:04:05.010  -->  00:04:06.270
need to start them
88

88

00:04:06.270  -->  00:04:12.200
so...
89

89

00:04:12.200  -->  00:04:20.070
....so we can run that and we are
90

90

00:04:20.070  -->  00:04:21.690
not getting any output because we
91

91

00:04:21.690  -->  00:04:23.570
haven't actually put any output in
92

92

00:04:23.570  -->  00:04:24.840
there but that's basically the way to go
93

93

00:04:24.840  -->  00:04:26.660
about doing it if you wanted to you
94

94

00:04:26.660  -->  00:04:28.500
could maybe you've actually done this
95

95

00:04:28.500  -->  00:04:31.380
you actually printed out balance just
96

96

00:04:31.380  -->  00:04:32.250
to make sure that it's actually
97

97

00:04:32.250  -->  00:04:33.690
depositing and withdrawing the right
98

98

00:04:33.690  -->  00:04:36.030
amounts so that's the first way of doing
99

99

00:04:36.030  -->  00:04:39.510
it now the second ways to create and
100

100

00:04:39.510  -->  00:04:41.070
start threads to use the runnable
101

101

00:04:41.070  -->  00:04:43.110
interface now once again it doesn't make
102

102

00:04:43.110  -->  00:04:45.660
sense to have bank account the bank
103

103

00:04:45.660  -->  00:04:47.700
account class implements runnable going
104

104

00:04:47.700  -->  00:04:50.550
to use anonymous runnable instances I'll
105

105

00:04:50.550  -->  00:04:54.900
just comment this out now up until
106

106

00:04:54.900  -->  00:04:56.310
there because we're going to leave the
107

107

00:04:56.310  -->  00:04:58.140
last two lines they're going to start
108

108

00:04:58.140  -->  00:05:01.680
with....
109

109

00:05:01.680  -->  00:05:06.900
....
110

110

00:05:06.900  -->  00:05:09.510
...
111

111

00:05:09.510  -->  00:05:48.450
...
112

112

00:05:48.450  -->  00:05:51.030
....
113

113

00:05:51.030  -->  00:05:53.520
...
114

114

00:05:53.520  -->  00:05:56.280
and that would be the second way of
115

115

00:05:56.280  -->  00:05:59.340
doing it creating a runnable so let's
116

116

00:05:59.340  -->  00:06:01.650
challenge one let's work on another
117

117

00:06:01.650  -->  00:06:03.810
challenge now go ahead and let's look at
118

118

00:06:03.810  -->  00:06:12.440
the second challenge
119

119

00:06:12.440  -->  00:06:14.420
the second challenge is to make the bank
120

120

00:06:14.420  -->  00:06:16.700
account class thread-safe using the
121

121

00:06:16.700  -->  00:06:19.460
synchronize keyword so i hope you can
122

122

00:06:19.460  -->  00:06:21.560
see looking at that code that we had the
123

123

00:06:21.560  -->  00:06:23.360
bank account class that there is going
124

124

00:06:23.360  -->  00:06:25.340
to be thread interference when two
125

125

00:06:25.340  -->  00:06:27.470
threads are accessing the same bank
126

126

00:06:27.470  -->  00:06:30.140
account instance at the same time so we
127

127

00:06:30.140  -->  00:06:31.700
have to make the bank account class
128

128

00:06:31.700  -->  00:06:34.430
thread-safe that's our next challenge so
129

129

00:06:34.430  -->  00:06:36.650
using the synchronized keyword to make
130

130

00:06:36.650  -->  00:06:38.540
the bank account class thread safe is
131

131

00:06:38.540  -->  00:06:40.310
your challenge so have a go at doing
132

132

00:06:40.310  -->  00:06:42.620
that pause the video now and when
133

133

00:06:42.620  -->  00:06:44.300
you're ready to see my solution come
134

134

00:06:44.300  -->  00:06:46.160
back and we'll go through it pause the
135

135

00:06:46.160  -->  00:06:49.800
video
136

136

00:06:49.800  -->  00:06:52.980
so making the bank account thread safe by
137

137

00:06:52.980  -->  00:06:54.510
using the synchronized keywords so how are we
138

138

00:06:54.510  -->  00:06:56.250
going to go about that what we need to
139

139

00:06:56.250  -->  00:06:57.780
do first is going to close down the
140

140

00:06:57.780  -->  00:07:00.120
run window we need to open a bank
141

141

00:07:00.120  -->  00:07:01.680
account class because that's where we're
142

142

00:07:01.680  -->  00:07:04.170
going to be making the changes and what
143

143

00:07:04.170  -->  00:07:06.330
we want to do is synchronized any method
144

144

00:07:06.330  -->  00:07:09.360
that is updating a field so we got the
145

145

00:07:09.360  -->  00:07:11.400
deposit and withdraw methods so they're
146

146

00:07:11.400  -->  00:07:13.380
the obvious candidates to put the
147

147

00:07:13.380  -->  00:07:16.470
synchronized code in so there are two ways
148

148

00:07:16.470  -->  00:07:18.300
of doing this the first way is just to
149

149

00:07:18.300  -->  00:07:21.240
change say the method definition is
150

150

00:07:21.240  -->  00:07:25.290
public synchronized...
151

151

00:07:25.290  -->  00:07:28.830
...
152

152

00:07:28.830  -->  00:07:30.690
simple that synchronizing the entire
153

153

00:07:30.690  -->  00:07:34.200
method like so that's synchronizing
154

154

00:07:34.200  -->  00:07:36.660
the entire methods but an alternative
155

155

00:07:36.660  -->  00:07:38.460
solution would be would be to
156

156

00:07:38.460  -->  00:07:41.190
synchronize the code within the methods
157

157

00:07:41.190  -->  00:07:43.860
using this so I'm going to do is just to
158

158

00:07:43.860  -->  00:07:45.450
be consistent i'm going to take a copy
159

159

00:07:45.450  -->  00:07:52.080
of that paste it and I'll just comment
160

160

00:07:52.080  -->  00:07:53.340
out so that you got that in the
161

161

00:07:53.340  -->  00:07:55.380
original source code you need to
162

162

00:07:55.380  -->  00:07:57.210
download that let's put this back to
163

163

00:07:57.210  -->  00:07:59.040
what it was not putting synchronized in
164

164

00:07:59.040  -->  00:08:00.870
the method anymore but actually
165

165

00:08:00.870  -->  00:08:02.640
synchronizing with in so we can actually
166

166

00:08:02.640  -->  00:08:04.980
create a synchronized block so
167

167

00:08:04.980  -->  00:08:06.960
synchronized and we synchronize on this
168

168

00:08:06.960  -->  00:08:11.640
being the current object and we put the
169

169

00:08:11.640  -->  00:08:14.550
field instance variable in there likewise
170

170

00:08:14.550  -->  00:08:15.840
for the second one synchronized
171

171

00:08:15.840  -->  00:08:21.540
this again and put the code in there
172

172

00:08:21.540  -->  00:08:24.180
the code is actually changing the
173

173

00:08:24.180  -->  00:08:27.180
instance variable field so both ways
174

174

00:08:27.180  -->  00:08:30.780
are equivalent for this code but if
175

175

00:08:30.780  -->  00:08:32.310
the deposit and withdraw methods
176

176

00:08:32.310  -->  00:08:34.770
contained more code and not all the code
177

177

00:08:34.770  -->  00:08:36.840
was a critical section then the second
178

178

00:08:36.840  -->  00:08:38.160
solution which I've got on the screen
179

179

00:08:38.160  -->  00:08:39.270
now that's not commented out
180

180

00:08:39.270  -->  00:08:41.760
synchronizing on this in other words you
181

181

00:08:41.760  -->  00:08:44.790
can see on line is 25 and 31 would be a
182

182

00:08:44.790  -->  00:08:45.870
better solution
183

183

00:08:45.870  -->  00:08:48.060
remember that generally speaking we want
184

184

00:08:48.060  -->  00:08:49.770
to synchronize the smallest amount of
185

185

00:08:49.770  -->  00:08:51.900
code possible to minimize the
186

186

00:08:51.900  -->  00:08:53.760
performance impact on the application
187

187

00:08:53.760  -->  00:08:55.980
so we only want to synchronize an entire
188

188

00:08:55.980  -->  00:08:57.660
method when all the code within the
189

189

00:08:57.660  -->  00:09:00.660
method is a critical section so that's
190

190

00:09:00.660  -->  00:09:03.540
the solution to the second challenge
191

191

00:09:03.540  -->  00:09:05.270
going to stop the video here with the
192

192

00:09:05.270  -->  00:09:07.010
next video we'll move on to challenge
193

193

00:09:07.010  -->  00:09:13.850
three see you in the next video
