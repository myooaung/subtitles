WEBVTT
1
1

00:00:05.210  -->  00:00:10.180
in this video we are going to take a look at
making our classes immutable and meaning that
2

2

00:00:10.180  -->  00:00:14.190
they can't be changed once they are created
now the techniques are valuable if
3

3

00:00:14.190  -->  00:00:18.200
you want instances on your class to be
immutable but also using some of the
4

4

00:00:18.200  -->  00:00:22.180
techniques in immutable classes is a
great way to increase encapsulation
5

5

00:00:22.180  -->  00:00:26.910
and reduce errors even if your going to allow
external code to modify your class
6

6

00:00:26.910  -->  00:00:30.590
instances now we are going to use the
location class from the previous videos
7

7

00:00:30.590  -->  00:00:36.870
challenges as an example and that might lead you to think that its only a game
8

8

00:00:36.870  -->  00:00:40.280
its my code why would I want to protect the
object from external modification
9

9

00:00:40.280  -->  00:00:44.890
to really answer that question, what you want to do is to consider
modern software that supports
10

10

00:00:44.890  -->  00:00:50.730
third-party extensions or plug-ins now if your
using IntelliJ IDEA for example support
11

11

00:00:50.730  -->  00:00:54.230
other languages such as Python by
providing the plugins that can be
12

12

00:00:54.230  -->  00:00:57.940
developed by third parties now many
modern browsers as another example that
13

13

00:00:57.940  -->  00:01:03.100
have support for third-party plug-in for years
and even games allow external developers to
14

14

00:01:03.100  -->  00:01:07.670
create additional rooms or levels so
another example is Microsoft office which
15

15

00:01:07.670  -->  00:01:12.320
provides access to its objects to
macros written in VBA now all of these
16

16

00:01:12.320  -->  00:01:16.490
examples exposed to programs inner
objects to external developers who
17

17

00:01:16.490  -->  00:01:20.650
don't have access to the source code and
therefore they don’t know the
18

18

00:01:20.650  -->  00:01:24.860
implications of changes they might make
two objects if they are allowed to do that
19

19

00:01:24.860  -->  00:01:29.100
so reading the API documentation will
help them but it's reasonable for them
20

20

00:01:29.100  -->  00:01:32.680
to assume that if they're permitted to
change fields and properties then they cab go ahead
21

21

00:01:32.680  -->  00:01:36.700
and do so now we briefly discussed
one technique to be used in the location
22

22

00:01:36.700  -->  00:01:43.000
class which was the getExits getter for the
exits map which you can see on line 33
23

23

00:01:43.000  -->  00:01:47.110
so rather than return the exits object
directly which would expose it to the
24

24

00:01:47.110  -->  00:01:51.380
potential for being changed externally
we created a new HashMap object that
25

25

00:01:51.380  -->  00:01:55.880
contains all the elements of exits
and return that so external code that needs
26

26

00:01:55.880  -->  00:02:01.020
to use the exits when we displayed the list of
available exits to the player in the main
27

27

00:02:01.020  -->  00:02:05.350
class to do so there's no chance of
changing our internal map as it turns
28

28

00:02:05.350  -->  00:02:09.390
out we could in fact returned the list
of available exits as a string which
29

29

00:02:09.390  -->  00:02:12.910
maybe more convenient for our
particular program but that would have
30

30

00:02:12.910  -->  00:02:16.260
reduced flexibility in it that kind of
approach is taken as a rule
31

31

00:02:16.260  -->  00:02:20.640
the we have to consider all the possible uses
that external code may actually want to
32

32

00:02:20.640  -->  00:02:24.480
make from our map so the approach taken here
doesn't restrict external code from
33

33

00:02:24.480  -->  00:02:28.670
doing when it needs to do with a map it
just prevents that from changing our map
34

34

00:02:28.670  -->  00:02:33.200
which is obviously good from our point of view
now the second technique that we’ve used to make our
35

35

00:02:33.200  -->  00:02:37.870
fuels private and final lines 10, 11, and 12
you can see that, and that means that once
36

36

00:02:37.870  -->  00:02:42.900
they have been set that can't be changed
now you may argue that final was unnecessary
37

37

00:02:42.900  -->  00:02:46.950
here because if the fields are private then they
can’t be accessed externally anyway while
38

38

00:02:46.950  -->  00:02:51.620
that's true the use of final does
provide two benefits firstly it makes it
39

39

00:02:51.620  -->  00:02:55.500
clear to anyone reading the code that the
field shouldn't be changed and we didn't
40

40

00:02:55.500  -->  00:03:01.100
forget to write a setter and also ensure
that we don’t inadvertently change the fields
41

41

00:03:01.100  -->  00:03:05.900
if we change the code in the location class at
some time in the future, now the first
42

42

00:03:05.900  -->  00:03:10.200
point also hints at the third technique
that was employed here the fact that we
43

43

00:03:10.200  -->  00:03:14.100
didn't provide setters for the id and
description fields now as yo see
44

44

00:03:14.100  -->  00:03:16.530
throughout this course IntelliJ has got an option to generate
45

45

00:03:16.530  -->  00:03:20.440
getters and setters and it can be
tempting to get into the habit of
46

46

00:03:20.440  -->  00:03:24.220
automatically generating both setters and
getters just in case you might need them
47

47

00:03:24.220  -->  00:03:29.160
down the track but that's actually a bad
habit to get into so its much better to only
48

48

00:03:29.160  -->  00:03:33.480
provide a setter if the class actually
now it might appear first glance that the
49

49

00:03:33.480  -->  00:03:38.230
location class does in fact need to setter
for the exits available at each location and
50

50

00:03:38.230  -->  00:03:41.950
we did indeed use it to give each
location its exits takes and it may even
51

51

00:03:41.950  -->  00:03:45.790
made sense to leave the setter in our
class so that if someone else wanted to
52

52

00:03:45.790  -->  00:03:49.500
extend the game they could add new exits
from existing locations to the new ones
53

53

00:03:49.500  -->  00:03:53.780
they add but we discussing how to create
an immutable classes so will look at a
54

54

00:03:53.780  -->  00:03:59.090
technique for setting the initial exits
then preventing further change so
55

55

00:03:59.090  -->  00:04:03.510
if a class field or elements of a
immutable class like a list or a map is to be
56

56

00:04:03.510  -->  00:04:07.720
set only once and never changed again
then what it needs to be done and
57

57

00:04:07.720  -->  00:04:11.370
where it needs to be set is in the
constructor so what we're gonna go ahead
58

58

00:04:11.370  -->  00:04:14.970
and do now is modified the class
constructed to accept the map object
59

59

00:04:14.970  -->  00:04:19.530
and will change our constructor signature
and assign the passed map to our
60

60

00:04:19.530  -->  00:04:23.510
class fields and this means that we can
delete the addExits method all
61

61

00:04:23.510  -->  00:04:26.240
together so what we'll do is come back
to the constructor
62

62

00:04:26.240  -->  00:04:30.630
and in the location id and the string is
correct as is we don’t need to change does
63

63

00:04:30.630  -->  00:04:39.220
but we want to add our exits so do that we would put in…which is our type of map…
64

64

00:04:39.220  -->  00:04:45.080
for our exits will call it exits and will change this, we don’t
65

65

00:04:45.080  -->  00:04:53.310
anymore need to create a new instance anymore this will just be a case of setting it to exits, and the next line, line
66

66

00:04:53.310  -->  00:04:58.990
18 still assigns our ability to
quit out of a particular location
67

67

00:04:58.990  -->  00:05:03.490
and consequently we no longer need to use or have the addExit anymore because
68

68

00:05:03.490  -->  00:05:09.560
we are getting all the exits basically when the
objects constructed so I’m going to comment that out as well, now the class
69

69

00:05:09.560  -->  00:05:12.810
looking at this now you might think
we'll this classes is now immutable but in
70

70

00:05:12.810  -->  00:05:17.280
fact there is one more change we need to make
it truly immutable and to demonstrate
71

71

00:05:17.280  -->  00:05:22.120
why we haven't achieved immutability, what I’ll do is modify the main
72

72

00:05:22.120  -->  00:05:26.160
method to use a change location class so that we can run the program and
73

73

00:05:26.160  -->  00:05:30.130
we can see what the problem is the first
change we need to do going back to main now
74

74

00:05:30.130  -->  00:05:34.750
we are getting those errors as you can see
there is we need to use a temporary maps
75

75

00:05:34.750  -->  00:05:38.680
so that we can set up with the correct exits
for each location and we pass those
76

76

00:05:38.680  -->  00:05:40.660
to the location constructor
77

77

00:05:40.660  -->  00:05:45.720
so the first problem we aren’t gonna address yet the line 21 through 26 will start
78

78

00:05:45.720  -->  00:05:49.840
by setting up these locations and
what we need to do is create a temporary
79

79

00:05:49.840  -->  00:05:56.490
map which is going to be exits because
we now passing that as a constructor
80

80

00:05:56.490  -->  00:06:10.510
so we are gonna do map string integer and will call that temp…
81

81

00:06:10.510  -->  00:06:14.340
and obviously making that change to
82

82

00:06:14.340  -->  00:06:20.320
each of the remaining lines will be
quite tedious because obviously I’ve replaced there on line 29 on line 31 would
83

83

00:06:20.320  -->  00:06:25.410
be so I take it out there now, so would be quite
tedious to do that especially we had a
84

84

00:06:25.410  -->  00:06:29.880
full list of locations in our program but
fortunately both IntelliJ products
85

85

00:06:29.880  -->  00:06:34.290
and IDEA products and Python support
regular expressions now we are gonna cover
86

86

00:06:34.290  -->  00:06:37.500
regular expressions in more detail later
in the course so don't worry about them
87

87

00:06:37.500  -->  00:06:40.670
too much at this stage but this quick
demonstration will give you an idea of
88

88

00:06:40.670  -->  00:06:45.040
how useful it can be now we can't use a
normal search and replace because the
89

89

00:06:45.040  -->  00:06:48.180
location number appears on each line
and of course with only 5 locations
90

90

00:06:48.180  -->  00:06:52.900
we could just do 5 searches and replace, but the full
game will have many more than 5 locations
91

91

00:06:52.900  -->  00:06:58.150
so what we can do is use the Find and
Replace for the regular expressions
92

92

00:06:58.150  -->  00:07:04.190
so go to the Edit menu and choose
find then replace and I think its
93

93

00:07:04.190  -->  00:07:09.250
control+ r on a PC and you can see to
the right command R is the key stroke
94

94

00:07:09.250  -->  00:07:13.290
to the shortcut cut opens up this
little find window then you need to make sure
95

95

00:07:13.290  -->  00:07:18.120
that the regular expression is actually
checked because that's an indication that
96

96

00:07:18.120  -->  00:07:21.570
we're typing a regular expression what we want to do is change this so I’m going to type
97

97

00:07:21.570  -->  00:07:25.160
locations…
98

98

00:07:25.160  -->  00:07:36.910
and you can see the
99

99

00:07:36.910  -->  00:07:37.810
match there on the screen
100

100

00:07:37.810  -->  00:07:42.300
IntelliJ is showing you what its matching based on what we've typed so we wanna
101

101

00:07:42.300  -->  00:07:47.030
replace all of that now with the syntax
that we got on line 29 so change that with
102

102

00:07:47.030  -->  00:07:56.480
temp…and the rest that are not highlighted on line 31 through 33 is still going to be
103

103

00:07:56.480  -->  00:08:00.840
valid as you can see from there thats
pretty cool you can see how IntelliJ
104

104

00:08:00.840  -->  00:08:04.540
based on the expression that we've
typed in is smart enough to figure out
105

105

00:08:04.540  -->  00:08:07.640
what we're trying to achieve with a
regular expression and we can now do a
106

106

00:08:07.640  -->  00:08:13.710
replace all and that's all done and we haven’t have to type all these things manually so that's got our
107

107

00:08:13.710  -->  00:08:17.760
solution so the only other thing we want
to do here is we want to make sure that
108

108

00:08:17.760  -->  00:08:22.710
we are new setting tempexit to new HashMap after each room
109

109

00:08:22.710  -->  00:08:27.910
so that the previous rooms exits aren’t
included in that new room so
110

110

00:08:27.910  -->  00:08:47.330
I’m just gonna copy and paste that before
each section for each room, location 1,2,3,4,5 and
111

111

00:08:47.330  -->  00:08:53.010
6 now, and just a typo there, we won’t need it because that there because that was the
112

112

00:08:53.010  -->  00:09:00.570
room so our main room on room 1 is location 1 has got the for exits so onsequently we've got like location 1
113

113

00:09:00.570  -->  00:09:05.630
location 2, location 3, location 4,
location 5 is now all defined
114

114

00:09:05.630  -->  00:09:09.880
for the various exits that are valid for that
so all that's left now is
115

115

00:09:09.880  -->  00:09:15.330
to move the lines 21 to 26 into the
appropriate area after it's exits
116

116

00:09:15.330  -->  00:09:19.970
have been defined and to pass the tempexits
map to the constructor so we gonna do
117

117

00:09:19.970  -->  00:09:30.070
this we are gonna select each one we’re gonna start on room 1 their, and ill do room 0 separately because that's a
118

118

00:09:30.070  -->  00:09:46.920
special case
119

119

00:09:46.920  -->  00:09:57.880
and we should be able to do is use another search here we don’t need a regular expression for it to
120

120

00:09:57.880  -->  00:10:02.270
quickly make a change just the save us
having to type
121

121

00:10:02.270  -->  00:10:08.490
so we can select that and come up here and we could
just do a search for right bracket, right bracket
122

122

00:10:08.490  -->  00:10:16.290
turn off the regex, semi colon, replace that with
123

123

00:10:16.290  -->  00:10:26.220
comma… so now if I do a replace all
that should fix it and obviously on line
124

124

00:10:26.220  -->  00:10:31.510
0 I need to fix it up shortly which ill do and we
should be good to go and be careful when
125

125

00:10:31.510  -->  00:10:35.770
you are selecting when you are doing a replace
all that your not replacing more
126

126

00:10:35.770  -->  00:10:39.870
than you thought what I could probably should
have done is selected that range in here
127

127

00:10:39.870  -->  00:10:44.490
you can actually click on in selection
that would only do the changes that were
128

128

00:10:44.490  -->  00:10:48.770
valid for that selection rather than the
whole file so keep in that mind when your
129

129

00:10:48.770  -->  00:10:52.610
doing your searches, alright do a command R to close it
130

130

00:10:52.610  -->  00:10:58.910
ok so the last thing we need to do now, so
131

131

00:10:58.910  -->  00:11:03.060
we’ve got our code working for the various news the only special case we
132

132

00:11:03.060  -->  00:11:12.940
need to do is for the first room and what will do there, I’m just going create that there for the first time, and I’m just going to take a
133

133

00:11:12.940  -->  00:11:17.760
copy and paste it in there for our room so
consequently now we should be good to go
134

134

00:11:17.760  -->  00:11:23.970
and we got an error here, and I think this was the mistake I
made when I did that global search
135

135

00:11:23.970  -->  00:11:28.180
and replace that why its always handy to
use it in selection to make sure you only
136

136

00:11:28.180  -->  00:11:35.760
select certain things not the whole
thing so we just need to remove that, so we are almost
137

137

00:11:35.760  -->  00:11:39.010
done at this point, if we run the program
we should find everything
138

138

00:11:39.010  -->  00:11:51.630
still works so I should be able to type in
north, south, north, go west, quit now ,that's alll
139

139

00:11:51.630  -->  00:11:53.210
working
140

140

00:11:53.210  -->  00:11:57.330
but we still do have one problem that
exposes our location class and just to show
141

141

00:11:57.330  -->  00:12:02.670
you what I mean come down here to the while loop and just
after the printing out of the location
142

142

00:12:02.670  -->  00:12:17.970
description we could do something like this temp… so we run that, so if we go north, we now
143

143

00:12:17.970  -->  00:12:23.670
suddenly got no south that's because we
managed to remove it from the
144

144

00:12:23.670  -->  00:12:28.510
class that's calling our location class
was able to delete part of the map so had we
145

145

00:12:28.510  -->  00:12:32.720
created a new map for each location
instead of reusing tempExit we could
146

146

00:12:32.720  -->  00:12:36.810
have wrecked havoc on the exits for all locations and
147

147

00:12:36.810  -->  00:12:40.000
not just the last one and the reason
we're able to do this is because we
148

148

00:12:40.000  -->  00:12:43.810
still had a reference to the exits
map for location 5 which of course was
149

149

00:12:43.810  -->  00:12:47.930
the forest so to cure the problem we need to
use the same technique as we did for the
150

150

00:12:47.930  -->  00:12:52.640
get exits method only now we're going to
apply it to setter instead of to a getter
151

151

00:12:52.640  -->  00:12:59.880
so what I mean by that, go back to our location and in our constructor on line
152

152

00:12:59.880  -->  00:13:03.390
17 what we gonna do is change that
153

153

00:13:03.390  -->  00:13:13.620
to be equal to a new HashMap exits and if we run this, just to confirm it works, and we go north again
154

154

00:13:13.620  -->  00:13:21.630
now, now get correctly our south even though
back in this code here, we’ve added the code to remove s from
155

155

00:13:21.630  -->  00:13:25.930
the tempexit it hasn't affected
our location class at all that's because we've
156

156

00:13:25.930  -->  00:13:31.520
created a new HashMap based on this HashMap that
was passed to us so at this point you
157

157

00:13:31.520  -->  00:13:36.090
could say that the class is now fully
immutable once an instance is
158

158

00:13:36.090  -->  00:13:40.680
created it can't be changed and again
this means it could be used as a key to
159

159

00:13:40.680  -->  00:13:44.280
a map with no ill effects although I did
this to really demonstrate to techniques
160

160

00:13:44.280  -->  00:13:48.560
not because of any particularly good
reason for making our location a key
161

161

00:13:48.560  -->  00:13:51.710
even though we don't want to use it as a
key though these techniques have
162

162

00:13:51.710  -->  00:13:55.970
resulted in a very secure class that fully
encapsulates its fields
163

163

00:13:55.970  -->  00:14:00.300
depending on the functionality class
must provide it may not be possible to
164

164

00:14:00.300  -->  00:14:03.800
employ all these techniques they should
certainly be considered and you should
165

165

00:14:03.800  -->  00:14:06.590
be doing that when you're creating
classes considering these things
166

166

00:14:06.590  -->  00:14:10.340
in as many of them as possible used in
order to increase encapsulation and of
167

167

00:14:10.340  -->  00:14:14.160
course reduce errors as a result now there is
one step that oracle recommends
168

168

00:14:14.160  -->  00:14:19.180
when creating fully immutable classes
and I'm going to open up the link here
169

169

00:14:19.180  -->  00:14:28.890
in a browser, link will be in the Resources
section, you see the 4 points
170

170

00:14:28.890  -->  00:14:32.660
that are covering their so we've
covered point one don’t provide setter methods
171

171

00:14:32.660  -->  00:14:37.850
those no setters in our class, part 2 is to make all fields final and private
172

172

00:14:37.850  -->  00:14:41.450
and we’ve done that so point two is done with us as well we do
have references to immutable object the
173

173

00:14:41.450  -->  00:14:45.830
exits map and we've removed our exits
as method that might modified the map and we also
174

174

00:14:45.830  -->  00:14:50.250
change the constructor and getter exits so that
we're not sharing references to the map
175

175

00:14:50.250  -->  00:14:54.350
looking at that point for is also
covered as well and of course we did
176

176

00:14:54.350  -->  00:14:58.270
part 3 as well by declaring the
classes final looking back on this again
177

177

00:14:58.270  -->  00:15:02.160
we didn't defined the classes as final but we defined all are variables so
178

178

00:15:02.160  -->  00:15:06.890
it's not just overriding methods the can prevent our class from being immutable, adding new
179

179

00:15:06.890  -->  00:15:11.170
methods that expose our map will also do
so and obviously hence instructions
180

180

00:15:11.170  -->  00:15:15.660
should really read here on part three is
probably more accurate to say don't allow
181

181

00:15:15.660  -->  00:15:18.800
a class to be sub classed and that's
actually where the two recommendations
182

182

00:15:18.800  -->  00:15:23.080
were achieved as we saw in the previous
section making a class final prevents
183

183

00:15:23.080  -->  00:15:26.270
it from being sub class so the more
sophisticated approach of making the
184

184

00:15:26.270  -->  00:15:30.800
constructor private also prevents the
class from being sub classed as well okay so
185

185

00:15:30.800  -->  00:15:34.870
I'm going to end the video here in the next
video we are just going finalizes the
186

186

00:15:34.870  -->  00:15:39.370
discussion about immutability and I'm
gonna come up with another challenge so
187

187

00:15:39.370  -->  00:15:40.350
I'll see you in the next video
