1
1

00:00:04,870  -->  00:00:08,790
alright so let's take a look at how we
can work with background threads in the
2

2

00:00:08,790  -->  00:00:13,710
UI applications now with the javafx
section of this course we took a look at
3

3

00:00:13,710  -->  00:00:18,580
the javafx.concurrent package when
working with threads in a UI
4

4

00:00:18,580  -->  00:00:23,650
application this is the go-to package to
use when we want to perform a background
5

5

00:00:23,650  -->  00:00:28,810
task we use a class that implements the
worker interface or a class that extends
6

6

00:00:28,810  -->  00:00:34,180
the task class let's take a look at
extending the task class now the task
7

7

00:00:34,180  -->  00:00:39,120
class implements the runnable interface
and we can use task objects whenever or
8

8

00:00:39,120  -->  00:00:44,320
wherever we use runnable objects so
let's start by creating a new javafx
9

9

00:00:44,320  -->  00:00:49,420
project so i'm gonna click
on create new project going to select
10

10

00:00:49,420  -->  00:01:02,580
javafx next and let's call this
one task example and get that started so
11

11

00:01:02,580  -->  00:01:06,030
what we're going to do here is we're
going to simulate fetching data from a
12

12

00:01:06,030  -->  00:01:10,930
database on a background thread which is
a common situation in a UI application
13

13

00:01:11,770  -->  00:01:16,210
another example would be fetching data
from the internet so we'll get that data
14

14

00:01:16,210  -->  00:01:20,050
on a background thread using a task so
the first thing we need to do then is
15

15

00:01:20,050  -->  00:01:24,970
create an anonymous task object we need
to access the task within the controller
16

16

00:01:24,970  -->  00:01:29,410
so if the simplicity we're going to
create it in the controller java
17

17

00:01:29,410  -->  00:01:30,220
file
18

18

00:01:30,220  -->  00:01:34,810
let's go ahead and do that and we've got
that open as you can see there and what
19

19

00:01:34,810  -->  00:01:41,650
we'll do is set up and will need a need
to add a method in this class called
20

20

00:01:41,650  -->  00:01:45,370
initialize and we need to create the
task within that if you recall the
21

21

00:01:45,370  -->  00:01:49,240
initialize method is run whenever the
controller instance is created we went
22

22

00:01:49,240  -->  00:01:51,610
through that in detail in the javafx
section
23

23

00:01:51,610  -->  00:02:01,150
alright so let's get started....
24

24

00:02:01,150  -->  00:02:05,110
and if some of this is not making sense or you want to know more about
25

25

00:02:05,110  -->  00:02:09,370
javafx do go back and check out the
javafx section it might actually be
26

26

00:02:09,370  -->  00:02:13,740
worthwhile to go back and look at that
and before going through this examples
27

27

00:02:13,740  -->  00:02:16,970
particularly if something its not making sense
28

28

00:02:16,970  -->  00:02:23,720
so we are defining our task first and let's
create our public void initialize method
29

29

00:02:23,720  -->  00:02:30,110
which is used by javafx to initialize
and then want to initialize a task a
30

30

00:02:30,110  -->  00:02:36,740
task.....and you can see by
doing that I managed to get it to create
31

31

00:02:36,740  -->  00:02:41,330
a lot of this code for us come down here and put a semicolon to make it
32

32

00:02:41,330  -->  00:02:46,430
valid to close the statement off and the
idea there is that when creating a
33

33

00:02:46,430  -->  00:02:50,450
class that extends task we have to
override the call method and that's
34

34

00:02:50,450  -->  00:02:56,000
obviously I did their now let's suppose that we are
fetching a list of employee names so
35

35

00:02:56,000  -->  00:02:59,270
we're going to return the list as an
observable list of strings you can see
36

36

00:02:59,270  -->  00:03:03,170
that we got the return type defined in their
the call method and so we've specified
37

37

00:03:03,170  -->  00:03:07,400
that return type and declaring the task
variable so obviously when we got
38

38

00:03:07,400  -->  00:03:11,360
IntelliJ to generate the code for us it
knew based on what I've typed in here
39

39

00:03:11,360  -->  00:03:15,380
under the Declaration of tasks that it need
to return that observable list of string
40

40

00:03:15,380  -->  00:03:16,070
objects
41

41

00:03:16,070  -->  00:03:20,690
alright so inside the call method we
need to perform the background task
42

42

00:03:20,690  -->  00:03:25,010
itself so we're going to put some code
in there i'm going to delete this null
43

43

00:03:25,010  -->  00:03:30,320
return null statement first I'm going to
get it to sleep so...
44

44

00:03:30,320  -->  00:03:39,590
...then we'll
just return...
45

45

00:03:39,590  -->  00:03:52,190
....and what I'll do
is type some names...
46

46

00:03:53,110  -->  00:04:13,690
....so I'll pretend
47

47

00:04:13,690  -->  00:04:19,030
database query is going to return six
records and as you saw on line 15 we have
48

48

00:04:19,030  -->  00:04:23,590
introduced a sleep for one second and
that's simulating simulating the
49

49

00:04:23,590  -->  00:04:28,780
database fetch and we need to make sure
that any of our imports or the javafx
50

50

00:04:28,780  -->  00:04:32,410
varieties in other words if you're
getting any errors here most likely its
51

51

00:04:32,410  -->  00:04:37,330
because the javafx wasn't used in the
import so do check your import lines
52

52

00:04:37,330  -->  00:04:41,440
if you are getting errors now notice that
we are throwing exception from the call
53

53

00:04:41,440  -->  00:04:47,020
method here on line 14 now we do so
because the thread.sleep method can
54

54

00:04:47,020  -->  00:04:51,040
actually throw and interrupted exception
now rather than using a try-catch block
55

55

00:04:51,040  -->  00:04:55,090
we just throwing the exception from the
method to keep the example code simple
56

56

00:04:55,090  -->  00:04:58,960
but in a real world application you'd
probably want catch that
57

57

00:04:58,960  -->  00:05:00,460
error and do something with it
58

58

00:05:00,460  -->  00:05:05,110
alright so next we need to start this
thread from the user interface now in the
59

59

00:05:05,110  -->  00:05:09,790
sample.fxml file that comes with all
the javafx projects we need to add a
60

60

00:05:09,790  -->  00:05:14,140
button its going to start the task when
that button is pressed lets just go and open
61

61

00:05:14,140  -->  00:05:20,650
it up and grab that file or at least open
it so we can work on it...
62

62

00:05:20,650  -->  00:05:23,110
and we'll add the button so within the grid pane
63

63

00:05:23,110  -->  00:05:31,870
we're going to do a....
64

64

00:05:31,870  -->  00:05:38,830
...that will be the method that
65

65

00:05:38,830  -->  00:05:44,500
is executed and its in red because we
haven't written it yet and....
66

66

00:05:44,500  -->  00:05:52,240
....
67

67

00:05:52,240  -->  00:05:58,750
....so next
we need to add this action listener that
68

68

00:05:58,750  -->  00:06:04,000
we just defined here on line 8 into
our controller going to add
69

69

00:06:04,000  -->  00:06:06,640
this down here underneath the initialize
method
70

70

00:06:06,640  -->  00:06:11,770
its going to be....
71

71

00:06:12,400  -->  00:06:20,620
we need to annotate that as we need to
do for FXML.....and if
72

72

00:06:20,620  -->  00:06:24,310
you go back and look at our sample now
notice that that's now change color
73

73

00:06:24,310  -->  00:06:28,630
because it's now linked it to this code
here and in terms of what we're going to
74

74

00:06:28,630  -->  00:06:33,250
do to process this what actually
need to take after the button is clicked
75

75

00:06:33,250  -->  00:06:37,480
we're going to do a new thread and
task
76

76

00:06:41,090  -->  00:06:42,690
and we defined
77

77

00:06:42,690  -->  00:06:46,840
the task on line 10 and then we've actually
put what's going to happen what's gonna
78

78

00:06:46,840  -->  00:06:51,090
happen in terms of functionality in our task when we defined that in the
79

79

00:06:51,090  -->  00:06:55,930
initialize method we're going to pass
or do a new thread task.start to
80

80

00:06:55,930  -->  00:06:57,210
start the thread
81

81

00:06:57,210  -->  00:07:08,220
alright so let's actually just run this
alright so I just press the get employee names
82

82

00:07:08,220  -->  00:07:13,470
button now looks like nothing happened
but in fact the task did run but we need
83

83

00:07:13,470  -->  00:07:17,430
to show the employee named in the user
interface but recall that we can only
84

84

00:07:17,430  -->  00:07:23,130
access UI controls on the main thread
the javafx applications thread that is
85

85

00:07:23,130  -->  00:07:28,410
because the controls themselves aren't
thread-safe now rather than making them
86

86

00:07:28,410  -->  00:07:33,610
thread-safe javafx enforces the
rule that all code that touches the user
87

87

00:07:33,610  -->  00:07:38,740
interface must run on the javafx
application thread that way threads
88

88

00:07:38,740  -->  00:07:42,240
can't interfere with each other when
they're updating or when updating the UI
89

89

00:07:42,240  -->  00:07:47,580
component so how do we update the UI with the results of a task we ran on
90

90

00:07:47,580  -->  00:07:48,750
a background thread
91

91

00:07:48,750  -->  00:07:52,770
well it's actually a couple of ways to
we can do this let's go back we're going
92

92

00:07:52,770  -->  00:07:59,880
to close down the program first let's go
back to our fxml file just close down the
93

93

00:07:59,880  -->  00:08:05,080
run window so let's add a list
view which will display the list of
94

94

00:08:05,080  -->  00:08:12,520
employee names so below the button it's
going to be....
95

95

00:08:12,520  -->  00:08:27,750
....
96

96

00:08:30,080  -->  00:08:38,000
......we need to reference
the listview in the controller so i'm
97

97

00:08:38,000  -->  00:08:45,050
going to set its fx ID...we are going to set that equal to listview so
98

98

00:08:45,050  -->  00:08:50,600
that we can update that and reference that as I mentioned in code so let's just run this
99

99

00:08:50,600  -->  00:08:57,440
to make sure that we can see the listview first okay i can expand the window
100

100

00:08:57,440  -->  00:09:01,160
if we need to expand the window to make
it larger you can see we can clearly see
101

101

00:09:01,160  -->  00:09:07,610
the listview there so that's good well
close it down so we have to increase the
102

102

00:09:07,610  -->  00:09:11,660
height and the length of the window to
see the entire listview as you saw me do now  we
103

103

00:09:11,660  -->  00:09:15,050
could increase the height when we create
this scene but i'll leave that as an
104

104

00:09:15,050  -->  00:09:18,740
exercise for you to look at later since
we've worked on code similar to that in
105

105

00:09:18,740  -->  00:09:23,210
the javafx section in any event since
there's only six items we won't need to
106

106

00:09:23,210  -->  00:09:25,670
increase the height very much to see them
all anyway
107

107

00:09:25,670  -->  00:09:32,000
alright so going back to the controller
we need to define the listview we are going
108

108

00:09:32,000  -->  00:09:36,230
define it up here below the task we've
implemented on line we've defined on line
109

109

00:09:36,230  -->  00:09:44,870
10 and the do....making sure the names are the same
110

110

00:09:44,870  -->  00:09:51,440
and I'll import that making sure that i
select the javafx.seen and not
111

111

00:09:51,440  -->  00:09:59,000
the javafx.swing and we need
to annotate that and fxml make sure that
112

112

00:09:59,000  -->  00:10:04,880
that's valid and it links correctly so now
that we've done that we can update the
113

113

00:10:04,880  -->  00:10:10,070
list view by using the platform.run
later method now this method accepts
114

114

00:10:10,070  -->  00:10:15,320
runnable accept a runnable and runs it
on the UI thread now our task is a
115

115

00:10:15,320  -->  00:10:19,340
runnable but we don't want to run our
task on the UI thread we want to update
116

116

00:10:19,340  -->  00:10:24,590
the list view when the tasks complete
will call run later when the task wakes
117

117

00:10:24,590  -->  00:10:29,510
up from sleeping will have to create our
observable list earlier rather than the
118

118

00:10:29,510  -->  00:10:34,010
return statement so that we can use it
to set the listview let's change the
119

119

00:10:34,010  -->  00:10:37,370
code a little bit here instead of
doing a return there
120

120

00:10:37,370  -->  00:10:41,370
we're going to do observable list....
121

121

00:10:41,370  -->  00:10:50,700
...
122

122

00:10:50,700  -->  00:10:55,710
and what we had defined their previously
then after that we're going to do is do
123

123

00:10:55,710  -->  00:11:05,250
a platform.....like
so and you can see that IntelliJ
124

124

00:11:05,250  -->  00:11:09,390
helpfully added the extra code for us
and the code that we want to run it will
125

125

00:11:09,390  -->  00:11:17,640
be listview....but
also what I need to do is put a
126

126

00:11:17,640  -->  00:11:22,650
return.....because we've gotta
some data that needs to be returned so
127

127

00:11:22,650  -->  00:11:24,120
put that in there
128

128

00:11:24,120  -->  00:11:30,390
alright so let's run this and see
whether it works I'm just gonna expand
129

129

00:11:30,390  -->  00:11:36,210
this in preparation and click on get
employee names you can see that there
130

130

00:11:36,210  -->  00:11:40,680
was a delay their over a second then the
listview got updated so you might be
131

131

00:11:40,680  -->  00:11:44,400
wondering why we're returning the list
from the task this is the line that i
132

132

00:11:44,400  -->  00:11:49,200
added just before we ran it on line 38
since we're updating the list view from
133

133

00:11:49,200  -->  00:11:52,890
the task we don't have to return the
list when we use performed.runlater
134

134

00:11:52,890  -->  00:11:57,450
to update the UI but we do need to
return it for the second way that
135

135

00:11:57,450  -->  00:12:03,240
we can update the UI from a task so
while we can use platform.runlater to
136

136

00:12:03,240  -->  00:12:09,240
update the UI it's not good practice to
tie a task to the UI in this way if we
137

137

00:12:09,240  -->  00:12:14,010
have a change the UI would also have to
change the task so in general the UI
138

138

00:12:14,010  -->  00:12:19,080
code and the code that processes data
should be kept separate so there's a
139

139

00:12:19,080  -->  00:12:23,330
better way to update the list view and
this is the recommended way to do it
140

140

00:12:23,850  -->  00:12:28,650
so instead of using platform.run
later we can use what's called data
141

141

00:12:28,650  -->  00:12:34,050
binding so the task class is a property
called value which is the value returned
142

142

00:12:34,050  -->  00:12:39,630
by the task in our example it would be
the observable list of strings the list
143

143

00:12:39,630  -->  00:12:44,310
view control has a property called items
and that contains the items that the
144

144

00:12:44,310  -->  00:12:48,990
list view is displaying what we're going
to do is bind the items property in the
145

145

00:12:48,990  -->  00:12:54,630
tasks value property whatever the value
property changes the items property will
146

146

00:12:54,630  -->  00:12:55,200
update
147

147

00:12:55,200  -->  00:12:59,040
accordingly we no longer have to
explicitly update the list view by
148

148

00:12:59,040  -->  00:13:03,720
calling platform.runlater so lets give
that a go so I'm just going to close
149

149

00:13:03,720  -->  00:13:10,080
this down the run window again so
basically all this code here remains the
150

150

00:13:10,080  -->  00:13:15,870
same right until the end of the
Declaration what we then do is remove
151

151

00:13:15,870  -->  00:13:22,830
this platform.runlater so we're going to
be doing that anymore and then below
152

152

00:13:22,830  -->  00:13:36,210
afterward we defined the task we do.....
153

153

00:13:36,210  -->  00:13:44,100
we're going to bind task.value
property as you can see so after
154

154

00:13:44,100  -->  00:13:48,660
declaring the task we bind the list
views items property to the tasks value
155

155

00:13:48,660  -->  00:13:54,720
property can see that on line 34 so lets
run the codes to check that it
156

156

00:13:54,720  -->  00:14:05,430
works you can see there was a pause
there after a while and then it did
157

157

00:14:05,430  -->  00:14:10,410
actually work we saw that the employee
names appear in the list view so great
158

158

00:14:10,410  -->  00:14:14,520
so we're performing a long-running task
on a background thread and updating the
159

159

00:14:14,520  -->  00:14:19,230
task on the UI thread better yet the
task doesn't know anything about the UI
160

160

00:14:19,230  -->  00:14:22,740
all it's doing is returning a list of
names and it doesn't actually care what
161

161

00:14:22,740  -->  00:14:24,420
happens to it after that
162

162

00:14:24,420  -->  00:14:28,440
so a list can be written to a file display
it on the screen printed to the console
163

163

00:14:28,440  -->  00:14:30,330
or used for something else
164

164

00:14:30,330  -->  00:14:34,290
it actually doesn't matter to the task
code and it's not tied to the UI now in
165

165

00:14:34,290  -->  00:14:38,700
any way so we can do other things with
tasks such as passing parameters to them
166

166

00:14:38,700  -->  00:14:43,980
and executing code when they completed
if you're interested you can what
167

167

00:14:43,980  -->  00:14:48,000
you can do with tasks you can read more
about the task documentation here i'm
168

168

00:14:48,000  -->  00:14:52,020
just going to quickly bring that up in
a browser
169

169

00:14:54,700  -->  00:14:58,420
so there's a link which will be in the
resources section so you can find out a
170

170

00:14:58,420  -->  00:15:01,420
lot more information at that link if you
so desire
171

171

00:15:04,840  -->  00:15:08,800
alright so the application is working
fine but we're going to actually look at
172

172

00:15:08,800  -->  00:15:10,900
enchaining this in the next video
173

173

00:15:10,900  -->  00:15:14,290
let's just imagine that it takes 10
seconds to fetch a large group of
174

174

00:15:14,290  -->  00:15:18,970
records from a slow database would be
great to have a progress bar so that we
175

175

00:15:18,970  -->  00:15:21,700
can see that something's working in that
the updates happening
176

176

00:15:21,700  -->  00:15:24,070
let's look at implementing that in the
next video
