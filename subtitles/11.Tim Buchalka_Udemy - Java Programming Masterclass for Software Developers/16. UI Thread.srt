1
1

00:00:05,460  -->  00:00:09,450
so just as a recap we've now got our
program working with buttons being
2

2

00:00:09,450  -->  00:00:13,610
enabled and disabled so I'm just running the
app again obviously the buttons are now
3

3

00:00:13,610  -->  00:00:19,400
disabled by default if we type something in
you can see they are now enabled they actually work
4

4

00:00:20,640  -->  00:00:26,810
and if I delete the content the button automatically get disabled in
additionally if I use white space
5

5

00:00:26,810  -->  00:00:30,340
characters like a space the buttons don't get
enabled because we're specifically
6

6

00:00:30,340  -->  00:00:35,090
trimming the contents before checking to
see whether something in their so that is all
7

7

00:00:35,090  -->  00:00:35,890
working well
8

8

00:00:35,890  -->  00:00:42,100
close that so let's continue on a bit
now and what we're going to do is going
9

9

00:00:42,100  -->  00:00:48,070
to add a checkbox to our UI so go down here and put it below our button I'm gonna put
10

10

00:00:48,070  -->  00:00:55,940
it on rowindex 2 so....
11

11

00:00:55,940  -->  00:01:08,040
...
12

12

00:01:08,040  -->  00:01:13,450
....
13

13

00:01:13,450  -->  00:01:17,140
...and we need a col span of 2 because
we got some text their so...
14

14

00:01:18,790  -->  00:01:24,890
....now we
could actually add an event handler that
15

15

00:01:24,890  -->  00:01:29,180
listens for whenever the check box is
selected or deselected but we wouldn't
16

16

00:01:29,180  -->  00:01:33,540
typically do that for most controls we
really only care about the state of the
17

17

00:01:33,540  -->  00:01:37,640
control when the user indicates that
they finished inputting data
18

18

00:01:37,640  -->  00:01:43,180
typically they do this by pressing the ok button on a dialogue or perhaps
19

19

00:01:43,180  -->  00:01:47,570
pressing the Save button on the toolbar
or something along those lines so at
20

20

00:01:47,570  -->  00:01:52,670
that point the event handler for the ok
or save button would gather the state's
21

21

00:01:52,670  -->  00:01:57,650
of all the controls so when we have a
checkbox on a dialogue we only need to know
22

22

00:01:57,650  -->  00:02:01,520
if it's selected when the user presses
the ok button because that's when we'll
23

23

00:02:01,520  -->  00:02:05,560
actually process the user input so we
don't care how many times a user checks
24

24

00:02:05,560  -->  00:02:07,090
and unchecks check box
25

25

00:02:07,090  -->  00:02:09,090
up until that point
26

26

00:02:09,090  -->  00:02:13,660
now of course like anything there are
exceptions to this and you know sometimes when
27

27

00:02:13,660  -->  00:02:17,180
the user clicks a checkbox that might
change you know which radio button is
28

28

00:02:17,180  -->  00:02:22,220
selected or perhaps it will change the position
of a thumb on a slider and if that's the
29

29

00:02:22,220  -->  00:02:26,060
case we want to change other parts of
the UI like for example the user
30

30

00:02:26,060  -->  00:02:30,000
could be using a slider to indicate how
many tickets that want to buy and
31

31

00:02:30,000  -->  00:02:34,590
the UI will update the total cost of
the tickets when they let go of the sliders thumb so there
32

32

00:02:34,590  -->  00:02:38,160
are scenarios where you do want to do that but
most of the time we really only care about
33

33

00:02:38,160  -->  00:02:43,720
the state of some controls when the user
presses ok save or buy or does something
34

34

00:02:43,720  -->  00:02:46,950
else that essentially means that I'm
finished you can go ahead and process the
35

35

00:02:46,950  -->  00:02:52,370
data now but with that said we are
learning about event and event handlers
36

36

00:02:52,370  -->  00:02:56,140
so we're going to listen for when the
user checks and unchecks our check box
37

37

00:02:56,140  -->  00:03:00,090
now as you may have guessed from the
checkboxes text we also look at the
38

38

00:03:00,090  -->  00:03:04,450
state of the check box when the user
presses a button so if the checkbox is
39

39

00:03:04,450  -->  00:03:08,140
checked we're gonna clear the text field
after we printed the hello or bye mesage and if
40

40

00:03:08,140  -->  00:03:13,720
it isn't checked we won't clear the text
so first we need to do is go back to our
41

41

00:03:13,720  -->  00:03:20,060
controller and we need to basically work on
the event handlers so lets do that so
42

42

00:03:20,060  -->  00:03:32,040
come back in here and first add our check box so....
43

43

00:03:32,040  -->  00:03:36,040
...and notice how I selected the wrong because
44

44

00:03:36,040  -->  00:03:40,600
I typed box with a lowercase b
and of course it should be uppercase so I'm gonna undo
45

45

00:03:40,600  -->  00:03:45,090
that change and come back here and change that  to checkbox this is why
46

46

00:03:45,090  -->  00:03:48,470
its often very important to check your
imports to make sure you're selecting
47

47

00:03:48,470  -->  00:03:53,540
the right controls and you can see basically it just got JavaFX in the package
48

48

00:03:53,540  -->  00:03:57,280
name somewhere you need in the
right place so that's the one we want so I'm
49

49

00:03:57,280  -->  00:04:05,790
going to select that one and call this one....and then call our event handler for this
50

50

00:04:05,790  -->  00:04:10,060
one....and the other
things I need to do is put annotate it with
51

51

00:04:10,060  -->  00:04:15,220
....
52

52

00:04:17,110  -->  00:04:24,730
...ok so lets go down and write that method so the method is going
to be handled change and all its gonna do
53

53

00:04:24,730  -->  00:04:28,080
is print at the moment whether the check
box is selected into the consoles so....
54

54

00:04:28,080  -->  00:04:45,220
....
55

55

00:04:45,220  -->  00:04:49,910
...is the method to
determine whether it is selected or not
56

56

00:04:49,910  -->  00:05:00,350
and put..... and the next thing we need to do is
57

57

00:05:00,350  -->  00:05:06,660
switch back to our FXML and we need to
assign and ID to our check box so that the
58

58

00:05:06,660  -->  00:05:10,520
relationship between the control
code and the fxml is set so
59

59

00:05:10,520  -->  00:05:18,470
that our event handler can be invoked so that's going
to be.....
60

60

00:05:18,470  -->  00:05:22,100
....and notice how
conveniently IntelliJ looked in our
61

61

00:05:22,100  -->  00:05:25,100
controller code and found that so....
62

62

00:05:26,640  -->  00:05:31,520
IntelliJ's is really clever for things like this it just saves you a lot of time and making sure that you
63

63

00:05:31,520  -->  00:05:36,240
know you associations that you typing are actually correct which is great and
64

64

00:05:36,240  -->  00:05:39,360
the other thing of course we need to add
in addition to that is our on action
65

65

00:05:39,360  -->  00:05:45,110
what event handler  we want invoke when there is an action so put...
66

66

00:05:45,110  -->  00:05:51,690
...so next
67

67

00:05:51,690  -->  00:05:56,810
we are going to update our buttons event handlers so that actually checks
the state of the check box and again if
68

68

00:05:56,810  -->  00:05:58,540
the checkbox is checked
69

69

00:05:58,540  -->  00:06:02,110
we're going to clear the text field
after we print the hello bye message on
70

70

00:06:02,110  -->  00:06:07,220
the console so lets go and do that back in controller and of course it's in on
71

71

00:06:07,220  -->  00:06:11,060
button click method so gonna leave the
code in here that actually prints out a
72

72

00:06:11,060  -->  00:06:16,080
message hello or bye depending on which button
was pressed but what we also want to do after that
73

73

00:06:16,080  -->  00:06:21,080
will do a check...
74

74

00:06:22,370  -->  00:06:26,960
so if it is checked in other words then we are just
gonna do....to clear the
75

75

00:06:26,960  -->  00:06:28,920
contents of the text field
76

76

00:06:28,920  -->  00:06:35,740
so lets just test our code and see it is
actually working so I'm gonna run this is and their our
77

77

00:06:35,740  -->  00:06:40,040
example there's our checkbox on the screen so what I'm going do first is we are gonna leave the checkbox
78

78

00:06:40,040  -->  00:06:42,460
unchecked and if we typed Tim....
79

79

00:06:42,460  -->  00:06:49,620
click on say hello you get the message
and nothing's changed the text remains in
80

80

00:06:49,620  -->  00:06:53,460
the text field as you can see there and next
we will check the checkbox clear that field
81

81

00:06:53,460  -->  00:06:57,550
and say hello and bye click on that
Iand noticed that we got the message to
82

82

00:06:57,550  -->  00:07:05,240
say that the checkbox is checked so our event handler worked and now if we click on say hello
83

83

00:07:05,240  -->  00:07:10,270
we notice the text field was actually cleared
so the code is obviously working but did you
84

84

00:07:10,270  -->  00:07:14,680
notice that we've now got a bug in our UI and
looking at the screen can you guess
85

85

00:07:14,680  -->  00:07:17,950
what's actually gone wrong what
happened is our buttons is now
86

86

00:07:17,950  -->  00:07:22,120
enabled but there's nothing in our text
field we've written out previous code
87

87

00:07:22,120  -->  00:07:26,620
that if the contents of the text field
was empty then the buttons will
88

88

00:07:26,620  -->  00:07:30,410
automatically be disabled so as a
consequence what we really need to do is
89

89

00:07:30,410  -->  00:07:34,850
go back to the event handler and we also
need to disable the buttons when we
90

90

00:07:34,850  -->  00:07:43,970
clear the text contents so lets do that and down here
after the text fields cleared we
91

91

00:07:43,970  -->  00:07:45,930
also want to do.....
92

92

00:07:45,930  -->  00:07:53,170
....
93

93

00:07:53,170  -->  00:08:00,340
...so that should now work and actually disables the buttons after the field
94

94

00:08:00,340  -->  00:08:08,030
has been cleared so lets run that again
now so again we will tests this type in
95

95

00:08:08,030  -->  00:08:15,960
name or type anything click on say hello we get the message but
the text field wasn't cleared so that's working
96

96

00:08:15,960  -->  00:08:21,960
and now if I click on the check box
click on say hello you can see that not only is
97

97

00:08:21,960  -->  00:08:27,030
the text field cleared and but now the buttons are
correctly disabled now this really bring up an
98

98

00:08:27,030  -->  00:08:31,380
important point in that when you're
coding the user interface UI you really
99

99

00:08:31,380  -->  00:08:35,680
have to consider everything the user can
do so we have to actually write a lot of
100

100

00:08:35,680  -->  00:08:39,870
code to handle all the expected use
cases to prevent and handle all the
101

101

00:08:39,870  -->  00:08:40,730
possible error
102

102

00:08:40,730  -->  00:08:46,050
cases and also of course to verify user input testing a UI can be a
103

103

00:08:46,050  -->  00:08:49,450
quite challenging and that's because
everything the user could possibly do
104

104

00:08:49,450  -->  00:08:53,980
has to be tried and users can be quite
inventive and do things we never really
105

105

00:08:53,980  -->  00:08:59,800
expected them to do so never ever assume
that a user will interact with a UI
106

106

00:08:59,800  -->  00:09:04,390
in a certain way or even in a specific
order so you never think I don't have to
107

107

00:09:04,390  -->  00:09:08,140
worry about that because a user would
never do it because believe me speaking from
108

108

00:09:08,140  -->  00:09:12,510
personal experience some way out there
will be user who will do that very thing
109

109

00:09:12,510  -->  00:09:16,780
now the bug we just fixed wasn't a bug in a sense that our application would crash
110

110

00:09:16,780  -->  00:09:20,670
or process data correctly and so it's
the sort of thing that we really want to
111

111

00:09:20,670  -->  00:09:25,350
fix in a real-world application so we've
seen how to process user interaction and
112

112

00:09:25,350  -->  00:09:30,030
input and we've listened for the events
were interested in and when an event
113

113

00:09:30,030  -->  00:09:34,860
is raised our associated error handler
will run but at this point we've really
114

114

00:09:34,860  -->  00:09:39,100
only scratched the surface of the
events that controls can handle so every
115

115

00:09:39,100  -->  00:09:43,780
control has a set of events that can
raise when a user interacts with it so do
116

116

00:09:43,780  -->  00:09:49,600
check the documentation for a control to
find out which events it can raise and again as I've
117

117

00:09:49,600  -->  00:09:53,830
shown you in previous videos you can
find the documentation for a control by
118

118

00:09:53,830  -->  00:09:57,130
searching for javafx 8 followed
by the controller name in your favorite
119

119

00:09:57,130  -->  00:10:03,820
search engine so just as an example I'm gonna open a
browser up and if I type......
120

120

00:10:03,820  -->  00:10:15,120
...we get the documentation their for the
checkbox for JavaFX and in their you can research that and
121

121

00:10:15,120  -->  00:10:19,560
find out what methods and capabilities
are their and for the various types of events that
122

122

00:10:19,560  -->  00:10:25,280
a particular control will support now we can't really
leave the topic of events and event
123

123

00:10:25,280  -->  00:10:29,910
handling without talking a bit more
about the UI thread so in a previous
124

124

00:10:29,910  -->  00:10:35,120
video I discussed how the UI thread sits
and waits for user input so when the
125

125

00:10:35,120  -->  00:10:38,990
user does something the UI thread sees
if the applications listening for that
126

126

00:10:38,990  -->  00:10:39,690
event
127

127

00:10:39,690  -->  00:10:45,710
and if so it dispatches the event to the event handler now the event handler itself runs on that
128

128

00:10:45,710  -->  00:10:50,600
the UI thread so what that means is the
while an event handler is running the
129

129

00:10:50,600  -->  00:10:55,760
user interface thread is busy and it is
no longer paying attention to the user
130

130

00:10:55,760  -->  00:11:00,410
input in other words the user won't be
able to interact with the UI while
131

131

00:11:00,410  -->  00:11:05,350
that's actually occurring and if he/she tries
to do anything at that point the
132

132

00:11:05,350  -->  00:11:10,240
application won't actually respond and more
than likely if you run a program in the
133

133

00:11:10,240  -->  00:11:14,300
past you had the experience of having an
application freeze up and no matter
134

134

00:11:14,300  -->  00:11:18,160
how you mash a button nothing happened and
then suddenly the application became
135

135

00:11:18,160  -->  00:11:22,190
responsive again so when that happens that's
could be probably more likely due to
136

136

00:11:22,190  -->  00:11:26,550
your system being too busy but it could also have
been due to an event handler that has taken
137

137

00:11:26,550  -->  00:11:30,570
too long to run and consequently the
application is basically in limbo
138

138

00:11:30,570  -->  00:11:36,180
until it was finished so lets actually
see an example of this so what we are going to do is go
139

139

00:11:36,180  -->  00:11:44,460
back to our code close this down so disconnecting and close the program down and
140

140

00:11:44,460  -->  00:11:48,760
what we're going to do is actually add
some code right here before we actually
141

141

00:11:48,760  -->  00:11:54,740
do a check for our check box is
selected so basically we're gonna put
142

142

00:11:54,740  -->  00:11:59,760
thread to sleep for 10 seconds after
we print a message to the console so what this
143

143

00:11:59,760  -->  00:12:02,310
is going to do is effectively show you
what will happen
144

144

00:12:02,310  -->  00:12:06,840
and how the UI becomes unresponsive so we are just gonna put.....
145

145

00:12:10,320  -->  00:12:19,900
....
146

146

00:12:23,920  -->  00:12:35,570
...now exceptions I'm not gonna go through here
there is actually a section on the
147

147

00:12:35,570  -->  00:12:40,350
input-output section itself does talk
about exceptions in details but just for now
148

148

00:12:40,350  -->  00:12:45,440
think of an exception as a way for you
trapped an error and you can go back to input
149

149

00:12:45,440  -->  00:12:48,270
output section and check out the videos
to find out more about exceptions
150

150

00:12:48,270  -->  00:12:52,690
essentially what we're doing here is
we're actually putting the user
151

151

00:12:52,690  -->  00:12:57,060
interface UI thread to sleep for 10
seconds so we can simulate
152

152

00:12:57,060  -->  00:13:01,730
this sort of lockup situation and you could
see that we're writing it we are putting the
153

153

00:13:01,730  -->  00:13:06,040
code in our button event handler so we need to click a button to actually get
154

154

00:13:06,040  -->  00:13:16,880
this code to invoke so lets run the app and type something in so we can enable a button so now if I click on say hello and you notice at the moment
155

155

00:13:16,880  -->  00:13:20,760
now we've got the spinning globe because
I'm on a Mac but if you run on Windows
156

156

00:13:20,760  -->  00:13:25,070
or Linux machine basically we can't do anything so its just sitting here absolutely doing
157

157

00:13:25,070  -->  00:13:28,260
nothing and now we finally get our process back again and we can do the
158

158

00:13:28,260  -->  00:13:33,640
same thing again and now I can't really
do much I can move the window around a
159

159

00:13:33,640  -->  00:13:36,950
bit but I can't interact too much with the
controls or do much of anything at
160

160

00:13:36,950  -->  00:13:41,510
all depending on the operating system
that you're running on you may
161

161

00:13:41,510  -->  00:13:44,610
actually have to kill the
application
162

162

00:13:44,610  -->  00:13:48,640
the bottom line here is that this is
actually a bad situation to be in you can
163

163

00:13:48,640  -->  00:13:53,010
see it's still causing problems there
and we got ourselves into a bit of process here where we can't
164

164

00:13:53,010  -->  00:13:59,760
actually accept we can't completely the
event and that's because the and you can see what's
165

165

00:13:59,760  -->  00:14:05,010
happening now I've got a full screen that's
because I double clicked which is the
166

166

00:14:05,010  -->  00:14:09,020
on a MAC is way to open and close
the screen so eventually we will get
167

167

00:14:09,020  -->  00:14:13,130
control back and we can closed it but you may
have had to actually end the task if
168

168

00:14:13,130  -->  00:14:13,770
you're on
169

169

00:14:13,770  -->  00:14:18,160
a Linux machine or Windows machine the
bottom line here is no matter what
170

170

00:14:18,160  -->  00:14:23,250
actually had to happen this is obviously
a bad user experience and what we gonna
171

171

00:14:23,250  -->  00:14:26,670
do so I'm gonna pause the video here
now and in the next video will continue on
172

172

00:14:26,670  -->  00:14:31,270
talking about threads and why its really
important to make sure that when we're
173

173

00:14:31,270  -->  00:14:35,170
processing things in our event handlers
that we want to return back as quickly as
174

174

00:14:35,170  -->  00:14:39,190
possible to prevent situations like this
happening so I'll see you in the next
175

175

00:14:39,190  -->  00:14:39,410
video
