1
1

00:00:04,840  -->  00:00:09,190
alright i'm continuing on if I just run this
again so we can see what we finished
2

2

00:00:09,190  -->  00:00:13,240
in the last video so we got the same result
as we did with the other commented out
3

3

00:00:13,240  -->  00:00:18,550
code so basically we got to write
less code to accomplish what we want to
4

4

00:00:18,550  -->  00:00:23,650
do and instead of passing anonymous
instance of upper concat we passed the
5

5

00:00:23,650  -->  00:00:28,510
lambda instead now we could have done
in only one line of code if we passed the
6

6

00:00:28,510  -->  00:00:32,590
lambda expression directly to do string stuff
rather than saving it to a variable
7

7

00:00:32,590  -->  00:00:37,540
first I just want to show you that we
can assign lambdas to variables and use
8

8

00:00:37,540  -->  00:00:41,860
them later and if you want to use that
same lambda in more than one place we
9

9

00:00:41,860  -->  00:00:45,850
only have to define it once and then we
can use it wherever we need it now if i
10

10

00:00:45,850  -->  00:00:49,320
our lambda contained more than one
statement then we would have to use the
11

11

00:00:49,320  -->  00:00:54,520
return keyword let's change the body of
our lambda so that stores the result of
12

12

00:00:54,520  -->  00:00:58,690
the uppercase in concatenation into a
new string variable and then returns it
13

13

00:00:58,690  -->  00:01:03,690
just so you can see what that looks like
i'm going back into our lambda on line 51
14

14

00:01:03,690  -->  00:01:09,960
and we're going to actually put a code
block there so I'm going to put first code
15

15

00:01:09,960  -->  00:01:19,500
block there and it's going to be string.....
16

16

00:01:19,500  -->  00:01:26,430
.....
17

17

00:01:26,430  -->  00:01:31,380
....and everything else is
18

18

00:01:31,380  -->  00:01:34,990
unchanged that's how you would execute
multiple things in the body of the
19

19

00:01:34,990  -->  00:01:39,960
lambda so again just a few things to
note here first of all I used curly
20

20

00:01:39,960  -->  00:01:41,020
braces
21

21

00:01:41,020  -->  00:01:44,590
that's because the body now has more
than one statement for the same reason
22

22

00:01:44,590  -->  00:01:48,090
we also need the semicolons after each
statement in the body
23

23

00:01:48,090  -->  00:01:53,340
you may also notice that we added that
when we added the curly braces but
24

24

00:01:53,340  -->  00:01:57,180
before we tack on the string result
equals IntelliJ complained that we no
25

25

00:01:57,180  -->  00:02:01,470
longer had a statement once we add curly
braces the return keyword is required
26

26

00:02:01,470  -->  00:02:05,850
even if there's only one statement in
the body just to confirm will run it to
27

27

00:02:05,850  -->  00:02:11,560
make sure we get the same results still
got the same result that that's good so
28

28

00:02:11,560  -->  00:02:15,370
we seen several examples of lambda
expressions instead of using the
29

29

00:02:15,370  -->  00:02:18,190
upper concat lambda expression within
the main method
30

30

00:02:18,190  -->  00:02:22,480
that's actually create a class that isn't static so that we can take a look at
31

31

00:02:22,480  -->  00:02:26,770
lambda expression and scope we're going
to add the new class into the main java
32

32

00:02:26,770  -->  00:02:34,060
file let's get into the bottom and will
add that down here and we'll call this
33

33

00:02:34,060  -->  00:02:43,630
class another class.....let's
create a method here....
34

34

00:02:43,630  -->  00:02:56,830
.....
35

35

00:02:56,830  -->  00:03:00,820
....
36

36

00:03:00,820  -->  00:03:08,020
.....
37

37

00:03:08,020  -->  00:03:27,820
....
38

38

00:03:27,820  -->  00:03:32,700
....all right in our main method
39

39

00:03:32,700  -->  00:03:35,980
we are going to construct an instance of
another class and call the do something
40

40

00:03:35,980  -->  00:03:39,010
method and print out the so come
back to our main class and what i might do
41

41

00:03:39,010  -->  00:03:46,930
is actually delete some of this code and
just comment it out for now just
42

42

00:03:46,930  -->  00:03:54,160
in case you need to refer to it so
let's call our another class so another
43

43

00:03:54,160  -->  00:04:03,510
class.....
44

44

00:04:03,510  -->  00:04:10,600
....so lets run that
45

45

00:04:15,680  -->  00:04:19,750
we got string one and string two concatenated
together that's because we're calling
46

46

00:04:19,750  -->  00:04:25,690
the do something method that's creating
an anonymous class to return s . one up
47

47

00:04:25,690  -->  00:04:31,660
to uppercase plus s2 . uppercase ok so
let's add another line to the upper
48

48

00:04:31,660  -->  00:04:37,340
and concat method in the anonymous class
and what we're going to do before we return
49

49

00:04:37,340  -->  00:04:40,490
the string result we're gonna print
out the class name of the anonymous
50

50

00:04:40,490  -->  00:04:45,940
class instance will do the same for the
another class instance so I'm going to
51

51

00:04:45,940  -->  00:04:51,050
come down here and in the do something method
before we do the return we're going to
52

52

00:04:51,050  -->  00:05:04,250
print out.....
53

53

00:05:04,250  -->  00:05:12,220
.....
54

54

00:05:12,220  -->  00:05:25,090
....
55

55

00:05:25,090  -->  00:05:30,530
ok so when we run that we should see
that anonymous class name get the
56

56

00:05:30,530  -->  00:05:34,780
output but in theory the anonymous sorry
the another class class name gets printed
57

57

00:05:34,780  -->  00:05:40,760
out and just move this down to the
bottom so you can see a little bit better
58

58

00:05:40,760  -->  00:05:44,810
so the in another class class name is
another class and the anonymous classes
59

59

00:05:44,810  -->  00:05:48,560
name is nothing and that's correct
because of course the anonymous class
60

60

00:05:48,560  -->  00:05:52,090
doesn't have a name which makes sense
but let's actually use a lambda
61

61

00:05:52,090  -->  00:05:58,520
expression instead of an anonymous class
we're going to close this run window
62

62

00:05:58,520  -->  00:06:05,570
let's use this lambda expression so we're
going to do that so in the do something
63

63

00:06:05,570  -->  00:06:11,060
method just going to comment this code
out so we're clear
64

64

00:06:13,300  -->  00:06:27,940
now we're going to do....
65

65

00:06:27,940  -->  00:06:31,870
...
66

66

00:06:31,870  -->  00:06:57,580
....
67

67

00:06:57,580  -->  00:07:07,810
.....
68

68

00:07:07,810  -->  00:07:23,250
....
69

69

00:07:25,020  -->  00:07:36,250
....alright so what
70

70

00:07:36,250  -->  00:07:41,020
do you think the name of the lambda
expressions class is going to be so
71

71

00:07:41,020  -->  00:07:47,020
let's actually run and find out we run
it you can see that we got the lambda
72

72

00:07:47,020  -->  00:07:51,690
expressions name is set to another class
just like the another classes name
73

73

00:07:51,690  -->  00:07:55,990
so what does that actually telling us
well its telling us that the lambda or
74

74

00:07:55,990  -->  00:08:00,660
that a lambda expression isn't a class
when the code runs an anonymous
75

75

00:08:00,660  -->  00:08:05,250
instance isn't created instead the
lambda is treated like a nest block of
76

76

00:08:05,250  -->  00:08:10,710
code and it has the same scope as a
nested block so let's look at a few
77

77

00:08:10,710  -->  00:08:14,590
examples to see this in action just so
hopefully it becomes a bit clearer
78

78

00:08:14,590  -->  00:08:19,770
so first let's look at a nested block
that isn't part that isn't a part of the
79

79

00:08:19,770  -->  00:08:24,610
lambda so instead of using a lambda in the
do something method we've do it the long way
80

80

00:08:24,610  -->  00:08:26,290
by using an anonymous
81

81

00:08:26,290  -->  00:08:32,140
class will also put all the code inside
a nested block so lets go back and do
82

82

00:08:32,140  -->  00:08:45,700
that so i'm going to comment that out for now and so we just add a code block
83

83

00:08:45,700  -->  00:08:55,060
here in the do something method will put....
84

84

00:08:55,060  -->  00:09:10,480
....
85

85

00:09:10,480  -->  00:09:16,030
.....so by putting the code inside a
nested block all we mean is that we've
86

86

00:09:16,030  -->  00:09:19,750
enclosed it with another set of curly
braces as you can see I've done braces
87

87

00:09:19,750  -->  00:09:25,120
on the line 105 and the line 115 now code within a
nested block can reference variables
88

88

00:09:25,120  -->  00:09:28,960
defined within the enclosing block
meaning the block of code that contains
89

89

00:09:28,960  -->  00:09:34,060
it which in this case is the do something
method body if you were to define a
90

90

00:09:34,060  -->  00:09:39,010
local variable in the enclosing block we
could use it within the nested block so
91

91

00:09:39,010  -->  00:09:42,640
let's actually do that just to confirm
it by adding an int variable called count
92

92

00:09:42,640  -->  00:09:46,690
and initializing to 0 and we're going to
increment the value inside the nested
93

93

00:09:46,690  -->  00:09:52,960
block and printed out so come up come up
and do that before the final
94

94

00:09:52,960  -->  00:09:58,420
return so just after the print out here so we need
to do is just add our variable before
95

95

00:09:58,420  -->  00:10:05,860
the code block outside of the code block so...
96

96

00:10:05,860  -->  00:10:13,630
.....
97

97

00:10:13,630  -->  00:10:20,080
....
98

98

00:10:20,080  -->  00:10:26,140
....so if we run this should work
without any errors you can see
99

99

00:10:26,140  -->  00:10:32,140
we got i equals 1 clearly the increment worked
and we got our result so basically the code
100

100

00:10:32,140  -->  00:10:36,430
within the nested block can use the
local variable I because nested blocks are
101

101

00:10:36,430  -->  00:10:38,380
in the enclosing block scope
102

102

00:10:38,380  -->  00:10:42,790
but what about the anonymous class though we already know that if we want to
103

103

00:10:42,790  -->  00:10:47,380
reference a local variable defined outside
the anonymous class we have to declare the
104

104

00:10:47,380  -->  00:10:52,630
local variables as final if we try and use
I inside the upper and concat method
105

105

00:10:52,630  -->  00:10:55,630
will actually get a compile error
106

106

00:10:56,350  -->  00:10:59,440
let's try to print the value of i from
within the methods to confirm that does
107

107

00:10:59,440  -->  00:11:04,420
happen i'm talking about this upper concat method on line 109 so we try
108

108

00:11:04,420  -->  00:11:14,050
to print something before the return like....
109

109

00:11:14,050  -->  00:11:22,300
....looking at that
IntelliJ is complaining that needs to be
110

110

00:11:22,300  -->  00:11:23,830
final
111

111

00:11:23,830  -->  00:11:28,150
so let's add the final in front of the
int declaration on line 105 so
112

112

00:11:28,150  -->  00:11:32,800
final and the other thing we have to do
is we'll have to change the code or
113

113

00:11:32,800  -->  00:11:35,890
basically comment out the two
lines outside the anonymous class that
114

114

00:11:35,890  -->  00:11:40,000
update I because we can't change the
value of a final variable once it has been
115

115

00:11:40,000  -->  00:11:45,280
assigned so if we just come down here so just that one line anyway comment
116

116

00:11:45,280  -->  00:11:52,570
that line out to avoid that being an error
so now if we run that and obviously
117

117

00:11:52,570  -->  00:11:56,140
that's set to 0 because it's a final
variable and there's no recommendation
118

118

00:11:56,140  -->  00:12:01,210
no incrementing of the value but the
question here is why do local variables
119

119

00:12:01,210  -->  00:12:06,310
have to be declared as final when we use
them within an anonymous class that's
120

120

00:12:06,310  -->  00:12:09,970
because the local variable doesn't
belong to the anonymous class instance
121

121

00:12:09,970  -->  00:12:12,700
what actually happens under the covers
122

122

00:12:12,700  -->  00:12:16,810
is that the variable is replaced by
whatever the value of i is when the
123

123

00:12:16,810  -->  00:12:20,980
instance is constructed so it's possible
we may not use the instance of an
124

124

00:12:20,980  -->  00:12:26,080
anonymous class for a while we may even
pass it to a method in another class and
125

125

00:12:26,080  -->  00:12:29,950
there'd be no way for the java runtime
to update the value within the anonymous
126

126

00:12:29,950  -->  00:12:33,460
class instance every time it changed
within the do something method
127

127

00:12:33,460  -->  00:12:36,880
so in other words the values would get
out of sync so for that reason the
128

128

00:12:36,880  -->  00:12:41,290
values of local variables declared
outside the scope of the anonymous class
129

129

00:12:41,290  -->  00:12:45,460
and not allowed to change they have to
be declared as final alright so let's get
130

130

00:12:45,460  -->  00:12:49,660
back to how this relates to lambda
expressions so we'll go back to using a
131

131

00:12:49,660  -->  00:12:51,910
lambda in the do something method
132

132

00:12:51,910  -->  00:12:54,870
we're gonna remove the extra set of
curly braces as well and we'll also
133

133

00:12:54,870  -->  00:12:58,770
remove the final keyword from the local
variable declaration let's go ahead and
134

134

00:12:58,770  -->  00:13:13,600
do that going to remove the final here going to remove the extra
135

135

00:13:13,600  -->  00:13:20,800
curly braces put the
code back space there and we'll put our
136

136

00:13:20,800  -->  00:13:25,080
lambda instead of the other method so we type it again because it's good practice to
137

137

00:13:25,080  -->  00:13:31,200
become familiar with them....
138

138

00:13:31,200  -->  00:14:06,250
....
139

139

00:14:06,250  -->  00:14:14,620
.....
140

140

00:14:14,620  -->  00:14:21,490
....
141

141

00:14:21,490  -->  00:14:27,060
....alright
142

142

00:14:27,060  -->  00:14:32,580
let's just confirm that this works like
it was working before string one string
143

143

00:14:32,580  -->  00:14:34,630
2 in the screen you can see that it is
working
144

144

00:14:34,630  -->  00:14:37,830
alright I'll finish this video now in
the next video
145

145

00:14:37,830  -->  00:14:42,180
let's actually see how lambda
expressions are treated like nested
146

146

00:14:42,180  -->  00:14:44,310
blocks i'll see you in the next video
