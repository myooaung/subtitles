WEBVTT
1
1

00:00:05.080  -->  00:00:09.480
So in the previous video, we actually
finished off our linked list demos, so
2

2

00:00:09.480  -->  00:00:11.320
now it's time for a challenge.
3

3

00:00:11.320  -->  00:00:13.540
So I'm gonna type out the challenge for
you,
4

4

00:00:13.540  -->  00:00:15.610
to really help understand linked lists.
5

5

00:00:29.910  -->  00:00:32.050
Okay, so here is our challenge.
6

6

00:00:32.050  -->  00:00:36.360
So the idea is to create a program
that implements a playlist for songs.
7

7

00:00:36.360  -->  00:00:40.940
So you want to create a song class, which
has got title and duration for the song.
8

8

00:00:40.940  -->  00:00:44.940
And the program will have an album
class containing a list of songs.
9

9

00:00:44.940  -->  00:00:48.190
Now, the actual albums will
be stored in an array list.
10

10

00:00:48.190  -->  00:00:51.050
Songs from different albums
can be added to the playlist.
11

11

00:00:51.050  -->  00:00:52.870
And the playlist is
actually a linked list.
12

12

00:00:52.870  -->  00:00:56.710
And the songs that we can add will appear
in the list in the order they're added.
13

13

00:00:56.710  -->  00:00:58.590
So that's the linked list functionality.
14

14

00:00:58.590  -->  00:01:00.860
Once the songs have been
added to the playlist,
15

15

00:01:00.860  -->  00:01:04.240
you wanna create a menu of options,
to add this functionality.
16

16

00:01:04.240  -->  00:01:08.350
Quit out of the menu, skip forward to the
next song, skip backwards to a previous
17

17

00:01:08.350  -->  00:01:12.590
song, replay the current song,
list the songs in the playlist as well.
18

18

00:01:12.590  -->  00:01:17.120
Now a song must exist in an album
before it can be added to the playlist.
19

19

00:01:17.120  -->  00:01:21.160
Remember that the songs are stored
in albums in an array list, but
20

20

00:01:21.160  -->  00:01:23.000
the playlist is the link list.
21

21

00:01:23.000  -->  00:01:26.580
So, in other words, here making sure that
the song exists in an album before it can
22

22

00:01:26.580  -->  00:01:27.930
be added to the playlist, so
23

23

00:01:27.930  -->  00:01:30.970
you can only play songs that you wanted
that you've already got in your catalog.
24

24

00:01:30.970  -->  00:01:33.460
And the hint for this is to replay a song.
25

25

00:01:33.460  -->  00:01:35.430
Consider what happens when
we went back and forward, or
26

26

00:01:35.430  -->  00:01:39.150
what happened when we went back and
forth from a city in the previous video,
27

27

00:01:39.150  -->  00:01:40.960
before we started tracking the direction.
28

28

00:01:40.960  -->  00:01:43.100
So you'll probably wanna
do something like that.
29

29

00:01:43.100  -->  00:01:44.680
And as an optional extra,
30

30

00:01:44.680  -->  00:01:48.610
provide another menu option to remove
the current song from the playlist.
31

31

00:01:48.610  -->  00:01:51.470
And the hint for
that is to look at list iterative.remove.
32

32

00:01:51.470  -->  00:01:52.130
So that's it.
33

33

00:01:52.130  -->  00:01:53.230
That's the challenge.
34

34

00:01:53.230  -->  00:01:57.080
Go away and try that out, and once you've
tried it out and got a working solution or
35

35

00:01:57.080  -->  00:02:00.680
you've had enough and wanna see my
solution, come back and play the video.
36

36

00:02:00.680  -->  00:02:02.910
And I'll go through and
show you how to do it.
37

37

00:02:02.910  -->  00:02:04.330
Pause the video now, and
I'll see you when you get back.
38

38

00:02:08.130  -->  00:02:09.420
Okay, so how did you get on?
39

39

00:02:09.420  -->  00:02:12.300
Hopefully you figured it out and
you came up with a solution.
40

40

00:02:12.300  -->  00:02:14.760
But let's go guys through
what my solution is for this.
41

41

00:02:14.760  -->  00:02:18.390
And bearing in mind, as I've said often
in the past, this is just one solution.
42

42

00:02:18.390  -->  00:02:21.940
There is always more than one way to
develop almost anything when you're
43

43

00:02:21.940  -->  00:02:22.580
programming.
44

44

00:02:22.580  -->  00:02:24.870
So let's start off, create a subclass.
45

45

00:02:24.870  -->  00:02:25.780
I'm gonna do that first.
46

46

00:02:25.780  -->  00:02:31.260
I'm going to create a class
called song obviously.
47

47

00:02:31.260  -->  00:02:36.050
And we're going to have two fields,
private
48

48

00:02:36.050  -->  00:02:39.070
string will be the title name of the song.
49

49

00:02:39.070  -->  00:02:42.900
And private double duration.
50

50

00:02:42.900  -->  00:02:46.770
And we're using a double, so
we can actually have decimal point,
51

51

00:02:46.770  -->  00:02:51.320
cuz all the songs don't play for exactly
three minutes or exactly four minutes.
52

52

00:02:51.320  -->  00:02:53.460
Okay, add a constructor and
53

53

00:02:53.460  -->  00:02:55.470
the constructor's gonna
be both parameters here.
54

54

00:02:57.160  -->  00:02:59.450
We're also going to add a getter for
the title.
55

55

00:03:02.670  -->  00:03:05.160
And also,
we're going to return a two string.
56

56

00:03:05.160  -->  00:03:07.700
And we'll see this in use later on.
57

57

00:03:07.700  -->  00:03:12.960
This is just a quick way to actually
output the contents of an actual object.
58

58

00:03:12.960  -->  00:03:17.220
Two string is part of the Java
infrastructure for all objects.
59

59

00:03:17.220  -->  00:03:18.230
And I can show you that.
60

60

00:03:18.230  -->  00:03:19.760
We can actually go and go to override it.
61

61

00:03:21.950  -->  00:03:23.170
Override.
62

62

00:03:23.170  -->  00:03:27.640
Notice how we're in object, and of course,
if you recall from our object oriented
63

63

00:03:27.640  -->  00:03:32.440
programming section, all classes
are inherited from the object class.
64

64

00:03:32.440  -->  00:03:34.810
As you can see there's a two string there.
65

65

00:03:34.810  -->  00:03:37.840
This is optional, so you're not gonna
lose points if you haven't done this.
66

66

00:03:37.840  -->  00:03:40.210
But I just want to show you
how to use two string as well.
67

67

00:03:40.210  -->  00:03:43.220
So traditionally what
you do in a two string,
68

68

00:03:43.220  -->  00:03:47.250
you do something like
this.title + this.duration.
69

69

00:03:47.250  -->  00:03:51.220
So you'll normally print out
the actual contents of the class or
70

70

00:03:51.220  -->  00:03:54.990
the various fields, and it's just a good
way to actually quickly print out
71

71

00:03:54.990  -->  00:03:59.790
an overview of what that particular
object for that class is actually set to.
72

72

00:03:59.790  -->  00:04:02.680
So you'll see that in use later on anyway.
73

73

00:04:02.680  -->  00:04:05.330
So let's now create an album class.
74

74

00:04:05.330  -->  00:04:10.540
That's the next thing we need to do.
75

75

00:04:10.540  -->  00:04:12.780
Album and just to go back as a recap.
76

76

00:04:12.780  -->  00:04:16.010
The program will have an album class
containing a list of songs, so that
77

77

00:04:16.010  -->  00:04:20.150
the albums will be stored in an in array
list, so we need to go back and do that.
78

78

00:04:20.150  -->  00:04:25.760
So what we wanna do then is
we wanna have the album name,
79

79

00:04:25.760  -->  00:04:32.610
which is going to be private string name,
private string artist.
80

80

00:04:32.610  -->  00:04:38.420
And now we need to create an array,
that's an array list of songs.
81

81

00:04:39.450  -->  00:04:42.780
That's gonna be the songs that
are of course, part of this array.
82

82

00:04:42.780  -->  00:04:46.260
So, the constructor we need to
create will have the name and
83

83

00:04:46.260  -->  00:04:48.140
the artist as parameters.
84

84

00:04:48.140  -->  00:04:50.460
But then,
we also wanna initialize array list.
85

85

00:04:50.460  -->  00:04:57.270
So, this.songs = new array list to
make sure that it's initialized so
86

86

00:04:57.270  -->  00:05:02.950
that we can actually use it
without getting any errors.
87

87

00:05:02.950  -->  00:05:06.870
So next, we get to the stage of some
methods to add some functionality.
88

88

00:05:06.870  -->  00:05:10.380
So one of the first things we need to do,
is we need to be able to add a song, so
89

89

00:05:10.380  -->  00:05:13.290
that the song actually
goes into our array list.
90

90

00:05:13.290  -->  00:05:17.040
So to do that, we're gonna create
a method called add song, and
91

91

00:05:17.040  -->  00:05:20.840
I'm gonna use boolean, you wouldn't
necessarily have to use boolean, but
92

92

00:05:20.840  -->  00:05:22.840
I'm going to do that just to
make sure it's validated.
93

93

00:05:22.840  -->  00:05:25.260
So, it's add song.
94

94

00:05:25.260  -->  00:05:26.480
String title.
95

95

00:05:28.260  -->  00:05:29.300
String, oh sorry, double.
96

96

00:05:31.060  -->  00:05:31.780
Duration.
97

97

00:05:33.460  -->  00:05:39.230
Then we're gonna do if find, song,
98

98

00:05:39.230  -->  00:05:45.010
title = null, this.songs.add,
99

99

00:05:45.010  -->  00:05:49.880
new song, title, duration.
100

100

00:05:49.880  -->  00:05:54.690
Return true, otherwise, return false.
101

101

00:05:54.690  -->  00:05:57.400
So in other words, what we're doing
here with this validation is,
102

102

00:05:57.400  -->  00:06:02.710
we're checking to see, or to make sure,
that we're not duplicating songs.
103

103

00:06:02.710  -->  00:06:04.050
Songs can only be added once, so
104

104

00:06:04.050  -->  00:06:07.360
we're doing the comparison
test on the actual title.
105

105

00:06:07.360  -->  00:06:10.170
And we'll write that method next,
the find song.
106

106

00:06:10.170  -->  00:06:13.850
We can make that a private cuz it's
only gonna be used internally.
107

107

00:06:13.850  -->  00:06:19.580
Private song, find song, string title.
108

108

00:06:19.580  -->  00:06:23.200
We put four song, check song.
109

109

00:06:23.200  -->  00:06:26.060
This.songs.
110

110

00:06:26.060  -->  00:06:29.510
Now what I'm introducing here,
I'll just go through and write the code.
111

111

00:06:29.510  -->  00:06:31.400
And I'll explain it.
112

112

00:06:31.400  -->  00:06:38.240
Checksong.getitle.=title.
113

113

00:06:38.240  -->  00:06:39.360
Return.
114

114

00:06:39.360  -->  00:06:41.050
Check song.
115

115

00:06:41.050  -->  00:06:42.560
Return null.
116

116

00:06:44.190  -->  00:06:45.400
Now, what this line here is,
117

117

00:06:45.400  -->  00:06:50.380
this is an alternative way to actually
go through a list of entries.
118

118

00:06:50.380  -->  00:06:52.870
It's the for, each command in Java.
119

119

00:06:52.870  -->  00:06:57.300
So what it's actually doing is,
instead of us having to put for
120

120

00:06:57.300  -->  00:07:01.920
I = zero, I list, and
the actual size of the array list in i++.
121

121

00:07:01.920  -->  00:07:06.980
What this does, it actually goes
through and creates a variable
122

122

00:07:06.980  -->  00:07:10.590
called checked song for every entry
that's actually in our array list.
123

123

00:07:10.590  -->  00:07:15.290
So that's the equivalent of doing our
normal while iterations when we go
124

124

00:07:15.290  -->  00:07:19.530
through and increment a variable called I,
I = I + 1, and
125

125

00:07:19.530  -->  00:07:23.100
do a test for .geti and
so on and so forth.
126

126

00:07:23.100  -->  00:07:24.590
This is a shortcut.
127

127

00:07:24.590  -->  00:07:28.660
So again, what happens is Java with this
code here, probably does the same code
128

128

00:07:28.660  -->  00:07:31.540
internally that we were doing,
but this is far easier to read.
129

129

00:07:31.540  -->  00:07:35.450
So again confirmation for every entry,
as we go through this for
130

130

00:07:35.450  -->  00:07:38.350
loop, every entry that's
in our array list,
131

131

00:07:38.350  -->  00:07:43.090
Java will automatically create
this variable called checked song.
132

132

00:07:43.090  -->  00:07:45.840
And from there, we can actually
use that what we'd normally use.
133

133

00:07:45.840  -->  00:07:48.330
We can do with checked song and
get title.=title.
134

134

00:07:48.330  -->  00:07:52.230
So what we're doing of course, is just
making sure that's there's no duplicates,
135

135

00:07:52.230  -->  00:07:53.310
but this for
136

136

00:07:53.310  -->  00:07:57.450
each statement is actually an abbreviation
to make things a little bit easier,
137

137

00:07:57.450  -->  00:08:01.960
when you wanna navigate through an array
list or any type of list for that matter.
138

138

00:08:01.960  -->  00:08:04.460
So that's what that is.
So if we actually do find the title,
139

139

00:08:04.460  -->  00:08:08.990
then we return the actual title itself,
otherwise, we return null.
140

140

00:08:08.990  -->  00:08:12.990
And of course, the test here it adds song,
it's like you're looking for null.
141

141

00:08:12.990  -->  00:08:16.530
If we don't get null,
it means the song already existed.
142

142

00:08:16.530  -->  00:08:18.040
And we return false.
143

143

00:08:18.040  -->  00:08:21.220
But if we do get null, then it's going
to add the song and then return true.
144

144

00:08:21.220  -->  00:08:24.150
So that's it,
that's our add song and find song.
145

145

00:08:24.150  -->  00:08:27.470
But we also need some way
to add songs to a playlist.
146

146

00:08:27.470  -->  00:08:30.520
So what we're gonna do is,
we're gonna add to the playlist method.
147

147

00:08:30.520  -->  00:08:34.790
Cuz of course we've got songs, but at the
moment we've got no concept of a playlist.
148

148

00:08:34.790  -->  00:08:37.310
Here's where we get a little bit
tricky because what we're going to do,
149

149

00:08:37.310  -->  00:08:41.730
is we're gonna create this playlist
method and we're gonna actually add
150

150

00:08:41.730  -->  00:08:45.870
the extra songs that are part
of this album to that playlist.
151

151

00:08:45.870  -->  00:08:50.230
And we're gonna actually pass
that playlist as a parameter,
152

152

00:08:50.230  -->  00:08:55.440
which is our link list, so the code we
are gonna create is public boolean,
153

153

00:08:55.440  -->  00:09:02.850
add to play list, int track number,
Then linked list.
154

154

00:09:04.710  -->  00:09:09.050
There's gonna be a linked list of songs
which we're gonna call our playlist.
155

155

00:09:10.670  -->  00:09:13.450
And I'm gonna type some of this
code then we'll go through it,
156

156

00:09:13.450  -->  00:09:14.690
int index = track number.
157

157

00:09:14.690  -->  00:09:19.710
Take 1, if index is greater
158

158

00:09:19.710  -->  00:09:25.140
than 0 and index is less than or
159

159

00:09:25.140  -->  00:09:30.790
equal to this.songs.size and
160

160

00:09:30.790  -->  00:09:34.350
do play list.add.
161

161

00:09:34.350  -->  00:09:40.030
This.songs.getindex.
162

162

00:09:40.030  -->  00:09:41.810
I need another bracket there, I think.
163

163

00:09:44.070  -->  00:09:46.870
And at that point we're
gonna do a return true.
164

164

00:09:46.870  -->  00:09:52.900
Otherwise, we'll print out a message here,
165

165

00:09:52.900  -->  00:09:57.850
which will say this album does not have
166

166

00:09:57.850  -->  00:10:02.830
a track + track number return false.
167

167

00:10:02.830  -->  00:10:05.920
Okay so, let's just review this code
cuz it might be a little bit confusing.
168

168

00:10:05.920  -->  00:10:07.460
So first what we're doing,
169

169

00:10:07.460  -->  00:10:11.730
is we're actually passing the actual
track number that we wanna add.
170

170

00:10:11.730  -->  00:10:14.540
Now, normally,
we would hide the index from users.
171

171

00:10:14.540  -->  00:10:16.280
From the users of our classes, but
172

172

00:10:16.280  -->  00:10:18.630
songs in an album actually
do have a track number.
173

173

00:10:18.630  -->  00:10:22.310
So if you actually buy a CD,
the song has actually got a track number.
174

174

00:10:22.310  -->  00:10:26.250
So that's what we're doing, is we're using
that track number as a way to reference
175

175

00:10:26.250  -->  00:10:28.240
the actual entries for this album.
176

176

00:10:28.240  -->  00:10:31.270
So what that means,
is when we're adding the songs up here,
177

177

00:10:31.270  -->  00:10:35.330
we need to add them in the same order so
that the first time we add an entry,
178

178

00:10:35.330  -->  00:10:38.850
that's actually track number one, track
number two, track number three, and so on.
179

179

00:10:38.850  -->  00:10:42.120
So, by doing that, what we're now doing
is, we're actually doing a test here.
180

180

00:10:42.120  -->  00:10:46.080
So, we're passing the track number that
we want to get added to our playlist.
181

181

00:10:46.080  -->  00:10:48.470
And, we're also passing our playlist.
182

182

00:10:48.470  -->  00:10:49.900
And then, we're doing a test here.
183

183

00:10:49.900  -->  00:10:52.590
The int = track number
take 1 because of course,
184

184

00:10:52.590  -->  00:10:56.540
track numbers start from 1 in terms
of how humans, how we read them.
185

185

00:10:56.540  -->  00:11:00.110
We don't have a track 0, but,
internally, in our array list,
186

186

00:11:00.110  -->  00:11:01.740
our counting starts from 0.
187

187

00:11:01.740  -->  00:11:03.210
So, that's why we're putting a take 1.
188

188

00:11:03.210  -->  00:11:07.150
Then, we're just making sure that there
actually is a song in that entry.
189

189

00:11:07.150  -->  00:11:08.220
So, if there is a song.
190

190

00:11:08.220  -->  00:11:13.790
In other words, there's a song in that
index position for this array list.
191

191

00:11:13.790  -->  00:11:17.760
Then, we'll actually add the song object
to the playlist that was passed to us
192

192

00:11:17.760  -->  00:11:18.690
automatically.
193

193

00:11:18.690  -->  00:11:22.940
And of course, as you're gonna be seeing
later is we'll actually look at changing
194

194

00:11:22.940  -->  00:11:24.610
the code for that in a minute.
195

195

00:11:24.610  -->  00:11:28.520
So consequently, we're actually getting,
we're passing the track number we want.
196

196

00:11:28.520  -->  00:11:29.840
And we're passing the playlist.
197

197

00:11:29.840  -->  00:11:31.240
It does some validation.
198

198

00:11:31.240  -->  00:11:34.120
And if the actual entry for
our song is there, so
199

199

00:11:34.120  -->  00:11:37.220
our track number is the song is
being added in the right position.
200

200

00:11:37.220  -->  00:11:39.680
Then we're actually gonna then
add that to our playlist.
201

201

00:11:39.680  -->  00:11:42.870
Otherwise, we get return a message
that there's actually an error.
202

202

00:11:42.870  -->  00:11:45.830
So now it's not actually a requirement to
203

203

00:11:45.830  -->  00:11:48.570
overload the method to
successfully meet this challenge.
204

204

00:11:48.570  -->  00:11:51.280
What I'm going to do is
also add a second option,
205

205

00:11:51.280  -->  00:11:53.460
which is the ability to be
able to add a playlist.
206

206

00:11:53.460  -->  00:11:57.090
But in this time past the title
instead of just having a track number.
207

207

00:11:57.090  -->  00:12:01.760
So a track number equates to the index
position in the actual array list.
208

208

00:12:01.760  -->  00:12:06.100
Now that's also at an overload disk
method to add another option or
209

209

00:12:06.100  -->  00:12:10.250
we can actually add it, but
use title instead of the track number.
210

210

00:12:10.250  -->  00:12:12.430
So, we'll do something like uni-space it.
211

211

00:12:15.490  -->  00:12:20.500
Public, boolean, add to playlist.
212

212

00:12:20.500  -->  00:12:24.860
And this time, we're gonna pass the title
to get the title we passed to us.
213

213

00:12:24.860  -->  00:12:29.690
But then, linked list song playlist.
214

214

00:12:32.870  -->  00:12:34.300
We'll do something a little bit different.
215

215

00:12:34.300  -->  00:12:40.600
We'll do song,
check song = find song, title.
216

216

00:12:40.600  -->  00:12:43.500
And of course, this time we
wanna check that it's not null,
217

217

00:12:43.500  -->  00:12:45.180
which means that it was found on file.
218

218

00:12:45.180  -->  00:12:53.260
So put if check song not
equal to null playlist.add.
219

219

00:12:53.260  -->  00:12:56.400
Check song.
220

220

00:12:56.400  -->  00:12:58.460
Return true,
because we successfully found it.
221

221

00:12:58.460  -->  00:13:03.720
Otherwise, the song +
222

222

00:13:03.720  -->  00:13:09.770
title is not in this album.
223

223

00:13:12.150  -->  00:13:13.800
Return false.
224

224

00:13:13.800  -->  00:13:18.190
And as you can see, there's two ways
now for us to add a song to a playlist,
225

225

00:13:18.190  -->  00:13:21.930
either by the track number,
which again equates to the index position,
226

226

00:13:21.930  -->  00:13:23.390
the order that they're actually added.
227

227

00:13:23.390  -->  00:13:27.000
And we use the add sum method or
the actual title itself.
228

228

00:13:27.000  -->  00:13:28.830
Now the other thing you
could have done here,
229

229

00:13:28.830  -->  00:13:31.310
which we won't go into
a lot of detail about, but
230

230

00:13:31.310  -->  00:13:36.430
we could have added the actual add to play
list in the actual song object itself.
231

231

00:13:36.430  -->  00:13:38.550
alright so this is future
232

232

00:13:38.550  -->  00:13:41.790
Tim recording this in the future and I'm
233

233

00:13:41.790  -->  00:13:43.380
actually adding this bit of audio here
234

234

00:13:43.380  -->  00:13:45.200
now just to let you know that there's
235

235

00:13:45.200  -->  00:13:47.390
actually a problem with this bit of code
236

236

00:13:47.390  -->  00:13:49.470
here this add to playlist method that
237

237

00:13:49.470  -->  00:13:51.320
we've been working on now the next video
238

238

00:13:51.320  -->  00:13:52.820
I'm going to show you how to make the
239

239

00:13:52.820  -->  00:13:55.500
change in full but you can see what I've
240

240

00:13:55.500  -->  00:13:58.010
got on the screen there now is a small
241

241

00:13:58.010  -->  00:14:00.320
little change basically the if statement
242

242

00:14:00.320  -->  00:14:02.550
is incorrect and that's because the
243

243

00:14:02.550  -->  00:14:05.040
index always starts from 0 so if we
244

244

00:14:05.040  -->  00:14:07.500
enter track number one index value will
245

245

00:14:07.500  -->  00:14:10.070
be zero since one take one is zero now
246

246

00:14:10.070  -->  00:14:12.380
consequently what will happen is the if
247

247

00:14:12.380  -->  00:14:14.250
statement will be false so the code will
248

248

00:14:14.250  -->  00:14:15.810
print this album does not have a track
249

249

00:14:15.810  -->  00:14:17.880
one so basically as you can see on the
250

250

00:14:17.880  -->  00:14:19.940
screen the changes we need to actually
251

251

00:14:19.940  -->  00:14:22.740
change the index greater than zero to be
252

252

00:14:22.740  -->  00:14:25.010
index greater than equal to zero but
253

253

00:14:25.010  -->  00:14:26.610
well go through and make that change in
254

254

00:14:26.610  -->  00:14:29.130
the next video all right so let's go
255

255

00:14:29.130  -->  00:14:30.600
back now to where I was talking
256

256

00:14:30.600  -->  00:14:32.610
previously just finishing off the
257

257

00:14:32.610  -->  00:14:36.410
explanation of this method
258

258

00:14:36.410  -->  00:14:40.430
But what I chose to do was actually,
add it in the album because we're actually
259

259

00:14:40.430  -->  00:14:42.660
looking at the album when we're
actually creating the playlist.
260

260

00:14:42.660  -->  00:14:46.220
But it would be equally valid if
you decided to add the mechanism to
261

261

00:14:46.220  -->  00:14:48.930
add a song to the playlist,
if you had that code
262

262

00:14:48.930  -->  00:14:52.460
in the actual song class that would be
perfectly fine to do it that way as well.
263

263

00:14:52.460  -->  00:14:55.650
Okay, so time is ticking on with this
video, so I'm gonna actually end the video
264

264

00:14:55.650  -->  00:14:59.230
here now, but in the next video
we'll continue on we'll actually
265

265

00:14:59.230  -->  00:15:03.110
start creating albums and adding songs and
testing some of this code out.
266

266

00:15:03.110  -->  00:15:04.220
So I'll see you in the next video.
