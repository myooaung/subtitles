1
1

00:00:05,470  -->  00:00:09,270
In the previous video, we finished off
our discussions about inheritance.
2

2

00:00:09,270  -->  00:00:10,210
So now it's time for
3

3

00:00:10,210  -->  00:00:14,300
the challenge to solidify your
understanding of what inheritance is.
4

4

00:00:14,300  -->  00:00:15,150
But before I do that,
5

5

00:00:15,150  -->  00:00:20,050
I just want to talk about that all classes
in Java inherit from automatically.
6

6

00:00:20,050  -->  00:00:22,910
I briefly alluded to that
in the previous videos.
7

7

00:00:22,910  -->  00:00:26,850
But what actually happens now, even if
you're not typing the keyword to extend
8

8

00:00:26,850  -->  00:00:31,530
a class, which we've shown in the previous
video, the use of the extends keyword.
9

9

00:00:31,530  -->  00:00:34,500
The class is automatically inheriting from
10

10

00:00:34,500  -->  00:00:37,450
a Java supplied class
called the Object class.
11

11

00:00:37,450  -->  00:00:41,080
And you can see that by opening
up your Generate command,
12

12

00:00:41,080  -->  00:00:43,350
if you go to Override Methods.
13

13

00:00:43,350  -->  00:00:47,130
You can see when I've done that, select
methods to override or to implement.
14

14

00:00:47,130  -->  00:00:48,710
And you can see here,
these are all methods.
15

15

00:00:48,710  -->  00:00:50,300
The M stands for method.
16

16

00:00:50,300  -->  00:00:55,350
And these are all methods that are
inherited from java.lang.object which is
17

17

00:00:55,350  -->  00:01:00,400
a class that, classes that you
create are automatically extend.
18

18

00:01:00,400  -->  00:01:03,800
So that's equivalent,
essentially, to typing extends.
19

19

00:01:09,590  -->  00:01:12,100
Java.lang.object, as you can see there.
20

20

00:01:12,100  -->  00:01:14,080
And we can go and have a look at that, and
21

21

00:01:14,080  -->  00:01:17,830
you can see, class object is
the root of the class hierarchy.
22

22

00:01:17,830  -->  00:01:19,880
Every class has object as a superclass.
23

23

00:01:19,880  -->  00:01:23,310
All objects, including arrays,
implement the methods of this class.
24

24

00:01:23,310  -->  00:01:25,260
That's really important to know.
25

25

00:01:25,260  -->  00:01:30,820
This happens automatically, this is the
actual source code for the object class,
26

26

00:01:30,820  -->  00:01:34,760
which is inherited automatically
from when you create other classes.
27

27

00:01:34,760  -->  00:01:37,040
So you can see that we'll go
through some of these methods and
28

28

00:01:37,040  -->  00:01:38,950
get a hash code and equal.
29

29

00:01:38,950  -->  00:01:42,390
So it's a comparison determining
one type of object against another.
30

30

00:01:44,410  -->  00:01:48,990
There's also two string which we'll
be using to later, which is a string,
31

31

00:01:48,990  -->  00:01:52,880
it's just a way to return a string
representation of a specific object.
32

32

00:01:52,880  -->  00:01:54,580
So I won't go into anymore now, but
33

33

00:01:54,580  -->  00:01:59,040
the main point I wanted to really pass
on in the moment is even though your
34

34

00:01:59,040  -->  00:02:03,120
classes when you're creating new ones you
arent actually topping an extends object.
35

35

00:02:03,120  -->  00:02:08,060
They are automatically extended by
Java and its an interesting thing to
36

36

00:02:08,060  -->  00:02:10,580
realize and that's just the way
that Java do implement.
37

37

00:02:10,580  -->  00:02:12,100
Okay so I'll just undo those changes.
38

38

00:02:15,800  -->  00:02:20,080
Okay, so let's talk a bit now about
the challenge for inheritance.
39

39

00:02:20,080  -->  00:02:25,600
[SOUND]
Okay,
40

40

00:02:25,600  -->  00:02:31,610
so here is your
41

41

00:02:31,610  -->  00:02:37,120
challenge.
42

42

00:02:37,120  -->  00:02:40,440
You're wanna start with a base class,
which is a vehicle, and
43

43

00:02:40,440  -->  00:02:45,070
you wanna create a car class that
inherits from that base vehicle class.
44

44

00:02:45,070  -->  00:02:48,360
And finally, you wanna create
a third class, which is for
45

45

00:02:48,360  -->  00:02:53,780
a specific type of car that actually
inherits from the car class.
46

46

00:02:53,780  -->  00:02:58,310
No you be willing to, in these classes
you should be able to handle stirring,
47

47

00:02:58,310  -->  00:03:01,990
changing gears and moving,
speed in other words.
48

48

00:03:01,990  -->  00:03:05,910
And you needed to solve where to put
the appropriate stated behaviors
49

49

00:03:05,910  -->  00:03:10,510
of course that is the fields and methods
that are appropriate for each class.
50

50

00:03:10,510  -->  00:03:13,690
And you wanna create some unique
behavior that is specific
51

51

00:03:13,690  -->  00:03:17,340
to that final class that inherits
from the car class as well.
52

52

00:03:17,340  -->  00:03:19,040
So have a go at doing that challenge,
53

53

00:03:19,040  -->  00:03:22,730
this will really help your
understanding of what Inheritance is.
54

54

00:03:22,730  -->  00:03:25,240
And pause the video now,
go away and do that and
55

55

00:03:25,240  -->  00:03:29,070
once you've had enough or
once you've got a solution and you wanna
56

56

00:03:29,070  -->  00:03:32,680
compare the solution to what I've come up
with, come back and we'll go through that.
57

57

00:03:35,330  -->  00:03:37,490
Okay, head it together,
and did you figure it out?
58

58

00:03:37,490  -->  00:03:39,890
And bearing in mind,
there isn't only one answer to this.
59

59

00:03:39,890  -->  00:03:42,170
There's quite a few different
ways to implement this.
60

60

00:03:42,170  -->  00:03:46,790
But the answer I'm gonna come up with
is to start with the vehicle class.
61

61

00:03:46,790  -->  00:03:49,910
So I'm going to create a new class and
call it vehicle.
62

62

00:03:54,200  -->  00:03:57,780
And with that vehicle class,
I'm going to have two fields.
63

63

00:03:57,780  -->  00:04:01,320
I'm gonna have private and
string name, the name of the vehicle.
64

64

00:04:02,340  -->  00:04:04,510
Because, of course,
all vehicles I have got a name.
65

65

00:04:04,510  -->  00:04:05,830
I'm also going to go with the size.
66

66

00:04:07,090  -->  00:04:10,970
You could have some other
generic characteristics here.
67

67

00:04:10,970  -->  00:04:15,860
So as long as it's specific towards
a generic vehicle and that would be fine,
68

68

00:04:15,860  -->  00:04:17,430
there would be no problems there.
69

69

00:04:17,430  -->  00:04:19,210
You would also want to have a constructor.
70

70

00:04:20,470  -->  00:04:25,800
Constructor for that, both those fields,
so we can initialize our objects.
71

71

00:04:25,800  -->  00:04:29,390
The other thing that we're going to
have here is also two other fields,
72

72

00:04:29,390  -->  00:04:32,140
which deal with the current velocity,
the current speed,
73

73

00:04:32,140  -->  00:04:34,660
in other words the current direction.
74

74

00:04:34,660  -->  00:04:35,870
And we want velocity so
75

75

00:04:35,870  -->  00:04:40,180
that we can determine the speed, figure
out how fast the vehicle is going, and
76

76

00:04:40,180  -->  00:04:43,920
also the direction where it's
pointed to at the moment.
77

77

00:04:43,920  -->  00:04:48,090
So I'm gonna do private
int current velocity and
78

78

00:04:48,090  -->  00:04:51,150
private int, current direction.
79

79

00:04:53,250  -->  00:04:56,410
Now, unlock the first two
fields we're going to find.
80

80

00:04:56,410  -->  00:05:00,020
What we're gonna do here is when we're
creating a new instance of the vehicle
81

81

00:05:00,020  -->  00:05:01,760
class, in other words,
creating a new object,
82

82

00:05:01,760  -->  00:05:05,100
we're just going to initialize velocity
and current direction to zero.
83

83

00:05:05,100  -->  00:05:08,180
So let's start current
velocity is equal to zero.
84

84

00:05:09,230  -->  00:05:14,550
This dot current direction,
current direction equals zero.
85

85

00:05:14,550  -->  00:05:19,280
So next, we talked about, coming back to
our description, how to handle steering,
86

86

00:05:19,280  -->  00:05:20,550
changing gears and moving.
87

87

00:05:20,550  -->  00:05:25,410
Well of course, in our vehicle class
we haven't got a concept of gears.
88

88

00:05:25,410  -->  00:05:28,350
And the reason for
that is not all vehicles have gears.
89

89

00:05:28,350  -->  00:05:30,740
So it wouldn't be appropriate
to put these in here.
90

90

00:05:30,740  -->  00:05:32,960
But the other thing was moving, and
91

91

00:05:32,960  -->  00:05:35,000
moving is of course something
that all vehicles do.
92

92

00:05:35,000  -->  00:05:38,080
If they move they can be pointed
in a certain direction so
93

93

00:05:38,080  -->  00:05:40,820
we need to handle that in this class.
94

94

00:05:40,820  -->  00:05:44,170
So I'm going to first create
a public method called steer.
95

95

00:05:44,170  -->  00:05:48,020
It's gonna take a parameter for
the direction, and what I'm going to do is
96

96

00:05:48,020  -->  00:05:52,590
actually add to whatever's been sent to
that method, to the current direction.
97

97

00:05:52,590  -->  00:05:54,770
So in other words,
it's a mechanism for steering.
98

98

00:05:54,770  -->  00:06:00,880
So I'm gonna call that public void steer,
int direction.
99

99

00:06:00,880  -->  00:06:07,880
And I'm gonna put current,
This.currentDirection += direction.
100

100

00:06:07,880  -->  00:06:14,650
Then I'm going to do some system
output to put Vehicle.steer and
101

101

00:06:14,650  -->  00:06:18,260
I'm gonna put Steering at,
102

102

00:06:18,260  -->  00:06:22,530
put the current direction and
we'll call that degrees, but
103

103

00:06:22,530  -->  00:06:25,810
it might just be an angle or whatever
it is, but we'll just call it degrees.
104

104

00:06:25,810  -->  00:06:29,760
That's our steering method,
which again, applies to all vehicles.
105

105

00:06:29,760  -->  00:06:33,010
We're also going to create another method
and we're going to call that Move.
106

106

00:06:33,010  -->  00:06:37,580
I'm going to accept two parameters,
the velocity and the direction.
107

107

00:06:37,580  -->  00:06:42,820
So go to public void move int
108

108

00:06:42,820  -->  00:06:48,550
velocity and int direction.
109

109

00:06:48,550  -->  00:06:52,140
I'm gonna put current
velocity equals velocity,
110

110

00:06:52,140  -->  00:06:56,990
current direction equals direction.
111

111

00:06:56,990  -->  00:07:02,570
And print output message Vehicle.move
112

112

00:07:02,570  -->  00:07:07,320
moving at plus currentVelocity,
113

113

00:07:07,320  -->  00:07:12,580
in direction, currentDirection and
114

114

00:07:12,580  -->  00:07:16,690
I'll lock the steer method.
115

115

00:07:16,690  -->  00:07:18,950
What we're doing here is we're
actually setting the velocity and
116

116

00:07:18,950  -->  00:07:20,610
direction to the specific number.
117

117

00:07:20,610  -->  00:07:24,910
With the steer, the way we've set
that up is we're allowing it to
118

118

00:07:25,990  -->  00:07:29,720
change relative to the current position,
so we're storing the current position,
119

119

00:07:29,720  -->  00:07:33,950
or the current direction,
enabling you to move relative to that.
120

120

00:07:33,950  -->  00:07:38,800
Whereas the move method we're actually
allowing you to just effectively change
121

121

00:07:38,800  -->  00:07:40,580
the velocity and the direction.
122

122

00:07:40,580  -->  00:07:43,980
No right or wrong here,
just my implementation for that.
123

123

00:07:43,980  -->  00:07:47,960
And we also wanna do a getter and
setter for a few of these fields.
124

124

00:07:47,960  -->  00:07:51,660
So I'm going to just probably speed
wise just going to select that and
125

125

00:07:53,040  -->  00:07:55,100
choose a getter for all fields.
126

126

00:07:55,100  -->  00:07:58,780
So that's our vehicle class,
next we wanna create a car class.
127

127

00:07:58,780  -->  00:08:01,760
We want to obviously extend or
inherit from that vehicle class.
128

128

00:08:01,760  -->  00:08:04,590
So we're gonna create
a new class call it car.
129

129

00:08:06,230  -->  00:08:09,730
And of course we're going to extend or
inherit from the vehicle.
130

130

00:08:11,360  -->  00:08:13,800
And obviously,
it'll want us to create a constructive.
131

131

00:08:13,800  -->  00:08:17,500
But before we do that, we want to
create our unique fields for our car.
132

132

00:08:18,540  -->  00:08:20,980
Firstly, we're going to
define the number of wheels,
133

133

00:08:20,980  -->  00:08:24,670
because not all vehicles have wheels.
134

134

00:08:24,670  -->  00:08:28,740
Example, some boats are vehicles and
they don't have wheels.
135

135

00:08:28,740  -->  00:08:30,080
And you're going to define doors.
136

136

00:08:30,080  -->  00:08:31,770
They're unique to a car,
the number of doors.
137

137

00:08:32,840  -->  00:08:35,940
In to gears, as in the number of
gears that a present in a car,
138

138

00:08:35,940  -->  00:08:39,910
because all cars do have gears,
it's just a different number, of course.
139

139

00:08:39,910  -->  00:08:43,100
We're also going to use a variable,
is manual,
140

140

00:08:43,100  -->  00:08:49,430
and that's a true or false as to whether
it's got a manual or automatic gearbox.
141

141

00:08:49,430  -->  00:08:52,530
And we're going to store another
variable called current gear.
142

142

00:08:54,010  -->  00:08:57,430
If you recall we talked about
that in the vehicle class.
143

143

00:08:57,430  -->  00:09:00,320
Because not all vehicles have keys,
we have
144

144

00:09:00,320  -->  00:09:04,690
decided to create a field called current
gear and put that in the car class.
145

145

00:09:05,760  -->  00:09:12,090
So that's the current key, current gear
that the car is in at any point in time.
146

146

00:09:12,090  -->  00:09:13,310
So let's create the constructor,
147

147

00:09:13,310  -->  00:09:16,900
and with constructor is going
to initialize all of these.
148

148

00:09:16,900  -->  00:09:21,380
But also put some extra code in for us,
149

149

00:09:21,380  -->  00:09:24,940
which was the two parameters string for
the name and the string for
150

150

00:09:24,940  -->  00:09:29,690
the size which are going to
initialize our vehicle class as well.
151

151

00:09:29,690  -->  00:09:33,280
And that's IntelliJ doing that work for
us which is very nice.
152

152

00:09:33,280  -->  00:09:37,460
But what I'm going to do though is
change the last parameter for the gear.
153

153

00:09:37,460  -->  00:09:40,850
The current gear, we don't actually
want that to construct a parameter.
154

154

00:09:40,850  -->  00:09:45,300
And the reason is we're going to assume
that when we create a new object
155

155

00:09:45,300  -->  00:09:48,730
we can set that to one,
to be in first gear.
156

156

00:09:48,730  -->  00:09:51,200
And now we need a few other methods here.
157

157

00:09:51,200  -->  00:09:53,500
What we need is the ability
to change the gear.
158

158

00:09:53,500  -->  00:09:57,550
We need the ability to change
velocity of the vehicle.
159

159

00:09:57,550  -->  00:10:02,520
We're gonna add a method to stop, and
we also need to be able to steer as well.
160

160

00:10:03,790  -->  00:10:06,470
So let's start by creating a setter.
161

161

00:10:06,470  -->  00:10:09,330
We're gonna create a setter for
the current gear.
162

162

00:10:09,330  -->  00:10:14,260
So select current gear and
163

163

00:10:14,260  -->  00:10:20,550
I'm gonna put car.set.gear.
164

164

00:10:20,550  -->  00:10:27,950
Changed to this dot
current gear plus gear.
165

165

00:10:29,570  -->  00:10:32,500
So that's just a standard setter to
change to the current gear whenever
166

166

00:10:32,500  -->  00:10:34,060
we need to do that.
167

167

00:10:34,060  -->  00:10:36,280
And what we could do,
because it's a setter,
168

168

00:10:36,280  -->  00:10:39,530
now normally the convention in
the industry use the word set, but in
169

169

00:10:39,530  -->  00:10:44,320
this case it might actually be better to
rename that and to call that change gear.
170

170

00:10:44,320  -->  00:10:45,750
You dont have to use set current gear.
171

171

00:10:45,750  -->  00:10:49,730
In this case we're just gonna call it
change gear which probably reads a little
172

172

00:10:49,730  -->  00:10:53,250
bit better and makes more sense as to what
were trying to do with it cause this is
173

173

00:10:53,250  -->  00:10:55,840
going to be a function were
going to be able to call.
174

174

00:10:55,840  -->  00:11:00,090
So next we want the ability to change
the velocity of the vehicle so
175

175

00:11:00,090  -->  00:11:03,370
we could just leave it we could
just have no function here.
176

176

00:11:03,370  -->  00:11:06,680
And just call the basic
function that we've set for
177

177

00:11:06,680  -->  00:11:11,490
move here, in which case that would
work fine without any problem.
178

178

00:11:11,490  -->  00:11:14,710
And when you're extending and implementing
classes you have got a choice as to
179

179

00:11:14,710  -->  00:11:18,010
whether you want to use that
low-level function or override it.
180

180

00:11:18,010  -->  00:11:20,170
In this case what I'm going to do,
181

181

00:11:20,170  -->  00:11:23,940
I'm going to create another
method called a change velocity.
182

182

00:11:27,740  -->  00:11:30,070
Which takes two parameters
which is the velocity or
183

183

00:11:30,070  -->  00:11:32,700
we are going to call it speed here and
the direction.
184

184

00:11:36,380  -->  00:11:41,580
And that is going to call the move method.
185

185

00:11:41,580  -->  00:11:44,450
Move, speed, direction.
186

186

00:12:07,100  -->  00:12:08,980
Like so, so that's changeVelocity.
187

187

00:12:08,980  -->  00:12:12,010
And the reason I'm doing that is at some
future point we might wanna have some
188

188

00:12:12,010  -->  00:12:14,450
other mechanisms in
here with the velocity.
189

189

00:12:14,450  -->  00:12:17,750
For example, to test the maximum
speed of the vehicle or
190

190

00:12:17,750  -->  00:12:21,640
some other conditions that are unique
to a car, as opposed to a vehicle.
191

191

00:12:21,640  -->  00:12:25,790
At this stage we're just gonna be
calling the vehicle move method.
192

192

00:12:25,790  -->  00:12:28,810
The next method I'm gonna
have is the stop method.
193

193

00:12:28,810  -->  00:12:31,040
This is the ability to stop so
194

194

00:12:31,040  -->  00:12:34,820
you could argue that all vehicles
need to have a mechanism to stop, and
195

195

00:12:34,820  -->  00:12:38,200
to that end we should probably
create a public method for stop.
196

196

00:12:39,680  -->  00:12:43,280
So public void stop, and I'm creating
that in the vehicle class stop.
197

197

00:12:44,830  -->  00:12:49,960
And all it's going to do is put
the current velocity set that to zero.
198

198

00:12:49,960  -->  00:12:52,380
That's all that stop does,
it basically stops it.
199

199

00:12:52,380  -->  00:12:55,850
It doesn't try and reposition or
anything of that nature,
200

200

00:12:55,850  -->  00:12:58,560
it just purely stops the vehicle.
201

201

00:12:58,560  -->  00:13:00,880
But in terms of stopping for a car,
202

202

00:13:00,880  -->  00:13:04,780
what we wanna do is we want to implement
the method but we wanna override it so
203

203

00:13:04,780  -->  00:13:11,390
I'm going to override the stop method for
the vehicle, a slight stop.
204

204

00:13:11,390  -->  00:13:14,570
So what I'm gonna do I'm not going
to call the super method yet.
205

205

00:13:14,570  -->  00:13:15,500
So actually what I'll do for
206

206

00:13:15,500  -->  00:13:19,450
now is I'll delete this method because we
don't really need to override it for now.
207

207

00:13:19,450  -->  00:13:21,770
For this basic car class it's enough for
208

208

00:13:21,770  -->  00:13:26,250
us to know that we've got to stop,
which will set the velocity to zero.
209

209

00:13:26,250  -->  00:13:31,000
When we get to using the next class, which
will be the class that inherits from car
210

210

00:13:31,000  -->  00:13:33,420
class, that's when we'll add some
more functionality to the stop.
211

211

00:13:34,450  -->  00:13:37,850
And with steering, the same applies, we
don't need to change anything in the car
212

212

00:13:37,850  -->  00:13:42,470
class because we're going to just
pass that on to the vehicle class.
213

213

00:13:42,470  -->  00:13:45,790
Okay, so you can see now we've
implemented the car class, so
214

214

00:13:45,790  -->  00:13:49,290
let's now move on to the next
class which is gonna be
215

215

00:13:49,290  -->  00:13:52,930
a specific type of car that
extends from the car class.
216

216

00:13:52,930  -->  00:13:56,080
So I'm going to create a new
class I wanna call it Outlander,
217

217

00:13:56,080  -->  00:14:01,300
which is a Mitsubishi four wheel drive.
218

218

00:14:01,300  -->  00:14:06,990
I'm gonna create that and
I'm gonna extends car.
219

219

00:14:06,990  -->  00:14:09,160
And what I'm going to do, is assume.
220

220

00:14:09,160  -->  00:14:11,720
So, obviously we're extending from car,
so it's got all the other unique
221

221

00:14:11,720  -->  00:14:13,670
characteristics from the car and
the vehicle.
222

222

00:14:13,670  -->  00:14:17,110
But we're gonna add one private field.
223

223

00:14:17,110  -->  00:14:19,760
So, I'm going to put Road service.
224

224

00:14:22,340  -->  00:14:26,140
The number of months of road service that
are available for this top of vehicle.
225

225

00:14:26,140  -->  00:14:30,670
Next I'm gonna create a public
constructor, I'm going to
226

226

00:14:30,670  -->  00:14:32,400
initialize the road service.
227

227

00:14:32,400  -->  00:14:35,670
And you'll find it all the medically
initializes all these other fields
228

228

00:14:35,670  -->  00:14:37,290
for this road.
229

229

00:14:37,290  -->  00:14:40,920
What we can do with some of these
parameters cuz we can change them.
230

230

00:14:40,920  -->  00:14:45,440
For example, for the Outlander, we don't
need to do, have that as a parameter.
231

231

00:14:45,440  -->  00:14:49,560
Cuz we have an Outlander class,
we know that it's the Outlander.
232

232

00:14:49,560  -->  00:14:52,900
So, we're going to use
that in our constructor.
233

233

00:14:52,900  -->  00:14:54,440
We're going to pass Outlander.
234

234

00:14:54,440  -->  00:14:58,440
And for the size,
we're gonna go with four wheel drive.
235

235

00:15:00,060  -->  00:15:01,560
So we also don't need that as a parameter.
236

236

00:15:01,560  -->  00:15:04,780
So I'm going to actually change
those from the Outlander parameters.
237

237

00:15:06,880  -->  00:15:11,570
And we're left only with the wheels,
the doors, the gears, whether it's manual,
238

238

00:15:11,570  -->  00:15:13,360
and the road service.
239

239

00:15:13,360  -->  00:15:15,650
And actually, as it turns out,
all of those parameters there.
240

240

00:15:15,650  -->  00:15:18,230
The wheels, doors,
the gears, and the manual.
241

241

00:15:19,470  -->  00:15:22,960
Because we're defining now
the actual type of car we
242

242

00:15:22,960  -->  00:15:24,590
shouldn't really have those as parameters.
243

243

00:15:24,590  -->  00:15:26,940
What we wanna do is just hard code those,
for
244

244

00:15:26,940  -->  00:15:29,300
want of a better term,
in the constructor setting.
245

245

00:15:29,300  -->  00:15:32,230
And of course you could still make
it optional with a moddable types of
246

246

00:15:32,230  -->  00:15:35,070
Outlanders which there are real terms.
247

247

00:15:35,070  -->  00:15:39,480
But to keep things simple we're gonna
assume there's only one type of Outlander,
248

248

00:15:39,480  -->  00:15:43,350
and we know ahead of time the number of
wheels and doors and gears and so forth.
249

249

00:15:43,350  -->  00:15:46,130
So what I'm going to do there
is put number of wheels to be 5,
250

250

00:15:46,130  -->  00:15:47,240
including the spare.
251

251

00:15:47,240  -->  00:15:50,370
5 doors including the rear door.
252

252

00:15:50,370  -->  00:15:53,090
Six speed and we're gonna put is Manual,
253

253

00:15:53,090  -->  00:15:58,420
we're gonna set that to false
because it's actually an automatic.
254

254

00:15:58,420  -->  00:15:59,280
So consequently,
255

255

00:15:59,280  -->  00:16:03,250
now that I've done that, I can actually
delete those from the constructor.
256

256

00:16:05,890  -->  00:16:06,570
As you can see there.
257

257

00:16:07,660  -->  00:16:09,980
So we're left now to
create a new Outlander,
258

258

00:16:09,980  -->  00:16:12,370
which of course is extending
from the car class.
259

259

00:16:12,370  -->  00:16:15,120
We really only need to pass one
parameter which is the road service,
260

260

00:16:15,120  -->  00:16:18,910
the number of months this vehicle
has got for road service.
261

261

00:16:18,910  -->  00:16:22,190
And new cars they,
with Mitsubishi cars they give you so
262

262

00:16:22,190  -->  00:16:24,830
many months of free roadside
service if you ever break down.
263

263

00:16:24,830  -->  00:16:27,010
So what we're defining is how
many months a vehicle has got.
264

264

00:16:27,010  -->  00:16:31,890
All right, I'm going to pause the video
here, we'll come back in the next one and
265

265

00:16:31,890  -->  00:16:35,590
continue on with the solution
to the inheritance challenge.
