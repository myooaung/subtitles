WEBVTT
1
1

00:00:04.860  -->  00:00:09.130
so if we re-run our application from the
last video again we can see now that the
2

2

00:00:09.130  -->  00:00:14.630
label is correctly aligned and centered at
the top and we can make the window large
3

3

00:00:14.630  -->  00:00:19.470
or small and remains centered so its a
combination of specifying top but also
4

4

00:00:19.470  -->  00:00:24.070
the borderpane.alignment = center so let's move on now
5

5

00:00:24.070  -->  00:00:28.480
to the border panes left and right
positions now the controls in these
6

6

00:00:28.480  -->  00:00:32.660
positions will be sized to their
preferred widths andwill occupy the
7

7

00:00:32.660  -->  00:00:37.070
entire height of the position now that's
different not including the height of
8

8

00:00:37.070  -->  00:00:41.390
the border pane because the top and
bottom positions occupy the entire width
9

9

00:00:41.390  -->  00:00:45.980
of the border pane itself and that means
that they occupy part of the left or
10

10

00:00:45.980  -->  00:00:50.860
right hand side of the border pane if that
makes sense what we gonna do is add some
11

11

00:00:50.860  -->  00:00:55.250
labels into these positions using the
left and right child elements so come down
12

12

00:00:55.250  -->  00:01:03.680
here after top and clear up some of these lines here....so come down here at the end
13

13

00:01:03.680  -->  00:01:18.950
of top element and we're gonna add....
14

14

00:01:18.950  -->  00:01:23.080
.....
15

15

00:01:23.590  -->  00:01:35.260
......
16

16

00:01:35.260  -->  00:01:45.420
.......
17

17

00:01:45.420  -->  00:01:51.310
..and if we run this
18

18

00:01:55.030  -->  00:01:59.690
so you can see what's happening their now we
got the label size to their preferred
19

19

00:01:59.690  -->  00:02:04.460
widths and place at the top of the left
and right positions and obviously we can
20

20

00:02:04.460  -->  00:02:10.040
maximize this and they still stay in those
positions now we still have the center
21

21

00:02:10.040  -->  00:02:14.320
position so that's add a label there and give it
some text so that it will be too long to fit in
22

22

00:02:14.320  -->  00:02:16.720
the remaining spaces just to see what happens
23

23

00:02:16.720  -->  00:02:20.960
remember that the center position will get
any space that's left over after
24

24

00:02:20.960  -->  00:02:24.130
controls have been placed in the other
positions so let's go ahead and do that
25

25

00:02:24.130  -->  00:02:27.820
and......
26

26

00:02:30.180  -->  00:02:37.700
.....
27

27

00:02:37.700  -->  00:02:56.830
...making it really long just to see what happens ok so that's our label for center
28

28

00:02:56.830  -->  00:03:01.110
and again remember that the center position
will get any spaces left over after
29

29

00:03:01.110  -->  00:03:07.480
controls have been placed in the other
positions so lets run this and what you can
30

30

00:03:07.480  -->  00:03:12.600
see strait away is that the
center label text is cut off so if
31

31

00:03:12.600  -->  00:03:21.010
we widen the window you can see eventually
the center area is expanding but the
32

32

00:03:21.010  -->  00:03:25.440
left and the right don't expand because the
labels in those positions are already at
33

33

00:03:25.440  -->  00:03:26.770
their preferred widths
34

34

00:03:26.770  -->  00:03:30.410
so if we now make the window taller you will see the same behaviors so we take it back to what it was
35

35

00:03:31.570  -->  00:03:39.750
and if I make it taller...so we got more positions for the Center more
Space there but the left and right
36

36

00:03:39.750  -->  00:03:44.750
positions aren't moving again because they are
already at their preferred heights so if
37

37

00:03:44.750  -->  00:03:48.670
the controls in the top bottom left or
right positions weren't already at the
38

38

00:03:48.670  -->  00:03:52.580
preferred widths and heights they would
expand before space was given to the
39

39

00:03:52.580  -->  00:03:56.270
center position so that's the border
pane layout that's all we are going to look at
40

40

00:03:56.270  -->  00:04:03.330
for that so close it down now the anchor pane is another popular top level layout
41

41

00:04:03.330  -->  00:04:08.330
and it allows use to anchor children to
edges which can
42

42

00:04:08.330  -->  00:04:12.830
influence what happens when the pane is
resized now for example you might
43

43

00:04:12.830  -->  00:04:16.610
wanna anchor a title to the top of the
pane so that when the window is resized
44

44

00:04:16.610  -->  00:04:22.360
a bunch of space isn't added between the
title and the Windows title bar or we
45

45

00:04:22.360  -->  00:04:27.190
could anchor a h box containing buttons
to the bottom of the pane so we are gonna look
46

46

00:04:27.190  -->  00:04:31.460
at anchor pane in more detail in the later lecture but next we are gonna actually look at
47

47

00:04:31.460  -->  00:04:36.780
another layout which is the flow pane layout now this layout is very similar to the
48

48

00:04:36.780  -->  00:04:42.690
h box and v box layouts we talked about and
used but it does differ in that
49

49

00:04:42.690  -->  00:04:48.570
it wraps its children so with a h box the
children are laid out horizontally as a
50

50

00:04:48.570  -->  00:04:53.590
single row now if the window is re-sized so
there isn't enough room then the children
51

51

00:04:53.590  -->  00:04:58.290
will be cut off and that principle applies
to v box layout
52

52

00:04:58.970  -->  00:05:04.380
so its lays out its children vertically and if there isn't enough height
to fill them all then some children will
53

53

00:05:04.380  -->  00:05:05.620
actually cut off
54

54

00:05:05.620  -->  00:05:10.130
now when using a flow pane children
won't be cut off unless the user
55

55

00:05:10.130  -->  00:05:14.580
resizes the window so that it's not
possible to show them all so when the
56

56

00:05:14.580  -->  00:05:19.690
orientation of the flow pane is set to
horizontal and the user resizes the
57

57

00:05:19.690  -->  00:05:23.750
window so that all the children can't
fit into a single row the layout will
58

58

00:05:23.750  -->  00:05:27.830
actually wrap the children to the next row that's really the difference with
59

59

00:05:27.830  -->  00:05:32.660
flow pane now if the user then increases the
width of the window the children will pop
60

60

00:05:32.660  -->  00:05:34.850
back to the previous row
61

61

00:05:34.850  -->  00:05:39.440
the same applies when the flow panes
orientation is set to vertical if
62

62

00:05:39.440  -->  00:05:43.100
there isn't enough height for the children
to fit into a single column some
63

63

00:05:43.100  -->  00:05:47.060
children will wrap into the next column
so lets try this out what we gonna do is
64

64

00:05:47.060  -->  00:05:52.470
we're going to set up a flow pane with
10 buttons and have a bit of a play around with the
65

65

00:05:52.470  -->  00:05:58.470
orientation just to see how this works
so I'm going to comment this out so that this will
66

66

00:05:58.470  -->  00:06:02.710
be available in the source code in case you
need to use that we're gonna start on
67

67

00:06:02.710  -->  00:06:09.760
line 1 again up here and start from
scratch so we are going to start with the flow pane
68

68

00:06:09.760  -->  00:06:13.590
so....
69

69

00:06:14.260  -->  00:06:17.720
.....
70

70

00:06:18.250  -->  00:06:21.250
.....
71

71

00:06:22.640  -->  00:06:44.880
.....
72

72

00:06:44.880  -->  00:06:47.880
.....we are gonna add 10 buttons so.....
73

73

00:06:49.210  -->  00:06:57.720
....and lets do a copy paste for the rest....
74

74

00:06:57.720  -->  00:06:58.570
....
75

75

00:06:58.570  -->  00:07:01.570
......
76

76

00:07:03.210  -->  00:07:23.590
..so what we've done is we've set of a flow pane
77

77

00:07:23.590  -->  00:07:28.220
we set the orientation to horizontal although horizontal is the default so we don't
78

78

00:07:28.220  -->  00:07:31.660
really have to do that so that's the
code on line 4 we could have left that out but often
79

79

00:07:31.660  -->  00:07:35.000
it can be a good idea to spell out what
you trying to achieve anyway so here
80

80

00:07:35.000  -->  00:07:37.600
it's clear that what we try to do
without having to sort of remember what
81

81

00:07:37.600  -->  00:07:44.030
the defaults are so if we run this now we see that
the window size we set in main java is in 2 rows
82

82

00:07:44.030  -->  00:07:48.960
now based on the size that we
specified again the size we specified
83

83

00:07:48.960  -->  00:07:51.960
in main.java here on line 15
84

84

00:07:56.300  -->  00:08:02.520
so running it you can see the buttons one
two three four and five fit in the
85

85

00:08:02.520  -->  00:08:07.250
first row button 6 7 8 9 10 fit in the
second row and that's because there's
86

86

00:08:07.250  -->  00:08:11.560
enough room to show five buttons in the
first row and then flow pane wrap
87

87

00:08:11.560  -->  00:08:15.510
buttons 6 through 10 to the second row but
if we widen the window you'll see that the little
88

88

00:08:15.510  -->  00:08:20.110
pop back to the first row so if I come over here now and just make this bigger you can see now they are popping back
89

89

00:08:20.110  -->  00:08:26.720
automatically so no code changes required from your point of view for that to happen its just sizing it's actually moving
90

90

00:08:26.720  -->  00:08:33.520
automatically we can go right down here
if you wanted to so the flow pane layout
91

91

00:08:33.520  -->  00:08:37.650
is doing that for us as well now what we
could do there as well we could add a
92

92

00:08:37.650  -->  00:08:42.090
gap between the buttons if we wanted to
do that and you've seen that previously so I won't
93

93

00:08:42.090  -->  00:08:45.380
actually do it again there now so let's try
the same thing but with a vertical
94

94

00:08:45.380  -->  00:08:49.320
flow pane as well and to do that I'm gonna
closed this down and you guess it I'm going to go to
95

95

00:08:49.320  -->  00:08:54.930
orientation and set that two vertical like so and if we just run it again you can see by default it
96

96

00:08:58.630  -->  00:09:03.800
stack them 1 to 10 and its different row and again we can just go up and it's gonna try
97

97

00:09:03.800  -->  00:09:10.890
and make them fit based on how wide the
window is so let's quickly change the
98

98

00:09:10.890  -->  00:09:15.490
flow pane back to a v box to see that
the children will be cut off if we resize
99

99

00:09:15.490  -->  00:09:16.900
the window too small
100

100

00:09:16.900  -->  00:09:22.850
where's that wasn't the case with flow pane so make that a v box and we need to remove the
101

101

00:09:22.850  -->  00:09:27.850
orientation because that's not part of
v box...and if you run this....
102

102

00:09:35.460  -->  00:09:38.460
and of course that should be capital V...and run it again now
103

103

00:09:52.700  -->  00:09:58.470
or will just add the import sometimes IntelliJ takes a while to pop
that up now I will accept the import
104

104

00:09:58.470  -->  00:10:04.720
I could have just type that in and now third time lucky
will try running it again and it should actually work and you
105

105

00:10:04.720  -->  00:10:09.610
can see that as I move up notice how unlike the
106

106

00:10:09.610  -->  00:10:14.280
flow pane the buttons are actually
getting cut off as I'm making it smaller than the
107

107

00:10:14.280  -->  00:10:18.970
v box so that's the difference between that and a flow pane the flow pane will seek to make the
108

108

00:10:18.970  -->  00:10:21.020
buttons fit as much as it can
109

109

00:10:21.020  -->  00:10:27.320
whereas the v box layouts quite happy to
actually stop those buttons or actually to not
110

110

00:10:27.320  -->  00:10:32.230
show the buttons and and for them to
disappear off screen so maybe a question
111

111

00:10:32.230  -->  00:10:37.420
now is that why would
you use a flow pane or when would you use a flow pane
112

112

00:10:37.420  -->  00:10:43.040
rather than a h box or a V Box layout well
it makes sense to have the children wrap
113

113

00:10:43.040  -->  00:10:46.960
or if your not sure how many children their
will be for example your adding children
114

114

00:10:46.960  -->  00:10:51.380
pragmatically based on records you reading
from a data base then using flow pane
115

115

00:10:51.380  -->  00:10:55.190
would make perfect sense but when you
don't want the children to wrap for
116

116

00:10:55.190  -->  00:10:58.420
example when adding buttons to the
bottom or right-hand of a dialog you'd
117

117

00:10:58.420  -->  00:11:03.340
use h box or v box in that scenario
so the tile pane layout is similar to a
118

118

00:11:03.340  -->  00:11:08.580
flow pane the difference is that it lays out its
children in a grid and every cell or
119

119

00:11:08.580  -->  00:11:13.540
tile in the grid will have the same size
so tile pane will wraps its children just
120

120

00:11:13.540  -->  00:11:17.020
like flow pane does so to see the
difference lets switch back to a
121

121

00:11:17.020  -->  00:11:22.490
horizontal flow pane so I'm just gonna undo the changes undo them to go back to where we
122

122

00:11:22.490  -->  00:11:25.490
were
123

123

00:11:27.340  -->  00:11:45.400
...ok we got our flow pane back and I just change the to a horizontal again so if we run this again to confirm now we can obviously see in this
scenario that button 7 for example
124

124

00:11:45.400  -->  00:11:49.270
is wider than button 2 button six and
there's no space between the buttons so
125

125

00:11:49.270  -->  00:11:55.340
that's the default functionality with
flow pane but if you changes to tile pane so gonna change
126

126

00:11:55.340  -->  00:12:07.010
flow pane to tile pane and accept the import and we need to remove
127

127

00:12:07.010  -->  00:12:14.600
the orientation again and if you run this
you will noticed a couple of things that
128

128

00:12:14.600  -->  00:12:17.690
are different their first you see
that every cell been allocated the
129

129

00:12:17.690  -->  00:12:22.850
same width so there are gaps between the
buttons because some buttons aren't wide
130

130

00:12:22.850  -->  00:12:27.430
enough to occupy the width of their cell now because each tile has a width
131

131

00:12:27.430  -->  00:12:31.890
of the largest button there are three rows
when we first run the application rather
132

132

00:12:31.890  -->  00:12:36.310
than 2 that we saw when using flow pane
also the buttons are centered within
133

133

00:12:36.310  -->  00:12:40.180
each cell when we resize the window we'll see the buttons wrap and unwrap
134

134

00:12:40.180  -->  00:12:50.920
just as I did with flow pane so let me do that now and notice how they are moving again as we saw with flow pane so
135

135

00:12:50.920  -->  00:12:57.260
that's tile pane so finally now we get to the
last layout and that is the stack pane layout
136

136

00:12:57.260  -->  00:13:01.630
now the stack pane places all of its
children in a stack in other words the
137

137

00:13:01.630  -->  00:13:06.810
control in a stack pane occupy a single
cell and are piled on top of each other
138

138

00:13:06.810  -->  00:13:11.980
so let's add a label and a button to a stack
to see what this looks like so I'm going to
139

139

00:13:11.980  -->  00:13:17.750
just comment that out again so that when you
download the source code if you want to
140

140

00:13:17.750  -->  00:13:25.400
those code that I have worked on is their and copy a bit of this code to save a bit of typing....
141

141

00:13:28.260  -->  00:13:33.180
but we are not going to use tile pane we are gonna use stack pane...
142

142

00:13:34.160  -->  00:13:54.400
.....ok lets add a button first so....
143

143

00:13:54.400  -->  00:14:04.930
.....
144

144

00:14:04.930  -->  00:14:16.760
....so if we run this is
you can see the button and the label are on top of
145

145

00:14:16.760  -->  00:14:20.540
each other so is the button on top of
the label or the label on top of the
146

146

00:14:20.540  -->  00:14:25.850
button so to see that let's change or
set the background of the button color
147

147

00:14:25.850  -->  00:14:28.850
to red and the labels background to color
green
148

148

00:14:30.390  -->  00:14:33.390
so gonna do....
149

149

00:14:34.150  -->  00:14:46.890
....
150

150

00:14:46.890  -->  00:14:55.540
...so you can see now that the labels on top
of the button and just to confirm that
151

151

00:14:55.540  -->  00:15:07.020
if I swap the order now and put the label at the top and run this you can see now the buttons on top of the label and actual
152

152

00:15:07.020  -->  00:15:12.640
fact we can't see the label anymore
because of that so let's add another label
153

153

00:15:12.640  -->  00:15:18.370
after the buttons and set its background to blue
just to see what's going on so if add another
154

154

00:15:18.370  -->  00:15:23.260
label just copy this one here...and will put the second
155

155

00:15:24.810  -->  00:15:34.690
label text and color for that one is blue.......so if I run that and
then we can see that the second label is
156

156

00:15:34.690  -->  00:15:38.620
now on top of the button so the order in
which we add the controls to the fxml
157

157

00:15:38.620  -->  00:15:42.000
will determine the order in
which the control is added to the
158

158

00:15:42.000  -->  00:15:46.150
stack pane so the first control end up at
the bottom of the stack and the last
159

159

00:15:46.150  -->  00:15:50.550
control we add will be at the top of the
stack or as the stack pane documentation
160

160

00:15:50.550  -->  00:15:56.300
puts it the 0th child being the bottom and
the last child on top now the same is going to be true if you
161

161

00:15:56.300  -->  00:16:01.240
do this through code first child you add
to the layout using .getchildren
162

162

00:16:01.240  -->  00:16:06.250
.add will end up at
the bottom of the stack and the last child you
163

163

00:16:06.250  -->  00:16:09.460
add will basically be at the
top of the stack
164

164

00:16:10.200  -->  00:16:13.790
you might be wondering why you'd use stack pane layout because it seems to create a
165

165

00:16:13.790  -->  00:16:14.650
mess
166

166

00:16:14.650  -->  00:16:19.060
now in our example obviously that is true it is quite
messy but supposedly we added and image to the
167

167

00:16:19.060  -->  00:16:22.730
stack and then place the label on top of
it would end up an image with text
168

168

00:16:22.730  -->  00:16:27.230
imposed on it we can also style the texts so that its
surrounded by border etc
169

169

00:16:27.950  -->  00:16:31.030
so if you're familiar with layers in
Photoshop for example or similar
170

170

00:16:31.030  -->  00:16:34.740
software the concept is the same here so
that's what be using a stack pane for
171

171

00:16:34.740  -->  00:16:40.310
ok so othat's it now for layouts
as we've seen JavaFX offer a variety of
172

172

00:16:40.310  -->  00:16:45.750
layouts that we can use to create our user
interface and we can just design the UI we want
173

173

00:16:45.750  -->  00:16:49.990
by using these layouts either alone or
by nesting them and you saw an example
174

174

00:16:49.990  -->  00:16:54.790
of nesting layouts in previous videos its also
possible to create custom layouts but
175

175

00:16:54.790  -->  00:16:59.460
that's really an advance topic that I won't be
covering here so that's the end of this
176

176

00:16:59.460  -->  00:17:03.810
section on layouts next we are gonna take a
closer look at some of the JavaFX
177

177

00:17:03.810  -->  00:17:08.250
controls that we can actually use in our
user interfaces so see you in the next
178

178

00:17:08.250  -->  00:17:08.300
video
