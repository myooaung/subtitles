WEBVTT
1
1

00:00:05.470  -->  00:00:08.130
So this is part two of generics for Java.
2

2

00:00:08.130  -->  00:00:12.190
And just before we start getting on to the
code I just want to go through a couple of
3

3

00:00:12.190  -->  00:00:15.410
brief points to the reason
we're actually using generics.
4

4

00:00:15.410  -->  00:00:19.060
So it's commonly understood in programming
terms that the earlier a bug is spotted in
5

5

00:00:19.060  -->  00:00:23.320
the code, the easier and ultimately
cheaper it is to fix and that's because
6

6

00:00:23.320  -->  00:00:28.100
there's less resources and less man power
invested to actually fix that error.
7

7

00:00:28.100  -->  00:00:30.450
So if a bug appears in production code,
8

8

00:00:30.450  -->  00:00:34.440
production here means the code that has
been released to the Google store or
9

9

00:00:34.440  -->  00:00:39.290
what's commercially available or it's not
test code anymore, it has to be fixed.
10

10

00:00:39.290  -->  00:00:43.540
There's no doubts about it that for most
bugs, so some minor bugs that perhaps you
11

11

00:00:43.540  -->  00:00:46.730
wouldn't need to fix, but ultimately if
it's in production mode there must be
12

12

00:00:46.730  -->  00:00:50.880
fixed and so what is fixing it the code
itself must be then fully tested
13

13

00:00:50.880  -->  00:00:54.260
to insure that the actual fixing made
didn't in fact introduce another bug.
14

14

00:00:54.260  -->  00:00:57.780
And then of course finally the updated
code containing the fix or
15

15

00:00:57.780  -->  00:01:02.410
fixes has to actually be redeployed and
uploaded to the Google store or
16

16

00:01:02.410  -->  00:01:04.960
it what it whichever Android app
store you're actually using.
17

17

00:01:04.960  -->  00:01:06.300
And so any systems, so
18

18

00:01:06.300  -->  00:01:10.030
that's any other apps that rely on
the program, they too have to be tested
19

19

00:01:10.030  -->  00:01:14.750
to ensure that the fix hasn't broken
interoperability between the two systems.
20

20

00:01:14.750  -->  00:01:17.420
Now if the bug itself
is spotted in testing,
21

21

00:01:17.420  -->  00:01:20.660
the effort is actually reduced slightly,
but there's still a requirement for
22

22

00:01:20.660  -->  00:01:23.210
any tests that previously
passed to be performed again.
23

23

00:01:23.210  -->  00:01:25.440
And of course,
if the bug is part of that compile time,
24

24

00:01:25.440  -->  00:01:29.180
no one else actually notices,
except you the programmer.
25

25

00:01:29.180  -->  00:01:32.340
And the fix has had very low
impact on everyone else.
26

26

00:01:32.340  -->  00:01:35.620
So that's the reason why you want to get
this errors fixed early in your code.
27

27

00:01:35.620  -->  00:01:40.120
You don't want to find all these
surprises, bugs, later in the process.
28

28

00:01:40.120  -->  00:01:43.930
Because particularly with larger
applications and when you're involving
29

29

00:01:43.930  -->  00:01:47.950
other resources, other people,
it starts costing a lot of money.
30

30

00:01:47.950  -->  00:01:52.150
If nothing else in programmers' salaries
and time to actually fix those errors.
31

31

00:01:52.150  -->  00:01:54.700
So basically what we're getting at,
what I'm getting at here is that
32

32

00:01:54.700  -->  00:01:58.390
it follows that anything we can do to
pick up these bugs and at compile time,
33

33

00:01:58.390  -->  00:01:59.870
when we're actually writing our code for
34

34

00:01:59.870  -->  00:02:03.080
the first time,
is well worth the effort to get right.
35

35

00:02:03.080  -->  00:02:06.590
So in the previous video, I showed you
how to generic types can be used and
36

36

00:02:06.590  -->  00:02:10.500
how they're actually useful to ensure that
we don't produce a program that compiles
37

37

00:02:10.500  -->  00:02:12.790
fine but
actually gives us errors at runtime.
38

38

00:02:12.790  -->  00:02:15.370
Now I use the example there
of actually adding a string
39

39

00:02:15.370  -->  00:02:19.400
to what was an array list that we
assumed only contained integers.
40

40

00:02:19.400  -->  00:02:21.610
So let's actually have a look at
taking that to the next step and
41

41

00:02:21.610  -->  00:02:24.940
that's actually creating
our own generic classes.
42

42

00:02:24.940  -->  00:02:27.930
Now what I'm gonna use for
this example is the concept of adding
43

43

00:02:27.930  -->  00:02:30.730
players to various types
of sporting teams.
44

44

00:02:30.730  -->  00:02:33.680
So to begin we need to actually
create some basic classes.
45

45

00:02:33.680  -->  00:02:37.370
So let's start off creating
a basic abstract class,
46

46

00:02:37.370  -->  00:02:41.290
we're gonna come down here as we've
always done, and create the new class.
47

47

00:02:41.290  -->  00:02:43.360
I'm gonna go new class.
48

48

00:02:43.360  -->  00:02:45.100
It's gonna be an abstract
class called Player.
49

49

00:02:47.340  -->  00:02:48.890
So I'm gonna make that an abstract class.
50

50

00:02:50.990  -->  00:02:52.400
Abstract class Player.
51

51

00:02:52.400  -->  00:02:54.680
And we're going to have a string
which will be the player name.
52

52

00:02:54.680  -->  00:02:55.180
Name.
53

53

00:02:56.890  -->  00:03:01.890
Gonna add a constructor, which will be
name so we can actually create the object
54

54

00:03:01.890  -->  00:03:04.310
and just a getter as well for
the extra player name as well.
55

55

00:03:04.310  -->  00:03:05.960
A very basic class for our player.
56

56

00:03:05.960  -->  00:03:10.170
So, what we're going to do now is we're
going to create three types, a baseball
57

57

00:03:10.170  -->  00:03:14.780
player for baseball, a football player,
as in Australian rules football and
58

58

00:03:14.780  -->  00:03:19.160
the soccer player as in soccer which
is but in Australia we call football.
59

59

00:03:19.160  -->  00:03:21.490
That make sense football for UK people.
60

60

00:03:21.490  -->  00:03:25.540
So that sounds a bit confusing but, that's
how we call it over here in Australia.
61

61

00:03:25.540  -->  00:03:26.250
So I'm gonna quit.
62

62

00:03:26.250  -->  00:03:27.640
Next classes.
63

63

00:03:27.640  -->  00:03:28.810
First one is gonna be baseball.
64

64

00:03:30.530  -->  00:03:32.670
Baseball player I'm gonna call it.
65

65

00:03:32.670  -->  00:03:36.140
And the baseball player is
going to extends from player.
66

66

00:03:38.450  -->  00:03:42.010
So we need to create a constructor
to pass that through so
67

67

00:03:42.010  -->  00:03:45.930
the actual name is stored cuz that
field is actually in the player class.
68

68

00:03:45.930  -->  00:03:48.010
So there's our baseball player.
69

69

00:03:48.010  -->  00:03:50.360
Let's create the football Player.
70

70

00:03:50.360  -->  00:03:53.800
So football player
71

71

00:03:55.540  -->  00:03:59.850
that's also got an extense from player and
72

72

00:03:59.850  -->  00:04:03.750
we also need to create the constructor for
that so it's happy with that as well.
73

73

00:04:03.750  -->  00:04:06.420
And lastly let's create
the soccer player class.
74

74

00:04:06.420  -->  00:04:11.040
So soccer player and we need extends
75

75

00:04:12.680  -->  00:04:18.220
Player, and we also need to
create the constructor like so.
76

76

00:04:18.220  -->  00:04:20.090
So that's our three classes.
77

77

00:04:20.090  -->  00:04:21.760
There's nothing generic
about those at this stage.
78

78

00:04:21.760  -->  00:04:25.020
But what we're going to do now
is create a team class, and
79

79

00:04:25.020  -->  00:04:28.200
in that team class,
add the ability to actually add players.
80

80

00:04:28.200  -->  00:04:29.720
So alright let's go ahead and do that.
81

81

00:04:29.720  -->  00:04:32.840
Create new Java class.
82

82

00:04:32.840  -->  00:04:35.690
I'm going to call it team.
83

83

00:04:35.690  -->  00:04:39.430
And we're not extending from anything
else because this is a basic class.
84

84

00:04:39.430  -->  00:04:41.020
And we're going to have a name and
85

85

00:04:41.020  -->  00:04:44.890
this is the name of the team as opposed to
the name of the player so private string.
86

86

00:04:47.090  -->  00:04:49.230
Name, and we're gonna keep this simple.
87

87

00:04:49.230  -->  00:04:53.420
We're going to just track the number of
games played, number won, number tied, and
88

88

00:04:53.420  -->  00:04:54.120
number lost.
89

89

00:04:54.120  -->  00:05:00.190
So I'm gonna put int played equal zero,
int won equal zero,
90

90

00:05:00.190  -->  00:05:04.890
int lost equal zero, and
int tied equal zero.
91

91

00:05:04.890  -->  00:05:06.990
Now obviously in a real application,
92

92

00:05:06.990  -->  00:05:10.380
you'd have to deal with fixtures and
those sorts of things.
93

93

00:05:10.380  -->  00:05:13.640
We're gonna keep it pretty basic cuz
there with the basic number of fields.
94

94

00:05:14.700  -->  00:05:18.260
So we're gonna create an array list that's
using generic for our plow objects we're
95

95

00:05:18.260  -->  00:05:23.430
gonna type private array list and
it's going be of type player.
96

96

00:05:23.430  -->  00:05:28.630
And the player's our abstract class that
all the other three classes extend from.
97

97

00:05:28.630  -->  00:05:31.890
And we're gonna sit call that members and
this is member's of the team equals
98

98

00:05:31.890  -->  00:05:36.830
new array list and
I'm going to remove that on a fault.
99

99

00:05:36.830  -->  00:05:40.080
We're probably getting
an error about the level so
100

100

00:05:40.080  -->  00:05:42.290
I need to make sure I've
set the correct level up.
101

101

00:05:42.290  -->  00:05:46.720
So you may not get that error but if you
do, go to project structure and make sure
102

102

00:05:46.720  -->  00:05:51.890
that the project language level is set
to 1.8, so I'm going to click on okay.
103

103

00:05:51.890  -->  00:05:54.050
And you can see that arrow that
disappeared when I did that.
104

104

00:05:54.050  -->  00:05:55.150
So we need a constructor now.
105

105

00:05:56.520  -->  00:06:01.360
Constructor is going to just have the name
team name passed toward it and saved.
106

106

00:06:01.360  -->  00:06:03.810
And we also want a getter for
the team name as well.
107

107

00:06:03.810  -->  00:06:06.970
So we'll just use just that
one the getter for the name.
108

108

00:06:06.970  -->  00:06:09.280
Now we're coming to the part where
we're actually gonna add the player.
109

109

00:06:09.280  -->  00:06:11.770
So we're gonna have an option
to allow us to do that.
110

110

00:06:11.770  -->  00:06:15.240
So I'm gonna type public Boolean.
111

111

00:06:15.240  -->  00:06:18.700
Boolean will be whether we're successful,
we successfully added them or not.
112

112

00:06:18.700  -->  00:06:21.650
AddPlayer, Player.
113

113

00:06:22.830  -->  00:06:26.020
So Player is the abstract
class definition, remember,
114

114

00:06:26.020  -->  00:06:27.060
that we can pass to this.
115

115

00:06:27.060  -->  00:06:31.680
And we can put if
(members.contains Player,
116

116

00:06:34.830  -->  00:06:39.490
then we can print message
player dot get name,
117

117

00:06:39.490  -->  00:06:45.840
plus he's already on the team so we're not
going to allow duplicate, or duplicates.
118

118

00:06:45.840  -->  00:06:50.400
And we're going to return false in that
case, otherwise we're going to do add it.
119

119

00:06:50.400  -->  00:06:53.270
So members dot add, player.
120

120

00:06:55.910  -->  00:07:02.460
And then we're going to
put the player name again,
121

121

00:07:02.460  -->  00:07:08.550
player.getName() + " picked for team".
122

122

00:07:08.550  -->  00:07:10.590
Plus this.name.
123

123

00:07:10.590  -->  00:07:12.250
This.name is the actual team name, and
124

124

00:07:12.250  -->  00:07:15.550
we're going to return true in that case,
cuz we've successfully added it.
125

125

00:07:15.550  -->  00:07:18.200
You can see that's now a method,
add Player.
126

126

00:07:18.200  -->  00:07:22.000
We're accepting the parameter of player,
which is actually going to enable us with
127

127

00:07:22.000  -->  00:07:26.760
one call, to actually pass a baseball
player, football player, or soccer player.
128

128

00:07:26.760  -->  00:07:30.010
And we're able to do that because
we're using an abstract class and
129

129

00:07:30.010  -->  00:07:34.560
obviously we're using a generics here for
the array list definition of type player.
130

130

00:07:34.560  -->  00:07:37.280
By continuing on we need
also need a getter and
131

131

00:07:37.280  -->  00:07:39.260
the getter's gonna return
the number of players on the team.
132

132

00:07:39.260  -->  00:07:42.750
So I'm gonna put public
int num players and
133

133

00:07:42.750  -->  00:07:48.080
that's just gonna return the size
of the array of the array list.
134

134

00:07:48.080  -->  00:07:49.750
So this.members.
135

135

00:07:49.750  -->  00:07:52.370
Member.size.
136

136

00:07:52.370  -->  00:07:53.050
Like so.
137

137

00:07:58.310  -->  00:07:58.910
Okay, so
138

138

00:07:58.910  -->  00:08:03.900
next we're going to actually create
a method that actually gives us a result.
139

139

00:08:03.900  -->  00:08:07.220
The how, what actually happened with
the team, whether we won or lost.
140

140

00:08:07.220  -->  00:08:12.280
So I'm gonna put public,
void, match result.
141

141

00:08:12.280  -->  00:08:15.280
A past team opponent.
142

142

00:08:15.280  -->  00:08:22.180
Int our score int their score.
143

143

00:08:22.180  -->  00:08:24.730
Instead of actually having
to pass whether we won or
144

144

00:08:24.730  -->  00:08:28.430
lost we get the method within this
team class to actually determine that.
145

145

00:08:28.430  -->  00:08:32.150
So we can put if our score
is greater than their
146

146

00:08:32.150  -->  00:08:37.720
score Won plus plus cuz we
obviously won the game.
147

147

00:08:37.720  -->  00:08:43.030
Else if our score is equal to their score.
148

148

00:08:43.030  -->  00:08:44.010
Tied plus plus.
149

149

00:08:46.280  -->  00:08:51.460
Else we obviously lost, cuz that's
the only other potential option.
150

150

00:08:51.460  -->  00:08:53.040
Then we increase the number
of games played.
151

151

00:08:54.200  -->  00:08:58.480
And then interestingly enough we put,
152

152

00:08:58.480  -->  00:09:03.540
if opponent is not equal to null,
opponent dot
153

153

00:09:03.540  -->  00:09:08.360
match result, null their score ourScore.
154

154

00:09:10.400  -->  00:09:14.430
So we're doing it this way now so we can
actually also update the opponent's score.
155

155

00:09:14.430  -->  00:09:18.280
And when we call, basically call
this opponent match result again,
156

156

00:09:18.280  -->  00:09:19.960
we're passing null this time.
157

157

00:09:19.960  -->  00:09:21.560
So if this doesn't get executed again.
158

158

00:09:21.560  -->  00:09:24.540
So this way we're actually saving
our results for our team but
159

159

00:09:24.540  -->  00:09:27.810
we're also saving the results
in the opponent's team as well.
160

160

00:09:27.810  -->  00:09:30.550
Saving the results in their sort
of object a separate object.
161

161

00:09:30.550  -->  00:09:34.000
So that's the match results and
finally we want a ranking.
162

162

00:09:34.000  -->  00:09:37.010
So we just come up with some sort of
ranking system that's pretty simple.
163

163

00:09:37.010  -->  00:09:40.480
So let's do ranking,
public ranking, return.
164

164

00:09:40.480  -->  00:09:45.890
Let's just do our ranking view, number of
games won, modified by two, plus tied.
165

165

00:09:45.890  -->  00:09:49.380
Now that's obviously just one way of doing
it, there's thousands of different ways of
166

166

00:09:49.380  -->  00:09:54.320
rankings, and you could actually implement
this dependent on the actual class itself.
167

167

00:09:54.320  -->  00:09:55.650
We're just keeping it simple for now.
168

168

00:09:55.650  -->  00:09:57.480
So now that we've actually
got the base code in place,
169

169

00:09:57.480  -->  00:10:01.620
we can actually start creating various
types of teams, and adding players.
170

170

00:10:01.620  -->  00:10:03.250
So let's go to the main method and
start that.
171

171

00:10:04.920  -->  00:10:12.300
So I can start by putting FootballPlayer
joe equals new FootballPlayer Joe.
172

172

00:10:12.300  -->  00:10:18.420
And say a baseball player Pat equals new.
173

173

00:10:18.420  -->  00:10:24.140
Baseball player Pat and soccer player
174

174

00:10:27.770  -->  00:10:31.850
Beckham equals new soccer player Beckham.
175

175

00:10:31.850  -->  00:10:33.880
Even though I think he's retired.
176

176

00:10:33.880  -->  00:10:36.810
Okay and team that's try to having a team.
177

177

00:10:36.810  -->  00:10:37.670
Adelaide Crows.
178

178

00:10:39.260  -->  00:10:40.240
The team I follow.
179

179

00:10:40.240  -->  00:10:46.890
It was new team Adelaide Crows.
180

180

00:10:46.890  -->  00:10:52.370
And we can put
Adelaide Crows.add Player Joe.
181

181

00:10:52.370  -->  00:10:56.730
Adelaide Crows.add player Pat.
182

182

00:10:56.730  -->  00:10:59.630
And Adelaide Crows.add player Beckham.
183

183

00:10:59.630  -->  00:11:02.410
Now why Beckham would be playing for
I for what I don't know.
184

184

00:11:02.410  -->  00:11:04.160
But anyway that's an aside.
185

185

00:11:04.160  -->  00:11:08.670
And if you put that out now just to
make sure that the basic thing's working
186

186

00:11:08.670  -->  00:11:10.710
Adelaide Crows dot numPlayers.
187

187

00:11:10.710  -->  00:11:12.380
We should get the right
result if we do that.
188

188

00:11:12.380  -->  00:11:14.960
So I'm actually gonna do is
I'm gonna stop the video here.
189

189

00:11:14.960  -->  00:11:16.780
In the next video,
we'll actually tackle this problem.
190

190

00:11:16.780  -->  00:11:20.870
And this is the problem of actually
making sure that a particular team will
191

191

00:11:20.870  -->  00:11:22.910
only accept a player of the right type.
192

192

00:11:22.910  -->  00:11:26.700
So in this case, if we actually specified
team, then we only allow the correct
193

193

00:11:26.700  -->  00:11:29.980
people who are part of that team,
in other words a football player in
194

194

00:11:29.980  -->  00:11:33.500
this scenario for the antelope grows
to be accepted as part of that team.
195

195

00:11:33.500  -->  00:11:35.100
So we'll do that in the next video.
