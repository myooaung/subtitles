WEBVTT
1
00:00:04.930 --> 00:00:09.790
Hello again, you superb got to people in this video, we're getting it moving with Mouse look, working

2
00:00:10.000 --> 00:00:12.220
right now we have mouse look and we have a moving.

3
00:00:12.430 --> 00:00:13.720
But you remember we have that problem.

4
00:00:13.720 --> 00:00:20.680
And I'll just show you right now, if I press play, if I'm facing the global forward move, it works

5
00:00:20.680 --> 00:00:21.670
fine at the moment.

6
00:00:21.700 --> 00:00:22.930
I look in another direction.

7
00:00:24.140 --> 00:00:25.580
I'm pressing forward right now.

8
00:00:27.120 --> 00:00:28.920
And that isn't what this is, me pressing backwards.

9
00:00:28.950 --> 00:00:29.220
Right.

10
00:00:29.460 --> 00:00:32.520
We can't have the game behave like this as you see it too confusing.

11
00:00:32.940 --> 00:00:38.490
So what I need to do is to get that where the camera is in relation to the player and make that work.

12
00:00:38.850 --> 00:00:39.530
So here's what we're doing.

13
00:00:39.860 --> 00:00:42.510
We are going to separate 2D and 3D movement.

14
00:00:42.880 --> 00:00:43.380
Why?

15
00:00:43.800 --> 00:00:48.360
Because I only want the controls to affect the character in two dimensions.

16
00:00:48.660 --> 00:00:50.100
So I need to separate those out.

17
00:00:50.340 --> 00:00:52.710
Calculate them and then bring them back in.

18
00:00:53.070 --> 00:00:58.050
And I also need to apply that 2D movement based on where the camera is.

19
00:00:58.440 --> 00:01:00.150
So let's get back into the game.

20
00:01:00.870 --> 00:01:08.520
Well, the engine and I want to play a script and give us a platform to work for somebody to move right

21
00:01:08.520 --> 00:01:10.380
here is gonna be separate.

22
00:01:10.410 --> 00:01:13.440
Now I'm going to get the 2D movement direction.

23
00:01:13.470 --> 00:01:18.300
So what we do is make a new variable called movement direction.

24
00:01:18.990 --> 00:01:21.690
Now, I can call this movement direction.

25
00:01:22.110 --> 00:01:27.330
I can call this a two D movement direction.

26
00:01:27.540 --> 00:01:28.200
Terrible name.

27
00:01:28.380 --> 00:01:29.160
Don't call it that.

28
00:01:29.620 --> 00:01:31.900
What I can't do is call it 2D.

29
00:01:32.250 --> 00:01:33.120
Movement direction.

30
00:01:34.190 --> 00:01:34.600
Y.

31
00:01:35.370 --> 00:01:38.370
There's this old piece of computer science, a bit of coding history.

32
00:01:39.150 --> 00:01:43.170
When they were putting together the first engines, the first compilers that were, you know, what

33
00:01:43.170 --> 00:01:45.900
they call not at the metal, not talking machine code.

34
00:01:46.170 --> 00:01:48.490
When we start telling the computer, here's what I want you to do.

35
00:01:48.510 --> 00:01:49.410
Please figure it out.

36
00:01:49.740 --> 00:01:56.400
One of the problems we've got is how does the compiler know the difference between a variable or a function

37
00:01:57.240 --> 00:01:58.110
or a value?

38
00:01:58.470 --> 00:02:02.520
And one of the rules that came up with is that variables of functions cannot start with a number.

39
00:02:03.420 --> 00:02:04.320
So this is fine.

40
00:02:05.370 --> 00:02:11.590
Get movement, direction, movement direction is going to be equal to a new functional called get to

41
00:02:11.610 --> 00:02:15.300
the movement direction.

42
00:02:19.030 --> 00:02:19.920
I'm sure they copy that.

43
00:02:20.010 --> 00:02:25.980
Making brand new function, which, in fact, you know what can probably live right here and take all

44
00:02:25.980 --> 00:02:26.520
of this with it?

45
00:02:26.850 --> 00:02:30.240
I'm going to move some of the stuff around, let's call it function.

46
00:02:32.190 --> 00:02:38.340
And again, it has to be called get tuti movement direction, because this is not a valid function name.

47
00:02:39.830 --> 00:02:42.500
And if he'd try it down here, you'll get the same problem.

48
00:02:44.690 --> 00:02:47.410
I expect that I did fly out of function, et cetera, et cetera.

49
00:02:48.190 --> 00:02:52.330
So if we're getting this cheating movement direction, we got to start by getting the X and the Z.

50
00:02:52.630 --> 00:02:55.600
It is X and Z because we are using vector three here.

51
00:02:55.870 --> 00:02:57.240
So I'm gonna get the forward back.

52
00:02:57.240 --> 00:02:57.490
Left.

53
00:02:57.600 --> 00:02:57.820
Right.

54
00:02:57.850 --> 00:02:58.640
We've calculated that.

55
00:02:58.660 --> 00:02:59.650
I'm very happy with that.

56
00:03:00.370 --> 00:03:03.240
That won't do is not affect the motion directly.

57
00:03:03.340 --> 00:03:04.870
I'll make a brand new motion.

58
00:03:05.490 --> 00:03:10.080
Any variable, rather called movement direction.

59
00:03:13.120 --> 00:03:15.200
And this doesn't need to be effective three.

60
00:03:15.340 --> 00:03:16.330
Can be effective, too.

61
00:03:17.150 --> 00:03:19.030
And I can get rid of that access entirely.

62
00:03:19.660 --> 00:03:22.360
Now, I probably want to call this X and Z because doesn't make much difference.

63
00:03:22.490 --> 00:03:23.500
We're dealing two dimensions.

64
00:03:23.530 --> 00:03:24.880
Let's call them X and Y.

65
00:03:27.260 --> 00:03:31.610
And that means face forward is going to need the same effect right there.

66
00:03:32.090 --> 00:03:38.330
And I should probably change the face forward right here to X Y A, 10 to X Y.

67
00:03:39.380 --> 00:03:39.580
All right.

68
00:03:39.580 --> 00:03:41.630
Now, just before this move and slide.

69
00:03:41.810 --> 00:03:48.830
I'm going to return the movement direction and I'm going to normalize it.

70
00:03:48.930 --> 00:03:50.840
I don't be moving faster on the diagonal.

71
00:03:51.320 --> 00:03:53.220
That means this moving slide no longer works.

72
00:03:53.240 --> 00:03:55.040
Let's move that back up here.

73
00:03:55.160 --> 00:03:58.070
Using altered up arrow into this function.

74
00:03:58.640 --> 00:04:01.910
So now we're going to get the 2D movement direction.

75
00:04:02.410 --> 00:04:08.270
Has set this as a vector to calculate what it is based on our inputs and bring it back.

76
00:04:08.510 --> 00:04:10.730
Please note, I'm not putting a jump in.

77
00:04:10.790 --> 00:04:12.080
We have no vertical movement.

78
00:04:12.380 --> 00:04:16.340
If you wanted to, you'd also have to bring in your horizontal movement.

79
00:04:17.480 --> 00:04:19.170
OK, let's make move work.

80
00:04:19.280 --> 00:04:20.240
I need a couple more things.

81
00:04:20.330 --> 00:04:23.270
I need to know the direction to the camera.

82
00:04:23.850 --> 00:04:29.000
I'm going to call this direction to camp.

83
00:04:30.320 --> 00:04:31.940
And that is effects of three.

84
00:04:34.180 --> 00:04:37.250
Now, I want to make sure every frame that we've recalculated from scratch.

85
00:04:37.300 --> 00:04:40.040
So I'm going to do effective three zero zero zero.

86
00:04:40.400 --> 00:04:44.760
I've also discovered a really neat thing that I should have known about a year ago.

87
00:04:44.870 --> 00:04:46.250
I only found this out recently.

88
00:04:46.400 --> 00:04:47.690
Thank you, Bastion, for teach it to me.

89
00:04:48.000 --> 00:04:50.710
If I look at vector three, we have constants.

90
00:04:51.050 --> 00:04:52.040
I could have just done those.

91
00:04:52.100 --> 00:04:55.610
So instead I'm doing vector three dot zero.

92
00:04:56.650 --> 00:05:00.140
Are I to do the same thing down here on the motion vector three.

93
00:05:00.200 --> 00:05:01.190
Dot zero.

94
00:05:03.040 --> 00:05:03.250
OK.

95
00:05:03.350 --> 00:05:05.350
Now let's get where the camera is.

96
00:05:05.540 --> 00:05:06.440
Can you variable.

97
00:05:06.590 --> 00:05:08.360
And I need the cameras transform.

98
00:05:08.390 --> 00:05:14.230
It's positional information that's going to be called camera X form because it's slightly fossil's right

99
00:05:14.240 --> 00:05:14.990
to transform.

100
00:05:16.130 --> 00:05:23.150
And all we do is only get the camera dot global transform.

101
00:05:23.770 --> 00:05:24.030
All right.

102
00:05:24.260 --> 00:05:30.410
Once I have that, I need to start affecting the X and Y axis of my direction to camera.

103
00:05:30.920 --> 00:05:32.210
So direction to camera.

104
00:05:33.560 --> 00:05:35.660
And now I need to practice.

105
00:05:36.590 --> 00:05:44.140
The camera X form and I need its basis ascui basis, dot, z, dot, normalize.

106
00:05:44.190 --> 00:05:49.350
I only won't be dealing with normalized values here and I going to multiply it by the movement.

107
00:05:52.100 --> 00:05:53.410
Dot x.

108
00:05:54.160 --> 00:05:54.500
OK.

109
00:05:54.800 --> 00:05:55.700
Now the same thing.

110
00:05:55.730 --> 00:05:56.690
Direction to camera.

111
00:05:59.270 --> 00:06:04.640
Minus equals camera X form dot basis.

112
00:06:05.000 --> 00:06:06.110
And this is going to be X.

113
00:06:06.200 --> 00:06:09.590
Please note we're dealing with X and Z here because this is three dimensional.

114
00:06:10.040 --> 00:06:13.650
When we're dealing with two dimensional to three dimensional back, we have to keep an eye on this stuff.

115
00:06:14.230 --> 00:06:21.860
That's can be normalized, normalized, multiplied by movement direction.

116
00:06:24.650 --> 00:06:25.130
Dot.

117
00:06:25.460 --> 00:06:27.830
And this is the why in this vector to.

118
00:06:29.960 --> 00:06:34.660
I'm looking at this let's rename direction to Camp to Direction, because this is gonna be a little

119
00:06:34.660 --> 00:06:41.380
bit easier to work with because now I'm going to take motion is equal to direction.

120
00:06:42.250 --> 00:06:46.390
One more thing will do is change this line here on fifty instead of motion.

121
00:06:46.510 --> 00:06:47.830
There's gonna be movement direction.

122
00:06:49.140 --> 00:06:50.050
Will they need to change?

123
00:06:50.710 --> 00:06:51.870
Movement is a vector too.

124
00:06:52.030 --> 00:06:53.380
It can never be a vector three.

125
00:06:53.410 --> 00:06:56.710
So let's just change that to vector 2.0.

126
00:06:57.190 --> 00:06:57.520
All right.

127
00:06:57.610 --> 00:06:59.800
As Pressplay pressing forward.

128
00:06:59.830 --> 00:07:00.670
Pressing back.

129
00:07:00.730 --> 00:07:01.630
Pressing left.

130
00:07:01.690 --> 00:07:02.290
Pressing right.

131
00:07:02.350 --> 00:07:04.540
OK, so left and right has to be reversed.

132
00:07:05.290 --> 00:07:07.330
And that's going to be this one here.

133
00:07:08.590 --> 00:07:09.370
One more time.

134
00:07:11.790 --> 00:07:12.630
Forward, back.

135
00:07:12.670 --> 00:07:13.350
Left, right.

136
00:07:13.390 --> 00:07:18.930
Go turn the camera and the press forward, just using the mouse to steer the camera holding forward.

137
00:07:19.050 --> 00:07:19.540
Look at that.

138
00:07:19.560 --> 00:07:23.010
We now have two dimensional movement based on the cameras.

139
00:07:23.040 --> 00:07:24.570
But you see this.

140
00:07:25.140 --> 00:07:26.530
I can now fly.

141
00:07:27.460 --> 00:07:28.200
I don't want to fly.

142
00:07:28.710 --> 00:07:34.310
One more thing I need to do so well, I need to do is take this direction and change the why.

143
00:07:34.980 --> 00:07:35.970
This is a vector three.

144
00:07:36.000 --> 00:07:38.820
So why is up and set that to zero.

145
00:07:39.210 --> 00:07:40.440
So one more time with feeling.

146
00:07:41.430 --> 00:07:41.910
Forward.

147
00:07:41.910 --> 00:07:42.250
Back.

148
00:07:42.300 --> 00:07:42.810
Left.

149
00:07:42.810 --> 00:07:43.260
Right.

150
00:07:44.160 --> 00:07:44.550
Circle.

151
00:07:44.550 --> 00:07:45.100
Strafe.

152
00:07:45.950 --> 00:07:46.540
Look up.

153
00:07:46.620 --> 00:07:47.430
Not flying.

154
00:07:47.490 --> 00:07:47.930
Look down.

155
00:07:47.940 --> 00:07:48.540
Go backwards.

156
00:07:48.600 --> 00:07:49.290
Not flying.

157
00:07:50.670 --> 00:07:58.560
Giant desk swirling around my head, and that is how we're going to make a very simple 3D movement based

158
00:07:58.560 --> 00:08:00.120
on where the camera is looking, so.

159
00:08:00.480 --> 00:08:01.110
Excellent work.

160
00:08:01.300 --> 00:08:02.430
And I'll see you in the next video.
