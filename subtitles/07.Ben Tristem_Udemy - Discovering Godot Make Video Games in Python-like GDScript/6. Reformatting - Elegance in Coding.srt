1
00:00:04,870 --> 00:00:07,260
Hello you glorious go to people.

2
00:00:07,390 --> 00:00:11,860
I think this is a really good time to start learning some really good practices.

3
00:00:11,860 --> 00:00:16,450
So in this video we look at reformatting an elegance in coding before we go any further.

4
00:00:16,960 --> 00:00:19,990
Elegance can sound like quite a nebulous concept right.

5
00:00:20,140 --> 00:00:23,860
How could you possibly quantify that coding surely is about logic.

6
00:00:23,890 --> 00:00:26,500
It's not an artistic form to which I would answer.

7
00:00:26,500 --> 00:00:30,760
Actually coding is both just like many artistic forms are also quite logical.

8
00:00:30,790 --> 00:00:33,600
Coding has a lot of room for creativity.

9
00:00:33,640 --> 00:00:36,710
You've already seen that there's multiple ways of doing the same thing.

10
00:00:36,730 --> 00:00:40,720
What we want is what is the cleanest possible way to write our code.

11
00:00:40,720 --> 00:00:46,090
What is the simplest way to get something done in a way that can be understood by the machine doesn't

12
00:00:46,090 --> 00:00:50,290
go through a whole bunch of unnecessary steps and it's easy to read by humans.

13
00:00:50,290 --> 00:00:52,320
So here are some solid tips that we can do.

14
00:00:52,320 --> 00:00:56,890
And I'm gonna look at how to apply them some tips for elegant code.

15
00:00:56,890 --> 00:00:59,250
First the code should be easy to read by human.

16
00:00:59,250 --> 00:01:04,570
Now I've brought this up several times but essentially I should also look at this in six months six

17
00:01:04,570 --> 00:01:04,970
years.

18
00:01:04,980 --> 00:01:12,250
60 is assuming I'm still around when I'm 102 and read it out right I should understand what it does.

19
00:01:12,310 --> 00:01:17,860
This is important because actually Gordo doesn't care if this is easily by human I could give all of

20
00:01:17,860 --> 00:01:20,100
my variables really bad names right.

21
00:01:20,110 --> 00:01:26,900
Instead of calling things like jump speed gravity I could do variable a variable a one variable A1 one

22
00:01:27,070 --> 00:01:30,340
variable a one one one go to is fine with that.

23
00:01:30,340 --> 00:01:35,530
Got it doesn't care if we do spaghetti code spaghetti code is where all the functions and variables

24
00:01:35,530 --> 00:01:38,980
intermingle and everything goes around the place it's really hard to keep track of what's going on it's

25
00:01:38,980 --> 00:01:46,360
like untangling spaghetti but Gordo isn't the only thing that has to work with the code we have to work

26
00:01:46,360 --> 00:01:51,040
with the code and if you start working with a team this is really important.

27
00:01:51,310 --> 00:01:56,140
One script should be in charge of one thing here I'm talking about something called the Single Responsibility

28
00:01:56,140 --> 00:02:00,840
Principle which is a key concept in object oriented programming which is what God does.

29
00:02:01,450 --> 00:02:04,510
A script should be in charge of one thing this has two sides right.

30
00:02:04,600 --> 00:02:10,180
Don't have multiple scripts working on the same thing one thing one script the other side do not have

31
00:02:10,180 --> 00:02:12,610
one script doing multiple things.

32
00:02:12,790 --> 00:02:16,540
As an example we could easily put our entire game into one script.

33
00:02:17,320 --> 00:02:24,610
However the NPC movements the way the music is played the way the sound effects are handled have no

34
00:02:24,610 --> 00:02:29,490
business in the play script because when I'm looking at this I should know this is the play a note.

35
00:02:29,500 --> 00:02:38,200
It has a play a script it handles player things I should not expect to find the NPR season that encapsulate

36
00:02:38,590 --> 00:02:42,460
now this is a core concept in or object oriented programming and I'm not go into a lot of depth with

37
00:02:42,460 --> 00:02:48,580
that but what I'm looking for here is if a nodal function is missing the game should run fine in other

38
00:02:48,580 --> 00:02:55,390
words we need to write this in such a way that we could remove an entire section of code and it won't

39
00:02:55,540 --> 00:02:58,900
cripple the game it won't crash and that's what we're going to be doing here.

40
00:02:58,900 --> 00:03:02,080
So let's give it a go and I'm going to open the play a scene.

41
00:03:02,080 --> 00:03:06,250
The easiest way to do that is just to get to my plan ode and touch a little film icon.

42
00:03:06,280 --> 00:03:11,410
So here I am in the placing we've got this animated Sprite and I think animated sprite should be handling

43
00:03:11,410 --> 00:03:12,030
the animation.

44
00:03:12,040 --> 00:03:14,550
That's what an animated sprite does right.

45
00:03:14,590 --> 00:03:21,430
So I'm going to rename this player animation which is going to break the script right because right

46
00:03:21,430 --> 00:03:28,510
now the script is calling down here a node called animated sprite no longer exists.

47
00:03:28,510 --> 00:03:33,060
Important point but that's going to be okay because I'm gonna change this.

48
00:03:33,340 --> 00:03:39,410
Now a really good way of doing this already good practice to get into is if you're encapsulating your

49
00:03:39,410 --> 00:03:42,800
code encapsulate your scenery yarn What do you mean by that.

50
00:03:42,800 --> 00:03:44,270
You said encapsulate too many times.

51
00:03:44,270 --> 00:03:44,990
Here's what I mean.

52
00:03:45,170 --> 00:03:47,230
Every scene should have its own script.

53
00:03:49,000 --> 00:03:54,550
If a node within that scene has its own script it's actually an inherited scene so player.

54
00:03:54,550 --> 00:03:56,980
Animation should be a new scene.

55
00:03:56,980 --> 00:03:59,360
So let's save player animation as a new scene.

56
00:03:59,370 --> 00:04:04,720
So I'm going to right click on it and to save branch a scene and save it in player because it's part

57
00:04:04,720 --> 00:04:10,000
of the placing player animation that's ESPN and look it's a brand new scene that I can open and all

58
00:04:10,000 --> 00:04:12,980
it is is the animation player.

59
00:04:13,480 --> 00:04:16,470
Great so now I've got this animation player.

60
00:04:16,660 --> 00:04:18,150
How do I get it working.

61
00:04:18,160 --> 00:04:20,050
Well there's a few ways.

62
00:04:20,050 --> 00:04:27,550
If I open the script one thing we could do is just change animated sprite to player animation and this

63
00:04:27,550 --> 00:04:28,600
will work right.

64
00:04:28,600 --> 00:04:33,940
So if I just replace all of these with a copy and go paste paste

65
00:04:37,890 --> 00:04:43,490
and paste when I press play now the game should work exactly the same way and it does.

66
00:04:44,220 --> 00:04:51,390
But what happens if I remove this note if I remove this node I am now calling a function that is looking

67
00:04:51,390 --> 00:04:53,720
for a node that will no longer be in the tree.

68
00:04:53,760 --> 00:05:00,410
So what can we do to make sure that the player is just transmitting information and doesn't care if

69
00:05:00,410 --> 00:05:02,160
it's something they want to hear it.

70
00:05:02,160 --> 00:05:06,300
In other words if for some reason this node gets removed if I delete it from the scene tree for whatever

71
00:05:06,300 --> 00:05:08,670
reason it should still work.

72
00:05:09,150 --> 00:05:16,110
I'm going to use a signal now I a player and I go to node you know just there is no transmit my movement

73
00:05:16,260 --> 00:05:16,960
right.

74
00:05:17,190 --> 00:05:19,240
So I'm going to have to make a new signal.

75
00:05:19,260 --> 00:05:20,450
So how do I do that.

76
00:05:20,580 --> 00:05:26,040
Well up here I'm declaring my instance variables that is the variable that's available throughout this

77
00:05:26,130 --> 00:05:28,350
instance throughout this entire script.

78
00:05:28,680 --> 00:05:32,030
Underneath them I mean right signal new keyword.

79
00:05:32,070 --> 00:05:32,990
And what's the signal called.

80
00:05:33,060 --> 00:05:36,690
It's gonna be called animates okay.

81
00:05:37,030 --> 00:05:41,800
So I now have a signal called animate and what I'm going to do is under animate.

82
00:05:41,830 --> 00:05:47,430
I'm going to comment out all of this code for now and instead let's put it up top here.

83
00:05:47,620 --> 00:05:55,870
I'm going to emit signal animates and the tip is telling me you can put more stuff if you want what

84
00:05:55,870 --> 00:05:56,430
I want to put in.

85
00:05:56,440 --> 00:05:57,270
I would put in motion

86
00:06:00,690 --> 00:06:05,940
let's take a look at emit signal summoner just like a real time press controller click on it emits the

87
00:06:05,940 --> 00:06:09,460
given signal signal Varg and Varadero.

88
00:06:09,480 --> 00:06:13,800
Remember it's not all cash variable arguments how many arguments we like to put in.

89
00:06:13,980 --> 00:06:15,840
I just want one.

90
00:06:15,840 --> 00:06:17,880
OK so now I have a signal.

91
00:06:18,240 --> 00:06:19,290
Let's save the script.

92
00:06:19,290 --> 00:06:20,180
How can I use it.

93
00:06:20,190 --> 00:06:26,790
Well get out of distraction free mode gets my notes and click on player and look there's a brand new

94
00:06:26,790 --> 00:06:30,010
one could animate now I can now connect it.

95
00:06:30,100 --> 00:06:33,250
But in order for it to be connected to player animation has to have a script.

96
00:06:33,250 --> 00:06:34,450
Look what happens if I try and connect it.

97
00:06:34,450 --> 00:06:39,600
There's no script connect target method not found.

98
00:06:39,610 --> 00:06:40,300
Okay great.

99
00:06:40,300 --> 00:06:41,640
I just need put a script on that.

100
00:06:41,710 --> 00:06:46,960
Let's go to play our animation as a scene and give it a new script called animated called Play animation

101
00:06:47,050 --> 00:06:50,250
G.D. and it's living in the play a thing is just fine.

102
00:06:50,320 --> 00:06:51,040
Great.

103
00:06:51,070 --> 00:06:51,730
I don't want to read.

104
00:06:51,730 --> 00:06:54,740
Function to save that.

105
00:06:54,790 --> 00:06:59,800
Get back into my play a scene and not only connect the signal so with the no tab on the on the right

106
00:06:59,800 --> 00:07:06,010
here assuming you got the default view click on animate player animation is going to create a brand

107
00:07:06,010 --> 00:07:09,280
new method could on player animate.

108
00:07:09,280 --> 00:07:09,970
Boom.

109
00:07:10,030 --> 00:07:15,910
Now when I'm passing this information through I'm in a pass in an argument which we're calling motion

110
00:07:16,270 --> 00:07:18,900
I'm sure I'll put motion in here.

111
00:07:19,030 --> 00:07:27,130
So now what's going to happen is every frame it's going to emit a signal called animate with the argument

112
00:07:27,130 --> 00:07:27,970
motion.

113
00:07:28,110 --> 00:07:35,320
We've now connected it in the inspector to this animated place that this animated sprites note at which

114
00:07:35,320 --> 00:07:37,040
point it's going to trigger here.

115
00:07:37,090 --> 00:07:38,770
So let's get rid of these little gaps.

116
00:07:38,770 --> 00:07:38,890
Yeah.

117
00:07:38,960 --> 00:07:39,570
Okay.

118
00:07:39,700 --> 00:07:45,220
So when I miss a signal which can trigger this function on player the plan node animate with the argument

119
00:07:45,220 --> 00:07:46,020
motion.

120
00:07:46,090 --> 00:07:47,890
So that's going to come through it's all nicely connected.

121
00:07:47,890 --> 00:07:48,660
Great.

122
00:07:48,730 --> 00:07:53,110
So this is going to happen every frame and it's going to pass through a value called motion.

123
00:07:53,110 --> 00:07:55,360
Let's take a look what motion is.

124
00:07:55,360 --> 00:07:58,700
Motion is a vector to right which is right here.

125
00:07:58,870 --> 00:08:00,230
Vector two.

126
00:08:00,420 --> 00:08:01,220
Okay.

127
00:08:01,450 --> 00:08:03,330
So now I've got a challenge for you.

128
00:08:03,730 --> 00:08:08,060
I'd like you to complete player animation all cheat.

129
00:08:08,740 --> 00:08:11,490
Complete the function on player animate.

130
00:08:11,770 --> 00:08:14,350
It should have jump walk left walk right.

131
00:08:14,350 --> 00:08:16,610
An idle quick tip.

132
00:08:16,660 --> 00:08:18,640
We've actually done most of this.

133
00:08:18,640 --> 00:08:23,020
So pause the video give that a shot and when you're ready come back and I'll show you how I do it.

134
00:08:28,690 --> 00:08:29,250
Welcome back.

135
00:08:29,910 --> 00:08:30,390
OK.

136
00:08:30,460 --> 00:08:34,170
How would I do it well if I said we've already kind of done this.

137
00:08:34,180 --> 00:08:39,270
And if I scroll down the player all this information is almost right.

138
00:08:39,640 --> 00:08:47,440
So if I cut this using control X on windows and I go to player animation at G.D. and I paste it here

139
00:08:48,420 --> 00:08:56,350
and I uncommon it almost right but now it's trying to call a child node called player animation.

140
00:08:56,500 --> 00:08:58,360
It doesn't need to do that it just has to do its self.

141
00:08:58,360 --> 00:09:04,420
Now admittedly I could do self docs play don't do that right self-taught play is exactly the same as

142
00:09:04,420 --> 00:09:06,460
play don't put redoubling code in.

143
00:09:06,520 --> 00:09:07,390
Not elegant.

144
00:09:07,390 --> 00:09:17,350
So what you do is remove all of these get nodes get no gun get gun No no no more your gun does good

145
00:09:17,350 --> 00:09:24,610
song you can use I feel like okay so now I play this it should behave exactly the same way.

146
00:09:24,730 --> 00:09:30,970
Right so it looks identical from a player point of view but look what happens if I'm in the player scene

147
00:09:31,720 --> 00:09:32,920
and I delete this

148
00:09:35,990 --> 00:09:37,150
press play now admittedly I'm not.

149
00:09:37,150 --> 00:09:39,440
See the bunny but the game doesn't crash.

150
00:09:39,440 --> 00:09:43,360
Now as far as the game since and the bunny still here we just can't see it so I could put a new Sprite

151
00:09:43,360 --> 00:09:53,270
in let's put a sprite for the moment just to test this out and give its your graphics on G graphics

152
00:09:53,270 --> 00:09:54,110
players.

153
00:09:54,290 --> 00:09:54,680
This one

154
00:09:58,970 --> 00:10:00,430
it works just fine.

155
00:10:00,440 --> 00:10:05,450
So now we've built in some redundancy if for some reason something is wrong our code only got back into

156
00:10:05,450 --> 00:10:08,150
this tree and undo those changes that we got.

157
00:10:08,310 --> 00:10:10,560
If for some reason the node is missing it's still going to work.

158
00:10:10,570 --> 00:10:15,260
You're going gonna check my signal so connected and there it is.

159
00:10:15,310 --> 00:10:20,980
So what we're really doing here is just making sure we have some basic good practices right best practices.

160
00:10:21,130 --> 00:10:27,490
And if we just look over our script more time I've removed all of the functionality for animation for

161
00:10:27,490 --> 00:10:29,620
control and animated sprite from the player.

162
00:10:29,950 --> 00:10:34,410
It's just now transmitting the signal and not caring who who hears about it.

163
00:10:34,420 --> 00:10:36,970
If we wanted to we'd have multiple things deal with the motion.

164
00:10:36,970 --> 00:10:41,140
If I don't know you have an onscreen display that shows you which way you're moving for some reason

165
00:10:41,440 --> 00:10:48,130
or you're using a mobile game or whatever it is we can now use that signal and the player script doesn't

166
00:10:48,130 --> 00:10:50,890
care who's dealing with that signal.

167
00:10:50,890 --> 00:10:57,040
We've connected it here in the inspector the only player animation ever hears it because the player

168
00:10:57,220 --> 00:11:01,060
as a kinetic body doesn't care about the animated sprite.

169
00:11:01,060 --> 00:11:07,750
Anything within the same scene trees the player if it can hear the signal will work and the only thing

170
00:11:07,750 --> 00:11:13,180
that can hit the signal is the player animation mode which is this animated Sprite and it only hears

171
00:11:13,180 --> 00:11:15,020
that because we have connected the signal.

172
00:11:15,040 --> 00:11:19,810
Now we could also connect the signal and script but there's no real reason to do that.

173
00:11:19,840 --> 00:11:23,740
So what we've done here is we've made our code a lot more robust and at the same time more elegant it's

174
00:11:23,800 --> 00:11:24,660
easier to read.

175
00:11:25,330 --> 00:11:30,970
And that brings us to the end of the video in this video we've had a quick introduction to elegant coding.

176
00:11:30,970 --> 00:11:33,430
We've looked at the single responsibility principle.

177
00:11:33,580 --> 00:11:38,560
We've learned how to save a branch as a scene how to take a node and making a separate scene and creating

178
00:11:38,620 --> 00:11:40,310
an emitting a custom signal.

179
00:11:40,450 --> 00:11:42,820
And our game is looking a little bit cleaner as a result.

180
00:11:42,820 --> 00:11:45,100
So excellent work and I'll see you in the next video.
