1
1

00:00:00,930  -->  00:00:03,300
Hey guys, welcome to Lecture 53.
2

2

00:00:03,300  -->  00:00:06,561
This lecture is on heatmaps.
3

3

00:00:10,141  -->  00:00:11,502
And clustered matrices.
4

4

00:00:16,221  -->  00:00:19,462
All right, so this is the last lecture
in the data visualization section.
5

5

00:00:19,462  -->  00:00:22,795
So, let's go ahead, as I mentioned before,
6

6

00:00:22,795  -->  00:00:28,730
C-Born comes with some great data
sets that we can play and learn with.
7

7

00:00:28,730  -->  00:00:34,277
So in this case, we're gonna grab
a data set called flights_dframe.
8

8

00:00:34,277  -->  00:00:39,540
Remember to input all
your imports into a cell.
9

9

00:00:39,540  -->  00:00:41,560
The usual ones for
the data visualization section.
10

10

00:00:42,990  -->  00:00:50,460
And then we'll set flight_dframe
equal to sns.load_dataset.
11

11

00:00:52,370  -->  00:00:55,590
And the data set string name is flights.
12

12

00:00:57,290  -->  00:01:00,080
Okay, so let that load.
13

13

00:01:00,080  -->  00:01:00,660
Great!
14

14

00:01:00,660  -->  00:01:03,070
Once it's done loading let's go ahead and
preview it.
15

15

00:01:03,070  -->  00:01:05,412
So we can say flight_dframe.
16

16

00:01:08,194  -->  00:01:11,520
And we can check out the first five rows.
17

17

00:01:11,520  -->  00:01:12,910
All right.
18

18

00:01:12,910  -->  00:01:13,880
So what do we have here?
19

19

00:01:15,250  -->  00:01:21,500
We have the year, the month, and the
number of passengers that took a flight.
20

20

00:01:21,500  -->  00:01:25,100
Either on this airline or on a specific
plane, doesn't really matter for our case.
21

21

00:01:26,340  -->  00:01:29,740
Let's go ahead and pivot this dataframe so
it's easier to manage.
22

22

00:01:30,930  -->  00:01:37,008
So, as we've learned some
couple lectures ago on pivots,
23

23

00:01:37,008  -->  00:01:41,100
we have flight_dframe and
24

24

00:01:41,100  -->  00:01:45,640
we're gonna set this equal to the pivot.
25

25

00:01:47,850  -->  00:01:52,946
And we're gonna pivot it by month,
year and
26

26

00:01:52,946  -->  00:01:57,640
then the values we want are passengers.
27

27

00:02:02,961  -->  00:02:08,070
So, just a reminder about pivot and
pivot tables.
28

28

00:02:08,070  -->  00:02:10,330
We set the rows we want.
29

29

00:02:10,330  -->  00:02:12,260
So we set the rows to be months.
30

30

00:02:12,260  -->  00:02:16,073
We want the columns to be years, and
we want those values to be filled out with
31

31

00:02:16,073  -->  00:02:18,350
the number of passengers
that took a flight.
32

32

00:02:18,350  -->  00:02:21,811
Let's go ahead and
show this data frame now, flight_dframe.
33

33

00:02:21,811  -->  00:02:27,390
There we go, so
now it's in a much better format for us.
34

34

00:02:27,390  -->  00:02:33,150
Great, and this one almost looks
basically perfect to make a heatmap,
35

35

00:02:33,150  -->  00:02:37,310
or a cluster matrix
visualization from this.
36

36

00:02:37,310  -->  00:02:40,620
So let's go ahead and
show you what we're talking about here.
37

37

00:02:40,620  -->  00:02:45,766
If we want to make a heatmap of this data,
we just call sns.heatmap,
38

38

00:02:45,766  -->  00:02:49,780
and we're gonna pass that
data frame through it now.
39

39

00:02:55,403  -->  00:02:56,450
All right.
40

40

00:02:56,450  -->  00:03:01,910
And now we have a data visualization for
a heatmap for the passengers.
41

41

00:03:01,910  -->  00:03:04,933
Now let's say you wanted to actually
know the number of passengers and
42

42

00:03:04,933  -->  00:03:06,630
annotate each cell with
the number of passengers.
43

43

00:03:09,710  -->  00:03:11,630
Not just have it be by color.
44

44

00:03:11,630  -->  00:03:13,743
You can do that.
So let's go heatmap, again,
45

45

00:03:13,743  -->  00:03:15,582
we'll pass that data frame.
46

46

00:03:21,001  -->  00:03:23,610
And then we'll say
annotation equal to true.
47

47

00:03:23,610  -->  00:03:28,460
So in this case A-N-N-O-T equal to true.
48

48

00:03:32,460  -->  00:03:37,380
And let's set fmt equal to d just for
some formatting.
49

49

00:03:40,702  -->  00:03:41,760
And there you have it.
50

50

00:03:41,760  -->  00:03:47,984
So now you have annotated each cell
with the number as well as the color.
51

51

00:03:47,984  -->  00:03:52,820
So C-Born's gonna automatically try
to pick the best color scheme for
52

52

00:03:52,820  -->  00:03:54,440
your dataset.
53

53

00:03:54,440  -->  00:03:59,220
And that basically just depends whether
it's a converging or diverging color map.
54

54

00:03:59,220  -->  00:04:04,210
So this case, it's chosen a converging
one, so it's gone from a light to a dark.
55

55

00:04:04,210  -->  00:04:08,139
But if you wanted to choose a center,
if you will, for your color map,
56

56

00:04:08,139  -->  00:04:12,310
you can do that, so you can specify if
you want a center for your color scheme.
57

57

00:04:12,310  -->  00:04:16,360
To show you what I'm talking about,
let's go ahead and
58

58

00:04:16,360  -->  00:04:22,240
do sns.heatmap,
we'll call the flight_dframe on it.
59

59

00:04:25,980  -->  00:04:31,276
We'll set center equal to flight_dframe.,
and
60

60

00:04:31,276  -->  00:04:36,460
then we'll get the location,
so we'll say loc.
61

61

00:04:38,270  -->  00:04:39,650
And we'll have it be January.
62

62

00:04:44,112  -->  00:04:50,510
1955, okay.
63

63

00:04:50,510  -->  00:04:54,090
All right, so what is this going to do?
64

64

00:04:54,090  -->  00:04:55,360
Well, let's go ahead and take a look.
65

65

00:04:55,360  -->  00:05:01,000
Alt+Enter, so
now we have a diverging color scheme.
66

66

00:05:02,530  -->  00:05:04,650
We've created our own center.
67

67

00:05:04,650  -->  00:05:08,960
So white now is going
to be at January 1955.
68

68

00:05:08,960  -->  00:05:14,720
Values above that,
are going to have a more red color scheme.
69

69

00:05:14,720  -->  00:05:18,440
Values below that are going to
have a cooler blue color to them.
70

70

00:05:18,440  -->  00:05:23,269
So instead of like the first one where
it converges all the way up from 600,
71

71

00:05:23,269  -->  00:05:26,702
now it's diverging from
the January 1955 value.
72

72

00:05:26,702  -->  00:05:30,650
So that's how you can
choose your color schemes.
73

73

00:05:32,220  -->  00:05:38,050
We can also add heatmaps on access of
subplots to make more informative figures.
74

74

00:05:39,250  -->  00:05:41,570
So just like we did with
regression plots and
75

75

00:05:41,570  -->  00:05:46,460
the violin plots in the last lecture, we
can do something similar for these plots.
76

76

00:05:46,460  -->  00:05:50,620
So let's go ahead and try making
a figure with multiple sub plots.
77

77

00:05:51,740  -->  00:05:57,580
So, I'm going to say f for the figure
name and let's make two sets of axes,
78

78

00:05:57,580  -->  00:06:02,540
so I'll say axis1, axis2, I'm
79

79

00:06:02,540  -->  00:06:06,870
going to set that equal to plt.subplots
like we did in the last lecture.
80

80

00:06:06,870  -->  00:06:11,235
So well say 2 1, so in this case,
81

81

00:06:11,235  -->  00:06:15,610
there's two rows and one column.
82

82

00:06:18,510  -->  00:06:23,510
Now, I'm going to say, gonna call my
83

83

00:06:23,510  -->  00:06:30,410
yearly_flights object
equal to flight_dframe.
84

84

00:06:30,410  -->  00:06:32,010
Take the sum.
85

85

00:06:32,010  -->  00:06:35,430
So what I'm doing is I'm taking
the sum of all those columns and
86

86

00:06:35,430  -->  00:06:36,830
the columns are the years.
87

87

00:06:36,830  -->  00:06:40,998
So you can imagine if I take
the sums all along 1949,
88

88

00:06:40,998  -->  00:06:44,860
I will have the total number
of flights for that year.
89

89

00:06:44,860  -->  00:06:46,780
So that's the yearly
flights object I'm making.
90

90

00:06:48,846  -->  00:06:51,550
Okay, so, since yearly_flights,
91

91

00:06:51,550  -->  00:06:55,160
if you were to look at it right now,
it's in a little bit of a weird format.
92

92

00:06:55,160  -->  00:06:58,247
We'll have to grab the values
we want with the series and
93

93

00:06:58,247  -->  00:07:00,030
then put them into a data frame.
94

94

00:07:00,030  -->  00:07:06,498
So I'm going to set years
equal to pd.Series and
95

95

00:07:06,498  -->  00:07:12,191
I'm gonna grab it from yearly_flights.
96

96

00:07:12,191  -->  00:07:17,572
And then I'm gonna get the index values.
97

97

00:07:21,951  -->  00:07:24,812
And then I'm gonna set years
to be equal to a dataframe.
98

98

00:07:24,812  -->  00:07:30,910
So, I'm gonna make a dataframe
out of that, Out of that series.
99

99

00:07:30,910  -->  00:07:33,780
So, I created a series, and
then ran that seriesthrough a dataframe.
100

100

00:07:33,780  -->  00:07:36,270
We're gonna do the same thing for flights.
101

101

00:07:37,315  -->  00:07:40,035
And this is just to take care of
some formatting issues in the yearly
102

102

00:07:40,035  -->  00:07:40,715
flights data.
103

103

00:07:44,035  -->  00:07:45,157
Do a similar thing here.
104

104

00:07:45,157  -->  00:07:50,414
Except in this case,
I just want the actual values,
105

105

00:07:50,414  -->  00:07:55,725
not the index values, and we'll create
a data frame using that series.
106

106

00:07:55,725  -->  00:08:03,775
Pd.DataFrame, flights.
107

107

00:08:03,775  -->  00:08:05,860
All right.
108

108

00:08:05,860  -->  00:08:10,590
And now we're gonna make the data
frame complete and name the columns.
109

109

00:08:10,590  -->  00:08:18,451
So I'm going to say year_deframe
equal to pd.concat so
110

110

00:08:18,451  -->  00:08:23,037
I'm going to use concatenate and
111

111

00:08:23,037  -->  00:08:29,440
I'm going to put together years and
flights.
112

112

00:08:29,440  -->  00:08:32,061
And I'm gonna do this
along axis equal to 1.
113

113

00:08:35,342  -->  00:08:42,103
And then I'm gonna name my columns,
so year_dframe.columns equal to,
114

114

00:08:42,103  -->  00:08:46,740
now the columns, let's give them a name.
115

115

00:08:46,740  -->  00:08:51,988
So they should be year and flights.
116

116

00:08:51,988  -->  00:08:54,050
Great.
117

117

00:08:54,050  -->  00:08:57,110
That way they go with each of the series,
or
118

118

00:08:57,110  -->  00:08:59,970
I guess they're data frames now
that were concatenated together.
119

119

00:09:01,130  -->  00:09:02,160
All right.
120

120

00:09:02,160  -->  00:09:03,840
So, let's visualize that data.
121

121

00:09:05,810  -->  00:09:06,920
I'm gonna make a bar plot.
122

122

00:09:06,920  -->  00:09:12,350
And you can make a bar plot
in C-Born by passing barplot.
123

123

00:09:12,350  -->  00:09:18,650
And I'm gonna say bar plot of the year.
124

124

00:09:18,650  -->  00:09:19,700
So let's see barplot.
125

125

00:09:19,700  -->  00:09:22,638
Whoops.
126

126

00:09:22,638  -->  00:09:24,780
Barplot Year.
127

127

00:09:24,780  -->  00:09:32,201
I'll set y equal to Flights.
128

128

00:09:32,201  -->  00:09:34,065
So the total number of flights that year.
129

129

00:09:35,565  -->  00:09:40,635
My data is gonna come
from the year_dframe,
130

130

00:09:40,635  -->  00:09:42,700
so that data frame we just made.
131

131

00:09:42,700  -->  00:09:47,250
And also ax equal to axis1,
cuz it's on a sub plot.
132

132

00:09:48,960  -->  00:09:51,070
And then I'm gonna create
a heatmap below it.
133

133

00:09:52,360  -->  00:10:00,270
So I'm gonna say
sns.heatmap flight_dframe.
134

134

00:10:00,270  -->  00:10:05,630
And then we're gonna say, let's go
ahead and get a color palette for that.
135

135

00:10:05,630  -->  00:10:11,050
The way we can do that for
a heatmap is by passing the cmap argument,
136

136

00:10:11,050  -->  00:10:13,530
and in this case, I'm gonna choose Blues.
137

137

00:10:15,270  -->  00:10:17,790
And you can look at the documentation for
other color schemes.
138

138

00:10:19,540  -->  00:10:24,190
We'll also say axis is equal to axis2 so
it goes below.
139

139

00:10:26,350  -->  00:10:28,870
And then something I wanna do is,
140

140

00:10:28,870  -->  00:10:34,290
if we scroll back up, we can see
that this color bar is set vertical.
141

141

00:10:34,290  -->  00:10:35,540
I wanna set it horizontal.
142

142

00:10:36,780  -->  00:10:41,680
So, the way I do that,
is I pass, as we've done before,
143

143

00:10:42,900  -->  00:10:46,359
I can say cbar_kws.
144

144

00:10:46,359  -->  00:10:49,610
And just pass a dictionary.
145

145

00:10:49,610  -->  00:10:51,991
So in this case,
the key is going to be orientation.
146

146

00:10:56,931  -->  00:10:59,271
And I'm gonna give its
value as horizontal.
147

147

00:11:03,151  -->  00:11:05,780
All right, so
that way the color bar is horizontal.
148

148

00:11:07,030  -->  00:11:08,040
So we've done a lot right now.
149

149

00:11:08,040  -->  00:11:10,100
Let's go ahead a see how we
were able to visualize it.
150

150

00:11:11,870  -->  00:11:13,910
Yearly value is not defined.
151

151

00:11:13,910  -->  00:11:15,430
I probably have a spelling
error somewhere,
152

152

00:11:15,430  -->  00:11:16,980
let's go back up and try to catch it.
153

153

00:11:16,980  -->  00:11:22,520
Yearly_values, this is in
line eight of flights.
154

154

00:11:22,520  -->  00:11:24,221
So yearly_values.
155

155

00:11:28,962  -->  00:11:31,480
I should have written yearly_flights.
156

156

00:11:31,480  -->  00:11:32,340
Not sure why.
157

157

00:11:32,340  -->  00:11:33,030
I see.
158

158

00:11:33,030  -->  00:11:35,620
I wrote that twice.
159

159

00:11:35,620  -->  00:11:38,000
That should have been flights.
160

160

00:11:38,000  -->  00:11:39,410
Okay, now let's try it.
161

161

00:11:40,930  -->  00:11:43,250
Okay, there we go.
162

162

00:11:43,250  -->  00:11:44,270
All right.
163

163

00:11:44,270  -->  00:11:51,960
So, now I have my bar plot on top and
I have my heatmap on the bottom and my
164

164

00:11:51,960  -->  00:11:56,430
color bar has been oriented horizontally,
so it's on the bottom as well.
165

165

00:11:56,430  -->  00:12:01,210
And you can see now that
the years match up and
166

166

00:12:01,210  -->  00:12:04,290
you can get a really nice
data visualization here.
167

167

00:12:04,290  -->  00:12:04,800
So that's great.
168

168

00:12:07,680  -->  00:12:10,370
Finally, we're gonna learn
about using a cluster map.
169

169

00:12:12,810  -->  00:12:14,661
So, let's go ahead and create one.
170

170

00:12:14,661  -->  00:12:17,859
So a cluster map's gonna
reformat the heatmap,
171

171

00:12:17,859  -->  00:12:20,441
so similar rows are next to each other.
172

172

00:12:20,441  -->  00:12:27,882
So, I'm gonna say sns.clustermap,
of that data frame, so flight_dframe.
173

173

00:12:32,321  -->  00:12:35,150
Okay.
And here we have our cluster map.
174

174

00:12:35,150  -->  00:12:38,210
So if you notice,
the months are no longer in order.
175

175

00:12:38,210  -->  00:12:41,990
January, February, November down here,
December's over here.
176

176

00:12:41,990  -->  00:12:46,860
But in this case,
similar rows are next to each other.
177

177

00:12:46,860  -->  00:12:48,850
And you can see,
they're grouping and linking.
178

178

00:12:48,850  -->  00:12:52,430
They're clustering, if you will,
on top and on the left.
179

179

00:12:54,160  -->  00:12:55,520
And here, you have your color bar scale.
180

180

00:12:56,750  -->  00:13:01,686
Okay, so let's go ahead and
just uncluster the columns,
181

181

00:13:01,686  -->  00:13:05,527
so we can do that by
saying sns.clustermap.
182

182

00:13:05,527  -->  00:13:09,009
Let's pass flight_dframe again.
183

183

00:13:12,010  -->  00:13:15,660
And in this case,
I'm only gonna cluster by the rows.
184

184

00:13:15,660  -->  00:13:19,830
So I'm gonna call
col_cluster equal to false.
185

185

00:13:23,491  -->  00:13:24,830
See what that looks like.
186

186

00:13:26,230  -->  00:13:27,030
Okay.
187

187

00:13:27,030  -->  00:13:30,230
So now I've only done it by the rows
instead of by the actual month.
188

188

00:13:30,230  -->  00:13:31,960
We don't care about the years themselves.
189

189

00:13:31,960  -->  00:13:34,840
We'll keep those
independent of each other.
190

190

00:13:34,840  -->  00:13:36,430
So it's only being clustered by the month.
191

191

00:13:37,670  -->  00:13:38,440
All right.
192

192

00:13:38,440  -->  00:13:42,300
So since the number of
flights increase every year.
193

193

00:13:42,300  -->  00:13:44,630
As we saw above if we scroll up a bit,
194

194

00:13:44,630  -->  00:13:47,540
you can see the number of flights
is increasing every year.
195

195

00:13:47,540  -->  00:13:49,110
So we should set a standard scale.
196

196

00:13:50,550  -->  00:13:52,510
So let's go ahead and standardize.
197

197

00:13:52,510  -->  00:13:55,651
So, I can do that by
saying sns.clustermap.
198

198

00:13:58,833  -->  00:14:03,100
Say flight_dframe and
199

199

00:14:03,100  -->  00:14:09,710
I'm gonna set a standard_scale.
200

200

00:14:09,710  -->  00:14:11,940
And set that equal to one.
201

201

00:14:11,940  -->  00:14:15,090
So now, what that means is I'm gonna
standardize by the columns, or
202

202

00:14:15,090  -->  00:14:15,650
by the year.
203

203

00:14:17,160  -->  00:14:17,820
So let's go ahead and do that.
204

204

00:14:21,522  -->  00:14:24,010
All right.
205

205

00:14:24,010  -->  00:14:25,050
So now what do we see here?
206

206

00:14:25,050  -->  00:14:29,450
You can really tell now that the summer
months are the heavier usage months.
207

207

00:14:29,450  -->  00:14:32,440
Just everything's been
standardized by the year.
208

208

00:14:32,440  -->  00:14:35,160
Now, if you look at your scale,
it goes from 0 to 1.
209

209

00:14:36,580  -->  00:14:40,980
So here, we've eliminated the problem of
flights increasing every single year.
210

210

00:14:42,480  -->  00:14:44,389
We could also scale it by rows.
211

211

00:14:45,650  -->  00:14:50,018
So we could say sns.clustermap
212

212

00:14:50,018  -->  00:14:55,679
flight_dframe, so pass the data set and
213

213

00:14:55,679  -->  00:15:01,664
then set the standard_scale equal to 0 and
214

214

00:15:01,664  -->  00:15:06,048
this would then scale the rows.
215

215

00:15:06,048  -->  00:15:07,269
All right.
216

216

00:15:07,269  -->  00:15:09,560
Great.
217

217

00:15:09,560  -->  00:15:13,600
And then finally, we can also
normalize the rows by their Z score.
218

218

00:15:13,600  -->  00:15:19,450
This is gonna get a bit into some heavier
statistics, so what a Z score does is
219

219

00:15:19,450  -->  00:15:24,680
just subtracts the mean and then divides
by the standard deviation of each column.
220

220

00:15:24,680  -->  00:15:27,535
So then the rows have a mean of 0,
and a variance of 1.
221

221

00:15:30,060  -->  00:15:34,030
So, this is going to be the very last
thing we go over, is going to be cluster
222

222

00:15:34,030  -->  00:15:39,450
map, flight_dframe.
223

223

00:15:39,450  -->  00:15:41,890
And if you wanna normalize
by their Z score,
224

224

00:15:41,890  -->  00:15:46,120
you just input the argument
z_score equals to 1.
225

225

00:15:46,120  -->  00:15:49,330
Again, what the Z score does,
it just subtracts the mean and
226

226

00:15:49,330  -->  00:15:51,620
divides by the standard
deviation of each column.
227

227

00:15:51,620  -->  00:15:55,225
So that the rows have a mean of 0,
and there's a variance of 1.
228

228

00:15:56,960  -->  00:15:58,910
And so this is what the result looks like.
229

229

00:15:58,910  -->  00:16:03,185
So you can really tell that it's
the summer months are where you
230

230

00:16:03,185  -->  00:16:05,370
have higher number of flights.
231

231

00:16:07,291  -->  00:16:15,160
Okay, so that's it for
heatmaps and clustered matrices.
232

232

00:16:15,160  -->  00:16:17,810
You should give yourself
a huge pat on the back,
233

233

00:16:17,810  -->  00:16:20,530
you've made it all the way
through Lecture 53.
234

234

00:16:20,530  -->  00:16:21,540
Great job.
235

235

00:16:22,630  -->  00:16:27,590
Next up is a whole new section and
we're just gonna be doing projects that
236

236

00:16:27,590  -->  00:16:31,538
you can add to your portfolio and
we're gonna be using real data sets.
237

237

00:16:31,538  -->  00:16:34,640
We're gonna take all
the tools we've learned and
238

238

00:16:34,640  -->  00:16:37,400
hammer out some great
data analysis projects.
239

239

00:16:37,400  -->  00:16:40,970
I'm really excited for
you in the next section.
240

240

00:16:40,970  -->  00:16:42,700
Let's do this.
241

241

00:16:42,700  -->  00:16:46,150
Congrats again on finishing
all the way up to Lecture 53.
242

242

00:16:46,150  -->  00:16:48,170
Let's go ahead and
get started with the projects.
243

243

00:16:48,170  -->  00:16:48,680
I'll see you there.
