WEBVTT
1
1

00:00:02.366  -->  00:00:06.700
Hey everyone, welcome to part three of
the stock market data analysis project.
2

2

00:00:07.810  -->  00:00:11.780
So, in the last video we went
over correlations on stocks and
3

3

00:00:11.780  -->  00:00:13.940
a percent changes and daily returns.
4

4

00:00:13.940  -->  00:00:14.750
And analyzing that.
5

5

00:00:15.840  -->  00:00:19.530
So now I'm gonna show you
how to use C-Borne and
6

6

00:00:19.530  -->  00:00:23.720
Pandas to make it really easy to
repeat comparison analysis for
7

7

00:00:23.720  -->  00:00:27.830
every possible combination of
stocks in our technology portfolio.
8

8

00:00:27.830  -->  00:00:32.625
We're looking at Amazon, Apple,
Microsoft and Google right now and
9

9

00:00:32.625  -->  00:00:37.770
C-Borne allows us to create a great
comparison analysis plot using pair plot.
10

10

00:00:37.770  -->  00:00:40.050
So let's go ahead and dive into that.
11

11

00:00:41.230  -->  00:00:49.850
So, if you remember,
let's just look at our tech_rets.head.
12

12

00:00:49.850  -->  00:00:53.370
So we have the daily returns for
Apple, Amazon, Google,
13

13

00:00:53.370  -->  00:00:56.570
and Microsoft in our data frame.
14

14

00:00:56.570  -->  00:01:01.890
So what I'm gonna do is, I'm gonna
call C-Borne, and then call pairplots.
15

15

00:01:04.750  -->  00:01:07.760
And then I'm gonna pass the data frame.
16

16

00:01:07.760  -->  00:01:11.730
Something I'm gonna do though is,
I'm gonna drop all the NAN values,
17

17

00:01:11.730  -->  00:01:12.830
the null values.
18

18

00:01:12.830  -->  00:01:15.280
Just basically dropping that first row.
19

19

00:01:15.280  -->  00:01:18.610
So there's no error there, so
there's no missing data points.
20

20

00:01:18.610  -->  00:01:19.400
Let's go ahead and run it.
21

21

00:01:19.400  -->  00:01:22.490
It takes a little bit but we have it here.
22

22

00:01:23.530  -->  00:01:25.890
So now, this is really awesome.
23

23

00:01:25.890  -->  00:01:30.404
You have a histogram of
every stock's daily return.
24

24

00:01:32.215  -->  00:01:32.715
There you go.
25

25

00:01:32.715  -->  00:01:38.355
That's on a diagonal, which is basically
the same plot we did earlier up here.
26

26

00:01:39.395  -->  00:01:43.725
So, you have a histogram on the diagonal,
and
27

27

00:01:43.725  -->  00:01:48.780
then on the upper triangle,
if you will, and the lower triangle.
28

28

00:01:50.100  -->  00:01:51.790
You have the correlation scatter plots.
29

29

00:01:52.960  -->  00:01:55.440
And, here you can get
kind of a visual analysis
30

30

00:01:55.440  -->  00:01:59.640
of which stocks' returns were
correlated and which ones weren't.
31

31

00:01:59.640  -->  00:02:04.920
So just by eyeballing it here,
we can see the relationships here,
32

32

00:02:04.920  -->  00:02:08.940
and a quick glance shows an interesting
correlation between Google and
33

33

00:02:08.940  -->  00:02:13.600
Amazon, so looks like it's,
this is Amazon, this is Google.
34

34

00:02:13.600  -->  00:02:16.500
We're definitely seeing some
sort of correlation here.
35

35

00:02:16.500  -->  00:02:19.220
So it might be interesting to
investigate that individual comparison.
36

36

00:02:20.620  -->  00:02:25.080
So while the simplicity of just calling
sns.pairplot in your data frame is
37

37

00:02:25.080  -->  00:02:26.620
super fantastic.
38

38

00:02:26.620  -->  00:02:27.890
If we want some more control,
39

39

00:02:27.890  -->  00:02:32.940
we can call sns.pairgrid and we can
get really good control of the figure.
40

40

00:02:32.940  -->  00:02:37.070
So, we can say what kind of
plots go on the diagonal,
41

41

00:02:37.070  -->  00:02:39.820
what goes on the upper triangle,
what goes on the lower triangle.
42

42

00:02:39.820  -->  00:02:43.662
And here you can really utilize
the full power of C-Borne.
43

43

00:02:43.662  -->  00:02:46.930
So here's just the quick and
dirty way, pair plot.
44

44

00:02:46.930  -->  00:02:49.990
Super simple and
you get an awesome figure out of it.
45

45

00:02:49.990  -->  00:02:55.770
Let's dive deeper and see how we can
really control our figure using C-Borne.
46

46

00:02:55.770  -->  00:03:01.314
So I'm gonna create a figure
called returns_fig,
47

47

00:03:01.314  -->  00:03:05.090
and this will just be
the name of my figure.
48

48

00:03:05.090  -->  00:03:07.610
So, I'm gonna set up our figure
by naming it returns_fig,
49

49

00:03:07.610  -->  00:03:10.810
and I'm gonna call pair
plot on the data frame.
50

50

00:03:10.810  -->  00:03:13.830
So, I'm sorry,
pair grid on the data frame.
51

51

00:03:14.928  -->  00:03:19.130
We called pair plot earlier,
now we're gonna call PairGrid,
52

52

00:03:19.130  -->  00:03:23.030
and this is just what pair
plot is built on top of so,
53

53

00:03:23.030  -->  00:03:27.260
we're doing almost like a pair
plot by manually doing it by hand.
54

54

00:03:28.270  -->  00:03:34.540
So I call my tech_rets dropping
all the NA null values.
55

55

00:03:37.580  -->  00:03:41.656
So that's my figure, just a pair grid, so
56

56

00:03:41.656  -->  00:03:47.110
I'm going to grab my figure and
pass three methods on it.
57

57

00:03:47.110  -->  00:03:51.160
I'm gonna pass map upper,
map lower and map diagonal.
58

58

00:03:51.160  -->  00:03:55.056
So, using map_upper method,
59

59

00:03:55.056  -->  00:04:00.107
I can decide what I
want the upper triangle
60

60

00:04:00.107  -->  00:04:04.450
of that pair grid plot to look like.
61

61

00:04:05.770  -->  00:04:06.870
So, above the diagonal.
62

62

00:04:08.370  -->  00:04:10.160
I'm gonna have it be a scatter plot.
63

63

00:04:10.160  -->  00:04:14.160
So I'm gonna say plt.scatter.
64

64

00:04:14.160  -->  00:04:16.530
And I'll have the color be purple.
65

65

00:04:17.730  -->  00:04:21.150
And you can pass any arguments
that you would usually pass for
66

66

00:04:21.150  -->  00:04:22.130
a scatter plot here.
67

67

00:04:25.020  -->  00:04:26.790
So we've mapped the upper.
68

68

00:04:26.790  -->  00:04:29.270
And let's go ahead and
map the lower triangle in the figure.
69

69

00:04:30.550  -->  00:04:38.752
So, we call our figure
returns_fig.map_lower and
70

70

00:04:38.752  -->  00:04:47.330
in this case,
I'm going to have it be a C-Born KDE plot.
71

71

00:04:47.330  -->  00:04:53.572
I'll set a color map,
cmap, equal to cool_d.
72

72

00:04:53.572  -->  00:05:00.310
So if this is a bit confusing to you,
go ahead and review KDE plots in C-Born.
73

73

00:05:00.310  -->  00:05:01.980
Those data visualization lectures.
74

74

00:05:03.610  -->  00:05:05.810
And I'll break this down once
we get to see the actual plot.
75

75

00:05:06.960  -->  00:05:10.380
And then finally, we'll define the
diagonal as a series of histogram plots.
76

76

00:05:10.380  -->  00:05:18.052
So returns_fig.map_diag for diagonal.
77

77

00:05:18.052  -->  00:05:22.377
I'm going to call it as plot.hist and
78

78

00:05:22.377  -->  00:05:25.899
I'll specify some more bins.
79

79

00:05:27.370  -->  00:05:29.200
So I'll specify 30 bins,
80

80

00:05:29.200  -->  00:05:32.570
instead of the fewer amount of
bins we saw with the pair plot.
81

81

00:05:32.570  -->  00:05:34.630
Let's go ahead and run this.
82

82

00:05:36.070  -->  00:05:37.610
Might be a little slow cuz it's
doing quite a bit of work.
83

83

00:05:41.602  -->  00:05:42.890
Great.
84

84

00:05:42.890  -->  00:05:43.680
And there you have it.
85

85

00:05:43.680  -->  00:05:45.000
So now you have full control.
86

86

00:05:45.000  -->  00:05:47.690
You have KDE plots on the lower left.
87

87

00:05:47.690  -->  00:05:51.560
30 bin histograms on the diagonal and
88

88

00:05:51.560  -->  00:05:55.050
scatter plots on the upper right,
so this is really awesome.
89

89

00:05:55.050  -->  00:05:57.860
Let's go ahead and break down,
real quickly, what we did.
90

90

00:05:57.860  -->  00:05:58.790
So on the map upper,
91

91

00:05:58.790  -->  00:06:02.480
remember we said plt.scatter, and
here's your purple scatter plots.
92

92

00:06:03.830  -->  00:06:08.690
On the lower, we called a C-Born KDE
plot and chose a color map cool_d
93

93

00:06:08.690  -->  00:06:12.200
which is the same as the cool,
it's just a darker version of it.
94

94

00:06:12.200  -->  00:06:15.370
And here, you can see your KDE plots.
95

95

00:06:15.370  -->  00:06:19.386
And then for the diagonal,
we just call the histogram with 30 bins.
96

96

00:06:19.386  -->  00:06:24.422
And there you have full control
over what goes into the diagonal,
97

97

00:06:24.422  -->  00:06:28.190
the upper map, and
the lower map of your figure.
98

98

00:06:28.190  -->  00:06:31.580
So that's really freaking awesome,
if I do say so myself.
99

99

00:06:32.590  -->  00:06:36.200
So, we could have also analyzed the
correlation of the closing prices using
100

100

00:06:36.200  -->  00:06:37.310
this exact same technique.
101

101

00:06:38.870  -->  00:06:44.573
And what I mean by that is, remember,
this tech_rets were the daily returns, but
102

102

00:06:44.573  -->  00:06:50.130
we can also do this exact same plot for
correlations between the closing prices.
103

103

00:06:52.696  -->  00:06:56.219
So we kind of saw there was a little
bit of correlation between Amazon and
104

104

00:06:56.219  -->  00:06:58.110
Google as far as their daily returns.
105

105

00:06:59.540  -->  00:07:01.210
You can see it really clearly
here on this KDE plot.
106

106

00:07:03.670  -->  00:07:06.220
So I'm gonna copy and paste all this.
107

107

00:07:08.610  -->  00:07:14.550
But now, I'm going to set up for
the closing prices.
108

108

00:07:15.680  -->  00:07:21.730
So instead of having the tech returns,
I'm gonna say closing_df as my DataFrame.
109

109

00:07:21.730  -->  00:07:25.677
I'll leave everything else the same
except for that DataFrame.
110

110

00:07:30.019  -->  00:07:30.819
Go ahead and run it.
111

111

00:07:30.819  -->  00:07:35.530
And now we're gonna be able to see some
correlations between the closing prices,
112

112

00:07:35.530  -->  00:07:37.590
not the daily change in the prices.
113

113

00:07:38.600  -->  00:07:43.690
So again, here you have your histograms of
the closing prices for each of the stocks.
114

114

00:07:43.690  -->  00:07:46.730
Let's see if we can see any correlations.
115

115

00:07:46.730  -->  00:07:49.240
This one really jumps out
at me right here, and
116

116

00:07:49.240  -->  00:07:53.720
this is the correlation between Apple, and
if we scroll down here, and Microsoft.
117

117

00:07:53.720  -->  00:07:56.280
And you can see it here
in the KDE plot as well.
118

118

00:07:56.280  -->  00:07:58.490
Really interesting correlation here.
119

119

00:07:58.490  -->  00:08:02.440
It'd be nice to maybe individually
check that out if you wanted to.
120

120

00:08:03.820  -->  00:08:07.910
So, if we wanted to see
the actual numerical values of
121

121

00:08:07.910  -->  00:08:12.471
correlation between all the stocks, we can
do a classic corrplot, correlation plot.
122

122

00:08:13.620  -->  00:08:17.360
We saw that in the data
visualization lectures as well.
123

123

00:08:17.360  -->  00:08:18.900
So let's go ahead and use C-Born for
124

124

00:08:18.900  -->  00:08:21.080
a quick correlation plot for
the daily returns.
125

125

00:08:22.540  -->  00:08:27.540
So sns.corrplot is how we
call our correlation plots.
126

126

00:08:29.440  -->  00:08:31.810
And I'm gonna call it
on the daily returns.
127

127

00:08:31.810  -->  00:08:34.660
Remember to drop any
null values off that one.
128

128

00:08:36.150  -->  00:08:41.990
And I'll set annot or annotations equal
to true so I can see the numbers.
129

129

00:08:43.710  -->  00:08:48.330
So, I run this and now I can actually
see the numerical values for
130

130

00:08:48.330  -->  00:08:50.970
the correlations between
the daily returns.
131

131

00:08:50.970  -->  00:08:55.557
So Amazon and Google here have
the strongest correlation of 0.6, and
132

132

00:08:55.557  -->  00:09:00.630
if we scroll back up, remember we
kind of predicted that visually.
133

133

00:09:00.630  -->  00:09:01.710
We saw Amazon here
134

134

00:09:02.980  -->  00:09:06.250
seemed to be strongly correlated
to Google with that scatter plot.
135

135

00:09:08.210  -->  00:09:11.800
So that's great, and we can also do
the same thing for the closing prices.
136

136

00:09:11.800  -->  00:09:16.738
We'll say sns.corrplots on that
137

137

00:09:16.738  -->  00:09:22.020
closing_df, annot equal to true.
138

138

00:09:26.546  -->  00:09:30.511
And, here we can see again,
some strong correlations, it looks like,
139

139

00:09:30.511  -->  00:09:32.140
between Apple and Amazon.
140

140

00:09:32.140  -->  00:09:35.300
Or, Apple and Microsoft,
have some strong correlations.
141

141

00:09:35.300  -->  00:09:38.385
And we saw that here, Apple and Microsoft
seemed to be strongly correlated.
142

142

00:09:38.385  -->  00:09:40.870
Okay, great.
143

143

00:09:40.870  -->  00:09:45.368
So, just like we suspected
in our pair plots and
144

144

00:09:45.368  -->  00:09:49.150
pair grids,
we can see numerical values for
145

145

00:09:49.150  -->  00:09:52.180
the strongest correlations of the daily
stock returns and their closing prices.
146

146

00:09:52.180  -->  00:09:55.720
And it's also interesting to
see that technology companies
147

147

00:09:55.720  -->  00:09:59.315
are all positively correlated,
which kinda makes sense.
148

148

00:09:59.315  -->  00:10:02.951
You would intuitively think that all
the technology stocks would have some sort
149

149

00:10:02.951  -->  00:10:04.205
of positive correlation.
150

150

00:10:05.965  -->  00:10:06.745
Great.
151

151

00:10:06.745  -->  00:10:10.170
So, now that we've done some daily return
analysis, we're gonna go ahead and
152

152

00:10:10.170  -->  00:10:12.740
look deeper into actual risk analysis.
153

153

00:10:14.320  -->  00:10:16.810
So I'll close this video off here and
154

154

00:10:16.810  -->  00:10:20.340
in the next video,
we'll dive deeper into risk analysis.
155

155

00:10:20.340  -->  00:10:21.160
Great.
156

156

00:10:21.160  -->  00:10:22.320
Thanks and I'll see you there.
