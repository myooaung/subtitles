1
1

00:00:01,330  -->  00:00:05,000
Hello everyone, and
welcome to the second data project.
2

2

00:00:05,000  -->  00:00:09,710
So in this project, we're gonna be
doing a stock market data analysis.
3

3

00:00:09,710  -->  00:00:10,741
Okay great.
4

4

00:00:10,741  -->  00:00:15,702
So I'll be hopping a little bit back and
forth between
5

5

00:00:15,702  -->  00:00:20,680
the completed IPython Notebook and
the live coding.
6

6

00:00:20,680  -->  00:00:24,470
So let's go ahead and just check out what
we're gonna be doing in this project.
7

7

00:00:24,470  -->  00:00:27,980
So in this project,
we're gonna be answering a few questions.
8

8

00:00:27,980  -->  00:00:31,610
So we're gonna look at
various technology stocks and
9

9

00:00:31,610  -->  00:00:37,015
the questions we're gonna answer along
the way are what was the daily change and
10

10

00:00:37,015  -->  00:00:40,339
price and
what's your daily return on average.
11

11

00:00:40,339  -->  00:00:44,204
So just basic stock information and we're
gonna learn how to use pandas to do that.
12

12

00:00:44,204  -->  00:00:48,463
Then we're gonna look at what the moving
average of the various stocks for it, and
13

13

00:00:48,463  -->  00:00:50,450
we'll learn about moving averages.
14

14

00:00:51,600  -->  00:00:54,740
After that we'll look at different
correlations between different stocks.
15

15

00:00:54,740  -->  00:00:57,320
So we'll look at the correlation
between their closing prices and
16

16

00:00:57,320  -->  00:01:00,400
their daily returns and
see if we can get any insights there.
17

17

00:01:01,770  -->  00:01:04,450
Afterwards, we'll look at how
much value do we put at risk
18

18

00:01:04,450  -->  00:01:06,690
by investing in a particular stock.
19

19

00:01:06,690  -->  00:01:08,770
So we'll learn about
the term value at risk, and
20

20

00:01:08,770  -->  00:01:12,480
learn a little bit about risk analysis for
different stocks.
21

21

00:01:12,480  -->  00:01:16,580
And finally, we're gonna see if we can
attempt to predict future stock behavior
22

22

00:01:16,580  -->  00:01:19,200
based on previous stock behavior.
23

23

00:01:19,200  -->  00:01:21,000
Okay, so let's go ahead and
get started with the coding.
24

24

00:01:24,947  -->  00:01:28,740
And what I'm gonna do first is I'm just
gonna start off with all my imports.
25

25

00:01:30,620  -->  00:01:35,680
So here we go, I'm gonna say let's
start off with my data import,
26

26

00:01:35,680  -->  00:01:41,720
so import pandas as pd from pandas
27

27

00:01:41,720  -->  00:01:46,662
import Series, DataFrame.
28

28

00:01:46,662  -->  00:01:49,810
And then import numpy as np.
29

29

00:01:49,810  -->  00:01:51,920
Go ahead and run that cell.
30

30

00:01:51,920  -->  00:01:55,470
Now, I'm gonna import my visualization.
31

31

00:01:55,470  -->  00:01:57,070
Libraries.
32

32

00:01:57,070  -->  00:02:04,460
So I'll import matplotlib
dot pyplot as plt.
33

33

00:02:04,460  -->  00:02:09,200
Then import seaborn as sns.
34

34

00:02:09,200  -->  00:02:14,251
And then, what I'm gonna do
a little differently here is,
35

35

00:02:14,251  -->  00:02:19,660
I'm going to set underscore
style method on cborne.
36

36

00:02:19,660  -->  00:02:23,200
I'm gonna pass the string whitegrid,
one word.
37

37

00:02:24,450  -->  00:02:28,320
And all that's doing is, if you looked
already into the documentation of cborne
38

38

00:02:28,320  -->  00:02:31,370
in some previous visualization videos,
this is just gonna
39

39

00:02:31,370  -->  00:02:34,620
give us a nice white grid background for
all our visualizations.
40

40

00:02:35,670  -->  00:02:39,430
Then finally, in order to see our plots,
in the IPython notebook.
41

41

00:02:40,470  -->  00:02:43,080
I'm gonna call matplotlib inline.
42

42

00:02:44,940  -->  00:02:46,170
Okay, great, fantastic.
43

43

00:02:46,170  -->  00:02:49,010
A couple more imports we have to do for
44

44

00:02:49,010  -->  00:02:51,850
reading stock data from
the Internet using pandas.
45

45

00:02:51,850  -->  00:02:53,325
I have to say.
46

46

00:02:53,325  -->  00:03:00,440
From pandas.io.data, import data reader.
47

47

00:03:00,440  -->  00:03:04,950
That's gonna allow us to read stock
information either from Google Finance or
48

48

00:03:04,950  -->  00:03:06,080
Yahoo Finance.
49

49

00:03:06,080  -->  00:03:08,270
We can actually decide and
we'll show you that later.
50

50

00:03:09,750  -->  00:03:16,300
Then for time stamps, I am gonna
say from datetime import datetime.
51

51

00:03:16,300  -->  00:03:19,950
And we'll be using datetime to set
the start and end date of our data grab.
52

52

00:03:21,750  -->  00:03:28,690
Then finally from __future
future__ import division.
53

53

00:03:28,690  -->  00:03:32,080
I'm just doing this so I don't have to
worry about floating numbers later on.
54

54

00:03:32,080  -->  00:03:34,370
Or float numbers, I should say.
55

55

00:03:34,370  -->  00:03:36,810
If you're using Python 3,
you don't have to worry about that.
56

56

00:03:36,810  -->  00:03:37,870
That's already taken care of for you.
57

57

00:03:39,040  -->  00:03:40,510
All right, fantastic.
58

58

00:03:40,510  -->  00:03:45,150
So let's go ahead and use Yahoo and Pandas
to grab some data for some tech stocks.
59

59

00:03:45,150  -->  00:03:49,830
So the tech stocks we'll use for
this analysis are gonna be just Apple,
60

60

00:03:49,830  -->  00:03:51,720
Google, Microsoft, and Amazon.
61

61

00:03:51,720  -->  00:03:56,041
So I'm gonna make a list,
tech_list equal to, and
62

62

00:03:56,041  -->  00:04:03,400
now I'm gonna pass all the stock tickers
for the various technology stocks.
63

63

00:04:03,400  -->  00:04:05,780
So I'm gonna say Apple, AAPL.
64

64

00:04:06,780  -->  00:04:08,050
Google is GOOG.
65

65

00:04:09,800  -->  00:04:10,720
Microsoft is MSFT.
66

66

00:04:10,720  -->  00:04:13,900
And then Amazon is AMZN.
67

67

00:04:16,690  -->  00:04:17,260
Great.
68

68

00:04:17,260  -->  00:04:19,570
So now I have a list of technology stocks.
69

69

00:04:19,570  -->  00:04:20,820
As far as our tickers.
70

70

00:04:20,820  -->  00:04:23,210
Remember, they all have to be capitalized.
71

71

00:04:23,210  -->  00:04:26,250
And next I'm gonna set up an end and
start time for DataGrab.
72

72

00:04:27,970  -->  00:04:30,030
So my end date will be today.
73

73

00:04:30,030  -->  00:04:35,068
So I'm gonna say datetime.now.
74

74

00:04:35,068  -->  00:04:40,840
And my start date I'm gonna set it
to be a year ago from today's date.
75

75

00:04:40,840  -->  00:04:45,260
And the way I can do that is
passing the year, the month, and
76

76

00:04:45,260  -->  00:04:48,545
the day to daytime of my end date.
77

77

00:04:48,545  -->  00:04:55,200
End year, end month, end.day.
78

78

00:04:55,200  -->  00:05:00,370
But since I want it to be a year ago,
I will subtract 1 from my year.
79

79

00:05:02,550  -->  00:05:06,810
So that allows my start date
to be today's year minus 1.
80

80

00:05:06,810  -->  00:05:08,409
So exactly one year ago from todays date.
81

81

00:05:09,730  -->  00:05:10,930
Great.
82

82

00:05:10,930  -->  00:05:15,010
So, let's make a little for loop for
grabbing some finance data and
83

83

00:05:15,010  -->  00:05:16,890
setting it as a dataframe.
84

84

00:05:16,890  -->  00:05:20,840
So, I'm gonna say for stock in tech_list.
85

85

00:05:20,840  -->  00:05:23,020
So, for every stock to grow
in that list that we made.
86

86

00:05:24,340  -->  00:05:27,020
I'm gonna set the data frame
as the stock ticker name.
87

87

00:05:27,020  -->  00:05:29,280
And I can do that using globals.
88

88

00:05:29,280  -->  00:05:30,380
And I'll explain this in a second.
89

89

00:05:31,610  -->  00:05:34,370
So, let's go ahead and call stock.
90

90

00:05:37,020  -->  00:05:37,870
Okay.
91

91

00:05:37,870  -->  00:05:44,230
And then DataReader(stock) Yahoo
92

92

00:05:44,230  -->  00:05:49,690
as a string, and
then my start and my end date.
93

93

00:05:50,980  -->  00:05:52,470
Go ahead and run that.
94

94

00:05:52,470  -->  00:05:54,330
Great.
So let me break down what I just did here.
95

95

00:05:55,360  -->  00:05:59,190
So I said for every stock in that tech
list, so for every ticker, Apple, Google,
96

96

00:05:59,190  -->  00:06:04,288
MSFT, Amazon, let's start with
the right hand side of the equals sign.
97

97

00:06:04,288  -->  00:06:07,980
I called data reader, and
data reader's gonna take four arguments.
98

98

00:06:07,980  -->  00:06:09,400
It's gonna take the stock ticker.
99

99

00:06:10,450  -->  00:06:14,430
It's gonna ask for
what finance website do you wanna use.
100

100

00:06:14,430  -->  00:06:17,030
You can either use Google,
in this case I'm using Yahoo Finance.
101

101

00:06:18,110  -->  00:06:22,080
And then it's gonna say what's your start
date, and then what's your end date for
102

102

00:06:22,080  -->  00:06:23,290
grabbing that stock information.
103

103

00:06:24,670  -->  00:06:28,900
And then what I did on the left hand side,
it's a bit of a sloppy way of doing this,
104

104

00:06:28,900  -->  00:06:30,230
but it's quite simple actually.
105

105

00:06:31,418  -->  00:06:37,495
I'm using globals And what globals does
is it's taking that stock ticker and
106

106

00:06:37,495  -->  00:06:39,625
making it into a global variable.
107

107

00:06:39,625  -->  00:06:41,775
Just taking that string, and
making it into a global variable.
108

108

00:06:44,165  -->  00:06:48,640
And what that allows me to do is this,
is now,
109

109

00:06:48,640  -->  00:06:53,730
if I call that stock ticker APPL for
Apple, it's my data frame.
110

110

00:06:56,350  -->  00:06:57,350
And that's what that was doing,
111

111

00:06:57,350  -->  00:07:01,710
it was setting that string name
as the data frame variable, so
112

112

00:07:01,710  -->  00:07:07,026
if I also call GOOG, let's say .head.
113

113

00:07:07,026  -->  00:07:08,238
And there you have it.
114

114

00:07:08,238  -->  00:07:13,400
So all globals()(stock) was doing
was it was setting that string name
115

115

00:07:13,400  -->  00:07:14,350
as the data frame name.
116

116

00:07:14,350  -->  00:07:16,840
All right, great.
117

117

00:07:16,840  -->  00:07:20,485
So now we have four data frames and
it's all stock information.
118

118

00:07:20,485  -->  00:07:21,925
So, let's go ahead and
119

119

00:07:21,925  -->  00:07:24,475
play around with the Apple data
frame to get a feel for the data.
120

120

00:07:26,015  -->  00:07:34,290
So I'll call AAPL and
I'm gonna call the describe method on it.
121

121

00:07:34,290  -->  00:07:37,680
So let's go and see what we have here.
122

122

00:07:37,680  -->  00:07:42,280
We got the opening price, the high,
the low that day, the closing price,
123

123

00:07:42,280  -->  00:07:46,560
the volume traded that day and
then this adjusted closing price.
124

124

00:07:46,560  -->  00:07:50,620
And what the adjusted closing price
means is it basically takes into account
125

125

00:07:50,620  -->  00:07:52,610
any stock changes.
126

126

00:07:52,610  -->  00:07:55,070
So, if there was a split stock or
something like that.
127

127

00:07:56,200  -->  00:08:00,338
So it will adjust the closing
price accordingly.
128

128

00:08:00,338  -->  00:08:03,520
So we're gonna be using this adjusted
close price to do some historical data
129

129

00:08:03,520  -->  00:08:04,590
analysis.
130

130

00:08:04,590  -->  00:08:07,840
Most people always use the adjusted
closing price for this.
131

131

00:08:07,840  -->  00:08:09,780
It just takes into account
any changes in the stock.
132

132

00:08:09,780  -->  00:08:12,150
All right.
133

133

00:08:12,150  -->  00:08:15,140
And if we wanted some general
info on our data frame,
134

134

00:08:16,900  -->  00:08:18,390
we could call the .info method.
135

135

00:08:20,230  -->  00:08:24,760
And now I can see we have 250 entries so
rows, and there's a total of six columns.
136

136

00:08:26,540  -->  00:08:27,860
Great.
137

137

00:08:27,860  -->  00:08:30,570
Okay, so let's just do a little
bit of basic analysis.
138

138

00:08:30,570  -->  00:08:32,560
We'll see a historical
view of the closing price.
139

139

00:08:32,560  -->  00:08:34,770
So to do that.
140

140

00:08:34,770  -->  00:08:36,650
I can just use Pandas.
141

141

00:08:36,650  -->  00:08:40,370
So I'm gonna call the adjusted
closing price row.
142

142

00:08:40,370  -->  00:08:43,950
Adj close, column I should say, excuse me.
143

143

00:08:43,950  -->  00:08:46,690
So, call that adjusted closed column, and
144

144

00:08:46,690  -->  00:08:50,520
then I can just use the plot
method that Pandas has.
145

145

00:08:51,570  -->  00:08:53,340
And I'm gonna pass two arguments.
146

146

00:08:53,340  -->  00:08:59,320
I'm gonna say the legend equals true,
just so we can see a little legend there.
147

147

00:08:59,320  -->  00:09:04,469
And then I'm gonna set the figsize
equal to a 10 by 4 inches.
148

148

00:09:05,640  -->  00:09:07,850
You don't have to do this, I'm just
doing this so it's a little readable.
149

149

00:09:10,000  -->  00:09:12,760
Oh whoops you gotta put
an equal sign there.
150

150

00:09:14,000  -->  00:09:16,215
Okay and there you have it.
151

151

00:09:16,215  -->  00:09:20,370
And so we've just successfully mapped
out the adjusted closing price for
152

152

00:09:20,370  -->  00:09:24,190
a years worth of Apple stock and we did
it in one line which is pretty nice.
153

153

00:09:24,190  -->  00:09:26,829
So panda is really great for
this kind of financial analysis.
154

154

00:09:28,140  -->  00:09:32,641
Now let's plot the total volume of stock
being traded each day over the past year.
155

155

00:09:35,940  -->  00:09:38,300
So I'm gonna call volume.
156

156

00:09:38,300  -->  00:09:38,800
Column.
157

157

00:09:40,620  -->  00:09:41,610
And I'm gonna plot that out.
158

158

00:09:42,990  -->  00:09:45,240
And again I'll set my
legend equal to true.
159

159

00:09:45,240  -->  00:09:50,270
And I will set the figsize
160

160

00:09:54,320  -->  00:09:55,280
equal to 10 x 4 inches.
161

161

00:09:59,530  -->  00:10:03,460
Okay and there you have your
daily volume that was traded.
162

162

00:10:03,460  -->  00:10:07,364
You can see there was definitely some
peaks where the stocks were really hot and
163

163

00:10:07,364  -->  00:10:08,680
being traded quite a bit.
164

164

00:10:08,680  -->  00:10:14,148
Notice the scale here, it's this number
of times 1, 2, times 10 to the 8th, 1E8.
165

165

00:10:14,148  -->  00:10:18,664
Okay.
166

166

00:10:18,664  -->  00:10:22,151
So now that we've seen the visualizations
for the closing price and
167

167

00:10:22,151  -->  00:10:24,310
the volume traded each day.
168

168

00:10:24,310  -->  00:10:27,070
We're gonna go ahead and
calculate the average, or
169

169

00:10:27,070  -->  00:10:28,300
the moving average for the stock.
170

170

00:10:29,380  -->  00:10:32,070
So for some more information
on the moving average,
171

171

00:10:32,070  -->  00:10:33,940
you can check out the following links.
172

172

00:10:33,940  -->  00:10:37,115
I'm gonna post them here.
173

173

00:10:37,115  -->  00:10:38,945
And you can check them out actually,
174

174

00:10:38,945  -->  00:10:43,605
well let me just hop back to
the completed IPython Notebook.
175

175

00:10:43,605  -->  00:10:44,389
So we just did all this,
176

176

00:10:44,389  -->  00:10:46,445
and remember the IPython Notebook
has a lot more commentary.
177

177

00:10:49,637  -->  00:10:52,075
And we're gonna check
out the moving averages.
178

178

00:10:52,075  -->  00:10:56,487
So you can check out these two links here,
investopedia.com
179

179

00:11:00,155  -->  00:11:03,100
And go ahead and
read over these moving averages.
180

180

00:11:03,100  -->  00:11:06,360
I'll explain it in the next video
when we tackle moving average, but
181

181

00:11:06,360  -->  00:11:08,850
it's nice just to get a little
bit of an in-depth view of it.
182

182

00:11:10,390  -->  00:11:10,890
Okay.
183

183

00:11:12,010  -->  00:11:14,490
So I'll stop this video here now.
184

184

00:11:14,490  -->  00:11:17,380
And in the next video we'll
go over the moving averages.
185

185

00:11:17,380  -->  00:11:18,090
Okay.
186

186

00:11:18,090  -->  00:11:18,630
I'll see you there.
