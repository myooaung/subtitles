WEBVTT
1
1

00:00:02.130  -->  00:00:02.740
Hey, everyone.
2

2

00:00:02.740  -->  00:00:05.530
Welcome to the next part
of our Titanic project.
3

3

00:00:07.460  -->  00:00:11.620
So last time, we looked at
where the passengers came from,
4

4

00:00:11.620  -->  00:00:13.430
and who the passengers were.
5

5

00:00:13.430  -->  00:00:17.080
So we looked at the cabins,
we looked at their ages and
6

6

00:00:17.080  -->  00:00:19.380
we also looked at where they came from.
7

7

00:00:20.410  -->  00:00:24.130
So what we're gonna do now
is see who was alone and
8

8

00:00:24.130  -->  00:00:27.180
who was with family,
as far as the passengers on the Titanic.
9

9

00:00:28.550  -->  00:00:29.430
So how can we do that?
10

10

00:00:30.560  -->  00:00:34.160
We can start by adding a new
column to define what alone means.
11

11

00:00:35.370  -->  00:00:39.941
So let's go ahead and
take a quick look at our data frame.
12

12

00:00:44.061  -->  00:00:50.315
So if you notice you have this SibSp and
this Parch, these two column,
13

13

00:00:50.315  -->  00:00:55.160
just to remind you,
this Sib column is the siblings.
14

14

00:00:55.160  -->  00:00:58.120
So, one is true,
they had siblings on board.
15

15

00:00:58.120  -->  00:01:03.010
Zero is false they had no siblings
on board and in the Parch
16

16

00:01:03.010  -->  00:01:07.950
means if it's true, it means they
had parents or children on board and
17

17

00:01:07.950  -->  00:01:14.190
if it's zero that means they had
neither parents nor children on board.
18

18

00:01:14.190  -->  00:01:19.530
So you can imagine that if these are both
zero, then they were completely alone
19

19

00:01:19.530  -->  00:01:22.530
as far as family,
as passengers on the Titanic.
20

20

00:01:26.460  -->  00:01:30.170
Let's go ahead and
make a new column to define alone.
21

21

00:01:30.170  -->  00:01:35.770
So what I'm gonna do is say Titanic_df and
22

22

00:01:35.770  -->  00:01:40.590
define Alone column as,
23

23

00:01:40.590  -->  00:01:45.670
the first that we're going
to do is I'm going to add
24

24

00:01:47.730  -->  00:01:52.920
the sibling column and the values
25

25

00:01:52.920  -->  00:01:59.020
of the parent/child columns, and
you'll see why I do that in a second.
26

26

00:02:01.230  -->  00:02:08.240
Let's go ahead and see what that looked
like, get a preview of it, just the head.
27

27

00:02:12.140  -->  00:02:14.740
Actually, let's go ahead and
see that whole thing, so
28

28

00:02:14.740  -->  00:02:17.490
you can get the whole picture here.
29

29

00:02:17.490  -->  00:02:21.260
So by adding those two columns and
setting it as the Alone,
30

30

00:02:22.390  -->  00:02:26.940
what we do know now is that if
the Alone column is anything but
31

31

00:02:26.940  -->  00:02:32.350
zero then that passenger had family
aboard and they were not alone.
32

32

00:02:32.350  -->  00:02:36.300
Hopefully, that makes sense, so what I
did here, added the sibling value and
33

33

00:02:36.300  -->  00:02:39.430
added the parent/child value.
34

34

00:02:39.430  -->  00:02:43.750
So if they were alone, both of
those values would have to be zero.
35

35

00:02:43.750  -->  00:02:51.960
So anything that is not zero here means
they had some sort of family on board.
36

36

00:02:51.960  -->  00:02:56.840
So what I'm gonna do now is, I'm gonna
look for, through the Alone column where
37

37

00:02:56.840  -->  00:03:01.020
things are greater than zero or
equal to zero, and set the alone status.
38

38

00:03:02.110  -->  00:03:06.603
So to do that, let's go ahead and
39

39

00:03:06.603  -->  00:03:13.507
set the Alone column and
I'm gonna say its location
40

40

00:03:18.028  -->  00:03:20.503
of alone.
41

41

00:03:25.680  -->  00:03:27.781
So I'll say here.
42

42

00:03:31.401  -->  00:03:37.764
For the column Alone,
the Titanic alone column,
43

43

00:03:37.764  -->  00:03:42.765
the locations where Titanic data frame
44

44

00:03:42.765  -->  00:03:47.462
Alone column was greater than zero,
45

45

00:03:47.462  -->  00:03:53.099
I'll set that equal to with family string.
46

46

00:03:53.099  -->  00:03:56.909
Then with the same logic,
47

47

00:03:56.909  -->  00:04:01.932
the location where Titanic_df,
48

48

00:04:01.932  -->  00:04:05.914
Alone, was equal to zero,
49

49

00:04:05.914  -->  00:04:12.160
that means that that passenger was alone.
50

50

00:04:14.040  -->  00:04:16.230
So I'll set that equal to to the string,
alone.
51

51

00:04:17.475  -->  00:04:20.730
Let's go ahead and run this, Shift Enter.
52

52

00:04:20.730  -->  00:04:25.250
If you notice, you may get an error here,
don't worry about that,
53

53

00:04:25.250  -->  00:04:29.850
that's kind of just a warning to
make sure you're not accidentally
54

54

00:04:29.850  -->  00:04:32.210
working on a copy instead
of working on the original.
55

55

00:04:33.700  -->  00:04:38.330
It's okay to ignore that, if you want
more information you can go ahead and
56

56

00:04:38.330  -->  00:04:40.420
check out this link.
57

57

00:04:41.480  -->  00:04:44.430
So it's just a stack
over flow answer to how
58

58

00:04:44.430  -->  00:04:49.290
to deal with this specific
Panda's warning but don't worry,
59

59

00:04:49.290  -->  00:04:51.530
you haven't done anything wrong
if you get this warning here.
60

60

00:04:54.170  -->  00:04:58.940
So let's go ahead and make sure it
worked by just getting a quick preview.
61

61

00:05:04.901  -->  00:05:07.694
If we look all the way here on the right,
62

62

00:05:07.694  -->  00:05:13.283
we have this Alone column that signifies
whether or not they're with family or
63

63

00:05:13.283  -->  00:05:18.550
if they're alone and now let's
get onto a visualization of this.
64

64

00:05:18.550  -->  00:05:23.620
So we'll start off with the most
basic one, the factor plot and
65

65

00:05:23.620  -->  00:05:27.870
we're just going to plot people alone,
66

66

00:05:29.250  -->  00:05:34.980
set the data set as Titanic_df.
67

67

00:05:34.980  -->  00:05:40.491
In this case,
I'll set the palette equal to blues.
68

68

00:05:40.491  -->  00:05:44.167
Now remember,
you can choose any palettes you want
69

69

00:05:44.167  -->  00:05:49.140
from that map plot lib colormap link
we showed in an earlier lecture.
70

70

00:05:50.840  -->  00:05:51.720
So what am I doing here?
71

71

00:05:51.720  -->  00:05:56.536
I'm just setting a factor
plot on the Alone column
72

72

00:05:56.536  -->  00:06:01.130
using my Titanic_df data frame and
here we go.
73

73

00:06:02.360  -->  00:06:05.610
It looks like from our basic analysis that
74

74

00:06:07.710  -->  00:06:11.750
actually quite a bit more people were
completely alone then those that came on
75

75

00:06:11.750  -->  00:06:16.040
board with some sort of family,
either siblings or parents or children.
76

76

00:06:16.040  -->  00:06:17.490
Great.
77

77

00:06:17.490  -->  00:06:19.720
Now that we've analyzed the data,
let's go ahead and
78

78

00:06:19.720  -->  00:06:25.410
take a look at probably the most
interesting and open-ended question, which
79

79

00:06:25.410  -->  00:06:30.030
is what factors helped someone survive
the sinking or crash of the Titanic?
80

80

00:06:32.330  -->  00:06:37.370
So what I can do with my data frame
81

81

00:06:37.370  -->  00:06:42.020
is create a new column and
we can do that through mapping.
82

82

00:06:43.650  -->  00:06:50.247
Let's go ahead and make a column called
83

83

00:06:50.247  -->  00:06:55.286
Survivor in our data frame and
84

84

00:06:55.286  -->  00:06:59.920
I'm gonna set
85

85

00:06:59.920  -->  00:07:04.598
this equal to the Survived column and
86

86

00:07:04.598  -->  00:07:09.290
I'll type this out and
explain in a second what I'm doing here.
87

87

00:07:09.290  -->  00:07:18.330
I'm using a dictionary to map, so
I'll say that needs to be parentheses.
88

88

00:07:18.330  -->  00:07:23.868
Pass the dictionary here through map,
get zero equal to no,
89

89

00:07:23.868  -->  00:07:32.407
have one key be evaluative of yes.
90

90

00:07:32.407  -->  00:07:38.370
What I did here is I made a new
column called Survivor column and
91

91

00:07:38.370  -->  00:07:40.440
I just grabbed information
from the survived.
92

92

00:07:40.440  -->  00:07:43.640
So if I scroll up here,
you do have a column called Survive,
93

93

00:07:45.580  -->  00:07:49.300
where zero is they did not survive,
one is they did survive.
94

94

00:07:50.780  -->  00:07:55.930
So, no, yes, and
95

95

00:07:55.930  -->  00:07:59.449
if you're a little rusty on this
mapping mechanism, you can go ahead and
96

96

00:08:00.580  -->  00:08:05.130
look at the Lecture 36 that
went over mapping, and
97

97

00:08:05.130  -->  00:08:07.926
let's just get a quick overall view
of who survived versus who died.
98

98

00:08:07.926  -->  00:08:13.670
[SOUND] Factor plot and
now I'll do survivor,
99

99

00:08:13.670  -->  00:08:21.531
set my data equal to the data
frame we've been working with and
100

100

00:08:21.531  -->  00:08:27.446
I'm just messing around
a lot with palettes.
101

101

00:08:27.446  -->  00:08:30.468
Again, go ahead and
choose whichever ones you want,
102

102

00:08:30.468  -->  00:08:34.175
you don't even have to specify a palette,
if you don't want to.
103

103

00:08:36.695  -->  00:08:40.190
I just chose set one to make it
very clear on who survived, so
104

104

00:08:40.190  -->  00:08:43.870
here are the no survivors,
here are the yes survivors.
105

105

00:08:43.870  -->  00:08:50.980
Obviously, quite a few more people did not
survive the Titanic than those who did.
106

106

00:08:50.980  -->  00:08:55.710
So now we wanna know which factors played
into them surviving versus not surviving,
107

107

00:08:55.710  -->  00:09:02.070
which factors have different
effects on their survival rates?
108

108

00:09:02.070  -->  00:09:10.780
Let's go ahead and
see if class was a factor.
109

109

00:09:10.780  -->  00:09:13.810
If you've ever seen the movie Titanic,
that really popularized
110

110

00:09:13.810  -->  00:09:18.160
the notion that third class passengers
did not do as well as their first and
111

111

00:09:18.160  -->  00:09:19.700
second class counterparts.
112

112

00:09:21.320  -->  00:09:23.490
Let's use some data analysis
to see if that's true or not.
113

113

00:09:24.740  -->  00:09:29.311
So I can say create a factor plot and
114

114

00:09:29.311  -->  00:09:32.631
I will plot the classes.
115

115

00:09:36.111  -->  00:09:39.211
Versus who survived.
116

116

00:09:42.971  -->  00:09:44.930
And I'll have that data
come from my data frame.
117

117

00:09:44.930  -->  00:09:46.271
That's all you gotta do.
118

118

00:09:49.731  -->  00:09:54.688
And now you can see here that the general
survival trend for the rates are for
119

119

00:09:54.688  -->  00:09:58.320
the third class, at least,
is substantially lower.
120

120

00:10:01.220  -->  00:10:07.110
So you might be thinking this is caused
121

121

00:10:07.110  -->  00:10:10.870
by the effect of women and
children first and if you remember,
122

122

00:10:10.870  -->  00:10:17.710
if we
123

123

00:10:17.710  -->  00:10:22.520
scroll way back up here,
when did we do this?
124

124

00:10:24.040  -->  00:10:27.500
So third class had way more males
than any of the other classes,
125

125

00:10:27.500  -->  00:10:32.020
so you can imagine if women and children
are first, then the third class could
126

126

00:10:32.020  -->  00:10:37.730
really be affected by the survival
rates if it's just purely by class.
127

127

00:10:37.730  -->  00:10:41.470
So how can we change this by
considering class and gender?
128

128

00:10:41.470  -->  00:10:43.330
We can note the hue argument.
129

129

00:10:43.330  -->  00:10:49.910
So I can say hue equal to person and
130

130

00:10:49.910  -->  00:10:54.710
you remember that Person column we made
earlier in the project, if I run it now,
131

131

00:10:56.400  -->  00:11:00.080
I get my factor plot,
considering class and gender.
132

132

00:11:01.370  -->  00:11:04.160
So from this data,
it looks like being a male., or
133

133

00:11:04.160  -->  00:11:07.180
being a third class were both
definitely not favorable for survival.
134

134

00:11:08.640  -->  00:11:12.700
Even regardless of the class, the result
of being a male in any of the classes,
135

135

00:11:12.700  -->  00:11:18.280
first, second, or third, dramatically
decreases your chances of survival but
136

136

00:11:18.280  -->  00:11:21.310
we might be wondering, is age a factor?
137

137

00:11:21.310  -->  00:11:23.790
Does being younger or older have
an effect on your survival rate?
138

138

00:11:25.070  -->  00:11:26.770
So how can we do that?
139

139

00:11:26.770  -->  00:11:29.260
We can use a linear plot
on age versus survival.
140

140

00:11:30.860  -->  00:11:35.590
So if you remember from lectures,
we had the LM plot and
141

141

00:11:35.590  -->  00:11:39.500
in this case,
we wanted to know age versus who survived
142

142

00:11:42.600  -->  00:11:49.810
and I'll set my data equal again as always
to the data frame we've been working with.
143

143

00:11:51.270  -->  00:11:56.030
What we have here is all these one's are
up here are the people who survived, and
144

144

00:11:56.030  -->  00:11:58.080
their corresponding age
down here on the X-axis.
145

145

00:11:58.080  -->  00:12:02.290
Let me make this a little bigger and
on the bottom,
146

146

00:12:02.290  -->  00:12:04.860
here is everyone who did not survive,
and their corresponding age.
147

147

00:12:06.000  -->  00:12:10.830
You can see there's a general trend
if your look at the linear line
148

148

00:12:12.280  -->  00:12:15.290
here but the older the passenger was,
149

149

00:12:15.290  -->  00:12:18.070
the less likely they survive,
that's the general trend.
150

150

00:12:19.330  -->  00:12:24.695
Let's go ahead and use hue to see
the the effect of class and age.
151

151

00:12:26.440  -->  00:12:31.510
What I'm going to do is,
I'm going to copy that line,
152

152

00:12:31.510  -->  00:12:36.160
the LM plot, so Age survived and
now I'm going to use hue
153

153

00:12:37.820  -->  00:12:41.682
and as you might of guessed,
I will pass the class as a hue.
154

154

00:12:43.840  -->  00:12:46.520
Since we're gonna be dealing
with a lot of information,
155

155

00:12:46.520  -->  00:12:48.470
it'd be nice to use a palette here.
156

156

00:12:50.530  -->  00:12:54.350
Note you don't have to use palettes but
they're always nice to play with.
157

157

00:12:54.350  -->  00:12:55.730
So in this case, I'm gonna use the winter,
158

158

00:12:55.730  -->  00:12:58.437
which I got off that map
plot lib colormaps website.
159

159

00:13:05.420  -->  00:13:08.218
This is interesting, you can see
the trends between the classes.
160

160

00:13:08.218  -->  00:13:13.030
Looks like there's still quite a bit
more deaths in the third class and
161

161

00:13:13.030  -->  00:13:16.510
we can use the x bin argument to clean
up this figure a little bit more
162

162

00:13:16.510  -->  00:13:18.800
instead of having every single
data point in this figure.
163

163

00:13:19.890  -->  00:13:21.580
So how do I do that?
164

164

00:13:21.580  -->  00:13:24.300
I can make a list called generations.
165

165

00:13:25.950  -->  00:13:28.700
You can call the list whatever
you want but in this case,
166

166

00:13:28.700  -->  00:13:30.510
I'm just gonna make some age bins.
167

167

00:13:34.710  -->  00:13:40.030
What I'm doing here is I'm gonna use this
generations bin, so 10 years old, 20 years
168

168

00:13:40.030  -->  00:13:44.740
old, 40 years old, 60, 80 years old and
grab all these points that are closest and
169

169

00:13:44.740  -->  00:13:48.440
bin them by those ages and then get
a little standard deviation on that.
170

170

00:13:50.410  -->  00:13:57.580
Then I'm gonna use seaborn or
sns.lmplot and I'll plot Age,
171

171

00:14:00.010  -->  00:14:05.459
Survived, I'll still have my
hue be the class, so Pclass.
172

172

00:14:08.800  -->  00:14:11.880
My data will still come from
the Titanic data frame that we made.
173

173

00:14:14.300  -->  00:14:17.990
I'll still have my palette
be equal to winter and
174

174

00:14:17.990  -->  00:14:23.310
the additional argument I'm gonna
say is x bins equals generations.
175

175

00:14:28.220  -->  00:14:32.320
So this cleans it up a bit, as far as not
having every single data point here and
176

176

00:14:32.320  -->  00:14:35.080
you can see there's a really
high standard deviation on
177

177

00:14:35.080  -->  00:14:38.040
the older people in the first class,
which is an interesting find.
178

178

00:14:40.400  -->  00:14:42.680
What we might want to do now,
since we're thinking of survival,
179

179

00:14:42.680  -->  00:14:47.710
is we haven't thought about how gender and
age relate with survival sets.
180

180

00:14:47.710  -->  00:14:50.640
So let's go ahead and check that
out real quick using an LM plot.
181

181

00:14:54.820  -->  00:14:59.563
So I can say age versus survived and
in this case,
182

182

00:14:59.563  -->  00:15:04.320
I'll set my hue equal to sex,
so female or male.
183

183

00:15:08.781  -->  00:15:11.145
Set my data as Titanic_df,
184

184

00:15:11.145  -->  00:15:16.066
I'll keep my winter palette since
I like the way it looks and
185

185

00:15:16.066  -->  00:15:21.101
I'll keep those generation bins so
it's a little cleaner.
186

186

00:15:29.060  -->  00:15:33.417
This is interesting,
it looks like if you were an older female,
187

187

00:15:33.417  -->  00:15:38.780
you had a better chance of surviving
versus if you were an older male.
188

188

00:15:38.780  -->  00:15:43.190
But still the very old male has quite
a bit of standard deviation on it, so
189

189

00:15:43.190  -->  00:15:47.210
it might be interesting to
get a closer look on that.
190

190

00:15:47.210  -->  00:15:49.059
So what I'm going to do now is give you-
