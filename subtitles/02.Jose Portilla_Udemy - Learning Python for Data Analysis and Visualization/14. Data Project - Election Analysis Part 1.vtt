WEBVTT
1
1

00:00:02.250  -->  00:00:05.730
Hey everyone,
welcome to the election data project.
2

2

00:00:05.730  -->  00:00:10.750
So this project, similarly to the last
one, I'll be hopping back and
3

3

00:00:10.750  -->  00:00:15.330
forth a bit between the IPython
notebook that's already completed for
4

4

00:00:15.330  -->  00:00:18.190
you, and the live code section.
5

5

00:00:18.190  -->  00:00:22.770
So if we take a look at the IPython
notebook, let's go ahead and
6

6

00:00:22.770  -->  00:00:24.930
just look through the introduction.
7

7

00:00:24.930  -->  00:00:27.390
So in this project we'll
be analyzing two data sets.
8

8

00:00:27.390  -->  00:00:32.030
The first data set's gonna be
the results of some political polls, and
9

9

00:00:32.030  -->  00:00:34.772
we'll analyze this aggregated poll
data and answer some questions.
10

10

00:00:34.772  -->  00:00:39.490
Some of the questions we're gonna be
11

11

00:00:39.490  -->  00:00:43.100
looking at was who was being polled and
what was their party affiliation.
12

12

00:00:43.100  -->  00:00:46.160
We will also look at the poll results and
13

13

00:00:46.160  -->  00:00:48.580
look at who they favored
either Mitt Romney or Obama.
14

14

00:00:48.580  -->  00:00:50.180
Remember, this is the 2012 election.
15

15

00:00:51.360  -->  00:00:54.390
We'll look at how undecided
voters affected the poll.
16

16

00:00:54.390  -->  00:00:57.020
And can we account for
the undecided voters?
17

17

00:00:57.020  -->  00:00:59.825
Maybe we could split them down
the middle and give half to Obama and
18

18

00:00:59.825  -->  00:01:01.870
half to Romney and
see how that affects things.
19

19

00:01:03.250  -->  00:01:05.860
Then, we'll look at how voter
sentiment changed over time.
20

20

00:01:06.920  -->  00:01:10.130
And we'll also see if there's an affect
on the poles from the debates.
21

21

00:01:11.330  -->  00:01:13.680
We'll discuss the second data later on.
22

22

00:01:13.680  -->  00:01:16.570
Second data set's just gonna
be some donation data.
23

23

00:01:18.030  -->  00:01:19.970
So let's go ahead and
start our first standard imports.
24

24

00:01:19.970  -->  00:01:23.470
Gonna hop back over to the live coding, so
you guys can follow along with me here.
25

25

00:01:24.580  -->  00:01:28.690
So first, we're gonna import
the things we need for data analysis.
26

26

00:01:28.690  -->  00:01:31.083
So import pandas as pd.
27

27

00:01:31.083  -->  00:01:35.859
From pandas import
28

28

00:01:35.859  -->  00:01:41.828
Series, DataFrame and
29

29

00:01:41.828  -->  00:01:48.096
then import numpy as np,
30

30

00:01:48.096  -->  00:01:53.770
go ahead and run that.
31

31

00:01:54.810  -->  00:01:57.970
Next we'll import the things we need for
visualization.
32

32

00:01:57.970  -->  00:02:04.160
So I'll import matplotlib.pyplot as plt.
33

33

00:02:04.160  -->  00:02:09.430
Then I'll import seaborn as sns.
34

34

00:02:10.890  -->  00:02:12.870
Then again,
just like we did in the last project,
35

35

00:02:12.870  -->  00:02:17.840
I'm gonna set the style to white grid,
just so
36

36

00:02:17.840  -->  00:02:24.840
we see a nice white grid background
on all our visualizations.
37

37

00:02:26.020  -->  00:02:30.980
Finally, remember to do
a matplotlib inline so
38

38

00:02:30.980  -->  00:02:36.446
you can see the plots inline
in your IPython notebook.
39

39

00:02:36.446  -->  00:02:39.100
For Python 2 users,
we're gonna wanna import from the future.
40

40

00:02:41.740  -->  00:02:43.470
Import division.
41

41

00:02:43.470  -->  00:02:46.980
If you're using Python 3,
you don't have to worry about this,
42

42

00:02:46.980  -->  00:02:49.170
this is just taking care
of floating point numbers.
43

43

00:02:50.260  -->  00:02:54.880
So we're also gonna be using two different
modules that we've kind of briefly gone
44

44

00:02:54.880  -->  00:02:58.644
over one of them before, and
the other one might be completely new.
45

45

00:02:58.644  -->  00:03:00.409
So let's hop over back
to the IPython Notebook.
46

46

00:03:03.032  -->  00:03:05.911
So just some information
on the data itself.
47

47

00:03:05.911  -->  00:03:10.590
The data for the polls, we obtained
it from the Huff Post Pollster.
48

48

00:03:10.590  -->  00:03:12.120
So we can go ahead and
check out their website,
49

49

00:03:12.120  -->  00:03:14.195
there's a link in the IPython Notebook.
50

50

00:03:14.195  -->  00:03:16.320
It's actually a pretty cool website.
51

51

00:03:16.320  -->  00:03:20.628
There's some awesome data visualization
and data sets to play with, here.
52

52

00:03:20.628  -->  00:03:22.993
So, I encourage you to go ahead and
check out their websites and
53

53

00:03:22.993  -->  00:03:24.343
the different data sets they have.
54

54

00:03:27.455  -->  00:03:29.721
So, for our particular data set,
55

55

00:03:29.721  -->  00:03:34.583
we're gonna be using the request module
to import some data from the web.
56

56

00:03:34.583  -->  00:03:40.146
If you're interested in requests and
how it works, you can go ahead and
57

57

00:03:40.146  -->  00:03:46.174
check out the documentation, there's
a link here in the IPython notebook,
58

58

00:03:46.174  -->  00:03:50.811
but basically what request does
is just a really nice API for
59

59

00:03:50.811  -->  00:03:53.808
gathering information from the web.
60

60

00:03:53.808  -->  00:03:56.308
And then the other module we'll be using,
61

61

00:03:56.308  -->  00:04:01.102
which you've actually seen once before
in this course, is the StringIO module,
62

62

00:04:01.102  -->  00:04:05.894
and the StringIO module is gonna allow us
to basically give us a convenient means of
63

63

00:04:05.894  -->  00:04:09.030
working with the text and
memory using the files API.
64

64

00:04:09.030  -->  00:04:14.010
It's gonna help us read the file
into a Pandas data frame.
65

65

00:04:14.010  -->  00:04:17.710
If you're interested more in the StringIO
and how it works, you can click this link
66

66

00:04:17.710  -->  00:04:23.430
here and this link will take you
to this python module of the week
67

67

00:04:23.430  -->  00:04:28.740
website where it's, basically what this
guy does, it's a pretty cool website.
68

68

00:04:28.740  -->  00:04:32.720
I encourage you to check out the website
in general, but he goes over just a bunch
69

69

00:04:32.720  -->  00:04:37.880
of different modules in Python and
then breaks them down and explains them.
70

70

00:04:37.880  -->  00:04:41.240
So I encourage you to check out his
explanation of StringIO in case you're
71

71

00:04:41.240  -->  00:04:42.170
interested further into it.
72

72

00:04:42.170  -->  00:04:46.390
And with that being said,
let's go ahead and
73

73

00:04:46.390  -->  00:04:49.380
hop back over to the Live code section.
74

74

00:04:51.420  -->  00:04:55.865
So in order to grab web data,
75

75

00:04:55.865  -->  00:05:00.497
we will import requests, and
76

76

00:05:00.497  -->  00:05:06.257
then we're gonna import StringIO.
77

77

00:05:06.257  -->  00:05:11.027
And what we'll actually have to do is
say from StringIO import StringIO, so
78

78

00:05:11.027  -->  00:05:12.527
we can use that method.
79

79

00:05:15.499  -->  00:05:16.126
Great.
80

80

00:05:18.378  -->  00:05:20.820
So, what else are we gonna do?
81

81

00:05:20.820  -->  00:05:27.390
We are going to grab the data from
the URL, so let's hop back over here.
82

82

00:05:28.580  -->  00:05:31.110
So, this is the URL link for
the poll data.
83

83

00:05:31.110  -->  00:05:32.790
I'm just gonna go ahead and copy paste it.
84

84

00:05:32.790  -->  00:05:35.940
I encourage you to do the same so
I don't have to type this whole thing out.
85

85

00:05:35.940  -->  00:05:42.685
But I'm gonna set an object called URL
equal to that website in a string.
86

86

00:05:42.685  -->  00:05:47.793
So it's just
elections.huffingtonpost.com/pollster/201-
87

87

00:05:47.793  -->  00:05:51.329
2-general-election-romney-vs-obama.
88

88

00:05:51.329  -->  00:05:52.360
So that's the URL.
89

89

00:05:54.330  -->  00:05:58.000
And then what I'm gonna do is use requests
to get the information in text form.
90

90

00:05:59.030  -->  00:06:07.240
So I'll label source =
requests.get(url) and
91

91

00:06:07.240  -->  00:06:12.840
then I'm gonna call
the text method on that.
92

92

00:06:12.840  -->  00:06:18.104
So what this is doing is I'm using
requests to get the information off
93

93

00:06:18.104  -->  00:06:24.477
this URL, and I'm informing it to read it
as a text file, since it's a .csv file.
94

94

00:06:24.477  -->  00:06:26.196
And then I'll set that
as the object source.
95

95

00:06:30.584  -->  00:06:33.770
And then I'll poll_data object =
96

96

00:06:33.770  -->  00:06:41.288
StringIO A function on to that source.
97

97

00:06:41.288  -->  00:06:46.628
So this is gonna help us avoid
a StringIO error with Pandas.
98

98

00:06:46.628  -->  00:06:48.382
So once you've done all that,
99

99

00:06:48.382  -->  00:06:52.294
if you have a slow internet connection
it might take a little bit, but
100

100

00:06:52.294  -->  00:06:57.300
the file's not super large, so Python just
straight up grabbing it from the Internet.
101

101

00:06:58.770  -->  00:07:01.800
Now that we have our data, we can go
ahead and set it as a data frame.
102

102

00:07:02.840  -->  00:07:04.070
So I'm gonna say pull_df.
103

103

00:07:04.070  -->  00:07:06.940
That's gonna be my data frame for this.
104

104

00:07:08.120  -->  00:07:11.510
And I'll say, pd.read_csv,
105

105

00:07:11.510  -->  00:07:16.810
since it's a CSV file, and
I'll read that poll data object.
106

106

00:07:19.600  -->  00:07:22.140
And then once I've done that,
let's go ahead and
107

107

00:07:22.140  -->  00:07:24.470
take a quick glimpse at what
this data frame looks like.
108

108

00:07:25.980  -->  00:07:29.410
So first thing I'm gonna do is
just call the info method on it.
109

109

00:07:29.410  -->  00:07:30.840
So I can get some basic information.
110

110

00:07:33.010  -->  00:07:37.330
Looks like it's a total 14 columns,
589 rows for most of them.
111

111

00:07:38.440  -->  00:07:40.980
And if we wanna actually
see what it looks like,
112

112

00:07:40.980  -->  00:07:46.380
we can say poll_df.head to
preview the data frame.
113

113

00:07:47.530  -->  00:07:52.010
So, first column we get the pollster,
so who was doing the polls, the start,
114

114

00:07:52.010  -->  00:07:55.130
the end dates of the polls,
second and third column.
115

115

00:07:55.130  -->  00:08:01.320
The entry dates, then the number of
observations, who the population was,
116

116

00:08:01.320  -->  00:08:06.122
how they did the poll itself,
either for phone,
117

117

00:08:06.122  -->  00:08:11.120
Internet, etcetera, and then if we
scroll along to the right a bit,
118

118

00:08:13.040  -->  00:08:17.700
we can see what percentage of people
wanted to vote for Obama, what percentage
119

119

00:08:17.700  -->  00:08:20.230
of people wanted to vote for Romney and
then who was still undecided.
120

120

00:08:21.750  -->  00:08:25.000
And there's a URL for either the source or
121

121

00:08:25.000  -->  00:08:29.720
the pollster themselves in case you
want to check out that on your own.
122

122

00:08:31.470  -->  00:08:32.680
Great.
123

123

00:08:32.680  -->  00:08:35.380
So let's continue on now that
we've see the data frame.
124

124

00:08:36.420  -->  00:08:43.020
Let's just get a quick visualization
overview of the affiliation for the polls.
125

125

00:08:43.020  -->  00:08:47.780
If you notice, there was a,
let me scroll to the right.
126

126

00:08:47.780  -->  00:08:52.810
If you scroll all the way to the right,
you'll see if
127

127

00:08:52.810  -->  00:08:58.630
the polls are partisan and if the pulls
themselves have an affiliation.
128

128

00:08:58.630  -->  00:09:03.160
So for instance, this poll had
a Republican affiliation to it.
129

129

00:09:04.360  -->  00:09:08.399
So we can do a quick
visualization using Seaborn using
130

130

00:09:08.399  -->  00:09:11.820
sns.factorplot as we've done in the past.
131

131

00:09:12.970  -->  00:09:17.460
In this case,
I will call that affiliation Column.
132

132

00:09:18.930  -->  00:09:21.420
And then remember have to
set what my data's equal to.
133

133

00:09:21.420  -->  00:09:26.320
I'll just set the equal to
the poll_df data frame.
134

134

00:09:28.040  -->  00:09:30.930
So, let's go ahead and
see what's going on here in the polls.
135

135

00:09:30.930  -->  00:09:36.790
It looks like most of the polls have
no affiliation which is good and
136

136

00:09:38.360  -->  00:09:43.930
there is quite a large amount of polls
that have a Democrat affiliation,
137

137

00:09:43.930  -->  00:09:47.170
so it's gonna be important to keep that in
mind as we look at the aggregate of data
138

138

00:09:47.170  -->  00:09:50.210
of all of these polls, because
there's quite a bit more polls that
139

139

00:09:50.210  -->  00:09:52.680
are affiliated with the Democrats
than with the Republicans.
140

140

00:09:54.460  -->  00:09:58.200
But overall there's definitely a strong
neutrality to these polls, but
141

141

00:09:58.200  -->  00:10:00.840
we're still leaning towards Democrats
in the aggregation of all of them.
142

142

00:10:00.840  -->  00:10:02.480
It's good to keep that in mind.
143

143

00:10:03.640  -->  00:10:09.420
Let's go ahead and continue some
visualization insights, by saying
144

144

00:10:10.670  -->  00:10:19.630
we'll call a factor plot
on the affiliation again.
145

145

00:10:19.630  -->  00:10:24.360
Set my data equal poll_df and
146

146

00:10:24.360  -->  00:10:28.300
in this case, I'm gonna set my hue
equal to the population column.
147

147

00:10:30.020  -->  00:10:33.661
Now what the population
column was in my data frame,
148

148

00:10:33.661  -->  00:10:39.209
it separated the populations into four
categories, adults, likely voters,
149

149

00:10:39.209  -->  00:10:43.868
likely voters who were Republican,
and then registered voters.
150

150

00:10:43.868  -->  00:10:51.526
So if I run this, I can now see between
the affiliations who were likely voters,
151

151

00:10:51.526  -->  00:10:56.805
who were registered voters, and who
were likely voters that were Republican,
152

152

00:10:56.805  -->  00:11:02.280
as well as just people labeled adults who
didn't fit the other three categories.
153

153

00:11:02.280  -->  00:11:07.153
So you can go ahead and see that there's
a strong showing of likely voters and
154

154

00:11:07.153  -->  00:11:09.050
registered voters.
155

155

00:11:09.050  -->  00:11:13.250
So the poll data should hopefully be a
good reflection on the populations polled.
156

156

00:11:14.660  -->  00:11:19.950
And let's go ahead and get back to
a quick view of the DataFrame, so
157

157

00:11:19.950  -->  00:11:22.390
we can remember what it looks like and
where we are.
158

158

00:11:25.710  -->  00:11:26.590
Okay.
159

159

00:11:26.590  -->  00:11:27.090
Great.
160

160

00:11:29.680  -->  00:11:33.570
So what we can do is just take
a look at the averages for
161

161

00:11:33.570  -->  00:11:37.670
Obama, Romney, and
the polled people who remained undecided.
162

162

00:11:39.260  -->  00:11:42.620
And the way we can do that is
through a bit of a process,
163

163

00:11:42.620  -->  00:11:44.505
so I'll walk you through it.
164

164

00:11:44.505  -->  00:11:48.721
First we're gonna get the average, so
165

165

00:11:48.721  -->  00:11:56.787
I'm gonna say an object called avg is
equal to pd.DataFrame and then I will
166

166

00:12:00.665  -->  00:12:06.400
pass the mean through that and
I'll break that one I'm doing in a second.
167

167

00:12:06.400  -->  00:12:10.650
Then I'll take that average object and
168

168

00:12:10.650  -->  00:12:15.038
I will drop the number of observations.
169

169

00:12:18.729  -->  00:12:22.468
And set that axis equal to zero.
170

170

00:12:22.468  -->  00:12:25.625
And I'll set in place equal to true.
171

171

00:12:25.625  -->  00:12:27.430
So it affects the actual data frame.
172

172

00:12:31.710  -->  00:12:33.430
That u should not have been capitalized.
173

173

00:12:33.430  -->  00:12:34.420
I apologize.
174

174

00:12:34.420  -->  00:12:35.210
Okay.
175

175

00:12:35.210  -->  00:12:36.940
So what did I do here?
176

176

00:12:36.940  -->  00:12:40.620
Basically, I made an object
called average and
177

177

00:12:40.620  -->  00:12:46.181
I did that by getting the current
data frame we're using, the poll_df,
178

178

00:12:46.181  -->  00:12:51.350
taking the average of the all
values there, and then, I just
179

179

00:12:51.350  -->  00:12:56.540
wanted to drop the number of observations
column, and I set inplace equal to True.
180

180

00:12:58.300  -->  00:12:59.400
Great.
181

181

00:12:59.400  -->  00:13:02.220
So if you're wondering why I did that,
I'll show you.
182

182

00:13:03.220  -->  00:13:07.660
So what I'll do is I'll run
that with the second command.
183

183

00:13:10.040  -->  00:13:10.600
Commented out.
184

184

00:13:12.260  -->  00:13:15.280
Show you what the average would look like.
185

185

00:13:15.280  -->  00:13:19.160
If you noticed here, this is what it
looks like before I drop the number of
186

186

00:13:19.160  -->  00:13:24.620
observations, that DataFrame,
what the original DataFrame means.
187

187

00:13:24.620  -->  00:13:25.900
But if you think about it,
188

188

00:13:25.900  -->  00:13:28.870
I don't really care about
the average number of observations.
189

189

00:13:28.870  -->  00:13:33.490
I just care about the average percentage
values between Obama, Romney and
190

190

00:13:33.490  -->  00:13:34.550
Undecided.
191

191

00:13:34.550  -->  00:13:41.220
So that's why I dropped the number of
observations off that averaged data frame.
192

192

00:13:41.220  -->  00:13:42.650
Great.
193

193

00:13:42.650  -->  00:13:44.850
So now that we have our averages,
let's go ahead and
194

194

00:13:44.850  -->  00:13:47.380
get our standard deviations
using a very similar method.
195

195

00:13:48.920  -->  00:13:54.709
I'll set std = pd.Data DataFrame
196

196

00:13:54.709  -->  00:14:00.430
(poll_df.std()), and
197

197

00:14:00.430  -->  00:14:03.070
then just like in the last data frame
198

198

00:14:04.440  -->  00:14:08.800
I'm gonna drop the number
number of observations row.
199

199

00:14:10.670  -->  00:14:17.840
So it's a row that's why I'm setting
my access equal to zero, and
200

200

00:14:17.840  -->  00:14:20.480
then I will set in place equal to True.
201

201

00:14:24.520  -->  00:14:29.700
And again I have misspelled
number of observations, plural.
202

202

00:14:29.700  -->  00:14:30.364
Okay.
203

203

00:14:30.364  -->  00:14:33.661
And then let's go ahead and
see what std looks like.
204

204

00:14:37.748  -->  00:14:40.511
And there we have the standard
deviations for the averages.
205

205

00:14:40.511  -->  00:14:42.879
[INAUDIBLE] Great.
206

206

00:14:42.879  -->  00:14:46.020
So we can now plot using
Panda's built in plot.
207

207

00:14:47.200  -->  00:14:52.020
And the way I can do that
is by saying my average.
208

208

00:14:52.020  -->  00:14:54.960
I'm gonna plot my average data frame.
209

209

00:14:56.600  -->  00:14:59.490
And I can set my y error to be equal to
210

210

00:14:59.490  -->  00:15:02.590
the standard deviations
dataframe that we just made.
211

211

00:15:02.590  -->  00:15:05.500
And I can do that by saying yerr, so
212

212

00:15:05.500  -->  00:15:10.570
y error, is what it stands for,
equal to std, that data frame we made.
213

213

00:15:12.300  -->  00:15:18.574
This is gonna be a bar graph, or bar plot.
214

214

00:15:18.574  -->  00:15:28.071
And then what we're gonna do is
set the legend equal to false.
215

215

00:15:34.108  -->  00:15:35.106
And there you have it.
216

216

00:15:35.106  -->  00:15:36.105
So what is this?
217

217

00:15:36.105  -->  00:15:44.420
This the average sentiment
of all the polls.
218

218

00:15:44.420  -->  00:15:50.240
So on average Obama had somewhere
around looks like 47-ish.
219

219

00:15:50.240  -->  00:15:51.870
Romney had a little less.
220

220

00:15:51.870  -->  00:15:54.154
They're both within their standard
deviations of each other, so
221

221

00:15:54.154  -->  00:15:55.181
they're both really close.
222

222

00:15:55.181  -->  00:15:59.507
So it looks like the undecided here could
make a big difference as far as this poll
223

223

00:15:59.507  -->  00:16:00.614
data is showing us.
224

224

00:16:04.027  -->  00:16:08.697
So, since we're kinda interested in
seeing how close these pulls seem to be,
225

225

00:16:08.697  -->  00:16:11.829
let's go ahead and
consider the undecided factor.
226

226

00:16:11.829  -->  00:16:14.150
So let's take a look at those numbers.
227

227

00:16:14.150  -->  00:16:20.115
And the way I'm gonna do that is by making
228

228

00:16:20.115  -->  00:16:25.384
a new dataframe called pole_avg.
229

229

00:16:25.384  -->  00:16:31.165
And I will construct it by concatenating
the two data frames we just made.
230

230

00:16:34.741  -->  00:16:36.297
Along their column axis.
231

231

00:16:40.708  -->  00:16:43.617
Let's go ahead and
see what that looked like.
232

232

00:16:43.617  -->  00:16:45.823
So hopefully this is what you expected.
233

233

00:16:45.823  -->  00:16:48.052
Basically, first column is the averages,
234

234

00:16:48.052  -->  00:16:51.010
the second column is
the standard deviations.
235

235

00:16:51.010  -->  00:16:55.088
Let's go ahead and name that, so
I'll do it in that same cell.
236

236

00:16:55.088  -->  00:17:00.336
I'll say columns is equal to average.
237

237

00:17:02.774  -->  00:17:04.631
Second column, standard deviation.
238

238

00:17:07.208  -->  00:17:11.899
And now, if we look at that same
data frame, it's labeled for us.
239

239

00:17:11.899  -->  00:17:13.687
Perfect.
240

240

00:17:13.687  -->  00:17:17.169
So it looks like the poll indicates
it's a fairly close race, but
241

241

00:17:17.169  -->  00:17:19.950
what about the undecided voters?
242

242

00:17:19.950  -->  00:17:22.800
Most of them are likely to vote for
one of the candidates.
243

243

00:17:22.800  -->  00:17:27.840
It's really unlikely that they don't
vote at all if they're that undecided.
244

244

00:17:27.840  -->  00:17:32.211
So, if we assume the split occurred
evenly between the two candidates,
245

245

00:17:32.211  -->  00:17:37.101
the observed difference should be an
unbiased estimate of the real difference.
246

246

00:17:37.101  -->  00:17:40.166
So, let's go ahead and try that out.
247

247

00:17:44.066  -->  00:17:47.038
And we'll do that in the next video.
248

248

00:17:47.038  -->  00:17:48.284
So I'll see you there.
249

249

00:17:48.284  -->  00:17:53.282
Go ahead and see if you can think about
how you could take that into account, and
250

250

00:17:53.282  -->  00:17:55.575
then we'll do it in the next video.
251

251

00:17:55.575  -->  00:17:57.739
All right, thanks for watching and
I'll see you in the next video.
