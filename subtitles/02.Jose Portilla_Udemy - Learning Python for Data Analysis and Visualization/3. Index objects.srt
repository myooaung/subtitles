1
1

00:00:01,183  -->  00:00:02,297
Hey, guys.
2

2

00:00:02,297  -->  00:00:05,588
Welcome to Lecture 16.
3

3

00:00:05,588  -->  00:00:09,139
This lecture is gonna be on index objects,
4

4

00:00:09,139  -->  00:00:14,182
which we've been learning about
in series and dataframes.
5

5

00:00:14,182  -->  00:00:19,221
So let's start off, as always
just importing the regular stuff.
6

6

00:00:19,221  -->  00:00:26,261
You can go ahead and just copy and
paste this if you want to.
7

7

00:00:26,261  -->  00:00:32,968
I'm gonna import Series and DataFrame and
8

8

00:00:32,968  -->  00:00:38,187
then import Import pandas as pd.
9

9

00:00:38,187  -->  00:00:45,420
So let's just go over quickly
about series and index objects.
10

10

00:00:45,420  -->  00:00:48,641
So we'll create a series,
we'll call it my_ser.
11

11

00:00:51,221  -->  00:00:56,800
And we'll create this series by,
let's just make it a 1,
12

12

00:00:56,800  -->  00:01:01,837
2, 3, 4 array or I should say,
list in this case.
13

13

00:01:01,837  -->  00:01:05,564
We'll pass a list and
14

14

00:01:05,564  -->  00:01:11,569
then we'll define the index as A,
15

15

00:01:11,569  -->  00:01:17,365
B, C and D and then we can just take
16

16

00:01:17,365  -->  00:01:23,384
a quick look at what that appears.
17

17

00:01:23,384  -->  00:01:26,775
So now your index is A, B, C, D,
18

18

00:01:26,775  -->  00:01:32,233
since you specifically set
that through that list and
19

19

00:01:32,233  -->  00:01:35,645
your series is 1, 2, 3, 4.
20

20

00:01:35,645  -->  00:01:39,546
Let's say, I wanted to get the index.
21

21

00:01:39,546  -->  00:01:43,254
I can set that as an object,
I can say my_index.
22

22

00:01:43,254  -->  00:01:47,385
And you might remember this
from previous lectures,
23

23

00:01:47,385  -->  00:01:50,883
you can just get the index
by saying .index.
24

24

00:01:50,883  -->  00:01:56,379
Let's go ahead and show what we set.
25

25

00:01:56,379  -->  00:01:59,843
So now, we have our index unit.
26

26

00:01:59,843  -->  00:02:03,054
Just don't worry about this u.
27

27

00:02:03,054  -->  00:02:07,716
It won't actually be part of the index
it's just indicating it is the index.
28

28

00:02:07,716  -->  00:02:13,710
So we have A, B, C, D, that's object type.
29

29

00:02:13,710  -->  00:02:18,265
We can grab index values
30

30

00:02:18,265  -->  00:02:22,599
just by calling them.
31

31

00:02:22,599  -->  00:02:28,471
So lets say, you wanted to grab
that number two index value.
32

32

00:02:28,471  -->  00:02:31,720
Think about what you
would expect to pop up.
33

33

00:02:32,740  -->  00:02:37,178
So it's C, if you were thinking
B was going to pop-up,
34

34

00:02:37,178  -->  00:02:40,396
remember that the index starts at zero.
35

35

00:02:40,396  -->  00:02:42,854
So it would be zero, one, two.
36

36

00:02:45,506  -->  00:02:51,337
So out of that list,
the third object appears as we called two.
37

37

00:02:51,337  -->  00:02:53,455
Zero, one, two, so
that should be letter C.
38

38

00:02:55,455  -->  00:03:01,319
Let's say that we wanted everything
passed two, then you might remember,
39

39

00:03:01,319  -->  00:03:07,012
just from knowing Python that you can
use a colon to indicate everything.
40

40

00:03:07,012  -->  00:03:12,526
So this should get us everything
past the second index marker and
41

41

00:03:12,526  -->  00:03:15,393
it does, it gives us C and then D.
42

42

00:03:18,217  -->  00:03:22,433
So those are basically the main
ways to mess around with index.
43

43

00:03:22,433  -->  00:03:26,459
Got indexed to call it off the series and
44

44

00:03:26,459  -->  00:03:31,095
then you can input
specific values you want,
45

45

00:03:31,095  -->  00:03:36,594
just by calling them through
the arrays index value.
46

46

00:03:36,594  -->  00:03:42,964
What happens if you try to change
an index value is a good thing to test?
47

47

00:03:42,964  -->  00:03:47,301
So check my index,
my very first one, zero.
48

48

00:03:47,301  -->  00:03:51,517
We should get an A out and we do.
49

49

00:03:51,517  -->  00:03:56,124
If we wanted to change this, let's say,
50

50

00:03:56,124  -->  00:04:02,062
we try to do 0 and let's say,
we try to change it to Z.
51

51

00:04:02,062  -->  00:04:04,713
What would happen?
52

52

00:04:04,713  -->  00:04:07,050
Well, you get an error, which is good.
53

53

00:04:07,050  -->  00:04:12,939
So indexes don't support mutable
operations and what that means is that
54

54

00:04:12,939  -->  00:04:17,971
indexes are immutable, so
you can't change them like this.
55

55

00:04:17,971  -->  00:04:21,111
You'd have to pass an entirely new index,
which is good,
56

56

00:04:21,111  -->  00:04:24,137
cuz that makes the DataFrames or
series really stable.
57

57

00:04:24,137  -->  00:04:29,900
You can't just be change the index
values willy nilly in a sense.
58

58

00:04:31,400  -->  00:04:35,104
If you want it to re-index,
we can do that.
59

59

00:04:35,104  -->  00:04:39,574
So that will be lecture 17 on re-indexing.
60

60

00:04:39,574  -->  00:04:43,773
Take a look and just make sure you
understood everything in this lecture,
61

61

00:04:43,773  -->  00:04:47,508
we'll be doing tons of indexing and
re-indexing in the course.
62

62

00:04:47,508  -->  00:04:53,095
This is just a brief intro on it,
so you'll see this again and again.
63

63

00:04:53,095  -->  00:04:56,712
I'll see you at lecture 17
to learn about re-indexing.
