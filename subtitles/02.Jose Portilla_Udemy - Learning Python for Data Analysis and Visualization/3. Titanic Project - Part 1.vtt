WEBVTT
1
1

00:00:01.610  -->  00:00:02.540
Hey everybody.
2

2

00:00:02.540  -->  00:00:05.790
Welcome to your first data project.
3

3

00:00:05.790  -->  00:00:10.400
In this data project, we're gonna be
looking at the Kaggle Titanic Challenge.
4

4

00:00:10.400  -->  00:00:13.270
Before you see this lecture, and
see this video, go ahead and
5

5

00:00:13.270  -->  00:00:18.195
make sure you've seen the intro to data
projects, have set up your GitHub account,
6

6

00:00:18.195  -->  00:00:19.945
and have also set up a Kaggle account.
7

7

00:00:21.195  -->  00:00:22.450
So, right now,
8

8

00:00:22.450  -->  00:00:28.315
what we're looking at is just
the nbviewer link to the Python Notebook.
9

9

00:00:28.315  -->  00:00:30.865
So, if we look at this
IPython Notebook and
10

10

00:00:30.865  -->  00:00:34.830
just scroll down, we're gonna be
doing a bunch of data analysis.
11

11

00:00:34.830  -->  00:00:38.840
Might have to separate this
whole project into a few videos
12

12

00:00:38.840  -->  00:00:40.130
depending on how long it takes.
13

13

00:00:41.990  -->  00:00:45.650
So what you're gonna do is go ahead and
go to Kaggle Titanic Challenge.
14

14

00:00:45.650  -->  00:00:47.220
You can just go ahead and
Google search that.
15

15

00:00:47.220  -->  00:00:49.270
You should be able to reach this page.
16

16

00:00:50.510  -->  00:00:53.840
And what we're gonna be doing is
messing around with a data set
17

17

00:00:53.840  -->  00:00:57.930
on the Titanic survival rates for
different passengers.
18

18

00:00:57.930  -->  00:01:00.520
So, once you get to this page,
you can just go ahead and click here and
19

19

00:01:00.520  -->  00:01:01.040
get the data.
20

20

00:01:01.040  -->  00:01:03.260
That will take you to this page,
21

21

00:01:03.260  -->  00:01:06.780
and you can see here there's
a file name called train.
22

22

00:01:06.780  -->  00:01:07.790
Go ahead and download that.
23

23

00:01:07.790  -->  00:01:11.310
It's a CSV file or
a comma separated variables.
24

24

00:01:11.310  -->  00:01:15.679
So you go ahead and download that,
save it to wherever your
25

25

00:01:15.679  -->  00:01:20.060
IPython Notebooks are saved,
and then you can open it up.
26

26

00:01:20.060  -->  00:01:22.413
So, let's go ahead and do this.
27

27

00:01:22.413  -->  00:01:24.232
So, you can go ahead and
28

28

00:01:24.232  -->  00:01:28.720
either walk through the IPython Notebook
that's already set up and commented or
29

29

00:01:28.720  -->  00:01:32.270
just follow along with this video as
we go ahead and start this project.
30

30

00:01:32.270  -->  00:01:33.108
All right, cool.
31

31

00:01:35.546  -->  00:01:40.759
So what I'm gonna do is
import pandas pd as always,
32

32

00:01:40.759  -->  00:01:46.000
and then from pandas import Series and
DataFrame.
33

33

00:01:46.000  -->  00:01:47.740
Let's go ahead and run that.
34

34

00:01:47.740  -->  00:01:48.240
Okay.
35

35

00:01:49.420  -->  00:01:53.910
Let's go ahead and set up our panda data
frame, or pandas data frame, excuse me.
36

36

00:01:53.910  -->  00:02:00.227
And I'll set that up as titanic_df = pd.
37

37

00:02:00.227  -->  00:02:03.967
And you should remember from
your lectures, read_csv.
38

38

00:02:03.967  -->  00:02:11.060
And that file name was train.csv.
39

39

00:02:11.060  -->  00:02:12.686
Shift to run that.
40

40

00:02:12.686  -->  00:02:13.566
All right, we got it.
41

41

00:02:13.566  -->  00:02:16.575
And let's go ahead and
see a preview of the data.
42

42

00:02:16.575  -->  00:02:19.090
Titanic_df.
43

43

00:02:19.090  -->  00:02:22.960
Remember to see previews,
you can just see the head.
44

44

00:02:24.710  -->  00:02:27.390
So let's take a look at each column.
45

45

00:02:27.390  -->  00:02:30.060
So the first column is just
your passenger ID number.
46

46

00:02:30.060  -->  00:02:33.200
It's basically almost like
an index starting at one.
47

47

00:02:33.200  -->  00:02:35.870
But don't worry, panda has already
indexed it for you starting at zero.
48

48

00:02:37.320  -->  00:02:40.760
Next column is survived, so
this is just zero and one.
49

49

00:02:40.760  -->  00:02:44.450
So, zero means false,
that passenger did not survive.
50

50

00:02:44.450  -->  00:02:46.405
One means true,
that passenger did survive.
51

51

00:02:46.405  -->  00:02:50.900
Pclass, that just means the class
that the passenger was in,
52

52

00:02:50.900  -->  00:02:52.860
so first, second, or third class.
53

53

00:02:54.420  -->  00:02:55.810
Then we have the name of the passenger.
54

54

00:02:55.810  -->  00:02:57.250
We won't actually be using that,
55

55

00:02:57.250  -->  00:03:01.330
but there's some pretty
interesting names in here.
56

56

00:03:01.330  -->  00:03:04.800
Next is the sex of the passenger,
so their gender, male or female.
57

57

00:03:04.800  -->  00:03:09.945
Then the age of the passenger,
and then there's SibSp.
58

58

00:03:11.010  -->  00:03:15.990
What that stands for is siblings,
did they have siblings on board?
59

59

00:03:15.990  -->  00:03:17.312
And we'll be looking into that later.
60

60

00:03:17.312  -->  00:03:19.765
So, one means true,
they did have siblings on board.
61

61

00:03:19.765  -->  00:03:22.100
Zero means false,
they had no siblings on board.
62

62

00:03:23.480  -->  00:03:29.240
Par, or Parch, or Par-c-h,
that stands for parents or children,
63

63

00:03:29.240  -->  00:03:32.802
so what that means is if they, they may
not have had any siblings on board,
64

64

00:03:32.802  -->  00:03:35.890
but did they have a parent or
a child on board?
65

65

00:03:35.890  -->  00:03:39.870
And it looks these first five didn't
have any parents or children onboard.
66

66

00:03:40.970  -->  00:03:45.160
And we'll be looking at that,
we'll be analyzing, let's say,
67

67

00:03:45.160  -->  00:03:48.290
if they were alone on the ship or
if they had family on the ship.
68

68

00:03:49.290  -->  00:03:53.890
Then there's the ticket, and then
there's the fare, what they paid for it.
69

69

00:03:55.690  -->  00:04:00.440
There's the cabin, and a lot of
the cabin information is missing, so
70

70

00:04:00.440  -->  00:04:06.870
I'll have to drop some NA variables
there as we'll see, future.
71

71

00:04:06.870  -->  00:04:10.845
And, if you look at this first letter
in the cabins that are filled out,
72

72

00:04:10.845  -->  00:04:14.430
that stands for the deck,
so there's ABCDEFG decks.
73

73

00:04:15.600  -->  00:04:16.390
And then embarked.
74

74

00:04:17.770  -->  00:04:21.630
S, C and Q will stand for cities, and
we'll look at that in the future later on.
75

75

00:04:23.440  -->  00:04:26.510
But other than that, let's go ahead and
76

76

00:04:26.510  -->  00:04:30.360
see another way of quickly
grabbing the information.
77

77

00:04:31.380  -->  00:04:37.204
And if you remember the way we
can do that is titanic_df.info.
78

78

00:04:40.204  -->  00:04:43.054
So if we take a quick
look at this info data,
79

79

00:04:43.054  -->  00:04:46.930
it looks like there's 891 passengers.
80

80

00:04:46.930  -->  00:04:52.610
Ages, we have 714 non-null objects there.
81

81

00:04:52.610  -->  00:04:54.420
Where we're really
missing some information,
82

82

00:04:54.420  -->  00:04:56.730
if you notice here, is in cabin.
83

83

00:04:56.730  -->  00:05:01.740
You only have 204 non-null objects there
84

84

00:05:01.740  -->  00:05:04.030
versus everything else is
much closer to the 891.
85

85

00:05:04.030  -->  00:05:08.220
So that's something to
keep in mind later on.
86

86

00:05:08.220  -->  00:05:12.735
All right, so I'm gonna switch
back here to the IPython Notebook
87

87

00:05:12.735  -->  00:05:17.180
that's already been filled out
just to look at some questions.
88

88

00:05:17.180  -->  00:05:21.990
So all good data analysis projects begin
with trying to answer questions, really
89

89

00:05:21.990  -->  00:05:26.000
trying to get to the point where, what
do I want to achieve from this data set?
90

90

00:05:27.010  -->  00:05:29.960
So, now that we know the columns and
their categories,
91

91

00:05:29.960  -->  00:05:33.640
we're gonna think of some questions
to ask, and how we can answer them.
92

92

00:05:33.640  -->  00:05:36.340
So, first off some basic
questions we thought of, or
93

93

00:05:36.340  -->  00:05:40.325
I thought of, was,
who were the passengers on the Titanic?
94

94

00:05:40.325  -->  00:05:43.920
So, what were their ages,
their genders, their classes?
95

95

00:05:43.920  -->  00:05:44.930
That kind of distribution.
96

96

00:05:44.930  -->  00:05:47.510
It would be interesting to look at that.
97

97

00:05:47.510  -->  00:05:51.240
What deck were the passengers on, and
how does that relate to their class?
98

98

00:05:51.240  -->  00:05:56.550
So are third class people on a certain
deck, on a higher deck, lower deck?
99

99

00:05:56.550  -->  00:06:00.510
Third question that we're gonna look at
is, where did the passengers come from?
100

100

00:06:00.510  -->  00:06:01.750
So what cities did they come from?
101

101

00:06:03.010  -->  00:06:06.980
And fourth question, was who alone,
and who was with family?
102

102

00:06:06.980  -->  00:06:11.000
And we'll be manipulating the data
to get some nice columns for that.
103

103

00:06:13.500  -->  00:06:17.890
Next, we're gonna dig a little
deeper with the last question, and
104

104

00:06:17.890  -->  00:06:19.300
this will have multiple factors to it.
105

105

00:06:19.300  -->  00:06:24.120
So, the last question is,
what factors helped
106

106

00:06:24.120  -->  00:06:28.708
someone survive the sinking
of the Titanic?
107

107

00:06:28.708  -->  00:06:29.237
Okay.
108

108

00:06:29.237  -->  00:06:31.881
So let's go back to our data.
109

109

00:06:31.881  -->  00:06:32.793
All right.
110

110

00:06:32.793  -->  00:06:37.370
And, so
let's start with the first question.
111

111

00:06:37.370  -->  00:06:39.042
Who were the passengers on the Titanic?
112

112

00:06:39.042  -->  00:06:43.820
So, let's go ahead and
import some stuff we'll need.
113

113

00:06:43.820  -->  00:06:48.120
So we're gonna import numpy
since we'll need that as np.
114

114

00:06:50.970  -->  00:06:58.377
We'll import, let me just do this all
in one cell, import matplotlib.pyplot.
115

115

00:07:02.016  -->  00:07:03.877
As plt.
116

116

00:07:03.877  -->  00:07:05.347
Import seaborn, and
117

117

00:07:05.347  -->  00:07:12.070
you're gonna see some really awesome stuff
that seaborn can do in this data project.
118

118

00:07:12.070  -->  00:07:18.300
And then lastly matplotlib inline so
we can see everything in the notebook.
119

119

00:07:20.570  -->  00:07:22.210
Let me just make sure
everything's zoomed in.
120

120

00:07:22.210  -->  00:07:26.750
I'm gonna zoom in a little more just so
it's easier for you to read.
121

121

00:07:26.750  -->  00:07:27.670
So 150 here.
Okay, great.
122

122

00:07:31.510  -->  00:07:36.310
So, we wanna know who were
the passengers on the Titanic.
123

123

00:07:36.310  -->  00:07:40.010
Let's just first check out a quick gender.
124

124

00:07:40.010  -->  00:07:45.298
So, to do that, I can call seaborn using
sns, and I can create a factorplot.
125

125

00:07:45.298  -->  00:07:50.470
So the factorplot allows me to just
126

126

00:07:50.470  -->  00:07:55.540
pass a column argument, so
I'll pass the sex column,
127

127

00:07:56.780  -->  00:07:59.650
and then I just have to indicate
where the data's coming from.
128

128

00:07:59.650  -->  00:08:06.610
So data equals titanic_df, and that's it.
129

129

00:08:06.610  -->  00:08:08.400
Now if we scroll down here,
130

130

00:08:08.400  -->  00:08:12.840
we can see that there's way more
males on the Titanic than females.
131

131

00:08:12.840  -->  00:08:14.630
Ratio looks like it's almost two to one.
132

132

00:08:14.630  -->  00:08:17.540
So that's a little
interesting thing to see.
133

133

00:08:17.540  -->  00:08:20.310
But let's go ahead and
separate the genders by classes.
134

134

00:08:21.710  -->  00:08:27.929
So to do that,
we can do the exact same thing,
135

135

00:08:27.929  -->  00:08:33.333
sns factorplot, call the sex column,
136

136

00:08:33.333  -->  00:08:40.539
indicate that the data is
coming from titanic _df,
137

137

00:08:40.539  -->  00:08:45.815
and then we'll label a hue as Pclass.
138

138

00:08:50.274  -->  00:08:51.694
So, let's go ahead and see that.
139

139

00:08:51.694  -->  00:08:58.910
Okay, so now you can see here that most
of the males were in the third class.
140

140

00:08:58.910  -->  00:09:03.510
And another way we can do this to get
a look at this data is instead of
141

141

00:09:03.510  -->  00:09:09.190
separating it by female male and
then having separate class columns,
142

142

00:09:09.190  -->  00:09:11.770
let's go ahead and
do the opposite of what we just did.
143

143

00:09:11.770  -->  00:09:19.960
So we'll say, call the Pclass, and
then have the hues be separated by sex.
144

144

00:09:19.960  -->  00:09:23.749
So this kinda is just gonna
reverse this ledge in the columns
145

145

00:09:24.940  -->  00:09:27.190
to make it look like this.
146

146

00:09:27.190  -->  00:09:30.190
And here we can really
tell the difference, so,
147

147

00:09:30.190  -->  00:09:34.760
much more of the third class
were male than female.
148

148

00:09:34.760  -->  00:09:36.940
The first and
second class were actually more or
149

149

00:09:36.940  -->  00:09:40.260
less even, especially given
the time period, you can imagine.
150

150

00:09:40.260  -->  00:09:42.660
So that's an interesting find.
151

151

00:09:42.660  -->  00:09:45.100
Looks like there's way more males
in the third class than females.
152

152

00:09:46.480  -->  00:09:48.970
What might be interesting to know,
153

153

00:09:48.970  -->  00:09:53.370
though, is the split between males,
females, and children.
154

154

00:09:54.430  -->  00:09:58.420
So I'm sure as you know, there's a famous
line, women and children first, and
155

155

00:09:58.420  -->  00:10:01.900
that's gonna come into play when
we look at the survival rates.
156

156

00:10:01.900  -->  00:10:04.150
So we don't just want male and females.
157

157

00:10:04.150  -->  00:10:07.020
We want male, female, and children.
158

158

00:10:08.350  -->  00:10:11.030
So, let's go ahead and
159

159

00:10:11.030  -->  00:10:15.530
use the apply technique to create
a function to handle this.
160

160

00:10:15.530  -->  00:10:20.470
So what I'm gonna do is make a function.
161

161

00:10:20.470  -->  00:10:28.306
So I'll say def, and
I'll call my function male_female_child.
162

162

00:10:28.306  -->  00:10:33.370
And I'll have it take in
a passenger as an object.
163

163

00:10:35.140  -->  00:10:41.524
And then it's gonna take the age and
sex of that passenger.
164

164

00:10:45.103  -->  00:10:52.305
And then it's gonna say,
if the age is less than 16,
165

165

00:10:52.305  -->  00:10:57.628
so we'll define a child as less than 16
166

166

00:10:57.628  -->  00:11:02.640
years old, you should return child,
167

167

00:11:02.640  -->  00:11:07.520
and then else, just return the sex.
168

168

00:11:07.520  -->  00:11:12.189
So that's gonna mean as we pass through
females and males, if they're younger than
169

169

00:11:12.189  -->  00:11:16.149
16, they'll no longer be female or
male, they'll just be a child.
170

170

00:11:17.988  -->  00:11:19.588
So we've created that function.
171

171

00:11:21.788  -->  00:11:25.168
And let's go ahead and apply it.
172

172

00:11:25.168  -->  00:11:30.015
So, you can revisit lecture 45 for
a refresher on how to use apply, but
173

173

00:11:30.015  -->  00:11:33.428
I'll show you how to do it right now.
174

174

00:11:33.428  -->  00:11:38.890
So, we're gonna define a new column called
person, instead of just having sex.
175

175

00:11:38.890  -->  00:11:45.950
So, I'm gonna say titanic_df,
176

176

00:11:45.950  -->  00:11:50.103
person is equal to.
177

177

00:11:50.103  -->  00:11:56.780
Whoops, titanic_df.
178

178

00:11:56.780  -->  00:12:02.430
And in this case,
I'm going to pass two columns,
179

179

00:12:02.430  -->  00:12:05.710
age and sex.
180

180

00:12:05.710  -->  00:12:09.920
So I'll pass it as a list.
181

181

00:12:09.920  -->  00:12:15.441
And then I'm gonna apply my function,
182

182

00:12:15.441  -->  00:12:18.970
male_female_child.
183

183

00:12:18.970  -->  00:12:22.670
And I have to remember that this
is a column, not the index, so
184

184

00:12:22.670  -->  00:12:25.790
I'll set the axis=1.
185

185

00:12:25.790  -->  00:12:27.390
So what am I doing here?
186

186

00:12:27.390  -->  00:12:31.470
I am creating a new column on
the Titanic data frame called person
187

187

00:12:32.500  -->  00:12:36.180
which will indicate whether
they're female, male, or child.
188

188

00:12:36.180  -->  00:12:38.840
And the way I'm doing that
is I'm grabbing the age and
189

189

00:12:38.840  -->  00:12:43.670
sex column values and then applying
190

190

00:12:43.670  -->  00:12:48.820
that function I just made that will
return child if the age is less than 16.
191

191

00:12:48.820  -->  00:12:49.920
Otherwise it'll return the sex.
192

192

00:12:49.920  -->  00:12:51.500
So let's go ahead and see if that worked.
193

193

00:12:52.940  -->  00:13:00.407
So I ran it, and, let's go ahead and
take a quick view of the first,
194

194

00:13:00.407  -->  00:13:04.738
let's say, ten rows of my data frame.
195

195

00:13:07.399  -->  00:13:11.733
All right, and if you look all the way
here on the right, I have male, female,
196

196

00:13:11.733  -->  00:13:14.838
male, male, and
it looks like I have a child down here.
197

197

00:13:14.838  -->  00:13:18.299
And if we look at their age,
this was a 14 year old girl.
198

198

00:13:18.299  -->  00:13:21.140
Okay.
199

199

00:13:21.140  -->  00:13:22.370
Great.
200

200

00:13:22.370  -->  00:13:25.880
So, now that we have our person column,
what else can we do?
201

201

00:13:27.320  -->  00:13:31.860
We've separated the passengers between
male, female, and child, so this will be
202

202

00:13:31.860  -->  00:13:36.200
important later on cuz of the classic
famous women and children first policy.
203

203

00:13:36.200  -->  00:13:38.170
So let's try the factorplot
again that we did.
204

204

00:13:38.170  -->  00:13:42.883
So we'll say sns.factorplot,
205

205

00:13:42.883  -->  00:13:47.931
oops, factorplot, and I will grab
206

206

00:13:47.931  -->  00:13:52.812
the class column which is Pclass,
207

207

00:13:52.812  -->  00:13:57.370
set my data set as titanic_df.
208

208

00:13:57.370  -->  00:14:03.990
And the hue I'm gonna define now,
instead of sex, is person.
209

209

00:14:06.950  -->  00:14:08.300
So let's see what this gets us.
210

210

00:14:10.550  -->  00:14:16.860
So now we've separated all the classes
by male, female or child, and what's
211

211

00:14:16.860  -->  00:14:21.220
interesting is quite a bit more children
in third class and not so many in first.
212

212

00:14:21.220  -->  00:14:23.430
I initially would not
have thought about that.
213

213

00:14:23.430  -->  00:14:27.698
I would have thought there would have
been way less children in third class and
214

214

00:14:27.698  -->  00:14:32.115
a lot of pampered children in the first,
but my intuition was not right on that.
215

215

00:14:32.115  -->  00:14:35.395
So, how about we create
a distribution of the ages
216

216

00:14:35.395  -->  00:14:38.255
to get a more precise picture of
who the passengers really were.
217

217

00:14:39.415  -->  00:14:43.425
So, we can just create a quick histogram,
if we want, using pandas.
218

218

00:14:44.815  -->  00:14:52.720
So I can say, grab my age column,
and then I can pass .hist method.
219

219

00:14:54.950  -->  00:14:59.220
I'll set 70 bins just to
get a really nice histogram
220

220

00:14:59.220  -->  00:15:01.260
with tons of bins to see the ages.
221

221

00:15:01.260  -->  00:15:06.180
Okay, and
this is our distribution of the ages here.
222

222

00:15:06.180  -->  00:15:11.080
So, a peak at really
young children starts to
223

223

00:15:11.080  -->  00:15:14.870
come down towards ten years old, and then
you get a more normal distribution in age.
224

224

00:15:16.300  -->  00:15:22.204
Mean looks like it's around,
somewhere around 30ish.
225

225

00:15:22.204  -->  00:15:23.030
Okay?
226

226

00:15:23.030  -->  00:15:25.270
And we, let's go ahead and
actually find that mean.
227

227

00:15:26.570  -->  00:15:33.590
So we can say titanic_df, age,
and then apply the mean method.
228

228

00:15:35.020  -->  00:15:41.054
Looks like the mean age was about 30,
29.6, etc., etc.
229

229

00:15:41.054  -->  00:15:41.617
Okay.
230

230

00:15:41.617  -->  00:15:43.600
Interesting.
231

231

00:15:43.600  -->  00:15:47.610
Let's go ahead and get a quick overall
comparison of male, female, child.
232

232

00:15:47.610  -->  00:15:48.430
So how can we do that?
233

233

00:15:50.130  -->  00:15:52.280
I can again, grab that column,
234

234

00:15:53.970  -->  00:15:58.640
that person column that we just made,
and do value counts.
235

235

00:16:01.080  -->  00:16:04.210
So this will count all the unique values.
236

236

00:16:04.210  -->  00:16:10.580
So looks like we have 537 males, 271
females, and 83 children, total aboard.
237

237

00:16:13.440  -->  00:16:17.440
What's another way we can
possibly visualize this data?
238

238

00:16:18.480  -->  00:16:25.510
Well we can use a facet grid to plot
multiple KDE plots on one plot.
239

239

00:16:25.510  -->  00:16:27.130
So we'll be doing that in the next video.
240

240

00:16:27.130  -->  00:16:29.910
I'll cut this one off for right now.
241

241

00:16:29.910  -->  00:16:31.260
But just to review what we've done so
242

242

00:16:31.260  -->  00:16:35.940
far, we've opened up the data frame,
read that CSV file.
243

243

00:16:35.940  -->  00:16:38.840
We created a new, well,
244

244

00:16:38.840  -->  00:16:43.720
we analyzed first males versus females and
their classes, how that all related.
245

245

00:16:43.720  -->  00:16:48.570
We made a function to create a new
person column using the age and
246

246

00:16:48.570  -->  00:16:53.470
sex of the passengers, and then we've just
done a quick analysis of the age of all
247

247

00:16:53.470  -->  00:16:57.230
the passengers and
how that related to their class.
248

248

00:16:57.230  -->  00:17:05.040
Okay, so next up we'll look at how to mix
KDE plots to analyze the ages and genders.
249

249

00:17:05.040  -->  00:17:05.990
Okay, I'll see you there.
