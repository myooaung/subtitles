WEBVTT
1
1

00:00:01.180  -->  00:00:02.390
Hey, guys.
2

2

00:00:02.390  -->  00:00:05.840
Welcome to lecture 19.
3

3

00:00:05.840  -->  00:00:12.965
This will be Selecting Entries.
4

4

00:00:19.046  -->  00:00:22.560
All right, so as always, import the usual.
5

5

00:00:25.960  -->  00:00:32.360
Import pandas as pd.
6

6

00:00:32.360  -->  00:00:41.020
And then from pandas
import Series,DataFrame.
7

7

00:00:45.325  -->  00:00:48.030
All right, awesome.
8

8

00:00:48.030  -->  00:00:50.610
So let's just create a series.
9

9

00:00:50.610  -->  00:00:52.144
We'll call it ser1.
10

10

00:00:55.844  -->  00:01:02.864
And let's go ahead and
again use the np.arange method.
11

11

00:01:02.864  -->  00:01:04.520
We'll just have it be three points.
12

12

00:01:05.980  -->  00:01:10.000
And we'll set the index,
as usual, for three points,
13

13

00:01:10.000  -->  00:01:14.710
just 'A','B','C'.
14

14

00:01:14.710  -->  00:01:15.474
Awesome.
15

15

00:01:19.294  -->  00:01:24.710
And what I'm gonna do
here is I'm gonna set
16

16

00:01:24.710  -->  00:01:31.040
ser1 equal to every value
doubled in series one.
17

17

00:01:32.200  -->  00:01:36.680
And I'm going to do that to avoid
some confusion in the future, and
18

18

00:01:36.680  -->  00:01:37.980
you'll see what I mean later.
19

19

00:01:39.450  -->  00:01:42.940
So we created a series.
20

20

00:01:42.940  -->  00:01:46.334
Originally it would have just been 0,
1, 2, but
21

21

00:01:46.334  -->  00:01:51.670
we doubled every value in it with some
multiplication, so now it's 0, 2, 4.
22

22

00:01:51.670  -->  00:01:55.290
And that created our series or
ser1, that series.
23

23

00:01:57.390  -->  00:02:00.420
So let's learn how we
can select some data.
24

24

00:02:00.420  -->  00:02:05.450
So if we can grab entries by
the index name on a series.
25

25

00:02:05.450  -->  00:02:10.230
So if we call that series we
can just grab it by the index.
26

26

00:02:10.230  -->  00:02:15.620
So for instance,
if I wanted the 2 value, its index is B,
27

27

00:02:15.620  -->  00:02:19.330
so if I call that, I'll grab that 2.
28

28

00:02:19.330  -->  00:02:27.130
Or I can just grab it by its numerical
value, of the index, that is.
29

29

00:02:27.130  -->  00:02:31.387
So the index will always have
a numerical value starting at 0 so,
30

30

00:02:31.387  -->  00:02:34.510
A is 0, B is 1, C is 2.
31

31

00:02:34.510  -->  00:02:39.460
This is why I multiplied the values
by two to avoid any confusion, so
32

32

00:02:39.460  -->  00:02:45.590
if I said ser1 and
called the 1 index on it,
33

33

00:02:45.590  -->  00:02:51.360
that will be the same as the B index,
and I'll get the 2 value out.
34

34

00:02:51.360  -->  00:02:52.852
We can also grab it by a range.
35

35

00:02:52.852  -->  00:02:58.227
So I can call from
36

36

00:02:58.227  -->  00:03:02.730
0 to 3 and that will give me all of them.
37

37

00:03:04.450  -->  00:03:08.114
Awesome.
So that's the 0, 1, 2.
38

38

00:03:08.114  -->  00:03:10.140
3 was not inclusive there.
39

39

00:03:12.100  -->  00:03:16.760
And we can also grab it by
a range of index values as well.
40

40

00:03:18.380  -->  00:03:21.280
So the actual index value names.
41

41

00:03:22.960  -->  00:03:25.830
And I can do that by passing a list.
42

42

00:03:29.450  -->  00:03:31.970
So let's say just one of
those first two values.
43

43

00:03:33.190  -->  00:03:35.230
That'll get me the A and B value.
44

44

00:03:35.230  -->  00:03:40.850
So instead of using the numerical
index values 0, 1, 2, I
45

45

00:03:40.850  -->  00:03:46.120
can actually call them by their names.
46

46

00:03:46.120  -->  00:03:48.540
We can also grab by logic.
47

47

00:03:48.540  -->  00:03:55.830
And what I mean by that is just using some
Boolean logic or just basic equations.
48

48

00:03:57.020  -->  00:03:58.050
So I'll show you an example.
49

49

00:03:59.390  -->  00:04:03.480
So we have our series and
what do we want to grab from it?
50

50

00:04:03.480  -->  00:04:06.232
We can say, go ahead and
51

51

00:04:06.232  -->  00:04:12.294
grab everywhere that
the series is greater than 3.
52

52

00:04:12.294  -->  00:04:15.674
And if I select that, it gives me C 4,
53

53

00:04:15.674  -->  00:04:20.127
which was the only value
that was greater than 3.
54

54

00:04:23.541  -->  00:04:26.590
And we can also set values
using this kind of method.
55

55

00:04:27.660  -->  00:04:28.958
So we can say
56

56

00:04:33.898  -->  00:04:37.642
Where ser1 is greater
than 3 let's go ahead and
57

57

00:04:37.642  -->  00:04:43.230
set those values equal to 10, and
then let's show what it looks like.
58

58

00:04:44.590  -->  00:04:49.588
And now it's replaced any values
that are greater than 3 to 10.
59

59

00:04:49.588  -->  00:04:51.700
Awesome.
60

60

00:04:51.700  -->  00:04:56.070
So now that we've seen how selecting
entries works in a series,
61

61

00:04:56.070  -->  00:04:58.449
let's go ahead and
see how it works in a data frame.
62

62

00:04:59.710  -->  00:05:01.280
So we'll start by making a data frame.
63

63

00:05:04.930  -->  00:05:10.040
First thing we're gonna pass
are the actual entries, those values.
64

64

00:05:10.040  -->  00:05:17.890
So we'll do it by just getting
an array of 25 entries.
65

65

00:05:17.890  -->  00:05:24.189
Let's go ahead and
reshape this into a five
66

66

00:05:24.189  -->  00:05:30.130
by five matrix.
67

67

00:05:30.130  -->  00:05:30.710
What's next?
68

68

00:05:30.710  -->  00:05:32.070
We gotta set up the index.
69

69

00:05:33.760  -->  00:05:38.390
If we wanna have it actually labeled,
and we'll use cities again.
70

70

00:05:40.720  -->  00:05:42.090
What else is there?
71

71

00:05:42.090  -->  00:05:43.050
San Francisco.
72

72

00:05:43.050  -->  00:05:48.301
Let's go with DC for Washington,
73

73

00:05:48.301  -->  00:05:54.110
DC, and then maybe Chi for Chicago.
74

74

00:05:54.110  -->  00:06:00.290
And then we can also have the columns
by passing the columns argument.
75

75

00:06:00.290  -->  00:06:03.360
And I'm going to start a new line here.
76

76

00:06:04.770  -->  00:06:08.576
Make sure you have this comma here
before you start the columns argument.
77

77

00:06:08.576  -->  00:06:10.966
This comma.
78

78

00:06:10.966  -->  00:06:15.280
And then we can go ahead and pass a list.
79

79

00:06:15.280  -->  00:06:17.590
We'll need it to be five letters long.
80

80

00:06:17.590  -->  00:06:18.995
So we'll just do A B C D E.
81

81

00:06:18.995  -->  00:06:24.110
Perfect.
82

82

00:06:24.110  -->  00:06:28.073
And then we'll just show that dframe,
that data frame.
83

83

00:06:28.073  -->  00:06:28.860
Cool.
84

84

00:06:28.860  -->  00:06:33.630
So we have our index labeled by cities and
our columns labeled by letters.
85

85

00:06:34.870  -->  00:06:38.590
The data itself was just
an array from 0 to 24 that
86

86

00:06:38.590  -->  00:06:41.332
we've reshaped into a five by five matrix.
87

87

00:06:42.940  -->  00:06:44.880
So how do we select
data from a data frame?
88

88

00:06:46.250  -->  00:06:47.970
Well, you can select it by column name.
89

89

00:06:49.270  -->  00:06:54.390
So you can call the B column, and
90

90

00:06:54.390  -->  00:06:58.950
that will grab you all the values in
that B column, so 1, 6, 11, 16, 21.
91

91

00:06:58.950  -->  00:07:06.760
You can select multiple columns in this
same manner just by passing a list.
92

92

00:07:06.760  -->  00:07:09.679
Notice how I'm using two
sets of brackets here.
93

93

00:07:13.499  -->  00:07:18.490
So if you wanted B E, we call that and
then we get the B E columns.
94

94

00:07:20.090  -->  00:07:23.940
And just like we did in the series,
we can use Boolean logic as well.
95

95

00:07:24.970  -->  00:07:30.398
So we can say give me the data
96

96

00:07:30.398  -->  00:07:35.826
frame values where C column
97

97

00:07:35.826  -->  00:07:39.840
is greater than 8.
98

98

00:07:39.840  -->  00:07:46.070
And if we pass that,
it's gonna give us this as a return.
99

99

00:07:48.020  -->  00:07:53.630
So it's giving you every row as
the answer, where C was greater than 8.
100

100

00:07:53.630  -->  00:07:56.505
If we look back at our original dframe.
101

101

00:08:01.117  -->  00:08:04.040
The first two rows, C was less than 8.
102

102

00:08:04.040  -->  00:08:05.790
The last three it was greater than 8.
103

103

00:08:05.790  -->  00:08:12.760
So it gave us the last three
rows of the entire data frame.
104

104

00:08:17.890  -->  00:08:20.979
You can also show a Boolean data frame.
105

105

00:08:20.979  -->  00:08:26.879
And a Boolean data frame will just have
Boolean values, so true and false.
106

106

00:08:26.879  -->  00:08:32.620
And I can do that just by asking hey,
where is dframe greater than 10?
107

107

00:08:32.620  -->  00:08:35.869
And then it'll give me
a Boolean data frame, so
108

108

00:08:35.869  -->  00:08:41.490
everywhere that's labeled false, you can
see the data frame was less than 10.
109

109

00:08:41.490  -->  00:08:44.892
And everywhere that's true,
it was greater than 10.
110

110

00:08:47.772  -->  00:08:48.272
Cool.
111

111

00:08:49.310  -->  00:08:54.730
And as we previously discussed,
we can use ix to label index.
112

112

00:08:54.730  -->  00:09:00.252
So to show you an example,
you can say dframe.ix.
113

113

00:09:00.252  -->  00:09:07.400
And we can pass LA.
114

114

00:09:07.400  -->  00:09:10.940
And it's going to give us those LA values.
115

115

00:09:10.940  -->  00:09:14.250
So the LA row was 5, 6, 7, 8, 9.
116

116

00:09:14.250  -->  00:09:19.940
And it's given us 5, 6, 7, 8, 9 and
the columns as the index values.
117

117

00:09:21.500  -->  00:09:22.820
So another quick example.
118

118

00:09:23.960  -->  00:09:31.125
We can also do this by asking for
119

119

00:09:31.125  -->  00:09:35.540
the 1 row values.
120

120

00:09:35.540  -->  00:09:40.500
So remember,
indexing starts at 0, so 0, 1.
121

121

00:09:40.500  -->  00:09:42.000
So that should also be LA.
122

122

00:09:42.000  -->  00:09:42.778
0 was NYC.
123

123

00:09:42.778  -->  00:09:45.970
And if we check that out, what do we get?
124

124

00:09:46.990  -->  00:09:48.630
We get the same thing as calling LA.
125

125

00:09:48.630  -->  00:09:49.130
Cool.
126

126

00:09:52.230  -->  00:09:56.900
So we'll be selecting entries
a lot during this course, so
127

127

00:09:56.900  -->  00:09:58.700
you're going to be seeing this over and
over again.
128

128

00:09:58.700  -->  00:10:05.800
And hopefully as we create more
data frames and create more series,
129

129

00:10:05.800  -->  00:10:10.230
you're gonna feel really comfortable just
making data frames right off the bat
130

130

00:10:10.230  -->  00:10:15.650
with numpy arrange and then creating
index lists and column lists.
131

131

00:10:15.650  -->  00:10:17.270
All right, awesome.
132

132

00:10:17.270  -->  00:10:20.700
So the next lecture,
we'll learn about data alignment.
133

133

00:10:20.700  -->  00:10:21.800
I'll see you there.
