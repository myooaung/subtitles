WEBVTT
1
1

00:00:00.920  -->  00:00:03.660
Hey guys.
Welcome to Lecture 22.
2

2

00:00:03.660  -->  00:00:09.981
This lecture we're going to be
going over some summary statistics.
3

3

00:00:09.981  -->  00:00:13.630
[LAUGH]
Sorry.
4

4

00:00:13.630  -->  00:00:17.920
So Pandas comes with some really
good methods you can call on.
5

5

00:00:17.920  -->  00:00:24.220
Data frames, they're all built in, and you
can summarize data in these method frames.
6

6

00:00:24.220  -->  00:00:29.760
So let's go ahead and
start off with importing NumPy as np.
7

7

00:00:31.150  -->  00:00:36.000
Basically our usual stuff,
importing from Pandas import series.
8

8

00:00:37.520  -->  00:00:41.550
And data frame and
then import pandas as pd.
9

9

00:00:43.990  -->  00:00:45.030
Awesome.
10

10

00:00:45.030  -->  00:00:48.700
First off what we're going to want to
do is create a dataframe to work with.
11

11

00:00:48.700  -->  00:00:55.534
And I'm going to construct this dataframe
from a matrix that I built using np.array.
12

12

00:00:56.700  -->  00:00:58.140
Like we've done in the past before.
13

13

00:00:59.210  -->  00:01:01.391
Let's go ahead and
make this a 2 by 3 matrix.
14

14

00:01:01.391  -->  00:01:06.171
So the first row I'm going to give it 1 2.
15

15

00:01:06.171  -->  00:01:09.199
And then I'm going to do something
a little different that we haven't seen in
16

16

00:01:09.199  -->  00:01:09.910
the past before.
17

17

00:01:09.910  -->  00:01:13.164
I'm gonna make the third value np.nan.
18

18

00:01:13.164  -->  00:01:18.070
So I'm gonna make it a null value,
and you'll see what I do that later.
19

19

00:01:18.070  -->  00:01:22.120
And then same thing for
the first value in the second row.
20

20

00:01:22.120  -->  00:01:27.310
It's also gonna be nan, and
then I'll give it some numbers there.
21

21

00:01:28.980  -->  00:01:31.210
So let's go ahead and make that matrix.
22

22

00:01:31.210  -->  00:01:35.550
And now, to build my data
frame we'll call it dframe1.
23

23

00:01:38.960  -->  00:01:44.160
I'll pass the matrix I just made.
24

24

00:01:44.160  -->  00:01:45.360
We'll give it an index.
25

25

00:01:49.480  -->  00:01:50.460
Index will be A, B.
26

26

00:01:55.970  -->  00:02:00.991
And the columns,
we'll call them One, Two, and three.
27

27

00:02:06.571  -->  00:02:07.400
All right.
28

28

00:02:07.400  -->  00:02:09.310
Let's see what that looks like.
29

29

00:02:09.310  -->  00:02:14.490
So, from my matrix it was one to null,
null three four.
30

30

00:02:14.490  -->  00:02:18.770
Now we have it in a data frame with A, B
index and the columns are called 1, 2, and
31

31

00:02:18.770  -->  00:02:19.680
3.
32

32

00:02:19.680  -->  00:02:20.600
Cool.
33

33

00:02:22.090  -->  00:02:26.670
So let's see the sum method in
action here, just take a look at
34

34

00:02:26.670  -->  00:02:31.340
what happens, so what is this gonna do?
35

35

00:02:31.340  -->  00:02:35.810
So sum on a data frame, it's gonna sum
up all the values for each column.
36

36

00:02:37.500  -->  00:02:42.750
So, for instance, the two column,
two plus three is five.
37

37

00:02:42.750  -->  00:02:46.140
And you notice something that's really
nice about PEMDAS when you're calling sum.
38

38

00:02:46.140  -->  00:02:48.430
It's gonna ignore null values.
39

39

00:02:48.430  -->  00:02:51.080
So it's not gonna crash on you just
because you have null values there.
40

40

00:02:51.080  -->  00:02:54.180
It's gonna be able to just ignore them and
treat them as zeroes.
41

41

00:02:54.180  -->  00:02:54.861
So it's just going to skip them over.
42

42

00:02:57.301  -->  00:02:58.330
Okay.
43

43

00:02:58.330  -->  00:03:00.980
What if we wanted to add up the rows?
44

44

00:03:00.980  -->  00:03:04.200
Well, you can do it the exact same way.
45

45

00:03:04.200  -->  00:03:08.084
You just gotta indicate that your axis=1.
46

46

00:03:08.084  -->  00:03:11.710
And now you've summed up the rows instead.
47

47

00:03:11.710  -->  00:03:14.620
So row A, one plus two is three.
48

48

00:03:14.620  -->  00:03:17.610
And then row B you have three
plus four equals seven.
49

49

00:03:18.640  -->  00:03:19.140
Cool.
50

50

00:03:21.900  -->  00:03:24.010
What other methods can
you call on a data frame?
51

51

00:03:25.400  -->  00:03:30.360
Well you can call the min
method on a data frame.
52

52

00:03:30.360  -->  00:03:32.075
And what is that gonna do?
53

53

00:03:32.075  -->  00:03:34.905
Let's take a look at our data frame again,
just to get a picture.
54

54

00:03:36.245  -->  00:03:40.775
The min method is gonna find
the minimum value in each column.
55

55

00:03:42.185  -->  00:03:44.655
So, the one column, two column,
56

56

00:03:44.655  -->  00:03:48.970
three column the minimum value if
we take a look at the two column.
57

57

00:03:48.970  -->  00:03:51.430
It was two since it's comparing two and
three.
58

58

00:03:51.430  -->  00:03:54.810
Two's the smaller number there,
so two is the minimum value.
59

59

00:03:54.810  -->  00:03:57.950
So it returns the one, two, and
60

60

00:03:57.950  -->  00:04:00.630
four values there,
the minimum values for each column.
61

61

00:04:02.620  -->  00:04:07.230
What if you wanted to find the index
of the minimum value of each column?
62

62

00:04:07.230  -->  00:04:11.930
There's a method we can pass there as well
In that case, it's just gonna be idxmin.
63

63

00:04:15.060  -->  00:04:18.350
And that's gonna give you the index
of each of those minimum values.
64

64

00:04:18.350  -->  00:04:22.730
So if we take a look back at the minimum
values that were 1, 2, and 4,
65

65

00:04:22.730  -->  00:04:24.070
which index were they in?
66

66

00:04:25.495  -->  00:04:27.735
So the one column.
67

67

00:04:27.735  -->  00:04:29.355
It's an in values one.
68

68

00:04:29.355  -->  00:04:33.455
And if we look back on our data frame,
the index for that value is A.
69

69

00:04:33.455  -->  00:04:39.460
So A is the index of the minimum column or
the minimum value for column 1.
70

70

00:04:39.460  -->  00:04:43.530
Let's go ahead and look at column two,
what was it's minimum value?
71

71

00:04:43.530  -->  00:04:50.410
It's minimum value was two and
the index for that minimum value was A.
72

72

00:04:50.410  -->  00:04:53.270
And then finally column three,
73

73

00:04:53.270  -->  00:04:58.727
it's minimum value was four and
the index for that one was B.
74

74

00:05:00.040  -->  00:05:03.750
And so IDX will return idxmin will return
75

75

00:05:03.750  -->  00:05:06.030
the index of the minimum
values in each column.
76

76

00:05:08.140  -->  00:05:12.950
All right, you can do the same thing
with finding the maximum values.
77

77

00:05:12.950  -->  00:05:14.370
They're the exact same methods, but
78

78

00:05:14.370  -->  00:05:16.310
instead of writing them
in you just write max.
79

79

00:05:16.310  -->  00:05:23.050
So let's go ahead and
see our data frame one more time.
80

80

00:05:23.050  -->  00:05:24.780
One two null, null three four.
81

81

00:05:25.910  -->  00:05:29.270
We can also do an accumulation sum,
if you wanted to.
82

82

00:05:30.810  -->  00:05:35.990
The way to do that is really easy,
just Cumsum, call it on.
83

83

00:05:38.730  -->  00:05:41.080
Remember, we called a dframe1,
go ahead and pass that.
84

84

00:05:42.570  -->  00:05:46.800
And now you have the accumulation
sum along the columns.
85

85

00:05:46.800  -->  00:05:50.510
So the only place you're gonna see
the difference there is in column two,
86

86

00:05:50.510  -->  00:05:55.020
where in column two index B,
its value is now five.
87

87

00:05:55.020  -->  00:05:59.280
Since the accumulation sum was two plus
three, it changes that value to five.
88

88

00:06:02.040  -->  00:06:04.540
Cool, so now that we've gone
over some basic methods,
89

89

00:06:04.540  -->  00:06:10.460
let's get into the real
useful features of Pandas.
90

90

00:06:10.460  -->  00:06:15.070
So one of the most useful features
A method called describe.
91

91

00:06:16.260  -->  00:06:19.130
Let's go ahead and
just see what that looks like.
92

92

00:06:19.130  -->  00:06:26.240
So if we call the describe method,
I'm sorry, there we go, dframe1.
93

93

00:06:26.240  -->  00:06:30.070
So what does describe do?
94

94

00:06:30.070  -->  00:06:35.950
So describe is going to provide summary
statistics for your data frame.
95

95

00:06:35.950  -->  00:06:38.930
So it's going to give you a bunch
of statistics on your data frame.
96

96

00:06:38.930  -->  00:06:40.600
It's going to count how
many objects you have.
97

97

00:06:40.600  -->  00:06:44.945
It gonna give you this mean,
the standard deviation,
98

98

00:06:44.945  -->  00:06:50.190
other statistics to find values
of uncertain distributions.
99

99

00:06:50.190  -->  00:06:54.405
For probabilities beyond the mean.
100

100

00:06:54.405  -->  00:06:58.086
[SOUND] And you can get that
all just by passing describe.
101

101

00:07:00.926  -->  00:07:01.426
Cool.
102

102

00:07:02.990  -->  00:07:05.700
So, speaking of statistics,
what else can we get?
103

103

00:07:05.700  -->  00:07:13.830
We can also get information, we can
get information on the correlation and
104

104

00:07:13.830  -->  00:07:19.610
covariance of your data
in your data frames.
105

105

00:07:19.610  -->  00:07:24.505
So what I'm gonna do now is
106

106

00:07:24.505  -->  00:07:29.410
from IPython.display.
107

107

00:07:29.410  -->  00:07:36.451
I'm gonna import YouTubeVideo.
108

108

00:07:42.471  -->  00:07:45.631
And this is gonna allow me to actually
show you some YouTube videos.
109

109

00:07:45.631  -->  00:07:50.680
So in case you're feeling, if you feel
like you need a refresher on covariance
110

110

00:07:50.680  -->  00:07:55.497
and correlation or you just wanna just
learn a little more statistics since
111

111

00:07:55.497  -->  00:07:59.572
you're gonna need to understand
covariance, correlation.
112

112

00:07:59.572  -->  00:08:00.912
For the rest of this lecture.
113

113

00:08:00.912  -->  00:08:05.650
There's some really,
really great videos on YouTube.
114

114

00:08:05.650  -->  00:08:11.180
The best sources on the internet that
I've found for learning basic statistics.
115

115

00:08:11.180  -->  00:08:14.480
And I'm going to go ahead and
put the links here so you can see it.
116

116

00:08:15.760  -->  00:08:22.330
And again, you can just grab these from
the IPython viewer notebooks on GitHub.
117

117

00:08:22.330  -->  00:08:25.980
So this first video, this is for
understanding covariance.
118

118

00:08:28.060  -->  00:08:29.827
The videos are made by
a man named Brandon Foltz,
119

119

00:08:29.827  -->  00:08:31.344
they're really, really great videos.
120

120

00:08:35.644  -->  00:08:40.330
And the second video is
121

121

00:08:40.330  -->  00:08:48.075
On Understanding Correlation.
122

122

00:08:48.075  -->  00:08:53.325
So go ahead and check out these
videos if you're feeling not so
123

123

00:08:53.325  -->  00:08:56.255
fresh on covariance and correlation.
124

124

00:08:56.255  -->  00:09:01.205
So once you've gone over these two videos
you can come back to this lecture and
125

125

00:09:01.205  -->  00:09:03.145
learn how you can find the correlation and
126

126

00:09:03.145  -->  00:09:08.460
covariance values in your
panda state of frame.
127

127

00:09:09.680  -->  00:09:10.840
Okay.
128

128

00:09:10.840  -->  00:09:12.520
So now that you understand covariance and
129

129

00:09:12.520  -->  00:09:17.322
correlation, let's go ahead and make
a data frame and get some information.
130

130

00:09:17.322  -->  00:09:20.710
So, what kinda information do we want?
131

131

00:09:20.710  -->  00:09:24.540
It might be interesting to see correlation
and covariance on some stock prices.
132

132

00:09:25.960  -->  00:09:29.120
So in order to do that we can actually use
133

133

00:09:29.120  -->  00:09:31.050
Pandas to actually get
information off the web.
134

134

00:09:32.580  -->  00:09:35.980
We're going to learn how to do this in
much more detail later so you can think of
135

135

00:09:35.980  -->  00:09:39.420
this kinda as a sneak peek of what
you're going to learn in the future.
136

136

00:09:41.600  -->  00:09:46.760
So what I'm gonna do first is
import pandas.io.data as pdweb.
137

137

00:09:46.760  -->  00:09:48.700
It's gonna allow us to get
some information off the web.
138

138

00:09:50.700  -->  00:09:57.626
Then I'm also gonna import datetime,
just a Pandas library for date input.
139

139

00:10:01.166  -->  00:10:04.305
And then I'm gonna create
a dataframe called prices.
140

140

00:10:04.305  -->  00:10:05.815
Well, let me import these first.
141

141

00:10:05.815  -->  00:10:07.500
Make sure you don't make a mistake.
142

142

00:10:07.500  -->  00:10:08.273
Perfect.
143

143

00:10:08.273  -->  00:10:14.713
So what can we do to get some prices?
144

144

00:10:14.713  -->  00:10:21.087
Well, we'll call PDweb and
145

145

00:10:21.087  -->  00:10:26.664
then we're going to call
146

146

00:10:26.664  -->  00:10:31.454
get_data_yahoo.
147

147

00:10:31.454  -->  00:10:36.065
So there's a lot of built in methods
to get stock prices automatically from
148

148

00:10:36.065  -->  00:10:37.270
the web.
149

149

00:10:37.270  -->  00:10:40.750
And all you have to do is input symbols,
the dates you want them for.
150

150

00:10:40.750  -->  00:10:44.060
And then what kinda values
you want off the stock.
151

151

00:10:44.060  -->  00:10:48.100
You can also get it off Google stocks,
and various other sources.
152

152

00:10:48.100  -->  00:10:51.980
We'll be learning about this
much more in detail later on, so
153

153

00:10:51.980  -->  00:10:53.140
this is kinda just a preview.
154

154

00:10:54.540  -->  00:10:57.190
So for correlation and
covariance, let's go ahead and
155

155

00:10:57.190  -->  00:10:59.190
check out maybe some oil companies.
156

156

00:11:00.290  -->  00:11:03.705
So I'm gonna put some stocks symbols for
157

157

00:11:03.705  -->  00:11:08.531
oil companies such as Exxon Mobil or
British Petroleum.
158

158

00:11:12.011  -->  00:11:15.488
These are some of the largest
corporations in the world so
159

159

00:11:15.488  -->  00:11:18.900
it should be interesting to
see their stock price data.
160

160

00:11:21.400  -->  00:11:23.561
And we'll say the start,
this is where we're gonna use datetime.
161

161

00:11:28.061  -->  00:11:33.980
So I'm gonna start it from 2010,
January 1st,
162

162

00:11:33.980  -->  00:11:38.846
and I'm going to end datetime.datetime,
163

163

00:11:38.846  -->  00:11:43.844
and we'll tend it just three years later,
so
164

164

00:11:43.844  -->  00:11:46.880
2013, January 1st.
165

165

00:11:50.040  -->  00:11:55.593
And then the value I want off
of this is the closing price,
166

166

00:11:55.593  -->  00:12:01.971
which in this case is going to have
to be past the string adj Close.
167

167

00:12:01.971  -->  00:12:03.844
And again, don't worry,
168

168

00:12:03.844  -->  00:12:07.918
we'll be going over this in
much more detail in the future,
169

169

00:12:07.918  -->  00:12:13.310
this is kinda just a sneak peak on how to
get financial information off the web.
170

170

00:12:14.430  -->  00:12:15.190
Let's see if this worked.
171

171

00:12:17.170  -->  00:12:19.614
All right, took a little bit but
it got it.
172

172

00:12:19.614  -->  00:12:21.884
Prices.head, so
173

173

00:12:21.884  -->  00:12:26.120
.head just allows you to see almost
like a preview of your data frame.
174

174

00:12:26.120  -->  00:12:29.080
So it's just gonna show you
the first couple of values.
175

175

00:12:29.080  -->  00:12:33.540
So we have our three stock ticker symbols,
as the columns, and
176

176

00:12:33.540  -->  00:12:39.710
then the date as the index,
and the actual stock price.
177

177

00:12:39.710  -->  00:12:43.731
So now we have a data frame full of
stock prices, so that's pretty awesome.
178

178

00:12:43.731  -->  00:12:48.311
Let's go ahead and
get the volume of the trades.
179

179

00:12:48.311  -->  00:12:53.012
So, in order to do that,
I'll do something really similar.
180

180

00:12:53.012  -->  00:12:59.772
I'm gonna say pdweb.get_data_yahoo
181

181

00:13:04.692  -->  00:13:07.312
We'll pass the same ticker marks,
the symbols.
182

182

00:13:10.612  -->  00:13:12.372
Whoops.
183

183

00:13:12.372  -->  00:13:15.560
And let's capitalize that X.
184

184

00:13:18.440  -->  00:13:20.150
And we'll do it for the same time frame.
185

185

00:13:20.150  -->  00:13:24.929
So, the start time frame will be
186

186

00:13:24.929  -->  00:13:31.302
datetime.datetime, 2010 1, 1.
187

187

00:13:31.302  -->  00:13:34.262
And we'll have.
188

188

00:13:34.262  -->  00:13:36.170
Whoops, forgot to put the day.
189

189

00:13:39.460  -->  00:13:46.470
We'll have the end be datetime.datetime,
190

190

00:13:46.470  -->  00:13:49.793
2013,1,1.
191

191

00:13:49.793  -->  00:13:56.514
And in this case,
what I'm gonna call for is the volume.
192

192

00:13:56.514  -->  00:14:01.214
Last time we called the closing price,
this time we're gonna ask for the volume.
193

193

00:14:04.254  -->  00:14:07.280
And that looks like I
messed up some syntax, and
194

194

00:14:07.280  -->  00:14:11.000
what I forgot was a comma to
separate the start and the end.
195

195

00:14:12.030  -->  00:14:12.903
Let's try that again.
196

196

00:14:14.783  -->  00:14:19.260
Okay, and let's go ahead and
just get use dot the method head.
197

197

00:14:20.290  -->  00:14:22.200
So, see the head of that data frame.
198

198

00:14:22.200  -->  00:14:23.040
Just go to preview.
199

199

00:14:24.260  -->  00:14:25.340
Cool.
So this
200

200

00:14:25.340  -->  00:14:28.520
is the amount of stocks that were
traded on each of those days.
201

201

00:14:28.520  -->  00:14:30.020
So the total volume of stocks.
202

202

00:14:33.130  -->  00:14:35.540
So what would your return be?
203

203

00:14:35.540  -->  00:14:41.424
So the return would be the percentage
change in prices in your stocks.
204

204

00:14:42.640  -->  00:14:49.760
So let's go ahead and
call an object rets for returns.
205

205

00:14:51.250  -->  00:14:57.916
And then from your prices data frame,
the method you can call is pct_change().
206

206

00:15:03.956  -->  00:15:07.360
So now you have the returns on your stock,
and
207

207

00:15:07.360  -->  00:15:12.840
let's say you wanted to get
the correlation of the stocks.
208

208

00:15:12.840  -->  00:15:13.516
How would you do that?
209

209

00:15:13.516  -->  00:15:19.462
Well, we can set another object,
and we'll say,
210

210

00:15:19.462  -->  00:15:24.719
we can pass the correlation
argument which is
211

211

00:15:24.719  -->  00:15:30.250
.corr on that new returns
object that we made by
212

212

00:15:30.250  -->  00:15:36.503
getting the percent change
on the prices data frame.
213

213

00:15:39.203  -->  00:15:42.304
Let's run that and see if that works.
214

214

00:15:42.304  -->  00:15:43.470
Awesome, it did.
215

215

00:15:45.900  -->  00:15:50.929
So let's just get a rough idea
of what these prices look like.
216

216

00:15:50.929  -->  00:15:55.873
So in order to do that,
I'm just gonna call plot method,
217

217

00:15:55.873  -->  00:15:58.459
on this data frame, prices.
218

218

00:15:58.459  -->  00:16:01.679
And again, in the future,
we'll learn a lot more about this.
219

219

00:16:01.679  -->  00:16:06.550
This is just to get you a little taste
of the correlation of covariance.
220

220

00:16:08.130  -->  00:16:11.650
So it's gonna plot that from prices.
221

221

00:16:13.040  -->  00:16:16.330
Okay, so notice that I didn't
actually see the plot.
222

222

00:16:16.330  -->  00:16:22.000
If I want to see the plot,
I have to call a special command.
223

223

00:16:22.000  -->  00:16:24.390
We've seen this in the past,
we got to call matplotlibinline.
224

224

00:16:25.640  -->  00:16:30.071
So let's try it again, all right awesome.
225

225

00:16:30.071  -->  00:16:37.502
So now I'm actually seeing
the price of each stock.
226

226

00:16:37.502  -->  00:16:42.434
And you can kind of see how
they relate to one another,
227

227

00:16:42.434  -->  00:16:45.840
especially the tickers CVX and XOM.
228

228

00:16:45.840  -->  00:16:50.780
You can see that they're really, really,
really correlated to each other.
229

229

00:16:52.020  -->  00:16:55.080
Especially around maybe September 2011,
there's a dip and
230

230

00:16:55.080  -->  00:16:58.600
then the rises seem to really similar.
231

231

00:16:58.600  -->  00:17:04.034
The Burst Petroleum stock, it doesn't seem
to be as quite high of a correlation, but
232

232

00:17:04.034  -->  00:17:09.486
there's still definitely some correlation
there, just not as close as the CVX XOM.
233

233

00:17:12.009  -->  00:17:15.970
So what if you wanted to
plot out this correlation?
234

234

00:17:15.970  -->  00:17:16.470
Well.
235

235

00:17:18.150  -->  00:17:21.610
Again, here's another sneak peek at what
we're going to be learning in the future.
236

236

00:17:23.040  -->  00:17:27.620
We're going to import seaborn as sns.
237

237

00:17:27.620  -->  00:17:30.700
And I'll go over this in
much more detail later, but
238

238

00:17:30.700  -->  00:17:34.971
seaborn is going to be a plotting
library to help us visualize some data.
239

239

00:17:36.990  -->  00:17:41.279
And then I'm going to import
240

240

00:17:41.279  -->  00:17:45.926
Matplotlib.pyplot as plt and
241

241

00:17:45.926  -->  00:17:51.652
let's go ahead and import those two.
242

242

00:17:51.652  -->  00:17:54.610
Let's see how they work.
243

243

00:17:57.590  -->  00:18:02.910
And now we can use seaborn sns
to make a correlation plot.
244

244

00:18:02.910  -->  00:18:04.272
And seaborn can do that.
245

245

00:18:04.272  -->  00:18:07.267
Just by passing corrplot,
246

246

00:18:07.267  -->  00:18:12.352
what we're going to want
to do is get the data.
247

247

00:18:12.352  -->  00:18:16.927
So if you remember before, we have
a returns data set as the object RETS,
248

248

00:18:16.927  -->  00:18:20.810
that was just the percentage
change in prices.
249

249

00:18:20.810  -->  00:18:25.740
I'm going to set imitation as false so
we get a clear picture,
250

250

00:18:26.940  -->  00:18:33.380
and I'm also gonna set
diag_names that's false.
251

251

00:18:33.380  -->  00:18:35.980
And this is just to make a clear picture,
but
252

252

00:18:35.980  -->  00:18:39.930
we'll have a whole section on
learning seaborn in the future.
253

253

00:18:39.930  -->  00:18:42.890
We're gonna learn a lot about,
it's gonna make some really great plots.
254

254

00:18:42.890  -->  00:18:44.899
This is just to give you
a preview of what that looks like.
255

255

00:18:46.800  -->  00:18:48.400
And here you have a really nice plot here,
256

256

00:18:48.400  -->  00:18:51.980
and it's actually showing you
the correlations between them.
257

257

00:18:51.980  -->  00:18:57.635
So it looks like XOM and
CVX have a really high correlation of 0.8,
258

258

00:18:57.635  -->  00:18:59.500
that's pretty high.
259

259

00:19:01.070  -->  00:19:05.500
And if we look up here to the actual
prices, that really makes sense if you see
260

260

00:19:05.500  -->  00:19:08.710
they're really, really,
really correlate with each other.
261

261

00:19:08.710  -->  00:19:11.850
When one goes up, one goes down,
I mean these curves look very similar.
262

262

00:19:13.600  -->  00:19:16.220
And that shows in
the correlation data as well.
263

263

00:19:17.470  -->  00:19:21.340
So awesome, so
now you've seen visualized one,
264

264

00:19:21.340  -->  00:19:24.930
kind of in the back of your mind you can
see how this would be highly correlated.
265

265

00:19:24.930  -->  00:19:27.430
And then, mathematically,
you've actually done the correlation,
266

266

00:19:27.430  -->  00:19:31.400
seeing that it has numerical values to it.
267

267

00:19:32.960  -->  00:19:36.700
And then last thing we can
do after that preview,
268

268

00:19:36.700  -->  00:19:40.336
let's get back a little more on track
to stuff we wanna learn right now.
269

269

00:19:42.380  -->  00:19:44.800
We an check for
unique values in the accounts.
270

270

00:19:46.050  -->  00:19:50.460
So, in order to do that,
I'm just gonna make a quick series.
271

271

00:19:56.290  -->  00:20:00.800
Now let's just make this,
just have it be a bunch of letters.
272

272

00:20:00.800  -->  00:20:05.800
So I'll say w, w, throw in an x,
273

273

00:20:05.800  -->  00:20:11.020
throw in a y,
throw in a z throw in another w,
274

274

00:20:12.170  -->  00:20:17.030
a couple more letters just so
we get a good feel for this.
275

275

00:20:17.030  -->  00:20:19.420
Finally I'll put an a at the end,
something unique.
276

276

00:20:21.840  -->  00:20:22.979
I'll show the series.
277

277

00:20:24.510  -->  00:20:25.410
And, whoops, sorry.
278

278

00:20:26.590  -->  00:20:32.050
I should be passing a list into the
series, so we need those brackets there.
279

279

00:20:32.050  -->  00:20:34.070
Let's go ahead and see what it looks like.
280

280

00:20:34.070  -->  00:20:36.500
All right.
So, you got your series, bunch of letters.
281

281

00:20:38.010  -->  00:20:43.224
If we wanted to grab the unique values, I
can do that by pressing the unique method.
282

282

00:20:48.341  -->  00:20:51.610
And now I get an array return
with each of the unique values.
283

283

00:20:51.610  -->  00:20:55.310
So, w, x, y, z,
a were all the unique values.
284

284

00:20:55.310  -->  00:20:59.989
What if I wanted to know how many of
each of the unique values there were?
285

285

00:20:59.989  -->  00:21:03.249
I can say, value counts.
286

286

00:21:08.329  -->  00:21:12.455
And now I know how many W's, X's,
Y's, A's, and Z's there were.
287

287

00:21:13.505  -->  00:21:14.005
Okay.
288

288

00:21:16.100  -->  00:21:17.820
That it's for summary statistics.
289

289

00:21:17.820  -->  00:21:20.760
Next we're going to
learn with missing data.
290

290

00:21:20.760  -->  00:21:23.580
Let's just quickly scroll up and
see what we learned.
291

291

00:21:25.370  -->  00:21:30.020
So the important takeaways
here are learning how to
292

292

00:21:30.020  -->  00:21:35.210
call different summary methods onto
a dataframe, such as stop sum, dot min.
293

293

00:21:35.210  -->  00:21:40.670
Or dot idx min or
dot idx max or calling min.
294

294

00:21:40.670  -->  00:21:42.370
Really useful feature.
295

295

00:21:42.370  -->  00:21:44.540
Main thing to get out of this, describe.
296

296

00:21:44.540  -->  00:21:49.320
Describe is super powerful and we'll be
using quite a bit throughout this course.
297

297

00:21:49.320  -->  00:21:54.670
To give you a little taste of the future,
we went over covariance and
298

298

00:21:54.670  -->  00:21:59.970
correlation and how we can grab
information off the web using pandas.
299

299

00:21:59.970  -->  00:22:03.560
Just to give you a little
taste of what you can really,
300

300

00:22:03.560  -->  00:22:05.950
really do some amazing stuff with pandas.
301

301

00:22:08.100  -->  00:22:12.400
And then how we can plot and
how we can make really good looking at
302

302

00:22:12.400  -->  00:22:17.010
data visualization plots using seaborn,
which we'll learn about seaborn and
303

303

00:22:17.010  -->  00:22:19.700
plotting in a whole other
section on data visualization.
304

304

00:22:19.700  -->  00:22:21.990
All right, awesome.
305

305

00:22:21.990  -->  00:22:25.360
And then we can check for unique
values in a series or dataframe, and
306

306

00:22:25.360  -->  00:22:26.930
we cal also get their value counts.
307

307

00:22:28.800  -->  00:22:30.700
Cool, so that was summary statistics.
308

308

00:22:30.700  -->  00:22:33.150
I'll see you on lecture 23.
309

309

00:22:33.150  -->  00:22:33.660
Thanks.
