1
1

00:00:02,140  -->  00:00:05,960
Hey everyone, welcome to part two
of the election data project.
2

2

00:00:05,960  -->  00:00:07,030
In the last part,
3

3

00:00:07,030  -->  00:00:11,440
the first video of this project, we just
took a look at what imports we had to do,
4

4

00:00:11,440  -->  00:00:16,155
to analyze the data, as well as
looking into requests in StringIO.
5

5

00:00:16,155  -->  00:00:19,725
We grabbed our data straight from
the Internet, as a csv file,
6

6

00:00:19,725  -->  00:00:23,515
used StringIO to convert it to a data
frame, checked out the data frame, and
7

7

00:00:23,515  -->  00:00:28,860
then we did some quick visualization
analysis of who was being polled,
8

8

00:00:28,860  -->  00:00:34,600
what the population looked like, and also
who was more in favor of Obama or Romney.
9

9

00:00:34,600  -->  00:00:38,860
And we also saw this asset of
undecided voters still, and
10

10

00:00:38,860  -->  00:00:41,320
then we wanted to take that into account.
11

11

00:00:41,320  -->  00:00:44,900
So our polls indicated it
was a fairly close race.
12

12

00:00:44,900  -->  00:00:47,870
But we also had this factor
of undecided voters.
13

13

00:00:47,870  -->  00:00:49,660
And we'll know most of
them will likely vote for
14

14

00:00:49,660  -->  00:00:51,880
one of the candidates
once the election occurs.
15

15

00:00:52,900  -->  00:00:56,230
So we'll look into how we
can take that into account,
16

16

00:00:56,230  -->  00:01:00,100
by maybe splitting the difference,
between Obama and Romney.
17

17

00:01:01,610  -->  00:01:05,110
And that should give us some sort of
unbiased estimate of the final difference.
18

18

00:01:05,110  -->  00:01:09,770
So I'm going to hop over
back to the live Code, and
19

19

00:01:09,770  -->  00:01:13,770
before we go into calculating the
difference, let's see, if we wanted to,
20

20

00:01:13,770  -->  00:01:19,390
how we could do a quick time series
analysis of voter sentiment,
21

21

00:01:19,390  -->  00:01:24,400
by plotting Obama, Romney favor,
versus the poll end dates.
22

22

00:01:24,400  -->  00:01:27,945
So let's go ahead and
check out our data frame again,
23

23

00:01:27,945  -->  00:01:32,920
poll_df.
24

24

00:01:32,920  -->  00:01:35,780
I'll do it .head to get
the first five rows.
25

25

00:01:36,940  -->  00:01:41,570
So we have the percentage of people
that wanted to vote for Obama, and
26

26

00:01:41,570  -->  00:01:43,250
the percentage of people that
wanted to vote for Romney,
27

27

00:01:43,250  -->  00:01:46,640
and we also have the end
date of that poll.
28

28

00:01:47,970  -->  00:01:54,520
So what we can do is a very quick,
a bit of a messy plot,
29

29

00:01:54,520  -->  00:01:58,490
but we can do it straight up in pandas,
and
30

30

00:01:58,490  -->  00:02:03,840
plot the favor of Obama, Romney,
undecided voters through time.
31

31

00:02:03,840  -->  00:02:09,331
So to show you what I mean by that,
I will take our data frame,
32

32

00:02:09,331  -->  00:02:13,746
poll_df and
I can call the plot method on it, and
33

33

00:02:13,746  -->  00:02:19,154
in this case I wanna plot on my X axis,
that end date column.
34

34

00:02:23,847  -->  00:02:27,650
And then what I want to plot on Y,
is Obama's,
35

35

00:02:27,650  -->  00:02:30,978
Romney's, and the undecided voters.
36

36

00:02:30,978  -->  00:02:33,274
So what I'll do is I'll pass a list.
37

37

00:02:33,274  -->  00:02:36,767
Obama.
38

38

00:02:42,782  -->  00:02:48,126
Romney, and undecided.
39

39

00:02:48,126  -->  00:02:55,160
So I'll have three different
quantities on my Y axis.
40

40

00:02:55,160  -->  00:02:56,850
And then since I don't want a line,
41

41

00:02:57,850  -->  00:03:03,900
I'll say my line style is just
equal to an empty string.
42

42

00:03:03,900  -->  00:03:04,970
That way no lines show up.
43

43

00:03:04,970  -->  00:03:09,295
And then I'll set a marker.
44

44

00:03:09,295  -->  00:03:10,799
Equal to just an o., there.
45

45

00:03:10,799  -->  00:03:13,030
Let's go ahead and
see what that looks like.
46

46

00:03:16,370  -->  00:03:20,930
And so now you can see,
we've done a quick time analysis of
47

47

00:03:20,930  -->  00:03:25,630
the voter sentiment for each of
the candidates, and the undecided voters.
48

48

00:03:25,630  -->  00:03:30,520
Now, something to note here,
is we actually plotted this in reverse, so
49

49

00:03:30,520  -->  00:03:33,430
on the right hand side
are the earlier dates, and
50

50

00:03:33,430  -->  00:03:35,950
on the left hand side are the later dates.
51

51

00:03:35,950  -->  00:03:39,570
Which kind of makes sense, cuz you can see
the trend of undecided voters start to go
52

52

00:03:39,570  -->  00:03:41,500
down, as you get closer to the election.
53

53

00:03:41,500  -->  00:03:45,370
So that makes sense because the undecided
voters, as you got closer to the election,
54

54

00:03:45,370  -->  00:03:47,570
would have probably chosen a candidate.
55

55

00:03:47,570  -->  00:03:49,560
And what's interesting is Obama and
Romney,
56

56

00:03:49,560  -->  00:03:53,850
as you go closer to the election date on
the left hand side, they get closer and
57

57

00:03:53,850  -->  00:03:56,880
closer, so that's an interesting.
58

58

00:03:56,880  -->  00:04:01,200
So that's just a bit of a messy
way to just give you a quick idea.
59

59

00:04:03,230  -->  00:04:05,210
If we want to get a better visualization,
60

60

00:04:05,210  -->  00:04:07,880
what we probably have to do is
edit the actual data frame.
61

61

00:04:08,910  -->  00:04:12,630
So to lead you along the right path for
plotting, we'll go ahead and
62

62

00:04:12,630  -->  00:04:15,830
answer another question related to
plotting, the sentiment versus time.
63

63

00:04:16,930  -->  00:04:21,490
So what we're gonna do now is plot out
the difference, between Obama and Romney.
64

64

00:04:21,490  -->  00:04:24,740
And see how that changes
as time moves along.
65

65

00:04:24,740  -->  00:04:30,520
So what I mean by that is, if you look at
this first poll here, this political poll.
66

66

00:04:30,520  -->  00:04:34,400
Obama and Romney both have 47%
of whoever was polled said
67

67

00:04:34,400  -->  00:04:38,932
they would vote for them, so
that means their difference would be zero.
68

68

00:04:38,932  -->  00:04:43,140
And then if you go down to the next one,
you have 49 and 48, so
69

69

00:04:43,140  -->  00:04:46,200
Obama would be leading by just
one percentage point there.
70

70

00:04:46,200  -->  00:04:49,680
So, what we're gonna do is create a new
column to track that difference, and
71

71

00:04:49,680  -->  00:04:51,910
then plot that difference versus time,
72

72

00:04:51,910  -->  00:04:54,480
which would be a cleaner way of
visualizing that kind of data.
73

73

00:04:55,690  -->  00:04:59,170
So let's go ahead and
start with an import, so
74

74

00:04:59,170  -->  00:05:05,300
I'm gonna say from datetime,
import datetime.
75

75

00:05:05,300  -->  00:05:08,160
We've seen this before in
previous data projects,
76

76

00:05:08,160  -->  00:05:10,220
I'm just going to use it as a time stamp.
77

77

00:05:11,290  -->  00:05:14,770
So now we'll define a new
column in our poll data frame,
78

78

00:05:14,770  -->  00:05:17,970
to take into account the difference
between Romney and Obama in the polls.
79

79

00:05:19,580  -->  00:05:26,730
So I'll create a new column, poll_df and
I'll call this column Difference.
80

80

00:05:32,430  -->  00:05:38,885
And then I'll say.
This is equal to the Obama column,
81

81

00:05:38,885  -->  00:05:43,496
minus the Romney column.
82

82

00:05:43,496  -->  00:05:48,708
And then remember to
divide it by 100 because
83

83

00:05:48,708  -->  00:05:54,062
we're speaking in terms
of percentage points.
84

84

00:05:54,062  -->  00:05:56,794
So, after we create that column,
85

85

00:05:56,794  -->  00:06:01,234
what I'm gonna do is just
preview the data frame again.
86

86

00:06:04,790  -->  00:06:07,413
So what we're gonna do is scroll
all the way to the right, and
87

87

00:06:07,413  -->  00:06:09,810
we should see our new column here.
88

88

00:06:09,810  -->  00:06:14,410
Great, so now we see the percentage point
difference, between the two candidates.
89

89

00:06:14,410  -->  00:06:20,080
So remember that first one was zero,
since they both had 47% of the voters.
90

90

00:06:20,080  -->  00:06:20,580
Great.
91

91

00:06:22,560  -->  00:06:26,456
So, keep in mind that the difference
column is Obama minus Romney.
92

92

00:06:26,456  -->  00:06:31,225
So a positive difference indicates
a leaning towards Obama in the polls.
93

93

00:06:31,225  -->  00:06:34,115
And a negative difference means
a leaning towards Romney.
94

94

00:06:35,305  -->  00:06:38,485
So let's go ahead and see if we can
visualize how this sentiment, and
95

95

00:06:38,485  -->  00:06:40,245
difference changes over time.
96

96

00:06:41,345  -->  00:06:45,920
So we're gonna start by using Group By, to
group the polls by their start date, and
97

97

00:06:45,920  -->  00:06:47,530
then sorting it by that start date.
98

98

00:06:48,770  -->  00:06:52,959
So to show you what I mean by that,
let's go ahead and
99

99

00:06:52,959  -->  00:06:58,498
get our data frame, and now we're
gonna set it equal to the group by.
100

100

00:06:58,498  -->  00:07:06,239
What I mean by that is grab your data
frame, And then we're gonna group it by.
101

101

00:07:06,239  -->  00:07:08,758
The start date.
102

102

00:07:16,397  -->  00:07:17,393
So I'm going to group
it by the start date.
103

103

00:07:17,393  -->  00:07:21,551
I'm gonna set the index,
104

104

00:07:21,551  -->  00:07:26,380
as index equal to false.
105

105

00:07:26,380  -->  00:07:30,720
And what that does,
is it keeps the current index.
106

106

00:07:30,720  -->  00:07:37,300
So, they'll keep the 0, 1, 2, 3, 4 index,
that you see in our current data frame.
107

107

00:07:37,300  -->  00:07:41,450
So if I scroll to the left of our data
frame, you already have this index here.
108

108

00:07:41,450  -->  00:07:43,390
You can see it: 0, 1, 2, 3, 4.
109

109

00:07:43,390  -->  00:07:47,100
So I'll keep as index equal to false, so
110

110

00:07:47,100  -->  00:07:50,550
when I group by the start date,
isn't the index.
111

111

00:07:50,550  -->  00:07:52,231
We just keep our 0, 1, 2, 3, 4 index.
112

112

00:07:52,231  -->  00:07:56,133
If I put as index equals true,
then the start date would be the index,
113

113

00:07:56,133  -->  00:07:58,367
which isn't what we want in this case.
114

114

00:07:58,367  -->  00:08:00,622
We want to keep that 0, 1, 2, 3, 4 index.
115

115

00:08:00,622  -->  00:08:10,000
And then, I'll just take the mean
of the polls on that day.
116

116

00:08:10,000  -->  00:08:13,840
So if we look back at our data frame,
117

117

00:08:13,840  -->  00:08:16,470
notice that multiple polls
have the same end date.
118

118

00:08:17,580  -->  00:08:21,940
So what this command is doing,
it's saying, take your full data frame,
119

119

00:08:21,940  -->  00:08:26,820
group it by the start dates,
and then set the as_index
120

120

00:08:26,820  -->  00:08:31,810
equal to false, so you keep the 0, 1, 2,
3, 4 index, and then take the mean, or
121

121

00:08:31,810  -->  00:08:35,870
the average, of all the results of
those polls on that start date.
122

122

00:08:37,700  -->  00:08:44,280
So after doing that, I'm also gonna say
poll_df.head so we can see a preview.
123

123

00:08:44,280  -->  00:08:49,560
And there you have it, so
we have a nice start date.
124

124

00:08:49,560  -->  00:08:51,300
Look how we kept our original index here.
125

125

00:08:52,530  -->  00:08:57,700
We took the average of all the poles
on that particular start date,
126

126

00:08:58,970  -->  00:09:01,110
and then we also have
our difference column.
127

127

00:09:01,110  -->  00:09:01,620
Which is great.
128

128

00:09:03,010  -->  00:09:06,070
So now we can start plotting
the difference versus time.
129

129

00:09:06,070  -->  00:09:09,640
So this will actually be
pretty straight forward.
130

130

00:09:09,640  -->  00:09:15,385
So I'm going to set pole_df.plot, whoops.
131

131

00:09:20,037  -->  00:09:21,723
And I'm going to plot my start date.
132

132

00:09:26,173  -->  00:09:28,692
Versus my difference.
133

133

00:09:28,692  -->  00:09:36,342
I'm gonna set my figsize equal
to the tuple 12 by 4 just so
134

134

00:09:36,342  -->  00:09:40,930
it's a little more readable.
135

135

00:09:40,930  -->  00:09:45,200
Again, depending on your computer screen
you can set whatever figure size you want,
136

136

00:09:45,200  -->  00:09:46,770
you can mess around with
it until it looks good.
137

137

00:09:48,760  -->  00:09:54,827
I'll set my marker equal to a point,
just a lowercase o in this case.
138

138

00:09:57,590  -->  00:10:01,673
I'll set my line style equal to a dash.
139

139

00:10:04,823  -->  00:10:08,171
Now, remember, as far as marker,
line style, and color choices,
140

140

00:10:08,171  -->  00:10:10,268
you're free to choose whatever you want.
141

141

00:10:10,268  -->  00:10:14,253
This is where you can kind of wear
your data visualization hat, or
142

142

00:10:14,253  -->  00:10:18,679
graphic design hat, and really mess
around with what looks good to you.
143

143

00:10:22,255  -->  00:10:26,559
But now, in this case we can see
the percent change over time, so
144

144

00:10:26,559  -->  00:10:31,903
here on the very left we have 2009,
January, February, March 2009,
145

145

00:10:31,903  -->  00:10:37,300
and then here have October 2012,
so right before the election.
146

146

00:10:37,300  -->  00:10:42,212
And it looks like Obama was in
the lead for most of the year.
147

147

00:10:42,212  -->  00:10:47,090
Or actually,
most of the past three years, or
148

148

00:10:47,090  -->  00:10:50,050
whenever the polls happened to take place.
149

149

00:10:50,050  -->  00:10:53,290
Cuz remember, since we're doing Obama
minus Romney as the difference,
150

150

00:10:53,290  -->  00:10:58,360
anything positive means people were more
in favor of Obama in that particular pole.
151

151

00:10:58,360  -->  00:11:01,800
Now what's interesting is you see
these two big negative marks,
152

152

00:11:01,800  -->  00:11:04,550
which means Romney, for
whatever reason on those dates,
153

153

00:11:05,930  -->  00:11:08,620
something happened where he
got a big win in the poles.
154

154

00:11:08,620  -->  00:11:12,010
So it might be interesting to look
back on those particular dates,
155

155

00:11:12,010  -->  00:11:17,470
maybe use minimum, or some other function
to find those particular dates and
156

156

00:11:17,470  -->  00:11:19,730
look up in the news
what happened that day.
157

157

00:11:19,730  -->  00:11:24,370
So I'll leave that to you, to go and
find out why Romney polls were so
158

158

00:11:24,370  -->  00:11:26,960
strong on these two particular dates.
159

159

00:11:30,250  -->  00:11:35,840
So we know that some events did happened,
we know that the debates happened,
160

160

00:11:35,840  -->  00:11:41,820
the October 3rd, October 11th and October
22nd of 2012, there were some debates.
161

161

00:11:42,910  -->  00:11:45,620
So, what we're gonna do, is go ahead and
mark down those debates.
162

162

00:11:45,620  -->  00:11:48,170
So, we're gonna plot
some lines as markers and
163

163

00:11:48,170  -->  00:11:51,310
then zoom in on the one month of
October when the debates took place.
164

164

00:11:52,970  -->  00:11:55,560
So, in order to find where to
set the X limits For the figure.
165

165

00:11:55,560  -->  00:11:59,430
We need to find out where the index for
the month of October in 2012 is.
166

166

00:11:59,430  -->  00:12:02,910
I'll show you what I mean by that.
167

167

00:12:02,910  -->  00:12:07,085
I'll make a simple for
loop to find that row.
168

168

00:12:07,085  -->  00:12:11,453
So what I can do is say row_in.
169

169

00:12:11,453  -->  00:12:13,549
That'll be my row index.
170

170

00:12:15,620  -->  00:12:18,640
And I'll set my x-limit
to be an empty list.
171

171

00:12:20,100  -->  00:12:23,430
And now what I'm going to do is if
we look back at our data frame,
172

172

00:12:24,460  -->  00:12:29,230
I'm going to cycle through this
index until it finds 2012-10,
173

173

00:12:29,230  -->  00:12:34,030
meaning October of 2012, because
that's when the debates took place.
174

174

00:12:34,030  -->  00:12:42,031
Then it's going to print the row index,
175

175

00:12:42,031  -->  00:12:46,501
so I'm going to say for
176

176

00:12:46,501  -->  00:12:54,040
dates in poll_df Start Date, oops.
177

177

00:12:55,580  -->  00:13:00,460
If the first seven terms
178

178

00:13:02,810  -->  00:13:10,180
of that start date are equal to 2012-10.
179

179

00:13:10,180  -->  00:13:14,165
So I'm cycling through the index and
I'm saying,
180

180

00:13:14,165  -->  00:13:20,480
hey if the date in that Start Date
happened to be 2012-10, so in October.
181

181

00:13:23,569  -->  00:13:25,194
My xlimit,
since we're gonna be plotting this.
182

182

00:13:25,194  -->  00:13:32,468
I'm going to append, row in.
183

183

00:13:35,778  -->  00:13:42,140
So the current index, and
then I'm gonna say row_in.
184

184

00:13:42,140  -->  00:13:43,550
I'll add a 1 to its value.
185

185

00:13:44,650  -->  00:13:49,670
Otherwise if it didn't find
the October start date, go ahead and
186

186

00:13:50,950  -->  00:13:52,005
keep my counter running.
187

187

00:13:52,005  -->  00:13:55,790
So what row_n is doing is it's basically
188

188

00:13:55,790  -->  00:13:59,109
counting the index row as it
goes through that four loop.
189

189

00:14:03,650  -->  00:14:08,642
And then what we can do after
that is print the minimum value
190

190

00:14:08,642  -->  00:14:13,420
of xlimit and
191

191

00:14:13,420  -->  00:14:16,880
print the max value of xlimit.
192

192

00:14:16,880  -->  00:14:21,360
So I'm going to run this
193

193

00:14:22,660  -->  00:14:26,120
and let me just break down one more
time what this for loop was doing.
194

194

00:14:26,120  -->  00:14:30,520
So we needed to find out where to set
the xlimits in this upper figure,
195

195

00:14:30,520  -->  00:14:32,690
right here,
to only get the month of October.
196

196

00:14:33,738  -->  00:14:38,920
Now remember xlimit, we can define it
by using the index in our data frame.
197

197

00:14:39,940  -->  00:14:43,800
So we're trying to find where the start
date was equal to October 2012.
198

198

00:14:43,800  -->  00:14:48,350
So what I did was,
I made a for loop that said for
199

199

00:14:48,350  -->  00:14:51,920
every date in that start date column,
200

200

00:14:51,920  -->  00:14:56,690
if the first seven terms of that
start date were equal to 2012-10, or
201

201

00:14:56,690  -->  00:15:02,046
October 2012, go ahead and
append to my xlimit empty
202

202

00:15:02,046  -->  00:15:07,500
list that row index and then add one to
the row index to keep my count going.
203

203

00:15:07,500  -->  00:15:12,280
Otherwise, if you didn't find anything,
just add one to my row index.
204

204

00:15:12,280  -->  00:15:17,216
And then I'm gonna have xlimit be a list
of basically the index of the entire
205

205

00:15:17,216  -->  00:15:21,470
month of Of October and then I'll have
329 as the minimum and 356 as the max.
206

206

00:15:21,470  -->  00:15:26,880
So to show you why we need to do
that lets go ahead and plot out
207

207

00:15:28,380  -->  00:15:32,723
our first plot so I'm going to edit
copy edit paste what we did up here.
208

208

00:15:32,723  -->  00:15:34,697
Edit copy.
209

209

00:15:36,423  -->  00:15:37,176
And I'm gonna paste it here.
210

210

00:15:37,176  -->  00:15:44,344
We're keeping everything the same except
now, I know where to set my xlimits.
211

211

00:15:44,344  -->  00:15:48,376
I'll set my xlimits at the first index,
212

212

00:15:48,376  -->  00:15:53,358
329, and then set my second xlimit at 356,
213

213

00:15:53,358  -->  00:16:00,841
because remember that's what the minimum
and the max were for my xlimits.
214

214

00:16:00,841  -->  00:16:01,918
Limits in that four loop.
215

215

00:16:05,210  -->  00:16:12,236
And then I need to close off that
parenthesis, let's go ahead and, Run that.
216

216

00:16:12,236  -->  00:16:17,485
Looks like I'm forgetting
a parenthesis here.
217

217

00:16:19,645  -->  00:16:23,845
So we have,
a non key word after argument key word.
218

218

00:16:23,845  -->  00:16:28,369
We need to set x-limit
equal to that tuple.
219

219

00:16:28,369  -->  00:16:31,676
Now let's run it, here we go.
220

220

00:16:31,676  -->  00:16:33,450
Okay great.
221

221

00:16:33,450  -->  00:16:34,680
So we did that four loop.
222

222

00:16:34,680  -->  00:16:37,680
We found where the index is
equal to the month of October,
223

223

00:16:37,680  -->  00:16:39,360
both the start and the end.
224

224

00:16:39,360  -->  00:16:41,480
And then I repeated that same plot here,
225

225

00:16:41,480  -->  00:16:46,440
except I set my X limits to
those index points, 329 and 356.
226

226

00:16:46,440  -->  00:16:49,100
And I can see we have
the entire month of October.
227

227

00:16:49,100  -->  00:16:54,370
October first on the left all the way
to October thirty-first on the right.
228

228

00:16:54,370  -->  00:16:59,480
Great so looking up on Wikipedia I saw
the debate dates were on October third,
229

229

00:16:59,480  -->  00:17:01,000
October 11th and October 22nd.
230

230

00:17:01,000  -->  00:17:05,600
So, now we're gonna plot some lines
on top of this plot right here,
231

231

00:17:06,750  -->  00:17:11,030
and see where we can find
the markers of the debates and
232

232

00:17:11,030  -->  00:17:15,280
if there we any changes to
the sentiment in the voters.
233

233

00:17:15,280  -->  00:17:20,750
So, I'm going to keep doing
it in the above cell,
234

234

00:17:20,750  -->  00:17:24,136
so i'm gonna say, plt., and
235

235

00:17:24,136  -->  00:17:29,235
to do a vertical line,
I can just say axvline.
236

236

00:17:29,235  -->  00:17:34,120
And we're going to be
making three of these.
237

237

00:17:35,580  -->  00:17:37,960
So I'm going to copy and
paste this three times.
238

238

00:17:40,120  -->  00:17:44,879
So this first one is going to
be the debate on October 3rd.
239

239

00:17:47,340  -->  00:17:50,260
The second one's gonna be
the debate on October 11th.
240

240

00:17:53,090  -->  00:17:56,580
And the third one's gonna be
the debate on October 22nd.
241

241

00:17:56,580  -->  00:18:00,990
So what do I need to put in here?
242

242

00:18:02,060  -->  00:18:06,650
Well, I'll need to set my X marker to
where that line is actually gonna occur.
243

243

00:18:06,650  -->  00:18:08,945
So where should I put my vertical line?
244

244

00:18:08,945  -->  00:18:13,280
Well, for October 3rd I know my index for
245

245

00:18:13,280  -->  00:18:17,810
October 1st was at 329
with that four loop.
246

246

00:18:17,810  -->  00:18:22,545
So if that's It's the first then
I just need to add two days to it
247

247

00:18:22,545  -->  00:18:27,405
to get to October 3rd,
and then I'll set my line
248

248

00:18:27,405  -->  00:18:31,777
width equal to four.
249

249

00:18:34,010  -->  00:18:37,520
And I'll set it's color equal to grey.
250

250

00:18:38,870  -->  00:18:42,990
And remember, you can set the line width
and colors to whatever you feel like.
251

251

00:18:42,990  -->  00:18:46,470
Go ahead and mess around with it,
just mess with your visualizations.
252

252

00:18:46,470  -->  00:18:50,104
So I'm going to copy and paste that
253

253

00:18:50,104  -->  00:18:54,287
information into the rest of
the vertical line arguments.
254

254

00:18:54,287  -->  00:18:57,030
But remember,
now I have to just change the dates.
255

255

00:18:57,030  -->  00:18:58,220
So if I'm looking at October 11th,
256

256

00:18:58,220  -->  00:19:02,910
that's gonna be the first
index plus ten more days.
257

257

00:19:02,910  -->  00:19:03,980
And if I'm looking at October 22nd,
258

258

00:19:03,980  -->  00:19:08,150
that's gonna be that first
October 1st index plus 21 days.
259

259

00:19:10,690  -->  00:19:11,470
Let's go ahead and run that.
260

260

00:19:11,470  -->  00:19:16,030
And there you have it,
now we have markers at every debate point.
261

261

00:19:17,650  -->  00:19:23,100
So it's interesting here is it
looks like after the first debate,
262

262

00:19:23,100  -->  00:19:25,310
sentiment for Obama increased.
263

263

00:19:25,310  -->  00:19:27,700
Which is kind of surprising to me.
264

264

00:19:27,700  -->  00:19:29,930
And after the second debate,
265

265

00:19:29,930  -->  00:19:34,070
it looks like Mitt Romney was
more favorable in that pole.
266

266

00:19:34,070  -->  00:19:36,700
And after the third debate,
everyone was pretty even.
267

267

00:19:36,700  -->  00:19:39,720
This surprises me given that
268

268

00:19:39,720  -->  00:19:43,230
if you remember how the candidates
performed at the debates.
269

269

00:19:43,230  -->  00:19:46,350
I remember Obama performing
poorly in the first debate and
270

270

00:19:46,350  -->  00:19:47,550
much better in the second two.
271

271

00:19:49,150  -->  00:19:53,260
But, that's not what the polls here
show as far as letter sentiment.
272

272

00:19:53,260  -->  00:19:56,590
But it's important to keep in
mind the geographical location
273

273

00:19:56,590  -->  00:20:00,680
of people who are being polled and
what their occupations were, etc etc.
274

274

00:20:00,680  -->  00:20:05,630
So, there's a lot of the various factors
that could go into the poll data.
275

275

00:20:07,020  -->  00:20:10,380
So let's really remember to remember,
excuse me,
276

276

00:20:10,380  -->  00:20:14,180
it's really important to remember all
the different factors that can go
277

277

00:20:14,180  -->  00:20:16,890
into the people being polled and
their sentiment.
278

278

00:20:18,230  -->  00:20:22,420
So I'll stop that here, and I'll let you
go ahead and mess around morph this poll
279

279

00:20:22,420  -->  00:20:26,530
data and see if you can get any more
insights that you want to answer your own
280

280

00:20:26,530  -->  00:20:30,050
questions to, and in the next video
we'll look at the donor data set.
281

281

00:20:31,140  -->  00:20:31,650
Okay.
282

282

00:20:31,650  -->  00:20:32,550
Thanks, and I'll see you there.
