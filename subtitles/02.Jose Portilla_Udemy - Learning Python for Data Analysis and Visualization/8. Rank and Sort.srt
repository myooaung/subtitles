1
1

00:00:01,220  -->  00:00:02,830
Hey guys, welcome to Lecture 21.
2

2

00:00:02,830  -->  00:00:06,270
In this lecture we're going to be
learning ranking and sorting, so
3

3

00:00:06,270  -->  00:00:08,110
how to use rank and sort.
4

4

00:00:08,110  -->  00:00:11,670
Let's go ahead and check it out.
5

5

00:00:11,670  -->  00:00:14,630
First off,
we're gonna import the usual stuff.
6

6

00:00:14,630  -->  00:00:15,720
Import NumPy as np.
7

7

00:00:17,320  -->  00:00:20,676
From pandas, we'll import Series and
8

8

00:00:20,676  -->  00:00:25,950
Dataframe and
then finally we'll import pandas as pd.
9

9

00:00:27,170  -->  00:00:29,250
Alt enter, take it to a new cell.
10

10

00:00:29,250  -->  00:00:31,165
All right, cool.
So as usual,
11

11

00:00:31,165  -->  00:00:35,490
how about we make a series to play with?
12

12

00:00:36,540  -->  00:00:40,650
So I'll make it a series, and
I'll call Python's range function.
13

13

00:00:42,150  -->  00:00:49,692
I'll get three points, and then I'll pass
an index argument and we'll say it's C,
14

14

00:00:49,692  -->  00:00:54,849
A, B index, and
let's just see what that looks like now.
15

15

00:00:54,849  -->  00:01:01,291
And the reason it's not an A, B,
C order, is so it can actually use sort.
16

16

00:01:01,291  -->  00:01:06,240
So, if I wanted to sort this
index how would I do it?
17

17

00:01:08,450  -->  00:01:13,150
It's really easy,
you just take your series name and
18

18

00:01:13,150  -->  00:01:15,190
then you call sort index on it.
19

19

00:01:15,190  -->  00:01:19,740
Now close parentheses so you don't have
to pass any additional arguments there.
20

20

00:01:19,740  -->  00:01:21,880
Let's go ahead and see what happened.
21

21

00:01:21,880  -->  00:01:22,400
Awesome.
22

22

00:01:22,400  -->  00:01:23,960
So, now my index is sorted.
23

23

00:01:23,960  -->  00:01:25,410
A, B, C.
24

24

00:01:25,410  -->  00:01:31,040
And it's sorted its values associated
with that index along with it.
25

25

00:01:31,040  -->  00:01:36,440
Let's say you wanted to order a series
by its values, not by its index.
26

26

00:01:37,650  -->  00:01:38,560
Well you can do that, too.
27

27

00:01:39,670  -->  00:01:44,880
So if I wanted the order zero, one,
two, basically what we had before,
28

28

00:01:44,880  -->  00:01:52,961
I can take my series and what I can call
on it is order with closed parentheses.
29

29

00:01:54,570  -->  00:01:57,690
And order will order it
by the values themselves.
30

30

00:01:57,690  -->  00:01:59,790
Zero, one, two.
When sort index,
31

31

00:01:59,790  -->  00:02:02,520
we'll sort it by the index values A, B, C.
32

32

00:02:02,520  -->  00:02:10,120
So that's sorting, and
let's get an idea of how ranking works.
33

33

00:02:10,120  -->  00:02:15,480
So in order to do that, I'm gonna import,
as we've done before in the past,
34

34

00:02:15,480  -->  00:02:19,770
from the NumPy random library,
I'll import randn.
35

35

00:02:19,770  -->  00:02:25,670
Let's go ahead and do that and
let's then make a new series,
36

36

00:02:27,470  -->  00:02:32,090
and the series is gonna
be ten random numbers.
37

37

00:02:32,090  -->  00:02:36,680
So, I'll pass in the ten argument,
and we'll see what that looks like.
38

38

00:02:39,050  -->  00:02:43,170
Awesome, so
now we have 10 random numbers, and
39

39

00:02:43,170  -->  00:02:48,750
let's say I wanted to sort them and
see how they rank.
40

40

00:02:48,750  -->  00:02:55,037
So let's just sort them scr2.sort.
41

41

00:02:55,037  -->  00:03:00,400
And now let's check it out.
42

42

00:03:00,400  -->  00:03:01,480
All right.
43

43

00:03:01,480  -->  00:03:08,640
So now we've sorted all the values in
this series from lowest to highest.
44

44

00:03:10,710  -->  00:03:14,780
That means that every value
in this series had a rank.
45

45

00:03:15,920  -->  00:03:19,940
If you notice the index
values are all jumbled up,
46

46

00:03:19,940  -->  00:03:23,770
because they were in order at first,
but the values weren't.
47

47

00:03:23,770  -->  00:03:24,480
So when you sorted it,
48

48

00:03:24,480  -->  00:03:29,600
it sorted it by value, and now your
index values are a little jumbled up.
49

49

00:03:29,600  -->  00:03:34,830
What if you wanted to know the actual
ranking of each value in the series?
50

50

00:03:36,430  -->  00:03:41,463
Well, I can show you by
calling rank on our series,
51

51

00:03:41,463  -->  00:03:46,274
and you notice rank then
shows in perfect order.
52

52

00:03:46,274  -->  00:03:49,094
One, two, three, four, five,
six, seven, eight, nine, ten.
53

53

00:03:49,094  -->  00:03:53,240
So this rank value is what
is actually being sorted.
54

54

00:03:54,700  -->  00:03:58,008
Previously, all these
numbers had a rank value and
55

55

00:03:58,008  -->  00:04:02,570
then what sort does is it takes the rank
value and just puts it in ascending order.
56

56

00:04:04,430  -->  00:04:06,530
And that's how ranking and sorting works.
57

57

00:04:09,680  -->  00:04:12,977
So on the left column,
we see the original index value and
58

58

00:04:12,977  -->  00:04:14,980
on the right we see its rank value.
59

59

00:04:17,120  -->  00:04:20,870
Let's go ahead and just to get a clearer
picture on that we'll do it one more time.
60

60

00:04:22,720  -->  00:04:24,140
We'll make a third series.
61

61

00:04:26,480  -->  00:04:28,130
I'll call another random ten.
62

62

00:04:32,200  -->  00:04:33,160
See what that looks like.
63

63

00:04:33,160  -->  00:04:36,280
Okay, so I have ten random numbers.
64

64

00:04:36,280  -->  00:04:40,426
Let's go ahead and check out their
rank right now before I sort them.
65

65

00:04:40,426  -->  00:04:46,140
Oops, sorry, series three.
66

66

00:04:46,140  -->  00:04:49,720
All right, so you see the ranking,
while the index is in perfect order,
67

67

00:04:49,720  -->  00:04:50,966
the rankings are all over the place.
68

68

00:04:50,966  -->  00:04:54,960
So what will happen when I sort
69

69

00:04:56,970  -->  00:05:03,810
and then check the rank, you'll see
that the rankings are now in order,
70

70

00:05:03,810  -->  00:05:10,710
but the index that was associated
to each value is all mixed up.
71

71

00:05:10,710  -->  00:05:13,200
And then let's check out what
the series actually looks like now.
72

72

00:05:13,200  -->  00:05:14,470
Series three.
73

73

00:05:14,470  -->  00:05:18,730
And like we saw before,
everything is now sorted by its rank.
74

74

00:05:18,730  -->  00:05:21,250
So that's the relationship
between rank and sort.
75

75

00:05:21,250  -->  00:05:24,850
Each of these values has a ranking and
sort just ranks them.
76

76

00:05:26,360  -->  00:05:28,430
Sort just ranks them
by that ranking value.
77

77

00:05:28,430  -->  00:05:30,220
All right, cool.
78

78

00:05:31,500  -->  00:05:33,040
So next up on L ecture 22,
79

79

00:05:33,040  -->  00:05:36,650
we'll learn about using descriptive
statistics on data frames.
80

80

00:05:36,650  -->  00:05:37,170
I'll see you there.
