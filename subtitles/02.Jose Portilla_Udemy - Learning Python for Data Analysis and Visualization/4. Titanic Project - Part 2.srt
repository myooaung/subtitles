1
1

00:00:03,878  -->  00:00:05,719
Hey everyone, this is part two.
2

2

00:00:05,719  -->  00:00:08,202
So in the last part of the first project,
3

3

00:00:08,202  -->  00:00:12,660
we looked at a general overview of
the data and we're still trying to look
4

4

00:00:12,660  -->  00:00:16,990
into further details of the first
question, Who are the passengers?
5

5

00:00:17,990  -->  00:00:23,170
So let's go ahead and continue on
with the KDE plots we're gonna make.
6

6

00:00:23,170  -->  00:00:27,360
So what we wanna do is use
a facet grid with Seaborn,
7

7

00:00:27,360  -->  00:00:31,080
in addition to the pandas
data frame we made.
8

8

00:00:31,080  -->  00:00:32,540
So how can we do that?
9

9

00:00:32,540  -->  00:00:37,775
Well, we can set an object called fig
as the figure, and then call sns for
10

10

00:00:37,775  -->  00:00:42,270
Seaborn, and
then Facetgrid is what we're gonna use.
11

11

00:00:42,270  -->  00:00:49,320
And facetgrid allows you to do
multiple plots on one figure.
12

12

00:00:49,320  -->  00:00:54,413
So the first argument I'm gonna
pass through is our data frame,
13

13

00:00:54,413  -->  00:01:01,550
and then in this case I'll have the hue
be sex or the gender of the passengers.
14

14

00:01:01,550  -->  00:01:05,492
And I'm going to set one more argument,
aspect = 4, and
15

15

00:01:05,492  -->  00:01:07,996
that will just set the aspect ratio.
16

16

00:01:10,356  -->  00:01:15,098
And then what I'm gonna do after that is
I'm gonna use map to plot all the possible
17

17

00:01:15,098  -->  00:01:18,455
KDE plots for
the age columns by hue choice.
18

18

00:01:18,455  -->  00:01:24,640
So what I mean by that is if I say,
fig.map method, I'm going to map
19

19

00:01:25,990  -->  00:01:33,198
a bunch of KDE plots, and
those plots will use the age column.
20

20

00:01:33,198  -->  00:01:38,420
And the KDE plots will have shade=True.
21

21

00:01:38,420  -->  00:01:42,010
So these are gonna be the multiple
KDE plots based on age.
22

22

00:01:43,920  -->  00:01:49,120
And then what I'm gonna do is
before I click Shift+Enter so
23

23

00:01:49,120  -->  00:01:54,710
we can see the plots, is I'm gonna set
the x max limit by the oldest passenger.
24

24

00:01:54,710  -->  00:01:59,810
So I'll say the oldest,
make an object called oldest.
25

25

00:01:59,810  -->  00:02:04,498
And I'll have that be
26

26

00:02:04,498  -->  00:02:09,189
equal to the max age.
27

27

00:02:09,189  -->  00:02:16,310
And since we know no one can be negative
years old, I will set the limit,
28

28

00:02:16,310  -->  00:02:21,788
the x limit, so
I can do that by putting the set method.
29

29

00:02:21,788  -->  00:02:27,857
So fig.set(xlim = and we'll have it be,
30

30

00:02:27,857  -->  00:02:33,280
just so we can input, the 0 to oldest.
31

31

00:02:33,280  -->  00:02:33,780
Oops.
32

32

00:02:36,842  -->  00:02:42,910
And then we'll have to manually add
a legend just by calling add_legend.
33

33

00:02:42,910  -->  00:02:43,950
All right, so what did I do here?
34

34

00:02:45,010  -->  00:02:47,539
Let's take a quick look at
it before we click Enter.
35

35

00:02:47,539  -->  00:02:50,943
We created an object called fig or
figure and
36

36

00:02:50,943  -->  00:02:54,439
that was done by using Seaborn.facetgrid.
37

37

00:02:54,439  -->  00:03:00,856
And we've said the titanic_df for
our data frame we're using,
38

38

00:03:00,856  -->  00:03:05,850
set the hue equal to sex, so male, female.
39

39

00:03:05,850  -->  00:03:08,480
And then we changed the aspect ratio so
it'll look nice,
40

40

00:03:08,480  -->  00:03:10,654
a little more stretched out so
it fits our window well.
41

41

00:03:11,655  -->  00:03:15,855
And then we mapped the KDE
plots from the age column.
42

42

00:03:17,775  -->  00:03:21,075
Then we set all this
equal to the max age and
43

43

00:03:21,075  -->  00:03:25,125
we set the x limits from 0 to the oldest,
and we manually added a legend.
44

44

00:03:25,125  -->  00:03:26,765
Let's go ahead and see if that all worked.
45

45

00:03:28,540  -->  00:03:29,140
And there we have it.
46

46

00:03:29,140  -->  00:03:34,290
So now we have a KDE plot on
the ages on male versus female.
47

47

00:03:34,290  -->  00:03:40,470
We could've done the same thing using that
person column we made to include children.
48

48

00:03:40,470  -->  00:03:44,487
So to do that, I'm just gonna Edit > Copy,
49

49

00:03:44,487  -->  00:03:48,570
Edit > Paste all that old information.
50

50

00:03:48,570  -->  00:03:55,400
But in this case what I'm gonna change
is the hue argument in the beginning.
51

51

00:03:55,400  -->  00:03:59,950
In this case, the last case, the hue
was done by female versus male, but
52

52

00:03:59,950  -->  00:04:04,800
if I wanted to include children
separately, I'll pass the hue as person.
53

53

00:04:04,800  -->  00:04:06,449
Remember that column we
made in the last video.
54

54

00:04:09,350  -->  00:04:14,970
And now I can see the age distribution for
the children, and it cuts off, and
55

55

00:04:14,970  -->  00:04:17,460
then we have the distribution for
the rest of the males and females.
56

56

00:04:17,460  -->  00:04:22,280
Now, remember, since this is the KDE plot,
it's subject to the bandwidths,
57

57

00:04:22,280  -->  00:04:28,340
which is why you still have the KDE
plot going past that 16 mark,
58

58

00:04:28,340  -->  00:04:30,290
but in reality, that's just the bandwidth.
59

59

00:04:31,840  -->  00:04:35,160
Okay, what else can we do?
60

60

00:04:35,160  -->  00:04:38,240
We can do this exact same thing for
classes, so
61

61

00:04:38,240  -->  00:04:41,580
see how the age ranged by class.
62

62

00:04:41,580  -->  00:04:46,380
So again I can just Edit > Copy,
Edit > Paste that figure.
63

63

00:04:46,380  -->  00:04:52,970
And then set my class hue, or excuse me,
my hue to my class column, p class.
64

64

00:04:54,345  -->  00:04:55,530
Shift+Enter and take a look.
65

65

00:04:57,210  -->  00:05:00,380
And so now we can see how
the ages ranged by class.
66

66

00:05:01,430  -->  00:05:06,200
So, interestingly, that first class
had a really normal distribution.
67

67

00:05:06,200  -->  00:05:06,860
But the second and
68

68

00:05:06,860  -->  00:05:12,470
third class definitely skewed much more
towards the 20 through 30 range, and
69

69

00:05:12,470  -->  00:05:17,060
as we saw earlier in the last lecture, the
average age was about 30 on the Titanic.
70

70

00:05:18,900  -->  00:05:22,680
So we've gotten a pretty good picture of
who the passengers were based on sex, age,
71

71

00:05:22,680  -->  00:05:26,600
and class, so
we're gonna move onto our second question.
72

72

00:05:26,600  -->  00:05:30,250
What deck were the passengers on and
how does that relate to their class?
73

73

00:05:31,420  -->  00:05:31,920
Whoops.
74

74

00:05:33,220  -->  00:05:34,720
So in order to do that,
let's just go ahead and
75

75

00:05:34,720  -->  00:05:36,160
take a quick look at our dataset again.
76

76

00:05:38,590  -->  00:05:41,360
So I'm gonna do that by saying titanic_df,
and
77

77

00:05:43,430  -->  00:05:48,610
call just the heads to do the preview,
first five rows, okay.
78

78

00:05:48,610  -->  00:05:51,958
So if we notice,
we have this cabin column.
79

79

00:05:51,958  -->  00:05:55,353
So we can see that cabin column
is information on the deck, but
80

80

00:05:55,353  -->  00:05:57,197
it also has several null values.
81

81

00:05:57,197  -->  00:05:58,978
So we're gonna have to drop them.
82

82

00:05:58,978  -->  00:06:05,128
So the way to do that is we'll
make a new object called deck,
83

83

00:06:05,128  -->  00:06:10,294
and I'm gonna have that
be equal to titanic_df,
84

84

00:06:10,294  -->  00:06:14,849
and gonna have that be
equal to my cabin row.
85

85

00:06:17,428  -->  00:06:20,090
And then,
as we've learned in previous lectures,
86

86

00:06:20,090  -->  00:06:23,429
I'm just gonna drop all the null
values using the dropna method.
87

87

00:06:23,429  -->  00:06:27,719
Okay, and now let's take a quick preview
88

88

00:06:27,719  -->  00:06:33,398
of Of the decks.
89

89

00:06:33,398  -->  00:06:39,678
Okay, so now you can see it's gotten
rid of all those null values.
90

90

00:06:39,678  -->  00:06:43,890
Now we're just seeing a preview, just the
first five that didn't have null values.
91

91

00:06:45,440  -->  00:06:50,430
And you can see the information
here is the cabin deck,
92

92

00:06:50,430  -->  00:06:55,570
so it's A, B, C, D, E and
then there's the cabin number.
93

93

00:06:55,570  -->  00:07:00,331
So what we wanna do is we only need the
first letter of the deck to classify its
94

94

00:07:00,331  -->  00:07:03,280
level, A, B, C, D, E, F, G.
95

95

00:07:03,280  -->  00:07:07,120
So let's grab that letter for
the deck using a simple for loop.
96

96

00:07:08,680  -->  00:07:12,363
So I'll send empty list called Levels.
97

97

00:07:16,303  -->  00:07:19,903
And then what I'll do is loop
to grab that first letter.
98

98

00:07:19,903  -->  00:07:23,483
So I'll say for level in deck.
99

99

00:07:28,963  -->  00:07:33,963
I'll append the first letter here.
100

100

00:07:36,683  -->  00:07:39,164
So, let's take a quick look
at what this loop is doing.
101

101

00:07:39,164  -->  00:07:41,680
I created an empty list called levels.
102

102

00:07:41,680  -->  00:07:44,310
And I said, for every level in deck, and
103

103

00:07:44,310  -->  00:07:50,040
remember deck was just the cabin column
with all the null values dropped.
104

104

00:07:50,040  -->  00:07:57,600
Go ahead and grab that first letters or
first item in that string, if you will.
105

105

00:07:57,600  -->  00:08:02,720
So C, C, E, G, or C here and
then append it to that levels list.
106

106

00:08:04,190  -->  00:08:09,211
And then once I have that, I can reset
the data frame and use a factor plot.
107

107

00:08:09,211  -->  00:08:15,435
So I can say, let's make another
108

108

00:08:15,435  -->  00:08:20,772
data frame called cabin_df
109

109

00:08:20,772  -->  00:08:25,886
= DataFrame(levels),
110

110

00:08:25,886  -->  00:08:33,682
cabin_df.columns = ['Cabin'].
111

111

00:08:33,682  -->  00:08:35,941
And then we can use a factor plot.
112

112

00:08:35,941  -->  00:08:40,541
And I'll pass the cabin column.
113

113

00:08:44,001  -->  00:08:49,181
Set my data argument as that new
data frame we just made, cabin_df.
114

114

00:08:49,181  -->  00:08:52,401
And another little thing I'm
gonna do is set the pallete.
115

115

00:08:55,941  -->  00:09:01,001
And in this case,
I'll set the palette as winter_d.
116

116

00:09:01,001  -->  00:09:05,640
So a little note about
this palette business.
117

117

00:09:05,640  -->  00:09:10,040
If you look up matplotlib plus colormaps,
118

118

00:09:10,040  -->  00:09:16,260
you can get a range of
palettes that you can be used.
119

119

00:09:16,260  -->  00:09:22,310
So, to show you what I mean,
I will actually just go to that link.
120

120

00:09:22,310  -->  00:09:28,360
So, if you go to
a matplotlib.org/user/colormaps,
121

121

00:09:28,360  -->  00:09:30,540
there's a bunch of different
colormaps you can use.
122

122

00:09:30,540  -->  00:09:33,650
So this is a great little tool for
data visualization.
123

123

00:09:33,650  -->  00:09:37,960
You can choose the color maps and
this case, I chose winter.
124

124

00:09:37,960  -->  00:09:43,300
And you can make these color maps darker
by adding _d to that color map name.
125

125

00:09:43,300  -->  00:09:47,170
So in this case, I chose that winter
color map and added underscore d.
126

126

00:09:48,590  -->  00:09:52,290
So before I click Enter to see this factor
plot, let's just go over, see what we did.
127

127

00:09:53,620  -->  00:09:56,720
So, I created this deck and
128

128

00:09:56,720  -->  00:10:00,880
then that was the cabin column
with all the null values dropped.
129

129

00:10:00,880  -->  00:10:04,950
Did a quick preview of it to make sure it
worked, then created an empty list called
130

130

00:10:04,950  -->  00:10:10,820
levels, and then for every level in
that deck, I appended that first letter.
131

131

00:10:10,820  -->  00:10:17,010
Then I created a data frame from that
list, set the columns equal to cabin.
132

132

00:10:17,010  -->  00:10:21,420
There's only one column in that data
frame, and then I'm gonna plot it out.
133

133

00:10:21,420  -->  00:10:25,727
So this should give us a factored plot or
a bar plot of all the cabins and
134

134

00:10:25,727  -->  00:10:29,240
how many people were in them,
so the different counts.
135

135

00:10:29,240  -->  00:10:30,440
Let's go ahead and see if it worked.
136

136

00:10:32,330  -->  00:10:33,870
And there you have it.
137

137

00:10:33,870  -->  00:10:35,850
So, if you notice something
weird happened here.
138

138

00:10:35,850  -->  00:10:39,380
At the very end, we have this T Cabin.
139

139

00:10:39,380  -->  00:10:44,012
So that value doesn't make sense, so
we're gonna have to drop it out, and we
140

140

00:10:44,012  -->  00:10:48,450
can read the find cabin DF as everything
but where the rows were equal to T.
141

141

00:10:50,220  -->  00:10:51,253
So to do that.
142

142

00:10:53,952  -->  00:11:01,287
I can just say, cabin_df = cabin_df[ and
143

143

00:11:01,287  -->  00:11:07,855
then I can say where it's not equal to T.
144

144

00:11:11,615  -->  00:11:16,305
And then I will replot it by Edit > Copy,
Edit > Paste.
145

145

00:11:18,140  -->  00:11:19,131
Same thing.
146

146

00:11:19,131  -->  00:11:22,087
This case, I'll just go ahead and
choose a different palette so
147

147

00:11:22,087  -->  00:11:23,411
we can distinguish the two.
148

148

00:11:23,411  -->  00:11:27,792
So before I click on through,
I'll just go over what I did.
149

149

00:11:27,792  -->  00:11:32,636
I redefined that same cabin
data frame as the cabin data
150

150

00:11:32,636  -->  00:11:36,780
frame where everything does not equal T.
151

151

00:11:36,780  -->  00:11:41,510
So to get rid of those random T
values there, and there you have it.
152

152

00:11:41,510  -->  00:11:44,180
Now you have the count or a histogram,
153

153

00:11:44,180  -->  00:11:49,060
if you will, of A, B, C, D,
E, F, and G of the cabins.
154

154

00:11:50,070  -->  00:11:54,352
Cool, and like I said before,
you can go ahead and choose color maps,
155

155

00:11:54,352  -->  00:11:59,012
whichever ones you like or think look
good, for your data visualizations.
156

156

00:12:01,391  -->  00:12:05,872
All right, let's go ahead and
take another look at our original data.
157

157

00:12:05,872  -->  00:12:12,092
So I can do this by
saying titanic_df.head.
158

158

00:12:14,792  -->  00:12:23,050
Okay, so if you note here the embarked
column has values of C, Q and S.
159

159

00:12:23,050  -->  00:12:26,029
There's no Q right now, but if you went
further along, you'd see Q values.
160

160

00:12:27,060  -->  00:12:32,004
Reading about the project on Cagle,
over here, you'll
161

161

00:12:32,004  -->  00:12:37,990
notice that the port of embarkment or
embarkation in
162

162

00:12:37,990  -->  00:12:43,580
this case what they call it,
these letters stand for towns or cities.
163

163

00:12:43,580  -->  00:12:50,630
So, C is for Cherbourg, Q is for
Queenstown, and S is for Southampton.
164

164

00:12:50,630  -->  00:12:56,240
So if we go back, we can make a quick
factor plot to check out the results
165

165

00:12:56,240  -->  00:12:58,090
of where people came from.
166

166

00:12:59,465  -->  00:13:04,855
So if you remember, our third question
was, where did the passengers come from?
167

167

00:13:04,855  -->  00:13:08,777
So in order to do that,
we can just make a quick factor plot.
168

168

00:13:08,777  -->  00:13:14,237
So I'm gonna say sns.factorplot.
169

169

00:13:14,237  -->  00:13:18,537
In this case,
I'm gonna pass the embarked column.
170

170

00:13:21,857  -->  00:13:31,257
Set my data equal to
titanic_df.original data frame.
171

171

00:13:31,257  -->  00:13:36,325
And let's go ahead and
172

172

00:13:36,325  -->  00:13:42,470
classify the hue by class.
173

173

00:13:43,910  -->  00:13:49,200
So what this means is we're gonna
see all the cities that embarked and
174

174

00:13:49,200  -->  00:13:53,640
see who from which class
came on on which cities.
175

175

00:13:54,810  -->  00:13:58,743
So the certain cities have a lot of
third-class people, certain cities have
176

176

00:13:58,743  -->  00:14:03,300
a lot of first-class or second-class
people embarking on those cities.
177

177

00:14:03,300  -->  00:14:09,600
And I'm just gonna state the order here
using the x_order argument to be C,
178

178

00:14:09,600  -->  00:14:14,540
Q, and S.
179

179

00:14:16,010  -->  00:14:16,980
So, let's run that.
180

180

00:14:16,980  -->  00:14:18,640
Unexpected end of line while parsing.
181

181

00:14:18,640  -->  00:14:23,270
I forgot to add a parentheses at the end,
whoops.
182

182

00:14:23,270  -->  00:14:25,920
Let's just check what
we need to debug here.
183

183

00:14:27,085  -->  00:14:29,175
And it's cuz I don't
have an equal sign there.
184

184

00:14:30,245  -->  00:14:31,005
Put that list.
185

185

00:14:31,005  -->  00:14:32,165
Okay.
186

186

00:14:32,165  -->  00:14:37,190
So I made a factor plot, passed
the embarked column, set my data equal to
187

187

00:14:37,190  -->  00:14:42,375
titanic_df, my data frame,
selected the class as the hue,
188

188

00:14:42,375  -->  00:14:45,350
and then defined the order that
my cities would show up in.
189

189

00:14:47,120  -->  00:14:48,580
So here's some interesting finds.
190

190

00:14:48,580  -->  00:14:50,244
It looks like in Queenstown,
191

191

00:14:50,244  -->  00:14:54,510
almost all the passengers that
boarded there were third-class.
192

192

00:14:54,510  -->  00:14:58,507
And what you might be thinking
of as a data scientist is,
193

193

00:14:58,507  -->  00:15:03,269
what are the economics of the town
of Queenstown in that period that
194

194

00:15:03,269  -->  00:15:08,132
all the people that boarded there
were pretty much all third class?
195

195

00:15:08,132  -->  00:15:13,767
And what are the economics
of Cherbourg where
196

196

00:15:13,767  -->  00:15:18,812
a lot of first class people board there?
197

197

00:15:18,812  -->  00:15:23,092
Okay, so
that's the interesting find there.
198

198

00:15:23,092  -->  00:15:27,993
In the next video, we're gonna look at
the fourth question on who's alone and
199

199

00:15:27,993  -->  00:15:30,180
who was with family?
200

200

00:15:30,180  -->  00:15:32,900
So, we'll have to make a new column, and
201

201

00:15:32,900  -->  00:15:35,560
check out more stuff
there in that lecture.
202

202

00:15:35,560  -->  00:15:41,860
Just a quick recap of what we did in this
second part was we really looked into
203

203

00:15:41,860  -->  00:15:47,040
how to use the KDE plots,
how to use the facet grid,
204

204

00:15:48,670  -->  00:15:52,720
making this cabin and
the deck information available to us.
205

205

00:15:52,720  -->  00:15:57,713
So analyzing what cabins people were in,
or what decks people were in, excuse me,
206

206

00:15:57,713  -->  00:16:01,620
and then checking out where
the passengers actually came from.
207

207

00:16:03,360  -->  00:16:07,640
So next up, we'll look at who was
alone and who was with family.
208

208

00:16:07,640  -->  00:16:08,140
Okay.
