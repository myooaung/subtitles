1
1

00:00:00,530  -->  00:00:03,670
Hey guys, welcome to lecture 32.
2

2

00:00:03,670  -->  00:00:09,360
Your going to learn how to combine,
data frames.
3

3

00:00:12,210  -->  00:00:13,720
Alright, let's get started.
4

4

00:00:13,720  -->  00:00:14,370
So.
5

5

00:00:14,370  -->  00:00:15,570
We'll import the usual.
6

6

00:00:16,710  -->  00:00:17,770
Import numpy as np.
7

7

00:00:19,170  -->  00:00:20,490
Import pandas as pd.
8

8

00:00:20,490  -->  00:00:24,118
And then from pandas,
9

9

00:00:24,118  -->  00:00:28,620
import series and data frame.
10

10

00:00:28,620  -->  00:00:30,960
Let's go ahead and take a look.
11

11

00:00:30,960  -->  00:00:32,200
Okay.
12

12

00:00:32,200  -->  00:00:33,700
Let's make some series to work with.
13

13

00:00:33,700  -->  00:00:37,660
So ser1 Series.
14

14

00:00:37,660  -->  00:00:41,230
Let's go ahead and
15

15

00:00:41,230  -->  00:00:46,030
pass a list of values.
16

16

00:00:46,030  -->  00:00:51,430
I'm gonna put some null values in there so
we can see how Panda's deals with that.
17

17

00:00:55,670  -->  00:00:58,150
So I have a total of six values there.
18

18

00:00:58,150  -->  00:00:59,600
And then let's give it an index.
19

19

00:01:02,440  -->  00:01:04,010
And we'll just make that index Q, R, S.
20

20

00:01:06,150  -->  00:01:06,650
Oops.
21

21

00:01:09,386  -->  00:01:15,270
T, U, and V.
22

22

00:01:15,270  -->  00:01:16,970
Alright, and then we'll check that out.
23

23

00:01:18,470  -->  00:01:25,310
Okay, and then let's go ahead and
make another series.
24

24

00:01:27,870  -->  00:01:28,650
The series.
25

25

00:01:28,650  -->  00:01:31,740
We're just going to get a number.
26

26

00:01:31,740  -->  00:01:34,289
So we'll say np.arrange.
27

27

00:01:37,883  -->  00:01:41,560
And to make it the same
length as series one.
28

28

00:01:41,560  -->  00:01:46,280
We'll just do LAN the length function.
29

29

00:01:46,280  -->  00:01:51,340
On our first series,
and then we'll specify,
30

30

00:01:52,490  -->  00:01:56,730
pass the argument dtype, and
then we'll specify the type of object.
31

31

00:01:56,730  -->  00:02:00,780
So we'll say np, float64 to specify
that they're floating numbers.
32

32

00:02:03,580  -->  00:02:08,970
And then index, we'll copy and
33

33

00:02:08,970  -->  00:02:11,710
paste the same index from before.
34

34

00:02:14,050  -->  00:02:16,320
So let's go ahead and do that.
35

35

00:02:16,320  -->  00:02:16,820
Okay.
36

36

00:02:18,320  -->  00:02:22,420
And then let's type to make sure that
everything worked out correctly.
37

37

00:02:22,420  -->  00:02:25,790
Alright so we have zero one two three
four five and then q r s t u v.
38

38

00:02:25,790  -->  00:02:26,290
Awesome.
39

39

00:02:28,460  -->  00:02:33,620
So now that we have those two series,
let's get a series where
40

40

00:02:33,620  -->  00:02:39,200
the value of series one is
chosen if series two is null.
41

41

00:02:39,200  -->  00:02:41,370
Otherwise we'll let
the value be series one.
42

42

00:02:42,940  -->  00:02:45,340
So I'll show you how to
create that kind of series.
43

43

00:02:45,340  -->  00:02:47,360
I'll call the series command.
44

44

00:02:47,360  -->  00:02:50,630
And I'm gonna use np.where method.
45

45

00:02:50,630  -->  00:02:57,770
So, I'm going to say np dot where,
so I'll say...
46

46

00:02:58,815  -->  00:03:06,160
Pd.isnull, so where pandas is null it will
47

47

00:03:06,160  -->  00:03:12,570
put in series one as the argument,
select a value from series two.
48

48

00:03:12,570  -->  00:03:17,130
and we'll say otherwise select
the value from series one and
49

49

00:03:18,730  -->  00:03:25,140
then we'll set the index to equal
the index of the first series so
50

50

00:03:25,140  -->  00:03:29,170
let's just look at this
before we click enter here.
51

51

00:03:29,170  -->  00:03:35,037
We using np.where so
we're saying np.where and
52

52

00:03:35,037  -->  00:03:42,178
then wherever Series 1 is null,
put in the Series 2 value.
53

53

00:03:42,178  -->  00:03:48,360
And if not, then just put in Series 1.
54

54

00:03:48,360  -->  00:03:51,460
Okay, so let's see what we got then.
55

55

00:03:52,620  -->  00:03:54,440
So, now I have Q, R, S, T, U, V.
56

56

00:03:55,690  -->  00:03:57,620
Two, one, four, three, six, five.
57

57

00:03:58,630  -->  00:04:03,680
So, if we look at the null values for
series 1, it was on the R,
58

58

00:04:03,680  -->  00:04:07,870
the T, and the V, and
now if we look at the R, the T, and
59

59

00:04:07,870  -->  00:04:12,860
the V, those values have now been
obtained from the second series, scr2.
60

60

00:04:12,860  -->  00:04:19,410
So, that's how you can use np.where
command to do a little bit of logic.
61

61

00:04:19,410  -->  00:04:24,480
Just take a moment to make sure you
really understand what happened here with
62

62

00:04:24,480  -->  00:04:28,990
asking for the null and then choosing
scr2, otherwise choosing scr1.
63

63

00:04:31,650  -->  00:04:34,960
We can do the exact same thing
64

64

00:04:34,960  -->  00:04:39,340
using the combined first method,
which is build into pandas.
65

65

00:04:41,420  -->  00:04:43,790
So, I showed you the long way and
now I'll show you the short cut.
66

66

00:04:43,790  -->  00:04:50,510
So the shortcut is just
combine_first ser2.
67

67

00:04:52,830  -->  00:04:55,210
So this will do the exact same
thing as that work command.
68

68

00:04:55,210  -->  00:04:57,360
It'll say "take series one,
69

69

00:04:58,530  -->  00:05:03,540
combine it with series two, but
if there's a null value there,
70

70

00:05:03,540  -->  00:05:08,500
then use the value from series two" And
we get the exact same results.
71

71

00:05:08,500  -->  00:05:11,400
That's kind of the short cut
method to this longer version
72

72

00:05:11,400  -->  00:05:13,057
using the np.where method.
73

73

00:05:15,050  -->  00:05:16,990
So that's what works on series.
74

74

00:05:16,990  -->  00:05:19,670
Let's go ahead and take a look
at how it works on data frames.
75

75

00:05:21,140  -->  00:05:25,000
So, we'll make a dframe and
we'll call it dframe.
76

76

00:05:26,310  -->  00:05:26,830
Odds.
77

77

00:05:29,510  -->  00:05:33,160
And then we will pass
a dictionary into data frame.
78

78

00:05:34,210  -->  00:05:38,560
So we'll say X and we'll give it a list.
79

79

00:05:38,560  -->  00:05:45,110
We're going to say one,
we'll put in a null value.
80

80

00:05:45,110  -->  00:05:50,151
And in fact what I'll do, since we're
going to be using a lot of null
81

81

00:05:50,151  -->  00:05:55,830
values here, I'll set NAN equal to
NP.NAN so I don't have to type as much.
82

82

00:05:58,120  -->  00:06:02,293
Going back to that dictionary,
we'll go one dot,
83

83

00:06:02,293  -->  00:06:05,883
put in a null, 3, the dots are to signify,
84

84

00:06:05,883  -->  00:06:11,046
indicate the floating numbers and
then another nan and value.
85

85

00:06:17,766  -->  00:06:19,980
And then we'll have another null value.
86

86

00:06:21,320  -->  00:06:22,150
Of five.
87

87

00:06:23,460  -->  00:06:24,260
A null value.
88

88

00:06:25,670  -->  00:06:27,830
And a 7.
89

89

00:06:27,830  -->  00:06:31,540
And then the last entry will be Z.
90

90

00:06:31,540  -->  00:06:34,020
So we have x, y, z.
91

91

00:06:34,020  -->  00:06:37,670
And then we'll make it have a null value,
a 9,
92

92

00:06:37,670  -->  00:06:42,120
a null value, and 11.
93

93

00:06:42,120  -->  00:06:44,960
So this data frame only has odd numbers.
94

94

00:06:44,960  -->  00:06:48,920
Let's go ahead and make sure it took.
95

95

00:06:48,920  -->  00:06:49,520
Okay.
96

96

00:06:49,520  -->  00:06:56,368
And now let's make a dataframe
called dframe_evens,
97

97

00:06:56,368  -->  00:07:02,460
and we'll pass another dictionary
through that, and this case,
98

98

00:07:02,460  -->  00:07:08,160
we'll just say X,
we'll set it equal to two.
99

99

00:07:09,230  -->  00:07:14,280
Let's say four,
I'll put in a null value, six, eight,
100

100

00:07:17,580  -->  00:07:22,845
and then we'll make Y with its entries
101

101

00:07:22,845  -->  00:07:32,390
list be a null value,
102

102

00:07:32,390  -->  00:07:36,700
10, whoops, 12, 14, and let's just say 16.
103

103

00:07:36,700  -->  00:07:39,280
Okay, and we'll skip the Z on that one.
104

104

00:07:39,280  -->  00:07:41,520
And let's make sure it took.
105

105

00:07:41,520  -->  00:07:42,670
All right.
106

106

00:07:42,670  -->  00:07:43,660
So let's go ahead and show them.
107

107

00:07:43,660  -->  00:07:46,380
We got dframe odds.
108

108

00:07:49,690  -->  00:07:53,440
All right,
there's our dataframe X Y Z columns.
109

109

00:07:53,440  -->  00:07:59,060
With the odd values and
then let's get the evens one.
110

110

00:08:01,000  -->  00:08:02,700
Okay.
X, y columns.
111

111

00:08:02,700  -->  00:08:07,839
Only even values, couple of null
values spattered throughout.
112

112

00:08:07,839  -->  00:08:09,860
So, let's combine them now.
113

113

00:08:12,160  -->  00:08:17,430
So, we'll say dFrame_odds,
114

114

00:08:17,430  -->  00:08:20,440
and we're gonna do the exact same
thing we did on the series, so
115

115

00:08:20,440  -->  00:08:26,770
we'll say combine_first,
116

116

00:08:26,770  -->  00:08:32,140
and then we'll pass dFrame
evens object through it.
117

117

00:08:33,300  -->  00:08:36,500
So take a minute to think what
the result should be of this.
118

118

00:08:38,040  -->  00:08:43,100
So it's going to take dframe odds and
where there's a null value,
119

119

00:08:43,100  -->  00:08:47,080
it will pass dframe evens.
120

120

00:08:47,080  -->  00:08:50,760
So, let's just imagine what that
first column should look like.
121

121

00:08:50,760  -->  00:08:55,400
First column,
X we have a one null, three null.
122

122

00:08:55,400  -->  00:08:59,310
So that means if we combine it,
we should get a 1.
123

123

00:08:59,310  -->  00:09:03,470
We'll take a null, so then if we
look down here at the dframe even,
124

124

00:09:03,470  -->  00:09:04,364
that should be a four.
125

125

00:09:05,435  -->  00:09:07,875
The 2 we have a value so that one's good.
126

126

00:09:09,295  -->  00:09:11,375
On the third index we have a null.
127

127

00:09:11,375  -->  00:09:12,315
So that will be 6.
128

128

00:09:12,315  -->  00:09:17,155
And then the fourth one doesn't
exist on dframe odds so
129

129

00:09:17,155  -->  00:09:18,880
we'll input the dframe evens.
130

130

00:09:18,880  -->  00:09:23,416
So, your first column after issuing
this command should be 1, 4, 3,
131

131

00:09:23,416  -->  00:09:28,096
6, 8 and it should be, it'll carry
the same kind of operations on the Y and
132

132

00:09:28,096  -->  00:09:31,491
Z columns, so let's go ahead and
see if we were right.
133

133

00:09:33,572  -->  00:09:37,269
Yep, so the yes column like we expected,
1, 4, 3,
134

134

00:09:37,269  -->  00:09:40,360
6, 8 and then you have the Y and
Z columns.
135

135

00:09:40,360  -->  00:09:43,110
If there were null values on both of them,
136

136

00:09:43,110  -->  00:09:46,250
then we'll keep the null values
in the combined first result.
137

137

00:09:47,550  -->  00:09:49,860
You can go ahead and
make your own data frames, and
138

138

00:09:49,860  -->  00:09:54,655
pass different combinations
using the combine_first method
139

139

00:09:54,655  -->  00:09:56,505
just to make sure you really
understand how it's working.
140

140

00:09:57,765  -->  00:10:02,895
So just to overview,
you could use np.where with
141

141

00:10:02,895  -->  00:10:07,147
the isnull logic and specify the index.
142

142

00:10:07,147  -->  00:10:12,387
But the shortcut method that pandas
has built in is combine_first,
143

143

00:10:12,387  -->  00:10:14,717
and you can do that on dataframes as well.
144

144

00:10:14,717  -->  00:10:16,897
So that's how you combine dataframes.
145

145

00:10:16,897  -->  00:10:19,597
Next step we'll learn about
reshaping dataframes.
146

146

00:10:19,597  -->  00:10:20,097
I'll see you there.
