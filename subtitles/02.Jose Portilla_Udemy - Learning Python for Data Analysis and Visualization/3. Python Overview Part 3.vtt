WEBVTT
1
1

00:00:00.180  -->  00:00:04.130
We left off on the boolean statements, so
2

2

00:00:04.130  -->  00:00:06.900
let's go ahead and
take a closer look at if statements.
3

3

00:00:08.250  -->  00:00:11.150
Let's go ahead and make a cities
list again, like we've been doing.
4

4

00:00:11.150  -->  00:00:15.771
Say it's NY, LA, SF,
5

5

00:00:15.771  -->  00:00:19.020
Shift + Enter.
6

6

00:00:19.020  -->  00:00:26.670
And let's go ahead and
say city = cities, zero index,
7

7

00:00:26.670  -->  00:00:32.060
so hopefully you should know by now
that that means city is equal to NY.
8

8

00:00:32.060  -->  00:00:33.190
Great.
9

9

00:00:33.190  -->  00:00:39.340
So if we look at if statements,
so I can say if, oops.
10

10

00:00:39.340  -->  00:00:46.344
If city == 'NY': print 'Party',
11

11

00:00:46.344  -->  00:00:53.350
and we did this a bit in the last lecture.
12

12

00:00:53.350  -->  00:00:56.475
Now something else we can do,
is we can have an else if, so
13

13

00:00:56.475  -->  00:00:58.380
we have additional if else parts.
14

14

00:00:58.380  -->  00:01:03.970
So I can say elif that would
be the else if statements.
15

15

00:01:03.970  -->  00:01:08.466
I can say elif or elif,
16

16

00:01:08.466  -->  00:01:15.331
depending how you wanna say it so,
17

17

00:01:15.331  -->  00:01:23.640
else if city == 'LA' : print, oops.
18

18

00:01:23.640  -->  00:01:28.070
Let me put double quotes there, so I can
have that single quote or apostrophe.
19

19

00:01:28.070  -->  00:01:28.866
"It's hot here".
20

20

00:01:28.866  -->  00:01:32.938
And then
21

21

00:01:32.938  -->  00:01:39.810
else: print 'where am I?'.
22

22

00:01:43.010  -->  00:01:45.390
Okay, so
you notice in city is equal to NY.
23

23

00:01:45.390  -->  00:01:47.630
If we run that, we'll get party.
24

24

00:01:47.630  -->  00:01:50.800
Let's go ahead and
try to get something else.
25

25

00:01:50.800  -->  00:01:57.230
So let's set the city = cities [2].
26

26

00:01:57.230  -->  00:02:01.696
So, that would make cities equal to SF,
and
27

27

00:02:01.696  -->  00:02:06.420
if we run that it's going
to ask now where am I?
28

28

00:02:06.420  -->  00:02:08.425
And you can combine if statements with for
loops.
29

29

00:02:09.805  -->  00:02:16.469
So to do that, let's go ahead and
30

30

00:02:16.469  -->  00:02:21.943
say for city in cities, and
31

31

00:02:21.943  -->  00:02:30.270
then I'm gonna highlight all this.
32

32

00:02:30.270  -->  00:02:33.910
And click Tab to bring it
over into the for loop.
33

33

00:02:33.910  -->  00:02:36.470
So again, in Python this white
space is really important.
34

34

00:02:36.470  -->  00:02:40.880
And it all has to be tabbed over once,
to the inside of this for loop.
35

35

00:02:40.880  -->  00:02:42.323
So now what this is going to do,
36

36

00:02:42.323  -->  00:02:46.040
it's going to have this if
statement inside of a for loop.
37

37

00:02:46.040  -->  00:02:48.920
We click Shift + Enter,
we should get all three.
38

38

00:02:48.920  -->  00:02:50.538
Party because it went
through New York first.
39

39

00:02:50.538  -->  00:02:52.750
Then It's hot here,
because it went to L.A..
40

40

00:02:52.750  -->  00:02:55.490
And then, where am I?,
because it went to SF.
41

41

00:02:55.490  -->  00:02:55.990
Great.
42

42

00:02:59.280  -->  00:03:00.790
So let's go ahead and
43

43

00:03:00.790  -->  00:03:06.240
take a look at two more data structures,
dictionaries and then tuples.
44

44

00:03:07.370  -->  00:03:11.170
So a tuple is a sequence object,
like a list or string, and
45

45

00:03:11.170  -->  00:03:15.700
we can construct it by grouping sequences
of objects together with commas.
46

46

00:03:15.700  -->  00:03:18.470
I'm going to do it without brackets.
47

47

00:03:18.470  -->  00:03:20.640
Instead, we'll use parentheses.
48

48

00:03:20.640  -->  00:03:26.960
So, I'll say t =, and instead of brackets,
like a list, I'm going to use parentheses.
49

49

00:03:26.960  -->  00:03:29.800
I'm going to say it's (1,2,3).
50

50

00:03:29.800  -->  00:03:30.670
Shift+Enter.
51

51

00:03:30.670  -->  00:03:32.630
Great.
So now if I print my t,
52

52

00:03:32.630  -->  00:03:34.800
I have my tuple there.
53

53

00:03:35.800  -->  00:03:38.510
Now what makes this special
is that they're immutable, so
54

54

00:03:38.510  -->  00:03:41.730
I can't append to them or
change elements of them.
55

55

00:03:41.730  -->  00:03:45.419
So I can't say append(2).
56

56

00:03:45.419  -->  00:03:49.060
I'm gonna get an error, so
57

57

00:03:49.060  -->  00:03:54.110
this 'tuple' object has no attribute
'append', cuz you cannot change the tuple.
58

58

00:03:55.300  -->  00:04:02.240
You can't change elements in them,
and you cannot append to them, great.
59

59

00:04:02.240  -->  00:04:05.331
So tuples are really useful
anytime you wanna group different
60

60

00:04:05.331  -->  00:04:07.235
pieces of data together in an object,
61

61

00:04:07.235  -->  00:04:10.160
but you don't really want to
create a full class for them.
62

62

00:04:12.560  -->  00:04:15.240
So let's go ahead and
then look at dictionaries real quick.
63

63

00:04:17.630  -->  00:04:22.365
Dictionaries are basically an object
that's called the mapping object, or
64

64

00:04:22.365  -->  00:04:24.795
they're also called associative
arrays in other languages.
65

65

00:04:26.555  -->  00:04:28.595
So I can say,
let's go ahead and make a list.
66

66

00:04:28.595  -->  00:04:31.712
So I'll say my_list = [1, 2, 3].
67

67

00:04:31.712  -->  00:04:32.898
Shift+Enter.
68

68

00:04:32.898  -->  00:04:38.530
And then to make a dictionary,
we use the curly brackets.
69

69

00:04:38.530  -->  00:04:43.984
So I'm gonna say my
dictionary here is equal to,
70

70

00:04:43.984  -->  00:04:50.830
and now I'm going to use
these curly brackets here.
71

71

00:04:50.830  -->  00:04:52.350
And so, what a list, or
72

72

00:04:52.350  -->  00:04:56.550
what a dictionary is gonna do is, the
index in a dictionary is called the key.
73

73

00:04:56.550  -->  00:04:59.720
And the corresponding
dictionary entry is the value.
74

74

00:04:59.720  -->  00:05:03.090
A dictionary can use almost
anything as the key.
75

75

00:05:03.090  -->  00:05:06.310
And while we're forming
the list using square brackets,
76

76

00:05:06.310  -->  00:05:08.680
the dictionaries use these curly brackets.
77

77

00:05:08.680  -->  00:05:12.670
So lets go ahead and
make a list, or a dictionary.
78

78

00:05:12.670  -->  00:05:19.300
We can say lets make
a dictionary of names and ages.
79

79

00:05:19.300  -->  00:05:23.040
So we can say, Joe and
then I use a colon so
80

80

00:05:23.040  -->  00:05:27.000
I have my key as Joe and
the value, his age,
81

81

00:05:27.000  -->  00:05:31.960
will be 22, comma to enter a new key and
a new value.
82

82

00:05:34.395  -->  00:05:35.640
You can say Mike.
83

83

00:05:38.100  -->  00:05:39.280
And he can be 12 years old.
84

84

00:05:41.170  -->  00:05:42.890
So Shift+Enter,
now we have our dictionary.
85

85

00:05:42.890  -->  00:05:47.320
And I'm gonna say,
86

86

00:05:47.320  -->  00:05:53.840
my_dict for my dictionary.
87

87

00:05:53.840  -->  00:05:59.671
Let's go ahead and say,
we can call keys for it, as such,
88

88

00:05:59.671  -->  00:06:06.230
by putting it in brackets like this,
almost like it was an index.
89

89

00:06:06.230  -->  00:06:09.770
And then it gives me Joe's age, 22.
90

90

00:06:09.770  -->  00:06:14.230
And the length command also
works on dictionaries.
91

91

00:06:14.230  -->  00:06:21.530
So I can say len(my_dict), and
then I have two entries there.
92

92

00:06:21.530  -->  00:06:26.370
So note that it doesn't count
the values and the keys as separate.
93

93

00:06:26.370  -->  00:06:29.326
It counts the grouping as one,
so there's Joe and the age.
94

94

00:06:29.326  -->  00:06:34.090
And then Mike and the age, and
that's two entries in this dictionary.
95

95

00:06:34.090  -->  00:06:38.350
Great.
Okay, so that's it for
96

96

00:06:38.350  -->  00:06:40.230
the tuples and dictionaries.
97

97

00:06:40.230  -->  00:06:43.830
We're almost done with
the overview of Python,
98

98

00:06:43.830  -->  00:06:47.345
one last thing I wanna show
you is creating functions.
99

99

00:06:47.345  -->  00:06:52.320
So to create a function,
you can use D-E-F.
100

100

00:06:52.320  -->  00:06:57.720
So I can say, D-E-F and then,
the name of my function.
101

101

00:06:59.360  -->  00:07:01.798
So, for instance, let's say,
102

102

00:07:01.798  -->  00:07:07.070
I wanted to get a function that
added two numbers together.
103

103

00:07:07.070  -->  00:07:11.790
I could say adder is
the name of my function and
104

104

00:07:11.790  -->  00:07:15.550
it takes x and a y.
105

105

00:07:15.550  -->  00:07:19.470
So you name your function,
make parentheses and then have the inputs.
106

106

00:07:21.480  -->  00:07:28.230
And then once wanna do a functions
to put a comment in Python.
107

107

00:07:28.230  -->  00:07:32.320
There's two ways we can do this,
you can either do a hash tag, and so
108

108

00:07:32.320  -->  00:07:37.740
a hash tag will comment anything you
type in afterwards, which means that
109

109

00:07:37.740  -->  00:07:44.560
code won't run or, which is more common
for functions, is to use three quotations.
110

110

00:07:44.560  -->  00:07:47.630
So I can say what you
should do is good practice.
111

111

00:07:47.630  -->  00:07:49.030
Describe what the function's going to do.
112

112

00:07:49.030  -->  00:07:56.150
So I can say This function will add x and
y together.
113

113

00:07:56.150  -->  00:08:00.130
And then I'm going to close
it off with three quotations.
114

114

00:08:00.130  -->  00:08:03.420
So notice how I'm using three
sets of quotation marks.
115

115

00:08:03.420  -->  00:08:06.380
That just means anything in
between them will be a comment.
116

116

00:08:09.560  -->  00:08:10.990
All right, so
now I have my adding functions.
117

117

00:08:10.990  -->  00:08:16.300
So now I'm going to say, return answer.
118

118

00:08:17.980  -->  00:08:20.220
So now I've built basically
the skeleton of my function.
119

119

00:08:20.220  -->  00:08:24.306
So if I call this function adder and
input two variables, x and
120

120

00:08:24.306  -->  00:08:28.010
y, it's gonna add them together and
return an answer.
121

121

00:08:28.010  -->  00:08:30.020
So what's the answer gonna be?
122

122

00:08:30.020  -->  00:08:32.386
Lets go ahead and
say the answer will then just be x+y.
123

123

00:08:32.386  -->  00:08:34.770
It's a little bit of a silly function,
124

124

00:08:34.770  -->  00:08:39.410
since you could just say plus y,
but let's go ahead and make it.
125

125

00:08:39.410  -->  00:08:40.680
Great.
126

126

00:08:40.680  -->  00:08:43.553
And now if I say adder and call five and
127

127

00:08:43.553  -->  00:08:47.370
ten into it I should expect,
the answer, 15.
128

128

00:08:47.370  -->  00:08:51.790
So you can imagine in the future
you can make really awesome and
129

129

00:08:51.790  -->  00:08:55.690
complicated functions to
help you save time if you
130

130

00:08:55.690  -->  00:08:58.530
realize you're gonna be calling
the same process over and over again.
131

131

00:08:59.700  -->  00:09:01.539
Great.
And that's it for functions.
132

132

00:09:03.070  -->  00:09:07.380
So that's about it as far as this really
quick crash course in Python syntax and
133

133

00:09:07.380  -->  00:09:08.600
the overview.
134

134

00:09:08.600  -->  00:09:12.580
You'll be learning a lot more as you go on
through the other lectures in the course.
135

135

00:09:12.580  -->  00:09:16.020
Go ahead and feel free to start any
discussions if you have questions.
136

136

00:09:16.020  -->  00:09:20.390
Again, if this is your first programming
language, I suggest you take it easy and
137

137

00:09:20.390  -->  00:09:23.640
go off the code academy
resources that are free online.
138

138

00:09:23.640  -->  00:09:26.510
They take a little longer but
they're well worth the effort.
139

139

00:09:26.510  -->  00:09:29.170
All right, so that's it.
140

140

00:09:29.170  -->  00:09:32.770
Let's just go over what we learned
in this lecture real quick.
141

141

00:09:32.770  -->  00:09:35.220
Cities was a list.
142

142

00:09:35.220  -->  00:09:39.360
And we learned how to use for loops and
if loops nested inside of them.
143

143

00:09:39.360  -->  00:09:45.580
We learned about tuples,
basically an immutable form of a list.
144

144

00:09:45.580  -->  00:09:49.020
And you can't append stuff to it or
change the items in it.
145

145

00:09:49.020  -->  00:09:52.550
And then we learned about dictionaries,
which have a key and
146

146

00:09:52.550  -->  00:09:54.160
then a value associated with that key.
147

147

00:09:55.260  -->  00:09:58.860
And you can call the keys
to find out their values.
148

148

00:09:58.860  -->  00:10:00.650
Length also works on them.
149

149

00:10:00.650  -->  00:10:02.910
And then we learn how to
make a simple function.
150

150

00:10:02.910  -->  00:10:05.260
Again, this is just a very quick overview.
151

151

00:10:05.260  -->  00:10:08.080
If you have any questions,
feel free to put them on the discussion.
152

152

00:10:09.500  -->  00:10:10.980
That's it for the Python overview.
153

153

00:10:10.980  -->  00:10:11.690
All right.
154

154

00:10:11.690  -->  00:10:12.190
Thanks guys.
