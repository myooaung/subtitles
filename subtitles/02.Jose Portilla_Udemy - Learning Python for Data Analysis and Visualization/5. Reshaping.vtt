WEBVTT
1
1

00:00:00.720  -->  00:00:07.400
Hey guys, welcome to lecture 33,
this lecture's going to be on reshaping.
2

2

00:00:10.060  -->  00:00:16.730
So we'll import the usual as always,
numpie as np, import pandas as pd,
3

3

00:00:18.190  -->  00:00:24.050
and then from Pandas I'm going
to import series and data frame.
4

4

00:00:27.500  -->  00:00:32.460
Alright, so first we're going to see
how the stack and unstack methods work,
5

5

00:00:32.460  -->  00:00:35.530
in order to do that I'm
going to make a data frame.
6

6

00:00:35.530  -->  00:00:41.130
So I'll say dframe1,
is equal to DataFrame,
7

7

00:00:41.130  -->  00:00:44.050
and we'll create this data
frame using np arrange.
8

8

00:00:45.620  -->  00:00:47.410
We'll get eight points.
9

9

00:00:47.410  -->  00:00:51.620
And then I'm going to reshape
them as a two by four matrix.
10

10

00:00:57.810  -->  00:01:03.195
And then we'll set the index
equal to panda index,
11

11

00:01:03.195  -->  00:01:08.830
pd.Index, and
12

12

00:01:08.830  -->  00:01:14.240
we'll have the list,
this be how about some cities.
13

13

00:01:19.270  -->  00:01:25.850
And I'm gonna name this
index equal to city.
14

14

00:01:25.850  -->  00:01:31.270
The reason I pass the index as
pd.Index instead of just saying index
15

15

00:01:31.270  -->  00:01:36.670
equals this list of LA SF is
because Passing the PD dot index,
16

16

00:01:36.670  -->  00:01:38.820
I'm also able to name it at the same time.
17

17

00:01:38.820  -->  00:01:43.760
And then using columns,
I can do the same thing.
18

18

00:01:43.760  -->  00:01:48.040
I can say columns equals pd dot index.
19

19

00:01:50.840  -->  00:01:52.695
And I can pass A.
20

20

00:01:52.695  -->  00:01:54.051
B, C, D.
21

21

00:01:54.051  -->  00:01:59.794
[SOUND] And
I'm going to set this name equal
22

22

00:01:59.794  -->  00:02:05.053
to just letter, just their letters.
23

23

00:02:05.053  -->  00:02:09.873
And then we'll show it
hopefully there are no typos.
24

24

00:02:09.873  -->  00:02:14.735
Okay, awesome, so we have the columns,
our letters ABCD and
25

25

00:02:14.735  -->  00:02:18.735
the index city name LA and SF and
26

26

00:02:18.735  -->  00:02:23.040
then we have 0 through seven,
eight points on a two by four matrix.
27

27

00:02:24.210  -->  00:02:26.810
So, how can we use stack?
28

28

00:02:26.810  -->  00:02:30.820
So we can use stack to pivot
the columns in to the rows.
29

29

00:02:30.820  -->  00:02:35.130
To show you what I mean, I'll make a new
data frame, I'll call it dateframe_st for
30

30

00:02:35.130  -->  00:02:40.440
stat and I'm going to set this equal to,
Data frame one.
31

31

00:02:40.440  -->  00:02:43.630
And I'm gonna call the stack method on it.
32

32

00:02:48.820  -->  00:02:50.660
And let's see how that goes.
33

33

00:02:50.660  -->  00:02:51.900
Cool.
34

34

00:02:51.900  -->  00:02:55.110
So now, in a sense, we've pivoted it.
35

35

00:02:55.110  -->  00:03:00.310
And now we have the city, and
a sub-index of the letters.
36

36

00:03:03.430  -->  00:03:07.880
If we wanna rearrange it back into
a data frame, we can do that.
37

37

00:03:07.880  -->  00:03:12.830
We can just take dframe_st
that was pivoted and
38

38

00:03:12.830  -->  00:03:16.810
I can say unstack to turn
it back into a dataframe.
39

39

00:03:19.920  -->  00:03:22.590
We can also choose which
name to unstack by.
40

40

00:03:23.820  -->  00:03:31.120
So instead of unstacking that way,
I could also say dframe_st.
41

41

00:03:31.120  -->  00:03:33.650
I can call the unstack method on it and
42

42

00:03:33.650  -->  00:03:36.870
specify that it should be
unstacked by the letter.
43

43

00:03:36.870  -->  00:03:39.243
Let's see what happens there.
44

44

00:03:39.243  -->  00:03:43.080
The exact same thing since
that was the default unstack.
45

45

00:03:43.080  -->  00:03:45.045
What if I unstack by the city, though?
46

46

00:03:45.045  -->  00:03:46.031
Let's check out what happens.
47

47

00:03:49.242  -->  00:03:51.055
Find unstack by the city.
48

48

00:03:54.035  -->  00:03:58.280
Then is basically reversed, and now you
have the city as being the columns and
49

49

00:03:58.280  -->  00:04:02.250
letter is now your index for
that data frame, so you can specify and
50

50

00:04:02.250  -->  00:04:05.320
unstack what you want the columns and
index to be.
51

51

00:04:08.250  -->  00:04:12.260
So let's see how stack and
unstack handle null values.
52

52

00:04:12.260  -->  00:04:14.700
So in order to do that,
I am going to make two series.
53

53

00:04:14.700  -->  00:04:21.809
I'll call the first one ser1,
set it equal to series.
54

54

00:04:21.809  -->  00:04:26.971
Let's say zero, one, two,
and then I'll make my
55

55

00:04:26.971  -->  00:04:32.870
index equal to just some letters Q,
let's just say X, Y.
56

56

00:04:32.870  -->  00:04:38.060
I'll make another series, ser2.
57

57

00:04:42.820  -->  00:04:50.520
Equal to four, five, six and
then we'll have my index
58

58

00:04:52.240  -->  00:04:56.740
be X Y and Z for instance.
59

59

00:04:59.080  -->  00:05:01.040
Okay, let's make sure that works.
60

60

00:05:01.040  -->  00:05:03.190
Cool.
So I have my two series.
61

61

00:05:03.190  -->  00:05:10.870
So, I'm going to use, I'll set my D
frame so I can make a data frame.
62

62

00:05:10.870  -->  00:05:11.890
I'm going to use concat.
63

63

00:05:11.890  -->  00:05:13.140
Remember from concatenate?
64

64

00:05:13.140  -->  00:05:19.190
I will use that to make the data
frames out of the two series,
65

65

00:05:19.190  -->  00:05:22.680
so we have a little review of four.
66

66

00:05:22.680  -->  00:05:28.209
And I'll set the keys equal to Alpha
67

67

00:05:28.209  -->  00:05:32.310
and Beta.
68

68

00:05:34.670  -->  00:05:37.010
And then we'll just check out
what that data frame looks like.
69

69

00:05:38.560  -->  00:05:42.630
Awesome, so
it's not quite a data frame yet.
70

70

00:05:42.630  -->  00:05:49.080
It's just two series that have been
pushed together with concatenate.
71

71

00:05:49.080  -->  00:05:52.100
If I wanna make it into a dataframe,
I'll have to unstack it.
72

72

00:05:53.190  -->  00:05:59.530
So I'll say dframe unstack and
now it shows up as a dataframe.
73

73

00:05:59.530  -->  00:06:00.030
Cool.
74

74

00:06:01.650  -->  00:06:03.200
So we have null values.
75

75

00:06:03.200  -->  00:06:04.198
How do I get rid of those?
76

76

00:06:04.198  -->  00:06:09.400
Well, using pandas, if we have our d frame
77

77

00:06:11.190  -->  00:06:15.250
on stack, and
78

78

00:06:15.250  -->  00:06:20.650
let's say I stacked it again, that will
automatically filter out the null values.
79

79

00:06:20.650  -->  00:06:22.070
So let's make sure of that.
80

80

00:06:22.070  -->  00:06:23.360
Cool.
81

81

00:06:23.360  -->  00:06:29.950
So, again, just like before,
the null values have been filtered out.
82

82

00:06:29.950  -->  00:06:32.670
So you get null values when you
unstack into a data frame, but
83

83

00:06:32.670  -->  00:06:36.520
if you stack it back into that
combination of those two series,
84

84

00:06:36.520  -->  00:06:37.960
you don't get those null values anymore.
85

85

00:06:40.430  -->  00:06:43.050
If we don't want to do this and
we actually want to keep
86

86

00:06:43.050  -->  00:06:47.920
these null values from the data frame,
we can do that as well.
87

87

00:06:47.920  -->  00:06:54.265
So let's set our data frame to equal
88

88

00:06:54.265  -->  00:07:00.880
dFrame.unstack.
89

89

00:07:00.880  -->  00:07:05.708
So now if I call my data frame,
I have this permanent data frame with
90

90

00:07:05.708  -->  00:07:10.378
two null values there at Q beta and
Beta Z, I'm sorry, Alpha Z.
91

91

00:07:14.463  -->  00:07:18.602
And now if I were to call
stack on this normally,
92

92

00:07:18.602  -->  00:07:24.707
it would get rid of the null values,
but if I wanted to keep them there,
93

93

00:07:24.707  -->  00:07:30.400
I could call stack, and
pass the argument dropna equal to false,
94

94

00:07:30.400  -->  00:07:35.601
and now I've kept those na values
the Alpha z and the Beta q.
95

95

00:07:37.340  -->  00:07:38.910
So that's about it for reshaping,
96

96

00:07:38.910  -->  00:07:45.210
it's mainly just being able to
use the unstack and the stack.
97

97

00:07:45.210  -->  00:07:49.154
And next up we'll learn more about
pivoting data frames in a similar fashion.
98

98

00:07:49.154  -->  00:07:50.690
All right, I'll see you there.
