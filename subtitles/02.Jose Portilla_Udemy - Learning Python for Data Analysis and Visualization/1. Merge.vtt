WEBVTT
1
1

00:00:00.950  -->  00:00:01.610
Hey, guys.
2

2

00:00:01.610  -->  00:00:03.160
Welcome.
This is lecture 29.
3

3

00:00:03.160  -->  00:00:06.230
In this lecture,
we're gonna be learning about merge.
4

4

00:00:06.230  -->  00:00:12.000
So we'll learn how to merge data
sets by linking rows by keys.
5

5

00:00:13.630  -->  00:00:14.601
So, we're gonna import the usual.
6

6

00:00:23.666  -->  00:00:31.388
And from pandas import Series, DataFrame.
7

7

00:00:31.388  -->  00:00:34.120
All right, so
let's make a quick data frame.
8

8

00:00:34.120  -->  00:00:37.230
We'll call this data frame just dframe1.
9

9

00:00:37.230  -->  00:00:44.860
We'll do that with a DataFrame and we're
gonna go ahead and pass a dictionary.
10

10

00:00:46.170  -->  00:00:48.697
So in this dictionary, we'll set off key.
11

11

00:00:53.091  -->  00:00:58.402
And I'm just gonna put in some letters for
12

12

00:00:58.402  -->  00:01:02.950
the key, let's just say X, Z, Y,
13

13

00:01:02.950  -->  00:01:06.915
Z and let's say just X X again.
14

14

00:01:06.915  -->  00:01:12.939
Okay, and then the next entry in this
dictionary is gonna be the data set so
15

15

00:01:12.939  -->  00:01:15.576
I'll just say data_set_1.
16

16

00:01:18.861  -->  00:01:23.500
And I'll set this equal to np.range 6.
17

17

00:01:23.500  -->  00:01:31.390
Let's go ahead and show that.
18

18

00:01:32.800  -->  00:01:35.240
Okay, so, what happened here?
19

19

00:01:35.240  -->  00:01:38.810
We created a data frame,
we did it through a dictionary.
20

20

00:01:38.810  -->  00:01:42.990
Dictionary data frames,
you just set up your column name, and
21

21

00:01:42.990  -->  00:01:46.320
then you just set up a list of
the data you want in that column.
22

22

00:01:46.320  -->  00:01:52.250
So, the first column is data set,
second column is key.
23

23

00:01:54.130  -->  00:01:55.140
Nice.
24

24

00:01:55.140  -->  00:01:58.960
And then since we are going to be merging
data frames, we need more then one.
25

25

00:01:58.960  -->  00:02:01.359
So, we'll make another data frame,
we'll call it dframe2.
26

26

00:02:06.777  -->  00:02:11.590
And, we're going to do the same thing,
we'll pass a dictionary.
27

27

00:02:12.870  -->  00:02:19.230
First entry we're gonna call key,
we'll pass three letters there,
28

28

00:02:19.230  -->  00:02:22.190
Q, Y, and let's say Z.
29

29

00:02:26.255  -->  00:02:32.625
And then we'll pass the next entry,
second data set,
30

30

00:02:32.625  -->  00:02:38.640
and in this case, I'm just gonna
have to be a list of 1, 2, 3.
31

31

00:02:38.640  -->  00:02:40.960
And then time dframe2 so
we can take a look at it.
32

32

00:02:42.530  -->  00:02:45.100
All right.
So now we have data set and
33

33

00:02:45.100  -->  00:02:46.400
then a column called key.
34

34

00:02:48.490  -->  00:02:56.870
So now we can use the merge method and
this is a many to one method.
35

35

00:02:56.870  -->  00:03:01.270
So the merge will automatically choose
overlapping columns to merge on.
36

36

00:03:01.270  -->  00:03:06.800
To show you what I mean, I'm gonna
call the method merge using pd.merge,
37

37

00:03:06.800  -->  00:03:12.070
and I'll call dframe1 and dframe2,
the two DataFrames we have.
38

38

00:03:15.030  -->  00:03:16.790
Go ahead and see that.
39

39

00:03:16.790  -->  00:03:17.310
Okay.
40

40

00:03:17.310  -->  00:03:18.570
So what did merge do?
41

41

00:03:19.860  -->  00:03:24.700
If we look at the original ones,
what are the keys they share?
42

42

00:03:24.700  -->  00:03:29.050
So, dataframe1 has X, Z, and Y.
43

43

00:03:29.050  -->  00:03:31.780
Dataframe2 has Q, Y, and Z.
44

44

00:03:31.780  -->  00:03:36.530
So that means the only ones they have in
common are Z and Y as far as the keys.
45

45

00:03:36.530  -->  00:03:43.620
And then if you look at their index, they
happen to also be similar on 0Z and 1Z.
46

46

00:03:43.620  -->  00:03:46.280
So it merged those together and
47

47

00:03:46.280  -->  00:03:49.350
automatically overlapped
where the keys matched.
48

48

00:03:50.880  -->  00:03:54.900
And I just chose this column and
labeled it key for convenience so
49

49

00:03:54.900  -->  00:03:56.810
you could realize where
it was being matched.
50

50

00:03:58.440  -->  00:04:06.983
Okay, lo let's say I wanted to match on
a specific column, I could do that too.
51

51

00:04:10.566  -->  00:04:12.663
Just by saying pd.merge,
52

52

00:04:12.663  -->  00:04:17.765
you would enter the two dataframe names,
and then you can say on and
53

53

00:04:17.765  -->  00:04:23.200
here you would choose which column
you would want to merge on.
54

54

00:04:23.200  -->  00:04:28.110
So, in order to get the same result by
specifying this, I can specify to merge on
55

55

00:04:28.110  -->  00:04:32.250
that column labeled key and I should get
the same result as the automatic merging.
56

56

00:04:33.440  -->  00:04:36.070
And we did get the same result so
we know that works.
57

57

00:04:38.310  -->  00:04:44.470
We can also choose which data
frames keys to use, and so
58

58

00:04:44.470  -->  00:04:50.143
to show you what I mean by that,
let's go ahead and call pd.merge.
59

59

00:04:50.143  -->  00:04:55.655
We'll create dframe1,
60

60

00:04:55.655  -->  00:04:58.690
dframe2, and
61

61

00:04:58.690  -->  00:05:04.850
then we'll say on the key column and
we can specify how.
62

62

00:05:04.850  -->  00:05:11.840
So if I say how equal to left,
let's see how that looks.
63

63

00:05:13.820  -->  00:05:17.020
We can past that left argument,
and let's see what happened there.
64

64

00:05:18.090  -->  00:05:25.410
So now we've passed them
using the left data set.
65

65

00:05:25.410  -->  00:05:33.310
So you can see the data sets, key values,
and index values are now being used.
66

66

00:05:33.310  -->  00:05:35.420
So if we look at dframe2,
67

67

00:05:35.420  -->  00:05:40.270
let's go ahead and find out why
there are certain null values.
68

68

00:05:41.690  -->  00:05:47.770
So dframe2 had no X values,
so it's gonna say null for
69

69

00:05:47.770  -->  00:05:54.760
all the X values of the data frame on
the left, and if we look a dframe1 and
70

70

00:05:57.730  -->  00:06:02.420
look at its key column,
its key column was X, X, Y, Z, X, X.
71

71

00:06:03.790  -->  00:06:08.790
And since we specified we wanted to
use that left data frame it's kept
72

72

00:06:08.790  -->  00:06:13.650
the same key X,Z,Y,Z,X,X.
73

73

00:06:13.650  -->  00:06:18.990
To make sure you understand lets go
ahead and pass the right data frame, so
74

74

00:06:18.990  -->  00:06:23.490
the one on the left will be dframe1,
the one on the right will be dframe2.
75

75

00:06:26.310  -->  00:06:34.870
We're gonna label it on key, and
how we'll label it now, right.
76

76

00:06:34.870  -->  00:06:38.110
So we're going to pass using
the right data frames key.
77

77

00:06:38.110  -->  00:06:41.480
So, lets go ahead and see what happens.
78

78

00:06:41.480  -->  00:06:45.091
So, if we take a look at dframe2,
79

79

00:06:45.091  -->  00:06:50.449
let's look at its key column,
it was key Y,Z, and
80

80

00:06:50.449  -->  00:06:55.965
since we're Key,
it only passed Qs, Ys, and Zs.
81

81

00:06:55.965  -->  00:07:00.025
And the reason Z here is doubled
was because it matched twice
82

82

00:07:00.025  -->  00:07:03.295
on both data sets,
depending on the 0 index or the 1 index.
83

83

00:07:05.375  -->  00:07:10.500
So now you can choose on either
data frame who's key column to use,
84

84

00:07:10.500  -->  00:07:12.440
either the right or the left.
85

85

00:07:12.440  -->  00:07:16.090
If you want to use both of them you
can create a union of both keys.
86

86

00:07:17.270  -->  00:07:24.280
The way to do that is again just pass
the merge method, we'll call dframe1,
87

87

00:07:25.370  -->  00:07:30.500
dframe2, and
then we'll label it on that key.
88

88

00:07:33.270  -->  00:07:36.230
And then if we want to use
both the union of the keys,
89

89

00:07:37.290  -->  00:07:40.440
we can label the method
how as an outer argument.
90

90

00:07:43.560  -->  00:07:44.170
Ok.
91

91

00:07:44.170  -->  00:07:48.270
And now we've been able to pass
the union of both the keys.
92

92

00:07:48.270  -->  00:07:51.119
So the X's, the Z's, the Y's and the Qs.
93

93

00:07:51.119  -->  00:07:56.083
Since data set 2 didn't
have any values for
94

94

00:07:56.083  -->  00:08:01.058
X, it's still gonna show no values there.
95

95

00:08:01.058  -->  00:08:04.760
So, now we're gonna learn how
to do a many to many merge.
96

96

00:08:04.760  -->  00:08:09.540
For those of you familiar with SQL,
those terms will be familiar to you.
97

97

00:08:11.910  -->  00:08:14.470
So, let's go ahead and
make another pair of data frames.
98

98

00:08:14.470  -->  00:08:18.270
Let's see we're gonna have dframe3.
99

99

00:08:25.030  -->  00:08:27.010
And let's go ahead and pass a dictionary.
100

100

00:08:27.010  -->  00:08:28.480
We'll say key.
101

101

00:08:33.070  -->  00:08:35.364
And we're just gonna input
then a bunch of letters again.
102

102

00:08:35.364  -->  00:08:40.815
Let's say X,X,Y and then Z, Z and
103

103

00:08:40.815  -->  00:08:47.176
then this one column, let's go ahead and
104

104

00:08:47.176  -->  00:08:51.380
select data_set column.
105

105

00:08:51.380  -->  00:08:56.837
This is data_set_3, and we'll just
106

106

00:08:56.837  -->  00:09:02.120
set that up to be a range of 6 points.
107

107

00:09:02.120  -->  00:09:06.960
Since we have one, two, three,
four, five, six on the key, so
108

108

00:09:06.960  -->  00:09:09.175
we'll set that to be a range of 6.
109

109

00:09:09.175  -->  00:09:14.300
Alt+Enter then let's
make another data frame.
110

110

00:09:14.300  -->  00:09:15.790
We'll call it dframe4.
111

111

00:09:19.760  -->  00:09:21.430
Let's go ahead and
see what we can do here.
112

112

00:09:21.430  -->  00:09:22.600
Let's pass dictionary.
113

113

00:09:24.270  -->  00:09:25.950
We'll label one of the columns key.
114

114

00:09:28.660  -->  00:09:30.157
And now I'm gonna pass a shorter list.
115

115

00:09:30.157  -->  00:09:34.946
I'll say Y, Y,
116

116

00:09:34.946  -->  00:09:38.028
X, X, Z.
117

117

00:09:45.430  -->  00:09:48.443
And let's make a fourth data set and
118

118

00:09:48.443  -->  00:09:53.974
we'll set the values as a range of
five since our key is five long.
119

119

00:09:53.974  -->  00:09:55.672
I need to use parenthesis there.
120

120

00:09:58.152  -->  00:10:01.910
And let me go curly bracket to
finish that dictionary input.
121

121

00:10:02.960  -->  00:10:08.548
Okay, so let's take a look at
what data frame three looks like.
122

122

00:10:08.548  -->  00:10:12.030
Okay, and then let's take a look
at data frame four as well.
123

123

00:10:13.430  -->  00:10:15.910
So these are the two data
frames we're gonna be using.
124

124

00:10:15.910  -->  00:10:17.730
Look at how their keys are.
125

125

00:10:17.730  -->  00:10:21.940
Got X X X Y Z Z on the third data set.
126

126

00:10:21.940  -->  00:10:28.527
Third data frame and
YYXXZ on the fourth data frame, cool.
127

127

00:10:28.527  -->  00:10:34.094
So let's go ahead and
merge them, see what happens,
128

128

00:10:34.094  -->  00:10:39.673
pd.merge (dframe3,
dframe4) see what we get.
129

129

00:10:42.126  -->  00:10:47.618
All right, so now the data sets
are merged based on both their index and
130

130

00:10:47.618  -->  00:10:50.701
where they matched on that key column.
131

131

00:10:50.701  -->  00:10:54.030
So you can see data set 3vand data set 4.
132

132

00:10:54.030  -->  00:10:55.548
Those values are now on the same row.
133

133

00:10:55.548  -->  00:10:59.004
If they were able to get matched
up by that key and by that index.
134

134

00:11:04.134  -->  00:11:07.122
Now if you notice something else,
135

135

00:11:07.122  -->  00:11:12.592
the values are a little different,
if you might have noticed.
136

136

00:11:12.592  -->  00:11:18.311
So, for instance let's look at data
137

137

00:11:18.311  -->  00:11:23.300
set 3 on 0 and data set 4 on 0.
138

138

00:11:25.270  -->  00:11:28.330
And they were both 0on the key Y.
139

139

00:11:28.330  -->  00:11:33.240
Now let's look where data
set had the key of Z.
140

140

00:11:34.400  -->  00:11:38.250
So, you have data set 4 and
data set 3, key of Z.
141

141

00:11:40.010  -->  00:11:42.100
Data set 4 was 4.
142

142

00:11:42.100  -->  00:11:45.410
On that data set 3 was 5 on that.
143

143

00:11:47.020  -->  00:11:50.530
And so now you can see they've
been matched up there.
144

144

00:11:52.960  -->  00:11:55.970
You also had a 4 on data set 3.
145

145

00:11:55.970  -->  00:11:57.890
So it got matched up.
146

146

00:11:57.890  -->  00:12:02.920
And data set 4, it pulled that same
value to make that match on the Z.
147

147

00:12:04.090  -->  00:12:06.300
So now you don't have a null value there.
148

148

00:12:09.550  -->  00:12:17.030
Okay, so
we can also merge with multiple keys.
149

149

00:12:17.030  -->  00:12:19.545
So I'm going to make another data frame.
150

150

00:12:19.545  -->  00:12:25.191
So I'll say, df_left
151

151

00:12:25.191  -->  00:12:31.406
equals DataFrame key1.
152

152

00:12:37.123  -->  00:12:40.077
And let's go ahead and
153

153

00:12:40.077  -->  00:12:45.528
pass some city initials as those values.
154

154

00:12:45.528  -->  00:12:47.085
Then let's go ahead and make a second key.
155

155

00:12:50.562  -->  00:12:55.052
And we're just gonna pass,
156

156

00:12:55.052  -->  00:12:59.354
let's just say one, two,
157

157

00:12:59.354  -->  00:13:03.479
just say one, two, one.
158

158

00:13:03.479  -->  00:13:07.745
And then I'll make one last
entry into this dictionary.
159

159

00:13:07.745  -->  00:13:13.268
I'll say the data itself,
160

160

00:13:13.268  -->  00:13:18.071
set that equal to 10,
161

161

00:13:18.071  -->  00:13:20.961
20, 30.
162

162

00:13:20.961  -->  00:13:21.952
Okay.
163

163

00:13:21.952  -->  00:13:26.520
And then let me just format this a bit so
it's easy to read for you guys.
164

164

00:13:26.520  -->  00:13:30.730
So I have my key1, SF, SF,
LA, my key 2, one, two,
165

165

00:13:30.730  -->  00:13:33.230
one, and then my data is 10, 20, 30.
166

166

00:13:33.230  -->  00:13:38.640
Let's make another data frame.
167

167

00:13:38.640  -->  00:13:39.770
We'll call it df_right.
168

168

00:13:43.301  -->  00:13:47.461
We'll pass another dictionary here.
169

169

00:13:47.461  -->  00:13:56.463
We'll say "key1".
170

170

00:13:56.463  -->  00:14:03.918
We'll call it SF, SF, LA, LA.
171

171

00:14:03.918  -->  00:14:08.983
Let's make another key2 and
172

172

00:14:08.983  -->  00:14:15.065
then we'll just make it one, one.
173

173

00:14:15.065  -->  00:14:22.029
Let's go ahead and
make it one, two after that.
174

174

00:14:22.029  -->  00:14:29.839
And then lastly we'll have right data,
175

175

00:14:29.839  -->  00:14:37.190
and we'll make the right data equal to
176

176

00:14:37.190  -->  00:14:42.252
40 50, 60, 70.
177

177

00:14:42.252  -->  00:14:42.786
Okay.
178

178

00:14:42.786  -->  00:14:44.660
So let's go ahead and
179

179

00:14:44.660  -->  00:14:50.401
take a look at those data frames
separately before we merge them.
180

180

00:14:50.401  -->  00:14:55.446
So data frame left,
we made a key one and a key two column.
181

181

00:14:55.446  -->  00:15:01.375
key1 is cities, key2 is just one, two and
one names, and then we have left data,
182

182

00:15:01.375  -->  00:15:06.968
which is 10, 20, 30, dfright,
we have key1 against city initials,
183

183

00:15:06.968  -->  00:15:12.853
key2, one, one, one, two, and
then right data, 40, 50, 60, 70.
184

184

00:15:12.853  -->  00:15:17.482
So, let's see what
happens if we merge them.
185

185

00:15:17.482  -->  00:15:22.200
So, if we're gonna merge
on multiple keys I
186

186

00:15:22.200  -->  00:15:27.173
can input df_left,
my right data frame, and
187

187

00:15:27.173  -->  00:15:33.560
then I'm gonna try to merge them
on both key one and key two.
188

188

00:15:34.710  -->  00:15:35.670
So let's see what happens.
189

189

00:15:35.670  -->  00:15:40.900
I can input a list for
multiple keys or column names.
190

190

00:15:40.900  -->  00:15:44.420
So I'm gonna merge them on key1, key2, and
191

191

00:15:44.420  -->  00:15:47.840
I'm gonna say outer, so
it does the union of those.
192

192

00:15:50.990  -->  00:15:53.263
And let's see what happens.
193

193

00:15:53.263  -->  00:15:58.209
So now, I have key1 and
key2, and the left data and
194

194

00:15:58.209  -->  00:16:02.933
right data have been merged
to match up together by
195

195

00:16:02.933  -->  00:16:06.999
their keys Right data had no data for
SF 2.
196

196

00:16:06.999  -->  00:16:10.950
So if you look at the right data
there is no SF 2, there's only SF 1.
197

197

00:16:10.950  -->  00:16:16.710
So it's going to give you a null for
that data there.
198

198

00:16:16.710  -->  00:16:22.320
So using the above you can check multiple
data sets for multiple key combinations.
199

199

00:16:22.320  -->  00:16:25.580
So for instance if you wanted to know, oh,
200

200

00:16:25.580  -->  00:16:30.990
what did the left dataset have for LA one.
201

201

00:16:30.990  -->  00:16:35.300
So you can look up LA, one, and
202

202

00:16:35.300  -->  00:16:42.245
check that the left data set had 30 and
that the right data set had 60.
203

203

00:16:42.245  -->  00:16:48.645
Okay, so
now you're gonna note that the left and
204

204

00:16:48.645  -->  00:16:52.670
right dataframes have overlapping
key names, key1 and key2.
205

205

00:16:52.670  -->  00:16:57.410
So can automatically add a suffix to them,
206

206

00:16:59.130  -->  00:17:03.352
and we can do that by
just saying pd.merge,
207

207

00:17:03.352  -->  00:17:08.670
df_left, df_right.
208

208

00:17:08.670  -->  00:17:13.338
And let's just do it on one key this time,
e'll
209

209

00:17:13.338  -->  00:17:17.690
say on key1.
210

210

00:17:17.690  -->  00:17:22.805
So now we've merged those
data frames on key1.
211

211

00:17:22.805  -->  00:17:27.944
So if you noticed, since I only merged
it on one key, and the rest of the data
212

212

00:17:27.944  -->  00:17:33.002
frame still had multiple columns, and
they were named the same thing, so
213

213

00:17:33.002  -->  00:17:38.161
each had a column named key2,
Pandas automatically added a suffix to it.
214

214

00:17:38.161  -->  00:17:43.100
So it said for the left data frame one,
it gave it a suffix of underscore x,
215

215

00:17:43.100  -->  00:17:47.101
and for the right data frame one,
it gave it a suffix of _y.
216

216

00:17:47.101  -->  00:17:50.093
So if you accidentally
weren't paying attention or
217

217

00:17:50.093  -->  00:17:54.581
you wanna do this on purpose and you just
only wanted to merge by one column, and
218

218

00:17:54.581  -->  00:17:57.845
they happen to have two columns
that were named the same,
219

219

00:17:57.845  -->  00:18:01.121
Pandas will automatically
keep them separated for you.
220

220

00:18:04.981  -->  00:18:11.192
Okay, since there's the suffix,
if you didn't want it to be automatic,
221

221

00:18:11.192  -->  00:18:17.715
and you wanted to specify what that
suffix was, you could merge it yourself.
222

222

00:18:17.715  -->  00:18:23.925
So df_left, df_right.
223

223

00:18:23.925  -->  00:18:25.910
Let's merge it on Key1, and
224

224

00:18:30.430  -->  00:18:36.763
then we can also pass the argument suffix,
225

225

00:18:36.763  -->  00:18:42.030
and we can decide what we
want that suffix to be.
226

226

00:18:42.030  -->  00:18:47.406
So we can say lefty for the first one,
227

227

00:18:47.406  -->  00:18:53.190
and then, _righty for the second one.
228

228

00:18:53.190  -->  00:19:00.660
So instead of automatically saying _X,
_Y, you can say _lefty, _righty.
229

229

00:19:00.660  -->  00:19:02.170
And let's see what happens when I do that.
230

230

00:19:03.560  -->  00:19:08.152
And there you go, key2s were in both
of them, now you can choose the suffix
231

231

00:19:08.152  -->  00:19:14.244
_lefty, _righty, or
whatever you want to decide to put there.
232

232

00:19:14.244  -->  00:19:19.980
So, there's a ton of info on merge
parameters in the documentation.
233

233

00:19:21.240  -->  00:19:26.550
So, if you want to check more stuff,
some more specific things,
234

234

00:19:26.550  -->  00:19:29.000
you can check out the documentation,
235

235

00:19:29.000  -->  00:19:33.410
the link is in the IPython notebook on
the GitHub link for the notebook viewer.
236

236

00:19:35.090  -->  00:19:38.868
If you want we can just check
this out real quick on merge so
237

237

00:19:38.868  -->  00:19:42.530
let's go ahead and check that out.
238

238

00:19:44.140  -->  00:19:50.430
So, like I said, we have the how method,
we can label the indexes,
239

239

00:19:50.430  -->  00:19:54.400
which indexes we want to use,
and choose the suffix to use
240

240

00:19:54.400  -->  00:19:59.110
if there the same name index or
column on both of them.
241

241

00:20:00.850  -->  00:20:03.550
All right, so
that's the basics of merging.
242

242

00:20:03.550  -->  00:20:08.190
You just do pd.merge,
put in your two data frames,
243

243

00:20:08.190  -->  00:20:13.050
define which key you wanna merge it on,
define how you wanna merge it either left,
244

244

00:20:13.050  -->  00:20:16.560
right, or by the union of both keys and
245

245

00:20:16.560  -->  00:20:20.230
then you can also choose a suffix for
each key to be merged.
246

246

00:20:21.490  -->  00:20:24.870
So that's all you really need
to know as far as right now.
247

247

00:20:24.870  -->  00:20:28.930
Next up, we're gonna learn how to merge
on the index and not by the columns.
248

248

00:20:28.930  -->  00:20:29.790
I'll see you there.
