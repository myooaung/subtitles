WEBVTT
1
1

00:00:01.040  -->  00:00:04.620
Hey you guys.
Welcome to lecture 43.
2

2

00:00:04.620  -->  00:00:10.100
This lecture we'll be going over
groupby in a little more detail and
3

3

00:00:10.100  -->  00:00:13.920
how to use it on a dictionary and
on a series.
4

4

00:00:15.580  -->  00:00:18.837
All right, so
we're gonna import the usual.
5

5

00:00:18.837  -->  00:00:21.070
You can either copy and
paste this or just type it out.
6

6

00:00:23.270  -->  00:00:28.670
NumPy as np, pandas as np,
and then, from pandas
7

7

00:00:28.670  -->  00:00:33.629
import series, and
8

8

00:00:33.629  -->  00:00:40.075
DataFrame to import and it's good.
9

9

00:00:40.075  -->  00:00:40.985
All right, awesome.
10

10

00:00:40.985  -->  00:00:44.305
So let's learn how to use
a dictionary system with groupby.
11

11

00:00:44.305  -->  00:00:48.815
So, first thing I'm gonna
do is make a data frame.
12

12

00:00:48.815  -->  00:00:50.435
Let's call this data frame animals.
13

13

00:00:53.625  -->  00:00:55.415
There's my data frame.
14

14

00:00:55.415  -->  00:01:00.420
It's gonna be some random numbers,
so let's just make it.
15

15

00:01:00.420  -->  00:01:03.416
Well, actually let's make
it a range of numbers.
16

16

00:01:03.416  -->  00:01:08.530
Let's say, np arrange will have
17

17

00:01:08.530  -->  00:01:14.320
16 numbers and we're going to
reshape this into a 4 by 4 matrix.
18

18

00:01:14.320  -->  00:01:15.921
So those will be our values.
19

19

00:01:18.350  -->  00:01:23.607
Our columns,
we're just gonna have letter columns,
20

20

00:01:23.607  -->  00:01:26.587
so we'll say W, X, Y, and Z.
21

21

00:01:29.674  -->  00:01:34.710
And then our index will
just be some animals.
22

22

00:01:34.710  -->  00:01:42.150
So we'll say a dog, we'll have a cat
index, we'll say a bird, and then mouse.
23

23

00:01:45.710  -->  00:01:48.000
Okay so that's our data frame.
24

24

00:01:48.000  -->  00:01:49.580
Let's check it out.
25

25

00:01:51.200  -->  00:01:52.460
Animals, all right.
26

26

00:01:52.460  -->  00:01:54.970
So now I'm gonna add some
null valuables to this.
27

27

00:01:54.970  -->  00:02:02.087
So to do that I'm gonna say animals.ix.
28

28

00:02:02.087  -->  00:02:09.296
So, let's say through one and two
29

29

00:02:13.253  -->  00:02:19.940
on the w and y columns.
30

30

00:02:22.130  -->  00:02:25.620
I'm gonna say those values
set them equal to null.
31

31

00:02:28.840  -->  00:02:33.665
Okay, let's do that, and
now let's see animals.
32

32

00:02:33.665  -->  00:02:37.783
So what we should expect is on cat,
33

33

00:02:37.783  -->  00:02:42.570
yep here we go, that W and Y are null.
34

34

00:02:42.570  -->  00:02:50.050
Okay and you can choose whatever null
values you want to replace with null.
35

35

00:02:51.380  -->  00:02:55.130
So let's say I had a dictionary
with behavior values in it.
36

36

00:02:56.460  -->  00:02:57.810
How could I use that?
37

37

00:02:57.810  -->  00:03:02.330
So lets make a dictionary and
call it behavior map,
38

38

00:03:02.330  -->  00:03:07.880
and we're gonna be creating
a dictionary for this so
39

39

00:03:07.880  -->  00:03:13.030
I'm gonna say W let's set that to good.
40

40

00:03:15.310  -->  00:03:19.740
Let's set X to bad behavior.
41

41

00:03:19.740  -->  00:03:24.310
We'll set Y to be good as well.
42

42

00:03:26.450  -->  00:03:30.410
And we'll set Z to be bad.
43

43

00:03:30.410  -->  00:03:35.336
All right, so
now we have our behavior map dictionary.
44

44

00:03:35.336  -->  00:03:42.150
We're letting each of the columns
either a good or a bad behavior.
45

45

00:03:42.150  -->  00:03:45.046
And now we can say animal
46

46

00:03:48.690  -->  00:03:51.935
underscore col, let's make another object.
47

47

00:03:51.935  -->  00:03:56.575
So we'll make a group by object and
say that's going to be equal to animals.
48

48

00:03:56.575  -->  00:04:03.220
And we're going to group that data
frame using that behavior mapping.
49

49

00:04:03.220  -->  00:04:07.771
And we're going to schedule
50

50

00:04:07.771  -->  00:04:12.137
along access equal to one.
51

51

00:04:12.137  -->  00:04:17.075
And then let's say animal
column let's get the sum.
52

52

00:04:17.075  -->  00:04:21.880
So show the sum according to the group
by using that mapping we just did.
53

53

00:04:24.970  -->  00:04:27.520
Okay, so what do we have here?
54

54

00:04:27.520  -->  00:04:33.310
We have dog, cat, bird, and mouse, and
now we have a bad and a good column.
55

55

00:04:33.310  -->  00:04:38.210
So what this was is it
summed up all the values
56

56

00:04:39.640  -->  00:04:43.080
that were good and bad for
each of the index rows.
57

57

00:04:43.080  -->  00:04:48.290
So for instance let's take
a look at bad dog and good dog.
58

58

00:04:48.290  -->  00:04:53.680
So, bad dog, well, for
good dog, we have two there.
59

59

00:04:53.680  -->  00:04:59.310
So, that should've been equal to the good
values, and the good values were W and Y.
60

60

00:05:00.710  -->  00:05:03.520
So, let's look at W and Y for dog.
61

61

00:05:03.520  -->  00:05:08.800
So, W for dog was zero and
Y for dog was two.
62

62

00:05:08.800  -->  00:05:12.960
So if you sum up the quote unquote
good values on that behavior map for
63

63

00:05:12.960  -->  00:05:15.510
the dog you'll get two, zero plus two.
64

64

00:05:15.510  -->  00:05:21.750
And then for bad the X and the Z you'll
get one plus three which is four.
65

65

00:05:21.750  -->  00:05:25.430
And it did that for all the index for
dog, cat, bird, and mouse.
66

66

00:05:26.640  -->  00:05:31.110
Cat being null since there
was no good cats and
67

67

00:05:31.110  -->  00:05:34.430
I may have done that on purpose
since I don't like cats.
68

68

00:05:34.430  -->  00:05:38.260
Anyways, let's try it with a series now.
69

69

00:05:38.260  -->  00:05:46.463
So, we'll make a behave series
70

70

00:05:48.586  -->  00:05:53.462
And we're gonna make a series
out of behavior map.
71

71

00:05:56.086  -->  00:05:59.268
And then let's go ahead and
show that behave series.
72

72

00:05:59.268  -->  00:06:04.125
All right,
behav I guess cuz I forgot the e.
73

73

00:06:04.125  -->  00:06:04.995
So now we have our map.
74

74

00:06:04.995  -->  00:06:08.755
The W was good, X was bad,
Y was good, Z is bad.
75

75

00:06:08.755  -->  00:06:12.975
So that's our series out
of that dictionary and
76

76

00:06:12.975  -->  00:06:14.560
now let's groupby the series.
77

77

00:06:14.560  -->  00:06:20.639
So let's take our data frame,
animals, and we're gonna say groupby
78

78

00:06:20.639  -->  00:06:25.630
that series, and again,
do it along access equal to 1.
79

79

00:06:25.630  -->  00:06:28.280
And now let's count.
80

80

00:06:30.780  -->  00:06:34.860
So now we're gonna count the total
of bad and good instances for
81

81

00:06:34.860  -->  00:06:39.320
each animal based on that series.
82

82

00:06:39.320  -->  00:06:42.110
So, now we get two and two for
83

83

00:06:42.110  -->  00:06:45.650
dog since it's just doing
accounting not summing of them.
84

84

00:06:47.880  -->  00:06:49.170
So let's show our d frame again.
85

85

00:06:53.430  -->  00:06:55.550
Sorry, our data frame is called animals.
86

86

00:06:57.370  -->  00:07:00.754
There we go.
87

87

00:07:00.754  -->  00:07:02.106
Okay, excellent.
88

88

00:07:02.106  -->  00:07:04.780
So what does that mean?
89

89

00:07:04.780  -->  00:07:09.330
That means the dog had two instances
90

90

00:07:09.330  -->  00:07:13.690
on the bad columns and two instances on
the good columns since it was counting.
91

91

00:07:15.580  -->  00:07:22.110
Lets assume that we wanted to groupby
the length of the animal names.
92

92

00:07:22.110  -->  00:07:25.020
So we can just pass the length
function into groupby.
93

93

00:07:25.020  -->  00:07:29.470
So this is going to be a really
interesting thing we can do with groupby.
94

94

00:07:29.470  -->  00:07:35.150
So look at the animals, look at the length
as far as characters of each index.
95

95

00:07:35.150  -->  00:07:38.990
So dog and cat are three letters long,
bird is four letters long, and
96

96

00:07:38.990  -->  00:07:44.020
mouse is five letters long.
97

97

00:07:44.020  -->  00:07:51.030
So we can say animals groupby and
98

98

00:07:51.030  -->  00:07:56.480
that's gonna take the length of each
index and then we can get the sum.
99

99

00:08:00.690  -->  00:08:04.059
All right, so now our index is
100

100

00:08:05.110  -->  00:08:10.400
the number of letters in the animal name
and then it's summed up, those guys.
101

101

00:08:10.400  -->  00:08:15.198
For instance, if we look at
index that's 3, that summed up
102

102

00:08:15.198  -->  00:08:20.200
the column values for
the 3 letter animal names, dog and cat.
103

103

00:08:20.200  -->  00:08:25.500
So, let's look at Dog x was 1,
cat x was 5.
104

104

00:08:25.500  -->  00:08:30.560
And now, since we grouped it by
the length of the animal name,
105

105

00:08:30.560  -->  00:08:33.980
5 plus 1 on that x column equals 6.
106

106

00:08:33.980  -->  00:08:40.360
And it's done that for each of the column
values, and bird and mouse as well,
107

107

00:08:40.360  -->  00:08:43.130
since they were four letters long and
five letters long respectively.
108

108

00:08:45.000  -->  00:08:49.240
We can also mix functions with arrays,
dictionaries, and
109

109

00:08:49.240  -->  00:08:50.649
series for groupby methods.
110

110

00:08:51.710  -->  00:08:53.130
So let's check that out.
111

111

00:08:53.130  -->  00:08:55.680
We can say get a set of keys.
112

112

00:08:57.130  -->  00:08:58.600
So I'm gonna make a list for this.
113

113

00:08:58.600  -->  00:09:02.677
I'm gonna say a, b,
114

114

00:09:02.677  -->  00:09:08.090
a, b, so I have my keys.
115

115

00:09:08.090  -->  00:09:12.730
And now I'm gonna groupby length of name
and the keys to show the max values.
116

116

00:09:12.730  -->  00:09:16.978
So I'll say animals.groupby, and
117

117

00:09:16.978  -->  00:09:22.595
then I'll groupby the length,
and those keys,
118

118

00:09:22.595  -->  00:09:28.630
and I'm gonna find the max values for
each of those.
119

119

00:09:31.470  -->  00:09:32.490
So what has it done here?
120

120

00:09:33.700  -->  00:09:40.640
It's set that key list onto that previous
data frame we had, it's pushed it onto it.
121

121

00:09:40.640  -->  00:09:46.360
So now that index of three now
has a sub index of A and B and
122

122

00:09:46.360  -->  00:09:50.990
then it's found the max values for
each of those cases on every column.
123

123

00:09:52.700  -->  00:09:57.920
Great, so we can use groupby
with index hierarchy levels.
124

124

00:09:59.130  -->  00:10:01.860
So let's create
a hierarchical column index.
125

125

00:10:01.860  -->  00:10:07.860
So we'll say hier_col = pd Multiindex,
126

126

00:10:07.860  -->  00:10:14.360
and then we can call
the method from_ arrays,
127

127

00:10:14.360  -->  00:10:21.026
so this will allow us to
build a multi-column,
128

128

00:10:21.026  -->  00:10:26.210
or issue a multi-list, excuse me.
129

129

00:10:27.570  -->  00:10:33.530
So let's say we want some city's initials,
since we've been doing that a lot, NY,
130

130

00:10:33.530  -->  00:10:40.360
NY, make NY again, and then let's have
the last two be SF for San Francisco.
131

131

00:10:40.360  -->  00:10:47.090
And then we're gonna pass a list of lists
so let's add another list in there.
132

132

00:10:47.090  -->  00:10:48.360
This one will just be numbers.
133

133

00:10:48.360  -->  00:10:52.640
We'll say, 1, 2, 3, 1, 2.
134

134

00:10:54.010  -->  00:11:00.870
All right, so that's our list of two lists
and then for this we'll name each index.
135

135

00:11:00.870  -->  00:11:04.590
So the names of the index,
we can pass through argument names and
136

136

00:11:04.590  -->  00:11:06.790
we'll say it was the city.
137

137

00:11:07.820  -->  00:11:11.610
And then the second one we'll just
give it a generic name, sub values.
138

138

00:11:11.610  -->  00:11:13.780
This is just some numbers 1, 2, 3, 1, 2.
139

139

00:11:15.170  -->  00:11:18.295
So let's make that,all right?
140

140

00:11:18.295  -->  00:11:22.520
Now let's create a data frame
from that high article index.
141

141

00:11:22.520  -->  00:11:29.040
We'll say data frame_HR for
hierarchy is a data frame.
142

142

00:11:31.860  -->  00:11:38.010
We'll pass let's say a 5 by 5 matrix so
I'll create a ranged.
143

143

00:11:39.200  -->  00:11:44.324
I'm gonna reshape this to be 5 and 5 and
144

144

00:11:44.324  -->  00:11:51.420
then I'll set my columns
equal to the index hierarchy.
145

145

00:11:54.420  -->  00:11:56.190
Cool.
146

146

00:11:56.190  -->  00:12:00.215
And now what I'm gonna do,
147

147

00:12:00.215  -->  00:12:07.921
I'm gonna day dframe_hr = dframe_hr * 100.
148

148

00:12:07.921  -->  00:12:12.627
So what that's gonna do,
it's gonna multiply every object in that
149

149

00:12:12.627  -->  00:12:17.010
DataFrame by 100 and I do that for
clarity reasons later on.
150

150

00:12:18.060  -->  00:12:22.750
Just so it's really obvious that
you have a 0, 100, 200, 300, 400,
151

151

00:12:22.750  -->  00:12:24.100
all the way to 24.
152

152

00:12:24.100  -->  00:12:29.133
So now we have a hierarchy index,
top index is cities NY SF.
153

153

00:12:29.133  -->  00:12:35.220
That sub-index is 1, 2, 3, 1, 2 and
then we have our index on the side.
154

154

00:12:36.830  -->  00:12:40.550
So we have the column index and
the regular index.
155

155

00:12:42.720  -->  00:12:47.760
So that's what you can use groupby.
156

156

00:12:47.760  -->  00:12:52.210
We have those data frames, and
you can use groupby on them as well.
157

157

00:12:53.830  -->  00:12:59.120
So you can use multi index from arrays
to build a hierarchical index for
158

158

00:12:59.120  -->  00:12:59.810
your data frame.
159

159

00:13:01.990  -->  00:13:03.580
That's about it for this.
160

160

00:13:03.580  -->  00:13:06.440
You can check out
the documentation on groupby if you
161

161

00:13:06.440  -->  00:13:08.440
wanna know some more details on it.
162

162

00:13:08.440  -->  00:13:11.296
We'll continue using it
throughout the course so
163

163

00:13:11.296  -->  00:13:16.128
if you don't feel 100% on it you'll still
have way more chances to see it again.
164

164

00:13:16.128  -->  00:13:20.260
All right, up next we're gonna
learn about data aggregation.
165

165

00:13:20.260  -->  00:13:20.850
I'll see you there.
