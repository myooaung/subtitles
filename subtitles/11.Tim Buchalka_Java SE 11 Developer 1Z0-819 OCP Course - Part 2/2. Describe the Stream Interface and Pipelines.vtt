WEBVTT
1
00:00:05.240 --> 00:00:12.080
The Javadoc YouTube stream to stream interface provides the methods to support sequential and parallel

2
00:00:12.260 --> 00:00:14.870
aggregate operations on a sequence of elements.

3
00:00:15.560 --> 00:00:21.500
In addition to Stream, which is a stream of object references, there are versions of streams for primitives

4
00:00:21.950 --> 00:00:24.830
in stream, long stream and double stream.

5
00:00:25.100 --> 00:00:28.250
Collectively, these interfaces are referred to as streams.

6
00:00:28.910 --> 00:00:35.270
At a minimum, a declaration of a stream is shown below stream is a generic interface and an example

7
00:00:35.270 --> 00:00:35.840
below.

8
00:00:36.170 --> 00:00:38.930
We specify the stream will consist of string elements.

9
00:00:39.940 --> 00:00:42.700
Let's explore the different ways you can create a streaming code.

10
00:00:43.180 --> 00:00:47.070
We need a new project and intelligence of constraint so you can see on screen.

11
00:00:47.140 --> 00:00:48.820
Going to create a new class in this project.

12
00:00:49.260 --> 00:00:51.070
Call it stream creation example.

13
00:01:02.030 --> 00:01:07.580
All right, so this code is demonstrating some of the static methods on stream which create streams.

14
00:01:07.880 --> 00:01:15.320
So looking at the code here, we've got stream that empty being used online, 16 streams of being used

15
00:01:15.320 --> 00:01:18.980
online, 19 streamed out of nullable, being used on line.

16
00:01:18.980 --> 00:01:23.390
Twenty five, a stream to generate being used on line 31.

17
00:01:25.070 --> 00:01:30.950
They're also demonstrating that you can create a stream from any collection that implements the collection

18
00:01:30.950 --> 00:01:31.510
interface.

19
00:01:32.270 --> 00:01:37.520
So I'm using the for each terminal operation, which I'll discuss later, to create some output.

20
00:01:37.880 --> 00:01:38.150
All right.

21
00:01:38.160 --> 00:01:39.000
So let's run this now.

22
00:01:43.140 --> 00:01:48.420
So it's interesting to note that you can create infinite streams using, generate and then apply a limit

23
00:01:48.420 --> 00:01:52.020
to the stream is a limit, which again I'll discuss a bit later.

24
00:01:52.830 --> 00:01:55.470
Javani and introduce the static method, iterate.

25
00:01:55.860 --> 00:01:57.030
There are two versions.

26
00:01:57.270 --> 00:02:03.210
Each accepts a seed value, an initial value to start with at a unary operator, which represents the

27
00:02:03.210 --> 00:02:06.050
next value, starting with the seed value.

28
00:02:06.420 --> 00:02:10.920
One of the versions also has a predicate parameter which allows you to limit the stream.

29
00:02:11.730 --> 00:02:14.690
So let's have a look at this by placing some more code in to our main method.

30
00:02:16.130 --> 00:02:21.560
So a lot forty seven, we're creating a stream with a unary operator based lambda expression, the numbers

31
00:02:21.560 --> 00:02:25.760
five, 10, 15, 20, etc. are basically an infinite stream there.

32
00:02:26.000 --> 00:02:32.000
And then online 52, we're using dot limit to limit the infinite stream they could say they're replacing.

33
00:02:32.000 --> 00:02:35.270
There is ten and the additional Kitazawa, we scroll down a little bit.

34
00:02:35.780 --> 00:02:41.870
Busy stream that iterate again on line fifty seven, this time to create a finite stream limited to

35
00:02:41.990 --> 00:02:43.640
Vali's less than or equal to 100.

36
00:02:43.940 --> 00:02:49.130
And then finally we're using the DOT for each method to print out the valleys to run this.

37
00:02:50.720 --> 00:02:52.370
And there's the airport at the bottom of the screen.

38
00:02:53.310 --> 00:02:58.740
All right, next, let's take a look at the streambed, a concat method to code toothpaste in.

39
00:03:01.380 --> 00:03:07.230
Now, this kite loops through command line arguments, splitting a sentence by what space, then creating

40
00:03:07.230 --> 00:03:09.930
a stream of words is in a stream of method.

41
00:03:10.440 --> 00:03:15.360
Each stream is concatenated to arge stream through a self referencing assignment.

42
00:03:16.320 --> 00:03:22.620
They can run this code from the command line if you wish, or pass some parameters by editing the configuration

43
00:03:22.650 --> 00:03:23.330
intelligently.

44
00:03:24.060 --> 00:03:27.720
The other thing you can do, anything I want to show how to do that can actually add a prompt here.

45
00:03:29.080 --> 00:03:33.460
So obviously, if they may use program arguments before here, but what we can do there is put a dollar

46
00:03:34.720 --> 00:03:37.360
prompt to that twice.

47
00:03:40.000 --> 00:03:45.630
And it's all set up by intelligibly to prompt for two sentences while executing the code syllable,

48
00:03:45.700 --> 00:03:48.640
hard coded programming and arguments like we've used before.

49
00:03:49.270 --> 00:03:50.170
So if you run this now.

50
00:03:54.290 --> 00:03:55.820
They can say intelligence asking us.

51
00:03:56.080 --> 00:03:58.970
Let's try to be test one, two, three.

52
00:04:00.530 --> 00:04:02.180
In a second, one, Will had five, six, seven.

53
00:04:03.130 --> 00:04:05.020
By the way, quite necessary here.

54
00:04:06.960 --> 00:04:07.770
Five, six, seven.

55
00:04:10.360 --> 00:04:15.250
And this, the airport, as you can see at the bottom of the screen, it might make sense to build a

56
00:04:15.250 --> 00:04:20.740
stream one item at a time, in which case you could use streambed up, build a method to create a stream

57
00:04:20.740 --> 00:04:26.140
the a builder of a specific type object and access its accept method to add an element.

58
00:04:26.560 --> 00:04:28.330
So there's some more code to take a look.

59
00:04:30.890 --> 00:04:36.290
So here's what I'm doing is I'm demonstrating using a stream of beware of top string to create the word

60
00:04:36.290 --> 00:04:38.100
stream one word at a time.

61
00:04:38.990 --> 00:04:39.770
So let's run this.

62
00:04:42.470 --> 00:04:44.270
We used the same input as last time.

63
00:04:45.990 --> 00:04:47.880
Test one, two, three.

64
00:04:49.460 --> 00:04:51.560
And for the second month, five, six, seven.

65
00:05:00.140 --> 00:05:04.580
The output from this car is exactly the same, given the same inputs that have achieved it.

66
00:05:05.790 --> 00:05:07.470
With the Kurds starting on line 81.

67
00:05:10.030 --> 00:05:15.800
In summary, the stream of static factory methods as shown below, we've got the builder method which

68
00:05:15.800 --> 00:05:21.070
returns the stream to builder angle brackets TESO of a specific type, so returns a builder for a stream.

69
00:05:21.610 --> 00:05:28.020
We've got the concat method there that returns a stream of a certain type that creates a lazily Kincannon

70
00:05:28.030 --> 00:05:33.160
and stream whose elements are all the elements of the first stream, followed by all the elements of

71
00:05:33.160 --> 00:05:34.030
the second stream.

72
00:05:34.240 --> 00:05:36.220
They can see that can get two arguments.

73
00:05:36.760 --> 00:05:37.930
The next method is empty.

74
00:05:38.350 --> 00:05:45.010
That also creates a stream of a specific type, returns an empty sequential stream you've got to generate,

75
00:05:45.250 --> 00:05:51.310
which takes a player as a parameter that returns a stream of a specific type T an angle brackets that

76
00:05:51.310 --> 00:05:57.430
returns an infinite sequential unordered stream where each element is generated by the provided supplier.

77
00:05:59.460 --> 00:06:05.820
We've got iterate with three arguments there, Type T has the seed, a predicate and a unary operator

78
00:06:06.100 --> 00:06:10.020
that returns a stream of a specific type T here, T an angle brackets.

79
00:06:10.200 --> 00:06:16.350
So that returns a sequential order stream produced by iterative application of the given next function

80
00:06:16.560 --> 00:06:21.870
to an initial element conditioned on satisfying the given his next predicate.

81
00:06:22.590 --> 00:06:28.290
This was introduced in Javani and they've got an overloaded version of it that takes two parameters.

82
00:06:28.710 --> 00:06:34.370
The seed of type T and a unitary operator that also returns a stream of specific type a stream in angle

83
00:06:34.380 --> 00:06:34.790
brackets.

84
00:06:35.130 --> 00:06:41.820
This returns an infinite sequential order stream produced by iterative application of a function if

85
00:06:42.180 --> 00:06:48.210
that's the operator to an initial element seed producing a stream consisting of you can see the seed

86
00:06:48.570 --> 00:06:51.360
then if seed, f, f seed, etc..

87
00:06:53.350 --> 00:06:59.830
We got two overloaded versions of the of method, the first one takes one argument of typed returns,

88
00:06:59.830 --> 00:07:05.140
a stream of typed tinoco brackets, so that returns a sequential stream containing a single element.

89
00:07:05.510 --> 00:07:08.500
Then the second version was t as a list of values here.

90
00:07:08.800 --> 00:07:09.720
So multiple values.

91
00:07:09.730 --> 00:07:15.610
In other words, this also returns a stream of a specific type, an angle bracket and returns a sequential

92
00:07:15.940 --> 00:07:16.300
order.

93
00:07:16.610 --> 00:07:18.430
Whose elements are the specified values?

94
00:07:18.930 --> 00:07:22.740
The last one is of nullable, excepting a perimeter of type T.

95
00:07:23.010 --> 00:07:28.600
There are also returns a stream of a specific type tinoco bracket, and specifically it returns a sequential

96
00:07:28.600 --> 00:07:34.960
stream containing a single element, if not now, otherwise returns an empty stream that was also introduced

97
00:07:34.960 --> 00:07:35.740
in Java nine.

98
00:07:37.780 --> 00:07:40.630
All right, so, you know, know how to create a stream, what?

99
00:07:41.230 --> 00:07:47.920
Well, there's two types of operations on stream intermediate operations and terminal operations streams

100
00:07:47.920 --> 00:07:54.610
and lazy mini computation on the source data is only performed when the terminal operation is initiated

101
00:07:54.820 --> 00:08:00.420
and source elements are only included in operations if the elements are required for the end result.

102
00:08:02.560 --> 00:08:08.530
I stated in the introduction that a stream pipeline consists of the following, a source such as the

103
00:08:08.530 --> 00:08:15.100
collection and I or database source on which to perform a query zero to many intermediate operations

104
00:08:15.100 --> 00:08:17.320
which transform a stream into another stream.

105
00:08:17.870 --> 00:08:23.710
Thirdly, one terminal operation which executes the stream pipeline and produces a result.

106
00:08:25.700 --> 00:08:27.750
So let's first look at terminal operations.

107
00:08:28.220 --> 00:08:34.430
Nothing will ever happen on a stream without an invocation of a terminal operation, at which point

108
00:08:34.430 --> 00:08:40.280
the stream is opened, data is collected from the source, intermediate operations are executed and

109
00:08:40.280 --> 00:08:42.230
the work in the pipeline completed.

110
00:08:43.010 --> 00:08:47.260
Once completed, the stream is closed and you cannot do anything else with it.

111
00:08:47.780 --> 00:08:52.850
Noted, if your source has infinite, there may be no guarantee that the terminal operation will terminate

112
00:08:53.060 --> 00:08:54.500
the process or processes.

113
00:08:56.630 --> 00:08:58.520
The terminal operations are listed below.

114
00:08:58.970 --> 00:09:04.070
I'll be discussing the usage of all of these in later videos, but for the purpose of this discussion,

115
00:09:04.310 --> 00:09:10.040
you just need to know that any of these are terminal and are the keys to the execution of a stream pipeline.

116
00:09:10.790 --> 00:09:16.640
So looking at the terminal operations by top, the search is all match transformer's collect reductionist

117
00:09:16.640 --> 00:09:24.320
count and the processes for each next search, any match transformer's to array reduction MEXT and the

118
00:09:24.320 --> 00:09:26.000
processes for each sorted.

119
00:09:26.540 --> 00:09:28.790
Then we've got find any where the reduction is.

120
00:09:28.790 --> 00:09:33.860
Men find first, but the reduction is reduced and we've got non-match.

121
00:09:36.150 --> 00:09:41.550
You can set up a strange source, you can apply zero to many intermediate operations, but nothing happens

122
00:09:41.610 --> 00:09:45.150
to one of the above operations is applied to the strain.

123
00:09:45.630 --> 00:09:51.840
Any operation that attempts to use the stream after a terminal operation will result in an illegal state

124
00:09:51.860 --> 00:09:52.410
exception.

125
00:09:52.920 --> 00:09:53.220
All right.

126
00:09:53.220 --> 00:09:54.310
So let's see in the video here.

127
00:09:54.390 --> 00:09:57.740
We'll start looking at terminal operations in code in the next video.
