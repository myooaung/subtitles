WEBVTT
1

00:00:05.360  -->  00:00:07.930
In this video, I’m going to
explore additional features

2

00:00:07.940  -->  00:00:09.589
for nested classes and enums.

3

00:00:10.250  -->  00:00:12.719
Both can get very
complex very quickly.

4

00:00:13.009  -->  00:00:15.230
So, we need a new class in
our Fundamentals project.

5

00:00:15.770  -->  00:00:17.440
So, we'll call this one OuterMost.

6

00:00:23.040  -->  00:00:24.440
I’ll paste the code in.

7

00:00:26.840  -->  00:00:31.000
All right, so in this code, I’ve
created an enclosing class named

8

00:00:31.099  -->  00:00:35.269
OuterMost, and you can see that's
got four inner classes one with

9

00:00:35.309  -->  00:00:36.980
each type of access modifier.

10

00:00:37.480  -->  00:00:42.250
So, the first inner class member there
is public inner, that demonstrates

11

00:00:42.250  -->  00:00:45.250
two different ways to access the
enclosing instances field,

12

00:00:46.340  -->  00:00:49.489
which it's got access to even though
it's declared private on line 9.

13

00:00:50.550  -->  00:00:54.680
And you can see line 19 and the
line 22 demonstrating that, and

14

00:00:55.000  -->  00:00:59.220
you can see the other inner class
members there, PackageInner with

15

00:00:59.220  -->  00:01:02.240
a constructor ProtectedInner and
private as I have said with, we've

16

00:01:02.240  -->  00:01:06.779
basically created it with the four
different access modifiers, right?

17

00:01:06.980  -->  00:01:10.860
So, moving on down, we've got
another class down here - class

18

00:01:12.929  -->  00:01:15.360
InnerClassExtras and that's just
instantiating a local variable of the

19

00:01:15.630  -->  00:01:20.239
outermost class, it's instantiating
local variables for each of the

20

00:01:20.240  -->  00:01:24.559
non-private innermost classes
using the outermost new.construct.

21

00:01:24.860  -->  00:01:28.530
You can see the examples of
that online 61, 64, and 67.

22

00:01:29.199  -->  00:01:32.950
Remember you can't access an inner
class without first having an object

23

00:01:32.990  -->  00:01:34.360
reference to the enclosing class.

24

00:01:34.360  -->  00:01:37.570
All right, so let's run
and check the output.

25

00:01:40.309  -->  00:01:43.420
And what I’ll do is, I’ll just comment
that error out from the last video.

26

00:01:44.839  -->  00:01:47.020
We might close down
some other windows here.

27

00:01:49.520  -->  00:01:51.630
All right, so let's run.

28

00:01:55.180  -->  00:01:56.839
And there's the output on screen.

29

00:01:57.630  -->  00:01:59.789
So far so good, but let's
take it a step further.

30

00:02:00.309  -->  00:02:03.040
What we're going to do is close down the
run window, and we are going back up to

31

00:02:03.040  -->  00:02:05.700
our public inner class.

32

00:02:06.709  -->  00:02:09.820
That's this one here, the public
inner class just before the

33

00:02:09.820  -->  00:02:12.960
closing right curly brace here,
I’m going to add this code.

34

00:02:15.480  -->  00:02:18.279
So, I’m nesting this class
inside the public inner class.

35

00:02:18.290  -->  00:02:19.150
Again, you can see that.

36

00:02:19.730  -->  00:02:22.619
You can see our public inner
class definition of line 12, and

37

00:02:22.959  -->  00:02:25.049
I’ve pasted the code in there,
so this inner class that I’ve

38

00:02:25.049  -->  00:02:27.220
pasted in is now two levels deep.

39

00:02:27.770  -->  00:02:30.320
So, what I’m trying to demonstrate
is accessing a field on the

40

00:02:30.330  -->  00:02:34.090
immediately enclosing class,
public inner.InnerString.

41

00:02:36.359  -->  00:02:39.709
And you can see that the
lines 39 and also lines 43.

42

00:02:40.350  -->  00:02:43.049
But as well, we're accessing a field
on the outermost enclosing class,

43

00:02:43.049  -->  00:02:48.510
the OuterMost.OuterString, that's now
from a class nested several layers in.

44

00:02:49.800  -->  00:02:52.060
We can see OuterString
there on lines 31 and 35.

45

00:02:53.770  -->  00:02:57.090
So, let's add some code in our
main method to actually test this.

46

00:02:57.390  -->  00:02:59.250
I am just going to add it to
the bottom of our main method.

47

00:03:00.580  -->  00:03:03.160
You can see that I’m creating a
local variable for the more nested

48

00:03:03.170  -->  00:03:06.070
inner class using the previous
local variable public inner

49

00:03:06.310  -->  00:03:07.829
that we've defined previously.

50

00:03:09.330  -->  00:03:11.130
You can see public
inner there on line 84.

51

00:03:12.130  -->  00:03:13.130
Run this,

52

00:03:15.120  -->  00:03:17.000
and we can see that's working, accessing

53

00:03:17.000  -->  00:03:18.230
class two levels deep.

54

00:03:19.320  -->  00:03:21.350
So, that's one way of doing it,
there's another alternative.

55

00:03:22.340  -->  00:03:23.100
Let's paste in some code for that.

56

00:03:25.720  -->  00:03:29.130
You can see that the alternative
is chaining instantiations outer to

57

00:03:29.160  -->  00:03:32.209
inner, and you can see the code on
screen there, and let's run that.

58

00:03:36.510  -->  00:03:38.430
We can see that also works as well.

59

00:03:40.340  -->  00:03:42.750
All right, so next what I
want to do is extend a class

60

00:03:42.780  -->  00:03:43.989
that has inner classes.

61

00:03:44.510  -->  00:03:47.190
To do that, we need to create a new
class, let's go ahead and do that.

62

00:03:48.240  -->  00:03:50.190
We'll call this one TestInheritance.

63

00:03:57.170  -->  00:03:58.630
All right, let's paste in the code.

64

00:03:59.770  -->  00:04:00.870
You can see what I’ve done there.

65

00:04:00.870  -->  00:04:04.050
We've got a class test inheritance,
which now extends the outermost

66

00:04:04.080  -->  00:04:07.719
class which has the usual main
method as you can see, it's calling

67

00:04:07.719  -->  00:04:11.520
a private non-static method test
inner class members, and as you

68

00:04:11.520  -->  00:04:14.859
can see that method that's been
called there is instantiating two

69

00:04:14.860  -->  00:04:16.769
of the outermost inner classes.

70

00:04:17.600  -->  00:04:20.799
So, you can see there that you're
able to instantiate the inner

71

00:04:20.800  -->  00:04:25.300
classes without the use of an object
reference from the non-static method.

72

00:04:26.130  -->  00:04:28.039
The reason that works is that
the members of the outermost

73

00:04:28.539  -->  00:04:31.820
class are accessible to the
current instance of the enclosing

74

00:04:31.850  -->  00:04:33.390
class through inheritance.

75

00:04:34.540  -->  00:04:35.640
Let's run that.

76

00:04:39.520  -->  00:04:40.680
And we can see that that works.

77

00:04:41.040  -->  00:04:43.939
Now, that's an alternative
to that what we can do.

78

00:04:44.710  -->  00:04:49.919
I could have replaced this code here,
I’ll just paste it below, so that's

79

00:04:49.920  -->  00:04:53.429
an alternative and I think it makes
it clearer because it's using this

80

00:04:53.600  -->  00:04:57.060
to make it clear that the enclosing
class allows access to the inner

81

00:04:57.060  -->  00:04:58.520
classes on the current instance.

82

00:04:59.490  -->  00:04:59.990
Run that.

83

00:05:03.610  -->  00:05:06.989
You can see we've just got
the code output duplicated,

84

00:05:07.360  -->  00:05:08.250
which we would expect.

85

00:05:09.750  -->  00:05:12.280
Now, what happens if I try
to instantiate these from the

86

00:05:12.290  -->  00:05:15.469
static method main because
obviously, this is currently in

87

00:05:15.469  -->  00:05:16.710
the test inner class members.

88

00:05:17.290  -->  00:05:20.090
So, let's actually replace the
code that's in our main method.

89

00:05:21.710  -->  00:05:23.710
You might have guessed
that this doesn't compile.

90

00:05:24.029  -->  00:05:27.380
A static method has no this and
I stated that these calls are

91

00:05:27.380  -->  00:05:29.100
shorthand for the this.newConstruct.

92

00:05:31.050  -->  00:05:33.570
Let's undo that so the code
compiles and executes again.

93

00:05:37.610  -->  00:05:38.950
And everything's back
to working again.

94

00:05:40.550  -->  00:05:42.834
All right, next what we want
to do is add the code

95

00:05:42.834  -->  00:05:46.430
I’m about to paste in to the method test
inner class members again.

96

00:05:47.330  -->  00:05:50.599
I want to demonstrate that access
to the second level class still

97

00:05:50.599  -->  00:05:53.909
requires you to instantiate
its enclosing class first.

98

00:05:54.719  -->  00:05:56.469
So paste this code in,
you'll see what I mean.

99

00:05:57.549  -->  00:06:00.040
You can see that the second
statement is a compiler error

100

00:06:01.170  -->  00:06:02.420
- expected class or package.

101

00:06:03.580  -->  00:06:06.380
Let's remove the second
package, the second line rather.

102

00:06:07.580  -->  00:06:10.980
Code compiles and we can run it.

103

00:06:14.659  -->  00:06:17.450
All right, now ask yourself
this question, can you

104

00:06:17.450  -->  00:06:18.980
extend inner classes?

105

00:06:19.530  -->  00:06:20.690
And if so, how do you do it?

106

00:06:21.550  -->  00:06:25.850
So, let's change our definition,
our declaration rather on line 8

107

00:06:25.850  -->  00:06:27.940
for our test inheritance class.

108

00:06:27.940  -->  00:06:32.219
We'll change this and paste in the new
version, extending a different class.

109

00:06:34.100  -->  00:06:36.610
Here, what I’m doing is attempting
to subclass the inner class

110

00:06:36.610  -->  00:06:38.619
member of the outermost class.

111

00:06:38.710  -->  00:06:40.030
Again, looking at the code,

112

00:06:42.230  -->  00:06:45.830
outermost public inner is our inner class.

113

00:06:47.270  -->  00:06:50.140
Now, the compiler is throwing an
error indicating you can't do this.

114

00:06:51.950  -->  00:06:54.800
No enclosing instance of
type ‘OuterMost is in scope.

115

00:06:55.270  -->  00:06:58.099
So, the issue is that an
instance of outermost needs to

116

00:06:58.100  -->  00:07:01.100
exist to access public inner,
so I’m going to undo that and

117

00:07:02.200  -->  00:07:03.390
it gets rid of all the errors.

118

00:07:04.770  -->  00:07:07.966
Well, so let's add another class
to the code segment and what we're

119

00:07:07.966  -->  00:07:11.740
going to do is make this a nested
class of the test inheritance class.

120

00:07:12.530  -->  00:07:16.549
I’m going to add it right down
the bottom after the test in

121

00:07:16.550  -->  00:07:18.440
a class method, and I’ll just
clean it up while I’m here.

122

00:07:18.450  -->  00:07:22.070
All right, so that's the
class that I’ve added there.

123

00:07:23.200  -->  00:07:25.450
So the inner class I’m adding
extends the inner class that was

124

00:07:25.450  -->  00:07:30.069
inherited from the outermost class,
so obviously public inner is an

125

00:07:30.080  -->  00:07:32.360
inner class from the outermost class.

126

00:07:33.360  -->  00:07:34.360
No errors.

127

00:07:35.160  -->  00:07:38.929
Let's add some code to test
this in our test in a class

128

00:07:38.929  -->  00:07:40.840
members class, a method rather.

129

00:07:43.639  -->  00:07:44.300
No errors.

130

00:07:46.559  -->  00:07:50.599
So, looking at the output, I’ve
proved that you can extend any

131

00:07:50.600  -->  00:07:53.960
inner class that your class
inherits from its parent, whether

132

00:07:53.990  -->  00:07:55.469
if it's public or protected.

133

00:07:56.010  -->  00:08:00.040
Now as an alternative to that if I
close down the output pane, I could

134

00:08:00.040  -->  00:08:05.290
have changed the class declaration
on line 33, instead of extending

135

00:08:05.449  -->  00:08:10.130
public inner, I could have just
changed that to outermost.PublicInner.

136

00:08:10.730  -->  00:08:14.105
That's valid as well and that might
help those maintaining the code

137

00:08:14.230  -->  00:08:17.969
in the future to understand the
location of the public inner class.

138

00:08:17.969  -->  00:08:20.370
All right, so let's replace
this new extended inner

139

00:08:20.370  -->  00:08:21.430
class that I’ve got here.

140

00:08:24.510  -->  00:08:26.630
So, you can see what I’ve done
there, I’ve got the inner class

141

00:08:26.630  -->  00:08:29.870
on line 33, extending the inner
class that was inherited from the

142

00:08:29.990  -->  00:08:32.960
outermost class, nothing different
there, but I’ve also got an inner

143

00:08:32.960  -->  00:08:36.429
class extending further that extends
OuterMost.PublicInner.NestedInnerSecondLevel.

144

00:08:38.509  -->  00:08:42.929
That's that second inner level class
that we created in OuterMost.java.

145

00:08:43.640  -->  00:08:44.980
All right, so let's run this.

146

00:08:48.630  -->  00:08:51.150
And everything still works, we get
the output on the last line there.

147

00:08:52.950  -->  00:08:55.679
All right, so this has been a
long video and in the code in this

148

00:08:55.690  -->  00:08:59.350
video, I’ve talked about the inner
class member in detail showing you

149

00:08:59.500  -->  00:09:03.120
alternate methods to access inner
classes from enclosing code, and

150

00:09:03.120  -->  00:09:07.189
external code, as well as extending
classes that contain inner classes.

151

00:09:07.570  -->  00:09:10.660
And in addition, I gave you
some alternate methods to access

152

00:09:10.660  -->  00:09:12.530
the enclosing instances fields.

153

00:09:13.679  -->  00:09:15.000
So, let's end the video here.

154

00:09:15.230  -->  00:09:17.790
And in the next one, let's
start talking about the

155

00:09:17.820  -->  00:09:19.710
term effectively final.

156

00:09:20.260  -->  00:09:21.550
See you in the next video.
