WEBVTT
1
00:00:05.350 --> 00:00:10.780
In this video and the next two, I want to revisit a couple of topics that look innocent on an exam

2
00:00:10.780 --> 00:00:13.180
question but are loaded with implications.

3
00:00:13.870 --> 00:00:15.730
Let's start by looking at trace it for a moment.

4
00:00:16.420 --> 00:00:19.900
You will hopefully remember that this set is ordered using natural ordering.

5
00:00:20.200 --> 00:00:24.220
Its elements are required to implement comparable if the method is used.

6
00:00:24.460 --> 00:00:28.930
But you can reconfigure this by passing a comparator to the constructor or trace it.

7
00:00:29.830 --> 00:00:32.790
This can be deceptive if you say it on an exam question.

8
00:00:33.130 --> 00:00:38.260
So now that together we've reviewed Co-operator incomparable side by side, let's walk through a couple

9
00:00:38.260 --> 00:00:39.300
of examples in code.

10
00:00:40.140 --> 00:00:42.460
But in the collections project, we need to create a new class.

11
00:00:42.640 --> 00:00:44.740
But of course, one tree examples.

12
00:00:50.420 --> 00:00:51.230
Postcode in.

13
00:00:55.390 --> 00:01:02.020
But this code consists of a tree element class, which consists of an ID and value, which is the item

14
00:01:02.020 --> 00:01:02.800
that I want to sort.

15
00:01:03.370 --> 00:01:09.460
I implement both comparable and to here with a comparable implementation is by natural order ascending

16
00:01:09.460 --> 00:01:10.630
numerically by ID.

17
00:01:10.840 --> 00:01:13.840
And the comparator order is by value to sending.

18
00:01:14.550 --> 00:01:20.890
We could see that using the to method there for comparable that compare to natural order and the copyrighter

19
00:01:21.160 --> 00:01:23.590
compare method the orders by valley descending.

20
00:01:23.590 --> 00:01:27.310
Assuming for now the valley is not now and you can see the code on line thirty two.

21
00:01:27.820 --> 00:01:31.270
So the three examples classes misquoted further and the main method.

22
00:01:32.300 --> 00:01:38.720
Sets up some testator, a list of some tree element instances and prints out the set noted the tree

23
00:01:38.730 --> 00:01:41.990
was instantiated by passing the test data to the constructor.

24
00:01:42.350 --> 00:01:46.670
I also print the element considered lower than the element containing the same there.

25
00:01:47.210 --> 00:01:51.770
In its first instance, the element with a lot less than Samms ID will be printed.

26
00:01:52.250 --> 00:01:53.380
So let's actually run the code.

27
00:01:55.800 --> 00:02:01.290
And as you can see from the output, it confirms that in both instances, elements were ordered numerically

28
00:02:01.500 --> 00:02:07.590
and in ascending order, the element lower than Sam in the sword as Mary is it directly less than Sam's

29
00:02:08.300 --> 00:02:08.440
wrath.

30
00:02:08.630 --> 00:02:14.100
So next, instead of passing the test data to the constructor, what I want to do is use comparative

31
00:02:14.250 --> 00:02:18.030
comparing to pass a comparative based on a method in every element.

32
00:02:18.780 --> 00:02:23.340
And that that, I repeat, the operator comparing method in a comparative comparable video in this section

33
00:02:23.340 --> 00:02:26.040
of the course need to make a change specific.

34
00:02:26.060 --> 00:02:27.030
I'm going to make a change.

35
00:02:29.690 --> 00:02:32.480
To line sixty two, it's going to replace that.

36
00:02:33.940 --> 00:02:34.630
With this code.

37
00:02:36.090 --> 00:02:41.220
Nothing done exactly what I've mentioned, I've passed a comparator to comparing mythical to our three

38
00:02:41.220 --> 00:02:43.320
sets constructor if we run this.

39
00:02:45.550 --> 00:02:48.650
This had no effect on the output, what it was like previously.

40
00:02:49.390 --> 00:02:54.110
Here what I'm doing is passing a comparator on the constructor and not a list of data.

41
00:02:54.530 --> 00:02:55.490
I'm adding the data.

42
00:02:56.800 --> 00:02:59.560
Is it the add all method following the constructor of the trace it.

43
00:02:59.770 --> 00:03:03.540
All right, so let's try reversing the order now, going to alter the constructor.

44
00:03:04.000 --> 00:03:08.700
Are we going to do is come up here to our contract to call after the garage, drop parentheses and do

45
00:03:08.710 --> 00:03:11.200
a call to reverse idot the first.

46
00:03:11.890 --> 00:03:16.890
So basically I'm changing the reverse method to the operator bitrate using the comparing method.

47
00:03:17.290 --> 00:03:18.190
And if you run this now.

48
00:03:20.060 --> 00:03:25.580
He can see the orders descending ID and that the element considered lower than the same element has

49
00:03:25.580 --> 00:03:26.960
changed to be Carol's element.

50
00:03:27.890 --> 00:03:32.630
So let's have a look at altering the constructor again to change trace element.

51
00:03:33.730 --> 00:03:36.100
Instead of it, we're going to get value.

52
00:03:39.850 --> 00:03:43.900
And they could say, look, we've got a different result here because we're using get value instead

53
00:03:43.900 --> 00:03:50.290
of Jered using the constructor with Co-operator, comparing makes it obvious that I'm using a different

54
00:03:50.290 --> 00:03:52.720
sorting mechanism than the natural order, for example.

55
00:03:53.190 --> 00:03:57.790
But consider what happens if it is something like the following, a change that line completely.

56
00:03:58.410 --> 00:04:00.100
Sixty two to sixty four make this.

57
00:04:01.480 --> 00:04:06.520
This might look like I'm instantiating the tree set with a single element, but this is not the case

58
00:04:07.000 --> 00:04:09.880
because tree element implements co-operator passing.

59
00:04:09.890 --> 00:04:16.090
The first element of the test data list is simply passing a comparator to the trace it and not populating

60
00:04:16.090 --> 00:04:21.400
the trace it with any elements of this, bearing in mind we've still got to trace it at all on line

61
00:04:21.400 --> 00:04:22.060
63.

62
00:04:23.610 --> 00:04:29.190
The airport confirms that the order used was determined by the tree element to compare method, which

63
00:04:29.190 --> 00:04:33.360
happens to be the same as what we had previously using DOT reversed.

64
00:04:34.360 --> 00:04:37.400
And just to confirm what's going on there, if I remove the ad all along.

65
00:04:37.430 --> 00:04:38.710
Sixty three or commented out.

66
00:04:40.890 --> 00:04:41.880
Run the code again now.

67
00:04:45.480 --> 00:04:48.950
And you can see the output now, any shows, no, and there's no other test data.

68
00:04:49.420 --> 00:04:50.730
Well, it's not do that change.

69
00:04:53.590 --> 00:04:55.750
So back to Kyra, that does actually show the elements.

70
00:05:00.020 --> 00:05:05.780
So the tracer constructors are shown in this table, so we've got the first construct, the no trace

71
00:05:05.780 --> 00:05:10.880
at constructor constructs a new empty tree set sorted according to the natural order of its elements.

72
00:05:11.540 --> 00:05:13.370
The next contract was part of the collection.

73
00:05:13.760 --> 00:05:18.470
So this constructs a new tracer containing the elements in the specified collection, sorted according

74
00:05:18.470 --> 00:05:20.460
to the natural ordering of its elements.

75
00:05:21.170 --> 00:05:23.640
The next one is trace it with a comparator pass to it.

76
00:05:24.140 --> 00:05:25.640
This constructs a new empty trace.

77
00:05:25.640 --> 00:05:28.030
It sorted according to the specified comparator.

78
00:05:28.630 --> 00:05:34.340
The last one passing a sort of set to the constructor, constructs a new trace containing the same elements

79
00:05:34.340 --> 00:05:37.550
and using the same ordering as the specified sorted set.

80
00:05:40.290 --> 00:05:46.320
The lesson here is to review any sample code around constructors very carefully, collections do not

81
00:05:46.320 --> 00:05:52.170
accept single data elements in the constructor, but single elements can be passed using static methods

82
00:05:52.170 --> 00:05:55.050
such as list travel arrays, not as list, for example.

83
00:05:55.590 --> 00:05:58.590
Also, make sure there is a constructor, for example.

84
00:05:58.590 --> 00:06:02.070
Consider the code below the following two sets are quite different.

85
00:06:02.400 --> 00:06:03.560
The first is immutable.

86
00:06:03.780 --> 00:06:04.770
The second is not.

87
00:06:05.070 --> 00:06:08.040
So adding an element to first set throws an exception.

88
00:06:10.490 --> 00:06:16.210
If you read this code, this is the exception you see on screen in the video here in the next one,

89
00:06:16.460 --> 00:06:18.760
I want to revisit wrappers and generics.

90
00:06:19.160 --> 00:06:20.200
See you in the next video.
