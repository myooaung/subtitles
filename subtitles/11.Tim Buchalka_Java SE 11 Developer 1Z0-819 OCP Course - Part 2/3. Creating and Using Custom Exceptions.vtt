WEBVTT
1

00:00:05.250  -->  00:00:09.760
This video and the next one is about
creating and using custom exceptions.

2

00:00:10.500  -->  00:00:13.570
Java comes packaged with a lot
of exceptions, so when would you

3

00:00:13.580  -->  00:00:15.260
want or need to write your own?

4

00:00:16.700  -->  00:00:19.569
Remember that you can instantiate
a new instance of one of the

5

00:00:19.570  -->  00:00:23.180
supplied exceptions and customize
it using one of the constructors

6

00:00:23.180  -->  00:00:25.220
listed in the following
table, you can see on screen.

7

00:00:25.880  -->  00:00:29.510
So, these constructors are available
to all exception classes i.e

8

00:00:29.510  -->  00:00:32.319
Throwable, Error, Exception, etc.

9

00:00:33.019  -->  00:00:37.100
Alright, so looking at this table, the
first constructor has no parameters

10

00:00:37.570  -->  00:00:40.710
that constructs a new throwable
with null as its detail message.

11

00:00:41.340  -->  00:00:43.840
Next, we've got a parameter
there, of a string, and that

12

00:00:43.840  -->  00:00:46.980
constructs a new throwable with
the specified detail message.

13

00:00:46.980  -->  00:00:50.360
The next one has two parameters,
string and a throwable,

14

00:00:50.630  -->  00:00:52.509
and that constructs a new
throwable with a specified

15

00:00:52.529  -->  00:00:53.970
detail message and the cause.

16

00:00:54.590  -->  00:00:57.680
The next one, we've got four
parameters there, and basically,

17

00:00:57.680  -->  00:01:00.699
we've got the message, the cause,
where the suppression is enabled or

18

00:01:00.700  -->  00:01:04.260
disabled, and whether writeable
stack trace is enabled or disabled.

19

00:01:04.599  -->  00:01:08.169
And we can also just pass one
parameter of type throwable and

20

00:01:08.170  -->  00:01:11.182
that constructs a new throwable
with the specified cause and a

21

00:01:11.182  -->  00:01:15.180
detailed message, which depends
on whether cause is null or not.

22

00:01:15.530  -->  00:01:18.350
So, if it is null then obviously,
the detail message will be null,

23

00:01:18.350  -->  00:01:20.759
otherwise, it will be whenever
is in the toString from the

24

00:01:20.760  -->  00:01:22.460
throwable parameter that's passed.

25

00:01:22.789  -->  00:01:25.580
And that's typically containing the
class and detailed message, of course.

26

00:01:27.390  -->  00:01:30.899
Alright, so there are pros and
cons to creating Custom Exceptions.

27

00:01:32.040  -->  00:01:35.039
Let's look at some reasons
to use custom exceptions.

28

00:01:35.510  -->  00:01:38.330
Firstly, you can be more specific
with them allowing calling

29

00:01:38.330  -->  00:01:41.209
code to use the exception type
to determine the response.

30

00:01:41.750  -->  00:01:44.910
A second reason is if you want
to differentiate your exceptions

31

00:01:44.929  -->  00:01:47.769
from either library exceptions
or Java platform exceptions.

32

00:01:48.139  -->  00:01:51.380
Third reason to use custom exceptions
is, if you find your code segment

33

00:01:51.620  -->  00:01:54.649
throwing multiple exceptions, and
differentiating them with custom

34

00:01:54.650  -->  00:01:59.009
exceptions can help remove the
burden of exact identification of

35

00:01:59.010  -->  00:02:00.350
the problem from the calling code.

36

00:02:00.930  -->  00:02:04.949
And the last reason to use a custom
exception would be, if you want

37

00:02:04.949  -->  00:02:08.060
to extend the exception classes
for your application, adding

38

00:02:08.060  -->  00:02:11.880
additional state, or behavior to
the exception handling process.

39

00:02:13.250  -->  00:02:17.179
And reasons not to use custom
exceptions, firstly, programmers

40

00:02:17.179  -->  00:02:19.419
are already familiar with library
exceptions and know what are

41

00:02:19.420  -->  00:02:21.050
checked and unchecked for example.

42

00:02:21.469  -->  00:02:25.160
The second reason to not use custom
exceptions, if you're extending them

43

00:02:25.240  -->  00:02:28.390
with additional state of behavior,
do you really need a custom one?

44

00:02:28.400  -->  00:02:29.620
That's a question to ask yourself.

45

00:02:29.880  -->  00:02:34.230
The java platform does provide
many specific types of exceptions.

46

00:02:36.870  -->  00:02:40.760
Earlier in this section, I reviewed a
slide like this one with the structure

47

00:02:40.770  -->  00:02:42.669
of the Error and Exception Hierarchy.

48

00:02:43.509  -->  00:02:45.560
I'm showing it again here
because it's relevant when you're

49

00:02:45.560  -->  00:02:48.060
creating custom exception classes.

50

00:02:49.000  -->  00:02:51.810
So, any of the classes showing
here can be used to extend your

51

00:02:51.810  -->  00:02:53.280
own custom exception class.

52

00:02:53.700  -->  00:02:56.290
Anything descending from
throwable is called an exception.

53

00:02:56.900  -->  00:02:59.500
Although exceptions fall into
two buckets, the Error or

54

00:02:59.500  -->  00:03:00.900
the formal class exception.

55

00:03:01.400  -->  00:03:05.450
We also know that a RuntimeException
and an Error are unchecked exceptions,

56

00:03:05.760  -->  00:03:09.570
meaning the compiler doesn't enforce
the catch or specify requirement.

57

00:03:10.190  -->  00:03:15.519
I'll refer to Section 11 of my 1Z0-819,
Part 1 course, here on udemy if

58

00:03:15.520  -->  00:03:16.570
you need a refresher on that.

59

00:03:17.760  -->  00:03:21.270
I'm including a small portion of
another slide from that course, the

60

00:03:21.270  -->  00:03:25.620
1Z0-819, Part 1 course, specifically,
Section 11, which is relevant

61

00:03:25.650  -->  00:03:27.320
to our discussion in this video.

62

00:03:28.530  -->  00:03:31.610
So, this following table explains
what types of errors are checked

63

00:03:31.900  -->  00:03:33.339
and unchecked exceptions.

64

00:03:34.669  -->  00:03:38.450
So, looking at the class type,
throwable or any custom exception

65

00:03:38.450  -->  00:03:42.730
which extends throwable is a checked
exception, and it must satisfy

66

00:03:42.740  -->  00:03:44.309
The Catch or Specify Requirement.

67

00:03:44.990  -->  00:03:49.050
Next error or any custom exception
which extends error is an unchecked

68

00:03:49.050  -->  00:03:52.680
exception and doesn't need to satisfy
The Catch or Specify Requirement.

69

00:03:53.490  -->  00:03:57.270
Thirdly, RuntimeException - Any
exception subclassed directly or

70

00:03:57.270  -->  00:03:59.989
indirectly from RuntimeException
and these are also called

71

00:04:00.020  -->  00:04:03.449
unsurprisingly runtime exceptions
well they are an unchecked exception,

72

00:04:03.730  -->  00:04:06.769
and no, they don't need to satisfy
The Catch or Specify Requirement.

73

00:04:07.830  -->  00:04:10.609
And fourth exception - Any
exception not subclassed from

74

00:04:11.410  -->  00:04:13.980
RuntimeException or its subclasses,
or that is a checked exception,

75

00:04:14.240  -->  00:04:17.039
and yes, it must satisfy The
Catch or Specify Requirement.

76

00:04:18.529  -->  00:04:21.950
A checked exception is a special
designation for a group of exceptions

77

00:04:22.240  -->  00:04:26.460
that the compiler enforces compliance
of ‘The catch or Specify’ requirement.

78

00:04:26.880  -->  00:04:30.070
Now, there's some common RuntimeExceptions
are ArithmeticException

79

00:04:30.070  -->  00:04:34.780
ArrayIndexOutOfBoundsException,
ClassCastException, IndexOutOfBoundException,

80

00:04:34.780  -->  00:04:36.570
and NullPointerException.

81

00:04:36.570  -->  00:04:40.070
These are unchecked and the compiler
does not enforce the compliance of

82

00:04:40.080  -->  00:04:41.800
The Catch or Specify requirement.

83

00:04:42.160  -->  00:04:45.149
Remember that any exception
left unhandled will terminate

84

00:04:45.469  -->  00:04:46.740
execution of your program.

85

00:04:48.680  -->  00:04:51.290
So, why do we care about checked
and unchecked exceptions when

86

00:04:51.290  -->  00:04:52.860
creating custom exceptions?

87

00:04:53.580  -->  00:04:56.250
Well, the reason is you first, need
to determine if your custom exception

88

00:04:56.250  -->  00:04:57.680
should be checked or unchecked.

89

00:04:58.090  -->  00:05:01.029
Do you need the exception to be
part of a method's public signature?

90

00:05:01.400  -->  00:05:04.309
If your answer is yes, and you
expect the client to be aware that

91

00:05:04.309  -->  00:05:07.289
this exception could occur, and
you expect the client to handle

92

00:05:07.290  -->  00:05:10.310
it, then you design a checked
exception in that scenario.

93

00:05:11.390  -->  00:05:14.149
Is the exception catastrophic
and the client cannot be

94

00:05:14.150  -->  00:05:15.110
expected to handle it?

95

00:05:15.480  -->  00:05:18.309
Well, this would qualify as an
error and would not be checked.

96

00:05:19.299  -->  00:05:21.770
Is the exception something that
should not occur and would be

97

00:05:21.770  -->  00:05:23.189
rare, because of coding mistakes?

98

00:05:23.520  -->  00:05:25.800
Then that would be an
unchecked RuntimeException.

99

00:05:26.590  -->  00:05:28.050
Alright, so let's
finish the video here.

100

00:05:28.260  -->  00:05:31.770
And in the next one, let's swing
back to intellij and start creating

101

00:05:31.770  -->  00:05:33.350
some custom checked exceptions.

102

00:05:33.719  -->  00:05:34.920
See you in the next video!
