WEBVTT
1
00:00:05.230 --> 00:00:10.300
Let's look at the concat methadone stream, which is neither an intermediate operation or a terminal

2
00:00:10.300 --> 00:00:13.630
operation, but its definition from the APA is as follows.

3
00:00:14.230 --> 00:00:20.380
The concat method creates a Lezley concatenated stream whose elements are all the elements of the first

4
00:00:20.380 --> 00:00:23.710
stream, followed by all the elements of the second stream.

5
00:00:24.310 --> 00:00:29.600
The resulting stream is ordered if both of the input streams are ordered and parallel.

6
00:00:29.620 --> 00:00:31.840
If either of the input streams are parallel.

7
00:00:33.870 --> 00:00:38.910
When the resulting stream is closed, the closed hand as for both input streams are invoked.

8
00:00:39.420 --> 00:00:43.200
That sounds straightforward enough, but I want to explore what this means in some sample code.

9
00:00:43.210 --> 00:00:44.970
So let's swing back to our idea.

10
00:00:45.390 --> 00:00:49.320
We need a new class in our streams project as Cosman concat example's.

11
00:00:58.900 --> 00:01:04.960
OK, so there's a code, so in this code and our main method, I'm creating two, three sets of top

12
00:01:04.960 --> 00:01:07.600
string variables with a set of three strings.

13
00:01:08.830 --> 00:01:14.170
That's our test data, so hopefully you remember that tree said as an ordered set and then they're printing

14
00:01:14.170 --> 00:01:19.880
each set using a foreach with a method reference system throughout colon, colon, print one, moving

15
00:01:19.950 --> 00:01:25.750
further and creating some streams, actually creating a stream for each set, using a set stream method

16
00:01:25.960 --> 00:01:30.680
and again, printing each element, using the streams for each method with a method reference system

17
00:01:30.680 --> 00:01:32.000
that out colon, colon print.

18
00:01:32.560 --> 00:01:33.220
Let's run this.

19
00:01:36.230 --> 00:01:40.520
The CDC output, no surprises so far, we're just setting the stage here.

20
00:01:40.750 --> 00:01:44.920
So next, let's open some statements to the main method of concat examples.

21
00:01:44.920 --> 00:01:45.430
Tannebaum.

22
00:01:47.370 --> 00:01:53.430
So here I am using the concat method to merge stream one and stream two into a new stream called Merged,

23
00:01:54.060 --> 00:01:57.480
if you're getting that this course as an exception, let's run up to see.

24
00:02:00.220 --> 00:02:01.600
You're actually right, it does.

25
00:02:03.620 --> 00:02:08.880
A legal state exception, we've got a similar message to we saw in the last video stream has already

26
00:02:08.880 --> 00:02:10.800
been operated upon or closed.

27
00:02:11.890 --> 00:02:18.670
And the Arizona law in 41, you remember that using force is a terminal operation on stream South Stream

28
00:02:18.670 --> 00:02:23.800
one and stream to a close at this point and you cannot merge closed streams.

29
00:02:24.760 --> 00:02:26.950
Let's go back up to our stream on a stream, too.

30
00:02:27.220 --> 00:02:32.350
And I'm going to do is just comment out there for each or both will actually come in at the both lines

31
00:02:32.350 --> 00:02:41.710
of output there, do the same for stream to server, remove the output print line and also the foreach

32
00:02:41.710 --> 00:02:42.520
invocations.

33
00:02:42.550 --> 00:02:43.270
Run this again.

34
00:02:45.120 --> 00:02:47.670
This time we get the results, and that's because.

35
00:02:48.500 --> 00:02:50.810
Because we know now working with streams that haven't been closed.

36
00:02:51.020 --> 00:02:56.420
We're also looking at that the merge list is not a fully sorted list, but the elements of each stream

37
00:02:56.420 --> 00:02:57.500
keep the order there in.

38
00:02:58.130 --> 00:03:02.480
So that's there at an intermediate operation on the first stream, sorting in reverse.

39
00:03:03.170 --> 00:03:04.370
I'll go back up the stream one.

40
00:03:04.850 --> 00:03:10.090
What's the code stream one is equal to stream one dot sorted.

41
00:03:10.580 --> 00:03:12.710
But in our parentheses we'll put a comparator.

42
00:03:13.070 --> 00:03:14.000
A comparator.

43
00:03:16.360 --> 00:03:17.650
Reverse order Methodist.

44
00:03:20.380 --> 00:03:25.840
Looking at the first three elements there, Carol, Larry and Ralph, we run this, we should see there

45
00:03:25.960 --> 00:03:26.890
are actually reversed.

46
00:03:28.710 --> 00:03:34.350
We got Ralph, Larry and Carol, so the midstream excuse, the intermediate operations of each individual

47
00:03:34.350 --> 00:03:36.480
stream on only those elements.

48
00:03:37.660 --> 00:03:40.530
Right, so let's try another example here, this time of trial on stream to.

49
00:03:41.570 --> 00:03:47.150
Let's add a filter stream to Eagles stream to that filter.

50
00:03:48.130 --> 00:03:55.810
That's that alarmed expression, this is a token stock chart and in parentheses we put a stop length

51
00:03:56.050 --> 00:04:04.540
parentheses minus one put are not equal to Y in single quotes and close off the line.

52
00:04:05.530 --> 00:04:06.310
So here's what I'm doing.

53
00:04:06.310 --> 00:04:12.100
Is adding the intermediate operation filter filtering out any elements with the last name of Y?

54
00:04:12.670 --> 00:04:13.450
Just run the card.

55
00:04:15.210 --> 00:04:20.940
We can see the output there, so not that Larry was not filtered out, but Mary was Larry was on stream

56
00:04:20.940 --> 00:04:25.890
one prior to the merge and therefore the filter, in fact, on stream two was not applied to the entire

57
00:04:25.890 --> 00:04:30.690
merged stream, but only those elements on stream to make another change in.

58
00:04:32.220 --> 00:04:35.660
No comment at these definitions for stream one, a stream to.

59
00:04:36.990 --> 00:04:38.140
I'll paste them some more code.

60
00:04:44.660 --> 00:04:49.720
I'm changing the intermediate operations to peak in output, a bit of text different for each string

61
00:04:50.080 --> 00:04:51.040
print of the code now.

62
00:04:53.130 --> 00:04:57.690
So now that we've done that, executing the code made it very clear that each tree maintains its intermediate

63
00:04:57.690 --> 00:05:04.260
operations and those can execute it from the merge stream, but only for the original streams elements.

64
00:05:04.800 --> 00:05:06.030
So let's explore this a bit more.

65
00:05:06.330 --> 00:05:09.210
Let's go back up to the original definitions for a tree.

66
00:05:09.210 --> 00:05:13.530
One, they're going to add Mark to this entry or another entry.

67
00:05:13.900 --> 00:05:16.200
You can say that Mark is now an element in both sets.

68
00:05:16.380 --> 00:05:20.680
And let's say that by doing that, I do not want duplicate elements in my merge lists.

69
00:05:20.680 --> 00:05:25.070
So what I'm going to do is add a distinct intermediate operation on the merge stream.

70
00:05:25.080 --> 00:05:28.680
But first, we'll just run this to make sure we can see Mark in both streams.

71
00:05:30.370 --> 00:05:31.870
You see, Mark is showing up in both.

72
00:05:33.590 --> 00:05:38.340
But let's set this up now so that tarmac only appears once in our midst.

73
00:05:39.050 --> 00:05:43.280
I'm going to change this for each year, committed out our place at.

74
00:05:44.270 --> 00:05:48.380
With the courage you can see they're using distinctly run this.

75
00:05:52.620 --> 00:05:57.300
So now that I've done that, first you can say that Mark is no longer duplicated, but what does Mary

76
00:05:57.300 --> 00:05:57.480
have?

77
00:05:57.480 --> 00:06:00.140
Dash Dash two printed twice before her name.

78
00:06:01.240 --> 00:06:06.520
Well, the reason is, even though Mark was removed from the end result of the stream pipeline, the

79
00:06:06.520 --> 00:06:11.890
operation on the first train still executed on the mark element, this case printing dash, dash to

80
00:06:11.890 --> 00:06:12.460
dash, dash.

81
00:06:12.790 --> 00:06:17.950
But Mark did not print out the second time demerged merged this print because the distinct operation

82
00:06:17.950 --> 00:06:20.750
removed the second instance of Mark Foley.

83
00:06:20.770 --> 00:06:22.510
Now what happens?

84
00:06:24.050 --> 00:06:29.600
If we execute this statement that a posting so I want to use my first dream with all of its intermediate

85
00:06:29.600 --> 00:06:32.750
operations and they'll merge it into a different one, this compiler.

86
00:06:32.770 --> 00:06:33.920
So what's going to happen when I run it?

87
00:06:34.490 --> 00:06:35.090
Well, let's run it.

88
00:06:38.710 --> 00:06:43.530
You could say that we've got an illegal exception stream has already been operated upon or closed.

89
00:06:44.770 --> 00:06:50.290
Now, the problem there with the merge stream code merged was closed, the other streams, stream one

90
00:06:50.290 --> 00:06:52.570
and stream two were also closed.

91
00:06:52.960 --> 00:06:55.930
So let's try something else that's let's come out both of those lines.

92
00:06:57.700 --> 00:06:58.600
Try this instead.

93
00:07:00.080 --> 00:07:05.360
Here, what I'm trying to do is defer the terminal operation until after I create the second merged

94
00:07:05.360 --> 00:07:05.790
stream.

95
00:07:06.350 --> 00:07:07.600
So what's going to happen when we run it?

96
00:07:12.180 --> 00:07:18.480
Sameera illegal style exception, so similar to executing an intermediate operation without assigning

97
00:07:18.480 --> 00:07:23.310
it back to another stream reference, passing a stream to the concat method makes to stream no longer

98
00:07:23.310 --> 00:07:23.880
available.

99
00:07:24.510 --> 00:07:29.100
So let's replace that law on sixty one coming to that place it.

100
00:07:34.710 --> 00:07:39.570
Sameera has already being operated upon closed legal state exception.

101
00:07:40.270 --> 00:07:41.880
Finally, let's replace that statement.

102
00:07:43.160 --> 00:07:43.730
But this month.

103
00:07:45.630 --> 00:07:47.260
Him changing the source of stream one.

104
00:07:47.760 --> 00:07:48.630
What happens when we run it?

105
00:07:48.660 --> 00:07:49.200
Let's do that.

106
00:07:51.860 --> 00:07:53.640
This time, you could say that we were running for a bit.

107
00:07:54.200 --> 00:07:58.100
We've got a concurrent modification exception, a line sixty 67.

108
00:08:00.790 --> 00:08:07.300
Javas IPO for the concat method it this way, that Concat method operates on the two input streams and

109
00:08:07.300 --> 00:08:09.670
binds each stream to its source.

110
00:08:10.060 --> 00:08:16.210
As a result, subsequent modifications to an input stream source may not be reflected in the coordinator

111
00:08:16.210 --> 00:08:17.080
stream result.

112
00:08:18.230 --> 00:08:19.880
All right, so that's the reason for those errors.

113
00:08:21.480 --> 00:08:26.400
In the video here in the next lecture, you'll be presented with a couple of quick questions after which

114
00:08:26.400 --> 00:08:32.460
will move to the next section, we're going to be diving deeper into the operations on streams, specifically

115
00:08:32.460 --> 00:08:33.630
with lambda expressions.

116
00:08:33.780 --> 00:08:36.000
So good luck and I'll see you in the next section.
