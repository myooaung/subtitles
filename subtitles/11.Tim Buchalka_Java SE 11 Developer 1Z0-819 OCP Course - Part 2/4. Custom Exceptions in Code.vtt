WEBVTT
1

00:00:05.150  -->  00:00:08.850
Alright.
So, let's start now, creating some custom checked exceptions.

2

00:00:09.210  -->  00:00:11.540
First thing, we want to do is create a new class

3

00:00:11.540  -->  00:00:13.200
in our ExceptionHandling project.

4

00:00:13.200  -->  00:00:15.200
We'll call this one, CheckedExamples.

5

00:00:26.500  -->  00:00:31.000
Alright, so this code has two classes, firstly, a custom exception,

6

00:00:31.000  -->  00:00:34.000
CustomThrowable. You can see that that extends throwable,

7

00:00:34.500  -->  00:00:37.200
so previously, stated that throwable is checked.

8

00:00:37.700  -->  00:00:41.900
Any custom class that directly extends throwable is also considered checked.

9

00:00:42.400  -->  00:00:44.900
So, this class is demonstrating a custom attribute

10

00:00:44.900  -->  00:00:47.200
as well as a method on the custom exception,

11

00:00:47.800  -->  00:00:52.100
and you can see the attribute there, and we've also got a custom method down there as well,

12

00:00:52.350  -->  00:00:53.350
in line 34.

13

00:00:54.230  -->  00:00:56.030
We've got a default constructor there,

14

00:00:56.030  -->  00:00:58.030
which has an implied call to super,

15

00:00:58.390  -->  00:01:01.390
the message will be null on that scenario obviously, because there's no parameter.

16

00:01:02.690  -->  00:01:05.490
We've got a single arg constructor there, line 22,

17

00:01:05.850  -->  00:01:07.950
which is passing a customized message.

18

00:01:08.650  -->  00:01:12.250
We've got a two args constructor down here, line 28,

19

00:01:12.450  -->  00:01:16.150
accepting message in throwable which wraps the original exception

20

00:01:16.150  -->  00:01:17.650
into the custom exception.

21

00:01:18.420  -->  00:01:22.020
Alright, so moving on down, then we've got our public class CheckedExamples.

22

00:01:22.020  -->  00:01:26.020
Two methods in that, these are required to satisfy the Catch/Specifier requirement.

23

00:01:26.320  -->  00:01:29.320
So, the throwThrowable method down here, line 63,

24

00:01:29.320  -->  00:01:33.320
satisfies the Catch/Specifier requirement by specifying the Custom

25

00:01:33.320  -->  00:01:36.620
Throwable Exception in the throws clause of the method declaration.

26

00:01:37.170  -->  00:01:40.160
But also handleThrowable, if you come down here and check that method out.

27

00:01:40.160  -->  00:01:42.760
That satisfies the Catch/Specifier requirement

28

00:01:42.760  -->  00:01:45.760
by catching the Custom Throwable Exception thrown.

29

00:01:46.120  -->  00:01:50.320
Alright, going back to our main method. You can see that invokes handleThrowable,

30

00:01:51.220  -->  00:01:55.320
line 48 there, which does not throw the custom throwable CheckedException.

31

00:01:55.570  -->  00:01:58.070
So, it's testing the no args constructor.

32

00:01:58.620  -->  00:02:00.620
We've got a call to throwThrowable.

33

00:02:00.980  -->  00:02:04.280
And that's in the try catch clause there, line 52,

34

00:02:04.530  -->  00:02:07.130
is passing it the value zero as you can see there

35

00:02:07.130  -->  00:02:09.930
and this throws a custom throwable CheckedException,

36

00:02:10.080  -->  00:02:12.440
and tests the two arguments constructor.

37

00:02:12.440  -->  00:02:16.440
And you can see the code there, specifically, line 70, testing to see whether the value

38

00:02:16.440  -->  00:02:20.940
passed is zero, if it is, it's using two arguments when throwing custom throwable.

39

00:02:21.240  -->  00:02:24.840
And lastly, then back to our main method again, line 57,

40

00:02:25.240  -->  00:02:28.640
outside of the try/catch clause, it's passing it the value one.

41

00:02:28.640  -->  00:02:32.440
This is throw throwable, and this throws a custom throwable CheckedException.

42

00:02:32.440  -->  00:02:35.240
Looking at the code, you can see it's doing that on line 75.

43

00:02:35.440  -->  00:02:39.430
That's testing a single args constructor with a custom message.

44

00:02:39.430  -->  00:02:42.330
Now, this statement compiles because the main method

45

00:02:42.330  -->  00:02:44.690
declares throwable in its throw clause.

46

00:02:44.690  -->  00:02:46.390
You can see that on line 43.

47

00:02:46.940  -->  00:02:48.240
Alright, so if we run this now.

48

00:02:50.440  -->  00:02:52.140
And we can see the output on screen.

49

00:02:53.040  -->  00:02:55.810
The first custom throwable was handled

50

00:02:55.810  -->  00:02:57.810
by the method handleThrowable.

51

00:02:58.210  -->  00:03:00.810
It was printed here, you can see it's got no message.

52

00:03:01.150  -->  00:03:04.150
The second custom throwable was created with two arguments,

53

00:03:04.150  -->  00:03:07.150
and first executed the doSomethingSpecial method.

54

00:03:07.150  -->  00:03:10.250
And you can see the original exception is shown in the stack trace.

55

00:03:10.650  -->  00:03:12.750
This was called and handled in the main method.

56

00:03:12.750  -->  00:03:15.850
And the third custom throwable was created with one argument,

57

00:03:15.850  -->  00:03:18.650
a custom message and was not handled,

58

00:03:18.650  -->  00:03:21.250
resulting in the program terminating prematurely.

59

00:03:22.130  -->  00:03:25.430
You can see that the custom message was used in the exception message.

60

00:03:26.110  -->  00:03:29.110
Alright. So, if we close that run window down, the output pane rather.

61

00:03:29.110  -->  00:03:32.710
I'll go back to our main method declaration, you can see it's on screen now.

62

00:03:33.070  -->  00:03:35.070
Now, if we change what it is currently,

63

00:03:35.070  -->  00:03:37.970
you can see it's set up to throws Throwable. If we remove this,

64

00:03:40.670  -->  00:03:42.670
you know by doing that, it's caused the compiler-time error.

65

00:03:42.670  -->  00:03:44.370
If I come over here, and click on that.

66

00:03:46.070  -->  00:03:47.670
You can see the error there on line 57,

67

00:03:49.470  -->  00:03:51.830
Unhandled Exception: CustomThrowable.

68

00:03:51.830  -->  00:03:55.030
By removing throwable from the throws clause of the main method,

69

00:03:55.030  -->  00:03:58.230
we've removed the specified part of the requirement

70

00:03:58.230  -->  00:03:59.430
for CheckedExceptions.

71

00:03:59.430  -->  00:04:00.930
So, let's undo that change.

72

00:04:03.430  -->  00:04:07.330
So, in addition to throwable, when it's direct subclasses being CheckedExceptions

73

00:04:07.330  -->  00:04:08.690
with the exception of error,

74

00:04:08.690  -->  00:04:11.690
we know that the exception class is also a CheckedException.

75

00:04:12.390  -->  00:04:16.390
So, let's add a CustomException that extends exception.

76

00:04:16.390  -->  00:04:19.690
So, what I'm going to do is, add some code prior to the declaration

77

00:04:19.690  -->  00:04:21.290
of the CustomThrowable class.

78

00:04:21.290  -->  00:04:23.890
Here's our CustomThrowable class, I'm going to paste it up here.

79

00:04:24.890  -->  00:04:28.990
So, this CustomException class extends exception as you can see.

80

00:04:28.990  -->  00:04:33.190
It's got a constant Error_Code and tests yet another throwable constructor.

81

00:04:33.340  -->  00:04:36.540
This one includes the two booleans enableSuppression.

82

00:04:36.540  -->  00:04:39.640
I will be talking about suppressed exceptions in an upcoming video.

83

00:04:39.640  -->  00:04:43.240
So, for now, I'll just make this always, false, and you can see that's hard coded

84

00:04:43.600  -->  00:04:47.600
and writableStackTrace, which I'll test is both true and false

85

00:04:47.600  -->  00:04:48.900
in invoking code.

86

00:04:49.100  -->  00:04:50.800
Alright, now, I've done that. We need to add a method

87

00:04:51.300  -->  00:04:54.400
to our CheckedExamples class. So, let's do that, I'll do that right down the bottom.

88

00:04:54.400  -->  00:04:55.200
And here,

89

00:04:57.030  -->  00:05:00.130
noting that the exception is declared in the throws clause,

90

00:05:00.790  -->  00:05:02.890
specifically, what I'm doing is testing

91

00:05:02.890  -->  00:05:06.590
a method that throws the exception to clearing the CustomException in the throws clause

92

00:05:06.590  -->  00:05:07.590
as this method is doing.

93

00:05:07.890  -->  00:05:10.490
And if an argument passed to this method is zero,

94

00:05:10.490  -->  00:05:13.690
I throw the exception setting writableStackTrace to false.

95

00:05:14.050  -->  00:05:17.050
You can see that on line 110, otherwise, it's set to true

96

00:05:17.050  -->  00:05:19.350
on line 111 via the else.

97

00:05:20.150  -->  00:05:22.650
Alright. So, now, that i've done that we need to alter our main method,

98

00:05:22.650  -->  00:05:25.950
and I'm actually going to replace the main method with this new code,

99

00:05:25.950  -->  00:05:27.250
so we'll go back up to there.

100

00:05:29.950  -->  00:05:32.950
Replace it entirely, certainly be quicker.

101

00:05:33.550  -->  00:05:37.050
So, what I've done there, is changed the two invocations of throws throwable

102

00:05:37.300  -->  00:05:40.800
to now use testExceptionNotHandled, you can see that now

103

00:05:40.800  -->  00:05:43.800
on line 63 as well as line 69.

104

00:05:44.500  -->  00:05:48.380
I've also changed the catch to catch CustomException now

105

00:05:48.380  -->  00:05:52.150
on line 64, whereas before it was catching custom throwable.

106

00:05:52.150  -->  00:05:53.550
Well, so if we run this now,

107

00:05:57.050  -->  00:05:59.250
you can see that this is similar to the last one.

108

00:05:59.250  -->  00:06:01.550
But note that the second CustomException

109

00:06:01.910  -->  00:06:05.110
thrown contains the additional stack trace for the wrapped exception.

110

00:06:05.110  -->  00:06:07.510
And the first CustomException does not.

111

00:06:07.870  -->  00:06:09.470
Alright, so going back to our main method again.

112

00:06:11.770  -->  00:06:14.770
Let's change the throws throwable that's currently defined

113

00:06:14.770  -->  00:06:17.570
for our main method throwing throwable,

114

00:06:17.570  -->  00:06:20.070
we'll change that to throws CustomThrowable.

115

00:06:23.070  -->  00:06:27.070
And notice by doing that, it no longer satisfies the Catch/Specifier requirement for the

116

00:06:27.070  -->  00:06:28.840
testExceptionNotHandled method.

117

00:06:28.840  -->  00:06:30.440
We've got a compiler error there,

118

00:06:32.640  -->  00:06:35.040
Unhandled Exception: CustomException.

119

00:06:35.040  -->  00:06:39.840
The throwable class is a catch-all for all exceptions, but sub-classes of it are not.

120

00:06:40.440  -->  00:06:42.940
Alright, so go back up to our main method declaration again.

121

00:06:42.940  -->  00:06:47.040
Let's change that from CustomThrowable to CustomException.

122

00:06:49.340  -->  00:06:52.140
Notice that by doing that, our code now compiles again

123

00:06:52.390  -->  00:06:55.690
because the main method declares the Unhandled Exception thrown

124

00:06:55.690  -->  00:06:58.690
from the testExceptionNotHandled method.

125

00:06:58.690  -->  00:07:00.690
That's by the throws CustomException.

126

00:07:00.990  -->  00:07:04.990
Now, the result is the same whether you declare Throwable or Custom Exception.

127

00:07:04.990  -->  00:07:08.350
And finally, there are two types of unchecked exceptions.

128

00:07:08.350  -->  00:07:10.550
These are exceptions of subclass error

129

00:07:10.550  -->  00:07:14.750
and exceptions that subclass RuntimeException directly or indirectly.

130

00:07:14.950  -->  00:07:16.950
I want to show you a quick example of both,

131

00:07:17.450  -->  00:07:19.450
so we need to create another class.

132

00:07:19.450  -->  00:07:21.450
I'm going to call this UncheckedExamples.

133

00:07:29.810  -->  00:07:31.810
Alright, so let's put the code in there.

134

00:07:31.810  -->  00:07:35.610
So, in this code, I’ve pasted in, I create two custom exceptions

135

00:07:36.510  -->  00:07:38.870
CustomError which you can see on line 10

136

00:07:38.870  -->  00:07:42.370
that extends a subclass of error called UnknownError.

137

00:07:42.570  -->  00:07:44.670
In this sample, I'm demonstrating just one constructor

138

00:07:45.330  -->  00:07:48.530
as you can see, it's the one that's got one argument which is our message.

139

00:07:48.930  -->  00:07:51.930
And the second class there is CustomArithmeticException

140

00:07:52.330  -->  00:07:55.730
and that extends ArithmeticException derived from RuntimeException.

141

00:07:56.030  -->  00:07:58.430
And again, just one constructor in the example,

142

00:07:58.430  -->  00:08:01.930
and the UncheckedExamples class, you can see that's obviously got a main method there.

143

00:08:01.930  -->  00:08:05.930
But it's also got two methods similar to the last class we used,

144

00:08:06.180  -->  00:08:09.180
TestCustomError and TestCustomRuntimeException.

145

00:08:09.840  -->  00:08:12.840
So, I catch the original exception, and you can see me doing that

146

00:08:13.640  -->  00:08:16.000
on line 45 of testCustomError,

147

00:08:16.000  -->  00:08:20.000
that method, and also lines 56 of our testCustomRuntimeException.

148

00:08:20.360  -->  00:08:23.860
And I'm throwing a new exception either the CustomErrorException

149

00:08:23.860  -->  00:08:27.660
on line 47, or our new CustomArithmeticException

150

00:08:27.660  -->  00:08:32.120
on line 58 depending on the value that's passed to either method.

151

00:08:32.520  -->  00:08:34.020
So, getting back to our main method,

152

00:08:34.520  -->  00:08:38.520
it's got no requirements by the compiler to Catch/Specify either of the CustomExceptions.

153

00:08:38.770  -->  00:08:42.090
So, therefore, I don't need the throws clause in the main method declaration.

154

00:08:42.090  -->  00:08:44.490
You can see it obviously hasn't got that on line 24.

155

00:08:44.790  -->  00:08:47.790
So, I'm wrapping the first methods invocation in a try/catch,

156

00:08:48.090  -->  00:08:50.590
so that both methods are ultimately invoked.

157

00:08:50.990  -->  00:08:52.090
Alright, we'll run this.

158

00:08:58.490  -->  00:09:01.990
And remember here, just because the compiler is not forcing you to handle the error,

159

00:09:02.390  -->  00:09:05.490
not handling an exception still results in the program terminating,

160

00:09:05.490  -->  00:09:06.990
you can see that's obviously happened here.

161

00:09:06.990  -->  00:09:08.590
Alright, so we'll stop at this point.

162

00:09:09.490  -->  00:09:13.490
In this video and the previous one, I've reviewed checked and unchecked exceptions

163

00:09:13.490  -->  00:09:16.490
and shown how you can create custom exceptions from any of

164

00:09:16.490  -->  00:09:19.050
four given exception classes or their subclasses.

165

00:09:19.650  -->  00:09:24.150
Firstly, throwable - the top-most exception class from which all others are subclassed.

166

00:09:24.450  -->  00:09:28.750
Subclassing a custom class directly from this class is creating a checked exception.

167

00:09:29.550  -->  00:09:32.250
Second, Error, which subclasses from Throwable

168

00:09:32.250  -->  00:09:34.350
but is meant for special critical errors.

169

00:09:34.850  -->  00:09:38.050
Java's exceptions of this type end with ‘Error’ in the name.

170

00:09:38.050  -->  00:09:42.150
Subclassing your custom class from error will produce an unchecked exception,

171

00:09:42.400  -->  00:09:45.600
you should use this if the error is one that is not recoverable from.

172

00:09:46.960  -->  00:09:50.160
Third, Exception, which subclasses from Throwable

173

00:09:50.160  -->  00:09:52.860
of which there is a special subclass runtime exception.

174

00:09:53.660  -->  00:09:57.260
All classes that descend from exception and not from runtime exception

175

00:09:57.260  -->  00:09:58.660
are checked exceptions.

176

00:09:58.660  -->  00:10:01.860
Your custom class subclassed from Exception must satisfy

177

00:10:01.860  -->  00:10:03.460
the Catch/Specifier requirement.

178

00:10:04.060  -->  00:10:06.950
And lastly, Runtime Exception and all of its subclasses

179

00:10:06.950  -->  00:10:10.550
well they're a special category of exception and are unchecked exceptions.

180

00:10:10.950  -->  00:10:14.150
Subclassing your custom exception from any of these classes

181

00:10:14.150  -->  00:10:16.750
will result in your custom exception being unchecked.

182

00:10:17.650  -->  00:10:20.650
I've also reviewed leveraging existing constructors

183

00:10:20.650  -->  00:10:23.250
in constructors of your custom exceptions.

184

00:10:23.250  -->  00:10:26.130
If you pass the original exception to the constructor,

185

00:10:26.130  -->  00:10:30.120
your chaining exceptions and the stack trace will print information

186

00:10:30.120  -->  00:10:31.720
about the originating exception.

187

00:10:33.120  -->  00:10:34.920
Alright, so moving on in the next video,

188

00:10:34.920  -->  00:10:38.920
I'll start by discussing a special kind of error called the ‘Assertion Error’

189

00:10:38.920  -->  00:10:41.220
- an error thrown from an assert statement

190

00:10:41.220  -->  00:10:44.580
that will hold execution of your application and it is unchecked.

191

00:10:44.580  -->  00:10:46.580
So, I'll see you in the next video!
