WEBVTT
1
00:00:05.220 --> 00:00:11.190
In the last video, I looked at terminal operations that answered questions about the data in a stream

2
00:00:11.190 --> 00:00:17.760
or pipeline in this video, the question I want to ask the data requires first that the data be looked

3
00:00:17.760 --> 00:00:19.470
at as an entire set.

4
00:00:19.770 --> 00:00:22.770
No Short-circuiting can occur here to return a result.

5
00:00:23.370 --> 00:00:28.770
If you try to execute these operations on an infinite stream without first limiting it in some way,

6
00:00:29.040 --> 00:00:32.520
you may be creating a non terminating situation.

7
00:00:34.280 --> 00:00:39.620
The terminal operations I'll be discussing in this video are listed in the table, on screen and a known

8
00:00:39.620 --> 00:00:46.700
as reduction operations, they return SWAT Valley by combining or aggregating the elements of a stream

9
00:00:46.700 --> 00:00:47.450
in some way.

10
00:00:48.240 --> 00:00:55.160
An important note, the Max Min and the single argument reduce Method's return, an optional and therefore

11
00:00:55.160 --> 00:00:59.240
cannot be directly assigned to a primitive data local variable.

12
00:01:00.050 --> 00:01:01.290
So let's look at some of these methods.

13
00:01:01.340 --> 00:01:04.280
The first method signature is count, which returns long.

14
00:01:04.850 --> 00:01:07.430
That returns the count of elements in the stream.

15
00:01:08.210 --> 00:01:12.440
The next one we've got there is Max, which returns an optional type T.

16
00:01:12.560 --> 00:01:16.820
You can say it's got a parameter of comparator using a wild card that's lower bound.

17
00:01:17.480 --> 00:01:22.370
This returns the maximum element of this stream, according to the provided comparator.

18
00:01:22.730 --> 00:01:24.380
This is a special case of a reduction.

19
00:01:25.180 --> 00:01:28.550
Next, we've got Minne, which also returns an optional type T.

20
00:01:28.970 --> 00:01:31.310
It also has passed a parameter.

21
00:01:31.310 --> 00:01:37.520
Comparator is using a wildcard lower bound T returns the minimum element of this stream, according

22
00:01:37.520 --> 00:01:38.720
to the provided comparator.

23
00:01:39.030 --> 00:01:41.090
And this is also a special case of a reduction.

24
00:01:41.870 --> 00:01:47.750
Next, we have ridges, which also returns optional of type T, it accepts a binary operator of type

25
00:01:47.750 --> 00:01:54.770
T and performs a reduction on the elements of the stream using an associative accumulation function

26
00:01:55.070 --> 00:01:58.310
and returns an optional describing the reduced value, if any.

27
00:01:59.260 --> 00:02:05.320
Next, we have Ridges, which returns a type T excepting two parameters, the first of type T, the

28
00:02:05.320 --> 00:02:11.530
second a binary operator of type T, it is performs a reduction on the elements of the stream using

29
00:02:11.530 --> 00:02:18.040
the provided identity value and an associated accumulation function and returns the reduced value and

30
00:02:18.040 --> 00:02:20.380
the last one is reduced, which is overloaded there.

31
00:02:20.710 --> 00:02:23.020
You could say that the parameters are a type.

32
00:02:23.020 --> 00:02:25.780
You both have a function of top.

33
00:02:25.780 --> 00:02:34.120
You add a wildcard lower bound T and you have also got a binary operator of top upswell and it returns

34
00:02:34.120 --> 00:02:34.900
a top you.

35
00:02:35.320 --> 00:02:41.170
So it performs a reduction on the elements of this stream using the provided identity accumulation and

36
00:02:41.170 --> 00:02:42.760
combining functions.

37
00:02:43.660 --> 00:02:45.320
Well, let's swing back to our idea.

38
00:02:45.370 --> 00:02:48.160
We need to create a new class in our Stream Operations project.

39
00:02:48.580 --> 00:02:59.620
We're going to call this one stream simple reductions stream, simple reductions, the code in case

40
00:02:59.800 --> 00:03:00.500
there's the code.

41
00:03:01.180 --> 00:03:05.140
So this code consists of a main method that does the following in a for loop.

42
00:03:05.140 --> 00:03:06.400
So you can see a for loop there.

43
00:03:07.210 --> 00:03:11.740
Well, before that, you can see on line 17, I've created a local variable which will house a random

44
00:03:11.740 --> 00:03:12.420
list of integer.

45
00:03:13.060 --> 00:03:16.390
But in terms of the Falu, not that limit is a loop variable.

46
00:03:16.390 --> 00:03:21.610
In addition to the iteration counter ie the limit variable will change the size of the list we create.

47
00:03:22.240 --> 00:03:26.070
Our list is created using Random INTs, which was introduced in Java.

48
00:03:26.070 --> 00:03:27.550
Right, and produces an end stream.

49
00:03:28.150 --> 00:03:34.060
You remember hopefully that I transformed from a stream of int turn in stream in the video and streamed

50
00:03:34.060 --> 00:03:36.520
stream map examples using a map to interpret it.

51
00:03:37.030 --> 00:03:38.110
Here I'm doing the opposite.

52
00:03:38.110 --> 00:03:44.950
I'm transforming it into stream to a stream of top integer using the strange box method and then using

53
00:03:44.950 --> 00:03:50.290
collect using collectors to list to generate a list of integer from this stream.

54
00:03:51.250 --> 00:03:54.910
Next, I'm taking the list created in creating three pipelines.

55
00:03:55.510 --> 00:03:58.690
The first one is, is the count method which returns along.

56
00:03:59.710 --> 00:04:04.960
The next one we're using is Max with a pass comparator which takes a comparator and returns an optional

57
00:04:05.080 --> 00:04:12.340
of top long o use the static method here, comparator dot natural order for the comparator and the third

58
00:04:12.340 --> 00:04:18.430
one using them in passing a comparative method which takes a comparator and returns an optional of type

59
00:04:18.430 --> 00:04:18.760
long.

60
00:04:19.030 --> 00:04:20.500
And I'm using a static method here.

61
00:04:20.500 --> 00:04:23.620
Comparator to natural order as well for this comparator.

62
00:04:24.220 --> 00:04:24.910
Scroll down.

63
00:04:26.250 --> 00:04:30.660
So you've got some airport and we're altering the limit, but in terms of going through our loop, you

64
00:04:30.660 --> 00:04:36.120
can see that I'm iterating five times and each time the limit of the list gets larger and the min max

65
00:04:36.120 --> 00:04:39.780
values should get closer to the range of numbers used in the random method.

66
00:04:40.910 --> 00:04:44.510
Again, you can see that we're multiplying it by 10 through each iteration.

67
00:04:45.260 --> 00:04:46.070
So let's run this now.

68
00:04:50.190 --> 00:04:51.990
So I could see the output on the screen there now.

69
00:04:52.410 --> 00:04:56.790
Now, obviously your output will be different because of the randomise nature of their list and the

70
00:04:56.790 --> 00:04:59.180
fact we can run it again and we'll see that we'll get different results.

71
00:05:01.080 --> 00:05:01.600
There we go.

72
00:05:02.320 --> 00:05:07.200
Well, so far, I think these methods are fairly straightforward, but let's go make one minor change

73
00:05:07.200 --> 00:05:07.870
to the fallout.

74
00:05:08.340 --> 00:05:10.230
We're going to go back up here and change.

75
00:05:11.310 --> 00:05:14.370
The initial value of limit from one to zero do that.

76
00:05:15.210 --> 00:05:16.050
Now, if we run this.

77
00:05:19.120 --> 00:05:24.790
You see, suddenly we've got an era, no such Elliman exception, no valley present, you could say

78
00:05:24.790 --> 00:05:31.270
that it's crashed a lot of 39 this year has occurred because the list is empty and therefore the stream

79
00:05:31.270 --> 00:05:31.750
is empty.

80
00:05:31.750 --> 00:05:37.940
And the result of Max is an empty, optional piece of get on an empty optional produces this era.

81
00:05:38.810 --> 00:05:39.370
What's the next?

82
00:05:39.370 --> 00:05:40.570
Let's make a few other changes.

83
00:05:41.850 --> 00:05:44.850
What we want to do is change these two uses of get along.

84
00:05:44.880 --> 00:05:50.520
Thirty nine and forty four, we're going to change this to all else and pass on an argument of minus

85
00:05:50.520 --> 00:05:51.570
one side or else

86
00:05:54.300 --> 00:05:56.160
on as one and would do the same down here.

87
00:06:00.060 --> 00:06:00.690
Minus one.

88
00:06:01.350 --> 00:06:06.990
So here's what I want to do is return minus one as the value, if the optional is now four million max,

89
00:06:06.990 --> 00:06:09.690
if the list is empty, I talked about option one.

90
00:06:09.690 --> 00:06:12.120
The use of or else in the video are options.

91
00:06:12.490 --> 00:06:16.710
In addition, I want to make a change to line forty seven where I'm starting a value to limit.

92
00:06:17.290 --> 00:06:18.120
So let's do that here.

93
00:06:20.140 --> 00:06:23.800
But he's a ternary operator here, so you could say that I'm setting the limit to one if it's zero.

94
00:06:24.100 --> 00:06:27.730
Otherwise, I'm setting it to limit multiplied by 10 NetWeaver on this card.

95
00:06:30.180 --> 00:06:33.960
We've got the following output, which, again, will be different because of the randomise list when

96
00:06:33.960 --> 00:06:37.770
you read it, so I should now be able to add some an average, correct.

97
00:06:39.070 --> 00:06:41.800
But some on average are not terminal operations on stream.

98
00:06:42.010 --> 00:06:46.630
They are, however, operations on stream, double stream and long stream.

99
00:06:47.230 --> 00:06:51.490
So that's at some code now in the loop just before the end of the closing loop.

100
00:06:51.760 --> 00:06:52.030
Right.

101
00:06:52.060 --> 00:06:53.710
Calibration facility for Loop.

102
00:06:54.370 --> 00:06:59.740
So just before the closing calibration, I'm going to paste in the code and there's the code.

103
00:07:00.010 --> 00:07:06.250
So I'm transforming the stream to an end stream using map to it with a simple one to one function.

104
00:07:06.770 --> 00:07:09.840
Then I call the average function, which uses optional.

105
00:07:09.850 --> 00:07:14.230
And so I'm going to use or else passing minus one to that method as we did previously.

106
00:07:14.710 --> 00:07:16.840
The sub method simply returns a double value.

107
00:07:17.110 --> 00:07:18.320
The sum of nothing is zero.

108
00:07:18.610 --> 00:07:19.580
So if we run this now.

109
00:07:21.280 --> 00:07:24.730
So as you can see from the output, it's showing us the salmon averages of the lists.

110
00:07:24.940 --> 00:07:26.390
And again, your numbers will be different.

111
00:07:26.950 --> 00:07:28.960
Can you get us some without using its stream?

112
00:07:29.920 --> 00:07:31.680
Let's answer that in the next video.
