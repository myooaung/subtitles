WEBVTT
1

00:00:05.210  -->  00:00:08.290
All right, so in the last few
videos, we've learned firstly that

2

00:00:08.290  -->  00:00:12.430
the abstract and final modifiers are
polar opposites and cannot be used

3

00:00:12.430  -->  00:00:14.040
in the same declaration of a class.

4

00:00:14.690  -->  00:00:17.460
We found that we can instantiate
an object of a final class.

5

00:00:18.029  -->  00:00:20.779
We also found we cannot
subclass a final class.

6

00:00:20.779  -->  00:00:24.240
A final class used in the
extends clause of a class

7

00:00:24.290  -->  00:00:25.810
declaration is a compiler error.

8

00:00:28.410  -->  00:00:31.380
We found that any class can
have a final method, including a

9

00:00:31.380  -->  00:00:35.320
final class, which is redundant
but ok and an abstract class.

10

00:00:35.320  -->  00:00:38.960
A final method will always have
a body that is, it cannot be

11

00:00:38.960  -->  00:00:43.030
abstract for the same reason as a
class - the modifiers are opposites.

12

00:00:43.860  -->  00:00:47.659
And finally, we found that adding
the final modifier to an overridden

13

00:00:47.660  -->  00:00:51.380
method is valid, and still meets the
requirements for the implementation of

14

00:00:51.380  -->  00:00:53.350
a class extending an abstract class.

15

00:00:54.620  -->  00:00:57.629
Now, before we talk about why you
might want to create a final class,

16

00:00:57.940  -->  00:01:00.870
let's make one more change to the
code we've been just exploring.

17

00:01:00.940  -->  00:01:02.360
Swing back over to the editor now.

18

00:01:03.090  -->  00:01:04.760
We're going to add a constructor.

19

00:01:05.440  -->  00:01:08.830
We're going to add it to
our ExtendMeOptional class,

20

00:01:08.830  -->  00:01:10.480
this one up here on line 10.

21

00:01:11.830  -->  00:01:13.530
So, I'm going to paste that in.

22

00:01:14.610  -->  00:01:16.140
So you can see what I've
done there, I've added a

23

00:01:16.140  -->  00:01:18.080
private no-args constructor.

24

00:01:18.740  -->  00:01:20.720
So by doing that, I've
introduced a couple of errors.

25

00:01:20.720  -->  00:01:22.500
You probably can see in the
gutter over the right-hand side,

26

00:01:22.500  -->  00:01:23.970
there's two red indicators there.

27

00:01:24.469  -->  00:01:27.950
If I click on that, first error
you can see is on line 50.

28

00:01:28.969  -->  00:01:32.810
But also, there's an error
down here on line 75.

29

00:01:33.210  -->  00:01:37.520
In both cases, you can see the error
there, there's no default constructor

30

00:01:37.520  -->  00:01:39.940
available in ExtendMeOptional.

31

00:01:41.259  -->  00:01:44.800
So, creating a single private
constructor as we've done up here

32

00:01:44.839  -->  00:01:49.530
on line 12 has basically the same
effect as declaring a class final.

33

00:01:49.970  -->  00:01:54.030
You cannot then use the class in any
extends clause of a class declaration,

34

00:01:54.140  -->  00:01:57.180
but in addition, it prevents the class
from being instantiated and obviously,

35

00:01:57.180  -->  00:01:59.039
those two errors showed us that.

36

00:02:00.759  -->  00:02:01.849
There it is being extended.

37

00:02:04.580  -->  00:02:07.480
There we are trying to instantiate
it, both getting errors.

38

00:02:09.850  -->  00:02:14.290
So note that java.util.Arrays, that class
is a perfect example of a class

39

00:02:14.290  -->  00:02:17.730
that cannot be
instantiated or subclassed.

40

00:02:17.730  -->  00:02:21.430
Although java.util.Arrays is
not declared a final class,

41

00:02:21.430  -->  00:02:23.030
you actually cannot subclass it.

42

00:02:24.210  -->  00:02:25.610
All right, so let's undo that change.

43

00:02:25.610  -->  00:02:28.790
Specifically, I'm just going to
remove the private constructor again.

44

00:02:30.250  -->  00:02:31.780
And obviously, if I rebuild this.

45

00:02:35.880  -->  00:02:37.850
Or remove it perhaps, I
will just do that again.

46

00:02:38.000  -->  00:02:42.129
And obviously, this code will
now work, it will work because

47

00:02:42.299  -->  00:02:43.510
we've actually made those changes.

48

00:02:43.520  -->  00:02:46.090
All right, so remove the
errors in other words.

49

00:02:46.100  -->  00:02:50.060
All right, so our code is now
compiling and executing again.

50

00:02:50.790  -->  00:02:52.830
Now, we could also have
added the private constructor

51

00:02:52.840  -->  00:02:54.150
to our final class.

52

00:02:55.509  -->  00:02:58.759
This one down here on line 28,
preventing an instance of it from

53

00:02:58.770  -->  00:03:00.340
being created if that was our goal.

54

00:03:02.920  -->  00:03:06.380
But what are some of the reasons to
use the final modifier on a class?

55

00:03:06.830  -->  00:03:10.283
Well, firstly, to create an
immutable class to support the

56

00:03:10.283  -->  00:03:11.540
creation of immutable objects.

57

00:03:11.960  -->  00:03:15.290
An immutable class allows an
object to be created with data

58

00:03:15.600  -->  00:03:19.269
through a defined constructor,
but disallows changes after the

59

00:03:19.270  -->  00:03:20.730
initial construction of the object.

60

00:03:21.580  -->  00:03:25.100
Secondly, another reason to use
the final modifier is to prevent

61

00:03:25.140  -->  00:03:28.130
accessibility by protecting
standard and unchangeable

62

00:03:28.160  -->  00:03:31.580
methods or calculations from
being overridden or overloaded.

63

00:03:32.110  -->  00:03:34.850
And the third reason to use a
final modifier is to implement

64

00:03:35.070  -->  00:03:36.540
the Singleton Design Pattern.

65

00:03:36.850  -->  00:03:41.950
If you have a class that has constants
and methods that are not changeable

66

00:03:42.200  -->  00:03:45.524
and extending the method is really not
desirable, then make the class final.

67

00:03:45.679  -->  00:03:48.535
All right, so at this point, I've
shown you why using the final

68

00:03:48.535  -->  00:03:52.130
modifier at both the class and
method level would be good practice.

69

00:03:52.549  -->  00:03:56.110
In the next video, we'll review
nested classes which permit

70

00:03:56.140  -->  00:04:00.480
additional class modifiers as I
described in an earlier slide earlier

71

00:04:00.480  -->  00:04:01.700
in this section of the course.

72

00:04:01.910  -->  00:04:03.170
See you in that next video.
