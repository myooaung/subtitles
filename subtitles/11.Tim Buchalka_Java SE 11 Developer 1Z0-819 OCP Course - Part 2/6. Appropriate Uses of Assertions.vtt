WEBVTT
1

00:00:05.300  -->  00:00:09.180
All right, so I want to pause here before we continue and talk about when to use assertions,

2

00:00:09.180  -->  00:00:11.180
but also when their use is inappropriate.

3

00:00:11.680  -->  00:00:14.180
First, let's identify different types of invariants.

4

00:00:14.980  -->  00:00:17.180
Firstly, an internal invariant.

5

00:00:17.580  -->  00:00:20.680
Internal invariants are usually progammatic assumptions

6

00:00:20.680  -->  00:00:24.380
that might have been comments in the past, which are better served with assertions.

7

00:00:24.880  -->  00:00:28.180
You've been in the situation I’m sure, where the code's changed,

8

00:00:28.180  -->  00:00:30.180
but the comment hasn't been edited.

9

00:00:30.180  -->  00:00:33.680
If on the other hand, the comment took the form of an assert statement,

10

00:00:33.680  -->  00:00:36.980
both the code and the assert statement would stay in sync.

11

00:00:37.230  -->  00:00:39.530
The next invariant type is Control-Flow.

12

00:00:40.130  -->  00:00:44.120
Place assertions at any location you assume will not be reached,

13

00:00:44.120  -->  00:00:47.420
but which the compiler would not recognize as unreachable.

14

00:00:49.420  -->  00:00:51.320
Third invariant type – preconditions.

15

00:00:51.680  -->  00:00:53.560
By convention, preconditions

16

00:00:53.560  -->  00:00:57.660
and public methods are enforced by explicit checks on the parameters,

17

00:00:57.960  -->  00:01:00.940
and assertions should not be used for the situation.

18

00:01:00.940  -->  00:01:05.240
However, preconditions on non-public methods is a better use of assertions.

19

00:01:05.840  -->  00:01:08.140
Next invariant type – Postconditions.

20

00:01:08.140  -->  00:01:09.940
You can test postconditions

21

00:01:09.940  -->  00:01:12.540
with assertions in both public and non-public methods.

22

00:01:12.840  -->  00:01:14.640
And the last one Class invariants.

23

00:01:14.640  -->  00:01:18.740
This type of invariant applies to every instance of a class at all times.

24

00:01:19.400  -->  00:01:23.100
So, back to the code, we'll be walking through a few of these in variants in code.

25

00:01:23.500  -->  00:01:26.300
We want to start by creating a new class. Let's go ahead and do that.

26

00:01:26.300  -->  00:01:28.600
We'll call this class invariant examples.

27

00:01:31.500  -->  00:01:33.500
I'm going to put this in its own package,

28

00:01:33.500  -->  00:01:38.890
that'll be assertion.invariant.InvariantExamples.

29

00:01:43.490  -->  00:01:44.890
Okay, pasting the code.

30

00:01:46.490  -->  00:01:50.490
All right, so in this example, try to imagine that we want to provide formularies

31

00:01:50.490  -->  00:01:54.090
for pet food for certain types of animals considered pets.

32

00:01:54.790  -->  00:01:56.390
So, you can see that I've started out there

33

00:01:56.690  -->  00:01:59.490
by declaring an enum which is a list of pet types

34

00:01:59.490  -->  00:02:01.490
for which we'll be providing formularies.

35

00:02:02.040  -->  00:02:04.400
I've also got a main method there which you can see

36

00:02:04.760  -->  00:02:08.060
which loops through the pet types and retrieves and prints formularies.

37

00:02:08.860  -->  00:02:12.860
And moving on down, we've also got a private method here that's using a switch statement

38

00:02:13.060  -->  00:02:15.760
to return the formulary, a string description.

39

00:02:15.760  -->  00:02:17.760
So, I've added an assert statement

40

00:02:18.260  -->  00:02:20.860
to the default case, the control flow invariant,

41

00:02:21.160  -->  00:02:24.060
so it's assumed we're only supporting these types of pets.

42

00:02:24.360  -->  00:02:27.060
Any assumption is a good place for an assertion

43

00:02:27.560  -->  00:02:30.160
and obviously, I can run this. We haven't enabled assertions.

44

00:02:31.660  -->  00:02:33.960
So far so good, but let's actually add

45

00:02:35.060  -->  00:02:38.360
or edit our configuration with dash -ea again,

46

00:02:38.360  -->  00:02:40.760
because we want to use assertions, we want them enabled.

47

00:02:41.260  -->  00:02:45.160
So, let's now say that management wants to add support for a formulary for parrots.

48

00:02:45.660  -->  00:02:50.560
So, what we can do is come up to our enum and add parrot to the enum.

49

00:02:52.920  -->  00:02:55.220
And with assertions enabled, let's run the code again.

50

00:02:58.920  -->  00:03:03.520
You can see now that adding an assert statement that makes assumptions about the expected types

51

00:03:03.520  -->  00:03:07.020
will help future developers recognize areas of the application

52

00:03:07.020  -->  00:03:09.320
that will need to be updated to support a new type.

53

00:03:10.320  -->  00:03:14.320
All right, so let's undo that change and remove parrot from a list of enums.

54

00:03:15.020  -->  00:03:18.420
All right, so let's look at a few more invariants. I'm going to add some code down here

55

00:03:19.620  -->  00:03:20.920
just before the end of our class.

56

00:03:21.470  -->  00:03:22.770
All right, so what I have added here,

57

00:03:24.370  -->  00:03:27.570
some examples of pre and postcondition invariants

58

00:03:27.570  -->  00:03:29.010
and an internal invariant.

59

00:03:29.410  -->  00:03:33.510
So, it's a public method that I’ve pasted in here getPetTypeAgeDescription.

60

00:03:34.010  -->  00:03:38.110
It takes the parameter PetType which is our enum, and a PetAge and int.

61

00:03:38.910  -->  00:03:42.110
Note that I checked the pet age value as the first order of business

62

00:03:42.110  -->  00:03:45.810
and thrown an illegal argument exception if the age is less than zero.

63

00:03:46.310  -->  00:03:50.210
By convention, public methods should perform explicit checks that throw

64

00:03:50.210  -->  00:03:51.510
particular exceptions.

65

00:03:52.010  -->  00:03:55.210
Moving on down there, I've also got to assert there on line 55,

66

00:03:55.460  -->  00:03:58.060
and you can see a prefix that with bad practice assertion

67

00:03:58.060  -->  00:04:00.360
to check validity of public method parameters.

68

00:04:00.860  -->  00:04:03.460
So, I do have an assert statement to check the parameter value,

69

00:04:03.460  -->  00:04:05.760
but even if assertions were enabled,

70

00:04:05.760  -->  00:04:07.960
this assert statement would never be true

71

00:04:07.960  -->  00:04:11.760
because of the explicit checks throwing an illegal argument exception above it.

72

00:04:11.760  -->  00:04:14.260
If you relied only on the assert statement

73

00:04:14.260  -->  00:04:18.560
for checking the parameter, you'll be exposing the application to a lot of bad data,

74

00:04:18.560  -->  00:04:21.550
since generally, assertions are disabled by default.

75

00:04:22.100  -->  00:04:27.000
Using an assertion to test the validity of public method parameters is considered bad practice.

76

00:04:27.700  -->  00:04:30.000
So moving further on down into our method,

77

00:04:30.900  -->  00:04:34.800
I've included an internal invariant assert statement in the outer else statement

78

00:04:34.800  -->  00:04:37.800
because this code assumes two categories of ages.

79

00:04:37.800  -->  00:04:40.800
One set for cat dog another for gerbil hamster

80

00:04:41.000  -->  00:04:42.700
and assumes to be no other category.

81

00:04:43.060  -->  00:04:45.060
And towards the bottom of the method there,

82

00:04:45.060  -->  00:04:47.660
I've included a postcondition assert statement

83

00:04:47.660  -->  00:04:50.260
which confirms that the age description

84

00:04:50.260  -->  00:04:53.960
being returned from the method belongs to one of a predefined set

85

00:04:53.960  -->  00:04:55.760
defined in the assert statement.

86

00:04:56.360  -->  00:04:59.260
All right, so if we go back to our main method, let's actually test this method out.

87

00:04:59.760  -->  00:05:01.460
And I’m just going to replace the code here,

88

00:05:02.560  -->  00:05:04.360
basically replace that entire for loop

89

00:05:04.860  -->  00:05:08.660
and you can see we're now actually calling our getPetTypeAgeDescription method.

90

00:05:09.260  -->  00:05:10.160
Now, if we run it,

91

00:05:14.410  -->  00:05:16.710
and we get the following output as you can see on screen there,

92

00:05:16.710  -->  00:05:20.110
now that'll be the case whether assertions are enabled or disabled.

93

00:05:20.910  -->  00:05:22.210
So, let's change the enum again.

94

00:05:22.210  -->  00:05:23.810
This time we're going to add parrot back again.

95

00:05:27.010  -->  00:05:28.010
Run the code again.

96

00:05:31.810  -->  00:05:34.210
This time, we have got an insertion error as we would expect

97

00:05:34.210  -->  00:05:36.510
because we've added an enum that's not supported,

98

00:05:36.510  -->  00:05:39.810
but the big problem here is if assertions are not enabled,

99

00:05:40.010  -->  00:05:42.010
we'll come back and disable assertions

100

00:05:44.410  -->  00:05:45.310
run the code.

101

00:05:49.310  -->  00:05:52.310
And you can see what's happened there. Is a baby parrot a pup?

102

00:05:52.310  -->  00:05:54.310
It's a chick, so the code needs changes.

103

00:05:55.210  -->  00:05:57.710
And again, we saw previously with assertions enabled

104

00:05:57.710  -->  00:05:59.710
that crashed, but I'll just add those again anyway.

105

00:06:02.910  -->  00:06:06.410
And run it again. We do see that assertion this time.

106

00:06:07.210  -->  00:06:10.110
So, this assertion was able to catch an assumption made,

107

00:06:10.410  -->  00:06:13.410
we could also have added a custom message that would have been more helpful.

108

00:06:13.410  -->  00:06:17.010
Note that the assertion error was thrown an execution entered,

109

00:06:17.010  -->  00:06:20.010
so the next assert statement in this method is therefore never tested.

110

00:06:21.310  -->  00:06:24.110
So obviously, looking at the code,

111

00:06:26.710  -->  00:06:30.210
we didn't get beyond this assert statement, we can get to this one down here.

112

00:06:31.310  -->  00:06:33.410
Due to the assertion on line 68

113

00:06:33.410  -->  00:06:36.110
being false and therefore execution being terminated.

114

00:06:36.610  -->  00:06:39.110
All right, so let's end the video here and in the next one,

115

00:06:39.110  -->  00:06:41.110
let's fix this particular section of code.

116

00:06:41.770  -->  00:06:42.870
See you in the next video.
