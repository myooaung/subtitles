WEBVTT
1
00:00:05.220 --> 00:00:10.740
In the last number of videos, it was difficult to give you a demonstration without at least one method

2
00:00:10.740 --> 00:00:16.740
on the class javadoc YouTube streams collectors class past us, an argument to the collect method on

3
00:00:16.740 --> 00:00:17.260
stream.

4
00:00:17.970 --> 00:00:22.140
I said this takes the elements on the stream and transforms into a list.

5
00:00:23.220 --> 00:00:26.910
For example, they don't collect and in parentheses collectors not to list.

6
00:00:28.840 --> 00:00:34.690
In this video, I want to talk about both the collect method and the reduced method on stream and the

7
00:00:34.690 --> 00:00:41.260
Javadoc YouTube stream collector's class that provides very static factory methods that return an instance

8
00:00:41.260 --> 00:00:42.010
of a collector.

9
00:00:43.720 --> 00:00:47.060
First, let me show you the method signatures of collect on stream.

10
00:00:47.770 --> 00:00:49.780
This is hard to read, let alone memorize.

11
00:00:49.790 --> 00:00:54.040
But don't worry, because I'm going to be discussing all of these with code samples in this video.

12
00:00:54.040 --> 00:00:59.800
In the next one, you can see the first method they collect returns, an object of type are and the

13
00:00:59.800 --> 00:01:07.360
parameter is a collector using a wild card, lower bound T an R, and it performs a mutable reduction

14
00:01:07.360 --> 00:01:09.640
operation on the elements of this stream.

15
00:01:09.640 --> 00:01:16.510
Using a collector, a collector encapsulates the functions used as arguments to collect supplier by

16
00:01:16.510 --> 00:01:18.030
consumer by consumer.

17
00:01:18.040 --> 00:01:25.270
In this case, that's to last for reuse of collection strategies and composition of collect operations

18
00:01:25.480 --> 00:01:28.060
such as multilevel grouping or partitioning.

19
00:01:28.490 --> 00:01:29.650
And the next example thereof.

20
00:01:29.650 --> 00:01:31.810
Collect also returns an object of type.

21
00:01:32.410 --> 00:01:35.050
And you can see that there is parameters that are passed here.

22
00:01:36.060 --> 00:01:44.530
A supplier of type are a bi consumer of type R with a wild card Lobaton T, that's the accumulator and

23
00:01:44.530 --> 00:01:49.020
the third one by consumer of type R come R, which is the combiner.

24
00:01:49.360 --> 00:01:53.560
So this one performs a mutable reduction operation on the elements of the stream.

25
00:01:53.980 --> 00:02:00.280
Now mutable reduction is one in which the reduced value is a mutable result container such as an array

26
00:02:00.280 --> 00:02:06.730
list, and the elements are incorporated by updating the state of the result rather than by replacing

27
00:02:06.730 --> 00:02:07.240
the result.

28
00:02:08.200 --> 00:02:09.270
So let's swing back to code.

29
00:02:09.280 --> 00:02:12.550
We need yet another class in our Stream Operations project.

30
00:02:12.790 --> 00:02:14.920
We'll call this one stream collect.

31
00:02:23.180 --> 00:02:30.380
So this code creates a list of three strings, then uses a simple stream pipeline to add each to each

32
00:02:30.380 --> 00:02:33.410
element and the correct method to generate a new list.

33
00:02:34.620 --> 00:02:40.880
After the second list is created, a new element is added, confirming that the list returned from collect

34
00:02:41.230 --> 00:02:44.160
collectors not to list the terms and mutable list.

35
00:02:44.520 --> 00:02:50.130
The waiting list is printed, confirming the first list is untouched and the second list reflects all

36
00:02:50.130 --> 00:02:50.730
changes.

37
00:02:51.010 --> 00:02:51.660
Let's run this.

38
00:02:53.720 --> 00:02:57.230
And we can say that is the case, we've got the first original list, which is untouched and the second

39
00:02:57.230 --> 00:03:02.510
one with each added to each element in addition to that new element we've added.

40
00:03:03.980 --> 00:03:09.410
There are a lot of 24, so basically here we are demonstrating, collecting data into another container

41
00:03:10.370 --> 00:03:13.820
in this example, a container of the same type as the source of the stream.

42
00:03:15.650 --> 00:03:21.020
The table below lists other collector static methods you can use to collect data in other forms for

43
00:03:21.020 --> 00:03:26.060
mineral collections, the factory methods to collect the results of a stream to a collection or map

44
00:03:26.660 --> 00:03:33.290
to collection, to concurrent map, to list, to map and to set an immutable collections.

45
00:03:33.470 --> 00:03:38.870
We've got two and modifiable list, too, and modifiable map and two and modifiable set.

46
00:03:41.000 --> 00:03:44.480
Next, let's look at some reduction operations provided by the Collectors' class.

47
00:03:45.110 --> 00:03:48.000
We've got averaging double averaging into averaging long.

48
00:03:48.350 --> 00:03:51.200
These provide averages of all elements, parts to it.

49
00:03:51.950 --> 00:03:54.140
We've got the counting method which counts the elements.

50
00:03:54.140 --> 00:04:00.680
And surprisingly, the joining method joins a string or sequence strings and string builders object

51
00:04:00.680 --> 00:04:01.220
into one.

52
00:04:01.940 --> 00:04:07.160
We've got MEXT by and by static methods which perform max and min operations.

53
00:04:07.520 --> 00:04:13.450
We've got summarizing double summarizing int and summarizing long, which provide a set of summary statistics.

54
00:04:13.460 --> 00:04:14.730
Count some maximon.

55
00:04:15.530 --> 00:04:21.320
And finally, we've got something double something int and something wrong, which is summation operations.

56
00:04:21.890 --> 00:04:24.320
Go back to a code that's a sensible code.

57
00:04:25.040 --> 00:04:27.560
Postal code starts are 30, as you can see.

58
00:04:28.100 --> 00:04:33.290
And what we're doing here is we're demonstrating the three overloaded versions of collectors joining.

59
00:04:34.250 --> 00:04:40.280
You can join strings or tops which are typed to chase sequence with no delimiter, with a delimiter

60
00:04:40.490 --> 00:04:45.710
or with a delimiter and some text joint both before and after the joint string.

61
00:04:46.760 --> 00:04:47.510
So if you run this.

62
00:04:50.880 --> 00:04:53.120
You see the result in the pain.

63
00:04:54.090 --> 00:04:57.400
I want to add a poetry class student to the source for.

64
00:04:58.690 --> 00:04:59.550
Post down here.

65
00:05:01.960 --> 00:05:07.270
So this class will be used to demonstrate how to use the average operation provided by the collectors'

66
00:05:07.270 --> 00:05:08.710
class, very simple.

67
00:05:08.720 --> 00:05:14.650
Pirjo here a couple of attributes, constructor, which sets those attributes to string.

68
00:05:15.010 --> 00:05:17.980
We've got a single Geter there for our attribute.

69
00:05:18.920 --> 00:05:19.130
Right.

70
00:05:19.190 --> 00:05:25.270
So let's go back up to our mind, Mithran, some code so we can use this class except the imports.

71
00:05:28.830 --> 00:05:33.720
So in the first example, I'm getting a random storm events, as we've done in a previous video, this

72
00:05:33.720 --> 00:05:39.390
section, and then invoking the collect terminal operation, passing it, the collectors start average

73
00:05:39.390 --> 00:05:40.050
intermittent.

74
00:05:40.500 --> 00:05:46.680
In a second example, I create a stream of stewarded objects, pass it to the correct method with the

75
00:05:46.680 --> 00:05:52.530
collectors averaging double method and pass it to the method reference to the ghetto one student which

76
00:05:52.530 --> 00:05:55.140
retrieves the GPA of each student.

77
00:05:56.070 --> 00:05:56.910
Now if we run this.

78
00:06:00.060 --> 00:06:02.550
You can see the airport at the bottom of the screen there.

79
00:06:03.750 --> 00:06:06.530
So let's spend some more code to our main method.

80
00:06:08.920 --> 00:06:09.970
Except those imports.

81
00:06:16.390 --> 00:06:22.630
So this curve is demonstrating, getting statistics about a stream in its stream and a long stream provide

82
00:06:22.630 --> 00:06:24.370
methods called summary statistics.

83
00:06:24.820 --> 00:06:30.280
The collectors' class provides corresponding methods called summarizing it, summarizing double and

84
00:06:30.280 --> 00:06:32.590
summarizing long in the code.

85
00:06:32.590 --> 00:06:38.290
I'm demonstrating using the summary statistics terminal operation on an extreme Estacada line.

86
00:06:38.290 --> 00:06:40.330
Seventy three and moving on down.

87
00:06:41.460 --> 00:06:48.400
We are using to collect collectors, not summarizing it, to deter the same kind of data on a similar

88
00:06:48.400 --> 00:06:53.860
stream, and in a third example I'm using to collect with the parameter of collectors DOT summarizing

89
00:06:53.860 --> 00:06:59.240
double returns, summarizing data on the GPS of all the students passed to the street.

90
00:06:59.920 --> 00:07:00.520
That's from that.

91
00:07:03.100 --> 00:07:05.100
And we can see the output at the bottom of the screen.

92
00:07:06.240 --> 00:07:09.420
All right, so let's have some fun now with grouping and partitioning of data.

93
00:07:09.810 --> 00:07:13.060
This is where streams shine, in my opinion, first.

94
00:07:13.220 --> 00:07:17.680
What we want to do is create a class that has enough data for us to create some examples.

95
00:07:18.120 --> 00:07:21.780
So I need a new class, obviously, and we're going to call the element a top pit.

96
00:07:21.780 --> 00:07:23.630
So it's going to be obviously in its own package.

97
00:07:24.330 --> 00:07:29.910
So I'm just going to select the package in this case and call it pit, which I'll put it into that package

98
00:07:31.350 --> 00:07:32.040
postcode.

99
00:07:33.900 --> 00:07:35.130
And there's our pet class.

100
00:07:36.130 --> 00:07:42.140
So this code is a poggio, but it contains arrays of data so that a new instance will call the constructor

101
00:07:42.290 --> 00:07:45.240
and randomly populate data in the object.

102
00:07:45.560 --> 00:07:46.610
So as we scroll down there.

103
00:07:48.490 --> 00:07:49.390
He can say that code.

104
00:07:50.630 --> 00:07:55.430
So I threw in a stream to grab a small array of random numbers in the constructor and use the array

105
00:07:55.670 --> 00:07:57.740
to pick elements for each attribute.

106
00:07:58.930 --> 00:08:05.890
We've got various letters to string method there as well, unless we need to create another class so

107
00:08:05.890 --> 00:08:08.710
we can start testing this from across one stream grouping.

108
00:08:09.680 --> 00:08:11.330
So being a route source for.

109
00:08:17.130 --> 00:08:22.020
And in this country, what I'm doing is I'm printing one pen instance to the console so that you can

110
00:08:22.020 --> 00:08:28.820
see data in the pet and then creating a list of 5000 pits using stream to generate and collect it,

111
00:08:28.830 --> 00:08:29.670
then into a list.

112
00:08:30.300 --> 00:08:34.620
And I'm going to show you an example of counting the number of dogs in the list using a stream and the

113
00:08:34.620 --> 00:08:35.580
count operation.

114
00:08:36.750 --> 00:08:37.470
So it's from this.

115
00:08:38.790 --> 00:08:39.680
And there's the airport.

116
00:08:40.450 --> 00:08:45.280
So let's finish the video here and we'll continue on in the next video with this example.

117
00:08:45.690 --> 00:08:46.700
See you in the next video.
