WEBVTT
1

00:00:05.300  -->  00:00:07.330
So, let's talk about using wrapper classes,

2

00:00:07.330  -->  00:00:11.130
autoboxing, and auto unboxing in the next few videos.

3

00:00:11.490  -->  00:00:15.990
A primitive data wrapper class wraps the value of the primitive type in an object.

4

00:00:15.990  -->  00:00:19.890
So, an object of type Byte, the capital B for example,

5

00:00:20.090  -->  00:00:24.090
contains a single field whose type is the primitive data type

6

00:00:24.090  -->  00:00:25.590
byte with a lowercase b.

7

00:00:25.590  -->  00:00:28.130
So, primitive wrapper classes are used

8

00:00:28.130  -->  00:00:32.430
to create an object that represents a primitive type in the collection classes

9

00:00:32.630  -->  00:00:33.630
among other things.

10

00:00:34.030  -->  00:00:36.430
Wrapper objects are initialized to null

11

00:00:36.430  -->  00:00:40.430
if used as class members or instance members, not to the default value of the

12

00:00:40.430  -->  00:00:41.430
primitive data type.

13

00:00:42.930  -->  00:00:47.290
So, the following table lists the eight primitive data types and the corresponding wrapper,

14

00:00:47.790  -->  00:00:51.390
all but two of the wrapper classes extend java.lang.number.

15

00:00:51.690  -->  00:00:53.490
Boolean and character do not.

16

00:00:53.490  -->  00:00:55.850
Wrapper classes are final and cannot be used

17

00:00:55.850  -->  00:00:58.210
in an extends clause of another class.

18

00:00:58.810  -->  00:01:00.810
So, you can see to the left there we've got primitive type,

19

00:01:01.110  -->  00:01:02.910
Boolean, byte, char,

20

00:01:02.910  -->  00:01:05.270
short, int, long, float, and double.

21

00:01:05.270  -->  00:01:08.070
The wrapper class in the middle there which is basically the same

22

00:01:08.070  -->  00:01:11.420
in pretty much all of them other than the fact it's got a capital letter.

23

00:01:11.420  -->  00:01:14.920
The exceptions there are character, the capital C for char,

24

00:01:14.920  -->  00:01:18.820
an integer with a capital I for Int, the rest have the same name.

25

00:01:19.320  -->  00:01:22.440
And you can see over to the right hand side as I mentioned six of the eight

26

00:01:22.440  -->  00:01:25.940
extend number, the two that don’t are boolean and char.

27

00:01:25.940  -->  00:01:28.440
You can see that they both extend object.

28

00:01:30.540  -->  00:01:34.800
So autoboxing and unboxing are the terms for the automatic conversion

29

00:01:34.800  -->  00:01:37.920
that the Java compiler makes between the primitive types

30

00:01:37.920  -->  00:01:40.920
and their corresponding object wrapper classes.

31

00:01:41.520  -->  00:01:45.320
Autoboxing occurs when assigning a primitive literal or variable

32

00:01:45.320  -->  00:01:48.720
directly to a wrapper variable of the corresponding type.

33

00:01:49.120  -->  00:01:53.120
Unboxing, well, that occurs when assigning a wrapper variable or object

34

00:01:53.120  -->  00:01:56.920
directly to a primitive variable of the corresponding type.

35

00:01:58.920  -->  00:02:02.120
The Jvm autoboxes and unboxes in many situations

36

00:02:02.120  -->  00:02:03.420
but not all of them.

37

00:02:03.420  -->  00:02:07.420
I will be reviewing those exceptions in this video or one of the next few.

38

00:02:07.780  -->  00:02:11.380
Wrapper constructors have been deprecated, and are unnecessary.

39

00:02:11.380  -->  00:02:15.180
You can create instances of wrappers using a valueOf method

40

00:02:15.180  -->  00:02:16.680
and I'll also be discussing that.

41

00:02:18.040  -->  00:02:21.340
So, let's start some code now and you can see I've created a new project

42

00:02:21.340  -->  00:02:23.000
called GenericsAndCollections.

43

00:02:23.000  -->  00:02:25.800
So in that project, we need a new class here,

44

00:02:26.160  -->  00:02:29.160
we're going to call the class WrapperClassAssignments.

45

00:02:33.520  -->  00:02:37.720
All right, we'll paste in some code. All right, there's the code.

46

00:02:40.080  -->  00:02:42.880
Well, so firstly, there's two static fields which will demonstrate

47

00:02:42.880  -->  00:02:46.380
default values for a primitive Boolean and a Boolean wrapper.

48

00:02:46.380  -->  00:02:47.980
Noting that they're not the same.

49

00:02:48.480  -->  00:02:51.280
Moving on down, we've also got two instance fields

50

00:02:51.280  -->  00:02:54.880
which will demonstrate assignments that autobox and unbox.

51

00:02:55.130  -->  00:02:57.630
All right, we've got a total of three static methods here.

52

00:02:59.230  -->  00:03:01.030
Starting with these two down the bottom,

53

00:03:01.630  -->  00:03:04.630
one that accepts a Boolean parameter, that's the wrapper parameter,

54

00:03:04.990  -->  00:03:07.590
and one that accepts a Boolean primitive type parameter.

55

00:03:08.090  -->  00:03:10.690
Now, I'm purposely avoiding overloading here

56

00:03:11.090  -->  00:03:15.090
which I’ve covered extensively in my 1Z0-819 part 1 course here on Udemy.

57

00:03:15.090  -->  00:03:18.690
If you need a recap of overloading, refer to section 7 in that course

58

00:03:18.690  -->  00:03:20.990
determining which overloaded method gets called.

59

00:03:21.540  -->  00:03:25.540
So, I demonstrated that autoboxing and unboxing occur during method invocation.

60

00:03:25.740  -->  00:03:28.340
All right, then lastly, go back up to our main method.

61

00:03:29.340  -->  00:03:33.340
This demonstrates autoboxing and unboxing, as well as invoking the various methods.

62

00:03:33.340  -->  00:03:35.940
All right, so let's run that. Okay, so there's the output.

63

00:03:36.840  -->  00:03:40.340
So looking at the code in the main method, you can see that the first line of output

64

00:03:40.340  -->  00:03:44.540
was setting a wrapper variable to a Boolean variable, Boolean as in the primitive type,

65

00:03:44.740  -->  00:03:46.740
so it's demonstrating autoboxing.

66

00:03:46.740  -->  00:03:49.540
So, looking at my instance boolean with the lowercase b,

67

00:03:50.740  -->  00:03:54.240
you can see that's obviously a boolean primitive type and we're getting the value

68

00:03:54.900  -->  00:03:58.500
from Boolean the wrapper that's unboxing the value

69

00:03:58.500  -->  00:04:02.200
back to a primitive type, and we're getting the value from b wrapper variable of true.

70

00:04:02.800  -->  00:04:05.400
Moving on down, we're then setting a wrapper variable

71

00:04:05.700  -->  00:04:07.700
on line 28 to a boolean literal

72

00:04:07.700  -->  00:04:11.000
and the Jvm is autoboxing that to the boolean wrapper class.

73

00:04:11.700  -->  00:04:15.700
Third example is setting a primitive variable directly to a wrapper

74

00:04:15.700  -->  00:04:20.200
for unboxing this time because looking at my instance Boolean with a capital B this time,

75

00:04:21.900  -->  00:04:25.230
we can see that that's a wrapper which is set to false initially,

76

00:04:25.230  -->  00:04:27.230
that's why we've got false for third line of output.

77

00:04:28.830  -->  00:04:32.830
Next, we're passing a boolean primitive to a boolean and wrapper parameter

78

00:04:32.830  -->  00:04:35.330
by autoboxing. Have a look at testBoolean,

79

00:04:37.130  -->  00:04:39.430
which is that method there on line 46.

80

00:04:39.730  -->  00:04:43.630
So, you can see that's automatically converted the primitive type for boolean

81

00:04:44.030  -->  00:04:46.630
to a boolean wrapper there by autoboxing.

82

00:04:46.930  -->  00:04:50.930
The last one here, we're passing a boolean that's in a wrapper local variable

83

00:04:51.330  -->  00:04:53.930
and that's the testBoolean bWrapperVariable,

84

00:04:53.930  -->  00:04:57.530
and that's calling the testboolean with b in a lowercase function,

85

00:04:58.830  -->  00:05:02.830
which is this one here, which is obviously accepting a primitive type Boolean.

86

00:05:03.130  -->  00:05:06.530
We can just mention that. Again, I'm trying to avoid overloading the method

87

00:05:06.530  -->  00:05:09.530
because I didn't want the JVM to decide which method is invoked,

88

00:05:09.530  -->  00:05:12.530
we're doing this manually to make it really clear as to what's going on here.

89

00:05:14.730  -->  00:05:17.530
All right, so hopefully you can see that by running it the way we have.

90

00:05:17.530  -->  00:05:20.030
we've confirmed that a boolean field on a class

91

00:05:20.230  -->  00:05:24.230
is false by default. We've confirmed that any boolean literals or

92

00:05:24.230  -->  00:05:28.330
variables are also boxed when assigned to a boolean wrapper variable.

93

00:05:29.030  -->  00:05:32.430
We confirm that boolean wrapper objects and variables are unboxed

94

00:05:32.430  -->  00:05:35.420
when assigned to a boolean primitive type variable.

95

00:05:36.220  -->  00:05:39.720
Any boolean primitive type literals or variables are autoboxed

96

00:05:39.720  -->  00:05:42.920
when passed to a method with a boolean wrapper parameter,

97

00:05:43.320  -->  00:05:46.820
this assumes that there's not a better matched overloaded method.

98

00:05:46.820  -->  00:05:50.180
And finally, boolean wrapper objects or variables are unboxed,

99

00:05:50.180  -->  00:05:53.980
we're passed to a method with a boolean primitive type parameter

100

00:05:53.980  -->  00:05:56.980
and again, this assumes there's not a better matched overloaded method.

101

00:05:57.980  -->  00:06:01.970
All right, so let's make some changes to this code. We'll start by making the simple change.

102

00:06:01.970  -->  00:06:04.970
I'm going to change the first line or line 11 there,

103

00:06:04.970  -->  00:06:08.270
we're going to remove the equals true to see what the default is.

104

00:06:10.470  -->  00:06:14.460
That's now just going to be static Boolean, that's in the wrapper myStaticBoolean.

105

00:06:15.010  -->  00:06:19.010
So, so far, you can see there we've got no problems with the code, there's nothing

106

00:06:19.010  -->  00:06:21.810
showing as a compiler error, but if we run this code,

107

00:06:25.410  -->  00:06:28.010
you can see suddenly we've got an exception.

108

00:06:28.010  -->  00:06:32.010
In my case, you can see it's on line 18 and there's the error, so you can see with our null

109

00:06:32.010  -->  00:06:32.910
pointer exception

110

00:06:33.570  -->  00:06:36.570
So, the reason that we've got a null pointer exception

111

00:06:37.070  -->  00:06:40.870
here is that the myStaticBoolean variable which is a boolean wrapper

112

00:06:40.870  -->  00:06:43.470
is by default null and has no value.

113

00:06:43.470  -->  00:06:47.670
If your wrapper is null, then unboxing will generate a null pointer exception as we've seen here.

114

00:06:48.570  -->  00:06:53.240
We'll go back now and just put the initialization back in and set it back to true,

115

00:06:53.840  -->  00:06:55.840
and obviously, when we run this, this will then work again.

116

00:06:58.090  -->  00:06:59.790
All right, so let's end the video here.

117

00:06:59.790  -->  00:07:02.590
And in the next one, we're going to look at some of the many wrapper methods

118

00:07:02.590  -->  00:07:04.190
you should be familiar with.

119

00:07:04.190  -->  00:07:05.690
See you in the next video.
