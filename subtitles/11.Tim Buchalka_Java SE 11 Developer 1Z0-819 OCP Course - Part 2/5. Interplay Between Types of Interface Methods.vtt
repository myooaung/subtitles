WEBVTT
1

00:00:05.400  -->  00:00:09.200
So, I want to next review the Interplay between the Types of Interface Methods.

2

00:00:09.200  -->  00:00:12.600
Default, Private and Static methods with one another,

3

00:00:12.600  -->  00:00:13.700
and the calling code.

4

00:00:14.100  -->  00:00:16.600
So, to do that we're going to start by creating another class,

5

00:00:16.900  -->  00:00:18.500
TestPrivateInterfaceMethods,

6

00:00:27.000  -->  00:00:28.000
place the code in.

7

00:00:31.200  -->  00:00:33.800
Alright. So, we've got a simple class there, TestStatic

8

00:00:34.300  -->  00:00:36.600
with a single public static method as you can see there.

9

00:00:37.500  -->  00:00:39.520
Moving on down, we've got an interface here,

10

00:00:39.520  -->  00:00:43.820
PrivateAndDefaultTestable and that's got four concrete methods.

11

00:00:44.420  -->  00:00:48.220
The first one, a default method, doInterfaceSomethingPublic,

12

00:00:48.820  -->  00:00:50.120
this calls a private method.

13

00:00:50.520  -->  00:00:53.520
Next, we've got a private method there, doInterfaceSomethingPrivate.

14

00:00:53.820  -->  00:00:56.220
And you can see that just currently, just outputs something.

15

00:00:56.420  -->  00:00:58.720
Moving on down, we've got a public static method,

16

00:00:59.080  -->  00:01:02.980
doInterfaceSomethingPublicAndStatic, calls a private static method.

17

00:01:03.380  -->  00:01:05.980
And finally, we've got a private static method here

18

00:01:05.980  -->  00:01:08.480
called doInterfaceSomethingPrivateAndStatic.

19

00:01:09.180  -->  00:01:11.580
Then scrolling down further, we've got a public class there,

20

00:01:11.580  -->  00:01:14.080
TestPrivateInterfaceMethods, which of course, we created.

21

00:01:14.680  -->  00:01:18.980
And that's extending the TestStatic class from the top, this one up here,

22

00:01:21.280  -->  00:01:24.280
and also it implements the interface we defined,

23

00:01:24.280  -->  00:01:25.780
PrivateAndDefaultTestable.

24

00:01:28.480  -->  00:01:31.080
And it's demonstrating invoking methods on a superclass

25

00:01:31.080  -->  00:01:34.480
and interface in a static context i.e. the static main method.

26

00:01:35.180  -->  00:01:39.680
So, you can see I'm executing a static class method in a static context with andwithout

27

00:01:39.680  -->  00:01:43.580
a class qualifier and also executing a static interface method

28

00:01:43.580  -->  00:01:46.580
in a static context with an interface qualifier.

29

00:01:47.380  -->  00:01:48.680
Alright. So, if we run this code now,

30

00:01:52.280  -->  00:01:54.080
you can see that it works as expected.

31

00:01:54.680  -->  00:01:58.280
Let's append some more code to our main method, down here.

32

00:01:59.580  -->  00:02:01.020
You can see what I've done there,

33

00:02:01.020  -->  00:02:05.020
I'm trying to actually call without qualify even if the current class implements the interface,

34

00:02:05.020  -->  00:02:08.220
and the error I'm getting there, Static method may be invoked

35

00:02:08.220  -->  00:02:10.420
on containing interface class only.

36

00:02:11.020  -->  00:02:13.820
So, unlike a class, the static method on an interface

37

00:02:13.820  -->  00:02:16.320
cannot be accessed without a qualifier

38

00:02:16.320  -->  00:02:19.820
even if the current class implements the interface, which is happening here.

39

00:02:20.220  -->  00:02:23.220
So, let's try something else. I'm going to actually undo that change

40

00:02:23.420  -->  00:02:24.920
and paste in some different code.

41

00:02:25.520  -->  00:02:27.520
And you can see here with this code that I pasted in,

42

00:02:27.880  -->  00:02:30.180
both of these statements have produced a compiler-time error.

43

00:02:30.580  -->  00:02:32.980
Now the first one, if you ever heard over that, gives an interesting error,

44

00:02:34.280  -->  00:02:37.280
PrivateAndDefaultTestable is not an enclosing class.

45

00:02:37.580  -->  00:02:41.380
Hopefully, you remember from the videos in the last section on nested and inner classes

46

00:02:41.380  -->  00:02:43.780
that .super as we're using here,

47

00:02:43.780  -->  00:02:47.780
is a way to access an inner class as members from the enclosing class.

48

00:02:48.030  -->  00:02:52.330
And in the second case, we're attempting to access a non-static default method

49

00:02:52.330  -->  00:02:56.330
in a static context, and as a result,I think this error is easier to understand

50

00:02:56.330  -->  00:02:57.330
than the first one.

51

00:02:57.830  -->  00:02:59.630
Alright. So, let's undo those changes.

52

00:03:00.030  -->  00:03:02.630
I want to look at a non-static context next.

53

00:03:02.880  -->  00:03:04.680
What I'm going to do is append a method

54

00:03:04.680  -->  00:03:06.980
to the test private interface methods class,

55

00:03:06.980  -->  00:03:09.580
so this one here. I'm going to paste that in.

56

00:03:12.880  -->  00:03:14.240
Now looking at this method,

57

00:03:14.240  -->  00:03:18.440
it invokes methods on a superclass and an interface in a non-static context.

58

00:03:18.800  -->  00:03:21.560
So, we start by accessing a non-static class method

59

00:03:21.560  -->  00:03:24.860
in a non-static context with and without a class qualifier.

60

00:03:26.160  -->  00:03:29.460
Scrolling on down further, I'm executing a static interface method

61

00:03:29.460  -->  00:03:32.360
in a non-static context with a class qualifier.

62

00:03:32.860  -->  00:03:36.860
Next, I'm executing a default interface method in a non-static context

63

00:03:36.860  -->  00:03:38.160
with no qualifier.

64

00:03:38.760  -->  00:03:41.960
Then the last one, I'm executing a default interface method

65

00:03:41.960  -->  00:03:46.560
in a non-static context with an interface and using a .super qualifier.

66

00:03:46.920  -->  00:03:49.720
So let's add some code to our main method, so we can test this.

67

00:03:52.520  -->  00:03:53.520
Run the code

68

00:03:56.820  -->  00:03:58.620
and you can see the output showing on screen.

69

00:03:59.020  -->  00:04:02.680
Right, so, let's go back to our test non-static method and paste some code down the

70

00:04:02.680  -->  00:04:04.080
bottom of it.

71

00:04:07.740  -->  00:04:11.440
You can see that's caused the compiler-error, just as it had in the static method,

72

00:04:11.800  -->  00:04:15.800
you cannot call a static method on an interface without a qualifier

73

00:04:15.800  -->  00:04:18.800
in either a static or a non-static context,

74

00:04:18.800  -->  00:04:22.700
regardless of whether the current object implements the interface or not.

75

00:04:23.360  -->  00:04:27.720
And you can see that over there, Static method must be invoked on containing interface class only.

76

00:04:27.970  -->  00:04:29.470
So, let's undo that change.

77

00:04:29.830  -->  00:04:34.630
Alright. Let's see what access has permitted on the interface itself.

78

00:04:34.630  -->  00:04:37.630
We're going to do is go back up to the interface, and we're going to change

79

00:04:38.630  -->  00:04:41.930
this first default method here, doInterfaceSomethingPublic.

80

00:04:42.430  -->  00:04:45.430
So, I'm going to paste in a new version of that method.

81

00:04:47.430  -->  00:04:50.530
So, you can see what I'm doing now, I'm calling the public static method

82

00:04:50.530  -->  00:04:53.030
and the private static method directly

83

00:04:53.030  -->  00:04:55.230
within the interface's default method.

84

00:04:55.590  -->  00:04:57.390
You can see that that compiles fine.

85

00:04:57.390  -->  00:04:58.390
If we run this,

86

00:05:01.690  -->  00:05:03.690
it also executes without any problems.

87

00:05:07.290  -->  00:05:08.890
Alright, so, let's make another change now.

88

00:05:08.890  -->  00:05:13.290
We're going to change the public static method on the interface, this one down here.

89

00:05:13.590  -->  00:05:15.590
doInterfaceSomethingPublicAndStatic.

90

00:05:16.140  -->  00:05:20.240
I'm going to just replace the whole method, but essentially, we're adding another two

91

00:05:20.240  -->  00:05:21.640
codes to other methods. #

92

00:05:22.240  -->  00:05:26.240
So, basically, I've added invocations of the default method and the private instance method

93

00:05:26.490  -->  00:05:28.490
on the interface in the static method.

94

00:05:28.990  -->  00:05:30.690
Straight away, you can see we've got an error here,

95

00:05:31.390  -->  00:05:35.390
Non-static method ‘doInterfaceSomethingPublic’ be referenced from the static context,

96

00:05:36.090  -->  00:05:37.590
and same for our private method.

97

00:05:38.470  -->  00:05:42.670
So, you cannot reference default methods or private non-static methods

98

00:05:42.670  -->  00:05:44.470
from static methods on an interface.

99

00:05:45.350  -->  00:05:48.350
Alright. So, let's just undo that, change again, go back to how it was before,

100

00:05:50.050  -->  00:05:52.050
no longer any errors and the code runs.

101

00:05:52.710  -->  00:05:53.410
Alright.

102

00:05:55.960  -->  00:05:58.060
So, for the exam, it's important

103

00:05:58.060  -->  00:06:00.660
to try and remember the following rules for interface methods.

104

00:06:01.260  -->  00:06:05.860
A static method on an interface is either private if declared private or public if not,

105

00:06:05.860  -->  00:06:07.360
when public is implied.

106

00:06:07.860  -->  00:06:10.660
A static method on an interface is not inherited

107

00:06:10.660  -->  00:06:13.460
by an implementing class and can only be accessed

108

00:06:13.460  -->  00:06:15.460
using an interface type qualifier.

109

00:06:16.160  -->  00:06:19.160
Third, a static method on an interface can invoke

110

00:06:19.160  -->  00:06:21.160
private static methods on an interface,

111

00:06:21.410  -->  00:06:25.210
but it cannot invoke default or private non-static methods.

112

00:06:25.870  -->  00:06:28.530
The default method is public and not static.

113

00:06:28.530  -->  00:06:30.890
It cannot be invoked in a static context.

114

00:06:33.090  -->  00:06:37.090
The default method can invoke any other type of method, static (public or private),

115

00:06:37.450  -->  00:06:39.750
other default methods, and private methods.

116

00:06:40.110  -->  00:06:42.990
A default method can be invoked without a qualifier

117

00:06:42.990  -->  00:06:46.290
in an implementing class, but only in a non-static context.

118

00:06:46.650  -->  00:06:48.650
A default method can be invoked

119

00:06:48.650  -->  00:06:53.450
with a combination of the reference to the interface type and the .super qualifier.

120

00:06:53.850  -->  00:06:57.850
An example here is, TePrivateAndDefaultTestable.Super

121

00:06:57.850  -->  00:07:02.450
.doInterfaceSomethingPublic(), but only in a non-static context.

122

00:07:03.250  -->  00:07:06.250
And lastly, private methods on interfaces are not accessible

123

00:07:06.250  -->  00:07:08.550
to any other type or subtype.

124

00:07:09.350  -->  00:07:11.850
Alright. So, let's end the video here. And in the next one,

125

00:07:12.210  -->  00:07:15.510
we're going to be reviewing things that might crop up on the exam that looks simple,

126

00:07:15.510  -->  00:07:17.510
but are simply hard to notice.

127

00:07:17.910  -->  00:07:19.210
See you in the next video.
