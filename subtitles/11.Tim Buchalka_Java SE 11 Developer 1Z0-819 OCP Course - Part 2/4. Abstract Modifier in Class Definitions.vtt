WEBVTT
1

00:00:05.150  -->  00:00:08.020
All right, so in this video, let's
explore the behavior of an abstract

2

00:00:08.020  -->  00:00:11.669
class in contrast to the final class
we looked at in the previous video.

3

00:00:12.710  -->  00:00:15.409
We're going to start by adding
some code and we're going to add

4

00:00:15.410  -->  00:00:17.840
it to right at the end of the
source code again, the same file.

5

00:00:17.840  -->  00:00:22.700
FirstFinalTest.java - pasted the
abstract definition you can see there.

6

00:00:22.860  -->  00:00:25.100
The comment mentions, the following
class is an abstract class

7

00:00:25.100  -->  00:00:26.934
which means we MUST subclass it.

8

00:00:27.139  -->  00:00:29.399
It's incomplete in its current
form and cannot be instantiated.

9

00:00:30.830  -->  00:00:32.949
So, let's add some code
and try and do that.

10

00:00:33.439  -->  00:00:38.540
So add the code in the main method
of our FirstFinalTest class.

11

00:00:41.970  -->  00:00:44.560
You won't be surprised I hope to
find that this code doesn't compile.

12

00:00:45.620  -->  00:00:49.239
Hovering over, ExtendMeRequired is
abstract and cannot be instantiated.

13

00:00:49.540  -->  00:00:52.009
Obviously, you cannot create an
instance of an abstract class.

14

00:00:53.539  -->  00:00:55.579
All right, so let's just remove
that code I just pasted because

15

00:00:55.580  -->  00:00:56.339
we won't be needing that.

16

00:00:57.059  -->  00:00:59.700
All right, so let's explore the
abstract class just a bit more as

17

00:00:59.700  -->  00:01:02.150
a comparison to the final class.

18

00:01:03.240  -->  00:01:07.010
What I'm going to do first is add
the final modifier to the abstract

19

00:01:07.010  -->  00:01:08.779
class that we've just pasted in.

20

00:01:08.789  -->  00:01:11.110
So, we'll come up here and add final.

21

00:01:14.650  -->  00:01:17.330
You can see that by doing that, Iâ€™ve
introduced another compiler error.

22

00:01:19.840  -->  00:01:22.659
The concepts of abstract and
final are polar opposites.

23

00:01:23.010  -->  00:01:27.010
An abstract class is unfinished by
its nature and requires a subclass

24

00:01:27.429  -->  00:01:29.159
to complete its implementation.

25

00:01:29.820  -->  00:01:33.589
A final class is complete and
does not allow subclasses to alter

26

00:01:33.850  -->  00:01:35.440
or extend its implementation.

27

00:01:35.970  -->  00:01:39.399
So if you see these two modifiers
together on an exam question,

28

00:01:39.830  -->  00:01:42.600
you now know immediately that
the code doesn't compile.

29

00:01:43.530  -->  00:01:44.839
All right, so let's
remove that last change.

30

00:01:44.839  -->  00:01:46.300
I'll remove the final
clause there again.

31

00:01:47.049  -->  00:01:49.140
Now, let's extend the abstract class.

32

00:01:49.530  -->  00:01:51.160
So, we're going to paste
in the code again right at

33

00:01:51.160  -->  00:01:52.560
the end of the source file.

34

00:01:52.570  -->  00:01:54.280
Now you can see what I've done there.

35

00:01:54.930  -->  00:01:57.330
We're extending the
ExtendMeRequired class.

36

00:01:57.349  -->  00:02:00.750
You can see at the top of the
screen there and for the doSomething

37

00:02:00.759  -->  00:02:04.940
method, which was defined as final
method in line 87, note that an

38

00:02:04.980  -->  00:02:08.190
overwritten method can be modified
with the final modifier, it's

39

00:02:08.190  -->  00:02:10.270
still considered a valid override.

40

00:02:10.580  -->  00:02:14.010
So, let's actually test that
add some code in our main method

41

00:02:14.010  -->  00:02:15.300
again, and we'll test this.

42

00:02:17.670  -->  00:02:18.650
Let's run the code now.

43

00:02:23.240  -->  00:02:26.150
And we can see the last two lines
of output there, implementation

44

00:02:26.170  -->  00:02:29.170
of this method was required and
overriding ExtendMeRequired dot

45

00:02:29.210  -->  00:02:31.239
doSomethingFinally is not optional.

46

00:02:31.940  -->  00:02:35.239
And that's consistent with what
we've done down here on line

47

00:02:35.240  -->  00:02:37.189
104, the output specifically.

48

00:02:38.570  -->  00:02:41.169
All right, finally, now as a
test, we're going to make the

49

00:02:41.170  -->  00:02:44.474
MySecondExtendedClass on screen
final,

50

00:02:44.470  -->  00:02:47.080
so I'll include that, final modifier before the class definition.

51

00:02:49.250  -->  00:02:52.089
Note that we've got no compilation
errors there and that's got no

52

00:02:52.090  -->  00:02:54.119
effect on the outcome of the program.

53

00:02:55.179  -->  00:02:56.439
All right, so let's
end the video here.

54

00:02:56.440  -->  00:03:00.049
And in the next one, let's recap what
we've learnt over the last few videos.

55

00:03:00.190  -->  00:03:01.330
See you in the next video.
