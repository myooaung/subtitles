WEBVTT
1

00:00:05.300  -->  00:00:08.600
Alight.
So, let's talk about creating and using interfaces with default methods.

2

00:00:08.900  -->  00:00:12.700
Before Java 8, the only kind of method you could have on an interface

3

00:00:12.700  -->  00:00:14.200
was the abstract method.

4

00:00:14.800  -->  00:00:17.800
Because of this, any additional method added to the interface

5

00:00:17.800  -->  00:00:20.300
would force implementing classes to be refactored.

6

00:00:20.960  -->  00:00:24.060
This limited the ability of interfaces to evolve

7

00:00:24.060  -->  00:00:28.260
over time to support additional features or provide additional functionality.

8

00:00:28.620  -->  00:00:32.420
Default methods were introduced to interfaces with the release of Java 8

9

00:00:32.420  -->  00:00:35.520
for the purpose of allowing you to add new functionality

10

00:00:35.520  -->  00:00:38.320
to an existing interface, allowing it to evolve,

11

00:00:38.320  -->  00:00:41.320
without forcing refactoring of existing code.

12

00:00:41.720  -->  00:00:44.520
Default methods are sometimes also called defender methods

13

00:00:44.520  -->  00:00:46.420
or virtual extension methods

14

00:00:46.420  -->  00:00:50.720
as they were originally referred to in a 2011 paper by Brian Goetz,

15

00:00:50.720  -->  00:00:52.920
Java Language Architect, at oracle.

16

00:00:55.280  -->  00:00:58.280
You specify a default method with the ‘default’ keyword

17

00:00:58.280  -->  00:01:00.280
at the beginning of the method signature.

18

00:01:00.780  -->  00:01:03.780
Remember that all method declarations in an interface

19

00:01:03.780  -->  00:01:05.380
are implicitly public,

20

00:01:05.630  -->  00:01:07.930
and this also applies to the default method,

21

00:01:07.930  -->  00:01:11.930
so the ‘public’ modifier would be redundant, and therefore, generally omitted

22

00:01:11.930  -->  00:01:13.930
(though it could appear in an exam question).

23

00:01:14.630  -->  00:01:18.990
You cannot declare a default method with any other access modifier, protected or private.

24

00:01:19.490  -->  00:01:23.950
You cannot use synchronized or final keywords with the default method declaration.

25

00:01:24.850  -->  00:01:27.050
Alright, so let's swing back over to intellij.

26

00:01:27.450  -->  00:01:30.250
And you can see here, what I've done is I've created a new project

27

00:01:30.250  -->  00:01:32.150
with this section called InterfaceMethods.

28

00:01:32.750  -->  00:01:37.050
We're going to start by creating a new interface type named Defaultable.
Let's go ahead and do that.

29

00:01:41.050  -->  00:01:42.050
Defaultable,

30

00:01:43.350  -->  00:01:45.950
interface, doesn't really matter because I'm going to paste in the code.

31

00:01:46.350  -->  00:01:48.350
And I'll paste in the new code there.

32

00:01:49.250  -->  00:01:52.570
Alright, this code as you can see is pretty simple.

33

00:01:52.820  -->  00:01:55.320
I've declared a public interface Defaultable,

34

00:01:55.720  -->  00:01:57.920
which has a field abstractvalue of top String.

35

00:01:58.320  -->  00:02:01.320
I've also defined an abstract method called abstractMethod.

36

00:02:01.520  -->  00:02:03.820
Note here that I'm not using the ‘abstract’ keyword,

37

00:02:03.820  -->  00:02:07.820
it's only required on an abstract method declared on an abstract class.

38

00:02:08.180  -->  00:02:11.780
And I've also got a default method called defaultNotAbstractMethod

39

00:02:12.080  -->  00:02:15.180
and that does include a method body. So, if we build this code,

40

00:02:17.380  -->  00:02:19.680
you can see that build's fine. There's currently no output,

41

00:02:19.680  -->  00:02:21.380
what I want to do, now that I've built that,

42

00:02:21.380  -->  00:02:25.280
is use the Javap tool which allows us to disassemble the class file

43

00:02:25.280  -->  00:02:27.640
to look at what's been generated from this file.

44

00:02:28.340  -->  00:02:31.340
So, we're going to open a terminal session as we've done previously,

45

00:02:31.540  -->  00:02:34.040
in this folder, InterfaceMethods. So, I'm going to right-click that >

46

00:02:34.440  -->  00:02:37.740
Open in Terminal, give ourselves a bit of space to see,

47

00:02:38.140  -->  00:02:41.140
I'm going to type Javap Defaultable.

48

00:02:43.540  -->  00:02:46.900
Now looking at the output from the javap command there,

49

00:02:47.200  -->  00:02:49.500
you can see that the field I declared

50

00:02:49.500  -->  00:02:51.800
which looked like a regular old class attribute

51

00:02:51.800  -->  00:02:56.000
is a public static final constant field that's abstract value.

52

00:02:56.360  -->  00:02:59.350
And the abstract method, the body-less method here,

53

00:02:59.350  -->  00:03:02.050
is shown with both public and abstract modifiers.

54

00:03:02.650  -->  00:03:07.050
And then, we've got public default void for our defaultNotAbstractMethod that did have a body.

55

00:03:08.040  -->  00:03:10.640
Right, so now that we've seen that. Let's do something with this interface.

56

00:03:11.000  -->  00:03:15.000
What I want to do is add two packaged private classes in the same source file

57

00:03:15.300  -->  00:03:16.800
as the Defaultable interface.

58

00:03:17.200  -->  00:03:20.200
So, I'm going to exit this, go back to our code#,

59

00:03:22.000  -->  00:03:25.000
and I want to paste some new code right at the bottom

60

00:03:25.000  -->  00:03:28.800
outside of, or after the closing right curly brace

61

00:03:28.800  -->  00:03:32.300
for our interface. So, you can see what I've added here now.

62

00:03:33.700  -->  00:03:36.300
So, there's our interface, you scroll down and have a look at what I've pasted in.

63

00:03:36.900  -->  00:03:40.800
So, I've added two classes here, the first one ImplementingClass

64

00:03:41.050  -->  00:03:43.050
implements the Defaultable interface

65

00:03:43.050  -->  00:03:45.750
and overrides the abstract method we called abstractMethod.

66

00:03:46.250  -->  00:03:50.650
So, moving on, down to the next class DefaultClass that's got two methods.

67

00:03:51.050  -->  00:03:54.450
Right, so the first method down here called abstractMethod,

68

00:03:54.810  -->  00:03:57.610
takes an object of type defaultable as a parameter

69

00:03:57.610  -->  00:04:01.210
and executes the abstractMethod on the object passed as the parameter.

70

00:04:01.810  -->  00:04:03.710
The second method was our main method there,

71

00:04:04.210  -->  00:04:06.210
and that creates an instance of the current class,

72

00:04:06.810  -->  00:04:10.910
it executes the callAbstractMethod, passing it an instance of implementing class.

73

00:04:11.510  -->  00:04:15.410
And it then executes the callAbstractMethod passing at a lambda expression.

74

00:04:15.910  -->  00:04:20.210
I covered lambda expressions in my 10Z-819 Part 1 Course here on Udemy,

75

00:04:20.610  -->  00:04:23.610
refer to the Programming Abstractly through Interfaces section,

76

00:04:23.610  -->  00:04:26.110
where you'll find a number of videos about lambda expressions.

77

00:04:26.770  -->  00:04:29.070
I'll be talking a lot more about them in this course.

78

00:04:29.470  -->  00:04:32.470
I've included an example here to demonstrate the implications

79

00:04:32.470  -->  00:04:36.070
of an evolving interface to code which might unknowingly

80

00:04:36.070  -->  00:04:38.070
even be a consumer of an interface.

81

00:04:38.670  -->  00:04:40.270
Alright.
So, if we run this code now.

82

00:04:44.270  -->  00:04:45.770
We can see the output down the bottom there.

83

00:04:46.870  -->  00:04:50.230
Right, so now that we've done that, let's add an additional abstractMethod

84

00:04:50.230  -->  00:04:51.730
to the interface Defaultable.

85

00:04:54.720  -->  00:04:55.720
I'll leave that down here,

86

00:04:57.520  -->  00:05:00.120
you can see what's happened there, that's produced a compiler error.

87

00:05:00.920  -->  00:05:01.920
We have a look over here,

88

00:05:04.020  -->  00:05:06.620
and not only is the error in the ImplementingClass,

89

00:05:06.870  -->  00:05:09.670
which is an obvious derivative and needs refactoring

90

00:05:09.670  -->  00:05:13.070
but also the method invocation, using the lambda expression down here

91

00:05:13.770  -->  00:05:15.670
which is a much less obvious consumer.

92

00:05:16.170  -->  00:05:19.470
Hopefully, you'll remember that lambda expressions require an interface

93

00:05:19.470  -->  00:05:23.470
to be a functional interface and contain only one abstractMethod.

94

00:05:23.470  -->  00:05:27.830
Default methods allow you to keep this standard but offer additional functionality.

95

00:05:28.630  -->  00:05:29.750
Just to confirm the error there,

96

00:05:30.750  -->  00:05:33.750
Multiple non-overriding abstract methods found interface Defaultable.

97

00:05:34.250  -->  00:05:35.150
Back up here,

98

00:05:35.950  -->  00:05:39.250
class ImplementingClass must either be declared abstract implement the abstract

99

00:05:39.250  -->  00:05:41.450
method another abstractMethod that we just added.

100

00:05:42.050  -->  00:05:45.050
Alright.
So, let's remove this second abstractMethod

101

00:05:45.950  -->  00:05:47.950
from the Defaultable interface.

102

00:05:49.150  -->  00:05:50.450
Of course, the errors disappear.

103

00:05:52.850  -->  00:05:56.750
This was a simple example of how an interface prior to Java 8

104

00:05:57.150  -->  00:05:59.350
made evolution of the interface very difficult.

105

00:05:59.950  -->  00:06:03.250
A whole series of utility classes grew up around interfaces

106

00:06:03.250  -->  00:06:06.550
to add functionality useful to implementing classes,

107

00:06:06.550  -->  00:06:09.150
that were not possible to add to the interface itself

108

00:06:09.150  -->  00:06:11.150
in the earlier Java releases.

109

00:06:11.950  -->  00:06:14.550
Java.util.collections class is one example,

110

00:06:14.750  -->  00:06:17.350
which we'll be reviewing in a future video in this course.

111

00:06:17.350  -->  00:06:21.350
You can add new default methods without forcing implementations to be refactored.

112

00:06:21.950  -->  00:06:24.150
I've already said that the default method is public

113

00:06:24.450  -->  00:06:27.050
and can't be abstract, final, or synchronized.

114

00:06:28.850  -->  00:06:33.050
Any class implementing the interface is not required to override the method.

115

00:06:33.550  -->  00:06:36.150
Older code can ignore the new functionality,

116

00:06:36.150  -->  00:06:39.150
and future code can use or extend the functionality

117

00:06:39.150  -->  00:06:40.650
offered by the default method.

118

00:06:41.250  -->  00:06:43.550
One interesting limitation on default methods

119

00:06:43.550  -->  00:06:46.750
is that you can't declare a default method that would override

120

00:06:46.750  -->  00:06:49.950
any of java.lang.Objects public methods.

121

00:06:51.200  -->  00:06:54.800
Let's demonstrate that we're going to paste the new method here in our

122

00:06:55.050  -->  00:06:56.350
Defaultable interface.

123

00:06:57.710  -->  00:06:59.210
We're trying to override your string there.

124

00:06:59.810  -->  00:07:03.810
Default method ‘toString’ overrides a member of java.lang.Object, and it's not allowing us to do that.

125

00:07:04.010  -->  00:07:06.110
That's the reason why we've got that compiler error.

126

00:07:06.110  -->  00:07:10.410
You can't declare a default method, that's considered an override equivalent,

127

00:07:10.710  -->  00:07:14.810
with a non-private method of object because any class implementing the interface

128

00:07:14.810  -->  00:07:18.110
will inherit its own implementation of the method.

129

00:07:18.710  -->  00:07:19.710
Let's just undo that.

130

00:07:21.010  -->  00:07:25.010
So, next, let's create a base class which contains a method with the same

131

00:07:25.010  -->  00:07:28.410
signature as the default method on the interface Defaultable.

132

00:07:29.210  -->  00:07:31.610
I'm going to add the following source, I'm about to paste

133

00:07:31.610  -->  00:07:33.610
to the same source forward down the bottom here.

134

00:07:35.610  -->  00:07:39.610
You see I've created a BaseClass that has a method with the same signature default method

135

00:07:39.610  -->  00:07:41.610
in the interface, defaultNotAbstractMethod.

136

00:07:42.310  -->  00:07:44.610
If I go back up to our DefaultClass,

137

00:07:45.010  -->  00:07:47.610
I'll change that change the definition of DefaultClass

138

00:07:47.860  -->  00:07:50.260
to use the BaseClass and implement defaultable.

139

00:07:51.160  -->  00:07:52.160
I'm just going to paste that,

140

00:07:53.660  -->  00:07:56.960
so you can see there, I'm extending BaseClass and implementing defaultable.

141

00:07:57.360  -->  00:08:00.760
You can see, we've clearly got an error there. But if I now go down

142

00:08:01.360  -->  00:08:04.360
and add another method here to our DefaultClass,

143

00:08:05.960  -->  00:08:07.460
public void abstractMethod,

144

00:08:08.260  -->  00:08:10.260
you can see that the code now compiles.

145

00:08:11.560  -->  00:08:12.560
Did that surprise you?

146

00:08:13.260  -->  00:08:17.260
The Defaultable interface has a default method that has the same signature

147

00:08:17.460  -->  00:08:20.060
as the method in BaseClass defaultNotAbstractMethod.

148

00:08:20.760  -->  00:08:23.260
So, you can see we've got defaultNotAbstractMethod in BaseClass,

149

00:08:23.660  -->  00:08:27.260
and also in our interface, we've got the same on line 14.

150

00:08:28.060  -->  00:08:29.460
Our DefaultClass

151

00:08:31.360  -->  00:08:33.960
implements the interface and extends the BaseClass.

152

00:08:33.960  -->  00:08:36.460
So, why doesn't this cause a method clash?

153

00:08:37.760  -->  00:08:40.760
So, let's add some more code to the main method of DefaultClass

154

00:08:42.160  -->  00:08:45.160
up here. Let this wrote as the last line.

155

00:08:47.660  -->  00:08:49.160
Let's see what happens when we run this,

156

00:08:51.960  -->  00:08:52.860
so the output

157

00:08:54.160  -->  00:08:57.710
proves that it wasn't the interface's default method that was invoked,

158

00:08:57.710  -->  00:09:00.210
but the DefaultClasses method of the same signature.

159

00:09:00.710  -->  00:09:01.710
So why is that?

160

00:09:02.070  -->  00:09:05.870
Well, the javaagent gives precedence to the method declared in the superclass.

161

00:09:06.230  -->  00:09:09.730
If a class in the superclass chain has a declaration for a method,

162

00:09:09.730  -->  00:09:11.130
concrete or abstract,

163

00:09:11.130  -->  00:09:13.930
that has the same signature as an implemented interface

164

00:09:14.180  -->  00:09:16.180
the superclass method is used.

165

00:09:16.780  -->  00:09:19.770
Alright, so the video has gone on for long enough. So, let's end the video here.

166

00:09:20.020  -->  00:09:23.820
And in the next video, I want to pursue this line of testing a bit more.

167

00:09:24.220  -->  00:09:25.820
So, I'll see you in the next video!
