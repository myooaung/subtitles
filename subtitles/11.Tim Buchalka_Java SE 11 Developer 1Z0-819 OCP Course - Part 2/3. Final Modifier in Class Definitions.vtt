WEBVTT
1

00:00:05.420  -->  00:00:08.870
In this video, I'll be discussing
the final modifier when used

2

00:00:08.900  -->  00:00:10.440
to modify a class definition.

3

00:00:11.120  -->  00:00:13.510
So, start off by creating
a new project in IntelliJ

4

00:00:13.740  -->  00:00:14.770
called Fundamentals.

5

00:00:15.250  -->  00:00:16.409
You can see that I’ve
done that already.

6

00:00:16.869  -->  00:00:18.860
We then need to create a
new class in this project,

7

00:00:18.930  -->  00:00:20.040
which I’ll go ahead and do.

8

00:00:20.280  -->  00:00:22.540
We'll call this one First Final Test.

9

00:00:25.390  -->  00:00:27.040
Well, I'll just go to full
screen and I’m going to

10

00:00:27.070  -->  00:00:28.310
copy and paste some code in.

11

00:00:32.269  -->  00:00:34.679
Now, in terms of copying and
pasting code, I'm going to be

12

00:00:34.680  -->  00:00:36.130
doing that throughout this course.

13

00:00:36.519  -->  00:00:38.339
Exactly the same as
what I did with part1.

14

00:00:38.339  -->  00:00:41.519
And this saves you having to watch
me type in all the code, which

15

00:00:41.519  -->  00:00:43.090
obviously is of little value.

16

00:00:43.100  -->  00:00:45.630
It would just dramatically
extend the size of the course.

17

00:00:46.040  -->  00:00:48.250
So to follow along, the code
snippets that I'm copying and

18

00:00:48.250  -->  00:00:52.140
pasting are available in a single
file in the resource section

19

00:00:52.140  -->  00:00:54.269
of this video, and all videos
as you go through the course.

20

00:00:54.639  -->  00:00:58.490
It's also available as a bulk download
in the last section of the course.

21

00:00:58.560  -->  00:00:59.489
So grab that if you need to.

22

00:00:59.800  -->  00:01:02.720
And I suggest you, you copy and
paste as I’m doing and I really

23

00:01:02.720  -->  00:01:06.270
recommend that because ultimately
you will retain the knowledge of

24

00:01:06.270  -->  00:01:07.440
what you're learning in these videos.

25

00:01:07.450  -->  00:01:10.229
All right, so let's look at the
code that I’ve just pasted in here.

26

00:01:10.779  -->  00:01:14.110
The code contains two package
private classes and one public one.

27

00:01:14.800  -->  00:01:18.320
Looking at the first class there, you
can see it's called ExtendMeOptional.

28

00:01:18.720  -->  00:01:22.000
Now, it's unmodified and it's
got two methods - a public

29

00:01:22.000  -->  00:01:23.539
method and a public final method.

30

00:01:24.259  -->  00:01:25.880
Moving on down, we've got
this second class here.

31

00:01:25.880  -->  00:01:29.170
This is the final class
– ExtendMeNotAllowed, so it's obviously

32

00:01:29.170  -->  00:01:32.740
using the final modifier and that's
also got two methods - a public

33

00:01:32.740  -->  00:01:34.340
method and a public final method.

34

00:01:35.330  -->  00:01:38.509
Looking at the last class here
on screen there now, that's our

35

00:01:38.510  -->  00:01:42.199
public class that we created,
FirstFinalTest that instantiates

36

00:01:42.230  -->  00:01:45.660
two objects, one for the class
ExtendMeOptional and one for

37

00:01:45.660  -->  00:01:47.749
the final class ExtendMeNotAllowed.

38

00:01:48.250  -->  00:01:51.039
And then it's executing
both methods on each object.

39

00:01:52.380  -->  00:01:53.520
Let's execute the code.

40

00:01:55.500  -->  00:01:57.219
You can see it's produced
the output below.

41

00:01:57.700  -->  00:02:01.140
From that, we can see that a final
class isn't different in any other

42

00:02:01.140  -->  00:02:04.899
way from a non-final class when it
comes to instantiating an object

43

00:02:05.190  -->  00:02:07.050
and executing methods on the object.

44

00:02:07.860  -->  00:02:11.270
The differences with the final
modifier at both the class and the

45

00:02:11.280  -->  00:02:15.360
method declarations level apply to
the declaring class's relationship

46

00:02:15.659  -->  00:02:17.179
with the classes that extended.

47

00:02:18.350  -->  00:02:21.199
So, firstly, a final
class cannot be extended.

48

00:02:21.739  -->  00:02:23.939
So let's try and do that
and see what happens.

49

00:02:23.950  -->  00:02:27.700
So, I will paste in some code
right at the bottom of the class.

50

00:02:29.840  -->  00:02:32.280
You can see that by doing that,
we've got a compiler error.

51

00:02:32.870  -->  00:02:36.149
If we hover over that and have a
look, you can't inherit from final

52

00:02:36.149  -->  00:02:39.980
ExtendMeNotAllowed because obviously,
ExtendMeNotAllowed class was final.

53

00:02:40.570  -->  00:02:42.880
We can see the definition down
there at the bottom of the pop-up.

54

00:02:43.850  -->  00:02:46.890
So again, a final class cannot
be used in an extends clause.

55

00:02:47.740  -->  00:02:49.280
Let's copy some more code in now.

56

00:02:50.000  -->  00:02:53.379
To use the regular class and then
we'll override one of the methods.

57

00:02:54.020  -->  00:02:55.219
So, I'll paste in this code.

58

00:02:56.639  -->  00:02:59.989
You can see that that works, we're
using the ExtendMeOptional class

59

00:02:59.990  -->  00:03:02.700
now, and that the class wasn't final.

60

00:03:02.910  -->  00:03:05.190
You can see the definition
there and we're overriding

61

00:03:05.190  -->  00:03:06.299
the doSomething method.

62

00:03:06.820  -->  00:03:10.060
If we go back up to the
top there, we can see the

63

00:03:10.060  -->  00:03:11.506
doSomething method on line 12.

64

00:03:11.506  -->  00:03:17.409
All right, so let's add some code
now to our main method down here

65

00:03:17.629  -->  00:03:22.080
to instantiate the class that we
pasted at the bottom of the file.

66

00:03:22.500  -->  00:03:25.310
We can see that we're creating an
object and then we're running both

67

00:03:25.310  -->  00:03:26.810
the methods, so we'll run this now.

68

00:03:29.840  -->  00:03:32.340
Now, looking at the last
two lines of output there.

69

00:03:32.520  -->  00:03:36.889
You can see that we've successfully
overridden the doSomething method, but

70

00:03:36.890  -->  00:03:40.980
what happens now if we try to override
the doSomethingFinally method?

71

00:03:44.120  -->  00:03:46.810
And that's this one here on line
19, which is marked as final.

72

00:03:47.330  -->  00:03:48.260
So, what happens when we do that?

73

00:03:48.270  -->  00:03:51.910
We'll go down here and we'll actually
add to our MyFirstExtendedClass.

74

00:03:52.199  -->  00:03:56.430
Let's add some code below the
definition and code for doSomething.

75

00:03:58.120  -->  00:04:00.120
We've got a compiler error
- doSomethingFinally cannot

76

00:04:00.120  -->  00:04:02.510
override doSomethingFinally
in ExtendMeOptional

77

00:04:02.830  -->  00:04:04.450
overridden method is final.

78

00:04:05.239  -->  00:04:07.690
So, you can't overwrite a final
method in a class even if the

79

00:04:07.690  -->  00:04:09.910
class itself isn't declared final.

80

00:04:10.210  -->  00:04:13.410
But ExtendMeOptional obviously
wasn't declared final.

81

00:04:15.270  -->  00:04:17.370
You can see the definition
up there in line 10.

82

00:04:17.770  -->  00:04:19.940
All right, so what I'll do just
before I finish this video, I'll

83

00:04:19.940  -->  00:04:21.070
just comment out that change.

84

00:04:21.070  -->  00:04:25.580
So that the code I’m leaving is
valid if you're following along,

85

00:04:25.780  -->  00:04:27.190
and we'll end the video here now.

86

00:04:27.290  -->  00:04:30.860
And in the next one, I want to start
taking a look at abstract classes.

87

00:04:31.189  -->  00:04:32.170
See you in the next video.
