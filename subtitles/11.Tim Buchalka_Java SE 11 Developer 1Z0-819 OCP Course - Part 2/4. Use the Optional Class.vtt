WEBVTT
1
00:00:05.380 --> 00:00:11.240
The API note in the Java specification for the Java, the usual optional class is listed here.

2
00:00:11.740 --> 00:00:17.890
Optional is primarily intended for use as a method return type where there's a clear need to represent

3
00:00:17.890 --> 00:00:18.760
no result.

4
00:00:19.060 --> 00:00:21.850
And we're using now less likely to cause errors.

5
00:00:22.570 --> 00:00:25.990
A variable whose type is optional should never itself be.

6
00:00:25.990 --> 00:00:29.080
No, it should always point to an optional instance.

7
00:00:29.560 --> 00:00:31.780
Okay, so what does this mean exactly then?

8
00:00:31.780 --> 00:00:34.060
Why was this class introduced in Java eight?

9
00:00:34.060 --> 00:00:34.810
Which streams?

10
00:00:35.830 --> 00:00:38.110
Sometimes the answer really is not applicable.

11
00:00:38.770 --> 00:00:44.470
Let's say I want to calculate the grade point average GPA of a student in college, a number of representing

12
00:00:44.470 --> 00:00:46.330
how well the student is doing in his courses.

13
00:00:48.680 --> 00:00:53.390
For a new student, there would be no GPA and a numeric GPA would not be applicable.

14
00:00:53.900 --> 00:00:59.540
I could return no diploma student does not yet have a GPA, but that would prevent me from using my

15
00:00:59.540 --> 00:01:02.960
desired data type a primitive float through.

16
00:01:02.960 --> 00:01:05.080
I could use a float wrapper and return.

17
00:01:05.090 --> 00:01:12.140
No, but any coaches in the field would be tasked with checking for null or being exposed to no point

18
00:01:12.140 --> 00:01:12.680
of exception.

19
00:01:13.370 --> 00:01:19.010
I could do something ugly like give a new student a default GPA of a negative number, which would negatively

20
00:01:19.010 --> 00:01:22.480
impact calculations on GPA or zero point zero.

21
00:01:22.790 --> 00:01:26.570
But sadly, there could be a student who might claim that as their actual GPA.

22
00:01:28.630 --> 00:01:35.320
Enter optional, optional as a way of wrapping a valley that could be something tangible and defined

23
00:01:35.320 --> 00:01:40.490
or could be something not applicable, like a student's GPA when his or her first day of college.

24
00:01:41.110 --> 00:01:47.320
It's a convenience class that allows you to stop checking for no optional is empty when a value is not

25
00:01:47.320 --> 00:01:50.710
known or not yet known or value is not applicable.

26
00:01:53.070 --> 00:02:00.600
Optional has the following static factory methods empty that returns an empty, optional instance of

27
00:02:01.110 --> 00:02:07.830
with T as a parameter returns an optional describing the given non now value and of nullable with the

28
00:02:07.830 --> 00:02:11.940
perimeter of type T returns an optional describing the given value.

29
00:02:12.090 --> 00:02:15.510
If no no otherwise returns liberty optional.

30
00:02:16.350 --> 00:02:20.520
Let's bring back to our code, specifically our Stream Operations Project.

31
00:02:20.550 --> 00:02:22.050
We need to create a new class.

32
00:02:22.410 --> 00:02:24.420
We'll call this one optional tests.

33
00:02:34.730 --> 00:02:42.550
So this code A create a college student class with two attributes, name and GPA to constructors and

34
00:02:42.550 --> 00:02:47.680
some getter and setter methods, noting here that none of the code currently is checking for Noles.

35
00:02:48.230 --> 00:02:51.520
And we've got our optional test class in the main method.

36
00:02:51.970 --> 00:02:57.790
You can say that our starting off, they're creating two instances of students, one with a GPA and

37
00:02:57.790 --> 00:02:59.380
one with no GPA specified.

38
00:02:59.860 --> 00:03:01.540
We're calling the print status method.

39
00:03:02.110 --> 00:03:08.020
The student with no GPA could be a freshman or maybe a transfer student is transcripts have yet to arrive.

40
00:03:08.560 --> 00:03:15.640
And no GPA cannot should not be used to make assumptions about a student's academic level or class standing

41
00:03:15.820 --> 00:03:19.840
and then the prince status, whether they present the student's academic status.

42
00:03:20.430 --> 00:03:21.160
So let's run this.

43
00:03:25.670 --> 00:03:30.500
But you say Joe is in good standing, but Jane, we've got an exception and no point of exception on

44
00:03:30.500 --> 00:03:38.060
line 55 and looking back at our code, you see the genius that's being created using the single act

45
00:03:38.060 --> 00:03:38.690
constructor.

46
00:03:39.140 --> 00:03:44.510
And our float upper class is not initialized with a single constructor instead of Pollner exception.

47
00:03:45.840 --> 00:03:51.620
We could potentially get around this firstly by looking at our print status before we can start doing

48
00:03:51.620 --> 00:03:52.580
some now checking in there.

49
00:03:52.610 --> 00:03:54.080
So let's replace that in time effort.

50
00:03:59.780 --> 00:04:02.690
Because we've got some now checking in there now and we can run this.

51
00:04:04.420 --> 00:04:09.050
That resolves to no point of exception in this instance, but the onus of dealing with a no problem

52
00:04:09.080 --> 00:04:12.610
accepted has been pushed to all consuming code in this instance.

53
00:04:13.270 --> 00:04:15.240
So let's say what option will look like instead?

54
00:04:15.460 --> 00:04:18.700
What are we going to do is start off by going back up to our definitions at the top.

55
00:04:18.700 --> 00:04:27.130
They're going to replace our GPA attribute in college student in overwriting the definition.

56
00:04:27.910 --> 00:04:34.990
Except to hear what I'm doing is I'm setting GPA to be an optional top float and initializing it to

57
00:04:34.990 --> 00:04:41.290
an empty optional using the static method on optional empty best practice as an optional should never

58
00:04:41.290 --> 00:04:41.380
be.

59
00:04:41.380 --> 00:04:41.690
No.

60
00:04:42.430 --> 00:04:45.880
Next, we need to alter the constructor because you can say we've got an error in our two acts.

61
00:04:45.890 --> 00:04:46.450
Constructor.

62
00:04:47.740 --> 00:04:53.740
We're going to do is change it to the optional Durov and pass G.P.A. to that.

63
00:04:54.780 --> 00:05:00.060
That resolves the constructive problem that basically we're just setting the value of the item contained

64
00:05:00.060 --> 00:05:04.520
in the optional class and we need to fix the get it out to return an optional top float.

65
00:05:04.920 --> 00:05:10.080
I'm going to change that to optional type float single brackets.

66
00:05:12.580 --> 00:05:20.090
But we also need to fix our setar turns out to be instead of this total EPA, which will put this optional.

67
00:05:21.740 --> 00:05:22.970
Sort of nullable.

68
00:05:24.860 --> 00:05:32.120
And Evalu, which is G.P.A. that resolves that now, could have used optionally out of here, but the

69
00:05:32.120 --> 00:05:34.940
static method of an option will throw no positive exception.

70
00:05:35.150 --> 00:05:40.030
It's a float, GPA is null and of nullable will not allow this to work here.

71
00:05:40.760 --> 00:05:43.220
Then let's go back down to our current status method.

72
00:05:43.720 --> 00:05:45.920
Let's replace that and get rid of the null.

73
00:05:45.920 --> 00:05:48.340
Checking now going to replace the entire method again.

74
00:05:51.300 --> 00:05:52.840
That really does look nicer, doesn't it?

75
00:05:54.060 --> 00:05:55.230
So therefore, we run this code.

76
00:05:57.850 --> 00:06:01.630
It gives us the same result without any now checking in our print status.

77
00:06:02.620 --> 00:06:06.970
So what if I want to try to do this without writing a method specifically to print the status?

78
00:06:07.240 --> 00:06:09.840
And I want to ignore any students with no GPA.

79
00:06:10.750 --> 00:06:12.930
We can do that by altering the stream pipeline.

80
00:06:13.000 --> 00:06:13.780
Let's have a look at that.

81
00:06:16.200 --> 00:06:18.420
So what I'm gonna do is come sit this one out first.

82
00:06:20.410 --> 00:06:23.470
So you've got a record of that and we'll put in place in the new code.

83
00:06:26.460 --> 00:06:32.250
So the optional class has a method is present, and you saw that online, 63 separate status method,

84
00:06:32.550 --> 00:06:35.860
so is present is true when the contained item is not.

85
00:06:35.890 --> 00:06:40.050
Now you can use the docket method to retrieve the contained value, in this case, a float.

86
00:06:40.380 --> 00:06:43.110
These are ternary operator to give the correct status.

87
00:06:44.010 --> 00:06:48.300
And you can see that they're it's either in good standing or on academic probation.

88
00:06:49.080 --> 00:06:49.830
We've run this now.

89
00:06:52.090 --> 00:06:54.370
We get the result, Joe, in good standing.

90
00:06:54.790 --> 00:06:59.320
That's again, because of the filtering we're using specifically we're looking for, is that our present

91
00:06:59.320 --> 00:07:00.520
with the present method?

92
00:07:01.160 --> 00:07:05.320
There are another thing I could have done but change the filter to this one as follows.

93
00:07:06.200 --> 00:07:07.130
Coming to that line.

94
00:07:08.330 --> 00:07:13.760
And use this instead, effectively looking for not is empty instead of checking where that is present.

95
00:07:14.090 --> 00:07:15.290
That would give the same result.

96
00:07:19.420 --> 00:07:23.600
I think it's better to be testing for is present and checking for, not symptoms.

97
00:07:23.660 --> 00:07:24.950
We're going back to what it was originally.

98
00:07:25.990 --> 00:07:30.400
Either way, there you can see we've got the same result and somehow I accidentally commented out by

99
00:07:30.520 --> 00:07:31.590
the will try that again.

100
00:07:33.070 --> 00:07:37.750
Then we get the result, we should begin by using at least one of those filters, let's send the video

101
00:07:37.750 --> 00:07:40.360
here and then the next one will look at some other methods are optional.

102
00:07:40.660 --> 00:07:41.830
See you in the next video.
