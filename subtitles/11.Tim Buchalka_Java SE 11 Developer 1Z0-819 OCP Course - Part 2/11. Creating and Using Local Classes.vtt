WEBVTT
1

00:00:05.200  -->  00:00:07.200
In the last series of videos in this section,

2

00:00:07.200  -->  00:00:10.900
we've discussed the static nested class and the inner member class.

3

00:00:11.300  -->  00:00:14.800
The static nested class is declared within an enclosing class

4

00:00:15.000  -->  00:00:18.300
but is relatively independent of the enclosing class.

5

00:00:18.800  -->  00:00:20.800
The inner member class is a class member

6

00:00:20.800  -->  00:00:23.300
(meaning it's inherited by subclasses)

7

00:00:23.300  -->  00:00:26.300
and is tightly integrated with the enclosing class,

8

00:00:26.300  -->  00:00:29.800
having access to its enclosing classes instant attributes,

9

00:00:29.800  -->  00:00:33.800
and access to all methods in the closing class and its parent classes.

10

00:00:34.900  -->  00:00:38.260
In this video, I want to start out by discussing a local class.

11

00:00:38.960  -->  00:00:41.960
A local class is not a member of an enclosing class,

12

00:00:41.960  -->  00:00:45.560
but it's declared in a block of code and is typically part of a method body,

13

00:00:45.810  -->  00:00:49.310
but could also be in any block of code such as a for-loop block,

14

00:00:49.310  -->  00:00:50.510
a switch statement,

15

00:00:50.510  -->  00:00:52.510
and if clause or exception clause.

16

00:00:52.910  -->  00:00:56.910
The local class is like a local variable and does not exist

17

00:00:56.910  -->  00:00:59.910
until the code block or method body is executed

18

00:00:59.910  -->  00:01:02.710
and ceases to exist when the block completes.

19

00:01:03.410  -->  00:01:05.910
It's a disposable and convenient mechanism

20

00:01:05.910  -->  00:01:08.210
for the storage of multiple variables

21

00:01:08.210  -->  00:01:11.510
packaged with some desired behavior for the variables.

22

00:01:11.910  -->  00:01:14.210
All right, so let's swing back to our IDE,

23

00:01:15.100  -->  00:01:18.700
and what we're going to do is create a new class in the Fundamentals project we've been using.

24

00:01:18.900  -->  00:01:22.900
We're going to call this one local class example, no package name.

25

00:01:29.460  -->  00:01:30.460
Paste in some code.

26

00:01:33.460  -->  00:01:37.560
All right, so the code I've pasted in starts with a declaration of a public class,

27

00:01:37.810  -->  00:01:41.110
the local class example we created which has got two methods.

28

00:01:41.610  -->  00:01:44.110
methodWithLocalClass as you can see on screen there.

29

00:01:44.110  -->  00:01:45.550
Well, that's got a public method.

30

00:01:45.550  -->  00:01:48.850
You can see that up there on line 23 – performSomeAction -

31

00:01:49.350  -->  00:01:51.050
that just prints the name of the class.

32

00:01:51.050  -->  00:01:52.650
We've got a constructor there

33

00:01:52.650  -->  00:01:55.450
which is one argument or has one argument of top string.

34

00:01:55.450  -->  00:01:58.110
There's also a field there named name,

35

00:01:58.110  -->  00:02:00.710
which the constructor sets to the string passed to it.

36

00:02:01.110  -->  00:02:04.510
And scrolling on down, you can see we're creating multiple instances

37

00:02:04.510  -->  00:02:07.170
of the local class within the enclosing code scope,

38

00:02:07.830  -->  00:02:11.730
and then we're executing some methods on instances of the local class as well,

39

00:02:12.030  -->  00:02:14.130
then we're just accessing a field directly

40

00:02:14.130  -->  00:02:16.730
from an instance of the local class on line 41.

41

00:02:17.530  -->  00:02:21.230
All right, then the second method in our local class example class

42

00:02:21.480  -->  00:02:23.480
is just the static main method,

43

00:02:23.730  -->  00:02:26.430
which basically invokes the method with the local class method.

44

00:02:27.030  -->  00:02:28.030
All right, so if we run this now,

45

00:02:30.910  -->  00:02:34.910
you can see the output, and specifically that's demonstrating that you can create a class

46

00:02:34.910  -->  00:02:36.910
in a block of code as we've done,

47

00:02:36.910  -->  00:02:40.810
and then immediately create instances of that class and use them,

48

00:02:40.810  -->  00:02:43.810
and that's the code there within the method with local class method.

49

00:02:44.800  -->  00:02:47.800
All right, so let's make some changes now to this local class

50

00:02:47.800  -->  00:02:51.200
and what we're going to do is make the field name private.

51

00:02:52.900  -->  00:02:54.800
We're also going to make the constructor private

52

00:02:56.600  -->  00:02:59.600
and lastly, the performSomeAction method private.

53

00:03:01.700  -->  00:03:03.000
All right, so we'll run that.

54

00:03:05.400  -->  00:03:07.300
And you can see that the code compiled

55

00:03:07.300  -->  00:03:09.660
and also ran just the same as before,

56

00:03:09.660  -->  00:03:13.860
so nothing is really private from the enclosing codes point of view.

57

00:03:14.160  -->  00:03:16.040
But what about the other way around?

58

00:03:16.040  -->  00:03:19.240
Our instance and local variables in the enclosing code

59

00:03:19.240  -->  00:03:21.240
available to the inner local class.

60

00:03:21.490  -->  00:03:22.490
Well, let's test that.

61

00:03:22.890  -->  00:03:25.590
So, I'm going to create a private instance variable

62

00:03:25.990  -->  00:03:29.890
in our local class example class, private String

63

00:03:30.890  -->  00:03:32.090
defaultName,

64

00:03:32.690  -->  00:03:35.990
and set that equal to “Jane” in double-quotes because it's a string obviously.

65

00:03:36.870  -->  00:03:40.870
All right, then in the constructor for our local class, let's try and use that.

66

00:03:41.070  -->  00:03:44.470
So, I'm going to put it within this, the first line if parentheses name

67

00:03:44.770  -->  00:03:45.670
is equal to null,

68

00:03:47.870  -->  00:03:50.870
then we're going to add a code block of this.name

69

00:03:51.640  -->  00:03:54.840
equals defaultName, defaultName coming from the outer class,

70

00:03:54.840  -->  00:03:58.640
and we'll put an else around the other code in here.

71

00:04:00.840  -->  00:04:02.640
All right, so we're testing what the names nullified is.

72

00:04:02.640  -->  00:04:05.140
We're using the default name from the outer class.

73

00:04:05.390  -->  00:04:08.590
The main class defined there on line 8 or specifically,

74

00:04:08.590  -->  00:04:10.190
the default name variable on line 10.

75

00:04:10.690  -->  00:04:15.090
And now that we've done that, we need some code to test this with a null argument.

76

00:04:15.690  -->  00:04:17.090
So, let's do that right down here.

77

00:04:18.190  -->  00:04:19.190
Paste in the code

78

00:04:19.790  -->  00:04:23.290
you can see we're creating a new instance of the local class with a no

79

00:04:23.290  -->  00:04:24.290
no argument.

80

00:04:25.650  -->  00:04:27.150
We'll run it and see what happens.

81

00:04:28.950  -->  00:04:32.250
And you can see that last line of output LocalClass.name equals Jane.

82

00:04:32.500  -->  00:04:34.800
So, specifically, what we've confirmed here

83

00:04:34.800  -->  00:04:38.700
is that a local class does have access to attributes of the enclosing class,

84

00:04:38.700  -->  00:04:40.100
including private ones.

85

00:04:41.700  -->  00:04:45.300
All right, so moving on, what about local variables declared in the method?

86

00:04:46.400  -->  00:04:50.000
SO, let's go up to our method declaration at the top here,

87

00:04:50.300  -->  00:04:51.300
methodWithLocalClass.

88

00:04:51.960  -->  00:04:53.160
And we're going to add

89

00:04:54.960  -->  00:04:59.160
string or define a string variable, string defaultName

90

00:05:00.760  -->  00:05:02.460
equals “Ralph”.

91

00:05:03.860  -->  00:05:06.860
Obviously, that's the local variable in the method with local class,

92

00:05:06.860  -->  00:05:09.160
so what's going to happen when we execute that code.

93

00:05:09.520  -->  00:05:13.920
So again, looking at line 26, that's using the variable default name from the code.

94

00:05:15.620  -->  00:05:18.820
This time we can see the output, LocalClass.name equals Ralph.

95

00:05:19.420  -->  00:05:22.420
That's showing that the local class used the methods local variable

96

00:05:22.420  -->  00:05:24.420
as the default name, in this case,

97

00:05:24.670  -->  00:05:28.470
ralph instead of Jane that we saw previously before making this change.

98

00:05:28.970  -->  00:05:31.970
So, you are allowed to use local variables

99

00:05:31.970  -->  00:05:35.770
from the enclosing code segment if they are effectively final.

100

00:05:35.970  -->  00:05:38.770
Meaning that they do not change once their values are set,

101

00:05:38.770  -->  00:05:41.270
either inside the local class or out.

102

00:05:41.270  -->  00:05:44.970
So in other words, if you insert the word final in the declaration

103

00:05:45.170  -->  00:05:46.470
and the code compiles.

104

00:05:47.270  -->  00:05:50.170
So, let's change the method enclosing the local class slightly.

105

00:05:50.770  -->  00:05:53.770
So, what I'm going to do is, up here where we've defined the

106

00:05:53.770  -->  00:05:56.370
default name variable in the method, the local variable,

107

00:05:56.620  -->  00:06:00.020
the next line, we are going to put if parentheses

108

00:06:00.020  -->  00:06:03.320
this.defaultName is not equal to null.

109

00:06:06.020  -->  00:06:09.520
Then, what we're going to do is set default name equal to

110

00:06:09.520  -->  00:06:11.020
this.defaultName.

111

00:06:12.520  -->  00:06:14.920
Now, you can see by doing that, we've got a compiler error.

112

00:06:14.920  -->  00:06:18.720
If we come over here and click on it, we can see that variable

113

00:06:18.720  -->  00:06:21.720
default name is accessed from within the inner class.

114

00:06:22.420  -->  00:06:26.220
So, specifically, that error is in the constructor as you can see there.

115

00:06:27.720  -->  00:06:29.920
By adding the change that we just made the local variable

116

00:06:29.920  -->  00:06:32.520
default name is no longer effectively final,

117

00:06:32.720  -->  00:06:36.720
and the compiler won't let you reference it in the local class as we're attempting to do.

118

00:06:36.920  -->  00:06:38.420
So, let's undo that change.

119

00:06:44.220  -->  00:06:46.820
And obviously, the area disappears and we can run it again

120

00:06:47.870  -->  00:06:50.470
and get the output Ralph on the last line there.

121

00:06:50.770  -->  00:06:53.770
All right, so just some other points about a local class.

122

00:06:53.770  -->  00:06:57.770
A local class can extend other classes and implement interfaces.

123

00:06:58.220  -->  00:07:01.220
A local class cannot though have static members.

124

00:07:01.580  -->  00:07:05.380
So, let's test that. We want to actually add some static members and see what happens.

125

00:07:06.280  -->  00:07:09.280
Like I brought down here before the end of the class definition,

126

00:07:10.480  -->  00:07:13.980
paste some code in and you can see we've got some errors there right away.

127

00:07:14.880  -->  00:07:17.480
Inner classes cannot have static declarations.

128

00:07:17.840  -->  00:07:20.540
They're basically the same compiler error for all three there.

129

00:07:20.940  -->  00:07:24.240
All right, so I'll undo that again. Let's try the same thing but for enums.

130

00:07:24.240  -->  00:07:27.540
Paste in some more code. Well, actually enum and an interface.

131

00:07:28.340  -->  00:07:32.340
Same thing there, enum - inner classes come out of static declarations,

132

00:07:32.700  -->  00:07:34.000
likewise for an interface.

133

00:07:35.000  -->  00:07:37.500
Now, these are less obvious violations.

134

00:07:37.500  -->  00:07:40.000
A nested name is implied to be static

135

00:07:40.000  -->  00:07:43.300
and therefore cannot be a member of a local class or an inner class.

136

00:07:43.600  -->  00:07:46.200
Now an interface is also implicitly static.

137

00:07:46.200  -->  00:07:49.800
The compiler error for this depending on your version may be less specific.

138

00:07:49.800  -->  00:07:53.100
Here it actually just says the inner classes can have static declarations,

139

00:07:53.100  -->  00:07:55.600
it may state the interface not allowed here.

140

00:07:55.960  -->  00:07:58.960
We saw this pop up in the inner nested class example

141

00:07:58.960  -->  00:08:00.960
in a previous video in this section as well.

142

00:08:00.960  -->  00:08:05.260
A local class has the same restrictions as an inner nested class.

143

00:08:06.250  -->  00:08:07.450
Undo those changes.

144

00:08:08.250  -->  00:08:11.850
All right, next, let's try and add an attribute to the local class example

145

00:08:12.250  -->  00:08:13.750
and we'll see why shortly.

146

00:08:13.750  -->  00:08:15.750
So, go back up to local class example.

147

00:08:15.750  -->  00:08:18.750
So, add this below the definition on line 10.

148

00:08:18.750  -->  00:08:20.750
So, we're going to do a private string,

149

00:08:22.050  -->  00:08:25.050
lastName is equal to “Doe”.

150

00:08:26.710  -->  00:08:29.710
And we'll change our constructor in our local class

151

00:08:29.710  -->  00:08:32.010
outside of the else. What I'm going to do there is put

152

00:08:32.370  -->  00:08:33.370
this.name

153

00:08:34.930  -->  00:08:38.830
plus equals a space in double-quotes, in other words, plus lastName.

154

00:08:39.930  -->  00:08:41.030
Now if we run this code,

155

00:08:43.630  -->  00:08:45.330
you can see that we've got the result, Ralph Doe,

156

00:08:45.330  -->  00:08:48.930
down the bottom there, and that demonstrates again that the local class

157

00:08:48.930  -->  00:08:51.930
also has access to the enclosing classes attributes.

158

00:08:53.330  -->  00:08:57.430
Now, we can go back to the constructor and add this qualifier to the reference.

159

00:08:57.430  -->  00:09:01.730
So instead of this.name plus equals a space in double-quotes plus name,

160

00:09:01.730  -->  00:09:03.330
we'll put this.lastName.

161

00:09:04.830  -->  00:09:06.430
Noticing now that's a compiler error.

162

00:09:07.030  -->  00:09:08.530
You cannot resolve symbol in last name.

163

00:09:08.830  -->  00:09:12.130
Using this in the context of a local class constructor

164

00:09:12.130  -->  00:09:14.630
refers to an instance of the local class only.

165

00:09:14.630  -->  00:09:18.130
To access last name with a more specific qualifier

166

00:09:18.130  -->  00:09:20.730
for readability or if an attribute was shadowed,

167

00:09:21.130  -->  00:09:24.730
we use this construct that I'm going to type in, so instead of this.lastName,

168

00:09:24.930  -->  00:09:29.130
we have to use localClassName being the name of the class

169

00:09:29.130  -->  00:09:33.530
.this.lastName.
And would help if I typed it correctly.

170

00:09:34.330  -->  00:09:36.630
All right, no compiler errors and we run it

171

00:09:37.630  -->  00:09:39.130
and we get the expected output.

172

00:09:40.120  -->  00:09:41.620
All right, so let's finish the video here.

173

00:09:41.620  -->  00:09:44.420
In the next one, I want to explore some different ways

174

00:09:44.420  -->  00:09:46.420
of creating local classes.

175

00:09:46.420  -->  00:09:47.720
See you in the next video.
