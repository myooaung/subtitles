WEBVTT
1
00:00:05.270 --> 00:00:10.820
Let's talk about using comparator and the comparable interfaces, I guess the first question that comes

2
00:00:10.820 --> 00:00:13.760
to mind is why two interfaces to compare objects?

3
00:00:14.510 --> 00:00:19.910
Comparable implementations are meant to provide something called natural order for sorting and a natural

4
00:00:19.910 --> 00:00:23.210
comparison method when comparing one object with another.

5
00:00:23.750 --> 00:00:29.210
Natural order is a numerical order for numbers, alphabetical for strings or chronological order for

6
00:00:29.220 --> 00:00:29.540
dates.

7
00:00:29.540 --> 00:00:35.780
For example, the comparator interface is used to sort in other ways than the natural order if a class

8
00:00:35.780 --> 00:00:40.070
implements comparable or sword objects that don't implement comparable at all.

9
00:00:40.910 --> 00:00:43.730
I'll talk about the differences between these two interfaces in a bit.

10
00:00:43.940 --> 00:00:47.030
But for now, let's first look at the comparable interface.

11
00:00:49.160 --> 00:00:53.990
When you compare two numbers, you know what it means for one number to be greater than another number

12
00:00:54.170 --> 00:00:55.160
10 is larger than one.

13
00:00:55.170 --> 00:01:00.380
For example, you assume numbers are naturally ordered, starting with the lowest to highest.

14
00:01:00.980 --> 00:01:05.810
When there is a natural order, you implement the comparable interface, which has a compare to method,

15
00:01:06.080 --> 00:01:11.600
which returns an integer representing how an object passed to the compare to method compared to the

16
00:01:11.600 --> 00:01:12.320
current object.

17
00:01:14.160 --> 00:01:19.410
The Javadoc lame duck comparable in the face declaration is shown below, you can see public interface

18
00:01:19.410 --> 00:01:22.510
comparable to your brackets after curly prices.

19
00:01:22.510 --> 00:01:26.280
And then we've got a public event compare to passing T as a parameter.

20
00:01:26.760 --> 00:01:30.360
When you compare to objects that are equal, the result should be an integer of zero.

21
00:01:31.050 --> 00:01:36.480
A negative result means the current object is less than the arguments object, and a positive result

22
00:01:36.720 --> 00:01:40.140
means the current object is greater than the arguments object.

23
00:01:42.010 --> 00:01:48.880
So let's look at an example back in code, need a new class in our collections project because one comparable

24
00:01:48.880 --> 00:01:49.480
example.

25
00:02:02.210 --> 00:02:07.900
So this Kadhem creating two classes, firstly, Class Mattock implements the compatible interface,

26
00:02:08.240 --> 00:02:11.820
topping it with its own top is, say, smart talking angle brackets.

27
00:02:12.380 --> 00:02:18.440
This class has a field called Don't type of Top Dog Top, which is an enum defined down here.

28
00:02:21.470 --> 00:02:28.130
Moving back up to the smattered class constructor that takes a dog top and looking back at it again,

29
00:02:28.610 --> 00:02:35.210
this is a nested item which contains the doctor with an attribute smart level that represents the ranks

30
00:02:35.210 --> 00:02:37.970
of the smartest dog from one to five, where one is the smartest dog.

31
00:02:38.490 --> 00:02:39.770
Go back up to our code again.

32
00:02:40.460 --> 00:02:42.640
We've also got the requisite compared to method.

33
00:02:42.950 --> 00:02:47.660
That's of course, because we're implementing comparable it compared to method compared to the dog types

34
00:02:47.660 --> 00:02:49.220
using the smart level attribute.

35
00:02:49.490 --> 00:02:52.100
They can see the code for that starting on line twenty four.

36
00:02:52.670 --> 00:02:57.950
Most are putting out the comparison because I got a two string method there that simply prints out the

37
00:02:57.950 --> 00:03:00.380
string value of the dog type in.

38
00:03:02.240 --> 00:03:08.090
Both got our comparable example class with a main method, the main method is creating a three set of

39
00:03:08.090 --> 00:03:09.140
smart dog objects.

40
00:03:09.440 --> 00:03:15.440
Remember, that tree set is ordered by its natural order to be the smartest dog's first ever code also

41
00:03:15.440 --> 00:03:16.860
then prints out the tracer.

42
00:03:16.910 --> 00:03:17.840
So let's run this code.

43
00:03:20.950 --> 00:03:25.870
So not that the construction of the Trade Center is usually the capturable compared to method result,

44
00:03:26.020 --> 00:03:28.390
you can see there is a sort of set of dogs.

45
00:03:28.660 --> 00:03:29.860
Smartest, dumbest.

46
00:03:30.970 --> 00:03:35.560
There are more requirements to writing a class that implements comparable, a couple of which are firstly

47
00:03:35.560 --> 00:03:41.590
creating an equal method consistent with the compare to method between zero and the objects are equal

48
00:03:41.860 --> 00:03:43.810
and also creating a hash code method.

49
00:03:44.470 --> 00:03:47.890
Now, these details will not be part of the exam, so I'm not going to cover them here.

50
00:03:50.260 --> 00:03:55.440
In general, a class will implement the comparable interface, specifying its natural ordering with

51
00:03:55.450 --> 00:04:00.620
the compare to method, comparing an instance of itself with the argument of the compare to method.

52
00:04:01.150 --> 00:04:07.300
In contrast, the copyrighter interface is usually implemented on an as needed basis and compares to

53
00:04:07.300 --> 00:04:09.730
objects both passed as arguments.

54
00:04:10.090 --> 00:04:14.920
The operator interface does not have to be part of the types published contract, i.e. it does not need

55
00:04:14.920 --> 00:04:18.370
to declare an operator in the implements clause in its declaration.

56
00:04:20.350 --> 00:04:24.500
You can see that the job, Utah dot com operator interfaces declared as follows.

57
00:04:24.520 --> 00:04:28.900
We've got public interface, Co-operator Tinoco, Brackett's calibrations and we've got that compare

58
00:04:28.900 --> 00:04:32.050
method with two objects, a path to it, and it returns in it.

59
00:04:32.560 --> 00:04:38.110
So the compare method compares the two arguments past and is not dependent on an object instance in

60
00:04:38.110 --> 00:04:40.390
the comparison ipass both objects.

61
00:04:40.390 --> 00:04:44.200
You want to compare to the method which quite often is implemented with the lambda expression.

62
00:04:44.770 --> 00:04:49.720
In addition to the abstract compar method, the comparator interface provides both static and default

63
00:04:49.720 --> 00:04:52.420
methods to assist with various sorting mechanisms.

64
00:04:54.630 --> 00:04:56.700
Static methods are listed in this table on screen.

65
00:04:57.060 --> 00:05:02.550
Let's see if we've got a static method comparing sip's a function that extracts a comparable sort key

66
00:05:02.760 --> 00:05:08.340
from a type T, and the returns are comparable to the brackets that compares by that salkey comparing

67
00:05:08.340 --> 00:05:13.500
double accepts a function that extracts a double salkey from a type T and again returns the comparative

68
00:05:13.500 --> 00:05:18.780
to an angle brackets that compares by that salkey comparing it except the function that extracts.

69
00:05:18.780 --> 00:05:23.840
And it's OK from a type T and returns the cooperative to an angle brackets that compares by that.

70
00:05:23.940 --> 00:05:30.750
OK, comparing long skips a function that extracts a long salkey from a type T returns a comparator

71
00:05:30.980 --> 00:05:32.190
tinoco brackets it appears.

72
00:05:32.220 --> 00:05:32.970
Well that's OK.

73
00:05:34.780 --> 00:05:39.530
Natural order returns a copywriter that compares comparable objects in natural order.

74
00:05:40.000 --> 00:05:44.680
Those first returns are now friendly comparator that considers now to be less than nonono.

75
00:05:45.040 --> 00:05:50.890
Those last returns are no friendly comparator that considers no to be greater than Nonno in reverse

76
00:05:50.890 --> 00:05:54.550
order returns a comparator that imposes the reverse of the natural ordering.

77
00:05:56.580 --> 00:06:01.680
And looking at the default methods they're listed in this table, we've got reversed returns, a comparator

78
00:06:01.680 --> 00:06:06.960
that imposes the reverse ordering of this comparator we've got then comparing this method returns the

79
00:06:06.960 --> 00:06:12.840
lexicographical order comparator with another operator or a function that extracts a comparable salkey,

80
00:06:13.440 --> 00:06:19.050
then comparing double this method, electrico lexicographical or a comparator with a function that extracts

81
00:06:19.050 --> 00:06:20.040
a double salkey.

82
00:06:20.550 --> 00:06:24.840
Then comparing it turns the lexicographical order comparator with a function that extracts it.

83
00:06:24.840 --> 00:06:25.650
It's OK.

84
00:06:25.950 --> 00:06:30.420
And then comparing along returns a lexicographical order comparator with a function that extracts a

85
00:06:30.420 --> 00:06:31.530
long salkey.

86
00:06:32.670 --> 00:06:37.100
So I go back to our car, let's look at one more example before we in the video will create a new class

87
00:06:37.100 --> 00:06:37.400
here.

88
00:06:37.790 --> 00:06:40.190
We'll call this one comparator example.

89
00:06:50.360 --> 00:06:55.730
This code consists of two classes we've got last night, comparator, which implements the interface

90
00:06:55.730 --> 00:07:00.980
comparator string and angle brackets using generics, the campaign method looking at that.

91
00:07:02.100 --> 00:07:07.080
This overrides the abstract compar method in Co-operator and will pass names and use the last string

92
00:07:07.080 --> 00:07:13.620
in the name as the last name sorted by last name, then as second class copyrighter example, the main

93
00:07:13.620 --> 00:07:17.130
method, you can see their way of creating string array of test data.

94
00:07:18.610 --> 00:07:22.660
Remember here that you can sort a string array using a race that sort without a second argument.

95
00:07:22.930 --> 00:07:24.670
It's an example of that online 49.

96
00:07:24.680 --> 00:07:25.390
So if you run this.

97
00:07:26.830 --> 00:07:28.390
You could say that a race, that sort.

98
00:07:31.830 --> 00:07:36.960
But a second argument, thoughts using the natural order of the array past is the first argument in

99
00:07:36.960 --> 00:07:38.910
this instance, the rights sorted alphabetically.

100
00:07:39.720 --> 00:07:43.280
So let's see the video here and then the next one will use a list.

101
00:07:43.590 --> 00:07:44.700
See you in the next video.
