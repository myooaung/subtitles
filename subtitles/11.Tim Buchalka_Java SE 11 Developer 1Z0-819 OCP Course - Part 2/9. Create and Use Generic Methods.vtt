WEBVTT
1
00:00:05.300 --> 00:00:11.900
In the last few videos, we created and used generic classes whose methods may or may not have used

2
00:00:11.900 --> 00:00:18.740
the generic classes type parameters as method, parameter types or return types, you can also introduce

3
00:00:18.740 --> 00:00:25.280
generics into a method in a class, whether the class is itself generic or not, by including top parameters

4
00:00:25.280 --> 00:00:31.070
in the methods declaration, the scope of the type, parameter or parameters will be limited to the

5
00:00:31.070 --> 00:00:34.040
method where it's declared and not the entire class.

6
00:00:34.430 --> 00:00:39.890
And like top parameters at the class level type parameters that the method level can be used in both

7
00:00:39.890 --> 00:00:41.960
static and non static methods.

8
00:00:42.440 --> 00:00:46.610
So let's first compare a generic method declaration to a non generic one.

9
00:00:48.370 --> 00:00:53.620
Switching over to the official specification and it says that a method without generic types is declared

10
00:00:53.620 --> 00:00:56.410
in the following way will swing back to the slight.

11
00:00:58.630 --> 00:01:04.090
I can see that we've got a declaration, we've got a method modifier method header and method body,

12
00:01:04.600 --> 00:01:09.790
and the method header is described as the result, the method decorator and throws.

13
00:01:11.940 --> 00:01:17.670
Now for a generic method, it's the method header section, which alters slightly and it's shown as

14
00:01:17.670 --> 00:01:19.070
follows anatomy.

15
00:01:19.070 --> 00:01:21.000
Be discussing annotations later in the course.

16
00:01:21.270 --> 00:01:22.560
So you've got two parameters.

17
00:01:22.860 --> 00:01:30.070
Annotation, result, methodic Lorretta and throws at its simplest generic method may look as follows.

18
00:01:30.390 --> 00:01:38.540
So we've got a t an angle brackets t get value in parentheses t if the type and the parameter name then

19
00:01:38.550 --> 00:01:42.510
we've got curly Brice's return t semicolon within those curly braces.

20
00:01:42.900 --> 00:01:48.120
So here t an angle brackets represents the type parameter section to find in the specification.

21
00:01:50.320 --> 00:01:56.980
The top parameters are declared after the method modifiers and before the method return type an example

22
00:01:56.980 --> 00:02:01.060
with modifiers, they've got public tea and Agel brackets void.

23
00:02:01.060 --> 00:02:02.670
Do something in parentheses.

24
00:02:02.680 --> 00:02:05.650
We've got tea is in the top and lowercase t is the parameter.

25
00:02:05.650 --> 00:02:07.600
Name the left-to-right curly braces.

26
00:02:08.140 --> 00:02:09.460
To invoke a generic method.

27
00:02:09.640 --> 00:02:14.110
You can pass the type in the following way using the type argument to clear that angle.

28
00:02:14.110 --> 00:02:19.560
Brackets, as you can see there immediately prior to the method name as the example below demonstrates

29
00:02:19.660 --> 00:02:25.150
got my object dot and string in angle brackets do something parentheses and any parameters.

30
00:02:25.150 --> 00:02:29.560
In this case we've got hello, pass this a string and obviously semicolon at the end of the line.

31
00:02:31.640 --> 00:02:36.860
There are in many cases, the type can be inferred by the compiler, by the context of the code, and

32
00:02:36.860 --> 00:02:39.710
you can invoke a generic method, as he would a non generic method.

33
00:02:40.140 --> 00:02:42.460
I would discuss typing in more detail later.

34
00:02:42.840 --> 00:02:44.330
Also switching back to intelligence.

35
00:02:44.690 --> 00:02:49.000
Let's look at a generic class and a class with generic methods in a code sample.

36
00:02:49.340 --> 00:02:50.540
So we need a new class for this.

37
00:02:50.550 --> 00:02:51.590
I'm going to go ahead and create it.

38
00:02:53.870 --> 00:02:56.810
I will call this new class generic comparison.

39
00:03:05.070 --> 00:03:11.880
So the code of Pasted In consists of three classes, the first one generics class as a single type parameter

40
00:03:12.000 --> 00:03:14.560
T. So you can say in ankle brackets on line 12.

41
00:03:15.030 --> 00:03:21.420
Now, the class type parameter is used in an instance filled declaration and 15, the constructor online,

42
00:03:21.420 --> 00:03:22.050
18.

43
00:03:22.500 --> 00:03:25.280
That's used as a parameter type declaration, as you can see there.

44
00:03:26.010 --> 00:03:30.510
And then looking at line twenty five, it's an instance method return type declaration.

45
00:03:31.110 --> 00:03:36.060
But so moving on down, we've got another class here called non generic class and that's using generic

46
00:03:36.060 --> 00:03:36.570
methods.

47
00:03:36.780 --> 00:03:41.720
Although all three of these methods which are put on screen now, they all declare a type parameter

48
00:03:42.330 --> 00:03:42.620
bracket.

49
00:03:42.660 --> 00:03:46.520
As you can see, there is actually no relationship between T across methods.

50
00:03:46.830 --> 00:03:51.390
So in other words, you can pass the string to one method and an object of any other type to the other

51
00:03:51.390 --> 00:03:51.780
methods.

52
00:03:52.290 --> 00:03:57.930
So specifically, looking at these methods, we've got a constructor using type T there, line thirty

53
00:03:57.930 --> 00:03:58.350
five.

54
00:03:58.650 --> 00:04:05.280
We've got a static method using the top line forty two and in its method on line forty nine is in the

55
00:04:05.280 --> 00:04:06.150
top tier as well.

56
00:04:06.860 --> 00:04:07.790
So only that further.

57
00:04:07.800 --> 00:04:11.510
We've got another class here, generics comparison, but it's kind of made method.

58
00:04:11.880 --> 00:04:17.430
So what we're doing here is we're creating several instances of the generic class using different type

59
00:04:17.430 --> 00:04:17.970
arguments.

60
00:04:18.300 --> 00:04:22.710
We're also creating several instances of the non generic class as we scroll down a bit further, using

61
00:04:22.710 --> 00:04:28.530
different type arguments for the generic constructor, using both explicit type assignment as well as

62
00:04:28.530 --> 00:04:30.090
in third type mode.

63
00:04:31.190 --> 00:04:38.380
Of fell on down on online 74 when breaking the static general method on the non generic class with explicit

64
00:04:38.380 --> 00:04:39.220
type assignment.

65
00:04:39.430 --> 00:04:44.560
And lastly, we're invoking the generic method on the non generic class.

66
00:04:46.580 --> 00:04:49.730
They can see that they their in 67, but let's run this.

67
00:04:52.200 --> 00:04:58.530
OK, there's the output so far, but what we want to do now is we want to make a change to the generic

68
00:04:58.530 --> 00:04:59.340
instance method.

69
00:05:00.900 --> 00:05:07.170
That's why I'm here a lot, 49, and what I'm going to do is change T to you and what I'm going to do

70
00:05:07.170 --> 00:05:10.370
is actually post because I want to show you a potential problem that's going to come up.

71
00:05:12.410 --> 00:05:18.260
I'm pacing in the car, and I can see by doing this, I have produced a compiler error on the single

72
00:05:18.260 --> 00:05:21.200
argument of the method which I've left, declared Tooltip T..

73
00:05:21.710 --> 00:05:26.540
So early in the video, I said that T has no meaning outside of the methods that declare it on a non

74
00:05:26.540 --> 00:05:27.420
generic class.

75
00:05:27.590 --> 00:05:32.600
So although is declared for the other two methods, it's got no meaning for this method when we change

76
00:05:32.600 --> 00:05:33.800
the top from to you.

77
00:05:33.980 --> 00:05:37.520
So I'm just going to go back and revert the code to how it was previously.

78
00:05:41.190 --> 00:05:45.810
As I scrolling up, we're going to add some code to the generics class, and that's this one up here

79
00:05:45.810 --> 00:05:48.120
on line 12, so I'm going to play some kind of right down the bottom.

80
00:05:50.650 --> 00:05:55.930
They can say by doing that, it's resulted in two compile errors, SUB-STANDARD previously, and it

81
00:05:55.930 --> 00:06:01.630
bears repeating here that you cannot use a generic class type parameters in static field declarations

82
00:06:01.630 --> 00:06:03.580
or static method declarations.

83
00:06:05.700 --> 00:06:09.030
And you can see we're getting an everywhere generics class that this cannot be reference from a static

84
00:06:09.030 --> 00:06:09.570
context.

85
00:06:10.080 --> 00:06:10.850
So let's fix this.

86
00:06:10.860 --> 00:06:12.600
I'm going to remove the static field.

87
00:06:12.870 --> 00:06:13.980
You know, we can't do that.

88
00:06:15.550 --> 00:06:18.170
We can fix this method, a generic class static method.

89
00:06:19.210 --> 00:06:20.110
Pasting the code.

90
00:06:21.870 --> 00:06:26.800
So what I've done here is I've made a static method, a generic method declaring a top parameter T,

91
00:06:26.820 --> 00:06:29.640
as you can see there, and obviously there's no compiler errors.

92
00:06:30.060 --> 00:06:34.740
It's very important to remember that the top parameter T here, again, has no relationship to the type

93
00:06:34.740 --> 00:06:36.030
to find a base level.

94
00:06:37.450 --> 00:06:38.650
Up there on line 12.

95
00:06:39.870 --> 00:06:44.460
That would have been better for future maintainers of the code if it used a different parameter, top

96
00:06:44.460 --> 00:06:44.820
code.

97
00:06:45.120 --> 00:06:48.140
So we're going to change the references of T here to you.

98
00:06:48.810 --> 00:06:52.050
So make it clearer to future maintainers of the code.

99
00:07:00.440 --> 00:07:06.260
So what we're doing this, we're using a different parameter type to make it completely clear for future

100
00:07:06.260 --> 00:07:09.320
maintainers of the code that the tarps were defining here in line.

101
00:07:09.320 --> 00:07:14.930
Twenty nine have no relationship to the top parameter T that's used elsewhere in this class.

102
00:07:15.500 --> 00:07:15.770
All right.

103
00:07:15.770 --> 00:07:16.720
Let's end the video here.

104
00:07:16.820 --> 00:07:19.400
And in the next one, we'll look at a more advanced example.

105
00:07:19.700 --> 00:07:21.290
So we'll see you in the next video.
