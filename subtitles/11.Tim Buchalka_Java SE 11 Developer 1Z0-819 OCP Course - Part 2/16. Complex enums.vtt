WEBVTT
1

00:00:05.340  -->  00:00:08.329
All right, so moving on now, let's
look at creating class bodies for

2

00:00:08.330  -->  00:00:11.550
enum constants, but before we do
that, I want to discuss what an

3

00:00:11.570  -->  00:00:13.859
enum constant with a class body is.

4

00:00:14.639  -->  00:00:17.589
So, in a previous video in this
section of the course, I walked

5

00:00:17.590  -->  00:00:20.850
through and discussed examples
of a particular kind of inner

6

00:00:20.850  -->  00:00:22.610
class called an anonymous class.

7

00:00:23.410  -->  00:00:27.409
So as it turns out, the optional
class body of an enum constant

8

00:00:27.650  -->  00:00:31.640
implicitly defines an anonymous
class declaration that extends the

9

00:00:31.650  -->  00:00:34.400
immediately enclosing enum type.

10

00:00:36.660  -->  00:00:39.190
For example, the implicit code
creation for the declaration

11

00:00:39.190  -->  00:00:41.870
of MONDAY might look something
like this code example.

12

00:00:42.430  -->  00:00:46.229
public static final WeekDay MONDAY
equals, we've got new WeekDay and

13

00:00:46.230  -->  00:00:50.079
in parentheses some arguments for
the constructor, but the important

14

00:00:50.109  -->  00:00:52.990
thing there is the semicolon and
the code from enum constant body

15

00:00:53.359  -->  00:00:56.930
goes there, then we've got a
right curly brace and a semicolon.

16

00:00:58.880  -->  00:01:01.530
So that means that the rules
for an anonymous class are

17

00:01:01.530  -->  00:01:05.079
essentially rules for the enum
constant body block in effect.

18

00:01:05.639  -->  00:01:09.299
Namely, the body of an enum constant
cannot contain any constructors.

19

00:01:09.860  -->  00:01:12.449
Secondly, methods in the enum
constant body can be invoked

20

00:01:13.240  -->  00:01:17.600
outside the enclosing enum type,
but only if they override accessible

21

00:01:17.600  -->  00:01:21.810
methods in the enclosing enum type
by one of the following rules:

22

00:01:22.660  -->  00:01:26.590
Firstly, a method can optionally
override a concrete method in the

23

00:01:26.650  -->  00:01:29.980
enum type so that not all constants
need to override a method.

24

00:01:30.300  -->  00:01:35.490
And secondly, a method that is
abstract defined in the enum type must

25

00:01:35.490  -->  00:01:37.770
be overridden by every enum constant.

26

00:01:38.800  -->  00:01:40.230
So, hopefully, that's
not too confusing.

27

00:01:40.260  -->  00:01:41.349
Let's look at that in code.

28

00:01:41.969  -->  00:01:43.850
So let's bring it back to
our Fundamentals project.

29

00:01:44.889  -->  00:01:49.770
All right, so we're going to call this
class or this enum rather PinochleMeld

30

00:01:50.170  -->  00:01:54.830
P-I-N-O-C-H-L-E Meld
and it was an enum.

31

00:01:59.170  -->  00:02:00.879
All right, so I'm going
to paste in this code.

32

00:02:02.410  -->  00:02:06.610
Now the code I've pasted in emulates
a scorecard for a Pinochle card game.

33

00:02:07.100  -->  00:02:10.140
So firstly, you can see that it
contains a Pinochle Meld enum.

34

00:02:10.660  -->  00:02:14.120
Now, this is an enum with constants
that represents some of the card

35

00:02:14.160  -->  00:02:17.269
combinations that contribute
to making points in the game.

36

00:02:17.719  -->  00:02:19.989
I've only shown a few of
the valid combinations.

37

00:02:21.000  -->  00:02:24.550
Now each enum constant has a
score argument supported by a

38

00:02:24.550  -->  00:02:26.710
constructor in the enum body.

39

00:02:26.780  -->  00:02:29.740
You can see the constructor
there on line 23, and that

40

00:02:29.740  -->  00:02:31.570
sets a field named score.

41

00:02:32.980  -->  00:02:34.700
The field there on line 21.

42

00:02:35.200  -->  00:02:40.320
Now, one enum constant marriage has
a class body which contains a method

43

00:02:40.320  -->  00:02:44.200
that overrides the adjust score method
defined in the closing enum body.

44

00:02:44.850  -->  00:02:48.075
So, we've obviously got adjustScore
down there in line 29, and you

45

00:02:48.230  -->  00:02:52.490
can see that the marriage enum is
overriding that method on line 13.

46

00:02:52.490  -->  00:02:55.080
Now, there are times when the
score might be higher for a

47

00:02:55.080  -->  00:02:58.410
particular card combination if
the suit is trump, for example.

48

00:02:58.990  -->  00:03:00.130
See that on line 18.

49

00:03:00.610  -->  00:03:03.960
The adjustScore method will allow
the Pinochle game to account

50

00:03:03.960  -->  00:03:05.350
for differences in scores.

51

00:03:05.950  -->  00:03:09.649
And as I mentioned, also the inner
body declared the concrete method

52

00:03:09.650  -->  00:03:14.580
adjustScore there on line 29, but so
looking at our Pinochle game class

53

00:03:15.160  -->  00:03:18.753
starting on line 34, you can see that
that contains the main method and

54

00:03:18.753  -->  00:03:23.170
that main method creates an array of
Pinochle Meld, see that on line 41,

55

00:03:23.600  -->  00:03:25.690
and that represents a hand of cards.

56

00:03:26.190  -->  00:03:29.390
And looking on… scrolling on down,
you can see there that's adding up

57

00:03:29.390  -->  00:03:33.220
the score based on the combinations
defined in a hand of cards, and

58

00:03:33.220  -->  00:03:36.230
in addition, you can see that it's
calling the adjustScore method for

59

00:03:36.240  -->  00:03:38.410
each Pinochle Meld in the hand.

60

00:03:39.049  -->  00:03:40.360
All right, so if you run this code,

61

00:03:44.360  -->  00:03:46.360
we can see the output shown.

62

00:03:50.060  -->  00:03:53.340
Well, so let's now add
an abstract method to the enum body,

63

00:03:54.440  -->  00:03:57.310
which would print out the
description of the card combinations.

64

00:03:58.880  -->  00:04:04.410
So, starting by scrolling down, after
our adjustScore concrete method and

65

00:04:04.410  -->  00:04:08.250
paste that in, this is the method
now we've defined this abstract that

66

00:04:08.300  -->  00:04:09.930
each constant will need to override.

67

00:04:10.279  -->  00:04:12.420
And by doing that, you can see
we've got errors up here now.

68

00:04:13.630  -->  00:04:15.790
The compilation error is coming
up on each line where there's

69

00:04:15.790  -->  00:04:17.219
an enum constant declared.

70

00:04:17.219  -->  00:04:20.289
Now, this is because each
enum constant must implement

71

00:04:20.620  -->  00:04:23.460
the abstract method that
we've just added on line 34.

72

00:04:24.550  -->  00:04:29.020
So, what I'm going to do is basically
replace the entire, basically

73

00:04:29.020  -->  00:04:32.380
entire class body for these three.

74

00:04:32.409  -->  00:04:37.669
So, I'm just going to come down here
down to the end and place that code,

75

00:04:39.289  -->  00:04:40.500
and you can see what I've done there.

76

00:04:41.470  -->  00:04:44.359
So, you can see, we're correctly
now overriding the abstract method.

77

00:04:44.719  -->  00:04:48.043
You can see the first example there
on line 12 for Pinochle, we're

78

00:04:48.043  -->  00:04:49.429
overriding the abstract method.

79

00:04:49.979  -->  00:04:53.869
And scrolling on down for marriage,
you can see we're also overriding

80

00:04:53.869  -->  00:04:57.379
the describe method there and
likewise, for the nine of trump.

81

00:04:58.689  -->  00:05:01.639
So, now that we've done that, let's
call the describe method from the main

82

00:05:01.639  -->  00:05:03.669
method and back to our code down here.

83

00:05:05.989  -->  00:05:10.219
I'm basically going to change
this system.out.println, what

84

00:05:10.220  -->  00:05:16.198
we'll do instead, we're going to
call method on the enum constant.

85

00:05:16.198  -->  00:05:22.049
Effectively, we're going
to do points.describe.

86

00:05:23.609  -->  00:05:25.229
That's obviously going to
change the output, so let's

87

00:05:25.230  -->  00:05:26.410
run this and see what happens.

88

00:05:30.210  -->  00:05:31.750
And we can see the revised output now.

89

00:05:32.870  -->  00:05:33.980
So, clearly, that's working.

90

00:05:34.410  -->  00:05:36.530
All right, so let's make one
more change to this class.

91

00:05:37.349  -->  00:05:40.599
What I’m going to do is go back
up to our definitions again, I'm

92

00:05:40.599  -->  00:05:44.960
going to make a change just for this
Pinochle enum constant, Pinochle.

93

00:05:45.260  -->  00:05:48.430
So, I'm going to just rub
that and replace that

94

00:05:49.800  -->  00:05:51.270
the code you can see on screen now.

95

00:05:52.139  -->  00:05:55.120
You can see there's another method
there, printSomeAdditionalInfo,

96

00:05:55.599  -->  00:05:57.300
so let's go down and
try and use that method.

97

00:05:58.020  -->  00:06:01.969
We're going right down to the main
method and we'll do this just before

98

00:06:01.969  -->  00:06:05.929
the closing right curly brace from the
for statement or the for loop rather.

99

00:06:06.599  -->  00:06:09.589
And you can see the code doesn't
compile, so that confirms that

100

00:06:09.799  -->  00:06:12.889
although it's permissible to declare
public methods in an enum constant

101

00:06:12.889  -->  00:06:20.515
that we're doing there up here on line
17, the only way you can use that code

102

00:06:20.515  -->  00:06:24.720
from outside of the enum is to declare
an accessible method in the enum body,

103

00:06:24.720  -->  00:06:28.210
and obviously we didn't do that for
the printSomeAdditionalInfo method.

104

00:06:29.480  -->  00:06:32.759
So, as you can hopefully see now with
this video, you can see that an enum

105

00:06:32.790  -->  00:06:34.929
can get as complicated as any class.

106

00:06:37.199  -->  00:06:40.010
A few things to remember
for the exam about enums.

107

00:06:40.510  -->  00:06:45.549
The enum constants list must precede
any code in the enum body and if

108

00:06:45.550  -->  00:06:49.100
there is an enum body, the constants
list must end in a semicolon.

109

00:06:49.780  -->  00:06:53.080
Secondly, an abstract method
defined in the enum body must be

110

00:06:53.119  -->  00:06:55.460
implemented by every enum constant.

111

00:06:56.120  -->  00:07:00.120
Third, enum constants cannot define
constructors in their own class body

112

00:07:00.120  -->  00:07:03.000
but can use constructors
from the enum class body.

113

00:07:05.100  -->  00:07:07.750
Remember that enum constants
can use different constructors.

114

00:07:08.610  -->  00:07:11.959
Also, remember that any method
which will be invoked using the enum

115

00:07:12.009  -->  00:07:16.160
constant which is declared in the
enum constant body must override

116

00:07:16.160  -->  00:07:18.030
accessible methods in the enum body.

117

00:07:18.960  -->  00:07:21.774
All right, lastly, other methods
can be declared in the enum constant

118

00:07:22.179  -->  00:07:26.090
body for use within the anonymous
class of the constant, but will not

119

00:07:26.090  -->  00:07:28.310
be accessible outside of the enum.

120

00:07:28.820  -->  00:07:31.550
All right, so we've covered
quite a lot in the videos in

121

00:07:31.550  -->  00:07:32.510
this section of the course.

122

00:07:32.790  -->  00:07:33.950
Let's move on to the next video.

123

00:07:33.950  -->  00:07:37.250
We're going to start discussing some
out of ordinary items that you need

124

00:07:37.250  -->  00:07:39.849
to know which may crop up in the exam.

125

00:07:40.179  -->  00:07:41.500
See you in the next video.
