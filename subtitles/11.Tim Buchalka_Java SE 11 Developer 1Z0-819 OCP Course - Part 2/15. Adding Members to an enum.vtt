WEBVTT
1

00:00:05.220  -->  00:00:07.150
Let’s explore enums in more detail.

2

00:00:07.970  -->  00:00:11.400
So, because an enum is a class, it can
have all the members a class can have,

3

00:00:11.700  -->  00:00:16.089
such as: fields, methods, constructors
[but constructors here can only have

4

00:00:16.109  -->  00:00:20.350
private or package-private modifiers],
also inner classes, interfaces, and

5

00:00:20.350  -->  00:00:22.480
nested enums can be part of an enum.

6

00:00:23.190  -->  00:00:24.900
So, let's start looking
at some of this.

7

00:00:25.009  -->  00:00:27.520
What I'm going to do is create a new
class in our Fundamentals project.

8

00:00:28.099  -->  00:00:31.420
Let's call this one
ComplexEnumExample.

9

00:00:41.970  -->  00:00:43.930
All right, so that's the
code that I've added.

10

00:00:43.930  -->  00:00:45.910
You can see that I’ve still
got an enum which represents

11

00:00:45.910  -->  00:00:46.860
the days of the week.

12

00:00:47.259  -->  00:00:48.990
This time, I've called it weekdays.

13

00:00:49.469  -->  00:00:53.890
I've followed each enum constant
with a parentheses encased list

14

00:00:53.890  -->  00:00:56.890
of values, which should match
the arguments on one of the

15

00:00:56.910  -->  00:00:59.699
constructors defined and noting
that I have got constructors there.

16

00:01:00.360  -->  00:01:03.220
By getting back to my list, I've
entered the list of constants

17

00:01:03.250  -->  00:01:05.609
with a semicolon on line 17 there.

18

00:01:05.830  -->  00:01:06.899
Now, this is important.

19

00:01:07.210  -->  00:01:10.579
This is required if your enum
class contains additional code

20

00:01:10.580  -->  00:01:13.870
or members, such as: fields,
constructors, methods, etc.

21

00:01:14.610  -->  00:01:18.755
So, moving down, I've actually
defined two fields, lines 20 and

22

00:01:18.860  -->  00:01:23.050
21, abbreviation, and description
which our constructor or constructors

23

00:01:23.099  -->  00:01:26.250
populate assigning a default
value to the description field.

24

00:01:27.190  -->  00:01:29.109
And we can see the two
constructors there.

25

00:01:29.330  -->  00:01:31.450
And speaking of those two
constructors, you can see that

26

00:01:31.920  -->  00:01:35.289
they accept the parameters passed
after the constant declarations,

27

00:01:36.140  -->  00:01:39.780
and you can see those up there
being used on lines 11 through 17.

28

00:01:40.679  -->  00:01:43.310
Note here that different constants
can use different constructors

29

00:01:43.349  -->  00:01:46.050
and we're doing that, some of them
have got two arguments there, and

30

00:01:46.050  -->  00:01:47.540
some of them are only using one.

31

00:01:47.840  -->  00:01:52.030
As you can see on line 16, Friday's
using the single argument constructor

32

00:01:52.270  -->  00:01:54.770
while all the other days are using
the two-argument constructor.

33

00:01:55.259  -->  00:01:56.920
And scrolling down to the
bottom, we've got our public

34

00:01:56.920  -->  00:02:00.289
class ComplexEnumExample, and
that's just looping through the

35

00:02:00.300  -->  00:02:03.410
enum values and accessing the
attributes, abbreviation, and

36

00:02:03.410  -->  00:02:06.180
description on each enum constant.

37

00:02:06.650  -->  00:02:07.930
All right, so let's run the code.

38

00:02:13.670  -->  00:02:16.719
And you can see that it's produced
a similar result from the last

39

00:02:16.719  -->  00:02:20.505
video, but the details of the
enum constants are stored with the

40

00:02:20.540  -->  00:02:24.559
enum constants themselves using
constructors and enum attributes.

41

00:02:25.400  -->  00:02:28.329
All right, so the next thing I want
to do now is I want to add a method

42

00:02:28.330  -->  00:02:33.090
to the weekdays, EnumBody, inserting
some code which I’m about to paste in.

43

00:02:34.230  -->  00:02:36.390
Now, the code we're pasting in
it should be after the second

44

00:02:36.390  -->  00:02:37.920
constructor here on line 31.

45

00:02:38.330  -->  00:02:39.490
I'm going to paste that in.

46

00:02:42.279  -->  00:02:44.390
And this method of looking
at it just prints additional

47

00:02:44.390  -->  00:02:46.090
text about the enum constant.

48

00:02:47.070  -->  00:02:50.260
Now, I want to call this method
I’ve created print type in the main

49

00:02:50.260  -->  00:02:54.209
method for each constant, so I need
to change the main method to do that.

50

00:02:54.790  -->  00:02:57.670
So, what I'm going to do is
just paste in some new code to

51

00:02:57.670  -->  00:02:59.639
replace this existing for loop.

52

00:03:01.490  -->  00:03:03.970
So, you can see what we're doing
now, we've changed the for loop

53

00:03:03.980  -->  00:03:07.560
slightly, but we're also now executing
the method that we've created

54

00:03:07.560  -->  00:03:10.000
print type on line 54 on the enum.

55

00:03:10.530  -->  00:03:11.760
All right, so let's run this.

56

00:03:16.410  -->  00:03:17.640
Okay, and there we go.

57

00:03:18.290  -->  00:03:20.160
All right, so let's end the
video here for this one.

58

00:03:20.950  -->  00:03:23.490
In the next video, what I want to
do is start looking at creating

59

00:03:23.490  -->  00:03:26.240
class bodies for enum constants.

60

00:03:26.670  -->  00:03:27.930
See you in the next video.
