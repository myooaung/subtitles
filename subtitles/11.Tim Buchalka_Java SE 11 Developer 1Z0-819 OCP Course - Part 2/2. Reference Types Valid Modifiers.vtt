WEBVTT
1

00:00:05.720  -->  00:00:08.355
So, let's start out now by
reviewing the valid modifiers for

2

00:00:08.710  -->  00:00:12.659
the three reference types, namely
[class, interface, and enum].

3

00:00:13.139  -->  00:00:16.050
We'll be talking about them quite
a bit over the next few videos.

4

00:00:16.709  -->  00:00:19.380
So, the following are the access
modifiers valid for the three

5

00:00:19.380  -->  00:00:22.830
reference types, again, [class,
interface, and enum]: If a type's

6

00:00:22.830  -->  00:00:25.480
got the public modifier, its
source must be saved in a file

7

00:00:25.480  -->  00:00:27.169
with the type name and extension.

8

00:00:27.800  -->  00:00:29.919
Protected is only valid
for the nested type.

9

00:00:30.230  -->  00:00:31.620
Private is only valid for nested type.

10

00:00:32.320  -->  00:00:35.180
And where there's no modifier,
its package-private is implied.

11

00:00:37.000  -->  00:00:39.690
Now, the other modifiers for
a reference type, so let's

12

00:00:39.770  -->  00:00:41.150
look at abstract first.

13

00:00:41.420  -->  00:00:44.070
From a classes point of view,
remember that an abstract class is

14

00:00:44.070  -->  00:00:46.720
an incomplete or unfinished class.

15

00:00:46.980  -->  00:00:50.589
Declaring a class abstract means
it's intended to be extended by a

16

00:00:50.739  -->  00:00:54.990
subclass and it's abstract methods
implemented by the subclass.

17

00:00:54.990  -->  00:00:57.940
As a result, you cannot
instantiate an abstract class.

18

00:00:58.490  -->  00:01:01.380
From an interface point of
view, it's redundant to use this

19

00:01:01.420  -->  00:01:03.110
modifier but not a compiler error.

20

00:01:03.400  -->  00:01:06.730
And for an enum, it's not allowed
to use the abstract modifier.

21

00:01:07.469  -->  00:01:10.559
Moving on to the static modifier,
from a class perspective, well, it's

22

00:01:10.559  -->  00:01:12.389
not valid for a top level class.

23

00:01:12.969  -->  00:01:16.330
We're going to be discussing this much further
in an upcoming video on nested classes.

24

00:01:17.220  -->  00:01:21.020
From an interface perspective, it's
not valid for a top level interface

25

00:01:21.130  -->  00:01:24.479
and it's redundant for inner
interfaces but not a compiler error.

26

00:01:24.850  -->  00:01:27.850
And from an enum, it is not
valid for a top level enum

27

00:01:27.850  -->  00:01:31.350
and it's redundant for nested
enums but not a compiler error.

28

00:01:33.380  -->  00:01:37.030
Final modifier – well, this modifier
from a classes perspective is the

29

00:01:37.050  -->  00:01:39.130
opposite of the abstract modifier.

30

00:01:39.800  -->  00:01:42.610
Its definition is complete
and subclasses are not only

31

00:01:42.610  -->  00:01:44.670
not necessary but undesired.

32

00:01:45.900  -->  00:01:49.070
From an interface perspective,
it's not valid for any interface

33

00:01:49.430  -->  00:01:50.720
to use the final modifier.

34

00:01:51.020  -->  00:01:54.270
And for enum, it is not valid for
any enum to use the final modifier.

35

00:01:55.119  -->  00:02:00.480
Lastly, strictfp – well, this modifier
makes any expression using float and

36

00:02:00.509  -->  00:02:06.080
double variables defined in the class
or any subtype of the class FP-strict.

37

00:02:06.090  -->  00:02:09.850
All right, so if I swing over to
a browser now and paste in a link.

38

00:02:11.450  -->  00:02:16.035
You can review all the information
and rules for FP-strict on this page.

39

00:02:16.270  -->  00:02:17.900
The link is in the resources section.

40

00:02:19.480  -->  00:02:22.079
So to get back to the slides,
strictfp from an interface's

41

00:02:22.400  -->  00:02:27.519
perspective is applicable for any
interface, and likewise for an enum,

42

00:02:27.800  -->  00:02:29.570
it's also applicable for any enum.

43

00:02:31.600  -->  00:02:34.950
Now the industry standard for
declaring multiple modifiers is to

44

00:02:34.950  -->  00:02:36.989
list them in the order shown above.

45

00:02:37.059  -->  00:02:40.549
In other words, first the access
modifier, followed by zero or

46

00:02:40.570  -->  00:02:41.940
many of the other modifiers.

47

00:02:42.510  -->  00:02:46.519
This is not a requirement and you can
see them in any order on the exam.

48

00:02:46.519  -->  00:02:49.035
Plus, it's also not a compiler error.

49

00:02:49.035  -->  00:02:52.271
So, it's important to understand
the differences between standard

50

00:02:52.271  -->  00:02:54.270
practice and compiler errors.

51

00:02:54.750  -->  00:02:57.090
The exam will test you
on the compiler errors.

52

00:02:59.200  -->  00:03:01.910
So moving on down, the following
class declarations for top level

53

00:03:01.920  -->  00:03:04.070
classes are compiler errors.

54

00:03:04.130  -->  00:03:07.680
And I've got the code sample and the
description as to why it's an error.

55

00:03:08.059  -->  00:03:11.450
Firstly, private final class
test left to right curly braces.

56

00:03:11.679  -->  00:03:15.750
The private access modifier is not
valid for a top level class, any other

57

00:03:15.750  -->  00:03:17.979
modifiers or code can be ignored.

58

00:03:18.320  -->  00:03:19.520
So, if you see that in an exam.

59

00:03:19.950  -->  00:03:23.750
Next, protected abstract class test
left to right curly braces – well,

60

00:03:23.750  -->  00:03:27.329
the protected access modifier is
not valid for a top level class, any

61

00:03:27.340  -->  00:03:29.820
other modifier or code can be ignored.

62

00:03:30.410  -->  00:03:34.189
final abstract class tests left to
right curly braces - the modifier's

63

00:03:34.199  -->  00:03:37.750
final and abstract are incompatible,
so thus this is a compile error.

64

00:03:38.330  -->  00:03:41.520
static final class test left to
right curly braces – well, the

65

00:03:41.530  -->  00:03:44.829
static modifier is not valid
for a top level class, any other

66

00:03:44.830  -->  00:03:46.870
modifier or code can be ignored.

67

00:03:47.290  -->  00:03:51.230
And the last one there, final
public final class test left to

68

00:03:51.230  -->  00:03:54.349
right curly braces - modifiers
cannot be duplicated and that's a

69

00:03:54.360  -->  00:03:55.720
reason why that's a compiler error.

70

00:03:57.580  -->  00:04:01.170
So moving on to valid class
declarations, here's three samples.

71

00:04:01.440  -->  00:04:05.199
Firstly, strictfp final public
class test left to right curly

72

00:04:05.200  -->  00:04:08.420
braces - this is fine, in
other words, no compiler error.

73

00:04:08.900  -->  00:04:10.829
Although, industry standard
would have you declare it as

74

00:04:10.850  -->  00:04:14.609
public final strictfp class
test left to right curly braces.

75

00:04:15.400  -->  00:04:19.209
Next final class test left to
right curly braces - package

76

00:04:19.230  -->  00:04:20.229
private final class is fine.

77

00:04:20.229  -->  00:04:25.259
And the last one, abstract public
class test left to right curly

78

00:04:25.259  -->  00:04:28.969
braces - this isn't a compiler
error, the declaration is fine.

79

00:04:28.969  -->  00:04:32.940
Although, the industry standard would
be defined as public abstract class

80

00:04:32.960  -->  00:04:34.960
test left to right curly braces.

81

00:04:35.880  -->  00:04:37.130
Right, so let's end the video here.

82

00:04:37.140  -->  00:04:39.040
In the next one, we'll
get into some coding.

83

00:04:39.490  -->  00:04:40.720
See you in the next video.
