WEBVTT
1

00:00:05.400  -->  00:00:07.900
All right, so continuing on from the previous video,

2

00:00:08.200  -->  00:00:10.300
let's throw a local variable into the mix.

3

00:00:10.700  -->  00:00:13.700
So, what we want to do is replace this getOuterName method

4

00:00:13.700  -->  00:00:17.500
that we replaced in the last video with the code I'm about to paste in.

5

00:00:19.400  -->  00:00:23.000
You can see what's happened there, I've created a local variable outer name

6

00:00:23.000  -->  00:00:27.400
created in the getOuterName method which shadows the inner classes field

7

00:00:27.400  -->  00:00:28.300
outer name.

8

00:00:28.700  -->  00:00:31.800
All three variables are then returned from the method,

9

00:00:31.800  -->  00:00:34.800
that's the local variable you can see defined in the method

10

00:00:35.160  -->  00:00:38.370
and also the one that's actually defined in this inner class.

11

00:00:39.670  -->  00:00:43.170
You see that on line 54, as well as the one that we've defined up here

12

00:00:43.570  -->  00:00:44.570
on line 19.

13

00:00:46.870  -->  00:00:51.070
So basically, all are returned as a string on line 46.

14

00:00:51.070  -->  00:00:52.070
So, if we run this now,

15

00:00:56.070  -->  00:00:59.370
you can see our output is now local_outerName outer

16

00:00:59.370  -->  00:01:03.670
and e’s instance and then the same for the next line but with f's instance as well.

17

00:01:04.270  -->  00:01:07.370
So, the lesson here is to be very careful when reviewing

18

00:01:07.370  -->  00:01:11.610
code samples on the exam to understand the scope of a variable

19

00:01:11.610  -->  00:01:14.910
being referenced when only a simple name is used.

20

00:01:17.310  -->  00:01:20.310
All right, so let's summarize what we've talked about in the last few videos.

21

00:01:21.010  -->  00:01:24.910
Firstly, an inner member class can't exist without an instance

22

00:01:24.910  -->  00:01:27.310
of the enclosing class existing first.

23

00:01:27.710  -->  00:01:31.510
Secondly, you can directly create an instance of the inner member class

24

00:01:31.510  -->  00:01:34.810
using the new operator on the enclosing instance as shown

25

00:01:35.110  -->  00:01:38.370
that was the e.new InnerMemberClass parentheses

26

00:01:38.370  -->  00:01:40.670
that you saw in the code a few videos ago,

27

00:01:40.670  -->  00:01:43.570
and that's where e is an instance of the enclosing class.

28

00:01:44.070  -->  00:01:47.070
You cannot have any static members on the inner member class,

29

00:01:47.320  -->  00:01:49.620
this includes enums and interfaces.

30

00:01:50.220  -->  00:01:52.520
There is one exception to this rule that we saw,

31

00:01:52.520  -->  00:01:55.020
a constant can be declared on an inner member class.

32

00:01:56.820  -->  00:02:01.220
You cannot reference an inner class like an attribute of the enclosing class.

33

00:02:01.420  -->  00:02:05.420
All access to an inner class must be through an instance of the outer class.

34

00:02:06.080  -->  00:02:09.280
An eclosing classes members can be referenced

35

00:02:09.280  -->  00:02:11.280
with a simple name in the inner class.

36

00:02:11.280  -->  00:02:15.580
Alternatively, an enclosing class's members can be referenced

37

00:02:15.580  -->  00:02:18.580
with the class reference and ‘this’ keyword as showing.

38

00:02:18.580  -->  00:02:22.180
And the example was EnclosingClass.this.outerName that you saw.

39

00:02:22.680  -->  00:02:24.980
And finally, the inner class can shadow

40

00:02:24.980  -->  00:02:27.280
an enclosing class’s attributes

41

00:02:27.280  -->  00:02:30.480
and the local variable and method on the inner class can shadow both an

42

00:02:30.480  -->  00:02:34.880
inner class's attribute and/or the enclosing class’s attribute.

43

00:02:36.870  -->  00:02:39.570
I want to pause here for a moment and review these two types of nested

44

00:02:39.570  -->  00:02:44.570
classes side by side that we'll be looking at over the last number of videos.

45

00:02:44.770  -->  00:02:48.070
Firstly, the statement - Basically the same as top level class,

46

00:02:48.070  -->  00:02:50.670
just referenced using the enclosing class type

47

00:02:50.670  -->  00:02:52.670
is true for a static nested class,

48

00:02:53.170  -->  00:02:56.170
but false for an inner member class, not static in other words.

49

00:02:56.570  -->  00:03:00.570
The next statement - Static members permitted on nested class is true

50

00:03:00.820  -->  00:03:02.320
for a static nested class,

51

00:03:02.320  -->  00:03:05.020
false for an inner member class with the exception of constants.

52

00:03:05.680  -->  00:03:09.680
The statement - To instantiate you must first instantiate the outer class

53

00:03:09.680  -->  00:03:13.680
is false for a static nested class and true for an inner member class.

54

00:03:14.380  -->  00:03:17.380
The statement - Has direct access to the enclosing object's

55

00:03:17.380  -->  00:03:20.880
instance methods and fields is false for a static nested class

56

00:03:20.880  -->  00:03:22.580
and true for an inner member class.

57

00:03:24.380  -->  00:03:28.280
The statement - All access modifiers are available (public, private, protected, none,

58

00:03:28.380  -->  00:03:32.040
and package-private) is true for both a static nested class

59

00:03:32.040  -->  00:03:33.640
and an inner member class.

60

00:03:33.640  -->  00:03:36.740
The statement - All other modifiers are available (abstract,

61

00:03:36.740  -->  00:03:40.100
final, or strictfp) is true for a static nested class,

62

00:03:40.100  -->  00:03:43.800
noting that final and abstract cannot be combined as we've talked about previously,

63

00:03:44.200  -->  00:03:47.800
it's also true for an inner member class, and again final and abstract cannot be combined.

64

00:03:48.200  -->  00:03:51.000
And lastly, the statement - Nested classes can contain

65

00:03:51.000  -->  00:03:53.360
nested classes of either type is true

66

00:03:53.360  -->  00:03:54.960
for a static nested class,

67

00:03:54.960  -->  00:03:57.960
it's false for an inner member class because an inner class

68

00:03:57.960  -->  00:04:01.960
cannot have any static attribute, including a static nested class.

69

00:04:02.760  -->  00:04:06.020
So as I stated earlier, there are three types of inner classes,

70

00:04:06.020  -->  00:04:08.220
the inner class member which we've covered,

71

00:04:08.220  -->  00:04:10.820
as well as the local class, and the anonymous class.

72

00:04:10.820  -->  00:04:13.420
And we'll start looking at those in the next video.
