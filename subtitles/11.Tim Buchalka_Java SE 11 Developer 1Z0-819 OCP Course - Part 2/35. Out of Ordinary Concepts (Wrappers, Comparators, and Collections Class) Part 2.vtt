WEBVTT
1
00:00:05.320 --> 00:00:10.300
All right, so in this video I want to revisit represent generics are reviewed in the generics out of

2
00:00:10.300 --> 00:00:16.630
ordinary video that a generic class type to Long does not participate in is a relationship with a generic

3
00:00:16.630 --> 00:00:17.440
class type to.

4
00:00:17.440 --> 00:00:17.860
No.

5
00:00:18.400 --> 00:00:20.950
Let's see how this simple statement could trip you up in code.

6
00:00:21.160 --> 00:00:23.620
That looks like it's testing your knowledge of other things.

7
00:00:25.130 --> 00:00:28.110
So we need a new class for this, we're going to call this one Rappa Limits.

8
00:00:37.540 --> 00:00:43.060
OK, there's a code that this class doesn't do much at this point, I'm using it as a jumping off point

9
00:00:43.060 --> 00:00:43.960
for additional code.

10
00:00:44.680 --> 00:00:45.910
You can see what I'm starting up during.

11
00:00:45.910 --> 00:00:52.210
There is a signing, a literal float to a primitive double variable, also creating a double array and

12
00:00:52.240 --> 00:00:54.280
initializing it to a list of literal floats.

13
00:00:54.460 --> 00:00:57.180
In this case, just one value running this code.

14
00:00:59.250 --> 00:01:00.360
Gives us the relevant output.

15
00:01:00.630 --> 00:01:03.630
So what I want to do next is add some rapper code or rappers.

16
00:01:03.900 --> 00:01:04.770
So Pisolite in.

17
00:01:06.740 --> 00:01:11.620
You could see there that both of these statements give you a compiler error, a primitive, the flight

18
00:01:11.840 --> 00:01:17.530
will get Orobets box to a repr and it cannot be assigned to a double repr, either as a single local

19
00:01:17.540 --> 00:01:19.580
variable or as part of an array.

20
00:01:20.400 --> 00:01:22.340
We replace it with float.

21
00:01:29.390 --> 00:01:30.050
All is well.

22
00:01:30.880 --> 00:01:32.640
Now, this is also true for collections.

23
00:01:33.430 --> 00:01:34.300
Let's have a look at that.

24
00:01:34.580 --> 00:01:35.330
It's more code in.

25
00:01:38.000 --> 00:01:39.350
Just import those lists.

26
00:01:43.260 --> 00:01:49.800
So here you say that you can't pass a list with literal floats to a list typed as double, nor can you

27
00:01:49.800 --> 00:01:52.020
use the ADD method with a literal float.

28
00:01:53.290 --> 00:01:56.980
If he changes to a double literal, they're down here.

29
00:02:00.150 --> 00:02:04.140
Right next, let's consider topping the generic class list, the prices of Moco.

30
00:02:05.900 --> 00:02:12.470
So here, one of them is of a sign to type trialist to a raw variable list that this type of assignment

31
00:02:12.470 --> 00:02:17.420
for you, because a compiler won't give you an error when you add elements to the raw number list.

32
00:02:17.870 --> 00:02:18.650
Let's try that out.

33
00:02:21.220 --> 00:02:23.230
So we're getting lots of compiler warnings.

34
00:02:25.980 --> 00:02:30.270
And check calls, or we can still run this code without any exceptions.

35
00:02:32.390 --> 00:02:33.500
To works, as you can see there.

36
00:02:35.470 --> 00:02:37.600
So next, let's spend another line of code here.

37
00:02:38.650 --> 00:02:42.640
They've talked about this in a previous video in this section, this is a compiler error.

38
00:02:43.320 --> 00:02:47.800
We look at the error, looking for a list of top number, but found an array list of type integer.

39
00:02:48.100 --> 00:02:53.160
An array list is a list, but an array list of top integer is not a list of top number.

40
00:02:53.590 --> 00:02:58.890
So let's now consider how you change the variable declarations to support this assignment or concurrently

41
00:02:58.900 --> 00:03:01.210
line out or replace it.

42
00:03:02.120 --> 00:03:02.660
With his.

43
00:03:03.660 --> 00:03:08.210
Now, that works, assigning the Israelis to a realist, but I've just shown you that this gives you

44
00:03:08.220 --> 00:03:12.390
none of the benefits of the compiler enforcing type checking of elements in the list.

45
00:03:12.780 --> 00:03:14.790
Instead of that, let's replace both those lines.

46
00:03:15.090 --> 00:03:15.570
But this.

47
00:03:16.780 --> 00:03:22.360
You can see here that the declaration and Azamat are fine, but you don't get to Kampala around trying

48
00:03:22.360 --> 00:03:25.570
to add anything to the list, and this is because integer lists.

49
00:03:26.510 --> 00:03:32.150
Can be side any array list of any type, including, for example, an exception that adding an end to

50
00:03:32.150 --> 00:03:34.190
an array of exception would cause a compiler error.

51
00:03:34.220 --> 00:03:36.160
That's what we're getting here now.

52
00:03:36.170 --> 00:03:41.120
We could try to limit the wild card declaration with an upper bound to pick up here and do that well

53
00:03:41.120 --> 00:03:42.860
at an upper bound or put extends.

54
00:03:42.860 --> 00:03:43.250
No.

55
00:03:47.130 --> 00:03:52.260
But this doesn't fix the compiler error by trying to add data to the integer list again, integer list

56
00:03:52.470 --> 00:03:57.750
could actually refer to the list of short, for example, and adding five to an array list of Top Short

57
00:03:58.020 --> 00:03:59.370
would produce a compiler error.

58
00:04:00.150 --> 00:04:04.960
Let's try something else instead of extends number here, but try a lower bound of integer.

59
00:04:05.020 --> 00:04:08.160
I'm going to put super then integer.

60
00:04:10.090 --> 00:04:14.470
So that works, as you can see there, no compiler errors, but can I add other types to the list?

61
00:04:15.310 --> 00:04:15.940
Let's try that.

62
00:04:18.840 --> 00:04:21.010
This is a pilot error we're trying to add along the.

63
00:04:22.790 --> 00:04:28.600
And the air is probably good, you're limited to lists that are of type integer or the subclass of integer,

64
00:04:29.240 --> 00:04:32.780
so we could do is replace that statement with a cast int.

65
00:04:35.220 --> 00:04:41.160
This compiles so I can cast along to it, you know, then good or I boxed, but if I try something like

66
00:04:41.160 --> 00:04:42.000
this on the next line.

67
00:04:44.210 --> 00:04:45.500
This is not a pilot error.

68
00:04:45.770 --> 00:04:49.310
That's because we're trying to cast a little long term into Tarapur.

69
00:04:51.250 --> 00:04:56.130
We're just going to do that last line, so I hope this little exercise has helped you say that in small

70
00:04:56.470 --> 00:05:00.940
segments, a compiler error might occur or not occur when you expect it to.

71
00:05:01.260 --> 00:05:07.140
You can expect some variation of the above in at least one exam question or less in the video here.

72
00:05:07.200 --> 00:05:10.770
Do one more exercise in the next one, but generics and wild cards.

73
00:05:11.100 --> 00:05:12.170
See you in the next video.
