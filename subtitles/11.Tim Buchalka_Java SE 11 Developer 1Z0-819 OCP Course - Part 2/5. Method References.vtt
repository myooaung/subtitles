WEBVTT
1
00:00:05.360 --> 00:00:11.680
So let's look at the four types of method references, the first method reference type is a static method

2
00:00:12.130 --> 00:00:17.140
and the method reference example there is the containing class, colon, colon, static method name.

3
00:00:17.570 --> 00:00:19.360
We saw an example of that in the last video.

4
00:00:20.020 --> 00:00:23.500
The next method reference type is an instance method on an object.

5
00:00:23.950 --> 00:00:29.170
The method reference example for that one is containing object colon colon instance method name.

6
00:00:29.530 --> 00:00:34.810
The third method reference top is an instance method on an arbitrary object of a particular type.

7
00:00:35.170 --> 00:00:41.230
The method example there is containing type colon colon method name and the fourth and final method

8
00:00:41.230 --> 00:00:43.150
reference type is a reference to a constructor.

9
00:00:43.570 --> 00:00:46.030
The method example was class name colon.

10
00:00:46.030 --> 00:00:47.020
Colon new.

11
00:00:47.970 --> 00:00:49.750
Well, so let's look at some of this in code now.

12
00:00:49.920 --> 00:00:52.060
We need a new class in our streams project.

13
00:00:52.330 --> 00:00:54.070
We'll call this one method reference.

14
00:01:00.610 --> 00:01:01.020
Some code.

15
00:01:06.010 --> 00:01:11.410
So this code consists of a test person class, as you can see at the top there, which contains firstly

16
00:01:11.410 --> 00:01:15.700
a public static field, which is an array of names as well as a name field.

17
00:01:16.030 --> 00:01:19.600
It's got an initial answer that randomly populates the name field.

18
00:01:20.470 --> 00:01:22.640
We've got a two string and also a get named method.

19
00:01:22.750 --> 00:01:27.880
They're also going to print static method, which is static, which are using a method reference.

20
00:01:28.230 --> 00:01:31.780
We've also got a print instance method that are using a method reference.

21
00:01:33.020 --> 00:01:35.810
Now, the method reference class itself, it contains our main method.

22
00:01:37.060 --> 00:01:41.980
Them demonstrating, using the very common system out, coal and coal and precleared method reference

23
00:01:41.980 --> 00:01:42.760
to each element.

24
00:01:43.160 --> 00:01:48.580
You say that online 49 also demonstrating each of the four types of method references are talked about

25
00:01:48.820 --> 00:01:50.500
in the slide earlier in this video.

26
00:01:51.170 --> 00:01:54.430
You can see the name on screen static method on a class line.

27
00:01:54.430 --> 00:01:57.310
Fifty three instance method on an object line.

28
00:01:57.310 --> 00:01:58.030
Fifty seven.

29
00:01:59.090 --> 00:02:05.830
It's his method on an arbitrary object line sixty two and a reference to a constructor line sixty five.

30
00:02:06.680 --> 00:02:07.280
We run this.

31
00:02:09.980 --> 00:02:15.230
There's the airport there, you may have noticed that intelligence shows warnings where lambda expressions

32
00:02:15.230 --> 00:02:17.910
are used, where method references could be used.

33
00:02:18.260 --> 00:02:21.300
So I want to look at one more example to create another class.

34
00:02:21.360 --> 00:02:24.050
I'm going to call this one functional interface arguments.

35
00:02:32.720 --> 00:02:33.620
Person card.

36
00:02:36.480 --> 00:02:42.210
So looking at this code, I've got a functional interface called my interface, but a class called my

37
00:02:42.210 --> 00:02:47.550
class, which implements the functional interface, my interface, Democrat class, functional interface

38
00:02:47.550 --> 00:02:49.530
arguments and our main method.

39
00:02:50.130 --> 00:02:55.590
And the main method creates three types of lambda expressions and passes each to a method on the same

40
00:02:55.590 --> 00:02:58.340
class that accepts a my interface argument.

41
00:02:58.860 --> 00:03:00.760
And looking specifically at the code there.

42
00:03:01.080 --> 00:03:07.080
We've got a local variable assigned a lambda expression then Pasto to method going to lambda expression

43
00:03:07.080 --> 00:03:08.580
passed directly to a method.

44
00:03:09.910 --> 00:03:15.640
We've got a method reference using new my class call and call and do something passed or method and

45
00:03:15.650 --> 00:03:20.800
a fourth, we've got a method invocation which returns a more interface result, and that's passed to

46
00:03:20.800 --> 00:03:21.150
method.

47
00:03:21.850 --> 00:03:23.790
We've also got the execute interface method.

48
00:03:23.800 --> 00:03:26.870
That's a sample operation that accepts a functional interface.

49
00:03:26.950 --> 00:03:32.440
And the argument and we've also got a static method return interface which returns to lambda expression

50
00:03:32.440 --> 00:03:34.150
assigned to the return result.

51
00:03:34.490 --> 00:03:36.670
Both of those, of course, used in our mind method.

52
00:03:37.210 --> 00:03:37.530
All right.

53
00:03:37.540 --> 00:03:38.230
So let's run this.

54
00:03:40.510 --> 00:03:42.760
And there's the airport, as you can see, at the bottom of the screen.

55
00:03:45.160 --> 00:03:50.620
So in this video and the previous one of describe the use of lambda expressions and method references

56
00:03:50.890 --> 00:03:55.300
when using some of the stream operations, let's append some code back in our main method.

57
00:03:58.190 --> 00:03:59.810
This produces a compiler error.

58
00:04:00.110 --> 00:04:01.190
What do you think that is?

59
00:04:03.920 --> 00:04:10.100
This is important to understand when you pass a method reference as a parameter to a method argument

60
00:04:10.100 --> 00:04:16.970
defined by a functional interface, the method must have the same signature and return type as the functional

61
00:04:16.970 --> 00:04:20.220
interface is only qualifying abstract method.

62
00:04:20.930 --> 00:04:26.750
So in this example, the method I reference returns on my interface interface and not a method that

63
00:04:26.750 --> 00:04:32.840
matches the signature of my interface to do something, the string do something parameter string method

64
00:04:34.250 --> 00:04:39.170
and do that code or remove that error so that the code compiles and executes again.

65
00:04:44.460 --> 00:04:49.230
So I'll be discussing additional examples of method references, what qualifies and doesn't in the next

66
00:04:49.230 --> 00:04:55.350
video, as well as other common mistakes, unless used features that might crop up on an exam question.

67
00:04:55.770 --> 00:04:56.880
See you in the next video.
