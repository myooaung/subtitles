WEBVTT
1

00:00:05.300  -->  00:00:09.000
Alright.
So, let's continue with the line of testing we're working on in the last video.

2

00:00:09.400  -->  00:00:12.000
We want to create a new class or a new interface.

3

00:00:13.800  -->  00:00:14.800
Let's go and do that.

4

00:00:16.300  -->  00:00:19.300
And we'll call this interface, MoreSpecificDefaultable.

5

00:00:25.800  -->  00:00:27.000
Okay, I'll paste in the code.

6

00:00:30.000  -->  00:00:32.500
So, this code's creating another interface

7

00:00:32.500  -->  00:00:35.860
that extends the previous one Defaultable, we're working on in the last video,

8

00:00:36.260  -->  00:00:38.160
and overrides the default method.

9

00:00:38.760  -->  00:00:40.760
The default method being default, not abstract method.

10

00:00:41.160  -->  00:00:42.660
Again, for context,

11

00:00:44.060  -->  00:00:47.360
there's our default method from the defaultable interface.

12

00:00:47.860  -->  00:00:49.360
So, that's the additional interface,

13

00:00:49.560  -->  00:00:52.260
and it's also declaring a class here, more specific

14

00:00:52.660  -->  00:00:54.960
that implements both interfaces,

15

00:00:54.960  -->  00:00:58.760
the defaultable interface as well as the MoreSpecificDefaultable,

16

00:00:59.120  -->  00:01:03.420
and implements the abstract method by simply invoking the default method.

17

00:01:03.780  -->  00:01:05.080
But whose default method?

18

00:01:05.440  -->  00:01:07.440
You see the comment that I've added on line 20.

19

00:01:08.240  -->  00:01:09.440
Let's run it to see.

20

00:01:12.640  -->  00:01:16.140
So this example is demonstrating that the JVM will select the method

21

00:01:16.140  -->  00:01:17.940
on the more specific interface

22

00:01:17.940  -->  00:01:20.140
over that of the less specific interface

23

00:01:20.140  -->  00:01:23.140
when matching signatures are found on both interfaces.

24

00:01:23.640  -->  00:01:25.040
So, let's try something different here.

25

00:01:25.340  -->  00:01:28.340
I'm going to go back to our MoreSpecific class definition up here,

26

00:01:30.000  -->  00:01:31.200
place it over the top.

27

00:01:32.400  -->  00:01:36.700
So, basically, I've just added the extends DefaultClass there. If we run this now,

28

00:01:40.700  -->  00:01:42.700
you see this time, we've got different output,

29

00:01:42.700  -->  00:01:45.100
Testing defaultNotAbstractMethod on class.

30

00:01:45.650  -->  00:01:48.310
So that proves that the class method on DefaultClass

31

00:01:48.310  -->  00:01:52.300
from the BaseClass is again selected above any interface method

32

00:01:52.550  -->  00:01:54.050
even more specific interfaces.

33

00:01:55.040  -->  00:01:56.440
So, let's just undo that change again.

34

00:01:58.140  -->  00:01:59.500
So, back to how it was before.

35

00:02:00.160  -->  00:02:04.460
Right. So, now we've done that, let's change the MoreSpecificDefaultable interface,

36

00:02:05.060  -->  00:02:08.860
and specifically, what we're going to do is change the defaultNotAbstractMethod

37

00:02:09.360  -->  00:02:10.660
and remove the body from it.

38

00:02:12.560  -->  00:02:14.560
I'm going to do that, I'm going to delete the body.

39

00:02:15.960  -->  00:02:17.960
I'm going to remove default, so it's just void.

40

00:02:18.510  -->  00:02:22.310
I think I've got an extra curly brace there that shouldn't be there.

41

00:02:23.210  -->  00:02:26.310
You see now, it's just void defaultNotAbstractMethod.

42

00:02:26.810  -->  00:02:29.310
So, by doing that, I've introduced a compiler-error

43

00:02:29.310  -->  00:02:31.670
on the declaration of the MoreSpecific class.

44

00:02:32.110  -->  00:02:34.210
Because of this change, you know, just hover over that,

45

00:02:34.810  -->  00:02:37.810
you can see that MoreSpecific must either be declared abstract

46

00:02:37.810  -->  00:02:40.810
or implement the abstract method defaultNotAbstractMethod

47

00:02:40.810  -->  00:02:42.810
in MoreSpecificDefaultable without interface.

48

00:02:43.610  -->  00:02:45.510
But basically, I'm now enforcing

49

00:02:45.510  -->  00:02:49.870
any implementing classes to declare an override of this particular method.

50

00:02:50.170  -->  00:02:53.470
So, let's go one step further in this MoreSpecific class.

51

00:02:53.870  -->  00:02:56.170
I want to append a method in here.

52

00:02:58.870  -->  00:03:01.870
You can see what I've done there, I've added a defaultNotAbstractMethod.

53

00:03:02.070  -->  00:03:04.970
We've got an error there because we're trying to specify

54

00:03:04.970  -->  00:03:06.970
that we want to use defaultable's default method.

55

00:03:07.770  -->  00:03:11.370
And hover over that, Bad type qualifier in default super call:

56

00:03:11.370  -->  00:03:15.370
redundant interface Defaultable is extended by MoreSpecificDefaultable.

57

00:03:16.230  -->  00:03:19.830
So, we're not allowed to directly reference defaultable's default method

58

00:03:19.830  -->  00:03:22.230
even with the use of ‘super’ in this instance.

59

00:03:22.630  -->  00:03:25.630
But what if I really do want to use defaultable's default method,

60

00:03:26.290  -->  00:03:29.190
what we can do is this, I'm going to replace this method again

61

00:03:30.090  -->  00:03:31.190
with another bit of code.

62

00:03:33.590  -->  00:03:37.490
What I'm doing there is creating an anonymous class of type defaultable

63

00:03:37.490  -->  00:03:39.190
and calling its default method.

64

00:03:40.090  -->  00:03:41.090
Run the code,

65

00:03:43.790  -->  00:03:45.390
Testing Default, as you can see there.

66

00:03:45.390  -->  00:03:48.690
That proves that I'm able to invoke the method on defaultable,

67

00:03:49.090  -->  00:03:50.390
and looking back at defaultable,

68

00:03:52.390  -->  00:03:54.290
we can see testing default is the output,

69

00:03:54.290  -->  00:03:55.970
so it's proving that that method was invoked.

70

00:03:58.300  -->  00:04:02.000
Let's delete this defaultNotAbstractMethod again for MoreSpecific.

71

00:04:05.300  -->  00:04:06.600
And as you can see by doing that,

72

00:04:06.600  -->  00:04:09.300
Class MoreSpecific must be declared abstract or implement abstract

73

00:04:09.300  -->  00:04:11.400
method defaultNotAbstractMethod,

74

00:04:11.400  -->  00:04:13.400
which makes sense because we've just deleted that method.

75

00:04:13.800  -->  00:04:17.600
We can fix this by replacing the class declaration of

76

00:04:17.600  -->  00:04:19.600
MoreSpecific with the following.

77

00:04:20.200  -->  00:04:23.000
You can see that I'm extending the DefaultClass and still implementing

78

00:04:23.000  -->  00:04:24.100
both interfaces.

79

00:04:24.700  -->  00:04:29.000
The DefaultClass has inherited a definition of defaultNotAbstractMethod

80

00:04:29.250  -->  00:04:32.850
from base class which is extending. So, again, DefaultClass

81

00:04:35.210  -->  00:04:38.010
down here, which is extending base class,

82

00:04:38.410  -->  00:04:39.910
if you recall base class

83

00:04:41.510  -->  00:04:43.510
has the defaultNotAbstractMethod.

84

00:04:44.170  -->  00:04:45.170
So, if we run this,

85

00:04:49.170  -->  00:04:51.270
we test defaultNotAbstractMethod on class,

86

00:04:51.270  -->  00:04:53.770
which again relates to the output

87

00:04:53.770  -->  00:04:56.770
from the defaultNotAbstractMethod from our base class.

88

00:04:59.070  -->  00:05:03.370
So, again DefaultClass has inherited a default of defaultNotAbstractMethod

89

00:05:03.370  -->  00:05:05.670
from base class which it extends, and we saw that.

90

00:05:05.970  -->  00:05:09.270
And that method satisfies the requirement that MoreSpecific,

91

00:05:09.270  -->  00:05:12.670
the class must implement the defaultNotAbstractMethod.

92

00:05:14.670  -->  00:05:16.770
So, from these examples, I've demonstrated

93

00:05:16.770  -->  00:05:19.770
that when you extend an interface that contains a default method,

94

00:05:20.070  -->  00:05:22.270
you can, firstly, ignore the default method

95

00:05:22.270  -->  00:05:26.270
in an implementing class or extending interface - the method is still available to use.

96

00:05:26.670  -->  00:05:30.670
I also demonstrated that you can override the default method in an implementing class

97

00:05:30.670  -->  00:05:31.870
or extending interface.

98

00:05:32.530  -->  00:05:36.230
And also demonstrated that you can override the default method

99

00:05:36.230  -->  00:05:39.630
making it abstract in an implementing class or extending interface,

100

00:05:39.630  -->  00:05:42.930
forcing implementation to subtypes or implementing types.

101

00:05:43.630  -->  00:05:45.830
So, in the examples, I've shown this in the previous video,

102

00:05:45.830  -->  00:05:50.030
the JVM uses prioritization rules to disambiguate the methods.

103

00:05:50.390  -->  00:05:52.990
Let's look at a situation though, where it cannot do that.

104

00:05:53.490  -->  00:05:57.790
So, we need a new class for this. And we'll create a new one.

105

00:05:59.450  -->  00:06:01.150
We'll call this InterfaceMethods.

106

00:06:02.950  -->  00:06:06.950
Actually, it is a class but with some methods as well as you'll see when I paste in the code.

107

00:06:09.150  -->  00:06:11.350
Now, there is an error in this class which we'll talk about,

108

00:06:11.650  -->  00:06:15.250
but the code that I pasted in firstly has two unrelated interfaces

109

00:06:15.250  -->  00:06:17.450
that both declare a default method.

110

00:06:17.450  -->  00:06:19.450
That has the same signature between them,

111

00:06:19.450  -->  00:06:20.450
you can see it's doing that.

112

00:06:21.550  -->  00:06:25.050
Specifically, the default getGait method for both,

113

00:06:26.350  -->  00:06:28.950
and also scrolling down the class, ConfusedClass

114

00:06:30.620  -->  00:06:34.220
implements both interfaces and attempts to override the abstract methods

115

00:06:34.220  -->  00:06:37.420
calling the default methods ideally that each interface provides.

116

00:06:38.220  -->  00:06:42.220
Again, we have got an error there, ConfusedClass inherits unrelated defaults

117

00:06:42.220  -->  00:06:45.520
for getGait from types Walkable and Strollable,

118

00:06:45.820  -->  00:06:48.020
being our two interfaces that we declared up here.

119

00:06:51.020  -->  00:06:53.820
So, in this example, there's two unrelated interfaces.

120

00:06:53.820  -->  00:06:56.220
Both the default method of the same signature

121

00:06:56.520  -->  00:06:58.720
and our codes attempting to invoke the method.

122

00:06:59.120  -->  00:07:02.620
The compiler cannot use its prioritization rules to determine

123

00:07:02.620  -->  00:07:04.220
which method is the best fit.

124

00:07:04.620  -->  00:07:07.620
I need to override getGait in my own class,

125

00:07:07.620  -->  00:07:11.220
so I can do this by adding this code to the ConfusedClass, overriding that method.

126

00:07:12.210  -->  00:07:14.910
We've got our own getGait method now for ConfusedClass.

127

00:07:15.910  -->  00:07:18.510
And obviously, I used the wrong name here.

128

00:07:18.510  -->  00:07:20.870
I used the name of the actual project

129

00:07:20.870  -->  00:07:24.170
instead of using the name of the class. So, let's actually make a change to that,

130

00:07:25.170  -->  00:07:28.770
or refactor this to call it the right name,

131

00:07:29.170  -->  00:07:31.370
of course, it should be ConfusedClass.

132

00:07:35.370  -->  00:07:36.970
That's better, we now get it working.

133

00:07:37.270  -->  00:07:41.270
And what I'll do just to show the things where as they should have been, we'll delete this again.

134

00:07:41.570  -->  00:07:42.570
Cut that out.

135

00:07:44.570  -->  00:07:47.570
We still have the same error showing earlier before I made the rename,

136

00:07:47.570  -->  00:07:49.930
but now if we add the method back again,

137

00:07:50.920  -->  00:07:54.220
we can see that the compiler-errors have gone. And when we run it,

138

00:07:57.020  -->  00:08:01.520
we can see, we get the output when walking, gait is 5.2, and strolling, gait is 5.2.

139

00:08:02.180  -->  00:08:05.680
Maybe, looking at this, I want to use the

140

00:08:05.680  -->  00:08:07.580
stroll interfaces getGait method

141

00:08:07.580  -->  00:08:10.180
when executing the stroll method.

142

00:08:10.580  -->  00:08:12.380
And again if we run this first,

143

00:08:13.680  -->  00:08:16.280
we can see we've got the same result 5.2 for both.

144

00:08:16.280  -->  00:08:18.880
So we wanted to use the other stroll.

145

00:08:21.240  -->  00:08:25.140
We, basically, want to use this stroll method, so that we actually use the getGait method from

146

00:08:25.140  -->  00:08:28.140
strollable to effectively return a different rate there.

147

00:08:28.940  -->  00:08:30.240
So, what if we want to do that.

148

00:08:30.540  -->  00:08:33.340
Well, the way around that is in our ConfusedClass.

149

00:08:33.340  -->  00:08:34.440
To replace the code

150

00:08:35.100  -->  00:08:39.300
with stroll, with the code like that,

151

00:08:39.550  -->  00:08:41.550
you can see the code change I've added there.

152

00:08:41.950  -->  00:08:44.350
Specifically, Strollable.super.getGait,

153

00:08:45.550  -->  00:08:46.550
run the code,

154

00:08:48.350  -->  00:08:52.650
you can see we've now got a different result for when strolling, gait is 2.5

155

00:08:52.650  -->  00:08:54.650
instead of 5.2, which it was previously.

156

00:08:55.310  -->  00:08:57.310
Alright.
So, let's do something similar for walk.

157

00:08:58.010  -->  00:09:01.010
The walk method, you can see here in our ConfusedClass,

158

00:09:01.560  -->  00:09:03.860
I'm going to change that to this code.

159

00:09:05.310  -->  00:09:08.310
You can see, we're being specific there Walkable.super.getGait.

160

00:09:09.310  -->  00:09:10.010
Run this,

161

00:09:13.510  -->  00:09:17.010
now we've got, when walking, gait is 3.5,

162

00:09:17.010  -->  00:09:18.670
when strolling, gait is 2.5,

163

00:09:18.670  -->  00:09:22.670
consistent with the values that have been defined in the default methods,

164

00:09:23.030  -->  00:09:25.630
the getGait for both Walkable and Strollable.

165

00:09:27.230  -->  00:09:29.030
So, with that said down here,

166

00:09:29.730  -->  00:09:33.090
since we're no longer using ConfusedClass getGait method.

167

00:09:33.490  -->  00:09:34.490
Can I get rid of it?

168

00:09:34.490  -->  00:09:37.690
So, what happens when I delete this given that we're being very specific

169

00:09:37.690  -->  00:09:40.050
with getGait in our walk and stroll methods.

170

00:09:43.410  -->  00:09:46.410
Removal of this method has given us a compiler-error

171

00:09:48.010  -->  00:09:52.010
and it's the same one we had before, ConfusedClass inherits unrelated defaults

172

00:09:52.010  -->  00:09:54.810
for getGait from types Walkable and Strollable.

173

00:09:55.410  -->  00:09:58.410
getGait is found in both walkable and strollable as we know.

174

00:09:58.410  -->  00:10:02.410
So, even though I've specified which getGait I want to use in all invocations,

175

00:10:02.610  -->  00:10:05.210
I still cannot get the class to compile

176

00:10:05.210  -->  00:10:08.510
without implementing a getGait method override.

177

00:10:09.010  -->  00:10:11.610
So, I'll undo that last removal of the method

178

00:10:12.110  -->  00:10:13.910
so that our code compiles again.

179

00:10:16.210  -->  00:10:19.510
Alright, so, in the last two videos, I've covered the need for a default method

180

00:10:19.510  -->  00:10:22.210
and how it allows interfaces to be altered

181

00:10:22.210  -->  00:10:25.810
without forcing recompilation of implementing classes,

182

00:10:25.810  -->  00:10:27.610
including lambda expressions.

183

00:10:28.110  -->  00:10:31.710
I've reviewed the default methods declaration and its limitations,

184

00:10:31.710  -->  00:10:35.010
and shown you how the JVM disambiguates methods,

185

00:10:35.010  -->  00:10:37.810
giving precedence, first, to any method in a class

186

00:10:37.810  -->  00:10:39.370
in the class hierarchy,

187

00:10:39.370  -->  00:10:42.570
and second to the most specific interface.

188

00:10:42.930  -->  00:10:46.930
If the JVM cannot disambiguate, you must override the default method

189

00:10:46.930  -->  00:10:48.530
where there is ambiguity,

190

00:10:48.530  -->  00:10:52.890
even when your invocations of the default method are specifically qualified.

191

00:10:53.390  -->  00:10:56.290
It's probably not a surprise that the introduction of default methods

192

00:10:56.290  -->  00:11:00.490
would lead to a desire for private methods that default methods could utilize.

193

00:11:01.090  -->  00:11:04.090
Well, actually, Java 9 introduced private methods to the interface,

194

00:11:04.090  -->  00:11:07.090
and I'm going to be reviewing those in the next video.
