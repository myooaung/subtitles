WEBVTT
1

00:00:05.490  -->  00:00:08.610
In this video and the following
one, I'm going to be talking

2

00:00:08.610  -->  00:00:11.509
about nested classes and their
different types and meanings.

3

00:00:12.259  -->  00:00:15.920
A class defined within the body
of another class or type is

4

00:00:15.920  -->  00:00:17.519
called a nested class in Java.

5

00:00:18.080  -->  00:00:19.880
There's two types of nested classes.

6

00:00:20.870  -->  00:00:22.310
A static nested class.

7

00:00:22.320  -->  00:00:26.540
And a non-static nested class
also called an inner class.

8

00:00:28.380  -->  00:00:31.390
And in terms of inner classes,
there's three types of inner classes.

9

00:00:31.809  -->  00:00:34.730
An inner member class - this
type of class is considered a

10

00:00:34.730  -->  00:00:36.239
member of the enclosing class.

11

00:00:36.880  -->  00:00:41.710
I did discuss class members in
section 9 of the 1Z0-819 Part 1

12

00:00:41.750  -->  00:00:45.730
course [SubClasses and SuperClasses
video] and I stated that a class can

13

00:00:45.730  -->  00:00:50.080
have four types of members, [fields,
methods, classes, and interfaces].

14

00:00:50.370  -->  00:00:53.740
And then a member is defined
as an attribute on a class

15

00:00:54.029  -->  00:00:55.559
that is inherited by a subclass.

16

00:00:56.870  -->  00:00:58.090
So that's an inner member class.

17

00:00:58.340  -->  00:01:01.870
Secondly, a local inner class is
defined within a block of code,

18

00:01:02.080  -->  00:01:05.660
usually the body of a method, and is
not a member of the enclosing class.

19

00:01:06.050  -->  00:01:09.849
And thirdly, we've got an anonymous
class which is a special type of

20

00:01:09.849  -->  00:01:14.310
local inner class that's declared and
instantiated in a single statement.

21

00:01:16.340  -->  00:01:19.470
In an earlier video in this
section, I declared that static

22

00:01:19.750  -->  00:01:24.200
was not a modifier that could be
used by an outer class, but here,

23

00:01:24.210  -->  00:01:27.470
it is the distinctive modifier
to distinguish between the two

24

00:01:27.520  -->  00:01:29.589
categories of nested classes.

25

00:01:30.420  -->  00:01:33.440
So, let's explore a static nested
class and some code samples.

26

00:01:34.270  -->  00:01:37.150
So, in the project Fundamentals
which I've got open on screen that

27

00:01:37.150  -->  00:01:40.130
we're using in the previous video,
we need to create a new class.

28

00:01:40.150  -->  00:01:40.840
So, I'm going to do that.

29

00:01:40.840  -->  00:01:43.810
I'm going to open the project
pane and I’m going to create a new

30

00:01:43.810  -->  00:01:46.960
class and I’m going to create it
in its own package called nest.

31

00:01:46.960  -->  00:01:48.149
So it'll be nest.EnclosingClass.

32

00:01:52.939  -->  00:01:55.689
You can see it's automatically
created the package statement for me.

33

00:01:56.609  -->  00:01:59.339
Double-click, click that
and I’ll paste in some code.

34

00:02:01.639  -->  00:02:04.119
This is the code snippet that
we're going to be working on.

35

00:02:04.949  -->  00:02:09.350
Now, this code firstly consists
of a public class, EnclosingClass.

36

00:02:09.390  -->  00:02:11.060
You can see the definition
there on line 11.

37

00:02:11.740  -->  00:02:16.490
Now, this class has got a static
field, line 16 to be specific.

38

00:02:16.490  -->  00:02:18.569
It's also got an instance
field on line 13.

39

00:02:19.690  -->  00:02:21.899
We've got a static method
defined on line 19.

40

00:02:22.419  -->  00:02:26.970
And that method actually invokes a
static method on the nested class.

41

00:02:27.610  -->  00:02:31.880
We've also got an instance method
and that invokes an instance

42

00:02:31.910  -->  00:02:36.270
method on the nested class through
an instance of the nested class.

43

00:02:36.860  -->  00:02:40.459
We've got a static nested class as
well, as you can see there, line 33.

44

00:02:41.029  -->  00:02:45.799
And that consists itself of a
static field, an instance field,

45

00:02:46.260  -->  00:02:50.990
a static method, an instance
method, an enum, and an interface.

46

00:02:50.990  -->  00:02:56.550
All right, and then we've got our test
class here called TestEnclosingClass.

47

00:02:57.000  -->  00:02:59.439
And that's got a main method
which you can see there and

48

00:02:59.600  -->  00:03:01.059
that demonstrates the following.

49

00:03:01.650  -->  00:03:05.570
Firstly, referencing a static
field on a static nested class.

50

00:03:06.290  -->  00:03:09.300
Referencing a static method
on a static nested class.

51

00:03:10.020  -->  00:03:13.359
Referencing an enum on
a static nested class.

52

00:03:13.440  -->  00:03:16.580
And finally, a local
variable declaration using

53

00:03:16.580  -->  00:03:18.150
a nested class's interface.

54

00:03:18.850  -->  00:03:20.460
All right, so if we run this now,

55

00:03:23.960  -->  00:03:25.470
we can see the output below.

56

00:03:25.770  -->  00:03:26.880
Right, so that works okay.

57

00:03:27.300  -->  00:03:31.069
Let's repeat this main method
from a class in another package.

58

00:03:31.610  -->  00:03:34.000
So what we want to do now
is create a new class…

59

00:03:37.680  -->  00:03:41.850
not in a package, I'm going to
call this one static class example.

60

00:03:44.560  -->  00:03:49.910
Now, I'm going to paste in
the code segment for this.

61

00:03:51.240  -->  00:03:56.100
Noting that it's just the main method
here and that's almost identical to

62

00:03:56.100  -->  00:04:01.599
the testing closing class, output or
code rather the main method there.

63

00:04:02.670  -->  00:04:05.240
The difference is, if we go back
to it now, you can see that we're

64

00:04:05.270  -->  00:04:07.880
importing nest.EnclosingClass.

65

00:04:08.099  -->  00:04:11.030
So, if we run this code now in
our static class example,

66

00:04:13.330  -->  00:04:17.910
the code compiles and executes perfectly
and that's because we've defined all

67

00:04:17.940  -->  00:04:19.450
things public in the enclosing class.

68

00:04:19.450  -->  00:04:27.969
You can see there that everything
that I've done has been marked public.

69

00:04:29.629  -->  00:04:32.940
All right, so what this code is
demonstrating is that you can

70

00:04:33.000  -->  00:04:36.975
access a static nested class and its
members from outside of the enclosing

71

00:04:37.250  -->  00:04:39.510
class using a class reference.

72

00:04:39.510  -->  00:04:43.839
And you can see, the class preferences 
there on lines 15, 18, 21, and 24.

73

00:04:43.839  -->  00:04:51.039
And again, when we ran it, we got
the identical output to when we ran

74

00:04:51.040  -->  00:04:54.580
the main method in an EnclosingClass
or in our test class rather.

75

00:04:59.880  -->  00:05:00.640
All right.

76

00:05:02.360  -->  00:05:04.900
Let's make a change to
static class example now.

77

00:05:05.230  -->  00:05:07.790
What we're going to do is
change the input statement.

78

00:05:08.130  -->  00:05:10.710
You can see at the moment, it's
import nest.EnclosingClass.

79

00:05:11.590  -->  00:05:19.560
Let's change that to the import nest.EnclosingClass.NestedStaticClass.

80

00:05:22.360  -->  00:05:25.550
And you can see that's introduced
compiler errors in our code.

81

00:05:26.420  -->  00:05:29.840
What I’m going to do is
replace those four snippets

82

00:05:29.840  -->  00:05:31.580
of code there with a new one.

83

00:05:33.500  -->  00:05:37.179
So, what I've done there is that
I've removed all references to

84

00:05:37.179  -->  00:05:39.770
enclosing class as you can see there.

85

00:05:39.770  -->  00:05:42.570
Now that I've done that, the
code is showing no errors.

86

00:05:42.580  -->  00:05:46.630
And if we run this, it executes fine.

87

00:05:47.609  -->  00:05:50.000
And interestingly, you can
change the input statement

88

00:05:50.020  -->  00:05:51.309
to use a static import.

89

00:05:51.750  -->  00:05:53.500
So we come up here and
just make that static.

90

00:05:59.270  -->  00:06:00.770
And the code still executes.

91

00:06:02.440  -->  00:06:04.600
All right, so moving back to our
EnclosingClass,

92

00:06:05.800  -->  00:06:09.800
so I've demonstrated that you can create an instance of the NestedStaticClass in the

93

00:06:09.800  -->  00:06:12.300
doSomething instance method. So, let's go back up
and have a look at that.

94

00:06:13.400  -->  00:06:16.020
So you can see the code
there on line 29.

95

00:06:16.320  -->  00:06:19.370
And we can actually do this from
the static class example as well.

96

00:06:21.250  -->  00:06:24.800
So, I'm going to paste into code right
at the bottom of the main method.

97

00:06:28.230  -->  00:06:30.159
You can see, we're creating an
instance of the static class there

98

00:06:30.270  -->  00:06:31.730
and if we run this,

99

00:06:33.930  -->  00:06:35.900
we get that
bottom line of output as well.

100

00:06:36.600  -->  00:06:38.160
All right, so let's
end the video here.

101

00:06:38.700  -->  00:06:41.680
In the next one, I want to start
talking about something that I

102

00:06:41.800  -->  00:06:45.109
think is very important how you
cannot reference instance members

103

00:06:45.420  -->  00:06:48.760
of the EnclosingClass in any
members of the StaticNestedClass.

104

00:06:49.090  -->  00:06:51.230
Let's talk about that
in the next video.
