WEBVTT
1
00:00:05.210 --> 00:00:10.610
So I want to show again this table, which shows a few of the different types of built-In interfaces

2
00:00:10.730 --> 00:00:13.910
and the abstract method which a lambda expression would represent.

3
00:00:14.480 --> 00:00:19.280
So looking at these various interface types, consumer, you see the method signature is void except

4
00:00:19.280 --> 00:00:23.270
and takes a parameter of type T next interface type by function.

5
00:00:23.270 --> 00:00:29.030
The method signature returns and our method name is apply and the two parameter types are T and you

6
00:00:29.720 --> 00:00:31.340
next interface type as a predicate.

7
00:00:31.880 --> 00:00:38.690
Returns are boolean method that is test and takes a parameter of type T next interface type supplier.

8
00:00:38.960 --> 00:00:46.010
The method is called get returns of type T and last year type unary operator also returns a type T,

9
00:00:46.280 --> 00:00:50.090
the method that is called apply and it takes a parameter of type T.

10
00:00:51.950 --> 00:00:57.000
So let's go back to our code and create a new class in our built interfaces project who actually called

11
00:00:57.000 --> 00:00:59.370
this one built in Interface Example's.

12
00:01:13.720 --> 00:01:14.760
Right, so there's the code.

13
00:01:15.270 --> 00:01:19.720
This cake consists is obviously a class called item, as you can see on screen there, that's got two

14
00:01:19.720 --> 00:01:21.820
attributes, several constructors.

15
00:01:23.320 --> 00:01:24.580
Also, a clone method there.

16
00:01:25.030 --> 00:01:26.920
We've also got a two string method as well.

17
00:01:27.940 --> 00:01:30.580
If you come down, we've got a built in interface example's class.

18
00:01:31.550 --> 00:01:36.890
With the main method and the main method is creating variables for each of the supplied interfaces.

19
00:01:37.190 --> 00:01:41.660
Now all of these create a new item and the last two also will add an item to the list.

20
00:01:42.980 --> 00:01:43.860
Get back up here.

21
00:01:44.810 --> 00:01:51.710
So we've got a supply ising top item, a scientific method reference is creating a new item using a

22
00:01:51.710 --> 00:01:58.730
Noailles constructor, the next big supplier of top item assigned to a lamp expression, which is creating

23
00:01:58.730 --> 00:02:00.860
a new item using a single ARC's constructor.

24
00:02:02.000 --> 00:02:07.520
We've got a unary operator of top item assigned to a lambda expression that's creating a new item using

25
00:02:07.520 --> 00:02:08.960
the two AGs constructor.

26
00:02:09.320 --> 00:02:14.030
We've got to operate out of top item assigned to a method reference, creating a new item using the

27
00:02:14.030 --> 00:02:14.810
client method.

28
00:02:16.300 --> 00:02:21.460
They've got by function, you say that's using type, string, string and item that's assigned to a

29
00:02:21.460 --> 00:02:25.370
lambda expression that's creating a new item using the two arcs constructor.

30
00:02:25.600 --> 00:02:31.240
We've got a consumer of type list assigned to a lambda expression that's creating a new item using the

31
00:02:31.240 --> 00:02:35.260
two arms constructor and also adding it to the list pass to the expression.

32
00:02:35.690 --> 00:02:40.600
And finally, we've got the predicate of type list assigned to a lambda expression that's creating a

33
00:02:40.600 --> 00:02:47.080
new item is in the two X constructor and adding that to the list pass to the expression so that the

34
00:02:47.080 --> 00:02:51.580
predicate and consumer are both assigned the exact same lambda expression.

35
00:02:52.120 --> 00:02:54.340
The list or add method returns a boolean.

36
00:02:54.640 --> 00:02:59.230
But any method that returns the result can be used in a consumer statement which returns void.

37
00:02:59.860 --> 00:03:04.810
Remember that you can make an expression, a statement, but not assigning the result of a method invocation

38
00:03:04.810 --> 00:03:05.910
to a reference variable.

39
00:03:06.220 --> 00:03:06.420
Right.

40
00:03:06.530 --> 00:03:07.330
So let's run this.

41
00:03:10.200 --> 00:03:15.000
We can see the output at the bottom of the screen, what's the next thing I want to do is add two methods

42
00:03:15.270 --> 00:03:17.400
to a built in interface examples class.

43
00:03:20.560 --> 00:03:21.890
And you can see what I've done there.

44
00:03:21.910 --> 00:03:27.430
We've got two methods of the same name, so obviously the overlayed method first, all accepting a consumer

45
00:03:27.700 --> 00:03:32.270
and the second revelator method, accepting a predicate, we need some code to test this.

46
00:03:32.290 --> 00:03:34.300
That's step in our mind method.

47
00:03:36.560 --> 00:03:37.370
So it's from this.

48
00:03:41.800 --> 00:03:45.880
Now, obviously, there's no output, but you can see that it compiled and executed just fine.

49
00:03:46.330 --> 00:03:52.420
But what happens now if I replace the local variable reference with a lambda expression, let's try

50
00:03:52.420 --> 00:03:55.450
and do that, replace the card in below where it was posted previously.

51
00:03:56.500 --> 00:03:59.660
Here, I've got a problem, ambiguous method.

52
00:03:59.980 --> 00:04:06.040
You can see that the compiler can't determine if the lambrew expression is meant to be a predicate or

53
00:04:06.040 --> 00:04:09.760
a consumer, therefore cannot decide which method is to be invoked.

54
00:04:10.210 --> 00:04:14.860
You want to avoid overloading methods with functional interfaces as parameters for exactly this reason.

55
00:04:15.700 --> 00:04:21.760
So what you could do is cast the lambda expression subaccount doing that so we can add some code on

56
00:04:21.760 --> 00:04:23.800
here to basically to do a cast.

57
00:04:23.810 --> 00:04:28.660
So it's parentheses and I'm going to add predicate list.

58
00:04:31.370 --> 00:04:35.870
So that now works, as you can see, but better practice, what have you rename one of the methods,

59
00:04:35.870 --> 00:04:36.870
but let's leave this here.

60
00:04:37.820 --> 00:04:43.120
So let's look at another set of interfaces that you can create a similar ambiguous situation for.

61
00:04:43.590 --> 00:04:48.710
I'm going to add a method that is down the bottom to a built in interface examples class.

62
00:04:49.010 --> 00:04:50.400
You say it's create item.

63
00:04:50.450 --> 00:04:55.080
This time this method accepts a supplier which creates a new item with the folds.

64
00:04:55.940 --> 00:05:01.310
So now that I've done that, we'll go back up and pay some card into our main method so I can see that

65
00:05:01.310 --> 00:05:07.610
the method reference item Colin Colin new works both as a supplier and also as a function.

66
00:05:08.300 --> 00:05:12.170
You can see that calling the new method causes no issues using the same method reference.

67
00:05:13.980 --> 00:05:14.570
Let him run it.

68
00:05:15.850 --> 00:05:18.120
Even though the airport hasn't changed, we haven't got any crashes.

69
00:05:18.620 --> 00:05:24.510
Right, so let's go back in and add another method here to a built in interface example's class.

70
00:05:26.100 --> 00:05:27.510
You can see that we've got an error there.

71
00:05:27.930 --> 00:05:32.610
What I'm trying to do, therefore, I create out a method, is have a method that accepts a function,

72
00:05:32.610 --> 00:05:33.690
which creates a new item.

73
00:05:33.960 --> 00:05:35.310
But the error we've got here now.

74
00:05:36.270 --> 00:05:41.550
Cannot resolve constructor Artim, so the compiler error here is a little less obvious, but the reason

75
00:05:41.550 --> 00:05:42.170
is the same.

76
00:05:42.510 --> 00:05:48.530
The overloaded methods have created ambiguity in what we could do is fix that line.

77
00:05:48.660 --> 00:05:49.530
We covered that out.

78
00:05:50.790 --> 00:05:56.910
And replace it with this line, we resolve the compiler error by casting to the appropriately typed

79
00:05:56.910 --> 00:06:03.550
interface, and that would also work for supplier, as you can see there.

80
00:06:04.080 --> 00:06:06.420
So leave the code here so that it compiles and executes.

81
00:06:06.790 --> 00:06:08.280
I've just done that before you in the video.

82
00:06:10.730 --> 00:06:14.490
Oops, and it wasn't really paying attention, Bosaso, just change that.

83
00:06:14.510 --> 00:06:18.140
So it's just icing on the card.

84
00:06:21.250 --> 00:06:24.420
Everything's still working as before that, any compiler or runtime errors.

85
00:06:25.200 --> 00:06:29.460
All right, so let's see in the video here and in the next one, I want to look at the end then and

86
00:06:29.460 --> 00:06:31.630
compose methods in a bit more detail.

87
00:06:32.010 --> 00:06:33.120
See you in the next video.
