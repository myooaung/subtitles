WEBVTT
1

00:00:05.200  -->  00:00:08.500
All right, so in this video, let's start by exploring some different ways

2

00:00:08.500  -->  00:00:10.100
to create local classes.

3

00:00:10.400  -->  00:00:12.900
So, we need a new class in our fundamentals project.

4

00:00:12.900  -->  00:00:16.700
We're going to call this one unoriginally LocalClassExample2.

5

00:00:16.950  -->  00:00:17.950
Go ahead and do that.

6

00:00:23.950  -->  00:00:25.150
Paste the code in.

7

00:00:26.150  -->  00:00:29.450
All right, so this code that I've pasted in demonstrates that you can create local

8

00:00:29.450  -->  00:00:31.650
classes in static methods as well.

9

00:00:31.650  -->  00:00:34.250
So, the code consists of, as you can see on screen there,

10

00:00:34.500  -->  00:00:39.790
our abstract class called AbstractClass. It's got a single abstract method doSomething.

11

00:00:40.490  -->  00:00:43.790
Moving on down, we've got an interface called executable with a single method.

12

00:00:44.560  -->  00:00:48.160
then we've got the class we created – LocalClassExample2, our public class

13

00:00:48.660  -->  00:00:52.760
and you can see there, that's got an attribute called "name" which I have typed string,

14

00:00:53.460  -->  00:00:55.460
and then just a static method main there,

15

00:00:55.860  -->  00:00:58.860
and that's doing all the demonstrating. You can see there firstly,

16

00:00:58.860  -->  00:01:02.060
showing in the class A, definition on line 23,

17

00:01:02.060  -->  00:01:06.460
that goes showing that the local class can extend any class including an abstract one.

18

00:01:07.060  -->  00:01:09.060
And then the next on line 30

19

00:01:09.060  -->  00:01:11.660
showing that a local class can implement interfaces.

20

00:01:13.160  -->  00:01:16.460
The third on line 38, declaring a local abstract class.

21

00:01:17.260  -->  00:01:20.560
Moving on down on line 43, we're creating a local class

22

00:01:20.560  -->  00:01:22.360
extending another local class,

23

00:01:23.260  -->  00:01:24.960
and then we're executing code

24

00:01:24.960  -->  00:01:27.260
on instances of these local classes.

25

00:01:27.260  -->  00:01:28.260
So, if we run the code now,

26

00:01:30.760  -->  00:01:32.360
you can see the output as shown.

27

00:01:33.060  -->  00:01:35.860
All right, so let's actually remove the local variable

28

00:01:35.860  -->  00:01:39.860
in the LocalClassExample2 class. Up here, we're going to remove that.

29

00:01:43.360  -->  00:01:46.660
We've introduced three compiler errors, one for every reference to name.

30

00:01:47.020  -->  00:01:49.520
Now, can we just replace each instance

31

00:01:49.520  -->  00:01:52.420
with LocalClassExample2.this.name.

32

00:01:52.820  -->  00:01:55.420
So, as an example, can we change that for class A

33

00:01:56.020  -->  00:02:01.010
to LocalClassExample2.this.name.

34

00:02:03.010  -->  00:02:06.010
We can see the answer there; we've got a compiler error. The answer is no.

35

00:02:06.710  -->  00:02:10.510
Hopefully, you remember that the main method is static. You can see that on line 19

36

00:02:10.760  -->  00:02:13.760
and you cannot refer to this in a static reference.

37

00:02:13.760  -->  00:02:16.760
Any instance members defined in your class are off limits

38

00:02:16.760  -->  00:02:19.760
to a local class declared in static methods.

39

00:02:21.260  -->  00:02:24.260
Let's undo those changes so that we've got code that compiles again.

40

00:02:26.860  -->  00:02:28.560
We'll just run it to make sure it's working.

41

00:02:31.560  -->  00:02:33.560
All right, again, this code is demonstrating

42

00:02:33.560  -->  00:02:37.260
that a local class can extend a class including another local class

43

00:02:37.260  -->  00:02:39.560
previously declared in the same code block,

44

00:02:39.560  -->  00:02:42.560
demonstrating the local class can implement an interface.

45

00:02:43.860  -->  00:02:45.860
The local class can be abstract

46

00:02:46.260  -->  00:02:49.560
and that if you define local classes in static method blocks,

47

00:02:49.560  -->  00:02:52.460
you cannot access instance members of the class.

48

00:02:53.060  -->  00:02:56.860
All right, so moving on now, let's take a look at anonymous classes.

49

00:02:57.460  -->  00:02:59.060
So, we're going to create a new class for this.

50

00:03:00.960  -->  00:03:03.160
We're going to call it AnonymousInnerExample.

51

00:03:09.460  -->  00:03:10.460
Let's paste the code in.

52

00:03:13.360  -->  00:03:17.960
So kind of paste it in, you can see we've created an abstract class called AnAbstractClass,

53

00:03:18.210  -->  00:03:22.810
which consists of a variable I, and an abstract method.

54

00:03:23.310  -->  00:03:27.010
We've also created an interface on line 14 called Doable

55

00:03:27.010  -->  00:03:28.010
with one method,

56

00:03:28.910  -->  00:03:32.110
and then our public AnonymousInnerExample class

57

00:03:32.470  -->  00:03:36.070
has got an attribute called name and the methods test anonymous,

58

00:03:36.370  -->  00:03:39.370
and then our static method main for running the code.

59

00:03:39.770  -->  00:03:42.970
So, we're showing an example here specifically of creating

60

00:03:42.970  -->  00:03:47.570
an anonymous class which extends the abstract class AnAbstractClass.

61

00:03:48.070  -->  00:03:50.370
And you can see that in the test anonymous method there,

62

00:03:50.670  -->  00:03:54.670
we're declaring a variable of type AnAbstractClass and immediately defining the class body,

63

00:03:55.270  -->  00:03:57.870
and we're executing the doSomething method on line 33,

64

00:03:58.470  -->  00:04:01.270
and then we're creating the new AnonymousInnerExample

65

00:04:01.270  -->  00:04:04.870
class and calling the test anonymous method on line 38.

66

00:04:05.270  -->  00:04:06.370
So, if we run this now,

67

00:04:09.070  -->  00:04:10.770
we can see the output at the bottom of the screen.

68

00:04:11.470  -->  00:04:15.270
So, let's actually have a look at the anonymous class creation more closely

69

00:04:15.270  -->  00:04:17.270
So looking at that code on screen,

70

00:04:17.870  -->  00:04:21.870
at first glance, it almost looks like we're instantiating an abstract class,

71

00:04:21.870  -->  00:04:23.370
which we know we cannot do.

72

00:04:23.970  -->  00:04:26.470
And I'm talking about the code new AnAbstractClass,

73

00:04:26.870  -->  00:04:28.870
but this is immediately followed

74

00:04:28.870  -->  00:04:31.870
by a set of curly braces containing code statements.

75

00:04:32.120  -->  00:04:34.120
This is actually the anonymous class body,

76

00:04:35.020  -->  00:04:39.220
so let's pause here and I want to talk about the structure and rules of use for an anonymous class.

77

00:04:40.880  -->  00:04:44.440
An anonymous class is very different from the other nested classes

78

00:04:44.440  -->  00:04:47.140
because it's not written like a class declaration at all.

79

00:04:47.140  -->  00:04:48.940
Rather, it's written as an expression.

80

00:04:49.740  -->  00:04:53.240
An anonymous class is dependent on an interface to implement,

81

00:04:53.240  -->  00:04:55.040
or a class to extend,

82

00:04:55.040  -->  00:04:58.040
either of which must contain the accessible method or method(s)

83

00:04:58.440  -->  00:05:01.440
which the anonymous class will implement and execute.

84

00:05:02.240  -->  00:05:05.740
The structure of anonymous class is written as one of the two samples

85

00:05:05.740  -->  00:05:06.830
you can see on screen.

86

00:05:07.330  -->  00:05:10.730
With the first one new ParentClassType parentheses

87

00:05:10.730  -->  00:05:12.630
with optional constructor arguments,

88

00:05:12.630  -->  00:05:16.830
then we've got our class body in left to right curly braces ending with a semicolon.

89

00:05:17.530  -->  00:05:20.630
The second type is new InterfaceType parentheses

90

00:05:20.630  -->  00:05:23.990
and then we've got our class body in curly braces again

91

00:05:23.990  -->  00:05:25.980
and also ending in a semi-colon.

92

00:05:27.680  -->  00:05:30.180
Some notes about this – The expression can be assigned

93

00:05:30.180  -->  00:05:33.180
to a local variable, an instance variable,

94

00:05:33.180  -->  00:05:35.180
or a static class variable.

95

00:05:35.180  -->  00:05:38.780
The expression can be passed as a parameter to another method

96

00:05:38.780  -->  00:05:40.780
with a parameter of the correct type.

97

00:05:41.660  -->  00:05:44.260
You can declare the following in anonymous classes.

98

00:05:44.260  -->  00:05:48.560
Firstly, fields (You cannot declare static fields unless they are constants,

99

00:05:48.560  -->  00:05:50.360
same as with a local class).

100

00:05:51.020  -->  00:05:53.520
You can also declare extra methods in anonymous classes

101

00:05:53.520  -->  00:05:57.420
(even if they do not implement or override any methods of the supertype).

102

00:05:58.020  -->  00:06:01.020
You can declare instance initializers in anonymous classes,

103

00:06:01.620  -->  00:06:05.220
and you can also declare local classes in anonymous classes.

104

00:06:06.210  -->  00:06:10.010
Now, what you can't declare in anonymous classes are firstly constructors.

105

00:06:10.710  -->  00:06:14.910
You can't declare static fields in anonymous classes (with the exception of constants).

106

00:06:15.160  -->  00:06:18.560
You can't declare static initializers, static methods,

107

00:06:18.560  -->  00:06:21.560
or member interfaces in anonymous classes either.

108

00:06:22.760  -->  00:06:25.420
All right, so now that we've been armed with this knowledge,

109

00:06:25.420  -->  00:06:28.020
let's see what we can do with it in the next video.
