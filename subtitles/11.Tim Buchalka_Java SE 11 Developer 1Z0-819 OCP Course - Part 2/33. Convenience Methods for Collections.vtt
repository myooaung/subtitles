WEBVTT
1
00:00:05.340 --> 00:00:11.760
The job that you took, Collection's class is made up of static methods that operate on or return collections,

2
00:00:12.690 --> 00:00:16.980
although some of the methods have been rendered somewhat redundant because of the additions of the default

3
00:00:17.190 --> 00:00:21.780
and static methods on the collections framework interfaces, there are still many useful algorithms

4
00:00:21.780 --> 00:00:24.960
available to you and you will be tested on at least a few of them.

5
00:00:25.260 --> 00:00:31.860
Perhaps in comparison to the collection interfaces methods, the collections class contains about 70

6
00:00:31.860 --> 00:00:35.990
static methods, so it's obviously outside of the scope of this course to review them all.

7
00:00:37.920 --> 00:00:44.120
The methods range from data manipulation at all, fuel, rotate, sort, shuffle, among others, search

8
00:00:44.130 --> 00:00:50.910
and comparison, binary search, disjoint frequency, index of sublist, last index of sublist, max

9
00:00:50.910 --> 00:00:58.770
and Min generation of views backed by the original collection Aslaug IQ checked except for Map and Copy's

10
00:00:58.770 --> 00:01:03.450
transformations to both mutable copy and immutable collections in copies.

11
00:01:03.450 --> 00:01:11.280
Singleton Singleton List, Singleton Map and modifiable list and modifiable map and modifiable set.

12
00:01:12.240 --> 00:01:13.520
So let's try some of them out.

13
00:01:13.540 --> 00:01:14.710
So let's go back to the idea.

14
00:01:15.330 --> 00:01:19.650
We need a new class in our collections project, going to call this one collections methods.

15
00:01:30.270 --> 00:01:36.330
Robots are the class jobs posted in I'm reviewing a few of the static methods used for data manipulation

16
00:01:36.330 --> 00:01:39.750
on the collection's class, which might pop up in a code segment on the exam.

17
00:01:40.530 --> 00:01:42.590
So you can say that we're setting up some test data there.

18
00:01:43.170 --> 00:01:45.480
Then we're using various methods that we've talked about.

19
00:01:45.480 --> 00:01:47.970
Swap, shuffle, sort.

20
00:01:51.020 --> 00:01:56.200
I mean, Max, etc., so so I use to feel there are 53, so let's run this.

21
00:01:59.140 --> 00:02:04.330
And you can see the output on screen right next, but I want to look at some of the modifiable collections

22
00:02:04.330 --> 00:02:09.010
which can be retrieved from the collections class to append some code to do that.

23
00:02:10.450 --> 00:02:15.520
So I have to do that on the bottom or I can see the card that I've added starting a line fifty seven

24
00:02:15.520 --> 00:02:21.850
there, the seven modifiable list, their list of copy of those are the collections that Singleton list

25
00:02:21.850 --> 00:02:22.720
on line 70.

26
00:02:23.260 --> 00:02:23.980
That's from this.

27
00:02:27.760 --> 00:02:28.870
They're looking at this code.

28
00:02:33.180 --> 00:02:37.190
Data collections that sought a large 72 executed without an error.

29
00:02:39.020 --> 00:02:45.860
The single method returns a list of one element and one element only an immutable list, sorting a list

30
00:02:45.860 --> 00:02:47.270
of one element is not sorting the lists.

31
00:02:47.310 --> 00:02:48.560
This method doesn't cause an error.

32
00:02:49.520 --> 00:02:50.630
Robots are continuing on.

33
00:02:51.730 --> 00:02:58.450
Let's try something else, we'll try to add something to be to Ellis, I peed on Ed and I'll add Mary

34
00:02:58.450 --> 00:03:01.270
has a string in parentheses if you run this.

35
00:03:03.970 --> 00:03:09.310
An unsupported operation, exceptions, you can see there, and that's again, because the list created

36
00:03:09.700 --> 00:03:10.840
is an immutable list.

37
00:03:12.130 --> 00:03:14.290
That's the list using the single 10 list method call.

38
00:03:14.870 --> 00:03:20.200
So you probably say one or several code segments that test your knowledge of which methods create immutable

39
00:03:20.200 --> 00:03:20.650
lists.

40
00:03:21.070 --> 00:03:24.550
So going to do that line of code so it doesn't crash anymore.

41
00:03:25.120 --> 00:03:26.950
And I got a post in some kadence place.

42
00:03:29.550 --> 00:03:35.100
So that's the case starting on line 76, this code uses the single wireless method to pass a single

43
00:03:35.100 --> 00:03:38.250
elementalist to a constructor of a realist L2.

44
00:03:38.490 --> 00:03:39.930
You can see that online 76.

45
00:03:40.360 --> 00:03:43.350
That's similar to the list that I create further down one.

46
00:03:43.350 --> 00:03:45.080
But that one's using Lyster of.

47
00:03:45.510 --> 00:03:51.870
Now I'm adding an element to L2 line 77, confirming that using an immutable list in a constructor does

48
00:03:51.870 --> 00:03:53.440
not also produce an immutable list.

49
00:03:53.460 --> 00:03:54.840
Well, I hope that's the case where we run it.

50
00:03:55.410 --> 00:04:01.470
And then further on down, I mean, collections copy copying L2 into one and finally adding an element

51
00:04:01.590 --> 00:04:04.260
to it or to align any anyone and printing out the results.

52
00:04:05.040 --> 00:04:05.910
So let's run this code.

53
00:04:08.530 --> 00:04:09.970
And you can say we've got the right output.

54
00:04:10.750 --> 00:04:11.830
Now let's try something else.

55
00:04:13.500 --> 00:04:18.840
Let's try commenting out on seventy seven sites, no longer doing an ad of a string for.

56
00:04:19.800 --> 00:04:20.910
That's from the again now.

57
00:04:24.150 --> 00:04:28.380
This time, with no exception, and you can see that the exceptions is an index out of bounds, exception

58
00:04:28.590 --> 00:04:30.540
source does not fit in destination.

59
00:04:33.240 --> 00:04:38.520
When do you use collections that copy the destination list must be able to accommodate all of the elements

60
00:04:38.520 --> 00:04:39.630
in the arguments list?

61
00:04:41.080 --> 00:04:45.190
That's what I'm going to do, is committer on seventy eight through eighty two, so you've got a reference

62
00:04:45.190 --> 00:04:48.220
to it and then I'm going to do is replace the code.

63
00:04:49.570 --> 00:04:50.290
It's the following.

64
00:04:51.040 --> 00:04:57.250
What I've done there is of Swopped, L1 and L2 in all cases, with the exception of the first statement

65
00:04:58.270 --> 00:05:03.250
that we've done that noting that the that line seventy seven is still committed out to previously caused

66
00:05:03.250 --> 00:05:04.960
an exception, running it now.

67
00:05:06.330 --> 00:05:09.020
Everything works as expected, so from this.

68
00:05:11.880 --> 00:05:14.540
You can say that one element in L2 was copied to L1.

69
00:05:14.820 --> 00:05:18.900
You can say that with the output at the bottom of the screen there, Levie, the other elements of L1

70
00:05:18.900 --> 00:05:19.410
intact.

71
00:05:19.980 --> 00:05:21.510
So let's look at a couple more examples.

72
00:05:22.900 --> 00:05:24.160
There are still some more code.

73
00:05:26.350 --> 00:05:32.650
So collections and copies gives you a list of the number of specified elements, 10 here initialized

74
00:05:32.650 --> 00:05:34.430
to some value in this case now.

75
00:05:34.720 --> 00:05:35.500
So let's run that.

76
00:05:37.510 --> 00:05:40.270
And this he appeared on screen confirming that we've got 10 nosier.

77
00:05:44.140 --> 00:05:48.070
Some code to the name of this list might give you a clue about what's going to happen when we run this

78
00:05:48.070 --> 00:05:48.910
code that I've added.

79
00:05:52.410 --> 00:05:57.720
Obviously, the comp. But when we read it, we've got an unsupported operation exception because, of

80
00:05:57.720 --> 00:05:58.920
course, it's removalist.

81
00:06:01.080 --> 00:06:02.420
I'm going to undo that code.

82
00:06:02.780 --> 00:06:03.990
I'm going to add some more code here.

83
00:06:05.180 --> 00:06:11.000
So this code segment, I'm using collections and copies in the constructor of a realist, which allows

84
00:06:11.000 --> 00:06:15.320
me to initialize the Israelis to a certain number of elements or with some default values.

85
00:06:19.100 --> 00:06:20.330
And you can see the output's worked.

86
00:06:21.760 --> 00:06:23.990
As did the set online 95.

87
00:06:24.400 --> 00:06:29.380
It's a good idea to familiarize yourself with the many methods on the collections class, comparing

88
00:06:29.380 --> 00:06:35.170
them to the newer methods on this collection and set, for example, what's going on in the next three

89
00:06:35.170 --> 00:06:35.740
videos.

90
00:06:35.950 --> 00:06:39.460
I'll be taking a look at some of the out of ordinary features of wrappers and collections.

91
00:06:39.760 --> 00:06:40.900
See you in the next video.
