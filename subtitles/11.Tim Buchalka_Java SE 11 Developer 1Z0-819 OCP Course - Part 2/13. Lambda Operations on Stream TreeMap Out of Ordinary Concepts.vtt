WEBVTT
1
00:00:05.390 --> 00:00:10.850
All right, so continuing on from the last video, what if I wanted both results to be returned in a

2
00:00:10.850 --> 00:00:11.410
tree map?

3
00:00:11.960 --> 00:00:15.950
Well, in both cases, I would need an overloaded method with a supplier argument.

4
00:00:16.610 --> 00:00:21.980
Each method gripping buy in to map have an overloaded method that fits the bill for grouping.

5
00:00:21.990 --> 00:00:27.770
But we've got a three parameter version of the method, which takes a function, a supplier and a collector

6
00:00:28.280 --> 00:00:29.180
and four to map.

7
00:00:29.180 --> 00:00:34.520
We've got a four parameter version which takes a function as the first two parameters, a binary operator

8
00:00:34.670 --> 00:00:35.600
and a supplier.

9
00:00:36.580 --> 00:00:42.370
Let's have a look at how to do this back in code, let's change the grouping one first, a grouping

10
00:00:42.370 --> 00:00:45.160
by I should say, I'm just going to replace this.

11
00:00:46.260 --> 00:00:49.410
Pricing that in except the import phratry map.

12
00:00:51.370 --> 00:00:56.620
So I notice here I'm using the method reference treatment called Call On You to specify the supplier,

13
00:00:56.980 --> 00:01:01.870
but I also need to specify collector and use collectors not to list for that purpose.

14
00:01:02.650 --> 00:01:08.220
And obviously, pit call and call get type is what we're using is the first parameter in the last video.

15
00:01:09.010 --> 00:01:09.210
Right.

16
00:01:09.340 --> 00:01:11.050
Let's now alter our two map.

17
00:01:12.270 --> 00:01:12.990
Prestatyn.

18
00:01:14.940 --> 00:01:20.850
So what I've done here is added two additional arguments to our collective start to map method call.

19
00:01:21.210 --> 00:01:23.250
The first represents the merged function.

20
00:01:23.890 --> 00:01:28.860
Since I'm not merging in this instance, this is primarily used for parallel streams and I'll be discussing

21
00:01:28.860 --> 00:01:29.970
that in a later video.

22
00:01:30.330 --> 00:01:32.790
As a result of that, this lambrix pressure will suffice.

23
00:01:33.150 --> 00:01:40.050
And next time, using the same supplier that I used above I constructor for the tray map, we're doing

24
00:01:40.050 --> 00:01:41.880
that via a tray map call and call on you.

25
00:01:42.460 --> 00:01:43.710
But let's have a look at what this gives us.

26
00:01:43.710 --> 00:01:44.400
That's from this.

27
00:01:46.390 --> 00:01:51.350
And looking at the first one grouping by output, we can see that a tree map containing a string and

28
00:01:51.350 --> 00:01:56.260
then a list of pet was returned and the listing is ordered by pet type for that stream.

29
00:01:56.530 --> 00:02:02.890
And in the second scenario, to map the tree map, returning as a string and pet ordered basically from

30
00:02:02.890 --> 00:02:03.770
the map to stream.

31
00:02:04.210 --> 00:02:08.740
Since this discussion was about one to one and one to many mappings, this might be a good place to

32
00:02:08.740 --> 00:02:14.350
review the many to one operation you get with the flat map operational stream so that we're going to

33
00:02:14.350 --> 00:02:15.430
create a new class.

34
00:02:16.700 --> 00:02:19.190
Then we'll call this one flatmate, extras.

35
00:02:25.830 --> 00:02:30.510
OK, so we're going to Minmetals, as you can see here, we started creating three lists, each made

36
00:02:30.510 --> 00:02:33.480
up of three randomly generated pet objects.

37
00:02:34.450 --> 00:02:40.210
The next I'm creating a list of the three lists is a list of scrolling a bit further.

38
00:02:41.340 --> 00:02:48.210
I want to make a single list of pet from a list containing a list of pet can do this for that flat map

39
00:02:48.210 --> 00:02:52.490
has shown, but the list created is then not accessible as part of the stream pipeline.

40
00:02:52.950 --> 00:02:53.940
So if we run this now.

41
00:02:56.950 --> 00:02:59.590
Get to the airport of a list of lists and then the full list.

42
00:03:00.630 --> 00:03:01.810
Right, so far, so good.

43
00:03:02.670 --> 00:03:07.470
Let's do the same thing now with flat map and apply some code into our mind method.

44
00:03:10.380 --> 00:03:11.150
Except that import.

45
00:03:17.980 --> 00:03:21.620
And you can see the output of a full list with flat map at the bottom of the screen.

46
00:03:22.540 --> 00:03:26.640
So what happens if I change flat map to use a method reference instead of a lambda expression?

47
00:03:26.650 --> 00:03:27.550
So let's change this.

48
00:03:29.110 --> 00:03:33.820
Replace that stream current column of.

49
00:03:36.880 --> 00:03:38.480
So what actually happens in this scenario?

50
00:03:39.310 --> 00:03:41.510
There is a subtle but important difference here.

51
00:03:41.980 --> 00:03:48.520
Now, the previous flip map operation, they executed the street method on a list of pit in this example

52
00:03:48.520 --> 00:03:54.250
by changing this OSTREM colon colon of I'm executing Strittmatter of passing in a single element, a

53
00:03:54.250 --> 00:03:56.920
list of pet, and therefore I haven't flattened anything.

54
00:03:57.910 --> 00:04:00.730
So I actually run this will confirm.

55
00:04:03.610 --> 00:04:09.700
That it didn't do what I'd hoped, so that's using extreme coal and coal and of the method that does

56
00:04:09.700 --> 00:04:12.100
work is collection coal and Coldstream.

57
00:04:15.040 --> 00:04:17.710
Collection, Colin Colon Stream.

58
00:04:19.330 --> 00:04:25.170
This method has the same meaning as the expression is error, Tolkan is iStock Stream.

59
00:04:25.680 --> 00:04:26.430
If I run this.

60
00:04:31.290 --> 00:04:35.490
That's their work worked, and they get the results that are desired, a list of pet as shown in the

61
00:04:35.490 --> 00:04:35.880
output.

62
00:04:37.570 --> 00:04:39.040
I want to show you some more code here.

63
00:04:42.760 --> 00:04:44.440
So what does this code segment do?

64
00:04:45.130 --> 00:04:49.870
Well, it takes multiple different lists of pets in random order, flattens them into a single list

65
00:04:49.870 --> 00:04:56.050
of pets and collects them into a map of a list of pets keyed by the pit type that's run this.

66
00:05:00.940 --> 00:05:02.980
There's the output at the bottom of the screen.

67
00:05:04.650 --> 00:05:05.930
So let's end this video here.

68
00:05:07.940 --> 00:05:12.230
Next, you'll be presented with some quiz questions which will test your knowledge of some of the topics

69
00:05:12.230 --> 00:05:17.870
we've covered on the videos in his section, on streams and stream pipelines, stream operations, collector

70
00:05:17.870 --> 00:05:19.640
and collectors factory methods.

71
00:05:19.880 --> 00:05:24.920
After the quiz, the subject will be changing away from streams and lambda expressions to migrating

72
00:05:24.920 --> 00:05:31.010
an application written and built before Java nine to a modular application with Java nine through 11

73
00:05:31.010 --> 00:05:32.060
support from modules.

74
00:05:32.420 --> 00:05:33.920
So good luck with the quiz then.

75
00:05:33.920 --> 00:05:36.140
I'll see you shortly after that in the next section.
