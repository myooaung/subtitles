WEBVTT
1
00:00:05.290 --> 00:00:10.450
In this video and the next one, I want to look at Collectors' to map side by side with Collectors'

2
00:00:10.630 --> 00:00:15.940
grouping by they're not the same and exam questions may try to use them interchangeably.

3
00:00:16.700 --> 00:00:22.720
The collective start to map allows you to take a stream of elements and produce a map or a map to entry

4
00:00:22.720 --> 00:00:25.000
and the element have a one to one relationship.

5
00:00:25.870 --> 00:00:30.340
You specify how the key to the map is created and how the value is created.

6
00:00:30.730 --> 00:00:33.130
A key must be unique or you'll get an exception.

7
00:00:35.320 --> 00:00:41.350
The collectors took grouping by allows you to take a stream of elements and produce a map where a mapped

8
00:00:41.350 --> 00:00:46.990
entry and the element have a one to many relationship, you specify the key to the map and the value

9
00:00:46.990 --> 00:00:51.250
is by default, a list of elements which contain the matching data element value.

10
00:00:52.630 --> 00:00:58.180
So switching back to code to the examples in this code will be using the class I created in previous

11
00:00:58.180 --> 00:00:58.570
video.

12
00:00:59.080 --> 00:01:00.950
This is our element pet class.

13
00:01:00.970 --> 00:01:01.570
This one here.

14
00:01:01.930 --> 00:01:04.000
And obviously we're in the stream operations project.

15
00:01:04.240 --> 00:01:05.530
It's a brief recap.

16
00:01:05.870 --> 00:01:07.090
We've got some test data there.

17
00:01:07.510 --> 00:01:12.100
And the Noailles constructor down here produces a randomly generated pet object.

18
00:01:12.350 --> 00:01:16.960
It's attributes randomly assigned from lists within the class and that lists up there at the top.

19
00:01:18.100 --> 00:01:21.610
Let's alter the class a little bit by replacing, firstly, the two string method.

20
00:01:23.360 --> 00:01:27.940
Down here, we're going to got a little bit less information, so I'm just going to post the coda.

21
00:01:29.860 --> 00:01:34.150
To make it a bit more concise, the next thing we need to do is create a new class, we're going to

22
00:01:34.150 --> 00:01:35.620
call it on stream extras.

23
00:01:44.920 --> 00:01:45.880
Clovis, Carol.

24
00:01:47.760 --> 00:01:52.860
This code, if we look at it, just creates a list of five randomly created pets and then puts them

25
00:01:52.860 --> 00:01:53.100
out.

26
00:01:59.210 --> 00:02:04.850
This year, put it it is you can say that I've got three hamsters, a ferret and a cat, but run it

27
00:02:04.850 --> 00:02:08.030
again, given the random nature will get different results this time.

28
00:02:08.030 --> 00:02:11.720
You can see we've got two pigs, a dog, a cat and a hamster.

29
00:02:14.140 --> 00:02:19.430
What if I just want a list of distinct pet types, only one pig, one dog, one threat, for example,

30
00:02:20.060 --> 00:02:22.130
let's add the distinct method, Kahir.

31
00:02:23.140 --> 00:02:24.130
Distinct operation.

32
00:02:26.470 --> 00:02:27.250
If you run this.

33
00:02:31.320 --> 00:02:35.410
Thus, you can see it doesn't actually seem to do anything to see here, we've still got mortarboards

34
00:02:35.430 --> 00:02:36.260
in this case of CAT.

35
00:02:36.310 --> 00:02:37.200
And if I run it again.

36
00:02:40.340 --> 00:02:43.640
We've got random results that aren't necessarily just that artistic.

37
00:02:43.670 --> 00:02:49.150
And again, there's a sample of two dogs, so we're certainly not getting a list of distinct pet types.

38
00:02:50.180 --> 00:02:52.340
The distinct operation doesn't take an argument.

39
00:02:52.670 --> 00:02:55.400
So how would you get a list of five pets with a distinct type?

40
00:02:57.850 --> 00:03:03.850
The distinct operation is described as returning a stream consisting of the distinct elements, according

41
00:03:03.850 --> 00:03:06.790
to Object ECLSS Object to the Stream.

42
00:03:08.420 --> 00:03:12.140
So let's alter our pet classic in their element, top pet.

43
00:03:13.990 --> 00:03:17.300
But what I'm going to do is post in an equals method as well as a hash cart method.

44
00:03:17.680 --> 00:03:18.570
We need both here.

45
00:03:19.060 --> 00:03:20.860
There are separate import.

46
00:03:22.210 --> 00:03:27.670
Now, I'm just using pet type as the distinctive feature, which would make a pet unique, the obviously

47
00:03:27.670 --> 00:03:32.050
one dog is not the same as another, but for our purposes here and demonstration purposes, this is

48
00:03:32.050 --> 00:03:33.110
good enough what we've done here.

49
00:03:33.490 --> 00:03:36.490
Now we go back to our stream extras and run it again.

50
00:03:37.360 --> 00:03:39.430
This time we should indeed get distinct results.

51
00:03:39.870 --> 00:03:41.290
But you can see the results.

52
00:03:41.300 --> 00:03:42.640
They will run a few more times.

53
00:03:47.680 --> 00:03:51.010
And clearly, that's now working and we're getting distinct results each time.

54
00:03:52.820 --> 00:03:59.180
Looks like all you do is compare collectors to grouping by and collectors dot maps side by side.

55
00:03:59.690 --> 00:04:00.980
To do that, we need some more code.

56
00:04:01.460 --> 00:04:03.830
I'm going to places some code in this mind method.

57
00:04:04.940 --> 00:04:10.940
So the first code segment is just collectors start grouping by it's a single argument overloaded method

58
00:04:11.090 --> 00:04:12.320
and it takes a function.

59
00:04:12.830 --> 00:04:16.640
Now, here's what I'm doing is I'm passing it to get a method which returns a pit type.

60
00:04:16.640 --> 00:04:22.100
So you can see that I'm using a method reference there to get type the result as a map with a curve

61
00:04:22.100 --> 00:04:25.880
pit type and a value, which is a list of pet objects.

62
00:04:26.420 --> 00:04:30.110
The second code segment is using collectors to map the two met.

63
00:04:30.110 --> 00:04:33.260
Method does not have a single argument overloaded method.

64
00:04:33.540 --> 00:04:34.940
It has a two argument method.

65
00:04:35.340 --> 00:04:36.490
You can see that in use here.

66
00:04:36.770 --> 00:04:40.990
What I'm doing is I'm putting together a method for pet type as the first argument, same as what I

67
00:04:41.000 --> 00:04:41.810
did with collectors.

68
00:04:41.810 --> 00:04:42.620
The grouping by.

69
00:04:42.920 --> 00:04:48.590
But the second argument, I'm actually passing the entire pet object represented by the Latin expression

70
00:04:48.890 --> 00:04:50.540
P arrow token P.

71
00:04:51.230 --> 00:04:52.130
In both cases.

72
00:04:52.130 --> 00:04:58.070
What I'm doing after that is I'm changing the result, the map to the entry set dot string methods and

73
00:04:58.070 --> 00:05:01.400
then use the foreach terminal operation to print each map entry.

74
00:05:02.060 --> 00:05:06.950
So let's from this now, bearing in mind that the output will vary each time we run it.

75
00:05:09.360 --> 00:05:10.920
There's an example there, we'll run it again.

76
00:05:14.740 --> 00:05:15.430
No more, Tom.

77
00:05:19.080 --> 00:05:23.640
And you can say that's working, so although the airport does look similar, there is a difference.

78
00:05:23.640 --> 00:05:30.030
In the first instance, the map generated by the collectors, the grouping by is a map of string Bursley

79
00:05:30.390 --> 00:05:34.440
and then a list of pict, the string being the key list of pit being the value.

80
00:05:34.680 --> 00:05:40.210
In the second instance, the map generated by the collectors, that two map is a map of string and pit.

81
00:05:40.820 --> 00:05:42.420
So no list in the second scenario.

82
00:05:43.160 --> 00:05:44.910
Let's go back to our look.

83
00:05:45.080 --> 00:05:48.810
Came make a change back up here to our pet population list of pets.

84
00:05:48.810 --> 00:05:51.390
I got to remove the distinct operation.

85
00:05:53.150 --> 00:05:54.320
And if I run this now.

86
00:05:55.600 --> 00:06:01.540
Any time we've now got pets of the same pet type in our list, we'll get an error when using collectors

87
00:06:01.540 --> 00:06:02.740
not to map the method.

88
00:06:03.080 --> 00:06:08.200
So basically that method fails when trying to create a unique pet type if there is a duplicate in the

89
00:06:08.200 --> 00:06:10.600
list now that we've removed the distinct operation.

90
00:06:11.020 --> 00:06:12.040
Now, we can't avoid that.

91
00:06:12.910 --> 00:06:17.620
If you run it a few times, if we don't get a duplicate, it won't crash.

92
00:06:21.010 --> 00:06:21.440
There you go.

93
00:06:21.460 --> 00:06:22.990
That's an example of it not crashing.

94
00:06:23.260 --> 00:06:27.670
And the reason for that is if we have a look at the airport, there's no duplicates in the list at the

95
00:06:27.670 --> 00:06:27.970
top.

96
00:06:29.230 --> 00:06:34.570
So importantly, they don't get these two methods confused on an exam question because clearly in a

97
00:06:34.580 --> 00:06:38.860
scenario was going to crash if there are duplicate entries and one white.

98
00:06:42.400 --> 00:06:47.050
As an example, you can see on screen there, typically, Ferit, and you can see this model ferret's

99
00:06:47.050 --> 00:06:47.650
in l'Est.

100
00:06:48.760 --> 00:06:53.160
Let's go back to our pit class again and change our Eaglesmith at this time.

101
00:06:53.250 --> 00:06:56.350
I'm going to do is make pit unique by pit type and pit name.

102
00:06:56.570 --> 00:06:58.390
I just change the return line only.

103
00:07:01.020 --> 00:07:05.430
So what I'm doing there is making PET unique, this time by pet type and pet name as shown.

104
00:07:06.330 --> 00:07:11.910
Now that I've done that, we'll go back to history class this time instead of actually putting distinct

105
00:07:12.060 --> 00:07:15.210
on the first train that's added to the map to stream.

106
00:07:17.950 --> 00:07:23.500
Or rather, the two maps, I should say, they're going to come down here and add a distinct operation.

107
00:07:24.860 --> 00:07:28.990
Also, change the map, key to the same set of data as we've done now equals class.

108
00:07:29.170 --> 00:07:31.180
Now a place that in their.

109
00:07:33.260 --> 00:07:39.630
I get rid of this extra code that's matching what we've done now equals method by making it unique puppet

110
00:07:39.650 --> 00:07:41.250
type and pit name as well.

111
00:07:41.990 --> 00:07:43.120
So let's run this a few times.

112
00:07:43.130 --> 00:07:44.750
We should no longer get exceptions.

113
00:07:45.140 --> 00:07:47.180
We'll just have to check the output each time.

114
00:07:47.930 --> 00:07:52.580
So duplicates, you see there's a duplicate there, but now we're no longer getting an error, not just

115
00:07:52.580 --> 00:07:53.630
run it a few more times.

116
00:07:56.040 --> 00:07:57.620
But you could say, but we're on it again.

117
00:07:59.340 --> 00:08:01.540
There's an example of a garden with two hamsters.

118
00:08:01.830 --> 00:08:07.470
And again, we haven't got an era now where we fix the equals method and revised our stream by adding

119
00:08:07.470 --> 00:08:10.460
distinct and then changing the arguments to to map.

120
00:08:11.400 --> 00:08:16.950
Bottom line here now is that the map generated by the two maps stream first remove the duplicates.

121
00:08:17.450 --> 00:08:21.030
That's why we're no longer getting errors, even if there are duplicates in the original list that was

122
00:08:21.030 --> 00:08:21.570
created.

123
00:08:22.290 --> 00:08:22.930
That's in the video.

124
00:08:22.950 --> 00:08:26.670
Here's a look at returning the results as a treasure map in the next video.
