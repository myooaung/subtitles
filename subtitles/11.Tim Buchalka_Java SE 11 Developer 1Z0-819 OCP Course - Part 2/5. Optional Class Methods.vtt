WEBVTT
1
00:00:05.370 --> 00:00:11.160
Let's look at some other methods on optional now, the following table displays many of them the first

2
00:00:11.160 --> 00:00:12.510
one method signature.

3
00:00:12.760 --> 00:00:18.480
And keep in mind that these are simplified for readability, if present turn tops forward and the parameter

4
00:00:18.480 --> 00:00:19.200
is consumer.

5
00:00:19.470 --> 00:00:24.470
So if a values present performs a given action with a value, otherwise does nothing, we've got present

6
00:00:24.480 --> 00:00:31.410
or else the method signature turns void if present or else the parameters are a consumer and a runnable.

7
00:00:31.950 --> 00:00:36.690
So the values present reforms are given action with a value otherwise performed to give an empty based

8
00:00:36.690 --> 00:00:37.110
action.

9
00:00:38.040 --> 00:00:46.080
Next method name is or the method signature, an optional type T or a supplier, so if the values present,

10
00:00:46.320 --> 00:00:51.780
then it returns an optional describing the value otherwise returns an optional produced by the supplying

11
00:00:51.780 --> 00:00:52.230
function.

12
00:00:54.780 --> 00:01:01.110
Or else is the next method, method, signature return type T method, name, or else as the parameter

13
00:01:01.110 --> 00:01:06.780
is T for value is present returns the value otherwise returns other other being the parameters of type

14
00:01:06.780 --> 00:01:07.100
T.

15
00:01:07.500 --> 00:01:12.040
Or else it is the next method name the method signature return type is T or scale.

16
00:01:12.060 --> 00:01:12.990
Again, it's a method name.

17
00:01:13.350 --> 00:01:14.720
Parameter is supplier.

18
00:01:15.150 --> 00:01:20.460
If a valve is present, returns to value otherwise returns the result produced by the supplying function

19
00:01:21.180 --> 00:01:25.890
or else through method signature return type T or else Traugott is the method name.

20
00:01:26.410 --> 00:01:31.230
If a value is present, returns the value otherwise authorized no such element exception and the last

21
00:01:31.350 --> 00:01:33.790
one the overloaded method or else throw.

22
00:01:34.200 --> 00:01:36.600
This is where there is a supplier passed as a parameter.

23
00:01:36.880 --> 00:01:42.660
If a valve is present, returns the value otherwise throws an exception produced by the exception supplying

24
00:01:42.690 --> 00:01:43.200
function.

25
00:01:44.410 --> 00:01:49.510
Well, let's continue with the current example now would like a list of all students, even those with

26
00:01:49.510 --> 00:01:50.290
no GPA.

27
00:01:51.190 --> 00:01:57.280
I will assume that an unknown GPA means the student is studying his or her college career in good standing.

28
00:01:57.880 --> 00:01:58.690
Before we change this.

29
00:01:58.720 --> 00:02:01.270
Let's run this to see the results we got at the end of the last video.

30
00:02:02.200 --> 00:02:04.360
You can see we're only getting Joe back in good standing.

31
00:02:04.780 --> 00:02:08.220
That's because Jane was to find a alternative for us having no GPA.

32
00:02:09.960 --> 00:02:12.990
That's how it's changed since that's coming out, this one from the last video.

33
00:02:14.660 --> 00:02:15.530
Who will replace it?

34
00:02:16.700 --> 00:02:17.240
This code.

35
00:02:19.750 --> 00:02:26.380
So this segment of remove the filter from the pipeline now and instead of executing the dot all method

36
00:02:26.770 --> 00:02:33.760
on the optional return from the old method, the DOT all method returns an optional created by the supply

37
00:02:33.760 --> 00:02:38.410
path to it, if the value of the optional it's invoked on is empty.

38
00:02:38.560 --> 00:02:40.270
In other words, it's contained value is no.

39
00:02:40.840 --> 00:02:47.500
So in this case, for students with no GPA, a temporary option was passed back with a 2.0 floating

40
00:02:47.500 --> 00:02:52.900
value, allowing the calculation about a student in good standing to be used from the other method.

41
00:02:53.780 --> 00:02:58.790
And then if the option has a value in the supplier code is not used or executed, and I'm printing out

42
00:02:58.790 --> 00:03:04.640
the value of genuine change after this code so that you can confirm that the old method, when not assigned

43
00:03:04.850 --> 00:03:09.710
back to the originating optional, has no effect on the original optional state.

44
00:03:10.070 --> 00:03:12.290
So let's run this and check the results.

45
00:03:15.600 --> 00:03:20.220
We can say they're Joe in good standing, Jane in good standing there, we've got Joe's GPA three point

46
00:03:20.220 --> 00:03:23.100
two and Jane's GPA is still empty.

47
00:03:24.380 --> 00:03:25.870
Let's make a little bit of a change here.

48
00:03:26.400 --> 00:03:33.540
I'm going to replace just the DOT or a line 60 to cut that out and replace it as follows.

49
00:03:36.100 --> 00:03:41.290
Here, what I'm doing is adding a system that are typewritten to the lambda expression, so this is

50
00:03:41.290 --> 00:03:45.490
a little ugly, but executing it as we're doing now gives us the following output.

51
00:03:48.730 --> 00:03:54.700
So I can say there that the print statement was only executed for Jane, so this is important to remember

52
00:03:54.940 --> 00:04:00.340
the method or will not execute the supplier code if the option of executing it is not empty.

53
00:04:03.030 --> 00:04:08.700
Now, let's look at the Orioles and the Orioles get methods and luck, the your method, these methods

54
00:04:08.700 --> 00:04:12.730
return a value of the same type contained by the optional and not an optional.

55
00:04:13.350 --> 00:04:18.590
The Orioles methods argument is the same type as that contained in the optional, whereas the Orioles

56
00:04:18.600 --> 00:04:21.270
get method takes a supplier an argument.

57
00:04:22.870 --> 00:04:25.710
So let's replace our popcorn character again with a comment that allowed.

58
00:04:28.530 --> 00:04:30.390
And replace it with the following.

59
00:04:32.950 --> 00:04:37.480
So you can see there that you see the Orioles simplifies the code a bit, allowing you to use simple

60
00:04:37.480 --> 00:04:42.250
flight values passed to the Orioles method and returned from the Orioles method.

61
00:04:42.700 --> 00:04:43.450
If we run this.

62
00:04:47.280 --> 00:04:50.010
You can see the output from this, it is the same as it was previously.

63
00:04:50.730 --> 00:04:51.010
All right.

64
00:04:51.030 --> 00:04:53.730
So next, let's add a method to our class.

65
00:04:53.730 --> 00:04:55.770
How optional test class or LABROT in the bottom here.

66
00:04:58.020 --> 00:05:02.630
Say it's a very, very simple method of turning a floating point value of 2.0, as well as printing

67
00:05:02.630 --> 00:05:03.940
a message to cyber in the method.

68
00:05:04.450 --> 00:05:06.940
Now we want to go back up and edit out or else.

69
00:05:07.540 --> 00:05:13.600
So instead of having this hard coded value or else 2.0, we could change that to to be optional.

70
00:05:16.540 --> 00:05:17.860
Get an estimate.

71
00:05:18.830 --> 00:05:19.610
If you run this.

72
00:05:22.950 --> 00:05:28.500
You can say when you're getting output from the get estimate method, basically we can say that that

73
00:05:28.500 --> 00:05:34.960
method was invoked in either case, whether the optional GPA attribute was empty or not yet occurred.

74
00:05:34.980 --> 00:05:42.930
Again, let's try replacing orals with or else throw one or two just coming out that line, replace

75
00:05:42.930 --> 00:05:45.870
it with thought or else throw.

76
00:05:47.600 --> 00:05:48.460
We're on this card now.

77
00:05:51.880 --> 00:05:57.400
You can say that now or else throw simply throws a no such exception when the value in the optional

78
00:05:57.400 --> 00:06:00.040
GPA is now, as it was, of course, for Jane.

79
00:06:00.400 --> 00:06:06.010
But finally now let's repeat the test with Oreo's get, which is similar to or else except it takes

80
00:06:06.010 --> 00:06:10.550
a supplier of type to interface instead of a value of the specified type T.

81
00:06:11.250 --> 00:06:13.540
So what we want to do is comment at the orals throw.

82
00:06:15.220 --> 00:06:24.970
And replace that the thought or else get it's going to be optional tests, Colin, Colin, get estimate

83
00:06:25.690 --> 00:06:26.440
running the code.

84
00:06:28.310 --> 00:06:35.090
There's the output knighting this time that unlike or else the supply code was not invoked for Jane

85
00:06:35.360 --> 00:06:37.190
when using the Orioles get method.

86
00:06:39.910 --> 00:06:43.720
All right, so let's review these three methods in a single table, because if you don't use them often,

87
00:06:43.990 --> 00:06:45.880
the differences can be a bit hard to memorize.

88
00:06:46.330 --> 00:06:52.930
Firstly, the old method, the return type is optional of typed the argument type to supply returns,

89
00:06:52.930 --> 00:06:59.050
optional of type T, the behavior of the argument as a method or lambda expression slash method.

90
00:06:59.050 --> 00:07:06.700
Reference supply is invoked only if the invoking optional value is no or else return type of type t

91
00:07:07.060 --> 00:07:12.910
the argument type is of type T or method which returns something of type T if method the methods executed

92
00:07:12.910 --> 00:07:15.700
regardless of invoking optional value being null or not.

93
00:07:16.360 --> 00:07:22.360
Then we got the third one there or else get return type is also t the argument top is a supply which

94
00:07:22.360 --> 00:07:24.940
returns something of type t the behavior.

95
00:07:25.180 --> 00:07:28.750
The supply is invoked only if the invoking optional value is no.

96
00:07:29.500 --> 00:07:34.060
I'll be discussing the other methods on the optional class in the context of the terminal operations.

97
00:07:34.060 --> 00:07:37.480
Find any and find first which return an optional.

98
00:07:37.810 --> 00:07:42.730
In addition, I'll be reviewing any match or match a non-match, those methods on stream which each

99
00:07:42.730 --> 00:07:43.860
return a billion value.

100
00:07:44.320 --> 00:07:46.360
So let's move on now to the next video.
