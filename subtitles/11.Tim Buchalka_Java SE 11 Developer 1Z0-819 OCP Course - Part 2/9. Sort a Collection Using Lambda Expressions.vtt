WEBVTT
1
00:00:05.210 --> 00:00:11.630
Previously in Section four of this course reviewed the co-operator and comparable interface for sorting

2
00:00:11.630 --> 00:00:16.010
collections, these interfaces are also the key to sorting stream pipelines.

3
00:00:16.760 --> 00:00:18.960
There are two methods which sort of stream.

4
00:00:19.760 --> 00:00:21.790
So we've got two versions of the sorted method.

5
00:00:22.070 --> 00:00:28.550
The first one has no parameters and returns a stream of type T, so basically returning a stream consisting

6
00:00:28.550 --> 00:00:31.570
of the elements of the stream sorted according to natural order.

7
00:00:32.120 --> 00:00:39.470
And the next overloaded version takes a comparator with a wildcard lower bound T and returns a stream

8
00:00:39.470 --> 00:00:43.200
of type T return to stream consisting of the elements of the stream.

9
00:00:43.460 --> 00:00:49.280
This time they sorted, according to the provided comparator, have already shown sorted in several

10
00:00:49.280 --> 00:00:50.530
previous samples of code.

11
00:00:50.960 --> 00:00:53.570
But in this video I would like to focus exclusively on.

12
00:00:54.870 --> 00:01:01.290
Has created a new class in stream operations project, we're going to call this one stream sort of.

13
00:01:08.880 --> 00:01:11.940
So this code consists firstly of a class called Guest.

14
00:01:13.140 --> 00:01:17.850
Which has two attributes, first and last, all of them protected for ease of use at the moment.

15
00:01:18.690 --> 00:01:22.710
You can see that we've got a constructor there to set both of those attributes, as well as a two string.

16
00:01:23.550 --> 00:01:25.170
And we've got our stream sort of class.

17
00:01:25.650 --> 00:01:31.700
So this main method firstly sets up some test data, a lot of 32, then demonstrating, creating a hash

18
00:01:31.710 --> 00:01:34.440
set from a list of unordered string elements.

19
00:01:34.650 --> 00:01:40.680
That's the test data with the final on 32, they were demonstrating using stream and printing each element.

20
00:01:41.610 --> 00:01:46.500
And I'm doing the same as the above, but using the intermediate operation sorted with no arguments,

21
00:01:46.500 --> 00:01:47.870
as you can see, a line forty seven.

22
00:01:48.690 --> 00:01:49.350
Let's run this.

23
00:01:52.330 --> 00:01:57.460
And we can see the output of both unsorted and then using the sort of operation on stream.

24
00:01:58.810 --> 00:02:05.140
OK, so easy enough right now, let's sort of stream of some guest objects into a pen, some code to

25
00:02:05.140 --> 00:02:05.740
a main method.

26
00:02:13.560 --> 00:02:18.960
So here I'm creating a stream of three guest objects, passing first and last names to the constructor

27
00:02:19.260 --> 00:02:21.720
and again using assorted intermediate operation.

28
00:02:23.080 --> 00:02:23.740
Let's run this.

29
00:02:26.790 --> 00:02:32.110
This time, you can see we've got an exception, you see we've got a class cast exception, their class

30
00:02:32.110 --> 00:02:35.200
guests cannot be cast to Jaradat Languedoc comparable.

31
00:02:36.740 --> 00:02:41.390
So like the classes that implement the collection interface, you cannot sort an object of a type that

32
00:02:41.390 --> 00:02:43.220
doesn't implement the compatible interface.

33
00:02:44.060 --> 00:02:45.460
Well, let's try changing the code.

34
00:02:45.470 --> 00:02:47.990
We don't make a change to our sorted method call.

35
00:02:48.560 --> 00:02:50.780
Now, the comparative class has two static methods.

36
00:02:50.810 --> 00:02:56.950
Natural order and reverse order, which can be invoked, had passed to the source method like this comparator

37
00:02:58.520 --> 00:03:00.050
dot would be natural order.

38
00:03:00.060 --> 00:03:05.660
First, a call to that the method, this change introduced to compile error and have a look at the error.

39
00:03:07.130 --> 00:03:13.670
Quiet type comparator is a wild card, lower bound for guessed, and it's been provided with a type

40
00:03:13.670 --> 00:03:14.230
T there.

41
00:03:14.540 --> 00:03:17.330
In other words, it hasn't been provided with the right parameter.

42
00:03:17.630 --> 00:03:21.250
COMPARATORS can only be used when the element to be sorted implements comparable.

43
00:03:21.440 --> 00:03:22.640
Obviously, we haven't done that yet.

44
00:03:22.850 --> 00:03:26.030
Noted previously that when we read it, we received a runtime exception.

45
00:03:26.210 --> 00:03:28.060
But here we getting compile time error.

46
00:03:28.640 --> 00:03:35.390
So now we've got two choices we can implement comparable or call sorted and pass a comparator lambda

47
00:03:35.400 --> 00:03:36.790
expression or method reference.

48
00:03:37.640 --> 00:03:38.540
So let's try doing that.

49
00:03:38.540 --> 00:03:42.710
So let's actually delete our natural order there from our sort of method.

50
00:03:42.710 --> 00:03:44.060
Call instead.

51
00:03:44.060 --> 00:03:54.290
Let's pass Alhambra expression so I can put parentheses s comma T then our token then s dot last dot

52
00:03:54.560 --> 00:03:59.000
compare to ignore case in parentheses t dot last.

53
00:04:00.710 --> 00:04:01.640
And now if we run this.

54
00:04:05.210 --> 00:04:09.140
We can confirm that the Lambert expression past does indeed sort by last name.

55
00:04:09.780 --> 00:04:10.830
Well, that's one way of doing it.

56
00:04:10.880 --> 00:04:11.810
Let's do it the other way.

57
00:04:12.710 --> 00:04:14.830
Let's go back up to our class guest at the top here.

58
00:04:14.840 --> 00:04:17.390
Our definition and implement comparable.

59
00:04:20.800 --> 00:04:27.100
And obviously, it's going to be a top guest so you can go brackets there and then we need to implement

60
00:04:27.250 --> 00:04:30.040
the comparable method to do that below the two string.

61
00:04:33.010 --> 00:04:39.970
Look at this method to guess is that compared to method and obviously that's eliminated the compile

62
00:04:39.970 --> 00:04:44.330
time ever there you can see that we're just returning last hour compared to ignore case.

63
00:04:44.350 --> 00:04:45.220
Oh, last year.

64
00:04:45.240 --> 00:04:45.590
Oh.

65
00:04:45.880 --> 00:04:48.250
Is the guest object passed to this method.

66
00:04:48.820 --> 00:04:56.170
And then we can go back now and change our stream pipeline to remove the lambrew expression that we

67
00:04:56.170 --> 00:05:02.560
just calling sorted without any parameters and we'll run it and we'll get the same result we saw when

68
00:05:02.560 --> 00:05:03.910
we passed the lambda expression.

69
00:05:04.400 --> 00:05:05.410
Oh so that's that.

70
00:05:07.980 --> 00:05:12.680
So by making it a comparable as we've done, you now have access to some convenience methods.

71
00:05:12.900 --> 00:05:19.670
So what we can do for our sort of ethical here, we can put comparator and call reverse order.

72
00:05:19.950 --> 00:05:25.710
And then if we were on that, you could say that that demonstrates that the order is now reversed.

73
00:05:26.850 --> 00:05:31.410
Now, I covered the comparatives methods in a previous video, but I do want you to try the following

74
00:05:31.410 --> 00:05:32.520
option with the sort of method.

75
00:05:33.260 --> 00:05:41.790
Go back to Comparator again and you've got to put colon colon reverse order that this case generated

76
00:05:41.790 --> 00:05:42.750
a compiler error.

77
00:05:44.760 --> 00:05:46.160
Can't resolve this order.

78
00:05:47.620 --> 00:05:53.560
This kind of area is hard to spot in samples of code on an exam question, a method of reference passed

79
00:05:53.560 --> 00:05:59.920
to the sort of operation must be a reference to a method whose arguments and return type matches comparators,

80
00:06:00.130 --> 00:06:03.370
compare method and not a method that returns a comparator.

81
00:06:03.970 --> 00:06:09.790
If the method returns a comparator as compared to the reverse order, you pass the method invocation

82
00:06:09.790 --> 00:06:13.900
statement as an argument spits out a method to our guest class.

83
00:06:15.070 --> 00:06:24.340
But down the bottom near done that will go back down to assorted methods and will change this comparative

84
00:06:24.340 --> 00:06:29.950
colon colon reverse order to be guest colon colon sought by first.

85
00:06:31.510 --> 00:06:34.740
So using a method reference on the new object that we pasted into guest.

86
00:06:35.290 --> 00:06:38.070
So go back up to our guest class again.

87
00:06:38.710 --> 00:06:41.980
Note that I did not implement Co-operator on Guest and the method.

88
00:06:41.980 --> 00:06:43.960
I just added this one down here.

89
00:06:44.320 --> 00:06:48.560
So Pi first is not named compare, but its method signature.

90
00:06:48.610 --> 00:06:54.760
Otherwise matches compare, compare and therefore can be used as a method reference to this operation.

91
00:06:55.960 --> 00:07:00.250
But let's also change the output of the last line as follows.

92
00:07:01.850 --> 00:07:03.580
That's because we're no sorry my first time.

93
00:07:04.270 --> 00:07:07.270
We want to actually show the airport the first and last name in that order.

94
00:07:07.270 --> 00:07:08.020
So we'll run this.

95
00:07:10.230 --> 00:07:15.660
Is sort of my first time, so there's no limit to the number of times you sought in a pipeline, you

96
00:07:15.660 --> 00:07:17.190
can mix and match how you thought.

97
00:07:17.700 --> 00:07:19.980
That's a some more code, the bottom of our mind method.

98
00:07:24.450 --> 00:07:29.760
So here what I'm doing is I'm first sorting by the length of the string value using peak to display

99
00:07:29.760 --> 00:07:36.030
the sort of strings and then sorting again is incorporated or natural order with a sort of method which

100
00:07:36.030 --> 00:07:38.550
is the same as calling sorted with no argument.

101
00:07:39.880 --> 00:07:40.470
Let's run that.

102
00:07:42.690 --> 00:07:44.660
And we can see the output at the bottom of the screen.

103
00:07:46.360 --> 00:07:51.010
All right, so this video I've reviewed the two sorted methods and you should remember these points,

104
00:07:51.430 --> 00:07:57.760
firstly, the no args sort of method can only be used on a stream of objects whose type implement comparable

105
00:07:58.750 --> 00:08:05.410
invoking, sorted and sorted with compressed natural order as a parameter are basically the same invocation.

106
00:08:05.770 --> 00:08:10.600
Except the second call will give you a compiler error if your object in the stream does not implement

107
00:08:10.600 --> 00:08:14.920
comparable the first because the runtime exception, if comparable, was not implemented.

108
00:08:16.410 --> 00:08:22.080
The comparative reverse order method can be passed to the sorted method, but again only for objects

109
00:08:22.080 --> 00:08:28.530
that implement comparable comparator calling card in reverse order and or comparative call color natural

110
00:08:28.530 --> 00:08:34.260
order are not valid method of references for the sort of method, the sort of method with a single argument

111
00:08:34.500 --> 00:08:40.350
accepts a lambda expression, method, reference or method invocation that represents the comparator.

112
00:08:40.530 --> 00:08:47.340
Compared to method, you can't sort any set of elements on a stream using the sort of method and passing

113
00:08:47.340 --> 00:08:47.520
it.

114
00:08:47.520 --> 00:08:50.430
A lambda expression representing a comparative.

115
00:08:52.080 --> 00:08:57.060
I just want to point out that although I've been using for each, there is an additional terminal operation

116
00:08:57.060 --> 00:09:02.730
for each ordered, if you execute either of these in a stream that's not parallel, your results will

117
00:09:02.730 --> 00:09:07.080
probably be the same, except in the streams where the order is indeterminate.

118
00:09:07.710 --> 00:09:13.200
You can see the differences when using parallel streams and out of this demonstration until the video

119
00:09:13.230 --> 00:09:14.400
on parallel streams.

120
00:09:15.000 --> 00:09:18.290
In the next video, I want to talk about grouping elements of the stream.

121
00:09:18.660 --> 00:09:20.610
So let's move on now to the next video.
