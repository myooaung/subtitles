WEBVTT
1

00:00:05.400  -->  00:00:08.800
All right, so we've still got that error that we saw at the end of the last video.

2

00:00:09.000  -->  00:00:10.500
We're going to leave that code for the moment.

3

00:00:10.860  -->  00:00:13.860
What we're going to do is add a field to the enclosing class.

4

00:00:14.460  -->  00:00:15.260
And come back here,

5

00:00:17.520  -->  00:00:18.520
enclosing class,

6

00:00:19.520  -->  00:00:22.520
and what we're going to do is create a field for this enclosing class

7

00:00:22.520  -->  00:00:25.320
and the field is going to be an instance of the inner class.

8

00:00:25.320  -->  00:00:29.120
So, let's go ahead and do that and actually put it here

9

00:00:29.520  -->  00:00:31.720
just below the instance field I've already got there.

10

00:00:32.620  -->  00:00:35.610
So you can see that's an instance field of the type of the inner class.

11

00:00:36.970  -->  00:00:40.170
All right, so now that we've done that, we'll go back to our code that currently has an error,

12

00:00:40.170  -->  00:00:41.170
down here the bottom.

13

00:00:42.770  -->  00:00:44.770
And the change we're making is rather subtle.

14

00:00:45.270  -->  00:00:48.870
Instead of capital I for Innerclass, we're using the field we've just created,

15

00:00:49.270  -->  00:00:52.270
the lowercase innerclass on both lines.

16

00:00:53.270  -->  00:00:57.270
And you can see by doing that, the error has disappeared.

17

00:00:57.970  -->  00:01:01.460
We've got code that compiles that's because we're now accessing a field

18

00:01:01.460  -->  00:01:02.960
on the enclosing class,

19

00:01:02.960  -->  00:01:05.560
again inner member class with the lowercase i

20

00:01:06.160  -->  00:01:09.160
is the field that we've added on line 22 there.

21

00:01:10.660  -->  00:01:13.860
So, the code's now working because we're using that field that we've just created

22

00:01:14.260  -->  00:01:17.260
and we're not attempting to access the inner class type directly.

23

00:01:17.620  -->  00:01:22.020
Now, this is also very hard to see in a code sample on an exam question,

24

00:01:22.020  -->  00:01:26.280
so be careful to look for an inner class being used like an attribute

25

00:01:26.280  -->  00:01:27.880
or a static nested class.

26

00:01:28.380  -->  00:01:29.580
Now, if we run this code now,

27

00:01:32.080  -->  00:01:35.080
we can see we get that last one – getInstanceName equals testing.

28

00:01:35.580  -->  00:01:39.380
It confirms now that we've changed the value on the inner class instance

29

00:01:39.380  -->  00:01:41.980
represented by the field in a member class.

30

00:01:42.380  -->  00:01:46.580
So, you can see we're setting the instance name to testing and then we're printingout that value

31

00:01:46.580  -->  00:01:49.940
from innerMemberClass.getInstanceName.

32

00:01:49.940  -->  00:01:52.240
And that's this code up here on line 38.

33

00:01:53.740  -->  00:01:57.440
All right, so the next one to examine, static members and their relationship

34

00:01:57.440  -->  00:01:58.640
to the inner class.

35

00:01:58.940  -->  00:02:02.540
So, what we're going to do is add some members to the inner member class

36

00:02:02.540  -->  00:02:04.140
of inner.Enclosing class

37

00:02:04.800  -->  00:02:09.160
So, in other words, this inner member class we've got here, so I'm going to basically put these

38

00:02:09.160  -->  00:02:12.160
directly below the other fields and methods we've got.

39

00:02:13.960  -->  00:02:17.160
You can see by doing that, again we're in the inner member class here,

40

00:02:17.160  -->  00:02:19.040
the code fails to compile.

41

00:02:19.040  -->  00:02:22.400
You cannot have static members on an inner class with one exception

42

00:02:22.900  -->  00:02:24.400
the declaration of a constant.

43

00:02:25.200  -->  00:02:28.000
A constant variable is a primitive type variable

44

00:02:28.000  -->  00:02:31.500
or one of type string that's declared final

45

00:02:31.500  -->  00:02:36.000
and can also be static initialized with a compile-time constant expression.

46

00:02:36.250  -->  00:02:37.920
So, I'm going to undo those changes,

47

00:02:39.520  -->  00:02:43.020
and instead, what I'm going to do is add a constant just to show that it does work.

48

00:02:43.420  -->  00:02:44.920
So, we'll paste in that new code,

49

00:02:46.620  -->  00:02:50.810
and you can see a constant static field there marked as final does work.

50

00:02:50.810  -->  00:02:54.610
So, that's considered a constant and that's why we can declare them on this inner class.

51

00:02:54.910  -->  00:02:58.780
You want to review the inner class members carefully on exam questions.

52

00:02:58.780  -->  00:03:02.770
Static members on an inner class should be a red flag for you to check

53

00:03:02.770  -->  00:03:05.770
for a compile time constant variable. Otherwise,

54

00:03:06.170  -->  00:03:07.570
you'll know the code is invalid.

55

00:03:08.270  -->  00:03:11.570
So moving on, let's add some more members to our inner member class.

56

00:03:15.170  -->  00:03:19.170
So, both of these declarations, the enum as well as the interface

57

00:03:19.470  -->  00:03:20.800
result in compile errors

58

00:03:20.800  -->  00:03:22.800
when trying to add them to the inner class.

59

00:03:22.800  -->  00:03:26.400
Remember that both an enum and interface are implicitly static

60

00:03:26.400  -->  00:03:29.000
and therefore can't be declared on an inner class.

61

00:03:29.000  -->  00:03:30.300
So, I'll undo that code as well.

62

00:03:32.500  -->  00:03:35.800
All right, so the next thing I want to do now is look at variable shadowing.

63

00:03:35.800  -->  00:03:39.400
What I’m going to do is add an attribute to the inner member class

64

00:03:39.900  -->  00:03:43.100
and the attribute's going to have the same names and attribute in the enclosing class.

65

00:03:43.700  -->  00:03:45.300
Again, just to confirm, I will run it again

66

00:03:46.180  -->  00:03:49.180
and you can see we're getting InnerMemberClass.getOuterName

67

00:03:49.180  -->  00:03:51.680
equals e’s instance and f's instance.

68

00:03:52.280  -->  00:03:53.880
if I add this extra code,

69

00:03:55.080  -->  00:03:58.380
we've added now a public string outer name to

70

00:03:58.780  -->  00:04:02.770
our inner member class, remembering that outer name is also defined up here

71

00:04:03.020  -->  00:04:05.820
in our enclosing class.
So now that I've done that,

72

00:04:09.820  -->  00:04:12.720
you can see that executing the code as I've done there

73

00:04:12.720  -->  00:04:15.620
has produced different results than previously,

74

00:04:15.620  -->  00:04:18.820
it's now printing the value from the inner member class attribute,

75

00:04:19.070  -->  00:04:21.170
demonstrating that the inner classes attribute

76

00:04:21.170  -->  00:04:25.530
has shattered the outer classes attribute because obviously, we saw e’s instance and f instances

77

00:04:25.530  -->  00:04:29.130
output on the screen, we're now seeing the word "outer'' there for both lines.

78

00:04:29.130  -->  00:04:33.330
So what if in this scenario, we actually wanted the outer classes value.

79

00:04:33.990  -->  00:04:36.490
So, what we can do is look at our get outer name method.

80

00:04:37.480  -->  00:04:42.080
The one that's defined down here in our and this is in our inner member class,

81

00:04:42.680  -->  00:04:45.980
and what I'll do is, I'll just paste in a replacement for this entire method.

82

00:04:49.640  -->  00:04:53.840
So, the reference EnclosingClass.this.outername that you can see there

83

00:04:53.840  -->  00:04:58.040
is another way to refer to the enclosing classes instance attribute

84

00:04:58.340  -->  00:04:59.340
outername.

85

00:04:59.340  -->  00:05:01.640
And this eliminates the shadowing in this case.

86

00:05:01.640  -->  00:05:02.940
So, to confirm that now,

87

00:05:03.600  -->  00:05:07.100
bearing in mind we saw "outer" showing in the two lines of output there,

88

00:05:07.100  -->  00:05:11.100
we're back to showing e’s instance and f's instance in the output there.

89

00:05:11.980  -->  00:05:14.480
All right, so let's end the video here, and in the next one,

90

00:05:14.680  -->  00:05:17.880
we're going to throw a local variable into the mix and see how that works.

91

00:05:18.380  -->  00:05:19.680
See you in the next video.
