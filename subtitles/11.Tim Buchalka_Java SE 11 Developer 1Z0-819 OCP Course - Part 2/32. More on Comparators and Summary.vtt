WEBVTT
1
00:00:05.300 --> 00:00:11.060
But so moving on from the last video, let's now use a list of pen, more code to our main method.

2
00:00:12.980 --> 00:00:14.960
We'll accept some of these imports.

3
00:00:22.240 --> 00:00:28.240
So I'm demonstrating here, sorting a list, passing static method invocations comparative to reverse

4
00:00:28.240 --> 00:00:35.170
order in comparative natural order to the Lescott sort method, which sorts by the natural order string

5
00:00:35.170 --> 00:00:37.130
and the reverse natural order.

6
00:00:37.810 --> 00:00:38.680
So let's try running that.

7
00:00:42.040 --> 00:00:46.330
You can see the tools they're using to reverse order, incorporated natural order.

8
00:00:47.600 --> 00:00:53.440
And next, more I want to do is use the custom comparator that I've created, then, of course.

9
00:00:54.780 --> 00:00:58.910
Was the last time copyrighter up here that we had created in the previous video.

10
00:01:01.340 --> 00:01:02.810
Some person back into our main method.

11
00:01:06.810 --> 00:01:13.000
But in this kind of test, creating an instance of the custom comparator on 74, I'm demonstrating using

12
00:01:13.000 --> 00:01:18.960
the custom comparator as an argument to sort of list using this sort, also demonstrating using the

13
00:01:18.960 --> 00:01:23.600
custom comparator as an argument to sort an array using a raised sort.

14
00:01:24.360 --> 00:01:25.200
So let's run this.

15
00:01:29.450 --> 00:01:33.950
And there's the output, as you can see, the comparator was successful and names are sorted by the

16
00:01:33.950 --> 00:01:38.630
last name now, regardless of how the name was supplied, obviously looking at the code.

17
00:01:41.350 --> 00:01:44.650
The birth name is not sought and erased or sought.

18
00:01:45.560 --> 00:01:50.660
And the cold alone, Ed, is an example of that sort, passing the comparator is the second argument.

19
00:01:51.640 --> 00:01:53.130
But let's continue on with this a little bit.

20
00:01:54.030 --> 00:01:59.280
Nadella is posting some more code in our main method, this code demonstrating how to use the reversed

21
00:01:59.280 --> 00:02:02.340
default method supplied to you by the comparator interface.

22
00:02:03.090 --> 00:02:05.010
Let's have a go at that and run the code.

23
00:02:06.260 --> 00:02:10.100
I'm looking at a car there for reversed city airport on screen.

24
00:02:11.220 --> 00:02:17.310
So what happens when we add a no to our test data we've got during that, that's from the code.

25
00:02:20.080 --> 00:02:25.120
They can add a note to the string of itself, but sorting it or using this start of with an array with

26
00:02:25.120 --> 00:02:27.870
no will cause no problem exceptions, I won't show that here.

27
00:02:28.600 --> 00:02:32.830
But obviously in the case here and I'm using array lists, the card works.

28
00:02:32.830 --> 00:02:34.260
You can say null has been sorted.

29
00:02:34.720 --> 00:02:40.180
And by the way, I discussed a that linked one zero eight one nine part one course, specifically Section

30
00:02:40.180 --> 00:02:41.320
five, working with arrays.

31
00:02:41.320 --> 00:02:46.960
If you need a recap, suffice to say here that a write out sort does not throw no pointer exception.

32
00:02:47.260 --> 00:02:49.660
And we did say that now was sort of the front of the list.

33
00:02:50.380 --> 00:02:55.180
The comparator interface applies with two static methods that allow you to place your nose either at

34
00:02:55.180 --> 00:02:56.710
the beginning or into the list.

35
00:02:56.710 --> 00:02:58.970
And we looked at those in the slides in the previous video.

36
00:02:59.480 --> 00:03:03.550
Let's have a look at testing those out some more to our main method here.

37
00:03:05.670 --> 00:03:12.160
So I kind of posted in there to that combining the comparative static method was first, but the default

38
00:03:12.160 --> 00:03:15.520
method reversed to reverse the names, but put the novelty first.

39
00:03:15.910 --> 00:03:21.130
And the second example combines the comparative static method in those last and passing it to the custom

40
00:03:21.160 --> 00:03:23.170
comparator last name comparator.

41
00:03:24.490 --> 00:03:26.130
Let's run this and check the results.

42
00:03:28.300 --> 00:03:33.730
And you can see that now at the top for the first one is incorporated that knows first and the now is

43
00:03:33.730 --> 00:03:36.880
showing at the bottom, the second example is incorporated.

44
00:03:37.060 --> 00:03:37.750
Those last.

45
00:03:38.270 --> 00:03:43.540
Finally, the comparative interface provides static methods to let you sort an object without implementing

46
00:03:43.540 --> 00:03:48.700
either a comparator or comparable interface method by building a comparator for you.

47
00:03:49.120 --> 00:03:50.580
So let's check that out in code.

48
00:03:50.590 --> 00:03:51.940
So need a class for this.

49
00:03:54.230 --> 00:03:56.600
Because when comparing example.

50
00:04:07.910 --> 00:04:13.780
This code consists of a person class, which consists of a first timer, the last time attribute Borsuk,

51
00:04:13.890 --> 00:04:15.010
I get a method for both.

52
00:04:15.290 --> 00:04:19.370
Both I got a constructor that takes arguments, that sets these attributes.

53
00:04:20.360 --> 00:04:26.930
We've also got a two string method, so note here that the class itself doesn't implement either comparable

54
00:04:26.930 --> 00:04:33.100
or comparator and scrolling on down, looking at our main method for comparing example, class with

55
00:04:33.110 --> 00:04:39.500
creating an unsorted list of several persons and then calling the sort method passing it changed static

56
00:04:39.500 --> 00:04:39.950
methods on.

57
00:04:40.820 --> 00:04:44.630
So they're comparing method returns a comparative based on the guitar method.

58
00:04:44.630 --> 00:04:50.480
Get last name, change it to the then comparing method which returns a comparator based on the method

59
00:04:50.480 --> 00:04:51.420
get first name.

60
00:04:51.890 --> 00:04:55.540
This results in a list of persons being sorted by last name, then first name.

61
00:04:56.000 --> 00:04:57.530
So to confirm that it's from the code.

62
00:04:59.620 --> 00:05:04.630
And you can see the airport on screen, so in this video, in the previous one, I've reviewed the comparable

63
00:05:04.630 --> 00:05:09.130
and copyrighter interfaces and demonstrated examples of both in samples of code.

64
00:05:11.350 --> 00:05:14.800
I want you to review and try to remember this chart of differences for the exam.

65
00:05:15.130 --> 00:05:18.910
Remember, you can download the slides if you need to check out the last video in the course.

66
00:05:19.420 --> 00:05:23.890
So looking at the feature, any class implementing the interface becomes sortable in collections at

67
00:05:23.890 --> 00:05:24.490
assorted.

68
00:05:24.760 --> 00:05:27.820
That's true for a comparable infosphere comparator.

69
00:05:28.530 --> 00:05:33.850
The comparison method uses the instance as one of the objects in the comparison is truthful, comparable

70
00:05:34.030 --> 00:05:34.570
and false.

71
00:05:34.570 --> 00:05:41.410
For comparative to method name is compare to the comparable and compare for comparator the package javadoc

72
00:05:41.440 --> 00:05:43.270
length for comparable Thanjavur.

73
00:05:43.270 --> 00:05:44.770
Thank you to the comparative.

74
00:05:46.580 --> 00:05:51.860
The number of parameters, one for comparable and two for comparative, has different methods of job

75
00:05:51.860 --> 00:05:56.270
rate is false for comparable but true for comparator static methods.

76
00:05:56.270 --> 00:06:02.330
As such, a survival is false for a comparable but true for comparator and generally used to order objects

77
00:06:02.330 --> 00:06:03.410
in an additional way.

78
00:06:03.590 --> 00:06:07.160
The natural ordering falls for comparable but true for comparator.

79
00:06:07.810 --> 00:06:08.170
All right.

80
00:06:08.180 --> 00:06:09.320
So we'll finish the video here.

81
00:06:09.590 --> 00:06:14.600
In the next one, I'll be demonstrating additional convenience methods for working with collections.

82
00:06:14.840 --> 00:06:17.650
These are defined in the Javadoc YouTube collections class.

83
00:06:17.930 --> 00:06:19.010
See you in the next video.
