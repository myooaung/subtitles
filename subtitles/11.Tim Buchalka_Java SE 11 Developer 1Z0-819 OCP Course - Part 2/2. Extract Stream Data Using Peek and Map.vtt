WEBVTT
1
00:00:05.300 --> 00:00:11.870
The first set of stream operations, I'll review a peak map and flat map, all three are intermediate

2
00:00:11.870 --> 00:00:17.750
operations and you can use as many of these operations as many times as you wish on the stream pipeline.

3
00:00:18.170 --> 00:00:22.940
Remember that operations are lazy and require a terminal operation to execute.

4
00:00:23.510 --> 00:00:29.690
The peak operation performs a provided action on each element as elements are consumed from the resulting

5
00:00:29.690 --> 00:00:30.200
string.

6
00:00:30.770 --> 00:00:36.620
This method exists mainly to support debugging, allowing you to see elements as they fly past a certain

7
00:00:36.620 --> 00:00:38.150
point in a pipeline.

8
00:00:40.230 --> 00:00:41.940
It's method declaration as shown below.

9
00:00:42.420 --> 00:00:49.650
We've got a stream of top tea, Metaldyne peak in as a perimeter 86 consumer with a wild card, lower

10
00:00:49.650 --> 00:00:50.100
bound.

11
00:00:50.970 --> 00:00:56.490
Any lambda expression or method reference past to this operation must meet the requirements of the functional

12
00:00:56.490 --> 00:00:57.810
interface consumers method.

13
00:00:58.080 --> 00:01:02.780
They could see the method name accept takes a parameter of type T with no return type.

14
00:01:03.270 --> 00:01:07.210
So T in this context represents the top of the element on the stream.

15
00:01:07.560 --> 00:01:11.850
In other words, the element on the stream will be the parameter to a method that returns void.

16
00:01:12.930 --> 00:01:14.430
So let's switch over to intelligence.

17
00:01:14.940 --> 00:01:19.290
We need to create a new project, which I've already done, of current stream operations for this section

18
00:01:19.290 --> 00:01:22.980
of the course, then we need a new class because this one element DOT student.

19
00:01:22.990 --> 00:01:24.810
So creating a package here.

20
00:01:28.770 --> 00:01:31.800
Limit student posting the code.

21
00:01:32.580 --> 00:01:38.520
All right, so this class is a very straightforward Pirjo plain out Java object, which by using in

22
00:01:38.550 --> 00:01:39.960
the sample code for this video.

23
00:01:40.500 --> 00:01:44.090
Students have a randomly generated name and it will go to the right A.

24
00:01:45.760 --> 00:01:49.770
We've got an initial idea to assign a name at random in the student I.D..

25
00:01:50.140 --> 00:01:51.310
We've got some getters and setters.

26
00:01:53.650 --> 00:01:54.920
So we need another class here.

27
00:01:54.970 --> 00:01:57.320
We're going to call this one pick examples.

28
00:01:57.340 --> 00:01:58.780
It's going to be using this class.

29
00:01:58.780 --> 00:01:59.560
We've created that.

30
00:01:59.590 --> 00:02:00.640
Go ahead and create that.

31
00:02:07.200 --> 00:02:12.180
So this coat is quite into the main method there you see we're setting up a new instance, pick examples,

32
00:02:12.180 --> 00:02:17.040
and then I'm using the collect, which is the collectors not to list terminal operation.

33
00:02:17.430 --> 00:02:20.450
They'll be discussing the collect operation detail and allow the video.

34
00:02:20.670 --> 00:02:25.470
Suffice to say here that it returns the results of the stream operation as a list.

35
00:02:25.950 --> 00:02:32.700
So you can see that kind 21 is calling a and then I'm creating a list of student limited to five using

36
00:02:32.700 --> 00:02:34.490
a stream to generate operation.

37
00:02:34.500 --> 00:02:39.880
And then I'm printing out the list because I'm demonstrating the peak operation, using the system got

38
00:02:39.900 --> 00:02:43.860
out coal and coal and print method of reference as a parameter to the operation.

39
00:02:43.860 --> 00:02:50.040
On a second stream generated from the first list of student elements of the stream are returned to another

40
00:02:50.040 --> 00:02:50.400
list.

41
00:02:50.800 --> 00:02:53.810
There were printing the first list to confirm that peak has no side effects.

42
00:02:54.420 --> 00:02:57.720
Then we're comparing the two lists and confirming if they are equal.

43
00:02:58.100 --> 00:02:59.060
So let's run this now.

44
00:03:01.200 --> 00:03:02.340
OK, so there's the output.

45
00:03:03.800 --> 00:03:09.290
So you can see here that the peak operation printed each of the student elements and that comparison

46
00:03:09.290 --> 00:03:14.900
of the lists confirmed that the peak operation had no side effect on the elements in the list.

47
00:03:15.800 --> 00:03:20.180
Now, that said, that's not to say that you can't change the data using a peak operation.

48
00:03:21.020 --> 00:03:21.980
Let's have a look at doing that.

49
00:03:22.820 --> 00:03:25.190
Gladys method to pick examples class.

50
00:03:27.370 --> 00:03:30.280
This method adds the name Spice Doe to the student's name.

51
00:03:30.700 --> 00:03:35.590
Let's now exercise this method so pacem code at the bottom of our mind method.

52
00:03:38.790 --> 00:03:44.430
OK, there's the coast to the coast creating a stream from the first list and uses the peak operation

53
00:03:44.430 --> 00:03:50.730
as before, but the method it's passed to the peak operation operation is the method I just added to

54
00:03:50.730 --> 00:03:53.580
pick examples which alters the name of the students.

55
00:03:53.880 --> 00:03:56.940
So you can see the reference to pick examples, coal and coal and change student.

56
00:03:57.480 --> 00:03:58.890
Again, that alters the name of the students.

57
00:03:58.920 --> 00:03:59.580
Let's run this.

58
00:04:02.840 --> 00:04:08.150
Down the bottom of the screen, you can see all the names they have now got space and DOE added to the

59
00:04:08.150 --> 00:04:08.870
end of the name.

60
00:04:11.550 --> 00:04:16.710
So you can see from this that the requirements for a peak operation cannot limit it to operations with

61
00:04:16.710 --> 00:04:17.580
no side effects.

62
00:04:17.970 --> 00:04:22.860
You can also say that this method has changed the data elements referenced by all the lists.

63
00:04:23.340 --> 00:04:28.170
Generally, if you want to transform data on a stream, it's better practice to use a mapping function.

64
00:04:28.680 --> 00:04:29.480
Let's have a look at that.

65
00:04:29.880 --> 00:04:35.310
So the map operation applies a given function to the elements on a stream and returns the result as

66
00:04:35.310 --> 00:04:36.120
another stream.

67
00:04:36.720 --> 00:04:38.090
So I can see the method declaration.

68
00:04:38.100 --> 00:04:45.070
There are an angle brackets, stream of type are a map and then function with two top seven.

69
00:04:45.080 --> 00:04:45.510
We've got it.

70
00:04:45.630 --> 00:04:47.250
A wildcard, lower banti.

71
00:04:47.580 --> 00:04:49.290
We've also got a wildcard.

72
00:04:49.290 --> 00:04:51.210
Upper bound are the function.

73
00:04:53.300 --> 00:04:58.640
Now, any lambda expression or method reference past to this operation must meet the requirements of

74
00:04:58.640 --> 00:04:59.210
the function.

75
00:04:59.240 --> 00:05:07.400
The device functions method, i.e. the apply method parameter of type T returning type are to in this

76
00:05:07.400 --> 00:05:10.160
context represents the type of the element on the stream.

77
00:05:10.610 --> 00:05:15.800
So in other words, the element on the stream will be the parameter to a method that can return a result

78
00:05:15.800 --> 00:05:16.540
of any type.

79
00:05:17.090 --> 00:05:20.900
No relationship between the type of parameter and the type of result is required.

80
00:05:22.480 --> 00:05:26.870
We get back to our code, we need another class here, we're going to call this one map examples.

81
00:05:36.540 --> 00:05:41.760
The right this hour class, this code is very similar to the examples code we looked at earlier.

82
00:05:42.060 --> 00:05:44.870
It contains two methods scrolling past the main method.

83
00:05:44.880 --> 00:05:47.070
First, there's our change student method.

84
00:05:47.570 --> 00:05:53.820
So this differs from the peak examples change student method because I'm updating the past student object,

85
00:05:53.970 --> 00:05:57.870
setting the name and then returning the student object from the method.

86
00:05:58.200 --> 00:06:03.510
This method has the correct signature for a function lambda expression and go back to our main method.

87
00:06:04.620 --> 00:06:10.170
Using the collectors to lift terminal operation again, we're creating a list of students limited to

88
00:06:10.170 --> 00:06:15.120
five using stream generate operation, I'm demonstrating the map operation.

89
00:06:16.910 --> 00:06:22.250
Using the map examples change student method we just talked about using that method reference as a parameter

90
00:06:22.520 --> 00:06:28.520
to the operation on the stream generated from the first list of student elements of the stream are returned

91
00:06:28.520 --> 00:06:29.180
to another list.

92
00:06:29.510 --> 00:06:34.940
Then we we're comparing the two lists, elements in the last line of code from this.

93
00:06:37.390 --> 00:06:43.330
And these our output, you can see that this had basically the same results as peak examples using peak.

94
00:06:45.750 --> 00:06:50.650
The map method is a better option because it's expected that map is transforming data.

95
00:06:51.150 --> 00:06:57.000
With that being said, be very careful to check exam questions using peak to see side effects are being

96
00:06:57.000 --> 00:06:57.630
introduced.

97
00:06:57.980 --> 00:07:03.660
You can use MAP to do almost anything, including transforming data from one data type to another.

98
00:07:04.670 --> 00:07:10.660
Let's create a map of our students for the next example, we need to add a method to this class as the

99
00:07:10.820 --> 00:07:11.330
first.

100
00:07:14.000 --> 00:07:14.840
Except that in port.

101
00:07:16.880 --> 00:07:23.210
Both abstract map and map, this method returns an object of type mapped on entry, which will be able

102
00:07:23.210 --> 00:07:27.530
to collect into a set denoted there are better ways to create a set from a stream.

103
00:07:27.530 --> 00:07:29.660
But I'm just demonstrating transformations here.

104
00:07:30.410 --> 00:07:36.060
So let's play some card at the bottom of our main method to exercise this method, septet input.

105
00:07:36.590 --> 00:07:42.070
So here I am using the collect operation with collectors to set to create a set.

106
00:07:42.510 --> 00:07:45.470
Now I'm going to discuss all the options for collecting an upcoming video.

107
00:07:45.920 --> 00:07:50.030
I'm using the map operation here, though, passing it to the method of reference of the method I just

108
00:07:50.030 --> 00:07:50.330
added.

109
00:07:50.360 --> 00:07:51.350
That's map student.

110
00:07:52.430 --> 00:07:53.970
I submit that we just edit down here.

111
00:07:55.490 --> 00:08:02.510
So here are a stream of student entries into a stream of entry that's key value objects, which includes

112
00:08:02.510 --> 00:08:04.560
the key and the student element is the value.

113
00:08:04.970 --> 00:08:05.660
If you run this.

114
00:08:08.050 --> 00:08:11.830
There's the output, you can see the key values in the set we created.

115
00:08:12.550 --> 00:08:12.800
All right.

116
00:08:12.820 --> 00:08:15.340
So there's three other versions of the map operations.

117
00:08:15.760 --> 00:08:17.770
Let's look at discussing those in the next video.
