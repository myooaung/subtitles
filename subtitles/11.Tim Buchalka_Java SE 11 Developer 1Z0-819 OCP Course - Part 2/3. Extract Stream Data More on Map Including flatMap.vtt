WEBVTT
1
00:00:05.320 --> 00:00:11.320
Right, so there's three other versions of the map operations, map to double map to into a map to long,

2
00:00:11.590 --> 00:00:17.230
which transform a stream to a double stream in stream or long stream, respectively, representing streams

3
00:00:17.230 --> 00:00:18.280
of primitive data.

4
00:00:18.730 --> 00:00:19.570
Let's have a look at that.

5
00:00:19.870 --> 00:00:22.450
So we need to pay some code into our main method.

6
00:00:23.080 --> 00:00:25.780
This is our map examples class from the previous video.

7
00:00:26.710 --> 00:00:27.810
We don't accept that import.

8
00:00:30.590 --> 00:00:35.870
So starting at line fifty is the car that I've posted in, and this is looking at it in stream using

9
00:00:35.880 --> 00:00:41.800
map and a stream using map to end and its stream is a stream event, the primitive data talk.

10
00:00:42.710 --> 00:00:43.550
So let's run this.

11
00:00:46.690 --> 00:00:51.090
So there's the output from this segment tonight appear to be any different, right?

12
00:00:51.990 --> 00:00:58.290
Will the output from an extremist map and an output from a stream using map to end if we look at this

13
00:00:58.290 --> 00:00:58.710
code?

14
00:00:59.460 --> 00:01:04.680
Let's try changing map a lot of 53 for our instrument and iterate to map to int.

15
00:01:07.620 --> 00:01:13.530
They could say this is resulting in a pilot error, the method map to end is not a valid operation on

16
00:01:13.830 --> 00:01:14.790
an extreme.

17
00:01:15.820 --> 00:01:16.480
Listen to that.

18
00:01:18.470 --> 00:01:21.680
So let's instead try adding a map method to the second stream.

19
00:01:22.600 --> 00:01:29.470
Let's go down here so I will add a map method directly after the map to end for our stream iterate.

20
00:01:29.950 --> 00:01:38.710
So dot map to parentheses, but is an error token, it's divided by 1000 close in parentheses.

21
00:01:39.400 --> 00:01:42.400
So that actually compiles fine, but not out of here.

22
00:01:42.610 --> 00:01:47.570
That intelligence is offering you additional information about the stream in the form of inlay hints.

23
00:01:48.040 --> 00:01:51.370
By the way, if you've got eyes turned on, make sure method changes.

24
00:01:51.370 --> 00:01:52.510
Check in the dialog window.

25
00:01:53.520 --> 00:01:55.320
I just make sure that you have got eyes turned on.

26
00:01:55.350 --> 00:02:04.440
I got to file settings, preferences if you're on a Mac and Ed in my Hintze Java, so make sure.

27
00:02:04.440 --> 00:02:05.550
And the method chanes.

28
00:02:06.820 --> 00:02:12.160
You've got that turned on or checked, rather, show hints, which I've already got, so I can see these

29
00:02:12.160 --> 00:02:14.460
inlay hints are actually very useful.

30
00:02:14.770 --> 00:02:17.460
What's actually happening when you use a map to internal stream?

31
00:02:18.310 --> 00:02:20.200
So I'm starting out with a stream of integer.

32
00:02:20.410 --> 00:02:22.030
You can say that with the hints online.

33
00:02:22.050 --> 00:02:28.000
Fifty eight to the right hand side and after map to it, you can see there that the stream is now an

34
00:02:28.000 --> 00:02:28.600
inch stream.

35
00:02:28.600 --> 00:02:29.980
You can see that online 60.

36
00:02:30.510 --> 00:02:32.890
So that's very useful to see when the change occurred.

37
00:02:33.250 --> 00:02:39.010
So what happens now if I add another map to operation after the map operation down here?

38
00:02:39.670 --> 00:02:41.550
So I'm going at exactly the same.

39
00:02:41.610 --> 00:02:43.870
I'm going to take a copy of line 60.

40
00:02:45.360 --> 00:02:46.170
And pasted in.

41
00:02:48.440 --> 00:02:53.060
And you can say by doing that, I've introduced a compiler error on the second map to int because I

42
00:02:53.060 --> 00:02:57.110
now have it in stream and map to it is not a valid operation for it.

43
00:02:57.320 --> 00:02:58.310
So I will undo the code.

44
00:03:04.390 --> 00:03:11.050
Right now, let's look at flat map, the flat map operation applies to a one to many transformation

45
00:03:11.260 --> 00:03:16.300
to the elements of the stream and flattens the resulting elements into a new stream.

46
00:03:18.390 --> 00:03:24.870
So submit the declaration is shown below the TV camera angle brackets, a stream of top are flat map

47
00:03:25.320 --> 00:03:30.810
the parameters function, which firstly takes a wildcard lower bounty, and then the second one is a

48
00:03:30.810 --> 00:03:35.860
wildcard upper bound stream of top wildcard up about ah.

49
00:03:36.300 --> 00:03:38.190
So let's compare that with that for a moment.

50
00:03:38.580 --> 00:03:43.890
And remember in the map definition we talked about earlier, both return of stream, both except the

51
00:03:43.890 --> 00:03:49.160
lambda expression or method reference that represents the apply method as shown below.

52
00:03:49.530 --> 00:03:54.540
I we've got apply parameter type T which returns the top are the difference with these two.

53
00:03:54.540 --> 00:03:56.520
Is the object returned from the method.

54
00:03:57.120 --> 00:03:59.580
You could say that flat map is returning a stream.

55
00:03:59.970 --> 00:04:02.120
T represents the top of the element on the stream.

56
00:04:02.550 --> 00:04:05.190
So it's easy to say this operation doesn't sample code.

57
00:04:05.790 --> 00:04:07.050
So let's go back to our code.

58
00:04:07.080 --> 00:04:12.150
We're going to create another entity or element for our streams and we'll call this one course.

59
00:04:22.820 --> 00:04:24.460
And it should have been in the package.

60
00:04:24.830 --> 00:04:26.090
Let's just put it in there.

61
00:04:28.890 --> 00:04:30.020
It is, of course.

62
00:04:30.990 --> 00:04:34.680
This class is just another Podio, but this one has a relationship to student.

63
00:04:35.040 --> 00:04:38.790
You say that we've got an attribute student list, which is a list of student.

64
00:04:39.290 --> 00:04:40.950
It's also got a constructor down here.

65
00:04:42.940 --> 00:04:48.940
The takes, of course, name in and in value and generates a student list using stream to generate limiting

66
00:04:48.940 --> 00:04:54.940
the stream to the past as the second argument, each new student's name is then changed to include the

67
00:04:54.940 --> 00:04:57.140
course name for demonstration purposes.

68
00:04:57.430 --> 00:05:02.890
The stream is returned to the attribute of list of student is in the terminal operation collect.

69
00:05:03.850 --> 00:05:05.020
They've only got one guitar here.

70
00:05:05.260 --> 00:05:09.250
Come down and see that student lists just to simplify the code.

71
00:05:09.280 --> 00:05:12.010
We've also got a two string method there to print the course.

72
00:05:12.040 --> 00:05:13.030
Name a student list.

73
00:05:13.950 --> 00:05:19.140
But of this class is going to be used as a flat map example, so we need to create that class flat map

74
00:05:19.140 --> 00:05:19.710
example.

75
00:05:30.530 --> 00:05:37.040
This class, in its main method is declaring a local variable of lists of student, we're creating a

76
00:05:37.040 --> 00:05:43.910
stream, we're instantiating three courses in the respective student lists using the flat map operation

77
00:05:44.480 --> 00:05:50.020
to create a stream of student objects using the courses, get student lists or stream method, then

78
00:05:50.030 --> 00:05:53.710
returning it all down the bottom as a list of student using the collectors.

79
00:05:53.730 --> 00:05:57.510
The two lists, they're also printing out the list of students.

80
00:05:58.310 --> 00:05:58.970
Let's run this.

81
00:06:00.680 --> 00:06:04.700
And there's the airport of a complete student population, I think you'd agree that's pretty nifty,

82
00:06:04.700 --> 00:06:05.010
right?

83
00:06:05.900 --> 00:06:10.200
We can at peek into the pipeline if you wanted to view each course.

84
00:06:10.220 --> 00:06:11.330
So let's have a go at doing that.

85
00:06:12.730 --> 00:06:22.590
So he come down here after the last new course and put up peak and in parentheses system, got out cold

86
00:06:22.600 --> 00:06:28.900
and and peatland obviously monitoring that before the flat map operation left run this.

87
00:06:30.200 --> 00:06:32.000
We've got more details showing, as you can see.

88
00:06:33.960 --> 00:06:35.280
There's the various output.

89
00:06:36.720 --> 00:06:41.790
Basically, the peak operations are putting each course and its students before the final student list

90
00:06:41.790 --> 00:06:42.470
is printed out.

91
00:06:45.100 --> 00:06:50.890
So in this video and the last one I've covered, the intermediate operations, peak map and flat map,

92
00:06:51.490 --> 00:06:57.370
the peak operation is generally used to inspect the stream pipeline using a consumer lambda expression

93
00:06:57.370 --> 00:07:01.990
that operates on the stream element but returns no value or object.

94
00:07:02.560 --> 00:07:08.500
The map operation performs one to one mappings and data transformations using a functional lambda expression

95
00:07:08.620 --> 00:07:12.790
that operates on the stream element, a return to the same or another element.

96
00:07:13.510 --> 00:07:19.210
The flat map operation performs of one to many mapping using a functional expression that operates on

97
00:07:19.210 --> 00:07:23.170
the stream element returns a stream of the same or some other element.

98
00:07:23.710 --> 00:07:28.960
Moving on in the next video, I'll be reviewing the optional class before proceeding with discussions

99
00:07:29.140 --> 00:07:30.700
of other stream operations.

100
00:07:30.910 --> 00:07:32.440
So I will see you in the next video.
