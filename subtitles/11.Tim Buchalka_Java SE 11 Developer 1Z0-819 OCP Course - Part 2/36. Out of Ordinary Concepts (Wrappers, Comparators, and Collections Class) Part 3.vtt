WEBVTT
1
00:00:05.270 --> 00:00:10.070
In this video, I want to do one more exercise with generics and wild cards, which I hope will help

2
00:00:10.070 --> 00:00:11.980
you understand upper band and lower parts.

3
00:00:12.350 --> 00:00:14.990
The exam spends a lot of time testing and knowledge of wild cards.

4
00:00:15.510 --> 00:00:18.350
So we need a new class for this in our collections project.

5
00:00:18.650 --> 00:00:20.360
Going to call this one generic container.

6
00:00:29.630 --> 00:00:35.870
But so this code consists of a single class ARAU class, the generic container, which wraps the list

7
00:00:36.140 --> 00:00:37.300
passed to the constructor.

8
00:00:37.340 --> 00:00:42.410
You can say the code they allowed 14, the constructor allowed 17 there would allow us access to the

9
00:00:42.410 --> 00:00:44.420
list itself using the method.

10
00:00:44.420 --> 00:00:44.990
Michette.

11
00:00:46.000 --> 00:00:46.840
On 22.

12
00:00:47.770 --> 00:00:52.970
And that gets an element in the list and my ad line, twenty seven, which adds an element to the list.

13
00:00:53.240 --> 00:00:59.600
So it's an interesting method there, which Principlist I've included a main method you can see, which

14
00:00:59.600 --> 00:01:05.070
creates an instance of the generic container putting in a new instantiated list, Aurora relist, and

15
00:01:05.070 --> 00:01:06.710
there's a couple of elements and then puts them about.

16
00:01:07.680 --> 00:01:08.650
A stop, a rally that.

17
00:01:10.550 --> 00:01:12.560
All right, so far, so good, that's pretty basic.

18
00:01:13.720 --> 00:01:18.670
So looking at this, let's just assume that have been tasked with the job of making this class generic.

19
00:01:20.020 --> 00:01:24.060
I could start by changing the declaration to include a top parabola cop here and do that.

20
00:01:25.050 --> 00:01:26.220
So angle brackets.

21
00:01:27.140 --> 00:01:29.270
There's a lot on that plane coming into the main method.

22
00:01:31.220 --> 00:01:38.030
Let's make a change here, so generic container will make this of top secret, so secret sequence in

23
00:01:38.030 --> 00:01:42.560
the angle brackets and the right hand side here, we'll just use the term operator.

24
00:01:43.850 --> 00:01:46.400
But so the coach compiling obviously, we can run this.

25
00:01:49.330 --> 00:01:50.770
And it really works like it should.

26
00:01:52.450 --> 00:01:57.550
But my job's not really done because I haven't really typed in the operations in the container.

27
00:01:58.800 --> 00:02:03.270
They could say that I could still had a string and an end to the container list, which may or may not

28
00:02:03.270 --> 00:02:04.140
be what I desire.

29
00:02:04.920 --> 00:02:06.900
So let's type the wrapped list as follows.

30
00:02:06.930 --> 00:02:08.610
So I will come up here to line 14.

31
00:02:10.920 --> 00:02:13.380
So make a list of top 10 sateen angle brackets.

32
00:02:14.960 --> 00:02:21.290
That is why we've now got an error on the mind method required to be provided with object, the compiler

33
00:02:21.290 --> 00:02:23.940
knows you shouldn't be adding an object to a list of type T.

34
00:02:24.320 --> 00:02:30.520
So, ladies, here for a moment, we'll go back up and change our list or rep list to use a lower band.

35
00:02:31.160 --> 00:02:32.450
So we're going to make it instead.

36
00:02:34.560 --> 00:02:37.950
Card, questionmark super to have changed that.

37
00:02:37.980 --> 00:02:42.090
There are also need to change the a declaration to the same.

38
00:02:42.090 --> 00:02:48.090
So Renagel brackets for constructor wildcard super as well, exactly the same as we've done for our

39
00:02:48.090 --> 00:02:48.720
wrap list.

40
00:02:49.660 --> 00:02:52.690
Now, know by doing that, that still hasn't fixed the error.

41
00:02:52.710 --> 00:02:57.010
The compiler error on the Myat object, you might be asking at this point, why not?

42
00:02:57.360 --> 00:03:02.490
Doesn't this declaration of the wrapped list mean that any object can be inserted into the list as long

43
00:03:02.490 --> 00:03:03.990
as it's less specific than T?

44
00:03:04.680 --> 00:03:05.550
Well, actually, it doesn't.

45
00:03:05.850 --> 00:03:12.750
It only means that any list assigned to this field must be typed to a super class of T or typed to T..

46
00:03:13.110 --> 00:03:16.610
If the list is typed exactly to T, adding an object would cause an error.

47
00:03:17.490 --> 00:03:21.750
So let's explore this by changing the construction of the generic container in the main method.

48
00:03:22.690 --> 00:03:29.200
So what they do is make a change to like 38 to our list and make a list of top shall sequence charts

49
00:03:29.200 --> 00:03:29.710
sequence.

50
00:03:30.770 --> 00:03:31.670
In income brackets.

51
00:03:32.600 --> 00:03:39.170
And a new array list, we're also going to make that of top secret, it's pretty short sequence also

52
00:03:39.170 --> 00:03:39.860
in angle brackets.

53
00:03:41.060 --> 00:03:47.030
So now what I'm doing is passing in a racist type with sequence to the generic container, also type

54
00:03:47.030 --> 00:03:47.870
of char sequence.

55
00:03:48.290 --> 00:03:53.000
So you can see now that adding an object to an array list of type char sequence would cause a problem.

56
00:03:53.870 --> 00:03:55.360
What if we made a change to the method?

57
00:03:55.370 --> 00:03:56.690
My head will go back up here.

58
00:03:58.150 --> 00:04:03.130
Changing the argument from top object to any sort of change object to tea.

59
00:04:05.310 --> 00:04:10.320
You can see that this fixes the compiler error of the MIT method, but I've never figured it out again,

60
00:04:10.770 --> 00:04:15.720
but a compiler error on the main method, this is probably a welcome error on the statement where I'm

61
00:04:15.720 --> 00:04:21.740
trying to add an internal frailest typed to char sequence that's remove that line of code.

62
00:04:23.400 --> 00:04:25.620
Now that we've done that, we should be able to run this code.

63
00:04:28.610 --> 00:04:33.740
And it's produced the relevant output, which in this case is the one element added the line 40 to.

64
00:04:34.840 --> 00:04:40.350
All right, so let's close down the Iran window and have a look at Target method and Michette method

65
00:04:40.360 --> 00:04:44.770
there, 22 should change the return type there to T. instead of object.

66
00:04:45.250 --> 00:04:45.760
Let's do that.

67
00:04:45.760 --> 00:04:46.480
Let's change.

68
00:04:46.780 --> 00:04:47.920
Object to T.

69
00:04:49.570 --> 00:04:54.280
And we've now got a compiler error, they're required to be provided with object.

70
00:04:54.790 --> 00:05:00.250
Now, again, this might feel unexpected at first, but for the same reason that the ATM had to be restricted

71
00:05:00.250 --> 00:05:02.680
to the lower bound T when adding an element.

72
00:05:02.890 --> 00:05:06.670
The retrieval needs to be broad enough to get an object out of the release.

73
00:05:06.670 --> 00:05:12.010
That could hold a key element, but it could also hold an instance of any super type of t including

74
00:05:12.010 --> 00:05:12.520
object.

75
00:05:13.490 --> 00:05:17.510
So leaving this error for a moment, let's look at the alternate wildcard, the upper bound.

76
00:05:18.130 --> 00:05:23.980
So if you go back up to our wrapped list and constructor will change the super to extend the wildcard

77
00:05:23.980 --> 00:05:28.930
in both instances to set an upper bound stands.

78
00:05:31.180 --> 00:05:37.750
Since this declaration states that now the Red List list consists of two elements or elements that subclass

79
00:05:37.750 --> 00:05:41.510
from T. but no elements that are instances of super types of tea.

80
00:05:41.890 --> 00:05:46.750
Now, I still have a compiler error, but it's not about my get method, but rather it's back on my

81
00:05:46.750 --> 00:05:47.650
my add method.

82
00:05:48.490 --> 00:05:54.730
Can you guess why in a sample of code, if your code T is char sequence, what happens if we pass an

83
00:05:54.730 --> 00:05:57.130
array list of top string to the constructor?

84
00:05:57.970 --> 00:05:58.870
It's going to look at that.

85
00:05:59.240 --> 00:06:02.560
They're going to change char sequence a lot, 38 to string.

86
00:06:05.510 --> 00:06:10.070
And change the top over here to be just a diamond.

87
00:06:11.110 --> 00:06:16.440
So the generic contenders to top the chase sequence, but the wrapped list is set to release a string

88
00:06:16.750 --> 00:06:17.870
parts to the constructor.

89
00:06:18.610 --> 00:06:23.200
Now, it should be obvious that if an array list is topped with string trying to add an object of type

90
00:06:23.200 --> 00:06:26.920
T, prosecuting this case might cause a compiler error.

91
00:06:27.490 --> 00:06:28.810
So looking back at the methods.

92
00:06:30.360 --> 00:06:37.200
The market and my ad, so that shower is clear, they were like twenty two and twenty seven with T then

93
00:06:37.200 --> 00:06:41.730
our replies declaration must exactly match that type T and obviously it's not at the moment.

94
00:06:42.070 --> 00:06:43.560
We need to change that back to T.

95
00:06:45.320 --> 00:06:46.600
It's time for the constructor.

96
00:06:49.920 --> 00:06:51.390
Let's go back down to our main method.

97
00:06:53.200 --> 00:07:00.280
We've got a string back to Charles sequence, so when they're using a list of Charles sequence and again

98
00:07:00.280 --> 00:07:04.900
by doing that, I've got a typed generic container that compiles it, hopefully will execute when we

99
00:07:04.900 --> 00:07:05.200
run it.

100
00:07:07.000 --> 00:07:08.050
You can say it has run.

101
00:07:08.980 --> 00:07:15.280
And the code itself, the list is typed a sequence allowing any subclasses of char sequence to be one

102
00:07:15.280 --> 00:07:17.020
of the wrapped list members.

103
00:07:19.470 --> 00:07:25.800
Now, all of the top declarations shown below will cause a compiler error, including a Rawlence declaration

104
00:07:25.980 --> 00:07:28.850
or one or any other method by ADD or market.

105
00:07:29.180 --> 00:07:32.400
You can see the various sinister pause the video if you need to take that in.

106
00:07:33.920 --> 00:07:38.570
But looking back on it again, let's go back up to our definition for reference to the constructor.

107
00:07:39.050 --> 00:07:42.380
Let's say I decide to use a lower bound as shown.

108
00:07:42.380 --> 00:07:45.500
So we're going to help our rep list to be global.

109
00:07:45.530 --> 00:07:46.550
So Super T..

110
00:07:47.210 --> 00:07:54.500
Sorry, it is a world class world to walk up and do the exact same lovelessness pass to our constructor.

111
00:07:57.750 --> 00:08:03.360
And that to fix the error in our kit method, you decide to just cast the results of a method, so I

112
00:08:03.360 --> 00:08:03.900
return.

113
00:08:05.570 --> 00:08:12.290
Webcast it to a obviously fixes the error, so we've got like a pilot error, but what actually happens

114
00:08:12.290 --> 00:08:15.080
if I change how the container is constructed?

115
00:08:16.220 --> 00:08:18.220
I'm going to is just coming down those two lines for now.

116
00:08:20.990 --> 00:08:21.500
Tellico.

117
00:08:26.340 --> 00:08:31.620
So here what there is a passing in a release of chart sequence, which is permissible since the wrap

118
00:08:31.620 --> 00:08:34.200
list is topped with a lower pan of string in this instance.

119
00:08:34.830 --> 00:08:37.020
And what's going to make a change here to change object?

120
00:08:38.460 --> 00:08:39.900
To string along forty nine.

121
00:08:42.580 --> 00:08:46.720
They've done that because generic container is typed to string, as you can see, a line 43.

122
00:08:47.110 --> 00:08:49.000
So doing that, that should be sight, correct?

123
00:08:49.930 --> 00:08:52.690
Obviously, we've got no compilation errors, but if I run this code.

124
00:08:56.360 --> 00:09:01.010
Actually, in an era class caste, check it out like that stringbean, a copy cast to a string.

125
00:09:02.620 --> 00:09:03.640
That's in 49.

126
00:09:05.580 --> 00:09:10.290
All right, so the lesson here is that wild cards with upper bound and lower bounds are great tools,

127
00:09:10.560 --> 00:09:14.820
but you need to understand them thoroughly to read sample code on exam questions.

128
00:09:15.300 --> 00:09:16.950
So these demonstrations helped.

129
00:09:17.580 --> 00:09:22.490
Next, you see a couple of quick questions and then we'll move to the next section on functional interfaces.

130
00:09:22.740 --> 00:09:25.050
So I will see you in the next section.
