WEBVTT
1

00:00:05.300  -->  00:00:08.800
Alright.
So, let's start talking about the try-with-resources construct.

2

00:00:09.300  -->  00:00:11.100
Prior to java SE 7,

3

00:00:11.300  -->  00:00:13.900
it was customary to use a final block

4

00:00:13.900  -->  00:00:15.900
anytime your code opened a resource,

5

00:00:15.900  -->  00:00:17.200
such as a file.

6

00:00:17.200  -->  00:00:20.100
The finally block would close the resource in any event

7

00:00:20.100  -->  00:00:23.100
if the code encountered an error and passed through the catch block,

8

00:00:23.400  -->  00:00:25.600
or if the code completed with that incident,

9

00:00:25.600  -->  00:00:28.100
in which case it would simply fall through to the finally block.

10

00:00:28.760  -->  00:00:32.260
But java SE 7 introduced the try-with-resources construct.

11

00:00:32.760  -->  00:00:35.660
So, let's start by examining the two constructs in code.

12

00:00:36.360  -->  00:00:39.660
So, create a new project in intelliJ and call it ExceptionHandling.

13

00:00:39.960  -->  00:00:41.260
You can see that I've already done that.

14

00:00:41.510  -->  00:00:44.210
We need to start off with a class called ResourceExample.

15

00:00:44.810  -->  00:00:46.410
I'm going to create that class now.

16

00:00:52.710  -->  00:00:54.700
Alright, I'm going to paste in the code as per normal.

17

00:00:56.700  -->  00:00:59.900
So, what we've got here, we're starting out in our ResourceExample class.

18

00:00:59.900  -->  00:01:03.500
You can see there, I've got a method there, private method getPropertyFromFile.

19

00:01:04.100  -->  00:01:06.900
Now that reads a file using BufferedReader

20

00:01:07.450  -->  00:01:09.350
and retrieves a property from that file.

21

00:01:09.650  -->  00:01:11.750
Now this method has got problems,

22

00:01:12.410  -->  00:01:15.400
although as you can see scrolling down about it are finally close down there

23

00:01:15.400  -->  00:01:17.400
with the intent to close the resource.

24

00:01:17.400  -->  00:01:19.700
I've actually introduced an additional exception,

25

00:01:19.700  -->  00:01:23.300
a NullPointerException that suppresses the original exception

26

00:01:24.600  -->  00:01:26.200
being a fileNotFoundException.

27

00:01:28.900  -->  00:01:31.400
Okay. So, there's that code, and then scrolling down a bit further,

28

00:01:31.400  -->  00:01:32.900
you can see we've got a main method there,

29

00:01:32.900  -->  00:01:37.200
our static main method that uses the getPropertyFromFile method I just talked about,

30

00:01:37.200  -->  00:01:40.400
passing the file name and property name it wants the value of.

31

00:01:40.650  -->  00:01:43.650
So, if we execute this code, we're going to get an error

32

00:01:43.950  -->  00:01:47.650
mainly because we haven't got that properties.txt file. So, let's just run the code,

33

00:01:51.010  -->  00:01:54.910
and looking at the exception, I'm demonstrating that the error thrown at

34

00:01:54.910  -->  00:01:57.910
the source is FileNotFoundException, a checked exception,

35

00:01:58.710  -->  00:02:01.810
but the error actually being thrown from the method is a NullPointerException.

36

00:02:02.710  -->  00:02:05.310
And you can see that on screen just further on below,

37

00:02:05.310  -->  00:02:07.310
specifically, from the line 41.

38

00:02:09.310  -->  00:02:11.810
And that's because the local variable br is null

39

00:02:12.310  -->  00:02:14.010
when the finally clause is executed.

40

00:02:15.810  -->  00:02:18.410
And again, the comment really gives it away if the file is not found,

41

00:02:18.410  -->  00:02:22.310
this line will throw an exception and the variable br will remain null,

42

00:02:22.310  -->  00:02:23.910
and obviously, in our finally clause,

43

00:02:23.910  -->  00:02:27.710
we're assuming br isn't null and that's why we're getting the NullPointerException.

44

00:02:28.110  -->  00:02:30.810
That's the one that's thrown, but ultimately, at the top,

45

00:02:30.810  -->  00:02:32.800
we're also seeing the FileNotFoundException.

46

00:02:33.600  -->  00:02:35.400
Alright. So, with that in mind,

47

00:02:35.400  -->  00:02:37.200
let's close down the output pane.

48

00:02:37.450  -->  00:02:40.950
Let's create a better method with a try-with-resources clause.

49

00:02:41.750  -->  00:02:45.750
So, what I'm going to do is add this method to the class. I'm going to add it just above the main method.

50

00:02:46.850  -->  00:02:48.150
Okay.
So, there's our new method.

51

00:02:48.700  -->  00:02:52.300
And you can see there that it's using a try-with-resources construct.

52

00:02:52.600  -->  00:02:55.400
I'll discuss the syntax in a moment. But for now, though

53

00:02:55.400  -->  00:02:57.600
let's just use this method in place of the previous one,

54

00:02:58.590  -->  00:03:02.740
but noting that there's no catch or finally clause in this method.

55

00:03:03.940  -->  00:03:05.640
Right.
So, I go back down to our main method.

56

00:03:06.190  -->  00:03:08.690
Right, so, the other thing I'm going to do there is just replace

57

00:03:09.190  -->  00:03:11.590
the method name in the first line up here,

58

00:03:11.990  -->  00:03:15.790
and to use our new method that I've just added. So, it'll be getPropertyValueFromFile.

59

00:03:18.450  -->  00:03:21.050
Alright.
So, we're calling it the new method there,

60

00:03:21.050  -->  00:03:24.650
that's someone that I created up here, or paste it in just up here, line 48.

61

00:03:26.450  -->  00:03:27.450
Now if we run it,

62

00:03:31.450  -->  00:03:33.850
this time you can see we get the output we expect,

63

00:03:34.450  -->  00:03:37.810
an error the client can understand.
And it was always done like NullPointerException,

64

00:03:37.810  -->  00:03:40.810
we are getting a fileNotFoundException which is actually correct.

65

00:03:41.360  -->  00:03:45.960
Alright. So, I used a basic try-with-resources declaration there in our method.

66

00:03:46.760  -->  00:03:48.060
Let's review what that means.

67

00:03:50.360  -->  00:03:54.060
So, a try-with-resources statement is a parameterized try block,

68

00:03:54.060  -->  00:03:55.940
its parameters are called resources

69

00:03:56.440  -->  00:04:00.140
and these resources implement the java.lang.AutoClosable interface.

70

00:04:00.640  -->  00:04:05.340
The parameters are initialized prior to or as part of the parameter declaration.

71

00:04:05.640  -->  00:04:09.540
The resources are closed automatically in the reverse order

72

00:04:09.900  -->  00:04:12.500
from where they were initialized or passed to the block.

73

00:04:13.100  -->  00:04:15.400
Catch and Finally clauses are optional.

74

00:04:15.400  -->  00:04:18.400
If they're not used the try-with-resources statement

75

00:04:18.400  -->  00:04:20.960
is called a basic try-with-resources statement,

76

00:04:20.960  -->  00:04:24.160
otherwise it's an extended try-with-resources statement.

77

00:04:26.060  -->  00:04:30.050
Now you can see on screen, I've got the structure for a basic try-with-resources declaration.

78

00:04:30.350  -->  00:04:32.950
And this is as described in Java's Language Specification.

79

00:04:33.250  -->  00:04:35.350
That link is available in the resources section.

80

00:04:35.710  -->  00:04:39.610
You can see, we've got a ‘try parentheses, we've got a ResourceList in there,

81

00:04:39.610  -->  00:04:41.910
the semicolon, and then the actual block itself.’

82

00:04:42.710  -->  00:04:45.010
So, at a minimum the code will be something like the following example,

83

00:04:45.010  -->  00:04:47.110
we've got to ‘try parenthesis,

84

00:04:47.110  -->  00:04:49.910
FileReader fileReader equals to new FileReader,

85

00:04:49.910  -->  00:04:52.910
parentheses, and the filename, and the two closing parenthesis,

86

00:04:52.910  -->  00:04:54.910
and then left to right curly braces’.

87

00:04:54.910  -->  00:04:56.910
Obviously, that would normally be where our code would be.

88

00:04:59.010  -->  00:05:02.310
The resource list consists of a local variable declaration

89

00:05:02.310  -->  00:05:05.610
and an initialization of an object or by referring

90

00:05:05.610  -->  00:05:07.970
to suitable existing variables.

91

00:05:07.970  -->  00:05:12.070
So, it's important to note that the resource variable must be a type

92

00:05:12.070  -->  00:05:15.070
that implements the java.lang.AutoClosable interface.

93

00:05:15.670  -->  00:05:16.670
Alternatively,

94

00:05:17.170  -->  00:05:20.470
assuming perhaps that the initialization of the fileReader variable

95

00:05:20.470  -->  00:05:24.270
might have been part of another try/catch or try-with-resources previously,

96

00:05:24.270  -->  00:05:26.770
you can use a pre-existing local variable.

97

00:05:27.370  -->  00:05:29.970
You can see an example there of the code on screen to do that.

98

00:05:30.870  -->  00:05:33.170
Again, this is where the declaration of the variable

99

00:05:33.170  -->  00:05:35.770
is done elsewhere and passed to the try-with-resource.

100

00:05:38.130  -->  00:05:41.930
You can also have multiple resources in the try declaration as shown below.

101

00:05:42.130  -->  00:05:44.830
The resources must be separated by semicolon,

102

00:05:44.830  -->  00:05:47.630
and the resources will be closed in the opposite order

103

00:05:47.630  -->  00:05:49.630
from which they appear in the parameter list.

104

00:05:50.230  -->  00:05:53.230
And you can see the example there with the semicolon this time

105

00:05:53.590  -->  00:05:56.990
within the parentheses with a second resource being used there,

106

00:05:56.990  -->  00:05:58.690
and again, all in the parentheses.

107

00:06:00.350  -->  00:06:03.230
Alright.
So, with that said, let's review some of the statements I've just made

108

00:06:03.230  -->  00:06:05.830
because that'll probably be easier to understand.

109

00:06:06.430  -->  00:06:08.030
Let's create a new class.

110

00:06:11.030  -->  00:06:13.630
We'll call this one AutoClosableExamples.

111

00:06:18.630  -->  00:06:19.330
Okay.

112

00:06:20.690  -->  00:06:24.190
So, in this example, we're starting up by creating two classes,

113

00:06:24.190  -->  00:06:27.790
door and alarm there, you can see them both on screen there.

114

00:06:28.490  -->  00:06:31.490
Now you notice that they both implement the AutoClosable interface,

115

00:06:31.850  -->  00:06:34.850
and we implement the close method in each class,

116

00:06:34.850  -->  00:06:37.350
which is required again if implementing AutoClosable.

117

00:06:38.230  -->  00:06:41.230
So, we're moving a little bit further to our AutoClosableExample class.

118

00:06:41.780  -->  00:06:45.680
You can see our main method that uses a basic try-with-resources statement

119

00:06:45.680  -->  00:06:47.880
to declare the two instances,

120

00:06:47.880  -->  00:06:50.580
alarm and door. So if we actually run this code,

121

00:06:54.180  -->  00:06:58.380
we can see the code there, the door is closed or the output rather the door is closing, and the alarm is armed.

122

00:06:58.380  -->  00:07:01.980
And that's obviously, coming from the close method

123

00:07:02.580  -->  00:07:03.380
from each.

124

00:07:05.980  -->  00:07:06.480
Alright.

125

00:07:09.380  -->  00:07:13.780
So, that small bit of code demonstrated that you can make anything a resource

126

00:07:13.780  -->  00:07:16.080
by implementing the AutoClosable interface.

127

00:07:16.380  -->  00:07:20.380
You can declare multiple resources in one try-with-

128

00:07:20.380  -->  00:07:21.680
resources statement.

129

00:07:21.880  -->  00:07:23.380
We're doing that on line 35.

130

00:07:23.980  -->  00:07:26.580
We'll also demonstrate that the closed methods are executed

131

00:07:26.580  -->  00:07:31.380
automatically by an implicit finally clause in the opposite order that they were declared.

132

00:07:31.680  -->  00:07:35.180
So, you can see here, we've got alarm and door declared in that order,

133

00:07:36.480  -->  00:07:39.280
but door and alarm is called so it's in the reverse order.

134

00:07:41.580  -->  00:07:45.580
You can see in both the examples, I've shown that unlike the traditional try clause,

135

00:07:45.580  -->  00:07:50.280
the try-with-resources statement requires neither a catch or a finally clause.

136

00:07:50.640  -->  00:07:54.140
The traditional try clause require either a catch or a finally clause

137

00:07:54.140  -->  00:07:55.140
and could have both.

138

00:07:55.390  -->  00:07:56.890
So, just before we finish the video,

139

00:07:56.890  -->  00:07:59.690
let's explore what happens if we had these additional clauses

140

00:07:59.690  -->  00:08:01.590
and force an exception to occur.

141

00:08:02.490  -->  00:08:05.190
So what I'm going to do is add a method to our door class.

142

00:08:08.590  -->  00:08:10.590
And you see, it's going to force an exception to see what happens.

143

00:08:11.250  -->  00:08:13.610
And to use that, we need to modify our main method.

144

00:08:14.410  -->  00:08:15.410
We're going to do our main method.

145

00:08:17.910  -->  00:08:21.710
So what I'm going to do is just change this try here, paste in the code,

146

00:08:23.610  -->  00:08:24.610
so you can see what I've done there.

147

00:08:25.600  -->  00:08:28.200
I'm now invoking the doSomething method on door.

148

00:08:28.900  -->  00:08:31.500
And I've also added a catch clause as well as a finally clause.

149

00:08:32.800  -->  00:08:35.400
Obviously, no compilation-errors, so if we actually run this now.

150

00:08:40.600  -->  00:08:43.500
So, from this output, you can see that the implicit finally clause

151

00:08:43.500  -->  00:08:47.500
executes before either of the catch and finally clauses in the statement,

152

00:08:48.000  -->  00:08:50.500
thus ensuring the resources are closed first.

153

00:08:51.200  -->  00:08:52.800
We can see that was the case with the output.

154

00:08:55.300  -->  00:08:57.800
So, looking at this slide, the Java specification

155

00:08:57.800  -->  00:08:59.600
declares that this following statement

156

00:08:59.600  -->  00:09:02.000
called with an extended try-with-resources statement.

157

00:09:02.400  -->  00:09:05.700
You can see it's got a try resource specification block, and the catches and finally.

158

00:09:06.000  -->  00:09:07.500
And the link is in the resources section.

159

00:09:09.500  -->  00:09:12.800
So, this is ultimately translated into a try,

160

00:09:13.100  -->  00:09:16.400
which basically has a nested try with ResourceSpecification, and a block

161

00:09:16.650  -->  00:09:19.250
in the Catches and the Finally.
So, this is what's happening internally.

162

00:09:20.750  -->  00:09:24.050
And swinging it back to intelliJ again, you can see from our output

163

00:09:24.710  -->  00:09:26.310
that that was actually what happened.

164

00:09:28.910  -->  00:09:30.910
Alright.
So that's just been a long video,

165

00:09:30.910  -->  00:09:33.910
but in this one,I've demonstrated examples of both the basic

166

00:09:33.910  -->  00:09:36.910
and the extended try-with-resources construct.

167

00:09:37.160  -->  00:09:39.160
Just a few things to remember for the exam,

168

00:09:39.520  -->  00:09:42.120
a resource must implement AutoClosable,

169

00:09:42.620  -->  00:09:45.500
multiple resources can be declared in the try section

170

00:09:45.500  -->  00:09:47.000
separated by a semicolon,

171

00:09:47.500  -->  00:09:49.800
resources are closed in the opposite order,

172

00:09:49.800  -->  00:09:51.800
they're declared in the try section,

173

00:09:52.050  -->  00:09:55.450
and resources are closed before an additional catch or finally

174

00:09:55.450  -->  00:09:56.750
block is executed.

175

00:09:57.550  -->  00:09:59.350
Alright, so let's move on in the next video,

176

00:09:59.350  -->  00:10:02.650
I want to start talking about creating and using custom exceptions.

177

00:10:03.010  -->  00:10:04.210
See you in the next video.
