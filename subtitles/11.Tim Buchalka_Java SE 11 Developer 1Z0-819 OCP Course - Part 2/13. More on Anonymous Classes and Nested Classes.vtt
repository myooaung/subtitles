WEBVTT
1

00:00:05.200  -->  00:00:08.200
All right, so armed with the knowledge of what we learned in the last video,

2

00:00:08.200  -->  00:00:10.200
let's see what you can do with that information.

3

00:00:10.600  -->  00:00:14.200
First thing we want to do is test out the statement about dependency

4

00:00:14.200  -->  00:00:15.700
on an accessible method.

5

00:00:16.300  -->  00:00:18.200
So, we're going to change our abstract class,

6

00:00:18.200  -->  00:00:21.400
we're going to remove the single abstract method as follows.

7

00:00:21.800  -->  00:00:23.800
I'm basically just going to delete that.

8

00:00:25.700  -->  00:00:27.300
Now, this generates a compile error.

9

00:00:27.850  -->  00:00:31.850
You can't resolve method do something in an abstract class, so that makes sense.

10

00:00:32.510  -->  00:00:36.500
Yet our anonymous class that we've defined up here on line 24,

11

00:00:36.700  -->  00:00:40.930
or within the code block I should say still has a public method doSomething declared.

12

00:00:41.730  -->  00:00:46.030
An anonymous class is defined by the type its local variable reference

13

00:00:46.030  -->  00:00:48.730
or method parameter is declared to be,

14

00:00:48.980  -->  00:00:51.980
and it is that types method using polymorphism,

15

00:00:52.280  -->  00:00:53.480
which will get invoked.

16

00:00:53.480  -->  00:00:56.980
So although we've still got a public method doSomething on the anonymous class,

17

00:00:56.980  -->  00:01:01.280
as you can see on screen there, the surrounding code is not aware of the anonymous class,

18

00:01:01.280  -->  00:01:02.940
it is after all unnamed

19

00:01:02.940  -->  00:01:06.240
and can only reference a known object on a known type,

20

00:01:06.240  -->  00:01:08.240
that's why we've got that error on line 32.

21

00:01:08.840  -->  00:01:10.940
An anonymous class is not restricted

22

00:01:10.940  -->  00:01:13.740
to only containing those methods in the declared type,

23

00:01:13.740  -->  00:01:17.740
but it is only the declared types methods that can be invoked

24

00:01:17.740  -->  00:01:19.740
from outside of the anonymous class.

25

00:01:20.840  -->  00:01:22.840
All right, so let's go back and put that method back in again.

26

00:01:22.840  -->  00:01:26.440
So, I'll just undo those changes and obviously, that'll fix the error,

27

00:01:26.440  -->  00:01:30.640
but now that I've done that, let's change public to protected.

28

00:01:33.300  -->  00:01:35.000
You can see that we haven't got an error there,

29

00:01:36.200  -->  00:01:39.200
so the method that the anonymous class will implement or override

30

00:01:39.200  -->  00:01:42.200
does not need to be public on the declared type,

31

00:01:42.200  -->  00:01:46.000
it just needs to have the correct accessibility for the invoking code.

32

00:01:46.880  -->  00:01:50.480
It's commonly thought an anonymous class relies strictly

33

00:01:50.480  -->  00:01:52.780
on an interface or an abstract class.

34

00:01:53.280  -->  00:01:57.280
Although this is very common in practice, the anonymous class is not limited to this.

35

00:01:57.940  -->  00:02:01.140
An anonymous class can actually extend any class.

36

00:02:02.340  -->  00:02:04.340
So, let's actually add some code down here,

37

00:02:04.340  -->  00:02:06.940
the last line of code in the test anonymous method.

38

00:02:10.840  -->  00:02:13.840
So this code that I've pasted in demonstrates that an anonymous class

39

00:02:13.840  -->  00:02:16.840
can extend any class including in this test

40

00:02:17.140  -->  00:02:17.840
object.

41

00:02:17.840  -->  00:02:18.840
So, we're on the code.

42

00:02:21.830  -->  00:02:23.330
And we can see that it works.

43

00:02:24.030  -->  00:02:27.530
All right, so next, what I want to do is demonstrate an interface example,

44

00:02:27.530  -->  00:02:31.530
as well as chaining the object creation with the method invocation.

45

00:02:32.030  -->  00:02:34.330
So to do that, I need to paste in some more code,

46

00:02:34.330  -->  00:02:36.830
the end of the same method, the test anonymous method.

47

00:02:40.030  -->  00:02:44.020
So here, what I'm doing is I'm instantiating and declaring the anonymous class

48

00:02:44.020  -->  00:02:46.020
using the Doable interface,

49

00:02:46.020  -->  00:02:48.020
but I'm not assigning it to a local variable.

50

00:02:48.620  -->  00:02:52.980
Instead, I'm simply executing the doSomething method on the instantiated object.

51

00:02:52.980  -->  00:02:56.580
So note that I'm utilizing the local variable b,

52

00:02:57.080  -->  00:02:58.380
I'll just close down the wrong window.

53

00:02:58.780  -->  00:03:02.480
That's an object, you can see that we created on line 36, just prior.

54

00:03:03.180  -->  00:03:06.180
I'm using that in the method of this anonymous class,

55

00:03:06.180  -->  00:03:07.680
specifically line 48.

56

00:03:08.080  -->  00:03:09.080
So, if we run this,

57

00:03:12.480  -->  00:03:14.180
we can see the output down the screen.

58

00:03:14.180  -->  00:03:18.680
So, let's add another example here again in the same place at the end of the test anonymous method.

59

00:03:20.680  -->  00:03:24.680
So here what I'm doing, if we have a look at the code starting on line 55,

60

00:03:24.880  -->  00:03:29.280
I'm creating a local abstract class and defining a constructor for it.

61

00:03:29.640  -->  00:03:32.440
Yes, abstract classes can have constructors.

62

00:03:32.440  -->  00:03:35.740
Remember that anonymous classes cannot have constructors.

63

00:03:36.040  -->  00:03:39.240
So once I've done that, I immediately use that local abstract

64

00:03:39.240  -->  00:03:42.540
class for the creation of an anonymous class.

65

00:03:43.240  -->  00:03:46.840
And note that I've added an instance initializer in the anonymous class.

66

00:03:47.240  -->  00:03:48.740
All right, so if we run the code now,

67

00:03:51.740  -->  00:03:54.040
we can see the relevant output at the bottom of the screen.

68

00:03:54.940  -->  00:03:57.240
All right, so let's try one more example now,

69

00:03:57.240  -->  00:04:01.240
this time I want to demonstrate that passing an anonymous class as a parameter

70

00:04:01.240  -->  00:04:01.940
to a method.

71

00:04:01.940  -->  00:04:05.240
All right, so for that, we need a new class, so let's go ahead and create that.

72

00:04:09.040  -->  00:04:11.640
Okay, we're going to call this class AnonymousSecondExample.

73

00:04:20.640  -->  00:04:22.140
All right, so in terms of this code,

74

00:04:22.140  -->  00:04:25.040
you can see that we've got a public class there, AnnonymousSecondExample.

75

00:04:25.940  -->  00:04:28.940
We've got a private interface Summable on line 11,

76

00:04:29.190  -->  00:04:31.690
which will be the basis for our anonymous example.

77

00:04:31.690  -->  00:04:35.390
And you can see that that's got one method getTotal that takes an array of float

78

00:04:35.390  -->  00:04:36.990
and returns a double value.

79

00:04:37.240  -->  00:04:40.840
We also got a public static method – invokeSummable,

80

00:04:40.840  -->  00:04:44.240
which is a method that simply executes the getTotal method on any object

81

00:04:44.240  -->  00:04:47.240
passed to it that implements the summable interface.

82

00:04:48.140  -->  00:04:51.140
And scrolling down a bit further, we've got a main method there

83

00:04:51.740  -->  00:04:55.340
that calls the invokeSummable method and passes an anonymous class expression

84

00:04:55.340  -->  00:04:57.000
as the first parameter,

85

00:04:57.000  -->  00:04:59.100
the summable parameter named Summable.

86

00:04:59.760  -->  00:05:01.060
All right, so if we run this code,

87

00:05:04.360  -->  00:05:07.360
you can see the output there is 61.30.

88

00:05:08.860  -->  00:05:13.060
So, hopefully, you can see there that an anonymous class expression as a parameter

89

00:05:13.060  -->  00:05:17.760
is a bit unwieldy here and perhaps a better solution would be a lambda expression

90

00:05:17.760  -->  00:05:21.120
and we will be talking about lambda expressions quite a bit in later videos.

91

00:05:21.920  -->  00:05:25.620
For now, what I want to do is summarize the benefits of the four nested classes

92

00:05:25.620  -->  00:05:29.020
that we've looked at in the various videos in this section of the course,

93

00:05:29.020  -->  00:05:31.020
and ultimately why you'd want to use them.

94

00:05:32.920  -->  00:05:36.820
So specifically, what we've discussed is four types of nested classes as I’ve mentioned,

95

00:05:36.820  -->  00:05:38.820
and they are the static nested class,

96

00:05:38.820  -->  00:05:43.120
as well as the non-static classes Inner member, Local and Anonymous.

97

00:05:43.620  -->  00:05:47.620
Now that you've seen them in practice, you still might be questioning why you'd want to use them.

98

00:05:48.620  -->  00:05:50.520
The benefits and nested classes

99

00:05:50.520  -->  00:05:53.520
are firstly that it's a way to group classes logically

100

00:05:53.520  -->  00:05:55.120
and in one place for ease of use.

101

00:05:55.620  -->  00:05:58.120
Secondly, increased encapsulation

102

00:05:58.120  -->  00:06:01.320
(the hiding and protection of both data and implementation is better).

103

00:06:02.000  -->  00:06:03.600
Thirdly, code is more readable,

104

00:06:03.600  -->  00:06:06.800
simply because the class you've been using has been introduced

105

00:06:06.800  -->  00:06:08.300
in the same code set.

106

00:06:08.800  -->  00:06:12.400
And fourth, code is considerably more maintainable.

107

00:06:12.400  -->  00:06:15.950
Again, the proximity of your classes and code to the consuming code

108

00:06:15.950  -->  00:06:18.950
makes it much easier to debug and understand.

109

00:06:19.950  -->  00:06:22.150
So when do you use nested classes?

110

00:06:22.400  -->  00:06:24.400
Well, firstly, a static nested class -

111

00:06:24.900  -->  00:06:28.700
Use this nested class when you want to embed static fields of behavior

112

00:06:28.700  -->  00:06:30.360
in a nested fashion,

113

00:06:30.360  -->  00:06:34.160
where using the static members via a hierarchical structure is logical.

114

00:06:34.560  -->  00:06:37.960
Using Inner classes – Well, an inner class is a class member

115

00:06:37.960  -->  00:06:40.560
and you can declare instance variables of its type.

116

00:06:40.560  -->  00:06:43.760
So, use this class when the member is dependent on the enclosing

117

00:06:43.760  -->  00:06:45.360
class and more complex.

118

00:06:45.360  -->  00:06:49.860
So in other words, an engine might not have a reason for existence outside of an automobile

119

00:06:49.860  -->  00:06:53.360
and therefore engine might be a candidate for an inner class

120

00:06:53.360  -->  00:06:55.560
if it's not required in any other context.

121

00:06:58.060  -->  00:06:59.460
So, when to use a local class?

122

00:06:59.460  -->  00:07:01.760
Well, a local class is typically defined

123

00:07:01.760  -->  00:07:04.960
in a method body and is generally a way to maintain

124

00:07:04.960  -->  00:07:09.560
both state and behavior on a set of data for a short amount of time

125

00:07:09.810  -->  00:07:13.710
and that is specific only for that particular functionality.

126

00:07:14.310  -->  00:07:16.910
So, if you're trying to execute a single set of behavior,

127

00:07:16.910  -->  00:07:19.510
an anonymous class is probably a better choice.

128

00:07:19.760  -->  00:07:22.760
If you're temporarily maintaining state and may wait

129

00:07:22.760  -->  00:07:25.760
to delay execution on behavior or state is changing,

130

00:07:25.760  -->  00:07:27.560
then the local class would be your choice.

131

00:07:27.560  -->  00:07:29.440
So, local class is a local variable.

132

00:07:29.440  -->  00:07:32.440
You need it briefly and it's immediately expendable.

133

00:07:33.940  -->  00:07:36.640
And lastly, when to use anonymous classes?

134

00:07:36.640  -->  00:07:38.940
Well, the anonymous class is a great way to customize

135

00:07:38.940  -->  00:07:42.240
behavior very quickly without the overhead of a class declaration.

136

00:07:42.240  -->  00:07:45.740
Generally, you want to write custom code for a particular method

137

00:07:45.740  -->  00:07:48.740
defined by an interface or abstract method.

138

00:07:49.340  -->  00:07:51.940
Event handling in a JavaFX application

139

00:07:51.940  -->  00:07:54.940
is an example where anonymous classes are used quite often.

140

00:07:56.300  -->  00:07:59.100
All right, so let's move away from nested classes now because obviously,

141

00:07:59.100  -->  00:08:01.100
we've been working on them for quite some time.

142

00:08:01.350  -->  00:08:04.350
There are three reference types in Java and only one type

143

00:08:04.350  -->  00:08:05.950
can be public in a source file.

144

00:08:06.350  -->  00:08:08.350
Now, we've discussed the class reference top

145

00:08:08.350  -->  00:08:10.950
and the interface reference type in great detail,

146

00:08:10.950  -->  00:08:14.450
both here as well as in my 1Z0-819 Part 1 course

147

00:08:14.450  -->  00:08:16.050
available on Udemy as well.

148

00:08:16.050  -->  00:08:19.050
In the next video, what I want to do is start talking about the third

149

00:08:19.050  -->  00:08:21.250
reference type in detail, the enum,

150

00:08:21.250  -->  00:08:24.250
a type that supports an enumerated set of data.

151

00:08:24.850  -->  00:08:26.350
See you in that next video.
