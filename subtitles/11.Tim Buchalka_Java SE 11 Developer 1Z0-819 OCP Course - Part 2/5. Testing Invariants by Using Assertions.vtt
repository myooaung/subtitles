WEBVTT
1

00:00:05.300  -->  00:00:09.000
Alright. So, let's talk about Testing Invariants by Using Assertions.

2

00:00:09.700  -->  00:00:11.500
So, I want to start with two definitions.

3

00:00:12.100  -->  00:00:15.700
Invariant:  An invariant is a property of an object

4

00:00:15.700  -->  00:00:20.100
which remains unchanged even after operations are applied to the object.

5

00:00:20.600  -->  00:00:23.300
Assertion: An assertion is an expression

6

00:00:23.300  -->  00:00:27.600
that evaluates to true or false at a specific point in the program

7

00:00:27.600  -->  00:00:31.900
which should by default evaluate to true unless there's an error in the code.

8

00:00:32.700  -->  00:00:34.700
An assertion in Java is a statement

9

00:00:34.700  -->  00:00:37.400
that enables you to test your assumptions about your program.

10

00:00:38.200  -->  00:00:40.200
The benefits of using assertions are two-fold.

11

00:00:40.500  -->  00:00:44.100
Firstly, to detect and fix bugs. Secondly, to

12

00:00:44.100  -->  00:00:47.970
document assumptions the developer has made about the use of the code.

13

00:00:50.170  -->  00:00:54.530
So, assertions are either enabled usually in a development environment, or while troubleshooting,

14

00:00:54.530  -->  00:00:55.530
or disabled.

15

00:00:55.890  -->  00:00:59.890
Because the expression in an assert statement may have overhead and

16

00:00:59.890  -->  00:01:02.250
can affect the performance of an application,

17

00:01:02.250  -->  00:01:04.250
they are disabled by default.

18

00:01:04.910  -->  00:01:07.910
Assertions should be designed to have no cost when disabled.

19

00:01:08.570  -->  00:01:12.370
The last is a principle, and obviously, cannot be guaranteed.

20

00:01:12.670  -->  00:01:16.670
If you're coding for assertions, creating objects that only assert statements might

21

00:01:16.670  -->  00:01:20.170
query for example, this is a violation of that principle.

22

00:01:20.770  -->  00:01:24.770
Assertions should not be designed to affect the outcome of your application logic.

23

00:01:27.130  -->  00:01:30.130
You have some control over the granularity of which assertions

24

00:01:30.130  -->  00:01:31.460
are enabled and disabled.

25

00:01:31.460  -->  00:01:35.660
You can also force the class to not load altogether if assertions are disabled.

26

00:01:35.660  -->  00:01:37.660
And I'll show you an example of that in this video.

27

00:01:38.160  -->  00:01:41.460
Let's have a look at the Java language specification for assertions.

28

00:01:41.860  -->  00:01:44.160
The link to this is in the resources section of the video.

29

00:01:44.960  -->  00:01:49.060
So, an assertion can take the form of an assert statement which has two forms

30

00:01:49.060  -->  00:01:50.660
as described on this page.

31

00:01:52.660  -->  00:01:56.260
So, swinging back to the slides, the first form,assert expression one

32

00:01:56.560  -->  00:01:59.360
that represents a boolean expression followed by semicolon,

33

00:02:01.360  -->  00:02:04.760
alternatively, there's a second form which is the same as the first one,

34

00:02:04.760  -->  00:02:09.060
assert expression one but this time, there's a colon in expression two.

35

00:02:09.310  -->  00:02:11.810
Expression two usually represents an error message,

36

00:02:11.810  -->  00:02:15.410
so if this is a value other than a string, the two string method

37

00:02:15.410  -->  00:02:19.610
will be used and a void method here is invalid as we'll see in code shortly.

38

00:02:20.110  -->  00:02:24.210
If expression one evaluates to false, and assertions are enabled,

39

00:02:24.460  -->  00:02:28.260
an assertion error is thrown using expression 2 if it's declared

40

00:02:28.260  -->  00:02:29.560
for a detailed message.

41

00:02:30.660  -->  00:02:32.960
Note that expression 2 can be a method

42

00:02:32.960  -->  00:02:36.960
as long as the method's return type is not void and we'll test this in this video as well.

43

00:02:37.620  -->  00:02:40.620
Alright. So, let's swing back and test some code here.

44

00:02:41.020  -->  00:02:43.020
So, we'll start off by creating a new class.

45

00:02:44.620  -->  00:02:46.880
Now we'll call this one Assertion Example,

46

00:02:46.880  -->  00:02:49.180
but we'll actually put it in the assertion package,

47

00:02:49.180  -->  00:02:52.780
so assertion.AssertionExample.

48

00:02:56.180  -->  00:02:57.180
Now paste some code in.

49

00:02:59.680  -->  00:03:02.480
This code is demonstrating that a byte can overflow

50

00:03:02.480  -->  00:03:04.780
if using a bytecast on a short value.

51

00:03:05.140  -->  00:03:06.940
You can see what we're doing there in line 15.

52

00:03:07.440  -->  00:03:11.740
Firstly, to set the value, we've got an assert statement there, but then on line 21,

53

00:03:12.140  -->  00:03:16.140
we're casting short to a byte which could lead to an undetected overflow.

54

00:03:16.440  -->  00:03:18.840
So, specifically, the assert on line 18

55

00:03:18.840  -->  00:03:22.440
is checking that the value stored in the short is in the valid byte range

56

00:03:22.440  -->  00:03:26.640
before it's cast back to a byte on line 21. If we run this code,

57

00:03:30.200  -->  00:03:34.400
clearly it overflowed, so what good was that assert statement the one on line 18?

58

00:03:35.280  -->  00:03:37.640
In java, assertions are not automatically enabled,

59

00:03:38.140  -->  00:03:40.140
so there's two ways to enable assertions.

60

00:03:40.140  -->  00:03:43.340
You can either execute the code from the command line, and pass a flag,

61

00:03:43.590  -->  00:03:46.590
dash enable assertions or you can do it in the IDE.

62

00:03:46.950  -->  00:03:49.850
So, what I'm going to do first is show you how to do it from the command line,

63

00:03:50.050  -->  00:03:53.410
and then for the rest of the video, we'll go through and just do it in the IDE.

64

00:03:54.210  -->  00:03:58.310
So, what I'm going to do is open the project pane and open the folder, containing our code.

65

00:03:58.710  -->  00:04:02.410
Go to the ExceptionHandling folder, right-click and Open in Terminal,

66

00:04:04.410  -->  00:04:06.910
and from there I'm going to type ‘Java –

67

00:04:08.410  -->  00:04:09.610
enableassertions’.

68

00:04:12.210  -->  00:04:16.210
So, dash enable assertions, then the name of our class which is an

69

00:04:16.210  -->  00:04:19.910
assertion package,so assertion.AssertionExample.

70

00:04:22.410  -->  00:04:26.210
And yes, you can obviously, see that was a single dash for enable assertions and not a double dash,

71

00:04:26.570  -->  00:04:30.570
so the output confirms that we've got now an assertion error showing on screen.

72

00:04:31.170  -->  00:04:33.670
That's happened, of course, because looking at our assertion statement,

73

00:04:34.450  -->  00:04:38.700
we're looking for to make sure that the max value for our short is within the range

74

00:04:38.700  -->  00:04:39.700
of a byte,

75

00:04:39.700  -->  00:04:43.200
it clearly gets outside of that because we've added one to the maximum value for a byte.

76

00:04:43.200  -->  00:04:47.000
That's why the assertion was raised, you can see that it was raised on line 18.

77

00:04:47.800  -->  00:04:49.800
Alright, so, let's do the same thing back with the IDE.

78

00:04:51.400  -->  00:04:55.300
To do that, we just come up here to our configuration to run.

79

00:04:55.800  -->  00:04:57.400
And for our AssertionExample,

80

00:04:57.600  -->  00:05:00.800
we're going to add a VM option -ea.

81

00:05:00.800  -->  00:05:02.400
ea is the abbreviated version.

82

00:05:02.760  -->  00:05:05.360
You could type -enableassertions if you wanted to.

83

00:05:05.760  -->  00:05:06.760
Click OK.

84

00:05:06.960  -->  00:05:08.360
And now, if we run it in the IDE.

85

00:05:10.360  -->  00:05:13.960
This time, we've now got the assertion being raised again on line 18.

86

00:05:14.660  -->  00:05:18.320
Alright. So, let's change the assert statement on line 18 to show the second form.

87

00:05:18.820  -->  00:05:22.420
The moment we've got the first form there, we'd come back here, and we'll put a colon

88

00:05:22.420  -->  00:05:24.220
at the end of the line before the semicolon.

89

00:05:24.720  -->  00:05:27.710
Then on the next line as a string,

90

00:05:27.710  -->  00:05:31.310
“Value out of range for a byte”.

91

00:05:34.300  -->  00:05:38.200
So, here, I've just simply added a message, which will be included in the assertion

92

00:05:38.200  -->  00:05:41.200
error message. We'll run this to confirm that in the output pane.

93

00:05:42.200  -->  00:05:45.100
And you can see the output is now showing value out of range for a byte.

94

00:05:46.200  -->  00:05:47.800
Alright, so let's test some other things now.

95

00:05:47.800  -->  00:05:49.600
I'm going to go back up to the top of the class here,

96

00:05:50.000  -->  00:05:52.000
and paste in some code

97

00:05:52.400  -->  00:05:55.500
directly below the declaration of our class on line 9.

98

00:05:57.100  -->  00:06:00.900
So, with this code, you can see we're using an enum to maintain detailed messages,

99

00:06:00.900  -->  00:06:01.900
assertion errors.

100

00:06:02.260  -->  00:06:06.260
So, this contains known errors with error messages. And also below that,

101

00:06:06.260  -->  00:06:08.820
I’ve got getAssertMessage which is a method

102

00:06:08.820  -->  00:06:12.820
which returns the message of a known error using the assert flags item.

103

00:06:13.320  -->  00:06:15.720
So, if we go back to our assert statement here on line 18,

104

00:06:15.720  -->  00:06:18.720
let's change this now, the second part of the expression.

105

00:06:19.120  -->  00:06:22.120
This time we'll do getAssertMessage

106

00:06:22.120  -->  00:06:25.120
(assertFlags.BYTE_OUT_OF_RANGE).

107

00:06:26.420  -->  00:06:27.420
If you run this now,

108

00:06:31.420  -->  00:06:32.520
you can see you've got the output.

109

00:06:33.720  -->  00:06:36.520
And there's the output on line 24 from making assertion message.

110

00:06:36.520  -->  00:06:38.180
And you can see it in the output pane there,

111

00:06:38.180  -->  00:06:40.780
Method returns value is out of range for a byte.

112

00:06:42.580  -->  00:06:46.580
Alright.
So, let's try something slightly different. Just below the getAssertionMessage method,

113

00:06:46.580  -->  00:06:48.080
I'm going to paste in another method here.

114

00:06:51.580  -->  00:06:55.180
You can see that the method I've pasted in is very similar to the getAssertMessage

115

00:06:55.180  -->  00:06:59.380
except it's printIn message and has a void return type this time.

116

00:07:00.370  -->  00:07:04.070
I go back to our assert, let's change the getAssertMessage to,

117

00:07:04.070  -->  00:07:07.430
instead call our printAssertMessage method.

118

00:07:11.130  -->  00:07:13.330
By doing that, you can see we've got a compiler-error there,

119

00:07:13.330  -->  00:07:16.830
if I hover over that, void type is not allowed here.

120

00:07:18.190  -->  00:07:22.090
So, that confirms that you cannot use a method with a void return type

121

00:07:22.090  -->  00:07:24.390
as the second part of the assertion expression.

122

00:07:24.890  -->  00:07:26.490
So, let's change this code again now.

123

00:07:27.190  -->  00:07:31.090
And what we can do is just remove the right parentheses, and delete everything,

124

00:07:31.090  -->  00:07:34.790
including from the start of the line to the assertFlags.

125

00:07:35.390  -->  00:07:39.090
So, here as you can see, I'm just using the assertFlag item

126

00:07:39.090  -->  00:07:41.450
as the second part of the assert expression.

127

00:07:41.450  -->  00:07:43.950
And we haven't got a compiler-error, so if we run this,

128

00:07:47.550  -->  00:07:51.350
this time we get the output, or output added to the AssertionError

129

00:07:51.710  -->  00:07:54.110
BYTE_OUT_OF_RANGE.

130

00:07:54.660  -->  00:07:58.260
So, this exercise has demonstrated that the second part of the assert statement

131

00:07:58.260  -->  00:08:01.860
can be any object or any method with the only exception,

132

00:08:01.860  -->  00:08:04.860
being a method with a void return type, which doesn't work.

133

00:08:04.860  -->  00:08:06.860
You can also use primitive data

134

00:08:06.860  -->  00:08:08.860
or methods that return primitive data.

135

00:08:08.860  -->  00:08:11.660
They'll be auto-boxed to their corresponding wrapper.

136

00:08:12.460  -->  00:08:14.460
The other thing I want to show you before we end the video

137

00:08:14.760  -->  00:08:17.760
is how to disable a class from executing entirely,

138

00:08:17.960  -->  00:08:19.460
if assertions are disabled.

139

00:08:19.820  -->  00:08:22.820
To do that, we need to add a static initializer to our class.

140

00:08:23.320  -->  00:08:25.520
So, I'm going to add that right below the declaration.

141

00:08:26.520  -->  00:08:30.720
You can see what we're doing there, we're setting startupAllowed to false on line 12.

142

00:08:30.720  -->  00:08:34.120
And we're doing an assert to set startup allowed to true,

143

00:08:34.120  -->  00:08:37.480
and startupAllowed will be true only if assertions are enabled,

144

00:08:37.480  -->  00:08:41.180
otherwise the statement is simply ignored as we've seen previously in this video.

145

00:08:41.840  -->  00:08:43.840
Then we've got some code on line 19,

146

00:08:43.840  -->  00:08:46.440
which is checking if startupAllowed is false.

147

00:08:46.440  -->  00:08:50.430
Then we're throwing a RuntimeException with the error that Assertions must be enabled.

148

00:08:51.230  -->  00:08:52.830
Now, obviously, if we run this code at the moment,

149

00:08:54.330  -->  00:08:57.930
it'll still work, and the reason for that is assertions

150

00:08:57.930  -->  00:09:01.430
are actually enabled. So, we go back now and change our

151

00:09:01.790  -->  00:09:02.790
configuration,

152

00:09:03.290  -->  00:09:05.890
remove that options, so now assertions are not enabled.

153

00:09:05.890  -->  00:09:09.090
If we run this, we should find the class, in fact won't load.

154

00:09:10.970  -->  00:09:13.570
And you can see that, that was the case I've got a RuntimeException

155

00:09:13.570  -->  00:09:17.930
assertions must be enabled and that's prevented the class from loading altogether.

156

00:09:18.590  -->  00:09:20.090
Alright. So, let's end the video here.

157

00:09:20.090  -->  00:09:23.750
In the next one, I want to start by talking about when it's appropriate

158

00:09:23.750  -->  00:09:25.190
to use assertions.

159

00:09:25.190  -->  00:09:26.490
See you in the next video.
