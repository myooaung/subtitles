WEBVTT
1

00:00:05.150  -->  00:00:09.310
In this video, I want to train you to identify problems on interface declarations

2

00:00:09.310  -->  00:00:12.310
in places where clashing methods could occur

3

00:00:12.310  -->  00:00:16.310
when using default methods. You cannot define a default method

4

00:00:16.310  -->  00:00:19.810
overriding a public method on java.lang.object.

5

00:00:20.170  -->  00:00:23.470
These methods are equals using an object as an argument,

6

00:00:23.470  -->  00:00:25.770
hashCode, as well as toString.

7

00:00:27.070  -->  00:00:29.730
So, remember that a class method has precedence

8

00:00:29.730  -->  00:00:32.030
over any interface default method,

9

00:00:32.030  -->  00:00:34.430
so even if this was permitted by the compiler,

10

00:00:34.430  -->  00:00:36.930
the default methods would not be usable

11

00:00:36.930  -->  00:00:38.530
by implementing objects

12

00:00:38.530  -->  00:00:41.330
because objects methods would always be invoked

13

00:00:41.330  -->  00:00:43.330
before default methods.

14

00:00:43.630  -->  00:00:46.430
Currently, only one of object's protected methods

15

00:00:46.430  -->  00:00:48.730
can have default methods, clone.

16

00:00:49.520  -->  00:00:52.880
Note that finalize was deprecated in Java 9.

17

00:00:53.480  -->  00:00:57.180
All right, so back to IntelliJ, let's create a new class in our interface methods project.

18

00:00:57.430  -->  00:00:59.430
We'll call this one InterfaceIssues.

19

00:01:05.230  -->  00:01:06.230
Paste in the code.

20

00:01:09.430  -->  00:01:11.630
All right, so this code first

21

00:01:11.630  -->  00:01:14.630
has an interface that defines abstract methods

22

00:01:14.630  -->  00:01:18.930
that match the signatures of java.lang.object public methods,

23

00:01:19.130  -->  00:01:22.130
namely toString equals

24

00:01:22.130  -->  00:01:25.030
where objects pass as an argument and hashCode.

25

00:01:25.530  -->  00:01:28.530
Scrolling down a bit further, we've got ProblemFreeClass

26

00:01:29.080  -->  00:01:32.070
that implements the problem free interface we just talked about.

27

00:01:32.430  -->  00:01:34.760
You can see that it's got a single attribute id

28

00:01:34.960  -->  00:01:39.060
and a single args constructor and it also has concrete methods

29

00:01:39.460  -->  00:01:41.760
for the three methods that we just talked about, toString

30

00:01:42.060  -->  00:01:45.660
equals where objects passed as a parameter and hashCode.

31

00:01:46.020  -->  00:01:48.820
I'm scrolling down still further; we've got another class here

32

00:01:48.820  -->  00:01:52.370
interface issues which extends the problem free class.

33

00:01:52.370  -->  00:01:53.970
You can see it's got one constructor there,

34

00:01:54.670  -->  00:01:58.670
which is a single args constructor and then executes the various methods.

35

00:01:59.330  -->  00:02:01.690
So, let's run this to see what the output looks like.

36

00:02:04.590  -->  00:02:08.590
All right, so far so good. Let's actually add now another interface to this

37

00:02:08.590  -->  00:02:09.590
source file.

38

00:02:10.190  -->  00:02:13.690
I'm going to add it just below our first interface at the top of the file,

39

00:02:14.190  -->  00:02:15.190
so just up here.

40

00:02:18.590  -->  00:02:20.890
You note that by doing that three of the methods

41

00:02:20.890  -->  00:02:23.290
in the interface are producing compiler errors.

42

00:02:23.890  -->  00:02:27.390
toString equals and hashCode and they've all got the same error

43

00:02:27.390  -->  00:02:31.380
default method and whatever the particular method is overrides a member

44

00:02:31.380  -->  00:02:33.180
of java.lang.object.

45

00:02:33.180  -->  00:02:37.280
So, obviously, default methods that are trying to override objects public non-final methods

46

00:02:37.640  -->  00:02:38.640
is not permitted.

47

00:02:38.890  -->  00:02:40.490
So, I'm going to delete those three,

48

00:02:42.990  -->  00:02:45.860
remove those errors and that leaves us with just a single method now

49

00:02:45.860  -->  00:02:47.660
which is a default method for clone.

50

00:02:48.160  -->  00:02:52.160
So, what we're going to do is have a look at our interface issues class,

51

00:02:52.660  -->  00:02:55.660
we're going to add this interface, this problematic interface

52

00:02:56.160  -->  00:02:57.960
being the second one that we pasted in,

53

00:02:58.160  -->  00:03:01.460
and actually implement that for this class. So, here's our interface issues class.

54

00:03:01.460  -->  00:03:05.260
You can see it's extending problem free class,let's implement

55

00:03:07.660  -->  00:03:09.660
the problematic interface.

56

00:03:09.660  -->  00:03:11.360
All right, now this doesn't give an error

57

00:03:11.360  -->  00:03:14.860
in all cases. You can see here that IntelliJ is not flagging that as an error,

58

00:03:15.110  -->  00:03:17.110
and I can actually build the project.

59

00:03:18.710  -->  00:03:22.310
And here now by building it, you can see we've actually got an error.

60

00:03:22.310  -->  00:03:24.910
And the error is on line 68.

61

00:03:25.110  -->  00:03:27.110
You see that over to the bottom right there,

62

00:03:27.110  -->  00:03:29.710
and that's the implements line that I've just added

63

00:03:29.960  -->  00:03:33.950
and the error there is clone in java.lang.object cannot implement clone in

64

00:03:33.950  -->  00:03:37.850
problematic interface attempting to assign weaker access privileges

65

00:03:38.150  -->  00:03:39.150
was public.

66

00:03:39.150  -->  00:03:41.030
It's a bit weird that IntelliJ doesn't pick that up.

67

00:03:41.030  -->  00:03:45.030
You might find that the current version of IntelliJ that you're following along with

68

00:03:45.030  -->  00:03:47.830
may well pick it up, but you can see for me, that's not the case.

69

00:03:48.130  -->  00:03:50.730
But in any case, why is this so?

70

00:03:50.730  -->  00:03:53.030
How can it be that the error on clone is because

71

00:03:53.030  -->  00:03:55.530
we're attempting to assign weaker access privileges?

72

00:03:56.080  -->  00:03:59.580
The clone method and object is protected and it's this method

73

00:03:59.580  -->  00:04:03.380
which the compiler selects to invoke, not the interface method,

74

00:04:03.740  -->  00:04:06.040
the one up here in problematic interface.

75

00:04:06.640  -->  00:04:09.630
And you can see there that the public interface's method is public

76

00:04:09.930  -->  00:04:11.430
because that's the default.

77

00:04:11.430  -->  00:04:15.230
An object's method has weaker privileges protected in this case,

78

00:04:15.230  -->  00:04:18.120
so the privileges are weaker than the method declared

79

00:04:18.120  -->  00:04:21.780
on problematic interface. All right, so leave this error for the moment

80

00:04:21.780  -->  00:04:26.280
and again, weirdly, IntelliJ is not flagging it as an error until we try and run it or build it.

81

00:04:26.780  -->  00:04:28.780
I'll get the same error if I try and run it.

82

00:04:30.980  -->  00:04:32.280
So, we'll leave that error for the moment.

83

00:04:32.780  -->  00:04:35.580
What we're going to do is add a method to our interface problem

84

00:04:35.580  -->  00:04:38.380
free interface, the first interface that we worked on.

85

00:04:38.380  -->  00:04:41.380
So, we're going to paste that down here in our problem free interface.

86

00:04:43.680  -->  00:04:45.080
Okay, so there's our method.

87

00:04:45.680  -->  00:04:49.480
Now that we've done that, we're going to go back to our problem free class

88

00:04:49.480  -->  00:04:51.680
and I'm going to implement a version of the clone method.

89

00:04:53.280  -->  00:04:55.180
You can see that we've got an error now,

90

00:04:55.180  -->  00:04:59.280
a clash there that's because of the method that I've added to our interface,

91

00:04:59.580  -->  00:05:02.580
but we'll go ahead and add a method right down the end of this class.

92

00:05:04.580  -->  00:05:07.880
So, here's the implemented version of clone, which is pretty straightforward,

93

00:05:08.480  -->  00:05:11.480
and now that I've done that what I'm going to do is go back to the main method,

94

00:05:12.030  -->  00:05:14.910
this time for our interface issues class,

95

00:05:14.910  -->  00:05:16.910
I'm actually going to replace a line here.

96

00:05:17.210  -->  00:05:20.210
So, this problem free class line, I'm going to delete that.

97

00:05:20.570  -->  00:05:22.570
I'm going to paste in some code instead.

98

00:05:23.070  -->  00:05:26.070
So, you can see what Iâ€™ve added there. We basically added a try catch,

99

00:05:26.070  -->  00:05:28.670
so we're catching the clone not supported exception.

100

00:05:28.920  -->  00:05:31.920
If I run this code now, we should find that it'll all work.

101

00:05:34.220  -->  00:05:36.720
And you can see that we're back to code that is now working.

102

00:05:37.080  -->  00:05:39.080
So, what have I actually done here to fix things?

103

00:05:39.440  -->  00:05:41.440
Well, let's go back in order to see what we did.

104

00:05:41.440  -->  00:05:45.640
We're going back to our interface at the top here, problem free interface.

105

00:05:46.140  -->  00:05:49.540
We added that method and you can see that the public was redundant,

106

00:05:50.440  -->  00:05:54.340
then we went to a problem free class and we created a version of clone

107

00:05:54.340  -->  00:05:55.340
which overrode that.

108

00:05:55.590  -->  00:05:59.790
Again, with a public method making it concrete on the class implementing the interface.

109

00:05:59.990  -->  00:06:04.350
I'm getting back to this one, so when in interface issues which extends problem free class,

110

00:06:04.710  -->  00:06:07.710
the JVM again selects the classes clone method

111

00:06:07.710  -->  00:06:10.510
over the interfaces, the problematic interface,

112

00:06:10.510  -->  00:06:13.810
but this time it finds a match in the class hierarchy that's public,

113

00:06:14.110  -->  00:06:16.710
which is this method here on line 65,

114

00:06:16.710  -->  00:06:21.010
and all as well, that's why I haven't got that weird error that we had until I created

115

00:06:21.010  -->  00:06:23.810
an implementation of the clone method in this,

116

00:06:23.810  -->  00:06:25.310
the problem free class.

117

00:06:27.110  -->  00:06:29.910
So, the rules for default methods overriding public methods

118

00:06:29.910  -->  00:06:33.510
toString equals hashCode on Object is simple:

119

00:06:33.810  -->  00:06:34.810
you cannot do it.

120

00:06:34.810  -->  00:06:38.310
The rules for a default method overriding the protected method clone

121

00:06:38.310  -->  00:06:41.610
are dependent on the class which will implement the interface.

122

00:06:42.110  -->  00:06:46.310
If there's no class in its hierarchy that overrides objects clone method,

123

00:06:46.530  -->  00:06:48.930
you will get a compiler error and we saw that

124

00:06:48.930  -->  00:06:51.630
because the default method is public by default

125

00:06:51.630  -->  00:06:54.130
and clone on object is protected

126

00:06:54.130  -->  00:06:56.330
and you'll get a weaker privileges message,

127

00:06:56.580  -->  00:06:58.180
which you saw in IntelliJ.

128

00:06:59.880  -->  00:07:02.480
Other rules for methods on interfaces are as follows below.

129

00:07:02.480  -->  00:07:04.680
When looking at interfaces on the exam,

130

00:07:04.680  -->  00:07:06.980
ask these questions of the code sample.

131

00:07:07.680  -->  00:07:09.680
I will be going over each of these in code.

132

00:07:10.040  -->  00:07:12.240
Is the interface method static?

133

00:07:12.240  -->  00:07:16.140
Remember that a method is public if it's not private on an interface.

134

00:07:16.640  -->  00:07:19.940
Does the static method override a super interface's default method?

135

00:07:20.240  -->  00:07:21.440
This is not permitted.

136

00:07:21.940  -->  00:07:25.440
Is the method being invoked outside of the interface type

137

00:07:25.440  -->  00:07:29.240
without using the interface type qualifier? Again, this is not permitted.

138

00:07:30.240  -->  00:07:32.540
Is the interface method a default method?

139

00:07:32.540  -->  00:07:36.640
Yes, answers to any of the following questions are compile-time errors.

140

00:07:37.140  -->  00:07:40.440
Does it override any of java.lang.Objects public methods?

141

00:07:40.440  -->  00:07:41.440
Compile-time error.

142

00:07:41.800  -->  00:07:45.570
Does it clash with an unrelated interfaces default method signature

143

00:07:45.570  -->  00:07:49.370
in an implements clause of an implementing class? Again, compile-time error.

144

00:07:50.570  -->  00:07:53.570
And the third compile-time error would be is the default method

145

00:07:53.570  -->  00:07:56.370
being invoked directly in a static context.

146

00:07:56.370  -->  00:07:58.170
Yes would mean compile-time error.

147

00:07:59.570  -->  00:08:01.560
Method selection is prioritized.

148

00:08:01.710  -->  00:08:04.710
Determine which classes are in the hierarchy of the class

149

00:08:04.710  -->  00:08:09.040
where the method is being invoked and what interfaces are in the implements clause?

150

00:08:09.540  -->  00:08:12.540
Remember firstly, a class method is selected first,

151

00:08:12.540  -->  00:08:15.840
the more specific interfaces method is selected next.

152

00:08:15.840  -->  00:08:19.140
If there is a clash, then you must provide an implementation

153

00:08:19.140  -->  00:08:20.640
of the method in the class.

154

00:08:21.000  -->  00:08:23.400
All right, so that's a lot of rules that we've been talking about.

155

00:08:23.400  -->  00:08:27.300
Let's start exploring those and validating those rules in the next video.
