WEBVTT
1
00:00:05.660 --> 00:00:10.220
Let's look at them out of ordinary situations you might come up with for the collections framework.

2
00:00:11.060 --> 00:00:16.610
I want to start out by talking about views as they pertain to collections, views of themselves, collections

3
00:00:16.610 --> 00:00:21.080
backed by the originating collection passed as a parameter to the method.

4
00:00:21.680 --> 00:00:27.140
Modifying a view in turn modifies the collection that backs the view, although there are limitations

5
00:00:27.140 --> 00:00:28.850
on the modifications which can be made.

6
00:00:31.050 --> 00:00:35.910
It's looking at this table on screen, you can see a list of methods which return views, so starting

7
00:00:35.910 --> 00:00:42.270
out with a right, we've got a method as list returns, a list that basically returns a fixed list backed

8
00:00:42.270 --> 00:00:43.620
by a specified array.

9
00:00:43.990 --> 00:00:49.530
If it has been passed next abstract map, the method is entry set.

10
00:00:50.010 --> 00:00:51.270
Return type is set.

11
00:00:51.480 --> 00:00:54.510
The returns are set via the mappings contained in the map.

12
00:00:55.320 --> 00:01:00.900
We've also got key set for abstract map, which is also a set and returns a set of the keys contained

13
00:01:00.900 --> 00:01:01.440
in this map.

14
00:01:01.950 --> 00:01:07.530
We've also got Vali's for Abstract Map Turntablism set and it returns a collection of the values contained

15
00:01:07.530 --> 00:01:08.010
in the map.

16
00:01:08.840 --> 00:01:13.940
If you looking at least we've got the method sublist, which returns a list and contains the elements

17
00:01:13.940 --> 00:01:18.290
from the index, from index inclusive to index to index exclusive.

18
00:01:20.620 --> 00:01:27.160
Never said the method is to simply set the terms are set and return to reverse order few of the elements

19
00:01:27.160 --> 00:01:28.390
contained in the set.

20
00:01:29.380 --> 00:01:32.710
Also for couple set, we've got an overloaded method headset there.

21
00:01:33.180 --> 00:01:37.600
The terms are set in both scenarios, the terms of view of the portion of the set whose elements are

22
00:01:37.600 --> 00:01:40.750
strictly less than two element, which has passed as a parameter.

23
00:01:41.080 --> 00:01:46.870
If the inclusive overload is used, includes two elements, if true, containing with a couple set,

24
00:01:47.170 --> 00:01:52.360
we've got a subset which is also overloaded, as you can see there, and that returns are set in terms

25
00:01:52.360 --> 00:01:58.380
of view of the portion of this set whose limits range from from element inclusive to two element exclusive.

26
00:01:58.870 --> 00:02:05.170
And if the inclusive overload is used from element in to element based on values of inclusive parameters.

27
00:02:06.280 --> 00:02:07.680
The last one never set.

28
00:02:07.810 --> 00:02:11.770
You've got the tower set method, which is also overloaded button topics is set.

29
00:02:12.340 --> 00:02:17.630
This returns a view of the portion of this set whose elements are greater than or equal to from element.

30
00:02:18.220 --> 00:02:22.990
And if the inclusive overloads used includes two element, if true only.

31
00:02:25.060 --> 00:02:30.460
So let's explore some of these views in code so that you can recognize compilation and execution errors

32
00:02:30.640 --> 00:02:33.640
from simple code that might form part of an exam question.

33
00:02:34.620 --> 00:02:36.930
They need to create a new class in our collections project.

34
00:02:38.040 --> 00:02:40.680
We'll call this class collection Fuze.

35
00:02:51.110 --> 00:02:53.880
So looking at this class, we've got two methods.

36
00:02:54.280 --> 00:02:59.920
The first method here do stuff with list, this performs various operations analyst parts to it as a

37
00:02:59.920 --> 00:03:03.400
parameter is using replace all their sort.

38
00:03:04.590 --> 00:03:09.040
Using Sublist Navasota, also an ad as well as clear.

39
00:03:10.580 --> 00:03:12.290
And we've also got our main method here.

40
00:03:12.990 --> 00:03:18.680
This creates sublist views first using an array of string and then an array list of string, and then

41
00:03:18.680 --> 00:03:20.950
it likes to do stuff with sublist method.

42
00:03:23.180 --> 00:03:24.610
They could save a calling that a few times.

43
00:03:25.880 --> 00:03:26.480
Let's run this.

44
00:03:29.170 --> 00:03:29.960
So they have put.

45
00:03:33.370 --> 00:03:38.890
Now you to notice that seven operations filed on the sublist view backed by the array of string.

46
00:03:39.460 --> 00:03:41.950
Now, this is because an array is a fixed size.

47
00:03:42.400 --> 00:03:49.030
Any operation that affects the size will throw an unsupported operation exception such as add, remove,

48
00:03:49.030 --> 00:03:49.450
clear.

49
00:03:50.200 --> 00:03:55.210
Now, these operations were successful on the sublist, the view backed by the array list of string.

50
00:03:57.430 --> 00:04:00.620
So looking at an initialization method for the Israelis to string.

51
00:04:01.750 --> 00:04:08.520
Or rather, the code that initialized list of string that's stand here is our list being defined are

52
00:04:08.530 --> 00:04:12.040
being set up online, 76 changed that to the following.

53
00:04:14.440 --> 00:04:19.600
They can say we're using out of there now the code compiles, but when I run this.

54
00:04:22.510 --> 00:04:24.490
We've actually got an exception, as you can see there.

55
00:04:25.680 --> 00:04:26.560
Looking at the code.

56
00:04:28.430 --> 00:04:31.850
It's crushing online 84 when we're calling our do stuff with Sublist.

57
00:04:34.240 --> 00:04:40.990
And the reason for this is because I created established a view of an immutable collection, any change

58
00:04:40.990 --> 00:04:45.520
I try to make to the sublist, the view would throw an unsupported operation exception.

59
00:04:45.520 --> 00:04:46.540
And that's what's happening here.

60
00:04:47.420 --> 00:04:49.900
I'm going to replace that money that we use Lyster of their.

61
00:04:51.670 --> 00:04:56.120
Replace it with a new frailest creation, as we're doing there now on line seventy six.

62
00:04:56.710 --> 00:04:57.820
Now, when we run this again.

63
00:04:59.730 --> 00:05:00.750
The car is now working.

64
00:05:03.690 --> 00:05:08.730
When reviewing an exam question, I always look out for the methods that return immutable collections

65
00:05:09.300 --> 00:05:13.770
if they aren't used in a constructor, you have a quick and easy path out of the question.

66
00:05:14.280 --> 00:05:20.580
If any code attempts to change the collection or sub collection derived from it is changed, the answer

67
00:05:20.580 --> 00:05:23.850
is the collection cannot be modified and or and unsupported.

68
00:05:23.850 --> 00:05:25.500
Operation exception will be thrown.

69
00:05:26.100 --> 00:05:26.220
Right.

70
00:05:26.360 --> 00:05:30.480
So let's see in the video here next, I'm going to present you with a few quiz questions specific to

71
00:05:30.480 --> 00:05:34.560
the collections framework and then I'll see you in the video following where I'm going to be discussing

72
00:05:34.560 --> 00:05:39.950
two interfaces that support sorting of collections, the comparator and comparable interfaces.

73
00:05:40.500 --> 00:05:41.520
See you in the next video.
