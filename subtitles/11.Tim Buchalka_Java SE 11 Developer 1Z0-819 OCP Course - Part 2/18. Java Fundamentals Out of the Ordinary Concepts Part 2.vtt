WEBVTT
1

00:00:05.330  -->  00:00:06.510
Alright! So, continuing on

2

00:00:06.510  -->  00:00:08.940
in our out of ordinary
video for this section.

3

00:00:08.940  -->  00:00:11.790
Let's now consider the
term EffectivelyFinal.

4

00:00:11.790  -->  00:00:16.579
As of Java 8, you can use a local
variable in a local or anonymous class

5

00:00:16.940  -->  00:00:19.700
that's declared in the enclosing code
as long as it's EffectivelyFinal.

6

00:00:22.100  -->  00:00:24.590
I think the best way to explain
this is in a small bit of code,

7

00:00:25.040  -->  00:00:27.570
let's create yet another class
in our fundamentals project.

8

00:00:27.570  -->  00:00:30.050
I'm going to call
this EffectivelyFinal.

9

00:00:36.830  -->  00:00:38.210
Okay, paste the code in.

10

00:00:38.880  -->  00:00:42.370
So, this code's got the usual
main method, which declares a

11

00:00:42.560  -->  00:00:45.750
local variable efinal as you
can see there, then it declares

12

00:00:45.750  -->  00:00:50.290
a LocalClass that prints out
efinal which again is the local

13

00:00:50.299  -->  00:00:52.019
variable from the enclosing scope.

14

00:00:53.299  -->  00:00:54.470
So, if we run this,

15

00:00:58.670  -->  00:01:00.570
we get the value of efinal equals one.

16

00:01:01.370  -->  00:01:05.470
Now, I'm able to use efinal from
within the local class because it's

17

00:01:05.620  -->  00:01:10.159
EffectivelyFinal, so it's declared and
assigned a value that never changes.

18

00:01:10.750  -->  00:01:13.860
You can test if a variable
is EffectivelyFinal by

19

00:01:13.870  -->  00:01:16.800
simply adding final to the
local variable declaration,

20

00:01:17.190  -->  00:01:18.310
which i'll do up here now.

21

00:01:21.910  -->  00:01:22.910
Run this,

22

00:01:25.680  -->  00:01:28.480
it still works, and there's no compilation errors.

23

00:01:28.480  -->  00:01:31.650
So, that's asserting that the
variable efinal is EffectivelyFinal.

24

00:01:32.220  -->  00:01:33.570
I'll just undo that again,

25

00:01:35.900  -->  00:01:37.280
so let's add a single statement

26

00:01:37.280  -->  00:01:43.649
after that, efinal++; the
code now longer compiles.

27

00:01:44.559  -->  00:01:48.670
Note that the error is on the usage
of efinal in the local class and not

28

00:01:48.710  -->  00:01:51.830
with the code that I've added on line
15, but again, the error is needs

29

00:01:51.830  -->  00:01:53.590
to be final or effectively final.

30

00:01:54.070  -->  00:01:57.290
Right, so, I'm going to undo
that code, the code change there.

31

00:01:58.340  -->  00:02:01.469
I'm going to try adding the same
line now, the efinal++ to the code

32

00:02:01.639  -->  00:02:03.449
after the local class declaration.

33

00:02:04.299  -->  00:02:09.490
So, basically down here efinal++
again, you're not going to

34

00:02:09.490  -->  00:02:10.729
get the same compiler error.

35

00:02:11.640  -->  00:02:15.250
It doesn't matter where you alter
efinal, if it's changed anywhere in

36

00:02:15.250  -->  00:02:19.100
the enclosing code then the compiler
recognizes that it's not effectively

37

00:02:19.100  -->  00:02:22.609
final, and will raise an error on the
reference of the variable in the local

38

00:02:22.609  -->  00:02:24.059
class as you can see it doing here.

39

00:02:25.140  -->  00:02:27.040
All right, so let's undo that so
the code is valid again.

40

00:02:28.930  -->  00:02:31.810
For completeness sake,
let's try one other change.

41

00:02:32.320  -->  00:02:36.750
Let's try changing the code in
the local class itself, so I'm

42

00:02:36.750  -->  00:02:42.750
going to add a ++ as a post
increment, same error again, needs

43

00:02:43.290  -->  00:02:45.130
to be final or effectively final.

44

00:02:46.020  -->  00:02:48.820
Attempting to alter efinal within
the local class is considered

45

00:02:49.060  -->  00:02:51.960
altering the efinal variable
from being effectively final.

46

00:02:52.760  -->  00:02:54.480
undo this again, so it's valid.

47

00:02:54.490  -->  00:02:58.500
So, next, let's have a look at
what happens when java compiles

48

00:02:58.500  -->  00:03:00.760
source files with inner classes.

49

00:03:01.690  -->  00:03:05.390
We're going to open our project
pane, and open the out folder,

50

00:03:05.530  -->  00:03:09.320
and down here to fundamentals,
right-click and Open in Terminal.

51

00:03:11.160  -->  00:03:12.300
They'll do a directory listing.

52

00:03:12.580  -->  00:03:15.899
I'm on window, so I'm going to
do dir, ls for mac, or linux.

53

00:03:16.400  -->  00:03:20.600
And looking at the code here,
we've got quite a few files there now.

54

00:03:21.480  -->  00:03:23.910
You can see that class files
are generated for each of the

55

00:03:23.910  -->  00:03:28.420
inner classes and named in
relationship to the enclosing class.

56

00:03:29.440  -->  00:03:31.440
Now these are hidden by
default within intellij.

57

00:03:31.440  -->  00:03:34.800
Alright, so let's exit here
to go back to intellij.

58

00:03:34.940  -->  00:03:39.960
And what we can do is right-click
on the output folder, select

59

00:03:39.970  -->  00:03:44.130
Mark Directory as, then
select Generated Sources Root.

60

00:03:46.309  -->  00:03:51.010
You can see by doing that, we now
get a list of all the inner classes.

61

00:03:52.140  -->  00:03:52.800
Alright!

62

00:03:54.670  -->  00:03:57.700
Let's leave nested and inner classes
here, and return our attention to the

63

00:03:57.700  -->  00:04:01.260
enum, and consider its construction
now in a little bit more detail.

64

00:04:01.910  -->  00:04:06.750
Alright, so let's start create
another file here, another java

65

00:04:06.750  -->  00:04:09.959
class, we'll call this one EnumExtras,

66

00:04:10.109  -->  00:04:21.020
This is a basic enum in a class
that prints the values of the enum.

67

00:04:22.110  -->  00:04:31.280
We'll run this, and you can see
the output below so far so good.

68

00:04:31.560  -->  00:04:35.320
Let's add some initialization code to
the enum, next, so that we can examine

69

00:04:35.320  -->  00:04:37.450
what order things are initialized.

70

00:04:38.340  -->  00:04:42.229
Alright, so let's replace our
simple enum with a considerably

71

00:04:42.249  -->  00:04:43.689
more complex example now.

72

00:04:44.280  -->  00:04:47.460
What I've done is now set up an
initializer for each constant,

73

00:04:47.660  -->  00:04:49.870
you can see the various initializers. they're commented.

74

00:04:50.400  -->  00:04:54.140
Now each constant has a value in
parentheses associated with it, which

75

00:04:54.160  -->  00:04:55.910
represents the constructor argument.

76

00:04:57.160  -->  00:04:59.049
Now, Enum Body as we
scroll down there.

77

00:04:59.580  -->  00:05:03.789
I've added a field named rating, we've
got a static initializer, there we've

78

00:05:03.789  -->  00:05:07.350
also got a regular initializer, and
also a constructor that I talked

79

00:05:07.350  -->  00:05:09.350
about, that sets the rating field.

80

00:05:10.100  -->  00:05:11.810
Alright, so, let's just
replace our main method.

81

00:05:11.810  -->  00:05:13.859
And you can see that I've
replaced the following

82

00:05:14.099  -->  00:05:16.790
And now, instead I'm printing
each enum value individually.

83

00:05:17.370  -->  00:05:19.940
I'm doing it this way to test
when the initialization of the

84

00:05:19.950  -->  00:05:23.080
constants occurs and in what
order elements are initialized.

85

00:05:23.850  -->  00:05:29.120
So, if we actually run this
now, and check the output.

86

00:05:31.170  -->  00:05:33.610
From this, you can see the order
of creation for this entity called

87

00:05:33.620  -->  00:05:35.060
Primary Color, which is our enum.

88

00:05:35.509  -->  00:05:38.299
So, each anonymous class
which represents the enum

89

00:05:38.340  -->  00:05:40.950
constant is initialized in
the order I defined them.

90

00:05:41.240  -->  00:05:44.290
So, the initializer, I defined
in the enum body block,

91

00:05:44.300  -->  00:05:45.109
if we have a look at that.

92

00:05:47.990  -->  00:05:52.490
So, that's executed first, so you can
see that code executed on line 37.

93

00:05:53.370  -->  00:05:57.369
So, next, the constructor is executed,
you can see our constructor there, and

94

00:05:57.910  -->  00:06:00.059
the output on line 42 confirms that.

95

00:06:00.709  -->  00:06:03.280
After the constructor, the
initializer I defined in the

96

00:06:03.320  -->  00:06:05.290
enum constant block is executed.

97

00:06:07.600  -->  00:06:11.676
And we can see that there, just
showing that's initialized and then

98

00:06:11.750  -->  00:06:15.079
the output, the third line of output,
they're showing red initialized.

99

00:06:15.339  -->  00:06:16.960
And that's the same for
the other colors as well.

100

00:06:17.570  -->  00:06:20.440
Now, after all constants are
initialized, you can see that

101

00:06:20.440  -->  00:06:22.750
the static initializer, if we
go down, have a look at that.

102

00:06:24.820  -->  00:06:28.450
That's then executed, you can
see that down here, Enum Class

103

00:06:28.510  -->  00:06:31.709
Initialization that's coming
from the static initializer.

104

00:06:32.809  -->  00:06:36.480
So, this results in a set of instances
of anonymous classes which extend

105

00:06:36.490  -->  00:06:40.260
the class, Primary Class which
each enum constant represents.

106

00:06:40.740  -->  00:06:43.750
You can see that when references
are made to primary color .blue,

107

00:06:43.750  -->  00:06:50.000
and primary color .yellow in the
main method, the initialization

108

00:06:50.020  -->  00:06:54.130
process of the enum constants
and enum itself are not repeated.

109

00:06:56.409  -->  00:06:58.940
Finally, let's explore
enums and interfaces.

110

00:06:59.210  -->  00:07:02.099
So, an enum can implement
an interface, and I want

111

00:07:02.099  -->  00:07:03.539
to demonstrate that next.

112

00:07:03.760  -->  00:07:05.210
So, we need a new class for this.

113

00:07:08.900  -->  00:07:10.350
Let's call this one TestEnumInterface.

114

00:07:21.000  -->  00:07:23.790
This code starts up by declaring
an interface, DoItInterface

115

00:07:23.800  -->  00:07:25.339
with a single method doIt.

116

00:07:26.299  -->  00:07:29.909
Moving on down, you can see that
that we're declaring an enum

117

00:07:29.909  -->  00:07:32.289
SecondaryColors which implements
the DoItInterface interface.

118

00:07:33.010  -->  00:07:36.705
Now, the enum body has an
implementation of doIt, you

119

00:07:36.705  -->  00:07:38.070
can see that on line 25.

120

00:07:38.599  -->  00:07:43.109
This is required if all the enum
constants do not define a doIt method.

121

00:07:43.679  -->  00:07:47.630
Note that the enum constant purple
has a body block that contains an

122

00:07:47.630  -->  00:07:51.250
implementation for doIt that overrides
the one declared in the enum body.

123

00:07:52.040  -->  00:07:55.380
Now, scrolling on down, we've
got our TestEnumInterface class.

124

00:07:55.880  -->  00:07:58.480
You can see it contains a method, printData

125

00:07:58.480  -->  00:08:02.710
that takes a parameter of type doIt interface,
and executes the doIt method.

126

00:08:03.490  -->  00:08:07.810
Also, got a main method there that
calls printData for two of our

127

00:08:07.810  -->  00:08:11.270
secondary colors, orange with the enum
body doIt implementation and purple,

128

00:08:11.600  -->  00:08:13.470
which had its own doIt implementation.

129

00:08:13.470  -->  00:08:14.680
And you can you can see that there.

130

00:08:17.450  -->  00:08:21.270
So, running this, you'll
see the output there,

131

00:08:21.920  -->  00:08:23.319
it's working as intended.

132

00:08:24.180  -->  00:08:28.200
Now, if we go back up to our
enum, if we remove the doIt

133

00:08:28.220  -->  00:08:29.909
method here, just delete that.

134

00:08:31.210  -->  00:08:34.400
We've suddenly got two errors,
you can see there, one for each

135

00:08:34.400  -->  00:08:35.829
of the constants orange and green.

136

00:08:37.259  -->  00:08:38.719
And you can see, it's
telling us it must implement

137

00:08:38.719  -->  00:08:39.819
the abstract method doIt.

138

00:08:40.589  -->  00:08:44.400
And just to confirm that if
we actually replace our enum

139

00:08:44.630  -->  00:08:47.830
definitions, we go back up to here.

140

00:08:49.160  -->  00:08:56.030
Orange, and green, and purple, and
paste in some new code, each of

141

00:08:56.030  -->  00:08:59.279
these now has its own doIt method
and the errors have now disappeared.

142

00:08:59.949  -->  00:09:05.860
And if you run this, we find the
output is the same as what it

143

00:09:05.870  -->  00:09:07.330
was before I made those changes.

144

00:09:07.830  -->  00:09:11.020
So, your options when implementing
an interface on an enum is to

145

00:09:11.020  -->  00:09:14.679
implement the method or methods on
each enum constant, or implement

146

00:09:14.679  -->  00:09:16.179
the methods in the enum body.

147

00:09:16.650  -->  00:09:19.390
And you can do a combination of
both if you define the interface

148

00:09:19.680  -->  00:09:21.910
method or methods in the enum body.

149

00:09:21.920  -->  00:09:27.209
So, you can see that you can
make an enum very complex, but

150

00:09:27.210  -->  00:09:30.030
in general, it's best to keep
your enum declaration simple.

151

00:09:30.700  -->  00:09:33.860
There are many compile-time errors
you can introduce in an enum.

152

00:09:34.430  -->  00:09:37.710
Any of the items below will
result in a compile-time error.

153

00:09:38.260  -->  00:09:40.790
Declaring a constructor in
an enum with the public or

154

00:09:40.790  -->  00:09:42.390
protected access modifiers.

155

00:09:43.040  -->  00:09:44.680
Using ‘super’ in a constructor.

156

00:09:45.020  -->  00:09:46.139
Extending an enum.

157

00:09:46.679  -->  00:09:50.150
Or, excluding the ; [semicolon]
after the constants list if the

158

00:09:50.190  -->  00:09:51.829
enum has any statements in the body.

159

00:09:54.139  -->  00:09:56.720
Alright, so in the last two videos,
what i've tried to do is show you

160

00:09:56.720  -->  00:10:00.370
examples of code that you may have
not had much opportunity to exercise

161

00:10:00.430  -->  00:10:02.239
with in your daily coding life.

162

00:10:02.800  -->  00:10:04.900
And hopefully, enough questions
come up similar to this in the

163

00:10:04.900  -->  00:10:07.650
exam, you'll be in a position
to be able to answer them.

164

00:10:08.210  -->  00:10:10.370
So, next you'll be presented
with a couple of quiz questions

165

00:10:10.410  -->  00:10:11.519
just to test your skills.

166

00:10:11.920  -->  00:10:13.990
And then what we'll do is, we'll
move on to the next section,

167

00:10:14.360  -->  00:10:17.600
and specifically, that's all
about exception handling.

168

00:10:17.950  -->  00:10:20.770
So, see you in the next quiz and
then, ultimately, in the next section.
