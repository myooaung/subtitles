WEBVTT
1
00:00:05.290 --> 00:00:11.500
In the last two videos, we talked about the use of the optional class in this video, we'll be reviewing

2
00:00:11.500 --> 00:00:17.500
two, three methods that return in operation as we look at searching stream data, the following search

3
00:00:17.500 --> 00:00:20.780
operations, the terminal operations, and are listed in the table below.

4
00:00:21.280 --> 00:00:26.410
So the first method signature is all met, which returns to Berlin, takes a predicate, which is a

5
00:00:26.410 --> 00:00:30.630
wild card law about all elements must match the provided predicate.

6
00:00:31.090 --> 00:00:35.460
It may not evaluate the predicate on all elements, if not necessary, for determining the result.

7
00:00:35.920 --> 00:00:39.760
If the stream is empty, the truth is returned and the predicate is not evaluated.

8
00:00:40.120 --> 00:00:41.320
Short-circuiting is, yes.

9
00:00:43.550 --> 00:00:48.890
Next model is any match which returns to Berlin takes a predicate which is a wildcard lie about the

10
00:00:48.890 --> 00:00:49.340
returns.

11
00:00:49.340 --> 00:00:54.740
Were there any elements of this match that provided predicate may not evaluate the predicate on all

12
00:00:54.740 --> 00:00:59.930
elements, if not necessary, for determining the result if the stream is empty and forces return to

13
00:00:59.930 --> 00:01:01.700
the predicate is not evaluated?

14
00:01:02.060 --> 00:01:08.870
Yes, the Short-circuiting text one is find any which returns an optional of type T, so it returns

15
00:01:08.870 --> 00:01:13.070
an optional describing some element of the stream or an empty optional if the stream is empty.

16
00:01:13.400 --> 00:01:20.630
Yes, the short-circuiting x1 fired first also returns an optional type T, so it returns an option

17
00:01:20.630 --> 00:01:23.920
of describing the first element of the stream or an empty optional.

18
00:01:23.930 --> 00:01:29.060
If the stream is empty, if the stream is normally counted order, then any element may be returned.

19
00:01:29.360 --> 00:01:29.590
Yes.

20
00:01:29.630 --> 00:01:30.470
To Short-circuiting.

21
00:01:32.760 --> 00:01:39.330
The last one and non-match takes a predicate using a wildcard, lower bound as a parameter, the returns

22
00:01:39.330 --> 00:01:45.030
a boolean, the returns with no elements of this dream match that provided predicate may not evaluate

23
00:01:45.030 --> 00:01:48.430
the predicate on all elements, if not necessary, for determining the result.

24
00:01:48.720 --> 00:01:52.380
And if the stream is empty, the true return to the predicate is not evaluated.

25
00:01:52.680 --> 00:01:53.850
Short-circuiting also.

26
00:01:53.860 --> 00:01:54.230
Yes.

27
00:01:54.960 --> 00:01:55.290
All right.

28
00:01:55.290 --> 00:01:59.070
So let's put some of these interactional came back to our streams operation project.

29
00:01:59.630 --> 00:02:00.780
Let's create a new class.

30
00:02:01.290 --> 00:02:02.820
We'll call it stream searches.

31
00:02:13.740 --> 00:02:18.240
So looking at this card, we're using the Chavalit, you Utah, not random class to generate a random

32
00:02:18.240 --> 00:02:24.600
number from zero to 20 in creating an infinite stream, I'm demonstrating using find any on an infinite

33
00:02:24.600 --> 00:02:29.480
stream first using intermediate operation peak to print elements on the stream.

34
00:02:29.820 --> 00:02:36.180
The scrolling on down, we do the same, but find first an option always returned if the optional has

35
00:02:36.180 --> 00:02:39.180
a value I use if present to print the value.

36
00:02:39.600 --> 00:02:39.830
All right.

37
00:02:39.840 --> 00:02:41.280
So let's give this a go by running it.

38
00:02:44.500 --> 00:02:49.330
The results may differ as far as the random integer you get back from, each one will run the signal

39
00:02:49.330 --> 00:02:50.020
to confirm that.

40
00:02:51.140 --> 00:02:56.780
You can say get a different result this time, but you can say that both find any and find first terminated

41
00:02:57.050 --> 00:03:01.500
the infinite stream immediately after one element because both criteria were met.

42
00:03:01.910 --> 00:03:05.480
It found the first element and it found an existing element to return.

43
00:03:05.870 --> 00:03:06.050
Right.

44
00:03:06.090 --> 00:03:10.640
So let's close it down and alter the code slightly.

45
00:03:11.110 --> 00:03:16.550
What I'm going to do is add a limit five intermediate operation to both pipelines before the peak operation

46
00:03:16.910 --> 00:03:18.950
and assorted operation after the peak.

47
00:03:19.980 --> 00:03:25.550
We'll go back up to the anyone first to hear I'm going to add a little bit of a comment as well.

48
00:03:27.280 --> 00:03:35.290
The debt limit said that to five dead after the peak at assorted here got slaughtered.

49
00:03:36.360 --> 00:03:39.620
So that's our infinite stream for any item will do the same.

50
00:03:39.670 --> 00:03:44.220
The first item said before the peak limit.

51
00:03:45.830 --> 00:03:54.560
Don't limit was set out to five after the peak, again, same thing approximately storm sort, dot sorted.

52
00:03:56.040 --> 00:03:58.170
Let's put a comment up here as well to be consistent.

53
00:03:59.830 --> 00:04:00.920
Right, so from that now.

54
00:04:02.820 --> 00:04:06.510
And we can see the airport apparition shown below and again, your numbers are going to be different,

55
00:04:06.510 --> 00:04:11.940
but find any and find first appear to be doing exactly the same thing, but turning the first element

56
00:04:11.940 --> 00:04:18.660
in the pipeline after processing what's right again to confirm we're getting different results there.

57
00:04:18.800 --> 00:04:23.670
In fact, the two methods are effectively the same for non parallel streams.

58
00:04:24.060 --> 00:04:26.530
And I'll be talking about parallel streams in a later video.

59
00:04:27.030 --> 00:04:32.220
However, if you're really interested in the first element, you should always use the find first method.

60
00:04:32.910 --> 00:04:37.920
Java documentation states that the find any method is explicitly non-deterministic.

61
00:04:38.340 --> 00:04:40.860
It's free to select any element in the stream.

62
00:04:41.910 --> 00:04:44.520
So now let's see what happens if there's no elements on the stream.

63
00:04:45.030 --> 00:04:48.690
Going to read some more code to our main method down the bottom.

64
00:04:51.730 --> 00:04:58.450
So here I'm creating an empty list using list of and assigning it to a variable list and then create

65
00:04:58.450 --> 00:05:03.850
to stream pipelines for my list, the first with find any method and a second using find first.

66
00:05:04.060 --> 00:05:08.950
And I've also used the if all else method are the optional returned, which we discussed in a previous

67
00:05:08.950 --> 00:05:09.940
video in this section.

68
00:05:10.420 --> 00:05:13.000
They will a statement either way, but it will print.

69
00:05:13.000 --> 00:05:13.450
Nope.

70
00:05:13.690 --> 00:05:15.610
If no element was returned from the stream.

71
00:05:15.920 --> 00:05:16.280
Let's run.

72
00:05:18.850 --> 00:05:23.500
The Republicans say it wasn't the element Fennell's dreamed up was the first element on stream No.

73
00:05:26.860 --> 00:05:31.600
So, again, not much difference here between these methods with no element is on the straight an empty

74
00:05:31.600 --> 00:05:32.500
option which return.

75
00:05:33.190 --> 00:05:33.520
All right.

76
00:05:33.520 --> 00:05:37.610
So next, let's look at the other three search methods available to you on the stream.

77
00:05:38.020 --> 00:05:40.150
These methods return a boolean as a result.

78
00:05:40.630 --> 00:05:43.150
These methods are all match any match and none match.

79
00:05:43.560 --> 00:05:46.360
OK, we're going to play some code in our mind with.

80
00:05:49.710 --> 00:05:54.400
That's why we're standing up here on line 60, this code starts by creating some test data.

81
00:05:54.870 --> 00:06:01.050
Mr. Stringfellow is four numbers and then proceeding to test three conditions using any match or match.

82
00:06:01.910 --> 00:06:09.680
And none match any match will return true of any elements match the condition, the predicate past all

83
00:06:09.680 --> 00:06:14.240
match return true with all elements, match the condition and not matches basically the opposite of

84
00:06:14.240 --> 00:06:18.980
any match and will return true if no elements match the condition to run the code.

85
00:06:21.510 --> 00:06:22.850
And we can see the output there.

86
00:06:24.090 --> 00:06:30.090
Which is consistent with our test data, you can see to find a line 62 or 63 compensable codine.

87
00:06:33.400 --> 00:06:38.080
So here, creating an empty list and repeating the same tests, I'm just printing the billion value

88
00:06:38.080 --> 00:06:42.190
returned from each terminal operation, we have got some warnings here from intelligibly.

89
00:06:43.120 --> 00:06:47.050
Talking about the fact that it's always going to be false, but we're just doing this for test purposes,

90
00:06:47.470 --> 00:06:48.040
we run this.

91
00:06:51.720 --> 00:06:56.160
The output confirms what the specifications stated about these methods, if no elements are in the stream

92
00:06:56.160 --> 00:07:01.140
pipeline or metal non-match, both return true in any match returns false.

93
00:07:03.960 --> 00:07:09.900
So these results provide us with the confusing axiom that all elements where there are none match the

94
00:07:09.900 --> 00:07:13.330
criteria and no elements when there are none match the criteria.

95
00:07:13.620 --> 00:07:19.020
This video has reviewed the five ways to stream terminal operations to answer questions about the elements

96
00:07:19.020 --> 00:07:19.620
in a stream.

97
00:07:20.020 --> 00:07:23.700
So those questions are, does the stream pipeline contain any elements?

98
00:07:24.180 --> 00:07:28.170
What is the first element on the stream pipeline to any of the elements in the pipeline?

99
00:07:28.170 --> 00:07:29.340
Match my criteria.

100
00:07:31.550 --> 00:07:36.470
Do all of the elements in the pipeline match my criteria and the last question, do none of the elements

101
00:07:36.470 --> 00:07:38.680
in the pipeline match my criteria?

102
00:07:39.690 --> 00:07:44.750
Before I move on to the next video, I want to compare the intermediate method filter with a method

103
00:07:44.760 --> 00:07:51.480
just discussed the filter method, like the URL match any match and non-match methods except a predicate

104
00:07:51.480 --> 00:07:54.540
as a parameter, but it is not a terminal operation.

105
00:07:54.960 --> 00:07:58.120
Instead, it limits a stream to those elements that match the predicate.

106
00:07:58.530 --> 00:07:59.690
So this will go back to code.

107
00:08:00.090 --> 00:08:02.690
That's paste this into our main method.

108
00:08:02.910 --> 00:08:09.060
The bottom here creating a stream as before with a random limiting that to 10 elements.

109
00:08:09.360 --> 00:08:14.760
But then next I limit the data even further by specifying only those elements whose value is greater

110
00:08:14.760 --> 00:08:17.230
than 10 should continue to be processed.

111
00:08:17.850 --> 00:08:21.050
The results are going to be different for each run, but let's run it here.

112
00:08:23.600 --> 00:08:24.920
We lived for 10 to 12 years.

113
00:08:24.950 --> 00:08:26.210
I can say they are running again.

114
00:08:27.710 --> 00:08:29.750
We get a different result the second time, as you can see.

115
00:08:30.140 --> 00:08:35.720
All right, let's now move on to the next video where I'll be reviewing terminal operations that aggregate.

116
00:08:35.990 --> 00:08:37.250
See you in the next video.
