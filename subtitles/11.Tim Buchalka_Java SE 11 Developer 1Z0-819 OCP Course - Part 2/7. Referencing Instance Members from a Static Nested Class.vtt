WEBVTT
1

00:00:05.370  -->  00:00:09.329
All right, so continuing on from
our last video, talking more about

2

00:00:09.330  -->  00:00:13.849
nested classes, I want to drive in
one very important point, and that's

3

00:00:13.849  -->  00:00:18.109
that you can't reference instance
members of the enclosing class in any

4

00:00:18.119  -->  00:00:20.169
members of the static nested class.

5

00:00:20.800  -->  00:00:24.880
Now, this is for the same reason you
cannot use instance members in static

6

00:00:24.880  -->  00:00:26.630
initializers and static methods.

7

00:00:27.309  -->  00:00:31.399
A static nested class's reason
for existence generally is to

8

00:00:31.410  -->  00:00:32.950
be used as a static context.

9

00:00:33.190  -->  00:00:34.850
We know that it's in a static context.

10

00:00:35.000  -->  00:00:37.960
There's no instance from which
to make use of instance members.

11

00:00:39.690  -->  00:00:41.690
So, what we need to do is go
back to our enclosing class.

12

00:00:44.050  -->  00:00:47.850
We want to look at our NestedStaticClass 
and what we want to do is make a

13

00:00:47.850  -->  00:00:49.860
change to our getInstanceName method.

14

00:00:50.500  -->  00:00:52.099
This one here on line 46.

15

00:00:52.099  -->  00:00:54.879
And what I want to do
is add a line of output.

16

00:00:56.179  -->  00:01:00.700
So on line 47, I'm doing a
System.out.println [outername].

17

00:01:04.420  -->  00:01:05.660
Now, this is a compiler error.

18

00:01:05.660  -->  00:01:07.700
We're just looking at the code above.

19

00:01:09.250  -->  00:01:12.690
We have got outername defined
on line 13 as you can see there.

20

00:01:14.890  -->  00:01:16.650
So, basically, outername
is an instance member

21

00:01:16.650  -->  00:01:17.780
of the enclosing class.

22

00:01:18.860  -->  00:01:21.719
So, it's a compiler error because
although the method getInstance

23

00:01:21.719  -->  00:01:25.726
Name is not static, it is declared
on a static nested class and we

24

00:01:25.809  -->  00:01:27.860
can see that defined on line 33.

25

00:01:28.770  -->  00:01:32.530
It's important to remember that a
static nested class exists only as a

26

00:01:32.530  -->  00:01:36.850
class member and that any code in the
nested class will not have access to

27

00:01:36.850  -->  00:01:39.050
any particular instances variables.

28

00:01:40.380  -->  00:01:42.660
But if I change that code now,
what I'm going to do is just

29

00:01:42.660  -->  00:01:44.559
replace it, paste in some code.

30

00:01:46.340  -->  00:01:47.880
You can see again;
this is not permitted.

31

00:01:47.930  -->  00:01:52.060
We're trying to access doSomething
on instance, which of course,

32

00:01:52.090  -->  00:01:55.730
is a public method there on
line 26 in our enclosing class.

33

00:01:55.730  -->  00:01:58.739
And that's also not allowed
as you can see there.

34

00:01:59.419  -->  00:02:01.639
Non-static method
doSomethingOnInstance cannot be

35

00:02:01.639  -->  00:02:03.690
referred from a static context.

36

00:02:04.699  -->  00:02:08.229
So, you can see where this might be
difficult to spot on a code sample

37

00:02:08.280  -->  00:02:11.860
in an exam question, that seems to be
about an entirely different subject.

38

00:02:12.420  -->  00:02:13.400
So, let's just undo that.

39

00:02:15.840  -->  00:02:17.980
We'll go back to how it was
before I made any changes.

40

00:02:19.240  -->  00:02:22.680
Let's now also test the enclosing
classes methods and its access

41

00:02:22.680  -->  00:02:24.520
to the nested classes methods.

42

00:02:25.309  -->  00:02:30.200
So, I'm going to go up to do
something on instance here on line 26.

43

00:02:31.510  -->  00:02:35.270
You see at the moment, the comment
on line 28 tells us that line 29

44

00:02:35.270  -->  00:02:38.000
is invoking the nested classes
method via an instance reference.

45

00:02:39.210  -->  00:02:42.679
Let's try and change that
so that instead, it's trying

46

00:02:42.679  -->  00:02:43.540
to use a class reference.

47

00:02:43.550  -->  00:02:48.317
So, if we change that, paste it
in, I'm trying to invoke the nested

48

00:02:48.490  -->  00:02:50.070
class method via class reference.

49

00:02:50.420  -->  00:02:52.929
We've got a compiler error
there - non-static method

50

00:02:53.610  -->  00:02:55.770
getInstanceName cannot be
referenced from a static context.

51

00:02:57.089  -->  00:03:01.199
Just because nested static class
is nested in the enclosing class,

52

00:03:02.239  -->  00:03:05.480
the enclosing class has no special
privileges to access instance

53

00:03:05.480  -->  00:03:07.310
members from a static context.

54

00:03:07.320  -->  00:03:10.260
It has to use an instance of the
nested static class to do it.

55

00:03:11.270  -->  00:03:13.770
So, I'll just undo that and go
back to the code that was working.

56

00:03:14.889  -->  00:03:17.160
Let me just make sure we've
still got our code that works.

57

00:03:18.180  -->  00:03:19.020
And so, it's still working.

58

00:03:23.220  -->  00:03:26.550
All right, so in the examples in
this video and the previous one,

59

00:03:26.550  -->  00:03:30.829
I've demonstrated that the static modifier
can be used on a nested class, and

60

00:03:30.830  -->  00:03:33.449
also previously, Iâ€™ve demonstrated
that it can't be though, it's not

61

00:03:33.450  -->  00:03:35.610
allowed to be used on an outer class.

62

00:03:36.240  -->  00:03:39.740
I've also demonstrated that the
static modifier allows access to

63

00:03:39.740  -->  00:03:43.580
the nested class using the class
name or names either with a simple

64

00:03:43.580  -->  00:03:46.600
reference if the import statement
specifies the full reference

65

00:03:46.880  -->  00:03:48.510
or the hierarchical reference.

66

00:03:49.230  -->  00:03:52.239
In addition, I've demonstrated that
static members in the static nested

67

00:03:52.240  -->  00:03:56.490
class can be accessed directly from
static or non-static methods, and

68

00:03:56.490  -->  00:04:00.130
access to them follows the same rules
of visibility as any other members.

69

00:04:02.090  -->  00:04:05.109
I've also demonstrated that static
nested classes can be instantiated

70

00:04:05.639  -->  00:04:09.740
and non-static attributes and methods
can be accessed or invoked through an

71

00:04:09.740  -->  00:04:11.730
instance of the static nested class.

72

00:04:12.710  -->  00:04:15.519
I've also demonstrated that
instance members on an enclosing

73

00:04:15.530  -->  00:04:19.180
class cannot be referenced by
any members, static or non-static

74

00:04:19.279  -->  00:04:21.049
of the static nested class.

75

00:04:21.279  -->  00:04:25.269
And finally, we saw that instance
members of static nested classes

76

00:04:25.270  -->  00:04:28.710
can only be referenced by the
enclosing class using an instance

77

00:04:28.710  -->  00:04:30.650
reference of the nested class.

78

00:04:31.910  -->  00:04:33.469
Right, so let's end this video here.

79

00:04:33.550  -->  00:04:36.250
And in the next one, I want
to take a look at non-static

80

00:04:36.350  -->  00:04:37.419
inner member classes.

81

00:04:37.980  -->  00:04:39.170
See you in the next video.
