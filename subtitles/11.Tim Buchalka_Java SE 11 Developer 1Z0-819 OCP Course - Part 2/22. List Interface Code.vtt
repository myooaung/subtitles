WEBVTT
1
00:00:05.670 --> 00:00:09.990
So moving on from the last video, let's look at some list examples, we're going to create a new class

2
00:00:09.990 --> 00:00:10.240
here.

3
00:00:10.710 --> 00:00:12.000
We're going to call it list example.

4
00:00:17.500 --> 00:00:18.220
Plus, the current.

5
00:00:20.570 --> 00:00:24.450
This is using the collections test class that we've created in this section.

6
00:00:24.720 --> 00:00:29.660
They're using it to exercise the collection interface tests with an instance of an array list of string.

7
00:00:29.670 --> 00:00:30.930
And you can see we're going to need method there.

8
00:00:31.380 --> 00:00:32.700
There's our list of string.

9
00:00:33.520 --> 00:00:37.900
And they were calling to do stuff with collection method on line 21 to run this.

10
00:00:39.810 --> 00:00:40.440
As a result.

11
00:00:41.800 --> 00:00:48.010
So the output's demonstrating that Israelis cannot knows that Israelis can have duplicate elements and

12
00:00:48.010 --> 00:00:53.620
also that a royalist is ordered by an index which is inferred when creating a new list.

13
00:00:55.040 --> 00:00:59.840
But so next, what we're gonna do is test some list specific methods, you already know that you can

14
00:00:59.840 --> 00:01:05.270
access elements via an index and I listed in slides in the previous video the many things you can do

15
00:01:05.270 --> 00:01:06.710
with index specific methods.

16
00:01:06.980 --> 00:01:11.900
So let's create a new method in this list example class to exercise some of these methods.

17
00:01:13.070 --> 00:01:14.270
OK, so this method.

18
00:01:15.490 --> 00:01:16.570
Do simple stuff.

19
00:01:17.420 --> 00:01:22.430
That's specifically what I'm doing in this method, I'm demonstrating the methods and this you can see

20
00:01:22.430 --> 00:01:24.440
they're like 28 at all.

21
00:01:24.890 --> 00:01:25.820
I'm 34.

22
00:01:26.420 --> 00:01:27.530
Also going to sit there.

23
00:01:27.870 --> 00:01:30.500
I'm 37 index of like 40.

24
00:01:31.370 --> 00:01:35.030
As well as is 43, that the last index of a line 50.

25
00:01:35.990 --> 00:01:43.250
Couple of things to note here with the admitted online 28, if you pass an index, it doesn't return

26
00:01:43.250 --> 00:01:49.130
a boolean, as does the collection not admitted, but also the methods index of a loss index of what

27
00:01:49.130 --> 00:01:50.110
you're using on screen there.

28
00:01:50.120 --> 00:01:53.180
Now, the return to minus one of the elements not found.

29
00:01:53.570 --> 00:01:56.300
Remember, the duplicate values are allowed in a list.

30
00:01:56.690 --> 00:01:57.440
So let's run this.

31
00:01:59.890 --> 00:02:00.720
And there's the apple.

32
00:02:02.520 --> 00:02:06.000
Which, of course, is identical because I haven't added a method to actually test this.

33
00:02:07.860 --> 00:02:13.220
All right, so there's the code in our main method to call this through simple stuff method.

34
00:02:13.500 --> 00:02:14.300
Let's run this now.

35
00:02:17.500 --> 00:02:23.140
Now you can see the results and security methods on the list, but I want to look at several of the

36
00:02:23.140 --> 00:02:25.360
more interesting methods of the list interface.

37
00:02:25.930 --> 00:02:29.140
We're going to add this to our main method, this time the bottom.

38
00:02:31.750 --> 00:02:33.430
There it is, and I just accept that import.

39
00:02:39.310 --> 00:02:44.350
Specifically, what I'm doing here, I'm creating a surplus of three elements from the array list names

40
00:02:44.350 --> 00:02:48.280
list and assigning them to a new list variable called Short List.

41
00:02:48.790 --> 00:02:52.930
And after that, I'm then ordering in reverse order is incorporated reverse order.

42
00:02:52.930 --> 00:02:53.680
So you can see there.

43
00:02:54.190 --> 00:02:56.440
And I'll be discussing that in more detail in a little bit here.

44
00:02:56.710 --> 00:03:01.270
But suffice to say here that it reverses the order of the list by the natural ordering of the elements

45
00:03:01.270 --> 00:03:01.750
of the list.

46
00:03:02.560 --> 00:03:03.580
So if you run this now.

47
00:03:06.060 --> 00:03:12.000
So looking at the sublist, few output reveals that short list is a view, a pass through collection

48
00:03:12.210 --> 00:03:17.490
for the elements in names list, you could say that not only was the short list ordered, but the elements

49
00:03:17.490 --> 00:03:20.340
represented in the source array list names list elements.

50
00:03:20.340 --> 00:03:24.030
One, two, three were also ordered for what's next.

51
00:03:24.030 --> 00:03:25.380
Let's try altering the view.

52
00:03:25.980 --> 00:03:28.590
So go back to our main method for posting some more Cotan here.

53
00:03:30.460 --> 00:03:36.230
And you can see what I've done there with this new code, I'm adding an element on to The View I will.

54
00:03:36.700 --> 00:03:37.960
But what does this actually do?

55
00:03:38.540 --> 00:03:39.430
Let's actually run this.

56
00:03:42.840 --> 00:03:48.300
You can see from the airport the code confirms that we've actually added on to the underlying array

57
00:03:48.300 --> 00:03:50.240
list and sorted the names as well.

58
00:03:51.670 --> 00:03:57.710
So given that what happens if I alter the source list names list, let's try to demonstrating that.

59
00:03:59.230 --> 00:04:00.690
Process again, in the main method.

60
00:04:02.750 --> 00:04:08.360
You can see what we're trying to do is we're trying to add the element bred and index position six names

61
00:04:08.360 --> 00:04:08.690
list.

62
00:04:13.420 --> 00:04:18.340
They could say that that works and execute as well, and you could see bread has been added successfully

63
00:04:18.340 --> 00:04:21.490
to the list, but I back to my method again.

64
00:04:22.450 --> 00:04:28.360
The thoroughness that's pretty short list by penning this line to the main method, the compilation

65
00:04:28.360 --> 00:04:29.590
errors, but if we run this.

66
00:04:32.430 --> 00:04:35.970
We actually get an exception, they can send exceptions online, 56.

67
00:04:37.870 --> 00:04:38.890
Which was the card we had it.

68
00:04:39.850 --> 00:04:45.130
Concurrent modification exception and the problem with it is once you change the list, which the view

69
00:04:45.130 --> 00:04:47.830
was based on, the view is no longer usable.

70
00:04:48.760 --> 00:04:52.480
So I'm going to undo that change, specifically deleting like 56.

71
00:04:57.690 --> 00:05:02.610
So in the one zero eight one nine part one course are provided several examples of the two static methods

72
00:05:02.620 --> 00:05:03.240
copy of.

73
00:05:03.450 --> 00:05:08.640
And of course, it's important to remember that both of these methods return an immutable list.

74
00:05:08.940 --> 00:05:12.530
The copy of Method creates a copy of the list passed to it.

75
00:05:12.960 --> 00:05:19.730
The other method produces an immutable list from a set of arguments zero to many, each of which represents

76
00:05:19.740 --> 00:05:20.550
a list element.

77
00:05:21.500 --> 00:05:24.400
So let's bring go back to the code, we're going to add a couple of samples here.

78
00:05:25.660 --> 00:05:28.160
Going to post this again at the bottom of our method.

79
00:05:31.090 --> 00:05:36.100
So I'm using a copy of Method to create a copy of names list, which are then subsequently print out.

80
00:05:36.580 --> 00:05:41.380
Next, I create a new list using the immutable copy and try and add a member to the new list.

81
00:05:41.770 --> 00:05:44.980
Obviously, we've got no compilation errors there if we run the code.

82
00:05:49.290 --> 00:05:50.160
Everything works.

83
00:05:51.190 --> 00:05:59.200
But if you go back to the car and the last line we're trying to pin this code, the code composers can

84
00:05:59.200 --> 00:05:59.680
see their.

85
00:06:00.500 --> 00:06:05.720
But if we try to run this now, remember, we're using the copy test we created using a copy of a long

86
00:06:05.740 --> 00:06:06.170
58.

87
00:06:08.470 --> 00:06:11.620
We actually get an exception here and supported operation exception.

88
00:06:12.620 --> 00:06:16.220
The priest at the list I created with a copy of cannot be changed.

89
00:06:17.030 --> 00:06:18.590
So looking at these two examples again.

90
00:06:20.070 --> 00:06:26.190
We need to review these in the one instance I used, the imitable is created by Koppio and assigned

91
00:06:26.220 --> 00:06:27.880
directly to a local variable.

92
00:06:28.560 --> 00:06:32.400
No changes can be made to this list represented by the variable copied list.

93
00:06:32.400 --> 00:06:33.360
And we saw the exception.

94
00:06:33.720 --> 00:06:38.310
But on the other hand, I passed the imitable list to the constructor of a realist.

95
00:06:39.150 --> 00:06:41.610
The result list in this case is not immutable.

96
00:06:41.940 --> 00:06:45.260
And we saw that that worked when we did an ad online, 62.

97
00:06:46.200 --> 00:06:46.520
All right.

98
00:06:46.530 --> 00:06:48.210
So just under that last change.

99
00:06:49.620 --> 00:06:51.600
So let's now consider the method briefly.

100
00:06:52.020 --> 00:06:58.530
This method is a helper method allowing you to create lists, the comma delimited list of elements that

101
00:06:58.530 --> 00:07:01.980
we actually use this method in the first line of code, in the main method so that I can have a look

102
00:07:01.980 --> 00:07:02.310
at that.

103
00:07:04.410 --> 00:07:05.400
See that line 18?

104
00:07:06.550 --> 00:07:11.830
Well, we passed the immutable collection to the constructor of the array list, which uses the elements

105
00:07:11.830 --> 00:07:12.400
in the list.

106
00:07:13.590 --> 00:07:16.890
So the copy of an off methods are easy to get confused.

107
00:07:17.310 --> 00:07:22.560
You'll likely see code that shows them being used as part of constructors as well as being simply assigned

108
00:07:22.560 --> 00:07:27.030
to local variables that do not be surprised if you see code that interchanges the arguments.

109
00:07:27.780 --> 00:07:28.110
All right.

110
00:07:28.200 --> 00:07:32.550
Let's end it here and in the next one, or swing over and start looking at cues.

111
00:07:33.060 --> 00:07:34.080
See you in the next video.
