WEBVTT
1
00:00:05.680 --> 00:00:12.070
Let's start talking about Kyuss, firstly, a coup that's a collection used generally for holding elements

2
00:00:12.070 --> 00:00:16.420
prior to processing, the Q is usually ordered first in, first out.

3
00:00:16.720 --> 00:00:20.230
The first element is the head of the Q The last element is the tailor.

4
00:00:20.240 --> 00:00:22.120
The Q A priority.

5
00:00:22.120 --> 00:00:23.200
Q is one exception.

6
00:00:23.650 --> 00:00:29.440
A key element is normally accessed by retrieving and removing the first element in the Q and by adding

7
00:00:29.440 --> 00:00:30.820
an element to the end of the Q.

8
00:00:31.630 --> 00:00:36.910
The Q usually does not allow null elements and a Q also does allow duplicate elements.

9
00:00:39.000 --> 00:00:45.000
The humidify extends collection, but provides additional methods for insertion, removal and inspection

10
00:00:45.000 --> 00:00:46.100
as shown in the table here.

11
00:00:47.110 --> 00:00:52.950
You can say you've got an admitted passing E that inserts and it returns, true or false or the legal

12
00:00:52.950 --> 00:00:53.820
stat exception.

13
00:00:53.820 --> 00:00:57.180
And that's the element to the back of CU offer with ease.

14
00:00:57.180 --> 00:01:03.480
An argument is also an insert term value is true or false, and it also adds the element to the back

15
00:01:03.480 --> 00:01:03.970
of the queue.

16
00:01:04.320 --> 00:01:08.010
We've got an element, method, call, trace the element.

17
00:01:08.460 --> 00:01:13.830
The returned value is the head element or exception if accepted and obviously doesn't remove.

18
00:01:15.950 --> 00:01:22.220
We've got peak, but also does retreat and doesn't do a remove, and it returns the hit element or another

19
00:01:22.220 --> 00:01:28.790
for QST, we've got the removed method, which both retrieves and removes the hit element or throws

20
00:01:28.790 --> 00:01:30.060
an exception if accepted.

21
00:01:30.320 --> 00:01:36.430
And finally, we've got poll that method both retrieves and removes and returns the hidden element or

22
00:01:36.440 --> 00:01:37.580
null ifukube empty.

23
00:01:38.580 --> 00:01:45.420
Most Java implementations also implement deck, which is a double standard queue, so discuss the interface

24
00:01:45.420 --> 00:01:45.980
here as well.

25
00:01:48.460 --> 00:01:54.100
So Dick is a double standard cue for a linear collection of elements, tech support, insertion and

26
00:01:54.100 --> 00:01:56.040
removal of the elements of both endpoints.

27
00:01:56.050 --> 00:02:02.110
The head in the tail dick can be used as first in, first out cues, but also as last in, first out

28
00:02:02.110 --> 00:02:02.650
stacks.

29
00:02:03.370 --> 00:02:09.550
The JDK has predefined classes like a ray dick and initialised which implement the interface and extends

30
00:02:09.550 --> 00:02:10.590
the cue interface.

31
00:02:11.050 --> 00:02:16.000
And as I mentioned above, note that the techie device can be used both as a last in first out stack

32
00:02:16.210 --> 00:02:17.770
and a first in first Accu.

33
00:02:20.070 --> 00:02:25.110
Take extends cable provides additional methods for insertion, removal, inspection as listed in the

34
00:02:25.110 --> 00:02:25.590
table.

35
00:02:26.150 --> 00:02:32.460
We've got push per second element, a dozen insert button values void and it adds the element of the

36
00:02:32.460 --> 00:02:38.430
head of the key Bozak up pop that both retrieves and removes and actually removes the first element

37
00:02:38.430 --> 00:02:39.870
of the Q and returns that as well.

38
00:02:40.350 --> 00:02:46.820
We've got at first passing element and at last they both insert obviously depending on the method or

39
00:02:46.830 --> 00:02:53.100
B where it's actually added and after first off, the last instead of returning void, it would return.

40
00:02:53.100 --> 00:02:53.850
True or false.

41
00:02:55.920 --> 00:03:03.900
Both I get first and get last with a solid argument, retrieves the first or last element and doesn't

42
00:03:03.900 --> 00:03:06.780
remove it, it also throws an exception of the Qs empty.

43
00:03:07.200 --> 00:03:13.640
We've got pick first and pick last with the relevant argument past retrieved and obviously doesn't remove.

44
00:03:13.860 --> 00:03:17.700
And again, the return value is the first of the last element, but also another.

45
00:03:17.710 --> 00:03:21.660
If a Q is empty as opposed to an exception, forget first and get lost.

46
00:03:22.080 --> 00:03:25.530
But you've got remove first to remove last, which does retrieve the removal.

47
00:03:26.070 --> 00:03:29.520
Return value is the first or last element or an exception if it is empty.

48
00:03:30.000 --> 00:03:31.830
And again, it removes the spoiler for turning.

49
00:03:32.100 --> 00:03:38.830
We've got Paul first and Paul last again with a past retreat and removes the relevant element, i.e.

50
00:03:38.910 --> 00:03:40.050
the first or last element.

51
00:03:40.260 --> 00:03:42.990
But this time and now would return to the empty.

52
00:03:45.300 --> 00:03:51.300
In addition, Deck includes two additional methods to remove first carrots, which removes and surprisingly,

53
00:03:51.300 --> 00:03:55.800
the first occurrence of a specified element if it exists, returns true if the elements are removed

54
00:03:56.130 --> 00:04:00.720
and we've also got removed last occurrence, which removes the last occurrence of a specified element

55
00:04:00.960 --> 00:04:03.410
if it exists, potentially true, if the elements removed.

56
00:04:04.320 --> 00:04:06.360
So let's look at some of this in code now.

57
00:04:06.630 --> 00:04:08.940
Going to create a new class in our collections project.

58
00:04:09.360 --> 00:04:11.100
We'll call this one key example.

59
00:04:19.030 --> 00:04:23.830
Here again, we're using the collection test class to put the array tick and the linked list through

60
00:04:23.830 --> 00:04:27.310
the standard collections methods, i.e. the call to do stuff with collection.

61
00:04:27.940 --> 00:04:28.900
So if you run this now.

62
00:04:31.410 --> 00:04:37.200
You can see the output this demonstrates firstly that like a link sent, a link list allows knows,

63
00:04:37.470 --> 00:04:40.320
but not that the array deck doesn't end.

64
00:04:40.320 --> 00:04:45.270
Unlike sets and lists, both the linked list and the array deck allow duplicate elements.

65
00:04:46.500 --> 00:04:51.110
But let's add a method to this class now, we're going to test some of the methods.

66
00:04:52.970 --> 00:04:53.720
At 10:00 here.

67
00:04:56.650 --> 00:05:00.400
So the methods testing, firstly, the insertion methods add and offer.

68
00:05:02.340 --> 00:05:05.880
The key retrieval methods are tested also with element and peak.

69
00:05:07.420 --> 00:05:13.480
These methods don't remove elements from the Q Rosyth a bit further with testing the retrieval and removal

70
00:05:13.480 --> 00:05:19.410
methods poll and remove these methods return the element that was immediately removed from the Q So

71
00:05:19.410 --> 00:05:22.480
we need to put some code in our main method so we can actually test this.

72
00:05:29.490 --> 00:05:33.810
And you can see the kind of better there that just invokes the method we've just posted in testing the

73
00:05:33.810 --> 00:05:37.710
methods with an array deck in a linked list that's run this.

74
00:05:39.920 --> 00:05:41.920
Right, so that's how I put the scoring back up.

75
00:05:46.810 --> 00:05:52.000
Let's make a bit of space here, so they attempt to add no to the erratic withholding and allow Poder

76
00:05:52.000 --> 00:05:54.520
exception, as you can see there on line fifty two.

77
00:05:54.970 --> 00:05:59.340
So I can see the stack trace, which shows you how the offer methods implemented a stick.

78
00:05:59.650 --> 00:06:05.110
So basically atlast method called or offer last method call to offer method call.

79
00:06:05.380 --> 00:06:06.520
And then we've got our exception.

80
00:06:07.000 --> 00:06:12.520
But note also how the add an offer method operations add elements to the tail of the queue in both cases.

81
00:06:17.640 --> 00:06:19.950
There's no other method to test tech methods.

82
00:06:21.260 --> 00:06:23.840
Well below our last minute in this class.

83
00:06:29.390 --> 00:06:30.380
Well, at this import.

84
00:06:32.900 --> 00:06:37.370
That is this method works with both a dick and a little list, and you can say we've got various calls,

85
00:06:37.380 --> 00:06:42.560
they're going to push method, the element that adds an element to the head of the queue, the opposite

86
00:06:42.560 --> 00:06:46.370
of add an offer using a push there, a pop.

87
00:06:47.540 --> 00:06:55.440
Easy at first off, a first and last of the last we've got Tavaris calls there to get the first blast

88
00:06:55.760 --> 00:06:59.000
was using the peaks, the poles and the removes.

89
00:06:59.630 --> 00:07:02.120
So let's actually add some code to test this new method.

90
00:07:03.290 --> 00:07:06.020
That, of course, needs to be added to our main method, so we'll get back to that.

91
00:07:07.660 --> 00:07:08.460
Just this one here.

92
00:07:12.930 --> 00:07:14.460
OK, that's a new code.

93
00:07:15.440 --> 00:07:18.350
And you can see the code there online, 37 that I've had it.

94
00:07:19.820 --> 00:07:20.540
So if we run this.

95
00:07:23.210 --> 00:07:27.320
So this airport demonstrates that these methods allow the debt to be either or both of the following

96
00:07:27.320 --> 00:07:33.740
at the same time, AQ first in, first out processing or Steck last in, first out processing.

97
00:07:34.620 --> 00:07:39.800
So in the last three videos I've reviewed the list, the Q and the deck interfaces and the implementing

98
00:07:39.800 --> 00:07:43.460
classes, a released array deck and linked list.

99
00:07:44.120 --> 00:07:48.830
In the next video, we'll be reviewing the last type of collection, which is the only type that doesn't

100
00:07:48.830 --> 00:07:50.240
implement the collection interface.

101
00:07:50.570 --> 00:07:51.350
That's the map.

102
00:07:51.740 --> 00:07:52.940
See you in the next video.
