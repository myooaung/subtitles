WEBVTT
1

00:00:05.370  -->  00:00:08.590
Let’s talk about creating
and using enumerations.

2

00:00:08.750  -->  00:00:13.149
Wikipedia defines enumeration
as a complete ordered listing of

3

00:00:13.150  -->  00:00:14.730
all the items in a collection.

4

00:00:15.549  -->  00:00:18.270
The term is commonly used
in mathematics and computer

5

00:00:18.270  -->  00:00:21.990
science to refer to a listing
of all the elements of a set.

6

00:00:23.100  -->  00:00:26.450
An enum type is the reference
type in Java that supports an

7

00:00:26.450  -->  00:00:31.440
enumeration, providing support for
a set of predefined constants in

8

00:00:31.440  -->  00:00:35.269
a particular order and the methods
to access them as well as referring

9

00:00:35.269  -->  00:00:37.169
to them by their constant names.

10

00:00:37.600  -->  00:00:40.560
Some examples of enumerated
sets are the days of the week

11

00:00:40.800  -->  00:00:42.100
or the months of the year.

12

00:00:42.250  -->  00:00:46.280
These are finite sets of data,
with which predefined constants

13

00:00:46.380  -->  00:00:49.870
would be easy to understand:
[Sunday, Monday, Tuesday, etc].

14

00:00:52.129  -->  00:00:56.190
Under the covers, enum is just
another class implicitly extending

15

00:00:56.220  -->  00:00:58.480
the abstract class java.lang.Enum.

16

00:00:59.430  -->  00:01:03.899
Therefore, any enum you declare
cannot extend another enum or class.

17

00:01:04.360  -->  00:01:08.910
Conversely, you also cannot
explicitly extend java.lang.Enum.

18

00:01:09.420  -->  00:01:13.290
If you see an extends clause used
on an enum declaration on the

19

00:01:13.290  -->  00:01:16.300
exam, you'll know that you're
looking at a compiler error.

20

00:01:17.040  -->  00:01:20.460
In addition, it is a compiler
error to attempt to explicitly

21

00:01:20.800  -->  00:01:22.770
instantiate an enum type.

22

00:01:22.790  -->  00:01:28.339
The enum types constants are the only
instances allowable for an enum type.

23

00:01:30.389  -->  00:01:34.000
So, Oracle's Java specification
specifies the enum type

24

00:01:34.040  -->  00:01:35.350
declaration as follows:

25

00:01:35.700  -->  00:01:41.340
ClassModifier, enum, TypeIdentifier,
SuperInterfaces, and the EnumBody.

26

00:01:42.240  -->  00:01:45.049
So, the link to the specifications
for enums is in the resources

27

00:01:45.049  -->  00:01:46.140
section of this video.

28

00:01:46.680  -->  00:01:48.249
This is the link that I’m
putting on screen now.

29

00:01:49.150  -->  00:01:50.660
So, check that out
for more information.

30

00:01:53.310  -->  00:01:56.850
Now, I won't be talking about super
interfaces in this video, but I

31

00:01:56.850  -->  00:02:00.289
will show an example of an enum
implementing an interface in a later

32

00:02:00.289  -->  00:02:02.210
video in this section of the course.

33

00:02:04.160  -->  00:02:06.659
At a minimum, an example
looks like the following.

34

00:02:06.960  -->  00:02:10.100
enum BinaryValues left
to right curly braces.

35

00:02:10.750  -->  00:02:12.450
The rules for the access modifiers

36

00:02:12.450  -->  00:02:14.980
are the same as we've
reviewed for a class.

37

00:02:14.980  -->  00:02:19.109
Public and none package-private are
the only valid access modifiers if the

38

00:02:19.259  -->  00:02:21.729
enum is not enclosed by another type.

39

00:02:22.020  -->  00:02:25.280
If the ename is public and
not enclosed, then the source

40

00:02:25.290  -->  00:02:28.510
file name must match the
enum name [TypeIdentifier].

41

00:02:29.370  -->  00:02:36.650
All four access modifiers are valid if
the enum is enclosed by another type. And other modifiers,

42

00:02:36.830  -->  00:02:40.040
Well, the other modifiers you would apply
to an enum are static and strictfp.

43

00:02:40.040  -->  00:02:45.080
Although a nested enum can be declared
static, it's redundant, since the

44

00:02:45.080  -->  00:02:47.780
nested enum type is implicitly static.

45

00:02:48.550  -->  00:02:51.589
An enum type declaration is
implicitly final unless an

46

00:02:51.590  -->  00:02:53.669
enum constant has a class body.

47

00:02:54.190  -->  00:02:57.260
It's a compile-time error to
declare an enum type final.

48

00:02:57.260  -->  00:03:00.339
And finally, it is a
compile-time error to declare

49

00:03:00.529  -->  00:03:02.410
an enum type abstract.

50

00:03:04.310  -->  00:03:05.540
So, next, let's discuss the EnumBody.

51

00:03:06.260  -->  00:03:09.630
So from the specification, you can
see that on screen there now, the

52

00:03:09.630  -->  00:03:13.489
most common form of an enum is a
list of constants in the EnumBody

53

00:03:13.639  -->  00:03:15.030
as shown in the example below.

54

00:03:15.530  -->  00:03:18.150
Because they're constants,
the names are in uppercase

55

00:03:18.170  -->  00:03:21.140
letters but note that this is a
standard and not a requirement.

56

00:03:23.110  -->  00:03:25.150
All right, so swinging back to
our Fundamentals project that

57

00:03:25.170  -->  00:03:26.359
we've been using in this section.

58

00:03:26.440  -->  00:03:28.200
We need to create a new Java class.

59

00:03:29.050  -->  00:03:33.330
So, I'm going to do that, New
and noticing here when I select

60

00:03:33.330  -->  00:03:35.369
new Java class, we've got an
option down here for an Enum.

61

00:03:36.150  -->  00:03:37.450
IntelliJ does that for us.

62

00:03:37.640  -->  00:03:38.390
So, I'm going to select that.

63

00:03:38.420  -->  00:03:40.640
I'm going to call this
one days of the week.

64

00:03:45.610  -->  00:03:47.549
I'm going to paste in
the code we'll be using.

65

00:03:48.730  -->  00:03:51.359
Well, so this code that I’ve
pasted in is first creating a

66

00:03:51.360  -->  00:03:54.950
public enum called days of the
week, and obviously, that's in the

67

00:03:54.950  -->  00:03:56.540
DaysOfTheWeek.java source file.

68

00:03:57.060  -->  00:03:59.220
But you can see that one
of the constraints sunday

69

00:03:59.330  -->  00:04:00.730
is not all uppercase.

70

00:04:01.019  -->  00:04:04.570
Constants in uppercase is a coding
standard but not required by Java.

71

00:04:05.179  -->  00:04:08.530
Now a package-private class named
test days of the week is below that.

72

00:04:08.950  -->  00:04:12.340
You can see it starting on line 15,
and that's exercising the static

73

00:04:12.380  -->  00:04:17.270
values method of an enum, specifically
on line 20, and that returns an array

74

00:04:17.270  -->  00:04:21.610
of the instances of days of the week
represented by the seven constants

75

00:04:21.709  -->  00:04:22.900
that we've defined on line 12.

76

00:04:23.630  -->  00:04:26.700
The ordinal value as well as
the value of each is printed.

77

00:04:27.040  -->  00:04:29.230
You can see we're using
.values and .ordinal there.

78

00:04:30.359  -->  00:04:33.560
I'm ending the method down the
bottom on line 25 by demonstrating an

79

00:04:33.560  -->  00:04:35.990
example of the value of static method.

80

00:04:36.670  -->  00:04:37.620
So, if you run this code…

81

00:04:43.020  -->  00:04:45.199
You can see we've got the
various days of the week showing.

82

00:04:47.090  -->  00:04:50.600
Now, the best way to understand
what an enum looks like to the

83

00:04:50.600  -->  00:04:53.530
JVM is to examine the class
that the compiler creates.

84

00:04:53.900  -->  00:04:55.350
So, we're going to have
a go at doing that.

85

00:04:55.580  -->  00:04:58.609
So, what we want to do is open the
project pane and I’ll close the

86

00:04:58.609  -->  00:05:02.260
runtime window down, the output pane
roller, and we're going to go to the

87

00:05:02.290  -->  00:05:04.849
output folder that contains the code.

88

00:05:05.680  -->  00:05:08.600
You can see that my code
here in IntelliJ is out,

89

00:05:08.650  -->  00:05:11.840
production, Fundamentals and
that's where the code is.

90

00:05:11.840  -->  00:05:14.350
You can see that for
our days of the week,

91

00:05:14.450  -->  00:05:15.979
we've got DaysOfTheWeek.class there.

92

00:05:16.559  -->  00:05:19.090
So, I'm going to right-click the
folder and open the terminals

93

00:05:19.250  -->  00:05:23.580
or open in terminal, and we're
just going to size it up for now.

94

00:05:24.869  -->  00:05:28.000
Now, in the terminal window, I'm
going to execute or use rather the

95

00:05:28.010  -->  00:05:31.008
Java tool, javap, which disassembles
a class file that's generated.

96

00:05:31.008  -->  00:05:36.289
I'm going to type javap DaysOfTheWeek.

97

00:05:36.290  -->  00:05:40.370
Remembering, I need to be in the exact
directory where the class file is.

98

00:05:42.550  -->  00:05:47.010
You can see on screen there the output
generated and looking at the code

99

00:05:47.010  -->  00:05:50.010
specifically, you can see that each
of the constants named in our simple

100

00:05:50.010  -->  00:05:54.260
enum is defined as a final attribute
on a class named DaysOfTheWeek.

101

00:05:55.500  -->  00:05:58.820
And in addition, two static
methods are available to each enum.

102

00:05:59.260  -->  00:06:01.490
The values method and
the value of method.

103

00:06:02.060  -->  00:06:05.580
So, an important thing to note is that
the class DaysOfTheWeek shown in this

104

00:06:05.580  -->  00:06:09.460
listing, which our enum represents
is declared final if none of the

105

00:06:09.460  -->  00:06:11.140
enum constants have a body block.

106

00:06:11.710  -->  00:06:14.230
And you can see that is the case
which is why it is declared final.

107

00:06:14.670  -->  00:06:17.990
Now, we'll discuss body blocks for
constants in an upcoming video.

108

00:06:18.539  -->  00:06:22.740
Now, I pointed out in my 10Z-819
Part 1 java certification course

109

00:06:22.740  -->  00:06:26.950
here on Udemy, specifically section
4 - switch decision construct

110

00:06:27.139  -->  00:06:30.300
that an enum type is a valid
type for a switch statement.

111

00:06:30.830  -->  00:06:33.519
So, let's just take a quick look
at one, so I'm going to close down

112

00:06:34.109  -->  00:06:37.880
this terminal session now and go
back to full screen for our code.

113

00:06:38.820  -->  00:06:41.940
What I'm going to do is
replace our for loop, this code

114

00:06:41.940  -->  00:06:45.530
here with a new bit of code
that I'm going to paste in.

115

00:06:45.530  -->  00:06:49.030
And you can see the
code on screen now.

116

00:06:49.730  -->  00:06:51.530
You can see what we're doing
there, we're basically using

117

00:06:51.530  -->  00:06:53.919
the enum in a switch statement.

118

00:06:54.400  -->  00:06:55.650
So, if we run the code now…

119

00:07:00.740  -->  00:07:02.550
you can see the output
that it's produced.

120

00:07:04.170  -->  00:07:07.070
Let's finish the video here and
in the next one, I want to explore

121

00:07:07.090  -->  00:07:11.089
enums a bit more, specifically
because an enum is a class, you can

122

00:07:11.100  -->  00:07:12.690
have all the members of class can.

123

00:07:12.730  -->  00:07:16.130
So, let's discuss that and look into
it in more detail in the next video.
