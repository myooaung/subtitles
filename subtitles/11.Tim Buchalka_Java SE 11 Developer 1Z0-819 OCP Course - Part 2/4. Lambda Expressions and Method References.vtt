WEBVTT
1
00:00:05.270 --> 00:00:10.510
I've talked a lot about lambda expressions in the videos and the built in functional interfaces, you'll

2
00:00:10.520 --> 00:00:16.730
have noticed that after the last video that many of the methods on Giovana YouTube streamed upstream

3
00:00:17.060 --> 00:00:22.610
is the functional interface types I've discussed in the video on Javas built in interfaces as parameter

4
00:00:22.610 --> 00:00:23.180
types.

5
00:00:25.220 --> 00:00:31.070
This table shows the most common of the interfaces from our previous discussion, I've included copyrighter

6
00:00:31.070 --> 00:00:37.220
here, although it's in the Javadoc Utah package, but not in the Javadoc Utah package, but is used

7
00:00:37.220 --> 00:00:38.420
in the sorted method.

8
00:00:38.900 --> 00:00:43.880
They also show you some of the methods on the stream interface that use these interfaces as parameters.

9
00:00:44.540 --> 00:00:49.100
So here in this table with a functional interface binary operator, the functional interface better

10
00:00:49.100 --> 00:00:51.680
ploy takes two parameters of type two returns.

11
00:00:51.680 --> 00:00:57.790
Type T and the stream method which have parameters of these types is reduce next comparator.

12
00:00:58.190 --> 00:00:59.840
Look at the functional interface method.

13
00:00:59.840 --> 00:01:08.000
Compare the two parameters to renew the stream method mext min and sorted next consumer as well as by

14
00:01:08.000 --> 00:01:08.570
consumer.

15
00:01:08.960 --> 00:01:14.960
The accept method is the functional device method takes an argument of t i return types outpoured and

16
00:01:14.960 --> 00:01:16.580
the string method that's appropriate.

17
00:01:16.610 --> 00:01:21.260
Either one which have parameters of these types collect or reach and peak.

18
00:01:21.930 --> 00:01:23.570
That was for consumer and by consumer.

19
00:01:25.340 --> 00:01:30.090
The next functional interface is called function, the apply method is the functional interface method

20
00:01:30.300 --> 00:01:37.140
takes a perimeter of type T returns a value of type are in the three methods here, flat map and map.

21
00:01:37.560 --> 00:01:39.780
Next functional interface is unary operator.

22
00:01:40.140 --> 00:01:45.030
The method is apply Texas parameter of type T and returns an object of type T.

23
00:01:45.510 --> 00:01:50.010
The string method which have parameters of these types is just one iterate next predicate.

24
00:01:50.370 --> 00:01:55.080
The functional interface method is test that the perimeter of T and returns are boolean and the three

25
00:01:55.080 --> 00:02:02.310
methods which have parameters of these types or match any match drop while filter iterate non-match

26
00:02:02.310 --> 00:02:03.960
take while last one.

27
00:02:03.960 --> 00:02:09.840
The function device supplier has a method which returns a type T the three methods which have parameters

28
00:02:09.840 --> 00:02:12.000
of these types collect and generate.

29
00:02:12.940 --> 00:02:14.190
Well, let's bring back to Cart now.

30
00:02:14.200 --> 00:02:19.900
We need to create a new class in our streams project what call upon stream lamda examples.

31
00:02:33.210 --> 00:02:38.330
All right, so with this card that I've posted in, I'm demonstrating using a variety of stream operations

32
00:02:38.330 --> 00:02:43.520
with lambda expressions, you can say we've got our class there and our main method, the first time

33
00:02:43.520 --> 00:02:45.260
creating an array of names for testing.

34
00:02:46.440 --> 00:02:51.590
I start by using the array's street method to create a stream from the string array that we defined

35
00:02:51.600 --> 00:02:58.560
on line 16, also demonstrate the use of the intermediate filter method using a predicate lambda expression.

36
00:02:58.980 --> 00:03:00.210
You can say that you can change.

37
00:03:00.210 --> 00:03:06.690
Filters are shown also demonstrating the use of the terminal Operation Count, which counts the number

38
00:03:06.690 --> 00:03:08.430
of elements that the result contains.

39
00:03:09.030 --> 00:03:10.500
The moving on down to the next example.

40
00:03:10.500 --> 00:03:15.990
They're demonstrating the use of the drop while intermediate operation, which was introduced in Java

41
00:03:15.990 --> 00:03:17.790
nine and takes a predicate.

42
00:03:18.240 --> 00:03:21.500
Elements are dropped or the predicate continues to be true.

43
00:03:22.200 --> 00:03:27.810
A demonstrated use of the collect terminal operation which returns results in an object type of your

44
00:03:27.810 --> 00:03:28.230
choosing.

45
00:03:28.770 --> 00:03:29.040
Right?

46
00:03:29.070 --> 00:03:34.860
Next example is take while some demonstrating the use of the take while intermediate operation, which

47
00:03:34.860 --> 00:03:37.950
was also introduced in Java nine, which keeps elements.

48
00:03:37.950 --> 00:03:43.080
While the predicate remains true, it also demonstrated the use of Schipp, which is an intermediate

49
00:03:43.080 --> 00:03:49.200
operation which skips the requested number of elements than the last one there, demonstrated the use

50
00:03:49.200 --> 00:03:55.860
of REDUCE, which is a terminal operation that uses a binary operator to produce some aggregate result.

51
00:03:56.310 --> 00:03:59.280
In this case, you can see that I'm summing all of the values.

52
00:04:00.390 --> 00:04:01.230
Let's run this code.

53
00:04:04.890 --> 00:04:07.050
And you can see the output shown below.

54
00:04:08.650 --> 00:04:13.420
There in all of these examples, you saw that I was using lambda expressions, if the method you're

55
00:04:13.420 --> 00:04:19.020
using in the lambda expression is named, i.e. it exists in your class or another class in a library

56
00:04:19.050 --> 00:04:21.820
or package, you can use a method reference instead.

57
00:04:22.390 --> 00:04:23.380
Let's look at this in code.

58
00:04:24.070 --> 00:04:27.310
We're going to add a method here to our class down the bottom.

59
00:04:28.650 --> 00:04:33.960
So I could say it's a very simple static method, names some which simply adds two values together that's

60
00:04:33.960 --> 00:04:36.950
changed the code that uses the reduced operation on to stream.

61
00:04:37.410 --> 00:04:40.860
But you can say that code is directly above the basically what we're doing.

62
00:04:41.220 --> 00:04:43.740
We're just going to change what's in the reduce.

63
00:04:44.940 --> 00:04:50.400
Mythical there at the moment, you can say there's an expression, I can change that to be stream,

64
00:04:51.100 --> 00:04:55.140
I can choose this one here, colon, colon, some, which is the name of the method we just created

65
00:04:55.140 --> 00:04:56.070
on 63.

66
00:04:56.730 --> 00:04:59.520
And it's sort of the parentheses I dot get.

67
00:05:00.790 --> 00:05:02.080
And close off in parentheses.

68
00:05:03.140 --> 00:05:09.450
So we know using that method directly, instead of a lambda expression that we had previously on this,

69
00:05:09.480 --> 00:05:11.600
we should get the identical results we had previously.

70
00:05:13.340 --> 00:05:17.300
You can see the airport reduced example, some of the numbers, 10, 50, exactly the same as it was

71
00:05:17.300 --> 00:05:17.840
previously.

72
00:05:18.240 --> 00:05:18.670
All right.

73
00:05:19.070 --> 00:05:25.500
So let's actually change to some method by adding a third parameter to see what happens in.

74
00:05:25.700 --> 00:05:31.100
See, by doing that, we've got a compiler error on the method reference stream, lambda expressions,

75
00:05:31.100 --> 00:05:32.120
colon, colon, some.

76
00:05:33.120 --> 00:05:38.430
Cannot resolve method some, the method signature of the method in the method of reference must have

77
00:05:38.430 --> 00:05:42.450
the same signature as the method declared in the functional interface.

78
00:05:43.080 --> 00:05:48.900
The reduced method takes a binary operator and therefore must have two parameters and only two both.

79
00:05:48.900 --> 00:05:52.800
At the same time obviously introduced the third parameter here, which caused the problem.

80
00:05:53.280 --> 00:06:01.500
If you try to do something like remove this third parameter, change the second one to long and change

81
00:06:01.500 --> 00:06:02.670
the return type to a long.

82
00:06:04.780 --> 00:06:10.120
This time, a slightly different era Patriots type in method reference cannot convert A to a javadoc

83
00:06:10.120 --> 00:06:10.900
length an integer.

84
00:06:11.290 --> 00:06:16.270
That's because, as I mentioned, a binary operator must have two parameters of the same type, which

85
00:06:16.270 --> 00:06:18.070
also must match the return type.

86
00:06:18.080 --> 00:06:18.870
And that's not the case.

87
00:06:19.540 --> 00:06:20.800
That changes back to an INT.

88
00:06:22.500 --> 00:06:26.550
Change the second parameter to an integer class.

89
00:06:28.190 --> 00:06:33.050
And you can see that actually fixes the problem, so method reference is more forgiving here than a

90
00:06:33.050 --> 00:06:34.040
lambda expression.

91
00:06:34.640 --> 00:06:37.460
Let's try and add a bit of code now to the main method.

92
00:06:40.200 --> 00:06:40.950
September.

93
00:06:43.150 --> 00:06:44.700
So you can see here we look at the era.

94
00:06:45.790 --> 00:06:50.980
We can't define a lambrix person with a primitive ENT and a solid to a binary operator, but obviously

95
00:06:50.980 --> 00:06:52.990
in this case we're doing a similar thing.

96
00:06:53.620 --> 00:06:59.020
Sixty when we're using a method reference and that works fine, it's method references being a little

97
00:06:59.020 --> 00:07:02.240
bit more forgiving than a lambda expression that.

98
00:07:04.920 --> 00:07:10.980
Now, alternatively, I can use the same method declared on the ED wrapper class to have occurred during

99
00:07:10.980 --> 00:07:11.190
that.

100
00:07:11.670 --> 00:07:13.740
Basically I'm just going to replace this streamliner.

101
00:07:13.740 --> 00:07:17.490
Example's with integer as an integer class.

102
00:07:23.730 --> 00:07:29.880
And we've got the same result right in both of those instances, a reference to class time followed

103
00:07:29.880 --> 00:07:32.660
by two columns and the name of the method on the class.

104
00:07:33.360 --> 00:07:34.560
So let's get the video here.

105
00:07:34.860 --> 00:07:38.520
And the next one, I want to look at the four types of method references.

106
00:07:38.910 --> 00:07:40.080
See you in the next video.
