WEBVTT
1

00:00:05.250  -->  00:00:06.550
All right, so in the last video,

2

00:00:06.550  -->  00:00:10.050
I noted that the assertion error was strong when an execution ended

3

00:00:10.050  -->  00:00:13.050
and as a result, the next assert statement in the method was never tested.

4

00:00:14.250  -->  00:00:17.450
I'm talking specifically about our getPetTypeAgeDescription method.

5

00:00:18.150  -->  00:00:21.150
So, let's actually run this again just to confirm that.

6

00:00:24.150  -->  00:00:28.250
And you can see that our code is basically bombing on line 68,

7

00:00:28.850  -->  00:00:32.950
which is this assert and therefore the third assert is never been tested.

8

00:00:33.250  -->  00:00:34.850
All right, so let's fix this bit of code.

9

00:00:36.350  -->  00:00:39.150
What I'm going to do is paste in a new version of this code,

10

00:00:39.950  -->  00:00:42.950
this block of code here before the final assert.

11

00:00:43.610  -->  00:00:46.490
So, what I've done there is change this now.

12

00:00:47.150  -->  00:00:51.450
Basically, I've added an else if there as you can see, the parrot,

13

00:00:52.250  -->  00:00:55.850
and also the else block is now a catch-all for everything else as you can see.

14

00:00:57.150  -->  00:00:58.550
So, if we now run the code again,

15

00:01:02.950  -->  00:01:04.250
we've no longer got an error there.

16

00:01:04.250  -->  00:01:07.150
We can see that now our assert on line 83

17

00:01:07.550  -->  00:01:10.250
has been executed and the reason we've got an error there;

18

00:01:10.750  -->  00:01:14.750
it tells us basically no description exists for parrot age 0.

19

00:01:15.150  -->  00:01:18.350
Basically, we've now hit our postcondition assertion which is good.

20

00:01:18.710  -->  00:01:21.150
Now, note that this is not actually an error in the code

21

00:01:21.150  -->  00:01:23.550
but an admission in the insertion code.

22

00:01:24.210  -->  00:01:26.710
So, what we really need to do is come down here after pup,

23

00:01:27.410  -->  00:01:30.710
add a comma, and chick in double quotes,

24

00:01:31.210  -->  00:01:32.570
it's applicable for a parrot.

25

00:01:33.270  -->  00:01:35.570
Run this, again we've got assertions enabled.

26

00:01:37.470  -->  00:01:39.470
And now everything's working as it should.

27

00:01:40.450  -->  00:01:44.710
So, let's actually revisit this post-condition that we've got on screen.

28

00:01:44.710  -->  00:01:48.310
What I want to do is replace the code. I'm going to do that,

29

00:01:49.910  -->  00:01:52.910
so replace this code as you can see,

30

00:01:53.410  -->  00:01:56.010
so here what I'm doing now is creating an array list

31

00:01:56.410  -->  00:01:59.290
to contain the possible values for petAge description

32

00:01:59.290  -->  00:02:01.590
prior to using it in the assert statement.

33

00:02:01.950  -->  00:02:05.250
Now, this code's got the same result. If we run it first and then we'll talk about it.

34

00:02:06.850  -->  00:02:11.050
Same result, however, it is bad form.

35

00:02:11.050  -->  00:02:14.850
The only purpose of the local variable assert array list

36

00:02:14.850  -->  00:02:18.350
on line 83 is to support an assert statement,

37

00:02:18.350  -->  00:02:21.950
but even when assertions are disabled, this object is created.

38

00:02:22.350  -->  00:02:24.550
Now this is a small overhead in this instance,

39

00:02:24.550  -->  00:02:28.450
but in general, you do not want to create variables for assert statements,

40

00:02:28.450  -->  00:02:32.750
a method would have been a better choice since the execution of the method would not occur

41

00:02:32.750  -->  00:02:34.250
if assertions were disabled.

42

00:02:35.050  -->  00:02:36.450
So, if I replace that code.

43

00:02:39.950  -->  00:02:42.950
So with that code that I pasted in, do you see anything wrong with it?

44

00:02:43.450  -->  00:02:46.050
Let's try it. First, we'll run it with assertions enabled.

45

00:02:50.650  -->  00:02:54.250
Noting the output there, particularly the age. Let's actually run it

46

00:02:56.050  -->  00:02:59.050
and we'll remove, or run it with assertions disabled I should say.

47

00:02:59.450  -->  00:03:01.950
Run that, run the code.

48

00:03:04.950  -->  00:03:07.750
So, you can see that the output is different now. We've got zero

49

00:03:08.250  -->  00:03:09.050
for petAge.

50

00:03:10.050  -->  00:03:13.850
So in this assertion effectively, I've created a side effect,

51

00:03:13.850  -->  00:03:16.450
meaning the assertion affected the application code.

52

00:03:16.850  -->  00:03:20.840
So if we had used petAge in the application code after this assertion,

53

00:03:20.840  -->  00:03:25.200
the assertion would have possibly changed the outcome as it did with the output shown.

54

00:03:25.800  -->  00:03:30.000
Now you may be tested on the exam to look for side effects of an assert statement,

55

00:03:30.000  -->  00:03:32.600
possibly in not such simple terms as I've shown here,

56

00:03:32.600  -->  00:03:35.100
so review assert statements carefully.

57

00:03:35.100  -->  00:03:36.600
So, let's replace that code again,

58

00:03:37.480  -->  00:03:39.280
including the system.out.println.

59

00:03:40.260  -->  00:03:43.520
So, I've reverted the code so that once again we do get an assertion error

60

00:03:43.520  -->  00:03:45.020
when assertions are enabled.

61

00:03:45.020  -->  00:03:47.020
I want to use this class with its assertion error

62

00:03:47.020  -->  00:03:49.620
in some additional assertion tests, so we'll just run this again.

63

00:03:53.620  -->  00:03:56.420
That's when assertion is disabled, we'll enable them again.

64

00:04:01.410  -->  00:04:01.910
Run it.

65

00:04:04.010  -->  00:04:05.910
All right, so we are getting an assertion error again.

66

00:04:06.790  -->  00:04:09.290
Now again, I want to use this class with its assertion error

67

00:04:09.290  -->  00:04:10.950
in some additional assertion tests.

68

00:04:11.250  -->  00:04:14.450
You can see the assertion error we're getting relates to the fact that parrot

69

00:04:14.450  -->  00:04:16.850
hasn't got an entry in our string array.

70

00:04:17.730  -->  00:04:21.030
All right, so I want to talk a bit more about enabling and disabling assertions.

71

00:04:21.530  -->  00:04:25.780
So far, we've seen that we've enabled assertion using dash â€“ea or dash -enable

72

00:04:25.780  -->  00:04:27.780
assertions without any additional information.

73

00:04:28.140  -->  00:04:31.140
This enables assertions for all classes and all packages

74

00:04:31.140  -->  00:04:33.340
with the exception of system-level classes.

75

00:04:34.220  -->  00:04:37.020
Java does give you more control over the granularity of this setting,

76

00:04:37.570  -->  00:04:39.870
so let's actually go back to our previous class

77

00:04:40.120  -->  00:04:42.620
that we used in previous videos, assertion example.

78

00:04:45.170  -->  00:04:48.160
We're going to add a call to the main method of the class we just tested

79

00:04:48.160  -->  00:04:50.820
in the main method of this class assertion example.

80

00:04:51.480  -->  00:04:55.480
So, what I'm going to do is basically in the main method, we come down to the main method.

81

00:04:56.980  -->  00:05:00.280
I'm going to put it right at the top before the byte definition.

82

00:05:00.580  -->  00:05:06.970
So, InvariantExamples.main(args).

83

00:05:09.570  -->  00:05:13.070
So, you can see what we're doing there, we're actually calling the main method for invariant examples.

84

00:05:13.970  -->  00:05:17.270
So, executing this class with assertions enabled,

85

00:05:17.770  -->  00:05:20.760
which we'll just double check we have still got that enabled for our

86

00:05:21.860  -->  00:05:23.410
assertion example.

87

00:05:24.710  -->  00:05:26.510
We haven't, so I'll just make sure that's enabled.

88

00:05:34.110  -->  00:05:37.110
And you can see here, running the code with assertions enabled

89

00:05:37.110  -->  00:05:40.410
gives us the same result as just running in variant examples.main,

90

00:05:40.660  -->  00:05:44.020
you can see that we've got an assertion error thrown before any additional code

91

00:05:44.020  -->  00:05:47.520
in assertion example is able to run, but maybe

92

00:05:47.520  -->  00:05:50.820
we just want to ignore assertions for the invariant examples class

93

00:05:50.820  -->  00:05:55.120
while we're testing assertions for the enclosing code in assertion example.

94

00:05:56.020  -->  00:05:59.320
So, let's go back to our VM options for assertion example,

95

00:06:00.680  -->  00:06:01.980
and here what we're going to do

96

00:06:02.640  -->  00:06:06.640
is put -da:assertion

97

00:06:06.890  -->  00:06:12.180
.invariant.invariant examples.

98

00:06:14.480  -->  00:06:16.080
Obviously, you could do this from the command line.

99

00:06:16.980  -->  00:06:18.980
da stands for disabling assertions.

100

00:06:18.980  -->  00:06:20.480
You can do that for one class.

101

00:06:20.730  -->  00:06:24.330
We're passing the class to an argument to -da with the colon indicator.

102

00:06:24.830  -->  00:06:27.330
So, if we run this, we'll click okay first and then run it.

103

00:06:30.930  -->  00:06:34.230
By doing that, we've got the following output as you can see on the screen there.

104

00:06:35.830  -->  00:06:39.430
Basically, invariant examples class run with assertions disabled

105

00:06:39.430  -->  00:06:43.790
while the rest of our code in a limited example here in the insertion example class

106

00:06:43.790  -->  00:06:45.390
ran with assertions enabled.

107

00:06:46.160  -->  00:06:48.360
You can also tell the JVM

108

00:06:48.360  -->  00:06:52.350
to enable assertions for one particular package using a construct.

109

00:06:52.900  -->  00:06:56.000
Let's go back to our configuration setup again.

110

00:06:56.660  -->  00:06:57.860
So, I'm going to replace that

111

00:06:58.460  -->  00:07:03.760
and make it â€“ea:assertionâ€¦

112

00:07:05.260  -->  00:07:09.760
So, here now we've got the dash â€“ea enable assertions colon

113

00:07:10.010  -->  00:07:13.310
followed by package name followed by the ellipsis three periods.

114

00:07:13.310  -->  00:07:16.110
So, here we want all classes in the assertion package

115

00:07:16.110  -->  00:07:17.810
to have assertions enabled.

116

00:07:18.470  -->  00:07:19.270
If we run that,

117

00:07:23.370  -->  00:07:25.570
and we again have assertions now enabled

118

00:07:25.570  -->  00:07:29.670
for assertion.invariant.invariantexamples, so did that surprise you?

119

00:07:30.030  -->  00:07:32.330
So, using the constructor which we're going to have a look at again,

120

00:07:33.930  -->  00:07:37.430
-ea:assertionâ€¦ enables assertions

121

00:07:37.430  -->  00:07:40.430
for the specified package as well as all its sub-packages.

122

00:07:40.830  -->  00:07:43.030
To ignore a sub package, we can add to

123

00:07:43.030  -->  00:07:49.930
it â€“da:assertion.invariantâ€¦

124

00:07:53.530  -->  00:07:54.530
Run the code again,

125

00:07:57.030  -->  00:08:00.830
and now our output confirms the assertions are enabled for the class in the assertion package,

126

00:08:00.830  -->  00:08:03.330
but not the one in the assertion.invariant package.

127

00:08:05.690  -->  00:08:08.680
All right, so examine this following option, what do you suppose this does?

128

00:08:09.180  -->  00:08:11.680
You see the example there â€“ea:â€¦

129

00:08:12.180  -->  00:08:15.680
Well, this switch disables assertions in the unnamed package

130

00:08:15.680  -->  00:08:17.180
in the current working directory.

131

00:08:17.680  -->  00:08:22.670
There's two other options dash -esa or dash â€“enablesystemassertions,

132

00:08:22.670  -->  00:08:26.470
as well as dash -dsa or dash â€“disablesystemassertions.

133

00:08:26.970  -->  00:08:30.570
These are separate switches to enable and disable assertions in

134

00:08:30.570  -->  00:08:32.070
all of the built-in system classes.

135

00:08:32.570  -->  00:08:35.870
You cannot pass additional arguments to these switches to be more specific,

136

00:08:35.870  -->  00:08:38.430
but you can use dash -ea and dash -da

137

00:08:38.430  -->  00:08:40.930
with specific system classes and packages.

138

00:08:42.930  -->  00:08:45.930
Now the exam might test you on your knowledge of these switches.

139

00:08:45.930  -->  00:08:50.030
The table below lists the options or switches available for dash â€“ea

140

00:08:50.030  -->  00:08:51.330
and dash â€“da.

141

00:08:51.330  -->  00:08:55.130
Note that the da option is used in conjunction with an ea option

142

00:08:55.130  -->  00:08:57.130
to allow more specificity.

143

00:08:57.430  -->  00:09:01.330
The first one, none. That enables or disables assertions

144

00:09:01.330  -->  00:09:03.730
for all classes except system classes.

145

00:09:04.090  -->  00:09:07.090
That's java -ea or java -da

146

00:09:07.090  -->  00:09:10.990
or java -enableassertions or java â€“disableassertions.

147

00:09:10.990  -->  00:09:13.490
Obviously, you wouldn't use java if you're using the IDE.

148

00:09:13.490  -->  00:09:15.090
You pass that as the VM option.

149

00:09:15.450  -->  00:09:17.950
Next example, :className.

150

00:09:18.250  -->  00:09:23.110
That enables or disables assertions for the specified class and can include a system class.

151

00:09:23.360  -->  00:09:27.020
Example that java â€“ea:assertion.AssertionExample

152

00:09:27.320  -->  00:09:31.920
or java â€“disableassertions:assertion.AssertioneExample.

153

00:09:33.920  -->  00:09:37.120
Next, one is :packageNameâ€¦

154

00:09:37.120  -->  00:09:41.020
that enables or disables assertions for the specified package

155

00:09:41.020  -->  00:09:42.520
including any sub packages.

156

00:09:42.820  -->  00:09:44.820
It can include a system package,

157

00:09:44.820  -->  00:09:47.820
so java â€“ea:assertionâ€¦

158

00:09:48.120  -->  00:09:52.620
or java â€“enableassertion:assertion.invariantâ€¦

159

00:09:53.120  -->  00:09:57.320
or java â€“da:assertion.invariantâ€¦

160

00:09:57.920  -->  00:10:01.280
And the last one is a colon : followed by three dots, the ellipses,

161

00:10:01.680  -->  00:10:05.080
that enables or disables assertions in the unnamed package

162

00:10:05.080  -->  00:10:06.580
in the current working directory.

163

00:10:06.780  -->  00:10:09.780
Example that java â€“ea:...

164

00:10:10.080  -->  00:10:13.380
or java â€“da: again the ellipsis, the three dots.

165

00:10:14.180  -->  00:10:17.380
All right, so in the past three videos, we've talked about many types of invariants,

166

00:10:17.380  -->  00:10:20.580
the use of assertions, how to enable and disable them,

167

00:10:20.580  -->  00:10:24.580
and how to write assert statements, as well as some best practices around their usage

168

00:10:24.940  -->  00:10:28.740
In the next video, we're going to move on and talk about some out of ordinary topics

169

00:10:28.740  -->  00:10:32.240
on exception handling, which might find their way into an exam question.

170

00:10:32.740  -->  00:10:33.940
See you in the next video.
