WEBVTT
1
00:00:05.290 --> 00:00:10.330
So now you've seen where you can use wildcard type arguments and where you cannot, let's talk about

2
00:00:10.330 --> 00:00:11.160
how to use them.

3
00:00:11.740 --> 00:00:15.760
So we need a new class for this and back, obviously, in our generics project.

4
00:00:17.110 --> 00:00:20.860
New Java class, we're going to call this one wild card exampled.

5
00:00:29.640 --> 00:00:32.370
So this class of set up five static methods.

6
00:00:33.360 --> 00:00:38.760
You see the first one print up a list, this takes a list, has an argument with a wild card, with

7
00:00:38.760 --> 00:00:44.130
an upper bound of exception, meaning this method can be invoked by passing a list of top exception

8
00:00:44.460 --> 00:00:46.670
or any subclasses of exception there.

9
00:00:46.680 --> 00:00:52.710
Because this is upper bound, we could use methods and attributes of the exception type in the code.

10
00:00:53.650 --> 00:00:58.830
Maybe that we've got the letter from the public method print lower list, which is also a static method.

11
00:00:59.250 --> 00:01:03.990
This also takes a list as an argument with a wild card, this time with a lower bound of exception,

12
00:01:04.260 --> 00:01:10.050
meaning this method can be invoked by passing a list of top exception or any super classes of exception,

13
00:01:10.200 --> 00:01:15.120
such as Straubel an object because super classes are acceptable for lower bound.

14
00:01:15.420 --> 00:01:21.210
The methods of the declared top exception are not available because the type of object actually passed

15
00:01:21.450 --> 00:01:23.280
could be something as broad as an object.

16
00:01:24.240 --> 00:01:25.010
Next static method.

17
00:01:25.020 --> 00:01:27.760
We've got their public static method print open door.

18
00:01:28.260 --> 00:01:33.150
This takes a list as an argument with a wild card specifying this time no bounds.

19
00:01:33.810 --> 00:01:36.180
This means the method for print a list of any type.

20
00:01:37.750 --> 00:01:41.060
Next, we've got the static public method print object lists.

21
00:01:41.350 --> 00:01:46.120
This takes the list of object as an argument, this time with no wild cards specified.

22
00:01:46.540 --> 00:01:50.380
So this method will only take a list of object in brackets.

23
00:01:50.650 --> 00:01:53.500
So try to invoke this method before any of the following.

24
00:01:53.710 --> 00:01:58.900
So list with entertainment angle brackets, exception in angle brackets or runtime exception and angle

25
00:01:58.930 --> 00:02:02.020
brackets, etc. will result in a couple times error.

26
00:02:02.410 --> 00:02:08.650
So this is the reason the wild card with no upas all our band would be used as in print open door.

27
00:02:10.520 --> 00:02:12.470
As in that example, there are like 34.

28
00:02:13.270 --> 00:02:14.700
And finally, we've got our main method.

29
00:02:15.550 --> 00:02:20.340
It's creating several lists, as you can see there, and we're testing out some of these methods so

30
00:02:20.530 --> 00:02:26.650
that any way you can see it out, method vacation is a method invocation that would create a compiler

31
00:02:26.650 --> 00:02:28.540
error if I've left to uncommented.

32
00:02:28.940 --> 00:02:30.610
And you can see there's quite a few examples of that.

33
00:02:33.180 --> 00:02:34.170
As we move on down here.

34
00:02:36.400 --> 00:02:38.260
So feel free to check out the source code for those.

35
00:02:39.420 --> 00:02:40.620
But let's run the call.

36
00:02:43.210 --> 00:02:46.870
And you can see we've got the various output, quite a bit of output, because we had quite a few different

37
00:02:46.880 --> 00:02:48.700
locations in our my MyFord.

38
00:02:49.550 --> 00:02:55.290
So now that we say that running, let's switch over to this table, which shows what argument partisan

39
00:02:55.310 --> 00:02:57.920
politics is using the wild cards of the top specified.

40
00:02:58.820 --> 00:03:04.760
So the columns here represent the metal arguments, this type declaration, the Roj represent the lists

41
00:03:04.760 --> 00:03:10.430
type arguments as specified by the local variable declaration passed to the method argument.

42
00:03:11.170 --> 00:03:15.860
So looking at this table, we're trying to determine whether the entries on the left hand side will

43
00:03:15.860 --> 00:03:16.200
pass.

44
00:03:16.200 --> 00:03:19.370
The compiler check is in the wild cards listed at the top.

45
00:03:19.700 --> 00:03:23.510
So starting with the first one where we defining list with object to Dingel brackets.

46
00:03:23.780 --> 00:03:28.090
So this is restricted to non generic lists, raw or lists of object.

47
00:03:28.370 --> 00:03:32.480
So therefore a list of exception in brackets won't pass the compiler.

48
00:03:32.480 --> 00:03:33.870
Check the next one.

49
00:03:33.890 --> 00:03:36.630
We've got a wild card there, a question mark in brackets for list.

50
00:03:36.950 --> 00:03:39.650
Well, that's a wild card which opens the door for all classes.

51
00:03:40.020 --> 00:03:44.060
So effectively list exception in brackets will pass the compiler check as a result.

52
00:03:44.330 --> 00:03:48.620
The next one we've got list with the wild card and super exceptional angle brackets.

53
00:03:48.980 --> 00:03:54.530
Well, this is the law pad which opens the door for the type specified and it's super classes.

54
00:03:54.890 --> 00:04:00.020
So as a result, list, with exception in angle brackets will pass the compiler check and the last entry,

55
00:04:00.020 --> 00:04:04.970
their list this time we're using the wild card extends exception, which has the upper bound, which

56
00:04:04.970 --> 00:04:07.610
opens the door for the top specified and it's subclasses.

57
00:04:07.880 --> 00:04:11.260
And that's a yes for the listing ception in angle brackets as well.

58
00:04:11.600 --> 00:04:15.550
So I won't run through the three other entries there, but you can see the results on screen.

59
00:04:15.860 --> 00:04:20.290
It's a good reminder that if you want to grab the slots for this course, check out the very last video,

60
00:04:20.300 --> 00:04:22.460
watch that video and it shows you how to get the slides.

61
00:04:22.850 --> 00:04:27.410
This is one of those slides that I think is important for you to perhaps memorize or certainly be very

62
00:04:27.410 --> 00:04:31.990
familiar with, especially when you're ready to take the exam or swing back to the card now.

63
00:04:33.690 --> 00:04:34.680
And looking at the code.

64
00:04:36.080 --> 00:04:38.360
You see, that's how my method is called liberty.

65
00:04:40.020 --> 00:04:44.040
This one here, a la notifier over uncommented.

66
00:04:46.450 --> 00:04:51.430
So I can say by doing that, we've got a pilot error required, top list of objects, brackets, and

67
00:04:51.430 --> 00:04:54.490
it's found an integer or list of integer in brackets.

68
00:04:55.030 --> 00:05:00.610
That's because the variable integer list is declared a list of integer an ankle brackets, which does

69
00:05:00.610 --> 00:05:05.500
not meet the criteria in this particular case for a print object list, if you recall, up here.

70
00:05:08.370 --> 00:05:13.410
Which is looking for a list of object in brackets now, this might be confusing, since I'm sure you

71
00:05:13.410 --> 00:05:15.540
know that integer is an object.

72
00:05:16.170 --> 00:05:18.750
However, a list of integer Lego brackets does not meet.

73
00:05:18.750 --> 00:05:24.060
There is a requirement for a list of object in brackets and therefore cannot be used interchangeably

74
00:05:24.330 --> 00:05:25.770
with parameters of that type.

75
00:05:28.290 --> 00:05:32.020
Do you think this diagram, Archos documentation is a good one?

76
00:05:32.170 --> 00:05:34.020
It's very important you remember it for the exam.

77
00:05:34.120 --> 00:05:35.840
It's very easy to get tripped up by this.

78
00:05:36.190 --> 00:05:39.100
There's link also the resources section, if you want to go to that directly.

79
00:05:39.400 --> 00:05:44.760
As you can see in this example here, a box with integer and brackets is not a subtype of box number,

80
00:05:44.770 --> 00:05:48.640
no legal brackets, even though integer is effectively a subtype of no.

81
00:05:49.270 --> 00:05:50.240
Go back to the code.

82
00:05:50.260 --> 00:05:52.450
I've got a comment about that line again, that's got the arrow.

83
00:05:53.880 --> 00:05:57.790
When you're going to spend some time here at the end of the main method.

84
00:06:00.000 --> 00:06:05.880
So that code creates a variable of the raw type list, but assigns a list of integer to it.

85
00:06:06.390 --> 00:06:09.990
So now we're able to use the print object list with a list of integer.

86
00:06:10.860 --> 00:06:11.940
Why does that work?

87
00:06:12.830 --> 00:06:16.460
Well, the answer is you can always cast a generic type to a raw type.

88
00:06:17.090 --> 00:06:20.960
Now, looking at that code, it could have replaced it with the following, which would do the same

89
00:06:20.960 --> 00:06:26.180
thing just to confirm we'll run both of these bits of code that we've added.

90
00:06:28.180 --> 00:06:29.350
And we get the relevant output.

91
00:06:31.650 --> 00:06:34.440
So I consider the following code I'm about to post in.

92
00:06:35.930 --> 00:06:41.900
Noted that compiles, but not carefully that intelligence sharing and Coppola warning if we hover over

93
00:06:41.900 --> 00:06:42.110
it.

94
00:06:43.400 --> 00:06:47.180
Unchecked assignment you to that list to get you to list.

95
00:06:47.460 --> 00:06:53.960
We've got a Brackett's and Javadoc object so you can pass a rule type to any method that has a method

96
00:06:53.960 --> 00:07:00.110
argument with a top argument, even a method that specifies an upper bound, but you do so at your own

97
00:07:00.110 --> 00:07:00.550
peril.

98
00:07:01.220 --> 00:07:02.750
So with that said, let's run this code.

99
00:07:06.530 --> 00:07:12.250
And you can see that we've got a class cast exception to that energy cannot be cast to Javadoc like

100
00:07:12.260 --> 00:07:12.950
the exception.

101
00:07:17.300 --> 00:07:18.500
But let's try something else.

102
00:07:18.620 --> 00:07:22.820
Let's change the names of our methods right at the top so that they all have the same name.

103
00:07:23.300 --> 00:07:27.590
So they are right up to the top here to our wildcat example class.

104
00:07:27.900 --> 00:07:30.950
And what we're going to do is just overwrite the first two methods.

105
00:07:32.120 --> 00:07:37.360
Completely overwrought and posted a decade or so, hopefully, you can see what I've tried to do there,

106
00:07:37.380 --> 00:07:42.920
I'm hoping to overload the method by calling the method the same name print list for both methods.

107
00:07:43.370 --> 00:07:46.850
And you can see that this has produced a compiler error if I hover over it.

108
00:07:48.140 --> 00:07:54.220
Basically says both methods have the same erasure, basically the same erasure signature, so any types

109
00:07:54.220 --> 00:08:01.300
declared for generic methods or in type variable arguments or parameter methods will ultimately be erased

110
00:08:01.450 --> 00:08:06.820
and therefore released have anything to fight by list in brackets, whatever will ultimately just be

111
00:08:06.820 --> 00:08:07.260
a list.

112
00:08:07.570 --> 00:08:11.350
So as a result, you can overload methods using type parameters.

113
00:08:12.160 --> 00:08:13.370
So I'm going to do that change now.

114
00:08:13.370 --> 00:08:16.990
So I'll be back to the methods as they were prior to me posting that coded.

115
00:08:18.950 --> 00:08:20.080
There's Aboriginal code again.

116
00:08:22.600 --> 00:08:27.400
So the following table attempts to try to help you understand what the method cannot be invoked by using

117
00:08:27.400 --> 00:08:31.860
a variable of a certain type or an assignment made in real life.

118
00:08:31.990 --> 00:08:37.540
You'll have your idea of the exam can be very complicated to figure it out and you'll probably be tested

119
00:08:37.540 --> 00:08:38.770
with various scenarios.

120
00:08:40.940 --> 00:08:44.900
The clubs I could see on screen now represent what I'm going to be calling the receiving type, the

121
00:08:44.900 --> 00:08:50.420
variable type of the method argument or verbal declaration which the object instance will be passed

122
00:08:50.420 --> 00:08:51.950
to or assigned to.

123
00:08:54.130 --> 00:08:59.230
The rows represent what are going to be calling the past type, the top declaration of the object instance

124
00:08:59.230 --> 00:09:04.240
being passed to a better document or being assigned to a different reference variable.

125
00:09:06.110 --> 00:09:11.120
So remember, these rules, if you can rule, can be used in any instance, receiving any TARP, a being

126
00:09:11.120 --> 00:09:17.900
pass to any type like a class like example listed in brackets will always receive or can be passed to

127
00:09:17.900 --> 00:09:19.400
a list with brackets.

128
00:09:19.610 --> 00:09:25.670
A list with questionmark extends to brackets will always receive or can be passed to a list of questionmark

129
00:09:25.670 --> 00:09:29.620
estates, Telegu brackets and so on and about a generic class.

130
00:09:29.660 --> 00:09:30.380
And that's the question.

131
00:09:30.380 --> 00:09:37.010
Michelago brackets can receive any type, but it can only be passed to a roar type or a similarly declared

132
00:09:37.010 --> 00:09:38.340
unboarded generic class.

133
00:09:38.360 --> 00:09:40.400
And again, it's the question Michelago brackets.

134
00:09:42.050 --> 00:09:47.780
A generic class, a top argument that does not contain a wildcard has to exactly match the receiving

135
00:09:47.780 --> 00:09:49.690
type with the exception of rule.

136
00:09:50.240 --> 00:09:56.900
So List Talgo brackets can only be received by list Talgo brackets or list with object in brackets can

137
00:09:56.900 --> 00:09:59.810
only be received by list of object legal brackets.

138
00:10:00.470 --> 00:10:04.970
And the list integer brackets cannot be passed to a list object in brackets.

139
00:10:05.300 --> 00:10:09.230
So list Talgo brackets cannot be passed or list object in brackets and so on.

140
00:10:09.620 --> 00:10:16.550
So this type can be passed aurore type A matching type or a type declared with an unbounded wild card.

141
00:10:18.210 --> 00:10:20.170
Now, what rate have this slowdown spread?

142
00:10:20.550 --> 00:10:24.840
You've talked a lot about it already, but it's there for you to take a good look at and take some time

143
00:10:24.840 --> 00:10:27.620
to study this before you actually sit the exam.

144
00:10:28.080 --> 00:10:30.180
And I think it'll be very beneficial for you.

145
00:10:31.110 --> 00:10:35.730
Yes, I've said a few times throughout the course the slides are available for you to download that

146
00:10:35.730 --> 00:10:37.470
you offline to check out the last video.

147
00:10:37.620 --> 00:10:39.060
It is cause for details of that.

148
00:10:39.910 --> 00:10:45.640
But so we've covered a lot of material in the last number of videos on generics, in the next video,

149
00:10:45.940 --> 00:10:51.070
we're going to take a deeper dive into some of the less used or confusing aspects of generics in the

150
00:10:51.070 --> 00:10:52.230
out of ordinary video.

151
00:10:52.480 --> 00:10:54.310
So we'll see you in the next video.
