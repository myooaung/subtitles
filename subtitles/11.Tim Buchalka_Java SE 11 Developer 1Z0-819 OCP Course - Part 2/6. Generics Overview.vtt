WEBVTT
1

00:00:05.200  -->  00:00:08.600
All right, so let's start talking more about creating and using generic classes.

2

00:00:08.960  -->  00:00:12.960
There's a link you can see on screen there and that'll take you to the class declaration

3

00:00:12.960  -->  00:00:16.460
as specified by the Oracle Java 11 specification.

4

00:00:16.860  -->  00:00:19.160
We have a quick look that I’ve got it on screen there in a browser,

5

00:00:19.560  -->  00:00:21.890
but we'll swing back to the slides and talk more about that.

6

00:00:23.890  -->  00:00:26.390
So, let's talk about a normal class declaration.

7

00:00:26.390  -->  00:00:30.390
So, we've got class modifier, class type identifier,

8

00:00:30.390  -->  00:00:34.270
type parameters, superclass, super interfaces,

9

00:00:34.270  -->  00:00:35.570
and then the class body.

10

00:00:36.070  -->  00:00:40.570
So, the type parameters section specified above is the part of the declaration

11

00:00:40.770  -->  00:00:42.370
that makes a class generic.

12

00:00:42.920  -->  00:00:47.120
A class is generic if it declares one or more type parameters.

13

00:00:47.120  -->  00:00:51.480
The type parameter section follows the class name and is enclosed

14

00:00:51.480  -->  00:00:52.480
in angle brackets.

15

00:00:54.180  -->  00:00:57.180
At a minimum, a generic class would be declared as follows.

16

00:00:57.480  -->  00:01:00.080
So, we've got public class GenericContainer

17

00:01:00.080  -->  00:01:03.080
<t> in angle brackets, then left to right curly braces.

18

00:01:03.880  -->  00:01:04.880
So, what is T here?

19

00:01:05.480  -->  00:01:08.840
Well, T in the above example is a type parameter

20

00:01:08.840  -->  00:01:13.140
used as a placeholder for the type that will get assigned at runtime.

21

00:01:13.140  -->  00:01:17.130
You can have more than one type parameter and they can be used anywhere,

22

00:01:17.130  -->  00:01:20.130
a type would be used in a class with the exception

23

00:01:20.130  -->  00:01:24.730
of using them in static members or declaring static variables to be these types.

24

00:01:27.130  -->  00:01:30.490
Convention gives us the following standard type parameter codes.

25

00:01:30.890  -->  00:01:35.790
Starting off with parameter code T, the meaning of that code is the Type.

26

00:01:36.040  -->  00:01:40.940
This is the to be specified later type which the class contains at least one reference to.

27

00:01:41.440  -->  00:01:44.240
The code E is an element of a collection

28

00:01:44.240  -->  00:01:46.240
that's used by the collections API.

29

00:01:46.740  -->  00:01:50.240
K as a Key, mainly used for map types.

30

00:01:50.490  -->  00:01:53.490
And V, Value also used for map types.

31

00:01:53.740  -->  00:01:57.070
N is a Number representing number types.

32

00:01:57.070  -->  00:02:00.570
And we've got S, U, V… etc, but these are also Types

33

00:02:00.570  -->  00:02:04.270
and basically additional types in a multi-parameter situation.

34

00:02:06.570  -->  00:02:08.970
Now although the following doesn't follow convention,

35

00:02:08.970  -->  00:02:11.270
it's not an error to define a class this way.

36

00:02:11.270  -->  00:02:15.270
You can see that I've got class, generic class, and generic type in angled brackets.

37

00:02:16.270  -->  00:02:19.570
The following examples demonstrate declaring local variables

38

00:02:19.570  -->  00:02:22.270
using the generic class with different type arguments.

39

00:02:22.770  -->  00:02:26.670
So, we've got generic class with string in angle brackets and name

40

00:02:26.870  -->  00:02:28.070
generic string class,

41

00:02:28.430  -->  00:02:32.130
there the generic class is typed to a string and in the second example,

42

00:02:32.130  -->  00:02:34.130
we're using a number instead of a string.

43

00:02:34.730  -->  00:02:36.930
And the terminology note here, the T

44

00:02:36.930  -->  00:02:40.430
in GenericClass angled brackets <T> is a type parameter

45

00:02:40.830  -->  00:02:44.530
and string in generic class string in angled brackets

46

00:02:44.530  -->  00:02:45.830
is a type argument.

47

00:02:48.230  -->  00:02:51.730
The following example demonstrates declaring and instantiating

48

00:02:51.730  -->  00:02:54.330
local variables in a single statement.

49

00:02:54.630  -->  00:02:56.130
There are several ways to do it.

50

00:02:56.130  -->  00:02:58.930
The most specific way is to use a type argument

51

00:02:58.930  -->  00:03:02.230
on both the declaration side and the instantiation side.

52

00:03:02.530  -->  00:03:05.930
So an example here is generic class with string and angled brackets

53

00:03:06.290  -->  00:03:08.590
with the name generic string is equal to new

54

00:03:08.590  -->  00:03:09.470
generic class,

55

00:03:09.470  -->  00:03:11.470
then we've got string in angled brackets again,

56

00:03:11.670  -->  00:03:14.970
then left and right parentheses and obviously a semicolon to end the line.

57

00:03:15.570  -->  00:03:19.680
But the compiler can figure out the type from the variable declaration,

58

00:03:19.680  -->  00:03:21.680
so this is called type inference,

59

00:03:21.680  -->  00:03:23.880
so you can use the following shorthand

60

00:03:23.880  -->  00:03:26.080
omitting the type in the type argument

61

00:03:26.080  -->  00:03:28.380
from the assignment side of the object

62

00:03:28.380  -->  00:03:31.280
and using what is called the diamond notation instead

63

00:03:31.480  -->  00:03:35.930
with string and angle brackets and the name generic string equals new generic class,

64

00:03:35.930  -->  00:03:38.730
and then we've got the diamond or diamond operator by itself,

65

00:03:38.730  -->  00:03:40.730
and then the parentheses and a semicolon.

66

00:03:42.930  -->  00:03:46.530
Now, this is quite different from the next example I’m demonstrating below

67

00:03:46.530  -->  00:03:49.530
which omits the diamond operator all together on the assignment side.

68

00:03:50.130  -->  00:03:53.330
Now, this statement as you can see on the screen there creates an instance

69

00:03:53.330  -->  00:03:56.730
of generic class without a type argument specified.

70

00:03:56.730  -->  00:03:58.290
so this is called a raw type.

71

00:03:58.590  -->  00:04:01.090
So, it is valid to do this but discouraged

72

00:04:01.450  -->  00:04:05.750
and IntelliJ's compiler will flag it as a warning, unchecked assignment,

73

00:04:06.000  -->  00:04:09.800
meaning the compiler isn't enforcing the type checking for the raw type.

74

00:04:10.200  -->  00:04:13.200
So, in this case, the type is implied to be an object.

75

00:04:13.450  -->  00:04:15.450
Although the declaration types it to string

76

00:04:16.000  -->  00:04:20.100
and so the code generic class string and angled brackets generic string equals new

77

00:04:20.100  -->  00:04:22.400
GenericClass (); parentheses semicolon.

78

00:04:24.700  -->  00:04:28.100
You can also use local variable type inference to declare

79

00:04:28.100  -->  00:04:30.700
and instantiate a variable as shown below.

80

00:04:30.700  -->  00:04:33.500
var genericString equals new generic class

81

00:04:33.500  -->  00:04:36.300
your string in angled brackets, then parentheses and a semicolon.

82

00:04:36.960  -->  00:04:39.260
All right, so let's explore some of this in code.

83

00:04:39.260  -->  00:04:42.560
We'll swing back to IntelliJ in our GenericsAndCollections project.

84

00:04:43.060  -->  00:04:45.420
Let's create a new class and call it TestGenerics.

85

00:04:53.320  -->  00:04:54.320
Paste in the code.

86

00:04:56.820  -->  00:04:58.420
All right, so let's talk about this code.

87

00:04:58.420  -->  00:05:00.320
So, we're creating a class here

88

00:05:00.320  -->  00:05:02.220
called specifically typed class.

89

00:05:02.620  -->  00:05:06.500
So, this is just an ordinary class declaration that has an instance field,

90

00:05:06.500  -->  00:05:10.100
currentObj of type object, and a constructor

91

00:05:11.090  -->  00:05:14.290
that accepts an object and sets the field to it printing its type.

92

00:05:14.840  -->  00:05:18.440
Moving on down, we've got another class here, generically type class.

93

00:05:18.440  -->  00:05:23.040
Here, I'm specifying that this is a generic class by specifying a type parameter T.

94

00:05:23.240  -->  00:05:24.240
You can see that on line 28.

95

00:05:24.740  -->  00:05:27.240
Instead of making the field currentObj an object,

96

00:05:27.490  -->  00:05:31.490
I declare it with the type T, the generic type parameter line 31.

97

00:05:31.990  -->  00:05:34.590
You can use the type in a method as a parameter type

98

00:05:34.590  -->  00:05:37.390
as I demonstrate in the constructor of this class as well.

99

00:05:37.790  -->  00:05:40.790
The test generics class as we move down,

100

00:05:42.490  -->  00:05:44.090
it's got a main method which you can see there.

101

00:05:44.490  -->  00:05:48.490
This instantiates three instances of the specifically typed class,

102

00:05:48.490  -->  00:05:52.390
passing a string, a string builder, and an integer

103

00:05:52.390  -->  00:05:53.690
using autoboxing.

104

00:05:54.190  -->  00:05:57.550
It instantiates three instances of the generically typed class

105

00:05:59.210  -->  00:06:03.110
using the type argument on the variable declaration but omitting it

106

00:06:03.110  -->  00:06:07.470
when instantiating the object using the diamond or diamond operator instead.

107

00:06:07.870  -->  00:06:12.070
Incidentally in Oracle's documentation, they do refer to it as the diamond,

108

00:06:12.370  -->  00:06:16.670
but the diamond operator seems to be the term that most Java programmers use for this.

109

00:06:17.330  -->  00:06:20.330
You can declare a local variable with LVTI,

110

00:06:20.330  -->  00:06:22.330
the var you can see on line 71,

111

00:06:22.330  -->  00:06:25.530
and specify the type argument when assigning a new instance

112

00:06:25.530  -->  00:06:27.530
of the generic class to the variable,

113

00:06:27.530  -->  00:06:31.530
specifying the type argument on the right-hand side of the assignment operator only,

114

00:06:31.830  -->  00:06:35.130
in this example integer, you can see that on line 71.

115

00:06:36.030  -->  00:06:37.030
All right, so running this code,

116

00:06:40.030  -->  00:06:43.230
you might be asking at this point, what's the big deal about generics?

117

00:06:43.230  -->  00:06:45.730
The result of executing the code seems relatively equal.

118

00:06:46.230  -->  00:06:47.730
Well, let's explore this a bit further.

119

00:06:48.330  -->  00:06:50.930
I'm going to append some more code to our main method.

120

00:06:53.730  -->  00:06:56.930
So, as you can see, this pasted in code actually compiles,

121

00:06:56.930  -->  00:07:00.330
but the comment gives away that the fact that there's going to be an error when we run it.

122

00:07:00.330  -->  00:07:01.330
So, if we run this code,

123

00:07:02.930  -->  00:07:07.230
you can see we've got a class cast exception there on line 77,

124

00:07:07.630  -->  00:07:10.630
and this is because currentObj was set to a string,

125

00:07:11.130  -->  00:07:13.630
and specifically looking at the class cast,

126

00:07:13.630  -->  00:07:16.130
a string cannot be cast to a string builder.

127

00:07:18.630  -->  00:07:21.930
So, you cannot guarantee that the object type you expected

128

00:07:21.930  -->  00:07:25.730
is actually the type of the object that you'll get using a raw type

129

00:07:26.030  -->  00:07:28.630
unless you build your own type-checking code.

130

00:07:28.630  -->  00:07:29.930
And as an example there,

131

00:07:32.130  -->  00:07:35.930
you could certainly do something like that, but firstly, this is unwieldy.

132

00:07:36.180  -->  00:07:39.180
And second, all of this code would need to be maintained and changed

133

00:07:39.180  -->  00:07:40.680
if a new type was introduced.

134

00:07:41.180  -->  00:07:44.180
So, I'm going to undo that and the previous code I pasted it.

135

00:07:44.680  -->  00:07:47.280
All right, so we're back with the code that we initially ran.

136

00:07:47.940  -->  00:07:49.140
So instead,

137

00:07:49.140  -->  00:07:52.800
let's do this. So, I'm going to type string s2

138

00:07:52.800  -->  00:07:55.100
equals generic1

139

00:07:56.000  -->  00:07:58.500
.currentObj – object.

140

00:07:59.490  -->  00:08:03.290
So, this code is guaranteed to work without casting

141

00:08:03.290  -->  00:08:07.490
because we made a contract with the code that only objects of type string

142

00:08:07.740  -->  00:08:09.940
would ever be used in the generic1 instance.

143

00:08:10.930  -->  00:08:14.730
If you need generic1, you can see it's set there on line 61.

144

00:08:17.030  -->  00:08:18.630
All right, so adding some more code here.

145

00:08:20.230  -->  00:08:23.530
And this gives us a compiler error and if we hover over the diamond over here,

146

00:08:23.530  -->  00:08:25.030
cannot infer arguments.

147

00:08:25.630  -->  00:08:27.620
The diamond operator can only be used

148

00:08:27.620  -->  00:08:31.420
in an instantiation if the left-hand side is a declaration.

149

00:08:31.920  -->  00:08:33.520
All right, so let's replace that line.

150

00:08:34.820  -->  00:08:37.020
Now, this is also a compiler error.

151

00:08:37.620  -->  00:08:39.820
And you can see incompatible types essentially.

152

00:08:39.820  -->  00:08:42.320
Required type is generically type class

153

00:08:42.320  -->  00:08:45.920
with string in angled brackets, but we've provided it as you can see in line 74

154

00:08:45.920  -->  00:08:48.620
with a generically typed class of type string builder,

155

00:08:48.920  -->  00:08:52.020
and this is because of course, we set up generic1

156

00:08:52.020  -->  00:08:55.220
to be looking for a type of string again on line 61.

157

00:08:55.880  -->  00:08:57.380
Let's try one more example here.

158

00:08:58.580  -->  00:08:59.810
We've got another error here

159

00:08:59.810  -->  00:09:03.410
implying that you can't use a string builder object in the constructor

160

00:09:03.410  -->  00:09:07.010
where a string type has been specified for the instance of the generic class.

161

00:09:08.210  -->  00:09:11.510
And you can see that it's looking for a string and we've provided it with a string builder.

162

00:09:11.510  -->  00:09:15.010
So, here I've shown you two of the benefits of using generics in your code.

163

00:09:15.010  -->  00:09:19.010
Firstly, eliminating the need to cast when working with the types which the container

164

00:09:19.010  -->  00:09:20.510
class contains.

165

00:09:20.510  -->  00:09:22.410
Secondly, moving the type error

166

00:09:22.410  -->  00:09:26.310
from a runtime error to a compile-time error which of course is preferred.

167

00:09:26.310  -->  00:09:29.410
No one wants to deploy code with inadvertent errors in it

168

00:09:29.410  -->  00:09:33.310
and by forcing a type and therefore, a type check by the compiler,

169

00:09:33.310  -->  00:09:36.310
you may prevent errors from occurring further down the development life cycle.

170

00:09:36.810  -->  00:09:41.010
All right, so we're going to replace that line, generic1 with some more code.

171

00:09:41.810  -->  00:09:45.010
Note that this doesn't generate a compile-time error,

172

00:09:45.010  -->  00:09:45.810
but if we run it,

173

00:09:47.610  -->  00:09:51.910
you can see we've again got a class cast exception on line 76.

174

00:09:52.710  -->  00:09:54.610
String builder can't be cast to string.

175

00:09:56.410  -->  00:09:57.510
So, what's this all about?

176

00:09:58.310  -->  00:10:00.910
Well, Java permits you to assign a raw type

177

00:10:00.910  -->  00:10:04.210
to a variable declared with a specific type,

178

00:10:04.210  -->  00:10:06.310
but you really don't want to do this in practice.

179

00:10:06.310  -->  00:10:09.510
The reason this is permitted has to do with backwards compatibility

180

00:10:09.510  -->  00:10:12.510
and type erasure, which I'll discuss in a future video.

181

00:10:12.510  -->  00:10:14.510
Let's just remove those two lines.

182

00:10:15.410  -->  00:10:18.710
so that our code compiles again or rather. that it'll work again.

183

00:10:18.710  -->  00:10:21.310
And I'm going to add a bit more code here now before we end the video.

184

00:10:21.670  -->  00:10:23.670
So, you can see what I've done there using generic4,

185

00:10:24.330  -->  00:10:28.830
so this is also a compiler error. So, you can't type a generic class with a primitive data type.

186

00:10:29.030  -->  00:10:30.630
A type must be an object.

187

00:10:30.630  -->  00:10:34.930
Autoboxing and unboxing make it possible to store and retrieve values that are wrappers

188

00:10:34.930  -->  00:10:39.430
to the primitive data types, but obviously here is not working when we're trying to use generics.

189

00:10:39.830  -->  00:10:42.130
All right, let's end the video in here, and in the next one,

190

00:10:42.130  -->  00:10:45.430
I want to start talking about restrictions on generic classes.

191

00:10:45.790  -->  00:10:47.090
See you in the next video.
