WEBVTT
1
00:00:05.310 --> 00:00:12.510
The following table lists the primitive variations of the base interfaces for double only variations

2
00:00:12.510 --> 00:00:15.810
also exist for most of the following interfaces for long.

3
00:00:15.810 --> 00:00:16.260
And it.

4
00:00:20.110 --> 00:00:26.320
For example, there are the interfaces into unary operator and long, unary operator, it is important

5
00:00:26.320 --> 00:00:31.900
to know that the single abstract method or functional method of the interface may have a different name

6
00:00:32.050 --> 00:00:35.290
than its generic counterpart Asho the method names here.

7
00:00:37.420 --> 00:00:42.760
You can see that the variations with primitives are using the primitive as an argument or getting a

8
00:00:42.760 --> 00:00:44.080
primitive as a result.

9
00:00:48.000 --> 00:00:52.830
That's when a primitive is the result, with the exception of the predicate, which always returns a

10
00:00:52.830 --> 00:00:58.920
simple boolean, the method time changes to include the primitive being returned, the appli becomes

11
00:00:58.920 --> 00:01:03.830
apply a stable method, and the result is a double primitive type for a function interface Guinness

12
00:01:03.840 --> 00:01:08.000
it when the result is in it for the supply of interface as examples.

13
00:01:08.400 --> 00:01:14.910
Remembering this will help you recognize incorrect method names used in samples of code in an exam question.

14
00:01:17.150 --> 00:01:21.500
It's looking at this table, the generic interface union, the operator, functional method apply,

15
00:01:21.890 --> 00:01:27.080
the double primitive type is double unary operator, a functional method signature returns a double

16
00:01:27.260 --> 00:01:31.860
and the name suppliers double testing a double as a parameter next.

17
00:01:31.880 --> 00:01:34.220
We've got binary operator functional method.

18
00:01:34.220 --> 00:01:37.660
Apply the double primitive type double binary operator.

19
00:01:38.030 --> 00:01:43.780
The functional method returns a double and triple double, taking two tables as parameters.

20
00:01:44.390 --> 00:01:46.100
Next generic interface function.

21
00:01:46.370 --> 00:01:48.170
The functional method is apply.

22
00:01:48.710 --> 00:01:55.820
You've got double function type are double to function, double to lung function and to double function

23
00:01:55.970 --> 00:02:04.430
of type T in the functional methods we've got to apply that returns tripa the tax as a parameter, a

24
00:02:04.430 --> 00:02:04.940
double.

25
00:02:05.430 --> 00:02:09.710
We've got a place int which returns and it takes a double as a parameter.

26
00:02:10.070 --> 00:02:14.870
We've got a plus long which returns along the Texas double as a parameter.

27
00:02:15.200 --> 00:02:18.080
We've got a Playaz double which returns a double.

28
00:02:18.260 --> 00:02:21.260
That takes it as a parameter by function.

29
00:02:21.440 --> 00:02:27.230
The method, the functional method is apply the double privative taught to double by function.

30
00:02:27.380 --> 00:02:29.630
It can say we've got Tecoma you there in brackets.

31
00:02:29.780 --> 00:02:35.160
Functional method applies double returns a double and we've got the parameters t and you next.

32
00:02:35.180 --> 00:02:39.120
Generically defaces predicate functional method is test tuple.

33
00:02:39.140 --> 00:02:40.850
Primitive type is double predicate.

34
00:02:41.370 --> 00:02:46.910
You can see that the functional methods call test in terms of boolean and takes a double as a perimeter

35
00:02:47.270 --> 00:02:49.220
next to the interfaces consumer.

36
00:02:49.520 --> 00:02:55.790
The functional method is except the double privative top is double consumer or double consumer of type

37
00:02:55.790 --> 00:03:01.580
to t the function method is except it's marked as void and takes a double bottom parameter.

38
00:03:01.790 --> 00:03:04.490
And the last one generic interface is supplier.

39
00:03:04.880 --> 00:03:10.430
Functional method is get the double primitive type is double supplier and the functional method's called

40
00:03:10.430 --> 00:03:12.560
get us double which returns a double.

41
00:03:13.640 --> 00:03:18.410
Let's swing back to the audience now, need to create a new class in our built in interfaces project

42
00:03:18.740 --> 00:03:20.870
and we'll call this one double primitive example's.

43
00:03:33.030 --> 00:03:38.250
But as Kate demonstrates, an example, for every primitive interface that uses a double as an argument

44
00:03:38.580 --> 00:03:43.340
or returns the table as a return to what you know from this code, that many of the interface method

45
00:03:43.350 --> 00:03:49.170
names are slightly different, applies double, for example, for unary operator with the unary operator

46
00:03:49.170 --> 00:03:51.600
type to t generic interfaces simply apply.

47
00:03:52.110 --> 00:03:53.070
I can see the cadence.

48
00:03:53.070 --> 00:03:53.670
I scroll down.

49
00:03:55.950 --> 00:04:01.140
Quite a bit of code there, and basically, as I said, this is an example for every primitive interface

50
00:04:01.140 --> 00:04:05.260
that uses a double as an argument or turns a double as a return type.

51
00:04:06.030 --> 00:04:06.810
So let's run this.

52
00:04:09.990 --> 00:04:17.220
And there's the airport, as you can see on screen, so let's do the same now with the interfaces to

53
00:04:17.220 --> 00:04:20.040
create a new class, you probably guess what you're going to call it.

54
00:04:21.790 --> 00:04:26.320
So, of course, one integer primitive example's.

55
00:04:33.690 --> 00:04:39.270
Much like the double Primitivo Example's class, this one demonstrates an example for every primitive

56
00:04:39.270 --> 00:04:45.060
interface that uses an intense argument or turns it into a return type, it's basically just mirroring

57
00:04:45.450 --> 00:04:47.280
the examples I just demonstrated.

58
00:04:47.310 --> 00:04:48.060
So if we run this.

59
00:04:49.850 --> 00:04:50.990
This was out on screen.

60
00:04:51.860 --> 00:04:56.300
All right, so moving on in the next video, I'm going to review some out of ordinary concepts for the

61
00:04:56.300 --> 00:05:00.830
built in functional interfaces that we've reviewed in the last five videos.

62
00:05:01.190 --> 00:05:02.330
See you in the next video.
