WEBVTT
1
00:00:05.320 --> 00:00:10.960
But let's look again at what happens if you don't follow standard naming conventions for your top parameters,

2
00:00:11.260 --> 00:00:16.890
which the exam may not at times not demonstrated an example of that in a previous video in this section.

3
00:00:17.140 --> 00:00:18.910
But I want to demonstrate another here.

4
00:00:19.570 --> 00:00:22.510
So what we need to do is create a class called generic confusion.

5
00:00:29.990 --> 00:00:30.800
Pasting the code.

6
00:00:34.610 --> 00:00:38.930
So take a good look at this generic class container here on line nine.

7
00:00:40.300 --> 00:00:45.770
So if you're 60 minutes into the exam, you may not recognize what this code is actually doing, it's

8
00:00:45.790 --> 00:00:53.770
using no as a top parameter code instead of a more standard practice, such as E or T, which is allowed,

9
00:00:53.890 --> 00:00:55.300
but terribly confusing.

10
00:00:56.050 --> 00:01:02.110
So this case number in this class no longer represents javadoc length or number, but represents whatever

11
00:01:02.110 --> 00:01:07.420
type that's used when the class is declared the scrolling down further in my method here.

12
00:01:08.600 --> 00:01:12.180
I'm declaring a variable of container, string and angle brackets.

13
00:01:12.350 --> 00:01:16.230
So now the instance variable in the container is string further on.

14
00:01:16.820 --> 00:01:23.180
I'm creating a container which contains an integer array and a container of unknown error.

15
00:01:23.870 --> 00:01:26.780
The code obviously compiles, as you can see there, and when we run it.

16
00:01:29.050 --> 00:01:32.740
We get the following output at the bottom if I follow the convention.

17
00:01:33.770 --> 00:01:40.250
When declaring container and use T or E, it would have been a great deal less confusing, but let's

18
00:01:40.250 --> 00:01:41.420
consider one more example.

19
00:01:42.670 --> 00:01:45.760
Let's add some more code to this class, fall to the bottom.

20
00:01:48.080 --> 00:01:52.880
You can see the classes called cardboard container of to find two constructor's that looked nearly the

21
00:01:52.880 --> 00:01:56.790
same, both to find a single argument to the constructor.

22
00:01:57.440 --> 00:02:01.630
The code doesn't compile, but not for the reason you might think so.

23
00:02:01.700 --> 00:02:07.460
It's filing on line fifty two that my favorite was my third line and not the declaration of what looks

24
00:02:07.460 --> 00:02:13.950
like a duplicate constructor and the actual error if we have over it, required type T provided T.

25
00:02:14.570 --> 00:02:15.920
That's pretty confusing as well.

26
00:02:16.440 --> 00:02:22.640
So the problem here is that the second constructor is using a method type rabidity which hides the top

27
00:02:22.640 --> 00:02:26.190
rabidity of the class when used in this particular constructor.

28
00:02:26.600 --> 00:02:32.480
So this means the type of the parameter pass to this constructor may not be the same type of the instance

29
00:02:32.480 --> 00:02:33.740
field my field.

30
00:02:34.430 --> 00:02:36.680
This is where the constructor declaration was allowed.

31
00:02:36.890 --> 00:02:39.960
The overloaded constructors do not have the same signature.

32
00:02:40.460 --> 00:02:42.860
So if we come in at this line on fifty to.

33
00:02:44.320 --> 00:02:50.020
Now the code compiles, but what happens when I use this class constructor method with the same type,

34
00:02:50.200 --> 00:02:52.210
so which constructor is going to be invoked?

35
00:02:52.690 --> 00:02:53.580
Well, let's test this out.

36
00:02:54.400 --> 00:02:58.300
Let's go back up to our method and we'll paste in some code here.

37
00:03:01.020 --> 00:03:01.710
We'll run this.

38
00:03:03.570 --> 00:03:05.160
In Deconstructive, as you can see there.

39
00:03:06.830 --> 00:03:12.200
That confirms the first constructor was executed, the tribe posting some more code into our main method.

40
00:03:14.860 --> 00:03:15.610
Let's run this.

41
00:03:17.510 --> 00:03:23.360
And you could say this time the second constructor was executed, so the compiler used type inference

42
00:03:23.360 --> 00:03:27.950
to determine that it was the second constructor that should be called the alternatively.

43
00:03:27.950 --> 00:03:31.280
What I could do is I put in some more code, possible code into the main method.

44
00:03:32.260 --> 00:03:32.870
Let's run that.

45
00:03:36.140 --> 00:03:39.570
Again, the airport confirms that the compiler is not confusing the constructors.

46
00:03:40.010 --> 00:03:43.310
We've got the same response there, the output from the second constructor.

47
00:03:44.220 --> 00:03:49.110
So let's go down to our classic and we're going to make a change to the second constructor of our cardboard

48
00:03:49.110 --> 00:03:51.900
container class, I'm just going to paste that one line in.

49
00:03:54.560 --> 00:03:57.290
This has produced a compiler error on the first constructor.

50
00:03:57.740 --> 00:03:59.660
Now I've created clashing constructors.

51
00:04:01.490 --> 00:04:07.490
When I remove the upper band, as I did when I replaced the declaration, a line 59 type erasure erases

52
00:04:07.490 --> 00:04:11.000
both methods to type object with the upper bound declaration.

53
00:04:11.000 --> 00:04:14.930
The constructor with the upper band was erased to a number and not object.

54
00:04:15.290 --> 00:04:16.460
So undo that change.

55
00:04:18.720 --> 00:04:23.940
This cop Termin method again, so going to replace lines forty two, three, forty six.

56
00:04:25.100 --> 00:04:29.780
So Buchard like to see what I'm doing, they're using the diamond notation on the right hand side of

57
00:04:29.780 --> 00:04:32.600
the assignment instead of string, as it originally was.

58
00:04:33.290 --> 00:04:36.380
So both of these changes have resulted in Karbala errors.

59
00:04:36.860 --> 00:04:42.620
The first one, if we hover over it, can I infer arguments and able to resolve constructor and the

60
00:04:42.620 --> 00:04:43.100
second?

61
00:04:44.610 --> 00:04:48.120
Karma is diamonds with explicit top parameters for constructor.

62
00:04:49.020 --> 00:04:54.420
So leave is there for the moment, I want to make one more change to the second constructor in a cardboard

63
00:04:54.420 --> 00:04:55.320
container class.

64
00:04:56.100 --> 00:04:58.080
Let's get into that, a second constructor here.

65
00:04:59.330 --> 00:05:03.620
So I'm going to do is just simply change T to V.

66
00:05:10.620 --> 00:05:15.900
So first of all, this makes it a bit clearer that the class is tight perimeter maybe probably will

67
00:05:15.900 --> 00:05:21.740
be different than the other constructor's in addition of eliminated one of the two compiler errors that

68
00:05:21.750 --> 00:05:22.820
I introduced previously.

69
00:05:23.370 --> 00:05:25.290
And if you go back up to our my method here.

70
00:05:26.410 --> 00:05:31.270
We've now only got the one area here, cannery's diamonds with explicit type parameters for constructability,

71
00:05:31.930 --> 00:05:36.550
which we can fix by putting string in a diamond.

72
00:05:37.960 --> 00:05:41.200
And you can say the code now compiles, we could run it.

73
00:05:42.670 --> 00:05:44.410
And everything's back to working, as it should be.

74
00:05:46.650 --> 00:05:52.770
So in this and the previous videos, examples of demonstrated, firstly overloaded constructor's one

75
00:05:52.770 --> 00:05:59.280
using the class type parameter t bone to create its own type parameter, which hit the class top parameter

76
00:05:59.400 --> 00:06:05.310
of the same name t the methods were considered overloaded and not clashing because the generic method

77
00:06:05.310 --> 00:06:11.280
constructor used an upper bound on its declared type parameter, so the compiler was able to distinguish

78
00:06:11.280 --> 00:06:11.850
between them.

79
00:06:13.880 --> 00:06:18.650
When invoking the constructor's dominated session on the right hand side of the assignment statement

80
00:06:18.950 --> 00:06:25.220
was not permitted while the second constructor hid the class parameter time a change, the top code

81
00:06:25.220 --> 00:06:31.040
from Tator v. The diamond notation was permitted when I was not using an explicit top argument for the

82
00:06:31.040 --> 00:06:33.440
number, constructor and darba notation.

83
00:06:33.440 --> 00:06:38.360
On the right hand side of the assignment statement is not permitted if the generic method constructor

84
00:06:38.360 --> 00:06:41.330
is invoked using an explicit type argument.

85
00:06:43.150 --> 00:06:44.240
So let's end in the video here.

86
00:06:44.560 --> 00:06:48.820
Next, I'm going to be asking you a few quick questions and then we'll move on in this section to start

87
00:06:48.820 --> 00:06:50.580
talking about the collection's framework.

88
00:06:51.070 --> 00:06:53.500
Good luck and I'll see you on the other side of the quiz.
