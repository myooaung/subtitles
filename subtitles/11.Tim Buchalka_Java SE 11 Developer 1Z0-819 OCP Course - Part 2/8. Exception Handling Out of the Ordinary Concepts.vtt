WEBVTT
1

00:00:05.400  -->  00:00:09.000
Alright.
So, let's look at some out of ordinary items in ExceptionHandling.

2

00:00:09.900  -->  00:00:13.200
The try with resources statement will suppress exceptions up to two,

3

00:00:13.560  -->  00:00:17.560
which may occur during the close methods on any resources if an exception is thrown

4

00:00:17.760  -->  00:00:18.760
from the try block.

5

00:00:19.160  -->  00:00:21.160
Let's explore this feature in code.

6

00:00:21.410  -->  00:00:24.910
What we need to do is, create yet another class in our ExceptionHandling project.

7

00:00:25.160  -->  00:00:26.360
We're going to call this one, Season,

8

00:00:34.160  -->  00:00:35.160
paste in the code.

9

00:00:38.710  -->  00:00:42.110
Right, so this code consists of a public Season class

10

00:00:42.110  -->  00:00:45.510
representing a season of episodes in a series of shows,

11

00:00:45.910  -->  00:00:49.810
so specifically, you can see the Season class implements AutoCloseable

12

00:00:49.810  -->  00:00:53.610
on line 10. It also declares a concrete close method

13

00:00:53.610  -->  00:00:54.610
and run method.

14

00:00:55.010  -->  00:00:58.010
Now, we'll ignore this in a class. We'll come back to that shortly,

15

00:00:58.010  -->  00:01:00.810
but you can see the actual Overridden close method here

16

00:01:01.810  -->  00:01:02.810
on line 47,

17

00:01:03.470  -->  00:01:05.770
and also the run method there on 55.

18

00:01:06.470  -->  00:01:08.370
But getting back to the inner class here,

19

00:01:09.670  -->  00:01:13.930
you see the inner class is called Episode then that represents episodes within a season.

20

00:01:14.330  -->  00:01:17.130
And you can see that it implements AutoCloseable

21

00:01:17.130  -->  00:01:20.130
and also declares some concrete methods.

22

00:01:20.130  -->  00:01:24.230
So, specifically, we've got the concrete close method there for the inner class.

23

00:01:25.030  -->  00:01:27.630
And note that this throws an exception a RuntimeException

24

00:01:27.630  -->  00:01:29.630
if the episode number is equal to one,

25

00:01:29.930  -->  00:01:31.430
same with the run method there,

26

00:01:31.430  -->  00:01:34.430
episodeNumber one also throws a RuntimeException.

27

00:01:34.790  -->  00:01:38.490
Getting back to the Overridden methods for the Season class instead of the episode,

28

00:01:39.190  -->  00:01:42.490
you can see in that closed method is throwing a RuntimeException

29

00:01:42.490  -->  00:01:44.490
if the season number is equal to one.

30

00:01:45.290  -->  00:01:47.950
We've also got that run method that I said that just does some output.

31

00:01:48.250  -->  00:01:52.150
And looking at our main method that declares a try with resources statement

32

00:01:52.450  -->  00:01:56.150
using an instantiation of season representing season one

33

00:01:56.150  -->  00:01:59.750
and an instantiation of episode. And that's representing episode one

34

00:01:59.750  -->  00:02:02.850
and both run methods are invoked in the try block.

35

00:02:02.850  -->  00:02:05.850
So, both the Season run method and the Episode run method.

36

00:02:06.750  -->  00:02:08.050
So, let's run this code now.

37

00:02:10.650  -->  00:02:12.150
You can see the output,

38

00:02:13.350  -->  00:02:16.550
so basically, you can see that the try statement reached the closed statements.

39

00:02:16.550  -->  00:02:19.650
First, in the episode instance then in the season,

40

00:02:19.650  -->  00:02:21.450
and both of these threw an exception.

41

00:02:22.110  -->  00:02:26.510
These exceptions get collected and stored on the suppressed exception array

42

00:02:26.810  -->  00:02:30.610
on the original exception, which occurred while running episode 1.

43

00:02:31.110  -->  00:02:33.910
Now, since I didn't catch or handle the exceptions,

44

00:02:33.910  -->  00:02:38.370
execution terminated and the stack trace which includes suppressed exceptions

45

00:02:38.370  -->  00:02:40.570
was output. And we can see that obviously on the screen.

46

00:02:40.820  -->  00:02:43.820
So, let's actually try catching these errors this time.

47

00:02:44.320  -->  00:02:47.320
We're going to make it very simple down here on line 68.

48

00:02:47.320  -->  00:02:48.420
I'm going to add catch

49

00:02:50.720  -->  00:02:55.320
(exception e)  in parentheses add a code block.

50

00:02:55.520  -->  00:02:58.850
And we're just going to print out System.out.println (e).

51

00:02:59.510  -->  00:03:00.210
Very simple!

52

00:03:01.310  -->  00:03:04.510
Right, so let's now run it again and see what happens. Now we're catching the error.

53

00:03:08.310  -->  00:03:10.310
Alright, so you can see we've got different output this time.

54

00:03:10.560  -->  00:03:13.360
When I printed the exceptions thrown during the try clause

55

00:03:13.360  -->  00:03:16.360
using system.out.println on line 69,

56

00:03:16.360  -->  00:03:18.560
I only get the basics about the exception.

57

00:03:18.960  -->  00:03:21.560
And really, at this point, I've got no idea that exceptions

58

00:03:21.560  -->  00:03:23.860
may have occurred during the closed method or methods

59

00:03:23.860  -->  00:03:28.360
except that our closed methods did not print the last statement in their methods as expected.

60

00:03:29.160  -->  00:03:33.160
Now what we can do is query the exception that was thrown for the try clause

61

00:03:33.160  -->  00:03:36.760
for any suppressed exceptions. So, let's actually try doing that.

62

00:03:37.260  -->  00:03:39.030
So, we're going to go back to our code here

63

00:03:40.030  -->  00:03:41.590
in our catch clause,

64

00:03:42.290  -->  00:03:45.290
and we'll put some code for  (Throwable

65

00:03:46.790  -->  00:03:50.390
t: e.getSuppressed),

66

00:03:51.690  -->  00:03:54.890
then we've got the parentheses there, then the closing right parentheses,

67

00:03:54.890  -->  00:03:55.790
open a code block.

68

00:03:56.090  -->  00:03:59.390
Let's print each one out, so system.out.println(t)

69

00:04:00.190  -->  00:04:01.090
Run this now,

70

00:04:04.690  -->  00:04:06.140
we can see the output now.

71

00:04:06.140  -->  00:04:09.140
Itâ€™s now showing the various RuntimeExceptions

72

00:04:09.140  -->  00:04:13.140
and the error message associated with it that we added, Episode failed,Closing failed

73

00:04:13.140  -->  00:04:15.440
on Episode, and Closing failed on Season.

74

00:04:16.240  -->  00:04:18.240
Alright, so what happens if we don't have an exception

75

00:04:18.740  -->  00:04:21.540
on the Episode run method? Let's go back up to that.

76

00:04:23.540  -->  00:04:26.240
There's the Episode run method, so what I'm going to do is just comment out

77

00:04:26.740  -->  00:04:27.740
these two lines here,

78

00:04:28.740  -->  00:04:30.240
so that we're not throwing the exception.

79

00:04:31.940  -->  00:04:33.440
Getting back to our main method,

80

00:04:34.040  -->  00:04:37.540
I'm just going to make a change here, just so it's more obvious from the output what's happening.

81

00:04:38.540  -->  00:04:40.640
So, what we're going to do is here, System.out.println,

82

00:04:41.440  -->  00:04:43.640
we'll have a more like extended message here,

83

00:04:43.640  -->  00:04:46.640
double quotes ERROR CAUGHT

84

00:04:48.840  -->  00:04:51.440
plus e, and we'll do a similar thing for the suppressed,

85

00:04:51.690  -->  00:04:53.290
double quotes SUPPRESSED

86

00:04:55.590  -->  00:04:56.590
plus t.

87

00:04:57.090  -->  00:04:58.390
So, now if we run this,

88

00:05:02.190  -->  00:05:06.390
we can now see more clearly that the ERROR CAUGHT was java.lang.RuntimeException:

89

00:05:06.390  -->  00:05:09.790
Closing Failed on Episode but the Suppressed exception

90

00:05:09.790  -->  00:05:13.690
was from our Season code and the close method, specifically.

91

00:05:14.190  -->  00:05:18.390
Alright.
So, let's now, try adding our own suppressed exceptions.

92

00:05:18.890  -->  00:05:21.790
I'm going to undo the changes that I made to the Episode run method.

93

00:05:21.790  -->  00:05:24.290
So, we're going to put the exception back and get the code back.

94

00:05:26.650  -->  00:05:29.150
And now, what I'm going to do is edit the Season run method.

95

00:05:29.650  -->  00:05:32.640
So, I'll come down here to the Season run method, which currently is only doing an output

96

00:05:32.890  -->  00:05:34.890
a line of output as you can see on line 56.

97

00:05:35.290  -->  00:05:37.290
So, specifically, I'm going to add some code here,

98

00:05:37.540  -->  00:05:42.040
if parentheses this.seasonNumber is equal to one.

99

00:05:42.840  -->  00:05:46.540
What we're going to do in that case is throw a new RuntimeException,

100

00:05:48.900  -->  00:05:52.700
and the message we're going to put is Season failed.

101

00:05:56.800  -->  00:06:00.300
Right, so what I'm going to do here is just replace the method,the main method,

102

00:06:00.300  -->  00:06:02.900
add a few changes to it, and then we'll go through, and

103

00:06:02.900  -->  00:06:04.400
talk about what's been changed.

104

00:06:05.060  -->  00:06:07.360
Alright.
So, I've pasted in some new changes there.

105

00:06:08.020  -->  00:06:10.620
So, what I've done is firstly, on line 63,

106

00:06:10.620  -->  00:06:13.320
you can see I've added the local variable of top throwable

107

00:06:13.320  -->  00:06:15.820
named addedSuppressed and set it initially to null.

108

00:06:16.520  -->  00:06:20.120
And also, looking at the code now, added a nested try/catch

109

00:06:20.120  -->  00:06:22.120
to catch any error from the Season run.

110

00:06:22.480  -->  00:06:25.580
And the exceptions caught and assigned to the local variable.

111

00:06:25.980  -->  00:06:30.970
You can see, they're all happening. The try/catch is now on line 70 through 75.

112

00:06:31.220  -->  00:06:34.220
And we're setting the caught exception to a local variable on line 75.

113

00:06:36.220  -->  00:06:38.220
Down here, in the outer catch,

114

00:06:38.720  -->  00:06:41.380
I'm demonstrating how to add a suppressed exception,

115

00:06:41.380  -->  00:06:43.880
then demonstrating printing all the exceptions out.

116

00:06:44.880  -->  00:06:45.980
Alright, so let's run this.

117

00:06:49.980  -->  00:06:51.580
And we can see the app on screen.

118

00:06:52.180  -->  00:06:55.380
So, what that's demonstrating is that we successfully added

119

00:06:55.380  -->  00:06:58.280
an exception to the Suppressed exception list

120

00:06:58.780  -->  00:07:03.080
that's obviously, the one on the one, right at the bottom of the output there,Season failed,

121

00:07:03.330  -->  00:07:07.330
which relates to the code, the change that we made there on

122

00:07:07.330  -->  00:07:11.130
lines 57 and 58 of the Season run method.

123

00:07:11.730  -->  00:07:14.230
Alright. So, I want to perform one more test before we finish the video

124

00:07:14.230  -->  00:07:15.730
on the trial with resources construct.

125

00:07:16.230  -->  00:07:17.730
We need a new class for that,

126

00:07:17.730  -->  00:07:19.090
let's go ahead and create a new one.

127

00:07:19.490  -->  00:07:21.190
We'll call this one SeasonTest.

128

00:07:30.490  -->  00:07:33.490
Right, so this code, I've pasted in, is a bit ugly but interesting.

129

00:07:33.990  -->  00:07:38.590
So, firstly, what I'm doing is I'm declaring a basic try with resources statement using Season.

130

00:07:38.840  -->  00:07:40.340
And you can see that on line 13.

131

00:07:40.940  -->  00:07:43.340
Now with that, I'm initializing the variable s

132

00:07:43.740  -->  00:07:45.340
which is local to the try block,

133

00:07:45.590  -->  00:07:48.240
and initializing it specifically with season one.

134

00:07:48.740  -->  00:07:51.340
Any exception from this try clause is thrown

135

00:07:51.740  -->  00:07:54.740
from the main method,not caught and stops execution.

136

00:07:55.100  -->  00:07:59.600
Looking at the code further slightly down on line 17, I'm declaring a Nested try-with-resources

137

00:07:59.600  -->  00:08:01.600
statement this time in a for loop.

138

00:08:01.600  -->  00:08:03.480
You can see the for loop starting on line 14.

139

00:08:04.180  -->  00:08:05.980
Now passing in two resources,

140

00:08:05.980  -->  00:08:08.980
the Season s already instantiated previously,

141

00:08:08.980  -->  00:08:12.580
but also the declaration and instances of new episodes.

142

00:08:13.240  -->  00:08:17.140
So, inside this try block, I'm executing the run method as you can see there,

143

00:08:17.140  -->  00:08:20.140
line 19, which fails on episode one.

144

00:08:20.640  -->  00:08:23.140
This exception is caught and printed

145

00:08:23.140  -->  00:08:26.740
with the suppressed exceptions from the attempts to close the resources.

146

00:08:27.140  -->  00:08:31.140
And note also that the Nested try-with-resources statement will try to close

147

00:08:31.140  -->  00:08:34.240
the current episode as well as the Season s.

148

00:08:34.240  -->  00:08:38.800
The outer try with resources statement will attempt to close Season s as well.

149

00:08:39.160  -->  00:08:40.160
Let's run this.

150

00:08:44.360  -->  00:08:46.360
And there's the output on the screen there.

151

00:08:49.660  -->  00:08:53.660
So, I want to point out that up until java 8. The try-with-resources statement could only

152

00:08:53.660  -->  00:08:56.660
close resources declared as part of the statement.

153

00:08:57.160  -->  00:08:58.760
But as of java 9,

154

00:08:58.760  -->  00:09:01.760
this statement can also close predefined resources

155

00:09:01.760  -->  00:09:05.960
as this example demonstrates with Season s in the Nested try-with-resources statement.

156

00:09:06.360  -->  00:09:10.160
Finally, I just want to point out that all the examples I've shown you in this video

157

00:09:10.160  -->  00:09:12.560
and the previous ones in this section of the course

158

00:09:12.560  -->  00:09:14.760
which overrode the close method of AutoCloseable,

159

00:09:14.760  -->  00:09:17.860
not one of them declared the throws clause for the method.

160

00:09:18.360  -->  00:09:21.160
So, note that the close method on AutoCloseable is declared

161

00:09:21.410  -->  00:09:23.180
with a throws Exception clause.

162

00:09:23.780  -->  00:09:26.080
Now, this is considered, I will just close the output pane here,

163

00:09:27.080  -->  00:09:30.780
doing that's considered a valid override as demonstrated in all these examples

164

00:09:30.780  -->  00:09:33.340
as well as declaring a more specific Exception.

165

00:09:33.840  -->  00:09:35.440
Let's go back to the Season class.

166

00:09:36.540  -->  00:09:39.540
What I want to do is alter the close method on Season,

167

00:09:40.900  -->  00:09:43.700
and you can see there's our close method, line 47.

168

00:09:44.400  -->  00:09:46.700
We're going to add a throws clause as I've been talking about.

169

00:09:47.700  -->  00:09:50.900
The throws, we'll throw a RuntimeException.

170

00:09:53.200  -->  00:09:56.400
See that the code still compiles if we run it,

171

00:09:56.400  -->  00:09:58.200
we'll get the same output as well.

172

00:10:00.080  -->  00:10:01.480
Everything's working as it was before.

173

00:10:03.080  -->  00:10:05.080
Remember that when overriding a method,

174

00:10:05.380  -->  00:10:09.180
you can exclude the throws clause if the interface specifies one,

175

00:10:09.180  -->  00:10:12.780
or you can include the throws clause with the same type of exception,

176

00:10:12.780  -->  00:10:16.080
or a more specific subclass of the declared exception.

177

00:10:16.380  -->  00:10:19.180
Now, for example, the following code I'm about to type in here

178

00:10:19.180  -->  00:10:21.180
is actually going to introduce a compiler error.

179

00:10:21.180  -->  00:10:23.180
I'll change RuntimeException to throwable,

180

00:10:24.180  -->  00:10:28.180
we've got a compiler error now, because throwable is not a subclass of exception.

181

00:10:29.180  -->  00:10:30.380
We'll undo that change.

182

00:10:30.880  -->  00:10:33.680
All right, so in this long video, I've covered many additional

183

00:10:33.680  -->  00:10:36.880
less-used features of the try-with-resources statement,

184

00:10:36.880  -->  00:10:40.880
including accessing Suppressed exceptions, adding Suppressed exceptions,

185

00:10:41.130  -->  00:10:44.730
and using a resource in the try block instantiated previously.

186

00:10:45.330  -->  00:10:48.330
So, you should now be well-covered, overall with Exceptions,

187

00:10:48.830  -->  00:10:51.330
Testing invariants, Assertions, etc.

188

00:10:51.580  -->  00:10:54.580
for any questions that may come up in the exam.

189

00:10:55.080  -->  00:10:57.440
So, coming up next, we've got some quiz questions

190

00:10:57.440  -->  00:11:00.440
to test your knowledge of what you've learned in this section of the course.

191

00:11:00.440  -->  00:11:04.640
Then moving on to the section three, and there we'll be discussing interfaces.

192

00:11:05.240  -->  00:11:09.540
So, I'll see you in the upcoming quiz and then moving on to the interfaces section.
