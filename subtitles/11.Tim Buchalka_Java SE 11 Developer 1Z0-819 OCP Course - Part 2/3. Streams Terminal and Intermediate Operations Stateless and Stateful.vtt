WEBVTT
1
00:00:05.310 --> 00:00:12.120
Most instances require no special resource management do not need to be open or closed, except those

2
00:00:12.120 --> 00:00:16.260
that use an audio channel, which I'll be discussing later in the IO videos.

3
00:00:16.980 --> 00:00:21.810
At a minimum, a stream pipeline consists of a source and a terminal operation.

4
00:00:22.470 --> 00:00:25.170
I've already shown you examples of these in the stream.

5
00:00:25.170 --> 00:00:27.660
Create an example class in the last video.

6
00:00:28.850 --> 00:00:33.980
But let's look at a few more examples now, we need to create a new class in our streams project, call

7
00:00:33.980 --> 00:00:35.720
this one stream pipeline.

8
00:00:46.140 --> 00:00:52.020
Or so first, they ignore these unused imports and this unused Jetta because they were used later in

9
00:00:52.020 --> 00:00:52.500
the video.

10
00:00:53.080 --> 00:00:57.870
So this person class simply has a name attribute, as you can see there in line 16.

11
00:00:58.690 --> 00:01:03.680
It takes the name in the constructor and prints the name in the string method at the bottom of the screen.

12
00:01:04.080 --> 00:01:09.780
But note also that the constructor prints the name that'll help us determine when the person objects

13
00:01:09.780 --> 00:01:11.100
are actually instantiated.

14
00:01:11.500 --> 00:01:14.040
So scrolling down, we've got our stream popline class.

15
00:01:14.610 --> 00:01:15.810
That's got two methods.

16
00:01:16.290 --> 00:01:21.600
Plus one is to get new person method, which returns a new person randomly selecting a name.

17
00:01:22.410 --> 00:01:26.250
Then we've got our main method, which starts out with a single statement pipeline.

18
00:01:26.550 --> 00:01:32.850
The source is created and a terminal operation invoked on a single line, then got a multiple statement

19
00:01:32.850 --> 00:01:39.210
pipeline where the source is created using a supplier lambda expression, parsing it to get a new person

20
00:01:39.210 --> 00:01:39.520
method.

21
00:01:40.200 --> 00:01:46.440
So a process, other stuff in the fall on line fifty for this is demonstrating that pipeline processing

22
00:01:46.440 --> 00:01:47.340
has not yet occurred.

23
00:01:47.820 --> 00:01:52.430
It's growing a bit more and then adding an intermediate operation limit to the pipeline.

24
00:01:52.860 --> 00:01:58.860
We need this limit otherwise would have an infinite stream and it's a self referencing result to a current

25
00:01:58.860 --> 00:02:00.260
local variable person stream.

26
00:02:00.270 --> 00:02:06.780
In this case, an invocation of an intermediate operation does not actually execute the operation lazy

27
00:02:07.260 --> 00:02:10.180
and then processing other stuff in the second follow line.

28
00:02:10.200 --> 00:02:14.130
Sixty four demonstrating the pipeline processing is still not yet occurred.

29
00:02:14.550 --> 00:02:16.830
And finally, a line sixty nine.

30
00:02:17.100 --> 00:02:22.410
I execute the pipeline operations for the person stream when I fact the terminal operation for each

31
00:02:22.410 --> 00:02:25.590
method to print out the data from this.

32
00:02:28.400 --> 00:02:33.910
And there's the output of this output confirms that the stream to generate method is lazy.

33
00:02:34.340 --> 00:02:40.220
If you recall, I declared it before the loop and yet the method get new person instantiating new objects,

34
00:02:40.430 --> 00:02:43.010
which I can see because I print the person's name in.

35
00:02:43.010 --> 00:02:49.890
The constructor was not executed until later when I terminated the popline with the for each method.

36
00:02:50.420 --> 00:02:56.010
Note that when you run this, your person names may vary since the method get new person randomly assigned

37
00:02:56.030 --> 00:02:56.420
a name.

38
00:02:59.050 --> 00:03:05.830
The intermediate operations fall into one of two categories, stateless and stateful stateless operations

39
00:03:05.830 --> 00:03:12.250
such as filter and map, retain no state from one element to the next and can be processed independently.

40
00:03:12.730 --> 00:03:17.800
Stateful operations, on the other hand, such as distinct, unsorted, have an innate relationship

41
00:03:17.800 --> 00:03:20.380
with other elements and may maintain some state.

42
00:03:22.660 --> 00:03:27.550
The table below is a quick list of the intermediate operations they'll be looking at in detail in future

43
00:03:27.550 --> 00:03:28.060
videos.

44
00:03:28.550 --> 00:03:30.970
So let's look first at the statelets, intermediate operations.

45
00:03:31.010 --> 00:03:38.590
We've got Futter flat map, flat map to double, flat map to inturn flat map to long limit map, map

46
00:03:38.590 --> 00:03:42.390
to double map to it and mapped along a peak and skip.

47
00:03:42.990 --> 00:03:49.000
And in terms of stateful intermediate operations, distinct drop while introduced in Javani and we've

48
00:03:49.000 --> 00:03:53.050
got sorted and take while also introduced in Java nine.

49
00:03:53.890 --> 00:03:55.150
The swinging back to the code.

50
00:03:55.480 --> 00:03:56.980
Let's look at another example.

51
00:03:57.800 --> 00:04:04.240
Firstly, what we want to do is go back up to our person class, but we want to comment out the top

52
00:04:04.250 --> 00:04:05.740
Pritikin in our constructor.

53
00:04:06.430 --> 00:04:10.510
The reason is we're about to create a list of 20 persons and we want to see the statement in the output

54
00:04:10.510 --> 00:04:11.010
any longer.

55
00:04:11.600 --> 00:04:12.130
But what next?

56
00:04:12.130 --> 00:04:15.760
Let's go back to our main method in a patient code right at the bottom.

57
00:04:16.900 --> 00:04:19.210
Let's say we get name on line eighty seven.

58
00:04:19.460 --> 00:04:23.860
We're also using the list and a list of the inputs are being used.

59
00:04:25.040 --> 00:04:26.840
Let's go back to that cardigan that I posted in.

60
00:04:27.720 --> 00:04:33.660
So I'm creating a list of 20 randomly generated persons, so I'm using this stream so you can see a

61
00:04:33.660 --> 00:04:33.820
lot.

62
00:04:33.840 --> 00:04:39.000
Seventy eight to create a chained pipeline to count the number of gym person objects.

63
00:04:39.660 --> 00:04:45.810
I repeat the process, but without training this time starting on line eighty five, using statements

64
00:04:45.810 --> 00:04:51.690
to add intermediate operations to the code for both the trained pipeline and the not trained pipeline

65
00:04:51.690 --> 00:04:52.410
operations.

66
00:04:52.650 --> 00:04:58.050
Both use an intermediate operation called Filter and a terminal operation called Count.

67
00:04:58.650 --> 00:05:04.110
Don't worry too much yet about understanding them just how they're executed, both in the change pipeline

68
00:05:04.110 --> 00:05:06.660
and alternatively in the not changed version.

69
00:05:07.200 --> 00:05:08.190
Let's run this code now.

70
00:05:10.610 --> 00:05:14.480
And we can see the output at the bottom of the screen there, but your results might differ.

71
00:05:14.750 --> 00:05:19.220
You can see it doesn't matter, though, whether you change or not either method produces account of

72
00:05:19.220 --> 00:05:22.730
a particularly named person, Jim or Mary, in these examples.

73
00:05:23.490 --> 00:05:25.040
So let's play some more Codan here.

74
00:05:25.100 --> 00:05:25.820
Their main method.

75
00:05:26.280 --> 00:05:27.020
Let's run this.

76
00:05:32.920 --> 00:05:37.150
And you can see that we've got an illegal statement, exceptions stream has already been operated upon

77
00:05:37.150 --> 00:05:37.960
or closed.

78
00:05:38.820 --> 00:05:44.280
So you get this illegal stat exception message when you try to execute another terminal operation on

79
00:05:44.280 --> 00:05:49.470
a stream pipeline that had already been processed by a previous terminal operation, and that was the

80
00:05:49.470 --> 00:05:52.440
case in count in our not chained pipeline.

81
00:05:53.040 --> 00:05:53.850
So let's remove that.

82
00:05:57.690 --> 00:06:01.100
So again, and of course, running it should work again.

83
00:06:02.900 --> 00:06:04.400
There's a map put at the bottom of the screen.

84
00:06:08.650 --> 00:06:12.610
It's important to know which operations are intermediate and which are terminal.

85
00:06:13.120 --> 00:06:17.130
You'll be tested on what happens if operations are not in the correct order, etc..

86
00:06:17.680 --> 00:06:21.550
Next, it's important to know that some operations are short circuiting operations.

87
00:06:22.100 --> 00:06:27.910
An intermediate operation is short circuiting if when presented with input and input, it may produce

88
00:06:27.910 --> 00:06:29.370
a finite stream as a result.

89
00:06:29.680 --> 00:06:35.200
And we saw this when we used limit for online 61 earlier in this video.

90
00:06:37.380 --> 00:06:42.930
A terminal operation is short circuiting if when presented with infinite input, it might terminate

91
00:06:42.930 --> 00:06:49.740
in finite time, a short circuiting operation in a pipeline on an infinite stream is necessary, but

92
00:06:49.740 --> 00:06:54.780
may not always be sufficient to terminate the pipeline normally in finite time.

93
00:06:55.740 --> 00:06:59.760
So swinging back to the car, let's look at a short circuiting terminal operation, the posting some

94
00:06:59.760 --> 00:07:02.070
code here and our main method, there's the code.

95
00:07:03.820 --> 00:07:09.450
So here I create another infinite stream of person objects, but I do not use the limit operation,

96
00:07:09.760 --> 00:07:12.820
instead I match on the first aronne object.

97
00:07:13.090 --> 00:07:13.750
If you run this.

98
00:07:16.940 --> 00:07:20.880
So the put shown below and the execution completed successfully as a result.

99
00:07:21.710 --> 00:07:24.320
But what happens, never change to get a new person method.

100
00:07:25.100 --> 00:07:26.090
Let's have a go at doing that.

101
00:07:26.550 --> 00:07:27.400
We're going to change it.

102
00:07:28.560 --> 00:07:29.560
That currently looks like.

103
00:07:31.560 --> 00:07:32.600
You see there online.

104
00:07:32.610 --> 00:07:35.520
Thirty seven, we're going to replace those three lines in the method.

105
00:07:36.880 --> 00:07:40.350
So here have changed the parameter of next into three main.

106
00:07:40.350 --> 00:07:44.880
The code is never going to create a person named Aaron because obviously that's the fourth element.

107
00:07:45.690 --> 00:07:47.040
Now, if we run this code again.

108
00:07:51.270 --> 00:07:53.430
This time, executing the code does not terminate.

109
00:07:53.460 --> 00:07:57.840
You can say it's hanging there because the terminal operation never matches on an errant object.

110
00:08:00.220 --> 00:08:06.280
So this confirms the statement that a short circuiting operation in a pipeline on an infinite stream

111
00:08:06.280 --> 00:08:12.850
is necessary but may not always be sufficient to terminate the pipeline normally in finite time.

112
00:08:14.330 --> 00:08:15.500
Let's break out of this code.

113
00:08:17.940 --> 00:08:19.080
I will undo that change.

114
00:08:21.920 --> 00:08:23.210
Go back to that now, Wick's.

115
00:08:29.260 --> 00:08:34.630
So this video and the previous one, I've covered the following items using the stream static factory

116
00:08:34.630 --> 00:08:40.780
methods to create streams in many ways, as well as using the collection stream method on any implementing

117
00:08:40.780 --> 00:08:42.550
object of the collection interface.

118
00:08:43.060 --> 00:08:45.280
We covered the structure of a stream pipeline.

119
00:08:45.610 --> 00:08:47.320
We covered terminal operations.

120
00:08:47.710 --> 00:08:52.810
We also covered intermediate operations, both stateless and stateful, and showed how they're lazy

121
00:08:52.810 --> 00:08:56.140
and do not execute in to a terminal operation is invoked.

122
00:08:56.770 --> 00:08:59.800
The finally we went through an introduction to short circuiting operations.

123
00:09:00.460 --> 00:09:01.720
So let's end the video here.

124
00:09:01.720 --> 00:09:05.400
And in the next one I'll be discussing using lambda expressions with streams.

125
00:09:05.680 --> 00:09:06.850
See you in the next video.
