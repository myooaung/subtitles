WEBVTT
1
00:00:05.300 --> 00:00:11.450
So let's start by talking about restrictions on generic classes, the following table demonstrates invalid

2
00:00:11.450 --> 00:00:14.270
declarations of a generic class or some of its members.

3
00:00:14.840 --> 00:00:20.000
The first restriction is the generic class cannot extend Threlfall or any subclass of travel, including

4
00:00:20.000 --> 00:00:21.110
all areas and exceptions.

5
00:00:21.570 --> 00:00:26.210
And you can see some invalid code and the right hand side that device restrictions needed since the

6
00:00:26.210 --> 00:00:30.500
catch mechanism of the JVM works only with non generic classes.

7
00:00:30.920 --> 00:00:34.340
So not that your parameterize type can be any type of exception.

8
00:00:37.340 --> 00:00:41.520
A generic class cannot refer to a type parameter in any static member.

9
00:00:42.020 --> 00:00:47.240
This includes static fields, static methods and static initializes and against some example code.

10
00:00:47.240 --> 00:00:52.910
On the right hand side, there are generic classes typed during its declaration in instantiation at

11
00:00:52.910 --> 00:00:57.410
the time of a class initialization type would not be known in next.

12
00:00:57.440 --> 00:01:02.690
A generic class cannot refer to a type parameter in any static member of a nested type.

13
00:01:03.040 --> 00:01:04.910
Again, we've got some code on the right hand side there.

14
00:01:05.540 --> 00:01:11.360
As per the previous example, a generic class is typed to its declaration and instantiation.

15
00:01:11.660 --> 00:01:14.900
At the time of a class initialization, the type wouldn't be known.

16
00:01:17.090 --> 00:01:22.340
Now, in addition, there are coding restrictions when referencing top arguments in code, the following

17
00:01:22.340 --> 00:01:25.430
table lists the restriction and gives an example of the invalid code.

18
00:01:25.760 --> 00:01:30.890
The code result in compiler errors firstly cannot create instances of type parameters.

19
00:01:31.310 --> 00:01:32.960
You can say the invalid code there on the right.

20
00:01:35.350 --> 00:01:41.560
You cannot use instance of with specific type arguments, no wild cards and an example of the right

21
00:01:41.560 --> 00:01:43.020
hand side there of what's invalid.

22
00:01:43.360 --> 00:01:50.380
Third, cannot assign or cast to a generic with a top argument that is a super top of the objects declared

23
00:01:50.380 --> 00:01:51.220
type argument.

24
00:01:51.680 --> 00:01:57.220
And again, you can say the activity to the right hand side, you cannot instigate a rise of generic

25
00:01:57.220 --> 00:01:57.610
types.

26
00:01:58.040 --> 00:01:59.500
It is a collection instead.

27
00:02:01.910 --> 00:02:07.370
Next, you cannot overload a method where formal parameter types of overloaded methods arise to the

28
00:02:07.370 --> 00:02:08.360
same raw type.

29
00:02:08.870 --> 00:02:15.290
The last two can catch or throw objects declared as with type parameter, noting that the sample character

30
00:02:15.290 --> 00:02:20.120
is talking about the fact I'm going to be talking about that more later and last on top parameters cannot

31
00:02:20.120 --> 00:02:21.560
be primitive data types.

32
00:02:21.980 --> 00:02:24.130
We saw an example of that in the code in the last video.

33
00:02:25.110 --> 00:02:26.390
But let's bring back to the code.

34
00:02:26.960 --> 00:02:33.200
And actually, speaking of that code, I left the code broken with compiler error and was going to commit

35
00:02:33.200 --> 00:02:33.490
to that.

36
00:02:33.830 --> 00:02:34.750
So we don't get errors.

37
00:02:34.760 --> 00:02:38.570
When we got to run this nuclides, I'm going to create and we're going to get a new class now.

38
00:02:39.780 --> 00:02:41.910
Let's call this new costs, more generics.

39
00:02:47.070 --> 00:02:51.450
I didn't even know I was going to write a postcard in.

40
00:02:55.470 --> 00:03:00.280
All right, so there's the code, so specifically this code that contains the following, first, you've

41
00:03:00.280 --> 00:03:05.420
got a generic class they called another generic, which has two top parameters by convention.

42
00:03:05.460 --> 00:03:09.630
The first one is declared as T second is as an it would be unveiled.

43
00:03:10.440 --> 00:03:15.900
This class has two fields, which you can see their first object declared to be of type T and second

44
00:03:15.900 --> 00:03:18.070
object declared to be of type S..

45
00:03:18.540 --> 00:03:21.090
So Saqqara constructor there, that takes two arguments.

46
00:03:21.240 --> 00:03:25.080
One of type two and one of typist then sets those instanced variables.

47
00:03:25.630 --> 00:03:26.910
Also got two methods here.

48
00:03:28.450 --> 00:03:33.280
So of those two methods, we'll look at the one hundred thirty three first get super does not object

49
00:03:33.760 --> 00:03:38.710
that returns a class hierarchy descending from Javadoc Langdell object as a string array.

50
00:03:39.650 --> 00:03:45.920
Now, the other method get covered class, so this is actually comparing the class hierarchy of both

51
00:03:45.920 --> 00:03:50.210
first object and second object using the array stop mismatch method.

52
00:03:50.690 --> 00:03:55.880
If you need a recap of arrays, refer to my one zero eight one line, one course on you.

53
00:03:55.880 --> 00:04:01.760
To be specifically Section five arrays is comparing the class hierarchy, as I said, and ultimately

54
00:04:01.760 --> 00:04:04.100
determining that the common ancestor.

55
00:04:05.280 --> 00:04:10.340
Moving on down further, we've got another class here, Virginia generics, so could say we firstly

56
00:04:10.350 --> 00:04:13.890
creating some instances of various exceptions, they're starting on line 54.

57
00:04:15.110 --> 00:04:19.940
And then moving on, there are instantiating several another generic objects, topping each with different

58
00:04:19.940 --> 00:04:21.450
types, mostly exceptions.

59
00:04:21.480 --> 00:04:25.270
They're just basically showing generics in use from this code.

60
00:04:30.750 --> 00:04:35.910
So are the examples I've shown in this and the previous video, there were no restrictions on the type

61
00:04:35.910 --> 00:04:41.010
that could be used as a top argument to the generic class, but you can set restrictions on the types

62
00:04:41.010 --> 00:04:41.430
allowed.

63
00:04:41.820 --> 00:04:43.980
These restrictions are called bounded types.

64
00:04:44.640 --> 00:04:51.120
A generic class is restricted to one type of bound called an upper bound and specified is in the extends

65
00:04:51.120 --> 00:04:52.890
keyword in the top parameter section.

66
00:04:53.250 --> 00:04:58.980
The use of the word extends in the following declaration on screen restricts a type to a specific tight

67
00:04:58.980 --> 00:05:01.980
exception here or to a subtype of that specific type.

68
00:05:01.980 --> 00:05:06.960
The upper bound, your upper bound is a common ancestry of object types allowed.

69
00:05:07.440 --> 00:05:13.110
And if you don't declare an upper bound in a top parameter, it's implied to be javadoc an object.

70
00:05:13.650 --> 00:05:19.050
So looking at this code, public class, generic bounded and in angle brackets, t extends exception.

71
00:05:21.070 --> 00:05:26.020
So you could set an upper bound to only a single class using the extensor key word, you could set an

72
00:05:26.020 --> 00:05:32.680
upper bound to one or many interfaces using the extents keyword and delimiting the interfaces by the

73
00:05:32.680 --> 00:05:33.800
ampersand character.

74
00:05:34.210 --> 00:05:40.510
You can also set an upper bound to both class and one or more interfaces using the extends keyword and

75
00:05:40.510 --> 00:05:41.980
the epicenter to the list.

76
00:05:42.250 --> 00:05:46.480
However, the class must be declared first in the ampersand delimited list.

77
00:05:48.810 --> 00:05:55.120
So an example is both a class and two interfaces is shown on screen, the class number is listed first.

78
00:05:55.120 --> 00:05:59.100
So you can see we've got public class, generic bounded and brackets.

79
00:05:59.110 --> 00:06:04.800
We've got T extends number eight percent comparable er percent serializable.

80
00:06:05.280 --> 00:06:11.160
The advantage of specifying an upper bound, in addition to clarifying the top expected to be contained

81
00:06:11.160 --> 00:06:17.100
by a generic class, is that the methods of the upper bound types are available to you in the code of

82
00:06:17.100 --> 00:06:21.570
each generic class in the player here and in the next one will switch back to the idea.

83
00:06:21.570 --> 00:06:24.960
And we explore more of this in code to see you in the next video.
