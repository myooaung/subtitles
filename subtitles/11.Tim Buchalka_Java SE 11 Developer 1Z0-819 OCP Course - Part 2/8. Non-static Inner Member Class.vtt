WEBVTT
1

00:00:05.260  -->  00:00:08.990
All right, so let's turn our attention
now to a non-static inner member class.

2

00:00:09.460  -->  00:00:10.630
So, we need a new class for this.

3

00:00:10.639  -->  00:00:11.369
So, let's create it.

4

00:00:11.420  -->  00:00:12.940
We're still in our
Fundamentals project.

5

00:00:13.450  -->  00:00:17.830
I'm going to call this one
inner, as in the package

6

00:00:17.830  -->  00:00:20.390
name inner.EnclosingClass.

7

00:00:22.759  -->  00:00:26.380
That's obviously created a
package and I’m going to paste

8

00:00:26.380  -->  00:00:27.470
in the code we'll be using.

9

00:00:27.870  -->  00:00:32.550
All right, so this code
consists of a public class.

10

00:00:32.550  -->  00:00:35.269
You can see there, enclosing
class which is similar to the

11

00:00:35.269  -->  00:00:39.740
nest.EnclosingClass we saw in the
previous examples in previous videos.

12

00:00:40.060  -->  00:00:42.279
The only real change is,
I’ve removed all static

13

00:00:42.280  -->  00:00:43.410
members as you can see there.

14

00:00:45.910  -->  00:00:49.309
But in addition, I’ve declared an
inner member class and you can see

15

00:00:49.309  -->  00:00:52.819
that's called InnerMemberClass, which
has got an instance field as you

16

00:00:52.820  -->  00:00:54.450
can see there as well as a method.

17

00:00:55.030  -->  00:00:57.269
And I've got a test class
down here starting on line 39.

18

00:00:58.550  -->  00:01:00.589
At the moment, it's just got a
main method which just creates an

19

00:01:00.590  -->  00:01:05.290
instance of the enclosing class and
invokes the instance method on it.

20

00:01:05.290  -->  00:01:10.490
All right, so if we run this,
the output from this code, which

21

00:01:10.490  -->  00:01:13.100
again is calling a method on the
enclosing class which in turn

22

00:01:13.109  -->  00:01:16.200
invokes a method on the inner
class, so we'll have a look at that.

23

00:01:16.890  -->  00:01:17.850
doSomething on instance.

24

00:01:19.380  -->  00:01:22.260
You can see that's creating a new
instance of InnerMemberClass,

25

00:01:22.580  -->  00:01:27.639
encoding the .getInstanceName method,
which is that one there on line 29.

26

00:01:28.900  -->  00:01:31.980
It's pretty basic and that's the
jump-off point, the examples that

27

00:01:32.020  -->  00:01:33.100
are going to follow this now.

28

00:01:33.930  -->  00:01:37.650
Well, so let's add some more code and
add some more code to the main method.

29

00:01:39.679  -->  00:01:43.780
Paste that in and you can see that
the last statement doesn't compile

30

00:01:44.059  -->  00:01:47.289
because an attempt to instantiate
an object of the type of the

31

00:01:47.289  -->  00:01:48.550
inner member class doesn't work.

32

00:01:49.110  -->  00:01:52.289
This is because you cannot access
an inner member class without

33

00:01:52.300  -->  00:01:54.880
first having a reference to an
instance of the enclosing class.

34

00:01:56.360  -->  00:01:58.979
Now, we have an instance of
the enclosing class assigned

35

00:01:59.270  -->  00:02:02.890
to the local reference e, as
you can see there on line 42.

36

00:02:03.429  -->  00:02:05.970
So, let's try replacing that last
statement with the following.

37

00:02:06.680  -->  00:02:07.970
So, I'm just going to replace that.

38

00:02:11.340  -->  00:02:12.840
You can see that this
doesn't work either.

39

00:02:13.250  -->  00:02:15.920
We're trying to use
the local reference e.

40

00:02:16.650  -->  00:02:19.320
In fact, the way to instantiate
an inner class using an instance

41

00:02:19.340  -->  00:02:23.330
of the enclosing class from a
disassociated class is as follows.

42

00:02:23.330  -->  00:02:24.539
I'm just going to paste in the code.

43

00:02:25.759  -->  00:02:30.710
And you can see that that
compiled, the construct looks

44

00:02:30.710  -->  00:02:33.100
pretty weird if you haven't worked
within the classes very much.

45

00:02:33.520  -->  00:02:34.560
So what have I just done here.

46

00:02:35.280  -->  00:02:38.550
Well, I've created an instance of
the inner class, but it doesn't

47

00:02:38.550  -->  00:02:42.800
and cannot exist independently of
the instance of the enclosing class

48

00:02:43.070  -->  00:02:45.109
represented by the local variable e.

49

00:02:45.660  -->  00:02:49.450
So, I've used a new operator almost
like a method of the enclosing class.

50

00:02:50.099  -->  00:02:53.140
So, let's rework the code a bit
just to confirm this statement.

51

00:02:53.810  -->  00:02:56.310
So, what we're going to do,
we're going to add a constructor

52

00:02:56.310  -->  00:02:59.120
to our inner.EnclosingClass.
So, let's go back and do that.

53

00:03:00.129  -->  00:03:02.740
Up here, so we're going to add a
constructor to our enclosing class as

54

00:03:02.740  -->  00:03:05.609
I mentioned – inner.EnclosingClass,
inner being the package.

55

00:03:08.450  -->  00:03:11.160
So, you can see that in terms of the
constructor, we just pass a value

56

00:03:11.160  -->  00:03:12.640
to the enclosing class instance.

57

00:03:13.400  -->  00:03:14.580
Pretty straightforward.

58

00:03:14.589  -->  00:03:17.340
So, next what we're going to do is
going to add a method but we're going

59

00:03:17.340  -->  00:03:19.200
to add it to the inner member class.

60

00:03:19.200  -->  00:03:22.160
So, we're going to do that down here
and I'll add it down the bottom.

61

00:03:23.780  -->  00:03:24.530
Paste the code in.

62

00:03:26.130  -->  00:03:30.299
So, this code prints the enclosing
classes instance field outer name.

63

00:03:31.360  -->  00:03:33.980
Now, note that this is permitted
from the inner class, which is

64

00:03:33.990  -->  00:03:35.829
not true of a static nested class.

65

00:03:35.829  -->  00:03:39.690
We saw an error when we did that in a
previous video, right so now we've done

66

00:03:39.690  -->  00:03:43.290
that, you want to edit the main method
of the inner.TestingClosingClass.

67

00:03:44.380  -->  00:03:47.100
Specifically, up here, we need
to make a change there because

68

00:03:47.100  -->  00:03:48.330
we've got a compiler error there.

69

00:03:48.840  -->  00:03:52.120
We need to pass some text to the
constructor because obviously, we

70

00:03:52.120  -->  00:03:53.839
added a constructor with one argument.

71

00:03:54.149  -->  00:03:55.280
So, I'm just going to do that.

72

00:03:55.950  -->  00:03:58.070
Pass a string – e’s Instance.

73

00:04:00.100  -->  00:04:01.799
That satisfies the declaration.

74

00:04:02.510  -->  00:04:04.769
All right, so let's add some
code to test what we've done now.

75

00:04:05.219  -->  00:04:07.530
We're going to add this at
the bottom of our main method.

76

00:04:08.500  -->  00:04:11.669
Okay, so that's what
I've just pasted in.

77

00:04:12.369  -->  00:04:14.590
You can see we're using a local
variable referencing the inner member

78

00:04:14.590  -->  00:04:18.520
class to access the method on the
inner class on line 63,

79

00:04:18.520  -->  00:04:22.539
and we're creating another instance of the
enclosing class on line 66, then I'm

80

00:04:22.540  -->  00:04:25.760
declaring and assigning a variable
to the inner member class of the new

81

00:04:25.760  -->  00:04:30.180
instance that we created line 66,
but doing that assignment on line 70

82

00:04:30.480  -->  00:04:31.440
and then we're outputting it.

83

00:04:32.870  -->  00:04:40.760
So, if we run the code now, you
can see the output on screen now.

84

00:04:41.880  -->  00:04:47.719
Well, so if I pin two more lines now
to our main method, you notice what

85

00:04:47.719  -->  00:04:50.910
I’m trying to do there and we've
actually got errors on both lines.

86

00:04:51.320  -->  00:04:54.050
So, what's important here
again looking at e defined

87

00:04:54.120  -->  00:04:56.710
up there on line 52.

88

00:04:58.500  -->  00:05:02.139
So, what's important here on
line 73 and 74 is to remember

89

00:05:02.139  -->  00:05:05.289
that inner member class is a
member of the enclosing class.

90

00:05:05.549  -->  00:05:08.090
However, you can't refer to it
like you would have field on that

91

00:05:08.090  -->  00:05:12.150
class, instead, you must access an
instance of it either through some

92

00:05:12.160  -->  00:05:20.930
reference as I showed above or from
the enclosing class itself, which

93

00:05:20.930  -->  00:05:22.849
we'll demonstrate in the next video.

94

00:05:23.889  -->  00:05:26.680
So, let's end the video here and
I'll see you in the next one.
