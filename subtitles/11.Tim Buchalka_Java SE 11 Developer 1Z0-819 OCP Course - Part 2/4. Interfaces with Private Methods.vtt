WEBVTT
1

00:00:05.200  -->  00:00:08.900
Prior to Java 8, an interface never implemented code in a method.

2

00:00:09.400  -->  00:00:12.200
Java 8 introduced default and static methods,

3

00:00:12.200  -->  00:00:15.500
which were followed in a fairly quick succession in Java 9

4

00:00:15.500  -->  00:00:18.300
by private methods introduced on the interface.

5

00:00:18.700  -->  00:00:22.100
You can probably imagine scenarios during the implementation

6

00:00:22.100  -->  00:00:23.900
of default or static methods,

7

00:00:23.900  -->  00:00:27.600
where you'd like to create reusable units of code that are not public

8

00:00:27.600  -->  00:00:30.500
and just used in the context of the current interface.

9

00:00:30.900  -->  00:00:32.900
So, let's explore this in code.

10

00:00:33.700  -->  00:00:36.000
All right, so I'm going to create a new class here.

11

00:00:36.500  -->  00:00:37.900
We're going to call it Advisable.

12

00:00:44.200  -->  00:00:45.500
Okay, there's the code.

13

00:00:46.490  -->  00:00:48.850
All right, so we've got an interface there called advisable

14

00:00:48.850  -->  00:00:52.150
and it's there to support academic advisors at universities.

15

00:00:52.450  -->  00:00:54.950
It's got two enums, we've got a GradeLevel.

16

00:00:55.250  -->  00:00:56.950
We've also got an AcademicLevel.

17

00:00:57.950  -->  00:01:00.150
We've also got an abstract method there called advise.

18

00:01:00.650  -->  00:01:03.950
This is a method of course that all implementing classes must therefore override.

19

00:01:04.550  -->  00:01:06.750
Scrolling on further, we've got two default methods.

20

00:01:06.750  -->  00:01:10.350
Now, these methods as you'll see both repeat code in the switch statement

21

00:01:10.350  -->  00:01:12.350
to get a grade level code suffix,

22

00:01:12.650  -->  00:01:15.050
so the get requirements default method you can see there

23

00:01:15.550  -->  00:01:17.550
that returns an entire course outline.

24

00:01:19.050  -->  00:01:21.850
And scrolling down a bit further, we've got our get class default method

25

00:01:22.510  -->  00:01:24.710
and that returns a class name and ID.

26

00:01:25.590  -->  00:01:27.290
Now looking at that repeated code,

27

00:01:28.790  -->  00:01:31.690
makes the code look tedious and prior to Java 9.

28

00:01:31.690  -->  00:01:34.890
you would have created another default method that returned this data

29

00:01:34.890  -->  00:01:38.490
but that method would be available to any implementing class and maybe

30

00:01:38.490  -->  00:01:40.290
this would be an undesirable effect.

31

00:01:40.650  -->  00:01:43.950
Now, another option would have been wrapping the method in a nested class,

32

00:01:44.250  -->  00:01:45.250
so let's do that here.

33

00:01:45.850  -->  00:01:48.750
So, what I'm going to do is include some code in this interface

34

00:01:49.250  -->  00:01:52.800
that's a nested class, there's our nested class within our interface.

35

00:01:54.400  -->  00:01:58.200
Now, this is a bit better than having to put this code in an additional default method

36

00:01:58.500  -->  00:02:01.500
because I've encapsulated the get level code method

37

00:02:01.500  -->  00:02:03.500
in the nested class as you can see there,

38

00:02:04.000  -->  00:02:07.300
but the nested class itself is implicitly static and public

39

00:02:07.550  -->  00:02:09.550
because it's nested on the interface.

40

00:02:10.450  -->  00:02:11.810
So now that I've done that,

41

00:02:11.810  -->  00:02:15.610
what we can do is replace some code in our default method, so let's go back up and do that.

42

00:02:15.970  -->  00:02:17.570
We'll go up to get requirements first.

43

00:02:17.930  -->  00:02:21.230
What we're going to change is this switch statement here.

44

00:02:21.590  -->  00:02:25.590
Basically, everything from string level code equals until the end of the switch.

45

00:02:25.590  -->  00:02:29.190
I can replace that with this code now using the nested class,

46

00:02:30.290  -->  00:02:33.890
and technically that no longer applies, so I'll also delete that comment.

47

00:02:35.250  -->  00:02:39.450
That's the first one and also we're doing a similar thing down here for our level code.

48

00:02:40.350  -->  00:02:43.050
I'm going to do the same thing; I'm going to paste in the same block of code

49

00:02:43.050  -->  00:02:44.550
that's using our nested class.

50

00:02:44.910  -->  00:02:48.710
Difference here is instead of academic level [i],

51

00:02:49.110  -->  00:02:53.110
we don't need the [i] because the academic level is passed as you can see as

52

00:02:53.110  -->  00:02:55.110
an argument on line 48.

53

00:02:56.100  -->  00:02:57.460
All right, so that's working.

54

00:02:58.260  -->  00:03:01.260
Well at least at this stage, there's no compilation errors.

55

00:03:01.510  -->  00:03:04.870
So, what we're doing now is, we'll paste in another method

56

00:03:04.870  -->  00:03:08.230
which actually exercises the functionality defined

57

00:03:08.230  -->  00:03:10.530
on the advisable interface. i'm going to go down to the end and do that.

58

00:03:13.430  -->  00:03:14.930
Okay, we'll look at our code we pasted it in.

59

00:03:16.630  -->  00:03:20.630
You can see our class private examples implements our advisable interface,

60

00:03:21.230  -->  00:03:23.930
and it's actually got two methods, we'll come back to the main method.

61

00:03:23.930  -->  00:03:25.930
The other method is the advise method.

62

00:03:26.430  -->  00:03:30.420
This is a concrete implementation of the advisable’s interface,

63

00:03:30.420  -->  00:03:33.720
abstract advise method. So, basically overriding

64

00:03:33.720  -->  00:03:37.220
the advisable’s interfaces advise method and it's calling advisable's

65

00:03:37.220  -->  00:03:40.020
getRequirements default method as you can see there

66

00:03:40.020  -->  00:03:42.020
in the system.out.println line

67

00:03:42.820  -->  00:03:46.420
And getting back to our main class then or main function rather,

68

00:03:46.920  -->  00:03:49.020
this invokes the advise method twice

69

00:03:49.020  -->  00:03:53.020
and also calls getClass the default method on the advisable interface as well.

70

00:03:53.680  -->  00:03:54.680
So, let's run this now.

71

00:04:00.880  -->  00:04:01.880
And there's our output.

72

00:04:02.240  -->  00:04:05.940
So, basically, the code at this point is now working but looking at it,

73

00:04:06.540  -->  00:04:07.840
it's still fairly ugly.

74

00:04:08.340  -->  00:04:12.140
So, let's try something else. Let's actually try replacing the nested class

75

00:04:12.140  -->  00:04:14.440
with a simple private method in the interface.

76

00:04:15.540  -->  00:04:17.740
To do that, we're going to go back up to our interface,

77

00:04:19.140  -->  00:04:23.540
the change we're going to make is we're basically going to remove the class at the top here

78

00:04:26.540  -->  00:04:27.840
and down the bottom

79

00:04:29.200  -->  00:04:31.700
then,we'll just reformat the code

80

00:04:33.500  -->  00:04:36.500
and then we'll fix up the other errors that are still appearing as a result.

81

00:04:37.100  -->  00:04:39.600
So, basically, we come up here and we just remove the nested class

82

00:04:39.600  -->  00:04:41.900
name now because we're no longer using it to fix that error.

83

00:04:42.300  -->  00:04:45.300
We can find the other error over here and do the same thing.

84

00:04:48.200  -->  00:04:52.200
So, we're now using a private method on the interface instead of our nested class.

85

00:04:52.860  -->  00:04:56.860
All right, so let's run this to confirm that we've got the same results.

86

00:04:57.410  -->  00:05:00.210
You can see we've done just that; we've got exactly the same results

87

00:05:00.210  -->  00:05:02.870
with now using a private method on the interface.

88

00:05:03.470  -->  00:05:07.470
So, essentially the code with the private method executes as previously

89

00:05:07.470  -->  00:05:10.670
but the changes allowed the method now to be fully encapsulated

90

00:05:10.670  -->  00:05:14.270
without exposing an unnecessary public static nested class,

91

00:05:14.270  -->  00:05:15.270
and that's a good thing.

92

00:05:16.070  -->  00:05:18.870
All right, so let's end the video here and in the next one,

93

00:05:18.870  -->  00:05:22.670
I want to review how the types of interface methods work with each other.

94

00:05:23.330  -->  00:05:24.690
So, I will see you in the next video.
