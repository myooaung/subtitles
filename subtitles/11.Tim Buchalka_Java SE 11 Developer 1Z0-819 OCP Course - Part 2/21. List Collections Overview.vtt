WEBVTT
1
00:00:05.430 --> 00:00:09.960
So in the last few videos, we talked about the collection interface and one of the interfaces that

2
00:00:09.960 --> 00:00:16.270
extends it to set this video, we're going to look at another interface, the list for those of you

3
00:00:16.270 --> 00:00:20.760
who took my one zero eight one nine part one course, you know, that are discussed the list and array

4
00:00:20.760 --> 00:00:24.550
list thoroughly in Section 10 as part of the preparation for the exam.

5
00:00:25.320 --> 00:00:31.410
I'll review the list again more briefly here in the context of its relationship to the collection interface

6
00:00:31.620 --> 00:00:33.990
and other interfaces in the collections framework.

7
00:00:36.550 --> 00:00:42.100
So the features of a list are firstly that the list is ordered and allows positional indexed access,

8
00:00:42.550 --> 00:00:43.810
the index is zero based.

9
00:00:44.620 --> 00:00:50.380
A list typically allows duplicate elements of the list, typically allows null elements and usually

10
00:00:50.380 --> 00:00:52.030
more than one null element.

11
00:00:54.420 --> 00:00:59.790
List extends the collection interface, but specifies additional functionality, including the following

12
00:00:59.790 --> 00:01:01.080
index based methods.

13
00:01:02.070 --> 00:01:08.520
So first we've got to add there passing it and also element they are using that method without a specified

14
00:01:08.520 --> 00:01:14.130
index is an append by using it with an index as we're using it here, inserts the limit at the specified

15
00:01:14.130 --> 00:01:20.790
index, shifting existing list at or after the specified index to the next one was accurate at all.

16
00:01:21.210 --> 00:01:26.340
And similar to the ad, if you use error without a specified index, it depends all elements to the

17
00:01:26.340 --> 00:01:26.910
end of the list.

18
00:01:27.270 --> 00:01:32.850
But using it as we would here, passing it, index it and a collection, then the Arrow method will

19
00:01:32.850 --> 00:01:38.130
insert all the elements in the argument shifting existing list elements at or after the specified index

20
00:01:38.130 --> 00:01:39.300
to the next index.

21
00:01:40.210 --> 00:01:45.030
We've got to get with index as an argument and that retrieves the element at the specified index.

22
00:01:47.390 --> 00:01:53.000
You're going to sit in index and an element that replaces the element of the index with the element

23
00:01:53.000 --> 00:01:59.000
in the argument, you've got an index of putting an object that returns the index of the first position

24
00:01:59.000 --> 00:02:01.280
of the matching element past as the argument.

25
00:02:01.940 --> 00:02:07.760
We've got a last index of passing an object that returns the index of the last position of the matching

26
00:02:07.760 --> 00:02:09.590
element passed as the argument.

27
00:02:10.130 --> 00:02:15.920
What list iterator passing an INT index that returns a list iterator over the elements in this list

28
00:02:15.920 --> 00:02:22.760
in proper sequence, starting at the specified position in the list of sublist passing in from index

29
00:02:22.760 --> 00:02:28.430
and another meant to index that returns a view, not a new list of the portion of this list between

30
00:02:28.430 --> 00:02:32.570
the specified from index inclusive in two index exclusive.

31
00:02:35.150 --> 00:02:37.590
Moving on list also contains these methods.

32
00:02:37.610 --> 00:02:43.250
We've got a thought passing a cooperator, this resource at list according to the order induced by the

33
00:02:43.250 --> 00:02:44.330
specified comparator.

34
00:02:44.690 --> 00:02:49.850
We've got a two or right method which returns an array object array containing all elements in the list

35
00:02:49.850 --> 00:02:56.600
in a proper sequence from first to last element, and to array a tray that returns an array containing

36
00:02:56.600 --> 00:03:02.170
all elements in the list in proper sequence from first to last element and the runtime top of the return

37
00:03:02.180 --> 00:03:04.160
arrays that of the specified array.

38
00:03:07.070 --> 00:03:09.530
And also listen to static factory methods.

39
00:03:09.890 --> 00:03:13.700
We've got a copy of putting a collection, this takes the collection and returns.

40
00:03:13.700 --> 00:03:20.150
And on modifiable list we've got an overloaded list of metadata to accept, comma delimited lists of

41
00:03:20.150 --> 00:03:23.990
elements in a document and returns and modify the list.

42
00:03:24.890 --> 00:03:28.180
The two factory methods in the table above have the following features in common.

43
00:03:28.760 --> 00:03:30.860
Firstly, they return on modifiable list.

44
00:03:31.250 --> 00:03:36.830
Elements cannot be added, removed or replaced and trying to do so because an unsupported operation

45
00:03:36.830 --> 00:03:37.800
exception to be thrown.

46
00:03:38.600 --> 00:03:44.900
However, if it contained elements of themselves mutable, this may cause the lists content to appear

47
00:03:44.900 --> 00:03:45.470
to change.

48
00:03:46.540 --> 00:03:51.730
The second feature in common is passing the elements as part of the argument or arguments in Lyster

49
00:03:51.730 --> 00:03:57.440
of will result in an nail pointer exception as well, passing a collection containing all elements to

50
00:03:57.440 --> 00:03:58.600
the list, a copy of Method.

51
00:03:58.780 --> 00:04:03.880
And thirdly, the order of elements in the return list is the same as the order of the provided arguments

52
00:04:04.330 --> 00:04:06.510
or of the elements in the provided collection.

53
00:04:09.020 --> 00:04:14.660
A realist and legalist are two of the most common classes which implement the lowest interface, a linked

54
00:04:14.660 --> 00:04:19.280
list is a doubly linked list, implementation of list and cue operations.

55
00:04:19.280 --> 00:04:24.260
That index into a linked list will traverse the list from the beginning of the end, whichever is closer

56
00:04:24.260 --> 00:04:25.470
to the specified index.

57
00:04:26.450 --> 00:04:26.750
All right.

58
00:04:26.750 --> 00:04:31.670
With that out of the way in, the next video will swing over and start looking at some of this in code.

59
00:04:32.000 --> 00:04:33.050
See you in the next video.
