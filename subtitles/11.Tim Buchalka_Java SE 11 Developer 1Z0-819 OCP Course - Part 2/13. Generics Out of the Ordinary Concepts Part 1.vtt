WEBVTT
1
00:00:05.360 --> 00:00:11.720
In this video, I want to discuss inheritance with generics and top parameters, so it's very important

2
00:00:11.840 --> 00:00:17.540
to grasp this concept because you'll see it played out in code segments of various forms, in exam questions.

3
00:00:18.320 --> 00:00:23.270
So it can be said that an integer is a number because an integer is a subtype of no.

4
00:00:23.930 --> 00:00:29.870
It does not, however, mean that a generic class of integers so that's integer in brackets is a subtype

5
00:00:30.110 --> 00:00:33.500
of a generic class of no with no Renagel brackets.

6
00:00:33.800 --> 00:00:35.350
So in fact, the opposite is true.

7
00:00:35.870 --> 00:00:41.720
The generic class of integer, again with indeterminable brackets, is not a subtype of generic class

8
00:00:41.720 --> 00:00:46.850
of no number in brackets, regardless of whether or not integer and number are related.

9
00:00:47.600 --> 00:00:51.260
Generic class is a container for any specified element.

10
00:00:51.770 --> 00:00:56.780
A container of one element cannot be said to be the same as a container of another element, only that

11
00:00:56.780 --> 00:01:00.140
they contain any type or structure is the feature in common.

12
00:01:02.620 --> 00:01:06.760
Please make this clear, I consider this following table we've got to type, whether it's a subtype

13
00:01:06.760 --> 00:01:08.530
of and whether it's not a subtype.

14
00:01:09.100 --> 00:01:10.810
So the first example there is Interchurch.

15
00:01:11.230 --> 00:01:15.550
Well, that's a subtype of no object moving on to a list of integers.

16
00:01:15.550 --> 00:01:16.760
So into two brackets.

17
00:01:17.080 --> 00:01:21.970
Well, that is a subtype of object, but it's not a subtype of a list of numbers.

18
00:01:22.000 --> 00:01:29.800
So with no Eneko brackets and a list of integer, so integer and brackets is a subtype of a list of

19
00:01:29.800 --> 00:01:33.340
integer that's integer brackets as well as object.

20
00:01:33.640 --> 00:01:38.460
But it's not a subtype of an array list of number, again, with no Renagel brackets.

21
00:01:39.130 --> 00:01:42.310
In the last example, a list of arithmetic exception.

22
00:01:42.610 --> 00:01:45.790
So I guess the take exception in brackets is a subtype of object.

23
00:01:46.150 --> 00:01:51.250
But you can see there there's three examples where it's not a subtype of a list of Strobl exception

24
00:01:51.370 --> 00:01:52.600
and runtime exception.

25
00:01:54.730 --> 00:01:59.710
The rules of polymorphism, which are probably second nature to you, have to be given a second look

26
00:01:59.710 --> 00:02:03.390
when you're dealing with generics, but swing it back to our code.

27
00:02:03.700 --> 00:02:05.280
We're going to create a new class deal.

28
00:02:05.940 --> 00:02:07.480
We're going to call this generic inheritance.

29
00:02:07.480 --> 00:02:10.150
And of course, we're our generics and collections project.

30
00:02:22.630 --> 00:02:28.930
But so this class has got three static methods they're looking at right now, but the first one of the

31
00:02:28.930 --> 00:02:35.560
parameter of no, a second one with a perimeter of top of a list of numbers are no and brackets.

32
00:02:35.770 --> 00:02:41.980
And the third parameter with the perimeter of a list of integers that integer in angle brackets and

33
00:02:41.980 --> 00:02:43.300
moving on down to the main method.

34
00:02:44.270 --> 00:02:50.300
We're using an integer variable or assigning it to a number variable with down casting a number variable

35
00:02:50.300 --> 00:02:55.580
to an integer where it's no, the number of variable is assigned an integer that we're invoking a method

36
00:02:55.580 --> 00:02:57.110
that takes a number parameter.

37
00:02:57.740 --> 00:02:58.730
This code compiles.

38
00:02:58.730 --> 00:02:59.330
I'm going to run it.

39
00:03:00.470 --> 00:03:03.770
And we can see they are put down the bottom of the screen, there's no surprises here.

40
00:03:03.770 --> 00:03:06.950
It's basic inheritance features and polymorphism.

41
00:03:07.820 --> 00:03:10.330
Next we're going to do is a pen, some code to this method.

42
00:03:12.460 --> 00:03:18.010
So here I am, creating a generic array list typed to integer and attempting the same types of things

43
00:03:18.010 --> 00:03:24.370
I did previously, assigning, casting and passing the array list of integer or in a list of number

44
00:03:24.370 --> 00:03:28.270
has been declared the winner each instance they're starting on line forty five.

45
00:03:28.700 --> 00:03:31.480
We've got a compiler error, but each of them has got a different error.

46
00:03:32.050 --> 00:03:37.270
We have a look on line forty five looking for the right list of number and it's been provided with a

47
00:03:37.420 --> 00:03:38.080
list of integer.

48
00:03:38.850 --> 00:03:42.820
Forty eight inconvertible types current cast to the list of number.

49
00:03:42.820 --> 00:03:46.000
Total list of integer and the last one line fifty two.

50
00:03:47.020 --> 00:03:52.060
The quiet type is the relative number and found an array list of integer safer than the three different

51
00:03:52.060 --> 00:03:52.390
errors.

52
00:03:52.510 --> 00:03:53.770
The conclusion is the same.

53
00:03:54.190 --> 00:03:59.470
An array list of integer integer Renagel brackets cannot be used in place of an array list of number.

54
00:03:59.770 --> 00:04:01.090
Again, the number in brackets.

55
00:04:01.330 --> 00:04:07.900
So generic wild cards are a way to inform the compiler that the parameterized generic class contains

56
00:04:07.900 --> 00:04:10.060
a valid relationship to the receiving element.

57
00:04:10.930 --> 00:04:16.750
So this case, I've got a local variable and a method parameter both declared as an unlisted number,

58
00:04:17.050 --> 00:04:22.030
which are called a square peg, where I'm trying to stuff it into the list of integer, the round hole

59
00:04:22.720 --> 00:04:23.920
and hits, we're getting errors.

60
00:04:24.590 --> 00:04:25.740
So let's make a change here.

61
00:04:26.580 --> 00:04:31.000
Going to change this line along forty four and forty five and replace that with this code.

62
00:04:32.150 --> 00:04:38.870
So what I've done here is added a wildcard with an upper bound, meaning that now any Israelis containing

63
00:04:38.870 --> 00:04:42.670
a class that is a number can be assigned to this variable.

64
00:04:43.820 --> 00:04:49.130
Now, that removed one Karpal error, but I still have an error on the invocation of method two in this

65
00:04:49.130 --> 00:04:51.440
code is hardly a line 53.

66
00:04:52.280 --> 00:04:53.900
So I'm going to alter method two.

67
00:04:54.020 --> 00:04:55.580
So we're going to get back up to method to.

68
00:04:57.710 --> 00:05:01.070
Because his definition, they're on line 18, they're going to change that.

69
00:05:02.010 --> 00:05:02.940
To the following code.

70
00:05:04.240 --> 00:05:09.520
So what I've done is the same thing with a method parameter as I did with the local variable declaration,

71
00:05:09.820 --> 00:05:15.060
I'm declaring that the method can accept an array list containing any type of no object.

72
00:05:15.550 --> 00:05:20.170
And obviously, if we go back down and look at our main method, we could see the indication lot of

73
00:05:20.170 --> 00:05:21.780
54 is now valid.

74
00:05:21.790 --> 00:05:24.760
There's no compiler errors and I can run the code.

75
00:05:26.030 --> 00:05:27.980
And things now work as expected.

76
00:05:29.570 --> 00:05:32.510
So continuing on, let's play some more cards now into our mind, mythic.

77
00:05:34.550 --> 00:05:41.210
So with this code, I'm assigning it a list of integer to a list of integer casting, a list of integer

78
00:05:41.240 --> 00:05:47.240
to array list of integer, knowing that my variable house is an array of integer and I pass an array

79
00:05:47.240 --> 00:05:51.410
list of related to a method with a parameter is declared as a list of integer.

80
00:05:52.040 --> 00:05:55.100
You can see we've got no compilation errors if I run this card now.

81
00:05:56.290 --> 00:05:57.370
You can say that it's worked.

82
00:05:58.280 --> 00:06:04.550
The terms that are released of Integer, so ed and brackets is a valid subtype for a list of integer.

83
00:06:05.280 --> 00:06:06.470
So let's end the video here.

84
00:06:06.750 --> 00:06:09.790
And in the next one, I want to start looking at standard naming conventions.

85
00:06:10.100 --> 00:06:11.210
See you in the next video.
