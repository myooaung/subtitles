WEBVTT
1
00:00:05.320 --> 00:00:10.570
In this video, I first want to give the stream builder interface another look, I'm not sure if it's

2
00:00:10.570 --> 00:00:14.490
widely used and therefore could easily trip you up on an exam question.

3
00:00:15.340 --> 00:00:22.360
Builder is a generic interface to clear on stream that extends to the consumer interface it inherits

4
00:00:22.360 --> 00:00:28.110
the except abstract method has its own builder abstract method and implements one default method.

5
00:00:28.810 --> 00:00:31.180
The default method is declared as shown here.

6
00:00:31.600 --> 00:00:34.600
You can see this method is self referencing, returning this.

7
00:00:36.920 --> 00:00:42.140
The abstract build method is declared, as shown is they've got a stream of type T being returned from

8
00:00:42.140 --> 00:00:48.410
the build method, so you get a builder from the stream static factory method stream builder and its

9
00:00:48.410 --> 00:00:55.160
API is shown below sea level, a static to an angle brackets streambed, a builder with ten angle brackets.

10
00:00:55.340 --> 00:00:57.320
Then the method name itself, which is builder.

11
00:00:58.270 --> 00:01:01.270
An object that implements the streambed puru is mutable.

12
00:01:03.510 --> 00:01:09.660
Per the travel documentation and only on screen, a stream builder has a life cycle which starts in

13
00:01:09.660 --> 00:01:16.320
a building phase during which elements can be added and then transitions to a built phase after which

14
00:01:16.320 --> 00:01:17.520
elements may not be added.

15
00:01:18.030 --> 00:01:23.850
The build phase begins when the build method is called, which creates an ordered stream whose elements

16
00:01:23.850 --> 00:01:30.390
are the elements that were added to the stream builder in the order they are added back to the code.

17
00:01:30.870 --> 00:01:34.740
Let's create another class in our strange project because this one builder extras.

18
00:01:41.970 --> 00:01:43.030
I the in.

19
00:01:46.730 --> 00:01:53.450
But so this car start off by creating a local variable of type streambed up builder now could have created

20
00:01:53.450 --> 00:01:54.710
a raw type variable.

21
00:01:54.980 --> 00:01:59.900
But in this instance, I'm declaring the builder with the top string because effectively I want to build

22
00:01:59.900 --> 00:02:01.730
a stream of top string.

23
00:02:02.510 --> 00:02:08.720
I then use to build or add method to add three elements in this first instance or redesign the result

24
00:02:08.720 --> 00:02:10.720
of the method to the builder reference.

25
00:02:11.030 --> 00:02:16.730
But although you can do this, it is unnecessary since the builder object is mutable like a string builder,

26
00:02:16.730 --> 00:02:22.520
for example, as opposed to a string whose method results need to be assigned to another string reference

27
00:02:23.450 --> 00:02:29.390
before we then execute the build method, assigning it to a stream of top string and then use the stream

28
00:02:29.390 --> 00:02:30.470
to print out the elements.

29
00:02:31.190 --> 00:02:31.880
Let's run this.

30
00:02:33.760 --> 00:02:39.670
And you can see the airport shows our three elements in the order that they were added to, this all

31
00:02:39.670 --> 00:02:41.460
seems pretty straightforward so far.

32
00:02:41.620 --> 00:02:43.450
But let's continue first.

33
00:02:43.450 --> 00:02:44.440
Let's add another statement.

34
00:02:44.800 --> 00:02:47.490
We'll add this one after the build out Red Sea.

35
00:02:47.590 --> 00:02:52.750
So I added after a night, you could say that by doing that, I've introduced to compile time error.

36
00:02:53.720 --> 00:02:59.630
Required string provided, but it is important to know that if you've taught your builder, as I've

37
00:02:59.660 --> 00:03:03.890
done about online 15, then you get the benefits of compile time checking.

38
00:03:03.920 --> 00:03:04.700
So let's undo that.

39
00:03:06.600 --> 00:03:13.050
Next, let's go down to the last line here and paste in this code that this code compiles.

40
00:03:13.410 --> 00:03:16.230
But if I run it or form that, it throws an exception.

41
00:03:18.650 --> 00:03:24.270
You can see the exception there, illegal state exception, once you invoke the build method, as we've

42
00:03:24.270 --> 00:03:28.490
already done online 20, it can no longer add elements to build up.

43
00:03:28.920 --> 00:03:30.300
So I'm going to do that last line again.

44
00:03:31.830 --> 00:03:34.870
So let's look at a variation of using the builder method.

45
00:03:35.430 --> 00:03:36.840
Perhaps I'm going to pay some in.

46
00:03:38.670 --> 00:03:44.670
In this instance, I'm using a rope order and you can see that I'm able to add both a String A as well

47
00:03:44.670 --> 00:03:46.590
as an object online 26.

48
00:03:47.260 --> 00:03:49.890
So the code compiles if we run it.

49
00:03:53.740 --> 00:03:57.460
We say that it executes as well and there's no output, so what's the lesson here?

50
00:03:58.480 --> 00:04:02.760
Well, let's actually do something with a stream S2 that was built using the builder.

51
00:04:03.190 --> 00:04:04.090
So that is code.

52
00:04:10.730 --> 00:04:15.740
So we executed the code reminds us why typing the border is important, although I'm able to assign

53
00:04:15.740 --> 00:04:21.560
the result a builder to build to a stream, top to string, which was set up a line twenty seven, an

54
00:04:21.560 --> 00:04:23.690
error won't actually occur until runtime.

55
00:04:24.050 --> 00:04:29.520
Well, we got the class caste exception so that I do not have the same problem if I use method training.

56
00:04:30.050 --> 00:04:34.860
Let's go back and have a look at that and replace that whole sequence of code there.

57
00:04:35.510 --> 00:04:41.090
So this makes the issue an integer added to what I expect to be a stream of string even harder to catch.

58
00:04:41.450 --> 00:04:46.340
So you can see what I've done there about a string, but also an int, which will be wrapped to an integer

59
00:04:46.340 --> 00:04:47.870
object if I run this.

60
00:04:51.900 --> 00:04:58.290
You can say that in this case, the code actually works fine, now you can top the people to here even

61
00:04:58.290 --> 00:04:59.220
in a chain like this.

62
00:04:59.490 --> 00:05:00.540
So let's alter this code.

63
00:05:00.540 --> 00:05:01.560
I'm going to commit that out.

64
00:05:02.700 --> 00:05:04.290
We'll paste in some additional code here.

65
00:05:04.650 --> 00:05:05.580
I can see the difference.

66
00:05:07.340 --> 00:05:12.440
Let's say that I've talked the data string and now we've got a compiler error when trying to add the

67
00:05:12.440 --> 00:05:15.920
intent of this chain record string provider with it.

68
00:05:16.640 --> 00:05:19.430
So let's change the tenter based at the code compiles and executes.

69
00:05:24.860 --> 00:05:25.850
And that works.

70
00:05:28.910 --> 00:05:34.280
Now, don't forget the topping on the right side of the assignment and assigning a torero type has the

71
00:05:34.280 --> 00:05:40.980
same effect as not typing at all, that's Penson code to a review that they're looking at this code.

72
00:05:41.150 --> 00:05:42.950
Can you guess what the output of the code is?

73
00:05:43.800 --> 00:05:44.690
Let's run it to see.

74
00:05:49.870 --> 00:05:53.350
Well, if he gets to class caste exception, he'll correct.

75
00:05:56.370 --> 00:06:01.830
So make sure when you review sample code on an exam question which uses Streambed Computer, that you

76
00:06:01.830 --> 00:06:04.970
examine it closely, there are two types that matter.

77
00:06:05.520 --> 00:06:09.750
The builder type, either by typing the local variable is in the stream.

78
00:06:09.750 --> 00:06:17.070
The builder method result is assigned to or by typing the method invocation stream dot and the top brackets

79
00:06:17.070 --> 00:06:17.560
builder.

80
00:06:18.120 --> 00:06:24.720
If either of these is omitted, you won't get a compile time error, but you may get a class cast exception

81
00:06:24.720 --> 00:06:25.460
when executing.

82
00:06:26.070 --> 00:06:30.540
And remember, you cannot use the ADD method once you've invoked the build method.

83
00:06:30.780 --> 00:06:34.530
This produces an illegal state exception and not a compiler error.

84
00:06:35.490 --> 00:06:37.860
So let's revisit intermediate operations for a moment.

85
00:06:38.370 --> 00:06:44.640
And like an instance of BURA, which contains mutable data and whose ad operation returns itself reference

86
00:06:44.970 --> 00:06:48.390
a strange intermediate operations, return a new stream.

87
00:06:48.900 --> 00:06:50.700
Now, this is very sorrowing code.

88
00:06:51.300 --> 00:06:54.810
So did in your class for this book called This One Stream Extras.

89
00:07:06.360 --> 00:07:11.780
At first glance, you'd assume this card was simply print the numbers 10 and 20 each on its own line

90
00:07:12.300 --> 00:07:15.030
right now you do get a warning from intelligence.

91
00:07:17.070 --> 00:07:22.640
Without a doubt, limited is ignored, but let's ignore that you won't have your idea on the exam now

92
00:07:22.740 --> 00:07:25.200
executing this code actually gives us the following.

93
00:07:28.230 --> 00:07:33.180
So, in fact, it gives us an exception, a legal state exception to the actual error.

94
00:07:34.930 --> 00:07:37.300
Stream has already been operated upon or closed.

95
00:07:39.080 --> 00:07:41.270
It probably doesn't lend much clarity to what's wrong.

96
00:07:42.200 --> 00:07:43.450
Let's change some code here.

97
00:07:44.090 --> 00:07:50.570
Specifically, what I'm going to do is make a change on line 16 input stream equals stream limit to

98
00:07:50.670 --> 00:07:52.070
now if you run this.

99
00:07:55.020 --> 00:07:58.650
All is right in the world and the output is the result you expected it to be.

100
00:08:01.470 --> 00:08:07.260
Again, on the exam review closely the invocation of intermediate operations on a stream that are not

101
00:08:07.260 --> 00:08:13.560
part of a chain, if the intermediate operation is not being assigned back to the original stream reference,

102
00:08:13.800 --> 00:08:18.750
an exception will be thrown for any other operation on the same stream reference.

103
00:08:19.460 --> 00:08:19.540
Right.

104
00:08:19.630 --> 00:08:20.780
So finish the video here.

105
00:08:21.090 --> 00:08:24.360
And in the next one, let's look at the concat method on stream.

106
00:08:24.870 --> 00:08:26.100
See you in the next video.
