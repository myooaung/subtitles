WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.810
Hello there.

00:00:00.810 --> 00:00:03.680
And welcome back to this spring development course.

00:00:03.680 --> 00:00:05.780
So today we're gonna be working,

00:00:05.780 --> 00:00:09.870
going over how we can work with constructors in spring.

00:00:09.870 --> 00:00:12.630
So how can we call the constructor of a being Where to find?

00:00:12.630 --> 00:00:15.550
So before now,

00:00:15.550 --> 00:00:20.930
all we've really seen is how we can create a being without actually passing in any values

00:00:20.930 --> 00:00:24.870
or modifying the bean in any way that we're gonna go over today.

00:00:24.870 --> 00:00:27.190
You're gonna start with constructors.

00:00:27.190 --> 00:00:31.420
So this is just one of the ways that we can modify the bean so we can input some values

00:00:31.420 --> 00:00:33.150
which will then be assigned to the class.

00:00:33.150 --> 00:00:35.010
Look,

00:00:35.010 --> 00:00:35.450
it started.

00:00:35.450 --> 00:00:36.510
First of all,

00:00:36.510 --> 00:00:38.540
we're gonna go over some of the things that you've already done.

00:00:38.540 --> 00:00:42.270
Some of the sort of being attributes they were already gone over to,

00:00:42.270 --> 00:00:43.350
first of all of the class.

00:00:43.350 --> 00:00:45.360
So the class is,

00:00:45.360 --> 00:00:47.550
um,

00:00:47.550 --> 00:00:52.220
the attributes is mandatory and specifies the bean class to be used to create the beat.

00:00:52.220 --> 00:00:53.970
Just the class that we're gonna use.

00:00:53.970 --> 00:00:55.240
So in my case,

00:00:55.240 --> 00:01:02.140
I think it was calm dot my package dot point or something like that.

00:01:02.140 --> 00:01:03.950
Just the class location.

00:01:03.950 --> 00:01:05.450
Uh,

00:01:05.450 --> 00:01:08.160
then we'll have the name Theatric Butte.

00:01:08.160 --> 00:01:13.620
specifies this attribute specifies the bean identify are uniquely in XML based

00:01:13.620 --> 00:01:14.910
configuration metadata.

00:01:14.910 --> 00:01:17.070
He used the i D and slash,

00:01:17.070 --> 00:01:20.800
or name attributes to specify their being identify IRS.

00:01:20.800 --> 00:01:22.670
Okay.

00:01:22.670 --> 00:01:23.810
And so those are the two,

00:01:23.810 --> 00:01:24.650
um,

00:01:24.650 --> 00:01:27.350
attribute that we've already sort of gone over.

00:01:27.350 --> 00:01:29.950
Now take a look at the next attributes.

00:01:29.950 --> 00:01:31.140
All right?

00:01:31.140 --> 00:01:32.150
There were constructors,

00:01:32.150 --> 00:01:36.400
so constructors will automatically be called when it being is created.

00:01:36.400 --> 00:01:38.630
So when our,

00:01:38.630 --> 00:01:46.290
um ah application context scans our XML file and created the beans,

00:01:46.290 --> 00:01:51.200
the constructor will automatically be called so you can take a look at exactly how this

00:01:51.200 --> 00:01:52.040
works in the code.

00:01:52.040 --> 00:01:52.990
All right,

00:01:52.990 --> 00:01:53.640
so here we go.

00:01:53.640 --> 00:01:56.860
So this is the exact same project that we worked on previously.

00:01:56.860 --> 00:01:58.230
So we have our palm,

00:01:58.230 --> 00:02:01.760
but XML file if it decides to open,

00:02:01.760 --> 00:02:02.540
there we go.

00:02:02.540 --> 00:02:03.940
We can take a look at it.

00:02:03.940 --> 00:02:04.450
As you can see,

00:02:04.450 --> 00:02:05.010
we have it.

00:02:05.010 --> 00:02:05.440
Um,

00:02:05.440 --> 00:02:06.250
Dependencies,

00:02:06.250 --> 00:02:09.380
our applications start just like before.

00:02:09.380 --> 00:02:12.980
And then our point class and our beans class.

00:02:12.980 --> 00:02:13.800
Now,

00:02:13.800 --> 00:02:16.610
let's have a constructive to the point that you're gonna be a default constructor.

00:02:16.610 --> 00:02:23.480
So which is do public point and inside the constructor,

00:02:23.480 --> 00:02:24.840
we're gonna print system.

00:02:24.840 --> 00:02:25.770
Don't out.

00:02:25.770 --> 00:02:31.030
Don print Ellen and let's just say,

00:02:31.030 --> 00:02:31.650
um,

00:02:31.650 --> 00:02:35.150
called constructor.

00:02:35.150 --> 00:02:37.700
Okay,

00:02:37.700 --> 00:02:38.270
there we go.

00:02:38.270 --> 00:02:45.480
So now let's run our application start class And there we go.

00:02:45.480 --> 00:02:47.550
As you can see it called the Constructors.

00:02:47.550 --> 00:02:49.600
We can take a look at exactly what spring does.

00:02:49.600 --> 00:02:53.200
So abstract application context that's preparing.

00:02:53.200 --> 00:02:54.950
Refresh then,

00:02:54.950 --> 00:03:00.550
is refreshing the Class Path XML application contact context of starting it up.

00:03:00.550 --> 00:03:02.730
Then it is,

00:03:02.730 --> 00:03:03.550
um,

00:03:03.550 --> 00:03:06.340
reading the loading,

00:03:06.340 --> 00:03:07.670
that being definitions.

00:03:07.670 --> 00:03:09.230
And then it's finally the loading,

00:03:09.230 --> 00:03:10.730
the being definitions from classes,

00:03:10.730 --> 00:03:12.260
just the date.

00:03:12.260 --> 00:03:13.160
And it's the info.

00:03:13.160 --> 00:03:13.430
Yes,

00:03:13.430 --> 00:03:18.160
Then just load the beans and then it calls the constructor when it loads the beans.

00:03:18.160 --> 00:03:19.960
All right,

00:03:19.960 --> 00:03:21.990
so that essentially how constructors work.

00:03:21.990 --> 00:03:24.450
But if we were to add something here,

00:03:24.450 --> 00:03:28.520
this is also is also needs to be noticed that if we add something here,

00:03:28.520 --> 00:03:29.350
there's a message.

00:03:29.350 --> 00:03:31.000
In this case,

00:03:31.000 --> 00:03:41.390
if we run this because you again error since it doesn't actually have we that we don't

00:03:41.390 --> 00:03:43.730
actually put anything into the constructor.

00:03:43.730 --> 00:03:44.550
And remember,

00:03:44.550 --> 00:03:46.980
if you in Java,

00:03:46.980 --> 00:03:50.310
if you don't have any constructor at all like this,

00:03:50.310 --> 00:03:54.850
then job will out automatically create a default constructor for you.

00:03:54.850 --> 00:03:58.250
So just it'll just automatically create this right here.

00:03:58.250 --> 00:04:04.120
But if you have a constructor with some message in there than the default constructor is

00:04:04.120 --> 00:04:05.770
overridden and it doesn't exist anymore.

00:04:05.770 --> 00:04:07.370
This is why we're getting the air.

00:04:07.370 --> 00:04:11.510
It's try and call a different constructor when the default constructor doesn't exist.

00:04:11.510 --> 00:04:14.220
So we can do this by just doing this.

00:04:14.220 --> 00:04:15.510
We can fix this.

00:04:15.510 --> 00:04:19.760
We could fix this by just doing this so we'll just add a default constructor.

00:04:19.760 --> 00:04:23.340
And now if you run the application start it runs.

00:04:23.340 --> 00:04:23.950
That a problem?

00:04:23.950 --> 00:04:32.690
So remember that if if you have a constructor with a some input into the constructor,

00:04:32.690 --> 00:04:37.250
then you must define the input in your beans dot XML file.

00:04:37.250 --> 00:04:38.630
How do we do that?

00:04:38.630 --> 00:04:39.020
Well,

00:04:39.020 --> 00:04:40.750
that's what we're gonna be going over right now.

00:04:40.750 --> 00:04:41.910
Alright.

00:04:41.910 --> 00:04:44.100
So back in our power point,

00:04:44.100 --> 00:04:45.660
we take a look at how this worked.

00:04:45.660 --> 00:04:46.540
So this did work,

00:04:46.540 --> 00:04:50.390
and now we can take a look at passing values into constructors.

00:04:50.390 --> 00:04:53.510
So in this case,

00:04:53.510 --> 00:04:54.170
we have,

00:04:54.170 --> 00:04:54.610
uh,

00:04:54.610 --> 00:04:56.220
we have changed at my class syllabus.

00:04:56.220 --> 00:04:57.130
We have our public,

00:04:57.130 --> 00:05:00.310
my class of the constructor string message and then into number.

00:05:00.310 --> 00:05:06.480
Then we print the message comma the number we can pass Values and Joe Constructor by using

00:05:06.480 --> 00:05:09.620
the constructor are val equals and in the value.

00:05:09.620 --> 00:05:10.830
If we do so,

00:05:10.830 --> 00:05:14.860
spring will cast the values accordingly and assigned them to the correct data types in the

00:05:14.860 --> 00:05:15.460
constructor.

00:05:15.460 --> 00:05:19.880
So you'll see in this case how we pass in hello and 2000.

00:05:19.880 --> 00:05:27.880
And it automatically understands that hello is a string and assigns it to message and 2000

00:05:27.880 --> 00:05:30.080
and is an integer and assigns it to number.

00:05:30.080 --> 00:05:34.090
So in result will get to hollow and message and then 2000 in number.

00:05:34.090 --> 00:05:36.480
So let's prove this to you.

00:05:36.480 --> 00:05:37.340
If you don't believe me,

00:05:37.340 --> 00:05:38.120
I'll prove it to you.

00:05:38.120 --> 00:05:41.390
I'll run spring right now and that will take a look at exactly how it works.

00:05:41.390 --> 00:05:42.580
Alright.

00:05:42.580 --> 00:05:44.470
So back in our point class,

00:05:44.470 --> 00:05:47.800
we're gonna do string message and then string.

00:05:47.800 --> 00:05:48.030
No,

00:05:48.030 --> 00:05:48.400
I'm sorry.

00:05:48.400 --> 00:05:50.060
It's gonna be int number.

00:05:50.060 --> 00:05:50.950
There we go.

00:05:50.950 --> 00:05:53.950
And now if we go ahead and do ah,

00:05:53.950 --> 00:05:57.640
message plus whoops.

00:05:57.640 --> 00:05:57.780
No,

00:05:57.780 --> 00:06:01.550
not equals plus comma plus number.

00:06:01.550 --> 00:06:04.020
There we go.

00:06:04.020 --> 00:06:06.370
And now we need to add the constructor arc.

00:06:06.370 --> 00:06:09.150
So we're gonna do is we're gonna do constructor.

00:06:09.150 --> 00:06:09.790
Argh!

00:06:09.790 --> 00:06:15.370
Value equals Hello.

00:06:15.370 --> 00:06:15.930
All right.

00:06:15.930 --> 00:06:17.000
And Then let's get rid of this.

00:06:17.000 --> 00:06:17.770
Whoops.

00:06:17.770 --> 00:06:19.800
Instead of doing disclosing,

00:06:19.800 --> 00:06:21.250
we could just do a slash here.

00:06:21.250 --> 00:06:21.900
There we go.

00:06:21.900 --> 00:06:24.150
And also the same exact thing.

00:06:24.150 --> 00:06:28.330
4 2000 2000.

00:06:28.330 --> 00:06:28.750
There we go.

00:06:28.750 --> 00:06:30.290
Okay.

00:06:30.290 --> 00:06:30.730
So,

00:06:30.730 --> 00:06:31.110
um,

00:06:31.110 --> 00:06:37.420
now will happen is spring will understand that Hello is a string and will assign hello to

00:06:37.420 --> 00:06:38.140
message.

00:06:38.140 --> 00:06:43.050
And then it will understand that 2000 is a number and assign it to number.

00:06:43.050 --> 00:06:46.340
So let's take a look at exactly how this works.

00:06:46.340 --> 00:06:48.450
And there we go.

00:06:48.450 --> 00:06:49.500
If you run our application,

00:06:49.500 --> 00:06:50.540
start class it prints.

00:06:50.540 --> 00:06:50.950
Hello,

00:06:50.950 --> 00:06:52.190
Comma 2000.

00:06:52.190 --> 00:06:54.300
So message.

00:06:54.300 --> 00:06:54.840
Hello.

00:06:54.840 --> 00:06:56.350
Common number 2000.

00:06:56.350 --> 00:06:57.700
There we go.

00:06:57.700 --> 00:06:58.250
Perfect.

00:06:58.250 --> 00:07:00.300
Of course,

00:07:00.300 --> 00:07:01.290
this presents a problem.

00:07:01.290 --> 00:07:02.130
What if we have,

00:07:02.130 --> 00:07:02.970
for example,

00:07:02.970 --> 00:07:09.550
double de Float F?

00:07:09.550 --> 00:07:12.730
How will this work now?

00:07:12.730 --> 00:07:24.560
So if we put 1.4 and in 12.5 and then DNF So how will it understand?

00:07:24.560 --> 00:07:26.370
Which is which?

00:07:26.370 --> 00:07:28.660
Save it and take a look.

00:07:28.660 --> 00:07:29.310
What happens?

00:07:29.310 --> 00:07:30.000
Well,

00:07:30.000 --> 00:07:30.500
in this case,

00:07:30.500 --> 00:07:33.850
actually just sort of randomly tried to do it.

00:07:33.850 --> 00:07:34.970
So in this case,

00:07:34.970 --> 00:07:36.420
it puts were not really randomly,

00:07:36.420 --> 00:07:38.760
so we can't 1.4 since the first constructor.

00:07:38.760 --> 00:07:39.150
We,

00:07:39.150 --> 00:07:40.100
um,

00:07:40.100 --> 00:07:40.900
director value.

00:07:40.900 --> 00:07:44.670
We assigned gets assigned into double into the first,

00:07:44.670 --> 00:07:47.210
the first constructor input that we specified.

00:07:47.210 --> 00:07:51.200
If we get the constructor argument,

00:07:51.200 --> 00:07:56.520
since we get 12.5 2nd then in that case it puts it into the second,

00:07:56.520 --> 00:07:57.020
um,

00:07:57.020 --> 00:07:59.080
constructor input that we specify.

00:07:59.080 --> 00:08:00.650
So he changed the order of them.

00:08:00.650 --> 00:08:02.910
In theory,

00:08:02.910 --> 00:08:05.810
we should be able to now get 12.5 common.

00:08:05.810 --> 00:08:06.650
1.4.

00:08:06.650 --> 00:08:08.240
Yeah,

00:08:08.240 --> 00:08:08.590
there we go.

00:08:08.590 --> 00:08:09.470
12.5 common,

00:08:09.470 --> 00:08:10.090
1.4.

00:08:10.090 --> 00:08:11.220
So in that case,

00:08:11.220 --> 00:08:14.690
it will just do it according to the order of the,

00:08:14.690 --> 00:08:15.100
you know,

00:08:15.100 --> 00:08:15.860
influence.

00:08:15.860 --> 00:08:17.080
That said,

00:08:17.080 --> 00:08:20.350
What if we really did want to specify the type?

00:08:20.350 --> 00:08:21.060
Well,

00:08:21.060 --> 00:08:21.780
we can do that.

00:08:21.780 --> 00:08:22.850
Let's see how we do that.

00:08:22.850 --> 00:08:23.680
All right,

00:08:23.680 --> 00:08:24.180
here we are.

00:08:24.180 --> 00:08:26.960
So let's find constructor variable types.

00:08:26.960 --> 00:08:31.300
So while spring will cast out data type correctly most of the time,

00:08:31.300 --> 00:08:34.230
if you want to be sure that everything will work correctly,

00:08:34.230 --> 00:08:35.950
we should specify the data types.

00:08:35.950 --> 00:08:38.010
What if we had afloat and a double,

00:08:38.010 --> 00:08:38.570
for example,

00:08:38.570 --> 00:08:38.870
we left.

00:08:38.870 --> 00:08:40.250
So we just what we just looked at.

00:08:40.250 --> 00:08:41.740
So here,

00:08:41.740 --> 00:08:43.190
essentially is how we specify it.

00:08:43.190 --> 00:08:44.650
So we can do type Whoops.

00:08:44.650 --> 00:08:45.030
Nope.

00:08:45.030 --> 00:08:49.030
Back type is equal to float or type is equal to double.

00:08:49.030 --> 00:08:51.350
If we are doing a string,

00:08:51.350 --> 00:08:51.620
though,

00:08:51.620 --> 00:08:54.250
you would have to do java dot lang dot string.

00:08:54.250 --> 00:08:55.100
Um,

00:08:55.100 --> 00:08:55.840
since it is ah,

00:08:55.840 --> 00:08:56.630
in that package.

00:08:56.630 --> 00:08:57.770
But other than that,

00:08:57.770 --> 00:08:58.420
you can go ahead.

00:08:58.420 --> 00:08:58.900
And,

00:08:58.900 --> 00:08:59.570
um,

00:08:59.570 --> 00:09:02.190
I signed int long,

00:09:02.190 --> 00:09:03.150
short.

00:09:03.150 --> 00:09:03.780
Ah,

00:09:03.780 --> 00:09:04.570
bullion.

00:09:04.570 --> 00:09:06.300
Ah,

00:09:06.300 --> 00:09:08.370
a any other data type.

00:09:08.370 --> 00:09:09.960
Except if it's a complex data type thing,

00:09:09.960 --> 00:09:11.470
you always need to assign the package.

00:09:11.470 --> 00:09:13.310
All right.

00:09:13.310 --> 00:09:13.900
And so,

00:09:13.900 --> 00:09:14.430
uh,

00:09:14.430 --> 00:09:16.150
let's take a look at how we can do this now.

00:09:16.150 --> 00:09:17.900
All right,

00:09:17.900 --> 00:09:18.530
here we are.

00:09:18.530 --> 00:09:21.530
So we're going to sign the 1.42 double,

00:09:21.530 --> 00:09:24.840
so type equals double,

00:09:24.840 --> 00:09:30.450
and then here type equals float.

00:09:30.450 --> 00:09:34.020
So it will sign 12.5 to float on 1.42 double.

00:09:34.020 --> 00:09:36.500
And so we should get 1.4 comma.

00:09:36.500 --> 00:09:37.300
12.5.

00:09:37.300 --> 00:09:38.390
Let's see if that works.

00:09:38.390 --> 00:09:41.690
There we go.

00:09:41.690 --> 00:09:42.630
1.4 common,

00:09:42.630 --> 00:09:43.400
12.5.

00:09:43.400 --> 00:09:45.190
So what exactly happens here?

00:09:45.190 --> 00:09:45.700
Well,

00:09:45.700 --> 00:09:46.120
first of all,

00:09:46.120 --> 00:09:47.320
it takes a look at this constructor.

00:09:47.320 --> 00:09:51.800
It sees that the argument is off type float and the values 12.5.

00:09:51.800 --> 00:09:55.610
Then it goes to our point class and its signs.

00:09:55.610 --> 00:09:59.350
It seems that since we have the float.

00:09:59.350 --> 00:10:02.200
We only have one float here and so end result.

00:10:02.200 --> 00:10:05.040
It assigns it to F if we had.

00:10:05.040 --> 00:10:06.510
Since we have double here,

00:10:06.510 --> 00:10:08.300
it assigns 1.42 double,

00:10:08.300 --> 00:10:09.490
since you only have one double.

00:10:09.490 --> 00:10:11.320
So that's actually how it works.

00:10:11.320 --> 00:10:11.930
Now,

00:10:11.930 --> 00:10:16.250
if you have multiple float variable that after that it would go ahead and just do it based

00:10:16.250 --> 00:10:19.530
on the frequencies,

00:10:19.530 --> 00:10:22.190
not frequent order of the Valley's best way of science.

00:10:22.190 --> 00:10:25.180
We've put Float F one here,

00:10:25.180 --> 00:10:29.550
and then we had another float here off that float.

00:10:29.550 --> 00:10:30.720
Then,

00:10:30.720 --> 00:10:31.150
in that case,

00:10:31.150 --> 00:10:33.930
it was just a sign it based on the 1st 1 So it'll assign list.

00:10:33.930 --> 00:10:34.860
Let's change this to,

00:10:34.860 --> 00:10:35.120
ah,

00:10:35.120 --> 00:10:37.760
seven point 7.8.

00:10:37.760 --> 00:10:43.550
It'll have signed 12.5 to the first float that it's eat and then 7.8 to the second floor

00:10:43.550 --> 00:10:44.000
top seats.

00:10:44.000 --> 00:10:44.950
That's how that works,

00:10:44.950 --> 00:10:48.110
of course.

00:10:48.110 --> 00:10:48.230
What?

00:10:48.230 --> 00:10:49.190
It wanted to change that.

00:10:49.190 --> 00:10:52.620
So what if you wanted toe specify the order as well?

00:10:52.620 --> 00:10:53.110
Well,

00:10:53.110 --> 00:10:54.690
that is the best way to do things.

00:10:54.690 --> 00:10:55.820
It's the sort of,

00:10:55.820 --> 00:10:56.680
um,

00:10:56.680 --> 00:10:59.060
the most reliable way of doing things,

00:10:59.060 --> 00:10:59.550
and,

00:10:59.550 --> 00:10:59.850
uh,

00:10:59.850 --> 00:11:00.990
it could never really fail.

00:11:00.990 --> 00:11:02.350
So let's take a look at how we can do that.

00:11:02.350 --> 00:11:03.130
All right,

00:11:03.130 --> 00:11:03.260
here,

00:11:03.260 --> 00:11:03.690
Rio.

00:11:03.690 --> 00:11:04.950
Here we are.

00:11:04.950 --> 00:11:05.840
That's fine,

00:11:05.840 --> 00:11:06.400
Constructor.

00:11:06.400 --> 00:11:07.280
Variable order.

00:11:07.280 --> 00:11:08.200
Of course,

00:11:08.200 --> 00:11:10.450
The most reliable way of passing values Talk constructor,

00:11:10.450 --> 00:11:14.010
is by specifying the order in which that value should be passed.

00:11:14.010 --> 00:11:17.910
So let's take a look at this instance here.

00:11:17.910 --> 00:11:18.990
So we have a float,

00:11:18.990 --> 00:11:20.560
my float and a double my don't.

00:11:20.560 --> 00:11:24.330
So then we have two constructions years,

00:11:24.330 --> 00:11:29.350
so we have 12.0 and then 2000 point to so this case will happen is,

00:11:29.350 --> 00:11:34.920
um the index sends its 1 12.2 will be assigned to double.

00:11:34.920 --> 00:11:40.650
And then since the index of 2000.20 it will be assigned to the very first constructor

00:11:40.650 --> 00:11:41.110
argument.

00:11:41.110 --> 00:11:41.660
So in this case,

00:11:41.660 --> 00:11:46.910
my float and so that it might float will be printed first.

00:11:46.910 --> 00:11:49.580
So we'll take a look at exactly how that works.

00:11:49.580 --> 00:11:50.680
All right,

00:11:50.680 --> 00:11:51.640
here we are in our code.

00:11:51.640 --> 00:11:54.010
So we're now we have double D and float apples.

00:11:54.010 --> 00:11:55.650
Go ahead and delete this float F one.

00:11:55.650 --> 00:12:00.750
So now we can go ahead and do just the constructor argument double flowed.

00:12:00.750 --> 00:12:01.500
So here,

00:12:01.500 --> 00:12:02.890
we're gonna do index.

00:12:02.890 --> 00:12:04.320
What's Nope.

00:12:04.320 --> 00:12:09.150
Give calf lock index equals one,

00:12:09.150 --> 00:12:14.840
and here will do index equals zero.

00:12:14.840 --> 00:12:16.900
There we go.

00:12:16.900 --> 00:12:19.850
So it takes the index on which this sort of works,

00:12:19.850 --> 00:12:26.830
the index on which we assigned our variables totally said the wrong thing there and ah,

00:12:26.830 --> 00:12:27.670
signs it correctly.

00:12:27.670 --> 00:12:28.090
So in this case,

00:12:28.090 --> 00:12:29.670
since we have index equal to one,

00:12:29.670 --> 00:12:32.620
it's gonna sign it to the second value,

00:12:32.620 --> 00:12:32.940
though Yes,

00:12:32.940 --> 00:12:33.290
signed.

00:12:33.290 --> 00:12:40.280
So if you go to point the second values the float F and so in result it should print 7.8

00:12:40.280 --> 00:12:40.770
seconds,

00:12:40.770 --> 00:12:42.220
and it's the second value.

00:12:42.220 --> 00:12:46.440
If since we assigned index 1.4,

00:12:46.440 --> 00:12:49.370
it'll print 1.4 1st So let's make your work.

00:12:49.370 --> 00:12:51.150
So it's front application context,

00:12:51.150 --> 00:12:54.540
and there we go.

00:12:54.540 --> 00:12:56.200
So you can see we get 1.4 comma.

00:12:56.200 --> 00:13:03.630
7.8 since it print 7.8 2nd and then 1.4 1st is we have zero here and there we go.

00:13:03.630 --> 00:13:06.230
That's really all you need to know about constructors.

00:13:06.230 --> 00:13:07.180
Now,

00:13:07.180 --> 00:13:07.700
of course,

00:13:07.700 --> 00:13:08.880
you may be wondering,

00:13:08.880 --> 00:13:11.280
How would we pass in something like,

00:13:11.280 --> 00:13:12.520
I don't know.

00:13:12.520 --> 00:13:16.350
Let's just say a complex object like another class.

00:13:16.350 --> 00:13:17.170
Well,

00:13:17.170 --> 00:13:20.190
for that we would have to use the ref tag and the ref tag.

00:13:20.190 --> 00:13:22.080
It sort of works a little bit differently.

00:13:22.080 --> 00:13:24.520
And it's generally a whole a different topic on its own.

00:13:24.520 --> 00:13:26.750
So we're gonna be going over that in the next lesson.

00:13:26.750 --> 00:13:28.040
So for now,

00:13:28.040 --> 00:13:33.590
it's going to create a very simple application together which will run and weaken so we can

00:13:33.590 --> 00:13:35.610
get an idea of exactly how this works.

00:13:35.610 --> 00:13:36.850
So,

00:13:36.850 --> 00:13:37.510
um yeah,

00:13:37.510 --> 00:13:38.070
let's get started.

00:13:38.070 --> 00:13:39.330
All right.

00:13:39.330 --> 00:13:40.020
So,

00:13:40.020 --> 00:13:40.580
together,

00:13:40.580 --> 00:13:43.520
what we're gonna be doing is going We're going to be creating a,

00:13:43.520 --> 00:13:45.150
um calculator.

00:13:45.150 --> 00:13:46.400
So there's a basic calculator,

00:13:46.400 --> 00:13:47.330
Adama,

00:13:47.330 --> 00:13:49.760
add minus divide and,

00:13:49.760 --> 00:13:50.050
um,

00:13:50.050 --> 00:13:52.340
multiple.

00:13:52.340 --> 00:13:52.890
There we go.

00:13:52.890 --> 00:13:53.690
Forgot?

00:13:53.690 --> 00:13:54.500
Forgot the,

00:13:54.500 --> 00:13:54.750
uh,

00:13:54.750 --> 00:13:56.040
the 4th 1 there.

00:13:56.040 --> 00:13:57.110
So do that.

00:13:57.110 --> 00:13:58.870
We're gonna need a calculator class.

00:13:58.870 --> 00:14:05.880
We're gonna do new class calculator Looks at a Quartermaine.

00:14:05.880 --> 00:14:07.800
All right,

00:14:07.800 --> 00:14:08.170
there we go.

00:14:08.170 --> 00:14:10.130
The calculated have four methods.

00:14:10.130 --> 00:14:12.180
So public avoid,

00:14:12.180 --> 00:14:13.710
actually,

00:14:13.710 --> 00:14:14.430
let's go to new.

00:14:14.430 --> 00:14:14.940
Um,

00:14:14.940 --> 00:14:21.440
and someone is gonna integer numb one and then integer numb to there we go public,

00:14:21.440 --> 00:14:23.170
avoid divide,

00:14:23.170 --> 00:14:28.600
and they're gonna You actually was gonna be int divide.

00:14:28.600 --> 00:14:29.950
Yeah.

00:14:29.950 --> 00:14:31.970
Return numb.

00:14:31.970 --> 00:14:33.880
One divided by them too.

00:14:33.880 --> 00:14:36.460
There we go.

00:14:36.460 --> 00:14:36.930
Uh,

00:14:36.930 --> 00:14:37.650
public,

00:14:37.650 --> 00:14:38.850
actually no school.

00:14:38.850 --> 00:14:41.250
It was making a double we're gonna do,

00:14:41.250 --> 00:14:41.770
um,

00:14:41.770 --> 00:14:45.150
double numb one.

00:14:45.150 --> 00:14:46.250
Since when?

00:14:46.250 --> 00:14:47.120
When you are dividing.

00:14:47.120 --> 00:14:49.590
It should give us a double most of time.

00:14:49.590 --> 00:14:50.130
Yeah,

00:14:50.130 --> 00:14:50.590
there we go.

00:14:50.590 --> 00:14:51.320
And they were going to do,

00:14:51.320 --> 00:14:51.850
um,

00:14:51.850 --> 00:15:05.150
public int multiply return numb one times numb to public.

00:15:05.150 --> 00:15:09.390
Beant ad return.

00:15:09.390 --> 00:15:11.360
Numb one plus numb to.

00:15:11.360 --> 00:15:13.170
And then finally,

00:15:13.170 --> 00:15:22.650
we're gonna do public int subtract return numb one minus two.

00:15:22.650 --> 00:15:25.560
Okay,

00:15:25.560 --> 00:15:27.300
They were going else create a constructor for it.

00:15:27.300 --> 00:15:30.710
So it's gonna be public calculator.

00:15:30.710 --> 00:15:33.270
All right,

00:15:33.270 --> 00:15:34.810
let's make these private as well,

00:15:34.810 --> 00:15:35.330
since,

00:15:35.330 --> 00:15:35.520
you know,

00:15:35.520 --> 00:15:36.250
encapsulation.

00:15:36.250 --> 00:15:37.910
There you go.

00:15:37.910 --> 00:15:42.730
Private calculator int num one int num,

00:15:42.730 --> 00:15:43.150
too.

00:15:43.150 --> 00:15:49.230
And then this dot numb one equal to number one in the whoops.

00:15:49.230 --> 00:15:49.480
Whoops.

00:15:49.480 --> 00:15:50.350
Know someone.

00:15:50.350 --> 00:15:54.250
This dot number two is equal to come to,

00:15:54.250 --> 00:15:55.880
and there we go.

00:15:55.880 --> 00:15:57.040
Okay.

00:15:57.040 --> 00:15:59.630
So now let's go ahead and do the same thing here.

00:15:59.630 --> 00:16:03.880
So we're going to find are being so being I d equals cowpoke.

00:16:03.880 --> 00:16:04.770
Okay.

00:16:04.770 --> 00:16:06.360
Class is going to be calm.

00:16:06.360 --> 00:16:11.340
Example p k g dot calculator.

00:16:11.340 --> 00:16:13.110
There we go.

00:16:13.110 --> 00:16:15.460
So that and then we're gonna pass into Bashar arguments.

00:16:15.460 --> 00:16:17.290
The index will be zero and one,

00:16:17.290 --> 00:16:19.800
and the first index is gonna be 100.

00:16:19.800 --> 00:16:21.950
And the second index is gonna be five.

00:16:21.950 --> 00:16:23.800
All right,

00:16:23.800 --> 00:16:24.350
And there we go.

00:16:24.350 --> 00:16:25.570
So now it's going to test this out.

00:16:25.570 --> 00:16:28.100
An application start we're going to do,

00:16:28.100 --> 00:16:29.150
um,

00:16:29.150 --> 00:16:42.450
which they calculator cow equals application context dot Get bean on the I.

00:16:42.450 --> 00:16:42.860
D.

00:16:42.860 --> 00:16:43.530
Is.

00:16:43.530 --> 00:16:45.540
What is the I d.

00:16:45.540 --> 00:16:47.770
Um,

00:16:47.770 --> 00:16:51.570
There we go.

00:16:51.570 --> 00:16:51.930
Talc.

00:16:51.930 --> 00:16:52.860
Totally forgot about that.

00:16:52.860 --> 00:16:53.150
There.

00:16:53.150 --> 00:16:54.180
Okay.

00:16:54.180 --> 00:16:55.560
And so now we can pass in Calcutta.

00:16:55.560 --> 00:16:55.910
All right,

00:16:55.910 --> 00:16:57.360
and then we need to cast it accordingly.

00:16:57.360 --> 00:16:58.020
Since in return,

00:16:58.020 --> 00:17:01.010
it's an object CAFTA calculated.

00:17:01.010 --> 00:17:01.620
There we go.

00:17:01.620 --> 00:17:04.190
And now we can do print whoops.

00:17:04.190 --> 00:17:04.580
Nope.

00:17:04.580 --> 00:17:05.880
System dot Out.

00:17:05.880 --> 00:17:07.000
Don't print Ellen.

00:17:07.000 --> 00:17:08.690
Cal.

00:17:08.690 --> 00:17:11.500
Don't add all right there ago.

00:17:11.500 --> 00:17:11.780
And so,

00:17:11.780 --> 00:17:12.250
in theory,

00:17:12.250 --> 00:17:14.870
this should actually wants to do it for ad divide,

00:17:14.870 --> 00:17:15.780
Multiply and subtract it.

00:17:15.780 --> 00:17:26.620
Calculon Ad divide Dr Multiply and then Dotson dot subtract.

00:17:26.620 --> 00:17:27.310
There we go.

00:17:27.310 --> 00:17:28.140
All right.

00:17:28.140 --> 00:17:30.810
And so this should predict Prentice 105 for ad.

00:17:30.810 --> 00:17:31.850
Um,

00:17:31.850 --> 00:17:32.430
let's see,

00:17:32.430 --> 00:17:33.620
what will we devised?

00:17:33.620 --> 00:17:36.220
100 Divided by five is gonna be 24.

00:17:36.220 --> 00:17:43.770
Divide 100 times five is going to be 500 for multiply and then 95 for some tracks.

00:17:43.770 --> 00:17:48.440
Let's make sure that works and there goes the first of all it.

00:17:48.440 --> 00:17:48.700
Actually,

00:17:48.700 --> 00:17:51.720
prints are constructor for this being being here.

00:17:51.720 --> 00:17:52.660
There we go.

00:17:52.660 --> 00:17:54.080
Um,

00:17:54.080 --> 00:18:01.370
for this one here point and then it goes ahead and creates this sort of calculator class

00:18:01.370 --> 00:18:02.060
assigns.

00:18:02.060 --> 00:18:03.000
Ah,

00:18:03.000 --> 00:18:04.990
102 x.

00:18:04.990 --> 00:18:05.980
Whoops.

00:18:05.980 --> 00:18:06.230
Nope.

00:18:06.230 --> 00:18:07.170
This is the wrong ones.

00:18:07.170 --> 00:18:08.220
Point reached calculator.

00:18:08.220 --> 00:18:18.270
I signs 100 to number one and then five to numb to since five is after since five since

00:18:18.270 --> 00:18:22.170
numb to is the second index off the constructor values.

00:18:22.170 --> 00:18:25.930
And I'm one of the first index since it first and then come to the second index since it is

00:18:25.930 --> 00:18:26.410
second.

00:18:26.410 --> 00:18:28.160
And so it assigned accordingly.

00:18:28.160 --> 00:18:30.710
Then it divides.

00:18:30.710 --> 00:18:32.190
Um no.

00:18:32.190 --> 00:18:36.300
Then it adds number one plus number two because 105.

00:18:36.300 --> 00:18:37.920
Then it divides number one,

00:18:37.920 --> 00:18:43.180
divided by number two's 100 divided by 5 20 then and multiplies 500.

00:18:43.180 --> 00:18:46.860
And then it subtracts 95 and there goes.

00:18:46.860 --> 00:18:51.760
That is a very simple application that utilizes passing values into a constructor.

00:18:51.760 --> 00:18:52.940
All right,

00:18:52.940 --> 00:18:54.260
so now let's find some homework.

00:18:54.260 --> 00:18:54.920
All right,

00:18:54.920 --> 00:18:55.350
here we go.

00:18:55.350 --> 00:19:01.290
So the homework is to create an animal being with a double weight afloat height and a

00:19:01.290 --> 00:19:02.710
string species name,

00:19:02.710 --> 00:19:09.190
then create a constructor that will assign the correct values using a spring being

00:19:09.190 --> 00:19:10.760
definition xml file.

00:19:10.760 --> 00:19:14.870
So pretty simple.

00:19:14.870 --> 00:19:17.650
We've essentially done the exact same thing just now,

00:19:17.650 --> 00:19:20.570
except you just need to figure out how I could do with strings.

00:19:20.570 --> 00:19:22.030
But as I said it just the same exact thing.

00:19:22.030 --> 00:19:24.370
Except instead of having double or float,

00:19:24.370 --> 00:19:26.790
you just have job pulling string in the type.

00:19:26.790 --> 00:19:28.690
Or you could you don't even have to use a type.

00:19:28.690 --> 00:19:29.470
You just put,

00:19:29.470 --> 00:19:30.360
um,

00:19:30.360 --> 00:19:31.960
you could just use the index.

00:19:31.960 --> 00:19:32.160
So,

00:19:32.160 --> 00:19:32.320
you know,

00:19:32.320 --> 00:19:33.160
whatever you want to do,

00:19:33.160 --> 00:19:34.550
try all of them.

00:19:34.550 --> 00:19:38.630
I That would be ideal if you will try all of them that we they just sort of you'll remember

00:19:38.630 --> 00:19:39.140
them best.

00:19:39.140 --> 00:19:39.770
But,

00:19:39.770 --> 00:19:40.050
I mean,

00:19:40.050 --> 00:19:40.970
if you don't want it,

00:19:40.970 --> 00:19:43.040
I have nowhere making you,

00:19:43.040 --> 00:19:44.890
but is beneficial if you would try all of them.

00:19:44.890 --> 00:19:46.050
Yeah.

00:19:46.050 --> 00:19:46.530
Anyway,

00:19:46.530 --> 00:19:47.830
I wish Look with homework.

00:19:47.830 --> 00:19:48.310
And,

00:19:48.310 --> 00:19:48.590
uh,

00:19:48.590 --> 00:19:49.560
I'll see you soon

