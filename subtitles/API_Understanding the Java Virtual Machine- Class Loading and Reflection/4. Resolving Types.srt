1
00:00:03,940 --> 00:00:07,840
So once we have the Constructor we want to use here,

2
00:00:07,840 --> 00:00:13,040
we now have to get values for all the parameters that that Constructor needs.

3
00:00:13,040 --> 00:00:15,580
So we do that by firstly walking up to the Constructor

4
00:00:15,580 --> 00:00:20,900
and asking it for a set of parameters, so we get back the parameter array.

5
00:00:20,900 --> 00:00:22,990
We then create a parameterInstances array,

6
00:00:22,990 --> 00:00:25,880
and this parameterInstances array will load the

7
00:00:25,880 --> 00:00:28,100
values for each of those parameters.

8
00:00:28,100 --> 00:00:34,940
We then iterate over all the parameters we've got back from the Constructor,

9
00:00:34,940 --> 00:00:38,300
we get the type of each parameter,

10
00:00:38,300 --> 00:00:43,000
and then if the parameter is either a primitive type or it's a string,

11
00:00:43,000 --> 00:00:46,720
we call this helper method called getNonReferenceParameters.

12
00:00:46,720 --> 00:00:48,940
We'll see where that doesn't a moment.

13
00:00:48,940 --> 00:00:53,080
And if it's a parameter that's being configured in our config.json,

14
00:00:53,080 --> 00:00:55,170
we call getConfiguredParameters.

15
00:00:55,170 --> 00:01:00,970
By the time we return from this loop, by the time the loop is finished,

16
00:01:00,970 --> 00:01:03,950
the parameterInstances array will be full,

17
00:01:03,950 --> 00:01:07,880
and it will be full of the values that we want to pass

18
00:01:07,880 --> 00:01:12,030
to the Constructor when we create it.

19
00:01:12,030 --> 00:01:16,290
So we'll take a look at getConfiguredParameters first

20
00:01:16,290 --> 00:01:18,190
because that's the easier method.

21
00:01:18,190 --> 00:01:21,830
That's actually relatively straightforward, here, getConfiguredParameters.

22
00:01:21,830 --> 00:01:26,590
We call resolve to resolve the type that we have,

23
00:01:26,590 --> 00:01:31,540
and the resolve method we're essentially calling recursively.

24
00:01:31,540 --> 00:01:33,840
So we end up calling the resolve method here,

25
00:01:33,840 --> 00:01:36,410
and that will eventually return some createInstance of

26
00:01:36,410 --> 00:01:37,600
the type we're trying to resolve,

27
00:01:37,600 --> 00:01:41,610
and we add that instance into our list of parameters.

28
00:01:41,610 --> 00:01:47,090
The getNonReferenceParameters is slightly more complex.

29
00:01:47,090 --> 00:01:50,440
So getNonReferenceParameters is here.

30
00:01:50,440 --> 00:01:53,260
So when we call GetNonReferenceParameters,

31
00:01:53,260 --> 00:01:57,350
we pass in the parameter object, the thing that represents this parameter.

32
00:01:57,350 --> 00:02:00,550
And that parameter object will have a type and say int,

33
00:02:00,550 --> 00:02:05,190
or string, or double, and it will have a name like age or value.

34
00:02:05,190 --> 00:02:08,870
Inside the GetNonReferenceParameters helper,

35
00:02:08,870 --> 00:02:14,340
we need to match this parameter against any constructor,

36
00:02:14,340 --> 00:02:16,110
and we do that based on the name.

37
00:02:16,110 --> 00:02:19,670
So we iterate over all of the constructorParams,

38
00:02:19,670 --> 00:02:22,280
we look at the name of that parameter,

39
00:02:22,280 --> 00:02:25,750
and if it matches the name of the parameter passed in,

40
00:02:25,750 --> 00:02:29,400
then we can now get the value and store that value as the

41
00:02:29,400 --> 00:02:33,040
instance value to pass to the Constructor.

42
00:02:33,040 --> 00:02:34,130
There's a slight twist, however.

43
00:02:34,130 --> 00:02:38,220
So here we can say value = ctor.getValue,

44
00:02:38,220 --> 00:02:40,340
and that give us back the value we want to use.

45
00:02:40,340 --> 00:02:43,440
We know we have a match, so we break out of the loop.

46
00:02:43,440 --> 00:02:47,190
However, at this point, the value we get back is essentially a string.

47
00:02:47,190 --> 00:02:51,040
It's something we've read out of the JSON file.

48
00:02:51,040 --> 00:02:55,840
Once we have that string, we have to convert it to the correct type,

49
00:02:55,840 --> 00:03:00,080
and we convert it depending on the type of the parameter that we have.

50
00:03:00,080 --> 00:03:03,560
If it's an int parameter, we need to parse the string into an integer.

51
00:03:03,560 --> 00:03:06,780
If it's a double parameter, we need to parse the string into a double.

52
00:03:06,780 --> 00:03:09,840
If it is string, we just return the string straight back.

53
00:03:09,840 --> 00:03:10,830
So we have some helpers.

54
00:03:10,830 --> 00:03:14,900
We have this converters that is a dictionary of these helpers.

55
00:03:14,900 --> 00:03:17,310
So converters looks like this.

56
00:03:17,310 --> 00:03:23,240
So converters is a map, and it's a map of a class to something of type Converter.

57
00:03:23,240 --> 00:03:26,550
In fact, we're using one of the new features of Java 8 here,

58
00:03:26,550 --> 00:03:30,550
and what we actually pass in to here in reality is a reference to a function,

59
00:03:30,550 --> 00:03:33,040
and that function's called convert.

60
00:03:33,040 --> 00:03:38,570
What that function does is takes a string and returns some type,

61
00:03:38,570 --> 00:03:40,840
the type of the actual Converter itself.

62
00:03:40,840 --> 00:03:44,960
So the idea is the Converter might convert a string to an int or

63
00:03:44,960 --> 00:03:47,570
a string to a float or a string to a double,

64
00:03:47,570 --> 00:03:49,090
for example.

65
00:03:49,090 --> 00:03:50,950
You might remember,

66
00:03:50,950 --> 00:03:54,220
back in the Constructor we called this registerConverters function,

67
00:03:54,220 --> 00:04:00,250
and what registerConverters does is puts into our map the class,

68
00:04:00,250 --> 00:04:02,240
so int.class,

69
00:04:02,240 --> 00:04:08,430
and the function to be called to convert a string to int or to convert a

70
00:04:08,430 --> 00:04:12,640
double to double or to convert a double to double.

71
00:04:12,640 --> 00:04:16,090
The function to convert a string to a string simply says,

72
00:04:16,090 --> 00:04:18,450
Take that string and return the same string,

73
00:04:18,450 --> 00:04:19,800
and the same for char.

74
00:04:19,800 --> 00:04:21,960
The function to convert a char to a char simple says,

75
00:04:21,960 --> 00:04:24,280
take that char and return the char.

76
00:04:24,280 --> 00:04:28,340
So back in our getNonReferenceParameters method,

77
00:04:28,340 --> 00:04:30,340
we reach into our converters collection,

78
00:04:30,340 --> 00:04:32,090
passing in the class.

79
00:04:32,090 --> 00:04:35,740
This give us back the Converter instance,

80
00:04:35,740 --> 00:04:40,770
and we can then just call c.convert, pass in the string value,

81
00:04:40,770 --> 00:04:43,660
and that will give us back the int or the float or the string or the double,

82
00:04:43,660 --> 00:04:48,240
and we add the return value into our parameterInstances.

83
00:04:48,240 --> 00:04:52,640
So what we'll now have for the Constructor parameter is a primitive type or

84
00:04:52,640 --> 00:04:56,050
a string. We'll have the name of that parameter and the value of that

85
00:04:56,050 --> 00:04:59,740
parameter that we can now pass into the Constructor.

86
00:04:59,740 --> 00:05:03,570
So by the time we've iterated over all of the parameters,

87
00:05:03,570 --> 00:05:06,980
we'll have a full parameterInstances collection,

88
00:05:06,980 --> 00:05:11,390
and the parameterInstances collection will either contain the values

89
00:05:11,390 --> 00:05:14,310
that we get back from getNonReferenceParameters,

90
00:05:14,310 --> 00:05:19,100
or they'll contain the resolve types we get from getConfiguredParameters.

91
00:05:19,100 --> 00:05:21,710
So once we have that, we can create an instance.

92
00:05:21,710 --> 00:05:26,200
So here we declare a variable core instance and we make it of type T.

93
00:05:26,200 --> 00:05:29,170
Remember, T is the type we're going to return from the

94
00:05:29,170 --> 00:05:32,180
resolve function. Here we create the instance,

95
00:05:32,180 --> 00:05:34,130
and we'll see that method in the moment,

96
00:05:34,130 --> 00:05:36,460
and here we're currently returning null.

97
00:05:36,460 --> 00:05:39,530
We're going to return instance.

98
00:05:39,530 --> 00:05:44,270
So createInstance needs to take the longestConstructor,

99
00:05:44,270 --> 00:05:46,050
call newInstance on it,

100
00:05:46,050 --> 00:05:49,880
passing in the parameters that it needs for that Constructor.

101
00:05:49,880 --> 00:05:52,990
So here we declare an object array called parameters,

102
00:05:52,990 --> 00:05:55,370
and the length of the object array is the number of

103
00:05:55,370 --> 00:05:58,360
parameters this Constructor requires.

104
00:05:58,360 --> 00:06:02,490
Now what we have to do is iterate over the Constructor

105
00:06:02,490 --> 00:06:06,600
parameters and the parameter types that we have,

106
00:06:06,600 --> 00:06:10,520
match them type for type, assign the values into the object array,

107
00:06:10,520 --> 00:06:13,200
and then call get newInstance.

108
00:06:13,200 --> 00:06:14,290
And this is the code to do that.

109
00:06:14,290 --> 00:06:15,480
Now it's fairly simple code.

110
00:06:15,480 --> 00:06:17,340
Again, we're not doing any error checking.

111
00:06:17,340 --> 00:06:19,710
We're assuming that the first types match.

112
00:06:19,710 --> 00:06:22,070
We're not redoing checking based on names here,

113
00:06:22,070 --> 00:06:24,240
which is perhaps what we should be doing.

114
00:06:24,240 --> 00:06:28,870
But we walk up to the parameterInstances one at a time

115
00:06:28,870 --> 00:06:30,640
and get the class for the argument,

116
00:06:30,640 --> 00:06:34,890
we get the class for the type we want to pass to this Constructor.

117
00:06:34,890 --> 00:06:39,460
If they're primitives, then we go and grab the value out of the parameters array.

118
00:06:39,460 --> 00:06:42,640
If they're not primitives, we get the resolved value.

119
00:06:42,640 --> 00:06:45,100
Eventually we fill in the parameters collection,

120
00:06:45,100 --> 00:06:48,240
we call newInstance, and we return that instance here.

121
00:06:48,240 --> 00:06:51,540
So we're now at the point where we can run our code.

122
00:06:51,540 --> 00:06:56,190
So if I go back into mantiso, Main here,

123
00:06:56,190 --> 00:06:59,340
this is the same code we saw right at the start of this talk,

124
00:06:59,340 --> 00:07:02,790
and if I run this, we should get Charlie,

125
00:07:02,790 --> 00:07:06,040
Alice, and Bob again, although, not necessarily in that order.

126
00:07:06,040 --> 00:07:09,340
I've also here written a whole set of tests for this code as well,

127
00:07:09,340 --> 00:07:16,000
and if I run the tests from here, then all of those tests should still pass, and indeed they do.

