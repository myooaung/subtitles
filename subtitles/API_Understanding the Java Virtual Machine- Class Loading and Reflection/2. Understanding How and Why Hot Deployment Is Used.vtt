WEBVTT
1
00:00:04.340 --> 00:00:08.460
So what is hot deployment? We can think of hot deployment

2
00:00:08.460 --> 00:00:10.940
as the redeployment of changed classes.

3
00:00:10.940 --> 00:00:14.800
So you deploy a class, and then somebody comes along and changes the code,

4
00:00:14.800 --> 00:00:16.240
maybe to do a bug fix.

5
00:00:16.240 --> 00:00:18.420
You don't want to have to reload the entire application to

6
00:00:18.420 --> 00:00:21.880
deploy that particular class, so we have a mechanism whereby we

7
00:00:21.880 --> 00:00:24.290
can hot deploy certain pieces of code.

8
00:00:24.290 --> 00:00:27.040
It works in a similar way to side‑by‑side deployment.

9
00:00:27.040 --> 00:00:27.770
In that case,

10
00:00:27.770 --> 00:00:32.440
we are loading two classes from different directories or different JAR files.

11
00:00:32.440 --> 00:00:36.090
But now, rather than thinking of changes in terms of location,

12
00:00:36.090 --> 00:00:39.390
we can think of changes over time and update things as

13
00:00:39.390 --> 00:00:42.860
time passes. Hot deployment, for example,

14
00:00:42.860 --> 00:00:44.380
lets the server stay up.

15
00:00:44.380 --> 00:00:49.680
So when we have a 24/7 need, we have a server that has to run all the time.

16
00:00:49.680 --> 00:00:52.710
We can't bring our server down. Hot deployment lets us keep

17
00:00:52.710 --> 00:00:55.000
our server running while making changes,

18
00:00:55.000 --> 00:00:59.070
say, during production. And using this technique, as

19
00:00:59.070 --> 00:01:02.910
long as we code in a certain way, then we can replace our code piecemeals.

20
00:01:02.910 --> 00:01:05.560
We don't need to replace the entire application.

21
00:01:05.560 --> 00:01:10.700
So in a hot deployment scenario, the code is similar to a side‑by‑side scenario.

22
00:01:10.700 --> 00:01:15.770
So here, we create a new URLClassLoader, we call Class.forName, and load

23
00:01:15.770 --> 00:01:19.990
that class using a specific loader. But later on in time,

24
00:01:19.990 --> 00:01:22.120
let's say Friday rather than Monday,

25
00:01:22.120 --> 00:01:25.640
we could do the same thing. So we can create a new URLClassLoader

26
00:01:25.640 --> 00:01:29.380
based on some customer URL, maybe the same URL that we had before, so

27
00:01:29.380 --> 00:01:31.630
the same location, but in that location,

28
00:01:31.630 --> 00:01:36.140
we've now added updated copies our classes, updated copies of our JAR files,

29
00:01:36.140 --> 00:01:39.490
and then call Class.forName on the same class in the same

30
00:01:39.490 --> 00:01:42.650
location, but a different point in time.

31
00:01:42.650 --> 00:01:49.000
And now the Monday class that we loaded previously is not the same as the Friday class that we load now.

