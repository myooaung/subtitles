1
00:00:02,040 --> 00:00:06,220
So in the previous module we saw that we can use a classpath and

2
00:00:06,220 --> 00:00:08,270
place classes somewhere and that classpath.

3
00:00:08,270 --> 00:00:12,660
And the classpath can reference a directory, or the classpath can reference a

4
00:00:12,660 --> 00:00:17,490
JAR file. In this module, we'll see how we can make use of the inbuilt class

5
00:00:17,490 --> 00:00:22,140
loaders in Java and how to write our own class loader.

6
00:00:22,140 --> 00:00:28,040
So first of all, we'll take a look at writing and using a URLClassLoader.

7
00:00:28,040 --> 00:00:32,490
So we have a Main class here, and in here we're going to create a

8
00:00:32,490 --> 00:00:37,340
URLClassLoader and use that to specify a location to load classes.

9
00:00:37,340 --> 00:00:43,000
So we do that by defining a URLClassLoader. And this is in java.net.

10
00:00:43,000 --> 00:00:47,030
We can just call it ucl. We create a new instance of that

11
00:00:47,030 --> 00:00:55,650
URLClassLoader. And the constructor to this takes an array of URLs. So

12
00:00:55,650 --> 00:01:00,040
we need to define a URL, so we're going to say URL url,

13
00:01:00,040 --> 00:01:03,400
and we'll end up wrapping all of this inside a try‑catch block. And

14
00:01:03,400 --> 00:01:06,240
there will be a few exceptions that we have to handle.

15
00:01:06,240 --> 00:01:10,540
So for now we'll just do try‑catch, and we'll add the exceptions in a moment.

16
00:01:10,540 --> 00:01:16,550
So inside the try block we'll say URL = new URL, and we'll need

17
00:01:16,550 --> 00:01:20,510
to pass this the location of our classes.

18
00:01:20,510 --> 00:01:22,320
So for this example,

19
00:01:22,320 --> 00:01:26,500
we've created a file called Quoter.jar that contains a quote class.

20
00:01:26,500 --> 00:01:31,560
So here we need to specify where that file lives.

21
00:01:31,560 --> 00:01:32,790
Now for this example,

22
00:01:32,790 --> 00:01:37,070
we've got to hardcode this location, and we need to specify a URL.

23
00:01:37,070 --> 00:01:45,560
The location is on c:\demos\lib\quoter.jar. So that will be in URL

24
00:01:45,560 --> 00:01:54,480
format, c:/demos/lib/quoter.jar.

25
00:01:54,480 --> 00:02:00,060
And then to make this a URL, we'll need to say file:///,

26
00:02:00,060 --> 00:02:04,860
and that should give us access to this URL. And this is

27
00:02:04,860 --> 00:02:07,200
complaining that we need to add a catch,

28
00:02:07,200 --> 00:02:12,240
so we add a catch clause to this and get rid of the empty one here.

29
00:02:12,240 --> 00:02:16,890
And we can now catch the exceptions thrown when we create the URL. To the

30
00:02:16,890 --> 00:02:23,770
class loader we pass an array of URLs. So here we can say new URL and into

31
00:02:23,770 --> 00:02:28,140
here initialize that with the URL we created above.

32
00:02:28,140 --> 00:02:33,680
So just like the classpath, we can pass as many URLs to our class loader as

33
00:02:33,680 --> 00:02:37,740
we need to use. That code will simply load the class.

34
00:02:37,740 --> 00:02:39,890
So once the class loader has been created,

35
00:02:39,890 --> 00:02:43,790
we can then use that to load up a class. So we can say something like

36
00:02:43,790 --> 00:02:53,510
Class clazz = ucl.loadClass. And to loadClass we pass the name of the

37
00:02:53,510 --> 00:02:58,450
class we'd like to load. Now I know that in Quoter.jar there's a

38
00:02:58,450 --> 00:03:03,790
class called com.mantiso.Quote.

39
00:03:03,790 --> 00:03:05,660
So that should load that class for me.

40
00:03:05,660 --> 00:03:07,790
And again, IntelliJ's complaining.

41
00:03:07,790 --> 00:03:11,840
We need to add a catch clause. We'll add a ClassNotFoundException in this place.

42
00:03:11,840 --> 00:03:13,810
Once we have the class in place,

43
00:03:13,810 --> 00:03:21,950
we can create an instance, so I can say Object o = clazz.newInstance.

44
00:03:21,950 --> 00:03:26,400
And again it wants to throw an exception, in this case an

45
00:03:26,400 --> 00:03:29,610
InstantiationException, an IllegalAccessException.

46
00:03:29,610 --> 00:03:31,070
Once we have that,

47
00:03:31,070 --> 00:03:34,570
we'll print out just the information about the class. We'll call

48
00:03:34,570 --> 00:03:37,420
o.toString and print that message out, which,

49
00:03:37,420 --> 00:03:37,840
in this case,

50
00:03:37,840 --> 00:03:41,610
will just print out the hash code of the class. Once that's all in place, so

51
00:03:41,610 --> 00:03:45,500
if I compile this code, let's go to Build and Make project,

52
00:03:45,500 --> 00:03:49,360
go to a command window, and in here run the application.

53
00:03:49,360 --> 00:03:53,820
Our IDE has saved this to a location called out\production\demos,

54
00:03:53,820 --> 00:03:58,010
and we have com.pluralsight.Main. And from here,

55
00:03:58,010 --> 00:03:59,210
if I run the code,

56
00:03:59,210 --> 00:04:02,120
then we just print out the hash code of the class. We

57
00:04:02,120 --> 00:04:03,340
show the class has been loaded.

58
00:04:03,340 --> 00:04:05,220
If we change the name of the class, for example,

59
00:04:05,220 --> 00:04:08,690
here and build the code and then run this again,

60
00:04:08,690 --> 00:04:12,100
we'll get a ClassNotFoundException. So of course,

61
00:04:12,100 --> 00:04:17,040
the problem with this example is that when I call newInstance,

62
00:04:17,040 --> 00:04:19,740
I only get back something of type object.

63
00:04:19,740 --> 00:04:25,240
Now I know I'm actually getting back something of type com.mantiso.Quote,

64
00:04:25,240 --> 00:04:30,190
but I can't use that type directly here because if I do that,

65
00:04:30,190 --> 00:04:33,730
that defeats the whole purpose of me using a class loader. Because

66
00:04:33,730 --> 00:04:36,540
by using this type directly inline in the code,

67
00:04:36,540 --> 00:04:40,340
then in that case we'll simply use the application class loader.

68
00:04:40,340 --> 00:04:45,540
So if I need to access the methods on the quote type,

69
00:04:45,540 --> 00:04:47,740
I need some other way to do that.

70
00:04:47,740 --> 00:04:50,710
And the way we do that typically is to break this down into

71
00:04:50,710 --> 00:04:57,000
using interfaces and implementations. So we have a slightly more complex example to show that.

