1
00:00:01,540 --> 00:00:04,940
What about the built‑in classes?

2
00:00:04,940 --> 00:00:09,300
We've seen that we can use the extensions directory to contain libraries,

3
00:00:09,300 --> 00:00:12,160
so we put helper.jar inside the extensions folder.

4
00:00:12,160 --> 00:00:15,240
But in my code here,

5
00:00:15,240 --> 00:00:18,980
I've now created a new string and passed it the text Hello World,

6
00:00:18,980 --> 00:00:21,340
and I simply print out that string.

7
00:00:21,340 --> 00:00:24,160
If I go back to my command prompt and compile our code,

8
00:00:24,160 --> 00:00:27,320
so again we're just saying compile the code from the src path src,

9
00:00:27,320 --> 00:00:28,980
and I put it to classes.

10
00:00:28,980 --> 00:00:31,850
And that should compile okay.

11
00:00:31,850 --> 00:00:34,700
And I take that code and run it, again just

12
00:00:34,700 --> 00:00:38,080
specifying the class path of classes, we get Hello from the helper,

13
00:00:38,080 --> 00:00:39,630
and we get Hello World.

14
00:00:39,630 --> 00:00:42,090
So the string class is coming from java.lang.String,

15
00:00:42,090 --> 00:00:45,350
and that's part of the standard Java runtime.

16
00:00:45,350 --> 00:00:48,600
Now suppose we try to write our own string class.

17
00:00:48,600 --> 00:00:52,520
We can write our own string class and put this into a package called java.lang.

18
00:00:52,520 --> 00:00:57,640
So here, inside Sublime, if I do File, New File,

19
00:00:57,640 --> 00:01:03,570
and then do a File, Save As, and go to the src folder.

20
00:01:03,570 --> 00:01:07,250
Inside here, we'll create a new folder called java.

21
00:01:07,250 --> 00:01:15,110
Inside there, we'll create a new folder called lang.

22
00:01:15,110 --> 00:01:19,360
And inside here, we'll save this class as String.java.

23
00:01:19,360 --> 00:01:21,970
So inside my String.java file,

24
00:01:21,970 --> 00:01:29,420
if we create a class and we call it public class String

25
00:01:29,420 --> 00:01:32,270
and save this, we put this in a package.

26
00:01:32,270 --> 00:01:38,630
So we'll put this into the java.lang package.

27
00:01:38,630 --> 00:01:39,300
We'll save it.

28
00:01:39,300 --> 00:01:43,440
And then if we go back to our command prompt and compile our code,

29
00:01:43,440 --> 00:01:45,910
we'll find that the code tries to compile.

30
00:01:45,910 --> 00:01:47,940
So it tries to compile the String class.

31
00:01:47,940 --> 00:01:51,200
So it does find java.lang.String on the class path.

32
00:01:51,200 --> 00:01:53,630
So in this case, our class doesn't have the correct constructor,

33
00:01:53,630 --> 00:01:55,560
so the compilation fails.

34
00:01:55,560 --> 00:01:58,610
So how about we modify the code so that it compiles.

35
00:01:58,610 --> 00:02:03,100
So here we just to String message = new String, no parameters.

36
00:02:03,100 --> 00:02:07,010
In my String class, we have a default constructor.

37
00:02:07,010 --> 00:02:08,730
And I've also added this helper method,

38
00:02:08,730 --> 00:02:11,850
so getValue, and this returns the value 42 here.

39
00:02:11,850 --> 00:02:17,260
And if I go back into Main.java and put in a call to getValue

40
00:02:17,260 --> 00:02:20,130
and just print out the value we get back,

41
00:02:20,130 --> 00:02:23,650
and if I make sure both of these are saved and then

42
00:02:23,650 --> 00:02:27,510
go back to the command prompt, in here we can compile the code,

43
00:02:27,510 --> 00:02:28,680
and the code compiles.

44
00:02:28,680 --> 00:02:31,820
So we have this weird String class with a call to

45
00:02:31,820 --> 00:02:35,840
getValue that's compiled correctly by javac.

46
00:02:35,840 --> 00:02:38,820
However, as soon as you try and run this,

47
00:02:38,820 --> 00:02:43,170
so we just do the same thing as before, we do java ‑cp classes,

48
00:02:43,170 --> 00:02:47,080
and that will point at the classes folder that contains the

49
00:02:47,080 --> 00:02:52,570
java.lang.String and com.pluralsight.Main and try and run the code,

50
00:02:52,570 --> 00:02:53,870
then the code now fails.

51
00:02:53,870 --> 00:02:58,810
Now it fails with a method telling us that the getValue

52
00:02:58,810 --> 00:03:02,540
method can't be found on java.lang.String.

53
00:03:02,540 --> 00:03:07,090
So it seems that while javac will happily compile any class,

54
00:03:07,090 --> 00:03:11,610
so java.lang.String, when we try and run this from inside Java,

55
00:03:11,610 --> 00:03:12,940
something fails.

56
00:03:12,940 --> 00:03:17,120
So here we get this NoSuchMethodError as the loaded

57
00:03:17,120 --> 00:03:21,800
java.lang.String class doesn't have a getValue method,

58
00:03:21,800 --> 00:03:25,640
and the loaded class is coming from rt.jar.

59
00:03:25,640 --> 00:03:30,010
So what happens here is we have something called a bootstrap class loader.

60
00:03:30,010 --> 00:03:35,430
And the job of the bootstrap class loader is to load the bootstrap classes.

61
00:03:35,430 --> 00:03:38,440
These are the main classes that make up the Java runtime.

62
00:03:38,440 --> 00:03:42,900
So it's the bootstrap class loader that loads classes from rt.jar.

63
00:03:42,900 --> 00:03:45,890
So one last thing to be aware of.

64
00:03:45,890 --> 00:03:49,660
We can actually also override the bootstrap class path,

65
00:03:49,660 --> 00:03:52,640
at least on the Oracle Java virtual machine.

66
00:03:52,640 --> 00:03:55,460
So if I do java ‑X,

67
00:03:55,460 --> 00:04:01,020
this will print out extension flags that we can pass to the Java runtime.

68
00:04:01,020 --> 00:04:04,550
And if I scroll back top the top here, you can see that some of those flags

69
00:04:04,550 --> 00:04:09,330
include bootclasspath. So we can say ‑Xbootclasspath and specify a set of

70
00:04:09,330 --> 00:04:16,040
directories, and the Java VM will look in these directories for the path, \a to

71
00:04:16,040 --> 00:04:26,000
append directories to the built‑in set of classes and \p to prepend a set of directories to the build‑in set of classes.

