1
00:00:02,240 --> 00:00:06,860
So what about in Java 11? So Java 11 is similar,

2
00:00:06,860 --> 00:00:10,040
but there are some clear differences between Java 8 and Java

3
00:00:10,040 --> 00:00:14,340
11. So we still have the core classes.

4
00:00:14,340 --> 00:00:18,140
However, this is now modularized, and we'll see this in a moment.

5
00:00:18,140 --> 00:00:18,430
So,

6
00:00:18,430 --> 00:00:23,090
whereas previously there was an rt.jar, instead now, these

7
00:00:23,090 --> 00:00:26,580
classes are kept inside a module, and the internals of that

8
00:00:26,580 --> 00:00:28,160
module are not documented.

9
00:00:28,160 --> 00:00:31,530
However, you can still list the classes inside that module,

10
00:00:31,530 --> 00:00:35,220
and we'll see what that looks like in a moment. And

11
00:00:35,220 --> 00:00:37,480
gone are the extension classes.

12
00:00:37,480 --> 00:00:41,340
Instead, we now have something called the platform classes.

13
00:00:41,340 --> 00:00:45,610
So in Java 11, if you run an application and the application starts up,

14
00:00:45,610 --> 00:00:50,240
if it finds an extensions directory, then the application will fail immediately.

15
00:00:50,240 --> 00:00:52,640
So what are these platform classes?

16
00:00:52,640 --> 00:00:58,340
So as Java grew, classes were added to it that weren't really part of the core.

17
00:00:58,340 --> 00:01:01,510
But those classes are still expected to be there. In Java

18
00:01:01,510 --> 00:01:04,080
11, these are the platform classes.

19
00:01:04,080 --> 00:01:05,590
So these are things, for example,

20
00:01:05,590 --> 00:01:08,940
like classes in the java.compiler package or the java.covar

21
00:01:08,940 --> 00:01:13,700
package or the javax.xml.bind package.

22
00:01:13,700 --> 00:01:16,510
And these are now loaded by the platform class loader, and this is in

23
00:01:16,510 --> 00:01:20,240
place of what used to be the extensions class loader.

24
00:01:20,240 --> 00:01:22,000
We still have delegation,

25
00:01:22,000 --> 00:01:26,040
but the delegation is now different in Java 11. And we can still

26
00:01:26,040 --> 00:01:29,310
display that delegation, but we can't display the same information in

27
00:01:29,310 --> 00:01:33,080
the delegation that we could display in Java 8.

28
00:01:33,080 --> 00:01:37,710
So in Java 11, we have the application class loader still, we have

29
00:01:37,710 --> 00:01:41,160
the platform class loader in place of the extensions class loader,

30
00:01:41,160 --> 00:01:43,540
and we have the bootstrap class loader.

31
00:01:43,540 --> 00:01:45,380
But beyond this, the behavior is the same.

32
00:01:45,380 --> 00:01:48,060
So we ask the application class loader to load the class.

33
00:01:48,060 --> 00:01:50,960
That delegates to the platform class loader. That delegates

34
00:01:50,960 --> 00:01:52,730
to the bootstrap class loader.

35
00:01:52,730 --> 00:01:53,880
And again, if this fails,

36
00:01:53,880 --> 00:01:56,150
it fails all the way down, and eventually the

37
00:01:56,150 --> 00:01:59,440
application class loader will load the class.

38
00:01:59,440 --> 00:02:02,950
The other thing we can't do in Java 11 that we could sort of do in

39
00:02:02,950 --> 00:02:07,290
Java 8 is to replace things in the core classes.

40
00:02:07,290 --> 00:02:10,450
So in a previous demo, we saw we could do things by

41
00:02:10,450 --> 00:02:14,470
compiling against our own java.lang.String class, although

42
00:02:14,470 --> 00:02:17,060
that wouldn't work at runtime. In Java,

43
00:02:17,060 --> 00:02:20,440
11 you can't even compile against these classes.

44
00:02:20,440 --> 00:02:25,740
Java 11 has a check to make sure that packages aren't split across modules.

45
00:02:25,740 --> 00:02:29,760
Java.lang is in one of the core modules, so if you tried out of class

46
00:02:29,760 --> 00:02:33,940
in the java.lang package, that's going to fail as that java.lang

47
00:02:33,940 --> 00:02:39,000
package can only be in one module. Okay, so let's take a look at how delegation works in Java 11.

