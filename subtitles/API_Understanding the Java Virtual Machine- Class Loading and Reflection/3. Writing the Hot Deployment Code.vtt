WEBVTT
1
00:00:02.040 --> 00:00:04.740
So to show hot deployment in action,

2
00:00:04.740 --> 00:00:09.740
we'll write a client application that will make calls against a server.

3
00:00:09.740 --> 00:00:11.340
And the server will be very simple.

4
00:00:11.340 --> 00:00:14.730
It will be the quote server we've used in previous modules,

5
00:00:14.730 --> 00:00:19.460
so that will be a class that implements an interface with a getQuote method.

6
00:00:19.460 --> 00:00:24.040
The client can load up that class and call getQuote and print out the quote.

7
00:00:24.040 --> 00:00:27.790
We'll load the client code using the application ClassLoader,

8
00:00:27.790 --> 00:00:32.740
but we'll load the server code using our own ClassLoader.

9
00:00:32.740 --> 00:00:36.810
That means that we can force the clients to reload the

10
00:00:36.810 --> 00:00:40.440
server code at any time by creating a new ClassLoader and

11
00:00:40.440 --> 00:00:43.340
reloading the server classes.

12
00:00:43.340 --> 00:00:45.640
To ensure we keep the separation of the classes,

13
00:00:45.640 --> 00:00:49.580
we'll build our server code, so the ServerImple.java,

14
00:00:49.580 --> 00:00:51.820
into a serverclass directory.

15
00:00:51.820 --> 00:00:54.040
And we'll build the client code,

16
00:00:54.040 --> 00:00:59.040
the Client and the Server interface definition, into the classes folder.

17
00:00:59.040 --> 00:01:03.320
So we'll point the application classpath at the classes folder,

18
00:01:03.320 --> 00:01:07.180
and then our own application will create a ClassLoader that references the

19
00:01:07.180 --> 00:01:10.800
serverclass folder and we'll load the server classes from there.

20
00:01:10.800 --> 00:01:12.890
And that will give us some control over when and

21
00:01:12.890 --> 00:01:15.220
how we load those server classes.

22
00:01:15.220 --> 00:01:17.840
To make life slightly easier,

23
00:01:17.840 --> 00:01:21.740
we've created an Ant Build file called build.xml here.

24
00:01:21.740 --> 00:01:24.810
And the Ant Build file has separate build steps for

25
00:01:24.810 --> 00:01:27.340
the client and for the server.

26
00:01:27.340 --> 00:01:30.720
When I build the client, we output the classes to this build directory,

27
00:01:30.720 --> 00:01:33.270
and the build directory is simply classes.

28
00:01:33.270 --> 00:01:37.690
When I build the server, we output the classes to the serverclass directory,

29
00:01:37.690 --> 00:01:41.240
and the serverclass directory is serverclass.

30
00:01:41.240 --> 00:01:44.090
So serverclass here for the server classes,

31
00:01:44.090 --> 00:01:48.140
and the client classes go into the classes directory here.

32
00:01:48.140 --> 00:01:49.900
So writing the server, first of all,

33
00:01:49.900 --> 00:01:53.690
so the server interface has a simple method called getQuote,

34
00:01:53.690 --> 00:01:58.970
and we need a ServerImple.java. So in here we'll have public class

35
00:01:58.970 --> 00:02:05.100
ServerImpl, and ServerImpl implements ServerItf.

36
00:02:05.100 --> 00:02:08.670
And we need to implement the methods on the class.

37
00:02:08.670 --> 00:02:12.000
So into our getQuote method, we can return a quote,

38
00:02:12.000 --> 00:02:18.140
and let's return something like One small step for man.

39
00:02:18.140 --> 00:02:22.740
So for the Client code, we'll need to do a couple of things.

40
00:02:22.740 --> 00:02:26.140
We'll have the Client iterate, asking the user for input.

41
00:02:26.140 --> 00:02:28.230
We'll allow the user to select what they want to do.

42
00:02:28.230 --> 00:02:31.350
So they can, for example, either print the quote,

43
00:02:31.350 --> 00:02:33.070
or they can quit the application,

44
00:02:33.070 --> 00:02:36.940
or we'll also give them an option to allow them to reload the server.

45
00:02:36.940 --> 00:02:41.140
The Client code will also need to be written to allow us to reload the server,

46
00:02:41.140 --> 00:02:43.340
so we'll write that code first.

47
00:02:43.340 --> 00:02:50.330
So here we'll have a public static void method called reloadServer.

48
00:02:50.330 --> 00:02:54.140
And we'll have this just throw an exception,

49
00:02:54.140 --> 00:02:57.000
as there'll be few exceptions our code here will throw.

50
00:02:57.000 --> 00:03:00.130
Inside here we need to create a URL array.

51
00:03:00.130 --> 00:03:02.120
We'll call this thing urls.

52
00:03:02.120 --> 00:03:04.840
We'll say new URL array,

53
00:03:04.840 --> 00:03:08.550
and then we'll initialize this with a new URL, and the URL we specify

54
00:03:08.550 --> 00:03:12.940
here will be the location off our server classes.

55
00:03:12.940 --> 00:03:17.630
So this will be something like ./serverclass,

56
00:03:17.630 --> 00:03:22.040
remembering the file protocol for this.

57
00:03:22.040 --> 00:03:25.090
Once we have that, we can create a class loader.

58
00:03:25.090 --> 00:03:31.400
So we can say cl = new URLClassLoader, and to this class loader we can

59
00:03:31.400 --> 00:03:36.840
pass the URLs. So we just pass in urls. And from that we can create an

60
00:03:36.840 --> 00:03:43.910
instance of our server. So we can say server =cl.loadClass, and we'll

61
00:03:43.910 --> 00:03:50.640
give this the name of our class, and that's com.pluralsight.ServerImpl.

62
00:03:50.640 --> 00:03:54.060
And then we'll call .new instance on this to create the instance of the

63
00:03:54.060 --> 00:03:58.240
class that we need. And we'll need to cast this to be the right type.

64
00:03:58.240 --> 00:04:02.000
So we can now write the loop inside the main function to

65
00:04:02.000 --> 00:04:04.840
allow us to read the user's input.

66
00:04:04.840 --> 00:04:08.430
So the loop code will look something like this. We create a BufferedReader,

67
00:04:08.430 --> 00:04:11.660
allowing the user to enter something from the keyboard.

68
00:04:11.660 --> 00:04:16.470
We print out a message telling the user what to enter, and then,

69
00:04:16.470 --> 00:04:19.300
depending on what that message is, we'll do the appropriate command.

70
00:04:19.300 --> 00:04:23.210
So if they enter QUIT, we'll close the application, if they enter QUOTE,

71
00:04:23.210 --> 00:04:26.760
then we'll print out the quote, and if they enter RELOAD,

72
00:04:26.760 --> 00:04:28.830
then we'll reload the server.

73
00:04:28.830 --> 00:04:30.580
The server isn't loaded yet,

74
00:04:30.580 --> 00:04:32.760
so before we do anything else we need to call

75
00:04:32.760 --> 00:04:35.280
reloadServer to load the server here.

76
00:04:35.280 --> 00:04:37.390
This throws an exception, so we need to add that

77
00:04:37.390 --> 00:04:39.410
exception to our method signature,

78
00:04:39.410 --> 00:04:42.390
and then we also need to make that call here when the

79
00:04:42.390 --> 00:04:44.940
client asks to reload the server.

80
00:04:44.940 --> 00:04:47.450
If the client enters the QUOTE command,

81
00:04:47.450 --> 00:04:50.650
we can take the server variable from above and call

82
00:04:50.650 --> 00:04:54.240
server.getQuote, and we can print that out. So we can

83
00:04:54.240 --> 00:04:58.410
print out the message to the console.

84
00:04:58.410 --> 00:04:59.870
And at this point, we're good to go.

85
00:04:59.870 --> 00:05:05.450
So if I take my Ant Build file and run build and check the

86
00:05:05.450 --> 00:05:08.430
messages, they seem to have built okay,

87
00:05:08.430 --> 00:05:12.670
and we can now run this application from the command line. So we can

88
00:05:12.670 --> 00:05:17.840
run the code from the command line, say java â€‘cp classes

89
00:05:17.840 --> 00:05:22.970
com.pluralsight.Client, and we get the message.

90
00:05:22.970 --> 00:05:28.440
So from here, we can type QUOTE, and we get One small step for man.

91
00:05:28.440 --> 00:05:34.430
So what we can now do is go back into our code, we can change the message, so

92
00:05:34.430 --> 00:05:38.320
One giant leap for mankind. Using the Ant Build script,

93
00:05:38.320 --> 00:05:40.640
we can just build the server code.

94
00:05:40.640 --> 00:05:43.690
Look at the messages and we see this code is built.

95
00:05:43.690 --> 00:05:49.880
If we go back to the command prompt and type in RELOAD and then type

96
00:05:49.880 --> 00:06:03.000
in QUOTE, we now get One giant leap for mankind. So we've reloaded the quote server without reloading the application.

