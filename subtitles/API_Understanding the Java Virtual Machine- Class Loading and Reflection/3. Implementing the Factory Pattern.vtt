WEBVTT
1
00:00:02.510 --> 00:00:06.740
We can now make use of Java's class loading in the factory pattern.

2
00:00:06.740 --> 00:00:11.940
This will allow us to isolate different instances of the types that we create.

3
00:00:11.940 --> 00:00:13.860
So what is the factory pattern?

4
00:00:13.860 --> 00:00:16.600
The factory pattern is a constructor pattern,

5
00:00:16.600 --> 00:00:20.140
and the way it works is something like this.

6
00:00:20.140 --> 00:00:22.010
We have an abstract factory.

7
00:00:22.010 --> 00:00:24.880
This is an abstract class that defines a factory,

8
00:00:24.880 --> 00:00:28.940
and that factory will allow us to create instances of some type.

9
00:00:28.940 --> 00:00:32.630
From this, we derive many concrete factories,

10
00:00:32.630 --> 00:00:35.240
and it's these actual concrete factories that we use

11
00:00:35.240 --> 00:00:37.420
to create the type that we need.

12
00:00:37.420 --> 00:00:41.140
Associated with this we have a corresponding hierarchy of types,

13
00:00:41.140 --> 00:00:45.240
so we have an abstract type and the corresponding concrete types.

14
00:00:45.240 --> 00:00:48.260
One concrete factory will create one type of thing.

15
00:00:48.260 --> 00:00:51.110
Another concrete factory will create another type of thing.

16
00:00:51.110 --> 00:00:54.970
Within our application code, we'll code against the abstract factory,

17
00:00:54.970 --> 00:00:57.620
and we'll code against the abstract type.

18
00:00:57.620 --> 00:01:01.230
The primary idea behind the factory pattern is that it lets us

19
00:01:01.230 --> 00:01:04.660
abstract away the construction of some type,

20
00:01:04.660 --> 00:01:08.030
so we don't need to use the name of that type directly in our code,

21
00:01:08.030 --> 00:01:09.980
and that makes things like testing easier,

22
00:01:09.980 --> 00:01:12.090
for example.

23
00:01:12.090 --> 00:01:13.810
So in this project,

24
00:01:13.810 --> 00:01:18.440
we have a straightforward implementation of this abstract factory pattern.

25
00:01:18.440 --> 00:01:21.310
So here we have an interface called ICameraFactory.

26
00:01:21.310 --> 00:01:24.150
That's our abstract factory,

27
00:01:24.150 --> 00:01:26.210
and that has concrete implementations of

28
00:01:26.210 --> 00:01:30.410
NikonCameraFactory and CanonCameraFactory.

29
00:01:30.410 --> 00:01:35.860
ICameraFactory has a method called CreateCamera, and that returns an ICamera.

30
00:01:35.860 --> 00:01:40.740
The NikonCameraFactory returns a new NikonCamera,

31
00:01:40.740 --> 00:01:45.020
and the CanonCameraFactory returns a new CanonCamera.

32
00:01:45.020 --> 00:01:50.740
Both the NikonCamera and the CanonCamera implement ICamera.

33
00:01:50.740 --> 00:01:53.960
ICamera has a method called takePhoto,

34
00:01:53.960 --> 00:02:00.550
and the CanonCamera implements takePhoto and prints out Canon photo taken here.

35
00:02:00.550 --> 00:02:07.970
And the NikonCamera also implements takePhoto and prints out Nikon photo taken.

36
00:02:07.970 --> 00:02:12.490
And we can see a use of this in the main method here.

37
00:02:12.490 --> 00:02:16.440
So inside main, we create a new NikonCameraFactory.

38
00:02:16.440 --> 00:02:18.250
We call its CreateCamera method.

39
00:02:18.250 --> 00:02:19.280
That's the builder method.

40
00:02:19.280 --> 00:02:21.150
That's the factory method itself.

41
00:02:21.150 --> 00:02:25.210
And then and the interface we call takePhoto.

42
00:02:25.210 --> 00:02:26.790
And depending and whether we've built a

43
00:02:26.790 --> 00:02:30.080
NikonCameraFactory here or a CanonCameraFactory here,

44
00:02:30.080 --> 00:02:32.370
it'll print out the appropriate message here.

45
00:02:32.370 --> 00:02:35.510
Notice we only code against the interface

46
00:02:35.510 --> 00:02:39.340
ICameraFactory and the interface ICamera.

47
00:02:39.340 --> 00:02:44.330
And if I run this code, we'll see it prints out Nikon photo taken,

48
00:02:44.330 --> 00:02:48.840
as we'd expect, as it's using the NikonCameraFactory.

49
00:02:48.840 --> 00:02:52.150
So there are a couple of things in this code we'd like to fix.

50
00:02:52.150 --> 00:02:57.020
The first is that we're hardcoding the use of a NikonCameraFactory here.

51
00:02:57.020 --> 00:02:59.500
And it might be that we'd like to configure that.

52
00:02:59.500 --> 00:03:03.340
Along with that, when we deliver this code,

53
00:03:03.340 --> 00:03:07.580
we're assuming use of NikonCameraFactory at a specific location,

54
00:03:07.580 --> 00:03:08.920
something that's on the classpath.

55
00:03:08.920 --> 00:03:13.840
And it may be we'd like to specify the location of a JAR file that

56
00:03:13.840 --> 00:03:16.640
contains the code that we're going to use as well.

57
00:03:16.640 --> 00:03:19.040
And we can fix both of those problems.

58
00:03:19.040 --> 00:03:22.530
The first thing we will do is to use a configuration file.

59
00:03:22.530 --> 00:03:24.940
In this case we'll use a JSON file.

60
00:03:24.940 --> 00:03:30.390
And inside that file, we can specify a FactoryType as a string,

61
00:03:30.390 --> 00:03:33.130
and in this case that will be com.pluralsight.NikonCameraFactory.

62
00:03:33.130 --> 00:03:39.280
And we'll also specify a location where we'll have a JAR file, and

63
00:03:39.280 --> 00:03:42.240
that JAR file contains the code that we'll use. That will contain

64
00:03:42.240 --> 00:03:47.040
the factory code and the implementation codes of the concrete type

65
00:03:47.040 --> 00:03:49.440
that we want to create.

66
00:03:49.440 --> 00:03:54.110
So covering the configuration briefly, I have a Configuration class here, and

67
00:03:54.110 --> 00:03:57.560
this class is going to read in the name of the config file,

68
00:03:57.560 --> 00:04:00.310
extract the contents from that file.

69
00:04:00.310 --> 00:04:03.320
We're then going to use the Jackson JSON parser,

70
00:04:03.320 --> 00:04:04.610
and that has an ObjectMapper class,

71
00:04:04.610 --> 00:04:08.240
and we can use this class to read the configuration information.

72
00:04:08.240 --> 00:04:11.360
So we call mapper.readValue to read the data from the

73
00:04:11.360 --> 00:04:13.880
contents into the Configuration class,

74
00:04:13.880 --> 00:04:17.640
and we end up with a location and the factoryType.

75
00:04:17.640 --> 00:04:21.710
So the code itself we'll add to this new class called ConfigurationMain.

76
00:04:21.710 --> 00:04:23.190
This also has a main method.

77
00:04:23.190 --> 00:04:26.840
The first thing we need to do here is to load the configuration.

78
00:04:26.840 --> 00:04:32.950
So we do that by using our Configuration's static LoadConfiguration method,

79
00:04:32.950 --> 00:04:34.140
passing it args[0].

80
00:04:34.140 --> 00:04:36.760
Now, I'm doing no error checking here,

81
00:04:36.760 --> 00:04:39.070
so I'm assuming that we're passing the name of the

82
00:04:39.070 --> 00:04:42.170
configuration file as the first parameter to main.

83
00:04:42.170 --> 00:04:45.880
Obviously, normally we would check that code. So I want

84
00:04:45.880 --> 00:04:49.280
to be able to to use the location specified inside the

85
00:04:49.280 --> 00:04:52.420
configuration to load classes,

86
00:04:52.420 --> 00:04:55.900
so classes will be loaded from that configuration location.

87
00:04:55.900 --> 00:05:01.020
So for that, we need to create a String called location,

88
00:05:01.020 --> 00:05:08.200
and make that equal to configuration.getLocation. And then once we have that,

89
00:05:08.200 --> 00:05:13.400
we can create a URL, call it url = new URL, and that will

90
00:05:13.400 --> 00:05:17.130
contain the location we've just specified.

91
00:05:17.130 --> 00:05:22.130
So in here we'll specify location, and that URL is then

92
00:05:22.130 --> 00:05:24.220
ready to be used by a URLClassLoader.

93
00:05:24.220 --> 00:05:33.190
So I can now say URLClassLoader ucl = new URLClassLoader, and I can just pass

94
00:05:33.190 --> 00:05:40.010
it this array of URLs. So I can say new URL array and into this just pass in

95
00:05:40.010 --> 00:05:45.040
the URL we've just created. Once we have this URL, we can then load an instance

96
00:05:45.040 --> 00:05:51.820
of the factory, and we can do that by using Class.forName against the factory

97
00:05:51.820 --> 00:05:53.790
names part of the configuration.

98
00:05:53.790 --> 00:05:59.670
So the code will be something like Class.forName. To this

99
00:05:59.670 --> 00:06:01.600
we're going to pass three parameters.

100
00:06:01.600 --> 00:06:03.290
We're going to pass the name of the class,

101
00:06:03.290 --> 00:06:09.690
so that's in configuration, so configuration.getFactoryType. We want to pass

102
00:06:09.690 --> 00:06:13.840
true to say, I want this class initialized when it's loaded.

103
00:06:13.840 --> 00:06:17.620
We want to pass this thing the URLClassLoader to be used to load the

104
00:06:17.620 --> 00:06:22.640
class,and that's in ucl. Class.forName returns a class.

105
00:06:22.640 --> 00:06:27.610
We can have this type safe, so we can return a class of a specific type.

106
00:06:27.610 --> 00:06:31.840
And I want this to return a class of type ICameraFactory.

107
00:06:31.840 --> 00:06:36.960
So I can say class ICameraFactory, cls = Class.forName.

108
00:06:36.960 --> 00:06:41.040
We want to provide a cast here, so we place the cast in front.

109
00:06:41.040 --> 00:06:42.740
So I now have a factory.

110
00:06:42.740 --> 00:06:46.130
Once I have the class, I can now create an instance.

111
00:06:46.130 --> 00:06:53.440
So I can say ICameraFactory cameraFactory = cls.newInstance. That lets me

112
00:06:53.440 --> 00:06:57.980
create an instance of the factory itself, and then from the instance code I can

113
00:06:57.980 --> 00:07:06.940
then say ICamera camera = cameraFactory.CreateCamera.

114
00:07:06.940 --> 00:07:09.130
So we now have the camera that we want to use.

115
00:07:09.130 --> 00:07:12.700
We can then call the camera's takePhoto method, and that

116
00:07:12.700 --> 00:07:15.640
will print out the message to the console.

117
00:07:15.640 --> 00:07:20.000
So if I run this by going to run the ConfigurationMain, the

118
00:07:20.000 --> 00:07:23.050
main inside the ConfigurationMain class, then on the console

119
00:07:23.050 --> 00:07:25.070
here we'll see Nikon photo taken,

120
00:07:25.070 --> 00:07:28.310
so we get the same result but now this is highly configurable.

121
00:07:28.310 --> 00:07:33.610
If we go into config.json and change this from NikonCameraFactory to

122
00:07:33.610 --> 00:07:40.340
CanonCameraFactory and rerun the code, we get Canon photo taken. So

123
00:07:40.340 --> 00:07:47.000
a simple change to a configuration file allows us to change the behavior of the application.

