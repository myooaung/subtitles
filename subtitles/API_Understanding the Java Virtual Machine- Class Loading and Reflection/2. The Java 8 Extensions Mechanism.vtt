WEBVTT
1
00:00:02.440 --> 00:00:07.070
So you'll remember from the introductory chapter that we saw how to

2
00:00:07.070 --> 00:00:10.640
set the CLASSPATH when running a Java application,

3
00:00:10.640 --> 00:00:16.040
and we saw how the CLASSPATH affected how the application ran,

4
00:00:16.040 --> 00:00:17.460
and we have the same code here.

5
00:00:17.460 --> 00:00:24.600
So here if I go java ‑cp to set the CLASSPATH and say classes

6
00:00:24.600 --> 00:00:32.730
lib\helper.jar and then run com.pluralsight.Main,

7
00:00:32.730 --> 00:00:34.910
then the code should work in exactly the same way.

8
00:00:34.910 --> 00:00:37.610
We see Hello from helper.

9
00:00:37.610 --> 00:00:38.760
And if you'll remember,

10
00:00:38.760 --> 00:00:43.600
what is happening here is that Java is looking in the classes

11
00:00:43.600 --> 00:00:47.770
directory and in the Helper.jar file to look for both the

12
00:00:47.770 --> 00:00:51.370
com.pluralsight.Main class and, in this case,

13
00:00:51.370 --> 00:00:57.340
the com.mantiso.helper class that's used by Main.

14
00:00:57.340 --> 00:01:01.240
We also know that if the Helper.jar file doesn't exist,

15
00:01:01.240 --> 00:01:02.990
then this code won't run.

16
00:01:02.990 --> 00:01:06.770
So if I rename Helper.jar to something else, so I say something

17
00:01:06.770 --> 00:01:16.290
like move lib\helper.jar to lib\foo.jar and then rerun the

18
00:01:16.290 --> 00:01:19.630
application, then the application won't load.

19
00:01:19.630 --> 00:01:20.400
So in this case,

20
00:01:20.400 --> 00:01:24.270
we get our famous java.lang.NoClassDefFoundError. It

21
00:01:24.270 --> 00:01:28.410
was looking for com.mantiso.helper.

22
00:01:28.410 --> 00:01:31.890
And that's because Helper.jar isn't on the CLASSPATH.

23
00:01:31.890 --> 00:01:34.240
So as well as the CLASSPATH,

24
00:01:34.240 --> 00:01:37.290
there are two other locations that Java loads its

25
00:01:37.290 --> 00:01:41.140
classes from. If we look at my computer,

26
00:01:41.140 --> 00:01:44.930
you'll see that I have Java installed inside the Program Files directory.

27
00:01:44.930 --> 00:01:49.330
So I have Program Files, Java, jre1.8 build 25 at this point, and

28
00:01:49.330 --> 00:01:54.440
there's a lib folder. And inside the lib folder, we have rt.jar.

29
00:01:54.440 --> 00:01:59.480
And this rt.jar, this is the Java runtime .jar that contains the

30
00:01:59.480 --> 00:02:00.800
base class library if you like.

31
00:02:00.800 --> 00:02:03.710
These are the base classes that Java uses.

32
00:02:03.710 --> 00:02:11.430
So if I name this to rt.zip and then look inside this file, we'll

33
00:02:11.430 --> 00:02:18.160
see that inside here we have things like java.lang. And then if I

34
00:02:18.160 --> 00:02:20.960
do a search, we'll find we have, for example,

35
00:02:20.960 --> 00:02:22.270
the string class.

36
00:02:22.270 --> 00:02:28.190
So this library contains the core Java classes, and many of the classes that

37
00:02:28.190 --> 00:02:31.420
we use inside our application will be loaded from here.

38
00:02:31.420 --> 00:02:35.820
So this is, if you like, the first port of call for any application that wants

39
00:02:35.820 --> 00:02:41.340
to load Java classes. So let me rename that back to jar.

40
00:02:41.340 --> 00:02:45.470
You'll also notice that inside my lib directory here, I have

41
00:02:45.470 --> 00:02:51.000
this other directory called ext. Inside the ext directory, this

42
00:02:51.000 --> 00:02:55.980
is the Java extensions directory, are also a set of JAR files. And in here,

43
00:02:55.980 --> 00:02:56.740
for example,

44
00:02:56.740 --> 00:03:00.200
we have things like the Java cryptography extensions. So

45
00:03:00.200 --> 00:03:04.990
these are Java classes that are used by many,

46
00:03:04.990 --> 00:03:09.000
many applications, but aren't part of the core libraries in Java.

47
00:03:09.000 --> 00:03:13.060
They're not part of rt.jar, but we'd like to ship them along with

48
00:03:13.060 --> 00:03:18.120
every other application that we're going to use. Any class, any JAR

49
00:03:18.120 --> 00:03:22.350
file inside the extensions directory, will be used or can be used

50
00:03:22.350 --> 00:03:24.240
by our application.

51
00:03:24.240 --> 00:03:28.040
So, for example, if I take my helper.jar class,

52
00:03:28.040 --> 00:03:31.800
so here's my helper.jar class, and we know that this currently works. If

53
00:03:31.800 --> 00:03:36.640
I do com.pluralsight.Main, then the application runs.

54
00:03:36.640 --> 00:03:41.380
If I go and find that JAR far and delete it and place it,

55
00:03:41.380 --> 00:03:41.960
for example,

56
00:03:41.960 --> 00:03:47.940
inside a temporary folder here, so we can see that's now

57
00:03:47.940 --> 00:03:50.700
gone from the lib folder, and try and run the application

58
00:03:50.700 --> 00:03:54.440
again, the application now fails.

59
00:03:54.440 --> 00:04:00.120
If I now take that same JAR file from the temporary folder and move it to

60
00:04:00.120 --> 00:04:09.500
the jre extension folder, so this is now part of the extension classes,

61
00:04:09.500 --> 00:04:14.020
and go back to my command prompt and try and run the application, then

62
00:04:14.020 --> 00:04:16.240
the application now works again.

63
00:04:16.240 --> 00:04:20.770
And what's happening now is that com.pluralsight.Main is being found in

64
00:04:20.770 --> 00:04:25.660
the classes folder. Lib\helper.jar doesn't exist. And instead, it's

65
00:04:25.660 --> 00:04:29.140
finding helper.jar inside the extensions folder.

66
00:04:29.140 --> 00:04:30.730
Just one more test.

67
00:04:30.730 --> 00:04:35.990
If we go back to our command line and delete lib\helper.jar

68
00:04:35.990 --> 00:04:39.650
completely, so we're just using classes, then again the code still

69
00:04:39.650 --> 00:04:44.650
works as we'd expect. There are also a couple of things to note

70
00:04:44.650 --> 00:04:46.740
here about the extensions directory.

71
00:04:46.740 --> 00:04:51.320
It's also used by the javac compiler.

72
00:04:51.320 --> 00:04:54.270
We have to remember in this case that there are two extensions

73
00:04:54.270 --> 00:04:58.750
directories possibly, one used by the Java runtime environment and

74
00:04:58.750 --> 00:05:03.130
one used by the Java SDK, and these could be in different places.

75
00:05:03.130 --> 00:05:06.640
The appropriate one we picked up,

76
00:05:06.640 --> 00:05:10.580
depending on which copy of Java you use, that's where the

77
00:05:10.580 --> 00:05:12.570
extensions directory will be found.

78
00:05:12.570 --> 00:05:17.960
So for my Java runtime environment, the extensions directory was in Program

79
00:05:17.960 --> 00:05:25.980
Files, Java, jre1.8.0_25, lib, ext. For my JDK, I'm running it from my home

80
00:05:25.980 --> 00:05:32.290
kevinjdev Java folder. And inside there, that has a jre folder that contains

81
00:05:32.290 --> 00:05:38.830
a lib that contains an extension. And in here, I've placed helper.jar. So

82
00:05:38.830 --> 00:05:42.190
from my command prompt,

83
00:05:42.190 --> 00:05:47.840
I can run javac ‑sourcepath src

84
00:05:47.840 --> 00:05:58.880
src\com\pluralsight\Main.java. That will compile Main.java

85
00:05:58.880 --> 00:06:02.740
using the helper.jar file from the extensions directory.

86
00:06:02.740 --> 00:06:08.840
If that JAR file didn't exist, then my Main.java would not compile.

87
00:06:08.840 --> 00:06:13.810
The other thing to know about the extensions directory is that you can also set

88
00:06:13.810 --> 00:06:19.320
it explicitly. So we can run Java, again setting the CLASSPATH to classes, but

89
00:06:19.320 --> 00:06:23.000
now setting the extensions directory to c:\lib.

90
00:06:23.000 --> 00:06:24.940
This could be any location.

91
00:06:24.940 --> 00:06:27.980
And again, if we try and run this code, the code fails.

92
00:06:27.980 --> 00:06:33.500
If I take my helper.jar and place it in this lib folder and go back to

93
00:06:33.500 --> 00:06:36.510
the command prompt and run the command again, then the application

94
00:06:36.510 --> 00:06:43.000
works again. So it allows us to set the extensions directory wherever we want to as part of running Java.

