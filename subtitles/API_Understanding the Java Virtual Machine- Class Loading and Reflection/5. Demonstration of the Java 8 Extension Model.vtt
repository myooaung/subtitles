WEBVTT
1
00:00:01.730 --> 00:00:06.610
So printing with delegation is actually quite straightforward.

2
00:00:06.610 --> 00:00:11.070
The first thing we'll do is grab a reference to the system class loader.

3
00:00:11.070 --> 00:00:13.740
This is the class loader that's being loaded to load the

4
00:00:13.740 --> 00:00:16.940
current set of classes on the class path.

5
00:00:16.940 --> 00:00:20.300
The method is defined to return something of type classLoader.

6
00:00:20.300 --> 00:00:23.320
It actually returns something of type URLClassLoader.

7
00:00:23.320 --> 00:00:26.430
So we can safely cast it here to the URLClassLoader.

8
00:00:26.430 --> 00:00:29.740
Once we have that, we can there add a loop.

9
00:00:29.740 --> 00:00:31.250
And the loop simply says,

10
00:00:31.250 --> 00:00:35.040
print out the class loader and then call this class loader's

11
00:00:35.040 --> 00:00:38.720
getParent method. And when that doesn't return null,

12
00:00:38.720 --> 00:00:42.520
go back around the loop and then print out the classLoader again.

13
00:00:42.520 --> 00:00:45.860
If getParent does return null, we're at the top of the hierarchy,

14
00:00:45.860 --> 00:00:50.080
and that means we've now reached the Bootstrap classloader.

15
00:00:50.080 --> 00:00:52.980
So we simply print out the fact that we have that loader.

16
00:00:52.980 --> 00:00:56.680
So we can now compile the code similar to what we had before,

17
00:00:56.680 --> 00:00:58.190
so javac sourcepath.

18
00:00:58.190 --> 00:00:59.330
In this case,

19
00:00:59.330 --> 00:01:04.540
we are compiling Delegation.java and putting it into the classes folder.

20
00:01:04.540 --> 00:01:07.220
Once compiled, we can run the code,

21
00:01:07.220 --> 00:01:11.160
so we can do java â€‘cp classes and then

22
00:01:11.160 --> 00:01:14.220
com.pluralsight.delegation and let this run.

23
00:01:14.220 --> 00:01:17.440
And we see it prints out three class loaders.

24
00:01:17.440 --> 00:01:22.140
So we get the app class loader,

25
00:01:22.140 --> 00:01:30.820
we get the extension class loader, and we get the bootstrap class loader.

26
00:01:30.820 --> 00:01:34.770
So one more thing we can do with this delegation list is we can

27
00:01:34.770 --> 00:01:39.200
print out a list of the URLs that the class loader is trying to

28
00:01:39.200 --> 00:01:42.650
load its classes from, i.e. the locations that it's trying to

29
00:01:42.650 --> 00:01:44.390
get the classes from.

30
00:01:44.390 --> 00:01:48.470
And we can do that by adding another loop. So we can walk out to

31
00:01:48.470 --> 00:01:52.240
each class loader and call getURLs, and this will return a

32
00:01:52.240 --> 00:01:55.760
collection of the URLs we're loading from. And then we simply print

33
00:01:55.760 --> 00:01:59.790
out the path for each of those URLs, and we just tab this and add a

34
00:01:59.790 --> 00:02:01.940
new line onto the end.

35
00:02:01.940 --> 00:02:03.940
So if we save this,

36
00:02:03.940 --> 00:02:12.800
go back to the command prompt, and compile it again and then run it again,

37
00:02:12.800 --> 00:02:18.060
we now see that the app class loader is trying to load from demos classes.

38
00:02:18.060 --> 00:02:22.210
The extensions class loader is trying to load from everything in the extensions

39
00:02:22.210 --> 00:02:25.540
directory. And then the bootstrap class loader, that's returned null as we've

40
00:02:25.540 --> 00:02:31.000
dropped out of the loop, and we're not listing what it's loading, but this is trying to load our bootstrap classes.

