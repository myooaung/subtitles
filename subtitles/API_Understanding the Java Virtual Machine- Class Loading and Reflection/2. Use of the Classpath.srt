1
00:00:02,340 --> 00:00:06,240
To demonstrate the use of the CLASSPATH in Java,

2
00:00:06,240 --> 00:00:09,300
we are going to write two simple Java files,

3
00:00:09,300 --> 00:00:14,370
Helper.java, which will have a getMessage method that'll return a string,

4
00:00:14,370 --> 00:00:18,440
and Main.java, which will have a public static void main,

5
00:00:18,440 --> 00:00:21,520
and this will simply use the helper.

6
00:00:21,520 --> 00:00:26,430
The Helper class will be a public class called Helper,

7
00:00:26,430 --> 00:00:29,570
and this class will have one method,

8
00:00:29,570 --> 00:00:34,790
which will be a public string method called getMessage,

9
00:00:34,790 --> 00:00:43,050
getMessage, and this method will return a string,

10
00:00:43,050 --> 00:00:50,490
something like Hello from helper, and we can save that.

11
00:00:50,490 --> 00:00:56,490
Main.java will have a class, again a public class, so public class Main.

12
00:00:56,490 --> 00:01:07,260
And this class will have a public static void main

13
00:01:07,260 --> 00:01:11,470
method that takes a string array, capital S,

14
00:01:11,470 --> 00:01:14,240
of course, all args.

15
00:01:14,240 --> 00:01:18,870
Inside here, we'll create a helper, and helper is in com.mantiso,

16
00:01:18,870 --> 00:01:33,940
so com.mantiso.Helper helper = new com.mantiso.Helper.

17
00:01:33,940 --> 00:01:42,820
And then we'll simply do System.out.println,

18
00:01:42,820 --> 00:01:55,340
and we'll output Helper.getMessage, all very simple.

19
00:01:55,340 --> 00:01:59,180
To compile this, we'll go to the command prompt.

20
00:01:59,180 --> 00:02:04,240
And at the command prompt, we'll run this command to compile the Helper class.

21
00:02:04,240 --> 00:02:07,300
What we're seeing here is they compile the source files

22
00:02:07,300 --> 00:02:11,300
from src\com\mantiso\Helper.java,

23
00:02:11,300 --> 00:02:15,320
and I'll put the class file into the classes directory.

24
00:02:15,320 --> 00:02:21,900
If we do that, first of all, for Helper.java and then again for Main.java,

25
00:02:21,900 --> 00:02:25,490
what we end up with is a classes directory. And,

26
00:02:25,490 --> 00:02:28,400
in the subdirectory of classes,

27
00:02:28,400 --> 00:02:32,190
we'll see that we have com\mantiso and com\pluralsight.

28
00:02:32,190 --> 00:02:36,490
In com\pluralsight, we have the Main class,

29
00:02:36,490 --> 00:02:42,140
and in com\mantiso, we'll have the Helper class.

30
00:02:42,140 --> 00:02:43,960
To run this code from the command line,

31
00:02:43,960 --> 00:02:47,440
we'd use Java directly to execute the class files.

32
00:02:47,440 --> 00:02:50,640
We need to tell it what class files to execute.

33
00:02:50,640 --> 00:02:53,640
So you'd think we might be able to do something like java

34
00:02:53,640 --> 00:03:03,580
classes\com\pluralsight\Main.class, but that's simply not going to work.

35
00:03:03,580 --> 00:03:07,980
The class is not called classes\com\pluralsight\Main.

36
00:03:07,980 --> 00:03:12,540
The name of the class is com.pluralsight.Main.class.

37
00:03:12,540 --> 00:03:23,540
So maybe we could try java classes and then say com.pluralsight.Main.class.

38
00:03:23,540 --> 00:03:24,510
And again, this doesn't work.

39
00:03:24,510 --> 00:03:26,540
It simply doesn't find the classes there.

40
00:03:26,540 --> 00:03:30,510
So we have the tell Java where to find these classes,

41
00:03:30,510 --> 00:03:32,440
and there are two ways of doing this.

42
00:03:32,440 --> 00:03:33,800
We could set a global CLASSPATH,

43
00:03:33,800 --> 00:03:38,940
and we do that by setting the CLASSPATH environment variable.

44
00:03:38,940 --> 00:03:39,690
And in this case,

45
00:03:39,690 --> 00:03:44,390
we can say set CLASSPATH=classes as classes is the

46
00:03:44,390 --> 00:03:47,690
directory that contains our Java classes.

47
00:03:47,690 --> 00:03:49,240
If we do that,

48
00:03:49,240 --> 00:03:57,940
I can then say java com.pluralsight.Main, leave the .class off the end,

49
00:03:57,940 --> 00:04:01,140
and the main code runs. We get Hello from helper.

50
00:04:01,140 --> 00:04:04,850
If I unset CLASSPATH,

51
00:04:04,850 --> 00:04:09,220
so I'll just say set CLASSPATH= and try that again. Again, that's not

52
00:04:09,220 --> 00:04:15,370
going to work. It can't find com.pluralsight.Main. Setting the global

53
00:04:15,370 --> 00:04:17,700
CLASSPATH is generally not a good idea,

54
00:04:17,700 --> 00:04:21,540
however, as this will affect every Java application on the system.

55
00:04:21,540 --> 00:04:25,210
If you have an application that uses a JAR file that contains classes, and

56
00:04:25,210 --> 00:04:29,640
that JAR file or another version of that JAR file is installed elsewhere

57
00:04:29,640 --> 00:04:33,910
on your system, and that elsewhere is on the CLASSPATH, then you might

58
00:04:33,910 --> 00:04:38,580
find that you end up using the wrong JAR file. So a better way to set the

59
00:04:38,580 --> 00:04:43,560
CLASSPATH is to set it when we actually run Java itself, and we do that by

60
00:04:43,560 --> 00:04:49,850
saying java ‑cp or java ‑classpath and just specify where the CLASSPATH

61
00:04:49,850 --> 00:04:55,960
is. And we can say java ‑cp classes, and again we can do com.pluralsight,

62
00:04:55,960 --> 00:05:02,940
pluralsight.Main. And again, it will find the code for me.

63
00:05:02,940 --> 00:05:06,640
If we have more than one location to load classes from,

64
00:05:06,640 --> 00:05:10,640
we can provide multiple locations on the CLASSPATH.

65
00:05:10,640 --> 00:05:16,910
We can do that if we're on Windows by separating the locations with a semicolon.

66
00:05:16,910 --> 00:05:21,540
If I'm on a UNIX‑based system, we do it by separating the locations with a colon.

67
00:05:21,540 --> 00:05:26,240
So at the moment, we have a classes directory, and this directory, as we've

68
00:05:26,240 --> 00:05:32,520
seen, contains a com\montiso and a com\pluralsight subdirectory. And it's

69
00:05:32,520 --> 00:05:38,280
the montiso directory that contains our Helper class. What we'll now do is

70
00:05:38,280 --> 00:05:40,890
move our Helper class into a JAR file.

71
00:05:40,890 --> 00:05:45,160
So if we change into the classes folder and then from here,

72
00:05:45,160 --> 00:05:46,840
we can run this command.

73
00:05:46,840 --> 00:05:50,120
This says to create a JAR file, call helper.jar and include

74
00:05:50,120 --> 00:05:54,390
the file called com\montiso\Helper.class.

75
00:05:54,390 --> 00:05:55,480
If we do that,

76
00:05:55,480 --> 00:05:58,440
it creates the file for me. So if I do a dir, there's the

77
00:05:58,440 --> 00:06:04,940
Helper.jar. And I'll then move that file up one layer into

78
00:06:04,940 --> 00:06:07,820
a folder I created called lib.

79
00:06:07,820 --> 00:06:12,660
So if I go back to the root and do a dir, you can see that here now, we have

80
00:06:12,660 --> 00:06:17,090
our classes folder, our lib folder, and our src folder.

81
00:06:17,090 --> 00:06:21,410
The next thing I need to do is to delete the Helper class. So I can

82
00:06:21,410 --> 00:06:29,940
just do del classes\com\montiso\Helper.class.

83
00:06:29,940 --> 00:06:35,340
So now we have a main class that's in the classes directory,

84
00:06:35,340 --> 00:06:37,440
but we have no Helper class there.

85
00:06:37,440 --> 00:06:42,840
So if I try and run java ‑cp classes

86
00:06:42,840 --> 00:06:50,450
com.pluralsight.Main, this will try and execute,

87
00:06:50,450 --> 00:06:53,800
but it will now try and load the com.montiso.Helper

88
00:06:53,800 --> 00:06:56,080
class, and that class doesn't exist.

89
00:06:56,080 --> 00:07:02,000
We get a NoClassDefFoundError. So we need to tell Java where to find that class,

90
00:07:02,000 --> 00:07:07,490
and that class lives in the JAR file. So on the CLASSPATH,

91
00:07:07,490 --> 00:07:12,600
we can now specify a semicolon‑separated list of locations,

92
00:07:12,600 --> 00:07:15,380
and one of those locations could be the JAR file. So I can say

93
00:07:15,380 --> 00:07:20,240
lib\helper.jar and run the code.

94
00:07:20,240 --> 00:07:22,900
Sure enough, it finds the class file again, and the code

95
00:07:22,900 --> 00:07:25,780
executes correctly. So on Windows,

96
00:07:25,780 --> 00:07:31,220
we'd have classes;lib\helper.jar; anything else. On a

97
00:07:31,220 --> 00:07:41,000
UNIX‑based system, we'd use colon, so it would be classes:lib\helper.jar: anything else beyond that.

