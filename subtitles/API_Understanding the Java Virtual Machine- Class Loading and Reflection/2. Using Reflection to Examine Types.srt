1
00:00:02,740 --> 00:00:05,340
To show some of the aspects of reflection, we're

2
00:00:05,340 --> 00:00:07,610
going to use a fairly simple class,

3
00:00:07,610 --> 00:00:12,520
this one here called Car, and this class has a couple of constructors. It

4
00:00:12,520 --> 00:00:16,690
has a default constructor and a constructor that takes an int. It has a

5
00:00:16,690 --> 00:00:20,810
method called drive, a method called accelerate, which is a private

6
00:00:20,810 --> 00:00:24,490
method, and a method called selectDrive, which is a private method. These

7
00:00:24,490 --> 00:00:26,840
are just two helper methods.

8
00:00:26,840 --> 00:00:28,840
So what can we do with reflection?

9
00:00:28,840 --> 00:00:36,280
Well, we know we can create instances, so I can say Class cls = equals Car.class.

10
00:00:36,280 --> 00:00:39,930
Then I can say cls.newInstance, and I can create an instance

11
00:00:39,930 --> 00:00:41,930
of the car, and that is used in reflection.

12
00:00:41,930 --> 00:00:43,930
We're creating the object,

13
00:00:43,930 --> 00:00:47,460
using its type at runtime rather than using the new keyword

14
00:00:47,460 --> 00:00:50,300
and discovering its type at compile time.

15
00:00:50,300 --> 00:00:52,010
And if I run this code,

16
00:00:52,010 --> 00:00:56,440
we'll see that an instance is created. There's no error here.

17
00:00:56,440 --> 00:00:58,910
If I go back into the Car class, though,

18
00:00:58,910 --> 00:01:01,910
and remove the default constructor and run the code

19
00:01:01,910 --> 00:01:04,200
again, now we got an exception.

20
00:01:04,200 --> 00:01:06,190
We got an instantiation exception,

21
00:01:06,190 --> 00:01:10,940
which tells us that it can't find com.pluralsight.Car.<init>.

22
00:01:10,940 --> 00:01:12,650
Init is the constructor.

23
00:01:12,650 --> 00:01:17,610
It's looking for a constructor with no parameters to try and call, but we

24
00:01:17,610 --> 00:01:20,330
don't have one currently, so let's put this back as it was.

25
00:01:20,330 --> 00:01:22,940
So that's about the simplest thing that we can do.

26
00:01:22,940 --> 00:01:27,030
However, once we have class of the type we are trying to examine,

27
00:01:27,030 --> 00:01:30,940
we can discover a whole bunch of information about that class.

28
00:01:30,940 --> 00:01:32,020
So, for example,

29
00:01:32,020 --> 00:01:38,100
we can say cls.getMethods, and this returns an array of method types,

30
00:01:38,100 --> 00:01:42,440
and this gives me information about each of the methods on the class.

31
00:01:42,440 --> 00:01:44,730
So in here, for example, we could write a for loop.

32
00:01:44,730 --> 00:01:49,390
We could say for (Method method: methods). And inside

33
00:01:49,390 --> 00:01:53,080
here, we can print out the name of the methods. We say

34
00:01:53,080 --> 00:02:00,280
%s\r\n and then do method.getName.

35
00:02:00,280 --> 00:02:02,540
And if I run this code now, we'll see the name of the

36
00:02:02,540 --> 00:02:07,540
methods on the class. So notice in this list,

37
00:02:07,540 --> 00:02:11,910
we get methods from the class itself, and method from object is the methods

38
00:02:11,910 --> 00:02:15,810
that we derive from. So by my calling getMethods, that returns a list of the

39
00:02:15,810 --> 00:02:21,740
public methods on the type and the methods of any types that we derive from.

40
00:02:21,740 --> 00:02:27,240
Notice as well, we get three wait methods, and that's three different

41
00:02:27,240 --> 00:02:31,720
overloads of the wait method. And we can see that by printing out the number

42
00:02:31,720 --> 00:02:34,200
of parameters for each method.

43
00:02:34,200 --> 00:02:39,160
So each method type has a function called getParameterCount.

44
00:02:39,160 --> 00:02:43,530
We're going to assign this to an int count, let's say. We

45
00:02:43,530 --> 00:02:47,150
can then do something like System.out and print out the

46
00:02:47,150 --> 00:02:48,690
count. Let's put this in brackets,

47
00:02:48,690 --> 00:02:52,480
and so %d for the count is going to be an integer, and say

48
00:02:52,480 --> 00:02:57,580
count here. At the end of this, we'll do a print line, and

49
00:02:57,580 --> 00:02:59,880
we'll remove the new lines here.

50
00:02:59,880 --> 00:03:01,860
And then if we run the code again,

51
00:03:01,860 --> 00:03:04,160
we'll see that there's a version of wait with no parameters,

52
00:03:04,160 --> 00:03:07,590
there's a version of wait with 1 parameter, and there's a

53
00:03:07,590 --> 00:03:10,440
version of wait with 2 parameters.

54
00:03:10,440 --> 00:03:14,940
So getMethods returns all the public methods of the class or any

55
00:03:14,940 --> 00:03:19,140
classes or interfaces that we derive from or implement.

56
00:03:19,140 --> 00:03:23,940
We can also get the private methods of this class by using a similar method.

57
00:03:23,940 --> 00:03:27,340
Rather than calling getMethods, we can call

58
00:03:27,340 --> 00:03:30,880
getDeclaredMethods, so we're tidying this up slightly.

59
00:03:30,880 --> 00:03:35,500
If we say getDeclaredMethods here, we'll put an empty line here just

60
00:03:35,500 --> 00:03:38,710
to separate the two, and if I run the code again,

61
00:03:38,710 --> 00:03:42,160
we get the list of methods here, and then following that,

62
00:03:42,160 --> 00:03:46,150
we get the declared methods, and these include drive as it was here.

63
00:03:46,150 --> 00:03:49,140
That's the public method with two parameters.

64
00:03:49,140 --> 00:03:57,000
Now we also get selectDrive, which is a single parameter, and accelerate, and that's a private method with 0 parameters.

