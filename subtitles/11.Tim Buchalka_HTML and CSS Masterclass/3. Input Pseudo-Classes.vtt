WEBVTT
1
00:00:05.200 --> 00:00:10.560
In this lecture we will learn about several pseudo classes CSL gives us that rely on user input.

2
00:00:10.780 --> 00:00:15.760
Let's create three input elements of type text that we can use to see examples of these pseudo classes

3
00:00:15.760 --> 00:00:16.700
in action.

4
00:00:16.840 --> 00:00:21.910
We can use selectors that rely on whether an input element is enabled or disabled to control whether

5
00:00:21.910 --> 00:00:24.100
an input field is enabled are disabled.

6
00:00:24.100 --> 00:00:30.010
We can use the disabled attribute if an input field contains the disabled attribute then it is disabled

7
00:00:30.490 --> 00:00:35.950
if an input field does not contain the disabled attribute then it is enabled if we want to apply a style

8
00:00:35.950 --> 00:00:41.860
to all enabled input elements we can use the enabled selector to see this selector in action.

9
00:00:41.860 --> 00:00:47.020
Let's say I add the disabled attribute to our first input field then we will get an opening and closing

10
00:00:47.020 --> 00:00:53.200
style tag inside of which will Gor selector and style code we will use that enabled selector and specify

11
00:00:53.200 --> 00:00:58.480
that any enabled input element should have a background color of blue since we added the disabled attribute

12
00:00:58.480 --> 00:01:02.640
to the first input element only the other two will have the blue background.

13
00:01:02.650 --> 00:01:08.060
Let's go to the web browser and run our code as you can see.

14
00:01:08.240 --> 00:01:11.840
Our second and third input elements have a background color of blue.

15
00:01:12.140 --> 00:01:14.890
Let's jump back to the editor and look at another example.

16
00:01:16.820 --> 00:01:22.400
CSSA also gives us the disabled selector which is the exact opposite of the enabled selector.

17
00:01:22.400 --> 00:01:28.040
If we change the selector in our example from enabled to disabled and run our code you will notice that

18
00:01:28.040 --> 00:01:30.350
the first input field has a blue background.

19
00:01:30.470 --> 00:01:33.820
Let's go back to the editor.

20
00:01:33.890 --> 00:01:38.800
We can also use selectors that are based on whether or not the input field is optional or required.

21
00:01:39.110 --> 00:01:45.020
The required selector allows us to apply style to a required input element if the element has the required

22
00:01:45.020 --> 00:01:48.620
attribute then the specified style will be applied to it.

23
00:01:48.890 --> 00:01:53.630
To illustrate an example of this let's continue using the same example elements we have been working

24
00:01:53.630 --> 00:01:58.040
with but change the attribute in the first input element from disabled to required.

25
00:01:58.370 --> 00:02:03.470
Then we will go to our style code and we'll change the selector from disabled to required when we run

26
00:02:03.470 --> 00:02:04.030
the code.

27
00:02:04.040 --> 00:02:08.570
You will notice that the background of the first input element turns blue since it has the required

28
00:02:08.570 --> 00:02:09.520
attribute.

29
00:02:09.620 --> 00:02:16.770
Then we will go back to the editor the optional selector is the opposite of the required selector.

30
00:02:16.840 --> 00:02:23.730
If we change the selector in our example from acquired to optional and then run our code we will see

31
00:02:23.730 --> 00:02:26.900
the second and third input fields have a background color of blue.

32
00:02:27.090 --> 00:02:33.990
Let's jump back to the editor CSSA also gives us selectors that we can use to stylize input elements

33
00:02:34.080 --> 00:02:37.800
based on whether or not the input within an input field is valid input.

34
00:02:37.950 --> 00:02:43.350
Say for example we allow our input fields to accept email input by giving them a type attribute with

35
00:02:43.350 --> 00:02:44.560
a value of email.

36
00:02:44.850 --> 00:02:48.660
Let's change the value of the type attribute to email rather than text.

37
00:02:48.960 --> 00:02:54.090
Let's change our style code to use the invalid selector and apply a red border of four pixels around

38
00:02:54.090 --> 00:02:54.940
the input field.

39
00:02:54.960 --> 00:02:57.840
If the value input by the user is invalid.

40
00:02:57.960 --> 00:03:02.940
Next let's run this code in the browser and add some invalid input into one of our input fields.

41
00:03:02.940 --> 00:03:08.340
Since we specified that our input field is of type email typing anything except for a valid email address

42
00:03:08.340 --> 00:03:10.630
will apply the invalid style to it.

43
00:03:10.650 --> 00:03:17.030
Let's go back to the editor the opposite of the invalid selector is the valid selector.

44
00:03:17.090 --> 00:03:22.250
If we change the selector in our example code to valid then the style will only be applied when we type

45
00:03:22.250 --> 00:03:23.680
in a valid email.

46
00:03:23.690 --> 00:03:29.150
One clarification here the email doesn't have to be an actual email it just has to be in the format

47
00:03:29.150 --> 00:03:35.240
of text followed by the at sign followed by more text and then a dot com at the end.

48
00:03:35.480 --> 00:03:42.580
Let's jump back to the editor the focus selector applies a style to whichever input field is currently

49
00:03:42.580 --> 00:03:43.630
in focus.

50
00:03:43.960 --> 00:03:48.570
Being an folkish just means that the user's cursor is currently inside the input field.

51
00:03:48.580 --> 00:03:52.870
In other words the input field is the latest element that the user clicked into.

52
00:03:52.990 --> 00:04:00.570
We will change our selector focus and run this code in the browser when we click into an input element.

53
00:04:00.580 --> 00:04:03.320
You will notice that our red border style is applied to it.

54
00:04:03.490 --> 00:04:06.290
Let's jump back to the editor and look at another example.

55
00:04:08.240 --> 00:04:13.700
The read only and read write selectors allow us to change the style of the input fields that I've read

56
00:04:13.700 --> 00:04:16.640
only access or read write access.

57
00:04:16.640 --> 00:04:20.540
We can use the read only attribute to make our input element read only.

58
00:04:20.630 --> 00:04:26.090
We also specify a value for element using the value attribute then if we change our selected or read

59
00:04:26.090 --> 00:04:32.620
only and run our code we will see our style apply to a read only input field.

60
00:04:32.620 --> 00:04:39.080
Let's go back to the editor the read write selector is the opposite of the read only selector.

61
00:04:39.170 --> 00:04:44.690
It applies a specified style to input fields that the user can type into if we change our selected or

62
00:04:44.690 --> 00:04:48.390
read write and run our code in the browser.

63
00:04:48.520 --> 00:04:53.380
You will see the style applied to our second and third input fields that do not contain the read only

64
00:04:53.380 --> 00:04:55.920
attribute in the next lecture.

65
00:04:55.990 --> 00:05:00.220
We will learn about the pseudo classes CSSA gives us that function based on an element type.
