1
00:00:05,220 --> 00:00:10,740
In this lecture we will learn about the H I'll canvass the H I'll l canvasses a container that enables

2
00:00:10,740 --> 00:00:16,170
us to draw graphics through javascript code and provide several mechanisms for creating interactive

3
00:00:16,170 --> 00:00:20,680
content such as animation and games to create a canvas.

4
00:00:20,730 --> 00:00:22,280
We use the canvas tag.

5
00:00:22,350 --> 00:00:26,240
Let's start by adding an opening and closing canvas tag to our code.

6
00:00:26,280 --> 00:00:30,310
We will also add a width and height to our canvas to each team.

7
00:00:30,330 --> 00:00:35,160
Canvas has a context which is the actual surface that images are drawn onto.

8
00:00:35,490 --> 00:00:38,520
Let's take a look at how we can draw an image onto the canvas.

9
00:00:38,550 --> 00:00:43,400
First we need to add an opening and closing script tagged to our code.

10
00:00:43,410 --> 00:00:45,920
Next we need to give our canvas an ID.

11
00:00:45,930 --> 00:00:51,220
This is how we will get a reference to the context of the canvas inside of the script tags.

12
00:00:51,270 --> 00:00:56,420
We can use the document get element by ID function to get a reference to the canvas.

13
00:00:56,580 --> 00:01:02,910
We supply this function the value of the ID that we gave to our canvas canvases have 2D and 3D drawing

14
00:01:02,910 --> 00:01:04,250
contexts.

15
00:01:04,260 --> 00:01:09,930
Since we are going to render a true the image on the canvas we're going to use the 2d context we will

16
00:01:09,930 --> 00:01:14,790
use the H chainmail canvases get context method and pass it a value of 2D.

17
00:01:14,880 --> 00:01:18,120
We need to create a new image that we can assign a source to.

18
00:01:18,180 --> 00:01:24,680
First we will make a new variable and then assign it a new image as you know from working with each

19
00:01:24,680 --> 00:01:26,240
team l image elements.

20
00:01:26,360 --> 00:01:30,300
They have a source attribute where we can assign them the image file that will be displayed.

21
00:01:30,410 --> 00:01:35,320
For this example we will assign our image or source of our star PMG image.

22
00:01:35,330 --> 00:01:39,880
This next piece of code waits until the image loads before we do anything with it.

23
00:01:39,890 --> 00:01:44,660
Finally we will use the drawer image function to draw an image onto our canvas.

24
00:01:44,660 --> 00:01:49,850
Note that we are specifically calling this function on our context variable as that is the actual drawing

25
00:01:49,850 --> 00:01:54,680
surface of the canvas to draw image function takes three arguments.

26
00:01:54,680 --> 00:01:57,910
The first argument is the image to be drawn to the canvas.

27
00:01:57,950 --> 00:02:01,820
The second is the x position at which to draw the image on the canvas.

28
00:02:01,820 --> 00:02:06,500
The third argument is the y position at which to draw the image on the canvas.

29
00:02:06,500 --> 00:02:13,700
Let's go to the web browser and run our code as you can see the image was drawn onto our canvas.

30
00:02:13,730 --> 00:02:19,760
We will now learn about the co-ordinate system on each team will canvas each female canvas is essentially

31
00:02:19,760 --> 00:02:21,190
a 2D grid.

32
00:02:21,340 --> 00:02:25,700
The 00 origin point on the canvas is the upper left hand corner.

33
00:02:26,000 --> 00:02:31,550
As you go from the left hand corner of the canvas to the right the x values increase as you go from

34
00:02:31,550 --> 00:02:34,350
the left hand corner down to the bottom of the canvas.

35
00:02:34,400 --> 00:02:36,140
The y values increase.

36
00:02:36,440 --> 00:02:43,070
Aside from images there are many other things that we can draw to the canvas we can render text shapes

37
00:02:43,370 --> 00:02:45,190
and gradients to the canvas.

38
00:02:45,380 --> 00:02:47,850
Let's look at an example of each of these.

39
00:02:47,870 --> 00:02:52,520
First we will look at an example of how we can render text to the canvas.

40
00:02:52,520 --> 00:02:57,560
Next we can use the fill text function to render the text to the drawing surface of our canvas.

41
00:02:57,680 --> 00:03:03,170
The full text function is similar to the drawer image function and takes three arguments.

42
00:03:03,170 --> 00:03:07,260
The first is the string value of the text to be rendered to the canvas.

43
00:03:07,430 --> 00:03:13,250
The second and third arguments are the x and y values of the position on the canvas at which to render

44
00:03:13,250 --> 00:03:14,510
the text.

45
00:03:14,510 --> 00:03:16,530
Let's go to the web browser and run our code

46
00:03:20,620 --> 00:03:24,850
as you can see the text that we defined was rendered to the canvas.

47
00:03:24,850 --> 00:03:26,550
Let's jump back to the editor.

48
00:03:26,650 --> 00:03:31,420
We can further customize the display of our text by adding a font and a size to it.

49
00:03:31,420 --> 00:03:37,520
Note that we supply a font value in pixels followed by a font name inside of the same string.

50
00:03:37,600 --> 00:03:41,800
Make sure that this modification is done before the text is rendered to the canvas.

51
00:03:42,070 --> 00:03:49,690
Then we will go to the web browser and run our code as you can see our text was assigned the specified

52
00:03:49,690 --> 00:03:51,340
font and font size.

53
00:03:51,580 --> 00:03:58,810
Let's go back to the editor next let's look at how we can draw shapes to the drawing surface of a canvas

54
00:03:58,810 --> 00:04:05,680
in each TNL we can use the fill function to draw a rectangle onto in each team canvas the fill recked

55
00:04:05,680 --> 00:04:07,810
function takes four parameters.

56
00:04:07,810 --> 00:04:10,440
The first is the x position of the rectangle.

57
00:04:10,480 --> 00:04:13,180
The second is the y position of the rectangle.

58
00:04:13,240 --> 00:04:17,820
The third is the width of the rectangle and the fourth is the height of the rectangle.

59
00:04:17,920 --> 00:04:24,810
Then we will go to the web browser and run our code as you can see the rectangle was drawn onto the

60
00:04:24,810 --> 00:04:25,880
canvas.

61
00:04:25,890 --> 00:04:30,470
Let's jump back to the editor next.

62
00:04:30,510 --> 00:04:33,530
Let's learn how to render gradients to the canvas first.

63
00:04:33,660 --> 00:04:36,620
We will need to create a variable that will store our greedy.

64
00:04:36,960 --> 00:04:43,040
We call to create linear gradient method on the context of our canvas and passing for arguments the

65
00:04:43,050 --> 00:04:49,680
starting exposition the starting y position the ending x position and the ending y position.

66
00:04:49,890 --> 00:04:54,630
We will then add color stops that will define the colors for our gradient and their positions.

67
00:04:54,630 --> 00:04:59,090
For this example we will create a blue gradient that fades to black.

68
00:04:59,190 --> 00:05:04,620
First we will add a color stop for blue at the start of our gradient to tell the greedy and to start

69
00:05:04,620 --> 00:05:05,680
on the left.

70
00:05:05,700 --> 00:05:07,770
Use a value of zero.

71
00:05:07,770 --> 00:05:12,570
Next we will add a color stop for black at the end of our gradient to tell Ingredion to have a black

72
00:05:12,570 --> 00:05:14,820
color stop at the end of our gradient.

73
00:05:14,820 --> 00:05:16,520
We use a value of 1.

74
00:05:16,560 --> 00:05:20,220
Next we need to add the gradient as the style of the context.

75
00:05:20,250 --> 00:05:24,660
Remember the Phil recked function that we used earlier to draw a rectangle to the canvas.

76
00:05:24,840 --> 00:05:27,540
We can use that same function to draw a gradient.

77
00:05:27,540 --> 00:05:34,640
Let's go to the web browser and run our code as you can see the gradient we created was drawn to the

78
00:05:34,640 --> 00:05:38,060
canvas in the next lecture.

79
00:05:38,060 --> 00:05:40,220
We will learn about scalable vector graphics.
