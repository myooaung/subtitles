WEBVTT
1
00:00:02.130 --> 00:00:04.470
So at this point we already covered

2
00:00:04.470 --> 00:00:07.582
a lot of important essentials about GitHub Actions

3
00:00:07.582 --> 00:00:10.620
and you are already able to write

4
00:00:10.620 --> 00:00:14.248
your first more meaningful GitHub Action workflows.

5
00:00:14.248 --> 00:00:17.760
Now, there are two last concepts I want to explore

6
00:00:17.760 --> 00:00:20.664
as part of this section before we then dive way deeper

7
00:00:20.664 --> 00:00:24.120
into GitHub Actions in all the other sections.

8
00:00:24.120 --> 00:00:26.370
And the first concept I wanna explore,

9
00:00:26.370 --> 00:00:29.400
is the concept of having multiple triggers.

10
00:00:29.400 --> 00:00:32.880
Thus far, we always only had one simple trigger.

11
00:00:32.880 --> 00:00:35.940
Now let's say, we don't just wanna trigger this Workflow

12
00:00:35.940 --> 00:00:38.370
if we push to this Repository

13
00:00:38.370 --> 00:00:40.800
but we instead also wanna allow ourselves

14
00:00:40.800 --> 00:00:43.473
to manually trigger this workflow in the future.

15
00:00:44.430 --> 00:00:46.890
If that's our goal, we can wrap this here

16
00:00:46.890 --> 00:00:49.950
in square brackets, this event name

17
00:00:49.950 --> 00:00:54.540
and add workflow-dispatch as a second event

18
00:00:54.540 --> 00:00:56.850
because that's that event that allows us to

19
00:00:56.850 --> 00:00:59.130
trigger this workflow manually.

20
00:00:59.130 --> 00:01:01.170
And of course, we can add as many other events

21
00:01:01.170 --> 00:01:02.133
here as we want.

22
00:01:03.330 --> 00:01:04.200
So that's a quick

23
00:01:04.200 --> 00:01:07.320
and easy way of adding multiple event triggers.

24
00:01:07.320 --> 00:01:12.320
With this changed, I can again create a commit,

25
00:01:13.860 --> 00:01:17.913
added multiple events and push this to GitHub.

26
00:01:18.960 --> 00:01:22.710
And you will notice that now that this was pushed,

27
00:01:22.710 --> 00:01:25.530
it of course still executes automatically

28
00:01:25.530 --> 00:01:28.704
because we still had a push event here.

29
00:01:28.704 --> 00:01:32.601
But if I take a look at this workflow by clicking on it,

30
00:01:32.601 --> 00:01:35.790
I now also have this Run Workflow button,

31
00:01:35.790 --> 00:01:38.670
which allows me to trigger it manually.

32
00:01:38.670 --> 00:01:39.810
And I can do this here

33
00:01:39.810 --> 00:01:43.923
even if the previous workflow execution is still running.

34
00:01:44.850 --> 00:01:47.968
Now I got both executions running to be precise,

35
00:01:47.968 --> 00:01:50.400
they're both queued at the moment

36
00:01:50.400 --> 00:01:52.290
and they will eventually be executed.

37
00:01:52.290 --> 00:01:53.250
Here we go.

38
00:01:53.250 --> 00:01:56.551
Now they are both running simultaneously.

39
00:01:56.551 --> 00:01:59.850
It's worth noting that this execution here is coming

40
00:01:59.850 --> 00:02:01.560
from me manually starting it.

41
00:02:01.560 --> 00:02:03.780
And this first execution was triggered

42
00:02:03.780 --> 00:02:06.870
because we pushed to this Repository.

43
00:02:06.870 --> 00:02:10.710
So that's how we can use multiple events as triggers.

44
00:02:10.710 --> 00:02:14.220
Now we can actually (indistinct) configure these triggers

45
00:02:14.220 --> 00:02:16.620
in way greater detail.

46
00:02:16.620 --> 00:02:17.940
We can, for example

47
00:02:17.940 --> 00:02:21.810
configure that only for pushes to specific branches.

48
00:02:21.810 --> 00:02:25.050
This workflow should be triggered, which could make sense

49
00:02:25.050 --> 00:02:26.850
if you only wanna run your tests

50
00:02:26.850 --> 00:02:30.480
and deploy the website if we're pushing to the main branch,

51
00:02:30.480 --> 00:02:33.360
but not if we're pushing to other branches.

52
00:02:33.360 --> 00:02:34.800
But that's something we'll explore

53
00:02:34.800 --> 00:02:38.400
in the next course sections, where we dive way deeper

54
00:02:38.400 --> 00:02:39.723
into GitHub Actions.

