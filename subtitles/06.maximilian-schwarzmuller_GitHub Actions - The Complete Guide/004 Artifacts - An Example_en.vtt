WEBVTT
1
00:00:02.070 --> 00:00:05.308
For this back here in this demo workflow,

2
00:00:05.308 --> 00:00:07.740
it's worth taking a closer look

3
00:00:07.740 --> 00:00:11.100
at this workflow to understand what it's doing.

4
00:00:11.100 --> 00:00:13.140
It's named Deploy website,

5
00:00:13.140 --> 00:00:15.087
but of course the name isn't too important,

6
00:00:15.087 --> 00:00:19.170
and it will be activated when we push to the main branch.

7
00:00:19.170 --> 00:00:21.810
And then we got three jobs in there:

8
00:00:21.810 --> 00:00:26.610
A test job, a build job, and a deploy job.

9
00:00:26.610 --> 00:00:29.910
Now the deploy job is just logging some dummy message

10
00:00:29.910 --> 00:00:32.580
to the console, so to the terminal.

11
00:00:32.580 --> 00:00:36.510
But the test job does something useful, actually.

12
00:00:36.510 --> 00:00:39.090
It gets the code, installs dependencies,

13
00:00:39.090 --> 00:00:41.760
and then runs the linting and testing scripts

14
00:00:41.760 --> 00:00:44.580
to validate whether our code is written correctly

15
00:00:44.580 --> 00:00:46.023
and works as intended.

16
00:00:47.040 --> 00:00:50.790
The build job then runs after the test job

17
00:00:50.790 --> 00:00:53.220
because it needs the test job.

18
00:00:53.220 --> 00:00:55.860
And you learned earlier that you can run jobs

19
00:00:55.860 --> 00:00:59.340
after each other with help of that needs configuration

20
00:00:59.340 --> 00:01:02.010
instead of running them in parallel.

21
00:01:02.010 --> 00:01:04.950
And then in this build job, I also get the code.

22
00:01:04.950 --> 00:01:06.764
We also install the dependencies,

23
00:01:06.764 --> 00:01:09.600
but then we run the build script.

24
00:01:09.600 --> 00:01:11.760
And this build script here,

25
00:01:11.760 --> 00:01:14.700
for this demo project which I'm providing to you,

26
00:01:14.700 --> 00:01:18.600
will actually produce some output files.

27
00:01:18.600 --> 00:01:20.529
And to see which files will be produced,

28
00:01:20.529 --> 00:01:22.713
I will run it locally here.

29
00:01:23.970 --> 00:01:25.950
After installing the dependencies,

30
00:01:25.950 --> 00:01:28.770
if I run npm run build, this script,

31
00:01:28.770 --> 00:01:32.318
or this command will produce this dist folder,

32
00:01:32.318 --> 00:01:35.487
and it would be the contents of this dist folder

33
00:01:35.487 --> 00:01:38.760
that would be uploaded to some web server,

34
00:01:38.760 --> 00:01:41.580
some web host, to host this website.

35
00:01:41.580 --> 00:01:43.680
Which is being built here.

36
00:01:43.680 --> 00:01:46.200
So that's the output of this build step.

37
00:01:46.200 --> 00:01:48.360
And of course, it would be reasonable

38
00:01:48.360 --> 00:01:52.830
to assume that we want access to these produced files,

39
00:01:52.830 --> 00:01:55.080
because they don't help us that much

40
00:01:55.080 --> 00:01:57.840
if they only live inside of that workflow

41
00:01:57.840 --> 00:01:59.970
and on that runner machine.

42
00:01:59.970 --> 00:02:02.040
Because once our workflow is finished

43
00:02:02.040 --> 00:02:03.930
the runner machine will be shut down

44
00:02:03.930 --> 00:02:06.663
and these produced files will be lost.

45
00:02:07.500 --> 00:02:11.310
So it would be great if we could store these produced files,

46
00:02:11.310 --> 00:02:14.310
such that we as a user can download them

47
00:02:14.310 --> 00:02:18.660
and so that we can inspect them, test them locally,

48
00:02:18.660 --> 00:02:21.663
or upload to some web hosting provider.

49
00:02:22.560 --> 00:02:25.440
We also might want to use them in this deploy job,

50
00:02:25.440 --> 00:02:27.150
but that will be the second step,

51
00:02:27.150 --> 00:02:30.420
where we then access those files automatically.

52
00:02:30.420 --> 00:02:32.670
As a first step let's make sure that

53
00:02:32.670 --> 00:02:36.660
we can store these produced files and access them manually.

54
00:02:36.660 --> 00:02:39.030
And of course this dist folder, in the end,

55
00:02:39.030 --> 00:02:43.170
is the artifact produced by this build job.

56
00:02:43.170 --> 00:02:45.660
Or the contents of this dist folder

57
00:02:45.660 --> 00:02:49.050
are the artifacts, if we wanna put it like this.

58
00:02:49.050 --> 00:02:51.960
So we wanna store this dist folder as an artifact

59
00:02:51.960 --> 00:02:55.443
and to do this we can simply add a new step here.

