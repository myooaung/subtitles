WEBVTT
1
00:00:02.130 --> 00:00:02.963
So let's see

2
00:00:02.963 --> 00:00:05.400
how we can use this service container feature

3
00:00:05.400 --> 00:00:07.980
in our concrete workflow here.

4
00:00:07.980 --> 00:00:09.600
And by the way, you don't have

5
00:00:09.600 --> 00:00:11.550
to run your job in a container

6
00:00:11.550 --> 00:00:14.010
just to add a extra service container.

7
00:00:14.010 --> 00:00:16.920
You can use service containers with the jobs

8
00:00:16.920 --> 00:00:19.380
that are running in containers themselves

9
00:00:19.380 --> 00:00:21.810
but you can also use service containers

10
00:00:21.810 --> 00:00:24.360
in conjunction with jobs that run directly

11
00:00:24.360 --> 00:00:26.190
on the runner machine.

12
00:00:26.190 --> 00:00:29.040
So therefore here, I do have a job running in a container

13
00:00:29.040 --> 00:00:31.263
but that is technically not needed.

14
00:00:32.340 --> 00:00:34.830
But with such a job running in a container,

15
00:00:34.830 --> 00:00:37.893
how can we add a service to this job?

16
00:00:38.910 --> 00:00:43.440
Well, you do that by adding a extra services key.

17
00:00:43.440 --> 00:00:47.880
And that's important, services, plural, not service

18
00:00:47.880 --> 00:00:50.580
because you can add more than one service container

19
00:00:50.580 --> 00:00:51.960
for a job.

20
00:00:51.960 --> 00:00:53.220
And that's also important.

21
00:00:53.220 --> 00:00:57.000
Services belong to a job, so to one specific job.

22
00:00:57.000 --> 00:00:59.610
If different jobs need different services,

23
00:00:59.610 --> 00:01:02.730
you do set them up with different services settings

24
00:01:02.730 --> 00:01:04.980
for those different jobs.

25
00:01:04.980 --> 00:01:07.950
So here I added services for this test job.

26
00:01:07.950 --> 00:01:10.380
And then nested below services,

27
00:01:10.380 --> 00:01:14.700
you add an identifier, a label for your service

28
00:01:14.700 --> 00:01:17.400
for the first service you wanna add.

29
00:01:17.400 --> 00:01:19.440
And here I wanna add a service

30
00:01:19.440 --> 00:01:21.720
that runs a MongoDB database,

31
00:01:21.720 --> 00:01:24.543
which can be used by these automated tests.

32
00:01:25.800 --> 00:01:29.100
Therefore, I'll give this service a name of mongodb,

33
00:01:29.100 --> 00:01:31.050
a label of mongodb

34
00:01:31.050 --> 00:01:33.330
but as mentioned, this is totally up to you

35
00:01:33.330 --> 00:01:35.340
and could be anything.

36
00:01:35.340 --> 00:01:37.503
But here, mongodb makes a lot of sense.

37
00:01:38.640 --> 00:01:41.490
Now, I could now add another-service here

38
00:01:41.490 --> 00:01:44.610
if I wanted to but here I only need one service

39
00:01:44.610 --> 00:01:46.440
and that is that mongodb service

40
00:01:46.440 --> 00:01:49.740
but that service needs more configuration.

41
00:01:49.740 --> 00:01:53.250
Therefore with one additional level of nesting,

42
00:01:53.250 --> 00:01:56.790
you can add more service-specific keys.

43
00:01:56.790 --> 00:01:58.680
And now the keys which you can add here

44
00:01:58.680 --> 00:02:02.130
are clearly defined by GitHub Actions.

45
00:02:02.130 --> 00:02:04.740
And the first key which you always must add

46
00:02:04.740 --> 00:02:06.600
is the image key

47
00:02:06.600 --> 00:02:10.080
because your services always run in containers.

48
00:02:10.080 --> 00:02:11.700
So this is not up to you.

49
00:02:11.700 --> 00:02:14.280
They don't run on the runner itself.

50
00:02:14.280 --> 00:02:18.630
Services instead always run inside of images.

51
00:02:18.630 --> 00:02:21.270
Therefore, you always have to add the image key

52
00:02:21.270 --> 00:02:23.160
and then define your base image

53
00:02:23.160 --> 00:02:26.160
that should be used by this service.

54
00:02:26.160 --> 00:02:27.960
Now, which image you wanna use depends

55
00:02:27.960 --> 00:02:29.820
on which service you're starting here.

56
00:02:29.820 --> 00:02:31.833
Here I'm using the mongo image,

57
00:02:32.760 --> 00:02:34.140
written like this

58
00:02:34.140 --> 00:02:36.960
because that's another official image hosted

59
00:02:36.960 --> 00:02:38.460
on Docker Hub.

60
00:02:38.460 --> 00:02:40.860
Here you find that mongo image,

61
00:02:40.860 --> 00:02:42.270
which gives you an environment

62
00:02:42.270 --> 00:02:45.870
that comes with the MongoDB database pre-installed.

63
00:02:45.870 --> 00:02:48.900
So an environment that runs a MongoDB server

64
00:02:48.900 --> 00:02:51.363
with the MongoDB database on top of it.

65
00:02:52.230 --> 00:02:54.060
Now, you can learn more about the image

66
00:02:54.060 --> 00:02:56.010
and your configuration options here

67
00:02:56.010 --> 00:02:57.860
but that is the image I'm using here.

68
00:02:58.710 --> 00:03:02.550
However, this image now needs some additional configuration

69
00:03:02.550 --> 00:03:05.010
in order to work correctly.

70
00:03:05.010 --> 00:03:07.740
To be precise, here we also can,

71
00:03:07.740 --> 00:03:11.490
and in this case also must add the env key.

72
00:03:11.490 --> 00:03:12.900
It depends on the image

73
00:03:12.900 --> 00:03:15.630
whether you need to add some environment variables

74
00:03:15.630 --> 00:03:18.870
but this mongo image needs some environment variables.

75
00:03:18.870 --> 00:03:23.640
To be precise, you learn in the official documentation here

76
00:03:23.640 --> 00:03:24.768
that in the end,

77
00:03:24.768 --> 00:03:28.890
this image here need two environment variables

78
00:03:28.890 --> 00:03:30.930
that must be defined.

79
00:03:30.930 --> 00:03:32.250
Now, this here generally

80
00:03:32.250 --> 00:03:34.500
is a totally different definition file

81
00:03:34.500 --> 00:03:37.710
but these two environment variables must be added as part

82
00:03:37.710 --> 00:03:40.500
of our GitHub Actions definition as well

83
00:03:40.500 --> 00:03:42.450
because this controls which username

84
00:03:42.450 --> 00:03:46.920
and password will be used for connecting to that database

85
00:03:46.920 --> 00:03:49.890
because keep in mind, here we're not connecting to it,

86
00:03:49.890 --> 00:03:52.620
we're spinning up a new database instead

87
00:03:52.620 --> 00:03:54.150
inside of that container

88
00:03:54.150 --> 00:03:55.980
but of course, in order to then connect

89
00:03:55.980 --> 00:03:57.810
to that database later

90
00:03:57.810 --> 00:04:01.110
from our web app, which is used by these automated tests,

91
00:04:01.110 --> 00:04:03.180
we need some credentials.

92
00:04:03.180 --> 00:04:05.670
And here with these environment variables,

93
00:04:05.670 --> 00:04:07.320
we define those credentials

94
00:04:07.320 --> 00:04:09.090
that will be used for connecting.

95
00:04:09.090 --> 00:04:11.160
So we configured that database

96
00:04:11.160 --> 00:04:13.410
that will be started inside of the container

97
00:04:13.410 --> 00:04:15.780
and we therefore also configure the credentials

98
00:04:15.780 --> 00:04:17.433
that will be used for connecting.

99
00:04:18.630 --> 00:04:20.970
And here one environment variable

100
00:04:20.970 --> 00:04:23.970
that must be added for this services container

101
00:04:23.970 --> 00:04:26.043
is the MONGO_INITDB_ROOT_USERNAME,

102
00:04:26.940 --> 00:04:28.773
and here I'll just set this to root.

103
00:04:30.330 --> 00:04:33.750
And the other variable is this password variable,

104
00:04:33.750 --> 00:04:35.733
which I will set to example here.

105
00:04:37.380 --> 00:04:39.480
Now, these values are up to you

106
00:04:39.480 --> 00:04:41.880
but they don't have to be too complex

107
00:04:41.880 --> 00:04:44.760
because this is only a testing database

108
00:04:44.760 --> 00:04:47.280
that's running on this GitHub Actions server

109
00:04:47.280 --> 00:04:50.010
as long as our workflow is running.

110
00:04:50.010 --> 00:04:52.890
So it can't really be used by anybody else

111
00:04:52.890 --> 00:04:56.730
and it won't be online after the workflow finished.

112
00:04:56.730 --> 00:04:58.920
So exposing these credentials here

113
00:04:58.920 --> 00:05:02.250
is no problem unless it's the same credentials

114
00:05:02.250 --> 00:05:05.130
you would be using for your production database,

115
00:05:05.130 --> 00:05:06.900
which you, of course, shouldn't use here

116
00:05:06.900 --> 00:05:08.880
for this testing database.

117
00:05:08.880 --> 00:05:12.330
Instead here, you can have really simple dummy credentials,

118
00:05:12.330 --> 00:05:14.013
like root and example.

119
00:05:15.360 --> 00:05:17.640
Now, this also must be the credentials

120
00:05:17.640 --> 00:05:19.650
that are used for connecting thereafter

121
00:05:19.650 --> 00:05:22.770
and therefore, you should also use the same credentials here

122
00:05:22.770 --> 00:05:24.360
for the environment variables

123
00:05:24.360 --> 00:05:26.040
that are used by the steps,

124
00:05:26.040 --> 00:05:28.560
which for example, run these automated tests

125
00:05:28.560 --> 00:05:30.000
and the web server,

126
00:05:30.000 --> 00:05:32.550
and which therefore are the environment variables

127
00:05:32.550 --> 00:05:34.260
used in code.

128
00:05:34.260 --> 00:05:36.240
And here we need the same credentials

129
00:05:36.240 --> 00:05:38.730
so that the connection to this testing database here

130
00:05:38.730 --> 00:05:40.893
can be established successfully.

131
00:05:42.120 --> 00:05:45.810
So that's how we now define our service container here.

132
00:05:45.810 --> 00:05:49.200
This now defines that we wanna use this mongo image,

133
00:05:49.200 --> 00:05:51.270
which gives us a MongoDB server,

134
00:05:51.270 --> 00:05:54.510
which should be initialized with these credentials.

135
00:05:54.510 --> 00:05:57.810
And that service is then running side by side

136
00:05:57.810 --> 00:06:00.840
whilst our other steps are executing.

137
00:06:00.840 --> 00:06:04.560
Therefore, as our other steps start the web server,

138
00:06:04.560 --> 00:06:06.960
for example, the web server will be able

139
00:06:06.960 --> 00:06:10.020
to successfully connect to this database.

140
00:06:10.020 --> 00:06:13.560
At least as soon as we also update that other data here,

141
00:06:13.560 --> 00:06:15.630
the cluster address, for example,

142
00:06:15.630 --> 00:06:17.220
because that's also important

143
00:06:17.220 --> 00:06:19.380
and that's now also where it will matter

144
00:06:19.380 --> 00:06:22.233
whether your job runs in a container or not.

