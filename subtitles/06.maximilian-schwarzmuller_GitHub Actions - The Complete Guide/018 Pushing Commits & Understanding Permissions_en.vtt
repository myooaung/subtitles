WEBVTT
1
00:00:02.100 --> 00:00:04.740
So how do we now push our local commits

2
00:00:04.740 --> 00:00:07.170
to this remote Repository?

3
00:00:07.170 --> 00:00:09.840
Well, for this we have the Git Push command.

4
00:00:09.840 --> 00:00:12.724
However, if you execute it like this, you get an error.

5
00:00:12.724 --> 00:00:15.360
You get an error that the current branch

6
00:00:15.360 --> 00:00:17.962
has no upstream branch, which simply means

7
00:00:17.962 --> 00:00:21.840
Git doesn't know which branch in the remote Repository

8
00:00:21.840 --> 00:00:23.910
belongs to this local branch.

9
00:00:23.910 --> 00:00:27.183
And keep in mind, here, I'm on this main branch.

10
00:00:28.380 --> 00:00:30.630
Now, in order to establish a connection

11
00:00:30.630 --> 00:00:33.840
between these branches, we can execute this command.

12
00:00:33.840 --> 00:00:36.870
Alternatively, if it's a one-time push,

13
00:00:36.870 --> 00:00:39.840
and you don't want to establish such a connection

14
00:00:39.840 --> 00:00:43.680
you can also simply run "Git push origin."

15
00:00:43.680 --> 00:00:47.940
So here, you simply reuse this identifier,

16
00:00:47.940 --> 00:00:51.420
which we specified before, and then after that

17
00:00:51.420 --> 00:00:54.090
you specified the name of the local branch

18
00:00:54.090 --> 00:00:56.700
that should be pushed to this remote Repository,

19
00:00:56.700 --> 00:01:00.420
and then there it will target a branch of the same name.

20
00:01:00.420 --> 00:01:03.450
And if this doesn't exist yet in the remote Repository

21
00:01:03.450 --> 00:01:05.910
it will create that branch.

22
00:01:05.910 --> 00:01:09.330
So when I run "Git push origin main" for the first time,

23
00:01:09.330 --> 00:01:12.510
this will create a main branch in this remote Repository,

24
00:01:12.510 --> 00:01:15.420
and push my commits of my local main branch

25
00:01:15.420 --> 00:01:17.403
to that remote main branch.

26
00:01:18.480 --> 00:01:20.670
However, still if I execute this,

27
00:01:20.670 --> 00:01:23.550
I get an error, a permission error.

28
00:01:23.550 --> 00:01:27.240
And if you think about it, that should make sense.

29
00:01:27.240 --> 00:01:31.200
How would GitHub know that the person pushing here

30
00:01:31.200 --> 00:01:33.660
does have access permissions?

31
00:01:33.660 --> 00:01:36.000
We know that it's our Repository,

32
00:01:36.000 --> 00:01:38.250
but what if I had a link to your Repository?

33
00:01:38.250 --> 00:01:41.183
I could simply push to it and override your code.

34
00:01:41.183 --> 00:01:44.100
And getting that link here isn't difficult

35
00:01:44.100 --> 00:01:46.090
because this link can be grabbed by everyone

36
00:01:46.090 --> 00:01:48.462
who visits your Repository page.

37
00:01:48.462 --> 00:01:50.250
If you take a look at this link,

38
00:01:50.250 --> 00:01:52.680
it's also not too difficult to construct

39
00:01:52.680 --> 00:01:55.260
because it's essentially the URL up here

40
00:01:55.260 --> 00:01:58.020
with .git at the end.

41
00:01:58.020 --> 00:02:00.300
So this link is definitely not secret.

42
00:02:00.300 --> 00:02:02.970
Everyone can grab it and the offer by default

43
00:02:02.970 --> 00:02:06.843
you have no permission to push to that Repository.

44
00:02:07.770 --> 00:02:10.263
How do we then authenticate ourselves?

45
00:02:11.370 --> 00:02:15.720
Well, one common way is to set up this remote connection

46
00:02:15.720 --> 00:02:17.490
slightly differently.

47
00:02:17.490 --> 00:02:21.367
We still grab that link here, but now we use

48
00:02:21.367 --> 00:02:25.440
"Git remote set-URL," so we use this command

49
00:02:25.440 --> 00:02:30.440
to edit the URL of our origin remote Repository.

50
00:02:31.410 --> 00:02:33.900
And in front of the word GitHub.com,

51
00:02:33.900 --> 00:02:36.240
in front of this part of the URL,

52
00:02:36.240 --> 00:02:39.060
you add your GitHub username

53
00:02:39.060 --> 00:02:42.030
which you chose when you created this account,

54
00:02:42.030 --> 00:02:46.050
this GitHub account, and then an @ sign thereafter,

55
00:02:46.050 --> 00:02:50.040
and this will tell GitHub that whenever you are interacting

56
00:02:50.040 --> 00:02:53.823
with that Repository, this user here should be assumed.

57
00:02:54.840 --> 00:02:56.340
This will then still not be enough

58
00:02:56.340 --> 00:02:58.350
but it will be a first step.

59
00:02:58.350 --> 00:03:01.470
Of course, we could also done this when we added the origin

60
00:03:01.470 --> 00:03:03.990
but I wanted to show you this permission error.

61
00:03:03.990 --> 00:03:07.230
That's why I'm now using the set-URL command

62
00:03:07.230 --> 00:03:09.543
to update the origin URL.

63
00:03:10.440 --> 00:03:12.577
So if I do this and I then repeat this

64
00:03:12.577 --> 00:03:17.577
"Git push origin main" command, I get a prompt here

65
00:03:17.850 --> 00:03:21.060
in Visual Studio Code to enter a password.

66
00:03:21.060 --> 00:03:23.010
If you're not using Visual Studio Code,

67
00:03:23.010 --> 00:03:25.710
you might also get this prompt in the terminal here

68
00:03:25.710 --> 00:03:27.720
in your command prompt.

69
00:03:27.720 --> 00:03:31.830
And here we should use a so-called personal access token

70
00:03:31.830 --> 00:03:33.783
to authenticate this request.

71
00:03:34.650 --> 00:03:36.660
The username alone is not enough

72
00:03:36.660 --> 00:03:39.150
and it's a good thing that it's not enough,

73
00:03:39.150 --> 00:03:41.340
instead, we also need a password.

74
00:03:41.340 --> 00:03:44.504
And this personal access token can be created here

75
00:03:44.504 --> 00:03:48.720
in your GitHub account, by clicking on your profile image

76
00:03:48.720 --> 00:03:50.193
and going to settings.

77
00:03:51.570 --> 00:03:55.170
And there you got a lot of things you can configure.

78
00:03:55.170 --> 00:03:58.140
It's definitely worth diving into all these settings

79
00:03:58.140 --> 00:03:59.460
and looking through them,

80
00:03:59.460 --> 00:04:01.923
but we need to go to developer settings here.

81
00:04:02.940 --> 00:04:04.920
And under developer settings,

82
00:04:04.920 --> 00:04:07.470
we have to go to personal access tokens,

83
00:04:07.470 --> 00:04:09.933
and there we must generate a new token.

84
00:04:11.070 --> 00:04:13.350
Now, you can give this any name of your choice,

85
00:04:13.350 --> 00:04:15.990
and you can choose how long it should be valid.

86
00:04:15.990 --> 00:04:19.350
And then you must check repo here.

87
00:04:19.350 --> 00:04:23.010
This means that this token can be used for actions,

88
00:04:23.010 --> 00:04:26.100
for commands that target repositories,

89
00:04:26.100 --> 00:04:27.813
like pushing or pulling.

90
00:04:28.830 --> 00:04:31.500
If you choose this and you fill out these fields

91
00:04:31.500 --> 00:04:34.680
as mentioned, you can ignore all the other settings,

92
00:04:34.680 --> 00:04:36.600
you can generate that token

93
00:04:36.600 --> 00:04:39.210
and now you must copy that token.

94
00:04:39.210 --> 00:04:41.730
You will only see this token once, by the way,

95
00:04:41.730 --> 00:04:45.224
but you can always generate a new token if you lose it.

96
00:04:45.224 --> 00:04:48.030
But with this token copied now,

97
00:04:48.030 --> 00:04:51.840
you can paste it into this field or into the command prompt

98
00:04:51.840 --> 00:04:55.244
wherever you are prompted for it, and hit enter.

99
00:04:55.244 --> 00:04:58.620
And typically, your operating system should automatically

100
00:04:58.620 --> 00:04:59.850
store this token

101
00:04:59.850 --> 00:05:03.183
so that it's automatically used for future requests.

102
00:05:04.230 --> 00:05:08.070
So now once a valid personal access token was provided,

103
00:05:08.070 --> 00:05:09.990
you see here that the push succeeded

104
00:05:09.990 --> 00:05:12.030
and we get some summary output.

105
00:05:12.030 --> 00:05:16.650
If you go back to your Repositories by going back to GitHub,

106
00:05:16.650 --> 00:05:19.560
your Repositories, and then that Repository,

107
00:05:19.560 --> 00:05:22.173
you now also see that that code is here,

108
00:05:23.010 --> 00:05:25.140
and that's how you can push your code

109
00:05:25.140 --> 00:05:27.180
to your GitHub Repository.

110
00:05:27.180 --> 00:05:29.047
Now, as mentioned before always type in,

111
00:05:29.047 --> 00:05:32.970
"This command can be cumbersome and this doesn't work yet."

112
00:05:32.970 --> 00:05:36.450
Therefore, you might want to copy this suggestion here.

113
00:05:36.450 --> 00:05:39.330
This command to configure a strict connection

114
00:05:39.330 --> 00:05:42.540
between your remote Repository and its main branch,

115
00:05:42.540 --> 00:05:44.910
and your local main branch.

116
00:05:44.910 --> 00:05:49.230
If you run this command here, it's thereafter enough

117
00:05:49.230 --> 00:05:52.050
to just run Git Push to push your changes

118
00:05:52.050 --> 00:05:55.317
off the main branch to the remote Repository.

119
00:05:55.317 --> 00:05:57.060
In this case, nothing is pushed

120
00:05:57.060 --> 00:05:59.343
because I haven't changed anything locally.

