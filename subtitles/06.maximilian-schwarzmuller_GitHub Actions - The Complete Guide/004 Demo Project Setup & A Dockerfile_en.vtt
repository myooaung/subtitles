WEBVTT
1
00:00:02.310 --> 00:00:05.010
Now speaking of examples, attached, you find

2
00:00:05.010 --> 00:00:09.120
an example project, and that is that backend API,

3
00:00:09.120 --> 00:00:11.550
which I also showed you earlier in the course,

4
00:00:11.550 --> 00:00:15.660
with slightly altered code, but generally the same.

5
00:00:15.660 --> 00:00:19.560
But the attached project also comes with a Docker file.

6
00:00:19.560 --> 00:00:22.920
And if you have Docker installed on your system,

7
00:00:22.920 --> 00:00:27.920
then you can use this Docker file to build a Docker image

8
00:00:28.080 --> 00:00:30.750
as it's called, and then run a container based

9
00:00:30.750 --> 00:00:33.480
on that image, because that's how Docker

10
00:00:33.480 --> 00:00:36.810
and containers work, you build images based

11
00:00:36.810 --> 00:00:40.230
on definitions like this, where you simply define

12
00:00:40.230 --> 00:00:43.470
and build that environment in which your code would run.

13
00:00:43.470 --> 00:00:45.900
And then you can run multiple containers based

14
00:00:45.900 --> 00:00:49.110
on the same image, on different machines wherever

15
00:00:49.110 --> 00:00:52.710
you want to, basically, as long as Docker is installed

16
00:00:52.710 --> 00:00:54.630
on that machine.

17
00:00:54.630 --> 00:00:56.850
But again, I do have a complete course about that,

18
00:00:56.850 --> 00:00:59.400
and it's not the goal of this course to build,

19
00:00:59.400 --> 00:01:02.280
or run any containers on our machines.

20
00:01:02.280 --> 00:01:05.670
I just want to show you such an example definition file

21
00:01:05.670 --> 00:01:08.400
where I would be building my own container image

22
00:01:08.400 --> 00:01:12.780
for this application here, for this web API here,

23
00:01:12.780 --> 00:01:15.480
which ultimately would start the web server,

24
00:01:15.480 --> 00:01:17.610
and which would therefore run the web server

25
00:01:17.610 --> 00:01:20.250
in that isolated environment that's based

26
00:01:20.250 --> 00:01:24.210
on some node image, so on some other image that was built

27
00:01:24.210 --> 00:01:27.870
by other people, that comes with Node.js pre-installed

28
00:01:27.870 --> 00:01:29.313
on top of Linux.

29
00:01:30.210 --> 00:01:32.880
So that's a Docker image definition file,

30
00:01:32.880 --> 00:01:35.490
which ultimately would allow us, and enable us

31
00:01:35.490 --> 00:01:38.910
to run containers based on that definition.

32
00:01:38.910 --> 00:01:41.130
Other than that, it's the same project as before,

33
00:01:41.130 --> 00:01:43.620
and we actually don't need that Docker file

34
00:01:43.620 --> 00:01:46.140
for this section, I just wanted to show you

35
00:01:46.140 --> 00:01:47.250
how this would look like,

36
00:01:47.250 --> 00:01:49.650
if you would be using Docker locally,

37
00:01:49.650 --> 00:01:52.713
or on some server that maybe hosts your website.

38
00:01:53.670 --> 00:01:55.350
But as mentioned, GitHub Actions

39
00:01:55.350 --> 00:01:58.380
also supports Docker containers.

40
00:01:58.380 --> 00:02:01.950
And therefore, what I'll do here, is I'll again turn

41
00:02:01.950 --> 00:02:06.950
this into a Git Repository, and add my initial commit,

42
00:02:06.990 --> 00:02:09.120
as always, basically.

43
00:02:09.120 --> 00:02:12.540
And then here I'll create a new remote Repository,

44
00:02:12.540 --> 00:02:14.940
a public Repository here where

45
00:02:14.940 --> 00:02:19.080
I wanna well, host this Git Repository.

46
00:02:19.080 --> 00:02:20.910
So where I then also want to run

47
00:02:20.910 --> 00:02:23.010
my GitHub Actions of course.

48
00:02:23.010 --> 00:02:25.740
And I choose a public Repository here,

49
00:02:25.740 --> 00:02:28.410
because I wanna use this environment feature

50
00:02:28.410 --> 00:02:30.240
which I showed you early in the course,

51
00:02:30.240 --> 00:02:33.300
so that I can define environment specific secrets

52
00:02:33.300 --> 00:02:35.913
which are picked up by the Workflow definition.

53
00:02:37.320 --> 00:02:39.330
Then we can wrap this URL,

54
00:02:39.330 --> 00:02:43.107
and add this remote Repository here like this.

55
00:02:46.470 --> 00:02:49.170
And here in my case, I will again add my username

56
00:02:49.170 --> 00:02:52.050
to make sure that I authenticate correctly,

57
00:02:52.050 --> 00:02:55.890
and we can then push with this command as always.

58
00:02:55.890 --> 00:03:00.210
And that pushes our project here to GitHub.

59
00:03:00.210 --> 00:03:02.910
And it actually already registers a Workflow

60
00:03:02.910 --> 00:03:05.460
because this attached project comes

61
00:03:05.460 --> 00:03:10.460
with a Workflow file already, where I listen to pushes

62
00:03:10.740 --> 00:03:15.000
to the main branch, and where I then try to,

63
00:03:15.000 --> 00:03:19.290
in the end, run a web server as part of the test Job,

64
00:03:19.290 --> 00:03:22.800
which should connect to the MongoDB Database,

65
00:03:22.800 --> 00:03:24.870
and then run some tests.

66
00:03:24.870 --> 00:03:28.920
However, in my case here this will fail because for one,

67
00:03:28.920 --> 00:03:33.630
I haven't registered these secrets in my Repository yet.

68
00:03:33.630 --> 00:03:37.470
And I also shutdown my MongoDB Database server,

69
00:03:37.470 --> 00:03:40.680
which I did set up in a different course section.

70
00:03:40.680 --> 00:03:44.130
Therefore here, my action will actually start,

71
00:03:44.130 --> 00:03:47.010
but it will then get stuck, and eventually time out

72
00:03:47.010 --> 00:03:50.340
because it fails to run this server therefore here,

73
00:03:50.340 --> 00:03:52.623
I'll simply cancel it manually.

74
00:03:54.090 --> 00:03:57.720
Because in order to really run this, I would have to go back

75
00:03:57.720 --> 00:04:00.690
to MongoDB ,and sign in with that account

76
00:04:00.690 --> 00:04:03.540
I created earlier, or create a new account,

77
00:04:03.540 --> 00:04:08.310
but I did show all these Steps in an earlier course section.

78
00:04:08.310 --> 00:04:10.980
And on MongoDB, you must make sure that you do have

79
00:04:10.980 --> 00:04:13.920
a cluster, and that you do allow access

80
00:04:13.920 --> 00:04:18.603
from all IP addresses, that is very important here,

81
00:04:19.440 --> 00:04:22.530
so that the Workflow running on some server provided

82
00:04:22.530 --> 00:04:26.730
by GitHub Actions is able to reach out to this database,

83
00:04:26.730 --> 00:04:28.950
and then you also must make sure that you do have

84
00:04:28.950 --> 00:04:32.523
a user, and the password of that user.

85
00:04:33.600 --> 00:04:35.850
Therefore, I'll assign a new password here,

86
00:04:35.850 --> 00:04:37.950
and you use these credentials here,

87
00:04:37.950 --> 00:04:39.813
and store them as secrets.

88
00:04:40.650 --> 00:04:44.160
So therefore here for this Repository under settings,

89
00:04:44.160 --> 00:04:47.940
I can go to environments as I did early on this course.

90
00:04:47.940 --> 00:04:50.430
And here, we wanna make sure that we do add

91
00:04:50.430 --> 00:04:52.470
an environment if you don't have it yet

92
00:04:52.470 --> 00:04:55.830
where you do add these secrets.

93
00:04:55.830 --> 00:04:58.590
So here I have this testing environment

94
00:04:58.590 --> 00:05:02.880
where I add one secret called MongoDB password,

95
00:05:02.880 --> 00:05:07.050
where I paste in that password I just created on MongoDB,

96
00:05:07.050 --> 00:05:08.883
so on that database server.

97
00:05:09.720 --> 00:05:14.720
And then I'll add that other secret, MongoDB username here,

98
00:05:17.370 --> 00:05:20.283
like this which in my case is maximilian.

99
00:05:21.210 --> 00:05:24.690
And after adding these secrets, and the testing environment

100
00:05:24.690 --> 00:05:27.420
in general, which is the environment I'm referencing

101
00:05:27.420 --> 00:05:30.600
in my Workflow definition file after performing

102
00:05:30.600 --> 00:05:34.290
these Steps combined with the IP address,

103
00:05:34.290 --> 00:05:37.140
which I'm allowing, the global IP address

104
00:05:37.140 --> 00:05:38.700
under network access.

105
00:05:38.700 --> 00:05:42.000
After doing all these things here, we should be able

106
00:05:42.000 --> 00:05:45.510
to rerun this action, which we can do by visiting the action

107
00:05:45.510 --> 00:05:49.560
which we canceled, and choosing rerun all Jobs.

108
00:05:49.560 --> 00:05:51.960
And this will now, well, as the name suggests,

109
00:05:51.960 --> 00:05:56.070
rerun all Jobs, and it should now succeed when it comes

110
00:05:56.070 --> 00:05:57.810
to connecting to the database.

111
00:05:57.810 --> 00:06:00.120
But this is all also nothing new,

112
00:06:00.120 --> 00:06:03.720
and this is all not using any containers.

113
00:06:03.720 --> 00:06:07.380
Instead, let's just quickly wait to see whether this works,

114
00:06:07.380 --> 00:06:09.900
and then we'll dive into using containers,

115
00:06:09.900 --> 00:06:12.450
and setting up containers with GitHub Actions

116
00:06:12.450 --> 00:06:14.190
in the next lecture.

117
00:06:14.190 --> 00:06:16.830
So let's quickly wait here.

118
00:06:16.830 --> 00:06:18.720
And it actually still failed for me

119
00:06:18.720 --> 00:06:21.300
because I used the wrong cluster address,

120
00:06:21.300 --> 00:06:23.280
so that should also be correct.

121
00:06:23.280 --> 00:06:25.350
So there you should also make sure that you're using

122
00:06:25.350 --> 00:06:28.770
the correct one by using Connect, connect your application,

123
00:06:28.770 --> 00:06:31.083
and then using this address here.

124
00:06:36.360 --> 00:06:39.393
And now with that, I canceled the other Workflow run.

125
00:06:42.180 --> 00:06:45.870
And after updating this cluster address, if we push this,

126
00:06:45.870 --> 00:06:47.880
a new Workflow run should be started,

127
00:06:47.880 --> 00:06:49.143
and should now succeed.

128
00:06:51.510 --> 00:06:53.460
Here we go, it now connected successfully,

129
00:06:53.460 --> 00:06:54.810
it ran all the tests,

130
00:06:54.810 --> 00:06:57.900
and performed this entire Workflow successfully.

131
00:06:57.900 --> 00:07:00.123
But now onwards to using containers.

