WEBVTT
1
00:00:02.370 --> 00:00:04.410
Now for the third step here,

2
00:00:04.410 --> 00:00:06.870
I wanna install my dependencies.

3
00:00:06.870 --> 00:00:10.710
For this, we might be able to find some action

4
00:00:10.710 --> 00:00:13.890
but actually here we just need to run a simple command

5
00:00:13.890 --> 00:00:15.450
in the command line.

6
00:00:15.450 --> 00:00:20.450
And that is npm install or better npm ci.

7
00:00:20.910 --> 00:00:23.370
Now this also installs all dependencies

8
00:00:23.370 --> 00:00:25.140
but it uses dependency versions

9
00:00:25.140 --> 00:00:28.230
that are locked into this package lock JSON file.

10
00:00:28.230 --> 00:00:30.480
It's simply a NPM feature that makes sure

11
00:00:30.480 --> 00:00:33.120
that we're always using the exact same versions

12
00:00:33.120 --> 00:00:35.580
we used during development.

13
00:00:35.580 --> 00:00:38.040
Npm install would be an alternative though

14
00:00:38.040 --> 00:00:40.140
but npm ci is a bit safer

15
00:00:40.140 --> 00:00:42.210
and makes sure that we don't suddenly install

16
00:00:42.210 --> 00:00:44.220
some breaking version.

17
00:00:44.220 --> 00:00:46.950
Now with that, with the dependencies installed,

18
00:00:46.950 --> 00:00:49.110
and keep in mind that we did install them

19
00:00:49.110 --> 00:00:52.410
on our local system way early in this section as well

20
00:00:52.410 --> 00:00:54.600
when we got started with this demo.

21
00:00:54.600 --> 00:00:56.940
But now with them installed on this runner,

22
00:00:56.940 --> 00:01:00.030
we can also run our tests on that runner.

23
00:01:00.030 --> 00:01:02.310
For that, I'll add one last step here

24
00:01:02.310 --> 00:01:05.250
and here I also just run a regular command

25
00:01:05.250 --> 00:01:07.530
because I wanna run this npm test command

26
00:01:07.530 --> 00:01:10.593
which I showed you locally on my machine before as well.

27
00:01:11.670 --> 00:01:14.610
And that's it, that's my first job.

28
00:01:14.610 --> 00:01:18.930
As you see, it's more complex than that first action job

29
00:01:18.930 --> 00:01:22.560
we had before and it's also doing more meaningful things

30
00:01:22.560 --> 00:01:25.293
but it has the same structure and syntax.

31
00:01:26.520 --> 00:01:29.220
And with that added, we can save that file.

32
00:01:29.220 --> 00:01:33.090
And now we wanna create a new commit and push that to GitHub

33
00:01:33.090 --> 00:01:35.613
so that GitHub is aware of that workflow.

34
00:01:36.480 --> 00:01:39.840
And of course, that works just the way it always works.

35
00:01:39.840 --> 00:01:42.870
We make sure that we're in this project directory,

36
00:01:42.870 --> 00:01:46.170
then we stage all files or this specific file

37
00:01:46.170 --> 00:01:48.750
in this specific sub folder.

38
00:01:48.750 --> 00:01:50.640
And then we create a new commit

39
00:01:50.640 --> 00:01:54.063
where I say added test workflow.

40
00:01:54.930 --> 00:01:57.090
And now we can push this.

41
00:01:57.090 --> 00:01:58.740
And as I try to push this,

42
00:01:58.740 --> 00:02:01.290
I get an error here as you can tell.

43
00:02:01.290 --> 00:02:04.950
And this is an important error which I wanna show you.

44
00:02:04.950 --> 00:02:06.480
The error I'm getting here

45
00:02:06.480 --> 00:02:08.970
is basically that I can't push this

46
00:02:08.970 --> 00:02:11.100
because the personal access token

47
00:02:11.100 --> 00:02:14.190
that's being used for identifying this request,

48
00:02:14.190 --> 00:02:18.660
this push request, has no permission to create workflows.

49
00:02:18.660 --> 00:02:22.890
It has permission to add code to that repository,

50
00:02:22.890 --> 00:02:26.730
but since this specific code will lead to the creation

51
00:02:26.730 --> 00:02:28.590
of a GitHub action workflow,

52
00:02:28.590 --> 00:02:32.490
the personal access token also needs permission for that.

53
00:02:32.490 --> 00:02:36.030
So therefore, in order to make sure that we can push,

54
00:02:36.030 --> 00:02:38.820
we have to go to the settings of our developer here,

55
00:02:38.820 --> 00:02:41.010
and under developer settings down here

56
00:02:41.010 --> 00:02:43.230
and personal access token,

57
00:02:43.230 --> 00:02:48.230
we have to generate a new token with GA actions,

58
00:02:48.390 --> 00:02:52.080
that does not just grant the right to push to our repo,

59
00:02:52.080 --> 00:02:54.870
but that also gives us this permission here

60
00:02:54.870 --> 00:02:57.393
to update GitHub action workflows.

61
00:02:58.410 --> 00:02:59.730
That's what need here.

62
00:02:59.730 --> 00:03:02.130
So we also have to check this.

63
00:03:02.130 --> 00:03:03.600
Now, that's all we have to add,

64
00:03:03.600 --> 00:03:06.570
but with that we got a brand new token.

65
00:03:06.570 --> 00:03:09.390
And in order to make sure that this token is used,

66
00:03:09.390 --> 00:03:11.790
we have to delete the token we're currently using.

67
00:03:11.790 --> 00:03:14.130
Now attached, you find instructions on how to do this

68
00:03:14.130 --> 00:03:16.110
on different platforms.

69
00:03:16.110 --> 00:03:18.630
Here in my case, I did update it,

70
00:03:18.630 --> 00:03:23.630
and now if I try to push again, this succeeds.

71
00:03:24.120 --> 00:03:28.860
And with that done, if I now reload, this code was updated.

72
00:03:28.860 --> 00:03:32.040
But under actions, you will also see that this workflow

73
00:03:32.040 --> 00:03:35.760
was added and that it's actually already executing.

74
00:03:35.760 --> 00:03:38.940
Because I added a new workflow that should be executed

75
00:03:38.940 --> 00:03:41.160
whenever we push to this repository,

76
00:03:41.160 --> 00:03:44.010
and therefore well, this workflow is triggered automatically

77
00:03:44.010 --> 00:03:45.450
because we did push.

78
00:03:45.450 --> 00:03:47.430
Now here we can also see that it actually

79
00:03:47.430 --> 00:03:50.550
executed successfully, and we can of course inspect it

80
00:03:50.550 --> 00:03:52.650
and the jobs inside of this workflow

81
00:03:52.650 --> 00:03:55.590
to learn more about the different steps.

82
00:03:55.590 --> 00:03:58.800
Here we see that all these steps were performed,

83
00:03:58.800 --> 00:04:01.380
that dependencies were installed for example,

84
00:04:01.380 --> 00:04:03.570
and that these tests were executed.

85
00:04:03.570 --> 00:04:06.870
And here we can also see these test results,

86
00:04:06.870 --> 00:04:09.570
which we previously saw locally.

87
00:04:09.570 --> 00:04:10.800
And that's really important.

88
00:04:10.800 --> 00:04:14.580
You can inspect the results of your workflows and jobs,

89
00:04:14.580 --> 00:04:16.649
which of course can be super important

90
00:04:16.649 --> 00:04:19.410
especially when you're running automated tests,

91
00:04:19.410 --> 00:04:21.630
because these tests could also be failing,

92
00:04:21.630 --> 00:04:24.810
and in that case, you wanna find out why they failed.

93
00:04:24.810 --> 00:04:27.660
And speaking off that, let's see what happens

94
00:04:27.660 --> 00:04:30.453
if a workflow fails in the next lecture.

