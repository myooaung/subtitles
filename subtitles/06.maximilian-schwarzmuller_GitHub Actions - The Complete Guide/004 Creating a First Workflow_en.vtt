WEBVTT
1
00:00:02.160 --> 00:00:04.800
Now, to take a look at GitHub Actions

2
00:00:04.800 --> 00:00:08.460
in well, action, I'm back here on GitHub

3
00:00:08.460 --> 00:00:11.310
in one of these dummy accounts I created

4
00:00:11.310 --> 00:00:12.900
in the crash course section,

5
00:00:12.900 --> 00:00:15.330
but of course, any GitHub account will do.

6
00:00:15.330 --> 00:00:18.330
I just wanna note that this is a GitHub account

7
00:00:18.330 --> 00:00:19.980
that uses the free plan.

8
00:00:19.980 --> 00:00:22.410
So everything I'm showing to you here works

9
00:00:22.410 --> 00:00:23.943
in that free plan.

10
00:00:24.780 --> 00:00:27.030
Now, to get started with actions,

11
00:00:27.030 --> 00:00:29.970
I'll create a new GitHub repository.

12
00:00:29.970 --> 00:00:34.970
And I'll name this gh-first-action.

13
00:00:35.310 --> 00:00:37.230
The name, of course, is totally up to

14
00:00:37.230 --> 00:00:39.030
and does not matter.

15
00:00:39.030 --> 00:00:42.513
I'll also keep this as a public repository.

16
00:00:43.680 --> 00:00:46.560
And I will indeed add a README file here

17
00:00:46.560 --> 00:00:48.420
so that we have some content

18
00:00:48.420 --> 00:00:50.610
in this repository right from the start

19
00:00:50.610 --> 00:00:53.340
because I will not connect this repository

20
00:00:53.340 --> 00:00:56.910
to some existing local Git repository.

21
00:00:56.910 --> 00:01:00.630
Instead for this first action, we'll stay on GitHub.

22
00:01:00.630 --> 00:01:03.570
We will soon switch to a local repository again

23
00:01:03.570 --> 00:01:06.510
and connect that to GitHub but for this start,

24
00:01:06.510 --> 00:01:09.690
we'll stick to this GitHub-only repository.

25
00:01:09.690 --> 00:01:11.763
So I'll create this repository.

26
00:01:12.630 --> 00:01:14.580
And once it's done, we land on a screen

27
00:01:14.580 --> 00:01:16.170
that should look something like this

28
00:01:16.170 --> 00:01:18.960
with this dummy README file.

29
00:01:18.960 --> 00:01:20.790
And we could, of course, now clone this

30
00:01:20.790 --> 00:01:24.030
to work on it locally but we won't do this here.

31
00:01:24.030 --> 00:01:27.300
Instead, we wanna get started with our first action,

32
00:01:27.300 --> 00:01:30.993
and we can do so by clicking on this Actions tab here.

33
00:01:32.190 --> 00:01:34.650
This is the place where you can view

34
00:01:34.650 --> 00:01:39.120
and also create actions that belong to this repository.

35
00:01:39.120 --> 00:01:41.550
Though actually it would be more correct

36
00:01:41.550 --> 00:01:45.570
to say that here you can create your workflows

37
00:01:45.570 --> 00:01:47.610
that belong to this repository.

38
00:01:47.610 --> 00:01:51.300
I'm currently also using the word action as a synonym

39
00:01:51.300 --> 00:01:54.240
for workflow, and for the moment, that's fine

40
00:01:54.240 --> 00:01:57.060
but as you will learn later in this course,

41
00:01:57.060 --> 00:01:59.460
and in this section also already,

42
00:01:59.460 --> 00:02:02.610
there's a separate feature called action.

43
00:02:02.610 --> 00:02:04.110
So what we're creating here

44
00:02:04.110 --> 00:02:06.720
is actually a workflow and that's also what I mentioned

45
00:02:06.720 --> 00:02:08.009
on the slide earlier.

46
00:02:08.009 --> 00:02:10.650
You have these three main building blocks:

47
00:02:10.650 --> 00:02:12.570
workflows, jobs and steps,

48
00:02:12.570 --> 00:02:16.260
and it's a workflow that's attached to a repository.

49
00:02:16.260 --> 00:02:18.330
And that's what we're doing here.

50
00:02:18.330 --> 00:02:20.100
And indeed to get started,

51
00:02:20.100 --> 00:02:23.490
we can choose this simple workflow template here

52
00:02:23.490 --> 00:02:25.230
and click on Configure.

53
00:02:25.230 --> 00:02:27.900
Alternatively, we also can get started

54
00:02:27.900 --> 00:02:29.820
with one of the many other templates

55
00:02:29.820 --> 00:02:31.710
that perform certain tasks.

56
00:02:31.710 --> 00:02:35.130
And doing so can definitely also be interesting

57
00:02:35.130 --> 00:02:38.850
to see some more complex action definitions,

58
00:02:38.850 --> 00:02:40.890
though of course, throughout this course,

59
00:02:40.890 --> 00:02:45.390
you will learn how to build more complex action workflows.

60
00:02:45.390 --> 00:02:49.980
For this start, we'll start with this simple workflow.

61
00:02:49.980 --> 00:02:53.490
Now, what this does is it gives us an editor

62
00:02:53.490 --> 00:02:54.900
in the browser.

63
00:02:54.900 --> 00:02:57.720
You can also create actions locally,

64
00:02:57.720 --> 00:02:59.670
and we'll do that later, but for the moment,

65
00:02:59.670 --> 00:03:02.070
we'll stick to this browser editor.

66
00:03:02.070 --> 00:03:04.320
And here we have to give this file a name.

67
00:03:04.320 --> 00:03:06.240
That's the first thing we should do

68
00:03:06.240 --> 00:03:09.060
and I'll name it first-action.

69
00:03:09.060 --> 00:03:13.170
Please also note the path where this file will be stored.

70
00:03:13.170 --> 00:03:16.140
As you can see, it's actually stored

71
00:03:16.140 --> 00:03:20.220
in the repository and then in a .github folder.

72
00:03:20.220 --> 00:03:22.650
There in a workflows subfolder

73
00:03:22.650 --> 00:03:24.570
and then in a YAML file.

74
00:03:24.570 --> 00:03:26.880
That's what .yml stands for.

75
00:03:26.880 --> 00:03:29.490
It's a YAML file and YAML is simply a way

76
00:03:29.490 --> 00:03:31.023
of formatting text.

77
00:03:32.040 --> 00:03:34.560
And this is indeed where you should store

78
00:03:34.560 --> 00:03:37.110
your GitHub Action workflows

79
00:03:37.110 --> 00:03:39.600
so that GitHub is able to detect them.

80
00:03:39.600 --> 00:03:42.030
You must store them in a .github folder

81
00:03:42.030 --> 00:03:45.900
in a workflows subfolder and then in such a YAML file.

82
00:03:45.900 --> 00:03:48.270
So that's the file name and location.

83
00:03:48.270 --> 00:03:51.420
Down here we have the content of the file.

84
00:03:51.420 --> 00:03:53.160
And we get some annotations here

85
00:03:53.160 --> 00:03:56.430
for this basic workflow that was created

86
00:03:56.430 --> 00:03:58.500
but I will actually delete all of that

87
00:03:58.500 --> 00:04:01.020
and write it with you together from scratch

88
00:04:01.020 --> 00:04:02.490
so that we fully understand

89
00:04:02.490 --> 00:04:05.820
how such a action is configured and created.

90
00:04:05.820 --> 00:04:08.640
And it all starts with giving your action a name.

91
00:04:08.640 --> 00:04:11.100
You do this in this YAML file

92
00:04:11.100 --> 00:04:14.160
by adding the name key here in the first line,

93
00:04:14.160 --> 00:04:15.600
and then a colon.

94
00:04:15.600 --> 00:04:17.250
And this must be name.

95
00:04:17.250 --> 00:04:20.310
So this key here must be named name,

96
00:04:20.310 --> 00:04:24.210
and then after the colon, you specify your workflow name.

97
00:04:24.210 --> 00:04:26.280
And I'll name its First Workflow.

98
00:04:26.280 --> 00:04:27.300
Now, keep in mind,

99
00:04:27.300 --> 00:04:30.000
you can have as many workflows as you want

100
00:04:30.000 --> 00:04:33.600
by adding multiple YAML files in this workflows folder

101
00:04:33.600 --> 00:04:35.130
but here in this first file,

102
00:04:35.130 --> 00:04:37.203
this is the name of this workflow.

103
00:04:38.580 --> 00:04:40.830
Now, after giving this workflow a name,

104
00:04:40.830 --> 00:04:42.450
you have to also define

105
00:04:42.450 --> 00:04:45.390
when this workflow should be executed.

106
00:04:45.390 --> 00:04:48.243
And you do this by adding the on key.

107
00:04:49.110 --> 00:04:51.600
The on key is just like name,

108
00:04:51.600 --> 00:04:54.300
a reserved keyword or name

109
00:04:54.300 --> 00:04:57.030
for which GitHub Actions will be looking.

110
00:04:57.030 --> 00:05:01.320
And after on, you define the event or the events

111
00:05:01.320 --> 00:05:03.693
that should trigger this workflow to run.

112
00:05:04.620 --> 00:05:07.140
Now, we'll see multiple events in action later.

113
00:05:07.140 --> 00:05:09.510
For the moment, you can just add one event

114
00:05:09.510 --> 00:05:13.833
by writing workflow_dispatch here.

115
00:05:14.670 --> 00:05:17.610
Now, GitHub Actions defines many events

116
00:05:17.610 --> 00:05:18.750
to which you can listen

117
00:05:18.750 --> 00:05:20.700
and I'll get back to an overview

118
00:05:20.700 --> 00:05:23.430
of the available events later.

119
00:05:23.430 --> 00:05:27.810
This specific event here, workflow_dispatch,

120
00:05:27.810 --> 00:05:32.130
makes sure that we can manually trigger this workflow.

121
00:05:32.130 --> 00:05:34.470
So it's an event that waits for the user

122
00:05:34.470 --> 00:05:37.470
to manually start this workflow.

123
00:05:37.470 --> 00:05:39.690
Of course, there also are many events

124
00:05:39.690 --> 00:05:42.000
that will automatically start the workflow,

125
00:05:42.000 --> 00:05:44.163
and we'll take a look at those very soon.

126
00:05:45.060 --> 00:05:46.050
So now we have a name

127
00:05:46.050 --> 00:05:47.490
and we have our trigger.

128
00:05:47.490 --> 00:05:50.580
What's missing is the work that should be done.

129
00:05:50.580 --> 00:05:54.750
And for this, we define jobs with the jobs key.

130
00:05:54.750 --> 00:05:58.290
And it's important that this must be jobs, not job.

131
00:05:58.290 --> 00:05:59.793
It has to be jobs.

132
00:06:00.990 --> 00:06:04.230
Now, jobs does not take a value immediately,

133
00:06:04.230 --> 00:06:06.300
as we had it for name or on,

134
00:06:06.300 --> 00:06:08.220
instead you move to a new line

135
00:06:08.220 --> 00:06:10.950
and hit the Tab key on your keyboard

136
00:06:10.950 --> 00:06:15.810
because YAML, this format, works with indentation.

137
00:06:15.810 --> 00:06:19.710
And if you indent a field below another field,

138
00:06:19.710 --> 00:06:21.690
then it belongs to that field.

139
00:06:21.690 --> 00:06:24.540
And jobs needs a field that belongs to it

140
00:06:24.540 --> 00:06:29.010
and that is simply the first job you wanna define.

141
00:06:29.010 --> 00:06:31.140
Now you give that job a name.

142
00:06:31.140 --> 00:06:34.110
For example, first-job.

143
00:06:34.110 --> 00:06:35.820
This here is totally up to you.

144
00:06:35.820 --> 00:06:39.390
It can be first-job or firstjob like this

145
00:06:39.390 --> 00:06:42.450
or basic, whatever you want.

146
00:06:42.450 --> 00:06:44.643
I'll stick to first-job.

147
00:06:45.930 --> 00:06:49.290
Now, this then also doesn't take a value directly.

148
00:06:49.290 --> 00:06:52.800
Instead, you move to a new line and hit Tab again

149
00:06:52.800 --> 00:06:55.500
because just like the jobs field here,

150
00:06:55.500 --> 00:06:57.420
the job definition field,

151
00:06:57.420 --> 00:06:59.730
which we created here with an identifier

152
00:06:59.730 --> 00:07:01.920
of our choice also needs a couple

153
00:07:01.920 --> 00:07:06.750
of related fields that define some details about this job.

154
00:07:06.750 --> 00:07:10.200
So here we're saying that we have a bunch of jobs.

155
00:07:10.200 --> 00:07:13.290
Then we create a first-job with an identifier

156
00:07:13.290 --> 00:07:14.790
of our choice.

157
00:07:14.790 --> 00:07:17.130
And now for this first-job,

158
00:07:17.130 --> 00:07:20.490
we first of all have to define the runner

159
00:07:20.490 --> 00:07:24.000
on which the job will execute the different steps.

160
00:07:24.000 --> 00:07:25.080
So the environment

161
00:07:25.080 --> 00:07:28.140
in which the different steps should be executed.

162
00:07:28.140 --> 00:07:33.140
And this is defined by adding the runs-on key, like this.

163
00:07:33.600 --> 00:07:35.970
This again is a reserved name now.

164
00:07:35.970 --> 00:07:39.120
So the only identifier that's not reserved thus far

165
00:07:39.120 --> 00:07:40.470
is this job name.

166
00:07:40.470 --> 00:07:44.850
All other identifiers, like name, on, jobs and runs-on

167
00:07:44.850 --> 00:07:47.733
are reserved and have to be written like this.

168
00:07:48.690 --> 00:07:51.390
Now here we then define the environment we wanna use

169
00:07:51.390 --> 00:07:54.510
and GitHub Actions provides multiple environments

170
00:07:54.510 --> 00:07:56.220
we can use.

171
00:07:56.220 --> 00:07:58.980
If you search for GitHub Actions runners,

172
00:07:58.980 --> 00:08:00.870
you will find an overview

173
00:08:00.870 --> 00:08:03.720
of the runners you can use,

174
00:08:03.720 --> 00:08:05.550
some details about that,

175
00:08:05.550 --> 00:08:07.620
and also, if you scroll down,

176
00:08:07.620 --> 00:08:10.200
a list of the runners currently supported

177
00:08:10.200 --> 00:08:11.880
by GitHub Actions.

178
00:08:11.880 --> 00:08:14.850
Now, obviously that list will change over time

179
00:08:14.850 --> 00:08:16.437
but at the moment I'm recording this,

180
00:08:16.437 --> 00:08:19.500
you get various Windows Server environments,

181
00:08:19.500 --> 00:08:22.050
various Ubuntu environments we can use

182
00:08:22.050 --> 00:08:25.290
and various macOS environments we can use.

183
00:08:25.290 --> 00:08:27.810
And you see the identifiers you have to use

184
00:08:27.810 --> 00:08:31.920
in your script or in your workflow definition here

185
00:08:31.920 --> 00:08:34.320
in this middle column.

186
00:08:34.320 --> 00:08:36.990
And in my case here, I'm using ubuntu-latest,

187
00:08:36.990 --> 00:08:39.179
which at the time I'm recording this

188
00:08:39.179 --> 00:08:41.400
will lead to this Ubuntu version

189
00:08:41.400 --> 00:08:44.820
to be installed on that hosting machine.

190
00:08:44.820 --> 00:08:46.680
You see the hardware specifications

191
00:08:46.680 --> 00:08:48.540
of that hosting machine up here

192
00:08:48.540 --> 00:08:50.490
where you see the specification

193
00:08:50.490 --> 00:08:52.230
for Windows and Linux machines

194
00:08:52.230 --> 00:08:54.333
and for macOS machines.

195
00:08:55.380 --> 00:08:57.780
And this is all predefined by GitHub.

196
00:08:57.780 --> 00:09:00.120
So here I will ubuntu-latest

197
00:09:00.120 --> 00:09:02.580
to use this Linux runner

198
00:09:02.580 --> 00:09:05.400
on that given hardware specification.

199
00:09:05.400 --> 00:09:06.810
And as a next step,

200
00:09:06.810 --> 00:09:09.540
we have to define the steps that should be executed

201
00:09:09.540 --> 00:09:11.670
with the steps key.

202
00:09:11.670 --> 00:09:13.470
Again, this is a reserved name

203
00:09:13.470 --> 00:09:17.430
and now we move to a new line and indent again,

204
00:09:17.430 --> 00:09:19.980
and now we add a list of steps.

205
00:09:19.980 --> 00:09:22.470
And that list is added slightly differently

206
00:09:22.470 --> 00:09:24.570
than we added keys before

207
00:09:24.570 --> 00:09:26.880
because now we have to add a dash here

208
00:09:26.880 --> 00:09:28.860
and then thereafter again a couple

209
00:09:28.860 --> 00:09:33.000
of key-value pairs that describe this step.

210
00:09:33.000 --> 00:09:36.450
And multiple steps get multiple dashes.

211
00:09:36.450 --> 00:09:39.480
Now, that first step takes a name.

212
00:09:39.480 --> 00:09:41.400
And you should give your steps names

213
00:09:41.400 --> 00:09:43.590
to make it easier to identify them.

214
00:09:43.590 --> 00:09:46.380
Here I'll name this print greeting.

215
00:09:46.380 --> 00:09:48.543
That value, of course, is up to you though.

216
00:09:49.620 --> 00:09:51.870
Thereafter in a new line

217
00:09:51.870 --> 00:09:54.630
but still belonging to that same dash,

218
00:09:54.630 --> 00:09:58.110
we use the run key to define the command

219
00:09:58.110 --> 00:10:00.960
that should be executed in the command line.

220
00:10:00.960 --> 00:10:02.340
Now as mentioned before,

221
00:10:02.340 --> 00:10:06.150
when defining steps, you can either execute scripts

222
00:10:06.150 --> 00:10:08.220
or commands in the shell

223
00:10:08.220 --> 00:10:10.890
or use predefined actions.

224
00:10:10.890 --> 00:10:12.780
Here when using the run key,

225
00:10:12.780 --> 00:10:15.990
we're doing the former, we are defining a command

226
00:10:15.990 --> 00:10:18.600
that will be executed in the command line.

227
00:10:18.600 --> 00:10:21.060
And here I'll just echo something,

228
00:10:21.060 --> 00:10:23.730
which means I'll output a message in the command line

229
00:10:23.730 --> 00:10:27.330
where I just say Hello World between double quotes.

230
00:10:27.330 --> 00:10:29.970
And then I'll add a second step with a different name,

231
00:10:29.970 --> 00:10:32.130
which is print goodbye, for example,

232
00:10:32.130 --> 00:10:34.680
for this first basic example job,

233
00:10:34.680 --> 00:10:37.890
and here I'll also echo something in the command line

234
00:10:37.890 --> 00:10:39.873
and say done - bye.

235
00:10:40.830 --> 00:10:43.290
And this is now my first basic workflow

236
00:10:43.290 --> 00:10:46.110
with one job with two steps.

237
00:10:46.110 --> 00:10:49.830
And of course, this workflow doesn't do anything meaningful

238
00:10:49.830 --> 00:10:51.090
or useful yet

239
00:10:51.090 --> 00:10:53.070
but we're just getting started here

240
00:10:53.070 --> 00:10:56.103
and you already see the course syntax in action here.

