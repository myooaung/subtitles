WEBVTT
1
00:00:02.040 --> 00:00:05.280
So that was a lot of information about if

2
00:00:05.280 --> 00:00:06.960
and it is an important field

3
00:00:06.960 --> 00:00:08.490
because being able to run steps

4
00:00:08.490 --> 00:00:11.190
and jobs conditionally is important.

5
00:00:11.190 --> 00:00:12.600
But we don't just have if,

6
00:00:12.600 --> 00:00:16.440
we also have the special continue-on-error field

7
00:00:16.440 --> 00:00:20.370
and I also wanna show you what this field does.

8
00:00:20.370 --> 00:00:22.170
Now to show you what it does

9
00:00:22.170 --> 00:00:25.350
and to also see a comparison to the if field.

10
00:00:25.350 --> 00:00:28.590
I'll copy the execution flow file

11
00:00:28.590 --> 00:00:31.653
and name it, continue yml.

12
00:00:32.820 --> 00:00:35.160
And now in here what I'll do

13
00:00:35.160 --> 00:00:39.430
is I will remove this upload test report if check here

14
00:00:40.590 --> 00:00:43.380
and instead here on the run tests step,

15
00:00:43.380 --> 00:00:47.070
I will add the special continue-on-error field

16
00:00:47.070 --> 00:00:48.513
and set this to true.

17
00:00:49.830 --> 00:00:52.530
Now we could also use an expression here

18
00:00:52.530 --> 00:00:55.200
to derive the value dynamically

19
00:00:55.200 --> 00:00:58.110
but this is often something which you wanna hard code

20
00:00:58.110 --> 00:01:01.260
because typically you know whether this step

21
00:01:01.260 --> 00:01:03.090
should not block other steps

22
00:01:03.090 --> 00:01:05.790
from executing even if it fails,

23
00:01:05.790 --> 00:01:08.370
because that's what continue-on-error does.

24
00:01:08.370 --> 00:01:09.540
If you add it like this,

25
00:01:09.540 --> 00:01:12.390
if you set it to true you are saying that

26
00:01:12.390 --> 00:01:14.730
the job should continue execution

27
00:01:14.730 --> 00:01:16.710
even if that step fails.

28
00:01:16.710 --> 00:01:20.220
So the next step and also the next jobs thereafter

29
00:01:20.220 --> 00:01:23.520
will still be executed even if that step failed,

30
00:01:23.520 --> 00:01:26.160
that's what continue-on-error does.

31
00:01:26.160 --> 00:01:29.430
And that might sound similar to adding a if check here,

32
00:01:29.430 --> 00:01:31.413
but you'll see that it's not the same.

33
00:01:32.250 --> 00:01:34.470
And to show you that it's not the same

34
00:01:34.470 --> 00:01:37.660
I will break my test again by removing that A

35
00:01:38.610 --> 00:01:41.370
and I will add a new commit,

36
00:01:41.370 --> 00:01:42.870
create a new commit.

37
00:01:42.870 --> 00:01:47.870
Broke tests, added continue-on-error, and then push this.

38
00:01:51.030 --> 00:01:53.910
Now we can take a look at our actions

39
00:01:53.910 --> 00:01:58.560
and we now got two workflows running here

40
00:01:58.560 --> 00:02:02.520
because we added two workflow files with the same name,

41
00:02:02.520 --> 00:02:05.100
which actually can be confusing,

42
00:02:05.100 --> 00:02:07.530
I'll change this actually right now,

43
00:02:07.530 --> 00:02:10.169
but we'll still see the difference.

44
00:02:10.169 --> 00:02:13.080
I'll name this, continue website development

45
00:02:13.080 --> 00:02:15.780
since it's about continue-on-error.

46
00:02:15.780 --> 00:02:19.320
But nonetheless, here we will see that both workflows ran

47
00:02:19.320 --> 00:02:22.440
and we'll see a difference between these workflows.

48
00:02:22.440 --> 00:02:24.720
But I'll wait for these workflows to finish

49
00:02:24.720 --> 00:02:27.510
to show you what the difference is.

50
00:02:27.510 --> 00:02:30.270
So now both workflows finished

51
00:02:30.270 --> 00:02:33.210
and you can already see that one of them succeeded

52
00:02:33.210 --> 00:02:34.710
and the other one failed.

53
00:02:34.710 --> 00:02:37.710
And keep in mind, these workflows were triggered

54
00:02:37.710 --> 00:02:40.800
based on the same commit and all we changed

55
00:02:40.800 --> 00:02:43.320
is that we added continue-on-error

56
00:02:43.320 --> 00:02:46.923
and removed the if check on upload test report.

57
00:02:48.570 --> 00:02:52.590
Now the workflow that failed is the old workflow,

58
00:02:52.590 --> 00:02:54.870
which we worked on before.

59
00:02:54.870 --> 00:02:59.040
There, the test code step failed

60
00:02:59.040 --> 00:03:02.700
and therefore the upload test report step was executed

61
00:03:02.700 --> 00:03:04.170
because of our if check.

62
00:03:04.170 --> 00:03:07.020
But since test code failed,

63
00:03:07.020 --> 00:03:10.830
the overall job still counts as failed

64
00:03:10.830 --> 00:03:15.420
and the other jobs, build and deploy, were skipped.

65
00:03:15.420 --> 00:03:19.620
Because we only executed upload test report conditionally

66
00:03:19.620 --> 00:03:23.340
but this does not change the result that a step failed

67
00:03:23.340 --> 00:03:25.563
and therefore the overall job failed.

68
00:03:26.610 --> 00:03:30.010
Now the other workflow succeeded despite

69
00:03:30.990 --> 00:03:33.150
test code producing an error,

70
00:03:33.150 --> 00:03:35.040
you see the error here as well

71
00:03:35.040 --> 00:03:37.110
but you see that we have a check mark here

72
00:03:37.110 --> 00:03:41.250
because we added continue-on-error to that step

73
00:03:41.250 --> 00:03:42.993
This line of code here.

74
00:03:44.520 --> 00:03:46.920
So the workflow that succeeded overall

75
00:03:46.920 --> 00:03:49.200
is the workflow that has this line

76
00:03:49.200 --> 00:03:53.040
because continue-on-error does just what the name implies,

77
00:03:53.040 --> 00:03:56.100
it treats this step as a success

78
00:03:56.100 --> 00:03:58.740
despite its technically failing

79
00:03:58.740 --> 00:04:00.960
because we're basically overriding that

80
00:04:00.960 --> 00:04:02.970
by telling GitHub Actions that

81
00:04:02.970 --> 00:04:04.740
even if we have an error here

82
00:04:04.740 --> 00:04:08.430
we want to continue and treat this as successful.

83
00:04:08.430 --> 00:04:11.250
That's why the next step in line executes

84
00:04:11.250 --> 00:04:12.900
even without an if condition,

85
00:04:12.900 --> 00:04:16.800
because this step didn't fail officially.

86
00:04:16.800 --> 00:04:18.959
And all the other jobs also execute

87
00:04:18.959 --> 00:04:20.880
because again, test didn't fail

88
00:04:20.880 --> 00:04:24.240
because test code officially didn't fail,

89
00:04:24.240 --> 00:04:26.490
that's the difference here.

90
00:04:26.490 --> 00:04:27.990
And that's also the part

91
00:04:27.990 --> 00:04:31.080
where this conclusion and outcome value

92
00:04:31.080 --> 00:04:32.700
becomes important.

93
00:04:32.700 --> 00:04:35.790
You might remember that's the value we were able

94
00:04:35.790 --> 00:04:39.243
to access on a single step with help of the steps context.

95
00:04:40.110 --> 00:04:43.350
Now the conclusion field simply tells us

96
00:04:43.350 --> 00:04:46.230
whether the job is treated as a success

97
00:04:46.230 --> 00:04:49.740
after continue-on-error was evaluated.

98
00:04:49.740 --> 00:04:52.650
And typically that will be success

99
00:04:52.650 --> 00:04:55.410
because continue-on-error has the goal

100
00:04:55.410 --> 00:04:59.670
of treating the step as a success even if it failed.

101
00:04:59.670 --> 00:05:02.220
Now it could still fail for technical reasons

102
00:05:02.220 --> 00:05:04.080
if the runner somehow crashes

103
00:05:04.080 --> 00:05:06.690
and you could still manually cancel the job,

104
00:05:06.690 --> 00:05:07.920
and it could also be skipped

105
00:05:07.920 --> 00:05:11.340
if there was some if condition attached to the step,

106
00:05:11.340 --> 00:05:14.940
if that caused the step to not even be started

107
00:05:14.940 --> 00:05:18.360
but in most cases you will get success here.

108
00:05:18.360 --> 00:05:20.850
Now, outcome on the other hand is the value

109
00:05:20.850 --> 00:05:24.780
before continue-on-error was evaluated.

110
00:05:24.780 --> 00:05:27.930
Therefore, as it also says down here,

111
00:05:27.930 --> 00:05:30.930
when continue-on-error is set to true,

112
00:05:30.930 --> 00:05:34.440
outcome can be failure but the final conclusion

113
00:05:34.440 --> 00:05:36.690
is still success.

114
00:05:36.690 --> 00:05:39.330
And that's in the end what we had here in our example

115
00:05:39.330 --> 00:05:42.390
and that's what continue-on-error does.

116
00:05:42.390 --> 00:05:45.990
So should you use continue-on-error or if?

117
00:05:45.990 --> 00:05:47.880
That's the big question.

118
00:05:47.880 --> 00:05:49.590
And the answer is it depends,

119
00:05:49.590 --> 00:05:51.960
it depends on what your goals are.

120
00:05:51.960 --> 00:05:54.930
If you want your entire workflow to continue,

121
00:05:54.930 --> 00:05:59.520
even if that step fails, sure, use continue-on-error.

122
00:05:59.520 --> 00:06:01.380
If on the other hand you just wanna run

123
00:06:01.380 --> 00:06:04.020
some selected other steps or jobs

124
00:06:04.020 --> 00:06:06.060
and not the overall workflow,

125
00:06:06.060 --> 00:06:09.273
use if checks as we did it before instead.

