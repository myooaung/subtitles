WEBVTT
1
00:00:02.040 --> 00:00:04.320
Okay, so now we pushed some code

2
00:00:04.320 --> 00:00:07.380
and all the different branches to GitHub.

3
00:00:07.380 --> 00:00:10.230
Now, one thing you might notice here on my screen,

4
00:00:10.230 --> 00:00:12.270
is that GitHub also tells me that

5
00:00:12.270 --> 00:00:15.090
I could add a README to this page.

6
00:00:15.090 --> 00:00:20.090
And a README is simply a file with some extra information

7
00:00:20.910 --> 00:00:23.010
about this Repository.

8
00:00:23.010 --> 00:00:26.280
This extra information can help your coworkers,

9
00:00:26.280 --> 00:00:28.830
if that's a private Repository,

10
00:00:28.830 --> 00:00:30.600
it could help you in the future

11
00:00:30.600 --> 00:00:32.520
if you're coming back to this project.

12
00:00:32.520 --> 00:00:34.860
Or if you're doing some open source work

13
00:00:34.860 --> 00:00:37.560
and you're sharing your code with the entire world,

14
00:00:37.560 --> 00:00:39.780
then such a README file could provide

15
00:00:39.780 --> 00:00:42.630
some helpful instructions and information

16
00:00:42.630 --> 00:00:46.320
to all the visitors that might be visiting your Repository,

17
00:00:46.320 --> 00:00:48.903
and that might be using your code or package.

18
00:00:49.890 --> 00:00:51.930
Now, adding such a README is simple,

19
00:00:51.930 --> 00:00:56.670
you can do it locally by adding a README.md file.

20
00:00:56.670 --> 00:00:58.920
And you don't have to use all caps here,

21
00:00:58.920 --> 00:01:00.273
this is just a convention.

22
00:01:01.140 --> 00:01:03.870
Alternatively, you can also create it here on GitHub,

23
00:01:03.870 --> 00:01:06.090
and then GitHub will automatically

24
00:01:06.090 --> 00:01:08.400
merge it into your branch.

25
00:01:08.400 --> 00:01:11.820
And I'll do the latter, and create this file on GitHub,

26
00:01:11.820 --> 00:01:14.220
because that then also allows me to show you

27
00:01:14.220 --> 00:01:16.920
another key feature when it comes to working

28
00:01:16.920 --> 00:01:18.483
with remote repositories.

29
00:01:19.500 --> 00:01:24.500
So if I add a README here, then this editor opens up,

30
00:01:24.810 --> 00:01:29.810
and this editor uses Markdown for structuring the content.

31
00:01:30.510 --> 00:01:33.030
And you would use Markdown locally as well.

32
00:01:33.030 --> 00:01:36.720
Your README file does have to be a .md file,

33
00:01:36.720 --> 00:01:38.310
which stands for Markdown,

34
00:01:38.310 --> 00:01:42.420
and which is a special language or syntax you could use

35
00:01:42.420 --> 00:01:47.253
that allows you to easily write structured and rich text.

36
00:01:48.150 --> 00:01:51.000
Now, if you don't know how Markdown works,

37
00:01:51.000 --> 00:01:53.670
the official GitHub documentation gets you started,

38
00:01:53.670 --> 00:01:56.190
if you search for GitHub Markdown,

39
00:01:56.190 --> 00:01:58.920
and in this article you learn how you can

40
00:01:58.920 --> 00:02:03.060
format your text, and structure your text with Markdown.

41
00:02:03.060 --> 00:02:04.860
For example, you create a heading by

42
00:02:04.860 --> 00:02:07.110
adding a hash symbol here,

43
00:02:07.110 --> 00:02:11.730
and then we could say "Important Instructions."

44
00:02:11.730 --> 00:02:14.130
And then add some plain text where we, for example

45
00:02:14.130 --> 00:02:18.490
say "This is a demo repository for practicing

46
00:02:21.300 --> 00:02:23.097
Git and GitHub."

47
00:02:24.360 --> 00:02:26.190
And there are more features you can add

48
00:02:26.190 --> 00:02:29.520
with Markdown, like lists or code snippets.

49
00:02:29.520 --> 00:02:31.680
And again, this article gets you started,

50
00:02:31.680 --> 00:02:33.390
and tells you how you can format

51
00:02:33.390 --> 00:02:36.270
and structure your text with Markdown.

52
00:02:36.270 --> 00:02:38.820
Here, I'll just add this dummy README.

53
00:02:38.820 --> 00:02:42.150
We can also preview it and see how this will show up

54
00:02:42.150 --> 00:02:45.450
on this GitHub page once it has been published.

55
00:02:45.450 --> 00:02:49.233
And with that here, I'll just add a little instruction,

56
00:02:50.227 --> 00:02:52.920
"added README" as my extra message here.

57
00:02:52.920 --> 00:02:55.920
And now we commit directly to the main branch.

58
00:02:55.920 --> 00:02:58.740
So that's what I meant, you can also create commits,

59
00:02:58.740 --> 00:03:01.200
which are then added right here on GitHub.

60
00:03:01.200 --> 00:03:02.760
And that's what I'll do here.

61
00:03:02.760 --> 00:03:04.710
I'll commit this file.

62
00:03:04.710 --> 00:03:06.990
And now you see that in this main branch

63
00:03:06.990 --> 00:03:09.270
we have this README.md file,

64
00:03:09.270 --> 00:03:11.910
which contains the content we just added.

65
00:03:11.910 --> 00:03:16.910
Here we get the preview, but if I look at the code version,

66
00:03:17.160 --> 00:03:19.860
then we see the code we just wrote.

67
00:03:19.860 --> 00:03:21.810
So that's how we add this README.

68
00:03:21.810 --> 00:03:23.400
But now we have a problem.

69
00:03:23.400 --> 00:03:25.680
This README file with instructions

70
00:03:25.680 --> 00:03:29.220
that also show up down there, exists on GitHub,

71
00:03:29.220 --> 00:03:33.420
but it does not exist in our local Git Repository.

72
00:03:33.420 --> 00:03:36.360
And of course, if we continue work locally,

73
00:03:36.360 --> 00:03:38.130
we would therefore continue working

74
00:03:38.130 --> 00:03:40.200
on a different version of that code.

75
00:03:40.200 --> 00:03:43.230
And ultimately, if we then push again in the future,

76
00:03:43.230 --> 00:03:46.260
This would lead to problems because we would push

77
00:03:46.260 --> 00:03:50.550
outdated code to GitHub, because our code, our project

78
00:03:50.550 --> 00:03:53.730
would be missing this README.md file.

79
00:03:53.730 --> 00:03:57.060
So we need some way of downloading the latest code

80
00:03:57.060 --> 00:04:00.423
from GitHub to our local Git Repository.

81
00:04:01.470 --> 00:04:04.380
Now, in order to download code from GitHub

82
00:04:04.380 --> 00:04:06.810
to our local Git Repository,

83
00:04:06.810 --> 00:04:09.780
there is a useful command we can run locally.

84
00:04:09.780 --> 00:04:11.820
And that command will be very important,

85
00:04:11.820 --> 00:04:15.210
because here we created a README file on GitHub,

86
00:04:15.210 --> 00:04:17.010
but it's of course also possible that

87
00:04:17.010 --> 00:04:19.260
you may be pushed some updated code

88
00:04:19.260 --> 00:04:22.170
to this repository from a different device.

89
00:04:22.170 --> 00:04:25.020
Or that you're maybe working on this code in a team,

90
00:04:25.020 --> 00:04:27.210
and a colleague of you changed the code.

91
00:04:27.210 --> 00:04:30.480
And you wanna download that latest version that's on GitHub

92
00:04:30.480 --> 00:04:34.053
to your local Repository so that you can continue work.

93
00:04:35.220 --> 00:04:38.070
And in order to download code from GitHub,

94
00:04:38.070 --> 00:04:40.923
all you have to do is run Git pull.

95
00:04:41.850 --> 00:04:44.580
Git pull does what the name kind of implies,

96
00:04:44.580 --> 00:04:48.240
it pulls, it downloads the code from GitHub,

97
00:04:48.240 --> 00:04:51.513
and applies it to your local Git Repository.

98
00:04:52.500 --> 00:04:54.420
So here, if I run Git pull,

99
00:04:54.420 --> 00:04:56.760
with my remote Repository linked,

100
00:04:56.760 --> 00:04:59.940
which we did way earlier in this course here,

101
00:04:59.940 --> 00:05:04.320
I now see that some code was downloaded.

102
00:05:04.320 --> 00:05:08.340
You get a summary here, and you see that in the end,

103
00:05:08.340 --> 00:05:10.830
it updated this README.md file.

104
00:05:10.830 --> 00:05:15.030
And indeed, the README.md file is now showing up locally,

105
00:05:15.030 --> 00:05:18.393
and in it we see the content that we wrote on GitHub.

106
00:05:19.500 --> 00:05:21.810
So now we have the latest version of the code

107
00:05:21.810 --> 00:05:23.520
on our local machine again.

108
00:05:23.520 --> 00:05:25.650
And that's of course important because now,

109
00:05:25.650 --> 00:05:28.080
we're making sure that we're working

110
00:05:28.080 --> 00:05:30.240
on that latest version of the code again.

111
00:05:30.240 --> 00:05:32.700
So if we would now make changes here locally,

112
00:05:32.700 --> 00:05:34.590
and then push them to GitHub again,

113
00:05:34.590 --> 00:05:37.803
we would make sure that we're not pushing outdated code.

